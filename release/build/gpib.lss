
gpib.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00001646  00800100  0001d644  0001d6d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0001d644  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000966  00801746  00801746  0001ed1e  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0001ed1e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0001ed30  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00001798  00000000  00000000  0001ed70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00027e74  00000000  00000000  00020508  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000644c  00000000  00000000  0004837c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00012203  00000000  00000000  0004e7c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000061c8  00000000  00000000  000609cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000047cb  00000000  00000000  00066b94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0002703b  00000000  00000000  0006b35f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001788  00000000  00000000  0009239a  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00800100 l    d  .data	00000000 .data
00000000 l    d  .text	00000000 .text
00801746 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .note.gnu.avr.deviceinfo	00000000 .note.gnu.avr.deviceinfo
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 hal.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000002d8 l     O .text	0000001e __c.3743
000002f6 l     O .text	0000001d __c.3738
00000000 l    df *ABS*	00000000 LCD.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00800107 l     O .data	00000001 lcd_address
00800109 l     O .data	00000001 _displayControl
00800108 l     O .data	00000001 _displayMode
00000000 l    df *ABS*	00000000 lcd_printf.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000640e l     F .text	00000016 _putc_win
00000000 l    df *ABS*	00000000 time.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00006f06 l     F .text	0000002a IS_Leap
00800263 l     O .data	00000018 __days
0080179a l     O .bss	00000016 t.3797
008017b0 l     O .bss	00000002 p.3798
0080177c l     O .bss	00000008 ts.3876
00801784 l     O .bss	00000016 t.3809
0080027b l     O .data	0000001a __days_sum
0000076c l     O .text	00000012 __c.3916
0000075b l     O .text	00000011 __c.3918
0000074a l     O .text	00000011 __c.3920
00000738 l     O .text	00000012 __c.3922
00000727 l     O .text	00000011 __c.3924
00000710 l     O .text	00000017 __c.3926
0000077e l     O .text	00000021 __c.3895
0000079f l     O .text	0000001d __c.3770
008017f2 l     O .bss	00000020 buf.3775
008017d2 l     O .bss	00000020 buf.3783
008017b2 l     O .bss	00000020 buf.3787
000006f7 l     O .text	00000019 __c.3955
000006de l     O .text	00000019 __c.3957
000006c5 l     O .text	00000019 __c.3961
000006ac l     O .text	00000019 __c.3963
0000069a l     O .text	00000012 __c.3972
00000685 l     O .text	00000015 __c.3974
0000066e l     O .text	00000017 __c.3976
00000654 l     O .text	0000001a __c.3978
00000630 l     O .text	00000024 __c.3980
0000061e l     O .text	00000012 __c.3987
0000060d l     O .text	00000011 __c.3989
000005fc l     O .text	00000011 __c.3991
000005ea l     O .text	00000012 __c.3993
000005d9 l     O .text	00000011 __c.3995
00000000 l    df *ABS*	00000000 mmc.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000d754 l     F .text	00000004 xchg_spi
0000d758 l     F .text	0000000c deselect
0000d764 l     F .text	0000004e rcvr_datablock
0000d7d6 l     F .text	0000003a select
000007bc l     O .text	00000010 __c.3738
0000d810 l     F .text	00000086 send_cmd
0000d896 l     F .text	00000054 xmit_datablock
00801817 l     O .bss	00000001 CardType
00801819 l     O .bss	00000001 Timer1
00801818 l     O .bss	00000001 Timer2
00000000 l    df *ABS*	00000000 posix.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00800710 l     O .data	00000014 CSWTCH.97
00000c78 l     O .text	00000018 __c.3715
00000c60 l     O .text	00000018 __c.3722
0000eeb0 l     F .text	0000001a _fprintf_putc
00000c47 l     O .text	0000000d __c.3914
00000c3e l     O .text	00000009 __c.3916
00000c39 l     O .text	00000005 __c.3918
00000c33 l     O .text	00000006 __c.3920
00000c2a l     O .text	00000009 __c.3922
00000c1d l     O .text	0000000d __c.3924
00000c10 l     O .text	0000000d __c.3926
00000c03 l     O .text	0000000d __c.3928
00000bf7 l     O .text	0000000c __c.3930
00000beb l     O .text	0000000c __c.3932
00000bdf l     O .text	0000000c __c.3934
00801831 l     O .bss	0000002e _dp
00801824 l     O .bss	0000000d _de
00000bd7 l     O .text	00000008 __c.4038
00000bd3 l     O .text	00000004 __c.4040
00000bb4 l     O .text	0000001f __c.4069
00800724 l     O .data	0000000a defopt.4067
00000c54 l     O .text	0000000c __c.3793
00000000 l    df *ABS*	00000000 posix_tests.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000ea2 l     O .text	0000000c __c.3739
00000de2 l     O .text	000000c0 __c.3741
00000db5 l     O .text	0000000c __c.3792
00000da5 l     O .text	00000010 __c.3794
00000d98 l     O .text	0000000d __c.3796
00000d88 l     O .text	00000010 __c.3798
00000d7b l     O .text	0000000d __c.3800
00000d5f l     O .text	0000000f __c.3805
00000d6e l     O .text	0000000d __c.3802
00000d4c l     O .text	00000013 __c.3809
00800187 l     O .data	00000002 _pagesize
00000d45 l     O .text	00000007 __c.3819
00000d43 l     O .text	00000002 __c.3821
00000dce l     O .text	00000010 __c.3774
00000dcc l     O .text	00000002 __c.3779
00000dc1 l     O .text	0000000b __c.3781
00000d31 l     O .text	00000012 __c.3833
00000d2d l     O .text	00000004 __c.3835
00000d13 l     O .text	0000001a __c.3840
00000cf2 l     O .text	00000021 __c.3853
00000ce4 l     O .text	0000000e __c.3855
00000cce l     O .text	00000016 __c.3857
00000c9b l     O .text	00000023 __c.3865
00000cbe l     O .text	00000010 __c.3862
00000c90 l     O .text	0000000b __c.3869
00000dde l     O .text	00000004 __c.3764
00000000 l    df *ABS*	00000000 gpib.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000011b1 l     O .text	00000011 __c.4280
0000119e l     O .text	00000013 __c.4285
00001178 l     O .text	00000026 __c.4290
0000115d l     O .text	0000001b __c.4292
00001136 l     O .text	00000027 __c.4297
0000111b l     O .text	0000001b __c.4299
000010f8 l     O .text	00000023 __c.4305
000010ec l     O .text	0000000c __c.4313
000010e1 l     O .text	0000000b __c.4318
000010d7 l     O .text	0000000a __c.4320
000010a9 l     O .text	0000002e __c.4325
00001017 l     O .text	0000001a __c.4358
00001031 l     O .text	0000001b __c.4354
0000104c l     O .text	0000001b __c.4351
00001067 l     O .text	00000028 __c.4346
0000108f l     O .text	0000001a __c.4342
00001004 l     O .text	00000013 __c.4362
00000ffb l     O .text	00000009 __c.4404
00000ff5 l     O .text	00000006 __c.4406
00000fea l     O .text	0000000b __c.4410
00000fdf l     O .text	0000000b __c.4412
00000fd4 l     O .text	0000000b __c.4414
00000fbb l     O .text	00000019 __c.4430
00000f8e l     O .text	0000002d __c.4433
00000f67 l     O .text	00000027 __c.4437
00000f4d l     O .text	0000001a __c.4447
00000f25 l     O .text	00000028 __c.4452
00000000 l    df *ABS*	00000000 gpib_task.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00001474 l     O .text	00000012 __c.4264
00001463 l     O .text	00000011 __c.4266
0000144a l     O .text	00000019 __c.4268
00001430 l     O .text	0000001a __c.4314
00001405 l     O .text	0000002b __c.4316
000013ee l     O .text	00000017 __c.4318
000013e2 l     O .text	0000000c __c.4320
000013dc l     O .text	00000006 __c.4324
000013ca l     O .text	00000012 __c.4326
000013c3 l     O .text	00000007 __c.4331
000013b8 l     O .text	0000000b __c.4333
000013b1 l     O .text	00000007 __c.4335
000013a4 l     O .text	0000000d __c.4337
00001393 l     O .text	00000011 __c.4339
00001372 l     O .text	00000021 __c.4366
00001358 l     O .text	0000001a __c.4368
00001345 l     O .text	00000013 __c.4373
00001332 l     O .text	00000013 __c.4375
0000132b l     O .text	00000007 __c.4377
00001324 l     O .text	00000007 __c.4379
0000131d l     O .text	00000007 __c.4381
00001311 l     O .text	0000000c __c.4383
00001304 l     O .text	0000000d __c.4385
000012fd l     O .text	00000007 __c.4387
000012e1 l     O .text	0000001c __c.4389
0000128e l     O .text	00000007 __c.4409
0000127d l     O .text	00000011 __c.4411
0000126b l     O .text	00000012 __c.4413
00001257 l     O .text	00000014 __c.4415
00001247 l     O .text	00000010 __c.4417
0000123b l     O .text	0000000c __c.4419
0000122a l     O .text	00000011 __c.4424
00001218 l     O .text	00000012 __c.4426
000011f2 l     O .text	00000026 __c.4428
000011e1 l     O .text	00000011 __c.4433
000012da l     O .text	00000007 __c.4394
000012d8 l     O .text	00000002 __c.4396
000012c6 l     O .text	00000012 __c.4398
000012b5 l     O .text	00000011 __c.4400
000012a1 l     O .text	00000014 __c.4402
00001295 l     O .text	0000000c __c.4404
000011d5 l     O .text	0000000c __c.4444
000011d3 l     O .text	00000002 __c.4446
000011cd l     O .text	00000006 __c.4448
000011c9 l     O .text	00000004 __c.4453
000011c4 l     O .text	00000002 __c.4457
000011c6 l     O .text	00000003 __c.4455
000011c2 l     O .text	00000002 __c.4465
00000000 l    df *ABS*	00000000 ss80.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000277f l     O .text	0000000d __c.4256
0000276d l     O .text	00000012 __c.4258
0080189b l     O .bss	00000005 B.4269
00801888 l     O .bss	00000013 B.4273
0080187b l     O .bss	0000000d B.4277
000025ac l     O .text	00000005 __c.4380
000025a1 l     O .text	0000000b __c.4382
0000258d l     O .text	00000014 __c.4392
00002572 l     O .text	0000001b __c.4394
00002561 l     O .text	00000011 __c.4402
0000253e l     O .text	00000023 __c.4404
00002521 l     O .text	0000001d __c.4406
00002502 l     O .text	0000001f __c.4408
000024ea l     O .text	00000018 __c.4413
000024d0 l     O .text	0000001a __c.4418
000024aa l     O .text	00000026 __c.4427
00002491 l     O .text	00000019 __c.4429
00002395 l     O .text	00000025 __c.4451
000023ba l     O .text	0000001a __c.4449
000023d4 l     O .text	00000016 __c.4447
000023ea l     O .text	0000000e __c.4445
000023f8 l     O .text	0000001c __c.4443
00002414 l     O .text	0000001d __c.4441
00002462 l     O .text	00000019 __c.4434
0000247b l     O .text	00000016 __c.4431
0000244a l     O .text	00000018 __c.4436
00002431 l     O .text	00000019 __c.4439
00002374 l     O .text	00000021 __c.4453
0000235e l     O .text	00000016 __c.4455
00002341 l     O .text	0000001d __c.4457
00002325 l     O .text	0000001c __c.4459
00002314 l     O .text	00000011 __c.4461
000022f6 l     O .text	0000001e __c.4463
000022d7 l     O .text	0000001f __c.4465
000022bc l     O .text	0000001b __c.4467
000022a3 l     O .text	00000019 __c.4469
0000228c l     O .text	00000017 __c.4471
0000226b l     O .text	00000021 __c.4473
0000224b l     O .text	00000020 __c.4475
00002213 l     O .text	00000038 __c.4478
000020d0 l     O .text	00000020 __c.4511
000020bc l     O .text	00000014 __c.4513
00002651 l     O .text	00000029 __c.4341
00002604 l     O .text	00000026 __c.4349
0000262a l     O .text	00000014 __c.4347
0000263e l     O .text	00000013 __c.4343
000025dc l     O .text	00000028 __c.4353
000025b1 l     O .text	0000002b __c.4355
000020a2 l     O .text	0000001a __c.4520
0000208f l     O .text	00000013 __c.4522
0000275a l     O .text	00000013 __c.4283
00002083 l     O .text	0000000c __c.4536
00002070 l     O .text	00000013 __c.4543
00002061 l     O .text	0000000f __c.4545
00002200 l     O .text	00000013 __c.4487
000021e7 l     O .text	00000019 __c.4489
000021c2 l     O .text	00000025 __c.4492
000021a5 l     O .text	0000001d __c.4495
00002187 l     O .text	0000001e __c.4497
00002160 l     O .text	00000027 __c.4499
0000214c l     O .text	00000014 __c.4501
0000212c l     O .text	00000020 __c.4503
000020f0 l     O .text	0000003c __c.4506
00002045 l     O .text	0000001c __c.4552
00002022 l     O .text	00000023 __c.4559
00002716 l     O .text	00000028 __c.4316
000026f8 l     O .text	0000001e __c.4318
000026c7 l     O .text	00000019 __c.4322
000026e0 l     O .text	00000018 __c.4320
000026a2 l     O .text	00000025 __c.4327
0000267a l     O .text	00000028 __c.4329
0000273e l     O .text	0000001c __c.4299
0000200c l     O .text	00000016 __c.4564
00001ff6 l     O .text	00000016 __c.4566
00001fe1 l     O .text	00000015 __c.4568
00001fd2 l     O .text	0000000f __c.4570
00001fbe l     O .text	00000014 __c.4572
00001f8a l     O .text	00000034 __c.4574
00001f56 l     O .text	00000034 __c.4576
00000000 l    df *ABS*	00000000 malloc.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 ff.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00009002 l     F .text	0000002a ld_dword
0000902c l     F .text	0000000c st_dword
00009038 l     F .text	00000012 mem_set
0000904a l     F .text	0000001e mem_cmp
00009068 l     F .text	0000010c tchar2uni
00009174 l     F .text	00000050 clst2sect
000091c4 l     F .text	00000078 clmt_clust
0000923c l     F .text	0000001e sum_sfn
0000925a l     F .text	00000058 get_ldnumber
00801812 l     O .bss	00000001 CurrVol
000092b2 l     F .text	00000058 validate
0000930a l     F .text	00000016 mem_cpy.part.0
00009320 l     F .text	0000015a put_utf
0000947a l     F .text	00000232 get_fileinfo
000096ac l     F .text	0000002a ld_clust.isra.4
000096d6 l     F .text	0000001a st_clust.isra.5
000096f0 l     F .text	000000a6 sync_window.part.6
00009796 l     F .text	000000e4 sync_fs
0000987a l     F .text	00000150 dir_clear
000099ca l     F .text	00000076 move_window
00009a40 l     F .text	00000080 check_fs
00009ac0 l     F .text	000004c4 mount_volume
00801815 l     O .bss	00000002 FatFs
00801813 l     O .bss	00000002 Fsid
00009f84 l     F .text	000001fe put_fat
0000a182 l     F .text	00000168 get_fat.isra.10
0000a2ea l     F .text	00000182 dir_sdi
0000a46c l     F .text	0000024c create_chain
0000a6b8 l     F .text	00000122 remove_chain
0000a7da l     F .text	000001d0 dir_next
0000a9aa l     F .text	00000074 dir_alloc
0000aa1e l     F .text	000001a4 dir_read
0080034d l     O .data	0000000d LfnOfs
0000abc2 l     F .text	00000090 dir_remove
0000ac52 l     F .text	0000021c dir_find
0000ae6e l     F .text	00000348 dir_register
0000b1b6 l     F .text	0000046c follow_path
008002cd l     O .data	00000080 ExCvt
008002bb l     O .data	00000012 badchr.4438
008002b1 l     O .data	0000000a defopt.4496
00800295 l     O .data	0000000e cst.4494
008002a3 l     O .data	0000000e cst32.4495
00000000 l    df *ABS*	00000000 ffunicode.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00800608 l     O .data	00000100 uc437
0080035a l     O .data	000000bc cvt2.1843
00800416 l     O .data	000001f2 cvt1.1842
00000000 l    df *ABS*	00000000 fatfs_sup.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000a57 l     O .text	00000007 __c.3717
00800708 l     O .data	00000008 CSWTCH.25
00000a46 l     O .text	00000011 __c.3753
00000a28 l     O .text	0000001e __c.3755
00000a09 l     O .text	0000001f __c.3757
000009eb l     O .text	0000001e __c.3759
000009cd l     O .text	0000001e __c.3761
000009ae l     O .text	0000001f __c.3763
0000098f l     O .text	0000001f __c.3765
00000970 l     O .text	0000001f __c.3767
00000951 l     O .text	0000001f __c.3769
00000932 l     O .text	0000001f __c.3771
00000914 l     O .text	0000001e __c.3773
000008ef l     O .text	00000025 __c.3775
000008a2 l     O .text	0000004d __c.3777
00000887 l     O .text	0000001b __c.3783
00000865 l     O .text	00000022 __c.3785
00000863 l     O .text	00000002 __c.3787
00000000 l    df *ABS*	00000000 stringsup.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000004fe l     O .text	00000020 __c.3707
000004d8 l     O .text	00000026 __c.3873
00000000 l    df *ABS*	00000000 printf.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00007e66 l     F .text	00000018 _putc_fn
00000000 l    df *ABS*	00000000 mmc_hal.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000e01a l     F .text	0000003c mmc_task
00000847 l     O .text	0000001c __c.3715
0000083a l     O .text	0000000d __c.3743
0000082a l     O .text	00000010 __c.3756
00801822 l     O .bss	00000002 mmc_init_flag
0000081e l     O .text	0000000c __c.3758
0000080d l     O .text	00000011 __c.3760
000007ef l     O .text	0000001e __c.3763
000007da l     O .text	00000015 __c.3765
000007cc l     O .text	0000000e __c.3767
00000000 l    df *ABS*	00000000 fatfs_tests.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000ba8 l     O .text	0000000c __c.3708
00000b2c l     O .text	0000007c __c.3710
00000a9c l     O .text	0000000e __c.3749
00000a73 l     O .text	00000029 __c.3753
00000a5e l     O .text	00000015 __c.3755
00000afc l     O .text	00000020 __c.3728
00000aec l     O .text	00000010 __c.3730
00000ad8 l     O .text	00000014 __c.3732
00000aca l     O .text	0000000e __c.3734
00000aaa l     O .text	00000020 __c.3736
00000b1c l     O .text	00000010 __c.3720
00000000 l    df *ABS*	00000000 gpib_tests.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000154d l     O .text	0000000b __c.4472
00001493 l     O .text	000000ba __c.4474
00001486 l     O .text	0000000d __c.4482
00000000 l    df *ABS*	00000000 drives.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00001efc l     O .text	00000025 __c.4537
00001ec3 l     O .text	00000039 __c.4539
00001e8e l     O .text	00000035 __c.4541
00001e59 l     O .text	00000035 __c.4543
00001e21 l     O .text	00000038 __c.4545
00001df6 l     O .text	0000002b __c.4547
00001dd2 l     O .text	00000024 __c.4560
00001db0 l     O .text	00000022 __c.4568
00801879 l     O .bss	00000002 stack_ind
0080186f l     O .bss	0000000a stack_p
00001d98 l     O .text	00000018 __c.4591
00001d79 l     O .text	0000001f __c.4593
00001d5a l     O .text	0000001f __c.4595
00001d3b l     O .text	0000001f __c.4604
00001cce l     O .text	00000037 __c.4619
00001d05 l     O .text	00000036 __c.4617
00001cc1 l     O .text	0000000d __c.4641
000019e4 l     O .text	00000022 __c.4693
00001a06 l     O .text	00000030 __c.4690
00001a36 l     O .text	00000016 __c.4688
00001a4c l     O .text	0000002f __c.4685
00001a7b l     O .text	00000030 __c.4682
00001aab l     O .text	00000019 __c.4680
00001ca3 l     O .text	0000001e __c.4643
00001c8a l     O .text	00000019 __c.4647
00001c62 l     O .text	00000028 __c.4649
00001c38 l     O .text	0000002a __c.4653
00001c07 l     O .text	00000031 __c.4656
00001bda l     O .text	0000002d __c.4659
00001bac l     O .text	0000002e __c.4662
00001b7e l     O .text	0000002e __c.4665
00001b4c l     O .text	00000032 __c.4668
00001b20 l     O .text	0000002c __c.4671
00001af2 l     O .text	0000002e __c.4674
00001ac4 l     O .text	0000002e __c.4677
000019c2 l     O .text	00000022 __c.4697
000019a5 l     O .text	0000001d __c.4699
0000197e l     O .text	00000027 __c.4701
00001965 l     O .text	00000019 __c.4712
00001953 l     O .text	00000012 __c.4723
00001931 l     O .text	00000022 __c.4729
00001890 l     O .text	00000017 __c.4744
00001879 l     O .text	00000017 __c.4746
00001862 l     O .text	00000017 __c.4748
000018d5 l     O .text	00000017 __c.4738
000018be l     O .text	00000017 __c.4740
000018a7 l     O .text	00000017 __c.4742
0000191a l     O .text	00000017 __c.4732
00001903 l     O .text	00000017 __c.4734
000018ec l     O .text	00000017 __c.4736
00001860 l     O .text	00000002 __c.4753
00001840 l     O .text	00000020 __c.4761
000015b7 l     O .text	00000005 __c.4880
000015b5 l     O .text	00000002 __c.4882
000015d5 l     O .text	00000009 __c.4872
000015cb l     O .text	0000000a __c.4874
000015c3 l     O .text	00000008 __c.4876
000015bc l     O .text	00000007 __c.4878
00001837 l     O .text	00000009 __c.4764
00001818 l     O .text	0000001f __c.4766
0000180e l     O .text	0000000a __c.4768
00001806 l     O .text	00000008 __c.4770
00001802 l     O .text	00000004 __c.4772
000017fd l     O .text	00000005 __c.4774
000017f6 l     O .text	00000007 __c.4776
000017ec l     O .text	0000000a __c.4778
000017e9 l     O .text	00000003 __c.4780
000017e2 l     O .text	00000007 __c.4782
000017d4 l     O .text	0000000e __c.4784
000017c4 l     O .text	00000010 __c.4786
000017b6 l     O .text	0000000e __c.4788
000017b1 l     O .text	00000005 __c.4790
000017aa l     O .text	00000007 __c.4792
000017a2 l     O .text	00000008 __c.4794
00001798 l     O .text	0000000a __c.4796
0000178a l     O .text	0000000e __c.4798
0000177a l     O .text	00000010 __c.4800
0000176a l     O .text	00000010 __c.4802
0000175f l     O .text	0000000b __c.4804
00001754 l     O .text	0000000b __c.4806
0000173c l     O .text	00000018 __c.4808
00001729 l     O .text	00000013 __c.4810
0000171d l     O .text	0000000c __c.4812
0000170a l     O .text	00000013 __c.4814
000016fc l     O .text	0000000e __c.4816
000016ea l     O .text	00000012 __c.4818
000016e3 l     O .text	00000007 __c.4820
000016d9 l     O .text	0000000a __c.4822
000016cc l     O .text	0000000d __c.4824
000016c3 l     O .text	00000009 __c.4826
000016b8 l     O .text	0000000b __c.4828
000016a7 l     O .text	00000011 __c.4830
0000169c l     O .text	0000000b __c.4832
00001693 l     O .text	00000009 __c.4834
0000168c l     O .text	00000007 __c.4836
00001682 l     O .text	0000000a __c.4838
00001663 l     O .text	0000001f __c.4840
00001659 l     O .text	0000000a __c.4842
00001651 l     O .text	00000008 __c.4844
0000164d l     O .text	00000004 __c.4846
00001648 l     O .text	00000005 __c.4848
00001641 l     O .text	00000007 __c.4850
00001637 l     O .text	0000000a __c.4852
00001634 l     O .text	00000003 __c.4854
0000162d l     O .text	00000007 __c.4856
00001621 l     O .text	0000000c __c.4858
00001610 l     O .text	00000011 __c.4860
000015fe l     O .text	00000012 __c.4862
000015f8 l     O .text	00000006 __c.4864
000015ee l     O .text	0000000a __c.4866
000015e5 l     O .text	00000009 __c.4868
000015de l     O .text	00000007 __c.4870
000015b0 l     O .text	00000005 __c.4887
000015ae l     O .text	00000002 __c.4889
0000155a l     O .text	00000008 __c.4908
00001562 l     O .text	00000022 __c.4906
00001584 l     O .text	00000008 __c.4904
0000158c l     O .text	00000022 __c.4902
00001558 l     O .text	00000002 __c.4913
00000000 l    df *ABS*	00000000 drives_sup.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00001f32 l     O .text	00000007 __c.3768
00001f39 l     O .text	0000001d __c.3764
00001f21 l     O .text	00000011 __c.3770
00000000 l    df *ABS*	00000000 amigo.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00016a34 l     F .text	000000a0 amigo_overflow_check
00002f2d l     O .text	00000019 __c.4229
00016ad4 l     F .text	000000de amigo_chs_to_logical
00002eda l     O .text	0000002b __c.4222
00002fad l     O .text	00000018 __c.4199
00002f8f l     O .text	0000001e __c.4205
00002f75 l     O .text	0000001a __c.4207
00002f60 l     O .text	00000015 __c.4213
00002f46 l     O .text	0000001a __c.4215
00002f05 l     O .text	00000028 __c.4252
00002eca l     O .text	00000010 __c.4263
00002eb5 l     O .text	00000015 __c.4267
00002e9b l     O .text	0000001a __c.4274
00002e7c l     O .text	0000001f __c.4281
00002e62 l     O .text	0000001a __c.4288
00002e55 l     O .text	0000000d __c.4290
00002e45 l     O .text	00000010 __c.4297
00002e2b l     O .text	0000001a __c.4299
00002e1c l     O .text	0000000f __c.4303
00002db5 l     O .text	00000067 __c.4310
00002d4e l     O .text	00000067 __c.4312
00002ce7 l     O .text	00000067 __c.4314
00002c82 l     O .text	00000065 __c.4316
00002c32 l     O .text	00000050 __c.4321
00002be2 l     O .text	00000050 __c.4323
00002b92 l     O .text	00000050 __c.4325
00002b41 l     O .text	00000051 __c.4327
00002b0f l     O .text	00000032 __c.4339
00002aed l     O .text	00000022 __c.4341
00002acc l     O .text	00000021 __c.4343
00002aab l     O .text	00000021 __c.4345
00002a7c l     O .text	0000002f __c.4347
00002a5c l     O .text	00000020 __c.4350
00002a48 l     O .text	00000014 __c.4353
00002a34 l     O .text	00000014 __c.4356
00002a0b l     O .text	00000029 __c.4358
000029ea l     O .text	00000021 __c.4360
000029da l     O .text	00000010 __c.4363
000029b8 l     O .text	00000022 __c.4365
0000299c l     O .text	0000001c __c.4367
00002973 l     O .text	00000029 __c.4369
00002953 l     O .text	00000020 __c.4371
00002928 l     O .text	0000002b __c.4373
00002909 l     O .text	0000001f __c.4375
000028f9 l     O .text	00000010 __c.4378
000028c7 l     O .text	00000032 __c.4383
000028a7 l     O .text	00000020 __c.4387
00002886 l     O .text	00000021 __c.4390
00002867 l     O .text	0000001f __c.4393
00002845 l     O .text	00000022 __c.4396
00002829 l     O .text	0000001c __c.4399
00002809 l     O .text	00000020 __c.4402
000027e0 l     O .text	00000029 __c.4407
000027b5 l     O .text	0000002b __c.4410
0000278c l     O .text	00000029 __c.4413
00000000 l    df *ABS*	00000000 printer.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00003050 l     O .text	00000021 __c.4190
0000307f l     O .text	00000015 __c.4182
00003071 l     O .text	0000000e __c.4184
000030b6 l     O .text	00000022 __c.4172
000030a0 l     O .text	00000016 __c.4174
00003094 l     O .text	0000000c __c.4176
00003049 l     O .text	00000007 __c.4196
0000302d l     O .text	0000001c __c.4201
00003013 l     O .text	0000001a __c.4203
00002ffe l     O .text	00000015 __c.4212
00002fec l     O .text	00000012 __c.4217
00002fda l     O .text	00000012 __c.4219
00002fc5 l     O .text	00000015 __c.4221
00000000 l    df *ABS*	00000000 lifutils.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000044f5 l     O .text	0000000a __c.4132
0000432c l     O .text	000001c9 __c.4134
000042e2 l     O .text	00000029 __c.4153
000042ca l     O .text	00000018 __c.4158
000042a5 l     O .text	00000025 __c.4170
0000428c l     O .text	00000019 __c.4176
0000426b l     O .text	00000021 __c.4183
0000422f l     O .text	0000003c __c.4192
000041f2 l     O .text	0000003d __c.4201
008018cd l     O .bss	00000020 _lif_ctime_buf.4304
008018ad l     O .bss	00000020 _timestr.4309
000041ed l     O .text	00000005 __c.4324
000041d3 l     O .text	0000001a __c.4326
000041b6 l     O .text	0000001d __c.4328
00004199 l     O .text	0000001d __c.4330
0000417c l     O .text	0000001d __c.4332
0000415f l     O .text	0000001d __c.4334
00004142 l     O .text	0000001d __c.4336
00004125 l     O .text	0000001d __c.4338
00004108 l     O .text	0000001d __c.4340
000040eb l     O .text	0000001d __c.4342
000040d1 l     O .text	0000001a __c.4344
000040b5 l     O .text	0000001c __c.4346
00004098 l     O .text	0000001d __c.4348
0000407b l     O .text	0000001d __c.4350
0000405f l     O .text	0000001c __c.4352
00004043 l     O .text	0000001c __c.4354
00004029 l     O .text	0000001a __c.4356
0000400f l     O .text	0000001a __c.4358
00003ff3 l     O .text	0000001c __c.4360
00003fd7 l     O .text	0000001c __c.4362
00003fba l     O .text	0000001d __c.4364
00003f9d l     O .text	0000001d __c.4366
00003f80 l     O .text	0000001d __c.4368
00003f64 l     O .text	0000001c __c.4370
00003f4a l     O .text	0000001a __c.4372
00003f48 l     O .text	00000002 __c.4374
00003f29 l     O .text	0000001f __c.4381
00003ef0 l     O .text	00000039 __c.4383
00003ed8 l     O .text	00000018 __c.4385
00003e9f l     O .text	00000039 __c.4387
00003e66 l     O .text	00000039 __c.4389
00003e41 l     O .text	00000025 __c.4391
00003e12 l     O .text	0000002f __c.4393
00003de6 l     O .text	0000002c __c.4395
00003dc5 l     O .text	00000021 __c.4401
00003d81 l     O .text	00000044 __c.4403
00003d40 l     O .text	00000041 __c.4405
00003d12 l     O .text	0000002e __c.4407
00003cc7 l     O .text	0000004b __c.4409
00003c7c l     O .text	0000004b __c.4411
00003c51 l     O .text	0000002b __c.4413
00003c25 l     O .text	0000002c __c.4415
00003b62 l     O .text	0000003a __c.4470
00003b42 l     O .text	00000020 __c.4479
00003af5 l     O .text	0000004d __c.4504
00003bd0 l     O .text	00000055 __c.4431
00003bc3 l     O .text	0000000d __c.4433
00003bb6 l     O .text	0000000d __c.4441
00003ba9 l     O .text	0000000d __c.4446
00003b9c l     O .text	0000000d __c.4451
00003abd l     O .text	00000038 __c.4516
00003a94 l     O .text	00000029 __c.4518
00003a43 l     O .text	00000051 __c.4521
00003a04 l     O .text	0000003f __c.4534
000039ce l     O .text	00000036 __c.4536
0000399b l     O .text	00000033 __c.4538
00003968 l     O .text	00000033 __c.4540
00003951 l     O .text	00000017 __c.4550
00003911 l     O .text	00000040 __c.4552
000038c5 l     O .text	0000004c __c.4555
00003895 l     O .text	00000030 __c.4557
00003893 l     O .text	00000002 __c.4560
00003887 l     O .text	0000000c __c.4562
0000387a l     O .text	0000000d __c.4564
00003869 l     O .text	00000011 __c.4566
00003856 l     O .text	00000013 __c.4568
00003843 l     O .text	00000013 __c.4570
00003830 l     O .text	00000013 __c.4572
00003809 l     O .text	00000027 __c.4579
000037e4 l     O .text	00000025 __c.4581
000037ab l     O .text	00000039 __c.4595
00003787 l     O .text	00000024 __c.4612
00003779 l     O .text	0000000e __c.4629
0000376b l     O .text	0000000e __c.4634
0000375d l     O .text	0000000e __c.4636
0000372a l     O .text	00000033 __c.4650
000036fc l     O .text	0000002e __c.4652
000036cd l     O .text	0000002f __c.4654
0000369d l     O .text	00000030 __c.4656
0000366e l     O .text	0000002f __c.4658
0000363e l     O .text	00000030 __c.4660
00003617 l     O .text	00000027 __c.4662
00003600 l     O .text	00000017 __c.4664
000035e9 l     O .text	00000017 __c.4666
000035d0 l     O .text	00000019 __c.4668
000035b7 l     O .text	00000019 __c.4670
000035a9 l     O .text	0000000e __c.4672
00003591 l     O .text	00000018 __c.4696
0000357a l     O .text	00000017 __c.4698
00003542 l     O .text	00000038 __c.4700
00003532 l     O .text	00000010 __c.4702
00003471 l     O .text	0000000e __c.4713
0000347f l     O .text	00000028 __c.4711
000034fd l     O .text	00000035 __c.4706
000034a7 l     O .text	00000056 __c.4708
00003449 l     O .text	00000028 __c.4721
0000343b l     O .text	0000000e __c.4724
00003423 l     O .text	00000018 __c.4741
00003410 l     O .text	00000013 __c.4743
00003402 l     O .text	0000000e __c.4745
000033f4 l     O .text	0000000e __c.4750
000033d4 l     O .text	00000020 __c.4767
000033b9 l     O .text	0000001b __c.4769
0000339d l     O .text	0000001c __c.4771
0000336e l     O .text	0000002f __c.4773
0000335b l     O .text	00000013 __c.4775
0000332b l     O .text	00000030 __c.4777
0000331d l     O .text	0000000e __c.4779
0000330f l     O .text	0000000e __c.4784
000032ea l     O .text	00000025 __c.4792
000032ca l     O .text	00000020 __c.4794
000032ab l     O .text	0000001f __c.4796
00003283 l     O .text	00000028 __c.4798
00003274 l     O .text	0000000f __c.4800
0000324c l     O .text	00000028 __c.4809
00003225 l     O .text	00000027 __c.4811
000031fe l     O .text	00000027 __c.4813
000031c8 l     O .text	00000036 __c.4815
0000319f l     O .text	00000029 __c.4817
00003188 l     O .text	00000017 __c.4819
0000315f l     O .text	00000029 __c.4832
0000313a l     O .text	00000025 __c.4834
00003117 l     O .text	00000023 __c.4836
000030f7 l     O .text	00000020 __c.4838
000030d8 l     O .text	0000001f __c.4840
0000430b l     O .text	00000021 __c.4147
00000000 l    df *ABS*	00000000 main.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000486d l     O .text	00000030 __c.4502
0000484e l     O .text	0000001f __c.4504
00004831 l     O .text	0000001d __c.4506
00004821 l     O .text	00000010 __c.4508
000047fa l     O .text	00000027 __c.4510
000047e0 l     O .text	0000001a __c.4512
000047c6 l     O .text	0000001a __c.4514
000047c4 l     O .text	00000002 __c.4516
000047b5 l     O .text	0000000f __c.4520
000047aa l     O .text	0000000b __c.4522
00004786 l     O .text	00000024 __c.4526
00004783 l     O .text	00000003 __c.4536
00004777 l     O .text	0000000c __c.4538
00004770 l     O .text	00000007 __c.4546
0000475f l     O .text	00000011 __c.4548
00004738 l     O .text	00000027 __c.4550
00004719 l     O .text	0000001f __c.4552
000046fc l     O .text	0000001d __c.4554
000046ec l     O .text	00000010 __c.4556
000046c5 l     O .text	00000027 __c.4558
000046ab l     O .text	0000001a __c.4560
00004691 l     O .text	0000001a __c.4562
0000467b l     O .text	00000016 __c.4564
00004665 l     O .text	00000016 __c.4566
00004653 l     O .text	00000012 __c.4568
00004644 l     O .text	0000000f __c.4570
00004627 l     O .text	0000001d __c.4572
00004609 l     O .text	0000001e __c.4574
000045ec l     O .text	0000001d __c.4576
000045d2 l     O .text	0000001a __c.4578
000045ba l     O .text	00000018 __c.4580
000045a9 l     O .text	00000011 __c.4582
00004593 l     O .text	00000016 __c.4584
0000457e l     O .text	00000015 __c.4586
0000456c l     O .text	00000012 __c.4588
00004554 l     O .text	00000018 __c.4590
0000453f l     O .text	00000015 __c.4592
00004529 l     O .text	00000016 __c.4594
00004513 l     O .text	00000016 __c.4596
000044ff l     O .text	00000014 __c.4598
00000000 l    df *ABS*	00000000 vfprintf.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000001d6 l     O .text	00000004 __c.2334
000001da l     O .text	00000004 __c.2332
00000000 l    df *ABS*	00000000 ram.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000041d l     O .text	0000000d __c.3725
0000040a l     O .text	00000013 __c.3727
000003f7 l     O .text	00000013 __c.3729
000003d9 l     O .text	0000001e __c.3731
000003bb l     O .text	0000001e __c.3733
0000039d l     O .text	0000001e __c.3735
0000037f l     O .text	0000001e __c.3737
0000036b l     O .text	00000014 __c.3739
00000350 l     O .text	0000001b __c.3754
00000338 l     O .text	00000018 __c.3760
00000313 l     O .text	00000025 __c.3769
00000000 l    df *ABS*	00000000 spi.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00801748 l     O .bss	00000004 SPI0_Speed_value
0000042a l     O .text	0000001d __c.3723
00801746 l     O .bss	00000002 SPI0_Mode_value
00000000 l    df *ABS*	00000000 rtc.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000004bf l     O .text	00000019 __c.3715
000004a4 l     O .text	0000001b __c.3723
00000486 l     O .text	0000001e __c.3725
00000457 l     O .text	00000011 __c.3743
00000468 l     O .text	0000001e __c.3736
00000447 l     O .text	00000010 __c.3750
00000000 l    df *ABS*	00000000 timer.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00006b3c l     F .text	0000007c clock_settime.part.2
000005bc l     O .text	0000001d __c.3720
000005b2 l     O .text	0000000a __c.3740
00801758 l     O .bss	00000020 _ts_to_str
000005a3 l     O .text	0000000f __c.3745
00801750 l     O .bss	00000008 __clock_elapsed
00000595 l     O .text	0000000e __c.3754
0000058a l     O .text	0000000b __c.3756
00801778 l     O .bss	00000002 timers_configured
0080177a l     O .bss	00000002 timers_enabled
00000576 l     O .text	00000014 __c.3776
00000563 l     O .text	00000013 __c.3778
00000557 l     O .text	0000000c __c.3780
0000053f l     O .text	00000018 __c.3782
0000052e l     O .text	00000011 __c.3784
0000051e l     O .text	00000010 __c.3786
00000000 l    df *ABS*	00000000 gpib_hal.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000f08 l     O .text	0000001d __c.3867
0080185f l     O .bss	00000001 _ppr_reg
00000ef5 l     O .text	00000013 __c.3885
00000ee4 l     O .text	00000011 __c.3899
00000ed7 l     O .text	0000000d __c.3908
00000ec9 l     O .text	0000000e __c.3917
00000ebc l     O .text	0000000d __c.3924
00000eae l     O .text	0000000e __c.3930
00000000 l    df *ABS*	00000000 _clear_bss.o
000048ce l       .text	00000000 .do_clear_bss_start
000048cc l       .text	00000000 .do_clear_bss_loop
00000000 l    df *ABS*	00000000 delay.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 rs232.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 TWI_AVR8.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 i2c.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0080174e l     O .bss	00000002 txn
0080174c l     O .bss	00000002 op
00000000 l    df *ABS*	00000000 timer_hal.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 mathio.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 ffsystem.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 diskio.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 _udivmodqi4.o
0001ca64 l       .text	00000000 __udivmodqi4_ep
0001ca5c l       .text	00000000 __udivmodqi4_loop
00000000 l    df *ABS*	00000000 _udivmodhi4.o
0001ca84 l       .text	00000000 __udivmodhi4_ep
0001ca76 l       .text	00000000 __udivmodhi4_loop
00000000 l    df *ABS*	00000000 _divmodhi4.o
0001caac l       .text	00000000 __divmodhi4_neg1
0001cab4 l       .text	00000000 __divmodhi4_neg2
0001caba l       .text	00000000 __divmodhi4_exit
00000000 l    df *ABS*	00000000 _udivmodsi4.o
0001cae2 l       .text	00000000 __udivmodsi4_ep
0001cac8 l       .text	00000000 __udivmodsi4_loop
00000000 l    df *ABS*	00000000 _divmodsi4.o
0001cb18 l       .text	00000000 __divmodsi4_neg2
0001cb26 l       .text	00000000 __divmodsi4_exit
00000000 l    df *ABS*	00000000 calloc.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 _exit.o
0001d642 l       .text	00000000 __stop_program
0001616a g     F .text	00000040 SS80_Selected_Device_Clear
0001cb74 g       .text	00000002 .hidden __usmulhisi3
0000eed6 g     F .text	0000000c putchar
0001195a g     F .text	0000001e SS80_is_MTA
000069d8 g     F .text	000000ea clock_gettime
00005fcc g     F .text	00000098 rtc_init
00011c6a g     F .text	000000a8 GPIB_COMMANDS
000048dc  w      .text	00000000 __vector_22
00010e22 g     F .text	0000004a gpib_unread
00015366 g     F .text	00000034 SS80_test_extended_status
000064a6  w    F .text	00000016 strcpy
00007c48 g     F .text	00000008 asctime
00006f30 g     F .text	00000020 tm_mon_to_ascii
0080197c g     O .bss	00000235 Fatfs
0000f00a g     F .text	0000004a mctime
000048dc  w      .text	00000000 __vector_28
0000e0ca g     F .text	0000001a mmc_fast
00005f16 g     F .text	000000b6 rtc_write
00016252 g     F .text	00000224 SS80_Transparent_State
00801860 g     O .bss	00000001 gpib_unread_f
000050da g     F .text	00000004 spi_RX_buffer
00012358 g     F .text	00000038 gpib_help
00015fce g     F .text	0000009c SS80_Report
0000fb08 g     F .text	0000006a free_file_descriptor
0000ecde g     F .text	00000096 fatfs_putc
0001cb56 g       .text	0000001e .hidden __umulhisi3
008001bf g     O .data	0000000c cfgfile
000048dc  w      .text	00000000 __vector_1
00011da4 g     F .text	0000016e GPIB
0000e88c g     F .text	00000038 fatfs_help
00006c24 g     F .text	00000016 delete_all_timers
0000625e g     F .text	00000016 LCD_clear
00005976 g     F .text	0000000c SPI0_TXRX_Byte
0001d104 g       .text	00000000 __fp_mpack_finite
0001716c g     F .text	00000188 amigo_buffered_read
0000f650 g     F .text	00000086 utime
00801946 g     O .bss	00000008 __clock
0001265c g     F .text	00000054 find_device
00014164 g     F .text	0000008e print_str_P
0080010a g     O .data	00000008 lcd
00007a7c g     F .text	00000128 set_dst
0000f38a g     F .text	00000096 fdevopen
00011978 g     F .text	0000001e SS80_is_MSA
00005092 g     F .text	00000044 spi_end
00018be0 g     F .text	000000e2 lif_dir2str
0001d08a g     F .text	00000040 round
000129f0 g     F .text	00000166 alloc_device
0000539e g     F .text	00000054 safefree
000140c2 g     F .text	000000a2 print_var_P
00011f12 g     F .text	0000012a GPIB_TALK
000048dc  w      .text	00000000 __vector_32
0000ff00 g       *ABS*	00000000 __DATA_REGION_LENGTH__
0001cd26 g     F .text	00000004 __divsf3
0001cbf8 g       .text	00000036 .hidden __epilogue_restores__
00005732 g     F .text	00000018 uart_rx_count
00014cfa g     F .text	0000003a lif_dir_count
00801bdb g     O .bss	00000009 gpib_timer
0001203c g     F .text	000000fa GPIB_SECONDARY_ADDRESS
00018f7a g     F .text	0000000e lif_vol_clear
00006ac2 g     F .text	0000007a clock_task
00011224 g     F .text	0000028e gpib_trace_display
0001bf22 g     F .text	0000010c lif_rename_file
00012fbe g     F .text	00001104 Read_Config
000125dc g     F .text	00000028 find_type
0001cf48 g     F .text	00000022 __fp_round
00012604 g     F .text	0000001e count_drive_types
00006f50 g     F .text	00000042 Days_Per_Month
00006dfe g     F .text	00000028 execute_timers
00010210 g     F .text	0000017a ls_info
000048dc  w      .text	00000000 __vector_34
0000e084 g     F .text	0000001a mmc_spi_begin
0001cdf6 g     F .text	0000000a __fixsfsi
00006d10 g     F .text	0000000c clock_elapsed_begin
0000650e  w    F .text	00000032 reverse
00006424 g     F .text	0000003c lcd_printf
0000da24 g     F .text	00000006 mmc_disk_status
0001cf6a g     F .text	00000044 __fp_split3
00010c28 g     F .text	00000014 gpib_timeout_set
0001ca6e g       .text	00000028 .hidden __udivmodhi4
0000508e g     F .text	00000004 chip_select_init
00006cbc g     F .text	00000054 ts_to_str
00008ff6 g     F .text	0000000c atol
00007ff2 g     F .text	000000aa p_ntoa
0000e28c g     F .text	000000d8 tm_to_fat
00005206 g     F .text	00000106 PrintFree
00017464 g     F .text	000000c4 amigo_cmd_dsj
0000d7b2 g     F .text	00000024 wait_ready
000001d6 g       .text	00000000 __trampolines_start
00012d34 g     F .text	00000140 hpdir_set_device
0001ced2 g     F .text	00000048 __fp_cmp
000117c2 g     F .text	000000f2 gpib_write_str
00801bb9 g     O .bss	00000002 errno
00016230 g     F .text	00000022 SS80_Cancel
0001d644 g       .text	00000000 _etext
00005a72 g     F .text	00000008 TWI_StopTransmission
0000db80 g     F .text	0000047c mmc_disk_ioctl
00006660 g     F .text	00000028 MATCH
0080012c g     O .data	00000010 __WDay
0001999e g     F .text	000000b8 lif_writedirindex
00006206 g     F .text	00000040 LCD_setCursor
0000583c g     F .text	000000ce SPI0_Speed
00006d1c g     F .text	00000084 clock_elapsed_end
0080023f g     O .data	00000016 TD
0000d624 g     F .text	000000c4 ff_wtoupper
0001cc54 g     F .text	0000000a __subsf3
0001bac2 g     F .text	00000330 lif_add_lif_file
00801be4 g     O .bss	00000002 lastcmd
000048dc  w      .text	00000000 __vector_24
00012d32 g     F .text	00000002 set_Config_Defaults
0000657a g     F .text	00000014 skipspaces
0000c1bc g     F .text	0000026c f_getcwd
000048dc  w      .text	00000000 __vector_12
000108a2 g     F .text	00000028 gpib_timer_init
000108fa g     F .text	00000022 ppr_init
0000eee2 g     F .text	00000068 fgets
0001d584 g     F .text	000000bc __ultoa_invert
0000574a g     F .text	0000004c uart_get_tail
0000535c g     F .text	00000042 safemalloc
0001bdf2 g     F .text	00000130 lif_del_file
00007e34 g     F .text	00000032 _putc_buffer_fn
0001ac5e g     F .text	00000172 lif_ascii_string_to_e010
0000e280 g     F .text	00000006 mmc_ins_status
00018f10 g     F .text	0000004e lif_lifbcd2timestr
00801be6 g     O .bss	00000200 gpib_iobuff
0001250c g     F .text	00000028 V2B_MSB
00018db0 g     F .text	00000084 lif_time2lifbcd
00012654 g     F .text	00000008 find_free
00019464 g     F .text	00000366 lif_check_dir
000048dc g       .text	00000000 __bad_interrupt
0000544c g     F .text	00000090 delayms
00016136 g     F .text	00000018 SS80_Channel_Independent_Clear
00010136 g     F .text	000000da cat
00008e66 g     F .text	00000028 snprintf_P
0001756e g     F .text	00000152 amigo_todo_op
000161aa g     F .text	00000086 SS80_Amigo_Clear
0000f314 g     F .text	00000076 perror
0001ec8a g       *ABS*	00000000 __data_load_end
0000d6f4 g     F .text	0000000c disk_initialize
008018a0 g     O .bss	0000000d plot
00010bd6 g     F .text	00000006 gpib_timer_elapsed_end
00018530 g     F .text	00000020 lif_free
0000ef7a g     F .text	0000002e puts
0000ff10 g     F .text	000001c0 copy
00006ef6 g     F .text	00000010 clock_settime
00018550 g     F .text	0000003e lif_stralloc
00006476  w    F .text	00000016 islower
000051d8 g     F .text	0000002e freeRam
00016c3a g     F .text	0000001c amigo_request_logical_address
00006246 g     F .text	00000018 LCD_pos
0000d0da g     F .text	0000022a f_rename
000048dc  w      .text	00000000 __vector_6
00010bb8 g     F .text	0000001e gpib_timer_reset
00019c96 g     F .text	0000065a lif_create_volume
0001d150 g     F .text	00000130 malloc
000050fe g     F .text	00000040 spi_init
0000fed8 g     F .text	00000038 posix_help
000048dc  w      .text	00000000 __vector_31
00010952 g     F .text	00000044 dbf_open
0001c40a g     F .text	00000092 copyright
0000c106 g     F .text	000000b6 f_chdir
0001cd1e g       .text	00000000 __lesf2
0000505e g     F .text	00000030 chip_deselect
00018442 g     F .text	0000005e PRINTER_COMMANDS
00006da0 g     F .text	00000036 clock_clear
00007c72 g     F .text	000000ee initialize_clock
0000e27e g     F .text	00000002 mmc_power_off
0000e286 g     F .text	00000006 mmc_wp_status
0000ebd8 g     F .text	00000106 fatfs_getc
00801de6 g     O .bss	00000001 listening_last
0000d6e8 g     F .text	0000000c disk_status
000061e0 g     F .text	00000026 LCD_specialCommand
00800257 g     O .data	00000002 __malloc_heap_start
000001d6 g       .text	00000000 __trampolines_end
00006ed6 g     F .text	00000020 clock_getres
0001add0 g     F .text	0000021a lif_add_ascii_file_as_e010_wrapper
00010de6 g     F .text	0000003c gpib_assert_ifc
00018d9a g     F .text	00000016 lif_BCD2BIN
00005b3a g     F .text	00000028 TWI_SendByte
0001858e g     F .text	00000050 lif_open
00007d60 g     F .text	000000d4 display_clock
0001091c g     F .text	0000001a ppr_bit_set
000048dc  w      .text	00000000 __vector_3
000108f2 g     F .text	00000008 ppr_reg
0001165e g     F .text	00000008 gpib_decode
0000f222 g     F .text	00000004 rmdir
00006bb8 g     F .text	0000006c set_timers
0080196a g     O .bss	0000000c dst
0000f298 g     F .text	0000007c readdir
0001cfae g     F .text	0000000e __fp_zero
0000cac0 g     F .text	0000002a f_closedir
0000d740 g     F .text	00000014 disk_ioctl
0001c126 g     F .text	000002e4 lif_tests
00008562 g     F .text	00000084 _puts_pad
000050de g     F .text	00000020 spi_TX
00018f88 g     F .text	00000326 lif_dump_vol
00012136 g     F .text	00000042 listen_cleanup
00018e34 g     F .text	000000a0 lif_lifbcd2time
00018cc2 g     F .text	000000ca lif_str2dir
00005a04 g     F .text	0000002c SPI0_TXRX
000062b2 g     F .text	00000064 LCD_init
0001cd1e g       .text	00000000 __nesf2
00012e74 g     F .text	00000022 hpdir_set_parameters
00005e36 g     F .text	0000000e BINtoBCD
0000f736 g     F .text	000000ce lseek
000048dc  w      .text	00000000 __vector_23
0001d644 g       *ABS*	00000000 __data_load_start
0080181c g     O .bss	00000004 _mmc_clock
0000489e g       .text	00000000 __dtors_end
00006196 g     F .text	00000024 LCD_putb
00011a2c g     F .text	00000010 gpib_init_devices
00006610  w    F .text	00000050 strncasecmp
008020ac g       .bss	00000000 __bss_end
000187e8 g     F .text	00000056 lif_chars
0001cb80 g       .text	00000014 .hidden __muluhisi3
000048dc  w      .text	00000000 __vector_30
00000400 g       *ABS*	00000000 __LOCK_REGION_LENGTH__
0001d392 g     F .text	00000008 abort
000149b2 g     F .text	0000024c format_drives
000048dc  w      .text	00000000 __vector_25
008020a8 g     O .bss	00000002 __brkval
0000714e g     F .text	0000002a gmtime_r
0000f0ae g     F .text	00000052 chmod
00006e26 g     F .text	000000b0 init_timers
000119d2 g     F .text	0000001e AMIGO_is_MSA
00019816 g     F .text	000000b6 lif_checkdirindex
0000cdac g     F .text	0000014e f_unlink
00010e78 g     F .text	00000020 gpib_control_pin_read
00010a56 g     F .text	000000ae dbf_open_read
0001cb4a g       .text	0000000c .hidden __mulhisi3
00008f2c g     F .text	000000bc strtol
00010bb2 g     F .text	00000006 gpib_timer_elapsed_begin
0001d56e g     F .text	00000016 strnlen
000054dc g     F .text	00000134 uart_ubr
0000d594 g     F .text	00000066 ff_uni2oem
0001abaa g     F .text	000000b4 lif_e010_pad_sector
000184a0 g     F .text	00000038 lif_help
00006742 g     F .text	000000b8 split_args
0000f1a6 g     F .text	0000003e rename
00010a26 g     F .text	00000030 dbf_close
000180ce g     F .text	000000b2 receive_plot_flush
0001cd40 g     F .text	000000d4 __divsf3x
000048dc  w      .text	00000000 __vector_11
00801de7 g     O .bss	00000001 spoll
0000f054 g     F .text	0000001c basename
0001539a g     F .text	000000ae SS80_display_extended_status
00017f82 g     F .text	00000130 AMIGO_COMMANDS
0001d39a g     F .text	000001b0 __ftoa_engine
00018926 g     F .text	0000007a lif_fixname
0000dab6 g     F .text	000000ca mmc_disk_write
0000489e  w      .text	00000000 __init
0001d11c g     F .text	00000034 calloc
0001b834 g     F .text	0000028e lif_extract_lif_as_lif
00006964 g     F .text	00000026 install_timers_isr
00012bfe g     F .text	00000134 assign_value
00012e96 g     F .text	00000128 Post_Config
000108ca g     F .text	00000014 reverse_8bits
0001554a g     F .text	000000e0 SS80_describe
000057ce g     F .text	0000002c uart_getchar
0000809c g     F .text	0000020e p_ftoa
0000f9f4 g     F .text	000000dc write
00006316 g     F .text	00000046 lcd_cleareol
0001883e g     F .text	00000074 lif_B2S
0001cfbc g       .text	00000000 __gtsf2
0000fe98 g     F .text	00000040 fprintf
00011180 g     F .text	000000a4 gpib_decode_header
000114b2 g     F .text	000001ac gpib_read_byte
0001614e g     F .text	0000001c SS80_Universal_Device_Clear
0001afea g     F .text	00000272 lif_add_ascii_file_as_e010
0000698a g     F .text	0000004e __vector_13
000064e8  w    F .text	00000026 strcat
008018ef g     O .bss	00000057 uarts
0001cfe0 g       .text	00000000 __mulsf3_pse
000048dc  w      .text	00000000 __vector_17
000051b6 g     F .text	00000022 spi_TXRX
0001cf26 g     F .text	00000006 __fp_nan
000126b0 g     F .text	00000212 set_active_device
000048dc  w      .text	00000000 __vector_19
000068e4 g     F .text	0000007c get_value
000059dc g     F .text	00000028 SPI0_TX
000188b2 g     F .text	0000003a lif_checkname
0000f070 g     F .text	0000003e chdir
000048dc  w      .text	00000000 __vector_7
0000e142 g     F .text	0000013c mmc_init
0000e8c4 g     F .text	0000019a fatfs_ls
0001cf1a g     F .text	0000000c __fp_inf
00008e8e g     F .text	00000028 sprintf_P
0001cc3c g       .text	00000018 .hidden __cmpdi2_s8
0000f420 g     F .text	00000088 fat_time_to_unix
0000f804 g     F .text	0000004e fseek
00801bb1 g     O .bss	00000004 AccSize
00018f5e g     F .text	0000000c lif_image_clear
0000e0f6 g     F .text	0000000e mmc_set_ms_timeout
00006960 g     F .text	00000004 enable_system_task
0000e0ea g     F .text	00000006 mmc_spi_RX_buffer
00007270 g     F .text	00000058 is_dst
00005610 g     F .text	0000008e uart_init
0001508c g     F .text	00000078 SS80ControllerPack
00801df0 g     O .bss	00000204 Devices
000048c4 g       .text	00000010 .hidden __do_clear_bss
0001d54a g     F .text	00000016 strnlen_P
00801976 g     O .bss	00000006 _pch
0000590a g     F .text	0000006c SPI0_Mode
00810000 g       .comment	00000000 __eeprom_end
0001a5ba g     F .text	00000200 lif_open_volume
000100d0 g     F .text	00000066 testpage
0001835c g     F .text	000000e6 printer_buffer
00005c20 g     F .text	0000005c TWI_WritePacket
0000c0d4 g     F .text	00000032 f_close
0001cfdc g     F .text	000000ca __mulsf3x
000180b2 g     F .text	0000001c printer_init
0000e0a6 g     F .text	0000001a mmc_slow
00006460 g     F .text	00000016 sep
00800255 g     O .data	00000002 __malloc_heap_end
000108de g     F .text	00000014 ppr_set
00017048 g     F .text	00000124 amigo_format
0000f852 g     F .text	000000da read
00019a56 g     F .text	00000030 lif_writedirEOF
0000e09e g     F .text	00000008 mmc_spi_end
0001ce5c g       .text	00000000 __floatsisf
00017528 g     F .text	00000046 amigo_cmd_clear
00000000 g       .text	00000000 __vectors
00019a86 g     F .text	00000210 lif_updatefree
00005a30 g     F .text	0000002a SPI0_RX
0000ba10 g     F .text	00000296 f_read
008018ed g     O .bss	00000002 rtc_ok
0001193c g     F .text	0000001e SS80_is_MLA
000065a8  w    F .text	0000002a strncmp
0000569e g     F .text	00000040 uart_rx_interrupt
000057fa g     F .text	00000006 uart0_getchar
000048dc  w      .text	00000000 __vector_27
00010d84 g     F .text	00000062 gpib_disable_PPR
0000e3a8 g     F .text	000000e0 fatfs_scan_files
0000502c g     F .text	00000032 chip_select
00801746 g       .data	00000000 __data_end
000109f6 g     F .text	00000030 dbf_lseek
00016866 g     F .text	000001ce SS80_COMMANDS
0000caea g     F .text	00000088 f_readdir
00801de8 g     O .bss	00000002 current
0001566e g     F .text	00000040 SS80_Check_Volume
0000e056 g     F .text	0000002e mmc_install_timer
00007faa g     F .text	00000048 pch
00008ef0 g     F .text	0000003c atodigit
0001ca38 g       .text	0000001e .hidden __mulsi3
000064bc  w    F .text	0000002c strncpy
0000f1e4 g     F .text	0000003e unlink
0000f9ca g     F .text	0000002a sync
000160a8 g     F .text	0000008e SS80_init
0001cd1e g       .text	00000000 __eqsf2
0000fbe4 g     F .text	0000008a new_file_descriptor
000065d2  w    F .text	0000003e strcasecmp
0001cba0 g       .text	00000020 .hidden __negdi2
0001259c g     F .text	00000040 B2V_LSB
0000e77e g     F .text	0000010e fatfs_filinfo_list
0000d304 g     F .text	0000009a f_chmod
0080194e g     O .bss	00000018 timer_irq
00012622 g     F .text	00000032 type_to_str
00000000  w      .text	00000000 __vector_default
0001ca96 g       .text	00000026 .hidden __divmodhi4
00015104 g     F .text	00000198 SS80UnitPack
00010b04 g     F .text	000000ae dbf_open_write
000048dc  w      .text	00000000 __vector_5
0000dffc g     F .text	0000001e mmc_disk_timerproc
00007970 g     F .text	0000010c find_dst
00800189 g     O .data	00000034 gpib_tokens
000048dc  w      .text	00000000 __vector_33
00011666 g     F .text	0000015c gpib_read_str
0001a7ba g     F .text	00000328 lif_dir
000172f4 g     F .text	00000170 amigo_buffered_write
0001c59a g     F .text	00000164 task
00000400 g       *ABS*	00000000 __SIGNATURE_REGION_LENGTH__
00015448 g     F .text	00000102 SS80_send_status
0000635c g     F .text	000000b2 lcd_putch
0001cb38 g       .text	00000012 .hidden __tablejump2__
00011a3c g     F .text	0000011a gpib_trace_task
0080013c g     O .data	00000001 Stat
0000f5c0 g     F .text	00000090 unix_time_to_fat
0000489e g       .text	00000000 __ctors_start
00006274 g     F .text	0000003e LCD_setFastBacklightRGB
0000d8ea g     F .text	0000013a mmc_disk_initialize
00801966 g     O .bss	00000004 __tzone
0000e364 g     F .text	00000026 get_fattime
0000f92c g     F .text	00000038 fread
00018f6a g     F .text	00000010 lif_dir_clear
00016e7e g     F .text	00000052 amigo_increment
00012178 g     F .text	0000011c GPIB_LISTEN
008001bd g     O .data	00000002 debuglevel
00801820 g     O .bss	00000002 _mmc_timeout
000048aa g       .text	0000001a .hidden __do_copy_data
008001cb g     O .data	00000074 faults
0000fdac g     F .text	000000d4 posix_fopen_modes_to_open
0001255e g     F .text	0000003e B2V_MSB
00018d8c g     F .text	0000000e lif_BIN2BCD
0001d0ca g     F .text	00000036 __fp_mintl
0001cd1e g     F .text	00000008 __cmpsf2
0001cc2e g       .text	0000000e .hidden __xload_1
000071d2 g     F .text	0000005c gettimeofday
0001cf3a g     F .text	0000000e __fp_pscB
0001cf7a g       .text	00000000 __fp_splitA
00018ed4 g     F .text	0000003c lif_ctime_gmt
0001869a g     F .text	000000b2 lif_read
0000fe80 g     F .text	00000018 fopen
00801746 g       .bss	00000000 __bss_start
00007ba4 g     F .text	000000a4 asctime_r
00007360 g     F .text	00000008 localtime
0001d560 g     F .text	0000000e memset
000176c0 g     F .text	00000120 amigo_todo
00012b9e g     F .text	00000032 push_state
0000792e g     F .text	00000042 setdate
0001c6fe g     F .text	0000033a main
00005a5a g     F .text	00000018 TWI_Init
00012356 g     F .text	00000002 talk_cleanup
00005e56 g     F .text	000000c0 rtc_run
0000f700 g     F .text	00000036 ftell
00801dea g     O .bss	00000001 talking
0000bfd4 g     F .text	00000100 f_sync
00801865 g     O .bss	00000002 AMIGOs
0001cd1e g       .text	00000000 __ltsf2
00005838 g     F .text	00000004 uart_keyhit
00012b56 g     F .text	00000048 init_Devices
000048dc  w      .text	00000000 __vector_4
000197ca g     F .text	0000004c lif_close_volume
0000e0c0 g     F .text	0000000a mmc_spi_init
000198cc g     F .text	000000d2 lif_readdirindex
00005a7a g     F .text	000000c0 TWI_StartTransmission
00017808 g     F .text	000005cc Amigo_Command
0000fbd4 g     F .text	00000010 fclose
0000eeca g     F .text	0000000c getchar
00016dc2 g     F .text	000000bc amigo_send_status
00016bb2 g     F .text	00000088 amigo_init
0080013d g     O .data	0000004a sys_errlist
0000722e g     F .text	00000042 time
0000f25c g     F .text	0000003c opendir
0001d100 g     F .text	0000001c __fp_mpack
000128c2 g     F .text	0000012e SS80_Set_Defaults
000071b0 g     F .text	00000022 settimezone
0000b622 g     F .text	00000078 f_mount
0000e4a6 g     F .text	000002d8 fatfs_status
00007f90 g     F .text	0000001a pch_init
000119b4 g     F .text	0000001e AMIGO_is_MTA
0001cb28 g       .text	00000010 .hidden __negsi2
0000c9de g     F .text	000000e2 f_opendir
0001606a g     F .text	0000003e Clear_Common
0001c562 g     F .text	00000038 help
00010d22 g     F .text	00000062 gpib_enable_PPR
00016f26 g     F .text	00000122 amigo_verify
0001cfc4 g     F .text	00000004 __mulsf3
000067fa g     F .text	00000086 get_token
00016c56 g     F .text	000000b0 amigo_request_status
000141f2 g     F .text	000001f6 display_Addresses
0000f6d6 g     F .text	0000002a fileno_to_fatfs
0000d5fa g     F .text	0000002a ff_oem2uni
0000658e  w    F .text	0000001a strcmp
00010cd2 g     F .text	00000050 gpib_state_init
00000000  w      *ABS*	00000000 __heap_end
00010bdc g     F .text	0000004c gpib_timer_task
000053f2 g     F .text	0000005a delayus
00012bd0 g     F .text	0000002e pop_state
000048dc  w      .text	00000000 __vector_9
0000f100 g     F .text	0000004a getcwd
000048dc  w      .text	00000000 __vector_2
000066e6 g     F .text	00000028 MATCHI
000177e0 g     F .text	00000028 amigo_check_unit
0001cc78 g     F .text	000000c6 __addsf3x
00000400 g       *ABS*	00000000 __USER_SIGNATURE_REGION_LENGTH__
0000c428 g     F .text	000005b6 f_lseek
0000ed74 g     F .text	000000a2 fgetc
00801deb g     O .bss	00000001 secondary
00008e1a g     F .text	0000004c vsnprintf_P
00007c50 g     F .text	00000022 ctime_gm
0001cfbc g     F .text	00000008 __gesf2
00014bfe g     F .text	000000fc hpdir_init
00016d06 g     F .text	000000bc amigo_send_logical_address
0001562a g     F .text	00000044 SS80_Check_Unit
000118b4 g     F .text	00000088 gpib_file_init
00800104 g     O .data	00000001 _cs_pin
0000613c g     F .text	00000028 I2C_Start
00801861 g     O .bss	00000002 gpib_log_fp
000048dc  w      .text	00000000 __vector_21
000048dc  w      .text	00000000 __vector_15
00006174 g     F .text	00000022 I2C_Send
000082aa g     F .text	000002b8 p_etoa
000164ea g     F .text	000002d0 SS80_locate_and_read
00012390 g     F .text	0000017c gpib_tests
00801bb5 g     O .bss	00000002 AccDirs
0000d58e g     F .text	00000006 ff_memfree
0080186d g     O .bss	00000002 PRINTERp
0001cf2c g     F .text	0000000e __fp_pscA
0001ca56 g       .text	00000018 .hidden __udivmodqi4
00801dec g     O .bss	00000001 listening
00011b56 g     F .text	00000114 gpib_error_test
00801869 g     O .bss	00000002 SS80s
0000cb72 g     F .text	0000007c f_stat
00010c82 g     F .text	00000050 gpib_bus_init
0000ee16 g     F .text	0000009a fputc
000048dc  w      .text	00000000 __vector_29
00005824 g     F .text	00000014 uart0_putchar
00008eb6 g     F .text	0000003a printf_P
0001cb98 g       .text	00000006 .hidden __mulohisi3
000167ba g     F .text	000000ac SS80_Execute_State
000076f8 g     F .text	00000008 timegm
000156ae g     F .text	000004f0 SS80_Command_State
0000718e g     F .text	00000022 gettimezone
008020ac g       .comment	00000000 __heap_start
0000655a g     F .text	00000020 trim_tail
00010eb0 g     F .text	000002d0 gpib_write_byte
00018180 g     F .text	0000009a printer_close
000192ae g     F .text	000001b6 lif_check_volume
000072c8 g     F .text	00000098 localtime_r
00801bb7 g     O .bss	00000002 AccFiles
00006064 g     F .text	000000d8 rtc_read
0000489e g       .text	00000000 __dtors_start
00010c3c g     F .text	00000046 gpib_bus_read_init
0000489e g       .text	00000000 __ctors_end
0001cb00 g       .text	00000028 .hidden __divmodsi4
00010e6c g     F .text	0000000c gpib_bus_read
0000f4a8 g     F .text	00000118 stat
000040ff  w      *ABS*	00000000 __stack
0000f964 g     F .text	00000066 syncfs
000184d8 g     F .text	00000058 lif_calloc
0000fad0 g     F .text	00000038 fwrite
00011d12 g     F .text	00000092 Send_Identify
0080181a g     O .bss	00000002 _mmc_pre
0000e0f0 g     F .text	00000006 mmc_spi_TXRX
00801746 g       .data	00000000 _edata
00005b9e g     F .text	00000082 TWI_ReadPacket
0000d39e g     F .text	000000b2 f_utime
000143e8 g     F .text	000005ca display_Config
0001cb76 g       .text	00000008 .hidden __usmulhisi3_tail
008020ac g       .comment	00000000 _end
00005b62 g     F .text	0000003c TWI_ReceiveByte
00018626 g     F .text	00000074 lif_seek_msg
0000513e g     F .text	00000078 spi_begin
0001821a g     F .text	00000142 printer_open
0000bca6 g     F .text	0000032e f_write
000048dc  w      .text	00000000 __vector_8
0001aae2 g     F .text	000000c8 lif_find_file
00005c7c g     F .text	000001ba __vector_26
00007e7e g     F .text	00000112 bin2num
0001cd44 g       .text	00000000 __divsf3_pse
0001c49c g     F .text	000000c6 delay_tests
00800100 g     O .data	00000004 _spi_clock
00801867 g     O .bss	00000002 AMIGOp
0000e0e4 g     F .text	00000006 mmc_spi_TX_buffer
0000b69a g     F .text	00000376 f_open
000189a0 g     F .text	00000130 lif_vol2str
0000d720 g     F .text	00000020 disk_write
0001038a g     F .text	00000224 ls
0001d640  w      .text	00000000 .hidden exit
00012294 g     F .text	000000c2 gpib_task
0001ce58 g     F .text	0000007a __floatunsisf
00006c3a g     F .text	00000082 subtract_timespec
0001ca96 g       .text	00000000 .hidden _div
00017dd4 g     F .text	000001ae Amigo_Execute
00006540  w    F .text	0000001a strupper
008020aa g     O .bss	00000002 __flp
0001cabc g       .text	00000044 .hidden __udivmodsi4
00011a0e g     F .text	0000001e PRINTER_is_MTA
0001a2f0 g     F .text	000002ca lif_newdir
00014d34 g     F .text	00000358 hpdir_find_drive
000119f0 g     F .text	0000001e PRINTER_is_MLA
00008fe8 g     F .text	0000000e atoi
00006f92 g     F .text	000001bc time_to_tm
0000e38a g     F .text	0000001e put_rc
00800105 g     O .data	00000002 LCD_ok
0000efa8 g     F .text	00000038 fileno
00800112 g     O .data	0000001a __Month
00005982 g     F .text	0000005a SPI0_Init
0000cefa g     F .text	000001e0 f_mkdir
0001ce00 g     F .text	00000058 __fixunssfsi
00801ff4 g     O .bss	000000b4 hpdir
00007700 g     F .text	0000022e setdate_r
00006688 g     F .text	0000005e MATCHARGS
000050d6 g     F .text	00000004 spi_TX_buffer
00006164 g     F .text	00000010 I2C_Stop
00010000 g       *ABS*	00000000 __EEPROM_REGION_LENGTH__
0001d640 g       .text	00000000 .hidden _exit
0001874c g     F .text	0000009c lif_write
000188ec g     F .text	0000003a lif_S2B
00801ded g     O .bss	00000001 talking_last
00010996 g     F .text	00000030 dbf_read
00005e44 g     F .text	00000012 BCDtoBIN
00007368 g     F .text	00000390 normalize
00007178 g     F .text	00000016 gmtime
000048dc  w      .text	00000000 __vector_14
0000eac2 g     F .text	00000116 fatfs_tests
0001c02e g     F .text	000000f8 lif_create_image
0000d700 g     F .text	00000020 disk_read
0000fc6e g     F .text	0000013e open
00006880 g     F .text	00000064 token
0000648c  w    F .text	0000001a toupper
00015ca0 g     F .text	0000032e SS80_locate_and_write
000085e6 g     F .text	00000834 _printf_fn
000048dc  w      .text	00000000 __vector_10
00010936 g     F .text	0000001c ppr_bit_clr
00801bbb g     O .bss	00000020 __iob
0000d450 g     F .text	00000138 f_getlabel
00018ad0 g     F .text	00000110 lif_str2vol
000061ba g     F .text	00000026 LCD_command
0000cbee g     F .text	000001be f_getfree
0000ef4a g     F .text	00000030 fputs
000048dc  w      .text	00000000 __vector_16
0000670e g     F .text	00000034 MATCHI_LEN
00800100 g       .data	00000000 __data_start
0000530c g     F .text	00000050 safecalloc
0000efe0 g     F .text	0000002a fileno_to_stream
00015b9e g     F .text	00000102 SS80_cmd_seek
0000f226 g     F .text	00000036 closedir
000048dc  w      .text	00000000 __vector_18
00000003 g       *ABS*	00000000 __FUSE_REGION_LENGTH__
0001529c g     F .text	000000ca SS80VolumePack
0000da2a g     F .text	0000008c mmc_disk_read
0000ea5e g     F .text	00000064 mmc_test
00020000 g       *ABS*	00000000 __TEXT_REGION_LENGTH__
000185de g     F .text	00000048 lif_stat
00005796 g     F .text	00000006 uart_rx_byte
00016476 g     F .text	00000074 SS80_error_return
00800259 g     O .data	00000002 __malloc_margin
000056de g     F .text	00000054 __vector_20
0000f14a g     F .text	0000005c mkdir
00005800 g     F .text	00000024 uart_putchar
000105ae g     F .text	000002f4 posix_tests
00801dee g     O .bss	00000002 gpib_unread_data
0000fb72 g     F .text	00000062 close
0001cc56 g       .text	00000000 __addsf3
0001cbc0 g       .text	00000038 .hidden __prologue_saves__
00011996 g     F .text	0000001e AMIGO_is_MLA
0000e104 g     F .text	0000003e mmc_test_timeout
0001b25c g     F .text	000005d8 lif_extract_e010_as_ascii
000048e0 g     F .text	0000074c vfprintf
00016ed0 g     F .text	00000056 amigo_seek
00010e98 g     F .text	00000018 gpib_handshake_pin_read
00006dd6 g     F .text	00000028 enable_timers
0000e488 g     F .text	0000001e fatfs_fstype
00012534 g     F .text	0000002a V2B_LSB
000109c6 g     F .text	00000030 dbf_write
0080186b g     O .bss	00000002 SS80p
00801863 g     O .bss	00000002 lines
0000d588 g     F .text	00000006 ff_memalloc
0001d280 g     F .text	00000112 free
0001cfb0 g       .text	00000000 __fp_szero
0000579c g     F .text	00000032 uart_tx_byte
0001cb94 g       .text	00000004 .hidden __mulshisi3



Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4f 24 	jmp	0x489e	; 0x489e <__ctors_end>
       4:	0c 94 6e 24 	jmp	0x48dc	; 0x48dc <__bad_interrupt>
       8:	0c 94 6e 24 	jmp	0x48dc	; 0x48dc <__bad_interrupt>
       c:	0c 94 6e 24 	jmp	0x48dc	; 0x48dc <__bad_interrupt>
      10:	0c 94 6e 24 	jmp	0x48dc	; 0x48dc <__bad_interrupt>
      14:	0c 94 6e 24 	jmp	0x48dc	; 0x48dc <__bad_interrupt>
      18:	0c 94 6e 24 	jmp	0x48dc	; 0x48dc <__bad_interrupt>
      1c:	0c 94 6e 24 	jmp	0x48dc	; 0x48dc <__bad_interrupt>
      20:	0c 94 6e 24 	jmp	0x48dc	; 0x48dc <__bad_interrupt>
      24:	0c 94 6e 24 	jmp	0x48dc	; 0x48dc <__bad_interrupt>
      28:	0c 94 6e 24 	jmp	0x48dc	; 0x48dc <__bad_interrupt>
      2c:	0c 94 6e 24 	jmp	0x48dc	; 0x48dc <__bad_interrupt>
      30:	0c 94 6e 24 	jmp	0x48dc	; 0x48dc <__bad_interrupt>
      34:	0c 94 c5 34 	jmp	0x698a	; 0x698a <__vector_13>
      38:	0c 94 6e 24 	jmp	0x48dc	; 0x48dc <__bad_interrupt>
      3c:	0c 94 6e 24 	jmp	0x48dc	; 0x48dc <__bad_interrupt>
      40:	0c 94 6e 24 	jmp	0x48dc	; 0x48dc <__bad_interrupt>
      44:	0c 94 6e 24 	jmp	0x48dc	; 0x48dc <__bad_interrupt>
      48:	0c 94 6e 24 	jmp	0x48dc	; 0x48dc <__bad_interrupt>
      4c:	0c 94 6e 24 	jmp	0x48dc	; 0x48dc <__bad_interrupt>
      50:	0c 94 6f 2b 	jmp	0x56de	; 0x56de <__vector_20>
      54:	0c 94 6e 24 	jmp	0x48dc	; 0x48dc <__bad_interrupt>
      58:	0c 94 6e 24 	jmp	0x48dc	; 0x48dc <__bad_interrupt>
      5c:	0c 94 6e 24 	jmp	0x48dc	; 0x48dc <__bad_interrupt>
      60:	0c 94 6e 24 	jmp	0x48dc	; 0x48dc <__bad_interrupt>
      64:	0c 94 6e 24 	jmp	0x48dc	; 0x48dc <__bad_interrupt>
      68:	0c 94 3e 2e 	jmp	0x5c7c	; 0x5c7c <__vector_26>
      6c:	0c 94 6e 24 	jmp	0x48dc	; 0x48dc <__bad_interrupt>
      70:	0c 94 6e 24 	jmp	0x48dc	; 0x48dc <__bad_interrupt>
      74:	0c 94 6e 24 	jmp	0x48dc	; 0x48dc <__bad_interrupt>
      78:	0c 94 6e 24 	jmp	0x48dc	; 0x48dc <__bad_interrupt>
      7c:	0c 94 6e 24 	jmp	0x48dc	; 0x48dc <__bad_interrupt>
      80:	0c 94 6e 24 	jmp	0x48dc	; 0x48dc <__bad_interrupt>
      84:	0c 94 6e 24 	jmp	0x48dc	; 0x48dc <__bad_interrupt>
      88:	0c 94 6e 24 	jmp	0x48dc	; 0x48dc <__bad_interrupt>
      8c:	6c 44       	sbci	r22, 0x4C	; 76
      8e:	c7 45       	sbci	r28, 0x57	; 87
      90:	9c 44       	sbci	r25, 0x4C	; 76
      92:	a0 45       	sbci	r26, 0x50	; 80
      94:	a0 45       	sbci	r26, 0x50	; 80
      96:	c7 45       	sbci	r28, 0x57	; 87
      98:	c7 45       	sbci	r28, 0x57	; 87
      9a:	c7 45       	sbci	r28, 0x57	; 87
      9c:	c7 45       	sbci	r28, 0x57	; 87
      9e:	c7 45       	sbci	r28, 0x57	; 87
      a0:	c7 45       	sbci	r28, 0x57	; 87
      a2:	c7 45       	sbci	r28, 0x57	; 87
      a4:	c7 45       	sbci	r28, 0x57	; 87
      a6:	6c 44       	sbci	r22, 0x4C	; 76
      a8:	66 44       	sbci	r22, 0x46	; 70
      aa:	c7 45       	sbci	r28, 0x57	; 87
      ac:	c7 45       	sbci	r28, 0x57	; 87
      ae:	c7 45       	sbci	r28, 0x57	; 87
      b0:	c7 45       	sbci	r28, 0x57	; 87
      b2:	96 44       	sbci	r25, 0x46	; 70
      b4:	c7 45       	sbci	r28, 0x57	; 87
      b6:	c7 45       	sbci	r28, 0x57	; 87
      b8:	6c 44       	sbci	r22, 0x4C	; 76
      ba:	c7 45       	sbci	r28, 0x57	; 87
      bc:	c7 45       	sbci	r28, 0x57	; 87
      be:	c7 45       	sbci	r28, 0x57	; 87
      c0:	c7 45       	sbci	r28, 0x57	; 87
      c2:	c7 45       	sbci	r28, 0x57	; 87
      c4:	c7 45       	sbci	r28, 0x57	; 87
      c6:	c7 45       	sbci	r28, 0x57	; 87
      c8:	c7 45       	sbci	r28, 0x57	; 87
      ca:	c7 45       	sbci	r28, 0x57	; 87
      cc:	6c 44       	sbci	r22, 0x4C	; 76
      ce:	c2 45       	sbci	r28, 0x52	; 82
      d0:	9c 44       	sbci	r25, 0x4C	; 76
      d2:	a0 45       	sbci	r26, 0x50	; 80
      d4:	a0 45       	sbci	r26, 0x50	; 80
      d6:	c7 45       	sbci	r28, 0x57	; 87
      d8:	c7 45       	sbci	r28, 0x57	; 87
      da:	c7 45       	sbci	r28, 0x57	; 87
      dc:	c7 45       	sbci	r28, 0x57	; 87
      de:	c7 45       	sbci	r28, 0x57	; 87
      e0:	c7 45       	sbci	r28, 0x57	; 87
      e2:	c7 45       	sbci	r28, 0x57	; 87
      e4:	c7 45       	sbci	r28, 0x57	; 87
      e6:	6c 44       	sbci	r22, 0x4C	; 76
      e8:	66 44       	sbci	r22, 0x46	; 70
      ea:	c7 45       	sbci	r28, 0x57	; 87
      ec:	c7 45       	sbci	r28, 0x57	; 87
      ee:	bd 45       	sbci	r27, 0x5D	; 93
      f0:	c7 45       	sbci	r28, 0x57	; 87
      f2:	96 44       	sbci	r25, 0x46	; 70
      f4:	c7 45       	sbci	r28, 0x57	; 87
      f6:	c7 45       	sbci	r28, 0x57	; 87
      f8:	6c 44       	sbci	r22, 0x4C	; 76
      fa:	e9 45       	sbci	r30, 0x59	; 89
      fc:	d0 46       	sbci	r29, 0x60	; 96
      fe:	df 45       	sbci	r29, 0x5F	; 95
     100:	3d 46       	sbci	r19, 0x6D	; 109
     102:	24 46       	sbci	r18, 0x64	; 100
     104:	d0 46       	sbci	r29, 0x60	; 96
     106:	d0 46       	sbci	r29, 0x60	; 96
     108:	d0 46       	sbci	r29, 0x60	; 96
     10a:	d0 46       	sbci	r29, 0x60	; 96
     10c:	d0 46       	sbci	r29, 0x60	; 96
     10e:	d0 46       	sbci	r29, 0x60	; 96
     110:	d0 46       	sbci	r29, 0x60	; 96
     112:	d0 46       	sbci	r29, 0x60	; 96
     114:	f3 45       	sbci	r31, 0x53	; 83
     116:	07 46       	sbci	r16, 0x67	; 103
     118:	d0 46       	sbci	r29, 0x60	; 96
     11a:	d0 46       	sbci	r29, 0x60	; 96
     11c:	d0 46       	sbci	r29, 0x60	; 96
     11e:	d0 46       	sbci	r29, 0x60	; 96
     120:	db 45       	sbci	r29, 0x5B	; 91
     122:	d0 46       	sbci	r29, 0x60	; 96
     124:	d0 46       	sbci	r29, 0x60	; 96
     126:	07 46       	sbci	r16, 0x67	; 103
     128:	d0 46       	sbci	r29, 0x60	; 96
     12a:	d0 46       	sbci	r29, 0x60	; 96
     12c:	d0 46       	sbci	r29, 0x60	; 96
     12e:	d0 46       	sbci	r29, 0x60	; 96
     130:	d0 46       	sbci	r29, 0x60	; 96
     132:	d0 46       	sbci	r29, 0x60	; 96
     134:	d0 46       	sbci	r29, 0x60	; 96
     136:	d0 46       	sbci	r29, 0x60	; 96
     138:	d0 46       	sbci	r29, 0x60	; 96
     13a:	e9 45       	sbci	r30, 0x59	; 89
     13c:	6b 46       	sbci	r22, 0x6B	; 107
     13e:	df 45       	sbci	r29, 0x5F	; 95
     140:	3d 46       	sbci	r19, 0x6D	; 109
     142:	24 46       	sbci	r18, 0x64	; 100
     144:	d0 46       	sbci	r29, 0x60	; 96
     146:	d0 46       	sbci	r29, 0x60	; 96
     148:	d0 46       	sbci	r29, 0x60	; 96
     14a:	d0 46       	sbci	r29, 0x60	; 96
     14c:	d0 46       	sbci	r29, 0x60	; 96
     14e:	d0 46       	sbci	r29, 0x60	; 96
     150:	d0 46       	sbci	r29, 0x60	; 96
     152:	d0 46       	sbci	r29, 0x60	; 96
     154:	f3 45       	sbci	r31, 0x53	; 83
     156:	07 46       	sbci	r16, 0x67	; 103
     158:	d0 46       	sbci	r29, 0x60	; 96
     15a:	d0 46       	sbci	r29, 0x60	; 96
     15c:	6b 46       	sbci	r22, 0x6B	; 107
     15e:	d0 46       	sbci	r29, 0x60	; 96
     160:	db 45       	sbci	r29, 0x5B	; 91
     162:	d0 46       	sbci	r29, 0x60	; 96
     164:	d0 46       	sbci	r29, 0x60	; 96
     166:	07 46       	sbci	r16, 0x67	; 103
     168:	42 6b       	ori	r20, 0xB2	; 178
     16a:	4c 6b       	ori	r20, 0xBC	; 188
     16c:	54 6b       	ori	r21, 0xB4	; 180
     16e:	57 6b       	ori	r21, 0xB7	; 183
     170:	5a 6b       	ori	r21, 0xBA	; 186
     172:	5d 6b       	ori	r21, 0xBD	; 189
     174:	60 6b       	ori	r22, 0xB0	; 176
     176:	63 6b       	ori	r22, 0xB3	; 179
     178:	66 6b       	ori	r22, 0xB6	; 182
     17a:	a8 87       	std	Y+8, r26	; 0x08
     17c:	ce 87       	std	Y+14, r28	; 0x0e
     17e:	f5 87       	std	Z+13, r31	; 0x0d
     180:	0f 88       	ldd	r0, Y+23	; 0x17
     182:	18 88       	ldd	r1, Y+16	; 0x10
     184:	38 88       	ldd	r3, Y+16	; 0x10
     186:	51 88       	ldd	r5, Z+17	; 0x11
     188:	60 88       	ldd	r6, Z+16	; 0x10
     18a:	ab 88       	ldd	r10, Y+19	; 0x13
     18c:	7d 88       	ldd	r7, Y+21	; 0x15
     18e:	99 8a       	std	Y+17, r9	; 0x11
     190:	a1 8a       	std	Z+17, r10	; 0x11
     192:	a6 8a       	std	Z+22, r10	; 0x16
     194:	ca 8a       	std	Y+18, r12	; 0x12
     196:	d4 8a       	std	Z+20, r13	; 0x14
     198:	1e 8b       	std	Y+22, r17	; 0x16
     19a:	e9 8a       	std	Y+17, r14	; 0x11
     19c:	e9 8a       	std	Y+17, r14	; 0x11
     19e:	e1 8a       	std	Z+17, r14	; 0x11
     1a0:	b2 98       	cbi	0x16, 2	; 22
     1a2:	eb 99       	sbic	0x1d, 3	; 29
     1a4:	3f 9a       	sbi	0x07, 7	; 7
     1a6:	bf 9a       	sbi	0x17, 7	; 23
     1a8:	f0 9a       	sbi	0x1e, 0	; 30
     1aa:	66 9b       	sbis	0x0c, 6	; 12
     1ac:	28 9d       	mul	r18, r8
     1ae:	ed 9f       	mul	r30, r29
     1b0:	ed 9f       	mul	r30, r29
     1b2:	ed 9f       	mul	r30, r29
     1b4:	f5 9d       	mul	r31, r5
     1b6:	30 9e       	mul	r3, r16
     1b8:	de 9e       	mul	r13, r30
     1ba:	1e 9f       	mul	r17, r30
     1bc:	8b 99       	sbic	0x11, 3	; 17
     1be:	a4 99       	sbic	0x14, 4	; 20
     1c0:	bc bf       	out	0x3c, r27	; 60
     1c2:	7b bf       	out	0x3b, r23	; 59
     1c4:	7b bf       	out	0x3b, r23	; 59
     1c6:	7b bf       	out	0x3b, r23	; 59
     1c8:	7b bf       	out	0x3b, r23	; 59
     1ca:	3f bf       	out	0x3f, r19	; 63
     1cc:	46 bf       	out	0x36, r20	; 54
     1ce:	4d bf       	out	0x3d, r20	; 61
     1d0:	5d bf       	out	0x3d, r21	; 61
     1d2:	6b bf       	out	0x3b, r22	; 59
     1d4:	64 bf       	out	0x34, r22	; 52

000001d6 <__trampolines_end>:
     1d6:	6e 61       	ori	r22, 0x1E	; 30
     1d8:	6e 00       	.word	0x006e	; ????

000001da <__c.2332>:
     1da:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     1ea:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1fa:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     20a:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     21a:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     22a:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     23a:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     24a:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     25a:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     26a:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     27a:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     28a:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     29a:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     2aa:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     2ba:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     2ca:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000002d8 <__c.3743>:
     2d8:	63 73 5f 64 69 73 61 62 6c 65 20 77 61 73 3a 20     cs_disable was: 
     2e8:	25 64 2c 20 77 61 6e 74 3a 20 25 64 0a 00           %d, want: %d..

000002f6 <__c.3738>:
     2f6:	63 73 5f 65 6e 61 62 6c 65 20 77 61 73 3a 20 25     cs_enable was: %
     306:	64 2c 20 77 61 6e 74 3a 20 25 64 0a 00              d, want: %d..

00000313 <__c.3769>:
     313:	73 61 66 65 66 72 65 65 3a 20 46 52 45 45 20 45     safefree: FREE E
     323:	52 52 4f 52 20 28 25 75 29 2c 20 74 6f 70 3a 28     RROR (%u), top:(
     333:	25 75 29 0a 00                                      %u)..

00000338 <__c.3760>:
     338:	73 61 66 65 6d 61 6c 6c 6f 63 28 25 64 29 20 66     safemalloc(%d) f
     348:	61 69 6c 65 64 21 0a 00                             ailed!..

00000350 <__c.3754>:
     350:	73 61 66 65 63 61 6c 6c 6f 63 28 25 64 2c 25 64     safecalloc(%d,%d
     360:	29 20 66 61 69 6c 65 64 21 0a 00                    ) failed!..

0000036b <__c.3739>:
     36b:	20 20 5f 5f 62 72 6b 76 61 6c 3a 20 20 20 20 25       __brkval:    %
     37b:	35 75 0a 00                                         5u..

0000037f <__c.3737>:
     37f:	20 20 4d 61 6c 6c 6f 63 20 73 74 61 72 74 20 25       Malloc start %
     38f:	35 75 20 20 65 6e 64 3a 20 25 35 75 0a 00           5u  end: %5u..

0000039d <__c.3735>:
     39d:	20 20 48 65 61 70 3a 20 73 74 61 72 74 3a 20 25       Heap: start: %
     3ad:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000003bb <__c.3733>:
     3bb:	20 20 44 61 74 61 20 20 73 74 61 72 74 3a 20 25       Data  start: %
     3cb:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000003d9 <__c.3731>:
     3d9:	20 20 42 53 53 20 20 20 73 74 61 72 74 3a 20 25       BSS   start: %
     3e9:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000003f7 <__c.3729>:
     3f7:	20 20 53 74 61 63 6b 20 46 72 65 65 3a 20 20 25       Stack Free:  %
     407:	75 0a 00                                            u..

0000040a <__c.3727>:
     40a:	20 20 53 74 61 63 6b 20 54 6f 70 3a 20 20 20 25       Stack Top:   %
     41a:	75 0a 00                                            u..

0000041d <__c.3725>:
     41d:	46 72 65 65 20 52 61 6d 3a 25 75 0a 00              Free Ram:%u..

0000042a <__c.3723>:
     42a:	53 50 49 30 5f 4d 6f 64 65 3a 20 49 6e 76 61 6c     SPI0_Mode: Inval
     43a:	69 64 20 6d 6f 64 65 28 25 64 29 0a 00              id mode(%d)..

00000447 <__c.3750>:
     447:	72 74 63 5f 72 65 61 64 20 65 72 72 6f 72 0a 00     rtc_read error..

00000457 <__c.3743>:
     457:	72 74 63 5f 77 72 69 74 65 20 65 72 72 6f 72 0a     rtc_write error.
	...

00000468 <__c.3736>:
     468:	72 74 63 5f 69 6e 69 74 20 20 77 72 69 74 65 20     rtc_init  write 
     478:	65 70 6f 63 68 20 66 61 69 6c 65 64 0a 00           epoch failed..

00000486 <__c.3725>:
     486:	72 74 63 5f 72 75 6e 20 2d 20 77 72 69 74 65 20     rtc_run - write 
     496:	73 74 61 74 75 73 20 65 72 72 6f 72 0a 00           status error..

000004a4 <__c.3723>:
     4a4:	72 74 63 5f 72 75 6e 20 72 65 61 64 20 73 74 61     rtc_run read sta
     4b4:	74 75 73 20 65 72 72 6f 72 0a 00                    tus error..

000004bf <__c.3715>:
     4bf:	72 74 63 5f 72 75 6e 5f 74 65 73 74 20 72 65 61     rtc_run_test rea
     4cf:	64 20 65 72 72 6f 72 0a 00                          d error..

000004d8 <__c.3873>:
     4d8:	25 73 20 65 78 70 65 63 74 65 64 20 25 64 20 61     %s expected %d a
     4e8:	72 67 75 6d 65 6e 74 73 20 6f 6e 6c 79 20 67 6f     rguments only go
     4f8:	74 20 25 64 0a 00                                   t %d..

000004fe <__c.3707>:
     4fe:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     50e:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

0000051e <__c.3786>:
     51e:	54 69 6d 65 72 73 20 65 6e 61 62 6c 65 64 0a 00     Timers enabled..

0000052e <__c.3784>:
     52e:	43 6c 6f 63 6b 20 49 6e 73 74 61 6c 6c 65 64 0a     Clock Installed.
	...

0000053f <__c.3782>:
     53f:	43 6c 6f 63 6b 20 74 61 73 6b 20 69 6e 69 74 20     Clock task init 
     54f:	66 61 69 6c 65 64 0a 00                             failed..

00000557 <__c.3780>:
     557:	43 6c 6f 63 6b 20 49 6e 69 74 0a 00                 Clock Init..

00000563 <__c.3778>:
     563:	54 69 6d 65 72 73 20 63 6f 6e 66 69 67 75 72 65     Timers configure
     573:	64 0a 00                                            d..

00000576 <__c.3776>:
     576:	54 69 6d 65 72 73 20 69 6e 69 74 20 63 61 6c 6c     Timers init call
     586:	65 64 0a 00                                         ed..

0000058a <__c.3756>:
     58a:	5b 54 69 6d 65 3a 25 73 5d 0a 00                    [Time:%s]..

00000595 <__c.3754>:
     595:	5b 25 73 20 54 69 6d 65 3a 25 73 5d 0a 00           [%s Time:%s]..

000005a3 <__c.3745>:
     5a3:	5b 53 65 63 6f 6e 64 73 3a 20 25 73 5d 0a 00        [Seconds: %s]..

000005b2 <__c.3740>:
     5b2:	25 6c 64 2e 25 30 39 6c 64 00                       %ld.%09ld.

000005bc <__c.3720>:
     5bc:	73 65 74 5f 74 69 6d 65 72 73 3a 20 4e 6f 20 6d     set_timers: No m
     5cc:	6f 72 65 20 74 69 6d 65 72 73 21 0a 00              ore timers!..

000005d9 <__c.3995>:
     5d9:	63 6c 6b 20 74 69 6d 65 3a 20 20 20 20 25 73 0a     clk time:    %s.
	...

000005ea <__c.3993>:
     5ea:	63 6c 6b 20 73 65 63 6f 6e 64 73 3a 20 25 6c 75     clk seconds: %lu
     5fa:	0a 00                                               ..

000005fc <__c.3991>:
     5fc:	52 54 43 20 72 65 61 64 20 66 61 69 6c 65 64 0a     RTC read failed.
	...

0000060d <__c.3989>:
     60d:	72 74 63 20 74 69 6d 65 3a 20 20 20 20 25 73 0a     rtc time:    %s.
	...

0000061e <__c.3987>:
     61e:	72 74 63 20 73 65 63 6f 6e 64 73 3a 20 25 6c 75     rtc seconds: %lu
     62e:	0a 00                                               ..

00000630 <__c.3980>:
     630:	75 73 65 20 73 65 74 64 61 74 65 20 63 6f 6d 6d     use setdate comm
     640:	61 6e 64 20 74 6f 20 63 68 61 6e 67 65 20 74 69     and to change ti
     650:	6d 65 0a 00                                         me..

00000654 <__c.3978>:
     654:	72 74 63 20 72 65 61 64 20 65 72 72 6f 72 61 66     rtc read erroraf
     664:	74 65 72 20 69 6e 69 74 0a 00                       ter init..

0000066e <__c.3976>:
     66e:	72 74 63 20 66 6f 72 63 65 20 69 6e 69 74 20 66     rtc force init f
     67e:	61 69 6c 65 64 0a 00                                ailed..

00000685 <__c.3974>:
     685:	61 74 74 65 6d 70 74 69 6e 67 20 72 74 63 20 69     attempting rtc i
     695:	6e 69 74 0a 00                                      nit..

0000069a <__c.3972>:
     69a:	72 74 63 20 75 6e 69 6e 69 74 69 6c 69 7a 65 64     rtc uninitilized
     6aa:	0a 00                                               ..

000006ac <__c.3963>:
     6ac:	44 53 54 20 45 4e 44 20 20 20 20 20 20 20 20 20     DST END         
     6bc:	47 4d 54 3a 20 25 73 0a 00                          GMT: %s..

000006c5 <__c.3961>:
     6c5:	44 53 54 20 53 54 41 52 54 20 20 20 20 20 20 20     DST START       
     6d5:	47 4d 54 3a 20 25 73 0a 00                          GMT: %s..

000006de <__c.3957>:
     6de:	44 53 54 20 45 4e 44 20 20 20 6c 6f 63 61 6c 74     DST END   localt
     6ee:	69 6d 65 3a 20 25 73 0a 00                          ime: %s..

000006f7 <__c.3955>:
     6f7:	44 53 54 20 53 54 41 52 54 20 6c 6f 63 61 6c 74     DST START localt
     707:	69 6d 65 3a 20 25 73 0a 00                          ime: %s..

00000710 <__c.3926>:
     710:	72 74 63 20 66 6f 72 63 65 20 69 6e 69 74 20 66     rtc force init f
     720:	61 69 6c 65 64 0a 00                                ailed..

00000727 <__c.3924>:
     727:	69 6e 76 61 6c 69 64 20 6d 69 6e 3a 20 25 64 0a     invalid min: %d.
	...

00000738 <__c.3922>:
     738:	69 6e 76 61 6c 69 64 20 68 6f 75 72 3a 20 25 64     invalid hour: %d
     748:	0a 00                                               ..

0000074a <__c.3920>:
     74a:	69 6e 76 61 6c 69 64 20 64 61 79 3a 20 25 64 0a     invalid day: %d.
	...

0000075b <__c.3918>:
     75b:	69 6e 76 61 6c 69 64 20 6d 6f 6e 3a 20 25 64 0a     invalid mon: %d.
	...

0000076c <__c.3916>:
     76c:	69 6e 76 61 6c 69 64 20 79 65 61 72 3a 20 25 64     invalid year: %d
     77c:	0a 00                                               ..

0000077e <__c.3895>:
     77e:	45 6e 74 65 72 20 64 61 74 65 20 59 59 59 59 20     Enter date YYYY 
     78e:	4d 4d 20 44 44 20 48 48 3a 4d 4d 3a 53 53 20 3e     MM DD HH:MM:SS >
	...

0000079f <__c.3770>:
     79f:	25 73 20 25 73 20 25 32 64 20 25 30 32 64 3a 25     %s %s %2d %02d:%
     7af:	30 32 64 3a 25 30 32 64 20 25 34 64 00              02d:%02d %4d.

000007bc <__c.3738>:
     7bc:	73 65 6c 65 63 74 20 66 61 69 6c 65 64 21 0a 00     select failed!..

000007cc <__c.3767>:
     7cc:	45 4e 44 20 4d 4d 43 20 49 4e 49 54 0a 00           END MMC INIT..

000007da <__c.3765>:
     7da:	4d 4d 43 20 42 6c 6f 63 6b 20 53 69 7a 65 3a 20     MMC Block Size: 
     7ea:	25 6c 64 0a 00                                      %ld..

000007ef <__c.3763>:
     7ef:	4d 4d 43 20 42 6c 6f 63 6b 20 53 69 7a 65 20 2d     MMC Block Size -
     7ff:	20 72 65 61 64 20 66 61 69 6c 65 64 0a 00            read failed..

0000080d <__c.3760>:
     80d:	2c 20 43 6f 64 65 20 70 61 67 65 3a 20 25 75 0a     , Code page: %u.
	...

0000081e <__c.3758>:
     81e:	4c 46 4e 20 45 6e 61 62 6c 65 64 00                 LFN Enabled.

0000082a <__c.3756>:
     82a:	53 54 41 52 54 20 4d 4d 43 20 49 4e 49 54 0a 00     START MMC INIT..

0000083a <__c.3743>:
     83a:	4d 4d 43 20 54 49 4d 45 4f 55 54 0a 00              MMC TIMEOUT..

00000847 <__c.3715>:
     847:	4d 4d 43 20 43 6c 6f 63 6b 20 74 61 73 6b 20 69     MMC Clock task i
     857:	6e 69 74 20 66 61 69 6c 65 64 0a 00                 nit failed..

00000863 <__c.3787>:
     863:	0a 00                                               ..

00000865 <__c.3785>:
     865:	25 73 20 25 75 2f 25 30 32 75 2f 25 30 32 75 20     %s %u/%02u/%02u 
     875:	25 30 32 75 3a 25 30 32 75 20 25 39 6c 75 20 25     %02u:%02u %9lu %
     885:	73 00                                               s.

00000887 <__c.3783>:
     887:	66 61 74 66 73 5f 66 69 6c 69 6e 66 6f 5f 6c 69     fatfs_filinfo_li
     897:	73 74 3a 20 65 6d 70 74 79 0a 00                    st: empty..

000008a2 <__c.3777>:
     8a2:	25 75 20 66 69 6c 65 73 2c 20 25 6c 75 20 62 79     %u files, %lu by
     8b2:	74 65 73 2e 0a 25 75 20 66 6f 6c 64 65 72 73 2e     tes..%u folders.
     8c2:	0a 25 6c 75 20 4b 42 20 74 6f 74 61 6c 20 64 69     .%lu KB total di
     8d2:	73 6b 20 73 70 61 63 65 2e 0a 25 6c 75 20 4b 42     sk space..%lu KB
     8e2:	20 61 76 61 69 6c 61 62 6c 65 2e 0a 00               available...

000008ef <__c.3775>:
     8ef:	56 6f 6c 75 6d 65 20 53 2f 4e 20 20 20 20 20 20     Volume S/N      
     8ff:	20 20 20 20 20 20 20 20 3d 20 25 30 34 58 2d 25             = %04X-%
     90f:	30 34 58 0a 00                                      04X..

00000914 <__c.3773>:
     914:	56 6f 6c 75 6d 65 20 6e 61 6d 65 20 20 20 20 20     Volume name     
     924:	20 20 20 20 20 20 20 20 3d 20 25 73 0a 00                   = %s..

00000932 <__c.3771>:
     932:	44 61 74 61 20 73 74 61 72 74 20 28 6c 62 61 29     Data start (lba)
     942:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

00000951 <__c.3769>:
     951:	44 49 52 20 73 74 61 72 74 20 28 6c 62 61 2c 63     DIR start (lba,c
     961:	6c 75 73 74 6f 72 29 20 3d 20 25 6c 75 0a 00        lustor) = %lu..

00000970 <__c.3767>:
     970:	46 41 54 20 73 74 61 72 74 20 28 6c 62 61 29 20     FAT start (lba) 
     980:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

0000098f <__c.3765>:
     98f:	4e 75 6d 62 65 72 20 6f 66 20 63 6c 75 73 74 65     Number of cluste
     99f:	72 73 20 20 20 20 20 20 3d 20 25 6c 75 0a 00        rs      = %lu..

000009ae <__c.3763>:
     9ae:	53 65 63 74 6f 72 73 2f 46 41 54 20 20 20 20 20     Sectors/FAT     
     9be:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

000009cd <__c.3761>:
     9cd:	52 6f 6f 74 20 44 49 52 20 65 6e 74 72 69 65 73     Root DIR entries
     9dd:	20 20 20 20 20 20 20 20 3d 20 25 75 0a 00                   = %u..

000009eb <__c.3759>:
     9eb:	4e 75 6d 62 65 72 20 6f 66 20 46 41 54 73 20 20     Number of FATs  
     9fb:	20 20 20 20 20 20 20 20 3d 20 25 75 0a 00                   = %u..

00000a09 <__c.3757>:
     a09:	42 79 74 65 73 2f 43 6c 75 73 74 65 72 20 20 20     Bytes/Cluster   
     a19:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

00000a28 <__c.3755>:
     a28:	46 41 54 20 74 79 70 65 20 20 20 20 20 20 20 20     FAT type        
     a38:	20 20 20 20 20 20 20 20 3d 20 25 73 0a 00                   = %s..

00000a46 <__c.3753>:
     a46:	66 61 74 66 73 20 73 74 61 74 75 73 3a 25 73 0a     fatfs status:%s.
	...

00000a57 <__c.3717>:
     a57:	72 63 3d 25 75 0a 00                                rc=%u..

00000a5e <__c.3755>:
     a5e:	2c 20 25 31 30 6c 75 4b 20 62 79 74 65 73 20 66     , %10luK bytes f
     a6e:	72 65 65 0a 00                                      ree..

00000a73 <__c.3753>:
     a73:	25 34 75 20 46 69 6c 65 28 73 29 2c 25 31 30 6c     %4u File(s),%10l
     a83:	75 20 62 79 74 65 73 20 74 6f 74 61 6c 0a 25 34     u bytes total.%4
     a93:	75 20 44 69 72 28 73 29 00                          u Dir(s).

00000a9c <__c.3749>:
     a9c:	4c 69 73 74 69 6e 67 3a 5b 25 73 5d 0a 00           Listing:[%s]..

00000aaa <__c.3736>:
     aaa:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     aba:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

00000aca <__c.3734>:
     aca:	45 4e 44 20 4d 4d 43 20 54 45 53 54 0a 00           END MMC TEST..

00000ad8 <__c.3732>:
     ad8:	4d 4d 43 20 44 69 72 65 63 74 6f 72 79 20 4c 69     MMC Directory Li
     ae8:	73 74 0a 00                                         st..

00000aec <__c.3730>:
     aec:	53 54 41 52 54 20 4d 4d 43 20 54 45 53 54 0a 00     START MMC TEST..

00000afc <__c.3728>:
     afc:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     b0c:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

00000b1c <__c.3720>:
     b1c:	69 6e 64 3a 25 64 2c 61 72 67 63 3a 25 64 0a 00     ind:%d,argc:%d..

00000b2c <__c.3710>:
     b2c:	4e 6f 74 65 3a 20 66 61 74 66 73 20 74 65 73 74     Note: fatfs test
     b3c:	73 20 4d 55 53 54 20 73 74 61 72 74 20 77 69 74     s MUST start wit
     b4c:	68 20 22 66 61 74 66 73 22 20 6b 65 79 77 6f 72     h "fatfs" keywor
     b5c:	64 0a 66 61 74 66 73 20 68 65 6c 70 0a 66 61 74     d.fatfs help.fat
     b6c:	66 73 20 6d 6d 63 5f 74 65 73 74 0a 66 61 74 66     fs mmc_test.fatf
     b7c:	73 20 6d 6d 63 5f 69 6e 69 74 0a 66 61 74 66 73     s mmc_init.fatfs
     b8c:	20 6c 73 20 64 69 72 0a 66 61 74 66 73 20 73 74      ls dir.fatfs st
     b9c:	61 74 75 73 20 66 69 6c 65 0a 0a 00                 atus file...

00000ba8 <__c.3708>:
     ba8:	66 61 74 66 73 20 68 65 6c 70 0a 00                 fatfs help..

00000bb4 <__c.4069>:
     bb4:	45 78 70 65 63 74 65 64 20 2f 64 65 76 2f 73 64     Expected /dev/sd
     bc4:	61 20 2e 2e 20 2f 64 65 76 2f 73 64 6a 0a 00        a .. /dev/sdj..

00000bd3 <__c.4040>:
     bd3:	25 73 0a 00                                         %s..

00000bd7 <__c.4038>:
     bd7:	25 73 3a 20 25 73 0a 00                             %s: %s..

00000bdf <__c.3934>:
     bdf:	09 63 74 69 6d 65 3a 20 25 73 0a 00                 .ctime: %s..

00000beb <__c.3932>:
     beb:	09 6d 74 69 6d 65 3a 20 25 73 0a 00                 .mtime: %s..

00000bf7 <__c.3930>:
     bf7:	09 61 74 69 6d 65 3a 20 25 73 0a 00                 .atime: %s..

00000c03 <__c.3928>:
     c03:	09 47 49 44 3a 20 20 20 25 6c 75 0a 00              .GID:   %lu..

00000c10 <__c.3926>:
     c10:	09 55 49 44 3a 20 20 20 25 6c 75 0a 00              .UID:   %lu..

00000c1d <__c.3924>:
     c1d:	09 4d 6f 64 65 3a 20 20 25 6c 6f 0a 00              .Mode:  %lo..

00000c2a <__c.3922>:
     c2a:	55 6e 6b 6e 6f 77 6e 0a 00                          Unknown..

00000c33 <__c.3920>:
     c33:	46 69 6c 65 0a 00                                   File..

00000c39 <__c.3918>:
     c39:	44 49 52 0a 00                                      DIR..

00000c3e <__c.3916>:
     c3e:	09 54 79 70 65 3a 20 20 00                          .Type:  .

00000c47 <__c.3914>:
     c47:	09 53 69 7a 65 3a 20 20 25 6c 75 0a 00              .Size:  %lu..

00000c54 <__c.3793>:
     c54:	53 65 65 6b 20 66 61 69 6c 65 64 00                 Seek failed.

00000c60 <__c.3722>:
     c60:	66 70 75 74 63 20 73 74 72 65 61 6d 2d 3e 70 75     fputc stream->pu
     c70:	74 20 4e 55 4c 4c 0a 00                             t NULL..

00000c78 <__c.3715>:
     c78:	66 67 65 74 63 20 73 74 72 65 61 6d 2d 3e 67 65     fgetc stream->ge
     c88:	74 20 4e 55 4c 4c 0a 00                             t NULL..

00000c90 <__c.3869>:
     c90:	46 69 6c 65 73 3a 20 25 64 0a 00                    Files: %d..

00000c9b <__c.3865>:
     c9b:	6e 61 6d 65 3a 5b 25 73 5d 20 74 6f 6f 20 6c 6f     name:[%s] too lo
     cab:	6e 67 20 77 69 74 68 20 66 75 6c 6c 20 70 61 74     ng with full pat
     cbb:	68 0a 00                                            h..

00000cbe <__c.3862>:
     cbe:	6f 70 65 6e 64 69 72 20 66 61 69 6c 65 64 0a 00     opendir failed..

00000cce <__c.3857>:
     cce:	6c 73 3a 20 63 61 6e 6e 6f 74 20 73 74 61 74 20     ls: cannot stat 
     cde:	5b 25 73 5d 0a 00                                   [%s]..

00000ce4 <__c.3855>:
     ce4:	4c 69 73 74 69 6e 67 3a 5b 25 73 5d 0a 00           Listing:[%s]..

00000cf2 <__c.3853>:
     cf2:	6c 73 3a 20 43 61 6e 27 74 20 67 65 74 20 63 75     ls: Can't get cu
     d02:	72 72 65 6e 74 20 64 69 72 65 63 74 6f 72 79 0a     rrent directory.
	...

00000d13 <__c.3840>:
     d13:	25 73 20 6e 6f 6e 65 20 6e 6f 6e 65 20 25 31 32     %s none none %12
     d23:	6c 64 20 25 73 20 25 73 0a 00                       ld %s %s..

00000d2d <__c.3835>:
     d2d:	25 73 0a 00                                         %s..

00000d31 <__c.3833>:
     d31:	63 61 6e 20 6e 6f 74 20 73 74 61 74 3a 20 25 73     can not stat: %s
     d41:	0a 00                                               ..

00000d43 <__c.3821>:
     d43:	0d 00                                               ..

00000d45 <__c.3819>:
     d45:	4d 6f 72 65 2e 2e 00                                More...

00000d4c <__c.3809>:
     d4c:	25 6c 75 20 62 79 74 65 73 20 63 6f 70 69 65 64     %lu bytes copied
     d5c:	2e 0a 00                                            ...

00000d5f <__c.3805>:
     d5f:	43 6f 70 69 65 64 3a 20 25 30 38 6c 64 0d 00        Copied: %08ld..

00000d6e <__c.3802>:
     d6e:	57 72 69 74 65 20 65 72 72 6f 72 0a 00              Write error..

00000d7b <__c.3800>:
     d7b:	0a 43 6f 70 79 69 6e 67 2e 2e 2e 0a 00              .Copying.....

00000d88 <__c.3798>:
     d88:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000d98 <__c.3796>:
     d98:	43 72 65 61 74 69 6e 67 20 25 73 0a 00              Creating %s..

00000da5 <__c.3794>:
     da5:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000db5 <__c.3792>:
     db5:	4f 70 65 6e 69 6e 67 20 25 73 0a 00                 Opening %s..

00000dc1 <__c.3781>:
     dc1:	25 6c 64 20 62 79 74 65 73 0a 00                    %ld bytes..

00000dcc <__c.3779>:
     dcc:	0a 00                                               ..

00000dce <__c.3774>:
     dce:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000dde <__c.3764>:
     dde:	25 73 0a 00                                         %s..

00000de2 <__c.3741>:
     de2:	70 6f 73 69 78 20 70 72 65 66 69 78 20 69 73 20     posix prefix is 
     df2:	6f 70 74 69 6f 6e 61 6c 0a 70 6f 73 69 78 20 63     optional.posix c
     e02:	61 74 20 66 69 6c 65 20 5b 2d 70 5d 0a 70 6f 73     at file [-p].pos
     e12:	69 78 20 63 64 20 64 69 72 0a 70 6f 73 69 78 20     ix cd dir.posix 
     e22:	63 6f 70 79 20 66 69 6c 65 31 20 66 69 6c 65 32     copy file1 file2
     e32:	0a 70 6f 73 69 78 20 6c 73 20 64 69 72 20 5b 2d     .posix ls dir [-
     e42:	6c 5d 0a 70 6f 73 69 78 20 6d 6b 64 69 72 20 64     l].posix mkdir d
     e52:	69 72 0a 70 6f 73 69 78 20 70 61 67 65 20 4e 4e     ir.posix page NN
     e62:	0a 70 6f 73 69 78 20 70 77 64 0a 70 6f 73 69 78     .posix pwd.posix
     e72:	20 72 6d 20 66 69 6c 65 0a 70 6f 73 69 78 20 72      rm file.posix r
     e82:	6d 64 69 72 20 64 69 72 0a 70 6f 73 69 78 20 72     mdir dir.posix r
     e92:	65 6e 61 6d 65 20 6f 6c 64 20 6e 65 77 0a 0a 00     ename old new...

00000ea2 <__c.3739>:
     ea2:	70 6f 73 69 78 20 68 65 6c 70 0a 00                 posix help..

00000eae <__c.3930>:
     eae:	43 6c 6f 73 65 20 65 72 72 6f 72 3a 20 00           Close error: .

00000ebc <__c.3924>:
     ebc:	53 65 65 6b 20 65 72 72 6f 72 3a 20 00              Seek error: .

00000ec9 <__c.3917>:
     ec9:	57 72 69 74 65 20 65 72 72 6f 72 3a 20 00           Write error: .

00000ed7 <__c.3908>:
     ed7:	52 65 61 64 20 65 72 72 6f 72 3a 20 00              Read error: .

00000ee4 <__c.3899>:
     ee4:	4f 70 65 6e 20 65 72 72 6f 72 3a 5b 25 73 5d 20     Open error:[%s] 
	...

00000ef5 <__c.3885>:
     ef5:	5b 50 50 52 20 44 49 53 41 42 4c 45 20 41 4c 4c     [PPR DISABLE ALL
     f05:	5d 0a 00                                            ]..

00000f08 <__c.3867>:
     f08:	47 50 49 42 20 43 6c 6f 63 6b 20 74 61 73 6b 20     GPIB Clock task 
     f18:	69 6e 69 74 20 66 61 69 6c 65 64 0a 00              init failed..

00000f25 <__c.4452>:
     f25:	5b 67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 20     [gpib_write_str 
     f35:	73 65 6e 74 28 25 64 29 20 65 78 70 65 63 74 65     sent(%d) expecte
     f45:	64 28 25 64 29 5d 0a 00                             d(%d)]..

00000f4d <__c.4447>:
     f4d:	67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 3a 20     gpib_write_str: 
     f5d:	73 69 7a 65 20 3d 20 30 0a 00                       size = 0..

00000f67 <__c.4437>:
     f67:	5b 67 70 69 62 5f 72 65 61 64 5f 73 74 72 20 72     [gpib_read_str r
     f77:	65 61 64 28 25 64 29 20 65 78 70 65 63 74 65 64     ead(%d) expected
     f87:	28 25 64 29 5d 0a 00                                (%d)]..

00000f8e <__c.4433>:
     f8e:	67 70 69 62 5f 72 65 61 64 5f 73 74 72 28 69 6e     gpib_read_str(in
     f9e:	64 3a 25 64 29 3a 20 41 54 4e 20 25 30 32 58 48     d:%d): ATN %02XH
     fae:	20 75 6e 65 78 70 65 63 74 65 64 0a 00               unexpected..

00000fbb <__c.4430>:
     fbb:	67 70 69 62 5f 72 65 61 64 5f 73 74 72 3a 20 73     gpib_read_str: s
     fcb:	69 7a 65 20 3d 20 30 0a 00                          ize = 0..

00000fd4 <__c.4414>:
     fd4:	20 4d 53 41 20 25 30 32 58 68 00                     MSA %02Xh.

00000fdf <__c.4412>:
     fdf:	20 4d 54 41 20 25 30 32 58 68 00                     MTA %02Xh.

00000fea <__c.4410>:
     fea:	20 4d 4c 41 20 25 30 32 58 68 00                     MLA %02Xh.

00000ff5 <__c.4406>:
     ff5:	20 20 20 20 20 00                                        .

00000ffb <__c.4404>:
     ffb:	25 30 32 58 20 25 63 20 00                          %02X %c .

00001004 <__c.4362>:
    1004:	3c 4e 52 46 44 3d 25 64 2c 4e 44 41 56 3d 25 64     <NRFD=%d,NDAV=%d
    1014:	3e 0a 00                                            >..

00001017 <__c.4358>:
    1017:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
    1027:	20 44 41 56 3d 3d 31 3e 0a 00                        DAV==1>..

00001031 <__c.4354>:
    1031:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
    1041:	20 4e 44 41 43 3d 3d 31 3e 0a 00                     NDAC==1>..

0000104c <__c.4351>:
    104c:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
    105c:	20 4e 52 46 44 3d 3d 30 3e 0a 00                     NRFD==0>..

00001067 <__c.4346>:
    1067:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
    1077:	20 4e 52 46 44 3d 3d 31 20 26 26 20 4e 44 41 43      NRFD==1 && NDAC
    1087:	20 3d 3d 20 30 3e 0a 00                              == 0>..

0000108f <__c.4342>:
    108f:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
    109f:	20 44 41 56 3d 3d 31 3e 0a 00                        DAV==1>..

000010a9 <__c.4325>:
    10a9:	67 70 69 62 5f 75 6e 72 65 61 64 3a 20 65 72 72     gpib_unread: err
    10b9:	6f 72 2c 20 63 61 6e 20 6f 6e 6c 79 20 62 65 20     or, can only be 
    10c9:	63 61 6c 6c 65 64 20 6f 6e 63 65 21 0a 00           called once!..

000010d7 <__c.4320>:
    10d7:	5b 52 45 4e 20 48 49 5d 0a 00                       [REN HI]..

000010e1 <__c.4318>:
    10e1:	5b 52 45 4e 20 4c 4f 57 5d 0a 00                    [REN LOW]..

000010ec <__c.4313>:
    10ec:	5b 49 46 43 20 53 45 4e 54 5d 0a 00                 [IFC SENT]..

000010f8 <__c.4305>:
    10f8:	5b 50 50 52 3a 25 30 32 58 48 2c 20 50 49 4e 3a     [PPR:%02XH, PIN:
    1108:	25 30 32 58 48 2c 20 44 44 52 3a 25 30 32 58 48     %02XH, DDR:%02XH
    1118:	5d 0a 00                                            ]..

0000111b <__c.4299>:
    111b:	5b 44 50 50 52 20 62 69 74 3a 25 64 2c 20 6d 61     [DPPR bit:%d, ma
    112b:	73 6b 3a 25 30 32 58 48 5d 0a 00                    sk:%02XH]..

00001136 <__c.4297>:
    1136:	67 70 69 62 5f 64 69 73 61 62 6c 65 5f 50 50 52     gpib_disable_PPR
    1146:	3a 20 62 69 74 20 25 64 20 6f 75 74 20 6f 66 20     : bit %d out of 
    1156:	72 61 6e 67 65 0a 00                                range..

0000115d <__c.4292>:
    115d:	5b 45 50 50 52 20 62 69 74 3a 25 64 2c 20 6d 61     [EPPR bit:%d, ma
    116d:	73 6b 3a 25 30 32 58 48 5d 0a 00                    sk:%02XH]..

00001178 <__c.4290>:
    1178:	67 70 69 62 5f 65 6e 61 62 6c 65 5f 50 50 52 3a     gpib_enable_PPR:
    1188:	20 62 69 74 20 25 64 20 6f 75 74 20 6f 66 20 72      bit %d out of r
    1198:	61 6e 67 65 0a 00                                   ange..

0000119e <__c.4285>:
    119e:	5b 47 50 49 42 20 53 54 41 54 45 20 49 4e 49 54     [GPIB STATE INIT
    11ae:	5d 0a 00                                            ]..

000011b1 <__c.4280>:
    11b1:	5b 47 50 49 42 20 42 55 53 5f 49 4e 49 54 5d 0a     [GPIB BUS_INIT].
	...

000011c2 <__c.4465>:
    11c2:	0a 00                                               ..

000011c4 <__c.4457>:
    11c4:	2e 00                                               ..

000011c6 <__c.4455>:
    11c6:	25 63 00                                            %c.

000011c9 <__c.4453>:
    11c9:	20 7c 20 00                                          | .

000011cd <__c.4448>:
    11cd:	20 25 30 32 58 00                                    %02X.

000011d3 <__c.4446>:
    11d3:	0a 00                                               ..

000011d5 <__c.4444>:
    11d5:	5b 44 75 6d 70 3a 20 25 64 5d 0a 00                 [Dump: %d]..

000011e1 <__c.4433>:
    11e1:	5b 50 52 49 4e 54 45 52 20 63 6c 6f 73 65 5d 0a     [PRINTER close].
	...

000011f2 <__c.4428>:
    11f2:	5b 53 41 20 25 30 32 58 48 2c 20 6c 69 73 74 65     [SA %02XH, liste
    1202:	6e 3a 25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30     n:%02XH, talk:%0
    1212:	32 58 48 5d 0a 00                                   2XH]..

00001218 <__c.4426>:
    1218:	5b 53 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [SA %02XH AMIGO]
    1228:	0a 00                                               ..

0000122a <__c.4424>:
    122a:	5b 53 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [SA %02XH SS80].
	...

0000123b <__c.4419>:
    123b:	5b 54 41 20 25 30 32 58 48 5d 0a 00                 [TA %02XH]..

00001247 <__c.4417>:
    1247:	5b 50 52 49 4e 54 45 52 20 4f 50 45 4e 5d 0a 00     [PRINTER OPEN]..

00001257 <__c.4415>:
    1257:	5b 54 41 20 25 30 32 58 48 20 50 52 49 4e 54 45     [TA %02XH PRINTE
    1267:	52 5d 0a 00                                         R]..

0000126b <__c.4413>:
    126b:	5b 54 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [TA %02XH AMIGO]
    127b:	0a 00                                               ..

0000127d <__c.4411>:
    127d:	5b 54 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [TA %02XH SS80].
	...

0000128e <__c.4409>:
    128e:	5b 55 4e 54 5d 0a 00                                [UNT]..

00001295 <__c.4404>:
    1295:	5b 4c 41 20 25 30 32 58 48 5d 0a 00                 [LA %02XH]..

000012a1 <__c.4402>:
    12a1:	5b 4c 41 20 25 30 32 58 48 20 50 52 49 4e 54 45     [LA %02XH PRINTE
    12b1:	52 5d 0a 00                                         R]..

000012b5 <__c.4400>:
    12b5:	5b 4c 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [LA %02XH SS80].
	...

000012c6 <__c.4398>:
    12c6:	5b 4c 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [LA %02XH AMIGO]
    12d6:	0a 00                                               ..

000012d8 <__c.4396>:
    12d8:	0a 00                                               ..

000012da <__c.4394>:
    12da:	5b 55 4e 4c 5d 0a 00                                [UNL]..

000012e1 <__c.4389>:
    12e1:	5b 48 50 49 42 20 28 25 30 32 58 48 29 20 6e 6f     [HPIB (%02XH) no
    12f1:	74 20 64 65 66 69 6e 65 64 5d 0a 00                 t defined]..

000012fd <__c.4387>:
    12fd:	5b 44 43 4c 5d 0a 00                                [DCL]..

00001304 <__c.4385>:
    1304:	5b 53 44 43 20 41 4d 49 47 4f 5d 0a 00              [SDC AMIGO]..

00001311 <__c.4383>:
    1311:	5b 53 44 43 20 53 53 38 30 5d 0a 00                 [SDC SS80]..

0000131d <__c.4381>:
    131d:	5b 53 44 43 5d 0a 00                                [SDC]..

00001324 <__c.4379>:
    1324:	5b 53 50 44 5d 0a 00                                [SPD]..

0000132b <__c.4377>:
    132b:	5b 53 50 45 5d 0a 00                                [SPE]..

00001332 <__c.4375>:
    1332:	5b 50 50 55 20 75 6e 73 75 70 70 6f 72 74 65 64     [PPU unsupported
    1342:	5d 0a 00                                            ]..

00001345 <__c.4373>:
    1345:	5b 50 50 43 20 75 6e 73 75 70 70 6f 72 74 65 64     [PPC unsupported
    1355:	5d 0a 00                                            ]..

00001358 <__c.4368>:
    1358:	5b 49 44 45 4e 54 20 55 6e 69 74 3a 25 30 32 58     [IDENT Unit:%02X
    1368:	48 3d 25 30 34 58 48 5d 0a 00                       H=%04XH]..

00001372 <__c.4366>:
    1372:	5b 49 44 45 4e 54 20 55 6e 69 74 3a 25 30 32 58     [IDENT Unit:%02X
    1382:	48 3d 25 30 34 58 48 20 46 41 49 4c 45 44 5d 0a     H=%04XH FAILED].
	...

00001393 <__c.4339>:
    1393:	3c 4d 45 44 49 41 20 4d 49 53 53 49 4e 47 3e 0a     <MEDIA MISSING>.
	...

000013a4 <__c.4337>:
    13a4:	3c 49 4e 54 45 52 52 55 50 54 3e 0a 00              <INTERRUPT>..

000013b1 <__c.4335>:
    13b1:	3c 42 55 53 3e 0a 00                                <BUS>..

000013b8 <__c.4333>:
    13b8:	3c 54 49 4d 45 4f 55 54 3e 0a 00                    <TIMEOUT>..

000013c3 <__c.4331>:
    13c3:	3c 49 46 43 3e 0a 00                                <IFC>..

000013ca <__c.4326>:
    13ca:	43 61 70 74 75 72 69 6e 67 20 43 6c 6f 73 65 64     Capturing Closed
    13da:	0a 00                                               ..

000013dc <__c.4324>:
    13dc:	44 6f 6e 65 0a 00                                   Done..

000013e2 <__c.4320>:
    13e2:	65 78 69 74 69 6e 67 2e 2e 2e 0a 00                 exiting.....

000013ee <__c.4318>:
    13ee:	50 72 65 73 73 20 41 4e 59 20 6b 65 79 20 74 6f     Press ANY key to
    13fe:	20 65 78 69 74 0a 00                                 exit..

00001405 <__c.4316>:
    1405:	46 55 4c 4c 20 47 50 49 42 20 42 55 53 20 68 61     FULL GPIB BUS ha
    1415:	6e 64 73 68 61 6b 65 20 6c 6f 67 67 69 6e 67 20     ndshake logging 
    1425:	72 65 71 75 65 73 74 65 64 0a 00                    requested..

00001430 <__c.4314>:
    1430:	43 61 70 74 75 72 69 6e 67 20 47 50 49 42 20 42     Capturing GPIB B
    1440:	55 53 20 74 6f 3a 25 73 0a 00                       US to:%s..

0000144a <__c.4268>:
    144a:	43 61 72 64 20 69 73 20 77 72 69 74 65 20 70 72     Card is write pr
    145a:	6f 74 65 63 74 65 64 0a 00                          otected..

00001463 <__c.4266>:
    1463:	25 73 20 6f 70 65 6e 20 66 61 69 6c 75 72 65 0a     %s open failure.
	...

00001474 <__c.4264>:
    1474:	25 73 20 68 61 64 20 25 64 20 65 72 72 6f 72 73     %s had %d errors
    1484:	0a 00                                               ..

00001486 <__c.4482>:
    1486:	64 65 62 75 67 3d 25 30 34 58 48 0a 00              debug=%04XH..

00001493 <__c.4474>:
    1493:	67 70 69 62 20 70 72 65 66 69 78 20 69 73 20 6f     gpib prefix is o
    14a3:	70 74 69 6f 6e 61 6c 0a 67 70 69 62 20 61 64 64     ptional.gpib add
    14b3:	72 65 73 73 65 73 0a 67 70 69 62 20 63 6f 6e 66     resses.gpib conf
    14c3:	69 67 0a 67 70 69 62 20 64 65 62 75 67 20 4e 0a     ig.gpib debug N.
    14d3:	67 70 69 62 20 65 6c 61 70 73 65 64 0a 67 70 69     gpib elapsed.gpi
    14e3:	62 20 65 6c 61 70 73 65 64 5f 72 65 73 65 74 0a     b elapsed_reset.
    14f3:	67 70 69 62 20 69 66 63 0a 67 70 69 62 20 70 6c     gpib ifc.gpib pl
    1503:	6f 74 20 66 69 6c 65 6e 61 6d 65 2e 74 78 74 0a     ot filename.txt.
    1513:	67 70 69 62 20 70 6c 6f 74 5f 65 63 68 6f 0a 67     gpib plot_echo.g
    1523:	70 69 62 20 74 61 73 6b 0a 67 70 69 62 20 74 72     pib task.gpib tr
    1533:	61 63 65 20 66 69 6c 65 6e 61 6d 65 2e 74 78 74     ace filename.txt
    1543:	20 5b 42 55 53 5d 0a 0a 0a 00                        [BUS]....

0000154d <__c.4472>:
    154d:	67 70 69 62 20 68 65 6c 70 0a 00                    gpib help..

00001558 <__c.4913>:
    1558:	0a 00                                               ..

0000155a <__c.4908>:
    155a:	41 4d 49 47 4f 25 64 00                             AMIGO%d.

00001562 <__c.4906>:
    1562:	43 61 6e 20 6e 6f 74 20 75 73 65 20 6e 6f 6e 20     Can not use non 
    1572:	32 35 36 20 62 79 74 65 20 73 65 63 74 6f 72 73     256 byte sectors
    1582:	0a 00                                               ..

00001584 <__c.4904>:
    1584:	53 53 38 30 2d 25 64 00                             SS80-%d.

0000158c <__c.4902>:
    158c:	43 61 6e 20 6e 6f 74 20 75 73 65 20 6e 6f 6e 20     Can not use non 
    159c:	32 35 36 20 62 79 74 65 20 73 65 63 74 6f 72 73     256 byte sectors
    15ac:	0a 00                                               ..

000015ae <__c.4889>:
    15ae:	0a 00                                               ..

000015b0 <__c.4887>:
    15b0:	45 4e 44 0a 00                                      END..

000015b5 <__c.4882>:
    15b5:	0a 00                                               ..

000015b7 <__c.4880>:
    15b7:	45 4e 44 0a 00                                      END..

000015bc <__c.4878>:
    15bc:	20 20 45 4e 44 0a 00                                  END..

000015c3 <__c.4876>:
    15c3:	41 44 44 52 45 53 53 00                             ADDRESS.

000015cb <__c.4874>:
    15cb:	20 20 43 4f 4e 46 49 47 0a 00                         CONFIG..

000015d5 <__c.4872>:
    15d5:	50 52 49 4e 54 45 52 0a 00                          PRINTER..

000015de <__c.4870>:
    15de:	20 20 45 4e 44 0a 00                                  END..

000015e5 <__c.4868>:
    15e5:	23 20 42 4c 4f 43 4b 53 00                          # BLOCKS.

000015ee <__c.4866>:
    15ee:	43 59 4c 49 4e 44 45 52 53 00                       CYLINDERS.

000015f8 <__c.4864>:
    15f8:	48 45 41 44 53 00                                   HEADS.

000015fe <__c.4862>:
    15fe:	53 45 43 54 4f 52 53 5f 50 45 52 5f 54 52 41 43     SECTORS_PER_TRAC
    160e:	4b 00                                               K.

00001610 <__c.4860>:
    1610:	42 59 54 45 53 5f 50 45 52 5f 53 45 43 54 4f 52     BYTES_PER_SECTOR
	...

00001621 <__c.4858>:
    1621:	20 20 47 45 4f 4d 45 54 52 59 0a 00                   GEOMETRY..

0000162d <__c.4856>:
    162d:	20 20 45 4e 44 0a 00                                  END..

00001634 <__c.4854>:
    1634:	49 44 00                                            ID.

00001637 <__c.4852>:
    1637:	20 20 43 4f 4e 46 49 47 0a 00                         CONFIG..

00001641 <__c.4850>:
    1641:	20 20 45 4e 44 0a 00                                  END..

00001648 <__c.4848>:
    1648:	46 49 4c 45 00                                      FILE.

0000164d <__c.4846>:
    164d:	50 50 52 00                                         PPR.

00001651 <__c.4844>:
    1651:	41 44 44 52 45 53 53 00                             ADDRESS.

00001659 <__c.4842>:
    1659:	20 20 48 45 41 44 45 52 0a 00                         HEADER..

00001663 <__c.4840>:
    1663:	20 20 23 20 48 50 38 35 20 42 41 53 49 43 20 41       # HP85 BASIC A
    1673:	44 44 52 45 53 53 20 3a 44 37 25 64 30 0a 00        DDRESS :D7%d0..

00001682 <__c.4838>:
    1682:	41 4d 49 47 4f 20 25 73 0a 00                       AMIGO %s..

0000168c <__c.4836>:
    168c:	20 20 45 4e 44 0a 00                                  END..

00001693 <__c.4834>:
    1693:	23 20 42 4c 4f 43 4b 53 00                          # BLOCKS.

0000169c <__c.4832>:
    169c:	49 4e 54 45 52 4c 45 41 56 45 00                    INTERLEAVE.

000016a7 <__c.4830>:
    16a7:	4d 41 58 5f 42 4c 4f 43 4b 5f 4e 55 4d 42 45 52     MAX_BLOCK_NUMBER
	...

000016b8 <__c.4828>:
    16b8:	4d 41 58 5f 53 45 43 54 4f 52 00                    MAX_SECTOR.

000016c3 <__c.4826>:
    16c3:	4d 41 58 5f 48 45 41 44 00                          MAX_HEAD.

000016cc <__c.4824>:
    16cc:	4d 41 58 5f 43 59 4c 49 4e 44 45 52 00              MAX_CYLINDER.

000016d9 <__c.4822>:
    16d9:	20 20 56 4f 4c 55 4d 45 0a 00                         VOLUME..

000016e3 <__c.4820>:
    16e3:	20 20 45 4e 44 0a 00                                  END..

000016ea <__c.4818>:
    16ea:	52 45 4d 4f 56 41 42 4c 45 5f 56 4f 4c 55 4d 45     REMOVABLE_VOLUME
    16fa:	53 00                                               S.

000016fc <__c.4816>:
    16fc:	46 49 58 45 44 5f 56 4f 4c 55 4d 45 53 00           FIXED_VOLUMES.

0000170a <__c.4814>:
    170a:	4d 41 58 49 4d 55 4d 5f 49 4e 54 45 52 4c 45 41     MAXIMUM_INTERLEA
    171a:	56 45 00                                            VE.

0000171d <__c.4812>:
    171d:	41 43 43 45 53 53 5f 54 49 4d 45 00                 ACCESS_TIME.

00001729 <__c.4810>:
    1729:	4f 50 54 49 4d 41 4c 5f 52 45 54 52 59 5f 54 49     OPTIMAL_RETRY_TI
    1739:	4d 45 00                                            ME.

0000173c <__c.4808>:
    173c:	43 4f 4e 54 49 4e 4f 55 53 5f 54 52 41 4e 53 46     CONTINOUS_TRANSF
    174c:	45 52 5f 52 41 54 45 00                             ER_RATE.

00001754 <__c.4806>:
    1754:	42 4c 4f 43 4b 5f 54 49 4d 45 00                    BLOCK_TIME.

0000175f <__c.4804>:
    175f:	42 55 52 53 54 5f 53 49 5a 45 00                    BURST_SIZE.

0000176a <__c.4802>:
    176a:	42 55 46 46 45 52 45 44 5f 42 4c 4f 43 4b 53 00     BUFFERED_BLOCKS.

0000177a <__c.4800>:
    177a:	42 59 54 45 53 5f 50 45 52 5f 42 4c 4f 43 4b 00     BYTES_PER_BLOCK.

0000178a <__c.4798>:
    178a:	44 45 56 49 43 45 5f 4e 55 4d 42 45 52 00           DEVICE_NUMBER.

00001798 <__c.4796>:
    1798:	55 4e 49 54 5f 54 59 50 45 00                       UNIT_TYPE.

000017a2 <__c.4794>:
    17a2:	20 20 55 4e 49 54 0a 00                               UNIT..

000017aa <__c.4792>:
    17aa:	20 20 45 4e 44 0a 00                                  END..

000017b1 <__c.4790>:
    17b1:	54 59 50 45 00                                      TYPE.

000017b6 <__c.4788>:
    17b6:	54 52 41 4e 53 46 45 52 5f 52 41 54 45 00           TRANSFER_RATE.

000017c4 <__c.4786>:
    17c4:	55 4e 49 54 53 5f 49 4e 53 54 41 4c 4c 45 44 00     UNITS_INSTALLED.

000017d4 <__c.4784>:
    17d4:	20 20 43 4f 4e 54 52 4f 4c 4c 45 52 0a 00             CONTROLLER..

000017e2 <__c.4782>:
    17e2:	20 20 45 4e 44 0a 00                                  END..

000017e9 <__c.4780>:
    17e9:	49 44 00                                            ID.

000017ec <__c.4778>:
    17ec:	20 20 48 45 41 44 45 52 0a 00                         HEADER..

000017f6 <__c.4776>:
    17f6:	20 20 45 4e 44 0a 00                                  END..

000017fd <__c.4774>:
    17fd:	46 49 4c 45 00                                      FILE.

00001802 <__c.4772>:
    1802:	50 50 52 00                                         PPR.

00001806 <__c.4770>:
    1806:	41 44 44 52 45 53 53 00                             ADDRESS.

0000180e <__c.4768>:
    180e:	20 20 43 4f 4e 46 49 47 0a 00                         CONFIG..

00001818 <__c.4766>:
    1818:	20 20 23 20 48 50 38 35 20 42 41 53 49 43 20 41       # HP85 BASIC A
    1828:	44 44 52 45 53 53 20 3a 44 37 25 64 30 0a 00        DDRESS :D7%d0..

00001837 <__c.4764>:
    1837:	53 53 38 30 20 25 73 0a 00                          SS80 %s..

00001840 <__c.4761>:
    1840:	43 75 72 72 65 6e 74 20 43 6f 6e 66 69 67 75 72     Current Configur
    1850:	61 74 69 6f 6e 20 53 65 74 74 69 6e 67 73 0a 00     ation Settings..

00001860 <__c.4753>:
    1860:	0a 00                                               ..

00001862 <__c.4748>:
    1862:	20 20 50 52 49 4e 54 45 52 5f 4d 53 41 20 3d 20       PRINTER_MSA = 
    1872:	25 30 32 58 48 0a 00                                %02XH..

00001879 <__c.4746>:
    1879:	20 20 50 52 49 4e 54 45 52 5f 4d 54 41 20 3d 20       PRINTER_MTA = 
    1889:	25 30 32 58 48 0a 00                                %02XH..

00001890 <__c.4744>:
    1890:	20 20 50 52 49 4e 54 45 52 5f 4d 4c 41 20 3d 20       PRINTER_MLA = 
    18a0:	25 30 32 58 48 0a 00                                %02XH..

000018a7 <__c.4742>:
    18a7:	20 20 41 4d 49 47 4f 5f 4d 53 41 20 20 20 3d 20       AMIGO_MSA   = 
    18b7:	25 30 32 58 48 0a 00                                %02XH..

000018be <__c.4740>:
    18be:	20 20 41 4d 49 47 4f 5f 4d 54 41 20 20 20 3d 20       AMIGO_MTA   = 
    18ce:	25 30 32 58 48 0a 00                                %02XH..

000018d5 <__c.4738>:
    18d5:	20 20 41 4d 49 47 4f 5f 4d 4c 41 20 20 20 3d 20       AMIGO_MLA   = 
    18e5:	25 30 32 58 48 0a 00                                %02XH..

000018ec <__c.4736>:
    18ec:	20 20 53 53 38 30 5f 4d 53 41 20 20 20 20 3d 20       SS80_MSA    = 
    18fc:	25 30 32 58 48 0a 00                                %02XH..

00001903 <__c.4734>:
    1903:	20 20 53 53 38 30 5f 4d 54 41 20 20 20 20 3d 20       SS80_MTA    = 
    1913:	25 30 32 58 48 0a 00                                %02XH..

0000191a <__c.4732>:
    191a:	20 20 53 53 38 30 5f 4d 4c 41 20 20 20 20 3d 20       SS80_MLA    = 
    192a:	25 30 32 58 48 0a 00                                %02XH..

00001931 <__c.4729>:
    1931:	4c 69 73 74 65 6e 20 61 6e 64 20 54 61 6c 6b 20     Listen and Talk 
    1941:	41 64 64 72 65 73 73 20 53 65 74 74 69 6e 67 73     Address Settings
    1951:	0a 00                                               ..

00001953 <__c.4723>:
    1953:	20 20 20 20 25 2d 32 35 73 20 3d 20 22 25 73 22         %-25s = "%s"
    1963:	0a 00                                               ..

00001965 <__c.4712>:
    1965:	20 20 20 20 25 2d 32 35 73 20 3d 20 25 38 6c 78         %-25s = %8lx
    1975:	48 20 28 25 6c 64 29 0a 00                          H (%ld)..

0000197e <__c.4701>:
    197e:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 2a 2a 2a     Read_Config: ***
    198e:	2a 2a 2a 20 65 72 72 6f 72 73 28 25 64 29 20 2a     *** errors(%d) *
    199e:	2a 2a 2a 2a 2a 0a 00                                *****..

000019a5 <__c.4699>:
    19a5:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 72 65 61     Read_Config: rea
    19b5:	64 28 25 64 29 20 6c 69 6e 65 73 0a 00              d(%d) lines..

000019c2 <__c.4697>:
    19c2:	4d 69 73 73 69 6e 67 20 45 4e 44 20 73 74 61 74     Missing END stat
    19d2:	65 6d 65 6e 74 20 61 74 20 6c 69 6e 65 3a 25 64     ement at line:%d
    19e2:	0a 00                                               ..

000019e4 <__c.4693>:
    19e4:	55 6e 65 78 70 65 63 74 65 64 20 53 54 41 54 45     Unexpected STATE
    19f4:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1a04:	0a 00                                               ..

00001a06 <__c.4690>:
    1a06:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1a16:	20 47 45 4d 45 54 52 59 20 74 6f 6b 65 6e 3a 20      GEMETRY token: 
    1a26:	25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00     %s, at line:%d..

00001a36 <__c.4688>:
    1a36:	42 59 54 45 53 20 50 45 52 20 53 45 43 54 4f 52     BYTES PER SECTOR
    1a46:	3a 20 25 73 0a 00                                   : %s..

00001a4c <__c.4685>:
    1a4c:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1a5c:	20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25      CONFIG token: %
    1a6c:	73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00        s, at line:%d..

00001a7b <__c.4682>:
    1a7b:	55 6e 65 78 70 65 63 74 65 64 20 48 45 41 44 45     Unexpected HEADE
    1a8b:	52 20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20     R CONFIG token: 
    1a9b:	25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00     %s, at line:%d..

00001aab <__c.4680>:
    1aab:	53 6b 69 70 70 69 6e 67 20 25 73 2c 20 61 74 20     Skipping %s, at 
    1abb:	6c 69 6e 65 3a 25 64 0a 00                          line:%d..

00001ac4 <__c.4677>:
    1ac4:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1ad4:	20 53 54 41 52 54 20 74 6f 6b 65 6e 3a 20 25 73      START token: %s
    1ae4:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001af2 <__c.4674>:
    1af2:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1b02:	56 4f 4c 55 4d 45 20 74 6f 6b 65 6e 3a 20 25 73     VOLUME token: %s
    1b12:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001b20 <__c.4671>:
    1b20:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1b30:	55 4e 49 54 20 74 6f 6b 65 6e 3a 20 25 73 2c 20     UNIT token: %s, 
    1b40:	61 74 20 6c 69 6e 65 3a 25 64 0a 00                 at line:%d..

00001b4c <__c.4668>:
    1b4c:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1b5c:	43 4f 4e 54 52 4f 4c 4c 45 52 20 74 6f 6b 65 6e     CONTROLLER token
    1b6c:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1b7c:	0a 00                                               ..

00001b7e <__c.4665>:
    1b7e:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1b8e:	43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25 73     CONFIG token: %s
    1b9e:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001bac <__c.4662>:
    1bac:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1bbc:	43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25 73     CONFIG token: %s
    1bcc:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001bda <__c.4659>:
    1bda:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1bea:	53 54 41 52 54 20 74 6f 6b 65 6e 3a 20 25 73 2c     START token: %s,
    1bfa:	20 61 74 20 6c 69 6e 65 3a 25 64 0a 00               at line:%d..

00001c07 <__c.4656>:
    1c07:	55 6e 65 78 70 65 63 74 65 64 20 50 52 49 4e 54     Unexpected PRINT
    1c17:	45 52 20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a     ER CONFIG token:
    1c27:	20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a      %s, at line:%d.
	...

00001c38 <__c.4653>:
    1c38:	55 6e 65 78 70 65 63 74 65 64 20 50 52 49 4e 54     Unexpected PRINT
    1c48:	45 52 20 74 6f 6b 65 6e 3a 20 25 73 2c 20 61 74     ER token: %s, at
    1c58:	20 6c 69 6e 65 3a 25 64 0a 00                        line:%d..

00001c62 <__c.4649>:
    1c62:	55 6e 65 78 70 65 63 74 65 64 20 53 54 41 52 54     Unexpected START
    1c72:	20 74 6f 6b 65 6e 3a 20 25 73 2c 20 61 74 20 6c      token: %s, at l
    1c82:	69 6e 65 3a 25 64 0a 00                             ine:%d..

00001c8a <__c.4647>:
    1c8a:	53 6b 69 70 70 69 6e 67 20 25 73 2c 20 61 74 20     Skipping %s, at 
    1c9a:	6c 69 6e 65 3a 25 64 0a 00                          line:%d..

00001ca3 <__c.4643>:
    1ca3:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 6f 70 65     Read_Config: ope
    1cb3:	6e 28 25 73 29 20 66 61 69 6c 65 64 0a 00           n(%s) failed..

00001cc1 <__c.4641>:
    1cc1:	52 65 61 64 69 6e 67 3a 20 25 73 0a 00              Reading: %s..

00001cce <__c.4619>:
    1cce:	57 61 72 6e 69 6e 67 3a 20 25 73 20 42 59 54 45     Warning: %s BYTE
    1cde:	53 5f 50 45 52 5f 53 45 43 54 4f 52 20 21 3d 20     S_PER_SECTOR != 
    1cee:	32 35 36 2c 20 41 64 6a 75 73 74 69 6e 67 20 74     256, Adjusting t
    1cfe:	6f 20 32 35 36 0a 00                                o 256..

00001d05 <__c.4617>:
    1d05:	57 61 72 6e 69 6e 67 3a 20 25 73 20 42 59 54 45     Warning: %s BYTE
    1d15:	53 5f 50 45 52 5f 42 4c 4f 43 4b 20 21 3d 20 32     S_PER_BLOCK != 2
    1d25:	35 36 2c 20 41 64 6a 75 73 74 69 6e 67 20 74 6f     56, Adjusting to
    1d35:	20 32 35 36 0a 00                                    256..

00001d3b <__c.4604>:
    1d3b:	68 70 64 69 72 5f 70 61 72 61 6d 65 74 65 72 73     hpdir_parameters
    1d4b:	20 69 6e 76 61 6c 69 64 20 54 59 50 45 0a 00         invalid TYPE..

00001d5a <__c.4595>:
    1d5a:	6c 69 6e 65 3a 25 64 2c 20 25 73 20 69 73 20 61     line:%d, %s is a
    1d6a:	62 6f 76 65 20 72 61 6e 67 65 20 25 64 0a 00        bove range %d..

00001d79 <__c.4593>:
    1d79:	6c 69 6e 65 3a 25 64 2c 20 25 73 20 69 73 20 62     line:%d, %s is b
    1d89:	65 6c 6f 77 20 72 61 6e 67 65 20 25 64 0a 00        elow range %d..

00001d98 <__c.4591>:
    1d98:	6c 69 6e 65 3a 25 64 2c 20 6d 69 73 73 69 6e 67     line:%d, missing
    1da8:	20 76 61 6c 75 65 0a 00                              value..

00001db0 <__c.4568>:
    1db0:	61 6c 6c 6f 63 5f 64 65 76 69 63 65 3a 20 69 6e     alloc_device: in
    1dc0:	76 61 6c 69 64 20 74 79 70 65 3a 25 64 3a 25 73     valid type:%d:%s
    1dd0:	0a 00                                               ..

00001dd2 <__c.4560>:
    1dd2:	61 6c 6c 6f 63 5f 64 65 76 69 63 65 3a 20 44 65     alloc_device: De
    1de2:	76 69 63 65 20 74 61 62 6c 65 20 69 73 20 66 75     vice table is fu
    1df2:	6c 6c 0a 00                                         ll..

00001df6 <__c.4547>:
    1df6:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1e06:	65 3a 28 25 64 29 20 69 6e 76 61 6c 69 64 20 74     e:(%d) invalid t
    1e16:	79 70 65 3a 25 64 3a 25 73 0a 00                    ype:%d:%s..

00001e21 <__c.4545>:
    1e21:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1e31:	65 3a 20 69 6e 64 65 78 3a 20 25 64 20 74 79 70     e: index: %d typ
    1e41:	65 3a 25 64 3a 25 73 2c 20 73 74 61 74 65 20 3d     e:%d:%s, state =
    1e51:	3d 20 4e 55 4c 4c 0a 00                             = NULL..

00001e59 <__c.4543>:
    1e59:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1e69:	65 3a 20 69 6e 64 65 78 20 25 64 20 75 6e 69 6e     e: index %d unin
    1e79:	69 74 61 6c 69 7a 65 64 20 74 79 70 65 3a 25 64     italized type:%d
    1e89:	3a 25 73 0a 00                                      :%s..

00001e8e <__c.4541>:
    1e8e:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1e9e:	65 3a 20 69 6e 64 65 78 3a 25 64 20 74 79 70 65     e: index:%d type
    1eae:	3a 25 64 3a 25 73 2c 20 64 65 76 20 3d 3d 20 4e     :%d:%s, dev == N
    1ebe:	55 4c 4c 0a 00                                      ULL..

00001ec3 <__c.4539>:
    1ec3:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1ed3:	65 3a 20 69 6e 64 65 78 3a 25 64 20 61 64 64 72     e: index:%d addr
    1ee3:	65 73 73 3a 20 25 30 32 58 48 20 6f 75 74 20 6f     ess: %02XH out o
    1ef3:	66 20 72 61 6e 67 65 0a 00                          f range..

00001efc <__c.4537>:
    1efc:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1f0c:	65 3a 28 25 64 29 20 6f 75 74 20 6f 66 20 72 61     e:(%d) out of ra
    1f1c:	6e 67 65 0a 00                                      nge..

00001f21 <__c.3770>:
    1f21:	46 6f 75 6e 64 20 4d 6f 64 65 6c 3a 20 25 73 0a     Found Model: %s.
	...

00001f32 <__c.3768>:
    1f32:	25 73 20 25 73 0a 00                                %s %s..

00001f39 <__c.3764>:
    1f39:	45 72 72 6f 72 3a 20 68 70 64 69 72 2e 69 6e 69     Error: hpdir.ini
    1f49:	20 6e 6f 74 20 66 6f 75 6e 64 21 0a 00               not found!..

00001f56 <__c.4576>:
    1f56:	5b 53 53 38 30 20 55 6e 6b 6e 6f 77 6e 20 53 43     [SS80 Unknown SC
    1f66:	3a 20 25 30 32 58 48 2c 20 6c 69 73 74 65 6e 3a     : %02XH, listen:
    1f76:	25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58     %02XH, talk:%02X
    1f86:	48 5d 0a 00                                         H]..

00001f8a <__c.4574>:
    1f8a:	5b 53 53 38 30 20 53 43 20 55 6e 6b 6e 6f 77 6e     [SS80 SC Unknown
    1f9a:	3a 20 25 30 32 58 48 2c 20 6c 69 73 74 65 6e 3a     : %02XH, listen:
    1faa:	25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58     %02XH, talk:%02X
    1fba:	48 5d 0a 00                                         H]..

00001fbe <__c.4572>:
    1fbe:	5b 53 53 38 30 20 54 72 61 6e 73 70 61 72 65 6e     [SS80 Transparen
    1fce:	74 5d 0a 00                                         t]..

00001fd2 <__c.4570>:
    1fd2:	5b 41 6d 69 67 6f 20 43 6c 65 61 72 5d 0a 00        [Amigo Clear]..

00001fe1 <__c.4568>:
    1fe1:	5b 53 53 38 30 20 52 65 70 6f 72 74 20 53 74 61     [SS80 Report Sta
    1ff1:	74 65 5d 0a 00                                      te]..

00001ff6 <__c.4566>:
    1ff6:	5b 53 53 30 30 20 45 78 65 63 75 74 65 20 53 74     [SS00 Execute St
    2006:	61 74 65 5d 0a 00                                   ate]..

0000200c <__c.4564>:
    200c:	5b 53 53 38 30 20 43 6f 6d 6d 61 6e 64 20 53 74     [SS80 Command St
    201c:	61 74 65 5d 0a 00                                   ate]..

00002022 <__c.4559>:
    2022:	5b 47 50 49 42 20 45 72 72 6f 72 20 52 65 74 75     [GPIB Error Retu
    2032:	72 6e 20 2d 20 57 72 69 74 65 20 45 52 52 4f 52     rn - Write ERROR
    2042:	5d 0a 00                                            ]..

00002045 <__c.4552>:
    2045:	5b 53 53 38 30 20 49 6e 63 72 65 6d 65 6e 74 20     [SS80 Increment 
    2055:	74 6f 20 28 25 6c 58 48 29 5d 0a 00                 to (%lXH)]..

00002061 <__c.4545>:
    2061:	5b 41 6d 69 67 6f 20 43 6c 65 61 72 5d 0a 00        [Amigo Clear]..

00002070 <__c.4543>:
    2070:	5b 47 50 49 42 20 52 65 61 64 20 45 72 72 6f 72     [GPIB Read Error
    2080:	5d 0a 00                                            ]..

00002083 <__c.4536>:
    2083:	5b 53 53 38 30 20 53 44 43 5d 0a 00                 [SS80 SDC]..

0000208f <__c.4522>:
    208f:	5b 53 53 38 30 20 71 73 74 61 74 20 25 30 32 58     [SS80 qstat %02X
    209f:	5d 0a 00                                            ]..

000020a2 <__c.4520>:
    20a2:	5b 53 53 38 30 20 71 73 74 61 74 20 73 65 6e 64     [SS80 qstat send
    20b2:	20 46 41 49 4c 45 44 5d 0a 00                        FAILED]..

000020bc <__c.4513>:
    20bc:	5b 53 53 38 30 20 53 65 65 6b 3a 25 30 38 6c 58     [SS80 Seek:%08lX
    20cc:	48 5d 0a 00                                         H]..

000020d0 <__c.4511>:
    20d0:	5b 53 53 38 30 20 53 65 65 6b 20 4f 56 45 52 46     [SS80 Seek OVERF
    20e0:	4c 4f 57 20 61 74 20 25 30 38 6c 58 48 5d 0a 00     LOW at %08lXH]..

000020f0 <__c.4506>:
    20f0:	5b 53 53 38 30 20 54 72 61 6e 73 70 61 72 65 6e     [SS80 Transparen
    2100:	74 20 43 6f 6d 6d 61 6e 64 2c 20 45 72 72 6f 72     t Command, Error
    2110:	20 61 74 20 28 25 64 29 20 6f 66 20 28 25 64 29      at (%d) of (%d)
    2120:	20 4f 50 20 43 6f 64 65 73 5d 0a 00                  OP Codes]..

0000212c <__c.4503>:
    212c:	5b 53 53 38 30 20 49 6e 76 61 6c 69 64 20 4f 50     [SS80 Invalid OP
    213c:	20 43 6f 64 65 20 28 25 30 32 58 48 29 5d 0a 00      Code (%02XH)]..

0000214c <__c.4501>:
    214c:	5b 53 53 38 30 20 43 61 6e 63 65 6c 20 28 25 64     [SS80 Cancel (%d
    215c:	29 5d 0a 00                                         )]..

00002160 <__c.4499>:
    2160:	5b 53 53 38 30 20 43 68 61 6e 6e 65 6c 20 49 6e     [SS80 Channel In
    2170:	64 65 70 65 6e 64 65 6e 74 20 43 6c 65 61 72 20     dependent Clear 
    2180:	28 25 64 29 5d 0a 00                                (%d)]..

00002187 <__c.4497>:
    2187:	5b 53 53 38 30 20 57 72 69 74 65 20 4c 6f 6f 70     [SS80 Write Loop
    2197:	62 61 63 6b 20 2d 20 54 4f 44 4f 5d 0a 00           back - TODO]..

000021a5 <__c.4495>:
    21a5:	5b 53 53 38 30 20 52 65 61 64 20 4c 6f 6f 70 62     [SS80 Read Loopb
    21b5:	61 63 6b 20 2d 20 54 4f 44 4f 5d 0a 00              ack - TODO]..

000021c2 <__c.4492>:
    21c2:	5b 53 53 38 30 20 48 50 2d 49 42 20 50 61 72 69     [SS80 HP-IB Pari
    21d2:	74 79 20 43 68 65 63 6b 69 6e 67 20 2d 20 54 4f     ty Checking - TO
    21e2:	44 4f 5d 0a 00                                      DO]..

000021e7 <__c.4489>:
    21e7:	5b 47 50 49 42 20 62 75 66 66 65 72 20 4f 56 45     [GPIB buffer OVE
    21f7:	52 46 4c 4f 57 21 5d 0a 00                          RFLOW!]..

00002200 <__c.4487>:
    2200:	5b 47 50 49 42 20 52 65 61 64 20 45 52 52 4f 52     [GPIB Read ERROR
    2210:	5d 0a 00                                            ]..

00002213 <__c.4478>:
    2213:	5b 53 53 38 30 20 45 78 65 63 75 74 65 20 43 6f     [SS80 Execute Co
    2223:	6d 6d 61 6e 64 2c 20 45 72 72 6f 72 20 61 74 20     mmand, Error at 
    2233:	28 25 64 29 20 6f 66 20 28 25 64 29 20 4f 50 20     (%d) of (%d) OP 
    2243:	43 6f 64 65 73 5d 0a 00                             Codes]..

0000224b <__c.4475>:
    224b:	5b 53 53 38 30 20 49 6e 76 61 6c 69 64 20 4f 50     [SS80 Invalid OP
    225b:	20 43 6f 64 65 20 28 25 30 32 58 48 29 5d 0a 00      Code (%02XH)]..

0000226b <__c.4473>:
    226b:	5b 53 53 38 30 20 49 6e 69 61 74 65 20 44 69 61     [SS80 Iniate Dia
    227b:	67 6e 6f 73 74 69 63 20 2d 20 54 4f 44 4f 5d 0a     gnostic - TODO].
	...

0000228c <__c.4471>:
    228c:	5b 53 53 38 30 20 52 65 71 75 65 73 74 20 53 74     [SS80 Request St
    229c:	61 74 75 73 5d 0a 00                                atus]..

000022a3 <__c.4469>:
    22a3:	5b 53 53 38 30 20 44 6f 6f 72 20 4c 6f 63 6b 20     [SS80 Door Lock 
    22b3:	2d 20 54 4f 44 4f 5d 0a 00                          - TODO]..

000022bc <__c.4467>:
    22bc:	5b 53 53 38 30 20 44 6f 6f 72 20 55 6e 4c 6f 63     [SS80 Door UnLoc
    22cc:	6b 20 2d 20 54 4f 44 4f 5d 0a 00                    k - TODO]..

000022d7 <__c.4465>:
    22d7:	5b 53 53 38 30 20 53 65 74 20 53 74 61 74 75 73     [SS80 Set Status
    22e7:	20 4d 61 73 6b 20 2d 20 54 4f 44 4f 5d 0a 00         Mask - TODO]..

000022f6 <__c.4463>:
    22f6:	5b 53 53 38 30 20 49 6e 69 74 69 61 6c 69 7a 65     [SS80 Initialize
    2306:	20 4d 65 64 69 61 20 54 4f 44 4f 5d 0a 00            Media TODO]..

00002314 <__c.4461>:
    2314:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 5d 0a     [SS80 Describe].
	...

00002325 <__c.4459>:
    2325:	5b 53 53 38 30 20 56 61 6c 69 64 61 74 65 20 4b     [SS80 Validate K
    2335:	65 79 20 2d 20 54 4f 44 4f 5d 0a 00                 ey - TODO]..

00002341 <__c.4457>:
    2341:	5b 53 53 38 30 20 52 65 6c 65 61 73 65 20 44 65     [SS80 Release De
    2351:	6e 69 65 64 20 4e 4f 2d 4f 50 5d 0a 00              nied NO-OP]..

0000235e <__c.4455>:
    235e:	5b 53 53 38 30 20 52 65 6c 65 61 73 65 20 4e 4f     [SS80 Release NO
    236e:	2d 4f 50 5d 0a 00                                   -OP]..

00002374 <__c.4453>:
    2374:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2384:	20 56 65 72 69 66 79 20 2d 20 54 4f 44 4f 5d 0a      Verify - TODO].
	...

00002395 <__c.4451>:
    2395:	5b 53 53 38 30 20 53 65 74 20 52 65 74 75 72 6e     [SS80 Set Return
    23a5:	20 41 64 64 72 65 73 73 69 6e 67 20 2d 20 54 4f      Addressing - TO
    23b5:	44 4f 5d 0a 00                                      DO]..

000023ba <__c.4449>:
    23ba:	5b 53 53 38 30 20 53 65 74 20 52 65 6c 65 61 73     [SS80 Set Releas
    23ca:	65 20 4e 4f 2d 4f 50 5d 0a 00                       e NO-OP]..

000023d4 <__c.4447>:
    23d4:	5b 53 53 38 30 20 53 65 74 20 52 50 53 20 4e 4f     [SS80 Set RPS NO
    23e4:	2d 4f 50 5d 0a 00                                   -OP]..

000023ea <__c.4445>:
    23ea:	5b 53 53 38 30 20 4e 4f 2d 4f 50 5d 0a 00           [SS80 NO-OP]..

000023f8 <__c.4443>:
    23f8:	5b 53 53 38 30 20 53 65 74 20 4c 65 6e 67 74 68     [SS80 Set Length
    2408:	3a 28 25 30 38 6c 58 48 29 5d 0a 00                 :(%08lXH)]..

00002414 <__c.4441>:
    2414:	5b 53 53 38 30 20 53 65 74 20 41 64 64 72 65 73     [SS80 Set Addres
    2424:	73 3a 28 25 30 38 6c 58 48 29 5d 0a 00              s:(%08lXH)]..

00002431 <__c.4439>:
    2431:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2441:	20 57 72 69 74 65 5d 0a 00                           Write]..

0000244a <__c.4436>:
    244a:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    245a:	20 52 65 61 64 5d 0a 00                              Read]..

00002462 <__c.4434>:
    2462:	5b 53 53 38 30 20 53 65 74 20 56 6f 6c 75 6d 65     [SS80 Set Volume
    2472:	3a 20 28 25 64 29 5d 0a 00                          : (%d)]..

0000247b <__c.4431>:
    247b:	5b 53 53 38 30 20 53 65 74 20 55 6e 69 74 3a 28     [SS80 Set Unit:(
    248b:	25 64 29 5d 0a 00                                   %d)]..

00002491 <__c.4429>:
    2491:	5b 47 50 49 42 20 62 75 66 66 65 72 20 4f 56 45     [GPIB buffer OVE
    24a1:	52 46 4c 4f 57 21 5d 0a 00                          RFLOW!]..

000024aa <__c.4427>:
    24aa:	5b 53 53 38 30 20 43 6f 6d 6d 61 6e 64 20 53 74     [SS80 Command St
    24ba:	61 74 65 20 47 50 49 42 20 52 65 61 64 20 45 52     ate GPIB Read ER
    24ca:	52 4f 52 5d 0a 00                                   ROR]..

000024d0 <__c.4418>:
    24d0:	5b 53 53 38 30 20 56 6f 6c 75 6d 65 3a 25 64 20     [SS80 Volume:%d 
    24e0:	69 6e 76 61 6c 69 64 5d 0a 00                       invalid]..

000024ea <__c.4413>:
    24ea:	5b 53 53 38 30 20 55 4e 49 54 3a 25 64 20 69 6e     [SS80 UNIT:%d in
    24fa:	76 61 6c 69 64 5d 0a 00                             valid]..

00002502 <__c.4408>:
    2502:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 56     [SS80 Describe V
    2512:	6f 6c 75 6d 65 20 46 41 49 4c 45 44 5d 0a 00        olume FAILED]..

00002521 <__c.4406>:
    2521:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 55     [SS80 Describe U
    2531:	6e 69 74 20 46 41 49 4c 45 44 5d 0a 00              nit FAILED]..

0000253e <__c.4404>:
    253e:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 43     [SS80 Describe C
    254e:	6f 6e 74 72 6f 6c 6c 65 72 20 46 41 49 4c 45 44     ontroller FAILED
    255e:	5d 0a 00                                            ]..

00002561 <__c.4402>:
    2561:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 5d 0a     [SS80 Describe].
	...

00002572 <__c.4394>:
    2572:	5b 53 53 38 30 20 53 65 6e 64 20 53 74 61 74 75     [SS80 Send Statu
    2582:	73 20 46 41 49 4c 45 44 5d 0a 00                    s FAILED]..

0000258d <__c.4392>:
    258d:	5b 53 53 38 30 20 53 65 6e 64 20 53 74 61 74 75     [SS80 Send Statu
    259d:	73 5d 0a 00                                         s]..

000025a1 <__c.4382>:
    25a1:	20 20 20 20 25 64 3a 25 73 0a 00                        %d:%s..

000025ac <__c.4380>:
    25ac:	25 73 3a 0a 00                                      %s:..

000025b1 <__c.4355>:
    25b1:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    25c1:	20 57 72 69 74 65 20 57 72 6f 74 65 20 54 6f 74      Write Wrote Tot
    25d1:	61 6c 28 25 6c 78 48 29 5d 0a 00                    al(%lxH)]..

000025dc <__c.4353>:
    25dc:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    25ec:	20 57 72 69 74 65 20 44 49 44 20 4e 4f 54 20 46      Write DID NOT F
    25fc:	49 4e 49 53 48 5d 0a 00                             INISH]..

00002604 <__c.4349>:
    2604:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2614:	20 57 72 69 74 65 20 77 72 6f 74 65 28 25 30 32      Write wrote(%02
    2624:	58 48 29 5d 0a 00                                   XH)]..

0000262a <__c.4347>:
    262a:	5b 44 69 73 6b 20 57 72 69 74 65 20 45 72 72 6f     [Disk Write Erro
    263a:	72 5d 0a 00                                         r]..

0000263e <__c.4343>:
    263e:	5b 47 50 49 42 20 52 65 61 64 20 45 72 72 6f 72     [GPIB Read Error
    264e:	5d 0a 00                                            ]..

00002651 <__c.4341>:
    2651:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2661:	20 57 72 69 74 65 20 61 74 20 25 30 38 6c 58 48      Write at %08lXH
    2671:	28 25 6c 58 48 29 5d 0a 00                          (%lXH)]..

0000267a <__c.4329>:
    267a:	5b 53 53 38 30 20 42 75 66 66 65 72 65 64 20 52     [SS80 Buffered R
    268a:	65 61 64 20 54 6f 74 61 6c 28 25 6c 58 48 29 20     ead Total(%lXH) 
    269a:	62 79 74 65 73 5d 0a 00                             bytes]..

000026a2 <__c.4327>:
    26a2:	5b 53 53 38 30 20 42 75 66 66 65 72 65 64 20 52     [SS80 Buffered R
    26b2:	65 61 64 20 44 49 44 20 4e 4f 54 20 46 49 4e 49     ead DID NOT FINI
    26c2:	53 48 5d 0a 00                                      SH]..

000026c7 <__c.4322>:
    26c7:	5b 53 53 38 30 20 47 50 49 42 20 57 72 69 74 65     [SS80 GPIB Write
    26d7:	20 57 72 72 6f 72 5d 0a 00                           Wrror]..

000026e0 <__c.4320>:
    26e0:	5b 53 53 38 30 20 44 69 73 6b 20 52 65 61 64 20     [SS80 Disk Read 
    26f0:	45 72 72 6f 72 5d 0a 00                             Error]..

000026f8 <__c.4318>:
    26f8:	5b 53 53 38 30 20 44 69 73 6b 20 52 65 61 64 20     [SS80 Disk Read 
    2708:	25 30 32 58 48 20 62 79 74 65 73 5d 0a 00           %02XH bytes]..

00002716 <__c.4316>:
    2716:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2726:	20 52 65 61 64 20 61 74 20 25 30 38 6c 58 48 28      Read at %08lXH(
    2736:	25 6c 58 48 29 5d 0a 00                             %lXH)]..

0000273e <__c.4299>:
    273e:	5b 53 53 38 30 20 45 58 45 43 20 73 74 61 74 65     [SS80 EXEC state
    274e:	3a 25 64 20 65 72 72 6f 72 5d 0a 00                 :%d error]..

0000275a <__c.4283>:
    275a:	5b 53 53 38 30 20 25 30 32 58 48 20 49 4e 49 54     [SS80 %02XH INIT
    276a:	5d 0a 00                                            ]..

0000276d <__c.4258>:
    276d:	5b 53 53 38 30 20 54 65 73 74 20 44 6f 6e 65 5d     [SS80 Test Done]
    277d:	0a 00                                               ..

0000277f <__c.4256>:
    277f:	5b 53 53 38 30 20 54 65 73 74 5d 0a 00              [SS80 Test]..

0000278c <__c.4413>:
    278c:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    279c:	65 71 75 65 73 74 20 4c 6f 67 69 63 61 6c 20 41     equest Logical A
    27ac:	64 64 72 65 73 73 5d 0a 00                          ddress]..

000027b5 <__c.4410>:
    27b5:	5b 41 4d 49 47 4f 20 45 78 69 63 75 74 65 20 52     [AMIGO Exicute R
    27c5:	65 71 75 65 73 74 20 53 74 61 74 75 73 20 55 6e     equest Status Un
    27d5:	62 75 66 66 65 72 65 64 5d 0a 00                    buffered]..

000027e0 <__c.4407>:
    27e0:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    27f0:	65 71 75 65 73 74 20 53 74 61 74 75 73 20 42 75     equest Status Bu
    2800:	66 66 65 72 65 64 5d 0a 00                          ffered]..

00002809 <__c.4402>:
    2809:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 57     [AMIGO Execute W
    2819:	72 69 74 65 20 42 75 66 66 65 72 65 64 5d 0a 00     rite Buffered]..

00002829 <__c.4399>:
    2829:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 49     [AMIGO Execute I
    2839:	6e 69 74 69 61 6c 69 7a 65 5d 0a 00                 nitialize]..

00002845 <__c.4396>:
    2845:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 57     [AMIGO Execute W
    2855:	72 69 74 65 20 55 6e 62 75 66 66 65 72 65 64 5d     rite Unbuffered]
    2865:	0a 00                                               ..

00002867 <__c.4393>:
    2867:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    2877:	65 61 64 20 42 75 66 66 65 72 65 64 5d 0a 00        ead Buffered]..

00002886 <__c.4390>:
    2886:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    2896:	65 61 64 20 55 6e 62 75 66 66 65 72 65 64 5d 0a     ead Unbuffered].
	...

000028a7 <__c.4387>:
    28a7:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 43     [AMIGO Execute C
    28b7:	6f 6c 64 20 4c 6f 61 64 20 52 65 61 64 5d 0a 00     old Load Read]..

000028c7 <__c.4383>:
    28c7:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 28 25     [AMIGO Execute(%
    28d7:	30 32 58 48 29 3a 20 6c 69 73 74 65 6e 3a 25 30     02XH): listen:%0
    28e7:	32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58 48 5d     2XH, talk:%02XH]
    28f7:	0a 00                                               ..

000028f9 <__c.4378>:
    28f9:	5b 41 4d 49 47 4f 20 46 6f 72 6d 61 74 5d 0a 00     [AMIGO Format]..

00002909 <__c.4375>:
    2909:	5b 41 4d 49 47 4f 20 52 65 61 64 20 42 75 66 66     [AMIGO Read Buff
    2919:	65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00        ered Command]..

00002928 <__c.4373>:
    2928:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 53     [AMIGO Request S
    2938:	74 61 74 75 73 20 55 6e 62 75 66 66 65 72 65 64     tatus Unbuffered
    2948:	20 43 6f 6d 6d 61 6e 64 5d 0a 00                     Command]..

00002953 <__c.4371>:
    2953:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 42 75 66     [AMIGO Write Buf
    2963:	66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00     fered Command]..

00002973 <__c.4369>:
    2973:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 4c     [AMIGO Request L
    2983:	6f 67 69 63 61 6c 20 41 64 64 72 65 73 73 20 43     ogical Address C
    2993:	6f 6d 6d 61 6e 64 5d 0a 00                          ommand]..

0000299c <__c.4367>:
    299c:	5b 41 4d 49 47 4f 20 49 6e 69 74 69 61 6c 69 7a     [AMIGO Initializ
    29ac:	65 20 43 6f 6d 6d 61 6e 64 5d 0a 00                 e Command]..

000029b8 <__c.4365>:
    29b8:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 55 6e 62     [AMIGO Write Unb
    29c8:	75 66 66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d     uffered Command]
    29d8:	0a 00                                               ..

000029da <__c.4363>:
    29da:	5b 41 4d 49 47 4f 20 56 65 72 69 66 79 5d 0a 00     [AMIGO Verify]..

000029ea <__c.4360>:
    29ea:	5b 41 4d 49 47 4f 20 52 65 61 64 20 55 6e 62 75     [AMIGO Read Unbu
    29fa:	66 66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a     ffered Command].
	...

00002a0b <__c.4358>:
    2a0b:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 53     [AMIGO Request S
    2a1b:	74 61 74 75 73 20 42 75 66 66 65 72 65 64 20 43     tatus Buffered C
    2a2b:	6f 6d 6d 61 6e 64 5d 0a 00                          ommand]..

00002a34 <__c.4356>:
    2a34:	5b 41 4d 49 47 4f 20 53 65 65 6b 20 6c 65 6e 3d     [AMIGO Seek len=
    2a44:	36 5d 0a 00                                         6]..

00002a48 <__c.4353>:
    2a48:	5b 41 4d 49 47 4f 20 53 65 65 6b 20 6c 65 6e 3d     [AMIGO Seek len=
    2a58:	35 5d 0a 00                                         5]..

00002a5c <__c.4350>:
    2a5c:	5b 41 4d 49 47 4f 20 43 6f 6c 64 20 4c 6f 61 64     [AMIGO Cold Load
    2a6c:	20 52 65 61 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00      Read Command]..

00002a7c <__c.4347>:
    2a7c:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 28 25     [AMIGO Command(%
    2a8c:	30 32 58 48 29 3a 20 47 50 49 42 20 72 65 61 64     02XH): GPIB read
    2a9c:	20 62 79 74 65 73 3a 25 30 32 58 48 5d 0a 00         bytes:%02XH]..

00002aab <__c.4345>:
    2aab:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO Command:G
    2abb:	50 49 42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a     PIB read error].
	...

00002acc <__c.4343>:
    2acc:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO Command:G
    2adc:	50 49 42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a     PIB read error].
	...

00002aed <__c.4341>:
    2aed:	5b 41 4d 49 47 4f 5f 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO_Command:G
    2afd:	50 49 42 20 77 72 69 74 65 20 65 72 72 6f 72 5d     PIB write error]
    2b0d:	0a 00                                               ..

00002b0f <__c.4339>:
    2b0f:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 28 25     [AMIGO Command(%
    2b1f:	30 32 58 48 29 3a 20 6c 69 73 74 65 6e 3a 25 30     02XH): listen:%0
    2b2f:	32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58 48 5d     2XH, talk:%02XH]
    2b3f:	0a 00                                               ..

00002b41 <__c.4327>:
    2b41:	5b 45 20 20 20 41 6d 69 67 6f 20 45 52 52 4f 52     [E   Amigo ERROR
    2b51:	20 73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58      secondary: %02X
    2b61:	48 2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20     H, state:%02XH, 
    2b71:	6c 69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c     listening:%02XH,
    2b81:	20 74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a      talking:%02XH].
	...

00002b92 <__c.4325>:
    2b92:	5b 55 4e 54 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [UNT Amigo TODO 
    2ba2:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2bb2:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2bc2:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2bd2:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002be2 <__c.4323>:
    2be2:	5b 54 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [T   Amigo TODO 
    2bf2:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2c02:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2c12:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2c22:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002c32 <__c.4321>:
    2c32:	5b 4c 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [L   Amigo TODO 
    2c42:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2c52:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2c62:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2c72:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002c82 <__c.4316>:
    2c82:	5b 55 20 41 6d 69 67 6f 20 54 4f 44 4f 20 73 65     [U Amigo TODO se
    2c92:	63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48 2c 20     condary: %02XH, 
    2ca2:	73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f 70 63     state:%02XH, opc
    2cb2:	6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e 3a 25     ode:%02XH, len:%
    2cc2:	33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a 25 30     3d, listening:%0
    2cd2:	32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25 30 32     2XH, talking:%02
    2ce2:	58 48 5d 0a 00                                      XH]..

00002ce7 <__c.4314>:
    2ce7:	5b 55 4e 54 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [UNT Amigo TODO 
    2cf7:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2d07:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2d17:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2d27:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2d37:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2d47:	30 32 58 48 5d 0a 00                                02XH]..

00002d4e <__c.4312>:
    2d4e:	5b 54 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [T   Amigo TODO 
    2d5e:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2d6e:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2d7e:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2d8e:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2d9e:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2dae:	30 32 58 48 5d 0a 00                                02XH]..

00002db5 <__c.4310>:
    2db5:	5b 4c 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [L   Amigo TODO 
    2dc5:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2dd5:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2de5:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2df5:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2e05:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2e15:	30 32 58 48 5d 0a 00                                02XH]..

00002e1c <__c.4303>:
    2e1c:	5b 41 4d 49 47 4f 20 43 6c 65 61 72 5d 0a 00        [AMIGO Clear]..

00002e2b <__c.4299>:
    2e2b:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    2e3b:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00002e45 <__c.4297>:
    2e45:	5b 41 4d 49 47 4f 20 57 61 6b 65 75 70 5d 0a 00     [AMIGO Wakeup]..

00002e55 <__c.4290>:
    2e55:	5b 44 53 4a 20 25 30 32 58 48 5d 0a 00              [DSJ %02XH]..

00002e62 <__c.4288>:
    2e62:	5b 41 49 4d 47 4f 3a 20 44 53 4a 20 73 65 6e 64     [AIMGO: DSJ send
    2e72:	20 66 61 69 6c 65 64 5d 0a 00                        failed]..

00002e7c <__c.4281>:
    2e7c:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 47 50 49     [AMIGO Write GPI
    2e8c:	42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a 00        B read error]..

00002e9b <__c.4274>:
    2e9b:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    2eab:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00002eb5 <__c.4267>:
    2eb5:	5b 41 4d 49 47 4f 20 46 6f 72 6d 61 74 20 44 6f     [AMIGO Format Do
    2ec5:	6e 65 5d 0a 00                                      ne]..

00002eca <__c.4263>:
    2eca:	5b 41 4d 49 47 4f 20 66 6f 72 6d 61 74 5d 0a 00     [AMIGO format]..

00002eda <__c.4222>:
    2eda:	5b 41 4d 49 47 4f 20 25 73 2c 20 50 3a 25 30 38     [AMIGO %s, P:%08
    2eea:	6c 78 48 2c 20 55 3a 25 64 20 43 3a 25 64 20 48     lxH, U:%d C:%d H
    2efa:	3a 25 64 20 53 3a 25 64 5d 0a 00                    :%d S:%d]..

00002f05 <__c.4252>:
    2f05:	5b 41 4d 49 47 4f 20 76 65 72 69 66 79 20 50 3a     [AMIGO verify P:
    2f15:	25 30 38 6c 58 48 2c 20 73 65 63 74 6f 72 73 3a     %08lXH, sectors:
    2f25:	25 30 34 58 48 5d 0a 00                             %04XH]..

00002f2d <__c.4229>:
    2f2d:	5b 41 4d 49 47 4f 20 25 73 20 70 6f 73 20 4f 56     [AMIGO %s pos OV
    2f3d:	45 52 46 4c 4f 57 5d 0a 00                          ERFLOW]..

00002f46 <__c.4215>:
    2f46:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    2f56:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00002f60 <__c.4213>:
    2f60:	5b 41 4d 49 47 4f 20 73 65 6e 64 20 73 74 61 74     [AMIGO send stat
    2f70:	75 73 5d 0a 00                                      us]..

00002f75 <__c.4207>:
    2f75:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    2f85:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00002f8f <__c.4205>:
    2f8f:	5b 41 4d 49 47 4f 20 73 65 6e 64 20 6c 6f 67 69     [AMIGO send logi
    2f9f:	63 61 6c 20 61 64 64 72 65 73 73 5d 0a 00           cal address]..

00002fad <__c.4199>:
    2fad:	5b 41 4d 49 47 4f 20 72 65 71 75 65 73 74 20 73     [AMIGO request s
    2fbd:	74 61 74 75 73 5d 0a 00                             tatus]..

00002fc5 <__c.4221>:
    2fc5:	72 65 63 65 69 76 65 64 3a 5b 25 64 5d 20 62 79     received:[%d] by
    2fd5:	74 65 73 0a 00                                      tes..

00002fda <__c.4219>:
    2fda:	72 65 63 65 69 76 65 64 3a 5b 25 64 5d 20 25 73     received:[%d] %s
    2fea:	0a 00                                               ..

00002fec <__c.4217>:
    2fec:	72 65 63 65 69 76 65 64 3a 5b 25 64 5d 20 25 73     received:[%d] %s
    2ffc:	0a 00                                               ..

00002ffe <__c.4212>:
    2ffe:	70 72 69 6e 74 65 72 20 6e 6f 74 20 64 65 66 69     printer not defi
    300e:	6e 65 64 0a 00                                      ned..

00003013 <__c.4203>:
    3013:	5b 53 43 20 50 52 49 4e 54 45 52 20 54 61 6c 6b     [SC PRINTER Talk
    3023:	3a 20 25 30 32 58 48 5d 0a 00                       : %02XH]..

0000302d <__c.4201>:
    302d:	5b 53 43 20 50 52 49 4e 54 45 52 20 4c 69 73 74     [SC PRINTER List
    303d:	65 6e 3a 20 25 30 32 58 48 5d 0a 00                 en: %02XH]..

00003049 <__c.4196>:
    3049:	25 30 38 6c 64 0d 00                                %08ld..

00003050 <__c.4190>:
    3050:	77 72 69 74 65 20 66 61 69 6c 65 64 3a 20 77 61     write failed: wa
    3060:	6e 74 65 64 20 25 64 2c 20 67 6f 74 3a 25 64 0a     nted %d, got:%d.
	...

00003071 <__c.4184>:
    3071:	0a 44 4f 4e 45 3a 20 25 30 38 6c 64 0a 00           .DONE: %08ld..

0000307f <__c.4182>:
    307f:	45 52 52 4f 52 20 64 75 72 72 69 6e 67 20 77 72     ERROR durring wr
    308f:	69 74 65 0a 00                                      ite..

00003094 <__c.4176>:
    3094:	65 78 69 74 69 6e 67 2e 2e 2e 0a 00                 exiting.....

000030a0 <__c.4174>:
    30a0:	43 61 70 74 75 72 69 6e 67 20 70 6c 6f 74 20 74     Capturing plot t
    30b0:	6f 3a 25 73 0a 00                                   o:%s..

000030b6 <__c.4172>:
    30b6:	2f 70 6c 6f 74 2d 25 30 32 64 25 73 25 30 34 64     /plot-%02d%s%04d
    30c6:	2d 25 30 32 64 25 30 32 64 25 30 32 64 2e 70 6c     -%02d%02d%02d.pl
    30d6:	74 00                                               t.

000030d8 <__c.4840>:
    30d8:	09 46 6f 72 6d 61 74 69 6e 67 3a 20 77 72 6f 74     .Formating: wrot
    30e8:	65 20 25 6c 64 20 73 65 63 74 6f 72 73 0a 00        e %ld sectors..

000030f7 <__c.4838>:
    30f7:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    3107:	3a 20 73 65 63 74 6f 72 73 20 69 73 20 30 0a 00     : sectors is 0..

00003117 <__c.4836>:
    3117:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    3127:	3a 20 64 69 72 73 65 63 74 6f 72 73 20 69 73 20     : dirsectors is 
    3137:	30 0a 00                                            0..

0000313a <__c.4834>:
    313a:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    314a:	3a 20 6c 69 66 6c 61 62 65 6c 20 69 73 20 65 6d     : liflabel is em
    315a:	70 74 79 0a 00                                      pty..

0000315f <__c.4832>:
    315f:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    316f:	3a 20 6c 69 66 69 6d 61 67 65 6e 61 6d 65 20 69     : lifimagename i
    317f:	73 20 65 6d 70 74 79 0a 00                          s empty..

00003188 <__c.4819>:
    3188:	72 65 6e 61 6d 65 64 3a 20 25 31 30 73 20 74 6f     renamed: %10s to
    3198:	20 25 31 30 73 0a 00                                 %10s..

0000319f <__c.4817>:
    319f:	6c 69 66 5f 72 65 6e 61 6d 65 3a 5b 25 73 5d 20     lif_rename:[%s] 
    31af:	6c 69 66 20 6e 61 6d 65 3a 5b 25 73 5d 20 6e 6f     lif name:[%s] no
    31bf:	74 20 66 6f 75 6e 64 0a 00                          t found..

000031c8 <__c.4815>:
    31c8:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    31d8:	20 6e 65 77 20 6c 69 66 6e 61 6d 65 20 63 6f 6e      new lifname con
    31e8:	74 61 69 6e 73 20 62 61 64 20 63 68 61 72 61 63     tains bad charac
    31f8:	74 65 72 73 0a 00                                   ters..

000031fe <__c.4813>:
    31fe:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    320e:	20 6e 65 77 20 6c 69 66 6e 61 6d 65 20 69 73 20      new lifname is 
    321e:	65 6d 70 74 79 0a 00                                empty..

00003225 <__c.4811>:
    3225:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    3235:	20 6f 6c 64 20 6c 69 66 6e 61 6d 65 20 69 73 20      old lifname is 
    3245:	65 6d 70 74 79 0a 00                                empty..

0000324c <__c.4809>:
    324c:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    325c:	20 6c 69 66 69 6d 61 67 65 6e 61 6d 65 20 69 73      lifimagename is
    326c:	20 65 6d 70 74 79 0a 00                              empty..

00003274 <__c.4800>:
    3274:	44 65 6c 65 74 65 64 3a 20 25 31 30 73 0a 00        Deleted: %10s..

00003283 <__c.4798>:
    3283:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 20 6c     LIF image:[%s] l
    3293:	69 66 20 6e 61 6d 65 3a 5b 25 73 5d 20 6e 6f 74     if name:[%s] not
    32a3:	20 66 6f 75 6e 64 0a 00                              found..

000032ab <__c.4796>:
    32ab:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    32bb:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 0a 00        LIF name:[%s]..

000032ca <__c.4794>:
    32ca:	6c 69 66 5f 64 65 6c 5f 66 69 6c 65 3a 20 6c 69     lif_del_file: li
    32da:	66 6e 61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00     fname is empty..

000032ea <__c.4792>:
    32ea:	6c 69 66 5f 64 65 6c 5f 66 69 6c 65 3a 20 6c 69     lif_del_file: li
    32fa:	66 69 6d 61 67 65 6e 61 6d 65 20 69 73 20 65 6d     fimagename is em
    330a:	70 74 79 0a 00                                      pty..

0000330f <__c.4784>:
    330f:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

0000331d <__c.4779>:
    331d:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

0000332b <__c.4777>:
    332b:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    333b:	6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65 20     not enough free 
    334b:	73 70 61 63 65 20 66 6f 72 3a 5b 25 73 5d 0a 00     space for:[%s]..

0000335b <__c.4775>:
    335b:	46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 3a 25     File not found:%
    336b:	73 0a 00                                            s..

0000336e <__c.4773>:
    336e:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    337e:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 2c 20 75     LIF name:[%s], u
    338e:	73 65 72 20 66 69 6c 65 3a 5b 25 73 5d 0a 00        ser file:[%s]..

0000339d <__c.4771>:
    339d:	6c 69 66 5f 61 64 64 3a 20 75 73 65 72 66 69 6c     lif_add: userfil
    33ad:	65 20 69 73 20 65 6d 70 74 79 0a 00                 e is empty..

000033b9 <__c.4769>:
    33b9:	6c 69 66 5f 61 64 64 3a 20 6c 69 66 6e 61 6d 65     lif_add: lifname
    33c9:	20 69 73 20 65 6d 70 74 79 0a 00                     is empty..

000033d4 <__c.4767>:
    33d4:	6c 69 66 5f 61 64 64 3a 20 6c 69 66 69 6d 61 67     lif_add: lifimag
    33e4:	65 6e 61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00     ename is empty..

000033f4 <__c.4750>:
    33f4:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

00003402 <__c.4745>:
    3402:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

00003410 <__c.4743>:
    3410:	46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 3a 25     File not found:%
    3420:	73 0a 00                                            s..

00003423 <__c.4741>:
    3423:	4c 49 46 20 69 6d 61 67 65 20 6e 6f 74 20 66 6f     LIF image not fo
    3433:	75 6e 64 3a 25 73 0a 00                             und:%s..

0000343b <__c.4724>:
    343b:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

00003449 <__c.4721>:
    3449:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    3459:	5f 61 73 5f 61 73 63 69 69 3a 20 77 72 69 74 65     _as_ascii: write
    3469:	20 65 72 72 6f 72 0a 00                              error..

00003471 <__c.4713>:
    3471:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

0000347f <__c.4711>:
    347f:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    348f:	5f 61 73 5f 61 73 63 69 69 3a 20 77 72 69 74 65     _as_ascii: write
    349f:	20 65 72 72 6f 72 0a 00                              error..

000034a7 <__c.4708>:
    34a7:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    34b7:	5f 61 73 5f 61 73 63 69 69 3a 20 75 6e 65 78 70     _as_ascii: unexp
    34c7:	65 63 74 65 64 20 63 6f 6e 74 72 6f 6c 20 62 79     ected control by
    34d7:	74 65 3a 5b 25 30 32 58 48 5d 20 40 20 6f 66 66     te:[%02XH] @ off
    34e7:	73 65 74 3a 20 25 38 6c 78 2c 20 69 6e 64 3a 25     set: %8lx, ind:%
    34f7:	30 32 58 48 0a 00                                   02XH..

000034fd <__c.4706>:
    34fd:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    350d:	5f 61 73 5f 61 73 63 69 69 3a 20 73 74 72 69 6e     _as_ascii: strin
    351d:	67 20 74 6f 6f 20 62 69 67 20 73 69 7a 65 20 3d     g too big size =
    352d:	20 25 64 0a 00                                       %d..

00003532 <__c.4702>:
    3532:	45 78 74 72 61 63 74 69 6e 67 3a 20 25 73 0a 00     Extracting: %s..

00003542 <__c.4700>:
    3542:	46 69 6c 65 20 25 73 20 68 61 73 20 77 72 6f 6e     File %s has wron
    3552:	67 20 74 79 70 65 3a 5b 25 30 34 58 48 5d 20 65     g type:[%04XH] e
    3562:	78 70 65 63 74 65 64 20 30 78 45 30 31 30 2e 2e     xpected 0xE010..
    3572:	30 78 45 30 31 33 0a 00                             0xE013..

0000357a <__c.4698>:
    357a:	4c 49 46 20 46 69 6c 65 20 6e 6f 74 20 66 6f 75     LIF File not fou
    358a:	6e 64 3a 25 73 0a 00                                nd:%s..

00003591 <__c.4696>:
    3591:	4c 49 46 20 69 6d 61 67 65 20 6e 6f 74 20 66 6f     LIF image not fo
    35a1:	75 6e 64 3a 25 73 0a 00                             und:%s..

000035a9 <__c.4672>:
    35a9:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

000035b7 <__c.4670>:
    35b7:	46 69 6c 65 20 53 65 63 74 6f 72 73 3a 20 20 20     File Sectors:   
    35c7:	20 20 25 34 6c 78 48 0a 00                            %4lxH..

000035d0 <__c.4668>:
    35d0:	46 69 72 73 74 20 53 65 63 74 6f 72 3a 20 20 20     First Sector:   
    35e0:	20 20 25 34 6c 78 48 0a 00                            %4lxH..

000035e9 <__c.4666>:
    35e9:	49 6e 64 65 78 3a 20 20 20 20 20 20 20 20 20 20     Index:          
    35f9:	20 20 25 34 64 0a 00                                  %4d..

00003600 <__c.4664>:
    3600:	4e 61 6d 65 3a 20 20 20 20 20 20 20 20 20 20 20     Name:           
    3610:	20 20 20 25 73 0a 00                                   %s..

00003617 <__c.4662>:
    3617:	4e 65 77 20 44 69 72 65 63 74 6f 72 79 20 49 6e     New Directory In
    3627:	66 6f 72 6d 61 74 69 6f 6e 20 41 46 54 45 52 20     formation AFTER 
    3637:	77 72 69 74 65 0a 00                                write..

0000363e <__c.4660>:
    363e:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    364e:	6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65 20     not enough free 
    365e:	73 70 61 63 65 20 66 6f 72 3a 5b 25 73 5d 0a 00     space for:[%s]..

0000366e <__c.4658>:
    366e:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    367e:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 2c 20 75     LIF name:[%s], u
    368e:	73 65 72 20 66 69 6c 65 3a 5b 25 73 5d 0a 00        ser file:[%s]..

0000369d <__c.4656>:
    369d:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    36ad:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 75 73 65 72     le_as_e010: user
    36bd:	66 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 0a 00     file not found..

000036cd <__c.4654>:
    36cd:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    36dd:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 75 73 65 72     le_as_e010: user
    36ed:	66 69 6c 65 20 69 73 20 65 6d 70 74 79 0a 00        file is empty..

000036fc <__c.4652>:
    36fc:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    370c:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 6c 69 66 6e     le_as_e010: lifn
    371c:	61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00           ame is empty..

0000372a <__c.4650>:
    372a:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    373a:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 6c 69 66 69     le_as_e010: lifi
    374a:	6d 61 67 65 6e 61 6d 65 20 69 73 20 65 6d 70 74     magename is empt
    375a:	79 0a 00                                            y..

0000375d <__c.4636>:
    375d:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

0000376b <__c.4634>:
    376b:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

00003779 <__c.4629>:
    3779:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

00003787 <__c.4612>:
    3787:	45 78 70 65 63 74 65 64 20 73 65 63 74 6f 72 20     Expected sector 
    3797:	62 6f 75 6e 64 72 79 2c 20 6f 66 66 73 65 74 3a     boundry, offset:
    37a7:	25 64 0a 00                                         %d..

000037ab <__c.4595>:
    37ab:	6c 69 66 5f 65 30 31 30 5f 64 61 70 5f 73 65 63     lif_e010_dap_sec
    37bb:	74 6f 72 3a 20 65 78 70 65 63 74 65 64 20 73 65     tor: expected se
    37cb:	63 74 6f 72 20 62 6f 75 6e 64 72 79 3a 20 6f 66     ctor boundry: of
    37db:	66 73 65 74 3a 25 64 0a 00                          fset:%d..

000037e4 <__c.4581>:
    37e4:	6c 69 66 5f 66 69 6e 64 5f 66 69 6c 65 3a 5b 25     lif_find_file:[%
    37f4:	73 5d 20 6c 69 66 6c 61 62 65 6c 20 74 6f 6f 20     s] liflabel too 
    3804:	62 69 67 0a 00                                      big..

00003809 <__c.4579>:
    3809:	6c 69 66 5f 66 69 6e 64 5f 66 69 6c 65 3a 5b 25     lif_find_file:[%
    3819:	73 5d 20 69 6e 76 61 6c 69 64 20 63 68 61 72 61     s] invalid chara
    3829:	63 74 65 72 73 0a 00                                cters..

00003830 <__c.4572>:
    3830:	25 38 6c 64 20 46 72 65 65 20 73 65 63 74 6f 72     %8ld Free sector
    3840:	73 0a 00                                            s..

00003843 <__c.4570>:
    3843:	25 38 6c 64 20 55 73 65 64 20 73 65 63 74 6f 72     %8ld Used sector
    3853:	73 0a 00                                            s..

00003856 <__c.4568>:
    3856:	25 38 6c 64 20 44 69 72 20 20 73 65 63 74 6f 72     %8ld Dir  sector
    3866:	73 0a 00                                            s..

00003869 <__c.4566>:
    3869:	25 38 6c 64 20 44 69 72 20 20 73 74 61 72 74 0a     %8ld Dir  start.
	...

0000387a <__c.4564>:
    387a:	25 38 6c 64 20 50 75 72 67 65 64 0a 00              %8ld Purged..

00003887 <__c.4562>:
    3887:	25 38 6c 64 20 46 69 6c 65 73 0a 00                 %8ld Files..

00003893 <__c.4560>:
    3893:	0a 00                                               ..

00003895 <__c.4557>:
    3895:	25 2d 31 30 73 20 20 25 30 34 58 68 20 20 20 20     %-10s  %04Xh    
    38a5:	20 20 25 38 6c 58 68 20 20 20 25 39 6c 64 25 63       %8lXh   %9ld%c
    38b5:	20 20 20 20 20 20 25 34 64 20 20 20 25 73 0a 00           %4d   %s..

000038c5 <__c.4555>:
    38c5:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    38d5:	73 5d 20 77 61 72 6e 69 6e 67 20 46 69 6c 65 42     s] warning FileB
    38e5:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    38f5:	6f 72 73 3a 25 6c 64 20 21 3d 20 46 69 6c 65 53     ors:%ld != FileS
    3905:	65 63 74 6f 72 73 3a 25 6c 64 0a 00                 ectors:%ld..

00003911 <__c.4552>:
    3911:	4e 41 4d 45 20 20 20 20 20 20 20 20 20 54 59 50     NAME         TYP
    3921:	45 20 20 20 53 54 41 52 54 20 53 45 43 54 4f 52     E   START SECTOR
    3931:	20 20 20 20 20 20 20 20 53 49 5a 45 20 20 20 20             SIZE    
    3941:	52 45 43 53 49 5a 45 20 20 20 44 41 54 45 0a 00     RECSIZE   DATE..

00003951 <__c.4550>:
    3951:	56 6f 6c 75 6d 65 3a 5b 25 73 5d 20 44 61 74 65     Volume:[%s] Date
    3961:	3a 5b 25 73 5d 0a 00                                :[%s]..

00003968 <__c.4540>:
    3968:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3978:	5b 25 73 5d 20 65 72 72 6f 72 20 64 69 72 65 63     [%s] error direc
    3988:	74 6f 72 79 20 63 68 65 63 6b 20 66 61 69 6c 65     tory check faile
    3998:	64 0a 00                                            d..

0000399b <__c.4538>:
    399b:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    39ab:	5b 25 73 5d 20 65 72 72 6f 72 20 76 6f 6c 75 6d     [%s] error volum
    39bb:	65 20 76 61 6c 69 64 61 74 65 20 66 61 69 6c 65     e validate faile
    39cb:	64 0a 00                                            d..

000039ce <__c.4536>:
    39ce:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    39de:	5b 25 73 5d 20 65 72 72 6f 72 20 72 65 61 64 20     [%s] error read 
    39ee:	76 6f 6c 75 6d 65 20 68 65 61 64 65 72 20 66 61     volume header fa
    39fe:	69 6c 65 64 0a 00                                   iled..

00003a04 <__c.4534>:
    3a04:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3a14:	5b 25 73 5d 20 65 72 72 6f 72 20 76 6f 6c 75 6d     [%s] error volum
    3a24:	65 20 68 65 61 64 65 72 20 61 72 65 61 20 74 6f     e header area to
    3a34:	6f 20 73 6d 61 6c 6c 3a 5b 25 6c 64 5d 0a 00        o small:[%ld]..

00003a43 <__c.4521>:
    3a43:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 69 6e 64 65     lif_newdir: inde
    3a53:	78 3a 5b 25 64 5d 20 61 64 64 69 6e 67 20 61 74     x:[%d] adding at
    3a63:	3a 5b 25 6c 64 5d 74 6f 20 70 75 72 67 65 64 20     :[%ld]to purged 
    3a73:	73 70 61 63 65 3a 5b 25 6c 64 5d 20 73 65 63 74     space:[%ld] sect
    3a83:	6f 72 73 2c 20 66 72 65 65 3a 5b 25 6c 64 5d 0a     ors, free:[%ld].
	...

00003a94 <__c.4518>:
    3a94:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 6e 6f 74 20     lif_newdir: not 
    3aa4:	65 6e 6f 75 67 68 20 66 72 65 65 20 73 70 61 63     enough free spac
    3ab4:	65 3a 5b 25 6c 64 5d 0a 00                          e:[%ld]..

00003abd <__c.4516>:
    3abd:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 6e 6f 74 20     lif_newdir: not 
    3acd:	65 6e 6f 75 67 68 20 66 72 65 65 20 73 70 61 63     enough free spac
    3add:	65 3a 5b 25 6c 64 5d 20 66 6f 72 20 73 69 7a 65     e:[%ld] for size
    3aed:	3a 5b 25 6c 64 5d 0a 00                             :[%ld]..

00003af5 <__c.4504>:
    3af5:	6c 69 66 5f 75 70 64 61 74 65 5f 66 72 65 65 3a     lif_update_free:
    3b05:	5b 25 73 5d 20 65 72 72 6f 72 20 70 72 65 76 69     [%s] error previ
    3b15:	6f 75 73 20 72 65 63 6f 72 64 20 66 69 6c 65 20     ous record file 
    3b25:	61 72 65 61 20 6f 76 65 72 6c 61 70 73 20 74 68     area overlaps th
    3b35:	69 73 20 6f 6e 65 3a 5b 25 73 5d 0a 00              is one:[%s]..

00003b42 <__c.4479>:
    3b42:	6c 69 66 5f 63 68 65 63 6b 5f 64 69 72 3a 20 65     lif_check_dir: e
    3b52:	72 72 6f 72 2c 20 69 6e 64 65 78 3a 25 64 0a 00     rror, index:%d..

00003b62 <__c.4470>:
    3b62:	6c 69 66 5f 63 68 65 63 6b 64 69 72 69 6e 64 65     lif_checkdirinde
    3b72:	78 3a 5b 25 73 5d 20 64 69 72 65 63 6f 72 79 20     x:[%s] direcory 
    3b82:	69 6e 64 65 78 3a 5b 25 64 5d 20 6f 75 74 20 6f     index:[%d] out o
    3b92:	66 20 62 6f 75 6e 64 73 0a 00                       f bounds..

00003b9c <__c.4451>:
    3b9c:	09 57 72 6f 74 65 3a 20 25 6c 64 0a 00              .Wrote: %ld..

00003ba9 <__c.4446>:
    3ba9:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

00003bb6 <__c.4441>:
    3bb6:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

00003bc3 <__c.4433>:
    3bc3:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

00003bd0 <__c.4431>:
    3bd0:	43 72 65 61 74 69 6e 67 3a 25 73 2c 20 4c 61 62     Creating:%s, Lab
    3be0:	65 6c 3a 5b 25 73 5d 2c 20 44 69 72 65 63 74 6f     el:[%s], Directo
    3bf0:	72 79 20 53 74 61 72 74 20 25 6c 64 2c 20 44 69     ry Start %ld, Di
    3c00:	72 65 63 74 6f 72 79 20 53 69 7a 65 3a 20 25 6c     rectory Size: %l
    3c10:	64 2c 20 46 69 6c 65 20 53 65 63 74 6f 72 73 3a     d, File Sectors:
    3c20:	25 6c 64 0a 00                                      %ld..

00003c25 <__c.4415>:
    3c25:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3c35:	73 5d 20 69 6e 76 61 6c 69 64 20 73 65 63 74 6f     s] invalid secto
    3c45:	72 20 73 69 7a 65 3a 25 6c 64 0a 00                 r size:%ld..

00003c51 <__c.4413>:
    3c51:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3c61:	73 5d 20 69 6e 76 61 6c 69 64 20 46 69 6c 65 42     s] invalid FileB
    3c71:	79 74 65 73 20 3d 3d 20 30 0a 00                    ytes == 0..

00003c7c <__c.4411>:
    3c7c:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3c8c:	73 5d 20 77 61 72 6e 69 6e 67 20 46 69 6c 65 42     s] warning FileB
    3c9c:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3cac:	6f 72 73 3a 25 6c 64 20 3c 20 46 69 6c 65 53 65     ors:%ld < FileSe
    3cbc:	63 74 6f 72 73 3a 25 6c 64 0a 00                    ctors:%ld..

00003cc7 <__c.4409>:
    3cc7:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3cd7:	73 5d 20 69 6e 76 61 6c 69 64 20 46 69 6c 65 42     s] invalid FileB
    3ce7:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3cf7:	6f 72 73 3a 25 6c 64 20 3e 20 46 69 6c 65 53 65     ors:%ld > FileSe
    3d07:	63 74 6f 72 73 3a 25 6c 64 0a 00                    ctors:%ld..

00003d12 <__c.4407>:
    3d12:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3d22:	73 5d 20 69 6e 76 61 6c 69 64 20 56 6f 6c 75 6d     s] invalid Volum
    3d32:	65 20 4e 75 6d 62 65 72 3a 25 58 68 0a 00           e Number:%Xh..

00003d40 <__c.4405>:
    3d40:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3d50:	73 5d 20 69 6e 76 61 6c 69 64 20 65 6e 64 20 73     s] invalid end s
    3d60:	65 63 74 6f 72 3a 25 6c 58 68 20 3e 20 74 6f 74     ector:%lXh > tot
    3d70:	61 6c 20 73 65 63 74 6f 72 73 3a 25 6c 58 68 0a     al sectors:%lXh.
	...

00003d81 <__c.4403>:
    3d81:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3d91:	73 5d 20 69 6e 76 61 6c 69 64 20 73 74 61 72 74     s] invalid start
    3da1:	20 73 65 63 74 6f 72 3a 25 6c 58 68 20 3c 20 66      sector:%lXh < f
    3db1:	69 65 20 61 72 65 61 20 73 74 61 72 74 3a 25 6c     ie area start:%l
    3dc1:	58 68 0a 00                                         Xh..

00003dc5 <__c.4401>:
    3dc5:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3dd5:	73 5d 20 69 6e 76 61 6c 69 64 20 4e 61 6d 65 0a     s] invalid Name.
	...

00003de6 <__c.4395>:
    3de6:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3df6:	69 64 20 66 69 6c 65 20 73 74 61 72 74 20 3e 20     id file start > 
    3e06:	69 6d 61 67 65 20 73 69 7a 65 0a 00                 image size..

00003e12 <__c.4393>:
    3e12:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3e22:	69 64 20 44 69 72 65 63 74 6f 72 79 20 53 65 63     id Directory Sec
    3e32:	74 6f 72 20 43 6f 75 6e 74 20 3c 20 31 0a 00        tor Count < 1..

00003e41 <__c.4391>:
    3e41:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3e51:	69 64 20 73 74 61 72 74 20 73 65 63 74 6f 72 3a     id start sector:
    3e61:	25 6c 64 0a 00                                      %ld..

00003e66 <__c.4389>:
    3e66:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3e76:	69 64 20 62 79 74 65 73 20 61 74 20 6f 66 66 73     id bytes at offs
    3e86:	65 74 20 32 32 26 32 33 20 73 68 6f 75 6c 64 20     et 22&23 should 
    3e96:	62 65 20 7a 65 72 6f 0a 00                          be zero..

00003e9f <__c.4387>:
    3e9f:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3eaf:	69 64 20 62 79 74 65 73 20 61 74 20 6f 66 66 73     id bytes at offs
    3ebf:	65 74 20 31 34 26 31 35 20 73 68 6f 75 6c 64 20     et 14&15 should 
    3ecf:	62 65 20 7a 65 72 6f 0a 00                          be zero..

00003ed8 <__c.4385>:
    3ed8:	4c 49 46 20 56 65 72 73 69 6f 6e 3a 20 25 30 34     LIF Version: %04
    3ee8:	58 48 20 3e 20 31 0a 00                             XH > 1..

00003ef0 <__c.4383>:
    3ef0:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3f00:	69 64 20 53 79 73 74 65 6d 33 30 30 30 20 49 44     id System3000 ID
    3f10:	20 28 25 30 34 58 48 29 20 65 78 70 65 63 74 65      (%04XH) expecte
    3f20:	64 20 31 30 30 30 48 0a 00                          d 1000H..

00003f29 <__c.4381>:
    3f29:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3f39:	69 64 20 56 6f 6c 75 6d 65 20 4e 61 6d 65 00        id Volume Name.

00003f48 <__c.4374>:
    3f48:	0a 00                                               ..

00003f4a <__c.4372>:
    3f4a:	44 49 52 20 46 69 6c 65 20 44 61 74 65 3a 20 20     DIR File Date:  
    3f5a:	20 20 20 20 20 20 25 73 0a 00                             %s..

00003f64 <__c.4370>:
    3f64:	44 49 52 20 46 69 6c 65 20 73 65 63 74 6f 72 20     DIR File sector 
    3f74:	73 69 7a 65 3a 20 25 38 58 68 0a 00                 size: %8Xh..

00003f80 <__c.4368>:
    3f80:	44 49 52 20 46 69 6c 65 20 62 79 74 65 73 3a 20     DIR File bytes: 
    3f90:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003f9d <__c.4366>:
    3f9d:	44 49 52 20 46 69 6c 65 20 73 65 63 74 6f 72 73     DIR File sectors
    3fad:	3a 20 20 20 20 20 25 38 6c 58 68 0a 00              :     %8lXh..

00003fba <__c.4364>:
    3fba:	44 49 52 20 46 69 6c 65 20 73 74 61 72 74 3a 20     DIR File start: 
    3fca:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003fd7 <__c.4362>:
    3fd7:	44 49 52 20 46 69 6c 65 20 56 6f 6c 75 6d 65 23     DIR File Volume#
    3fe7:	3a 20 20 20 20 20 25 38 58 68 0a 00                 :     %8Xh..

00003ff3 <__c.4360>:
    3ff3:	44 49 52 20 46 69 6c 65 20 54 79 70 65 3a 20 20     DIR File Type:  
    4003:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

0000400f <__c.4358>:
    400f:	44 49 52 20 46 69 6c 65 20 4e 61 6d 65 3a 20 20     DIR File Name:  
    401f:	20 20 20 20 20 20 25 73 0a 00                             %s..

00004029 <__c.4356>:
    4029:	56 4f 4c 20 44 61 74 65 3a 20 20 20 20 20 20 20     VOL Date:       
    4039:	20 20 20 20 20 20 25 73 0a 00                             %s..

00004043 <__c.4354>:
    4043:	56 4f 4c 20 4c 49 46 56 65 72 73 69 6f 6e 3a 20     VOL LIFVersion: 
    4053:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

0000405f <__c.4352>:
    405f:	56 4f 4c 20 33 30 30 30 4c 49 46 69 64 3a 20 20     VOL 3000LIFid:  
    406f:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

0000407b <__c.4350>:
    407b:	56 4f 4c 20 44 69 72 20 73 65 63 74 6f 72 73 3a     VOL Dir sectors:
    408b:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004098 <__c.4348>:
    4098:	56 4f 4c 20 44 69 72 20 73 74 61 72 74 3a 20 20     VOL Dir start:  
    40a8:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000040b5 <__c.4346>:
    40b5:	56 4f 4c 20 4c 49 46 69 64 3a 20 20 20 20 20 20     VOL LIFid:      
    40c5:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

000040d1 <__c.4344>:
    40d1:	56 4f 4c 20 4c 61 62 65 6c 3a 20 20 20 20 20 20     VOL Label:      
    40e1:	20 20 20 20 20 20 25 73 0a 00                             %s..

000040eb <__c.4342>:
    40eb:	4c 49 46 20 70 75 72 67 65 64 3a 20 20 20 20 20     LIF purged:     
    40fb:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004108 <__c.4340>:
    4108:	4c 49 46 20 66 69 6c 65 73 3a 20 20 20 20 20 20     LIF files:      
    4118:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004125 <__c.4338>:
    4125:	4c 49 46 20 66 72 65 65 3a 20 20 20 20 20 20 20     LIF free:       
    4135:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004142 <__c.4336>:
    4142:	4c 49 46 20 75 73 65 64 3a 20 20 20 20 20 20 20     LIF used:       
    4152:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

0000415f <__c.4334>:
    415f:	4c 49 46 20 66 69 6c 65 20 73 65 63 74 6f 72 73     LIF file sectors
    416f:	3a 20 20 20 20 20 25 38 6c 58 68 0a 00              :     %8lXh..

0000417c <__c.4332>:
    417c:	4c 49 46 20 66 69 6c 65 73 74 61 72 74 3a 20 20     LIF filestart:  
    418c:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004199 <__c.4330>:
    4199:	4c 49 46 20 62 79 74 65 73 3a 20 20 20 20 20 20     LIF bytes:      
    41a9:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000041b6 <__c.4328>:
    41b6:	4c 49 46 20 73 65 63 74 6f 72 73 3a 20 20 20 20     LIF sectors:    
    41c6:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000041d3 <__c.4326>:
    41d3:	4c 49 46 20 6e 61 6d 65 3a 20 20 20 20 20 20 20     LIF name:       
    41e3:	20 20 20 20 20 20 25 73 0a 00                             %s..

000041ed <__c.4324>:
    41ed:	0a 25 73 0a 00                                      .%s..

000041f2 <__c.4201>:
    41f2:	6c 69 66 5f 77 72 69 74 65 3a 20 57 72 69 74 65     lif_write: Write
    4202:	3a 5b 25 73 5d 20 6f 66 66 73 65 74 3a 5b 25 6c     :[%s] offset:[%l
    4212:	64 5d 20 77 72 69 74 65 3a 5b 25 64 5d 20 65 78     d] write:[%d] ex
    4222:	70 65 63 74 65 64 3a 5b 25 64 5d 0a 00              pected:[%d]..

0000422f <__c.4192>:
    422f:	6c 69 66 5f 72 65 61 64 3a 20 72 65 61 64 3a 5b     lif_read: read:[
    423f:	25 73 5d 20 6f 66 66 73 65 74 3a 5b 25 6c 64 5d     %s] offset:[%ld]
    424f:	20 77 72 69 74 65 3a 5b 25 6c 64 5d 20 65 78 70      write:[%ld] exp
    425f:	65 63 74 65 64 3a 5b 25 64 5d 0a 00                 ected:[%d]..

0000426b <__c.4183>:
    426b:	6c 69 66 5f 72 65 61 64 5f 6d 73 67 3a 20 25 73     lif_read_msg: %s
    427b:	20 53 65 65 6b 20 65 72 72 6f 72 20 25 6c 64 0a      Seek error %ld.
	...

0000428c <__c.4176>:
    428c:	6c 69 66 5f 73 74 61 74 3a 20 43 61 6e 27 74 20     lif_stat: Can't 
    429c:	73 74 61 74 3a 25 73 0a 00                          stat:%s..

000042a5 <__c.4170>:
    42a5:	6c 69 66 5f 6f 70 65 6e 3a 20 43 61 6e 27 74 20     lif_open: Can't 
    42b5:	6f 70 65 6e 3a 5b 25 73 5d 20 6d 6f 64 65 3a 5b     open:[%s] mode:[
    42c5:	25 73 5d 0a 00                                      %s]..

000042ca <__c.4158>:
    42ca:	6c 69 66 5f 66 72 65 65 3a 20 4e 55 4c 4c 20 70     lif_free: NULL p
    42da:	6f 69 6e 74 65 72 0a 00                             ointer..

000042e2 <__c.4153>:
    42e2:	6c 69 66 5f 63 61 6c 6c 6f 63 3a 5b 25 6c 64 5d     lif_calloc:[%ld]
    42f2:	20 6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65      not enough free
    4302:	20 6d 65 6d 6f 72 79 0a 00                           memory..

0000430b <__c.4147>:
    430b:	44 69 73 6b 3a 20 25 73 20 6e 6f 74 20 66 6f 75     Disk: %s not fou
    431b:	6e 64 20 69 6e 20 68 70 64 69 72 2e 69 6e 69 0a     nd in hpdir.ini.
	...

0000432c <__c.4134>:
    432c:	6c 69 66 20 61 64 64 20 6c 69 66 69 6d 61 67 65     lif add lifimage
    433c:	20 6c 69 66 6e 61 6d 65 20 66 72 6f 6d 5f 61 73      lifname from_as
    434c:	63 69 69 5f 66 69 6c 65 0a 6c 69 66 20 61 64 64     cii_file.lif add
    435c:	62 69 6e 20 6c 69 66 69 6d 61 67 65 20 6c 69 66     bin lifimage lif
    436c:	6e 61 6d 65 20 66 72 6f 6d 5f 6c 69 66 5f 66 69     name from_lif_fi
    437c:	6c 65 0a 6c 69 66 20 63 72 65 61 74 65 20 6c 69     le.lif create li
    438c:	66 69 6d 61 67 65 20 6c 61 62 65 6c 20 64 69 72     fimage label dir
    439c:	65 63 74 6f 72 79 5f 73 65 63 74 6f 72 73 20 73     ectory_sectors s
    43ac:	65 63 74 6f 72 73 0a 6c 69 66 20 63 72 65 61 74     ectors.lif creat
    43bc:	65 64 69 73 6b 20 6c 69 66 69 6d 61 67 65 20 6c     edisk lifimage l
    43cc:	61 62 65 6c 20 6d 6f 64 65 6c 0a 6c 69 66 20 64     abel model.lif d
    43dc:	65 6c 20 6c 69 66 69 6d 61 67 65 20 6e 61 6d 65     el lifimage name
    43ec:	0a 6c 69 66 20 64 69 72 20 6c 69 66 69 6d 61 67     .lif dir lifimag
    43fc:	65 0a 6c 69 66 20 65 78 74 72 61 63 74 20 6c 69     e.lif extract li
    440c:	66 69 6d 61 67 65 20 6c 69 66 6e 61 6d 65 20 74     fimage lifname t
    441c:	6f 5f 61 73 63 69 69 5f 66 69 6c 65 0a 6c 69 66     o_ascii_file.lif
    442c:	20 65 78 74 72 61 63 74 62 69 6e 20 6c 69 66 69      extractbin lifi
    443c:	6d 61 67 65 20 6c 69 66 6e 61 6d 65 20 74 6f 5f     mage lifname to_
    444c:	6c 69 66 5f 66 69 6c 65 0a 20 20 20 20 65 78 74     lif_file.    ext
    445c:	72 61 63 74 73 20 61 20 66 69 6c 65 20 69 6e 74     racts a file int
    446c:	6f 20 61 20 73 69 67 6c 65 20 66 69 6c 65 20 4c     o a sigle file L
    447c:	49 46 20 69 6d 61 67 65 0a 6c 69 66 20 72 65 6e     IF image.lif ren
    448c:	61 6d 65 20 6c 69 66 69 6d 61 67 65 20 6f 6c 64     ame lifimage old
    449c:	6c 69 66 6e 61 6d 65 20 6e 65 77 6c 69 66 6e 61     lifname newlifna
    44ac:	6d 65 0a 55 73 65 20 2d 64 20 61 66 74 65 72 20     me.Use -d after 
    44bc:	66 69 72 73 74 20 6b 65 79 77 6f 72 64 20 27 6c     first keyword 'l
    44cc:	69 66 27 20 61 62 6f 76 65 20 66 6f 72 20 4c 49     if' above for LI
    44dc:	46 20 66 69 6c 65 73 79 73 74 65 6d 20 64 65 62     F filesystem deb
    44ec:	75 67 67 69 6e 67 0a 0a 00                          ugging...

000044f5 <__c.4132>:
    44f5:	6c 69 66 20 68 65 6c 70 0a 00                       lif help..

000044ff <__c.4598>:
    44ff:	53 74 61 72 74 69 6e 67 20 47 50 49 42 20 54 41     Starting GPIB TA
    450f:	53 4b 0a 00                                         SK..

00004513 <__c.4596>:
    4513:	64 65 62 75 67 6c 65 76 65 6c 20 20 20 3d 20 25     debuglevel   = %
    4523:	30 34 78 48 0a 00                                   04xH..

00004529 <__c.4594>:
    4529:	47 50 49 42 20 53 74 61 74 65 20 69 6e 69 74 20     GPIB State init 
    4539:	64 6f 6e 65 0a 00                                   done..

0000453f <__c.4592>:
    453f:	47 50 49 42 20 46 69 6c 65 20 69 6e 69 74 20 64     GPIB File init d
    454f:	6f 6e 65 0a 00                                      one..

00004554 <__c.4590>:
    4554:	47 50 49 42 20 54 69 6d 65 72 20 69 6e 69 74 69     GPIB Timer initi
    4564:	61 6c 69 7a 65 64 0a 00                             alized..

0000456c <__c.4588>:
    456c:	47 50 49 42 20 54 69 6d 65 72 20 53 65 74 75 70     GPIB Timer Setup
    457c:	0a 00                                               ..

0000457e <__c.4586>:
    457e:	50 72 69 6e 74 65 72 20 69 6e 69 74 69 61 6c 69     Printer initiali
    458e:	7a 65 64 0a 00                                      zed..

00004593 <__c.4584>:
    4593:	47 50 49 42 20 62 75 73 20 69 6e 69 74 69 61 6c     GPIB bus initial
    45a3:	69 7a 65 64 0a 00                                   ized..

000045a9 <__c.4582>:
    45a9:	4d 4d 43 20 69 6e 69 74 69 61 6c 69 7a 65 64 0a     MMC initialized.
	...

000045ba <__c.4580>:
    45ba:	4d 4d 43 20 69 6e 69 74 69 61 6c 69 7a 69 6e 67     MMC initializing
    45ca:	20 73 74 61 72 74 0a 00                              start..

000045d2 <__c.4578>:
    45d2:	49 32 43 20 4c 43 44 20 69 73 20 4e 4f 54 20 61     I2C LCD is NOT a
    45e2:	74 74 61 63 68 65 64 21 0a 00                       ttached!..

000045ec <__c.4576>:
    45ec:	49 32 43 20 4c 43 44 20 69 6e 69 74 69 61 6c 69     I2C LCD initiali
    45fc:	7a 61 74 69 6f 6e 20 44 6f 6e 65 0a 00              zation Done..

00004609 <__c.4574>:
    4609:	49 32 43 20 4c 43 44 20 69 6e 69 74 69 61 6c 69     I2C LCD initiali
    4619:	7a 61 74 69 6f 6e 20 73 74 61 72 74 0a 00           zation start..

00004627 <__c.4572>:
    4627:	53 59 53 54 45 4d 5f 54 41 53 4b 5f 43 4f 55 4e     SYSTEM_TASK_COUN
    4637:	54 45 52 5f 52 45 53 3a 25 6c 64 0a 00              TER_RES:%ld..

00004644 <__c.4570>:
    4644:	43 6c 6f 63 6b 20 63 6c 65 61 72 65 64 0a 00        Clock cleared..

00004653 <__c.4568>:
    4653:	69 6e 69 74 69 61 6c 69 7a 69 6e 67 20 52 54 43     initializing RTC
    4663:	0a 00                                               ..

00004665 <__c.4566>:
    4665:	69 6e 69 74 69 61 6c 69 7a 69 6e 67 20 49 32 43     initializing I2C
    4675:	20 62 75 73 0a 00                                    bus..

0000467b <__c.4564>:
    467b:	69 6e 69 74 69 61 6c 69 7a 69 6e 67 20 53 50 49     initializing SPI
    468b:	20 62 75 73 0a 00                                    bus..

00004691 <__c.4562>:
    4691:	20 20 20 4c 61 73 74 20 75 70 64 61 74 65 64 20        Last updated 
    46a1:	66 69 6c 65 3a 20 25 73 0a 00                       file: %s..

000046ab <__c.4560>:
    46ab:	20 20 20 47 49 54 20 6c 61 73 74 20 70 75 73 68        GIT last push
    46bb:	65 64 3a 20 20 20 25 73 0a 00                       ed:   %s..

000046c5 <__c.4558>:
    46c5:	2d 3e 20 68 74 74 70 73 3a 2f 2f 67 69 74 68 75     -> https://githu
    46d5:	62 2e 63 6f 6d 2f 6d 61 67 6f 72 65 2f 68 70 38     b.com/magore/hp8
    46e5:	35 64 69 73 6b 0a 00                                5disk..

000046ec <__c.4556>:
    46ec:	20 47 4e 55 20 76 65 72 73 69 6f 6e 20 33 0a 00      GNU version 3..

000046fc <__c.4554>:
    46fc:	20 28 43 29 20 32 30 31 34 2d 32 30 32 30 20 62      (C) 2014-2020 b
    470c:	79 20 4d 69 6b 65 20 47 6f 72 65 0a 00              y Mike Gore..

00004719 <__c.4552>:
    4719:	48 50 38 35 20 44 69 73 6b 20 61 6e 64 20 44 65     HP85 Disk and De
    4729:	76 69 63 65 20 45 6d 75 6c 61 74 6f 72 0a 00        vice Emulator..

00004738 <__c.4550>:
    4738:	52 65 71 75 65 73 74 65 64 20 42 61 75 64 20 52     Requested Baud R
    4748:	61 74 65 3a 20 25 6c 64 2c 20 41 63 74 75 61 6c     ate: %ld, Actual
    4758:	3a 20 25 6c 64 0a 00                                : %ld..

0000475f <__c.4548>:
    475f:	43 50 55 20 43 6c 6f 63 6b 20 3d 20 25 6c 75 0a     CPU Clock = %lu.
	...

00004770 <__c.4546>:
    4770:	53 74 61 72 74 0a 00                                Start..

00004777 <__c.4538>:
    4777:	45 72 72 6f 72 3a 5b 25 73 5d 0a 00                 Error:[%s]..

00004783 <__c.4536>:
    4783:	0a 3e 00                                            .>.

00004786 <__c.4526>:
    4786:	64 65 6c 61 79 5f 74 65 73 74 73 0a 68 65 6c 70     delay_tests.help
    4796:	0a 6d 65 6d 0a 73 65 74 64 61 74 65 0a 74 69 6d     .mem.setdate.tim
    47a6:	65 0a 0a 00                                         e...

000047aa <__c.4522>:
    47aa:	4d 79 20 64 65 6c 61 79 73 0a 00                    My delays..

000047b5 <__c.4520>:
    47b5:	53 79 73 74 65 6d 20 64 65 6c 61 79 73 0a 00        System delays..

000047c4 <__c.4516>:
    47c4:	0a 00                                               ..

000047c6 <__c.4514>:
    47c6:	20 20 20 4c 61 73 74 20 75 70 64 61 74 65 64 20        Last updated 
    47d6:	66 69 6c 65 3a 20 25 73 0a 00                       file: %s..

000047e0 <__c.4512>:
    47e0:	20 20 20 47 49 54 20 6c 61 73 74 20 70 75 73 68        GIT last push
    47f0:	65 64 3a 20 20 20 25 73 0a 00                       ed:   %s..

000047fa <__c.4510>:
    47fa:	2d 3e 20 68 74 74 70 73 3a 2f 2f 67 69 74 68 75     -> https://githu
    480a:	62 2e 63 6f 6d 2f 6d 61 67 6f 72 65 2f 68 70 38     b.com/magore/hp8
    481a:	35 64 69 73 6b 0a 00                                5disk..

00004821 <__c.4508>:
    4821:	20 47 4e 55 20 76 65 72 73 69 6f 6e 20 33 0a 00      GNU version 3..

00004831 <__c.4506>:
    4831:	20 28 63 29 20 32 30 31 34 2d 32 30 32 30 20 62      (c) 2014-2020 b
    4841:	79 20 4d 69 6b 65 20 47 6f 72 65 0a 00              y Mike Gore..

0000484e <__c.4504>:
    484e:	48 50 38 35 20 44 69 73 6b 20 61 6e 64 20 44 65     HP85 Disk and De
    485e:	76 69 63 65 20 45 6d 75 6c 61 74 6f 72 0a 00        vice Emulator..

0000486d <__c.4502>:
    486d:	53 74 61 6e 64 20 61 6c 6f 6e 65 20 76 65 72 73     Stand alone vers
    487d:	69 6f 6e 20 6f 66 20 4c 49 46 20 75 74 69 6c 69     ion of LIF utili
    488d:	74 69 65 73 20 66 6f 72 20 6c 69 6e 75 78 0a 00     ties for linux..
	...

0000489e <__ctors_end>:
    489e:	11 24       	eor	r1, r1
    48a0:	1f be       	out	0x3f, r1	; 63
    48a2:	cf ef       	ldi	r28, 0xFF	; 255
    48a4:	d0 e4       	ldi	r29, 0x40	; 64
    48a6:	de bf       	out	0x3e, r29	; 62
    48a8:	cd bf       	out	0x3d, r28	; 61

000048aa <__do_copy_data>:
    48aa:	17 e1       	ldi	r17, 0x17	; 23
    48ac:	a0 e0       	ldi	r26, 0x00	; 0
    48ae:	b1 e0       	ldi	r27, 0x01	; 1
    48b0:	e4 e4       	ldi	r30, 0x44	; 68
    48b2:	f6 ed       	ldi	r31, 0xD6	; 214
    48b4:	01 e0       	ldi	r16, 0x01	; 1
    48b6:	0b bf       	out	0x3b, r16	; 59
    48b8:	02 c0       	rjmp	.+4      	; 0x48be <__do_copy_data+0x14>
    48ba:	07 90       	elpm	r0, Z+
    48bc:	0d 92       	st	X+, r0
    48be:	a6 34       	cpi	r26, 0x46	; 70
    48c0:	b1 07       	cpc	r27, r17
    48c2:	d9 f7       	brne	.-10     	; 0x48ba <__do_copy_data+0x10>

000048c4 <__do_clear_bss>:
    48c4:	20 e2       	ldi	r18, 0x20	; 32
    48c6:	a6 e4       	ldi	r26, 0x46	; 70
    48c8:	b7 e1       	ldi	r27, 0x17	; 23
    48ca:	01 c0       	rjmp	.+2      	; 0x48ce <.do_clear_bss_start>

000048cc <.do_clear_bss_loop>:
    48cc:	1d 92       	st	X+, r1

000048ce <.do_clear_bss_start>:
    48ce:	ac 3a       	cpi	r26, 0xAC	; 172
    48d0:	b2 07       	cpc	r27, r18
    48d2:	e1 f7       	brne	.-8      	; 0x48cc <.do_clear_bss_loop>
    48d4:	0e 94 7f e3 	call	0x1c6fe	; 0x1c6fe <main>
    48d8:	0c 94 20 eb 	jmp	0x1d640	; 0x1d640 <_exit>

000048dc <__bad_interrupt>:
    48dc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000048e0 <vfprintf>:
    48e0:	2f 92       	push	r2
    48e2:	3f 92       	push	r3
    48e4:	4f 92       	push	r4
    48e6:	5f 92       	push	r5
    48e8:	6f 92       	push	r6
    48ea:	7f 92       	push	r7
    48ec:	8f 92       	push	r8
    48ee:	9f 92       	push	r9
    48f0:	af 92       	push	r10
    48f2:	bf 92       	push	r11
    48f4:	cf 92       	push	r12
    48f6:	df 92       	push	r13
    48f8:	ef 92       	push	r14
    48fa:	ff 92       	push	r15
    48fc:	0f 93       	push	r16
    48fe:	1f 93       	push	r17
    4900:	cf 93       	push	r28
    4902:	df 93       	push	r29
    4904:	cd b7       	in	r28, 0x3d	; 61
    4906:	de b7       	in	r29, 0x3e	; 62
    4908:	60 97       	sbiw	r28, 0x10	; 16
    490a:	0f b6       	in	r0, 0x3f	; 63
    490c:	f8 94       	cli
    490e:	de bf       	out	0x3e, r29	; 62
    4910:	0f be       	out	0x3f, r0	; 63
    4912:	cd bf       	out	0x3d, r28	; 61
    4914:	7c 01       	movw	r14, r24
    4916:	1b 01       	movw	r2, r22
    4918:	6a 01       	movw	r12, r20
    491a:	fc 01       	movw	r30, r24
    491c:	17 82       	std	Z+7, r1	; 0x07
    491e:	16 82       	std	Z+6, r1	; 0x06
    4920:	83 81       	ldd	r24, Z+3	; 0x03
    4922:	81 ff       	sbrs	r24, 1
    4924:	44 c3       	rjmp	.+1672   	; 0x4fae <vfprintf+0x6ce>
    4926:	9e 01       	movw	r18, r28
    4928:	2f 5f       	subi	r18, 0xFF	; 255
    492a:	3f 4f       	sbci	r19, 0xFF	; 255
    492c:	39 01       	movw	r6, r18
    492e:	f7 01       	movw	r30, r14
    4930:	93 81       	ldd	r25, Z+3	; 0x03
    4932:	f1 01       	movw	r30, r2
    4934:	93 fd       	sbrc	r25, 3
    4936:	85 91       	lpm	r24, Z+
    4938:	93 ff       	sbrs	r25, 3
    493a:	81 91       	ld	r24, Z+
    493c:	1f 01       	movw	r2, r30
    493e:	88 23       	and	r24, r24
    4940:	09 f4       	brne	.+2      	; 0x4944 <vfprintf+0x64>
    4942:	31 c3       	rjmp	.+1634   	; 0x4fa6 <vfprintf+0x6c6>
    4944:	85 32       	cpi	r24, 0x25	; 37
    4946:	39 f4       	brne	.+14     	; 0x4956 <vfprintf+0x76>
    4948:	93 fd       	sbrc	r25, 3
    494a:	85 91       	lpm	r24, Z+
    494c:	93 ff       	sbrs	r25, 3
    494e:	81 91       	ld	r24, Z+
    4950:	1f 01       	movw	r2, r30
    4952:	85 32       	cpi	r24, 0x25	; 37
    4954:	39 f4       	brne	.+14     	; 0x4964 <vfprintf+0x84>
    4956:	b7 01       	movw	r22, r14
    4958:	90 e0       	ldi	r25, 0x00	; 0
    495a:	0e 94 0b 77 	call	0xee16	; 0xee16 <fputc>
    495e:	56 01       	movw	r10, r12
    4960:	65 01       	movw	r12, r10
    4962:	e5 cf       	rjmp	.-54     	; 0x492e <vfprintf+0x4e>
    4964:	10 e0       	ldi	r17, 0x00	; 0
    4966:	51 2c       	mov	r5, r1
    4968:	91 2c       	mov	r9, r1
    496a:	ff e1       	ldi	r31, 0x1F	; 31
    496c:	f9 15       	cp	r31, r9
    496e:	d8 f0       	brcs	.+54     	; 0x49a6 <vfprintf+0xc6>
    4970:	8b 32       	cpi	r24, 0x2B	; 43
    4972:	79 f0       	breq	.+30     	; 0x4992 <vfprintf+0xb2>
    4974:	38 f4       	brcc	.+14     	; 0x4984 <vfprintf+0xa4>
    4976:	80 32       	cpi	r24, 0x20	; 32
    4978:	79 f0       	breq	.+30     	; 0x4998 <vfprintf+0xb8>
    497a:	83 32       	cpi	r24, 0x23	; 35
    497c:	a1 f4       	brne	.+40     	; 0x49a6 <vfprintf+0xc6>
    497e:	f9 2d       	mov	r31, r9
    4980:	f0 61       	ori	r31, 0x10	; 16
    4982:	2e c0       	rjmp	.+92     	; 0x49e0 <vfprintf+0x100>
    4984:	8d 32       	cpi	r24, 0x2D	; 45
    4986:	61 f0       	breq	.+24     	; 0x49a0 <vfprintf+0xc0>
    4988:	80 33       	cpi	r24, 0x30	; 48
    498a:	69 f4       	brne	.+26     	; 0x49a6 <vfprintf+0xc6>
    498c:	29 2d       	mov	r18, r9
    498e:	21 60       	ori	r18, 0x01	; 1
    4990:	2d c0       	rjmp	.+90     	; 0x49ec <vfprintf+0x10c>
    4992:	39 2d       	mov	r19, r9
    4994:	32 60       	ori	r19, 0x02	; 2
    4996:	93 2e       	mov	r9, r19
    4998:	89 2d       	mov	r24, r9
    499a:	84 60       	ori	r24, 0x04	; 4
    499c:	98 2e       	mov	r9, r24
    499e:	2a c0       	rjmp	.+84     	; 0x49f4 <vfprintf+0x114>
    49a0:	e9 2d       	mov	r30, r9
    49a2:	e8 60       	ori	r30, 0x08	; 8
    49a4:	15 c0       	rjmp	.+42     	; 0x49d0 <vfprintf+0xf0>
    49a6:	97 fc       	sbrc	r9, 7
    49a8:	2d c0       	rjmp	.+90     	; 0x4a04 <vfprintf+0x124>
    49aa:	20 ed       	ldi	r18, 0xD0	; 208
    49ac:	28 0f       	add	r18, r24
    49ae:	2a 30       	cpi	r18, 0x0A	; 10
    49b0:	88 f4       	brcc	.+34     	; 0x49d4 <vfprintf+0xf4>
    49b2:	96 fe       	sbrs	r9, 6
    49b4:	06 c0       	rjmp	.+12     	; 0x49c2 <vfprintf+0xe2>
    49b6:	3a e0       	ldi	r19, 0x0A	; 10
    49b8:	13 9f       	mul	r17, r19
    49ba:	20 0d       	add	r18, r0
    49bc:	11 24       	eor	r1, r1
    49be:	12 2f       	mov	r17, r18
    49c0:	19 c0       	rjmp	.+50     	; 0x49f4 <vfprintf+0x114>
    49c2:	8a e0       	ldi	r24, 0x0A	; 10
    49c4:	58 9e       	mul	r5, r24
    49c6:	20 0d       	add	r18, r0
    49c8:	11 24       	eor	r1, r1
    49ca:	52 2e       	mov	r5, r18
    49cc:	e9 2d       	mov	r30, r9
    49ce:	e0 62       	ori	r30, 0x20	; 32
    49d0:	9e 2e       	mov	r9, r30
    49d2:	10 c0       	rjmp	.+32     	; 0x49f4 <vfprintf+0x114>
    49d4:	8e 32       	cpi	r24, 0x2E	; 46
    49d6:	31 f4       	brne	.+12     	; 0x49e4 <vfprintf+0x104>
    49d8:	96 fc       	sbrc	r9, 6
    49da:	e5 c2       	rjmp	.+1482   	; 0x4fa6 <vfprintf+0x6c6>
    49dc:	f9 2d       	mov	r31, r9
    49de:	f0 64       	ori	r31, 0x40	; 64
    49e0:	9f 2e       	mov	r9, r31
    49e2:	08 c0       	rjmp	.+16     	; 0x49f4 <vfprintf+0x114>
    49e4:	8c 36       	cpi	r24, 0x6C	; 108
    49e6:	21 f4       	brne	.+8      	; 0x49f0 <vfprintf+0x110>
    49e8:	29 2d       	mov	r18, r9
    49ea:	20 68       	ori	r18, 0x80	; 128
    49ec:	92 2e       	mov	r9, r18
    49ee:	02 c0       	rjmp	.+4      	; 0x49f4 <vfprintf+0x114>
    49f0:	88 36       	cpi	r24, 0x68	; 104
    49f2:	41 f4       	brne	.+16     	; 0x4a04 <vfprintf+0x124>
    49f4:	f1 01       	movw	r30, r2
    49f6:	93 fd       	sbrc	r25, 3
    49f8:	85 91       	lpm	r24, Z+
    49fa:	93 ff       	sbrs	r25, 3
    49fc:	81 91       	ld	r24, Z+
    49fe:	1f 01       	movw	r2, r30
    4a00:	81 11       	cpse	r24, r1
    4a02:	b3 cf       	rjmp	.-154    	; 0x496a <vfprintf+0x8a>
    4a04:	9b eb       	ldi	r25, 0xBB	; 187
    4a06:	98 0f       	add	r25, r24
    4a08:	93 30       	cpi	r25, 0x03	; 3
    4a0a:	20 f4       	brcc	.+8      	; 0x4a14 <vfprintf+0x134>
    4a0c:	99 2d       	mov	r25, r9
    4a0e:	90 61       	ori	r25, 0x10	; 16
    4a10:	80 5e       	subi	r24, 0xE0	; 224
    4a12:	07 c0       	rjmp	.+14     	; 0x4a22 <vfprintf+0x142>
    4a14:	9b e9       	ldi	r25, 0x9B	; 155
    4a16:	98 0f       	add	r25, r24
    4a18:	93 30       	cpi	r25, 0x03	; 3
    4a1a:	08 f0       	brcs	.+2      	; 0x4a1e <vfprintf+0x13e>
    4a1c:	66 c1       	rjmp	.+716    	; 0x4cea <vfprintf+0x40a>
    4a1e:	99 2d       	mov	r25, r9
    4a20:	9f 7e       	andi	r25, 0xEF	; 239
    4a22:	96 ff       	sbrs	r25, 6
    4a24:	16 e0       	ldi	r17, 0x06	; 6
    4a26:	9f 73       	andi	r25, 0x3F	; 63
    4a28:	99 2e       	mov	r9, r25
    4a2a:	85 36       	cpi	r24, 0x65	; 101
    4a2c:	19 f4       	brne	.+6      	; 0x4a34 <vfprintf+0x154>
    4a2e:	90 64       	ori	r25, 0x40	; 64
    4a30:	99 2e       	mov	r9, r25
    4a32:	08 c0       	rjmp	.+16     	; 0x4a44 <vfprintf+0x164>
    4a34:	86 36       	cpi	r24, 0x66	; 102
    4a36:	21 f4       	brne	.+8      	; 0x4a40 <vfprintf+0x160>
    4a38:	39 2f       	mov	r19, r25
    4a3a:	30 68       	ori	r19, 0x80	; 128
    4a3c:	93 2e       	mov	r9, r19
    4a3e:	02 c0       	rjmp	.+4      	; 0x4a44 <vfprintf+0x164>
    4a40:	11 11       	cpse	r17, r1
    4a42:	11 50       	subi	r17, 0x01	; 1
    4a44:	97 fe       	sbrs	r9, 7
    4a46:	07 c0       	rjmp	.+14     	; 0x4a56 <vfprintf+0x176>
    4a48:	1c 33       	cpi	r17, 0x3C	; 60
    4a4a:	50 f4       	brcc	.+20     	; 0x4a60 <vfprintf+0x180>
    4a4c:	44 24       	eor	r4, r4
    4a4e:	43 94       	inc	r4
    4a50:	41 0e       	add	r4, r17
    4a52:	27 e0       	ldi	r18, 0x07	; 7
    4a54:	0b c0       	rjmp	.+22     	; 0x4a6c <vfprintf+0x18c>
    4a56:	18 30       	cpi	r17, 0x08	; 8
    4a58:	38 f0       	brcs	.+14     	; 0x4a68 <vfprintf+0x188>
    4a5a:	27 e0       	ldi	r18, 0x07	; 7
    4a5c:	17 e0       	ldi	r17, 0x07	; 7
    4a5e:	05 c0       	rjmp	.+10     	; 0x4a6a <vfprintf+0x18a>
    4a60:	27 e0       	ldi	r18, 0x07	; 7
    4a62:	9c e3       	ldi	r25, 0x3C	; 60
    4a64:	49 2e       	mov	r4, r25
    4a66:	02 c0       	rjmp	.+4      	; 0x4a6c <vfprintf+0x18c>
    4a68:	21 2f       	mov	r18, r17
    4a6a:	41 2c       	mov	r4, r1
    4a6c:	56 01       	movw	r10, r12
    4a6e:	84 e0       	ldi	r24, 0x04	; 4
    4a70:	a8 0e       	add	r10, r24
    4a72:	b1 1c       	adc	r11, r1
    4a74:	f6 01       	movw	r30, r12
    4a76:	60 81       	ld	r22, Z
    4a78:	71 81       	ldd	r23, Z+1	; 0x01
    4a7a:	82 81       	ldd	r24, Z+2	; 0x02
    4a7c:	93 81       	ldd	r25, Z+3	; 0x03
    4a7e:	04 2d       	mov	r16, r4
    4a80:	a3 01       	movw	r20, r6
    4a82:	0e 94 cd e9 	call	0x1d39a	; 0x1d39a <__ftoa_engine>
    4a86:	6c 01       	movw	r12, r24
    4a88:	f9 81       	ldd	r31, Y+1	; 0x01
    4a8a:	fc 87       	std	Y+12, r31	; 0x0c
    4a8c:	f0 ff       	sbrs	r31, 0
    4a8e:	02 c0       	rjmp	.+4      	; 0x4a94 <vfprintf+0x1b4>
    4a90:	f3 ff       	sbrs	r31, 3
    4a92:	06 c0       	rjmp	.+12     	; 0x4aa0 <vfprintf+0x1c0>
    4a94:	91 fc       	sbrc	r9, 1
    4a96:	06 c0       	rjmp	.+12     	; 0x4aa4 <vfprintf+0x1c4>
    4a98:	92 fe       	sbrs	r9, 2
    4a9a:	06 c0       	rjmp	.+12     	; 0x4aa8 <vfprintf+0x1c8>
    4a9c:	00 e2       	ldi	r16, 0x20	; 32
    4a9e:	05 c0       	rjmp	.+10     	; 0x4aaa <vfprintf+0x1ca>
    4aa0:	0d e2       	ldi	r16, 0x2D	; 45
    4aa2:	03 c0       	rjmp	.+6      	; 0x4aaa <vfprintf+0x1ca>
    4aa4:	0b e2       	ldi	r16, 0x2B	; 43
    4aa6:	01 c0       	rjmp	.+2      	; 0x4aaa <vfprintf+0x1ca>
    4aa8:	00 e0       	ldi	r16, 0x00	; 0
    4aaa:	8c 85       	ldd	r24, Y+12	; 0x0c
    4aac:	8c 70       	andi	r24, 0x0C	; 12
    4aae:	19 f0       	breq	.+6      	; 0x4ab6 <vfprintf+0x1d6>
    4ab0:	01 11       	cpse	r16, r1
    4ab2:	5a c2       	rjmp	.+1204   	; 0x4f68 <vfprintf+0x688>
    4ab4:	9b c2       	rjmp	.+1334   	; 0x4fec <vfprintf+0x70c>
    4ab6:	97 fe       	sbrs	r9, 7
    4ab8:	10 c0       	rjmp	.+32     	; 0x4ada <vfprintf+0x1fa>
    4aba:	4c 0c       	add	r4, r12
    4abc:	fc 85       	ldd	r31, Y+12	; 0x0c
    4abe:	f4 ff       	sbrs	r31, 4
    4ac0:	04 c0       	rjmp	.+8      	; 0x4aca <vfprintf+0x1ea>
    4ac2:	8a 81       	ldd	r24, Y+2	; 0x02
    4ac4:	81 33       	cpi	r24, 0x31	; 49
    4ac6:	09 f4       	brne	.+2      	; 0x4aca <vfprintf+0x1ea>
    4ac8:	4a 94       	dec	r4
    4aca:	14 14       	cp	r1, r4
    4acc:	74 f5       	brge	.+92     	; 0x4b2a <vfprintf+0x24a>
    4ace:	28 e0       	ldi	r18, 0x08	; 8
    4ad0:	24 15       	cp	r18, r4
    4ad2:	78 f5       	brcc	.+94     	; 0x4b32 <vfprintf+0x252>
    4ad4:	88 e0       	ldi	r24, 0x08	; 8
    4ad6:	48 2e       	mov	r4, r24
    4ad8:	2c c0       	rjmp	.+88     	; 0x4b32 <vfprintf+0x252>
    4ada:	96 fc       	sbrc	r9, 6
    4adc:	2a c0       	rjmp	.+84     	; 0x4b32 <vfprintf+0x252>
    4ade:	81 2f       	mov	r24, r17
    4ae0:	90 e0       	ldi	r25, 0x00	; 0
    4ae2:	8c 15       	cp	r24, r12
    4ae4:	9d 05       	cpc	r25, r13
    4ae6:	9c f0       	brlt	.+38     	; 0x4b0e <vfprintf+0x22e>
    4ae8:	3c ef       	ldi	r19, 0xFC	; 252
    4aea:	c3 16       	cp	r12, r19
    4aec:	3f ef       	ldi	r19, 0xFF	; 255
    4aee:	d3 06       	cpc	r13, r19
    4af0:	74 f0       	brlt	.+28     	; 0x4b0e <vfprintf+0x22e>
    4af2:	89 2d       	mov	r24, r9
    4af4:	80 68       	ori	r24, 0x80	; 128
    4af6:	98 2e       	mov	r9, r24
    4af8:	0a c0       	rjmp	.+20     	; 0x4b0e <vfprintf+0x22e>
    4afa:	e2 e0       	ldi	r30, 0x02	; 2
    4afc:	f0 e0       	ldi	r31, 0x00	; 0
    4afe:	ec 0f       	add	r30, r28
    4b00:	fd 1f       	adc	r31, r29
    4b02:	e1 0f       	add	r30, r17
    4b04:	f1 1d       	adc	r31, r1
    4b06:	80 81       	ld	r24, Z
    4b08:	80 33       	cpi	r24, 0x30	; 48
    4b0a:	19 f4       	brne	.+6      	; 0x4b12 <vfprintf+0x232>
    4b0c:	11 50       	subi	r17, 0x01	; 1
    4b0e:	11 11       	cpse	r17, r1
    4b10:	f4 cf       	rjmp	.-24     	; 0x4afa <vfprintf+0x21a>
    4b12:	97 fe       	sbrs	r9, 7
    4b14:	0e c0       	rjmp	.+28     	; 0x4b32 <vfprintf+0x252>
    4b16:	44 24       	eor	r4, r4
    4b18:	43 94       	inc	r4
    4b1a:	41 0e       	add	r4, r17
    4b1c:	81 2f       	mov	r24, r17
    4b1e:	90 e0       	ldi	r25, 0x00	; 0
    4b20:	c8 16       	cp	r12, r24
    4b22:	d9 06       	cpc	r13, r25
    4b24:	2c f4       	brge	.+10     	; 0x4b30 <vfprintf+0x250>
    4b26:	1c 19       	sub	r17, r12
    4b28:	04 c0       	rjmp	.+8      	; 0x4b32 <vfprintf+0x252>
    4b2a:	44 24       	eor	r4, r4
    4b2c:	43 94       	inc	r4
    4b2e:	01 c0       	rjmp	.+2      	; 0x4b32 <vfprintf+0x252>
    4b30:	10 e0       	ldi	r17, 0x00	; 0
    4b32:	97 fe       	sbrs	r9, 7
    4b34:	06 c0       	rjmp	.+12     	; 0x4b42 <vfprintf+0x262>
    4b36:	1c 14       	cp	r1, r12
    4b38:	1d 04       	cpc	r1, r13
    4b3a:	34 f4       	brge	.+12     	; 0x4b48 <vfprintf+0x268>
    4b3c:	c6 01       	movw	r24, r12
    4b3e:	01 96       	adiw	r24, 0x01	; 1
    4b40:	05 c0       	rjmp	.+10     	; 0x4b4c <vfprintf+0x26c>
    4b42:	85 e0       	ldi	r24, 0x05	; 5
    4b44:	90 e0       	ldi	r25, 0x00	; 0
    4b46:	02 c0       	rjmp	.+4      	; 0x4b4c <vfprintf+0x26c>
    4b48:	81 e0       	ldi	r24, 0x01	; 1
    4b4a:	90 e0       	ldi	r25, 0x00	; 0
    4b4c:	01 11       	cpse	r16, r1
    4b4e:	01 96       	adiw	r24, 0x01	; 1
    4b50:	11 23       	and	r17, r17
    4b52:	31 f0       	breq	.+12     	; 0x4b60 <vfprintf+0x280>
    4b54:	21 2f       	mov	r18, r17
    4b56:	30 e0       	ldi	r19, 0x00	; 0
    4b58:	2f 5f       	subi	r18, 0xFF	; 255
    4b5a:	3f 4f       	sbci	r19, 0xFF	; 255
    4b5c:	82 0f       	add	r24, r18
    4b5e:	93 1f       	adc	r25, r19
    4b60:	25 2d       	mov	r18, r5
    4b62:	30 e0       	ldi	r19, 0x00	; 0
    4b64:	82 17       	cp	r24, r18
    4b66:	93 07       	cpc	r25, r19
    4b68:	14 f4       	brge	.+4      	; 0x4b6e <vfprintf+0x28e>
    4b6a:	58 1a       	sub	r5, r24
    4b6c:	01 c0       	rjmp	.+2      	; 0x4b70 <vfprintf+0x290>
    4b6e:	51 2c       	mov	r5, r1
    4b70:	89 2d       	mov	r24, r9
    4b72:	89 70       	andi	r24, 0x09	; 9
    4b74:	49 f4       	brne	.+18     	; 0x4b88 <vfprintf+0x2a8>
    4b76:	55 20       	and	r5, r5
    4b78:	39 f0       	breq	.+14     	; 0x4b88 <vfprintf+0x2a8>
    4b7a:	b7 01       	movw	r22, r14
    4b7c:	80 e2       	ldi	r24, 0x20	; 32
    4b7e:	90 e0       	ldi	r25, 0x00	; 0
    4b80:	0e 94 0b 77 	call	0xee16	; 0xee16 <fputc>
    4b84:	5a 94       	dec	r5
    4b86:	f7 cf       	rjmp	.-18     	; 0x4b76 <vfprintf+0x296>
    4b88:	00 23       	and	r16, r16
    4b8a:	29 f0       	breq	.+10     	; 0x4b96 <vfprintf+0x2b6>
    4b8c:	b7 01       	movw	r22, r14
    4b8e:	80 2f       	mov	r24, r16
    4b90:	90 e0       	ldi	r25, 0x00	; 0
    4b92:	0e 94 0b 77 	call	0xee16	; 0xee16 <fputc>
    4b96:	93 fc       	sbrc	r9, 3
    4b98:	09 c0       	rjmp	.+18     	; 0x4bac <vfprintf+0x2cc>
    4b9a:	55 20       	and	r5, r5
    4b9c:	39 f0       	breq	.+14     	; 0x4bac <vfprintf+0x2cc>
    4b9e:	b7 01       	movw	r22, r14
    4ba0:	80 e3       	ldi	r24, 0x30	; 48
    4ba2:	90 e0       	ldi	r25, 0x00	; 0
    4ba4:	0e 94 0b 77 	call	0xee16	; 0xee16 <fputc>
    4ba8:	5a 94       	dec	r5
    4baa:	f7 cf       	rjmp	.-18     	; 0x4b9a <vfprintf+0x2ba>
    4bac:	97 fe       	sbrs	r9, 7
    4bae:	4c c0       	rjmp	.+152    	; 0x4c48 <vfprintf+0x368>
    4bb0:	46 01       	movw	r8, r12
    4bb2:	d7 fe       	sbrs	r13, 7
    4bb4:	02 c0       	rjmp	.+4      	; 0x4bba <vfprintf+0x2da>
    4bb6:	81 2c       	mov	r8, r1
    4bb8:	91 2c       	mov	r9, r1
    4bba:	c6 01       	movw	r24, r12
    4bbc:	88 19       	sub	r24, r8
    4bbe:	99 09       	sbc	r25, r9
    4bc0:	f3 01       	movw	r30, r6
    4bc2:	e8 0f       	add	r30, r24
    4bc4:	f9 1f       	adc	r31, r25
    4bc6:	fe 87       	std	Y+14, r31	; 0x0e
    4bc8:	ed 87       	std	Y+13, r30	; 0x0d
    4bca:	96 01       	movw	r18, r12
    4bcc:	24 19       	sub	r18, r4
    4bce:	31 09       	sbc	r19, r1
    4bd0:	38 8b       	std	Y+16, r19	; 0x10
    4bd2:	2f 87       	std	Y+15, r18	; 0x0f
    4bd4:	01 2f       	mov	r16, r17
    4bd6:	10 e0       	ldi	r17, 0x00	; 0
    4bd8:	11 95       	neg	r17
    4bda:	01 95       	neg	r16
    4bdc:	11 09       	sbc	r17, r1
    4bde:	3f ef       	ldi	r19, 0xFF	; 255
    4be0:	83 16       	cp	r8, r19
    4be2:	93 06       	cpc	r9, r19
    4be4:	29 f4       	brne	.+10     	; 0x4bf0 <vfprintf+0x310>
    4be6:	b7 01       	movw	r22, r14
    4be8:	8e e2       	ldi	r24, 0x2E	; 46
    4bea:	90 e0       	ldi	r25, 0x00	; 0
    4bec:	0e 94 0b 77 	call	0xee16	; 0xee16 <fputc>
    4bf0:	c8 14       	cp	r12, r8
    4bf2:	d9 04       	cpc	r13, r9
    4bf4:	4c f0       	brlt	.+18     	; 0x4c08 <vfprintf+0x328>
    4bf6:	8f 85       	ldd	r24, Y+15	; 0x0f
    4bf8:	98 89       	ldd	r25, Y+16	; 0x10
    4bfa:	88 15       	cp	r24, r8
    4bfc:	99 05       	cpc	r25, r9
    4bfe:	24 f4       	brge	.+8      	; 0x4c08 <vfprintf+0x328>
    4c00:	ed 85       	ldd	r30, Y+13	; 0x0d
    4c02:	fe 85       	ldd	r31, Y+14	; 0x0e
    4c04:	81 81       	ldd	r24, Z+1	; 0x01
    4c06:	01 c0       	rjmp	.+2      	; 0x4c0a <vfprintf+0x32a>
    4c08:	80 e3       	ldi	r24, 0x30	; 48
    4c0a:	f1 e0       	ldi	r31, 0x01	; 1
    4c0c:	8f 1a       	sub	r8, r31
    4c0e:	91 08       	sbc	r9, r1
    4c10:	2d 85       	ldd	r18, Y+13	; 0x0d
    4c12:	3e 85       	ldd	r19, Y+14	; 0x0e
    4c14:	2f 5f       	subi	r18, 0xFF	; 255
    4c16:	3f 4f       	sbci	r19, 0xFF	; 255
    4c18:	3e 87       	std	Y+14, r19	; 0x0e
    4c1a:	2d 87       	std	Y+13, r18	; 0x0d
    4c1c:	80 16       	cp	r8, r16
    4c1e:	91 06       	cpc	r9, r17
    4c20:	2c f0       	brlt	.+10     	; 0x4c2c <vfprintf+0x34c>
    4c22:	b7 01       	movw	r22, r14
    4c24:	90 e0       	ldi	r25, 0x00	; 0
    4c26:	0e 94 0b 77 	call	0xee16	; 0xee16 <fputc>
    4c2a:	d9 cf       	rjmp	.-78     	; 0x4bde <vfprintf+0x2fe>
    4c2c:	c8 14       	cp	r12, r8
    4c2e:	d9 04       	cpc	r13, r9
    4c30:	41 f4       	brne	.+16     	; 0x4c42 <vfprintf+0x362>
    4c32:	9a 81       	ldd	r25, Y+2	; 0x02
    4c34:	96 33       	cpi	r25, 0x36	; 54
    4c36:	20 f4       	brcc	.+8      	; 0x4c40 <vfprintf+0x360>
    4c38:	95 33       	cpi	r25, 0x35	; 53
    4c3a:	19 f4       	brne	.+6      	; 0x4c42 <vfprintf+0x362>
    4c3c:	3c 85       	ldd	r19, Y+12	; 0x0c
    4c3e:	34 ff       	sbrs	r19, 4
    4c40:	81 e3       	ldi	r24, 0x31	; 49
    4c42:	b7 01       	movw	r22, r14
    4c44:	90 e0       	ldi	r25, 0x00	; 0
    4c46:	4e c0       	rjmp	.+156    	; 0x4ce4 <vfprintf+0x404>
    4c48:	8a 81       	ldd	r24, Y+2	; 0x02
    4c4a:	81 33       	cpi	r24, 0x31	; 49
    4c4c:	19 f0       	breq	.+6      	; 0x4c54 <vfprintf+0x374>
    4c4e:	9c 85       	ldd	r25, Y+12	; 0x0c
    4c50:	9f 7e       	andi	r25, 0xEF	; 239
    4c52:	9c 87       	std	Y+12, r25	; 0x0c
    4c54:	b7 01       	movw	r22, r14
    4c56:	90 e0       	ldi	r25, 0x00	; 0
    4c58:	0e 94 0b 77 	call	0xee16	; 0xee16 <fputc>
    4c5c:	11 11       	cpse	r17, r1
    4c5e:	05 c0       	rjmp	.+10     	; 0x4c6a <vfprintf+0x38a>
    4c60:	94 fc       	sbrc	r9, 4
    4c62:	18 c0       	rjmp	.+48     	; 0x4c94 <vfprintf+0x3b4>
    4c64:	85 e6       	ldi	r24, 0x65	; 101
    4c66:	90 e0       	ldi	r25, 0x00	; 0
    4c68:	17 c0       	rjmp	.+46     	; 0x4c98 <vfprintf+0x3b8>
    4c6a:	b7 01       	movw	r22, r14
    4c6c:	8e e2       	ldi	r24, 0x2E	; 46
    4c6e:	90 e0       	ldi	r25, 0x00	; 0
    4c70:	0e 94 0b 77 	call	0xee16	; 0xee16 <fputc>
    4c74:	1e 5f       	subi	r17, 0xFE	; 254
    4c76:	82 e0       	ldi	r24, 0x02	; 2
    4c78:	01 e0       	ldi	r16, 0x01	; 1
    4c7a:	08 0f       	add	r16, r24
    4c7c:	f3 01       	movw	r30, r6
    4c7e:	e8 0f       	add	r30, r24
    4c80:	f1 1d       	adc	r31, r1
    4c82:	80 81       	ld	r24, Z
    4c84:	b7 01       	movw	r22, r14
    4c86:	90 e0       	ldi	r25, 0x00	; 0
    4c88:	0e 94 0b 77 	call	0xee16	; 0xee16 <fputc>
    4c8c:	80 2f       	mov	r24, r16
    4c8e:	01 13       	cpse	r16, r17
    4c90:	f3 cf       	rjmp	.-26     	; 0x4c78 <vfprintf+0x398>
    4c92:	e6 cf       	rjmp	.-52     	; 0x4c60 <vfprintf+0x380>
    4c94:	85 e4       	ldi	r24, 0x45	; 69
    4c96:	90 e0       	ldi	r25, 0x00	; 0
    4c98:	b7 01       	movw	r22, r14
    4c9a:	0e 94 0b 77 	call	0xee16	; 0xee16 <fputc>
    4c9e:	d7 fc       	sbrc	r13, 7
    4ca0:	06 c0       	rjmp	.+12     	; 0x4cae <vfprintf+0x3ce>
    4ca2:	c1 14       	cp	r12, r1
    4ca4:	d1 04       	cpc	r13, r1
    4ca6:	41 f4       	brne	.+16     	; 0x4cb8 <vfprintf+0x3d8>
    4ca8:	ec 85       	ldd	r30, Y+12	; 0x0c
    4caa:	e4 ff       	sbrs	r30, 4
    4cac:	05 c0       	rjmp	.+10     	; 0x4cb8 <vfprintf+0x3d8>
    4cae:	d1 94       	neg	r13
    4cb0:	c1 94       	neg	r12
    4cb2:	d1 08       	sbc	r13, r1
    4cb4:	8d e2       	ldi	r24, 0x2D	; 45
    4cb6:	01 c0       	rjmp	.+2      	; 0x4cba <vfprintf+0x3da>
    4cb8:	8b e2       	ldi	r24, 0x2B	; 43
    4cba:	b7 01       	movw	r22, r14
    4cbc:	90 e0       	ldi	r25, 0x00	; 0
    4cbe:	0e 94 0b 77 	call	0xee16	; 0xee16 <fputc>
    4cc2:	80 e3       	ldi	r24, 0x30	; 48
    4cc4:	2a e0       	ldi	r18, 0x0A	; 10
    4cc6:	c2 16       	cp	r12, r18
    4cc8:	d1 04       	cpc	r13, r1
    4cca:	2c f0       	brlt	.+10     	; 0x4cd6 <vfprintf+0x3f6>
    4ccc:	8f 5f       	subi	r24, 0xFF	; 255
    4cce:	fa e0       	ldi	r31, 0x0A	; 10
    4cd0:	cf 1a       	sub	r12, r31
    4cd2:	d1 08       	sbc	r13, r1
    4cd4:	f7 cf       	rjmp	.-18     	; 0x4cc4 <vfprintf+0x3e4>
    4cd6:	b7 01       	movw	r22, r14
    4cd8:	90 e0       	ldi	r25, 0x00	; 0
    4cda:	0e 94 0b 77 	call	0xee16	; 0xee16 <fputc>
    4cde:	b7 01       	movw	r22, r14
    4ce0:	c6 01       	movw	r24, r12
    4ce2:	c0 96       	adiw	r24, 0x30	; 48
    4ce4:	0e 94 0b 77 	call	0xee16	; 0xee16 <fputc>
    4ce8:	54 c1       	rjmp	.+680    	; 0x4f92 <vfprintf+0x6b2>
    4cea:	83 36       	cpi	r24, 0x63	; 99
    4cec:	31 f0       	breq	.+12     	; 0x4cfa <vfprintf+0x41a>
    4cee:	83 37       	cpi	r24, 0x73	; 115
    4cf0:	79 f0       	breq	.+30     	; 0x4d10 <vfprintf+0x430>
    4cf2:	83 35       	cpi	r24, 0x53	; 83
    4cf4:	09 f0       	breq	.+2      	; 0x4cf8 <vfprintf+0x418>
    4cf6:	56 c0       	rjmp	.+172    	; 0x4da4 <vfprintf+0x4c4>
    4cf8:	20 c0       	rjmp	.+64     	; 0x4d3a <vfprintf+0x45a>
    4cfa:	56 01       	movw	r10, r12
    4cfc:	32 e0       	ldi	r19, 0x02	; 2
    4cfe:	a3 0e       	add	r10, r19
    4d00:	b1 1c       	adc	r11, r1
    4d02:	f6 01       	movw	r30, r12
    4d04:	80 81       	ld	r24, Z
    4d06:	89 83       	std	Y+1, r24	; 0x01
    4d08:	01 e0       	ldi	r16, 0x01	; 1
    4d0a:	10 e0       	ldi	r17, 0x00	; 0
    4d0c:	63 01       	movw	r12, r6
    4d0e:	12 c0       	rjmp	.+36     	; 0x4d34 <vfprintf+0x454>
    4d10:	56 01       	movw	r10, r12
    4d12:	f2 e0       	ldi	r31, 0x02	; 2
    4d14:	af 0e       	add	r10, r31
    4d16:	b1 1c       	adc	r11, r1
    4d18:	f6 01       	movw	r30, r12
    4d1a:	c0 80       	ld	r12, Z
    4d1c:	d1 80       	ldd	r13, Z+1	; 0x01
    4d1e:	96 fe       	sbrs	r9, 6
    4d20:	03 c0       	rjmp	.+6      	; 0x4d28 <vfprintf+0x448>
    4d22:	61 2f       	mov	r22, r17
    4d24:	70 e0       	ldi	r23, 0x00	; 0
    4d26:	02 c0       	rjmp	.+4      	; 0x4d2c <vfprintf+0x44c>
    4d28:	6f ef       	ldi	r22, 0xFF	; 255
    4d2a:	7f ef       	ldi	r23, 0xFF	; 255
    4d2c:	c6 01       	movw	r24, r12
    4d2e:	0e 94 b7 ea 	call	0x1d56e	; 0x1d56e <strnlen>
    4d32:	8c 01       	movw	r16, r24
    4d34:	f9 2d       	mov	r31, r9
    4d36:	ff 77       	andi	r31, 0x7F	; 127
    4d38:	14 c0       	rjmp	.+40     	; 0x4d62 <vfprintf+0x482>
    4d3a:	56 01       	movw	r10, r12
    4d3c:	22 e0       	ldi	r18, 0x02	; 2
    4d3e:	a2 0e       	add	r10, r18
    4d40:	b1 1c       	adc	r11, r1
    4d42:	f6 01       	movw	r30, r12
    4d44:	c0 80       	ld	r12, Z
    4d46:	d1 80       	ldd	r13, Z+1	; 0x01
    4d48:	96 fe       	sbrs	r9, 6
    4d4a:	03 c0       	rjmp	.+6      	; 0x4d52 <vfprintf+0x472>
    4d4c:	61 2f       	mov	r22, r17
    4d4e:	70 e0       	ldi	r23, 0x00	; 0
    4d50:	02 c0       	rjmp	.+4      	; 0x4d56 <vfprintf+0x476>
    4d52:	6f ef       	ldi	r22, 0xFF	; 255
    4d54:	7f ef       	ldi	r23, 0xFF	; 255
    4d56:	c6 01       	movw	r24, r12
    4d58:	0e 94 a5 ea 	call	0x1d54a	; 0x1d54a <strnlen_P>
    4d5c:	8c 01       	movw	r16, r24
    4d5e:	f9 2d       	mov	r31, r9
    4d60:	f0 68       	ori	r31, 0x80	; 128
    4d62:	9f 2e       	mov	r9, r31
    4d64:	f3 fd       	sbrc	r31, 3
    4d66:	1a c0       	rjmp	.+52     	; 0x4d9c <vfprintf+0x4bc>
    4d68:	85 2d       	mov	r24, r5
    4d6a:	90 e0       	ldi	r25, 0x00	; 0
    4d6c:	08 17       	cp	r16, r24
    4d6e:	19 07       	cpc	r17, r25
    4d70:	a8 f4       	brcc	.+42     	; 0x4d9c <vfprintf+0x4bc>
    4d72:	b7 01       	movw	r22, r14
    4d74:	80 e2       	ldi	r24, 0x20	; 32
    4d76:	90 e0       	ldi	r25, 0x00	; 0
    4d78:	0e 94 0b 77 	call	0xee16	; 0xee16 <fputc>
    4d7c:	5a 94       	dec	r5
    4d7e:	f4 cf       	rjmp	.-24     	; 0x4d68 <vfprintf+0x488>
    4d80:	f6 01       	movw	r30, r12
    4d82:	97 fc       	sbrc	r9, 7
    4d84:	85 91       	lpm	r24, Z+
    4d86:	97 fe       	sbrs	r9, 7
    4d88:	81 91       	ld	r24, Z+
    4d8a:	6f 01       	movw	r12, r30
    4d8c:	b7 01       	movw	r22, r14
    4d8e:	90 e0       	ldi	r25, 0x00	; 0
    4d90:	0e 94 0b 77 	call	0xee16	; 0xee16 <fputc>
    4d94:	51 10       	cpse	r5, r1
    4d96:	5a 94       	dec	r5
    4d98:	01 50       	subi	r16, 0x01	; 1
    4d9a:	11 09       	sbc	r17, r1
    4d9c:	01 15       	cp	r16, r1
    4d9e:	11 05       	cpc	r17, r1
    4da0:	79 f7       	brne	.-34     	; 0x4d80 <vfprintf+0x4a0>
    4da2:	f7 c0       	rjmp	.+494    	; 0x4f92 <vfprintf+0x6b2>
    4da4:	84 36       	cpi	r24, 0x64	; 100
    4da6:	11 f0       	breq	.+4      	; 0x4dac <vfprintf+0x4cc>
    4da8:	89 36       	cpi	r24, 0x69	; 105
    4daa:	61 f5       	brne	.+88     	; 0x4e04 <vfprintf+0x524>
    4dac:	56 01       	movw	r10, r12
    4dae:	97 fe       	sbrs	r9, 7
    4db0:	09 c0       	rjmp	.+18     	; 0x4dc4 <vfprintf+0x4e4>
    4db2:	24 e0       	ldi	r18, 0x04	; 4
    4db4:	a2 0e       	add	r10, r18
    4db6:	b1 1c       	adc	r11, r1
    4db8:	f6 01       	movw	r30, r12
    4dba:	60 81       	ld	r22, Z
    4dbc:	71 81       	ldd	r23, Z+1	; 0x01
    4dbe:	82 81       	ldd	r24, Z+2	; 0x02
    4dc0:	93 81       	ldd	r25, Z+3	; 0x03
    4dc2:	0a c0       	rjmp	.+20     	; 0x4dd8 <vfprintf+0x4f8>
    4dc4:	f2 e0       	ldi	r31, 0x02	; 2
    4dc6:	af 0e       	add	r10, r31
    4dc8:	b1 1c       	adc	r11, r1
    4dca:	f6 01       	movw	r30, r12
    4dcc:	60 81       	ld	r22, Z
    4dce:	71 81       	ldd	r23, Z+1	; 0x01
    4dd0:	07 2e       	mov	r0, r23
    4dd2:	00 0c       	add	r0, r0
    4dd4:	88 0b       	sbc	r24, r24
    4dd6:	99 0b       	sbc	r25, r25
    4dd8:	f9 2d       	mov	r31, r9
    4dda:	ff 76       	andi	r31, 0x6F	; 111
    4ddc:	9f 2e       	mov	r9, r31
    4dde:	97 ff       	sbrs	r25, 7
    4de0:	09 c0       	rjmp	.+18     	; 0x4df4 <vfprintf+0x514>
    4de2:	90 95       	com	r25
    4de4:	80 95       	com	r24
    4de6:	70 95       	com	r23
    4de8:	61 95       	neg	r22
    4dea:	7f 4f       	sbci	r23, 0xFF	; 255
    4dec:	8f 4f       	sbci	r24, 0xFF	; 255
    4dee:	9f 4f       	sbci	r25, 0xFF	; 255
    4df0:	f0 68       	ori	r31, 0x80	; 128
    4df2:	9f 2e       	mov	r9, r31
    4df4:	2a e0       	ldi	r18, 0x0A	; 10
    4df6:	30 e0       	ldi	r19, 0x00	; 0
    4df8:	a3 01       	movw	r20, r6
    4dfa:	0e 94 c2 ea 	call	0x1d584	; 0x1d584 <__ultoa_invert>
    4dfe:	c8 2e       	mov	r12, r24
    4e00:	c6 18       	sub	r12, r6
    4e02:	3f c0       	rjmp	.+126    	; 0x4e82 <vfprintf+0x5a2>
    4e04:	09 2d       	mov	r16, r9
    4e06:	85 37       	cpi	r24, 0x75	; 117
    4e08:	21 f4       	brne	.+8      	; 0x4e12 <vfprintf+0x532>
    4e0a:	0f 7e       	andi	r16, 0xEF	; 239
    4e0c:	2a e0       	ldi	r18, 0x0A	; 10
    4e0e:	30 e0       	ldi	r19, 0x00	; 0
    4e10:	1d c0       	rjmp	.+58     	; 0x4e4c <vfprintf+0x56c>
    4e12:	09 7f       	andi	r16, 0xF9	; 249
    4e14:	8f 36       	cpi	r24, 0x6F	; 111
    4e16:	91 f0       	breq	.+36     	; 0x4e3c <vfprintf+0x55c>
    4e18:	18 f4       	brcc	.+6      	; 0x4e20 <vfprintf+0x540>
    4e1a:	88 35       	cpi	r24, 0x58	; 88
    4e1c:	59 f0       	breq	.+22     	; 0x4e34 <vfprintf+0x554>
    4e1e:	c3 c0       	rjmp	.+390    	; 0x4fa6 <vfprintf+0x6c6>
    4e20:	80 37       	cpi	r24, 0x70	; 112
    4e22:	19 f0       	breq	.+6      	; 0x4e2a <vfprintf+0x54a>
    4e24:	88 37       	cpi	r24, 0x78	; 120
    4e26:	11 f0       	breq	.+4      	; 0x4e2c <vfprintf+0x54c>
    4e28:	be c0       	rjmp	.+380    	; 0x4fa6 <vfprintf+0x6c6>
    4e2a:	00 61       	ori	r16, 0x10	; 16
    4e2c:	04 ff       	sbrs	r16, 4
    4e2e:	09 c0       	rjmp	.+18     	; 0x4e42 <vfprintf+0x562>
    4e30:	04 60       	ori	r16, 0x04	; 4
    4e32:	07 c0       	rjmp	.+14     	; 0x4e42 <vfprintf+0x562>
    4e34:	94 fe       	sbrs	r9, 4
    4e36:	08 c0       	rjmp	.+16     	; 0x4e48 <vfprintf+0x568>
    4e38:	06 60       	ori	r16, 0x06	; 6
    4e3a:	06 c0       	rjmp	.+12     	; 0x4e48 <vfprintf+0x568>
    4e3c:	28 e0       	ldi	r18, 0x08	; 8
    4e3e:	30 e0       	ldi	r19, 0x00	; 0
    4e40:	05 c0       	rjmp	.+10     	; 0x4e4c <vfprintf+0x56c>
    4e42:	20 e1       	ldi	r18, 0x10	; 16
    4e44:	30 e0       	ldi	r19, 0x00	; 0
    4e46:	02 c0       	rjmp	.+4      	; 0x4e4c <vfprintf+0x56c>
    4e48:	20 e1       	ldi	r18, 0x10	; 16
    4e4a:	32 e0       	ldi	r19, 0x02	; 2
    4e4c:	56 01       	movw	r10, r12
    4e4e:	07 ff       	sbrs	r16, 7
    4e50:	09 c0       	rjmp	.+18     	; 0x4e64 <vfprintf+0x584>
    4e52:	84 e0       	ldi	r24, 0x04	; 4
    4e54:	a8 0e       	add	r10, r24
    4e56:	b1 1c       	adc	r11, r1
    4e58:	f6 01       	movw	r30, r12
    4e5a:	60 81       	ld	r22, Z
    4e5c:	71 81       	ldd	r23, Z+1	; 0x01
    4e5e:	82 81       	ldd	r24, Z+2	; 0x02
    4e60:	93 81       	ldd	r25, Z+3	; 0x03
    4e62:	08 c0       	rjmp	.+16     	; 0x4e74 <vfprintf+0x594>
    4e64:	f2 e0       	ldi	r31, 0x02	; 2
    4e66:	af 0e       	add	r10, r31
    4e68:	b1 1c       	adc	r11, r1
    4e6a:	f6 01       	movw	r30, r12
    4e6c:	60 81       	ld	r22, Z
    4e6e:	71 81       	ldd	r23, Z+1	; 0x01
    4e70:	80 e0       	ldi	r24, 0x00	; 0
    4e72:	90 e0       	ldi	r25, 0x00	; 0
    4e74:	a3 01       	movw	r20, r6
    4e76:	0e 94 c2 ea 	call	0x1d584	; 0x1d584 <__ultoa_invert>
    4e7a:	c8 2e       	mov	r12, r24
    4e7c:	c6 18       	sub	r12, r6
    4e7e:	0f 77       	andi	r16, 0x7F	; 127
    4e80:	90 2e       	mov	r9, r16
    4e82:	96 fe       	sbrs	r9, 6
    4e84:	0b c0       	rjmp	.+22     	; 0x4e9c <vfprintf+0x5bc>
    4e86:	09 2d       	mov	r16, r9
    4e88:	0e 7f       	andi	r16, 0xFE	; 254
    4e8a:	c1 16       	cp	r12, r17
    4e8c:	50 f4       	brcc	.+20     	; 0x4ea2 <vfprintf+0x5c2>
    4e8e:	94 fe       	sbrs	r9, 4
    4e90:	0a c0       	rjmp	.+20     	; 0x4ea6 <vfprintf+0x5c6>
    4e92:	92 fc       	sbrc	r9, 2
    4e94:	08 c0       	rjmp	.+16     	; 0x4ea6 <vfprintf+0x5c6>
    4e96:	09 2d       	mov	r16, r9
    4e98:	0e 7e       	andi	r16, 0xEE	; 238
    4e9a:	05 c0       	rjmp	.+10     	; 0x4ea6 <vfprintf+0x5c6>
    4e9c:	dc 2c       	mov	r13, r12
    4e9e:	09 2d       	mov	r16, r9
    4ea0:	03 c0       	rjmp	.+6      	; 0x4ea8 <vfprintf+0x5c8>
    4ea2:	dc 2c       	mov	r13, r12
    4ea4:	01 c0       	rjmp	.+2      	; 0x4ea8 <vfprintf+0x5c8>
    4ea6:	d1 2e       	mov	r13, r17
    4ea8:	04 ff       	sbrs	r16, 4
    4eaa:	0d c0       	rjmp	.+26     	; 0x4ec6 <vfprintf+0x5e6>
    4eac:	fe 01       	movw	r30, r28
    4eae:	ec 0d       	add	r30, r12
    4eb0:	f1 1d       	adc	r31, r1
    4eb2:	80 81       	ld	r24, Z
    4eb4:	80 33       	cpi	r24, 0x30	; 48
    4eb6:	11 f4       	brne	.+4      	; 0x4ebc <vfprintf+0x5dc>
    4eb8:	09 7e       	andi	r16, 0xE9	; 233
    4eba:	09 c0       	rjmp	.+18     	; 0x4ece <vfprintf+0x5ee>
    4ebc:	02 ff       	sbrs	r16, 2
    4ebe:	06 c0       	rjmp	.+12     	; 0x4ecc <vfprintf+0x5ec>
    4ec0:	d3 94       	inc	r13
    4ec2:	d3 94       	inc	r13
    4ec4:	04 c0       	rjmp	.+8      	; 0x4ece <vfprintf+0x5ee>
    4ec6:	80 2f       	mov	r24, r16
    4ec8:	86 78       	andi	r24, 0x86	; 134
    4eca:	09 f0       	breq	.+2      	; 0x4ece <vfprintf+0x5ee>
    4ecc:	d3 94       	inc	r13
    4ece:	03 fd       	sbrc	r16, 3
    4ed0:	11 c0       	rjmp	.+34     	; 0x4ef4 <vfprintf+0x614>
    4ed2:	00 ff       	sbrs	r16, 0
    4ed4:	06 c0       	rjmp	.+12     	; 0x4ee2 <vfprintf+0x602>
    4ed6:	1c 2d       	mov	r17, r12
    4ed8:	d5 14       	cp	r13, r5
    4eda:	80 f4       	brcc	.+32     	; 0x4efc <vfprintf+0x61c>
    4edc:	15 0d       	add	r17, r5
    4ede:	1d 19       	sub	r17, r13
    4ee0:	0d c0       	rjmp	.+26     	; 0x4efc <vfprintf+0x61c>
    4ee2:	d5 14       	cp	r13, r5
    4ee4:	58 f4       	brcc	.+22     	; 0x4efc <vfprintf+0x61c>
    4ee6:	b7 01       	movw	r22, r14
    4ee8:	80 e2       	ldi	r24, 0x20	; 32
    4eea:	90 e0       	ldi	r25, 0x00	; 0
    4eec:	0e 94 0b 77 	call	0xee16	; 0xee16 <fputc>
    4ef0:	d3 94       	inc	r13
    4ef2:	f7 cf       	rjmp	.-18     	; 0x4ee2 <vfprintf+0x602>
    4ef4:	d5 14       	cp	r13, r5
    4ef6:	10 f4       	brcc	.+4      	; 0x4efc <vfprintf+0x61c>
    4ef8:	5d 18       	sub	r5, r13
    4efa:	01 c0       	rjmp	.+2      	; 0x4efe <vfprintf+0x61e>
    4efc:	51 2c       	mov	r5, r1
    4efe:	04 ff       	sbrs	r16, 4
    4f00:	10 c0       	rjmp	.+32     	; 0x4f22 <vfprintf+0x642>
    4f02:	b7 01       	movw	r22, r14
    4f04:	80 e3       	ldi	r24, 0x30	; 48
    4f06:	90 e0       	ldi	r25, 0x00	; 0
    4f08:	0e 94 0b 77 	call	0xee16	; 0xee16 <fputc>
    4f0c:	02 ff       	sbrs	r16, 2
    4f0e:	17 c0       	rjmp	.+46     	; 0x4f3e <vfprintf+0x65e>
    4f10:	01 fd       	sbrc	r16, 1
    4f12:	03 c0       	rjmp	.+6      	; 0x4f1a <vfprintf+0x63a>
    4f14:	88 e7       	ldi	r24, 0x78	; 120
    4f16:	90 e0       	ldi	r25, 0x00	; 0
    4f18:	02 c0       	rjmp	.+4      	; 0x4f1e <vfprintf+0x63e>
    4f1a:	88 e5       	ldi	r24, 0x58	; 88
    4f1c:	90 e0       	ldi	r25, 0x00	; 0
    4f1e:	b7 01       	movw	r22, r14
    4f20:	0c c0       	rjmp	.+24     	; 0x4f3a <vfprintf+0x65a>
    4f22:	80 2f       	mov	r24, r16
    4f24:	86 78       	andi	r24, 0x86	; 134
    4f26:	59 f0       	breq	.+22     	; 0x4f3e <vfprintf+0x65e>
    4f28:	01 ff       	sbrs	r16, 1
    4f2a:	02 c0       	rjmp	.+4      	; 0x4f30 <vfprintf+0x650>
    4f2c:	8b e2       	ldi	r24, 0x2B	; 43
    4f2e:	01 c0       	rjmp	.+2      	; 0x4f32 <vfprintf+0x652>
    4f30:	80 e2       	ldi	r24, 0x20	; 32
    4f32:	07 fd       	sbrc	r16, 7
    4f34:	8d e2       	ldi	r24, 0x2D	; 45
    4f36:	b7 01       	movw	r22, r14
    4f38:	90 e0       	ldi	r25, 0x00	; 0
    4f3a:	0e 94 0b 77 	call	0xee16	; 0xee16 <fputc>
    4f3e:	c1 16       	cp	r12, r17
    4f40:	38 f4       	brcc	.+14     	; 0x4f50 <vfprintf+0x670>
    4f42:	b7 01       	movw	r22, r14
    4f44:	80 e3       	ldi	r24, 0x30	; 48
    4f46:	90 e0       	ldi	r25, 0x00	; 0
    4f48:	0e 94 0b 77 	call	0xee16	; 0xee16 <fputc>
    4f4c:	11 50       	subi	r17, 0x01	; 1
    4f4e:	f7 cf       	rjmp	.-18     	; 0x4f3e <vfprintf+0x65e>
    4f50:	ca 94       	dec	r12
    4f52:	f3 01       	movw	r30, r6
    4f54:	ec 0d       	add	r30, r12
    4f56:	f1 1d       	adc	r31, r1
    4f58:	80 81       	ld	r24, Z
    4f5a:	b7 01       	movw	r22, r14
    4f5c:	90 e0       	ldi	r25, 0x00	; 0
    4f5e:	0e 94 0b 77 	call	0xee16	; 0xee16 <fputc>
    4f62:	c1 10       	cpse	r12, r1
    4f64:	f5 cf       	rjmp	.-22     	; 0x4f50 <vfprintf+0x670>
    4f66:	15 c0       	rjmp	.+42     	; 0x4f92 <vfprintf+0x6b2>
    4f68:	f4 e0       	ldi	r31, 0x04	; 4
    4f6a:	f5 15       	cp	r31, r5
    4f6c:	60 f5       	brcc	.+88     	; 0x4fc6 <vfprintf+0x6e6>
    4f6e:	84 e0       	ldi	r24, 0x04	; 4
    4f70:	58 1a       	sub	r5, r24
    4f72:	93 fe       	sbrs	r9, 3
    4f74:	1f c0       	rjmp	.+62     	; 0x4fb4 <vfprintf+0x6d4>
    4f76:	01 11       	cpse	r16, r1
    4f78:	27 c0       	rjmp	.+78     	; 0x4fc8 <vfprintf+0x6e8>
    4f7a:	2c 85       	ldd	r18, Y+12	; 0x0c
    4f7c:	23 ff       	sbrs	r18, 3
    4f7e:	2a c0       	rjmp	.+84     	; 0x4fd4 <vfprintf+0x6f4>
    4f80:	06 ed       	ldi	r16, 0xD6	; 214
    4f82:	11 e0       	ldi	r17, 0x01	; 1
    4f84:	39 2d       	mov	r19, r9
    4f86:	30 71       	andi	r19, 0x10	; 16
    4f88:	93 2e       	mov	r9, r19
    4f8a:	f8 01       	movw	r30, r16
    4f8c:	84 91       	lpm	r24, Z
    4f8e:	81 11       	cpse	r24, r1
    4f90:	24 c0       	rjmp	.+72     	; 0x4fda <vfprintf+0x6fa>
    4f92:	55 20       	and	r5, r5
    4f94:	09 f4       	brne	.+2      	; 0x4f98 <vfprintf+0x6b8>
    4f96:	e4 cc       	rjmp	.-1592   	; 0x4960 <vfprintf+0x80>
    4f98:	b7 01       	movw	r22, r14
    4f9a:	80 e2       	ldi	r24, 0x20	; 32
    4f9c:	90 e0       	ldi	r25, 0x00	; 0
    4f9e:	0e 94 0b 77 	call	0xee16	; 0xee16 <fputc>
    4fa2:	5a 94       	dec	r5
    4fa4:	f6 cf       	rjmp	.-20     	; 0x4f92 <vfprintf+0x6b2>
    4fa6:	f7 01       	movw	r30, r14
    4fa8:	86 81       	ldd	r24, Z+6	; 0x06
    4faa:	97 81       	ldd	r25, Z+7	; 0x07
    4fac:	26 c0       	rjmp	.+76     	; 0x4ffa <vfprintf+0x71a>
    4fae:	8f ef       	ldi	r24, 0xFF	; 255
    4fb0:	9f ef       	ldi	r25, 0xFF	; 255
    4fb2:	23 c0       	rjmp	.+70     	; 0x4ffa <vfprintf+0x71a>
    4fb4:	b7 01       	movw	r22, r14
    4fb6:	80 e2       	ldi	r24, 0x20	; 32
    4fb8:	90 e0       	ldi	r25, 0x00	; 0
    4fba:	0e 94 0b 77 	call	0xee16	; 0xee16 <fputc>
    4fbe:	5a 94       	dec	r5
    4fc0:	51 10       	cpse	r5, r1
    4fc2:	f8 cf       	rjmp	.-16     	; 0x4fb4 <vfprintf+0x6d4>
    4fc4:	d8 cf       	rjmp	.-80     	; 0x4f76 <vfprintf+0x696>
    4fc6:	51 2c       	mov	r5, r1
    4fc8:	b7 01       	movw	r22, r14
    4fca:	80 2f       	mov	r24, r16
    4fcc:	90 e0       	ldi	r25, 0x00	; 0
    4fce:	0e 94 0b 77 	call	0xee16	; 0xee16 <fputc>
    4fd2:	d3 cf       	rjmp	.-90     	; 0x4f7a <vfprintf+0x69a>
    4fd4:	0a ed       	ldi	r16, 0xDA	; 218
    4fd6:	11 e0       	ldi	r17, 0x01	; 1
    4fd8:	d5 cf       	rjmp	.-86     	; 0x4f84 <vfprintf+0x6a4>
    4fda:	91 10       	cpse	r9, r1
    4fdc:	80 52       	subi	r24, 0x20	; 32
    4fde:	b7 01       	movw	r22, r14
    4fe0:	90 e0       	ldi	r25, 0x00	; 0
    4fe2:	0e 94 0b 77 	call	0xee16	; 0xee16 <fputc>
    4fe6:	0f 5f       	subi	r16, 0xFF	; 255
    4fe8:	1f 4f       	sbci	r17, 0xFF	; 255
    4fea:	cf cf       	rjmp	.-98     	; 0x4f8a <vfprintf+0x6aa>
    4fec:	23 e0       	ldi	r18, 0x03	; 3
    4fee:	25 15       	cp	r18, r5
    4ff0:	10 f4       	brcc	.+4      	; 0x4ff6 <vfprintf+0x716>
    4ff2:	83 e0       	ldi	r24, 0x03	; 3
    4ff4:	bd cf       	rjmp	.-134    	; 0x4f70 <vfprintf+0x690>
    4ff6:	51 2c       	mov	r5, r1
    4ff8:	c0 cf       	rjmp	.-128    	; 0x4f7a <vfprintf+0x69a>
    4ffa:	60 96       	adiw	r28, 0x10	; 16
    4ffc:	0f b6       	in	r0, 0x3f	; 63
    4ffe:	f8 94       	cli
    5000:	de bf       	out	0x3e, r29	; 62
    5002:	0f be       	out	0x3f, r0	; 63
    5004:	cd bf       	out	0x3d, r28	; 61
    5006:	df 91       	pop	r29
    5008:	cf 91       	pop	r28
    500a:	1f 91       	pop	r17
    500c:	0f 91       	pop	r16
    500e:	ff 90       	pop	r15
    5010:	ef 90       	pop	r14
    5012:	df 90       	pop	r13
    5014:	cf 90       	pop	r12
    5016:	bf 90       	pop	r11
    5018:	af 90       	pop	r10
    501a:	9f 90       	pop	r9
    501c:	8f 90       	pop	r8
    501e:	7f 90       	pop	r7
    5020:	6f 90       	pop	r6
    5022:	5f 90       	pop	r5
    5024:	4f 90       	pop	r4
    5026:	3f 90       	pop	r3
    5028:	2f 90       	pop	r2
    502a:	08 95       	ret

0000502c <chip_select>:
/// @brief SPI CS pin status
/// return CS GPIO pin number or 0xff
uint8_t spi_chip_select_status()
{
    return(_cs_pin);
}
    502c:	e8 2f       	mov	r30, r24
    502e:	e6 95       	lsr	r30
    5030:	e6 95       	lsr	r30
    5032:	e6 95       	lsr	r30
    5034:	93 e0       	ldi	r25, 0x03	; 3
    5036:	e9 9f       	mul	r30, r25
    5038:	f0 01       	movw	r30, r0
    503a:	11 24       	eor	r1, r1
    503c:	32 a1       	ldd	r19, Z+34	; 0x22
    503e:	28 2f       	mov	r18, r24
    5040:	27 70       	andi	r18, 0x07	; 7
    5042:	81 e0       	ldi	r24, 0x01	; 1
    5044:	90 e0       	ldi	r25, 0x00	; 0
    5046:	01 c0       	rjmp	.+2      	; 0x504a <chip_select+0x1e>
    5048:	88 0f       	add	r24, r24
    504a:	2a 95       	dec	r18
    504c:	ea f7       	brpl	.-6      	; 0x5048 <chip_select+0x1c>
    504e:	98 2f       	mov	r25, r24
    5050:	90 95       	com	r25
    5052:	93 23       	and	r25, r19
    5054:	92 a3       	std	Z+34, r25	; 0x22
    5056:	91 a1       	ldd	r25, Z+33	; 0x21
    5058:	89 2b       	or	r24, r25
    505a:	81 a3       	std	Z+33, r24	; 0x21
    505c:	08 95       	ret

0000505e <chip_deselect>:
    505e:	e8 2f       	mov	r30, r24
    5060:	e6 95       	lsr	r30
    5062:	e6 95       	lsr	r30
    5064:	e6 95       	lsr	r30
    5066:	93 e0       	ldi	r25, 0x03	; 3
    5068:	e9 9f       	mul	r30, r25
    506a:	f0 01       	movw	r30, r0
    506c:	11 24       	eor	r1, r1
    506e:	32 a1       	ldd	r19, Z+34	; 0x22
    5070:	28 2f       	mov	r18, r24
    5072:	27 70       	andi	r18, 0x07	; 7
    5074:	81 e0       	ldi	r24, 0x01	; 1
    5076:	90 e0       	ldi	r25, 0x00	; 0
    5078:	01 c0       	rjmp	.+2      	; 0x507c <chip_deselect+0x1e>
    507a:	88 0f       	add	r24, r24
    507c:	2a 95       	dec	r18
    507e:	ea f7       	brpl	.-6      	; 0x507a <chip_deselect+0x1c>
    5080:	93 2f       	mov	r25, r19
    5082:	98 2b       	or	r25, r24
    5084:	92 a3       	std	Z+34, r25	; 0x22
    5086:	91 a1       	ldd	r25, Z+33	; 0x21
    5088:	89 2b       	or	r24, r25
    508a:	81 a3       	std	Z+33, r24	; 0x21
    508c:	08 95       	ret

0000508e <chip_select_init>:
    508e:	e7 cf       	rjmp	.-50     	; 0x505e <chip_deselect>
    5090:	08 95       	ret

00005092 <spi_end>:
    5092:	cf 93       	push	r28
    5094:	c8 2f       	mov	r28, r24
    5096:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_cs_pin>
    509a:	8c 17       	cp	r24, r28
    509c:	a9 f0       	breq	.+42     	; 0x50c8 <spi_end+0x36>
    509e:	8f 3f       	cpi	r24, 0xFF	; 255
    50a0:	99 f0       	breq	.+38     	; 0x50c8 <spi_end+0x36>
    50a2:	1f 92       	push	r1
    50a4:	cf 93       	push	r28
    50a6:	1f 92       	push	r1
    50a8:	8f 93       	push	r24
    50aa:	88 ed       	ldi	r24, 0xD8	; 216
    50ac:	92 e0       	ldi	r25, 0x02	; 2
    50ae:	1f 92       	push	r1
    50b0:	9f 93       	push	r25
    50b2:	8f 93       	push	r24
    50b4:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    50b8:	8d b7       	in	r24, 0x3d	; 61
    50ba:	9e b7       	in	r25, 0x3e	; 62
    50bc:	07 96       	adiw	r24, 0x07	; 7
    50be:	0f b6       	in	r0, 0x3f	; 63
    50c0:	f8 94       	cli
    50c2:	9e bf       	out	0x3e, r25	; 62
    50c4:	0f be       	out	0x3f, r0	; 63
    50c6:	8d bf       	out	0x3d, r24	; 61
    50c8:	8c 2f       	mov	r24, r28
    50ca:	c9 df       	rcall	.-110    	; 0x505e <chip_deselect>
    50cc:	8f ef       	ldi	r24, 0xFF	; 255
    50ce:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <_cs_pin>
    50d2:	cf 91       	pop	r28
    50d4:	08 95       	ret

000050d6 <spi_TX_buffer>:
/// @brief SPI write buffer
/// @param[in] *data: transmit buffer
/// @param[in] count: number of bytes to write
/// @return  void
void spi_TX_buffer(const uint8_t *data, int count)
{
    50d6:	82 c4       	rjmp	.+2308   	; 0x59dc <SPI0_TX>
    50d8:	08 95       	ret

000050da <spi_RX_buffer>:
    50da:	aa c4       	rjmp	.+2388   	; 0x5a30 <SPI0_RX>
    50dc:	08 95       	ret

000050de <spi_TX>:
    50de:	a1 e0       	ldi	r26, 0x01	; 1
    50e0:	b0 e0       	ldi	r27, 0x00	; 0
    50e2:	e5 e7       	ldi	r30, 0x75	; 117
    50e4:	f8 e2       	ldi	r31, 0x28	; 40
    50e6:	0c 94 f0 e5 	jmp	0x1cbe0	; 0x1cbe0 <__prologue_saves__+0x20>
    50ea:	89 83       	std	Y+1, r24	; 0x01
    50ec:	61 e0       	ldi	r22, 0x01	; 1
    50ee:	70 e0       	ldi	r23, 0x00	; 0
    50f0:	ce 01       	movw	r24, r28
    50f2:	01 96       	adiw	r24, 0x01	; 1
    50f4:	73 d4       	rcall	.+2278   	; 0x59dc <SPI0_TX>
    50f6:	21 96       	adiw	r28, 0x01	; 1
    50f8:	e2 e0       	ldi	r30, 0x02	; 2
    50fa:	0c 94 0c e6 	jmp	0x1cc18	; 0x1cc18 <__epilogue_restores__+0x20>

000050fe <spi_init>:
    50fe:	cf 92       	push	r12
    5100:	df 92       	push	r13
    5102:	ef 92       	push	r14
    5104:	ff 92       	push	r15
    5106:	6b 01       	movw	r12, r22
    5108:	7c 01       	movw	r14, r24
    510a:	84 2f       	mov	r24, r20
    510c:	a8 df       	rcall	.-176    	; 0x505e <chip_deselect>
    510e:	8f ef       	ldi	r24, 0xFF	; 255
    5110:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <_cs_pin>
    5114:	c7 01       	movw	r24, r14
    5116:	b6 01       	movw	r22, r12
    5118:	34 d4       	rcall	.+2152   	; 0x5982 <SPI0_Init>
    511a:	80 e0       	ldi	r24, 0x00	; 0
    511c:	90 e0       	ldi	r25, 0x00	; 0
    511e:	f5 d3       	rcall	.+2026   	; 0x590a <SPI0_Mode>
    5120:	8f ef       	ldi	r24, 0xFF	; 255
    5122:	dd df       	rcall	.-70     	; 0x50de <spi_TX>
    5124:	c0 92 00 01 	sts	0x0100, r12	; 0x800100 <__data_start>
    5128:	d0 92 01 01 	sts	0x0101, r13	; 0x800101 <__data_start+0x1>
    512c:	e0 92 02 01 	sts	0x0102, r14	; 0x800102 <__data_start+0x2>
    5130:	f0 92 03 01 	sts	0x0103, r15	; 0x800103 <__data_start+0x3>
    5134:	ff 90       	pop	r15
    5136:	ef 90       	pop	r14
    5138:	df 90       	pop	r13
    513a:	cf 90       	pop	r12
    513c:	08 95       	ret

0000513e <spi_begin>:
    513e:	cf 92       	push	r12
    5140:	df 92       	push	r13
    5142:	ef 92       	push	r14
    5144:	ff 92       	push	r15
    5146:	cf 93       	push	r28
    5148:	df 93       	push	r29
    514a:	6b 01       	movw	r12, r22
    514c:	7c 01       	movw	r14, r24
    514e:	ea 01       	movw	r28, r20
    5150:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_cs_pin>
    5154:	8f 3f       	cpi	r24, 0xFF	; 255
    5156:	99 f0       	breq	.+38     	; 0x517e <spi_begin+0x40>
    5158:	df 93       	push	r29
    515a:	4f 93       	push	r20
    515c:	1f 92       	push	r1
    515e:	8f 93       	push	r24
    5160:	86 ef       	ldi	r24, 0xF6	; 246
    5162:	92 e0       	ldi	r25, 0x02	; 2
    5164:	1f 92       	push	r1
    5166:	9f 93       	push	r25
    5168:	8f 93       	push	r24
    516a:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    516e:	8d b7       	in	r24, 0x3d	; 61
    5170:	9e b7       	in	r25, 0x3e	; 62
    5172:	07 96       	adiw	r24, 0x07	; 7
    5174:	0f b6       	in	r0, 0x3f	; 63
    5176:	f8 94       	cli
    5178:	9e bf       	out	0x3e, r25	; 62
    517a:	0f be       	out	0x3f, r0	; 63
    517c:	8d bf       	out	0x3d, r24	; 61
    517e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    5182:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    5186:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
    518a:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
    518e:	8c 15       	cp	r24, r12
    5190:	9d 05       	cpc	r25, r13
    5192:	ae 05       	cpc	r26, r14
    5194:	bf 05       	cpc	r27, r15
    5196:	21 f0       	breq	.+8      	; 0x51a0 <spi_begin+0x62>
    5198:	ae 01       	movw	r20, r28
    519a:	c7 01       	movw	r24, r14
    519c:	b6 01       	movw	r22, r12
    519e:	af df       	rcall	.-162    	; 0x50fe <spi_init>
    51a0:	8c 2f       	mov	r24, r28
    51a2:	44 df       	rcall	.-376    	; 0x502c <chip_select>
    51a4:	c0 93 04 01 	sts	0x0104, r28	; 0x800104 <_cs_pin>
    51a8:	df 91       	pop	r29
    51aa:	cf 91       	pop	r28
    51ac:	ff 90       	pop	r15
    51ae:	ef 90       	pop	r14
    51b0:	df 90       	pop	r13
    51b2:	cf 90       	pop	r12
    51b4:	08 95       	ret

000051b6 <spi_TXRX>:
    51b6:	a1 e0       	ldi	r26, 0x01	; 1
    51b8:	b0 e0       	ldi	r27, 0x00	; 0
    51ba:	e1 ee       	ldi	r30, 0xE1	; 225
    51bc:	f8 e2       	ldi	r31, 0x28	; 40
    51be:	0c 94 f0 e5 	jmp	0x1cbe0	; 0x1cbe0 <__prologue_saves__+0x20>
    51c2:	89 83       	std	Y+1, r24	; 0x01
    51c4:	61 e0       	ldi	r22, 0x01	; 1
    51c6:	70 e0       	ldi	r23, 0x00	; 0
    51c8:	ce 01       	movw	r24, r28
    51ca:	01 96       	adiw	r24, 0x01	; 1
    51cc:	1b d4       	rcall	.+2102   	; 0x5a04 <SPI0_TXRX>
    51ce:	89 81       	ldd	r24, Y+1	; 0x01
    51d0:	21 96       	adiw	r28, 0x01	; 1
    51d2:	e2 e0       	ldi	r30, 0x02	; 2
    51d4:	0c 94 0c e6 	jmp	0x1cc18	; 0x1cc18 <__epilogue_restores__+0x20>

000051d8 <freeRam>:
/// - avr-libc dependent code.
///
/// @return free memory in bytes.
/// @see malloc().
uint16_t freeRam ()
{
    51d8:	a2 e0       	ldi	r26, 0x02	; 2
    51da:	b0 e0       	ldi	r27, 0x00	; 0
    51dc:	e2 ef       	ldi	r30, 0xF2	; 242
    51de:	f8 e2       	ldi	r31, 0x28	; 40
    51e0:	0c 94 f0 e5 	jmp	0x1cbe0	; 0x1cbe0 <__prologue_saves__+0x20>
    extern void * __heap_start;
    extern void * __brkval;
    int ret;
    uint16_t top;

    if(__brkval)
    51e4:	20 91 a8 20 	lds	r18, 0x20A8	; 0x8020a8 <__brkval>
    51e8:	30 91 a9 20 	lds	r19, 0x20A9	; 0x8020a9 <__brkval+0x1>
    51ec:	21 15       	cp	r18, r1
    51ee:	31 05       	cpc	r19, r1
    51f0:	11 f4       	brne	.+4      	; 0x51f6 <freeRam+0x1e>
        top = (uint16_t) __brkval;
    else
        top = (uint16_t) & __heap_start;
    51f2:	2c ea       	ldi	r18, 0xAC	; 172
    51f4:	30 e2       	ldi	r19, 0x20	; 32

    ret = (uint16_t) &v - top;
    return ( ret );
}
    51f6:	ce 01       	movw	r24, r28
    51f8:	01 96       	adiw	r24, 0x01	; 1
    51fa:	82 1b       	sub	r24, r18
    51fc:	93 0b       	sbc	r25, r19
    51fe:	22 96       	adiw	r28, 0x02	; 2
    5200:	e2 e0       	ldi	r30, 0x02	; 2
    5202:	0c 94 0c e6 	jmp	0x1cc18	; 0x1cc18 <__epilogue_restores__+0x20>

00005206 <PrintFree>:
/// - avr-libc dependent code.
/// - Stack, BSS, Data, Heap, Malloc.
///
/// @return  void
void PrintFree()
{
    5206:	a2 e0       	ldi	r26, 0x02	; 2
    5208:	b0 e0       	ldi	r27, 0x00	; 0
    520a:	e9 e0       	ldi	r30, 0x09	; 9
    520c:	f9 e2       	ldi	r31, 0x29	; 41
    520e:	0c 94 f0 e5 	jmp	0x1cbe0	; 0x1cbe0 <__prologue_saves__+0x20>
    extern void * __data_start;
    extern void * __data_end;
    extern void * __stack;
    uint16_t ram;

    ram = freeRam();
    5212:	e2 df       	rcall	.-60     	; 0x51d8 <freeRam>
    5214:	89 83       	std	Y+1, r24	; 0x01

    printf("Free Ram:%u\n", ram);
    5216:	9a 83       	std	Y+2, r25	; 0x02
    5218:	9f 93       	push	r25
    521a:	8f 93       	push	r24
    521c:	8d e1       	ldi	r24, 0x1D	; 29
    521e:	94 e0       	ldi	r25, 0x04	; 4
    5220:	1f 92       	push	r1
    5222:	9f 93       	push	r25
    5224:	8f 93       	push	r24
    5226:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    printf("  Stack Top:   %u\n", (unsigned int) &__stack);
    522a:	8f ef       	ldi	r24, 0xFF	; 255
    522c:	90 e4       	ldi	r25, 0x40	; 64
    522e:	9f 93       	push	r25
    5230:	8f 93       	push	r24
    5232:	8a e0       	ldi	r24, 0x0A	; 10
    5234:	94 e0       	ldi	r25, 0x04	; 4
    5236:	1f 92       	push	r1
    5238:	9f 93       	push	r25
    523a:	8f 93       	push	r24
    523c:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    printf("  Stack Free:  %u\n", (unsigned int) &ram - 0);
    5240:	ce 01       	movw	r24, r28
    5242:	01 96       	adiw	r24, 0x01	; 1
    5244:	9f 93       	push	r25
    5246:	8f 93       	push	r24
    5248:	87 ef       	ldi	r24, 0xF7	; 247
    524a:	93 e0       	ldi	r25, 0x03	; 3
    524c:	1f 92       	push	r1
    524e:	9f 93       	push	r25
    5250:	8f 93       	push	r24
    5252:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>

    printf("  BSS   start: %5u, end: %5u\n",
    5256:	8c ea       	ldi	r24, 0xAC	; 172
    5258:	90 e2       	ldi	r25, 0x20	; 32
    525a:	9f 93       	push	r25
    525c:	8f 93       	push	r24
    525e:	86 e4       	ldi	r24, 0x46	; 70
    5260:	97 e1       	ldi	r25, 0x17	; 23
    5262:	9f 93       	push	r25
    5264:	8f 93       	push	r24
    5266:	89 ed       	ldi	r24, 0xD9	; 217
    5268:	93 e0       	ldi	r25, 0x03	; 3
    526a:	1f 92       	push	r1
    526c:	9f 93       	push	r25
    526e:	8f 93       	push	r24
    5270:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
        (unsigned int)&__bss_start, (unsigned int)&__bss_end);

    printf("  Data  start: %5u, end: %5u\n",
    5274:	86 e4       	ldi	r24, 0x46	; 70
    5276:	97 e1       	ldi	r25, 0x17	; 23
    5278:	9f 93       	push	r25
    527a:	8f 93       	push	r24
    527c:	80 e0       	ldi	r24, 0x00	; 0
    527e:	91 e0       	ldi	r25, 0x01	; 1
    5280:	9f 93       	push	r25
    5282:	8f 93       	push	r24
    5284:	8b eb       	ldi	r24, 0xBB	; 187
    5286:	93 e0       	ldi	r25, 0x03	; 3
    5288:	1f 92       	push	r1
    528a:	9f 93       	push	r25
    528c:	8f 93       	push	r24
    528e:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
        (unsigned int)&__data_start, (unsigned int)&__data_end);

    printf("  Heap: start: %5u, end: %5u\n",
    5292:	80 e0       	ldi	r24, 0x00	; 0
    5294:	90 e0       	ldi	r25, 0x00	; 0
    5296:	9f 93       	push	r25
    5298:	8f 93       	push	r24
    529a:	8c ea       	ldi	r24, 0xAC	; 172
    529c:	90 e2       	ldi	r25, 0x20	; 32
    529e:	9f 93       	push	r25
    52a0:	8f 93       	push	r24
    52a2:	8d e9       	ldi	r24, 0x9D	; 157
    52a4:	93 e0       	ldi	r25, 0x03	; 3
    52a6:	1f 92       	push	r1
    52a8:	9f 93       	push	r25
    52aa:	8f 93       	push	r24
    52ac:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
        (unsigned int)&__heap_start, (unsigned int)&__heap_end);

    printf("  Malloc start %5u  end: %5u\n",
    52b0:	0f b6       	in	r0, 0x3f	; 63
    52b2:	f8 94       	cli
    52b4:	de bf       	out	0x3e, r29	; 62
    52b6:	0f be       	out	0x3f, r0	; 63
    52b8:	cd bf       	out	0x3d, r28	; 61
    52ba:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <__malloc_heap_end+0x1>
    52be:	8f 93       	push	r24
    52c0:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <__malloc_heap_end>
    52c4:	8f 93       	push	r24
    52c6:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <__malloc_heap_start+0x1>
    52ca:	8f 93       	push	r24
    52cc:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <__malloc_heap_start>
    52d0:	8f 93       	push	r24
    52d2:	8f e7       	ldi	r24, 0x7F	; 127
    52d4:	93 e0       	ldi	r25, 0x03	; 3
    52d6:	1f 92       	push	r1
    52d8:	9f 93       	push	r25
    52da:	8f 93       	push	r24
    52dc:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
        (unsigned int)__malloc_heap_start, (unsigned int) __malloc_heap_end );

    printf("  __brkval:    %5u\n", (unsigned int) __brkval);
    52e0:	80 91 a9 20 	lds	r24, 0x20A9	; 0x8020a9 <__brkval+0x1>
    52e4:	8f 93       	push	r24
    52e6:	80 91 a8 20 	lds	r24, 0x20A8	; 0x8020a8 <__brkval>
    52ea:	8f 93       	push	r24
    52ec:	8b e6       	ldi	r24, 0x6B	; 107
    52ee:	93 e0       	ldi	r25, 0x03	; 3
    52f0:	1f 92       	push	r1
    52f2:	9f 93       	push	r25
    52f4:	8f 93       	push	r24
    52f6:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>

}
    52fa:	0f b6       	in	r0, 0x3f	; 63
    52fc:	f8 94       	cli
    52fe:	de bf       	out	0x3e, r29	; 62
    5300:	0f be       	out	0x3f, r0	; 63
    5302:	cd bf       	out	0x3d, r28	; 61
    5304:	22 96       	adiw	r28, 0x02	; 2
    5306:	e2 e0       	ldi	r30, 0x02	; 2
    5308:	0c 94 0c e6 	jmp	0x1cc18	; 0x1cc18 <__epilogue_restores__+0x20>

0000530c <safecalloc>:
///  - We check if the pointer was in the heap.
///  - Otherwise it may have been statically defined - display error.
///
/// @return  void.
void *safecalloc(int size, int elements)
{
    530c:	ef 92       	push	r14
    530e:	ff 92       	push	r15
    5310:	0f 93       	push	r16
    5312:	1f 93       	push	r17
    5314:	cf 93       	push	r28
    5316:	df 93       	push	r29
    5318:	18 2f       	mov	r17, r24
    531a:	09 2f       	mov	r16, r25
    531c:	f6 2e       	mov	r15, r22
    531e:	e7 2e       	mov	r14, r23
	void *p = calloc(size, elements);
    5320:	0e 94 8e e8 	call	0x1d11c	; 0x1d11c <calloc>
    5324:	ec 01       	movw	r28, r24
	if(!p)
    5326:	89 2b       	or	r24, r25
    5328:	99 f4       	brne	.+38     	; 0x5350 <safecalloc+0x44>
	{
		printf("safecalloc(%d,%d) failed!\n", size, elements);
    532a:	ef 92       	push	r14
    532c:	ff 92       	push	r15
    532e:	0f 93       	push	r16
    5330:	1f 93       	push	r17
    5332:	80 e5       	ldi	r24, 0x50	; 80
    5334:	93 e0       	ldi	r25, 0x03	; 3
    5336:	1f 92       	push	r1
    5338:	9f 93       	push	r25
    533a:	8f 93       	push	r24
    533c:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    5340:	8d b7       	in	r24, 0x3d	; 61
    5342:	9e b7       	in	r25, 0x3e	; 62
    5344:	07 96       	adiw	r24, 0x07	; 7
    5346:	0f b6       	in	r0, 0x3f	; 63
    5348:	f8 94       	cli
    534a:	9e bf       	out	0x3e, r25	; 62
    534c:	0f be       	out	0x3f, r0	; 63
    534e:	8d bf       	out	0x3d, r24	; 61
	}
	return(p);
}
    5350:	ce 01       	movw	r24, r28
    5352:	cd b7       	in	r28, 0x3d	; 61
    5354:	de b7       	in	r29, 0x3e	; 62
    5356:	e6 e0       	ldi	r30, 0x06	; 6
    5358:	0c 94 08 e6 	jmp	0x1cc10	; 0x1cc10 <__epilogue_restores__+0x18>

0000535c <safemalloc>:
///  - We check if the pointer was in the heap.
///  - Otherwise it may have been statically defined - display error.
/// @param[in] size:  size
/// @return  void.
void *safemalloc(size_t size)
{
    535c:	0f 93       	push	r16
    535e:	1f 93       	push	r17
    5360:	cf 93       	push	r28
    5362:	df 93       	push	r29
    5364:	18 2f       	mov	r17, r24
    5366:	09 2f       	mov	r16, r25
    void *p = calloc(size, 1);
    5368:	61 e0       	ldi	r22, 0x01	; 1
    536a:	70 e0       	ldi	r23, 0x00	; 0
    536c:	0e 94 8e e8 	call	0x1d11c	; 0x1d11c <calloc>
    5370:	ec 01       	movw	r28, r24
    if(!p)
    5372:	89 2b       	or	r24, r25
    5374:	71 f4       	brne	.+28     	; 0x5392 <safemalloc+0x36>
    {
        printf("safemalloc(%d) failed!\n", size);
    5376:	0f 93       	push	r16
    5378:	1f 93       	push	r17
    537a:	88 e3       	ldi	r24, 0x38	; 56
    537c:	93 e0       	ldi	r25, 0x03	; 3
    537e:	1f 92       	push	r1
    5380:	9f 93       	push	r25
    5382:	8f 93       	push	r24
    5384:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    5388:	0f 90       	pop	r0
    538a:	0f 90       	pop	r0
    538c:	0f 90       	pop	r0
    538e:	0f 90       	pop	r0
    5390:	0f 90       	pop	r0
    }
    return(p);
}
    5392:	ce 01       	movw	r24, r28
    5394:	df 91       	pop	r29
    5396:	cf 91       	pop	r28
    5398:	1f 91       	pop	r17
    539a:	0f 91       	pop	r16
    539c:	08 95       	ret

0000539e <safefree>:
    extern void *__brkval;
    extern void * __heap_start;
    extern void * __heap_end;
    uint16_t top;

    if(p == NULL)
    539e:	00 97       	sbiw	r24, 0x00	; 0
    53a0:	39 f1       	breq	.+78     	; 0x53f0 <safefree+0x52>
        return;

    if(__brkval)
    53a2:	20 91 a8 20 	lds	r18, 0x20A8	; 0x8020a8 <__brkval>
    53a6:	30 91 a9 20 	lds	r19, 0x20A9	; 0x8020a9 <__brkval+0x1>
    53aa:	21 15       	cp	r18, r1
    53ac:	31 05       	cpc	r19, r1
    53ae:	11 f4       	brne	.+4      	; 0x53b4 <safefree+0x16>
        top = (uint16_t) __brkval;
    else
        top = (uint16_t) & __heap_start;
    53b0:	2c ea       	ldi	r18, 0xAC	; 172
    53b2:	30 e2       	ldi	r19, 0x20	; 32

    if( ((uint16_t) p >= (uint16_t) &__heap_start) &&
    53b4:	40 e2       	ldi	r20, 0x20	; 32
    53b6:	8c 3a       	cpi	r24, 0xAC	; 172
    53b8:	94 07       	cpc	r25, r20
    53ba:	30 f0       	brcs	.+12     	; 0x53c8 <safefree+0x2a>
    53bc:	28 17       	cp	r18, r24
    53be:	39 07       	cpc	r19, r25
    53c0:	18 f0       	brcs	.+6      	; 0x53c8 <safefree+0x2a>
        ((uint16_t) p <= top) )
    {
        free(p);
    53c2:	0c 94 40 e9 	jmp	0x1d280	; 0x1d280 <free>
        return;
    53c6:	08 95       	ret
    }
    printf("safefree: FREE ERROR (%u), top:(%u)\n", (uint16_t) p, (uint16_t) top);
    53c8:	3f 93       	push	r19
    53ca:	2f 93       	push	r18
    53cc:	9f 93       	push	r25
    53ce:	8f 93       	push	r24
    53d0:	83 e1       	ldi	r24, 0x13	; 19
    53d2:	93 e0       	ldi	r25, 0x03	; 3
    53d4:	1f 92       	push	r1
    53d6:	9f 93       	push	r25
    53d8:	8f 93       	push	r24
    53da:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    PrintFree();
    53de:	13 df       	rcall	.-474    	; 0x5206 <PrintFree>
    53e0:	8d b7       	in	r24, 0x3d	; 61
    53e2:	9e b7       	in	r25, 0x3e	; 62
    53e4:	07 96       	adiw	r24, 0x07	; 7
    53e6:	0f b6       	in	r0, 0x3f	; 63
    53e8:	f8 94       	cli
    53ea:	9e bf       	out	0x3e, r25	; 62
    53ec:	0f be       	out	0x3f, r0	; 63
    53ee:	8d bf       	out	0x3d, r24	; 61
    53f0:	08 95       	ret

000053f2 <delayus>:
/// @return  void
/// @see _delay_us() is part of avr-libc
void delayus(uint32_t us)
{

    while (us >= 100U)
    53f2:	64 36       	cpi	r22, 0x64	; 100
    53f4:	71 05       	cpc	r23, r1
    53f6:	81 05       	cpc	r24, r1
    53f8:	91 05       	cpc	r25, r1
    53fa:	58 f0       	brcs	.+22     	; 0x5412 <delayus+0x20>
    {
        us -= 100U;
    53fc:	64 56       	subi	r22, 0x64	; 100
    53fe:	71 09       	sbc	r23, r1
    5400:	81 09       	sbc	r24, r1
    5402:	91 09       	sbc	r25, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    5404:	e3 ef       	ldi	r30, 0xF3	; 243
    5406:	f1 e0       	ldi	r31, 0x01	; 1
    5408:	31 97       	sbiw	r30, 0x01	; 1
    540a:	f1 f7       	brne	.-4      	; 0x5408 <delayus+0x16>
    540c:	00 c0       	rjmp	.+0      	; 0x540e <delayus+0x1c>
    540e:	00 00       	nop
    5410:	f0 cf       	rjmp	.-32     	; 0x53f2 <delayus>
        _delay_us(100);
    }
    while (us >= 10U)
    5412:	6a 30       	cpi	r22, 0x0A	; 10
    5414:	71 05       	cpc	r23, r1
    5416:	81 05       	cpc	r24, r1
    5418:	91 05       	cpc	r25, r1
    541a:	48 f0       	brcs	.+18     	; 0x542e <delayus+0x3c>
    {
        us -= 10U;
    541c:	6a 50       	subi	r22, 0x0A	; 10
    541e:	71 09       	sbc	r23, r1
    5420:	81 09       	sbc	r24, r1
    5422:	91 09       	sbc	r25, r1
    5424:	f2 e4       	ldi	r31, 0x42	; 66
    5426:	fa 95       	dec	r31
    5428:	f1 f7       	brne	.-4      	; 0x5426 <delayus+0x34>
    542a:	00 c0       	rjmp	.+0      	; 0x542c <delayus+0x3a>
    542c:	f2 cf       	rjmp	.-28     	; 0x5412 <delayus+0x20>
        _delay_us(10);
    }
    while (us != 0U)
    542e:	61 15       	cp	r22, r1
    5430:	71 05       	cpc	r23, r1
    5432:	81 05       	cpc	r24, r1
    5434:	91 05       	cpc	r25, r1
    5436:	49 f0       	breq	.+18     	; 0x544a <delayus+0x58>
    {
        --us;
    5438:	61 50       	subi	r22, 0x01	; 1
    543a:	71 09       	sbc	r23, r1
    543c:	81 09       	sbc	r24, r1
    543e:	91 09       	sbc	r25, r1
    5440:	26 e0       	ldi	r18, 0x06	; 6
    5442:	2a 95       	dec	r18
    5444:	f1 f7       	brne	.-4      	; 0x5442 <delayus+0x50>
    5446:	00 c0       	rjmp	.+0      	; 0x5448 <delayus+0x56>
    5448:	f2 cf       	rjmp	.-28     	; 0x542e <delayus+0x3c>
        _delay_us(1);
    }
}
    544a:	08 95       	ret

0000544c <delayms>:
/// _delay_us() has limited range - this extends it.
/// @return  void
/// @see _delay_us() is part of avr-libc
void delayms(uint32_t ms)
{
    while (ms--)
    544c:	61 15       	cp	r22, r1
    544e:	71 05       	cpc	r23, r1
    5450:	81 05       	cpc	r24, r1
    5452:	91 05       	cpc	r25, r1
    5454:	09 f4       	brne	.+2      	; 0x5458 <delayms+0xc>
    5456:	41 c0       	rjmp	.+130    	; 0x54da <delayms+0x8e>
    5458:	e3 ef       	ldi	r30, 0xF3	; 243
    545a:	f1 e0       	ldi	r31, 0x01	; 1
    545c:	31 97       	sbiw	r30, 0x01	; 1
    545e:	f1 f7       	brne	.-4      	; 0x545c <delayms+0x10>
    5460:	00 c0       	rjmp	.+0      	; 0x5462 <delayms+0x16>
    5462:	00 00       	nop
    5464:	e3 ef       	ldi	r30, 0xF3	; 243
    5466:	f1 e0       	ldi	r31, 0x01	; 1
    5468:	31 97       	sbiw	r30, 0x01	; 1
    546a:	f1 f7       	brne	.-4      	; 0x5468 <delayms+0x1c>
    546c:	00 c0       	rjmp	.+0      	; 0x546e <delayms+0x22>
    546e:	00 00       	nop
    5470:	e3 ef       	ldi	r30, 0xF3	; 243
    5472:	f1 e0       	ldi	r31, 0x01	; 1
    5474:	31 97       	sbiw	r30, 0x01	; 1
    5476:	f1 f7       	brne	.-4      	; 0x5474 <delayms+0x28>
    5478:	00 c0       	rjmp	.+0      	; 0x547a <delayms+0x2e>
    547a:	00 00       	nop
    547c:	e3 ef       	ldi	r30, 0xF3	; 243
    547e:	f1 e0       	ldi	r31, 0x01	; 1
    5480:	31 97       	sbiw	r30, 0x01	; 1
    5482:	f1 f7       	brne	.-4      	; 0x5480 <delayms+0x34>
    5484:	00 c0       	rjmp	.+0      	; 0x5486 <delayms+0x3a>
    5486:	00 00       	nop
    5488:	e3 ef       	ldi	r30, 0xF3	; 243
    548a:	f1 e0       	ldi	r31, 0x01	; 1
    548c:	31 97       	sbiw	r30, 0x01	; 1
    548e:	f1 f7       	brne	.-4      	; 0x548c <delayms+0x40>
    5490:	00 c0       	rjmp	.+0      	; 0x5492 <delayms+0x46>
    5492:	00 00       	nop
    5494:	e3 ef       	ldi	r30, 0xF3	; 243
    5496:	f1 e0       	ldi	r31, 0x01	; 1
    5498:	31 97       	sbiw	r30, 0x01	; 1
    549a:	f1 f7       	brne	.-4      	; 0x5498 <delayms+0x4c>
    549c:	00 c0       	rjmp	.+0      	; 0x549e <delayms+0x52>
    549e:	00 00       	nop
    54a0:	e3 ef       	ldi	r30, 0xF3	; 243
    54a2:	f1 e0       	ldi	r31, 0x01	; 1
    54a4:	31 97       	sbiw	r30, 0x01	; 1
    54a6:	f1 f7       	brne	.-4      	; 0x54a4 <delayms+0x58>
    54a8:	00 c0       	rjmp	.+0      	; 0x54aa <delayms+0x5e>
    54aa:	00 00       	nop
    54ac:	e3 ef       	ldi	r30, 0xF3	; 243
    54ae:	f1 e0       	ldi	r31, 0x01	; 1
    54b0:	31 97       	sbiw	r30, 0x01	; 1
    54b2:	f1 f7       	brne	.-4      	; 0x54b0 <delayms+0x64>
    54b4:	00 c0       	rjmp	.+0      	; 0x54b6 <delayms+0x6a>
    54b6:	00 00       	nop
    54b8:	e3 ef       	ldi	r30, 0xF3	; 243
    54ba:	f1 e0       	ldi	r31, 0x01	; 1
    54bc:	31 97       	sbiw	r30, 0x01	; 1
    54be:	f1 f7       	brne	.-4      	; 0x54bc <delayms+0x70>
    54c0:	00 c0       	rjmp	.+0      	; 0x54c2 <delayms+0x76>
    54c2:	00 00       	nop
    54c4:	e3 ef       	ldi	r30, 0xF3	; 243
    54c6:	f1 e0       	ldi	r31, 0x01	; 1
    54c8:	31 97       	sbiw	r30, 0x01	; 1
    54ca:	f1 f7       	brne	.-4      	; 0x54c8 <delayms+0x7c>
    54cc:	00 c0       	rjmp	.+0      	; 0x54ce <delayms+0x82>
    54ce:	00 00       	nop
    54d0:	61 50       	subi	r22, 0x01	; 1
    54d2:	71 09       	sbc	r23, r1
    54d4:	81 09       	sbc	r24, r1
    54d6:	91 09       	sbc	r25, r1
    54d8:	b9 cf       	rjmp	.-142    	; 0x544c <delayms>
        _delay_us(100);                           // 700
        _delay_us(100);                           // 800
        _delay_us(100);                           // 900
        _delay_us(100);                           //1000
    }
}
    54da:	08 95       	ret

000054dc <uart_ubr>:

    cli();
    c = uarts[uart].rx_buf[uarts[uart].rx_tail];
    sei();
    return (c & 0xff);
}
    54dc:	4f 92       	push	r4
    54de:	5f 92       	push	r5
    54e0:	6f 92       	push	r6
    54e2:	7f 92       	push	r7
    54e4:	8f 92       	push	r8
    54e6:	9f 92       	push	r9
    54e8:	af 92       	push	r10
    54ea:	bf 92       	push	r11
    54ec:	cf 92       	push	r12
    54ee:	df 92       	push	r13
    54f0:	ef 92       	push	r14
    54f2:	ff 92       	push	r15
    54f4:	cf 93       	push	r28
    54f6:	df 93       	push	r29
    54f8:	5a 01       	movw	r10, r20
    54fa:	e9 01       	movw	r28, r18
    54fc:	0e 94 2c e7 	call	0x1ce58	; 0x1ce58 <__floatunsisf>
    5500:	2b 01       	movw	r4, r22
    5502:	3c 01       	movw	r6, r24
    5504:	20 e0       	ldi	r18, 0x00	; 0
    5506:	30 e0       	ldi	r19, 0x00	; 0
    5508:	40 e0       	ldi	r20, 0x00	; 0
    550a:	51 e4       	ldi	r21, 0x41	; 65
    550c:	0e 94 e2 e7 	call	0x1cfc4	; 0x1cfc4 <__mulsf3>
    5510:	9b 01       	movw	r18, r22
    5512:	ac 01       	movw	r20, r24
    5514:	60 e8       	ldi	r22, 0x80	; 128
    5516:	76 e9       	ldi	r23, 0x96	; 150
    5518:	88 e9       	ldi	r24, 0x98	; 152
    551a:	9b e4       	ldi	r25, 0x4B	; 75
    551c:	0e 94 93 e6 	call	0x1cd26	; 0x1cd26 <__divsf3>
    5520:	20 e0       	ldi	r18, 0x00	; 0
    5522:	30 e0       	ldi	r19, 0x00	; 0
    5524:	40 e8       	ldi	r20, 0x80	; 128
    5526:	5f e3       	ldi	r21, 0x3F	; 63
    5528:	0e 94 2a e6 	call	0x1cc54	; 0x1cc54 <__subsf3>
    552c:	0e 94 45 e8 	call	0x1d08a	; 0x1d08a <round>
    5530:	0e 94 00 e7 	call	0x1ce00	; 0x1ce00 <__fixunssfsi>
    5534:	6b 01       	movw	r12, r22
    5536:	7c 01       	movw	r14, r24
    5538:	c1 14       	cp	r12, r1
    553a:	80 e1       	ldi	r24, 0x10	; 16
    553c:	d8 06       	cpc	r13, r24
    553e:	e1 04       	cpc	r14, r1
    5540:	f1 04       	cpc	r15, r1
    5542:	58 f4       	brcc	.+22     	; 0x555a <uart_ubr+0x7e>
    5544:	81 e0       	ldi	r24, 0x01	; 1
    5546:	90 e0       	ldi	r25, 0x00	; 0
    5548:	f5 01       	movw	r30, r10
    554a:	91 83       	std	Z+1, r25	; 0x01
    554c:	80 83       	st	Z, r24
    554e:	81 2c       	mov	r8, r1
    5550:	91 2c       	mov	r9, r1
    5552:	a1 2c       	mov	r10, r1
    5554:	21 e4       	ldi	r18, 0x41	; 65
    5556:	b2 2e       	mov	r11, r18
    5558:	31 c0       	rjmp	.+98     	; 0x55bc <uart_ubr+0xe0>
    555a:	f5 01       	movw	r30, r10
    555c:	11 82       	std	Z+1, r1	; 0x01
    555e:	10 82       	st	Z, r1
    5560:	20 e0       	ldi	r18, 0x00	; 0
    5562:	30 e0       	ldi	r19, 0x00	; 0
    5564:	40 e8       	ldi	r20, 0x80	; 128
    5566:	51 e4       	ldi	r21, 0x41	; 65
    5568:	c3 01       	movw	r24, r6
    556a:	b2 01       	movw	r22, r4
    556c:	0e 94 e2 e7 	call	0x1cfc4	; 0x1cfc4 <__mulsf3>
    5570:	9b 01       	movw	r18, r22
    5572:	ac 01       	movw	r20, r24
    5574:	60 e8       	ldi	r22, 0x80	; 128
    5576:	76 e9       	ldi	r23, 0x96	; 150
    5578:	88 e9       	ldi	r24, 0x98	; 152
    557a:	9b e4       	ldi	r25, 0x4B	; 75
    557c:	0e 94 93 e6 	call	0x1cd26	; 0x1cd26 <__divsf3>
    5580:	20 e0       	ldi	r18, 0x00	; 0
    5582:	30 e0       	ldi	r19, 0x00	; 0
    5584:	40 e8       	ldi	r20, 0x80	; 128
    5586:	5f e3       	ldi	r21, 0x3F	; 63
    5588:	0e 94 2a e6 	call	0x1cc54	; 0x1cc54 <__subsf3>
    558c:	0e 94 45 e8 	call	0x1d08a	; 0x1d08a <round>
    5590:	0e 94 00 e7 	call	0x1ce00	; 0x1ce00 <__fixunssfsi>
    5594:	6b 01       	movw	r12, r22
    5596:	7c 01       	movw	r14, r24
    5598:	81 2c       	mov	r8, r1
    559a:	91 2c       	mov	r9, r1
    559c:	90 e8       	ldi	r25, 0x80	; 128
    559e:	a9 2e       	mov	r10, r25
    55a0:	91 e4       	ldi	r25, 0x41	; 65
    55a2:	b9 2e       	mov	r11, r25
    55a4:	c1 14       	cp	r12, r1
    55a6:	f0 e1       	ldi	r31, 0x10	; 16
    55a8:	df 06       	cpc	r13, r31
    55aa:	e1 04       	cpc	r14, r1
    55ac:	f1 04       	cpc	r15, r1
    55ae:	30 f0       	brcs	.+12     	; 0x55bc <uart_ubr+0xe0>
    55b0:	cc 24       	eor	r12, r12
    55b2:	ca 94       	dec	r12
    55b4:	8f e0       	ldi	r24, 0x0F	; 15
    55b6:	d8 2e       	mov	r13, r24
    55b8:	e1 2c       	mov	r14, r1
    55ba:	f1 2c       	mov	r15, r1
    55bc:	c7 01       	movw	r24, r14
    55be:	b6 01       	movw	r22, r12
    55c0:	6f 5f       	subi	r22, 0xFF	; 255
    55c2:	7f 4f       	sbci	r23, 0xFF	; 255
    55c4:	8f 4f       	sbci	r24, 0xFF	; 255
    55c6:	9f 4f       	sbci	r25, 0xFF	; 255
    55c8:	0e 94 2c e7 	call	0x1ce58	; 0x1ce58 <__floatunsisf>
    55cc:	a5 01       	movw	r20, r10
    55ce:	94 01       	movw	r18, r8
    55d0:	0e 94 e2 e7 	call	0x1cfc4	; 0x1cfc4 <__mulsf3>
    55d4:	9b 01       	movw	r18, r22
    55d6:	ac 01       	movw	r20, r24
    55d8:	60 e8       	ldi	r22, 0x80	; 128
    55da:	76 e9       	ldi	r23, 0x96	; 150
    55dc:	88 e9       	ldi	r24, 0x98	; 152
    55de:	9b e4       	ldi	r25, 0x4B	; 75
    55e0:	0e 94 93 e6 	call	0x1cd26	; 0x1cd26 <__divsf3>
    55e4:	0e 94 00 e7 	call	0x1ce00	; 0x1ce00 <__fixunssfsi>
    55e8:	68 83       	st	Y, r22
    55ea:	79 83       	std	Y+1, r23	; 0x01
    55ec:	8a 83       	std	Y+2, r24	; 0x02
    55ee:	9b 83       	std	Y+3, r25	; 0x03
    55f0:	c6 01       	movw	r24, r12
    55f2:	df 91       	pop	r29
    55f4:	cf 91       	pop	r28
    55f6:	ff 90       	pop	r15
    55f8:	ef 90       	pop	r14
    55fa:	df 90       	pop	r13
    55fc:	cf 90       	pop	r12
    55fe:	bf 90       	pop	r11
    5600:	af 90       	pop	r10
    5602:	9f 90       	pop	r9
    5604:	8f 90       	pop	r8
    5606:	7f 90       	pop	r7
    5608:	6f 90       	pop	r6
    560a:	5f 90       	pop	r5
    560c:	4f 90       	pop	r4
    560e:	08 95       	ret

00005610 <uart_init>:
    5610:	a6 e0       	ldi	r26, 0x06	; 6
    5612:	b0 e0       	ldi	r27, 0x00	; 0
    5614:	ee e0       	ldi	r30, 0x0E	; 14
    5616:	fb e2       	ldi	r31, 0x2B	; 43
    5618:	0c 94 f0 e5 	jmp	0x1cbe0	; 0x1cbe0 <__prologue_saves__+0x20>
    561c:	1e 82       	std	Y+6, r1	; 0x06
    561e:	1d 82       	std	Y+5, r1	; 0x05
    5620:	81 11       	cpse	r24, r1
    5622:	36 c0       	rjmp	.+108    	; 0x5690 <uart_init+0x80>
    5624:	cb 01       	movw	r24, r22
    5626:	ba 01       	movw	r22, r20
    5628:	9e 01       	movw	r18, r28
    562a:	2f 5f       	subi	r18, 0xFF	; 255
    562c:	3f 4f       	sbci	r19, 0xFF	; 255
    562e:	ae 01       	movw	r20, r28
    5630:	4b 5f       	subi	r20, 0xFB	; 251
    5632:	5f 4f       	sbci	r21, 0xFF	; 255
    5634:	53 df       	rcall	.-346    	; 0x54dc <uart_ubr>
    5636:	f8 94       	cli
    5638:	10 92 f3 18 	sts	0x18F3, r1	; 0x8018f3 <uarts+0x4>
    563c:	10 92 f2 18 	sts	0x18F2, r1	; 0x8018f2 <uarts+0x3>
    5640:	10 92 ef 18 	sts	0x18EF, r1	; 0x8018ef <uarts>
    5644:	10 92 f0 18 	sts	0x18F0, r1	; 0x8018f0 <uarts+0x1>
    5648:	10 92 f1 18 	sts	0x18F1, r1	; 0x8018f1 <uarts+0x2>
    564c:	10 92 f4 18 	sts	0x18F4, r1	; 0x8018f4 <uarts+0x5>
    5650:	78 94       	sei
    5652:	f8 94       	cli
    5654:	58 9a       	sbi	0x0b, 0	; 11
    5656:	59 9a       	sbi	0x0b, 1	; 11
    5658:	50 98       	cbi	0x0a, 0	; 10
    565a:	51 9a       	sbi	0x0a, 1	; 10
    565c:	28 e9       	ldi	r18, 0x98	; 152
    565e:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    5662:	2d 81       	ldd	r18, Y+5	; 0x05
    5664:	3e 81       	ldd	r19, Y+6	; 0x06
    5666:	23 2b       	or	r18, r19
    5668:	19 f0       	breq	.+6      	; 0x5670 <uart_init+0x60>
    566a:	22 e0       	ldi	r18, 0x02	; 2
    566c:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    5670:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    5674:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    5678:	78 94       	sei
    567a:	6d ef       	ldi	r22, 0xFD	; 253
    567c:	7b e2       	ldi	r23, 0x2B	; 43
    567e:	82 e1       	ldi	r24, 0x12	; 18
    5680:	9c e2       	ldi	r25, 0x2C	; 44
    5682:	0e 94 c5 79 	call	0xf38a	; 0xf38a <fdevopen>
    5686:	69 81       	ldd	r22, Y+1	; 0x01
    5688:	7a 81       	ldd	r23, Y+2	; 0x02
    568a:	8b 81       	ldd	r24, Y+3	; 0x03
    568c:	9c 81       	ldd	r25, Y+4	; 0x04
    568e:	03 c0       	rjmp	.+6      	; 0x5696 <uart_init+0x86>
    5690:	60 e0       	ldi	r22, 0x00	; 0
    5692:	70 e0       	ldi	r23, 0x00	; 0
    5694:	cb 01       	movw	r24, r22
    5696:	26 96       	adiw	r28, 0x06	; 6
    5698:	e2 e0       	ldi	r30, 0x02	; 2
    569a:	0c 94 0c e6 	jmp	0x1cc18	; 0x1cc18 <__epilogue_restores__+0x20>

0000569e <uart_rx_interrupt>:
    569e:	27 e5       	ldi	r18, 0x57	; 87
    56a0:	82 9f       	mul	r24, r18
    56a2:	c0 01       	movw	r24, r0
    56a4:	11 24       	eor	r1, r1
    56a6:	fc 01       	movw	r30, r24
    56a8:	e1 51       	subi	r30, 0x11	; 17
    56aa:	f7 4e       	sbci	r31, 0xE7	; 231
    56ac:	83 81       	ldd	r24, Z+3	; 0x03
    56ae:	94 81       	ldd	r25, Z+4	; 0x04
    56b0:	80 35       	cpi	r24, 0x50	; 80
    56b2:	91 05       	cpc	r25, r1
    56b4:	84 f4       	brge	.+32     	; 0x56d6 <uart_rx_interrupt+0x38>
    56b6:	30 81       	ld	r19, Z
    56b8:	21 e0       	ldi	r18, 0x01	; 1
    56ba:	23 0f       	add	r18, r19
    56bc:	20 83       	st	Z, r18
    56be:	df 01       	movw	r26, r30
    56c0:	a3 0f       	add	r26, r19
    56c2:	b1 1d       	adc	r27, r1
    56c4:	16 96       	adiw	r26, 0x06	; 6
    56c6:	6c 93       	st	X, r22
    56c8:	01 96       	adiw	r24, 0x01	; 1
    56ca:	94 83       	std	Z+4, r25	; 0x04
    56cc:	83 83       	std	Z+3, r24	; 0x03
    56ce:	20 35       	cpi	r18, 0x50	; 80
    56d0:	28 f0       	brcs	.+10     	; 0x56dc <uart_rx_interrupt+0x3e>
    56d2:	10 82       	st	Z, r1
    56d4:	08 95       	ret
    56d6:	85 81       	ldd	r24, Z+5	; 0x05
    56d8:	81 60       	ori	r24, 0x01	; 1
    56da:	85 83       	std	Z+5, r24	; 0x05
    56dc:	08 95       	ret

000056de <__vector_20>:
    56de:	1f 92       	push	r1
    56e0:	0f 92       	push	r0
    56e2:	0f b6       	in	r0, 0x3f	; 63
    56e4:	0f 92       	push	r0
    56e6:	11 24       	eor	r1, r1
    56e8:	0b b6       	in	r0, 0x3b	; 59
    56ea:	0f 92       	push	r0
    56ec:	2f 93       	push	r18
    56ee:	3f 93       	push	r19
    56f0:	4f 93       	push	r20
    56f2:	5f 93       	push	r21
    56f4:	6f 93       	push	r22
    56f6:	7f 93       	push	r23
    56f8:	8f 93       	push	r24
    56fa:	9f 93       	push	r25
    56fc:	af 93       	push	r26
    56fe:	bf 93       	push	r27
    5700:	ef 93       	push	r30
    5702:	ff 93       	push	r31
    5704:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    5708:	80 e0       	ldi	r24, 0x00	; 0
    570a:	c9 df       	rcall	.-110    	; 0x569e <uart_rx_interrupt>
    570c:	ff 91       	pop	r31
    570e:	ef 91       	pop	r30
    5710:	bf 91       	pop	r27
    5712:	af 91       	pop	r26
    5714:	9f 91       	pop	r25
    5716:	8f 91       	pop	r24
    5718:	7f 91       	pop	r23
    571a:	6f 91       	pop	r22
    571c:	5f 91       	pop	r21
    571e:	4f 91       	pop	r20
    5720:	3f 91       	pop	r19
    5722:	2f 91       	pop	r18
    5724:	0f 90       	pop	r0
    5726:	0b be       	out	0x3b, r0	; 59
    5728:	0f 90       	pop	r0
    572a:	0f be       	out	0x3f, r0	; 63
    572c:	0f 90       	pop	r0
    572e:	1f 90       	pop	r1
    5730:	18 95       	reti

00005732 <uart_rx_count>:
/// @return  Character count in ring buffer.
int uart_rx_count(uint8_t uart)
{
    int count;

    if(uart >= UARTS)
    5732:	81 11       	cpse	r24, r1
    5734:	07 c0       	rjmp	.+14     	; 0x5744 <uart_rx_count+0x12>
        return(EOF);

    cli();
    5736:	f8 94       	cli

    count = uarts[uart].rx_count;
    5738:	80 91 f2 18 	lds	r24, 0x18F2	; 0x8018f2 <uarts+0x3>
    573c:	90 91 f3 18 	lds	r25, 0x18F3	; 0x8018f3 <uarts+0x4>

    sei();
    5740:	78 94       	sei

    return (count );
    5742:	08 95       	ret
int uart_rx_count(uint8_t uart)
{
    int count;

    if(uart >= UARTS)
        return(EOF);
    5744:	8f ef       	ldi	r24, 0xFF	; 255
    5746:	9f ef       	ldi	r25, 0xFF	; 255
    count = uarts[uart].rx_count;

    sei();

    return (count );
}
    5748:	08 95       	ret

0000574a <uart_get_tail>:
/// @see uart_rx_count().
int uart_get_tail(uint8_t uart)
{
    uint8_t c;

    if (uart >= UARTS)
    574a:	81 11       	cpse	r24, r1
    574c:	21 c0       	rjmp	.+66     	; 0x5790 <uart_get_tail+0x46>
	{
        return(EOF);
	}

	while(uart_rx_count(uart) < 1)
    574e:	80 e0       	ldi	r24, 0x00	; 0
    5750:	f0 df       	rcall	.-32     	; 0x5732 <uart_rx_count>
    5752:	18 16       	cp	r1, r24
    5754:	19 06       	cpc	r1, r25
    5756:	dc f7       	brge	.-10     	; 0x574e <uart_get_tail+0x4>
		;

    cli();
    5758:	f8 94       	cli
    c = uarts[uart].rx_buf[uarts[uart].rx_tail++];
    575a:	e0 91 f0 18 	lds	r30, 0x18F0	; 0x8018f0 <uarts+0x1>
    575e:	91 e0       	ldi	r25, 0x01	; 1
    5760:	9e 0f       	add	r25, r30
    5762:	90 93 f0 18 	sts	0x18F0, r25	; 0x8018f0 <uarts+0x1>
    5766:	f0 e0       	ldi	r31, 0x00	; 0
    5768:	e1 51       	subi	r30, 0x11	; 17
    576a:	f7 4e       	sbci	r31, 0xE7	; 231
    576c:	86 81       	ldd	r24, Z+6	; 0x06
    if (uarts[uart].rx_tail >= RX_BUF_SIZE)
    576e:	90 35       	cpi	r25, 0x50	; 80
    5770:	10 f0       	brcs	.+4      	; 0x5776 <uart_get_tail+0x2c>
        uarts[uart].rx_tail = 0;
    5772:	10 92 f0 18 	sts	0x18F0, r1	; 0x8018f0 <uarts+0x1>
    uarts[uart].rx_count--;
    5776:	20 91 f2 18 	lds	r18, 0x18F2	; 0x8018f2 <uarts+0x3>
    577a:	30 91 f3 18 	lds	r19, 0x18F3	; 0x8018f3 <uarts+0x4>
    577e:	21 50       	subi	r18, 0x01	; 1
    5780:	31 09       	sbc	r19, r1
    5782:	30 93 f3 18 	sts	0x18F3, r19	; 0x8018f3 <uarts+0x4>
    5786:	20 93 f2 18 	sts	0x18F2, r18	; 0x8018f2 <uarts+0x3>
    sei();
    578a:	78 94       	sei

    return (c & 0xff);
    578c:	90 e0       	ldi	r25, 0x00	; 0
    578e:	08 95       	ret
{
    uint8_t c;

    if (uart >= UARTS)
	{
        return(EOF);
    5790:	8f ef       	ldi	r24, 0xFF	; 255
    5792:	9f ef       	ldi	r25, 0xFF	; 255
        uarts[uart].rx_tail = 0;
    uarts[uart].rx_count--;
    sei();

    return (c & 0xff);
}
    5794:	08 95       	ret

00005796 <uart_rx_byte>:
///
/// @param[in] uart: uart number.
///
/// @return  Character.
int uart_rx_byte(uint8_t uart)
{
    5796:	d9 df       	rcall	.-78     	; 0x574a <uart_get_tail>
    5798:	99 27       	eor	r25, r25
    579a:	08 95       	ret

0000579c <uart_tx_byte>:
    579c:	61 11       	cpse	r22, r1
    579e:	09 c0       	rjmp	.+18     	; 0x57b2 <uart_tx_byte+0x16>
    57a0:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    57a4:	25 ff       	sbrs	r18, 5
    57a6:	fc cf       	rjmp	.-8      	; 0x57a0 <uart_tx_byte+0x4>
    57a8:	28 2f       	mov	r18, r24
    57aa:	2f 77       	andi	r18, 0x7F	; 127
    57ac:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    57b0:	08 95       	ret
    57b2:	61 30       	cpi	r22, 0x01	; 1
    57b4:	49 f4       	brne	.+18     	; 0x57c8 <uart_tx_byte+0x2c>
    57b6:	20 91 c8 00 	lds	r18, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    57ba:	25 ff       	sbrs	r18, 5
    57bc:	fc cf       	rjmp	.-8      	; 0x57b6 <uart_tx_byte+0x1a>
    57be:	28 2f       	mov	r18, r24
    57c0:	2f 77       	andi	r18, 0x7F	; 127
    57c2:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    57c6:	08 95       	ret
    57c8:	8f ef       	ldi	r24, 0xFF	; 255
    57ca:	9f ef       	ldi	r25, 0xFF	; 255
    57cc:	08 95       	ret

000057ce <uart_getchar>:
    57ce:	cf 93       	push	r28
    57d0:	81 11       	cpse	r24, r1
    57d2:	0f c0       	rjmp	.+30     	; 0x57f2 <uart_getchar+0x24>
    57d4:	e0 df       	rcall	.-64     	; 0x5796 <uart_rx_byte>
    57d6:	c8 2f       	mov	r28, r24
    57d8:	60 e0       	ldi	r22, 0x00	; 0
    57da:	90 e0       	ldi	r25, 0x00	; 0
    57dc:	df df       	rcall	.-66     	; 0x579c <uart_tx_byte>
    57de:	cd 30       	cpi	r28, 0x0D	; 13
    57e0:	29 f4       	brne	.+10     	; 0x57ec <uart_getchar+0x1e>
    57e2:	60 e0       	ldi	r22, 0x00	; 0
    57e4:	8a e0       	ldi	r24, 0x0A	; 10
    57e6:	90 e0       	ldi	r25, 0x00	; 0
    57e8:	d9 df       	rcall	.-78     	; 0x579c <uart_tx_byte>
    57ea:	ca e0       	ldi	r28, 0x0A	; 10
    57ec:	8c 2f       	mov	r24, r28
    57ee:	90 e0       	ldi	r25, 0x00	; 0
    57f0:	02 c0       	rjmp	.+4      	; 0x57f6 <uart_getchar+0x28>
    57f2:	8f ef       	ldi	r24, 0xFF	; 255
    57f4:	9f ef       	ldi	r25, 0xFF	; 255
    57f6:	cf 91       	pop	r28
    57f8:	08 95       	ret

000057fa <uart0_getchar>:
    57fa:	80 e0       	ldi	r24, 0x00	; 0
    57fc:	e8 cf       	rjmp	.-48     	; 0x57ce <uart_getchar>
    57fe:	08 95       	ret

00005800 <uart_putchar>:
    5800:	1f 93       	push	r17
    5802:	cf 93       	push	r28
    5804:	df 93       	push	r29
    5806:	ec 01       	movw	r28, r24
    5808:	16 2f       	mov	r17, r22
    580a:	c8 df       	rcall	.-112    	; 0x579c <uart_tx_byte>
    580c:	ca 30       	cpi	r28, 0x0A	; 10
    580e:	d1 05       	cpc	r29, r1
    5810:	21 f4       	brne	.+8      	; 0x581a <uart_putchar+0x1a>
    5812:	61 2f       	mov	r22, r17
    5814:	8d e0       	ldi	r24, 0x0D	; 13
    5816:	90 e0       	ldi	r25, 0x00	; 0
    5818:	c1 df       	rcall	.-126    	; 0x579c <uart_tx_byte>
    581a:	ce 01       	movw	r24, r28
    581c:	df 91       	pop	r29
    581e:	cf 91       	pop	r28
    5820:	1f 91       	pop	r17
    5822:	08 95       	ret

00005824 <uart0_putchar>:
    5824:	cf 93       	push	r28
    5826:	df 93       	push	r29
    5828:	ec 01       	movw	r28, r24
    582a:	60 e0       	ldi	r22, 0x00	; 0
    582c:	70 e0       	ldi	r23, 0x00	; 0
    582e:	e8 df       	rcall	.-48     	; 0x5800 <uart_putchar>
    5830:	ce 01       	movw	r24, r28
    5832:	df 91       	pop	r29
    5834:	cf 91       	pop	r28
    5836:	08 95       	ret

00005838 <uart_keyhit>:
    5838:	7c cf       	rjmp	.-264    	; 0x5732 <uart_rx_count>
    583a:	08 95       	ret

0000583c <SPI0_Speed>:
/// @brief  Return saved SPI mode as set by SPI0_Mode().
/// @return  saved mode.
int SPI0_Get_Mode( void )
{
    return(SPI0_Mode_value);
}
    583c:	cf 92       	push	r12
    583e:	df 92       	push	r13
    5840:	ef 92       	push	r14
    5842:	ff 92       	push	r15
    5844:	6b 01       	movw	r12, r22
    5846:	7c 01       	movw	r14, r24
    5848:	80 91 48 17 	lds	r24, 0x1748	; 0x801748 <SPI0_Speed_value>
    584c:	90 91 49 17 	lds	r25, 0x1749	; 0x801749 <SPI0_Speed_value+0x1>
    5850:	a0 91 4a 17 	lds	r26, 0x174A	; 0x80174a <SPI0_Speed_value+0x2>
    5854:	b0 91 4b 17 	lds	r27, 0x174B	; 0x80174b <SPI0_Speed_value+0x3>
    5858:	8c 15       	cp	r24, r12
    585a:	9d 05       	cpc	r25, r13
    585c:	ae 05       	cpc	r26, r14
    585e:	bf 05       	cpc	r27, r15
    5860:	09 f4       	brne	.+2      	; 0x5864 <SPI0_Speed+0x28>
    5862:	4e c0       	rjmp	.+156    	; 0x5900 <SPI0_Speed+0xc4>
    5864:	60 e0       	ldi	r22, 0x00	; 0
    5866:	7d e2       	ldi	r23, 0x2D	; 45
    5868:	81 e3       	ldi	r24, 0x31	; 49
    586a:	91 e0       	ldi	r25, 0x01	; 1
    586c:	a7 01       	movw	r20, r14
    586e:	96 01       	movw	r18, r12
    5870:	0e 94 5e e5 	call	0x1cabc	; 0x1cabc <__udivmodsi4>
    5874:	20 38       	cpi	r18, 0x80	; 128
    5876:	31 05       	cpc	r19, r1
    5878:	41 05       	cpc	r20, r1
    587a:	51 05       	cpc	r21, r1
    587c:	28 f4       	brcc	.+10     	; 0x5888 <SPI0_Speed+0x4c>
    587e:	20 34       	cpi	r18, 0x40	; 64
    5880:	31 05       	cpc	r19, r1
    5882:	41 05       	cpc	r20, r1
    5884:	51 05       	cpc	r21, r1
    5886:	30 f0       	brcs	.+12     	; 0x5894 <SPI0_Speed+0x58>
    5888:	8d b5       	in	r24, 0x2d	; 45
    588a:	8e 7f       	andi	r24, 0xFE	; 254
    588c:	8d bd       	out	0x2d, r24	; 45
    588e:	8c b5       	in	r24, 0x2c	; 44
    5890:	82 60       	ori	r24, 0x02	; 2
    5892:	1b c0       	rjmp	.+54     	; 0x58ca <SPI0_Speed+0x8e>
    5894:	8d b5       	in	r24, 0x2d	; 45
    5896:	20 32       	cpi	r18, 0x20	; 32
    5898:	31 05       	cpc	r19, r1
    589a:	41 05       	cpc	r20, r1
    589c:	51 05       	cpc	r21, r1
    589e:	28 f0       	brcs	.+10     	; 0x58aa <SPI0_Speed+0x6e>
    58a0:	81 60       	ori	r24, 0x01	; 1
    58a2:	8d bd       	out	0x2d, r24	; 45
    58a4:	8c b5       	in	r24, 0x2c	; 44
    58a6:	82 60       	ori	r24, 0x02	; 2
    58a8:	1f c0       	rjmp	.+62     	; 0x58e8 <SPI0_Speed+0xac>
    58aa:	20 31       	cpi	r18, 0x10	; 16
    58ac:	31 05       	cpc	r19, r1
    58ae:	41 05       	cpc	r20, r1
    58b0:	51 05       	cpc	r21, r1
    58b2:	10 f0       	brcs	.+4      	; 0x58b8 <SPI0_Speed+0x7c>
    58b4:	8e 7f       	andi	r24, 0xFE	; 254
    58b6:	06 c0       	rjmp	.+12     	; 0x58c4 <SPI0_Speed+0x88>
    58b8:	28 30       	cpi	r18, 0x08	; 8
    58ba:	31 05       	cpc	r19, r1
    58bc:	41 05       	cpc	r20, r1
    58be:	51 05       	cpc	r21, r1
    58c0:	40 f0       	brcs	.+16     	; 0x58d2 <SPI0_Speed+0x96>
    58c2:	81 60       	ori	r24, 0x01	; 1
    58c4:	8d bd       	out	0x2d, r24	; 45
    58c6:	8c b5       	in	r24, 0x2c	; 44
    58c8:	8d 7f       	andi	r24, 0xFD	; 253
    58ca:	8c bd       	out	0x2c, r24	; 44
    58cc:	8c b5       	in	r24, 0x2c	; 44
    58ce:	81 60       	ori	r24, 0x01	; 1
    58d0:	0e c0       	rjmp	.+28     	; 0x58ee <SPI0_Speed+0xb2>
    58d2:	24 30       	cpi	r18, 0x04	; 4
    58d4:	31 05       	cpc	r19, r1
    58d6:	41 05       	cpc	r20, r1
    58d8:	51 05       	cpc	r21, r1
    58da:	10 f0       	brcs	.+4      	; 0x58e0 <SPI0_Speed+0xa4>
    58dc:	8e 7f       	andi	r24, 0xFE	; 254
    58de:	01 c0       	rjmp	.+2      	; 0x58e2 <SPI0_Speed+0xa6>
    58e0:	81 60       	ori	r24, 0x01	; 1
    58e2:	8d bd       	out	0x2d, r24	; 45
    58e4:	8c b5       	in	r24, 0x2c	; 44
    58e6:	8d 7f       	andi	r24, 0xFD	; 253
    58e8:	8c bd       	out	0x2c, r24	; 44
    58ea:	8c b5       	in	r24, 0x2c	; 44
    58ec:	8e 7f       	andi	r24, 0xFE	; 254
    58ee:	8c bd       	out	0x2c, r24	; 44
    58f0:	c0 92 48 17 	sts	0x1748, r12	; 0x801748 <SPI0_Speed_value>
    58f4:	d0 92 49 17 	sts	0x1749, r13	; 0x801749 <SPI0_Speed_value+0x1>
    58f8:	e0 92 4a 17 	sts	0x174A, r14	; 0x80174a <SPI0_Speed_value+0x2>
    58fc:	f0 92 4b 17 	sts	0x174B, r15	; 0x80174b <SPI0_Speed_value+0x3>
    5900:	ff 90       	pop	r15
    5902:	ef 90       	pop	r14
    5904:	df 90       	pop	r13
    5906:	cf 90       	pop	r12
    5908:	08 95       	ret

0000590a <SPI0_Mode>:
    590a:	cf 93       	push	r28
    590c:	df 93       	push	r29
    590e:	ec 01       	movw	r28, r24
    5910:	81 30       	cpi	r24, 0x01	; 1
    5912:	91 05       	cpc	r25, r1
    5914:	71 f0       	breq	.+28     	; 0x5932 <SPI0_Mode+0x28>
    5916:	2c f4       	brge	.+10     	; 0x5922 <SPI0_Mode+0x18>
    5918:	89 2b       	or	r24, r25
    591a:	c1 f4       	brne	.+48     	; 0x594c <SPI0_Mode+0x42>
    591c:	8c b5       	in	r24, 0x2c	; 44
    591e:	87 7f       	andi	r24, 0xF7	; 247
    5920:	11 c0       	rjmp	.+34     	; 0x5944 <SPI0_Mode+0x3a>
    5922:	82 30       	cpi	r24, 0x02	; 2
    5924:	91 05       	cpc	r25, r1
    5926:	61 f0       	breq	.+24     	; 0x5940 <SPI0_Mode+0x36>
    5928:	03 97       	sbiw	r24, 0x03	; 3
    592a:	81 f4       	brne	.+32     	; 0x594c <SPI0_Mode+0x42>
    592c:	8c b5       	in	r24, 0x2c	; 44
    592e:	88 60       	ori	r24, 0x08	; 8
    5930:	02 c0       	rjmp	.+4      	; 0x5936 <SPI0_Mode+0x2c>
    5932:	8c b5       	in	r24, 0x2c	; 44
    5934:	87 7f       	andi	r24, 0xF7	; 247
    5936:	8c bd       	out	0x2c, r24	; 44
    5938:	8c b5       	in	r24, 0x2c	; 44
    593a:	84 60       	ori	r24, 0x04	; 4
    593c:	8c bd       	out	0x2c, r24	; 44
    593e:	14 c0       	rjmp	.+40     	; 0x5968 <SPI0_Mode+0x5e>
    5940:	8c b5       	in	r24, 0x2c	; 44
    5942:	88 60       	ori	r24, 0x08	; 8
    5944:	8c bd       	out	0x2c, r24	; 44
    5946:	8c b5       	in	r24, 0x2c	; 44
    5948:	8b 7f       	andi	r24, 0xFB	; 251
    594a:	f8 cf       	rjmp	.-16     	; 0x593c <SPI0_Mode+0x32>
    594c:	df 93       	push	r29
    594e:	cf 93       	push	r28
    5950:	8a e2       	ldi	r24, 0x2A	; 42
    5952:	94 e0       	ldi	r25, 0x04	; 4
    5954:	1f 92       	push	r1
    5956:	9f 93       	push	r25
    5958:	8f 93       	push	r24
    595a:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    595e:	0f 90       	pop	r0
    5960:	0f 90       	pop	r0
    5962:	0f 90       	pop	r0
    5964:	0f 90       	pop	r0
    5966:	0f 90       	pop	r0
    5968:	d0 93 47 17 	sts	0x1747, r29	; 0x801747 <__data_end+0x1>
    596c:	c0 93 46 17 	sts	0x1746, r28	; 0x801746 <__data_end>
    5970:	df 91       	pop	r29
    5972:	cf 91       	pop	r28
    5974:	08 95       	ret

00005976 <SPI0_TXRX_Byte>:
/// @param[in] Data: Data to send.
///
/// @return  Data received.
uint8_t SPI0_TXRX_Byte(uint8_t Data)
{
    SPDR = Data;                                  // Transmit
    5976:	8e bd       	out	0x2e, r24	; 46

    while( !BIT_TST(SPSR,SPIF) )                  // Wait for send
    5978:	0d b4       	in	r0, 0x2d	; 45
    597a:	07 fe       	sbrs	r0, 7
    597c:	fd cf       	rjmp	.-6      	; 0x5978 <SPI0_TXRX_Byte+0x2>
        ;

    return (SPDR);                                // Received Data
    597e:	8e b5       	in	r24, 0x2e	; 46
}
    5980:	08 95       	ret

00005982 <SPI0_Init>:

///@brief Initialize SPI0 device.
/// See Atmel App Note AVR151
/// Set default speed, IO pins and mode.
void SPI0_Init(uint32_t speed)
{
    5982:	cf 92       	push	r12
    5984:	df 92       	push	r13
    5986:	ef 92       	push	r14
    5988:	ff 92       	push	r15
    598a:	cf 93       	push	r28
    598c:	df 93       	push	r29
    598e:	1f 92       	push	r1
    5990:	cd b7       	in	r28, 0x3d	; 61
    5992:	de b7       	in	r29, 0x3e	; 62
    5994:	6b 01       	movw	r12, r22
    5996:	7c 01       	movw	r14, r24
	printf("Port B DDR:   0x%02x\n", (int) GPIO_PORT_DDR_RD(GPIO_B));
	printf("Port B LATCH: 0x%02x\n", (int) GPIO_PORT_LATCH_RD(GPIO_B));
	printf("Port B PINS:  0x%02x\n", (int) GPIO_PORT_LATCH_RD(GPIO_B));
#endif

	SPCR = 0;				// Clear SPCR in case we are not called after RESET
    5998:	1c bc       	out	0x2c, r1	; 44

    GPIO_PIN_HI(SCK);       // SCK Output
    599a:	2f 9a       	sbi	0x05, 7	; 5
    599c:	27 9a       	sbi	0x04, 7	; 4
    GPIO_PIN_HI(MOSI);                                  // MOSI Output
    599e:	2d 9a       	sbi	0x05, 5	; 5
    59a0:	25 9a       	sbi	0x04, 5	; 4
    GPIO_PIN_FLOAT(MISO);   // MISO Input, no pull-up
    59a2:	26 98       	cbi	0x04, 6	; 4

	// Warning *** MSTR MUST be set BEFORE SPE!!!! *** otherwise SS will NOT behave as an output
	GPIO_PIN_LOW(SS); 		// SS Output must be HI prevent slave mode from getting set while initializing
    59a4:	2c 98       	cbi	0x05, 4	; 5
    59a6:	24 9a       	sbi	0x04, 4	; 4
    BIT_SET(SPCR, MSTR);    // Master Mode
    59a8:	8c b5       	in	r24, 0x2c	; 44
    59aa:	80 61       	ori	r24, 0x10	; 16
    59ac:	8c bd       	out	0x2c, r24	; 44
    BIT_SET(SPCR, SPE);     // Enable SPI
    59ae:	8c b5       	in	r24, 0x2c	; 44
    59b0:	80 64       	ori	r24, 0x40	; 64
    59b2:	8c bd       	out	0x2c, r24	; 44

	// SPI Clear any pending interrupt flags
	D = SPSR;
    59b4:	8d b5       	in	r24, 0x2d	; 45
    59b6:	89 83       	std	Y+1, r24	; 0x01
	D = SPDR;
    59b8:	8e b5       	in	r24, 0x2e	; 46
    59ba:	89 83       	std	Y+1, r24	; 0x01

	/// Set SPI clock mode 0 
    ///  SPI Mode     CPOL    CPHA            Sample
    ///  0    0       0       Leading (Rising)   Edge
    SPI0_Mode(0);
    59bc:	80 e0       	ldi	r24, 0x00	; 0
    59be:	90 e0       	ldi	r25, 0x00	; 0
    59c0:	a4 df       	rcall	.-184    	; 0x590a <SPI0_Mode>

	// Set SPI clock speed
    SPI0_Speed(speed);
    59c2:	c7 01       	movw	r24, r14
    59c4:	b6 01       	movw	r22, r12

    SPI0_TXRX_Byte(0xff);	// Send dummy 0xFF
    59c6:	3a df       	rcall	.-396    	; 0x583c <SPI0_Speed>
    59c8:	8f ef       	ldi	r24, 0xFF	; 255
    59ca:	d5 df       	rcall	.-86     	; 0x5976 <SPI0_TXRX_Byte>
	SPI0_Init_state = 1;

}
    59cc:	0f 90       	pop	r0
    59ce:	df 91       	pop	r29
    59d0:	cf 91       	pop	r28
    59d2:	ff 90       	pop	r15
    59d4:	ef 90       	pop	r14
    59d6:	df 90       	pop	r13
    59d8:	cf 90       	pop	r12
    59da:	08 95       	ret

000059dc <SPI0_TX>:
/// @brief HSPI write using FIFO
/// @param[in] *data: transmit buffer
/// @param[in] count: number of bytes to write
/// @return  void
void SPI0_TX(uint8_t *data, int count)
{
    59dc:	0f 93       	push	r16
    59de:	1f 93       	push	r17
    59e0:	cf 93       	push	r28
    59e2:	df 93       	push	r29
    59e4:	8c 01       	movw	r16, r24
    59e6:	eb 01       	movw	r28, r22

    while(count > 0)
    59e8:	1c 16       	cp	r1, r28
    59ea:	1d 06       	cpc	r1, r29
    59ec:	34 f4       	brge	.+12     	; 0x59fa <SPI0_TX+0x1e>
    {
		SPI0_TXRX_Byte(*data);
    59ee:	f8 01       	movw	r30, r16
    59f0:	81 91       	ld	r24, Z+
    59f2:	8f 01       	movw	r16, r30
    59f4:	c0 df       	rcall	.-128    	; 0x5976 <SPI0_TXRX_Byte>
		++data;
		--count;
    59f6:	21 97       	sbiw	r28, 0x01	; 1
    59f8:	f7 cf       	rjmp	.-18     	; 0x59e8 <SPI0_TX+0xc>
	}
}
    59fa:	df 91       	pop	r29
    59fc:	cf 91       	pop	r28
    59fe:	1f 91       	pop	r17
    5a00:	0f 91       	pop	r16
    5a02:	08 95       	ret

00005a04 <SPI0_TXRX>:
/// @param[in] *data: transmit / receive buffer
/// @param[in] count: number of bytes to write / read
/// @return  void

void SPI0_TXRX(uint8_t *data, int count)
{
    5a04:	0f 93       	push	r16
    5a06:	1f 93       	push	r17
    5a08:	cf 93       	push	r28
    5a0a:	df 93       	push	r29
    5a0c:	8c 01       	movw	r16, r24
    5a0e:	eb 01       	movw	r28, r22

    while(count > 0)
    5a10:	1c 16       	cp	r1, r28
    5a12:	1d 06       	cpc	r1, r29
    5a14:	44 f4       	brge	.+16     	; 0x5a26 <SPI0_TXRX+0x22>
    {
		*data = SPI0_TXRX_Byte(*data);
    5a16:	f8 01       	movw	r30, r16
    5a18:	80 81       	ld	r24, Z
    5a1a:	ad df       	rcall	.-166    	; 0x5976 <SPI0_TXRX_Byte>
    5a1c:	f8 01       	movw	r30, r16
    5a1e:	81 93       	st	Z+, r24
    5a20:	8f 01       	movw	r16, r30
		++data;
		--count;
    5a22:	21 97       	sbiw	r28, 0x01	; 1
    5a24:	f5 cf       	rjmp	.-22     	; 0x5a10 <SPI0_TXRX+0xc>
	}
}
    5a26:	df 91       	pop	r29
    5a28:	cf 91       	pop	r28
    5a2a:	1f 91       	pop	r17
    5a2c:	0f 91       	pop	r16
    5a2e:	08 95       	ret

00005a30 <SPI0_RX>:
/// @brief HSPI read using FIFO
/// @param[in] *data: receive buffer
/// @param[in] count: number of bytes to read
/// @return  void
void SPI0_RX(uint8_t *data, int count)
{
    5a30:	0f 93       	push	r16
    5a32:	1f 93       	push	r17
    5a34:	cf 93       	push	r28
    5a36:	df 93       	push	r29
    5a38:	8c 01       	movw	r16, r24
    5a3a:	eb 01       	movw	r28, r22

    while(count > 0)
    5a3c:	1c 16       	cp	r1, r28
    5a3e:	1d 06       	cpc	r1, r29
    5a40:	3c f4       	brge	.+14     	; 0x5a50 <SPI0_RX+0x20>
    {
		*data = SPI0_TXRX_Byte(0xff);
    5a42:	8f ef       	ldi	r24, 0xFF	; 255
    5a44:	98 df       	rcall	.-208    	; 0x5976 <SPI0_TXRX_Byte>
    5a46:	f8 01       	movw	r30, r16
    5a48:	81 93       	st	Z+, r24
    5a4a:	8f 01       	movw	r16, r30
		++data;
		--count;
    5a4c:	21 97       	sbiw	r28, 0x01	; 1
    5a4e:	f6 cf       	rjmp	.-20     	; 0x5a3c <SPI0_RX+0xc>
	}
}
    5a50:	df 91       	pop	r29
    5a52:	cf 91       	pop	r28
    5a54:	1f 91       	pop	r17
    5a56:	0f 91       	pop	r16
    5a58:	08 95       	ret

00005a5a <TWI_Init>:
///
///@return void.
void TWI_Init(const uint8_t Prescale, const uint8_t BitLength)
{

    GPIO_PIN_LATCH_HI(SCL);                   // Pull Up on
    5a5a:	40 9a       	sbi	0x08, 0	; 8
    GPIO_PIN_LATCH_HI(SDA);                   // Pull Up on
    5a5c:	41 9a       	sbi	0x08, 1	; 8

    BIT_SET(TWCR,TWEN);
    5a5e:	ec eb       	ldi	r30, 0xBC	; 188
    5a60:	f0 e0       	ldi	r31, 0x00	; 0
    5a62:	90 81       	ld	r25, Z
    5a64:	94 60       	ori	r25, 0x04	; 4
    5a66:	90 83       	st	Z, r25

    TWSR  = Prescale;
    5a68:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    TWBR  = BitLength;
    5a6c:	60 93 b8 00 	sts	0x00B8, r22	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    5a70:	08 95       	ret

00005a72 <TWI_StopTransmission>:


/** @brief Sends a TWI STOP onto the TWI bus, terminating communication with the currently addressed device. */
inline void TWI_StopTransmission(void)
{
    TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    5a72:	84 e9       	ldi	r24, 0x94	; 148
    5a74:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5a78:	08 95       	ret

00005a7a <TWI_StartTransmission>:
    for (;;)
    {
        bool     BusCaptured = false;
        uint16_t TimeoutRemaining;

        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    5a7a:	94 ea       	ldi	r25, 0xA4	; 164
    5a7c:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5a80:	24 e6       	ldi	r18, 0x64	; 100
    5a82:	62 9f       	mul	r22, r18
    5a84:	b0 01       	movw	r22, r0
    5a86:	11 24       	eor	r1, r1
    5a88:	61 50       	subi	r22, 0x01	; 1
    5a8a:	71 09       	sbc	r23, r1

        TimeoutRemaining = (TimeoutMS * 100);
        while (TimeoutRemaining-- && !(BusCaptured))
    5a8c:	9b 01       	movw	r18, r22
///@return TWI error value on fail.
uint8_t TWI_StartTransmission(const uint8_t SlaveAddress, const uint8_t TimeoutMS)
{
    for (;;)
    {
        bool     BusCaptured = false;
    5a8e:	40 e0       	ldi	r20, 0x00	; 0
    5a90:	50 e0       	ldi	r21, 0x00	; 0
                    case TW_START:
                    case TW_REP_START:
                        BusCaptured = true;
                        break;
                    case TW_MT_ARB_LOST:
                        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    5a92:	e4 ea       	ldi	r30, 0xA4	; 164
        uint16_t TimeoutRemaining;

        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));

        TimeoutRemaining = (TimeoutMS * 100);
        while (TimeoutRemaining-- && !(BusCaptured))
    5a94:	2f 3f       	cpi	r18, 0xFF	; 255
    5a96:	9f ef       	ldi	r25, 0xFF	; 255
    5a98:	39 07       	cpc	r19, r25
    5a9a:	41 f1       	breq	.+80     	; 0x5aec <TWI_StartTransmission+0x72>
    5a9c:	41 15       	cp	r20, r1
    5a9e:	51 05       	cpc	r21, r1
    5aa0:	f1 f4       	brne	.+60     	; 0x5ade <TWI_StartTransmission+0x64>
        {
            if (TWCR & (1 << TWINT))
    5aa2:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5aa6:	97 ff       	sbrs	r25, 7
    5aa8:	13 c0       	rjmp	.+38     	; 0x5ad0 <TWI_StartTransmission+0x56>
            {
                switch (TWSR & TW_STATUS_MASK)
    5aaa:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5aae:	98 7f       	andi	r25, 0xF8	; 248
    5ab0:	90 31       	cpi	r25, 0x10	; 16
    5ab2:	61 f0       	breq	.+24     	; 0x5acc <TWI_StartTransmission+0x52>
    5ab4:	98 33       	cpi	r25, 0x38	; 56
    5ab6:	39 f0       	breq	.+14     	; 0x5ac6 <TWI_StartTransmission+0x4c>
    5ab8:	98 30       	cpi	r25, 0x08	; 8
    5aba:	41 f0       	breq	.+16     	; 0x5acc <TWI_StartTransmission+0x52>
                        break;
                    case TW_MT_ARB_LOST:
                        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
                        continue;
                    default:
                        TWCR = (1 << TWEN);
    5abc:	84 e0       	ldi	r24, 0x04	; 4
    5abe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
                        return TWI_ERROR_BusFault;
    5ac2:	81 e0       	ldi	r24, 0x01	; 1
    5ac4:	08 95       	ret
                    case TW_START:
                    case TW_REP_START:
                        BusCaptured = true;
                        break;
                    case TW_MT_ARB_LOST:
                        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    5ac6:	e0 93 bc 00 	sts	0x00BC, r30	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
                        continue;
    5aca:	06 c0       	rjmp	.+12     	; 0x5ad8 <TWI_StartTransmission+0x5e>
            {
                switch (TWSR & TW_STATUS_MASK)
                {
                    case TW_START:
                    case TW_REP_START:
                        BusCaptured = true;
    5acc:	41 e0       	ldi	r20, 0x01	; 1
    5ace:	50 e0       	ldi	r21, 0x00	; 0
    5ad0:	92 e4       	ldi	r25, 0x42	; 66
    5ad2:	9a 95       	dec	r25
    5ad4:	f1 f7       	brne	.-4      	; 0x5ad2 <TWI_StartTransmission+0x58>
    5ad6:	00 c0       	rjmp	.+0      	; 0x5ad8 <TWI_StartTransmission+0x5e>
    5ad8:	21 50       	subi	r18, 0x01	; 1
    5ada:	31 09       	sbc	r19, r1
    5adc:	db cf       	rjmp	.-74     	; 0x5a94 <TWI_StartTransmission+0x1a>
            }

            _delay_us(10);
        }

        if (!(TimeoutRemaining))
    5ade:	23 2b       	or	r18, r19
    5ae0:	29 f4       	brne	.+10     	; 0x5aec <TWI_StartTransmission+0x72>
        {
            TWCR = (1 << TWEN);
    5ae2:	84 e0       	ldi	r24, 0x04	; 4
    5ae4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
            return TWI_ERROR_BusCaptureTimeout;
    5ae8:	82 e0       	ldi	r24, 0x02	; 2
    5aea:	08 95       	ret
        }

        TWDR = SlaveAddress;
    5aec:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
        TWCR = ((1 << TWINT) | (1 << TWEN));
    5af0:	84 e8       	ldi	r24, 0x84	; 132
    5af2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

        TimeoutRemaining = (TimeoutMS * 100);
        while (TimeoutRemaining--)
    5af6:	6f 3f       	cpi	r22, 0xFF	; 255
    5af8:	8f ef       	ldi	r24, 0xFF	; 255
    5afa:	78 07       	cpc	r23, r24
    5afc:	71 f0       	breq	.+28     	; 0x5b1a <TWI_StartTransmission+0xa0>
        {
            if (TWCR & (1 << TWINT))
    5afe:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5b02:	cb 01       	movw	r24, r22
    5b04:	01 97       	sbiw	r24, 0x01	; 1
    5b06:	27 fd       	sbrc	r18, 7
    5b08:	06 c0       	rjmp	.+12     	; 0x5b16 <TWI_StartTransmission+0x9c>
    5b0a:	22 e4       	ldi	r18, 0x42	; 66
    5b0c:	2a 95       	dec	r18
    5b0e:	f1 f7       	brne	.-4      	; 0x5b0c <TWI_StartTransmission+0x92>
    5b10:	00 c0       	rjmp	.+0      	; 0x5b12 <TWI_StartTransmission+0x98>
    5b12:	bc 01       	movw	r22, r24
    5b14:	f0 cf       	rjmp	.-32     	; 0x5af6 <TWI_StartTransmission+0x7c>
                break;

            _delay_us(10);
        }

        if (!(TimeoutRemaining))
    5b16:	67 2b       	or	r22, r23
    5b18:	61 f0       	breq	.+24     	; 0x5b32 <TWI_StartTransmission+0xb8>
            return TWI_ERROR_SlaveResponseTimeout;

        switch (TWSR & TW_STATUS_MASK)
    5b1a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5b1e:	88 7f       	andi	r24, 0xF8	; 248
    5b20:	88 31       	cpi	r24, 0x18	; 24
    5b22:	49 f0       	breq	.+18     	; 0x5b36 <TWI_StartTransmission+0xbc>
    5b24:	80 34       	cpi	r24, 0x40	; 64
    5b26:	39 f0       	breq	.+14     	; 0x5b36 <TWI_StartTransmission+0xbc>
        {
            case TW_MT_SLA_ACK:
            case TW_MR_SLA_ACK:
                return TWI_ERROR_NoError;
            default:
                TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    5b28:	84 e9       	ldi	r24, 0x94	; 148
    5b2a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
                return TWI_ERROR_SlaveNotReady;
    5b2e:	84 e0       	ldi	r24, 0x04	; 4
    5b30:	08 95       	ret

            _delay_us(10);
        }

        if (!(TimeoutRemaining))
            return TWI_ERROR_SlaveResponseTimeout;
    5b32:	83 e0       	ldi	r24, 0x03	; 3
    5b34:	08 95       	ret

        switch (TWSR & TW_STATUS_MASK)
        {
            case TW_MT_SLA_ACK:
            case TW_MR_SLA_ACK:
                return TWI_ERROR_NoError;
    5b36:	80 e0       	ldi	r24, 0x00	; 0
            default:
                TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
                return TWI_ERROR_SlaveNotReady;
        }
    }
}
    5b38:	08 95       	ret

00005b3a <TWI_SendByte>:
///
///@return 1 if Acknowledge.
///@return 0 on fail.
bool TWI_SendByte(const uint8_t Byte)
{
    TWDR = Byte;
    5b3a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    TWCR = ((1 << TWINT) | (1 << TWEN));
    5b3e:	84 e8       	ldi	r24, 0x84	; 132
    5b40:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    while (!(TWCR & (1 << TWINT)));
    5b44:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5b48:	87 ff       	sbrs	r24, 7
    5b4a:	fc cf       	rjmp	.-8      	; 0x5b44 <TWI_SendByte+0xa>

    return ((TWSR & TW_STATUS_MASK) == TW_MT_DATA_ACK);
    5b4c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5b50:	98 7f       	andi	r25, 0xF8	; 248
    5b52:	21 e0       	ldi	r18, 0x01	; 1
    5b54:	30 e0       	ldi	r19, 0x00	; 0
    5b56:	98 32       	cpi	r25, 0x28	; 40
    5b58:	11 f0       	breq	.+4      	; 0x5b5e <TWI_SendByte+0x24>
    5b5a:	20 e0       	ldi	r18, 0x00	; 0
    5b5c:	30 e0       	ldi	r19, 0x00	; 0
}
    5b5e:	c9 01       	movw	r24, r18
    5b60:	08 95       	ret

00005b62 <TWI_ReceiveByte>:


bool TWI_ReceiveByte(uint8_t* const Byte,
const bool LastByte)
{
    5b62:	fc 01       	movw	r30, r24
    uint8_t TWCRMask;

    if (LastByte)
    5b64:	61 15       	cp	r22, r1
    5b66:	71 05       	cpc	r23, r1
    5b68:	11 f4       	brne	.+4      	; 0x5b6e <TWI_ReceiveByte+0xc>
        TWCRMask = ((1 << TWINT) | (1 << TWEN));
    else
        TWCRMask = ((1 << TWINT) | (1 << TWEN) | (1 << TWEA));
    5b6a:	94 ec       	ldi	r25, 0xC4	; 196
    5b6c:	01 c0       	rjmp	.+2      	; 0x5b70 <TWI_ReceiveByte+0xe>
const bool LastByte)
{
    uint8_t TWCRMask;

    if (LastByte)
        TWCRMask = ((1 << TWINT) | (1 << TWEN));
    5b6e:	94 e8       	ldi	r25, 0x84	; 132
    else
        TWCRMask = ((1 << TWINT) | (1 << TWEN) | (1 << TWEA));

    TWCR = TWCRMask;
    5b70:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    while (!BIT_TST(TWCR, TWINT))
    5b74:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5b78:	87 ff       	sbrs	r24, 7
    5b7a:	fc cf       	rjmp	.-8      	; 0x5b74 <TWI_ReceiveByte+0x12>
        ;
    *Byte = TWDR;
    5b7c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5b80:	80 83       	st	Z, r24

    uint8_t Status = (TWSR & TW_STATUS_MASK);
    5b82:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5b86:	28 7f       	andi	r18, 0xF8	; 248

    return ((LastByte) ? (Status == TW_MR_DATA_NACK) : (Status == TW_MR_DATA_ACK));
    5b88:	81 e0       	ldi	r24, 0x01	; 1
    5b8a:	90 e0       	ldi	r25, 0x00	; 0
    5b8c:	67 2b       	or	r22, r23
    5b8e:	19 f0       	breq	.+6      	; 0x5b96 <TWI_ReceiveByte+0x34>
    5b90:	28 35       	cpi	r18, 0x58	; 88
    5b92:	19 f4       	brne	.+6      	; 0x5b9a <TWI_ReceiveByte+0x38>
    5b94:	03 c0       	rjmp	.+6      	; 0x5b9c <TWI_ReceiveByte+0x3a>
    5b96:	20 35       	cpi	r18, 0x50	; 80
    5b98:	09 f0       	breq	.+2      	; 0x5b9c <TWI_ReceiveByte+0x3a>
    5b9a:	80 e0       	ldi	r24, 0x00	; 0
}
    5b9c:	08 95       	ret

00005b9e <TWI_ReadPacket>:
const uint8_t TimeoutMS,
const uint8_t* InternalAddress,
uint8_t InternalAddressLen,
uint8_t* Buffer,
uint8_t Length)
{
    5b9e:	a0 e0       	ldi	r26, 0x00	; 0
    5ba0:	b0 e0       	ldi	r27, 0x00	; 0
    5ba2:	e5 ed       	ldi	r30, 0xD5	; 213
    5ba4:	fd e2       	ldi	r31, 0x2D	; 45
    5ba6:	0c 94 e7 e5 	jmp	0x1cbce	; 0x1cbce <__prologue_saves__+0xe>
    5baa:	f8 2e       	mov	r15, r24
    5bac:	b6 2e       	mov	r11, r22
    5bae:	94 2e       	mov	r9, r20
    5bb0:	a5 2e       	mov	r10, r21
    5bb2:	c2 2f       	mov	r28, r18
    uint8_t ErrorCode;

    if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_WRITE,
    5bb4:	8e 7f       	andi	r24, 0xFE	; 254
    5bb6:	61 df       	rcall	.-318    	; 0x5a7a <TWI_StartTransmission>
    5bb8:	d8 2f       	mov	r29, r24
    5bba:	81 11       	cpse	r24, r1
    5bbc:	2b c0       	rjmp	.+86     	; 0x5c14 <TWI_ReadPacket+0x76>
    5bbe:	c9 2c       	mov	r12, r9
    5bc0:	da 2c       	mov	r13, r10
        TimeoutMS)) == TWI_ERROR_NoError)
    {
        while (InternalAddressLen--)
    5bc2:	cc 23       	and	r28, r28
    5bc4:	39 f0       	breq	.+14     	; 0x5bd4 <TWI_ReadPacket+0x36>
        {
            if (!(TWI_SendByte(*(InternalAddress++))))
    5bc6:	f6 01       	movw	r30, r12
    5bc8:	81 91       	ld	r24, Z+
    5bca:	6f 01       	movw	r12, r30
    5bcc:	b6 df       	rcall	.-148    	; 0x5b3a <TWI_SendByte>
    5bce:	c1 50       	subi	r28, 0x01	; 1
    5bd0:	89 2b       	or	r24, r25
    5bd2:	b9 f7       	brne	.-18     	; 0x5bc2 <TWI_ReadPacket+0x24>
                ErrorCode = TWI_ERROR_SlaveNAK;
                break;
            }
        }

        if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_READ,
    5bd4:	6b 2d       	mov	r22, r11
    5bd6:	8f 2d       	mov	r24, r15
    5bd8:	81 60       	ori	r24, 0x01	; 1
    5bda:	4f df       	rcall	.-354    	; 0x5a7a <TWI_StartTransmission>
    5bdc:	d8 2f       	mov	r29, r24
    5bde:	81 11       	cpse	r24, r1
    5be0:	19 c0       	rjmp	.+50     	; 0x5c14 <TWI_ReadPacket+0x76>
    5be2:	cf ef       	ldi	r28, 0xFF	; 255
    5be4:	ce 0d       	add	r28, r14
            TimeoutMS)) == TWI_ERROR_NoError)
        {
            while (Length--)
    5be6:	cf 3f       	cpi	r28, 0xFF	; 255
    5be8:	91 f0       	breq	.+36     	; 0x5c0e <TWI_ReadPacket+0x70>
            {
                if (!(TWI_ReceiveByte(Buffer++, (Length == 0))))
    5bea:	78 01       	movw	r14, r16
    5bec:	ff ef       	ldi	r31, 0xFF	; 255
    5bee:	ef 1a       	sub	r14, r31
    5bf0:	ff 0a       	sbc	r15, r31
    5bf2:	61 e0       	ldi	r22, 0x01	; 1
    5bf4:	70 e0       	ldi	r23, 0x00	; 0
    5bf6:	cc 23       	and	r28, r28
    5bf8:	11 f0       	breq	.+4      	; 0x5bfe <TWI_ReadPacket+0x60>
    5bfa:	60 e0       	ldi	r22, 0x00	; 0
    5bfc:	70 e0       	ldi	r23, 0x00	; 0
    5bfe:	c8 01       	movw	r24, r16
    5c00:	b0 df       	rcall	.-160    	; 0x5b62 <TWI_ReceiveByte>
    5c02:	c1 50       	subi	r28, 0x01	; 1
    5c04:	89 2b       	or	r24, r25
    5c06:	11 f0       	breq	.+4      	; 0x5c0c <TWI_ReadPacket+0x6e>
    5c08:	87 01       	movw	r16, r14
    5c0a:	ed cf       	rjmp	.-38     	; 0x5be6 <TWI_ReadPacket+0x48>
                {
                    ErrorCode = TWI_ERROR_SlaveNAK;
    5c0c:	d5 e0       	ldi	r29, 0x05	; 5


/** @brief Sends a TWI STOP onto the TWI bus, terminating communication with the currently addressed device. */
inline void TWI_StopTransmission(void)
{
    TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    5c0e:	84 e9       	ldi	r24, 0x94	; 148
    5c10:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
            TWI_StopTransmission();
        }
    }

    return ErrorCode;
}
    5c14:	8d 2f       	mov	r24, r29
    5c16:	cd b7       	in	r28, 0x3d	; 61
    5c18:	de b7       	in	r29, 0x3e	; 62
    5c1a:	eb e0       	ldi	r30, 0x0B	; 11
    5c1c:	0c 94 03 e6 	jmp	0x1cc06	; 0x1cc06 <__epilogue_restores__+0xe>

00005c20 <TWI_WritePacket>:
const uint8_t TimeoutMS,
const uint8_t* InternalAddress,
uint8_t InternalAddressLen,
const uint8_t* Buffer,
uint8_t Length)
{
    5c20:	a0 e0       	ldi	r26, 0x00	; 0
    5c22:	b0 e0       	ldi	r27, 0x00	; 0
    5c24:	e6 e1       	ldi	r30, 0x16	; 22
    5c26:	fe e2       	ldi	r31, 0x2E	; 46
    5c28:	0c 94 e9 e5 	jmp	0x1cbd2	; 0x1cbd2 <__prologue_saves__+0x12>
    5c2c:	b4 2e       	mov	r11, r20
    5c2e:	f5 2e       	mov	r15, r21
    5c30:	c2 2f       	mov	r28, r18
    uint8_t ErrorCode;

    if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_WRITE,
    5c32:	8e 7f       	andi	r24, 0xFE	; 254
    5c34:	22 df       	rcall	.-444    	; 0x5a7a <TWI_StartTransmission>
    5c36:	d8 2f       	mov	r29, r24
    5c38:	81 11       	cpse	r24, r1
    5c3a:	1a c0       	rjmp	.+52     	; 0x5c70 <TWI_WritePacket+0x50>
    5c3c:	cb 2c       	mov	r12, r11
    5c3e:	df 2c       	mov	r13, r15
        TimeoutMS)) == TWI_ERROR_NoError)
    {
        while (InternalAddressLen--)
    5c40:	cc 23       	and	r28, r28
    5c42:	41 f0       	breq	.+16     	; 0x5c54 <TWI_WritePacket+0x34>
        {
            if (!(TWI_SendByte(*(InternalAddress++))))
    5c44:	f6 01       	movw	r30, r12
    5c46:	81 91       	ld	r24, Z+
    5c48:	6f 01       	movw	r12, r30
    5c4a:	77 df       	rcall	.-274    	; 0x5b3a <TWI_SendByte>
    5c4c:	c1 50       	subi	r28, 0x01	; 1
    5c4e:	89 2b       	or	r24, r25
    5c50:	b9 f7       	brne	.-18     	; 0x5c40 <TWI_WritePacket+0x20>
            {
                ErrorCode = TWI_ERROR_SlaveNAK;
    5c52:	d5 e0       	ldi	r29, 0x05	; 5
    5c54:	68 01       	movw	r12, r16
                break;
            }
        }

        while (Length--)
    5c56:	ee 20       	and	r14, r14
    5c58:	41 f0       	breq	.+16     	; 0x5c6a <TWI_WritePacket+0x4a>
        {
            if (!(TWI_SendByte(*(Buffer++))))
    5c5a:	f6 01       	movw	r30, r12
    5c5c:	81 91       	ld	r24, Z+
    5c5e:	6f 01       	movw	r12, r30
    5c60:	6c df       	rcall	.-296    	; 0x5b3a <TWI_SendByte>
    5c62:	ea 94       	dec	r14
    5c64:	89 2b       	or	r24, r25
    5c66:	b9 f7       	brne	.-18     	; 0x5c56 <TWI_WritePacket+0x36>
            {
                ErrorCode = TWI_ERROR_SlaveNAK;
    5c68:	d5 e0       	ldi	r29, 0x05	; 5


/** @brief Sends a TWI STOP onto the TWI bus, terminating communication with the currently addressed device. */
inline void TWI_StopTransmission(void)
{
    TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    5c6a:	84 e9       	ldi	r24, 0x94	; 148
    5c6c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

        TWI_StopTransmission();
    }

    return ErrorCode;
}
    5c70:	8d 2f       	mov	r24, r29
    5c72:	cd b7       	in	r28, 0x3d	; 61
    5c74:	de b7       	in	r29, 0x3e	; 62
    5c76:	e9 e0       	ldi	r30, 0x09	; 9
    5c78:	0c 94 05 e6 	jmp	0x1cc0a	; 0x1cc0a <__epilogue_restores__+0x12>

00005c7c <__vector_26>:
  }

  SREG = sreg;
}

ISR(TWI_vect, ISR_BLOCK) {
    5c7c:	1f 92       	push	r1
    5c7e:	0f 92       	push	r0
    5c80:	0f b6       	in	r0, 0x3f	; 63
    5c82:	0f 92       	push	r0
    5c84:	11 24       	eor	r1, r1
    5c86:	0b b6       	in	r0, 0x3b	; 59
    5c88:	0f 92       	push	r0
    5c8a:	2f 93       	push	r18
    5c8c:	3f 93       	push	r19
    5c8e:	4f 93       	push	r20
    5c90:	5f 93       	push	r21
    5c92:	6f 93       	push	r22
    5c94:	7f 93       	push	r23
    5c96:	8f 93       	push	r24
    5c98:	9f 93       	push	r25
    5c9a:	af 93       	push	r26
    5c9c:	bf 93       	push	r27
    5c9e:	ef 93       	push	r30
    5ca0:	ff 93       	push	r31

  uint8_t status = TW_STATUS;
    5ca2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5ca6:	88 7f       	andi	r24, 0xF8	; 248

  /* This interrupt should only fire if there is something to do. */
  assert(op != NULL);
    5ca8:	e0 91 4c 17 	lds	r30, 0x174C	; 0x80174c <op>
    5cac:	f0 91 4d 17 	lds	r31, 0x174D	; 0x80174d <op+0x1>
    5cb0:	30 97       	sbiw	r30, 0x00	; 0
    5cb2:	09 f4       	brne	.+2      	; 0x5cb6 <__vector_26+0x3a>
    5cb4:	6f c0       	rjmp	.+222    	; 0x5d94 <__vector_26+0x118>

  if ((op->address & _BV(0)) == TW_READ) {
    5cb6:	90 81       	ld	r25, Z
    5cb8:	90 ff       	sbrs	r25, 0
    5cba:	39 c0       	rjmp	.+114    	; 0x5d2e <__vector_26+0xb2>
    /* Master Receiver mode. */
    switch (status) {
    5cbc:	80 34       	cpi	r24, 0x40	; 64
    5cbe:	81 f0       	breq	.+32     	; 0x5ce0 <__vector_26+0x64>
    5cc0:	38 f4       	brcc	.+14     	; 0x5cd0 <__vector_26+0x54>
    5cc2:	80 31       	cpi	r24, 0x10	; 16
    5cc4:	09 f4       	brne	.+2      	; 0x5cc8 <__vector_26+0x4c>
    5cc6:	45 c0       	rjmp	.+138    	; 0x5d52 <__vector_26+0xd6>
    5cc8:	88 33       	cpi	r24, 0x38	; 56
    5cca:	09 f4       	brne	.+2      	; 0x5cce <__vector_26+0x52>
    5ccc:	94 c0       	rjmp	.+296    	; 0x5df6 <__vector_26+0x17a>
    5cce:	36 c0       	rjmp	.+108    	; 0x5d3c <__vector_26+0xc0>
    5cd0:	80 35       	cpi	r24, 0x50	; 80
    5cd2:	59 f0       	breq	.+22     	; 0x5cea <__vector_26+0x6e>
    5cd4:	88 35       	cpi	r24, 0x58	; 88
    5cd6:	f1 f0       	breq	.+60     	; 0x5d14 <__vector_26+0x98>
    5cd8:	88 34       	cpi	r24, 0x48	; 72
    5cda:	09 f0       	breq	.+2      	; 0x5cde <__vector_26+0x62>
    5cdc:	5b c0       	rjmp	.+182    	; 0x5d94 <__vector_26+0x118>
    5cde:	54 c0       	rjmp	.+168    	; 0x5d88 <__vector_26+0x10c>
      TWCR = TWCR_DEFAULT | _BV(TWINT) | _BV(TWSTA);
      break;

    /* SLA+R has been transmitted; ACK has been received. */
    case TW_MR_SLA_ACK:
      if (op->buflen == 1) {
    5ce0:	81 81       	ldd	r24, Z+1	; 0x01
    5ce2:	81 30       	cpi	r24, 0x01	; 1
    5ce4:	09 f0       	breq	.+2      	; 0x5ce8 <__vector_26+0x6c>
    5ce6:	4a c0       	rjmp	.+148    	; 0x5d7c <__vector_26+0x100>
    5ce8:	13 c0       	rjmp	.+38     	; 0x5d10 <__vector_26+0x94>
      txn->flags = I2C_TXN_DONE | I2C_TXN_ERR;
      goto next_txn;

    /* Data byte has been received; ACK has been returned. */
    case TW_MR_DATA_ACK:
      op->buf[op->bufpos++] = TWDR;
    5cea:	a3 81       	ldd	r26, Z+3	; 0x03
    5cec:	b4 81       	ldd	r27, Z+4	; 0x04
    5cee:	82 81       	ldd	r24, Z+2	; 0x02
    5cf0:	91 e0       	ldi	r25, 0x01	; 1
    5cf2:	98 0f       	add	r25, r24
    5cf4:	92 83       	std	Z+2, r25	; 0x02
    5cf6:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5cfa:	a8 0f       	add	r26, r24
    5cfc:	b1 1d       	adc	r27, r1
    5cfe:	9c 93       	st	X, r25
      if (op->bufpos+1 == op->buflen) {
    5d00:	82 81       	ldd	r24, Z+2	; 0x02
    5d02:	21 81       	ldd	r18, Z+1	; 0x01
    5d04:	90 e0       	ldi	r25, 0x00	; 0
    5d06:	01 96       	adiw	r24, 0x01	; 1
    5d08:	30 e0       	ldi	r19, 0x00	; 0
    5d0a:	82 17       	cp	r24, r18
    5d0c:	93 07       	cpc	r25, r19
    5d0e:	b1 f5       	brne	.+108    	; 0x5d7c <__vector_26+0x100>
        TWCR = TWCR_NOT_ACK;
    5d10:	85 e8       	ldi	r24, 0x85	; 133
    5d12:	7c c0       	rjmp	.+248    	; 0x5e0c <__vector_26+0x190>
      }
      break;

    /* Data byte has been received; NOT ACK has been returned. */
    case TW_MR_DATA_NACK:
      op->buf[op->bufpos++] = TWDR;
    5d14:	83 81       	ldd	r24, Z+3	; 0x03
    5d16:	94 81       	ldd	r25, Z+4	; 0x04
    5d18:	22 81       	ldd	r18, Z+2	; 0x02
    5d1a:	31 e0       	ldi	r19, 0x01	; 1
    5d1c:	32 0f       	add	r19, r18
    5d1e:	32 83       	std	Z+2, r19	; 0x02
    5d20:	30 91 bb 00 	lds	r19, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5d24:	fc 01       	movw	r30, r24
    5d26:	e2 0f       	add	r30, r18
    5d28:	f1 1d       	adc	r31, r1
    5d2a:	30 83       	st	Z, r19
      goto next_op;
    5d2c:	35 c0       	rjmp	.+106    	; 0x5d98 <__vector_26+0x11c>
    default:
      assert(0 && "unknown status in master receiver mode");
    }
  } else {
    /* Master Transmitter mode. */
    switch (status) {
    5d2e:	80 32       	cpi	r24, 0x20	; 32
    5d30:	59 f1       	breq	.+86     	; 0x5d88 <__vector_26+0x10c>
    5d32:	38 f4       	brcc	.+14     	; 0x5d42 <__vector_26+0xc6>
    5d34:	80 31       	cpi	r24, 0x10	; 16
    5d36:	69 f0       	breq	.+26     	; 0x5d52 <__vector_26+0xd6>
    5d38:	88 31       	cpi	r24, 0x18	; 24
    5d3a:	a1 f0       	breq	.+40     	; 0x5d64 <__vector_26+0xe8>
    5d3c:	88 30       	cpi	r24, 0x08	; 8
    5d3e:	51 f5       	brne	.+84     	; 0x5d94 <__vector_26+0x118>
    5d40:	08 c0       	rjmp	.+16     	; 0x5d52 <__vector_26+0xd6>
    5d42:	80 33       	cpi	r24, 0x30	; 48
    5d44:	e9 f0       	breq	.+58     	; 0x5d80 <__vector_26+0x104>
    5d46:	88 33       	cpi	r24, 0x38	; 56
    5d48:	09 f4       	brne	.+2      	; 0x5d4c <__vector_26+0xd0>
    5d4a:	55 c0       	rjmp	.+170    	; 0x5df6 <__vector_26+0x17a>
    5d4c:	88 32       	cpi	r24, 0x28	; 40
    5d4e:	11 f5       	brne	.+68     	; 0x5d94 <__vector_26+0x118>
    5d50:	05 c0       	rjmp	.+10     	; 0x5d5c <__vector_26+0xe0>

    /* A START condition has been transmitted. */
    case TW_START:
    /* A repeated START condition has been transmitted. */
    case TW_REP_START:
      assert(op->buflen > 0);
    5d52:	81 81       	ldd	r24, Z+1	; 0x01
    5d54:	88 23       	and	r24, r24
    5d56:	f1 f0       	breq	.+60     	; 0x5d94 <__vector_26+0x118>
      op->bufpos = 0;
    5d58:	12 82       	std	Z+2, r1	; 0x02
    5d5a:	0d c0       	rjmp	.+26     	; 0x5d76 <__vector_26+0xfa>
      txn->flags = I2C_TXN_DONE | I2C_TXN_ERR;
      goto next_txn;

    /* Data byte has been transmitted; ACK has been received. */
    case TW_MT_DATA_ACK:
      if (op->bufpos < op->buflen) {
    5d5c:	92 81       	ldd	r25, Z+2	; 0x02
    5d5e:	81 81       	ldd	r24, Z+1	; 0x01
    5d60:	98 17       	cp	r25, r24
    5d62:	d0 f4       	brcc	.+52     	; 0x5d98 <__vector_26+0x11c>
        TWDR = op->buf[op->bufpos++];
    5d64:	83 81       	ldd	r24, Z+3	; 0x03
    5d66:	94 81       	ldd	r25, Z+4	; 0x04
    5d68:	22 81       	ldd	r18, Z+2	; 0x02
    5d6a:	31 e0       	ldi	r19, 0x01	; 1
    5d6c:	32 0f       	add	r19, r18
    5d6e:	32 83       	std	Z+2, r19	; 0x02
    5d70:	fc 01       	movw	r30, r24
    5d72:	e2 0f       	add	r30, r18
    5d74:	f1 1d       	adc	r31, r1
    5d76:	80 81       	ld	r24, Z
    5d78:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
        TWCR = TWCR_DEFAULT | _BV(TWINT);
    5d7c:	85 ec       	ldi	r24, 0xC5	; 197
    5d7e:	46 c0       	rjmp	.+140    	; 0x5e0c <__vector_26+0x190>
      /* No more bytes left to transmit... */
      goto next_op;

    /* Data byte has been transmitted; NOT ACK has been received. */
    case TW_MT_DATA_NACK:
      if (op->bufpos < op->buflen) {
    5d80:	92 81       	ldd	r25, Z+2	; 0x02
    5d82:	81 81       	ldd	r24, Z+1	; 0x01
    5d84:	98 17       	cp	r25, r24
    5d86:	40 f4       	brcc	.+16     	; 0x5d98 <__vector_26+0x11c>
        /* There were more bytes left to transmit! */
        txn->flags = I2C_TXN_DONE | I2C_TXN_ERR;
    5d88:	e0 91 4e 17 	lds	r30, 0x174E	; 0x80174e <txn>
    5d8c:	f0 91 4f 17 	lds	r31, 0x174F	; 0x80174f <txn+0x1>
    5d90:	83 e0       	ldi	r24, 0x03	; 3
    5d92:	1d c0       	rjmp	.+58     	; 0x5dce <__vector_26+0x152>
      }

      goto next_op;

    default:
      assert(0 && "unknown status in master transmitter mode");
    5d94:	0e 94 c9 e9 	call	0x1d392	; 0x1d392 <abort>

next_op:
  /*
   * Advance to next operation in transaction, if possible.
   */
  if (++(txn->opspos) < txn->opslen) {
    5d98:	e0 91 4e 17 	lds	r30, 0x174E	; 0x80174e <txn>
    5d9c:	f0 91 4f 17 	lds	r31, 0x174F	; 0x80174f <txn+0x1>
    5da0:	84 81       	ldd	r24, Z+4	; 0x04
    5da2:	8f 5f       	subi	r24, 0xFF	; 255
    5da4:	84 83       	std	Z+4, r24	; 0x04
    5da6:	93 81       	ldd	r25, Z+3	; 0x03
    5da8:	89 17       	cp	r24, r25
    5daa:	80 f4       	brcc	.+32     	; 0x5dcc <__vector_26+0x150>
    op = &txn->ops[txn->opspos];
    5dac:	84 81       	ldd	r24, Z+4	; 0x04
    5dae:	90 e0       	ldi	r25, 0x00	; 0
    5db0:	01 96       	adiw	r24, 0x01	; 1
    5db2:	45 e0       	ldi	r20, 0x05	; 5
    5db4:	48 9f       	mul	r20, r24
    5db6:	90 01       	movw	r18, r0
    5db8:	49 9f       	mul	r20, r25
    5dba:	30 0d       	add	r19, r0
    5dbc:	11 24       	eor	r1, r1
    5dbe:	e2 0f       	add	r30, r18
    5dc0:	f3 1f       	adc	r31, r19
    5dc2:	f0 93 4d 17 	sts	0x174D, r31	; 0x80174d <op+0x1>
    5dc6:	e0 93 4c 17 	sts	0x174C, r30	; 0x80174c <op>
    5dca:	15 c0       	rjmp	.+42     	; 0x5df6 <__vector_26+0x17a>
    TWCR = TWCR_DEFAULT | _BV(TWINT) | _BV(TWSTA);
    return;
  }

  /* No more operations, mark transaction as done. */
  txn->flags = I2C_TXN_DONE;
    5dcc:	81 e0       	ldi	r24, 0x01	; 1
    5dce:	82 83       	std	Z+2, r24	; 0x02

next_txn:
  /*
   * Advance to next transaction, if possible.
   */
  if (txn->next != NULL) {
    5dd0:	e0 91 4e 17 	lds	r30, 0x174E	; 0x80174e <txn>
    5dd4:	f0 91 4f 17 	lds	r31, 0x174F	; 0x80174f <txn+0x1>
    5dd8:	80 81       	ld	r24, Z
    5dda:	91 81       	ldd	r25, Z+1	; 0x01
    5ddc:	89 2b       	or	r24, r25
    5dde:	69 f0       	breq	.+26     	; 0x5dfa <__vector_26+0x17e>
    txn = txn->next;
    5de0:	80 81       	ld	r24, Z
    5de2:	91 81       	ldd	r25, Z+1	; 0x01
    5de4:	90 93 4f 17 	sts	0x174F, r25	; 0x80174f <txn+0x1>
    5de8:	80 93 4e 17 	sts	0x174E, r24	; 0x80174e <txn>
    op = &txn->ops[0];
    5dec:	05 96       	adiw	r24, 0x05	; 5
    5dee:	90 93 4d 17 	sts	0x174D, r25	; 0x80174d <op+0x1>
    5df2:	80 93 4c 17 	sts	0x174C, r24	; 0x80174c <op>

    /* Repeated start. */
    TWCR = TWCR_DEFAULT | _BV(TWINT) | _BV(TWSTA);
    5df6:	85 ee       	ldi	r24, 0xE5	; 229
    5df8:	09 c0       	rjmp	.+18     	; 0x5e0c <__vector_26+0x190>
    return;
  }

  txn = NULL;
    5dfa:	10 92 4f 17 	sts	0x174F, r1	; 0x80174f <txn+0x1>
    5dfe:	10 92 4e 17 	sts	0x174E, r1	; 0x80174e <txn>
  op = NULL;
    5e02:	10 92 4d 17 	sts	0x174D, r1	; 0x80174d <op+0x1>
    5e06:	10 92 4c 17 	sts	0x174C, r1	; 0x80174c <op>

  /* No more transaction, transmit STOP. */
  TWCR = TWCR_DEFAULT | _BV(TWINT) | _BV(TWSTO);
    5e0a:	85 ed       	ldi	r24, 0xD5	; 213
    5e0c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
}
    5e10:	ff 91       	pop	r31
    5e12:	ef 91       	pop	r30
    5e14:	bf 91       	pop	r27
    5e16:	af 91       	pop	r26
    5e18:	9f 91       	pop	r25
    5e1a:	8f 91       	pop	r24
    5e1c:	7f 91       	pop	r23
    5e1e:	6f 91       	pop	r22
    5e20:	5f 91       	pop	r21
    5e22:	4f 91       	pop	r20
    5e24:	3f 91       	pop	r19
    5e26:	2f 91       	pop	r18
    5e28:	0f 90       	pop	r0
    5e2a:	0b be       	out	0x3b, r0	; 59
    5e2c:	0f 90       	pop	r0
    5e2e:	0f be       	out	0x3f, r0	; 63
    5e30:	0f 90       	pop	r0
    5e32:	1f 90       	pop	r1
    5e34:	18 95       	reti

00005e36 <BINtoBCD>:
        return -1;
    }
    if(b & 8)
        return 0;
    return 1;
}
    5e36:	6a e0       	ldi	r22, 0x0A	; 10
    5e38:	0e 94 2b e5 	call	0x1ca56	; 0x1ca56 <__udivmodqi4>
    5e3c:	82 95       	swap	r24
    5e3e:	80 7f       	andi	r24, 0xF0	; 240
    5e40:	89 2b       	or	r24, r25
    5e42:	08 95       	ret

00005e44 <BCDtoBIN>:
    5e44:	98 2f       	mov	r25, r24
    5e46:	92 95       	swap	r25
    5e48:	9f 70       	andi	r25, 0x0F	; 15
    5e4a:	8f 70       	andi	r24, 0x0F	; 15
    5e4c:	2a e0       	ldi	r18, 0x0A	; 10
    5e4e:	92 9f       	mul	r25, r18
    5e50:	80 0d       	add	r24, r0
    5e52:	11 24       	eor	r1, r1
    5e54:	08 95       	ret

00005e56 <rtc_run>:
///  - -1 = check run state.
///
/// @return  run state 0/1 on success.
/// @return -1 on error.
int rtc_run(int run)
{
    5e56:	cf 92       	push	r12
    5e58:	df 92       	push	r13
    5e5a:	ef 92       	push	r14
    5e5c:	0f 93       	push	r16
    5e5e:	1f 93       	push	r17
    5e60:	cf 93       	push	r28
    5e62:	df 93       	push	r29
    5e64:	00 d0       	rcall	.+0      	; 0x5e66 <rtc_run+0x10>
    5e66:	1f 92       	push	r1
    5e68:	cd b7       	in	r28, 0x3d	; 61
    5e6a:	de b7       	in	r29, 0x3e	; 62
    5e6c:	6c 01       	movw	r12, r24
    uint8_t  WriteAddress;
    uint8_t  ReadAddress;
    uint8_t b = 0;
    5e6e:	19 82       	std	Y+1, r1	; 0x01

    ReadAddress = 0;
    5e70:	1a 82       	std	Y+2, r1	; 0x02
    if (TWI_ReadPacket(DS1307_R, RTC_TIMEOUT, &ReadAddress, sizeof(ReadAddress),
    5e72:	ee 24       	eor	r14, r14
    5e74:	e3 94       	inc	r14
    5e76:	8e 01       	movw	r16, r28
    5e78:	0f 5f       	subi	r16, 0xFF	; 255
    5e7a:	1f 4f       	sbci	r17, 0xFF	; 255
    5e7c:	21 e0       	ldi	r18, 0x01	; 1
    5e7e:	ae 01       	movw	r20, r28
    5e80:	4e 5f       	subi	r20, 0xFE	; 254
    5e82:	5f 4f       	sbci	r21, 0xFF	; 255
    5e84:	62 e3       	ldi	r22, 0x32	; 50
    5e86:	81 ed       	ldi	r24, 0xD1	; 209
    5e88:	8a de       	rcall	.-748    	; 0x5b9e <TWI_ReadPacket>
    5e8a:	88 23       	and	r24, r24
    5e8c:	19 f0       	breq	.+6      	; 0x5e94 <rtc_run+0x3e>
        (uint8_t*)&b, 1) != TWI_ERROR_NoError)
    {
        printf("rtc_run read status error\n");
    5e8e:	84 ea       	ldi	r24, 0xA4	; 164
    5e90:	94 e0       	ldi	r25, 0x04	; 4
    5e92:	2a c0       	rjmp	.+84     	; 0x5ee8 <rtc_run+0x92>
    5e94:	89 81       	ldd	r24, Y+1	; 0x01
        return -1;
    }

    if(run == -1)
    5e96:	9f ef       	ldi	r25, 0xFF	; 255
    5e98:	c9 16       	cp	r12, r25
    5e9a:	d9 06       	cpc	r13, r25
    5e9c:	59 f4       	brne	.+22     	; 0x5eb4 <rtc_run+0x5e>
        return ((b & 0x80) ? 0 : 1);
    5e9e:	08 2e       	mov	r0, r24
    5ea0:	00 0c       	add	r0, r0
    5ea2:	99 0b       	sbc	r25, r25
    5ea4:	80 95       	com	r24
    5ea6:	90 95       	com	r25
    5ea8:	89 2f       	mov	r24, r25
    5eaa:	88 1f       	adc	r24, r24
    5eac:	88 27       	eor	r24, r24
    5eae:	88 1f       	adc	r24, r24
    5eb0:	90 e0       	ldi	r25, 0x00	; 0
    5eb2:	26 c0       	rjmp	.+76     	; 0x5f00 <rtc_run+0xaa>

    b = ( b  & 0x7f) | (run ? 0 : 0x80);
    5eb4:	8f 77       	andi	r24, 0x7F	; 127
    5eb6:	c1 14       	cp	r12, r1
    5eb8:	d1 04       	cpc	r13, r1
    5eba:	11 f4       	brne	.+4      	; 0x5ec0 <rtc_run+0x6a>
    5ebc:	90 e8       	ldi	r25, 0x80	; 128
    5ebe:	01 c0       	rjmp	.+2      	; 0x5ec2 <rtc_run+0x6c>
    5ec0:	90 e0       	ldi	r25, 0x00	; 0
    5ec2:	89 2b       	or	r24, r25
    5ec4:	89 83       	std	Y+1, r24	; 0x01

    WriteAddress = 0;
    5ec6:	1b 82       	std	Y+3, r1	; 0x03
    if (TWI_WritePacket(DS1307_W, RTC_TIMEOUT, &WriteAddress, sizeof(WriteAddress),
    5ec8:	ee 24       	eor	r14, r14
    5eca:	e3 94       	inc	r14
    5ecc:	8e 01       	movw	r16, r28
    5ece:	0f 5f       	subi	r16, 0xFF	; 255
    5ed0:	1f 4f       	sbci	r17, 0xFF	; 255
    5ed2:	21 e0       	ldi	r18, 0x01	; 1
    5ed4:	ae 01       	movw	r20, r28
    5ed6:	4d 5f       	subi	r20, 0xFD	; 253
    5ed8:	5f 4f       	sbci	r21, 0xFF	; 255
    5eda:	62 e3       	ldi	r22, 0x32	; 50
    5edc:	80 ed       	ldi	r24, 0xD0	; 208
    5ede:	a0 de       	rcall	.-704    	; 0x5c20 <TWI_WritePacket>
    5ee0:	88 23       	and	r24, r24
    5ee2:	69 f0       	breq	.+26     	; 0x5efe <rtc_run+0xa8>
        (uint8_t*)&b, 1) != TWI_ERROR_NoError)
    {
        printf("rtc_run - write status error\n");
    5ee4:	86 e8       	ldi	r24, 0x86	; 134
    5ee6:	94 e0       	ldi	r25, 0x04	; 4
    5ee8:	1f 92       	push	r1
    5eea:	9f 93       	push	r25
    5eec:	8f 93       	push	r24
    5eee:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
        return(-1);
    5ef2:	0f 90       	pop	r0
    5ef4:	0f 90       	pop	r0
    5ef6:	0f 90       	pop	r0
    5ef8:	8f ef       	ldi	r24, 0xFF	; 255
    5efa:	9f ef       	ldi	r25, 0xFF	; 255
    5efc:	01 c0       	rjmp	.+2      	; 0x5f00 <rtc_run+0xaa>
    5efe:	c6 01       	movw	r24, r12
    }
    return(run);
}
    5f00:	0f 90       	pop	r0
    5f02:	0f 90       	pop	r0
    5f04:	0f 90       	pop	r0
    5f06:	df 91       	pop	r29
    5f08:	cf 91       	pop	r28
    5f0a:	1f 91       	pop	r17
    5f0c:	0f 91       	pop	r16
    5f0e:	ef 90       	pop	r14
    5f10:	df 90       	pop	r13
    5f12:	cf 90       	pop	r12
    5f14:	08 95       	ret

00005f16 <rtc_write>:
/// @param[in] t: POSIX struct tm * time to set.
///
/// @return 1 on sucess.
/// @return 0 on fail.
uint8_t rtc_write(tm_t *t)
{
    5f16:	ef 92       	push	r14
    5f18:	0f 93       	push	r16
    5f1a:	1f 93       	push	r17
    5f1c:	cf 93       	push	r28
    5f1e:	df 93       	push	r29
    5f20:	cd b7       	in	r28, 0x3d	; 61
    5f22:	de b7       	in	r29, 0x3e	; 62
    5f24:	29 97       	sbiw	r28, 0x09	; 9
    5f26:	0f b6       	in	r0, 0x3f	; 63
    5f28:	f8 94       	cli
    5f2a:	de bf       	out	0x3e, r29	; 62
    5f2c:	0f be       	out	0x3f, r0	; 63
    5f2e:	cd bf       	out	0x3d, r28	; 61
    5f30:	8c 01       	movw	r16, r24
    uint8_t buf[8];
    uint8_t WriteAddress;

    buf[0] =  BINtoBCD(t->tm_sec) & 0x7f;
    5f32:	fc 01       	movw	r30, r24
    5f34:	80 81       	ld	r24, Z
    5f36:	7f df       	rcall	.-258    	; 0x5e36 <BINtoBCD>
    5f38:	8f 77       	andi	r24, 0x7F	; 127
    5f3a:	89 83       	std	Y+1, r24	; 0x01
    buf[1] =  BINtoBCD(t->tm_min) & 0x7f;
    5f3c:	f8 01       	movw	r30, r16
    5f3e:	82 81       	ldd	r24, Z+2	; 0x02
    5f40:	7a df       	rcall	.-268    	; 0x5e36 <BINtoBCD>
    5f42:	8f 77       	andi	r24, 0x7F	; 127
    buf[2] =  BINtoBCD(t->tm_hour) & 0x3f;
    5f44:	8a 83       	std	Y+2, r24	; 0x02
    5f46:	f8 01       	movw	r30, r16
    5f48:	84 81       	ldd	r24, Z+4	; 0x04
    5f4a:	75 df       	rcall	.-278    	; 0x5e36 <BINtoBCD>
    5f4c:	8f 73       	andi	r24, 0x3F	; 63
    buf[3] =  ((t->tm_wday & 7) + 1) & 0x0f;
    5f4e:	8b 83       	std	Y+3, r24	; 0x03
    5f50:	f8 01       	movw	r30, r16
    5f52:	84 85       	ldd	r24, Z+12	; 0x0c
    5f54:	87 70       	andi	r24, 0x07	; 7
    buf[4] =  BINtoBCD(t->tm_mday ) & 0x3f;
    5f56:	8f 5f       	subi	r24, 0xFF	; 255
    5f58:	8c 83       	std	Y+4, r24	; 0x04
    5f5a:	86 81       	ldd	r24, Z+6	; 0x06
    5f5c:	6c df       	rcall	.-296    	; 0x5e36 <BINtoBCD>
    buf[5] =  BINtoBCD(t->tm_mon + 1) & 0x1f;
    5f5e:	8f 73       	andi	r24, 0x3F	; 63
    5f60:	8d 83       	std	Y+5, r24	; 0x05
    5f62:	f8 01       	movw	r30, r16
    5f64:	80 85       	ldd	r24, Z+8	; 0x08
    5f66:	8f 5f       	subi	r24, 0xFF	; 255
    5f68:	66 df       	rcall	.-308    	; 0x5e36 <BINtoBCD>
    buf[6] =  BINtoBCD(t->tm_year - 100) & 0xff;  // 2000 = 0
    5f6a:	8f 71       	andi	r24, 0x1F	; 31
    5f6c:	8e 83       	std	Y+6, r24	; 0x06
    5f6e:	f8 01       	movw	r30, r16
    5f70:	82 85       	ldd	r24, Z+10	; 0x0a
    5f72:	84 56       	subi	r24, 0x64	; 100
    5f74:	60 df       	rcall	.-320    	; 0x5e36 <BINtoBCD>
    buf[7] = 0x93;                                // 32khz, out square wave
    5f76:	8f 83       	std	Y+7, r24	; 0x07
    5f78:	83 e9       	ldi	r24, 0x93	; 147
	for(i=0;i<7;++i)
		printf("%02x ", 0xff & buf[i]);
    printf("\n");
#endif

    WriteAddress = 0;
    5f7a:	88 87       	std	Y+8, r24	; 0x08
    if (TWI_WritePacket(DS1307_W, RTC_TIMEOUT, &WriteAddress, sizeof(WriteAddress),
    5f7c:	19 86       	std	Y+9, r1	; 0x09
    5f7e:	88 e0       	ldi	r24, 0x08	; 8
    5f80:	e8 2e       	mov	r14, r24
    5f82:	8e 01       	movw	r16, r28
    5f84:	0f 5f       	subi	r16, 0xFF	; 255
    5f86:	1f 4f       	sbci	r17, 0xFF	; 255
    5f88:	21 e0       	ldi	r18, 0x01	; 1
    5f8a:	ae 01       	movw	r20, r28
    5f8c:	47 5f       	subi	r20, 0xF7	; 247
    5f8e:	5f 4f       	sbci	r21, 0xFF	; 255
    5f90:	62 e3       	ldi	r22, 0x32	; 50
    5f92:	80 ed       	ldi	r24, 0xD0	; 208
    5f94:	45 de       	rcall	.-886    	; 0x5c20 <TWI_WritePacket>
    5f96:	88 23       	and	r24, r24
        (uint8_t*)buf, 8) != TWI_ERROR_NoError)
    {
        printf("rtc_write error\n");
    5f98:	61 f0       	breq	.+24     	; 0x5fb2 <rtc_write+0x9c>
    5f9a:	87 e5       	ldi	r24, 0x57	; 87
    5f9c:	94 e0       	ldi	r25, 0x04	; 4
    5f9e:	1f 92       	push	r1
    5fa0:	9f 93       	push	r25
    5fa2:	8f 93       	push	r24
    5fa4:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
        return(0);
    5fa8:	0f 90       	pop	r0
    5faa:	0f 90       	pop	r0
    5fac:	0f 90       	pop	r0
    5fae:	80 e0       	ldi	r24, 0x00	; 0
    }

    return(1);
    5fb0:	01 c0       	rjmp	.+2      	; 0x5fb4 <rtc_write+0x9e>
}
    5fb2:	81 e0       	ldi	r24, 0x01	; 1
    5fb4:	29 96       	adiw	r28, 0x09	; 9
    5fb6:	0f b6       	in	r0, 0x3f	; 63
    5fb8:	f8 94       	cli
    5fba:	de bf       	out	0x3e, r29	; 62
    5fbc:	0f be       	out	0x3f, r0	; 63
    5fbe:	cd bf       	out	0x3d, r28	; 61
    5fc0:	df 91       	pop	r29
    5fc2:	cf 91       	pop	r28
    5fc4:	1f 91       	pop	r17
    5fc6:	0f 91       	pop	r16
    5fc8:	ef 90       	pop	r14
    5fca:	08 95       	ret

00005fcc <rtc_init>:
/// @param[in] seconds: POSIX EPOCH time in seconds.
///
/// @return  1 on success.
/// @return 0 on fail.
uint8_t rtc_init (int force, time_t seconds)
{
    5fcc:	a4 e0       	ldi	r26, 0x04	; 4
    5fce:	b0 e0       	ldi	r27, 0x00	; 0
    5fd0:	ec ee       	ldi	r30, 0xEC	; 236
    5fd2:	ff e2       	ldi	r31, 0x2F	; 47
    5fd4:	0c 94 ee e5 	jmp	0x1cbdc	; 0x1cbdc <__prologue_saves__+0x1c>
    5fd8:	8c 01       	movw	r16, r24
    5fda:	49 83       	std	Y+1, r20	; 0x01
    5fdc:	5a 83       	std	Y+2, r21	; 0x02
    5fde:	6b 83       	std	Y+3, r22	; 0x03
    5fe0:	7c 83       	std	Y+4, r23	; 0x04
    uint8_t  WriteAddress;
    int8_t    state;

    tm_t *tmp;

    TWI_Init(TWI_BIT_PRESCALE_4, TWI_BITLENGTH_FROM_FREQ(4, 100000));
    5fe2:	61 e1       	ldi	r22, 0x11	; 17
    5fe4:	81 e0       	ldi	r24, 0x01	; 1
    5fe6:	39 dd       	rcall	.-1422   	; 0x5a5a <TWI_Init>

    if(!force)
    5fe8:	01 15       	cp	r16, r1
    5fea:	11 05       	cpc	r17, r1
    5fec:	d9 f4       	brne	.+54     	; 0x6024 <rtc_init+0x58>
    {
        state = rtc_run(-1);
    5fee:	8f ef       	ldi	r24, 0xFF	; 255
    5ff0:	9f ef       	ldi	r25, 0xFF	; 255
    5ff2:	31 df       	rcall	.-414    	; 0x5e56 <rtc_run>
        if(state < 0)
    5ff4:	87 ff       	sbrs	r24, 7
    5ff6:	06 c0       	rjmp	.+12     	; 0x6004 <rtc_init+0x38>
        {
            rtc_ok = 0;
    5ff8:	10 92 ee 18 	sts	0x18EE, r1	; 0x8018ee <rtc_ok+0x1>
    5ffc:	10 92 ed 18 	sts	0x18ED, r1	; 0x8018ed <rtc_ok>
            return 0;
    6000:	10 e0       	ldi	r17, 0x00	; 0
    6002:	2b c0       	rjmp	.+86     	; 0x605a <rtc_init+0x8e>
        }
        if(state == 0)                            // stopped
    6004:	88 23       	and	r24, r24
    6006:	71 f0       	breq	.+28     	; 0x6024 <rtc_init+0x58>
                return(0);
            }
        }
#endif

        if(rtc_run(1) < 0)                        // START RTC
    6008:	05 c0       	rjmp	.+10     	; 0x6014 <rtc_init+0x48>
    600a:	81 e0       	ldi	r24, 0x01	; 1
    600c:	90 e0       	ldi	r25, 0x00	; 0
    600e:	23 df       	rcall	.-442    	; 0x5e56 <rtc_run>
    6010:	97 fd       	sbrc	r25, 7
        {
            rtc_ok = 0;                           // Fail
            return 0;
        }
    }
    rtc_ok = 1;
    6012:	f2 cf       	rjmp	.-28     	; 0x5ff8 <rtc_init+0x2c>
    6014:	81 e0       	ldi	r24, 0x01	; 1
    6016:	90 e0       	ldi	r25, 0x00	; 0
    6018:	90 93 ee 18 	sts	0x18EE, r25	; 0x8018ee <rtc_ok+0x1>
    601c:	80 93 ed 18 	sts	0x18ED, r24	; 0x8018ed <rtc_ok>
            force = 1;
    }

    if(force)                                     // INIT
    {
        if(rtc_run(0) < 0)                        // STOP RTC
    6020:	11 e0       	ldi	r17, 0x01	; 1
    6022:	1b c0       	rjmp	.+54     	; 0x605a <rtc_init+0x8e>
    6024:	80 e0       	ldi	r24, 0x00	; 0
    6026:	90 e0       	ldi	r25, 0x00	; 0
    6028:	16 df       	rcall	.-468    	; 0x5e56 <rtc_run>
        {
            rtc_ok = 0;                           // Fail
            return 0;
        }
        tmp = gmtime(&seconds);
    602a:	97 fd       	sbrc	r25, 7
    602c:	e5 cf       	rjmp	.-54     	; 0x5ff8 <rtc_init+0x2c>
    602e:	ce 01       	movw	r24, r28
        if(!rtc_write(tmp))
    6030:	01 96       	adiw	r24, 0x01	; 1
    6032:	0e 94 bc 38 	call	0x7178	; 0x7178 <gmtime>
    6036:	6f df       	rcall	.-290    	; 0x5f16 <rtc_write>
    6038:	18 2f       	mov	r17, r24
        {
            printf("rtc_init  write epoch failed\n");
    603a:	81 11       	cpse	r24, r1
    603c:	e6 cf       	rjmp	.-52     	; 0x600a <rtc_init+0x3e>
    603e:	88 e6       	ldi	r24, 0x68	; 104
    6040:	94 e0       	ldi	r25, 0x04	; 4
    6042:	1f 92       	push	r1
    6044:	9f 93       	push	r25
    6046:	8f 93       	push	r24
            rtc_ok = 0;
    6048:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    604c:	10 92 ee 18 	sts	0x18EE, r1	; 0x8018ee <rtc_ok+0x1>
            return 0;
    6050:	10 92 ed 18 	sts	0x18ED, r1	; 0x8018ed <rtc_ok>
    6054:	0f 90       	pop	r0
            return 0;
        }
    }
    rtc_ok = 1;
    return 1;
}
    6056:	0f 90       	pop	r0
    6058:	0f 90       	pop	r0
    605a:	81 2f       	mov	r24, r17
    605c:	24 96       	adiw	r28, 0x04	; 4
    605e:	e4 e0       	ldi	r30, 0x04	; 4
    6060:	0c 94 0a e6 	jmp	0x1cc14	; 0x1cc14 <__epilogue_restores__+0x1c>

00006064 <rtc_read>:
///
/// @param[out] t: struct tm * POSIX time returned.
/// @return  1 on sucess.
/// @return 0 on fail.
uint8_t rtc_read(tm_t *t)
{
    6064:	cf 92       	push	r12
    6066:	df 92       	push	r13
    6068:	ef 92       	push	r14
    606a:	0f 93       	push	r16
    606c:	1f 93       	push	r17
    606e:	cf 93       	push	r28
    6070:	df 93       	push	r29
    6072:	cd b7       	in	r28, 0x3d	; 61
    6074:	de b7       	in	r29, 0x3e	; 62
    6076:	29 97       	sbiw	r28, 0x09	; 9
    6078:	0f b6       	in	r0, 0x3f	; 63
    607a:	f8 94       	cli
    607c:	de bf       	out	0x3e, r29	; 62
    607e:	0f be       	out	0x3f, r0	; 63
    6080:	cd bf       	out	0x3d, r28	; 61
    6082:	6c 01       	movw	r12, r24
    uint8_t buf[8];

    uint8_t ReadAddress = 0;
    6084:	19 86       	std	Y+9, r1	; 0x09

    ReadAddress = 0;
    if (TWI_ReadPacket(DS1307_R, RTC_TIMEOUT, &ReadAddress, sizeof(ReadAddress),
    6086:	88 e0       	ldi	r24, 0x08	; 8
    6088:	e8 2e       	mov	r14, r24
    608a:	8e 01       	movw	r16, r28
    608c:	0f 5f       	subi	r16, 0xFF	; 255
    608e:	1f 4f       	sbci	r17, 0xFF	; 255
    6090:	21 e0       	ldi	r18, 0x01	; 1
    6092:	ae 01       	movw	r20, r28
    6094:	47 5f       	subi	r20, 0xF7	; 247
    6096:	5f 4f       	sbci	r21, 0xFF	; 255
    6098:	62 e3       	ldi	r22, 0x32	; 50
    609a:	81 ed       	ldi	r24, 0xD1	; 209
    609c:	80 dd       	rcall	.-1280   	; 0x5b9e <TWI_ReadPacket>
    609e:	88 23       	and	r24, r24
    60a0:	61 f0       	breq	.+24     	; 0x60ba <rtc_read+0x56>
        (uint8_t*)buf, 8) != TWI_ERROR_NoError)
    {
        printf("rtc_read error\n");
    60a2:	87 e4       	ldi	r24, 0x47	; 71
    60a4:	94 e0       	ldi	r25, 0x04	; 4
    60a6:	1f 92       	push	r1
    60a8:	9f 93       	push	r25
    60aa:	8f 93       	push	r24
    60ac:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
        return 0;
    60b0:	0f 90       	pop	r0
    60b2:	0f 90       	pop	r0
    60b4:	0f 90       	pop	r0
    60b6:	80 e0       	ldi	r24, 0x00	; 0
    60b8:	33 c0       	rjmp	.+102    	; 0x6120 <rtc_read+0xbc>
    for(i=0;i<7;++i)
        printf("%02x ", 0xff & buf[i]);
    printf("\n");
#endif

    t->tm_sec =   BCDtoBIN( buf[0] & 0x7f);
    60ba:	89 81       	ldd	r24, Y+1	; 0x01
    60bc:	8f 77       	andi	r24, 0x7F	; 127
    60be:	c2 de       	rcall	.-636    	; 0x5e44 <BCDtoBIN>
    60c0:	90 e0       	ldi	r25, 0x00	; 0
    60c2:	f6 01       	movw	r30, r12
    60c4:	91 83       	std	Z+1, r25	; 0x01
    t->tm_min =   BCDtoBIN( buf[1] & 0x7f);
    60c6:	80 83       	st	Z, r24
    60c8:	8a 81       	ldd	r24, Y+2	; 0x02
    60ca:	8f 77       	andi	r24, 0x7F	; 127
    60cc:	bb de       	rcall	.-650    	; 0x5e44 <BCDtoBIN>
    60ce:	90 e0       	ldi	r25, 0x00	; 0
    60d0:	f6 01       	movw	r30, r12
    t->tm_hour =  BCDtoBIN( buf[2] & 0x3f);
    60d2:	93 83       	std	Z+3, r25	; 0x03
    60d4:	82 83       	std	Z+2, r24	; 0x02
    60d6:	8b 81       	ldd	r24, Y+3	; 0x03
    60d8:	8f 73       	andi	r24, 0x3F	; 63
    60da:	b4 de       	rcall	.-664    	; 0x5e44 <BCDtoBIN>
    60dc:	90 e0       	ldi	r25, 0x00	; 0
    60de:	f6 01       	movw	r30, r12
    60e0:	95 83       	std	Z+5, r25	; 0x05
    t->tm_wday =  ( buf[3] & 0x07) - 1;
    60e2:	84 83       	std	Z+4, r24	; 0x04
    60e4:	8c 81       	ldd	r24, Y+4	; 0x04
    60e6:	87 70       	andi	r24, 0x07	; 7
    60e8:	90 e0       	ldi	r25, 0x00	; 0
    60ea:	01 97       	sbiw	r24, 0x01	; 1
    t->tm_mday =  BCDtoBIN( buf[4] & 0x3f) ;
    60ec:	95 87       	std	Z+13, r25	; 0x0d
    60ee:	84 87       	std	Z+12, r24	; 0x0c
    60f0:	8d 81       	ldd	r24, Y+5	; 0x05
    60f2:	8f 73       	andi	r24, 0x3F	; 63
    60f4:	a7 de       	rcall	.-690    	; 0x5e44 <BCDtoBIN>
    60f6:	90 e0       	ldi	r25, 0x00	; 0
    60f8:	f6 01       	movw	r30, r12
    t->tm_mon=    BCDtoBIN( buf[5] & 0x1f) - 1;
    60fa:	97 83       	std	Z+7, r25	; 0x07
    60fc:	86 83       	std	Z+6, r24	; 0x06
    60fe:	8e 81       	ldd	r24, Y+6	; 0x06
    6100:	8f 71       	andi	r24, 0x1F	; 31
    6102:	a0 de       	rcall	.-704    	; 0x5e44 <BCDtoBIN>
    6104:	90 e0       	ldi	r25, 0x00	; 0
    6106:	01 97       	sbiw	r24, 0x01	; 1
    6108:	f6 01       	movw	r30, r12
    t->tm_year =  BCDtoBIN( buf[6] & 0xff) + 100;
    610a:	91 87       	std	Z+9, r25	; 0x09
    610c:	80 87       	std	Z+8, r24	; 0x08
    610e:	8f 81       	ldd	r24, Y+7	; 0x07
    6110:	99 de       	rcall	.-718    	; 0x5e44 <BCDtoBIN>
    6112:	90 e0       	ldi	r25, 0x00	; 0
    6114:	8c 59       	subi	r24, 0x9C	; 156
    6116:	9f 4f       	sbci	r25, 0xFF	; 255
    6118:	f6 01       	movw	r30, r12
    611a:	93 87       	std	Z+11, r25	; 0x0b
        t->tm_min,
        t->tm_sec,
        t->tm_wday);
#endif

    return 1;
    611c:	82 87       	std	Z+10, r24	; 0x0a
}
    611e:	81 e0       	ldi	r24, 0x01	; 1
    6120:	29 96       	adiw	r28, 0x09	; 9
    6122:	0f b6       	in	r0, 0x3f	; 63
    6124:	f8 94       	cli
    6126:	de bf       	out	0x3e, r29	; 62
    6128:	0f be       	out	0x3f, r0	; 63
    612a:	cd bf       	out	0x3d, r28	; 61
    612c:	df 91       	pop	r29
    612e:	cf 91       	pop	r28
    6130:	1f 91       	pop	r17
    6132:	0f 91       	pop	r16
    6134:	ef 90       	pop	r14
    6136:	df 90       	pop	r13
    6138:	cf 90       	pop	r12
    613a:	08 95       	ret

0000613c <I2C_Start>:
/*
 *  Move the cursor one character to the right.
 */
void LCD_moveCursorRight()
{
	LCD_moveCursorRightCount(1);
    613c:	64 e1       	ldi	r22, 0x14	; 20
    613e:	9d dc       	rcall	.-1734   	; 0x5a7a <TWI_StartTransmission>
    6140:	81 11       	cpse	r24, r1
    6142:	07 c0       	rjmp	.+14     	; 0x6152 <I2C_Start+0x16>
    6144:	81 e0       	ldi	r24, 0x01	; 1
    6146:	90 e0       	ldi	r25, 0x00	; 0
    6148:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <LCD_ok+0x1>
    614c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <LCD_ok>
    6150:	04 c0       	rjmp	.+8      	; 0x615a <I2C_Start+0x1e>
    6152:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <LCD_ok+0x1>
    6156:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <LCD_ok>
    615a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <LCD_ok>
    615e:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <LCD_ok+0x1>
    6162:	08 95       	ret

00006164 <I2C_Stop>:
    6164:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <LCD_ok>
    6168:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <LCD_ok+0x1>
    616c:	89 2b       	or	r24, r25
    616e:	09 f0       	breq	.+2      	; 0x6172 <I2C_Stop+0xe>
    6170:	80 cc       	rjmp	.-1792   	; 0x5a72 <TWI_StopTransmission>
    6172:	08 95       	ret

00006174 <I2C_Send>:
    6174:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <LCD_ok>
    6178:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <LCD_ok+0x1>
    617c:	21 15       	cp	r18, r1
    617e:	31 05       	cpc	r19, r1
    6180:	41 f0       	breq	.+16     	; 0x6192 <I2C_Send+0x1e>
    6182:	db dc       	rcall	.-1610   	; 0x5b3a <TWI_SendByte>
    6184:	51 e0       	ldi	r21, 0x01	; 1
    6186:	40 e0       	ldi	r20, 0x00	; 0
    6188:	89 2b       	or	r24, r25
    618a:	09 f0       	breq	.+2      	; 0x618e <I2C_Send+0x1a>
    618c:	50 e0       	ldi	r21, 0x00	; 0
    618e:	25 2f       	mov	r18, r21
    6190:	34 2f       	mov	r19, r20
    6192:	c9 01       	movw	r24, r18
    6194:	08 95       	ret

00006196 <LCD_putb>:
    6196:	cf 93       	push	r28
    6198:	c8 2f       	mov	r28, r24
    619a:	84 ee       	ldi	r24, 0xE4	; 228
    619c:	cf df       	rcall	.-98     	; 0x613c <I2C_Start>
    619e:	89 2b       	or	r24, r25
    61a0:	19 f4       	brne	.+6      	; 0x61a8 <LCD_putb+0x12>
    61a2:	80 e0       	ldi	r24, 0x00	; 0
    61a4:	90 e0       	ldi	r25, 0x00	; 0
    61a6:	07 c0       	rjmp	.+14     	; 0x61b6 <LCD_putb+0x20>
    61a8:	8c 2f       	mov	r24, r28
    61aa:	e4 df       	rcall	.-56     	; 0x6174 <I2C_Send>
    61ac:	89 2b       	or	r24, r25
    61ae:	c9 f3       	breq	.-14     	; 0x61a2 <LCD_putb+0xc>
    61b0:	d9 df       	rcall	.-78     	; 0x6164 <I2C_Stop>
    61b2:	81 e0       	ldi	r24, 0x01	; 1
    61b4:	90 e0       	ldi	r25, 0x00	; 0
    61b6:	cf 91       	pop	r28
    61b8:	08 95       	ret

000061ba <LCD_command>:
    61ba:	cf 93       	push	r28
    61bc:	c8 2f       	mov	r28, r24
    61be:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <lcd_address>
    61c2:	bc df       	rcall	.-136    	; 0x613c <I2C_Start>
    61c4:	89 2b       	or	r24, r25
    61c6:	51 f0       	breq	.+20     	; 0x61dc <LCD_command+0x22>
    61c8:	8c e7       	ldi	r24, 0x7C	; 124
    61ca:	d4 df       	rcall	.-88     	; 0x6174 <I2C_Send>
    61cc:	8c 2f       	mov	r24, r28
    61ce:	d2 df       	rcall	.-92     	; 0x6174 <I2C_Send>
    61d0:	c9 df       	rcall	.-110    	; 0x6164 <I2C_Stop>
    61d2:	6a e0       	ldi	r22, 0x0A	; 10
    61d4:	70 e0       	ldi	r23, 0x00	; 0
    61d6:	80 e0       	ldi	r24, 0x00	; 0
    61d8:	90 e0       	ldi	r25, 0x00	; 0
    61da:	38 d9       	rcall	.-3472   	; 0x544c <delayms>
    61dc:	cf 91       	pop	r28
    61de:	08 95       	ret

000061e0 <LCD_specialCommand>:
    61e0:	cf 93       	push	r28
    61e2:	c8 2f       	mov	r28, r24
    61e4:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <lcd_address>
    61e8:	a9 df       	rcall	.-174    	; 0x613c <I2C_Start>
    61ea:	89 2b       	or	r24, r25
    61ec:	51 f0       	breq	.+20     	; 0x6202 <LCD_specialCommand+0x22>
    61ee:	8e ef       	ldi	r24, 0xFE	; 254
    61f0:	c1 df       	rcall	.-126    	; 0x6174 <I2C_Send>
    61f2:	8c 2f       	mov	r24, r28
    61f4:	bf df       	rcall	.-130    	; 0x6174 <I2C_Send>
    61f6:	b6 df       	rcall	.-148    	; 0x6164 <I2C_Stop>
    61f8:	62 e3       	ldi	r22, 0x32	; 50
    61fa:	70 e0       	ldi	r23, 0x00	; 0
    61fc:	80 e0       	ldi	r24, 0x00	; 0
    61fe:	90 e0       	ldi	r25, 0x00	; 0
    6200:	25 d9       	rcall	.-3510   	; 0x544c <delayms>
    6202:	cf 91       	pop	r28
    6204:	08 95       	ret

00006206 <LCD_setCursor>:
    6206:	a8 e0       	ldi	r26, 0x08	; 8
    6208:	b0 e0       	ldi	r27, 0x00	; 0
    620a:	e9 e0       	ldi	r30, 0x09	; 9
    620c:	f1 e3       	ldi	r31, 0x31	; 49
    620e:	0c 94 f0 e5 	jmp	0x1cbe0	; 0x1cbe0 <__prologue_saves__+0x20>
    6212:	98 e0       	ldi	r25, 0x08	; 8
    6214:	eb e5       	ldi	r30, 0x5B	; 91
    6216:	f2 e0       	ldi	r31, 0x02	; 2
    6218:	de 01       	movw	r26, r28
    621a:	11 96       	adiw	r26, 0x01	; 1
    621c:	01 90       	ld	r0, Z+
    621e:	0d 92       	st	X+, r0
    6220:	9a 95       	dec	r25
    6222:	e1 f7       	brne	.-8      	; 0x621c <LCD_setCursor+0x16>
    6224:	64 30       	cpi	r22, 0x04	; 4
    6226:	08 f0       	brcs	.+2      	; 0x622a <LCD_setCursor+0x24>
    6228:	63 e0       	ldi	r22, 0x03	; 3
    622a:	fe 01       	movw	r30, r28
    622c:	31 96       	adiw	r30, 0x01	; 1
    622e:	e6 0f       	add	r30, r22
    6230:	f1 1d       	adc	r31, r1
    6232:	e6 0f       	add	r30, r22
    6234:	f1 1d       	adc	r31, r1
    6236:	90 81       	ld	r25, Z
    6238:	89 0f       	add	r24, r25
    623a:	80 68       	ori	r24, 0x80	; 128
    623c:	d1 df       	rcall	.-94     	; 0x61e0 <LCD_specialCommand>
    623e:	28 96       	adiw	r28, 0x08	; 8
    6240:	e2 e0       	ldi	r30, 0x02	; 2
    6242:	0c 94 0c e6 	jmp	0x1cc18	; 0x1cc18 <__epilogue_restores__+0x20>

00006246 <LCD_pos>:
    6246:	ea e0       	ldi	r30, 0x0A	; 10
    6248:	f1 e0       	ldi	r31, 0x01	; 1
    624a:	28 2f       	mov	r18, r24
    624c:	30 e0       	ldi	r19, 0x00	; 0
    624e:	31 83       	std	Z+1, r19	; 0x01
    6250:	20 83       	st	Z, r18
    6252:	26 2f       	mov	r18, r22
    6254:	30 e0       	ldi	r19, 0x00	; 0
    6256:	33 83       	std	Z+3, r19	; 0x03
    6258:	22 83       	std	Z+2, r18	; 0x02
    625a:	d5 cf       	rjmp	.-86     	; 0x6206 <LCD_setCursor>
    625c:	08 95       	ret

0000625e <LCD_clear>:
    625e:	8d e2       	ldi	r24, 0x2D	; 45
    6260:	ac df       	rcall	.-168    	; 0x61ba <LCD_command>
    6262:	60 e0       	ldi	r22, 0x00	; 0
    6264:	80 e0       	ldi	r24, 0x00	; 0
    6266:	ef df       	rcall	.-34     	; 0x6246 <LCD_pos>
    6268:	6a e0       	ldi	r22, 0x0A	; 10
    626a:	70 e0       	ldi	r23, 0x00	; 0
    626c:	80 e0       	ldi	r24, 0x00	; 0
    626e:	90 e0       	ldi	r25, 0x00	; 0
    6270:	ed c8       	rjmp	.-3622   	; 0x544c <delayms>
    6272:	08 95       	ret

00006274 <LCD_setFastBacklightRGB>:
} // moveCursorRight


//New command - set backlight with LCD messages or delaymss
void LCD_setFastBacklightRGB(byte r, byte g, byte b)
{
    6274:	1f 93       	push	r17
    6276:	cf 93       	push	r28
    6278:	df 93       	push	r29
    627a:	18 2f       	mov	r17, r24
    627c:	d6 2f       	mov	r29, r22
    627e:	c4 2f       	mov	r28, r20
  //send commands to the display to set backlights
  if( !I2C_Start(lcd_address) )
    6280:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <lcd_address>
    6284:	5b df       	rcall	.-330    	; 0x613c <I2C_Start>
    6286:	89 2b       	or	r24, r25
	return;
  I2C_Send(SETTING_COMMAND); //Send special command character
    6288:	81 f0       	breq	.+32     	; 0x62aa <LCD_setFastBacklightRGB+0x36>
  I2C_Send(SET_RGB_COMMAND); //Send the set RGB character '+' or plus
    628a:	8c e7       	ldi	r24, 0x7C	; 124
  I2C_Send(r);               //Send the red value
  I2C_Send(g);               //Send the green value
    628c:	73 df       	rcall	.-282    	; 0x6174 <I2C_Send>
    628e:	8b e2       	ldi	r24, 0x2B	; 43
  I2C_Send(b);               //Send the blue value
    6290:	71 df       	rcall	.-286    	; 0x6174 <I2C_Send>
    6292:	81 2f       	mov	r24, r17
  I2C_Stop();         //Stop transmission
    6294:	6f df       	rcall	.-290    	; 0x6174 <I2C_Send>
    6296:	8d 2f       	mov	r24, r29
  delayms(10);
    6298:	6d df       	rcall	.-294    	; 0x6174 <I2C_Send>
    629a:	8c 2f       	mov	r24, r28
    629c:	6b df       	rcall	.-298    	; 0x6174 <I2C_Send>
    629e:	62 df       	rcall	.-316    	; 0x6164 <I2C_Stop>
    62a0:	6a e0       	ldi	r22, 0x0A	; 10
    62a2:	70 e0       	ldi	r23, 0x00	; 0
} // setFastBacklight
    62a4:	80 e0       	ldi	r24, 0x00	; 0
    62a6:	90 e0       	ldi	r25, 0x00	; 0
    62a8:	d1 d8       	rcall	.-3678   	; 0x544c <delayms>
    62aa:	df 91       	pop	r29
    62ac:	cf 91       	pop	r28
    62ae:	1f 91       	pop	r17
    62b0:	08 95       	ret

000062b2 <LCD_init>:
 *
 */
bool LCD_init(uint8_t addr)
{
  
  if( !I2C_Start(lcd_address = addr) )
    62b2:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <lcd_address>
    62b6:	42 df       	rcall	.-380    	; 0x613c <I2C_Start>
    62b8:	00 97       	sbiw	r24, 0x00	; 0
	return 0;

  I2C_Send(SPECIAL_COMMAND);                      //Send special command character
    62ba:	61 f1       	breq	.+88     	; 0x6314 <LCD_init+0x62>
    62bc:	8e ef       	ldi	r24, 0xFE	; 254
  I2C_Send(LCD_DISPLAYCONTROL | _displayControl); //Send the display command
    62be:	5a df       	rcall	.-332    	; 0x6174 <I2C_Send>
    62c0:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <_displayControl>

  I2C_Send(SPECIAL_COMMAND);                      //Send special command character
    62c4:	88 60       	ori	r24, 0x08	; 8
    62c6:	56 df       	rcall	.-340    	; 0x6174 <I2C_Send>
  I2C_Send(LCD_ENTRYMODESET | _displayMode);      //Send the entry mode command
    62c8:	8e ef       	ldi	r24, 0xFE	; 254
    62ca:	54 df       	rcall	.-344    	; 0x6174 <I2C_Send>

  I2C_Send(SETTING_COMMAND);                      //Put LCD into setting mode
    62cc:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_displayMode>
  I2C_Send(CLEAR_COMMAND);                        //Send clear display command

  I2C_Send(SETTING_COMMAND);                      //Send special command character
    62d0:	84 60       	ori	r24, 0x04	; 4
  I2C_Send(DISABLE_SYSTEM_MESSAGE_DISPLAY);       //Send the set '.' character
    62d2:	50 df       	rcall	.-352    	; 0x6174 <I2C_Send>
    62d4:	8c e7       	ldi	r24, 0x7C	; 124

  I2C_Send(SPECIAL_COMMAND);                      //Send special command character
    62d6:	4e df       	rcall	.-356    	; 0x6174 <I2C_Send>
    62d8:	8d e2       	ldi	r24, 0x2D	; 45
  I2C_Send(LCD_SETDDRAMADDR | 0);				// HOME 0,0
    62da:	4c df       	rcall	.-360    	; 0x6174 <I2C_Send>
    62dc:	8c e7       	ldi	r24, 0x7C	; 124

  I2C_Stop();
    62de:	4a df       	rcall	.-364    	; 0x6174 <I2C_Send>
    62e0:	8f e2       	ldi	r24, 0x2F	; 47
  delayms(50);                                      //let things settle a bit
    62e2:	48 df       	rcall	.-368    	; 0x6174 <I2C_Send>
    62e4:	8e ef       	ldi	r24, 0xFE	; 254
    62e6:	46 df       	rcall	.-372    	; 0x6174 <I2C_Send>
    62e8:	80 e8       	ldi	r24, 0x80	; 128
    62ea:	44 df       	rcall	.-376    	; 0x6174 <I2C_Send>
    62ec:	3b df       	rcall	.-394    	; 0x6164 <I2C_Stop>

  LCD_setFastBacklightRGB ( 0xC0, 0xC0, 0xC0 );
    62ee:	62 e3       	ldi	r22, 0x32	; 50
    62f0:	70 e0       	ldi	r23, 0x00	; 0
    62f2:	80 e0       	ldi	r24, 0x00	; 0
    62f4:	90 e0       	ldi	r25, 0x00	; 0
    62f6:	aa d8       	rcall	.-3756   	; 0x544c <delayms>

  lcd.xpos = 0;
    62f8:	40 ec       	ldi	r20, 0xC0	; 192
    62fa:	60 ec       	ldi	r22, 0xC0	; 192
    62fc:	80 ec       	ldi	r24, 0xC0	; 192
    62fe:	ba df       	rcall	.-140    	; 0x6274 <LCD_setFastBacklightRGB>
  lcd.ypos = 0;
    6300:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <lcd+0x1>
    6304:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <lcd>

  return(1);
    6308:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <lcd+0x3>
} //init
    630c:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <lcd+0x2>
    6310:	81 e0       	ldi	r24, 0x01	; 1
    6312:	90 e0       	ldi	r25, 0x00	; 0
    6314:	08 95       	ret

00006316 <lcd_cleareol>:
	{
		LCD_putb(' ');
		rem--;
	}
	LCD_pos(lcd.xpos = 0,lcd.ypos);
}
    6316:	cf 93       	push	r28
    6318:	df 93       	push	r29
    631a:	c0 91 0e 01 	lds	r28, 0x010E	; 0x80010e <lcd+0x4>
    631e:	d0 91 0f 01 	lds	r29, 0x010F	; 0x80010f <lcd+0x5>
    6322:	21 97       	sbiw	r28, 0x01	; 1
    6324:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <lcd>
    6328:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <lcd+0x1>
    632c:	c8 1b       	sub	r28, r24
    632e:	d9 0b       	sbc	r29, r25
    6330:	1c 16       	cp	r1, r28
    6332:	1d 06       	cpc	r1, r29
    6334:	24 f4       	brge	.+8      	; 0x633e <lcd_cleareol+0x28>
    6336:	80 e2       	ldi	r24, 0x20	; 32
    6338:	2e df       	rcall	.-420    	; 0x6196 <LCD_putb>
    633a:	21 97       	sbiw	r28, 0x01	; 1
    633c:	f9 cf       	rjmp	.-14     	; 0x6330 <lcd_cleareol+0x1a>
    633e:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <lcd+0x2>
    6342:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <lcd+0x4>
    6346:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <lcd+0x5>
    634a:	01 97       	sbiw	r24, 0x01	; 1
    634c:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <lcd+0x1>
    6350:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <lcd>
    6354:	78 df       	rcall	.-272    	; 0x6246 <LCD_pos>
    6356:	df 91       	pop	r29
    6358:	cf 91       	pop	r28
    635a:	08 95       	ret

0000635c <lcd_putch>:

/// @brief  put character 
/// @param[in] c: character
/// return: void
void lcd_putch(int c)
{
    635c:	cf 93       	push	r28
    635e:	df 93       	push	r29
	int rem;

	if(c < 0 || c > 0x7e)
    6360:	8f 37       	cpi	r24, 0x7F	; 127
    6362:	91 05       	cpc	r25, r1
    6364:	08 f0       	brcs	.+2      	; 0x6368 <lcd_putch+0xc>
    6366:	50 c0       	rjmp	.+160    	; 0x6408 <lcd_putch+0xac>
    6368:	ec 01       	movw	r28, r24
		return;

	// Normal visible characters
	if(c >= ' ')
    636a:	80 32       	cpi	r24, 0x20	; 32
    636c:	91 05       	cpc	r25, r1
    636e:	4c f1       	brlt	.+82     	; 0x63c2 <lcd_putch+0x66>
	{
		rem = (lcd.w - 1 - lcd.xpos);
		if( rem <= 0 )
    6370:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <lcd+0x4>
    6374:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <lcd+0x5>
    6378:	01 97       	sbiw	r24, 0x01	; 1
    637a:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <lcd>
    637e:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <lcd+0x1>
    6382:	82 1b       	sub	r24, r18
    6384:	93 0b       	sbc	r25, r19
    6386:	18 16       	cp	r1, r24
    6388:	19 06       	cpc	r1, r25
    638a:	7c f0       	brlt	.+30     	; 0x63aa <lcd_putch+0x4e>
		{
			LCD_pos(++lcd.ypos,lcd.xpos=0);
    638c:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <lcd+0x1>
    6390:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <lcd>
    6394:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <lcd+0x2>
    6398:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <lcd+0x3>
    639c:	01 96       	adiw	r24, 0x01	; 1
    639e:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <lcd+0x3>
    63a2:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <lcd+0x2>
    63a6:	60 e0       	ldi	r22, 0x00	; 0
		}
		(void) LCD_putb(c);
    63a8:	4e df       	rcall	.-356    	; 0x6246 <LCD_pos>
    63aa:	8c 2f       	mov	r24, r28
		// uart_putchar(c,0);
		lcd.xpos++;
    63ac:	f4 de       	rcall	.-536    	; 0x6196 <LCD_putb>
    63ae:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <lcd>
    63b2:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <lcd+0x1>
    63b6:	01 96       	adiw	r24, 0x01	; 1
    63b8:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <lcd+0x1>
    63bc:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <lcd>
		return;
	}

	// Control characters
	if(c == '\n')
    63c0:	23 c0       	rjmp	.+70     	; 0x6408 <lcd_putch+0xac>
    63c2:	8a 30       	cpi	r24, 0x0A	; 10
	{
		// uart_putchar(c,0);
		lcd_cleareol();
    63c4:	91 05       	cpc	r25, r1
    63c6:	91 f4       	brne	.+36     	; 0x63ec <lcd_putch+0x90>
		++lcd.ypos;
		lcd.ypos &= 3;
    63c8:	a6 df       	rcall	.-180    	; 0x6316 <lcd_cleareol>
    63ca:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <lcd+0x2>
    63ce:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <lcd+0x3>
    63d2:	6f 5f       	subi	r22, 0xFF	; 255
    63d4:	7f 4f       	sbci	r23, 0xFF	; 255
    63d6:	63 70       	andi	r22, 0x03	; 3
    63d8:	77 27       	eor	r23, r23
    63da:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <lcd+0x3>
    63de:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <lcd+0x2>
		LCD_pos(lcd.xpos=0,lcd.ypos);
    63e2:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <lcd+0x1>
    63e6:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <lcd>
	}

	if(c == '\f')
    63ea:	0c c0       	rjmp	.+24     	; 0x6404 <lcd_putch+0xa8>
	{
		LCD_clear();
    63ec:	0c 97       	sbiw	r24, 0x0c	; 12
    63ee:	61 f4       	brne	.+24     	; 0x6408 <lcd_putch+0xac>
		LCD_pos(lcd.xpos=0,lcd.ypos=0);
    63f0:	36 df       	rcall	.-404    	; 0x625e <LCD_clear>
    63f2:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <lcd+0x3>
    63f6:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <lcd+0x2>
    63fa:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <lcd+0x1>
    63fe:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <lcd>
    6402:	60 e0       	ldi	r22, 0x00	; 0
    6404:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    6406:	1f df       	rcall	.-450    	; 0x6246 <LCD_pos>
    6408:	df 91       	pop	r29
    640a:	cf 91       	pop	r28
    640c:	08 95       	ret

0000640e <_putc_win>:


// We do not use the printf structure
static void _putc_win(struct _printf_t *p, char ch)
{
    640e:	fc 01       	movw	r30, r24
	p->sent++;
    6410:	26 81       	ldd	r18, Z+6	; 0x06
    6412:	37 81       	ldd	r19, Z+7	; 0x07
    6414:	2f 5f       	subi	r18, 0xFF	; 255
    6416:	3f 4f       	sbci	r19, 0xFF	; 255
    6418:	37 83       	std	Z+7, r19	; 0x07
    641a:	26 83       	std	Z+6, r18	; 0x06
	lcd_putch(ch);
    641c:	86 2f       	mov	r24, r22
    641e:	90 e0       	ldi	r25, 0x00	; 0
    6420:	9d cf       	rjmp	.-198    	; 0x635c <lcd_putch>
    6422:	08 95       	ret

00006424 <lcd_printf>:
/// @param[in] fmt: printf forat string
/// @param[in] ...: vararg list or arguments
/// @return size of string
MEMSPACE
int lcd_printf(const char *fmt, ... )
{
    6424:	a8 e0       	ldi	r26, 0x08	; 8
    6426:	b0 e0       	ldi	r27, 0x00	; 0
    6428:	e8 e1       	ldi	r30, 0x18	; 24
    642a:	f2 e3       	ldi	r31, 0x32	; 50
    642c:	0c 94 f0 e5 	jmp	0x1cbe0	; 0x1cbe0 <__prologue_saves__+0x20>
    6430:	9e 01       	movw	r18, r28
    6432:	23 5f       	subi	r18, 0xF3	; 243
    6434:	3f 4f       	sbci	r19, 0xFF	; 255
    6436:	f9 01       	movw	r30, r18
    6438:	41 91       	ld	r20, Z+
    643a:	51 91       	ld	r21, Z+
    643c:	9f 01       	movw	r18, r30
    printf_t fn;

    fn.put = _putc_win;
    643e:	87 e0       	ldi	r24, 0x07	; 7
    6440:	92 e3       	ldi	r25, 0x32	; 50
    6442:	9a 83       	std	Y+2, r25	; 0x02
    6444:	89 83       	std	Y+1, r24	; 0x01
    fn.sent = 0;
    6446:	18 86       	std	Y+8, r1	; 0x08
    6448:	1f 82       	std	Y+7, r1	; 0x07

    va_list va;
    va_start(va, fmt);

    _printf_fn(&fn, fmt, va);
    644a:	60 e8       	ldi	r22, 0x80	; 128
    644c:	ce 01       	movw	r24, r28
    644e:	01 96       	adiw	r24, 0x01	; 1
    6450:	0e 94 f3 42 	call	0x85e6	; 0x85e6 <_printf_fn>

    va_end(va);

	return(fn.sent);

}
    6454:	8f 81       	ldd	r24, Y+7	; 0x07
    6456:	98 85       	ldd	r25, Y+8	; 0x08
    6458:	28 96       	adiw	r28, 0x08	; 8
    645a:	e2 e0       	ldi	r30, 0x02	; 2
    645c:	0c 94 0c e6 	jmp	0x1cc18	; 0x1cc18 <__epilogue_restores__+0x20>

00006460 <sep>:
    {
        if(strncmp(str,pat,len) == 0 )
            return(len);
    }
    return(0);
}
    6460:	8e ef       	ldi	r24, 0xFE	; 254
    6462:	94 e0       	ldi	r25, 0x04	; 4
    6464:	1f 92       	push	r1
    6466:	9f 93       	push	r25
    6468:	8f 93       	push	r24
    646a:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    646e:	0f 90       	pop	r0
    6470:	0f 90       	pop	r0
    6472:	0f 90       	pop	r0
    6474:	08 95       	ret

00006476 <islower>:
    6476:	9c 01       	movw	r18, r24
    6478:	21 56       	subi	r18, 0x61	; 97
    647a:	31 09       	sbc	r19, r1
    647c:	81 e0       	ldi	r24, 0x01	; 1
    647e:	90 e0       	ldi	r25, 0x00	; 0
    6480:	2a 31       	cpi	r18, 0x1A	; 26
    6482:	31 05       	cpc	r19, r1
    6484:	10 f0       	brcs	.+4      	; 0x648a <islower+0x14>
    6486:	80 e0       	ldi	r24, 0x00	; 0
    6488:	90 e0       	ldi	r25, 0x00	; 0
    648a:	08 95       	ret

0000648c <toupper>:
    648c:	cf 93       	push	r28
    648e:	df 93       	push	r29
    6490:	ec 01       	movw	r28, r24
    6492:	f1 df       	rcall	.-30     	; 0x6476 <islower>
    6494:	89 2b       	or	r24, r25
    6496:	19 f0       	breq	.+6      	; 0x649e <toupper+0x12>
    6498:	ce 01       	movw	r24, r28
    649a:	80 97       	sbiw	r24, 0x20	; 32
    649c:	01 c0       	rjmp	.+2      	; 0x64a0 <toupper+0x14>
    649e:	ce 01       	movw	r24, r28
    64a0:	df 91       	pop	r29
    64a2:	cf 91       	pop	r28
    64a4:	08 95       	ret

000064a6 <strcpy>:
    64a6:	fc 01       	movw	r30, r24
    64a8:	db 01       	movw	r26, r22
    64aa:	2d 91       	ld	r18, X+
    64ac:	bd 01       	movw	r22, r26
    64ae:	01 96       	adiw	r24, 0x01	; 1
    64b0:	22 23       	and	r18, r18
    64b2:	11 f0       	breq	.+4      	; 0x64b8 <strcpy+0x12>
    64b4:	20 83       	st	Z, r18
    64b6:	f7 cf       	rjmp	.-18     	; 0x64a6 <strcpy>
    64b8:	10 82       	st	Z, r1
    64ba:	08 95       	ret

000064bc <strncpy>:
    64bc:	db 01       	movw	r26, r22
    64be:	fc 01       	movw	r30, r24
    64c0:	2d 91       	ld	r18, X+
    64c2:	21 11       	cpse	r18, r1
    64c4:	03 c0       	rjmp	.+6      	; 0x64cc <strncpy+0x10>
    64c6:	4e 0f       	add	r20, r30
    64c8:	5f 1f       	adc	r21, r31
    64ca:	08 c0       	rjmp	.+16     	; 0x64dc <strncpy+0x20>
    64cc:	41 15       	cp	r20, r1
    64ce:	51 05       	cpc	r21, r1
    64d0:	21 f0       	breq	.+8      	; 0x64da <strncpy+0x1e>
    64d2:	21 93       	st	Z+, r18
    64d4:	41 50       	subi	r20, 0x01	; 1
    64d6:	51 09       	sbc	r21, r1
    64d8:	f3 cf       	rjmp	.-26     	; 0x64c0 <strncpy+0x4>
    64da:	08 95       	ret
    64dc:	4e 17       	cp	r20, r30
    64de:	5f 07       	cpc	r21, r31
    64e0:	11 f0       	breq	.+4      	; 0x64e6 <strncpy+0x2a>
    64e2:	11 92       	st	Z+, r1
    64e4:	fb cf       	rjmp	.-10     	; 0x64dc <strncpy+0x20>
    64e6:	08 95       	ret

000064e8 <strcat>:
    64e8:	cf 93       	push	r28
    64ea:	df 93       	push	r29
    64ec:	d8 2f       	mov	r29, r24
    64ee:	c9 2f       	mov	r28, r25
    64f0:	28 2f       	mov	r18, r24
    64f2:	39 2f       	mov	r19, r25
    64f4:	c9 01       	movw	r24, r18
    64f6:	2f 5f       	subi	r18, 0xFF	; 255
    64f8:	3f 4f       	sbci	r19, 0xFF	; 255
    64fa:	fc 01       	movw	r30, r24
    64fc:	40 81       	ld	r20, Z
    64fe:	41 11       	cpse	r20, r1
    6500:	f9 cf       	rjmp	.-14     	; 0x64f4 <strcat+0xc>
    6502:	d1 df       	rcall	.-94     	; 0x64a6 <strcpy>
    6504:	8d 2f       	mov	r24, r29
    6506:	9c 2f       	mov	r25, r28
    6508:	df 91       	pop	r29
    650a:	cf 91       	pop	r28
    650c:	08 95       	ret

0000650e <reverse>:
    650e:	fc 01       	movw	r30, r24
    6510:	01 90       	ld	r0, Z+
    6512:	00 20       	and	r0, r0
    6514:	e9 f7       	brne	.-6      	; 0x6510 <reverse+0x2>
    6516:	31 97       	sbiw	r30, 0x01	; 1
    6518:	e8 1b       	sub	r30, r24
    651a:	f9 0b       	sbc	r31, r25
    651c:	af 01       	movw	r20, r30
    651e:	55 95       	asr	r21
    6520:	47 95       	ror	r20
    6522:	e8 0f       	add	r30, r24
    6524:	f9 1f       	adc	r31, r25
    6526:	dc 01       	movw	r26, r24
    6528:	9d 01       	movw	r18, r26
    652a:	28 1b       	sub	r18, r24
    652c:	39 0b       	sbc	r19, r25
    652e:	24 17       	cp	r18, r20
    6530:	35 07       	cpc	r19, r21
    6532:	2c f4       	brge	.+10     	; 0x653e <reverse+0x30>
    6534:	22 91       	ld	r18, -Z
    6536:	3c 91       	ld	r19, X
    6538:	30 83       	st	Z, r19
    653a:	2d 93       	st	X+, r18
    653c:	f5 cf       	rjmp	.-22     	; 0x6528 <reverse+0x1a>
    653e:	08 95       	ret

00006540 <strupper>:
    6540:	cf 93       	push	r28
    6542:	df 93       	push	r29
    6544:	ec 01       	movw	r28, r24
    6546:	88 81       	ld	r24, Y
    6548:	88 23       	and	r24, r24
    654a:	21 f0       	breq	.+8      	; 0x6554 <strupper+0x14>
    654c:	90 e0       	ldi	r25, 0x00	; 0
    654e:	9e df       	rcall	.-196    	; 0x648c <toupper>
    6550:	89 93       	st	Y+, r24
    6552:	f9 cf       	rjmp	.-14     	; 0x6546 <strupper+0x6>
    6554:	df 91       	pop	r29
    6556:	cf 91       	pop	r28
    6558:	08 95       	ret

0000655a <trim_tail>:
    655a:	00 97       	sbiw	r24, 0x00	; 0
    655c:	69 f0       	breq	.+26     	; 0x6578 <trim_tail+0x1e>
    655e:	fc 01       	movw	r30, r24
    6560:	01 90       	ld	r0, Z+
    6562:	00 20       	and	r0, r0
    6564:	e9 f7       	brne	.-6      	; 0x6560 <trim_tail+0x6>
    6566:	31 97       	sbiw	r30, 0x01	; 1
    6568:	e8 17       	cp	r30, r24
    656a:	f9 07       	cpc	r31, r25
    656c:	29 f0       	breq	.+10     	; 0x6578 <trim_tail+0x1e>
    656e:	22 91       	ld	r18, -Z
    6570:	21 32       	cpi	r18, 0x21	; 33
    6572:	10 f4       	brcc	.+4      	; 0x6578 <trim_tail+0x1e>
    6574:	10 82       	st	Z, r1
    6576:	f8 cf       	rjmp	.-16     	; 0x6568 <trim_tail+0xe>
    6578:	08 95       	ret

0000657a <skipspaces>:
    657a:	00 97       	sbiw	r24, 0x00	; 0
    657c:	39 f0       	breq	.+14     	; 0x658c <skipspaces+0x12>
    657e:	fc 01       	movw	r30, r24
    6580:	cf 01       	movw	r24, r30
    6582:	21 91       	ld	r18, Z+
    6584:	20 32       	cpi	r18, 0x20	; 32
    6586:	e1 f3       	breq	.-8      	; 0x6580 <skipspaces+0x6>
    6588:	29 30       	cpi	r18, 0x09	; 9
    658a:	d1 f3       	breq	.-12     	; 0x6580 <skipspaces+0x6>
    658c:	08 95       	ret

0000658e <strcmp>:
    658e:	dc 01       	movw	r26, r24
    6590:	fb 01       	movw	r30, r22
    6592:	2d 91       	ld	r18, X+
    6594:	41 91       	ld	r20, Z+
    6596:	50 e0       	ldi	r21, 0x00	; 0
    6598:	30 e0       	ldi	r19, 0x00	; 0
    659a:	c9 01       	movw	r24, r18
    659c:	84 1b       	sub	r24, r20
    659e:	95 0b       	sbc	r25, r21
    65a0:	11 f4       	brne	.+4      	; 0x65a6 <strcmp+0x18>
    65a2:	45 2b       	or	r20, r21
    65a4:	b1 f7       	brne	.-20     	; 0x6592 <strcmp+0x4>
    65a6:	08 95       	ret

000065a8 <strncmp>:
    65a8:	fc 01       	movw	r30, r24
    65aa:	db 01       	movw	r26, r22
    65ac:	48 0f       	add	r20, r24
    65ae:	59 1f       	adc	r21, r25
    65b0:	e4 17       	cp	r30, r20
    65b2:	f5 07       	cpc	r31, r21
    65b4:	59 f0       	breq	.+22     	; 0x65cc <strncmp+0x24>
    65b6:	21 91       	ld	r18, Z+
    65b8:	6d 91       	ld	r22, X+
    65ba:	70 e0       	ldi	r23, 0x00	; 0
    65bc:	30 e0       	ldi	r19, 0x00	; 0
    65be:	c9 01       	movw	r24, r18
    65c0:	86 1b       	sub	r24, r22
    65c2:	97 0b       	sbc	r25, r23
    65c4:	29 f4       	brne	.+10     	; 0x65d0 <strncmp+0x28>
    65c6:	67 2b       	or	r22, r23
    65c8:	99 f7       	brne	.-26     	; 0x65b0 <strncmp+0x8>
    65ca:	02 c0       	rjmp	.+4      	; 0x65d0 <strncmp+0x28>
    65cc:	80 e0       	ldi	r24, 0x00	; 0
    65ce:	90 e0       	ldi	r25, 0x00	; 0
    65d0:	08 95       	ret

000065d2 <strcasecmp>:
    65d2:	ef 92       	push	r14
    65d4:	ff 92       	push	r15
    65d6:	0f 93       	push	r16
    65d8:	1f 93       	push	r17
    65da:	cf 93       	push	r28
    65dc:	df 93       	push	r29
    65de:	7c 01       	movw	r14, r24
    65e0:	8b 01       	movw	r16, r22
    65e2:	f7 01       	movw	r30, r14
    65e4:	81 91       	ld	r24, Z+
    65e6:	7f 01       	movw	r14, r30
    65e8:	90 e0       	ldi	r25, 0x00	; 0
    65ea:	50 df       	rcall	.-352    	; 0x648c <toupper>
    65ec:	ec 01       	movw	r28, r24
    65ee:	f8 01       	movw	r30, r16
    65f0:	81 91       	ld	r24, Z+
    65f2:	8f 01       	movw	r16, r30
    65f4:	90 e0       	ldi	r25, 0x00	; 0
    65f6:	4a df       	rcall	.-364    	; 0x648c <toupper>
    65f8:	9c 01       	movw	r18, r24
    65fa:	ce 01       	movw	r24, r28
    65fc:	82 1b       	sub	r24, r18
    65fe:	93 0b       	sbc	r25, r19
    6600:	11 f4       	brne	.+4      	; 0x6606 <strcasecmp+0x34>
    6602:	23 2b       	or	r18, r19
    6604:	71 f7       	brne	.-36     	; 0x65e2 <strcasecmp+0x10>
    6606:	cd b7       	in	r28, 0x3d	; 61
    6608:	de b7       	in	r29, 0x3e	; 62
    660a:	e6 e0       	ldi	r30, 0x06	; 6
    660c:	0c 94 08 e6 	jmp	0x1cc10	; 0x1cc10 <__epilogue_restores__+0x18>

00006610 <strncasecmp>:
    6610:	a0 e0       	ldi	r26, 0x00	; 0
    6612:	b0 e0       	ldi	r27, 0x00	; 0
    6614:	ee e0       	ldi	r30, 0x0E	; 14
    6616:	f3 e3       	ldi	r31, 0x33	; 51
    6618:	0c 94 ea e5 	jmp	0x1cbd4	; 0x1cbd4 <__prologue_saves__+0x14>
    661c:	8c 01       	movw	r16, r24
    661e:	7b 01       	movw	r14, r22
    6620:	6c 01       	movw	r12, r24
    6622:	c4 0e       	add	r12, r20
    6624:	d5 1e       	adc	r13, r21
    6626:	0c 15       	cp	r16, r12
    6628:	1d 05       	cpc	r17, r13
    662a:	99 f0       	breq	.+38     	; 0x6652 <strncasecmp+0x42>
    662c:	f8 01       	movw	r30, r16
    662e:	81 91       	ld	r24, Z+
    6630:	8f 01       	movw	r16, r30
    6632:	90 e0       	ldi	r25, 0x00	; 0
    6634:	2b df       	rcall	.-426    	; 0x648c <toupper>
    6636:	ec 01       	movw	r28, r24
    6638:	f7 01       	movw	r30, r14
    663a:	81 91       	ld	r24, Z+
    663c:	7f 01       	movw	r14, r30
    663e:	90 e0       	ldi	r25, 0x00	; 0
    6640:	25 df       	rcall	.-438    	; 0x648c <toupper>
    6642:	9c 01       	movw	r18, r24
    6644:	ce 01       	movw	r24, r28
    6646:	82 1b       	sub	r24, r18
    6648:	93 0b       	sbc	r25, r19
    664a:	29 f4       	brne	.+10     	; 0x6656 <strncasecmp+0x46>
    664c:	23 2b       	or	r18, r19
    664e:	59 f7       	brne	.-42     	; 0x6626 <strncasecmp+0x16>
    6650:	02 c0       	rjmp	.+4      	; 0x6656 <strncasecmp+0x46>
    6652:	80 e0       	ldi	r24, 0x00	; 0
    6654:	90 e0       	ldi	r25, 0x00	; 0
    6656:	cd b7       	in	r28, 0x3d	; 61
    6658:	de b7       	in	r29, 0x3e	; 62
    665a:	e8 e0       	ldi	r30, 0x08	; 8
    665c:	0c 94 06 e6 	jmp	0x1cc0c	; 0x1cc0c <__epilogue_restores__+0x14>

00006660 <MATCH>:
    6660:	cf 93       	push	r28
    6662:	df 93       	push	r29
    6664:	fb 01       	movw	r30, r22
    6666:	01 90       	ld	r0, Z+
    6668:	00 20       	and	r0, r0
    666a:	e9 f7       	brne	.-6      	; 0x6666 <MATCH+0x6>
    666c:	31 97       	sbiw	r30, 0x01	; 1
    666e:	ef 01       	movw	r28, r30
    6670:	c6 1b       	sub	r28, r22
    6672:	d7 0b       	sbc	r29, r23
    6674:	8c df       	rcall	.-232    	; 0x658e <strcmp>
    6676:	89 2b       	or	r24, r25
    6678:	11 f4       	brne	.+4      	; 0x667e <MATCH+0x1e>
    667a:	ce 01       	movw	r24, r28
    667c:	02 c0       	rjmp	.+4      	; 0x6682 <MATCH+0x22>
    667e:	80 e0       	ldi	r24, 0x00	; 0
    6680:	90 e0       	ldi	r25, 0x00	; 0
    6682:	df 91       	pop	r29
    6684:	cf 91       	pop	r28
    6686:	08 95       	ret

00006688 <MATCHARGS>:
    6688:	ef 92       	push	r14
    668a:	ff 92       	push	r15
    668c:	0f 93       	push	r16
    668e:	1f 93       	push	r17
    6690:	cf 93       	push	r28
    6692:	df 93       	push	r29
    6694:	f6 2e       	mov	r15, r22
    6696:	e7 2e       	mov	r14, r23
    6698:	ea 01       	movw	r28, r20
    669a:	89 01       	movw	r16, r18
    669c:	e1 df       	rcall	.-62     	; 0x6660 <MATCH>
    669e:	00 97       	sbiw	r24, 0x00	; 0
    66a0:	e9 f0       	breq	.+58     	; 0x66dc <MATCHARGS+0x54>
    66a2:	0c 17       	cp	r16, r28
    66a4:	1d 07       	cpc	r17, r29
    66a6:	c4 f4       	brge	.+48     	; 0x66d8 <MATCHARGS+0x50>
    66a8:	1f 93       	push	r17
    66aa:	0f 93       	push	r16
    66ac:	df 93       	push	r29
    66ae:	cf 93       	push	r28
    66b0:	ef 92       	push	r14
    66b2:	ff 92       	push	r15
    66b4:	88 ed       	ldi	r24, 0xD8	; 216
    66b6:	94 e0       	ldi	r25, 0x04	; 4
    66b8:	1f 92       	push	r1
    66ba:	9f 93       	push	r25
    66bc:	8f 93       	push	r24
    66be:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    66c2:	8d b7       	in	r24, 0x3d	; 61
    66c4:	9e b7       	in	r25, 0x3e	; 62
    66c6:	09 96       	adiw	r24, 0x09	; 9
    66c8:	0f b6       	in	r0, 0x3f	; 63
    66ca:	f8 94       	cli
    66cc:	9e bf       	out	0x3e, r25	; 62
    66ce:	0f be       	out	0x3f, r0	; 63
    66d0:	8d bf       	out	0x3d, r24	; 61
    66d2:	80 e0       	ldi	r24, 0x00	; 0
    66d4:	90 e0       	ldi	r25, 0x00	; 0
    66d6:	02 c0       	rjmp	.+4      	; 0x66dc <MATCHARGS+0x54>
    66d8:	81 e0       	ldi	r24, 0x01	; 1
    66da:	90 e0       	ldi	r25, 0x00	; 0
    66dc:	cd b7       	in	r28, 0x3d	; 61
    66de:	de b7       	in	r29, 0x3e	; 62
    66e0:	e6 e0       	ldi	r30, 0x06	; 6
    66e2:	0c 94 08 e6 	jmp	0x1cc10	; 0x1cc10 <__epilogue_restores__+0x18>

000066e6 <MATCHI>:
    66e6:	cf 93       	push	r28
    66e8:	df 93       	push	r29
    66ea:	fb 01       	movw	r30, r22
    66ec:	01 90       	ld	r0, Z+
    66ee:	00 20       	and	r0, r0
    66f0:	e9 f7       	brne	.-6      	; 0x66ec <MATCHI+0x6>
    66f2:	31 97       	sbiw	r30, 0x01	; 1
    66f4:	ef 01       	movw	r28, r30
    66f6:	c6 1b       	sub	r28, r22
    66f8:	d7 0b       	sbc	r29, r23
    66fa:	6b df       	rcall	.-298    	; 0x65d2 <strcasecmp>
    66fc:	89 2b       	or	r24, r25
    66fe:	11 f4       	brne	.+4      	; 0x6704 <MATCHI+0x1e>
    6700:	ce 01       	movw	r24, r28
    6702:	02 c0       	rjmp	.+4      	; 0x6708 <MATCHI+0x22>
    6704:	80 e0       	ldi	r24, 0x00	; 0
    6706:	90 e0       	ldi	r25, 0x00	; 0
    6708:	df 91       	pop	r29
    670a:	cf 91       	pop	r28
    670c:	08 95       	ret

0000670e <MATCHI_LEN>:
///@return string lenth on match.
///@return 0 on no match.
///@warning Matches sub strings so be caeful.
MEMSPACE
int MATCHI_LEN(char *str, char *pat)
{
    670e:	cf 93       	push	r28
    6710:	df 93       	push	r29
    int len;

    if(!str || !pat)
    6712:	00 97       	sbiw	r24, 0x00	; 0
    6714:	89 f0       	breq	.+34     	; 0x6738 <MATCHI_LEN+0x2a>
    6716:	61 15       	cp	r22, r1
    6718:	71 05       	cpc	r23, r1
    671a:	71 f0       	breq	.+28     	; 0x6738 <MATCHI_LEN+0x2a>
        return(0);
    len = strlen(pat);
    671c:	eb 01       	movw	r28, r22
    671e:	09 90       	ld	r0, Y+
    6720:	00 20       	and	r0, r0
    6722:	e9 f7       	brne	.-6      	; 0x671e <MATCHI_LEN+0x10>
    6724:	21 97       	sbiw	r28, 0x01	; 1
    6726:	c6 1b       	sub	r28, r22
    6728:	d7 0b       	sbc	r29, r23

    if( len )
    672a:	31 f0       	breq	.+12     	; 0x6738 <MATCHI_LEN+0x2a>
    {
        if(strncasecmp(str,pat,len) == 0 )
    672c:	ae 01       	movw	r20, r28
    672e:	70 df       	rcall	.-288    	; 0x6610 <strncasecmp>
    6730:	89 2b       	or	r24, r25
    6732:	11 f4       	brne	.+4      	; 0x6738 <MATCHI_LEN+0x2a>
    6734:	ce 01       	movw	r24, r28
    6736:	02 c0       	rjmp	.+4      	; 0x673c <MATCHI_LEN+0x2e>
int MATCHI_LEN(char *str, char *pat)
{
    int len;

    if(!str || !pat)
        return(0);
    6738:	80 e0       	ldi	r24, 0x00	; 0
    673a:	90 e0       	ldi	r25, 0x00	; 0
    {
        if(strncasecmp(str,pat,len) == 0 )
            return(len);
    }
    return(0);
}
    673c:	df 91       	pop	r29
    673e:	cf 91       	pop	r28
    6740:	08 95       	ret

00006742 <split_args>:
///@param[out] *argv[]: token array
///@param[in] max: maximum argument count
///@return count
MEMSPACE
int split_args(char *str, char *argv[], int max)
{
    6742:	a0 e0       	ldi	r26, 0x00	; 0
    6744:	b0 e0       	ldi	r27, 0x00	; 0
    6746:	e7 ea       	ldi	r30, 0xA7	; 167
    6748:	f3 e3       	ldi	r31, 0x33	; 51
    674a:	0c 94 ea e5 	jmp	0x1cbd4	; 0x1cbd4 <__prologue_saves__+0x14>
    674e:	dc 01       	movw	r26, r24
    6750:	6a 01       	movw	r12, r20
    6752:	8b 01       	movw	r16, r22
    int i;
    int count = 0;
    // NULL ?

    for(i=0;i<max;++i)
    6754:	fb 01       	movw	r30, r22
    6756:	80 e0       	ldi	r24, 0x00	; 0
    6758:	90 e0       	ldi	r25, 0x00	; 0
    675a:	8c 15       	cp	r24, r12
    675c:	9d 05       	cpc	r25, r13
    675e:	24 f4       	brge	.+8      	; 0x6768 <split_args+0x26>
        argv[i] = NULL; 
    6760:	11 92       	st	Z+, r1
    6762:	11 92       	st	Z+, r1
{
    int i;
    int count = 0;
    // NULL ?

    for(i=0;i<max;++i)
    6764:	01 96       	adiw	r24, 0x01	; 1
    6766:	f9 cf       	rjmp	.-14     	; 0x675a <split_args+0x18>
        argv[i] = NULL; 

    // You may replace argv[0]
    // argv[count++] = "main";

    if(!max)
    6768:	c1 14       	cp	r12, r1
    676a:	d1 04       	cpc	r13, r1
    676c:	d9 f1       	breq	.+118    	; 0x67e4 <split_args+0xa2>
        return(0);

    if(!str)
    676e:	10 97       	sbiw	r26, 0x00	; 0
    6770:	c9 f1       	breq	.+114    	; 0x67e4 <split_args+0xa2>
    6772:	ee 24       	eor	r14, r14
    6774:	e3 94       	inc	r14
    6776:	f1 2c       	mov	r15, r1
    6778:	c0 e0       	ldi	r28, 0x00	; 0
    677a:	d0 e0       	ldi	r29, 0x00	; 0
        return(0);

    while(*str && count < max)
    677c:	8c 91       	ld	r24, X
    677e:	88 23       	and	r24, r24
    6780:	b1 f1       	breq	.+108    	; 0x67ee <split_args+0xac>
    6782:	cc 15       	cp	r28, r12
    6784:	dd 05       	cpc	r29, r13
    6786:	9c f5       	brge	.+102    	; 0x67ee <split_args+0xac>
    {
        str = skipspaces(str);
    6788:	cd 01       	movw	r24, r26
    678a:	f7 de       	rcall	.-530    	; 0x657a <skipspaces>
        if(!*str)
    678c:	dc 01       	movw	r26, r24
    678e:	2c 91       	ld	r18, X
    6790:	22 23       	and	r18, r18
    6792:	69 f1       	breq	.+90     	; 0x67ee <split_args+0xac>
            break;

        // string processing
        if(*str == '"')
    6794:	22 32       	cpi	r18, 0x22	; 34
    6796:	79 f4       	brne	.+30     	; 0x67b6 <split_args+0x74>
        {
            ++str;
    6798:	fc 01       	movw	r30, r24
    679a:	31 96       	adiw	r30, 0x01	; 1
            // Save string pointer
            argv[count++] = str;
    679c:	d8 01       	movw	r26, r16
    679e:	ed 93       	st	X+, r30
    67a0:	fc 93       	st	X, r31
    67a2:	df 01       	movw	r26, r30
            while(*str && *str != '"')
    67a4:	80 81       	ld	r24, Z
    67a6:	31 96       	adiw	r30, 0x01	; 1
    67a8:	88 23       	and	r24, r24
    67aa:	a9 f0       	breq	.+42     	; 0x67d6 <split_args+0x94>
    67ac:	82 32       	cpi	r24, 0x22	; 34
    67ae:	c9 f7       	brne	.-14     	; 0x67a2 <split_args+0x60>
                ++str;
            if(*str == '"')
                *str++ = 0;
    67b0:	1c 92       	st	X, r1
    67b2:	df 01       	movw	r26, r30
    67b4:	10 c0       	rjmp	.+32     	; 0x67d6 <split_args+0x94>
            continue;
        }

        argv[count++] = str;
    67b6:	f8 01       	movw	r30, r16
    67b8:	91 83       	std	Z+1, r25	; 0x01
    67ba:	80 83       	st	Z, r24
    67bc:	fc 01       	movw	r30, r24
    67be:	2e 2f       	mov	r18, r30
    67c0:	9f 2f       	mov	r25, r31
        // Find size of token
        while(*str > ' ' && *str <= 0x7e)
    67c2:	81 91       	ld	r24, Z+
    67c4:	3f ed       	ldi	r19, 0xDF	; 223
    67c6:	38 0f       	add	r19, r24
    67c8:	3e 35       	cpi	r19, 0x5E	; 94
    67ca:	c8 f3       	brcs	.-14     	; 0x67be <split_args+0x7c>
            ++str;
        if(!*str)
    67cc:	88 23       	and	r24, r24
    67ce:	69 f0       	breq	.+26     	; 0x67ea <split_args+0xa8>
            break;
        *str  = 0;
    67d0:	a2 2f       	mov	r26, r18
    67d2:	b9 2f       	mov	r27, r25
    67d4:	1d 92       	st	X+, r1
    67d6:	21 96       	adiw	r28, 0x01	; 1
    67d8:	ff ef       	ldi	r31, 0xFF	; 255
    67da:	ef 1a       	sub	r14, r31
    67dc:	ff 0a       	sbc	r15, r31
    67de:	0e 5f       	subi	r16, 0xFE	; 254
    67e0:	1f 4f       	sbci	r17, 0xFF	; 255
    67e2:	cc cf       	rjmp	.-104    	; 0x677c <split_args+0x3a>

    // You may replace argv[0]
    // argv[count++] = "main";

    if(!max)
        return(0);
    67e4:	80 e0       	ldi	r24, 0x00	; 0
    67e6:	90 e0       	ldi	r25, 0x00	; 0
    67e8:	03 c0       	rjmp	.+6      	; 0x67f0 <split_args+0xae>
            if(*str == '"')
                *str++ = 0;
            continue;
        }

        argv[count++] = str;
    67ea:	c7 01       	movw	r24, r14
    67ec:	01 c0       	rjmp	.+2      	; 0x67f0 <split_args+0xae>
    67ee:	ce 01       	movw	r24, r28
            break;
        *str  = 0;
        ++str;
    }
    return(count);
}
    67f0:	cd b7       	in	r28, 0x3d	; 61
    67f2:	de b7       	in	r29, 0x3e	; 62
    67f4:	e8 e0       	ldi	r30, 0x08	; 8
    67f6:	0c 94 06 e6 	jmp	0x1cc0c	; 0x1cc0c <__epilogue_restores__+0x14>

000067fa <get_token>:
///
///@return pointer past token on success .
///@return NULL if no token found
MEMSPACE
char *get_token(char *str, char *token, int max)
{
    67fa:	ef 92       	push	r14
    67fc:	ff 92       	push	r15
    67fe:	0f 93       	push	r16
    6800:	1f 93       	push	r17
    6802:	cf 93       	push	r28
    6804:	df 93       	push	r29
    6806:	eb 01       	movw	r28, r22
    6808:	8a 01       	movw	r16, r20

	*token = 0;
    680a:	18 82       	st	Y, r1

    if(!str || *str == 0)
    680c:	00 97       	sbiw	r24, 0x00	; 0
    680e:	89 f1       	breq	.+98     	; 0x6872 <get_token+0x78>
    6810:	fc 01       	movw	r30, r24
    6812:	20 81       	ld	r18, Z
    6814:	22 23       	and	r18, r18
        return(str);

    // Skip beginning spaces
    str = skipspaces(str);
    6816:	79 f1       	breq	.+94     	; 0x6876 <get_token+0x7c>
    // Delete all trailing spaces
    trim_tail(str);
    6818:	b0 de       	rcall	.-672    	; 0x657a <skipspaces>
    681a:	7c 01       	movw	r14, r24
    681c:	9e de       	rcall	.-708    	; 0x655a <trim_tail>
    681e:	f7 01       	movw	r30, r14

    while(*str > ' ' && max > 0) {
    6820:	cf 01       	movw	r24, r30
    6822:	21 91       	ld	r18, Z+
    6824:	21 32       	cpi	r18, 0x21	; 33
    6826:	e0 f0       	brcs	.+56     	; 0x6860 <get_token+0x66>
    6828:	10 16       	cp	r1, r16
    682a:	11 06       	cpc	r1, r17

        // String processing
        // A token can be a quoted string
        if(*str == '"')
    682c:	cc f4       	brge	.+50     	; 0x6860 <get_token+0x66>
    682e:	22 32       	cpi	r18, 0x22	; 34
    6830:	79 f4       	brne	.+30     	; 0x6850 <get_token+0x56>
    6832:	fc 01       	movw	r30, r24
    6834:	31 96       	adiw	r30, 0x01	; 1
    6836:	0c 0f       	add	r16, r28
    6838:	1d 1f       	adc	r17, r29
        {
            ++str;
            // We are pointing at the body of the quoted string now
            while(*str && *str != '"' && max > 0)
    683a:	cf 01       	movw	r24, r30
    683c:	21 91       	ld	r18, Z+
    683e:	22 23       	and	r18, r18
    6840:	79 f0       	breq	.+30     	; 0x6860 <get_token+0x66>
    6842:	22 32       	cpi	r18, 0x22	; 34
    6844:	59 f0       	breq	.+22     	; 0x685c <get_token+0x62>
    6846:	c0 17       	cp	r28, r16
    6848:	d1 07       	cpc	r29, r17
            {
                *token++ = *str++;
    684a:	51 f0       	breq	.+20     	; 0x6860 <get_token+0x66>
    684c:	29 93       	st	Y+, r18
            }
            break;
        }

        // If we have a comma, outside of a string, break
        if(*str == ',' )
    684e:	f5 cf       	rjmp	.-22     	; 0x683a <get_token+0x40>
    6850:	2c 32       	cpi	r18, 0x2C	; 44
            break;

        // copy token
        *token++ = *str++;
    6852:	31 f0       	breq	.+12     	; 0x6860 <get_token+0x66>
        --max;
    6854:	29 93       	st	Y+, r18
    6856:	01 50       	subi	r16, 0x01	; 1
                --max;
            }
            if(*str == '"')
            {
                ++str;
                *token = 0;
    6858:	11 09       	sbc	r17, r1
        *token++ = *str++;
        --max;
    }

    // Skip trailing spaces
    str = skipspaces(str);
    685a:	e2 cf       	rjmp	.-60     	; 0x6820 <get_token+0x26>
    685c:	cf 01       	movw	r24, r30
    685e:	18 82       	st	Y, r1
    // If we had a trailing comma skip it
    if(*str == ',' )
    6860:	8c de       	rcall	.-744    	; 0x657a <skipspaces>
    6862:	fc 01       	movw	r30, r24
    6864:	80 81       	ld	r24, Z
        ++str;
    6866:	8c 32       	cpi	r24, 0x2C	; 44

    *token = 0;
    6868:	09 f4       	brne	.+2      	; 0x686c <get_token+0x72>
    return(str);
    686a:	31 96       	adiw	r30, 0x01	; 1
    686c:	18 82       	st	Y, r1
    686e:	cf 01       	movw	r24, r30
    6870:	02 c0       	rjmp	.+4      	; 0x6876 <get_token+0x7c>
}
    6872:	80 e0       	ldi	r24, 0x00	; 0
    6874:	90 e0       	ldi	r25, 0x00	; 0
    6876:	cd b7       	in	r28, 0x3d	; 61
    6878:	de b7       	in	r29, 0x3e	; 62
    687a:	e6 e0       	ldi	r30, 0x06	; 6
    687c:	0c 94 08 e6 	jmp	0x1cc10	; 0x1cc10 <__epilogue_restores__+0x18>

00006880 <token>:
///@return string lenth on match.
///@return 0 on no match.

MEMSPACE
int token(char *str, char *pat)
{
    6880:	ef 92       	push	r14
    6882:	ff 92       	push	r15
    6884:	0f 93       	push	r16
    6886:	1f 93       	push	r17
    6888:	cf 93       	push	r28
    688a:	df 93       	push	r29
    int patlen;
    int len;
    char *ptr;

    if(!str || *str == 0)
    688c:	00 97       	sbiw	r24, 0x00	; 0
    688e:	11 f1       	breq	.+68     	; 0x68d4 <token+0x54>
    6890:	fc 01       	movw	r30, r24
    6892:	20 81       	ld	r18, Z
    6894:	22 23       	and	r18, r18
    6896:	f1 f0       	breq	.+60     	; 0x68d4 <token+0x54>
    6898:	7b 01       	movw	r14, r22
        return(0);

    ptr = skipspaces(str);
    689a:	8c 01       	movw	r16, r24
    689c:	6e de       	rcall	.-804    	; 0x657a <skipspaces>
    len = 0;
    while(*ptr > ' ' && *ptr <= 0x7e )
    689e:	9c 01       	movw	r18, r24
    68a0:	fc 01       	movw	r30, r24
    68a2:	ef 01       	movw	r28, r30
    68a4:	c2 1b       	sub	r28, r18
    68a6:	d3 0b       	sbc	r29, r19
    68a8:	91 91       	ld	r25, Z+
    68aa:	91 52       	subi	r25, 0x21	; 33
    68ac:	9e 35       	cpi	r25, 0x5E	; 94
    {
        ++len;
        ++ptr;
    }

    if(!len)
    68ae:	c8 f3       	brcs	.-14     	; 0x68a2 <token+0x22>
    68b0:	20 97       	sbiw	r28, 0x00	; 0
        return(0);

    patlen = strlen(pat);
    68b2:	91 f0       	breq	.+36     	; 0x68d8 <token+0x58>
    68b4:	f7 01       	movw	r30, r14
    68b6:	01 90       	ld	r0, Z+
    68b8:	00 20       	and	r0, r0
    68ba:	e9 f7       	brne	.-6      	; 0x68b6 <token+0x36>
    68bc:	31 97       	sbiw	r30, 0x01	; 1
    68be:	ee 19       	sub	r30, r14

    if(len != patlen)
    68c0:	ff 09       	sbc	r31, r15
    68c2:	ec 17       	cp	r30, r28
    68c4:	fd 07       	cpc	r31, r29
        return(0);

    if(strncmp(str,pat,patlen) == 0)
    68c6:	31 f4       	brne	.+12     	; 0x68d4 <token+0x54>
    68c8:	ae 01       	movw	r20, r28
    68ca:	b7 01       	movw	r22, r14
    68cc:	c8 01       	movw	r24, r16
    68ce:	6c de       	rcall	.-808    	; 0x65a8 <strncmp>
    68d0:	89 2b       	or	r24, r25
    int patlen;
    int len;
    char *ptr;

    if(!str || *str == 0)
        return(0);
    68d2:	11 f0       	breq	.+4      	; 0x68d8 <token+0x58>
    68d4:	c0 e0       	ldi	r28, 0x00	; 0
        return(0);

    if(strncmp(str,pat,patlen) == 0)
        return(len);
    return(0);
}
    68d6:	d0 e0       	ldi	r29, 0x00	; 0
    68d8:	ce 01       	movw	r24, r28
    68da:	cd b7       	in	r28, 0x3d	; 61
    68dc:	de b7       	in	r29, 0x3e	; 62
    68de:	e6 e0       	ldi	r30, 0x06	; 6
    68e0:	0c 94 08 e6 	jmp	0x1cc10	; 0x1cc10 <__epilogue_restores__+0x18>

000068e4 <get_value>:
/// @param[in] str: string to examine
///
/// @return  value
MEMSPACE
int32_t get_value(char *str)
{ 
    68e4:	a2 e0       	ldi	r26, 0x02	; 2
    68e6:	b0 e0       	ldi	r27, 0x00	; 0
    68e8:	e8 e7       	ldi	r30, 0x78	; 120
    68ea:	f4 e3       	ldi	r31, 0x34	; 52
    68ec:	0c 94 ee e5 	jmp	0x1cbdc	; 0x1cbdc <__prologue_saves__+0x1c>
    int base;
    int ret;
    char *ptr;
    char *endptr;

    if(!str || *str == 0)
    68f0:	00 97       	sbiw	r24, 0x00	; 0
    68f2:	79 f1       	breq	.+94     	; 0x6952 <get_value+0x6e>
    68f4:	fc 01       	movw	r30, r24
    68f6:	20 81       	ld	r18, Z
    68f8:	22 23       	and	r18, r18
        return(0);

    ptr = skipspaces(str);
    68fa:	59 f1       	breq	.+86     	; 0x6952 <get_value+0x6e>
    68fc:	3e de       	rcall	.-900    	; 0x657a <skipspaces>
    base = 10;

    // convert number base 10, 16, 8 and 2
    if( (ret = MATCHI_LEN(ptr,"0x")) )
    68fe:	8c 01       	movw	r16, r24
    6900:	6e e2       	ldi	r22, 0x2E	; 46
    6902:	77 e0       	ldi	r23, 0x07	; 7
    6904:	04 df       	rcall	.-504    	; 0x670e <MATCHI_LEN>
    6906:	00 97       	sbiw	r24, 0x00	; 0
    {
        base = 16;
        ptr += ret;
    6908:	29 f0       	breq	.+10     	; 0x6914 <get_value+0x30>
    690a:	08 0f       	add	r16, r24
    base = 10;

    // convert number base 10, 16, 8 and 2
    if( (ret = MATCHI_LEN(ptr,"0x")) )
    {
        base = 16;
    690c:	19 1f       	adc	r17, r25
    690e:	40 e1       	ldi	r20, 0x10	; 16
    6910:	50 e0       	ldi	r21, 0x00	; 0
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0o")) )
    6912:	18 c0       	rjmp	.+48     	; 0x6944 <get_value+0x60>
    6914:	61 e3       	ldi	r22, 0x31	; 49
    6916:	77 e0       	ldi	r23, 0x07	; 7
    6918:	c8 01       	movw	r24, r16
    691a:	f9 de       	rcall	.-526    	; 0x670e <MATCHI_LEN>
    691c:	00 97       	sbiw	r24, 0x00	; 0
    {
        base = 8;
        ptr += ret;
    691e:	29 f0       	breq	.+10     	; 0x692a <get_value+0x46>
    6920:	08 0f       	add	r16, r24
        base = 16;
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0o")) )
    {
        base = 8;
    6922:	19 1f       	adc	r17, r25
    6924:	48 e0       	ldi	r20, 0x08	; 8
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    6926:	50 e0       	ldi	r21, 0x00	; 0
    6928:	0d c0       	rjmp	.+26     	; 0x6944 <get_value+0x60>
    692a:	64 e3       	ldi	r22, 0x34	; 52
    692c:	77 e0       	ldi	r23, 0x07	; 7
    692e:	c8 01       	movw	r24, r16
    6930:	ee de       	rcall	.-548    	; 0x670e <MATCHI_LEN>
    {
        base = 2;
        ptr += ret;
    6932:	00 97       	sbiw	r24, 0x00	; 0
    6934:	29 f0       	breq	.+10     	; 0x6940 <get_value+0x5c>
        base = 8;
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    {
        base = 2;
    6936:	08 0f       	add	r16, r24
    6938:	19 1f       	adc	r17, r25
    693a:	42 e0       	ldi	r20, 0x02	; 2

    if(!str || *str == 0)
        return(0);

    ptr = skipspaces(str);
    base = 10;
    693c:	50 e0       	ldi	r21, 0x00	; 0
    693e:	02 c0       	rjmp	.+4      	; 0x6944 <get_value+0x60>
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    {
        base = 2;
        ptr += ret;
    }
    return(strtol(ptr, (char **)&endptr, base));
    6940:	4a e0       	ldi	r20, 0x0A	; 10
    6942:	50 e0       	ldi	r21, 0x00	; 0
    6944:	be 01       	movw	r22, r28
    6946:	6f 5f       	subi	r22, 0xFF	; 255
    6948:	7f 4f       	sbci	r23, 0xFF	; 255
    694a:	c8 01       	movw	r24, r16
    694c:	0e 94 96 47 	call	0x8f2c	; 0x8f2c <strtol>
    int ret;
    char *ptr;
    char *endptr;

    if(!str || *str == 0)
        return(0);
    6950:	03 c0       	rjmp	.+6      	; 0x6958 <get_value+0x74>
    6952:	60 e0       	ldi	r22, 0x00	; 0
    {
        base = 2;
        ptr += ret;
    }
    return(strtol(ptr, (char **)&endptr, base));
}
    6954:	70 e0       	ldi	r23, 0x00	; 0
    6956:	cb 01       	movw	r24, r22
    6958:	22 96       	adiw	r28, 0x02	; 2
    695a:	e4 e0       	ldi	r30, 0x04	; 4
    695c:	0c 94 0a e6 	jmp	0x1cc14	; 0x1cc14 <__epilogue_restores__+0x1c>

00006960 <enable_system_task>:
/// @brief Enable interrupts
/// @return void.
MEMSPACE
void enable_system_task()
{
    sei();
    6960:	78 94       	sei
    6962:	08 95       	ret

00006964 <install_timers_isr>:
///
/// @see ISR().
/// @return void.
MEMSPACE void install_timers_isr()
{
    cli();
    6964:	f8 94       	cli
    TCCR1B=(1<<WGM12) | TIMER1_PRE_1;   // No Prescale
    6966:	89 e0       	ldi	r24, 0x09	; 9
    6968:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    TCCR1A=0;
    696c:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    OCR1A=(TIMER1_COUNTS_PER_TIC-1);    // 0 .. count
    6970:	8f e1       	ldi	r24, 0x1F	; 31
    6972:	9e e4       	ldi	r25, 0x4E	; 78
    6974:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    6978:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    TIMSK1 |= (1<<OCIE1A);              //Enable the Output Compare A interrupt
    697c:	ef e6       	ldi	r30, 0x6F	; 111
    697e:	f0 e0       	ldi	r31, 0x00	; 0
    6980:	80 81       	ld	r24, Z
    6982:	82 60       	ori	r24, 0x02	; 2
    6984:	80 83       	st	Z, r24
    sei();
    6986:	78 94       	sei
    6988:	08 95       	ret

0000698a <__vector_13>:
/// @brief AVR Timer Interrupt Vector
///
/// - calls execute_timers() - we call this the System task.
///
ISR(TIMER1_COMPA_vect)
{
    698a:	1f 92       	push	r1
    698c:	0f 92       	push	r0
    698e:	0f b6       	in	r0, 0x3f	; 63
    6990:	0f 92       	push	r0
    6992:	11 24       	eor	r1, r1
    6994:	0b b6       	in	r0, 0x3b	; 59
    6996:	0f 92       	push	r0
    6998:	2f 93       	push	r18
    699a:	3f 93       	push	r19
    699c:	4f 93       	push	r20
    699e:	5f 93       	push	r21
    69a0:	6f 93       	push	r22
    69a2:	7f 93       	push	r23
    69a4:	8f 93       	push	r24
    69a6:	9f 93       	push	r25
    69a8:	af 93       	push	r26
    69aa:	bf 93       	push	r27
    69ac:	ef 93       	push	r30
    execute_timers();
    69ae:	ff 93       	push	r31
}
    69b0:	26 d2       	rcall	.+1100   	; 0x6dfe <execute_timers>
    69b2:	ff 91       	pop	r31
    69b4:	ef 91       	pop	r30
    69b6:	bf 91       	pop	r27
    69b8:	af 91       	pop	r26
    69ba:	9f 91       	pop	r25
    69bc:	8f 91       	pop	r24
    69be:	7f 91       	pop	r23
    69c0:	6f 91       	pop	r22
    69c2:	5f 91       	pop	r21
    69c4:	4f 91       	pop	r20
    69c6:	3f 91       	pop	r19
    69c8:	2f 91       	pop	r18
    69ca:	0f 90       	pop	r0
    69cc:	0b be       	out	0x3b, r0	; 59
    69ce:	0f 90       	pop	r0
    69d0:	0f be       	out	0x3f, r0	; 63
    69d2:	0f 90       	pop	r0
    69d4:	1f 90       	pop	r1
    69d6:	18 95       	reti

000069d8 <clock_gettime>:
///
/// @return 0 on success.
/// @return -1 on error.
MEMSPACE
int clock_gettime(clockid_t clk_id, struct timespec *ts)
{
    69d8:	0f 93       	push	r16
    69da:	1f 93       	push	r17
    69dc:	cf 93       	push	r28
    69de:	df 93       	push	r29
    69e0:	fb 01       	movw	r30, r22
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;

    // disable interrupts
    cli();
    69e2:	f8 94       	cli

    count1 = TCNT1;
    69e4:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    69e8:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>

    ts->tv_sec = __clock.tv_sec;
    69ec:	80 91 46 19 	lds	r24, 0x1946	; 0x801946 <__clock>
    69f0:	90 91 47 19 	lds	r25, 0x1947	; 0x801947 <__clock+0x1>
    69f4:	a0 91 48 19 	lds	r26, 0x1948	; 0x801948 <__clock+0x2>
    69f8:	b0 91 49 19 	lds	r27, 0x1949	; 0x801949 <__clock+0x3>
    69fc:	80 83       	st	Z, r24
    69fe:	91 83       	std	Z+1, r25	; 0x01
    6a00:	a2 83       	std	Z+2, r26	; 0x02
    6a02:	b3 83       	std	Z+3, r27	; 0x03
    ts->tv_nsec = __clock.tv_nsec;
    6a04:	80 91 4a 19 	lds	r24, 0x194A	; 0x80194a <__clock+0x4>
    6a08:	90 91 4b 19 	lds	r25, 0x194B	; 0x80194b <__clock+0x5>
    6a0c:	a0 91 4c 19 	lds	r26, 0x194C	; 0x80194c <__clock+0x6>
    6a10:	b0 91 4d 19 	lds	r27, 0x194D	; 0x80194d <__clock+0x7>
    6a14:	84 83       	std	Z+4, r24	; 0x04
    6a16:	95 83       	std	Z+5, r25	; 0x05
    6a18:	a6 83       	std	Z+6, r26	; 0x06
    6a1a:	b7 83       	std	Z+7, r27	; 0x07

    count2 = TCNT1;
    6a1c:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    6a20:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>

    if( TIFR1 & (1<<OCF1A) )
    6a24:	b1 9b       	sbis	0x16, 1	; 22
    6a26:	03 c0       	rjmp	.+6      	; 0x6a2e <clock_gettime+0x56>
int clock_gettime(clockid_t clk_id, struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;
    6a28:	c0 e0       	ldi	r28, 0x00	; 0
    6a2a:	d0 e0       	ldi	r29, 0x00	; 0
    6a2c:	3f c0       	rjmp	.+126    	; 0x6aac <clock_gettime+0xd4>
    count2 = TCNT1;

    if( TIFR1 & (1<<OCF1A) )
        pendingf = 1;

    if (count2 < count1)
    6a2e:	82 17       	cp	r24, r18
    6a30:	93 07       	cpc	r25, r19
    6a32:	d0 f1       	brcs	.+116    	; 0x6aa8 <clock_gettime+0xd0>
int clock_gettime(clockid_t clk_id, struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;
    6a34:	c0 e0       	ldi	r28, 0x00	; 0
    6a36:	d0 e0       	ldi	r29, 0x00	; 0
/// @return -1 on error.
MEMSPACE
int clock_gettime(clockid_t clk_id, struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    6a38:	40 e0       	ldi	r20, 0x00	; 0
    6a3a:	50 e0       	ldi	r21, 0x00	; 0
    6a3c:	ba 01       	movw	r22, r20
    else
    {
        if( pendingf )
            offset = TIMER1_COUNTS_PER_TIC;       // overflow
    }
    offset += count2;
    6a3e:	9a 01       	movw	r18, r20
    6a40:	ab 01       	movw	r20, r22
    6a42:	28 0f       	add	r18, r24
    6a44:	39 1f       	adc	r19, r25
    6a46:	41 1d       	adc	r20, r1
    6a48:	51 1d       	adc	r21, r1

    // enable interrupts
    sei();
    6a4a:	78 94       	sei

    offset *= TIMER1_COUNTER_RES;

    ts->tv_nsec += offset;
    6a4c:	a2 e3       	ldi	r26, 0x32	; 50
    6a4e:	b0 e0       	ldi	r27, 0x00	; 0
    6a50:	0e 94 c0 e5 	call	0x1cb80	; 0x1cb80 <__muluhisi3>
    6a54:	04 81       	ldd	r16, Z+4	; 0x04
    6a56:	15 81       	ldd	r17, Z+5	; 0x05
    6a58:	26 81       	ldd	r18, Z+6	; 0x06
    6a5a:	37 81       	ldd	r19, Z+7	; 0x07
    6a5c:	dc 01       	movw	r26, r24
    6a5e:	cb 01       	movw	r24, r22
    6a60:	80 0f       	add	r24, r16
    6a62:	91 1f       	adc	r25, r17
    6a64:	a2 1f       	adc	r26, r18
    6a66:	b3 1f       	adc	r27, r19

    if (ts->tv_nsec >= 1000000000L)
    6a68:	81 15       	cp	r24, r1
    6a6a:	2a ec       	ldi	r18, 0xCA	; 202
    6a6c:	92 07       	cpc	r25, r18
    6a6e:	2a e9       	ldi	r18, 0x9A	; 154
    6a70:	a2 07       	cpc	r26, r18
    6a72:	2b e3       	ldi	r18, 0x3B	; 59
    6a74:	b2 07       	cpc	r27, r18
    6a76:	2c f4       	brge	.+10     	; 0x6a82 <clock_gettime+0xaa>
    // enable interrupts
    sei();

    offset *= TIMER1_COUNTER_RES;

    ts->tv_nsec += offset;
    6a78:	84 83       	std	Z+4, r24	; 0x04
    6a7a:	95 83       	std	Z+5, r25	; 0x05
    6a7c:	a6 83       	std	Z+6, r26	; 0x06
    6a7e:	b7 83       	std	Z+7, r27	; 0x07
    6a80:	1a c0       	rjmp	.+52     	; 0x6ab6 <clock_gettime+0xde>

    if (ts->tv_nsec >= 1000000000L)
    {
        ts->tv_nsec -= 1000000000L;
    6a82:	9a 5c       	subi	r25, 0xCA	; 202
    6a84:	aa 49       	sbci	r26, 0x9A	; 154
    6a86:	bb 43       	sbci	r27, 0x3B	; 59
    6a88:	84 83       	std	Z+4, r24	; 0x04
    6a8a:	95 83       	std	Z+5, r25	; 0x05
    6a8c:	a6 83       	std	Z+6, r26	; 0x06
    6a8e:	b7 83       	std	Z+7, r27	; 0x07
        ts->tv_sec++;
    6a90:	80 81       	ld	r24, Z
    6a92:	91 81       	ldd	r25, Z+1	; 0x01
    6a94:	a2 81       	ldd	r26, Z+2	; 0x02
    6a96:	b3 81       	ldd	r27, Z+3	; 0x03
    6a98:	01 96       	adiw	r24, 0x01	; 1
    6a9a:	a1 1d       	adc	r26, r1
    6a9c:	b1 1d       	adc	r27, r1
    6a9e:	80 83       	st	Z, r24
    6aa0:	91 83       	std	Z+1, r25	; 0x01
    6aa2:	a2 83       	std	Z+2, r26	; 0x02
    6aa4:	b3 83       	std	Z+3, r27	; 0x03
    }
    return(errorf);
    6aa6:	07 c0       	rjmp	.+14     	; 0x6ab6 <clock_gettime+0xde>

    if (count2 < count1)
    {
///  note: counter2 < count1 implies ISR flag must be set
        if( !pendingf )
            errorf = -1;    // counter overflow and NO pending is an error!
    6aa8:	cf ef       	ldi	r28, 0xFF	; 255
    6aaa:	df ef       	ldi	r29, 0xFF	; 255
        offset = TIMER1_COUNTS_PER_TIC;           // overflow
    6aac:	40 e2       	ldi	r20, 0x20	; 32
    6aae:	5e e4       	ldi	r21, 0x4E	; 78
    6ab0:	60 e0       	ldi	r22, 0x00	; 0
    6ab2:	70 e0       	ldi	r23, 0x00	; 0
    6ab4:	c4 cf       	rjmp	.-120    	; 0x6a3e <clock_gettime+0x66>
    {
        ts->tv_nsec -= 1000000000L;
        ts->tv_sec++;
    }
    return(errorf);
}
    6ab6:	ce 01       	movw	r24, r28
    6ab8:	df 91       	pop	r29
    6aba:	cf 91       	pop	r28
    6abc:	1f 91       	pop	r17
    6abe:	0f 91       	pop	r16
    6ac0:	08 95       	ret

00006ac2 <clock_task>:
void disable_timers()
{
    if(timers_configured && timers_enabled)
    {
        disable_system_task();
        timers_enabled = 0;
    6ac2:	80 91 4a 19 	lds	r24, 0x194A	; 0x80194a <__clock+0x4>
    6ac6:	90 91 4b 19 	lds	r25, 0x194B	; 0x80194b <__clock+0x5>
    6aca:	a0 91 4c 19 	lds	r26, 0x194C	; 0x80194c <__clock+0x6>
    6ace:	b0 91 4d 19 	lds	r27, 0x194D	; 0x80194d <__clock+0x7>
    6ad2:	80 5c       	subi	r24, 0xC0	; 192
    6ad4:	9d 4b       	sbci	r25, 0xBD	; 189
    6ad6:	a0 4f       	sbci	r26, 0xF0	; 240
    6ad8:	bf 4f       	sbci	r27, 0xFF	; 255
    6ada:	80 93 4a 19 	sts	0x194A, r24	; 0x80194a <__clock+0x4>
    6ade:	90 93 4b 19 	sts	0x194B, r25	; 0x80194b <__clock+0x5>
    6ae2:	a0 93 4c 19 	sts	0x194C, r26	; 0x80194c <__clock+0x6>
    6ae6:	b0 93 4d 19 	sts	0x194D, r27	; 0x80194d <__clock+0x7>
    6aea:	80 91 4a 19 	lds	r24, 0x194A	; 0x80194a <__clock+0x4>
    6aee:	90 91 4b 19 	lds	r25, 0x194B	; 0x80194b <__clock+0x5>
    6af2:	a0 91 4c 19 	lds	r26, 0x194C	; 0x80194c <__clock+0x6>
    6af6:	b0 91 4d 19 	lds	r27, 0x194D	; 0x80194d <__clock+0x7>
    6afa:	81 15       	cp	r24, r1
    6afc:	9a 4c       	sbci	r25, 0xCA	; 202
    6afe:	aa 49       	sbci	r26, 0x9A	; 154
    6b00:	bb 43       	sbci	r27, 0x3B	; 59
    6b02:	dc f0       	brlt	.+54     	; 0x6b3a <clock_task+0x78>
    6b04:	80 91 46 19 	lds	r24, 0x1946	; 0x801946 <__clock>
    6b08:	90 91 47 19 	lds	r25, 0x1947	; 0x801947 <__clock+0x1>
    6b0c:	a0 91 48 19 	lds	r26, 0x1948	; 0x801948 <__clock+0x2>
    6b10:	b0 91 49 19 	lds	r27, 0x1949	; 0x801949 <__clock+0x3>
    6b14:	01 96       	adiw	r24, 0x01	; 1
    6b16:	a1 1d       	adc	r26, r1
    6b18:	b1 1d       	adc	r27, r1
    6b1a:	80 93 46 19 	sts	0x1946, r24	; 0x801946 <__clock>
    6b1e:	90 93 47 19 	sts	0x1947, r25	; 0x801947 <__clock+0x1>
    6b22:	a0 93 48 19 	sts	0x1948, r26	; 0x801948 <__clock+0x2>
    6b26:	b0 93 49 19 	sts	0x1949, r27	; 0x801949 <__clock+0x3>
    6b2a:	10 92 4a 19 	sts	0x194A, r1	; 0x80194a <__clock+0x4>
    6b2e:	10 92 4b 19 	sts	0x194B, r1	; 0x80194b <__clock+0x5>
    6b32:	10 92 4c 19 	sts	0x194C, r1	; 0x80194c <__clock+0x6>
    6b36:	10 92 4d 19 	sts	0x194D, r1	; 0x80194d <__clock+0x7>
    6b3a:	08 95       	ret

00006b3c <clock_settime.part.2>:
    6b3c:	fc 01       	movw	r30, r24
    6b3e:	84 81       	ldd	r24, Z+4	; 0x04
    6b40:	95 81       	ldd	r25, Z+5	; 0x05
    6b42:	a6 81       	ldd	r26, Z+6	; 0x06
    6b44:	b7 81       	ldd	r27, Z+7	; 0x07
    6b46:	80 93 4a 19 	sts	0x194A, r24	; 0x80194a <__clock+0x4>
    6b4a:	90 93 4b 19 	sts	0x194B, r25	; 0x80194b <__clock+0x5>
    6b4e:	a0 93 4c 19 	sts	0x194C, r26	; 0x80194c <__clock+0x6>
    6b52:	b0 93 4d 19 	sts	0x194D, r27	; 0x80194d <__clock+0x7>
    6b56:	80 81       	ld	r24, Z
    6b58:	91 81       	ldd	r25, Z+1	; 0x01
    6b5a:	a2 81       	ldd	r26, Z+2	; 0x02
    6b5c:	b3 81       	ldd	r27, Z+3	; 0x03
    6b5e:	80 93 46 19 	sts	0x1946, r24	; 0x801946 <__clock>
    6b62:	90 93 47 19 	sts	0x1947, r25	; 0x801947 <__clock+0x1>
    6b66:	a0 93 48 19 	sts	0x1948, r26	; 0x801948 <__clock+0x2>
    6b6a:	b0 93 49 19 	sts	0x1949, r27	; 0x801949 <__clock+0x3>
    6b6e:	80 91 4a 19 	lds	r24, 0x194A	; 0x80194a <__clock+0x4>
    6b72:	90 91 4b 19 	lds	r25, 0x194B	; 0x80194b <__clock+0x5>
    6b76:	a0 91 4c 19 	lds	r26, 0x194C	; 0x80194c <__clock+0x6>
    6b7a:	b0 91 4d 19 	lds	r27, 0x194D	; 0x80194d <__clock+0x7>
    6b7e:	44 81       	ldd	r20, Z+4	; 0x04
    6b80:	55 81       	ldd	r21, Z+5	; 0x05
    6b82:	66 81       	ldd	r22, Z+6	; 0x06
    6b84:	77 81       	ldd	r23, Z+7	; 0x07
    6b86:	48 17       	cp	r20, r24
    6b88:	59 07       	cpc	r21, r25
    6b8a:	6a 07       	cpc	r22, r26
    6b8c:	7b 07       	cpc	r23, r27
    6b8e:	b9 f6       	brne	.-82     	; 0x6b3e <clock_settime.part.2+0x2>
    6b90:	80 91 46 19 	lds	r24, 0x1946	; 0x801946 <__clock>
    6b94:	90 91 47 19 	lds	r25, 0x1947	; 0x801947 <__clock+0x1>
    6b98:	a0 91 48 19 	lds	r26, 0x1948	; 0x801948 <__clock+0x2>
    6b9c:	b0 91 49 19 	lds	r27, 0x1949	; 0x801949 <__clock+0x3>
    6ba0:	40 81       	ld	r20, Z
    6ba2:	51 81       	ldd	r21, Z+1	; 0x01
    6ba4:	62 81       	ldd	r22, Z+2	; 0x02
    6ba6:	73 81       	ldd	r23, Z+3	; 0x03
    6ba8:	48 17       	cp	r20, r24
    6baa:	59 07       	cpc	r21, r25
    6bac:	6a 07       	cpc	r22, r26
    6bae:	7b 07       	cpc	r23, r27
    6bb0:	31 f6       	brne	.-116    	; 0x6b3e <clock_settime.part.2+0x2>
    6bb2:	80 e0       	ldi	r24, 0x00	; 0
    6bb4:	90 e0       	ldi	r25, 0x00	; 0
    6bb6:	08 95       	ret

00006bb8 <set_timers>:
    6bb8:	00 97       	sbiw	r24, 0x00	; 0
    6bba:	79 f1       	breq	.+94     	; 0x6c1a <set_timers+0x62>
    6bbc:	ee e4       	ldi	r30, 0x4E	; 78
    6bbe:	f9 e1       	ldi	r31, 0x19	; 25
    6bc0:	4f ef       	ldi	r20, 0xFF	; 255
    6bc2:	5f ef       	ldi	r21, 0xFF	; 255
    6bc4:	20 e0       	ldi	r18, 0x00	; 0
    6bc6:	30 e0       	ldi	r19, 0x00	; 0
    6bc8:	60 81       	ld	r22, Z
    6bca:	71 81       	ldd	r23, Z+1	; 0x01
    6bcc:	86 17       	cp	r24, r22
    6bce:	97 07       	cpc	r25, r23
    6bd0:	79 f0       	breq	.+30     	; 0x6bf0 <set_timers+0x38>
    6bd2:	67 2b       	or	r22, r23
    6bd4:	71 f4       	brne	.+28     	; 0x6bf2 <set_timers+0x3a>
    6bd6:	f9 01       	movw	r30, r18
    6bd8:	ee 0f       	add	r30, r30
    6bda:	ff 1f       	adc	r31, r31
    6bdc:	e2 0f       	add	r30, r18
    6bde:	f3 1f       	adc	r31, r19
    6be0:	e2 5b       	subi	r30, 0xB2	; 178
    6be2:	f6 4e       	sbci	r31, 0xE6	; 230
    6be4:	91 83       	std	Z+1, r25	; 0x01
    6be6:	80 83       	st	Z, r24
    6be8:	81 e0       	ldi	r24, 0x01	; 1
    6bea:	82 83       	std	Z+2, r24	; 0x02
    6bec:	c9 01       	movw	r24, r18
    6bee:	08 95       	ret
    6bf0:	a9 01       	movw	r20, r18
    6bf2:	2f 5f       	subi	r18, 0xFF	; 255
    6bf4:	3f 4f       	sbci	r19, 0xFF	; 255
    6bf6:	33 96       	adiw	r30, 0x03	; 3
    6bf8:	28 30       	cpi	r18, 0x08	; 8
    6bfa:	31 05       	cpc	r19, r1
    6bfc:	29 f7       	brne	.-54     	; 0x6bc8 <set_timers+0x10>
    6bfe:	4f 3f       	cpi	r20, 0xFF	; 255
    6c00:	8f ef       	ldi	r24, 0xFF	; 255
    6c02:	58 07       	cpc	r21, r24
    6c04:	69 f4       	brne	.+26     	; 0x6c20 <set_timers+0x68>
    6c06:	8c eb       	ldi	r24, 0xBC	; 188
    6c08:	95 e0       	ldi	r25, 0x05	; 5
    6c0a:	1f 92       	push	r1
    6c0c:	9f 93       	push	r25
    6c0e:	8f 93       	push	r24
    6c10:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    6c14:	0f 90       	pop	r0
    6c16:	0f 90       	pop	r0
    6c18:	0f 90       	pop	r0
    6c1a:	8f ef       	ldi	r24, 0xFF	; 255
    6c1c:	9f ef       	ldi	r25, 0xFF	; 255
    6c1e:	08 95       	ret
    6c20:	ca 01       	movw	r24, r20
    6c22:	08 95       	ret

00006c24 <delete_all_timers>:
    6c24:	ee e4       	ldi	r30, 0x4E	; 78
    6c26:	f9 e1       	ldi	r31, 0x19	; 25
    6c28:	12 82       	std	Z+2, r1	; 0x02
    6c2a:	11 82       	std	Z+1, r1	; 0x01
    6c2c:	10 82       	st	Z, r1
    6c2e:	33 96       	adiw	r30, 0x03	; 3
    6c30:	89 e1       	ldi	r24, 0x19	; 25
    6c32:	e6 36       	cpi	r30, 0x66	; 102
    6c34:	f8 07       	cpc	r31, r24
    6c36:	c1 f7       	brne	.-16     	; 0x6c28 <delete_all_timers+0x4>
    6c38:	08 95       	ret

00006c3a <subtract_timespec>:
    6c3a:	0f 93       	push	r16
    6c3c:	1f 93       	push	r17
    6c3e:	cf 93       	push	r28
    6c40:	df 93       	push	r29
    6c42:	fc 01       	movw	r30, r24
    6c44:	84 81       	ldd	r24, Z+4	; 0x04
    6c46:	95 81       	ldd	r25, Z+5	; 0x05
    6c48:	a6 81       	ldd	r26, Z+6	; 0x06
    6c4a:	b7 81       	ldd	r27, Z+7	; 0x07
    6c4c:	eb 01       	movw	r28, r22
    6c4e:	0c 81       	ldd	r16, Y+4	; 0x04
    6c50:	1d 81       	ldd	r17, Y+5	; 0x05
    6c52:	2e 81       	ldd	r18, Y+6	; 0x06
    6c54:	3f 81       	ldd	r19, Y+7	; 0x07
    6c56:	80 1b       	sub	r24, r16
    6c58:	91 0b       	sbc	r25, r17
    6c5a:	a2 0b       	sbc	r26, r18
    6c5c:	b3 0b       	sbc	r27, r19
    6c5e:	b7 fd       	sbrc	r27, 7
    6c60:	05 c0       	rjmp	.+10     	; 0x6c6c <subtract_timespec+0x32>
    6c62:	84 83       	std	Z+4, r24	; 0x04
    6c64:	95 83       	std	Z+5, r25	; 0x05
    6c66:	a6 83       	std	Z+6, r26	; 0x06
    6c68:	b7 83       	std	Z+7, r27	; 0x07
    6c6a:	12 c0       	rjmp	.+36     	; 0x6c90 <subtract_timespec+0x56>
    6c6c:	96 53       	subi	r25, 0x36	; 54
    6c6e:	a5 46       	sbci	r26, 0x65	; 101
    6c70:	b4 4c       	sbci	r27, 0xC4	; 196
    6c72:	84 83       	std	Z+4, r24	; 0x04
    6c74:	95 83       	std	Z+5, r25	; 0x05
    6c76:	a6 83       	std	Z+6, r26	; 0x06
    6c78:	b7 83       	std	Z+7, r27	; 0x07
    6c7a:	80 81       	ld	r24, Z
    6c7c:	91 81       	ldd	r25, Z+1	; 0x01
    6c7e:	a2 81       	ldd	r26, Z+2	; 0x02
    6c80:	b3 81       	ldd	r27, Z+3	; 0x03
    6c82:	01 97       	sbiw	r24, 0x01	; 1
    6c84:	a1 09       	sbc	r26, r1
    6c86:	b1 09       	sbc	r27, r1
    6c88:	80 83       	st	Z, r24
    6c8a:	91 83       	std	Z+1, r25	; 0x01
    6c8c:	a2 83       	std	Z+2, r26	; 0x02
    6c8e:	b3 83       	std	Z+3, r27	; 0x03
    6c90:	80 81       	ld	r24, Z
    6c92:	91 81       	ldd	r25, Z+1	; 0x01
    6c94:	a2 81       	ldd	r26, Z+2	; 0x02
    6c96:	b3 81       	ldd	r27, Z+3	; 0x03
    6c98:	eb 01       	movw	r28, r22
    6c9a:	48 81       	ld	r20, Y
    6c9c:	59 81       	ldd	r21, Y+1	; 0x01
    6c9e:	6a 81       	ldd	r22, Y+2	; 0x02
    6ca0:	7b 81       	ldd	r23, Y+3	; 0x03
    6ca2:	84 1b       	sub	r24, r20
    6ca4:	95 0b       	sbc	r25, r21
    6ca6:	a6 0b       	sbc	r26, r22
    6ca8:	b7 0b       	sbc	r27, r23
    6caa:	80 83       	st	Z, r24
    6cac:	91 83       	std	Z+1, r25	; 0x01
    6cae:	a2 83       	std	Z+2, r26	; 0x02
    6cb0:	b3 83       	std	Z+3, r27	; 0x03
    6cb2:	df 91       	pop	r29
    6cb4:	cf 91       	pop	r28
    6cb6:	1f 91       	pop	r17
    6cb8:	0f 91       	pop	r16
    6cba:	08 95       	ret

00006cbc <ts_to_str>:
    6cbc:	fc 01       	movw	r30, r24
    6cbe:	87 81       	ldd	r24, Z+7	; 0x07
    6cc0:	8f 93       	push	r24
    6cc2:	86 81       	ldd	r24, Z+6	; 0x06
    6cc4:	8f 93       	push	r24
    6cc6:	85 81       	ldd	r24, Z+5	; 0x05
    6cc8:	8f 93       	push	r24
    6cca:	84 81       	ldd	r24, Z+4	; 0x04
    6ccc:	8f 93       	push	r24
    6cce:	83 81       	ldd	r24, Z+3	; 0x03
    6cd0:	8f 93       	push	r24
    6cd2:	82 81       	ldd	r24, Z+2	; 0x02
    6cd4:	8f 93       	push	r24
    6cd6:	81 81       	ldd	r24, Z+1	; 0x01
    6cd8:	8f 93       	push	r24
    6cda:	80 81       	ld	r24, Z
    6cdc:	8f 93       	push	r24
    6cde:	82 eb       	ldi	r24, 0xB2	; 178
    6ce0:	95 e0       	ldi	r25, 0x05	; 5
    6ce2:	1f 92       	push	r1
    6ce4:	9f 93       	push	r25
    6ce6:	8f 93       	push	r24
    6ce8:	1f 92       	push	r1
    6cea:	8f e1       	ldi	r24, 0x1F	; 31
    6cec:	8f 93       	push	r24
    6cee:	88 e5       	ldi	r24, 0x58	; 88
    6cf0:	97 e1       	ldi	r25, 0x17	; 23
    6cf2:	9f 93       	push	r25
    6cf4:	8f 93       	push	r24
    6cf6:	0e 94 33 47 	call	0x8e66	; 0x8e66 <snprintf_P>
    6cfa:	8d b7       	in	r24, 0x3d	; 61
    6cfc:	9e b7       	in	r25, 0x3e	; 62
    6cfe:	0f 96       	adiw	r24, 0x0f	; 15
    6d00:	0f b6       	in	r0, 0x3f	; 63
    6d02:	f8 94       	cli
    6d04:	9e bf       	out	0x3e, r25	; 62
    6d06:	0f be       	out	0x3f, r0	; 63
    6d08:	8d bf       	out	0x3d, r24	; 61
    6d0a:	88 e5       	ldi	r24, 0x58	; 88
    6d0c:	97 e1       	ldi	r25, 0x17	; 23
    6d0e:	08 95       	ret

00006d10 <clock_elapsed_begin>:
    6d10:	60 e5       	ldi	r22, 0x50	; 80
    6d12:	77 e1       	ldi	r23, 0x17	; 23
    6d14:	80 e0       	ldi	r24, 0x00	; 0
    6d16:	90 e0       	ldi	r25, 0x00	; 0
    6d18:	5f ce       	rjmp	.-834    	; 0x69d8 <clock_gettime>
    6d1a:	08 95       	ret

00006d1c <clock_elapsed_end>:
    6d1c:	a8 e0       	ldi	r26, 0x08	; 8
    6d1e:	b0 e0       	ldi	r27, 0x00	; 0
    6d20:	e4 e9       	ldi	r30, 0x94	; 148
    6d22:	f6 e3       	ldi	r31, 0x36	; 54
    6d24:	0c 94 ee e5 	jmp	0x1cbdc	; 0x1cbdc <__prologue_saves__+0x1c>
    6d28:	8c 01       	movw	r16, r24
    6d2a:	be 01       	movw	r22, r28
    6d2c:	6f 5f       	subi	r22, 0xFF	; 255
    6d2e:	7f 4f       	sbci	r23, 0xFF	; 255
    6d30:	80 e0       	ldi	r24, 0x00	; 0
    6d32:	90 e0       	ldi	r25, 0x00	; 0
    6d34:	51 de       	rcall	.-862    	; 0x69d8 <clock_gettime>
    6d36:	60 e5       	ldi	r22, 0x50	; 80
    6d38:	77 e1       	ldi	r23, 0x17	; 23
    6d3a:	ce 01       	movw	r24, r28
    6d3c:	01 96       	adiw	r24, 0x01	; 1
    6d3e:	7d df       	rcall	.-262    	; 0x6c3a <subtract_timespec>
    6d40:	01 15       	cp	r16, r1
    6d42:	11 05       	cpc	r17, r1
    6d44:	c1 f0       	breq	.+48     	; 0x6d76 <clock_elapsed_end+0x5a>
    6d46:	f8 01       	movw	r30, r16
    6d48:	80 81       	ld	r24, Z
    6d4a:	88 23       	and	r24, r24
    6d4c:	a1 f0       	breq	.+40     	; 0x6d76 <clock_elapsed_end+0x5a>
    6d4e:	ce 01       	movw	r24, r28
    6d50:	01 96       	adiw	r24, 0x01	; 1
    6d52:	b4 df       	rcall	.-152    	; 0x6cbc <ts_to_str>
    6d54:	9f 93       	push	r25
    6d56:	8f 93       	push	r24
    6d58:	1f 93       	push	r17
    6d5a:	0f 93       	push	r16
    6d5c:	85 e9       	ldi	r24, 0x95	; 149
    6d5e:	95 e0       	ldi	r25, 0x05	; 5
    6d60:	1f 92       	push	r1
    6d62:	9f 93       	push	r25
    6d64:	8f 93       	push	r24
    6d66:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    6d6a:	0f b6       	in	r0, 0x3f	; 63
    6d6c:	f8 94       	cli
    6d6e:	de bf       	out	0x3e, r29	; 62
    6d70:	0f be       	out	0x3f, r0	; 63
    6d72:	cd bf       	out	0x3d, r28	; 61
    6d74:	11 c0       	rjmp	.+34     	; 0x6d98 <clock_elapsed_end+0x7c>
    6d76:	ce 01       	movw	r24, r28
    6d78:	01 96       	adiw	r24, 0x01	; 1
    6d7a:	a0 df       	rcall	.-192    	; 0x6cbc <ts_to_str>
    6d7c:	9f 93       	push	r25
    6d7e:	8f 93       	push	r24
    6d80:	8a e8       	ldi	r24, 0x8A	; 138
    6d82:	95 e0       	ldi	r25, 0x05	; 5
    6d84:	1f 92       	push	r1
    6d86:	9f 93       	push	r25
    6d88:	8f 93       	push	r24
    6d8a:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    6d8e:	0f 90       	pop	r0
    6d90:	0f 90       	pop	r0
    6d92:	0f 90       	pop	r0
    6d94:	0f 90       	pop	r0
    6d96:	0f 90       	pop	r0
    6d98:	28 96       	adiw	r28, 0x08	; 8
    6d9a:	e4 e0       	ldi	r30, 0x04	; 4
    6d9c:	0c 94 0a e6 	jmp	0x1cc14	; 0x1cc14 <__epilogue_restores__+0x1c>

00006da0 <clock_clear>:
    6da0:	a8 e0       	ldi	r26, 0x08	; 8
    6da2:	b0 e0       	ldi	r27, 0x00	; 0
    6da4:	e6 ed       	ldi	r30, 0xD6	; 214
    6da6:	f6 e3       	ldi	r31, 0x36	; 54
    6da8:	0c 94 f0 e5 	jmp	0x1cbe0	; 0x1cbe0 <__prologue_saves__+0x20>
    6dac:	1d 82       	std	Y+5, r1	; 0x05
    6dae:	1e 82       	std	Y+6, r1	; 0x06
    6db0:	1f 82       	std	Y+7, r1	; 0x07
    6db2:	18 86       	std	Y+8, r1	; 0x08
    6db4:	19 82       	std	Y+1, r1	; 0x01
    6db6:	1a 82       	std	Y+2, r1	; 0x02
    6db8:	1b 82       	std	Y+3, r1	; 0x03
    6dba:	1c 82       	std	Y+4, r1	; 0x04
    6dbc:	ce 01       	movw	r24, r28
    6dbe:	01 96       	adiw	r24, 0x01	; 1
    6dc0:	bd de       	rcall	.-646    	; 0x6b3c <clock_settime.part.2>
    6dc2:	e6 e6       	ldi	r30, 0x66	; 102
    6dc4:	f9 e1       	ldi	r31, 0x19	; 25
    6dc6:	11 82       	std	Z+1, r1	; 0x01
    6dc8:	10 82       	st	Z, r1
    6dca:	13 82       	std	Z+3, r1	; 0x03
    6dcc:	12 82       	std	Z+2, r1	; 0x02
    6dce:	28 96       	adiw	r28, 0x08	; 8
    6dd0:	e2 e0       	ldi	r30, 0x02	; 2
    6dd2:	0c 94 0c e6 	jmp	0x1cc18	; 0x1cc18 <__epilogue_restores__+0x20>

00006dd6 <enable_timers>:
///
/// @return  void
MEMSPACE
void enable_timers()
{
    if(timers_configured && !timers_enabled)
    6dd6:	80 91 78 17 	lds	r24, 0x1778	; 0x801778 <timers_configured>
    6dda:	90 91 79 17 	lds	r25, 0x1779	; 0x801779 <timers_configured+0x1>
    6dde:	89 2b       	or	r24, r25
    6de0:	69 f0       	breq	.+26     	; 0x6dfc <enable_timers+0x26>
    6de2:	80 91 7a 17 	lds	r24, 0x177A	; 0x80177a <timers_enabled>
    6de6:	90 91 7b 17 	lds	r25, 0x177B	; 0x80177b <timers_enabled+0x1>
    6dea:	89 2b       	or	r24, r25
    {
        enable_system_task();
    6dec:	39 f4       	brne	.+14     	; 0x6dfc <enable_timers+0x26>
        timers_enabled = 1;
    6dee:	b8 dd       	rcall	.-1168   	; 0x6960 <enable_system_task>
    6df0:	81 e0       	ldi	r24, 0x01	; 1
    6df2:	90 e0       	ldi	r25, 0x00	; 0
    6df4:	90 93 7b 17 	sts	0x177B, r25	; 0x80177b <timers_enabled+0x1>
    6df8:	80 93 7a 17 	sts	0x177A, r24	; 0x80177a <timers_enabled>
    6dfc:	08 95       	ret

00006dfe <execute_timers>:
/// @brief  Execute all user timers at SYSTEM_HZ rate.
///  Called by system task
///
/// @return  void
void execute_timers()
{
    6dfe:	cf 93       	push	r28
    6e00:	df 93       	push	r29
    6e02:	ce e4       	ldi	r28, 0x4E	; 78
    6e04:	d9 e1       	ldi	r29, 0x19	; 25
    int i;

    for(i=0; i < MAX_TIMER_CNT; i++)
    {
        if(timer_irq[i].timer && timer_irq[i].user_timer_handler != NULL)
    6e06:	8a 81       	ldd	r24, Y+2	; 0x02
    6e08:	88 23       	and	r24, r24
    6e0a:	29 f0       	breq	.+10     	; 0x6e16 <execute_timers+0x18>
    6e0c:	e8 81       	ld	r30, Y
    6e0e:	f9 81       	ldd	r31, Y+1	; 0x01
    6e10:	30 97       	sbiw	r30, 0x00	; 0
    6e12:	09 f0       	breq	.+2      	; 0x6e16 <execute_timers+0x18>
            (*timer_irq[i].user_timer_handler)();
    6e14:	09 95       	icall
    6e16:	23 96       	adiw	r28, 0x03	; 3
/// @return  void
void execute_timers()
{
    int i;

    for(i=0; i < MAX_TIMER_CNT; i++)
    6e18:	89 e1       	ldi	r24, 0x19	; 25
    6e1a:	c6 36       	cpi	r28, 0x66	; 102
    6e1c:	d8 07       	cpc	r29, r24
    6e1e:	99 f7       	brne	.-26     	; 0x6e06 <execute_timers+0x8>
    {
        if(timer_irq[i].timer && timer_irq[i].user_timer_handler != NULL)
            (*timer_irq[i].user_timer_handler)();
    }
}
    6e20:	df 91       	pop	r29
    6e22:	cf 91       	pop	r28
    6e24:	08 95       	ret

00006e26 <init_timers>:
//
/// @return  void
MEMSPACE
void init_timers()
{
    printf("Timers init called\n");
    6e26:	86 e7       	ldi	r24, 0x76	; 118
    6e28:	95 e0       	ldi	r25, 0x05	; 5
    6e2a:	1f 92       	push	r1
    6e2c:	9f 93       	push	r25
    6e2e:	8f 93       	push	r24
    6e30:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>

    if(!timers_configured)
    6e34:	0f 90       	pop	r0
    6e36:	0f 90       	pop	r0
    6e38:	0f 90       	pop	r0
    6e3a:	80 91 78 17 	lds	r24, 0x1778	; 0x801778 <timers_configured>
    6e3e:	90 91 79 17 	lds	r25, 0x1779	; 0x801779 <timers_configured+0x1>
    6e42:	89 2b       	or	r24, r25
    {
        install_timers_isr();
    6e44:	a9 f4       	brne	.+42     	; 0x6e70 <init_timers+0x4a>
        timers_configured = 1;
    6e46:	8e dd       	rcall	.-1252   	; 0x6964 <install_timers_isr>
    6e48:	81 e0       	ldi	r24, 0x01	; 1
    6e4a:	90 e0       	ldi	r25, 0x00	; 0
    6e4c:	90 93 79 17 	sts	0x1779, r25	; 0x801779 <timers_configured+0x1>
    6e50:	80 93 78 17 	sts	0x1778, r24	; 0x801778 <timers_configured>
        timers_enabled = 0;
    6e54:	10 92 7b 17 	sts	0x177B, r1	; 0x80177b <timers_enabled+0x1>
    6e58:	10 92 7a 17 	sts	0x177A, r1	; 0x80177a <timers_enabled>
        printf("Timers configured\n");
    6e5c:	83 e6       	ldi	r24, 0x63	; 99
    6e5e:	95 e0       	ldi	r25, 0x05	; 5
    6e60:	1f 92       	push	r1
    6e62:	9f 93       	push	r25
    6e64:	8f 93       	push	r24
    6e66:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    }

    delete_all_timers();
    6e6a:	0f 90       	pop	r0

    clock_clear();
    6e6c:	0f 90       	pop	r0
    6e6e:	0f 90       	pop	r0
    printf("Clock Init\n");
    6e70:	d9 de       	rcall	.-590    	; 0x6c24 <delete_all_timers>
    6e72:	96 df       	rcall	.-212    	; 0x6da0 <clock_clear>
    6e74:	87 e5       	ldi	r24, 0x57	; 87
    6e76:	95 e0       	ldi	r25, 0x05	; 5
    6e78:	1f 92       	push	r1
    6e7a:	9f 93       	push	r25
    6e7c:	8f 93       	push	r24

///  See time.c
    if(set_timers(clock_task,1) == -1)
    6e7e:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    6e82:	61 e0       	ldi	r22, 0x01	; 1
    6e84:	70 e0       	ldi	r23, 0x00	; 0
    6e86:	81 e6       	ldi	r24, 0x61	; 97
    6e88:	95 e3       	ldi	r25, 0x35	; 53
    6e8a:	96 de       	rcall	.-724    	; 0x6bb8 <set_timers>
    6e8c:	0f 90       	pop	r0
    6e8e:	0f 90       	pop	r0
    6e90:	0f 90       	pop	r0
        printf("Clock task init failed\n");
    6e92:	01 96       	adiw	r24, 0x01	; 1
    6e94:	51 f4       	brne	.+20     	; 0x6eaa <init_timers+0x84>
    6e96:	8f e3       	ldi	r24, 0x3F	; 63
    6e98:	95 e0       	ldi	r25, 0x05	; 5
    6e9a:	1f 92       	push	r1
    6e9c:	9f 93       	push	r25
    6e9e:	8f 93       	push	r24
    6ea0:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    6ea4:	0f 90       	pop	r0
    printf("Clock Installed\n");
    6ea6:	0f 90       	pop	r0
    6ea8:	0f 90       	pop	r0
    6eaa:	8e e2       	ldi	r24, 0x2E	; 46
    6eac:	95 e0       	ldi	r25, 0x05	; 5
    6eae:	1f 92       	push	r1
    6eb0:	9f 93       	push	r25

    enable_timers();
    6eb2:	8f 93       	push	r24
    6eb4:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>

    printf("Timers enabled\n");
    6eb8:	8e df       	rcall	.-228    	; 0x6dd6 <enable_timers>
    6eba:	8e e1       	ldi	r24, 0x1E	; 30
    6ebc:	95 e0       	ldi	r25, 0x05	; 5
    6ebe:	1f 92       	push	r1
    6ec0:	9f 93       	push	r25
    6ec2:	8f 93       	push	r24
}
    6ec4:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    6ec8:	0f 90       	pop	r0
    6eca:	0f 90       	pop	r0
    6ecc:	0f 90       	pop	r0
    6ece:	0f 90       	pop	r0
    6ed0:	0f 90       	pop	r0
    6ed2:	0f 90       	pop	r0
    6ed4:	08 95       	ret

00006ed6 <clock_getres>:
/// @return 0 on success.
/// @return -1 on error.
MEMSPACE
int clock_getres(clockid_t clk_id, struct timespec *res)
{
    res->tv_sec = 0;
    6ed6:	fb 01       	movw	r30, r22
    6ed8:	10 82       	st	Z, r1
    6eda:	11 82       	std	Z+1, r1	; 0x01
    6edc:	12 82       	std	Z+2, r1	; 0x02
    6ede:	13 82       	std	Z+3, r1	; 0x03
    res->tv_nsec = SYSTEM_TASK_TIC_NS;
    6ee0:	80 e4       	ldi	r24, 0x40	; 64
    6ee2:	92 e4       	ldi	r25, 0x42	; 66
    6ee4:	af e0       	ldi	r26, 0x0F	; 15
    6ee6:	b0 e0       	ldi	r27, 0x00	; 0
    6ee8:	84 83       	std	Z+4, r24	; 0x04
    6eea:	95 83       	std	Z+5, r25	; 0x05
    6eec:	a6 83       	std	Z+6, r26	; 0x06
    6eee:	b7 83       	std	Z+7, r27	; 0x07
    return(0);
}
    6ef0:	80 e0       	ldi	r24, 0x00	; 0
    6ef2:	90 e0       	ldi	r25, 0x00	; 0
    6ef4:	08 95       	ret

00006ef6 <clock_settime>:
///
/// @return 0.
MEMSPACE
int clock_settime(clockid_t clk_id, const struct timespec *ts)
{
    if(clk_id)
    6ef6:	89 2b       	or	r24, r25
    6ef8:	19 f4       	brne	.+6      	; 0x6f00 <clock_settime+0xa>
    6efa:	cb 01       	movw	r24, r22
    6efc:	1f ce       	rjmp	.-962    	; 0x6b3c <clock_settime.part.2>
    6efe:	08 95       	ret
        return(-1);
    6f00:	8f ef       	ldi	r24, 0xFF	; 255
    6f02:	9f ef       	ldi	r25, 0xFF	; 255
            continue;
        break;
    }

    return(0);
}
    6f04:	08 95       	ret

00006f06 <IS_Leap>:
void print_dst_gmt()
{
    printf("DST START       GMT: %s\n", ctime_gm(&dst.start));
    printf("DST END         GMT: %s\n", ctime_gm(&dst.end));

}
    6f06:	9c 01       	movw	r18, r24
    6f08:	83 70       	andi	r24, 0x03	; 3
    6f0a:	99 27       	eor	r25, r25
    6f0c:	00 97       	sbiw	r24, 0x00	; 0
    6f0e:	69 f4       	brne	.+26     	; 0x6f2a <IS_Leap+0x24>
    6f10:	2c 36       	cpi	r18, 0x6C	; 108
    6f12:	47 e0       	ldi	r20, 0x07	; 7
    6f14:	34 07       	cpc	r19, r20
    6f16:	59 f0       	breq	.+22     	; 0x6f2e <IS_Leap+0x28>
    6f18:	51 e0       	ldi	r21, 0x01	; 1
    6f1a:	40 e0       	ldi	r20, 0x00	; 0
    6f1c:	24 33       	cpi	r18, 0x34	; 52
    6f1e:	38 40       	sbci	r19, 0x08	; 8
    6f20:	09 f4       	brne	.+2      	; 0x6f24 <IS_Leap+0x1e>
    6f22:	50 e0       	ldi	r21, 0x00	; 0
    6f24:	85 2f       	mov	r24, r21
    6f26:	94 2f       	mov	r25, r20
    6f28:	08 95       	ret
    6f2a:	80 e0       	ldi	r24, 0x00	; 0
    6f2c:	90 e0       	ldi	r25, 0x00	; 0
    6f2e:	08 95       	ret

00006f30 <tm_mon_to_ascii>:
    6f30:	8c 30       	cpi	r24, 0x0C	; 12
    6f32:	91 05       	cpc	r25, r1
    6f34:	40 f4       	brcc	.+16     	; 0x6f46 <tm_mon_to_ascii+0x16>
    6f36:	88 0f       	add	r24, r24
    6f38:	99 1f       	adc	r25, r25
    6f3a:	fc 01       	movw	r30, r24
    6f3c:	ee 5e       	subi	r30, 0xEE	; 238
    6f3e:	fe 4f       	sbci	r31, 0xFE	; 254
    6f40:	80 81       	ld	r24, Z
    6f42:	91 81       	ldd	r25, Z+1	; 0x01
    6f44:	08 95       	ret
    6f46:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__Month+0x18>
    6f4a:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <__Month+0x19>
    6f4e:	08 95       	ret

00006f50 <Days_Per_Month>:
    6f50:	cf 93       	push	r28
    6f52:	df 93       	push	r29
    6f54:	8c 30       	cpi	r24, 0x0C	; 12
    6f56:	91 05       	cpc	r25, r1
    6f58:	24 f0       	brlt	.+8      	; 0x6f62 <Days_Per_Month+0x12>
    6f5a:	6f 5f       	subi	r22, 0xFF	; 255
    6f5c:	7f 4f       	sbci	r23, 0xFF	; 255
    6f5e:	0c 97       	sbiw	r24, 0x0c	; 12
    6f60:	f9 cf       	rjmp	.-14     	; 0x6f54 <Days_Per_Month+0x4>
    6f62:	97 ff       	sbrs	r25, 7
    6f64:	04 c0       	rjmp	.+8      	; 0x6f6e <Days_Per_Month+0x1e>
    6f66:	61 50       	subi	r22, 0x01	; 1
    6f68:	71 09       	sbc	r23, r1
    6f6a:	0c 96       	adiw	r24, 0x0c	; 12
    6f6c:	fa cf       	rjmp	.-12     	; 0x6f62 <Days_Per_Month+0x12>
    6f6e:	fc 01       	movw	r30, r24
    6f70:	ee 0f       	add	r30, r30
    6f72:	ff 1f       	adc	r31, r31
    6f74:	ed 59       	subi	r30, 0x9D	; 157
    6f76:	fd 4f       	sbci	r31, 0xFD	; 253
    6f78:	c0 81       	ld	r28, Z
    6f7a:	d1 81       	ldd	r29, Z+1	; 0x01
    6f7c:	01 97       	sbiw	r24, 0x01	; 1
    6f7e:	29 f4       	brne	.+10     	; 0x6f8a <Days_Per_Month+0x3a>
    6f80:	cb 01       	movw	r24, r22
    6f82:	c1 df       	rcall	.-126    	; 0x6f06 <IS_Leap>
    6f84:	89 2b       	or	r24, r25
    6f86:	09 f0       	breq	.+2      	; 0x6f8a <Days_Per_Month+0x3a>
    6f88:	21 96       	adiw	r28, 0x01	; 1
    6f8a:	ce 01       	movw	r24, r28
    6f8c:	df 91       	pop	r29
    6f8e:	cf 91       	pop	r28
    6f90:	08 95       	ret

00006f92 <time_to_tm>:
    6f92:	a0 e0       	ldi	r26, 0x00	; 0
    6f94:	b0 e0       	ldi	r27, 0x00	; 0
    6f96:	ef ec       	ldi	r30, 0xCF	; 207
    6f98:	f7 e3       	ldi	r31, 0x37	; 55
    6f9a:	0c 94 e2 e5 	jmp	0x1cbc4	; 0x1cbc4 <__prologue_saves__+0x4>
    6f9e:	e8 01       	movw	r28, r16
    6fa0:	e6 e1       	ldi	r30, 0x16	; 22
    6fa2:	d8 01       	movw	r26, r16
    6fa4:	1d 92       	st	X+, r1
    6fa6:	ea 95       	dec	r30
    6fa8:	e9 f7       	brne	.-6      	; 0x6fa4 <time_to_tm+0x12>
    6faa:	61 15       	cp	r22, r1
    6fac:	bd e5       	ldi	r27, 0x5D	; 93
    6fae:	7b 07       	cpc	r23, r27
    6fb0:	bd ef       	ldi	r27, 0xFD	; 253
    6fb2:	8b 07       	cpc	r24, r27
    6fb4:	bf ef       	ldi	r27, 0xFF	; 255
    6fb6:	9b 07       	cpc	r25, r27
    6fb8:	08 f0       	brcs	.+2      	; 0x6fbc <time_to_tm+0x2a>
    6fba:	c0 c0       	rjmp	.+384    	; 0x713c <time_to_tm+0x1aa>
    6fbc:	6b 01       	movw	r12, r22
    6fbe:	7c 01       	movw	r14, r24
    6fc0:	c2 1a       	sub	r12, r18
    6fc2:	d3 0a       	sbc	r13, r19
    6fc4:	e4 0a       	sbc	r14, r20
    6fc6:	f5 0a       	sbc	r15, r21
    6fc8:	46 01       	movw	r8, r12
    6fca:	57 01       	movw	r10, r14
    6fcc:	e0 e8       	ldi	r30, 0x80	; 128
    6fce:	ce 16       	cp	r12, r30
    6fd0:	ee ea       	ldi	r30, 0xAE	; 174
    6fd2:	de 06       	cpc	r13, r30
    6fd4:	ee ef       	ldi	r30, 0xFE	; 254
    6fd6:	ee 06       	cpc	r14, r30
    6fd8:	ef ef       	ldi	r30, 0xFF	; 255
    6fda:	fe 06       	cpc	r15, r30
    6fdc:	50 f0       	brcs	.+20     	; 0x6ff2 <time_to_tm+0x60>
    6fde:	80 e8       	ldi	r24, 0x80	; 128
    6fe0:	88 0e       	add	r8, r24
    6fe2:	81 e5       	ldi	r24, 0x51	; 81
    6fe4:	98 1e       	adc	r9, r24
    6fe6:	81 e0       	ldi	r24, 0x01	; 1
    6fe8:	a8 1e       	adc	r10, r24
    6fea:	b1 1c       	adc	r11, r1
    6fec:	01 e0       	ldi	r16, 0x01	; 1
    6fee:	10 e0       	ldi	r17, 0x00	; 0
    6ff0:	02 c0       	rjmp	.+4      	; 0x6ff6 <time_to_tm+0x64>
    6ff2:	00 e0       	ldi	r16, 0x00	; 0
    6ff4:	10 e0       	ldi	r17, 0x00	; 0
    6ff6:	8c e3       	ldi	r24, 0x3C	; 60
    6ff8:	48 2e       	mov	r4, r24
    6ffa:	51 2c       	mov	r5, r1
    6ffc:	61 2c       	mov	r6, r1
    6ffe:	71 2c       	mov	r7, r1
    7000:	c5 01       	movw	r24, r10
    7002:	b4 01       	movw	r22, r8
    7004:	a3 01       	movw	r20, r6
    7006:	92 01       	movw	r18, r4
    7008:	0e 94 5e e5 	call	0x1cabc	; 0x1cabc <__udivmodsi4>
    700c:	79 83       	std	Y+1, r23	; 0x01
    700e:	68 83       	st	Y, r22
    7010:	ca 01       	movw	r24, r20
    7012:	b9 01       	movw	r22, r18
    7014:	a3 01       	movw	r20, r6
    7016:	92 01       	movw	r18, r4
    7018:	0e 94 5e e5 	call	0x1cabc	; 0x1cabc <__udivmodsi4>
    701c:	7b 83       	std	Y+3, r23	; 0x03
    701e:	6a 83       	std	Y+2, r22	; 0x02
    7020:	c5 01       	movw	r24, r10
    7022:	b4 01       	movw	r22, r8
    7024:	20 e1       	ldi	r18, 0x10	; 16
    7026:	3e e0       	ldi	r19, 0x0E	; 14
    7028:	40 e0       	ldi	r20, 0x00	; 0
    702a:	50 e0       	ldi	r21, 0x00	; 0
    702c:	0e 94 5e e5 	call	0x1cabc	; 0x1cabc <__udivmodsi4>
    7030:	ca 01       	movw	r24, r20
    7032:	b9 01       	movw	r22, r18
    7034:	28 e1       	ldi	r18, 0x18	; 24
    7036:	30 e0       	ldi	r19, 0x00	; 0
    7038:	40 e0       	ldi	r20, 0x00	; 0
    703a:	50 e0       	ldi	r21, 0x00	; 0
    703c:	0e 94 5e e5 	call	0x1cabc	; 0x1cabc <__udivmodsi4>
    7040:	7d 83       	std	Y+5, r23	; 0x05
    7042:	6c 83       	std	Y+4, r22	; 0x04
    7044:	01 15       	cp	r16, r1
    7046:	11 05       	cpc	r17, r1
    7048:	89 f0       	breq	.+34     	; 0x706c <time_to_tm+0xda>
    704a:	85 e4       	ldi	r24, 0x45	; 69
    704c:	90 e0       	ldi	r25, 0x00	; 0
    704e:	9b 87       	std	Y+11, r25	; 0x0b
    7050:	8a 87       	std	Y+10, r24	; 0x0a
    7052:	8b e0       	ldi	r24, 0x0B	; 11
    7054:	90 e0       	ldi	r25, 0x00	; 0
    7056:	99 87       	std	Y+9, r25	; 0x09
    7058:	88 87       	std	Y+8, r24	; 0x08
    705a:	8f e1       	ldi	r24, 0x1F	; 31
    705c:	90 e0       	ldi	r25, 0x00	; 0
    705e:	9f 83       	std	Y+7, r25	; 0x07
    7060:	8e 83       	std	Y+6, r24	; 0x06
    7062:	83 e0       	ldi	r24, 0x03	; 3
    7064:	90 e0       	ldi	r25, 0x00	; 0
    7066:	9d 87       	std	Y+13, r25	; 0x0d
    7068:	8c 87       	std	Y+12, r24	; 0x0c
    706a:	65 c0       	rjmp	.+202    	; 0x7136 <time_to_tm+0x1a4>
    706c:	c5 01       	movw	r24, r10
    706e:	b4 01       	movw	r22, r8
    7070:	20 e8       	ldi	r18, 0x80	; 128
    7072:	31 e5       	ldi	r19, 0x51	; 81
    7074:	41 e0       	ldi	r20, 0x01	; 1
    7076:	50 e0       	ldi	r21, 0x00	; 0
    7078:	0e 94 5e e5 	call	0x1cabc	; 0x1cabc <__udivmodsi4>
    707c:	49 01       	movw	r8, r18
    707e:	5a 01       	movw	r10, r20
    7080:	ca 01       	movw	r24, r20
    7082:	b9 01       	movw	r22, r18
    7084:	6c 5f       	subi	r22, 0xFC	; 252
    7086:	7f 4f       	sbci	r23, 0xFF	; 255
    7088:	8f 4f       	sbci	r24, 0xFF	; 255
    708a:	9f 4f       	sbci	r25, 0xFF	; 255
    708c:	27 e0       	ldi	r18, 0x07	; 7
    708e:	30 e0       	ldi	r19, 0x00	; 0
    7090:	40 e0       	ldi	r20, 0x00	; 0
    7092:	50 e0       	ldi	r21, 0x00	; 0
    7094:	0e 94 80 e5 	call	0x1cb00	; 0x1cb00 <__divmodsi4>
    7098:	7d 87       	std	Y+13, r23	; 0x0d
    709a:	6c 87       	std	Y+12, r22	; 0x0c
    709c:	02 eb       	ldi	r16, 0xB2	; 178
    709e:	17 e0       	ldi	r17, 0x07	; 7
    70a0:	c8 01       	movw	r24, r16
    70a2:	31 df       	rcall	.-414    	; 0x6f06 <IS_Leap>
    70a4:	00 97       	sbiw	r24, 0x00	; 0
    70a6:	19 f4       	brne	.+6      	; 0x70ae <time_to_tm+0x11c>
    70a8:	4d e6       	ldi	r20, 0x6D	; 109
    70aa:	51 e0       	ldi	r21, 0x01	; 1
    70ac:	02 c0       	rjmp	.+4      	; 0x70b2 <time_to_tm+0x120>
    70ae:	4e e6       	ldi	r20, 0x6E	; 110
    70b0:	51 e0       	ldi	r21, 0x01	; 1
    70b2:	05 2e       	mov	r0, r21
    70b4:	00 0c       	add	r0, r0
    70b6:	66 0b       	sbc	r22, r22
    70b8:	77 0b       	sbc	r23, r23
    70ba:	84 16       	cp	r8, r20
    70bc:	95 06       	cpc	r9, r21
    70be:	a6 06       	cpc	r10, r22
    70c0:	b7 06       	cpc	r11, r23
    70c2:	3c f0       	brlt	.+14     	; 0x70d2 <time_to_tm+0x140>
    70c4:	0f 5f       	subi	r16, 0xFF	; 255
    70c6:	1f 4f       	sbci	r17, 0xFF	; 255
    70c8:	84 1a       	sub	r8, r20
    70ca:	95 0a       	sbc	r9, r21
    70cc:	a6 0a       	sbc	r10, r22
    70ce:	b7 0a       	sbc	r11, r23
    70d0:	e7 cf       	rjmp	.-50     	; 0x70a0 <time_to_tm+0x10e>
    70d2:	0c 56       	subi	r16, 0x6C	; 108
    70d4:	17 40       	sbci	r17, 0x07	; 7
    70d6:	1b 87       	std	Y+11, r17	; 0x0b
    70d8:	0a 87       	std	Y+10, r16	; 0x0a
    70da:	9f 86       	std	Y+15, r9	; 0x0f
    70dc:	8e 86       	std	Y+14, r8	; 0x0e
    70de:	e3 e6       	ldi	r30, 0x63	; 99
    70e0:	f2 e0       	ldi	r31, 0x02	; 2
    70e2:	20 e0       	ldi	r18, 0x00	; 0
    70e4:	30 e0       	ldi	r19, 0x00	; 0
    70e6:	18 14       	cp	r1, r8
    70e8:	19 04       	cpc	r1, r9
    70ea:	1a 04       	cpc	r1, r10
    70ec:	1b 04       	cpc	r1, r11
    70ee:	e4 f4       	brge	.+56     	; 0x7128 <time_to_tm+0x196>
    70f0:	2c 30       	cpi	r18, 0x0C	; 12
    70f2:	31 05       	cpc	r19, r1
    70f4:	c9 f0       	breq	.+50     	; 0x7128 <time_to_tm+0x196>
    70f6:	41 91       	ld	r20, Z+
    70f8:	51 91       	ld	r21, Z+
    70fa:	21 30       	cpi	r18, 0x01	; 1
    70fc:	31 05       	cpc	r19, r1
    70fe:	21 f4       	brne	.+8      	; 0x7108 <time_to_tm+0x176>
    7100:	00 97       	sbiw	r24, 0x00	; 0
    7102:	11 f0       	breq	.+4      	; 0x7108 <time_to_tm+0x176>
    7104:	4f 5f       	subi	r20, 0xFF	; 255
    7106:	5f 4f       	sbci	r21, 0xFF	; 255
    7108:	05 2e       	mov	r0, r21
    710a:	00 0c       	add	r0, r0
    710c:	66 0b       	sbc	r22, r22
    710e:	77 0b       	sbc	r23, r23
    7110:	84 16       	cp	r8, r20
    7112:	95 06       	cpc	r9, r21
    7114:	a6 06       	cpc	r10, r22
    7116:	b7 06       	cpc	r11, r23
    7118:	3c f0       	brlt	.+14     	; 0x7128 <time_to_tm+0x196>
    711a:	84 1a       	sub	r8, r20
    711c:	95 0a       	sbc	r9, r21
    711e:	a6 0a       	sbc	r10, r22
    7120:	b7 0a       	sbc	r11, r23
    7122:	2f 5f       	subi	r18, 0xFF	; 255
    7124:	3f 4f       	sbci	r19, 0xFF	; 255
    7126:	df cf       	rjmp	.-66     	; 0x70e6 <time_to_tm+0x154>
    7128:	39 87       	std	Y+9, r19	; 0x09
    712a:	28 87       	std	Y+8, r18	; 0x08
    712c:	af ef       	ldi	r26, 0xFF	; 255
    712e:	8a 1a       	sub	r8, r26
    7130:	9a 0a       	sbc	r9, r26
    7132:	9f 82       	std	Y+7, r9	; 0x07
    7134:	8e 82       	std	Y+6, r8	; 0x06
    7136:	b6 01       	movw	r22, r12
    7138:	c7 01       	movw	r24, r14
    713a:	04 c0       	rjmp	.+8      	; 0x7144 <time_to_tm+0x1b2>
    713c:	6f ef       	ldi	r22, 0xFF	; 255
    713e:	7f ef       	ldi	r23, 0xFF	; 255
    7140:	8f ef       	ldi	r24, 0xFF	; 255
    7142:	9f ef       	ldi	r25, 0xFF	; 255
    7144:	cd b7       	in	r28, 0x3d	; 61
    7146:	de b7       	in	r29, 0x3e	; 62
    7148:	e0 e1       	ldi	r30, 0x10	; 16
    714a:	0c 94 fe e5 	jmp	0x1cbfc	; 0x1cbfc <__epilogue_restores__+0x4>

0000714e <gmtime_r>:
    714e:	0f 93       	push	r16
    7150:	1f 93       	push	r17
    7152:	cf 93       	push	r28
    7154:	df 93       	push	r29
    7156:	eb 01       	movw	r28, r22
    7158:	fc 01       	movw	r30, r24
    715a:	60 81       	ld	r22, Z
    715c:	71 81       	ldd	r23, Z+1	; 0x01
    715e:	82 81       	ldd	r24, Z+2	; 0x02
    7160:	93 81       	ldd	r25, Z+3	; 0x03
    7162:	8e 01       	movw	r16, r28
    7164:	20 e0       	ldi	r18, 0x00	; 0
    7166:	30 e0       	ldi	r19, 0x00	; 0
    7168:	a9 01       	movw	r20, r18
    716a:	13 df       	rcall	.-474    	; 0x6f92 <time_to_tm>
    716c:	ce 01       	movw	r24, r28
    716e:	df 91       	pop	r29
    7170:	cf 91       	pop	r28
    7172:	1f 91       	pop	r17
    7174:	0f 91       	pop	r16
    7176:	08 95       	ret

00007178 <gmtime>:
    7178:	2a e9       	ldi	r18, 0x9A	; 154
    717a:	37 e1       	ldi	r19, 0x17	; 23
    717c:	30 93 b1 17 	sts	0x17B1, r19	; 0x8017b1 <p.3798+0x1>
    7180:	20 93 b0 17 	sts	0x17B0, r18	; 0x8017b0 <p.3798>
    7184:	b9 01       	movw	r22, r18
    7186:	e3 df       	rcall	.-58     	; 0x714e <gmtime_r>
    7188:	8a e9       	ldi	r24, 0x9A	; 154
    718a:	97 e1       	ldi	r25, 0x17	; 23
    718c:	08 95       	ret

0000718e <gettimezone>:
    718e:	e6 e6       	ldi	r30, 0x66	; 102
    7190:	f9 e1       	ldi	r31, 0x19	; 25
    7192:	20 81       	ld	r18, Z
    7194:	31 81       	ldd	r19, Z+1	; 0x01
    7196:	dc 01       	movw	r26, r24
    7198:	11 96       	adiw	r26, 0x01	; 1
    719a:	3c 93       	st	X, r19
    719c:	2e 93       	st	-X, r18
    719e:	22 81       	ldd	r18, Z+2	; 0x02
    71a0:	33 81       	ldd	r19, Z+3	; 0x03
    71a2:	13 96       	adiw	r26, 0x03	; 3
    71a4:	3c 93       	st	X, r19
    71a6:	2e 93       	st	-X, r18
    71a8:	12 97       	sbiw	r26, 0x02	; 2
    71aa:	80 e0       	ldi	r24, 0x00	; 0
    71ac:	90 e0       	ldi	r25, 0x00	; 0
    71ae:	08 95       	ret

000071b0 <settimezone>:
    71b0:	dc 01       	movw	r26, r24
    71b2:	2d 91       	ld	r18, X+
    71b4:	3c 91       	ld	r19, X
    71b6:	11 97       	sbiw	r26, 0x01	; 1
    71b8:	e6 e6       	ldi	r30, 0x66	; 102
    71ba:	f9 e1       	ldi	r31, 0x19	; 25
    71bc:	31 83       	std	Z+1, r19	; 0x01
    71be:	20 83       	st	Z, r18
    71c0:	12 96       	adiw	r26, 0x02	; 2
    71c2:	8d 91       	ld	r24, X+
    71c4:	9c 91       	ld	r25, X
    71c6:	13 97       	sbiw	r26, 0x03	; 3
    71c8:	93 83       	std	Z+3, r25	; 0x03
    71ca:	82 83       	std	Z+2, r24	; 0x02
    71cc:	80 e0       	ldi	r24, 0x00	; 0
    71ce:	90 e0       	ldi	r25, 0x00	; 0
    71d0:	08 95       	ret

000071d2 <gettimeofday>:
    71d2:	a8 e0       	ldi	r26, 0x08	; 8
    71d4:	b0 e0       	ldi	r27, 0x00	; 0
    71d6:	ef ee       	ldi	r30, 0xEF	; 239
    71d8:	f8 e3       	ldi	r31, 0x38	; 56
    71da:	0c 94 ec e5 	jmp	0x1cbd8	; 0x1cbd8 <__prologue_saves__+0x18>
    71de:	8c 01       	movw	r16, r24
    71e0:	7b 01       	movw	r14, r22
    71e2:	be 01       	movw	r22, r28
    71e4:	6f 5f       	subi	r22, 0xFF	; 255
    71e6:	7f 4f       	sbci	r23, 0xFF	; 255
    71e8:	80 e0       	ldi	r24, 0x00	; 0
    71ea:	90 e0       	ldi	r25, 0x00	; 0
    71ec:	f5 db       	rcall	.-2070   	; 0x69d8 <clock_gettime>
    71ee:	89 81       	ldd	r24, Y+1	; 0x01
    71f0:	9a 81       	ldd	r25, Y+2	; 0x02
    71f2:	ab 81       	ldd	r26, Y+3	; 0x03
    71f4:	bc 81       	ldd	r27, Y+4	; 0x04
    71f6:	f8 01       	movw	r30, r16
    71f8:	80 83       	st	Z, r24
    71fa:	91 83       	std	Z+1, r25	; 0x01
    71fc:	a2 83       	std	Z+2, r26	; 0x02
    71fe:	b3 83       	std	Z+3, r27	; 0x03
    7200:	6d 81       	ldd	r22, Y+5	; 0x05
    7202:	7e 81       	ldd	r23, Y+6	; 0x06
    7204:	8f 81       	ldd	r24, Y+7	; 0x07
    7206:	98 85       	ldd	r25, Y+8	; 0x08
    7208:	28 ee       	ldi	r18, 0xE8	; 232
    720a:	33 e0       	ldi	r19, 0x03	; 3
    720c:	40 e0       	ldi	r20, 0x00	; 0
    720e:	50 e0       	ldi	r21, 0x00	; 0
    7210:	0e 94 80 e5 	call	0x1cb00	; 0x1cb00 <__divmodsi4>
    7214:	f8 01       	movw	r30, r16
    7216:	24 83       	std	Z+4, r18	; 0x04
    7218:	35 83       	std	Z+5, r19	; 0x05
    721a:	46 83       	std	Z+6, r20	; 0x06
    721c:	57 83       	std	Z+7, r21	; 0x07
    721e:	c7 01       	movw	r24, r14
    7220:	b6 df       	rcall	.-148    	; 0x718e <gettimezone>
    7222:	80 e0       	ldi	r24, 0x00	; 0
    7224:	90 e0       	ldi	r25, 0x00	; 0
    7226:	28 96       	adiw	r28, 0x08	; 8
    7228:	e6 e0       	ldi	r30, 0x06	; 6
    722a:	0c 94 08 e6 	jmp	0x1cc10	; 0x1cc10 <__epilogue_restores__+0x18>

0000722e <time>:
    722e:	cf 93       	push	r28
    7230:	df 93       	push	r29
    7232:	ec 01       	movw	r28, r24
    7234:	6c e7       	ldi	r22, 0x7C	; 124
    7236:	77 e1       	ldi	r23, 0x17	; 23
    7238:	80 e0       	ldi	r24, 0x00	; 0
    723a:	90 e0       	ldi	r25, 0x00	; 0
    723c:	cd db       	rcall	.-2150   	; 0x69d8 <clock_gettime>
    723e:	20 97       	sbiw	r28, 0x00	; 0
    7240:	61 f0       	breq	.+24     	; 0x725a <time+0x2c>
    7242:	80 91 7c 17 	lds	r24, 0x177C	; 0x80177c <ts.3876>
    7246:	90 91 7d 17 	lds	r25, 0x177D	; 0x80177d <ts.3876+0x1>
    724a:	a0 91 7e 17 	lds	r26, 0x177E	; 0x80177e <ts.3876+0x2>
    724e:	b0 91 7f 17 	lds	r27, 0x177F	; 0x80177f <ts.3876+0x3>
    7252:	88 83       	st	Y, r24
    7254:	99 83       	std	Y+1, r25	; 0x01
    7256:	aa 83       	std	Y+2, r26	; 0x02
    7258:	bb 83       	std	Y+3, r27	; 0x03
    725a:	60 91 7c 17 	lds	r22, 0x177C	; 0x80177c <ts.3876>
    725e:	70 91 7d 17 	lds	r23, 0x177D	; 0x80177d <ts.3876+0x1>
    7262:	80 91 7e 17 	lds	r24, 0x177E	; 0x80177e <ts.3876+0x2>
    7266:	90 91 7f 17 	lds	r25, 0x177F	; 0x80177f <ts.3876+0x3>
    726a:	df 91       	pop	r29
    726c:	cf 91       	pop	r28
    726e:	08 95       	ret

00007270 <is_dst>:
    7270:	cf 92       	push	r12
    7272:	df 92       	push	r13
    7274:	ef 92       	push	r14
    7276:	ff 92       	push	r15
    7278:	6b 01       	movw	r12, r22
    727a:	7c 01       	movw	r14, r24
    727c:	ff d3       	rcall	.+2046   	; 0x7a7c <set_dst>
    727e:	80 91 6a 19 	lds	r24, 0x196A	; 0x80196a <dst>
    7282:	90 91 6b 19 	lds	r25, 0x196B	; 0x80196b <dst+0x1>
    7286:	a0 91 6c 19 	lds	r26, 0x196C	; 0x80196c <dst+0x2>
    728a:	b0 91 6d 19 	lds	r27, 0x196D	; 0x80196d <dst+0x3>
    728e:	c8 16       	cp	r12, r24
    7290:	d9 06       	cpc	r13, r25
    7292:	ea 06       	cpc	r14, r26
    7294:	fb 06       	cpc	r15, r27
    7296:	88 f0       	brcs	.+34     	; 0x72ba <is_dst+0x4a>
    7298:	81 e0       	ldi	r24, 0x01	; 1
    729a:	90 e0       	ldi	r25, 0x00	; 0
    729c:	40 91 6e 19 	lds	r20, 0x196E	; 0x80196e <dst+0x4>
    72a0:	50 91 6f 19 	lds	r21, 0x196F	; 0x80196f <dst+0x5>
    72a4:	60 91 70 19 	lds	r22, 0x1970	; 0x801970 <dst+0x6>
    72a8:	70 91 71 19 	lds	r23, 0x1971	; 0x801971 <dst+0x7>
    72ac:	4c 15       	cp	r20, r12
    72ae:	5d 05       	cpc	r21, r13
    72b0:	6e 05       	cpc	r22, r14
    72b2:	7f 05       	cpc	r23, r15
    72b4:	20 f4       	brcc	.+8      	; 0x72be <is_dst+0x4e>
    72b6:	80 e0       	ldi	r24, 0x00	; 0
    72b8:	02 c0       	rjmp	.+4      	; 0x72be <is_dst+0x4e>
    72ba:	80 e0       	ldi	r24, 0x00	; 0
    72bc:	90 e0       	ldi	r25, 0x00	; 0
    72be:	ff 90       	pop	r15
    72c0:	ef 90       	pop	r14
    72c2:	df 90       	pop	r13
    72c4:	cf 90       	pop	r12
    72c6:	08 95       	ret

000072c8 <localtime_r>:
    72c8:	4f 92       	push	r4
    72ca:	5f 92       	push	r5
    72cc:	6f 92       	push	r6
    72ce:	7f 92       	push	r7
    72d0:	af 92       	push	r10
    72d2:	bf 92       	push	r11
    72d4:	cf 92       	push	r12
    72d6:	df 92       	push	r13
    72d8:	ef 92       	push	r14
    72da:	ff 92       	push	r15
    72dc:	0f 93       	push	r16
    72de:	1f 93       	push	r17
    72e0:	cf 93       	push	r28
    72e2:	df 93       	push	r29
    72e4:	00 d0       	rcall	.+0      	; 0x72e6 <localtime_r+0x1e>
    72e6:	00 d0       	rcall	.+0      	; 0x72e8 <localtime_r+0x20>
    72e8:	cd b7       	in	r28, 0x3d	; 61
    72ea:	de b7       	in	r29, 0x3e	; 62
    72ec:	5b 01       	movw	r10, r22
    72ee:	fc 01       	movw	r30, r24
    72f0:	40 80       	ld	r4, Z
    72f2:	51 80       	ldd	r5, Z+1	; 0x01
    72f4:	62 80       	ldd	r6, Z+2	; 0x02
    72f6:	73 80       	ldd	r7, Z+3	; 0x03
    72f8:	ce 01       	movw	r24, r28
    72fa:	01 96       	adiw	r24, 0x01	; 1
    72fc:	48 df       	rcall	.-368    	; 0x718e <gettimezone>
    72fe:	a9 81       	ldd	r26, Y+1	; 0x01
    7300:	ba 81       	ldd	r27, Y+2	; 0x02
    7302:	2c e3       	ldi	r18, 0x3C	; 60
    7304:	30 e0       	ldi	r19, 0x00	; 0
    7306:	0e 94 ba e5 	call	0x1cb74	; 0x1cb74 <__usmulhisi3>
    730a:	6b 01       	movw	r12, r22
    730c:	7c 01       	movw	r14, r24
    730e:	c3 01       	movw	r24, r6
    7310:	b2 01       	movw	r22, r4
    7312:	6c 19       	sub	r22, r12
    7314:	7d 09       	sbc	r23, r13
    7316:	8e 09       	sbc	r24, r14
    7318:	9f 09       	sbc	r25, r15
    731a:	aa df       	rcall	.-172    	; 0x7270 <is_dst>
    731c:	89 2b       	or	r24, r25
    731e:	31 f0       	breq	.+12     	; 0x732c <localtime_r+0x64>
    7320:	f0 e1       	ldi	r31, 0x10	; 16
    7322:	cf 1a       	sub	r12, r31
    7324:	fe e0       	ldi	r31, 0x0E	; 14
    7326:	df 0a       	sbc	r13, r31
    7328:	e1 08       	sbc	r14, r1
    732a:	f1 08       	sbc	r15, r1
    732c:	85 01       	movw	r16, r10
    732e:	a7 01       	movw	r20, r14
    7330:	96 01       	movw	r18, r12
    7332:	c3 01       	movw	r24, r6
    7334:	b2 01       	movw	r22, r4
    7336:	2d de       	rcall	.-934    	; 0x6f92 <time_to_tm>
    7338:	c5 01       	movw	r24, r10
    733a:	0f 90       	pop	r0
    733c:	0f 90       	pop	r0
    733e:	0f 90       	pop	r0
    7340:	0f 90       	pop	r0
    7342:	df 91       	pop	r29
    7344:	cf 91       	pop	r28
    7346:	1f 91       	pop	r17
    7348:	0f 91       	pop	r16
    734a:	ff 90       	pop	r15
    734c:	ef 90       	pop	r14
    734e:	df 90       	pop	r13
    7350:	cf 90       	pop	r12
    7352:	bf 90       	pop	r11
    7354:	af 90       	pop	r10
    7356:	7f 90       	pop	r7
    7358:	6f 90       	pop	r6
    735a:	5f 90       	pop	r5
    735c:	4f 90       	pop	r4
    735e:	08 95       	ret

00007360 <localtime>:
    7360:	64 e8       	ldi	r22, 0x84	; 132
    7362:	77 e1       	ldi	r23, 0x17	; 23
    7364:	b1 cf       	rjmp	.-158    	; 0x72c8 <localtime_r>
    7366:	08 95       	ret

00007368 <normalize>:
    7368:	aa e0       	ldi	r26, 0x0A	; 10
    736a:	b0 e0       	ldi	r27, 0x00	; 0
    736c:	ea eb       	ldi	r30, 0xBA	; 186
    736e:	f9 e3       	ldi	r31, 0x39	; 57
    7370:	0c 94 e0 e5 	jmp	0x1cbc0	; 0x1cbc0 <__prologue_saves__>
    7374:	7c 01       	movw	r14, r24
    7376:	7a 87       	std	Y+10, r23	; 0x0a
    7378:	69 87       	std	Y+9, r22	; 0x09
    737a:	f7 01       	movw	r30, r14
    737c:	80 81       	ld	r24, Z
    737e:	91 81       	ldd	r25, Z+1	; 0x01
    7380:	8c 33       	cpi	r24, 0x3C	; 60
    7382:	91 05       	cpc	r25, r1
    7384:	5c f0       	brlt	.+22     	; 0x739c <normalize+0x34>
    7386:	f7 01       	movw	r30, r14
    7388:	22 81       	ldd	r18, Z+2	; 0x02
    738a:	33 81       	ldd	r19, Z+3	; 0x03
    738c:	2f 5f       	subi	r18, 0xFF	; 255
    738e:	3f 4f       	sbci	r19, 0xFF	; 255
    7390:	33 83       	std	Z+3, r19	; 0x03
    7392:	22 83       	std	Z+2, r18	; 0x02
    7394:	cc 97       	sbiw	r24, 0x3c	; 60
    7396:	91 83       	std	Z+1, r25	; 0x01
    7398:	80 83       	st	Z, r24
    739a:	ef cf       	rjmp	.-34     	; 0x737a <normalize+0x12>
    739c:	f7 01       	movw	r30, r14
    739e:	01 90       	ld	r0, Z+
    73a0:	f0 81       	ld	r31, Z
    73a2:	e0 2d       	mov	r30, r0
    73a4:	fe 83       	std	Y+6, r31	; 0x06
    73a6:	ed 83       	std	Y+5, r30	; 0x05
    73a8:	f7 ff       	sbrs	r31, 7
    73aa:	0d c0       	rjmp	.+26     	; 0x73c6 <normalize+0x5e>
    73ac:	f7 01       	movw	r30, r14
    73ae:	82 81       	ldd	r24, Z+2	; 0x02
    73b0:	93 81       	ldd	r25, Z+3	; 0x03
    73b2:	01 97       	sbiw	r24, 0x01	; 1
    73b4:	93 83       	std	Z+3, r25	; 0x03
    73b6:	82 83       	std	Z+2, r24	; 0x02
    73b8:	6d 81       	ldd	r22, Y+5	; 0x05
    73ba:	7e 81       	ldd	r23, Y+6	; 0x06
    73bc:	64 5c       	subi	r22, 0xC4	; 196
    73be:	7f 4f       	sbci	r23, 0xFF	; 255
    73c0:	71 83       	std	Z+1, r23	; 0x01
    73c2:	60 83       	st	Z, r22
    73c4:	eb cf       	rjmp	.-42     	; 0x739c <normalize+0x34>
    73c6:	f7 01       	movw	r30, r14
    73c8:	82 81       	ldd	r24, Z+2	; 0x02
    73ca:	93 81       	ldd	r25, Z+3	; 0x03
    73cc:	8c 33       	cpi	r24, 0x3C	; 60
    73ce:	91 05       	cpc	r25, r1
    73d0:	5c f0       	brlt	.+22     	; 0x73e8 <normalize+0x80>
    73d2:	f7 01       	movw	r30, r14
    73d4:	24 81       	ldd	r18, Z+4	; 0x04
    73d6:	35 81       	ldd	r19, Z+5	; 0x05
    73d8:	2f 5f       	subi	r18, 0xFF	; 255
    73da:	3f 4f       	sbci	r19, 0xFF	; 255
    73dc:	35 83       	std	Z+5, r19	; 0x05
    73de:	24 83       	std	Z+4, r18	; 0x04
    73e0:	cc 97       	sbiw	r24, 0x3c	; 60
    73e2:	93 83       	std	Z+3, r25	; 0x03
    73e4:	82 83       	std	Z+2, r24	; 0x02
    73e6:	ef cf       	rjmp	.-34     	; 0x73c6 <normalize+0x5e>
    73e8:	f7 01       	movw	r30, r14
    73ea:	22 80       	ldd	r2, Z+2	; 0x02
    73ec:	33 80       	ldd	r3, Z+3	; 0x03
    73ee:	37 fe       	sbrs	r3, 7
    73f0:	0d c0       	rjmp	.+26     	; 0x740c <normalize+0xa4>
    73f2:	f7 01       	movw	r30, r14
    73f4:	84 81       	ldd	r24, Z+4	; 0x04
    73f6:	95 81       	ldd	r25, Z+5	; 0x05
    73f8:	01 97       	sbiw	r24, 0x01	; 1
    73fa:	95 83       	std	Z+5, r25	; 0x05
    73fc:	84 83       	std	Z+4, r24	; 0x04
    73fe:	fc e3       	ldi	r31, 0x3C	; 60
    7400:	2f 0e       	add	r2, r31
    7402:	31 1c       	adc	r3, r1
    7404:	f7 01       	movw	r30, r14
    7406:	33 82       	std	Z+3, r3	; 0x03
    7408:	22 82       	std	Z+2, r2	; 0x02
    740a:	ee cf       	rjmp	.-36     	; 0x73e8 <normalize+0x80>
    740c:	f7 01       	movw	r30, r14
    740e:	84 81       	ldd	r24, Z+4	; 0x04
    7410:	95 81       	ldd	r25, Z+5	; 0x05
    7412:	88 31       	cpi	r24, 0x18	; 24
    7414:	91 05       	cpc	r25, r1
    7416:	5c f0       	brlt	.+22     	; 0x742e <normalize+0xc6>
    7418:	f7 01       	movw	r30, r14
    741a:	26 81       	ldd	r18, Z+6	; 0x06
    741c:	37 81       	ldd	r19, Z+7	; 0x07
    741e:	2f 5f       	subi	r18, 0xFF	; 255
    7420:	3f 4f       	sbci	r19, 0xFF	; 255
    7422:	37 83       	std	Z+7, r19	; 0x07
    7424:	26 83       	std	Z+6, r18	; 0x06
    7426:	48 97       	sbiw	r24, 0x18	; 24
    7428:	95 83       	std	Z+5, r25	; 0x05
    742a:	84 83       	std	Z+4, r24	; 0x04
    742c:	ef cf       	rjmp	.-34     	; 0x740c <normalize+0xa4>
    742e:	f7 01       	movw	r30, r14
    7430:	04 81       	ldd	r16, Z+4	; 0x04
    7432:	15 81       	ldd	r17, Z+5	; 0x05
    7434:	17 ff       	sbrs	r17, 7
    7436:	0b c0       	rjmp	.+22     	; 0x744e <normalize+0xe6>
    7438:	f7 01       	movw	r30, r14
    743a:	86 81       	ldd	r24, Z+6	; 0x06
    743c:	97 81       	ldd	r25, Z+7	; 0x07
    743e:	01 97       	sbiw	r24, 0x01	; 1
    7440:	97 83       	std	Z+7, r25	; 0x07
    7442:	86 83       	std	Z+6, r24	; 0x06
    7444:	08 5e       	subi	r16, 0xE8	; 232
    7446:	1f 4f       	sbci	r17, 0xFF	; 255
    7448:	15 83       	std	Z+5, r17	; 0x05
    744a:	04 83       	std	Z+4, r16	; 0x04
    744c:	f0 cf       	rjmp	.-32     	; 0x742e <normalize+0xc6>
    744e:	f7 01       	movw	r30, r14
    7450:	80 85       	ldd	r24, Z+8	; 0x08
    7452:	91 85       	ldd	r25, Z+9	; 0x09
    7454:	8c 30       	cpi	r24, 0x0C	; 12
    7456:	91 05       	cpc	r25, r1
    7458:	5c f0       	brlt	.+22     	; 0x7470 <normalize+0x108>
    745a:	f7 01       	movw	r30, r14
    745c:	22 85       	ldd	r18, Z+10	; 0x0a
    745e:	33 85       	ldd	r19, Z+11	; 0x0b
    7460:	2f 5f       	subi	r18, 0xFF	; 255
    7462:	3f 4f       	sbci	r19, 0xFF	; 255
    7464:	33 87       	std	Z+11, r19	; 0x0b
    7466:	22 87       	std	Z+10, r18	; 0x0a
    7468:	0c 97       	sbiw	r24, 0x0c	; 12
    746a:	91 87       	std	Z+9, r25	; 0x09
    746c:	80 87       	std	Z+8, r24	; 0x08
    746e:	ef cf       	rjmp	.-34     	; 0x744e <normalize+0xe6>
    7470:	f7 01       	movw	r30, r14
    7472:	80 85       	ldd	r24, Z+8	; 0x08
    7474:	91 85       	ldd	r25, Z+9	; 0x09
    7476:	97 ff       	sbrs	r25, 7
    7478:	2d c0       	rjmp	.+90     	; 0x74d4 <normalize+0x16c>
    747a:	f7 01       	movw	r30, r14
    747c:	22 85       	ldd	r18, Z+10	; 0x0a
    747e:	33 85       	ldd	r19, Z+11	; 0x0b
    7480:	21 50       	subi	r18, 0x01	; 1
    7482:	31 09       	sbc	r19, r1
    7484:	33 87       	std	Z+11, r19	; 0x0b
    7486:	22 87       	std	Z+10, r18	; 0x0a
    7488:	0c 96       	adiw	r24, 0x0c	; 12
    748a:	91 87       	std	Z+9, r25	; 0x09
    748c:	80 87       	std	Z+8, r24	; 0x08
    748e:	f0 cf       	rjmp	.-32     	; 0x7470 <normalize+0x108>
    7490:	f7 01       	movw	r30, r14
    7492:	c6 80       	ldd	r12, Z+6	; 0x06
    7494:	d7 80       	ldd	r13, Z+7	; 0x07
    7496:	a0 84       	ldd	r10, Z+8	; 0x08
    7498:	b1 84       	ldd	r11, Z+9	; 0x09
    749a:	b4 01       	movw	r22, r8
    749c:	c5 01       	movw	r24, r10
    749e:	58 dd       	rcall	.-1360   	; 0x6f50 <Days_Per_Month>
    74a0:	8c 15       	cp	r24, r12
    74a2:	9d 05       	cpc	r25, r13
    74a4:	84 f5       	brge	.+96     	; 0x7506 <normalize+0x19e>
    74a6:	c8 1a       	sub	r12, r24
    74a8:	d9 0a       	sbc	r13, r25
    74aa:	f7 01       	movw	r30, r14
    74ac:	d7 82       	std	Z+7, r13	; 0x07
    74ae:	c6 82       	std	Z+6, r12	; 0x06
    74b0:	c5 01       	movw	r24, r10
    74b2:	01 96       	adiw	r24, 0x01	; 1
    74b4:	91 87       	std	Z+9, r25	; 0x09
    74b6:	80 87       	std	Z+8, r24	; 0x08
    74b8:	0c 97       	sbiw	r24, 0x0c	; 12
    74ba:	54 f3       	brlt	.-44     	; 0x7490 <normalize+0x128>
    74bc:	fb e0       	ldi	r31, 0x0B	; 11
    74be:	af 1a       	sub	r10, r31
    74c0:	b1 08       	sbc	r11, r1
    74c2:	f7 01       	movw	r30, r14
    74c4:	b1 86       	std	Z+9, r11	; 0x09
    74c6:	a0 86       	std	Z+8, r10	; 0x08
    74c8:	ff ef       	ldi	r31, 0xFF	; 255
    74ca:	8f 1a       	sub	r8, r31
    74cc:	9f 0a       	sbc	r9, r31
    74ce:	f7 01       	movw	r30, r14
    74d0:	93 86       	std	Z+11, r9	; 0x0b
    74d2:	82 86       	std	Z+10, r8	; 0x0a
    74d4:	f7 01       	movw	r30, r14
    74d6:	82 84       	ldd	r8, Z+10	; 0x0a
    74d8:	93 84       	ldd	r9, Z+11	; 0x0b
    74da:	da cf       	rjmp	.-76     	; 0x7490 <normalize+0x128>
    74dc:	f7 01       	movw	r30, r14
    74de:	80 85       	ldd	r24, Z+8	; 0x08
    74e0:	91 85       	ldd	r25, Z+9	; 0x09
    74e2:	9c 01       	movw	r18, r24
    74e4:	21 50       	subi	r18, 0x01	; 1
    74e6:	31 09       	sbc	r19, r1
    74e8:	37 fd       	sbrc	r19, 7
    74ea:	16 c0       	rjmp	.+44     	; 0x7518 <normalize+0x1b0>
    74ec:	31 87       	std	Z+9, r19	; 0x09
    74ee:	20 87       	std	Z+8, r18	; 0x08
    74f0:	f7 01       	movw	r30, r14
    74f2:	62 85       	ldd	r22, Z+10	; 0x0a
    74f4:	73 85       	ldd	r23, Z+11	; 0x0b
    74f6:	80 85       	ldd	r24, Z+8	; 0x08
    74f8:	91 85       	ldd	r25, Z+9	; 0x09
    74fa:	2a dd       	rcall	.-1452   	; 0x6f50 <Days_Per_Month>
    74fc:	88 0d       	add	r24, r8
    74fe:	99 1d       	adc	r25, r9
    7500:	f7 01       	movw	r30, r14
    7502:	97 83       	std	Z+7, r25	; 0x07
    7504:	86 83       	std	Z+6, r24	; 0x06
    7506:	f7 01       	movw	r30, r14
    7508:	86 80       	ldd	r8, Z+6	; 0x06
    750a:	97 80       	ldd	r9, Z+7	; 0x07
    750c:	a2 84       	ldd	r10, Z+10	; 0x0a
    750e:	b3 84       	ldd	r11, Z+11	; 0x0b
    7510:	18 14       	cp	r1, r8
    7512:	19 04       	cpc	r1, r9
    7514:	1c f7       	brge	.-58     	; 0x74dc <normalize+0x174>
    7516:	0b c0       	rjmp	.+22     	; 0x752e <normalize+0x1c6>
    7518:	0b 96       	adiw	r24, 0x0b	; 11
    751a:	f7 01       	movw	r30, r14
    751c:	91 87       	std	Z+9, r25	; 0x09
    751e:	80 87       	std	Z+8, r24	; 0x08
    7520:	f1 e0       	ldi	r31, 0x01	; 1
    7522:	af 1a       	sub	r10, r31
    7524:	b1 08       	sbc	r11, r1
    7526:	f7 01       	movw	r30, r14
    7528:	b3 86       	std	Z+11, r11	; 0x0b
    752a:	a2 86       	std	Z+10, r10	; 0x0a
    752c:	e1 cf       	rjmp	.-62     	; 0x74f0 <normalize+0x188>
    752e:	a5 01       	movw	r20, r10
    7530:	44 59       	subi	r20, 0x94	; 148
    7532:	58 4f       	sbci	r21, 0xF8	; 248
    7534:	58 87       	std	Y+8, r21	; 0x08
    7536:	4f 83       	std	Y+7, r20	; 0x07
    7538:	35 01       	movw	r6, r10
    753a:	56 e4       	ldi	r21, 0x46	; 70
    753c:	65 1a       	sub	r6, r21
    753e:	71 08       	sbc	r7, r1
    7540:	89 e8       	ldi	r24, 0x89	; 137
    7542:	68 16       	cp	r6, r24
    7544:	71 04       	cpc	r7, r1
    7546:	08 f0       	brcs	.+2      	; 0x754a <normalize+0x1e2>
    7548:	9b c0       	rjmp	.+310    	; 0x7680 <normalize+0x318>
    754a:	c0 84       	ldd	r12, Z+8	; 0x08
    754c:	d1 84       	ldd	r13, Z+9	; 0x09
    754e:	9c e0       	ldi	r25, 0x0C	; 12
    7550:	c9 16       	cp	r12, r25
    7552:	d1 04       	cpc	r13, r1
    7554:	08 f0       	brcs	.+2      	; 0x7558 <normalize+0x1f0>
    7556:	94 c0       	rjmp	.+296    	; 0x7680 <normalize+0x318>
    7558:	24 01       	movw	r4, r8
    755a:	e1 e0       	ldi	r30, 0x01	; 1
    755c:	4e 1a       	sub	r4, r30
    755e:	51 08       	sbc	r5, r1
    7560:	6f 81       	ldd	r22, Y+7	; 0x07
    7562:	78 85       	ldd	r23, Y+8	; 0x08
    7564:	c6 01       	movw	r24, r12
    7566:	f4 dc       	rcall	.-1560   	; 0x6f50 <Days_Per_Month>
    7568:	48 16       	cp	r4, r24
    756a:	59 06       	cpc	r5, r25
    756c:	0c f0       	brlt	.+2      	; 0x7570 <normalize+0x208>
    756e:	88 c0       	rjmp	.+272    	; 0x7680 <normalize+0x318>
    7570:	08 31       	cpi	r16, 0x18	; 24
    7572:	11 05       	cpc	r17, r1
    7574:	0c f0       	brlt	.+2      	; 0x7578 <normalize+0x210>
    7576:	84 c0       	rjmp	.+264    	; 0x7680 <normalize+0x318>
    7578:	fc e3       	ldi	r31, 0x3C	; 60
    757a:	2f 16       	cp	r2, r31
    757c:	31 04       	cpc	r3, r1
    757e:	0c f0       	brlt	.+2      	; 0x7582 <normalize+0x21a>
    7580:	7f c0       	rjmp	.+254    	; 0x7680 <normalize+0x318>
    7582:	4d 81       	ldd	r20, Y+5	; 0x05
    7584:	5e 81       	ldd	r21, Y+6	; 0x06
    7586:	4c 33       	cpi	r20, 0x3C	; 60
    7588:	51 05       	cpc	r21, r1
    758a:	0c f0       	brlt	.+2      	; 0x758e <normalize+0x226>
    758c:	79 c0       	rjmp	.+242    	; 0x7680 <normalize+0x318>
    758e:	2d e6       	ldi	r18, 0x6D	; 109
    7590:	31 e0       	ldi	r19, 0x01	; 1
    7592:	d3 01       	movw	r26, r6
    7594:	0e 94 ba e5 	call	0x1cb74	; 0x1cb74 <__usmulhisi3>
    7598:	f6 01       	movw	r30, r12
    759a:	ee 0f       	add	r30, r30
    759c:	ff 1f       	adc	r31, r31
    759e:	e5 58       	subi	r30, 0x85	; 133
    75a0:	fd 4f       	sbci	r31, 0xFD	; 253
    75a2:	20 81       	ld	r18, Z
    75a4:	31 81       	ldd	r19, Z+1	; 0x01
    75a6:	dc 01       	movw	r26, r24
    75a8:	cb 01       	movw	r24, r22
    75aa:	82 0f       	add	r24, r18
    75ac:	93 1f       	adc	r25, r19
    75ae:	a1 1d       	adc	r26, r1
    75b0:	b1 1d       	adc	r27, r1
    75b2:	05 2c       	mov	r0, r5
    75b4:	00 0c       	add	r0, r0
    75b6:	66 08       	sbc	r6, r6
    75b8:	77 08       	sbc	r7, r7
    75ba:	48 0e       	add	r4, r24
    75bc:	59 1e       	adc	r5, r25
    75be:	6a 1e       	adc	r6, r26
    75c0:	7b 1e       	adc	r7, r27
    75c2:	1a 14       	cp	r1, r10
    75c4:	1b 04       	cpc	r1, r11
    75c6:	1c f4       	brge	.+6      	; 0x75ce <normalize+0x266>
    75c8:	51 e0       	ldi	r21, 0x01	; 1
    75ca:	a5 1a       	sub	r10, r21
    75cc:	b1 08       	sbc	r11, r1
    75ce:	45 01       	movw	r8, r10
    75d0:	95 94       	asr	r9
    75d2:	87 94       	ror	r8
    75d4:	95 94       	asr	r9
    75d6:	87 94       	ror	r8
    75d8:	88 ec       	ldi	r24, 0xC8	; 200
    75da:	a8 16       	cp	r10, r24
    75dc:	b1 04       	cpc	r11, r1
    75de:	1c f0       	brlt	.+6      	; 0x75e6 <normalize+0x27e>
    75e0:	91 e0       	ldi	r25, 0x01	; 1
    75e2:	89 1a       	sub	r8, r25
    75e4:	91 08       	sbc	r9, r1
    75e6:	09 2c       	mov	r0, r9
    75e8:	00 0c       	add	r0, r0
    75ea:	aa 08       	sbc	r10, r10
    75ec:	bb 08       	sbc	r11, r11
    75ee:	84 0c       	add	r8, r4
    75f0:	95 1c       	adc	r9, r5
    75f2:	a6 1c       	adc	r10, r6
    75f4:	b7 1c       	adc	r11, r7
    75f6:	24 01       	movw	r4, r8
    75f8:	35 01       	movw	r6, r10
    75fa:	e1 e1       	ldi	r30, 0x11	; 17
    75fc:	4e 1a       	sub	r4, r30
    75fe:	51 08       	sbc	r5, r1
    7600:	61 08       	sbc	r6, r1
    7602:	71 08       	sbc	r7, r1
    7604:	f2 e0       	ldi	r31, 0x02	; 2
    7606:	cf 16       	cp	r12, r31
    7608:	d1 04       	cpc	r13, r1
    760a:	64 f0       	brlt	.+24     	; 0x7624 <normalize+0x2bc>
    760c:	8f 81       	ldd	r24, Y+7	; 0x07
    760e:	98 85       	ldd	r25, Y+8	; 0x08
    7610:	7a dc       	rcall	.-1804   	; 0x6f06 <IS_Leap>
    7612:	89 2b       	or	r24, r25
    7614:	39 f0       	breq	.+14     	; 0x7624 <normalize+0x2bc>
    7616:	24 01       	movw	r4, r8
    7618:	35 01       	movw	r6, r10
    761a:	40 e1       	ldi	r20, 0x10	; 16
    761c:	44 1a       	sub	r4, r20
    761e:	51 08       	sbc	r5, r1
    7620:	61 08       	sbc	r6, r1
    7622:	71 08       	sbc	r7, r1
    7624:	a8 e1       	ldi	r26, 0x18	; 24
    7626:	b0 e0       	ldi	r27, 0x00	; 0
    7628:	a3 01       	movw	r20, r6
    762a:	92 01       	movw	r18, r4
    762c:	0e 94 c0 e5 	call	0x1cb80	; 0x1cb80 <__muluhisi3>
    7630:	01 2e       	mov	r0, r17
    7632:	00 0c       	add	r0, r0
    7634:	22 0b       	sbc	r18, r18
    7636:	33 0b       	sbc	r19, r19
    7638:	a9 01       	movw	r20, r18
    763a:	98 01       	movw	r18, r16
    763c:	26 0f       	add	r18, r22
    763e:	37 1f       	adc	r19, r23
    7640:	48 1f       	adc	r20, r24
    7642:	59 1f       	adc	r21, r25
    7644:	ac e3       	ldi	r26, 0x3C	; 60
    7646:	b0 e0       	ldi	r27, 0x00	; 0
    7648:	0e 94 c0 e5 	call	0x1cb80	; 0x1cb80 <__muluhisi3>
    764c:	81 01       	movw	r16, r2
    764e:	03 2c       	mov	r0, r3
    7650:	00 0c       	add	r0, r0
    7652:	22 0b       	sbc	r18, r18
    7654:	33 0b       	sbc	r19, r19
    7656:	a9 01       	movw	r20, r18
    7658:	98 01       	movw	r18, r16
    765a:	26 0f       	add	r18, r22
    765c:	37 1f       	adc	r19, r23
    765e:	48 1f       	adc	r20, r24
    7660:	59 1f       	adc	r21, r25
    7662:	0e 94 c0 e5 	call	0x1cb80	; 0x1cb80 <__muluhisi3>
    7666:	ed 81       	ldd	r30, Y+5	; 0x05
    7668:	fe 81       	ldd	r31, Y+6	; 0x06
    766a:	8f 01       	movw	r16, r30
    766c:	ff 0f       	add	r31, r31
    766e:	22 0b       	sbc	r18, r18
    7670:	33 0b       	sbc	r19, r19
    7672:	48 01       	movw	r8, r16
    7674:	59 01       	movw	r10, r18
    7676:	86 0e       	add	r8, r22
    7678:	97 1e       	adc	r9, r23
    767a:	a8 1e       	adc	r10, r24
    767c:	b9 1e       	adc	r11, r25
    767e:	04 c0       	rjmp	.+8      	; 0x7688 <normalize+0x320>
    7680:	88 24       	eor	r8, r8
    7682:	8a 94       	dec	r8
    7684:	98 2c       	mov	r9, r8
    7686:	54 01       	movw	r10, r8
    7688:	49 85       	ldd	r20, Y+9	; 0x09
    768a:	5a 85       	ldd	r21, Y+10	; 0x0a
    768c:	45 2b       	or	r20, r21
    768e:	e9 f0       	breq	.+58     	; 0x76ca <normalize+0x362>
    7690:	ce 01       	movw	r24, r28
    7692:	01 96       	adiw	r24, 0x01	; 1
    7694:	7c dd       	rcall	.-1288   	; 0x718e <gettimezone>
    7696:	a9 81       	ldd	r26, Y+1	; 0x01
    7698:	ba 81       	ldd	r27, Y+2	; 0x02
    769a:	2c e3       	ldi	r18, 0x3C	; 60
    769c:	30 e0       	ldi	r19, 0x00	; 0
    769e:	0e 94 ba e5 	call	0x1cb74	; 0x1cb74 <__usmulhisi3>
    76a2:	2b 01       	movw	r4, r22
    76a4:	3c 01       	movw	r6, r24
    76a6:	c5 01       	movw	r24, r10
    76a8:	b4 01       	movw	r22, r8
    76aa:	e2 dd       	rcall	.-1084   	; 0x7270 <is_dst>
    76ac:	89 2b       	or	r24, r25
    76ae:	51 f0       	breq	.+20     	; 0x76c4 <normalize+0x35c>
    76b0:	50 e1       	ldi	r21, 0x10	; 16
    76b2:	45 1a       	sub	r4, r21
    76b4:	5e e0       	ldi	r21, 0x0E	; 14
    76b6:	55 0a       	sbc	r5, r21
    76b8:	61 08       	sbc	r6, r1
    76ba:	71 08       	sbc	r7, r1
    76bc:	cc 24       	eor	r12, r12
    76be:	c3 94       	inc	r12
    76c0:	d1 2c       	mov	r13, r1
    76c2:	08 c0       	rjmp	.+16     	; 0x76d4 <normalize+0x36c>
    76c4:	c1 2c       	mov	r12, r1
    76c6:	d1 2c       	mov	r13, r1
    76c8:	05 c0       	rjmp	.+10     	; 0x76d4 <normalize+0x36c>
    76ca:	c1 2c       	mov	r12, r1
    76cc:	d1 2c       	mov	r13, r1
    76ce:	41 2c       	mov	r4, r1
    76d0:	51 2c       	mov	r5, r1
    76d2:	32 01       	movw	r6, r4
    76d4:	87 01       	movw	r16, r14
    76d6:	a3 01       	movw	r20, r6
    76d8:	92 01       	movw	r18, r4
    76da:	c5 01       	movw	r24, r10
    76dc:	b4 01       	movw	r22, r8
    76de:	59 dc       	rcall	.-1870   	; 0x6f92 <time_to_tm>
    76e0:	c1 14       	cp	r12, r1
    76e2:	d1 04       	cpc	r13, r1
    76e4:	29 f0       	breq	.+10     	; 0x76f0 <normalize+0x388>
    76e6:	21 e0       	ldi	r18, 0x01	; 1
    76e8:	30 e0       	ldi	r19, 0x00	; 0
    76ea:	f7 01       	movw	r30, r14
    76ec:	31 8b       	std	Z+17, r19	; 0x11
    76ee:	20 8b       	std	Z+16, r18	; 0x10
    76f0:	2a 96       	adiw	r28, 0x0a	; 10
    76f2:	e2 e1       	ldi	r30, 0x12	; 18
    76f4:	0c 94 fc e5 	jmp	0x1cbf8	; 0x1cbf8 <__epilogue_restores__>

000076f8 <timegm>:
    76f8:	60 e0       	ldi	r22, 0x00	; 0
    76fa:	70 e0       	ldi	r23, 0x00	; 0
    76fc:	35 ce       	rjmp	.-918    	; 0x7368 <normalize>
    76fe:	08 95       	ret

00007700 <setdate_r>:
    7700:	cf 92       	push	r12
    7702:	df 92       	push	r13
    7704:	ef 92       	push	r14
    7706:	ff 92       	push	r15
    7708:	cf 93       	push	r28
    770a:	df 93       	push	r29
    770c:	cd b7       	in	r28, 0x3d	; 61
    770e:	de b7       	in	r29, 0x3e	; 62
    7710:	a0 97       	sbiw	r28, 0x20	; 32
    7712:	0f b6       	in	r0, 0x3f	; 63
    7714:	f8 94       	cli
    7716:	de bf       	out	0x3e, r29	; 62
    7718:	0f be       	out	0x3f, r0	; 63
    771a:	cd bf       	out	0x3d, r28	; 61
    771c:	98 a3       	std	Y+32, r25	; 0x20
    771e:	8f 8f       	std	Y+31, r24	; 0x1f
    7720:	1a 82       	std	Y+2, r1	; 0x02
    7722:	19 82       	std	Y+1, r1	; 0x01
    7724:	1c 82       	std	Y+4, r1	; 0x04
    7726:	1b 82       	std	Y+3, r1	; 0x03
    7728:	1e 82       	std	Y+6, r1	; 0x06
    772a:	1d 82       	std	Y+5, r1	; 0x05
    772c:	18 86       	std	Y+8, r1	; 0x08
    772e:	1f 82       	std	Y+7, r1	; 0x07
    7730:	1a 86       	std	Y+10, r1	; 0x0a
    7732:	19 86       	std	Y+9, r1	; 0x09
    7734:	1c 86       	std	Y+12, r1	; 0x0c
    7736:	1b 86       	std	Y+11, r1	; 0x0b
    7738:	8f 8d       	ldd	r24, Y+31	; 0x1f
    773a:	98 a1       	ldd	r25, Y+32	; 0x20
    773c:	fc 01       	movw	r30, r24
    773e:	20 81       	ld	r18, Z
    7740:	20 32       	cpi	r18, 0x20	; 32
    7742:	21 f4       	brne	.+8      	; 0x774c <setdate_r+0x4c>
    7744:	01 96       	adiw	r24, 0x01	; 1
    7746:	98 a3       	std	Y+32, r25	; 0x20
    7748:	8f 8f       	std	Y+31, r24	; 0x1f
    774a:	f6 cf       	rjmp	.-20     	; 0x7738 <setdate_r+0x38>
    774c:	4a e0       	ldi	r20, 0x0A	; 10
    774e:	50 e0       	ldi	r21, 0x00	; 0
    7750:	be 01       	movw	r22, r28
    7752:	61 5e       	subi	r22, 0xE1	; 225
    7754:	7f 4f       	sbci	r23, 0xFF	; 255
    7756:	0e 94 96 47 	call	0x8f2c	; 0x8f2c <strtol>
    775a:	7c 87       	std	Y+12, r23	; 0x0c
    775c:	6b 87       	std	Y+11, r22	; 0x0b
    775e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    7760:	98 a1       	ldd	r25, Y+32	; 0x20
    7762:	fc 01       	movw	r30, r24
    7764:	20 81       	ld	r18, Z
    7766:	20 32       	cpi	r18, 0x20	; 32
    7768:	21 f4       	brne	.+8      	; 0x7772 <setdate_r+0x72>
    776a:	01 96       	adiw	r24, 0x01	; 1
    776c:	98 a3       	std	Y+32, r25	; 0x20
    776e:	8f 8f       	std	Y+31, r24	; 0x1f
    7770:	f6 cf       	rjmp	.-20     	; 0x775e <setdate_r+0x5e>
    7772:	4a e0       	ldi	r20, 0x0A	; 10
    7774:	50 e0       	ldi	r21, 0x00	; 0
    7776:	be 01       	movw	r22, r28
    7778:	61 5e       	subi	r22, 0xE1	; 225
    777a:	7f 4f       	sbci	r23, 0xFF	; 255
    777c:	0e 94 96 47 	call	0x8f2c	; 0x8f2c <strtol>
    7780:	7a 87       	std	Y+10, r23	; 0x0a
    7782:	69 87       	std	Y+9, r22	; 0x09
    7784:	8f 8d       	ldd	r24, Y+31	; 0x1f
    7786:	98 a1       	ldd	r25, Y+32	; 0x20
    7788:	fc 01       	movw	r30, r24
    778a:	20 81       	ld	r18, Z
    778c:	20 32       	cpi	r18, 0x20	; 32
    778e:	21 f4       	brne	.+8      	; 0x7798 <setdate_r+0x98>
    7790:	01 96       	adiw	r24, 0x01	; 1
    7792:	98 a3       	std	Y+32, r25	; 0x20
    7794:	8f 8f       	std	Y+31, r24	; 0x1f
    7796:	f6 cf       	rjmp	.-20     	; 0x7784 <setdate_r+0x84>
    7798:	4a e0       	ldi	r20, 0x0A	; 10
    779a:	50 e0       	ldi	r21, 0x00	; 0
    779c:	be 01       	movw	r22, r28
    779e:	61 5e       	subi	r22, 0xE1	; 225
    77a0:	7f 4f       	sbci	r23, 0xFF	; 255
    77a2:	0e 94 96 47 	call	0x8f2c	; 0x8f2c <strtol>
    77a6:	78 87       	std	Y+8, r23	; 0x08
    77a8:	6f 83       	std	Y+7, r22	; 0x07
    77aa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    77ac:	98 a1       	ldd	r25, Y+32	; 0x20
    77ae:	fc 01       	movw	r30, r24
    77b0:	20 81       	ld	r18, Z
    77b2:	20 32       	cpi	r18, 0x20	; 32
    77b4:	21 f4       	brne	.+8      	; 0x77be <setdate_r+0xbe>
    77b6:	01 96       	adiw	r24, 0x01	; 1
    77b8:	98 a3       	std	Y+32, r25	; 0x20
    77ba:	8f 8f       	std	Y+31, r24	; 0x1f
    77bc:	f6 cf       	rjmp	.-20     	; 0x77aa <setdate_r+0xaa>
    77be:	4a e0       	ldi	r20, 0x0A	; 10
    77c0:	50 e0       	ldi	r21, 0x00	; 0
    77c2:	be 01       	movw	r22, r28
    77c4:	61 5e       	subi	r22, 0xE1	; 225
    77c6:	7f 4f       	sbci	r23, 0xFF	; 255
    77c8:	0e 94 96 47 	call	0x8f2c	; 0x8f2c <strtol>
    77cc:	7e 83       	std	Y+6, r23	; 0x06
    77ce:	6d 83       	std	Y+5, r22	; 0x05
    77d0:	ef 8d       	ldd	r30, Y+31	; 0x1f
    77d2:	f8 a1       	ldd	r31, Y+32	; 0x20
    77d4:	80 81       	ld	r24, Z
    77d6:	88 23       	and	r24, r24
    77d8:	39 f0       	breq	.+14     	; 0x77e8 <setdate_r+0xe8>
    77da:	80 32       	cpi	r24, 0x20	; 32
    77dc:	11 f0       	breq	.+4      	; 0x77e2 <setdate_r+0xe2>
    77de:	8a 33       	cpi	r24, 0x3A	; 58
    77e0:	19 f4       	brne	.+6      	; 0x77e8 <setdate_r+0xe8>
    77e2:	31 96       	adiw	r30, 0x01	; 1
    77e4:	f8 a3       	std	Y+32, r31	; 0x20
    77e6:	ef 8f       	std	Y+31, r30	; 0x1f
    77e8:	4a e0       	ldi	r20, 0x0A	; 10
    77ea:	50 e0       	ldi	r21, 0x00	; 0
    77ec:	be 01       	movw	r22, r28
    77ee:	61 5e       	subi	r22, 0xE1	; 225
    77f0:	7f 4f       	sbci	r23, 0xFF	; 255
    77f2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    77f4:	98 a1       	ldd	r25, Y+32	; 0x20
    77f6:	0e 94 96 47 	call	0x8f2c	; 0x8f2c <strtol>
    77fa:	7c 83       	std	Y+4, r23	; 0x04
    77fc:	6b 83       	std	Y+3, r22	; 0x03
    77fe:	ef 8d       	ldd	r30, Y+31	; 0x1f
    7800:	f8 a1       	ldd	r31, Y+32	; 0x20
    7802:	80 81       	ld	r24, Z
    7804:	88 23       	and	r24, r24
    7806:	39 f0       	breq	.+14     	; 0x7816 <setdate_r+0x116>
    7808:	80 32       	cpi	r24, 0x20	; 32
    780a:	11 f0       	breq	.+4      	; 0x7810 <setdate_r+0x110>
    780c:	8a 33       	cpi	r24, 0x3A	; 58
    780e:	19 f4       	brne	.+6      	; 0x7816 <setdate_r+0x116>
    7810:	31 96       	adiw	r30, 0x01	; 1
    7812:	f8 a3       	std	Y+32, r31	; 0x20
    7814:	ef 8f       	std	Y+31, r30	; 0x1f
    7816:	4a e0       	ldi	r20, 0x0A	; 10
    7818:	50 e0       	ldi	r21, 0x00	; 0
    781a:	be 01       	movw	r22, r28
    781c:	61 5e       	subi	r22, 0xE1	; 225
    781e:	7f 4f       	sbci	r23, 0xFF	; 255
    7820:	8f 8d       	ldd	r24, Y+31	; 0x1f
    7822:	98 a1       	ldd	r25, Y+32	; 0x20
    7824:	0e 94 96 47 	call	0x8f2c	; 0x8f2c <strtol>
    7828:	7a 83       	std	Y+2, r23	; 0x02
    782a:	69 83       	std	Y+1, r22	; 0x01
    782c:	29 85       	ldd	r18, Y+9	; 0x09
    782e:	3a 85       	ldd	r19, Y+10	; 0x0a
    7830:	21 50       	subi	r18, 0x01	; 1
    7832:	31 09       	sbc	r19, r1
    7834:	3a 87       	std	Y+10, r19	; 0x0a
    7836:	29 87       	std	Y+9, r18	; 0x09
    7838:	8b 85       	ldd	r24, Y+11	; 0x0b
    783a:	9c 85       	ldd	r25, Y+12	; 0x0c
    783c:	ac 01       	movw	r20, r24
    783e:	42 5b       	subi	r20, 0xB2	; 178
    7840:	57 40       	sbci	r21, 0x07	; 7
    7842:	45 34       	cpi	r20, 0x45	; 69
    7844:	51 05       	cpc	r21, r1
    7846:	28 f0       	brcs	.+10     	; 0x7852 <setdate_r+0x152>
    7848:	9f 93       	push	r25
    784a:	8f 93       	push	r24
    784c:	8c e6       	ldi	r24, 0x6C	; 108
    784e:	97 e0       	ldi	r25, 0x07	; 7
    7850:	2c c0       	rjmp	.+88     	; 0x78aa <setdate_r+0x1aa>
    7852:	8c 56       	subi	r24, 0x6C	; 108
    7854:	97 40       	sbci	r25, 0x07	; 7
    7856:	9c 87       	std	Y+12, r25	; 0x0c
    7858:	8b 87       	std	Y+11, r24	; 0x0b
    785a:	2c 30       	cpi	r18, 0x0C	; 12
    785c:	31 05       	cpc	r19, r1
    785e:	28 f0       	brcs	.+10     	; 0x786a <setdate_r+0x16a>
    7860:	9f 93       	push	r25
    7862:	8f 93       	push	r24
    7864:	8b e5       	ldi	r24, 0x5B	; 91
    7866:	97 e0       	ldi	r25, 0x07	; 7
    7868:	20 c0       	rjmp	.+64     	; 0x78aa <setdate_r+0x1aa>
    786a:	8f 81       	ldd	r24, Y+7	; 0x07
    786c:	98 85       	ldd	r25, Y+8	; 0x08
    786e:	9c 01       	movw	r18, r24
    7870:	21 50       	subi	r18, 0x01	; 1
    7872:	31 09       	sbc	r19, r1
    7874:	2f 31       	cpi	r18, 0x1F	; 31
    7876:	31 05       	cpc	r19, r1
    7878:	28 f0       	brcs	.+10     	; 0x7884 <setdate_r+0x184>
    787a:	9f 93       	push	r25
    787c:	8f 93       	push	r24
    787e:	8a e4       	ldi	r24, 0x4A	; 74
    7880:	97 e0       	ldi	r25, 0x07	; 7
    7882:	13 c0       	rjmp	.+38     	; 0x78aa <setdate_r+0x1aa>
    7884:	8d 81       	ldd	r24, Y+5	; 0x05
    7886:	9e 81       	ldd	r25, Y+6	; 0x06
    7888:	88 31       	cpi	r24, 0x18	; 24
    788a:	91 05       	cpc	r25, r1
    788c:	28 f0       	brcs	.+10     	; 0x7898 <setdate_r+0x198>
    788e:	9f 93       	push	r25
    7890:	8f 93       	push	r24
    7892:	88 e3       	ldi	r24, 0x38	; 56
    7894:	97 e0       	ldi	r25, 0x07	; 7
    7896:	09 c0       	rjmp	.+18     	; 0x78aa <setdate_r+0x1aa>
    7898:	8b 81       	ldd	r24, Y+3	; 0x03
    789a:	9c 81       	ldd	r25, Y+4	; 0x04
    789c:	8c 33       	cpi	r24, 0x3C	; 60
    789e:	91 05       	cpc	r25, r1
    78a0:	78 f0       	brcs	.+30     	; 0x78c0 <setdate_r+0x1c0>
    78a2:	9f 93       	push	r25
    78a4:	8f 93       	push	r24
    78a6:	87 e2       	ldi	r24, 0x27	; 39
    78a8:	97 e0       	ldi	r25, 0x07	; 7
    78aa:	1f 92       	push	r1
    78ac:	9f 93       	push	r25
    78ae:	8f 93       	push	r24
    78b0:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    78b4:	0f 90       	pop	r0
    78b6:	0f 90       	pop	r0
    78b8:	0f 90       	pop	r0
    78ba:	0f 90       	pop	r0
    78bc:	0f 90       	pop	r0
    78be:	25 c0       	rjmp	.+74     	; 0x790a <setdate_r+0x20a>
    78c0:	ce 01       	movw	r24, r28
    78c2:	01 96       	adiw	r24, 0x01	; 1
    78c4:	19 df       	rcall	.-462    	; 0x76f8 <timegm>
    78c6:	6b 01       	movw	r12, r22
    78c8:	7c 01       	movw	r14, r24
    78ca:	6f 8b       	std	Y+23, r22	; 0x17
    78cc:	78 8f       	std	Y+24, r23	; 0x18
    78ce:	89 8f       	std	Y+25, r24	; 0x19
    78d0:	9a 8f       	std	Y+26, r25	; 0x1a
    78d2:	1b 8e       	std	Y+27, r1	; 0x1b
    78d4:	1c 8e       	std	Y+28, r1	; 0x1c
    78d6:	1d 8e       	std	Y+29, r1	; 0x1d
    78d8:	1e 8e       	std	Y+30, r1	; 0x1e
    78da:	be 01       	movw	r22, r28
    78dc:	69 5e       	subi	r22, 0xE9	; 233
    78de:	7f 4f       	sbci	r23, 0xFF	; 255
    78e0:	80 e0       	ldi	r24, 0x00	; 0
    78e2:	90 e0       	ldi	r25, 0x00	; 0
    78e4:	08 db       	rcall	.-2544   	; 0x6ef6 <clock_settime>
    78e6:	b7 01       	movw	r22, r14
    78e8:	a6 01       	movw	r20, r12
    78ea:	81 e0       	ldi	r24, 0x01	; 1
    78ec:	90 e0       	ldi	r25, 0x00	; 0
    78ee:	0e 94 e6 2f 	call	0x5fcc	; 0x5fcc <rtc_init>
    78f2:	81 11       	cpse	r24, r1
    78f4:	0d c0       	rjmp	.+26     	; 0x7910 <setdate_r+0x210>
    78f6:	80 e1       	ldi	r24, 0x10	; 16
    78f8:	97 e0       	ldi	r25, 0x07	; 7
    78fa:	1f 92       	push	r1
    78fc:	9f 93       	push	r25
    78fe:	8f 93       	push	r24
    7900:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    7904:	0f 90       	pop	r0
    7906:	0f 90       	pop	r0
    7908:	0f 90       	pop	r0
    790a:	8f ef       	ldi	r24, 0xFF	; 255
    790c:	9f ef       	ldi	r25, 0xFF	; 255
    790e:	02 c0       	rjmp	.+4      	; 0x7914 <setdate_r+0x214>
    7910:	80 e0       	ldi	r24, 0x00	; 0
    7912:	90 e0       	ldi	r25, 0x00	; 0
    7914:	a0 96       	adiw	r28, 0x20	; 32
    7916:	0f b6       	in	r0, 0x3f	; 63
    7918:	f8 94       	cli
    791a:	de bf       	out	0x3e, r29	; 62
    791c:	0f be       	out	0x3f, r0	; 63
    791e:	cd bf       	out	0x3d, r28	; 61
    7920:	df 91       	pop	r29
    7922:	cf 91       	pop	r28
    7924:	ff 90       	pop	r15
    7926:	ef 90       	pop	r14
    7928:	df 90       	pop	r13
    792a:	cf 90       	pop	r12
    792c:	08 95       	ret

0000792e <setdate>:
    792e:	a8 e2       	ldi	r26, 0x28	; 40
    7930:	b0 e0       	ldi	r27, 0x00	; 0
    7932:	ed e9       	ldi	r30, 0x9D	; 157
    7934:	fc e3       	ldi	r31, 0x3C	; 60
    7936:	0c 94 f0 e5 	jmp	0x1cbe0	; 0x1cbe0 <__prologue_saves__+0x20>
    793a:	8e e7       	ldi	r24, 0x7E	; 126
    793c:	97 e0       	ldi	r25, 0x07	; 7
    793e:	1f 92       	push	r1
    7940:	9f 93       	push	r25
    7942:	8f 93       	push	r24
    7944:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    7948:	40 91 bb 1b 	lds	r20, 0x1BBB	; 0x801bbb <__iob>
    794c:	50 91 bc 1b 	lds	r21, 0x1BBC	; 0x801bbc <__iob+0x1>
    7950:	67 e2       	ldi	r22, 0x27	; 39
    7952:	70 e0       	ldi	r23, 0x00	; 0
    7954:	ce 01       	movw	r24, r28
    7956:	01 96       	adiw	r24, 0x01	; 1
    7958:	0e 94 71 77 	call	0xeee2	; 0xeee2 <fgets>
    795c:	ce 01       	movw	r24, r28
    795e:	01 96       	adiw	r24, 0x01	; 1
    7960:	cf de       	rcall	.-610    	; 0x7700 <setdate_r>
    7962:	0f 90       	pop	r0
    7964:	0f 90       	pop	r0
    7966:	0f 90       	pop	r0
    7968:	a8 96       	adiw	r28, 0x28	; 40
    796a:	e2 e0       	ldi	r30, 0x02	; 2
    796c:	0c 94 0c e6 	jmp	0x1cc18	; 0x1cc18 <__epilogue_restores__+0x20>

00007970 <find_dst>:
    7970:	a8 e2       	ldi	r26, 0x28	; 40
    7972:	b0 e0       	ldi	r27, 0x00	; 0
    7974:	ee eb       	ldi	r30, 0xBE	; 190
    7976:	fc e3       	ldi	r31, 0x3C	; 60
    7978:	0c 94 e0 e5 	jmp	0x1cbc0	; 0x1cbc0 <__prologue_saves__>
    797c:	3c 01       	movw	r6, r24
    797e:	1a 01       	movw	r2, r20
    7980:	2b 01       	movw	r4, r22
    7982:	49 01       	movw	r8, r18
    7984:	1c a3       	std	Y+36, r17	; 0x24
    7986:	0b a3       	std	Y+35, r16	; 0x23
    7988:	de a2       	std	Y+38, r13	; 0x26
    798a:	cd a2       	std	Y+37, r12	; 0x25
    798c:	b8 a6       	std	Y+40, r11	; 0x28
    798e:	af a2       	std	Y+39, r10	; 0x27
    7990:	be 01       	movw	r22, r28
    7992:	61 5e       	subi	r22, 0xE1	; 225
    7994:	7f 4f       	sbci	r23, 0xFF	; 255
    7996:	ce 01       	movw	r24, r28
    7998:	47 96       	adiw	r24, 0x17	; 23
    799a:	1b dc       	rcall	.-1994   	; 0x71d2 <gettimeofday>
    799c:	af 8d       	ldd	r26, Y+31	; 0x1f
    799e:	b8 a1       	ldd	r27, Y+32	; 0x20
    79a0:	2c e3       	ldi	r18, 0x3C	; 60
    79a2:	30 e0       	ldi	r19, 0x00	; 0
    79a4:	0e 94 ba e5 	call	0x1cb74	; 0x1cb74 <__usmulhisi3>
    79a8:	5b 01       	movw	r10, r22
    79aa:	6c 01       	movw	r12, r24
    79ac:	61 14       	cp	r6, r1
    79ae:	71 04       	cpc	r7, r1
    79b0:	31 f0       	breq	.+12     	; 0x79be <find_dst+0x4e>
    79b2:	20 e1       	ldi	r18, 0x10	; 16
    79b4:	a2 1a       	sub	r10, r18
    79b6:	2e e0       	ldi	r18, 0x0E	; 14
    79b8:	b2 0a       	sbc	r11, r18
    79ba:	c1 08       	sbc	r12, r1
    79bc:	d1 08       	sbc	r13, r1
    79be:	81 14       	cp	r8, r1
    79c0:	91 04       	cpc	r9, r1
    79c2:	39 f0       	breq	.+14     	; 0x79d2 <find_dst+0x62>
    79c4:	4c e6       	ldi	r20, 0x6C	; 108
    79c6:	84 1a       	sub	r8, r20
    79c8:	47 e0       	ldi	r20, 0x07	; 7
    79ca:	94 0a       	sbc	r9, r20
    79cc:	9c 86       	std	Y+12, r9	; 0x0c
    79ce:	8b 86       	std	Y+11, r8	; 0x0b
    79d0:	11 c0       	rjmp	.+34     	; 0x79f4 <find_dst+0x84>
    79d2:	21 14       	cp	r2, r1
    79d4:	31 04       	cpc	r3, r1
    79d6:	41 04       	cpc	r4, r1
    79d8:	51 04       	cpc	r5, r1
    79da:	21 f4       	brne	.+8      	; 0x79e4 <find_dst+0x74>
    79dc:	2f 88       	ldd	r2, Y+23	; 0x17
    79de:	38 8c       	ldd	r3, Y+24	; 0x18
    79e0:	49 8c       	ldd	r4, Y+25	; 0x19
    79e2:	5a 8c       	ldd	r5, Y+26	; 0x1a
    79e4:	8e 01       	movw	r16, r28
    79e6:	0f 5f       	subi	r16, 0xFF	; 255
    79e8:	1f 4f       	sbci	r17, 0xFF	; 255
    79ea:	a6 01       	movw	r20, r12
    79ec:	95 01       	movw	r18, r10
    79ee:	c2 01       	movw	r24, r4
    79f0:	b1 01       	movw	r22, r2
    79f2:	cf da       	rcall	.-2658   	; 0x6f92 <time_to_tm>
    79f4:	8b a1       	ldd	r24, Y+35	; 0x23
    79f6:	9c a1       	ldd	r25, Y+36	; 0x24
    79f8:	01 97       	sbiw	r24, 0x01	; 1
    79fa:	9a 87       	std	Y+10, r25	; 0x0a
    79fc:	89 87       	std	Y+9, r24	; 0x09
    79fe:	81 e0       	ldi	r24, 0x01	; 1
    7a00:	90 e0       	ldi	r25, 0x00	; 0
    7a02:	98 87       	std	Y+8, r25	; 0x08
    7a04:	8f 83       	std	Y+7, r24	; 0x07
    7a06:	8f a1       	ldd	r24, Y+39	; 0x27
    7a08:	98 a5       	ldd	r25, Y+40	; 0x28
    7a0a:	9e 83       	std	Y+6, r25	; 0x06
    7a0c:	8d 83       	std	Y+5, r24	; 0x05
    7a0e:	1c 82       	std	Y+4, r1	; 0x04
    7a10:	1b 82       	std	Y+3, r1	; 0x03
    7a12:	1a 82       	std	Y+2, r1	; 0x02
    7a14:	19 82       	std	Y+1, r1	; 0x01
    7a16:	ce 01       	movw	r24, r28
    7a18:	01 96       	adiw	r24, 0x01	; 1
    7a1a:	6e de       	rcall	.-804    	; 0x76f8 <timegm>
    7a1c:	45 01       	movw	r8, r10
    7a1e:	56 01       	movw	r10, r12
    7a20:	86 0e       	add	r8, r22
    7a22:	97 1e       	adc	r9, r23
    7a24:	a8 1e       	adc	r10, r24
    7a26:	b9 1e       	adc	r11, r25
    7a28:	8e 01       	movw	r16, r28
    7a2a:	0f 5f       	subi	r16, 0xFF	; 255
    7a2c:	1f 4f       	sbci	r17, 0xFF	; 255
    7a2e:	20 e0       	ldi	r18, 0x00	; 0
    7a30:	30 e0       	ldi	r19, 0x00	; 0
    7a32:	a9 01       	movw	r20, r18
    7a34:	c5 01       	movw	r24, r10
    7a36:	b4 01       	movw	r22, r8
    7a38:	ac da       	rcall	.-2728   	; 0x6f92 <time_to_tm>
    7a3a:	2d 85       	ldd	r18, Y+13	; 0x0d
    7a3c:	3e 85       	ldd	r19, Y+14	; 0x0e
    7a3e:	e7 e0       	ldi	r30, 0x07	; 7
    7a40:	f0 e0       	ldi	r31, 0x00	; 0
    7a42:	c9 01       	movw	r24, r18
    7a44:	bf 01       	movw	r22, r30
    7a46:	0e 94 4b e5 	call	0x1ca96	; 0x1ca96 <__divmodhi4>
    7a4a:	4d a1       	ldd	r20, Y+37	; 0x25
    7a4c:	5e a1       	ldd	r21, Y+38	; 0x26
    7a4e:	48 17       	cp	r20, r24
    7a50:	59 07       	cpc	r21, r25
    7a52:	21 f4       	brne	.+8      	; 0x7a5c <find_dst+0xec>
    7a54:	51 e0       	ldi	r21, 0x01	; 1
    7a56:	e5 1a       	sub	r14, r21
    7a58:	f1 08       	sbc	r15, r1
    7a5a:	51 f0       	breq	.+20     	; 0x7a70 <find_dst+0x100>
    7a5c:	80 e8       	ldi	r24, 0x80	; 128
    7a5e:	88 0e       	add	r8, r24
    7a60:	81 e5       	ldi	r24, 0x51	; 81
    7a62:	98 1e       	adc	r9, r24
    7a64:	81 e0       	ldi	r24, 0x01	; 1
    7a66:	a8 1e       	adc	r10, r24
    7a68:	b1 1c       	adc	r11, r1
    7a6a:	2f 5f       	subi	r18, 0xFF	; 255
    7a6c:	3f 4f       	sbci	r19, 0xFF	; 255
    7a6e:	e9 cf       	rjmp	.-46     	; 0x7a42 <find_dst+0xd2>
    7a70:	c5 01       	movw	r24, r10
    7a72:	b4 01       	movw	r22, r8
    7a74:	a8 96       	adiw	r28, 0x28	; 40
    7a76:	e2 e1       	ldi	r30, 0x12	; 18
    7a78:	0c 94 fc e5 	jmp	0x1cbf8	; 0x1cbf8 <__epilogue_restores__>

00007a7c <set_dst>:
    7a7c:	4f 92       	push	r4
    7a7e:	5f 92       	push	r5
    7a80:	6f 92       	push	r6
    7a82:	7f 92       	push	r7
    7a84:	af 92       	push	r10
    7a86:	bf 92       	push	r11
    7a88:	cf 92       	push	r12
    7a8a:	df 92       	push	r13
    7a8c:	ef 92       	push	r14
    7a8e:	ff 92       	push	r15
    7a90:	0f 93       	push	r16
    7a92:	1f 93       	push	r17
    7a94:	cf 93       	push	r28
    7a96:	df 93       	push	r29
    7a98:	cd b7       	in	r28, 0x3d	; 61
    7a9a:	de b7       	in	r29, 0x3e	; 62
    7a9c:	2c 97       	sbiw	r28, 0x0c	; 12
    7a9e:	0f b6       	in	r0, 0x3f	; 63
    7aa0:	f8 94       	cli
    7aa2:	de bf       	out	0x3e, r29	; 62
    7aa4:	0f be       	out	0x3f, r0	; 63
    7aa6:	cd bf       	out	0x3d, r28	; 61
    7aa8:	2b 01       	movw	r4, r22
    7aaa:	3c 01       	movw	r6, r24
    7aac:	67 2b       	or	r22, r23
    7aae:	68 2b       	or	r22, r24
    7ab0:	69 2b       	or	r22, r25
    7ab2:	51 f4       	brne	.+20     	; 0x7ac8 <set_dst+0x4c>
    7ab4:	be 01       	movw	r22, r28
    7ab6:	67 5f       	subi	r22, 0xF7	; 247
    7ab8:	7f 4f       	sbci	r23, 0xFF	; 255
    7aba:	ce 01       	movw	r24, r28
    7abc:	01 96       	adiw	r24, 0x01	; 1
    7abe:	89 db       	rcall	.-2286   	; 0x71d2 <gettimeofday>
    7ac0:	49 80       	ldd	r4, Y+1	; 0x01
    7ac2:	5a 80       	ldd	r5, Y+2	; 0x02
    7ac4:	6b 80       	ldd	r6, Y+3	; 0x03
    7ac6:	7c 80       	ldd	r7, Y+4	; 0x04
    7ac8:	80 91 72 19 	lds	r24, 0x1972	; 0x801972 <dst+0x8>
    7acc:	90 91 73 19 	lds	r25, 0x1973	; 0x801973 <dst+0x9>
    7ad0:	a0 91 74 19 	lds	r26, 0x1974	; 0x801974 <dst+0xa>
    7ad4:	b0 91 75 19 	lds	r27, 0x1975	; 0x801975 <dst+0xb>
    7ad8:	84 15       	cp	r24, r4
    7ada:	95 05       	cpc	r25, r5
    7adc:	a6 05       	cpc	r26, r6
    7ade:	b7 05       	cpc	r27, r7
    7ae0:	50 f0       	brcs	.+20     	; 0x7af6 <set_dst+0x7a>
    7ae2:	84 19       	sub	r24, r4
    7ae4:	95 09       	sbc	r25, r5
    7ae6:	a6 09       	sbc	r26, r6
    7ae8:	b7 09       	sbc	r27, r7
    7aea:	80 38       	cpi	r24, 0x80	; 128
    7aec:	91 45       	sbci	r25, 0x51	; 81
    7aee:	a1 40       	sbci	r26, 0x01	; 1
    7af0:	b1 05       	cpc	r27, r1
    7af2:	70 f4       	brcc	.+28     	; 0x7b10 <set_dst+0x94>
    7af4:	42 c0       	rjmp	.+132    	; 0x7b7a <set_dst+0xfe>
    7af6:	a3 01       	movw	r20, r6
    7af8:	92 01       	movw	r18, r4
    7afa:	28 1b       	sub	r18, r24
    7afc:	39 0b       	sbc	r19, r25
    7afe:	4a 0b       	sbc	r20, r26
    7b00:	5b 0b       	sbc	r21, r27
    7b02:	da 01       	movw	r26, r20
    7b04:	c9 01       	movw	r24, r18
    7b06:	80 38       	cpi	r24, 0x80	; 128
    7b08:	91 45       	sbci	r25, 0x51	; 81
    7b0a:	a1 40       	sbci	r26, 0x01	; 1
    7b0c:	b1 05       	cpc	r27, r1
    7b0e:	a8 f1       	brcs	.+106    	; 0x7b7a <set_dst+0xfe>
    7b10:	40 92 72 19 	sts	0x1972, r4	; 0x801972 <dst+0x8>
    7b14:	50 92 73 19 	sts	0x1973, r5	; 0x801973 <dst+0x9>
    7b18:	60 92 74 19 	sts	0x1974, r6	; 0x801974 <dst+0xa>
    7b1c:	70 92 75 19 	sts	0x1975, r7	; 0x801975 <dst+0xb>
    7b20:	82 e0       	ldi	r24, 0x02	; 2
    7b22:	a8 2e       	mov	r10, r24
    7b24:	b1 2c       	mov	r11, r1
    7b26:	c1 2c       	mov	r12, r1
    7b28:	d1 2c       	mov	r13, r1
    7b2a:	92 e0       	ldi	r25, 0x02	; 2
    7b2c:	e9 2e       	mov	r14, r25
    7b2e:	f1 2c       	mov	r15, r1
    7b30:	03 e0       	ldi	r16, 0x03	; 3
    7b32:	10 e0       	ldi	r17, 0x00	; 0
    7b34:	20 e0       	ldi	r18, 0x00	; 0
    7b36:	30 e0       	ldi	r19, 0x00	; 0
    7b38:	b3 01       	movw	r22, r6
    7b3a:	a2 01       	movw	r20, r4
    7b3c:	80 e0       	ldi	r24, 0x00	; 0
    7b3e:	90 e0       	ldi	r25, 0x00	; 0
    7b40:	17 df       	rcall	.-466    	; 0x7970 <find_dst>
    7b42:	60 93 6a 19 	sts	0x196A, r22	; 0x80196a <dst>
    7b46:	70 93 6b 19 	sts	0x196B, r23	; 0x80196b <dst+0x1>
    7b4a:	80 93 6c 19 	sts	0x196C, r24	; 0x80196c <dst+0x2>
    7b4e:	90 93 6d 19 	sts	0x196D, r25	; 0x80196d <dst+0x3>
    7b52:	ee 24       	eor	r14, r14
    7b54:	e3 94       	inc	r14
    7b56:	f1 2c       	mov	r15, r1
    7b58:	0b e0       	ldi	r16, 0x0B	; 11
    7b5a:	10 e0       	ldi	r17, 0x00	; 0
    7b5c:	20 e0       	ldi	r18, 0x00	; 0
    7b5e:	30 e0       	ldi	r19, 0x00	; 0
    7b60:	b3 01       	movw	r22, r6
    7b62:	a2 01       	movw	r20, r4
    7b64:	81 e0       	ldi	r24, 0x01	; 1
    7b66:	90 e0       	ldi	r25, 0x00	; 0
    7b68:	03 df       	rcall	.-506    	; 0x7970 <find_dst>
    7b6a:	60 93 6e 19 	sts	0x196E, r22	; 0x80196e <dst+0x4>
    7b6e:	70 93 6f 19 	sts	0x196F, r23	; 0x80196f <dst+0x5>
    7b72:	80 93 70 19 	sts	0x1970, r24	; 0x801970 <dst+0x6>
    7b76:	90 93 71 19 	sts	0x1971, r25	; 0x801971 <dst+0x7>
    7b7a:	2c 96       	adiw	r28, 0x0c	; 12
    7b7c:	0f b6       	in	r0, 0x3f	; 63
    7b7e:	f8 94       	cli
    7b80:	de bf       	out	0x3e, r29	; 62
    7b82:	0f be       	out	0x3f, r0	; 63
    7b84:	cd bf       	out	0x3d, r28	; 61
    7b86:	df 91       	pop	r29
    7b88:	cf 91       	pop	r28
    7b8a:	1f 91       	pop	r17
    7b8c:	0f 91       	pop	r16
    7b8e:	ff 90       	pop	r15
    7b90:	ef 90       	pop	r14
    7b92:	df 90       	pop	r13
    7b94:	cf 90       	pop	r12
    7b96:	bf 90       	pop	r11
    7b98:	af 90       	pop	r10
    7b9a:	7f 90       	pop	r7
    7b9c:	6f 90       	pop	r6
    7b9e:	5f 90       	pop	r5
    7ba0:	4f 90       	pop	r4
    7ba2:	08 95       	ret

00007ba4 <asctime_r>:
    7ba4:	0f 93       	push	r16
    7ba6:	1f 93       	push	r17
    7ba8:	cf 93       	push	r28
    7baa:	df 93       	push	r29
    7bac:	ec 01       	movw	r28, r24
    7bae:	8b 01       	movw	r16, r22
    7bb0:	60 e0       	ldi	r22, 0x00	; 0
    7bb2:	70 e0       	ldi	r23, 0x00	; 0
    7bb4:	d9 db       	rcall	.-2126   	; 0x7368 <normalize>
    7bb6:	20 e2       	ldi	r18, 0x20	; 32
    7bb8:	d8 01       	movw	r26, r16
    7bba:	82 2f       	mov	r24, r18
    7bbc:	1d 92       	st	X+, r1
    7bbe:	8a 95       	dec	r24
    7bc0:	e9 f7       	brne	.-6      	; 0x7bbc <asctime_r+0x18>
    7bc2:	8a 85       	ldd	r24, Y+10	; 0x0a
    7bc4:	9b 85       	ldd	r25, Y+11	; 0x0b
    7bc6:	84 59       	subi	r24, 0x94	; 148
    7bc8:	98 4f       	sbci	r25, 0xF8	; 248
    7bca:	9f 93       	push	r25
    7bcc:	8f 93       	push	r24
    7bce:	89 81       	ldd	r24, Y+1	; 0x01
    7bd0:	8f 93       	push	r24
    7bd2:	88 81       	ld	r24, Y
    7bd4:	8f 93       	push	r24
    7bd6:	8b 81       	ldd	r24, Y+3	; 0x03
    7bd8:	8f 93       	push	r24
    7bda:	8a 81       	ldd	r24, Y+2	; 0x02
    7bdc:	8f 93       	push	r24
    7bde:	8d 81       	ldd	r24, Y+5	; 0x05
    7be0:	8f 93       	push	r24
    7be2:	8c 81       	ldd	r24, Y+4	; 0x04
    7be4:	8f 93       	push	r24
    7be6:	8f 81       	ldd	r24, Y+7	; 0x07
    7be8:	8f 93       	push	r24
    7bea:	8e 81       	ldd	r24, Y+6	; 0x06
    7bec:	8f 93       	push	r24
    7bee:	e8 85       	ldd	r30, Y+8	; 0x08
    7bf0:	f9 85       	ldd	r31, Y+9	; 0x09
    7bf2:	ee 0f       	add	r30, r30
    7bf4:	ff 1f       	adc	r31, r31
    7bf6:	ee 5e       	subi	r30, 0xEE	; 238
    7bf8:	fe 4f       	sbci	r31, 0xFE	; 254
    7bfa:	81 81       	ldd	r24, Z+1	; 0x01
    7bfc:	8f 93       	push	r24
    7bfe:	80 81       	ld	r24, Z
    7c00:	8f 93       	push	r24
    7c02:	ec 85       	ldd	r30, Y+12	; 0x0c
    7c04:	fd 85       	ldd	r31, Y+13	; 0x0d
    7c06:	ee 0f       	add	r30, r30
    7c08:	ff 1f       	adc	r31, r31
    7c0a:	e4 5d       	subi	r30, 0xD4	; 212
    7c0c:	fe 4f       	sbci	r31, 0xFE	; 254
    7c0e:	81 81       	ldd	r24, Z+1	; 0x01
    7c10:	8f 93       	push	r24
    7c12:	80 81       	ld	r24, Z
    7c14:	8f 93       	push	r24
    7c16:	8f e9       	ldi	r24, 0x9F	; 159
    7c18:	97 e0       	ldi	r25, 0x07	; 7
    7c1a:	1f 92       	push	r1
    7c1c:	9f 93       	push	r25
    7c1e:	8f 93       	push	r24
    7c20:	1f 92       	push	r1
    7c22:	2f 93       	push	r18
    7c24:	1f 93       	push	r17
    7c26:	0f 93       	push	r16
    7c28:	0e 94 33 47 	call	0x8e66	; 0x8e66 <snprintf_P>
    7c2c:	ad b7       	in	r26, 0x3d	; 61
    7c2e:	be b7       	in	r27, 0x3e	; 62
    7c30:	55 96       	adiw	r26, 0x15	; 21
    7c32:	0f b6       	in	r0, 0x3f	; 63
    7c34:	f8 94       	cli
    7c36:	be bf       	out	0x3e, r27	; 62
    7c38:	0f be       	out	0x3f, r0	; 63
    7c3a:	ad bf       	out	0x3d, r26	; 61
    7c3c:	c8 01       	movw	r24, r16
    7c3e:	df 91       	pop	r29
    7c40:	cf 91       	pop	r28
    7c42:	1f 91       	pop	r17
    7c44:	0f 91       	pop	r16
    7c46:	08 95       	ret

00007c48 <asctime>:
    7c48:	62 ef       	ldi	r22, 0xF2	; 242
    7c4a:	77 e1       	ldi	r23, 0x17	; 23
    7c4c:	ab cf       	rjmp	.-170    	; 0x7ba4 <asctime_r>
    7c4e:	08 95       	ret

00007c50 <ctime_gm>:
    7c50:	a6 e1       	ldi	r26, 0x16	; 22
    7c52:	b0 e0       	ldi	r27, 0x00	; 0
    7c54:	ee e2       	ldi	r30, 0x2E	; 46
    7c56:	fe e3       	ldi	r31, 0x3E	; 62
    7c58:	0c 94 f0 e5 	jmp	0x1cbe0	; 0x1cbe0 <__prologue_saves__+0x20>
    7c5c:	be 01       	movw	r22, r28
    7c5e:	6f 5f       	subi	r22, 0xFF	; 255
    7c60:	7f 4f       	sbci	r23, 0xFF	; 255
    7c62:	75 da       	rcall	.-2838   	; 0x714e <gmtime_r>
    7c64:	62 eb       	ldi	r22, 0xB2	; 178
    7c66:	77 e1       	ldi	r23, 0x17	; 23
    7c68:	9d df       	rcall	.-198    	; 0x7ba4 <asctime_r>
    7c6a:	66 96       	adiw	r28, 0x16	; 22
    7c6c:	e2 e0       	ldi	r30, 0x02	; 2
    7c6e:	0c 94 0c e6 	jmp	0x1cc18	; 0x1cc18 <__epilogue_restores__+0x20>

00007c72 <initialize_clock>:
/// @param[in] minwest: your time zone as minute west
///@return  void
///@see: clock_settime()
MEMSPACE
void initialize_clock(int minwest)
{
    7c72:	a2 e2       	ldi	r26, 0x22	; 34
    7c74:	b0 e0       	ldi	r27, 0x00	; 0
    7c76:	ef e3       	ldi	r30, 0x3F	; 63
    7c78:	fe e3       	ldi	r31, 0x3E	; 62
    7c7a:	0c 94 ea e5 	jmp	0x1cbd4	; 0x1cbd4 <__prologue_saves__+0x14>
    7c7e:	8c 01       	movw	r16, r24
    tm_t tc;
    ts_t ts;
    tz_t tz;

#ifdef RTC_SUPPORT
    if(!rtc_init(0,0L))
    7c80:	40 e0       	ldi	r20, 0x00	; 0
    7c82:	50 e0       	ldi	r21, 0x00	; 0
    7c84:	ba 01       	movw	r22, r20
    7c86:	80 e0       	ldi	r24, 0x00	; 0
    7c88:	90 e0       	ldi	r25, 0x00	; 0
    7c8a:	0e 94 e6 2f 	call	0x5fcc	; 0x5fcc <rtc_init>
    7c8e:	81 11       	cpse	r24, r1
    7c90:	27 c0       	rjmp	.+78     	; 0x7ce0 <initialize_clock+0x6e>
    {
        printf("rtc uninitilized\n");
    7c92:	8a e9       	ldi	r24, 0x9A	; 154
    7c94:	96 e0       	ldi	r25, 0x06	; 6
    7c96:	1f 92       	push	r1
    7c98:	9f 93       	push	r25
    7c9a:	8f 93       	push	r24
    7c9c:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
        printf("attempting rtc init\n");
    7ca0:	85 e8       	ldi	r24, 0x85	; 133
    7ca2:	96 e0       	ldi	r25, 0x06	; 6
    7ca4:	1f 92       	push	r1
    7ca6:	9f 93       	push	r25
    7ca8:	8f 93       	push	r24
    7caa:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
        if( !rtc_init(1, (time_t) 0) )
    7cae:	40 e0       	ldi	r20, 0x00	; 0
    7cb0:	50 e0       	ldi	r21, 0x00	; 0
    7cb2:	ba 01       	movw	r22, r20
    7cb4:	81 e0       	ldi	r24, 0x01	; 1
    7cb6:	90 e0       	ldi	r25, 0x00	; 0
    7cb8:	0e 94 e6 2f 	call	0x5fcc	; 0x5fcc <rtc_init>
    7cbc:	0f 90       	pop	r0
    7cbe:	0f 90       	pop	r0
    7cc0:	0f 90       	pop	r0
    7cc2:	0f 90       	pop	r0
    7cc4:	0f 90       	pop	r0
    7cc6:	0f 90       	pop	r0
    7cc8:	81 11       	cpse	r24, r1
    7cca:	0a c0       	rjmp	.+20     	; 0x7ce0 <initialize_clock+0x6e>
        {
            printf("rtc force init failed\n");
    7ccc:	8e e6       	ldi	r24, 0x6E	; 110
    7cce:	96 e0       	ldi	r25, 0x06	; 6
    7cd0:	1f 92       	push	r1
    7cd2:	9f 93       	push	r25
    7cd4:	8f 93       	push	r24
    7cd6:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    7cda:	0f 90       	pop	r0
    7cdc:	0f 90       	pop	r0
    7cde:	0f 90       	pop	r0
        }
    }

    if(rtc_read(&tc))
    7ce0:	ce 01       	movw	r24, r28
    7ce2:	01 96       	adiw	r24, 0x01	; 1
    7ce4:	0e 94 32 30 	call	0x6064	; 0x6064 <rtc_read>
    7ce8:	88 23       	and	r24, r24
    7cea:	51 f0       	breq	.+20     	; 0x7d00 <initialize_clock+0x8e>
    {
        seconds = timegm(&tc);
    7cec:	ce 01       	movw	r24, r28
    7cee:	01 96       	adiw	r24, 0x01	; 1
    7cf0:	03 dd       	rcall	.-1530   	; 0x76f8 <timegm>
    7cf2:	6b 01       	movw	r12, r22
    7cf4:	7c 01       	movw	r14, r24
    }
#else
    printf("NO RTC\n");
    seconds = 0;
#endif  // RTC_SUPPORT
    if(!seconds)
    7cf6:	67 2b       	or	r22, r23
    7cf8:	68 2b       	or	r22, r24
    7cfa:	69 2b       	or	r22, r25
    7cfc:	c1 f4       	brne	.+48     	; 0x7d2e <initialize_clock+0xbc>
    7cfe:	0a c0       	rjmp	.+20     	; 0x7d14 <initialize_clock+0xa2>
        seconds = timegm(&tc);
    }
    else
    {
        seconds = 0;
        printf("rtc read errorafter init\n");
    7d00:	84 e5       	ldi	r24, 0x54	; 84
    7d02:	96 e0       	ldi	r25, 0x06	; 6
    7d04:	1f 92       	push	r1
    7d06:	9f 93       	push	r25
    7d08:	8f 93       	push	r24
    7d0a:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    7d0e:	0f 90       	pop	r0
    7d10:	0f 90       	pop	r0
    7d12:	0f 90       	pop	r0
#else
    printf("NO RTC\n");
    seconds = 0;
#endif  // RTC_SUPPORT
    if(!seconds)
        printf("use setdate command to change time\n");
    7d14:	80 e3       	ldi	r24, 0x30	; 48
    7d16:	96 e0       	ldi	r25, 0x06	; 6
    7d18:	1f 92       	push	r1
    7d1a:	9f 93       	push	r25
    7d1c:	8f 93       	push	r24
    7d1e:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    7d22:	0f 90       	pop	r0
    7d24:	0f 90       	pop	r0
    7d26:	0f 90       	pop	r0
    7d28:	c1 2c       	mov	r12, r1
    7d2a:	d1 2c       	mov	r13, r1
    7d2c:	76 01       	movw	r14, r12
    tz.tz_minuteswest = minwest;
    7d2e:	18 a3       	std	Y+32, r17	; 0x20
    7d30:	0f 8f       	std	Y+31, r16	; 0x1f
    tz.tz_dsttime = 0;
    7d32:	1a a2       	std	Y+34, r1	; 0x22
    7d34:	19 a2       	std	Y+33, r1	; 0x21
    settimezone( &tz );
    7d36:	ce 01       	movw	r24, r28
    7d38:	4f 96       	adiw	r24, 0x1f	; 31
    7d3a:	3a da       	rcall	.-2956   	; 0x71b0 <settimezone>

    ts.tv_sec = seconds;
    7d3c:	cf 8a       	std	Y+23, r12	; 0x17
    7d3e:	d8 8e       	std	Y+24, r13	; 0x18
    7d40:	e9 8e       	std	Y+25, r14	; 0x19
    7d42:	fa 8e       	std	Y+26, r15	; 0x1a
    ts.tv_nsec = 0L;
    7d44:	1b 8e       	std	Y+27, r1	; 0x1b
    7d46:	1c 8e       	std	Y+28, r1	; 0x1c
    7d48:	1d 8e       	std	Y+29, r1	; 0x1d
    7d4a:	1e 8e       	std	Y+30, r1	; 0x1e
    clock_settime(0, (ts_t *) &ts);
    7d4c:	be 01       	movw	r22, r28
    7d4e:	69 5e       	subi	r22, 0xE9	; 233
    7d50:	7f 4f       	sbci	r23, 0xFF	; 255
    7d52:	80 e0       	ldi	r24, 0x00	; 0
    7d54:	90 e0       	ldi	r25, 0x00	; 0
    7d56:	cf d8       	rcall	.-3682   	; 0x6ef6 <clock_settime>
}
    7d58:	a2 96       	adiw	r28, 0x22	; 34
    7d5a:	e8 e0       	ldi	r30, 0x08	; 8
    7d5c:	0c 94 06 e6 	jmp	0x1cc0c	; 0x1cc0c <__epilogue_restores__+0x14>

00007d60 <display_clock>:
/// @see: rtc_read
/// @see: timegm()
/// @see: ascitime()
MEMSPACE
void display_clock()
{
    7d60:	a2 e2       	ldi	r26, 0x22	; 34
    7d62:	b0 e0       	ldi	r27, 0x00	; 0
    7d64:	e6 eb       	ldi	r30, 0xB6	; 182
    7d66:	fe e3       	ldi	r31, 0x3E	; 62
    7d68:	0c 94 f0 e5 	jmp	0x1cbe0	; 0x1cbe0 <__prologue_saves__+0x20>
    time_t seconds;
    tm_t tc;
    ts_t ts;

#ifdef RTC_SUPPORT
    if(rtc_read(&tc))
    7d6c:	ce 01       	movw	r24, r28
    7d6e:	01 96       	adiw	r24, 0x01	; 1
    7d70:	0e 94 32 30 	call	0x6064	; 0x6064 <rtc_read>
    7d74:	88 23       	and	r24, r24
    7d76:	21 f1       	breq	.+72     	; 0x7dc0 <display_clock+0x60>
    {
        seconds = timegm(&tc);
    7d78:	ce 01       	movw	r24, r28
    7d7a:	01 96       	adiw	r24, 0x01	; 1
    7d7c:	bd dc       	rcall	.-1670   	; 0x76f8 <timegm>
    7d7e:	6f 8f       	std	Y+31, r22	; 0x1f
    7d80:	78 a3       	std	Y+32, r23	; 0x20
    7d82:	89 a3       	std	Y+33, r24	; 0x21
    7d84:	9a a3       	std	Y+34, r25	; 0x22
        printf("rtc seconds: %lu\n",seconds);
    7d86:	9f 93       	push	r25
    7d88:	8f 93       	push	r24
    7d8a:	7f 93       	push	r23
    7d8c:	6f 93       	push	r22
    7d8e:	8e e1       	ldi	r24, 0x1E	; 30
    7d90:	96 e0       	ldi	r25, 0x06	; 6
    7d92:	1f 92       	push	r1
    7d94:	9f 93       	push	r25
    7d96:	8f 93       	push	r24
    7d98:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
        printf("rtc time:    %s\n",asctime(&tc));
    7d9c:	ce 01       	movw	r24, r28
    7d9e:	01 96       	adiw	r24, 0x01	; 1
    7da0:	53 df       	rcall	.-346    	; 0x7c48 <asctime>
    7da2:	9f 93       	push	r25
    7da4:	8f 93       	push	r24
    7da6:	8d e0       	ldi	r24, 0x0D	; 13
    7da8:	96 e0       	ldi	r25, 0x06	; 6
    7daa:	1f 92       	push	r1
    7dac:	9f 93       	push	r25
    7dae:	8f 93       	push	r24
    7db0:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    7db4:	0f b6       	in	r0, 0x3f	; 63
    7db6:	f8 94       	cli
    7db8:	de bf       	out	0x3e, r29	; 62
    7dba:	0f be       	out	0x3f, r0	; 63
    7dbc:	cd bf       	out	0x3d, r28	; 61
    7dbe:	0a c0       	rjmp	.+20     	; 0x7dd4 <display_clock+0x74>
            (int) tc.tm_wday);
#endif
    }
    else
    {
        printf("RTC read failed\n");
    7dc0:	8c ef       	ldi	r24, 0xFC	; 252
    7dc2:	95 e0       	ldi	r25, 0x05	; 5
    7dc4:	1f 92       	push	r1
    7dc6:	9f 93       	push	r25
    7dc8:	8f 93       	push	r24
    7dca:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    7dce:	0f 90       	pop	r0
    7dd0:	0f 90       	pop	r0
    7dd2:	0f 90       	pop	r0
    }
#endif  // RTC_SUPPORT

    clock_gettime(0, (ts_t *) &ts);
    7dd4:	be 01       	movw	r22, r28
    7dd6:	69 5e       	subi	r22, 0xE9	; 233
    7dd8:	7f 4f       	sbci	r23, 0xFF	; 255
    7dda:	80 e0       	ldi	r24, 0x00	; 0
    7ddc:	90 e0       	ldi	r25, 0x00	; 0
    7dde:	0e 94 ec 34 	call	0x69d8	; 0x69d8 <clock_gettime>
    seconds = ts.tv_sec;
    7de2:	8f 89       	ldd	r24, Y+23	; 0x17
    7de4:	98 8d       	ldd	r25, Y+24	; 0x18
    7de6:	29 8d       	ldd	r18, Y+25	; 0x19
    7de8:	3a 8d       	ldd	r19, Y+26	; 0x1a
    7dea:	8f 8f       	std	Y+31, r24	; 0x1f
    7dec:	98 a3       	std	Y+32, r25	; 0x20
    7dee:	29 a3       	std	Y+33, r18	; 0x21
    7df0:	3a a3       	std	Y+34, r19	; 0x22
    printf("clk seconds: %lu\n",seconds);
    7df2:	3f 93       	push	r19
    7df4:	2f 93       	push	r18
    7df6:	9f 93       	push	r25
    7df8:	8f 93       	push	r24
    7dfa:	8a ee       	ldi	r24, 0xEA	; 234
    7dfc:	95 e0       	ldi	r25, 0x05	; 5
    7dfe:	1f 92       	push	r1
    7e00:	9f 93       	push	r25
    7e02:	8f 93       	push	r24
    7e04:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    printf("clk time:    %s\n", asctime(gmtime(&seconds)));
    7e08:	ce 01       	movw	r24, r28
    7e0a:	4f 96       	adiw	r24, 0x1f	; 31
    7e0c:	b5 d9       	rcall	.-3222   	; 0x7178 <gmtime>
    7e0e:	1c df       	rcall	.-456    	; 0x7c48 <asctime>
    7e10:	9f 93       	push	r25
    7e12:	8f 93       	push	r24
    7e14:	89 ed       	ldi	r24, 0xD9	; 217
    7e16:	95 e0       	ldi	r25, 0x05	; 5
    7e18:	1f 92       	push	r1
    7e1a:	9f 93       	push	r25
    7e1c:	8f 93       	push	r24
    7e1e:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
}
    7e22:	0f b6       	in	r0, 0x3f	; 63
    7e24:	f8 94       	cli
    7e26:	de bf       	out	0x3e, r29	; 62
    7e28:	0f be       	out	0x3f, r0	; 63
    7e2a:	cd bf       	out	0x3d, r28	; 61
    7e2c:	a2 96       	adiw	r28, 0x22	; 34
    7e2e:	e2 e0       	ldi	r30, 0x02	; 2
    7e30:	0c 94 0c e6 	jmp	0x1cc18	; 0x1cc18 <__epilogue_restores__+0x20>

00007e34 <_putc_buffer_fn>:
    va_start(va, format);
    _printf_fn(&fn, format, va);
    va_end(va);

    return ((int)fn.sent);
}
    7e34:	fc 01       	movw	r30, r24
    7e36:	84 81       	ldd	r24, Z+4	; 0x04
    7e38:	95 81       	ldd	r25, Z+5	; 0x05
    7e3a:	00 97       	sbiw	r24, 0x00	; 0
    7e3c:	79 f0       	breq	.+30     	; 0x7e5c <_putc_buffer_fn+0x28>
    7e3e:	66 23       	and	r22, r22
    7e40:	69 f0       	breq	.+26     	; 0x7e5c <_putc_buffer_fn+0x28>
    7e42:	01 97       	sbiw	r24, 0x01	; 1
    7e44:	95 83       	std	Z+5, r25	; 0x05
    7e46:	84 83       	std	Z+4, r24	; 0x04
    7e48:	86 81       	ldd	r24, Z+6	; 0x06
    7e4a:	97 81       	ldd	r25, Z+7	; 0x07
    7e4c:	01 96       	adiw	r24, 0x01	; 1
    7e4e:	97 83       	std	Z+7, r25	; 0x07
    7e50:	86 83       	std	Z+6, r24	; 0x06
    7e52:	a2 81       	ldd	r26, Z+2	; 0x02
    7e54:	b3 81       	ldd	r27, Z+3	; 0x03
    7e56:	6d 93       	st	X+, r22
    7e58:	b3 83       	std	Z+3, r27	; 0x03
    7e5a:	a2 83       	std	Z+2, r26	; 0x02
    7e5c:	02 80       	ldd	r0, Z+2	; 0x02
    7e5e:	f3 81       	ldd	r31, Z+3	; 0x03
    7e60:	e0 2d       	mov	r30, r0
    7e62:	10 82       	st	Z, r1
    7e64:	08 95       	ret

00007e66 <_putc_fn>:
    7e66:	fc 01       	movw	r30, r24
    7e68:	26 81       	ldd	r18, Z+6	; 0x06
    7e6a:	37 81       	ldd	r19, Z+7	; 0x07
    7e6c:	2f 5f       	subi	r18, 0xFF	; 255
    7e6e:	3f 4f       	sbci	r19, 0xFF	; 255
    7e70:	37 83       	std	Z+7, r19	; 0x07
    7e72:	26 83       	std	Z+6, r18	; 0x06
    7e74:	86 2f       	mov	r24, r22
    7e76:	90 e0       	ldi	r25, 0x00	; 0
    7e78:	0c 94 6b 77 	jmp	0xeed6	; 0xeed6 <putchar>
    7e7c:	08 95       	ret

00007e7e <bin2num>:
    7e7e:	a0 e0       	ldi	r26, 0x00	; 0
    7e80:	b0 e0       	ldi	r27, 0x00	; 0
    7e82:	e5 e4       	ldi	r30, 0x45	; 69
    7e84:	ff e3       	ldi	r31, 0x3F	; 63
    7e86:	0c 94 e7 e5 	jmp	0x1cbce	; 0x1cbce <__prologue_saves__+0xe>
    7e8a:	ea 01       	movw	r28, r20
    7e8c:	53 e0       	ldi	r21, 0x03	; 3
    7e8e:	ee 0c       	add	r14, r14
    7e90:	ff 1c       	adc	r15, r15
    7e92:	5a 95       	dec	r21
    7e94:	e1 f7       	brne	.-8      	; 0x7e8e <bin2num+0x10>
    7e96:	fc 01       	movw	r30, r24
    7e98:	af 01       	movw	r20, r30
    7e9a:	48 1b       	sub	r20, r24
    7e9c:	59 0b       	sbc	r21, r25
    7e9e:	c4 17       	cp	r28, r20
    7ea0:	d5 07       	cpc	r29, r21
    7ea2:	14 f0       	brlt	.+4      	; 0x7ea8 <bin2num+0x2a>
    7ea4:	11 92       	st	Z+, r1
    7ea6:	f8 cf       	rjmp	.-16     	; 0x7e98 <bin2num+0x1a>
    7ea8:	41 e0       	ldi	r20, 0x01	; 1
    7eaa:	e4 1a       	sub	r14, r20
    7eac:	f1 08       	sbc	r15, r1
    7eae:	5b 01       	movw	r10, r22
    7eb0:	42 e0       	ldi	r20, 0x02	; 2
    7eb2:	a4 1a       	sub	r10, r20
    7eb4:	b1 08       	sbc	r11, r1
    7eb6:	f7 fc       	sbrc	r15, 7
    7eb8:	3b c0       	rjmp	.+118    	; 0x7f30 <bin2num+0xb2>
    7eba:	f7 01       	movw	r30, r14
    7ebc:	43 e0       	ldi	r20, 0x03	; 3
    7ebe:	f5 95       	asr	r31
    7ec0:	e7 95       	ror	r30
    7ec2:	4a 95       	dec	r20
    7ec4:	e1 f7       	brne	.-8      	; 0x7ebe <bin2num+0x40>
    7ec6:	e0 0f       	add	r30, r16
    7ec8:	f1 1f       	adc	r31, r17
    7eca:	40 81       	ld	r20, Z
    7ecc:	50 e0       	ldi	r21, 0x00	; 0
    7ece:	f7 01       	movw	r30, r14
    7ed0:	e7 70       	andi	r30, 0x07	; 7
    7ed2:	ff 27       	eor	r31, r31
    7ed4:	02 c0       	rjmp	.+4      	; 0x7eda <bin2num+0x5c>
    7ed6:	55 95       	asr	r21
    7ed8:	47 95       	ror	r20
    7eda:	ea 95       	dec	r30
    7edc:	e2 f7       	brpl	.-8      	; 0x7ed6 <bin2num+0x58>
    7ede:	41 70       	andi	r20, 0x01	; 1
    7ee0:	55 27       	eor	r21, r21
    7ee2:	dc 01       	movw	r26, r24
    7ee4:	e0 e0       	ldi	r30, 0x00	; 0
    7ee6:	f0 e0       	ldi	r31, 0x00	; 0
    7ee8:	ec 17       	cp	r30, r28
    7eea:	fd 07       	cpc	r31, r29
    7eec:	ec f4       	brge	.+58     	; 0x7f28 <bin2num+0xaa>
    7eee:	ea 15       	cp	r30, r10
    7ef0:	fb 05       	cpc	r31, r11
    7ef2:	4c f0       	brlt	.+18     	; 0x7f06 <bin2num+0x88>
    7ef4:	dc 01       	movw	r26, r24
    7ef6:	ae 0f       	add	r26, r30
    7ef8:	bf 1f       	adc	r27, r31
    7efa:	1c 92       	st	X, r1
    7efc:	41 e0       	ldi	r20, 0x01	; 1
    7efe:	e4 1a       	sub	r14, r20
    7f00:	f1 08       	sbc	r15, r1
    7f02:	ef 01       	movw	r28, r30
    7f04:	d8 cf       	rjmp	.-80     	; 0x7eb6 <bin2num+0x38>
    7f06:	9c 90       	ld	r9, X
    7f08:	99 0c       	add	r9, r9
    7f0a:	94 2a       	or	r9, r20
    7f0c:	49 2d       	mov	r20, r9
    7f0e:	50 e0       	ldi	r21, 0x00	; 0
    7f10:	42 17       	cp	r20, r18
    7f12:	53 07       	cpc	r21, r19
    7f14:	24 f0       	brlt	.+8      	; 0x7f1e <bin2num+0xa0>
    7f16:	92 1a       	sub	r9, r18
    7f18:	41 e0       	ldi	r20, 0x01	; 1
    7f1a:	50 e0       	ldi	r21, 0x00	; 0
    7f1c:	02 c0       	rjmp	.+4      	; 0x7f22 <bin2num+0xa4>
    7f1e:	40 e0       	ldi	r20, 0x00	; 0
    7f20:	50 e0       	ldi	r21, 0x00	; 0
    7f22:	9d 92       	st	X+, r9
    7f24:	31 96       	adiw	r30, 0x01	; 1
    7f26:	e0 cf       	rjmp	.-64     	; 0x7ee8 <bin2num+0x6a>
    7f28:	41 15       	cp	r20, r1
    7f2a:	51 05       	cpc	r21, r1
    7f2c:	01 f7       	brne	.-64     	; 0x7eee <bin2num+0x70>
    7f2e:	e2 cf       	rjmp	.-60     	; 0x7ef4 <bin2num+0x76>
    7f30:	fc 01       	movw	r30, r24
    7f32:	9f 01       	movw	r18, r30
    7f34:	28 1b       	sub	r18, r24
    7f36:	39 0b       	sbc	r19, r25
    7f38:	2c 17       	cp	r18, r28
    7f3a:	3d 07       	cpc	r19, r29
    7f3c:	4c f4       	brge	.+18     	; 0x7f50 <bin2num+0xd2>
    7f3e:	20 81       	ld	r18, Z
    7f40:	2a 30       	cpi	r18, 0x0A	; 10
    7f42:	10 f4       	brcc	.+4      	; 0x7f48 <bin2num+0xca>
    7f44:	20 5d       	subi	r18, 0xD0	; 208
    7f46:	01 c0       	rjmp	.+2      	; 0x7f4a <bin2num+0xcc>
    7f48:	29 5a       	subi	r18, 0xA9	; 169
    7f4a:	20 83       	st	Z, r18
    7f4c:	31 96       	adiw	r30, 0x01	; 1
    7f4e:	f1 cf       	rjmp	.-30     	; 0x7f32 <bin2num+0xb4>
    7f50:	9e 01       	movw	r18, r28
    7f52:	d7 ff       	sbrs	r29, 7
    7f54:	02 c0       	rjmp	.+4      	; 0x7f5a <bin2num+0xdc>
    7f56:	20 e0       	ldi	r18, 0x00	; 0
    7f58:	30 e0       	ldi	r19, 0x00	; 0
    7f5a:	c1 14       	cp	r12, r1
    7f5c:	d1 04       	cpc	r13, r1
    7f5e:	61 f0       	breq	.+24     	; 0x7f78 <bin2num+0xfa>
    7f60:	61 50       	subi	r22, 0x01	; 1
    7f62:	71 09       	sbc	r23, r1
    7f64:	26 17       	cp	r18, r22
    7f66:	37 07       	cpc	r19, r23
    7f68:	3c f4       	brge	.+14     	; 0x7f78 <bin2num+0xfa>
    7f6a:	fc 01       	movw	r30, r24
    7f6c:	e2 0f       	add	r30, r18
    7f6e:	f3 1f       	adc	r31, r19
    7f70:	c0 82       	st	Z, r12
    7f72:	21 96       	adiw	r28, 0x01	; 1
    7f74:	2f 5f       	subi	r18, 0xFF	; 255
    7f76:	3f 4f       	sbci	r19, 0xFF	; 255
    7f78:	fc 01       	movw	r30, r24
    7f7a:	e2 0f       	add	r30, r18
    7f7c:	f3 1f       	adc	r31, r19
    7f7e:	10 82       	st	Z, r1
    7f80:	0e 94 87 32 	call	0x650e	; 0x650e <reverse>
    7f84:	ce 01       	movw	r24, r28
    7f86:	cd b7       	in	r28, 0x3d	; 61
    7f88:	de b7       	in	r29, 0x3e	; 62
    7f8a:	eb e0       	ldi	r30, 0x0B	; 11
    7f8c:	0c 94 03 e6 	jmp	0x1cc06	; 0x1cc06 <__epilogue_restores__+0xe>

00007f90 <pch_init>:
    7f90:	e6 e7       	ldi	r30, 0x76	; 118
    7f92:	f9 e1       	ldi	r31, 0x19	; 25
    7f94:	91 83       	std	Z+1, r25	; 0x01
    7f96:	80 83       	st	Z, r24
    7f98:	13 82       	std	Z+3, r1	; 0x03
    7f9a:	12 82       	std	Z+2, r1	; 0x02
    7f9c:	61 50       	subi	r22, 0x01	; 1
    7f9e:	71 09       	sbc	r23, r1
    7fa0:	75 83       	std	Z+5, r23	; 0x05
    7fa2:	64 83       	std	Z+4, r22	; 0x04
    7fa4:	fc 01       	movw	r30, r24
    7fa6:	10 82       	st	Z, r1
    7fa8:	08 95       	ret

00007faa <pch>:
    7faa:	20 91 78 19 	lds	r18, 0x1978	; 0x801978 <_pch+0x2>
    7fae:	30 91 79 19 	lds	r19, 0x1979	; 0x801979 <_pch+0x3>
    7fb2:	60 91 7a 19 	lds	r22, 0x197A	; 0x80197a <_pch+0x4>
    7fb6:	70 91 7b 19 	lds	r23, 0x197B	; 0x80197b <_pch+0x5>
    7fba:	40 91 76 19 	lds	r20, 0x1976	; 0x801976 <_pch>
    7fbe:	50 91 77 19 	lds	r21, 0x1977	; 0x801977 <_pch+0x1>
    7fc2:	26 17       	cp	r18, r22
    7fc4:	37 07       	cpc	r19, r23
    7fc6:	64 f4       	brge	.+24     	; 0x7fe0 <pch+0x36>
    7fc8:	b9 01       	movw	r22, r18
    7fca:	6f 5f       	subi	r22, 0xFF	; 255
    7fcc:	7f 4f       	sbci	r23, 0xFF	; 255
    7fce:	70 93 79 19 	sts	0x1979, r23	; 0x801979 <_pch+0x3>
    7fd2:	60 93 78 19 	sts	0x1978, r22	; 0x801978 <_pch+0x2>
    7fd6:	fa 01       	movw	r30, r20
    7fd8:	e2 0f       	add	r30, r18
    7fda:	f3 1f       	adc	r31, r19
    7fdc:	80 83       	st	Z, r24
    7fde:	04 c0       	rjmp	.+8      	; 0x7fe8 <pch+0x3e>
    7fe0:	fa 01       	movw	r30, r20
    7fe2:	e2 0f       	add	r30, r18
    7fe4:	f3 1f       	adc	r31, r19
    7fe6:	10 82       	st	Z, r1
    7fe8:	80 91 78 19 	lds	r24, 0x1978	; 0x801978 <_pch+0x2>
    7fec:	90 91 79 19 	lds	r25, 0x1979	; 0x801979 <_pch+0x3>
    7ff0:	08 95       	ret

00007ff2 <p_ntoa>:
    7ff2:	af 92       	push	r10
    7ff4:	cf 92       	push	r12
    7ff6:	df 92       	push	r13
    7ff8:	ef 92       	push	r14
    7ffa:	ff 92       	push	r15
    7ffc:	0f 93       	push	r16
    7ffe:	1f 93       	push	r17
    8000:	cf 93       	push	r28
    8002:	df 93       	push	r29
    8004:	dc 01       	movw	r26, r24
    8006:	eb 01       	movw	r28, r22
    8008:	fa 01       	movw	r30, r20
    800a:	b9 01       	movw	r22, r18
    800c:	98 01       	movw	r18, r16
    800e:	a6 01       	movw	r20, r12
    8010:	9a 2d       	mov	r25, r10
    8012:	a5 fa       	bst	r10, 5
    8014:	cc 24       	eor	r12, r12
    8016:	c0 f8       	bld	r12, 0
    8018:	a6 fc       	sbrc	r10, 6
    801a:	07 c0       	rjmp	.+14     	; 0x802a <p_ntoa+0x38>
    801c:	a2 fc       	sbrc	r10, 2
    801e:	08 c0       	rjmp	.+16     	; 0x8030 <p_ntoa+0x3e>
    8020:	a4 fe       	sbrs	r10, 4
    8022:	09 c0       	rjmp	.+18     	; 0x8036 <p_ntoa+0x44>
    8024:	00 e2       	ldi	r16, 0x20	; 32
    8026:	10 e0       	ldi	r17, 0x00	; 0
    8028:	08 c0       	rjmp	.+16     	; 0x803a <p_ntoa+0x48>
    802a:	0d e2       	ldi	r16, 0x2D	; 45
    802c:	10 e0       	ldi	r17, 0x00	; 0
    802e:	05 c0       	rjmp	.+10     	; 0x803a <p_ntoa+0x48>
    8030:	0b e2       	ldi	r16, 0x2B	; 43
    8032:	10 e0       	ldi	r17, 0x00	; 0
    8034:	02 c0       	rjmp	.+4      	; 0x803a <p_ntoa+0x48>
    8036:	00 e0       	ldi	r16, 0x00	; 0
    8038:	10 e0       	ldi	r17, 0x00	; 0
    803a:	95 ff       	sbrs	r25, 5
    803c:	04 c0       	rjmp	.+8      	; 0x8046 <p_ntoa+0x54>
    803e:	89 2f       	mov	r24, r25
    8040:	8a 70       	andi	r24, 0x0A	; 10
    8042:	09 f0       	breq	.+2      	; 0x8046 <p_ntoa+0x54>
    8044:	c1 2c       	mov	r12, r1
    8046:	c0 fa       	bst	r12, 0
    8048:	95 f9       	bld	r25, 5
    804a:	89 2f       	mov	r24, r25
    804c:	82 70       	andi	r24, 0x02	; 2
    804e:	c8 2e       	mov	r12, r24
    8050:	91 fd       	sbrc	r25, 1
    8052:	02 c0       	rjmp	.+4      	; 0x8058 <p_ntoa+0x66>
    8054:	40 e0       	ldi	r20, 0x00	; 0
    8056:	50 e0       	ldi	r21, 0x00	; 0
    8058:	89 2f       	mov	r24, r25
    805a:	83 70       	andi	r24, 0x03	; 3
    805c:	11 f4       	brne	.+4      	; 0x8062 <p_ntoa+0x70>
    805e:	41 e0       	ldi	r20, 0x01	; 1
    8060:	50 e0       	ldi	r21, 0x00	; 0
    8062:	90 ff       	sbrs	r25, 0
    8064:	0c c0       	rjmp	.+24     	; 0x807e <p_ntoa+0x8c>
    8066:	95 fd       	sbrc	r25, 5
    8068:	05 c0       	rjmp	.+10     	; 0x8074 <p_ntoa+0x82>
    806a:	c1 10       	cpse	r12, r1
    806c:	08 c0       	rjmp	.+16     	; 0x807e <p_ntoa+0x8c>
    806e:	41 e0       	ldi	r20, 0x01	; 1
    8070:	50 e0       	ldi	r21, 0x00	; 0
    8072:	05 c0       	rjmp	.+10     	; 0x807e <p_ntoa+0x8c>
    8074:	94 75       	andi	r25, 0x54	; 84
    8076:	a7 01       	movw	r20, r14
    8078:	11 f0       	breq	.+4      	; 0x807e <p_ntoa+0x8c>
    807a:	41 50       	subi	r20, 0x01	; 1
    807c:	51 09       	sbc	r21, r1
    807e:	68 01       	movw	r12, r16
    8080:	7e 01       	movw	r14, r28
    8082:	8d 01       	movw	r16, r26
    8084:	cf 01       	movw	r24, r30
    8086:	fb de       	rcall	.-522    	; 0x7e7e <bin2num>
    8088:	df 91       	pop	r29
    808a:	cf 91       	pop	r28
    808c:	1f 91       	pop	r17
    808e:	0f 91       	pop	r16
    8090:	ff 90       	pop	r15
    8092:	ef 90       	pop	r14
    8094:	df 90       	pop	r13
    8096:	cf 90       	pop	r12
    8098:	af 90       	pop	r10
    809a:	08 95       	ret

0000809c <p_ftoa>:
    809c:	2f 92       	push	r2
    809e:	3f 92       	push	r3
    80a0:	4f 92       	push	r4
    80a2:	5f 92       	push	r5
    80a4:	6f 92       	push	r6
    80a6:	7f 92       	push	r7
    80a8:	8f 92       	push	r8
    80aa:	9f 92       	push	r9
    80ac:	af 92       	push	r10
    80ae:	bf 92       	push	r11
    80b0:	cf 92       	push	r12
    80b2:	ef 92       	push	r14
    80b4:	ff 92       	push	r15
    80b6:	0f 93       	push	r16
    80b8:	1f 93       	push	r17
    80ba:	cf 93       	push	r28
    80bc:	df 93       	push	r29
    80be:	4b 01       	movw	r8, r22
    80c0:	5c 01       	movw	r10, r24
    80c2:	1a 01       	movw	r2, r20
    80c4:	38 01       	movw	r6, r16
    80c6:	c6 fa       	bst	r12, 6
    80c8:	cc 27       	eor	r28, r28
    80ca:	c0 f9       	bld	r28, 0
    80cc:	b9 01       	movw	r22, r18
    80ce:	ca 01       	movw	r24, r20
    80d0:	5f df       	rcall	.-322    	; 0x7f90 <pch_init>
    80d2:	20 e0       	ldi	r18, 0x00	; 0
    80d4:	30 e0       	ldi	r19, 0x00	; 0
    80d6:	a9 01       	movw	r20, r18
    80d8:	c5 01       	movw	r24, r10
    80da:	b4 01       	movw	r22, r8
    80dc:	0e 94 8f e6 	call	0x1cd1e	; 0x1cd1e <__cmpsf2>
    80e0:	87 ff       	sbrs	r24, 7
    80e2:	05 c0       	rjmp	.+10     	; 0x80ee <p_ftoa+0x52>
    80e4:	b7 fa       	bst	r11, 7
    80e6:	b0 94       	com	r11
    80e8:	b7 f8       	bld	r11, 7
    80ea:	b0 94       	com	r11
    80ec:	c1 e0       	ldi	r28, 0x01	; 1
    80ee:	c0 fb       	bst	r28, 0
    80f0:	c6 f8       	bld	r12, 6
    80f2:	c6 fe       	sbrs	r12, 6
    80f4:	02 c0       	rjmp	.+4      	; 0x80fa <p_ftoa+0x5e>
    80f6:	8d e2       	ldi	r24, 0x2D	; 45
    80f8:	07 c0       	rjmp	.+14     	; 0x8108 <p_ftoa+0x6c>
    80fa:	c2 fe       	sbrs	r12, 2
    80fc:	02 c0       	rjmp	.+4      	; 0x8102 <p_ftoa+0x66>
    80fe:	8b e2       	ldi	r24, 0x2B	; 43
    8100:	03 c0       	rjmp	.+6      	; 0x8108 <p_ftoa+0x6c>
    8102:	c4 fe       	sbrs	r12, 4
    8104:	02 c0       	rjmp	.+4      	; 0x810a <p_ftoa+0x6e>
    8106:	80 e2       	ldi	r24, 0x20	; 32
    8108:	50 df       	rcall	.-352    	; 0x7faa <pch>
    810a:	e7 01       	movw	r28, r14
    810c:	f7 fe       	sbrs	r15, 7
    810e:	02 c0       	rjmp	.+4      	; 0x8114 <p_ftoa+0x78>
    8110:	c0 e0       	ldi	r28, 0x00	; 0
    8112:	d0 e0       	ldi	r29, 0x00	; 0
    8114:	20 e0       	ldi	r18, 0x00	; 0
    8116:	30 e0       	ldi	r19, 0x00	; 0
    8118:	a9 01       	movw	r20, r18
    811a:	c5 01       	movw	r24, r10
    811c:	b4 01       	movw	r22, r8
    811e:	0e 94 8f e6 	call	0x1cd1e	; 0x1cd1e <__cmpsf2>
    8122:	88 23       	and	r24, r24
    8124:	d1 f1       	breq	.+116    	; 0x819a <p_ftoa+0xfe>
    8126:	c1 fe       	sbrs	r12, 1
    8128:	11 c0       	rjmp	.+34     	; 0x814c <p_ftoa+0xb0>
    812a:	8e 01       	movw	r16, r28
    812c:	60 e0       	ldi	r22, 0x00	; 0
    812e:	70 e0       	ldi	r23, 0x00	; 0
    8130:	80 e0       	ldi	r24, 0x00	; 0
    8132:	9f e3       	ldi	r25, 0x3F	; 63
    8134:	01 15       	cp	r16, r1
    8136:	11 05       	cpc	r17, r1
    8138:	69 f0       	breq	.+26     	; 0x8154 <p_ftoa+0xb8>
    813a:	20 e0       	ldi	r18, 0x00	; 0
    813c:	30 e0       	ldi	r19, 0x00	; 0
    813e:	40 e2       	ldi	r20, 0x20	; 32
    8140:	51 e4       	ldi	r21, 0x41	; 65
    8142:	0e 94 93 e6 	call	0x1cd26	; 0x1cd26 <__divsf3>
    8146:	01 50       	subi	r16, 0x01	; 1
    8148:	11 09       	sbc	r17, r1
    814a:	f4 cf       	rjmp	.-24     	; 0x8134 <p_ftoa+0x98>
    814c:	60 e0       	ldi	r22, 0x00	; 0
    814e:	70 e0       	ldi	r23, 0x00	; 0
    8150:	80 e0       	ldi	r24, 0x00	; 0
    8152:	9f e3       	ldi	r25, 0x3F	; 63
    8154:	9b 01       	movw	r18, r22
    8156:	ac 01       	movw	r20, r24
    8158:	c5 01       	movw	r24, r10
    815a:	b4 01       	movw	r22, r8
    815c:	0e 94 2b e6 	call	0x1cc56	; 0x1cc56 <__addsf3>
    8160:	4b 01       	movw	r8, r22
    8162:	5c 01       	movw	r10, r24
    8164:	ee 24       	eor	r14, r14
    8166:	e3 94       	inc	r14
    8168:	f1 2c       	mov	r15, r1
    816a:	20 e0       	ldi	r18, 0x00	; 0
    816c:	30 e0       	ldi	r19, 0x00	; 0
    816e:	40 e2       	ldi	r20, 0x20	; 32
    8170:	51 e4       	ldi	r21, 0x41	; 65
    8172:	c5 01       	movw	r24, r10
    8174:	b4 01       	movw	r22, r8
    8176:	0e 94 de e7 	call	0x1cfbc	; 0x1cfbc <__gesf2>
    817a:	87 fd       	sbrc	r24, 7
    817c:	11 c0       	rjmp	.+34     	; 0x81a0 <p_ftoa+0x104>
    817e:	2f ef       	ldi	r18, 0xFF	; 255
    8180:	e2 1a       	sub	r14, r18
    8182:	f2 0a       	sbc	r15, r18
    8184:	20 e0       	ldi	r18, 0x00	; 0
    8186:	30 e0       	ldi	r19, 0x00	; 0
    8188:	40 e2       	ldi	r20, 0x20	; 32
    818a:	51 e4       	ldi	r21, 0x41	; 65
    818c:	c5 01       	movw	r24, r10
    818e:	b4 01       	movw	r22, r8
    8190:	0e 94 93 e6 	call	0x1cd26	; 0x1cd26 <__divsf3>
    8194:	4b 01       	movw	r8, r22
    8196:	5c 01       	movw	r10, r24
    8198:	e8 cf       	rjmp	.-48     	; 0x816a <p_ftoa+0xce>
    819a:	ee 24       	eor	r14, r14
    819c:	e3 94       	inc	r14
    819e:	f1 2c       	mov	r15, r1
    81a0:	8c 2d       	mov	r24, r12
    81a2:	88 72       	andi	r24, 0x28	; 40
    81a4:	80 32       	cpi	r24, 0x20	; 32
    81a6:	b9 f4       	brne	.+46     	; 0x81d6 <p_ftoa+0x13a>
    81a8:	83 01       	movw	r16, r6
    81aa:	0e 19       	sub	r16, r14
    81ac:	1f 09       	sbc	r17, r15
    81ae:	80 91 78 19 	lds	r24, 0x1978	; 0x801978 <_pch+0x2>
    81b2:	90 91 79 19 	lds	r25, 0x1979	; 0x801979 <_pch+0x3>
    81b6:	08 1b       	sub	r16, r24
    81b8:	19 0b       	sbc	r17, r25
    81ba:	c1 fe       	sbrs	r12, 1
    81bc:	06 c0       	rjmp	.+12     	; 0x81ca <p_ftoa+0x12e>
    81be:	20 97       	sbiw	r28, 0x00	; 0
    81c0:	21 f0       	breq	.+8      	; 0x81ca <p_ftoa+0x12e>
    81c2:	0c 1b       	sub	r16, r28
    81c4:	1d 0b       	sbc	r17, r29
    81c6:	01 50       	subi	r16, 0x01	; 1
    81c8:	11 09       	sbc	r17, r1
    81ca:	10 16       	cp	r1, r16
    81cc:	11 06       	cpc	r1, r17
    81ce:	1c f4       	brge	.+6      	; 0x81d6 <p_ftoa+0x13a>
    81d0:	80 e3       	ldi	r24, 0x30	; 48
    81d2:	eb de       	rcall	.-554    	; 0x7faa <pch>
    81d4:	f8 cf       	rjmp	.-16     	; 0x81c6 <p_ftoa+0x12a>
    81d6:	c5 01       	movw	r24, r10
    81d8:	b4 01       	movw	r22, r8
    81da:	0e 94 fb e6 	call	0x1cdf6	; 0x1cdf6 <__fixsfsi>
    81de:	2b 01       	movw	r4, r22
    81e0:	3c 01       	movw	r6, r24
    81e2:	80 e3       	ldi	r24, 0x30	; 48
    81e4:	84 0d       	add	r24, r4
    81e6:	e1 de       	rcall	.-574    	; 0x7faa <pch>
    81e8:	b2 01       	movw	r22, r4
    81ea:	55 0c       	add	r5, r5
    81ec:	88 0b       	sbc	r24, r24
    81ee:	99 0b       	sbc	r25, r25
    81f0:	0e 94 2e e7 	call	0x1ce5c	; 0x1ce5c <__floatsisf>
    81f4:	9b 01       	movw	r18, r22
    81f6:	ac 01       	movw	r20, r24
    81f8:	c5 01       	movw	r24, r10
    81fa:	b4 01       	movw	r22, r8
    81fc:	0e 94 2a e6 	call	0x1cc54	; 0x1cc54 <__subsf3>
    8200:	21 e0       	ldi	r18, 0x01	; 1
    8202:	e2 1a       	sub	r14, r18
    8204:	f1 08       	sbc	r15, r1
    8206:	20 e0       	ldi	r18, 0x00	; 0
    8208:	30 e0       	ldi	r19, 0x00	; 0
    820a:	40 e2       	ldi	r20, 0x20	; 32
    820c:	51 e4       	ldi	r21, 0x41	; 65
    820e:	0e 94 e2 e7 	call	0x1cfc4	; 0x1cfc4 <__mulsf3>
    8212:	4b 01       	movw	r8, r22
    8214:	5c 01       	movw	r10, r24
    8216:	e1 14       	cp	r14, r1
    8218:	f1 04       	cpc	r15, r1
    821a:	e9 f6       	brne	.-70     	; 0x81d6 <p_ftoa+0x13a>
    821c:	c1 fc       	sbrc	r12, 1
    821e:	1c c0       	rjmp	.+56     	; 0x8258 <p_ftoa+0x1bc>
    8220:	80 e0       	ldi	r24, 0x00	; 0
    8222:	c3 de       	rcall	.-634    	; 0x7faa <pch>
    8224:	f1 01       	movw	r30, r2
    8226:	01 90       	ld	r0, Z+
    8228:	00 20       	and	r0, r0
    822a:	e9 f7       	brne	.-6      	; 0x8226 <p_ftoa+0x18a>
    822c:	31 97       	sbiw	r30, 0x01	; 1
    822e:	cf 01       	movw	r24, r30
    8230:	82 19       	sub	r24, r2
    8232:	93 09       	sbc	r25, r3
    8234:	df 91       	pop	r29
    8236:	cf 91       	pop	r28
    8238:	1f 91       	pop	r17
    823a:	0f 91       	pop	r16
    823c:	ff 90       	pop	r15
    823e:	ef 90       	pop	r14
    8240:	cf 90       	pop	r12
    8242:	bf 90       	pop	r11
    8244:	af 90       	pop	r10
    8246:	9f 90       	pop	r9
    8248:	8f 90       	pop	r8
    824a:	7f 90       	pop	r7
    824c:	6f 90       	pop	r6
    824e:	5f 90       	pop	r5
    8250:	4f 90       	pop	r4
    8252:	3f 90       	pop	r3
    8254:	2f 90       	pop	r2
    8256:	08 95       	ret
    8258:	20 97       	sbiw	r28, 0x00	; 0
    825a:	11 f3       	breq	.-60     	; 0x8220 <p_ftoa+0x184>
    825c:	8e e2       	ldi	r24, 0x2E	; 46
    825e:	a5 de       	rcall	.-694    	; 0x7faa <pch>
    8260:	c5 01       	movw	r24, r10
    8262:	b4 01       	movw	r22, r8
    8264:	0e 94 fb e6 	call	0x1cdf6	; 0x1cdf6 <__fixsfsi>
    8268:	2b 01       	movw	r4, r22
    826a:	3c 01       	movw	r6, r24
    826c:	07 2e       	mov	r0, r23
    826e:	00 0c       	add	r0, r0
    8270:	88 0b       	sbc	r24, r24
    8272:	99 0b       	sbc	r25, r25
    8274:	0e 94 2e e7 	call	0x1ce5c	; 0x1ce5c <__floatsisf>
    8278:	9b 01       	movw	r18, r22
    827a:	ac 01       	movw	r20, r24
    827c:	c5 01       	movw	r24, r10
    827e:	b4 01       	movw	r22, r8
    8280:	0e 94 2a e6 	call	0x1cc54	; 0x1cc54 <__subsf3>
    8284:	4b 01       	movw	r8, r22
    8286:	5c 01       	movw	r10, r24
    8288:	80 e3       	ldi	r24, 0x30	; 48
    828a:	84 0d       	add	r24, r4
    828c:	8e de       	rcall	.-740    	; 0x7faa <pch>
    828e:	21 97       	sbiw	r28, 0x01	; 1
    8290:	20 e0       	ldi	r18, 0x00	; 0
    8292:	30 e0       	ldi	r19, 0x00	; 0
    8294:	40 e2       	ldi	r20, 0x20	; 32
    8296:	51 e4       	ldi	r21, 0x41	; 65
    8298:	c5 01       	movw	r24, r10
    829a:	b4 01       	movw	r22, r8
    829c:	0e 94 e2 e7 	call	0x1cfc4	; 0x1cfc4 <__mulsf3>
    82a0:	4b 01       	movw	r8, r22
    82a2:	5c 01       	movw	r10, r24
    82a4:	20 97       	sbiw	r28, 0x00	; 0
    82a6:	e1 f6       	brne	.-72     	; 0x8260 <p_ftoa+0x1c4>
    82a8:	bb cf       	rjmp	.-138    	; 0x8220 <p_ftoa+0x184>

000082aa <p_etoa>:
    82aa:	ad e0       	ldi	r26, 0x0D	; 13
    82ac:	b0 e0       	ldi	r27, 0x00	; 0
    82ae:	eb e5       	ldi	r30, 0x5B	; 91
    82b0:	f1 e4       	ldi	r31, 0x41	; 65
    82b2:	0c 94 e0 e5 	jmp	0x1cbc0	; 0x1cbc0 <__prologue_saves__>
    82b6:	4b 01       	movw	r8, r22
    82b8:	5c 01       	movw	r10, r24
    82ba:	5b 87       	std	Y+11, r21	; 0x0b
    82bc:	4a 87       	std	Y+10, r20	; 0x0a
    82be:	1d 87       	std	Y+13, r17	; 0x0d
    82c0:	0c 87       	std	Y+12, r16	; 0x0c
    82c2:	3c 2c       	mov	r3, r12
    82c4:	c6 fa       	bst	r12, 6
    82c6:	11 27       	eor	r17, r17
    82c8:	10 f9       	bld	r17, 0
    82ca:	b9 01       	movw	r22, r18
    82cc:	ca 01       	movw	r24, r20
    82ce:	60 de       	rcall	.-832    	; 0x7f90 <pch_init>
    82d0:	20 e0       	ldi	r18, 0x00	; 0
    82d2:	30 e0       	ldi	r19, 0x00	; 0
    82d4:	a9 01       	movw	r20, r18
    82d6:	c5 01       	movw	r24, r10
    82d8:	b4 01       	movw	r22, r8
    82da:	0e 94 8f e6 	call	0x1cd1e	; 0x1cd1e <__cmpsf2>
    82de:	87 ff       	sbrs	r24, 7
    82e0:	05 c0       	rjmp	.+10     	; 0x82ec <p_etoa+0x42>
    82e2:	b7 fa       	bst	r11, 7
    82e4:	b0 94       	com	r11
    82e6:	b7 f8       	bld	r11, 7
    82e8:	b0 94       	com	r11
    82ea:	11 e0       	ldi	r17, 0x01	; 1
    82ec:	10 fb       	bst	r17, 0
    82ee:	36 f8       	bld	r3, 6
    82f0:	36 fe       	sbrs	r3, 6
    82f2:	02 c0       	rjmp	.+4      	; 0x82f8 <p_etoa+0x4e>
    82f4:	8d e2       	ldi	r24, 0x2D	; 45
    82f6:	07 c0       	rjmp	.+14     	; 0x8306 <p_etoa+0x5c>
    82f8:	32 fe       	sbrs	r3, 2
    82fa:	02 c0       	rjmp	.+4      	; 0x8300 <p_etoa+0x56>
    82fc:	8b e2       	ldi	r24, 0x2B	; 43
    82fe:	03 c0       	rjmp	.+6      	; 0x8306 <p_etoa+0x5c>
    8300:	34 fe       	sbrs	r3, 4
    8302:	02 c0       	rjmp	.+4      	; 0x8308 <p_etoa+0x5e>
    8304:	80 e2       	ldi	r24, 0x20	; 32
    8306:	51 de       	rcall	.-862    	; 0x7faa <pch>
    8308:	37 01       	movw	r6, r14
    830a:	f7 fe       	sbrs	r15, 7
    830c:	02 c0       	rjmp	.+4      	; 0x8312 <p_etoa+0x68>
    830e:	61 2c       	mov	r6, r1
    8310:	71 2c       	mov	r7, r1
    8312:	19 86       	std	Y+9, r1	; 0x09
    8314:	18 86       	std	Y+8, r1	; 0x08
    8316:	20 e0       	ldi	r18, 0x00	; 0
    8318:	30 e0       	ldi	r19, 0x00	; 0
    831a:	a9 01       	movw	r20, r18
    831c:	c5 01       	movw	r24, r10
    831e:	b4 01       	movw	r22, r8
    8320:	0e 94 8f e6 	call	0x1cd1e	; 0x1cd1e <__cmpsf2>
    8324:	23 2d       	mov	r18, r3
    8326:	22 70       	andi	r18, 0x02	; 2
    8328:	22 2e       	mov	r2, r18
    832a:	88 23       	and	r24, r24
    832c:	09 f4       	brne	.+2      	; 0x8330 <p_etoa+0x86>
    832e:	70 c0       	rjmp	.+224    	; 0x8410 <p_etoa+0x166>
    8330:	22 23       	and	r18, r18
    8332:	b1 f0       	breq	.+44     	; 0x8360 <p_etoa+0xb6>
    8334:	83 01       	movw	r16, r6
    8336:	c1 2c       	mov	r12, r1
    8338:	d1 2c       	mov	r13, r1
    833a:	e1 2c       	mov	r14, r1
    833c:	2f e3       	ldi	r18, 0x3F	; 63
    833e:	f2 2e       	mov	r15, r18
    8340:	01 15       	cp	r16, r1
    8342:	11 05       	cpc	r17, r1
    8344:	91 f0       	breq	.+36     	; 0x836a <p_etoa+0xc0>
    8346:	20 e0       	ldi	r18, 0x00	; 0
    8348:	30 e0       	ldi	r19, 0x00	; 0
    834a:	40 e2       	ldi	r20, 0x20	; 32
    834c:	51 e4       	ldi	r21, 0x41	; 65
    834e:	c7 01       	movw	r24, r14
    8350:	b6 01       	movw	r22, r12
    8352:	0e 94 93 e6 	call	0x1cd26	; 0x1cd26 <__divsf3>
    8356:	6b 01       	movw	r12, r22
    8358:	7c 01       	movw	r14, r24
    835a:	01 50       	subi	r16, 0x01	; 1
    835c:	11 09       	sbc	r17, r1
    835e:	f0 cf       	rjmp	.-32     	; 0x8340 <p_etoa+0x96>
    8360:	c1 2c       	mov	r12, r1
    8362:	d1 2c       	mov	r13, r1
    8364:	e1 2c       	mov	r14, r1
    8366:	9f e3       	ldi	r25, 0x3F	; 63
    8368:	f9 2e       	mov	r15, r25
    836a:	41 2c       	mov	r4, r1
    836c:	51 2c       	mov	r5, r1
    836e:	82 01       	movw	r16, r4
    8370:	01 50       	subi	r16, 0x01	; 1
    8372:	11 09       	sbc	r17, r1
    8374:	20 e0       	ldi	r18, 0x00	; 0
    8376:	30 e0       	ldi	r19, 0x00	; 0
    8378:	40 e8       	ldi	r20, 0x80	; 128
    837a:	5f e3       	ldi	r21, 0x3F	; 63
    837c:	c5 01       	movw	r24, r10
    837e:	b4 01       	movw	r22, r8
    8380:	0e 94 8f e6 	call	0x1cd1e	; 0x1cd1e <__cmpsf2>
    8384:	87 ff       	sbrs	r24, 7
    8386:	0c c0       	rjmp	.+24     	; 0x83a0 <p_etoa+0xf6>
    8388:	20 e0       	ldi	r18, 0x00	; 0
    838a:	30 e0       	ldi	r19, 0x00	; 0
    838c:	40 e2       	ldi	r20, 0x20	; 32
    838e:	51 e4       	ldi	r21, 0x41	; 65
    8390:	c5 01       	movw	r24, r10
    8392:	b4 01       	movw	r22, r8
    8394:	0e 94 e2 e7 	call	0x1cfc4	; 0x1cfc4 <__mulsf3>
    8398:	4b 01       	movw	r8, r22
    839a:	5c 01       	movw	r10, r24
    839c:	28 01       	movw	r4, r16
    839e:	e7 cf       	rjmp	.-50     	; 0x836e <p_etoa+0xc4>
    83a0:	82 01       	movw	r16, r4
    83a2:	0f 5f       	subi	r16, 0xFF	; 255
    83a4:	1f 4f       	sbci	r17, 0xFF	; 255
    83a6:	20 e0       	ldi	r18, 0x00	; 0
    83a8:	30 e0       	ldi	r19, 0x00	; 0
    83aa:	40 e2       	ldi	r20, 0x20	; 32
    83ac:	51 e4       	ldi	r21, 0x41	; 65
    83ae:	c5 01       	movw	r24, r10
    83b0:	b4 01       	movw	r22, r8
    83b2:	0e 94 de e7 	call	0x1cfbc	; 0x1cfbc <__gesf2>
    83b6:	87 fd       	sbrc	r24, 7
    83b8:	0c c0       	rjmp	.+24     	; 0x83d2 <p_etoa+0x128>
    83ba:	20 e0       	ldi	r18, 0x00	; 0
    83bc:	30 e0       	ldi	r19, 0x00	; 0
    83be:	40 e2       	ldi	r20, 0x20	; 32
    83c0:	51 e4       	ldi	r21, 0x41	; 65
    83c2:	c5 01       	movw	r24, r10
    83c4:	b4 01       	movw	r22, r8
    83c6:	0e 94 93 e6 	call	0x1cd26	; 0x1cd26 <__divsf3>
    83ca:	4b 01       	movw	r8, r22
    83cc:	5c 01       	movw	r10, r24
    83ce:	28 01       	movw	r4, r16
    83d0:	e7 cf       	rjmp	.-50     	; 0x83a0 <p_etoa+0xf6>
    83d2:	a7 01       	movw	r20, r14
    83d4:	96 01       	movw	r18, r12
    83d6:	c5 01       	movw	r24, r10
    83d8:	b4 01       	movw	r22, r8
    83da:	0e 94 2b e6 	call	0x1cc56	; 0x1cc56 <__addsf3>
    83de:	4b 01       	movw	r8, r22
    83e0:	5c 01       	movw	r10, r24
    83e2:	82 01       	movw	r16, r4
    83e4:	3f ef       	ldi	r19, 0xFF	; 255
    83e6:	43 1a       	sub	r4, r19
    83e8:	53 0a       	sbc	r5, r19
    83ea:	20 e0       	ldi	r18, 0x00	; 0
    83ec:	30 e0       	ldi	r19, 0x00	; 0
    83ee:	40 e2       	ldi	r20, 0x20	; 32
    83f0:	51 e4       	ldi	r21, 0x41	; 65
    83f2:	0e 94 de e7 	call	0x1cfbc	; 0x1cfbc <__gesf2>
    83f6:	87 fd       	sbrc	r24, 7
    83f8:	09 c0       	rjmp	.+18     	; 0x840c <p_etoa+0x162>
    83fa:	20 e0       	ldi	r18, 0x00	; 0
    83fc:	30 e0       	ldi	r19, 0x00	; 0
    83fe:	40 e2       	ldi	r20, 0x20	; 32
    8400:	51 e4       	ldi	r21, 0x41	; 65
    8402:	c5 01       	movw	r24, r10
    8404:	b4 01       	movw	r22, r8
    8406:	0e 94 93 e6 	call	0x1cd26	; 0x1cd26 <__divsf3>
    840a:	e9 cf       	rjmp	.-46     	; 0x83de <p_etoa+0x134>
    840c:	08 87       	std	Y+8, r16	; 0x08
    840e:	19 87       	std	Y+9, r17	; 0x09
    8410:	85 e6       	ldi	r24, 0x65	; 101
    8412:	89 83       	std	Y+1, r24	; 0x01
    8414:	88 85       	ldd	r24, Y+8	; 0x08
    8416:	99 85       	ldd	r25, Y+9	; 0x09
    8418:	97 ff       	sbrs	r25, 7
    841a:	08 c0       	rjmp	.+16     	; 0x842c <p_etoa+0x182>
    841c:	91 95       	neg	r25
    841e:	81 95       	neg	r24
    8420:	91 09       	sbc	r25, r1
    8422:	99 87       	std	Y+9, r25	; 0x09
    8424:	88 87       	std	Y+8, r24	; 0x08
    8426:	8d e2       	ldi	r24, 0x2D	; 45
    8428:	90 e0       	ldi	r25, 0x00	; 0
    842a:	02 c0       	rjmp	.+4      	; 0x8430 <p_etoa+0x186>
    842c:	8b e2       	ldi	r24, 0x2B	; 43
    842e:	90 e0       	ldi	r25, 0x00	; 0
    8430:	6c 01       	movw	r12, r24
    8432:	82 e0       	ldi	r24, 0x02	; 2
    8434:	e8 2e       	mov	r14, r24
    8436:	f1 2c       	mov	r15, r1
    8438:	8e 01       	movw	r16, r28
    843a:	08 5f       	subi	r16, 0xF8	; 248
    843c:	1f 4f       	sbci	r17, 0xFF	; 255
    843e:	2a e0       	ldi	r18, 0x0A	; 10
    8440:	30 e0       	ldi	r19, 0x00	; 0
    8442:	42 e0       	ldi	r20, 0x02	; 2
    8444:	50 e0       	ldi	r21, 0x00	; 0
    8446:	65 e0       	ldi	r22, 0x05	; 5
    8448:	70 e0       	ldi	r23, 0x00	; 0
    844a:	ce 01       	movw	r24, r28
    844c:	02 96       	adiw	r24, 0x02	; 2
    844e:	17 dd       	rcall	.-1490   	; 0x7e7e <bin2num>
    8450:	9c 01       	movw	r18, r24
    8452:	93 2d       	mov	r25, r3
    8454:	98 72       	andi	r25, 0x28	; 40
    8456:	90 32       	cpi	r25, 0x20	; 32
    8458:	61 f0       	breq	.+24     	; 0x8472 <p_etoa+0x1c8>
    845a:	c5 01       	movw	r24, r10
    845c:	b4 01       	movw	r22, r8
    845e:	0e 94 fb e6 	call	0x1cdf6	; 0x1cdf6 <__fixsfsi>
    8462:	6b 01       	movw	r12, r22
    8464:	7c 01       	movw	r14, r24
    8466:	80 e3       	ldi	r24, 0x30	; 48
    8468:	8c 0d       	add	r24, r12
    846a:	9f dd       	rcall	.-1218   	; 0x7faa <pch>
    846c:	21 10       	cpse	r2, r1
    846e:	20 c0       	rjmp	.+64     	; 0x84b0 <p_etoa+0x206>
    8470:	5e c0       	rjmp	.+188    	; 0x852e <p_etoa+0x284>
    8472:	80 91 78 19 	lds	r24, 0x1978	; 0x801978 <_pch+0x2>
    8476:	90 91 79 19 	lds	r25, 0x1979	; 0x801979 <_pch+0x3>
    847a:	0c 85       	ldd	r16, Y+12	; 0x0c
    847c:	1d 85       	ldd	r17, Y+13	; 0x0d
    847e:	08 1b       	sub	r16, r24
    8480:	19 0b       	sbc	r17, r25
    8482:	22 20       	and	r2, r2
    8484:	41 f0       	breq	.+16     	; 0x8496 <p_etoa+0x1ec>
    8486:	61 14       	cp	r6, r1
    8488:	71 04       	cpc	r7, r1
    848a:	29 f0       	breq	.+10     	; 0x8496 <p_etoa+0x1ec>
    848c:	06 19       	sub	r16, r6
    848e:	17 09       	sbc	r17, r7
    8490:	06 50       	subi	r16, 0x06	; 6
    8492:	11 09       	sbc	r17, r1
    8494:	02 c0       	rjmp	.+4      	; 0x849a <p_etoa+0x1f0>
    8496:	05 50       	subi	r16, 0x05	; 5
    8498:	11 09       	sbc	r17, r1
    849a:	24 30       	cpi	r18, 0x04	; 4
    849c:	31 05       	cpc	r19, r1
    849e:	14 f0       	brlt	.+4      	; 0x84a4 <p_etoa+0x1fa>
    84a0:	01 50       	subi	r16, 0x01	; 1
    84a2:	11 09       	sbc	r17, r1
    84a4:	10 16       	cp	r1, r16
    84a6:	11 06       	cpc	r1, r17
    84a8:	c4 f6       	brge	.-80     	; 0x845a <p_etoa+0x1b0>
    84aa:	80 e3       	ldi	r24, 0x30	; 48
    84ac:	7e dd       	rcall	.-1284   	; 0x7faa <pch>
    84ae:	f8 cf       	rjmp	.-16     	; 0x84a0 <p_etoa+0x1f6>
    84b0:	61 14       	cp	r6, r1
    84b2:	71 04       	cpc	r7, r1
    84b4:	09 f4       	brne	.+2      	; 0x84b8 <p_etoa+0x20e>
    84b6:	3b c0       	rjmp	.+118    	; 0x852e <p_etoa+0x284>
    84b8:	b6 01       	movw	r22, r12
    84ba:	dd 0c       	add	r13, r13
    84bc:	88 0b       	sbc	r24, r24
    84be:	99 0b       	sbc	r25, r25
    84c0:	0e 94 2e e7 	call	0x1ce5c	; 0x1ce5c <__floatsisf>
    84c4:	9b 01       	movw	r18, r22
    84c6:	ac 01       	movw	r20, r24
    84c8:	c5 01       	movw	r24, r10
    84ca:	b4 01       	movw	r22, r8
    84cc:	0e 94 2a e6 	call	0x1cc54	; 0x1cc54 <__subsf3>
    84d0:	20 e0       	ldi	r18, 0x00	; 0
    84d2:	30 e0       	ldi	r19, 0x00	; 0
    84d4:	40 e2       	ldi	r20, 0x20	; 32
    84d6:	51 e4       	ldi	r21, 0x41	; 65
    84d8:	0e 94 e2 e7 	call	0x1cfc4	; 0x1cfc4 <__mulsf3>
    84dc:	6b 01       	movw	r12, r22
    84de:	7c 01       	movw	r14, r24
    84e0:	8e e2       	ldi	r24, 0x2E	; 46
    84e2:	63 dd       	rcall	.-1338   	; 0x7faa <pch>
    84e4:	c7 01       	movw	r24, r14
    84e6:	b6 01       	movw	r22, r12
    84e8:	0e 94 fb e6 	call	0x1cdf6	; 0x1cdf6 <__fixsfsi>
    84ec:	4b 01       	movw	r8, r22
    84ee:	5c 01       	movw	r10, r24
    84f0:	07 2e       	mov	r0, r23
    84f2:	00 0c       	add	r0, r0
    84f4:	88 0b       	sbc	r24, r24
    84f6:	99 0b       	sbc	r25, r25
    84f8:	0e 94 2e e7 	call	0x1ce5c	; 0x1ce5c <__floatsisf>
    84fc:	9b 01       	movw	r18, r22
    84fe:	ac 01       	movw	r20, r24
    8500:	c7 01       	movw	r24, r14
    8502:	b6 01       	movw	r22, r12
    8504:	0e 94 2a e6 	call	0x1cc54	; 0x1cc54 <__subsf3>
    8508:	6b 01       	movw	r12, r22
    850a:	7c 01       	movw	r14, r24
    850c:	80 e3       	ldi	r24, 0x30	; 48
    850e:	88 0d       	add	r24, r8
    8510:	4c dd       	rcall	.-1384   	; 0x7faa <pch>
    8512:	20 e0       	ldi	r18, 0x00	; 0
    8514:	30 e0       	ldi	r19, 0x00	; 0
    8516:	40 e2       	ldi	r20, 0x20	; 32
    8518:	51 e4       	ldi	r21, 0x41	; 65
    851a:	c7 01       	movw	r24, r14
    851c:	b6 01       	movw	r22, r12
    851e:	0e 94 e2 e7 	call	0x1cfc4	; 0x1cfc4 <__mulsf3>
    8522:	6b 01       	movw	r12, r22
    8524:	7c 01       	movw	r14, r24
    8526:	81 e0       	ldi	r24, 0x01	; 1
    8528:	68 1a       	sub	r6, r24
    852a:	71 08       	sbc	r7, r1
    852c:	d9 f6       	brne	.-74     	; 0x84e4 <p_etoa+0x23a>
    852e:	8e 01       	movw	r16, r28
    8530:	0f 5f       	subi	r16, 0xFF	; 255
    8532:	1f 4f       	sbci	r17, 0xFF	; 255
    8534:	f8 01       	movw	r30, r16
    8536:	81 91       	ld	r24, Z+
    8538:	8f 01       	movw	r16, r30
    853a:	88 23       	and	r24, r24
    853c:	11 f0       	breq	.+4      	; 0x8542 <p_etoa+0x298>
    853e:	35 dd       	rcall	.-1430   	; 0x7faa <pch>
    8540:	f9 cf       	rjmp	.-14     	; 0x8534 <p_etoa+0x28a>
    8542:	33 dd       	rcall	.-1434   	; 0x7faa <pch>
    8544:	ea 85       	ldd	r30, Y+10	; 0x0a
    8546:	fb 85       	ldd	r31, Y+11	; 0x0b
    8548:	01 90       	ld	r0, Z+
    854a:	00 20       	and	r0, r0
    854c:	e9 f7       	brne	.-6      	; 0x8548 <p_etoa+0x29e>
    854e:	cf 01       	movw	r24, r30
    8550:	01 97       	sbiw	r24, 0x01	; 1
    8552:	2a 85       	ldd	r18, Y+10	; 0x0a
    8554:	3b 85       	ldd	r19, Y+11	; 0x0b
    8556:	82 1b       	sub	r24, r18
    8558:	93 0b       	sbc	r25, r19
    855a:	2d 96       	adiw	r28, 0x0d	; 13
    855c:	e2 e1       	ldi	r30, 0x12	; 18
    855e:	0c 94 fc e5 	jmp	0x1cbf8	; 0x1cbf8 <__epilogue_restores__>

00008562 <_puts_pad>:
    8562:	a0 e0       	ldi	r26, 0x00	; 0
    8564:	b0 e0       	ldi	r27, 0x00	; 0
    8566:	e7 eb       	ldi	r30, 0xB7	; 183
    8568:	f2 e4       	ldi	r31, 0x42	; 66
    856a:	0c 94 e6 e5 	jmp	0x1cbcc	; 0x1cbcc <__prologue_saves__+0xc>
    856e:	6c 01       	movw	r12, r24
    8570:	4b 01       	movw	r8, r22
    8572:	79 01       	movw	r14, r18
    8574:	24 17       	cp	r18, r20
    8576:	35 07       	cpc	r19, r21
    8578:	24 f4       	brge	.+8      	; 0x8582 <_puts_pad+0x20>
    857a:	ea 01       	movw	r28, r20
    857c:	c2 1b       	sub	r28, r18
    857e:	d3 0b       	sbc	r29, r19
    8580:	02 c0       	rjmp	.+4      	; 0x8586 <_puts_pad+0x24>
    8582:	c0 e0       	ldi	r28, 0x00	; 0
    8584:	d0 e0       	ldi	r29, 0x00	; 0
    8586:	01 15       	cp	r16, r1
    8588:	11 05       	cpc	r17, r1
    858a:	49 f4       	brne	.+18     	; 0x859e <_puts_pad+0x3c>
    858c:	21 97       	sbiw	r28, 0x01	; 1
    858e:	38 f0       	brcs	.+14     	; 0x859e <_puts_pad+0x3c>
    8590:	d6 01       	movw	r26, r12
    8592:	ed 91       	ld	r30, X+
    8594:	fc 91       	ld	r31, X
    8596:	60 e2       	ldi	r22, 0x20	; 32
    8598:	c6 01       	movw	r24, r12
    859a:	09 95       	icall
    859c:	f7 cf       	rjmp	.-18     	; 0x858c <_puts_pad+0x2a>
    859e:	54 01       	movw	r10, r8
    85a0:	f5 01       	movw	r30, r10
    85a2:	61 91       	ld	r22, Z+
    85a4:	5f 01       	movw	r10, r30
    85a6:	66 23       	and	r22, r22
    85a8:	61 f0       	breq	.+24     	; 0x85c2 <_puts_pad+0x60>
    85aa:	e1 14       	cp	r14, r1
    85ac:	f1 04       	cpc	r15, r1
    85ae:	49 f0       	breq	.+18     	; 0x85c2 <_puts_pad+0x60>
    85b0:	d6 01       	movw	r26, r12
    85b2:	ed 91       	ld	r30, X+
    85b4:	fc 91       	ld	r31, X
    85b6:	c6 01       	movw	r24, r12
    85b8:	09 95       	icall
    85ba:	b1 e0       	ldi	r27, 0x01	; 1
    85bc:	eb 1a       	sub	r14, r27
    85be:	f1 08       	sbc	r15, r1
    85c0:	ef cf       	rjmp	.-34     	; 0x85a0 <_puts_pad+0x3e>
    85c2:	01 15       	cp	r16, r1
    85c4:	11 05       	cpc	r17, r1
    85c6:	51 f0       	breq	.+20     	; 0x85dc <_puts_pad+0x7a>
    85c8:	20 97       	sbiw	r28, 0x00	; 0
    85ca:	41 f0       	breq	.+16     	; 0x85dc <_puts_pad+0x7a>
    85cc:	d6 01       	movw	r26, r12
    85ce:	ed 91       	ld	r30, X+
    85d0:	fc 91       	ld	r31, X
    85d2:	60 e2       	ldi	r22, 0x20	; 32
    85d4:	c6 01       	movw	r24, r12
    85d6:	09 95       	icall
    85d8:	21 97       	sbiw	r28, 0x01	; 1
    85da:	f6 cf       	rjmp	.-20     	; 0x85c8 <_puts_pad+0x66>
    85dc:	cd b7       	in	r28, 0x3d	; 61
    85de:	de b7       	in	r29, 0x3e	; 62
    85e0:	ec e0       	ldi	r30, 0x0C	; 12
    85e2:	0c 94 02 e6 	jmp	0x1cc04	; 0x1cc04 <__epilogue_restores__+0xc>

000085e6 <_printf_fn>:
    85e6:	ab e6       	ldi	r26, 0x6B	; 107
    85e8:	b0 e0       	ldi	r27, 0x00	; 0
    85ea:	e9 ef       	ldi	r30, 0xF9	; 249
    85ec:	f2 e4       	ldi	r31, 0x42	; 66
    85ee:	0c 94 e0 e5 	jmp	0x1cbc0	; 0x1cbc0 <__prologue_saves__>
    85f2:	a5 96       	adiw	r28, 0x25	; 37
    85f4:	9f af       	std	Y+63, r25	; 0x3f
    85f6:	8e af       	std	Y+62, r24	; 0x3e
    85f8:	a5 97       	sbiw	r28, 0x25	; 37
    85fa:	6a 01       	movw	r12, r20
    85fc:	e6 2e       	mov	r14, r22
    85fe:	19 01       	movw	r2, r18
    8600:	a9 96       	adiw	r28, 0x29	; 41
    8602:	1c ae       	std	Y+60, r1	; 0x3c
    8604:	1d ae       	std	Y+61, r1	; 0x3d
    8606:	1e ae       	std	Y+62, r1	; 0x3e
    8608:	1f ae       	std	Y+63, r1	; 0x3f
    860a:	a9 97       	sbiw	r28, 0x29	; 41
    860c:	9e 01       	movw	r18, r28
    860e:	2f 5a       	subi	r18, 0xAF	; 175
    8610:	3f 4f       	sbci	r19, 0xFF	; 255
    8612:	67 96       	adiw	r28, 0x17	; 23
    8614:	3f af       	std	Y+63, r19	; 0x3f
    8616:	2e af       	std	Y+62, r18	; 0x3e
    8618:	67 97       	sbiw	r28, 0x17	; 23
    861a:	ae 01       	movw	r20, r28
    861c:	4d 5b       	subi	r20, 0xBD	; 189
    861e:	5f 4f       	sbci	r21, 0xFF	; 255
    8620:	69 96       	adiw	r28, 0x19	; 25
    8622:	5f af       	std	Y+63, r21	; 0x3f
    8624:	4e af       	std	Y+62, r20	; 0x3e
    8626:	69 97       	sbiw	r28, 0x19	; 25
    8628:	ce 01       	movw	r24, r28
    862a:	85 5b       	subi	r24, 0xB5	; 181
    862c:	9f 4f       	sbci	r25, 0xFF	; 255
    862e:	6b 96       	adiw	r28, 0x1b	; 27
    8630:	9f af       	std	Y+63, r25	; 0x3f
    8632:	8e af       	std	Y+62, r24	; 0x3e
    8634:	6b 97       	sbiw	r28, 0x1b	; 27
    8636:	de 01       	movw	r26, r28
    8638:	ad 5a       	subi	r26, 0xAD	; 173
    863a:	bf 4f       	sbci	r27, 0xFF	; 255
    863c:	6d 96       	adiw	r28, 0x1d	; 29
    863e:	bf af       	std	Y+63, r27	; 0x3f
    8640:	ae af       	std	Y+62, r26	; 0x3e
    8642:	6d 97       	sbiw	r28, 0x1d	; 29
    8644:	f6 01       	movw	r30, r12
    8646:	5e 2d       	mov	r21, r14
    8648:	0e 94 17 e6 	call	0x1cc2e	; 0x1cc2e <__xload_1>
    864c:	66 23       	and	r22, r22
    864e:	09 f4       	brne	.+2      	; 0x8652 <_printf_fn+0x6c>
    8650:	df c3       	rjmp	.+1982   	; 0x8e10 <_printf_fn+0x82a>
    8652:	ae 2d       	mov	r26, r14
    8654:	c6 01       	movw	r24, r12
    8656:	01 96       	adiw	r24, 0x01	; 1
    8658:	a1 1d       	adc	r26, r1
    865a:	3c 01       	movw	r6, r24
    865c:	8a 2e       	mov	r8, r26
    865e:	65 32       	cpi	r22, 0x25	; 37
    8660:	51 f0       	breq	.+20     	; 0x8676 <_printf_fn+0x90>
    8662:	a5 96       	adiw	r28, 0x25	; 37
    8664:	ae ad       	ldd	r26, Y+62	; 0x3e
    8666:	bf ad       	ldd	r27, Y+63	; 0x3f
    8668:	a5 97       	sbiw	r28, 0x25	; 37
    866a:	ed 91       	ld	r30, X+
    866c:	fc 91       	ld	r31, X
    866e:	11 97       	sbiw	r26, 0x01	; 1
    8670:	cd 01       	movw	r24, r26
    8672:	09 95       	icall
    8674:	99 c3       	rjmp	.+1842   	; 0x8da8 <_printf_fn+0x7c2>
    8676:	91 2c       	mov	r9, r1
    8678:	f3 01       	movw	r30, r6
    867a:	58 2d       	mov	r21, r8
    867c:	0e 94 17 e6 	call	0x1cc2e	; 0x1cc2e <__xload_1>
    8680:	63 32       	cpi	r22, 0x23	; 35
    8682:	19 f4       	brne	.+6      	; 0x868a <_printf_fn+0xa4>
    8684:	68 94       	set
    8686:	97 f8       	bld	r9, 7
    8688:	04 c0       	rjmp	.+8      	; 0x8692 <_printf_fn+0xac>
    868a:	6b 32       	cpi	r22, 0x2B	; 43
    868c:	39 f4       	brne	.+14     	; 0x869c <_printf_fn+0xb6>
    868e:	68 94       	set
    8690:	92 f8       	bld	r9, 2
    8692:	bf ef       	ldi	r27, 0xFF	; 255
    8694:	6b 1a       	sub	r6, r27
    8696:	7b 0a       	sbc	r7, r27
    8698:	8b 0a       	sbc	r8, r27
    869a:	ee cf       	rjmp	.-36     	; 0x8678 <_printf_fn+0x92>
    869c:	6d 32       	cpi	r22, 0x2D	; 45
    869e:	a9 f4       	brne	.+42     	; 0x86ca <_printf_fn+0xe4>
    86a0:	93 fc       	sbrc	r9, 3
    86a2:	05 c0       	rjmp	.+10     	; 0x86ae <_printf_fn+0xc8>
    86a4:	6d 32       	cpi	r22, 0x2D	; 45
    86a6:	19 f4       	brne	.+6      	; 0x86ae <_printf_fn+0xc8>
    86a8:	68 94       	set
    86aa:	93 f8       	bld	r9, 3
    86ac:	f2 cf       	rjmp	.-28     	; 0x8692 <_printf_fn+0xac>
    86ae:	94 fc       	sbrc	r9, 4
    86b0:	05 c0       	rjmp	.+10     	; 0x86bc <_printf_fn+0xd6>
    86b2:	60 32       	cpi	r22, 0x20	; 32
    86b4:	19 f4       	brne	.+6      	; 0x86bc <_printf_fn+0xd6>
    86b6:	68 94       	set
    86b8:	94 f8       	bld	r9, 4
    86ba:	eb cf       	rjmp	.-42     	; 0x8692 <_printf_fn+0xac>
    86bc:	95 fc       	sbrc	r9, 5
    86be:	e9 cf       	rjmp	.-46     	; 0x8692 <_printf_fn+0xac>
    86c0:	60 33       	cpi	r22, 0x30	; 48
    86c2:	39 f7       	brne	.-50     	; 0x8692 <_printf_fn+0xac>
    86c4:	68 94       	set
    86c6:	95 f8       	bld	r9, 5
    86c8:	e4 cf       	rjmp	.-56     	; 0x8692 <_printf_fn+0xac>
    86ca:	86 2f       	mov	r24, r22
    86cc:	8f 7e       	andi	r24, 0xEF	; 239
    86ce:	80 32       	cpi	r24, 0x20	; 32
    86d0:	39 f3       	breq	.-50     	; 0x86a0 <_printf_fn+0xba>
    86d2:	70 e0       	ldi	r23, 0x00	; 0
    86d4:	60 53       	subi	r22, 0x30	; 48
    86d6:	71 09       	sbc	r23, r1
    86d8:	41 2c       	mov	r4, r1
    86da:	51 2c       	mov	r5, r1
    86dc:	6a 30       	cpi	r22, 0x0A	; 10
    86de:	71 05       	cpc	r23, r1
    86e0:	e0 f4       	brcc	.+56     	; 0x871a <_printf_fn+0x134>
    86e2:	2a e0       	ldi	r18, 0x0A	; 10
    86e4:	f3 01       	movw	r30, r6
    86e6:	58 2d       	mov	r21, r8
    86e8:	0e 94 17 e6 	call	0x1cc2e	; 0x1cc2e <__xload_1>
    86ec:	70 e0       	ldi	r23, 0x00	; 0
    86ee:	cb 01       	movw	r24, r22
    86f0:	c0 97       	sbiw	r24, 0x30	; 48
    86f2:	0a 97       	sbiw	r24, 0x0a	; 10
    86f4:	80 f4       	brcc	.+32     	; 0x8716 <_printf_fn+0x130>
    86f6:	ef ef       	ldi	r30, 0xFF	; 255
    86f8:	6e 1a       	sub	r6, r30
    86fa:	7e 0a       	sbc	r7, r30
    86fc:	8e 0a       	sbc	r8, r30
    86fe:	24 9d       	mul	r18, r4
    8700:	c0 01       	movw	r24, r0
    8702:	25 9d       	mul	r18, r5
    8704:	90 0d       	add	r25, r0
    8706:	11 24       	eor	r1, r1
    8708:	68 0f       	add	r22, r24
    870a:	79 1f       	adc	r23, r25
    870c:	2b 01       	movw	r4, r22
    870e:	f0 e3       	ldi	r31, 0x30	; 48
    8710:	4f 1a       	sub	r4, r31
    8712:	51 08       	sbc	r5, r1
    8714:	e7 cf       	rjmp	.-50     	; 0x86e4 <_printf_fn+0xfe>
    8716:	68 94       	set
    8718:	90 f8       	bld	r9, 0
    871a:	f3 01       	movw	r30, r6
    871c:	58 2d       	mov	r21, r8
    871e:	0e 94 17 e6 	call	0x1cc2e	; 0x1cc2e <__xload_1>
    8722:	6e 32       	cpi	r22, 0x2E	; 46
    8724:	59 f5       	brne	.+86     	; 0x877c <_printf_fn+0x196>
    8726:	2f ef       	ldi	r18, 0xFF	; 255
    8728:	62 1a       	sub	r6, r18
    872a:	72 0a       	sbc	r7, r18
    872c:	82 0a       	sbc	r8, r18
    872e:	a1 96       	adiw	r28, 0x21	; 33
    8730:	1f ae       	std	Y+63, r1	; 0x3f
    8732:	1e ae       	std	Y+62, r1	; 0x3e
    8734:	a1 97       	sbiw	r28, 0x21	; 33
    8736:	2a e0       	ldi	r18, 0x0A	; 10
    8738:	f3 01       	movw	r30, r6
    873a:	58 2d       	mov	r21, r8
    873c:	0e 94 17 e6 	call	0x1cc2e	; 0x1cc2e <__xload_1>
    8740:	70 e0       	ldi	r23, 0x00	; 0
    8742:	cb 01       	movw	r24, r22
    8744:	c0 97       	sbiw	r24, 0x30	; 48
    8746:	0a 97       	sbiw	r24, 0x0a	; 10
    8748:	b0 f4       	brcc	.+44     	; 0x8776 <_printf_fn+0x190>
    874a:	3f ef       	ldi	r19, 0xFF	; 255
    874c:	63 1a       	sub	r6, r19
    874e:	73 0a       	sbc	r7, r19
    8750:	83 0a       	sbc	r8, r19
    8752:	a1 96       	adiw	r28, 0x21	; 33
    8754:	4e ad       	ldd	r20, Y+62	; 0x3e
    8756:	5f ad       	ldd	r21, Y+63	; 0x3f
    8758:	a1 97       	sbiw	r28, 0x21	; 33
    875a:	24 9f       	mul	r18, r20
    875c:	c0 01       	movw	r24, r0
    875e:	25 9f       	mul	r18, r21
    8760:	90 0d       	add	r25, r0
    8762:	11 24       	eor	r1, r1
    8764:	68 0f       	add	r22, r24
    8766:	79 1f       	adc	r23, r25
    8768:	cb 01       	movw	r24, r22
    876a:	c0 97       	sbiw	r24, 0x30	; 48
    876c:	a1 96       	adiw	r28, 0x21	; 33
    876e:	9f af       	std	Y+63, r25	; 0x3f
    8770:	8e af       	std	Y+62, r24	; 0x3e
    8772:	a1 97       	sbiw	r28, 0x21	; 33
    8774:	e1 cf       	rjmp	.-62     	; 0x8738 <_printf_fn+0x152>
    8776:	68 94       	set
    8778:	91 f8       	bld	r9, 1
    877a:	04 c0       	rjmp	.+8      	; 0x8784 <_printf_fn+0x19e>
    877c:	a1 96       	adiw	r28, 0x21	; 33
    877e:	1f ae       	std	Y+63, r1	; 0x3f
    8780:	1e ae       	std	Y+62, r1	; 0x3e
    8782:	a1 97       	sbiw	r28, 0x21	; 33
    8784:	f3 01       	movw	r30, r6
    8786:	58 2d       	mov	r21, r8
    8788:	0e 94 17 e6 	call	0x1cc2e	; 0x1cc2e <__xload_1>
    878c:	69 34       	cpi	r22, 0x49	; 73
    878e:	09 f0       	breq	.+2      	; 0x8792 <_printf_fn+0x1ac>
    8790:	45 c0       	rjmp	.+138    	; 0x881c <_printf_fn+0x236>
    8792:	9f ef       	ldi	r25, 0xFF	; 255
    8794:	69 1a       	sub	r6, r25
    8796:	79 0a       	sbc	r7, r25
    8798:	89 0a       	sbc	r8, r25
    879a:	6f 96       	adiw	r28, 0x1f	; 31
    879c:	1f ae       	std	Y+63, r1	; 0x3f
    879e:	1e ae       	std	Y+62, r1	; 0x3e
    87a0:	6f 97       	sbiw	r28, 0x1f	; 31
    87a2:	2a e0       	ldi	r18, 0x0A	; 10
    87a4:	f3 01       	movw	r30, r6
    87a6:	58 2d       	mov	r21, r8
    87a8:	0e 94 17 e6 	call	0x1cc2e	; 0x1cc2e <__xload_1>
    87ac:	70 e0       	ldi	r23, 0x00	; 0
    87ae:	cb 01       	movw	r24, r22
    87b0:	c0 97       	sbiw	r24, 0x30	; 48
    87b2:	0a 97       	sbiw	r24, 0x0a	; 10
    87b4:	b8 f4       	brcc	.+46     	; 0x87e4 <_printf_fn+0x1fe>
    87b6:	af ef       	ldi	r26, 0xFF	; 255
    87b8:	6a 1a       	sub	r6, r26
    87ba:	7a 0a       	sbc	r7, r26
    87bc:	8a 0a       	sbc	r8, r26
    87be:	6f 96       	adiw	r28, 0x1f	; 31
    87c0:	ee ad       	ldd	r30, Y+62	; 0x3e
    87c2:	ff ad       	ldd	r31, Y+63	; 0x3f
    87c4:	6f 97       	sbiw	r28, 0x1f	; 31
    87c6:	2e 9f       	mul	r18, r30
    87c8:	c0 01       	movw	r24, r0
    87ca:	2f 9f       	mul	r18, r31
    87cc:	90 0d       	add	r25, r0
    87ce:	11 24       	eor	r1, r1
    87d0:	68 0f       	add	r22, r24
    87d2:	79 1f       	adc	r23, r25
    87d4:	ab 01       	movw	r20, r22
    87d6:	40 53       	subi	r20, 0x30	; 48
    87d8:	51 09       	sbc	r21, r1
    87da:	6f 96       	adiw	r28, 0x1f	; 31
    87dc:	5f af       	std	Y+63, r21	; 0x3f
    87de:	4e af       	std	Y+62, r20	; 0x3e
    87e0:	6f 97       	sbiw	r28, 0x1f	; 31
    87e2:	e0 cf       	rjmp	.-64     	; 0x87a4 <_printf_fn+0x1be>
    87e4:	6f 96       	adiw	r28, 0x1f	; 31
    87e6:	8e ad       	ldd	r24, Y+62	; 0x3e
    87e8:	9f ad       	ldd	r25, Y+63	; 0x3f
    87ea:	6f 97       	sbiw	r28, 0x1f	; 31
    87ec:	00 97       	sbiw	r24, 0x00	; 0
    87ee:	09 f4       	brne	.+2      	; 0x87f2 <_printf_fn+0x20c>
    87f0:	4f c0       	rjmp	.+158    	; 0x8890 <_printf_fn+0x2aa>
    87f2:	87 70       	andi	r24, 0x07	; 7
    87f4:	99 27       	eor	r25, r25
    87f6:	89 2b       	or	r24, r25
    87f8:	09 f0       	breq	.+2      	; 0x87fc <_printf_fn+0x216>
    87fa:	46 c0       	rjmp	.+140    	; 0x8888 <_printf_fn+0x2a2>
    87fc:	6f 96       	adiw	r28, 0x1f	; 31
    87fe:	ae ad       	ldd	r26, Y+62	; 0x3e
    8800:	bf ad       	ldd	r27, Y+63	; 0x3f
    8802:	6f 97       	sbiw	r28, 0x1f	; 31
    8804:	83 e0       	ldi	r24, 0x03	; 3
    8806:	b5 95       	asr	r27
    8808:	a7 95       	ror	r26
    880a:	8a 95       	dec	r24
    880c:	e1 f7       	brne	.-8      	; 0x8806 <_printf_fn+0x220>
    880e:	6f 96       	adiw	r28, 0x1f	; 31
    8810:	bf af       	std	Y+63, r27	; 0x3f
    8812:	ae af       	std	Y+62, r26	; 0x3e
    8814:	6f 97       	sbiw	r28, 0x1f	; 31
    8816:	ab 2b       	or	r26, r27
    8818:	d9 f1       	breq	.+118    	; 0x8890 <_printf_fn+0x2aa>
    881a:	27 c0       	rjmp	.+78     	; 0x886a <_printf_fn+0x284>
    881c:	68 36       	cpi	r22, 0x68	; 104
    881e:	29 f4       	brne	.+10     	; 0x882a <_printf_fn+0x244>
    8820:	bf ef       	ldi	r27, 0xFF	; 255
    8822:	6b 1a       	sub	r6, r27
    8824:	7b 0a       	sbc	r7, r27
    8826:	8b 0a       	sbc	r8, r27
    8828:	c2 c2       	rjmp	.+1412   	; 0x8dae <_printf_fn+0x7c8>
    882a:	6c 36       	cpi	r22, 0x6C	; 108
    882c:	09 f0       	breq	.+2      	; 0x8830 <_printf_fn+0x24a>
    882e:	bf c2       	rjmp	.+1406   	; 0x8dae <_printf_fn+0x7c8>
    8830:	a8 2d       	mov	r26, r8
    8832:	c3 01       	movw	r24, r6
    8834:	01 96       	adiw	r24, 0x01	; 1
    8836:	a1 1d       	adc	r26, r1
    8838:	fc 01       	movw	r30, r24
    883a:	5a 2f       	mov	r21, r26
    883c:	0e 94 17 e6 	call	0x1cc2e	; 0x1cc2e <__xload_1>
    8840:	6c 36       	cpi	r22, 0x6C	; 108
    8842:	49 f0       	breq	.+18     	; 0x8856 <_printf_fn+0x270>
    8844:	3c 01       	movw	r6, r24
    8846:	8a 2e       	mov	r8, r26
    8848:	24 e0       	ldi	r18, 0x04	; 4
    884a:	30 e0       	ldi	r19, 0x00	; 0
    884c:	6f 96       	adiw	r28, 0x1f	; 31
    884e:	3f af       	std	Y+63, r19	; 0x3f
    8850:	2e af       	std	Y+62, r18	; 0x3e
    8852:	6f 97       	sbiw	r28, 0x1f	; 31
    8854:	0a c0       	rjmp	.+20     	; 0x886a <_printf_fn+0x284>
    8856:	32 e0       	ldi	r19, 0x02	; 2
    8858:	63 0e       	add	r6, r19
    885a:	71 1c       	adc	r7, r1
    885c:	81 1c       	adc	r8, r1
    885e:	48 e0       	ldi	r20, 0x08	; 8
    8860:	50 e0       	ldi	r21, 0x00	; 0
    8862:	6f 96       	adiw	r28, 0x1f	; 31
    8864:	5f af       	std	Y+63, r21	; 0x3f
    8866:	4e af       	std	Y+62, r20	; 0x3e
    8868:	6f 97       	sbiw	r28, 0x1f	; 31
    886a:	f3 01       	movw	r30, r6
    886c:	58 2d       	mov	r21, r8
    886e:	0e 94 17 e6 	call	0x1cc2e	; 0x1cc2e <__xload_1>
    8872:	86 2f       	mov	r24, r22
    8874:	90 e0       	ldi	r25, 0x00	; 0
    8876:	a3 96       	adiw	r28, 0x23	; 35
    8878:	9f af       	std	Y+63, r25	; 0x3f
    887a:	8e af       	std	Y+62, r24	; 0x3e
    887c:	a3 97       	sbiw	r28, 0x23	; 35
    887e:	84 36       	cpi	r24, 0x64	; 100
    8880:	91 05       	cpc	r25, r1
    8882:	09 f4       	brne	.+2      	; 0x8886 <_printf_fn+0x2a0>
    8884:	9b c2       	rjmp	.+1334   	; 0x8dbc <_printf_fn+0x7d6>
    8886:	08 c0       	rjmp	.+16     	; 0x8898 <_printf_fn+0x2b2>
    8888:	6f 96       	adiw	r28, 0x1f	; 31
    888a:	1f ae       	std	Y+63, r1	; 0x3f
    888c:	1e ae       	std	Y+62, r1	; 0x3e
    888e:	6f 97       	sbiw	r28, 0x1f	; 31
    8890:	a3 96       	adiw	r28, 0x23	; 35
    8892:	1f ae       	std	Y+63, r1	; 0x3f
    8894:	1e ae       	std	Y+62, r1	; 0x3e
    8896:	a3 97       	sbiw	r28, 0x23	; 35
    8898:	31 e0       	ldi	r19, 0x01	; 1
    889a:	20 e0       	ldi	r18, 0x00	; 0
    889c:	a3 96       	adiw	r28, 0x23	; 35
    889e:	ae ad       	ldd	r26, Y+62	; 0x3e
    88a0:	bf ad       	ldd	r27, Y+63	; 0x3f
    88a2:	a3 97       	sbiw	r28, 0x23	; 35
    88a4:	a4 34       	cpi	r26, 0x44	; 68
    88a6:	b1 05       	cpc	r27, r1
    88a8:	09 f0       	breq	.+2      	; 0x88ac <_printf_fn+0x2c6>
    88aa:	30 e0       	ldi	r19, 0x00	; 0
    88ac:	83 2f       	mov	r24, r19
    88ae:	92 2f       	mov	r25, r18
    88b0:	a3 96       	adiw	r28, 0x23	; 35
    88b2:	ee ad       	ldd	r30, Y+62	; 0x3e
    88b4:	ff ad       	ldd	r31, Y+63	; 0x3f
    88b6:	a3 97       	sbiw	r28, 0x23	; 35
    88b8:	e2 54       	subi	r30, 0x42	; 66
    88ba:	f1 09       	sbc	r31, r1
    88bc:	e7 33       	cpi	r30, 0x37	; 55
    88be:	f1 05       	cpc	r31, r1
    88c0:	08 f0       	brcs	.+2      	; 0x88c4 <_printf_fn+0x2de>
    88c2:	65 c1       	rjmp	.+714    	; 0x8b8e <_printf_fn+0x5a8>
    88c4:	ea 5b       	subi	r30, 0xBA	; 186
    88c6:	ff 4f       	sbci	r31, 0xFF	; 255
    88c8:	0c 94 9c e5 	jmp	0x1cb38	; 0x1cb38 <__tablejump2__>
    88cc:	e2 e0       	ldi	r30, 0x02	; 2
    88ce:	f0 e0       	ldi	r31, 0x00	; 0
    88d0:	6f 96       	adiw	r28, 0x1f	; 31
    88d2:	ff af       	std	Y+63, r31	; 0x3f
    88d4:	ee af       	std	Y+62, r30	; 0x3e
    88d6:	6f 97       	sbiw	r28, 0x1f	; 31
    88d8:	29 2d       	mov	r18, r9
    88da:	28 72       	andi	r18, 0x28	; 40
    88dc:	28 32       	cpi	r18, 0x28	; 40
    88de:	11 f4       	brne	.+4      	; 0x88e4 <_printf_fn+0x2fe>
    88e0:	e8 94       	clt
    88e2:	95 f8       	bld	r9, 5
    88e4:	29 2d       	mov	r18, r9
    88e6:	22 72       	andi	r18, 0x22	; 34
    88e8:	22 32       	cpi	r18, 0x22	; 34
    88ea:	11 f4       	brne	.+4      	; 0x88f0 <_printf_fn+0x30a>
    88ec:	e8 94       	clt
    88ee:	95 f8       	bld	r9, 5
    88f0:	29 2d       	mov	r18, r9
    88f2:	21 72       	andi	r18, 0x21	; 33
    88f4:	21 32       	cpi	r18, 0x21	; 33
    88f6:	59 f4       	brne	.+22     	; 0x890e <_printf_fn+0x328>
    88f8:	a1 96       	adiw	r28, 0x21	; 33
    88fa:	2e ad       	ldd	r18, Y+62	; 0x3e
    88fc:	3f ad       	ldd	r19, Y+63	; 0x3f
    88fe:	a1 97       	sbiw	r28, 0x21	; 33
    8900:	24 15       	cp	r18, r4
    8902:	35 05       	cpc	r19, r5
    8904:	24 f4       	brge	.+8      	; 0x890e <_printf_fn+0x328>
    8906:	a1 96       	adiw	r28, 0x21	; 33
    8908:	5f ae       	std	Y+63, r5	; 0x3f
    890a:	4e ae       	std	Y+62, r4	; 0x3e
    890c:	a1 97       	sbiw	r28, 0x21	; 33
    890e:	29 2d       	mov	r18, r9
    8910:	23 72       	andi	r18, 0x23	; 35
    8912:	23 32       	cpi	r18, 0x23	; 35
    8914:	59 f4       	brne	.+22     	; 0x892c <_printf_fn+0x346>
    8916:	a1 96       	adiw	r28, 0x21	; 33
    8918:	4e ad       	ldd	r20, Y+62	; 0x3e
    891a:	5f ad       	ldd	r21, Y+63	; 0x3f
    891c:	a1 97       	sbiw	r28, 0x21	; 33
    891e:	44 15       	cp	r20, r4
    8920:	55 05       	cpc	r21, r5
    8922:	24 f4       	brge	.+8      	; 0x892c <_printf_fn+0x346>
    8924:	a1 96       	adiw	r28, 0x21	; 33
    8926:	5f ae       	std	Y+63, r5	; 0x3f
    8928:	4e ae       	std	Y+62, r4	; 0x3e
    892a:	a1 97       	sbiw	r28, 0x21	; 33
    892c:	e8 94       	clt
    892e:	94 f8       	bld	r9, 4
    8930:	e8 94       	clt
    8932:	92 f8       	bld	r9, 2
    8934:	e8 94       	clt
    8936:	96 f8       	bld	r9, 6
    8938:	6f 96       	adiw	r28, 0x1f	; 31
    893a:	ae ad       	ldd	r26, Y+62	; 0x3e
    893c:	bf ad       	ldd	r27, Y+63	; 0x3f
    893e:	6f 97       	sbiw	r28, 0x1f	; 31
    8940:	12 97       	sbiw	r26, 0x02	; 2
    8942:	29 f5       	brne	.+74     	; 0x898e <_printf_fn+0x3a8>
    8944:	51 01       	movw	r10, r2
    8946:	b2 e0       	ldi	r27, 0x02	; 2
    8948:	ab 0e       	add	r10, r27
    894a:	b1 1c       	adc	r11, r1
    894c:	f1 01       	movw	r30, r2
    894e:	80 81       	ld	r24, Z
    8950:	91 81       	ldd	r25, Z+1	; 0x01
    8952:	65 96       	adiw	r28, 0x15	; 21
    8954:	9f af       	std	Y+63, r25	; 0x3f
    8956:	8e af       	std	Y+62, r24	; 0x3e
    8958:	65 97       	sbiw	r28, 0x15	; 21
    895a:	a3 96       	adiw	r28, 0x23	; 35
    895c:	2e ad       	ldd	r18, Y+62	; 0x3e
    895e:	3f ad       	ldd	r19, Y+63	; 0x3f
    8960:	a3 97       	sbiw	r28, 0x23	; 35
    8962:	24 34       	cpi	r18, 0x44	; 68
    8964:	31 05       	cpc	r19, r1
    8966:	09 f0       	breq	.+2      	; 0x896a <_printf_fn+0x384>
    8968:	c0 c0       	rjmp	.+384    	; 0x8aea <_printf_fn+0x504>
    896a:	97 ff       	sbrs	r25, 7
    896c:	b8 c0       	rjmp	.+368    	; 0x8ade <_printf_fn+0x4f8>
    896e:	68 94       	set
    8970:	96 f8       	bld	r9, 6
    8972:	91 95       	neg	r25
    8974:	81 95       	neg	r24
    8976:	91 09       	sbc	r25, r1
    8978:	65 96       	adiw	r28, 0x15	; 21
    897a:	9f af       	std	Y+63, r25	; 0x3f
    897c:	8e af       	std	Y+62, r24	; 0x3e
    897e:	65 97       	sbiw	r28, 0x15	; 21
    8980:	42 e0       	ldi	r20, 0x02	; 2
    8982:	50 e0       	ldi	r21, 0x00	; 0
    8984:	6f 96       	adiw	r28, 0x1f	; 31
    8986:	5f af       	std	Y+63, r21	; 0x3f
    8988:	4e af       	std	Y+62, r20	; 0x3e
    898a:	6f 97       	sbiw	r28, 0x1f	; 31
    898c:	ae c0       	rjmp	.+348    	; 0x8aea <_printf_fn+0x504>
    898e:	6f 96       	adiw	r28, 0x1f	; 31
    8990:	ae ad       	ldd	r26, Y+62	; 0x3e
    8992:	bf ad       	ldd	r27, Y+63	; 0x3f
    8994:	6f 97       	sbiw	r28, 0x1f	; 31
    8996:	14 97       	sbiw	r26, 0x04	; 4
    8998:	59 f5       	brne	.+86     	; 0x89f0 <_printf_fn+0x40a>
    899a:	51 01       	movw	r10, r2
    899c:	b4 e0       	ldi	r27, 0x04	; 4
    899e:	ab 0e       	add	r10, r27
    89a0:	b1 1c       	adc	r11, r1
    89a2:	f1 01       	movw	r30, r2
    89a4:	80 81       	ld	r24, Z
    89a6:	91 81       	ldd	r25, Z+1	; 0x01
    89a8:	a2 81       	ldd	r26, Z+2	; 0x02
    89aa:	b3 81       	ldd	r27, Z+3	; 0x03
    89ac:	2f 96       	adiw	r28, 0x0f	; 15
    89ae:	8c af       	std	Y+60, r24	; 0x3c
    89b0:	9d af       	std	Y+61, r25	; 0x3d
    89b2:	ae af       	std	Y+62, r26	; 0x3e
    89b4:	bf af       	std	Y+63, r27	; 0x3f
    89b6:	2f 97       	sbiw	r28, 0x0f	; 15
    89b8:	a3 96       	adiw	r28, 0x23	; 35
    89ba:	2e ad       	ldd	r18, Y+62	; 0x3e
    89bc:	3f ad       	ldd	r19, Y+63	; 0x3f
    89be:	a3 97       	sbiw	r28, 0x23	; 35
    89c0:	24 34       	cpi	r18, 0x44	; 68
    89c2:	31 05       	cpc	r19, r1
    89c4:	09 f0       	breq	.+2      	; 0x89c8 <_printf_fn+0x3e2>
    89c6:	9e c0       	rjmp	.+316    	; 0x8b04 <_printf_fn+0x51e>
    89c8:	b7 ff       	sbrs	r27, 7
    89ca:	96 c0       	rjmp	.+300    	; 0x8af8 <_printf_fn+0x512>
    89cc:	68 94       	set
    89ce:	96 f8       	bld	r9, 6
    89d0:	b0 95       	com	r27
    89d2:	a0 95       	com	r26
    89d4:	90 95       	com	r25
    89d6:	81 95       	neg	r24
    89d8:	9f 4f       	sbci	r25, 0xFF	; 255
    89da:	af 4f       	sbci	r26, 0xFF	; 255
    89dc:	bf 4f       	sbci	r27, 0xFF	; 255
    89de:	2f 96       	adiw	r28, 0x0f	; 15
    89e0:	8c af       	std	Y+60, r24	; 0x3c
    89e2:	9d af       	std	Y+61, r25	; 0x3d
    89e4:	ae af       	std	Y+62, r26	; 0x3e
    89e6:	bf af       	std	Y+63, r27	; 0x3f
    89e8:	2f 97       	sbiw	r28, 0x0f	; 15
    89ea:	86 c0       	rjmp	.+268    	; 0x8af8 <_printf_fn+0x512>
    89ec:	81 e0       	ldi	r24, 0x01	; 1
    89ee:	90 e0       	ldi	r25, 0x00	; 0
    89f0:	6f 96       	adiw	r28, 0x1f	; 31
    89f2:	ae ad       	ldd	r26, Y+62	; 0x3e
    89f4:	bf ad       	ldd	r27, Y+63	; 0x3f
    89f6:	6f 97       	sbiw	r28, 0x1f	; 31
    89f8:	51 01       	movw	r10, r2
    89fa:	18 97       	sbiw	r26, 0x08	; 8
    89fc:	09 f0       	breq	.+2      	; 0x8a00 <_printf_fn+0x41a>
    89fe:	89 c0       	rjmp	.+274    	; 0x8b12 <_printf_fn+0x52c>
    8a00:	b8 e0       	ldi	r27, 0x08	; 8
    8a02:	ab 0e       	add	r10, r27
    8a04:	b1 1c       	adc	r11, r1
    8a06:	f1 01       	movw	r30, r2
    8a08:	f0 81       	ld	r31, Z
    8a0a:	aa 96       	adiw	r28, 0x2a	; 42
    8a0c:	ff af       	std	Y+63, r31	; 0x3f
    8a0e:	aa 97       	sbiw	r28, 0x2a	; 42
    8a10:	d1 01       	movw	r26, r2
    8a12:	11 96       	adiw	r26, 0x01	; 1
    8a14:	fc 90       	ld	r15, X
    8a16:	11 97       	sbiw	r26, 0x01	; 1
    8a18:	12 96       	adiw	r26, 0x02	; 2
    8a1a:	0c 91       	ld	r16, X
    8a1c:	12 97       	sbiw	r26, 0x02	; 2
    8a1e:	13 96       	adiw	r26, 0x03	; 3
    8a20:	1c 91       	ld	r17, X
    8a22:	13 97       	sbiw	r26, 0x03	; 3
    8a24:	14 96       	adiw	r26, 0x04	; 4
    8a26:	bc 91       	ld	r27, X
    8a28:	f1 01       	movw	r30, r2
    8a2a:	f5 81       	ldd	r31, Z+5	; 0x05
    8a2c:	ab 96       	adiw	r28, 0x2b	; 43
    8a2e:	ff af       	std	Y+63, r31	; 0x3f
    8a30:	ab 97       	sbiw	r28, 0x2b	; 43
    8a32:	f1 01       	movw	r30, r2
    8a34:	f6 81       	ldd	r31, Z+6	; 0x06
    8a36:	ac 96       	adiw	r28, 0x2c	; 44
    8a38:	ff af       	std	Y+63, r31	; 0x3f
    8a3a:	ac 97       	sbiw	r28, 0x2c	; 44
    8a3c:	f1 01       	movw	r30, r2
    8a3e:	37 80       	ldd	r3, Z+7	; 0x07
    8a40:	aa 96       	adiw	r28, 0x2a	; 42
    8a42:	ff ad       	ldd	r31, Y+63	; 0x3f
    8a44:	aa 97       	sbiw	r28, 0x2a	; 42
    8a46:	24 96       	adiw	r28, 0x04	; 4
    8a48:	ff af       	std	Y+63, r31	; 0x3f
    8a4a:	24 97       	sbiw	r28, 0x04	; 4
    8a4c:	25 96       	adiw	r28, 0x05	; 5
    8a4e:	ff ae       	std	Y+63, r15	; 0x3f
    8a50:	25 97       	sbiw	r28, 0x05	; 5
    8a52:	26 96       	adiw	r28, 0x06	; 6
    8a54:	0f af       	std	Y+63, r16	; 0x3f
    8a56:	26 97       	sbiw	r28, 0x06	; 6
    8a58:	27 96       	adiw	r28, 0x07	; 7
    8a5a:	1f af       	std	Y+63, r17	; 0x3f
    8a5c:	27 97       	sbiw	r28, 0x07	; 7
    8a5e:	28 96       	adiw	r28, 0x08	; 8
    8a60:	bf af       	std	Y+63, r27	; 0x3f
    8a62:	28 97       	sbiw	r28, 0x08	; 8
    8a64:	ab 96       	adiw	r28, 0x2b	; 43
    8a66:	ef ad       	ldd	r30, Y+63	; 0x3f
    8a68:	ab 97       	sbiw	r28, 0x2b	; 43
    8a6a:	29 96       	adiw	r28, 0x09	; 9
    8a6c:	ef af       	std	Y+63, r30	; 0x3f
    8a6e:	29 97       	sbiw	r28, 0x09	; 9
    8a70:	ac 96       	adiw	r28, 0x2c	; 44
    8a72:	ff ad       	ldd	r31, Y+63	; 0x3f
    8a74:	ac 97       	sbiw	r28, 0x2c	; 44
    8a76:	2a 96       	adiw	r28, 0x0a	; 10
    8a78:	ff af       	std	Y+63, r31	; 0x3f
    8a7a:	2a 97       	sbiw	r28, 0x0a	; 10
    8a7c:	2b 96       	adiw	r28, 0x0b	; 11
    8a7e:	3f ae       	std	Y+63, r3	; 0x3f
    8a80:	2b 97       	sbiw	r28, 0x0b	; 11
    8a82:	89 2b       	or	r24, r25
    8a84:	09 f4       	brne	.+2      	; 0x8a88 <_printf_fn+0x4a2>
    8a86:	50 c0       	rjmp	.+160    	; 0x8b28 <_printf_fn+0x542>
    8a88:	aa 96       	adiw	r28, 0x2a	; 42
    8a8a:	2f ad       	ldd	r18, Y+63	; 0x3f
    8a8c:	aa 97       	sbiw	r28, 0x2a	; 42
    8a8e:	3f 2d       	mov	r19, r15
    8a90:	a8 01       	movw	r20, r16
    8a92:	6b 2f       	mov	r22, r27
    8a94:	7e 2f       	mov	r23, r30
    8a96:	8f 2f       	mov	r24, r31
    8a98:	93 2d       	mov	r25, r3
    8a9a:	a0 e0       	ldi	r26, 0x00	; 0
    8a9c:	0e 94 1e e6 	call	0x1cc3c	; 0x1cc3c <__cmpdi2_s8>
    8aa0:	0c f0       	brlt	.+2      	; 0x8aa4 <_printf_fn+0x4be>
    8aa2:	42 c0       	rjmp	.+132    	; 0x8b28 <_printf_fn+0x542>
    8aa4:	68 94       	set
    8aa6:	96 f8       	bld	r9, 6
    8aa8:	0e 94 d0 e5 	call	0x1cba0	; 0x1cba0 <__negdi2>
    8aac:	24 96       	adiw	r28, 0x04	; 4
    8aae:	2f af       	std	Y+63, r18	; 0x3f
    8ab0:	24 97       	sbiw	r28, 0x04	; 4
    8ab2:	25 96       	adiw	r28, 0x05	; 5
    8ab4:	3f af       	std	Y+63, r19	; 0x3f
    8ab6:	25 97       	sbiw	r28, 0x05	; 5
    8ab8:	26 96       	adiw	r28, 0x06	; 6
    8aba:	4f af       	std	Y+63, r20	; 0x3f
    8abc:	26 97       	sbiw	r28, 0x06	; 6
    8abe:	27 96       	adiw	r28, 0x07	; 7
    8ac0:	5f af       	std	Y+63, r21	; 0x3f
    8ac2:	27 97       	sbiw	r28, 0x07	; 7
    8ac4:	28 96       	adiw	r28, 0x08	; 8
    8ac6:	6f af       	std	Y+63, r22	; 0x3f
    8ac8:	28 97       	sbiw	r28, 0x08	; 8
    8aca:	29 96       	adiw	r28, 0x09	; 9
    8acc:	7f af       	std	Y+63, r23	; 0x3f
    8ace:	29 97       	sbiw	r28, 0x09	; 9
    8ad0:	2a 96       	adiw	r28, 0x0a	; 10
    8ad2:	8f af       	std	Y+63, r24	; 0x3f
    8ad4:	2a 97       	sbiw	r28, 0x0a	; 10
    8ad6:	2b 96       	adiw	r28, 0x0b	; 11
    8ad8:	9f af       	std	Y+63, r25	; 0x3f
    8ada:	2b 97       	sbiw	r28, 0x0b	; 11
    8adc:	25 c0       	rjmp	.+74     	; 0x8b28 <_printf_fn+0x542>
    8ade:	22 e0       	ldi	r18, 0x02	; 2
    8ae0:	30 e0       	ldi	r19, 0x00	; 0
    8ae2:	6f 96       	adiw	r28, 0x1f	; 31
    8ae4:	3f af       	std	Y+63, r19	; 0x3f
    8ae6:	2e af       	std	Y+62, r18	; 0x3e
    8ae8:	6f 97       	sbiw	r28, 0x1f	; 31
    8aea:	6c 96       	adiw	r28, 0x1c	; 28
    8aec:	8f ad       	ldd	r24, Y+63	; 0x3f
    8aee:	6c 97       	sbiw	r28, 0x1c	; 28
    8af0:	6d 96       	adiw	r28, 0x1d	; 29
    8af2:	9f ad       	ldd	r25, Y+63	; 0x3f
    8af4:	6d 97       	sbiw	r28, 0x1d	; 29
    8af6:	1e c0       	rjmp	.+60     	; 0x8b34 <_printf_fn+0x54e>
    8af8:	44 e0       	ldi	r20, 0x04	; 4
    8afa:	50 e0       	ldi	r21, 0x00	; 0
    8afc:	6f 96       	adiw	r28, 0x1f	; 31
    8afe:	5f af       	std	Y+63, r21	; 0x3f
    8b00:	4e af       	std	Y+62, r20	; 0x3e
    8b02:	6f 97       	sbiw	r28, 0x1f	; 31
    8b04:	6a 96       	adiw	r28, 0x1a	; 26
    8b06:	8f ad       	ldd	r24, Y+63	; 0x3f
    8b08:	6a 97       	sbiw	r28, 0x1a	; 26
    8b0a:	6b 96       	adiw	r28, 0x1b	; 27
    8b0c:	9f ad       	ldd	r25, Y+63	; 0x3f
    8b0e:	6b 97       	sbiw	r28, 0x1b	; 27
    8b10:	11 c0       	rjmp	.+34     	; 0x8b34 <_printf_fn+0x54e>
    8b12:	66 96       	adiw	r28, 0x16	; 22
    8b14:	8f ad       	ldd	r24, Y+63	; 0x3f
    8b16:	66 97       	sbiw	r28, 0x16	; 22
    8b18:	67 96       	adiw	r28, 0x17	; 23
    8b1a:	9f ad       	ldd	r25, Y+63	; 0x3f
    8b1c:	67 97       	sbiw	r28, 0x17	; 23
    8b1e:	a3 96       	adiw	r28, 0x23	; 35
    8b20:	1f ae       	std	Y+63, r1	; 0x3f
    8b22:	1e ae       	std	Y+62, r1	; 0x3e
    8b24:	a3 97       	sbiw	r28, 0x23	; 35
    8b26:	06 c0       	rjmp	.+12     	; 0x8b34 <_printf_fn+0x54e>
    8b28:	68 96       	adiw	r28, 0x18	; 24
    8b2a:	8f ad       	ldd	r24, Y+63	; 0x3f
    8b2c:	68 97       	sbiw	r28, 0x18	; 24
    8b2e:	69 96       	adiw	r28, 0x19	; 25
    8b30:	9f ad       	ldd	r25, Y+63	; 0x3f
    8b32:	69 97       	sbiw	r28, 0x19	; 25
    8b34:	5f ef       	ldi	r21, 0xFF	; 255
    8b36:	65 1a       	sub	r6, r21
    8b38:	75 0a       	sbc	r7, r21
    8b3a:	85 0a       	sbc	r8, r21
    8b3c:	15 01       	movw	r2, r10
    8b3e:	2d c0       	rjmp	.+90     	; 0x8b9a <_printf_fn+0x5b4>
    8b40:	91 fc       	sbrc	r9, 1
    8b42:	08 c0       	rjmp	.+16     	; 0x8b54 <_printf_fn+0x56e>
    8b44:	68 94       	set
    8b46:	91 f8       	bld	r9, 1
    8b48:	86 e0       	ldi	r24, 0x06	; 6
    8b4a:	90 e0       	ldi	r25, 0x00	; 0
    8b4c:	a1 96       	adiw	r28, 0x21	; 33
    8b4e:	9f af       	std	Y+63, r25	; 0x3f
    8b50:	8e af       	std	Y+62, r24	; 0x3e
    8b52:	a1 97       	sbiw	r28, 0x21	; 33
    8b54:	d1 01       	movw	r26, r2
    8b56:	2d 91       	ld	r18, X+
    8b58:	3d 91       	ld	r19, X+
    8b5a:	4d 91       	ld	r20, X+
    8b5c:	5c 91       	ld	r21, X
    8b5e:	a9 96       	adiw	r28, 0x29	; 41
    8b60:	2c af       	std	Y+60, r18	; 0x3c
    8b62:	3d af       	std	Y+61, r19	; 0x3d
    8b64:	4e af       	std	Y+62, r20	; 0x3e
    8b66:	5f af       	std	Y+63, r21	; 0x3f
    8b68:	a9 97       	sbiw	r28, 0x29	; 41
    8b6a:	bf ef       	ldi	r27, 0xFF	; 255
    8b6c:	6b 1a       	sub	r6, r27
    8b6e:	7b 0a       	sbc	r7, r27
    8b70:	8b 0a       	sbc	r8, r27
    8b72:	f1 01       	movw	r30, r2
    8b74:	34 96       	adiw	r30, 0x04	; 4
    8b76:	1f 01       	movw	r2, r30
    8b78:	0a c0       	rjmp	.+20     	; 0x8b8e <_printf_fn+0x5a8>
    8b7a:	ff ef       	ldi	r31, 0xFF	; 255
    8b7c:	6f 1a       	sub	r6, r31
    8b7e:	7f 0a       	sbc	r7, r31
    8b80:	8f 0a       	sbc	r8, r31
    8b82:	b0 c0       	rjmp	.+352    	; 0x8ce4 <_printf_fn+0x6fe>
    8b84:	2f ef       	ldi	r18, 0xFF	; 255
    8b86:	62 1a       	sub	r6, r18
    8b88:	72 0a       	sbc	r7, r18
    8b8a:	82 0a       	sbc	r8, r18
    8b8c:	b8 c0       	rjmp	.+368    	; 0x8cfe <_printf_fn+0x718>
    8b8e:	66 96       	adiw	r28, 0x16	; 22
    8b90:	8f ad       	ldd	r24, Y+63	; 0x3f
    8b92:	66 97       	sbiw	r28, 0x16	; 22
    8b94:	67 96       	adiw	r28, 0x17	; 23
    8b96:	9f ad       	ldd	r25, Y+63	; 0x3f
    8b98:	67 97       	sbiw	r28, 0x17	; 23
    8b9a:	a3 96       	adiw	r28, 0x23	; 35
    8b9c:	ee ad       	ldd	r30, Y+62	; 0x3e
    8b9e:	ff ad       	ldd	r31, Y+63	; 0x3f
    8ba0:	a3 97       	sbiw	r28, 0x23	; 35
    8ba2:	e2 54       	subi	r30, 0x42	; 66
    8ba4:	f1 09       	sbc	r31, r1
    8ba6:	e7 33       	cpi	r30, 0x37	; 55
    8ba8:	f1 05       	cpc	r31, r1
    8baa:	08 f0       	brcs	.+2      	; 0x8bae <_printf_fn+0x5c8>
    8bac:	f9 c0       	rjmp	.+498    	; 0x8da0 <_printf_fn+0x7ba>
    8bae:	e3 58       	subi	r30, 0x83	; 131
    8bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    8bb2:	0c 94 9c e5 	jmp	0x1cb38	; 0x1cb38 <__tablejump2__>
    8bb6:	e8 94       	clt
    8bb8:	94 f8       	bld	r9, 4
    8bba:	e8 94       	clt
    8bbc:	92 f8       	bld	r9, 2
    8bbe:	a9 2c       	mov	r10, r9
    8bc0:	b1 2c       	mov	r11, r1
    8bc2:	a1 96       	adiw	r28, 0x21	; 33
    8bc4:	ce ac       	ldd	r12, Y+62	; 0x3e
    8bc6:	df ac       	ldd	r13, Y+63	; 0x3f
    8bc8:	a1 97       	sbiw	r28, 0x21	; 33
    8bca:	72 01       	movw	r14, r4
    8bcc:	0a e0       	ldi	r16, 0x0A	; 10
    8bce:	10 e0       	ldi	r17, 0x00	; 0
    8bd0:	13 c0       	rjmp	.+38     	; 0x8bf8 <_printf_fn+0x612>
    8bd2:	a9 2c       	mov	r10, r9
    8bd4:	b1 2c       	mov	r11, r1
    8bd6:	a1 96       	adiw	r28, 0x21	; 33
    8bd8:	ce ac       	ldd	r12, Y+62	; 0x3e
    8bda:	df ac       	ldd	r13, Y+63	; 0x3f
    8bdc:	a1 97       	sbiw	r28, 0x21	; 33
    8bde:	72 01       	movw	r14, r4
    8be0:	02 e0       	ldi	r16, 0x02	; 2
    8be2:	10 e0       	ldi	r17, 0x00	; 0
    8be4:	09 c0       	rjmp	.+18     	; 0x8bf8 <_printf_fn+0x612>
    8be6:	a9 2c       	mov	r10, r9
    8be8:	b1 2c       	mov	r11, r1
    8bea:	a1 96       	adiw	r28, 0x21	; 33
    8bec:	ce ac       	ldd	r12, Y+62	; 0x3e
    8bee:	df ac       	ldd	r13, Y+63	; 0x3f
    8bf0:	a1 97       	sbiw	r28, 0x21	; 33
    8bf2:	72 01       	movw	r14, r4
    8bf4:	08 e0       	ldi	r16, 0x08	; 8
    8bf6:	10 e0       	ldi	r17, 0x00	; 0
    8bf8:	22 e4       	ldi	r18, 0x42	; 66
    8bfa:	30 e0       	ldi	r19, 0x00	; 0
    8bfc:	ae 01       	movw	r20, r28
    8bfe:	4f 5f       	subi	r20, 0xFF	; 255
    8c00:	5f 4f       	sbci	r21, 0xFF	; 255
    8c02:	6f 96       	adiw	r28, 0x1f	; 31
    8c04:	6e ad       	ldd	r22, Y+62	; 0x3e
    8c06:	7f ad       	ldd	r23, Y+63	; 0x3f
    8c08:	6f 97       	sbiw	r28, 0x1f	; 31
    8c0a:	f3 d9       	rcall	.-3098   	; 0x7ff2 <p_ntoa>
    8c0c:	30 c0       	rjmp	.+96     	; 0x8c6e <_printf_fn+0x688>
    8c0e:	a9 2c       	mov	r10, r9
    8c10:	b1 2c       	mov	r11, r1
    8c12:	a1 96       	adiw	r28, 0x21	; 33
    8c14:	ce ac       	ldd	r12, Y+62	; 0x3e
    8c16:	df ac       	ldd	r13, Y+63	; 0x3f
    8c18:	a1 97       	sbiw	r28, 0x21	; 33
    8c1a:	72 01       	movw	r14, r4
    8c1c:	00 e1       	ldi	r16, 0x10	; 16
    8c1e:	10 e0       	ldi	r17, 0x00	; 0
    8c20:	22 e4       	ldi	r18, 0x42	; 66
    8c22:	30 e0       	ldi	r19, 0x00	; 0
    8c24:	ae 01       	movw	r20, r28
    8c26:	4f 5f       	subi	r20, 0xFF	; 255
    8c28:	5f 4f       	sbci	r21, 0xFF	; 255
    8c2a:	6f 96       	adiw	r28, 0x1f	; 31
    8c2c:	6e ad       	ldd	r22, Y+62	; 0x3e
    8c2e:	7f ad       	ldd	r23, Y+63	; 0x3f
    8c30:	6f 97       	sbiw	r28, 0x1f	; 31
    8c32:	df d9       	rcall	.-3138   	; 0x7ff2 <p_ntoa>
    8c34:	7c 01       	movw	r14, r24
    8c36:	a3 96       	adiw	r28, 0x23	; 35
    8c38:	6e ad       	ldd	r22, Y+62	; 0x3e
    8c3a:	7f ad       	ldd	r23, Y+63	; 0x3f
    8c3c:	a3 97       	sbiw	r28, 0x23	; 35
    8c3e:	67 7f       	andi	r22, 0xF7	; 247
    8c40:	60 35       	cpi	r22, 0x50	; 80
    8c42:	71 05       	cpc	r23, r1
    8c44:	c9 f5       	brne	.+114    	; 0x8cb8 <_printf_fn+0x6d2>
    8c46:	34 c0       	rjmp	.+104    	; 0x8cb0 <_printf_fn+0x6ca>
    8c48:	c9 2c       	mov	r12, r9
    8c4a:	d1 2c       	mov	r13, r1
    8c4c:	a1 96       	adiw	r28, 0x21	; 33
    8c4e:	ee ac       	ldd	r14, Y+62	; 0x3e
    8c50:	ff ac       	ldd	r15, Y+63	; 0x3f
    8c52:	a1 97       	sbiw	r28, 0x21	; 33
    8c54:	82 01       	movw	r16, r4
    8c56:	22 e4       	ldi	r18, 0x42	; 66
    8c58:	30 e0       	ldi	r19, 0x00	; 0
    8c5a:	ae 01       	movw	r20, r28
    8c5c:	4f 5f       	subi	r20, 0xFF	; 255
    8c5e:	5f 4f       	sbci	r21, 0xFF	; 255
    8c60:	a9 96       	adiw	r28, 0x29	; 41
    8c62:	6c ad       	ldd	r22, Y+60	; 0x3c
    8c64:	7d ad       	ldd	r23, Y+61	; 0x3d
    8c66:	8e ad       	ldd	r24, Y+62	; 0x3e
    8c68:	9f ad       	ldd	r25, Y+63	; 0x3f
    8c6a:	a9 97       	sbiw	r28, 0x29	; 41
    8c6c:	17 da       	rcall	.-3026   	; 0x809c <p_ftoa>
    8c6e:	93 fa       	bst	r9, 3
    8c70:	00 27       	eor	r16, r16
    8c72:	00 f9       	bld	r16, 0
    8c74:	10 e0       	ldi	r17, 0x00	; 0
    8c76:	9c 01       	movw	r18, r24
    8c78:	24 c0       	rjmp	.+72     	; 0x8cc2 <_printf_fn+0x6dc>
    8c7a:	c9 2c       	mov	r12, r9
    8c7c:	d1 2c       	mov	r13, r1
    8c7e:	a1 96       	adiw	r28, 0x21	; 33
    8c80:	ee ac       	ldd	r14, Y+62	; 0x3e
    8c82:	ff ac       	ldd	r15, Y+63	; 0x3f
    8c84:	a1 97       	sbiw	r28, 0x21	; 33
    8c86:	82 01       	movw	r16, r4
    8c88:	22 e4       	ldi	r18, 0x42	; 66
    8c8a:	30 e0       	ldi	r19, 0x00	; 0
    8c8c:	ae 01       	movw	r20, r28
    8c8e:	4f 5f       	subi	r20, 0xFF	; 255
    8c90:	5f 4f       	sbci	r21, 0xFF	; 255
    8c92:	a9 96       	adiw	r28, 0x29	; 41
    8c94:	6c ad       	ldd	r22, Y+60	; 0x3c
    8c96:	7d ad       	ldd	r23, Y+61	; 0x3d
    8c98:	8e ad       	ldd	r24, Y+62	; 0x3e
    8c9a:	9f ad       	ldd	r25, Y+63	; 0x3f
    8c9c:	a9 97       	sbiw	r28, 0x29	; 41
    8c9e:	05 db       	rcall	.-2550   	; 0x82aa <p_etoa>
    8ca0:	7c 01       	movw	r14, r24
    8ca2:	a3 96       	adiw	r28, 0x23	; 35
    8ca4:	4e ad       	ldd	r20, Y+62	; 0x3e
    8ca6:	5f ad       	ldd	r21, Y+63	; 0x3f
    8ca8:	a3 97       	sbiw	r28, 0x23	; 35
    8caa:	45 34       	cpi	r20, 0x45	; 69
    8cac:	51 05       	cpc	r21, r1
    8cae:	21 f4       	brne	.+8      	; 0x8cb8 <_printf_fn+0x6d2>
    8cb0:	ce 01       	movw	r24, r28
    8cb2:	01 96       	adiw	r24, 0x01	; 1
    8cb4:	0e 94 a0 32 	call	0x6540	; 0x6540 <strupper>
    8cb8:	93 fa       	bst	r9, 3
    8cba:	00 27       	eor	r16, r16
    8cbc:	00 f9       	bld	r16, 0
    8cbe:	10 e0       	ldi	r17, 0x00	; 0
    8cc0:	97 01       	movw	r18, r14
    8cc2:	a2 01       	movw	r20, r4
    8cc4:	be 01       	movw	r22, r28
    8cc6:	6f 5f       	subi	r22, 0xFF	; 255
    8cc8:	7f 4f       	sbci	r23, 0xFF	; 255
    8cca:	a5 96       	adiw	r28, 0x25	; 37
    8ccc:	8e ad       	ldd	r24, Y+62	; 0x3e
    8cce:	9f ad       	ldd	r25, Y+63	; 0x3f
    8cd0:	a5 97       	sbiw	r28, 0x25	; 37
    8cd2:	47 dc       	rcall	.-1906   	; 0x8562 <_puts_pad>
    8cd4:	69 c0       	rjmp	.+210    	; 0x8da8 <_printf_fn+0x7c2>
    8cd6:	a3 96       	adiw	r28, 0x23	; 35
    8cd8:	8e ad       	ldd	r24, Y+62	; 0x3e
    8cda:	9f ad       	ldd	r25, Y+63	; 0x3f
    8cdc:	a3 97       	sbiw	r28, 0x23	; 35
    8cde:	83 37       	cpi	r24, 0x73	; 115
    8ce0:	91 05       	cpc	r25, r1
    8ce2:	69 f4       	brne	.+26     	; 0x8cfe <_printf_fn+0x718>
    8ce4:	71 01       	movw	r14, r2
    8ce6:	92 e0       	ldi	r25, 0x02	; 2
    8ce8:	e9 0e       	add	r14, r25
    8cea:	f1 1c       	adc	r15, r1
    8cec:	d1 01       	movw	r26, r2
    8cee:	6d 91       	ld	r22, X+
    8cf0:	7c 91       	ld	r23, X
    8cf2:	61 15       	cp	r22, r1
    8cf4:	71 05       	cpc	r23, r1
    8cf6:	91 f4       	brne	.+36     	; 0x8d1c <_printf_fn+0x736>
    8cf8:	67 ee       	ldi	r22, 0xE7	; 231
    8cfa:	77 e0       	ldi	r23, 0x07	; 7
    8cfc:	0f c0       	rjmp	.+30     	; 0x8d1c <_printf_fn+0x736>
    8cfe:	71 01       	movw	r14, r2
    8d00:	b2 e0       	ldi	r27, 0x02	; 2
    8d02:	eb 0e       	add	r14, r27
    8d04:	f1 1c       	adc	r15, r1
    8d06:	f1 01       	movw	r30, r2
    8d08:	80 81       	ld	r24, Z
    8d0a:	60 96       	adiw	r28, 0x10	; 16
    8d0c:	8f af       	std	Y+63, r24	; 0x3f
    8d0e:	60 97       	sbiw	r28, 0x10	; 16
    8d10:	61 96       	adiw	r28, 0x11	; 17
    8d12:	1f ae       	std	Y+63, r1	; 0x3f
    8d14:	61 97       	sbiw	r28, 0x11	; 17
    8d16:	be 01       	movw	r22, r28
    8d18:	61 5b       	subi	r22, 0xB1	; 177
    8d1a:	7f 4f       	sbci	r23, 0xFF	; 255
    8d1c:	fb 01       	movw	r30, r22
    8d1e:	01 90       	ld	r0, Z+
    8d20:	00 20       	and	r0, r0
    8d22:	e9 f7       	brne	.-6      	; 0x8d1e <_printf_fn+0x738>
    8d24:	31 97       	sbiw	r30, 0x01	; 1
    8d26:	e6 1b       	sub	r30, r22
    8d28:	f7 0b       	sbc	r31, r23
    8d2a:	a1 96       	adiw	r28, 0x21	; 33
    8d2c:	2e ad       	ldd	r18, Y+62	; 0x3e
    8d2e:	3f ad       	ldd	r19, Y+63	; 0x3f
    8d30:	a1 97       	sbiw	r28, 0x21	; 33
    8d32:	23 2b       	or	r18, r19
    8d34:	21 f4       	brne	.+8      	; 0x8d3e <_printf_fn+0x758>
    8d36:	a1 96       	adiw	r28, 0x21	; 33
    8d38:	ff af       	std	Y+63, r31	; 0x3f
    8d3a:	ee af       	std	Y+62, r30	; 0x3e
    8d3c:	a1 97       	sbiw	r28, 0x21	; 33
    8d3e:	a1 96       	adiw	r28, 0x21	; 33
    8d40:	4e ad       	ldd	r20, Y+62	; 0x3e
    8d42:	5f ad       	ldd	r21, Y+63	; 0x3f
    8d44:	a1 97       	sbiw	r28, 0x21	; 33
    8d46:	44 16       	cp	r4, r20
    8d48:	55 06       	cpc	r5, r21
    8d4a:	3c f4       	brge	.+14     	; 0x8d5a <_printf_fn+0x774>
    8d4c:	41 14       	cp	r4, r1
    8d4e:	51 04       	cpc	r5, r1
    8d50:	21 f0       	breq	.+8      	; 0x8d5a <_printf_fn+0x774>
    8d52:	a1 96       	adiw	r28, 0x21	; 33
    8d54:	5f ae       	std	Y+63, r5	; 0x3f
    8d56:	4e ae       	std	Y+62, r4	; 0x3e
    8d58:	a1 97       	sbiw	r28, 0x21	; 33
    8d5a:	93 fa       	bst	r9, 3
    8d5c:	00 27       	eor	r16, r16
    8d5e:	00 f9       	bld	r16, 0
    8d60:	10 e0       	ldi	r17, 0x00	; 0
    8d62:	a1 96       	adiw	r28, 0x21	; 33
    8d64:	2e ad       	ldd	r18, Y+62	; 0x3e
    8d66:	3f ad       	ldd	r19, Y+63	; 0x3f
    8d68:	a1 97       	sbiw	r28, 0x21	; 33
    8d6a:	a2 01       	movw	r20, r4
    8d6c:	a5 96       	adiw	r28, 0x25	; 37
    8d6e:	8e ad       	ldd	r24, Y+62	; 0x3e
    8d70:	9f ad       	ldd	r25, Y+63	; 0x3f
    8d72:	a5 97       	sbiw	r28, 0x25	; 37
    8d74:	f6 db       	rcall	.-2068   	; 0x8562 <_puts_pad>
    8d76:	17 01       	movw	r2, r14
    8d78:	17 c0       	rjmp	.+46     	; 0x8da8 <_printf_fn+0x7c2>
    8d7a:	f6 01       	movw	r30, r12
    8d7c:	5e 2d       	mov	r21, r14
    8d7e:	0e 94 17 e6 	call	0x1cc2e	; 0x1cc2e <__xload_1>
    8d82:	66 23       	and	r22, r22
    8d84:	89 f0       	breq	.+34     	; 0x8da8 <_printf_fn+0x7c2>
    8d86:	5f ef       	ldi	r21, 0xFF	; 255
    8d88:	c5 1a       	sub	r12, r21
    8d8a:	d5 0a       	sbc	r13, r21
    8d8c:	e5 0a       	sbc	r14, r21
    8d8e:	a5 96       	adiw	r28, 0x25	; 37
    8d90:	ae ad       	ldd	r26, Y+62	; 0x3e
    8d92:	bf ad       	ldd	r27, Y+63	; 0x3f
    8d94:	a5 97       	sbiw	r28, 0x25	; 37
    8d96:	ed 91       	ld	r30, X+
    8d98:	fc 91       	ld	r31, X
    8d9a:	11 97       	sbiw	r26, 0x01	; 1
    8d9c:	cd 01       	movw	r24, r26
    8d9e:	09 95       	icall
    8da0:	6c 14       	cp	r6, r12
    8da2:	7d 04       	cpc	r7, r13
    8da4:	8e 04       	cpc	r8, r14
    8da6:	48 f7       	brcc	.-46     	; 0x8d7a <_printf_fn+0x794>
    8da8:	e8 2c       	mov	r14, r8
    8daa:	63 01       	movw	r12, r6
    8dac:	4b cc       	rjmp	.-1898   	; 0x8644 <_printf_fn+0x5e>
    8dae:	e2 e0       	ldi	r30, 0x02	; 2
    8db0:	f0 e0       	ldi	r31, 0x00	; 0
    8db2:	6f 96       	adiw	r28, 0x1f	; 31
    8db4:	ff af       	std	Y+63, r31	; 0x3f
    8db6:	ee af       	std	Y+62, r30	; 0x3e
    8db8:	6f 97       	sbiw	r28, 0x1f	; 31
    8dba:	57 cd       	rjmp	.-1362   	; 0x886a <_printf_fn+0x284>
    8dbc:	6f 96       	adiw	r28, 0x1f	; 31
    8dbe:	ee ad       	ldd	r30, Y+62	; 0x3e
    8dc0:	ff ad       	ldd	r31, Y+63	; 0x3f
    8dc2:	6f 97       	sbiw	r28, 0x1f	; 31
    8dc4:	32 97       	sbiw	r30, 0x02	; 2
    8dc6:	61 f4       	brne	.+24     	; 0x8de0 <_printf_fn+0x7fa>
    8dc8:	51 01       	movw	r10, r2
    8dca:	f2 e0       	ldi	r31, 0x02	; 2
    8dcc:	af 0e       	add	r10, r31
    8dce:	b1 1c       	adc	r11, r1
    8dd0:	d1 01       	movw	r26, r2
    8dd2:	8d 91       	ld	r24, X+
    8dd4:	9c 91       	ld	r25, X
    8dd6:	65 96       	adiw	r28, 0x15	; 21
    8dd8:	9f af       	std	Y+63, r25	; 0x3f
    8dda:	8e af       	std	Y+62, r24	; 0x3e
    8ddc:	65 97       	sbiw	r28, 0x15	; 21
    8dde:	c5 cd       	rjmp	.-1142   	; 0x896a <_printf_fn+0x384>
    8de0:	6f 96       	adiw	r28, 0x1f	; 31
    8de2:	2e ad       	ldd	r18, Y+62	; 0x3e
    8de4:	3f ad       	ldd	r19, Y+63	; 0x3f
    8de6:	6f 97       	sbiw	r28, 0x1f	; 31
    8de8:	24 30       	cpi	r18, 0x04	; 4
    8dea:	31 05       	cpc	r19, r1
    8dec:	09 f0       	breq	.+2      	; 0x8df0 <_printf_fn+0x80a>
    8dee:	fe cd       	rjmp	.-1028   	; 0x89ec <_printf_fn+0x406>
    8df0:	51 01       	movw	r10, r2
    8df2:	f4 e0       	ldi	r31, 0x04	; 4
    8df4:	af 0e       	add	r10, r31
    8df6:	b1 1c       	adc	r11, r1
    8df8:	f1 01       	movw	r30, r2
    8dfa:	80 81       	ld	r24, Z
    8dfc:	91 81       	ldd	r25, Z+1	; 0x01
    8dfe:	a2 81       	ldd	r26, Z+2	; 0x02
    8e00:	b3 81       	ldd	r27, Z+3	; 0x03
    8e02:	2f 96       	adiw	r28, 0x0f	; 15
    8e04:	8c af       	std	Y+60, r24	; 0x3c
    8e06:	9d af       	std	Y+61, r25	; 0x3d
    8e08:	ae af       	std	Y+62, r26	; 0x3e
    8e0a:	bf af       	std	Y+63, r27	; 0x3f
    8e0c:	2f 97       	sbiw	r28, 0x0f	; 15
    8e0e:	dc cd       	rjmp	.-1096   	; 0x89c8 <_printf_fn+0x3e2>
    8e10:	c5 59       	subi	r28, 0x95	; 149
    8e12:	df 4f       	sbci	r29, 0xFF	; 255
    8e14:	e2 e1       	ldi	r30, 0x12	; 18
    8e16:	0c 94 fc e5 	jmp	0x1cbf8	; 0x1cbf8 <__epilogue_restores__>

00008e1a <vsnprintf_P>:
    8e1a:	a8 e0       	ldi	r26, 0x08	; 8
    8e1c:	b0 e0       	ldi	r27, 0x00	; 0
    8e1e:	e3 e1       	ldi	r30, 0x13	; 19
    8e20:	f7 e4       	ldi	r31, 0x47	; 71
    8e22:	0c 94 ec e5 	jmp	0x1cbd8	; 0x1cbd8 <__prologue_saves__+0x18>
    8e26:	7c 01       	movw	r14, r24
    8e28:	cb 01       	movw	r24, r22
    8e2a:	64 2f       	mov	r22, r20
    8e2c:	a9 01       	movw	r20, r18
    8e2e:	98 01       	movw	r18, r16
    8e30:	f7 01       	movw	r30, r14
    8e32:	10 82       	st	Z, r1
    8e34:	ea e1       	ldi	r30, 0x1A	; 26
    8e36:	ff e3       	ldi	r31, 0x3F	; 63
    8e38:	fa 83       	std	Y+2, r31	; 0x02
    8e3a:	e9 83       	std	Y+1, r30	; 0x01
    8e3c:	9e 83       	std	Y+6, r25	; 0x06
    8e3e:	8d 83       	std	Y+5, r24	; 0x05
    8e40:	18 86       	std	Y+8, r1	; 0x08
    8e42:	1f 82       	std	Y+7, r1	; 0x07
    8e44:	fc 82       	std	Y+4, r15	; 0x04
    8e46:	eb 82       	std	Y+3, r14	; 0x03
    8e48:	ce 01       	movw	r24, r28
    8e4a:	01 96       	adiw	r24, 0x01	; 1
    8e4c:	cc db       	rcall	.-2152   	; 0x85e6 <_printf_fn>
    8e4e:	f7 01       	movw	r30, r14
    8e50:	01 90       	ld	r0, Z+
    8e52:	00 20       	and	r0, r0
    8e54:	e9 f7       	brne	.-6      	; 0x8e50 <vsnprintf_P+0x36>
    8e56:	cf 01       	movw	r24, r30
    8e58:	01 97       	sbiw	r24, 0x01	; 1
    8e5a:	8e 19       	sub	r24, r14
    8e5c:	9f 09       	sbc	r25, r15
    8e5e:	28 96       	adiw	r28, 0x08	; 8
    8e60:	e6 e0       	ldi	r30, 0x06	; 6
    8e62:	0c 94 08 e6 	jmp	0x1cc10	; 0x1cc10 <__epilogue_restores__+0x18>

00008e66 <snprintf_P>:
    8e66:	a0 e0       	ldi	r26, 0x00	; 0
    8e68:	b0 e0       	ldi	r27, 0x00	; 0
    8e6a:	e9 e3       	ldi	r30, 0x39	; 57
    8e6c:	f7 e4       	ldi	r31, 0x47	; 71
    8e6e:	0c 94 ee e5 	jmp	0x1cbdc	; 0x1cbdc <__prologue_saves__+0x1c>
    8e72:	8e 01       	movw	r16, r28
    8e74:	02 5f       	subi	r16, 0xF2	; 242
    8e76:	1f 4f       	sbci	r17, 0xFF	; 255
    8e78:	2b 85       	ldd	r18, Y+11	; 0x0b
    8e7a:	3c 85       	ldd	r19, Y+12	; 0x0c
    8e7c:	4d 85       	ldd	r20, Y+13	; 0x0d
    8e7e:	69 85       	ldd	r22, Y+9	; 0x09
    8e80:	7a 85       	ldd	r23, Y+10	; 0x0a
    8e82:	8f 81       	ldd	r24, Y+7	; 0x07
    8e84:	98 85       	ldd	r25, Y+8	; 0x08
    8e86:	c9 df       	rcall	.-110    	; 0x8e1a <vsnprintf_P>
    8e88:	e4 e0       	ldi	r30, 0x04	; 4
    8e8a:	0c 94 0a e6 	jmp	0x1cc14	; 0x1cc14 <__epilogue_restores__+0x1c>

00008e8e <sprintf_P>:
    8e8e:	a0 e0       	ldi	r26, 0x00	; 0
    8e90:	b0 e0       	ldi	r27, 0x00	; 0
    8e92:	ed e4       	ldi	r30, 0x4D	; 77
    8e94:	f7 e4       	ldi	r31, 0x47	; 71
    8e96:	0c 94 ee e5 	jmp	0x1cbdc	; 0x1cbdc <__prologue_saves__+0x1c>
    8e9a:	8e 01       	movw	r16, r28
    8e9c:	04 5f       	subi	r16, 0xF4	; 244
    8e9e:	1f 4f       	sbci	r17, 0xFF	; 255
    8ea0:	29 85       	ldd	r18, Y+9	; 0x09
    8ea2:	3a 85       	ldd	r19, Y+10	; 0x0a
    8ea4:	4b 85       	ldd	r20, Y+11	; 0x0b
    8ea6:	60 e0       	ldi	r22, 0x00	; 0
    8ea8:	74 e0       	ldi	r23, 0x04	; 4
    8eaa:	8f 81       	ldd	r24, Y+7	; 0x07
    8eac:	98 85       	ldd	r25, Y+8	; 0x08
    8eae:	b5 df       	rcall	.-150    	; 0x8e1a <vsnprintf_P>
    8eb0:	e4 e0       	ldi	r30, 0x04	; 4
    8eb2:	0c 94 0a e6 	jmp	0x1cc14	; 0x1cc14 <__epilogue_restores__+0x1c>

00008eb6 <printf_P>:
/// @return size of printed string
/// TODO create a devprintf using an array of function prointers ?
MEMSPACE 
int 
printf_P(__memx const char *format, ...)
{
    8eb6:	a8 e0       	ldi	r26, 0x08	; 8
    8eb8:	b0 e0       	ldi	r27, 0x00	; 0
    8eba:	e1 e6       	ldi	r30, 0x61	; 97
    8ebc:	f7 e4       	ldi	r31, 0x47	; 71
    8ebe:	0c 94 f0 e5 	jmp	0x1cbe0	; 0x1cbe0 <__prologue_saves__+0x20>
    8ec2:	9e 01       	movw	r18, r28
    8ec4:	23 5f       	subi	r18, 0xF3	; 243
    8ec6:	3f 4f       	sbci	r19, 0xFF	; 255
    8ec8:	f9 01       	movw	r30, r18
    8eca:	41 91       	ld	r20, Z+
    8ecc:	51 91       	ld	r21, Z+
    8ece:	61 91       	ld	r22, Z+
    8ed0:	9f 01       	movw	r18, r30
    printf_t fn;
    va_list va;

    fn.put = _putc_fn;
    8ed2:	83 e3       	ldi	r24, 0x33	; 51
    8ed4:	9f e3       	ldi	r25, 0x3F	; 63
    8ed6:	9a 83       	std	Y+2, r25	; 0x02
    8ed8:	89 83       	std	Y+1, r24	; 0x01
    fn.sent = 0;
    8eda:	18 86       	std	Y+8, r1	; 0x08
    8edc:	1f 82       	std	Y+7, r1	; 0x07

    va_start(va, format);
    _printf_fn(&fn, format, va);
    8ede:	ce 01       	movw	r24, r28
    8ee0:	01 96       	adiw	r24, 0x01	; 1
    8ee2:	81 db       	rcall	.-2302   	; 0x85e6 <_printf_fn>
    va_end(va);

    return ((int)fn.sent);
}
    8ee4:	8f 81       	ldd	r24, Y+7	; 0x07
    8ee6:	98 85       	ldd	r25, Y+8	; 0x08
    8ee8:	28 96       	adiw	r28, 0x08	; 8
    8eea:	e2 e0       	ldi	r30, 0x02	; 2
    8eec:	0c 94 0c e6 	jmp	0x1cc18	; 0x1cc18 <__epilogue_restores__+0x20>

00008ef0 <atodigit>:
    if(sign)
        num = -num;
    if(endptr)
        *endptr = (char *) nptr;
    return(num);
}
    8ef0:	9c 01       	movw	r18, r24
    8ef2:	20 53       	subi	r18, 0x30	; 48
    8ef4:	31 09       	sbc	r19, r1
    8ef6:	2a 30       	cpi	r18, 0x0A	; 10
    8ef8:	31 05       	cpc	r19, r1
    8efa:	10 f4       	brcc	.+4      	; 0x8f00 <atodigit+0x10>
    8efc:	c9 01       	movw	r24, r18
    8efe:	10 c0       	rjmp	.+32     	; 0x8f20 <atodigit+0x30>
    8f00:	9c 01       	movw	r18, r24
    8f02:	21 54       	subi	r18, 0x41	; 65
    8f04:	31 09       	sbc	r19, r1
    8f06:	26 30       	cpi	r18, 0x06	; 6
    8f08:	31 05       	cpc	r19, r1
    8f0a:	10 f4       	brcc	.+4      	; 0x8f10 <atodigit+0x20>
    8f0c:	c7 97       	sbiw	r24, 0x37	; 55
    8f0e:	08 c0       	rjmp	.+16     	; 0x8f20 <atodigit+0x30>
    8f10:	9c 01       	movw	r18, r24
    8f12:	21 56       	subi	r18, 0x61	; 97
    8f14:	31 09       	sbc	r19, r1
    8f16:	26 30       	cpi	r18, 0x06	; 6
    8f18:	31 05       	cpc	r19, r1
    8f1a:	28 f4       	brcc	.+10     	; 0x8f26 <atodigit+0x36>
    8f1c:	87 55       	subi	r24, 0x57	; 87
    8f1e:	91 09       	sbc	r25, r1
    8f20:	86 17       	cp	r24, r22
    8f22:	97 07       	cpc	r25, r23
    8f24:	14 f0       	brlt	.+4      	; 0x8f2a <atodigit+0x3a>
    8f26:	8f ef       	ldi	r24, 0xFF	; 255
    8f28:	9f ef       	ldi	r25, 0xFF	; 255
    8f2a:	08 95       	ret

00008f2c <strtol>:
    8f2c:	a0 e0       	ldi	r26, 0x00	; 0
    8f2e:	b0 e0       	ldi	r27, 0x00	; 0
    8f30:	ec e9       	ldi	r30, 0x9C	; 156
    8f32:	f7 e4       	ldi	r31, 0x47	; 71
    8f34:	0c 94 e0 e5 	jmp	0x1cbc0	; 0x1cbc0 <__prologue_saves__>
    8f38:	2b 01       	movw	r4, r22
    8f3a:	8a 01       	movw	r16, r20
    8f3c:	ec 01       	movw	r28, r24
    8f3e:	28 81       	ld	r18, Y
    8f40:	01 96       	adiw	r24, 0x01	; 1
    8f42:	20 32       	cpi	r18, 0x20	; 32
    8f44:	d9 f3       	breq	.-10     	; 0x8f3c <strtol+0x10>
    8f46:	29 30       	cpi	r18, 0x09	; 9
    8f48:	c9 f3       	breq	.-14     	; 0x8f3c <strtol+0x10>
    8f4a:	2d 32       	cpi	r18, 0x2D	; 45
    8f4c:	29 f4       	brne	.+10     	; 0x8f58 <strtol+0x2c>
    8f4e:	ec 01       	movw	r28, r24
    8f50:	66 24       	eor	r6, r6
    8f52:	63 94       	inc	r6
    8f54:	71 2c       	mov	r7, r1
    8f56:	05 c0       	rjmp	.+10     	; 0x8f62 <strtol+0x36>
    8f58:	2b 32       	cpi	r18, 0x2B	; 43
    8f5a:	09 f4       	brne	.+2      	; 0x8f5e <strtol+0x32>
    8f5c:	ec 01       	movw	r28, r24
    8f5e:	61 2c       	mov	r6, r1
    8f60:	71 2c       	mov	r7, r1
    8f62:	9e 01       	movw	r18, r28
    8f64:	2f 5f       	subi	r18, 0xFF	; 255
    8f66:	3f 4f       	sbci	r19, 0xFF	; 255
    8f68:	88 81       	ld	r24, Y
    8f6a:	80 33       	cpi	r24, 0x30	; 48
    8f6c:	11 f4       	brne	.+4      	; 0x8f72 <strtol+0x46>
    8f6e:	e9 01       	movw	r28, r18
    8f70:	f8 cf       	rjmp	.-16     	; 0x8f62 <strtol+0x36>
    8f72:	c1 2c       	mov	r12, r1
    8f74:	d1 2c       	mov	r13, r1
    8f76:	76 01       	movw	r14, r12
    8f78:	48 01       	movw	r8, r16
    8f7a:	01 2e       	mov	r0, r17
    8f7c:	00 0c       	add	r0, r0
    8f7e:	aa 08       	sbc	r10, r10
    8f80:	bb 08       	sbc	r11, r11
    8f82:	3c 2e       	mov	r3, r28
    8f84:	2d 2e       	mov	r2, r29
    8f86:	89 91       	ld	r24, Y+
    8f88:	88 23       	and	r24, r24
    8f8a:	31 f0       	breq	.+12     	; 0x8f98 <strtol+0x6c>
    8f8c:	b8 01       	movw	r22, r16
    8f8e:	90 e0       	ldi	r25, 0x00	; 0
    8f90:	af df       	rcall	.-162    	; 0x8ef0 <atodigit>
    8f92:	fc 01       	movw	r30, r24
    8f94:	97 ff       	sbrs	r25, 7
    8f96:	0c c0       	rjmp	.+24     	; 0x8fb0 <strtol+0x84>
    8f98:	61 14       	cp	r6, r1
    8f9a:	71 04       	cpc	r7, r1
    8f9c:	c1 f0       	breq	.+48     	; 0x8fce <strtol+0xa2>
    8f9e:	f0 94       	com	r15
    8fa0:	e0 94       	com	r14
    8fa2:	d0 94       	com	r13
    8fa4:	c0 94       	com	r12
    8fa6:	c1 1c       	adc	r12, r1
    8fa8:	d1 1c       	adc	r13, r1
    8faa:	e1 1c       	adc	r14, r1
    8fac:	f1 1c       	adc	r15, r1
    8fae:	0f c0       	rjmp	.+30     	; 0x8fce <strtol+0xa2>
    8fb0:	a5 01       	movw	r20, r10
    8fb2:	94 01       	movw	r18, r8
    8fb4:	c7 01       	movw	r24, r14
    8fb6:	b6 01       	movw	r22, r12
    8fb8:	0e 94 1c e5 	call	0x1ca38	; 0x1ca38 <__mulsi3>
    8fbc:	6f 01       	movw	r12, r30
    8fbe:	ff 0f       	add	r31, r31
    8fc0:	ee 08       	sbc	r14, r14
    8fc2:	ff 08       	sbc	r15, r15
    8fc4:	c6 0e       	add	r12, r22
    8fc6:	d7 1e       	adc	r13, r23
    8fc8:	e8 1e       	adc	r14, r24
    8fca:	f9 1e       	adc	r15, r25
    8fcc:	da cf       	rjmp	.-76     	; 0x8f82 <strtol+0x56>
    8fce:	41 14       	cp	r4, r1
    8fd0:	51 04       	cpc	r5, r1
    8fd2:	19 f0       	breq	.+6      	; 0x8fda <strtol+0xae>
    8fd4:	f2 01       	movw	r30, r4
    8fd6:	30 82       	st	Z, r3
    8fd8:	21 82       	std	Z+1, r2	; 0x01
    8fda:	c7 01       	movw	r24, r14
    8fdc:	b6 01       	movw	r22, r12
    8fde:	cd b7       	in	r28, 0x3d	; 61
    8fe0:	de b7       	in	r29, 0x3e	; 62
    8fe2:	e2 e1       	ldi	r30, 0x12	; 18
    8fe4:	0c 94 fc e5 	jmp	0x1cbf8	; 0x1cbf8 <__epilogue_restores__>

00008fe8 <atoi>:
MEMSPACE 
int
atoi(const char *str)
{
    unsigned long num;
    num = strtol(str, NULL, 10);
    8fe8:	4a e0       	ldi	r20, 0x0A	; 10
    8fea:	50 e0       	ldi	r21, 0x00	; 0
    8fec:	60 e0       	ldi	r22, 0x00	; 0
    8fee:	70 e0       	ldi	r23, 0x00	; 0
    8ff0:	9d df       	rcall	.-198    	; 0x8f2c <strtol>
    return((int)num);
}
    8ff2:	cb 01       	movw	r24, r22
    8ff4:	08 95       	ret

00008ff6 <atol>:
MEMSPACE 
long
atol(const char *str)
{
    unsigned long num;
    num = strtol(str, NULL, 10);
    8ff6:	4a e0       	ldi	r20, 0x0A	; 10
    8ff8:	50 e0       	ldi	r21, 0x00	; 0
    8ffa:	60 e0       	ldi	r22, 0x00	; 0
    8ffc:	70 e0       	ldi	r23, 0x00	; 0
    8ffe:	96 cf       	rjmp	.-212    	; 0x8f2c <strtol>
    return(num);
}
    9000:	08 95       	ret

00009002 <ld_dword>:
#endif
		if (res != FR_OK) ABORT(fs, res);
	}

	LEAVE_FF(fs, res);
}
    9002:	fc 01       	movw	r30, r24
    9004:	62 81       	ldd	r22, Z+2	; 0x02
    9006:	73 81       	ldd	r23, Z+3	; 0x03
    9008:	cb 01       	movw	r24, r22
    900a:	a0 e0       	ldi	r26, 0x00	; 0
    900c:	b0 e0       	ldi	r27, 0x00	; 0
    900e:	ba 2f       	mov	r27, r26
    9010:	a9 2f       	mov	r26, r25
    9012:	98 2f       	mov	r25, r24
    9014:	88 27       	eor	r24, r24
    9016:	21 81       	ldd	r18, Z+1	; 0x01
    9018:	82 2b       	or	r24, r18
    901a:	ba 2f       	mov	r27, r26
    901c:	a9 2f       	mov	r26, r25
    901e:	98 2f       	mov	r25, r24
    9020:	88 27       	eor	r24, r24
    9022:	20 81       	ld	r18, Z
    9024:	bc 01       	movw	r22, r24
    9026:	cd 01       	movw	r24, r26
    9028:	62 2b       	or	r22, r18
    902a:	08 95       	ret

0000902c <st_dword>:
    902c:	fc 01       	movw	r30, r24
    902e:	40 83       	st	Z, r20
    9030:	51 83       	std	Z+1, r21	; 0x01
    9032:	62 83       	std	Z+2, r22	; 0x02
    9034:	73 83       	std	Z+3, r23	; 0x03
    9036:	08 95       	ret

00009038 <mem_set>:
    9038:	48 0f       	add	r20, r24
    903a:	59 1f       	adc	r21, r25
    903c:	fc 01       	movw	r30, r24
    903e:	61 93       	st	Z+, r22
    9040:	cf 01       	movw	r24, r30
    9042:	e4 17       	cp	r30, r20
    9044:	f5 07       	cpc	r31, r21
    9046:	d1 f7       	brne	.-12     	; 0x903c <mem_set+0x4>
    9048:	08 95       	ret

0000904a <mem_cmp>:
    904a:	dc 01       	movw	r26, r24
    904c:	fb 01       	movw	r30, r22
    904e:	2d 91       	ld	r18, X+
    9050:	81 91       	ld	r24, Z+
    9052:	30 e0       	ldi	r19, 0x00	; 0
    9054:	b9 01       	movw	r22, r18
    9056:	68 1b       	sub	r22, r24
    9058:	71 09       	sbc	r23, r1
    905a:	cb 01       	movw	r24, r22
    905c:	41 50       	subi	r20, 0x01	; 1
    905e:	51 09       	sbc	r21, r1
    9060:	11 f0       	breq	.+4      	; 0x9066 <mem_cmp+0x1c>
    9062:	00 97       	sbiw	r24, 0x00	; 0
    9064:	a1 f3       	breq	.-24     	; 0x904e <mem_cmp+0x4>
    9066:	08 95       	ret

00009068 <tchar2uni>:
    9068:	0f 93       	push	r16
    906a:	1f 93       	push	r17
    906c:	fc 01       	movw	r30, r24
    906e:	a0 81       	ld	r26, Z
    9070:	b1 81       	ldd	r27, Z+1	; 0x01
    9072:	fd 01       	movw	r30, r26
    9074:	31 96       	adiw	r30, 0x01	; 1
    9076:	4c 91       	ld	r20, X
    9078:	47 fd       	sbrc	r20, 7
    907a:	04 c0       	rjmp	.+8      	; 0x9084 <tchar2uni+0x1c>
    907c:	50 e0       	ldi	r21, 0x00	; 0
    907e:	60 e0       	ldi	r22, 0x00	; 0
    9080:	70 e0       	ldi	r23, 0x00	; 0
    9082:	68 c0       	rjmp	.+208    	; 0x9154 <tchar2uni+0xec>
    9084:	24 2f       	mov	r18, r20
    9086:	20 7e       	andi	r18, 0xE0	; 224
    9088:	20 3c       	cpi	r18, 0xC0	; 192
    908a:	39 f4       	brne	.+14     	; 0x909a <tchar2uni+0x32>
    908c:	4f 71       	andi	r20, 0x1F	; 31
    908e:	50 e0       	ldi	r21, 0x00	; 0
    9090:	60 e0       	ldi	r22, 0x00	; 0
    9092:	70 e0       	ldi	r23, 0x00	; 0
    9094:	21 e0       	ldi	r18, 0x01	; 1
    9096:	30 e0       	ldi	r19, 0x00	; 0
    9098:	16 c0       	rjmp	.+44     	; 0x90c6 <tchar2uni+0x5e>
    909a:	24 2f       	mov	r18, r20
    909c:	20 7f       	andi	r18, 0xF0	; 240
    909e:	20 3e       	cpi	r18, 0xE0	; 224
    90a0:	39 f4       	brne	.+14     	; 0x90b0 <tchar2uni+0x48>
    90a2:	4f 70       	andi	r20, 0x0F	; 15
    90a4:	50 e0       	ldi	r21, 0x00	; 0
    90a6:	60 e0       	ldi	r22, 0x00	; 0
    90a8:	70 e0       	ldi	r23, 0x00	; 0
    90aa:	22 e0       	ldi	r18, 0x02	; 2
    90ac:	30 e0       	ldi	r19, 0x00	; 0
    90ae:	0b c0       	rjmp	.+22     	; 0x90c6 <tchar2uni+0x5e>
    90b0:	24 2f       	mov	r18, r20
    90b2:	28 7f       	andi	r18, 0xF8	; 248
    90b4:	20 3f       	cpi	r18, 0xF0	; 240
    90b6:	09 f0       	breq	.+2      	; 0x90ba <tchar2uni+0x52>
    90b8:	54 c0       	rjmp	.+168    	; 0x9162 <tchar2uni+0xfa>
    90ba:	47 70       	andi	r20, 0x07	; 7
    90bc:	50 e0       	ldi	r21, 0x00	; 0
    90be:	60 e0       	ldi	r22, 0x00	; 0
    90c0:	70 e0       	ldi	r23, 0x00	; 0
    90c2:	23 e0       	ldi	r18, 0x03	; 3
    90c4:	30 e0       	ldi	r19, 0x00	; 0
    90c6:	31 96       	adiw	r30, 0x01	; 1
    90c8:	df 01       	movw	r26, r30
    90ca:	11 97       	sbiw	r26, 0x01	; 1
    90cc:	ac 91       	ld	r26, X
    90ce:	ba 2f       	mov	r27, r26
    90d0:	b0 7c       	andi	r27, 0xC0	; 192
    90d2:	b0 38       	cpi	r27, 0x80	; 128
    90d4:	09 f0       	breq	.+2      	; 0x90d8 <tchar2uni+0x70>
    90d6:	45 c0       	rjmp	.+138    	; 0x9162 <tchar2uni+0xfa>
    90d8:	b6 e0       	ldi	r27, 0x06	; 6
    90da:	44 0f       	add	r20, r20
    90dc:	55 1f       	adc	r21, r21
    90de:	66 1f       	adc	r22, r22
    90e0:	77 1f       	adc	r23, r23
    90e2:	ba 95       	dec	r27
    90e4:	d1 f7       	brne	.-12     	; 0x90da <tchar2uni+0x72>
    90e6:	af 73       	andi	r26, 0x3F	; 63
    90e8:	4a 2b       	or	r20, r26
    90ea:	21 50       	subi	r18, 0x01	; 1
    90ec:	31 09       	sbc	r19, r1
    90ee:	59 f7       	brne	.-42     	; 0x90c6 <tchar2uni+0x5e>
    90f0:	8a 01       	movw	r16, r20
    90f2:	9b 01       	movw	r18, r22
    90f4:	00 58       	subi	r16, 0x80	; 128
    90f6:	11 09       	sbc	r17, r1
    90f8:	21 09       	sbc	r18, r1
    90fa:	31 09       	sbc	r19, r1
    90fc:	00 38       	cpi	r16, 0x80	; 128
    90fe:	1f 4f       	sbci	r17, 0xFF	; 255
    9100:	20 41       	sbci	r18, 0x10	; 16
    9102:	31 05       	cpc	r19, r1
    9104:	70 f5       	brcc	.+92     	; 0x9162 <tchar2uni+0xfa>
    9106:	8a 01       	movw	r16, r20
    9108:	9b 01       	movw	r18, r22
    910a:	18 5d       	subi	r17, 0xD8	; 216
    910c:	21 09       	sbc	r18, r1
    910e:	31 09       	sbc	r19, r1
    9110:	01 15       	cp	r16, r1
    9112:	18 40       	sbci	r17, 0x08	; 8
    9114:	21 05       	cpc	r18, r1
    9116:	31 05       	cpc	r19, r1
    9118:	20 f1       	brcs	.+72     	; 0x9162 <tchar2uni+0xfa>
    911a:	41 15       	cp	r20, r1
    911c:	51 05       	cpc	r21, r1
    911e:	21 e0       	ldi	r18, 0x01	; 1
    9120:	62 07       	cpc	r22, r18
    9122:	71 05       	cpc	r23, r1
    9124:	b8 f0       	brcs	.+46     	; 0x9154 <tchar2uni+0xec>
    9126:	8a 01       	movw	r16, r20
    9128:	9b 01       	movw	r18, r22
    912a:	21 50       	subi	r18, 0x01	; 1
    912c:	31 09       	sbc	r19, r1
    912e:	a6 e0       	ldi	r26, 0x06	; 6
    9130:	00 0f       	add	r16, r16
    9132:	11 1f       	adc	r17, r17
    9134:	22 1f       	adc	r18, r18
    9136:	33 1f       	adc	r19, r19
    9138:	aa 95       	dec	r26
    913a:	d1 f7       	brne	.-12     	; 0x9130 <tchar2uni+0xc8>
    913c:	00 27       	eor	r16, r16
    913e:	11 27       	eor	r17, r17
    9140:	33 70       	andi	r19, 0x03	; 3
    9142:	53 70       	andi	r21, 0x03	; 3
    9144:	66 27       	eor	r22, r22
    9146:	77 27       	eor	r23, r23
    9148:	5c 6d       	ori	r21, 0xDC	; 220
    914a:	78 6d       	ori	r23, 0xD8	; 216
    914c:	40 2b       	or	r20, r16
    914e:	51 2b       	or	r21, r17
    9150:	62 2b       	or	r22, r18
    9152:	73 2b       	or	r23, r19
    9154:	dc 01       	movw	r26, r24
    9156:	ed 93       	st	X+, r30
    9158:	fc 93       	st	X, r31
    915a:	34 2f       	mov	r19, r20
    915c:	25 2f       	mov	r18, r21
    915e:	cb 01       	movw	r24, r22
    9160:	04 c0       	rjmp	.+8      	; 0x916a <tchar2uni+0x102>
    9162:	3f ef       	ldi	r19, 0xFF	; 255
    9164:	2f ef       	ldi	r18, 0xFF	; 255
    9166:	8f ef       	ldi	r24, 0xFF	; 255
    9168:	9f ef       	ldi	r25, 0xFF	; 255
    916a:	63 2f       	mov	r22, r19
    916c:	72 2f       	mov	r23, r18
    916e:	1f 91       	pop	r17
    9170:	0f 91       	pop	r16
    9172:	08 95       	ret

00009174 <clst2sect>:
    9174:	0f 93       	push	r16
    9176:	1f 93       	push	r17
    9178:	fc 01       	movw	r30, r24
    917a:	9a 01       	movw	r18, r20
    917c:	ab 01       	movw	r20, r22
    917e:	22 50       	subi	r18, 0x02	; 2
    9180:	31 09       	sbc	r19, r1
    9182:	41 09       	sbc	r20, r1
    9184:	51 09       	sbc	r21, r1
    9186:	81 8d       	ldd	r24, Z+25	; 0x19
    9188:	92 8d       	ldd	r25, Z+26	; 0x1a
    918a:	a3 8d       	ldd	r26, Z+27	; 0x1b
    918c:	b4 8d       	ldd	r27, Z+28	; 0x1c
    918e:	02 97       	sbiw	r24, 0x02	; 2
    9190:	a1 09       	sbc	r26, r1
    9192:	b1 09       	sbc	r27, r1
    9194:	28 17       	cp	r18, r24
    9196:	39 07       	cpc	r19, r25
    9198:	4a 07       	cpc	r20, r26
    919a:	5b 07       	cpc	r21, r27
    919c:	68 f4       	brcc	.+26     	; 0x91b8 <clst2sect+0x44>
    919e:	a1 85       	ldd	r26, Z+9	; 0x09
    91a0:	b2 85       	ldd	r27, Z+10	; 0x0a
    91a2:	0e 94 c0 e5 	call	0x1cb80	; 0x1cb80 <__muluhisi3>
    91a6:	05 a5       	ldd	r16, Z+45	; 0x2d
    91a8:	16 a5       	ldd	r17, Z+46	; 0x2e
    91aa:	27 a5       	ldd	r18, Z+47	; 0x2f
    91ac:	30 a9       	ldd	r19, Z+48	; 0x30
    91ae:	60 0f       	add	r22, r16
    91b0:	71 1f       	adc	r23, r17
    91b2:	82 1f       	adc	r24, r18
    91b4:	93 1f       	adc	r25, r19
    91b6:	03 c0       	rjmp	.+6      	; 0x91be <clst2sect+0x4a>
    91b8:	60 e0       	ldi	r22, 0x00	; 0
    91ba:	70 e0       	ldi	r23, 0x00	; 0
    91bc:	cb 01       	movw	r24, r22
    91be:	1f 91       	pop	r17
    91c0:	0f 91       	pop	r16
    91c2:	08 95       	ret

000091c4 <clmt_clust>:
    91c4:	cf 93       	push	r28
    91c6:	df 93       	push	r29
    91c8:	fc 01       	movw	r30, r24
    91ca:	c2 a1       	ldd	r28, Z+34	; 0x22
    91cc:	d3 a1       	ldd	r29, Z+35	; 0x23
    91ce:	24 96       	adiw	r28, 0x04	; 4
    91d0:	cb 01       	movw	r24, r22
    91d2:	ba 01       	movw	r22, r20
    91d4:	29 e0       	ldi	r18, 0x09	; 9
    91d6:	96 95       	lsr	r25
    91d8:	87 95       	ror	r24
    91da:	77 95       	ror	r23
    91dc:	67 95       	ror	r22
    91de:	2a 95       	dec	r18
    91e0:	d1 f7       	brne	.-12     	; 0x91d6 <clmt_clust+0x12>
    91e2:	01 90       	ld	r0, Z+
    91e4:	f0 81       	ld	r31, Z
    91e6:	e0 2d       	mov	r30, r0
    91e8:	21 85       	ldd	r18, Z+9	; 0x09
    91ea:	32 85       	ldd	r19, Z+10	; 0x0a
    91ec:	40 e0       	ldi	r20, 0x00	; 0
    91ee:	50 e0       	ldi	r21, 0x00	; 0
    91f0:	0e 94 5e e5 	call	0x1cabc	; 0x1cabc <__udivmodsi4>
    91f4:	88 81       	ld	r24, Y
    91f6:	99 81       	ldd	r25, Y+1	; 0x01
    91f8:	aa 81       	ldd	r26, Y+2	; 0x02
    91fa:	bb 81       	ldd	r27, Y+3	; 0x03
    91fc:	00 97       	sbiw	r24, 0x00	; 0
    91fe:	a1 05       	cpc	r26, r1
    9200:	b1 05       	cpc	r27, r1
    9202:	b1 f0       	breq	.+44     	; 0x9230 <clmt_clust+0x6c>
    9204:	28 17       	cp	r18, r24
    9206:	39 07       	cpc	r19, r25
    9208:	4a 07       	cpc	r20, r26
    920a:	5b 07       	cpc	r21, r27
    920c:	30 f0       	brcs	.+12     	; 0x921a <clmt_clust+0x56>
    920e:	28 1b       	sub	r18, r24
    9210:	39 0b       	sbc	r19, r25
    9212:	4a 0b       	sbc	r20, r26
    9214:	5b 0b       	sbc	r21, r27
    9216:	28 96       	adiw	r28, 0x08	; 8
    9218:	ed cf       	rjmp	.-38     	; 0x91f4 <clmt_clust+0x30>
    921a:	8c 81       	ldd	r24, Y+4	; 0x04
    921c:	9d 81       	ldd	r25, Y+5	; 0x05
    921e:	ae 81       	ldd	r26, Y+6	; 0x06
    9220:	bf 81       	ldd	r27, Y+7	; 0x07
    9222:	bc 01       	movw	r22, r24
    9224:	cd 01       	movw	r24, r26
    9226:	62 0f       	add	r22, r18
    9228:	73 1f       	adc	r23, r19
    922a:	84 1f       	adc	r24, r20
    922c:	95 1f       	adc	r25, r21
    922e:	03 c0       	rjmp	.+6      	; 0x9236 <clmt_clust+0x72>
    9230:	60 e0       	ldi	r22, 0x00	; 0
    9232:	70 e0       	ldi	r23, 0x00	; 0
    9234:	cb 01       	movw	r24, r22
    9236:	df 91       	pop	r29
    9238:	cf 91       	pop	r28
    923a:	08 95       	ret

0000923c <sum_sfn>:
    923c:	fc 01       	movw	r30, r24
    923e:	9c 01       	movw	r18, r24
    9240:	25 5f       	subi	r18, 0xF5	; 245
    9242:	3f 4f       	sbci	r19, 0xFF	; 255
    9244:	80 e0       	ldi	r24, 0x00	; 0
    9246:	98 2f       	mov	r25, r24
    9248:	90 fb       	bst	r25, 0
    924a:	97 95       	ror	r25
    924c:	97 f9       	bld	r25, 7
    924e:	81 91       	ld	r24, Z+
    9250:	89 0f       	add	r24, r25
    9252:	e2 17       	cp	r30, r18
    9254:	f3 07       	cpc	r31, r19
    9256:	b9 f7       	brne	.-18     	; 0x9246 <sum_sfn+0xa>
    9258:	08 95       	ret

0000925a <get_ldnumber>:
    925a:	cf 93       	push	r28
    925c:	df 93       	push	r29
    925e:	dc 01       	movw	r26, r24
    9260:	ed 91       	ld	r30, X+
    9262:	fc 91       	ld	r31, X
    9264:	11 97       	sbiw	r26, 0x01	; 1
    9266:	30 97       	sbiw	r30, 0x00	; 0
    9268:	f9 f0       	breq	.+62     	; 0x92a8 <get_ldnumber+0x4e>
    926a:	9f 01       	movw	r18, r30
    926c:	2f 5f       	subi	r18, 0xFF	; 255
    926e:	3f 4f       	sbci	r19, 0xFF	; 255
    9270:	e9 01       	movw	r28, r18
    9272:	21 97       	sbiw	r28, 0x01	; 1
    9274:	88 81       	ld	r24, Y
    9276:	80 32       	cpi	r24, 0x20	; 32
    9278:	18 f0       	brcs	.+6      	; 0x9280 <get_ldnumber+0x26>
    927a:	8a 33       	cpi	r24, 0x3A	; 58
    927c:	b9 f7       	brne	.-18     	; 0x926c <get_ldnumber+0x12>
    927e:	04 c0       	rjmp	.+8      	; 0x9288 <get_ldnumber+0x2e>
    9280:	80 91 12 18 	lds	r24, 0x1812	; 0x801812 <CurrVol>
    9284:	90 e0       	ldi	r25, 0x00	; 0
    9286:	12 c0       	rjmp	.+36     	; 0x92ac <get_ldnumber+0x52>
    9288:	90 81       	ld	r25, Z
    928a:	80 ed       	ldi	r24, 0xD0	; 208
    928c:	89 0f       	add	r24, r25
    928e:	8a 30       	cpi	r24, 0x0A	; 10
    9290:	58 f4       	brcc	.+22     	; 0x92a8 <get_ldnumber+0x4e>
    9292:	32 96       	adiw	r30, 0x02	; 2
    9294:	2e 17       	cp	r18, r30
    9296:	3f 07       	cpc	r19, r31
    9298:	39 f4       	brne	.+14     	; 0x92a8 <get_ldnumber+0x4e>
    929a:	90 33       	cpi	r25, 0x30	; 48
    929c:	29 f4       	brne	.+10     	; 0x92a8 <get_ldnumber+0x4e>
    929e:	2d 93       	st	X+, r18
    92a0:	3c 93       	st	X, r19
    92a2:	80 e0       	ldi	r24, 0x00	; 0
    92a4:	90 e0       	ldi	r25, 0x00	; 0
    92a6:	02 c0       	rjmp	.+4      	; 0x92ac <get_ldnumber+0x52>
    92a8:	8f ef       	ldi	r24, 0xFF	; 255
    92aa:	9f ef       	ldi	r25, 0xFF	; 255
    92ac:	df 91       	pop	r29
    92ae:	cf 91       	pop	r28
    92b0:	08 95       	ret

000092b2 <validate>:
    92b2:	0f 93       	push	r16
    92b4:	1f 93       	push	r17
    92b6:	cf 93       	push	r28
    92b8:	df 93       	push	r29
    92ba:	ec 01       	movw	r28, r24
    92bc:	8b 01       	movw	r16, r22
    92be:	89 2b       	or	r24, r25
    92c0:	f9 f0       	breq	.+62     	; 0x9300 <validate+0x4e>
    92c2:	e8 81       	ld	r30, Y
    92c4:	f9 81       	ldd	r31, Y+1	; 0x01
    92c6:	30 97       	sbiw	r30, 0x00	; 0
    92c8:	d9 f0       	breq	.+54     	; 0x9300 <validate+0x4e>
    92ca:	80 81       	ld	r24, Z
    92cc:	88 23       	and	r24, r24
    92ce:	c1 f0       	breq	.+48     	; 0x9300 <validate+0x4e>
    92d0:	2a 81       	ldd	r18, Y+2	; 0x02
    92d2:	3b 81       	ldd	r19, Y+3	; 0x03
    92d4:	85 81       	ldd	r24, Z+5	; 0x05
    92d6:	96 81       	ldd	r25, Z+6	; 0x06
    92d8:	28 17       	cp	r18, r24
    92da:	39 07       	cpc	r19, r25
    92dc:	89 f4       	brne	.+34     	; 0x9300 <validate+0x4e>
    92de:	81 81       	ldd	r24, Z+1	; 0x01
    92e0:	0e 94 74 6b 	call	0xd6e8	; 0xd6e8 <disk_status>
    92e4:	80 fd       	sbrc	r24, 0
    92e6:	0c c0       	rjmp	.+24     	; 0x9300 <validate+0x4e>
    92e8:	28 81       	ld	r18, Y
    92ea:	39 81       	ldd	r19, Y+1	; 0x01
    92ec:	80 e0       	ldi	r24, 0x00	; 0
    92ee:	90 e0       	ldi	r25, 0x00	; 0
    92f0:	f8 01       	movw	r30, r16
    92f2:	31 83       	std	Z+1, r19	; 0x01
    92f4:	20 83       	st	Z, r18
    92f6:	df 91       	pop	r29
    92f8:	cf 91       	pop	r28
    92fa:	1f 91       	pop	r17
    92fc:	0f 91       	pop	r16
    92fe:	08 95       	ret
    9300:	89 e0       	ldi	r24, 0x09	; 9
    9302:	90 e0       	ldi	r25, 0x00	; 0
    9304:	20 e0       	ldi	r18, 0x00	; 0
    9306:	30 e0       	ldi	r19, 0x00	; 0
    9308:	f3 cf       	rjmp	.-26     	; 0x92f0 <validate+0x3e>

0000930a <mem_cpy.part.0>:
    930a:	fb 01       	movw	r30, r22
    930c:	48 0f       	add	r20, r24
    930e:	59 1f       	adc	r21, r25
    9310:	21 91       	ld	r18, Z+
    9312:	dc 01       	movw	r26, r24
    9314:	2d 93       	st	X+, r18
    9316:	cd 01       	movw	r24, r26
    9318:	a4 17       	cp	r26, r20
    931a:	b5 07       	cpc	r27, r21
    931c:	c9 f7       	brne	.-14     	; 0x9310 <mem_cpy.part.0+0x6>
    931e:	08 95       	ret

00009320 <put_utf>:
    9320:	0f 93       	push	r16
    9322:	1f 93       	push	r17
    9324:	fa 01       	movw	r30, r20
    9326:	60 38       	cpi	r22, 0x80	; 128
    9328:	71 05       	cpc	r23, r1
    932a:	81 05       	cpc	r24, r1
    932c:	91 05       	cpc	r25, r1
    932e:	30 f4       	brcc	.+12     	; 0x933c <put_utf+0x1c>
    9330:	23 2b       	or	r18, r19
    9332:	09 f4       	brne	.+2      	; 0x9336 <put_utf+0x16>
    9334:	9e c0       	rjmp	.+316    	; 0x9472 <put_utf+0x152>
    9336:	60 83       	st	Z, r22
    9338:	81 e0       	ldi	r24, 0x01	; 1
    933a:	9c c0       	rjmp	.+312    	; 0x9474 <put_utf+0x154>
    933c:	61 15       	cp	r22, r1
    933e:	48 e0       	ldi	r20, 0x08	; 8
    9340:	74 07       	cpc	r23, r20
    9342:	81 05       	cpc	r24, r1
    9344:	91 05       	cpc	r25, r1
    9346:	a0 f4       	brcc	.+40     	; 0x9370 <put_utf+0x50>
    9348:	22 30       	cpi	r18, 0x02	; 2
    934a:	31 05       	cpc	r19, r1
    934c:	08 f4       	brcc	.+2      	; 0x9350 <put_utf+0x30>
    934e:	91 c0       	rjmp	.+290    	; 0x9472 <put_utf+0x152>
    9350:	8b 01       	movw	r16, r22
    9352:	9c 01       	movw	r18, r24
    9354:	76 e0       	ldi	r23, 0x06	; 6
    9356:	36 95       	lsr	r19
    9358:	27 95       	ror	r18
    935a:	17 95       	ror	r17
    935c:	07 95       	ror	r16
    935e:	7a 95       	dec	r23
    9360:	d1 f7       	brne	.-12     	; 0x9356 <put_utf+0x36>
    9362:	00 6c       	ori	r16, 0xC0	; 192
    9364:	00 83       	st	Z, r16
    9366:	6f 73       	andi	r22, 0x3F	; 63
    9368:	60 68       	ori	r22, 0x80	; 128
    936a:	61 83       	std	Z+1, r22	; 0x01
    936c:	82 e0       	ldi	r24, 0x02	; 2
    936e:	82 c0       	rjmp	.+260    	; 0x9474 <put_utf+0x154>
    9370:	61 15       	cp	r22, r1
    9372:	71 05       	cpc	r23, r1
    9374:	41 e0       	ldi	r20, 0x01	; 1
    9376:	84 07       	cpc	r24, r20
    9378:	91 05       	cpc	r25, r1
    937a:	58 f5       	brcc	.+86     	; 0x93d2 <put_utf+0xb2>
    937c:	23 30       	cpi	r18, 0x03	; 3
    937e:	31 05       	cpc	r19, r1
    9380:	08 f4       	brcc	.+2      	; 0x9384 <put_utf+0x64>
    9382:	77 c0       	rjmp	.+238    	; 0x9472 <put_utf+0x152>
    9384:	8b 01       	movw	r16, r22
    9386:	9c 01       	movw	r18, r24
    9388:	18 5d       	subi	r17, 0xD8	; 216
    938a:	21 09       	sbc	r18, r1
    938c:	31 09       	sbc	r19, r1
    938e:	01 15       	cp	r16, r1
    9390:	18 40       	sbci	r17, 0x08	; 8
    9392:	21 05       	cpc	r18, r1
    9394:	31 05       	cpc	r19, r1
    9396:	08 f4       	brcc	.+2      	; 0x939a <put_utf+0x7a>
    9398:	6c c0       	rjmp	.+216    	; 0x9472 <put_utf+0x152>
    939a:	8b 01       	movw	r16, r22
    939c:	9c 01       	movw	r18, r24
    939e:	4c e0       	ldi	r20, 0x0C	; 12
    93a0:	36 95       	lsr	r19
    93a2:	27 95       	ror	r18
    93a4:	17 95       	ror	r17
    93a6:	07 95       	ror	r16
    93a8:	4a 95       	dec	r20
    93aa:	d1 f7       	brne	.-12     	; 0x93a0 <put_utf+0x80>
    93ac:	00 6e       	ori	r16, 0xE0	; 224
    93ae:	00 83       	st	Z, r16
    93b0:	8b 01       	movw	r16, r22
    93b2:	9c 01       	movw	r18, r24
    93b4:	56 e0       	ldi	r21, 0x06	; 6
    93b6:	36 95       	lsr	r19
    93b8:	27 95       	ror	r18
    93ba:	17 95       	ror	r17
    93bc:	07 95       	ror	r16
    93be:	5a 95       	dec	r21
    93c0:	d1 f7       	brne	.-12     	; 0x93b6 <put_utf+0x96>
    93c2:	0f 73       	andi	r16, 0x3F	; 63
    93c4:	00 68       	ori	r16, 0x80	; 128
    93c6:	01 83       	std	Z+1, r16	; 0x01
    93c8:	6f 73       	andi	r22, 0x3F	; 63
    93ca:	60 68       	ori	r22, 0x80	; 128
    93cc:	62 83       	std	Z+2, r22	; 0x02
    93ce:	83 e0       	ldi	r24, 0x03	; 3
    93d0:	51 c0       	rjmp	.+162    	; 0x9474 <put_utf+0x154>
    93d2:	24 30       	cpi	r18, 0x04	; 4
    93d4:	31 05       	cpc	r19, r1
    93d6:	08 f4       	brcc	.+2      	; 0x93da <put_utf+0xba>
    93d8:	4c c0       	rjmp	.+152    	; 0x9472 <put_utf+0x152>
    93da:	8b 01       	movw	r16, r22
    93dc:	9c 01       	movw	r18, r24
    93de:	00 27       	eor	r16, r16
    93e0:	11 27       	eor	r17, r17
    93e2:	38 5d       	subi	r19, 0xD8	; 216
    93e4:	b6 e0       	ldi	r27, 0x06	; 6
    93e6:	36 95       	lsr	r19
    93e8:	27 95       	ror	r18
    93ea:	17 95       	ror	r17
    93ec:	07 95       	ror	r16
    93ee:	ba 95       	dec	r27
    93f0:	d1 f7       	brne	.-12     	; 0x93e6 <put_utf+0xc6>
    93f2:	01 15       	cp	r16, r1
    93f4:	11 05       	cpc	r17, r1
    93f6:	40 e1       	ldi	r20, 0x10	; 16
    93f8:	24 07       	cpc	r18, r20
    93fa:	31 05       	cpc	r19, r1
    93fc:	d0 f5       	brcc	.+116    	; 0x9472 <put_utf+0x152>
    93fe:	dc 01       	movw	r26, r24
    9400:	cb 01       	movw	r24, r22
    9402:	aa 27       	eor	r26, r26
    9404:	bb 27       	eor	r27, r27
    9406:	9c 5d       	subi	r25, 0xDC	; 220
    9408:	a1 09       	sbc	r26, r1
    940a:	b1 09       	sbc	r27, r1
    940c:	81 15       	cp	r24, r1
    940e:	44 e0       	ldi	r20, 0x04	; 4
    9410:	94 07       	cpc	r25, r20
    9412:	a1 05       	cpc	r26, r1
    9414:	b1 05       	cpc	r27, r1
    9416:	68 f5       	brcc	.+90     	; 0x9472 <put_utf+0x152>
    9418:	80 2b       	or	r24, r16
    941a:	91 2b       	or	r25, r17
    941c:	a2 2b       	or	r26, r18
    941e:	b3 2b       	or	r27, r19
    9420:	11 96       	adiw	r26, 0x01	; 1
    9422:	ac 01       	movw	r20, r24
    9424:	bd 01       	movw	r22, r26
    9426:	22 e1       	ldi	r18, 0x12	; 18
    9428:	76 95       	lsr	r23
    942a:	67 95       	ror	r22
    942c:	57 95       	ror	r21
    942e:	47 95       	ror	r20
    9430:	2a 95       	dec	r18
    9432:	d1 f7       	brne	.-12     	; 0x9428 <put_utf+0x108>
    9434:	40 6f       	ori	r20, 0xF0	; 240
    9436:	40 83       	st	Z, r20
    9438:	ac 01       	movw	r20, r24
    943a:	bd 01       	movw	r22, r26
    943c:	3c e0       	ldi	r19, 0x0C	; 12
    943e:	76 95       	lsr	r23
    9440:	67 95       	ror	r22
    9442:	57 95       	ror	r21
    9444:	47 95       	ror	r20
    9446:	3a 95       	dec	r19
    9448:	d1 f7       	brne	.-12     	; 0x943e <put_utf+0x11e>
    944a:	4f 73       	andi	r20, 0x3F	; 63
    944c:	40 68       	ori	r20, 0x80	; 128
    944e:	41 83       	std	Z+1, r20	; 0x01
    9450:	ac 01       	movw	r20, r24
    9452:	bd 01       	movw	r22, r26
    9454:	a6 e0       	ldi	r26, 0x06	; 6
    9456:	76 95       	lsr	r23
    9458:	67 95       	ror	r22
    945a:	57 95       	ror	r21
    945c:	47 95       	ror	r20
    945e:	aa 95       	dec	r26
    9460:	d1 f7       	brne	.-12     	; 0x9456 <put_utf+0x136>
    9462:	4f 73       	andi	r20, 0x3F	; 63
    9464:	40 68       	ori	r20, 0x80	; 128
    9466:	42 83       	std	Z+2, r20	; 0x02
    9468:	8f 73       	andi	r24, 0x3F	; 63
    946a:	80 68       	ori	r24, 0x80	; 128
    946c:	83 83       	std	Z+3, r24	; 0x03
    946e:	84 e0       	ldi	r24, 0x04	; 4
    9470:	01 c0       	rjmp	.+2      	; 0x9474 <put_utf+0x154>
    9472:	80 e0       	ldi	r24, 0x00	; 0
    9474:	1f 91       	pop	r17
    9476:	0f 91       	pop	r16
    9478:	08 95       	ret

0000947a <get_fileinfo>:
    947a:	a0 e0       	ldi	r26, 0x00	; 0
    947c:	b0 e0       	ldi	r27, 0x00	; 0
    947e:	e3 e4       	ldi	r30, 0x43	; 67
    9480:	fa e4       	ldi	r31, 0x4A	; 74
    9482:	0c 94 e0 e5 	jmp	0x1cbc0	; 0x1cbc0 <__prologue_saves__>
    9486:	dc 01       	movw	r26, r24
    9488:	6d 90       	ld	r6, X+
    948a:	7c 90       	ld	r7, X
    948c:	11 97       	sbiw	r26, 0x01	; 1
    948e:	fb 01       	movw	r30, r22
    9490:	16 8a       	std	Z+22, r1	; 0x16
    9492:	56 96       	adiw	r26, 0x16	; 22
    9494:	0d 91       	ld	r16, X+
    9496:	1d 91       	ld	r17, X+
    9498:	2d 91       	ld	r18, X+
    949a:	3c 91       	ld	r19, X
    949c:	59 97       	sbiw	r26, 0x19	; 25
    949e:	01 15       	cp	r16, r1
    94a0:	11 05       	cpc	r17, r1
    94a2:	21 05       	cpc	r18, r1
    94a4:	31 05       	cpc	r19, r1
    94a6:	09 f4       	brne	.+2      	; 0x94aa <get_fileinfo+0x30>
    94a8:	fc c0       	rjmp	.+504    	; 0x96a2 <get_fileinfo+0x228>
    94aa:	eb 01       	movw	r28, r22
    94ac:	8c 01       	movw	r16, r24
    94ae:	fc 01       	movw	r30, r24
    94b0:	80 a5       	ldd	r24, Z+40	; 0x28
    94b2:	91 a5       	ldd	r25, Z+41	; 0x29
    94b4:	a2 a5       	ldd	r26, Z+42	; 0x2a
    94b6:	b3 a5       	ldd	r27, Z+43	; 0x2b
    94b8:	8f 3f       	cpi	r24, 0xFF	; 255
    94ba:	9f 4f       	sbci	r25, 0xFF	; 255
    94bc:	af 4f       	sbci	r26, 0xFF	; 255
    94be:	bf 4f       	sbci	r27, 0xFF	; 255
    94c0:	09 f4       	brne	.+2      	; 0x94c4 <get_fileinfo+0x4a>
    94c2:	49 c0       	rjmp	.+146    	; 0x9556 <get_fileinfo+0xdc>
    94c4:	a1 2c       	mov	r10, r1
    94c6:	b1 2c       	mov	r11, r1
    94c8:	c1 2c       	mov	r12, r1
    94ca:	d1 2c       	mov	r13, r1
    94cc:	e1 2c       	mov	r14, r1
    94ce:	f1 2c       	mov	r15, r1
    94d0:	88 24       	eor	r8, r8
    94d2:	8a 94       	dec	r8
    94d4:	91 2c       	mov	r9, r1
    94d6:	d3 01       	movw	r26, r6
    94d8:	1b 96       	adiw	r26, 0x0b	; 11
    94da:	ed 91       	ld	r30, X+
    94dc:	fc 91       	ld	r31, X
    94de:	1c 97       	sbiw	r26, 0x0c	; 12
    94e0:	ea 0d       	add	r30, r10
    94e2:	fb 1d       	adc	r31, r11
    94e4:	80 81       	ld	r24, Z
    94e6:	91 81       	ldd	r25, Z+1	; 0x01
    94e8:	00 97       	sbiw	r24, 0x00	; 0
    94ea:	69 f1       	breq	.+90     	; 0x9546 <get_fileinfo+0xcc>
    94ec:	c1 14       	cp	r12, r1
    94ee:	d1 04       	cpc	r13, r1
    94f0:	29 f4       	brne	.+10     	; 0x94fc <get_fileinfo+0x82>
    94f2:	9c 01       	movw	r18, r24
    94f4:	38 5d       	subi	r19, 0xD8	; 216
    94f6:	21 15       	cp	r18, r1
    94f8:	38 40       	sbci	r19, 0x08	; 8
    94fa:	f0 f0       	brcs	.+60     	; 0x9538 <get_fileinfo+0xbe>
    94fc:	a7 01       	movw	r20, r14
    94fe:	4a 5e       	subi	r20, 0xEA	; 234
    9500:	5f 4f       	sbci	r21, 0xFF	; 255
    9502:	4c 0f       	add	r20, r28
    9504:	5d 1f       	adc	r21, r29
    9506:	16 01       	movw	r2, r12
    9508:	41 2c       	mov	r4, r1
    950a:	51 2c       	mov	r5, r1
    950c:	21 01       	movw	r4, r2
    950e:	33 24       	eor	r3, r3
    9510:	22 24       	eor	r2, r2
    9512:	a0 e0       	ldi	r26, 0x00	; 0
    9514:	b0 e0       	ldi	r27, 0x00	; 0
    9516:	bc 01       	movw	r22, r24
    9518:	cd 01       	movw	r24, r26
    951a:	62 29       	or	r22, r2
    951c:	73 29       	or	r23, r3
    951e:	84 29       	or	r24, r4
    9520:	95 29       	or	r25, r5
    9522:	94 01       	movw	r18, r8
    9524:	2e 19       	sub	r18, r14
    9526:	3f 09       	sbc	r19, r15
    9528:	fb de       	rcall	.-522    	; 0x9320 <put_utf>
    952a:	90 e0       	ldi	r25, 0x00	; 0
    952c:	00 97       	sbiw	r24, 0x00	; 0
    952e:	49 f0       	breq	.+18     	; 0x9542 <get_fileinfo+0xc8>
    9530:	e8 0e       	add	r14, r24
    9532:	f9 1e       	adc	r15, r25
    9534:	80 e0       	ldi	r24, 0x00	; 0
    9536:	90 e0       	ldi	r25, 0x00	; 0
    9538:	a2 e0       	ldi	r26, 0x02	; 2
    953a:	aa 0e       	add	r10, r26
    953c:	b1 1c       	adc	r11, r1
    953e:	6c 01       	movw	r12, r24
    9540:	ca cf       	rjmp	.-108    	; 0x94d6 <get_fileinfo+0x5c>
    9542:	e1 2c       	mov	r14, r1
    9544:	f1 2c       	mov	r15, r1
    9546:	cd 28       	or	r12, r13
    9548:	11 f0       	breq	.+4      	; 0x954e <get_fileinfo+0xd4>
    954a:	e1 2c       	mov	r14, r1
    954c:	f1 2c       	mov	r15, r1
    954e:	fe 01       	movw	r30, r28
    9550:	ee 0d       	add	r30, r14
    9552:	ff 1d       	adc	r31, r15
    9554:	16 8a       	std	Z+22, r1	; 0x16
    9556:	e1 2c       	mov	r14, r1
    9558:	f1 2c       	mov	r15, r1
    955a:	80 e0       	ldi	r24, 0x00	; 0
    955c:	90 e0       	ldi	r25, 0x00	; 0
    955e:	2c e0       	ldi	r18, 0x0C	; 12
    9560:	a2 2e       	mov	r10, r18
    9562:	b1 2c       	mov	r11, r1
    9564:	3e e2       	ldi	r19, 0x2E	; 46
    9566:	93 2e       	mov	r9, r19
    9568:	6c 01       	movw	r12, r24
    956a:	bf ef       	ldi	r27, 0xFF	; 255
    956c:	cb 1a       	sub	r12, r27
    956e:	db 0a       	sbc	r13, r27
    9570:	f8 01       	movw	r30, r16
    9572:	22 8d       	ldd	r18, Z+26	; 0x1a
    9574:	33 8d       	ldd	r19, Z+27	; 0x1b
    9576:	f9 01       	movw	r30, r18
    9578:	e8 0f       	add	r30, r24
    957a:	f9 1f       	adc	r31, r25
    957c:	80 81       	ld	r24, Z
    957e:	90 e0       	ldi	r25, 0x00	; 0
    9580:	80 32       	cpi	r24, 0x20	; 32
    9582:	91 05       	cpc	r25, r1
    9584:	71 f1       	breq	.+92     	; 0x95e2 <get_fileinfo+0x168>
    9586:	85 30       	cpi	r24, 0x05	; 5
    9588:	91 05       	cpc	r25, r1
    958a:	11 f4       	brne	.+4      	; 0x9590 <get_fileinfo+0x116>
    958c:	85 ee       	ldi	r24, 0xE5	; 229
    958e:	90 e0       	ldi	r25, 0x00	; 0
    9590:	f9 e0       	ldi	r31, 0x09	; 9
    9592:	cf 16       	cp	r12, r31
    9594:	d1 04       	cpc	r13, r1
    9596:	59 f4       	brne	.+22     	; 0x95ae <get_fileinfo+0x134>
    9598:	2c e0       	ldi	r18, 0x0C	; 12
    959a:	e2 16       	cp	r14, r18
    959c:	f1 04       	cpc	r15, r1
    959e:	38 f4       	brcc	.+14     	; 0x95ae <get_fileinfo+0x134>
    95a0:	fe 01       	movw	r30, r28
    95a2:	ee 0d       	add	r30, r14
    95a4:	ff 1d       	adc	r31, r15
    95a6:	91 86       	std	Z+9, r9	; 0x09
    95a8:	d7 01       	movw	r26, r14
    95aa:	11 96       	adiw	r26, 0x01	; 1
    95ac:	7d 01       	movw	r14, r26
    95ae:	65 eb       	ldi	r22, 0xB5	; 181
    95b0:	71 e0       	ldi	r23, 0x01	; 1
    95b2:	0e 94 fd 6a 	call	0xd5fa	; 0xd5fa <ff_oem2uni>
    95b6:	00 97       	sbiw	r24, 0x00	; 0
    95b8:	19 f4       	brne	.+6      	; 0x95c0 <get_fileinfo+0x146>
    95ba:	e1 2c       	mov	r14, r1
    95bc:	f1 2c       	mov	r15, r1
    95be:	16 c0       	rjmp	.+44     	; 0x95ec <get_fileinfo+0x172>
    95c0:	a7 01       	movw	r20, r14
    95c2:	47 5f       	subi	r20, 0xF7	; 247
    95c4:	5f 4f       	sbci	r21, 0xFF	; 255
    95c6:	4c 0f       	add	r20, r28
    95c8:	5d 1f       	adc	r21, r29
    95ca:	bc 01       	movw	r22, r24
    95cc:	80 e0       	ldi	r24, 0x00	; 0
    95ce:	90 e0       	ldi	r25, 0x00	; 0
    95d0:	95 01       	movw	r18, r10
    95d2:	2e 19       	sub	r18, r14
    95d4:	3f 09       	sbc	r19, r15
    95d6:	a4 de       	rcall	.-696    	; 0x9320 <put_utf>
    95d8:	90 e0       	ldi	r25, 0x00	; 0
    95da:	00 97       	sbiw	r24, 0x00	; 0
    95dc:	71 f3       	breq	.-36     	; 0x95ba <get_fileinfo+0x140>
    95de:	e8 0e       	add	r14, r24
    95e0:	f9 1e       	adc	r15, r25
    95e2:	c6 01       	movw	r24, r12
    95e4:	8b 30       	cpi	r24, 0x0B	; 11
    95e6:	91 05       	cpc	r25, r1
    95e8:	09 f0       	breq	.+2      	; 0x95ec <get_fileinfo+0x172>
    95ea:	be cf       	rjmp	.-132    	; 0x9568 <get_fileinfo+0xee>
    95ec:	fe 01       	movw	r30, r28
    95ee:	ee 0d       	add	r30, r14
    95f0:	ff 1d       	adc	r31, r15
    95f2:	11 86       	std	Z+9, r1	; 0x09
    95f4:	8e 89       	ldd	r24, Y+22	; 0x16
    95f6:	81 11       	cpse	r24, r1
    95f8:	39 c0       	rjmp	.+114    	; 0x966c <get_fileinfo+0x1f2>
    95fa:	e1 14       	cp	r14, r1
    95fc:	f1 04       	cpc	r15, r1
    95fe:	31 f0       	breq	.+12     	; 0x960c <get_fileinfo+0x192>
    9600:	fe 01       	movw	r30, r28
    9602:	39 96       	adiw	r30, 0x09	; 9
    9604:	58 e0       	ldi	r21, 0x08	; 8
    9606:	20 e0       	ldi	r18, 0x00	; 0
    9608:	30 e0       	ldi	r19, 0x00	; 0
    960a:	13 c0       	rjmp	.+38     	; 0x9632 <get_fileinfo+0x1b8>
    960c:	8f e3       	ldi	r24, 0x3F	; 63
    960e:	8e 8b       	std	Y+22, r24	; 0x16
    9610:	21 e0       	ldi	r18, 0x01	; 1
    9612:	30 e0       	ldi	r19, 0x00	; 0
    9614:	1e c0       	rjmp	.+60     	; 0x9652 <get_fileinfo+0x1d8>
    9616:	90 e0       	ldi	r25, 0x00	; 0
    9618:	8e 32       	cpi	r24, 0x2E	; 46
    961a:	91 05       	cpc	r25, r1
    961c:	09 f4       	brne	.+2      	; 0x9620 <get_fileinfo+0x1a6>
    961e:	50 e1       	ldi	r21, 0x10	; 16
    9620:	bc 01       	movw	r22, r24
    9622:	61 54       	subi	r22, 0x41	; 65
    9624:	71 09       	sbc	r23, r1
    9626:	6a 31       	cpi	r22, 0x1A	; 26
    9628:	71 05       	cpc	r23, r1
    962a:	38 f0       	brcs	.+14     	; 0x963a <get_fileinfo+0x1c0>
    962c:	84 87       	std	Z+12, r24	; 0x0c
    962e:	2f 5f       	subi	r18, 0xFF	; 255
    9630:	3f 4f       	sbci	r19, 0xFF	; 255
    9632:	81 91       	ld	r24, Z+
    9634:	81 11       	cpse	r24, r1
    9636:	ef cf       	rjmp	.-34     	; 0x9616 <get_fileinfo+0x19c>
    9638:	0c c0       	rjmp	.+24     	; 0x9652 <get_fileinfo+0x1d8>
    963a:	d8 01       	movw	r26, r16
    963c:	5a 96       	adiw	r26, 0x1a	; 26
    963e:	6d 91       	ld	r22, X+
    9640:	7c 91       	ld	r23, X
    9642:	5b 97       	sbiw	r26, 0x1b	; 27
    9644:	db 01       	movw	r26, r22
    9646:	1c 96       	adiw	r26, 0x0c	; 12
    9648:	4c 91       	ld	r20, X
    964a:	45 23       	and	r20, r21
    964c:	79 f3       	breq	.-34     	; 0x962c <get_fileinfo+0x1b2>
    964e:	80 96       	adiw	r24, 0x20	; 32
    9650:	ed cf       	rjmp	.-38     	; 0x962c <get_fileinfo+0x1b2>
    9652:	fe 01       	movw	r30, r28
    9654:	e2 0f       	add	r30, r18
    9656:	f3 1f       	adc	r31, r19
    9658:	16 8a       	std	Z+22, r1	; 0x16
    965a:	d8 01       	movw	r26, r16
    965c:	5a 96       	adiw	r26, 0x1a	; 26
    965e:	ed 91       	ld	r30, X+
    9660:	fc 91       	ld	r31, X
    9662:	5b 97       	sbiw	r26, 0x1b	; 27
    9664:	84 85       	ldd	r24, Z+12	; 0x0c
    9666:	81 11       	cpse	r24, r1
    9668:	01 c0       	rjmp	.+2      	; 0x966c <get_fileinfo+0x1f2>
    966a:	19 86       	std	Y+9, r1	; 0x09
    966c:	d8 01       	movw	r26, r16
    966e:	5a 96       	adiw	r26, 0x1a	; 26
    9670:	ed 91       	ld	r30, X+
    9672:	fc 91       	ld	r31, X
    9674:	5b 97       	sbiw	r26, 0x1b	; 27
    9676:	83 85       	ldd	r24, Z+11	; 0x0b
    9678:	88 87       	std	Y+8, r24	; 0x08
    967a:	5a 96       	adiw	r26, 0x1a	; 26
    967c:	0d 91       	ld	r16, X+
    967e:	1c 91       	ld	r17, X
    9680:	5b 97       	sbiw	r26, 0x1b	; 27
    9682:	c8 01       	movw	r24, r16
    9684:	4c 96       	adiw	r24, 0x1c	; 28
    9686:	bd dc       	rcall	.-1670   	; 0x9002 <ld_dword>
    9688:	68 83       	st	Y, r22
    968a:	79 83       	std	Y+1, r23	; 0x01
    968c:	8a 83       	std	Y+2, r24	; 0x02
    968e:	9b 83       	std	Y+3, r25	; 0x03
    9690:	f8 01       	movw	r30, r16
    9692:	86 89       	ldd	r24, Z+22	; 0x16
    9694:	97 89       	ldd	r25, Z+23	; 0x17
    9696:	9f 83       	std	Y+7, r25	; 0x07
    9698:	8e 83       	std	Y+6, r24	; 0x06
    969a:	80 8d       	ldd	r24, Z+24	; 0x18
    969c:	91 8d       	ldd	r25, Z+25	; 0x19
    969e:	9d 83       	std	Y+5, r25	; 0x05
    96a0:	8c 83       	std	Y+4, r24	; 0x04
    96a2:	cd b7       	in	r28, 0x3d	; 61
    96a4:	de b7       	in	r29, 0x3e	; 62
    96a6:	e2 e1       	ldi	r30, 0x12	; 18
    96a8:	0c 94 fc e5 	jmp	0x1cbf8	; 0x1cbf8 <__epilogue_restores__>

000096ac <ld_clust.isra.4>:
    96ac:	fb 01       	movw	r30, r22
    96ae:	42 8d       	ldd	r20, Z+26	; 0x1a
    96b0:	53 8d       	ldd	r21, Z+27	; 0x1b
    96b2:	60 e0       	ldi	r22, 0x00	; 0
    96b4:	70 e0       	ldi	r23, 0x00	; 0
    96b6:	83 30       	cpi	r24, 0x03	; 3
    96b8:	59 f4       	brne	.+22     	; 0x96d0 <ld_clust.isra.4+0x24>
    96ba:	84 89       	ldd	r24, Z+20	; 0x14
    96bc:	95 89       	ldd	r25, Z+21	; 0x15
    96be:	a0 e0       	ldi	r26, 0x00	; 0
    96c0:	b0 e0       	ldi	r27, 0x00	; 0
    96c2:	dc 01       	movw	r26, r24
    96c4:	99 27       	eor	r25, r25
    96c6:	88 27       	eor	r24, r24
    96c8:	48 2b       	or	r20, r24
    96ca:	59 2b       	or	r21, r25
    96cc:	6a 2b       	or	r22, r26
    96ce:	7b 2b       	or	r23, r27
    96d0:	cb 01       	movw	r24, r22
    96d2:	ba 01       	movw	r22, r20
    96d4:	08 95       	ret

000096d6 <st_clust.isra.5>:
    96d6:	fb 01       	movw	r30, r22
    96d8:	22 8f       	std	Z+26, r18	; 0x1a
    96da:	33 8f       	std	Z+27, r19	; 0x1b
    96dc:	dc 01       	movw	r26, r24
    96de:	8c 91       	ld	r24, X
    96e0:	83 30       	cpi	r24, 0x03	; 3
    96e2:	29 f4       	brne	.+10     	; 0x96ee <st_clust.isra.5+0x18>
    96e4:	ca 01       	movw	r24, r20
    96e6:	aa 27       	eor	r26, r26
    96e8:	bb 27       	eor	r27, r27
    96ea:	84 8b       	std	Z+20, r24	; 0x14
    96ec:	95 8b       	std	Z+21, r25	; 0x15
    96ee:	08 95       	ret

000096f0 <sync_window.part.6>:
    96f0:	8f 92       	push	r8
    96f2:	9f 92       	push	r9
    96f4:	af 92       	push	r10
    96f6:	bf 92       	push	r11
    96f8:	ef 92       	push	r14
    96fa:	ff 92       	push	r15
    96fc:	0f 93       	push	r16
    96fe:	1f 93       	push	r17
    9700:	cf 93       	push	r28
    9702:	df 93       	push	r29
    9704:	ec 01       	movw	r28, r24
    9706:	7c 01       	movw	r14, r24
    9708:	45 e3       	ldi	r20, 0x35	; 53
    970a:	e4 0e       	add	r14, r20
    970c:	f1 1c       	adc	r15, r1
    970e:	29 a9       	ldd	r18, Y+49	; 0x31
    9710:	3a a9       	ldd	r19, Y+50	; 0x32
    9712:	4b a9       	ldd	r20, Y+51	; 0x33
    9714:	5c a9       	ldd	r21, Y+52	; 0x34
    9716:	01 e0       	ldi	r16, 0x01	; 1
    9718:	10 e0       	ldi	r17, 0x00	; 0
    971a:	b7 01       	movw	r22, r14
    971c:	89 81       	ldd	r24, Y+1	; 0x01
    971e:	0e 94 90 6b 	call	0xd720	; 0xd720 <disk_write>
    9722:	89 2b       	or	r24, r25
    9724:	41 f5       	brne	.+80     	; 0x9776 <sync_window.part.6+0x86>
    9726:	1b 82       	std	Y+3, r1	; 0x03
    9728:	09 a9       	ldd	r16, Y+49	; 0x31
    972a:	1a a9       	ldd	r17, Y+50	; 0x32
    972c:	2b a9       	ldd	r18, Y+51	; 0x33
    972e:	3c a9       	ldd	r19, Y+52	; 0x34
    9730:	8d 8d       	ldd	r24, Y+29	; 0x1d
    9732:	9e 8d       	ldd	r25, Y+30	; 0x1e
    9734:	af 8d       	ldd	r26, Y+31	; 0x1f
    9736:	b8 a1       	ldd	r27, Y+32	; 0x20
    9738:	8d a0       	ldd	r8, Y+37	; 0x25
    973a:	9e a0       	ldd	r9, Y+38	; 0x26
    973c:	af a0       	ldd	r10, Y+39	; 0x27
    973e:	b8 a4       	ldd	r11, Y+40	; 0x28
    9740:	b9 01       	movw	r22, r18
    9742:	a8 01       	movw	r20, r16
    9744:	48 19       	sub	r20, r8
    9746:	59 09       	sbc	r21, r9
    9748:	6a 09       	sbc	r22, r10
    974a:	7b 09       	sbc	r23, r11
    974c:	48 17       	cp	r20, r24
    974e:	59 07       	cpc	r21, r25
    9750:	6a 07       	cpc	r22, r26
    9752:	7b 07       	cpc	r23, r27
    9754:	98 f4       	brcc	.+38     	; 0x977c <sync_window.part.6+0x8c>
    9756:	6a 81       	ldd	r22, Y+2	; 0x02
    9758:	62 30       	cpi	r22, 0x02	; 2
    975a:	81 f4       	brne	.+32     	; 0x977c <sync_window.part.6+0x8c>
    975c:	a9 01       	movw	r20, r18
    975e:	98 01       	movw	r18, r16
    9760:	28 0f       	add	r18, r24
    9762:	39 1f       	adc	r19, r25
    9764:	4a 1f       	adc	r20, r26
    9766:	5b 1f       	adc	r21, r27
    9768:	01 e0       	ldi	r16, 0x01	; 1
    976a:	10 e0       	ldi	r17, 0x00	; 0
    976c:	b7 01       	movw	r22, r14
    976e:	89 81       	ldd	r24, Y+1	; 0x01
    9770:	0e 94 90 6b 	call	0xd720	; 0xd720 <disk_write>
    9774:	03 c0       	rjmp	.+6      	; 0x977c <sync_window.part.6+0x8c>
    9776:	81 e0       	ldi	r24, 0x01	; 1
    9778:	90 e0       	ldi	r25, 0x00	; 0
    977a:	02 c0       	rjmp	.+4      	; 0x9780 <sync_window.part.6+0x90>
    977c:	80 e0       	ldi	r24, 0x00	; 0
    977e:	90 e0       	ldi	r25, 0x00	; 0
    9780:	df 91       	pop	r29
    9782:	cf 91       	pop	r28
    9784:	1f 91       	pop	r17
    9786:	0f 91       	pop	r16
    9788:	ff 90       	pop	r15
    978a:	ef 90       	pop	r14
    978c:	bf 90       	pop	r11
    978e:	af 90       	pop	r10
    9790:	9f 90       	pop	r9
    9792:	8f 90       	pop	r8
    9794:	08 95       	ret

00009796 <sync_fs>:
    9796:	ef 92       	push	r14
    9798:	ff 92       	push	r15
    979a:	0f 93       	push	r16
    979c:	1f 93       	push	r17
    979e:	cf 93       	push	r28
    97a0:	df 93       	push	r29
    97a2:	ec 01       	movw	r28, r24
    97a4:	8b 81       	ldd	r24, Y+3	; 0x03
    97a6:	81 11       	cpse	r24, r1
    97a8:	05 c0       	rjmp	.+10     	; 0x97b4 <sync_fs+0x1e>
    97aa:	88 81       	ld	r24, Y
    97ac:	83 30       	cpi	r24, 0x03	; 3
    97ae:	09 f0       	breq	.+2      	; 0x97b2 <sync_fs+0x1c>
    97b0:	52 c0       	rjmp	.+164    	; 0x9856 <sync_fs+0xc0>
    97b2:	06 c0       	rjmp	.+12     	; 0x97c0 <sync_fs+0x2a>
    97b4:	ce 01       	movw	r24, r28
    97b6:	9c df       	rcall	.-200    	; 0x96f0 <sync_window.part.6>
    97b8:	00 97       	sbiw	r24, 0x00	; 0
    97ba:	09 f0       	breq	.+2      	; 0x97be <sync_fs+0x28>
    97bc:	59 c0       	rjmp	.+178    	; 0x9870 <sync_fs+0xda>
    97be:	f5 cf       	rjmp	.-22     	; 0x97aa <sync_fs+0x14>
    97c0:	8c 81       	ldd	r24, Y+4	; 0x04
    97c2:	81 30       	cpi	r24, 0x01	; 1
    97c4:	09 f0       	breq	.+2      	; 0x97c8 <sync_fs+0x32>
    97c6:	47 c0       	rjmp	.+142    	; 0x9856 <sync_fs+0xc0>
    97c8:	40 e0       	ldi	r20, 0x00	; 0
    97ca:	52 e0       	ldi	r21, 0x02	; 2
    97cc:	60 e0       	ldi	r22, 0x00	; 0
    97ce:	70 e0       	ldi	r23, 0x00	; 0
    97d0:	7e 01       	movw	r14, r28
    97d2:	85 e3       	ldi	r24, 0x35	; 53
    97d4:	e8 0e       	add	r14, r24
    97d6:	f1 1c       	adc	r15, r1
    97d8:	c7 01       	movw	r24, r14
    97da:	2e dc       	rcall	.-1956   	; 0x9038 <mem_set>
    97dc:	85 e5       	ldi	r24, 0x55	; 85
    97de:	fe 01       	movw	r30, r28
    97e0:	ed 5c       	subi	r30, 0xCD	; 205
    97e2:	fd 4f       	sbci	r31, 0xFD	; 253
    97e4:	80 83       	st	Z, r24
    97e6:	8a ea       	ldi	r24, 0xAA	; 170
    97e8:	31 96       	adiw	r30, 0x01	; 1
    97ea:	80 83       	st	Z, r24
    97ec:	82 e5       	ldi	r24, 0x52	; 82
    97ee:	8d ab       	std	Y+53, r24	; 0x35
    97f0:	8e ab       	std	Y+54, r24	; 0x36
    97f2:	81 e6       	ldi	r24, 0x61	; 97
    97f4:	8f ab       	std	Y+55, r24	; 0x37
    97f6:	91 e4       	ldi	r25, 0x41	; 65
    97f8:	98 af       	std	Y+56, r25	; 0x38
    97fa:	22 e7       	ldi	r18, 0x72	; 114
    97fc:	7b 97       	sbiw	r30, 0x1b	; 27
    97fe:	20 83       	st	Z, r18
    9800:	31 96       	adiw	r30, 0x01	; 1
    9802:	20 83       	st	Z, r18
    9804:	31 96       	adiw	r30, 0x01	; 1
    9806:	90 83       	st	Z, r25
    9808:	31 96       	adiw	r30, 0x01	; 1
    980a:	80 83       	st	Z, r24
    980c:	49 89       	ldd	r20, Y+17	; 0x11
    980e:	5a 89       	ldd	r21, Y+18	; 0x12
    9810:	6b 89       	ldd	r22, Y+19	; 0x13
    9812:	7c 89       	ldd	r23, Y+20	; 0x14
    9814:	ce 01       	movw	r24, r28
    9816:	83 5e       	subi	r24, 0xE3	; 227
    9818:	9d 4f       	sbci	r25, 0xFD	; 253
    981a:	08 dc       	rcall	.-2032   	; 0x902c <st_dword>
    981c:	4d 85       	ldd	r20, Y+13	; 0x0d
    981e:	5e 85       	ldd	r21, Y+14	; 0x0e
    9820:	6f 85       	ldd	r22, Y+15	; 0x0f
    9822:	78 89       	ldd	r23, Y+16	; 0x10
    9824:	ce 01       	movw	r24, r28
    9826:	8f 5d       	subi	r24, 0xDF	; 223
    9828:	9d 4f       	sbci	r25, 0xFD	; 253
    982a:	00 dc       	rcall	.-2048   	; 0x902c <st_dword>
    982c:	89 a1       	ldd	r24, Y+33	; 0x21
    982e:	9a a1       	ldd	r25, Y+34	; 0x22
    9830:	ab a1       	ldd	r26, Y+35	; 0x23
    9832:	bc a1       	ldd	r27, Y+36	; 0x24
    9834:	9c 01       	movw	r18, r24
    9836:	ad 01       	movw	r20, r26
    9838:	2f 5f       	subi	r18, 0xFF	; 255
    983a:	3f 4f       	sbci	r19, 0xFF	; 255
    983c:	4f 4f       	sbci	r20, 0xFF	; 255
    983e:	5f 4f       	sbci	r21, 0xFF	; 255
    9840:	29 ab       	std	Y+49, r18	; 0x31
    9842:	3a ab       	std	Y+50, r19	; 0x32
    9844:	4b ab       	std	Y+51, r20	; 0x33
    9846:	5c ab       	std	Y+52, r21	; 0x34
    9848:	01 e0       	ldi	r16, 0x01	; 1
    984a:	10 e0       	ldi	r17, 0x00	; 0
    984c:	b7 01       	movw	r22, r14
    984e:	89 81       	ldd	r24, Y+1	; 0x01
    9850:	0e 94 90 6b 	call	0xd720	; 0xd720 <disk_write>
    9854:	1c 82       	std	Y+4, r1	; 0x04
    9856:	40 e0       	ldi	r20, 0x00	; 0
    9858:	50 e0       	ldi	r21, 0x00	; 0
    985a:	60 e0       	ldi	r22, 0x00	; 0
    985c:	89 81       	ldd	r24, Y+1	; 0x01
    985e:	0e 94 a0 6b 	call	0xd740	; 0xd740 <disk_ioctl>
    9862:	31 e0       	ldi	r19, 0x01	; 1
    9864:	20 e0       	ldi	r18, 0x00	; 0
    9866:	89 2b       	or	r24, r25
    9868:	09 f4       	brne	.+2      	; 0x986c <sync_fs+0xd6>
    986a:	30 e0       	ldi	r19, 0x00	; 0
    986c:	83 2f       	mov	r24, r19
    986e:	92 2f       	mov	r25, r18
    9870:	cd b7       	in	r28, 0x3d	; 61
    9872:	de b7       	in	r29, 0x3e	; 62
    9874:	e6 e0       	ldi	r30, 0x06	; 6
    9876:	0c 94 08 e6 	jmp	0x1cc10	; 0x1cc10 <__epilogue_restores__+0x18>

0000987a <dir_clear>:
    987a:	4f 92       	push	r4
    987c:	5f 92       	push	r5
    987e:	6f 92       	push	r6
    9880:	7f 92       	push	r7
    9882:	af 92       	push	r10
    9884:	bf 92       	push	r11
    9886:	cf 92       	push	r12
    9888:	df 92       	push	r13
    988a:	ef 92       	push	r14
    988c:	ff 92       	push	r15
    988e:	0f 93       	push	r16
    9890:	1f 93       	push	r17
    9892:	cf 93       	push	r28
    9894:	df 93       	push	r29
    9896:	ec 01       	movw	r28, r24
    9898:	6a 01       	movw	r12, r20
    989a:	7b 01       	movw	r14, r22
    989c:	8b 81       	ldd	r24, Y+3	; 0x03
    989e:	81 11       	cpse	r24, r1
    98a0:	28 c0       	rjmp	.+80     	; 0x98f2 <dir_clear+0x78>
    98a2:	b7 01       	movw	r22, r14
    98a4:	a6 01       	movw	r20, r12
    98a6:	ce 01       	movw	r24, r28
    98a8:	65 dc       	rcall	.-1846   	; 0x9174 <clst2sect>
    98aa:	2b 01       	movw	r4, r22
    98ac:	3c 01       	movw	r6, r24
    98ae:	69 ab       	std	Y+49, r22	; 0x31
    98b0:	7a ab       	std	Y+50, r23	; 0x32
    98b2:	8b ab       	std	Y+51, r24	; 0x33
    98b4:	9c ab       	std	Y+52, r25	; 0x34
    98b6:	5e 01       	movw	r10, r28
    98b8:	25 e3       	ldi	r18, 0x35	; 53
    98ba:	a2 0e       	add	r10, r18
    98bc:	b1 1c       	adc	r11, r1
    98be:	40 e0       	ldi	r20, 0x00	; 0
    98c0:	52 e0       	ldi	r21, 0x02	; 2
    98c2:	60 e0       	ldi	r22, 0x00	; 0
    98c4:	70 e0       	ldi	r23, 0x00	; 0
    98c6:	c5 01       	movw	r24, r10
    98c8:	b7 db       	rcall	.-2194   	; 0x9038 <mem_set>
    98ca:	09 85       	ldd	r16, Y+9	; 0x09
    98cc:	1a 85       	ldd	r17, Y+10	; 0x0a
    98ce:	c8 01       	movw	r24, r16
    98d0:	a0 e0       	ldi	r26, 0x00	; 0
    98d2:	b0 e0       	ldi	r27, 0x00	; 0
    98d4:	39 e0       	ldi	r19, 0x09	; 9
    98d6:	88 0f       	add	r24, r24
    98d8:	99 1f       	adc	r25, r25
    98da:	aa 1f       	adc	r26, r26
    98dc:	bb 1f       	adc	r27, r27
    98de:	3a 95       	dec	r19
    98e0:	d1 f7       	brne	.-12     	; 0x98d6 <dir_clear+0x5c>
    98e2:	81 15       	cp	r24, r1
    98e4:	90 48       	sbci	r25, 0x80	; 128
    98e6:	a1 05       	cpc	r26, r1
    98e8:	b1 05       	cpc	r27, r1
    98ea:	50 f0       	brcs	.+20     	; 0x9900 <dir_clear+0x86>
    98ec:	00 e0       	ldi	r16, 0x00	; 0
    98ee:	10 e8       	ldi	r17, 0x80	; 128
    98f0:	14 c0       	rjmp	.+40     	; 0x991a <dir_clear+0xa0>
    98f2:	ce 01       	movw	r24, r28
    98f4:	fd de       	rcall	.-518    	; 0x96f0 <sync_window.part.6>
    98f6:	89 2b       	or	r24, r25
    98f8:	a1 f2       	breq	.-88     	; 0x98a2 <dir_clear+0x28>
    98fa:	81 e0       	ldi	r24, 0x01	; 1
    98fc:	90 e0       	ldi	r25, 0x00	; 0
    98fe:	56 c0       	rjmp	.+172    	; 0x99ac <dir_clear+0x132>
    9900:	10 2f       	mov	r17, r16
    9902:	00 27       	eor	r16, r16
    9904:	11 0f       	add	r17, r17
    9906:	09 c0       	rjmp	.+18     	; 0x991a <dir_clear+0xa0>
    9908:	c8 01       	movw	r24, r16
    990a:	0e 94 c4 6a 	call	0xd588	; 0xd588 <ff_memalloc>
    990e:	6c 01       	movw	r12, r24
    9910:	00 97       	sbiw	r24, 0x00	; 0
    9912:	09 f0       	breq	.+2      	; 0x9916 <dir_clear+0x9c>
    9914:	40 c0       	rjmp	.+128    	; 0x9996 <dir_clear+0x11c>
    9916:	16 95       	lsr	r17
    9918:	07 95       	ror	r16
    991a:	01 30       	cpi	r16, 0x01	; 1
    991c:	82 e0       	ldi	r24, 0x02	; 2
    991e:	18 07       	cpc	r17, r24
    9920:	98 f7       	brcc	.-26     	; 0x9908 <dir_clear+0x8e>
    9922:	e1 2c       	mov	r14, r1
    9924:	f1 2c       	mov	r15, r1
    9926:	11 c0       	rjmp	.+34     	; 0x994a <dir_clear+0xd0>
    9928:	01 e0       	ldi	r16, 0x01	; 1
    992a:	10 e0       	ldi	r17, 0x00	; 0
    992c:	a3 01       	movw	r20, r6
    992e:	92 01       	movw	r18, r4
    9930:	2e 0d       	add	r18, r14
    9932:	3f 1d       	adc	r19, r15
    9934:	41 1d       	adc	r20, r1
    9936:	51 1d       	adc	r21, r1
    9938:	b5 01       	movw	r22, r10
    993a:	89 81       	ldd	r24, Y+1	; 0x01
    993c:	0e 94 90 6b 	call	0xd720	; 0xd720 <disk_write>
    9940:	89 2b       	or	r24, r25
    9942:	01 f5       	brne	.+64     	; 0x9984 <dir_clear+0x10a>
    9944:	2f ef       	ldi	r18, 0xFF	; 255
    9946:	e2 1a       	sub	r14, r18
    9948:	f2 0a       	sbc	r15, r18
    994a:	89 85       	ldd	r24, Y+9	; 0x09
    994c:	9a 85       	ldd	r25, Y+10	; 0x0a
    994e:	e8 16       	cp	r14, r24
    9950:	f9 06       	cpc	r15, r25
    9952:	50 f3       	brcs	.-44     	; 0x9928 <dir_clear+0xae>
    9954:	17 c0       	rjmp	.+46     	; 0x9984 <dir_clear+0x10a>
    9956:	85 01       	movw	r16, r10
    9958:	a3 01       	movw	r20, r6
    995a:	92 01       	movw	r18, r4
    995c:	2e 0d       	add	r18, r14
    995e:	3f 1d       	adc	r19, r15
    9960:	41 1d       	adc	r20, r1
    9962:	51 1d       	adc	r21, r1
    9964:	b6 01       	movw	r22, r12
    9966:	89 81       	ldd	r24, Y+1	; 0x01
    9968:	0e 94 90 6b 	call	0xd720	; 0xd720 <disk_write>
    996c:	89 2b       	or	r24, r25
    996e:	39 f4       	brne	.+14     	; 0x997e <dir_clear+0x104>
    9970:	ea 0c       	add	r14, r10
    9972:	fb 1c       	adc	r15, r11
    9974:	89 85       	ldd	r24, Y+9	; 0x09
    9976:	9a 85       	ldd	r25, Y+10	; 0x0a
    9978:	e8 16       	cp	r14, r24
    997a:	f9 06       	cpc	r15, r25
    997c:	60 f3       	brcs	.-40     	; 0x9956 <dir_clear+0xdc>
    997e:	c6 01       	movw	r24, r12
    9980:	0e 94 c7 6a 	call	0xd58e	; 0xd58e <ff_memfree>
    9984:	81 e0       	ldi	r24, 0x01	; 1
    9986:	90 e0       	ldi	r25, 0x00	; 0
    9988:	29 85       	ldd	r18, Y+9	; 0x09
    998a:	3a 85       	ldd	r19, Y+10	; 0x0a
    998c:	2e 15       	cp	r18, r14
    998e:	3f 05       	cpc	r19, r15
    9990:	69 f4       	brne	.+26     	; 0x99ac <dir_clear+0x132>
    9992:	80 e0       	ldi	r24, 0x00	; 0
    9994:	0b c0       	rjmp	.+22     	; 0x99ac <dir_clear+0x132>
    9996:	a8 01       	movw	r20, r16
    9998:	60 e0       	ldi	r22, 0x00	; 0
    999a:	70 e0       	ldi	r23, 0x00	; 0
    999c:	4d db       	rcall	.-2406   	; 0x9038 <mem_set>
    999e:	58 01       	movw	r10, r16
    99a0:	ab 2c       	mov	r10, r11
    99a2:	bb 24       	eor	r11, r11
    99a4:	a6 94       	lsr	r10
    99a6:	e1 2c       	mov	r14, r1
    99a8:	f1 2c       	mov	r15, r1
    99aa:	e4 cf       	rjmp	.-56     	; 0x9974 <dir_clear+0xfa>
    99ac:	df 91       	pop	r29
    99ae:	cf 91       	pop	r28
    99b0:	1f 91       	pop	r17
    99b2:	0f 91       	pop	r16
    99b4:	ff 90       	pop	r15
    99b6:	ef 90       	pop	r14
    99b8:	df 90       	pop	r13
    99ba:	cf 90       	pop	r12
    99bc:	bf 90       	pop	r11
    99be:	af 90       	pop	r10
    99c0:	7f 90       	pop	r7
    99c2:	6f 90       	pop	r6
    99c4:	5f 90       	pop	r5
    99c6:	4f 90       	pop	r4
    99c8:	08 95       	ret

000099ca <move_window>:
    99ca:	a0 e0       	ldi	r26, 0x00	; 0
    99cc:	b0 e0       	ldi	r27, 0x00	; 0
    99ce:	eb ee       	ldi	r30, 0xEB	; 235
    99d0:	fc e4       	ldi	r31, 0x4C	; 76
    99d2:	0c 94 ea e5 	jmp	0x1cbd4	; 0x1cbd4 <__prologue_saves__+0x14>
    99d6:	ec 01       	movw	r28, r24
    99d8:	6a 01       	movw	r12, r20
    99da:	7b 01       	movw	r14, r22
    99dc:	89 a9       	ldd	r24, Y+49	; 0x31
    99de:	9a a9       	ldd	r25, Y+50	; 0x32
    99e0:	ab a9       	ldd	r26, Y+51	; 0x33
    99e2:	bc a9       	ldd	r27, Y+52	; 0x34
    99e4:	84 17       	cp	r24, r20
    99e6:	95 07       	cpc	r25, r21
    99e8:	a6 07       	cpc	r26, r22
    99ea:	b7 07       	cpc	r27, r23
    99ec:	11 f1       	breq	.+68     	; 0x9a32 <move_window+0x68>
    99ee:	8b 81       	ldd	r24, Y+3	; 0x03
    99f0:	81 11       	cpse	r24, r1
    99f2:	13 c0       	rjmp	.+38     	; 0x9a1a <move_window+0x50>
    99f4:	01 e0       	ldi	r16, 0x01	; 1
    99f6:	10 e0       	ldi	r17, 0x00	; 0
    99f8:	a7 01       	movw	r20, r14
    99fa:	96 01       	movw	r18, r12
    99fc:	be 01       	movw	r22, r28
    99fe:	6b 5c       	subi	r22, 0xCB	; 203
    9a00:	7f 4f       	sbci	r23, 0xFF	; 255
    9a02:	89 81       	ldd	r24, Y+1	; 0x01
    9a04:	0e 94 80 6b 	call	0xd700	; 0xd700 <disk_read>
    9a08:	89 2b       	or	r24, r25
    9a0a:	61 f0       	breq	.+24     	; 0x9a24 <move_window+0x5a>
    9a0c:	81 e0       	ldi	r24, 0x01	; 1
    9a0e:	90 e0       	ldi	r25, 0x00	; 0
    9a10:	cc 24       	eor	r12, r12
    9a12:	ca 94       	dec	r12
    9a14:	dc 2c       	mov	r13, r12
    9a16:	76 01       	movw	r14, r12
    9a18:	07 c0       	rjmp	.+14     	; 0x9a28 <move_window+0x5e>
    9a1a:	ce 01       	movw	r24, r28
    9a1c:	69 de       	rcall	.-814    	; 0x96f0 <sync_window.part.6>
    9a1e:	00 97       	sbiw	r24, 0x00	; 0
    9a20:	51 f4       	brne	.+20     	; 0x9a36 <move_window+0x6c>
    9a22:	e8 cf       	rjmp	.-48     	; 0x99f4 <move_window+0x2a>
    9a24:	80 e0       	ldi	r24, 0x00	; 0
    9a26:	90 e0       	ldi	r25, 0x00	; 0
    9a28:	c9 aa       	std	Y+49, r12	; 0x31
    9a2a:	da aa       	std	Y+50, r13	; 0x32
    9a2c:	eb aa       	std	Y+51, r14	; 0x33
    9a2e:	fc aa       	std	Y+52, r15	; 0x34
    9a30:	02 c0       	rjmp	.+4      	; 0x9a36 <move_window+0x6c>
    9a32:	80 e0       	ldi	r24, 0x00	; 0
    9a34:	90 e0       	ldi	r25, 0x00	; 0
    9a36:	cd b7       	in	r28, 0x3d	; 61
    9a38:	de b7       	in	r29, 0x3e	; 62
    9a3a:	e8 e0       	ldi	r30, 0x08	; 8
    9a3c:	0c 94 06 e6 	jmp	0x1cc0c	; 0x1cc0c <__epilogue_restores__+0x14>

00009a40 <check_fs>:
    9a40:	cf 93       	push	r28
    9a42:	df 93       	push	r29
    9a44:	ec 01       	movw	r28, r24
    9a46:	1b 82       	std	Y+3, r1	; 0x03
    9a48:	8f ef       	ldi	r24, 0xFF	; 255
    9a4a:	9f ef       	ldi	r25, 0xFF	; 255
    9a4c:	dc 01       	movw	r26, r24
    9a4e:	89 ab       	std	Y+49, r24	; 0x31
    9a50:	9a ab       	std	Y+50, r25	; 0x32
    9a52:	ab ab       	std	Y+51, r26	; 0x33
    9a54:	bc ab       	std	Y+52, r27	; 0x34
    9a56:	ce 01       	movw	r24, r28
    9a58:	b8 df       	rcall	.-144    	; 0x99ca <move_window>
    9a5a:	89 2b       	or	r24, r25
    9a5c:	19 f5       	brne	.+70     	; 0x9aa4 <check_fs+0x64>
    9a5e:	fe 01       	movw	r30, r28
    9a60:	ed 5c       	subi	r30, 0xCD	; 205
    9a62:	fd 4f       	sbci	r31, 0xFD	; 253
    9a64:	80 81       	ld	r24, Z
    9a66:	91 81       	ldd	r25, Z+1	; 0x01
    9a68:	85 35       	cpi	r24, 0x55	; 85
    9a6a:	9a 4a       	sbci	r25, 0xAA	; 170
    9a6c:	f1 f4       	brne	.+60     	; 0x9aaa <check_fs+0x6a>
    9a6e:	8d a9       	ldd	r24, Y+53	; 0x35
    9a70:	8b 3e       	cpi	r24, 0xEB	; 235
    9a72:	19 f0       	breq	.+6      	; 0x9a7a <check_fs+0x3a>
    9a74:	88 5e       	subi	r24, 0xE8	; 232
    9a76:	82 30       	cpi	r24, 0x02	; 2
    9a78:	f0 f4       	brcc	.+60     	; 0x9ab6 <check_fs+0x76>
    9a7a:	43 e0       	ldi	r20, 0x03	; 3
    9a7c:	50 e0       	ldi	r21, 0x00	; 0
    9a7e:	68 e5       	ldi	r22, 0x58	; 88
    9a80:	78 e0       	ldi	r23, 0x08	; 8
    9a82:	ce 01       	movw	r24, r28
    9a84:	85 59       	subi	r24, 0x95	; 149
    9a86:	9f 4f       	sbci	r25, 0xFF	; 255
    9a88:	e0 da       	rcall	.-2624   	; 0x904a <mem_cmp>
    9a8a:	89 2b       	or	r24, r25
    9a8c:	89 f0       	breq	.+34     	; 0x9ab0 <check_fs+0x70>
    9a8e:	45 e0       	ldi	r20, 0x05	; 5
    9a90:	50 e0       	ldi	r21, 0x00	; 0
    9a92:	6e ee       	ldi	r22, 0xEE	; 238
    9a94:	77 e0       	ldi	r23, 0x07	; 7
    9a96:	ce 01       	movw	r24, r28
    9a98:	89 57       	subi	r24, 0x79	; 121
    9a9a:	9f 4f       	sbci	r25, 0xFF	; 255
    9a9c:	d6 da       	rcall	.-2644   	; 0x904a <mem_cmp>
    9a9e:	89 2b       	or	r24, r25
    9aa0:	51 f4       	brne	.+20     	; 0x9ab6 <check_fs+0x76>
    9aa2:	06 c0       	rjmp	.+12     	; 0x9ab0 <check_fs+0x70>
    9aa4:	84 e0       	ldi	r24, 0x04	; 4
    9aa6:	90 e0       	ldi	r25, 0x00	; 0
    9aa8:	08 c0       	rjmp	.+16     	; 0x9aba <check_fs+0x7a>
    9aaa:	83 e0       	ldi	r24, 0x03	; 3
    9aac:	90 e0       	ldi	r25, 0x00	; 0
    9aae:	05 c0       	rjmp	.+10     	; 0x9aba <check_fs+0x7a>
    9ab0:	80 e0       	ldi	r24, 0x00	; 0
    9ab2:	90 e0       	ldi	r25, 0x00	; 0
    9ab4:	02 c0       	rjmp	.+4      	; 0x9aba <check_fs+0x7a>
    9ab6:	82 e0       	ldi	r24, 0x02	; 2
    9ab8:	90 e0       	ldi	r25, 0x00	; 0
    9aba:	df 91       	pop	r29
    9abc:	cf 91       	pop	r28
    9abe:	08 95       	ret

00009ac0 <mount_volume>:
    9ac0:	a0 e2       	ldi	r26, 0x20	; 32
    9ac2:	b0 e0       	ldi	r27, 0x00	; 0
    9ac4:	e6 e6       	ldi	r30, 0x66	; 102
    9ac6:	fd e4       	ldi	r31, 0x4D	; 77
    9ac8:	0c 94 e2 e5 	jmp	0x1cbc4	; 0x1cbc4 <__prologue_saves__+0x4>
    9acc:	5b 01       	movw	r10, r22
    9ace:	f4 2e       	mov	r15, r20
    9ad0:	db 01       	movw	r26, r22
    9ad2:	1d 92       	st	X+, r1
    9ad4:	1c 92       	st	X, r1
    9ad6:	c1 db       	rcall	.-2174   	; 0x925a <get_ldnumber>
    9ad8:	6c 01       	movw	r12, r24
    9ada:	97 fd       	sbrc	r25, 7
    9adc:	41 c2       	rjmp	.+1154   	; 0x9f60 <mount_volume+0x4a0>
    9ade:	fc 01       	movw	r30, r24
    9ae0:	ee 0f       	add	r30, r30
    9ae2:	ff 1f       	adc	r31, r31
    9ae4:	eb 5e       	subi	r30, 0xEB	; 235
    9ae6:	f7 4e       	sbci	r31, 0xE7	; 231
    9ae8:	00 81       	ld	r16, Z
    9aea:	11 81       	ldd	r17, Z+1	; 0x01
    9aec:	01 15       	cp	r16, r1
    9aee:	11 05       	cpc	r17, r1
    9af0:	09 f4       	brne	.+2      	; 0x9af4 <mount_volume+0x34>
    9af2:	39 c2       	rjmp	.+1138   	; 0x9f66 <mount_volume+0x4a6>
    9af4:	f5 01       	movw	r30, r10
    9af6:	11 83       	std	Z+1, r17	; 0x01
    9af8:	00 83       	st	Z, r16
    9afa:	ff 2d       	mov	r31, r15
    9afc:	fe 7f       	andi	r31, 0xFE	; 254
    9afe:	ff 2e       	mov	r15, r31
    9b00:	d8 01       	movw	r26, r16
    9b02:	8c 91       	ld	r24, X
    9b04:	88 23       	and	r24, r24
    9b06:	71 f0       	breq	.+28     	; 0x9b24 <mount_volume+0x64>
    9b08:	11 96       	adiw	r26, 0x01	; 1
    9b0a:	8c 91       	ld	r24, X
    9b0c:	0e 94 74 6b 	call	0xd6e8	; 0xd6e8 <disk_status>
    9b10:	80 fd       	sbrc	r24, 0
    9b12:	08 c0       	rjmp	.+16     	; 0x9b24 <mount_volume+0x64>
    9b14:	ff 20       	and	r15, r15
    9b16:	09 f4       	brne	.+2      	; 0x9b1a <mount_volume+0x5a>
    9b18:	29 c2       	rjmp	.+1106   	; 0x9f6c <mount_volume+0x4ac>
    9b1a:	82 ff       	sbrs	r24, 2
    9b1c:	27 c2       	rjmp	.+1102   	; 0x9f6c <mount_volume+0x4ac>
    9b1e:	8a e0       	ldi	r24, 0x0A	; 10
    9b20:	90 e0       	ldi	r25, 0x00	; 0
    9b22:	2c c2       	rjmp	.+1112   	; 0x9f7c <mount_volume+0x4bc>
    9b24:	f8 01       	movw	r30, r16
    9b26:	10 82       	st	Z, r1
    9b28:	c1 82       	std	Z+1, r12	; 0x01
    9b2a:	8c 2d       	mov	r24, r12
    9b2c:	0e 94 7a 6b 	call	0xd6f4	; 0xd6f4 <disk_initialize>
    9b30:	80 fd       	sbrc	r24, 0
    9b32:	1f c2       	rjmp	.+1086   	; 0x9f72 <mount_volume+0x4b2>
    9b34:	ff 20       	and	r15, r15
    9b36:	11 f0       	breq	.+4      	; 0x9b3c <mount_volume+0x7c>
    9b38:	82 fd       	sbrc	r24, 2
    9b3a:	f1 cf       	rjmp	.-30     	; 0x9b1e <mount_volume+0x5e>
    9b3c:	40 e0       	ldi	r20, 0x00	; 0
    9b3e:	50 e0       	ldi	r21, 0x00	; 0
    9b40:	ba 01       	movw	r22, r20
    9b42:	c8 01       	movw	r24, r16
    9b44:	7d df       	rcall	.-262    	; 0x9a40 <check_fs>
    9b46:	82 30       	cpi	r24, 0x02	; 2
    9b48:	91 05       	cpc	r25, r1
    9b4a:	b9 f5       	brne	.+110    	; 0x9bba <mount_volume+0xfa>
    9b4c:	68 01       	movw	r12, r16
    9b4e:	f5 e0       	ldi	r31, 0x05	; 5
    9b50:	cf 1a       	sub	r12, r31
    9b52:	fe ef       	ldi	r31, 0xFE	; 254
    9b54:	df 0a       	sbc	r13, r31
    9b56:	9e 01       	movw	r18, r28
    9b58:	2f 5f       	subi	r18, 0xFF	; 255
    9b5a:	3f 4f       	sbci	r19, 0xFF	; 255
    9b5c:	79 01       	movw	r14, r18
    9b5e:	48 01       	movw	r8, r16
    9b60:	35 ec       	ldi	r19, 0xC5	; 197
    9b62:	83 1a       	sub	r8, r19
    9b64:	3d ef       	ldi	r19, 0xFD	; 253
    9b66:	93 0a       	sbc	r9, r19
    9b68:	57 01       	movw	r10, r14
    9b6a:	c6 01       	movw	r24, r12
    9b6c:	4a da       	rcall	.-2924   	; 0x9002 <ld_dword>
    9b6e:	d5 01       	movw	r26, r10
    9b70:	6d 93       	st	X+, r22
    9b72:	7d 93       	st	X+, r23
    9b74:	8d 93       	st	X+, r24
    9b76:	9d 93       	st	X+, r25
    9b78:	5d 01       	movw	r10, r26
    9b7a:	b0 e1       	ldi	r27, 0x10	; 16
    9b7c:	cb 0e       	add	r12, r27
    9b7e:	d1 1c       	adc	r13, r1
    9b80:	c8 14       	cp	r12, r8
    9b82:	d9 04       	cpc	r13, r9
    9b84:	91 f7       	brne	.-28     	; 0x9b6a <mount_volume+0xaa>
    9b86:	6e 01       	movw	r12, r28
    9b88:	e1 e1       	ldi	r30, 0x11	; 17
    9b8a:	ce 0e       	add	r12, r30
    9b8c:	d1 1c       	adc	r13, r1
    9b8e:	d7 01       	movw	r26, r14
    9b90:	4d 91       	ld	r20, X+
    9b92:	5d 91       	ld	r21, X+
    9b94:	6d 91       	ld	r22, X+
    9b96:	7d 91       	ld	r23, X+
    9b98:	7d 01       	movw	r14, r26
    9b9a:	41 15       	cp	r20, r1
    9b9c:	51 05       	cpc	r21, r1
    9b9e:	61 05       	cpc	r22, r1
    9ba0:	71 05       	cpc	r23, r1
    9ba2:	31 f0       	breq	.+12     	; 0x9bb0 <mount_volume+0xf0>
    9ba4:	c8 01       	movw	r24, r16
    9ba6:	4c df       	rcall	.-360    	; 0x9a40 <check_fs>
    9ba8:	82 30       	cpi	r24, 0x02	; 2
    9baa:	91 05       	cpc	r25, r1
    9bac:	18 f4       	brcc	.+6      	; 0x9bb4 <mount_volume+0xf4>
    9bae:	05 c0       	rjmp	.+10     	; 0x9bba <mount_volume+0xfa>
    9bb0:	83 e0       	ldi	r24, 0x03	; 3
    9bb2:	90 e0       	ldi	r25, 0x00	; 0
    9bb4:	ce 14       	cp	r12, r14
    9bb6:	df 04       	cpc	r13, r15
    9bb8:	51 f7       	brne	.-44     	; 0x9b8e <mount_volume+0xce>
    9bba:	84 30       	cpi	r24, 0x04	; 4
    9bbc:	91 05       	cpc	r25, r1
    9bbe:	09 f4       	brne	.+2      	; 0x9bc2 <mount_volume+0x102>
    9bc0:	db c1       	rjmp	.+950    	; 0x9f78 <mount_volume+0x4b8>
    9bc2:	02 97       	sbiw	r24, 0x02	; 2
    9bc4:	18 f0       	brcs	.+6      	; 0x9bcc <mount_volume+0x10c>
    9bc6:	8d e0       	ldi	r24, 0x0D	; 13
    9bc8:	90 e0       	ldi	r25, 0x00	; 0
    9bca:	d8 c1       	rjmp	.+944    	; 0x9f7c <mount_volume+0x4bc>
    9bcc:	f8 01       	movw	r30, r16
    9bce:	e0 5c       	subi	r30, 0xC0	; 192
    9bd0:	ff 4f       	sbci	r31, 0xFF	; 255
    9bd2:	80 81       	ld	r24, Z
    9bd4:	91 81       	ldd	r25, Z+1	; 0x01
    9bd6:	81 15       	cp	r24, r1
    9bd8:	92 40       	sbci	r25, 0x02	; 2
    9bda:	a9 f7       	brne	.-22     	; 0x9bc6 <mount_volume+0x106>
    9bdc:	3b 96       	adiw	r30, 0x0b	; 11
    9bde:	40 80       	ld	r4, Z
    9be0:	51 80       	ldd	r5, Z+1	; 0x01
    9be2:	41 14       	cp	r4, r1
    9be4:	51 04       	cpc	r5, r1
    9be6:	19 f0       	breq	.+6      	; 0x9bee <mount_volume+0x12e>
    9be8:	61 2c       	mov	r6, r1
    9bea:	71 2c       	mov	r7, r1
    9bec:	06 c0       	rjmp	.+12     	; 0x9bfa <mount_volume+0x13a>
    9bee:	c8 01       	movw	r24, r16
    9bf0:	87 5a       	subi	r24, 0xA7	; 167
    9bf2:	9f 4f       	sbci	r25, 0xFF	; 255
    9bf4:	06 da       	rcall	.-3060   	; 0x9002 <ld_dword>
    9bf6:	2b 01       	movw	r4, r22
    9bf8:	3c 01       	movw	r6, r24
    9bfa:	d8 01       	movw	r26, r16
    9bfc:	d1 96       	adiw	r26, 0x31	; 49
    9bfe:	2d 91       	ld	r18, X+
    9c00:	3d 91       	ld	r19, X+
    9c02:	4d 91       	ld	r20, X+
    9c04:	5c 91       	ld	r21, X
    9c06:	d4 97       	sbiw	r26, 0x34	; 52
    9c08:	29 8b       	std	Y+17, r18	; 0x11
    9c0a:	3a 8b       	std	Y+18, r19	; 0x12
    9c0c:	4b 8b       	std	Y+19, r20	; 0x13
    9c0e:	5c 8b       	std	Y+20, r21	; 0x14
    9c10:	f8 01       	movw	r30, r16
    9c12:	45 8e       	std	Z+29, r4	; 0x1d
    9c14:	56 8e       	std	Z+30, r5	; 0x1e
    9c16:	67 8e       	std	Z+31, r6	; 0x1f
    9c18:	70 a2       	std	Z+32, r7	; 0x20
    9c1a:	eb 5b       	subi	r30, 0xBB	; 187
    9c1c:	ff 4f       	sbci	r31, 0xFF	; 255
    9c1e:	a0 80       	ld	r10, Z
    9c20:	12 96       	adiw	r26, 0x02	; 2
    9c22:	ac 92       	st	X, r10
    9c24:	12 97       	sbiw	r26, 0x02	; 2
    9c26:	8f ef       	ldi	r24, 0xFF	; 255
    9c28:	8a 0d       	add	r24, r10
    9c2a:	82 30       	cpi	r24, 0x02	; 2
    9c2c:	60 f6       	brcc	.-104    	; 0x9bc6 <mount_volume+0x106>
    9c2e:	33 97       	sbiw	r30, 0x03	; 3
    9c30:	b0 80       	ld	r11, Z
    9c32:	8b 2d       	mov	r24, r11
    9c34:	90 e0       	ldi	r25, 0x00	; 0
    9c36:	f8 01       	movw	r30, r16
    9c38:	92 87       	std	Z+10, r25	; 0x0a
    9c3a:	81 87       	std	Z+9, r24	; 0x09
    9c3c:	00 97       	sbiw	r24, 0x00	; 0
    9c3e:	19 f2       	breq	.-122    	; 0x9bc6 <mount_volume+0x106>
    9c40:	9c 01       	movw	r18, r24
    9c42:	21 50       	subi	r18, 0x01	; 1
    9c44:	31 09       	sbc	r19, r1
    9c46:	82 23       	and	r24, r18
    9c48:	93 23       	and	r25, r19
    9c4a:	89 2b       	or	r24, r25
    9c4c:	09 f0       	breq	.+2      	; 0x9c50 <mount_volume+0x190>
    9c4e:	bb cf       	rjmp	.-138    	; 0x9bc6 <mount_volume+0x106>
    9c50:	ea 5b       	subi	r30, 0xBA	; 186
    9c52:	ff 4f       	sbci	r31, 0xFF	; 255
    9c54:	80 80       	ld	r8, Z
    9c56:	91 80       	ldd	r9, Z+1	; 0x01
    9c58:	18 96       	adiw	r26, 0x08	; 8
    9c5a:	9c 92       	st	X, r9
    9c5c:	8e 92       	st	-X, r8
    9c5e:	17 97       	sbiw	r26, 0x07	; 7
    9c60:	c4 01       	movw	r24, r8
    9c62:	8f 70       	andi	r24, 0x0F	; 15
    9c64:	99 27       	eor	r25, r25
    9c66:	89 2b       	or	r24, r25
    9c68:	09 f0       	breq	.+2      	; 0x9c6c <mount_volume+0x1ac>
    9c6a:	ad cf       	rjmp	.-166    	; 0x9bc6 <mount_volume+0x106>
    9c6c:	32 96       	adiw	r30, 0x02	; 2
    9c6e:	80 81       	ld	r24, Z
    9c70:	91 81       	ldd	r25, Z+1	; 0x01
    9c72:	6c 01       	movw	r12, r24
    9c74:	e1 2c       	mov	r14, r1
    9c76:	f1 2c       	mov	r15, r1
    9c78:	89 2b       	or	r24, r25
    9c7a:	31 f4       	brne	.+12     	; 0x9c88 <mount_volume+0x1c8>
    9c7c:	c8 01       	movw	r24, r16
    9c7e:	8b 5a       	subi	r24, 0xAB	; 171
    9c80:	9f 4f       	sbci	r25, 0xFF	; 255
    9c82:	bf d9       	rcall	.-3202   	; 0x9002 <ld_dword>
    9c84:	6b 01       	movw	r12, r22
    9c86:	7c 01       	movw	r14, r24
    9c88:	f8 01       	movw	r30, r16
    9c8a:	ed 5b       	subi	r30, 0xBD	; 189
    9c8c:	ff 4f       	sbci	r31, 0xFF	; 255
    9c8e:	01 90       	ld	r0, Z+
    9c90:	f0 81       	ld	r31, Z
    9c92:	e0 2d       	mov	r30, r0
    9c94:	30 97       	sbiw	r30, 0x00	; 0
    9c96:	09 f4       	brne	.+2      	; 0x9c9a <mount_volume+0x1da>
    9c98:	96 cf       	rjmp	.-212    	; 0x9bc6 <mount_volume+0x106>
    9c9a:	aa 2d       	mov	r26, r10
    9c9c:	b0 e0       	ldi	r27, 0x00	; 0
    9c9e:	a3 01       	movw	r20, r6
    9ca0:	92 01       	movw	r18, r4
    9ca2:	0e 94 c0 e5 	call	0x1cb80	; 0x1cb80 <__muluhisi3>
    9ca6:	69 8f       	std	Y+25, r22	; 0x19
    9ca8:	7a 8f       	std	Y+26, r23	; 0x1a
    9caa:	8b 8f       	std	Y+27, r24	; 0x1b
    9cac:	9c 8f       	std	Y+28, r25	; 0x1c
    9cae:	9f 01       	movw	r18, r30
    9cb0:	40 e0       	ldi	r20, 0x00	; 0
    9cb2:	50 e0       	ldi	r21, 0x00	; 0
    9cb4:	2d 8f       	std	Y+29, r18	; 0x1d
    9cb6:	3e 8f       	std	Y+30, r19	; 0x1e
    9cb8:	4f 8f       	std	Y+31, r20	; 0x1f
    9cba:	58 a3       	std	Y+32, r21	; 0x20
    9cbc:	c4 01       	movw	r24, r8
    9cbe:	f4 e0       	ldi	r31, 0x04	; 4
    9cc0:	96 95       	lsr	r25
    9cc2:	87 95       	ror	r24
    9cc4:	fa 95       	dec	r31
    9cc6:	e1 f7       	brne	.-8      	; 0x9cc0 <mount_volume+0x200>
    9cc8:	28 0f       	add	r18, r24
    9cca:	39 1f       	adc	r19, r25
    9ccc:	41 1d       	adc	r20, r1
    9cce:	51 1d       	adc	r21, r1
    9cd0:	da 01       	movw	r26, r20
    9cd2:	c9 01       	movw	r24, r18
    9cd4:	29 8d       	ldd	r18, Y+25	; 0x19
    9cd6:	3a 8d       	ldd	r19, Y+26	; 0x1a
    9cd8:	4b 8d       	ldd	r20, Y+27	; 0x1b
    9cda:	5c 8d       	ldd	r21, Y+28	; 0x1c
    9cdc:	28 0f       	add	r18, r24
    9cde:	39 1f       	adc	r19, r25
    9ce0:	4a 1f       	adc	r20, r26
    9ce2:	5b 1f       	adc	r21, r27
    9ce4:	2d 8b       	std	Y+21, r18	; 0x15
    9ce6:	3e 8b       	std	Y+22, r19	; 0x16
    9ce8:	4f 8b       	std	Y+23, r20	; 0x17
    9cea:	58 8f       	std	Y+24, r21	; 0x18
    9cec:	c2 16       	cp	r12, r18
    9cee:	d3 06       	cpc	r13, r19
    9cf0:	e4 06       	cpc	r14, r20
    9cf2:	f5 06       	cpc	r15, r21
    9cf4:	08 f4       	brcc	.+2      	; 0x9cf8 <mount_volume+0x238>
    9cf6:	67 cf       	rjmp	.-306    	; 0x9bc6 <mount_volume+0x106>
    9cf8:	c7 01       	movw	r24, r14
    9cfa:	b6 01       	movw	r22, r12
    9cfc:	62 1b       	sub	r22, r18
    9cfe:	73 0b       	sbc	r23, r19
    9d00:	84 0b       	sbc	r24, r20
    9d02:	95 0b       	sbc	r25, r21
    9d04:	2b 2d       	mov	r18, r11
    9d06:	30 e0       	ldi	r19, 0x00	; 0
    9d08:	40 e0       	ldi	r20, 0x00	; 0
    9d0a:	50 e0       	ldi	r21, 0x00	; 0
    9d0c:	0e 94 5e e5 	call	0x1cabc	; 0x1cabc <__udivmodsi4>
    9d10:	da 01       	movw	r26, r20
    9d12:	c9 01       	movw	r24, r18
    9d14:	01 97       	sbiw	r24, 0x01	; 1
    9d16:	a1 09       	sbc	r26, r1
    9d18:	b1 09       	sbc	r27, r1
    9d1a:	85 3f       	cpi	r24, 0xF5	; 245
    9d1c:	9f 4f       	sbci	r25, 0xFF	; 255
    9d1e:	af 4f       	sbci	r26, 0xFF	; 255
    9d20:	bf 40       	sbci	r27, 0x0F	; 15
    9d22:	08 f0       	brcs	.+2      	; 0x9d26 <mount_volume+0x266>
    9d24:	50 cf       	rjmp	.-352    	; 0x9bc6 <mount_volume+0x106>
    9d26:	26 3f       	cpi	r18, 0xF6	; 246
    9d28:	8f ef       	ldi	r24, 0xFF	; 255
    9d2a:	38 07       	cpc	r19, r24
    9d2c:	41 05       	cpc	r20, r1
    9d2e:	51 05       	cpc	r21, r1
    9d30:	50 f4       	brcc	.+20     	; 0x9d46 <mount_volume+0x286>
    9d32:	26 3f       	cpi	r18, 0xF6	; 246
    9d34:	9f e0       	ldi	r25, 0x0F	; 15
    9d36:	39 07       	cpc	r19, r25
    9d38:	41 05       	cpc	r20, r1
    9d3a:	51 05       	cpc	r21, r1
    9d3c:	40 f4       	brcc	.+16     	; 0x9d4e <mount_volume+0x28e>
    9d3e:	aa 24       	eor	r10, r10
    9d40:	a3 94       	inc	r10
    9d42:	b1 2c       	mov	r11, r1
    9d44:	07 c0       	rjmp	.+14     	; 0x9d54 <mount_volume+0x294>
    9d46:	73 e0       	ldi	r23, 0x03	; 3
    9d48:	a7 2e       	mov	r10, r23
    9d4a:	b1 2c       	mov	r11, r1
    9d4c:	03 c0       	rjmp	.+6      	; 0x9d54 <mount_volume+0x294>
    9d4e:	62 e0       	ldi	r22, 0x02	; 2
    9d50:	a6 2e       	mov	r10, r22
    9d52:	b1 2c       	mov	r11, r1
    9d54:	69 01       	movw	r12, r18
    9d56:	7a 01       	movw	r14, r20
    9d58:	a2 e0       	ldi	r26, 0x02	; 2
    9d5a:	ca 0e       	add	r12, r26
    9d5c:	d1 1c       	adc	r13, r1
    9d5e:	e1 1c       	adc	r14, r1
    9d60:	f1 1c       	adc	r15, r1
    9d62:	f8 01       	movw	r30, r16
    9d64:	c1 8e       	std	Z+25, r12	; 0x19
    9d66:	d2 8e       	std	Z+26, r13	; 0x1a
    9d68:	e3 8e       	std	Z+27, r14	; 0x1b
    9d6a:	f4 8e       	std	Z+28, r15	; 0x1c
    9d6c:	29 89       	ldd	r18, Y+17	; 0x11
    9d6e:	3a 89       	ldd	r19, Y+18	; 0x12
    9d70:	4b 89       	ldd	r20, Y+19	; 0x13
    9d72:	5c 89       	ldd	r21, Y+20	; 0x14
    9d74:	21 a3       	std	Z+33, r18	; 0x21
    9d76:	32 a3       	std	Z+34, r19	; 0x22
    9d78:	43 a3       	std	Z+35, r20	; 0x23
    9d7a:	54 a3       	std	Z+36, r21	; 0x24
    9d7c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    9d7e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    9d80:	af 8d       	ldd	r26, Y+31	; 0x1f
    9d82:	b8 a1       	ldd	r27, Y+32	; 0x20
    9d84:	28 0f       	add	r18, r24
    9d86:	39 1f       	adc	r19, r25
    9d88:	4a 1f       	adc	r20, r26
    9d8a:	5b 1f       	adc	r21, r27
    9d8c:	2d 8f       	std	Y+29, r18	; 0x1d
    9d8e:	3e 8f       	std	Y+30, r19	; 0x1e
    9d90:	4f 8f       	std	Y+31, r20	; 0x1f
    9d92:	58 a3       	std	Y+32, r21	; 0x20
    9d94:	25 a3       	std	Z+37, r18	; 0x25
    9d96:	36 a3       	std	Z+38, r19	; 0x26
    9d98:	47 a3       	std	Z+39, r20	; 0x27
    9d9a:	50 a7       	std	Z+40, r21	; 0x28
    9d9c:	49 89       	ldd	r20, Y+17	; 0x11
    9d9e:	5a 89       	ldd	r21, Y+18	; 0x12
    9da0:	6b 89       	ldd	r22, Y+19	; 0x13
    9da2:	7c 89       	ldd	r23, Y+20	; 0x14
    9da4:	8d 89       	ldd	r24, Y+21	; 0x15
    9da6:	9e 89       	ldd	r25, Y+22	; 0x16
    9da8:	af 89       	ldd	r26, Y+23	; 0x17
    9daa:	b8 8d       	ldd	r27, Y+24	; 0x18
    9dac:	48 0f       	add	r20, r24
    9dae:	59 1f       	adc	r21, r25
    9db0:	6a 1f       	adc	r22, r26
    9db2:	7b 1f       	adc	r23, r27
    9db4:	45 a7       	std	Z+45, r20	; 0x2d
    9db6:	56 a7       	std	Z+46, r21	; 0x2e
    9db8:	67 a7       	std	Z+47, r22	; 0x2f
    9dba:	70 ab       	std	Z+48, r23	; 0x30
    9dbc:	b3 e0       	ldi	r27, 0x03	; 3
    9dbe:	ab 16       	cp	r10, r27
    9dc0:	b1 04       	cpc	r11, r1
    9dc2:	e1 f4       	brne	.+56     	; 0x9dfc <mount_volume+0x33c>
    9dc4:	e1 5a       	subi	r30, 0xA1	; 161
    9dc6:	ff 4f       	sbci	r31, 0xFF	; 255
    9dc8:	80 81       	ld	r24, Z
    9dca:	91 81       	ldd	r25, Z+1	; 0x01
    9dcc:	89 2b       	or	r24, r25
    9dce:	09 f0       	breq	.+2      	; 0x9dd2 <mount_volume+0x312>
    9dd0:	fa ce       	rjmp	.-524    	; 0x9bc6 <mount_volume+0x106>
    9dd2:	81 14       	cp	r8, r1
    9dd4:	91 04       	cpc	r9, r1
    9dd6:	09 f0       	breq	.+2      	; 0x9dda <mount_volume+0x31a>
    9dd8:	f6 ce       	rjmp	.-532    	; 0x9bc6 <mount_volume+0x106>
    9dda:	c8 01       	movw	r24, r16
    9ddc:	8f 59       	subi	r24, 0x9F	; 159
    9dde:	9f 4f       	sbci	r25, 0xFF	; 255
    9de0:	10 d9       	rcall	.-3552   	; 0x9002 <ld_dword>
    9de2:	f8 01       	movw	r30, r16
    9de4:	61 a7       	std	Z+41, r22	; 0x29
    9de6:	72 a7       	std	Z+42, r23	; 0x2a
    9de8:	83 a7       	std	Z+43, r24	; 0x2b
    9dea:	94 a7       	std	Z+44, r25	; 0x2c
    9dec:	42 e0       	ldi	r20, 0x02	; 2
    9dee:	cc 0c       	add	r12, r12
    9df0:	dd 1c       	adc	r13, r13
    9df2:	ee 1c       	adc	r14, r14
    9df4:	ff 1c       	adc	r15, r15
    9df6:	4a 95       	dec	r20
    9df8:	d1 f7       	brne	.-12     	; 0x9dee <mount_volume+0x32e>
    9dfa:	33 c0       	rjmp	.+102    	; 0x9e62 <mount_volume+0x3a2>
    9dfc:	81 14       	cp	r8, r1
    9dfe:	91 04       	cpc	r9, r1
    9e00:	09 f4       	brne	.+2      	; 0x9e04 <mount_volume+0x344>
    9e02:	e1 ce       	rjmp	.-574    	; 0x9bc6 <mount_volume+0x106>
    9e04:	8d 8d       	ldd	r24, Y+29	; 0x1d
    9e06:	9e 8d       	ldd	r25, Y+30	; 0x1e
    9e08:	af 8d       	ldd	r26, Y+31	; 0x1f
    9e0a:	b8 a1       	ldd	r27, Y+32	; 0x20
    9e0c:	29 8d       	ldd	r18, Y+25	; 0x19
    9e0e:	3a 8d       	ldd	r19, Y+26	; 0x1a
    9e10:	4b 8d       	ldd	r20, Y+27	; 0x1b
    9e12:	5c 8d       	ldd	r21, Y+28	; 0x1c
    9e14:	82 0f       	add	r24, r18
    9e16:	93 1f       	adc	r25, r19
    9e18:	a4 1f       	adc	r26, r20
    9e1a:	b5 1f       	adc	r27, r21
    9e1c:	f8 01       	movw	r30, r16
    9e1e:	81 a7       	std	Z+41, r24	; 0x29
    9e20:	92 a7       	std	Z+42, r25	; 0x2a
    9e22:	a3 a7       	std	Z+43, r26	; 0x2b
    9e24:	b4 a7       	std	Z+44, r27	; 0x2c
    9e26:	f2 e0       	ldi	r31, 0x02	; 2
    9e28:	af 16       	cp	r10, r31
    9e2a:	b1 04       	cpc	r11, r1
    9e2c:	29 f4       	brne	.+10     	; 0x9e38 <mount_volume+0x378>
    9e2e:	cc 0c       	add	r12, r12
    9e30:	dd 1c       	adc	r13, r13
    9e32:	ee 1c       	adc	r14, r14
    9e34:	ff 1c       	adc	r15, r15
    9e36:	15 c0       	rjmp	.+42     	; 0x9e62 <mount_volume+0x3a2>
    9e38:	a3 e0       	ldi	r26, 0x03	; 3
    9e3a:	b0 e0       	ldi	r27, 0x00	; 0
    9e3c:	a7 01       	movw	r20, r14
    9e3e:	96 01       	movw	r18, r12
    9e40:	0e 94 c0 e5 	call	0x1cb80	; 0x1cb80 <__muluhisi3>
    9e44:	dc 01       	movw	r26, r24
    9e46:	cb 01       	movw	r24, r22
    9e48:	b6 95       	lsr	r27
    9e4a:	a7 95       	ror	r26
    9e4c:	97 95       	ror	r25
    9e4e:	87 95       	ror	r24
    9e50:	21 e0       	ldi	r18, 0x01	; 1
    9e52:	c2 22       	and	r12, r18
    9e54:	dd 24       	eor	r13, r13
    9e56:	ee 24       	eor	r14, r14
    9e58:	ff 24       	eor	r15, r15
    9e5a:	c8 0e       	add	r12, r24
    9e5c:	d9 1e       	adc	r13, r25
    9e5e:	ea 1e       	adc	r14, r26
    9e60:	fb 1e       	adc	r15, r27
    9e62:	3f ef       	ldi	r19, 0xFF	; 255
    9e64:	c3 0e       	add	r12, r19
    9e66:	31 e0       	ldi	r19, 0x01	; 1
    9e68:	d3 1e       	adc	r13, r19
    9e6a:	e1 1c       	adc	r14, r1
    9e6c:	f1 1c       	adc	r15, r1
    9e6e:	89 e0       	ldi	r24, 0x09	; 9
    9e70:	f6 94       	lsr	r15
    9e72:	e7 94       	ror	r14
    9e74:	d7 94       	ror	r13
    9e76:	c7 94       	ror	r12
    9e78:	8a 95       	dec	r24
    9e7a:	d1 f7       	brne	.-12     	; 0x9e70 <mount_volume+0x3b0>
    9e7c:	4c 14       	cp	r4, r12
    9e7e:	5d 04       	cpc	r5, r13
    9e80:	6e 04       	cpc	r6, r14
    9e82:	7f 04       	cpc	r7, r15
    9e84:	08 f4       	brcc	.+2      	; 0x9e88 <mount_volume+0x3c8>
    9e86:	9f ce       	rjmp	.-706    	; 0x9bc6 <mount_volume+0x106>
    9e88:	8f ef       	ldi	r24, 0xFF	; 255
    9e8a:	9f ef       	ldi	r25, 0xFF	; 255
    9e8c:	dc 01       	movw	r26, r24
    9e8e:	f8 01       	movw	r30, r16
    9e90:	81 8b       	std	Z+17, r24	; 0x11
    9e92:	92 8b       	std	Z+18, r25	; 0x12
    9e94:	a3 8b       	std	Z+19, r26	; 0x13
    9e96:	b4 8b       	std	Z+20, r27	; 0x14
    9e98:	85 87       	std	Z+13, r24	; 0x0d
    9e9a:	96 87       	std	Z+14, r25	; 0x0e
    9e9c:	a7 87       	std	Z+15, r26	; 0x0f
    9e9e:	b0 8b       	std	Z+16, r27	; 0x10
    9ea0:	80 e8       	ldi	r24, 0x80	; 128
    9ea2:	84 83       	std	Z+4, r24	; 0x04
    9ea4:	f3 e0       	ldi	r31, 0x03	; 3
    9ea6:	af 16       	cp	r10, r31
    9ea8:	b1 04       	cpc	r11, r1
    9eaa:	09 f0       	breq	.+2      	; 0x9eae <mount_volume+0x3ee>
    9eac:	44 c0       	rjmp	.+136    	; 0x9f36 <mount_volume+0x476>
    9eae:	f8 01       	movw	r30, r16
    9eb0:	eb 59       	subi	r30, 0x9B	; 155
    9eb2:	ff 4f       	sbci	r31, 0xFF	; 255
    9eb4:	80 81       	ld	r24, Z
    9eb6:	91 81       	ldd	r25, Z+1	; 0x01
    9eb8:	01 97       	sbiw	r24, 0x01	; 1
    9eba:	09 f0       	breq	.+2      	; 0x9ebe <mount_volume+0x3fe>
    9ebc:	3c c0       	rjmp	.+120    	; 0x9f36 <mount_volume+0x476>
    9ebe:	49 89       	ldd	r20, Y+17	; 0x11
    9ec0:	5a 89       	ldd	r21, Y+18	; 0x12
    9ec2:	6b 89       	ldd	r22, Y+19	; 0x13
    9ec4:	7c 89       	ldd	r23, Y+20	; 0x14
    9ec6:	4f 5f       	subi	r20, 0xFF	; 255
    9ec8:	5f 4f       	sbci	r21, 0xFF	; 255
    9eca:	6f 4f       	sbci	r22, 0xFF	; 255
    9ecc:	7f 4f       	sbci	r23, 0xFF	; 255
    9ece:	c8 01       	movw	r24, r16
    9ed0:	7c dd       	rcall	.-1288   	; 0x99ca <move_window>
    9ed2:	89 2b       	or	r24, r25
    9ed4:	81 f5       	brne	.+96     	; 0x9f36 <mount_volume+0x476>
    9ed6:	d8 01       	movw	r26, r16
    9ed8:	14 96       	adiw	r26, 0x04	; 4
    9eda:	1c 92       	st	X, r1
    9edc:	f8 01       	movw	r30, r16
    9ede:	ed 5c       	subi	r30, 0xCD	; 205
    9ee0:	fd 4f       	sbci	r31, 0xFD	; 253
    9ee2:	80 81       	ld	r24, Z
    9ee4:	91 81       	ldd	r25, Z+1	; 0x01
    9ee6:	85 35       	cpi	r24, 0x55	; 85
    9ee8:	9a 4a       	sbci	r25, 0xAA	; 170
    9eea:	29 f5       	brne	.+74     	; 0x9f36 <mount_volume+0x476>
    9eec:	c8 01       	movw	r24, r16
    9eee:	c5 96       	adiw	r24, 0x35	; 53
    9ef0:	88 d8       	rcall	.-3824   	; 0x9002 <ld_dword>
    9ef2:	62 35       	cpi	r22, 0x52	; 82
    9ef4:	72 45       	sbci	r23, 0x52	; 82
    9ef6:	81 46       	sbci	r24, 0x61	; 97
    9ef8:	91 44       	sbci	r25, 0x41	; 65
    9efa:	e9 f4       	brne	.+58     	; 0x9f36 <mount_volume+0x476>
    9efc:	c8 01       	movw	r24, r16
    9efe:	87 5e       	subi	r24, 0xE7	; 231
    9f00:	9d 4f       	sbci	r25, 0xFD	; 253
    9f02:	7f d8       	rcall	.-3842   	; 0x9002 <ld_dword>
    9f04:	62 37       	cpi	r22, 0x72	; 114
    9f06:	72 47       	sbci	r23, 0x72	; 114
    9f08:	81 44       	sbci	r24, 0x41	; 65
    9f0a:	91 46       	sbci	r25, 0x61	; 97
    9f0c:	a1 f4       	brne	.+40     	; 0x9f36 <mount_volume+0x476>
    9f0e:	c8 01       	movw	r24, r16
    9f10:	83 5e       	subi	r24, 0xE3	; 227
    9f12:	9d 4f       	sbci	r25, 0xFD	; 253
    9f14:	76 d8       	rcall	.-3860   	; 0x9002 <ld_dword>
    9f16:	d8 01       	movw	r26, r16
    9f18:	51 96       	adiw	r26, 0x11	; 17
    9f1a:	6d 93       	st	X+, r22
    9f1c:	7d 93       	st	X+, r23
    9f1e:	8d 93       	st	X+, r24
    9f20:	9c 93       	st	X, r25
    9f22:	54 97       	sbiw	r26, 0x14	; 20
    9f24:	c8 01       	movw	r24, r16
    9f26:	8f 5d       	subi	r24, 0xDF	; 223
    9f28:	9d 4f       	sbci	r25, 0xFD	; 253
    9f2a:	6b d8       	rcall	.-3882   	; 0x9002 <ld_dword>
    9f2c:	f8 01       	movw	r30, r16
    9f2e:	65 87       	std	Z+13, r22	; 0x0d
    9f30:	76 87       	std	Z+14, r23	; 0x0e
    9f32:	87 87       	std	Z+15, r24	; 0x0f
    9f34:	90 8b       	std	Z+16, r25	; 0x10
    9f36:	d8 01       	movw	r26, r16
    9f38:	ac 92       	st	X, r10
    9f3a:	80 91 13 18 	lds	r24, 0x1813	; 0x801813 <Fsid>
    9f3e:	90 91 14 18 	lds	r25, 0x1814	; 0x801814 <Fsid+0x1>
    9f42:	01 96       	adiw	r24, 0x01	; 1
    9f44:	90 93 14 18 	sts	0x1814, r25	; 0x801814 <Fsid+0x1>
    9f48:	80 93 13 18 	sts	0x1813, r24	; 0x801813 <Fsid>
    9f4c:	16 96       	adiw	r26, 0x06	; 6
    9f4e:	9c 93       	st	X, r25
    9f50:	8e 93       	st	-X, r24
    9f52:	15 97       	sbiw	r26, 0x05	; 5
    9f54:	f8 01       	movw	r30, r16
    9f56:	15 8a       	std	Z+21, r1	; 0x15
    9f58:	16 8a       	std	Z+22, r1	; 0x16
    9f5a:	17 8a       	std	Z+23, r1	; 0x17
    9f5c:	10 8e       	std	Z+24, r1	; 0x18
    9f5e:	06 c0       	rjmp	.+12     	; 0x9f6c <mount_volume+0x4ac>
    9f60:	8b e0       	ldi	r24, 0x0B	; 11
    9f62:	90 e0       	ldi	r25, 0x00	; 0
    9f64:	0b c0       	rjmp	.+22     	; 0x9f7c <mount_volume+0x4bc>
    9f66:	8c e0       	ldi	r24, 0x0C	; 12
    9f68:	90 e0       	ldi	r25, 0x00	; 0
    9f6a:	08 c0       	rjmp	.+16     	; 0x9f7c <mount_volume+0x4bc>
    9f6c:	80 e0       	ldi	r24, 0x00	; 0
    9f6e:	90 e0       	ldi	r25, 0x00	; 0
    9f70:	05 c0       	rjmp	.+10     	; 0x9f7c <mount_volume+0x4bc>
    9f72:	83 e0       	ldi	r24, 0x03	; 3
    9f74:	90 e0       	ldi	r25, 0x00	; 0
    9f76:	02 c0       	rjmp	.+4      	; 0x9f7c <mount_volume+0x4bc>
    9f78:	81 e0       	ldi	r24, 0x01	; 1
    9f7a:	90 e0       	ldi	r25, 0x00	; 0
    9f7c:	a0 96       	adiw	r28, 0x20	; 32
    9f7e:	e0 e1       	ldi	r30, 0x10	; 16
    9f80:	0c 94 fe e5 	jmp	0x1cbfc	; 0x1cbfc <__epilogue_restores__+0x4>

00009f84 <put_fat>:
    9f84:	a6 e0       	ldi	r26, 0x06	; 6
    9f86:	b0 e0       	ldi	r27, 0x00	; 0
    9f88:	e8 ec       	ldi	r30, 0xC8	; 200
    9f8a:	ff e4       	ldi	r31, 0x4F	; 79
    9f8c:	0c 94 e0 e5 	jmp	0x1cbc0	; 0x1cbc0 <__prologue_saves__>
    9f90:	42 30       	cpi	r20, 0x02	; 2
    9f92:	51 05       	cpc	r21, r1
    9f94:	61 05       	cpc	r22, r1
    9f96:	71 05       	cpc	r23, r1
    9f98:	08 f4       	brcc	.+2      	; 0x9f9c <put_fat+0x18>
    9f9a:	eb c0       	rjmp	.+470    	; 0xa172 <put_fat+0x1ee>
    9f9c:	dc 01       	movw	r26, r24
    9f9e:	59 96       	adiw	r26, 0x19	; 25
    9fa0:	cd 90       	ld	r12, X+
    9fa2:	dd 90       	ld	r13, X+
    9fa4:	ed 90       	ld	r14, X+
    9fa6:	fc 90       	ld	r15, X
    9fa8:	5c 97       	sbiw	r26, 0x1c	; 28
    9faa:	4c 15       	cp	r20, r12
    9fac:	5d 05       	cpc	r21, r13
    9fae:	6e 05       	cpc	r22, r14
    9fb0:	7f 05       	cpc	r23, r15
    9fb2:	08 f0       	brcs	.+2      	; 0x9fb6 <put_fat+0x32>
    9fb4:	de c0       	rjmp	.+444    	; 0xa172 <put_fat+0x1ee>
    9fb6:	28 01       	movw	r4, r16
    9fb8:	39 01       	movw	r6, r18
    9fba:	6a 01       	movw	r12, r20
    9fbc:	7b 01       	movw	r14, r22
    9fbe:	9e 83       	std	Y+6, r25	; 0x06
    9fc0:	8d 83       	std	Y+5, r24	; 0x05
    9fc2:	fc 01       	movw	r30, r24
    9fc4:	80 81       	ld	r24, Z
    9fc6:	82 30       	cpi	r24, 0x02	; 2
    9fc8:	09 f4       	brne	.+2      	; 0x9fcc <put_fat+0x48>
    9fca:	73 c0       	rjmp	.+230    	; 0xa0b2 <put_fat+0x12e>
    9fcc:	83 30       	cpi	r24, 0x03	; 3
    9fce:	09 f4       	brne	.+2      	; 0x9fd2 <put_fat+0x4e>
    9fd0:	92 c0       	rjmp	.+292    	; 0xa0f6 <put_fat+0x172>
    9fd2:	81 30       	cpi	r24, 0x01	; 1
    9fd4:	09 f0       	breq	.+2      	; 0x9fd8 <put_fat+0x54>
    9fd6:	cd c0       	rjmp	.+410    	; 0xa172 <put_fat+0x1ee>
    9fd8:	4a 01       	movw	r8, r20
    9fda:	96 94       	lsr	r9
    9fdc:	87 94       	ror	r8
    9fde:	84 0e       	add	r8, r20
    9fe0:	95 1e       	adc	r9, r21
    9fe2:	c4 01       	movw	r24, r8
    9fe4:	89 2f       	mov	r24, r25
    9fe6:	99 27       	eor	r25, r25
    9fe8:	86 95       	lsr	r24
    9fea:	45 a1       	ldd	r20, Z+37	; 0x25
    9fec:	56 a1       	ldd	r21, Z+38	; 0x26
    9fee:	67 a1       	ldd	r22, Z+39	; 0x27
    9ff0:	70 a5       	ldd	r23, Z+40	; 0x28
    9ff2:	48 0f       	add	r20, r24
    9ff4:	59 1f       	adc	r21, r25
    9ff6:	61 1d       	adc	r22, r1
    9ff8:	71 1d       	adc	r23, r1
    9ffa:	cf 01       	movw	r24, r30
    9ffc:	e6 dc       	rcall	.-1588   	; 0x99ca <move_window>
    9ffe:	5c 01       	movw	r10, r24
    a000:	89 2b       	or	r24, r25
    a002:	09 f0       	breq	.+2      	; 0xa006 <put_fat+0x82>
    a004:	b9 c0       	rjmp	.+370    	; 0xa178 <put_fat+0x1f4>
    a006:	2d 80       	ldd	r2, Y+5	; 0x05
    a008:	3e 80       	ldd	r3, Y+6	; 0x06
    a00a:	f5 e3       	ldi	r31, 0x35	; 53
    a00c:	2f 0e       	add	r2, r31
    a00e:	31 1c       	adc	r3, r1
    a010:	84 01       	movw	r16, r8
    a012:	0f 5f       	subi	r16, 0xFF	; 255
    a014:	1f 4f       	sbci	r17, 0xFF	; 255
    a016:	21 e0       	ldi	r18, 0x01	; 1
    a018:	92 22       	and	r9, r18
    a01a:	f1 01       	movw	r30, r2
    a01c:	e8 0d       	add	r30, r8
    a01e:	f9 1d       	adc	r31, r9
    a020:	d7 01       	movw	r26, r14
    a022:	c6 01       	movw	r24, r12
    a024:	81 70       	andi	r24, 0x01	; 1
    a026:	99 27       	eor	r25, r25
    a028:	aa 27       	eor	r26, r26
    a02a:	bb 27       	eor	r27, r27
    a02c:	89 83       	std	Y+1, r24	; 0x01
    a02e:	9a 83       	std	Y+2, r25	; 0x02
    a030:	ab 83       	std	Y+3, r26	; 0x03
    a032:	bc 83       	std	Y+4, r27	; 0x04
    a034:	c0 fe       	sbrs	r12, 0
    a036:	09 c0       	rjmp	.+18     	; 0xa04a <put_fat+0xc6>
    a038:	80 81       	ld	r24, Z
    a03a:	28 2f       	mov	r18, r24
    a03c:	2f 70       	andi	r18, 0x0F	; 15
    a03e:	a0 e1       	ldi	r26, 0x10	; 16
    a040:	4a 9e       	mul	r4, r26
    a042:	c0 01       	movw	r24, r0
    a044:	11 24       	eor	r1, r1
    a046:	82 2b       	or	r24, r18
    a048:	01 c0       	rjmp	.+2      	; 0xa04c <put_fat+0xc8>
    a04a:	84 2d       	mov	r24, r4
    a04c:	80 83       	st	Z, r24
    a04e:	81 e0       	ldi	r24, 0x01	; 1
    a050:	ed 81       	ldd	r30, Y+5	; 0x05
    a052:	fe 81       	ldd	r31, Y+6	; 0x06
    a054:	83 83       	std	Z+3, r24	; 0x03
    a056:	45 a1       	ldd	r20, Z+37	; 0x25
    a058:	56 a1       	ldd	r21, Z+38	; 0x26
    a05a:	67 a1       	ldd	r22, Z+39	; 0x27
    a05c:	70 a5       	ldd	r23, Z+40	; 0x28
    a05e:	c8 01       	movw	r24, r16
    a060:	89 2f       	mov	r24, r25
    a062:	99 27       	eor	r25, r25
    a064:	86 95       	lsr	r24
    a066:	48 0f       	add	r20, r24
    a068:	59 1f       	adc	r21, r25
    a06a:	61 1d       	adc	r22, r1
    a06c:	71 1d       	adc	r23, r1
    a06e:	cf 01       	movw	r24, r30
    a070:	ac dc       	rcall	.-1704   	; 0x99ca <move_window>
    a072:	5c 01       	movw	r10, r24
    a074:	89 2b       	or	r24, r25
    a076:	09 f0       	breq	.+2      	; 0xa07a <put_fat+0xf6>
    a078:	7f c0       	rjmp	.+254    	; 0xa178 <put_fat+0x1f4>
    a07a:	11 70       	andi	r17, 0x01	; 1
    a07c:	f1 01       	movw	r30, r2
    a07e:	e0 0f       	add	r30, r16
    a080:	f1 1f       	adc	r31, r17
    a082:	89 81       	ldd	r24, Y+1	; 0x01
    a084:	9a 81       	ldd	r25, Y+2	; 0x02
    a086:	ab 81       	ldd	r26, Y+3	; 0x03
    a088:	bc 81       	ldd	r27, Y+4	; 0x04
    a08a:	89 2b       	or	r24, r25
    a08c:	8a 2b       	or	r24, r26
    a08e:	8b 2b       	or	r24, r27
    a090:	41 f0       	breq	.+16     	; 0xa0a2 <put_fat+0x11e>
    a092:	54 e0       	ldi	r21, 0x04	; 4
    a094:	76 94       	lsr	r7
    a096:	67 94       	ror	r6
    a098:	57 94       	ror	r5
    a09a:	47 94       	ror	r4
    a09c:	5a 95       	dec	r21
    a09e:	d1 f7       	brne	.-12     	; 0xa094 <put_fat+0x110>
    a0a0:	06 c0       	rjmp	.+12     	; 0xa0ae <put_fat+0x12a>
    a0a2:	00 81       	ld	r16, Z
    a0a4:	00 7f       	andi	r16, 0xF0	; 240
    a0a6:	85 2d       	mov	r24, r5
    a0a8:	8f 70       	andi	r24, 0x0F	; 15
    a0aa:	40 2e       	mov	r4, r16
    a0ac:	48 2a       	or	r4, r24
    a0ae:	40 82       	st	Z, r4
    a0b0:	5a c0       	rjmp	.+180    	; 0xa166 <put_fat+0x1e2>
    a0b2:	77 27       	eor	r23, r23
    a0b4:	6f 2d       	mov	r22, r15
    a0b6:	5e 2d       	mov	r21, r14
    a0b8:	4d 2d       	mov	r20, r13
    a0ba:	ed 81       	ldd	r30, Y+5	; 0x05
    a0bc:	fe 81       	ldd	r31, Y+6	; 0x06
    a0be:	85 a1       	ldd	r24, Z+37	; 0x25
    a0c0:	96 a1       	ldd	r25, Z+38	; 0x26
    a0c2:	a7 a1       	ldd	r26, Z+39	; 0x27
    a0c4:	b0 a5       	ldd	r27, Z+40	; 0x28
    a0c6:	48 0f       	add	r20, r24
    a0c8:	59 1f       	adc	r21, r25
    a0ca:	6a 1f       	adc	r22, r26
    a0cc:	7b 1f       	adc	r23, r27
    a0ce:	cf 01       	movw	r24, r30
    a0d0:	7c dc       	rcall	.-1800   	; 0x99ca <move_window>
    a0d2:	5c 01       	movw	r10, r24
    a0d4:	89 2b       	or	r24, r25
    a0d6:	09 f0       	breq	.+2      	; 0xa0da <put_fat+0x156>
    a0d8:	4f c0       	rjmp	.+158    	; 0xa178 <put_fat+0x1f4>
    a0da:	ed 81       	ldd	r30, Y+5	; 0x05
    a0dc:	fe 81       	ldd	r31, Y+6	; 0x06
    a0de:	f5 96       	adiw	r30, 0x35	; 53
    a0e0:	cc 0c       	add	r12, r12
    a0e2:	dd 1c       	adc	r13, r13
    a0e4:	e8 94       	clt
    a0e6:	c0 f8       	bld	r12, 0
    a0e8:	21 e0       	ldi	r18, 0x01	; 1
    a0ea:	d2 22       	and	r13, r18
    a0ec:	ec 0d       	add	r30, r12
    a0ee:	fd 1d       	adc	r31, r13
    a0f0:	40 82       	st	Z, r4
    a0f2:	51 82       	std	Z+1, r5	; 0x01
    a0f4:	38 c0       	rjmp	.+112    	; 0xa166 <put_fat+0x1e2>
    a0f6:	ed 81       	ldd	r30, Y+5	; 0x05
    a0f8:	fe 81       	ldd	r31, Y+6	; 0x06
    a0fa:	85 a1       	ldd	r24, Z+37	; 0x25
    a0fc:	96 a1       	ldd	r25, Z+38	; 0x26
    a0fe:	a7 a1       	ldd	r26, Z+39	; 0x27
    a100:	b0 a5       	ldd	r27, Z+40	; 0x28
    a102:	27 e0       	ldi	r18, 0x07	; 7
    a104:	76 95       	lsr	r23
    a106:	67 95       	ror	r22
    a108:	57 95       	ror	r21
    a10a:	47 95       	ror	r20
    a10c:	2a 95       	dec	r18
    a10e:	d1 f7       	brne	.-12     	; 0xa104 <put_fat+0x180>
    a110:	48 0f       	add	r20, r24
    a112:	59 1f       	adc	r21, r25
    a114:	6a 1f       	adc	r22, r26
    a116:	7b 1f       	adc	r23, r27
    a118:	cf 01       	movw	r24, r30
    a11a:	57 dc       	rcall	.-1874   	; 0x99ca <move_window>
    a11c:	5c 01       	movw	r10, r24
    a11e:	89 2b       	or	r24, r25
    a120:	59 f5       	brne	.+86     	; 0xa178 <put_fat+0x1f4>
    a122:	4d 81       	ldd	r20, Y+5	; 0x05
    a124:	5e 81       	ldd	r21, Y+6	; 0x06
    a126:	4b 5c       	subi	r20, 0xCB	; 203
    a128:	5f 4f       	sbci	r21, 0xFF	; 255
    a12a:	cc 0c       	add	r12, r12
    a12c:	dd 1c       	adc	r13, r13
    a12e:	cc 0c       	add	r12, r12
    a130:	dd 1c       	adc	r13, r13
    a132:	fc ef       	ldi	r31, 0xFC	; 252
    a134:	cf 22       	and	r12, r31
    a136:	f1 e0       	ldi	r31, 0x01	; 1
    a138:	df 22       	and	r13, r31
    a13a:	c4 0e       	add	r12, r20
    a13c:	d5 1e       	adc	r13, r21
    a13e:	c6 01       	movw	r24, r12
    a140:	0e 94 01 48 	call	0x9002	; 0x9002 <ld_dword>
    a144:	2f e0       	ldi	r18, 0x0F	; 15
    a146:	72 22       	and	r7, r18
    a148:	dc 01       	movw	r26, r24
    a14a:	cb 01       	movw	r24, r22
    a14c:	88 27       	eor	r24, r24
    a14e:	99 27       	eor	r25, r25
    a150:	aa 27       	eor	r26, r26
    a152:	b0 7f       	andi	r27, 0xF0	; 240
    a154:	b3 01       	movw	r22, r6
    a156:	a2 01       	movw	r20, r4
    a158:	48 2b       	or	r20, r24
    a15a:	59 2b       	or	r21, r25
    a15c:	6a 2b       	or	r22, r26
    a15e:	7b 2b       	or	r23, r27
    a160:	c6 01       	movw	r24, r12
    a162:	0e 94 16 48 	call	0x902c	; 0x902c <st_dword>
    a166:	81 e0       	ldi	r24, 0x01	; 1
    a168:	ad 81       	ldd	r26, Y+5	; 0x05
    a16a:	be 81       	ldd	r27, Y+6	; 0x06
    a16c:	13 96       	adiw	r26, 0x03	; 3
    a16e:	8c 93       	st	X, r24
    a170:	03 c0       	rjmp	.+6      	; 0xa178 <put_fat+0x1f4>
    a172:	82 e0       	ldi	r24, 0x02	; 2
    a174:	a8 2e       	mov	r10, r24
    a176:	b1 2c       	mov	r11, r1
    a178:	c5 01       	movw	r24, r10
    a17a:	26 96       	adiw	r28, 0x06	; 6
    a17c:	e2 e1       	ldi	r30, 0x12	; 18
    a17e:	0c 94 fc e5 	jmp	0x1cbf8	; 0x1cbf8 <__epilogue_restores__>

0000a182 <get_fat.isra.10>:
    a182:	a0 e0       	ldi	r26, 0x00	; 0
    a184:	b0 e0       	ldi	r27, 0x00	; 0
    a186:	e7 ec       	ldi	r30, 0xC7	; 199
    a188:	f0 e5       	ldi	r31, 0x50	; 80
    a18a:	0c 94 e8 e5 	jmp	0x1cbd0	; 0x1cbd0 <__prologue_saves__+0x10>
    a18e:	42 30       	cpi	r20, 0x02	; 2
    a190:	51 05       	cpc	r21, r1
    a192:	61 05       	cpc	r22, r1
    a194:	71 05       	cpc	r23, r1
    a196:	08 f4       	brcc	.+2      	; 0xa19a <get_fat.isra.10+0x18>
    a198:	9f c0       	rjmp	.+318    	; 0xa2d8 <get_fat.isra.10+0x156>
    a19a:	fc 01       	movw	r30, r24
    a19c:	01 8d       	ldd	r16, Z+25	; 0x19
    a19e:	12 8d       	ldd	r17, Z+26	; 0x1a
    a1a0:	23 8d       	ldd	r18, Z+27	; 0x1b
    a1a2:	34 8d       	ldd	r19, Z+28	; 0x1c
    a1a4:	40 17       	cp	r20, r16
    a1a6:	51 07       	cpc	r21, r17
    a1a8:	62 07       	cpc	r22, r18
    a1aa:	73 07       	cpc	r23, r19
    a1ac:	08 f0       	brcs	.+2      	; 0xa1b0 <get_fat.isra.10+0x2e>
    a1ae:	94 c0       	rjmp	.+296    	; 0xa2d8 <get_fat.isra.10+0x156>
    a1b0:	6a 01       	movw	r12, r20
    a1b2:	7b 01       	movw	r14, r22
    a1b4:	8c 01       	movw	r16, r24
    a1b6:	80 81       	ld	r24, Z
    a1b8:	82 30       	cpi	r24, 0x02	; 2
    a1ba:	09 f4       	brne	.+2      	; 0xa1be <get_fat.isra.10+0x3c>
    a1bc:	4b c0       	rjmp	.+150    	; 0xa254 <get_fat.isra.10+0xd2>
    a1be:	83 30       	cpi	r24, 0x03	; 3
    a1c0:	09 f4       	brne	.+2      	; 0xa1c4 <get_fat.isra.10+0x42>
    a1c2:	67 c0       	rjmp	.+206    	; 0xa292 <get_fat.isra.10+0x110>
    a1c4:	81 30       	cpi	r24, 0x01	; 1
    a1c6:	09 f0       	breq	.+2      	; 0xa1ca <get_fat.isra.10+0x48>
    a1c8:	87 c0       	rjmp	.+270    	; 0xa2d8 <get_fat.isra.10+0x156>
    a1ca:	ea 01       	movw	r28, r20
    a1cc:	d6 95       	lsr	r29
    a1ce:	c7 95       	ror	r28
    a1d0:	cc 0d       	add	r28, r12
    a1d2:	dd 1d       	adc	r29, r13
    a1d4:	ce 01       	movw	r24, r28
    a1d6:	89 2f       	mov	r24, r25
    a1d8:	99 27       	eor	r25, r25
    a1da:	86 95       	lsr	r24
    a1dc:	45 a1       	ldd	r20, Z+37	; 0x25
    a1de:	56 a1       	ldd	r21, Z+38	; 0x26
    a1e0:	67 a1       	ldd	r22, Z+39	; 0x27
    a1e2:	70 a5       	ldd	r23, Z+40	; 0x28
    a1e4:	48 0f       	add	r20, r24
    a1e6:	59 1f       	adc	r21, r25
    a1e8:	61 1d       	adc	r22, r1
    a1ea:	71 1d       	adc	r23, r1
    a1ec:	cf 01       	movw	r24, r30
    a1ee:	ed db       	rcall	.-2086   	; 0x99ca <move_window>
    a1f0:	89 2b       	or	r24, r25
    a1f2:	21 f0       	breq	.+8      	; 0xa1fc <get_fat.isra.10+0x7a>
    a1f4:	6f ef       	ldi	r22, 0xFF	; 255
    a1f6:	7f ef       	ldi	r23, 0xFF	; 255
    a1f8:	cb 01       	movw	r24, r22
    a1fa:	72 c0       	rjmp	.+228    	; 0xa2e0 <get_fat.isra.10+0x15e>
    a1fc:	5e 01       	movw	r10, r28
    a1fe:	ff ef       	ldi	r31, 0xFF	; 255
    a200:	af 1a       	sub	r10, r31
    a202:	bf 0a       	sbc	r11, r31
    a204:	d1 70       	andi	r29, 0x01	; 1
    a206:	c0 0f       	add	r28, r16
    a208:	d1 1f       	adc	r29, r17
    a20a:	cd a9       	ldd	r28, Y+53	; 0x35
    a20c:	c5 01       	movw	r24, r10
    a20e:	89 2f       	mov	r24, r25
    a210:	99 27       	eor	r25, r25
    a212:	86 95       	lsr	r24
    a214:	f8 01       	movw	r30, r16
    a216:	45 a1       	ldd	r20, Z+37	; 0x25
    a218:	56 a1       	ldd	r21, Z+38	; 0x26
    a21a:	67 a1       	ldd	r22, Z+39	; 0x27
    a21c:	70 a5       	ldd	r23, Z+40	; 0x28
    a21e:	48 0f       	add	r20, r24
    a220:	59 1f       	adc	r21, r25
    a222:	61 1d       	adc	r22, r1
    a224:	71 1d       	adc	r23, r1
    a226:	c8 01       	movw	r24, r16
    a228:	d0 db       	rcall	.-2144   	; 0x99ca <move_window>
    a22a:	89 2b       	or	r24, r25
    a22c:	19 f7       	brne	.-58     	; 0xa1f4 <get_fat.isra.10+0x72>
    a22e:	f1 e0       	ldi	r31, 0x01	; 1
    a230:	bf 22       	and	r11, r31
    a232:	f8 01       	movw	r30, r16
    a234:	ea 0d       	add	r30, r10
    a236:	fb 1d       	adc	r31, r11
    a238:	85 a9       	ldd	r24, Z+53	; 0x35
    a23a:	6c 2f       	mov	r22, r28
    a23c:	70 e0       	ldi	r23, 0x00	; 0
    a23e:	78 2b       	or	r23, r24
    a240:	c0 fe       	sbrs	r12, 0
    a242:	06 c0       	rjmp	.+12     	; 0xa250 <get_fat.isra.10+0xce>
    a244:	54 e0       	ldi	r21, 0x04	; 4
    a246:	76 95       	lsr	r23
    a248:	67 95       	ror	r22
    a24a:	5a 95       	dec	r21
    a24c:	e1 f7       	brne	.-8      	; 0xa246 <get_fat.isra.10+0xc4>
    a24e:	1e c0       	rjmp	.+60     	; 0xa28c <get_fat.isra.10+0x10a>
    a250:	7f 70       	andi	r23, 0x0F	; 15
    a252:	1c c0       	rjmp	.+56     	; 0xa28c <get_fat.isra.10+0x10a>
    a254:	77 27       	eor	r23, r23
    a256:	6f 2d       	mov	r22, r15
    a258:	5e 2d       	mov	r21, r14
    a25a:	4d 2d       	mov	r20, r13
    a25c:	85 a1       	ldd	r24, Z+37	; 0x25
    a25e:	96 a1       	ldd	r25, Z+38	; 0x26
    a260:	a7 a1       	ldd	r26, Z+39	; 0x27
    a262:	b0 a5       	ldd	r27, Z+40	; 0x28
    a264:	48 0f       	add	r20, r24
    a266:	59 1f       	adc	r21, r25
    a268:	6a 1f       	adc	r22, r26
    a26a:	7b 1f       	adc	r23, r27
    a26c:	cf 01       	movw	r24, r30
    a26e:	ad db       	rcall	.-2214   	; 0x99ca <move_window>
    a270:	89 2b       	or	r24, r25
    a272:	09 f0       	breq	.+2      	; 0xa276 <get_fat.isra.10+0xf4>
    a274:	bf cf       	rjmp	.-130    	; 0xa1f4 <get_fat.isra.10+0x72>
    a276:	cc 0c       	add	r12, r12
    a278:	dd 1c       	adc	r13, r13
    a27a:	e8 94       	clt
    a27c:	c0 f8       	bld	r12, 0
    a27e:	f1 e0       	ldi	r31, 0x01	; 1
    a280:	df 22       	and	r13, r31
    a282:	f8 01       	movw	r30, r16
    a284:	ec 0d       	add	r30, r12
    a286:	fd 1d       	adc	r31, r13
    a288:	65 a9       	ldd	r22, Z+53	; 0x35
    a28a:	76 a9       	ldd	r23, Z+54	; 0x36
    a28c:	80 e0       	ldi	r24, 0x00	; 0
    a28e:	90 e0       	ldi	r25, 0x00	; 0
    a290:	27 c0       	rjmp	.+78     	; 0xa2e0 <get_fat.isra.10+0x15e>
    a292:	85 a1       	ldd	r24, Z+37	; 0x25
    a294:	96 a1       	ldd	r25, Z+38	; 0x26
    a296:	a7 a1       	ldd	r26, Z+39	; 0x27
    a298:	b0 a5       	ldd	r27, Z+40	; 0x28
    a29a:	27 e0       	ldi	r18, 0x07	; 7
    a29c:	76 95       	lsr	r23
    a29e:	67 95       	ror	r22
    a2a0:	57 95       	ror	r21
    a2a2:	47 95       	ror	r20
    a2a4:	2a 95       	dec	r18
    a2a6:	d1 f7       	brne	.-12     	; 0xa29c <get_fat.isra.10+0x11a>
    a2a8:	48 0f       	add	r20, r24
    a2aa:	59 1f       	adc	r21, r25
    a2ac:	6a 1f       	adc	r22, r26
    a2ae:	7b 1f       	adc	r23, r27
    a2b0:	cf 01       	movw	r24, r30
    a2b2:	8b db       	rcall	.-2282   	; 0x99ca <move_window>
    a2b4:	89 2b       	or	r24, r25
    a2b6:	09 f0       	breq	.+2      	; 0xa2ba <get_fat.isra.10+0x138>
    a2b8:	9d cf       	rjmp	.-198    	; 0xa1f4 <get_fat.isra.10+0x72>
    a2ba:	0b 5c       	subi	r16, 0xCB	; 203
    a2bc:	1f 4f       	sbci	r17, 0xFF	; 255
    a2be:	cc 0c       	add	r12, r12
    a2c0:	dd 1c       	adc	r13, r13
    a2c2:	cc 0c       	add	r12, r12
    a2c4:	dd 1c       	adc	r13, r13
    a2c6:	c6 01       	movw	r24, r12
    a2c8:	8c 7f       	andi	r24, 0xFC	; 252
    a2ca:	91 70       	andi	r25, 0x01	; 1
    a2cc:	80 0f       	add	r24, r16
    a2ce:	91 1f       	adc	r25, r17
    a2d0:	0e 94 01 48 	call	0x9002	; 0x9002 <ld_dword>
    a2d4:	9f 70       	andi	r25, 0x0F	; 15
    a2d6:	04 c0       	rjmp	.+8      	; 0xa2e0 <get_fat.isra.10+0x15e>
    a2d8:	61 e0       	ldi	r22, 0x01	; 1
    a2da:	70 e0       	ldi	r23, 0x00	; 0
    a2dc:	80 e0       	ldi	r24, 0x00	; 0
    a2de:	90 e0       	ldi	r25, 0x00	; 0
    a2e0:	cd b7       	in	r28, 0x3d	; 61
    a2e2:	de b7       	in	r29, 0x3e	; 62
    a2e4:	ea e0       	ldi	r30, 0x0A	; 10
    a2e6:	0c 94 04 e6 	jmp	0x1cc08	; 0x1cc08 <__epilogue_restores__+0x10>

0000a2ea <dir_sdi>:
    a2ea:	a0 e0       	ldi	r26, 0x00	; 0
    a2ec:	b0 e0       	ldi	r27, 0x00	; 0
    a2ee:	eb e7       	ldi	r30, 0x7B	; 123
    a2f0:	f1 e5       	ldi	r31, 0x51	; 81
    a2f2:	0c 94 e2 e5 	jmp	0x1cbc4	; 0x1cbc4 <__prologue_saves__+0x4>
    a2f6:	ec 01       	movw	r28, r24
    a2f8:	6a 01       	movw	r12, r20
    a2fa:	7b 01       	movw	r14, r22
    a2fc:	41 15       	cp	r20, r1
    a2fe:	51 05       	cpc	r21, r1
    a300:	80 e2       	ldi	r24, 0x20	; 32
    a302:	68 07       	cpc	r22, r24
    a304:	71 05       	cpc	r23, r1
    a306:	18 f0       	brcs	.+6      	; 0xa30e <dir_sdi+0x24>
    a308:	82 e0       	ldi	r24, 0x02	; 2
    a30a:	90 e0       	ldi	r25, 0x00	; 0
    a30c:	aa c0       	rjmp	.+340    	; 0xa462 <dir_sdi+0x178>
    a30e:	db 01       	movw	r26, r22
    a310:	ca 01       	movw	r24, r20
    a312:	8f 71       	andi	r24, 0x1F	; 31
    a314:	99 27       	eor	r25, r25
    a316:	aa 27       	eor	r26, r26
    a318:	bb 27       	eor	r27, r27
    a31a:	89 2b       	or	r24, r25
    a31c:	8a 2b       	or	r24, r26
    a31e:	8b 2b       	or	r24, r27
    a320:	99 f7       	brne	.-26     	; 0xa308 <dir_sdi+0x1e>
    a322:	08 81       	ld	r16, Y
    a324:	19 81       	ldd	r17, Y+1	; 0x01
    a326:	4e 87       	std	Y+14, r20	; 0x0e
    a328:	5f 87       	std	Y+15, r21	; 0x0f
    a32a:	68 8b       	std	Y+16, r22	; 0x10
    a32c:	79 8b       	std	Y+17, r23	; 0x11
    a32e:	8e 80       	ldd	r8, Y+6	; 0x06
    a330:	9f 80       	ldd	r9, Y+7	; 0x07
    a332:	a8 84       	ldd	r10, Y+8	; 0x08
    a334:	b9 84       	ldd	r11, Y+9	; 0x09
    a336:	81 14       	cp	r8, r1
    a338:	91 04       	cpc	r9, r1
    a33a:	a1 04       	cpc	r10, r1
    a33c:	b1 04       	cpc	r11, r1
    a33e:	51 f5       	brne	.+84     	; 0xa394 <dir_sdi+0xaa>
    a340:	f8 01       	movw	r30, r16
    a342:	80 81       	ld	r24, Z
    a344:	83 30       	cpi	r24, 0x03	; 3
    a346:	40 f0       	brcs	.+16     	; 0xa358 <dir_sdi+0x6e>
    a348:	81 a5       	ldd	r24, Z+41	; 0x29
    a34a:	92 a5       	ldd	r25, Z+42	; 0x2a
    a34c:	a3 a5       	ldd	r26, Z+43	; 0x2b
    a34e:	b4 a5       	ldd	r27, Z+44	; 0x2c
    a350:	00 97       	sbiw	r24, 0x00	; 0
    a352:	a1 05       	cpc	r26, r1
    a354:	b1 05       	cpc	r27, r1
    a356:	e1 f4       	brne	.+56     	; 0xa390 <dir_sdi+0xa6>
    a358:	f8 01       	movw	r30, r16
    a35a:	87 81       	ldd	r24, Z+7	; 0x07
    a35c:	90 85       	ldd	r25, Z+8	; 0x08
    a35e:	a0 e0       	ldi	r26, 0x00	; 0
    a360:	b0 e0       	ldi	r27, 0x00	; 0
    a362:	b7 01       	movw	r22, r14
    a364:	a6 01       	movw	r20, r12
    a366:	25 e0       	ldi	r18, 0x05	; 5
    a368:	76 95       	lsr	r23
    a36a:	67 95       	ror	r22
    a36c:	57 95       	ror	r21
    a36e:	47 95       	ror	r20
    a370:	2a 95       	dec	r18
    a372:	d1 f7       	brne	.-12     	; 0xa368 <dir_sdi+0x7e>
    a374:	48 17       	cp	r20, r24
    a376:	59 07       	cpc	r21, r25
    a378:	6a 07       	cpc	r22, r26
    a37a:	7b 07       	cpc	r23, r27
    a37c:	28 f6       	brcc	.-118    	; 0xa308 <dir_sdi+0x1e>
    a37e:	81 a5       	ldd	r24, Z+41	; 0x29
    a380:	92 a5       	ldd	r25, Z+42	; 0x2a
    a382:	a3 a5       	ldd	r26, Z+43	; 0x2b
    a384:	b4 a5       	ldd	r27, Z+44	; 0x2c
    a386:	8e 8b       	std	Y+22, r24	; 0x16
    a388:	9f 8b       	std	Y+23, r25	; 0x17
    a38a:	a8 8f       	std	Y+24, r26	; 0x18
    a38c:	b9 8f       	std	Y+25, r27	; 0x19
    a38e:	3e c0       	rjmp	.+124    	; 0xa40c <dir_sdi+0x122>
    a390:	4c 01       	movw	r8, r24
    a392:	5d 01       	movw	r10, r26
    a394:	f8 01       	movw	r30, r16
    a396:	41 84       	ldd	r4, Z+9	; 0x09
    a398:	52 84       	ldd	r5, Z+10	; 0x0a
    a39a:	61 2c       	mov	r6, r1
    a39c:	71 2c       	mov	r7, r1
    a39e:	39 e0       	ldi	r19, 0x09	; 9
    a3a0:	44 0c       	add	r4, r4
    a3a2:	55 1c       	adc	r5, r5
    a3a4:	66 1c       	adc	r6, r6
    a3a6:	77 1c       	adc	r7, r7
    a3a8:	3a 95       	dec	r19
    a3aa:	d1 f7       	brne	.-12     	; 0xa3a0 <dir_sdi+0xb6>
    a3ac:	b5 01       	movw	r22, r10
    a3ae:	a4 01       	movw	r20, r8
    a3b0:	c4 14       	cp	r12, r4
    a3b2:	d5 04       	cpc	r13, r5
    a3b4:	e6 04       	cpc	r14, r6
    a3b6:	f7 04       	cpc	r15, r7
    a3b8:	10 f1       	brcs	.+68     	; 0xa3fe <dir_sdi+0x114>
    a3ba:	88 81       	ld	r24, Y
    a3bc:	99 81       	ldd	r25, Y+1	; 0x01
    a3be:	e1 de       	rcall	.-574    	; 0xa182 <get_fat.isra.10>
    a3c0:	4b 01       	movw	r8, r22
    a3c2:	5c 01       	movw	r10, r24
    a3c4:	6f 3f       	cpi	r22, 0xFF	; 255
    a3c6:	7f 4f       	sbci	r23, 0xFF	; 255
    a3c8:	8f 4f       	sbci	r24, 0xFF	; 255
    a3ca:	9f 4f       	sbci	r25, 0xFF	; 255
    a3cc:	09 f4       	brne	.+2      	; 0xa3d0 <dir_sdi+0xe6>
    a3ce:	47 c0       	rjmp	.+142    	; 0xa45e <dir_sdi+0x174>
    a3d0:	82 e0       	ldi	r24, 0x02	; 2
    a3d2:	88 16       	cp	r8, r24
    a3d4:	91 04       	cpc	r9, r1
    a3d6:	a1 04       	cpc	r10, r1
    a3d8:	b1 04       	cpc	r11, r1
    a3da:	08 f4       	brcc	.+2      	; 0xa3de <dir_sdi+0xf4>
    a3dc:	95 cf       	rjmp	.-214    	; 0xa308 <dir_sdi+0x1e>
    a3de:	f8 01       	movw	r30, r16
    a3e0:	81 8d       	ldd	r24, Z+25	; 0x19
    a3e2:	92 8d       	ldd	r25, Z+26	; 0x1a
    a3e4:	a3 8d       	ldd	r26, Z+27	; 0x1b
    a3e6:	b4 8d       	ldd	r27, Z+28	; 0x1c
    a3e8:	88 16       	cp	r8, r24
    a3ea:	99 06       	cpc	r9, r25
    a3ec:	aa 06       	cpc	r10, r26
    a3ee:	bb 06       	cpc	r11, r27
    a3f0:	08 f0       	brcs	.+2      	; 0xa3f4 <dir_sdi+0x10a>
    a3f2:	8a cf       	rjmp	.-236    	; 0xa308 <dir_sdi+0x1e>
    a3f4:	c4 18       	sub	r12, r4
    a3f6:	d5 08       	sbc	r13, r5
    a3f8:	e6 08       	sbc	r14, r6
    a3fa:	f7 08       	sbc	r15, r7
    a3fc:	d7 cf       	rjmp	.-82     	; 0xa3ac <dir_sdi+0xc2>
    a3fe:	c8 01       	movw	r24, r16
    a400:	0e 94 ba 48 	call	0x9174	; 0x9174 <clst2sect>
    a404:	6e 8b       	std	Y+22, r22	; 0x16
    a406:	7f 8b       	std	Y+23, r23	; 0x17
    a408:	88 8f       	std	Y+24, r24	; 0x18
    a40a:	99 8f       	std	Y+25, r25	; 0x19
    a40c:	8a 8a       	std	Y+18, r8	; 0x12
    a40e:	9b 8a       	std	Y+19, r9	; 0x13
    a410:	ac 8a       	std	Y+20, r10	; 0x14
    a412:	bd 8a       	std	Y+21, r11	; 0x15
    a414:	8e 89       	ldd	r24, Y+22	; 0x16
    a416:	9f 89       	ldd	r25, Y+23	; 0x17
    a418:	a8 8d       	ldd	r26, Y+24	; 0x18
    a41a:	b9 8d       	ldd	r27, Y+25	; 0x19
    a41c:	00 97       	sbiw	r24, 0x00	; 0
    a41e:	a1 05       	cpc	r26, r1
    a420:	b1 05       	cpc	r27, r1
    a422:	09 f4       	brne	.+2      	; 0xa426 <dir_sdi+0x13c>
    a424:	71 cf       	rjmp	.-286    	; 0xa308 <dir_sdi+0x1e>
    a426:	b7 01       	movw	r22, r14
    a428:	a6 01       	movw	r20, r12
    a42a:	29 e0       	ldi	r18, 0x09	; 9
    a42c:	76 95       	lsr	r23
    a42e:	67 95       	ror	r22
    a430:	57 95       	ror	r21
    a432:	47 95       	ror	r20
    a434:	2a 95       	dec	r18
    a436:	d1 f7       	brne	.-12     	; 0xa42c <dir_sdi+0x142>
    a438:	84 0f       	add	r24, r20
    a43a:	95 1f       	adc	r25, r21
    a43c:	a6 1f       	adc	r26, r22
    a43e:	b7 1f       	adc	r27, r23
    a440:	8e 8b       	std	Y+22, r24	; 0x16
    a442:	9f 8b       	std	Y+23, r25	; 0x17
    a444:	a8 8f       	std	Y+24, r26	; 0x18
    a446:	b9 8f       	std	Y+25, r27	; 0x19
    a448:	0b 5c       	subi	r16, 0xCB	; 203
    a44a:	1f 4f       	sbci	r17, 0xFF	; 255
    a44c:	f1 e0       	ldi	r31, 0x01	; 1
    a44e:	df 22       	and	r13, r31
    a450:	c0 0e       	add	r12, r16
    a452:	d1 1e       	adc	r13, r17
    a454:	db 8e       	std	Y+27, r13	; 0x1b
    a456:	ca 8e       	std	Y+26, r12	; 0x1a
    a458:	80 e0       	ldi	r24, 0x00	; 0
    a45a:	90 e0       	ldi	r25, 0x00	; 0
    a45c:	02 c0       	rjmp	.+4      	; 0xa462 <dir_sdi+0x178>
    a45e:	81 e0       	ldi	r24, 0x01	; 1
    a460:	90 e0       	ldi	r25, 0x00	; 0
    a462:	cd b7       	in	r28, 0x3d	; 61
    a464:	de b7       	in	r29, 0x3e	; 62
    a466:	e0 e1       	ldi	r30, 0x10	; 16
    a468:	0c 94 fe e5 	jmp	0x1cbfc	; 0x1cbfc <__epilogue_restores__+0x4>

0000a46c <create_chain>:
    a46c:	a0 e0       	ldi	r26, 0x00	; 0
    a46e:	b0 e0       	ldi	r27, 0x00	; 0
    a470:	ec e3       	ldi	r30, 0x3C	; 60
    a472:	f2 e5       	ldi	r31, 0x52	; 82
    a474:	0c 94 e2 e5 	jmp	0x1cbc4	; 0x1cbc4 <__prologue_saves__+0x4>
    a478:	8c 01       	movw	r16, r24
    a47a:	2a 01       	movw	r4, r20
    a47c:	3b 01       	movw	r6, r22
    a47e:	fc 01       	movw	r30, r24
    a480:	c0 81       	ld	r28, Z
    a482:	d1 81       	ldd	r29, Z+1	; 0x01
    a484:	41 15       	cp	r20, r1
    a486:	51 05       	cpc	r21, r1
    a488:	61 05       	cpc	r22, r1
    a48a:	71 05       	cpc	r23, r1
    a48c:	99 f4       	brne	.+38     	; 0xa4b4 <create_chain+0x48>
    a48e:	8d 84       	ldd	r8, Y+13	; 0x0d
    a490:	9e 84       	ldd	r9, Y+14	; 0x0e
    a492:	af 84       	ldd	r10, Y+15	; 0x0f
    a494:	b8 88       	ldd	r11, Y+16	; 0x10
    a496:	81 14       	cp	r8, r1
    a498:	91 04       	cpc	r9, r1
    a49a:	a1 04       	cpc	r10, r1
    a49c:	b1 04       	cpc	r11, r1
    a49e:	51 f1       	breq	.+84     	; 0xa4f4 <create_chain+0x88>
    a4a0:	89 8d       	ldd	r24, Y+25	; 0x19
    a4a2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a4a4:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a4a6:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a4a8:	88 16       	cp	r8, r24
    a4aa:	99 06       	cpc	r9, r25
    a4ac:	aa 06       	cpc	r10, r26
    a4ae:	bb 06       	cpc	r11, r27
    a4b0:	28 f1       	brcs	.+74     	; 0xa4fc <create_chain+0x90>
    a4b2:	20 c0       	rjmp	.+64     	; 0xa4f4 <create_chain+0x88>
    a4b4:	ce 01       	movw	r24, r28
    a4b6:	65 de       	rcall	.-822    	; 0xa182 <get_fat.isra.10>
    a4b8:	62 30       	cpi	r22, 0x02	; 2
    a4ba:	71 05       	cpc	r23, r1
    a4bc:	81 05       	cpc	r24, r1
    a4be:	91 05       	cpc	r25, r1
    a4c0:	08 f4       	brcc	.+2      	; 0xa4c4 <create_chain+0x58>
    a4c2:	ea c0       	rjmp	.+468    	; 0xa698 <create_chain+0x22c>
    a4c4:	6f 3f       	cpi	r22, 0xFF	; 255
    a4c6:	ff ef       	ldi	r31, 0xFF	; 255
    a4c8:	7f 07       	cpc	r23, r31
    a4ca:	8f 07       	cpc	r24, r31
    a4cc:	9f 07       	cpc	r25, r31
    a4ce:	29 f4       	brne	.+10     	; 0xa4da <create_chain+0x6e>
    a4d0:	4f ef       	ldi	r20, 0xFF	; 255
    a4d2:	3f ef       	ldi	r19, 0xFF	; 255
    a4d4:	2f ef       	ldi	r18, 0xFF	; 255
    a4d6:	9f ef       	ldi	r25, 0xFF	; 255
    a4d8:	e7 c0       	rjmp	.+462    	; 0xa6a8 <create_chain+0x23c>
    a4da:	c9 8c       	ldd	r12, Y+25	; 0x19
    a4dc:	da 8c       	ldd	r13, Y+26	; 0x1a
    a4de:	eb 8c       	ldd	r14, Y+27	; 0x1b
    a4e0:	fc 8c       	ldd	r15, Y+28	; 0x1c
    a4e2:	6c 15       	cp	r22, r12
    a4e4:	7d 05       	cpc	r23, r13
    a4e6:	8e 05       	cpc	r24, r14
    a4e8:	9f 05       	cpc	r25, r15
    a4ea:	08 f4       	brcc	.+2      	; 0xa4ee <create_chain+0x82>
    a4ec:	da c0       	rjmp	.+436    	; 0xa6a2 <create_chain+0x236>
    a4ee:	53 01       	movw	r10, r6
    a4f0:	42 01       	movw	r8, r4
    a4f2:	04 c0       	rjmp	.+8      	; 0xa4fc <create_chain+0x90>
    a4f4:	81 2c       	mov	r8, r1
    a4f6:	91 2c       	mov	r9, r1
    a4f8:	54 01       	movw	r10, r8
    a4fa:	83 94       	inc	r8
    a4fc:	89 89       	ldd	r24, Y+17	; 0x11
    a4fe:	9a 89       	ldd	r25, Y+18	; 0x12
    a500:	ab 89       	ldd	r26, Y+19	; 0x13
    a502:	bc 89       	ldd	r27, Y+20	; 0x14
    a504:	89 2b       	or	r24, r25
    a506:	8a 2b       	or	r24, r26
    a508:	8b 2b       	or	r24, r27
    a50a:	11 f4       	brne	.+4      	; 0xa510 <create_chain+0xa4>
    a50c:	40 e0       	ldi	r20, 0x00	; 0
    a50e:	c5 c0       	rjmp	.+394    	; 0xa69a <create_chain+0x22e>
    a510:	84 14       	cp	r8, r4
    a512:	95 04       	cpc	r9, r5
    a514:	a6 04       	cpc	r10, r6
    a516:	b7 04       	cpc	r11, r7
    a518:	09 f0       	breq	.+2      	; 0xa51c <create_chain+0xb0>
    a51a:	46 c0       	rjmp	.+140    	; 0xa5a8 <create_chain+0x13c>
    a51c:	75 01       	movw	r14, r10
    a51e:	64 01       	movw	r12, r8
    a520:	2f ef       	ldi	r18, 0xFF	; 255
    a522:	c2 1a       	sub	r12, r18
    a524:	d2 0a       	sbc	r13, r18
    a526:	e2 0a       	sbc	r14, r18
    a528:	f2 0a       	sbc	r15, r18
    a52a:	89 8d       	ldd	r24, Y+25	; 0x19
    a52c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a52e:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a530:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a532:	c8 16       	cp	r12, r24
    a534:	d9 06       	cpc	r13, r25
    a536:	ea 06       	cpc	r14, r26
    a538:	fb 06       	cpc	r15, r27
    a53a:	28 f0       	brcs	.+10     	; 0xa546 <create_chain+0xda>
    a53c:	92 e0       	ldi	r25, 0x02	; 2
    a53e:	c9 2e       	mov	r12, r25
    a540:	d1 2c       	mov	r13, r1
    a542:	e1 2c       	mov	r14, r1
    a544:	f1 2c       	mov	r15, r1
    a546:	b7 01       	movw	r22, r14
    a548:	a6 01       	movw	r20, r12
    a54a:	f8 01       	movw	r30, r16
    a54c:	80 81       	ld	r24, Z
    a54e:	91 81       	ldd	r25, Z+1	; 0x01
    a550:	18 de       	rcall	.-976    	; 0xa182 <get_fat.isra.10>
    a552:	61 30       	cpi	r22, 0x01	; 1
    a554:	71 05       	cpc	r23, r1
    a556:	81 05       	cpc	r24, r1
    a558:	91 05       	cpc	r25, r1
    a55a:	09 f4       	brne	.+2      	; 0xa55e <create_chain+0xf2>
    a55c:	9d c0       	rjmp	.+314    	; 0xa698 <create_chain+0x22c>
    a55e:	6f 3f       	cpi	r22, 0xFF	; 255
    a560:	ff ef       	ldi	r31, 0xFF	; 255
    a562:	7f 07       	cpc	r23, r31
    a564:	8f 07       	cpc	r24, r31
    a566:	9f 07       	cpc	r25, r31
    a568:	09 f4       	brne	.+2      	; 0xa56c <create_chain+0x100>
    a56a:	b2 cf       	rjmp	.-156    	; 0xa4d0 <create_chain+0x64>
    a56c:	67 2b       	or	r22, r23
    a56e:	68 2b       	or	r22, r24
    a570:	69 2b       	or	r22, r25
    a572:	a9 f0       	breq	.+42     	; 0xa59e <create_chain+0x132>
    a574:	8d 85       	ldd	r24, Y+13	; 0x0d
    a576:	9e 85       	ldd	r25, Y+14	; 0x0e
    a578:	af 85       	ldd	r26, Y+15	; 0x0f
    a57a:	b8 89       	ldd	r27, Y+16	; 0x10
    a57c:	82 30       	cpi	r24, 0x02	; 2
    a57e:	91 05       	cpc	r25, r1
    a580:	a1 05       	cpc	r26, r1
    a582:	b1 05       	cpc	r27, r1
    a584:	88 f0       	brcs	.+34     	; 0xa5a8 <create_chain+0x13c>
    a586:	49 8d       	ldd	r20, Y+25	; 0x19
    a588:	5a 8d       	ldd	r21, Y+26	; 0x1a
    a58a:	6b 8d       	ldd	r22, Y+27	; 0x1b
    a58c:	7c 8d       	ldd	r23, Y+28	; 0x1c
    a58e:	84 17       	cp	r24, r20
    a590:	95 07       	cpc	r25, r21
    a592:	a6 07       	cpc	r26, r22
    a594:	b7 07       	cpc	r27, r23
    a596:	40 f4       	brcc	.+16     	; 0xa5a8 <create_chain+0x13c>
    a598:	4c 01       	movw	r8, r24
    a59a:	5d 01       	movw	r10, r26
    a59c:	05 c0       	rjmp	.+10     	; 0xa5a8 <create_chain+0x13c>
    a59e:	c1 14       	cp	r12, r1
    a5a0:	d1 04       	cpc	r13, r1
    a5a2:	e1 04       	cpc	r14, r1
    a5a4:	f1 04       	cpc	r15, r1
    a5a6:	c9 f5       	brne	.+114    	; 0xa61a <create_chain+0x1ae>
    a5a8:	75 01       	movw	r14, r10
    a5aa:	64 01       	movw	r12, r8
    a5ac:	2f ef       	ldi	r18, 0xFF	; 255
    a5ae:	c2 1a       	sub	r12, r18
    a5b0:	d2 0a       	sbc	r13, r18
    a5b2:	e2 0a       	sbc	r14, r18
    a5b4:	f2 0a       	sbc	r15, r18
    a5b6:	89 8d       	ldd	r24, Y+25	; 0x19
    a5b8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a5ba:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a5bc:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a5be:	c8 16       	cp	r12, r24
    a5c0:	d9 06       	cpc	r13, r25
    a5c2:	ea 06       	cpc	r14, r26
    a5c4:	fb 06       	cpc	r15, r27
    a5c6:	60 f0       	brcs	.+24     	; 0xa5e0 <create_chain+0x174>
    a5c8:	82 e0       	ldi	r24, 0x02	; 2
    a5ca:	88 16       	cp	r8, r24
    a5cc:	91 04       	cpc	r9, r1
    a5ce:	a1 04       	cpc	r10, r1
    a5d0:	b1 04       	cpc	r11, r1
    a5d2:	08 f4       	brcc	.+2      	; 0xa5d6 <create_chain+0x16a>
    a5d4:	9b cf       	rjmp	.-202    	; 0xa50c <create_chain+0xa0>
    a5d6:	82 e0       	ldi	r24, 0x02	; 2
    a5d8:	c8 2e       	mov	r12, r24
    a5da:	d1 2c       	mov	r13, r1
    a5dc:	e1 2c       	mov	r14, r1
    a5de:	f1 2c       	mov	r15, r1
    a5e0:	b7 01       	movw	r22, r14
    a5e2:	a6 01       	movw	r20, r12
    a5e4:	f8 01       	movw	r30, r16
    a5e6:	80 81       	ld	r24, Z
    a5e8:	91 81       	ldd	r25, Z+1	; 0x01
    a5ea:	cb dd       	rcall	.-1130   	; 0xa182 <get_fat.isra.10>
    a5ec:	61 15       	cp	r22, r1
    a5ee:	71 05       	cpc	r23, r1
    a5f0:	81 05       	cpc	r24, r1
    a5f2:	91 05       	cpc	r25, r1
    a5f4:	91 f0       	breq	.+36     	; 0xa61a <create_chain+0x1ae>
    a5f6:	61 30       	cpi	r22, 0x01	; 1
    a5f8:	71 05       	cpc	r23, r1
    a5fa:	81 05       	cpc	r24, r1
    a5fc:	91 05       	cpc	r25, r1
    a5fe:	09 f4       	brne	.+2      	; 0xa602 <create_chain+0x196>
    a600:	4b c0       	rjmp	.+150    	; 0xa698 <create_chain+0x22c>
    a602:	6f 3f       	cpi	r22, 0xFF	; 255
    a604:	7f 4f       	sbci	r23, 0xFF	; 255
    a606:	8f 4f       	sbci	r24, 0xFF	; 255
    a608:	9f 4f       	sbci	r25, 0xFF	; 255
    a60a:	09 f4       	brne	.+2      	; 0xa60e <create_chain+0x1a2>
    a60c:	61 cf       	rjmp	.-318    	; 0xa4d0 <create_chain+0x64>
    a60e:	c8 14       	cp	r12, r8
    a610:	d9 04       	cpc	r13, r9
    a612:	ea 04       	cpc	r14, r10
    a614:	fb 04       	cpc	r15, r11
    a616:	51 f6       	brne	.-108    	; 0xa5ac <create_chain+0x140>
    a618:	79 cf       	rjmp	.-270    	; 0xa50c <create_chain+0xa0>
    a61a:	0f ef       	ldi	r16, 0xFF	; 255
    a61c:	1f ef       	ldi	r17, 0xFF	; 255
    a61e:	98 01       	movw	r18, r16
    a620:	b7 01       	movw	r22, r14
    a622:	a6 01       	movw	r20, r12
    a624:	ce 01       	movw	r24, r28
    a626:	ae dc       	rcall	.-1700   	; 0x9f84 <put_fat>
    a628:	00 97       	sbiw	r24, 0x00	; 0
    a62a:	99 f5       	brne	.+102    	; 0xa692 <create_chain+0x226>
    a62c:	41 14       	cp	r4, r1
    a62e:	51 04       	cpc	r5, r1
    a630:	61 04       	cpc	r6, r1
    a632:	71 04       	cpc	r7, r1
    a634:	e9 f4       	brne	.+58     	; 0xa670 <create_chain+0x204>
    a636:	cd 86       	std	Y+13, r12	; 0x0d
    a638:	de 86       	std	Y+14, r13	; 0x0e
    a63a:	ef 86       	std	Y+15, r14	; 0x0f
    a63c:	f8 8a       	std	Y+16, r15	; 0x10
    a63e:	89 89       	ldd	r24, Y+17	; 0x11
    a640:	9a 89       	ldd	r25, Y+18	; 0x12
    a642:	ab 89       	ldd	r26, Y+19	; 0x13
    a644:	bc 89       	ldd	r27, Y+20	; 0x14
    a646:	49 8d       	ldd	r20, Y+25	; 0x19
    a648:	5a 8d       	ldd	r21, Y+26	; 0x1a
    a64a:	6b 8d       	ldd	r22, Y+27	; 0x1b
    a64c:	7c 8d       	ldd	r23, Y+28	; 0x1c
    a64e:	42 50       	subi	r20, 0x02	; 2
    a650:	51 09       	sbc	r21, r1
    a652:	61 09       	sbc	r22, r1
    a654:	71 09       	sbc	r23, r1
    a656:	48 17       	cp	r20, r24
    a658:	59 07       	cpc	r21, r25
    a65a:	6a 07       	cpc	r22, r26
    a65c:	7b 07       	cpc	r23, r27
    a65e:	88 f0       	brcs	.+34     	; 0xa682 <create_chain+0x216>
    a660:	01 97       	sbiw	r24, 0x01	; 1
    a662:	a1 09       	sbc	r26, r1
    a664:	b1 09       	sbc	r27, r1
    a666:	89 8b       	std	Y+17, r24	; 0x11
    a668:	9a 8b       	std	Y+18, r25	; 0x12
    a66a:	ab 8b       	std	Y+19, r26	; 0x13
    a66c:	bc 8b       	std	Y+20, r27	; 0x14
    a66e:	09 c0       	rjmp	.+18     	; 0xa682 <create_chain+0x216>
    a670:	97 01       	movw	r18, r14
    a672:	86 01       	movw	r16, r12
    a674:	b3 01       	movw	r22, r6
    a676:	a2 01       	movw	r20, r4
    a678:	ce 01       	movw	r24, r28
    a67a:	84 dc       	rcall	.-1784   	; 0x9f84 <put_fat>
    a67c:	00 97       	sbiw	r24, 0x00	; 0
    a67e:	d9 f2       	breq	.-74     	; 0xa636 <create_chain+0x1ca>
    a680:	08 c0       	rjmp	.+16     	; 0xa692 <create_chain+0x226>
    a682:	8c 81       	ldd	r24, Y+4	; 0x04
    a684:	81 60       	ori	r24, 0x01	; 1
    a686:	8c 83       	std	Y+4, r24	; 0x04
    a688:	4c 2d       	mov	r20, r12
    a68a:	3d 2d       	mov	r19, r13
    a68c:	2e 2d       	mov	r18, r14
    a68e:	9f 2d       	mov	r25, r15
    a690:	0b c0       	rjmp	.+22     	; 0xa6a8 <create_chain+0x23c>
    a692:	01 97       	sbiw	r24, 0x01	; 1
    a694:	09 f4       	brne	.+2      	; 0xa698 <create_chain+0x22c>
    a696:	1c cf       	rjmp	.-456    	; 0xa4d0 <create_chain+0x64>
    a698:	41 e0       	ldi	r20, 0x01	; 1
    a69a:	30 e0       	ldi	r19, 0x00	; 0
    a69c:	20 e0       	ldi	r18, 0x00	; 0
    a69e:	90 e0       	ldi	r25, 0x00	; 0
    a6a0:	03 c0       	rjmp	.+6      	; 0xa6a8 <create_chain+0x23c>
    a6a2:	46 2f       	mov	r20, r22
    a6a4:	37 2f       	mov	r19, r23
    a6a6:	28 2f       	mov	r18, r24
    a6a8:	64 2f       	mov	r22, r20
    a6aa:	73 2f       	mov	r23, r19
    a6ac:	82 2f       	mov	r24, r18
    a6ae:	cd b7       	in	r28, 0x3d	; 61
    a6b0:	de b7       	in	r29, 0x3e	; 62
    a6b2:	e0 e1       	ldi	r30, 0x10	; 16
    a6b4:	0c 94 fe e5 	jmp	0x1cbfc	; 0x1cbfc <__epilogue_restores__+0x4>

0000a6b8 <remove_chain>:
    a6b8:	4f 92       	push	r4
    a6ba:	5f 92       	push	r5
    a6bc:	6f 92       	push	r6
    a6be:	7f 92       	push	r7
    a6c0:	af 92       	push	r10
    a6c2:	bf 92       	push	r11
    a6c4:	cf 92       	push	r12
    a6c6:	df 92       	push	r13
    a6c8:	ef 92       	push	r14
    a6ca:	ff 92       	push	r15
    a6cc:	0f 93       	push	r16
    a6ce:	1f 93       	push	r17
    a6d0:	cf 93       	push	r28
    a6d2:	df 93       	push	r29
    a6d4:	5c 01       	movw	r10, r24
    a6d6:	6a 01       	movw	r12, r20
    a6d8:	7b 01       	movw	r14, r22
    a6da:	b9 01       	movw	r22, r18
    a6dc:	a8 01       	movw	r20, r16
    a6de:	22 e0       	ldi	r18, 0x02	; 2
    a6e0:	c2 16       	cp	r12, r18
    a6e2:	d1 04       	cpc	r13, r1
    a6e4:	e1 04       	cpc	r14, r1
    a6e6:	f1 04       	cpc	r15, r1
    a6e8:	10 f4       	brcc	.+4      	; 0xa6ee <remove_chain+0x36>
    a6ea:	22 e0       	ldi	r18, 0x02	; 2
    a6ec:	27 c0       	rjmp	.+78     	; 0xa73c <remove_chain+0x84>
    a6ee:	fc 01       	movw	r30, r24
    a6f0:	c0 81       	ld	r28, Z
    a6f2:	d1 81       	ldd	r29, Z+1	; 0x01
    a6f4:	89 8d       	ldd	r24, Y+25	; 0x19
    a6f6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a6f8:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a6fa:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a6fc:	c8 16       	cp	r12, r24
    a6fe:	d9 06       	cpc	r13, r25
    a700:	ea 06       	cpc	r14, r26
    a702:	fb 06       	cpc	r15, r27
    a704:	90 f7       	brcc	.-28     	; 0xa6ea <remove_chain+0x32>
    a706:	41 15       	cp	r20, r1
    a708:	51 05       	cpc	r21, r1
    a70a:	61 05       	cpc	r22, r1
    a70c:	71 05       	cpc	r23, r1
    a70e:	41 f0       	breq	.+16     	; 0xa720 <remove_chain+0x68>
    a710:	0f ef       	ldi	r16, 0xFF	; 255
    a712:	1f ef       	ldi	r17, 0xFF	; 255
    a714:	98 01       	movw	r18, r16
    a716:	ce 01       	movw	r24, r28
    a718:	35 dc       	rcall	.-1942   	; 0x9f84 <put_fat>
    a71a:	00 97       	sbiw	r24, 0x00	; 0
    a71c:	09 f0       	breq	.+2      	; 0xa720 <remove_chain+0x68>
    a71e:	4c c0       	rjmp	.+152    	; 0xa7b8 <remove_chain+0x100>
    a720:	b7 01       	movw	r22, r14
    a722:	a6 01       	movw	r20, r12
    a724:	f5 01       	movw	r30, r10
    a726:	80 81       	ld	r24, Z
    a728:	91 81       	ldd	r25, Z+1	; 0x01
    a72a:	2b dd       	rcall	.-1450   	; 0xa182 <get_fat.isra.10>
    a72c:	2b 01       	movw	r4, r22
    a72e:	3c 01       	movw	r6, r24
    a730:	61 15       	cp	r22, r1
    a732:	71 05       	cpc	r23, r1
    a734:	81 05       	cpc	r24, r1
    a736:	91 05       	cpc	r25, r1
    a738:	19 f4       	brne	.+6      	; 0xa740 <remove_chain+0x88>
    a73a:	20 e0       	ldi	r18, 0x00	; 0
    a73c:	90 e0       	ldi	r25, 0x00	; 0
    a73e:	3d c0       	rjmp	.+122    	; 0xa7ba <remove_chain+0x102>
    a740:	61 30       	cpi	r22, 0x01	; 1
    a742:	71 05       	cpc	r23, r1
    a744:	81 05       	cpc	r24, r1
    a746:	91 05       	cpc	r25, r1
    a748:	81 f2       	breq	.-96     	; 0xa6ea <remove_chain+0x32>
    a74a:	6f 3f       	cpi	r22, 0xFF	; 255
    a74c:	7f 4f       	sbci	r23, 0xFF	; 255
    a74e:	8f 4f       	sbci	r24, 0xFF	; 255
    a750:	9f 4f       	sbci	r25, 0xFF	; 255
    a752:	81 f1       	breq	.+96     	; 0xa7b4 <remove_chain+0xfc>
    a754:	00 e0       	ldi	r16, 0x00	; 0
    a756:	10 e0       	ldi	r17, 0x00	; 0
    a758:	98 01       	movw	r18, r16
    a75a:	b7 01       	movw	r22, r14
    a75c:	a6 01       	movw	r20, r12
    a75e:	ce 01       	movw	r24, r28
    a760:	11 dc       	rcall	.-2014   	; 0x9f84 <put_fat>
    a762:	00 97       	sbiw	r24, 0x00	; 0
    a764:	49 f5       	brne	.+82     	; 0xa7b8 <remove_chain+0x100>
    a766:	89 89       	ldd	r24, Y+17	; 0x11
    a768:	9a 89       	ldd	r25, Y+18	; 0x12
    a76a:	ab 89       	ldd	r26, Y+19	; 0x13
    a76c:	bc 89       	ldd	r27, Y+20	; 0x14
    a76e:	49 8d       	ldd	r20, Y+25	; 0x19
    a770:	5a 8d       	ldd	r21, Y+26	; 0x1a
    a772:	6b 8d       	ldd	r22, Y+27	; 0x1b
    a774:	7c 8d       	ldd	r23, Y+28	; 0x1c
    a776:	6a 01       	movw	r12, r20
    a778:	7b 01       	movw	r14, r22
    a77a:	e2 e0       	ldi	r30, 0x02	; 2
    a77c:	ce 1a       	sub	r12, r30
    a77e:	d1 08       	sbc	r13, r1
    a780:	e1 08       	sbc	r14, r1
    a782:	f1 08       	sbc	r15, r1
    a784:	8c 15       	cp	r24, r12
    a786:	9d 05       	cpc	r25, r13
    a788:	ae 05       	cpc	r26, r14
    a78a:	bf 05       	cpc	r27, r15
    a78c:	50 f4       	brcc	.+20     	; 0xa7a2 <remove_chain+0xea>
    a78e:	01 96       	adiw	r24, 0x01	; 1
    a790:	a1 1d       	adc	r26, r1
    a792:	b1 1d       	adc	r27, r1
    a794:	89 8b       	std	Y+17, r24	; 0x11
    a796:	9a 8b       	std	Y+18, r25	; 0x12
    a798:	ab 8b       	std	Y+19, r26	; 0x13
    a79a:	bc 8b       	std	Y+20, r27	; 0x14
    a79c:	8c 81       	ldd	r24, Y+4	; 0x04
    a79e:	81 60       	ori	r24, 0x01	; 1
    a7a0:	8c 83       	std	Y+4, r24	; 0x04
    a7a2:	73 01       	movw	r14, r6
    a7a4:	62 01       	movw	r12, r4
    a7a6:	44 16       	cp	r4, r20
    a7a8:	55 06       	cpc	r5, r21
    a7aa:	66 06       	cpc	r6, r22
    a7ac:	77 06       	cpc	r7, r23
    a7ae:	08 f4       	brcc	.+2      	; 0xa7b2 <remove_chain+0xfa>
    a7b0:	b7 cf       	rjmp	.-146    	; 0xa720 <remove_chain+0x68>
    a7b2:	c3 cf       	rjmp	.-122    	; 0xa73a <remove_chain+0x82>
    a7b4:	21 e0       	ldi	r18, 0x01	; 1
    a7b6:	c2 cf       	rjmp	.-124    	; 0xa73c <remove_chain+0x84>
    a7b8:	28 2f       	mov	r18, r24
    a7ba:	82 2f       	mov	r24, r18
    a7bc:	df 91       	pop	r29
    a7be:	cf 91       	pop	r28
    a7c0:	1f 91       	pop	r17
    a7c2:	0f 91       	pop	r16
    a7c4:	ff 90       	pop	r15
    a7c6:	ef 90       	pop	r14
    a7c8:	df 90       	pop	r13
    a7ca:	cf 90       	pop	r12
    a7cc:	bf 90       	pop	r11
    a7ce:	af 90       	pop	r10
    a7d0:	7f 90       	pop	r7
    a7d2:	6f 90       	pop	r6
    a7d4:	5f 90       	pop	r5
    a7d6:	4f 90       	pop	r4
    a7d8:	08 95       	ret

0000a7da <dir_next>:
    a7da:	4f 92       	push	r4
    a7dc:	5f 92       	push	r5
    a7de:	6f 92       	push	r6
    a7e0:	7f 92       	push	r7
    a7e2:	af 92       	push	r10
    a7e4:	bf 92       	push	r11
    a7e6:	cf 92       	push	r12
    a7e8:	df 92       	push	r13
    a7ea:	ef 92       	push	r14
    a7ec:	ff 92       	push	r15
    a7ee:	0f 93       	push	r16
    a7f0:	1f 93       	push	r17
    a7f2:	cf 93       	push	r28
    a7f4:	df 93       	push	r29
    a7f6:	ec 01       	movw	r28, r24
    a7f8:	08 81       	ld	r16, Y
    a7fa:	19 81       	ldd	r17, Y+1	; 0x01
    a7fc:	ce 84       	ldd	r12, Y+14	; 0x0e
    a7fe:	df 84       	ldd	r13, Y+15	; 0x0f
    a800:	e8 88       	ldd	r14, Y+16	; 0x10
    a802:	f9 88       	ldd	r15, Y+17	; 0x11
    a804:	80 e2       	ldi	r24, 0x20	; 32
    a806:	c8 0e       	add	r12, r24
    a808:	d1 1c       	adc	r13, r1
    a80a:	e1 1c       	adc	r14, r1
    a80c:	f1 1c       	adc	r15, r1
    a80e:	c1 14       	cp	r12, r1
    a810:	d1 04       	cpc	r13, r1
    a812:	e0 e2       	ldi	r30, 0x20	; 32
    a814:	ee 06       	cpc	r14, r30
    a816:	f1 04       	cpc	r15, r1
    a818:	20 f0       	brcs	.+8      	; 0xa822 <dir_next+0x48>
    a81a:	1e 8a       	std	Y+22, r1	; 0x16
    a81c:	1f 8a       	std	Y+23, r1	; 0x17
    a81e:	18 8e       	std	Y+24, r1	; 0x18
    a820:	19 8e       	std	Y+25, r1	; 0x19
    a822:	8e 89       	ldd	r24, Y+22	; 0x16
    a824:	9f 89       	ldd	r25, Y+23	; 0x17
    a826:	a8 8d       	ldd	r26, Y+24	; 0x18
    a828:	b9 8d       	ldd	r27, Y+25	; 0x19
    a82a:	00 97       	sbiw	r24, 0x00	; 0
    a82c:	a1 05       	cpc	r26, r1
    a82e:	b1 05       	cpc	r27, r1
    a830:	09 f4       	brne	.+2      	; 0xa834 <dir_next+0x5a>
    a832:	a7 c0       	rjmp	.+334    	; 0xa982 <dir_next+0x1a8>
    a834:	5b 01       	movw	r10, r22
    a836:	b7 01       	movw	r22, r14
    a838:	a6 01       	movw	r20, r12
    a83a:	51 70       	andi	r21, 0x01	; 1
    a83c:	66 27       	eor	r22, r22
    a83e:	77 27       	eor	r23, r23
    a840:	45 2b       	or	r20, r21
    a842:	46 2b       	or	r20, r22
    a844:	47 2b       	or	r20, r23
    a846:	09 f0       	breq	.+2      	; 0xa84a <dir_next+0x70>
    a848:	8d c0       	rjmp	.+282    	; 0xa964 <dir_next+0x18a>
    a84a:	01 96       	adiw	r24, 0x01	; 1
    a84c:	a1 1d       	adc	r26, r1
    a84e:	b1 1d       	adc	r27, r1
    a850:	8e 8b       	std	Y+22, r24	; 0x16
    a852:	9f 8b       	std	Y+23, r25	; 0x17
    a854:	a8 8f       	std	Y+24, r26	; 0x18
    a856:	b9 8f       	std	Y+25, r27	; 0x19
    a858:	4a 89       	ldd	r20, Y+18	; 0x12
    a85a:	5b 89       	ldd	r21, Y+19	; 0x13
    a85c:	6c 89       	ldd	r22, Y+20	; 0x14
    a85e:	7d 89       	ldd	r23, Y+21	; 0x15
    a860:	f8 01       	movw	r30, r16
    a862:	41 15       	cp	r20, r1
    a864:	51 05       	cpc	r21, r1
    a866:	61 05       	cpc	r22, r1
    a868:	71 05       	cpc	r23, r1
    a86a:	c1 f4       	brne	.+48     	; 0xa89c <dir_next+0xc2>
    a86c:	87 81       	ldd	r24, Z+7	; 0x07
    a86e:	90 85       	ldd	r25, Z+8	; 0x08
    a870:	a0 e0       	ldi	r26, 0x00	; 0
    a872:	b0 e0       	ldi	r27, 0x00	; 0
    a874:	b7 01       	movw	r22, r14
    a876:	a6 01       	movw	r20, r12
    a878:	35 e0       	ldi	r19, 0x05	; 5
    a87a:	76 95       	lsr	r23
    a87c:	67 95       	ror	r22
    a87e:	57 95       	ror	r21
    a880:	47 95       	ror	r20
    a882:	3a 95       	dec	r19
    a884:	d1 f7       	brne	.-12     	; 0xa87a <dir_next+0xa0>
    a886:	48 17       	cp	r20, r24
    a888:	59 07       	cpc	r21, r25
    a88a:	6a 07       	cpc	r22, r26
    a88c:	7b 07       	cpc	r23, r27
    a88e:	08 f4       	brcc	.+2      	; 0xa892 <dir_next+0xb8>
    a890:	69 c0       	rjmp	.+210    	; 0xa964 <dir_next+0x18a>
    a892:	1e 8a       	std	Y+22, r1	; 0x16
    a894:	1f 8a       	std	Y+23, r1	; 0x17
    a896:	18 8e       	std	Y+24, r1	; 0x18
    a898:	19 8e       	std	Y+25, r1	; 0x19
    a89a:	73 c0       	rjmp	.+230    	; 0xa982 <dir_next+0x1a8>
    a89c:	81 85       	ldd	r24, Z+9	; 0x09
    a89e:	92 85       	ldd	r25, Z+10	; 0x0a
    a8a0:	01 97       	sbiw	r24, 0x01	; 1
    a8a2:	a0 e0       	ldi	r26, 0x00	; 0
    a8a4:	b0 e0       	ldi	r27, 0x00	; 0
    a8a6:	26 01       	movw	r4, r12
    a8a8:	37 01       	movw	r6, r14
    a8aa:	29 e0       	ldi	r18, 0x09	; 9
    a8ac:	76 94       	lsr	r7
    a8ae:	67 94       	ror	r6
    a8b0:	57 94       	ror	r5
    a8b2:	47 94       	ror	r4
    a8b4:	2a 95       	dec	r18
    a8b6:	d1 f7       	brne	.-12     	; 0xa8ac <dir_next+0xd2>
    a8b8:	84 21       	and	r24, r4
    a8ba:	95 21       	and	r25, r5
    a8bc:	a6 21       	and	r26, r6
    a8be:	b7 21       	and	r27, r7
    a8c0:	89 2b       	or	r24, r25
    a8c2:	8a 2b       	or	r24, r26
    a8c4:	8b 2b       	or	r24, r27
    a8c6:	09 f0       	breq	.+2      	; 0xa8ca <dir_next+0xf0>
    a8c8:	4d c0       	rjmp	.+154    	; 0xa964 <dir_next+0x18a>
    a8ca:	c8 01       	movw	r24, r16
    a8cc:	5a dc       	rcall	.-1868   	; 0xa182 <get_fat.isra.10>
    a8ce:	2b 01       	movw	r4, r22
    a8d0:	3c 01       	movw	r6, r24
    a8d2:	62 30       	cpi	r22, 0x02	; 2
    a8d4:	71 05       	cpc	r23, r1
    a8d6:	81 05       	cpc	r24, r1
    a8d8:	91 05       	cpc	r25, r1
    a8da:	18 f4       	brcc	.+6      	; 0xa8e2 <dir_next+0x108>
    a8dc:	82 e0       	ldi	r24, 0x02	; 2
    a8de:	90 e0       	ldi	r25, 0x00	; 0
    a8e0:	55 c0       	rjmp	.+170    	; 0xa98c <dir_next+0x1b2>
    a8e2:	8f ef       	ldi	r24, 0xFF	; 255
    a8e4:	48 16       	cp	r4, r24
    a8e6:	58 06       	cpc	r5, r24
    a8e8:	68 06       	cpc	r6, r24
    a8ea:	78 06       	cpc	r7, r24
    a8ec:	19 f4       	brne	.+6      	; 0xa8f4 <dir_next+0x11a>
    a8ee:	81 e0       	ldi	r24, 0x01	; 1
    a8f0:	90 e0       	ldi	r25, 0x00	; 0
    a8f2:	4c c0       	rjmp	.+152    	; 0xa98c <dir_next+0x1b2>
    a8f4:	f8 01       	movw	r30, r16
    a8f6:	81 8d       	ldd	r24, Z+25	; 0x19
    a8f8:	92 8d       	ldd	r25, Z+26	; 0x1a
    a8fa:	a3 8d       	ldd	r26, Z+27	; 0x1b
    a8fc:	b4 8d       	ldd	r27, Z+28	; 0x1c
    a8fe:	48 16       	cp	r4, r24
    a900:	59 06       	cpc	r5, r25
    a902:	6a 06       	cpc	r6, r26
    a904:	7b 06       	cpc	r7, r27
    a906:	08 f1       	brcs	.+66     	; 0xa94a <dir_next+0x170>
    a908:	ab 28       	or	r10, r11
    a90a:	19 f2       	breq	.-122    	; 0xa892 <dir_next+0xb8>
    a90c:	4a 89       	ldd	r20, Y+18	; 0x12
    a90e:	5b 89       	ldd	r21, Y+19	; 0x13
    a910:	6c 89       	ldd	r22, Y+20	; 0x14
    a912:	7d 89       	ldd	r23, Y+21	; 0x15
    a914:	ce 01       	movw	r24, r28
    a916:	aa dd       	rcall	.-1196   	; 0xa46c <create_chain>
    a918:	2b 01       	movw	r4, r22
    a91a:	3c 01       	movw	r6, r24
    a91c:	61 15       	cp	r22, r1
    a91e:	71 05       	cpc	r23, r1
    a920:	81 05       	cpc	r24, r1
    a922:	91 05       	cpc	r25, r1
    a924:	89 f1       	breq	.+98     	; 0xa988 <dir_next+0x1ae>
    a926:	61 30       	cpi	r22, 0x01	; 1
    a928:	71 05       	cpc	r23, r1
    a92a:	81 05       	cpc	r24, r1
    a92c:	91 05       	cpc	r25, r1
    a92e:	b1 f2       	breq	.-84     	; 0xa8dc <dir_next+0x102>
    a930:	8f ef       	ldi	r24, 0xFF	; 255
    a932:	48 16       	cp	r4, r24
    a934:	58 06       	cpc	r5, r24
    a936:	68 06       	cpc	r6, r24
    a938:	78 06       	cpc	r7, r24
    a93a:	c9 f2       	breq	.-78     	; 0xa8ee <dir_next+0x114>
    a93c:	b3 01       	movw	r22, r6
    a93e:	a2 01       	movw	r20, r4
    a940:	c8 01       	movw	r24, r16
    a942:	0e 94 3d 4c 	call	0x987a	; 0x987a <dir_clear>
    a946:	89 2b       	or	r24, r25
    a948:	91 f6       	brne	.-92     	; 0xa8ee <dir_next+0x114>
    a94a:	4a 8a       	std	Y+18, r4	; 0x12
    a94c:	5b 8a       	std	Y+19, r5	; 0x13
    a94e:	6c 8a       	std	Y+20, r6	; 0x14
    a950:	7d 8a       	std	Y+21, r7	; 0x15
    a952:	b3 01       	movw	r22, r6
    a954:	a2 01       	movw	r20, r4
    a956:	c8 01       	movw	r24, r16
    a958:	0e 94 ba 48 	call	0x9174	; 0x9174 <clst2sect>
    a95c:	6e 8b       	std	Y+22, r22	; 0x16
    a95e:	7f 8b       	std	Y+23, r23	; 0x17
    a960:	88 8f       	std	Y+24, r24	; 0x18
    a962:	99 8f       	std	Y+25, r25	; 0x19
    a964:	ce 86       	std	Y+14, r12	; 0x0e
    a966:	df 86       	std	Y+15, r13	; 0x0f
    a968:	e8 8a       	std	Y+16, r14	; 0x10
    a96a:	f9 8a       	std	Y+17, r15	; 0x11
    a96c:	0b 5c       	subi	r16, 0xCB	; 203
    a96e:	1f 4f       	sbci	r17, 0xFF	; 255
    a970:	e1 e0       	ldi	r30, 0x01	; 1
    a972:	de 22       	and	r13, r30
    a974:	c0 0e       	add	r12, r16
    a976:	d1 1e       	adc	r13, r17
    a978:	db 8e       	std	Y+27, r13	; 0x1b
    a97a:	ca 8e       	std	Y+26, r12	; 0x1a
    a97c:	80 e0       	ldi	r24, 0x00	; 0
    a97e:	90 e0       	ldi	r25, 0x00	; 0
    a980:	05 c0       	rjmp	.+10     	; 0xa98c <dir_next+0x1b2>
    a982:	84 e0       	ldi	r24, 0x04	; 4
    a984:	90 e0       	ldi	r25, 0x00	; 0
    a986:	02 c0       	rjmp	.+4      	; 0xa98c <dir_next+0x1b2>
    a988:	87 e0       	ldi	r24, 0x07	; 7
    a98a:	90 e0       	ldi	r25, 0x00	; 0
    a98c:	df 91       	pop	r29
    a98e:	cf 91       	pop	r28
    a990:	1f 91       	pop	r17
    a992:	0f 91       	pop	r16
    a994:	ff 90       	pop	r15
    a996:	ef 90       	pop	r14
    a998:	df 90       	pop	r13
    a99a:	cf 90       	pop	r12
    a99c:	bf 90       	pop	r11
    a99e:	af 90       	pop	r10
    a9a0:	7f 90       	pop	r7
    a9a2:	6f 90       	pop	r6
    a9a4:	5f 90       	pop	r5
    a9a6:	4f 90       	pop	r4
    a9a8:	08 95       	ret

0000a9aa <dir_alloc>:
    a9aa:	a0 e0       	ldi	r26, 0x00	; 0
    a9ac:	b0 e0       	ldi	r27, 0x00	; 0
    a9ae:	eb ed       	ldi	r30, 0xDB	; 219
    a9b0:	f4 e5       	ldi	r31, 0x54	; 84
    a9b2:	0c 94 ea e5 	jmp	0x1cbd4	; 0x1cbd4 <__prologue_saves__+0x14>
    a9b6:	ec 01       	movw	r28, r24
    a9b8:	6b 01       	movw	r12, r22
    a9ba:	e8 80       	ld	r14, Y
    a9bc:	f9 80       	ldd	r15, Y+1	; 0x01
    a9be:	40 e0       	ldi	r20, 0x00	; 0
    a9c0:	50 e0       	ldi	r21, 0x00	; 0
    a9c2:	ba 01       	movw	r22, r20
    a9c4:	92 dc       	rcall	.-1756   	; 0xa2ea <dir_sdi>
    a9c6:	00 97       	sbiw	r24, 0x00	; 0
    a9c8:	01 f5       	brne	.+64     	; 0xaa0a <dir_alloc+0x60>
    a9ca:	00 e0       	ldi	r16, 0x00	; 0
    a9cc:	10 e0       	ldi	r17, 0x00	; 0
    a9ce:	4e 89       	ldd	r20, Y+22	; 0x16
    a9d0:	5f 89       	ldd	r21, Y+23	; 0x17
    a9d2:	68 8d       	ldd	r22, Y+24	; 0x18
    a9d4:	79 8d       	ldd	r23, Y+25	; 0x19
    a9d6:	c7 01       	movw	r24, r14
    a9d8:	0e 94 e5 4c 	call	0x99ca	; 0x99ca <move_window>
    a9dc:	00 97       	sbiw	r24, 0x00	; 0
    a9de:	a9 f4       	brne	.+42     	; 0xaa0a <dir_alloc+0x60>
    a9e0:	ea 8d       	ldd	r30, Y+26	; 0x1a
    a9e2:	fb 8d       	ldd	r31, Y+27	; 0x1b
    a9e4:	20 81       	ld	r18, Z
    a9e6:	25 3e       	cpi	r18, 0xE5	; 229
    a9e8:	11 f0       	breq	.+4      	; 0xa9ee <dir_alloc+0x44>
    a9ea:	21 11       	cpse	r18, r1
    a9ec:	06 c0       	rjmp	.+12     	; 0xa9fa <dir_alloc+0x50>
    a9ee:	0f 5f       	subi	r16, 0xFF	; 255
    a9f0:	1f 4f       	sbci	r17, 0xFF	; 255
    a9f2:	0c 15       	cp	r16, r12
    a9f4:	1d 05       	cpc	r17, r13
    a9f6:	19 f4       	brne	.+6      	; 0xa9fe <dir_alloc+0x54>
    a9f8:	0d c0       	rjmp	.+26     	; 0xaa14 <dir_alloc+0x6a>
    a9fa:	00 e0       	ldi	r16, 0x00	; 0
    a9fc:	10 e0       	ldi	r17, 0x00	; 0
    a9fe:	61 e0       	ldi	r22, 0x01	; 1
    aa00:	70 e0       	ldi	r23, 0x00	; 0
    aa02:	ce 01       	movw	r24, r28
    aa04:	ea de       	rcall	.-556    	; 0xa7da <dir_next>
    aa06:	00 97       	sbiw	r24, 0x00	; 0
    aa08:	11 f3       	breq	.-60     	; 0xa9ce <dir_alloc+0x24>
    aa0a:	84 30       	cpi	r24, 0x04	; 4
    aa0c:	91 05       	cpc	r25, r1
    aa0e:	11 f4       	brne	.+4      	; 0xaa14 <dir_alloc+0x6a>
    aa10:	87 e0       	ldi	r24, 0x07	; 7
    aa12:	90 e0       	ldi	r25, 0x00	; 0
    aa14:	cd b7       	in	r28, 0x3d	; 61
    aa16:	de b7       	in	r29, 0x3e	; 62
    aa18:	e8 e0       	ldi	r30, 0x08	; 8
    aa1a:	0c 94 06 e6 	jmp	0x1cc0c	; 0x1cc0c <__epilogue_restores__+0x14>

0000aa1e <dir_read>:
    aa1e:	a0 e0       	ldi	r26, 0x00	; 0
    aa20:	b0 e0       	ldi	r27, 0x00	; 0
    aa22:	e5 e1       	ldi	r30, 0x15	; 21
    aa24:	f5 e5       	ldi	r31, 0x55	; 85
    aa26:	0c 94 e4 e5 	jmp	0x1cbc8	; 0x1cbc8 <__prologue_saves__+0x8>
    aa2a:	ec 01       	movw	r28, r24
    aa2c:	7b 01       	movw	r14, r22
    aa2e:	a8 80       	ld	r10, Y
    aa30:	b9 80       	ldd	r11, Y+1	; 0x01
    aa32:	dd 24       	eor	r13, r13
    aa34:	da 94       	dec	r13
    aa36:	1f ef       	ldi	r17, 0xFF	; 255
    aa38:	84 e0       	ldi	r24, 0x04	; 4
    aa3a:	90 e0       	ldi	r25, 0x00	; 0
    aa3c:	ad e0       	ldi	r26, 0x0D	; 13
    aa3e:	ca 2e       	mov	r12, r26
    aa40:	4e 89       	ldd	r20, Y+22	; 0x16
    aa42:	5f 89       	ldd	r21, Y+23	; 0x17
    aa44:	68 8d       	ldd	r22, Y+24	; 0x18
    aa46:	79 8d       	ldd	r23, Y+25	; 0x19
    aa48:	41 15       	cp	r20, r1
    aa4a:	51 05       	cpc	r21, r1
    aa4c:	61 05       	cpc	r22, r1
    aa4e:	71 05       	cpc	r23, r1
    aa50:	09 f4       	brne	.+2      	; 0xaa54 <dir_read+0x36>
    aa52:	a3 c0       	rjmp	.+326    	; 0xab9a <dir_read+0x17c>
    aa54:	c5 01       	movw	r24, r10
    aa56:	0e 94 e5 4c 	call	0x99ca	; 0x99ca <move_window>
    aa5a:	00 97       	sbiw	r24, 0x00	; 0
    aa5c:	09 f0       	breq	.+2      	; 0xaa60 <dir_read+0x42>
    aa5e:	9f c0       	rjmp	.+318    	; 0xab9e <dir_read+0x180>
    aa60:	aa 8d       	ldd	r26, Y+26	; 0x1a
    aa62:	bb 8d       	ldd	r27, Y+27	; 0x1b
    aa64:	0c 91       	ld	r16, X
    aa66:	00 23       	and	r16, r16
    aa68:	09 f4       	brne	.+2      	; 0xaa6c <dir_read+0x4e>
    aa6a:	a1 c0       	rjmp	.+322    	; 0xabae <dir_read+0x190>
    aa6c:	1b 96       	adiw	r26, 0x0b	; 11
    aa6e:	8c 91       	ld	r24, X
    aa70:	1b 97       	sbiw	r26, 0x0b	; 11
    aa72:	8f 73       	andi	r24, 0x3F	; 63
    aa74:	8c 83       	std	Y+4, r24	; 0x04
    aa76:	05 3e       	cpi	r16, 0xE5	; 229
    aa78:	09 f4       	brne	.+2      	; 0xaa7c <dir_read+0x5e>
    aa7a:	86 c0       	rjmp	.+268    	; 0xab88 <dir_read+0x16a>
    aa7c:	0e 32       	cpi	r16, 0x2E	; 46
    aa7e:	09 f4       	brne	.+2      	; 0xaa82 <dir_read+0x64>
    aa80:	83 c0       	rjmp	.+262    	; 0xab88 <dir_read+0x16a>
    aa82:	21 e0       	ldi	r18, 0x01	; 1
    aa84:	30 e0       	ldi	r19, 0x00	; 0
    aa86:	98 2f       	mov	r25, r24
    aa88:	9f 71       	andi	r25, 0x1F	; 31
    aa8a:	98 30       	cpi	r25, 0x08	; 8
    aa8c:	11 f0       	breq	.+4      	; 0xaa92 <dir_read+0x74>
    aa8e:	20 e0       	ldi	r18, 0x00	; 0
    aa90:	30 e0       	ldi	r19, 0x00	; 0
    aa92:	2e 15       	cp	r18, r14
    aa94:	3f 05       	cpc	r19, r15
    aa96:	09 f0       	breq	.+2      	; 0xaa9a <dir_read+0x7c>
    aa98:	77 c0       	rjmp	.+238    	; 0xab88 <dir_read+0x16a>
    aa9a:	8f 30       	cpi	r24, 0x0F	; 15
    aa9c:	09 f0       	breq	.+2      	; 0xaaa0 <dir_read+0x82>
    aa9e:	64 c0       	rjmp	.+200    	; 0xab68 <dir_read+0x14a>
    aaa0:	06 ff       	sbrs	r16, 6
    aaa2:	0d c0       	rjmp	.+26     	; 0xaabe <dir_read+0xa0>
    aaa4:	1d 96       	adiw	r26, 0x0d	; 13
    aaa6:	8c 91       	ld	r24, X
    aaa8:	1d 97       	sbiw	r26, 0x0d	; 13
    aaaa:	0f 7b       	andi	r16, 0xBF	; 191
    aaac:	4e 85       	ldd	r20, Y+14	; 0x0e
    aaae:	5f 85       	ldd	r21, Y+15	; 0x0f
    aab0:	68 89       	ldd	r22, Y+16	; 0x10
    aab2:	79 89       	ldd	r23, Y+17	; 0x11
    aab4:	48 a7       	std	Y+40, r20	; 0x28
    aab6:	59 a7       	std	Y+41, r21	; 0x29
    aab8:	6a a7       	std	Y+42, r22	; 0x2a
    aaba:	7b a7       	std	Y+43, r23	; 0x2b
    aabc:	03 c0       	rjmp	.+6      	; 0xaac4 <dir_read+0xa6>
    aabe:	10 13       	cpse	r17, r16
    aac0:	63 c0       	rjmp	.+198    	; 0xab88 <dir_read+0x16a>
    aac2:	8d 2d       	mov	r24, r13
    aac4:	1d 96       	adiw	r26, 0x0d	; 13
    aac6:	dc 90       	ld	r13, X
    aac8:	1d 97       	sbiw	r26, 0x0d	; 13
    aaca:	d8 12       	cpse	r13, r24
    aacc:	5c c0       	rjmp	.+184    	; 0xab86 <dir_read+0x168>
    aace:	5a 96       	adiw	r26, 0x1a	; 26
    aad0:	8d 91       	ld	r24, X+
    aad2:	9c 91       	ld	r25, X
    aad4:	5b 97       	sbiw	r26, 0x1b	; 27
    aad6:	89 2b       	or	r24, r25
    aad8:	09 f0       	breq	.+2      	; 0xaadc <dir_read+0xbe>
    aada:	56 c0       	rjmp	.+172    	; 0xab88 <dir_read+0x16a>
    aadc:	f5 01       	movw	r30, r10
    aade:	63 85       	ldd	r22, Z+11	; 0x0b
    aae0:	74 85       	ldd	r23, Z+12	; 0x0c
    aae2:	8c 91       	ld	r24, X
    aae4:	90 e0       	ldi	r25, 0x00	; 0
    aae6:	8f 7b       	andi	r24, 0xBF	; 191
    aae8:	01 97       	sbiw	r24, 0x01	; 1
    aaea:	c8 9e       	mul	r12, r24
    aaec:	90 01       	movw	r18, r0
    aaee:	c9 9e       	mul	r12, r25
    aaf0:	30 0d       	add	r19, r0
    aaf2:	11 24       	eor	r1, r1
    aaf4:	fd e4       	ldi	r31, 0x4D	; 77
    aaf6:	6f 2e       	mov	r6, r31
    aaf8:	f3 e0       	ldi	r31, 0x03	; 3
    aafa:	7f 2e       	mov	r7, r31
    aafc:	81 e0       	ldi	r24, 0x01	; 1
    aafe:	90 e0       	ldi	r25, 0x00	; 0
    ab00:	f3 01       	movw	r30, r6
    ab02:	41 91       	ld	r20, Z+
    ab04:	3f 01       	movw	r6, r30
    ab06:	4d 01       	movw	r8, r26
    ab08:	84 0e       	add	r8, r20
    ab0a:	91 1c       	adc	r9, r1
    ab0c:	f4 01       	movw	r30, r8
    ab0e:	40 81       	ld	r20, Z
    ab10:	51 81       	ldd	r21, Z+1	; 0x01
    ab12:	00 97       	sbiw	r24, 0x00	; 0
    ab14:	81 f0       	breq	.+32     	; 0xab36 <dir_read+0x118>
    ab16:	2f 3f       	cpi	r18, 0xFF	; 255
    ab18:	31 05       	cpc	r19, r1
    ab1a:	09 f0       	breq	.+2      	; 0xab1e <dir_read+0x100>
    ab1c:	a8 f5       	brcc	.+106    	; 0xab88 <dir_read+0x16a>
    ab1e:	c9 01       	movw	r24, r18
    ab20:	88 0f       	add	r24, r24
    ab22:	99 1f       	adc	r25, r25
    ab24:	86 0f       	add	r24, r22
    ab26:	97 1f       	adc	r25, r23
    ab28:	fc 01       	movw	r30, r24
    ab2a:	51 83       	std	Z+1, r21	; 0x01
    ab2c:	40 83       	st	Z, r20
    ab2e:	ca 01       	movw	r24, r20
    ab30:	2f 5f       	subi	r18, 0xFF	; 255
    ab32:	3f 4f       	sbci	r19, 0xFF	; 255
    ab34:	03 c0       	rjmp	.+6      	; 0xab3c <dir_read+0x11e>
    ab36:	4f 3f       	cpi	r20, 0xFF	; 255
    ab38:	5f 4f       	sbci	r21, 0xFF	; 255
    ab3a:	31 f5       	brne	.+76     	; 0xab88 <dir_read+0x16a>
    ab3c:	4a e5       	ldi	r20, 0x5A	; 90
    ab3e:	64 16       	cp	r6, r20
    ab40:	43 e0       	ldi	r20, 0x03	; 3
    ab42:	74 06       	cpc	r7, r20
    ab44:	e9 f6       	brne	.-70     	; 0xab00 <dir_read+0xe2>
    ab46:	4c 91       	ld	r20, X
    ab48:	46 ff       	sbrs	r20, 6
    ab4a:	2e c0       	rjmp	.+92     	; 0xaba8 <dir_read+0x18a>
    ab4c:	89 2b       	or	r24, r25
    ab4e:	61 f1       	breq	.+88     	; 0xaba8 <dir_read+0x18a>
    ab50:	2f 3f       	cpi	r18, 0xFF	; 255
    ab52:	31 05       	cpc	r19, r1
    ab54:	09 f0       	breq	.+2      	; 0xab58 <dir_read+0x13a>
    ab56:	c0 f4       	brcc	.+48     	; 0xab88 <dir_read+0x16a>
    ab58:	22 0f       	add	r18, r18
    ab5a:	33 1f       	adc	r19, r19
    ab5c:	fb 01       	movw	r30, r22
    ab5e:	e2 0f       	add	r30, r18
    ab60:	f3 1f       	adc	r31, r19
    ab62:	11 82       	std	Z+1, r1	; 0x01
    ab64:	10 82       	st	Z, r1
    ab66:	20 c0       	rjmp	.+64     	; 0xaba8 <dir_read+0x18a>
    ab68:	11 11       	cpse	r17, r1
    ab6a:	05 c0       	rjmp	.+10     	; 0xab76 <dir_read+0x158>
    ab6c:	cd 01       	movw	r24, r26
    ab6e:	0e 94 1e 49 	call	0x923c	; 0x923c <sum_sfn>
    ab72:	d8 16       	cp	r13, r24
    ab74:	f9 f0       	breq	.+62     	; 0xabb4 <dir_read+0x196>
    ab76:	8f ef       	ldi	r24, 0xFF	; 255
    ab78:	9f ef       	ldi	r25, 0xFF	; 255
    ab7a:	dc 01       	movw	r26, r24
    ab7c:	88 a7       	std	Y+40, r24	; 0x28
    ab7e:	99 a7       	std	Y+41, r25	; 0x29
    ab80:	aa a7       	std	Y+42, r26	; 0x2a
    ab82:	bb a7       	std	Y+43, r27	; 0x2b
    ab84:	17 c0       	rjmp	.+46     	; 0xabb4 <dir_read+0x196>
    ab86:	d8 2e       	mov	r13, r24
    ab88:	1f ef       	ldi	r17, 0xFF	; 255
    ab8a:	60 e0       	ldi	r22, 0x00	; 0
    ab8c:	70 e0       	ldi	r23, 0x00	; 0
    ab8e:	ce 01       	movw	r24, r28
    ab90:	24 de       	rcall	.-952    	; 0xa7da <dir_next>
    ab92:	00 97       	sbiw	r24, 0x00	; 0
    ab94:	09 f4       	brne	.+2      	; 0xab98 <dir_read+0x17a>
    ab96:	54 cf       	rjmp	.-344    	; 0xaa40 <dir_read+0x22>
    ab98:	02 c0       	rjmp	.+4      	; 0xab9e <dir_read+0x180>
    ab9a:	00 97       	sbiw	r24, 0x00	; 0
    ab9c:	59 f0       	breq	.+22     	; 0xabb4 <dir_read+0x196>
    ab9e:	1e 8a       	std	Y+22, r1	; 0x16
    aba0:	1f 8a       	std	Y+23, r1	; 0x17
    aba2:	18 8e       	std	Y+24, r1	; 0x18
    aba4:	19 8e       	std	Y+25, r1	; 0x19
    aba6:	08 c0       	rjmp	.+16     	; 0xabb8 <dir_read+0x19a>
    aba8:	1f ef       	ldi	r17, 0xFF	; 255
    abaa:	10 0f       	add	r17, r16
    abac:	ee cf       	rjmp	.-36     	; 0xab8a <dir_read+0x16c>
    abae:	84 e0       	ldi	r24, 0x04	; 4
    abb0:	90 e0       	ldi	r25, 0x00	; 0
    abb2:	f5 cf       	rjmp	.-22     	; 0xab9e <dir_read+0x180>
    abb4:	80 e0       	ldi	r24, 0x00	; 0
    abb6:	90 e0       	ldi	r25, 0x00	; 0
    abb8:	cd b7       	in	r28, 0x3d	; 61
    abba:	de b7       	in	r29, 0x3e	; 62
    abbc:	ee e0       	ldi	r30, 0x0E	; 14
    abbe:	0c 94 00 e6 	jmp	0x1cc00	; 0x1cc00 <__epilogue_restores__+0x8>

0000abc2 <dir_remove>:
    abc2:	a0 e0       	ldi	r26, 0x00	; 0
    abc4:	b0 e0       	ldi	r27, 0x00	; 0
    abc6:	e7 ee       	ldi	r30, 0xE7	; 231
    abc8:	f5 e5       	ldi	r31, 0x55	; 85
    abca:	0c 94 e8 e5 	jmp	0x1cbd0	; 0x1cbd0 <__prologue_saves__+0x10>
    abce:	ec 01       	movw	r28, r24
    abd0:	08 81       	ld	r16, Y
    abd2:	19 81       	ldd	r17, Y+1	; 0x01
    abd4:	ce 84       	ldd	r12, Y+14	; 0x0e
    abd6:	df 84       	ldd	r13, Y+15	; 0x0f
    abd8:	e8 88       	ldd	r14, Y+16	; 0x10
    abda:	f9 88       	ldd	r15, Y+17	; 0x11
    abdc:	48 a5       	ldd	r20, Y+40	; 0x28
    abde:	59 a5       	ldd	r21, Y+41	; 0x29
    abe0:	6a a5       	ldd	r22, Y+42	; 0x2a
    abe2:	7b a5       	ldd	r23, Y+43	; 0x2b
    abe4:	4f 3f       	cpi	r20, 0xFF	; 255
    abe6:	8f ef       	ldi	r24, 0xFF	; 255
    abe8:	58 07       	cpc	r21, r24
    abea:	68 07       	cpc	r22, r24
    abec:	78 07       	cpc	r23, r24
    abee:	29 f4       	brne	.+10     	; 0xabfa <dir_remove+0x38>
    abf0:	85 ee       	ldi	r24, 0xE5	; 229
    abf2:	b8 2e       	mov	r11, r24
    abf4:	aa 24       	eor	r10, r10
    abf6:	a3 94       	inc	r10
    abf8:	19 c0       	rjmp	.+50     	; 0xac2c <dir_remove+0x6a>
    abfa:	ce 01       	movw	r24, r28
    abfc:	76 db       	rcall	.-2324   	; 0xa2ea <dir_sdi>
    abfe:	00 97       	sbiw	r24, 0x00	; 0
    ac00:	19 f5       	brne	.+70     	; 0xac48 <dir_remove+0x86>
    ac02:	f6 cf       	rjmp	.-20     	; 0xabf0 <dir_remove+0x2e>
    ac04:	ea 8d       	ldd	r30, Y+26	; 0x1a
    ac06:	fb 8d       	ldd	r31, Y+27	; 0x1b
    ac08:	b0 82       	st	Z, r11
    ac0a:	f8 01       	movw	r30, r16
    ac0c:	a3 82       	std	Z+3, r10	; 0x03
    ac0e:	4e 85       	ldd	r20, Y+14	; 0x0e
    ac10:	5f 85       	ldd	r21, Y+15	; 0x0f
    ac12:	68 89       	ldd	r22, Y+16	; 0x10
    ac14:	79 89       	ldd	r23, Y+17	; 0x11
    ac16:	4c 15       	cp	r20, r12
    ac18:	5d 05       	cpc	r21, r13
    ac1a:	6e 05       	cpc	r22, r14
    ac1c:	7f 05       	cpc	r23, r15
    ac1e:	a0 f4       	brcc	.+40     	; 0xac48 <dir_remove+0x86>
    ac20:	60 e0       	ldi	r22, 0x00	; 0
    ac22:	70 e0       	ldi	r23, 0x00	; 0
    ac24:	ce 01       	movw	r24, r28
    ac26:	d9 dd       	rcall	.-1102   	; 0xa7da <dir_next>
    ac28:	00 97       	sbiw	r24, 0x00	; 0
    ac2a:	49 f4       	brne	.+18     	; 0xac3e <dir_remove+0x7c>
    ac2c:	4e 89       	ldd	r20, Y+22	; 0x16
    ac2e:	5f 89       	ldd	r21, Y+23	; 0x17
    ac30:	68 8d       	ldd	r22, Y+24	; 0x18
    ac32:	79 8d       	ldd	r23, Y+25	; 0x19
    ac34:	c8 01       	movw	r24, r16
    ac36:	0e 94 e5 4c 	call	0x99ca	; 0x99ca <move_window>
    ac3a:	00 97       	sbiw	r24, 0x00	; 0
    ac3c:	19 f3       	breq	.-58     	; 0xac04 <dir_remove+0x42>
    ac3e:	84 30       	cpi	r24, 0x04	; 4
    ac40:	91 05       	cpc	r25, r1
    ac42:	11 f4       	brne	.+4      	; 0xac48 <dir_remove+0x86>
    ac44:	82 e0       	ldi	r24, 0x02	; 2
    ac46:	90 e0       	ldi	r25, 0x00	; 0
    ac48:	cd b7       	in	r28, 0x3d	; 61
    ac4a:	de b7       	in	r29, 0x3e	; 62
    ac4c:	ea e0       	ldi	r30, 0x0A	; 10
    ac4e:	0c 94 04 e6 	jmp	0x1cc08	; 0x1cc08 <__epilogue_restores__+0x10>

0000ac52 <dir_find>:
    ac52:	ac e0       	ldi	r26, 0x0C	; 12
    ac54:	b0 e0       	ldi	r27, 0x00	; 0
    ac56:	ef e2       	ldi	r30, 0x2F	; 47
    ac58:	f6 e5       	ldi	r31, 0x56	; 86
    ac5a:	0c 94 e0 e5 	jmp	0x1cbc0	; 0x1cbc0 <__prologue_saves__>
    ac5e:	9c 87       	std	Y+12, r25	; 0x0c
    ac60:	8b 87       	std	Y+11, r24	; 0x0b
    ac62:	fc 01       	movw	r30, r24
    ac64:	01 90       	ld	r0, Z+
    ac66:	f0 81       	ld	r31, Z
    ac68:	e0 2d       	mov	r30, r0
    ac6a:	fc 83       	std	Y+4, r31	; 0x04
    ac6c:	eb 83       	std	Y+3, r30	; 0x03
    ac6e:	40 e0       	ldi	r20, 0x00	; 0
    ac70:	50 e0       	ldi	r21, 0x00	; 0
    ac72:	ba 01       	movw	r22, r20
    ac74:	3a db       	rcall	.-2444   	; 0xa2ea <dir_sdi>
    ac76:	00 97       	sbiw	r24, 0x00	; 0
    ac78:	09 f0       	breq	.+2      	; 0xac7c <dir_find+0x2a>
    ac7a:	e7 c0       	rjmp	.+462    	; 0xae4a <dir_find+0x1f8>
    ac7c:	8f ef       	ldi	r24, 0xFF	; 255
    ac7e:	9f ef       	ldi	r25, 0xFF	; 255
    ac80:	dc 01       	movw	r26, r24
    ac82:	eb 85       	ldd	r30, Y+11	; 0x0b
    ac84:	fc 85       	ldd	r31, Y+12	; 0x0c
    ac86:	80 a7       	std	Z+40, r24	; 0x28
    ac88:	91 a7       	std	Z+41, r25	; 0x29
    ac8a:	a2 a7       	std	Z+42, r26	; 0x2a
    ac8c:	b3 a7       	std	Z+43, r27	; 0x2b
    ac8e:	0f ef       	ldi	r16, 0xFF	; 255
    ac90:	1f ef       	ldi	r17, 0xFF	; 255
    ac92:	44 24       	eor	r4, r4
    ac94:	4a 94       	dec	r4
    ac96:	54 2c       	mov	r5, r4
    ac98:	32 01       	movw	r6, r4
    ac9a:	7c 96       	adiw	r30, 0x1c	; 28
    ac9c:	fa 87       	std	Y+10, r31	; 0x0a
    ac9e:	e9 87       	std	Y+9, r30	; 0x09
    aca0:	eb 85       	ldd	r30, Y+11	; 0x0b
    aca2:	fc 85       	ldd	r31, Y+12	; 0x0c
    aca4:	46 89       	ldd	r20, Z+22	; 0x16
    aca6:	57 89       	ldd	r21, Z+23	; 0x17
    aca8:	60 8d       	ldd	r22, Z+24	; 0x18
    acaa:	71 8d       	ldd	r23, Z+25	; 0x19
    acac:	8b 81       	ldd	r24, Y+3	; 0x03
    acae:	9c 81       	ldd	r25, Y+4	; 0x04
    acb0:	0e 94 e5 4c 	call	0x99ca	; 0x99ca <move_window>
    acb4:	00 97       	sbiw	r24, 0x00	; 0
    acb6:	09 f0       	breq	.+2      	; 0xacba <dir_find+0x68>
    acb8:	c8 c0       	rjmp	.+400    	; 0xae4a <dir_find+0x1f8>
    acba:	eb 85       	ldd	r30, Y+11	; 0x0b
    acbc:	fc 85       	ldd	r31, Y+12	; 0x0c
    acbe:	e2 8c       	ldd	r14, Z+26	; 0x1a
    acc0:	f3 8c       	ldd	r15, Z+27	; 0x1b
    acc2:	f7 01       	movw	r30, r14
    acc4:	d0 80       	ld	r13, Z
    acc6:	dd 20       	and	r13, r13
    acc8:	09 f4       	brne	.+2      	; 0xaccc <dir_find+0x7a>
    acca:	c1 c0       	rjmp	.+386    	; 0xae4e <dir_find+0x1fc>
    accc:	93 85       	ldd	r25, Z+11	; 0x0b
    acce:	89 2f       	mov	r24, r25
    acd0:	8f 73       	andi	r24, 0x3F	; 63
    acd2:	eb 85       	ldd	r30, Y+11	; 0x0b
    acd4:	fc 85       	ldd	r31, Y+12	; 0x0c
    acd6:	84 83       	std	Z+4, r24	; 0x04
    acd8:	f5 ee       	ldi	r31, 0xE5	; 229
    acda:	df 16       	cp	r13, r31
    acdc:	09 f4       	brne	.+2      	; 0xace0 <dir_find+0x8e>
    acde:	a6 c0       	rjmp	.+332    	; 0xae2c <dir_find+0x1da>
    ace0:	93 ff       	sbrs	r25, 3
    ace2:	04 c0       	rjmp	.+8      	; 0xacec <dir_find+0x9a>
    ace4:	8f 30       	cpi	r24, 0x0F	; 15
    ace6:	09 f0       	breq	.+2      	; 0xacea <dir_find+0x98>
    ace8:	a1 c0       	rjmp	.+322    	; 0xae2c <dir_find+0x1da>
    acea:	03 c0       	rjmp	.+6      	; 0xacf2 <dir_find+0xa0>
    acec:	8f 30       	cpi	r24, 0x0F	; 15
    acee:	09 f0       	breq	.+2      	; 0xacf2 <dir_find+0xa0>
    acf0:	88 c0       	rjmp	.+272    	; 0xae02 <dir_find+0x1b0>
    acf2:	eb 85       	ldd	r30, Y+11	; 0x0b
    acf4:	fc 85       	ldd	r31, Y+12	; 0x0c
    acf6:	87 a1       	ldd	r24, Z+39	; 0x27
    acf8:	86 fd       	sbrc	r24, 6
    acfa:	9f c0       	rjmp	.+318    	; 0xae3a <dir_find+0x1e8>
    acfc:	d6 fe       	sbrs	r13, 6
    acfe:	10 c0       	rjmp	.+32     	; 0xad20 <dir_find+0xce>
    ad00:	f7 01       	movw	r30, r14
    ad02:	05 85       	ldd	r16, Z+13	; 0x0d
    ad04:	fd 2d       	mov	r31, r13
    ad06:	ff 7b       	andi	r31, 0xBF	; 191
    ad08:	df 2e       	mov	r13, r31
    ad0a:	eb 85       	ldd	r30, Y+11	; 0x0b
    ad0c:	fc 85       	ldd	r31, Y+12	; 0x0c
    ad0e:	86 85       	ldd	r24, Z+14	; 0x0e
    ad10:	97 85       	ldd	r25, Z+15	; 0x0f
    ad12:	a0 89       	ldd	r26, Z+16	; 0x10
    ad14:	b1 89       	ldd	r27, Z+17	; 0x11
    ad16:	80 a7       	std	Z+40, r24	; 0x28
    ad18:	91 a7       	std	Z+41, r25	; 0x29
    ad1a:	a2 a7       	std	Z+42, r26	; 0x2a
    ad1c:	b3 a7       	std	Z+43, r27	; 0x2b
    ad1e:	02 c0       	rjmp	.+4      	; 0xad24 <dir_find+0xd2>
    ad20:	1d 11       	cpse	r17, r13
    ad22:	8a c0       	rjmp	.+276    	; 0xae38 <dir_find+0x1e6>
    ad24:	f7 01       	movw	r30, r14
    ad26:	c5 84       	ldd	r12, Z+13	; 0x0d
    ad28:	c0 12       	cpse	r12, r16
    ad2a:	86 c0       	rjmp	.+268    	; 0xae38 <dir_find+0x1e6>
    ad2c:	82 8d       	ldd	r24, Z+26	; 0x1a
    ad2e:	93 8d       	ldd	r25, Z+27	; 0x1b
    ad30:	89 2b       	or	r24, r25
    ad32:	09 f0       	breq	.+2      	; 0xad36 <dir_find+0xe4>
    ad34:	91 c0       	rjmp	.+290    	; 0xae58 <dir_find+0x206>
    ad36:	eb 81       	ldd	r30, Y+3	; 0x03
    ad38:	fc 81       	ldd	r31, Y+4	; 0x04
    ad3a:	03 84       	ldd	r0, Z+11	; 0x0b
    ad3c:	f4 85       	ldd	r31, Z+12	; 0x0c
    ad3e:	e0 2d       	mov	r30, r0
    ad40:	fe 83       	std	Y+6, r31	; 0x06
    ad42:	ed 83       	std	Y+5, r30	; 0x05
    ad44:	f7 01       	movw	r30, r14
    ad46:	80 81       	ld	r24, Z
    ad48:	8f 73       	andi	r24, 0x3F	; 63
    ad4a:	90 e0       	ldi	r25, 0x00	; 0
    ad4c:	01 97       	sbiw	r24, 0x01	; 1
    ad4e:	fd e0       	ldi	r31, 0x0D	; 13
    ad50:	f8 9f       	mul	r31, r24
    ad52:	80 01       	movw	r16, r0
    ad54:	f9 9f       	mul	r31, r25
    ad56:	10 0d       	add	r17, r0
    ad58:	11 24       	eor	r1, r1
    ad5a:	2d e4       	ldi	r18, 0x4D	; 77
    ad5c:	33 e0       	ldi	r19, 0x03	; 3
    ad5e:	3a 83       	std	Y+2, r19	; 0x02
    ad60:	29 83       	std	Y+1, r18	; 0x01
    ad62:	81 e0       	ldi	r24, 0x01	; 1
    ad64:	90 e0       	ldi	r25, 0x00	; 0
    ad66:	e9 81       	ldd	r30, Y+1	; 0x01
    ad68:	fa 81       	ldd	r31, Y+2	; 0x02
    ad6a:	21 91       	ld	r18, Z+
    ad6c:	fa 83       	std	Y+2, r31	; 0x02
    ad6e:	e9 83       	std	Y+1, r30	; 0x01
    ad70:	f7 01       	movw	r30, r14
    ad72:	e2 0f       	add	r30, r18
    ad74:	f1 1d       	adc	r31, r1
    ad76:	20 80       	ld	r2, Z
    ad78:	31 80       	ldd	r3, Z+1	; 0x01
    ad7a:	00 97       	sbiw	r24, 0x00	; 0
    ad7c:	39 f1       	breq	.+78     	; 0xadcc <dir_find+0x17a>
    ad7e:	0f 3f       	cpi	r16, 0xFF	; 255
    ad80:	11 05       	cpc	r17, r1
    ad82:	11 f0       	breq	.+4      	; 0xad88 <dir_find+0x136>
    ad84:	08 f0       	brcs	.+2      	; 0xad88 <dir_find+0x136>
    ad86:	68 c0       	rjmp	.+208    	; 0xae58 <dir_find+0x206>
    ad88:	b1 01       	movw	r22, r2
    ad8a:	80 e0       	ldi	r24, 0x00	; 0
    ad8c:	90 e0       	ldi	r25, 0x00	; 0
    ad8e:	0e 94 12 6b 	call	0xd624	; 0xd624 <ff_wtoupper>
    ad92:	4b 01       	movw	r8, r22
    ad94:	5c 01       	movw	r10, r24
    ad96:	98 01       	movw	r18, r16
    ad98:	2f 5f       	subi	r18, 0xFF	; 255
    ad9a:	3f 4f       	sbci	r19, 0xFF	; 255
    ad9c:	38 87       	std	Y+8, r19	; 0x08
    ad9e:	2f 83       	std	Y+7, r18	; 0x07
    ada0:	00 0f       	add	r16, r16
    ada2:	11 1f       	adc	r17, r17
    ada4:	ed 81       	ldd	r30, Y+5	; 0x05
    ada6:	fe 81       	ldd	r31, Y+6	; 0x06
    ada8:	e0 0f       	add	r30, r16
    adaa:	f1 1f       	adc	r31, r17
    adac:	60 81       	ld	r22, Z
    adae:	71 81       	ldd	r23, Z+1	; 0x01
    adb0:	80 e0       	ldi	r24, 0x00	; 0
    adb2:	90 e0       	ldi	r25, 0x00	; 0
    adb4:	0e 94 12 6b 	call	0xd624	; 0xd624 <ff_wtoupper>
    adb8:	86 16       	cp	r8, r22
    adba:	97 06       	cpc	r9, r23
    adbc:	a8 06       	cpc	r10, r24
    adbe:	b9 06       	cpc	r11, r25
    adc0:	09 f0       	breq	.+2      	; 0xadc4 <dir_find+0x172>
    adc2:	4a c0       	rjmp	.+148    	; 0xae58 <dir_find+0x206>
    adc4:	c1 01       	movw	r24, r2
    adc6:	0f 81       	ldd	r16, Y+7	; 0x07
    adc8:	18 85       	ldd	r17, Y+8	; 0x08
    adca:	05 c0       	rjmp	.+10     	; 0xadd6 <dir_find+0x184>
    adcc:	3f ef       	ldi	r19, 0xFF	; 255
    adce:	23 16       	cp	r2, r19
    add0:	33 06       	cpc	r3, r19
    add2:	09 f0       	breq	.+2      	; 0xadd6 <dir_find+0x184>
    add4:	41 c0       	rjmp	.+130    	; 0xae58 <dir_find+0x206>
    add6:	e9 81       	ldd	r30, Y+1	; 0x01
    add8:	fa 81       	ldd	r31, Y+2	; 0x02
    adda:	ea 55       	subi	r30, 0x5A	; 90
    addc:	f3 40       	sbci	r31, 0x03	; 3
    adde:	19 f6       	brne	.-122    	; 0xad66 <dir_find+0x114>
    ade0:	f7 01       	movw	r30, r14
    ade2:	20 81       	ld	r18, Z
    ade4:	26 ff       	sbrs	r18, 6
    ade6:	3a c0       	rjmp	.+116    	; 0xae5c <dir_find+0x20a>
    ade8:	89 2b       	or	r24, r25
    adea:	c1 f1       	breq	.+112    	; 0xae5c <dir_find+0x20a>
    adec:	00 0f       	add	r16, r16
    adee:	11 1f       	adc	r17, r17
    adf0:	ed 81       	ldd	r30, Y+5	; 0x05
    adf2:	fe 81       	ldd	r31, Y+6	; 0x06
    adf4:	e0 0f       	add	r30, r16
    adf6:	f1 1f       	adc	r31, r17
    adf8:	80 81       	ld	r24, Z
    adfa:	91 81       	ldd	r25, Z+1	; 0x01
    adfc:	89 2b       	or	r24, r25
    adfe:	71 f1       	breq	.+92     	; 0xae5c <dir_find+0x20a>
    ae00:	2b c0       	rjmp	.+86     	; 0xae58 <dir_find+0x206>
    ae02:	11 11       	cpse	r17, r1
    ae04:	05 c0       	rjmp	.+10     	; 0xae10 <dir_find+0x1be>
    ae06:	c7 01       	movw	r24, r14
    ae08:	0e 94 1e 49 	call	0x923c	; 0x923c <sum_sfn>
    ae0c:	08 17       	cp	r16, r24
    ae0e:	09 f1       	breq	.+66     	; 0xae52 <dir_find+0x200>
    ae10:	eb 85       	ldd	r30, Y+11	; 0x0b
    ae12:	fc 85       	ldd	r31, Y+12	; 0x0c
    ae14:	87 a1       	ldd	r24, Z+39	; 0x27
    ae16:	80 fd       	sbrc	r24, 0
    ae18:	09 c0       	rjmp	.+18     	; 0xae2c <dir_find+0x1da>
    ae1a:	4b e0       	ldi	r20, 0x0B	; 11
    ae1c:	50 e0       	ldi	r21, 0x00	; 0
    ae1e:	69 85       	ldd	r22, Y+9	; 0x09
    ae20:	7a 85       	ldd	r23, Y+10	; 0x0a
    ae22:	c7 01       	movw	r24, r14
    ae24:	0e 94 25 48 	call	0x904a	; 0x904a <mem_cmp>
    ae28:	89 2b       	or	r24, r25
    ae2a:	99 f0       	breq	.+38     	; 0xae52 <dir_find+0x200>
    ae2c:	eb 85       	ldd	r30, Y+11	; 0x0b
    ae2e:	fc 85       	ldd	r31, Y+12	; 0x0c
    ae30:	40 a6       	std	Z+40, r4	; 0x28
    ae32:	51 a6       	std	Z+41, r5	; 0x29
    ae34:	62 a6       	std	Z+42, r6	; 0x2a
    ae36:	73 a6       	std	Z+43, r7	; 0x2b
    ae38:	1f ef       	ldi	r17, 0xFF	; 255
    ae3a:	60 e0       	ldi	r22, 0x00	; 0
    ae3c:	70 e0       	ldi	r23, 0x00	; 0
    ae3e:	8b 85       	ldd	r24, Y+11	; 0x0b
    ae40:	9c 85       	ldd	r25, Y+12	; 0x0c
    ae42:	cb dc       	rcall	.-1642   	; 0xa7da <dir_next>
    ae44:	00 97       	sbiw	r24, 0x00	; 0
    ae46:	09 f4       	brne	.+2      	; 0xae4a <dir_find+0x1f8>
    ae48:	2b cf       	rjmp	.-426    	; 0xaca0 <dir_find+0x4e>
    ae4a:	28 2f       	mov	r18, r24
    ae4c:	0b c0       	rjmp	.+22     	; 0xae64 <dir_find+0x212>
    ae4e:	24 e0       	ldi	r18, 0x04	; 4
    ae50:	01 c0       	rjmp	.+2      	; 0xae54 <dir_find+0x202>
    ae52:	20 e0       	ldi	r18, 0x00	; 0
    ae54:	90 e0       	ldi	r25, 0x00	; 0
    ae56:	06 c0       	rjmp	.+12     	; 0xae64 <dir_find+0x212>
    ae58:	0c 2d       	mov	r16, r12
    ae5a:	ee cf       	rjmp	.-36     	; 0xae38 <dir_find+0x1e6>
    ae5c:	1f ef       	ldi	r17, 0xFF	; 255
    ae5e:	1d 0d       	add	r17, r13
    ae60:	0c 2d       	mov	r16, r12
    ae62:	eb cf       	rjmp	.-42     	; 0xae3a <dir_find+0x1e8>
    ae64:	82 2f       	mov	r24, r18
    ae66:	2c 96       	adiw	r28, 0x0c	; 12
    ae68:	e2 e1       	ldi	r30, 0x12	; 18
    ae6a:	0c 94 fc e5 	jmp	0x1cbf8	; 0x1cbf8 <__epilogue_restores__>

0000ae6e <dir_register>:
    ae6e:	a6 e1       	ldi	r26, 0x16	; 22
    ae70:	b0 e0       	ldi	r27, 0x00	; 0
    ae72:	ed e3       	ldi	r30, 0x3D	; 61
    ae74:	f7 e5       	ldi	r31, 0x57	; 87
    ae76:	0c 94 e0 e5 	jmp	0x1cbc0	; 0x1cbc0 <__prologue_saves__>
    ae7a:	dc 01       	movw	r26, r24
    ae7c:	97 96       	adiw	r26, 0x27	; 39
    ae7e:	2c 91       	ld	r18, X
    ae80:	97 97       	sbiw	r26, 0x27	; 39
    ae82:	20 7a       	andi	r18, 0xA0	; 160
    ae84:	09 f0       	breq	.+2      	; 0xae88 <dir_register+0x1a>
    ae86:	61 c1       	rjmp	.+706    	; 0xb14a <dir_register+0x2dc>
    ae88:	cd 90       	ld	r12, X+
    ae8a:	dc 90       	ld	r13, X
    ae8c:	d6 01       	movw	r26, r12
    ae8e:	1b 96       	adiw	r26, 0x0b	; 11
    ae90:	ed 91       	ld	r30, X+
    ae92:	fc 91       	ld	r31, X
    ae94:	1c 97       	sbiw	r26, 0x0c	; 12
    ae96:	81 2c       	mov	r8, r1
    ae98:	91 2c       	mov	r9, r1
    ae9a:	21 91       	ld	r18, Z+
    ae9c:	31 91       	ld	r19, Z+
    ae9e:	23 2b       	or	r18, r19
    aea0:	21 f0       	breq	.+8      	; 0xaeaa <dir_register+0x3c>
    aea2:	bf ef       	ldi	r27, 0xFF	; 255
    aea4:	8b 1a       	sub	r8, r27
    aea6:	9b 0a       	sbc	r9, r27
    aea8:	f8 cf       	rjmp	.-16     	; 0xae9a <dir_register+0x2c>
    aeaa:	8c 01       	movw	r16, r24
    aeac:	5c 01       	movw	r10, r24
    aeae:	ec e1       	ldi	r30, 0x1C	; 28
    aeb0:	ae 0e       	add	r10, r30
    aeb2:	b1 1c       	adc	r11, r1
    aeb4:	4c e0       	ldi	r20, 0x0C	; 12
    aeb6:	50 e0       	ldi	r21, 0x00	; 0
    aeb8:	b5 01       	movw	r22, r10
    aeba:	ce 01       	movw	r24, r28
    aebc:	01 96       	adiw	r24, 0x01	; 1
    aebe:	0e 94 85 49 	call	0x930a	; 0x930a <mem_cpy.part.0>
    aec2:	8c 85       	ldd	r24, Y+12	; 0x0c
    aec4:	80 ff       	sbrs	r24, 0
    aec6:	96 c0       	rjmp	.+300    	; 0xaff4 <dir_register+0x186>
    aec8:	80 e4       	ldi	r24, 0x40	; 64
    aeca:	d8 01       	movw	r26, r16
    aecc:	97 96       	adiw	r26, 0x27	; 39
    aece:	8c 93       	st	X, r24
    aed0:	41 2c       	mov	r4, r1
    aed2:	51 2c       	mov	r5, r1
    aed4:	32 01       	movw	r6, r4
    aed6:	43 94       	inc	r4
    aed8:	72 01       	movw	r14, r4
    aeda:	f6 01       	movw	r30, r12
    aedc:	23 84       	ldd	r2, Z+11	; 0x0b
    aede:	34 84       	ldd	r3, Z+12	; 0x0c
    aee0:	4b e0       	ldi	r20, 0x0B	; 11
    aee2:	50 e0       	ldi	r21, 0x00	; 0
    aee4:	be 01       	movw	r22, r28
    aee6:	6f 5f       	subi	r22, 0xFF	; 255
    aee8:	7f 4f       	sbci	r23, 0xFF	; 255
    aeea:	c5 01       	movw	r24, r10
    aeec:	0e 94 85 49 	call	0x930a	; 0x930a <mem_cpy.part.0>
    aef0:	f6 e0       	ldi	r31, 0x06	; 6
    aef2:	4f 16       	cp	r4, r31
    aef4:	51 04       	cpc	r5, r1
    aef6:	18 f1       	brcs	.+70     	; 0xaf3e <dir_register+0xd0>
    aef8:	f1 01       	movw	r30, r2
    aefa:	b3 01       	movw	r22, r6
    aefc:	a2 01       	movw	r20, r4
    aefe:	81 91       	ld	r24, Z+
    af00:	91 91       	ld	r25, Z+
    af02:	00 97       	sbiw	r24, 0x00	; 0
    af04:	d9 f0       	breq	.+54     	; 0xaf3c <dir_register+0xce>
    af06:	20 e1       	ldi	r18, 0x10	; 16
    af08:	30 e0       	ldi	r19, 0x00	; 0
    af0a:	44 0f       	add	r20, r20
    af0c:	55 1f       	adc	r21, r21
    af0e:	66 1f       	adc	r22, r22
    af10:	77 1f       	adc	r23, r23
    af12:	dc 01       	movw	r26, r24
    af14:	a1 70       	andi	r26, 0x01	; 1
    af16:	bb 27       	eor	r27, r27
    af18:	4a 0f       	add	r20, r26
    af1a:	5b 1f       	adc	r21, r27
    af1c:	61 1d       	adc	r22, r1
    af1e:	71 1d       	adc	r23, r1
    af20:	96 95       	lsr	r25
    af22:	87 95       	ror	r24
    af24:	60 ff       	sbrs	r22, 0
    af26:	06 c0       	rjmp	.+12     	; 0xaf34 <dir_register+0xc6>
    af28:	a1 e2       	ldi	r26, 0x21	; 33
    af2a:	4a 27       	eor	r20, r26
    af2c:	a0 e1       	ldi	r26, 0x10	; 16
    af2e:	5a 27       	eor	r21, r26
    af30:	a1 e0       	ldi	r26, 0x01	; 1
    af32:	6a 27       	eor	r22, r26
    af34:	21 50       	subi	r18, 0x01	; 1
    af36:	31 09       	sbc	r19, r1
    af38:	41 f7       	brne	.-48     	; 0xaf0a <dir_register+0x9c>
    af3a:	e1 cf       	rjmp	.-62     	; 0xaefe <dir_register+0x90>
    af3c:	7a 01       	movw	r14, r20
    af3e:	fe 01       	movw	r30, r28
    af40:	75 96       	adiw	r30, 0x15	; 21
    af42:	27 e0       	ldi	r18, 0x07	; 7
    af44:	30 e0       	ldi	r19, 0x00	; 0
    af46:	9e 2d       	mov	r25, r14
    af48:	9f 70       	andi	r25, 0x0F	; 15
    af4a:	80 e3       	ldi	r24, 0x30	; 48
    af4c:	89 0f       	add	r24, r25
    af4e:	8a 33       	cpi	r24, 0x3A	; 58
    af50:	10 f0       	brcs	.+4      	; 0xaf56 <dir_register+0xe8>
    af52:	87 e3       	ldi	r24, 0x37	; 55
    af54:	89 0f       	add	r24, r25
    af56:	21 50       	subi	r18, 0x01	; 1
    af58:	31 09       	sbc	r19, r1
    af5a:	82 93       	st	-Z, r24
    af5c:	a4 e0       	ldi	r26, 0x04	; 4
    af5e:	f6 94       	lsr	r15
    af60:	e7 94       	ror	r14
    af62:	aa 95       	dec	r26
    af64:	e1 f7       	brne	.-8      	; 0xaf5e <dir_register+0xf0>
    af66:	e1 14       	cp	r14, r1
    af68:	f1 04       	cpc	r15, r1
    af6a:	69 f7       	brne	.-38     	; 0xaf46 <dir_register+0xd8>
    af6c:	ed e0       	ldi	r30, 0x0D	; 13
    af6e:	f0 e0       	ldi	r31, 0x00	; 0
    af70:	ec 0f       	add	r30, r28
    af72:	fd 1f       	adc	r31, r29
    af74:	e2 0f       	add	r30, r18
    af76:	f3 1f       	adc	r31, r19
    af78:	be e7       	ldi	r27, 0x7E	; 126
    af7a:	b0 83       	st	Z, r27
    af7c:	f5 01       	movw	r30, r10
    af7e:	80 e0       	ldi	r24, 0x00	; 0
    af80:	90 e0       	ldi	r25, 0x00	; 0
    af82:	28 17       	cp	r18, r24
    af84:	39 07       	cpc	r19, r25
    af86:	29 f0       	breq	.+10     	; 0xaf92 <dir_register+0x124>
    af88:	41 91       	ld	r20, Z+
    af8a:	40 32       	cpi	r20, 0x20	; 32
    af8c:	11 f0       	breq	.+4      	; 0xaf92 <dir_register+0x124>
    af8e:	01 96       	adiw	r24, 0x01	; 1
    af90:	f8 cf       	rjmp	.-16     	; 0xaf82 <dir_register+0x114>
    af92:	f5 01       	movw	r30, r10
    af94:	e8 0f       	add	r30, r24
    af96:	f9 1f       	adc	r31, r25
    af98:	28 30       	cpi	r18, 0x08	; 8
    af9a:	31 05       	cpc	r19, r1
    af9c:	50 f4       	brcc	.+20     	; 0xafb2 <dir_register+0x144>
    af9e:	ad e0       	ldi	r26, 0x0D	; 13
    afa0:	b0 e0       	ldi	r27, 0x00	; 0
    afa2:	ac 0f       	add	r26, r28
    afa4:	bd 1f       	adc	r27, r29
    afa6:	a2 0f       	add	r26, r18
    afa8:	b3 1f       	adc	r27, r19
    afaa:	8c 91       	ld	r24, X
    afac:	2f 5f       	subi	r18, 0xFF	; 255
    afae:	3f 4f       	sbci	r19, 0xFF	; 255
    afb0:	01 c0       	rjmp	.+2      	; 0xafb4 <dir_register+0x146>
    afb2:	80 e2       	ldi	r24, 0x20	; 32
    afb4:	81 93       	st	Z+, r24
    afb6:	cf 01       	movw	r24, r30
    afb8:	8a 19       	sub	r24, r10
    afba:	9b 09       	sbc	r25, r11
    afbc:	08 97       	sbiw	r24, 0x08	; 8
    afbe:	60 f3       	brcs	.-40     	; 0xaf98 <dir_register+0x12a>
    afc0:	c8 01       	movw	r24, r16
    afc2:	47 de       	rcall	.-882    	; 0xac52 <dir_find>
    afc4:	00 97       	sbiw	r24, 0x00	; 0
    afc6:	71 f4       	brne	.+28     	; 0xafe4 <dir_register+0x176>
    afc8:	ef ef       	ldi	r30, 0xFF	; 255
    afca:	4e 1a       	sub	r4, r30
    afcc:	5e 0a       	sbc	r5, r30
    afce:	6e 0a       	sbc	r6, r30
    afd0:	7e 0a       	sbc	r7, r30
    afd2:	f4 e6       	ldi	r31, 0x64	; 100
    afd4:	4f 16       	cp	r4, r31
    afd6:	51 04       	cpc	r5, r1
    afd8:	61 04       	cpc	r6, r1
    afda:	71 04       	cpc	r7, r1
    afdc:	09 f0       	breq	.+2      	; 0xafe0 <dir_register+0x172>
    afde:	7c cf       	rjmp	.-264    	; 0xaed8 <dir_register+0x6a>
    afe0:	27 e0       	ldi	r18, 0x07	; 7
    afe2:	b4 c0       	rjmp	.+360    	; 0xb14c <dir_register+0x2de>
    afe4:	84 30       	cpi	r24, 0x04	; 4
    afe6:	91 05       	cpc	r25, r1
    afe8:	09 f0       	breq	.+2      	; 0xafec <dir_register+0x17e>
    afea:	df c0       	rjmp	.+446    	; 0xb1aa <dir_register+0x33c>
    afec:	8c 85       	ldd	r24, Y+12	; 0x0c
    afee:	d8 01       	movw	r26, r16
    aff0:	97 96       	adiw	r26, 0x27	; 39
    aff2:	8c 93       	st	X, r24
    aff4:	8c 85       	ldd	r24, Y+12	; 0x0c
    aff6:	81 ff       	sbrs	r24, 1
    aff8:	0b c0       	rjmp	.+22     	; 0xb010 <dir_register+0x1a2>
    affa:	c4 01       	movw	r24, r8
    affc:	0c 96       	adiw	r24, 0x0c	; 12
    affe:	6d e0       	ldi	r22, 0x0D	; 13
    b000:	70 e0       	ldi	r23, 0x00	; 0
    b002:	0e 94 37 e5 	call	0x1ca6e	; 0x1ca6e <__udivmodhi4>
    b006:	7b 01       	movw	r14, r22
    b008:	bf ef       	ldi	r27, 0xFF	; 255
    b00a:	eb 1a       	sub	r14, r27
    b00c:	fb 0a       	sbc	r15, r27
    b00e:	03 c0       	rjmp	.+6      	; 0xb016 <dir_register+0x1a8>
    b010:	ee 24       	eor	r14, r14
    b012:	e3 94       	inc	r14
    b014:	f1 2c       	mov	r15, r1
    b016:	b7 01       	movw	r22, r14
    b018:	c8 01       	movw	r24, r16
    b01a:	c7 dc       	rcall	.-1650   	; 0xa9aa <dir_alloc>
    b01c:	00 97       	sbiw	r24, 0x00	; 0
    b01e:	09 f0       	breq	.+2      	; 0xb022 <dir_register+0x1b4>
    b020:	c4 c0       	rjmp	.+392    	; 0xb1aa <dir_register+0x33c>
    b022:	e1 e0       	ldi	r30, 0x01	; 1
    b024:	ee 1a       	sub	r14, r30
    b026:	f1 08       	sbc	r15, r1
    b028:	09 f4       	brne	.+2      	; 0xb02c <dir_register+0x1be>
    b02a:	92 c0       	rjmp	.+292    	; 0xb150 <dir_register+0x2e2>
    b02c:	d8 01       	movw	r26, r16
    b02e:	1e 96       	adiw	r26, 0x0e	; 14
    b030:	4d 91       	ld	r20, X+
    b032:	5d 91       	ld	r21, X+
    b034:	6d 91       	ld	r22, X+
    b036:	7c 91       	ld	r23, X
    b038:	51 97       	sbiw	r26, 0x11	; 17
    b03a:	c7 01       	movw	r24, r14
    b03c:	e5 e0       	ldi	r30, 0x05	; 5
    b03e:	88 0f       	add	r24, r24
    b040:	99 1f       	adc	r25, r25
    b042:	ea 95       	dec	r30
    b044:	e1 f7       	brne	.-8      	; 0xb03e <dir_register+0x1d0>
    b046:	48 1b       	sub	r20, r24
    b048:	59 0b       	sbc	r21, r25
    b04a:	61 09       	sbc	r22, r1
    b04c:	71 09       	sbc	r23, r1
    b04e:	c8 01       	movw	r24, r16
    b050:	4c d9       	rcall	.-3432   	; 0xa2ea <dir_sdi>
    b052:	00 97       	sbiw	r24, 0x00	; 0
    b054:	09 f0       	breq	.+2      	; 0xb058 <dir_register+0x1ea>
    b056:	a9 c0       	rjmp	.+338    	; 0xb1aa <dir_register+0x33c>
    b058:	c5 01       	movw	r24, r10
    b05a:	0e 94 1e 49 	call	0x923c	; 0x923c <sum_sfn>
    b05e:	68 2e       	mov	r6, r24
    b060:	5f e0       	ldi	r21, 0x0F	; 15
    b062:	35 2e       	mov	r3, r21
    b064:	6d e0       	ldi	r22, 0x0D	; 13
    b066:	46 2e       	mov	r4, r22
    b068:	7a e5       	ldi	r23, 0x5A	; 90
    b06a:	87 2e       	mov	r8, r23
    b06c:	73 e0       	ldi	r23, 0x03	; 3
    b06e:	97 2e       	mov	r9, r23
    b070:	55 24       	eor	r5, r5
    b072:	53 94       	inc	r5
    b074:	f8 01       	movw	r30, r16
    b076:	46 89       	ldd	r20, Z+22	; 0x16
    b078:	57 89       	ldd	r21, Z+23	; 0x17
    b07a:	60 8d       	ldd	r22, Z+24	; 0x18
    b07c:	71 8d       	ldd	r23, Z+25	; 0x19
    b07e:	c6 01       	movw	r24, r12
    b080:	0e 94 e5 4c 	call	0x99ca	; 0x99ca <move_window>
    b084:	00 97       	sbiw	r24, 0x00	; 0
    b086:	09 f0       	breq	.+2      	; 0xb08a <dir_register+0x21c>
    b088:	90 c0       	rjmp	.+288    	; 0xb1aa <dir_register+0x33c>
    b08a:	7e 2c       	mov	r7, r14
    b08c:	d8 01       	movw	r26, r16
    b08e:	5a 96       	adiw	r26, 0x1a	; 26
    b090:	ed 91       	ld	r30, X+
    b092:	fc 91       	ld	r31, X
    b094:	5b 97       	sbiw	r26, 0x1b	; 27
    b096:	d6 01       	movw	r26, r12
    b098:	1b 96       	adiw	r26, 0x0b	; 11
    b09a:	6d 91       	ld	r22, X+
    b09c:	7c 91       	ld	r23, X
    b09e:	1c 97       	sbiw	r26, 0x0c	; 12
    b0a0:	65 86       	std	Z+13, r6	; 0x0d
    b0a2:	33 86       	std	Z+11, r3	; 0x0b
    b0a4:	14 86       	std	Z+12, r1	; 0x0c
    b0a6:	12 8e       	std	Z+26, r1	; 0x1a
    b0a8:	13 8e       	std	Z+27, r1	; 0x1b
    b0aa:	97 01       	movw	r18, r14
    b0ac:	33 27       	eor	r19, r19
    b0ae:	21 50       	subi	r18, 0x01	; 1
    b0b0:	31 09       	sbc	r19, r1
    b0b2:	42 9e       	mul	r4, r18
    b0b4:	c0 01       	movw	r24, r0
    b0b6:	43 9e       	mul	r4, r19
    b0b8:	90 0d       	add	r25, r0
    b0ba:	11 24       	eor	r1, r1
    b0bc:	2d e4       	ldi	r18, 0x4D	; 77
    b0be:	33 e0       	ldi	r19, 0x03	; 3
    b0c0:	3e 8b       	std	Y+22, r19	; 0x16
    b0c2:	2d 8b       	std	Y+21, r18	; 0x15
    b0c4:	20 e0       	ldi	r18, 0x00	; 0
    b0c6:	30 e0       	ldi	r19, 0x00	; 0
    b0c8:	2f 3f       	cpi	r18, 0xFF	; 255
    b0ca:	4f ef       	ldi	r20, 0xFF	; 255
    b0cc:	34 07       	cpc	r19, r20
    b0ce:	49 f0       	breq	.+18     	; 0xb0e2 <dir_register+0x274>
    b0d0:	9c 01       	movw	r18, r24
    b0d2:	22 0f       	add	r18, r18
    b0d4:	33 1f       	adc	r19, r19
    b0d6:	26 0f       	add	r18, r22
    b0d8:	37 1f       	adc	r19, r23
    b0da:	d9 01       	movw	r26, r18
    b0dc:	2d 91       	ld	r18, X+
    b0de:	3c 91       	ld	r19, X
    b0e0:	01 96       	adiw	r24, 0x01	; 1
    b0e2:	ad 89       	ldd	r26, Y+21	; 0x15
    b0e4:	be 89       	ldd	r27, Y+22	; 0x16
    b0e6:	4d 91       	ld	r20, X+
    b0e8:	be 8b       	std	Y+22, r27	; 0x16
    b0ea:	ad 8b       	std	Y+21, r26	; 0x15
    b0ec:	df 01       	movw	r26, r30
    b0ee:	a4 0f       	add	r26, r20
    b0f0:	b1 1d       	adc	r27, r1
    b0f2:	2c 93       	st	X, r18
    b0f4:	11 96       	adiw	r26, 0x01	; 1
    b0f6:	3c 93       	st	X, r19
    b0f8:	21 15       	cp	r18, r1
    b0fa:	31 05       	cpc	r19, r1
    b0fc:	11 f4       	brne	.+4      	; 0xb102 <dir_register+0x294>
    b0fe:	2f ef       	ldi	r18, 0xFF	; 255
    b100:	3f ef       	ldi	r19, 0xFF	; 255
    b102:	4d 89       	ldd	r20, Y+21	; 0x15
    b104:	5e 89       	ldd	r21, Y+22	; 0x16
    b106:	84 16       	cp	r8, r20
    b108:	95 06       	cpc	r9, r21
    b10a:	f1 f6       	brne	.-68     	; 0xb0c8 <dir_register+0x25a>
    b10c:	2f 3f       	cpi	r18, 0xFF	; 255
    b10e:	3f 4f       	sbci	r19, 0xFF	; 255
    b110:	49 f0       	breq	.+18     	; 0xb124 <dir_register+0x2b6>
    b112:	88 0f       	add	r24, r24
    b114:	99 1f       	adc	r25, r25
    b116:	db 01       	movw	r26, r22
    b118:	a8 0f       	add	r26, r24
    b11a:	b9 1f       	adc	r27, r25
    b11c:	8d 91       	ld	r24, X+
    b11e:	9c 91       	ld	r25, X
    b120:	89 2b       	or	r24, r25
    b122:	19 f4       	brne	.+6      	; 0xb12a <dir_register+0x2bc>
    b124:	87 2d       	mov	r24, r7
    b126:	80 64       	ori	r24, 0x40	; 64
    b128:	78 2e       	mov	r7, r24
    b12a:	70 82       	st	Z, r7
    b12c:	d6 01       	movw	r26, r12
    b12e:	13 96       	adiw	r26, 0x03	; 3
    b130:	5c 92       	st	X, r5
    b132:	60 e0       	ldi	r22, 0x00	; 0
    b134:	70 e0       	ldi	r23, 0x00	; 0
    b136:	c8 01       	movw	r24, r16
    b138:	50 db       	rcall	.-2400   	; 0xa7da <dir_next>
    b13a:	00 97       	sbiw	r24, 0x00	; 0
    b13c:	b1 f5       	brne	.+108    	; 0xb1aa <dir_register+0x33c>
    b13e:	b1 e0       	ldi	r27, 0x01	; 1
    b140:	eb 1a       	sub	r14, r27
    b142:	f1 08       	sbc	r15, r1
    b144:	09 f0       	breq	.+2      	; 0xb148 <dir_register+0x2da>
    b146:	96 cf       	rjmp	.-212    	; 0xb074 <dir_register+0x206>
    b148:	03 c0       	rjmp	.+6      	; 0xb150 <dir_register+0x2e2>
    b14a:	26 e0       	ldi	r18, 0x06	; 6
    b14c:	90 e0       	ldi	r25, 0x00	; 0
    b14e:	2e c0       	rjmp	.+92     	; 0xb1ac <dir_register+0x33e>
    b150:	d8 01       	movw	r26, r16
    b152:	56 96       	adiw	r26, 0x16	; 22
    b154:	4d 91       	ld	r20, X+
    b156:	5d 91       	ld	r21, X+
    b158:	6d 91       	ld	r22, X+
    b15a:	7c 91       	ld	r23, X
    b15c:	59 97       	sbiw	r26, 0x19	; 25
    b15e:	c6 01       	movw	r24, r12
    b160:	0e 94 e5 4c 	call	0x99ca	; 0x99ca <move_window>
    b164:	00 97       	sbiw	r24, 0x00	; 0
    b166:	09 f5       	brne	.+66     	; 0xb1aa <dir_register+0x33c>
    b168:	40 e2       	ldi	r20, 0x20	; 32
    b16a:	50 e0       	ldi	r21, 0x00	; 0
    b16c:	60 e0       	ldi	r22, 0x00	; 0
    b16e:	70 e0       	ldi	r23, 0x00	; 0
    b170:	f8 01       	movw	r30, r16
    b172:	82 8d       	ldd	r24, Z+26	; 0x1a
    b174:	93 8d       	ldd	r25, Z+27	; 0x1b
    b176:	0e 94 1c 48 	call	0x9038	; 0x9038 <mem_set>
    b17a:	4b e0       	ldi	r20, 0x0B	; 11
    b17c:	50 e0       	ldi	r21, 0x00	; 0
    b17e:	b5 01       	movw	r22, r10
    b180:	d8 01       	movw	r26, r16
    b182:	5a 96       	adiw	r26, 0x1a	; 26
    b184:	8d 91       	ld	r24, X+
    b186:	9c 91       	ld	r25, X
    b188:	5b 97       	sbiw	r26, 0x1b	; 27
    b18a:	0e 94 85 49 	call	0x930a	; 0x930a <mem_cpy.part.0>
    b18e:	d8 01       	movw	r26, r16
    b190:	5a 96       	adiw	r26, 0x1a	; 26
    b192:	ed 91       	ld	r30, X+
    b194:	fc 91       	ld	r31, X
    b196:	5b 97       	sbiw	r26, 0x1b	; 27
    b198:	97 96       	adiw	r26, 0x27	; 39
    b19a:	8c 91       	ld	r24, X
    b19c:	88 71       	andi	r24, 0x18	; 24
    b19e:	84 87       	std	Z+12, r24	; 0x0c
    b1a0:	81 e0       	ldi	r24, 0x01	; 1
    b1a2:	f6 01       	movw	r30, r12
    b1a4:	83 83       	std	Z+3, r24	; 0x03
    b1a6:	20 e0       	ldi	r18, 0x00	; 0
    b1a8:	d1 cf       	rjmp	.-94     	; 0xb14c <dir_register+0x2de>
    b1aa:	28 2f       	mov	r18, r24
    b1ac:	82 2f       	mov	r24, r18
    b1ae:	66 96       	adiw	r28, 0x16	; 22
    b1b0:	e2 e1       	ldi	r30, 0x12	; 18
    b1b2:	0c 94 fc e5 	jmp	0x1cbf8	; 0x1cbf8 <__epilogue_restores__>

0000b1b6 <follow_path>:
    b1b6:	aa e0       	ldi	r26, 0x0A	; 10
    b1b8:	b0 e0       	ldi	r27, 0x00	; 0
    b1ba:	e1 ee       	ldi	r30, 0xE1	; 225
    b1bc:	f8 e5       	ldi	r31, 0x58	; 88
    b1be:	0c 94 e0 e5 	jmp	0x1cbc0	; 0x1cbc0 <__prologue_saves__>
    b1c2:	7c 01       	movw	r14, r24
    b1c4:	3b 01       	movw	r6, r22
    b1c6:	dc 01       	movw	r26, r24
    b1c8:	0d 90       	ld	r0, X+
    b1ca:	bc 91       	ld	r27, X
    b1cc:	a0 2d       	mov	r26, r0
    b1ce:	be 83       	std	Y+6, r27	; 0x06
    b1d0:	ad 83       	std	Y+5, r26	; 0x05
    b1d2:	fb 01       	movw	r30, r22
    b1d4:	80 81       	ld	r24, Z
    b1d6:	8f 32       	cpi	r24, 0x2F	; 47
    b1d8:	11 f0       	breq	.+4      	; 0xb1de <follow_path+0x28>
    b1da:	8c 35       	cpi	r24, 0x5C	; 92
    b1dc:	11 f4       	brne	.+4      	; 0xb1e2 <follow_path+0x2c>
    b1de:	93 01       	movw	r18, r6
    b1e0:	0c c0       	rjmp	.+24     	; 0xb1fa <follow_path+0x44>
    b1e2:	ed 81       	ldd	r30, Y+5	; 0x05
    b1e4:	fe 81       	ldd	r31, Y+6	; 0x06
    b1e6:	85 89       	ldd	r24, Z+21	; 0x15
    b1e8:	96 89       	ldd	r25, Z+22	; 0x16
    b1ea:	a7 89       	ldd	r26, Z+23	; 0x17
    b1ec:	b0 8d       	ldd	r27, Z+24	; 0x18
    b1ee:	f7 01       	movw	r30, r14
    b1f0:	86 83       	std	Z+6, r24	; 0x06
    b1f2:	97 83       	std	Z+7, r25	; 0x07
    b1f4:	a0 87       	std	Z+8, r26	; 0x08
    b1f6:	b1 87       	std	Z+9, r27	; 0x09
    b1f8:	0e c0       	rjmp	.+28     	; 0xb216 <follow_path+0x60>
    b1fa:	39 01       	movw	r6, r18
    b1fc:	d9 01       	movw	r26, r18
    b1fe:	8c 91       	ld	r24, X
    b200:	2f 5f       	subi	r18, 0xFF	; 255
    b202:	3f 4f       	sbci	r19, 0xFF	; 255
    b204:	8f 32       	cpi	r24, 0x2F	; 47
    b206:	c9 f3       	breq	.-14     	; 0xb1fa <follow_path+0x44>
    b208:	8c 35       	cpi	r24, 0x5C	; 92
    b20a:	b9 f3       	breq	.-18     	; 0xb1fa <follow_path+0x44>
    b20c:	f7 01       	movw	r30, r14
    b20e:	16 82       	std	Z+6, r1	; 0x06
    b210:	17 82       	std	Z+7, r1	; 0x07
    b212:	10 86       	std	Z+8, r1	; 0x08
    b214:	11 86       	std	Z+9, r1	; 0x09
    b216:	d3 01       	movw	r26, r6
    b218:	8c 91       	ld	r24, X
    b21a:	80 32       	cpi	r24, 0x20	; 32
    b21c:	58 f0       	brcs	.+22     	; 0xb234 <follow_path+0x7e>
    b21e:	f7 01       	movw	r30, r14
    b220:	7c 96       	adiw	r30, 0x1c	; 28
    b222:	f8 87       	std	Y+8, r31	; 0x08
    b224:	ef 83       	std	Y+7, r30	; 0x07
    b226:	2d 81       	ldd	r18, Y+5	; 0x05
    b228:	3e 81       	ldd	r19, Y+6	; 0x06
    b22a:	2b 5c       	subi	r18, 0xCB	; 203
    b22c:	3f 4f       	sbci	r19, 0xFF	; 255
    b22e:	3a 87       	std	Y+10, r19	; 0x0a
    b230:	29 87       	std	Y+9, r18	; 0x09
    b232:	98 c0       	rjmp	.+304    	; 0xb364 <follow_path+0x1ae>
    b234:	80 e8       	ldi	r24, 0x80	; 128
    b236:	d7 01       	movw	r26, r14
    b238:	97 96       	adiw	r26, 0x27	; 39
    b23a:	8c 93       	st	X, r24
    b23c:	40 e0       	ldi	r20, 0x00	; 0
    b23e:	50 e0       	ldi	r21, 0x00	; 0
    b240:	ba 01       	movw	r22, r20
    b242:	c7 01       	movw	r24, r14
    b244:	52 d8       	rcall	.-3932   	; 0xa2ea <dir_sdi>
    b246:	e9 c1       	rjmp	.+978    	; 0xb61a <follow_path+0x464>
    b248:	6c 35       	cpi	r22, 0x5C	; 92
    b24a:	71 05       	cpc	r23, r1
    b24c:	b9 f1       	breq	.+110    	; 0xb2bc <follow_path+0x106>
    b24e:	60 38       	cpi	r22, 0x80	; 128
    b250:	71 05       	cpc	r23, r1
    b252:	28 f4       	brcc	.+10     	; 0xb25e <follow_path+0xa8>
    b254:	e4 ef       	ldi	r30, 0xF4	; 244
    b256:	f7 e0       	ldi	r31, 0x07	; 7
    b258:	41 91       	ld	r20, Z+
    b25a:	41 11       	cpse	r20, r1
    b25c:	8d c0       	rjmp	.+282    	; 0xb378 <follow_path+0x1c2>
    b25e:	0f 3f       	cpi	r16, 0xFF	; 255
    b260:	11 05       	cpc	r17, r1
    b262:	08 f0       	brcs	.+2      	; 0xb266 <follow_path+0xb0>
    b264:	bc c1       	rjmp	.+888    	; 0xb5de <follow_path+0x428>
    b266:	f8 01       	movw	r30, r16
    b268:	ee 0f       	add	r30, r30
    b26a:	ff 1f       	adc	r31, r31
    b26c:	ea 0d       	add	r30, r10
    b26e:	fb 1d       	adc	r31, r11
    b270:	71 83       	std	Z+1, r23	; 0x01
    b272:	60 83       	st	Z, r22
    b274:	0f 5f       	subi	r16, 0xFF	; 255
    b276:	1f 4f       	sbci	r17, 0xFF	; 255
    b278:	ce 01       	movw	r24, r28
    b27a:	01 96       	adiw	r24, 0x01	; 1
    b27c:	0e 94 34 48 	call	0x9068	; 0x9068 <tchar2uni>
    b280:	6f 3f       	cpi	r22, 0xFF	; 255
    b282:	bf ef       	ldi	r27, 0xFF	; 255
    b284:	7b 07       	cpc	r23, r27
    b286:	8b 07       	cpc	r24, r27
    b288:	9b 07       	cpc	r25, r27
    b28a:	09 f4       	brne	.+2      	; 0xb28e <follow_path+0xd8>
    b28c:	a8 c1       	rjmp	.+848    	; 0xb5de <follow_path+0x428>
    b28e:	61 15       	cp	r22, r1
    b290:	71 05       	cpc	r23, r1
    b292:	e1 e0       	ldi	r30, 0x01	; 1
    b294:	8e 07       	cpc	r24, r30
    b296:	91 05       	cpc	r25, r1
    b298:	48 f0       	brcs	.+18     	; 0xb2ac <follow_path+0xf6>
    b29a:	f8 01       	movw	r30, r16
    b29c:	ee 0f       	add	r30, r30
    b29e:	ff 1f       	adc	r31, r31
    b2a0:	ea 0d       	add	r30, r10
    b2a2:	fb 1d       	adc	r31, r11
    b2a4:	91 83       	std	Z+1, r25	; 0x01
    b2a6:	80 83       	st	Z, r24
    b2a8:	0f 5f       	subi	r16, 0xFF	; 255
    b2aa:	1f 4f       	sbci	r17, 0xFF	; 255
    b2ac:	9b 01       	movw	r18, r22
    b2ae:	60 32       	cpi	r22, 0x20	; 32
    b2b0:	71 05       	cpc	r23, r1
    b2b2:	08 f4       	brcc	.+2      	; 0xb2b6 <follow_path+0x100>
    b2b4:	6b c0       	rjmp	.+214    	; 0xb38c <follow_path+0x1d6>
    b2b6:	6f 32       	cpi	r22, 0x2F	; 47
    b2b8:	71 05       	cpc	r23, r1
    b2ba:	31 f6       	brne	.-116    	; 0xb248 <follow_path+0x92>
    b2bc:	e9 81       	ldd	r30, Y+1	; 0x01
    b2be:	fa 81       	ldd	r31, Y+2	; 0x02
    b2c0:	80 81       	ld	r24, Z
    b2c2:	8f 32       	cpi	r24, 0x2F	; 47
    b2c4:	09 f4       	brne	.+2      	; 0xb2c8 <follow_path+0x112>
    b2c6:	5e c0       	rjmp	.+188    	; 0xb384 <follow_path+0x1ce>
    b2c8:	8c 35       	cpi	r24, 0x5C	; 92
    b2ca:	09 f4       	brne	.+2      	; 0xb2ce <follow_path+0x118>
    b2cc:	5b c0       	rjmp	.+182    	; 0xb384 <follow_path+0x1ce>
    b2ce:	1b 82       	std	Y+3, r1	; 0x03
    b2d0:	69 80       	ldd	r6, Y+1	; 0x01
    b2d2:	7a 80       	ldd	r7, Y+2	; 0x02
    b2d4:	f8 01       	movw	r30, r16
    b2d6:	ee 0f       	add	r30, r30
    b2d8:	ff 1f       	adc	r31, r31
    b2da:	01 30       	cpi	r16, 0x01	; 1
    b2dc:	11 05       	cpc	r17, r1
    b2de:	09 f0       	breq	.+2      	; 0xb2e2 <follow_path+0x12c>
    b2e0:	58 c0       	rjmp	.+176    	; 0xb392 <follow_path+0x1dc>
    b2e2:	d5 01       	movw	r26, r10
    b2e4:	8d 91       	ld	r24, X+
    b2e6:	9c 91       	ld	r25, X
    b2e8:	8e 97       	sbiw	r24, 0x2e	; 46
    b2ea:	09 f0       	breq	.+2      	; 0xb2ee <follow_path+0x138>
    b2ec:	5d c0       	rjmp	.+186    	; 0xb3a8 <follow_path+0x1f2>
    b2ee:	ea 0d       	add	r30, r10
    b2f0:	fb 1d       	adc	r31, r11
    b2f2:	11 82       	std	Z+1, r1	; 0x01
    b2f4:	10 82       	st	Z, r1
    b2f6:	f7 01       	movw	r30, r14
    b2f8:	7c 96       	adiw	r30, 0x1c	; 28
    b2fa:	80 e0       	ldi	r24, 0x00	; 0
    b2fc:	90 e0       	ldi	r25, 0x00	; 0
    b2fe:	80 17       	cp	r24, r16
    b300:	91 07       	cpc	r25, r17
    b302:	08 f0       	brcs	.+2      	; 0xb306 <follow_path+0x150>
    b304:	54 c0       	rjmp	.+168    	; 0xb3ae <follow_path+0x1f8>
    b306:	2e e2       	ldi	r18, 0x2E	; 46
    b308:	21 93       	st	Z+, r18
    b30a:	01 96       	adiw	r24, 0x01	; 1
    b30c:	8b 30       	cpi	r24, 0x0B	; 11
    b30e:	91 05       	cpc	r25, r1
    b310:	b1 f7       	brne	.-20     	; 0xb2fe <follow_path+0x148>
    b312:	8b 81       	ldd	r24, Y+3	; 0x03
    b314:	80 62       	ori	r24, 0x20	; 32
    b316:	f7 01       	movw	r30, r14
    b318:	87 a3       	std	Z+39, r24	; 0x27
    b31a:	80 e0       	ldi	r24, 0x00	; 0
    b31c:	90 e0       	ldi	r25, 0x00	; 0
    b31e:	00 97       	sbiw	r24, 0x00	; 0
    b320:	09 f0       	breq	.+2      	; 0xb324 <follow_path+0x16e>
    b322:	7b c1       	rjmp	.+758    	; 0xb61a <follow_path+0x464>
    b324:	c7 01       	movw	r24, r14
    b326:	95 dc       	rcall	.-1750   	; 0xac52 <dir_find>
    b328:	d7 01       	movw	r26, r14
    b32a:	97 96       	adiw	r26, 0x27	; 39
    b32c:	2c 91       	ld	r18, X
    b32e:	97 97       	sbiw	r26, 0x27	; 39
    b330:	00 97       	sbiw	r24, 0x00	; 0
    b332:	09 f0       	breq	.+2      	; 0xb336 <follow_path+0x180>
    b334:	57 c1       	rjmp	.+686    	; 0xb5e4 <follow_path+0x42e>
    b336:	22 fd       	sbrc	r18, 2
    b338:	70 c1       	rjmp	.+736    	; 0xb61a <follow_path+0x464>
    b33a:	f7 01       	movw	r30, r14
    b33c:	84 81       	ldd	r24, Z+4	; 0x04
    b33e:	84 ff       	sbrs	r24, 4
    b340:	63 c1       	rjmp	.+710    	; 0xb608 <follow_path+0x452>
    b342:	66 85       	ldd	r22, Z+14	; 0x0e
    b344:	77 85       	ldd	r23, Z+15	; 0x0f
    b346:	71 70       	andi	r23, 0x01	; 1
    b348:	29 85       	ldd	r18, Y+9	; 0x09
    b34a:	3a 85       	ldd	r19, Y+10	; 0x0a
    b34c:	62 0f       	add	r22, r18
    b34e:	73 1f       	adc	r23, r19
    b350:	ad 81       	ldd	r26, Y+5	; 0x05
    b352:	be 81       	ldd	r27, Y+6	; 0x06
    b354:	8c 91       	ld	r24, X
    b356:	0e 94 56 4b 	call	0x96ac	; 0x96ac <ld_clust.isra.4>
    b35a:	f7 01       	movw	r30, r14
    b35c:	66 83       	std	Z+6, r22	; 0x06
    b35e:	77 83       	std	Z+7, r23	; 0x07
    b360:	80 87       	std	Z+8, r24	; 0x08
    b362:	91 87       	std	Z+9, r25	; 0x09
    b364:	7a 82       	std	Y+2, r7	; 0x02
    b366:	69 82       	std	Y+1, r6	; 0x01
    b368:	d7 01       	movw	r26, r14
    b36a:	ed 91       	ld	r30, X+
    b36c:	fc 91       	ld	r31, X
    b36e:	a3 84       	ldd	r10, Z+11	; 0x0b
    b370:	b4 84       	ldd	r11, Z+12	; 0x0c
    b372:	00 e0       	ldi	r16, 0x00	; 0
    b374:	10 e0       	ldi	r17, 0x00	; 0
    b376:	80 cf       	rjmp	.-256    	; 0xb278 <follow_path+0xc2>
    b378:	50 e0       	ldi	r21, 0x00	; 0
    b37a:	24 17       	cp	r18, r20
    b37c:	35 07       	cpc	r19, r21
    b37e:	09 f0       	breq	.+2      	; 0xb382 <follow_path+0x1cc>
    b380:	6b cf       	rjmp	.-298    	; 0xb258 <follow_path+0xa2>
    b382:	2d c1       	rjmp	.+602    	; 0xb5de <follow_path+0x428>
    b384:	31 96       	adiw	r30, 0x01	; 1
    b386:	fa 83       	std	Y+2, r31	; 0x02
    b388:	e9 83       	std	Y+1, r30	; 0x01
    b38a:	98 cf       	rjmp	.-208    	; 0xb2bc <follow_path+0x106>
    b38c:	f4 e0       	ldi	r31, 0x04	; 4
    b38e:	fb 83       	std	Y+3, r31	; 0x03
    b390:	9f cf       	rjmp	.-194    	; 0xb2d0 <follow_path+0x11a>
    b392:	02 30       	cpi	r16, 0x02	; 2
    b394:	11 05       	cpc	r17, r1
    b396:	41 f4       	brne	.+16     	; 0xb3a8 <follow_path+0x1f2>
    b398:	d5 01       	movw	r26, r10
    b39a:	12 96       	adiw	r26, 0x02	; 2
    b39c:	8d 91       	ld	r24, X+
    b39e:	9c 91       	ld	r25, X
    b3a0:	13 97       	sbiw	r26, 0x03	; 3
    b3a2:	8e 97       	sbiw	r24, 0x2e	; 46
    b3a4:	09 f4       	brne	.+2      	; 0xb3a8 <follow_path+0x1f2>
    b3a6:	9e cf       	rjmp	.-196    	; 0xb2e4 <follow_path+0x12e>
    b3a8:	ea 0d       	add	r30, r10
    b3aa:	fb 1d       	adc	r31, r11
    b3ac:	09 c0       	rjmp	.+18     	; 0xb3c0 <follow_path+0x20a>
    b3ae:	20 e2       	ldi	r18, 0x20	; 32
    b3b0:	ab cf       	rjmp	.-170    	; 0xb308 <follow_path+0x152>
    b3b2:	92 91       	ld	r25, -Z
    b3b4:	82 91       	ld	r24, -Z
    b3b6:	80 32       	cpi	r24, 0x20	; 32
    b3b8:	91 05       	cpc	r25, r1
    b3ba:	31 f4       	brne	.+12     	; 0xb3c8 <follow_path+0x212>
    b3bc:	01 50       	subi	r16, 0x01	; 1
    b3be:	11 09       	sbc	r17, r1
    b3c0:	01 15       	cp	r16, r1
    b3c2:	11 05       	cpc	r17, r1
    b3c4:	b1 f7       	brne	.-20     	; 0xb3b2 <follow_path+0x1fc>
    b3c6:	02 c0       	rjmp	.+4      	; 0xb3cc <follow_path+0x216>
    b3c8:	8e 97       	sbiw	r24, 0x2e	; 46
    b3ca:	c1 f3       	breq	.-16     	; 0xb3bc <follow_path+0x206>
    b3cc:	f8 01       	movw	r30, r16
    b3ce:	ee 0f       	add	r30, r30
    b3d0:	ff 1f       	adc	r31, r31
    b3d2:	ea 0d       	add	r30, r10
    b3d4:	fb 1d       	adc	r31, r11
    b3d6:	11 82       	std	Z+1, r1	; 0x01
    b3d8:	10 82       	st	Z, r1
    b3da:	01 15       	cp	r16, r1
    b3dc:	11 05       	cpc	r17, r1
    b3de:	09 f4       	brne	.+2      	; 0xb3e2 <follow_path+0x22c>
    b3e0:	fe c0       	rjmp	.+508    	; 0xb5de <follow_path+0x428>
    b3e2:	d5 01       	movw	r26, r10
    b3e4:	41 2c       	mov	r4, r1
    b3e6:	51 2c       	mov	r5, r1
    b3e8:	8d 91       	ld	r24, X+
    b3ea:	9d 91       	ld	r25, X+
    b3ec:	80 32       	cpi	r24, 0x20	; 32
    b3ee:	91 05       	cpc	r25, r1
    b3f0:	21 f4       	brne	.+8      	; 0xb3fa <follow_path+0x244>
    b3f2:	2f ef       	ldi	r18, 0xFF	; 255
    b3f4:	42 1a       	sub	r4, r18
    b3f6:	52 0a       	sbc	r5, r18
    b3f8:	f7 cf       	rjmp	.-18     	; 0xb3e8 <follow_path+0x232>
    b3fa:	41 14       	cp	r4, r1
    b3fc:	51 04       	cpc	r5, r1
    b3fe:	11 f4       	brne	.+4      	; 0xb404 <follow_path+0x24e>
    b400:	8e 97       	sbiw	r24, 0x2e	; 46
    b402:	39 f4       	brne	.+14     	; 0xb412 <follow_path+0x25c>
    b404:	3b 81       	ldd	r19, Y+3	; 0x03
    b406:	33 60       	ori	r19, 0x03	; 3
    b408:	3b 83       	std	Y+3, r19	; 0x03
    b40a:	03 c0       	rjmp	.+6      	; 0xb412 <follow_path+0x25c>
    b40c:	01 50       	subi	r16, 0x01	; 1
    b40e:	11 09       	sbc	r17, r1
    b410:	21 f0       	breq	.+8      	; 0xb41a <follow_path+0x264>
    b412:	92 91       	ld	r25, -Z
    b414:	82 91       	ld	r24, -Z
    b416:	8e 97       	sbiw	r24, 0x2e	; 46
    b418:	c9 f7       	brne	.-14     	; 0xb40c <follow_path+0x256>
    b41a:	4b e0       	ldi	r20, 0x0B	; 11
    b41c:	50 e0       	ldi	r21, 0x00	; 0
    b41e:	60 e2       	ldi	r22, 0x20	; 32
    b420:	70 e0       	ldi	r23, 0x00	; 0
    b422:	8f 81       	ldd	r24, Y+7	; 0x07
    b424:	98 85       	ldd	r25, Y+8	; 0x08
    b426:	0e 94 1c 48 	call	0x9038	; 0x9038 <mem_set>
    b42a:	48 e0       	ldi	r20, 0x08	; 8
    b42c:	84 2e       	mov	r8, r20
    b42e:	91 2c       	mov	r9, r1
    b430:	c1 2c       	mov	r12, r1
    b432:	d1 2c       	mov	r13, r1
    b434:	1c 82       	std	Y+4, r1	; 0x04
    b436:	12 01       	movw	r2, r4
    b438:	8f ef       	ldi	r24, 0xFF	; 255
    b43a:	28 1a       	sub	r2, r24
    b43c:	38 0a       	sbc	r3, r24
    b43e:	44 0c       	add	r4, r4
    b440:	55 1c       	adc	r5, r5
    b442:	f5 01       	movw	r30, r10
    b444:	e4 0d       	add	r30, r4
    b446:	f5 1d       	adc	r31, r5
    b448:	80 81       	ld	r24, Z
    b44a:	91 81       	ldd	r25, Z+1	; 0x01
    b44c:	00 97       	sbiw	r24, 0x00	; 0
    b44e:	09 f4       	brne	.+2      	; 0xb452 <follow_path+0x29c>
    b450:	98 c0       	rjmp	.+304    	; 0xb582 <follow_path+0x3cc>
    b452:	80 32       	cpi	r24, 0x20	; 32
    b454:	91 05       	cpc	r25, r1
    b456:	31 f0       	breq	.+12     	; 0xb464 <follow_path+0x2ae>
    b458:	8e 32       	cpi	r24, 0x2E	; 46
    b45a:	91 05       	cpc	r25, r1
    b45c:	41 f4       	brne	.+16     	; 0xb46e <follow_path+0x2b8>
    b45e:	20 16       	cp	r2, r16
    b460:	31 06       	cpc	r3, r17
    b462:	61 f0       	breq	.+24     	; 0xb47c <follow_path+0x2c6>
    b464:	9b 81       	ldd	r25, Y+3	; 0x03
    b466:	93 60       	ori	r25, 0x03	; 3
    b468:	9b 83       	std	Y+3, r25	; 0x03
    b46a:	21 01       	movw	r4, r2
    b46c:	e4 cf       	rjmp	.-56     	; 0xb436 <follow_path+0x280>
    b46e:	c8 14       	cp	r12, r8
    b470:	d9 04       	cpc	r13, r9
    b472:	40 f4       	brcc	.+16     	; 0xb484 <follow_path+0x2ce>
    b474:	20 16       	cp	r2, r16
    b476:	31 06       	cpc	r3, r17
    b478:	31 f5       	brne	.+76     	; 0xb4c6 <follow_path+0x310>
    b47a:	c9 c0       	rjmp	.+402    	; 0xb60e <follow_path+0x458>
    b47c:	c8 14       	cp	r12, r8
    b47e:	d9 04       	cpc	r13, r9
    b480:	08 f4       	brcc	.+2      	; 0xb484 <follow_path+0x2ce>
    b482:	c5 c0       	rjmp	.+394    	; 0xb60e <follow_path+0x458>
    b484:	ab e0       	ldi	r26, 0x0B	; 11
    b486:	8a 16       	cp	r8, r26
    b488:	91 04       	cpc	r9, r1
    b48a:	39 f4       	brne	.+14     	; 0xb49a <follow_path+0x2e4>
    b48c:	bb 81       	ldd	r27, Y+3	; 0x03
    b48e:	b3 60       	ori	r27, 0x03	; 3
    b490:	bb 83       	std	Y+3, r27	; 0x03
    b492:	2b e0       	ldi	r18, 0x0B	; 11
    b494:	82 2e       	mov	r8, r18
    b496:	91 2c       	mov	r9, r1
    b498:	74 c0       	rjmp	.+232    	; 0xb582 <follow_path+0x3cc>
    b49a:	20 16       	cp	r2, r16
    b49c:	31 06       	cpc	r3, r17
    b49e:	39 f0       	breq	.+14     	; 0xb4ae <follow_path+0x2f8>
    b4a0:	eb 81       	ldd	r30, Y+3	; 0x03
    b4a2:	e3 60       	ori	r30, 0x03	; 3
    b4a4:	eb 83       	std	Y+3, r30	; 0x03
    b4a6:	02 15       	cp	r16, r2
    b4a8:	13 05       	cpc	r17, r3
    b4aa:	08 f4       	brcc	.+2      	; 0xb4ae <follow_path+0x2f8>
    b4ac:	6a c0       	rjmp	.+212    	; 0xb582 <follow_path+0x3cc>
    b4ae:	fc 81       	ldd	r31, Y+4	; 0x04
    b4b0:	ff 0f       	add	r31, r31
    b4b2:	ff 0f       	add	r31, r31
    b4b4:	fc 83       	std	Y+4, r31	; 0x04
    b4b6:	18 01       	movw	r2, r16
    b4b8:	8b e0       	ldi	r24, 0x0B	; 11
    b4ba:	88 2e       	mov	r8, r24
    b4bc:	91 2c       	mov	r9, r1
    b4be:	98 e0       	ldi	r25, 0x08	; 8
    b4c0:	c9 2e       	mov	r12, r25
    b4c2:	d1 2c       	mov	r13, r1
    b4c4:	d2 cf       	rjmp	.-92     	; 0xb46a <follow_path+0x2b4>
    b4c6:	80 38       	cpi	r24, 0x80	; 128
    b4c8:	91 05       	cpc	r25, r1
    b4ca:	78 f1       	brcs	.+94     	; 0xb52a <follow_path+0x374>
    b4cc:	2b 81       	ldd	r18, Y+3	; 0x03
    b4ce:	22 60       	ori	r18, 0x02	; 2
    b4d0:	52 2e       	mov	r5, r18
    b4d2:	bc 01       	movw	r22, r24
    b4d4:	80 e0       	ldi	r24, 0x00	; 0
    b4d6:	90 e0       	ldi	r25, 0x00	; 0
    b4d8:	45 eb       	ldi	r20, 0xB5	; 181
    b4da:	51 e0       	ldi	r21, 0x01	; 1
    b4dc:	0e 94 ca 6a 	call	0xd594	; 0xd594 <ff_uni2oem>
    b4e0:	87 ff       	sbrs	r24, 7
    b4e2:	08 c0       	rjmp	.+16     	; 0xb4f4 <follow_path+0x33e>
    b4e4:	8f 77       	andi	r24, 0x7F	; 127
    b4e6:	99 27       	eor	r25, r25
    b4e8:	fc 01       	movw	r30, r24
    b4ea:	e3 53       	subi	r30, 0x33	; 51
    b4ec:	fd 4f       	sbci	r31, 0xFD	; 253
    b4ee:	80 81       	ld	r24, Z
    b4f0:	90 e0       	ldi	r25, 0x00	; 0
    b4f2:	18 c0       	rjmp	.+48     	; 0xb524 <follow_path+0x36e>
    b4f4:	8f 3f       	cpi	r24, 0xFF	; 255
    b4f6:	91 05       	cpc	r25, r1
    b4f8:	a9 f0       	breq	.+42     	; 0xb524 <follow_path+0x36e>
    b4fa:	a0 f0       	brcs	.+40     	; 0xb524 <follow_path+0x36e>
    b4fc:	94 01       	movw	r18, r8
    b4fe:	21 50       	subi	r18, 0x01	; 1
    b500:	31 09       	sbc	r19, r1
    b502:	c2 16       	cp	r12, r18
    b504:	d3 06       	cpc	r13, r19
    b506:	28 f0       	brcs	.+10     	; 0xb512 <follow_path+0x35c>
    b508:	3b 81       	ldd	r19, Y+3	; 0x03
    b50a:	33 60       	ori	r19, 0x03	; 3
    b50c:	3b 83       	std	Y+3, r19	; 0x03
    b50e:	64 01       	movw	r12, r8
    b510:	ac cf       	rjmp	.-168    	; 0xb46a <follow_path+0x2b4>
    b512:	f7 01       	movw	r30, r14
    b514:	ec 0d       	add	r30, r12
    b516:	fd 1d       	adc	r31, r13
    b518:	94 8f       	std	Z+28, r25	; 0x1c
    b51a:	d6 01       	movw	r26, r12
    b51c:	11 96       	adiw	r26, 0x01	; 1
    b51e:	6d 01       	movw	r12, r26
    b520:	5b 82       	std	Y+3, r5	; 0x03
    b522:	26 c0       	rjmp	.+76     	; 0xb570 <follow_path+0x3ba>
    b524:	00 97       	sbiw	r24, 0x00	; 0
    b526:	59 f0       	breq	.+22     	; 0xb53e <follow_path+0x388>
    b528:	5b 82       	std	Y+3, r5	; 0x03
    b52a:	ed ef       	ldi	r30, 0xFD	; 253
    b52c:	f7 e0       	ldi	r31, 0x07	; 7
    b52e:	21 91       	ld	r18, Z+
    b530:	22 23       	and	r18, r18
    b532:	59 f0       	breq	.+22     	; 0xb54a <follow_path+0x394>
    b534:	30 e0       	ldi	r19, 0x00	; 0
    b536:	82 17       	cp	r24, r18
    b538:	93 07       	cpc	r25, r19
    b53a:	c9 f7       	brne	.-14     	; 0xb52e <follow_path+0x378>
    b53c:	5b 80       	ldd	r5, Y+3	; 0x03
    b53e:	b5 2d       	mov	r27, r5
    b540:	b3 60       	ori	r27, 0x03	; 3
    b542:	bb 83       	std	Y+3, r27	; 0x03
    b544:	8f e5       	ldi	r24, 0x5F	; 95
    b546:	90 e0       	ldi	r25, 0x00	; 0
    b548:	13 c0       	rjmp	.+38     	; 0xb570 <follow_path+0x3ba>
    b54a:	9c 01       	movw	r18, r24
    b54c:	21 54       	subi	r18, 0x41	; 65
    b54e:	31 09       	sbc	r19, r1
    b550:	2a 31       	cpi	r18, 0x1A	; 26
    b552:	31 05       	cpc	r19, r1
    b554:	18 f4       	brcc	.+6      	; 0xb55c <follow_path+0x3a6>
    b556:	ec 81       	ldd	r30, Y+4	; 0x04
    b558:	e2 60       	ori	r30, 0x02	; 2
    b55a:	ec 83       	std	Y+4, r30	; 0x04
    b55c:	9c 01       	movw	r18, r24
    b55e:	21 56       	subi	r18, 0x61	; 97
    b560:	31 09       	sbc	r19, r1
    b562:	2a 31       	cpi	r18, 0x1A	; 26
    b564:	31 05       	cpc	r19, r1
    b566:	20 f4       	brcc	.+8      	; 0xb570 <follow_path+0x3ba>
    b568:	fc 81       	ldd	r31, Y+4	; 0x04
    b56a:	f1 60       	ori	r31, 0x01	; 1
    b56c:	fc 83       	std	Y+4, r31	; 0x04
    b56e:	80 97       	sbiw	r24, 0x20	; 32
    b570:	f7 01       	movw	r30, r14
    b572:	ec 0d       	add	r30, r12
    b574:	fd 1d       	adc	r31, r13
    b576:	84 8f       	std	Z+28, r24	; 0x1c
    b578:	96 01       	movw	r18, r12
    b57a:	2f 5f       	subi	r18, 0xFF	; 255
    b57c:	3f 4f       	sbci	r19, 0xFF	; 255
    b57e:	69 01       	movw	r12, r18
    b580:	74 cf       	rjmp	.-280    	; 0xb46a <follow_path+0x2b4>
    b582:	d7 01       	movw	r26, r14
    b584:	5c 96       	adiw	r26, 0x1c	; 28
    b586:	8c 91       	ld	r24, X
    b588:	5c 97       	sbiw	r26, 0x1c	; 28
    b58a:	85 3e       	cpi	r24, 0xE5	; 229
    b58c:	19 f4       	brne	.+6      	; 0xb594 <follow_path+0x3de>
    b58e:	e5 e0       	ldi	r30, 0x05	; 5
    b590:	5c 96       	adiw	r26, 0x1c	; 28
    b592:	ec 93       	st	X, r30
    b594:	f8 e0       	ldi	r31, 0x08	; 8
    b596:	8f 16       	cp	r8, r31
    b598:	91 04       	cpc	r9, r1
    b59a:	21 f4       	brne	.+8      	; 0xb5a4 <follow_path+0x3ee>
    b59c:	2c 81       	ldd	r18, Y+4	; 0x04
    b59e:	22 0f       	add	r18, r18
    b5a0:	22 0f       	add	r18, r18
    b5a2:	2c 83       	std	Y+4, r18	; 0x04
    b5a4:	8c 81       	ldd	r24, Y+4	; 0x04
    b5a6:	8c 70       	andi	r24, 0x0C	; 12
    b5a8:	8c 30       	cpi	r24, 0x0C	; 12
    b5aa:	21 f0       	breq	.+8      	; 0xb5b4 <follow_path+0x3fe>
    b5ac:	8c 81       	ldd	r24, Y+4	; 0x04
    b5ae:	83 70       	andi	r24, 0x03	; 3
    b5b0:	83 30       	cpi	r24, 0x03	; 3
    b5b2:	19 f4       	brne	.+6      	; 0xb5ba <follow_path+0x404>
    b5b4:	3b 81       	ldd	r19, Y+3	; 0x03
    b5b6:	32 60       	ori	r19, 0x02	; 2
    b5b8:	3b 83       	std	Y+3, r19	; 0x03
    b5ba:	8b 81       	ldd	r24, Y+3	; 0x03
    b5bc:	81 fd       	sbrc	r24, 1
    b5be:	0b c0       	rjmp	.+22     	; 0xb5d6 <follow_path+0x420>
    b5c0:	9c 81       	ldd	r25, Y+4	; 0x04
    b5c2:	90 ff       	sbrs	r25, 0
    b5c4:	02 c0       	rjmp	.+4      	; 0xb5ca <follow_path+0x414>
    b5c6:	80 61       	ori	r24, 0x10	; 16
    b5c8:	8b 83       	std	Y+3, r24	; 0x03
    b5ca:	ac 81       	ldd	r26, Y+4	; 0x04
    b5cc:	a2 ff       	sbrs	r26, 2
    b5ce:	03 c0       	rjmp	.+6      	; 0xb5d6 <follow_path+0x420>
    b5d0:	bb 81       	ldd	r27, Y+3	; 0x03
    b5d2:	b8 60       	ori	r27, 0x08	; 8
    b5d4:	bb 83       	std	Y+3, r27	; 0x03
    b5d6:	2b 81       	ldd	r18, Y+3	; 0x03
    b5d8:	f7 01       	movw	r30, r14
    b5da:	27 a3       	std	Z+39, r18	; 0x27
    b5dc:	9e ce       	rjmp	.-708    	; 0xb31a <follow_path+0x164>
    b5de:	86 e0       	ldi	r24, 0x06	; 6
    b5e0:	90 e0       	ldi	r25, 0x00	; 0
    b5e2:	9d ce       	rjmp	.-710    	; 0xb31e <follow_path+0x168>
    b5e4:	84 30       	cpi	r24, 0x04	; 4
    b5e6:	91 05       	cpc	r25, r1
    b5e8:	c1 f4       	brne	.+48     	; 0xb61a <follow_path+0x464>
    b5ea:	32 2f       	mov	r19, r18
    b5ec:	34 70       	andi	r19, 0x04	; 4
    b5ee:	25 ff       	sbrs	r18, 5
    b5f0:	09 c0       	rjmp	.+18     	; 0xb604 <follow_path+0x44e>
    b5f2:	33 23       	and	r19, r19
    b5f4:	09 f4       	brne	.+2      	; 0xb5f8 <follow_path+0x442>
    b5f6:	b6 ce       	rjmp	.-660    	; 0xb364 <follow_path+0x1ae>
    b5f8:	80 e8       	ldi	r24, 0x80	; 128
    b5fa:	97 96       	adiw	r26, 0x27	; 39
    b5fc:	8c 93       	st	X, r24
    b5fe:	80 e0       	ldi	r24, 0x00	; 0
    b600:	90 e0       	ldi	r25, 0x00	; 0
    b602:	0b c0       	rjmp	.+22     	; 0xb61a <follow_path+0x464>
    b604:	31 11       	cpse	r19, r1
    b606:	09 c0       	rjmp	.+18     	; 0xb61a <follow_path+0x464>
    b608:	85 e0       	ldi	r24, 0x05	; 5
    b60a:	90 e0       	ldi	r25, 0x00	; 0
    b60c:	06 c0       	rjmp	.+12     	; 0xb61a <follow_path+0x464>
    b60e:	fb e0       	ldi	r31, 0x0B	; 11
    b610:	8f 16       	cp	r8, r31
    b612:	91 04       	cpc	r9, r1
    b614:	09 f0       	breq	.+2      	; 0xb618 <follow_path+0x462>
    b616:	4b cf       	rjmp	.-362    	; 0xb4ae <follow_path+0x2f8>
    b618:	39 cf       	rjmp	.-398    	; 0xb48c <follow_path+0x2d6>
    b61a:	2a 96       	adiw	r28, 0x0a	; 10
    b61c:	e2 e1       	ldi	r30, 0x12	; 18
    b61e:	0c 94 fc e5 	jmp	0x1cbf8	; 0x1cbf8 <__epilogue_restores__>

0000b622 <f_mount>:
    b622:	a6 e0       	ldi	r26, 0x06	; 6
    b624:	b0 e0       	ldi	r27, 0x00	; 0
    b626:	e7 e1       	ldi	r30, 0x17	; 23
    b628:	fb e5       	ldi	r31, 0x5B	; 91
    b62a:	0c 94 ef e5 	jmp	0x1cbde	; 0x1cbde <__prologue_saves__+0x1e>
    b62e:	9c 83       	std	Y+4, r25	; 0x04
    b630:	8b 83       	std	Y+3, r24	; 0x03
    b632:	7e 83       	std	Y+6, r23	; 0x06
    b634:	6d 83       	std	Y+5, r22	; 0x05
    b636:	14 2f       	mov	r17, r20
    b638:	7a 83       	std	Y+2, r23	; 0x02
    b63a:	69 83       	std	Y+1, r22	; 0x01
    b63c:	ce 01       	movw	r24, r28
    b63e:	01 96       	adiw	r24, 0x01	; 1
    b640:	0e 94 2d 49 	call	0x925a	; 0x925a <get_ldnumber>
    b644:	97 fd       	sbrc	r25, 7
    b646:	20 c0       	rjmp	.+64     	; 0xb688 <f_mount+0x66>
    b648:	88 0f       	add	r24, r24
    b64a:	99 1f       	adc	r25, r25
    b64c:	fc 01       	movw	r30, r24
    b64e:	eb 5e       	subi	r30, 0xEB	; 235
    b650:	f7 4e       	sbci	r31, 0xE7	; 231
    b652:	01 90       	ld	r0, Z+
    b654:	f0 81       	ld	r31, Z
    b656:	e0 2d       	mov	r30, r0
    b658:	30 97       	sbiw	r30, 0x00	; 0
    b65a:	09 f0       	breq	.+2      	; 0xb65e <f_mount+0x3c>
    b65c:	10 82       	st	Z, r1
    b65e:	eb 81       	ldd	r30, Y+3	; 0x03
    b660:	fc 81       	ldd	r31, Y+4	; 0x04
    b662:	30 97       	sbiw	r30, 0x00	; 0
    b664:	09 f0       	breq	.+2      	; 0xb668 <f_mount+0x46>
    b666:	10 82       	st	Z, r1
    b668:	dc 01       	movw	r26, r24
    b66a:	ab 5e       	subi	r26, 0xEB	; 235
    b66c:	b7 4e       	sbci	r27, 0xE7	; 231
    b66e:	ed 93       	st	X+, r30
    b670:	fc 93       	st	X, r31
    b672:	11 23       	and	r17, r17
    b674:	61 f0       	breq	.+24     	; 0xb68e <f_mount+0x6c>
    b676:	40 e0       	ldi	r20, 0x00	; 0
    b678:	be 01       	movw	r22, r28
    b67a:	6d 5f       	subi	r22, 0xFD	; 253
    b67c:	7f 4f       	sbci	r23, 0xFF	; 255
    b67e:	ce 01       	movw	r24, r28
    b680:	05 96       	adiw	r24, 0x05	; 5
    b682:	0e 94 60 4d 	call	0x9ac0	; 0x9ac0 <mount_volume>
    b686:	05 c0       	rjmp	.+10     	; 0xb692 <f_mount+0x70>
    b688:	8b e0       	ldi	r24, 0x0B	; 11
    b68a:	90 e0       	ldi	r25, 0x00	; 0
    b68c:	02 c0       	rjmp	.+4      	; 0xb692 <f_mount+0x70>
    b68e:	80 e0       	ldi	r24, 0x00	; 0
    b690:	90 e0       	ldi	r25, 0x00	; 0
    b692:	26 96       	adiw	r28, 0x06	; 6
    b694:	e3 e0       	ldi	r30, 0x03	; 3
    b696:	0c 94 0b e6 	jmp	0x1cc16	; 0x1cc16 <__epilogue_restores__+0x1e>

0000b69a <f_open>:
    b69a:	a6 e3       	ldi	r26, 0x36	; 54
    b69c:	b0 e0       	ldi	r27, 0x00	; 0
    b69e:	e3 e5       	ldi	r30, 0x53	; 83
    b6a0:	fb e5       	ldi	r31, 0x5B	; 91
    b6a2:	0c 94 e0 e5 	jmp	0x1cbc0	; 0x1cbc0 <__prologue_saves__>
    b6a6:	7a ab       	std	Y+50, r23	; 0x32
    b6a8:	69 ab       	std	Y+49, r22	; 0x31
    b6aa:	00 97       	sbiw	r24, 0x00	; 0
    b6ac:	09 f4       	brne	.+2      	; 0xb6b0 <f_open+0x16>
    b6ae:	96 c1       	rjmp	.+812    	; 0xb9dc <f_open+0x342>
    b6b0:	74 2e       	mov	r7, r20
    b6b2:	7c 01       	movw	r14, r24
    b6b4:	24 2f       	mov	r18, r20
    b6b6:	2f 73       	andi	r18, 0x3F	; 63
    b6b8:	32 2e       	mov	r3, r18
    b6ba:	42 2f       	mov	r20, r18
    b6bc:	be 01       	movw	r22, r28
    b6be:	61 5d       	subi	r22, 0xD1	; 209
    b6c0:	7f 4f       	sbci	r23, 0xFF	; 255
    b6c2:	ce 01       	movw	r24, r28
    b6c4:	c1 96       	adiw	r24, 0x31	; 49
    b6c6:	0e 94 60 4d 	call	0x9ac0	; 0x9ac0 <mount_volume>
    b6ca:	00 97       	sbiw	r24, 0x00	; 0
    b6cc:	09 f0       	breq	.+2      	; 0xb6d0 <f_open+0x36>
    b6ce:	80 c1       	rjmp	.+768    	; 0xb9d0 <f_open+0x336>
    b6d0:	8f a5       	ldd	r24, Y+47	; 0x2f
    b6d2:	98 a9       	ldd	r25, Y+48	; 0x30
    b6d4:	9a 83       	std	Y+2, r25	; 0x02
    b6d6:	89 83       	std	Y+1, r24	; 0x01
    b6d8:	80 e0       	ldi	r24, 0x00	; 0
    b6da:	92 e0       	ldi	r25, 0x02	; 2
    b6dc:	0e 94 c4 6a 	call	0xd588	; 0xd588 <ff_memalloc>
    b6e0:	5c 01       	movw	r10, r24
    b6e2:	00 97       	sbiw	r24, 0x00	; 0
    b6e4:	09 f4       	brne	.+2      	; 0xb6e8 <f_open+0x4e>
    b6e6:	7c c1       	rjmp	.+760    	; 0xb9e0 <f_open+0x346>
    b6e8:	ef a5       	ldd	r30, Y+47	; 0x2f
    b6ea:	f8 a9       	ldd	r31, Y+48	; 0x30
    b6ec:	94 87       	std	Z+12, r25	; 0x0c
    b6ee:	83 87       	std	Z+11, r24	; 0x0b
    b6f0:	69 a9       	ldd	r22, Y+49	; 0x31
    b6f2:	7a a9       	ldd	r23, Y+50	; 0x32
    b6f4:	ce 01       	movw	r24, r28
    b6f6:	01 96       	adiw	r24, 0x01	; 1
    b6f8:	5e dd       	rcall	.-1348   	; 0xb1b6 <follow_path>
    b6fa:	8c 01       	movw	r16, r24
    b6fc:	89 2b       	or	r24, r25
    b6fe:	29 f4       	brne	.+10     	; 0xb70a <f_open+0x70>
    b700:	88 a5       	ldd	r24, Y+40	; 0x28
    b702:	87 ff       	sbrs	r24, 7
    b704:	02 c0       	rjmp	.+4      	; 0xb70a <f_open+0x70>
    b706:	06 e0       	ldi	r16, 0x06	; 6
    b708:	10 e0       	ldi	r17, 0x00	; 0
    b70a:	87 2d       	mov	r24, r7
    b70c:	8c 71       	andi	r24, 0x1C	; 28
    b70e:	09 f4       	brne	.+2      	; 0xb712 <f_open+0x78>
    b710:	78 c0       	rjmp	.+240    	; 0xb802 <f_open+0x168>
    b712:	01 15       	cp	r16, r1
    b714:	11 05       	cpc	r17, r1
    b716:	79 f0       	breq	.+30     	; 0xb736 <f_open+0x9c>
    b718:	04 30       	cpi	r16, 0x04	; 4
    b71a:	11 05       	cpc	r17, r1
    b71c:	09 f0       	breq	.+2      	; 0xb720 <f_open+0x86>
    b71e:	70 c1       	rjmp	.+736    	; 0xba00 <f_open+0x366>
    b720:	ce 01       	movw	r24, r28
    b722:	01 96       	adiw	r24, 0x01	; 1
    b724:	a4 db       	rcall	.-2232   	; 0xae6e <dir_register>
    b726:	8c 01       	movw	r16, r24
    b728:	89 2b       	or	r24, r25
    b72a:	09 f0       	breq	.+2      	; 0xb72e <f_open+0x94>
    b72c:	69 c1       	rjmp	.+722    	; 0xba00 <f_open+0x366>
    b72e:	33 2d       	mov	r19, r3
    b730:	38 60       	ori	r19, 0x08	; 8
    b732:	33 2e       	mov	r3, r19
    b734:	06 c0       	rjmp	.+12     	; 0xb742 <f_open+0xa8>
    b736:	8d 81       	ldd	r24, Y+5	; 0x05
    b738:	81 71       	andi	r24, 0x11	; 17
    b73a:	09 f0       	breq	.+2      	; 0xb73e <f_open+0xa4>
    b73c:	5f c1       	rjmp	.+702    	; 0xb9fc <f_open+0x362>
    b73e:	72 fc       	sbrc	r7, 2
    b740:	54 c1       	rjmp	.+680    	; 0xb9ea <f_open+0x350>
    b742:	33 fe       	sbrs	r3, 3
    b744:	6e c0       	rjmp	.+220    	; 0xb822 <f_open+0x188>
    b746:	6b 8d       	ldd	r22, Y+27	; 0x1b
    b748:	7c 8d       	ldd	r23, Y+28	; 0x1c
    b74a:	ef a5       	ldd	r30, Y+47	; 0x2f
    b74c:	f8 a9       	ldd	r31, Y+48	; 0x30
    b74e:	80 81       	ld	r24, Z
    b750:	0e 94 56 4b 	call	0x96ac	; 0x96ac <ld_clust.isra.4>
    b754:	2b 01       	movw	r4, r22
    b756:	3c 01       	movw	r6, r24
    b758:	0e 94 b2 71 	call	0xe364	; 0xe364 <get_fattime>
    b75c:	ab 01       	movw	r20, r22
    b75e:	bc 01       	movw	r22, r24
    b760:	8b 8d       	ldd	r24, Y+27	; 0x1b
    b762:	9c 8d       	ldd	r25, Y+28	; 0x1c
    b764:	0e 96       	adiw	r24, 0x0e	; 14
    b766:	0e 94 16 48 	call	0x902c	; 0x902c <st_dword>
    b76a:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b76c:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b76e:	80 e2       	ldi	r24, 0x20	; 32
    b770:	83 87       	std	Z+11, r24	; 0x0b
    b772:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b774:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b776:	af a5       	ldd	r26, Y+47	; 0x2f
    b778:	b8 a9       	ldd	r27, Y+48	; 0x30
    b77a:	12 8e       	std	Z+26, r1	; 0x1a
    b77c:	13 8e       	std	Z+27, r1	; 0x1b
    b77e:	8c 91       	ld	r24, X
    b780:	83 30       	cpi	r24, 0x03	; 3
    b782:	11 f4       	brne	.+4      	; 0xb788 <f_open+0xee>
    b784:	14 8a       	std	Z+20, r1	; 0x14
    b786:	15 8a       	std	Z+21, r1	; 0x15
    b788:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b78a:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b78c:	14 8e       	std	Z+28, r1	; 0x1c
    b78e:	15 8e       	std	Z+29, r1	; 0x1d
    b790:	16 8e       	std	Z+30, r1	; 0x1e
    b792:	17 8e       	std	Z+31, r1	; 0x1f
    b794:	81 e0       	ldi	r24, 0x01	; 1
    b796:	13 96       	adiw	r26, 0x03	; 3
    b798:	8c 93       	st	X, r24
    b79a:	13 97       	sbiw	r26, 0x03	; 3
    b79c:	41 14       	cp	r4, r1
    b79e:	51 04       	cpc	r5, r1
    b7a0:	61 04       	cpc	r6, r1
    b7a2:	71 04       	cpc	r7, r1
    b7a4:	d9 f1       	breq	.+118    	; 0xb81c <f_open+0x182>
    b7a6:	d1 96       	adiw	r26, 0x31	; 49
    b7a8:	2d 91       	ld	r18, X+
    b7aa:	3d 91       	ld	r19, X+
    b7ac:	4d 91       	ld	r20, X+
    b7ae:	5c 91       	ld	r21, X
    b7b0:	d4 97       	sbiw	r26, 0x34	; 52
    b7b2:	2b ab       	std	Y+51, r18	; 0x33
    b7b4:	3c ab       	std	Y+52, r19	; 0x34
    b7b6:	4d ab       	std	Y+53, r20	; 0x35
    b7b8:	5e ab       	std	Y+54, r21	; 0x36
    b7ba:	00 e0       	ldi	r16, 0x00	; 0
    b7bc:	10 e0       	ldi	r17, 0x00	; 0
    b7be:	98 01       	movw	r18, r16
    b7c0:	b3 01       	movw	r22, r6
    b7c2:	a2 01       	movw	r20, r4
    b7c4:	ce 01       	movw	r24, r28
    b7c6:	01 96       	adiw	r24, 0x01	; 1
    b7c8:	0e 94 5c 53 	call	0xa6b8	; 0xa6b8 <remove_chain>
    b7cc:	8c 01       	movw	r16, r24
    b7ce:	89 2b       	or	r24, r25
    b7d0:	09 f0       	breq	.+2      	; 0xb7d4 <f_open+0x13a>
    b7d2:	16 c1       	rjmp	.+556    	; 0xba00 <f_open+0x366>
    b7d4:	4b a9       	ldd	r20, Y+51	; 0x33
    b7d6:	5c a9       	ldd	r21, Y+52	; 0x34
    b7d8:	6d a9       	ldd	r22, Y+53	; 0x35
    b7da:	7e a9       	ldd	r23, Y+54	; 0x36
    b7dc:	8f a5       	ldd	r24, Y+47	; 0x2f
    b7de:	98 a9       	ldd	r25, Y+48	; 0x30
    b7e0:	0e 94 e5 4c 	call	0x99ca	; 0x99ca <move_window>
    b7e4:	8c 01       	movw	r16, r24
    b7e6:	ef a5       	ldd	r30, Y+47	; 0x2f
    b7e8:	f8 a9       	ldd	r31, Y+48	; 0x30
    b7ea:	31 e0       	ldi	r19, 0x01	; 1
    b7ec:	43 1a       	sub	r4, r19
    b7ee:	51 08       	sbc	r5, r1
    b7f0:	61 08       	sbc	r6, r1
    b7f2:	71 08       	sbc	r7, r1
    b7f4:	45 86       	std	Z+13, r4	; 0x0d
    b7f6:	56 86       	std	Z+14, r5	; 0x0e
    b7f8:	67 86       	std	Z+15, r6	; 0x0f
    b7fa:	70 8a       	std	Z+16, r7	; 0x10
    b7fc:	89 2b       	or	r24, r25
    b7fe:	61 f0       	breq	.+24     	; 0xb818 <f_open+0x17e>
    b800:	ff c0       	rjmp	.+510    	; 0xba00 <f_open+0x366>
    b802:	01 15       	cp	r16, r1
    b804:	11 05       	cpc	r17, r1
    b806:	09 f0       	breq	.+2      	; 0xb80a <f_open+0x170>
    b808:	fb c0       	rjmp	.+502    	; 0xba00 <f_open+0x366>
    b80a:	8d 81       	ldd	r24, Y+5	; 0x05
    b80c:	84 fd       	sbrc	r24, 4
    b80e:	f3 c0       	rjmp	.+486    	; 0xb9f6 <f_open+0x35c>
    b810:	71 fe       	sbrs	r7, 1
    b812:	02 c0       	rjmp	.+4      	; 0xb818 <f_open+0x17e>
    b814:	80 fd       	sbrc	r24, 0
    b816:	f2 c0       	rjmp	.+484    	; 0xb9fc <f_open+0x362>
    b818:	33 fe       	sbrs	r3, 3
    b81a:	03 c0       	rjmp	.+6      	; 0xb822 <f_open+0x188>
    b81c:	43 2d       	mov	r20, r3
    b81e:	40 64       	ori	r20, 0x40	; 64
    b820:	34 2e       	mov	r3, r20
    b822:	0f a5       	ldd	r16, Y+47	; 0x2f
    b824:	18 a9       	ldd	r17, Y+48	; 0x30
    b826:	f8 01       	movw	r30, r16
    b828:	81 a9       	ldd	r24, Z+49	; 0x31
    b82a:	92 a9       	ldd	r25, Z+50	; 0x32
    b82c:	a3 a9       	ldd	r26, Z+51	; 0x33
    b82e:	b4 a9       	ldd	r27, Z+52	; 0x34
    b830:	f7 01       	movw	r30, r14
    b832:	84 8f       	std	Z+28, r24	; 0x1c
    b834:	95 8f       	std	Z+29, r25	; 0x1d
    b836:	a6 8f       	std	Z+30, r26	; 0x1e
    b838:	b7 8f       	std	Z+31, r27	; 0x1f
    b83a:	6b 8c       	ldd	r6, Y+27	; 0x1b
    b83c:	7c 8c       	ldd	r7, Y+28	; 0x1c
    b83e:	71 a2       	std	Z+33, r7	; 0x21
    b840:	60 a2       	std	Z+32, r6	; 0x20
    b842:	b3 01       	movw	r22, r6
    b844:	f8 01       	movw	r30, r16
    b846:	80 81       	ld	r24, Z
    b848:	0e 94 56 4b 	call	0x96ac	; 0x96ac <ld_clust.isra.4>
    b84c:	f7 01       	movw	r30, r14
    b84e:	66 83       	std	Z+6, r22	; 0x06
    b850:	77 83       	std	Z+7, r23	; 0x07
    b852:	80 87       	std	Z+8, r24	; 0x08
    b854:	91 87       	std	Z+9, r25	; 0x09
    b856:	c3 01       	movw	r24, r6
    b858:	4c 96       	adiw	r24, 0x1c	; 28
    b85a:	0e 94 01 48 	call	0x9002	; 0x9002 <ld_dword>
    b85e:	f7 01       	movw	r30, r14
    b860:	62 87       	std	Z+10, r22	; 0x0a
    b862:	73 87       	std	Z+11, r23	; 0x0b
    b864:	84 87       	std	Z+12, r24	; 0x0c
    b866:	95 87       	std	Z+13, r25	; 0x0d
    b868:	13 a2       	std	Z+35, r1	; 0x23
    b86a:	12 a2       	std	Z+34, r1	; 0x22
    b86c:	11 83       	std	Z+1, r17	; 0x01
    b86e:	00 83       	st	Z, r16
    b870:	f8 01       	movw	r30, r16
    b872:	85 81       	ldd	r24, Z+5	; 0x05
    b874:	96 81       	ldd	r25, Z+6	; 0x06
    b876:	f7 01       	movw	r30, r14
    b878:	93 83       	std	Z+3, r25	; 0x03
    b87a:	82 83       	std	Z+2, r24	; 0x02
    b87c:	36 86       	std	Z+14, r3	; 0x0e
    b87e:	17 86       	std	Z+15, r1	; 0x0f
    b880:	10 8e       	std	Z+24, r1	; 0x18
    b882:	11 8e       	std	Z+25, r1	; 0x19
    b884:	12 8e       	std	Z+26, r1	; 0x1a
    b886:	13 8e       	std	Z+27, r1	; 0x1b
    b888:	10 8a       	std	Z+16, r1	; 0x10
    b88a:	11 8a       	std	Z+17, r1	; 0x11
    b88c:	12 8a       	std	Z+18, r1	; 0x12
    b88e:	13 8a       	std	Z+19, r1	; 0x13
    b890:	67 01       	movw	r12, r14
    b892:	f4 e2       	ldi	r31, 0x24	; 36
    b894:	cf 0e       	add	r12, r31
    b896:	d1 1c       	adc	r13, r1
    b898:	40 e0       	ldi	r20, 0x00	; 0
    b89a:	52 e0       	ldi	r21, 0x02	; 2
    b89c:	60 e0       	ldi	r22, 0x00	; 0
    b89e:	70 e0       	ldi	r23, 0x00	; 0
    b8a0:	c6 01       	movw	r24, r12
    b8a2:	0e 94 1c 48 	call	0x9038	; 0x9038 <mem_set>
    b8a6:	35 fc       	sbrc	r3, 5
    b8a8:	03 c0       	rjmp	.+6      	; 0xb8b0 <f_open+0x216>
    b8aa:	00 e0       	ldi	r16, 0x00	; 0
    b8ac:	10 e0       	ldi	r17, 0x00	; 0
    b8ae:	89 c0       	rjmp	.+274    	; 0xb9c2 <f_open+0x328>
    b8b0:	f7 01       	movw	r30, r14
    b8b2:	62 84       	ldd	r6, Z+10	; 0x0a
    b8b4:	73 84       	ldd	r7, Z+11	; 0x0b
    b8b6:	84 84       	ldd	r8, Z+12	; 0x0c
    b8b8:	95 84       	ldd	r9, Z+13	; 0x0d
    b8ba:	61 14       	cp	r6, r1
    b8bc:	71 04       	cpc	r7, r1
    b8be:	81 04       	cpc	r8, r1
    b8c0:	91 04       	cpc	r9, r1
    b8c2:	99 f3       	breq	.-26     	; 0xb8aa <f_open+0x210>
    b8c4:	60 8a       	std	Z+16, r6	; 0x10
    b8c6:	71 8a       	std	Z+17, r7	; 0x11
    b8c8:	82 8a       	std	Z+18, r8	; 0x12
    b8ca:	93 8a       	std	Z+19, r9	; 0x13
    b8cc:	ef a5       	ldd	r30, Y+47	; 0x2f
    b8ce:	f8 a9       	ldd	r31, Y+48	; 0x30
    b8d0:	21 84       	ldd	r2, Z+9	; 0x09
    b8d2:	32 84       	ldd	r3, Z+10	; 0x0a
    b8d4:	c1 01       	movw	r24, r2
    b8d6:	a0 e0       	ldi	r26, 0x00	; 0
    b8d8:	b0 e0       	ldi	r27, 0x00	; 0
    b8da:	1c 01       	movw	r2, r24
    b8dc:	2d 01       	movw	r4, r26
    b8de:	59 e0       	ldi	r21, 0x09	; 9
    b8e0:	22 0c       	add	r2, r2
    b8e2:	33 1c       	adc	r3, r3
    b8e4:	44 1c       	adc	r4, r4
    b8e6:	55 1c       	adc	r5, r5
    b8e8:	5a 95       	dec	r21
    b8ea:	d1 f7       	brne	.-12     	; 0xb8e0 <f_open+0x246>
    b8ec:	f7 01       	movw	r30, r14
    b8ee:	46 81       	ldd	r20, Z+6	; 0x06
    b8f0:	57 81       	ldd	r21, Z+7	; 0x07
    b8f2:	60 85       	ldd	r22, Z+8	; 0x08
    b8f4:	71 85       	ldd	r23, Z+9	; 0x09
    b8f6:	26 14       	cp	r2, r6
    b8f8:	37 04       	cpc	r3, r7
    b8fa:	48 04       	cpc	r4, r8
    b8fc:	59 04       	cpc	r5, r9
    b8fe:	f0 f4       	brcc	.+60     	; 0xb93c <f_open+0x2a2>
    b900:	f7 01       	movw	r30, r14
    b902:	80 81       	ld	r24, Z
    b904:	91 81       	ldd	r25, Z+1	; 0x01
    b906:	0e 94 c1 50 	call	0xa182	; 0xa182 <get_fat.isra.10>
    b90a:	ab 01       	movw	r20, r22
    b90c:	bc 01       	movw	r22, r24
    b90e:	d4 01       	movw	r26, r8
    b910:	c3 01       	movw	r24, r6
    b912:	82 19       	sub	r24, r2
    b914:	93 09       	sbc	r25, r3
    b916:	a4 09       	sbc	r26, r4
    b918:	b5 09       	sbc	r27, r5
    b91a:	3c 01       	movw	r6, r24
    b91c:	4d 01       	movw	r8, r26
    b91e:	42 30       	cpi	r20, 0x02	; 2
    b920:	51 05       	cpc	r21, r1
    b922:	61 05       	cpc	r22, r1
    b924:	71 05       	cpc	r23, r1
    b926:	08 f4       	brcc	.+2      	; 0xb92a <f_open+0x290>
    b928:	63 c0       	rjmp	.+198    	; 0xb9f0 <f_open+0x356>
    b92a:	4f 3f       	cpi	r20, 0xFF	; 255
    b92c:	ff ef       	ldi	r31, 0xFF	; 255
    b92e:	5f 07       	cpc	r21, r31
    b930:	6f 07       	cpc	r22, r31
    b932:	7f 07       	cpc	r23, r31
    b934:	01 f7       	brne	.-64     	; 0xb8f6 <f_open+0x25c>
    b936:	01 e0       	ldi	r16, 0x01	; 1
    b938:	10 e0       	ldi	r17, 0x00	; 0
    b93a:	02 c0       	rjmp	.+4      	; 0xb940 <f_open+0x2a6>
    b93c:	00 e0       	ldi	r16, 0x00	; 0
    b93e:	10 e0       	ldi	r17, 0x00	; 0
    b940:	f7 01       	movw	r30, r14
    b942:	44 8b       	std	Z+20, r20	; 0x14
    b944:	55 8b       	std	Z+21, r21	; 0x15
    b946:	66 8b       	std	Z+22, r22	; 0x16
    b948:	77 8b       	std	Z+23, r23	; 0x17
    b94a:	01 15       	cp	r16, r1
    b94c:	11 05       	cpc	r17, r1
    b94e:	c9 f5       	brne	.+114    	; 0xb9c2 <f_open+0x328>
    b950:	d4 01       	movw	r26, r8
    b952:	c3 01       	movw	r24, r6
    b954:	91 70       	andi	r25, 0x01	; 1
    b956:	aa 27       	eor	r26, r26
    b958:	bb 27       	eor	r27, r27
    b95a:	89 2b       	or	r24, r25
    b95c:	8a 2b       	or	r24, r26
    b95e:	8b 2b       	or	r24, r27
    b960:	09 f4       	brne	.+2      	; 0xb964 <f_open+0x2ca>
    b962:	a3 cf       	rjmp	.-186    	; 0xb8aa <f_open+0x210>
    b964:	4f a4       	ldd	r4, Y+47	; 0x2f
    b966:	58 a8       	ldd	r5, Y+48	; 0x30
    b968:	c2 01       	movw	r24, r4
    b96a:	0e 94 ba 48 	call	0x9174	; 0x9174 <clst2sect>
    b96e:	61 15       	cp	r22, r1
    b970:	71 05       	cpc	r23, r1
    b972:	81 05       	cpc	r24, r1
    b974:	91 05       	cpc	r25, r1
    b976:	19 f1       	breq	.+70     	; 0xb9be <f_open+0x324>
    b978:	94 01       	movw	r18, r8
    b97a:	83 01       	movw	r16, r6
    b97c:	49 e0       	ldi	r20, 0x09	; 9
    b97e:	36 95       	lsr	r19
    b980:	27 95       	ror	r18
    b982:	17 95       	ror	r17
    b984:	07 95       	ror	r16
    b986:	4a 95       	dec	r20
    b988:	d1 f7       	brne	.-12     	; 0xb97e <f_open+0x2e4>
    b98a:	a9 01       	movw	r20, r18
    b98c:	98 01       	movw	r18, r16
    b98e:	26 0f       	add	r18, r22
    b990:	37 1f       	adc	r19, r23
    b992:	48 1f       	adc	r20, r24
    b994:	59 1f       	adc	r21, r25
    b996:	f7 01       	movw	r30, r14
    b998:	20 8f       	std	Z+24, r18	; 0x18
    b99a:	31 8f       	std	Z+25, r19	; 0x19
    b99c:	42 8f       	std	Z+26, r20	; 0x1a
    b99e:	53 8f       	std	Z+27, r21	; 0x1b
    b9a0:	01 e0       	ldi	r16, 0x01	; 1
    b9a2:	10 e0       	ldi	r17, 0x00	; 0
    b9a4:	b6 01       	movw	r22, r12
    b9a6:	f2 01       	movw	r30, r4
    b9a8:	81 81       	ldd	r24, Z+1	; 0x01
    b9aa:	0e 94 80 6b 	call	0xd700	; 0xd700 <disk_read>
    b9ae:	31 e0       	ldi	r19, 0x01	; 1
    b9b0:	20 e0       	ldi	r18, 0x00	; 0
    b9b2:	89 2b       	or	r24, r25
    b9b4:	09 f4       	brne	.+2      	; 0xb9b8 <f_open+0x31e>
    b9b6:	30 e0       	ldi	r19, 0x00	; 0
    b9b8:	03 2f       	mov	r16, r19
    b9ba:	12 2f       	mov	r17, r18
    b9bc:	02 c0       	rjmp	.+4      	; 0xb9c2 <f_open+0x328>
    b9be:	02 e0       	ldi	r16, 0x02	; 2
    b9c0:	10 e0       	ldi	r17, 0x00	; 0
    b9c2:	c5 01       	movw	r24, r10
    b9c4:	0e 94 c7 6a 	call	0xd58e	; 0xd58e <ff_memfree>
    b9c8:	01 15       	cp	r16, r1
    b9ca:	11 05       	cpc	r17, r1
    b9cc:	59 f0       	breq	.+22     	; 0xb9e4 <f_open+0x34a>
    b9ce:	01 c0       	rjmp	.+2      	; 0xb9d2 <f_open+0x338>
    b9d0:	8c 01       	movw	r16, r24
    b9d2:	f7 01       	movw	r30, r14
    b9d4:	11 82       	std	Z+1, r1	; 0x01
    b9d6:	10 82       	st	Z, r1
    b9d8:	c8 01       	movw	r24, r16
    b9da:	16 c0       	rjmp	.+44     	; 0xba08 <f_open+0x36e>
    b9dc:	89 e0       	ldi	r24, 0x09	; 9
    b9de:	03 c0       	rjmp	.+6      	; 0xb9e6 <f_open+0x34c>
    b9e0:	81 e1       	ldi	r24, 0x11	; 17
    b9e2:	01 c0       	rjmp	.+2      	; 0xb9e6 <f_open+0x34c>
    b9e4:	80 e0       	ldi	r24, 0x00	; 0
    b9e6:	90 e0       	ldi	r25, 0x00	; 0
    b9e8:	0f c0       	rjmp	.+30     	; 0xba08 <f_open+0x36e>
    b9ea:	08 e0       	ldi	r16, 0x08	; 8
    b9ec:	10 e0       	ldi	r17, 0x00	; 0
    b9ee:	08 c0       	rjmp	.+16     	; 0xba00 <f_open+0x366>
    b9f0:	02 e0       	ldi	r16, 0x02	; 2
    b9f2:	10 e0       	ldi	r17, 0x00	; 0
    b9f4:	a5 cf       	rjmp	.-182    	; 0xb940 <f_open+0x2a6>
    b9f6:	04 e0       	ldi	r16, 0x04	; 4
    b9f8:	10 e0       	ldi	r17, 0x00	; 0
    b9fa:	02 c0       	rjmp	.+4      	; 0xba00 <f_open+0x366>
    b9fc:	07 e0       	ldi	r16, 0x07	; 7
    b9fe:	10 e0       	ldi	r17, 0x00	; 0
    ba00:	c5 01       	movw	r24, r10
    ba02:	0e 94 c7 6a 	call	0xd58e	; 0xd58e <ff_memfree>
    ba06:	e5 cf       	rjmp	.-54     	; 0xb9d2 <f_open+0x338>
    ba08:	e6 96       	adiw	r28, 0x36	; 54
    ba0a:	e2 e1       	ldi	r30, 0x12	; 18
    ba0c:	0c 94 fc e5 	jmp	0x1cbf8	; 0x1cbf8 <__epilogue_restores__>

0000ba10 <f_read>:
    ba10:	a6 e0       	ldi	r26, 0x06	; 6
    ba12:	b0 e0       	ldi	r27, 0x00	; 0
    ba14:	ee e0       	ldi	r30, 0x0E	; 14
    ba16:	fd e5       	ldi	r31, 0x5D	; 93
    ba18:	0c 94 e0 e5 	jmp	0x1cbc0	; 0x1cbc0 <__prologue_saves__>
    ba1c:	7c 01       	movw	r14, r24
    ba1e:	4b 01       	movw	r8, r22
    ba20:	5a 01       	movw	r10, r20
    ba22:	3e 83       	std	Y+6, r19	; 0x06
    ba24:	2d 83       	std	Y+5, r18	; 0x05
    ba26:	f9 01       	movw	r30, r18
    ba28:	11 82       	std	Z+1, r1	; 0x01
    ba2a:	10 82       	st	Z, r1
    ba2c:	be 01       	movw	r22, r28
    ba2e:	6f 5f       	subi	r22, 0xFF	; 255
    ba30:	7f 4f       	sbci	r23, 0xFF	; 255
    ba32:	0e 94 59 49 	call	0x92b2	; 0x92b2 <validate>
    ba36:	00 97       	sbiw	r24, 0x00	; 0
    ba38:	09 f0       	breq	.+2      	; 0xba3c <f_read+0x2c>
    ba3a:	31 c1       	rjmp	.+610    	; 0xbc9e <f_read+0x28e>
    ba3c:	f7 01       	movw	r30, r14
    ba3e:	87 85       	ldd	r24, Z+15	; 0x0f
    ba40:	90 e0       	ldi	r25, 0x00	; 0
    ba42:	00 97       	sbiw	r24, 0x00	; 0
    ba44:	09 f0       	breq	.+2      	; 0xba48 <f_read+0x38>
    ba46:	2b c1       	rjmp	.+598    	; 0xbc9e <f_read+0x28e>
    ba48:	86 85       	ldd	r24, Z+14	; 0x0e
    ba4a:	80 ff       	sbrs	r24, 0
    ba4c:	26 c1       	rjmp	.+588    	; 0xbc9a <f_read+0x28a>
    ba4e:	82 85       	ldd	r24, Z+10	; 0x0a
    ba50:	93 85       	ldd	r25, Z+11	; 0x0b
    ba52:	a4 85       	ldd	r26, Z+12	; 0x0c
    ba54:	b5 85       	ldd	r27, Z+13	; 0x0d
    ba56:	40 89       	ldd	r20, Z+16	; 0x10
    ba58:	51 89       	ldd	r21, Z+17	; 0x11
    ba5a:	62 89       	ldd	r22, Z+18	; 0x12
    ba5c:	73 89       	ldd	r23, Z+19	; 0x13
    ba5e:	84 1b       	sub	r24, r20
    ba60:	95 0b       	sbc	r25, r21
    ba62:	a6 0b       	sbc	r26, r22
    ba64:	b7 0b       	sbc	r27, r23
    ba66:	a5 01       	movw	r20, r10
    ba68:	60 e0       	ldi	r22, 0x00	; 0
    ba6a:	70 e0       	ldi	r23, 0x00	; 0
    ba6c:	84 17       	cp	r24, r20
    ba6e:	95 07       	cpc	r25, r21
    ba70:	a6 07       	cpc	r26, r22
    ba72:	b7 07       	cpc	r27, r23
    ba74:	08 f4       	brcc	.+2      	; 0xba78 <f_read+0x68>
    ba76:	5c 01       	movw	r10, r24
    ba78:	17 01       	movw	r2, r14
    ba7a:	f4 e2       	ldi	r31, 0x24	; 36
    ba7c:	2f 0e       	add	r2, r31
    ba7e:	31 1c       	adc	r3, r1
    ba80:	a1 14       	cp	r10, r1
    ba82:	b1 04       	cpc	r11, r1
    ba84:	09 f4       	brne	.+2      	; 0xba88 <f_read+0x78>
    ba86:	07 c1       	rjmp	.+526    	; 0xbc96 <f_read+0x286>
    ba88:	f7 01       	movw	r30, r14
    ba8a:	40 89       	ldd	r20, Z+16	; 0x10
    ba8c:	51 89       	ldd	r21, Z+17	; 0x11
    ba8e:	62 89       	ldd	r22, Z+18	; 0x12
    ba90:	73 89       	ldd	r23, Z+19	; 0x13
    ba92:	db 01       	movw	r26, r22
    ba94:	ca 01       	movw	r24, r20
    ba96:	91 70       	andi	r25, 0x01	; 1
    ba98:	aa 27       	eor	r26, r26
    ba9a:	bb 27       	eor	r27, r27
    ba9c:	89 2b       	or	r24, r25
    ba9e:	8a 2b       	or	r24, r26
    baa0:	8b 2b       	or	r24, r27
    baa2:	09 f0       	breq	.+2      	; 0xbaa6 <f_read+0x96>
    baa4:	cb c0       	rjmp	.+406    	; 0xbc3c <f_read+0x22c>
    baa6:	e9 81       	ldd	r30, Y+1	; 0x01
    baa8:	fa 81       	ldd	r31, Y+2	; 0x02
    baaa:	01 85       	ldd	r16, Z+9	; 0x09
    baac:	12 85       	ldd	r17, Z+10	; 0x0a
    baae:	01 50       	subi	r16, 0x01	; 1
    bab0:	11 09       	sbc	r17, r1
    bab2:	db 01       	movw	r26, r22
    bab4:	ca 01       	movw	r24, r20
    bab6:	e9 e0       	ldi	r30, 0x09	; 9
    bab8:	b6 95       	lsr	r27
    baba:	a7 95       	ror	r26
    babc:	97 95       	ror	r25
    babe:	87 95       	ror	r24
    bac0:	ea 95       	dec	r30
    bac2:	d1 f7       	brne	.-12     	; 0xbab8 <f_read+0xa8>
    bac4:	08 23       	and	r16, r24
    bac6:	19 23       	and	r17, r25
    bac8:	01 15       	cp	r16, r1
    baca:	11 05       	cpc	r17, r1
    bacc:	91 f5       	brne	.+100    	; 0xbb32 <f_read+0x122>
    bace:	f7 01       	movw	r30, r14
    bad0:	41 15       	cp	r20, r1
    bad2:	51 05       	cpc	r21, r1
    bad4:	61 05       	cpc	r22, r1
    bad6:	71 05       	cpc	r23, r1
    bad8:	29 f4       	brne	.+10     	; 0xbae4 <f_read+0xd4>
    bada:	66 81       	ldd	r22, Z+6	; 0x06
    badc:	77 81       	ldd	r23, Z+7	; 0x07
    bade:	80 85       	ldd	r24, Z+8	; 0x08
    bae0:	91 85       	ldd	r25, Z+9	; 0x09
    bae2:	11 c0       	rjmp	.+34     	; 0xbb06 <f_read+0xf6>
    bae4:	82 a1       	ldd	r24, Z+34	; 0x22
    bae6:	93 a1       	ldd	r25, Z+35	; 0x23
    bae8:	89 2b       	or	r24, r25
    baea:	21 f0       	breq	.+8      	; 0xbaf4 <f_read+0xe4>
    baec:	c7 01       	movw	r24, r14
    baee:	0e 94 e2 48 	call	0x91c4	; 0x91c4 <clmt_clust>
    baf2:	09 c0       	rjmp	.+18     	; 0xbb06 <f_read+0xf6>
    baf4:	f7 01       	movw	r30, r14
    baf6:	44 89       	ldd	r20, Z+20	; 0x14
    baf8:	55 89       	ldd	r21, Z+21	; 0x15
    bafa:	66 89       	ldd	r22, Z+22	; 0x16
    bafc:	77 89       	ldd	r23, Z+23	; 0x17
    bafe:	80 81       	ld	r24, Z
    bb00:	91 81       	ldd	r25, Z+1	; 0x01
    bb02:	0e 94 c1 50 	call	0xa182	; 0xa182 <get_fat.isra.10>
    bb06:	62 30       	cpi	r22, 0x02	; 2
    bb08:	71 05       	cpc	r23, r1
    bb0a:	81 05       	cpc	r24, r1
    bb0c:	91 05       	cpc	r25, r1
    bb0e:	10 f4       	brcc	.+4      	; 0xbb14 <f_read+0x104>
    bb10:	82 e0       	ldi	r24, 0x02	; 2
    bb12:	07 c0       	rjmp	.+14     	; 0xbb22 <f_read+0x112>
    bb14:	6f 3f       	cpi	r22, 0xFF	; 255
    bb16:	ff ef       	ldi	r31, 0xFF	; 255
    bb18:	7f 07       	cpc	r23, r31
    bb1a:	8f 07       	cpc	r24, r31
    bb1c:	9f 07       	cpc	r25, r31
    bb1e:	21 f4       	brne	.+8      	; 0xbb28 <f_read+0x118>
    bb20:	81 e0       	ldi	r24, 0x01	; 1
    bb22:	f7 01       	movw	r30, r14
    bb24:	87 87       	std	Z+15, r24	; 0x0f
    bb26:	ba c0       	rjmp	.+372    	; 0xbc9c <f_read+0x28c>
    bb28:	f7 01       	movw	r30, r14
    bb2a:	64 8b       	std	Z+20, r22	; 0x14
    bb2c:	75 8b       	std	Z+21, r23	; 0x15
    bb2e:	86 8b       	std	Z+22, r24	; 0x16
    bb30:	97 8b       	std	Z+23, r25	; 0x17
    bb32:	89 81       	ldd	r24, Y+1	; 0x01
    bb34:	9a 81       	ldd	r25, Y+2	; 0x02
    bb36:	9c 83       	std	Y+4, r25	; 0x04
    bb38:	8b 83       	std	Y+3, r24	; 0x03
    bb3a:	f7 01       	movw	r30, r14
    bb3c:	44 89       	ldd	r20, Z+20	; 0x14
    bb3e:	55 89       	ldd	r21, Z+21	; 0x15
    bb40:	66 89       	ldd	r22, Z+22	; 0x16
    bb42:	77 89       	ldd	r23, Z+23	; 0x17
    bb44:	0e 94 ba 48 	call	0x9174	; 0x9174 <clst2sect>
    bb48:	61 15       	cp	r22, r1
    bb4a:	71 05       	cpc	r23, r1
    bb4c:	81 05       	cpc	r24, r1
    bb4e:	91 05       	cpc	r25, r1
    bb50:	f9 f2       	breq	.-66     	; 0xbb10 <f_read+0x100>
    bb52:	2b 01       	movw	r4, r22
    bb54:	3c 01       	movw	r6, r24
    bb56:	40 0e       	add	r4, r16
    bb58:	51 1e       	adc	r5, r17
    bb5a:	61 1c       	adc	r6, r1
    bb5c:	71 1c       	adc	r7, r1
    bb5e:	65 01       	movw	r12, r10
    bb60:	cd 2c       	mov	r12, r13
    bb62:	dd 24       	eor	r13, r13
    bb64:	c6 94       	lsr	r12
    bb66:	c1 14       	cp	r12, r1
    bb68:	d1 04       	cpc	r13, r1
    bb6a:	d1 f1       	breq	.+116    	; 0xbbe0 <f_read+0x1d0>
    bb6c:	eb 81       	ldd	r30, Y+3	; 0x03
    bb6e:	fc 81       	ldd	r31, Y+4	; 0x04
    bb70:	81 85       	ldd	r24, Z+9	; 0x09
    bb72:	92 85       	ldd	r25, Z+10	; 0x0a
    bb74:	98 01       	movw	r18, r16
    bb76:	2c 0d       	add	r18, r12
    bb78:	3d 1d       	adc	r19, r13
    bb7a:	82 17       	cp	r24, r18
    bb7c:	93 07       	cpc	r25, r19
    bb7e:	18 f4       	brcc	.+6      	; 0xbb86 <f_read+0x176>
    bb80:	6c 01       	movw	r12, r24
    bb82:	c0 1a       	sub	r12, r16
    bb84:	d1 0a       	sbc	r13, r17
    bb86:	86 01       	movw	r16, r12
    bb88:	a3 01       	movw	r20, r6
    bb8a:	92 01       	movw	r18, r4
    bb8c:	b4 01       	movw	r22, r8
    bb8e:	eb 81       	ldd	r30, Y+3	; 0x03
    bb90:	fc 81       	ldd	r31, Y+4	; 0x04
    bb92:	81 81       	ldd	r24, Z+1	; 0x01
    bb94:	0e 94 80 6b 	call	0xd700	; 0xd700 <disk_read>
    bb98:	89 2b       	or	r24, r25
    bb9a:	11 f6       	brne	.-124    	; 0xbb20 <f_read+0x110>
    bb9c:	f7 01       	movw	r30, r14
    bb9e:	86 85       	ldd	r24, Z+14	; 0x0e
    bba0:	87 ff       	sbrs	r24, 7
    bba2:	1a c0       	rjmp	.+52     	; 0xbbd8 <f_read+0x1c8>
    bba4:	80 8d       	ldd	r24, Z+24	; 0x18
    bba6:	91 8d       	ldd	r25, Z+25	; 0x19
    bba8:	a2 8d       	ldd	r26, Z+26	; 0x1a
    bbaa:	b3 8d       	ldd	r27, Z+27	; 0x1b
    bbac:	84 19       	sub	r24, r4
    bbae:	95 09       	sbc	r25, r5
    bbb0:	a6 09       	sbc	r26, r6
    bbb2:	b7 09       	sbc	r27, r7
    bbb4:	a6 01       	movw	r20, r12
    bbb6:	60 e0       	ldi	r22, 0x00	; 0
    bbb8:	70 e0       	ldi	r23, 0x00	; 0
    bbba:	84 17       	cp	r24, r20
    bbbc:	95 07       	cpc	r25, r21
    bbbe:	a6 07       	cpc	r26, r22
    bbc0:	b7 07       	cpc	r27, r23
    bbc2:	50 f4       	brcc	.+20     	; 0xbbd8 <f_read+0x1c8>
    bbc4:	98 2f       	mov	r25, r24
    bbc6:	88 27       	eor	r24, r24
    bbc8:	99 0f       	add	r25, r25
    bbca:	40 e0       	ldi	r20, 0x00	; 0
    bbcc:	52 e0       	ldi	r21, 0x02	; 2
    bbce:	b1 01       	movw	r22, r2
    bbd0:	88 0d       	add	r24, r8
    bbd2:	99 1d       	adc	r25, r9
    bbd4:	0e 94 85 49 	call	0x930a	; 0x930a <mem_cpy.part.0>
    bbd8:	dc 2c       	mov	r13, r12
    bbda:	cc 24       	eor	r12, r12
    bbdc:	dd 0c       	add	r13, r13
    bbde:	41 c0       	rjmp	.+130    	; 0xbc62 <f_read+0x252>
    bbe0:	f7 01       	movw	r30, r14
    bbe2:	20 8d       	ldd	r18, Z+24	; 0x18
    bbe4:	31 8d       	ldd	r19, Z+25	; 0x19
    bbe6:	42 8d       	ldd	r20, Z+26	; 0x1a
    bbe8:	53 8d       	ldd	r21, Z+27	; 0x1b
    bbea:	42 16       	cp	r4, r18
    bbec:	53 06       	cpc	r5, r19
    bbee:	64 06       	cpc	r6, r20
    bbf0:	75 06       	cpc	r7, r21
    bbf2:	f9 f0       	breq	.+62     	; 0xbc32 <f_read+0x222>
    bbf4:	86 85       	ldd	r24, Z+14	; 0x0e
    bbf6:	87 ff       	sbrs	r24, 7
    bbf8:	0f c0       	rjmp	.+30     	; 0xbc18 <f_read+0x208>
    bbfa:	01 e0       	ldi	r16, 0x01	; 1
    bbfc:	10 e0       	ldi	r17, 0x00	; 0
    bbfe:	b1 01       	movw	r22, r2
    bc00:	eb 81       	ldd	r30, Y+3	; 0x03
    bc02:	fc 81       	ldd	r31, Y+4	; 0x04
    bc04:	81 81       	ldd	r24, Z+1	; 0x01
    bc06:	0e 94 90 6b 	call	0xd720	; 0xd720 <disk_write>
    bc0a:	89 2b       	or	r24, r25
    bc0c:	09 f0       	breq	.+2      	; 0xbc10 <f_read+0x200>
    bc0e:	88 cf       	rjmp	.-240    	; 0xbb20 <f_read+0x110>
    bc10:	f7 01       	movw	r30, r14
    bc12:	86 85       	ldd	r24, Z+14	; 0x0e
    bc14:	8f 77       	andi	r24, 0x7F	; 127
    bc16:	86 87       	std	Z+14, r24	; 0x0e
    bc18:	e9 81       	ldd	r30, Y+1	; 0x01
    bc1a:	fa 81       	ldd	r31, Y+2	; 0x02
    bc1c:	01 e0       	ldi	r16, 0x01	; 1
    bc1e:	10 e0       	ldi	r17, 0x00	; 0
    bc20:	a3 01       	movw	r20, r6
    bc22:	92 01       	movw	r18, r4
    bc24:	b1 01       	movw	r22, r2
    bc26:	81 81       	ldd	r24, Z+1	; 0x01
    bc28:	0e 94 80 6b 	call	0xd700	; 0xd700 <disk_read>
    bc2c:	89 2b       	or	r24, r25
    bc2e:	09 f0       	breq	.+2      	; 0xbc32 <f_read+0x222>
    bc30:	77 cf       	rjmp	.-274    	; 0xbb20 <f_read+0x110>
    bc32:	f7 01       	movw	r30, r14
    bc34:	40 8e       	std	Z+24, r4	; 0x18
    bc36:	51 8e       	std	Z+25, r5	; 0x19
    bc38:	62 8e       	std	Z+26, r6	; 0x1a
    bc3a:	73 8e       	std	Z+27, r7	; 0x1b
    bc3c:	f7 01       	movw	r30, r14
    bc3e:	60 89       	ldd	r22, Z+16	; 0x10
    bc40:	71 89       	ldd	r23, Z+17	; 0x11
    bc42:	71 70       	andi	r23, 0x01	; 1
    bc44:	80 e0       	ldi	r24, 0x00	; 0
    bc46:	92 e0       	ldi	r25, 0x02	; 2
    bc48:	86 1b       	sub	r24, r22
    bc4a:	97 0b       	sbc	r25, r23
    bc4c:	65 01       	movw	r12, r10
    bc4e:	8a 15       	cp	r24, r10
    bc50:	9b 05       	cpc	r25, r11
    bc52:	08 f4       	brcc	.+2      	; 0xbc56 <f_read+0x246>
    bc54:	6c 01       	movw	r12, r24
    bc56:	62 0d       	add	r22, r2
    bc58:	73 1d       	adc	r23, r3
    bc5a:	a6 01       	movw	r20, r12
    bc5c:	c4 01       	movw	r24, r8
    bc5e:	0e 94 85 49 	call	0x930a	; 0x930a <mem_cpy.part.0>
    bc62:	ac 18       	sub	r10, r12
    bc64:	bd 08       	sbc	r11, r13
    bc66:	ed 81       	ldd	r30, Y+5	; 0x05
    bc68:	fe 81       	ldd	r31, Y+6	; 0x06
    bc6a:	80 81       	ld	r24, Z
    bc6c:	91 81       	ldd	r25, Z+1	; 0x01
    bc6e:	8c 0d       	add	r24, r12
    bc70:	9d 1d       	adc	r25, r13
    bc72:	91 83       	std	Z+1, r25	; 0x01
    bc74:	80 83       	st	Z, r24
    bc76:	8c 0c       	add	r8, r12
    bc78:	9d 1c       	adc	r9, r13
    bc7a:	f7 01       	movw	r30, r14
    bc7c:	80 89       	ldd	r24, Z+16	; 0x10
    bc7e:	91 89       	ldd	r25, Z+17	; 0x11
    bc80:	a2 89       	ldd	r26, Z+18	; 0x12
    bc82:	b3 89       	ldd	r27, Z+19	; 0x13
    bc84:	8c 0d       	add	r24, r12
    bc86:	9d 1d       	adc	r25, r13
    bc88:	a1 1d       	adc	r26, r1
    bc8a:	b1 1d       	adc	r27, r1
    bc8c:	80 8b       	std	Z+16, r24	; 0x10
    bc8e:	91 8b       	std	Z+17, r25	; 0x11
    bc90:	a2 8b       	std	Z+18, r26	; 0x12
    bc92:	b3 8b       	std	Z+19, r27	; 0x13
    bc94:	f5 ce       	rjmp	.-534    	; 0xba80 <f_read+0x70>
    bc96:	80 e0       	ldi	r24, 0x00	; 0
    bc98:	01 c0       	rjmp	.+2      	; 0xbc9c <f_read+0x28c>
    bc9a:	87 e0       	ldi	r24, 0x07	; 7
    bc9c:	90 e0       	ldi	r25, 0x00	; 0
    bc9e:	26 96       	adiw	r28, 0x06	; 6
    bca0:	e2 e1       	ldi	r30, 0x12	; 18
    bca2:	0c 94 fc e5 	jmp	0x1cbf8	; 0x1cbf8 <__epilogue_restores__>

0000bca6 <f_write>:
    bca6:	a8 e0       	ldi	r26, 0x08	; 8
    bca8:	b0 e0       	ldi	r27, 0x00	; 0
    bcaa:	e9 e5       	ldi	r30, 0x59	; 89
    bcac:	fe e5       	ldi	r31, 0x5E	; 94
    bcae:	0c 94 e0 e5 	jmp	0x1cbc0	; 0x1cbc0 <__prologue_saves__>
    bcb2:	7c 01       	movw	r14, r24
    bcb4:	3b 01       	movw	r6, r22
    bcb6:	5a 01       	movw	r10, r20
    bcb8:	38 87       	std	Y+8, r19	; 0x08
    bcba:	2f 83       	std	Y+7, r18	; 0x07
    bcbc:	f9 01       	movw	r30, r18
    bcbe:	11 82       	std	Z+1, r1	; 0x01
    bcc0:	10 82       	st	Z, r1
    bcc2:	be 01       	movw	r22, r28
    bcc4:	6f 5f       	subi	r22, 0xFF	; 255
    bcc6:	7f 4f       	sbci	r23, 0xFF	; 255
    bcc8:	0e 94 59 49 	call	0x92b2	; 0x92b2 <validate>
    bccc:	00 97       	sbiw	r24, 0x00	; 0
    bcce:	09 f0       	breq	.+2      	; 0xbcd2 <f_write+0x2c>
    bcd0:	7d c1       	rjmp	.+762    	; 0xbfcc <f_write+0x326>
    bcd2:	f7 01       	movw	r30, r14
    bcd4:	87 85       	ldd	r24, Z+15	; 0x0f
    bcd6:	90 e0       	ldi	r25, 0x00	; 0
    bcd8:	00 97       	sbiw	r24, 0x00	; 0
    bcda:	09 f0       	breq	.+2      	; 0xbcde <f_write+0x38>
    bcdc:	77 c1       	rjmp	.+750    	; 0xbfcc <f_write+0x326>
    bcde:	86 85       	ldd	r24, Z+14	; 0x0e
    bce0:	81 ff       	sbrs	r24, 1
    bce2:	72 c1       	rjmp	.+740    	; 0xbfc8 <f_write+0x322>
    bce4:	80 89       	ldd	r24, Z+16	; 0x10
    bce6:	91 89       	ldd	r25, Z+17	; 0x11
    bce8:	a2 89       	ldd	r26, Z+18	; 0x12
    bcea:	b3 89       	ldd	r27, Z+19	; 0x13
    bcec:	ac 01       	movw	r20, r24
    bcee:	bd 01       	movw	r22, r26
    bcf0:	4a 0d       	add	r20, r10
    bcf2:	5b 1d       	adc	r21, r11
    bcf4:	61 1d       	adc	r22, r1
    bcf6:	71 1d       	adc	r23, r1
    bcf8:	48 17       	cp	r20, r24
    bcfa:	59 07       	cpc	r21, r25
    bcfc:	6a 07       	cpc	r22, r26
    bcfe:	7b 07       	cpc	r23, r27
    bd00:	18 f4       	brcc	.+6      	; 0xbd08 <f_write+0x62>
    bd02:	5c 01       	movw	r10, r24
    bd04:	a0 94       	com	r10
    bd06:	b0 94       	com	r11
    bd08:	97 01       	movw	r18, r14
    bd0a:	2c 5d       	subi	r18, 0xDC	; 220
    bd0c:	3f 4f       	sbci	r19, 0xFF	; 255
    bd0e:	3e 83       	std	Y+6, r19	; 0x06
    bd10:	2d 83       	std	Y+5, r18	; 0x05
    bd12:	a1 14       	cp	r10, r1
    bd14:	b1 04       	cpc	r11, r1
    bd16:	09 f4       	brne	.+2      	; 0xbd1a <f_write+0x74>
    bd18:	4d c0       	rjmp	.+154    	; 0xbdb4 <f_write+0x10e>
    bd1a:	f7 01       	movw	r30, r14
    bd1c:	40 89       	ldd	r20, Z+16	; 0x10
    bd1e:	51 89       	ldd	r21, Z+17	; 0x11
    bd20:	62 89       	ldd	r22, Z+18	; 0x12
    bd22:	73 89       	ldd	r23, Z+19	; 0x13
    bd24:	db 01       	movw	r26, r22
    bd26:	ca 01       	movw	r24, r20
    bd28:	91 70       	andi	r25, 0x01	; 1
    bd2a:	aa 27       	eor	r26, r26
    bd2c:	bb 27       	eor	r27, r27
    bd2e:	89 2b       	or	r24, r25
    bd30:	8a 2b       	or	r24, r26
    bd32:	8b 2b       	or	r24, r27
    bd34:	09 f0       	breq	.+2      	; 0xbd38 <f_write+0x92>
    bd36:	05 c1       	rjmp	.+522    	; 0xbf42 <f_write+0x29c>
    bd38:	e9 81       	ldd	r30, Y+1	; 0x01
    bd3a:	fa 81       	ldd	r31, Y+2	; 0x02
    bd3c:	81 84       	ldd	r8, Z+9	; 0x09
    bd3e:	92 84       	ldd	r9, Z+10	; 0x0a
    bd40:	f1 e0       	ldi	r31, 0x01	; 1
    bd42:	8f 1a       	sub	r8, r31
    bd44:	91 08       	sbc	r9, r1
    bd46:	db 01       	movw	r26, r22
    bd48:	ca 01       	movw	r24, r20
    bd4a:	e9 e0       	ldi	r30, 0x09	; 9
    bd4c:	b6 95       	lsr	r27
    bd4e:	a7 95       	ror	r26
    bd50:	97 95       	ror	r25
    bd52:	87 95       	ror	r24
    bd54:	ea 95       	dec	r30
    bd56:	d1 f7       	brne	.-12     	; 0xbd4c <f_write+0xa6>
    bd58:	88 22       	and	r8, r24
    bd5a:	99 22       	and	r9, r25
    bd5c:	81 14       	cp	r8, r1
    bd5e:	91 04       	cpc	r9, r1
    bd60:	09 f0       	breq	.+2      	; 0xbd64 <f_write+0xbe>
    bd62:	51 c0       	rjmp	.+162    	; 0xbe06 <f_write+0x160>
    bd64:	f7 01       	movw	r30, r14
    bd66:	41 15       	cp	r20, r1
    bd68:	51 05       	cpc	r21, r1
    bd6a:	61 05       	cpc	r22, r1
    bd6c:	71 05       	cpc	r23, r1
    bd6e:	69 f4       	brne	.+26     	; 0xbd8a <f_write+0xe4>
    bd70:	66 81       	ldd	r22, Z+6	; 0x06
    bd72:	77 81       	ldd	r23, Z+7	; 0x07
    bd74:	80 85       	ldd	r24, Z+8	; 0x08
    bd76:	91 85       	ldd	r25, Z+9	; 0x09
    bd78:	61 15       	cp	r22, r1
    bd7a:	71 05       	cpc	r23, r1
    bd7c:	81 05       	cpc	r24, r1
    bd7e:	91 05       	cpc	r25, r1
    bd80:	f9 f4       	brne	.+62     	; 0xbdc0 <f_write+0x11a>
    bd82:	40 e0       	ldi	r20, 0x00	; 0
    bd84:	50 e0       	ldi	r21, 0x00	; 0
    bd86:	ba 01       	movw	r22, r20
    bd88:	0d c0       	rjmp	.+26     	; 0xbda4 <f_write+0xfe>
    bd8a:	82 a1       	ldd	r24, Z+34	; 0x22
    bd8c:	93 a1       	ldd	r25, Z+35	; 0x23
    bd8e:	89 2b       	or	r24, r25
    bd90:	21 f0       	breq	.+8      	; 0xbd9a <f_write+0xf4>
    bd92:	c7 01       	movw	r24, r14
    bd94:	0e 94 e2 48 	call	0x91c4	; 0x91c4 <clmt_clust>
    bd98:	08 c0       	rjmp	.+16     	; 0xbdaa <f_write+0x104>
    bd9a:	f7 01       	movw	r30, r14
    bd9c:	44 89       	ldd	r20, Z+20	; 0x14
    bd9e:	55 89       	ldd	r21, Z+21	; 0x15
    bda0:	66 89       	ldd	r22, Z+22	; 0x16
    bda2:	77 89       	ldd	r23, Z+23	; 0x17
    bda4:	c7 01       	movw	r24, r14
    bda6:	0e 94 36 52 	call	0xa46c	; 0xa46c <create_chain>
    bdaa:	61 15       	cp	r22, r1
    bdac:	71 05       	cpc	r23, r1
    bdae:	81 05       	cpc	r24, r1
    bdb0:	91 05       	cpc	r25, r1
    bdb2:	31 f4       	brne	.+12     	; 0xbdc0 <f_write+0x11a>
    bdb4:	f7 01       	movw	r30, r14
    bdb6:	86 85       	ldd	r24, Z+14	; 0x0e
    bdb8:	80 64       	ori	r24, 0x40	; 64
    bdba:	86 87       	std	Z+14, r24	; 0x0e
    bdbc:	80 e0       	ldi	r24, 0x00	; 0
    bdbe:	05 c1       	rjmp	.+522    	; 0xbfca <f_write+0x324>
    bdc0:	61 30       	cpi	r22, 0x01	; 1
    bdc2:	71 05       	cpc	r23, r1
    bdc4:	81 05       	cpc	r24, r1
    bdc6:	91 05       	cpc	r25, r1
    bdc8:	11 f4       	brne	.+4      	; 0xbdce <f_write+0x128>
    bdca:	82 e0       	ldi	r24, 0x02	; 2
    bdcc:	07 c0       	rjmp	.+14     	; 0xbddc <f_write+0x136>
    bdce:	6f 3f       	cpi	r22, 0xFF	; 255
    bdd0:	ff ef       	ldi	r31, 0xFF	; 255
    bdd2:	7f 07       	cpc	r23, r31
    bdd4:	8f 07       	cpc	r24, r31
    bdd6:	9f 07       	cpc	r25, r31
    bdd8:	21 f4       	brne	.+8      	; 0xbde2 <f_write+0x13c>
    bdda:	81 e0       	ldi	r24, 0x01	; 1
    bddc:	f7 01       	movw	r30, r14
    bdde:	87 87       	std	Z+15, r24	; 0x0f
    bde0:	f4 c0       	rjmp	.+488    	; 0xbfca <f_write+0x324>
    bde2:	f7 01       	movw	r30, r14
    bde4:	64 8b       	std	Z+20, r22	; 0x14
    bde6:	75 8b       	std	Z+21, r23	; 0x15
    bde8:	86 8b       	std	Z+22, r24	; 0x16
    bdea:	97 8b       	std	Z+23, r25	; 0x17
    bdec:	06 81       	ldd	r16, Z+6	; 0x06
    bdee:	17 81       	ldd	r17, Z+7	; 0x07
    bdf0:	20 85       	ldd	r18, Z+8	; 0x08
    bdf2:	31 85       	ldd	r19, Z+9	; 0x09
    bdf4:	01 15       	cp	r16, r1
    bdf6:	11 05       	cpc	r17, r1
    bdf8:	21 05       	cpc	r18, r1
    bdfa:	31 05       	cpc	r19, r1
    bdfc:	21 f4       	brne	.+8      	; 0xbe06 <f_write+0x160>
    bdfe:	66 83       	std	Z+6, r22	; 0x06
    be00:	77 83       	std	Z+7, r23	; 0x07
    be02:	80 87       	std	Z+8, r24	; 0x08
    be04:	91 87       	std	Z+9, r25	; 0x09
    be06:	f7 01       	movw	r30, r14
    be08:	86 85       	ldd	r24, Z+14	; 0x0e
    be0a:	87 ff       	sbrs	r24, 7
    be0c:	13 c0       	rjmp	.+38     	; 0xbe34 <f_write+0x18e>
    be0e:	20 8d       	ldd	r18, Z+24	; 0x18
    be10:	31 8d       	ldd	r19, Z+25	; 0x19
    be12:	42 8d       	ldd	r20, Z+26	; 0x1a
    be14:	53 8d       	ldd	r21, Z+27	; 0x1b
    be16:	e9 81       	ldd	r30, Y+1	; 0x01
    be18:	fa 81       	ldd	r31, Y+2	; 0x02
    be1a:	01 e0       	ldi	r16, 0x01	; 1
    be1c:	10 e0       	ldi	r17, 0x00	; 0
    be1e:	6d 81       	ldd	r22, Y+5	; 0x05
    be20:	7e 81       	ldd	r23, Y+6	; 0x06
    be22:	81 81       	ldd	r24, Z+1	; 0x01
    be24:	0e 94 90 6b 	call	0xd720	; 0xd720 <disk_write>
    be28:	89 2b       	or	r24, r25
    be2a:	b9 f6       	brne	.-82     	; 0xbdda <f_write+0x134>
    be2c:	f7 01       	movw	r30, r14
    be2e:	86 85       	ldd	r24, Z+14	; 0x0e
    be30:	8f 77       	andi	r24, 0x7F	; 127
    be32:	86 87       	std	Z+14, r24	; 0x0e
    be34:	29 81       	ldd	r18, Y+1	; 0x01
    be36:	3a 81       	ldd	r19, Y+2	; 0x02
    be38:	3c 83       	std	Y+4, r19	; 0x04
    be3a:	2b 83       	std	Y+3, r18	; 0x03
    be3c:	f7 01       	movw	r30, r14
    be3e:	44 89       	ldd	r20, Z+20	; 0x14
    be40:	55 89       	ldd	r21, Z+21	; 0x15
    be42:	66 89       	ldd	r22, Z+22	; 0x16
    be44:	77 89       	ldd	r23, Z+23	; 0x17
    be46:	c9 01       	movw	r24, r18
    be48:	0e 94 ba 48 	call	0x9174	; 0x9174 <clst2sect>
    be4c:	61 15       	cp	r22, r1
    be4e:	71 05       	cpc	r23, r1
    be50:	81 05       	cpc	r24, r1
    be52:	91 05       	cpc	r25, r1
    be54:	09 f4       	brne	.+2      	; 0xbe58 <f_write+0x1b2>
    be56:	b9 cf       	rjmp	.-142    	; 0xbdca <f_write+0x124>
    be58:	1b 01       	movw	r2, r22
    be5a:	2c 01       	movw	r4, r24
    be5c:	28 0c       	add	r2, r8
    be5e:	39 1c       	adc	r3, r9
    be60:	41 1c       	adc	r4, r1
    be62:	51 1c       	adc	r5, r1
    be64:	65 01       	movw	r12, r10
    be66:	cd 2c       	mov	r12, r13
    be68:	dd 24       	eor	r13, r13
    be6a:	c6 94       	lsr	r12
    be6c:	c1 14       	cp	r12, r1
    be6e:	d1 04       	cpc	r13, r1
    be70:	f1 f1       	breq	.+124    	; 0xbeee <f_write+0x248>
    be72:	eb 81       	ldd	r30, Y+3	; 0x03
    be74:	fc 81       	ldd	r31, Y+4	; 0x04
    be76:	81 85       	ldd	r24, Z+9	; 0x09
    be78:	92 85       	ldd	r25, Z+10	; 0x0a
    be7a:	94 01       	movw	r18, r8
    be7c:	2c 0d       	add	r18, r12
    be7e:	3d 1d       	adc	r19, r13
    be80:	82 17       	cp	r24, r18
    be82:	93 07       	cpc	r25, r19
    be84:	18 f4       	brcc	.+6      	; 0xbe8c <f_write+0x1e6>
    be86:	6c 01       	movw	r12, r24
    be88:	c8 18       	sub	r12, r8
    be8a:	d9 08       	sbc	r13, r9
    be8c:	86 01       	movw	r16, r12
    be8e:	a2 01       	movw	r20, r4
    be90:	91 01       	movw	r18, r2
    be92:	b3 01       	movw	r22, r6
    be94:	eb 81       	ldd	r30, Y+3	; 0x03
    be96:	fc 81       	ldd	r31, Y+4	; 0x04
    be98:	81 81       	ldd	r24, Z+1	; 0x01
    be9a:	0e 94 90 6b 	call	0xd720	; 0xd720 <disk_write>
    be9e:	89 2b       	or	r24, r25
    bea0:	09 f0       	breq	.+2      	; 0xbea4 <f_write+0x1fe>
    bea2:	9b cf       	rjmp	.-202    	; 0xbdda <f_write+0x134>
    bea4:	f7 01       	movw	r30, r14
    bea6:	80 8d       	ldd	r24, Z+24	; 0x18
    bea8:	91 8d       	ldd	r25, Z+25	; 0x19
    beaa:	a2 8d       	ldd	r26, Z+26	; 0x1a
    beac:	b3 8d       	ldd	r27, Z+27	; 0x1b
    beae:	82 19       	sub	r24, r2
    beb0:	93 09       	sbc	r25, r3
    beb2:	a4 09       	sbc	r26, r4
    beb4:	b5 09       	sbc	r27, r5
    beb6:	a6 01       	movw	r20, r12
    beb8:	60 e0       	ldi	r22, 0x00	; 0
    beba:	70 e0       	ldi	r23, 0x00	; 0
    bebc:	84 17       	cp	r24, r20
    bebe:	95 07       	cpc	r25, r21
    bec0:	a6 07       	cpc	r26, r22
    bec2:	b7 07       	cpc	r27, r23
    bec4:	80 f4       	brcc	.+32     	; 0xbee6 <f_write+0x240>
    bec6:	98 2f       	mov	r25, r24
    bec8:	88 27       	eor	r24, r24
    beca:	99 0f       	add	r25, r25
    becc:	b3 01       	movw	r22, r6
    bece:	68 0f       	add	r22, r24
    bed0:	79 1f       	adc	r23, r25
    bed2:	40 e0       	ldi	r20, 0x00	; 0
    bed4:	52 e0       	ldi	r21, 0x02	; 2
    bed6:	8d 81       	ldd	r24, Y+5	; 0x05
    bed8:	9e 81       	ldd	r25, Y+6	; 0x06
    beda:	0e 94 85 49 	call	0x930a	; 0x930a <mem_cpy.part.0>
    bede:	f7 01       	movw	r30, r14
    bee0:	86 85       	ldd	r24, Z+14	; 0x0e
    bee2:	8f 77       	andi	r24, 0x7F	; 127
    bee4:	86 87       	std	Z+14, r24	; 0x0e
    bee6:	dc 2c       	mov	r13, r12
    bee8:	cc 24       	eor	r12, r12
    beea:	dd 0c       	add	r13, r13
    beec:	43 c0       	rjmp	.+134    	; 0xbf74 <f_write+0x2ce>
    beee:	f7 01       	movw	r30, r14
    bef0:	80 8d       	ldd	r24, Z+24	; 0x18
    bef2:	91 8d       	ldd	r25, Z+25	; 0x19
    bef4:	a2 8d       	ldd	r26, Z+26	; 0x1a
    bef6:	b3 8d       	ldd	r27, Z+27	; 0x1b
    bef8:	28 16       	cp	r2, r24
    befa:	39 06       	cpc	r3, r25
    befc:	4a 06       	cpc	r4, r26
    befe:	5b 06       	cpc	r5, r27
    bf00:	d9 f0       	breq	.+54     	; 0xbf38 <f_write+0x292>
    bf02:	40 89       	ldd	r20, Z+16	; 0x10
    bf04:	51 89       	ldd	r21, Z+17	; 0x11
    bf06:	62 89       	ldd	r22, Z+18	; 0x12
    bf08:	73 89       	ldd	r23, Z+19	; 0x13
    bf0a:	82 85       	ldd	r24, Z+10	; 0x0a
    bf0c:	93 85       	ldd	r25, Z+11	; 0x0b
    bf0e:	a4 85       	ldd	r26, Z+12	; 0x0c
    bf10:	b5 85       	ldd	r27, Z+13	; 0x0d
    bf12:	48 17       	cp	r20, r24
    bf14:	59 07       	cpc	r21, r25
    bf16:	6a 07       	cpc	r22, r26
    bf18:	7b 07       	cpc	r23, r27
    bf1a:	70 f4       	brcc	.+28     	; 0xbf38 <f_write+0x292>
    bf1c:	01 e0       	ldi	r16, 0x01	; 1
    bf1e:	10 e0       	ldi	r17, 0x00	; 0
    bf20:	a2 01       	movw	r20, r4
    bf22:	91 01       	movw	r18, r2
    bf24:	6d 81       	ldd	r22, Y+5	; 0x05
    bf26:	7e 81       	ldd	r23, Y+6	; 0x06
    bf28:	eb 81       	ldd	r30, Y+3	; 0x03
    bf2a:	fc 81       	ldd	r31, Y+4	; 0x04
    bf2c:	81 81       	ldd	r24, Z+1	; 0x01
    bf2e:	0e 94 80 6b 	call	0xd700	; 0xd700 <disk_read>
    bf32:	89 2b       	or	r24, r25
    bf34:	09 f0       	breq	.+2      	; 0xbf38 <f_write+0x292>
    bf36:	51 cf       	rjmp	.-350    	; 0xbdda <f_write+0x134>
    bf38:	f7 01       	movw	r30, r14
    bf3a:	20 8e       	std	Z+24, r2	; 0x18
    bf3c:	31 8e       	std	Z+25, r3	; 0x19
    bf3e:	42 8e       	std	Z+26, r4	; 0x1a
    bf40:	53 8e       	std	Z+27, r5	; 0x1b
    bf42:	f7 01       	movw	r30, r14
    bf44:	80 89       	ldd	r24, Z+16	; 0x10
    bf46:	91 89       	ldd	r25, Z+17	; 0x11
    bf48:	91 70       	andi	r25, 0x01	; 1
    bf4a:	20 e0       	ldi	r18, 0x00	; 0
    bf4c:	32 e0       	ldi	r19, 0x02	; 2
    bf4e:	28 1b       	sub	r18, r24
    bf50:	39 0b       	sbc	r19, r25
    bf52:	65 01       	movw	r12, r10
    bf54:	2a 15       	cp	r18, r10
    bf56:	3b 05       	cpc	r19, r11
    bf58:	08 f4       	brcc	.+2      	; 0xbf5c <f_write+0x2b6>
    bf5a:	69 01       	movw	r12, r18
    bf5c:	a6 01       	movw	r20, r12
    bf5e:	b3 01       	movw	r22, r6
    bf60:	2d 81       	ldd	r18, Y+5	; 0x05
    bf62:	3e 81       	ldd	r19, Y+6	; 0x06
    bf64:	82 0f       	add	r24, r18
    bf66:	93 1f       	adc	r25, r19
    bf68:	0e 94 85 49 	call	0x930a	; 0x930a <mem_cpy.part.0>
    bf6c:	f7 01       	movw	r30, r14
    bf6e:	86 85       	ldd	r24, Z+14	; 0x0e
    bf70:	80 68       	ori	r24, 0x80	; 128
    bf72:	86 87       	std	Z+14, r24	; 0x0e
    bf74:	ac 18       	sub	r10, r12
    bf76:	bd 08       	sbc	r11, r13
    bf78:	ef 81       	ldd	r30, Y+7	; 0x07
    bf7a:	f8 85       	ldd	r31, Y+8	; 0x08
    bf7c:	80 81       	ld	r24, Z
    bf7e:	91 81       	ldd	r25, Z+1	; 0x01
    bf80:	8c 0d       	add	r24, r12
    bf82:	9d 1d       	adc	r25, r13
    bf84:	91 83       	std	Z+1, r25	; 0x01
    bf86:	80 83       	st	Z, r24
    bf88:	6c 0c       	add	r6, r12
    bf8a:	7d 1c       	adc	r7, r13
    bf8c:	f7 01       	movw	r30, r14
    bf8e:	80 89       	ldd	r24, Z+16	; 0x10
    bf90:	91 89       	ldd	r25, Z+17	; 0x11
    bf92:	a2 89       	ldd	r26, Z+18	; 0x12
    bf94:	b3 89       	ldd	r27, Z+19	; 0x13
    bf96:	8c 0d       	add	r24, r12
    bf98:	9d 1d       	adc	r25, r13
    bf9a:	a1 1d       	adc	r26, r1
    bf9c:	b1 1d       	adc	r27, r1
    bf9e:	80 8b       	std	Z+16, r24	; 0x10
    bfa0:	91 8b       	std	Z+17, r25	; 0x11
    bfa2:	a2 8b       	std	Z+18, r26	; 0x12
    bfa4:	b3 8b       	std	Z+19, r27	; 0x13
    bfa6:	42 85       	ldd	r20, Z+10	; 0x0a
    bfa8:	53 85       	ldd	r21, Z+11	; 0x0b
    bfaa:	64 85       	ldd	r22, Z+12	; 0x0c
    bfac:	75 85       	ldd	r23, Z+13	; 0x0d
    bfae:	48 17       	cp	r20, r24
    bfb0:	59 07       	cpc	r21, r25
    bfb2:	6a 07       	cpc	r22, r26
    bfb4:	7b 07       	cpc	r23, r27
    bfb6:	10 f4       	brcc	.+4      	; 0xbfbc <f_write+0x316>
    bfb8:	ac 01       	movw	r20, r24
    bfba:	bd 01       	movw	r22, r26
    bfbc:	f7 01       	movw	r30, r14
    bfbe:	42 87       	std	Z+10, r20	; 0x0a
    bfc0:	53 87       	std	Z+11, r21	; 0x0b
    bfc2:	64 87       	std	Z+12, r22	; 0x0c
    bfc4:	75 87       	std	Z+13, r23	; 0x0d
    bfc6:	a5 ce       	rjmp	.-694    	; 0xbd12 <f_write+0x6c>
    bfc8:	87 e0       	ldi	r24, 0x07	; 7
    bfca:	90 e0       	ldi	r25, 0x00	; 0
    bfcc:	28 96       	adiw	r28, 0x08	; 8
    bfce:	e2 e1       	ldi	r30, 0x12	; 18
    bfd0:	0c 94 fc e5 	jmp	0x1cbf8	; 0x1cbf8 <__epilogue_restores__>

0000bfd4 <f_sync>:
    bfd4:	8f 92       	push	r8
    bfd6:	9f 92       	push	r9
    bfd8:	af 92       	push	r10
    bfda:	bf 92       	push	r11
    bfdc:	ef 92       	push	r14
    bfde:	ff 92       	push	r15
    bfe0:	0f 93       	push	r16
    bfe2:	1f 93       	push	r17
    bfe4:	cf 93       	push	r28
    bfe6:	df 93       	push	r29
    bfe8:	00 d0       	rcall	.+0      	; 0xbfea <f_sync+0x16>
    bfea:	cd b7       	in	r28, 0x3d	; 61
    bfec:	de b7       	in	r29, 0x3e	; 62
    bfee:	7c 01       	movw	r14, r24
    bff0:	be 01       	movw	r22, r28
    bff2:	6f 5f       	subi	r22, 0xFF	; 255
    bff4:	7f 4f       	sbci	r23, 0xFF	; 255
    bff6:	0e 94 59 49 	call	0x92b2	; 0x92b2 <validate>
    bffa:	00 97       	sbiw	r24, 0x00	; 0
    bffc:	09 f0       	breq	.+2      	; 0xc000 <f_sync+0x2c>
    bffe:	5d c0       	rjmp	.+186    	; 0xc0ba <f_sync+0xe6>
    c000:	f7 01       	movw	r30, r14
    c002:	86 85       	ldd	r24, Z+14	; 0x0e
    c004:	86 ff       	sbrs	r24, 6
    c006:	55 c0       	rjmp	.+170    	; 0xc0b2 <f_sync+0xde>
    c008:	87 ff       	sbrs	r24, 7
    c00a:	15 c0       	rjmp	.+42     	; 0xc036 <f_sync+0x62>
    c00c:	20 8d       	ldd	r18, Z+24	; 0x18
    c00e:	31 8d       	ldd	r19, Z+25	; 0x19
    c010:	42 8d       	ldd	r20, Z+26	; 0x1a
    c012:	53 8d       	ldd	r21, Z+27	; 0x1b
    c014:	e9 81       	ldd	r30, Y+1	; 0x01
    c016:	fa 81       	ldd	r31, Y+2	; 0x02
    c018:	01 e0       	ldi	r16, 0x01	; 1
    c01a:	10 e0       	ldi	r17, 0x00	; 0
    c01c:	b7 01       	movw	r22, r14
    c01e:	6c 5d       	subi	r22, 0xDC	; 220
    c020:	7f 4f       	sbci	r23, 0xFF	; 255
    c022:	81 81       	ldd	r24, Z+1	; 0x01
    c024:	0e 94 90 6b 	call	0xd720	; 0xd720 <disk_write>
    c028:	89 2b       	or	r24, r25
    c02a:	09 f0       	breq	.+2      	; 0xc02e <f_sync+0x5a>
    c02c:	44 c0       	rjmp	.+136    	; 0xc0b6 <f_sync+0xe2>
    c02e:	f7 01       	movw	r30, r14
    c030:	86 85       	ldd	r24, Z+14	; 0x0e
    c032:	8f 77       	andi	r24, 0x7F	; 127
    c034:	86 87       	std	Z+14, r24	; 0x0e
    c036:	0e 94 b2 71 	call	0xe364	; 0xe364 <get_fattime>
    c03a:	4b 01       	movw	r8, r22
    c03c:	5c 01       	movw	r10, r24
    c03e:	f7 01       	movw	r30, r14
    c040:	44 8d       	ldd	r20, Z+28	; 0x1c
    c042:	55 8d       	ldd	r21, Z+29	; 0x1d
    c044:	66 8d       	ldd	r22, Z+30	; 0x1e
    c046:	77 8d       	ldd	r23, Z+31	; 0x1f
    c048:	89 81       	ldd	r24, Y+1	; 0x01
    c04a:	9a 81       	ldd	r25, Y+2	; 0x02
    c04c:	0e 94 e5 4c 	call	0x99ca	; 0x99ca <move_window>
    c050:	00 97       	sbiw	r24, 0x00	; 0
    c052:	99 f5       	brne	.+102    	; 0xc0ba <f_sync+0xe6>
    c054:	f7 01       	movw	r30, r14
    c056:	00 a1       	ldd	r16, Z+32	; 0x20
    c058:	11 a1       	ldd	r17, Z+33	; 0x21
    c05a:	f8 01       	movw	r30, r16
    c05c:	83 85       	ldd	r24, Z+11	; 0x0b
    c05e:	80 62       	ori	r24, 0x20	; 32
    c060:	83 87       	std	Z+11, r24	; 0x0b
    c062:	f7 01       	movw	r30, r14
    c064:	26 81       	ldd	r18, Z+6	; 0x06
    c066:	37 81       	ldd	r19, Z+7	; 0x07
    c068:	40 85       	ldd	r20, Z+8	; 0x08
    c06a:	51 85       	ldd	r21, Z+9	; 0x09
    c06c:	b8 01       	movw	r22, r16
    c06e:	80 81       	ld	r24, Z
    c070:	91 81       	ldd	r25, Z+1	; 0x01
    c072:	0e 94 6b 4b 	call	0x96d6	; 0x96d6 <st_clust.isra.5>
    c076:	f7 01       	movw	r30, r14
    c078:	42 85       	ldd	r20, Z+10	; 0x0a
    c07a:	53 85       	ldd	r21, Z+11	; 0x0b
    c07c:	64 85       	ldd	r22, Z+12	; 0x0c
    c07e:	75 85       	ldd	r23, Z+13	; 0x0d
    c080:	c8 01       	movw	r24, r16
    c082:	4c 96       	adiw	r24, 0x1c	; 28
    c084:	0e 94 16 48 	call	0x902c	; 0x902c <st_dword>
    c088:	b5 01       	movw	r22, r10
    c08a:	a4 01       	movw	r20, r8
    c08c:	c8 01       	movw	r24, r16
    c08e:	46 96       	adiw	r24, 0x16	; 22
    c090:	0e 94 16 48 	call	0x902c	; 0x902c <st_dword>
    c094:	f8 01       	movw	r30, r16
    c096:	12 8a       	std	Z+18, r1	; 0x12
    c098:	13 8a       	std	Z+19, r1	; 0x13
    c09a:	89 81       	ldd	r24, Y+1	; 0x01
    c09c:	9a 81       	ldd	r25, Y+2	; 0x02
    c09e:	21 e0       	ldi	r18, 0x01	; 1
    c0a0:	fc 01       	movw	r30, r24
    c0a2:	23 83       	std	Z+3, r18	; 0x03
    c0a4:	0e 94 cb 4b 	call	0x9796	; 0x9796 <sync_fs>
    c0a8:	f7 01       	movw	r30, r14
    c0aa:	26 85       	ldd	r18, Z+14	; 0x0e
    c0ac:	2f 7b       	andi	r18, 0xBF	; 191
    c0ae:	26 87       	std	Z+14, r18	; 0x0e
    c0b0:	04 c0       	rjmp	.+8      	; 0xc0ba <f_sync+0xe6>
    c0b2:	80 e0       	ldi	r24, 0x00	; 0
    c0b4:	01 c0       	rjmp	.+2      	; 0xc0b8 <f_sync+0xe4>
    c0b6:	81 e0       	ldi	r24, 0x01	; 1
    c0b8:	90 e0       	ldi	r25, 0x00	; 0
    c0ba:	0f 90       	pop	r0
    c0bc:	0f 90       	pop	r0
    c0be:	df 91       	pop	r29
    c0c0:	cf 91       	pop	r28
    c0c2:	1f 91       	pop	r17
    c0c4:	0f 91       	pop	r16
    c0c6:	ff 90       	pop	r15
    c0c8:	ef 90       	pop	r14
    c0ca:	bf 90       	pop	r11
    c0cc:	af 90       	pop	r10
    c0ce:	9f 90       	pop	r9
    c0d0:	8f 90       	pop	r8
    c0d2:	08 95       	ret

0000c0d4 <f_close>:
    c0d4:	a2 e0       	ldi	r26, 0x02	; 2
    c0d6:	b0 e0       	ldi	r27, 0x00	; 0
    c0d8:	e0 e7       	ldi	r30, 0x70	; 112
    c0da:	f0 e6       	ldi	r31, 0x60	; 96
    c0dc:	0c 94 ee e5 	jmp	0x1cbdc	; 0x1cbdc <__prologue_saves__+0x1c>
    c0e0:	8c 01       	movw	r16, r24
    c0e2:	78 df       	rcall	.-272    	; 0xbfd4 <f_sync>
    c0e4:	00 97       	sbiw	r24, 0x00	; 0
    c0e6:	59 f4       	brne	.+22     	; 0xc0fe <f_close+0x2a>
    c0e8:	be 01       	movw	r22, r28
    c0ea:	6f 5f       	subi	r22, 0xFF	; 255
    c0ec:	7f 4f       	sbci	r23, 0xFF	; 255
    c0ee:	c8 01       	movw	r24, r16
    c0f0:	0e 94 59 49 	call	0x92b2	; 0x92b2 <validate>
    c0f4:	00 97       	sbiw	r24, 0x00	; 0
    c0f6:	19 f4       	brne	.+6      	; 0xc0fe <f_close+0x2a>
    c0f8:	f8 01       	movw	r30, r16
    c0fa:	11 82       	std	Z+1, r1	; 0x01
    c0fc:	10 82       	st	Z, r1
    c0fe:	22 96       	adiw	r28, 0x02	; 2
    c100:	e4 e0       	ldi	r30, 0x04	; 4
    c102:	0c 94 0a e6 	jmp	0x1cc14	; 0x1cc14 <__epilogue_restores__+0x1c>

0000c106 <f_chdir>:
    c106:	a2 e3       	ldi	r26, 0x32	; 50
    c108:	b0 e0       	ldi	r27, 0x00	; 0
    c10a:	e9 e8       	ldi	r30, 0x89	; 137
    c10c:	f0 e6       	ldi	r31, 0x60	; 96
    c10e:	0c 94 ea e5 	jmp	0x1cbd4	; 0x1cbd4 <__prologue_saves__+0x14>
    c112:	9a ab       	std	Y+50, r25	; 0x32
    c114:	89 ab       	std	Y+49, r24	; 0x31
    c116:	40 e0       	ldi	r20, 0x00	; 0
    c118:	be 01       	movw	r22, r28
    c11a:	61 5d       	subi	r22, 0xD1	; 209
    c11c:	7f 4f       	sbci	r23, 0xFF	; 255
    c11e:	ce 01       	movw	r24, r28
    c120:	c1 96       	adiw	r24, 0x31	; 49
    c122:	0e 94 60 4d 	call	0x9ac0	; 0x9ac0 <mount_volume>
    c126:	00 97       	sbiw	r24, 0x00	; 0
    c128:	09 f0       	breq	.+2      	; 0xc12c <f_chdir+0x26>
    c12a:	44 c0       	rjmp	.+136    	; 0xc1b4 <f_chdir+0xae>
    c12c:	8f a5       	ldd	r24, Y+47	; 0x2f
    c12e:	98 a9       	ldd	r25, Y+48	; 0x30
    c130:	9a 83       	std	Y+2, r25	; 0x02
    c132:	89 83       	std	Y+1, r24	; 0x01
    c134:	80 e0       	ldi	r24, 0x00	; 0
    c136:	92 e0       	ldi	r25, 0x02	; 2
    c138:	0e 94 c4 6a 	call	0xd588	; 0xd588 <ff_memalloc>
    c13c:	7c 01       	movw	r14, r24
    c13e:	00 97       	sbiw	r24, 0x00	; 0
    c140:	a9 f1       	breq	.+106    	; 0xc1ac <f_chdir+0xa6>
    c142:	ef a5       	ldd	r30, Y+47	; 0x2f
    c144:	f8 a9       	ldd	r31, Y+48	; 0x30
    c146:	94 87       	std	Z+12, r25	; 0x0c
    c148:	83 87       	std	Z+11, r24	; 0x0b
    c14a:	69 a9       	ldd	r22, Y+49	; 0x31
    c14c:	7a a9       	ldd	r23, Y+50	; 0x32
    c14e:	ce 01       	movw	r24, r28
    c150:	01 96       	adiw	r24, 0x01	; 1
    c152:	31 d8       	rcall	.-3998   	; 0xb1b6 <follow_path>
    c154:	8c 01       	movw	r16, r24
    c156:	89 2b       	or	r24, r25
    c158:	09 f5       	brne	.+66     	; 0xc19c <f_chdir+0x96>
    c15a:	88 a5       	ldd	r24, Y+40	; 0x28
    c15c:	87 ff       	sbrs	r24, 7
    c15e:	0b c0       	rjmp	.+22     	; 0xc176 <f_chdir+0x70>
    c160:	ef a5       	ldd	r30, Y+47	; 0x2f
    c162:	f8 a9       	ldd	r31, Y+48	; 0x30
    c164:	8f 81       	ldd	r24, Y+7	; 0x07
    c166:	98 85       	ldd	r25, Y+8	; 0x08
    c168:	a9 85       	ldd	r26, Y+9	; 0x09
    c16a:	ba 85       	ldd	r27, Y+10	; 0x0a
    c16c:	85 8b       	std	Z+21, r24	; 0x15
    c16e:	96 8b       	std	Z+22, r25	; 0x16
    c170:	a7 8b       	std	Z+23, r26	; 0x17
    c172:	b0 8f       	std	Z+24, r27	; 0x18
    c174:	13 c0       	rjmp	.+38     	; 0xc19c <f_chdir+0x96>
    c176:	8d 81       	ldd	r24, Y+5	; 0x05
    c178:	84 ff       	sbrs	r24, 4
    c17a:	0e c0       	rjmp	.+28     	; 0xc198 <f_chdir+0x92>
    c17c:	cf a4       	ldd	r12, Y+47	; 0x2f
    c17e:	d8 a8       	ldd	r13, Y+48	; 0x30
    c180:	6b 8d       	ldd	r22, Y+27	; 0x1b
    c182:	7c 8d       	ldd	r23, Y+28	; 0x1c
    c184:	f6 01       	movw	r30, r12
    c186:	80 81       	ld	r24, Z
    c188:	0e 94 56 4b 	call	0x96ac	; 0x96ac <ld_clust.isra.4>
    c18c:	f6 01       	movw	r30, r12
    c18e:	65 8b       	std	Z+21, r22	; 0x15
    c190:	76 8b       	std	Z+22, r23	; 0x16
    c192:	87 8b       	std	Z+23, r24	; 0x17
    c194:	90 8f       	std	Z+24, r25	; 0x18
    c196:	02 c0       	rjmp	.+4      	; 0xc19c <f_chdir+0x96>
    c198:	05 e0       	ldi	r16, 0x05	; 5
    c19a:	10 e0       	ldi	r17, 0x00	; 0
    c19c:	c7 01       	movw	r24, r14
    c19e:	0e 94 c7 6a 	call	0xd58e	; 0xd58e <ff_memfree>
    c1a2:	04 30       	cpi	r16, 0x04	; 4
    c1a4:	11 05       	cpc	r17, r1
    c1a6:	29 f4       	brne	.+10     	; 0xc1b2 <f_chdir+0xac>
    c1a8:	85 e0       	ldi	r24, 0x05	; 5
    c1aa:	01 c0       	rjmp	.+2      	; 0xc1ae <f_chdir+0xa8>
    c1ac:	81 e1       	ldi	r24, 0x11	; 17
    c1ae:	90 e0       	ldi	r25, 0x00	; 0
    c1b0:	01 c0       	rjmp	.+2      	; 0xc1b4 <f_chdir+0xae>
    c1b2:	c8 01       	movw	r24, r16
    c1b4:	e2 96       	adiw	r28, 0x32	; 50
    c1b6:	e8 e0       	ldi	r30, 0x08	; 8
    c1b8:	0c 94 06 e6 	jmp	0x1cc0c	; 0x1cc0c <__epilogue_restores__+0x14>

0000c1bc <f_getcwd>:
    c1bc:	a8 e4       	ldi	r26, 0x48	; 72
    c1be:	b1 e0       	ldi	r27, 0x01	; 1
    c1c0:	e4 ee       	ldi	r30, 0xE4	; 228
    c1c2:	f0 e6       	ldi	r31, 0x60	; 96
    c1c4:	0c 94 e0 e5 	jmp	0x1cbc0	; 0x1cbc0 <__prologue_saves__>
    c1c8:	c9 5b       	subi	r28, 0xB9	; 185
    c1ca:	de 4f       	sbci	r29, 0xFE	; 254
    c1cc:	99 83       	std	Y+1, r25	; 0x01
    c1ce:	88 83       	st	Y, r24
    c1d0:	c7 54       	subi	r28, 0x47	; 71
    c1d2:	d1 40       	sbci	r29, 0x01	; 1
    c1d4:	4b 01       	movw	r8, r22
    c1d6:	7c 01       	movw	r14, r24
    c1d8:	fc 01       	movw	r30, r24
    c1da:	10 82       	st	Z, r1
    c1dc:	40 e0       	ldi	r20, 0x00	; 0
    c1de:	be 01       	movw	r22, r28
    c1e0:	6b 5b       	subi	r22, 0xBB	; 187
    c1e2:	7e 4f       	sbci	r23, 0xFE	; 254
    c1e4:	ce 01       	movw	r24, r28
    c1e6:	89 5b       	subi	r24, 0xB9	; 185
    c1e8:	9e 4f       	sbci	r25, 0xFE	; 254
    c1ea:	0e 94 60 4d 	call	0x9ac0	; 0x9ac0 <mount_volume>
    c1ee:	1c 01       	movw	r2, r24
    c1f0:	89 2b       	or	r24, r25
    c1f2:	09 f0       	breq	.+2      	; 0xc1f6 <f_getcwd+0x3a>
    c1f4:	03 c1       	rjmp	.+518    	; 0xc3fc <f_getcwd+0x240>
    c1f6:	cb 5b       	subi	r28, 0xBB	; 187
    c1f8:	de 4f       	sbci	r29, 0xFE	; 254
    c1fa:	88 81       	ld	r24, Y
    c1fc:	99 81       	ldd	r25, Y+1	; 0x01
    c1fe:	c5 54       	subi	r28, 0x45	; 69
    c200:	d1 40       	sbci	r29, 0x01	; 1
    c202:	c9 5e       	subi	r28, 0xE9	; 233
    c204:	de 4f       	sbci	r29, 0xFE	; 254
    c206:	99 83       	std	Y+1, r25	; 0x01
    c208:	88 83       	st	Y, r24
    c20a:	c7 51       	subi	r28, 0x17	; 23
    c20c:	d1 40       	sbci	r29, 0x01	; 1
    c20e:	80 e0       	ldi	r24, 0x00	; 0
    c210:	92 e0       	ldi	r25, 0x02	; 2
    c212:	0e 94 c4 6a 	call	0xd588	; 0xd588 <ff_memalloc>
    c216:	5c 01       	movw	r10, r24
    c218:	00 97       	sbiw	r24, 0x00	; 0
    c21a:	09 f4       	brne	.+2      	; 0xc21e <f_getcwd+0x62>
    c21c:	f3 c0       	rjmp	.+486    	; 0xc404 <f_getcwd+0x248>
    c21e:	cb 5b       	subi	r28, 0xBB	; 187
    c220:	de 4f       	sbci	r29, 0xFE	; 254
    c222:	e8 81       	ld	r30, Y
    c224:	f9 81       	ldd	r31, Y+1	; 0x01
    c226:	c5 54       	subi	r28, 0x45	; 69
    c228:	d1 40       	sbci	r29, 0x01	; 1
    c22a:	94 87       	std	Z+12, r25	; 0x0c
    c22c:	83 87       	std	Z+11, r24	; 0x0b
    c22e:	85 89       	ldd	r24, Z+21	; 0x15
    c230:	96 89       	ldd	r25, Z+22	; 0x16
    c232:	a7 89       	ldd	r26, Z+23	; 0x17
    c234:	b0 8d       	ldd	r27, Z+24	; 0x18
    c236:	c3 5e       	subi	r28, 0xE3	; 227
    c238:	de 4f       	sbci	r29, 0xFE	; 254
    c23a:	88 83       	st	Y, r24
    c23c:	99 83       	std	Y+1, r25	; 0x01
    c23e:	aa 83       	std	Y+2, r26	; 0x02
    c240:	bb 83       	std	Y+3, r27	; 0x03
    c242:	cd 51       	subi	r28, 0x1D	; 29
    c244:	d1 40       	sbci	r29, 0x01	; 1
    c246:	84 01       	movw	r16, r8
    c248:	ce 01       	movw	r24, r28
    c24a:	01 96       	adiw	r24, 0x01	; 1
    c24c:	6c 01       	movw	r12, r24
    c24e:	c3 5e       	subi	r28, 0xE3	; 227
    c250:	de 4f       	sbci	r29, 0xFE	; 254
    c252:	48 80       	ld	r4, Y
    c254:	59 80       	ldd	r5, Y+1	; 0x01
    c256:	6a 80       	ldd	r6, Y+2	; 0x02
    c258:	7b 80       	ldd	r7, Y+3	; 0x03
    c25a:	cd 51       	subi	r28, 0x1D	; 29
    c25c:	d1 40       	sbci	r29, 0x01	; 1
    c25e:	41 14       	cp	r4, r1
    c260:	51 04       	cpc	r5, r1
    c262:	61 04       	cpc	r6, r1
    c264:	71 04       	cpc	r7, r1
    c266:	09 f4       	brne	.+2      	; 0xc26a <f_getcwd+0xae>
    c268:	a3 c0       	rjmp	.+326    	; 0xc3b0 <f_getcwd+0x1f4>
    c26a:	40 e2       	ldi	r20, 0x20	; 32
    c26c:	50 e0       	ldi	r21, 0x00	; 0
    c26e:	60 e0       	ldi	r22, 0x00	; 0
    c270:	70 e0       	ldi	r23, 0x00	; 0
    c272:	ce 01       	movw	r24, r28
    c274:	89 5e       	subi	r24, 0xE9	; 233
    c276:	9e 4f       	sbci	r25, 0xFE	; 254
    c278:	0e 94 75 51 	call	0xa2ea	; 0xa2ea <dir_sdi>
    c27c:	00 97       	sbiw	r24, 0x00	; 0
    c27e:	09 f0       	breq	.+2      	; 0xc282 <f_getcwd+0xc6>
    c280:	c6 c0       	rjmp	.+396    	; 0xc40e <f_getcwd+0x252>
    c282:	c3 5d       	subi	r28, 0xD3	; 211
    c284:	de 4f       	sbci	r29, 0xFE	; 254
    c286:	48 81       	ld	r20, Y
    c288:	59 81       	ldd	r21, Y+1	; 0x01
    c28a:	6a 81       	ldd	r22, Y+2	; 0x02
    c28c:	7b 81       	ldd	r23, Y+3	; 0x03
    c28e:	cd 52       	subi	r28, 0x2D	; 45
    c290:	d1 40       	sbci	r29, 0x01	; 1
    c292:	cb 5b       	subi	r28, 0xBB	; 187
    c294:	de 4f       	sbci	r29, 0xFE	; 254
    c296:	88 81       	ld	r24, Y
    c298:	99 81       	ldd	r25, Y+1	; 0x01
    c29a:	c5 54       	subi	r28, 0x45	; 69
    c29c:	d1 40       	sbci	r29, 0x01	; 1
    c29e:	0e 94 e5 4c 	call	0x99ca	; 0x99ca <move_window>
    c2a2:	00 97       	sbiw	r24, 0x00	; 0
    c2a4:	09 f0       	breq	.+2      	; 0xc2a8 <f_getcwd+0xec>
    c2a6:	b3 c0       	rjmp	.+358    	; 0xc40e <f_getcwd+0x252>
    c2a8:	cf 5c       	subi	r28, 0xCF	; 207
    c2aa:	de 4f       	sbci	r29, 0xFE	; 254
    c2ac:	68 81       	ld	r22, Y
    c2ae:	79 81       	ldd	r23, Y+1	; 0x01
    c2b0:	c1 53       	subi	r28, 0x31	; 49
    c2b2:	d1 40       	sbci	r29, 0x01	; 1
    c2b4:	cb 5b       	subi	r28, 0xBB	; 187
    c2b6:	de 4f       	sbci	r29, 0xFE	; 254
    c2b8:	e8 81       	ld	r30, Y
    c2ba:	f9 81       	ldd	r31, Y+1	; 0x01
    c2bc:	c5 54       	subi	r28, 0x45	; 69
    c2be:	d1 40       	sbci	r29, 0x01	; 1
    c2c0:	80 81       	ld	r24, Z
    c2c2:	0e 94 56 4b 	call	0x96ac	; 0x96ac <ld_clust.isra.4>
    c2c6:	c3 5e       	subi	r28, 0xE3	; 227
    c2c8:	de 4f       	sbci	r29, 0xFE	; 254
    c2ca:	68 83       	st	Y, r22
    c2cc:	79 83       	std	Y+1, r23	; 0x01
    c2ce:	8a 83       	std	Y+2, r24	; 0x02
    c2d0:	9b 83       	std	Y+3, r25	; 0x03
    c2d2:	cd 51       	subi	r28, 0x1D	; 29
    c2d4:	d1 40       	sbci	r29, 0x01	; 1
    c2d6:	40 e0       	ldi	r20, 0x00	; 0
    c2d8:	50 e0       	ldi	r21, 0x00	; 0
    c2da:	ba 01       	movw	r22, r20
    c2dc:	ce 01       	movw	r24, r28
    c2de:	89 5e       	subi	r24, 0xE9	; 233
    c2e0:	9e 4f       	sbci	r25, 0xFE	; 254
    c2e2:	0e 94 75 51 	call	0xa2ea	; 0xa2ea <dir_sdi>
    c2e6:	00 97       	sbiw	r24, 0x00	; 0
    c2e8:	09 f0       	breq	.+2      	; 0xc2ec <f_getcwd+0x130>
    c2ea:	91 c0       	rjmp	.+290    	; 0xc40e <f_getcwd+0x252>
    c2ec:	60 e0       	ldi	r22, 0x00	; 0
    c2ee:	70 e0       	ldi	r23, 0x00	; 0
    c2f0:	ce 01       	movw	r24, r28
    c2f2:	89 5e       	subi	r24, 0xE9	; 233
    c2f4:	9e 4f       	sbci	r25, 0xFE	; 254
    c2f6:	0e 94 0f 55 	call	0xaa1e	; 0xaa1e <dir_read>
    c2fa:	00 97       	sbiw	r24, 0x00	; 0
    c2fc:	09 f0       	breq	.+2      	; 0xc300 <f_getcwd+0x144>
    c2fe:	89 c0       	rjmp	.+274    	; 0xc412 <f_getcwd+0x256>
    c300:	cf 5c       	subi	r28, 0xCF	; 207
    c302:	de 4f       	sbci	r29, 0xFE	; 254
    c304:	68 81       	ld	r22, Y
    c306:	79 81       	ldd	r23, Y+1	; 0x01
    c308:	c1 53       	subi	r28, 0x31	; 49
    c30a:	d1 40       	sbci	r29, 0x01	; 1
    c30c:	cb 5b       	subi	r28, 0xBB	; 187
    c30e:	de 4f       	sbci	r29, 0xFE	; 254
    c310:	e8 81       	ld	r30, Y
    c312:	f9 81       	ldd	r31, Y+1	; 0x01
    c314:	c5 54       	subi	r28, 0x45	; 69
    c316:	d1 40       	sbci	r29, 0x01	; 1
    c318:	80 81       	ld	r24, Z
    c31a:	0e 94 56 4b 	call	0x96ac	; 0x96ac <ld_clust.isra.4>
    c31e:	46 16       	cp	r4, r22
    c320:	57 06       	cpc	r5, r23
    c322:	68 06       	cpc	r6, r24
    c324:	79 06       	cpc	r7, r25
    c326:	41 f4       	brne	.+16     	; 0xc338 <f_getcwd+0x17c>
    c328:	b6 01       	movw	r22, r12
    c32a:	ce 01       	movw	r24, r28
    c32c:	89 5e       	subi	r24, 0xE9	; 233
    c32e:	9e 4f       	sbci	r25, 0xFE	; 254
    c330:	0e 94 3d 4a 	call	0x947a	; 0x947a <get_fileinfo>
    c334:	f6 01       	movw	r30, r12
    c336:	0a c0       	rjmp	.+20     	; 0xc34c <f_getcwd+0x190>
    c338:	60 e0       	ldi	r22, 0x00	; 0
    c33a:	70 e0       	ldi	r23, 0x00	; 0
    c33c:	ce 01       	movw	r24, r28
    c33e:	89 5e       	subi	r24, 0xE9	; 233
    c340:	9e 4f       	sbci	r25, 0xFE	; 254
    c342:	0e 94 ed 53 	call	0xa7da	; 0xa7da <dir_next>
    c346:	00 97       	sbiw	r24, 0x00	; 0
    c348:	89 f2       	breq	.-94     	; 0xc2ec <f_getcwd+0x130>
    c34a:	63 c0       	rjmp	.+198    	; 0xc412 <f_getcwd+0x256>
    c34c:	cf 01       	movw	r24, r30
    c34e:	8c 19       	sub	r24, r12
    c350:	9d 09       	sbc	r25, r13
    c352:	31 96       	adiw	r30, 0x01	; 1
    c354:	25 89       	ldd	r18, Z+21	; 0x15
    c356:	21 11       	cpse	r18, r1
    c358:	f9 cf       	rjmp	.-14     	; 0xc34c <f_getcwd+0x190>
    c35a:	9c 01       	movw	r18, r24
    c35c:	2f 5f       	subi	r18, 0xFF	; 255
    c35e:	3f 4f       	sbci	r19, 0xFF	; 255
    c360:	02 17       	cp	r16, r18
    c362:	13 07       	cpc	r17, r19
    c364:	08 f4       	brcc	.+2      	; 0xc368 <f_getcwd+0x1ac>
    c366:	51 c0       	rjmp	.+162    	; 0xc40a <f_getcwd+0x24e>
    c368:	f6 01       	movw	r30, r12
    c36a:	e8 0f       	add	r30, r24
    c36c:	f9 1f       	adc	r31, r25
    c36e:	98 01       	movw	r18, r16
    c370:	ce 16       	cp	r12, r30
    c372:	df 06       	cpc	r13, r31
    c374:	71 f0       	breq	.+28     	; 0xc392 <f_getcwd+0x1d6>
    c376:	21 50       	subi	r18, 0x01	; 1
    c378:	31 09       	sbc	r19, r1
    c37a:	45 89       	ldd	r20, Z+21	; 0x15
    c37c:	c9 5b       	subi	r28, 0xB9	; 185
    c37e:	de 4f       	sbci	r29, 0xFE	; 254
    c380:	a8 81       	ld	r26, Y
    c382:	b9 81       	ldd	r27, Y+1	; 0x01
    c384:	c7 54       	subi	r28, 0x47	; 71
    c386:	d1 40       	sbci	r29, 0x01	; 1
    c388:	a2 0f       	add	r26, r18
    c38a:	b3 1f       	adc	r27, r19
    c38c:	4c 93       	st	X, r20
    c38e:	31 97       	sbiw	r30, 0x01	; 1
    c390:	ef cf       	rjmp	.-34     	; 0xc370 <f_getcwd+0x1b4>
    c392:	80 95       	com	r24
    c394:	90 95       	com	r25
    c396:	08 0f       	add	r16, r24
    c398:	19 1f       	adc	r17, r25
    c39a:	c9 5b       	subi	r28, 0xB9	; 185
    c39c:	de 4f       	sbci	r29, 0xFE	; 254
    c39e:	e8 81       	ld	r30, Y
    c3a0:	f9 81       	ldd	r31, Y+1	; 0x01
    c3a2:	c7 54       	subi	r28, 0x47	; 71
    c3a4:	d1 40       	sbci	r29, 0x01	; 1
    c3a6:	e0 0f       	add	r30, r16
    c3a8:	f1 1f       	adc	r31, r17
    c3aa:	9f e2       	ldi	r25, 0x2F	; 47
    c3ac:	90 83       	st	Z, r25
    c3ae:	4f cf       	rjmp	.-354    	; 0xc24e <f_getcwd+0x92>
    c3b0:	08 15       	cp	r16, r8
    c3b2:	19 05       	cpc	r17, r9
    c3b4:	61 f4       	brne	.+24     	; 0xc3ce <f_getcwd+0x212>
    c3b6:	01 50       	subi	r16, 0x01	; 1
    c3b8:	11 09       	sbc	r17, r1
    c3ba:	c9 5b       	subi	r28, 0xB9	; 185
    c3bc:	de 4f       	sbci	r29, 0xFE	; 254
    c3be:	e8 81       	ld	r30, Y
    c3c0:	f9 81       	ldd	r31, Y+1	; 0x01
    c3c2:	c7 54       	subi	r28, 0x47	; 71
    c3c4:	d1 40       	sbci	r29, 0x01	; 1
    c3c6:	e0 0f       	add	r30, r16
    c3c8:	f1 1f       	adc	r31, r17
    c3ca:	8f e2       	ldi	r24, 0x2F	; 47
    c3cc:	80 83       	st	Z, r24
    c3ce:	ef ef       	ldi	r30, 0xFF	; 255
    c3d0:	ee 1a       	sub	r14, r30
    c3d2:	fe 0a       	sbc	r15, r30
    c3d4:	c9 5b       	subi	r28, 0xB9	; 185
    c3d6:	de 4f       	sbci	r29, 0xFE	; 254
    c3d8:	e8 81       	ld	r30, Y
    c3da:	f9 81       	ldd	r31, Y+1	; 0x01
    c3dc:	c7 54       	subi	r28, 0x47	; 71
    c3de:	d1 40       	sbci	r29, 0x01	; 1
    c3e0:	e0 0f       	add	r30, r16
    c3e2:	f1 1f       	adc	r31, r17
    c3e4:	80 81       	ld	r24, Z
    c3e6:	f7 01       	movw	r30, r14
    c3e8:	31 97       	sbiw	r30, 0x01	; 1
    c3ea:	80 83       	st	Z, r24
    c3ec:	0f 5f       	subi	r16, 0xFF	; 255
    c3ee:	1f 4f       	sbci	r17, 0xFF	; 255
    c3f0:	08 15       	cp	r16, r8
    c3f2:	19 05       	cpc	r17, r9
    c3f4:	60 f3       	brcs	.-40     	; 0xc3ce <f_getcwd+0x212>
    c3f6:	c5 01       	movw	r24, r10
    c3f8:	0e 94 c7 6a 	call	0xd58e	; 0xd58e <ff_memfree>
    c3fc:	f7 01       	movw	r30, r14
    c3fe:	10 82       	st	Z, r1
    c400:	c1 01       	movw	r24, r2
    c402:	0d c0       	rjmp	.+26     	; 0xc41e <f_getcwd+0x262>
    c404:	81 e1       	ldi	r24, 0x11	; 17
    c406:	90 e0       	ldi	r25, 0x00	; 0
    c408:	0a c0       	rjmp	.+20     	; 0xc41e <f_getcwd+0x262>
    c40a:	81 e1       	ldi	r24, 0x11	; 17
    c40c:	90 e0       	ldi	r25, 0x00	; 0
    c40e:	1c 01       	movw	r2, r24
    c410:	f2 cf       	rjmp	.-28     	; 0xc3f6 <f_getcwd+0x23a>
    c412:	84 30       	cpi	r24, 0x04	; 4
    c414:	91 05       	cpc	r25, r1
    c416:	d9 f7       	brne	.-10     	; 0xc40e <f_getcwd+0x252>
    c418:	82 e0       	ldi	r24, 0x02	; 2
    c41a:	90 e0       	ldi	r25, 0x00	; 0
    c41c:	f8 cf       	rjmp	.-16     	; 0xc40e <f_getcwd+0x252>
    c41e:	c8 5b       	subi	r28, 0xB8	; 184
    c420:	de 4f       	sbci	r29, 0xFE	; 254
    c422:	e2 e1       	ldi	r30, 0x12	; 18
    c424:	0c 94 fc e5 	jmp	0x1cbf8	; 0x1cbf8 <__epilogue_restores__>

0000c428 <f_lseek>:
    c428:	aa e0       	ldi	r26, 0x0A	; 10
    c42a:	b0 e0       	ldi	r27, 0x00	; 0
    c42c:	ea e1       	ldi	r30, 0x1A	; 26
    c42e:	f2 e6       	ldi	r31, 0x62	; 98
    c430:	0c 94 e0 e5 	jmp	0x1cbc0	; 0x1cbc0 <__prologue_saves__>
    c434:	1c 01       	movw	r2, r24
    c436:	6a 01       	movw	r12, r20
    c438:	7b 01       	movw	r14, r22
    c43a:	be 01       	movw	r22, r28
    c43c:	6f 5f       	subi	r22, 0xFF	; 255
    c43e:	7f 4f       	sbci	r23, 0xFF	; 255
    c440:	0e 94 59 49 	call	0x92b2	; 0x92b2 <validate>
    c444:	00 97       	sbiw	r24, 0x00	; 0
    c446:	09 f0       	breq	.+2      	; 0xc44a <f_lseek+0x22>
    c448:	c6 c2       	rjmp	.+1420   	; 0xc9d6 <f_lseek+0x5ae>
    c44a:	d1 01       	movw	r26, r2
    c44c:	1f 96       	adiw	r26, 0x0f	; 15
    c44e:	8c 91       	ld	r24, X
    c450:	1f 97       	sbiw	r26, 0x0f	; 15
    c452:	90 e0       	ldi	r25, 0x00	; 0
    c454:	00 97       	sbiw	r24, 0x00	; 0
    c456:	09 f0       	breq	.+2      	; 0xc45a <f_lseek+0x32>
    c458:	be c2       	rjmp	.+1404   	; 0xc9d6 <f_lseek+0x5ae>
    c45a:	92 96       	adiw	r26, 0x22	; 34
    c45c:	ed 91       	ld	r30, X+
    c45e:	fc 91       	ld	r31, X
    c460:	93 97       	sbiw	r26, 0x23	; 35
    c462:	30 97       	sbiw	r30, 0x00	; 0
    c464:	09 f4       	brne	.+2      	; 0xc468 <f_lseek+0x40>
    c466:	3a c1       	rjmp	.+628    	; 0xc6dc <f_lseek+0x2b4>
    c468:	bf ef       	ldi	r27, 0xFF	; 255
    c46a:	cb 16       	cp	r12, r27
    c46c:	db 06       	cpc	r13, r27
    c46e:	eb 06       	cpc	r14, r27
    c470:	fb 06       	cpc	r15, r27
    c472:	09 f0       	breq	.+2      	; 0xc476 <f_lseek+0x4e>
    c474:	9f c0       	rjmp	.+318    	; 0xc5b4 <f_lseek+0x18c>
    c476:	8f 01       	movw	r16, r30
    c478:	0c 5f       	subi	r16, 0xFC	; 252
    c47a:	1f 4f       	sbci	r17, 0xFF	; 255
    c47c:	20 81       	ld	r18, Z
    c47e:	31 81       	ldd	r19, Z+1	; 0x01
    c480:	42 81       	ldd	r20, Z+2	; 0x02
    c482:	53 81       	ldd	r21, Z+3	; 0x03
    c484:	2f 83       	std	Y+7, r18	; 0x07
    c486:	38 87       	std	Y+8, r19	; 0x08
    c488:	49 87       	std	Y+9, r20	; 0x09
    c48a:	5a 87       	std	Y+10, r21	; 0x0a
    c48c:	d1 01       	movw	r26, r2
    c48e:	16 96       	adiw	r26, 0x06	; 6
    c490:	8d 90       	ld	r8, X+
    c492:	9d 90       	ld	r9, X+
    c494:	ad 90       	ld	r10, X+
    c496:	bc 90       	ld	r11, X
    c498:	19 97       	sbiw	r26, 0x09	; 9
    c49a:	52 e0       	ldi	r21, 0x02	; 2
    c49c:	c5 2e       	mov	r12, r21
    c49e:	d1 2c       	mov	r13, r1
    c4a0:	e1 2c       	mov	r14, r1
    c4a2:	f1 2c       	mov	r15, r1
    c4a4:	81 14       	cp	r8, r1
    c4a6:	91 04       	cpc	r9, r1
    c4a8:	a1 04       	cpc	r10, r1
    c4aa:	b1 04       	cpc	r11, r1
    c4ac:	09 f4       	brne	.+2      	; 0xc4b0 <f_lseek+0x88>
    c4ae:	68 c0       	rjmp	.+208    	; 0xc580 <f_lseek+0x158>
    c4b0:	24 01       	movw	r4, r8
    c4b2:	35 01       	movw	r6, r10
    c4b4:	1b 82       	std	Y+3, r1	; 0x03
    c4b6:	1c 82       	std	Y+4, r1	; 0x04
    c4b8:	1d 82       	std	Y+5, r1	; 0x05
    c4ba:	1e 82       	std	Y+6, r1	; 0x06
    c4bc:	2b 81       	ldd	r18, Y+3	; 0x03
    c4be:	3c 81       	ldd	r19, Y+4	; 0x04
    c4c0:	4d 81       	ldd	r20, Y+5	; 0x05
    c4c2:	5e 81       	ldd	r21, Y+6	; 0x06
    c4c4:	2f 5f       	subi	r18, 0xFF	; 255
    c4c6:	3f 4f       	sbci	r19, 0xFF	; 255
    c4c8:	4f 4f       	sbci	r20, 0xFF	; 255
    c4ca:	5f 4f       	sbci	r21, 0xFF	; 255
    c4cc:	2b 83       	std	Y+3, r18	; 0x03
    c4ce:	3c 83       	std	Y+4, r19	; 0x04
    c4d0:	4d 83       	std	Y+5, r20	; 0x05
    c4d2:	5e 83       	std	Y+6, r21	; 0x06
    c4d4:	b3 01       	movw	r22, r6
    c4d6:	a2 01       	movw	r20, r4
    c4d8:	d1 01       	movw	r26, r2
    c4da:	8d 91       	ld	r24, X+
    c4dc:	9c 91       	ld	r25, X
    c4de:	0e 94 c1 50 	call	0xa182	; 0xa182 <get_fat.isra.10>
    c4e2:	62 30       	cpi	r22, 0x02	; 2
    c4e4:	71 05       	cpc	r23, r1
    c4e6:	81 05       	cpc	r24, r1
    c4e8:	91 05       	cpc	r25, r1
    c4ea:	20 f4       	brcc	.+8      	; 0xc4f4 <f_lseek+0xcc>
    c4ec:	82 e0       	ldi	r24, 0x02	; 2
    c4ee:	f1 01       	movw	r30, r2
    c4f0:	87 87       	std	Z+15, r24	; 0x0f
    c4f2:	0a c0       	rjmp	.+20     	; 0xc508 <f_lseek+0xe0>
    c4f4:	6f 3f       	cpi	r22, 0xFF	; 255
    c4f6:	ff ef       	ldi	r31, 0xFF	; 255
    c4f8:	7f 07       	cpc	r23, r31
    c4fa:	8f 07       	cpc	r24, r31
    c4fc:	9f 07       	cpc	r25, r31
    c4fe:	31 f4       	brne	.+12     	; 0xc50c <f_lseek+0xe4>
    c500:	81 e0       	ldi	r24, 0x01	; 1
    c502:	d1 01       	movw	r26, r2
    c504:	1f 96       	adiw	r26, 0x0f	; 15
    c506:	8c 93       	st	X, r24
    c508:	90 e0       	ldi	r25, 0x00	; 0
    c50a:	65 c2       	rjmp	.+1226   	; 0xc9d6 <f_lseek+0x5ae>
    c50c:	a3 01       	movw	r20, r6
    c50e:	92 01       	movw	r18, r4
    c510:	2f 5f       	subi	r18, 0xFF	; 255
    c512:	3f 4f       	sbci	r19, 0xFF	; 255
    c514:	4f 4f       	sbci	r20, 0xFF	; 255
    c516:	5f 4f       	sbci	r21, 0xFF	; 255
    c518:	2b 01       	movw	r4, r22
    c51a:	3c 01       	movw	r6, r24
    c51c:	62 17       	cp	r22, r18
    c51e:	73 07       	cpc	r23, r19
    c520:	84 07       	cpc	r24, r20
    c522:	95 07       	cpc	r25, r21
    c524:	59 f2       	breq	.-106    	; 0xc4bc <f_lseek+0x94>
    c526:	b2 e0       	ldi	r27, 0x02	; 2
    c528:	cb 0e       	add	r12, r27
    c52a:	d1 1c       	adc	r13, r1
    c52c:	e1 1c       	adc	r14, r1
    c52e:	f1 1c       	adc	r15, r1
    c530:	2f 81       	ldd	r18, Y+7	; 0x07
    c532:	38 85       	ldd	r19, Y+8	; 0x08
    c534:	49 85       	ldd	r20, Y+9	; 0x09
    c536:	5a 85       	ldd	r21, Y+10	; 0x0a
    c538:	2c 15       	cp	r18, r12
    c53a:	3d 05       	cpc	r19, r13
    c53c:	4e 05       	cpc	r20, r14
    c53e:	5f 05       	cpc	r21, r15
    c540:	88 f0       	brcs	.+34     	; 0xc564 <f_lseek+0x13c>
    c542:	2b 81       	ldd	r18, Y+3	; 0x03
    c544:	3c 81       	ldd	r19, Y+4	; 0x04
    c546:	4d 81       	ldd	r20, Y+5	; 0x05
    c548:	5e 81       	ldd	r21, Y+6	; 0x06
    c54a:	d8 01       	movw	r26, r16
    c54c:	2d 93       	st	X+, r18
    c54e:	3d 93       	st	X+, r19
    c550:	4d 93       	st	X+, r20
    c552:	5c 93       	st	X, r21
    c554:	13 97       	sbiw	r26, 0x03	; 3
    c556:	f8 01       	movw	r30, r16
    c558:	84 82       	std	Z+4, r8	; 0x04
    c55a:	95 82       	std	Z+5, r9	; 0x05
    c55c:	a6 82       	std	Z+6, r10	; 0x06
    c55e:	b7 82       	std	Z+7, r11	; 0x07
    c560:	08 5f       	subi	r16, 0xF8	; 248
    c562:	1f 4f       	sbci	r17, 0xFF	; 255
    c564:	e9 81       	ldd	r30, Y+1	; 0x01
    c566:	fa 81       	ldd	r31, Y+2	; 0x02
    c568:	81 8c       	ldd	r8, Z+25	; 0x19
    c56a:	92 8c       	ldd	r9, Z+26	; 0x1a
    c56c:	a3 8c       	ldd	r10, Z+27	; 0x1b
    c56e:	b4 8c       	ldd	r11, Z+28	; 0x1c
    c570:	68 15       	cp	r22, r8
    c572:	79 05       	cpc	r23, r9
    c574:	8a 05       	cpc	r24, r10
    c576:	9b 05       	cpc	r25, r11
    c578:	18 f4       	brcc	.+6      	; 0xc580 <f_lseek+0x158>
    c57a:	4b 01       	movw	r8, r22
    c57c:	5c 01       	movw	r10, r24
    c57e:	98 cf       	rjmp	.-208    	; 0xc4b0 <f_lseek+0x88>
    c580:	d1 01       	movw	r26, r2
    c582:	92 96       	adiw	r26, 0x22	; 34
    c584:	ed 91       	ld	r30, X+
    c586:	fc 91       	ld	r31, X
    c588:	93 97       	sbiw	r26, 0x23	; 35
    c58a:	c0 82       	st	Z, r12
    c58c:	d1 82       	std	Z+1, r13	; 0x01
    c58e:	e2 82       	std	Z+2, r14	; 0x02
    c590:	f3 82       	std	Z+3, r15	; 0x03
    c592:	2f 81       	ldd	r18, Y+7	; 0x07
    c594:	38 85       	ldd	r19, Y+8	; 0x08
    c596:	49 85       	ldd	r20, Y+9	; 0x09
    c598:	5a 85       	ldd	r21, Y+10	; 0x0a
    c59a:	2c 15       	cp	r18, r12
    c59c:	3d 05       	cpc	r19, r13
    c59e:	4e 05       	cpc	r20, r14
    c5a0:	5f 05       	cpc	r21, r15
    c5a2:	08 f4       	brcc	.+2      	; 0xc5a6 <f_lseek+0x17e>
    c5a4:	0f c2       	rjmp	.+1054   	; 0xc9c4 <f_lseek+0x59c>
    c5a6:	d8 01       	movw	r26, r16
    c5a8:	1d 92       	st	X+, r1
    c5aa:	1d 92       	st	X+, r1
    c5ac:	1d 92       	st	X+, r1
    c5ae:	1c 92       	st	X, r1
    c5b0:	13 97       	sbiw	r26, 0x03	; 3
    c5b2:	06 c2       	rjmp	.+1036   	; 0xc9c0 <f_lseek+0x598>
    c5b4:	f1 01       	movw	r30, r2
    c5b6:	82 85       	ldd	r24, Z+10	; 0x0a
    c5b8:	93 85       	ldd	r25, Z+11	; 0x0b
    c5ba:	a4 85       	ldd	r26, Z+12	; 0x0c
    c5bc:	b5 85       	ldd	r27, Z+13	; 0x0d
    c5be:	46 01       	movw	r8, r12
    c5c0:	57 01       	movw	r10, r14
    c5c2:	8c 15       	cp	r24, r12
    c5c4:	9d 05       	cpc	r25, r13
    c5c6:	ae 05       	cpc	r26, r14
    c5c8:	bf 05       	cpc	r27, r15
    c5ca:	10 f4       	brcc	.+4      	; 0xc5d0 <f_lseek+0x1a8>
    c5cc:	4c 01       	movw	r8, r24
    c5ce:	5d 01       	movw	r10, r26
    c5d0:	d1 01       	movw	r26, r2
    c5d2:	50 96       	adiw	r26, 0x10	; 16
    c5d4:	8d 92       	st	X+, r8
    c5d6:	9d 92       	st	X+, r9
    c5d8:	ad 92       	st	X+, r10
    c5da:	bc 92       	st	X, r11
    c5dc:	53 97       	sbiw	r26, 0x13	; 19
    c5de:	81 14       	cp	r8, r1
    c5e0:	91 04       	cpc	r9, r1
    c5e2:	a1 04       	cpc	r10, r1
    c5e4:	b1 04       	cpc	r11, r1
    c5e6:	09 f4       	brne	.+2      	; 0xc5ea <f_lseek+0x1c2>
    c5e8:	eb c1       	rjmp	.+982    	; 0xc9c0 <f_lseek+0x598>
    c5ea:	24 01       	movw	r4, r8
    c5ec:	35 01       	movw	r6, r10
    c5ee:	b1 e0       	ldi	r27, 0x01	; 1
    c5f0:	4b 1a       	sub	r4, r27
    c5f2:	51 08       	sbc	r5, r1
    c5f4:	61 08       	sbc	r6, r1
    c5f6:	71 08       	sbc	r7, r1
    c5f8:	b3 01       	movw	r22, r6
    c5fa:	a2 01       	movw	r20, r4
    c5fc:	c1 01       	movw	r24, r2
    c5fe:	0e 94 e2 48 	call	0x91c4	; 0x91c4 <clmt_clust>
    c602:	ab 01       	movw	r20, r22
    c604:	bc 01       	movw	r22, r24
    c606:	f1 01       	movw	r30, r2
    c608:	44 8b       	std	Z+20, r20	; 0x14
    c60a:	55 8b       	std	Z+21, r21	; 0x15
    c60c:	66 8b       	std	Z+22, r22	; 0x16
    c60e:	77 8b       	std	Z+23, r23	; 0x17
    c610:	e9 80       	ldd	r14, Y+1	; 0x01
    c612:	fa 80       	ldd	r15, Y+2	; 0x02
    c614:	c7 01       	movw	r24, r14
    c616:	0e 94 ba 48 	call	0x9174	; 0x9174 <clst2sect>
    c61a:	61 15       	cp	r22, r1
    c61c:	71 05       	cpc	r23, r1
    c61e:	81 05       	cpc	r24, r1
    c620:	91 05       	cpc	r25, r1
    c622:	09 f4       	brne	.+2      	; 0xc626 <f_lseek+0x1fe>
    c624:	63 cf       	rjmp	.-314    	; 0xc4ec <f_lseek+0xc4>
    c626:	95 01       	movw	r18, r10
    c628:	84 01       	movw	r16, r8
    c62a:	11 70       	andi	r17, 0x01	; 1
    c62c:	22 27       	eor	r18, r18
    c62e:	33 27       	eor	r19, r19
    c630:	01 15       	cp	r16, r1
    c632:	11 05       	cpc	r17, r1
    c634:	21 05       	cpc	r18, r1
    c636:	31 05       	cpc	r19, r1
    c638:	09 f4       	brne	.+2      	; 0xc63c <f_lseek+0x214>
    c63a:	c2 c1       	rjmp	.+900    	; 0xc9c0 <f_lseek+0x598>
    c63c:	d7 01       	movw	r26, r14
    c63e:	19 96       	adiw	r26, 0x09	; 9
    c640:	8d 90       	ld	r8, X+
    c642:	9c 90       	ld	r9, X
    c644:	1a 97       	sbiw	r26, 0x0a	; 10
    c646:	b1 e0       	ldi	r27, 0x01	; 1
    c648:	8b 1a       	sub	r8, r27
    c64a:	91 08       	sbc	r9, r1
    c64c:	a1 2c       	mov	r10, r1
    c64e:	b1 2c       	mov	r11, r1
    c650:	49 e0       	ldi	r20, 0x09	; 9
    c652:	76 94       	lsr	r7
    c654:	67 94       	ror	r6
    c656:	57 94       	ror	r5
    c658:	47 94       	ror	r4
    c65a:	4a 95       	dec	r20
    c65c:	d1 f7       	brne	.-12     	; 0xc652 <f_lseek+0x22a>
    c65e:	48 20       	and	r4, r8
    c660:	59 20       	and	r5, r9
    c662:	6a 20       	and	r6, r10
    c664:	7b 20       	and	r7, r11
    c666:	53 01       	movw	r10, r6
    c668:	42 01       	movw	r8, r4
    c66a:	86 0e       	add	r8, r22
    c66c:	97 1e       	adc	r9, r23
    c66e:	a8 1e       	adc	r10, r24
    c670:	b9 1e       	adc	r11, r25
    c672:	f1 01       	movw	r30, r2
    c674:	20 8d       	ldd	r18, Z+24	; 0x18
    c676:	31 8d       	ldd	r19, Z+25	; 0x19
    c678:	42 8d       	ldd	r20, Z+26	; 0x1a
    c67a:	53 8d       	ldd	r21, Z+27	; 0x1b
    c67c:	82 16       	cp	r8, r18
    c67e:	93 06       	cpc	r9, r19
    c680:	a4 06       	cpc	r10, r20
    c682:	b5 06       	cpc	r11, r21
    c684:	09 f4       	brne	.+2      	; 0xc688 <f_lseek+0x260>
    c686:	9c c1       	rjmp	.+824    	; 0xc9c0 <f_lseek+0x598>
    c688:	86 85       	ldd	r24, Z+14	; 0x0e
    c68a:	b1 01       	movw	r22, r2
    c68c:	6c 5d       	subi	r22, 0xDC	; 220
    c68e:	7f 4f       	sbci	r23, 0xFF	; 255
    c690:	6b 01       	movw	r12, r22
    c692:	87 ff       	sbrs	r24, 7
    c694:	0e c0       	rjmp	.+28     	; 0xc6b2 <f_lseek+0x28a>
    c696:	01 e0       	ldi	r16, 0x01	; 1
    c698:	10 e0       	ldi	r17, 0x00	; 0
    c69a:	d7 01       	movw	r26, r14
    c69c:	11 96       	adiw	r26, 0x01	; 1
    c69e:	8c 91       	ld	r24, X
    c6a0:	0e 94 90 6b 	call	0xd720	; 0xd720 <disk_write>
    c6a4:	89 2b       	or	r24, r25
    c6a6:	09 f0       	breq	.+2      	; 0xc6aa <f_lseek+0x282>
    c6a8:	2b cf       	rjmp	.-426    	; 0xc500 <f_lseek+0xd8>
    c6aa:	f1 01       	movw	r30, r2
    c6ac:	86 85       	ldd	r24, Z+14	; 0x0e
    c6ae:	8f 77       	andi	r24, 0x7F	; 127
    c6b0:	86 87       	std	Z+14, r24	; 0x0e
    c6b2:	e9 81       	ldd	r30, Y+1	; 0x01
    c6b4:	fa 81       	ldd	r31, Y+2	; 0x02
    c6b6:	01 e0       	ldi	r16, 0x01	; 1
    c6b8:	10 e0       	ldi	r17, 0x00	; 0
    c6ba:	a5 01       	movw	r20, r10
    c6bc:	94 01       	movw	r18, r8
    c6be:	b6 01       	movw	r22, r12
    c6c0:	81 81       	ldd	r24, Z+1	; 0x01
    c6c2:	0e 94 80 6b 	call	0xd700	; 0xd700 <disk_read>
    c6c6:	89 2b       	or	r24, r25
    c6c8:	09 f0       	breq	.+2      	; 0xc6cc <f_lseek+0x2a4>
    c6ca:	1a cf       	rjmp	.-460    	; 0xc500 <f_lseek+0xd8>
    c6cc:	d1 01       	movw	r26, r2
    c6ce:	58 96       	adiw	r26, 0x18	; 24
    c6d0:	8d 92       	st	X+, r8
    c6d2:	9d 92       	st	X+, r9
    c6d4:	ad 92       	st	X+, r10
    c6d6:	bc 92       	st	X, r11
    c6d8:	5b 97       	sbiw	r26, 0x1b	; 27
    c6da:	72 c1       	rjmp	.+740    	; 0xc9c0 <f_lseek+0x598>
    c6dc:	f1 01       	movw	r30, r2
    c6de:	82 85       	ldd	r24, Z+10	; 0x0a
    c6e0:	93 85       	ldd	r25, Z+11	; 0x0b
    c6e2:	a4 85       	ldd	r26, Z+12	; 0x0c
    c6e4:	b5 85       	ldd	r27, Z+13	; 0x0d
    c6e6:	8c 15       	cp	r24, r12
    c6e8:	9d 05       	cpc	r25, r13
    c6ea:	ae 05       	cpc	r26, r14
    c6ec:	bf 05       	cpc	r27, r15
    c6ee:	28 f4       	brcc	.+10     	; 0xc6fa <f_lseek+0x2d2>
    c6f0:	26 85       	ldd	r18, Z+14	; 0x0e
    c6f2:	21 fd       	sbrc	r18, 1
    c6f4:	02 c0       	rjmp	.+4      	; 0xc6fa <f_lseek+0x2d2>
    c6f6:	6c 01       	movw	r12, r24
    c6f8:	7d 01       	movw	r14, r26
    c6fa:	d1 01       	movw	r26, r2
    c6fc:	50 96       	adiw	r26, 0x10	; 16
    c6fe:	4d 90       	ld	r4, X+
    c700:	5d 90       	ld	r5, X+
    c702:	6d 90       	ld	r6, X+
    c704:	7c 90       	ld	r7, X
    c706:	53 97       	sbiw	r26, 0x13	; 19
    c708:	f1 01       	movw	r30, r2
    c70a:	10 8a       	std	Z+16, r1	; 0x10
    c70c:	11 8a       	std	Z+17, r1	; 0x11
    c70e:	12 8a       	std	Z+18, r1	; 0x12
    c710:	13 8a       	std	Z+19, r1	; 0x13
    c712:	c1 14       	cp	r12, r1
    c714:	d1 04       	cpc	r13, r1
    c716:	e1 04       	cpc	r14, r1
    c718:	f1 04       	cpc	r15, r1
    c71a:	09 f4       	brne	.+2      	; 0xc71e <f_lseek+0x2f6>
    c71c:	55 c1       	rjmp	.+682    	; 0xc9c8 <f_lseek+0x5a0>
    c71e:	e9 81       	ldd	r30, Y+1	; 0x01
    c720:	fa 81       	ldd	r31, Y+2	; 0x02
    c722:	81 84       	ldd	r8, Z+9	; 0x09
    c724:	92 84       	ldd	r9, Z+10	; 0x0a
    c726:	a1 2c       	mov	r10, r1
    c728:	b1 2c       	mov	r11, r1
    c72a:	39 e0       	ldi	r19, 0x09	; 9
    c72c:	88 0c       	add	r8, r8
    c72e:	99 1c       	adc	r9, r9
    c730:	aa 1c       	adc	r10, r10
    c732:	bb 1c       	adc	r11, r11
    c734:	3a 95       	dec	r19
    c736:	d1 f7       	brne	.-12     	; 0xc72c <f_lseek+0x304>
    c738:	41 14       	cp	r4, r1
    c73a:	51 04       	cpc	r5, r1
    c73c:	61 04       	cpc	r6, r1
    c73e:	71 04       	cpc	r7, r1
    c740:	09 f4       	brne	.+2      	; 0xc744 <f_lseek+0x31c>
    c742:	3f c0       	rjmp	.+126    	; 0xc7c2 <f_lseek+0x39a>
    c744:	f1 e0       	ldi	r31, 0x01	; 1
    c746:	4f 1a       	sub	r4, r31
    c748:	51 08       	sbc	r5, r1
    c74a:	61 08       	sbc	r6, r1
    c74c:	71 08       	sbc	r7, r1
    c74e:	c7 01       	movw	r24, r14
    c750:	b6 01       	movw	r22, r12
    c752:	61 50       	subi	r22, 0x01	; 1
    c754:	71 09       	sbc	r23, r1
    c756:	81 09       	sbc	r24, r1
    c758:	91 09       	sbc	r25, r1
    c75a:	a5 01       	movw	r20, r10
    c75c:	94 01       	movw	r18, r8
    c75e:	0e 94 5e e5 	call	0x1cabc	; 0x1cabc <__udivmodsi4>
    c762:	2b 83       	std	Y+3, r18	; 0x03
    c764:	3c 83       	std	Y+4, r19	; 0x04
    c766:	4d 83       	std	Y+5, r20	; 0x05
    c768:	5e 83       	std	Y+6, r21	; 0x06
    c76a:	c3 01       	movw	r24, r6
    c76c:	b2 01       	movw	r22, r4
    c76e:	a5 01       	movw	r20, r10
    c770:	94 01       	movw	r18, r8
    c772:	0e 94 5e e5 	call	0x1cabc	; 0x1cabc <__udivmodsi4>
    c776:	6b 81       	ldd	r22, Y+3	; 0x03
    c778:	7c 81       	ldd	r23, Y+4	; 0x04
    c77a:	8d 81       	ldd	r24, Y+5	; 0x05
    c77c:	9e 81       	ldd	r25, Y+6	; 0x06
    c77e:	62 17       	cp	r22, r18
    c780:	73 07       	cpc	r23, r19
    c782:	84 07       	cpc	r24, r20
    c784:	95 07       	cpc	r25, r21
    c786:	e8 f0       	brcs	.+58     	; 0xc7c2 <f_lseek+0x39a>
    c788:	88 27       	eor	r24, r24
    c78a:	99 27       	eor	r25, r25
    c78c:	dc 01       	movw	r26, r24
    c78e:	88 19       	sub	r24, r8
    c790:	99 09       	sbc	r25, r9
    c792:	aa 09       	sbc	r26, r10
    c794:	bb 09       	sbc	r27, r11
    c796:	48 22       	and	r4, r24
    c798:	59 22       	and	r5, r25
    c79a:	6a 22       	and	r6, r26
    c79c:	7b 22       	and	r7, r27
    c79e:	d1 01       	movw	r26, r2
    c7a0:	50 96       	adiw	r26, 0x10	; 16
    c7a2:	4d 92       	st	X+, r4
    c7a4:	5d 92       	st	X+, r5
    c7a6:	6d 92       	st	X+, r6
    c7a8:	7c 92       	st	X, r7
    c7aa:	53 97       	sbiw	r26, 0x13	; 19
    c7ac:	c4 18       	sub	r12, r4
    c7ae:	d5 08       	sbc	r13, r5
    c7b0:	e6 08       	sbc	r14, r6
    c7b2:	f7 08       	sbc	r15, r7
    c7b4:	54 96       	adiw	r26, 0x14	; 20
    c7b6:	4d 91       	ld	r20, X+
    c7b8:	5d 91       	ld	r21, X+
    c7ba:	6d 91       	ld	r22, X+
    c7bc:	7c 91       	ld	r23, X
    c7be:	57 97       	sbiw	r26, 0x17	; 23
    c7c0:	2b c0       	rjmp	.+86     	; 0xc818 <f_lseek+0x3f0>
    c7c2:	f1 01       	movw	r30, r2
    c7c4:	46 81       	ldd	r20, Z+6	; 0x06
    c7c6:	57 81       	ldd	r21, Z+7	; 0x07
    c7c8:	60 85       	ldd	r22, Z+8	; 0x08
    c7ca:	71 85       	ldd	r23, Z+9	; 0x09
    c7cc:	41 15       	cp	r20, r1
    c7ce:	51 05       	cpc	r21, r1
    c7d0:	61 05       	cpc	r22, r1
    c7d2:	71 05       	cpc	r23, r1
    c7d4:	e1 f4       	brne	.+56     	; 0xc80e <f_lseek+0x3e6>
    c7d6:	40 e0       	ldi	r20, 0x00	; 0
    c7d8:	50 e0       	ldi	r21, 0x00	; 0
    c7da:	ba 01       	movw	r22, r20
    c7dc:	c1 01       	movw	r24, r2
    c7de:	0e 94 36 52 	call	0xa46c	; 0xa46c <create_chain>
    c7e2:	ab 01       	movw	r20, r22
    c7e4:	bc 01       	movw	r22, r24
    c7e6:	41 30       	cpi	r20, 0x01	; 1
    c7e8:	51 05       	cpc	r21, r1
    c7ea:	61 05       	cpc	r22, r1
    c7ec:	71 05       	cpc	r23, r1
    c7ee:	09 f4       	brne	.+2      	; 0xc7f2 <f_lseek+0x3ca>
    c7f0:	7d ce       	rjmp	.-774    	; 0xc4ec <f_lseek+0xc4>
    c7f2:	4f 3f       	cpi	r20, 0xFF	; 255
    c7f4:	ff ef       	ldi	r31, 0xFF	; 255
    c7f6:	5f 07       	cpc	r21, r31
    c7f8:	6f 07       	cpc	r22, r31
    c7fa:	7f 07       	cpc	r23, r31
    c7fc:	09 f4       	brne	.+2      	; 0xc800 <f_lseek+0x3d8>
    c7fe:	80 ce       	rjmp	.-768    	; 0xc500 <f_lseek+0xd8>
    c800:	d1 01       	movw	r26, r2
    c802:	16 96       	adiw	r26, 0x06	; 6
    c804:	4d 93       	st	X+, r20
    c806:	5d 93       	st	X+, r21
    c808:	6d 93       	st	X+, r22
    c80a:	7c 93       	st	X, r23
    c80c:	19 97       	sbiw	r26, 0x09	; 9
    c80e:	f1 01       	movw	r30, r2
    c810:	44 8b       	std	Z+20, r20	; 0x14
    c812:	55 8b       	std	Z+21, r21	; 0x15
    c814:	66 8b       	std	Z+22, r22	; 0x16
    c816:	77 8b       	std	Z+23, r23	; 0x17
    c818:	41 15       	cp	r20, r1
    c81a:	51 05       	cpc	r21, r1
    c81c:	61 05       	cpc	r22, r1
    c81e:	71 05       	cpc	r23, r1
    c820:	09 f0       	breq	.+2      	; 0xc824 <f_lseek+0x3fc>
    c822:	40 c0       	rjmp	.+128    	; 0xc8a4 <f_lseek+0x47c>
    c824:	c1 2c       	mov	r12, r1
    c826:	d1 2c       	mov	r13, r1
    c828:	76 01       	movw	r14, r12
    c82a:	79 c0       	rjmp	.+242    	; 0xc91e <f_lseek+0x4f6>
    c82c:	c8 18       	sub	r12, r8
    c82e:	d9 08       	sbc	r13, r9
    c830:	ea 08       	sbc	r14, r10
    c832:	fb 08       	sbc	r15, r11
    c834:	f1 01       	movw	r30, r2
    c836:	80 89       	ldd	r24, Z+16	; 0x10
    c838:	91 89       	ldd	r25, Z+17	; 0x11
    c83a:	a2 89       	ldd	r26, Z+18	; 0x12
    c83c:	b3 89       	ldd	r27, Z+19	; 0x13
    c83e:	88 0d       	add	r24, r8
    c840:	99 1d       	adc	r25, r9
    c842:	aa 1d       	adc	r26, r10
    c844:	bb 1d       	adc	r27, r11
    c846:	80 8b       	std	Z+16, r24	; 0x10
    c848:	91 8b       	std	Z+17, r25	; 0x11
    c84a:	a2 8b       	std	Z+18, r26	; 0x12
    c84c:	b3 8b       	std	Z+19, r27	; 0x13
    c84e:	86 85       	ldd	r24, Z+14	; 0x0e
    c850:	81 ff       	sbrs	r24, 1
    c852:	2f c0       	rjmp	.+94     	; 0xc8b2 <f_lseek+0x48a>
    c854:	c1 01       	movw	r24, r2
    c856:	0e 94 36 52 	call	0xa46c	; 0xa46c <create_chain>
    c85a:	ab 01       	movw	r20, r22
    c85c:	bc 01       	movw	r22, r24
    c85e:	41 15       	cp	r20, r1
    c860:	51 05       	cpc	r21, r1
    c862:	61 05       	cpc	r22, r1
    c864:	71 05       	cpc	r23, r1
    c866:	61 f1       	breq	.+88     	; 0xc8c0 <f_lseek+0x498>
    c868:	4f 3f       	cpi	r20, 0xFF	; 255
    c86a:	bf ef       	ldi	r27, 0xFF	; 255
    c86c:	5b 07       	cpc	r21, r27
    c86e:	6b 07       	cpc	r22, r27
    c870:	7b 07       	cpc	r23, r27
    c872:	09 f4       	brne	.+2      	; 0xc876 <f_lseek+0x44e>
    c874:	45 ce       	rjmp	.-886    	; 0xc500 <f_lseek+0xd8>
    c876:	42 30       	cpi	r20, 0x02	; 2
    c878:	51 05       	cpc	r21, r1
    c87a:	61 05       	cpc	r22, r1
    c87c:	71 05       	cpc	r23, r1
    c87e:	08 f4       	brcc	.+2      	; 0xc882 <f_lseek+0x45a>
    c880:	35 ce       	rjmp	.-918    	; 0xc4ec <f_lseek+0xc4>
    c882:	e9 81       	ldd	r30, Y+1	; 0x01
    c884:	fa 81       	ldd	r31, Y+2	; 0x02
    c886:	81 8d       	ldd	r24, Z+25	; 0x19
    c888:	92 8d       	ldd	r25, Z+26	; 0x1a
    c88a:	a3 8d       	ldd	r26, Z+27	; 0x1b
    c88c:	b4 8d       	ldd	r27, Z+28	; 0x1c
    c88e:	48 17       	cp	r20, r24
    c890:	59 07       	cpc	r21, r25
    c892:	6a 07       	cpc	r22, r26
    c894:	7b 07       	cpc	r23, r27
    c896:	08 f0       	brcs	.+2      	; 0xc89a <f_lseek+0x472>
    c898:	29 ce       	rjmp	.-942    	; 0xc4ec <f_lseek+0xc4>
    c89a:	f1 01       	movw	r30, r2
    c89c:	44 8b       	std	Z+20, r20	; 0x14
    c89e:	55 8b       	std	Z+21, r21	; 0x15
    c8a0:	66 8b       	std	Z+22, r22	; 0x16
    c8a2:	77 8b       	std	Z+23, r23	; 0x17
    c8a4:	8c 14       	cp	r8, r12
    c8a6:	9d 04       	cpc	r9, r13
    c8a8:	ae 04       	cpc	r10, r14
    c8aa:	bf 04       	cpc	r11, r15
    c8ac:	08 f4       	brcc	.+2      	; 0xc8b0 <f_lseek+0x488>
    c8ae:	be cf       	rjmp	.-132    	; 0xc82c <f_lseek+0x404>
    c8b0:	0a c0       	rjmp	.+20     	; 0xc8c6 <f_lseek+0x49e>
    c8b2:	80 81       	ld	r24, Z
    c8b4:	91 81       	ldd	r25, Z+1	; 0x01
    c8b6:	0e 94 c1 50 	call	0xa182	; 0xa182 <get_fat.isra.10>
    c8ba:	ab 01       	movw	r20, r22
    c8bc:	bc 01       	movw	r22, r24
    c8be:	d4 cf       	rjmp	.-88     	; 0xc868 <f_lseek+0x440>
    c8c0:	c1 2c       	mov	r12, r1
    c8c2:	d1 2c       	mov	r13, r1
    c8c4:	76 01       	movw	r14, r12
    c8c6:	f1 01       	movw	r30, r2
    c8c8:	80 89       	ldd	r24, Z+16	; 0x10
    c8ca:	91 89       	ldd	r25, Z+17	; 0x11
    c8cc:	a2 89       	ldd	r26, Z+18	; 0x12
    c8ce:	b3 89       	ldd	r27, Z+19	; 0x13
    c8d0:	8c 0d       	add	r24, r12
    c8d2:	9d 1d       	adc	r25, r13
    c8d4:	ae 1d       	adc	r26, r14
    c8d6:	bf 1d       	adc	r27, r15
    c8d8:	80 8b       	std	Z+16, r24	; 0x10
    c8da:	91 8b       	std	Z+17, r25	; 0x11
    c8dc:	a2 8b       	std	Z+18, r26	; 0x12
    c8de:	b3 8b       	std	Z+19, r27	; 0x13
    c8e0:	d7 01       	movw	r26, r14
    c8e2:	c6 01       	movw	r24, r12
    c8e4:	91 70       	andi	r25, 0x01	; 1
    c8e6:	aa 27       	eor	r26, r26
    c8e8:	bb 27       	eor	r27, r27
    c8ea:	89 2b       	or	r24, r25
    c8ec:	8a 2b       	or	r24, r26
    c8ee:	8b 2b       	or	r24, r27
    c8f0:	09 f4       	brne	.+2      	; 0xc8f4 <f_lseek+0x4cc>
    c8f2:	98 cf       	rjmp	.-208    	; 0xc824 <f_lseek+0x3fc>
    c8f4:	89 81       	ldd	r24, Y+1	; 0x01
    c8f6:	9a 81       	ldd	r25, Y+2	; 0x02
    c8f8:	0e 94 ba 48 	call	0x9174	; 0x9174 <clst2sect>
    c8fc:	61 15       	cp	r22, r1
    c8fe:	71 05       	cpc	r23, r1
    c900:	81 05       	cpc	r24, r1
    c902:	91 05       	cpc	r25, r1
    c904:	09 f4       	brne	.+2      	; 0xc908 <f_lseek+0x4e0>
    c906:	f2 cd       	rjmp	.-1052   	; 0xc4ec <f_lseek+0xc4>
    c908:	29 e0       	ldi	r18, 0x09	; 9
    c90a:	f6 94       	lsr	r15
    c90c:	e7 94       	ror	r14
    c90e:	d7 94       	ror	r13
    c910:	c7 94       	ror	r12
    c912:	2a 95       	dec	r18
    c914:	d1 f7       	brne	.-12     	; 0xc90a <f_lseek+0x4e2>
    c916:	c6 0e       	add	r12, r22
    c918:	d7 1e       	adc	r13, r23
    c91a:	e8 1e       	adc	r14, r24
    c91c:	f9 1e       	adc	r15, r25
    c91e:	f1 01       	movw	r30, r2
    c920:	80 89       	ldd	r24, Z+16	; 0x10
    c922:	91 89       	ldd	r25, Z+17	; 0x11
    c924:	a2 89       	ldd	r26, Z+18	; 0x12
    c926:	b3 89       	ldd	r27, Z+19	; 0x13
    c928:	42 85       	ldd	r20, Z+10	; 0x0a
    c92a:	53 85       	ldd	r21, Z+11	; 0x0b
    c92c:	64 85       	ldd	r22, Z+12	; 0x0c
    c92e:	75 85       	ldd	r23, Z+13	; 0x0d
    c930:	48 17       	cp	r20, r24
    c932:	59 07       	cpc	r21, r25
    c934:	6a 07       	cpc	r22, r26
    c936:	7b 07       	cpc	r23, r27
    c938:	38 f4       	brcc	.+14     	; 0xc948 <f_lseek+0x520>
    c93a:	82 87       	std	Z+10, r24	; 0x0a
    c93c:	93 87       	std	Z+11, r25	; 0x0b
    c93e:	a4 87       	std	Z+12, r26	; 0x0c
    c940:	b5 87       	std	Z+13, r27	; 0x0d
    c942:	26 85       	ldd	r18, Z+14	; 0x0e
    c944:	20 64       	ori	r18, 0x40	; 64
    c946:	26 87       	std	Z+14, r18	; 0x0e
    c948:	91 70       	andi	r25, 0x01	; 1
    c94a:	aa 27       	eor	r26, r26
    c94c:	bb 27       	eor	r27, r27
    c94e:	89 2b       	or	r24, r25
    c950:	8a 2b       	or	r24, r26
    c952:	8b 2b       	or	r24, r27
    c954:	a9 f1       	breq	.+106    	; 0xc9c0 <f_lseek+0x598>
    c956:	d1 01       	movw	r26, r2
    c958:	58 96       	adiw	r26, 0x18	; 24
    c95a:	2d 91       	ld	r18, X+
    c95c:	3d 91       	ld	r19, X+
    c95e:	4d 91       	ld	r20, X+
    c960:	5c 91       	ld	r21, X
    c962:	5b 97       	sbiw	r26, 0x1b	; 27
    c964:	2c 15       	cp	r18, r12
    c966:	3d 05       	cpc	r19, r13
    c968:	4e 05       	cpc	r20, r14
    c96a:	5f 05       	cpc	r21, r15
    c96c:	49 f1       	breq	.+82     	; 0xc9c0 <f_lseek+0x598>
    c96e:	1e 96       	adiw	r26, 0x0e	; 14
    c970:	8c 91       	ld	r24, X
    c972:	f1 01       	movw	r30, r2
    c974:	b4 96       	adiw	r30, 0x24	; 36
    c976:	5f 01       	movw	r10, r30
    c978:	87 ff       	sbrs	r24, 7
    c97a:	11 c0       	rjmp	.+34     	; 0xc99e <f_lseek+0x576>
    c97c:	e9 81       	ldd	r30, Y+1	; 0x01
    c97e:	fa 81       	ldd	r31, Y+2	; 0x02
    c980:	01 e0       	ldi	r16, 0x01	; 1
    c982:	10 e0       	ldi	r17, 0x00	; 0
    c984:	b5 01       	movw	r22, r10
    c986:	81 81       	ldd	r24, Z+1	; 0x01
    c988:	cb d6       	rcall	.+3478   	; 0xd720 <disk_write>
    c98a:	89 2b       	or	r24, r25
    c98c:	09 f0       	breq	.+2      	; 0xc990 <f_lseek+0x568>
    c98e:	b8 cd       	rjmp	.-1168   	; 0xc500 <f_lseek+0xd8>
    c990:	d1 01       	movw	r26, r2
    c992:	1e 96       	adiw	r26, 0x0e	; 14
    c994:	8c 91       	ld	r24, X
    c996:	1e 97       	sbiw	r26, 0x0e	; 14
    c998:	8f 77       	andi	r24, 0x7F	; 127
    c99a:	1e 96       	adiw	r26, 0x0e	; 14
    c99c:	8c 93       	st	X, r24
    c99e:	e9 81       	ldd	r30, Y+1	; 0x01
    c9a0:	fa 81       	ldd	r31, Y+2	; 0x02
    c9a2:	01 e0       	ldi	r16, 0x01	; 1
    c9a4:	10 e0       	ldi	r17, 0x00	; 0
    c9a6:	a7 01       	movw	r20, r14
    c9a8:	96 01       	movw	r18, r12
    c9aa:	b5 01       	movw	r22, r10
    c9ac:	81 81       	ldd	r24, Z+1	; 0x01
    c9ae:	a8 d6       	rcall	.+3408   	; 0xd700 <disk_read>
    c9b0:	89 2b       	or	r24, r25
    c9b2:	09 f0       	breq	.+2      	; 0xc9b6 <f_lseek+0x58e>
    c9b4:	a5 cd       	rjmp	.-1206   	; 0xc500 <f_lseek+0xd8>
    c9b6:	f1 01       	movw	r30, r2
    c9b8:	c0 8e       	std	Z+24, r12	; 0x18
    c9ba:	d1 8e       	std	Z+25, r13	; 0x19
    c9bc:	e2 8e       	std	Z+26, r14	; 0x1a
    c9be:	f3 8e       	std	Z+27, r15	; 0x1b
    c9c0:	80 e0       	ldi	r24, 0x00	; 0
    c9c2:	a2 cd       	rjmp	.-1212   	; 0xc508 <f_lseek+0xe0>
    c9c4:	81 e1       	ldi	r24, 0x11	; 17
    c9c6:	a0 cd       	rjmp	.-1216   	; 0xc508 <f_lseek+0xe0>
    c9c8:	80 e0       	ldi	r24, 0x00	; 0
    c9ca:	90 e0       	ldi	r25, 0x00	; 0
    c9cc:	dc 01       	movw	r26, r24
    c9ce:	c1 2c       	mov	r12, r1
    c9d0:	d1 2c       	mov	r13, r1
    c9d2:	76 01       	movw	r14, r12
    c9d4:	b9 cf       	rjmp	.-142    	; 0xc948 <f_lseek+0x520>
    c9d6:	2a 96       	adiw	r28, 0x0a	; 10
    c9d8:	e2 e1       	ldi	r30, 0x12	; 18
    c9da:	0c 94 fc e5 	jmp	0x1cbf8	; 0x1cbf8 <__epilogue_restores__>

0000c9de <f_opendir>:
    c9de:	a4 e0       	ldi	r26, 0x04	; 4
    c9e0:	b0 e0       	ldi	r27, 0x00	; 0
    c9e2:	e5 ef       	ldi	r30, 0xF5	; 245
    c9e4:	f4 e6       	ldi	r31, 0x64	; 100
    c9e6:	0c 94 ea e5 	jmp	0x1cbd4	; 0x1cbd4 <__prologue_saves__+0x14>
    c9ea:	7c 83       	std	Y+4, r23	; 0x04
    c9ec:	6b 83       	std	Y+3, r22	; 0x03
    c9ee:	00 97       	sbiw	r24, 0x00	; 0
    c9f0:	09 f4       	brne	.+2      	; 0xc9f4 <f_opendir+0x16>
    c9f2:	48 c0       	rjmp	.+144    	; 0xca84 <f_opendir+0xa6>
    c9f4:	8c 01       	movw	r16, r24
    c9f6:	40 e0       	ldi	r20, 0x00	; 0
    c9f8:	be 01       	movw	r22, r28
    c9fa:	6f 5f       	subi	r22, 0xFF	; 255
    c9fc:	7f 4f       	sbci	r23, 0xFF	; 255
    c9fe:	ce 01       	movw	r24, r28
    ca00:	03 96       	adiw	r24, 0x03	; 3
    ca02:	0e 94 60 4d 	call	0x9ac0	; 0x9ac0 <mount_volume>
    ca06:	7c 01       	movw	r14, r24
    ca08:	89 2b       	or	r24, r25
    ca0a:	b9 f5       	brne	.+110    	; 0xca7a <f_opendir+0x9c>
    ca0c:	89 81       	ldd	r24, Y+1	; 0x01
    ca0e:	9a 81       	ldd	r25, Y+2	; 0x02
    ca10:	f8 01       	movw	r30, r16
    ca12:	91 83       	std	Z+1, r25	; 0x01
    ca14:	80 83       	st	Z, r24
    ca16:	80 e0       	ldi	r24, 0x00	; 0
    ca18:	92 e0       	ldi	r25, 0x02	; 2
    ca1a:	b6 d5       	rcall	.+2924   	; 0xd588 <ff_memalloc>
    ca1c:	6c 01       	movw	r12, r24
    ca1e:	00 97       	sbiw	r24, 0x00	; 0
    ca20:	99 f1       	breq	.+102    	; 0xca88 <f_opendir+0xaa>
    ca22:	e9 81       	ldd	r30, Y+1	; 0x01
    ca24:	fa 81       	ldd	r31, Y+2	; 0x02
    ca26:	94 87       	std	Z+12, r25	; 0x0c
    ca28:	83 87       	std	Z+11, r24	; 0x0b
    ca2a:	6b 81       	ldd	r22, Y+3	; 0x03
    ca2c:	7c 81       	ldd	r23, Y+4	; 0x04
    ca2e:	c8 01       	movw	r24, r16
    ca30:	0e 94 db 58 	call	0xb1b6	; 0xb1b6 <follow_path>
    ca34:	7c 01       	movw	r14, r24
    ca36:	89 2b       	or	r24, r25
    ca38:	b9 f4       	brne	.+46     	; 0xca68 <f_opendir+0x8a>
    ca3a:	f8 01       	movw	r30, r16
    ca3c:	87 a1       	ldd	r24, Z+39	; 0x27
    ca3e:	87 fd       	sbrc	r24, 7
    ca40:	28 c0       	rjmp	.+80     	; 0xca92 <f_opendir+0xb4>
    ca42:	84 81       	ldd	r24, Z+4	; 0x04
    ca44:	84 ff       	sbrs	r24, 4
    ca46:	0d c0       	rjmp	.+26     	; 0xca62 <f_opendir+0x84>
    ca48:	62 8d       	ldd	r22, Z+26	; 0x1a
    ca4a:	73 8d       	ldd	r23, Z+27	; 0x1b
    ca4c:	e9 81       	ldd	r30, Y+1	; 0x01
    ca4e:	fa 81       	ldd	r31, Y+2	; 0x02
    ca50:	80 81       	ld	r24, Z
    ca52:	0e 94 56 4b 	call	0x96ac	; 0x96ac <ld_clust.isra.4>
    ca56:	f8 01       	movw	r30, r16
    ca58:	66 83       	std	Z+6, r22	; 0x06
    ca5a:	77 83       	std	Z+7, r23	; 0x07
    ca5c:	80 87       	std	Z+8, r24	; 0x08
    ca5e:	91 87       	std	Z+9, r25	; 0x09
    ca60:	18 c0       	rjmp	.+48     	; 0xca92 <f_opendir+0xb4>
    ca62:	95 e0       	ldi	r25, 0x05	; 5
    ca64:	e9 2e       	mov	r14, r25
    ca66:	f1 2c       	mov	r15, r1
    ca68:	c6 01       	movw	r24, r12
    ca6a:	91 d5       	rcall	.+2850   	; 0xd58e <ff_memfree>
    ca6c:	f4 e0       	ldi	r31, 0x04	; 4
    ca6e:	ef 16       	cp	r14, r31
    ca70:	f1 04       	cpc	r15, r1
    ca72:	f1 f0       	breq	.+60     	; 0xcab0 <f_opendir+0xd2>
    ca74:	e1 14       	cp	r14, r1
    ca76:	f1 04       	cpc	r15, r1
    ca78:	49 f0       	breq	.+18     	; 0xca8c <f_opendir+0xae>
    ca7a:	f8 01       	movw	r30, r16
    ca7c:	11 82       	std	Z+1, r1	; 0x01
    ca7e:	10 82       	st	Z, r1
    ca80:	c7 01       	movw	r24, r14
    ca82:	1a c0       	rjmp	.+52     	; 0xcab8 <f_opendir+0xda>
    ca84:	89 e0       	ldi	r24, 0x09	; 9
    ca86:	03 c0       	rjmp	.+6      	; 0xca8e <f_opendir+0xb0>
    ca88:	81 e1       	ldi	r24, 0x11	; 17
    ca8a:	01 c0       	rjmp	.+2      	; 0xca8e <f_opendir+0xb0>
    ca8c:	80 e0       	ldi	r24, 0x00	; 0
    ca8e:	90 e0       	ldi	r25, 0x00	; 0
    ca90:	13 c0       	rjmp	.+38     	; 0xcab8 <f_opendir+0xda>
    ca92:	e9 81       	ldd	r30, Y+1	; 0x01
    ca94:	fa 81       	ldd	r31, Y+2	; 0x02
    ca96:	85 81       	ldd	r24, Z+5	; 0x05
    ca98:	96 81       	ldd	r25, Z+6	; 0x06
    ca9a:	f8 01       	movw	r30, r16
    ca9c:	93 83       	std	Z+3, r25	; 0x03
    ca9e:	82 83       	std	Z+2, r24	; 0x02
    caa0:	40 e0       	ldi	r20, 0x00	; 0
    caa2:	50 e0       	ldi	r21, 0x00	; 0
    caa4:	ba 01       	movw	r22, r20
    caa6:	c8 01       	movw	r24, r16
    caa8:	0e 94 75 51 	call	0xa2ea	; 0xa2ea <dir_sdi>
    caac:	7c 01       	movw	r14, r24
    caae:	dc cf       	rjmp	.-72     	; 0xca68 <f_opendir+0x8a>
    cab0:	85 e0       	ldi	r24, 0x05	; 5
    cab2:	e8 2e       	mov	r14, r24
    cab4:	f1 2c       	mov	r15, r1
    cab6:	e1 cf       	rjmp	.-62     	; 0xca7a <f_opendir+0x9c>
    cab8:	24 96       	adiw	r28, 0x04	; 4
    caba:	e8 e0       	ldi	r30, 0x08	; 8
    cabc:	0c 94 06 e6 	jmp	0x1cc0c	; 0x1cc0c <__epilogue_restores__+0x14>

0000cac0 <f_closedir>:
    cac0:	a2 e0       	ldi	r26, 0x02	; 2
    cac2:	b0 e0       	ldi	r27, 0x00	; 0
    cac4:	e6 e6       	ldi	r30, 0x66	; 102
    cac6:	f5 e6       	ldi	r31, 0x65	; 101
    cac8:	0c 94 ee e5 	jmp	0x1cbdc	; 0x1cbdc <__prologue_saves__+0x1c>
    cacc:	8c 01       	movw	r16, r24
    cace:	be 01       	movw	r22, r28
    cad0:	6f 5f       	subi	r22, 0xFF	; 255
    cad2:	7f 4f       	sbci	r23, 0xFF	; 255
    cad4:	0e 94 59 49 	call	0x92b2	; 0x92b2 <validate>
    cad8:	00 97       	sbiw	r24, 0x00	; 0
    cada:	19 f4       	brne	.+6      	; 0xcae2 <f_closedir+0x22>
    cadc:	f8 01       	movw	r30, r16
    cade:	11 82       	std	Z+1, r1	; 0x01
    cae0:	10 82       	st	Z, r1
    cae2:	22 96       	adiw	r28, 0x02	; 2
    cae4:	e4 e0       	ldi	r30, 0x04	; 4
    cae6:	0c 94 0a e6 	jmp	0x1cc14	; 0x1cc14 <__epilogue_restores__+0x1c>

0000caea <f_readdir>:
    caea:	a2 e0       	ldi	r26, 0x02	; 2
    caec:	b0 e0       	ldi	r27, 0x00	; 0
    caee:	eb e7       	ldi	r30, 0x7B	; 123
    caf0:	f5 e6       	ldi	r31, 0x65	; 101
    caf2:	0c 94 e8 e5 	jmp	0x1cbd0	; 0x1cbd0 <__prologue_saves__+0x10>
    caf6:	7c 01       	movw	r14, r24
    caf8:	5b 01       	movw	r10, r22
    cafa:	be 01       	movw	r22, r28
    cafc:	6f 5f       	subi	r22, 0xFF	; 255
    cafe:	7f 4f       	sbci	r23, 0xFF	; 255
    cb00:	0e 94 59 49 	call	0x92b2	; 0x92b2 <validate>
    cb04:	00 97       	sbiw	r24, 0x00	; 0
    cb06:	89 f5       	brne	.+98     	; 0xcb6a <f_readdir+0x80>
    cb08:	a1 14       	cp	r10, r1
    cb0a:	b1 04       	cpc	r11, r1
    cb0c:	39 f4       	brne	.+14     	; 0xcb1c <f_readdir+0x32>
    cb0e:	40 e0       	ldi	r20, 0x00	; 0
    cb10:	50 e0       	ldi	r21, 0x00	; 0
    cb12:	ba 01       	movw	r22, r20
    cb14:	c7 01       	movw	r24, r14
    cb16:	0e 94 75 51 	call	0xa2ea	; 0xa2ea <dir_sdi>
    cb1a:	27 c0       	rjmp	.+78     	; 0xcb6a <f_readdir+0x80>
    cb1c:	80 e0       	ldi	r24, 0x00	; 0
    cb1e:	92 e0       	ldi	r25, 0x02	; 2
    cb20:	33 d5       	rcall	.+2662   	; 0xd588 <ff_memalloc>
    cb22:	6c 01       	movw	r12, r24
    cb24:	00 97       	sbiw	r24, 0x00	; 0
    cb26:	f9 f0       	breq	.+62     	; 0xcb66 <f_readdir+0x7c>
    cb28:	e9 81       	ldd	r30, Y+1	; 0x01
    cb2a:	fa 81       	ldd	r31, Y+2	; 0x02
    cb2c:	94 87       	std	Z+12, r25	; 0x0c
    cb2e:	83 87       	std	Z+11, r24	; 0x0b
    cb30:	60 e0       	ldi	r22, 0x00	; 0
    cb32:	70 e0       	ldi	r23, 0x00	; 0
    cb34:	c7 01       	movw	r24, r14
    cb36:	0e 94 0f 55 	call	0xaa1e	; 0xaa1e <dir_read>
    cb3a:	8c 01       	movw	r16, r24
    cb3c:	8b 7f       	andi	r24, 0xFB	; 251
    cb3e:	89 2b       	or	r24, r25
    cb40:	71 f4       	brne	.+28     	; 0xcb5e <f_readdir+0x74>
    cb42:	b5 01       	movw	r22, r10
    cb44:	c7 01       	movw	r24, r14
    cb46:	0e 94 3d 4a 	call	0x947a	; 0x947a <get_fileinfo>
    cb4a:	60 e0       	ldi	r22, 0x00	; 0
    cb4c:	70 e0       	ldi	r23, 0x00	; 0
    cb4e:	c7 01       	movw	r24, r14
    cb50:	0e 94 ed 53 	call	0xa7da	; 0xa7da <dir_next>
    cb54:	8c 01       	movw	r16, r24
    cb56:	04 97       	sbiw	r24, 0x04	; 4
    cb58:	11 f4       	brne	.+4      	; 0xcb5e <f_readdir+0x74>
    cb5a:	00 e0       	ldi	r16, 0x00	; 0
    cb5c:	10 e0       	ldi	r17, 0x00	; 0
    cb5e:	c6 01       	movw	r24, r12
    cb60:	16 d5       	rcall	.+2604   	; 0xd58e <ff_memfree>
    cb62:	c8 01       	movw	r24, r16
    cb64:	02 c0       	rjmp	.+4      	; 0xcb6a <f_readdir+0x80>
    cb66:	81 e1       	ldi	r24, 0x11	; 17
    cb68:	90 e0       	ldi	r25, 0x00	; 0
    cb6a:	22 96       	adiw	r28, 0x02	; 2
    cb6c:	ea e0       	ldi	r30, 0x0A	; 10
    cb6e:	0c 94 04 e6 	jmp	0x1cc08	; 0x1cc08 <__epilogue_restores__+0x10>

0000cb72 <f_stat>:
    cb72:	a0 e3       	ldi	r26, 0x30	; 48
    cb74:	b0 e0       	ldi	r27, 0x00	; 0
    cb76:	ef eb       	ldi	r30, 0xBF	; 191
    cb78:	f5 e6       	ldi	r31, 0x65	; 101
    cb7a:	0c 94 ea e5 	jmp	0x1cbd4	; 0x1cbd4 <__prologue_saves__+0x14>
    cb7e:	98 ab       	std	Y+48, r25	; 0x30
    cb80:	8f a7       	std	Y+47, r24	; 0x2f
    cb82:	6b 01       	movw	r12, r22
    cb84:	40 e0       	ldi	r20, 0x00	; 0
    cb86:	be 01       	movw	r22, r28
    cb88:	6f 5f       	subi	r22, 0xFF	; 255
    cb8a:	7f 4f       	sbci	r23, 0xFF	; 255
    cb8c:	ce 01       	movw	r24, r28
    cb8e:	8f 96       	adiw	r24, 0x2f	; 47
    cb90:	0e 94 60 4d 	call	0x9ac0	; 0x9ac0 <mount_volume>
    cb94:	00 97       	sbiw	r24, 0x00	; 0
    cb96:	39 f5       	brne	.+78     	; 0xcbe6 <f_stat+0x74>
    cb98:	80 e0       	ldi	r24, 0x00	; 0
    cb9a:	92 e0       	ldi	r25, 0x02	; 2
    cb9c:	f5 d4       	rcall	.+2538   	; 0xd588 <ff_memalloc>
    cb9e:	7c 01       	movw	r14, r24
    cba0:	00 97       	sbiw	r24, 0x00	; 0
    cba2:	f9 f0       	breq	.+62     	; 0xcbe2 <f_stat+0x70>
    cba4:	e9 81       	ldd	r30, Y+1	; 0x01
    cba6:	fa 81       	ldd	r31, Y+2	; 0x02
    cba8:	94 87       	std	Z+12, r25	; 0x0c
    cbaa:	83 87       	std	Z+11, r24	; 0x0b
    cbac:	6f a5       	ldd	r22, Y+47	; 0x2f
    cbae:	78 a9       	ldd	r23, Y+48	; 0x30
    cbb0:	ce 01       	movw	r24, r28
    cbb2:	01 96       	adiw	r24, 0x01	; 1
    cbb4:	0e 94 db 58 	call	0xb1b6	; 0xb1b6 <follow_path>
    cbb8:	8c 01       	movw	r16, r24
    cbba:	89 2b       	or	r24, r25
    cbbc:	71 f4       	brne	.+28     	; 0xcbda <f_stat+0x68>
    cbbe:	88 a5       	ldd	r24, Y+40	; 0x28
    cbc0:	87 fd       	sbrc	r24, 7
    cbc2:	09 c0       	rjmp	.+18     	; 0xcbd6 <f_stat+0x64>
    cbc4:	c1 14       	cp	r12, r1
    cbc6:	d1 04       	cpc	r13, r1
    cbc8:	41 f0       	breq	.+16     	; 0xcbda <f_stat+0x68>
    cbca:	b6 01       	movw	r22, r12
    cbcc:	ce 01       	movw	r24, r28
    cbce:	01 96       	adiw	r24, 0x01	; 1
    cbd0:	0e 94 3d 4a 	call	0x947a	; 0x947a <get_fileinfo>
    cbd4:	02 c0       	rjmp	.+4      	; 0xcbda <f_stat+0x68>
    cbd6:	06 e0       	ldi	r16, 0x06	; 6
    cbd8:	10 e0       	ldi	r17, 0x00	; 0
    cbda:	c7 01       	movw	r24, r14
    cbdc:	d8 d4       	rcall	.+2480   	; 0xd58e <ff_memfree>
    cbde:	c8 01       	movw	r24, r16
    cbe0:	02 c0       	rjmp	.+4      	; 0xcbe6 <f_stat+0x74>
    cbe2:	81 e1       	ldi	r24, 0x11	; 17
    cbe4:	90 e0       	ldi	r25, 0x00	; 0
    cbe6:	e0 96       	adiw	r28, 0x30	; 48
    cbe8:	e8 e0       	ldi	r30, 0x08	; 8
    cbea:	0c 94 06 e6 	jmp	0x1cc0c	; 0x1cc0c <__epilogue_restores__+0x14>

0000cbee <f_getfree>:
    cbee:	aa e0       	ldi	r26, 0x0A	; 10
    cbf0:	b0 e0       	ldi	r27, 0x00	; 0
    cbf2:	ed ef       	ldi	r30, 0xFD	; 253
    cbf4:	f5 e6       	ldi	r31, 0x65	; 101
    cbf6:	0c 94 e0 e5 	jmp	0x1cbc0	; 0x1cbc0 <__prologue_saves__>
    cbfa:	9c 83       	std	Y+4, r25	; 0x04
    cbfc:	8b 83       	std	Y+3, r24	; 0x03
    cbfe:	7e 83       	std	Y+6, r23	; 0x06
    cc00:	6d 83       	std	Y+5, r22	; 0x05
    cc02:	7a 01       	movw	r14, r20
    cc04:	40 e0       	ldi	r20, 0x00	; 0
    cc06:	be 01       	movw	r22, r28
    cc08:	6f 5f       	subi	r22, 0xFF	; 255
    cc0a:	7f 4f       	sbci	r23, 0xFF	; 255
    cc0c:	ce 01       	movw	r24, r28
    cc0e:	03 96       	adiw	r24, 0x03	; 3
    cc10:	0e 94 60 4d 	call	0x9ac0	; 0x9ac0 <mount_volume>
    cc14:	8c 01       	movw	r16, r24
    cc16:	89 2b       	or	r24, r25
    cc18:	09 f0       	breq	.+2      	; 0xcc1c <f_getfree+0x2e>
    cc1a:	c3 c0       	rjmp	.+390    	; 0xcda2 <f_getfree+0x1b4>
    cc1c:	69 80       	ldd	r6, Y+1	; 0x01
    cc1e:	7a 80       	ldd	r7, Y+2	; 0x02
    cc20:	d7 01       	movw	r26, r14
    cc22:	6d 92       	st	X+, r6
    cc24:	7c 92       	st	X, r7
    cc26:	f3 01       	movw	r30, r6
    cc28:	81 89       	ldd	r24, Z+17	; 0x11
    cc2a:	92 89       	ldd	r25, Z+18	; 0x12
    cc2c:	a3 89       	ldd	r26, Z+19	; 0x13
    cc2e:	b4 89       	ldd	r27, Z+20	; 0x14
    cc30:	81 8c       	ldd	r8, Z+25	; 0x19
    cc32:	92 8c       	ldd	r9, Z+26	; 0x1a
    cc34:	a3 8c       	ldd	r10, Z+27	; 0x1b
    cc36:	b4 8c       	ldd	r11, Z+28	; 0x1c
    cc38:	b5 01       	movw	r22, r10
    cc3a:	a4 01       	movw	r20, r8
    cc3c:	42 50       	subi	r20, 0x02	; 2
    cc3e:	51 09       	sbc	r21, r1
    cc40:	61 09       	sbc	r22, r1
    cc42:	71 09       	sbc	r23, r1
    cc44:	48 17       	cp	r20, r24
    cc46:	59 07       	cpc	r21, r25
    cc48:	6a 07       	cpc	r22, r26
    cc4a:	7b 07       	cpc	r23, r27
    cc4c:	38 f0       	brcs	.+14     	; 0xcc5c <f_getfree+0x6e>
    cc4e:	ed 81       	ldd	r30, Y+5	; 0x05
    cc50:	fe 81       	ldd	r31, Y+6	; 0x06
    cc52:	80 83       	st	Z, r24
    cc54:	91 83       	std	Z+1, r25	; 0x01
    cc56:	a2 83       	std	Z+2, r26	; 0x02
    cc58:	b3 83       	std	Z+3, r27	; 0x03
    cc5a:	a3 c0       	rjmp	.+326    	; 0xcda2 <f_getfree+0x1b4>
    cc5c:	80 81       	ld	r24, Z
    cc5e:	81 30       	cpi	r24, 0x01	; 1
    cc60:	a1 f5       	brne	.+104    	; 0xccca <f_getfree+0xdc>
    cc62:	82 e0       	ldi	r24, 0x02	; 2
    cc64:	88 2e       	mov	r8, r24
    cc66:	91 2c       	mov	r9, r1
    cc68:	a1 2c       	mov	r10, r1
    cc6a:	b1 2c       	mov	r11, r1
    cc6c:	c1 2c       	mov	r12, r1
    cc6e:	d1 2c       	mov	r13, r1
    cc70:	76 01       	movw	r14, r12
    cc72:	b5 01       	movw	r22, r10
    cc74:	a4 01       	movw	r20, r8
    cc76:	c3 01       	movw	r24, r6
    cc78:	0e 94 c1 50 	call	0xa182	; 0xa182 <get_fat.isra.10>
    cc7c:	6f 3f       	cpi	r22, 0xFF	; 255
    cc7e:	bf ef       	ldi	r27, 0xFF	; 255
    cc80:	7b 07       	cpc	r23, r27
    cc82:	8b 07       	cpc	r24, r27
    cc84:	9b 07       	cpc	r25, r27
    cc86:	09 f4       	brne	.+2      	; 0xcc8a <f_getfree+0x9c>
    cc88:	75 c0       	rjmp	.+234    	; 0xcd74 <f_getfree+0x186>
    cc8a:	61 30       	cpi	r22, 0x01	; 1
    cc8c:	71 05       	cpc	r23, r1
    cc8e:	81 05       	cpc	r24, r1
    cc90:	91 05       	cpc	r25, r1
    cc92:	09 f4       	brne	.+2      	; 0xcc96 <f_getfree+0xa8>
    cc94:	72 c0       	rjmp	.+228    	; 0xcd7a <f_getfree+0x18c>
    cc96:	67 2b       	or	r22, r23
    cc98:	68 2b       	or	r22, r24
    cc9a:	69 2b       	or	r22, r25
    cc9c:	29 f4       	brne	.+10     	; 0xcca8 <f_getfree+0xba>
    cc9e:	ef ef       	ldi	r30, 0xFF	; 255
    cca0:	ce 1a       	sub	r12, r30
    cca2:	de 0a       	sbc	r13, r30
    cca4:	ee 0a       	sbc	r14, r30
    cca6:	fe 0a       	sbc	r15, r30
    cca8:	ff ef       	ldi	r31, 0xFF	; 255
    ccaa:	8f 1a       	sub	r8, r31
    ccac:	9f 0a       	sbc	r9, r31
    ccae:	af 0a       	sbc	r10, r31
    ccb0:	bf 0a       	sbc	r11, r31
    ccb2:	e9 81       	ldd	r30, Y+1	; 0x01
    ccb4:	fa 81       	ldd	r31, Y+2	; 0x02
    ccb6:	81 8d       	ldd	r24, Z+25	; 0x19
    ccb8:	92 8d       	ldd	r25, Z+26	; 0x1a
    ccba:	a3 8d       	ldd	r26, Z+27	; 0x1b
    ccbc:	b4 8d       	ldd	r27, Z+28	; 0x1c
    ccbe:	88 16       	cp	r8, r24
    ccc0:	99 06       	cpc	r9, r25
    ccc2:	aa 06       	cpc	r10, r26
    ccc4:	bb 06       	cpc	r11, r27
    ccc6:	a8 f2       	brcs	.-86     	; 0xcc72 <f_getfree+0x84>
    ccc8:	5c c0       	rjmp	.+184    	; 0xcd82 <f_getfree+0x194>
    ccca:	45 a0       	ldd	r4, Z+37	; 0x25
    cccc:	56 a0       	ldd	r5, Z+38	; 0x26
    ccce:	67 a0       	ldd	r6, Z+39	; 0x27
    ccd0:	70 a4       	ldd	r7, Z+40	; 0x28
    ccd2:	21 2c       	mov	r2, r1
    ccd4:	31 2c       	mov	r3, r1
    ccd6:	c1 2c       	mov	r12, r1
    ccd8:	d1 2c       	mov	r13, r1
    ccda:	76 01       	movw	r14, r12
    ccdc:	21 14       	cp	r2, r1
    ccde:	31 04       	cpc	r3, r1
    cce0:	b1 f4       	brne	.+44     	; 0xcd0e <f_getfree+0x120>
    cce2:	d3 01       	movw	r26, r6
    cce4:	c2 01       	movw	r24, r4
    cce6:	01 96       	adiw	r24, 0x01	; 1
    cce8:	a1 1d       	adc	r26, r1
    ccea:	b1 1d       	adc	r27, r1
    ccec:	8f 83       	std	Y+7, r24	; 0x07
    ccee:	98 87       	std	Y+8, r25	; 0x08
    ccf0:	a9 87       	std	Y+9, r26	; 0x09
    ccf2:	ba 87       	std	Y+10, r27	; 0x0a
    ccf4:	b3 01       	movw	r22, r6
    ccf6:	a2 01       	movw	r20, r4
    ccf8:	89 81       	ldd	r24, Y+1	; 0x01
    ccfa:	9a 81       	ldd	r25, Y+2	; 0x02
    ccfc:	0e 94 e5 4c 	call	0x99ca	; 0x99ca <move_window>
    cd00:	00 97       	sbiw	r24, 0x00	; 0
    cd02:	09 f0       	breq	.+2      	; 0xcd06 <f_getfree+0x118>
    cd04:	3d c0       	rjmp	.+122    	; 0xcd80 <f_getfree+0x192>
    cd06:	4f 80       	ldd	r4, Y+7	; 0x07
    cd08:	58 84       	ldd	r5, Y+8	; 0x08
    cd0a:	69 84       	ldd	r6, Y+9	; 0x09
    cd0c:	7a 84       	ldd	r7, Y+10	; 0x0a
    cd0e:	e9 81       	ldd	r30, Y+1	; 0x01
    cd10:	fa 81       	ldd	r31, Y+2	; 0x02
    cd12:	80 81       	ld	r24, Z
    cd14:	82 30       	cpi	r24, 0x02	; 2
    cd16:	79 f4       	brne	.+30     	; 0xcd36 <f_getfree+0x148>
    cd18:	e2 0d       	add	r30, r2
    cd1a:	f3 1d       	adc	r31, r3
    cd1c:	85 a9       	ldd	r24, Z+53	; 0x35
    cd1e:	96 a9       	ldd	r25, Z+54	; 0x36
    cd20:	89 2b       	or	r24, r25
    cd22:	29 f4       	brne	.+10     	; 0xcd2e <f_getfree+0x140>
    cd24:	9f ef       	ldi	r25, 0xFF	; 255
    cd26:	c9 1a       	sub	r12, r25
    cd28:	d9 0a       	sbc	r13, r25
    cd2a:	e9 0a       	sbc	r14, r25
    cd2c:	f9 0a       	sbc	r15, r25
    cd2e:	a2 e0       	ldi	r26, 0x02	; 2
    cd30:	2a 0e       	add	r2, r26
    cd32:	31 1c       	adc	r3, r1
    cd34:	15 c0       	rjmp	.+42     	; 0xcd60 <f_getfree+0x172>
    cd36:	cf 01       	movw	r24, r30
    cd38:	c5 96       	adiw	r24, 0x35	; 53
    cd3a:	82 0d       	add	r24, r2
    cd3c:	93 1d       	adc	r25, r3
    cd3e:	0e 94 01 48 	call	0x9002	; 0x9002 <ld_dword>
    cd42:	dc 01       	movw	r26, r24
    cd44:	cb 01       	movw	r24, r22
    cd46:	bf 70       	andi	r27, 0x0F	; 15
    cd48:	89 2b       	or	r24, r25
    cd4a:	8a 2b       	or	r24, r26
    cd4c:	8b 2b       	or	r24, r27
    cd4e:	29 f4       	brne	.+10     	; 0xcd5a <f_getfree+0x16c>
    cd50:	bf ef       	ldi	r27, 0xFF	; 255
    cd52:	cb 1a       	sub	r12, r27
    cd54:	db 0a       	sbc	r13, r27
    cd56:	eb 0a       	sbc	r14, r27
    cd58:	fb 0a       	sbc	r15, r27
    cd5a:	e4 e0       	ldi	r30, 0x04	; 4
    cd5c:	2e 0e       	add	r2, r30
    cd5e:	31 1c       	adc	r3, r1
    cd60:	f1 e0       	ldi	r31, 0x01	; 1
    cd62:	3f 22       	and	r3, r31
    cd64:	21 e0       	ldi	r18, 0x01	; 1
    cd66:	82 1a       	sub	r8, r18
    cd68:	91 08       	sbc	r9, r1
    cd6a:	a1 08       	sbc	r10, r1
    cd6c:	b1 08       	sbc	r11, r1
    cd6e:	09 f0       	breq	.+2      	; 0xcd72 <f_getfree+0x184>
    cd70:	b5 cf       	rjmp	.-150    	; 0xccdc <f_getfree+0xee>
    cd72:	07 c0       	rjmp	.+14     	; 0xcd82 <f_getfree+0x194>
    cd74:	01 e0       	ldi	r16, 0x01	; 1
    cd76:	10 e0       	ldi	r17, 0x00	; 0
    cd78:	04 c0       	rjmp	.+8      	; 0xcd82 <f_getfree+0x194>
    cd7a:	02 e0       	ldi	r16, 0x02	; 2
    cd7c:	10 e0       	ldi	r17, 0x00	; 0
    cd7e:	01 c0       	rjmp	.+2      	; 0xcd82 <f_getfree+0x194>
    cd80:	8c 01       	movw	r16, r24
    cd82:	ad 81       	ldd	r26, Y+5	; 0x05
    cd84:	be 81       	ldd	r27, Y+6	; 0x06
    cd86:	cd 92       	st	X+, r12
    cd88:	dd 92       	st	X+, r13
    cd8a:	ed 92       	st	X+, r14
    cd8c:	fc 92       	st	X, r15
    cd8e:	13 97       	sbiw	r26, 0x03	; 3
    cd90:	e9 81       	ldd	r30, Y+1	; 0x01
    cd92:	fa 81       	ldd	r31, Y+2	; 0x02
    cd94:	c1 8a       	std	Z+17, r12	; 0x11
    cd96:	d2 8a       	std	Z+18, r13	; 0x12
    cd98:	e3 8a       	std	Z+19, r14	; 0x13
    cd9a:	f4 8a       	std	Z+20, r15	; 0x14
    cd9c:	84 81       	ldd	r24, Z+4	; 0x04
    cd9e:	81 60       	ori	r24, 0x01	; 1
    cda0:	84 83       	std	Z+4, r24	; 0x04
    cda2:	c8 01       	movw	r24, r16
    cda4:	2a 96       	adiw	r28, 0x0a	; 10
    cda6:	e2 e1       	ldi	r30, 0x12	; 18
    cda8:	0c 94 fc e5 	jmp	0x1cbf8	; 0x1cbf8 <__epilogue_restores__>

0000cdac <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
    cdac:	a0 e6       	ldi	r26, 0x60	; 96
    cdae:	b0 e0       	ldi	r27, 0x00	; 0
    cdb0:	ec ed       	ldi	r30, 0xDC	; 220
    cdb2:	f6 e6       	ldi	r31, 0x66	; 102
    cdb4:	0c 94 e7 e5 	jmp	0x1cbce	; 0x1cbce <__prologue_saves__+0xe>
    cdb8:	a1 96       	adiw	r28, 0x21	; 33
    cdba:	9f af       	std	Y+63, r25	; 0x3f
    cdbc:	8e af       	std	Y+62, r24	; 0x3e
    cdbe:	a1 97       	sbiw	r28, 0x21	; 33
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = mount_volume(&path, &fs, FA_WRITE);
    cdc0:	42 e0       	ldi	r20, 0x02	; 2
    cdc2:	be 01       	movw	r22, r28
    cdc4:	63 5a       	subi	r22, 0xA3	; 163
    cdc6:	7f 4f       	sbci	r23, 0xFF	; 255
    cdc8:	ce 01       	movw	r24, r28
    cdca:	81 5a       	subi	r24, 0xA1	; 161
    cdcc:	9f 4f       	sbci	r25, 0xFF	; 255
    cdce:	0e 94 60 4d 	call	0x9ac0	; 0x9ac0 <mount_volume>
	if (res == FR_OK) {
    cdd2:	00 97       	sbiw	r24, 0x00	; 0
    cdd4:	09 f0       	breq	.+2      	; 0xcdd8 <f_unlink+0x2c>
    cdd6:	8c c0       	rjmp	.+280    	; 0xcef0 <f_unlink+0x144>
		dj.obj.fs = fs;
    cdd8:	6f 96       	adiw	r28, 0x1f	; 31
    cdda:	8e ad       	ldd	r24, Y+62	; 0x3e
    cddc:	9f ad       	ldd	r25, Y+63	; 0x3f
    cdde:	6f 97       	sbiw	r28, 0x1f	; 31
    cde0:	98 ab       	std	Y+48, r25	; 0x30
    cde2:	8f a7       	std	Y+47, r24	; 0x2f
		INIT_NAMBUF(fs);
    cde4:	80 e0       	ldi	r24, 0x00	; 0
    cde6:	92 e0       	ldi	r25, 0x02	; 2
    cde8:	cf d3       	rcall	.+1950   	; 0xd588 <ff_memalloc>
    cdea:	5c 01       	movw	r10, r24
    cdec:	00 97       	sbiw	r24, 0x00	; 0
    cdee:	09 f4       	brne	.+2      	; 0xcdf2 <f_unlink+0x46>
    cdf0:	49 c0       	rjmp	.+146    	; 0xce84 <f_unlink+0xd8>
    cdf2:	6f 96       	adiw	r28, 0x1f	; 31
    cdf4:	ee ad       	ldd	r30, Y+62	; 0x3e
    cdf6:	ff ad       	ldd	r31, Y+63	; 0x3f
    cdf8:	6f 97       	sbiw	r28, 0x1f	; 31
    cdfa:	94 87       	std	Z+12, r25	; 0x0c
    cdfc:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);		/* Follow the file path */
    cdfe:	a1 96       	adiw	r28, 0x21	; 33
    ce00:	6e ad       	ldd	r22, Y+62	; 0x3e
    ce02:	7f ad       	ldd	r23, Y+63	; 0x3f
    ce04:	a1 97       	sbiw	r28, 0x21	; 33
    ce06:	ce 01       	movw	r24, r28
    ce08:	8f 96       	adiw	r24, 0x2f	; 47
    ce0a:	0e 94 db 58 	call	0xb1b6	; 0xb1b6 <follow_path>
    ce0e:	8c 01       	movw	r16, r24
		if (FF_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
    ce10:	89 2b       	or	r24, r25
    ce12:	a1 f5       	brne	.+104    	; 0xce7c <f_unlink+0xd0>
    ce14:	67 96       	adiw	r28, 0x17	; 23
    ce16:	8f ad       	ldd	r24, Y+63	; 0x3f
    ce18:	67 97       	sbiw	r28, 0x17	; 23
    ce1a:	85 fd       	sbrc	r24, 5
    ce1c:	36 c0       	rjmp	.+108    	; 0xce8a <f_unlink+0xde>
		}
#if FF_FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			if (dj.fn[NSFLAG] & NS_NONAME) {
    ce1e:	87 fd       	sbrc	r24, 7
    ce20:	34 c0       	rjmp	.+104    	; 0xce8a <f_unlink+0xde>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
			} else {
				if (dj.obj.attr & AM_RDO) {
    ce22:	9b a8       	ldd	r9, Y+51	; 0x33
    ce24:	90 fc       	sbrc	r9, 0
    ce26:	40 c0       	rjmp	.+128    	; 0xcea8 <f_unlink+0xfc>
					init_alloc_info(fs, &obj);
					dclst = obj.sclust;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
    ce28:	6f 96       	adiw	r28, 0x1f	; 31
    ce2a:	0e ad       	ldd	r16, Y+62	; 0x3e
    ce2c:	1f ad       	ldd	r17, Y+63	; 0x3f
    ce2e:	6f 97       	sbiw	r28, 0x1f	; 31
    ce30:	2b 96       	adiw	r28, 0x0b	; 11
    ce32:	6e ad       	ldd	r22, Y+62	; 0x3e
    ce34:	7f ad       	ldd	r23, Y+63	; 0x3f
    ce36:	2b 97       	sbiw	r28, 0x0b	; 11
    ce38:	f8 01       	movw	r30, r16
    ce3a:	80 81       	ld	r24, Z
    ce3c:	0e 94 56 4b 	call	0x96ac	; 0x96ac <ld_clust.isra.4>
    ce40:	6b 01       	movw	r12, r22
    ce42:	7c 01       	movw	r14, r24
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
    ce44:	94 fe       	sbrs	r9, 4
    ce46:	33 c0       	rjmp	.+102    	; 0xceae <f_unlink+0x102>
#if FF_FS_RPATH != 0
					if (dclst == fs->cdir) {		 	/* Is it the current directory? */
    ce48:	f8 01       	movw	r30, r16
    ce4a:	85 89       	ldd	r24, Z+21	; 0x15
    ce4c:	96 89       	ldd	r25, Z+22	; 0x16
    ce4e:	a7 89       	ldd	r26, Z+23	; 0x17
    ce50:	b0 8d       	ldd	r27, Z+24	; 0x18
    ce52:	c8 16       	cp	r12, r24
    ce54:	d9 06       	cpc	r13, r25
    ce56:	ea 06       	cpc	r14, r26
    ce58:	fb 06       	cpc	r15, r27
    ce5a:	31 f1       	breq	.+76     	; 0xcea8 <f_unlink+0xfc>
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;				/* Open the sub-directory */
    ce5c:	1a 83       	std	Y+2, r17	; 0x02
    ce5e:	09 83       	std	Y+1, r16	; 0x01
						sdj.obj.sclust = dclst;
    ce60:	cf 82       	std	Y+7, r12	; 0x07
    ce62:	d8 86       	std	Y+8, r13	; 0x08
    ce64:	e9 86       	std	Y+9, r14	; 0x09
    ce66:	fa 86       	std	Y+10, r15	; 0x0a
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
    ce68:	40 e0       	ldi	r20, 0x00	; 0
    ce6a:	50 e0       	ldi	r21, 0x00	; 0
    ce6c:	ba 01       	movw	r22, r20
    ce6e:	ce 01       	movw	r24, r28
    ce70:	01 96       	adiw	r24, 0x01	; 1
    ce72:	0e 94 75 51 	call	0xa2ea	; 0xa2ea <dir_sdi>
    ce76:	8c 01       	movw	r16, r24
						if (res == FR_OK) {
    ce78:	89 2b       	or	r24, r25
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    ce7a:	51 f0       	breq	.+20     	; 0xce90 <f_unlink+0xe4>
    ce7c:	c5 01       	movw	r24, r10
    ce7e:	87 d3       	rcall	.+1806   	; 0xd58e <ff_memfree>
    ce80:	c8 01       	movw	r24, r16

	/* Get logical drive */
	res = mount_volume(&path, &fs, FA_WRITE);
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    ce82:	36 c0       	rjmp	.+108    	; 0xcef0 <f_unlink+0x144>
    ce84:	81 e1       	ldi	r24, 0x11	; 17
    ce86:	90 e0       	ldi	r25, 0x00	; 0
#if FF_FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			if (dj.fn[NSFLAG] & NS_NONAME) {
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
    ce88:	33 c0       	rjmp	.+102    	; 0xcef0 <f_unlink+0x144>
    ce8a:	06 e0       	ldi	r16, 0x06	; 6
    ce8c:	10 e0       	ldi	r17, 0x00	; 0
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
						if (res == FR_OK) {
							res = DIR_READ_FILE(&sdj);			/* Test if the directory is empty */
    ce8e:	f6 cf       	rjmp	.-20     	; 0xce7c <f_unlink+0xd0>
    ce90:	60 e0       	ldi	r22, 0x00	; 0
    ce92:	70 e0       	ldi	r23, 0x00	; 0
    ce94:	ce 01       	movw	r24, r28
    ce96:	01 96       	adiw	r24, 0x01	; 1
    ce98:	0e 94 0f 55 	call	0xaa1e	; 0xaa1e <dir_read>
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
    ce9c:	8c 01       	movw	r16, r24
    ce9e:	00 97       	sbiw	r24, 0x00	; 0
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
    cea0:	19 f0       	breq	.+6      	; 0xcea8 <f_unlink+0xfc>
    cea2:	04 97       	sbiw	r24, 0x04	; 4
    cea4:	21 f0       	breq	.+8      	; 0xceae <f_unlink+0x102>
					dclst = ld_clust(fs, dj.dir);
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
#if FF_FS_RPATH != 0
					if (dclst == fs->cdir) {		 	/* Is it the current directory? */
						res = FR_DENIED;
    cea6:	ea cf       	rjmp	.-44     	; 0xce7c <f_unlink+0xd0>
    cea8:	07 e0       	ldi	r16, 0x07	; 7
    ceaa:	10 e0       	ldi	r17, 0x00	; 0
						}
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj);			/* Remove the directory entry */
    ceac:	e7 cf       	rjmp	.-50     	; 0xce7c <f_unlink+0xd0>
    ceae:	ce 01       	movw	r24, r28
    ceb0:	8f 96       	adiw	r24, 0x2f	; 47
    ceb2:	0e 94 e1 55 	call	0xabc2	; 0xabc2 <dir_remove>
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
    ceb6:	8c 01       	movw	r16, r24
    ceb8:	89 2b       	or	r24, r25
    ceba:	01 f7       	brne	.-64     	; 0xce7c <f_unlink+0xd0>
    cebc:	c1 14       	cp	r12, r1
    cebe:	d1 04       	cpc	r13, r1
    cec0:	e1 04       	cpc	r14, r1
    cec2:	f1 04       	cpc	r15, r1
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
    cec4:	41 f4       	brne	.+16     	; 0xced6 <f_unlink+0x12a>
    cec6:	6f 96       	adiw	r28, 0x1f	; 31
    cec8:	8e ad       	ldd	r24, Y+62	; 0x3e
    ceca:	9f ad       	ldd	r25, Y+63	; 0x3f
    cecc:	6f 97       	sbiw	r28, 0x1f	; 31
    cece:	0e 94 cb 4b 	call	0x9796	; 0x9796 <sync_fs>
    ced2:	8c 01       	movw	r16, r24
				res = dir_remove(&dj);			/* Remove the directory entry */
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
#if FF_FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
    ced4:	d3 cf       	rjmp	.-90     	; 0xce7c <f_unlink+0xd0>
    ced6:	00 e0       	ldi	r16, 0x00	; 0
    ced8:	10 e0       	ldi	r17, 0x00	; 0
    ceda:	98 01       	movw	r18, r16
    cedc:	b7 01       	movw	r22, r14
    cede:	a6 01       	movw	r20, r12
    cee0:	ce 01       	movw	r24, r28
    cee2:	8f 96       	adiw	r24, 0x2f	; 47
    cee4:	0e 94 5c 53 	call	0xa6b8	; 0xa6b8 <remove_chain>
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
    cee8:	8c 01       	movw	r16, r24
    ceea:	89 2b       	or	r24, r25
    ceec:	39 f6       	brne	.-114    	; 0xce7c <f_unlink+0xd0>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    ceee:	eb cf       	rjmp	.-42     	; 0xcec6 <f_unlink+0x11a>
    cef0:	c0 5a       	subi	r28, 0xA0	; 160
    cef2:	df 4f       	sbci	r29, 0xFF	; 255
    cef4:	eb e0       	ldi	r30, 0x0B	; 11
    cef6:	0c 94 03 e6 	jmp	0x1cc06	; 0x1cc06 <__epilogue_restores__+0xe>

0000cefa <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
    cefa:	a0 e4       	ldi	r26, 0x40	; 64
    cefc:	b0 e0       	ldi	r27, 0x00	; 0
    cefe:	e3 e8       	ldi	r30, 0x83	; 131
    cf00:	f7 e6       	ldi	r31, 0x67	; 103
    cf02:	0c 94 e2 e5 	jmp	0x1cbc4	; 0x1cbc4 <__prologue_saves__+0x4>
    cf06:	21 96       	adiw	r28, 0x01	; 1
    cf08:	9f af       	std	Y+63, r25	; 0x3f
    cf0a:	8e af       	std	Y+62, r24	; 0x3e
    cf0c:	21 97       	sbiw	r28, 0x01	; 1
	FATFS *fs;
	DWORD dcl, pcl, tm;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    cf0e:	42 e0       	ldi	r20, 0x02	; 2
    cf10:	be 01       	movw	r22, r28
    cf12:	63 5c       	subi	r22, 0xC3	; 195
    cf14:	7f 4f       	sbci	r23, 0xFF	; 255
    cf16:	ce 01       	movw	r24, r28
    cf18:	cf 96       	adiw	r24, 0x3f	; 63
    cf1a:	0e 94 60 4d 	call	0x9ac0	; 0x9ac0 <mount_volume>
	if (res == FR_OK) {
    cf1e:	00 97       	sbiw	r24, 0x00	; 0
    cf20:	09 f0       	breq	.+2      	; 0xcf24 <f_mkdir+0x2a>
    cf22:	d6 c0       	rjmp	.+428    	; 0xd0d0 <f_mkdir+0x1d6>
		dj.obj.fs = fs;
    cf24:	8d ad       	ldd	r24, Y+61	; 0x3d
    cf26:	9e ad       	ldd	r25, Y+62	; 0x3e
    cf28:	9a 83       	std	Y+2, r25	; 0x02
    cf2a:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    cf2c:	80 e0       	ldi	r24, 0x00	; 0
    cf2e:	92 e0       	ldi	r25, 0x02	; 2
    cf30:	2b d3       	rcall	.+1622   	; 0xd588 <ff_memalloc>
    cf32:	6c 01       	movw	r12, r24
    cf34:	00 97       	sbiw	r24, 0x00	; 0
    cf36:	e9 f0       	breq	.+58     	; 0xcf72 <f_mkdir+0x78>
    cf38:	ed ad       	ldd	r30, Y+61	; 0x3d
    cf3a:	fe ad       	ldd	r31, Y+62	; 0x3e
    cf3c:	94 87       	std	Z+12, r25	; 0x0c
    cf3e:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);			/* Follow the file path */
    cf40:	21 96       	adiw	r28, 0x01	; 1
    cf42:	6e ad       	ldd	r22, Y+62	; 0x3e
    cf44:	7f ad       	ldd	r23, Y+63	; 0x3f
    cf46:	21 97       	sbiw	r28, 0x01	; 1
    cf48:	ce 01       	movw	r24, r28
    cf4a:	01 96       	adiw	r24, 0x01	; 1
    cf4c:	0e 94 db 58 	call	0xb1b6	; 0xb1b6 <follow_path>
    cf50:	7c 01       	movw	r14, r24
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
    cf52:	89 2b       	or	r24, r25
    cf54:	89 f0       	breq	.+34     	; 0xcf78 <f_mkdir+0x7e>
		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {	/* Invalid name? */
    cf56:	84 e0       	ldi	r24, 0x04	; 4
    cf58:	e8 16       	cp	r14, r24
    cf5a:	f1 04       	cpc	r15, r1
    cf5c:	31 f4       	brne	.+12     	; 0xcf6a <f_mkdir+0x70>
    cf5e:	88 a5       	ldd	r24, Y+40	; 0x28
    cf60:	85 ff       	sbrs	r24, 5
    cf62:	0e c0       	rjmp	.+28     	; 0xcf80 <f_mkdir+0x86>
			res = FR_INVALID_NAME;
    cf64:	26 e0       	ldi	r18, 0x06	; 6
    cf66:	e2 2e       	mov	r14, r18
				}
			} else {
				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
			}
		}
		FREE_NAMBUF();
    cf68:	f1 2c       	mov	r15, r1
    cf6a:	c6 01       	movw	r24, r12
    cf6c:	10 d3       	rcall	.+1568   	; 0xd58e <ff_memfree>
    cf6e:	c7 01       	movw	r24, r14


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    cf70:	af c0       	rjmp	.+350    	; 0xd0d0 <f_mkdir+0x1d6>
    cf72:	81 e1       	ldi	r24, 0x11	; 17
    cf74:	90 e0       	ldi	r25, 0x00	; 0
		res = follow_path(&dj, path);			/* Follow the file path */
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
    cf76:	ac c0       	rjmp	.+344    	; 0xd0d0 <f_mkdir+0x1d6>
    cf78:	38 e0       	ldi	r19, 0x08	; 8
    cf7a:	e3 2e       	mov	r14, r19
    cf7c:	f1 2c       	mov	r15, r1
		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {	/* Invalid name? */
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
    cf7e:	f5 cf       	rjmp	.-22     	; 0xcf6a <f_mkdir+0x70>
    cf80:	8d ad       	ldd	r24, Y+61	; 0x3d
    cf82:	9e ad       	ldd	r25, Y+62	; 0x3e
    cf84:	98 ab       	std	Y+48, r25	; 0x30
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
    cf86:	8f a7       	std	Y+47, r24	; 0x2f
    cf88:	40 e0       	ldi	r20, 0x00	; 0
    cf8a:	50 e0       	ldi	r21, 0x00	; 0
    cf8c:	ba 01       	movw	r22, r20
    cf8e:	ce 01       	movw	r24, r28
    cf90:	8f 96       	adiw	r24, 0x2f	; 47
    cf92:	0e 94 36 52 	call	0xa46c	; 0xa46c <create_chain>
    cf96:	4b 01       	movw	r8, r22
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
    cf98:	5c 01       	movw	r10, r24
    cf9a:	67 2b       	or	r22, r23
    cf9c:	68 2b       	or	r22, r24
    cf9e:	69 2b       	or	r22, r25
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
    cfa0:	09 f1       	breq	.+66     	; 0xcfe4 <f_mkdir+0xea>
    cfa2:	e1 e0       	ldi	r30, 0x01	; 1
    cfa4:	8e 16       	cp	r8, r30
    cfa6:	91 04       	cpc	r9, r1
    cfa8:	a1 04       	cpc	r10, r1
    cfaa:	b1 04       	cpc	r11, r1
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
    cfac:	61 f0       	breq	.+24     	; 0xcfc6 <f_mkdir+0xcc>
    cfae:	ff ef       	ldi	r31, 0xFF	; 255
    cfb0:	8f 16       	cp	r8, r31
    cfb2:	9f 06       	cpc	r9, r31
    cfb4:	af 06       	cpc	r10, r31
    cfb6:	bf 06       	cpc	r11, r31
			tm = GET_FATTIME();
    cfb8:	d9 f4       	brne	.+54     	; 0xcff0 <f_mkdir+0xf6>
    cfba:	0e 94 b2 71 	call	0xe364	; 0xe364 <get_fattime>
    cfbe:	ee 24       	eor	r14, r14
    cfc0:	e3 94       	inc	r14
    cfc2:	f1 2c       	mov	r15, r1
    cfc4:	05 c0       	rjmp	.+10     	; 0xcfd0 <f_mkdir+0xd6>
    cfc6:	0e 94 b2 71 	call	0xe364	; 0xe364 <get_fattime>
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
    cfca:	92 e0       	ldi	r25, 0x02	; 2
    cfcc:	e9 2e       	mov	r14, r25
				}
				if (res == FR_OK) {
					res = sync_fs(fs);
				}
			} else {
				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
    cfce:	f1 2c       	mov	r15, r1
    cfd0:	00 e0       	ldi	r16, 0x00	; 0
    cfd2:	10 e0       	ldi	r17, 0x00	; 0
    cfd4:	98 01       	movw	r18, r16
    cfd6:	b5 01       	movw	r22, r10
    cfd8:	a4 01       	movw	r20, r8
    cfda:	ce 01       	movw	r24, r28
    cfdc:	8f 96       	adiw	r24, 0x2f	; 47
    cfde:	0e 94 5c 53 	call	0xa6b8	; 0xa6b8 <remove_chain>
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
			tm = GET_FATTIME();
    cfe2:	c3 cf       	rjmp	.-122    	; 0xcf6a <f_mkdir+0x70>
    cfe4:	0e 94 b2 71 	call	0xe364	; 0xe364 <get_fattime>
		}
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
    cfe8:	87 e0       	ldi	r24, 0x07	; 7
    cfea:	e8 2e       	mov	r14, r24
    cfec:	f1 2c       	mov	r15, r1
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
			tm = GET_FATTIME();
    cfee:	f0 cf       	rjmp	.-32     	; 0xcfd0 <f_mkdir+0xd6>
    cff0:	0e 94 b2 71 	call	0xe364	; 0xe364 <get_fattime>
    cff4:	2b 01       	movw	r4, r22
			if (res == FR_OK) {
				res = dir_clear(fs, dcl);		/* Clean up the new table */
    cff6:	3c 01       	movw	r6, r24
    cff8:	b5 01       	movw	r22, r10
    cffa:	a4 01       	movw	r20, r8
    cffc:	8d ad       	ldd	r24, Y+61	; 0x3d
    cffe:	9e ad       	ldd	r25, Y+62	; 0x3e
    d000:	0e 94 3d 4c 	call	0x987a	; 0x987a <dir_clear>
				if (res == FR_OK) {
    d004:	7c 01       	movw	r14, r24
    d006:	89 2b       	or	r24, r25
					if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {	/* Create dot entries (FAT only) */
						mem_set(fs->win + DIR_Name, ' ', 11);	/* Create "." entry */
    d008:	19 f7       	brne	.-58     	; 0xcfd0 <f_mkdir+0xd6>
    d00a:	8d ad       	ldd	r24, Y+61	; 0x3d
    d00c:	9e ad       	ldd	r25, Y+62	; 0x3e
    d00e:	4b e0       	ldi	r20, 0x0B	; 11
    d010:	50 e0       	ldi	r21, 0x00	; 0
    d012:	60 e2       	ldi	r22, 0x20	; 32
    d014:	70 e0       	ldi	r23, 0x00	; 0
    d016:	c5 96       	adiw	r24, 0x35	; 53
    d018:	0e 94 1c 48 	call	0x9038	; 0x9038 <mem_set>
						fs->win[DIR_Name] = '.';
    d01c:	8d ad       	ldd	r24, Y+61	; 0x3d
    d01e:	9e ad       	ldd	r25, Y+62	; 0x3e
    d020:	1e e2       	ldi	r17, 0x2E	; 46
    d022:	fc 01       	movw	r30, r24
						fs->win[DIR_Attr] = AM_DIR;
    d024:	15 ab       	std	Z+53, r17	; 0x35
    d026:	e0 5c       	subi	r30, 0xC0	; 192
    d028:	ff 4f       	sbci	r31, 0xFF	; 255
    d02a:	20 e1       	ldi	r18, 0x10	; 16
						st_dword(fs->win + DIR_ModTime, tm);
    d02c:	20 83       	st	Z, r18
    d02e:	b3 01       	movw	r22, r6
    d030:	a2 01       	movw	r20, r4
    d032:	85 5b       	subi	r24, 0xB5	; 181
    d034:	9f 4f       	sbci	r25, 0xFF	; 255
    d036:	0e 94 16 48 	call	0x902c	; 0x902c <st_dword>
						st_clust(fs, fs->win, dcl);
    d03a:	8d ad       	ldd	r24, Y+61	; 0x3d
    d03c:	9e ad       	ldd	r25, Y+62	; 0x3e
    d03e:	bc 01       	movw	r22, r24
    d040:	6b 5c       	subi	r22, 0xCB	; 203
    d042:	7f 4f       	sbci	r23, 0xFF	; 255
    d044:	a5 01       	movw	r20, r10
    d046:	94 01       	movw	r18, r8
    d048:	0e 94 6b 4b 	call	0x96d6	; 0x96d6 <st_clust.isra.5>
						mem_cpy(fs->win + SZDIRE, fs->win, SZDIRE); /* Create ".." entry */
    d04c:	8d ad       	ldd	r24, Y+61	; 0x3d
    d04e:	9e ad       	ldd	r25, Y+62	; 0x3e
    d050:	bc 01       	movw	r22, r24
    d052:	6b 5c       	subi	r22, 0xCB	; 203
    d054:	7f 4f       	sbci	r23, 0xFF	; 255
    d056:	40 e2       	ldi	r20, 0x20	; 32
    d058:	50 e0       	ldi	r21, 0x00	; 0
    d05a:	8b 5a       	subi	r24, 0xAB	; 171
    d05c:	9f 4f       	sbci	r25, 0xFF	; 255
    d05e:	0e 94 85 49 	call	0x930a	; 0x930a <mem_cpy.part.0>
						fs->win[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
    d062:	8d ad       	ldd	r24, Y+61	; 0x3d
    d064:	9e ad       	ldd	r25, Y+62	; 0x3e
    d066:	fc 01       	movw	r30, r24
    d068:	ea 5a       	subi	r30, 0xAA	; 170
    d06a:	ff 4f       	sbci	r31, 0xFF	; 255
						st_clust(fs, fs->win + SZDIRE, pcl);
    d06c:	10 83       	st	Z, r17
    d06e:	2f 81       	ldd	r18, Y+7	; 0x07
    d070:	38 85       	ldd	r19, Y+8	; 0x08
    d072:	49 85       	ldd	r20, Y+9	; 0x09
    d074:	5a 85       	ldd	r21, Y+10	; 0x0a
    d076:	bc 01       	movw	r22, r24
    d078:	6b 5a       	subi	r22, 0xAB	; 171
    d07a:	7f 4f       	sbci	r23, 0xFF	; 255
    d07c:	0e 94 6b 4b 	call	0x96d6	; 0x96d6 <st_clust.isra.5>
						fs->wflag = 1;
    d080:	ed ad       	ldd	r30, Y+61	; 0x3d
    d082:	fe ad       	ldd	r31, Y+62	; 0x3e
    d084:	81 e0       	ldi	r24, 0x01	; 1
					}
					res = dir_register(&dj);	/* Register the object to the parent directoy */
    d086:	83 83       	std	Z+3, r24	; 0x03
    d088:	ce 01       	movw	r24, r28
    d08a:	01 96       	adiw	r24, 0x01	; 1
    d08c:	0e 94 37 57 	call	0xae6e	; 0xae6e <dir_register>
				}
			}
			if (res == FR_OK) {
    d090:	7c 01       	movw	r14, r24
    d092:	89 2b       	or	r24, r25
    d094:	09 f0       	breq	.+2      	; 0xd098 <f_mkdir+0x19e>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					st_dword(dj.dir + DIR_ModTime, tm);	/* Created time */
    d096:	9c cf       	rjmp	.-200    	; 0xcfd0 <f_mkdir+0xd6>
    d098:	8b 8d       	ldd	r24, Y+27	; 0x1b
    d09a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    d09c:	b3 01       	movw	r22, r6
    d09e:	a2 01       	movw	r20, r4
    d0a0:	46 96       	adiw	r24, 0x16	; 22
    d0a2:	0e 94 16 48 	call	0x902c	; 0x902c <st_dword>
					st_clust(fs, dj.dir, dcl);			/* Table start cluster */
    d0a6:	6b 8d       	ldd	r22, Y+27	; 0x1b
    d0a8:	7c 8d       	ldd	r23, Y+28	; 0x1c
    d0aa:	a5 01       	movw	r20, r10
    d0ac:	94 01       	movw	r18, r8
    d0ae:	8d ad       	ldd	r24, Y+61	; 0x3d
    d0b0:	9e ad       	ldd	r25, Y+62	; 0x3e
    d0b2:	0e 94 6b 4b 	call	0x96d6	; 0x96d6 <st_clust.isra.5>
					dj.dir[DIR_Attr] = AM_DIR;			/* Attribute */
    d0b6:	eb 8d       	ldd	r30, Y+27	; 0x1b
    d0b8:	fc 8d       	ldd	r31, Y+28	; 0x1c
    d0ba:	80 e1       	ldi	r24, 0x10	; 16
					fs->wflag = 1;
    d0bc:	83 87       	std	Z+11, r24	; 0x0b
    d0be:	8d ad       	ldd	r24, Y+61	; 0x3d
    d0c0:	9e ad       	ldd	r25, Y+62	; 0x3e
    d0c2:	21 e0       	ldi	r18, 0x01	; 1
    d0c4:	fc 01       	movw	r30, r24
				}
				if (res == FR_OK) {
					res = sync_fs(fs);
    d0c6:	23 83       	std	Z+3, r18	; 0x03
    d0c8:	0e 94 cb 4b 	call	0x9796	; 0x9796 <sync_fs>
    d0cc:	7c 01       	movw	r14, r24
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    d0ce:	4d cf       	rjmp	.-358    	; 0xcf6a <f_mkdir+0x70>
    d0d0:	c0 5c       	subi	r28, 0xC0	; 192
    d0d2:	df 4f       	sbci	r29, 0xFF	; 255
    d0d4:	e0 e1       	ldi	r30, 0x10	; 16
    d0d6:	0c 94 fe e5 	jmp	0x1cbfc	; 0x1cbfc <__epilogue_restores__+0x4>

0000d0da <f_rename>:

FRESULT f_rename (
	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
	const TCHAR* path_new	/* Pointer to the new name */
)
{
    d0da:	a2 e8       	ldi	r26, 0x82	; 130
    d0dc:	b0 e0       	ldi	r27, 0x00	; 0
    d0de:	e3 e7       	ldi	r30, 0x73	; 115
    d0e0:	f8 e6       	ldi	r31, 0x68	; 104
    d0e2:	0c 94 e9 e5 	jmp	0x1cbd2	; 0x1cbd2 <__prologue_saves__+0x12>
    d0e6:	c1 58       	subi	r28, 0x81	; 129
    d0e8:	df 4f       	sbci	r29, 0xFF	; 255
    d0ea:	99 83       	std	Y+1, r25	; 0x01
    d0ec:	88 83       	st	Y, r24
    d0ee:	cf 57       	subi	r28, 0x7F	; 127
    d0f0:	d0 40       	sbci	r29, 0x00	; 0
    d0f2:	cf 57       	subi	r28, 0x7F	; 127
    d0f4:	df 4f       	sbci	r29, 0xFF	; 255
    d0f6:	79 83       	std	Y+1, r23	; 0x01
    d0f8:	68 83       	st	Y, r22
    d0fa:	c1 58       	subi	r28, 0x81	; 129
    d0fc:	d0 40       	sbci	r29, 0x00	; 0
	BYTE buf[FF_FS_EXFAT ? SZDIRE * 2 : SZDIRE], *dir;
	LBA_t sect;
	DEF_NAMBUF


	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
    d0fe:	ce 01       	movw	r24, r28
    d100:	8f 57       	subi	r24, 0x7F	; 127
    d102:	9f 4f       	sbci	r25, 0xFF	; 255
    d104:	0e 94 2d 49 	call	0x925a	; 0x925a <get_ldnumber>
	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
    d108:	42 e0       	ldi	r20, 0x02	; 2
    d10a:	be 01       	movw	r22, r28
    d10c:	63 58       	subi	r22, 0x83	; 131
    d10e:	7f 4f       	sbci	r23, 0xFF	; 255
    d110:	ce 01       	movw	r24, r28
    d112:	81 58       	subi	r24, 0x81	; 129
    d114:	9f 4f       	sbci	r25, 0xFF	; 255
    d116:	0e 94 60 4d 	call	0x9ac0	; 0x9ac0 <mount_volume>
	if (res == FR_OK) {
    d11a:	00 97       	sbiw	r24, 0x00	; 0
    d11c:	09 f0       	breq	.+2      	; 0xd120 <f_rename+0x46>
    d11e:	ed c0       	rjmp	.+474    	; 0xd2fa <f_rename+0x220>
		djo.obj.fs = fs;
    d120:	ef 96       	adiw	r28, 0x3f	; 63
    d122:	8e ad       	ldd	r24, Y+62	; 0x3e
    d124:	9f ad       	ldd	r25, Y+63	; 0x3f
    d126:	ef 97       	sbiw	r28, 0x3f	; 63
    d128:	98 ab       	std	Y+48, r25	; 0x30
    d12a:	8f a7       	std	Y+47, r24	; 0x2f
		INIT_NAMBUF(fs);
    d12c:	80 e0       	ldi	r24, 0x00	; 0
    d12e:	92 e0       	ldi	r25, 0x02	; 2
    d130:	2b d2       	rcall	.+1110   	; 0xd588 <ff_memalloc>
    d132:	6c 01       	movw	r12, r24
    d134:	00 97       	sbiw	r24, 0x00	; 0
    d136:	f1 f0       	breq	.+60     	; 0xd174 <f_rename+0x9a>
    d138:	ef 96       	adiw	r28, 0x3f	; 63
    d13a:	ee ad       	ldd	r30, Y+62	; 0x3e
    d13c:	ff ad       	ldd	r31, Y+63	; 0x3f
    d13e:	ef 97       	sbiw	r28, 0x3f	; 63
    d140:	94 87       	std	Z+12, r25	; 0x0c
    d142:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&djo, path_old);		/* Check old object */
    d144:	c1 58       	subi	r28, 0x81	; 129
    d146:	df 4f       	sbci	r29, 0xFF	; 255
    d148:	68 81       	ld	r22, Y
    d14a:	79 81       	ldd	r23, Y+1	; 0x01
    d14c:	cf 57       	subi	r28, 0x7F	; 127
    d14e:	d0 40       	sbci	r29, 0x00	; 0
    d150:	ce 01       	movw	r24, r28
    d152:	8f 96       	adiw	r24, 0x2f	; 47
    d154:	0e 94 db 58 	call	0xb1b6	; 0xb1b6 <follow_path>
    d158:	8c 01       	movw	r16, r24
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
    d15a:	89 2b       	or	r24, r25
    d15c:	39 f4       	brne	.+14     	; 0xd16c <f_rename+0x92>
    d15e:	67 96       	adiw	r28, 0x17	; 23
    d160:	8f ad       	ldd	r24, Y+63	; 0x3f
    d162:	67 97       	sbiw	r28, 0x17	; 23
    d164:	80 7a       	andi	r24, 0xA0	; 160
    d166:	49 f0       	breq	.+18     	; 0xd17a <f_rename+0xa0>
    d168:	06 e0       	ldi	r16, 0x06	; 6
					res = sync_fs(fs);
				}
			}
/* End of the critical section */
		}
		FREE_NAMBUF();
    d16a:	10 e0       	ldi	r17, 0x00	; 0
    d16c:	c6 01       	movw	r24, r12
    d16e:	0f d2       	rcall	.+1054   	; 0xd58e <ff_memfree>
    d170:	c8 01       	movw	r24, r16

	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
	if (res == FR_OK) {
		djo.obj.fs = fs;
		INIT_NAMBUF(fs);
    d172:	c3 c0       	rjmp	.+390    	; 0xd2fa <f_rename+0x220>
    d174:	81 e1       	ldi	r24, 0x11	; 17
    d176:	90 e0       	ldi	r25, 0x00	; 0
    d178:	c0 c0       	rjmp	.+384    	; 0xd2fa <f_rename+0x220>
    d17a:	2b 96       	adiw	r28, 0x0b	; 11
    d17c:	6e ad       	ldd	r22, Y+62	; 0x3e
    d17e:	7f ad       	ldd	r23, Y+63	; 0x3f
    d180:	2b 97       	sbiw	r28, 0x0b	; 11
    d182:	40 e2       	ldi	r20, 0x20	; 32
    d184:	50 e0       	ldi	r21, 0x00	; 0
    d186:	ce 01       	movw	r24, r28
    d188:	83 5a       	subi	r24, 0xA3	; 163
    d18a:	9f 4f       	sbci	r25, 0xFF	; 255
    d18c:	0e 94 85 49 	call	0x930a	; 0x930a <mem_cpy.part.0>
    d190:	4e e2       	ldi	r20, 0x2E	; 46
    d192:	50 e0       	ldi	r21, 0x00	; 0
    d194:	be 01       	movw	r22, r28
    d196:	61 5d       	subi	r22, 0xD1	; 209
    d198:	7f 4f       	sbci	r23, 0xFF	; 255
    d19a:	ce 01       	movw	r24, r28
    d19c:	01 96       	adiw	r24, 0x01	; 1
    d19e:	0e 94 85 49 	call	0x930a	; 0x930a <mem_cpy.part.0>
			} else
#endif
			{	/* At FAT/FAT32 volume */
				mem_cpy(buf, djo.dir, SZDIRE);			/* Save directory entry of the object */
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
    d1a2:	cf 57       	subi	r28, 0x7F	; 127
    d1a4:	df 4f       	sbci	r29, 0xFF	; 255
    d1a6:	68 81       	ld	r22, Y
    d1a8:	79 81       	ldd	r23, Y+1	; 0x01
    d1aa:	c1 58       	subi	r28, 0x81	; 129
    d1ac:	d0 40       	sbci	r29, 0x00	; 0
    d1ae:	ce 01       	movw	r24, r28
    d1b0:	01 96       	adiw	r24, 0x01	; 1
    d1b2:	0e 94 db 58 	call	0xb1b6	; 0xb1b6 <follow_path>
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
    d1b6:	8c 01       	movw	r16, r24
    d1b8:	89 2b       	or	r24, r25
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
    d1ba:	f9 f4       	brne	.+62     	; 0xd1fa <f_rename+0x120>
    d1bc:	4f 81       	ldd	r20, Y+7	; 0x07
    d1be:	58 85       	ldd	r21, Y+8	; 0x08
    d1c0:	69 85       	ldd	r22, Y+9	; 0x09
    d1c2:	7a 85       	ldd	r23, Y+10	; 0x0a
    d1c4:	8d a9       	ldd	r24, Y+53	; 0x35
    d1c6:	9e a9       	ldd	r25, Y+54	; 0x36
    d1c8:	af a9       	ldd	r26, Y+55	; 0x37
    d1ca:	b8 ad       	ldd	r27, Y+56	; 0x38
    d1cc:	48 17       	cp	r20, r24
    d1ce:	59 07       	cpc	r21, r25
    d1d0:	6a 07       	cpc	r22, r26
    d1d2:	7b 07       	cpc	r23, r27
    d1d4:	09 f0       	breq	.+2      	; 0xd1d8 <f_rename+0xfe>
    d1d6:	8b c0       	rjmp	.+278    	; 0xd2ee <f_rename+0x214>
    d1d8:	4f 85       	ldd	r20, Y+15	; 0x0f
    d1da:	58 89       	ldd	r21, Y+16	; 0x10
    d1dc:	69 89       	ldd	r22, Y+17	; 0x11
    d1de:	7a 89       	ldd	r23, Y+18	; 0x12
    d1e0:	21 96       	adiw	r28, 0x01	; 1
    d1e2:	8c ad       	ldd	r24, Y+60	; 0x3c
    d1e4:	9d ad       	ldd	r25, Y+61	; 0x3d
    d1e6:	ae ad       	ldd	r26, Y+62	; 0x3e
    d1e8:	bf ad       	ldd	r27, Y+63	; 0x3f
    d1ea:	21 97       	sbiw	r28, 0x01	; 1
    d1ec:	48 17       	cp	r20, r24
    d1ee:	59 07       	cpc	r21, r25
    d1f0:	6a 07       	cpc	r22, r26
    d1f2:	7b 07       	cpc	r23, r27
    d1f4:	09 f0       	breq	.+2      	; 0xd1f8 <f_rename+0x11e>
    d1f6:	7b c0       	rjmp	.+246    	; 0xd2ee <f_rename+0x214>
				}
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
    d1f8:	04 c0       	rjmp	.+8      	; 0xd202 <f_rename+0x128>
    d1fa:	04 30       	cpi	r16, 0x04	; 4
    d1fc:	11 05       	cpc	r17, r1
    d1fe:	09 f0       	breq	.+2      	; 0xd202 <f_rename+0x128>
					res = dir_register(&djn);			/* Register the new entry */
    d200:	b5 cf       	rjmp	.-150    	; 0xd16c <f_rename+0x92>
    d202:	ce 01       	movw	r24, r28
    d204:	01 96       	adiw	r24, 0x01	; 1
    d206:	0e 94 37 57 	call	0xae6e	; 0xae6e <dir_register>
					if (res == FR_OK) {
    d20a:	8c 01       	movw	r16, r24
    d20c:	89 2b       	or	r24, r25
    d20e:	09 f0       	breq	.+2      	; 0xd212 <f_rename+0x138>
						dir = djn.dir;					/* Copy directory entry of the object except name */
    d210:	ad cf       	rjmp	.-166    	; 0xd16c <f_rename+0x92>
    d212:	0b 8d       	ldd	r16, Y+27	; 0x1b
    d214:	1c 8d       	ldd	r17, Y+28	; 0x1c
    d216:	6d e5       	ldi	r22, 0x5D	; 93
    d218:	70 e0       	ldi	r23, 0x00	; 0
    d21a:	6c 0f       	add	r22, r28
    d21c:	7d 1f       	adc	r23, r29
    d21e:	63 5f       	subi	r22, 0xF3	; 243
    d220:	7f 4f       	sbci	r23, 0xFF	; 255
    d222:	43 e1       	ldi	r20, 0x13	; 19
    d224:	50 e0       	ldi	r21, 0x00	; 0
    d226:	c8 01       	movw	r24, r16
    d228:	0d 96       	adiw	r24, 0x0d	; 13
    d22a:	0e 94 85 49 	call	0x930a	; 0x930a <mem_cpy.part.0>
						mem_cpy(dir + 13, buf + 13, SZDIRE - 13);
						dir[DIR_Attr] = buf[DIR_Attr];
    d22e:	a9 96       	adiw	r28, 0x29	; 41
    d230:	8f ad       	ldd	r24, Y+63	; 0x3f
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
    d232:	a9 97       	sbiw	r28, 0x29	; 41
    d234:	84 ff       	sbrs	r24, 4
    d236:	80 62       	ori	r24, 0x20	; 32
    d238:	f8 01       	movw	r30, r16
						fs->wflag = 1;
    d23a:	83 87       	std	Z+11, r24	; 0x0b
    d23c:	ef 96       	adiw	r28, 0x3f	; 63
    d23e:	ee ac       	ldd	r14, Y+62	; 0x3e
    d240:	ff ac       	ldd	r15, Y+63	; 0x3f
    d242:	ef 97       	sbiw	r28, 0x3f	; 63
    d244:	bb 24       	eor	r11, r11
    d246:	b3 94       	inc	r11
    d248:	f7 01       	movw	r30, r14
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
    d24a:	b3 82       	std	Z+3, r11	; 0x03
    d24c:	f8 01       	movw	r30, r16
    d24e:	83 85       	ldd	r24, Z+11	; 0x0b
    d250:	84 ff       	sbrs	r24, 4
    d252:	3d c0       	rjmp	.+122    	; 0xd2ce <f_rename+0x1f4>
    d254:	4d a9       	ldd	r20, Y+53	; 0x35
    d256:	5e a9       	ldd	r21, Y+54	; 0x36
    d258:	6f a9       	ldd	r22, Y+55	; 0x37
    d25a:	78 ad       	ldd	r23, Y+56	; 0x38
    d25c:	8f 81       	ldd	r24, Y+7	; 0x07
    d25e:	98 85       	ldd	r25, Y+8	; 0x08
    d260:	a9 85       	ldd	r26, Y+9	; 0x09
    d262:	ba 85       	ldd	r27, Y+10	; 0x0a
    d264:	48 17       	cp	r20, r24
    d266:	59 07       	cpc	r21, r25
    d268:	6a 07       	cpc	r22, r26
    d26a:	7b 07       	cpc	r23, r27
							sect = clst2sect(fs, ld_clust(fs, dir));
    d26c:	81 f1       	breq	.+96     	; 0xd2ce <f_rename+0x1f4>
    d26e:	b8 01       	movw	r22, r16
    d270:	f7 01       	movw	r30, r14
    d272:	80 81       	ld	r24, Z
    d274:	0e 94 56 4b 	call	0x96ac	; 0x96ac <ld_clust.isra.4>
    d278:	ab 01       	movw	r20, r22
    d27a:	bc 01       	movw	r22, r24
    d27c:	c7 01       	movw	r24, r14
    d27e:	0e 94 ba 48 	call	0x9174	; 0x9174 <clst2sect>
    d282:	ab 01       	movw	r20, r22
							if (sect == 0) {
    d284:	bc 01       	movw	r22, r24
    d286:	41 15       	cp	r20, r1
    d288:	51 05       	cpc	r21, r1
    d28a:	61 05       	cpc	r22, r1
    d28c:	71 05       	cpc	r23, r1
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
    d28e:	91 f1       	breq	.+100    	; 0xd2f4 <f_rename+0x21a>
    d290:	c7 01       	movw	r24, r14
    d292:	0e 94 e5 4c 	call	0x99ca	; 0x99ca <move_window>
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
								if (res == FR_OK && dir[1] == '.') {
    d296:	8c 01       	movw	r16, r24
    d298:	89 2b       	or	r24, r25
    d29a:	09 f0       	breq	.+2      	; 0xd29e <f_rename+0x1c4>
							if (sect == 0) {
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
    d29c:	67 cf       	rjmp	.-306    	; 0xd16c <f_rename+0x92>
    d29e:	ef 96       	adiw	r28, 0x3f	; 63
    d2a0:	8e ad       	ldd	r24, Y+62	; 0x3e
    d2a2:	9f ad       	ldd	r25, Y+63	; 0x3f
								if (res == FR_OK && dir[1] == '.') {
    d2a4:	ef 97       	sbiw	r28, 0x3f	; 63
    d2a6:	fc 01       	movw	r30, r24
    d2a8:	ea 5a       	subi	r30, 0xAA	; 170
    d2aa:	ff 4f       	sbci	r31, 0xFF	; 255
    d2ac:	20 81       	ld	r18, Z
    d2ae:	2e 32       	cpi	r18, 0x2E	; 46
									st_clust(fs, dir, djn.obj.sclust);
    d2b0:	71 f4       	brne	.+28     	; 0xd2ce <f_rename+0x1f4>
    d2b2:	2f 81       	ldd	r18, Y+7	; 0x07
    d2b4:	38 85       	ldd	r19, Y+8	; 0x08
    d2b6:	49 85       	ldd	r20, Y+9	; 0x09
							if (sect == 0) {
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
    d2b8:	5a 85       	ldd	r21, Y+10	; 0x0a
    d2ba:	bc 01       	movw	r22, r24
    d2bc:	6b 5a       	subi	r22, 0xAB	; 171
								if (res == FR_OK && dir[1] == '.') {
									st_clust(fs, dir, djn.obj.sclust);
    d2be:	7f 4f       	sbci	r23, 0xFF	; 255
    d2c0:	0e 94 6b 4b 	call	0x96d6	; 0x96d6 <st_clust.isra.5>
									fs->wflag = 1;
    d2c4:	ef 96       	adiw	r28, 0x3f	; 63
    d2c6:	ee ad       	ldd	r30, Y+62	; 0x3e
    d2c8:	ff ad       	ldd	r31, Y+63	; 0x3f
    d2ca:	ef 97       	sbiw	r28, 0x3f	; 63
						}
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&djo);		/* Remove old entry */
    d2cc:	b3 82       	std	Z+3, r11	; 0x03
    d2ce:	ce 01       	movw	r24, r28
    d2d0:	8f 96       	adiw	r24, 0x2f	; 47
    d2d2:	0e 94 e1 55 	call	0xabc2	; 0xabc2 <dir_remove>
				if (res == FR_OK) {
    d2d6:	8c 01       	movw	r16, r24
    d2d8:	89 2b       	or	r24, r25
    d2da:	09 f0       	breq	.+2      	; 0xd2de <f_rename+0x204>
					res = sync_fs(fs);
    d2dc:	47 cf       	rjmp	.-370    	; 0xd16c <f_rename+0x92>
    d2de:	ef 96       	adiw	r28, 0x3f	; 63
    d2e0:	8e ad       	ldd	r24, Y+62	; 0x3e
    d2e2:	9f ad       	ldd	r25, Y+63	; 0x3f
    d2e4:	ef 97       	sbiw	r28, 0x3f	; 63
    d2e6:	0e 94 cb 4b 	call	0x9796	; 0x9796 <sync_fs>
    d2ea:	8c 01       	movw	r16, r24
    d2ec:	3f cf       	rjmp	.-386    	; 0xd16c <f_rename+0x92>
    d2ee:	08 e0       	ldi	r16, 0x08	; 8
    d2f0:	10 e0       	ldi	r17, 0x00	; 0
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
						fs->wflag = 1;
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
							sect = clst2sect(fs, ld_clust(fs, dir));
							if (sect == 0) {
								res = FR_INT_ERR;
    d2f2:	3c cf       	rjmp	.-392    	; 0xd16c <f_rename+0x92>
    d2f4:	02 e0       	ldi	r16, 0x02	; 2
    d2f6:	10 e0       	ldi	r17, 0x00	; 0
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    d2f8:	39 cf       	rjmp	.-398    	; 0xd16c <f_rename+0x92>
    d2fa:	ce 57       	subi	r28, 0x7E	; 126
    d2fc:	df 4f       	sbci	r29, 0xFF	; 255
    d2fe:	e9 e0       	ldi	r30, 0x09	; 9
    d300:	0c 94 05 e6 	jmp	0x1cc0a	; 0x1cc0a <__epilogue_restores__+0x12>

0000d304 <f_chmod>:
FRESULT f_chmod (
	const TCHAR* path,	/* Pointer to the file path */
	BYTE attr,			/* Attribute bits */
	BYTE mask			/* Attribute mask to change */
)
{
    d304:	a2 e3       	ldi	r26, 0x32	; 50
    d306:	b0 e0       	ldi	r27, 0x00	; 0
    d308:	e8 e8       	ldi	r30, 0x88	; 136
    d30a:	f9 e6       	ldi	r31, 0x69	; 105
    d30c:	0c 94 ea e5 	jmp	0x1cbd4	; 0x1cbd4 <__prologue_saves__+0x14>
    d310:	9a ab       	std	Y+50, r25	; 0x32
    d312:	89 ab       	std	Y+49, r24	; 0x31
    d314:	e6 2e       	mov	r14, r22
    d316:	f4 2e       	mov	r15, r20
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    d318:	42 e0       	ldi	r20, 0x02	; 2
    d31a:	be 01       	movw	r22, r28
    d31c:	61 5d       	subi	r22, 0xD1	; 209
    d31e:	7f 4f       	sbci	r23, 0xFF	; 255
    d320:	ce 01       	movw	r24, r28
    d322:	c1 96       	adiw	r24, 0x31	; 49
    d324:	0e 94 60 4d 	call	0x9ac0	; 0x9ac0 <mount_volume>
	if (res == FR_OK) {
    d328:	00 97       	sbiw	r24, 0x00	; 0
    d32a:	a9 f5       	brne	.+106    	; 0xd396 <f_chmod+0x92>
		dj.obj.fs = fs;
    d32c:	8f a5       	ldd	r24, Y+47	; 0x2f
    d32e:	98 a9       	ldd	r25, Y+48	; 0x30
    d330:	9a 83       	std	Y+2, r25	; 0x02
    d332:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    d334:	80 e0       	ldi	r24, 0x00	; 0
    d336:	92 e0       	ldi	r25, 0x02	; 2
    d338:	27 d1       	rcall	.+590    	; 0xd588 <ff_memalloc>
    d33a:	6c 01       	movw	r12, r24
    d33c:	00 97       	sbiw	r24, 0x00	; 0
    d33e:	b1 f0       	breq	.+44     	; 0xd36c <f_chmod+0x68>
    d340:	ef a5       	ldd	r30, Y+47	; 0x2f
    d342:	f8 a9       	ldd	r31, Y+48	; 0x30
    d344:	94 87       	std	Z+12, r25	; 0x0c
    d346:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);	/* Follow the file path */
    d348:	69 a9       	ldd	r22, Y+49	; 0x31
    d34a:	7a a9       	ldd	r23, Y+50	; 0x32
    d34c:	ce 01       	movw	r24, r28
    d34e:	01 96       	adiw	r24, 0x01	; 1
    d350:	0e 94 db 58 	call	0xb1b6	; 0xb1b6 <follow_path>
    d354:	8c 01       	movw	r16, r24
		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check object validity */
    d356:	89 2b       	or	r24, r25
    d358:	29 f4       	brne	.+10     	; 0xd364 <f_chmod+0x60>
    d35a:	88 a5       	ldd	r24, Y+40	; 0x28
    d35c:	80 7a       	andi	r24, 0xA0	; 160
    d35e:	49 f0       	breq	.+18     	; 0xd372 <f_chmod+0x6e>
    d360:	06 e0       	ldi	r16, 0x06	; 6
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    d362:	10 e0       	ldi	r17, 0x00	; 0
    d364:	c6 01       	movw	r24, r12
    d366:	13 d1       	rcall	.+550    	; 0xd58e <ff_memfree>
    d368:	c8 01       	movw	r24, r16


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    d36a:	15 c0       	rjmp	.+42     	; 0xd396 <f_chmod+0x92>
    d36c:	81 e1       	ldi	r24, 0x11	; 17
    d36e:	90 e0       	ldi	r25, 0x00	; 0
				fs->dirbuf[XDIR_Attr] = (attr & mask) | (fs->dirbuf[XDIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
				res = store_xdir(&dj);
			} else
#endif
			{
				dj.dir[DIR_Attr] = (attr & mask) | (dj.dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
    d370:	12 c0       	rjmp	.+36     	; 0xd396 <f_chmod+0x92>
    d372:	eb 8d       	ldd	r30, Y+27	; 0x1b
    d374:	fc 8d       	ldd	r31, Y+28	; 0x1c
    d376:	83 85       	ldd	r24, Z+11	; 0x0b
    d378:	6e 2d       	mov	r22, r14
    d37a:	68 27       	eor	r22, r24
    d37c:	6f 21       	and	r22, r15
    d37e:	67 72       	andi	r22, 0x27	; 39
    d380:	68 27       	eor	r22, r24
				fs->wflag = 1;
    d382:	63 87       	std	Z+11, r22	; 0x0b
    d384:	8f a5       	ldd	r24, Y+47	; 0x2f
    d386:	98 a9       	ldd	r25, Y+48	; 0x30
    d388:	21 e0       	ldi	r18, 0x01	; 1
    d38a:	fc 01       	movw	r30, r24
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
    d38c:	23 83       	std	Z+3, r18	; 0x03
    d38e:	0e 94 cb 4b 	call	0x9796	; 0x9796 <sync_fs>
    d392:	8c 01       	movw	r16, r24
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    d394:	e7 cf       	rjmp	.-50     	; 0xd364 <f_chmod+0x60>
    d396:	e2 96       	adiw	r28, 0x32	; 50
    d398:	e8 e0       	ldi	r30, 0x08	; 8
    d39a:	0c 94 06 e6 	jmp	0x1cc0c	; 0x1cc0c <__epilogue_restores__+0x14>

0000d39e <f_utime>:

FRESULT f_utime (
	const TCHAR* path,	/* Pointer to the file/directory name */
	const FILINFO* fno	/* Pointer to the timestamp to be set */
)
{
    d39e:	a2 e3       	ldi	r26, 0x32	; 50
    d3a0:	b0 e0       	ldi	r27, 0x00	; 0
    d3a2:	e5 ed       	ldi	r30, 0xD5	; 213
    d3a4:	f9 e6       	ldi	r31, 0x69	; 105
    d3a6:	0c 94 ea e5 	jmp	0x1cbd4	; 0x1cbd4 <__prologue_saves__+0x14>
    d3aa:	9a ab       	std	Y+50, r25	; 0x32
    d3ac:	89 ab       	std	Y+49, r24	; 0x31
    d3ae:	6b 01       	movw	r12, r22
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    d3b0:	42 e0       	ldi	r20, 0x02	; 2
    d3b2:	be 01       	movw	r22, r28
    d3b4:	61 5d       	subi	r22, 0xD1	; 209
    d3b6:	7f 4f       	sbci	r23, 0xFF	; 255
    d3b8:	ce 01       	movw	r24, r28
    d3ba:	c1 96       	adiw	r24, 0x31	; 49
    d3bc:	0e 94 60 4d 	call	0x9ac0	; 0x9ac0 <mount_volume>
	if (res == FR_OK) {
    d3c0:	00 97       	sbiw	r24, 0x00	; 0
    d3c2:	09 f0       	breq	.+2      	; 0xd3c6 <f_utime+0x28>
    d3c4:	41 c0       	rjmp	.+130    	; 0xd448 <f_utime+0xaa>
		dj.obj.fs = fs;
    d3c6:	8f a5       	ldd	r24, Y+47	; 0x2f
    d3c8:	98 a9       	ldd	r25, Y+48	; 0x30
    d3ca:	9a 83       	std	Y+2, r25	; 0x02
    d3cc:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    d3ce:	80 e0       	ldi	r24, 0x00	; 0
    d3d0:	92 e0       	ldi	r25, 0x02	; 2
    d3d2:	da d0       	rcall	.+436    	; 0xd588 <ff_memalloc>
    d3d4:	7c 01       	movw	r14, r24
    d3d6:	00 97       	sbiw	r24, 0x00	; 0
    d3d8:	b1 f0       	breq	.+44     	; 0xd406 <f_utime+0x68>
    d3da:	ef a5       	ldd	r30, Y+47	; 0x2f
    d3dc:	f8 a9       	ldd	r31, Y+48	; 0x30
    d3de:	94 87       	std	Z+12, r25	; 0x0c
    d3e0:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);	/* Follow the file path */
    d3e2:	69 a9       	ldd	r22, Y+49	; 0x31
    d3e4:	7a a9       	ldd	r23, Y+50	; 0x32
    d3e6:	ce 01       	movw	r24, r28
    d3e8:	01 96       	adiw	r24, 0x01	; 1
    d3ea:	0e 94 db 58 	call	0xb1b6	; 0xb1b6 <follow_path>
    d3ee:	8c 01       	movw	r16, r24
		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check object validity */
    d3f0:	89 2b       	or	r24, r25
    d3f2:	29 f4       	brne	.+10     	; 0xd3fe <f_utime+0x60>
    d3f4:	88 a5       	ldd	r24, Y+40	; 0x28
    d3f6:	80 7a       	andi	r24, 0xA0	; 160
    d3f8:	49 f0       	breq	.+18     	; 0xd40c <f_utime+0x6e>
    d3fa:	06 e0       	ldi	r16, 0x06	; 6
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    d3fc:	10 e0       	ldi	r17, 0x00	; 0
    d3fe:	c7 01       	movw	r24, r14
    d400:	c6 d0       	rcall	.+396    	; 0xd58e <ff_memfree>
    d402:	c8 01       	movw	r24, r16


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    d404:	21 c0       	rjmp	.+66     	; 0xd448 <f_utime+0xaa>
    d406:	81 e1       	ldi	r24, 0x11	; 17
    d408:	90 e0       	ldi	r25, 0x00	; 0
				st_dword(fs->dirbuf + XDIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
				res = store_xdir(&dj);
			} else
#endif
			{
				st_dword(dj.dir + DIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
    d40a:	1e c0       	rjmp	.+60     	; 0xd448 <f_utime+0xaa>
    d40c:	f6 01       	movw	r30, r12
    d40e:	44 81       	ldd	r20, Z+4	; 0x04
    d410:	55 81       	ldd	r21, Z+5	; 0x05
    d412:	60 e0       	ldi	r22, 0x00	; 0
    d414:	70 e0       	ldi	r23, 0x00	; 0
    d416:	ba 01       	movw	r22, r20
    d418:	55 27       	eor	r21, r21
    d41a:	44 27       	eor	r20, r20
    d41c:	86 81       	ldd	r24, Z+6	; 0x06
    d41e:	97 81       	ldd	r25, Z+7	; 0x07
    d420:	a0 e0       	ldi	r26, 0x00	; 0
    d422:	b0 e0       	ldi	r27, 0x00	; 0
    d424:	48 2b       	or	r20, r24
    d426:	59 2b       	or	r21, r25
    d428:	6a 2b       	or	r22, r26
    d42a:	7b 2b       	or	r23, r27
    d42c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    d42e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    d430:	46 96       	adiw	r24, 0x16	; 22
    d432:	0e 94 16 48 	call	0x902c	; 0x902c <st_dword>
				fs->wflag = 1;
    d436:	8f a5       	ldd	r24, Y+47	; 0x2f
    d438:	98 a9       	ldd	r25, Y+48	; 0x30
    d43a:	21 e0       	ldi	r18, 0x01	; 1
    d43c:	fc 01       	movw	r30, r24
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
    d43e:	23 83       	std	Z+3, r18	; 0x03
    d440:	0e 94 cb 4b 	call	0x9796	; 0x9796 <sync_fs>
    d444:	8c 01       	movw	r16, r24
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    d446:	db cf       	rjmp	.-74     	; 0xd3fe <f_utime+0x60>
    d448:	e2 96       	adiw	r28, 0x32	; 50
    d44a:	e8 e0       	ldi	r30, 0x08	; 8
    d44c:	0c 94 06 e6 	jmp	0x1cc0c	; 0x1cc0c <__epilogue_restores__+0x14>

0000d450 <f_getlabel>:
FRESULT f_getlabel (
	const TCHAR* path,	/* Logical drive number */
	TCHAR* label,		/* Buffer to store the volume label */
	DWORD* vsn			/* Variable to store the volume serial number */
)
{
    d450:	a2 e3       	ldi	r26, 0x32	; 50
    d452:	b0 e0       	ldi	r27, 0x00	; 0
    d454:	ee e2       	ldi	r30, 0x2E	; 46
    d456:	fa e6       	ldi	r31, 0x6A	; 106
    d458:	0c 94 e6 e5 	jmp	0x1cbcc	; 0x1cbcc <__prologue_saves__+0xc>
    d45c:	9a ab       	std	Y+50, r25	; 0x32
    d45e:	89 ab       	std	Y+49, r24	; 0x31
    d460:	6b 01       	movw	r12, r22
    d462:	5a 01       	movw	r10, r20
	FATFS *fs;
	UINT si, di;
	WCHAR wc;

	/* Get logical drive */
	res = mount_volume(&path, &fs, 0);
    d464:	40 e0       	ldi	r20, 0x00	; 0
    d466:	be 01       	movw	r22, r28
    d468:	61 5d       	subi	r22, 0xD1	; 209
    d46a:	7f 4f       	sbci	r23, 0xFF	; 255
    d46c:	ce 01       	movw	r24, r28
    d46e:	c1 96       	adiw	r24, 0x31	; 49
    d470:	0e 94 60 4d 	call	0x9ac0	; 0x9ac0 <mount_volume>
    d474:	7c 01       	movw	r14, r24

	/* Get volume label */
	if (res == FR_OK && label) {
    d476:	89 2b       	or	r24, r25
    d478:	09 f0       	breq	.+2      	; 0xd47c <f_getlabel+0x2c>
    d47a:	81 c0       	rjmp	.+258    	; 0xd57e <f_getlabel+0x12e>
    d47c:	c1 14       	cp	r12, r1
    d47e:	d1 04       	cpc	r13, r1
    d480:	09 f4       	brne	.+2      	; 0xd484 <f_getlabel+0x34>
    d482:	53 c0       	rjmp	.+166    	; 0xd52a <f_getlabel+0xda>
		dj.obj.fs = fs; dj.obj.sclust = 0;	/* Open root directory */
    d484:	8f a5       	ldd	r24, Y+47	; 0x2f
    d486:	98 a9       	ldd	r25, Y+48	; 0x30
    d488:	9a 83       	std	Y+2, r25	; 0x02
    d48a:	89 83       	std	Y+1, r24	; 0x01
    d48c:	1f 82       	std	Y+7, r1	; 0x07
    d48e:	18 86       	std	Y+8, r1	; 0x08
    d490:	19 86       	std	Y+9, r1	; 0x09
    d492:	1a 86       	std	Y+10, r1	; 0x0a
		res = dir_sdi(&dj, 0);
    d494:	40 e0       	ldi	r20, 0x00	; 0
    d496:	50 e0       	ldi	r21, 0x00	; 0
    d498:	ba 01       	movw	r22, r20
    d49a:	ce 01       	movw	r24, r28
    d49c:	01 96       	adiw	r24, 0x01	; 1
    d49e:	0e 94 75 51 	call	0xa2ea	; 0xa2ea <dir_sdi>
		if (res == FR_OK) {
    d4a2:	00 97       	sbiw	r24, 0x00	; 0
    d4a4:	e9 f5       	brne	.+122    	; 0xd520 <f_getlabel+0xd0>
		 	res = DIR_READ_LABEL(&dj);		/* Find a volume label entry */
    d4a6:	61 e0       	ldi	r22, 0x01	; 1
    d4a8:	70 e0       	ldi	r23, 0x00	; 0
    d4aa:	ce 01       	movw	r24, r28
    d4ac:	01 96       	adiw	r24, 0x01	; 1
    d4ae:	0e 94 0f 55 	call	0xaa1e	; 0xaa1e <dir_read>
		 	if (res == FR_OK) {
    d4b2:	00 97       	sbiw	r24, 0x00	; 0
    d4b4:	a9 f5       	brne	.+106    	; 0xd520 <f_getlabel+0xd0>
    d4b6:	00 e0       	ldi	r16, 0x00	; 0
    d4b8:	10 e0       	ldi	r17, 0x00	; 0
    d4ba:	80 e0       	ldi	r24, 0x00	; 0
    d4bc:	90 e0       	ldi	r25, 0x00	; 0
				} else
#endif
				{
					si = di = 0;		/* Extract volume label from AM_VOL entry */
					while (si < 11) {
						wc = dj.dir[si++];
    d4be:	4c 01       	movw	r8, r24
    d4c0:	2f ef       	ldi	r18, 0xFF	; 255
    d4c2:	82 1a       	sub	r8, r18
    d4c4:	92 0a       	sbc	r9, r18
    d4c6:	2b 8d       	ldd	r18, Y+27	; 0x1b
    d4c8:	3c 8d       	ldd	r19, Y+28	; 0x1c
    d4ca:	f9 01       	movw	r30, r18
    d4cc:	e8 0f       	add	r30, r24
    d4ce:	f9 1f       	adc	r31, r25
    d4d0:	80 81       	ld	r24, Z
#if FF_USE_LFN && FF_LFN_UNICODE >= 1 	/* Unicode output */
						if (dbc_1st((BYTE)wc) && si < 11) wc = wc << 8 | dj.dir[si++];	/* Is it a DBC? */
						wc = ff_oem2uni(wc, CODEPAGE);					/* Convert it into Unicode */
    d4d2:	65 eb       	ldi	r22, 0xB5	; 181
    d4d4:	71 e0       	ldi	r23, 0x01	; 1
    d4d6:	90 e0       	ldi	r25, 0x00	; 0
    d4d8:	90 d0       	rcall	.+288    	; 0xd5fa <ff_oem2uni>
						if (wc != 0) wc = put_utf(wc, &label[di], 4);	/* Put it in Unicode */
    d4da:	00 97       	sbiw	r24, 0x00	; 0
    d4dc:	19 f4       	brne	.+6      	; 0xd4e4 <f_getlabel+0x94>
						if (wc == 0) { di = 0; break; }
    d4de:	00 e0       	ldi	r16, 0x00	; 0
    d4e0:	10 e0       	ldi	r17, 0x00	; 0
    d4e2:	13 c0       	rjmp	.+38     	; 0xd50a <f_getlabel+0xba>
					while (si < 11) {
						wc = dj.dir[si++];
#if FF_USE_LFN && FF_LFN_UNICODE >= 1 	/* Unicode output */
						if (dbc_1st((BYTE)wc) && si < 11) wc = wc << 8 | dj.dir[si++];	/* Is it a DBC? */
						wc = ff_oem2uni(wc, CODEPAGE);					/* Convert it into Unicode */
						if (wc != 0) wc = put_utf(wc, &label[di], 4);	/* Put it in Unicode */
    d4e4:	bc 01       	movw	r22, r24
    d4e6:	80 e0       	ldi	r24, 0x00	; 0
    d4e8:	90 e0       	ldi	r25, 0x00	; 0
    d4ea:	24 e0       	ldi	r18, 0x04	; 4
    d4ec:	30 e0       	ldi	r19, 0x00	; 0
    d4ee:	a6 01       	movw	r20, r12
    d4f0:	40 0f       	add	r20, r16
    d4f2:	51 1f       	adc	r21, r17
    d4f4:	0e 94 90 49 	call	0x9320	; 0x9320 <put_utf>
    d4f8:	90 e0       	ldi	r25, 0x00	; 0
						if (wc == 0) { di = 0; break; }
    d4fa:	00 97       	sbiw	r24, 0x00	; 0
    d4fc:	81 f3       	breq	.-32     	; 0xd4de <f_getlabel+0x8e>
						di += wc;
    d4fe:	08 0f       	add	r16, r24
    d500:	19 1f       	adc	r17, r25
    d502:	c4 01       	movw	r24, r8
					label[di] = 0;
				} else
#endif
				{
					si = di = 0;		/* Extract volume label from AM_VOL entry */
					while (si < 11) {
    d504:	8b 30       	cpi	r24, 0x0B	; 11
    d506:	91 05       	cpc	r25, r1
    d508:	d1 f6       	brne	.-76     	; 0xd4be <f_getlabel+0x6e>
    d50a:	f6 01       	movw	r30, r12
    d50c:	e0 0f       	add	r30, r16
    d50e:	f1 1f       	adc	r31, r17
#else									/* ANSI/OEM output */
						label[di++] = (TCHAR)wc;
#endif
					}
					do {				/* Truncate trailing spaces */
						label[di] = 0;
    d510:	10 82       	st	Z, r1
						if (di == 0) break;
    d512:	ce 16       	cp	r12, r30
    d514:	df 06       	cpc	r13, r31
    d516:	49 f0       	breq	.+18     	; 0xd52a <f_getlabel+0xda>
					} while (label[--di] == ' ');
    d518:	82 91       	ld	r24, -Z
    d51a:	80 32       	cpi	r24, 0x20	; 32
    d51c:	c9 f3       	breq	.-14     	; 0xd510 <f_getlabel+0xc0>
    d51e:	05 c0       	rjmp	.+10     	; 0xd52a <f_getlabel+0xda>
				}
			}
		}
		if (res == FR_NO_FILE) {	/* No label entry and return nul string */
    d520:	84 30       	cpi	r24, 0x04	; 4
    d522:	91 05       	cpc	r25, r1
    d524:	59 f5       	brne	.+86     	; 0xd57c <f_getlabel+0x12c>
			label[0] = 0;
    d526:	f6 01       	movw	r30, r12
    d528:	10 82       	st	Z, r1
			res = FR_OK;
		}
	}

	/* Get volume serial number */
	if (res == FR_OK && vsn) {
    d52a:	a1 14       	cp	r10, r1
    d52c:	b1 04       	cpc	r11, r1
    d52e:	39 f1       	breq	.+78     	; 0xd57e <f_getlabel+0x12e>
		res = move_window(fs, fs->volbase);
    d530:	8f a5       	ldd	r24, Y+47	; 0x2f
    d532:	98 a9       	ldd	r25, Y+48	; 0x30
    d534:	fc 01       	movw	r30, r24
    d536:	41 a1       	ldd	r20, Z+33	; 0x21
    d538:	52 a1       	ldd	r21, Z+34	; 0x22
    d53a:	63 a1       	ldd	r22, Z+35	; 0x23
    d53c:	74 a1       	ldd	r23, Z+36	; 0x24
    d53e:	0e 94 e5 4c 	call	0x99ca	; 0x99ca <move_window>
    d542:	7c 01       	movw	r14, r24
		if (res == FR_OK) {
    d544:	89 2b       	or	r24, r25
    d546:	d9 f4       	brne	.+54     	; 0xd57e <f_getlabel+0x12e>
			switch (fs->fs_type) {
    d548:	ef a5       	ldd	r30, Y+47	; 0x2f
    d54a:	f8 a9       	ldd	r31, Y+48	; 0x30
    d54c:	80 81       	ld	r24, Z
    d54e:	83 30       	cpi	r24, 0x03	; 3
    d550:	29 f0       	breq	.+10     	; 0xd55c <f_getlabel+0x10c>
    d552:	84 30       	cpi	r24, 0x04	; 4
    d554:	31 f0       	breq	.+12     	; 0xd562 <f_getlabel+0x112>

			case FS_FAT32:
				di = BS_VolID32; break;

			default:
				di = BS_VolID;
    d556:	87 e2       	ldi	r24, 0x27	; 39
    d558:	90 e0       	ldi	r25, 0x00	; 0
    d55a:	05 c0       	rjmp	.+10     	; 0xd566 <f_getlabel+0x116>
			switch (fs->fs_type) {
			case FS_EXFAT:
				di = BPB_VolIDEx; break;

			case FS_FAT32:
				di = BS_VolID32; break;
    d55c:	83 e4       	ldi	r24, 0x43	; 67
    d55e:	90 e0       	ldi	r25, 0x00	; 0
    d560:	02 c0       	rjmp	.+4      	; 0xd566 <f_getlabel+0x116>
	if (res == FR_OK && vsn) {
		res = move_window(fs, fs->volbase);
		if (res == FR_OK) {
			switch (fs->fs_type) {
			case FS_EXFAT:
				di = BPB_VolIDEx; break;
    d562:	84 e6       	ldi	r24, 0x64	; 100
    d564:	90 e0       	ldi	r25, 0x00	; 0
				di = BS_VolID32; break;

			default:
				di = BS_VolID;
			}
			*vsn = ld_dword(fs->win + di);
    d566:	f5 96       	adiw	r30, 0x35	; 53
    d568:	8e 0f       	add	r24, r30
    d56a:	9f 1f       	adc	r25, r31
    d56c:	0e 94 01 48 	call	0x9002	; 0x9002 <ld_dword>
    d570:	f5 01       	movw	r30, r10
    d572:	60 83       	st	Z, r22
    d574:	71 83       	std	Z+1, r23	; 0x01
    d576:	82 83       	std	Z+2, r24	; 0x02
    d578:	93 83       	std	Z+3, r25	; 0x03
    d57a:	01 c0       	rjmp	.+2      	; 0xd57e <f_getlabel+0x12e>
						if (di == 0) break;
					} while (label[--di] == ' ');
				}
			}
		}
		if (res == FR_NO_FILE) {	/* No label entry and return nul string */
    d57c:	7c 01       	movw	r14, r24
			*vsn = ld_dword(fs->win + di);
		}
	}

	LEAVE_FF(fs, res);
}
    d57e:	c7 01       	movw	r24, r14
    d580:	e2 96       	adiw	r28, 0x32	; 50
    d582:	ec e0       	ldi	r30, 0x0C	; 12
    d584:	0c 94 02 e6 	jmp	0x1cc04	; 0x1cc04 <__epilogue_restores__+0xc>

0000d588 <ff_memalloc>:

void* ff_memalloc (	/* Returns pointer to the allocated memory block (null if not enough core) */
	UINT msize		/* Number of bytes to allocate */
)
{
	return safemalloc(msize);	/* Allocate a new memory block with POSIX API */
    d588:	0c 94 ae 29 	jmp	0x535c	; 0x535c <safemalloc>
}
    d58c:	08 95       	ret

0000d58e <ff_memfree>:

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free (nothing to do if null) */
)
{
	safefree(mblock);	/* Free the memory block with POSIX API */
    d58e:	0c 94 cf 29 	jmp	0x539e	; 0x539e <safefree>
    d592:	08 95       	ret

0000d594 <ff_uni2oem>:
#if FF_CODE_PAGE != 0 && FF_CODE_PAGE < 900
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
    d594:	cf 92       	push	r12
    d596:	df 92       	push	r13
    d598:	ef 92       	push	r14
    d59a:	ff 92       	push	r15
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (uni < 0x80) {	/* ASCII? */
    d59c:	60 38       	cpi	r22, 0x80	; 128
    d59e:	71 05       	cpc	r23, r1
    d5a0:	81 05       	cpc	r24, r1
    d5a2:	91 05       	cpc	r25, r1
    d5a4:	10 f4       	brcc	.+4      	; 0xd5aa <ff_uni2oem+0x16>
		c = (WCHAR)uni;
    d5a6:	cb 01       	movw	r24, r22
    d5a8:	23 c0       	rjmp	.+70     	; 0xd5f0 <ff_uni2oem+0x5c>

	} else {			/* Non-ASCII */
		if (uni < 0x10000 && cp == FF_CODE_PAGE) {	/* Is it in BMP and valid code page? */
    d5aa:	61 15       	cp	r22, r1
    d5ac:	71 05       	cpc	r23, r1
    d5ae:	21 e0       	ldi	r18, 0x01	; 1
    d5b0:	82 07       	cpc	r24, r18
    d5b2:	91 05       	cpc	r25, r1
    d5b4:	d8 f4       	brcc	.+54     	; 0xd5ec <ff_uni2oem+0x58>
    d5b6:	45 3b       	cpi	r20, 0xB5	; 181
    d5b8:	51 40       	sbci	r21, 0x01	; 1
    d5ba:	c1 f4       	brne	.+48     	; 0xd5ec <ff_uni2oem+0x58>
    d5bc:	e8 e0       	ldi	r30, 0x08	; 8
    d5be:	f6 e0       	ldi	r31, 0x06	; 6
    d5c0:	20 e0       	ldi	r18, 0x00	; 0
    d5c2:	30 e0       	ldi	r19, 0x00	; 0
			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
    d5c4:	c1 90       	ld	r12, Z+
    d5c6:	d1 90       	ld	r13, Z+
    d5c8:	e1 2c       	mov	r14, r1
    d5ca:	f1 2c       	mov	r15, r1
    d5cc:	6c 15       	cp	r22, r12
    d5ce:	7d 05       	cpc	r23, r13
    d5d0:	8e 05       	cpc	r24, r14
    d5d2:	9f 05       	cpc	r25, r15
    d5d4:	29 f0       	breq	.+10     	; 0xd5e0 <ff_uni2oem+0x4c>
    d5d6:	2f 5f       	subi	r18, 0xFF	; 255
    d5d8:	3f 4f       	sbci	r19, 0xFF	; 255
    d5da:	20 38       	cpi	r18, 0x80	; 128
    d5dc:	31 05       	cpc	r19, r1
    d5de:	91 f7       	brne	.-28     	; 0xd5c4 <ff_uni2oem+0x30>
			c = (c + 0x80) & 0xFF;
    d5e0:	b9 01       	movw	r22, r18
    d5e2:	60 58       	subi	r22, 0x80	; 128
    d5e4:	7f 4f       	sbci	r23, 0xFF	; 255
    d5e6:	cb 01       	movw	r24, r22
    d5e8:	99 27       	eor	r25, r25
    d5ea:	02 c0       	rjmp	.+4      	; 0xd5f0 <ff_uni2oem+0x5c>
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
	WCHAR c = 0;
    d5ec:	80 e0       	ldi	r24, 0x00	; 0
    d5ee:	90 e0       	ldi	r25, 0x00	; 0
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
    d5f0:	ff 90       	pop	r15
    d5f2:	ef 90       	pop	r14
    d5f4:	df 90       	pop	r13
    d5f6:	cf 90       	pop	r12
    d5f8:	08 95       	ret

0000d5fa <ff_oem2uni>:
{
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (oem < 0x80) {	/* ASCII? */
    d5fa:	80 38       	cpi	r24, 0x80	; 128
    d5fc:	91 05       	cpc	r25, r1
    d5fe:	88 f0       	brcs	.+34     	; 0xd622 <ff_oem2uni+0x28>
		c = oem;

	} else {			/* Extended char */
		if (cp == FF_CODE_PAGE) {	/* Is it a valid code page? */
    d600:	65 3b       	cpi	r22, 0xB5	; 181
    d602:	71 40       	sbci	r23, 0x01	; 1
    d604:	61 f4       	brne	.+24     	; 0xd61e <ff_oem2uni+0x24>
			if (oem < 0x100) c = p[oem - 0x80];
    d606:	8f 3f       	cpi	r24, 0xFF	; 255
    d608:	91 05       	cpc	r25, r1
    d60a:	09 f0       	breq	.+2      	; 0xd60e <ff_oem2uni+0x14>
    d60c:	40 f4       	brcc	.+16     	; 0xd61e <ff_oem2uni+0x24>
    d60e:	88 0f       	add	r24, r24
    d610:	99 1f       	adc	r25, r25
    d612:	fc 01       	movw	r30, r24
    d614:	e8 5f       	subi	r30, 0xF8	; 248
    d616:	fa 4f       	sbci	r31, 0xFA	; 250
    d618:	80 81       	ld	r24, Z
    d61a:	91 81       	ldd	r25, Z+1	; 0x01
    d61c:	08 95       	ret
WCHAR ff_oem2uni (	/* Returns Unicode character in UTF-16, zero on error */
	WCHAR	oem,	/* OEM code to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
	WCHAR c = 0;
    d61e:	80 e0       	ldi	r24, 0x00	; 0
    d620:	90 e0       	ldi	r25, 0x00	; 0
			if (oem < 0x100) c = p[oem - 0x80];
		}
	}

	return c;
}
    d622:	08 95       	ret

0000d624 <ff_wtoupper>:

		0x0000	/* EOT */
	};


	if (uni < 0x10000) {	/* Is it in BMP? */
    d624:	61 15       	cp	r22, r1
    d626:	71 05       	cpc	r23, r1
    d628:	21 e0       	ldi	r18, 0x01	; 1
    d62a:	82 07       	cpc	r24, r18
    d62c:	91 05       	cpc	r25, r1
    d62e:	08 f0       	brcs	.+2      	; 0xd632 <ff_wtoupper+0xe>
    d630:	5a c0       	rjmp	.+180    	; 0xd6e6 <ff_wtoupper+0xc2>
		uc = (WORD)uni;
		p = uc < 0x1000 ? cvt1 : cvt2;
    d632:	61 15       	cp	r22, r1
    d634:	80 e1       	ldi	r24, 0x10	; 16
    d636:	78 07       	cpc	r23, r24
    d638:	18 f0       	brcs	.+6      	; 0xd640 <ff_wtoupper+0x1c>
    d63a:	aa e5       	ldi	r26, 0x5A	; 90
    d63c:	b3 e0       	ldi	r27, 0x03	; 3
    d63e:	02 c0       	rjmp	.+4      	; 0xd644 <ff_wtoupper+0x20>
    d640:	a6 e1       	ldi	r26, 0x16	; 22
    d642:	b4 e0       	ldi	r27, 0x04	; 4
		for (;;) {
			bc = *p++;								/* Get the block base */
    d644:	2d 91       	ld	r18, X+
    d646:	3c 91       	ld	r19, X
    d648:	11 97       	sbiw	r26, 0x01	; 1
			if (bc == 0 || uc < bc) break;			/* Not matched? */
    d64a:	21 15       	cp	r18, r1
    d64c:	31 05       	cpc	r19, r1
    d64e:	09 f4       	brne	.+2      	; 0xd652 <ff_wtoupper+0x2e>
    d650:	48 c0       	rjmp	.+144    	; 0xd6e2 <ff_wtoupper+0xbe>
    d652:	62 17       	cp	r22, r18
    d654:	73 07       	cpc	r23, r19
    d656:	08 f4       	brcc	.+2      	; 0xd65a <ff_wtoupper+0x36>
    d658:	44 c0       	rjmp	.+136    	; 0xd6e2 <ff_wtoupper+0xbe>
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
    d65a:	14 96       	adiw	r26, 0x04	; 4
    d65c:	fd 01       	movw	r30, r26
    d65e:	32 97       	sbiw	r30, 0x02	; 2
    d660:	80 81       	ld	r24, Z
    d662:	91 81       	ldd	r25, Z+1	; 0x01
    d664:	e9 2f       	mov	r30, r25
    d666:	ff 27       	eor	r31, r31
    d668:	99 27       	eor	r25, r25
			if (uc < bc + nc) {	/* In the block? */
    d66a:	a9 01       	movw	r20, r18
    d66c:	48 0f       	add	r20, r24
    d66e:	59 1f       	adc	r21, r25
    d670:	64 17       	cp	r22, r20
    d672:	75 07       	cpc	r23, r21
    d674:	70 f5       	brcc	.+92     	; 0xd6d2 <ff_wtoupper+0xae>
				switch (cmd) {
    d676:	e9 30       	cpi	r30, 0x09	; 9
    d678:	f1 05       	cpc	r31, r1
    d67a:	98 f5       	brcc	.+102    	; 0xd6e2 <ff_wtoupper+0xbe>
    d67c:	ec 54       	subi	r30, 0x4C	; 76
    d67e:	ff 4f       	sbci	r31, 0xFF	; 255
    d680:	0c 94 9c e5 	jmp	0x1cb38	; 0x1cb38 <__tablejump2__>
				case 0:	uc = p[uc - bc]; break;		/* Table conversion */
    d684:	62 1b       	sub	r22, r18
    d686:	73 0b       	sbc	r23, r19
    d688:	fb 01       	movw	r30, r22
    d68a:	ee 0f       	add	r30, r30
    d68c:	ff 1f       	adc	r31, r31
    d68e:	ea 0f       	add	r30, r26
    d690:	fb 1f       	adc	r31, r27
    d692:	60 81       	ld	r22, Z
    d694:	71 81       	ldd	r23, Z+1	; 0x01
    d696:	25 c0       	rjmp	.+74     	; 0xd6e2 <ff_wtoupper+0xbe>
				case 1:	uc -= (uc - bc) & 1; break;	/* Case pairs */
    d698:	cb 01       	movw	r24, r22
    d69a:	82 1b       	sub	r24, r18
    d69c:	93 0b       	sbc	r25, r19
    d69e:	81 70       	andi	r24, 0x01	; 1
    d6a0:	99 27       	eor	r25, r25
    d6a2:	68 1b       	sub	r22, r24
    d6a4:	79 0b       	sbc	r23, r25
    d6a6:	1d c0       	rjmp	.+58     	; 0xd6e2 <ff_wtoupper+0xbe>
				case 2: uc -= 16; break;			/* Shift -16 */
    d6a8:	60 51       	subi	r22, 0x10	; 16
    d6aa:	71 09       	sbc	r23, r1
    d6ac:	1a c0       	rjmp	.+52     	; 0xd6e2 <ff_wtoupper+0xbe>
				case 3:	uc -= 32; break;			/* Shift -32 */
    d6ae:	60 52       	subi	r22, 0x20	; 32
    d6b0:	71 09       	sbc	r23, r1
    d6b2:	17 c0       	rjmp	.+46     	; 0xd6e2 <ff_wtoupper+0xbe>
				case 4:	uc -= 48; break;			/* Shift -48 */
    d6b4:	60 53       	subi	r22, 0x30	; 48
    d6b6:	71 09       	sbc	r23, r1
    d6b8:	14 c0       	rjmp	.+40     	; 0xd6e2 <ff_wtoupper+0xbe>
				case 5:	uc -= 26; break;			/* Shift -26 */
    d6ba:	6a 51       	subi	r22, 0x1A	; 26
    d6bc:	71 09       	sbc	r23, r1
    d6be:	11 c0       	rjmp	.+34     	; 0xd6e2 <ff_wtoupper+0xbe>
				case 6:	uc += 8; break;				/* Shift +8 */
    d6c0:	68 5f       	subi	r22, 0xF8	; 248
    d6c2:	7f 4f       	sbci	r23, 0xFF	; 255
    d6c4:	0e c0       	rjmp	.+28     	; 0xd6e2 <ff_wtoupper+0xbe>
				case 7: uc -= 80; break;			/* Shift -80 */
    d6c6:	60 55       	subi	r22, 0x50	; 80
    d6c8:	71 09       	sbc	r23, r1
    d6ca:	0b c0       	rjmp	.+22     	; 0xd6e2 <ff_wtoupper+0xbe>
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
    d6cc:	60 56       	subi	r22, 0x60	; 96
    d6ce:	7c 41       	sbci	r23, 0x1C	; 28
    d6d0:	08 c0       	rjmp	.+16     	; 0xd6e2 <ff_wtoupper+0xbe>
				}
				break;
			}
			if (cmd == 0) p += nc;	/* Skip table if needed */
    d6d2:	ef 2b       	or	r30, r31
    d6d4:	09 f0       	breq	.+2      	; 0xd6d8 <ff_wtoupper+0xb4>
    d6d6:	b6 cf       	rjmp	.-148    	; 0xd644 <ff_wtoupper+0x20>
    d6d8:	88 0f       	add	r24, r24
    d6da:	99 1f       	adc	r25, r25
    d6dc:	a8 0f       	add	r26, r24
    d6de:	b9 1f       	adc	r27, r25
    d6e0:	b1 cf       	rjmp	.-158    	; 0xd644 <ff_wtoupper+0x20>
		}
		uni = uc;
    d6e2:	80 e0       	ldi	r24, 0x00	; 0
    d6e4:	90 e0       	ldi	r25, 0x00	; 0
	}

	return uni;
}
    d6e6:	08 95       	ret

0000d6e8 <disk_status>:

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
	switch (pdrv) {
    d6e8:	81 11       	cpse	r24, r1
#ifdef DRV_MMC
	case DEV_MMC :
		return ( mmc_disk_status() );
    d6ea:	02 c0       	rjmp	.+4      	; 0xd6f0 <disk_status+0x8>
    d6ec:	9b c1       	rjmp	.+822    	; 0xda24 <mmc_disk_status>
#ifdef DRV_USB
	case DEV_USB :
		return ( usb_disk_status() );
#endif
	}
	return STA_NOINIT;
    d6ee:	08 95       	ret
}
    d6f0:	81 e0       	ldi	r24, 0x01	; 1
    d6f2:	08 95       	ret

0000d6f4 <disk_initialize>:
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{

	switch (pdrv) {
    d6f4:	81 11       	cpse	r24, r1
#ifdef DRV_MMC
	case DEV_MMC :
		return ( mmc_disk_initialize() );
    d6f6:	02 c0       	rjmp	.+4      	; 0xd6fc <disk_initialize+0x8>
    d6f8:	f8 c0       	rjmp	.+496    	; 0xd8ea <mmc_disk_initialize>
#ifdef DRV_USB
	case DEV_USB :
		return ( usb_disk_initialize() );
#endif
	}
	return STA_NOINIT;
    d6fa:	08 95       	ret
}
    d6fc:	81 e0       	ldi	r24, 0x01	; 1
    d6fe:	08 95       	ret

0000d700 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	LBA_t sector,	/* Start sector in LBA */
	UINT count		/* Number of sectors to read */
)
{
    d700:	0f 93       	push	r16
    d702:	1f 93       	push	r17
    d704:	fb 01       	movw	r30, r22
	switch (pdrv) {
    d706:	81 11       	cpse	r24, r1
    d708:	06 c0       	rjmp	.+12     	; 0xd716 <disk_read+0x16>
    d70a:	ba 01       	movw	r22, r20
    d70c:	a9 01       	movw	r20, r18
    d70e:	cf 01       	movw	r24, r30
#ifdef DRV_MMC
	case DEV_MMC :
		return ( mmc_disk_read(buff, sector, count) );
    d710:	98 01       	movw	r18, r16
    d712:	8b d1       	rcall	.+790    	; 0xda2a <mmc_disk_read>
    d714:	02 c0       	rjmp	.+4      	; 0xd71a <disk_read+0x1a>
#ifdef DRV_USB
	case DEV_USB :
		return ( usb_disk_read(buff, sector, count) );
#endif
	}
	return RES_PARERR;
    d716:	84 e0       	ldi	r24, 0x04	; 4
    d718:	90 e0       	ldi	r25, 0x00	; 0
}
    d71a:	1f 91       	pop	r17
    d71c:	0f 91       	pop	r16
    d71e:	08 95       	ret

0000d720 <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	LBA_t sector,		/* Start sector in LBA */
	UINT count			/* Number of sectors to write */
)
{
    d720:	0f 93       	push	r16
    d722:	1f 93       	push	r17
    d724:	fb 01       	movw	r30, r22
	switch (pdrv) {
    d726:	81 11       	cpse	r24, r1
    d728:	06 c0       	rjmp	.+12     	; 0xd736 <disk_write+0x16>
    d72a:	ba 01       	movw	r22, r20
    d72c:	a9 01       	movw	r20, r18
    d72e:	cf 01       	movw	r24, r30
#ifdef DRV_MMC
	case DEV_MMC :
		return ( mmc_disk_write(buff, sector, count) );
    d730:	98 01       	movw	r18, r16
    d732:	c1 d1       	rcall	.+898    	; 0xdab6 <mmc_disk_write>
    d734:	02 c0       	rjmp	.+4      	; 0xd73a <disk_write+0x1a>
	case DEV_USB :
		return ( usb_disk_write(buff, sector, count) );
#endif
	}

	return RES_PARERR;
    d736:	84 e0       	ldi	r24, 0x04	; 4
    d738:	90 e0       	ldi	r25, 0x00	; 0
}
    d73a:	1f 91       	pop	r17
    d73c:	0f 91       	pop	r16
    d73e:	08 95       	ret

0000d740 <disk_ioctl>:
DRESULT disk_ioctl (
    BYTE pdrv,      /* Physical drive nmuber (0..) */
    BYTE cmd,       /* Control code */
    void *buff      /* Buffer to send/receive control data */
)
{
    d740:	96 2f       	mov	r25, r22
    switch (pdrv) {
    d742:	81 11       	cpse	r24, r1
    d744:	04 c0       	rjmp	.+8      	; 0xd74e <disk_ioctl+0xe>
    d746:	ba 01       	movw	r22, r20
#ifdef DRV_MMC
    case DEV_MMC :
        return ( mmc_disk_ioctl(cmd, buff) );
    d748:	89 2f       	mov	r24, r25
    d74a:	1a c2       	rjmp	.+1076   	; 0xdb80 <mmc_disk_ioctl>
#ifdef DRV_USB
    case DEV_MMC :
        return ( usb_disk_ioctl(cmd, buff) );
#endif
    }
    return RES_PARERR;
    d74c:	08 95       	ret
    d74e:	84 e0       	ldi	r24, 0x04	; 4
}
    d750:	90 e0       	ldi	r25, 0x00	; 0
    d752:	08 95       	ret

0000d754 <xchg_spi>:
///@return Data read
static
BYTE xchg_spi (     /* Returns received data */
    BYTE dat        /* Data to be sent */
)
{
    d754:	cd c4       	rjmp	.+2458   	; 0xe0f0 <mmc_spi_TXRX>
    d756:	08 95       	ret

0000d758 <deselect>:
    d758:	a2 d4       	rcall	.+2372   	; 0xe09e <mmc_spi_end>
    d75a:	8f ef       	ldi	r24, 0xFF	; 255
    d75c:	fb df       	rcall	.-10     	; 0xd754 <xchg_spi>
    d75e:	8f ef       	ldi	r24, 0xFF	; 255
    d760:	f9 cf       	rjmp	.-14     	; 0xd754 <xchg_spi>
    d762:	08 95       	ret

0000d764 <rcvr_datablock>:
    d764:	0f 93       	push	r16
    d766:	1f 93       	push	r17
    d768:	cf 93       	push	r28
    d76a:	df 93       	push	r29
    d76c:	ec 01       	movw	r28, r24
    d76e:	8b 01       	movw	r16, r22
    d770:	46 9a       	sbi	0x08, 6	; 8
    d772:	3e 9a       	sbi	0x07, 6	; 7
    d774:	88 ee       	ldi	r24, 0xE8	; 232
    d776:	93 e0       	ldi	r25, 0x03	; 3
    d778:	be d4       	rcall	.+2428   	; 0xe0f6 <mmc_set_ms_timeout>
    d77a:	8f ef       	ldi	r24, 0xFF	; 255
    d77c:	b9 d4       	rcall	.+2418   	; 0xe0f0 <mmc_spi_TXRX>
    d77e:	8f 3f       	cpi	r24, 0xFF	; 255
    d780:	31 f4       	brne	.+12     	; 0xd78e <rcvr_datablock+0x2a>
    d782:	c0 d4       	rcall	.+2432   	; 0xe104 <mmc_test_timeout>
    d784:	89 2b       	or	r24, r25
    d786:	c9 f3       	breq	.-14     	; 0xd77a <rcvr_datablock+0x16>
    d788:	80 e0       	ldi	r24, 0x00	; 0
    d78a:	90 e0       	ldi	r25, 0x00	; 0
    d78c:	0d c0       	rjmp	.+26     	; 0xd7a8 <rcvr_datablock+0x44>
    d78e:	8e 3f       	cpi	r24, 0xFE	; 254
    d790:	d9 f7       	brne	.-10     	; 0xd788 <rcvr_datablock+0x24>
    d792:	b8 01       	movw	r22, r16
    d794:	ce 01       	movw	r24, r28
    d796:	a9 d4       	rcall	.+2386   	; 0xe0ea <mmc_spi_RX_buffer>
    d798:	8f ef       	ldi	r24, 0xFF	; 255
    d79a:	dc df       	rcall	.-72     	; 0xd754 <xchg_spi>
    d79c:	8f ef       	ldi	r24, 0xFF	; 255
    d79e:	da df       	rcall	.-76     	; 0xd754 <xchg_spi>
    d7a0:	46 98       	cbi	0x08, 6	; 8
    d7a2:	3e 9a       	sbi	0x07, 6	; 7
    d7a4:	81 e0       	ldi	r24, 0x01	; 1
    d7a6:	90 e0       	ldi	r25, 0x00	; 0
    d7a8:	df 91       	pop	r29
    d7aa:	cf 91       	pop	r28
    d7ac:	1f 91       	pop	r17
    d7ae:	0f 91       	pop	r16
    d7b0:	08 95       	ret

0000d7b2 <wait_ready>:
    d7b2:	cf 93       	push	r28
    d7b4:	a0 d4       	rcall	.+2368   	; 0xe0f6 <mmc_set_ms_timeout>
    d7b6:	8f ef       	ldi	r24, 0xFF	; 255
    d7b8:	9b d4       	rcall	.+2358   	; 0xe0f0 <mmc_spi_TXRX>
    d7ba:	c8 2f       	mov	r28, r24
    d7bc:	8f 3f       	cpi	r24, 0xFF	; 255
    d7be:	19 f0       	breq	.+6      	; 0xd7c6 <wait_ready+0x14>
    d7c0:	a1 d4       	rcall	.+2370   	; 0xe104 <mmc_test_timeout>
    d7c2:	89 2b       	or	r24, r25
    d7c4:	c1 f3       	breq	.-16     	; 0xd7b6 <wait_ready+0x4>
    d7c6:	81 e0       	ldi	r24, 0x01	; 1
    d7c8:	90 e0       	ldi	r25, 0x00	; 0
    d7ca:	cf 3f       	cpi	r28, 0xFF	; 255
    d7cc:	11 f0       	breq	.+4      	; 0xd7d2 <wait_ready+0x20>
    d7ce:	80 e0       	ldi	r24, 0x00	; 0
    d7d0:	90 e0       	ldi	r25, 0x00	; 0
    d7d2:	cf 91       	pop	r28
    d7d4:	08 95       	ret

0000d7d6 <select>:
    d7d6:	cf 93       	push	r28
    d7d8:	df 93       	push	r29
    d7da:	54 d4       	rcall	.+2216   	; 0xe084 <mmc_spi_begin>
    d7dc:	8f ef       	ldi	r24, 0xFF	; 255
    d7de:	ba df       	rcall	.-140    	; 0xd754 <xchg_spi>
    d7e0:	88 ee       	ldi	r24, 0xE8	; 232
    d7e2:	93 e0       	ldi	r25, 0x03	; 3
    d7e4:	e6 df       	rcall	.-52     	; 0xd7b2 <wait_ready>
    d7e6:	ec 01       	movw	r28, r24
    d7e8:	89 2b       	or	r24, r25
    d7ea:	61 f4       	brne	.+24     	; 0xd804 <select+0x2e>
    d7ec:	8c eb       	ldi	r24, 0xBC	; 188
    d7ee:	97 e0       	ldi	r25, 0x07	; 7
    d7f0:	1f 92       	push	r1
    d7f2:	9f 93       	push	r25
    d7f4:	8f 93       	push	r24
    d7f6:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    d7fa:	ae df       	rcall	.-164    	; 0xd758 <deselect>
    d7fc:	0f 90       	pop	r0
    d7fe:	0f 90       	pop	r0
    d800:	0f 90       	pop	r0
    d802:	02 c0       	rjmp	.+4      	; 0xd808 <select+0x32>
    d804:	c1 e0       	ldi	r28, 0x01	; 1
    d806:	d0 e0       	ldi	r29, 0x00	; 0
    d808:	ce 01       	movw	r24, r28
    d80a:	df 91       	pop	r29
    d80c:	cf 91       	pop	r28
    d80e:	08 95       	ret

0000d810 <send_cmd>:
    d810:	ff 92       	push	r15
    d812:	0f 93       	push	r16
    d814:	1f 93       	push	r17
    d816:	cf 93       	push	r28
    d818:	df 93       	push	r29
    d81a:	c8 2f       	mov	r28, r24
    d81c:	d4 2f       	mov	r29, r20
    d81e:	15 2f       	mov	r17, r21
    d820:	06 2f       	mov	r16, r22
    d822:	f7 2e       	mov	r15, r23
    d824:	87 ff       	sbrs	r24, 7
    d826:	08 c0       	rjmp	.+16     	; 0xd838 <send_cmd+0x28>
    d828:	40 e0       	ldi	r20, 0x00	; 0
    d82a:	50 e0       	ldi	r21, 0x00	; 0
    d82c:	ba 01       	movw	r22, r20
    d82e:	87 e3       	ldi	r24, 0x37	; 55
    d830:	ef df       	rcall	.-34     	; 0xd810 <send_cmd>
    d832:	82 30       	cpi	r24, 0x02	; 2
    d834:	58 f5       	brcc	.+86     	; 0xd88c <send_cmd+0x7c>
    d836:	cf 77       	andi	r28, 0x7F	; 127
    d838:	cc 30       	cpi	r28, 0x0C	; 12
    d83a:	71 f4       	brne	.+28     	; 0xd858 <send_cmd+0x48>
    d83c:	8c 2f       	mov	r24, r28
    d83e:	80 64       	ori	r24, 0x40	; 64
    d840:	89 df       	rcall	.-238    	; 0xd754 <xchg_spi>
    d842:	8f 2d       	mov	r24, r15
    d844:	87 df       	rcall	.-242    	; 0xd754 <xchg_spi>
    d846:	80 2f       	mov	r24, r16
    d848:	85 df       	rcall	.-246    	; 0xd754 <xchg_spi>
    d84a:	81 2f       	mov	r24, r17
    d84c:	83 df       	rcall	.-250    	; 0xd754 <xchg_spi>
    d84e:	8d 2f       	mov	r24, r29
    d850:	81 df       	rcall	.-254    	; 0xd754 <xchg_spi>
    d852:	cc 23       	and	r28, r28
    d854:	c9 f0       	breq	.+50     	; 0xd888 <send_cmd+0x78>
    d856:	06 c0       	rjmp	.+12     	; 0xd864 <send_cmd+0x54>
    d858:	7f df       	rcall	.-258    	; 0xd758 <deselect>
    d85a:	bd df       	rcall	.-134    	; 0xd7d6 <select>
    d85c:	89 2b       	or	r24, r25
    d85e:	71 f7       	brne	.-36     	; 0xd83c <send_cmd+0x2c>
    d860:	8f ef       	ldi	r24, 0xFF	; 255
    d862:	14 c0       	rjmp	.+40     	; 0xd88c <send_cmd+0x7c>
    d864:	c8 30       	cpi	r28, 0x08	; 8
    d866:	11 f4       	brne	.+4      	; 0xd86c <send_cmd+0x5c>
    d868:	87 e8       	ldi	r24, 0x87	; 135
    d86a:	01 c0       	rjmp	.+2      	; 0xd86e <send_cmd+0x5e>
    d86c:	81 e0       	ldi	r24, 0x01	; 1
    d86e:	72 df       	rcall	.-284    	; 0xd754 <xchg_spi>
    d870:	cc 30       	cpi	r28, 0x0C	; 12
    d872:	11 f4       	brne	.+4      	; 0xd878 <send_cmd+0x68>
    d874:	8f ef       	ldi	r24, 0xFF	; 255
    d876:	6e df       	rcall	.-292    	; 0xd754 <xchg_spi>
    d878:	ca e0       	ldi	r28, 0x0A	; 10
    d87a:	8f ef       	ldi	r24, 0xFF	; 255
    d87c:	39 d4       	rcall	.+2162   	; 0xe0f0 <mmc_spi_TXRX>
    d87e:	87 ff       	sbrs	r24, 7
    d880:	05 c0       	rjmp	.+10     	; 0xd88c <send_cmd+0x7c>
    d882:	c1 50       	subi	r28, 0x01	; 1
    d884:	d1 f7       	brne	.-12     	; 0xd87a <send_cmd+0x6a>
    d886:	02 c0       	rjmp	.+4      	; 0xd88c <send_cmd+0x7c>
    d888:	85 e9       	ldi	r24, 0x95	; 149
    d88a:	f5 cf       	rjmp	.-22     	; 0xd876 <send_cmd+0x66>
    d88c:	cd b7       	in	r28, 0x3d	; 61
    d88e:	de b7       	in	r29, 0x3e	; 62
    d890:	e5 e0       	ldi	r30, 0x05	; 5
    d892:	0c 94 09 e6 	jmp	0x1cc12	; 0x1cc12 <__epilogue_restores__+0x1a>

0000d896 <xmit_datablock>:
    d896:	0f 93       	push	r16
    d898:	1f 93       	push	r17
    d89a:	cf 93       	push	r28
    d89c:	8c 01       	movw	r16, r24
    d89e:	c6 2f       	mov	r28, r22
    d8a0:	2c 9a       	sbi	0x05, 4	; 5
    d8a2:	24 9a       	sbi	0x04, 4	; 4
    d8a4:	88 ee       	ldi	r24, 0xE8	; 232
    d8a6:	93 e0       	ldi	r25, 0x03	; 3
    d8a8:	84 df       	rcall	.-248    	; 0xd7b2 <wait_ready>
    d8aa:	89 2b       	or	r24, r25
    d8ac:	19 f4       	brne	.+6      	; 0xd8b4 <xmit_datablock+0x1e>
    d8ae:	80 e0       	ldi	r24, 0x00	; 0
    d8b0:	90 e0       	ldi	r25, 0x00	; 0
    d8b2:	17 c0       	rjmp	.+46     	; 0xd8e2 <xmit_datablock+0x4c>
    d8b4:	8c 2f       	mov	r24, r28
    d8b6:	4e df       	rcall	.-356    	; 0xd754 <xchg_spi>
    d8b8:	cd 3f       	cpi	r28, 0xFD	; 253
    d8ba:	29 f4       	brne	.+10     	; 0xd8c6 <xmit_datablock+0x30>
    d8bc:	46 98       	cbi	0x08, 6	; 8
    d8be:	3e 9a       	sbi	0x07, 6	; 7
    d8c0:	81 e0       	ldi	r24, 0x01	; 1
    d8c2:	90 e0       	ldi	r25, 0x00	; 0
    d8c4:	0e c0       	rjmp	.+28     	; 0xd8e2 <xmit_datablock+0x4c>
    d8c6:	60 e0       	ldi	r22, 0x00	; 0
    d8c8:	72 e0       	ldi	r23, 0x02	; 2
    d8ca:	c8 01       	movw	r24, r16
    d8cc:	0b d4       	rcall	.+2070   	; 0xe0e4 <mmc_spi_TX_buffer>
    d8ce:	8f ef       	ldi	r24, 0xFF	; 255
    d8d0:	41 df       	rcall	.-382    	; 0xd754 <xchg_spi>
    d8d2:	8f ef       	ldi	r24, 0xFF	; 255
    d8d4:	3f df       	rcall	.-386    	; 0xd754 <xchg_spi>
    d8d6:	8f ef       	ldi	r24, 0xFF	; 255
    d8d8:	0b d4       	rcall	.+2070   	; 0xe0f0 <mmc_spi_TXRX>
    d8da:	8f 71       	andi	r24, 0x1F	; 31
    d8dc:	85 30       	cpi	r24, 0x05	; 5
    d8de:	39 f7       	brne	.-50     	; 0xd8ae <xmit_datablock+0x18>
    d8e0:	ed cf       	rjmp	.-38     	; 0xd8bc <xmit_datablock+0x26>
    d8e2:	cf 91       	pop	r28
    d8e4:	1f 91       	pop	r17
    d8e6:	0f 91       	pop	r16
    d8e8:	08 95       	ret

0000d8ea <mmc_disk_initialize>:
    d8ea:	a4 e0       	ldi	r26, 0x04	; 4
    d8ec:	b0 e0       	ldi	r27, 0x00	; 0
    d8ee:	eb e7       	ldi	r30, 0x7B	; 123
    d8f0:	fc e6       	ldi	r31, 0x6C	; 108
    d8f2:	0c 94 ea e5 	jmp	0x1cbd4	; 0x1cbd4 <__prologue_saves__+0x14>
    d8f6:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    d8fa:	81 fd       	sbrc	r24, 1
    d8fc:	8d c0       	rjmp	.+282    	; 0xda18 <mmc_disk_initialize+0x12e>
    d8fe:	d3 d3       	rcall	.+1958   	; 0xe0a6 <mmc_slow>
    d900:	1a e0       	ldi	r17, 0x0A	; 10
    d902:	8f ef       	ldi	r24, 0xFF	; 255
    d904:	27 df       	rcall	.-434    	; 0xd754 <xchg_spi>
    d906:	11 50       	subi	r17, 0x01	; 1
    d908:	e1 f7       	brne	.-8      	; 0xd902 <mmc_disk_initialize+0x18>
    d90a:	40 e0       	ldi	r20, 0x00	; 0
    d90c:	50 e0       	ldi	r21, 0x00	; 0
    d90e:	ba 01       	movw	r22, r20
    d910:	80 e0       	ldi	r24, 0x00	; 0
    d912:	7e df       	rcall	.-260    	; 0xd810 <send_cmd>
    d914:	81 30       	cpi	r24, 0x01	; 1
    d916:	09 f0       	breq	.+2      	; 0xd91a <mmc_disk_initialize+0x30>
    d918:	6f c0       	rjmp	.+222    	; 0xd9f8 <mmc_disk_initialize+0x10e>
    d91a:	80 ed       	ldi	r24, 0xD0	; 208
    d91c:	97 e0       	ldi	r25, 0x07	; 7
    d91e:	eb d3       	rcall	.+2006   	; 0xe0f6 <mmc_set_ms_timeout>
    d920:	4a ea       	ldi	r20, 0xAA	; 170
    d922:	51 e0       	ldi	r21, 0x01	; 1
    d924:	60 e0       	ldi	r22, 0x00	; 0
    d926:	70 e0       	ldi	r23, 0x00	; 0
    d928:	88 e0       	ldi	r24, 0x08	; 8
    d92a:	72 df       	rcall	.-284    	; 0xd810 <send_cmd>
    d92c:	81 30       	cpi	r24, 0x01	; 1
    d92e:	09 f0       	breq	.+2      	; 0xd932 <mmc_disk_initialize+0x48>
    d930:	3d c0       	rjmp	.+122    	; 0xd9ac <mmc_disk_initialize+0xc2>
    d932:	8e 01       	movw	r16, r28
    d934:	0f 5f       	subi	r16, 0xFF	; 255
    d936:	1f 4f       	sbci	r17, 0xFF	; 255
    d938:	6e 01       	movw	r12, r28
    d93a:	85 e0       	ldi	r24, 0x05	; 5
    d93c:	c8 0e       	add	r12, r24
    d93e:	d1 1c       	adc	r13, r1
    d940:	78 01       	movw	r14, r16
    d942:	8f ef       	ldi	r24, 0xFF	; 255
    d944:	d5 d3       	rcall	.+1962   	; 0xe0f0 <mmc_spi_TXRX>
    d946:	f7 01       	movw	r30, r14
    d948:	81 93       	st	Z+, r24
    d94a:	7f 01       	movw	r14, r30
    d94c:	ce 16       	cp	r12, r30
    d94e:	df 06       	cpc	r13, r31
    d950:	c1 f7       	brne	.-16     	; 0xd942 <mmc_disk_initialize+0x58>
    d952:	8b 81       	ldd	r24, Y+3	; 0x03
    d954:	81 30       	cpi	r24, 0x01	; 1
    d956:	09 f0       	breq	.+2      	; 0xd95a <mmc_disk_initialize+0x70>
    d958:	4f c0       	rjmp	.+158    	; 0xd9f8 <mmc_disk_initialize+0x10e>
    d95a:	8c 81       	ldd	r24, Y+4	; 0x04
    d95c:	8a 3a       	cpi	r24, 0xAA	; 170
    d95e:	09 f0       	breq	.+2      	; 0xd962 <mmc_disk_initialize+0x78>
    d960:	4b c0       	rjmp	.+150    	; 0xd9f8 <mmc_disk_initialize+0x10e>
    d962:	d0 d3       	rcall	.+1952   	; 0xe104 <mmc_test_timeout>
    d964:	89 2b       	or	r24, r25
    d966:	29 f0       	breq	.+10     	; 0xd972 <mmc_disk_initialize+0x88>
    d968:	cd d3       	rcall	.+1946   	; 0xe104 <mmc_test_timeout>
    d96a:	89 2b       	or	r24, r25
    d96c:	09 f0       	breq	.+2      	; 0xd970 <mmc_disk_initialize+0x86>
    d96e:	44 c0       	rjmp	.+136    	; 0xd9f8 <mmc_disk_initialize+0x10e>
    d970:	09 c0       	rjmp	.+18     	; 0xd984 <mmc_disk_initialize+0x9a>
    d972:	40 e0       	ldi	r20, 0x00	; 0
    d974:	50 e0       	ldi	r21, 0x00	; 0
    d976:	60 e0       	ldi	r22, 0x00	; 0
    d978:	70 e4       	ldi	r23, 0x40	; 64
    d97a:	89 ea       	ldi	r24, 0xA9	; 169
    d97c:	49 df       	rcall	.-366    	; 0xd810 <send_cmd>
    d97e:	81 11       	cpse	r24, r1
    d980:	f0 cf       	rjmp	.-32     	; 0xd962 <mmc_disk_initialize+0x78>
    d982:	f2 cf       	rjmp	.-28     	; 0xd968 <mmc_disk_initialize+0x7e>
    d984:	40 e0       	ldi	r20, 0x00	; 0
    d986:	50 e0       	ldi	r21, 0x00	; 0
    d988:	ba 01       	movw	r22, r20
    d98a:	8a e3       	ldi	r24, 0x3A	; 58
    d98c:	41 df       	rcall	.-382    	; 0xd810 <send_cmd>
    d98e:	81 11       	cpse	r24, r1
    d990:	33 c0       	rjmp	.+102    	; 0xd9f8 <mmc_disk_initialize+0x10e>
    d992:	8f ef       	ldi	r24, 0xFF	; 255
    d994:	ad d3       	rcall	.+1882   	; 0xe0f0 <mmc_spi_TXRX>
    d996:	f8 01       	movw	r30, r16
    d998:	81 93       	st	Z+, r24
    d99a:	8f 01       	movw	r16, r30
    d99c:	ce 16       	cp	r12, r30
    d99e:	df 06       	cpc	r13, r31
    d9a0:	c1 f7       	brne	.-16     	; 0xd992 <mmc_disk_initialize+0xa8>
    d9a2:	89 81       	ldd	r24, Y+1	; 0x01
    d9a4:	86 fd       	sbrc	r24, 6
    d9a6:	2a c0       	rjmp	.+84     	; 0xd9fc <mmc_disk_initialize+0x112>
    d9a8:	14 e0       	ldi	r17, 0x04	; 4
    d9aa:	29 c0       	rjmp	.+82     	; 0xd9fe <mmc_disk_initialize+0x114>
    d9ac:	80 ed       	ldi	r24, 0xD0	; 208
    d9ae:	97 e0       	ldi	r25, 0x07	; 7
    d9b0:	a2 d3       	rcall	.+1860   	; 0xe0f6 <mmc_set_ms_timeout>
    d9b2:	40 e0       	ldi	r20, 0x00	; 0
    d9b4:	50 e0       	ldi	r21, 0x00	; 0
    d9b6:	ba 01       	movw	r22, r20
    d9b8:	89 ea       	ldi	r24, 0xA9	; 169
    d9ba:	2a df       	rcall	.-428    	; 0xd810 <send_cmd>
    d9bc:	82 30       	cpi	r24, 0x02	; 2
    d9be:	18 f0       	brcs	.+6      	; 0xd9c6 <mmc_disk_initialize+0xdc>
    d9c0:	11 e0       	ldi	r17, 0x01	; 1
    d9c2:	01 e0       	ldi	r16, 0x01	; 1
    d9c4:	02 c0       	rjmp	.+4      	; 0xd9ca <mmc_disk_initialize+0xe0>
    d9c6:	12 e0       	ldi	r17, 0x02	; 2
    d9c8:	09 ea       	ldi	r16, 0xA9	; 169
    d9ca:	9c d3       	rcall	.+1848   	; 0xe104 <mmc_test_timeout>
    d9cc:	89 2b       	or	r24, r25
    d9ce:	21 f0       	breq	.+8      	; 0xd9d8 <mmc_disk_initialize+0xee>
    d9d0:	99 d3       	rcall	.+1842   	; 0xe104 <mmc_test_timeout>
    d9d2:	89 2b       	or	r24, r25
    d9d4:	89 f4       	brne	.+34     	; 0xd9f8 <mmc_disk_initialize+0x10e>
    d9d6:	08 c0       	rjmp	.+16     	; 0xd9e8 <mmc_disk_initialize+0xfe>
    d9d8:	40 e0       	ldi	r20, 0x00	; 0
    d9da:	50 e0       	ldi	r21, 0x00	; 0
    d9dc:	ba 01       	movw	r22, r20
    d9de:	80 2f       	mov	r24, r16
    d9e0:	17 df       	rcall	.-466    	; 0xd810 <send_cmd>
    d9e2:	81 11       	cpse	r24, r1
    d9e4:	f2 cf       	rjmp	.-28     	; 0xd9ca <mmc_disk_initialize+0xe0>
    d9e6:	f4 cf       	rjmp	.-24     	; 0xd9d0 <mmc_disk_initialize+0xe6>
    d9e8:	40 e0       	ldi	r20, 0x00	; 0
    d9ea:	52 e0       	ldi	r21, 0x02	; 2
    d9ec:	60 e0       	ldi	r22, 0x00	; 0
    d9ee:	70 e0       	ldi	r23, 0x00	; 0
    d9f0:	80 e1       	ldi	r24, 0x10	; 16
    d9f2:	0e df       	rcall	.-484    	; 0xd810 <send_cmd>
    d9f4:	88 23       	and	r24, r24
    d9f6:	19 f0       	breq	.+6      	; 0xd9fe <mmc_disk_initialize+0x114>
    d9f8:	10 e0       	ldi	r17, 0x00	; 0
    d9fa:	01 c0       	rjmp	.+2      	; 0xd9fe <mmc_disk_initialize+0x114>
    d9fc:	1c e0       	ldi	r17, 0x0C	; 12
    d9fe:	10 93 17 18 	sts	0x1817, r17	; 0x801817 <CardType>
    da02:	aa de       	rcall	.-684    	; 0xd758 <deselect>
    da04:	11 23       	and	r17, r17
    da06:	39 f0       	breq	.+14     	; 0xda16 <mmc_disk_initialize+0x12c>
    da08:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    da0c:	8e 7f       	andi	r24, 0xFE	; 254
    da0e:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <Stat>
    da12:	5b d3       	rcall	.+1718   	; 0xe0ca <mmc_fast>
    da14:	01 c0       	rjmp	.+2      	; 0xda18 <mmc_disk_initialize+0x12e>
    da16:	33 d4       	rcall	.+2150   	; 0xe27e <mmc_power_off>
    da18:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    da1c:	24 96       	adiw	r28, 0x04	; 4
    da1e:	e8 e0       	ldi	r30, 0x08	; 8
    da20:	0c 94 06 e6 	jmp	0x1cc0c	; 0x1cc0c <__epilogue_restores__+0x14>

0000da24 <mmc_disk_status>:
    da24:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    da28:	08 95       	ret

0000da2a <mmc_disk_read>:
    da2a:	ef 92       	push	r14
    da2c:	ff 92       	push	r15
    da2e:	1f 93       	push	r17
    da30:	cf 93       	push	r28
    da32:	df 93       	push	r29
    da34:	7c 01       	movw	r14, r24
    da36:	e9 01       	movw	r28, r18
    da38:	20 97       	sbiw	r28, 0x00	; 0
    da3a:	19 f4       	brne	.+6      	; 0xda42 <mmc_disk_read+0x18>
    da3c:	8d de       	rcall	.-742    	; 0xd758 <deselect>
    da3e:	84 e0       	ldi	r24, 0x04	; 4
    da40:	06 c0       	rjmp	.+12     	; 0xda4e <mmc_disk_read+0x24>
    da42:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    da46:	80 ff       	sbrs	r24, 0
    da48:	04 c0       	rjmp	.+8      	; 0xda52 <mmc_disk_read+0x28>
    da4a:	86 de       	rcall	.-756    	; 0xd758 <deselect>
    da4c:	83 e0       	ldi	r24, 0x03	; 3
    da4e:	90 e0       	ldi	r25, 0x00	; 0
    da50:	2c c0       	rjmp	.+88     	; 0xdaaa <mmc_disk_read+0x80>
    da52:	80 91 17 18 	lds	r24, 0x1817	; 0x801817 <CardType>
    da56:	83 fd       	sbrc	r24, 3
    da58:	07 c0       	rjmp	.+14     	; 0xda68 <mmc_disk_read+0x3e>
    da5a:	89 e0       	ldi	r24, 0x09	; 9
    da5c:	44 0f       	add	r20, r20
    da5e:	55 1f       	adc	r21, r21
    da60:	66 1f       	adc	r22, r22
    da62:	77 1f       	adc	r23, r23
    da64:	8a 95       	dec	r24
    da66:	d1 f7       	brne	.-12     	; 0xda5c <mmc_disk_read+0x32>
    da68:	c2 30       	cpi	r28, 0x02	; 2
    da6a:	d1 05       	cpc	r29, r1
    da6c:	10 f4       	brcc	.+4      	; 0xda72 <mmc_disk_read+0x48>
    da6e:	11 e1       	ldi	r17, 0x11	; 17
    da70:	01 c0       	rjmp	.+2      	; 0xda74 <mmc_disk_read+0x4a>
    da72:	12 e1       	ldi	r17, 0x12	; 18
    da74:	81 2f       	mov	r24, r17
    da76:	cc de       	rcall	.-616    	; 0xd810 <send_cmd>
    da78:	81 11       	cpse	r24, r1
    da7a:	11 c0       	rjmp	.+34     	; 0xda9e <mmc_disk_read+0x74>
    da7c:	60 e0       	ldi	r22, 0x00	; 0
    da7e:	72 e0       	ldi	r23, 0x02	; 2
    da80:	c7 01       	movw	r24, r14
    da82:	70 de       	rcall	.-800    	; 0xd764 <rcvr_datablock>
    da84:	89 2b       	or	r24, r25
    da86:	21 f0       	breq	.+8      	; 0xda90 <mmc_disk_read+0x66>
    da88:	8e ef       	ldi	r24, 0xFE	; 254
    da8a:	f8 1a       	sub	r15, r24
    da8c:	21 97       	sbiw	r28, 0x01	; 1
    da8e:	b1 f7       	brne	.-20     	; 0xda7c <mmc_disk_read+0x52>
    da90:	12 31       	cpi	r17, 0x12	; 18
    da92:	29 f4       	brne	.+10     	; 0xda9e <mmc_disk_read+0x74>
    da94:	40 e0       	ldi	r20, 0x00	; 0
    da96:	50 e0       	ldi	r21, 0x00	; 0
    da98:	ba 01       	movw	r22, r20
    da9a:	8c e0       	ldi	r24, 0x0C	; 12
    da9c:	b9 de       	rcall	.-654    	; 0xd810 <send_cmd>
    da9e:	5c de       	rcall	.-840    	; 0xd758 <deselect>
    daa0:	81 e0       	ldi	r24, 0x01	; 1
    daa2:	90 e0       	ldi	r25, 0x00	; 0
    daa4:	cd 2b       	or	r28, r29
    daa6:	09 f4       	brne	.+2      	; 0xdaaa <mmc_disk_read+0x80>
    daa8:	80 e0       	ldi	r24, 0x00	; 0
    daaa:	df 91       	pop	r29
    daac:	cf 91       	pop	r28
    daae:	1f 91       	pop	r17
    dab0:	ff 90       	pop	r15
    dab2:	ef 90       	pop	r14
    dab4:	08 95       	ret

0000dab6 <mmc_disk_write>:
    dab6:	a0 e0       	ldi	r26, 0x00	; 0
    dab8:	b0 e0       	ldi	r27, 0x00	; 0
    daba:	e1 e6       	ldi	r30, 0x61	; 97
    dabc:	fd e6       	ldi	r31, 0x6D	; 109
    dabe:	0c 94 ea e5 	jmp	0x1cbd4	; 0x1cbd4 <__prologue_saves__+0x14>
    dac2:	8c 01       	movw	r16, r24
    dac4:	6a 01       	movw	r12, r20
    dac6:	7b 01       	movw	r14, r22
    dac8:	e9 01       	movw	r28, r18
    daca:	20 97       	sbiw	r28, 0x00	; 0
    dacc:	19 f4       	brne	.+6      	; 0xdad4 <mmc_disk_write+0x1e>
    dace:	44 de       	rcall	.-888    	; 0xd758 <deselect>
    dad0:	84 e0       	ldi	r24, 0x04	; 4
    dad2:	06 c0       	rjmp	.+12     	; 0xdae0 <mmc_disk_write+0x2a>
    dad4:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    dad8:	80 ff       	sbrs	r24, 0
    dada:	04 c0       	rjmp	.+8      	; 0xdae4 <mmc_disk_write+0x2e>
    dadc:	3d de       	rcall	.-902    	; 0xd758 <deselect>
    dade:	83 e0       	ldi	r24, 0x03	; 3
    dae0:	90 e0       	ldi	r25, 0x00	; 0
    dae2:	49 c0       	rjmp	.+146    	; 0xdb76 <mmc_disk_write+0xc0>
    dae4:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    dae8:	82 ff       	sbrs	r24, 2
    daea:	03 c0       	rjmp	.+6      	; 0xdaf2 <mmc_disk_write+0x3c>
    daec:	35 de       	rcall	.-918    	; 0xd758 <deselect>
    daee:	82 e0       	ldi	r24, 0x02	; 2
    daf0:	f7 cf       	rjmp	.-18     	; 0xdae0 <mmc_disk_write+0x2a>
    daf2:	80 91 17 18 	lds	r24, 0x1817	; 0x801817 <CardType>
    daf6:	83 fd       	sbrc	r24, 3
    daf8:	07 c0       	rjmp	.+14     	; 0xdb08 <mmc_disk_write+0x52>
    dafa:	99 e0       	ldi	r25, 0x09	; 9
    dafc:	cc 0c       	add	r12, r12
    dafe:	dd 1c       	adc	r13, r13
    db00:	ee 1c       	adc	r14, r14
    db02:	ff 1c       	adc	r15, r15
    db04:	9a 95       	dec	r25
    db06:	d1 f7       	brne	.-12     	; 0xdafc <mmc_disk_write+0x46>
    db08:	c1 30       	cpi	r28, 0x01	; 1
    db0a:	d1 05       	cpc	r29, r1
    db0c:	89 f4       	brne	.+34     	; 0xdb30 <mmc_disk_write+0x7a>
    db0e:	b7 01       	movw	r22, r14
    db10:	a6 01       	movw	r20, r12
    db12:	88 e1       	ldi	r24, 0x18	; 24
    db14:	7d de       	rcall	.-774    	; 0xd810 <send_cmd>
    db16:	81 11       	cpse	r24, r1
    db18:	26 c0       	rjmp	.+76     	; 0xdb66 <mmc_disk_write+0xb0>
    db1a:	6e ef       	ldi	r22, 0xFE	; 254
    db1c:	c8 01       	movw	r24, r16
    db1e:	bb de       	rcall	.-650    	; 0xd896 <xmit_datablock>
    db20:	31 e0       	ldi	r19, 0x01	; 1
    db22:	20 e0       	ldi	r18, 0x00	; 0
    db24:	89 2b       	or	r24, r25
    db26:	09 f0       	breq	.+2      	; 0xdb2a <mmc_disk_write+0x74>
    db28:	30 e0       	ldi	r19, 0x00	; 0
    db2a:	c3 2f       	mov	r28, r19
    db2c:	d2 2f       	mov	r29, r18
    db2e:	1d c0       	rjmp	.+58     	; 0xdb6a <mmc_disk_write+0xb4>
    db30:	86 70       	andi	r24, 0x06	; 6
    db32:	29 f0       	breq	.+10     	; 0xdb3e <mmc_disk_write+0x88>
    db34:	ae 01       	movw	r20, r28
    db36:	60 e0       	ldi	r22, 0x00	; 0
    db38:	70 e0       	ldi	r23, 0x00	; 0
    db3a:	87 e9       	ldi	r24, 0x97	; 151
    db3c:	69 de       	rcall	.-814    	; 0xd810 <send_cmd>
    db3e:	b7 01       	movw	r22, r14
    db40:	a6 01       	movw	r20, r12
    db42:	89 e1       	ldi	r24, 0x19	; 25
    db44:	65 de       	rcall	.-822    	; 0xd810 <send_cmd>
    db46:	81 11       	cpse	r24, r1
    db48:	10 c0       	rjmp	.+32     	; 0xdb6a <mmc_disk_write+0xb4>
    db4a:	6c ef       	ldi	r22, 0xFC	; 252
    db4c:	c8 01       	movw	r24, r16
    db4e:	a3 de       	rcall	.-698    	; 0xd896 <xmit_datablock>
    db50:	89 2b       	or	r24, r25
    db52:	19 f0       	breq	.+6      	; 0xdb5a <mmc_disk_write+0xa4>
    db54:	1e 5f       	subi	r17, 0xFE	; 254
    db56:	21 97       	sbiw	r28, 0x01	; 1
    db58:	c1 f7       	brne	.-16     	; 0xdb4a <mmc_disk_write+0x94>
    db5a:	6d ef       	ldi	r22, 0xFD	; 253
    db5c:	80 e0       	ldi	r24, 0x00	; 0
    db5e:	90 e0       	ldi	r25, 0x00	; 0
    db60:	9a de       	rcall	.-716    	; 0xd896 <xmit_datablock>
    db62:	89 2b       	or	r24, r25
    db64:	11 f4       	brne	.+4      	; 0xdb6a <mmc_disk_write+0xb4>
    db66:	c1 e0       	ldi	r28, 0x01	; 1
    db68:	d0 e0       	ldi	r29, 0x00	; 0
    db6a:	f6 dd       	rcall	.-1044   	; 0xd758 <deselect>
    db6c:	81 e0       	ldi	r24, 0x01	; 1
    db6e:	90 e0       	ldi	r25, 0x00	; 0
    db70:	cd 2b       	or	r28, r29
    db72:	09 f4       	brne	.+2      	; 0xdb76 <mmc_disk_write+0xc0>
    db74:	80 e0       	ldi	r24, 0x00	; 0
    db76:	cd b7       	in	r28, 0x3d	; 61
    db78:	de b7       	in	r29, 0x3e	; 62
    db7a:	e8 e0       	ldi	r30, 0x08	; 8
    db7c:	0c 94 06 e6 	jmp	0x1cc0c	; 0x1cc0c <__epilogue_restores__+0x14>

0000db80 <mmc_disk_ioctl>:
    db80:	a0 e1       	ldi	r26, 0x10	; 16
    db82:	b0 e0       	ldi	r27, 0x00	; 0
    db84:	e6 ec       	ldi	r30, 0xC6	; 198
    db86:	fd e6       	ldi	r31, 0x6D	; 109
    db88:	0c 94 ea e5 	jmp	0x1cbd4	; 0x1cbd4 <__prologue_saves__+0x14>
    db8c:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <Stat>
    db90:	90 fd       	sbrc	r25, 0
    db92:	2b c2       	rjmp	.+1110   	; 0xdfea <mmc_disk_ioctl+0x46a>
    db94:	8b 01       	movw	r16, r22
    db96:	83 33       	cpi	r24, 0x33	; 51
    db98:	09 f4       	brne	.+2      	; 0xdb9c <mmc_disk_ioctl+0x1c>
    db9a:	01 c1       	rjmp	.+514    	; 0xdd9e <mmc_disk_ioctl+0x21e>
    db9c:	a0 f4       	brcc	.+40     	; 0xdbc6 <mmc_disk_ioctl+0x46>
    db9e:	83 30       	cpi	r24, 0x03	; 3
    dba0:	09 f4       	brne	.+2      	; 0xdba4 <mmc_disk_ioctl+0x24>
    dba2:	85 c0       	rjmp	.+266    	; 0xdcae <mmc_disk_ioctl+0x12e>
    dba4:	28 f4       	brcc	.+10     	; 0xdbb0 <mmc_disk_ioctl+0x30>
    dba6:	88 23       	and	r24, r24
    dba8:	11 f1       	breq	.+68     	; 0xdbee <mmc_disk_ioctl+0x6e>
    dbaa:	81 30       	cpi	r24, 0x01	; 1
    dbac:	11 f1       	breq	.+68     	; 0xdbf2 <mmc_disk_ioctl+0x72>
    dbae:	1f c2       	rjmp	.+1086   	; 0xdfee <mmc_disk_ioctl+0x46e>
    dbb0:	87 30       	cpi	r24, 0x07	; 7
    dbb2:	09 f4       	brne	.+2      	; 0xdbb6 <mmc_disk_ioctl+0x36>
    dbb4:	2a c1       	rjmp	.+596    	; 0xde0a <mmc_disk_ioctl+0x28a>
    dbb6:	82 33       	cpi	r24, 0x32	; 50
    dbb8:	09 f0       	breq	.+2      	; 0xdbbc <mmc_disk_ioctl+0x3c>
    dbba:	19 c2       	rjmp	.+1074   	; 0xdfee <mmc_disk_ioctl+0x46e>
    dbbc:	80 91 17 18 	lds	r24, 0x1817	; 0x801817 <CardType>
    dbc0:	fb 01       	movw	r30, r22
    dbc2:	80 83       	st	Z, r24
    dbc4:	28 c1       	rjmp	.+592    	; 0xde16 <mmc_disk_ioctl+0x296>
    dbc6:	86 33       	cpi	r24, 0x36	; 54
    dbc8:	09 f4       	brne	.+2      	; 0xdbcc <mmc_disk_ioctl+0x4c>
    dbca:	0c c1       	rjmp	.+536    	; 0xdde4 <mmc_disk_ioctl+0x264>
    dbcc:	38 f4       	brcc	.+14     	; 0xdbdc <mmc_disk_ioctl+0x5c>
    dbce:	84 33       	cpi	r24, 0x34	; 52
    dbd0:	09 f4       	brne	.+2      	; 0xdbd4 <mmc_disk_ioctl+0x54>
    dbd2:	ea c0       	rjmp	.+468    	; 0xdda8 <mmc_disk_ioctl+0x228>
    dbd4:	85 33       	cpi	r24, 0x35	; 53
    dbd6:	09 f4       	brne	.+2      	; 0xdbda <mmc_disk_ioctl+0x5a>
    dbd8:	f1 c0       	rjmp	.+482    	; 0xddbc <mmc_disk_ioctl+0x23c>
    dbda:	09 c2       	rjmp	.+1042   	; 0xdfee <mmc_disk_ioctl+0x46e>
    dbdc:	88 33       	cpi	r24, 0x38	; 56
    dbde:	09 f4       	brne	.+2      	; 0xdbe2 <mmc_disk_ioctl+0x62>
    dbe0:	74 c1       	rjmp	.+744    	; 0xdeca <mmc_disk_ioctl+0x34a>
    dbe2:	08 f4       	brcc	.+2      	; 0xdbe6 <mmc_disk_ioctl+0x66>
    dbe4:	1a c1       	rjmp	.+564    	; 0xde1a <mmc_disk_ioctl+0x29a>
    dbe6:	89 33       	cpi	r24, 0x39	; 57
    dbe8:	09 f4       	brne	.+2      	; 0xdbec <mmc_disk_ioctl+0x6c>
    dbea:	bc c1       	rjmp	.+888    	; 0xdf64 <mmc_disk_ioctl+0x3e4>
    dbec:	00 c2       	rjmp	.+1024   	; 0xdfee <mmc_disk_ioctl+0x46e>
    dbee:	f3 dd       	rcall	.-1050   	; 0xd7d6 <select>
    dbf0:	06 c1       	rjmp	.+524    	; 0xddfe <mmc_disk_ioctl+0x27e>
    dbf2:	40 e0       	ldi	r20, 0x00	; 0
    dbf4:	50 e0       	ldi	r21, 0x00	; 0
    dbf6:	ba 01       	movw	r22, r20
    dbf8:	89 e0       	ldi	r24, 0x09	; 9
    dbfa:	0a de       	rcall	.-1004   	; 0xd810 <send_cmd>
    dbfc:	81 11       	cpse	r24, r1
    dbfe:	f1 c1       	rjmp	.+994    	; 0xdfe2 <mmc_disk_ioctl+0x462>
    dc00:	60 e1       	ldi	r22, 0x10	; 16
    dc02:	70 e0       	ldi	r23, 0x00	; 0
    dc04:	ce 01       	movw	r24, r28
    dc06:	01 96       	adiw	r24, 0x01	; 1
    dc08:	ad dd       	rcall	.-1190   	; 0xd764 <rcvr_datablock>
    dc0a:	89 2b       	or	r24, r25
    dc0c:	09 f4       	brne	.+2      	; 0xdc10 <mmc_disk_ioctl+0x90>
    dc0e:	e9 c1       	rjmp	.+978    	; 0xdfe2 <mmc_disk_ioctl+0x462>
    dc10:	99 81       	ldd	r25, Y+1	; 0x01
    dc12:	92 95       	swap	r25
    dc14:	96 95       	lsr	r25
    dc16:	96 95       	lsr	r25
    dc18:	93 70       	andi	r25, 0x03	; 3
    dc1a:	29 85       	ldd	r18, Y+9	; 0x09
    dc1c:	4a 85       	ldd	r20, Y+10	; 0x0a
    dc1e:	88 85       	ldd	r24, Y+8	; 0x08
    dc20:	91 30       	cpi	r25, 0x01	; 1
    dc22:	d9 f4       	brne	.+54     	; 0xdc5a <mmc_disk_ioctl+0xda>
    dc24:	30 e0       	ldi	r19, 0x00	; 0
    dc26:	32 2f       	mov	r19, r18
    dc28:	22 27       	eor	r18, r18
    dc2a:	24 0f       	add	r18, r20
    dc2c:	31 1d       	adc	r19, r1
    dc2e:	8f 73       	andi	r24, 0x3F	; 63
    dc30:	90 e0       	ldi	r25, 0x00	; 0
    dc32:	a0 e0       	ldi	r26, 0x00	; 0
    dc34:	b0 e0       	ldi	r27, 0x00	; 0
    dc36:	dc 01       	movw	r26, r24
    dc38:	99 27       	eor	r25, r25
    dc3a:	88 27       	eor	r24, r24
    dc3c:	01 96       	adiw	r24, 0x01	; 1
    dc3e:	a1 1d       	adc	r26, r1
    dc40:	b1 1d       	adc	r27, r1
    dc42:	82 0f       	add	r24, r18
    dc44:	93 1f       	adc	r25, r19
    dc46:	a1 1d       	adc	r26, r1
    dc48:	b1 1d       	adc	r27, r1
    dc4a:	fa e0       	ldi	r31, 0x0A	; 10
    dc4c:	88 0f       	add	r24, r24
    dc4e:	99 1f       	adc	r25, r25
    dc50:	aa 1f       	adc	r26, r26
    dc52:	bb 1f       	adc	r27, r27
    dc54:	fa 95       	dec	r31
    dc56:	d1 f7       	brne	.-12     	; 0xdc4c <mmc_disk_ioctl+0xcc>
    dc58:	9b c0       	rjmp	.+310    	; 0xdd90 <mmc_disk_ioctl+0x210>
    dc5a:	22 95       	swap	r18
    dc5c:	26 95       	lsr	r18
    dc5e:	26 95       	lsr	r18
    dc60:	23 70       	andi	r18, 0x03	; 3
    dc62:	f4 e0       	ldi	r31, 0x04	; 4
    dc64:	8f 9f       	mul	r24, r31
    dc66:	c0 01       	movw	r24, r0
    dc68:	11 24       	eor	r1, r1
    dc6a:	82 0f       	add	r24, r18
    dc6c:	91 1d       	adc	r25, r1
    dc6e:	01 96       	adiw	r24, 0x01	; 1
    dc70:	2f 81       	ldd	r18, Y+7	; 0x07
    dc72:	23 70       	andi	r18, 0x03	; 3
    dc74:	30 e0       	ldi	r19, 0x00	; 0
    dc76:	32 2f       	mov	r19, r18
    dc78:	22 27       	eor	r18, r18
    dc7a:	33 0f       	add	r19, r19
    dc7c:	33 0f       	add	r19, r19
    dc7e:	82 0f       	add	r24, r18
    dc80:	93 1f       	adc	r25, r19
    dc82:	a0 e0       	ldi	r26, 0x00	; 0
    dc84:	b0 e0       	ldi	r27, 0x00	; 0
    dc86:	2e 81       	ldd	r18, Y+6	; 0x06
    dc88:	32 2f       	mov	r19, r18
    dc8a:	3f 70       	andi	r19, 0x0F	; 15
    dc8c:	2b 85       	ldd	r18, Y+11	; 0x0b
    dc8e:	22 1f       	adc	r18, r18
    dc90:	22 27       	eor	r18, r18
    dc92:	22 1f       	adc	r18, r18
    dc94:	23 0f       	add	r18, r19
    dc96:	43 70       	andi	r20, 0x03	; 3
    dc98:	44 0f       	add	r20, r20
    dc9a:	42 0f       	add	r20, r18
    dc9c:	47 50       	subi	r20, 0x07	; 7
    dc9e:	04 c0       	rjmp	.+8      	; 0xdca8 <mmc_disk_ioctl+0x128>
    dca0:	88 0f       	add	r24, r24
    dca2:	99 1f       	adc	r25, r25
    dca4:	aa 1f       	adc	r26, r26
    dca6:	bb 1f       	adc	r27, r27
    dca8:	4a 95       	dec	r20
    dcaa:	d2 f7       	brpl	.-12     	; 0xdca0 <mmc_disk_ioctl+0x120>
    dcac:	71 c0       	rjmp	.+226    	; 0xdd90 <mmc_disk_ioctl+0x210>
    dcae:	80 91 17 18 	lds	r24, 0x1817	; 0x801817 <CardType>
    dcb2:	40 e0       	ldi	r20, 0x00	; 0
    dcb4:	50 e0       	ldi	r21, 0x00	; 0
    dcb6:	ba 01       	movw	r22, r20
    dcb8:	82 ff       	sbrs	r24, 2
    dcba:	24 c0       	rjmp	.+72     	; 0xdd04 <mmc_disk_ioctl+0x184>
    dcbc:	8d e8       	ldi	r24, 0x8D	; 141
    dcbe:	a8 dd       	rcall	.-1200   	; 0xd810 <send_cmd>
    dcc0:	81 11       	cpse	r24, r1
    dcc2:	8f c1       	rjmp	.+798    	; 0xdfe2 <mmc_disk_ioctl+0x462>
    dcc4:	8f ef       	ldi	r24, 0xFF	; 255
    dcc6:	46 dd       	rcall	.-1396   	; 0xd754 <xchg_spi>
    dcc8:	60 e1       	ldi	r22, 0x10	; 16
    dcca:	70 e0       	ldi	r23, 0x00	; 0
    dccc:	ce 01       	movw	r24, r28
    dcce:	01 96       	adiw	r24, 0x01	; 1
    dcd0:	49 dd       	rcall	.-1390   	; 0xd764 <rcvr_datablock>
    dcd2:	89 2b       	or	r24, r25
    dcd4:	09 f4       	brne	.+2      	; 0xdcd8 <mmc_disk_ioctl+0x158>
    dcd6:	85 c1       	rjmp	.+778    	; 0xdfe2 <mmc_disk_ioctl+0x462>
    dcd8:	50 e3       	ldi	r21, 0x30	; 48
    dcda:	f5 2e       	mov	r15, r21
    dcdc:	8f ef       	ldi	r24, 0xFF	; 255
    dcde:	3a dd       	rcall	.-1420   	; 0xd754 <xchg_spi>
    dce0:	fa 94       	dec	r15
    dce2:	f1 10       	cpse	r15, r1
    dce4:	fb cf       	rjmp	.-10     	; 0xdcdc <mmc_disk_ioctl+0x15c>
    dce6:	2b 85       	ldd	r18, Y+11	; 0x0b
    dce8:	22 95       	swap	r18
    dcea:	2f 70       	andi	r18, 0x0F	; 15
    dcec:	80 e1       	ldi	r24, 0x10	; 16
    dcee:	90 e0       	ldi	r25, 0x00	; 0
    dcf0:	a0 e0       	ldi	r26, 0x00	; 0
    dcf2:	b0 e0       	ldi	r27, 0x00	; 0
    dcf4:	04 c0       	rjmp	.+8      	; 0xdcfe <mmc_disk_ioctl+0x17e>
    dcf6:	88 0f       	add	r24, r24
    dcf8:	99 1f       	adc	r25, r25
    dcfa:	aa 1f       	adc	r26, r26
    dcfc:	bb 1f       	adc	r27, r27
    dcfe:	2a 95       	dec	r18
    dd00:	d2 f7       	brpl	.-12     	; 0xdcf6 <mmc_disk_ioctl+0x176>
    dd02:	46 c0       	rjmp	.+140    	; 0xdd90 <mmc_disk_ioctl+0x210>
    dd04:	89 e0       	ldi	r24, 0x09	; 9
    dd06:	84 dd       	rcall	.-1272   	; 0xd810 <send_cmd>
    dd08:	81 11       	cpse	r24, r1
    dd0a:	6b c1       	rjmp	.+726    	; 0xdfe2 <mmc_disk_ioctl+0x462>
    dd0c:	60 e1       	ldi	r22, 0x10	; 16
    dd0e:	70 e0       	ldi	r23, 0x00	; 0
    dd10:	ce 01       	movw	r24, r28
    dd12:	01 96       	adiw	r24, 0x01	; 1
    dd14:	27 dd       	rcall	.-1458   	; 0xd764 <rcvr_datablock>
    dd16:	89 2b       	or	r24, r25
    dd18:	09 f4       	brne	.+2      	; 0xdd1c <mmc_disk_ioctl+0x19c>
    dd1a:	63 c1       	rjmp	.+710    	; 0xdfe2 <mmc_disk_ioctl+0x462>
    dd1c:	90 91 17 18 	lds	r25, 0x1817	; 0x801817 <CardType>
    dd20:	2b 85       	ldd	r18, Y+11	; 0x0b
    dd22:	8c 85       	ldd	r24, Y+12	; 0x0c
    dd24:	91 ff       	sbrs	r25, 1
    dd26:	16 c0       	rjmp	.+44     	; 0xdd54 <mmc_disk_ioctl+0x1d4>
    dd28:	2f 73       	andi	r18, 0x3F	; 63
    dd2a:	88 1f       	adc	r24, r24
    dd2c:	88 27       	eor	r24, r24
    dd2e:	88 1f       	adc	r24, r24
    dd30:	90 e0       	ldi	r25, 0x00	; 0
    dd32:	01 96       	adiw	r24, 0x01	; 1
    dd34:	82 0f       	add	r24, r18
    dd36:	91 1d       	adc	r25, r1
    dd38:	82 0f       	add	r24, r18
    dd3a:	91 1d       	adc	r25, r1
    dd3c:	2e 85       	ldd	r18, Y+14	; 0x0e
    dd3e:	22 95       	swap	r18
    dd40:	26 95       	lsr	r18
    dd42:	26 95       	lsr	r18
    dd44:	23 70       	andi	r18, 0x03	; 3
    dd46:	21 50       	subi	r18, 0x01	; 1
    dd48:	02 c0       	rjmp	.+4      	; 0xdd4e <mmc_disk_ioctl+0x1ce>
    dd4a:	88 0f       	add	r24, r24
    dd4c:	99 1f       	adc	r25, r25
    dd4e:	2a 95       	dec	r18
    dd50:	e2 f7       	brpl	.-8      	; 0xdd4a <mmc_disk_ioctl+0x1ca>
    dd52:	1c c0       	rjmp	.+56     	; 0xdd8c <mmc_disk_ioctl+0x20c>
    dd54:	38 2f       	mov	r19, r24
    dd56:	33 70       	andi	r19, 0x03	; 3
    dd58:	82 95       	swap	r24
    dd5a:	86 95       	lsr	r24
    dd5c:	87 70       	andi	r24, 0x07	; 7
    dd5e:	90 e0       	ldi	r25, 0x00	; 0
    dd60:	f8 e0       	ldi	r31, 0x08	; 8
    dd62:	3f 9f       	mul	r19, r31
    dd64:	80 0d       	add	r24, r0
    dd66:	91 1d       	adc	r25, r1
    dd68:	11 24       	eor	r1, r1
    dd6a:	01 96       	adiw	r24, 0x01	; 1
    dd6c:	2c 77       	andi	r18, 0x7C	; 124
    dd6e:	30 e0       	ldi	r19, 0x00	; 0
    dd70:	35 95       	asr	r19
    dd72:	27 95       	ror	r18
    dd74:	35 95       	asr	r19
    dd76:	27 95       	ror	r18
    dd78:	2f 5f       	subi	r18, 0xFF	; 255
    dd7a:	3f 4f       	sbci	r19, 0xFF	; 255
    dd7c:	82 9f       	mul	r24, r18
    dd7e:	a0 01       	movw	r20, r0
    dd80:	83 9f       	mul	r24, r19
    dd82:	50 0d       	add	r21, r0
    dd84:	92 9f       	mul	r25, r18
    dd86:	50 0d       	add	r21, r0
    dd88:	11 24       	eor	r1, r1
    dd8a:	ca 01       	movw	r24, r20
    dd8c:	a0 e0       	ldi	r26, 0x00	; 0
    dd8e:	b0 e0       	ldi	r27, 0x00	; 0
    dd90:	f8 01       	movw	r30, r16
    dd92:	80 83       	st	Z, r24
    dd94:	91 83       	std	Z+1, r25	; 0x01
    dd96:	a2 83       	std	Z+2, r26	; 0x02
    dd98:	b3 83       	std	Z+3, r27	; 0x03
    dd9a:	00 e0       	ldi	r16, 0x00	; 0
    dd9c:	23 c1       	rjmp	.+582    	; 0xdfe4 <mmc_disk_ioctl+0x464>
    dd9e:	40 e0       	ldi	r20, 0x00	; 0
    dda0:	50 e0       	ldi	r21, 0x00	; 0
    dda2:	ba 01       	movw	r22, r20
    dda4:	89 e0       	ldi	r24, 0x09	; 9
    dda6:	04 c0       	rjmp	.+8      	; 0xddb0 <mmc_disk_ioctl+0x230>
    dda8:	40 e0       	ldi	r20, 0x00	; 0
    ddaa:	50 e0       	ldi	r21, 0x00	; 0
    ddac:	ba 01       	movw	r22, r20
    ddae:	8a e0       	ldi	r24, 0x0A	; 10
    ddb0:	2f dd       	rcall	.-1442   	; 0xd810 <send_cmd>
    ddb2:	81 11       	cpse	r24, r1
    ddb4:	16 c1       	rjmp	.+556    	; 0xdfe2 <mmc_disk_ioctl+0x462>
    ddb6:	60 e1       	ldi	r22, 0x10	; 16
    ddb8:	70 e0       	ldi	r23, 0x00	; 0
    ddba:	1f c0       	rjmp	.+62     	; 0xddfa <mmc_disk_ioctl+0x27a>
    ddbc:	40 e0       	ldi	r20, 0x00	; 0
    ddbe:	50 e0       	ldi	r21, 0x00	; 0
    ddc0:	ba 01       	movw	r22, r20
    ddc2:	8a e3       	ldi	r24, 0x3A	; 58
    ddc4:	25 dd       	rcall	.-1462   	; 0xd810 <send_cmd>
    ddc6:	81 11       	cpse	r24, r1
    ddc8:	0c c1       	rjmp	.+536    	; 0xdfe2 <mmc_disk_ioctl+0x462>
    ddca:	78 01       	movw	r14, r16
    ddcc:	f4 e0       	ldi	r31, 0x04	; 4
    ddce:	ef 0e       	add	r14, r31
    ddd0:	f1 1c       	adc	r15, r1
    ddd2:	8f ef       	ldi	r24, 0xFF	; 255
    ddd4:	8d d1       	rcall	.+794    	; 0xe0f0 <mmc_spi_TXRX>
    ddd6:	f8 01       	movw	r30, r16
    ddd8:	81 93       	st	Z+, r24
    ddda:	8f 01       	movw	r16, r30
    dddc:	ee 15       	cp	r30, r14
    ddde:	ff 05       	cpc	r31, r15
    dde0:	c1 f7       	brne	.-16     	; 0xddd2 <mmc_disk_ioctl+0x252>
    dde2:	db cf       	rjmp	.-74     	; 0xdd9a <mmc_disk_ioctl+0x21a>
    dde4:	40 e0       	ldi	r20, 0x00	; 0
    dde6:	50 e0       	ldi	r21, 0x00	; 0
    dde8:	ba 01       	movw	r22, r20
    ddea:	8d e8       	ldi	r24, 0x8D	; 141
    ddec:	11 dd       	rcall	.-1502   	; 0xd810 <send_cmd>
    ddee:	81 11       	cpse	r24, r1
    ddf0:	f8 c0       	rjmp	.+496    	; 0xdfe2 <mmc_disk_ioctl+0x462>
    ddf2:	8f ef       	ldi	r24, 0xFF	; 255
    ddf4:	af dc       	rcall	.-1698   	; 0xd754 <xchg_spi>
    ddf6:	60 e4       	ldi	r22, 0x40	; 64
    ddf8:	70 e0       	ldi	r23, 0x00	; 0
    ddfa:	c8 01       	movw	r24, r16
    ddfc:	b3 dc       	rcall	.-1690   	; 0xd764 <rcvr_datablock>
    ddfe:	01 e0       	ldi	r16, 0x01	; 1
    de00:	10 e0       	ldi	r17, 0x00	; 0
    de02:	89 2b       	or	r24, r25
    de04:	09 f4       	brne	.+2      	; 0xde08 <mmc_disk_ioctl+0x288>
    de06:	ef c0       	rjmp	.+478    	; 0xdfe6 <mmc_disk_ioctl+0x466>
    de08:	ea c0       	rjmp	.+468    	; 0xdfde <mmc_disk_ioctl+0x45e>
    de0a:	39 d2       	rcall	.+1138   	; 0xe27e <mmc_power_off>
    de0c:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    de10:	81 60       	ori	r24, 0x01	; 1
    de12:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <Stat>
    de16:	00 e0       	ldi	r16, 0x00	; 0
    de18:	eb c0       	rjmp	.+470    	; 0xdff0 <mmc_disk_ioctl+0x470>
    de1a:	fb 01       	movw	r30, r22
    de1c:	43 81       	ldd	r20, Z+3	; 0x03
    de1e:	54 81       	ldd	r21, Z+4	; 0x04
    de20:	65 81       	ldd	r22, Z+5	; 0x05
    de22:	76 81       	ldd	r23, Z+6	; 0x06
    de24:	39 e0       	ldi	r19, 0x09	; 9
    de26:	44 0f       	add	r20, r20
    de28:	55 1f       	adc	r21, r21
    de2a:	66 1f       	adc	r22, r22
    de2c:	77 1f       	adc	r23, r23
    de2e:	3a 95       	dec	r19
    de30:	d1 f7       	brne	.-12     	; 0xde26 <mmc_disk_ioctl+0x2a6>
    de32:	70 68       	ori	r23, 0x80	; 128
    de34:	80 81       	ld	r24, Z
    de36:	90 e0       	ldi	r25, 0x00	; 0
    de38:	a0 e0       	ldi	r26, 0x00	; 0
    de3a:	b0 e0       	ldi	r27, 0x00	; 0
    de3c:	2c e1       	ldi	r18, 0x1C	; 28
    de3e:	88 0f       	add	r24, r24
    de40:	99 1f       	adc	r25, r25
    de42:	aa 1f       	adc	r26, r26
    de44:	bb 1f       	adc	r27, r27
    de46:	2a 95       	dec	r18
    de48:	d1 f7       	brne	.-12     	; 0xde3e <mmc_disk_ioctl+0x2be>
    de4a:	48 2b       	or	r20, r24
    de4c:	59 2b       	or	r21, r25
    de4e:	6a 2b       	or	r22, r26
    de50:	7b 2b       	or	r23, r27
    de52:	81 81       	ldd	r24, Z+1	; 0x01
    de54:	92 81       	ldd	r25, Z+2	; 0x02
    de56:	01 97       	sbiw	r24, 0x01	; 1
    de58:	91 70       	andi	r25, 0x01	; 1
    de5a:	a0 e0       	ldi	r26, 0x00	; 0
    de5c:	b0 e0       	ldi	r27, 0x00	; 0
    de5e:	48 2b       	or	r20, r24
    de60:	59 2b       	or	r21, r25
    de62:	6a 2b       	or	r22, r26
    de64:	7b 2b       	or	r23, r27
    de66:	80 e3       	ldi	r24, 0x30	; 48
    de68:	d3 dc       	rcall	.-1626   	; 0xd810 <send_cmd>
    de6a:	81 11       	cpse	r24, r1
    de6c:	ba c0       	rjmp	.+372    	; 0xdfe2 <mmc_disk_ioctl+0x462>
    de6e:	88 ee       	ldi	r24, 0xE8	; 232
    de70:	93 e0       	ldi	r25, 0x03	; 3
    de72:	41 d1       	rcall	.+642    	; 0xe0f6 <mmc_set_ms_timeout>
    de74:	8f ef       	ldi	r24, 0xFF	; 255
    de76:	3c d1       	rcall	.+632    	; 0xe0f0 <mmc_spi_TXRX>
    de78:	8f 3f       	cpi	r24, 0xFF	; 255
    de7a:	21 f4       	brne	.+8      	; 0xde84 <mmc_disk_ioctl+0x304>
    de7c:	43 d1       	rcall	.+646    	; 0xe104 <mmc_test_timeout>
    de7e:	89 2b       	or	r24, r25
    de80:	c9 f3       	breq	.-14     	; 0xde74 <mmc_disk_ioctl+0x2f4>
    de82:	af c0       	rjmp	.+350    	; 0xdfe2 <mmc_disk_ioctl+0x462>
    de84:	8e 3f       	cpi	r24, 0xFE	; 254
    de86:	09 f0       	breq	.+2      	; 0xde8a <mmc_disk_ioctl+0x30a>
    de88:	ac c0       	rjmp	.+344    	; 0xdfe2 <mmc_disk_ioctl+0x462>
    de8a:	f8 01       	movw	r30, r16
    de8c:	e7 80       	ldd	r14, Z+7	; 0x07
    de8e:	f0 84       	ldd	r15, Z+8	; 0x08
    de90:	c1 80       	ldd	r12, Z+1	; 0x01
    de92:	d2 80       	ldd	r13, Z+2	; 0x02
    de94:	ce 0c       	add	r12, r14
    de96:	df 1c       	adc	r13, r15
    de98:	ce 14       	cp	r12, r14
    de9a:	df 04       	cpc	r13, r15
    de9c:	31 f0       	breq	.+12     	; 0xdeaa <mmc_disk_ioctl+0x32a>
    de9e:	8f ef       	ldi	r24, 0xFF	; 255
    dea0:	27 d1       	rcall	.+590    	; 0xe0f0 <mmc_spi_TXRX>
    dea2:	f7 01       	movw	r30, r14
    dea4:	81 93       	st	Z+, r24
    dea6:	7f 01       	movw	r14, r30
    dea8:	f7 cf       	rjmp	.-18     	; 0xde98 <mmc_disk_ioctl+0x318>
    deaa:	f8 01       	movw	r30, r16
    deac:	81 81       	ldd	r24, Z+1	; 0x01
    deae:	92 81       	ldd	r25, Z+2	; 0x02
    deb0:	02 e0       	ldi	r16, 0x02	; 2
    deb2:	12 e0       	ldi	r17, 0x02	; 2
    deb4:	08 1b       	sub	r16, r24
    deb6:	19 0b       	sbc	r17, r25
    deb8:	01 15       	cp	r16, r1
    deba:	11 05       	cpc	r17, r1
    debc:	09 f4       	brne	.+2      	; 0xdec0 <mmc_disk_ioctl+0x340>
    debe:	6d cf       	rjmp	.-294    	; 0xdd9a <mmc_disk_ioctl+0x21a>
    dec0:	8f ef       	ldi	r24, 0xFF	; 255
    dec2:	48 dc       	rcall	.-1904   	; 0xd754 <xchg_spi>
    dec4:	01 50       	subi	r16, 0x01	; 1
    dec6:	11 09       	sbc	r17, r1
    dec8:	f7 cf       	rjmp	.-18     	; 0xdeb8 <mmc_disk_ioctl+0x338>
    deca:	fb 01       	movw	r30, r22
    decc:	43 81       	ldd	r20, Z+3	; 0x03
    dece:	54 81       	ldd	r21, Z+4	; 0x04
    ded0:	65 81       	ldd	r22, Z+5	; 0x05
    ded2:	76 81       	ldd	r23, Z+6	; 0x06
    ded4:	39 e0       	ldi	r19, 0x09	; 9
    ded6:	44 0f       	add	r20, r20
    ded8:	55 1f       	adc	r21, r21
    deda:	66 1f       	adc	r22, r22
    dedc:	77 1f       	adc	r23, r23
    dede:	3a 95       	dec	r19
    dee0:	d1 f7       	brne	.-12     	; 0xded6 <mmc_disk_ioctl+0x356>
    dee2:	70 68       	ori	r23, 0x80	; 128
    dee4:	80 81       	ld	r24, Z
    dee6:	90 e0       	ldi	r25, 0x00	; 0
    dee8:	a0 e0       	ldi	r26, 0x00	; 0
    deea:	b0 e0       	ldi	r27, 0x00	; 0
    deec:	2c e1       	ldi	r18, 0x1C	; 28
    deee:	88 0f       	add	r24, r24
    def0:	99 1f       	adc	r25, r25
    def2:	aa 1f       	adc	r26, r26
    def4:	bb 1f       	adc	r27, r27
    def6:	2a 95       	dec	r18
    def8:	d1 f7       	brne	.-12     	; 0xdeee <mmc_disk_ioctl+0x36e>
    defa:	48 2b       	or	r20, r24
    defc:	59 2b       	or	r21, r25
    defe:	6a 2b       	or	r22, r26
    df00:	7b 2b       	or	r23, r27
    df02:	81 81       	ldd	r24, Z+1	; 0x01
    df04:	92 81       	ldd	r25, Z+2	; 0x02
    df06:	01 97       	sbiw	r24, 0x01	; 1
    df08:	91 70       	andi	r25, 0x01	; 1
    df0a:	a0 e0       	ldi	r26, 0x00	; 0
    df0c:	b0 e0       	ldi	r27, 0x00	; 0
    df0e:	48 2b       	or	r20, r24
    df10:	59 2b       	or	r21, r25
    df12:	6a 2b       	or	r22, r26
    df14:	7b 2b       	or	r23, r27
    df16:	81 e3       	ldi	r24, 0x31	; 49
    df18:	7b dc       	rcall	.-1802   	; 0xd810 <send_cmd>
    df1a:	81 11       	cpse	r24, r1
    df1c:	62 c0       	rjmp	.+196    	; 0xdfe2 <mmc_disk_ioctl+0x462>
    df1e:	8f ef       	ldi	r24, 0xFF	; 255
    df20:	19 dc       	rcall	.-1998   	; 0xd754 <xchg_spi>
    df22:	8e ef       	ldi	r24, 0xFE	; 254
    df24:	17 dc       	rcall	.-2002   	; 0xd754 <xchg_spi>
    df26:	f8 01       	movw	r30, r16
    df28:	e7 80       	ldd	r14, Z+7	; 0x07
    df2a:	f0 84       	ldd	r15, Z+8	; 0x08
    df2c:	c1 80       	ldd	r12, Z+1	; 0x01
    df2e:	d2 80       	ldd	r13, Z+2	; 0x02
    df30:	ce 0c       	add	r12, r14
    df32:	df 1c       	adc	r13, r15
    df34:	ec 14       	cp	r14, r12
    df36:	fd 04       	cpc	r15, r13
    df38:	29 f0       	breq	.+10     	; 0xdf44 <mmc_disk_ioctl+0x3c4>
    df3a:	f7 01       	movw	r30, r14
    df3c:	81 91       	ld	r24, Z+
    df3e:	7f 01       	movw	r14, r30
    df40:	09 dc       	rcall	.-2030   	; 0xd754 <xchg_spi>
    df42:	f8 cf       	rjmp	.-16     	; 0xdf34 <mmc_disk_ioctl+0x3b4>
    df44:	f8 01       	movw	r30, r16
    df46:	81 81       	ldd	r24, Z+1	; 0x01
    df48:	92 81       	ldd	r25, Z+2	; 0x02
    df4a:	02 e0       	ldi	r16, 0x02	; 2
    df4c:	12 e0       	ldi	r17, 0x02	; 2
    df4e:	08 1b       	sub	r16, r24
    df50:	19 0b       	sbc	r17, r25
    df52:	8f ef       	ldi	r24, 0xFF	; 255
    df54:	01 15       	cp	r16, r1
    df56:	11 05       	cpc	r17, r1
    df58:	09 f4       	brne	.+2      	; 0xdf5c <mmc_disk_ioctl+0x3dc>
    df5a:	3b c0       	rjmp	.+118    	; 0xdfd2 <mmc_disk_ioctl+0x452>
    df5c:	fb db       	rcall	.-2058   	; 0xd754 <xchg_spi>
    df5e:	01 50       	subi	r16, 0x01	; 1
    df60:	11 09       	sbc	r17, r1
    df62:	f7 cf       	rjmp	.-18     	; 0xdf52 <mmc_disk_ioctl+0x3d2>
    df64:	fb 01       	movw	r30, r22
    df66:	43 81       	ldd	r20, Z+3	; 0x03
    df68:	54 81       	ldd	r21, Z+4	; 0x04
    df6a:	65 81       	ldd	r22, Z+5	; 0x05
    df6c:	76 81       	ldd	r23, Z+6	; 0x06
    df6e:	89 e0       	ldi	r24, 0x09	; 9
    df70:	44 0f       	add	r20, r20
    df72:	55 1f       	adc	r21, r21
    df74:	66 1f       	adc	r22, r22
    df76:	77 1f       	adc	r23, r23
    df78:	8a 95       	dec	r24
    df7a:	d1 f7       	brne	.-12     	; 0xdf70 <mmc_disk_ioctl+0x3f0>
    df7c:	74 68       	ori	r23, 0x84	; 132
    df7e:	80 81       	ld	r24, Z
    df80:	90 e0       	ldi	r25, 0x00	; 0
    df82:	a0 e0       	ldi	r26, 0x00	; 0
    df84:	b0 e0       	ldi	r27, 0x00	; 0
    df86:	2c e1       	ldi	r18, 0x1C	; 28
    df88:	88 0f       	add	r24, r24
    df8a:	99 1f       	adc	r25, r25
    df8c:	aa 1f       	adc	r26, r26
    df8e:	bb 1f       	adc	r27, r27
    df90:	2a 95       	dec	r18
    df92:	d1 f7       	brne	.-12     	; 0xdf88 <mmc_disk_ioctl+0x408>
    df94:	48 2b       	or	r20, r24
    df96:	59 2b       	or	r21, r25
    df98:	6a 2b       	or	r22, r26
    df9a:	7b 2b       	or	r23, r27
    df9c:	82 81       	ldd	r24, Z+2	; 0x02
    df9e:	90 e0       	ldi	r25, 0x00	; 0
    dfa0:	a0 e0       	ldi	r26, 0x00	; 0
    dfa2:	b0 e0       	ldi	r27, 0x00	; 0
    dfa4:	48 2b       	or	r20, r24
    dfa6:	59 2b       	or	r21, r25
    dfa8:	6a 2b       	or	r22, r26
    dfaa:	7b 2b       	or	r23, r27
    dfac:	81 e3       	ldi	r24, 0x31	; 49
    dfae:	30 dc       	rcall	.-1952   	; 0xd810 <send_cmd>
    dfb0:	81 11       	cpse	r24, r1
    dfb2:	17 c0       	rjmp	.+46     	; 0xdfe2 <mmc_disk_ioctl+0x462>
    dfb4:	8f ef       	ldi	r24, 0xFF	; 255
    dfb6:	ce db       	rcall	.-2148   	; 0xd754 <xchg_spi>
    dfb8:	8e ef       	ldi	r24, 0xFE	; 254
    dfba:	cc db       	rcall	.-2152   	; 0xd754 <xchg_spi>
    dfbc:	f8 01       	movw	r30, r16
    dfbe:	81 81       	ldd	r24, Z+1	; 0x01
    dfc0:	c9 db       	rcall	.-2158   	; 0xd754 <xchg_spi>
    dfc2:	01 e0       	ldi	r16, 0x01	; 1
    dfc4:	12 e0       	ldi	r17, 0x02	; 2
    dfc6:	8f ef       	ldi	r24, 0xFF	; 255
    dfc8:	c5 db       	rcall	.-2166   	; 0xd754 <xchg_spi>
    dfca:	01 50       	subi	r16, 0x01	; 1
    dfcc:	11 09       	sbc	r17, r1
    dfce:	d9 f7       	brne	.-10     	; 0xdfc6 <mmc_disk_ioctl+0x446>
    dfd0:	8f ef       	ldi	r24, 0xFF	; 255
    dfd2:	8e d0       	rcall	.+284    	; 0xe0f0 <mmc_spi_TXRX>
    dfd4:	8f 71       	andi	r24, 0x1F	; 31
    dfd6:	01 e0       	ldi	r16, 0x01	; 1
    dfd8:	10 e0       	ldi	r17, 0x00	; 0
    dfda:	85 30       	cpi	r24, 0x05	; 5
    dfdc:	21 f4       	brne	.+8      	; 0xdfe6 <mmc_disk_ioctl+0x466>
    dfde:	00 e0       	ldi	r16, 0x00	; 0
    dfe0:	02 c0       	rjmp	.+4      	; 0xdfe6 <mmc_disk_ioctl+0x466>
    dfe2:	01 e0       	ldi	r16, 0x01	; 1
    dfe4:	10 e0       	ldi	r17, 0x00	; 0
    dfe6:	b8 db       	rcall	.-2192   	; 0xd758 <deselect>
    dfe8:	04 c0       	rjmp	.+8      	; 0xdff2 <mmc_disk_ioctl+0x472>
    dfea:	03 e0       	ldi	r16, 0x03	; 3
    dfec:	01 c0       	rjmp	.+2      	; 0xdff0 <mmc_disk_ioctl+0x470>
    dfee:	04 e0       	ldi	r16, 0x04	; 4
    dff0:	10 e0       	ldi	r17, 0x00	; 0
    dff2:	c8 01       	movw	r24, r16
    dff4:	60 96       	adiw	r28, 0x10	; 16
    dff6:	e8 e0       	ldi	r30, 0x08	; 8
    dff8:	0c 94 06 e6 	jmp	0x1cc0c	; 0x1cc0c <__epilogue_restores__+0x14>

0000dffc <mmc_disk_timerproc>:
    dffc:	80 91 19 18 	lds	r24, 0x1819	; 0x801819 <Timer1>
    e000:	88 23       	and	r24, r24
    e002:	19 f0       	breq	.+6      	; 0xe00a <mmc_disk_timerproc+0xe>
    e004:	81 50       	subi	r24, 0x01	; 1
    e006:	80 93 19 18 	sts	0x1819, r24	; 0x801819 <Timer1>
    e00a:	80 91 18 18 	lds	r24, 0x1818	; 0x801818 <Timer2>
    e00e:	88 23       	and	r24, r24
    e010:	19 f0       	breq	.+6      	; 0xe018 <mmc_disk_timerproc+0x1c>
    e012:	81 50       	subi	r24, 0x01	; 1
    e014:	80 93 18 18 	sts	0x1818, r24	; 0x801818 <Timer2>
    e018:	08 95       	ret

0000e01a <mmc_task>:
void mmc_ms_wait(int ms)
{
    mmc_set_ms_timeout(ms);
    while(!mmc_test_timeout())
        ;
}
    e01a:	80 91 20 18 	lds	r24, 0x1820	; 0x801820 <_mmc_timeout>
    e01e:	90 91 21 18 	lds	r25, 0x1821	; 0x801821 <_mmc_timeout+0x1>
    e022:	00 97       	sbiw	r24, 0x00	; 0
    e024:	29 f0       	breq	.+10     	; 0xe030 <mmc_task+0x16>
    e026:	01 97       	sbiw	r24, 0x01	; 1
    e028:	90 93 21 18 	sts	0x1821, r25	; 0x801821 <_mmc_timeout+0x1>
    e02c:	80 93 20 18 	sts	0x1820, r24	; 0x801820 <_mmc_timeout>
    e030:	80 91 1a 18 	lds	r24, 0x181A	; 0x80181a <_mmc_pre>
    e034:	90 91 1b 18 	lds	r25, 0x181B	; 0x80181b <_mmc_pre+0x1>
    e038:	8a 30       	cpi	r24, 0x0A	; 10
    e03a:	91 05       	cpc	r25, r1
    e03c:	30 f4       	brcc	.+12     	; 0xe04a <mmc_task+0x30>
    e03e:	01 96       	adiw	r24, 0x01	; 1
    e040:	90 93 1b 18 	sts	0x181B, r25	; 0x80181b <_mmc_pre+0x1>
    e044:	80 93 1a 18 	sts	0x181A, r24	; 0x80181a <_mmc_pre>
    e048:	08 95       	ret
    e04a:	10 92 1b 18 	sts	0x181B, r1	; 0x80181b <_mmc_pre+0x1>
    e04e:	10 92 1a 18 	sts	0x181A, r1	; 0x80181a <_mmc_pre>
    e052:	d4 cf       	rjmp	.-88     	; 0xdffc <mmc_disk_timerproc>
    e054:	08 95       	ret

0000e056 <mmc_install_timer>:
    e056:	10 92 21 18 	sts	0x1821, r1	; 0x801821 <_mmc_timeout+0x1>
    e05a:	10 92 20 18 	sts	0x1820, r1	; 0x801820 <_mmc_timeout>
    e05e:	61 e0       	ldi	r22, 0x01	; 1
    e060:	70 e0       	ldi	r23, 0x00	; 0
    e062:	8d e0       	ldi	r24, 0x0D	; 13
    e064:	90 e7       	ldi	r25, 0x70	; 112
    e066:	0e 94 dc 35 	call	0x6bb8	; 0x6bb8 <set_timers>
    e06a:	01 96       	adiw	r24, 0x01	; 1
    e06c:	51 f4       	brne	.+20     	; 0xe082 <mmc_install_timer+0x2c>
    e06e:	87 e4       	ldi	r24, 0x47	; 71
    e070:	98 e0       	ldi	r25, 0x08	; 8
    e072:	1f 92       	push	r1
    e074:	9f 93       	push	r25
    e076:	8f 93       	push	r24
    e078:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    e07c:	0f 90       	pop	r0
    e07e:	0f 90       	pop	r0
    e080:	0f 90       	pop	r0
    e082:	08 95       	ret

0000e084 <mmc_spi_begin>:
    e084:	60 91 1c 18 	lds	r22, 0x181C	; 0x80181c <_mmc_clock>
    e088:	70 91 1d 18 	lds	r23, 0x181D	; 0x80181d <_mmc_clock+0x1>
    e08c:	80 91 1e 18 	lds	r24, 0x181E	; 0x80181e <_mmc_clock+0x2>
    e090:	90 91 1f 18 	lds	r25, 0x181F	; 0x80181f <_mmc_clock+0x3>
    e094:	4b e0       	ldi	r20, 0x0B	; 11
    e096:	50 e0       	ldi	r21, 0x00	; 0
    e098:	0c 94 9f 28 	jmp	0x513e	; 0x513e <spi_begin>
    e09c:	08 95       	ret

0000e09e <mmc_spi_end>:
    e09e:	8b e0       	ldi	r24, 0x0B	; 11
    e0a0:	0c 94 49 28 	jmp	0x5092	; 0x5092 <spi_end>
    e0a4:	08 95       	ret

0000e0a6 <mmc_slow>:
    e0a6:	80 e2       	ldi	r24, 0x20	; 32
    e0a8:	91 ea       	ldi	r25, 0xA1	; 161
    e0aa:	a7 e0       	ldi	r26, 0x07	; 7
    e0ac:	b0 e0       	ldi	r27, 0x00	; 0
    e0ae:	80 93 1c 18 	sts	0x181C, r24	; 0x80181c <_mmc_clock>
    e0b2:	90 93 1d 18 	sts	0x181D, r25	; 0x80181d <_mmc_clock+0x1>
    e0b6:	a0 93 1e 18 	sts	0x181E, r26	; 0x80181e <_mmc_clock+0x2>
    e0ba:	b0 93 1f 18 	sts	0x181F, r27	; 0x80181f <_mmc_clock+0x3>
    e0be:	08 95       	ret

0000e0c0 <mmc_spi_init>:
    e0c0:	8b e0       	ldi	r24, 0x0B	; 11
    e0c2:	0e 94 47 28 	call	0x508e	; 0x508e <chip_select_init>
    e0c6:	ef cf       	rjmp	.-34     	; 0xe0a6 <mmc_slow>
    e0c8:	08 95       	ret

0000e0ca <mmc_fast>:
    e0ca:	80 ea       	ldi	r24, 0xA0	; 160
    e0cc:	95 e2       	ldi	r25, 0x25	; 37
    e0ce:	a6 e2       	ldi	r26, 0x26	; 38
    e0d0:	b0 e0       	ldi	r27, 0x00	; 0
    e0d2:	80 93 1c 18 	sts	0x181C, r24	; 0x80181c <_mmc_clock>
    e0d6:	90 93 1d 18 	sts	0x181D, r25	; 0x80181d <_mmc_clock+0x1>
    e0da:	a0 93 1e 18 	sts	0x181E, r26	; 0x80181e <_mmc_clock+0x2>
    e0de:	b0 93 1f 18 	sts	0x181F, r27	; 0x80181f <_mmc_clock+0x3>
    e0e2:	08 95       	ret

0000e0e4 <mmc_spi_TX_buffer>:
    e0e4:	0c 94 6b 28 	jmp	0x50d6	; 0x50d6 <spi_TX_buffer>
    e0e8:	08 95       	ret

0000e0ea <mmc_spi_RX_buffer>:
    e0ea:	0c 94 6d 28 	jmp	0x50da	; 0x50da <spi_RX_buffer>
    e0ee:	08 95       	ret

0000e0f0 <mmc_spi_TXRX>:
    e0f0:	0c 94 db 28 	jmp	0x51b6	; 0x51b6 <spi_TXRX>
    e0f4:	08 95       	ret

0000e0f6 <mmc_set_ms_timeout>:
    e0f6:	f8 94       	cli
    e0f8:	90 93 21 18 	sts	0x1821, r25	; 0x801821 <_mmc_timeout+0x1>
    e0fc:	80 93 20 18 	sts	0x1820, r24	; 0x801820 <_mmc_timeout>
    e100:	78 94       	sei
    e102:	08 95       	ret

0000e104 <mmc_test_timeout>:
    e104:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    e108:	81 fd       	sbrc	r24, 1
    e10a:	15 c0       	rjmp	.+42     	; 0xe136 <mmc_test_timeout+0x32>
    e10c:	80 91 20 18 	lds	r24, 0x1820	; 0x801820 <_mmc_timeout>
    e110:	90 91 21 18 	lds	r25, 0x1821	; 0x801821 <_mmc_timeout+0x1>
    e114:	89 2b       	or	r24, r25
    e116:	91 f4       	brne	.+36     	; 0xe13c <mmc_test_timeout+0x38>
    e118:	8a e3       	ldi	r24, 0x3A	; 58
    e11a:	98 e0       	ldi	r25, 0x08	; 8
    e11c:	1f 92       	push	r1
    e11e:	9f 93       	push	r25
    e120:	8f 93       	push	r24
    e122:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    e126:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    e12a:	83 60       	ori	r24, 0x03	; 3
    e12c:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <Stat>
    e130:	0f 90       	pop	r0
    e132:	0f 90       	pop	r0
    e134:	0f 90       	pop	r0
    e136:	81 e0       	ldi	r24, 0x01	; 1
    e138:	90 e0       	ldi	r25, 0x00	; 0
    e13a:	08 95       	ret
    e13c:	80 e0       	ldi	r24, 0x00	; 0
    e13e:	90 e0       	ldi	r25, 0x00	; 0
    e140:	08 95       	ret

0000e142 <mmc_init>:
///
/// @param[in] verbose: display initialisation messages
/// @return
MEMSPACE
int mmc_init(int verbose)
{
    e142:	a4 e0       	ldi	r26, 0x04	; 4
    e144:	b0 e0       	ldi	r27, 0x00	; 0
    e146:	e7 ea       	ldi	r30, 0xA7	; 167
    e148:	f0 e7       	ldi	r31, 0x70	; 112
    e14a:	0c 94 ec e5 	jmp	0x1cbd8	; 0x1cbd8 <__prologue_saves__+0x18>
    e14e:	7c 01       	movw	r14, r24
    int rc;

    Stat = 0;
    e150:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <Stat>

    mmc_spi_init();

    if( verbose)
    e154:	b5 df       	rcall	.-150    	; 0xe0c0 <mmc_spi_init>
    e156:	e1 14       	cp	r14, r1
    e158:	f1 04       	cpc	r15, r1
    {
        printf("START MMC INIT\n");
    e15a:	51 f0       	breq	.+20     	; 0xe170 <mmc_init+0x2e>
    e15c:	8a e2       	ldi	r24, 0x2A	; 42
    e15e:	98 e0       	ldi	r25, 0x08	; 8
    e160:	1f 92       	push	r1
    e162:	9f 93       	push	r25
    e164:	8f 93       	push	r24
    e166:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    e16a:	0f 90       	pop	r0
    e16c:	0f 90       	pop	r0
    }
    // we only install timers once!
    if(!mmc_init_flag)
    e16e:	0f 90       	pop	r0
    e170:	80 91 22 18 	lds	r24, 0x1822	; 0x801822 <mmc_init_flag>
    e174:	90 91 23 18 	lds	r25, 0x1823	; 0x801823 <mmc_init_flag+0x1>
        mmc_install_timer();
    e178:	89 2b       	or	r24, r25
    e17a:	09 f4       	brne	.+2      	; 0xe17e <mmc_init+0x3c>

    if( verbose)
    e17c:	6c df       	rcall	.-296    	; 0xe056 <mmc_install_timer>
    e17e:	e1 14       	cp	r14, r1
    e180:	f1 04       	cpc	r15, r1
    {
#if defined (FF_USE_LFN)
        printf("LFN Enabled");
    e182:	b9 f0       	breq	.+46     	; 0xe1b2 <mmc_init+0x70>
    e184:	8e e1       	ldi	r24, 0x1E	; 30
    e186:	98 e0       	ldi	r25, 0x08	; 8
    e188:	1f 92       	push	r1
    e18a:	9f 93       	push	r25
    e18c:	8f 93       	push	r24
    e18e:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
#else
        printf("LFN Disabled");
#endif
        printf(", Code page: %u\n", FF_CODE_PAGE);
    e192:	81 e0       	ldi	r24, 0x01	; 1
    e194:	8f 93       	push	r24
    e196:	85 eb       	ldi	r24, 0xB5	; 181
    e198:	8f 93       	push	r24
    e19a:	8d e0       	ldi	r24, 0x0D	; 13
    e19c:	98 e0       	ldi	r25, 0x08	; 8
    e19e:	1f 92       	push	r1
    e1a0:	9f 93       	push	r25
    e1a2:	8f 93       	push	r24
    e1a4:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    e1a8:	0f b6       	in	r0, 0x3f	; 63
    e1aa:	f8 94       	cli
    e1ac:	de bf       	out	0x3e, r29	; 62
    }

    rc = disk_initialize(DEV_MMC);    // aliased to mmc_disk_initialize()
    e1ae:	0f be       	out	0x3f, r0	; 63
    e1b0:	cd bf       	out	0x3d, r28	; 61
    e1b2:	80 e0       	ldi	r24, 0x00	; 0
    e1b4:	9f da       	rcall	.-2754   	; 0xd6f4 <disk_initialize>
    e1b6:	08 2f       	mov	r16, r24

    if( rc != RES_OK  )
    e1b8:	10 e0       	ldi	r17, 0x00	; 0
    e1ba:	01 15       	cp	r16, r1
        put_rc(rc);
    e1bc:	11 05       	cpc	r17, r1
    e1be:	19 f0       	breq	.+6      	; 0xe1c6 <mmc_init+0x84>
    e1c0:	c8 01       	movw	r24, r16
    e1c2:	e3 d0       	rcall	.+454    	; 0xe38a <put_rc>

    if( rc == RES_OK)
        rc = f_mount(&Fatfs[0],"/", 0);
    e1c4:	0e c0       	rjmp	.+28     	; 0xe1e2 <mmc_init+0xa0>
    e1c6:	40 e0       	ldi	r20, 0x00	; 0
    e1c8:	68 e3       	ldi	r22, 0x38	; 56
    e1ca:	78 e0       	ldi	r23, 0x08	; 8
    e1cc:	8c e7       	ldi	r24, 0x7C	; 124
    e1ce:	99 e1       	ldi	r25, 0x19	; 25
    e1d0:	0e 94 11 5b 	call	0xb622	; 0xb622 <f_mount>

    if( rc != RES_OK || verbose)
    e1d4:	8c 01       	movw	r16, r24
    e1d6:	89 2b       	or	r24, r25
    e1d8:	21 f4       	brne	.+8      	; 0xe1e2 <mmc_init+0xa0>
    e1da:	e1 14       	cp	r14, r1
    e1dc:	f1 04       	cpc	r15, r1
        put_rc( rc );
    e1de:	09 f4       	brne	.+2      	; 0xe1e2 <mmc_init+0xa0>
    e1e0:	43 c0       	rjmp	.+134    	; 0xe268 <mmc_init+0x126>
    e1e2:	c8 01       	movw	r24, r16

    if (verbose )
    e1e4:	d2 d0       	rcall	.+420    	; 0xe38a <put_rc>
    e1e6:	e1 14       	cp	r14, r1
    e1e8:	f1 04       	cpc	r15, r1
    e1ea:	09 f4       	brne	.+2      	; 0xe1ee <mmc_init+0xac>
    {
        DWORD blksize = 0;
    e1ec:	3d c0       	rjmp	.+122    	; 0xe268 <mmc_init+0x126>
    e1ee:	19 82       	std	Y+1, r1	; 0x01
    e1f0:	1a 82       	std	Y+2, r1	; 0x02
    e1f2:	1b 82       	std	Y+3, r1	; 0x03
        if(rc == RES_OK)
    e1f4:	1c 82       	std	Y+4, r1	; 0x04
    e1f6:	01 15       	cp	r16, r1
        {
            rc = disk_ioctl ( DEV_MMC, GET_BLOCK_SIZE, (void *) &blksize);
    e1f8:	11 05       	cpc	r17, r1
    e1fa:	61 f5       	brne	.+88     	; 0xe254 <mmc_init+0x112>
    e1fc:	ae 01       	movw	r20, r28
    e1fe:	4f 5f       	subi	r20, 0xFF	; 255
    e200:	5f 4f       	sbci	r21, 0xFF	; 255
    e202:	63 e0       	ldi	r22, 0x03	; 3
            if( rc != RES_OK)
    e204:	80 e0       	ldi	r24, 0x00	; 0
    e206:	9c da       	rcall	.-2760   	; 0xd740 <disk_ioctl>
            {
                put_rc( rc );
    e208:	8c 01       	movw	r16, r24
    e20a:	00 97       	sbiw	r24, 0x00	; 0
                printf("MMC Block Size - read failed\n");
    e20c:	61 f0       	breq	.+24     	; 0xe226 <mmc_init+0xe4>
    e20e:	bd d0       	rcall	.+378    	; 0xe38a <put_rc>
    e210:	8f ee       	ldi	r24, 0xEF	; 239
    e212:	97 e0       	ldi	r25, 0x07	; 7
    e214:	1f 92       	push	r1
    e216:	9f 93       	push	r25
    e218:	8f 93       	push	r24
    e21a:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    e21e:	0f 90       	pop	r0
    e220:	0f 90       	pop	r0
            }
            else
            {
                printf("MMC Block Size: %ld\n", blksize);
    e222:	0f 90       	pop	r0
    e224:	17 c0       	rjmp	.+46     	; 0xe254 <mmc_init+0x112>
    e226:	8c 81       	ldd	r24, Y+4	; 0x04
    e228:	8f 93       	push	r24
    e22a:	8b 81       	ldd	r24, Y+3	; 0x03
    e22c:	8f 93       	push	r24
    e22e:	8a 81       	ldd	r24, Y+2	; 0x02
    e230:	8f 93       	push	r24
    e232:	89 81       	ldd	r24, Y+1	; 0x01
    e234:	8f 93       	push	r24
    e236:	8a ed       	ldi	r24, 0xDA	; 218
    e238:	97 e0       	ldi	r25, 0x07	; 7
    e23a:	1f 92       	push	r1
    e23c:	9f 93       	push	r25
            }
            if( rc == RES_OK)
            {
                fatfs_status("/");
    e23e:	8f 93       	push	r24
    e240:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    e244:	88 e3       	ldi	r24, 0x38	; 56
    e246:	98 e0       	ldi	r25, 0x08	; 8
    e248:	2e d1       	rcall	.+604    	; 0xe4a6 <fatfs_status>
    e24a:	0f b6       	in	r0, 0x3f	; 63
    e24c:	f8 94       	cli
    e24e:	de bf       	out	0x3e, r29	; 62
            }
        }
        printf("END MMC INIT\n");
    e250:	0f be       	out	0x3f, r0	; 63
    e252:	cd bf       	out	0x3d, r28	; 61
    e254:	8c ec       	ldi	r24, 0xCC	; 204
    e256:	97 e0       	ldi	r25, 0x07	; 7
    e258:	1f 92       	push	r1
    e25a:	9f 93       	push	r25
    e25c:	8f 93       	push	r24
    e25e:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    e262:	0f 90       	pop	r0
    }
    mmc_init_flag = 1;
    e264:	0f 90       	pop	r0
    e266:	0f 90       	pop	r0
    e268:	81 e0       	ldi	r24, 0x01	; 1
    e26a:	90 e0       	ldi	r25, 0x00	; 0
    e26c:	90 93 23 18 	sts	0x1823, r25	; 0x801823 <mmc_init_flag+0x1>

    return( rc ) ;
}
    e270:	80 93 22 18 	sts	0x1822, r24	; 0x801822 <mmc_init_flag>
    e274:	c8 01       	movw	r24, r16
    e276:	24 96       	adiw	r28, 0x04	; 4
    e278:	e6 e0       	ldi	r30, 0x06	; 6
    e27a:	0c 94 08 e6 	jmp	0x1cc10	; 0x1cc10 <__epilogue_restores__+0x18>

0000e27e <mmc_power_off>:
/// @brief  MMC Power OFF
///
/// @return void
MEMSPACE
void mmc_power_off()
{
    e27e:	08 95       	ret

0000e280 <mmc_ins_status>:

MEMSPACE
int mmc_ins_status()
{
    return (1);
}
    e280:	81 e0       	ldi	r24, 0x01	; 1
    e282:	90 e0       	ldi	r25, 0x00	; 0
    e284:	08 95       	ret

0000e286 <mmc_wp_status>:

MEMSPACE
int mmc_wp_status()
{
    return (0);
}
    e286:	80 e0       	ldi	r24, 0x00	; 0
    e288:	90 e0       	ldi	r25, 0x00	; 0
    e28a:	08 95       	ret

0000e28c <tm_to_fat>:
/// @param[in] t: POSIX struct tm * to convert.
///
/// @return  FAT32 time.
MEMSPACE
uint32_t tm_to_fat(tm_t *t)
{
    e28c:	0f 93       	push	r16
    e28e:	1f 93       	push	r17
    e290:	fc 01       	movw	r30, r24
        | (((uint32_t)t->tm_mon+1) << 21)
        | (((uint32_t)t->tm_mday) << 16)
        | ((uint32_t)t->tm_hour << 11)
        | ((uint32_t)t->tm_min << 5)
        | ((uint32_t)t->tm_sec >> 1);
    return(fat);
    e292:	46 81       	ldd	r20, Z+6	; 0x06
    e294:	57 81       	ldd	r21, Z+7	; 0x07
    e296:	05 2e       	mov	r0, r21
    e298:	00 0c       	add	r0, r0
    e29a:	66 0b       	sbc	r22, r22
    e29c:	77 0b       	sbc	r23, r23
    e29e:	ba 01       	movw	r22, r20
    e2a0:	55 27       	eor	r21, r21
    e2a2:	44 27       	eor	r20, r20
    e2a4:	84 81       	ldd	r24, Z+4	; 0x04
    e2a6:	95 81       	ldd	r25, Z+5	; 0x05
    e2a8:	09 2e       	mov	r0, r25
    e2aa:	00 0c       	add	r0, r0
    e2ac:	aa 0b       	sbc	r26, r26
    e2ae:	bb 0b       	sbc	r27, r27
    e2b0:	2b e0       	ldi	r18, 0x0B	; 11
    e2b2:	88 0f       	add	r24, r24
    e2b4:	99 1f       	adc	r25, r25
    e2b6:	aa 1f       	adc	r26, r26
    e2b8:	bb 1f       	adc	r27, r27
    e2ba:	2a 95       	dec	r18
    e2bc:	d1 f7       	brne	.-12     	; 0xe2b2 <tm_to_fat+0x26>
    e2be:	48 2b       	or	r20, r24
    e2c0:	59 2b       	or	r21, r25
    e2c2:	6a 2b       	or	r22, r26
    e2c4:	7b 2b       	or	r23, r27
    e2c6:	82 81       	ldd	r24, Z+2	; 0x02
    e2c8:	93 81       	ldd	r25, Z+3	; 0x03
    e2ca:	09 2e       	mov	r0, r25
    e2cc:	00 0c       	add	r0, r0
    e2ce:	aa 0b       	sbc	r26, r26
    e2d0:	bb 0b       	sbc	r27, r27
    e2d2:	35 e0       	ldi	r19, 0x05	; 5
    e2d4:	88 0f       	add	r24, r24
    e2d6:	99 1f       	adc	r25, r25
    e2d8:	aa 1f       	adc	r26, r26
    e2da:	bb 1f       	adc	r27, r27
    e2dc:	3a 95       	dec	r19
    e2de:	d1 f7       	brne	.-12     	; 0xe2d4 <tm_to_fat+0x48>
    e2e0:	48 2b       	or	r20, r24
    e2e2:	59 2b       	or	r21, r25
    e2e4:	6a 2b       	or	r22, r26
    e2e6:	7b 2b       	or	r23, r27
    e2e8:	80 81       	ld	r24, Z
    e2ea:	91 81       	ldd	r25, Z+1	; 0x01
    e2ec:	09 2e       	mov	r0, r25
    e2ee:	00 0c       	add	r0, r0
    e2f0:	aa 0b       	sbc	r26, r26
    e2f2:	bb 0b       	sbc	r27, r27
    e2f4:	b6 95       	lsr	r27
    e2f6:	a7 95       	ror	r26
    e2f8:	97 95       	ror	r25
    e2fa:	87 95       	ror	r24
    e2fc:	84 2b       	or	r24, r20
    e2fe:	95 2b       	or	r25, r21
    e300:	a6 2b       	or	r26, r22
    e302:	b7 2b       	or	r27, r23
    e304:	02 85       	ldd	r16, Z+10	; 0x0a
    e306:	13 85       	ldd	r17, Z+11	; 0x0b
    e308:	00 55       	subi	r16, 0x50	; 80
    e30a:	11 09       	sbc	r17, r1
    e30c:	01 2e       	mov	r0, r17
    e30e:	00 0c       	add	r0, r0
    e310:	22 0b       	sbc	r18, r18
    e312:	33 0b       	sbc	r19, r19
    e314:	49 e1       	ldi	r20, 0x19	; 25
    e316:	00 0f       	add	r16, r16
    e318:	11 1f       	adc	r17, r17
    e31a:	22 1f       	adc	r18, r18
    e31c:	33 1f       	adc	r19, r19
    e31e:	4a 95       	dec	r20
    e320:	d1 f7       	brne	.-12     	; 0xe316 <tm_to_fat+0x8a>
    e322:	ac 01       	movw	r20, r24
    e324:	bd 01       	movw	r22, r26
    e326:	40 2b       	or	r20, r16
    e328:	51 2b       	or	r21, r17
    e32a:	62 2b       	or	r22, r18
    e32c:	73 2b       	or	r23, r19
    e32e:	80 85       	ldd	r24, Z+8	; 0x08
    e330:	91 85       	ldd	r25, Z+9	; 0x09
    e332:	09 2e       	mov	r0, r25
    e334:	00 0c       	add	r0, r0
    e336:	aa 0b       	sbc	r26, r26
    e338:	bb 0b       	sbc	r27, r27
    e33a:	01 96       	adiw	r24, 0x01	; 1
    e33c:	a1 1d       	adc	r26, r1
    e33e:	b1 1d       	adc	r27, r1
    e340:	e5 e1       	ldi	r30, 0x15	; 21
    e342:	88 0f       	add	r24, r24
    e344:	99 1f       	adc	r25, r25
    e346:	aa 1f       	adc	r26, r26
    e348:	bb 1f       	adc	r27, r27
    e34a:	ea 95       	dec	r30
    e34c:	d1 f7       	brne	.-12     	; 0xe342 <tm_to_fat+0xb6>
    e34e:	8a 01       	movw	r16, r20
    e350:	9b 01       	movw	r18, r22
    e352:	08 2b       	or	r16, r24
    e354:	19 2b       	or	r17, r25
    e356:	2a 2b       	or	r18, r26
    e358:	3b 2b       	or	r19, r27
    e35a:	c9 01       	movw	r24, r18
    e35c:	b8 01       	movw	r22, r16
}
    e35e:	1f 91       	pop	r17
    e360:	0f 91       	pop	r16
    e362:	08 95       	ret

0000e364 <get_fattime>:
///
/// @return FAT32 time.
/// @see tm_to_fat().
MEMSPACE
DWORD get_fattime (void)
{
    e364:	a4 e0       	ldi	r26, 0x04	; 4
    e366:	b0 e0       	ldi	r27, 0x00	; 0
    e368:	e8 eb       	ldi	r30, 0xB8	; 184
    e36a:	f1 e7       	ldi	r31, 0x71	; 113
    e36c:	0c 94 f0 e5 	jmp	0x1cbe0	; 0x1cbe0 <__prologue_saves__+0x20>
    time_t t;
/* Get GMT time */
    time(&t);
    e370:	ce 01       	movw	r24, r28
    e372:	01 96       	adiw	r24, 0x01	; 1
    e374:	0e 94 17 39 	call	0x722e	; 0x722e <time>
    return( tm_to_fat(localtime(&t)));
    e378:	ce 01       	movw	r24, r28
    e37a:	01 96       	adiw	r24, 0x01	; 1
    e37c:	0e 94 b0 39 	call	0x7360	; 0x7360 <localtime>
    e380:	85 df       	rcall	.-246    	; 0xe28c <tm_to_fat>
}
    e382:	24 96       	adiw	r28, 0x04	; 4
    e384:	e2 e0       	ldi	r30, 0x02	; 2
    e386:	0c 94 0c e6 	jmp	0x1cc18	; 0x1cc18 <__epilogue_restores__+0x20>

0000e38a <put_rc>:
        ptr = "INVALID ERROR MESSAGE";
    else
        ptr = (char *) err_msg[(int)rc];
    printf("rc=%u FR_%s\n", rc, ptr);
#else
    printf("rc=%u\n", rc);
    e38a:	9f 93       	push	r25
    e38c:	8f 93       	push	r24
    e38e:	87 e5       	ldi	r24, 0x57	; 87
    e390:	9a e0       	ldi	r25, 0x0A	; 10
    e392:	1f 92       	push	r1
    e394:	9f 93       	push	r25
    e396:	8f 93       	push	r24
    e398:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
#endif
}
    e39c:	0f 90       	pop	r0
    e39e:	0f 90       	pop	r0
    e3a0:	0f 90       	pop	r0
    e3a2:	0f 90       	pop	r0
    e3a4:	0f 90       	pop	r0
    e3a6:	08 95       	ret

0000e3a8 <fatfs_scan_files>:

MEMSPACE
int fatfs_scan_files (
char* path                                        /* Pointer to the working buffer with start path */
)
{
    e3a8:	a4 e4       	ldi	r26, 0x44	; 68
    e3aa:	b1 e0       	ldi	r27, 0x01	; 1
    e3ac:	ea ed       	ldi	r30, 0xDA	; 218
    e3ae:	f1 e7       	ldi	r31, 0x71	; 113
    e3b0:	0c 94 eb e5 	jmp	0x1cbd6	; 0x1cbd6 <__prologue_saves__+0x16>
    e3b4:	8c 01       	movw	r16, r24
    DIR dirs;
    FRESULT fr;
    int i;
    FILINFO info;

    fr = f_opendir(&dirs, path);
    e3b6:	bc 01       	movw	r22, r24
    e3b8:	ce 01       	movw	r24, r28
    e3ba:	89 5e       	subi	r24, 0xE9	; 233
    e3bc:	9e 4f       	sbci	r25, 0xFE	; 254
    e3be:	0e 94 ef 64 	call	0xc9de	; 0xc9de <f_opendir>
    if (fr == FR_OK) {
    e3c2:	00 97       	sbiw	r24, 0x00	; 0
    e3c4:	09 f0       	breq	.+2      	; 0xe3c8 <fatfs_scan_files+0x20>
    e3c6:	5b c0       	rjmp	.+182    	; 0xe47e <fatfs_scan_files+0xd6>
        while (((fr = f_readdir(&dirs, &info)) == FR_OK) && info.fname[0]) {
            if (info.fattrib & AM_DIR) {
                AccDirs++;
                i = strlen(path);
                path[i] = '/'; strcpy(path+i+1, info.fname);
    e3c8:	8f e2       	ldi	r24, 0x2F	; 47
    e3ca:	d8 2e       	mov	r13, r24
    int i;
    FILINFO info;

    fr = f_opendir(&dirs, path);
    if (fr == FR_OK) {
        while (((fr = f_readdir(&dirs, &info)) == FR_OK) && info.fname[0]) {
    e3cc:	be 01       	movw	r22, r28
    e3ce:	6f 5f       	subi	r22, 0xFF	; 255
    e3d0:	7f 4f       	sbci	r23, 0xFF	; 255
    e3d2:	ce 01       	movw	r24, r28
    e3d4:	89 5e       	subi	r24, 0xE9	; 233
    e3d6:	9e 4f       	sbci	r25, 0xFE	; 254
    e3d8:	0e 94 75 65 	call	0xcaea	; 0xcaea <f_readdir>
    e3dc:	00 97       	sbiw	r24, 0x00	; 0
    e3de:	09 f0       	breq	.+2      	; 0xe3e2 <fatfs_scan_files+0x3a>
    e3e0:	4e c0       	rjmp	.+156    	; 0xe47e <fatfs_scan_files+0xd6>
    e3e2:	2f 89       	ldd	r18, Y+23	; 0x17
    e3e4:	22 23       	and	r18, r18
    e3e6:	09 f4       	brne	.+2      	; 0xe3ea <fatfs_scan_files+0x42>
    e3e8:	4a c0       	rjmp	.+148    	; 0xe47e <fatfs_scan_files+0xd6>
            if (info.fattrib & AM_DIR) {
    e3ea:	89 85       	ldd	r24, Y+9	; 0x09
    e3ec:	84 ff       	sbrs	r24, 4
    e3ee:	25 c0       	rjmp	.+74     	; 0xe43a <fatfs_scan_files+0x92>
                AccDirs++;
    e3f0:	80 91 b5 1b 	lds	r24, 0x1BB5	; 0x801bb5 <AccDirs>
    e3f4:	90 91 b6 1b 	lds	r25, 0x1BB6	; 0x801bb6 <AccDirs+0x1>
    e3f8:	01 96       	adiw	r24, 0x01	; 1
    e3fa:	90 93 b6 1b 	sts	0x1BB6, r25	; 0x801bb6 <AccDirs+0x1>
    e3fe:	80 93 b5 1b 	sts	0x1BB5, r24	; 0x801bb5 <AccDirs>
                i = strlen(path);
    e402:	f8 01       	movw	r30, r16
    e404:	01 90       	ld	r0, Z+
    e406:	00 20       	and	r0, r0
    e408:	e9 f7       	brne	.-6      	; 0xe404 <fatfs_scan_files+0x5c>
    e40a:	31 97       	sbiw	r30, 0x01	; 1
    e40c:	e0 1b       	sub	r30, r16
    e40e:	f1 0b       	sbc	r31, r17
                path[i] = '/'; strcpy(path+i+1, info.fname);
    e410:	78 01       	movw	r14, r16
    e412:	ee 0e       	add	r14, r30
    e414:	ff 1e       	adc	r15, r31
    e416:	d7 01       	movw	r26, r14
    e418:	dc 92       	st	X, r13
    e41a:	cf 01       	movw	r24, r30
    e41c:	01 96       	adiw	r24, 0x01	; 1
    e41e:	be 01       	movw	r22, r28
    e420:	69 5e       	subi	r22, 0xE9	; 233
    e422:	7f 4f       	sbci	r23, 0xFF	; 255
    e424:	80 0f       	add	r24, r16
    e426:	91 1f       	adc	r25, r17
    e428:	0e 94 53 32 	call	0x64a6	; 0x64a6 <strcpy>
                fr = fatfs_scan_files(path);
    e42c:	c8 01       	movw	r24, r16
    e42e:	bc df       	rcall	.-136    	; 0xe3a8 <fatfs_scan_files>
                path[i] = 0;
    e430:	f7 01       	movw	r30, r14
    e432:	10 82       	st	Z, r1
                if (fr != FR_OK) break;
    e434:	00 97       	sbiw	r24, 0x00	; 0
    e436:	51 f2       	breq	.-108    	; 0xe3cc <fatfs_scan_files+0x24>
    e438:	22 c0       	rjmp	.+68     	; 0xe47e <fatfs_scan_files+0xd6>
            } else {
//              xprintf(PSTR("%s/%s\n"), path, info.fname);
                AccFiles++;
    e43a:	80 91 b7 1b 	lds	r24, 0x1BB7	; 0x801bb7 <AccFiles>
    e43e:	90 91 b8 1b 	lds	r25, 0x1BB8	; 0x801bb8 <AccFiles+0x1>
    e442:	01 96       	adiw	r24, 0x01	; 1
    e444:	90 93 b8 1b 	sts	0x1BB8, r25	; 0x801bb8 <AccFiles+0x1>
    e448:	80 93 b7 1b 	sts	0x1BB7, r24	; 0x801bb7 <AccFiles>
                AccSize += info.fsize;
    e44c:	40 91 b1 1b 	lds	r20, 0x1BB1	; 0x801bb1 <AccSize>
    e450:	50 91 b2 1b 	lds	r21, 0x1BB2	; 0x801bb2 <AccSize+0x1>
    e454:	60 91 b3 1b 	lds	r22, 0x1BB3	; 0x801bb3 <AccSize+0x2>
    e458:	70 91 b4 1b 	lds	r23, 0x1BB4	; 0x801bb4 <AccSize+0x3>
    e45c:	89 81       	ldd	r24, Y+1	; 0x01
    e45e:	9a 81       	ldd	r25, Y+2	; 0x02
    e460:	ab 81       	ldd	r26, Y+3	; 0x03
    e462:	bc 81       	ldd	r27, Y+4	; 0x04
    e464:	84 0f       	add	r24, r20
    e466:	95 1f       	adc	r25, r21
    e468:	a6 1f       	adc	r26, r22
    e46a:	b7 1f       	adc	r27, r23
    e46c:	80 93 b1 1b 	sts	0x1BB1, r24	; 0x801bb1 <AccSize>
    e470:	90 93 b2 1b 	sts	0x1BB2, r25	; 0x801bb2 <AccSize+0x1>
    e474:	a0 93 b3 1b 	sts	0x1BB3, r26	; 0x801bb3 <AccSize+0x2>
    e478:	b0 93 b4 1b 	sts	0x1BB4, r27	; 0x801bb4 <AccSize+0x3>
    e47c:	a7 cf       	rjmp	.-178    	; 0xe3cc <fatfs_scan_files+0x24>
#endif
        }
    }

    return fr;
}
    e47e:	cc 5b       	subi	r28, 0xBC	; 188
    e480:	de 4f       	sbci	r29, 0xFE	; 254
    e482:	e7 e0       	ldi	r30, 0x07	; 7
    e484:	0c 94 07 e6 	jmp	0x1cc0e	; 0x1cc0e <__epilogue_restores__+0x16>

0000e488 <fatfs_fstype>:
/// @brief  return a string with the file system type
/// @param[in] type: file system type
/// @return string with file system type
MEMSPACE
char *fatfs_fstype(int type)
{
    e488:	01 97       	sbiw	r24, 0x01	; 1
    e48a:	84 30       	cpi	r24, 0x04	; 4
    e48c:	91 05       	cpc	r25, r1
    e48e:	40 f4       	brcc	.+16     	; 0xe4a0 <fatfs_fstype+0x18>
    e490:	88 0f       	add	r24, r24
    e492:	99 1f       	adc	r25, r25
    e494:	fc 01       	movw	r30, r24
    e496:	e8 5f       	subi	r30, 0xF8	; 248
    e498:	f8 4f       	sbci	r31, 0xF8	; 248
    e49a:	80 81       	ld	r24, Z
    e49c:	91 81       	ldd	r25, Z+1	; 0x01
    e49e:	08 95       	ret
    char *ptr;
    switch(type)
    e4a0:	8a e3       	ldi	r24, 0x3A	; 58
    e4a2:	98 e0       	ldi	r25, 0x08	; 8
        default:
             ptr = "UNKNOWN";
            break;
    }
    return(ptr);
}
    e4a4:	08 95       	ret

0000e4a6 <fatfs_status>:
/// @see AccFiles: Total number of Files
/// @see AccSize:  Total size of all files
/// @return  void
MEMSPACE
void fatfs_status(char *ptr)
{
    e4a6:	a4 e2       	ldi	r26, 0x24	; 36
    e4a8:	b0 e0       	ldi	r27, 0x00	; 0
    e4aa:	e9 e5       	ldi	r30, 0x59	; 89
    e4ac:	f2 e7       	ldi	r31, 0x72	; 114
    e4ae:	0c 94 ea e5 	jmp	0x1cbd4	; 0x1cbd4 <__prologue_saves__+0x14>
    e4b2:	8c 01       	movw	r16, r24
    int res;
    FATFS *fs;
    char label[24+2];
    DWORD vsn; // volume serial number

    while(*ptr == ' ' || *ptr == '\t')
    e4b4:	fc 01       	movw	r30, r24
    e4b6:	21 91       	ld	r18, Z+
    e4b8:	cf 01       	movw	r24, r30
    e4ba:	20 32       	cpi	r18, 0x20	; 32
    e4bc:	d1 f3       	breq	.-12     	; 0xe4b2 <fatfs_status+0xc>
    e4be:	29 30       	cpi	r18, 0x09	; 9
    e4c0:	c1 f3       	breq	.-16     	; 0xe4b2 <fatfs_status+0xc>
        ++ptr;
    printf("fatfs status:%s\n",ptr);
    e4c2:	1f 93       	push	r17
    e4c4:	0f 93       	push	r16
    e4c6:	86 e4       	ldi	r24, 0x46	; 70
    e4c8:	9a e0       	ldi	r25, 0x0A	; 10
    e4ca:	1f 92       	push	r1
    e4cc:	9f 93       	push	r25
    e4ce:	8f 93       	push	r24
    e4d0:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    res = f_getfree(ptr, (DWORD*)&p2, &fs);
    e4d4:	ae 01       	movw	r20, r28
    e4d6:	4d 5d       	subi	r20, 0xDD	; 221
    e4d8:	5f 4f       	sbci	r21, 0xFF	; 255
    e4da:	be 01       	movw	r22, r28
    e4dc:	61 5e       	subi	r22, 0xE1	; 225
    e4de:	7f 4f       	sbci	r23, 0xFF	; 255
    e4e0:	c8 01       	movw	r24, r16
    e4e2:	0e 94 f7 65 	call	0xcbee	; 0xcbee <f_getfree>
    if (res)
    e4e6:	0f 90       	pop	r0
    e4e8:	0f 90       	pop	r0
    e4ea:	0f 90       	pop	r0
    e4ec:	0f 90       	pop	r0
    e4ee:	0f 90       	pop	r0
    e4f0:	00 97       	sbiw	r24, 0x00	; 0
    e4f2:	09 f0       	breq	.+2      	; 0xe4f6 <fatfs_status+0x50>
    e4f4:	e8 c0       	rjmp	.+464    	; 0xe6c6 <fatfs_status+0x220>
    {
        put_rc(res);
        return;
    }
    printf("FAT type                = %s\n",  fatfs_fstype(fs->fs_type));
    e4f6:	eb a1       	ldd	r30, Y+35	; 0x23
    e4f8:	fc a1       	ldd	r31, Y+36	; 0x24
    e4fa:	80 81       	ld	r24, Z
    e4fc:	90 e0       	ldi	r25, 0x00	; 0
    e4fe:	c4 df       	rcall	.-120    	; 0xe488 <fatfs_fstype>
    e500:	9f 93       	push	r25
    e502:	8f 93       	push	r24
    e504:	88 e2       	ldi	r24, 0x28	; 40
    e506:	9a e0       	ldi	r25, 0x0A	; 10
    e508:	1f 92       	push	r1
    e50a:	9f 93       	push	r25
    e50c:	8f 93       	push	r24
    e50e:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    printf("Bytes/Cluster           = %lu\n", (DWORD)fs->csize * 512);
    e512:	eb a1       	ldd	r30, Y+35	; 0x23
    e514:	fc a1       	ldd	r31, Y+36	; 0x24
    e516:	81 85       	ldd	r24, Z+9	; 0x09
    e518:	92 85       	ldd	r25, Z+10	; 0x0a
    e51a:	a0 e0       	ldi	r26, 0x00	; 0
    e51c:	b0 e0       	ldi	r27, 0x00	; 0
    e51e:	49 e0       	ldi	r20, 0x09	; 9
    e520:	88 0f       	add	r24, r24
    e522:	99 1f       	adc	r25, r25
    e524:	aa 1f       	adc	r26, r26
    e526:	bb 1f       	adc	r27, r27
    e528:	4a 95       	dec	r20
    e52a:	d1 f7       	brne	.-12     	; 0xe520 <fatfs_status+0x7a>
    e52c:	bf 93       	push	r27
    e52e:	af 93       	push	r26
    e530:	9f 93       	push	r25
    e532:	8f 93       	push	r24
    e534:	89 e0       	ldi	r24, 0x09	; 9
    e536:	9a e0       	ldi	r25, 0x0A	; 10
    e538:	1f 92       	push	r1
    e53a:	9f 93       	push	r25
    e53c:	8f 93       	push	r24
    e53e:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    printf("Number of FATs          = %u\n",  fs->n_fats);
    e542:	eb a1       	ldd	r30, Y+35	; 0x23
    e544:	fc a1       	ldd	r31, Y+36	; 0x24
    e546:	82 81       	ldd	r24, Z+2	; 0x02
    e548:	1f 92       	push	r1
    e54a:	8f 93       	push	r24
    e54c:	8b ee       	ldi	r24, 0xEB	; 235
    e54e:	99 e0       	ldi	r25, 0x09	; 9
    e550:	1f 92       	push	r1
    e552:	9f 93       	push	r25
    e554:	8f 93       	push	r24
    e556:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    printf("Root DIR entries        = %u\n",  fs->n_rootdir);
    e55a:	eb a1       	ldd	r30, Y+35	; 0x23
    e55c:	fc a1       	ldd	r31, Y+36	; 0x24
    e55e:	80 85       	ldd	r24, Z+8	; 0x08
    e560:	8f 93       	push	r24
    e562:	87 81       	ldd	r24, Z+7	; 0x07
    e564:	8f 93       	push	r24
    e566:	8d ec       	ldi	r24, 0xCD	; 205
    e568:	99 e0       	ldi	r25, 0x09	; 9
    e56a:	1f 92       	push	r1
    e56c:	9f 93       	push	r25
    e56e:	8f 93       	push	r24
    e570:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    printf("Sectors/FAT             = %lu\n", fs->fsize);
    e574:	eb a1       	ldd	r30, Y+35	; 0x23
    e576:	fc a1       	ldd	r31, Y+36	; 0x24
    e578:	80 a1       	ldd	r24, Z+32	; 0x20
    e57a:	8f 93       	push	r24
    e57c:	87 8d       	ldd	r24, Z+31	; 0x1f
    e57e:	8f 93       	push	r24
    e580:	86 8d       	ldd	r24, Z+30	; 0x1e
    e582:	8f 93       	push	r24
    e584:	85 8d       	ldd	r24, Z+29	; 0x1d
    e586:	8f 93       	push	r24
    e588:	8e ea       	ldi	r24, 0xAE	; 174
    e58a:	99 e0       	ldi	r25, 0x09	; 9
    e58c:	1f 92       	push	r1
    e58e:	9f 93       	push	r25
    e590:	8f 93       	push	r24
    e592:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    printf("Number of clusters      = %lu\n", fs->n_fatent - 2);
    e596:	eb a1       	ldd	r30, Y+35	; 0x23
    e598:	fc a1       	ldd	r31, Y+36	; 0x24
    e59a:	81 8d       	ldd	r24, Z+25	; 0x19
    e59c:	92 8d       	ldd	r25, Z+26	; 0x1a
    e59e:	a3 8d       	ldd	r26, Z+27	; 0x1b
    e5a0:	b4 8d       	ldd	r27, Z+28	; 0x1c
    e5a2:	02 97       	sbiw	r24, 0x02	; 2
    e5a4:	a1 09       	sbc	r26, r1
    e5a6:	b1 09       	sbc	r27, r1
    e5a8:	bf 93       	push	r27
    e5aa:	af 93       	push	r26
    e5ac:	9f 93       	push	r25
    e5ae:	8f 93       	push	r24
    e5b0:	8f e8       	ldi	r24, 0x8F	; 143
    e5b2:	99 e0       	ldi	r25, 0x09	; 9
    e5b4:	1f 92       	push	r1
    e5b6:	9f 93       	push	r25
    e5b8:	8f 93       	push	r24
    e5ba:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    printf("FAT start (lba)         = %lu\n", fs->fatbase);
    e5be:	0f b6       	in	r0, 0x3f	; 63
    e5c0:	f8 94       	cli
    e5c2:	de bf       	out	0x3e, r29	; 62
    e5c4:	0f be       	out	0x3f, r0	; 63
    e5c6:	cd bf       	out	0x3d, r28	; 61
    e5c8:	eb a1       	ldd	r30, Y+35	; 0x23
    e5ca:	fc a1       	ldd	r31, Y+36	; 0x24
    e5cc:	80 a5       	ldd	r24, Z+40	; 0x28
    e5ce:	8f 93       	push	r24
    e5d0:	87 a1       	ldd	r24, Z+39	; 0x27
    e5d2:	8f 93       	push	r24
    e5d4:	86 a1       	ldd	r24, Z+38	; 0x26
    e5d6:	8f 93       	push	r24
    e5d8:	85 a1       	ldd	r24, Z+37	; 0x25
    e5da:	8f 93       	push	r24
    e5dc:	80 e7       	ldi	r24, 0x70	; 112
    e5de:	99 e0       	ldi	r25, 0x09	; 9
    e5e0:	1f 92       	push	r1
    e5e2:	9f 93       	push	r25
    e5e4:	8f 93       	push	r24
    e5e6:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    printf("DIR start (lba,clustor) = %lu\n", fs->dirbase);
    e5ea:	eb a1       	ldd	r30, Y+35	; 0x23
    e5ec:	fc a1       	ldd	r31, Y+36	; 0x24
    e5ee:	84 a5       	ldd	r24, Z+44	; 0x2c
    e5f0:	8f 93       	push	r24
    e5f2:	83 a5       	ldd	r24, Z+43	; 0x2b
    e5f4:	8f 93       	push	r24
    e5f6:	82 a5       	ldd	r24, Z+42	; 0x2a
    e5f8:	8f 93       	push	r24
    e5fa:	81 a5       	ldd	r24, Z+41	; 0x29
    e5fc:	8f 93       	push	r24
    e5fe:	81 e5       	ldi	r24, 0x51	; 81
    e600:	99 e0       	ldi	r25, 0x09	; 9
    e602:	1f 92       	push	r1
    e604:	9f 93       	push	r25
    e606:	8f 93       	push	r24
    e608:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    printf("Data start (lba)        = %lu\n", fs->database);
    e60c:	eb a1       	ldd	r30, Y+35	; 0x23
    e60e:	fc a1       	ldd	r31, Y+36	; 0x24
    e610:	80 a9       	ldd	r24, Z+48	; 0x30
    e612:	8f 93       	push	r24
    e614:	87 a5       	ldd	r24, Z+47	; 0x2f
    e616:	8f 93       	push	r24
    e618:	86 a5       	ldd	r24, Z+46	; 0x2e
    e61a:	8f 93       	push	r24
    e61c:	85 a5       	ldd	r24, Z+45	; 0x2d
    e61e:	8f 93       	push	r24
    e620:	82 e3       	ldi	r24, 0x32	; 50
    e622:	99 e0       	ldi	r25, 0x09	; 9
    e624:	1f 92       	push	r1
    e626:	9f 93       	push	r25
    e628:	8f 93       	push	r24
    e62a:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>

#if FF_USE_LABEL
    res = f_getlabel(ptr, label, (DWORD*)&vsn);
    e62e:	ae 01       	movw	r20, r28
    e630:	45 5e       	subi	r20, 0xE5	; 229
    e632:	5f 4f       	sbci	r21, 0xFF	; 255
    e634:	be 01       	movw	r22, r28
    e636:	6f 5f       	subi	r22, 0xFF	; 255
    e638:	7f 4f       	sbci	r23, 0xFF	; 255
    e63a:	c8 01       	movw	r24, r16
    e63c:	0e 94 28 6a 	call	0xd450	; 0xd450 <f_getlabel>
    if (res)
    e640:	0f b6       	in	r0, 0x3f	; 63
    e642:	f8 94       	cli
    e644:	de bf       	out	0x3e, r29	; 62
    e646:	0f be       	out	0x3f, r0	; 63
    e648:	cd bf       	out	0x3d, r28	; 61
    e64a:	00 97       	sbiw	r24, 0x00	; 0
    e64c:	e1 f5       	brne	.+120    	; 0xe6c6 <fatfs_status+0x220>
    {
        put_rc(res);
        return;
    }
    printf("Volume name             = %s\n", label[0] ? label : "<blank>");
    e64e:	89 81       	ldd	r24, Y+1	; 0x01
    e650:	81 11       	cpse	r24, r1
    e652:	03 c0       	rjmp	.+6      	; 0xe65a <fatfs_status+0x1b4>
    e654:	82 e4       	ldi	r24, 0x42	; 66
    e656:	98 e0       	ldi	r25, 0x08	; 8
    e658:	02 c0       	rjmp	.+4      	; 0xe65e <fatfs_status+0x1b8>
    e65a:	ce 01       	movw	r24, r28
    e65c:	01 96       	adiw	r24, 0x01	; 1
    e65e:	9f 93       	push	r25
    e660:	8f 93       	push	r24
    e662:	84 e1       	ldi	r24, 0x14	; 20
    e664:	99 e0       	ldi	r25, 0x09	; 9
    e666:	1f 92       	push	r1
    e668:	9f 93       	push	r25
    e66a:	8f 93       	push	r24
    e66c:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    printf("Volume S/N              = %04X-%04X\n", (WORD)((DWORD)vsn >> 16), (WORD)(vsn & 0xFFFF));
    e670:	8b 8d       	ldd	r24, Y+27	; 0x1b
    e672:	9c 8d       	ldd	r25, Y+28	; 0x1c
    e674:	ad 8d       	ldd	r26, Y+29	; 0x1d
    e676:	be 8d       	ldd	r27, Y+30	; 0x1e
    e678:	9f 93       	push	r25
    e67a:	8f 93       	push	r24
    e67c:	cd 01       	movw	r24, r26
    e67e:	aa 27       	eor	r26, r26
    e680:	bb 27       	eor	r27, r27
    e682:	9f 93       	push	r25
    e684:	8f 93       	push	r24
    e686:	8f ee       	ldi	r24, 0xEF	; 239
    e688:	98 e0       	ldi	r25, 0x08	; 8
    e68a:	1f 92       	push	r1
    e68c:	9f 93       	push	r25
    e68e:	8f 93       	push	r24
    e690:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
#endif

    AccSize = AccFiles = AccDirs = 0;
    e694:	10 92 b6 1b 	sts	0x1BB6, r1	; 0x801bb6 <AccDirs+0x1>
    e698:	10 92 b5 1b 	sts	0x1BB5, r1	; 0x801bb5 <AccDirs>
    e69c:	10 92 b8 1b 	sts	0x1BB8, r1	; 0x801bb8 <AccFiles+0x1>
    e6a0:	10 92 b7 1b 	sts	0x1BB7, r1	; 0x801bb7 <AccFiles>
    e6a4:	10 92 b1 1b 	sts	0x1BB1, r1	; 0x801bb1 <AccSize>
    e6a8:	10 92 b2 1b 	sts	0x1BB2, r1	; 0x801bb2 <AccSize+0x1>
    e6ac:	10 92 b3 1b 	sts	0x1BB3, r1	; 0x801bb3 <AccSize+0x2>
    e6b0:	10 92 b4 1b 	sts	0x1BB4, r1	; 0x801bb4 <AccSize+0x3>
    res = fatfs_scan_files(ptr);
    e6b4:	c8 01       	movw	r24, r16
    if (res)
    e6b6:	78 de       	rcall	.-784    	; 0xe3a8 <fatfs_scan_files>
    e6b8:	0f b6       	in	r0, 0x3f	; 63
    e6ba:	f8 94       	cli
    e6bc:	de bf       	out	0x3e, r29	; 62
    e6be:	0f be       	out	0x3f, r0	; 63
    e6c0:	cd bf       	out	0x3d, r28	; 61
    {
        put_rc(res);
    e6c2:	00 97       	sbiw	r24, 0x00	; 0
    e6c4:	11 f0       	breq	.+4      	; 0xe6ca <fatfs_status+0x224>
        return;
    e6c6:	61 de       	rcall	.-830    	; 0xe38a <put_rc>
    }
    printf("%u files, %lu bytes.\n%u folders.\n"
    e6c8:	56 c0       	rjmp	.+172    	; 0xe776 <fatfs_status+0x2d0>
    e6ca:	0b a1       	ldd	r16, Y+35	; 0x23
    e6cc:	1c a1       	ldd	r17, Y+36	; 0x24
    e6ce:	f8 01       	movw	r30, r16
    e6d0:	c1 84       	ldd	r12, Z+9	; 0x09
    e6d2:	d2 84       	ldd	r13, Z+10	; 0x0a
    e6d4:	e1 2c       	mov	r14, r1
    e6d6:	f1 2c       	mov	r15, r1
    e6d8:	6f 8d       	ldd	r22, Y+31	; 0x1f
    e6da:	78 a1       	ldd	r23, Y+32	; 0x20
    e6dc:	89 a1       	ldd	r24, Y+33	; 0x21
    e6de:	9a a1       	ldd	r25, Y+34	; 0x22
    e6e0:	a7 01       	movw	r20, r14
    e6e2:	96 01       	movw	r18, r12
    e6e4:	0e 94 1c e5 	call	0x1ca38	; 0x1ca38 <__mulsi3>
    e6e8:	22 e0       	ldi	r18, 0x02	; 2
    e6ea:	30 e0       	ldi	r19, 0x00	; 0
    e6ec:	40 e0       	ldi	r20, 0x00	; 0
    e6ee:	50 e0       	ldi	r21, 0x00	; 0
    e6f0:	0e 94 80 e5 	call	0x1cb00	; 0x1cb00 <__divmodsi4>
    e6f4:	5f 93       	push	r21
    e6f6:	4f 93       	push	r20
    e6f8:	3f 93       	push	r19
    e6fa:	2f 93       	push	r18
    e6fc:	f8 01       	movw	r30, r16
    e6fe:	81 8d       	ldd	r24, Z+25	; 0x19
    e700:	92 8d       	ldd	r25, Z+26	; 0x1a
    e702:	a3 8d       	ldd	r26, Z+27	; 0x1b
    e704:	b4 8d       	ldd	r27, Z+28	; 0x1c
    e706:	9c 01       	movw	r18, r24
    e708:	ad 01       	movw	r20, r26
    e70a:	22 50       	subi	r18, 0x02	; 2
    e70c:	31 09       	sbc	r19, r1
    e70e:	41 09       	sbc	r20, r1
    e710:	51 09       	sbc	r21, r1
    e712:	c7 01       	movw	r24, r14
    e714:	b6 01       	movw	r22, r12
    e716:	0e 94 1c e5 	call	0x1ca38	; 0x1ca38 <__mulsi3>
    e71a:	dc 01       	movw	r26, r24
    e71c:	cb 01       	movw	r24, r22
    e71e:	b6 95       	lsr	r27
    e720:	a7 95       	ror	r26
    e722:	97 95       	ror	r25
    e724:	87 95       	ror	r24
    e726:	bf 93       	push	r27
    e728:	af 93       	push	r26
    e72a:	9f 93       	push	r25
    e72c:	8f 93       	push	r24
    e72e:	80 91 b6 1b 	lds	r24, 0x1BB6	; 0x801bb6 <AccDirs+0x1>
    e732:	8f 93       	push	r24
    e734:	80 91 b5 1b 	lds	r24, 0x1BB5	; 0x801bb5 <AccDirs>
    e738:	8f 93       	push	r24
    e73a:	80 91 b4 1b 	lds	r24, 0x1BB4	; 0x801bb4 <AccSize+0x3>
    e73e:	8f 93       	push	r24
    e740:	80 91 b3 1b 	lds	r24, 0x1BB3	; 0x801bb3 <AccSize+0x2>
    e744:	8f 93       	push	r24
    e746:	80 91 b2 1b 	lds	r24, 0x1BB2	; 0x801bb2 <AccSize+0x1>
    e74a:	8f 93       	push	r24
    e74c:	80 91 b1 1b 	lds	r24, 0x1BB1	; 0x801bb1 <AccSize>
    e750:	8f 93       	push	r24
    e752:	80 91 b8 1b 	lds	r24, 0x1BB8	; 0x801bb8 <AccFiles+0x1>
    e756:	8f 93       	push	r24
    e758:	80 91 b7 1b 	lds	r24, 0x1BB7	; 0x801bb7 <AccFiles>
    e75c:	8f 93       	push	r24
    e75e:	82 ea       	ldi	r24, 0xA2	; 162
    e760:	98 e0       	ldi	r25, 0x08	; 8
    e762:	1f 92       	push	r1
    e764:	9f 93       	push	r25
    e766:	8f 93       	push	r24
    e768:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    e76c:	0f b6       	in	r0, 0x3f	; 63
    e76e:	f8 94       	cli
    e770:	de bf       	out	0x3e, r29	; 62
    e772:	0f be       	out	0x3f, r0	; 63
                 "%lu KB total disk space.\n%lu KB available.\n",
            AccFiles, AccSize, AccDirs,
            (fs->n_fatent - 2) * fs->csize / 2, p2 * fs->csize / 2
    );

}
    e774:	cd bf       	out	0x3d, r28	; 61
    e776:	a4 96       	adiw	r28, 0x24	; 36
    e778:	e8 e0       	ldi	r30, 0x08	; 8
    e77a:	0c 94 06 e6 	jmp	0x1cc0c	; 0x1cc0c <__epilogue_restores__+0x14>

0000e77e <fatfs_filinfo_list>:
/// @param[in] : FILINFO pointer
/// @return  void

MEMSPACE
void fatfs_filinfo_list(FILINFO *info)
{
    e77e:	a6 e0       	ldi	r26, 0x06	; 6
    e780:	b0 e0       	ldi	r27, 0x00	; 0
    e782:	e5 ec       	ldi	r30, 0xC5	; 197
    e784:	f3 e7       	ldi	r31, 0x73	; 115
    e786:	0c 94 f0 e5 	jmp	0x1cbe0	; 0x1cbe0 <__prologue_saves__+0x20>
    e78a:	fc 01       	movw	r30, r24
    char attrs[6];
    if(info->fname[0] == 0)
    e78c:	86 89       	ldd	r24, Z+22	; 0x16
    e78e:	81 11       	cpse	r24, r1
    e790:	0b c0       	rjmp	.+22     	; 0xe7a8 <fatfs_filinfo_list+0x2a>
    {
        printf("fatfs_filinfo_list: empty\n");
    e792:	87 e8       	ldi	r24, 0x87	; 135
    e794:	98 e0       	ldi	r25, 0x08	; 8
    e796:	1f 92       	push	r1
    e798:	9f 93       	push	r25
    e79a:	8f 93       	push	r24
    e79c:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
        return;
    e7a0:	0f 90       	pop	r0
    e7a2:	0f 90       	pop	r0
    e7a4:	0f 90       	pop	r0
    e7a6:	6e c0       	rjmp	.+220    	; 0xe884 <fatfs_filinfo_list+0x106>
    }
    attrs[0] = (info->fattrib & AM_DIR) ? 'D' : '-';
    e7a8:	80 85       	ldd	r24, Z+8	; 0x08
    e7aa:	84 fd       	sbrc	r24, 4
    e7ac:	02 c0       	rjmp	.+4      	; 0xe7b2 <fatfs_filinfo_list+0x34>
    e7ae:	9d e2       	ldi	r25, 0x2D	; 45
    e7b0:	01 c0       	rjmp	.+2      	; 0xe7b4 <fatfs_filinfo_list+0x36>
    e7b2:	94 e4       	ldi	r25, 0x44	; 68
    e7b4:	99 83       	std	Y+1, r25	; 0x01
    attrs[1] = (info->fattrib & AM_RDO) ? 'R' : '-';
    e7b6:	80 fd       	sbrc	r24, 0
    e7b8:	02 c0       	rjmp	.+4      	; 0xe7be <fatfs_filinfo_list+0x40>
    e7ba:	9d e2       	ldi	r25, 0x2D	; 45
    e7bc:	01 c0       	rjmp	.+2      	; 0xe7c0 <fatfs_filinfo_list+0x42>
    e7be:	92 e5       	ldi	r25, 0x52	; 82
    e7c0:	9a 83       	std	Y+2, r25	; 0x02
    attrs[2] = (info->fattrib & AM_HID) ? 'H' : '-';
    e7c2:	81 fd       	sbrc	r24, 1
    e7c4:	02 c0       	rjmp	.+4      	; 0xe7ca <fatfs_filinfo_list+0x4c>
    e7c6:	9d e2       	ldi	r25, 0x2D	; 45
    e7c8:	01 c0       	rjmp	.+2      	; 0xe7cc <fatfs_filinfo_list+0x4e>
    e7ca:	98 e4       	ldi	r25, 0x48	; 72
    e7cc:	9b 83       	std	Y+3, r25	; 0x03
    attrs[3] = (info->fattrib & AM_SYS) ? 'S' : '-';
    e7ce:	82 fd       	sbrc	r24, 2
    e7d0:	02 c0       	rjmp	.+4      	; 0xe7d6 <fatfs_filinfo_list+0x58>
    e7d2:	9d e2       	ldi	r25, 0x2D	; 45
    e7d4:	01 c0       	rjmp	.+2      	; 0xe7d8 <fatfs_filinfo_list+0x5a>
    e7d6:	93 e5       	ldi	r25, 0x53	; 83
    e7d8:	9c 83       	std	Y+4, r25	; 0x04
    attrs[4] = (info->fattrib & AM_ARC) ? 'A' : '-';
    e7da:	85 fd       	sbrc	r24, 5
    e7dc:	02 c0       	rjmp	.+4      	; 0xe7e2 <fatfs_filinfo_list+0x64>
    e7de:	8d e2       	ldi	r24, 0x2D	; 45
    e7e0:	01 c0       	rjmp	.+2      	; 0xe7e4 <fatfs_filinfo_list+0x66>
    e7e2:	81 e4       	ldi	r24, 0x41	; 65
    e7e4:	8d 83       	std	Y+5, r24	; 0x05
    attrs[5] = 0;
    e7e6:	1e 82       	std	Y+6, r1	; 0x06
    printf("%s %u/%02u/%02u %02u:%02u %9lu %s",
    e7e8:	46 81       	ldd	r20, Z+6	; 0x06
    e7ea:	57 81       	ldd	r21, Z+7	; 0x07
    e7ec:	84 81       	ldd	r24, Z+4	; 0x04
    e7ee:	95 81       	ldd	r25, Z+5	; 0x05
    e7f0:	9f 01       	movw	r18, r30
    e7f2:	2a 5e       	subi	r18, 0xEA	; 234
    e7f4:	3f 4f       	sbci	r19, 0xFF	; 255
    e7f6:	3f 93       	push	r19
    e7f8:	2f 93       	push	r18
    e7fa:	23 81       	ldd	r18, Z+3	; 0x03
    e7fc:	2f 93       	push	r18
    e7fe:	22 81       	ldd	r18, Z+2	; 0x02
    e800:	2f 93       	push	r18
    e802:	21 81       	ldd	r18, Z+1	; 0x01
    e804:	2f 93       	push	r18
    e806:	20 81       	ld	r18, Z
    e808:	2f 93       	push	r18
    e80a:	9a 01       	movw	r18, r20
    e80c:	45 e0       	ldi	r20, 0x05	; 5
    e80e:	36 95       	lsr	r19
    e810:	27 95       	ror	r18
    e812:	4a 95       	dec	r20
    e814:	e1 f7       	brne	.-8      	; 0xe80e <fatfs_filinfo_list+0x90>
    e816:	2f 73       	andi	r18, 0x3F	; 63
    e818:	33 27       	eor	r19, r19
    e81a:	3f 93       	push	r19
    e81c:	2f 93       	push	r18
    e81e:	25 2f       	mov	r18, r21
    e820:	26 95       	lsr	r18
    e822:	26 95       	lsr	r18
    e824:	26 95       	lsr	r18
    e826:	1f 92       	push	r1
    e828:	2f 93       	push	r18
    e82a:	9c 01       	movw	r18, r24
    e82c:	2f 71       	andi	r18, 0x1F	; 31
    e82e:	33 27       	eor	r19, r19
    e830:	3f 93       	push	r19
    e832:	2f 93       	push	r18
    e834:	9c 01       	movw	r18, r24
    e836:	55 e0       	ldi	r21, 0x05	; 5
    e838:	36 95       	lsr	r19
    e83a:	27 95       	ror	r18
    e83c:	5a 95       	dec	r21
    e83e:	e1 f7       	brne	.-8      	; 0xe838 <fatfs_filinfo_list+0xba>
    e840:	2f 70       	andi	r18, 0x0F	; 15
    e842:	33 27       	eor	r19, r19
    e844:	3f 93       	push	r19
    e846:	2f 93       	push	r18
    e848:	89 2f       	mov	r24, r25
    e84a:	99 27       	eor	r25, r25
    e84c:	86 95       	lsr	r24
    e84e:	84 54       	subi	r24, 0x44	; 68
    e850:	98 4f       	sbci	r25, 0xF8	; 248
    e852:	9f 93       	push	r25
    e854:	8f 93       	push	r24
    e856:	ce 01       	movw	r24, r28
    e858:	01 96       	adiw	r24, 0x01	; 1
    e85a:	9f 93       	push	r25
    e85c:	8f 93       	push	r24
    e85e:	85 e6       	ldi	r24, 0x65	; 101
    e860:	98 e0       	ldi	r25, 0x08	; 8
    e862:	1f 92       	push	r1
    e864:	9f 93       	push	r25
    e866:	8f 93       	push	r24
    e868:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
        attrs,
        (info->fdate >> 9) + 1980, (info->fdate >> 5) & 15, info->fdate & 31,
        (info->ftime >> 11), (info->ftime >> 5) & 63,
        info->fsize, info->fname);
    printf("\n");
    e86c:	83 e6       	ldi	r24, 0x63	; 99
    e86e:	98 e0       	ldi	r25, 0x08	; 8
    e870:	1f 92       	push	r1
    e872:	9f 93       	push	r25
    e874:	8f 93       	push	r24
    e876:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    e87a:	0f b6       	in	r0, 0x3f	; 63
    e87c:	f8 94       	cli
    e87e:	de bf       	out	0x3e, r29	; 62
    e880:	0f be       	out	0x3f, r0	; 63
    e882:	cd bf       	out	0x3d, r28	; 61
}
    e884:	26 96       	adiw	r28, 0x06	; 6
    e886:	e2 e0       	ldi	r30, 0x02	; 2
    e888:	0c 94 0c e6 	jmp	0x1cc18	; 0x1cc18 <__epilogue_restores__+0x20>

0000e88c <fatfs_help>:

/// @brief Display FatFs test diagnostics help menu.
/// @return  void
MEMSPACE
void fatfs_help( int full)
{
    e88c:	cf 93       	push	r28
    e88e:	df 93       	push	r29
    e890:	ec 01       	movw	r28, r24
    printf("fatfs help\n");
    e892:	88 ea       	ldi	r24, 0xA8	; 168
    e894:	9b e0       	ldi	r25, 0x0B	; 11
    e896:	1f 92       	push	r1
    e898:	9f 93       	push	r25
    e89a:	8f 93       	push	r24
    e89c:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    
    if(full)
    e8a0:	0f 90       	pop	r0
    e8a2:	0f 90       	pop	r0
    e8a4:	0f 90       	pop	r0
    e8a6:	cd 2b       	or	r28, r29
    e8a8:	51 f0       	breq	.+20     	; 0xe8be <fatfs_help+0x32>
    {
        printf(
    e8aa:	8c e2       	ldi	r24, 0x2C	; 44
    e8ac:	9b e0       	ldi	r25, 0x0B	; 11
    e8ae:	1f 92       	push	r1
    e8b0:	9f 93       	push	r25
    e8b2:	8f 93       	push	r24
    e8b4:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    e8b8:	0f 90       	pop	r0
    e8ba:	0f 90       	pop	r0
    e8bc:	0f 90       	pop	r0
#endif
        "\n"
        );
    }
        
}
    e8be:	df 91       	pop	r29
    e8c0:	cf 91       	pop	r28
    e8c2:	08 95       	ret

0000e8c4 <fatfs_ls>:
///
/// @see fatfs_filinfo_list().
/// @return  void.
MEMSPACE
void fatfs_ls(char *name)
{
    e8c4:	aa e4       	ldi	r26, 0x4A	; 74
    e8c6:	b2 e0       	ldi	r27, 0x02	; 2
    e8c8:	e8 e6       	ldi	r30, 0x68	; 104
    e8ca:	f4 e7       	ldi	r31, 0x74	; 116
    e8cc:	0c 94 ea e5 	jmp	0x1cbd4	; 0x1cbd4 <__prologue_saves__+0x14>
    e8d0:	8e 01       	movw	r16, r28
    e8d2:	09 5e       	subi	r16, 0xE9	; 233
    e8d4:	1e 4f       	sbci	r17, 0xFE	; 254
    FILINFO fno;
    DIR dirs;                                     /* Directory object */
    FATFS *fs;
    char buff[256]; 

    if(!name || !*name)
    e8d6:	00 97       	sbiw	r24, 0x00	; 0
    e8d8:	21 f0       	breq	.+8      	; 0xe8e2 <fatfs_ls+0x1e>
    e8da:	fc 01       	movw	r30, r24
    e8dc:	20 81       	ld	r18, Z
    e8de:	21 11       	cpse	r18, r1
    e8e0:	03 c0       	rjmp	.+6      	; 0xe8e8 <fatfs_ls+0x24>
    {
        strcpy(buff,".");
    e8e2:	66 e4       	ldi	r22, 0x46	; 70
    e8e4:	72 e1       	ldi	r23, 0x12	; 18
    e8e6:	01 c0       	rjmp	.+2      	; 0xe8ea <fatfs_ls+0x26>
    }
    else
    {
        strcpy(buff,name);
    e8e8:	bc 01       	movw	r22, r24
    e8ea:	c8 01       	movw	r24, r16
    e8ec:	0e 94 53 32 	call	0x64a6	; 0x64a6 <strcpy>
    }
    printf("Listing:[%s]\n",buff);
    e8f0:	1f 93       	push	r17
    e8f2:	0f 93       	push	r16
    e8f4:	8c e9       	ldi	r24, 0x9C	; 156
    e8f6:	9a e0       	ldi	r25, 0x0A	; 10
    e8f8:	1f 92       	push	r1
    e8fa:	9f 93       	push	r25
    e8fc:	8f 93       	push	r24
    e8fe:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>

    res = f_opendir(&dirs, buff);
    e902:	b8 01       	movw	r22, r16
    e904:	ce 01       	movw	r24, r28
    e906:	89 5e       	subi	r24, 0xE9	; 233
    e908:	9d 4f       	sbci	r25, 0xFD	; 253
    e90a:	0e 94 ef 64 	call	0xc9de	; 0xc9de <f_opendir>
    if (res) { put_rc(res); return; }
    e90e:	0f 90       	pop	r0
    e910:	0f 90       	pop	r0
    e912:	0f 90       	pop	r0
    e914:	0f 90       	pop	r0
    e916:	0f 90       	pop	r0
    e918:	00 97       	sbiw	r24, 0x00	; 0
    e91a:	11 f0       	breq	.+4      	; 0xe920 <fatfs_ls+0x5c>
    e91c:	36 dd       	rcall	.-1428   	; 0xe38a <put_rc>
    p1 = s1 = s2 = 0;
    e91e:	9a c0       	rjmp	.+308    	; 0xea54 <fatfs_ls+0x190>
    e920:	cb 5b       	subi	r28, 0xBB	; 187
    e922:	dd 4f       	sbci	r29, 0xFD	; 253
    e924:	18 82       	st	Y, r1
    e926:	19 82       	std	Y+1, r1	; 0x01
    e928:	1a 82       	std	Y+2, r1	; 0x02
    e92a:	1b 82       	std	Y+3, r1	; 0x03
    e92c:	c5 54       	subi	r28, 0x45	; 69
    e92e:	d2 40       	sbci	r29, 0x02	; 2
    e930:	c1 2c       	mov	r12, r1
    e932:	d1 2c       	mov	r13, r1
    e934:	e1 2c       	mov	r14, r1
    while(1)
    {
        res = f_readdir(&dirs, &fno);
    e936:	f1 2c       	mov	r15, r1
    e938:	be 01       	movw	r22, r28
    e93a:	6f 5f       	subi	r22, 0xFF	; 255
    e93c:	7f 4f       	sbci	r23, 0xFF	; 255
    e93e:	ce 01       	movw	r24, r28
    e940:	89 5e       	subi	r24, 0xE9	; 233
    e942:	9d 4f       	sbci	r25, 0xFD	; 253
    e944:	0e 94 75 65 	call	0xcaea	; 0xcaea <f_readdir>
        if ((res != FR_OK) || !fno.fname[0]) break;
    e948:	89 2b       	or	r24, r25
    e94a:	49 f5       	brne	.+82     	; 0xe99e <fatfs_ls+0xda>
    e94c:	8f 89       	ldd	r24, Y+23	; 0x17
    e94e:	88 23       	and	r24, r24
        if (fno.fattrib & AM_DIR)
    e950:	31 f1       	breq	.+76     	; 0xe99e <fatfs_ls+0xda>
    e952:	89 85       	ldd	r24, Y+9	; 0x09
    e954:	84 ff       	sbrs	r24, 4
        {
            s2++;
    e956:	04 c0       	rjmp	.+8      	; 0xe960 <fatfs_ls+0x9c>
    e958:	ff ef       	ldi	r31, 0xFF	; 255
    e95a:	cf 1a       	sub	r12, r31
    e95c:	df 0a       	sbc	r13, r31
        }
        else
        {
            s1++; p1 += fno.fsize;
    e95e:	1b c0       	rjmp	.+54     	; 0xe996 <fatfs_ls+0xd2>
    e960:	2f ef       	ldi	r18, 0xFF	; 255
    e962:	e2 1a       	sub	r14, r18
    e964:	f2 0a       	sbc	r15, r18
    e966:	49 81       	ldd	r20, Y+1	; 0x01
    e968:	5a 81       	ldd	r21, Y+2	; 0x02
    e96a:	6b 81       	ldd	r22, Y+3	; 0x03
    e96c:	7c 81       	ldd	r23, Y+4	; 0x04
    e96e:	cb 5b       	subi	r28, 0xBB	; 187
    e970:	dd 4f       	sbci	r29, 0xFD	; 253
    e972:	88 81       	ld	r24, Y
    e974:	99 81       	ldd	r25, Y+1	; 0x01
    e976:	aa 81       	ldd	r26, Y+2	; 0x02
    e978:	bb 81       	ldd	r27, Y+3	; 0x03
    e97a:	c5 54       	subi	r28, 0x45	; 69
    e97c:	d2 40       	sbci	r29, 0x02	; 2
    e97e:	84 0f       	add	r24, r20
    e980:	95 1f       	adc	r25, r21
    e982:	a6 1f       	adc	r26, r22
    e984:	b7 1f       	adc	r27, r23
    e986:	cb 5b       	subi	r28, 0xBB	; 187
    e988:	dd 4f       	sbci	r29, 0xFD	; 253
    e98a:	88 83       	st	Y, r24
    e98c:	99 83       	std	Y+1, r25	; 0x01
    e98e:	aa 83       	std	Y+2, r26	; 0x02
    e990:	bb 83       	std	Y+3, r27	; 0x03
    e992:	c5 54       	subi	r28, 0x45	; 69
        }
        fatfs_filinfo_list(&fno);
    e994:	d2 40       	sbci	r29, 0x02	; 2
    e996:	ce 01       	movw	r24, r28
    e998:	01 96       	adiw	r24, 0x01	; 1
#ifdef ESP8266
        optimistic_yield(1000);
        wdt_reset();
#endif
    }
    e99a:	f1 de       	rcall	.-542    	; 0xe77e <fatfs_filinfo_list>
    printf("%4u File(s),%10lu bytes total\n%4u Dir(s)", s1, p1, s2);
    e99c:	cd cf       	rjmp	.-102    	; 0xe938 <fatfs_ls+0x74>
    e99e:	df 92       	push	r13
    e9a0:	cf 92       	push	r12
    e9a2:	c8 5b       	subi	r28, 0xB8	; 184
    e9a4:	dd 4f       	sbci	r29, 0xFD	; 253
    e9a6:	88 81       	ld	r24, Y
    e9a8:	c8 54       	subi	r28, 0x48	; 72
    e9aa:	d2 40       	sbci	r29, 0x02	; 2
    e9ac:	8f 93       	push	r24
    e9ae:	c9 5b       	subi	r28, 0xB9	; 185
    e9b0:	dd 4f       	sbci	r29, 0xFD	; 253
    e9b2:	88 81       	ld	r24, Y
    e9b4:	c7 54       	subi	r28, 0x47	; 71
    e9b6:	d2 40       	sbci	r29, 0x02	; 2
    e9b8:	8f 93       	push	r24
    e9ba:	ca 5b       	subi	r28, 0xBA	; 186
    e9bc:	dd 4f       	sbci	r29, 0xFD	; 253
    e9be:	88 81       	ld	r24, Y
    e9c0:	c6 54       	subi	r28, 0x46	; 70
    e9c2:	d2 40       	sbci	r29, 0x02	; 2
    e9c4:	8f 93       	push	r24
    e9c6:	cb 5b       	subi	r28, 0xBB	; 187
    e9c8:	dd 4f       	sbci	r29, 0xFD	; 253
    e9ca:	88 81       	ld	r24, Y
    e9cc:	c5 54       	subi	r28, 0x45	; 69
    e9ce:	d2 40       	sbci	r29, 0x02	; 2
    e9d0:	8f 93       	push	r24
    e9d2:	ff 92       	push	r15
    e9d4:	ef 92       	push	r14
    e9d6:	83 e7       	ldi	r24, 0x73	; 115
    e9d8:	9a e0       	ldi	r25, 0x0A	; 10
    e9da:	1f 92       	push	r1
    e9dc:	9f 93       	push	r25
    e9de:	8f 93       	push	r24
    e9e0:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    if (f_getfree(buff, (DWORD*)&p1, &fs) == FR_OK)
    e9e4:	ae 01       	movw	r20, r28
    e9e6:	47 5b       	subi	r20, 0xB7	; 183
    e9e8:	5d 4f       	sbci	r21, 0xFD	; 253
    e9ea:	be 01       	movw	r22, r28
    e9ec:	6b 5b       	subi	r22, 0xBB	; 187
    e9ee:	7d 4f       	sbci	r23, 0xFD	; 253
    e9f0:	c8 01       	movw	r24, r16
    e9f2:	0e 94 f7 65 	call	0xcbee	; 0xcbee <f_getfree>
    e9f6:	0f b6       	in	r0, 0x3f	; 63
    e9f8:	f8 94       	cli
    e9fa:	de bf       	out	0x3e, r29	; 62
    e9fc:	0f be       	out	0x3f, r0	; 63
    e9fe:	cd bf       	out	0x3d, r28	; 61
    ea00:	89 2b       	or	r24, r25
        printf(", %10luK bytes free\n", p1 * fs->csize / 2);
    ea02:	41 f5       	brne	.+80     	; 0xea54 <fatfs_ls+0x190>
    ea04:	c7 5b       	subi	r28, 0xB7	; 183
    ea06:	dd 4f       	sbci	r29, 0xFD	; 253
    ea08:	e8 81       	ld	r30, Y
    ea0a:	f9 81       	ldd	r31, Y+1	; 0x01
    ea0c:	c9 54       	subi	r28, 0x49	; 73
    ea0e:	d2 40       	sbci	r29, 0x02	; 2
    ea10:	a1 85       	ldd	r26, Z+9	; 0x09
    ea12:	b2 85       	ldd	r27, Z+10	; 0x0a
    ea14:	cb 5b       	subi	r28, 0xBB	; 187
    ea16:	dd 4f       	sbci	r29, 0xFD	; 253
    ea18:	28 81       	ld	r18, Y
    ea1a:	39 81       	ldd	r19, Y+1	; 0x01
    ea1c:	4a 81       	ldd	r20, Y+2	; 0x02
    ea1e:	5b 81       	ldd	r21, Y+3	; 0x03
    ea20:	c5 54       	subi	r28, 0x45	; 69
    ea22:	d2 40       	sbci	r29, 0x02	; 2
    ea24:	0e 94 c0 e5 	call	0x1cb80	; 0x1cb80 <__muluhisi3>
    ea28:	22 e0       	ldi	r18, 0x02	; 2
    ea2a:	30 e0       	ldi	r19, 0x00	; 0
    ea2c:	40 e0       	ldi	r20, 0x00	; 0
    ea2e:	50 e0       	ldi	r21, 0x00	; 0
    ea30:	0e 94 80 e5 	call	0x1cb00	; 0x1cb00 <__divmodsi4>
    ea34:	5f 93       	push	r21
    ea36:	4f 93       	push	r20
    ea38:	3f 93       	push	r19
    ea3a:	2f 93       	push	r18
    ea3c:	8e e5       	ldi	r24, 0x5E	; 94
    ea3e:	9a e0       	ldi	r25, 0x0A	; 10
    ea40:	1f 92       	push	r1
    ea42:	9f 93       	push	r25
    ea44:	8f 93       	push	r24
    ea46:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    ea4a:	0f b6       	in	r0, 0x3f	; 63
    ea4c:	f8 94       	cli
    ea4e:	de bf       	out	0x3e, r29	; 62
    ea50:	0f be       	out	0x3f, r0	; 63
}
    ea52:	cd bf       	out	0x3d, r28	; 61
    ea54:	c6 5b       	subi	r28, 0xB6	; 182
    ea56:	dd 4f       	sbci	r29, 0xFD	; 253
    ea58:	e8 e0       	ldi	r30, 0x08	; 8
    ea5a:	0c 94 06 e6 	jmp	0x1cc0c	; 0x1cc0c <__epilogue_restores__+0x14>

0000ea5e <mmc_test>:
///
/// @return void
MEMSPACE
void mmc_test(void)
{
    printf("==============================\n");
    ea5e:	8c ef       	ldi	r24, 0xFC	; 252
    ea60:	9a e0       	ldi	r25, 0x0A	; 10
    ea62:	1f 92       	push	r1
    ea64:	9f 93       	push	r25
    ea66:	8f 93       	push	r24
    ea68:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    printf("START MMC TEST\n");
    ea6c:	8c ee       	ldi	r24, 0xEC	; 236
    ea6e:	9a e0       	ldi	r25, 0x0A	; 10
    ea70:	1f 92       	push	r1
    ea72:	9f 93       	push	r25
    ea74:	8f 93       	push	r24
    ea76:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    fatfs_status("/");
    ea7a:	88 e3       	ldi	r24, 0x38	; 56
    ea7c:	98 e0       	ldi	r25, 0x08	; 8
    ea7e:	13 dd       	rcall	.-1498   	; 0xe4a6 <fatfs_status>
    printf("MMC Directory List\n");
    ea80:	88 ed       	ldi	r24, 0xD8	; 216
    ea82:	9a e0       	ldi	r25, 0x0A	; 10
    ea84:	1f 92       	push	r1
    ea86:	9f 93       	push	r25
    ea88:	8f 93       	push	r24
    ea8a:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    fatfs_ls("/");
    ea8e:	88 e3       	ldi	r24, 0x38	; 56
    ea90:	98 e0       	ldi	r25, 0x08	; 8
    ea92:	18 df       	rcall	.-464    	; 0xe8c4 <fatfs_ls>
    fatfs_cat("test3.txt");
    fatfs_ls("");
#endif
#endif

    printf("END MMC TEST\n");
    ea94:	8a ec       	ldi	r24, 0xCA	; 202
    ea96:	9a e0       	ldi	r25, 0x0A	; 10
    ea98:	1f 92       	push	r1
    ea9a:	9f 93       	push	r25
    ea9c:	8f 93       	push	r24
    ea9e:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    printf("==============================\n");
    eaa2:	8a ea       	ldi	r24, 0xAA	; 170
    eaa4:	9a e0       	ldi	r25, 0x0A	; 10
    eaa6:	1f 92       	push	r1
    eaa8:	9f 93       	push	r25
    eaaa:	8f 93       	push	r24
    eaac:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
}
    eab0:	8d b7       	in	r24, 0x3d	; 61
    eab2:	9e b7       	in	r25, 0x3e	; 62
    eab4:	0f 96       	adiw	r24, 0x0f	; 15
    eab6:	0f b6       	in	r0, 0x3f	; 63
    eab8:	f8 94       	cli
    eaba:	9e bf       	out	0x3e, r25	; 62
    eabc:	0f be       	out	0x3f, r0	; 63
    eabe:	8d bf       	out	0x3d, r24	; 61
    eac0:	08 95       	ret

0000eac2 <fatfs_tests>:
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int fatfs_tests(int argc,char *argv[])
{
    eac2:	ef 92       	push	r14
    eac4:	ff 92       	push	r15
    eac6:	0f 93       	push	r16
    eac8:	1f 93       	push	r17
    eaca:	cf 93       	push	r28
    eacc:	df 93       	push	r29
    char *ptr;
    int ind;


    ind = 0;
    ptr = argv[ind++];
    eace:	fb 01       	movw	r30, r22
    ead0:	20 81       	ld	r18, Z
    ead2:	31 81       	ldd	r19, Z+1	; 0x01

    if(!ptr)
    ead4:	21 15       	cp	r18, r1
    ead6:	31 05       	cpc	r19, r1
    ead8:	19 f4       	brne	.+6      	; 0xeae0 <fatfs_tests+0x1e>
        return(0);
    eada:	80 e0       	ldi	r24, 0x00	; 0
    eadc:	90 e0       	ldi	r25, 0x00	; 0
    eade:	77 c0       	rjmp	.+238    	; 0xebce <fatfs_tests+0x10c>
    eae0:	eb 01       	movw	r28, r22
    eae2:	8c 01       	movw	r16, r24

// If we have POSIX_TESTS we MUST prefix each test with "fatfs" keyword to avoid name clashing

    if( MATCH(ptr,"fatfs") )
    eae4:	6c e5       	ldi	r22, 0x5C	; 92
    eae6:	78 e0       	ldi	r23, 0x08	; 8
    eae8:	c9 01       	movw	r24, r18
    eaea:	0e 94 30 33 	call	0x6660	; 0x6660 <MATCH>
    eaee:	89 2b       	or	r24, r25
    eaf0:	a1 f3       	breq	.-24     	; 0xeada <fatfs_tests+0x18>
    {
        ptr = argv[ind++];
    eaf2:	ea 80       	ldd	r14, Y+2	; 0x02
    eaf4:	fb 80       	ldd	r15, Y+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
    eaf6:	e1 14       	cp	r14, r1
    eaf8:	f1 04       	cpc	r15, r1
    eafa:	21 f4       	brne	.+8      	; 0xeb04 <fatfs_tests+0x42>
        {
            fatfs_help(1);
    eafc:	81 e0       	ldi	r24, 0x01	; 1
    eafe:	90 e0       	ldi	r25, 0x00	; 0
    eb00:	c5 de       	rcall	.-630    	; 0xe88c <fatfs_help>
    eb02:	63 c0       	rjmp	.+198    	; 0xebca <fatfs_tests+0x108>
// If we have POSIX_TESTS we MUST prefix each test with "fatfs" keyword to avoid name clashing

    if( MATCH(ptr,"fatfs") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
    eb04:	67 ef       	ldi	r22, 0xF7	; 247
    eb06:	75 e1       	ldi	r23, 0x15	; 21
    eb08:	c7 01       	movw	r24, r14
    eb0a:	0e 94 30 33 	call	0x6660	; 0x6660 <MATCH>
    eb0e:	89 2b       	or	r24, r25
    eb10:	a9 f7       	brne	.-22     	; 0xeafc <fatfs_tests+0x3a>
    {
        return(0);
    }
#endif

    if (MATCHARGS(ptr,"ls", (ind + 0), argc))
    eb12:	98 01       	movw	r18, r16
    eb14:	42 e0       	ldi	r20, 0x02	; 2
    eb16:	50 e0       	ldi	r21, 0x00	; 0
    eb18:	62 e6       	ldi	r22, 0x62	; 98
    eb1a:	78 e0       	ldi	r23, 0x08	; 8
    eb1c:	c7 01       	movw	r24, r14
    eb1e:	0e 94 44 33 	call	0x6688	; 0x6688 <MATCHARGS>
    eb22:	89 2b       	or	r24, r25
    eb24:	51 f1       	breq	.+84     	; 0xeb7a <fatfs_tests+0xb8>
    {
        int i;
        int args = 0;
        printf("ind:%d,argc:%d\n", ind, argc);
    eb26:	1f 93       	push	r17
    eb28:	0f 93       	push	r16
    eb2a:	1f 92       	push	r1
    eb2c:	82 e0       	ldi	r24, 0x02	; 2
    eb2e:	8f 93       	push	r24
    eb30:	8c e1       	ldi	r24, 0x1C	; 28
    eb32:	9b e0       	ldi	r25, 0x0B	; 11
    eb34:	1f 92       	push	r1
    eb36:	9f 93       	push	r25
    eb38:	8f 93       	push	r24
    eb3a:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    eb3e:	7e 01       	movw	r14, r28
    eb40:	f4 e0       	ldi	r31, 0x04	; 4
    eb42:	ef 0e       	add	r14, r31
    eb44:	f1 1c       	adc	r15, r1
        for(i=ind;i<argc;++i)
    eb46:	8d b7       	in	r24, 0x3d	; 61
    eb48:	9e b7       	in	r25, 0x3e	; 62
    eb4a:	07 96       	adiw	r24, 0x07	; 7
    eb4c:	0f b6       	in	r0, 0x3f	; 63
    eb4e:	f8 94       	cli
    eb50:	9e bf       	out	0x3e, r25	; 62
    eb52:	0f be       	out	0x3f, r0	; 63
    eb54:	8d bf       	out	0x3d, r24	; 61
    eb56:	c2 e0       	ldi	r28, 0x02	; 2
    eb58:	d0 e0       	ldi	r29, 0x00	; 0
    eb5a:	c0 17       	cp	r28, r16
    eb5c:	d1 07       	cpc	r29, r17
    eb5e:	3c f4       	brge	.+14     	; 0xeb6e <fatfs_tests+0xac>
        {
            //printf("%d:%s\n", i, argv[i]);
            fatfs_ls(argv[i]);
    eb60:	f7 01       	movw	r30, r14
    eb62:	81 91       	ld	r24, Z+
    eb64:	91 91       	ld	r25, Z+
    eb66:	7f 01       	movw	r14, r30
    eb68:	ad de       	rcall	.-678    	; 0xe8c4 <fatfs_ls>
    if (MATCHARGS(ptr,"ls", (ind + 0), argc))
    {
        int i;
        int args = 0;
        printf("ind:%d,argc:%d\n", ind, argc);
        for(i=ind;i<argc;++i)
    eb6a:	21 96       	adiw	r28, 0x01	; 1
    eb6c:	f6 cf       	rjmp	.-20     	; 0xeb5a <fatfs_tests+0x98>
        {
            //printf("%d:%s\n", i, argv[i]);
            fatfs_ls(argv[i]);
            ++args;
        }
        if(!args)
    eb6e:	22 97       	sbiw	r28, 0x02	; 2
        {
            fatfs_ls("");
    eb70:	61 f5       	brne	.+88     	; 0xebca <fatfs_tests+0x108>
    eb72:	87 e1       	ldi	r24, 0x17	; 23
    eb74:	97 e1       	ldi	r25, 0x17	; 23
    eb76:	a6 de       	rcall	.-692    	; 0xe8c4 <fatfs_ls>
        }
        return(1);
    }

    if (MATCHARGS(ptr,"mmc_test",(ind+0),argc ))
    eb78:	28 c0       	rjmp	.+80     	; 0xebca <fatfs_tests+0x108>
    eb7a:	98 01       	movw	r18, r16
    eb7c:	42 e0       	ldi	r20, 0x02	; 2
    eb7e:	50 e0       	ldi	r21, 0x00	; 0
    eb80:	65 e6       	ldi	r22, 0x65	; 101
    eb82:	78 e0       	ldi	r23, 0x08	; 8
    eb84:	c7 01       	movw	r24, r14
    eb86:	0e 94 44 33 	call	0x6688	; 0x6688 <MATCHARGS>
    {
        mmc_test();
    eb8a:	89 2b       	or	r24, r25
    eb8c:	11 f0       	breq	.+4      	; 0xeb92 <fatfs_tests+0xd0>
    eb8e:	67 df       	rcall	.-306    	; 0xea5e <mmc_test>
        return(1);
    }

    if (MATCHARGS(ptr,"mmc_init",(ind+0),argc))
    eb90:	1c c0       	rjmp	.+56     	; 0xebca <fatfs_tests+0x108>
    eb92:	98 01       	movw	r18, r16
    eb94:	42 e0       	ldi	r20, 0x02	; 2
    eb96:	50 e0       	ldi	r21, 0x00	; 0
    eb98:	6e e6       	ldi	r22, 0x6E	; 110
    eb9a:	78 e0       	ldi	r23, 0x08	; 8
    eb9c:	c7 01       	movw	r24, r14
    eb9e:	0e 94 44 33 	call	0x6688	; 0x6688 <MATCHARGS>
    {
        mmc_init(1);
    eba2:	89 2b       	or	r24, r25
    eba4:	21 f0       	breq	.+8      	; 0xebae <fatfs_tests+0xec>
    eba6:	81 e0       	ldi	r24, 0x01	; 1
    eba8:	90 e0       	ldi	r25, 0x00	; 0
    ebaa:	cb da       	rcall	.-2666   	; 0xe142 <mmc_init>
        return(1);
    }

    if (MATCHARGS(ptr,"status", (ind + 1), argc))
    ebac:	0e c0       	rjmp	.+28     	; 0xebca <fatfs_tests+0x108>
    ebae:	98 01       	movw	r18, r16
    ebb0:	43 e0       	ldi	r20, 0x03	; 3
    ebb2:	50 e0       	ldi	r21, 0x00	; 0
    ebb4:	67 e7       	ldi	r22, 0x77	; 119
    ebb6:	78 e0       	ldi	r23, 0x08	; 8
    ebb8:	c7 01       	movw	r24, r14
    ebba:	0e 94 44 33 	call	0x6688	; 0x6688 <MATCHARGS>
    ebbe:	89 2b       	or	r24, r25
    {
        fatfs_status(argv[ind]);
    ebc0:	09 f4       	brne	.+2      	; 0xebc4 <fatfs_tests+0x102>
    ebc2:	8b cf       	rjmp	.-234    	; 0xeada <fatfs_tests+0x18>
    ebc4:	8c 81       	ldd	r24, Y+4	; 0x04
    ebc6:	9d 81       	ldd	r25, Y+5	; 0x05
        }
        if(!args)
        {
            fatfs_ls("");
        }
        return(1);
    ebc8:	6e dc       	rcall	.-1828   	; 0xe4a6 <fatfs_status>
    ebca:	81 e0       	ldi	r24, 0x01	; 1
        return(1);
    }
#endif

    return(0);
}
    ebcc:	90 e0       	ldi	r25, 0x00	; 0
    ebce:	cd b7       	in	r28, 0x3d	; 61
    ebd0:	de b7       	in	r29, 0x3e	; 62
    ebd2:	e6 e0       	ldi	r30, 0x06	; 6
    ebd4:	0c 94 08 e6 	jmp	0x1cc10	; 0x1cc10 <__epilogue_restores__+0x18>

0000ebd8 <fatfs_getc>:
    {
        errno = fatfs_to_errno(rc);
        return(-1);
    }
    return(0);
}
    ebd8:	8f 92       	push	r8
    ebda:	9f 92       	push	r9
    ebdc:	af 92       	push	r10
    ebde:	bf 92       	push	r11
    ebe0:	ef 92       	push	r14
    ebe2:	ff 92       	push	r15
    ebe4:	0f 93       	push	r16
    ebe6:	1f 93       	push	r17
    ebe8:	cf 93       	push	r28
    ebea:	df 93       	push	r29
    ebec:	00 d0       	rcall	.+0      	; 0xebee <fatfs_getc+0x16>
    ebee:	1f 92       	push	r1
    ebf0:	cd b7       	in	r28, 0x3d	; 61
    ebf2:	de b7       	in	r29, 0x3e	; 62
    ebf4:	10 92 ba 1b 	sts	0x1BBA, r1	; 0x801bba <errno+0x1>
    ebf8:	10 92 b9 1b 	sts	0x1BB9, r1	; 0x801bb9 <errno>
    ebfc:	00 97       	sbiw	r24, 0x00	; 0
    ebfe:	39 f4       	brne	.+14     	; 0xec0e <fatfs_getc+0x36>
    ec00:	89 e0       	ldi	r24, 0x09	; 9
    ec02:	90 e0       	ldi	r25, 0x00	; 0
    ec04:	90 93 ba 1b 	sts	0x1BBA, r25	; 0x801bba <errno+0x1>
    ec08:	80 93 b9 1b 	sts	0x1BB9, r24	; 0x801bb9 <errno>
    ec0c:	2f c0       	rjmp	.+94     	; 0xec6c <fatfs_getc+0x94>
    ec0e:	fc 01       	movw	r30, r24
    ec10:	e4 84       	ldd	r14, Z+12	; 0x0c
    ec12:	f5 84       	ldd	r15, Z+13	; 0x0d
    ec14:	e1 14       	cp	r14, r1
    ec16:	f1 04       	cpc	r15, r1
    ec18:	99 f3       	breq	.-26     	; 0xec00 <fatfs_getc+0x28>
    ec1a:	8c 01       	movw	r16, r24
    ec1c:	9e 01       	movw	r18, r28
    ec1e:	2f 5f       	subi	r18, 0xFF	; 255
    ec20:	3f 4f       	sbci	r19, 0xFF	; 255
    ec22:	41 e0       	ldi	r20, 0x01	; 1
    ec24:	50 e0       	ldi	r21, 0x00	; 0
    ec26:	be 01       	movw	r22, r28
    ec28:	6d 5f       	subi	r22, 0xFD	; 253
    ec2a:	7f 4f       	sbci	r23, 0xFF	; 255
    ec2c:	c7 01       	movw	r24, r14
    ec2e:	0e 94 08 5d 	call	0xba10	; 0xba10 <f_read>
    ec32:	00 97       	sbiw	r24, 0x00	; 0
    ec34:	31 f4       	brne	.+12     	; 0xec42 <fatfs_getc+0x6a>
    ec36:	29 81       	ldd	r18, Y+1	; 0x01
    ec38:	3a 81       	ldd	r19, Y+2	; 0x02
    ec3a:	21 30       	cpi	r18, 0x01	; 1
    ec3c:	31 05       	cpc	r19, r1
    ec3e:	c9 f0       	breq	.+50     	; 0xec72 <fatfs_getc+0x9a>
    ec40:	03 c0       	rjmp	.+6      	; 0xec48 <fatfs_getc+0x70>
    ec42:	84 31       	cpi	r24, 0x14	; 20
    ec44:	91 05       	cpc	r25, r1
    ec46:	40 f4       	brcc	.+16     	; 0xec58 <fatfs_getc+0x80>
    ec48:	fc 01       	movw	r30, r24
    ec4a:	e0 5f       	subi	r30, 0xF0	; 240
    ec4c:	f8 4f       	sbci	r31, 0xF8	; 248
    ec4e:	80 81       	ld	r24, Z
    ec50:	08 2e       	mov	r0, r24
    ec52:	00 0c       	add	r0, r0
    ec54:	99 0b       	sbc	r25, r25
    ec56:	02 c0       	rjmp	.+4      	; 0xec5c <fatfs_getc+0x84>
    ec58:	83 e2       	ldi	r24, 0x23	; 35
    ec5a:	90 e0       	ldi	r25, 0x00	; 0
    ec5c:	90 93 ba 1b 	sts	0x1BBA, r25	; 0x801bba <errno+0x1>
    ec60:	80 93 b9 1b 	sts	0x1BB9, r24	; 0x801bb9 <errno>
    ec64:	f8 01       	movw	r30, r16
    ec66:	83 81       	ldd	r24, Z+3	; 0x03
    ec68:	80 62       	ori	r24, 0x20	; 32
    ec6a:	83 83       	std	Z+3, r24	; 0x03
    ec6c:	8f ef       	ldi	r24, 0xFF	; 255
    ec6e:	9f ef       	ldi	r25, 0xFF	; 255
    ec70:	28 c0       	rjmp	.+80     	; 0xecc2 <fatfs_getc+0xea>
    ec72:	8b 81       	ldd	r24, Y+3	; 0x03
    ec74:	8d 30       	cpi	r24, 0x0D	; 13
    ec76:	01 f5       	brne	.+64     	; 0xecb8 <fatfs_getc+0xe0>
    ec78:	f7 01       	movw	r30, r14
    ec7a:	80 88       	ldd	r8, Z+16	; 0x10
    ec7c:	91 88       	ldd	r9, Z+17	; 0x11
    ec7e:	a2 88       	ldd	r10, Z+18	; 0x12
    ec80:	b3 88       	ldd	r11, Z+19	; 0x13
    ec82:	9e 01       	movw	r18, r28
    ec84:	2f 5f       	subi	r18, 0xFF	; 255
    ec86:	3f 4f       	sbci	r19, 0xFF	; 255
    ec88:	41 e0       	ldi	r20, 0x01	; 1
    ec8a:	50 e0       	ldi	r21, 0x00	; 0
    ec8c:	be 01       	movw	r22, r28
    ec8e:	6d 5f       	subi	r22, 0xFD	; 253
    ec90:	7f 4f       	sbci	r23, 0xFF	; 255
    ec92:	c7 01       	movw	r24, r14
    ec94:	0e 94 08 5d 	call	0xba10	; 0xba10 <f_read>
    ec98:	89 2b       	or	r24, r25
    ec9a:	89 f4       	brne	.+34     	; 0xecbe <fatfs_getc+0xe6>
    ec9c:	89 81       	ldd	r24, Y+1	; 0x01
    ec9e:	9a 81       	ldd	r25, Y+2	; 0x02
    eca0:	01 97       	sbiw	r24, 0x01	; 1
    eca2:	69 f4       	brne	.+26     	; 0xecbe <fatfs_getc+0xe6>
    eca4:	8b 81       	ldd	r24, Y+3	; 0x03
    eca6:	8a 30       	cpi	r24, 0x0A	; 10
    eca8:	31 f0       	breq	.+12     	; 0xecb6 <fatfs_getc+0xde>
    ecaa:	b5 01       	movw	r22, r10
    ecac:	a4 01       	movw	r20, r8
    ecae:	c7 01       	movw	r24, r14
    ecb0:	0e 94 14 62 	call	0xc428	; 0xc428 <f_lseek>
    ecb4:	04 c0       	rjmp	.+8      	; 0xecbe <fatfs_getc+0xe6>
    ecb6:	8b 83       	std	Y+3, r24	; 0x03
    ecb8:	8b 81       	ldd	r24, Y+3	; 0x03
    ecba:	90 e0       	ldi	r25, 0x00	; 0
    ecbc:	02 c0       	rjmp	.+4      	; 0xecc2 <fatfs_getc+0xea>
    ecbe:	8a e0       	ldi	r24, 0x0A	; 10
    ecc0:	90 e0       	ldi	r25, 0x00	; 0
    ecc2:	0f 90       	pop	r0
    ecc4:	0f 90       	pop	r0
    ecc6:	0f 90       	pop	r0
    ecc8:	df 91       	pop	r29
    ecca:	cf 91       	pop	r28
    eccc:	1f 91       	pop	r17
    ecce:	0f 91       	pop	r16
    ecd0:	ff 90       	pop	r15
    ecd2:	ef 90       	pop	r14
    ecd4:	bf 90       	pop	r11
    ecd6:	af 90       	pop	r10
    ecd8:	9f 90       	pop	r9
    ecda:	8f 90       	pop	r8
    ecdc:	08 95       	ret

0000ecde <fatfs_putc>:
    ecde:	a3 e0       	ldi	r26, 0x03	; 3
    ece0:	b0 e0       	ldi	r27, 0x00	; 0
    ece2:	e5 e7       	ldi	r30, 0x75	; 117
    ece4:	f6 e7       	ldi	r31, 0x76	; 118
    ece6:	0c 94 ee e5 	jmp	0x1cbdc	; 0x1cbdc <__prologue_saves__+0x1c>
    ecea:	8b 83       	std	Y+3, r24	; 0x03
    ecec:	10 92 ba 1b 	sts	0x1BBA, r1	; 0x801bba <errno+0x1>
    ecf0:	10 92 b9 1b 	sts	0x1BB9, r1	; 0x801bb9 <errno>
    ecf4:	61 15       	cp	r22, r1
    ecf6:	71 05       	cpc	r23, r1
    ecf8:	39 f4       	brne	.+14     	; 0xed08 <fatfs_putc+0x2a>
    ecfa:	89 e0       	ldi	r24, 0x09	; 9
    ecfc:	90 e0       	ldi	r25, 0x00	; 0
    ecfe:	90 93 ba 1b 	sts	0x1BBA, r25	; 0x801bba <errno+0x1>
    ed02:	80 93 b9 1b 	sts	0x1BB9, r24	; 0x801bb9 <errno>
    ed06:	2d c0       	rjmp	.+90     	; 0xed62 <fatfs_putc+0x84>
    ed08:	fb 01       	movw	r30, r22
    ed0a:	84 85       	ldd	r24, Z+12	; 0x0c
    ed0c:	95 85       	ldd	r25, Z+13	; 0x0d
    ed0e:	00 97       	sbiw	r24, 0x00	; 0
    ed10:	a1 f3       	breq	.-24     	; 0xecfa <fatfs_putc+0x1c>
    ed12:	8b 01       	movw	r16, r22
    ed14:	9e 01       	movw	r18, r28
    ed16:	2f 5f       	subi	r18, 0xFF	; 255
    ed18:	3f 4f       	sbci	r19, 0xFF	; 255
    ed1a:	41 e0       	ldi	r20, 0x01	; 1
    ed1c:	50 e0       	ldi	r21, 0x00	; 0
    ed1e:	be 01       	movw	r22, r28
    ed20:	6d 5f       	subi	r22, 0xFD	; 253
    ed22:	7f 4f       	sbci	r23, 0xFF	; 255
    ed24:	0e 94 53 5e 	call	0xbca6	; 0xbca6 <f_write>
    ed28:	00 97       	sbiw	r24, 0x00	; 0
    ed2a:	31 f4       	brne	.+12     	; 0xed38 <fatfs_putc+0x5a>
    ed2c:	29 81       	ldd	r18, Y+1	; 0x01
    ed2e:	3a 81       	ldd	r19, Y+2	; 0x02
    ed30:	21 30       	cpi	r18, 0x01	; 1
    ed32:	31 05       	cpc	r19, r1
    ed34:	c9 f0       	breq	.+50     	; 0xed68 <fatfs_putc+0x8a>
    ed36:	03 c0       	rjmp	.+6      	; 0xed3e <fatfs_putc+0x60>
    ed38:	84 31       	cpi	r24, 0x14	; 20
    ed3a:	91 05       	cpc	r25, r1
    ed3c:	40 f4       	brcc	.+16     	; 0xed4e <fatfs_putc+0x70>
    ed3e:	fc 01       	movw	r30, r24
    ed40:	e0 5f       	subi	r30, 0xF0	; 240
    ed42:	f8 4f       	sbci	r31, 0xF8	; 248
    ed44:	80 81       	ld	r24, Z
    ed46:	08 2e       	mov	r0, r24
    ed48:	00 0c       	add	r0, r0
    ed4a:	99 0b       	sbc	r25, r25
    ed4c:	02 c0       	rjmp	.+4      	; 0xed52 <fatfs_putc+0x74>
    ed4e:	83 e2       	ldi	r24, 0x23	; 35
    ed50:	90 e0       	ldi	r25, 0x00	; 0
    ed52:	90 93 ba 1b 	sts	0x1BBA, r25	; 0x801bba <errno+0x1>
    ed56:	80 93 b9 1b 	sts	0x1BB9, r24	; 0x801bb9 <errno>
    ed5a:	f8 01       	movw	r30, r16
    ed5c:	83 81       	ldd	r24, Z+3	; 0x03
    ed5e:	80 62       	ori	r24, 0x20	; 32
    ed60:	83 83       	std	Z+3, r24	; 0x03
    ed62:	8f ef       	ldi	r24, 0xFF	; 255
    ed64:	9f ef       	ldi	r25, 0xFF	; 255
    ed66:	02 c0       	rjmp	.+4      	; 0xed6c <fatfs_putc+0x8e>
    ed68:	8b 81       	ldd	r24, Y+3	; 0x03
    ed6a:	90 e0       	ldi	r25, 0x00	; 0
    ed6c:	23 96       	adiw	r28, 0x03	; 3
    ed6e:	e4 e0       	ldi	r30, 0x04	; 4
    ed70:	0c 94 0a e6 	jmp	0x1cc14	; 0x1cc14 <__epilogue_restores__+0x1c>

0000ed74 <fgetc>:
    ed74:	cf 93       	push	r28
    ed76:	df 93       	push	r29
    ed78:	ec 01       	movw	r28, r24
    ed7a:	00 97       	sbiw	r24, 0x00	; 0
    ed7c:	39 f4       	brne	.+14     	; 0xed8c <fgetc+0x18>
    ed7e:	89 e0       	ldi	r24, 0x09	; 9
    ed80:	90 e0       	ldi	r25, 0x00	; 0
    ed82:	90 93 ba 1b 	sts	0x1BBA, r25	; 0x801bba <errno+0x1>
    ed86:	80 93 b9 1b 	sts	0x1BB9, r24	; 0x801bb9 <errno>
    ed8a:	40 c0       	rjmp	.+128    	; 0xee0c <fgetc+0x98>
    ed8c:	2b 81       	ldd	r18, Y+3	; 0x03
    ed8e:	20 ff       	sbrs	r18, 0
    ed90:	3d c0       	rjmp	.+122    	; 0xee0c <fgetc+0x98>
    ed92:	26 ff       	sbrs	r18, 6
    ed94:	0a c0       	rjmp	.+20     	; 0xedaa <fgetc+0x36>
    ed96:	2f 7b       	andi	r18, 0xBF	; 191
    ed98:	2b 83       	std	Y+3, r18	; 0x03
    ed9a:	8e 81       	ldd	r24, Y+6	; 0x06
    ed9c:	9f 81       	ldd	r25, Y+7	; 0x07
    ed9e:	01 96       	adiw	r24, 0x01	; 1
    eda0:	9f 83       	std	Y+7, r25	; 0x07
    eda2:	8e 83       	std	Y+6, r24	; 0x06
    eda4:	8a 81       	ldd	r24, Y+2	; 0x02
    eda6:	90 e0       	ldi	r25, 0x00	; 0
    eda8:	33 c0       	rjmp	.+102    	; 0xee10 <fgetc+0x9c>
    edaa:	22 ff       	sbrs	r18, 2
    edac:	0d c0       	rjmp	.+26     	; 0xedc8 <fgetc+0x54>
    edae:	e8 81       	ld	r30, Y
    edb0:	f9 81       	ldd	r31, Y+1	; 0x01
    edb2:	80 81       	ld	r24, Z
    edb4:	90 e0       	ldi	r25, 0x00	; 0
    edb6:	00 97       	sbiw	r24, 0x00	; 0
    edb8:	19 f4       	brne	.+6      	; 0xedc0 <fgetc+0x4c>
    edba:	20 62       	ori	r18, 0x20	; 32
    edbc:	2b 83       	std	Y+3, r18	; 0x03
    edbe:	26 c0       	rjmp	.+76     	; 0xee0c <fgetc+0x98>
    edc0:	31 96       	adiw	r30, 0x01	; 1
    edc2:	f9 83       	std	Y+1, r31	; 0x01
    edc4:	e8 83       	st	Y, r30
    edc6:	1b c0       	rjmp	.+54     	; 0xedfe <fgetc+0x8a>
    edc8:	ea 85       	ldd	r30, Y+10	; 0x0a
    edca:	fb 85       	ldd	r31, Y+11	; 0x0b
    edcc:	30 97       	sbiw	r30, 0x00	; 0
    edce:	59 f4       	brne	.+22     	; 0xede6 <fgetc+0x72>
    edd0:	88 e7       	ldi	r24, 0x78	; 120
    edd2:	9c e0       	ldi	r25, 0x0C	; 12
    edd4:	1f 92       	push	r1
    edd6:	9f 93       	push	r25
    edd8:	8f 93       	push	r24
    edda:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    edde:	0f 90       	pop	r0
    ede0:	0f 90       	pop	r0
    ede2:	0f 90       	pop	r0
    ede4:	13 c0       	rjmp	.+38     	; 0xee0c <fgetc+0x98>
    ede6:	09 95       	icall
    ede8:	97 ff       	sbrs	r25, 7
    edea:	09 c0       	rjmp	.+18     	; 0xedfe <fgetc+0x8a>
    edec:	2b 81       	ldd	r18, Y+3	; 0x03
    edee:	02 96       	adiw	r24, 0x02	; 2
    edf0:	11 f0       	breq	.+4      	; 0xedf6 <fgetc+0x82>
    edf2:	80 e2       	ldi	r24, 0x20	; 32
    edf4:	01 c0       	rjmp	.+2      	; 0xedf8 <fgetc+0x84>
    edf6:	80 e1       	ldi	r24, 0x10	; 16
    edf8:	82 2b       	or	r24, r18
    edfa:	8b 83       	std	Y+3, r24	; 0x03
    edfc:	07 c0       	rjmp	.+14     	; 0xee0c <fgetc+0x98>
    edfe:	2e 81       	ldd	r18, Y+6	; 0x06
    ee00:	3f 81       	ldd	r19, Y+7	; 0x07
    ee02:	2f 5f       	subi	r18, 0xFF	; 255
    ee04:	3f 4f       	sbci	r19, 0xFF	; 255
    ee06:	3f 83       	std	Y+7, r19	; 0x07
    ee08:	2e 83       	std	Y+6, r18	; 0x06
    ee0a:	02 c0       	rjmp	.+4      	; 0xee10 <fgetc+0x9c>
    ee0c:	8f ef       	ldi	r24, 0xFF	; 255
    ee0e:	9f ef       	ldi	r25, 0xFF	; 255
    ee10:	df 91       	pop	r29
    ee12:	cf 91       	pop	r28
    ee14:	08 95       	ret

0000ee16 <fputc>:
    ee16:	cf 93       	push	r28
    ee18:	df 93       	push	r29
    ee1a:	eb 01       	movw	r28, r22
    ee1c:	10 92 ba 1b 	sts	0x1BBA, r1	; 0x801bba <errno+0x1>
    ee20:	10 92 b9 1b 	sts	0x1BB9, r1	; 0x801bb9 <errno>
    ee24:	20 91 bd 1b 	lds	r18, 0x1BBD	; 0x801bbd <__iob+0x2>
    ee28:	30 91 be 1b 	lds	r19, 0x1BBE	; 0x801bbe <__iob+0x3>
    ee2c:	62 17       	cp	r22, r18
    ee2e:	73 07       	cpc	r23, r19
    ee30:	49 f0       	breq	.+18     	; 0xee44 <fputc+0x2e>
    ee32:	20 91 bf 1b 	lds	r18, 0x1BBF	; 0x801bbf <__iob+0x4>
    ee36:	30 91 c0 1b 	lds	r19, 0x1BC0	; 0x801bc0 <__iob+0x5>
    ee3a:	62 17       	cp	r22, r18
    ee3c:	73 07       	cpc	r23, r19
    ee3e:	11 f0       	breq	.+4      	; 0xee44 <fputc+0x2e>
    ee40:	4e df       	rcall	.-356    	; 0xecde <fatfs_putc>
    ee42:	33 c0       	rjmp	.+102    	; 0xeeaa <fputc+0x94>
    ee44:	2b 81       	ldd	r18, Y+3	; 0x03
    ee46:	21 ff       	sbrs	r18, 1
    ee48:	2e c0       	rjmp	.+92     	; 0xeea6 <fputc+0x90>
    ee4a:	22 ff       	sbrs	r18, 2
    ee4c:	10 c0       	rjmp	.+32     	; 0xee6e <fputc+0x58>
    ee4e:	4e 81       	ldd	r20, Y+6	; 0x06
    ee50:	5f 81       	ldd	r21, Y+7	; 0x07
    ee52:	2c 81       	ldd	r18, Y+4	; 0x04
    ee54:	3d 81       	ldd	r19, Y+5	; 0x05
    ee56:	42 17       	cp	r20, r18
    ee58:	53 07       	cpc	r21, r19
    ee5a:	f4 f4       	brge	.+60     	; 0xee98 <fputc+0x82>
    ee5c:	e8 81       	ld	r30, Y
    ee5e:	f9 81       	ldd	r31, Y+1	; 0x01
    ee60:	9f 01       	movw	r18, r30
    ee62:	2f 5f       	subi	r18, 0xFF	; 255
    ee64:	3f 4f       	sbci	r19, 0xFF	; 255
    ee66:	39 83       	std	Y+1, r19	; 0x01
    ee68:	28 83       	st	Y, r18
    ee6a:	80 83       	st	Z, r24
    ee6c:	15 c0       	rjmp	.+42     	; 0xee98 <fputc+0x82>
    ee6e:	e8 85       	ldd	r30, Y+8	; 0x08
    ee70:	f9 85       	ldd	r31, Y+9	; 0x09
    ee72:	30 97       	sbiw	r30, 0x00	; 0
    ee74:	59 f4       	brne	.+22     	; 0xee8c <fputc+0x76>
    ee76:	80 e6       	ldi	r24, 0x60	; 96
    ee78:	9c e0       	ldi	r25, 0x0C	; 12
    ee7a:	1f 92       	push	r1
    ee7c:	9f 93       	push	r25
    ee7e:	8f 93       	push	r24
    ee80:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    ee84:	0f 90       	pop	r0
    ee86:	0f 90       	pop	r0
    ee88:	0f 90       	pop	r0
    ee8a:	0d c0       	rjmp	.+26     	; 0xeea6 <fputc+0x90>
    ee8c:	be 01       	movw	r22, r28
    ee8e:	09 95       	icall
    ee90:	8f 3f       	cpi	r24, 0xFF	; 255
    ee92:	2f ef       	ldi	r18, 0xFF	; 255
    ee94:	92 07       	cpc	r25, r18
    ee96:	39 f0       	breq	.+14     	; 0xeea6 <fputc+0x90>
    ee98:	2e 81       	ldd	r18, Y+6	; 0x06
    ee9a:	3f 81       	ldd	r19, Y+7	; 0x07
    ee9c:	2f 5f       	subi	r18, 0xFF	; 255
    ee9e:	3f 4f       	sbci	r19, 0xFF	; 255
    eea0:	3f 83       	std	Y+7, r19	; 0x07
    eea2:	2e 83       	std	Y+6, r18	; 0x06
    eea4:	02 c0       	rjmp	.+4      	; 0xeeaa <fputc+0x94>
    eea6:	8f ef       	ldi	r24, 0xFF	; 255
    eea8:	9f ef       	ldi	r25, 0xFF	; 255
    eeaa:	df 91       	pop	r29
    eeac:	cf 91       	pop	r28
    eeae:	08 95       	ret

0000eeb0 <_fprintf_putc>:
    eeb0:	fc 01       	movw	r30, r24
    eeb2:	86 2f       	mov	r24, r22
    eeb4:	26 81       	ldd	r18, Z+6	; 0x06
    eeb6:	37 81       	ldd	r19, Z+7	; 0x07
    eeb8:	2f 5f       	subi	r18, 0xFF	; 255
    eeba:	3f 4f       	sbci	r19, 0xFF	; 255
    eebc:	37 83       	std	Z+7, r19	; 0x07
    eebe:	26 83       	std	Z+6, r18	; 0x06
    eec0:	62 81       	ldd	r22, Z+2	; 0x02
    eec2:	73 81       	ldd	r23, Z+3	; 0x03
    eec4:	90 e0       	ldi	r25, 0x00	; 0
    eec6:	a7 cf       	rjmp	.-178    	; 0xee16 <fputc>
    eec8:	08 95       	ret

0000eeca <getchar>:
    eeca:	80 91 bb 1b 	lds	r24, 0x1BBB	; 0x801bbb <__iob>
    eece:	90 91 bc 1b 	lds	r25, 0x1BBC	; 0x801bbc <__iob+0x1>
    eed2:	50 cf       	rjmp	.-352    	; 0xed74 <fgetc>
    eed4:	08 95       	ret

0000eed6 <putchar>:
    eed6:	60 91 bd 1b 	lds	r22, 0x1BBD	; 0x801bbd <__iob+0x2>
    eeda:	70 91 be 1b 	lds	r23, 0x1BBE	; 0x801bbe <__iob+0x3>
    eede:	9b cf       	rjmp	.-202    	; 0xee16 <fputc>
    eee0:	08 95       	ret

0000eee2 <fgets>:
    eee2:	a0 e0       	ldi	r26, 0x00	; 0
    eee4:	b0 e0       	ldi	r27, 0x00	; 0
    eee6:	e7 e7       	ldi	r30, 0x77	; 119
    eee8:	f7 e7       	ldi	r31, 0x77	; 119
    eeea:	0c 94 ea e5 	jmp	0x1cbd4	; 0x1cbd4 <__prologue_saves__+0x14>
    eeee:	7c 01       	movw	r14, r24
    eef0:	6a 01       	movw	r12, r20
    eef2:	8b 01       	movw	r16, r22
    eef4:	c0 e0       	ldi	r28, 0x00	; 0
    eef6:	d0 e0       	ldi	r29, 0x00	; 0
    eef8:	01 15       	cp	r16, r1
    eefa:	11 05       	cpc	r17, r1
    eefc:	41 f0       	breq	.+16     	; 0xef0e <fgets+0x2c>
    eefe:	c6 01       	movw	r24, r12
    ef00:	39 df       	rcall	.-398    	; 0xed74 <fgetc>
    ef02:	8f 3f       	cpi	r24, 0xFF	; 255
    ef04:	2f ef       	ldi	r18, 0xFF	; 255
    ef06:	92 07       	cpc	r25, r18
    ef08:	39 f4       	brne	.+14     	; 0xef18 <fgets+0x36>
    ef0a:	20 97       	sbiw	r28, 0x00	; 0
    ef0c:	b9 f0       	breq	.+46     	; 0xef3c <fgets+0x5a>
    ef0e:	ce 0d       	add	r28, r14
    ef10:	df 1d       	adc	r29, r15
    ef12:	18 82       	st	Y, r1
    ef14:	c7 01       	movw	r24, r14
    ef16:	14 c0       	rjmp	.+40     	; 0xef40 <fgets+0x5e>
    ef18:	8a 30       	cpi	r24, 0x0A	; 10
    ef1a:	91 05       	cpc	r25, r1
    ef1c:	c1 f3       	breq	.-16     	; 0xef0e <fgets+0x2c>
    ef1e:	88 30       	cpi	r24, 0x08	; 8
    ef20:	91 05       	cpc	r25, r1
    ef22:	21 f4       	brne	.+8      	; 0xef2c <fgets+0x4a>
    ef24:	20 97       	sbiw	r28, 0x00	; 0
    ef26:	39 f0       	breq	.+14     	; 0xef36 <fgets+0x54>
    ef28:	21 97       	sbiw	r28, 0x01	; 1
    ef2a:	05 c0       	rjmp	.+10     	; 0xef36 <fgets+0x54>
    ef2c:	f7 01       	movw	r30, r14
    ef2e:	ec 0f       	add	r30, r28
    ef30:	fd 1f       	adc	r31, r29
    ef32:	80 83       	st	Z, r24
    ef34:	21 96       	adiw	r28, 0x01	; 1
    ef36:	01 50       	subi	r16, 0x01	; 1
    ef38:	11 09       	sbc	r17, r1
    ef3a:	de cf       	rjmp	.-68     	; 0xeef8 <fgets+0x16>
    ef3c:	80 e0       	ldi	r24, 0x00	; 0
    ef3e:	90 e0       	ldi	r25, 0x00	; 0
    ef40:	cd b7       	in	r28, 0x3d	; 61
    ef42:	de b7       	in	r29, 0x3e	; 62
    ef44:	e8 e0       	ldi	r30, 0x08	; 8
    ef46:	0c 94 06 e6 	jmp	0x1cc0c	; 0x1cc0c <__epilogue_restores__+0x14>

0000ef4a <fputs>:
    ef4a:	0f 93       	push	r16
    ef4c:	1f 93       	push	r17
    ef4e:	cf 93       	push	r28
    ef50:	df 93       	push	r29
    ef52:	8b 01       	movw	r16, r22
    ef54:	ec 01       	movw	r28, r24
    ef56:	89 91       	ld	r24, Y+
    ef58:	88 23       	and	r24, r24
    ef5a:	41 f0       	breq	.+16     	; 0xef6c <fputs+0x22>
    ef5c:	b8 01       	movw	r22, r16
    ef5e:	90 e0       	ldi	r25, 0x00	; 0
    ef60:	5a df       	rcall	.-332    	; 0xee16 <fputc>
    ef62:	8f 3f       	cpi	r24, 0xFF	; 255
    ef64:	2f ef       	ldi	r18, 0xFF	; 255
    ef66:	92 07       	cpc	r25, r18
    ef68:	b1 f7       	brne	.-20     	; 0xef56 <fputs+0xc>
    ef6a:	02 c0       	rjmp	.+4      	; 0xef70 <fputs+0x26>
    ef6c:	80 e0       	ldi	r24, 0x00	; 0
    ef6e:	90 e0       	ldi	r25, 0x00	; 0
    ef70:	df 91       	pop	r29
    ef72:	cf 91       	pop	r28
    ef74:	1f 91       	pop	r17
    ef76:	0f 91       	pop	r16
    ef78:	08 95       	ret

0000ef7a <puts>:
    ef7a:	cf 93       	push	r28
    ef7c:	df 93       	push	r29
    ef7e:	ec 01       	movw	r28, r24
    ef80:	89 91       	ld	r24, Y+
    ef82:	60 91 bd 1b 	lds	r22, 0x1BBD	; 0x801bbd <__iob+0x2>
    ef86:	70 91 be 1b 	lds	r23, 0x1BBE	; 0x801bbe <__iob+0x3>
    ef8a:	88 23       	and	r24, r24
    ef8c:	39 f0       	breq	.+14     	; 0xef9c <puts+0x22>
    ef8e:	90 e0       	ldi	r25, 0x00	; 0
    ef90:	42 df       	rcall	.-380    	; 0xee16 <fputc>
    ef92:	8f 3f       	cpi	r24, 0xFF	; 255
    ef94:	2f ef       	ldi	r18, 0xFF	; 255
    ef96:	92 07       	cpc	r25, r18
    ef98:	99 f7       	brne	.-26     	; 0xef80 <puts+0x6>
    ef9a:	03 c0       	rjmp	.+6      	; 0xefa2 <puts+0x28>
    ef9c:	8a e0       	ldi	r24, 0x0A	; 10
    ef9e:	90 e0       	ldi	r25, 0x00	; 0
    efa0:	3a df       	rcall	.-396    	; 0xee16 <fputc>
    efa2:	df 91       	pop	r29
    efa4:	cf 91       	pop	r28
    efa6:	08 95       	ret

0000efa8 <fileno>:
    efa8:	00 97       	sbiw	r24, 0x00	; 0
    efaa:	39 f4       	brne	.+14     	; 0xefba <fileno+0x12>
    efac:	89 e0       	ldi	r24, 0x09	; 9
    efae:	90 e0       	ldi	r25, 0x00	; 0
    efb0:	90 93 ba 1b 	sts	0x1BBA, r25	; 0x801bba <errno+0x1>
    efb4:	80 93 b9 1b 	sts	0x1BB9, r24	; 0x801bb9 <errno>
    efb8:	0e c0       	rjmp	.+28     	; 0xefd6 <fileno+0x2e>
    efba:	eb eb       	ldi	r30, 0xBB	; 187
    efbc:	fb e1       	ldi	r31, 0x1B	; 27
    efbe:	20 e0       	ldi	r18, 0x00	; 0
    efc0:	30 e0       	ldi	r19, 0x00	; 0
    efc2:	41 91       	ld	r20, Z+
    efc4:	51 91       	ld	r21, Z+
    efc6:	84 17       	cp	r24, r20
    efc8:	95 07       	cpc	r25, r21
    efca:	41 f0       	breq	.+16     	; 0xefdc <fileno+0x34>
    efcc:	2f 5f       	subi	r18, 0xFF	; 255
    efce:	3f 4f       	sbci	r19, 0xFF	; 255
    efd0:	20 31       	cpi	r18, 0x10	; 16
    efd2:	31 05       	cpc	r19, r1
    efd4:	b1 f7       	brne	.-20     	; 0xefc2 <fileno+0x1a>
    efd6:	8f ef       	ldi	r24, 0xFF	; 255
    efd8:	9f ef       	ldi	r25, 0xFF	; 255
    efda:	08 95       	ret
    efdc:	c9 01       	movw	r24, r18
    efde:	08 95       	ret

0000efe0 <fileno_to_stream>:
    efe0:	80 31       	cpi	r24, 0x10	; 16
    efe2:	91 05       	cpc	r25, r1
    efe4:	48 f4       	brcc	.+18     	; 0xeff8 <fileno_to_stream+0x18>
    efe6:	88 0f       	add	r24, r24
    efe8:	99 1f       	adc	r25, r25
    efea:	fc 01       	movw	r30, r24
    efec:	e5 54       	subi	r30, 0x45	; 69
    efee:	f4 4e       	sbci	r31, 0xE4	; 228
    eff0:	80 81       	ld	r24, Z
    eff2:	91 81       	ldd	r25, Z+1	; 0x01
    eff4:	00 97       	sbiw	r24, 0x00	; 0
    eff6:	41 f4       	brne	.+16     	; 0xf008 <fileno_to_stream+0x28>
    eff8:	89 e0       	ldi	r24, 0x09	; 9
    effa:	90 e0       	ldi	r25, 0x00	; 0
    effc:	90 93 ba 1b 	sts	0x1BBA, r25	; 0x801bba <errno+0x1>
    f000:	80 93 b9 1b 	sts	0x1BB9, r24	; 0x801bb9 <errno>
    f004:	80 e0       	ldi	r24, 0x00	; 0
    f006:	90 e0       	ldi	r25, 0x00	; 0
    f008:	08 95       	ret

0000f00a <mctime>:
    f00a:	a4 e0       	ldi	r26, 0x04	; 4
    f00c:	b0 e0       	ldi	r27, 0x00	; 0
    f00e:	eb e0       	ldi	r30, 0x0B	; 11
    f010:	f8 e7       	ldi	r31, 0x78	; 120
    f012:	0c 94 f0 e5 	jmp	0x1cbe0	; 0x1cbe0 <__prologue_saves__+0x20>
    f016:	69 83       	std	Y+1, r22	; 0x01
    f018:	7a 83       	std	Y+2, r23	; 0x02
    f01a:	8b 83       	std	Y+3, r24	; 0x03
    f01c:	9c 83       	std	Y+4, r25	; 0x04
    f01e:	10 92 ba 1b 	sts	0x1BBA, r1	; 0x801bba <errno+0x1>
    f022:	10 92 b9 1b 	sts	0x1BB9, r1	; 0x801bb9 <errno>
    f026:	ce 01       	movw	r24, r28
    f028:	01 96       	adiw	r24, 0x01	; 1
    f02a:	0e 94 28 3e 	call	0x7c50	; 0x7c50 <ctime_gm>
    f02e:	fc 01       	movw	r30, r24
    f030:	01 90       	ld	r0, Z+
    f032:	00 20       	and	r0, r0
    f034:	e9 f7       	brne	.-6      	; 0xf030 <mctime+0x26>
    f036:	31 97       	sbiw	r30, 0x01	; 1
    f038:	e8 1b       	sub	r30, r24
    f03a:	f9 0b       	sbc	r31, r25
    f03c:	39 f0       	breq	.+14     	; 0xf04c <mctime+0x42>
    f03e:	31 97       	sbiw	r30, 0x01	; 1
    f040:	e8 0f       	add	r30, r24
    f042:	f9 1f       	adc	r31, r25
    f044:	20 81       	ld	r18, Z
    f046:	2a 30       	cpi	r18, 0x0A	; 10
    f048:	09 f4       	brne	.+2      	; 0xf04c <mctime+0x42>
    f04a:	10 82       	st	Z, r1
    f04c:	24 96       	adiw	r28, 0x04	; 4
    f04e:	e2 e0       	ldi	r30, 0x02	; 2
    f050:	0c 94 0c e6 	jmp	0x1cc18	; 0x1cc18 <__epilogue_restores__+0x20>

0000f054 <basename>:
    f054:	00 97       	sbiw	r24, 0x00	; 0
    f056:	49 f0       	breq	.+18     	; 0xf06a <basename+0x16>
    f058:	fc 01       	movw	r30, r24
    f05a:	21 91       	ld	r18, Z+
    f05c:	22 23       	and	r18, r18
    f05e:	21 f0       	breq	.+8      	; 0xf068 <basename+0x14>
    f060:	2f 32       	cpi	r18, 0x2F	; 47
    f062:	d9 f7       	brne	.-10     	; 0xf05a <basename+0x6>
    f064:	cf 01       	movw	r24, r30
    f066:	f9 cf       	rjmp	.-14     	; 0xf05a <basename+0x6>
    f068:	08 95       	ret
    f06a:	87 e1       	ldi	r24, 0x17	; 23
    f06c:	97 e1       	ldi	r25, 0x17	; 23
    f06e:	08 95       	ret

0000f070 <chdir>:
    f070:	10 92 ba 1b 	sts	0x1BBA, r1	; 0x801bba <errno+0x1>
    f074:	10 92 b9 1b 	sts	0x1BB9, r1	; 0x801bb9 <errno>
    f078:	0e 94 83 60 	call	0xc106	; 0xc106 <f_chdir>
    f07c:	00 97       	sbiw	r24, 0x00	; 0
    f07e:	a1 f0       	breq	.+40     	; 0xf0a8 <chdir+0x38>
    f080:	84 31       	cpi	r24, 0x14	; 20
    f082:	91 05       	cpc	r25, r1
    f084:	40 f4       	brcc	.+16     	; 0xf096 <chdir+0x26>
    f086:	fc 01       	movw	r30, r24
    f088:	e0 5f       	subi	r30, 0xF0	; 240
    f08a:	f8 4f       	sbci	r31, 0xF8	; 248
    f08c:	80 81       	ld	r24, Z
    f08e:	08 2e       	mov	r0, r24
    f090:	00 0c       	add	r0, r0
    f092:	99 0b       	sbc	r25, r25
    f094:	02 c0       	rjmp	.+4      	; 0xf09a <chdir+0x2a>
    f096:	83 e2       	ldi	r24, 0x23	; 35
    f098:	90 e0       	ldi	r25, 0x00	; 0
    f09a:	90 93 ba 1b 	sts	0x1BBA, r25	; 0x801bba <errno+0x1>
    f09e:	80 93 b9 1b 	sts	0x1BB9, r24	; 0x801bb9 <errno>
    f0a2:	8f ef       	ldi	r24, 0xFF	; 255
    f0a4:	9f ef       	ldi	r25, 0xFF	; 255
    f0a6:	08 95       	ret
    f0a8:	80 e0       	ldi	r24, 0x00	; 0
    f0aa:	90 e0       	ldi	r25, 0x00	; 0
    f0ac:	08 95       	ret

0000f0ae <chmod>:
    f0ae:	10 92 ba 1b 	sts	0x1BBA, r1	; 0x801bba <errno+0x1>
    f0b2:	10 92 b9 1b 	sts	0x1BB9, r1	; 0x801bb9 <errno>
    f0b6:	42 79       	andi	r20, 0x92	; 146
    f0b8:	55 27       	eor	r21, r21
    f0ba:	66 27       	eor	r22, r22
    f0bc:	77 27       	eor	r23, r23
    f0be:	45 2b       	or	r20, r21
    f0c0:	46 2b       	or	r20, r22
    f0c2:	47 2b       	or	r20, r23
    f0c4:	19 f0       	breq	.+6      	; 0xf0cc <chmod+0x1e>
    f0c6:	80 e0       	ldi	r24, 0x00	; 0
    f0c8:	90 e0       	ldi	r25, 0x00	; 0
    f0ca:	08 95       	ret
    f0cc:	41 e0       	ldi	r20, 0x01	; 1
    f0ce:	61 e0       	ldi	r22, 0x01	; 1
    f0d0:	0e 94 82 69 	call	0xd304	; 0xd304 <f_chmod>
    f0d4:	00 97       	sbiw	r24, 0x00	; 0
    f0d6:	b9 f3       	breq	.-18     	; 0xf0c6 <chmod+0x18>
    f0d8:	84 31       	cpi	r24, 0x14	; 20
    f0da:	91 05       	cpc	r25, r1
    f0dc:	40 f4       	brcc	.+16     	; 0xf0ee <chmod+0x40>
    f0de:	fc 01       	movw	r30, r24
    f0e0:	e0 5f       	subi	r30, 0xF0	; 240
    f0e2:	f8 4f       	sbci	r31, 0xF8	; 248
    f0e4:	80 81       	ld	r24, Z
    f0e6:	08 2e       	mov	r0, r24
    f0e8:	00 0c       	add	r0, r0
    f0ea:	99 0b       	sbc	r25, r25
    f0ec:	02 c0       	rjmp	.+4      	; 0xf0f2 <chmod+0x44>
    f0ee:	83 e2       	ldi	r24, 0x23	; 35
    f0f0:	90 e0       	ldi	r25, 0x00	; 0
    f0f2:	90 93 ba 1b 	sts	0x1BBA, r25	; 0x801bba <errno+0x1>
    f0f6:	80 93 b9 1b 	sts	0x1BB9, r24	; 0x801bb9 <errno>
    f0fa:	8f ef       	ldi	r24, 0xFF	; 255
    f0fc:	9f ef       	ldi	r25, 0xFF	; 255
    f0fe:	08 95       	ret

0000f100 <getcwd>:
    f100:	cf 93       	push	r28
    f102:	df 93       	push	r29
    f104:	d8 2f       	mov	r29, r24
    f106:	c9 2f       	mov	r28, r25
    f108:	10 92 ba 1b 	sts	0x1BBA, r1	; 0x801bba <errno+0x1>
    f10c:	10 92 b9 1b 	sts	0x1BB9, r1	; 0x801bb9 <errno>
    f110:	0e 94 de 60 	call	0xc1bc	; 0xc1bc <f_getcwd>
    f114:	00 97       	sbiw	r24, 0x00	; 0
    f116:	a1 f0       	breq	.+40     	; 0xf140 <getcwd+0x40>
    f118:	84 31       	cpi	r24, 0x14	; 20
    f11a:	91 05       	cpc	r25, r1
    f11c:	40 f4       	brcc	.+16     	; 0xf12e <getcwd+0x2e>
    f11e:	fc 01       	movw	r30, r24
    f120:	e0 5f       	subi	r30, 0xF0	; 240
    f122:	f8 4f       	sbci	r31, 0xF8	; 248
    f124:	80 81       	ld	r24, Z
    f126:	08 2e       	mov	r0, r24
    f128:	00 0c       	add	r0, r0
    f12a:	99 0b       	sbc	r25, r25
    f12c:	02 c0       	rjmp	.+4      	; 0xf132 <getcwd+0x32>
    f12e:	83 e2       	ldi	r24, 0x23	; 35
    f130:	90 e0       	ldi	r25, 0x00	; 0
    f132:	90 93 ba 1b 	sts	0x1BBA, r25	; 0x801bba <errno+0x1>
    f136:	80 93 b9 1b 	sts	0x1BB9, r24	; 0x801bb9 <errno>
    f13a:	80 e0       	ldi	r24, 0x00	; 0
    f13c:	90 e0       	ldi	r25, 0x00	; 0
    f13e:	02 c0       	rjmp	.+4      	; 0xf144 <getcwd+0x44>
    f140:	8d 2f       	mov	r24, r29
    f142:	9c 2f       	mov	r25, r28
    f144:	df 91       	pop	r29
    f146:	cf 91       	pop	r28
    f148:	08 95       	ret

0000f14a <mkdir>:
    f14a:	cf 93       	push	r28
    f14c:	df 93       	push	r29
    f14e:	ec 01       	movw	r28, r24
    f150:	10 92 ba 1b 	sts	0x1BBA, r1	; 0x801bba <errno+0x1>
    f154:	10 92 b9 1b 	sts	0x1BB9, r1	; 0x801bb9 <errno>
    f158:	41 15       	cp	r20, r1
    f15a:	51 05       	cpc	r21, r1
    f15c:	61 05       	cpc	r22, r1
    f15e:	71 05       	cpc	r23, r1
    f160:	41 f4       	brne	.+16     	; 0xf172 <mkdir+0x28>
    f162:	ce 01       	movw	r24, r28
    f164:	0e 94 7d 67 	call	0xcefa	; 0xcefa <f_mkdir>
    f168:	00 97       	sbiw	r24, 0x00	; 0
    f16a:	39 f4       	brne	.+14     	; 0xf17a <mkdir+0x30>
    f16c:	80 e0       	ldi	r24, 0x00	; 0
    f16e:	90 e0       	ldi	r25, 0x00	; 0
    f170:	17 c0       	rjmp	.+46     	; 0xf1a0 <mkdir+0x56>
    f172:	9d df       	rcall	.-198    	; 0xf0ae <chmod>
    f174:	89 2b       	or	r24, r25
    f176:	a9 f3       	breq	.-22     	; 0xf162 <mkdir+0x18>
    f178:	11 c0       	rjmp	.+34     	; 0xf19c <mkdir+0x52>
    f17a:	84 31       	cpi	r24, 0x14	; 20
    f17c:	91 05       	cpc	r25, r1
    f17e:	40 f4       	brcc	.+16     	; 0xf190 <mkdir+0x46>
    f180:	fc 01       	movw	r30, r24
    f182:	e0 5f       	subi	r30, 0xF0	; 240
    f184:	f8 4f       	sbci	r31, 0xF8	; 248
    f186:	80 81       	ld	r24, Z
    f188:	08 2e       	mov	r0, r24
    f18a:	00 0c       	add	r0, r0
    f18c:	99 0b       	sbc	r25, r25
    f18e:	02 c0       	rjmp	.+4      	; 0xf194 <mkdir+0x4a>
    f190:	83 e2       	ldi	r24, 0x23	; 35
    f192:	90 e0       	ldi	r25, 0x00	; 0
    f194:	90 93 ba 1b 	sts	0x1BBA, r25	; 0x801bba <errno+0x1>
    f198:	80 93 b9 1b 	sts	0x1BB9, r24	; 0x801bb9 <errno>
    f19c:	8f ef       	ldi	r24, 0xFF	; 255
    f19e:	9f ef       	ldi	r25, 0xFF	; 255
    f1a0:	df 91       	pop	r29
    f1a2:	cf 91       	pop	r28
    f1a4:	08 95       	ret

0000f1a6 <rename>:
    f1a6:	10 92 ba 1b 	sts	0x1BBA, r1	; 0x801bba <errno+0x1>
    f1aa:	10 92 b9 1b 	sts	0x1BB9, r1	; 0x801bb9 <errno>
    f1ae:	0e 94 6d 68 	call	0xd0da	; 0xd0da <f_rename>
    f1b2:	00 97       	sbiw	r24, 0x00	; 0
    f1b4:	a1 f0       	breq	.+40     	; 0xf1de <rename+0x38>
    f1b6:	84 31       	cpi	r24, 0x14	; 20
    f1b8:	91 05       	cpc	r25, r1
    f1ba:	40 f4       	brcc	.+16     	; 0xf1cc <rename+0x26>
    f1bc:	fc 01       	movw	r30, r24
    f1be:	e0 5f       	subi	r30, 0xF0	; 240
    f1c0:	f8 4f       	sbci	r31, 0xF8	; 248
    f1c2:	80 81       	ld	r24, Z
    f1c4:	08 2e       	mov	r0, r24
    f1c6:	00 0c       	add	r0, r0
    f1c8:	99 0b       	sbc	r25, r25
    f1ca:	02 c0       	rjmp	.+4      	; 0xf1d0 <rename+0x2a>
    f1cc:	83 e2       	ldi	r24, 0x23	; 35
    f1ce:	90 e0       	ldi	r25, 0x00	; 0
    f1d0:	90 93 ba 1b 	sts	0x1BBA, r25	; 0x801bba <errno+0x1>
    f1d4:	80 93 b9 1b 	sts	0x1BB9, r24	; 0x801bb9 <errno>
    f1d8:	8f ef       	ldi	r24, 0xFF	; 255
    f1da:	9f ef       	ldi	r25, 0xFF	; 255
    f1dc:	08 95       	ret
    f1de:	80 e0       	ldi	r24, 0x00	; 0
    f1e0:	90 e0       	ldi	r25, 0x00	; 0
    f1e2:	08 95       	ret

0000f1e4 <unlink>:
    f1e4:	10 92 ba 1b 	sts	0x1BBA, r1	; 0x801bba <errno+0x1>
    f1e8:	10 92 b9 1b 	sts	0x1BB9, r1	; 0x801bb9 <errno>
    f1ec:	0e 94 d6 66 	call	0xcdac	; 0xcdac <f_unlink>
    f1f0:	00 97       	sbiw	r24, 0x00	; 0
    f1f2:	a1 f0       	breq	.+40     	; 0xf21c <unlink+0x38>
    f1f4:	84 31       	cpi	r24, 0x14	; 20
    f1f6:	91 05       	cpc	r25, r1
    f1f8:	40 f4       	brcc	.+16     	; 0xf20a <unlink+0x26>
    f1fa:	fc 01       	movw	r30, r24
    f1fc:	e0 5f       	subi	r30, 0xF0	; 240
    f1fe:	f8 4f       	sbci	r31, 0xF8	; 248
    f200:	80 81       	ld	r24, Z
    f202:	08 2e       	mov	r0, r24
    f204:	00 0c       	add	r0, r0
    f206:	99 0b       	sbc	r25, r25
    f208:	02 c0       	rjmp	.+4      	; 0xf20e <unlink+0x2a>
    f20a:	83 e2       	ldi	r24, 0x23	; 35
    f20c:	90 e0       	ldi	r25, 0x00	; 0
    f20e:	90 93 ba 1b 	sts	0x1BBA, r25	; 0x801bba <errno+0x1>
    f212:	80 93 b9 1b 	sts	0x1BB9, r24	; 0x801bb9 <errno>
    f216:	8f ef       	ldi	r24, 0xFF	; 255
    f218:	9f ef       	ldi	r25, 0xFF	; 255
    f21a:	08 95       	ret
    f21c:	80 e0       	ldi	r24, 0x00	; 0
    f21e:	90 e0       	ldi	r25, 0x00	; 0
    f220:	08 95       	ret

0000f222 <rmdir>:
    f222:	e0 cf       	rjmp	.-64     	; 0xf1e4 <unlink>
    f224:	08 95       	ret

0000f226 <closedir>:
    f226:	0e 94 60 65 	call	0xcac0	; 0xcac0 <f_closedir>
    f22a:	00 97       	sbiw	r24, 0x00	; 0
    f22c:	a1 f0       	breq	.+40     	; 0xf256 <closedir+0x30>
    f22e:	84 31       	cpi	r24, 0x14	; 20
    f230:	91 05       	cpc	r25, r1
    f232:	40 f4       	brcc	.+16     	; 0xf244 <closedir+0x1e>
    f234:	fc 01       	movw	r30, r24
    f236:	e0 5f       	subi	r30, 0xF0	; 240
    f238:	f8 4f       	sbci	r31, 0xF8	; 248
    f23a:	80 81       	ld	r24, Z
    f23c:	08 2e       	mov	r0, r24
    f23e:	00 0c       	add	r0, r0
    f240:	99 0b       	sbc	r25, r25
    f242:	02 c0       	rjmp	.+4      	; 0xf248 <closedir+0x22>
    f244:	83 e2       	ldi	r24, 0x23	; 35
    f246:	90 e0       	ldi	r25, 0x00	; 0
    f248:	90 93 ba 1b 	sts	0x1BBA, r25	; 0x801bba <errno+0x1>
    f24c:	80 93 b9 1b 	sts	0x1BB9, r24	; 0x801bb9 <errno>
    f250:	8f ef       	ldi	r24, 0xFF	; 255
    f252:	9f ef       	ldi	r25, 0xFF	; 255
    f254:	08 95       	ret
    f256:	80 e0       	ldi	r24, 0x00	; 0
    f258:	90 e0       	ldi	r25, 0x00	; 0
    f25a:	08 95       	ret

0000f25c <opendir>:
    f25c:	bc 01       	movw	r22, r24
    f25e:	81 e3       	ldi	r24, 0x31	; 49
    f260:	98 e1       	ldi	r25, 0x18	; 24
    f262:	0e 94 ef 64 	call	0xc9de	; 0xc9de <f_opendir>
    f266:	00 97       	sbiw	r24, 0x00	; 0
    f268:	a1 f0       	breq	.+40     	; 0xf292 <opendir+0x36>
    f26a:	84 31       	cpi	r24, 0x14	; 20
    f26c:	91 05       	cpc	r25, r1
    f26e:	40 f4       	brcc	.+16     	; 0xf280 <opendir+0x24>
    f270:	fc 01       	movw	r30, r24
    f272:	e0 5f       	subi	r30, 0xF0	; 240
    f274:	f8 4f       	sbci	r31, 0xF8	; 248
    f276:	80 81       	ld	r24, Z
    f278:	08 2e       	mov	r0, r24
    f27a:	00 0c       	add	r0, r0
    f27c:	99 0b       	sbc	r25, r25
    f27e:	02 c0       	rjmp	.+4      	; 0xf284 <opendir+0x28>
    f280:	83 e2       	ldi	r24, 0x23	; 35
    f282:	90 e0       	ldi	r25, 0x00	; 0
    f284:	90 93 ba 1b 	sts	0x1BBA, r25	; 0x801bba <errno+0x1>
    f288:	80 93 b9 1b 	sts	0x1BB9, r24	; 0x801bb9 <errno>
    f28c:	80 e0       	ldi	r24, 0x00	; 0
    f28e:	90 e0       	ldi	r25, 0x00	; 0
    f290:	08 95       	ret
    f292:	81 e3       	ldi	r24, 0x31	; 49
    f294:	98 e1       	ldi	r25, 0x18	; 24
    f296:	08 95       	ret

0000f298 <readdir>:
    f298:	a6 e1       	ldi	r26, 0x16	; 22
    f29a:	b1 e0       	ldi	r27, 0x01	; 1
    f29c:	e2 e5       	ldi	r30, 0x52	; 82
    f29e:	f9 e7       	ldi	r31, 0x79	; 121
    f2a0:	0c 94 ee e5 	jmp	0x1cbdc	; 0x1cbdc <__prologue_saves__+0x1c>
    f2a4:	10 92 24 18 	sts	0x1824, r1	; 0x801824 <_de>
    f2a8:	be 01       	movw	r22, r28
    f2aa:	6f 5f       	subi	r22, 0xFF	; 255
    f2ac:	7f 4f       	sbci	r23, 0xFF	; 255
    f2ae:	0e 94 75 65 	call	0xcaea	; 0xcaea <f_readdir>
    f2b2:	00 97       	sbiw	r24, 0x00	; 0
    f2b4:	a1 f0       	breq	.+40     	; 0xf2de <readdir+0x46>
    f2b6:	84 31       	cpi	r24, 0x14	; 20
    f2b8:	91 05       	cpc	r25, r1
    f2ba:	40 f4       	brcc	.+16     	; 0xf2cc <readdir+0x34>
    f2bc:	fc 01       	movw	r30, r24
    f2be:	e0 5f       	subi	r30, 0xF0	; 240
    f2c0:	f8 4f       	sbci	r31, 0xF8	; 248
    f2c2:	80 81       	ld	r24, Z
    f2c4:	08 2e       	mov	r0, r24
    f2c6:	00 0c       	add	r0, r0
    f2c8:	99 0b       	sbc	r25, r25
    f2ca:	02 c0       	rjmp	.+4      	; 0xf2d0 <readdir+0x38>
    f2cc:	83 e2       	ldi	r24, 0x23	; 35
    f2ce:	90 e0       	ldi	r25, 0x00	; 0
    f2d0:	90 93 ba 1b 	sts	0x1BBA, r25	; 0x801bba <errno+0x1>
    f2d4:	80 93 b9 1b 	sts	0x1BB9, r24	; 0x801bb9 <errno>
    f2d8:	80 e0       	ldi	r24, 0x00	; 0
    f2da:	90 e0       	ldi	r25, 0x00	; 0
    f2dc:	16 c0       	rjmp	.+44     	; 0xf30a <readdir+0x72>
    f2de:	be 01       	movw	r22, r28
    f2e0:	69 5e       	subi	r22, 0xE9	; 233
    f2e2:	7f 4f       	sbci	r23, 0xFF	; 255
    f2e4:	fb 01       	movw	r30, r22
    f2e6:	01 90       	ld	r0, Z+
    f2e8:	00 20       	and	r0, r0
    f2ea:	e9 f7       	brne	.-6      	; 0xf2e6 <readdir+0x4e>
    f2ec:	31 97       	sbiw	r30, 0x01	; 1
    f2ee:	8f 01       	movw	r16, r30
    f2f0:	06 1b       	sub	r16, r22
    f2f2:	17 0b       	sbc	r17, r23
    f2f4:	a8 01       	movw	r20, r16
    f2f6:	84 e2       	ldi	r24, 0x24	; 36
    f2f8:	98 e1       	ldi	r25, 0x18	; 24
    f2fa:	0e 94 5e 32 	call	0x64bc	; 0x64bc <strncpy>
    f2fe:	f8 01       	movw	r30, r16
    f300:	ec 5d       	subi	r30, 0xDC	; 220
    f302:	f7 4e       	sbci	r31, 0xE7	; 231
    f304:	10 82       	st	Z, r1
    f306:	84 e2       	ldi	r24, 0x24	; 36
    f308:	98 e1       	ldi	r25, 0x18	; 24
    f30a:	ca 5e       	subi	r28, 0xEA	; 234
    f30c:	de 4f       	sbci	r29, 0xFE	; 254
    f30e:	e4 e0       	ldi	r30, 0x04	; 4
    f310:	0c 94 0a e6 	jmp	0x1cc14	; 0x1cc14 <__epilogue_restores__+0x1c>

0000f314 <perror>:
    f314:	e0 91 b9 1b 	lds	r30, 0x1BB9	; 0x801bb9 <errno>
    f318:	f0 91 ba 1b 	lds	r31, 0x1BBA	; 0x801bba <errno+0x1>
    f31c:	e3 32       	cpi	r30, 0x23	; 35
    f31e:	f1 05       	cpc	r31, r1
    f320:	38 f4       	brcc	.+14     	; 0xf330 <perror+0x1c>
    f322:	ee 0f       	add	r30, r30
    f324:	ff 1f       	adc	r31, r31
    f326:	e3 5c       	subi	r30, 0xC3	; 195
    f328:	fe 4f       	sbci	r31, 0xFE	; 254
    f32a:	20 81       	ld	r18, Z
    f32c:	31 81       	ldd	r19, Z+1	; 0x01
    f32e:	04 c0       	rjmp	.+8      	; 0xf338 <perror+0x24>
    f330:	20 91 83 01 	lds	r18, 0x0183	; 0x800183 <sys_errlist+0x46>
    f334:	30 91 84 01 	lds	r19, 0x0184	; 0x800184 <sys_errlist+0x47>
    f338:	00 97       	sbiw	r24, 0x00	; 0
    f33a:	c1 f0       	breq	.+48     	; 0xf36c <perror+0x58>
    f33c:	fc 01       	movw	r30, r24
    f33e:	40 81       	ld	r20, Z
    f340:	44 23       	and	r20, r20
    f342:	a1 f0       	breq	.+40     	; 0xf36c <perror+0x58>
    f344:	3f 93       	push	r19
    f346:	2f 93       	push	r18
    f348:	9f 93       	push	r25
    f34a:	8f 93       	push	r24
    f34c:	87 ed       	ldi	r24, 0xD7	; 215
    f34e:	9b e0       	ldi	r25, 0x0B	; 11
    f350:	1f 92       	push	r1
    f352:	9f 93       	push	r25
    f354:	8f 93       	push	r24
    f356:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    f35a:	8d b7       	in	r24, 0x3d	; 61
    f35c:	9e b7       	in	r25, 0x3e	; 62
    f35e:	07 96       	adiw	r24, 0x07	; 7
    f360:	0f b6       	in	r0, 0x3f	; 63
    f362:	f8 94       	cli
    f364:	9e bf       	out	0x3e, r25	; 62
    f366:	0f be       	out	0x3f, r0	; 63
    f368:	8d bf       	out	0x3d, r24	; 61
    f36a:	08 95       	ret
    f36c:	3f 93       	push	r19
    f36e:	2f 93       	push	r18
    f370:	83 ed       	ldi	r24, 0xD3	; 211
    f372:	9b e0       	ldi	r25, 0x0B	; 11
    f374:	1f 92       	push	r1
    f376:	9f 93       	push	r25
    f378:	8f 93       	push	r24
    f37a:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    f37e:	0f 90       	pop	r0
    f380:	0f 90       	pop	r0
    f382:	0f 90       	pop	r0
    f384:	0f 90       	pop	r0
    f386:	0f 90       	pop	r0
    f388:	08 95       	ret

0000f38a <fdevopen>:
    f38a:	0f 93       	push	r16
    f38c:	1f 93       	push	r17
    f38e:	cf 93       	push	r28
    f390:	df 93       	push	r29
    f392:	00 97       	sbiw	r24, 0x00	; 0
    f394:	31 f4       	brne	.+12     	; 0xf3a2 <fdevopen+0x18>
    f396:	61 15       	cp	r22, r1
    f398:	71 05       	cpc	r23, r1
    f39a:	19 f4       	brne	.+6      	; 0xf3a2 <fdevopen+0x18>
    f39c:	80 e0       	ldi	r24, 0x00	; 0
    f39e:	90 e0       	ldi	r25, 0x00	; 0
    f3a0:	3a c0       	rjmp	.+116    	; 0xf416 <fdevopen+0x8c>
    f3a2:	8b 01       	movw	r16, r22
    f3a4:	ec 01       	movw	r28, r24
    f3a6:	6e e0       	ldi	r22, 0x0E	; 14
    f3a8:	70 e0       	ldi	r23, 0x00	; 0
    f3aa:	81 e0       	ldi	r24, 0x01	; 1
    f3ac:	90 e0       	ldi	r25, 0x00	; 0
    f3ae:	0e 94 86 29 	call	0x530c	; 0x530c <safecalloc>
    f3b2:	fc 01       	movw	r30, r24
    f3b4:	89 2b       	or	r24, r25
    f3b6:	91 f3       	breq	.-28     	; 0xf39c <fdevopen+0x12>
    f3b8:	80 e8       	ldi	r24, 0x80	; 128
    f3ba:	83 83       	std	Z+3, r24	; 0x03
    f3bc:	01 15       	cp	r16, r1
    f3be:	11 05       	cpc	r17, r1
    f3c0:	71 f0       	breq	.+28     	; 0xf3de <fdevopen+0x54>
    f3c2:	13 87       	std	Z+11, r17	; 0x0b
    f3c4:	02 87       	std	Z+10, r16	; 0x0a
    f3c6:	81 e8       	ldi	r24, 0x81	; 129
    f3c8:	83 83       	std	Z+3, r24	; 0x03
    f3ca:	80 91 bb 1b 	lds	r24, 0x1BBB	; 0x801bbb <__iob>
    f3ce:	90 91 bc 1b 	lds	r25, 0x1BBC	; 0x801bbc <__iob+0x1>
    f3d2:	89 2b       	or	r24, r25
    f3d4:	21 f4       	brne	.+8      	; 0xf3de <fdevopen+0x54>
    f3d6:	f0 93 bc 1b 	sts	0x1BBC, r31	; 0x801bbc <__iob+0x1>
    f3da:	e0 93 bb 1b 	sts	0x1BBB, r30	; 0x801bbb <__iob>
    f3de:	20 97       	sbiw	r28, 0x00	; 0
    f3e0:	c9 f0       	breq	.+50     	; 0xf414 <fdevopen+0x8a>
    f3e2:	d1 87       	std	Z+9, r29	; 0x09
    f3e4:	c0 87       	std	Z+8, r28	; 0x08
    f3e6:	83 81       	ldd	r24, Z+3	; 0x03
    f3e8:	82 60       	ori	r24, 0x02	; 2
    f3ea:	83 83       	std	Z+3, r24	; 0x03
    f3ec:	80 91 bd 1b 	lds	r24, 0x1BBD	; 0x801bbd <__iob+0x2>
    f3f0:	90 91 be 1b 	lds	r25, 0x1BBE	; 0x801bbe <__iob+0x3>
    f3f4:	89 2b       	or	r24, r25
    f3f6:	21 f4       	brne	.+8      	; 0xf400 <fdevopen+0x76>
    f3f8:	f0 93 be 1b 	sts	0x1BBE, r31	; 0x801bbe <__iob+0x3>
    f3fc:	e0 93 bd 1b 	sts	0x1BBD, r30	; 0x801bbd <__iob+0x2>
    f400:	80 91 bf 1b 	lds	r24, 0x1BBF	; 0x801bbf <__iob+0x4>
    f404:	90 91 c0 1b 	lds	r25, 0x1BC0	; 0x801bc0 <__iob+0x5>
    f408:	89 2b       	or	r24, r25
    f40a:	21 f4       	brne	.+8      	; 0xf414 <fdevopen+0x8a>
    f40c:	f0 93 c0 1b 	sts	0x1BC0, r31	; 0x801bc0 <__iob+0x5>
    f410:	e0 93 bf 1b 	sts	0x1BBF, r30	; 0x801bbf <__iob+0x4>
    f414:	cf 01       	movw	r24, r30
    f416:	df 91       	pop	r29
    f418:	cf 91       	pop	r28
    f41a:	1f 91       	pop	r17
    f41c:	0f 91       	pop	r16
    f41e:	08 95       	ret

0000f420 <fat_time_to_unix>:
    f420:	a6 e1       	ldi	r26, 0x16	; 22
    f422:	b0 e0       	ldi	r27, 0x00	; 0
    f424:	e6 e1       	ldi	r30, 0x16	; 22
    f426:	fa e7       	ldi	r31, 0x7A	; 122
    f428:	0c 94 f0 e5 	jmp	0x1cbe0	; 0x1cbe0 <__prologue_saves__+0x20>
    f42c:	fe 01       	movw	r30, r28
    f42e:	31 96       	adiw	r30, 0x01	; 1
    f430:	26 e1       	ldi	r18, 0x16	; 22
    f432:	df 01       	movw	r26, r30
    f434:	1d 92       	st	X+, r1
    f436:	2a 95       	dec	r18
    f438:	e9 f7       	brne	.-6      	; 0xf434 <fat_time_to_unix+0x14>
    f43a:	9b 01       	movw	r18, r22
    f43c:	22 0f       	add	r18, r18
    f43e:	33 1f       	adc	r19, r19
    f440:	2e 73       	andi	r18, 0x3E	; 62
    f442:	33 27       	eor	r19, r19
    f444:	3a 83       	std	Y+2, r19	; 0x02
    f446:	29 83       	std	Y+1, r18	; 0x01
    f448:	9b 01       	movw	r18, r22
    f44a:	55 e0       	ldi	r21, 0x05	; 5
    f44c:	36 95       	lsr	r19
    f44e:	27 95       	ror	r18
    f450:	5a 95       	dec	r21
    f452:	e1 f7       	brne	.-8      	; 0xf44c <fat_time_to_unix+0x2c>
    f454:	2f 73       	andi	r18, 0x3F	; 63
    f456:	33 27       	eor	r19, r19
    f458:	3c 83       	std	Y+4, r19	; 0x04
    f45a:	2b 83       	std	Y+3, r18	; 0x03
    f45c:	27 2f       	mov	r18, r23
    f45e:	26 95       	lsr	r18
    f460:	26 95       	lsr	r18
    f462:	26 95       	lsr	r18
    f464:	2d 83       	std	Y+5, r18	; 0x05
    f466:	1e 82       	std	Y+6, r1	; 0x06
    f468:	9c 01       	movw	r18, r24
    f46a:	2f 71       	andi	r18, 0x1F	; 31
    f46c:	33 27       	eor	r19, r19
    f46e:	38 87       	std	Y+8, r19	; 0x08
    f470:	2f 83       	std	Y+7, r18	; 0x07
    f472:	9c 01       	movw	r18, r24
    f474:	65 e0       	ldi	r22, 0x05	; 5
    f476:	36 95       	lsr	r19
    f478:	27 95       	ror	r18
    f47a:	6a 95       	dec	r22
    f47c:	e1 f7       	brne	.-8      	; 0xf476 <fat_time_to_unix+0x56>
    f47e:	2f 70       	andi	r18, 0x0F	; 15
    f480:	33 27       	eor	r19, r19
    f482:	21 50       	subi	r18, 0x01	; 1
    f484:	31 09       	sbc	r19, r1
    f486:	3a 87       	std	Y+10, r19	; 0x0a
    f488:	29 87       	std	Y+9, r18	; 0x09
    f48a:	9c 01       	movw	r18, r24
    f48c:	23 2f       	mov	r18, r19
    f48e:	33 27       	eor	r19, r19
    f490:	26 95       	lsr	r18
    f492:	20 5b       	subi	r18, 0xB0	; 176
    f494:	3f 4f       	sbci	r19, 0xFF	; 255
    f496:	3c 87       	std	Y+12, r19	; 0x0c
    f498:	2b 87       	std	Y+11, r18	; 0x0b
    f49a:	cf 01       	movw	r24, r30
    f49c:	0e 94 7c 3b 	call	0x76f8	; 0x76f8 <timegm>
    f4a0:	66 96       	adiw	r28, 0x16	; 22
    f4a2:	e2 e0       	ldi	r30, 0x02	; 2
    f4a4:	0c 94 0c e6 	jmp	0x1cc18	; 0x1cc18 <__epilogue_restores__+0x20>

0000f4a8 <stat>:
    f4a8:	a6 e1       	ldi	r26, 0x16	; 22
    f4aa:	b1 e0       	ldi	r27, 0x01	; 1
    f4ac:	ea e5       	ldi	r30, 0x5A	; 90
    f4ae:	fa e7       	ldi	r31, 0x7A	; 122
    f4b0:	0c 94 ec e5 	jmp	0x1cbd8	; 0x1cbd8 <__prologue_saves__+0x18>
    f4b4:	7c 01       	movw	r14, r24
    f4b6:	8b 01       	movw	r16, r22
    f4b8:	10 92 ba 1b 	sts	0x1BBA, r1	; 0x801bba <errno+0x1>
    f4bc:	10 92 b9 1b 	sts	0x1BB9, r1	; 0x801bb9 <errno>
    f4c0:	68 e3       	ldi	r22, 0x38	; 56
    f4c2:	78 e0       	ldi	r23, 0x08	; 8
    f4c4:	0e 94 c7 32 	call	0x658e	; 0x658e <strcmp>
    f4c8:	89 2b       	or	r24, r25
    f4ca:	39 f0       	breq	.+14     	; 0xf4da <stat+0x32>
    f4cc:	66 e4       	ldi	r22, 0x46	; 70
    f4ce:	72 e1       	ldi	r23, 0x12	; 18
    f4d0:	c7 01       	movw	r24, r14
    f4d2:	0e 94 c7 32 	call	0x658e	; 0x658e <strcmp>
    f4d6:	89 2b       	or	r24, r25
    f4d8:	d1 f4       	brne	.+52     	; 0xf50e <stat+0x66>
    f4da:	f8 01       	movw	r30, r16
    f4dc:	14 a2       	std	Z+36, r1	; 0x24
    f4de:	15 a2       	std	Z+37, r1	; 0x25
    f4e0:	16 a2       	std	Z+38, r1	; 0x26
    f4e2:	17 a2       	std	Z+39, r1	; 0x27
    f4e4:	10 a6       	std	Z+40, r1	; 0x28
    f4e6:	11 a6       	std	Z+41, r1	; 0x29
    f4e8:	12 a6       	std	Z+42, r1	; 0x2a
    f4ea:	13 a6       	std	Z+43, r1	; 0x2b
    f4ec:	14 a6       	std	Z+44, r1	; 0x2c
    f4ee:	15 a6       	std	Z+45, r1	; 0x2d
    f4f0:	16 a6       	std	Z+46, r1	; 0x2e
    f4f2:	17 a6       	std	Z+47, r1	; 0x2f
    f4f4:	11 8a       	std	Z+17, r1	; 0x11
    f4f6:	10 8a       	std	Z+16, r1	; 0x10
    f4f8:	13 8a       	std	Z+19, r1	; 0x13
    f4fa:	12 8a       	std	Z+18, r1	; 0x12
    f4fc:	10 8e       	std	Z+24, r1	; 0x18
    f4fe:	11 8e       	std	Z+25, r1	; 0x19
    f500:	12 8e       	std	Z+26, r1	; 0x1a
    f502:	13 8e       	std	Z+27, r1	; 0x1b
    f504:	80 e0       	ldi	r24, 0x00	; 0
    f506:	90 e4       	ldi	r25, 0x40	; 64
    f508:	a0 e0       	ldi	r26, 0x00	; 0
    f50a:	b0 e0       	ldi	r27, 0x00	; 0
    f50c:	4e c0       	rjmp	.+156    	; 0xf5aa <stat+0x102>
    f50e:	be 01       	movw	r22, r28
    f510:	6f 5f       	subi	r22, 0xFF	; 255
    f512:	7f 4f       	sbci	r23, 0xFF	; 255
    f514:	c7 01       	movw	r24, r14
    f516:	0e 94 b9 65 	call	0xcb72	; 0xcb72 <f_stat>
    f51a:	00 97       	sbiw	r24, 0x00	; 0
    f51c:	a1 f0       	breq	.+40     	; 0xf546 <stat+0x9e>
    f51e:	84 31       	cpi	r24, 0x14	; 20
    f520:	91 05       	cpc	r25, r1
    f522:	40 f4       	brcc	.+16     	; 0xf534 <stat+0x8c>
    f524:	fc 01       	movw	r30, r24
    f526:	e0 5f       	subi	r30, 0xF0	; 240
    f528:	f8 4f       	sbci	r31, 0xF8	; 248
    f52a:	80 81       	ld	r24, Z
    f52c:	08 2e       	mov	r0, r24
    f52e:	00 0c       	add	r0, r0
    f530:	99 0b       	sbc	r25, r25
    f532:	02 c0       	rjmp	.+4      	; 0xf538 <stat+0x90>
    f534:	83 e2       	ldi	r24, 0x23	; 35
    f536:	90 e0       	ldi	r25, 0x00	; 0
    f538:	90 93 ba 1b 	sts	0x1BBA, r25	; 0x801bba <errno+0x1>
    f53c:	80 93 b9 1b 	sts	0x1BB9, r24	; 0x801bb9 <errno>
    f540:	8f ef       	ldi	r24, 0xFF	; 255
    f542:	9f ef       	ldi	r25, 0xFF	; 255
    f544:	38 c0       	rjmp	.+112    	; 0xf5b6 <stat+0x10e>
    f546:	89 81       	ldd	r24, Y+1	; 0x01
    f548:	9a 81       	ldd	r25, Y+2	; 0x02
    f54a:	ab 81       	ldd	r26, Y+3	; 0x03
    f54c:	bc 81       	ldd	r27, Y+4	; 0x04
    f54e:	f8 01       	movw	r30, r16
    f550:	80 8f       	std	Z+24, r24	; 0x18
    f552:	91 8f       	std	Z+25, r25	; 0x19
    f554:	a2 8f       	std	Z+26, r26	; 0x1a
    f556:	b3 8f       	std	Z+27, r27	; 0x1b
    f558:	6f 81       	ldd	r22, Y+7	; 0x07
    f55a:	78 85       	ldd	r23, Y+8	; 0x08
    f55c:	8d 81       	ldd	r24, Y+5	; 0x05
    f55e:	9e 81       	ldd	r25, Y+6	; 0x06
    f560:	5f df       	rcall	.-322    	; 0xf420 <fat_time_to_unix>
    f562:	f8 01       	movw	r30, r16
    f564:	64 a3       	std	Z+36, r22	; 0x24
    f566:	75 a3       	std	Z+37, r23	; 0x25
    f568:	86 a3       	std	Z+38, r24	; 0x26
    f56a:	97 a3       	std	Z+39, r25	; 0x27
    f56c:	60 a7       	std	Z+40, r22	; 0x28
    f56e:	71 a7       	std	Z+41, r23	; 0x29
    f570:	82 a7       	std	Z+42, r24	; 0x2a
    f572:	93 a7       	std	Z+43, r25	; 0x2b
    f574:	64 a7       	std	Z+44, r22	; 0x2c
    f576:	75 a7       	std	Z+45, r23	; 0x2d
    f578:	86 a7       	std	Z+46, r24	; 0x2e
    f57a:	97 a7       	std	Z+47, r25	; 0x2f
    f57c:	29 85       	ldd	r18, Y+9	; 0x09
    f57e:	20 fd       	sbrc	r18, 0
    f580:	03 c0       	rjmp	.+6      	; 0xf588 <stat+0xe0>
    f582:	8f ef       	ldi	r24, 0xFF	; 255
    f584:	91 e0       	ldi	r25, 0x01	; 1
    f586:	02 c0       	rjmp	.+4      	; 0xf58c <stat+0xe4>
    f588:	8d e6       	ldi	r24, 0x6D	; 109
    f58a:	91 e0       	ldi	r25, 0x01	; 1
    f58c:	48 ee       	ldi	r20, 0xE8	; 232
    f58e:	53 e0       	ldi	r21, 0x03	; 3
    f590:	f8 01       	movw	r30, r16
    f592:	51 8b       	std	Z+17, r21	; 0x11
    f594:	40 8b       	std	Z+16, r20	; 0x10
    f596:	53 8b       	std	Z+19, r21	; 0x13
    f598:	42 8b       	std	Z+18, r20	; 0x12
    f59a:	24 ff       	sbrs	r18, 4
    f59c:	02 c0       	rjmp	.+4      	; 0xf5a2 <stat+0xfa>
    f59e:	90 64       	ori	r25, 0x40	; 64
    f5a0:	01 c0       	rjmp	.+2      	; 0xf5a4 <stat+0xfc>
    f5a2:	90 68       	ori	r25, 0x80	; 128
    f5a4:	a0 e0       	ldi	r26, 0x00	; 0
    f5a6:	b0 e0       	ldi	r27, 0x00	; 0
    f5a8:	f8 01       	movw	r30, r16
    f5aa:	80 87       	std	Z+8, r24	; 0x08
    f5ac:	91 87       	std	Z+9, r25	; 0x09
    f5ae:	a2 87       	std	Z+10, r26	; 0x0a
    f5b0:	b3 87       	std	Z+11, r27	; 0x0b
    f5b2:	80 e0       	ldi	r24, 0x00	; 0
    f5b4:	90 e0       	ldi	r25, 0x00	; 0
    f5b6:	ca 5e       	subi	r28, 0xEA	; 234
    f5b8:	de 4f       	sbci	r29, 0xFE	; 254
    f5ba:	e6 e0       	ldi	r30, 0x06	; 6
    f5bc:	0c 94 08 e6 	jmp	0x1cc10	; 0x1cc10 <__epilogue_restores__+0x18>

0000f5c0 <unix_time_to_fat>:
    f5c0:	a4 e0       	ldi	r26, 0x04	; 4
    f5c2:	b0 e0       	ldi	r27, 0x00	; 0
    f5c4:	e6 ee       	ldi	r30, 0xE6	; 230
    f5c6:	fa e7       	ldi	r31, 0x7A	; 122
    f5c8:	0c 94 ec e5 	jmp	0x1cbd8	; 0x1cbd8 <__prologue_saves__+0x18>
    f5cc:	69 83       	std	Y+1, r22	; 0x01
    f5ce:	7a 83       	std	Y+2, r23	; 0x02
    f5d0:	8b 83       	std	Y+3, r24	; 0x03
    f5d2:	9c 83       	std	Y+4, r25	; 0x04
    f5d4:	7a 01       	movw	r14, r20
    f5d6:	89 01       	movw	r16, r18
    f5d8:	ce 01       	movw	r24, r28
    f5da:	01 96       	adiw	r24, 0x01	; 1
    f5dc:	0e 94 bc 38 	call	0x7178	; 0x7178 <gmtime>
    f5e0:	fc 01       	movw	r30, r24
    f5e2:	22 85       	ldd	r18, Z+10	; 0x0a
    f5e4:	33 85       	ldd	r19, Z+11	; 0x0b
    f5e6:	20 55       	subi	r18, 0x50	; 80
    f5e8:	31 09       	sbc	r19, r1
    f5ea:	c9 01       	movw	r24, r18
    f5ec:	98 2f       	mov	r25, r24
    f5ee:	88 27       	eor	r24, r24
    f5f0:	99 0f       	add	r25, r25
    f5f2:	20 85       	ldd	r18, Z+8	; 0x08
    f5f4:	31 85       	ldd	r19, Z+9	; 0x09
    f5f6:	2f 5f       	subi	r18, 0xFF	; 255
    f5f8:	3f 4f       	sbci	r19, 0xFF	; 255
    f5fa:	45 e0       	ldi	r20, 0x05	; 5
    f5fc:	22 0f       	add	r18, r18
    f5fe:	33 1f       	adc	r19, r19
    f600:	4a 95       	dec	r20
    f602:	e1 f7       	brne	.-8      	; 0xf5fc <unix_time_to_fat+0x3c>
    f604:	28 2b       	or	r18, r24
    f606:	39 2b       	or	r19, r25
    f608:	86 81       	ldd	r24, Z+6	; 0x06
    f60a:	97 81       	ldd	r25, Z+7	; 0x07
    f60c:	28 2b       	or	r18, r24
    f60e:	39 2b       	or	r19, r25
    f610:	d7 01       	movw	r26, r14
    f612:	2d 93       	st	X+, r18
    f614:	3c 93       	st	X, r19
    f616:	84 81       	ldd	r24, Z+4	; 0x04
    f618:	20 e0       	ldi	r18, 0x00	; 0
    f61a:	30 e0       	ldi	r19, 0x00	; 0
    f61c:	38 2f       	mov	r19, r24
    f61e:	33 0f       	add	r19, r19
    f620:	33 0f       	add	r19, r19
    f622:	33 0f       	add	r19, r19
    f624:	82 81       	ldd	r24, Z+2	; 0x02
    f626:	93 81       	ldd	r25, Z+3	; 0x03
    f628:	55 e0       	ldi	r21, 0x05	; 5
    f62a:	88 0f       	add	r24, r24
    f62c:	99 1f       	adc	r25, r25
    f62e:	5a 95       	dec	r21
    f630:	e1 f7       	brne	.-8      	; 0xf62a <unix_time_to_fat+0x6a>
    f632:	82 2b       	or	r24, r18
    f634:	93 2b       	or	r25, r19
    f636:	20 81       	ld	r18, Z
    f638:	31 81       	ldd	r19, Z+1	; 0x01
    f63a:	36 95       	lsr	r19
    f63c:	27 95       	ror	r18
    f63e:	82 2b       	or	r24, r18
    f640:	93 2b       	or	r25, r19
    f642:	f8 01       	movw	r30, r16
    f644:	91 83       	std	Z+1, r25	; 0x01
    f646:	80 83       	st	Z, r24
    f648:	24 96       	adiw	r28, 0x04	; 4
    f64a:	e6 e0       	ldi	r30, 0x06	; 6
    f64c:	0c 94 08 e6 	jmp	0x1cc10	; 0x1cc10 <__epilogue_restores__+0x18>

0000f650 <utime>:
    f650:	aa e1       	ldi	r26, 0x1A	; 26
    f652:	b1 e0       	ldi	r27, 0x01	; 1
    f654:	ee e2       	ldi	r30, 0x2E	; 46
    f656:	fb e7       	ldi	r31, 0x7B	; 123
    f658:	0c 94 ee e5 	jmp	0x1cbdc	; 0x1cbdc <__prologue_saves__+0x1c>
    f65c:	8c 01       	movw	r16, r24
    f65e:	61 15       	cp	r22, r1
    f660:	71 05       	cpc	r23, r1
    f662:	31 f0       	breq	.+12     	; 0xf670 <utime+0x20>
    f664:	fb 01       	movw	r30, r22
    f666:	64 81       	ldd	r22, Z+4	; 0x04
    f668:	75 81       	ldd	r23, Z+5	; 0x05
    f66a:	86 81       	ldd	r24, Z+6	; 0x06
    f66c:	97 81       	ldd	r25, Z+7	; 0x07
    f66e:	04 c0       	rjmp	.+8      	; 0xf678 <utime+0x28>
    f670:	80 e0       	ldi	r24, 0x00	; 0
    f672:	90 e0       	ldi	r25, 0x00	; 0
    f674:	0e 94 17 39 	call	0x722e	; 0x722e <time>
    f678:	9e 01       	movw	r18, r28
    f67a:	29 5e       	subi	r18, 0xE9	; 233
    f67c:	3e 4f       	sbci	r19, 0xFE	; 254
    f67e:	ae 01       	movw	r20, r28
    f680:	47 5e       	subi	r20, 0xE7	; 231
    f682:	5e 4f       	sbci	r21, 0xFE	; 254
    f684:	9d df       	rcall	.-198    	; 0xf5c0 <unix_time_to_fat>
    f686:	c7 5e       	subi	r28, 0xE7	; 231
    f688:	de 4f       	sbci	r29, 0xFE	; 254
    f68a:	88 81       	ld	r24, Y
    f68c:	99 81       	ldd	r25, Y+1	; 0x01
    f68e:	c9 51       	subi	r28, 0x19	; 25
    f690:	d1 40       	sbci	r29, 0x01	; 1
    f692:	9e 83       	std	Y+6, r25	; 0x06
    f694:	8d 83       	std	Y+5, r24	; 0x05
    f696:	c9 5e       	subi	r28, 0xE9	; 233
    f698:	de 4f       	sbci	r29, 0xFE	; 254
    f69a:	88 81       	ld	r24, Y
    f69c:	99 81       	ldd	r25, Y+1	; 0x01
    f69e:	c7 51       	subi	r28, 0x17	; 23
    f6a0:	d1 40       	sbci	r29, 0x01	; 1
    f6a2:	98 87       	std	Y+8, r25	; 0x08
    f6a4:	8f 83       	std	Y+7, r24	; 0x07
    f6a6:	be 01       	movw	r22, r28
    f6a8:	6f 5f       	subi	r22, 0xFF	; 255
    f6aa:	7f 4f       	sbci	r23, 0xFF	; 255
    f6ac:	c8 01       	movw	r24, r16
    f6ae:	0e 94 cf 69 	call	0xd39e	; 0xd39e <f_utime>
    f6b2:	84 31       	cpi	r24, 0x14	; 20
    f6b4:	91 05       	cpc	r25, r1
    f6b6:	40 f4       	brcc	.+16     	; 0xf6c8 <utime+0x78>
    f6b8:	fc 01       	movw	r30, r24
    f6ba:	e0 5f       	subi	r30, 0xF0	; 240
    f6bc:	f8 4f       	sbci	r31, 0xF8	; 248
    f6be:	80 81       	ld	r24, Z
    f6c0:	08 2e       	mov	r0, r24
    f6c2:	00 0c       	add	r0, r0
    f6c4:	99 0b       	sbc	r25, r25
    f6c6:	02 c0       	rjmp	.+4      	; 0xf6cc <utime+0x7c>
    f6c8:	83 e2       	ldi	r24, 0x23	; 35
    f6ca:	90 e0       	ldi	r25, 0x00	; 0
    f6cc:	c6 5e       	subi	r28, 0xE6	; 230
    f6ce:	de 4f       	sbci	r29, 0xFE	; 254
    f6d0:	e4 e0       	ldi	r30, 0x04	; 4
    f6d2:	0c 94 0a e6 	jmp	0x1cc14	; 0x1cc14 <__epilogue_restores__+0x1c>

0000f6d6 <fileno_to_fatfs>:
    f6d6:	83 30       	cpi	r24, 0x03	; 3
    f6d8:	91 05       	cpc	r25, r1
    f6da:	48 f4       	brcc	.+18     	; 0xf6ee <fileno_to_fatfs+0x18>
    f6dc:	89 e0       	ldi	r24, 0x09	; 9
    f6de:	90 e0       	ldi	r25, 0x00	; 0
    f6e0:	90 93 ba 1b 	sts	0x1BBA, r25	; 0x801bba <errno+0x1>
    f6e4:	80 93 b9 1b 	sts	0x1BB9, r24	; 0x801bb9 <errno>
    f6e8:	80 e0       	ldi	r24, 0x00	; 0
    f6ea:	90 e0       	ldi	r25, 0x00	; 0
    f6ec:	08 95       	ret
    f6ee:	78 dc       	rcall	.-1808   	; 0xefe0 <fileno_to_stream>
    f6f0:	00 97       	sbiw	r24, 0x00	; 0
    f6f2:	d1 f3       	breq	.-12     	; 0xf6e8 <fileno_to_fatfs+0x12>
    f6f4:	fc 01       	movw	r30, r24
    f6f6:	84 85       	ldd	r24, Z+12	; 0x0c
    f6f8:	95 85       	ldd	r25, Z+13	; 0x0d
    f6fa:	00 97       	sbiw	r24, 0x00	; 0
    f6fc:	79 f3       	breq	.-34     	; 0xf6dc <fileno_to_fatfs+0x6>
    f6fe:	08 95       	ret

0000f700 <ftell>:
    f700:	10 92 ba 1b 	sts	0x1BBA, r1	; 0x801bba <errno+0x1>
    f704:	10 92 b9 1b 	sts	0x1BB9, r1	; 0x801bb9 <errno>
    f708:	4f dc       	rcall	.-1890   	; 0xefa8 <fileno>
    f70a:	83 30       	cpi	r24, 0x03	; 3
    f70c:	91 05       	cpc	r25, r1
    f70e:	48 f0       	brcs	.+18     	; 0xf722 <ftell+0x22>
    f710:	e2 df       	rcall	.-60     	; 0xf6d6 <fileno_to_fatfs>
    f712:	00 97       	sbiw	r24, 0x00	; 0
    f714:	51 f4       	brne	.+20     	; 0xf72a <ftell+0x2a>
    f716:	89 e0       	ldi	r24, 0x09	; 9
    f718:	90 e0       	ldi	r25, 0x00	; 0
    f71a:	90 93 ba 1b 	sts	0x1BBA, r25	; 0x801bba <errno+0x1>
    f71e:	80 93 b9 1b 	sts	0x1BB9, r24	; 0x801bb9 <errno>
    f722:	6f ef       	ldi	r22, 0xFF	; 255
    f724:	7f ef       	ldi	r23, 0xFF	; 255
    f726:	cb 01       	movw	r24, r22
    f728:	08 95       	ret
    f72a:	fc 01       	movw	r30, r24
    f72c:	60 89       	ldd	r22, Z+16	; 0x10
    f72e:	71 89       	ldd	r23, Z+17	; 0x11
    f730:	82 89       	ldd	r24, Z+18	; 0x12
    f732:	93 89       	ldd	r25, Z+19	; 0x13
    f734:	08 95       	ret

0000f736 <lseek>:
    f736:	a0 e0       	ldi	r26, 0x00	; 0
    f738:	b0 e0       	ldi	r27, 0x00	; 0
    f73a:	e1 ea       	ldi	r30, 0xA1	; 161
    f73c:	fb e7       	ldi	r31, 0x7B	; 123
    f73e:	0c 94 e8 e5 	jmp	0x1cbd0	; 0x1cbd0 <__prologue_saves__+0x10>
    f742:	5c 01       	movw	r10, r24
    f744:	6a 01       	movw	r12, r20
    f746:	7b 01       	movw	r14, r22
    f748:	89 01       	movw	r16, r18
    f74a:	10 92 ba 1b 	sts	0x1BBA, r1	; 0x801bba <errno+0x1>
    f74e:	10 92 b9 1b 	sts	0x1BB9, r1	; 0x801bb9 <errno>
    f752:	c1 df       	rcall	.-126    	; 0xf6d6 <fileno_to_fatfs>
    f754:	ec 01       	movw	r28, r24
    f756:	89 2b       	or	r24, r25
    f758:	19 f4       	brne	.+6      	; 0xf760 <lseek+0x2a>
    f75a:	88 e1       	ldi	r24, 0x18	; 24
    f75c:	90 e0       	ldi	r25, 0x00	; 0
    f75e:	26 c0       	rjmp	.+76     	; 0xf7ac <lseek+0x76>
    f760:	83 e0       	ldi	r24, 0x03	; 3
    f762:	a8 16       	cp	r10, r24
    f764:	b1 04       	cpc	r11, r1
    f766:	d0 f1       	brcs	.+116    	; 0xf7dc <lseek+0xa6>
    f768:	c5 01       	movw	r24, r10
    f76a:	3a dc       	rcall	.-1932   	; 0xefe0 <fileno_to_stream>
    f76c:	fc 01       	movw	r30, r24
    f76e:	93 81       	ldd	r25, Z+3	; 0x03
    f770:	90 64       	ori	r25, 0x40	; 64
    f772:	93 83       	std	Z+3, r25	; 0x03
    f774:	02 30       	cpi	r16, 0x02	; 2
    f776:	11 05       	cpc	r17, r1
    f778:	a9 f5       	brne	.+106    	; 0xf7e4 <lseek+0xae>
    f77a:	8a 85       	ldd	r24, Y+10	; 0x0a
    f77c:	9b 85       	ldd	r25, Y+11	; 0x0b
    f77e:	ac 85       	ldd	r26, Y+12	; 0x0c
    f780:	bd 85       	ldd	r27, Y+13	; 0x0d
    f782:	c8 0e       	add	r12, r24
    f784:	d9 1e       	adc	r13, r25
    f786:	ea 1e       	adc	r14, r26
    f788:	fb 1e       	adc	r15, r27
    f78a:	b7 01       	movw	r22, r14
    f78c:	a6 01       	movw	r20, r12
    f78e:	ce 01       	movw	r24, r28
    f790:	0e 94 14 62 	call	0xc428	; 0xc428 <f_lseek>
    f794:	00 97       	sbiw	r24, 0x00	; 0
    f796:	79 f0       	breq	.+30     	; 0xf7b6 <lseek+0x80>
    f798:	84 31       	cpi	r24, 0x14	; 20
    f79a:	91 05       	cpc	r25, r1
    f79c:	58 f5       	brcc	.+86     	; 0xf7f4 <lseek+0xbe>
    f79e:	fc 01       	movw	r30, r24
    f7a0:	e0 5f       	subi	r30, 0xF0	; 240
    f7a2:	f8 4f       	sbci	r31, 0xF8	; 248
    f7a4:	80 81       	ld	r24, Z
    f7a6:	08 2e       	mov	r0, r24
    f7a8:	00 0c       	add	r0, r0
    f7aa:	99 0b       	sbc	r25, r25
    f7ac:	90 93 ba 1b 	sts	0x1BBA, r25	; 0x801bba <errno+0x1>
    f7b0:	80 93 b9 1b 	sts	0x1BB9, r24	; 0x801bb9 <errno>
    f7b4:	13 c0       	rjmp	.+38     	; 0xf7dc <lseek+0xa6>
    f7b6:	68 89       	ldd	r22, Y+16	; 0x10
    f7b8:	79 89       	ldd	r23, Y+17	; 0x11
    f7ba:	8a 89       	ldd	r24, Y+18	; 0x12
    f7bc:	9b 89       	ldd	r25, Y+19	; 0x13
    f7be:	c6 16       	cp	r12, r22
    f7c0:	d7 06       	cpc	r13, r23
    f7c2:	e8 06       	cpc	r14, r24
    f7c4:	f9 06       	cpc	r15, r25
    f7c6:	c9 f0       	breq	.+50     	; 0xf7fa <lseek+0xc4>
    f7c8:	84 e5       	ldi	r24, 0x54	; 84
    f7ca:	9c e0       	ldi	r25, 0x0C	; 12
    f7cc:	1f 92       	push	r1
    f7ce:	9f 93       	push	r25
    f7d0:	8f 93       	push	r24
    f7d2:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    f7d6:	0f 90       	pop	r0
    f7d8:	0f 90       	pop	r0
    f7da:	0f 90       	pop	r0
    f7dc:	6f ef       	ldi	r22, 0xFF	; 255
    f7de:	7f ef       	ldi	r23, 0xFF	; 255
    f7e0:	cb 01       	movw	r24, r22
    f7e2:	0b c0       	rjmp	.+22     	; 0xf7fa <lseek+0xc4>
    f7e4:	01 30       	cpi	r16, 0x01	; 1
    f7e6:	11 05       	cpc	r17, r1
    f7e8:	81 f6       	brne	.-96     	; 0xf78a <lseek+0x54>
    f7ea:	88 89       	ldd	r24, Y+16	; 0x10
    f7ec:	99 89       	ldd	r25, Y+17	; 0x11
    f7ee:	aa 89       	ldd	r26, Y+18	; 0x12
    f7f0:	bb 89       	ldd	r27, Y+19	; 0x13
    f7f2:	c7 cf       	rjmp	.-114    	; 0xf782 <lseek+0x4c>
    f7f4:	83 e2       	ldi	r24, 0x23	; 35
    f7f6:	90 e0       	ldi	r25, 0x00	; 0
    f7f8:	d9 cf       	rjmp	.-78     	; 0xf7ac <lseek+0x76>
    f7fa:	cd b7       	in	r28, 0x3d	; 61
    f7fc:	de b7       	in	r29, 0x3e	; 62
    f7fe:	ea e0       	ldi	r30, 0x0A	; 10
    f800:	0c 94 04 e6 	jmp	0x1cc08	; 0x1cc08 <__epilogue_restores__+0x10>

0000f804 <fseek>:
    f804:	cf 92       	push	r12
    f806:	df 92       	push	r13
    f808:	ef 92       	push	r14
    f80a:	ff 92       	push	r15
    f80c:	cf 93       	push	r28
    f80e:	df 93       	push	r29
    f810:	6a 01       	movw	r12, r20
    f812:	7b 01       	movw	r14, r22
    f814:	e9 01       	movw	r28, r18
    f816:	c8 db       	rcall	.-2160   	; 0xefa8 <fileno>
    f818:	97 fd       	sbrc	r25, 7
    f81a:	12 c0       	rjmp	.+36     	; 0xf840 <fseek+0x3c>
    f81c:	9e 01       	movw	r18, r28
    f81e:	b7 01       	movw	r22, r14
    f820:	a6 01       	movw	r20, r12
    f822:	89 df       	rcall	.-238    	; 0xf736 <lseek>
    f824:	21 e0       	ldi	r18, 0x01	; 1
    f826:	30 e0       	ldi	r19, 0x00	; 0
    f828:	6f 3f       	cpi	r22, 0xFF	; 255
    f82a:	7f 4f       	sbci	r23, 0xFF	; 255
    f82c:	8f 4f       	sbci	r24, 0xFF	; 255
    f82e:	9f 4f       	sbci	r25, 0xFF	; 255
    f830:	11 f0       	breq	.+4      	; 0xf836 <fseek+0x32>
    f832:	20 e0       	ldi	r18, 0x00	; 0
    f834:	30 e0       	ldi	r19, 0x00	; 0
    f836:	88 27       	eor	r24, r24
    f838:	99 27       	eor	r25, r25
    f83a:	82 1b       	sub	r24, r18
    f83c:	93 0b       	sbc	r25, r19
    f83e:	02 c0       	rjmp	.+4      	; 0xf844 <fseek+0x40>
    f840:	8f ef       	ldi	r24, 0xFF	; 255
    f842:	9f ef       	ldi	r25, 0xFF	; 255
    f844:	df 91       	pop	r29
    f846:	cf 91       	pop	r28
    f848:	ff 90       	pop	r15
    f84a:	ef 90       	pop	r14
    f84c:	df 90       	pop	r13
    f84e:	cf 90       	pop	r12
    f850:	08 95       	ret

0000f852 <read>:
///
/// @return count on sucess.
/// @return -1 on error with errno set.
MEMSPACE
ssize_t read(int fd, const void *buf, size_t count)
{
    f852:	a2 e0       	ldi	r26, 0x02	; 2
    f854:	b0 e0       	ldi	r27, 0x00	; 0
    f856:	ef e2       	ldi	r30, 0x2F	; 47
    f858:	fc e7       	ldi	r31, 0x7C	; 124
    f85a:	0c 94 e8 e5 	jmp	0x1cbd0	; 0x1cbd0 <__prologue_saves__+0x10>
    f85e:	5c 01       	movw	r10, r24
    f860:	8b 01       	movw	r16, r22
    f862:	6a 01       	movw	r12, r20
    int ret;
    FIL *fh;
    FILE *stream;

    //FIXME
    *(char *) buf = 0;
    f864:	fb 01       	movw	r30, r22
    f866:	10 82       	st	Z, r1

    errno = 0;
    f868:	10 92 ba 1b 	sts	0x1BBA, r1	; 0x801bba <errno+0x1>
    f86c:	10 92 b9 1b 	sts	0x1BB9, r1	; 0x801bb9 <errno>

    // TTY read function
    // FIXME should we really be blocking ???
    stream = fileno_to_stream(fd);
    f870:	b7 db       	rcall	.-2194   	; 0xefe0 <fileno_to_stream>
    if(stream == stdin)
    f872:	7c 01       	movw	r14, r24
    f874:	80 91 bb 1b 	lds	r24, 0x1BBB	; 0x801bbb <__iob>
    f878:	90 91 bc 1b 	lds	r25, 0x1BBC	; 0x801bbc <__iob+0x1>
    f87c:	e8 16       	cp	r14, r24
    f87e:	f9 06       	cpc	r15, r25
    {
        char *ptr = (char *) buf;
        // ungetc is undefined for read
        stream->flags |= __SUNGET;
    f880:	c9 f4       	brne	.+50     	; 0xf8b4 <read+0x62>
    f882:	f7 01       	movw	r30, r14
    f884:	83 81       	ldd	r24, Z+3	; 0x03
    f886:	80 64       	ori	r24, 0x40	; 64
        size = 0;
    f888:	83 83       	std	Z+3, r24	; 0x03
    f88a:	1a 82       	std	Y+2, r1	; 0x02
    f88c:	19 82       	std	Y+1, r1	; 0x01
    f88e:	c0 0e       	add	r12, r16
        while(count--)
    f890:	d1 1e       	adc	r13, r17
    f892:	0c 15       	cp	r16, r12
    f894:	1d 05       	cpc	r17, r13
        {
            ret = fgetc(stream);
    f896:	09 f4       	brne	.+2      	; 0xf89a <read+0x48>
    f898:	3d c0       	rjmp	.+122    	; 0xf914 <read+0xc2>
            if(ret < 0)
    f89a:	c7 01       	movw	r24, r14
    f89c:	6b da       	rcall	.-2858   	; 0xed74 <fgetc>
                break;
            
            *ptr++ = ret;
    f89e:	97 fd       	sbrc	r25, 7
    f8a0:	39 c0       	rjmp	.+114    	; 0xf914 <read+0xc2>
    f8a2:	f8 01       	movw	r30, r16
            ++size;
    f8a4:	81 93       	st	Z+, r24
    f8a6:	8f 01       	movw	r16, r30
    f8a8:	89 81       	ldd	r24, Y+1	; 0x01
    f8aa:	9a 81       	ldd	r25, Y+2	; 0x02
    f8ac:	01 96       	adiw	r24, 0x01	; 1
    f8ae:	9a 83       	std	Y+2, r25	; 0x02
        }
        return(size);
    }
    if(stream == stdout || stream == stderr)
    f8b0:	89 83       	std	Y+1, r24	; 0x01
    f8b2:	ef cf       	rjmp	.-34     	; 0xf892 <read+0x40>
    f8b4:	80 91 bd 1b 	lds	r24, 0x1BBD	; 0x801bbd <__iob+0x2>
    f8b8:	90 91 be 1b 	lds	r25, 0x1BBE	; 0x801bbe <__iob+0x3>
    f8bc:	e8 16       	cp	r14, r24
    f8be:	f9 06       	cpc	r15, r25
    f8c0:	71 f1       	breq	.+92     	; 0xf91e <read+0xcc>
    f8c2:	80 91 bf 1b 	lds	r24, 0x1BBF	; 0x801bbf <__iob+0x4>
    f8c6:	90 91 c0 1b 	lds	r25, 0x1BC0	; 0x801bc0 <__iob+0x5>
    {
        return(-1);
    }

    // fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    f8ca:	e8 16       	cp	r14, r24
    f8cc:	f9 06       	cpc	r15, r25
    f8ce:	39 f1       	breq	.+78     	; 0xf91e <read+0xcc>
    if ( fh == NULL )
    f8d0:	c5 01       	movw	r24, r10
    f8d2:	01 df       	rcall	.-510    	; 0xf6d6 <fileno_to_fatfs>
    {
        errno = EBADF;
    f8d4:	00 97       	sbiw	r24, 0x00	; 0
    f8d6:	19 f4       	brne	.+6      	; 0xf8de <read+0x8c>
    f8d8:	89 e0       	ldi	r24, 0x09	; 9
        return(-1);
    }

    res = f_read(fh, (void *) buf, bytes, &size);
    f8da:	90 e0       	ldi	r25, 0x00	; 0
    f8dc:	16 c0       	rjmp	.+44     	; 0xf90a <read+0xb8>
    f8de:	9e 01       	movw	r18, r28
    f8e0:	2f 5f       	subi	r18, 0xFF	; 255
    f8e2:	3f 4f       	sbci	r19, 0xFF	; 255
    f8e4:	a6 01       	movw	r20, r12
    f8e6:	b8 01       	movw	r22, r16
    if(res != FR_OK)
    f8e8:	0e 94 08 5d 	call	0xba10	; 0xba10 <f_read>
    f8ec:	00 97       	sbiw	r24, 0x00	; 0
    f8ee:	91 f0       	breq	.+36     	; 0xf914 <read+0xc2>
    f8f0:	84 31       	cpi	r24, 0x14	; 20
    f8f2:	91 05       	cpc	r25, r1
    f8f4:	40 f4       	brcc	.+16     	; 0xf906 <read+0xb4>
    f8f6:	fc 01       	movw	r30, r24
    f8f8:	e0 5f       	subi	r30, 0xF0	; 240
    f8fa:	f8 4f       	sbci	r31, 0xF8	; 248
    f8fc:	80 81       	ld	r24, Z
    f8fe:	08 2e       	mov	r0, r24
    f900:	00 0c       	add	r0, r0
    f902:	99 0b       	sbc	r25, r25
    f904:	02 c0       	rjmp	.+4      	; 0xf90a <read+0xb8>
    {
        errno = fatfs_to_errno(res);
    f906:	83 e2       	ldi	r24, 0x23	; 35
    f908:	90 e0       	ldi	r25, 0x00	; 0
    f90a:	90 93 ba 1b 	sts	0x1BBA, r25	; 0x801bba <errno+0x1>
    f90e:	80 93 b9 1b 	sts	0x1BB9, r24	; 0x801bb9 <errno>
        return(-1);
    }
    return ((ssize_t) size);
    f912:	05 c0       	rjmp	.+10     	; 0xf91e <read+0xcc>
    f914:	69 81       	ldd	r22, Y+1	; 0x01
    f916:	7a 81       	ldd	r23, Y+2	; 0x02
    f918:	80 e0       	ldi	r24, 0x00	; 0
        }
        return(size);
    }
    if(stream == stdout || stream == stderr)
    {
        return(-1);
    f91a:	90 e0       	ldi	r25, 0x00	; 0
    f91c:	03 c0       	rjmp	.+6      	; 0xf924 <read+0xd2>
    f91e:	6f ef       	ldi	r22, 0xFF	; 255
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return ((ssize_t) size);
}
    f920:	7f ef       	ldi	r23, 0xFF	; 255
    f922:	cb 01       	movw	r24, r22
    f924:	22 96       	adiw	r28, 0x02	; 2
    f926:	ea e0       	ldi	r30, 0x0A	; 10
    f928:	0c 94 04 e6 	jmp	0x1cc08	; 0x1cc08 <__epilogue_restores__+0x10>

0000f92c <fread>:
///
/// @return count on sucess.
/// @return 0 or < size on error with errno set.
MEMSPACE
size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream)
{
    f92c:	0f 93       	push	r16
    f92e:	1f 93       	push	r17
    f930:	cf 93       	push	r28
    f932:	df 93       	push	r29
    f934:	ec 01       	movw	r28, r24
    f936:	c9 01       	movw	r24, r18
    size_t count = size * nmemb;
    f938:	64 9f       	mul	r22, r20
    f93a:	80 01       	movw	r16, r0
    f93c:	65 9f       	mul	r22, r21
    f93e:	10 0d       	add	r17, r0
    f940:	74 9f       	mul	r23, r20
    f942:	10 0d       	add	r17, r0
    int fn = fileno(stream);
    f944:	11 24       	eor	r1, r1
    ssize_t ret;

    // read() checks for fn out of bounds
    ret = read(fn, ptr, count);
    f946:	30 db       	rcall	.-2464   	; 0xefa8 <fileno>
    f948:	a8 01       	movw	r20, r16
    f94a:	be 01       	movw	r22, r28
    if(ret < 0)
    f94c:	82 df       	rcall	.-252    	; 0xf852 <read>
    f94e:	97 fd       	sbrc	r25, 7
        return(0);

    return((size_t) ret);
    f950:	02 c0       	rjmp	.+4      	; 0xf956 <fread+0x2a>
    f952:	cb 01       	movw	r24, r22
    ssize_t ret;

    // read() checks for fn out of bounds
    ret = read(fn, ptr, count);
    if(ret < 0)
        return(0);
    f954:	02 c0       	rjmp	.+4      	; 0xf95a <fread+0x2e>
    f956:	80 e0       	ldi	r24, 0x00	; 0

    return((size_t) ret);
}
    f958:	90 e0       	ldi	r25, 0x00	; 0
    f95a:	df 91       	pop	r29
    f95c:	cf 91       	pop	r28
    f95e:	1f 91       	pop	r17
    f960:	0f 91       	pop	r16
    f962:	08 95       	ret

0000f964 <syncfs>:
/// @param[in] fd: POSIX fileno to sync.
/// @return 0.
/// @return -1 on error witrh errno set.
MEMSPACE
int syncfs(int fd)
{
    f964:	cf 93       	push	r28
    f966:	df 93       	push	r29
    FIL *fh;
    FRESULT res;
    FILE *stream;

    errno = 0;
    f968:	10 92 ba 1b 	sts	0x1BBA, r1	; 0x801bba <errno+0x1>
    f96c:	10 92 b9 1b 	sts	0x1BB9, r1	; 0x801bb9 <errno>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f970:	83 30       	cpi	r24, 0x03	; 3
    f972:	91 05       	cpc	r25, r1
    f974:	18 f4       	brcc	.+6      	; 0xf97c <syncfs+0x18>

    // fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    if(fh == NULL)
    {
        errno = EBADF;
    f976:	89 e0       	ldi	r24, 0x09	; 9
    f978:	90 e0       	ldi	r25, 0x00	; 0
    f97a:	18 c0       	rjmp	.+48     	; 0xf9ac <syncfs+0x48>
    if(isatty(fd))
    {
        errno = EBADF;
        return(-1);
    }
    stream = fileno_to_stream(fd);
    f97c:	ec 01       	movw	r28, r24
    f97e:	30 db       	rcall	.-2464   	; 0xefe0 <fileno_to_stream>
    // reset unget on sync
    stream->flags |= __SUNGET;
    f980:	fc 01       	movw	r30, r24
    f982:	93 81       	ldd	r25, Z+3	; 0x03

    // fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    f984:	90 64       	ori	r25, 0x40	; 64
    f986:	93 83       	std	Z+3, r25	; 0x03
    if(fh == NULL)
    f988:	ce 01       	movw	r24, r28
    f98a:	a5 de       	rcall	.-694    	; 0xf6d6 <fileno_to_fatfs>
    {
        errno = EBADF;
        return(-1);
    }

    res  = f_sync ( fh );
    f98c:	00 97       	sbiw	r24, 0x00	; 0
    f98e:	99 f3       	breq	.-26     	; 0xf976 <syncfs+0x12>
    if (res != FR_OK)
    f990:	0e 94 ea 5f 	call	0xbfd4	; 0xbfd4 <f_sync>
    f994:	00 97       	sbiw	r24, 0x00	; 0
    f996:	a1 f0       	breq	.+40     	; 0xf9c0 <syncfs+0x5c>
    f998:	84 31       	cpi	r24, 0x14	; 20
    f99a:	91 05       	cpc	r25, r1
    f99c:	70 f4       	brcc	.+28     	; 0xf9ba <syncfs+0x56>
    f99e:	fc 01       	movw	r30, r24
    f9a0:	e0 5f       	subi	r30, 0xF0	; 240
    f9a2:	f8 4f       	sbci	r31, 0xF8	; 248
    f9a4:	80 81       	ld	r24, Z
    f9a6:	08 2e       	mov	r0, r24
    {
        errno = fatfs_to_errno(res);
    f9a8:	00 0c       	add	r0, r0
    f9aa:	99 0b       	sbc	r25, r25
    f9ac:	90 93 ba 1b 	sts	0x1BBA, r25	; 0x801bba <errno+0x1>
        return(-1);
    f9b0:	80 93 b9 1b 	sts	0x1BB9, r24	; 0x801bb9 <errno>
    f9b4:	8f ef       	ldi	r24, 0xFF	; 255
        errno = EBADF;
        return(-1);
    }

    res  = f_sync ( fh );
    if (res != FR_OK)
    f9b6:	9f ef       	ldi	r25, 0xFF	; 255
    f9b8:	05 c0       	rjmp	.+10     	; 0xf9c4 <syncfs+0x60>
    f9ba:	83 e2       	ldi	r24, 0x23	; 35
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return(0);
    f9bc:	90 e0       	ldi	r25, 0x00	; 0
    f9be:	f6 cf       	rjmp	.-20     	; 0xf9ac <syncfs+0x48>
}
    f9c0:	80 e0       	ldi	r24, 0x00	; 0
    f9c2:	90 e0       	ldi	r25, 0x00	; 0
    f9c4:	df 91       	pop	r29
    f9c6:	cf 91       	pop	r28
    f9c8:	08 95       	ret

0000f9ca <sync>:
/// - man page sync (2).
///
/// @return  void.
MEMSPACE
void sync(void)
{
    f9ca:	cf 93       	push	r28
    f9cc:	df 93       	push	r29
    FIL *fh;
    int i;

    for(i=0;i<MAX_FILES;++i)
    f9ce:	c0 e0       	ldi	r28, 0x00	; 0
    f9d0:	d0 e0       	ldi	r29, 0x00	; 0
    f9d2:	21 96       	adiw	r28, 0x01	; 1
    f9d4:	c0 31       	cpi	r28, 0x10	; 16
    f9d6:	d1 05       	cpc	r29, r1
    f9d8:	51 f0       	breq	.+20     	; 0xf9ee <sync+0x24>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f9da:	c3 30       	cpi	r28, 0x03	; 3
    f9dc:	d1 05       	cpc	r29, r1
    f9de:	cc f3       	brlt	.-14     	; 0xf9d2 <sync+0x8>
    {
        if(isatty(i))
            continue;

        // fileno_to_fatfs checks for i out of bounds
        fh = fileno_to_fatfs(i);
    f9e0:	ce 01       	movw	r24, r28
    f9e2:	79 de       	rcall	.-782    	; 0xf6d6 <fileno_to_fatfs>
        if(fh == NULL)
    f9e4:	89 2b       	or	r24, r25
            continue;

        (void ) syncfs(i);
    f9e6:	a9 f3       	breq	.-22     	; 0xf9d2 <sync+0x8>
    f9e8:	ce 01       	movw	r24, r28
    f9ea:	bc df       	rcall	.-136    	; 0xf964 <syncfs>
    }
}
    f9ec:	f2 cf       	rjmp	.-28     	; 0xf9d2 <sync+0x8>
    f9ee:	df 91       	pop	r29
    f9f0:	cf 91       	pop	r28
    f9f2:	08 95       	ret

0000f9f4 <write>:
/// @param[in] count: number of bytes to write.
/// @return count on sucess.
/// @return -1 on error with errno set.
MEMSPACE
ssize_t write(int fd, const void *buf, size_t count)
{
    f9f4:	a2 e0       	ldi	r26, 0x02	; 2
    f9f6:	b0 e0       	ldi	r27, 0x00	; 0
    f9f8:	e0 e0       	ldi	r30, 0x00	; 0
    f9fa:	fd e7       	ldi	r31, 0x7D	; 125
    f9fc:	0c 94 e6 e5 	jmp	0x1cbcc	; 0x1cbcc <__prologue_saves__+0xc>
    fa00:	8c 01       	movw	r16, r24
    fa02:	b6 2e       	mov	r11, r22
    fa04:	f7 2e       	mov	r15, r23
    fa06:	4a 01       	movw	r8, r20
    UINT size;
    UINT bytes = count;
    FRESULT res;
    FIL *fh;
    FILE *stream;
    errno = 0;
    fa08:	10 92 ba 1b 	sts	0x1BBA, r1	; 0x801bba <errno+0x1>
    fa0c:	10 92 b9 1b 	sts	0x1BB9, r1	; 0x801bb9 <errno>

    // TTY read function
    stream = fileno_to_stream(fd);
    fa10:	e7 da       	rcall	.-2610   	; 0xefe0 <fileno_to_stream>
    if(stream == stdout || stream == stderr)
    fa12:	6c 01       	movw	r12, r24
    fa14:	80 91 bd 1b 	lds	r24, 0x1BBD	; 0x801bbd <__iob+0x2>
    fa18:	90 91 be 1b 	lds	r25, 0x1BBE	; 0x801bbe <__iob+0x3>
    fa1c:	c8 16       	cp	r12, r24
    fa1e:	d9 06       	cpc	r13, r25
    fa20:	39 f0       	breq	.+14     	; 0xfa30 <write+0x3c>
    fa22:	80 91 bf 1b 	lds	r24, 0x1BBF	; 0x801bbf <__iob+0x4>
    fa26:	90 91 c0 1b 	lds	r25, 0x1BC0	; 0x801bc0 <__iob+0x5>
    fa2a:	c8 16       	cp	r12, r24
    fa2c:	d9 06       	cpc	r13, r25
    {
        char *ptr = (char *) buf;   
        size = 0;
    fa2e:	d1 f4       	brne	.+52     	; 0xfa64 <write+0x70>
    fa30:	1a 82       	std	Y+2, r1	; 0x02
    fa32:	19 82       	std	Y+1, r1	; 0x01
    fa34:	0b 2d       	mov	r16, r11
    fa36:	1f 2d       	mov	r17, r15
    fa38:	78 01       	movw	r14, r16
    fa3a:	e8 0c       	add	r14, r8
        while(count--)
    fa3c:	f9 1c       	adc	r15, r9
    fa3e:	0e 15       	cp	r16, r14
    fa40:	1f 05       	cpc	r17, r15
        {
            int c,ret;
            c = *ptr++;
    fa42:	d1 f1       	breq	.+116    	; 0xfab8 <write+0xc4>
    fa44:	f8 01       	movw	r30, r16
    fa46:	a1 90       	ld	r10, Z+
    fa48:	8f 01       	movw	r16, r30
            ret = fputc(c, stream);
    fa4a:	b1 2c       	mov	r11, r1
    fa4c:	b6 01       	movw	r22, r12
    fa4e:	c5 01       	movw	r24, r10
            if(c != ret)
    fa50:	e2 d9       	rcall	.-3132   	; 0xee16 <fputc>
    fa52:	a8 16       	cp	r10, r24
    fa54:	b9 06       	cpc	r11, r25
                break;

            ++size;
    fa56:	81 f5       	brne	.+96     	; 0xfab8 <write+0xc4>
    fa58:	89 81       	ldd	r24, Y+1	; 0x01
    fa5a:	9a 81       	ldd	r25, Y+2	; 0x02
    fa5c:	01 96       	adiw	r24, 0x01	; 1
    fa5e:	9a 83       	std	Y+2, r25	; 0x02
    fa60:	89 83       	std	Y+1, r24	; 0x01
        }
        return(size);
    }
    if(stream == stdin)
    fa62:	ed cf       	rjmp	.-38     	; 0xfa3e <write+0x4a>
    fa64:	80 91 bb 1b 	lds	r24, 0x1BBB	; 0x801bbb <__iob>
    fa68:	90 91 bc 1b 	lds	r25, 0x1BBC	; 0x801bbc <__iob+0x1>
    fa6c:	c8 16       	cp	r12, r24
    {
        return(-1);
    }

    // fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    fa6e:	d9 06       	cpc	r13, r25
    fa70:	41 f1       	breq	.+80     	; 0xfac2 <write+0xce>
    fa72:	c8 01       	movw	r24, r16
    if ( fh == NULL )
    fa74:	30 de       	rcall	.-928    	; 0xf6d6 <fileno_to_fatfs>
    fa76:	00 97       	sbiw	r24, 0x00	; 0
    {
        errno = EBADF;
    fa78:	19 f4       	brne	.+6      	; 0xfa80 <write+0x8c>
    fa7a:	89 e0       	ldi	r24, 0x09	; 9
    fa7c:	90 e0       	ldi	r25, 0x00	; 0
        return(-1);
    }

    res = f_write(fh, buf, bytes, &size);
    fa7e:	17 c0       	rjmp	.+46     	; 0xfaae <write+0xba>
    fa80:	9e 01       	movw	r18, r28
    fa82:	2f 5f       	subi	r18, 0xFF	; 255
    fa84:	3f 4f       	sbci	r19, 0xFF	; 255
    fa86:	a4 01       	movw	r20, r8
    fa88:	6b 2d       	mov	r22, r11
    fa8a:	7f 2d       	mov	r23, r15
    fa8c:	0e 94 53 5e 	call	0xbca6	; 0xbca6 <f_write>
    if(res != FR_OK)
    fa90:	00 97       	sbiw	r24, 0x00	; 0
    fa92:	91 f0       	breq	.+36     	; 0xfab8 <write+0xc4>
    fa94:	84 31       	cpi	r24, 0x14	; 20
    fa96:	91 05       	cpc	r25, r1
    fa98:	40 f4       	brcc	.+16     	; 0xfaaa <write+0xb6>
    fa9a:	fc 01       	movw	r30, r24
    fa9c:	e0 5f       	subi	r30, 0xF0	; 240
    fa9e:	f8 4f       	sbci	r31, 0xF8	; 248
    faa0:	80 81       	ld	r24, Z
    faa2:	08 2e       	mov	r0, r24
    faa4:	00 0c       	add	r0, r0
    faa6:	99 0b       	sbc	r25, r25
    faa8:	02 c0       	rjmp	.+4      	; 0xfaae <write+0xba>
    faaa:	83 e2       	ldi	r24, 0x23	; 35
    {
        errno = fatfs_to_errno(res);
    faac:	90 e0       	ldi	r25, 0x00	; 0
    faae:	90 93 ba 1b 	sts	0x1BBA, r25	; 0x801bba <errno+0x1>
    fab2:	80 93 b9 1b 	sts	0x1BB9, r24	; 0x801bb9 <errno>
        return(-1);
    }
    return ((ssize_t) size);
    fab6:	05 c0       	rjmp	.+10     	; 0xfac2 <write+0xce>
    fab8:	69 81       	ldd	r22, Y+1	; 0x01
    faba:	7a 81       	ldd	r23, Y+2	; 0x02
    fabc:	80 e0       	ldi	r24, 0x00	; 0
    fabe:	90 e0       	ldi	r25, 0x00	; 0
        }
        return(size);
    }
    if(stream == stdin)
    {
        return(-1);
    fac0:	03 c0       	rjmp	.+6      	; 0xfac8 <write+0xd4>
    fac2:	6f ef       	ldi	r22, 0xFF	; 255
    fac4:	7f ef       	ldi	r23, 0xFF	; 255
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return ((ssize_t) size);
}
    fac6:	cb 01       	movw	r24, r22
    fac8:	22 96       	adiw	r28, 0x02	; 2
    faca:	ec e0       	ldi	r30, 0x0C	; 12
    facc:	0c 94 02 e6 	jmp	0x1cc04	; 0x1cc04 <__epilogue_restores__+0xc>

0000fad0 <fwrite>:
///
/// @return count written on sucess.
/// @return 0 or < size on error with errno set.
MEMSPACE
size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream)
{
    fad0:	0f 93       	push	r16
    fad2:	1f 93       	push	r17
    fad4:	cf 93       	push	r28
    fad6:	df 93       	push	r29
    fad8:	ec 01       	movw	r28, r24
    fada:	c9 01       	movw	r24, r18
    size_t count = size * nmemb;
    fadc:	64 9f       	mul	r22, r20
    fade:	80 01       	movw	r16, r0
    fae0:	65 9f       	mul	r22, r21
    fae2:	10 0d       	add	r17, r0
    fae4:	74 9f       	mul	r23, r20
    fae6:	10 0d       	add	r17, r0
    int fn = fileno(stream);
    fae8:	11 24       	eor	r1, r1
    ssize_t ret;
    
    // write () checks for fn out of bounds
    ret =  write(fn, ptr, count);
    faea:	5e da       	rcall	.-2884   	; 0xefa8 <fileno>
    faec:	a8 01       	movw	r20, r16
    faee:	be 01       	movw	r22, r28

    if(ret < 0)
    faf0:	81 df       	rcall	.-254    	; 0xf9f4 <write>
    faf2:	97 fd       	sbrc	r25, 7
        return(0);

    return((size_t) ret);
    faf4:	02 c0       	rjmp	.+4      	; 0xfafa <fwrite+0x2a>
    faf6:	cb 01       	movw	r24, r22
    
    // write () checks for fn out of bounds
    ret =  write(fn, ptr, count);

    if(ret < 0)
        return(0);
    faf8:	02 c0       	rjmp	.+4      	; 0xfafe <fwrite+0x2e>
    fafa:	80 e0       	ldi	r24, 0x00	; 0

    return((size_t) ret);
}
    fafc:	90 e0       	ldi	r25, 0x00	; 0
    fafe:	df 91       	pop	r29
    fb00:	cf 91       	pop	r28
    fb02:	1f 91       	pop	r17
    fb04:	0f 91       	pop	r16
    fb06:	08 95       	ret

0000fb08 <free_file_descriptor>:
///
/// @return fileno on success.
/// @return -1 on failure.
MEMSPACE
int free_file_descriptor(int fileno)
{
    fb08:	0f 93       	push	r16
    fb0a:	1f 93       	push	r17
    fb0c:	cf 93       	push	r28
    fb0e:	df 93       	push	r29
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    fb10:	83 30       	cpi	r24, 0x03	; 3
    fb12:	91 05       	cpc	r25, r1
    fb14:	48 f4       	brcc	.+18     	; 0xfb28 <free_file_descriptor+0x20>
    FILE *stream;
    FIL *fh;

    if(isatty( fileno ))
    {
        errno = EBADF;
    fb16:	89 e0       	ldi	r24, 0x09	; 9
    fb18:	90 e0       	ldi	r25, 0x00	; 0
    fb1a:	90 93 ba 1b 	sts	0x1BBA, r25	; 0x801bba <errno+0x1>
    fb1e:	80 93 b9 1b 	sts	0x1BB9, r24	; 0x801bb9 <errno>
        return(-1);
    fb22:	8f ef       	ldi	r24, 0xFF	; 255
    fb24:	9f ef       	ldi	r25, 0xFF	; 255
    fb26:	20 c0       	rjmp	.+64     	; 0xfb68 <free_file_descriptor+0x60>
    }

    // checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    fb28:	ec 01       	movw	r28, r24
    fb2a:	5a da       	rcall	.-2892   	; 0xefe0 <fileno_to_stream>
    if(stream == NULL)
    fb2c:	8c 01       	movw	r16, r24
    fb2e:	89 2b       	or	r24, r25
    {
        return(-1);
    }

    fh = fdev_get_udata(stream);
    fb30:	c1 f3       	breq	.-16     	; 0xfb22 <free_file_descriptor+0x1a>
    fb32:	f8 01       	movw	r30, r16
    fb34:	84 85       	ldd	r24, Z+12	; 0x0c

    if(fh != NULL)
    fb36:	95 85       	ldd	r25, Z+13	; 0x0d
    fb38:	00 97       	sbiw	r24, 0x00	; 0
    {
        safefree(fh);
    fb3a:	11 f0       	breq	.+4      	; 0xfb40 <free_file_descriptor+0x38>
    fb3c:	0e 94 cf 29 	call	0x539e	; 0x539e <safefree>
    }

    if(stream->buf != NULL && stream->flags & __SMALLOC)
    fb40:	f8 01       	movw	r30, r16
    fb42:	80 81       	ld	r24, Z
    fb44:	91 81       	ldd	r25, Z+1	; 0x01
    fb46:	00 97       	sbiw	r24, 0x00	; 0
    fb48:	21 f0       	breq	.+8      	; 0xfb52 <free_file_descriptor+0x4a>
    fb4a:	23 81       	ldd	r18, Z+3	; 0x03
    {
        safefree(stream->buf);
    fb4c:	27 fd       	sbrc	r18, 7
    fb4e:	0e 94 cf 29 	call	0x539e	; 0x539e <safefree>
    }

    __iob[fileno]  = NULL;
    fb52:	fe 01       	movw	r30, r28
    fb54:	ee 0f       	add	r30, r30
    fb56:	ff 1f       	adc	r31, r31
    fb58:	e5 54       	subi	r30, 0x45	; 69
    fb5a:	f4 4e       	sbci	r31, 0xE4	; 228
    fb5c:	11 82       	std	Z+1, r1	; 0x01
    safefree(stream);
    fb5e:	10 82       	st	Z, r1
    fb60:	c8 01       	movw	r24, r16
    fb62:	0e 94 cf 29 	call	0x539e	; 0x539e <safefree>
    return(fileno);
}
    fb66:	ce 01       	movw	r24, r28
    fb68:	df 91       	pop	r29
    fb6a:	cf 91       	pop	r28
    fb6c:	1f 91       	pop	r17
    fb6e:	0f 91       	pop	r16
    fb70:	08 95       	ret

0000fb72 <close>:
///
/// @return 0 on sucess.
/// @return -1 on error with errno set.
MEMSPACE
int close(int fileno)
{
    fb72:	0f 93       	push	r16
    fb74:	1f 93       	push	r17
    fb76:	cf 93       	push	r28
    fb78:	df 93       	push	r29
    fb7a:	8c 01       	movw	r16, r24
    FILE *stream;
    FIL *fh;
    int res;

    errno = 0;
    fb7c:	10 92 ba 1b 	sts	0x1BBA, r1	; 0x801bba <errno+0x1>
    fb80:	10 92 b9 1b 	sts	0x1BB9, r1	; 0x801bb9 <errno>

    // checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    if(stream == NULL)
    fb84:	2d da       	rcall	.-2982   	; 0xefe0 <fileno_to_stream>
    {
        return(-1);
    }

    // fileno_to_fatfs checks for fileno out of bounds
    fh = fileno_to_fatfs(fileno);
    fb86:	89 2b       	or	r24, r25
    fb88:	d9 f0       	breq	.+54     	; 0xfbc0 <close+0x4e>
    if(fh == NULL)
    fb8a:	c8 01       	movw	r24, r16
    fb8c:	a4 dd       	rcall	.-1208   	; 0xf6d6 <fileno_to_fatfs>
    {
        return(-1);
    }
    res = f_close(fh);
    fb8e:	00 97       	sbiw	r24, 0x00	; 0
    fb90:	b9 f0       	breq	.+46     	; 0xfbc0 <close+0x4e>
    free_file_descriptor(fileno);
    fb92:	0e 94 6a 60 	call	0xc0d4	; 0xc0d4 <f_close>
    fb96:	ec 01       	movw	r28, r24
    if (res != FR_OK)
    fb98:	c8 01       	movw	r24, r16
    fb9a:	b6 df       	rcall	.-148    	; 0xfb08 <free_file_descriptor>
    fb9c:	20 97       	sbiw	r28, 0x00	; 0
    fb9e:	99 f0       	breq	.+38     	; 0xfbc6 <close+0x54>
    fba0:	c4 31       	cpi	r28, 0x14	; 20
    fba2:	d1 05       	cpc	r29, r1
    fba4:	38 f4       	brcc	.+14     	; 0xfbb4 <close+0x42>
    fba6:	c0 5f       	subi	r28, 0xF0	; 240
    fba8:	d8 4f       	sbci	r29, 0xF8	; 248
    fbaa:	88 81       	ld	r24, Y
    fbac:	08 2e       	mov	r0, r24
    fbae:	00 0c       	add	r0, r0
    fbb0:	99 0b       	sbc	r25, r25
    fbb2:	02 c0       	rjmp	.+4      	; 0xfbb8 <close+0x46>
    {
        errno = fatfs_to_errno(res);
    fbb4:	83 e2       	ldi	r24, 0x23	; 35
    fbb6:	90 e0       	ldi	r25, 0x00	; 0
    fbb8:	90 93 ba 1b 	sts	0x1BBA, r25	; 0x801bba <errno+0x1>
        return(-1);
    fbbc:	80 93 b9 1b 	sts	0x1BB9, r24	; 0x801bb9 <errno>
    fbc0:	8f ef       	ldi	r24, 0xFF	; 255
    }
    return(0);
    fbc2:	9f ef       	ldi	r25, 0xFF	; 255
    fbc4:	02 c0       	rjmp	.+4      	; 0xfbca <close+0x58>
}
    fbc6:	80 e0       	ldi	r24, 0x00	; 0
    fbc8:	90 e0       	ldi	r25, 0x00	; 0
    fbca:	df 91       	pop	r29
    fbcc:	cf 91       	pop	r28
    fbce:	1f 91       	pop	r17
    fbd0:	0f 91       	pop	r16
    fbd2:	08 95       	ret

0000fbd4 <fclose>:
    fbd4:	e9 d9       	rcall	.-3118   	; 0xefa8 <fileno>
    fbd6:	97 fd       	sbrc	r25, 7
    fbd8:	02 c0       	rjmp	.+4      	; 0xfbde <fclose+0xa>
    fbda:	cb cf       	rjmp	.-106    	; 0xfb72 <close>
    fbdc:	08 95       	ret
    fbde:	8f ef       	ldi	r24, 0xFF	; 255
    fbe0:	9f ef       	ldi	r25, 0xFF	; 255
    fbe2:	08 95       	ret

0000fbe4 <new_file_descriptor>:
    fbe4:	0f 93       	push	r16
    fbe6:	1f 93       	push	r17
    fbe8:	cf 93       	push	r28
    fbea:	df 93       	push	r29
    fbec:	eb eb       	ldi	r30, 0xBB	; 187
    fbee:	fb e1       	ldi	r31, 0x1B	; 27
    fbf0:	c0 e0       	ldi	r28, 0x00	; 0
    fbf2:	d0 e0       	ldi	r29, 0x00	; 0
    fbf4:	21 96       	adiw	r28, 0x01	; 1
    fbf6:	c0 31       	cpi	r28, 0x10	; 16
    fbf8:	d1 05       	cpc	r29, r1
    fbfa:	49 f0       	breq	.+18     	; 0xfc0e <new_file_descriptor+0x2a>
    fbfc:	c3 30       	cpi	r28, 0x03	; 3
    fbfe:	d1 05       	cpc	r29, r1
    fc00:	24 f0       	brlt	.+8      	; 0xfc0a <new_file_descriptor+0x26>
    fc02:	82 81       	ldd	r24, Z+2	; 0x02
    fc04:	93 81       	ldd	r25, Z+3	; 0x03
    fc06:	89 2b       	or	r24, r25
    fc08:	59 f0       	breq	.+22     	; 0xfc20 <new_file_descriptor+0x3c>
    fc0a:	32 96       	adiw	r30, 0x02	; 2
    fc0c:	f3 cf       	rjmp	.-26     	; 0xfbf4 <new_file_descriptor+0x10>
    fc0e:	87 e1       	ldi	r24, 0x17	; 23
    fc10:	90 e0       	ldi	r25, 0x00	; 0
    fc12:	90 93 ba 1b 	sts	0x1BBA, r25	; 0x801bba <errno+0x1>
    fc16:	80 93 b9 1b 	sts	0x1BB9, r24	; 0x801bb9 <errno>
    fc1a:	8f ef       	ldi	r24, 0xFF	; 255
    fc1c:	9f ef       	ldi	r25, 0xFF	; 255
    fc1e:	22 c0       	rjmp	.+68     	; 0xfc64 <new_file_descriptor+0x80>
    fc20:	61 e0       	ldi	r22, 0x01	; 1
    fc22:	70 e0       	ldi	r23, 0x00	; 0
    fc24:	8e e0       	ldi	r24, 0x0E	; 14
    fc26:	90 e0       	ldi	r25, 0x00	; 0
    fc28:	0e 94 86 29 	call	0x530c	; 0x530c <safecalloc>
    fc2c:	8c 01       	movw	r16, r24
    fc2e:	89 2b       	or	r24, r25
    fc30:	59 f0       	breq	.+22     	; 0xfc48 <new_file_descriptor+0x64>
    fc32:	61 e0       	ldi	r22, 0x01	; 1
    fc34:	70 e0       	ldi	r23, 0x00	; 0
    fc36:	84 e2       	ldi	r24, 0x24	; 36
    fc38:	92 e0       	ldi	r25, 0x02	; 2
    fc3a:	0e 94 86 29 	call	0x530c	; 0x530c <safecalloc>
    fc3e:	00 97       	sbiw	r24, 0x00	; 0
    fc40:	31 f4       	brne	.+12     	; 0xfc4e <new_file_descriptor+0x6a>
    fc42:	c8 01       	movw	r24, r16
    fc44:	0e 94 cf 29 	call	0x539e	; 0x539e <safefree>
    fc48:	8c e0       	ldi	r24, 0x0C	; 12
    fc4a:	90 e0       	ldi	r25, 0x00	; 0
    fc4c:	e2 cf       	rjmp	.-60     	; 0xfc12 <new_file_descriptor+0x2e>
    fc4e:	fe 01       	movw	r30, r28
    fc50:	ee 0f       	add	r30, r30
    fc52:	ff 1f       	adc	r31, r31
    fc54:	e5 54       	subi	r30, 0x45	; 69
    fc56:	f4 4e       	sbci	r31, 0xE4	; 228
    fc58:	11 83       	std	Z+1, r17	; 0x01
    fc5a:	00 83       	st	Z, r16
    fc5c:	f8 01       	movw	r30, r16
    fc5e:	95 87       	std	Z+13, r25	; 0x0d
    fc60:	84 87       	std	Z+12, r24	; 0x0c
    fc62:	ce 01       	movw	r24, r28
    fc64:	df 91       	pop	r29
    fc66:	cf 91       	pop	r28
    fc68:	1f 91       	pop	r17
    fc6a:	0f 91       	pop	r16
    fc6c:	08 95       	ret

0000fc6e <open>:
    fc6e:	a0 e0       	ldi	r26, 0x00	; 0
    fc70:	b0 e0       	ldi	r27, 0x00	; 0
    fc72:	ed e3       	ldi	r30, 0x3D	; 61
    fc74:	fe e7       	ldi	r31, 0x7E	; 126
    fc76:	0c 94 e4 e5 	jmp	0x1cbc8	; 0x1cbc8 <__prologue_saves__+0x8>
    fc7a:	5c 01       	movw	r10, r24
    fc7c:	6b 01       	movw	r12, r22
    fc7e:	10 92 ba 1b 	sts	0x1BBA, r1	; 0x801bba <errno+0x1>
    fc82:	10 92 b9 1b 	sts	0x1BB9, r1	; 0x801bb9 <errno>
    fc86:	7b 01       	movw	r14, r22
    fc88:	83 e0       	ldi	r24, 0x03	; 3
    fc8a:	e8 22       	and	r14, r24
    fc8c:	ff 24       	eor	r15, r15
    fc8e:	e2 e0       	ldi	r30, 0x02	; 2
    fc90:	ee 16       	cp	r14, r30
    fc92:	f1 04       	cpc	r15, r1
    fc94:	31 f0       	breq	.+12     	; 0xfca2 <open+0x34>
    fc96:	e1 14       	cp	r14, r1
    fc98:	f1 04       	cpc	r15, r1
    fc9a:	31 f0       	breq	.+12     	; 0xfca8 <open+0x3a>
    fc9c:	02 e0       	ldi	r16, 0x02	; 2
    fc9e:	10 e0       	ldi	r17, 0x00	; 0
    fca0:	05 c0       	rjmp	.+10     	; 0xfcac <open+0x3e>
    fca2:	03 e0       	ldi	r16, 0x03	; 3
    fca4:	10 e0       	ldi	r17, 0x00	; 0
    fca6:	02 c0       	rjmp	.+4      	; 0xfcac <open+0x3e>
    fca8:	01 e0       	ldi	r16, 0x01	; 1
    fcaa:	10 e0       	ldi	r17, 0x00	; 0
    fcac:	c6 fe       	sbrs	r12, 6
    fcae:	05 c0       	rjmp	.+10     	; 0xfcba <open+0x4c>
    fcb0:	d1 fe       	sbrs	r13, 1
    fcb2:	02 c0       	rjmp	.+4      	; 0xfcb8 <open+0x4a>
    fcb4:	08 60       	ori	r16, 0x08	; 8
    fcb6:	01 c0       	rjmp	.+2      	; 0xfcba <open+0x4c>
    fcb8:	00 61       	ori	r16, 0x10	; 16
    fcba:	94 df       	rcall	.-216    	; 0xfbe4 <new_file_descriptor>
    fcbc:	3c 01       	movw	r6, r24
    fcbe:	90 d9       	rcall	.-3296   	; 0xefe0 <fileno_to_stream>
    fcc0:	ec 01       	movw	r28, r24
    fcc2:	c3 01       	movw	r24, r6
    fcc4:	20 97       	sbiw	r28, 0x00	; 0
    fcc6:	09 f4       	brne	.+2      	; 0xfcca <open+0x5c>
    fcc8:	48 c0       	rjmp	.+144    	; 0xfd5a <open+0xec>
    fcca:	05 dd       	rcall	.-1526   	; 0xf6d6 <fileno_to_fatfs>
    fccc:	4c 01       	movw	r8, r24
    fcce:	00 97       	sbiw	r24, 0x00	; 0
    fcd0:	59 f4       	brne	.+22     	; 0xfce8 <open+0x7a>
    fcd2:	c3 01       	movw	r24, r6
    fcd4:	19 df       	rcall	.-462    	; 0xfb08 <free_file_descriptor>
    fcd6:	89 e0       	ldi	r24, 0x09	; 9
    fcd8:	90 e0       	ldi	r25, 0x00	; 0
    fcda:	90 93 ba 1b 	sts	0x1BBA, r25	; 0x801bba <errno+0x1>
    fcde:	80 93 b9 1b 	sts	0x1BB9, r24	; 0x801bb9 <errno>
    fce2:	8f ef       	ldi	r24, 0xFF	; 255
    fce4:	9f ef       	ldi	r25, 0xFF	; 255
    fce6:	5d c0       	rjmp	.+186    	; 0xfda2 <open+0x134>
    fce8:	40 2f       	mov	r20, r16
    fcea:	b5 01       	movw	r22, r10
    fcec:	0e 94 4d 5b 	call	0xb69a	; 0xb69a <f_open>
    fcf0:	00 97       	sbiw	r24, 0x00	; 0
    fcf2:	91 f0       	breq	.+36     	; 0xfd18 <open+0xaa>
    fcf4:	84 31       	cpi	r24, 0x14	; 20
    fcf6:	91 05       	cpc	r25, r1
    fcf8:	40 f4       	brcc	.+16     	; 0xfd0a <open+0x9c>
    fcfa:	fc 01       	movw	r30, r24
    fcfc:	e0 5f       	subi	r30, 0xF0	; 240
    fcfe:	f8 4f       	sbci	r31, 0xF8	; 248
    fd00:	80 81       	ld	r24, Z
    fd02:	08 2e       	mov	r0, r24
    fd04:	00 0c       	add	r0, r0
    fd06:	99 0b       	sbc	r25, r25
    fd08:	02 c0       	rjmp	.+4      	; 0xfd0e <open+0xa0>
    fd0a:	83 e2       	ldi	r24, 0x23	; 35
    fd0c:	90 e0       	ldi	r25, 0x00	; 0
    fd0e:	90 93 ba 1b 	sts	0x1BBA, r25	; 0x801bba <errno+0x1>
    fd12:	80 93 b9 1b 	sts	0x1BB9, r24	; 0x801bb9 <errno>
    fd16:	20 c0       	rjmp	.+64     	; 0xfd58 <open+0xea>
    fd18:	d2 fe       	sbrs	r13, 2
    fd1a:	21 c0       	rjmp	.+66     	; 0xfd5e <open+0xf0>
    fd1c:	f4 01       	movw	r30, r8
    fd1e:	42 85       	ldd	r20, Z+10	; 0x0a
    fd20:	53 85       	ldd	r21, Z+11	; 0x0b
    fd22:	64 85       	ldd	r22, Z+12	; 0x0c
    fd24:	75 85       	ldd	r23, Z+13	; 0x0d
    fd26:	c4 01       	movw	r24, r8
    fd28:	0e 94 14 62 	call	0xc428	; 0xc428 <f_lseek>
    fd2c:	00 97       	sbiw	r24, 0x00	; 0
    fd2e:	b9 f0       	breq	.+46     	; 0xfd5e <open+0xf0>
    fd30:	84 31       	cpi	r24, 0x14	; 20
    fd32:	91 05       	cpc	r25, r1
    fd34:	40 f4       	brcc	.+16     	; 0xfd46 <open+0xd8>
    fd36:	fc 01       	movw	r30, r24
    fd38:	e0 5f       	subi	r30, 0xF0	; 240
    fd3a:	f8 4f       	sbci	r31, 0xF8	; 248
    fd3c:	80 81       	ld	r24, Z
    fd3e:	08 2e       	mov	r0, r24
    fd40:	00 0c       	add	r0, r0
    fd42:	99 0b       	sbc	r25, r25
    fd44:	02 c0       	rjmp	.+4      	; 0xfd4a <open+0xdc>
    fd46:	83 e2       	ldi	r24, 0x23	; 35
    fd48:	90 e0       	ldi	r25, 0x00	; 0
    fd4a:	90 93 ba 1b 	sts	0x1BBA, r25	; 0x801bba <errno+0x1>
    fd4e:	80 93 b9 1b 	sts	0x1BB9, r24	; 0x801bb9 <errno>
    fd52:	c4 01       	movw	r24, r8
    fd54:	0e 94 6a 60 	call	0xc0d4	; 0xc0d4 <f_close>
    fd58:	c3 01       	movw	r24, r6
    fd5a:	d6 de       	rcall	.-596    	; 0xfb08 <free_file_descriptor>
    fd5c:	c2 cf       	rjmp	.-124    	; 0xfce2 <open+0x74>
    fd5e:	f2 e0       	ldi	r31, 0x02	; 2
    fd60:	ef 16       	cp	r14, r31
    fd62:	f1 04       	cpc	r15, r1
    fd64:	51 f4       	brne	.+20     	; 0xfd7a <open+0x10c>
    fd66:	8f e6       	ldi	r24, 0x6F	; 111
    fd68:	96 e7       	ldi	r25, 0x76	; 118
    fd6a:	99 87       	std	Y+9, r25	; 0x09
    fd6c:	88 87       	std	Y+8, r24	; 0x08
    fd6e:	8c ee       	ldi	r24, 0xEC	; 236
    fd70:	95 e7       	ldi	r25, 0x75	; 117
    fd72:	9b 87       	std	Y+11, r25	; 0x0b
    fd74:	8a 87       	std	Y+10, r24	; 0x0a
    fd76:	83 e0       	ldi	r24, 0x03	; 3
    fd78:	12 c0       	rjmp	.+36     	; 0xfd9e <open+0x130>
    fd7a:	e1 14       	cp	r14, r1
    fd7c:	f1 04       	cpc	r15, r1
    fd7e:	41 f4       	brne	.+16     	; 0xfd90 <open+0x122>
    fd80:	19 86       	std	Y+9, r1	; 0x09
    fd82:	18 86       	std	Y+8, r1	; 0x08
    fd84:	8c ee       	ldi	r24, 0xEC	; 236
    fd86:	95 e7       	ldi	r25, 0x75	; 117
    fd88:	9b 87       	std	Y+11, r25	; 0x0b
    fd8a:	8a 87       	std	Y+10, r24	; 0x0a
    fd8c:	81 e0       	ldi	r24, 0x01	; 1
    fd8e:	07 c0       	rjmp	.+14     	; 0xfd9e <open+0x130>
    fd90:	8f e6       	ldi	r24, 0x6F	; 111
    fd92:	96 e7       	ldi	r25, 0x76	; 118
    fd94:	99 87       	std	Y+9, r25	; 0x09
    fd96:	88 87       	std	Y+8, r24	; 0x08
    fd98:	1b 86       	std	Y+11, r1	; 0x0b
    fd9a:	1a 86       	std	Y+10, r1	; 0x0a
    fd9c:	82 e0       	ldi	r24, 0x02	; 2
    fd9e:	8b 83       	std	Y+3, r24	; 0x03
    fda0:	c3 01       	movw	r24, r6
    fda2:	cd b7       	in	r28, 0x3d	; 61
    fda4:	de b7       	in	r29, 0x3e	; 62
    fda6:	ee e0       	ldi	r30, 0x0E	; 14
    fda8:	0c 94 00 e6 	jmp	0x1cc00	; 0x1cc00 <__epilogue_restores__+0x8>

0000fdac <posix_fopen_modes_to_open>:
    fdac:	cf 93       	push	r28
    fdae:	df 93       	push	r29
    fdb0:	ec 01       	movw	r28, r24
    fdb2:	61 e4       	ldi	r22, 0x41	; 65
    fdb4:	77 e0       	ldi	r23, 0x07	; 7
    fdb6:	0e 94 c7 32 	call	0x658e	; 0x658e <strcmp>
    fdba:	00 97       	sbiw	r24, 0x00	; 0
    fdbc:	09 f4       	brne	.+2      	; 0xfdc0 <posix_fopen_modes_to_open+0x14>
    fdbe:	5d c0       	rjmp	.+186    	; 0xfe7a <posix_fopen_modes_to_open+0xce>
    fdc0:	66 e8       	ldi	r22, 0x86	; 134
    fdc2:	78 e0       	ldi	r23, 0x08	; 8
    fdc4:	ce 01       	movw	r24, r28
    fdc6:	0e 94 c7 32 	call	0x658e	; 0x658e <strcmp>
    fdca:	00 97       	sbiw	r24, 0x00	; 0
    fdcc:	09 f4       	brne	.+2      	; 0xfdd0 <posix_fopen_modes_to_open+0x24>
    fdce:	55 c0       	rjmp	.+170    	; 0xfe7a <posix_fopen_modes_to_open+0xce>
    fdd0:	69 e8       	ldi	r22, 0x89	; 137
    fdd2:	78 e0       	ldi	r23, 0x08	; 8
    fdd4:	ce 01       	movw	r24, r28
    fdd6:	0e 94 c7 32 	call	0x658e	; 0x658e <strcmp>
    fdda:	89 2b       	or	r24, r25
    fddc:	09 f4       	brne	.+2      	; 0xfde0 <posix_fopen_modes_to_open+0x34>
    fdde:	42 c0       	rjmp	.+132    	; 0xfe64 <posix_fopen_modes_to_open+0xb8>
    fde0:	6c e8       	ldi	r22, 0x8C	; 140
    fde2:	78 e0       	ldi	r23, 0x08	; 8
    fde4:	ce 01       	movw	r24, r28
    fde6:	0e 94 c7 32 	call	0x658e	; 0x658e <strcmp>
    fdea:	89 2b       	or	r24, r25
    fdec:	d9 f1       	breq	.+118    	; 0xfe64 <posix_fopen_modes_to_open+0xb8>
    fdee:	60 e9       	ldi	r22, 0x90	; 144
    fdf0:	78 e0       	ldi	r23, 0x08	; 8
    fdf2:	ce 01       	movw	r24, r28
    fdf4:	0e 94 c7 32 	call	0x658e	; 0x658e <strcmp>
    fdf8:	89 2b       	or	r24, r25
    fdfa:	a1 f1       	breq	.+104    	; 0xfe64 <posix_fopen_modes_to_open+0xb8>
    fdfc:	65 e4       	ldi	r22, 0x45	; 69
    fdfe:	7a e0       	ldi	r23, 0x0A	; 10
    fe00:	ce 01       	movw	r24, r28
    fe02:	0e 94 c7 32 	call	0x658e	; 0x658e <strcmp>
    fe06:	89 2b       	or	r24, r25
    fe08:	81 f1       	breq	.+96     	; 0xfe6a <posix_fopen_modes_to_open+0xbe>
    fe0a:	64 e9       	ldi	r22, 0x94	; 148
    fe0c:	78 e0       	ldi	r23, 0x08	; 8
    fe0e:	ce 01       	movw	r24, r28
    fe10:	0e 94 c7 32 	call	0x658e	; 0x658e <strcmp>
    fe14:	89 2b       	or	r24, r25
    fe16:	49 f1       	breq	.+82     	; 0xfe6a <posix_fopen_modes_to_open+0xbe>
    fe18:	67 e9       	ldi	r22, 0x97	; 151
    fe1a:	78 e0       	ldi	r23, 0x08	; 8
    fe1c:	ce 01       	movw	r24, r28
    fe1e:	0e 94 c7 32 	call	0x658e	; 0x658e <strcmp>
    fe22:	89 2b       	or	r24, r25
    fe24:	29 f1       	breq	.+74     	; 0xfe70 <posix_fopen_modes_to_open+0xc4>
    fe26:	6a e9       	ldi	r22, 0x9A	; 154
    fe28:	78 e0       	ldi	r23, 0x08	; 8
    fe2a:	ce 01       	movw	r24, r28
    fe2c:	0e 94 c7 32 	call	0x658e	; 0x658e <strcmp>
    fe30:	89 2b       	or	r24, r25
    fe32:	f1 f0       	breq	.+60     	; 0xfe70 <posix_fopen_modes_to_open+0xc4>
    fe34:	6e e9       	ldi	r22, 0x9E	; 158
    fe36:	78 e0       	ldi	r23, 0x08	; 8
    fe38:	ce 01       	movw	r24, r28
    fe3a:	0e 94 c7 32 	call	0x658e	; 0x658e <strcmp>
    fe3e:	89 2b       	or	r24, r25
    fe40:	b9 f0       	breq	.+46     	; 0xfe70 <posix_fopen_modes_to_open+0xc4>
    fe42:	67 e7       	ldi	r22, 0x77	; 119
    fe44:	72 e1       	ldi	r23, 0x12	; 18
    fe46:	ce 01       	movw	r24, r28
    fe48:	0e 94 c7 32 	call	0x658e	; 0x658e <strcmp>
    fe4c:	89 2b       	or	r24, r25
    fe4e:	99 f0       	breq	.+38     	; 0xfe76 <posix_fopen_modes_to_open+0xca>
    fe50:	62 ea       	ldi	r22, 0xA2	; 162
    fe52:	78 e0       	ldi	r23, 0x08	; 8
    fe54:	ce 01       	movw	r24, r28
    fe56:	0e 94 c7 32 	call	0x658e	; 0x658e <strcmp>
    fe5a:	89 2b       	or	r24, r25
    fe5c:	61 f0       	breq	.+24     	; 0xfe76 <posix_fopen_modes_to_open+0xca>
    fe5e:	8f ef       	ldi	r24, 0xFF	; 255
    fe60:	9f ef       	ldi	r25, 0xFF	; 255
    fe62:	0b c0       	rjmp	.+22     	; 0xfe7a <posix_fopen_modes_to_open+0xce>
    fe64:	82 e0       	ldi	r24, 0x02	; 2
    fe66:	92 e0       	ldi	r25, 0x02	; 2
    fe68:	08 c0       	rjmp	.+16     	; 0xfe7a <posix_fopen_modes_to_open+0xce>
    fe6a:	81 e4       	ldi	r24, 0x41	; 65
    fe6c:	92 e0       	ldi	r25, 0x02	; 2
    fe6e:	05 c0       	rjmp	.+10     	; 0xfe7a <posix_fopen_modes_to_open+0xce>
    fe70:	82 e4       	ldi	r24, 0x42	; 66
    fe72:	92 e0       	ldi	r25, 0x02	; 2
    fe74:	02 c0       	rjmp	.+4      	; 0xfe7a <posix_fopen_modes_to_open+0xce>
    fe76:	81 e4       	ldi	r24, 0x41	; 65
    fe78:	94 e0       	ldi	r25, 0x04	; 4
    fe7a:	df 91       	pop	r29
    fe7c:	cf 91       	pop	r28
    fe7e:	08 95       	ret

0000fe80 <fopen>:
    fe80:	cf 93       	push	r28
    fe82:	df 93       	push	r29
    fe84:	ec 01       	movw	r28, r24
    fe86:	cb 01       	movw	r24, r22
    fe88:	91 df       	rcall	.-222    	; 0xfdac <posix_fopen_modes_to_open>
    fe8a:	bc 01       	movw	r22, r24
    fe8c:	ce 01       	movw	r24, r28
    fe8e:	ef de       	rcall	.-546    	; 0xfc6e <open>
    fe90:	a7 d8       	rcall	.-3762   	; 0xefe0 <fileno_to_stream>
    fe92:	df 91       	pop	r29
    fe94:	cf 91       	pop	r28
    fe96:	08 95       	ret

0000fe98 <fprintf>:
    fe98:	a8 e0       	ldi	r26, 0x08	; 8
    fe9a:	b0 e0       	ldi	r27, 0x00	; 0
    fe9c:	e2 e5       	ldi	r30, 0x52	; 82
    fe9e:	ff e7       	ldi	r31, 0x7F	; 127
    fea0:	0c 94 f0 e5 	jmp	0x1cbe0	; 0x1cbe0 <__prologue_saves__+0x20>
    fea4:	88 e5       	ldi	r24, 0x58	; 88
    fea6:	97 e7       	ldi	r25, 0x77	; 119
    fea8:	9a 83       	std	Y+2, r25	; 0x02
    feaa:	89 83       	std	Y+1, r24	; 0x01
    feac:	18 86       	std	Y+8, r1	; 0x08
    feae:	1f 82       	std	Y+7, r1	; 0x07
    feb0:	8d 85       	ldd	r24, Y+13	; 0x0d
    feb2:	9e 85       	ldd	r25, Y+14	; 0x0e
    feb4:	9c 83       	std	Y+4, r25	; 0x04
    feb6:	8b 83       	std	Y+3, r24	; 0x03
    feb8:	4f 85       	ldd	r20, Y+15	; 0x0f
    feba:	58 89       	ldd	r21, Y+16	; 0x10
    febc:	60 e8       	ldi	r22, 0x80	; 128
    febe:	9e 01       	movw	r18, r28
    fec0:	2f 5e       	subi	r18, 0xEF	; 239
    fec2:	3f 4f       	sbci	r19, 0xFF	; 255
    fec4:	ce 01       	movw	r24, r28
    fec6:	01 96       	adiw	r24, 0x01	; 1
    fec8:	0e 94 f3 42 	call	0x85e6	; 0x85e6 <_printf_fn>
    fecc:	8f 81       	ldd	r24, Y+7	; 0x07
    fece:	98 85       	ldd	r25, Y+8	; 0x08
    fed0:	28 96       	adiw	r28, 0x08	; 8
    fed2:	e2 e0       	ldi	r30, 0x02	; 2
    fed4:	0c 94 0c e6 	jmp	0x1cc18	; 0x1cc18 <__epilogue_restores__+0x20>

0000fed8 <posix_help>:
    fed8:	cf 93       	push	r28
    feda:	df 93       	push	r29
    fedc:	ec 01       	movw	r28, r24
    fede:	82 ea       	ldi	r24, 0xA2	; 162
    fee0:	9e e0       	ldi	r25, 0x0E	; 14
    fee2:	1f 92       	push	r1
    fee4:	9f 93       	push	r25
    fee6:	8f 93       	push	r24
    fee8:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    feec:	0f 90       	pop	r0
    feee:	0f 90       	pop	r0
    fef0:	0f 90       	pop	r0
    fef2:	cd 2b       	or	r28, r29
    fef4:	51 f0       	breq	.+20     	; 0xff0a <__DATA_REGION_LENGTH__+0xa>
    fef6:	82 ee       	ldi	r24, 0xE2	; 226
    fef8:	9d e0       	ldi	r25, 0x0D	; 13
    fefa:	1f 92       	push	r1
    fefc:	9f 93       	push	r25
    fefe:	8f 93       	push	r24
    ff00:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    ff04:	0f 90       	pop	r0
    ff06:	0f 90       	pop	r0
    ff08:	0f 90       	pop	r0
    ff0a:	df 91       	pop	r29
    ff0c:	cf 91       	pop	r28
    ff0e:	08 95       	ret

0000ff10 <copy>:
    ff10:	4f 92       	push	r4
    ff12:	5f 92       	push	r5
    ff14:	6f 92       	push	r6
    ff16:	8f 92       	push	r8
    ff18:	9f 92       	push	r9
    ff1a:	af 92       	push	r10
    ff1c:	bf 92       	push	r11
    ff1e:	cf 92       	push	r12
    ff20:	df 92       	push	r13
    ff22:	ef 92       	push	r14
    ff24:	ff 92       	push	r15
    ff26:	0f 93       	push	r16
    ff28:	1f 93       	push	r17
    ff2a:	cf 93       	push	r28
    ff2c:	df 93       	push	r29
    ff2e:	18 2f       	mov	r17, r24
    ff30:	09 2f       	mov	r16, r25
    ff32:	eb 01       	movw	r28, r22
    ff34:	9f 93       	push	r25
    ff36:	8f 93       	push	r24
    ff38:	85 eb       	ldi	r24, 0xB5	; 181
    ff3a:	9d e0       	ldi	r25, 0x0D	; 13
    ff3c:	1f 92       	push	r1
    ff3e:	9f 93       	push	r25
    ff40:	8f 93       	push	r24
    ff42:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    ff46:	66 e8       	ldi	r22, 0x86	; 134
    ff48:	78 e0       	ldi	r23, 0x08	; 8
    ff4a:	81 2f       	mov	r24, r17
    ff4c:	90 2f       	mov	r25, r16
    ff4e:	98 df       	rcall	.-208    	; 0xfe80 <fopen>
    ff50:	7c 01       	movw	r14, r24
    ff52:	0f 90       	pop	r0
    ff54:	0f 90       	pop	r0
    ff56:	0f 90       	pop	r0
    ff58:	0f 90       	pop	r0
    ff5a:	0f 90       	pop	r0
    ff5c:	89 2b       	or	r24, r25
    ff5e:	51 f4       	brne	.+20     	; 0xff74 <copy+0x64>
    ff60:	0f 93       	push	r16
    ff62:	1f 93       	push	r17
    ff64:	85 ea       	ldi	r24, 0xA5	; 165
    ff66:	9d e0       	ldi	r25, 0x0D	; 13
    ff68:	1f 92       	push	r1
    ff6a:	9f 93       	push	r25
    ff6c:	8f 93       	push	r24
    ff6e:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    ff72:	21 c0       	rjmp	.+66     	; 0xffb6 <copy+0xa6>
    ff74:	df 93       	push	r29
    ff76:	cf 93       	push	r28
    ff78:	88 e9       	ldi	r24, 0x98	; 152
    ff7a:	9d e0       	ldi	r25, 0x0D	; 13
    ff7c:	1f 92       	push	r1
    ff7e:	9f 93       	push	r25
    ff80:	8f 93       	push	r24
    ff82:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    ff86:	64 e9       	ldi	r22, 0x94	; 148
    ff88:	78 e0       	ldi	r23, 0x08	; 8
    ff8a:	ce 01       	movw	r24, r28
    ff8c:	79 df       	rcall	.-270    	; 0xfe80 <fopen>
    ff8e:	8c 01       	movw	r16, r24
    ff90:	0f 90       	pop	r0
    ff92:	0f 90       	pop	r0
    ff94:	0f 90       	pop	r0
    ff96:	0f 90       	pop	r0
    ff98:	0f 90       	pop	r0
    ff9a:	89 2b       	or	r24, r25
    ff9c:	b1 f4       	brne	.+44     	; 0xffca <copy+0xba>
    ff9e:	df 93       	push	r29
    ffa0:	cf 93       	push	r28
    ffa2:	88 e8       	ldi	r24, 0x88	; 136
    ffa4:	9d e0       	ldi	r25, 0x0D	; 13
    ffa6:	1f 92       	push	r1
    ffa8:	9f 93       	push	r25
    ffaa:	8f 93       	push	r24
    ffac:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    ffb0:	80 e0       	ldi	r24, 0x00	; 0
    ffb2:	90 e0       	ldi	r25, 0x00	; 0
    ffb4:	0f de       	rcall	.-994    	; 0xfbd4 <fclose>
    ffb6:	0f 90       	pop	r0
    ffb8:	0f 90       	pop	r0
    ffba:	0f 90       	pop	r0
    ffbc:	0f 90       	pop	r0
    ffbe:	0f 90       	pop	r0
    ffc0:	60 e0       	ldi	r22, 0x00	; 0
    ffc2:	70 e0       	ldi	r23, 0x00	; 0
    ffc4:	80 e0       	ldi	r24, 0x00	; 0
    ffc6:	90 e0       	ldi	r25, 0x00	; 0
    ffc8:	73 c0       	rjmp	.+230    	; 0x100b0 <__EEPROM_REGION_LENGTH__+0xb0>
    ffca:	61 e0       	ldi	r22, 0x01	; 1
    ffcc:	70 e0       	ldi	r23, 0x00	; 0
    ffce:	80 e0       	ldi	r24, 0x00	; 0
    ffd0:	92 e0       	ldi	r25, 0x02	; 2
    ffd2:	0e 94 86 29 	call	0x530c	; 0x530c <safecalloc>
    ffd6:	6c 01       	movw	r12, r24
    ffd8:	89 2b       	or	r24, r25
    ffda:	29 f4       	brne	.+10     	; 0xffe6 <copy+0xd6>
    ffdc:	c7 01       	movw	r24, r14
    ffde:	fa dd       	rcall	.-1036   	; 0xfbd4 <fclose>
    ffe0:	c8 01       	movw	r24, r16
    ffe2:	f8 dd       	rcall	.-1040   	; 0xfbd4 <fclose>
    ffe4:	ed cf       	rjmp	.-38     	; 0xffc0 <copy+0xb0>
    ffe6:	8b e7       	ldi	r24, 0x7B	; 123
    ffe8:	9d e0       	ldi	r25, 0x0D	; 13
    ffea:	1f 92       	push	r1
    ffec:	9f 93       	push	r25
    ffee:	8f 93       	push	r24
    fff0:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    fff4:	0f 90       	pop	r0
    fff6:	0f 90       	pop	r0
    fff8:	0f 90       	pop	r0
    fffa:	81 2c       	mov	r8, r1
    fffc:	91 2c       	mov	r9, r1
    fffe:	54 01       	movw	r10, r8
   10000:	8f e5       	ldi	r24, 0x5F	; 95
   10002:	9d e0       	ldi	r25, 0x0D	; 13
   10004:	2c 01       	movw	r4, r24
   10006:	97 01       	movw	r18, r14
   10008:	40 e0       	ldi	r20, 0x00	; 0
   1000a:	52 e0       	ldi	r21, 0x02	; 2
   1000c:	61 e0       	ldi	r22, 0x01	; 1
   1000e:	70 e0       	ldi	r23, 0x00	; 0
   10010:	c6 01       	movw	r24, r12
   10012:	8c dc       	rcall	.-1768   	; 0xf92c <fread>
   10014:	ec 01       	movw	r28, r24
   10016:	18 16       	cp	r1, r24
   10018:	19 06       	cpc	r1, r25
   1001a:	74 f5       	brge	.+92     	; 0x10078 <__EEPROM_REGION_LENGTH__+0x78>
   1001c:	98 01       	movw	r18, r16
   1001e:	ae 01       	movw	r20, r28
   10020:	61 e0       	ldi	r22, 0x01	; 1
   10022:	70 e0       	ldi	r23, 0x00	; 0
   10024:	c6 01       	movw	r24, r12
   10026:	54 dd       	rcall	.-1368   	; 0xfad0 <fwrite>
   10028:	8c 17       	cp	r24, r28
   1002a:	9d 07       	cpc	r25, r29
   1002c:	5c f4       	brge	.+22     	; 0x10044 <__EEPROM_REGION_LENGTH__+0x44>
   1002e:	8e e6       	ldi	r24, 0x6E	; 110
   10030:	9d e0       	ldi	r25, 0x0D	; 13
   10032:	1f 92       	push	r1
   10034:	9f 93       	push	r25
   10036:	8f 93       	push	r24
   10038:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1003c:	0f 90       	pop	r0
   1003e:	0f 90       	pop	r0
   10040:	0f 90       	pop	r0
   10042:	1a c0       	rjmp	.+52     	; 0x10078 <__EEPROM_REGION_LENGTH__+0x78>
   10044:	ce 01       	movw	r24, r28
   10046:	dd 0f       	add	r29, r29
   10048:	aa 0b       	sbc	r26, r26
   1004a:	bb 0b       	sbc	r27, r27
   1004c:	88 0e       	add	r8, r24
   1004e:	99 1e       	adc	r9, r25
   10050:	aa 1e       	adc	r10, r26
   10052:	bb 1e       	adc	r11, r27
   10054:	bf 92       	push	r11
   10056:	af 92       	push	r10
   10058:	9f 92       	push	r9
   1005a:	8f 92       	push	r8
   1005c:	1f 92       	push	r1
   1005e:	5f 92       	push	r5
   10060:	4f 92       	push	r4
   10062:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   10066:	8d b7       	in	r24, 0x3d	; 61
   10068:	9e b7       	in	r25, 0x3e	; 62
   1006a:	07 96       	adiw	r24, 0x07	; 7
   1006c:	0f b6       	in	r0, 0x3f	; 63
   1006e:	f8 94       	cli
   10070:	9e bf       	out	0x3e, r25	; 62
   10072:	0f be       	out	0x3f, r0	; 63
   10074:	8d bf       	out	0x3d, r24	; 61
   10076:	c7 cf       	rjmp	.-114    	; 0x10006 <__EEPROM_REGION_LENGTH__+0x6>
   10078:	bf 92       	push	r11
   1007a:	af 92       	push	r10
   1007c:	9f 92       	push	r9
   1007e:	8f 92       	push	r8
   10080:	8c e4       	ldi	r24, 0x4C	; 76
   10082:	9d e0       	ldi	r25, 0x0D	; 13
   10084:	1f 92       	push	r1
   10086:	9f 93       	push	r25
   10088:	8f 93       	push	r24
   1008a:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1008e:	c6 01       	movw	r24, r12
   10090:	0e 94 cf 29 	call	0x539e	; 0x539e <safefree>
   10094:	c7 01       	movw	r24, r14
   10096:	9e dd       	rcall	.-1220   	; 0xfbd4 <fclose>
   10098:	c8 01       	movw	r24, r16
   1009a:	9c dd       	rcall	.-1224   	; 0xfbd4 <fclose>
   1009c:	8d b7       	in	r24, 0x3d	; 61
   1009e:	9e b7       	in	r25, 0x3e	; 62
   100a0:	07 96       	adiw	r24, 0x07	; 7
   100a2:	0f b6       	in	r0, 0x3f	; 63
   100a4:	f8 94       	cli
   100a6:	9e bf       	out	0x3e, r25	; 62
   100a8:	0f be       	out	0x3f, r0	; 63
   100aa:	8d bf       	out	0x3d, r24	; 61
   100ac:	b4 01       	movw	r22, r8
   100ae:	c5 01       	movw	r24, r10
   100b0:	df 91       	pop	r29
   100b2:	cf 91       	pop	r28
   100b4:	1f 91       	pop	r17
   100b6:	0f 91       	pop	r16
   100b8:	ff 90       	pop	r15
   100ba:	ef 90       	pop	r14
   100bc:	df 90       	pop	r13
   100be:	cf 90       	pop	r12
   100c0:	bf 90       	pop	r11
   100c2:	af 90       	pop	r10
   100c4:	9f 90       	pop	r9
   100c6:	8f 90       	pop	r8
   100c8:	6f 90       	pop	r6
   100ca:	5f 90       	pop	r5
   100cc:	4f 90       	pop	r4
   100ce:	08 95       	ret

000100d0 <testpage>:
   100d0:	cf 93       	push	r28
   100d2:	df 93       	push	r29
   100d4:	20 91 87 01 	lds	r18, 0x0187	; 0x800187 <_pagesize>
   100d8:	30 91 88 01 	lds	r19, 0x0188	; 0x800188 <_pagesize+0x1>
   100dc:	82 17       	cp	r24, r18
   100de:	93 07       	cpc	r25, r19
   100e0:	3c f1       	brlt	.+78     	; 0x10130 <testpage+0x60>
   100e2:	85 e4       	ldi	r24, 0x45	; 69
   100e4:	9d e0       	ldi	r25, 0x0D	; 13
   100e6:	1f 92       	push	r1
   100e8:	9f 93       	push	r25
   100ea:	8f 93       	push	r24
   100ec:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   100f0:	0e 94 65 77 	call	0xeeca	; 0xeeca <getchar>
   100f4:	ec 01       	movw	r28, r24
   100f6:	83 e4       	ldi	r24, 0x43	; 67
   100f8:	9d e0       	ldi	r25, 0x0D	; 13
   100fa:	1f 92       	push	r1
   100fc:	9f 93       	push	r25
   100fe:	8f 93       	push	r24
   10100:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   10104:	0f 90       	pop	r0
   10106:	0f 90       	pop	r0
   10108:	0f 90       	pop	r0
   1010a:	0f 90       	pop	r0
   1010c:	0f 90       	pop	r0
   1010e:	0f 90       	pop	r0
   10110:	c1 37       	cpi	r28, 0x71	; 113
   10112:	d1 05       	cpc	r29, r1
   10114:	41 f0       	breq	.+16     	; 0x10126 <testpage+0x56>
   10116:	2a 97       	sbiw	r28, 0x0a	; 10
   10118:	49 f4       	brne	.+18     	; 0x1012c <testpage+0x5c>
   1011a:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <_pagesize>
   1011e:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <_pagesize+0x1>
   10122:	01 97       	sbiw	r24, 0x01	; 1
   10124:	05 c0       	rjmp	.+10     	; 0x10130 <testpage+0x60>
   10126:	8f ef       	ldi	r24, 0xFF	; 255
   10128:	9f ef       	ldi	r25, 0xFF	; 255
   1012a:	02 c0       	rjmp	.+4      	; 0x10130 <testpage+0x60>
   1012c:	80 e0       	ldi	r24, 0x00	; 0
   1012e:	90 e0       	ldi	r25, 0x00	; 0
   10130:	df 91       	pop	r29
   10132:	cf 91       	pop	r28
   10134:	08 95       	ret

00010136 <cat>:
/// @param[in] name: file name.
/// @param[in] option: --p page display
/// @return  void.
MEMSPACE
long cat(char *name, int dopage)
{
   10136:	a0 e0       	ldi	r26, 0x00	; 0
   10138:	b1 e0       	ldi	r27, 0x01	; 1
   1013a:	e1 ea       	ldi	r30, 0xA1	; 161
   1013c:	f0 e8       	ldi	r31, 0x80	; 128
   1013e:	0c 94 e6 e5 	jmp	0x1cbcc	; 0x1cbcc <__prologue_saves__+0xc>
   10142:	18 2f       	mov	r17, r24
   10144:	09 2f       	mov	r16, r25
   10146:	4b 01       	movw	r8, r22
    FILE *fp;
    int count = 0;
    int size = 0;
    char line[256];

    fp = fopen(name,"rb");
   10148:	66 e8       	ldi	r22, 0x86	; 134
   1014a:	78 e0       	ldi	r23, 0x08	; 8
   1014c:	99 de       	rcall	.-718    	; 0xfe80 <fopen>
   1014e:	7c 01       	movw	r14, r24
    if (!fp)
   10150:	89 2b       	or	r24, r25
   10152:	41 f0       	breq	.+16     	; 0x10164 <cat+0x2e>
   10154:	c1 2c       	mov	r12, r1
   10156:	d1 2c       	mov	r13, r1
   10158:	a1 2c       	mov	r10, r1
   1015a:	b1 2c       	mov	r11, r1
    {
        printf("Can't open: %s\n", name);
        return(0);
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
   1015c:	8e 01       	movw	r16, r28
   1015e:	0f 5f       	subi	r16, 0xFF	; 255
   10160:	1f 4f       	sbci	r17, 0xFF	; 255
   10162:	24 c0       	rjmp	.+72     	; 0x101ac <cat+0x76>
    char line[256];

    fp = fopen(name,"rb");
    if (!fp)
    {
        printf("Can't open: %s\n", name);
   10164:	0f 93       	push	r16
   10166:	1f 93       	push	r17
   10168:	8e ec       	ldi	r24, 0xCE	; 206
   1016a:	9d e0       	ldi	r25, 0x0D	; 13
   1016c:	1f 92       	push	r1
   1016e:	9f 93       	push	r25
   10170:	8f 93       	push	r24
   10172:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
        return(0);
   10176:	0f 90       	pop	r0
   10178:	0f 90       	pop	r0
   1017a:	0f 90       	pop	r0
   1017c:	0f 90       	pop	r0
   1017e:	0f 90       	pop	r0
   10180:	c1 2c       	mov	r12, r1
   10182:	d1 2c       	mov	r13, r1
   10184:	76 01       	movw	r14, r12
   10186:	3e c0       	rjmp	.+124    	; 0x10204 <cat+0xce>
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
    {
        trim_tail(line);
   10188:	c8 01       	movw	r24, r16
   1018a:	0e 94 ad 32 	call	0x655a	; 0x655a <trim_tail>
        size += strlen(line);
   1018e:	f8 01       	movw	r30, r16
   10190:	01 90       	ld	r0, Z+
   10192:	00 20       	and	r0, r0
   10194:	e9 f7       	brne	.-6      	; 0x10190 <cat+0x5a>
   10196:	31 97       	sbiw	r30, 0x01	; 1
   10198:	e0 1b       	sub	r30, r16
   1019a:	f1 0b       	sbc	r31, r17
   1019c:	ce 0e       	add	r12, r30
   1019e:	df 1e       	adc	r13, r31
        puts(line);
   101a0:	c8 01       	movw	r24, r16
   101a2:	0e 94 bd 77 	call	0xef7a	; 0xef7a <puts>
        if(dopage)
   101a6:	81 14       	cp	r8, r1
   101a8:	91 04       	cpc	r9, r1
   101aa:	49 f4       	brne	.+18     	; 0x101be <cat+0x88>
    if (!fp)
    {
        printf("Can't open: %s\n", name);
        return(0);
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
   101ac:	a7 01       	movw	r20, r14
   101ae:	6e ef       	ldi	r22, 0xFE	; 254
   101b0:	70 e0       	ldi	r23, 0x00	; 0
   101b2:	c8 01       	movw	r24, r16
   101b4:	0e 94 71 77 	call	0xeee2	; 0xeee2 <fgets>
   101b8:	89 2b       	or	r24, r25
   101ba:	31 f7       	brne	.-52     	; 0x10188 <cat+0x52>
   101bc:	06 c0       	rjmp	.+12     	; 0x101ca <cat+0x94>
        trim_tail(line);
        size += strlen(line);
        puts(line);
        if(dopage)
        {
            count = testpage(++count);
   101be:	c5 01       	movw	r24, r10
   101c0:	01 96       	adiw	r24, 0x01	; 1
   101c2:	86 df       	rcall	.-244    	; 0x100d0 <testpage>
   101c4:	5c 01       	movw	r10, r24
            if(count < 0)
   101c6:	97 ff       	sbrs	r25, 7
   101c8:	f1 cf       	rjmp	.-30     	; 0x101ac <cat+0x76>
#ifdef ESP8266
        optimistic_yield(1000);
        wdt_reset();
#endif
    }
    printf("\n");
   101ca:	8c ec       	ldi	r24, 0xCC	; 204
   101cc:	9d e0       	ldi	r25, 0x0D	; 13
   101ce:	1f 92       	push	r1
   101d0:	9f 93       	push	r25
   101d2:	8f 93       	push	r24
   101d4:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    fclose(fp);
   101d8:	c7 01       	movw	r24, r14
   101da:	fc dc       	rcall	.-1544   	; 0xfbd4 <fclose>
    printf("%ld bytes\n", (long)size);
   101dc:	0d 2c       	mov	r0, r13
   101de:	00 0c       	add	r0, r0
   101e0:	ee 08       	sbc	r14, r14
   101e2:	ff 08       	sbc	r15, r15
   101e4:	ff 92       	push	r15
   101e6:	ef 92       	push	r14
   101e8:	df 92       	push	r13
   101ea:	cf 92       	push	r12
   101ec:	81 ec       	ldi	r24, 0xC1	; 193
   101ee:	9d e0       	ldi	r25, 0x0D	; 13
   101f0:	1f 92       	push	r1
   101f2:	9f 93       	push	r25
   101f4:	8f 93       	push	r24
   101f6:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    return(size);
   101fa:	0f b6       	in	r0, 0x3f	; 63
   101fc:	f8 94       	cli
   101fe:	de bf       	out	0x3e, r29	; 62
   10200:	0f be       	out	0x3f, r0	; 63
   10202:	cd bf       	out	0x3d, r28	; 61
}
   10204:	c7 01       	movw	r24, r14
   10206:	b6 01       	movw	r22, r12
   10208:	d3 95       	inc	r29
   1020a:	ec e0       	ldi	r30, 0x0C	; 12
   1020c:	0c 94 02 e6 	jmp	0x1cc04	; 0x1cc04 <__epilogue_restores__+0xc>

00010210 <ls_info>:
/// @param[in] path: file name or directory
/// @param[in] verbose: 1 = detail, 0 = name only
/// @return  1 on success 0 on fail
MEMSPACE
int ls_info(char *name, int verbose)
{
   10210:	4f 92       	push	r4
   10212:	5f 92       	push	r5
   10214:	6f 92       	push	r6
   10216:	7f 92       	push	r7
   10218:	af 92       	push	r10
   1021a:	bf 92       	push	r11
   1021c:	cf 92       	push	r12
   1021e:	df 92       	push	r13
   10220:	ef 92       	push	r14
   10222:	ff 92       	push	r15
   10224:	0f 93       	push	r16
   10226:	1f 93       	push	r17
   10228:	cf 93       	push	r28
   1022a:	df 93       	push	r29
   1022c:	cd b7       	in	r28, 0x3d	; 61
   1022e:	de b7       	in	r29, 0x3e	; 62
   10230:	ec 97       	sbiw	r28, 0x3c	; 60
   10232:	0f b6       	in	r0, 0x3f	; 63
   10234:	f8 94       	cli
   10236:	de bf       	out	0x3e, r29	; 62
   10238:	0f be       	out	0x3f, r0	; 63
   1023a:	cd bf       	out	0x3d, r28	; 61
   1023c:	8c 01       	movw	r16, r24
   1023e:	7b 01       	movw	r14, r22
    uint16_t mask;
    char *cm = "rwx";
    char attr[12], *p;


    if(stat(name, &sp) == -1) 
   10240:	be 01       	movw	r22, r28
   10242:	6f 5f       	subi	r22, 0xFF	; 255
   10244:	7f 4f       	sbci	r23, 0xFF	; 255
   10246:	30 d9       	rcall	.-3488   	; 0xf4a8 <stat>
   10248:	01 96       	adiw	r24, 0x01	; 1
   1024a:	89 f4       	brne	.+34     	; 0x1026e <ls_info+0x5e>
    {
        printf("can not stat: %s\n", name);
   1024c:	1f 93       	push	r17
   1024e:	0f 93       	push	r16
   10250:	81 e3       	ldi	r24, 0x31	; 49
   10252:	9d e0       	ldi	r25, 0x0D	; 13
   10254:	1f 92       	push	r1
   10256:	9f 93       	push	r25
   10258:	8f 93       	push	r24
   1025a:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
        return(0);
   1025e:	0f 90       	pop	r0
   10260:	0f 90       	pop	r0
   10262:	0f 90       	pop	r0
   10264:	0f 90       	pop	r0
   10266:	0f 90       	pop	r0
   10268:	80 e0       	ldi	r24, 0x00	; 0
   1026a:	90 e0       	ldi	r25, 0x00	; 0
   1026c:	79 c0       	rjmp	.+242    	; 0x10360 <ls_info+0x150>
    }

    if(!verbose)
   1026e:	ef 28       	or	r14, r15
   10270:	91 f4       	brne	.+36     	; 0x10296 <ls_info+0x86>
    {
        printf("%s\n",basename(name));
   10272:	c8 01       	movw	r24, r16
   10274:	0e 94 2a 78 	call	0xf054	; 0xf054 <basename>
   10278:	9f 93       	push	r25
   1027a:	8f 93       	push	r24
   1027c:	8d e2       	ldi	r24, 0x2D	; 45
   1027e:	9d e0       	ldi	r25, 0x0D	; 13
   10280:	1f 92       	push	r1
   10282:	9f 93       	push	r25
   10284:	8f 93       	push	r24
   10286:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
        return(1);
   1028a:	0f 90       	pop	r0
   1028c:	0f 90       	pop	r0
   1028e:	0f 90       	pop	r0
   10290:	0f 90       	pop	r0
   10292:	0f 90       	pop	r0
   10294:	63 c0       	rjmp	.+198    	; 0x1035c <ls_info+0x14c>
    }

    p = attr;
    if(S_ISDIR(sp.st_mode))
   10296:	49 84       	ldd	r4, Y+9	; 0x09
   10298:	5a 84       	ldd	r5, Y+10	; 0x0a
   1029a:	6b 84       	ldd	r6, Y+11	; 0x0b
   1029c:	7c 84       	ldd	r7, Y+12	; 0x0c
   1029e:	d3 01       	movw	r26, r6
   102a0:	c2 01       	movw	r24, r4
   102a2:	88 27       	eor	r24, r24
   102a4:	90 7f       	andi	r25, 0xF0	; 240
   102a6:	aa 27       	eor	r26, r26
   102a8:	bb 27       	eor	r27, r27
   102aa:	81 15       	cp	r24, r1
   102ac:	90 44       	sbci	r25, 0x40	; 64
   102ae:	a1 05       	cpc	r26, r1
   102b0:	b1 05       	cpc	r27, r1
   102b2:	11 f4       	brne	.+4      	; 0x102b8 <ls_info+0xa8>
        *p++ = 'd';
   102b4:	84 e6       	ldi	r24, 0x64	; 100
   102b6:	01 c0       	rjmp	.+2      	; 0x102ba <ls_info+0xaa>
    else
        *p++ = '-';
   102b8:	8d e2       	ldi	r24, 0x2D	; 45
   102ba:	89 ab       	std	Y+49, r24	; 0x31
   102bc:	fe 01       	movw	r30, r28
   102be:	f1 96       	adiw	r30, 0x31	; 49
/// @param[in] path: file name or directory
/// @param[in] verbose: 1 = detail, 0 = name only
/// @return  1 on success 0 on fail
MEMSPACE
int ls_info(char *name, int verbose)
{
   102c0:	e1 2c       	mov	r14, r1
   102c2:	ff 24       	eor	r15, r15
   102c4:	f3 94       	inc	r15
   102c6:	20 e0       	ldi	r18, 0x00	; 0
   102c8:	30 e0       	ldi	r19, 0x00	; 0
   102ca:	5f 01       	movw	r10, r30
    {
        // User
        if( sp.st_mode & mask)
            *p++ = cm[ i % 3];
        else
            *p++ = '-';
   102cc:	4d e2       	ldi	r20, 0x2D	; 45
    mask = 4 << 6;
    for(i=0;i<9;++i)
    {
        // User
        if( sp.st_mode & mask)
            *p++ = cm[ i % 3];
   102ce:	53 e0       	ldi	r21, 0x03	; 3
   102d0:	c5 2e       	mov	r12, r21
   102d2:	d1 2c       	mov	r13, r1

    mask = 4 << 6;
    for(i=0;i<9;++i)
    {
        // User
        if( sp.st_mode & mask)
   102d4:	c7 01       	movw	r24, r14
   102d6:	a0 e0       	ldi	r26, 0x00	; 0
   102d8:	b0 e0       	ldi	r27, 0x00	; 0
   102da:	84 21       	and	r24, r4
   102dc:	95 21       	and	r25, r5
   102de:	a6 21       	and	r26, r6
   102e0:	b7 21       	and	r27, r7
   102e2:	89 2b       	or	r24, r25
   102e4:	8a 2b       	or	r24, r26
   102e6:	8b 2b       	or	r24, r27
   102e8:	51 f0       	breq	.+20     	; 0x102fe <ls_info+0xee>
            *p++ = cm[ i % 3];
   102ea:	c9 01       	movw	r24, r18
   102ec:	b6 01       	movw	r22, r12
   102ee:	0e 94 4b e5 	call	0x1ca96	; 0x1ca96 <__divmodhi4>
   102f2:	dc 01       	movw	r26, r24
   102f4:	a2 5d       	subi	r26, 0xD2	; 210
   102f6:	b4 4f       	sbci	r27, 0xF4	; 244
   102f8:	8c 91       	ld	r24, X
   102fa:	81 83       	std	Z+1, r24	; 0x01
   102fc:	01 c0       	rjmp	.+2      	; 0x10300 <ls_info+0xf0>
        else
            *p++ = '-';
   102fe:	41 83       	std	Z+1, r20	; 0x01
        mask >>= 1;
   10300:	f6 94       	lsr	r15
   10302:	e7 94       	ror	r14
        *p++ = 'd';
    else
        *p++ = '-';

    mask = 4 << 6;
    for(i=0;i<9;++i)
   10304:	2f 5f       	subi	r18, 0xFF	; 255
   10306:	3f 4f       	sbci	r19, 0xFF	; 255
   10308:	31 96       	adiw	r30, 0x01	; 1
   1030a:	29 30       	cpi	r18, 0x09	; 9
   1030c:	31 05       	cpc	r19, r1
   1030e:	11 f7       	brne	.-60     	; 0x102d4 <ls_info+0xc4>
            *p++ = cm[ i % 3];
        else
            *p++ = '-';
        mask >>= 1;
    }
    *p = 0;
   10310:	1b ae       	std	Y+59, r1	; 0x3b

    printf("%s none none %12ld %s %s\n",
   10312:	c8 01       	movw	r24, r16
   10314:	0e 94 2a 78 	call	0xf054	; 0xf054 <basename>
   10318:	18 2f       	mov	r17, r24
   1031a:	09 2f       	mov	r16, r25
   1031c:	69 a5       	ldd	r22, Y+41	; 0x29
   1031e:	7a a5       	ldd	r23, Y+42	; 0x2a
   10320:	8b a5       	ldd	r24, Y+43	; 0x2b
   10322:	9c a5       	ldd	r25, Y+44	; 0x2c
   10324:	0e 94 05 78 	call	0xf00a	; 0xf00a <mctime>
   10328:	0f 93       	push	r16
   1032a:	1f 93       	push	r17
   1032c:	9f 93       	push	r25
   1032e:	8f 93       	push	r24
   10330:	8c 8d       	ldd	r24, Y+28	; 0x1c
   10332:	8f 93       	push	r24
   10334:	8b 8d       	ldd	r24, Y+27	; 0x1b
   10336:	8f 93       	push	r24
   10338:	8a 8d       	ldd	r24, Y+26	; 0x1a
   1033a:	8f 93       	push	r24
   1033c:	89 8d       	ldd	r24, Y+25	; 0x19
   1033e:	8f 93       	push	r24
   10340:	bf 92       	push	r11
   10342:	af 92       	push	r10
   10344:	83 e1       	ldi	r24, 0x13	; 19
   10346:	9d e0       	ldi	r25, 0x0D	; 13
   10348:	1f 92       	push	r1
   1034a:	9f 93       	push	r25
   1034c:	8f 93       	push	r24
   1034e:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
        attr, 
        (long) sp.st_size, 
        mctime((time_t)sp.st_mtime),
        basename(name));
    return(1);
   10352:	0f b6       	in	r0, 0x3f	; 63
   10354:	f8 94       	cli
   10356:	de bf       	out	0x3e, r29	; 62
   10358:	0f be       	out	0x3f, r0	; 63
   1035a:	cd bf       	out	0x3d, r28	; 61
   1035c:	81 e0       	ldi	r24, 0x01	; 1
   1035e:	90 e0       	ldi	r25, 0x00	; 0
}
   10360:	ec 96       	adiw	r28, 0x3c	; 60
   10362:	0f b6       	in	r0, 0x3f	; 63
   10364:	f8 94       	cli
   10366:	de bf       	out	0x3e, r29	; 62
   10368:	0f be       	out	0x3f, r0	; 63
   1036a:	cd bf       	out	0x3d, r28	; 61
   1036c:	df 91       	pop	r29
   1036e:	cf 91       	pop	r28
   10370:	1f 91       	pop	r17
   10372:	0f 91       	pop	r16
   10374:	ff 90       	pop	r15
   10376:	ef 90       	pop	r14
   10378:	df 90       	pop	r13
   1037a:	cf 90       	pop	r12
   1037c:	bf 90       	pop	r11
   1037e:	af 90       	pop	r10
   10380:	7f 90       	pop	r7
   10382:	6f 90       	pop	r6
   10384:	5f 90       	pop	r5
   10386:	4f 90       	pop	r4
   10388:	08 95       	ret

0001038a <ls>:
/// @param[in] path: file name or directory
/// @param[in] option: -l for detail
/// @return  number of files
MEMSPACE
int ls(char *name, int verbose)
{
   1038a:	2f 92       	push	r2
   1038c:	3f 92       	push	r3
   1038e:	4f 92       	push	r4
   10390:	5f 92       	push	r5
   10392:	6f 92       	push	r6
   10394:	8f 92       	push	r8
   10396:	9f 92       	push	r9
   10398:	af 92       	push	r10
   1039a:	bf 92       	push	r11
   1039c:	cf 92       	push	r12
   1039e:	df 92       	push	r13
   103a0:	ef 92       	push	r14
   103a2:	ff 92       	push	r15
   103a4:	0f 93       	push	r16
   103a6:	1f 93       	push	r17
   103a8:	cf 93       	push	r28
   103aa:	df 93       	push	r29
   103ac:	cd b7       	in	r28, 0x3d	; 61
   103ae:	de b7       	in	r29, 0x3e	; 62
   103b0:	c0 54       	subi	r28, 0x40	; 64
   103b2:	d1 09       	sbc	r29, r1
   103b4:	0f b6       	in	r0, 0x3f	; 63
   103b6:	f8 94       	cli
   103b8:	de bf       	out	0x3e, r29	; 62
   103ba:	0f be       	out	0x3f, r0	; 63
   103bc:	cd bf       	out	0x3d, r28	; 61
   103be:	7c 01       	movw	r14, r24
   103c0:	4b 01       	movw	r8, r22
    int files = 0;
    int len,len2;
    dirent_t *de;
    char fullpath[MAX_NAME_LEN+1];

    fullpath[0] = 0;
   103c2:	19 aa       	std	Y+49, r1	; 0x31
   103c4:	8e 01       	movw	r16, r28
   103c6:	0f 5c       	subi	r16, 0xCF	; 207
   103c8:	1f 4f       	sbci	r17, 0xFF	; 255
    if(!name || !*name || MATCH(name,".") )
   103ca:	00 97       	sbiw	r24, 0x00	; 0
   103cc:	91 f4       	brne	.+36     	; 0x103f2 <ls+0x68>
    {
        if( !getcwd(fullpath, sizeof(fullpath)-2) )
   103ce:	6c e0       	ldi	r22, 0x0C	; 12
   103d0:	70 e0       	ldi	r23, 0x00	; 0
   103d2:	c8 01       	movw	r24, r16
   103d4:	0e 94 80 78 	call	0xf100	; 0xf100 <getcwd>
   103d8:	89 2b       	or	r24, r25
   103da:	d1 f4       	brne	.+52     	; 0x10410 <ls+0x86>
        {
            printf("ls: Can't get current directory\n"); 
   103dc:	82 ef       	ldi	r24, 0xF2	; 242
   103de:	9c e0       	ldi	r25, 0x0C	; 12
   103e0:	1f 92       	push	r1
   103e2:	9f 93       	push	r25
   103e4:	8f 93       	push	r24
   103e6:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
            return(0); 
   103ea:	0f 90       	pop	r0
   103ec:	0f 90       	pop	r0
   103ee:	0f 90       	pop	r0
   103f0:	3b c0       	rjmp	.+118    	; 0x10468 <ls+0xde>
    int len,len2;
    dirent_t *de;
    char fullpath[MAX_NAME_LEN+1];

    fullpath[0] = 0;
    if(!name || !*name || MATCH(name,".") )
   103f2:	fc 01       	movw	r30, r24
   103f4:	80 81       	ld	r24, Z
   103f6:	88 23       	and	r24, r24
   103f8:	51 f3       	breq	.-44     	; 0x103ce <ls+0x44>
   103fa:	66 e4       	ldi	r22, 0x46	; 70
   103fc:	72 e1       	ldi	r23, 0x12	; 18
   103fe:	c7 01       	movw	r24, r14
   10400:	0e 94 30 33 	call	0x6660	; 0x6660 <MATCH>
   10404:	89 2b       	or	r24, r25
   10406:	19 f7       	brne	.-58     	; 0x103ce <ls+0x44>

        }
    }
    else
    {
        strcpy(fullpath,name);
   10408:	b7 01       	movw	r22, r14
   1040a:	c8 01       	movw	r24, r16
   1040c:	0e 94 53 32 	call	0x64a6	; 0x64a6 <strcpy>
    }
    len = strlen(fullpath);
   10410:	f8 01       	movw	r30, r16
   10412:	01 90       	ld	r0, Z+
   10414:	00 20       	and	r0, r0
   10416:	e9 f7       	brne	.-6      	; 0x10412 <ls+0x88>
   10418:	31 97       	sbiw	r30, 0x01	; 1
   1041a:	1f 01       	movw	r2, r30
   1041c:	20 1a       	sub	r2, r16
   1041e:	31 0a       	sbc	r3, r17


    printf("Listing:[%s]\n",fullpath);
   10420:	1f 93       	push	r17
   10422:	0f 93       	push	r16
   10424:	84 ee       	ldi	r24, 0xE4	; 228
   10426:	9c e0       	ldi	r25, 0x0C	; 12
   10428:	1f 92       	push	r1
   1042a:	9f 93       	push	r25
   1042c:	8f 93       	push	r24
   1042e:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>

    if (stat(fullpath, &st)) 
   10432:	be 01       	movw	r22, r28
   10434:	6f 5f       	subi	r22, 0xFF	; 255
   10436:	7f 4f       	sbci	r23, 0xFF	; 255
   10438:	c8 01       	movw	r24, r16
   1043a:	36 d8       	rcall	.-3988   	; 0xf4a8 <stat>
   1043c:	7c 01       	movw	r14, r24
   1043e:	0f 90       	pop	r0
   10440:	0f 90       	pop	r0
   10442:	0f 90       	pop	r0
   10444:	0f 90       	pop	r0
   10446:	0f 90       	pop	r0
   10448:	89 2b       	or	r24, r25
   1044a:	89 f0       	breq	.+34     	; 0x1046e <ls+0xe4>
    { 
        printf("ls: cannot stat [%s]\n", fullpath); 
   1044c:	1f 93       	push	r17
   1044e:	0f 93       	push	r16
   10450:	8e ec       	ldi	r24, 0xCE	; 206
   10452:	9c e0       	ldi	r25, 0x0C	; 12
   10454:	1f 92       	push	r1
   10456:	9f 93       	push	r25
   10458:	8f 93       	push	r24
   1045a:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
        return(0); 
   1045e:	0f 90       	pop	r0
   10460:	0f 90       	pop	r0
   10462:	0f 90       	pop	r0
   10464:	0f 90       	pop	r0
   10466:	0f 90       	pop	r0
   10468:	e1 2c       	mov	r14, r1
   1046a:	f1 2c       	mov	r15, r1
   1046c:	86 c0       	rjmp	.+268    	; 0x1057a <ls+0x1f0>
    }

    switch (st.st_mode & S_IFMT) 
   1046e:	89 85       	ldd	r24, Y+9	; 0x09
   10470:	9a 85       	ldd	r25, Y+10	; 0x0a
   10472:	ab 85       	ldd	r26, Y+11	; 0x0b
   10474:	bc 85       	ldd	r27, Y+12	; 0x0c
   10476:	88 27       	eor	r24, r24
   10478:	90 7f       	andi	r25, 0xF0	; 240
   1047a:	aa 27       	eor	r26, r26
   1047c:	bb 27       	eor	r27, r27
   1047e:	81 15       	cp	r24, r1
   10480:	f0 e4       	ldi	r31, 0x40	; 64
   10482:	9f 07       	cpc	r25, r31
   10484:	a1 05       	cpc	r26, r1
   10486:	b1 05       	cpc	r27, r1
   10488:	51 f0       	breq	.+20     	; 0x1049e <ls+0x114>
   1048a:	81 15       	cp	r24, r1
   1048c:	90 48       	sbci	r25, 0x80	; 128
   1048e:	a1 05       	cpc	r26, r1
   10490:	b1 05       	cpc	r27, r1
   10492:	09 f0       	breq	.+2      	; 0x10496 <ls+0x10c>
   10494:	62 c0       	rjmp	.+196    	; 0x1055a <ls+0x1d0>
    {
    case S_IFREG:
        ls_info(fullpath,verbose);
   10496:	b4 01       	movw	r22, r8
   10498:	c8 01       	movw	r24, r16
   1049a:	ba de       	rcall	.-652    	; 0x10210 <ls_info>
   1049c:	5e c0       	rjmp	.+188    	; 0x1055a <ls+0x1d0>
        break;
    case S_IFDIR:
        dirp = opendir(fullpath);
   1049e:	c8 01       	movw	r24, r16
   104a0:	0e 94 2e 79 	call	0xf25c	; 0xf25c <opendir>
   104a4:	5c 01       	movw	r10, r24
        if(!dirp)
   104a6:	89 2b       	or	r24, r25
   104a8:	69 f0       	breq	.+26     	; 0x104c4 <ls+0x13a>
    }
    else
    {
        strcpy(fullpath,name);
    }
    len = strlen(fullpath);
   104aa:	e1 2c       	mov	r14, r1
   104ac:	f1 2c       	mov	r15, r1
                strcat(fullpath,"/");
            }
            strcat(fullpath,de->d_name);
            files +=ls_info(fullpath,verbose);
            // restore path
            fullpath[len] = 0;
   104ae:	c8 01       	movw	r24, r16
   104b0:	82 0d       	add	r24, r2
   104b2:	93 1d       	adc	r25, r3
   104b4:	21 96       	adiw	r28, 0x01	; 1
   104b6:	9f af       	std	Y+63, r25	; 0x3f
   104b8:	8e af       	std	Y+62, r24	; 0x3e
   104ba:	21 97       	sbiw	r28, 0x01	; 1
                break;
            // FIXME neeed beetter string length tests here
            len2 = strlen(de->d_name);
            if(len + len2 >= MAX_NAME_LEN)
            {
                printf("name:[%s] too long with full path\n",de->d_name);
   104bc:	8b e9       	ldi	r24, 0x9B	; 155
   104be:	9c e0       	ldi	r25, 0x0C	; 12
   104c0:	2c 01       	movw	r4, r24
   104c2:	26 c0       	rjmp	.+76     	; 0x10510 <ls+0x186>
        break;
    case S_IFDIR:
        dirp = opendir(fullpath);
        if(!dirp)
        {
            printf("opendir failed\n");
   104c4:	8e eb       	ldi	r24, 0xBE	; 190
   104c6:	9c e0       	ldi	r25, 0x0C	; 12
   104c8:	1f 92       	push	r1
   104ca:	9f 93       	push	r25
   104cc:	8f 93       	push	r24
   104ce:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
            return(0);
   104d2:	0f 90       	pop	r0
   104d4:	0f 90       	pop	r0
   104d6:	0f 90       	pop	r0
   104d8:	50 c0       	rjmp	.+160    	; 0x1057a <ls+0x1f0>
        }
        while ( (de = readdir(dirp)) ) 
        {
            if(de->d_name[0] == 0)
   104da:	f6 01       	movw	r30, r12
   104dc:	80 81       	ld	r24, Z
   104de:	88 23       	and	r24, r24
   104e0:	e9 f0       	breq	.+58     	; 0x1051c <ls+0x192>
                break;
            // FIXME neeed beetter string length tests here
            len2 = strlen(de->d_name);
   104e2:	f6 01       	movw	r30, r12
   104e4:	01 90       	ld	r0, Z+
   104e6:	00 20       	and	r0, r0
   104e8:	e9 f7       	brne	.-6      	; 0x104e4 <ls+0x15a>
   104ea:	31 97       	sbiw	r30, 0x01	; 1
   104ec:	ec 19       	sub	r30, r12
   104ee:	fd 09       	sbc	r31, r13
            if(len + len2 >= MAX_NAME_LEN)
   104f0:	e2 0d       	add	r30, r2
   104f2:	f3 1d       	adc	r31, r3
   104f4:	3d 97       	sbiw	r30, 0x0d	; 13
   104f6:	b4 f0       	brlt	.+44     	; 0x10524 <ls+0x19a>
            {
                printf("name:[%s] too long with full path\n",de->d_name);
   104f8:	df 92       	push	r13
   104fa:	cf 92       	push	r12
   104fc:	1f 92       	push	r1
   104fe:	5f 92       	push	r5
   10500:	4f 92       	push	r4
   10502:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
                continue;
   10506:	0f 90       	pop	r0
   10508:	0f 90       	pop	r0
   1050a:	0f 90       	pop	r0
   1050c:	0f 90       	pop	r0
   1050e:	0f 90       	pop	r0
        if(!dirp)
        {
            printf("opendir failed\n");
            return(0);
        }
        while ( (de = readdir(dirp)) ) 
   10510:	c5 01       	movw	r24, r10
   10512:	0e 94 4c 79 	call	0xf298	; 0xf298 <readdir>
   10516:	6c 01       	movw	r12, r24
   10518:	89 2b       	or	r24, r25
   1051a:	f9 f6       	brne	.-66     	; 0x104da <ls+0x150>
#ifdef ESP8266
            optimistic_yield(1000);
            wdt_reset();
#endif
        }
        closedir(dirp);
   1051c:	c5 01       	movw	r24, r10
   1051e:	0e 94 13 79 	call	0xf226	; 0xf226 <closedir>
        break;
   10522:	1d c0       	rjmp	.+58     	; 0x1055e <ls+0x1d4>
            if(len + len2 >= MAX_NAME_LEN)
            {
                printf("name:[%s] too long with full path\n",de->d_name);
                continue;
            }
            if(!MATCH(fullpath,"/") )
   10524:	68 e3       	ldi	r22, 0x38	; 56
   10526:	78 e0       	ldi	r23, 0x08	; 8
   10528:	c8 01       	movw	r24, r16
   1052a:	0e 94 30 33 	call	0x6660	; 0x6660 <MATCH>
   1052e:	89 2b       	or	r24, r25
   10530:	29 f4       	brne	.+10     	; 0x1053c <ls+0x1b2>
            {
                strcat(fullpath,"/");
   10532:	68 e3       	ldi	r22, 0x38	; 56
   10534:	78 e0       	ldi	r23, 0x08	; 8
   10536:	c8 01       	movw	r24, r16
   10538:	0e 94 74 32 	call	0x64e8	; 0x64e8 <strcat>
            }
            strcat(fullpath,de->d_name);
   1053c:	b6 01       	movw	r22, r12
   1053e:	c8 01       	movw	r24, r16
   10540:	0e 94 74 32 	call	0x64e8	; 0x64e8 <strcat>
            files +=ls_info(fullpath,verbose);
   10544:	b4 01       	movw	r22, r8
   10546:	c8 01       	movw	r24, r16
   10548:	63 de       	rcall	.-826    	; 0x10210 <ls_info>
   1054a:	e8 0e       	add	r14, r24
   1054c:	f9 1e       	adc	r15, r25
            // restore path
            fullpath[len] = 0;
   1054e:	21 96       	adiw	r28, 0x01	; 1
   10550:	ee ad       	ldd	r30, Y+62	; 0x3e
   10552:	ff ad       	ldd	r31, Y+63	; 0x3f
   10554:	21 97       	sbiw	r28, 0x01	; 1
   10556:	10 82       	st	Z, r1
   10558:	db cf       	rjmp	.-74     	; 0x10510 <ls+0x186>
MEMSPACE
int ls(char *name, int verbose)
{
    struct stat st;
    DIR *dirp;
    int files = 0;
   1055a:	e1 2c       	mov	r14, r1
   1055c:	f1 2c       	mov	r15, r1
#endif
        }
        closedir(dirp);
        break;
    }
    printf("Files: %d\n", (int)files);
   1055e:	ff 92       	push	r15
   10560:	ef 92       	push	r14
   10562:	80 e9       	ldi	r24, 0x90	; 144
   10564:	9c e0       	ldi	r25, 0x0C	; 12
   10566:	1f 92       	push	r1
   10568:	9f 93       	push	r25
   1056a:	8f 93       	push	r24
   1056c:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    return(files);
   10570:	0f 90       	pop	r0
   10572:	0f 90       	pop	r0
   10574:	0f 90       	pop	r0
   10576:	0f 90       	pop	r0
   10578:	0f 90       	pop	r0
}
   1057a:	c7 01       	movw	r24, r14
   1057c:	c0 5c       	subi	r28, 0xC0	; 192
   1057e:	df 4f       	sbci	r29, 0xFF	; 255
   10580:	0f b6       	in	r0, 0x3f	; 63
   10582:	f8 94       	cli
   10584:	de bf       	out	0x3e, r29	; 62
   10586:	0f be       	out	0x3f, r0	; 63
   10588:	cd bf       	out	0x3d, r28	; 61
   1058a:	df 91       	pop	r29
   1058c:	cf 91       	pop	r28
   1058e:	1f 91       	pop	r17
   10590:	0f 91       	pop	r16
   10592:	ff 90       	pop	r15
   10594:	ef 90       	pop	r14
   10596:	df 90       	pop	r13
   10598:	cf 90       	pop	r12
   1059a:	bf 90       	pop	r11
   1059c:	af 90       	pop	r10
   1059e:	9f 90       	pop	r9
   105a0:	8f 90       	pop	r8
   105a2:	6f 90       	pop	r6
   105a4:	5f 90       	pop	r5
   105a6:	4f 90       	pop	r4
   105a8:	3f 90       	pop	r3
   105aa:	2f 90       	pop	r2
   105ac:	08 95       	ret

000105ae <posix_tests>:
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int posix_tests(int argc,char *argv[])
{
   105ae:	a0 e0       	ldi	r26, 0x00	; 0
   105b0:	b1 e0       	ldi	r27, 0x01	; 1
   105b2:	ed ed       	ldi	r30, 0xDD	; 221
   105b4:	f2 e8       	ldi	r31, 0x82	; 130
   105b6:	0c 94 e2 e5 	jmp	0x1cbc4	; 0x1cbc4 <__prologue_saves__+0x4>
    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   105ba:	fb 01       	movw	r30, r22
   105bc:	c0 80       	ld	r12, Z
   105be:	d1 80       	ldd	r13, Z+1	; 0x01

    if(!ptr)
   105c0:	c1 14       	cp	r12, r1
   105c2:	d1 04       	cpc	r13, r1
   105c4:	19 f4       	brne	.+6      	; 0x105cc <posix_tests+0x1e>
        return(0);
   105c6:	80 e0       	ldi	r24, 0x00	; 0
   105c8:	90 e0       	ldi	r25, 0x00	; 0
   105ca:	67 c1       	rjmp	.+718    	; 0x1089a <posix_tests+0x2ec>
   105cc:	4b 01       	movw	r8, r22
   105ce:	8c 01       	movw	r16, r24

    if( MATCH(ptr,"posix") )
   105d0:	62 e3       	ldi	r22, 0x32	; 50
   105d2:	7b e0       	ldi	r23, 0x0B	; 11
   105d4:	c6 01       	movw	r24, r12
   105d6:	0e 94 30 33 	call	0x6660	; 0x6660 <MATCH>
   105da:	89 2b       	or	r24, r25
   105dc:	a9 f0       	breq	.+42     	; 0x10608 <posix_tests+0x5a>
    {
        ptr = argv[ind++];
   105de:	f4 01       	movw	r30, r8
   105e0:	c2 80       	ldd	r12, Z+2	; 0x02
   105e2:	d3 80       	ldd	r13, Z+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
   105e4:	c1 14       	cp	r12, r1
   105e6:	d1 04       	cpc	r13, r1
   105e8:	21 f4       	brne	.+8      	; 0x105f2 <posix_tests+0x44>
        {
            posix_help(1);
   105ea:	81 e0       	ldi	r24, 0x01	; 1
   105ec:	90 e0       	ldi	r25, 0x00	; 0
   105ee:	74 dc       	rcall	.-1816   	; 0xfed8 <posix_help>
   105f0:	52 c1       	rjmp	.+676    	; 0x10896 <posix_tests+0x2e8>
        return(0);

    if( MATCH(ptr,"posix") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
   105f2:	67 ef       	ldi	r22, 0xF7	; 247
   105f4:	75 e1       	ldi	r23, 0x15	; 21
   105f6:	c6 01       	movw	r24, r12
   105f8:	0e 94 30 33 	call	0x6660	; 0x6660 <MATCH>
   105fc:	89 2b       	or	r24, r25
   105fe:	a9 f7       	brne	.-22     	; 0x105ea <posix_tests+0x3c>
    if(!ptr)
        return(0);

    if( MATCH(ptr,"posix") )
    {
        ptr = argv[ind++];
   10600:	42 e0       	ldi	r20, 0x02	; 2
   10602:	64 2e       	mov	r6, r20
   10604:	71 2c       	mov	r7, r1
   10606:	03 c0       	rjmp	.+6      	; 0x1060e <posix_tests+0x60>
{
    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   10608:	66 24       	eor	r6, r6
   1060a:	63 94       	inc	r6
   1060c:	71 2c       	mov	r7, r1
            posix_help(1);
            return(1);
        }
    }

    if (MATCHARGS(ptr,"cat", (ind + 1), argc))
   1060e:	73 01       	movw	r14, r6
   10610:	ff ef       	ldi	r31, 0xFF	; 255
   10612:	ef 1a       	sub	r14, r31
   10614:	ff 0a       	sbc	r15, r31
   10616:	98 01       	movw	r18, r16
   10618:	a7 01       	movw	r20, r14
   1061a:	68 e3       	ldi	r22, 0x38	; 56
   1061c:	7b e0       	ldi	r23, 0x0B	; 11
   1061e:	c6 01       	movw	r24, r12
   10620:	0e 94 44 33 	call	0x6688	; 0x6688 <MATCHARGS>
   10624:	89 2b       	or	r24, r25
   10626:	a1 f1       	breq	.+104    	; 0x10690 <posix_tests+0xe2>
   10628:	73 01       	movw	r14, r6
   1062a:	ee 0c       	add	r14, r14
   1062c:	ff 1c       	adc	r15, r15
   1062e:	e8 0c       	add	r14, r8
   10630:	f9 1c       	adc	r15, r9
   10632:	57 01       	movw	r10, r14
   10634:	47 01       	movw	r8, r14
   10636:	63 01       	movw	r12, r6
   10638:	41 2c       	mov	r4, r1
   1063a:	51 2c       	mov	r5, r1
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   1063c:	c0 16       	cp	r12, r16
   1063e:	d1 06       	cpc	r13, r17
   10640:	1c f5       	brge	.+70     	; 0x10688 <posix_tests+0xda>
        {
            if(MATCH(argv[i],"-p"))
   10642:	6c e3       	ldi	r22, 0x3C	; 60
   10644:	7b e0       	ldi	r23, 0x0B	; 11
   10646:	f4 01       	movw	r30, r8
   10648:	81 91       	ld	r24, Z+
   1064a:	91 91       	ld	r25, Z+
   1064c:	4f 01       	movw	r8, r30
   1064e:	0e 94 30 33 	call	0x6660	; 0x6660 <MATCH>
   10652:	89 2b       	or	r24, r25
   10654:	19 f0       	breq	.+6      	; 0x1065c <posix_tests+0xae>
                page = 1;
   10656:	44 24       	eor	r4, r4
   10658:	43 94       	inc	r4
   1065a:	51 2c       	mov	r5, r1

    if (MATCHARGS(ptr,"cat", (ind + 1), argc))
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   1065c:	ff ef       	ldi	r31, 0xFF	; 255
   1065e:	cf 1a       	sub	r12, r31
   10660:	df 0a       	sbc	r13, r31
   10662:	ec cf       	rjmp	.-40     	; 0x1063c <posix_tests+0x8e>
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
        {
            if(!MATCH(argv[i],"-p"))
   10664:	6c e3       	ldi	r22, 0x3C	; 60
   10666:	7b e0       	ldi	r23, 0x0B	; 11
   10668:	f5 01       	movw	r30, r10
   1066a:	81 91       	ld	r24, Z+
   1066c:	91 91       	ld	r25, Z+
   1066e:	5f 01       	movw	r10, r30
   10670:	0e 94 30 33 	call	0x6660	; 0x6660 <MATCH>
   10674:	89 2b       	or	r24, r25
   10676:	29 f4       	brne	.+10     	; 0x10682 <posix_tests+0xd4>
                cat(argv[ind], page);
   10678:	b2 01       	movw	r22, r4
   1067a:	f7 01       	movw	r30, r14
   1067c:	80 81       	ld	r24, Z
   1067e:	91 81       	ldd	r25, Z+1	; 0x01
   10680:	5a dd       	rcall	.-1356   	; 0x10136 <cat>
        for(i=ind;i<argc;++i)
        {
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
   10682:	ff ef       	ldi	r31, 0xFF	; 255
   10684:	6f 1a       	sub	r6, r31
   10686:	7f 0a       	sbc	r7, r31
   10688:	60 16       	cp	r6, r16
   1068a:	71 06       	cpc	r7, r17
   1068c:	5c f3       	brlt	.-42     	; 0x10664 <posix_tests+0xb6>
   1068e:	03 c1       	rjmp	.+518    	; 0x10896 <posix_tests+0x2e8>
        chmod( argv[ind],strtol(argv[ind+1],NULL,8));
        return(1);
    }
#endif

    if (MATCHARGS(ptr,"copy", (ind + 2), argc))
   10690:	53 01       	movw	r10, r6
   10692:	82 e0       	ldi	r24, 0x02	; 2
   10694:	a8 0e       	add	r10, r24
   10696:	b1 1c       	adc	r11, r1
   10698:	98 01       	movw	r18, r16
   1069a:	a5 01       	movw	r20, r10
   1069c:	6f e3       	ldi	r22, 0x3F	; 63
   1069e:	7b e0       	ldi	r23, 0x0B	; 11
   106a0:	c6 01       	movw	r24, r12
   106a2:	0e 94 44 33 	call	0x6688	; 0x6688 <MATCHARGS>
   106a6:	89 2b       	or	r24, r25
   106a8:	61 f0       	breq	.+24     	; 0x106c2 <posix_tests+0x114>
    {
        copy(argv[ind],argv[ind+1]);
   106aa:	ee 0c       	add	r14, r14
   106ac:	ff 1c       	adc	r15, r15
   106ae:	f4 01       	movw	r30, r8
   106b0:	ee 0d       	add	r30, r14
   106b2:	ff 1d       	adc	r31, r15
   106b4:	60 81       	ld	r22, Z
   106b6:	71 81       	ldd	r23, Z+1	; 0x01
   106b8:	32 97       	sbiw	r30, 0x02	; 2
   106ba:	80 81       	ld	r24, Z
   106bc:	91 81       	ldd	r25, Z+1	; 0x01
   106be:	28 dc       	rcall	.-1968   	; 0xff10 <copy>
   106c0:	ea c0       	rjmp	.+468    	; 0x10896 <posix_tests+0x2e8>
        return(1);
    }

    if (MATCHARGS(ptr,"cd", (ind + 1), argc))
   106c2:	98 01       	movw	r18, r16
   106c4:	a7 01       	movw	r20, r14
   106c6:	64 e4       	ldi	r22, 0x44	; 68
   106c8:	7b e0       	ldi	r23, 0x0B	; 11
   106ca:	c6 01       	movw	r24, r12
   106cc:	0e 94 44 33 	call	0x6688	; 0x6688 <MATCHARGS>
   106d0:	89 2b       	or	r24, r25
   106d2:	59 f0       	breq	.+22     	; 0x106ea <posix_tests+0x13c>
    {
        chdir(argv[ind]);
   106d4:	73 01       	movw	r14, r6
   106d6:	ee 0c       	add	r14, r14
   106d8:	ff 1c       	adc	r15, r15
   106da:	f4 01       	movw	r30, r8
   106dc:	ee 0d       	add	r30, r14
   106de:	ff 1d       	adc	r31, r15
   106e0:	80 81       	ld	r24, Z
   106e2:	91 81       	ldd	r25, Z+1	; 0x01
   106e4:	0e 94 38 78 	call	0xf070	; 0xf070 <chdir>
   106e8:	d6 c0       	rjmp	.+428    	; 0x10896 <posix_tests+0x2e8>
        logfile(argv[ind],argv[ind+1]);
        return(1);
    }
#endif

    if (MATCHARGS(ptr,"ls", (ind + 0), argc))
   106ea:	98 01       	movw	r18, r16
   106ec:	a3 01       	movw	r20, r6
   106ee:	62 e6       	ldi	r22, 0x62	; 98
   106f0:	78 e0       	ldi	r23, 0x08	; 8
   106f2:	c6 01       	movw	r24, r12
   106f4:	0e 94 44 33 	call	0x6688	; 0x6688 <MATCHARGS>
   106f8:	89 2b       	or	r24, r25
   106fa:	69 f1       	breq	.+90     	; 0x10756 <posix_tests+0x1a8>
   106fc:	73 01       	movw	r14, r6
   106fe:	ee 0c       	add	r14, r14
   10700:	ff 1c       	adc	r15, r15
   10702:	e8 0c       	add	r14, r8
   10704:	f9 1c       	adc	r15, r9
   10706:	c1 2c       	mov	r12, r1
   10708:	d1 2c       	mov	r13, r1
    {
        int i;
        int args = 0;
        for(i=ind;i<argc;++i)
   1070a:	c6 01       	movw	r24, r12
   1070c:	86 0d       	add	r24, r6
   1070e:	97 1d       	adc	r25, r7
   10710:	80 17       	cp	r24, r16
   10712:	91 07       	cpc	r25, r17
   10714:	b4 f4       	brge	.+44     	; 0x10742 <posix_tests+0x194>
        {
            if(!MATCH(argv[i],"-l"))
   10716:	67 e4       	ldi	r22, 0x47	; 71
   10718:	7b e0       	ldi	r23, 0x0B	; 11
   1071a:	f7 01       	movw	r30, r14
   1071c:	80 81       	ld	r24, Z
   1071e:	91 81       	ldd	r25, Z+1	; 0x01
   10720:	0e 94 30 33 	call	0x6660	; 0x6660 <MATCH>
   10724:	89 2b       	or	r24, r25
   10726:	31 f4       	brne	.+12     	; 0x10734 <posix_tests+0x186>
                ls(argv[i],1);
   10728:	61 e0       	ldi	r22, 0x01	; 1
   1072a:	70 e0       	ldi	r23, 0x00	; 0
   1072c:	f7 01       	movw	r30, r14
   1072e:	80 81       	ld	r24, Z
   10730:	91 81       	ldd	r25, Z+1	; 0x01
   10732:	2b de       	rcall	.-938    	; 0x1038a <ls>
            ++args;
   10734:	ff ef       	ldi	r31, 0xFF	; 255
   10736:	cf 1a       	sub	r12, r31
   10738:	df 0a       	sbc	r13, r31
   1073a:	82 e0       	ldi	r24, 0x02	; 2
   1073c:	e8 0e       	add	r14, r24
   1073e:	f1 1c       	adc	r15, r1
   10740:	e4 cf       	rjmp	.-56     	; 0x1070a <posix_tests+0x15c>
        }
        if(!args)
   10742:	c1 14       	cp	r12, r1
   10744:	d1 04       	cpc	r13, r1
   10746:	09 f0       	breq	.+2      	; 0x1074a <posix_tests+0x19c>
        {
            ls("",1);
   10748:	a6 c0       	rjmp	.+332    	; 0x10896 <posix_tests+0x2e8>
   1074a:	61 e0       	ldi	r22, 0x01	; 1
   1074c:	70 e0       	ldi	r23, 0x00	; 0
   1074e:	87 e1       	ldi	r24, 0x17	; 23
   10750:	97 e1       	ldi	r25, 0x17	; 23
   10752:	1b de       	rcall	.-970    	; 0x1038a <ls>
        mkfs(argv[ind++]);
        return(1);
    }
#endif

    if (MATCHARGS(ptr,"mkdir", (ind + 1), argc))
   10754:	a0 c0       	rjmp	.+320    	; 0x10896 <posix_tests+0x2e8>
   10756:	98 01       	movw	r18, r16
   10758:	a7 01       	movw	r20, r14
   1075a:	6a e4       	ldi	r22, 0x4A	; 74
   1075c:	7b e0       	ldi	r23, 0x0B	; 11
   1075e:	c6 01       	movw	r24, r12
   10760:	0e 94 44 33 	call	0x6688	; 0x6688 <MATCHARGS>
   10764:	89 2b       	or	r24, r25
    {
        int mode = 0777;
        if((ind+2) <= argc)
   10766:	19 f1       	breq	.+70     	; 0x107ae <posix_tests+0x200>
   10768:	e0 16       	cp	r14, r16
   1076a:	f1 06       	cpc	r15, r17
        {
            mode = strtol(argv[ind+1],NULL,8);
   1076c:	7c f4       	brge	.+30     	; 0x1078c <posix_tests+0x1de>
   1076e:	ee 0c       	add	r14, r14
   10770:	ff 1c       	adc	r15, r15
   10772:	f4 01       	movw	r30, r8
   10774:	ee 0d       	add	r30, r14
   10776:	ff 1d       	adc	r31, r15
   10778:	48 e0       	ldi	r20, 0x08	; 8
   1077a:	50 e0       	ldi	r21, 0x00	; 0
   1077c:	60 e0       	ldi	r22, 0x00	; 0
   1077e:	70 e0       	ldi	r23, 0x00	; 0
   10780:	80 81       	ld	r24, Z
   10782:	91 81       	ldd	r25, Z+1	; 0x01
   10784:	0e 94 96 47 	call	0x8f2c	; 0x8f2c <strtol>
   10788:	ab 01       	movw	r20, r22
    }
#endif

    if (MATCHARGS(ptr,"mkdir", (ind + 1), argc))
    {
        int mode = 0777;
   1078a:	02 c0       	rjmp	.+4      	; 0x10790 <posix_tests+0x1e2>
   1078c:	4f ef       	ldi	r20, 0xFF	; 255
        if((ind+2) <= argc)
        {
            mode = strtol(argv[ind+1],NULL,8);
        }
        mkdir(argv[ind],mode);
   1078e:	51 e0       	ldi	r21, 0x01	; 1
   10790:	05 2e       	mov	r0, r21
   10792:	00 0c       	add	r0, r0
   10794:	66 0b       	sbc	r22, r22
   10796:	77 0b       	sbc	r23, r23
   10798:	73 01       	movw	r14, r6
   1079a:	ee 0c       	add	r14, r14
   1079c:	ff 1c       	adc	r15, r15
   1079e:	f4 01       	movw	r30, r8
   107a0:	ee 0d       	add	r30, r14
   107a2:	ff 1d       	adc	r31, r15
   107a4:	80 81       	ld	r24, Z
   107a6:	91 81       	ldd	r25, Z+1	; 0x01
   107a8:	0e 94 a5 78 	call	0xf14a	; 0xf14a <mkdir>
        return(1);
    }

    if (MATCHARGS(ptr,"page", (ind + 1), argc))
   107ac:	74 c0       	rjmp	.+232    	; 0x10896 <posix_tests+0x2e8>
   107ae:	98 01       	movw	r18, r16
   107b0:	a7 01       	movw	r20, r14
   107b2:	60 e5       	ldi	r22, 0x50	; 80
   107b4:	7b e0       	ldi	r23, 0x0B	; 11
   107b6:	c6 01       	movw	r24, r12
   107b8:	0e 94 44 33 	call	0x6688	; 0x6688 <MATCHARGS>
   107bc:	89 2b       	or	r24, r25
    {
        setpage(atoi(argv[ind]));
   107be:	79 f0       	breq	.+30     	; 0x107de <posix_tests+0x230>
   107c0:	73 01       	movw	r14, r6
   107c2:	ee 0c       	add	r14, r14
   107c4:	ff 1c       	adc	r15, r15
   107c6:	f4 01       	movw	r30, r8
   107c8:	ee 0d       	add	r30, r14
   107ca:	ff 1d       	adc	r31, r15
   107cc:	80 81       	ld	r24, Z
   107ce:	91 81       	ldd	r25, Z+1	; 0x01
   107d0:	0e 94 f4 47 	call	0x8fe8	; 0x8fe8 <atoi>
/// @retrun void
static int _pagesize = 25;
MEMSPACE
int setpage(int count)
{
    _pagesize = count;
   107d4:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <_pagesize+0x1>
   107d8:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <_pagesize>
    {
        setpage(atoi(argv[ind]));
        return(1);
    }

    if (MATCHARGS(ptr,"pwd", (ind + 0), argc))
   107dc:	5c c0       	rjmp	.+184    	; 0x10896 <posix_tests+0x2e8>
   107de:	98 01       	movw	r18, r16
   107e0:	a3 01       	movw	r20, r6
   107e2:	65 e5       	ldi	r22, 0x55	; 85
   107e4:	7b e0       	ldi	r23, 0x0B	; 11
   107e6:	c6 01       	movw	r24, r12
   107e8:	0e 94 44 33 	call	0x6688	; 0x6688 <MATCHARGS>
   107ec:	89 2b       	or	r24, r25
    {
        char path[256];
        printf("%s\n", getcwd(path, sizeof(path)-2));
   107ee:	a9 f0       	breq	.+42     	; 0x1081a <posix_tests+0x26c>
   107f0:	6e ef       	ldi	r22, 0xFE	; 254
   107f2:	70 e0       	ldi	r23, 0x00	; 0
   107f4:	ce 01       	movw	r24, r28
   107f6:	01 96       	adiw	r24, 0x01	; 1
   107f8:	0e 94 80 78 	call	0xf100	; 0xf100 <getcwd>
   107fc:	9f 93       	push	r25
   107fe:	8f 93       	push	r24
   10800:	8e ed       	ldi	r24, 0xDE	; 222
   10802:	9d e0       	ldi	r25, 0x0D	; 13
   10804:	1f 92       	push	r1
   10806:	9f 93       	push	r25
   10808:	8f 93       	push	r24
   1080a:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1080e:	0f 90       	pop	r0
   10810:	0f 90       	pop	r0
   10812:	0f 90       	pop	r0
   10814:	0f 90       	pop	r0
   10816:	0f 90       	pop	r0
        return(1);
    }

    if (MATCHARGS(ptr,"rename", (ind + 2), argc))
   10818:	3e c0       	rjmp	.+124    	; 0x10896 <posix_tests+0x2e8>
   1081a:	98 01       	movw	r18, r16
   1081c:	a5 01       	movw	r20, r10
   1081e:	69 e5       	ldi	r22, 0x59	; 89
   10820:	7b e0       	ldi	r23, 0x0B	; 11
   10822:	c6 01       	movw	r24, r12
   10824:	0e 94 44 33 	call	0x6688	; 0x6688 <MATCHARGS>
   10828:	89 2b       	or	r24, r25
    {
        rename(argv[ind],argv[ind+1]);
   1082a:	69 f0       	breq	.+26     	; 0x10846 <posix_tests+0x298>
   1082c:	ee 0c       	add	r14, r14
   1082e:	ff 1c       	adc	r15, r15
   10830:	f4 01       	movw	r30, r8
   10832:	ee 0d       	add	r30, r14
   10834:	ff 1d       	adc	r31, r15
   10836:	60 81       	ld	r22, Z
   10838:	71 81       	ldd	r23, Z+1	; 0x01
   1083a:	32 97       	sbiw	r30, 0x02	; 2
   1083c:	80 81       	ld	r24, Z
   1083e:	91 81       	ldd	r25, Z+1	; 0x01
   10840:	0e 94 d3 78 	call	0xf1a6	; 0xf1a6 <rename>
        return(1);
    }

    if (MATCHARGS(ptr,"rm", (ind + 1), argc))
   10844:	28 c0       	rjmp	.+80     	; 0x10896 <posix_tests+0x2e8>
   10846:	98 01       	movw	r18, r16
   10848:	a7 01       	movw	r20, r14
   1084a:	60 e6       	ldi	r22, 0x60	; 96
   1084c:	7b e0       	ldi	r23, 0x0B	; 11
   1084e:	c6 01       	movw	r24, r12
   10850:	0e 94 44 33 	call	0x6688	; 0x6688 <MATCHARGS>
   10854:	89 2b       	or	r24, r25
    {
        unlink(argv[ind]);
   10856:	59 f0       	breq	.+22     	; 0x1086e <posix_tests+0x2c0>
   10858:	73 01       	movw	r14, r6
   1085a:	ee 0c       	add	r14, r14
   1085c:	ff 1c       	adc	r15, r15
   1085e:	f4 01       	movw	r30, r8
   10860:	ee 0d       	add	r30, r14
   10862:	ff 1d       	adc	r31, r15
   10864:	80 81       	ld	r24, Z
   10866:	91 81       	ldd	r25, Z+1	; 0x01
   10868:	0e 94 f2 78 	call	0xf1e4	; 0xf1e4 <unlink>
        dump_stat(&p);
        return(1);
    }
#endif

    if (MATCHARGS(ptr,"rmdir", (ind + 1), argc))
   1086c:	14 c0       	rjmp	.+40     	; 0x10896 <posix_tests+0x2e8>
   1086e:	98 01       	movw	r18, r16
   10870:	a7 01       	movw	r20, r14
   10872:	63 e6       	ldi	r22, 0x63	; 99
   10874:	7b e0       	ldi	r23, 0x0B	; 11
   10876:	c6 01       	movw	r24, r12
   10878:	0e 94 44 33 	call	0x6688	; 0x6688 <MATCHARGS>
   1087c:	89 2b       	or	r24, r25
   1087e:	09 f4       	brne	.+2      	; 0x10882 <posix_tests+0x2d4>
    {
        rmdir(argv[ind]);
   10880:	a2 ce       	rjmp	.-700    	; 0x105c6 <posix_tests+0x18>
   10882:	73 01       	movw	r14, r6
   10884:	ee 0c       	add	r14, r14
   10886:	ff 1c       	adc	r15, r15
   10888:	f4 01       	movw	r30, r8
   1088a:	ee 0d       	add	r30, r14
   1088c:	ff 1d       	adc	r31, r15
   1088e:	80 81       	ld	r24, Z
   10890:	91 81       	ldd	r25, Z+1	; 0x01
   10892:	0e 94 11 79 	call	0xf222	; 0xf222 <rmdir>
        return(1);
   10896:	81 e0       	ldi	r24, 0x01	; 1
        return(1);
    }
#endif

    return(0);
}
   10898:	90 e0       	ldi	r25, 0x00	; 0
   1089a:	d3 95       	inc	r29
   1089c:	e0 e1       	ldi	r30, 0x10	; 16
   1089e:	0c 94 fe e5 	jmp	0x1cbfc	; 0x1cbfc <__epilogue_restores__+0x4>

000108a2 <gpib_timer_init>:
/// - Has some platform dependent code.
/// @return  void

void gpib_timer_init()
{
    if(set_timers(gpib_timer_task,1) == -1)       // Install Clock Task
   108a2:	61 e0       	ldi	r22, 0x01	; 1
   108a4:	70 e0       	ldi	r23, 0x00	; 0
   108a6:	8e ee       	ldi	r24, 0xEE	; 238
   108a8:	95 e8       	ldi	r25, 0x85	; 133
   108aa:	0e 94 dc 35 	call	0x6bb8	; 0x6bb8 <set_timers>
   108ae:	01 96       	adiw	r24, 0x01	; 1
   108b0:	51 f4       	brne	.+20     	; 0x108c6 <gpib_timer_init+0x24>
        printf("GPIB Clock task init failed\n");
   108b2:	88 e0       	ldi	r24, 0x08	; 8
   108b4:	9f e0       	ldi	r25, 0x0F	; 15
   108b6:	1f 92       	push	r1
   108b8:	9f 93       	push	r25
   108ba:	8f 93       	push	r24
   108bc:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   108c0:	0f 90       	pop	r0
   108c2:	0f 90       	pop	r0

    gpib_timer_reset();
   108c4:	0f 90       	pop	r0
   108c6:	78 c1       	rjmp	.+752    	; 0x10bb8 <gpib_timer_reset>
   108c8:	08 95       	ret

000108ca <reverse_8bits>:
/// - GPIB D1 controls last device.
///
/// @param [in] mask: bit mask to reverse.
/// @return  reversed bits
uint8_t reverse_8bits(uint8_t mask)
{
   108ca:	28 2f       	mov	r18, r24
   108cc:	98 e0       	ldi	r25, 0x08	; 8
    int8_t i;
    uint8_t rmask = 0;
   108ce:	80 e0       	ldi	r24, 0x00	; 0
    for(i=0;i<8;++i)
    {
        rmask <<= 1;
   108d0:	88 0f       	add	r24, r24
        if(mask & 1)
   108d2:	20 fd       	sbrc	r18, 0
            rmask |= 1;
   108d4:	81 60       	ori	r24, 0x01	; 1
        mask >>= 1;
   108d6:	26 95       	lsr	r18
   108d8:	91 50       	subi	r25, 0x01	; 1
/// @return  reversed bits
uint8_t reverse_8bits(uint8_t mask)
{
    int8_t i;
    uint8_t rmask = 0;
    for(i=0;i<8;++i)
   108da:	d1 f7       	brne	.-12     	; 0x108d0 <reverse_8bits+0x6>
        if(mask & 1)
            rmask |= 1;
        mask >>= 1;
    }
    return(rmask & 0xff);
}
   108dc:	08 95       	ret

000108de <ppr_set>:
   108de:	f5 df       	rcall	.-22     	; 0x108ca <reverse_8bits>
   108e0:	80 93 5f 18 	sts	0x185F, r24	; 0x80185f <_ppr_reg>
   108e4:	0e 94 bb 2c 	call	0x5976	; 0x5976 <SPI0_TXRX_Byte>
   108e8:	2a 9a       	sbi	0x05, 2	; 5
   108ea:	22 9a       	sbi	0x04, 2	; 4
   108ec:	2a 98       	cbi	0x05, 2	; 5
   108ee:	22 9a       	sbi	0x04, 2	; 4
   108f0:	08 95       	ret

000108f2 <ppr_reg>:
   108f2:	80 91 5f 18 	lds	r24, 0x185F	; 0x80185f <_ppr_reg>
   108f6:	e9 cf       	rjmp	.-46     	; 0x108ca <reverse_8bits>
   108f8:	08 95       	ret

000108fa <ppr_init>:
   108fa:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   108fe:	81 ff       	sbrs	r24, 1
   10900:	0a c0       	rjmp	.+20     	; 0x10916 <ppr_init+0x1c>
   10902:	85 ef       	ldi	r24, 0xF5	; 245
   10904:	9e e0       	ldi	r25, 0x0E	; 14
   10906:	1f 92       	push	r1
   10908:	9f 93       	push	r25
   1090a:	8f 93       	push	r24
   1090c:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   10910:	0f 90       	pop	r0
   10912:	0f 90       	pop	r0
   10914:	0f 90       	pop	r0
   10916:	80 e0       	ldi	r24, 0x00	; 0
   10918:	e2 cf       	rjmp	.-60     	; 0x108de <ppr_set>
   1091a:	08 95       	ret

0001091c <ppr_bit_set>:
   1091c:	21 e0       	ldi	r18, 0x01	; 1
   1091e:	30 e0       	ldi	r19, 0x00	; 0
   10920:	01 c0       	rjmp	.+2      	; 0x10924 <ppr_bit_set+0x8>
   10922:	22 0f       	add	r18, r18
   10924:	8a 95       	dec	r24
   10926:	ea f7       	brpl	.-6      	; 0x10922 <ppr_bit_set+0x6>
   10928:	80 91 5f 18 	lds	r24, 0x185F	; 0x80185f <_ppr_reg>
   1092c:	82 2b       	or	r24, r18
   1092e:	80 93 5f 18 	sts	0x185F, r24	; 0x80185f <_ppr_reg>
   10932:	d5 cf       	rjmp	.-86     	; 0x108de <ppr_set>
   10934:	08 95       	ret

00010936 <ppr_bit_clr>:
   10936:	21 e0       	ldi	r18, 0x01	; 1
   10938:	30 e0       	ldi	r19, 0x00	; 0
   1093a:	01 c0       	rjmp	.+2      	; 0x1093e <ppr_bit_clr+0x8>
   1093c:	22 0f       	add	r18, r18
   1093e:	8a 95       	dec	r24
   10940:	ea f7       	brpl	.-6      	; 0x1093c <ppr_bit_clr+0x6>
   10942:	20 95       	com	r18
   10944:	80 91 5f 18 	lds	r24, 0x185F	; 0x80185f <_ppr_reg>
   10948:	82 23       	and	r24, r18
   1094a:	80 93 5f 18 	sts	0x185F, r24	; 0x80185f <_ppr_reg>
   1094e:	c7 cf       	rjmp	.-114    	; 0x108de <ppr_set>
   10950:	08 95       	ret

00010952 <dbf_open>:
   10952:	0f 93       	push	r16
   10954:	1f 93       	push	r17
   10956:	cf 93       	push	r28
   10958:	df 93       	push	r29
   1095a:	16 2f       	mov	r17, r22
   1095c:	07 2f       	mov	r16, r23
   1095e:	0e 94 4d 5b 	call	0xb69a	; 0xb69a <f_open>
   10962:	ec 01       	movw	r28, r24
   10964:	89 2b       	or	r24, r25
   10966:	89 f0       	breq	.+34     	; 0x1098a <dbf_open+0x38>
   10968:	0f 93       	push	r16
   1096a:	1f 93       	push	r17
   1096c:	84 ee       	ldi	r24, 0xE4	; 228
   1096e:	9e e0       	ldi	r25, 0x0E	; 14
   10970:	1f 92       	push	r1
   10972:	9f 93       	push	r25
   10974:	8f 93       	push	r24
   10976:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1097a:	ce 01       	movw	r24, r28
   1097c:	0e 94 c5 71 	call	0xe38a	; 0xe38a <put_rc>
   10980:	0f 90       	pop	r0
   10982:	0f 90       	pop	r0
   10984:	0f 90       	pop	r0
   10986:	0f 90       	pop	r0
   10988:	0f 90       	pop	r0
   1098a:	ce 01       	movw	r24, r28
   1098c:	df 91       	pop	r29
   1098e:	cf 91       	pop	r28
   10990:	1f 91       	pop	r17
   10992:	0f 91       	pop	r16
   10994:	08 95       	ret

00010996 <dbf_read>:
   10996:	cf 93       	push	r28
   10998:	df 93       	push	r29
   1099a:	0e 94 08 5d 	call	0xba10	; 0xba10 <f_read>
   1099e:	ec 01       	movw	r28, r24
   109a0:	89 2b       	or	r24, r25
   109a2:	69 f0       	breq	.+26     	; 0x109be <dbf_read+0x28>
   109a4:	87 ed       	ldi	r24, 0xD7	; 215
   109a6:	9e e0       	ldi	r25, 0x0E	; 14
   109a8:	1f 92       	push	r1
   109aa:	9f 93       	push	r25
   109ac:	8f 93       	push	r24
   109ae:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   109b2:	ce 01       	movw	r24, r28
   109b4:	0e 94 c5 71 	call	0xe38a	; 0xe38a <put_rc>
   109b8:	0f 90       	pop	r0
   109ba:	0f 90       	pop	r0
   109bc:	0f 90       	pop	r0
   109be:	ce 01       	movw	r24, r28
   109c0:	df 91       	pop	r29
   109c2:	cf 91       	pop	r28
   109c4:	08 95       	ret

000109c6 <dbf_write>:
   109c6:	cf 93       	push	r28
   109c8:	df 93       	push	r29
   109ca:	0e 94 53 5e 	call	0xbca6	; 0xbca6 <f_write>
   109ce:	ec 01       	movw	r28, r24
   109d0:	89 2b       	or	r24, r25
   109d2:	69 f0       	breq	.+26     	; 0x109ee <dbf_write+0x28>
   109d4:	89 ec       	ldi	r24, 0xC9	; 201
   109d6:	9e e0       	ldi	r25, 0x0E	; 14
   109d8:	1f 92       	push	r1
   109da:	9f 93       	push	r25
   109dc:	8f 93       	push	r24
   109de:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   109e2:	ce 01       	movw	r24, r28
   109e4:	0e 94 c5 71 	call	0xe38a	; 0xe38a <put_rc>
   109e8:	0f 90       	pop	r0
   109ea:	0f 90       	pop	r0
   109ec:	0f 90       	pop	r0
   109ee:	ce 01       	movw	r24, r28
   109f0:	df 91       	pop	r29
   109f2:	cf 91       	pop	r28
   109f4:	08 95       	ret

000109f6 <dbf_lseek>:
   109f6:	cf 93       	push	r28
   109f8:	df 93       	push	r29
   109fa:	0e 94 14 62 	call	0xc428	; 0xc428 <f_lseek>
   109fe:	ec 01       	movw	r28, r24
   10a00:	89 2b       	or	r24, r25
   10a02:	69 f0       	breq	.+26     	; 0x10a1e <dbf_lseek+0x28>
   10a04:	8c eb       	ldi	r24, 0xBC	; 188
   10a06:	9e e0       	ldi	r25, 0x0E	; 14
   10a08:	1f 92       	push	r1
   10a0a:	9f 93       	push	r25
   10a0c:	8f 93       	push	r24
   10a0e:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   10a12:	ce 01       	movw	r24, r28
   10a14:	0e 94 c5 71 	call	0xe38a	; 0xe38a <put_rc>
   10a18:	0f 90       	pop	r0
   10a1a:	0f 90       	pop	r0
   10a1c:	0f 90       	pop	r0
   10a1e:	ce 01       	movw	r24, r28
   10a20:	df 91       	pop	r29
   10a22:	cf 91       	pop	r28
   10a24:	08 95       	ret

00010a26 <dbf_close>:
   10a26:	cf 93       	push	r28
   10a28:	df 93       	push	r29
   10a2a:	0e 94 6a 60 	call	0xc0d4	; 0xc0d4 <f_close>
   10a2e:	ec 01       	movw	r28, r24
   10a30:	89 2b       	or	r24, r25
   10a32:	69 f0       	breq	.+26     	; 0x10a4e <dbf_close+0x28>
   10a34:	8e ea       	ldi	r24, 0xAE	; 174
   10a36:	9e e0       	ldi	r25, 0x0E	; 14
   10a38:	1f 92       	push	r1
   10a3a:	9f 93       	push	r25
   10a3c:	8f 93       	push	r24
   10a3e:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   10a42:	ce 01       	movw	r24, r28
   10a44:	0e 94 c5 71 	call	0xe38a	; 0xe38a <put_rc>
   10a48:	0f 90       	pop	r0
   10a4a:	0f 90       	pop	r0
   10a4c:	0f 90       	pop	r0
   10a4e:	ce 01       	movw	r24, r28
   10a50:	df 91       	pop	r29
   10a52:	cf 91       	pop	r28
   10a54:	08 95       	ret

00010a56 <dbf_open_read>:
   10a56:	a6 e2       	ldi	r26, 0x26	; 38
   10a58:	b2 e0       	ldi	r27, 0x02	; 2
   10a5a:	e1 e3       	ldi	r30, 0x31	; 49
   10a5c:	f5 e8       	ldi	r31, 0x85	; 133
   10a5e:	0c 94 e6 e5 	jmp	0x1cbcc	; 0x1cbcc <__prologue_saves__+0xc>
   10a62:	4a 01       	movw	r8, r20
   10a64:	5b 01       	movw	r10, r22
   10a66:	69 01       	movw	r12, r18
   10a68:	cb 5d       	subi	r28, 0xDB	; 219
   10a6a:	dd 4f       	sbci	r29, 0xFD	; 253
   10a6c:	19 82       	std	Y+1, r1	; 0x01
   10a6e:	18 82       	st	Y, r1
   10a70:	c5 52       	subi	r28, 0x25	; 37
   10a72:	d2 40       	sbci	r29, 0x02	; 2
   10a74:	43 e0       	ldi	r20, 0x03	; 3
   10a76:	bc 01       	movw	r22, r24
   10a78:	ce 01       	movw	r24, r28
   10a7a:	01 96       	adiw	r24, 0x01	; 1
   10a7c:	6a df       	rcall	.-300    	; 0x10952 <dbf_open>
   10a7e:	89 2b       	or	r24, r25
   10a80:	19 f0       	breq	.+6      	; 0x10a88 <dbf_open_read+0x32>
   10a82:	81 e1       	ldi	r24, 0x11	; 17
   10a84:	90 e0       	ldi	r25, 0x00	; 0
   10a86:	2f c0       	rjmp	.+94     	; 0x10ae6 <dbf_open_read+0x90>
   10a88:	b5 01       	movw	r22, r10
   10a8a:	a4 01       	movw	r20, r8
   10a8c:	ce 01       	movw	r24, r28
   10a8e:	01 96       	adiw	r24, 0x01	; 1
   10a90:	b2 df       	rcall	.-156    	; 0x109f6 <dbf_lseek>
   10a92:	89 2b       	or	r24, r25
   10a94:	59 f0       	breq	.+22     	; 0x10aac <dbf_open_read+0x56>
   10a96:	85 e0       	ldi	r24, 0x05	; 5
   10a98:	90 e0       	ldi	r25, 0x00	; 0
   10a9a:	f7 01       	movw	r30, r14
   10a9c:	91 83       	std	Z+1, r25	; 0x01
   10a9e:	80 83       	st	Z, r24
   10aa0:	ce 01       	movw	r24, r28
   10aa2:	01 96       	adiw	r24, 0x01	; 1
   10aa4:	c0 df       	rcall	.-128    	; 0x10a26 <dbf_close>
   10aa6:	8f ef       	ldi	r24, 0xFF	; 255
   10aa8:	9f ef       	ldi	r25, 0xFF	; 255
   10aaa:	27 c0       	rjmp	.+78     	; 0x10afa <dbf_open_read+0xa4>
   10aac:	9e 01       	movw	r18, r28
   10aae:	2b 5d       	subi	r18, 0xDB	; 219
   10ab0:	3d 4f       	sbci	r19, 0xFD	; 253
   10ab2:	a8 01       	movw	r20, r16
   10ab4:	b6 01       	movw	r22, r12
   10ab6:	ce 01       	movw	r24, r28
   10ab8:	01 96       	adiw	r24, 0x01	; 1
   10aba:	6d df       	rcall	.-294    	; 0x10996 <dbf_read>
   10abc:	89 2b       	or	r24, r25
   10abe:	49 f4       	brne	.+18     	; 0x10ad2 <dbf_open_read+0x7c>
   10ac0:	cb 5d       	subi	r28, 0xDB	; 219
   10ac2:	dd 4f       	sbci	r29, 0xFD	; 253
   10ac4:	88 81       	ld	r24, Y
   10ac6:	99 81       	ldd	r25, Y+1	; 0x01
   10ac8:	c5 52       	subi	r28, 0x25	; 37
   10aca:	d2 40       	sbci	r29, 0x02	; 2
   10acc:	08 17       	cp	r16, r24
   10ace:	19 07       	cpc	r17, r25
   10ad0:	19 f0       	breq	.+6      	; 0x10ad8 <dbf_open_read+0x82>
   10ad2:	81 e0       	ldi	r24, 0x01	; 1
   10ad4:	90 e0       	ldi	r25, 0x00	; 0
   10ad6:	e1 cf       	rjmp	.-62     	; 0x10a9a <dbf_open_read+0x44>
   10ad8:	ce 01       	movw	r24, r28
   10ada:	01 96       	adiw	r24, 0x01	; 1
   10adc:	a4 df       	rcall	.-184    	; 0x10a26 <dbf_close>
   10ade:	89 2b       	or	r24, r25
   10ae0:	31 f0       	breq	.+12     	; 0x10aee <dbf_open_read+0x98>
   10ae2:	80 e1       	ldi	r24, 0x10	; 16
   10ae4:	90 e0       	ldi	r25, 0x00	; 0
   10ae6:	f7 01       	movw	r30, r14
   10ae8:	91 83       	std	Z+1, r25	; 0x01
   10aea:	80 83       	st	Z, r24
   10aec:	dc cf       	rjmp	.-72     	; 0x10aa6 <dbf_open_read+0x50>
   10aee:	cb 5d       	subi	r28, 0xDB	; 219
   10af0:	dd 4f       	sbci	r29, 0xFD	; 253
   10af2:	88 81       	ld	r24, Y
   10af4:	99 81       	ldd	r25, Y+1	; 0x01
   10af6:	c5 52       	subi	r28, 0x25	; 37
   10af8:	d2 40       	sbci	r29, 0x02	; 2
   10afa:	ca 5d       	subi	r28, 0xDA	; 218
   10afc:	dd 4f       	sbci	r29, 0xFD	; 253
   10afe:	ec e0       	ldi	r30, 0x0C	; 12
   10b00:	0c 94 02 e6 	jmp	0x1cc04	; 0x1cc04 <__epilogue_restores__+0xc>

00010b04 <dbf_open_write>:
   10b04:	a6 e2       	ldi	r26, 0x26	; 38
   10b06:	b2 e0       	ldi	r27, 0x02	; 2
   10b08:	e8 e8       	ldi	r30, 0x88	; 136
   10b0a:	f5 e8       	ldi	r31, 0x85	; 133
   10b0c:	0c 94 e6 e5 	jmp	0x1cbcc	; 0x1cbcc <__prologue_saves__+0xc>
   10b10:	4a 01       	movw	r8, r20
   10b12:	5b 01       	movw	r10, r22
   10b14:	69 01       	movw	r12, r18
   10b16:	cb 5d       	subi	r28, 0xDB	; 219
   10b18:	dd 4f       	sbci	r29, 0xFD	; 253
   10b1a:	19 82       	std	Y+1, r1	; 0x01
   10b1c:	18 82       	st	Y, r1
   10b1e:	c5 52       	subi	r28, 0x25	; 37
   10b20:	d2 40       	sbci	r29, 0x02	; 2
   10b22:	43 e0       	ldi	r20, 0x03	; 3
   10b24:	bc 01       	movw	r22, r24
   10b26:	ce 01       	movw	r24, r28
   10b28:	01 96       	adiw	r24, 0x01	; 1
   10b2a:	13 df       	rcall	.-474    	; 0x10952 <dbf_open>
   10b2c:	89 2b       	or	r24, r25
   10b2e:	19 f0       	breq	.+6      	; 0x10b36 <dbf_open_write+0x32>
   10b30:	81 e1       	ldi	r24, 0x11	; 17
   10b32:	90 e0       	ldi	r25, 0x00	; 0
   10b34:	2f c0       	rjmp	.+94     	; 0x10b94 <dbf_open_write+0x90>
   10b36:	b5 01       	movw	r22, r10
   10b38:	a4 01       	movw	r20, r8
   10b3a:	ce 01       	movw	r24, r28
   10b3c:	01 96       	adiw	r24, 0x01	; 1
   10b3e:	5b df       	rcall	.-330    	; 0x109f6 <dbf_lseek>
   10b40:	89 2b       	or	r24, r25
   10b42:	59 f0       	breq	.+22     	; 0x10b5a <dbf_open_write+0x56>
   10b44:	85 e0       	ldi	r24, 0x05	; 5
   10b46:	90 e0       	ldi	r25, 0x00	; 0
   10b48:	f7 01       	movw	r30, r14
   10b4a:	91 83       	std	Z+1, r25	; 0x01
   10b4c:	80 83       	st	Z, r24
   10b4e:	ce 01       	movw	r24, r28
   10b50:	01 96       	adiw	r24, 0x01	; 1
   10b52:	69 df       	rcall	.-302    	; 0x10a26 <dbf_close>
   10b54:	8f ef       	ldi	r24, 0xFF	; 255
   10b56:	9f ef       	ldi	r25, 0xFF	; 255
   10b58:	27 c0       	rjmp	.+78     	; 0x10ba8 <dbf_open_write+0xa4>
   10b5a:	9e 01       	movw	r18, r28
   10b5c:	2b 5d       	subi	r18, 0xDB	; 219
   10b5e:	3d 4f       	sbci	r19, 0xFD	; 253
   10b60:	a8 01       	movw	r20, r16
   10b62:	b6 01       	movw	r22, r12
   10b64:	ce 01       	movw	r24, r28
   10b66:	01 96       	adiw	r24, 0x01	; 1
   10b68:	2e df       	rcall	.-420    	; 0x109c6 <dbf_write>
   10b6a:	89 2b       	or	r24, r25
   10b6c:	49 f4       	brne	.+18     	; 0x10b80 <dbf_open_write+0x7c>
   10b6e:	cb 5d       	subi	r28, 0xDB	; 219
   10b70:	dd 4f       	sbci	r29, 0xFD	; 253
   10b72:	88 81       	ld	r24, Y
   10b74:	99 81       	ldd	r25, Y+1	; 0x01
   10b76:	c5 52       	subi	r28, 0x25	; 37
   10b78:	d2 40       	sbci	r29, 0x02	; 2
   10b7a:	08 17       	cp	r16, r24
   10b7c:	19 07       	cpc	r17, r25
   10b7e:	19 f0       	breq	.+6      	; 0x10b86 <dbf_open_write+0x82>
   10b80:	81 e0       	ldi	r24, 0x01	; 1
   10b82:	90 e0       	ldi	r25, 0x00	; 0
   10b84:	e1 cf       	rjmp	.-62     	; 0x10b48 <dbf_open_write+0x44>
   10b86:	ce 01       	movw	r24, r28
   10b88:	01 96       	adiw	r24, 0x01	; 1
   10b8a:	4d df       	rcall	.-358    	; 0x10a26 <dbf_close>
   10b8c:	89 2b       	or	r24, r25
   10b8e:	31 f0       	breq	.+12     	; 0x10b9c <dbf_open_write+0x98>
   10b90:	80 e1       	ldi	r24, 0x10	; 16
   10b92:	90 e0       	ldi	r25, 0x00	; 0
   10b94:	f7 01       	movw	r30, r14
   10b96:	91 83       	std	Z+1, r25	; 0x01
   10b98:	80 83       	st	Z, r24
   10b9a:	dc cf       	rjmp	.-72     	; 0x10b54 <dbf_open_write+0x50>
   10b9c:	cb 5d       	subi	r28, 0xDB	; 219
   10b9e:	dd 4f       	sbci	r29, 0xFD	; 253
   10ba0:	88 81       	ld	r24, Y
   10ba2:	99 81       	ldd	r25, Y+1	; 0x01
   10ba4:	c5 52       	subi	r28, 0x25	; 37
   10ba6:	d2 40       	sbci	r29, 0x02	; 2
   10ba8:	ca 5d       	subi	r28, 0xDA	; 218
   10baa:	dd 4f       	sbci	r29, 0xFD	; 253
   10bac:	ec e0       	ldi	r30, 0x0C	; 12
   10bae:	0c 94 02 e6 	jmp	0x1cc04	; 0x1cc04 <__epilogue_restores__+0xc>

00010bb2 <gpib_timer_elapsed_begin>:
   10bb2:	0c 94 88 36 	jmp	0x6d10	; 0x6d10 <clock_elapsed_begin>
   10bb6:	08 95       	ret

00010bb8 <gpib_timer_reset>:
   10bb8:	f8 94       	cli
   10bba:	eb ed       	ldi	r30, 0xDB	; 219
   10bbc:	fb e1       	ldi	r31, 0x1B	; 27
   10bbe:	10 82       	st	Z, r1
   10bc0:	11 82       	std	Z+1, r1	; 0x01
   10bc2:	12 82       	std	Z+2, r1	; 0x02
   10bc4:	13 82       	std	Z+3, r1	; 0x03
   10bc6:	14 82       	std	Z+4, r1	; 0x04
   10bc8:	15 82       	std	Z+5, r1	; 0x05
   10bca:	16 82       	std	Z+6, r1	; 0x06
   10bcc:	17 82       	std	Z+7, r1	; 0x07
   10bce:	81 e0       	ldi	r24, 0x01	; 1
   10bd0:	80 87       	std	Z+8, r24	; 0x08
   10bd2:	78 94       	sei
   10bd4:	08 95       	ret

00010bd6 <gpib_timer_elapsed_end>:
   10bd6:	0c 94 8e 36 	jmp	0x6d1c	; 0x6d1c <clock_elapsed_end>
   10bda:	08 95       	ret

00010bdc <gpib_timer_task>:
   10bdc:	f8 94       	cli
   10bde:	80 91 df 1b 	lds	r24, 0x1BDF	; 0x801bdf <gpib_timer+0x4>
   10be2:	90 91 e0 1b 	lds	r25, 0x1BE0	; 0x801be0 <gpib_timer+0x5>
   10be6:	a0 91 e1 1b 	lds	r26, 0x1BE1	; 0x801be1 <gpib_timer+0x6>
   10bea:	b0 91 e2 1b 	lds	r27, 0x1BE2	; 0x801be2 <gpib_timer+0x7>
   10bee:	89 2b       	or	r24, r25
   10bf0:	8a 2b       	or	r24, r26
   10bf2:	8b 2b       	or	r24, r27
   10bf4:	a1 f0       	breq	.+40     	; 0x10c1e <gpib_timer_task+0x42>
   10bf6:	80 91 df 1b 	lds	r24, 0x1BDF	; 0x801bdf <gpib_timer+0x4>
   10bfa:	90 91 e0 1b 	lds	r25, 0x1BE0	; 0x801be0 <gpib_timer+0x5>
   10bfe:	a0 91 e1 1b 	lds	r26, 0x1BE1	; 0x801be1 <gpib_timer+0x6>
   10c02:	b0 91 e2 1b 	lds	r27, 0x1BE2	; 0x801be2 <gpib_timer+0x7>
   10c06:	01 97       	sbiw	r24, 0x01	; 1
   10c08:	a1 09       	sbc	r26, r1
   10c0a:	b1 09       	sbc	r27, r1
   10c0c:	80 93 df 1b 	sts	0x1BDF, r24	; 0x801bdf <gpib_timer+0x4>
   10c10:	90 93 e0 1b 	sts	0x1BE0, r25	; 0x801be0 <gpib_timer+0x5>
   10c14:	a0 93 e1 1b 	sts	0x1BE1, r26	; 0x801be1 <gpib_timer+0x6>
   10c18:	b0 93 e2 1b 	sts	0x1BE2, r27	; 0x801be2 <gpib_timer+0x7>
   10c1c:	03 c0       	rjmp	.+6      	; 0x10c24 <gpib_timer_task+0x48>
   10c1e:	81 e0       	ldi	r24, 0x01	; 1
   10c20:	80 93 e3 1b 	sts	0x1BE3, r24	; 0x801be3 <gpib_timer+0x8>
   10c24:	78 94       	sei
   10c26:	08 95       	ret

00010c28 <gpib_timeout_set>:
   10c28:	f8 94       	cli
   10c2a:	eb ed       	ldi	r30, 0xDB	; 219
   10c2c:	fb e1       	ldi	r31, 0x1B	; 27
   10c2e:	64 83       	std	Z+4, r22	; 0x04
   10c30:	75 83       	std	Z+5, r23	; 0x05
   10c32:	86 83       	std	Z+6, r24	; 0x06
   10c34:	97 83       	std	Z+7, r25	; 0x07
   10c36:	10 86       	std	Z+8, r1	; 0x08
   10c38:	78 94       	sei
   10c3a:	08 95       	ret

00010c3c <gpib_bus_read_init>:
   10c3c:	54 98       	cbi	0x0a, 4	; 10
   10c3e:	57 98       	cbi	0x0a, 7	; 10
   10c40:	45 98       	cbi	0x08, 5	; 8
   10c42:	3d 9a       	sbi	0x07, 5	; 7
   10c44:	11 b8       	out	0x01, r1	; 1
   10c46:	2f ef       	ldi	r18, 0xFF	; 255
   10c48:	22 b9       	out	0x02, r18	; 2
   10c4a:	43 98       	cbi	0x08, 3	; 8
   10c4c:	3b 9a       	sbi	0x07, 3	; 7
   10c4e:	21 98       	cbi	0x04, 1	; 4
   10c50:	56 98       	cbi	0x0a, 6	; 10
   10c52:	20 98       	cbi	0x04, 0	; 4
   10c54:	55 98       	cbi	0x0a, 5	; 10
   10c56:	89 2b       	or	r24, r25
   10c58:	39 f4       	brne	.+14     	; 0x10c68 <gpib_bus_read_init+0x2c>
   10c5a:	52 98       	cbi	0x0a, 2	; 10
   10c5c:	53 98       	cbi	0x0a, 3	; 10
   10c5e:	8d e0       	ldi	r24, 0x0D	; 13
   10c60:	8a 95       	dec	r24
   10c62:	f1 f7       	brne	.-4      	; 0x10c60 <gpib_bus_read_init+0x24>
   10c64:	00 00       	nop
   10c66:	04 c0       	rjmp	.+8      	; 0x10c70 <gpib_bus_read_init+0x34>
   10c68:	5b 98       	cbi	0x0b, 3	; 11
   10c6a:	53 9a       	sbi	0x0a, 3	; 10
   10c6c:	5a 98       	cbi	0x0b, 2	; 11
   10c6e:	52 9a       	sbi	0x0a, 2	; 10
   10c70:	42 98       	cbi	0x08, 2	; 8
   10c72:	3a 9a       	sbi	0x07, 2	; 7
   10c74:	44 9a       	sbi	0x08, 4	; 8
   10c76:	3c 9a       	sbi	0x07, 4	; 7
   10c78:	8d e0       	ldi	r24, 0x0D	; 13
   10c7a:	8a 95       	dec	r24
   10c7c:	f1 f7       	brne	.-4      	; 0x10c7a <gpib_bus_read_init+0x3e>
   10c7e:	00 00       	nop
   10c80:	08 95       	ret

00010c82 <gpib_bus_init>:
   10c82:	10 92 60 18 	sts	0x1860, r1	; 0x801860 <gpib_unread_f>
   10c86:	11 b8       	out	0x01, r1	; 1
   10c88:	8f ef       	ldi	r24, 0xFF	; 255
   10c8a:	82 b9       	out	0x02, r24	; 2
   10c8c:	21 98       	cbi	0x04, 1	; 4
   10c8e:	52 98       	cbi	0x0a, 2	; 10
   10c90:	53 98       	cbi	0x0a, 3	; 10
   10c92:	54 98       	cbi	0x0a, 4	; 10
   10c94:	57 98       	cbi	0x0a, 7	; 10
   10c96:	56 98       	cbi	0x0a, 6	; 10
   10c98:	20 98       	cbi	0x04, 0	; 4
   10c9a:	55 98       	cbi	0x0a, 5	; 10
   10c9c:	45 98       	cbi	0x08, 5	; 8
   10c9e:	3d 9a       	sbi	0x07, 5	; 7
   10ca0:	43 98       	cbi	0x08, 3	; 8
   10ca2:	3b 9a       	sbi	0x07, 3	; 7
   10ca4:	42 98       	cbi	0x08, 2	; 8
   10ca6:	3a 9a       	sbi	0x07, 2	; 7
   10ca8:	44 9a       	sbi	0x08, 4	; 8
   10caa:	3c 9a       	sbi	0x07, 4	; 7
   10cac:	8d e0       	ldi	r24, 0x0D	; 13
   10cae:	8a 95       	dec	r24
   10cb0:	f1 f7       	brne	.-4      	; 0x10cae <gpib_bus_init+0x2c>
   10cb2:	00 00       	nop
   10cb4:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   10cb8:	82 ff       	sbrs	r24, 2
   10cba:	0a c0       	rjmp	.+20     	; 0x10cd0 <gpib_bus_init+0x4e>
   10cbc:	81 eb       	ldi	r24, 0xB1	; 177
   10cbe:	91 e1       	ldi	r25, 0x11	; 17
   10cc0:	1f 92       	push	r1
   10cc2:	9f 93       	push	r25
   10cc4:	8f 93       	push	r24
   10cc6:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   10cca:	0f 90       	pop	r0
   10ccc:	0f 90       	pop	r0
   10cce:	0f 90       	pop	r0
   10cd0:	08 95       	ret

00010cd2 <gpib_state_init>:
   10cd2:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   10cd6:	82 ff       	sbrs	r24, 2
   10cd8:	0a c0       	rjmp	.+20     	; 0x10cee <gpib_state_init+0x1c>
   10cda:	8e e9       	ldi	r24, 0x9E	; 158
   10cdc:	91 e1       	ldi	r25, 0x11	; 17
   10cde:	1f 92       	push	r1
   10ce0:	9f 93       	push	r25
   10ce2:	8f 93       	push	r24
   10ce4:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   10ce8:	0f 90       	pop	r0
   10cea:	0f 90       	pop	r0
   10cec:	0f 90       	pop	r0
   10cee:	05 de       	rcall	.-1014   	; 0x108fa <ppr_init>
   10cf0:	0e 94 9b 90 	call	0x12136	; 0x12136 <listen_cleanup>
   10cf4:	0e 94 ab 91 	call	0x12356	; 0x12356 <talk_cleanup>
   10cf8:	10 92 e7 1d 	sts	0x1DE7, r1	; 0x801de7 <spoll>
   10cfc:	10 92 ea 1d 	sts	0x1DEA, r1	; 0x801dea <talking>
   10d00:	10 92 ed 1d 	sts	0x1DED, r1	; 0x801ded <talking_last>
   10d04:	10 92 ec 1d 	sts	0x1DEC, r1	; 0x801dec <listening>
   10d08:	10 92 e6 1d 	sts	0x1DE6, r1	; 0x801de6 <listening_last>
   10d0c:	10 92 e5 1b 	sts	0x1BE5, r1	; 0x801be5 <lastcmd+0x1>
   10d10:	10 92 e4 1b 	sts	0x1BE4, r1	; 0x801be4 <lastcmd>
   10d14:	10 92 e9 1d 	sts	0x1DE9, r1	; 0x801de9 <current+0x1>
   10d18:	10 92 e8 1d 	sts	0x1DE8, r1	; 0x801de8 <current>
   10d1c:	10 92 eb 1d 	sts	0x1DEB, r1	; 0x801deb <secondary>
   10d20:	08 95       	ret

00010d22 <gpib_enable_PPR>:
   10d22:	cf 93       	push	r28
   10d24:	df 93       	push	r29
   10d26:	ec 01       	movw	r28, r24
   10d28:	88 30       	cpi	r24, 0x08	; 8
   10d2a:	91 05       	cpc	r25, r1
   10d2c:	78 f0       	brcs	.+30     	; 0x10d4c <gpib_enable_PPR+0x2a>
   10d2e:	df 93       	push	r29
   10d30:	cf 93       	push	r28
   10d32:	88 e7       	ldi	r24, 0x78	; 120
   10d34:	91 e1       	ldi	r25, 0x11	; 17
   10d36:	1f 92       	push	r1
   10d38:	9f 93       	push	r25
   10d3a:	8f 93       	push	r24
   10d3c:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   10d40:	0f 90       	pop	r0
   10d42:	0f 90       	pop	r0
   10d44:	0f 90       	pop	r0
   10d46:	0f 90       	pop	r0
   10d48:	0f 90       	pop	r0
   10d4a:	19 c0       	rjmp	.+50     	; 0x10d7e <gpib_enable_PPR+0x5c>
   10d4c:	e7 dd       	rcall	.-1074   	; 0x1091c <ppr_bit_set>
   10d4e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   10d52:	81 ff       	sbrs	r24, 1
   10d54:	14 c0       	rjmp	.+40     	; 0x10d7e <gpib_enable_PPR+0x5c>
   10d56:	cd dd       	rcall	.-1126   	; 0x108f2 <ppr_reg>
   10d58:	1f 92       	push	r1
   10d5a:	8f 93       	push	r24
   10d5c:	df 93       	push	r29
   10d5e:	cf 93       	push	r28
   10d60:	8d e5       	ldi	r24, 0x5D	; 93
   10d62:	91 e1       	ldi	r25, 0x11	; 17
   10d64:	1f 92       	push	r1
   10d66:	9f 93       	push	r25
   10d68:	8f 93       	push	r24
   10d6a:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   10d6e:	8d b7       	in	r24, 0x3d	; 61
   10d70:	9e b7       	in	r25, 0x3e	; 62
   10d72:	07 96       	adiw	r24, 0x07	; 7
   10d74:	0f b6       	in	r0, 0x3f	; 63
   10d76:	f8 94       	cli
   10d78:	9e bf       	out	0x3e, r25	; 62
   10d7a:	0f be       	out	0x3f, r0	; 63
   10d7c:	8d bf       	out	0x3d, r24	; 61
   10d7e:	df 91       	pop	r29
   10d80:	cf 91       	pop	r28
   10d82:	08 95       	ret

00010d84 <gpib_disable_PPR>:
   10d84:	cf 93       	push	r28
   10d86:	df 93       	push	r29
   10d88:	ec 01       	movw	r28, r24
   10d8a:	88 30       	cpi	r24, 0x08	; 8
   10d8c:	91 05       	cpc	r25, r1
   10d8e:	78 f0       	brcs	.+30     	; 0x10dae <gpib_disable_PPR+0x2a>
   10d90:	df 93       	push	r29
   10d92:	cf 93       	push	r28
   10d94:	86 e3       	ldi	r24, 0x36	; 54
   10d96:	91 e1       	ldi	r25, 0x11	; 17
   10d98:	1f 92       	push	r1
   10d9a:	9f 93       	push	r25
   10d9c:	8f 93       	push	r24
   10d9e:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   10da2:	0f 90       	pop	r0
   10da4:	0f 90       	pop	r0
   10da6:	0f 90       	pop	r0
   10da8:	0f 90       	pop	r0
   10daa:	0f 90       	pop	r0
   10dac:	19 c0       	rjmp	.+50     	; 0x10de0 <gpib_disable_PPR+0x5c>
   10dae:	c3 dd       	rcall	.-1146   	; 0x10936 <ppr_bit_clr>
   10db0:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   10db4:	81 ff       	sbrs	r24, 1
   10db6:	14 c0       	rjmp	.+40     	; 0x10de0 <gpib_disable_PPR+0x5c>
   10db8:	9c dd       	rcall	.-1224   	; 0x108f2 <ppr_reg>
   10dba:	1f 92       	push	r1
   10dbc:	8f 93       	push	r24
   10dbe:	df 93       	push	r29
   10dc0:	cf 93       	push	r28
   10dc2:	8b e1       	ldi	r24, 0x1B	; 27
   10dc4:	91 e1       	ldi	r25, 0x11	; 17
   10dc6:	1f 92       	push	r1
   10dc8:	9f 93       	push	r25
   10dca:	8f 93       	push	r24
   10dcc:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   10dd0:	8d b7       	in	r24, 0x3d	; 61
   10dd2:	9e b7       	in	r25, 0x3e	; 62
   10dd4:	07 96       	adiw	r24, 0x07	; 7
   10dd6:	0f b6       	in	r0, 0x3f	; 63
   10dd8:	f8 94       	cli
   10dda:	9e bf       	out	0x3e, r25	; 62
   10ddc:	0f be       	out	0x3f, r0	; 63
   10dde:	8d bf       	out	0x3d, r24	; 61
   10de0:	df 91       	pop	r29
   10de2:	cf 91       	pop	r28
   10de4:	08 95       	ret

00010de6 <gpib_assert_ifc>:
   10de6:	5c 98       	cbi	0x0b, 4	; 11
   10de8:	54 9a       	sbi	0x0a, 4	; 10
   10dea:	6a ef       	ldi	r22, 0xFA	; 250
   10dec:	70 e0       	ldi	r23, 0x00	; 0
   10dee:	80 e0       	ldi	r24, 0x00	; 0
   10df0:	90 e0       	ldi	r25, 0x00	; 0
   10df2:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <delayus>
   10df6:	54 98       	cbi	0x0a, 4	; 10
   10df8:	6a ef       	ldi	r22, 0xFA	; 250
   10dfa:	70 e0       	ldi	r23, 0x00	; 0
   10dfc:	80 e0       	ldi	r24, 0x00	; 0
   10dfe:	90 e0       	ldi	r25, 0x00	; 0
   10e00:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <delayus>
   10e04:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   10e08:	82 ff       	sbrs	r24, 2
   10e0a:	0a c0       	rjmp	.+20     	; 0x10e20 <gpib_assert_ifc+0x3a>
   10e0c:	8c ee       	ldi	r24, 0xEC	; 236
   10e0e:	90 e1       	ldi	r25, 0x10	; 16
   10e10:	1f 92       	push	r1
   10e12:	9f 93       	push	r25
   10e14:	8f 93       	push	r24
   10e16:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   10e1a:	0f 90       	pop	r0
   10e1c:	0f 90       	pop	r0
   10e1e:	0f 90       	pop	r0
   10e20:	08 95       	ret

00010e22 <gpib_unread>:
   10e22:	cf 93       	push	r28
   10e24:	df 93       	push	r29
   10e26:	ec 01       	movw	r28, r24
   10e28:	80 91 60 18 	lds	r24, 0x1860	; 0x801860 <gpib_unread_f>
   10e2c:	81 11       	cpse	r24, r1
   10e2e:	08 c0       	rjmp	.+16     	; 0x10e40 <gpib_unread+0x1e>
   10e30:	d0 93 ef 1d 	sts	0x1DEF, r29	; 0x801def <gpib_unread_data+0x1>
   10e34:	c0 93 ee 1d 	sts	0x1DEE, r28	; 0x801dee <gpib_unread_data>
   10e38:	81 e0       	ldi	r24, 0x01	; 1
   10e3a:	80 93 60 18 	sts	0x1860, r24	; 0x801860 <gpib_unread_f>
   10e3e:	12 c0       	rjmp	.+36     	; 0x10e64 <gpib_unread+0x42>
   10e40:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   10e44:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   10e48:	85 70       	andi	r24, 0x05	; 5
   10e4a:	99 27       	eor	r25, r25
   10e4c:	89 2b       	or	r24, r25
   10e4e:	51 f0       	breq	.+20     	; 0x10e64 <gpib_unread+0x42>
   10e50:	89 ea       	ldi	r24, 0xA9	; 169
   10e52:	90 e1       	ldi	r25, 0x10	; 16
   10e54:	1f 92       	push	r1
   10e56:	9f 93       	push	r25
   10e58:	8f 93       	push	r24
   10e5a:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   10e5e:	0f 90       	pop	r0
   10e60:	0f 90       	pop	r0
   10e62:	0f 90       	pop	r0
   10e64:	ce 01       	movw	r24, r28
   10e66:	df 91       	pop	r29
   10e68:	cf 91       	pop	r28
   10e6a:	08 95       	ret

00010e6c <gpib_bus_read>:

/// @brief Read GPIB data BUS only
/// @return  bus (lower 8 bits)
uint8_t gpib_bus_read()
{
    uint8_t bus = ~(GPIB_BUS_RD());
   10e6c:	11 b8       	out	0x01, r1	; 1
   10e6e:	80 b1       	in	r24, 0x00	; 0
   10e70:	80 95       	com	r24

    ///@brief if a command byte (ATN low) then strip partity
    if(!GPIB_PIN_TST(ATN))
   10e72:	4e 9b       	sbis	0x09, 6	; 9
        bus &= 0x7f;
   10e74:	8f 77       	andi	r24, 0x7F	; 127
    else
        bus &= 0xff;
    return(bus);
}
   10e76:	08 95       	ret

00010e78 <gpib_control_pin_read>:
/// @return  control lines (upper 8 bits)
/// @see gpib_bus_read_init()
uint16_t gpib_control_pin_read()
{
    uint16_t control = 0;
    if(GPIB_PIN_TST(ATN) == 0 )
   10e78:	4e 99       	sbic	0x09, 6	; 9
   10e7a:	03 c0       	rjmp	.+6      	; 0x10e82 <gpib_control_pin_read+0xa>
        control |= ATN_FLAG;
   10e7c:	80 e0       	ldi	r24, 0x00	; 0
   10e7e:	94 e0       	ldi	r25, 0x04	; 4
   10e80:	02 c0       	rjmp	.+4      	; 0x10e86 <gpib_control_pin_read+0xe>
///   FIXME We could add a test for read/write state ??
/// @return  control lines (upper 8 bits)
/// @see gpib_bus_read_init()
uint16_t gpib_control_pin_read()
{
    uint16_t control = 0;
   10e82:	80 e0       	ldi	r24, 0x00	; 0
   10e84:	90 e0       	ldi	r25, 0x00	; 0
    if(GPIB_PIN_TST(ATN) == 0 )
        control |= ATN_FLAG;
    if(GPIB_PIN_TST(EOI) == 0 )
   10e86:	18 9b       	sbis	0x03, 0	; 3
        control |= EOI_FLAG;
   10e88:	91 60       	ori	r25, 0x01	; 1
    if(GPIB_PIN_TST(SRQ) == 0 )
   10e8a:	4d 9b       	sbis	0x09, 5	; 9
        control |= SRQ_FLAG;
   10e8c:	92 60       	ori	r25, 0x02	; 2
    if(GPIB_PIN_TST(REN) == 0 )
   10e8e:	4f 9b       	sbis	0x09, 7	; 9
        control |= REN_FLAG;
   10e90:	98 60       	ori	r25, 0x08	; 8
    if(GPIB_PIN_TST(IFC) == 0 )
   10e92:	4c 9b       	sbis	0x09, 4	; 9
        control |= IFC_FLAG;
   10e94:	90 61       	ori	r25, 0x10	; 16
    return(control);
}
   10e96:	08 95       	ret

00010e98 <gpib_handshake_pin_read>:
uint16_t gpib_handshake_pin_read()
{
    uint16_t control = 0;
    ///@brief for tracing we can reuse the error flag bit values for DAV,NRFD and NDAC
    /// FYI: This has no impact on the gpib_read_byte() functions and return values
    if(GPIB_PIN_TST(DAV) == 0 )
   10e98:	19 99       	sbic	0x03, 1	; 3
   10e9a:	03 c0       	rjmp	.+6      	; 0x10ea2 <gpib_handshake_pin_read+0xa>
        control |= DAV_FLAG;
   10e9c:	80 e0       	ldi	r24, 0x00	; 0
   10e9e:	90 e2       	ldi	r25, 0x20	; 32
   10ea0:	02 c0       	rjmp	.+4      	; 0x10ea6 <gpib_handshake_pin_read+0xe>
/// FIXME: V2 boards can only read pins enabled for read by the SN75162
///   FIXME We could add a test for read/write state ??
/// @return  handshake lines (upper 8 bits)
uint16_t gpib_handshake_pin_read()
{
    uint16_t control = 0;
   10ea2:	80 e0       	ldi	r24, 0x00	; 0
   10ea4:	90 e0       	ldi	r25, 0x00	; 0
    ///@brief for tracing we can reuse the error flag bit values for DAV,NRFD and NDAC
    /// FYI: This has no impact on the gpib_read_byte() functions and return values
    if(GPIB_PIN_TST(DAV) == 0 )
        control |= DAV_FLAG;
    if(GPIB_PIN_TST(NRFD) == 0 )
   10ea6:	4a 9b       	sbis	0x09, 2	; 9
        control |= NRFD_FLAG;
   10ea8:	90 64       	ori	r25, 0x40	; 64
    if(GPIB_PIN_TST(NDAC) == 0 )
   10eaa:	4b 9b       	sbis	0x09, 3	; 9
        control |= NDAC_FLAG;
   10eac:	90 68       	ori	r25, 0x80	; 128
    return(control);
}
   10eae:	08 95       	ret

00010eb0 <gpib_write_byte>:
///       - REN_FLAG
///       - PP_FLAG
///     - Error Flags:
///       - IFC_FLAG
uint16_t gpib_write_byte(uint16_t ch)
{
   10eb0:	2f 92       	push	r2
   10eb2:	3f 92       	push	r3
   10eb4:	4f 92       	push	r4
   10eb6:	6f 92       	push	r6
   10eb8:	7f 92       	push	r7
   10eba:	8f 92       	push	r8
   10ebc:	cf 92       	push	r12
   10ebe:	df 92       	push	r13
   10ec0:	ef 92       	push	r14
   10ec2:	1f 93       	push	r17
   10ec4:	cf 93       	push	r28
   10ec6:	df 93       	push	r29
   10ec8:	cd b7       	in	r28, 0x3d	; 61
   10eca:	de b7       	in	r29, 0x3e	; 62
   10ecc:	28 97       	sbiw	r28, 0x08	; 8
   10ece:	0f b6       	in	r0, 0x3f	; 63
   10ed0:	f8 94       	cli
   10ed2:	de bf       	out	0x3e, r29	; 62
   10ed4:	0f be       	out	0x3f, r0	; 63
   10ed6:	cd bf       	out	0x3d, r28	; 61
   10ed8:	98 87       	std	Y+8, r25	; 0x08
   10eda:	8f 83       	std	Y+7, r24	; 0x07
    uint8_t tx_state;

	// Wait for DAV to be released before starting
	// Read state for DAV
	gpib_bus_read_init(0);
   10edc:	80 e0       	ldi	r24, 0x00	; 0
   10ede:	90 e0       	ldi	r25, 0x00	; 0
   10ee0:	ad de       	rcall	.-678    	; 0x10c3c <gpib_bus_read_init>
	// Bus read init sets the following states
	// GPIB_BUS_LATCH_WR(0xff); // float OC BUS on write
	// GPIB_IO_LOW(PE);			// BUS OC PULLUP

    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);
   10ee2:	64 ef       	ldi	r22, 0xF4	; 244
   10ee4:	71 e0       	ldi	r23, 0x01	; 1
   10ee6:	80 e0       	ldi	r24, 0x00	; 0
   10ee8:	90 e0       	ldi	r25, 0x00	; 0
   10eea:	9e de       	rcall	.-708    	; 0x10c28 <gpib_timeout_set>

	// Bus read init sets the following states
	// GPIB_BUS_LATCH_WR(0xff); // float OC BUS on write
	// GPIB_IO_LOW(PE);			// BUS OC PULLUP

    tx_state = GPIB_TX_START;
   10eec:	10 e0       	ldi	r17, 0x00	; 0
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
                        printf("<BUS waiting for DAV==1>\n");
   10eee:	87 e1       	ldi	r24, 0x17	; 23
   10ef0:	90 e1       	ldi	r25, 0x10	; 16
   10ef2:	6c 01       	movw	r12, r24
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
                        printf("<BUS waiting for NDAC==1>\n");
   10ef4:	81 e3       	ldi	r24, 0x31	; 49
   10ef6:	90 e1       	ldi	r25, 0x10	; 16
   10ef8:	3c 01       	movw	r6, r24
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
                        printf("<BUS waiting for NRFD==0>\n");
   10efa:	8c e4       	ldi	r24, 0x4C	; 76
   10efc:	90 e1       	ldi	r25, 0x10	; 16
   10efe:	1c 01       	movw	r2, r24
                }
                if (gpib_timeout_test())
                {
#if SDEBUG
                    if(debuglevel & (1+4))
                        printf("<BUS waiting for NRFD==1 && NDAC == 0>\n");
   10f00:	87 e6       	ldi	r24, 0x67	; 103
   10f02:	90 e1       	ldi	r25, 0x10	; 16
   10f04:	9c 01       	movw	r18, r24
   10f06:	40 e0       	ldi	r20, 0x00	; 0
   10f08:	29 83       	std	Y+1, r18	; 0x01
   10f0a:	3a 83       	std	Y+2, r19	; 0x02
   10f0c:	4b 83       	std	Y+3, r20	; 0x03
                }
                if (gpib_timeout_test())
                {
#if SDEBUG
                    if(debuglevel & (1+4))
                        printf("<BUS waiting for DAV==1>\n");
   10f0e:	8f e8       	ldi	r24, 0x8F	; 143
   10f10:	90 e1       	ldi	r25, 0x10	; 16
   10f12:	9c 01       	movw	r18, r24
   10f14:	40 e0       	ldi	r20, 0x00	; 0
   10f16:	2c 83       	std	Y+4, r18	; 0x04
   10f18:	3d 83       	std	Y+5, r19	; 0x05
   10f1a:	4e 83       	std	Y+6, r20	; 0x06
    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);

    while(tx_state != GPIB_TX_DONE )
    {
        if(uart_keyhit(0))
   10f1c:	80 e0       	ldi	r24, 0x00	; 0
   10f1e:	0e 94 1c 2c 	call	0x5838	; 0x5838 <uart_keyhit>
   10f22:	89 2b       	or	r24, r25
   10f24:	09 f0       	breq	.+2      	; 0x10f28 <gpib_write_byte+0x78>
   10f26:	17 c1       	rjmp	.+558    	; 0x11156 <gpib_write_byte+0x2a6>
        if(gpib_detect_PP())
            ch |= PP_FLAG;
#endif

		// IFC is always in for a device
        if(GPIB_PIN_TST(IFC) == 0)
   10f28:	4c 99       	sbic	0x09, 4	; 9
   10f2a:	07 c0       	rjmp	.+14     	; 0x10f3a <gpib_write_byte+0x8a>
        {
            ch |= IFC_FLAG;
   10f2c:	8f 81       	ldd	r24, Y+7	; 0x07
   10f2e:	98 85       	ldd	r25, Y+8	; 0x08
   10f30:	90 61       	ori	r25, 0x10	; 16
   10f32:	98 87       	std	Y+8, r25	; 0x08
			gpib_bus_init();
   10f34:	8f 83       	std	Y+7, r24	; 0x07
   10f36:	a5 de       	rcall	.-694    	; 0x10c82 <gpib_bus_init>
            break;
   10f38:	0e c1       	rjmp	.+540    	; 0x11156 <gpib_write_byte+0x2a6>
        }

        switch(tx_state)
   10f3a:	81 2f       	mov	r24, r17
   10f3c:	90 e0       	ldi	r25, 0x00	; 0
   10f3e:	8a 30       	cpi	r24, 0x0A	; 10
   10f40:	91 05       	cpc	r25, r1
   10f42:	08 f0       	brcs	.+2      	; 0x10f46 <gpib_write_byte+0x96>
   10f44:	fe c0       	rjmp	.+508    	; 0x11142 <gpib_write_byte+0x292>
   10f46:	fc 01       	movw	r30, r24
   10f48:	e3 54       	subi	r30, 0x43	; 67
   10f4a:	ff 4f       	sbci	r31, 0xFF	; 255
   10f4c:	0c 94 9c e5 	jmp	0x1cb38	; 0x1cb38 <__tablejump2__>
        {
            case GPIB_TX_START:
                // Wait for release of DAV and EOI before starting
				// IF DAV = 0 the bus is busy
                if(GPIB_PIN_TST(DAV) == 1)
   10f50:	19 9b       	sbis	0x03, 1	; 3
   10f52:	12 c0       	rjmp	.+36     	; 0x10f78 <gpib_write_byte+0xc8>
					// We arive here in Read Mode - see gpib_bus_read_init(0);

					// Switch GBIB driver direction to Write
					// CPU has BUS already set IN with pullups = 0xff - see gpib_bus_read_init(0);
					// When we switch the GPIB drivers will be in OC mode and off the bus (0xff)
					GPIB_IO_HI(TE); // BUS OUT, DAV OUT, NRFD and NDAC IN
   10f54:	42 9a       	sbi	0x08, 2	; 8
   10f56:	3a 9a       	sbi	0x07, 2	; 7
					GPIB_IO_LOW(DC);// ATN OUT, EOI OUT, SRQ IN
   10f58:	44 98       	cbi	0x08, 4	; 8
   10f5a:	3c 9a       	sbi	0x07, 4	; 7
#endif
                    // My testing with various GPIB devices shows that we MUST assert ATN EARLY!
                    if(ch & ATN_FLAG)
   10f5c:	2f 81       	ldd	r18, Y+7	; 0x07
   10f5e:	38 85       	ldd	r19, Y+8	; 0x08
   10f60:	32 ff       	sbrs	r19, 2
   10f62:	03 c0       	rjmp	.+6      	; 0x10f6a <gpib_write_byte+0xba>
                        GPIB_IO_LOW(ATN);   // FYI: SS80 never sends ATN from a device
   10f64:	5e 98       	cbi	0x0b, 6	; 11
   10f66:	56 9a       	sbi	0x0a, 6	; 10
   10f68:	01 c0       	rjmp	.+2      	; 0x10f6c <gpib_write_byte+0xbc>
                    else
                        GPIB_PIN_FLOAT_UP(ATN);
   10f6a:	56 98       	cbi	0x0a, 6	; 10

                    gpib_timeout_set(HTIMEOUT);
   10f6c:	64 ef       	ldi	r22, 0xF4	; 244
   10f6e:	71 e0       	ldi	r23, 0x01	; 1
   10f70:	80 e0       	ldi	r24, 0x00	; 0
   10f72:	90 e0       	ldi	r25, 0x00	; 0
   10f74:	59 de       	rcall	.-846    	; 0x10c28 <gpib_timeout_set>
                    tx_state = GPIB_TX_WAIT_READY;
   10f76:	11 e0       	ldi	r17, 0x01	; 1
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   10f78:	80 91 e3 1b 	lds	r24, 0x1BE3	; 0x801be3 <gpib_timer+0x8>
                        GPIB_PIN_FLOAT_UP(ATN);

                    gpib_timeout_set(HTIMEOUT);
                    tx_state = GPIB_TX_WAIT_READY;
                }
                if (gpib_timeout_test())
   10f7c:	88 23       	and	r24, r24
   10f7e:	71 f2       	breq	.-100    	; 0x10f1c <gpib_write_byte+0x6c>
                {
#if SDEBUG
                    if(debuglevel & (1+4))
   10f80:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   10f84:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   10f88:	85 70       	andi	r24, 0x05	; 5
   10f8a:	99 27       	eor	r25, r25
   10f8c:	89 2b       	or	r24, r25
   10f8e:	39 f1       	breq	.+78     	; 0x10fde <gpib_write_byte+0x12e>
                        printf("<BUS waiting for DAV==1>\n");
   10f90:	1f 92       	push	r1
   10f92:	3d 81       	ldd	r19, Y+5	; 0x05
   10f94:	3f 93       	push	r19
   10f96:	4c 81       	ldd	r20, Y+4	; 0x04
   10f98:	4f 93       	push	r20
   10f9a:	1c c0       	rjmp	.+56     	; 0x10fd4 <gpib_write_byte+0x124>
                }
                break;

            case GPIB_TX_WAIT_READY:
                // Wait for ready condition
                if(GPIB_PIN_TST(NRFD) == 1 && GPIB_PIN_TST(NDAC) == 0)
   10f9c:	4a 9b       	sbis	0x09, 2	; 9
   10f9e:	08 c0       	rjmp	.+16     	; 0x10fb0 <gpib_write_byte+0x100>
   10fa0:	4b 99       	sbic	0x09, 3	; 9
                {
                    gpib_timeout_set(HTIMEOUT);
   10fa2:	06 c0       	rjmp	.+12     	; 0x10fb0 <gpib_write_byte+0x100>
   10fa4:	64 ef       	ldi	r22, 0xF4	; 244
   10fa6:	71 e0       	ldi	r23, 0x01	; 1
   10fa8:	80 e0       	ldi	r24, 0x00	; 0
   10faa:	90 e0       	ldi	r25, 0x00	; 0
                    tx_state = GPIB_TX_PUT_DATA;
   10fac:	3d de       	rcall	.-902    	; 0x10c28 <gpib_timeout_set>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   10fae:	12 e0       	ldi	r17, 0x02	; 2
   10fb0:	80 91 e3 1b 	lds	r24, 0x1BE3	; 0x801be3 <gpib_timer+0x8>
                if(GPIB_PIN_TST(NRFD) == 1 && GPIB_PIN_TST(NDAC) == 0)
                {
                    gpib_timeout_set(HTIMEOUT);
                    tx_state = GPIB_TX_PUT_DATA;
                }
                if (gpib_timeout_test())
   10fb4:	88 23       	and	r24, r24
   10fb6:	09 f4       	brne	.+2      	; 0x10fba <gpib_write_byte+0x10a>
                {
#if SDEBUG
                    if(debuglevel & (1+4))
   10fb8:	b1 cf       	rjmp	.-158    	; 0x10f1c <gpib_write_byte+0x6c>
   10fba:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   10fbe:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   10fc2:	85 70       	andi	r24, 0x05	; 5
   10fc4:	99 27       	eor	r25, r25
   10fc6:	89 2b       	or	r24, r25
                        printf("<BUS waiting for NRFD==1 && NDAC == 0>\n");
   10fc8:	51 f0       	breq	.+20     	; 0x10fde <gpib_write_byte+0x12e>
   10fca:	1f 92       	push	r1
   10fcc:	9a 81       	ldd	r25, Y+2	; 0x02
   10fce:	9f 93       	push	r25
   10fd0:	29 81       	ldd	r18, Y+1	; 0x01
   10fd2:	2f 93       	push	r18
   10fd4:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   10fd8:	0f 90       	pop	r0
   10fda:	0f 90       	pop	r0
#endif
                    ch |= TIMEOUT_FLAG;
   10fdc:	0f 90       	pop	r0
   10fde:	8f 81       	ldd	r24, Y+7	; 0x07
   10fe0:	98 85       	ldd	r25, Y+8	; 0x08
   10fe2:	90 64       	ori	r25, 0x40	; 64
   10fe4:	98 87       	std	Y+8, r25	; 0x08
   10fe6:	8f 83       	std	Y+7, r24	; 0x07
                }
                break;

            case GPIB_TX_PUT_DATA:

                if(ch & EOI_FLAG)
   10fe8:	b4 c0       	rjmp	.+360    	; 0x11152 <gpib_write_byte+0x2a2>
   10fea:	2f 81       	ldd	r18, Y+7	; 0x07
   10fec:	38 85       	ldd	r19, Y+8	; 0x08
   10fee:	30 ff       	sbrs	r19, 0
                    GPIB_IO_LOW(EOI);
   10ff0:	03 c0       	rjmp	.+6      	; 0x10ff8 <gpib_write_byte+0x148>
   10ff2:	28 98       	cbi	0x05, 0	; 5
   10ff4:	20 9a       	sbi	0x04, 0	; 4
                else
                    GPIB_PIN_FLOAT_UP(EOI);
   10ff6:	01 c0       	rjmp	.+2      	; 0x10ffa <gpib_write_byte+0x14a>

                GPIB_BUS_WR((ch & 0xff) ^ 0xff);  // Write Data inverted
   10ff8:	20 98       	cbi	0x04, 0	; 4
   10ffa:	8f ef       	ldi	r24, 0xFF	; 255
   10ffc:	81 b9       	out	0x01, r24	; 1
   10ffe:	8f 81       	ldd	r24, Y+7	; 0x07
   11000:	80 95       	com	r24
#if BOARD == 2
				// Switch to Tristate mode to soeed up Write
                GPIB_IO_HI(PE); 
   11002:	82 b9       	out	0x02, r24	; 2
   11004:	43 9a       	sbi	0x08, 3	; 8
   11006:	3b 9a       	sbi	0x07, 3	; 7
   11008:	3d e0       	ldi	r19, 0x0D	; 13
   1100a:	3a 95       	dec	r19
#endif
                GPIB_BUS_SETTLE();                // Let Data BUS settle

                gpib_timeout_set(HTIMEOUT);
   1100c:	f1 f7       	brne	.-4      	; 0x1100a <gpib_write_byte+0x15a>
   1100e:	00 00       	nop
   11010:	64 ef       	ldi	r22, 0xF4	; 244
   11012:	71 e0       	ldi	r23, 0x01	; 1
   11014:	80 e0       	ldi	r24, 0x00	; 0
   11016:	90 e0       	ldi	r25, 0x00	; 0
                tx_state = GPIB_TX_SET_DAV_LOW;
   11018:	07 de       	rcall	.-1010   	; 0x10c28 <gpib_timeout_set>
                break;


            case GPIB_TX_SET_DAV_LOW:
                GPIB_IO_LOW(DAV);
   1101a:	13 e0       	ldi	r17, 0x03	; 3
                gpib_timeout_set(HTIMEOUT);
   1101c:	7f cf       	rjmp	.-258    	; 0x10f1c <gpib_write_byte+0x6c>
   1101e:	29 98       	cbi	0x05, 1	; 5
   11020:	21 9a       	sbi	0x04, 1	; 4
   11022:	64 ef       	ldi	r22, 0xF4	; 244
   11024:	71 e0       	ldi	r23, 0x01	; 1
   11026:	80 e0       	ldi	r24, 0x00	; 0
                tx_state = GPIB_TX_WAIT_FOR_NRFD_LOW;
                break;

            ///@brief first device is ready
            case GPIB_TX_WAIT_FOR_NRFD_LOW:
                if (GPIB_PIN_TST(NRFD) == 0)
   11028:	90 e0       	ldi	r25, 0x00	; 0
   1102a:	fe dd       	rcall	.-1028   	; 0x10c28 <gpib_timeout_set>
                {
                    gpib_timeout_set(HTIMEOUT);
   1102c:	14 e0       	ldi	r17, 0x04	; 4
   1102e:	76 cf       	rjmp	.-276    	; 0x10f1c <gpib_write_byte+0x6c>
   11030:	4a 99       	sbic	0x09, 2	; 9
   11032:	07 c0       	rjmp	.+14     	; 0x11042 <gpib_write_byte+0x192>
   11034:	64 ef       	ldi	r22, 0xF4	; 244
   11036:	71 e0       	ldi	r23, 0x01	; 1
                    tx_state = GPIB_TX_WAIT_FOR_NDAC_HI;
   11038:	80 e0       	ldi	r24, 0x00	; 0
                    break;
   1103a:	90 e0       	ldi	r25, 0x00	; 0
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   1103c:	f5 dd       	rcall	.-1046   	; 0x10c28 <gpib_timeout_set>
   1103e:	15 e0       	ldi	r17, 0x05	; 5
                {
                    gpib_timeout_set(HTIMEOUT);
                    tx_state = GPIB_TX_WAIT_FOR_NDAC_HI;
                    break;
                }
                if (gpib_timeout_test())
   11040:	6d cf       	rjmp	.-294    	; 0x10f1c <gpib_write_byte+0x6c>
   11042:	80 91 e3 1b 	lds	r24, 0x1BE3	; 0x801be3 <gpib_timer+0x8>
                {
                    ch |= TIMEOUT_FLAG;
   11046:	88 23       	and	r24, r24
   11048:	09 f4       	brne	.+2      	; 0x1104c <gpib_write_byte+0x19c>
   1104a:	68 cf       	rjmp	.-304    	; 0x10f1c <gpib_write_byte+0x6c>
   1104c:	8f 81       	ldd	r24, Y+7	; 0x07
   1104e:	98 85       	ldd	r25, Y+8	; 0x08
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
   11050:	90 64       	ori	r25, 0x40	; 64
   11052:	98 87       	std	Y+8, r25	; 0x08
   11054:	8f 83       	std	Y+7, r24	; 0x07
   11056:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1105a:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1105e:	85 70       	andi	r24, 0x05	; 5
   11060:	99 27       	eor	r25, r25
                        printf("<BUS waiting for NRFD==0>\n");
   11062:	89 2b       	or	r24, r25
   11064:	09 f4       	brne	.+2      	; 0x11068 <gpib_write_byte+0x1b8>
   11066:	75 c0       	rjmp	.+234    	; 0x11152 <gpib_write_byte+0x2a2>
   11068:	1f 92       	push	r1
                }
                break;

            ///@brief ALL devices are ready
            case GPIB_TX_WAIT_FOR_NDAC_HI:
                if(GPIB_PIN_TST(NDAC) == 1)         // Byte byte accepted
   1106a:	3f 92       	push	r3
   1106c:	2f 92       	push	r2
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   1106e:	3f c0       	rjmp	.+126    	; 0x110ee <gpib_write_byte+0x23e>
   11070:	4b 99       	sbic	0x09, 3	; 9
                if(GPIB_PIN_TST(NDAC) == 1)         // Byte byte accepted
                {
                    tx_state = GPIB_TX_SET_DAV_HI;
                    break;
                }
                if (gpib_timeout_test())
   11072:	6b c0       	rjmp	.+214    	; 0x1114a <gpib_write_byte+0x29a>
   11074:	80 91 e3 1b 	lds	r24, 0x1BE3	; 0x801be3 <gpib_timer+0x8>
                {
                    ch |= TIMEOUT_FLAG;
   11078:	88 23       	and	r24, r24
   1107a:	09 f4       	brne	.+2      	; 0x1107e <gpib_write_byte+0x1ce>
   1107c:	4f cf       	rjmp	.-354    	; 0x10f1c <gpib_write_byte+0x6c>
   1107e:	2f 81       	ldd	r18, Y+7	; 0x07
   11080:	38 85       	ldd	r19, Y+8	; 0x08
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
   11082:	30 64       	ori	r19, 0x40	; 64
   11084:	38 87       	std	Y+8, r19	; 0x08
   11086:	2f 83       	std	Y+7, r18	; 0x07
   11088:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1108c:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   11090:	85 70       	andi	r24, 0x05	; 5
   11092:	99 27       	eor	r25, r25
                        printf("<BUS waiting for NDAC==1>\n");
   11094:	89 2b       	or	r24, r25
   11096:	09 f4       	brne	.+2      	; 0x1109a <gpib_write_byte+0x1ea>
   11098:	5c c0       	rjmp	.+184    	; 0x11152 <gpib_write_byte+0x2a2>
                }
                break;

            ///@release BUS
            case GPIB_TX_SET_DAV_HI:
                GPIB_PIN_FLOAT_UP(DAV);
   1109a:	1f 92       	push	r1
   1109c:	7f 92       	push	r7
   1109e:	6f 92       	push	r6
   110a0:	26 c0       	rjmp	.+76     	; 0x110ee <gpib_write_byte+0x23e>
				GPIB_BUS_SETTLE();			// give some time

				gpib_bus_read_init(0);		// Free BUS, NOT busy
   110a2:	21 98       	cbi	0x04, 1	; 4
   110a4:	3d e0       	ldi	r19, 0x0D	; 13
   110a6:	3a 95       	dec	r19
   110a8:	f1 f7       	brne	.-4      	; 0x110a6 <gpib_write_byte+0x1f6>

                gpib_timeout_set(HTIMEOUT);
   110aa:	00 00       	nop
   110ac:	80 e0       	ldi	r24, 0x00	; 0
   110ae:	90 e0       	ldi	r25, 0x00	; 0
   110b0:	c5 dd       	rcall	.-1142   	; 0x10c3c <gpib_bus_read_init>
   110b2:	64 ef       	ldi	r22, 0xF4	; 244
   110b4:	71 e0       	ldi	r23, 0x01	; 1
                tx_state = GPIB_TX_WAIT_FOR_DAV_HI;
   110b6:	80 e0       	ldi	r24, 0x00	; 0
                break;
   110b8:	90 e0       	ldi	r25, 0x00	; 0

			/// We are in read mode now
            ///@wait for DAV to finish float HI - finishing floating HI
            case GPIB_TX_WAIT_FOR_DAV_HI:
                if(GPIO_PIN_TST(DAV) == 1)
   110ba:	b6 dd       	rcall	.-1172   	; 0x10c28 <gpib_timeout_set>
   110bc:	17 e0       	ldi	r17, 0x07	; 7
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   110be:	2e cf       	rjmp	.-420    	; 0x10f1c <gpib_write_byte+0x6c>
   110c0:	19 99       	sbic	0x03, 1	; 3
                if(GPIO_PIN_TST(DAV) == 1)
                {
                    tx_state = GPIB_TX_FINISH;
                    break;
                }
                if (gpib_timeout_test())
   110c2:	45 c0       	rjmp	.+138    	; 0x1114e <gpib_write_byte+0x29e>
   110c4:	80 91 e3 1b 	lds	r24, 0x1BE3	; 0x801be3 <gpib_timer+0x8>
                {
                    ch |= TIMEOUT_FLAG;
   110c8:	88 23       	and	r24, r24
   110ca:	09 f4       	brne	.+2      	; 0x110ce <gpib_write_byte+0x21e>
   110cc:	27 cf       	rjmp	.-434    	; 0x10f1c <gpib_write_byte+0x6c>
   110ce:	8f 81       	ldd	r24, Y+7	; 0x07
   110d0:	98 85       	ldd	r25, Y+8	; 0x08
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
   110d2:	90 64       	ori	r25, 0x40	; 64
   110d4:	98 87       	std	Y+8, r25	; 0x08
   110d6:	8f 83       	std	Y+7, r24	; 0x07
   110d8:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   110dc:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   110e0:	85 70       	andi	r24, 0x05	; 5
                        printf("<BUS waiting for DAV==1>\n");
   110e2:	99 27       	eor	r25, r25
   110e4:	89 2b       	or	r24, r25
   110e6:	a9 f1       	breq	.+106    	; 0x11152 <gpib_write_byte+0x2a2>
   110e8:	1f 92       	push	r1
   110ea:	df 92       	push	r13
   110ec:	cf 92       	push	r12
   110ee:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   110f2:	0f 90       	pop	r0
                tx_state = GPIB_TX_DONE;
                break;

            case GPIB_TX_ERROR:
#if SDEBUG
                if(debuglevel & (1+4))
   110f4:	0f 90       	pop	r0
   110f6:	0f 90       	pop	r0
   110f8:	2c c0       	rjmp	.+88     	; 0x11152 <gpib_write_byte+0x2a2>
   110fa:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   110fe:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   11102:	85 70       	andi	r24, 0x05	; 5
                    printf("<NRFD=%d,NDAV=%d>\n", GPIB_PIN_TST(NRFD),GPIB_PIN_TST(NDAC));
   11104:	99 27       	eor	r25, r25
   11106:	89 2b       	or	r24, r25
   11108:	c1 f0       	breq	.+48     	; 0x1113a <gpib_write_byte+0x28a>
   1110a:	99 b1       	in	r25, 0x09	; 9
   1110c:	89 b1       	in	r24, 0x09	; 9
   1110e:	93 fb       	bst	r25, 3
   11110:	99 27       	eor	r25, r25
   11112:	90 f9       	bld	r25, 0
   11114:	1f 92       	push	r1
   11116:	9f 93       	push	r25
   11118:	82 fb       	bst	r24, 2
   1111a:	88 27       	eor	r24, r24
   1111c:	80 f9       	bld	r24, 0
   1111e:	1f 92       	push	r1
   11120:	8f 93       	push	r24
   11122:	84 e0       	ldi	r24, 0x04	; 4
   11124:	90 e1       	ldi	r25, 0x10	; 16
   11126:	1f 92       	push	r1
   11128:	9f 93       	push	r25
   1112a:	8f 93       	push	r24
   1112c:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   11130:	0f b6       	in	r0, 0x3f	; 63
#endif
// Free BUS, BUSY on error
				gpib_bus_read_init(1);		
   11132:	f8 94       	cli
   11134:	de bf       	out	0x3e, r29	; 62
   11136:	0f be       	out	0x3f, r0	; 63
   11138:	cd bf       	out	0x3d, r28	; 61
                tx_state = GPIB_TX_DONE;
                break;
   1113a:	81 e0       	ldi	r24, 0x01	; 1
	// GPIB_IO_LOW(PE);			// BUS OC PULLUP

    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);

    while(tx_state != GPIB_TX_DONE )
   1113c:	90 e0       	ldi	r25, 0x00	; 0
   1113e:	7e dd       	rcall	.-1284   	; 0x10c3c <gpib_bus_read_init>
   11140:	0a c0       	rjmp	.+20     	; 0x11156 <gpib_write_byte+0x2a6>
   11142:	1a 30       	cpi	r17, 0x0A	; 10

            ///@brief ALL devices are ready
            case GPIB_TX_WAIT_FOR_NDAC_HI:
                if(GPIB_PIN_TST(NDAC) == 1)         // Byte byte accepted
                {
                    tx_state = GPIB_TX_SET_DAV_HI;
   11144:	09 f0       	breq	.+2      	; 0x11148 <gpib_write_byte+0x298>
   11146:	ea ce       	rjmp	.-556    	; 0x10f1c <gpib_write_byte+0x6c>
			/// We are in read mode now
            ///@wait for DAV to finish float HI - finishing floating HI
            case GPIB_TX_WAIT_FOR_DAV_HI:
                if(GPIO_PIN_TST(DAV) == 1)
                {
                    tx_state = GPIB_TX_FINISH;
   11148:	06 c0       	rjmp	.+12     	; 0x11156 <gpib_write_byte+0x2a6>
   1114a:	16 e0       	ldi	r17, 0x06	; 6
                    break;
                }
                if (gpib_timeout_test())
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
   1114c:	e7 ce       	rjmp	.-562    	; 0x10f1c <gpib_write_byte+0x6c>
   1114e:	18 e0       	ldi	r17, 0x08	; 8
            case GPIB_TX_DONE:
                break;
        }
    }
    return(ch);
}
   11150:	e5 ce       	rjmp	.-566    	; 0x10f1c <gpib_write_byte+0x6c>
   11152:	19 e0       	ldi	r17, 0x09	; 9
   11154:	e3 ce       	rjmp	.-570    	; 0x10f1c <gpib_write_byte+0x6c>
   11156:	8f 81       	ldd	r24, Y+7	; 0x07
   11158:	98 85       	ldd	r25, Y+8	; 0x08
   1115a:	28 96       	adiw	r28, 0x08	; 8
   1115c:	0f b6       	in	r0, 0x3f	; 63
   1115e:	f8 94       	cli
   11160:	de bf       	out	0x3e, r29	; 62
   11162:	0f be       	out	0x3f, r0	; 63
   11164:	cd bf       	out	0x3d, r28	; 61
   11166:	df 91       	pop	r29
   11168:	cf 91       	pop	r28
   1116a:	1f 91       	pop	r17
   1116c:	ef 90       	pop	r14
   1116e:	df 90       	pop	r13
   11170:	cf 90       	pop	r12
   11172:	8f 90       	pop	r8
   11174:	7f 90       	pop	r7
   11176:	6f 90       	pop	r6
   11178:	4f 90       	pop	r4
   1117a:	3f 90       	pop	r3
   1117c:	2f 90       	pop	r2
   1117e:	08 95       	ret

00011180 <gpib_decode_header>:
/// @see: gpib.h _FLAGS defines for a full list is control lines we track
/// @see: gpib_trace()
/// @return void
///@param[in] fo: FILE pointer or "stdout"
void gpib_decode_header( FILE *fo)
{
   11180:	cf 93       	push	r28
   11182:	df 93       	push	r29
   11184:	ec 01       	movw	r28, r24
    if(fo == NULL)
   11186:	89 2b       	or	r24, r25
   11188:	21 f4       	brne	.+8      	; 0x11192 <gpib_decode_header+0x12>
        fo = stdout;
   1118a:	c0 91 bd 1b 	lds	r28, 0x1BBD	; 0x801bbd <__iob+0x2>
   1118e:	d0 91 be 1b 	lds	r29, 0x1BBE	; 0x801bbe <__iob+0x3>
        
    fprintf(fo,"===========================================\n");
   11192:	be 01       	movw	r22, r28
   11194:	85 e7       	ldi	r24, 0x75	; 117
   11196:	9b e0       	ldi	r25, 0x0B	; 11
   11198:	0e 94 a5 77 	call	0xef4a	; 0xef4a <fputs>
    fprintf(fo,"GPIB bus state\n");
   1119c:	be 01       	movw	r22, r28
   1119e:	82 ea       	ldi	r24, 0xA2	; 162
   111a0:	9b e0       	ldi	r25, 0x0B	; 11
   111a2:	0e 94 a5 77 	call	0xef4a	; 0xef4a <fputs>
    fprintf(fo,"HH . AESRPITB gpib\n");
   111a6:	be 01       	movw	r22, r28
   111a8:	82 eb       	ldi	r24, 0xB2	; 178
   111aa:	9b e0       	ldi	r25, 0x0B	; 11
   111ac:	0e 94 a5 77 	call	0xef4a	; 0xef4a <fputs>
    fprintf(fo,"HH = Hex value of Command or Data\n");
   111b0:	be 01       	movw	r22, r28
   111b2:	86 ec       	ldi	r24, 0xC6	; 198
   111b4:	9b e0       	ldi	r25, 0x0B	; 11
   111b6:	0e 94 a5 77 	call	0xef4a	; 0xef4a <fputs>
    fprintf(fo,"   . = ASCII of XX only for 0x20 .. 0x7e\n");
   111ba:	be 01       	movw	r22, r28
   111bc:	89 ee       	ldi	r24, 0xE9	; 233
   111be:	9b e0       	ldi	r25, 0x0B	; 11
   111c0:	0e 94 a5 77 	call	0xef4a	; 0xef4a <fputs>
    fprintf(fo,"     A = ATN\n");
   111c4:	be 01       	movw	r22, r28
   111c6:	83 e1       	ldi	r24, 0x13	; 19
   111c8:	9c e0       	ldi	r25, 0x0C	; 12
   111ca:	0e 94 a5 77 	call	0xef4a	; 0xef4a <fputs>
    fprintf(fo,"      E = EOI\n");
   111ce:	be 01       	movw	r22, r28
   111d0:	81 e2       	ldi	r24, 0x21	; 33
   111d2:	9c e0       	ldi	r25, 0x0C	; 12
   111d4:	0e 94 a5 77 	call	0xef4a	; 0xef4a <fputs>
    fprintf(fo,"       S = SRQ\n");
   111d8:	be 01       	movw	r22, r28
   111da:	80 e3       	ldi	r24, 0x30	; 48
   111dc:	9c e0       	ldi	r25, 0x0C	; 12
   111de:	0e 94 a5 77 	call	0xef4a	; 0xef4a <fputs>
    fprintf(fo,"        R = REN\n");
   111e2:	be 01       	movw	r22, r28
   111e4:	80 e4       	ldi	r24, 0x40	; 64
   111e6:	9c e0       	ldi	r25, 0x0C	; 12
   111e8:	0e 94 a5 77 	call	0xef4a	; 0xef4a <fputs>
    fprintf(fo,"         I = IFC\n");
   111ec:	be 01       	movw	r22, r28
   111ee:	81 e5       	ldi	r24, 0x51	; 81
   111f0:	9c e0       	ldi	r25, 0x0C	; 12
   111f2:	0e 94 a5 77 	call	0xef4a	; 0xef4a <fputs>
    fprintf(fo,"          P = Parallel Poll seen\n");
   111f6:	be 01       	movw	r22, r28
   111f8:	83 e6       	ldi	r24, 0x63	; 99
   111fa:	9c e0       	ldi	r25, 0x0C	; 12
   111fc:	0e 94 a5 77 	call	0xef4a	; 0xef4a <fputs>
    fprintf(fo,"           T = TIMEOUT\n");
   11200:	be 01       	movw	r22, r28
   11202:	85 e8       	ldi	r24, 0x85	; 133
   11204:	9c e0       	ldi	r25, 0x0C	; 12
   11206:	0e 94 a5 77 	call	0xef4a	; 0xef4a <fputs>
    fprintf(fo,"            B = BUS_ERROR\n");
   1120a:	be 01       	movw	r22, r28
   1120c:	8d e9       	ldi	r24, 0x9D	; 157
   1120e:	9c e0       	ldi	r25, 0x0C	; 12
   11210:	0e 94 a5 77 	call	0xef4a	; 0xef4a <fputs>
    fprintf(fo,"              GPIB commands\n");
   11214:	be 01       	movw	r22, r28
   11216:	88 eb       	ldi	r24, 0xB8	; 184
   11218:	9c e0       	ldi	r25, 0x0C	; 12
   1121a:	0e 94 a5 77 	call	0xef4a	; 0xef4a <fputs>
}
   1121e:	df 91       	pop	r29
   11220:	cf 91       	pop	r28
   11222:	08 95       	ret

00011224 <gpib_trace_display>:
/// @return  void
/// Note the bits we can read depends on what hardware verions we have
/// V2 hardware can only read status bits based on GPIB control buffer direction
///   FIXME We could add a test for read/write state ??
void gpib_trace_display(uint16_t status,int trace_state)
{
   11224:	a0 e8       	ldi	r26, 0x80	; 128
   11226:	b0 e0       	ldi	r27, 0x00	; 0
   11228:	e8 e1       	ldi	r30, 0x18	; 24
   1122a:	f9 e8       	ldi	r31, 0x89	; 137
   1122c:	0c 94 e6 e5 	jmp	0x1cbcc	; 0x1cbcc <__prologue_saves__+0xc>
   11230:	8c 01       	movw	r16, r24
   11232:	5b 01       	movw	r10, r22
    char str[128];
    char *tmp= str;
    uint8_t bus = status & 0xff;
    extern FILE *gpib_log_fp;

    str[0] = 0;
   11234:	19 82       	std	Y+1, r1	; 0x01
   11236:	4c 01       	movw	r8, r24
   11238:	88 24       	eor	r8, r8
   1123a:	44 e0       	ldi	r20, 0x04	; 4
   1123c:	94 22       	and	r9, r20
   1123e:	ce 01       	movw	r24, r28
   11240:	01 96       	adiw	r24, 0x01	; 1
   11242:	6c 01       	movw	r12, r24

    // Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
   11244:	62 30       	cpi	r22, 0x02	; 2
   11246:	71 05       	cpc	r23, r1
   11248:	f0 f4       	brcc	.+60     	; 0x11286 <gpib_trace_display+0x62>
    {
        uint8_t printable = ' ';                          // Data
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
   1124a:	81 14       	cp	r8, r1
   1124c:	91 04       	cpc	r9, r1
   1124e:	29 f4       	brne	.+10     	; 0x1125a <gpib_trace_display+0x36>
///   FIXME We could add a test for read/write state ??
void gpib_trace_display(uint16_t status,int trace_state)
{
    char str[128];
    char *tmp= str;
    uint8_t bus = status & 0xff;
   11250:	80 2f       	mov	r24, r16

    // Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
    {
        uint8_t printable = ' ';                          // Data
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
   11252:	90 ee       	ldi	r25, 0xE0	; 224
   11254:	90 0f       	add	r25, r16
   11256:	9f 35       	cpi	r25, 0x5F	; 95
   11258:	08 f0       	brcs	.+2      	; 0x1125c <gpib_trace_display+0x38>
    str[0] = 0;

    // Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
    {
        uint8_t printable = ' ';                          // Data
   1125a:	80 e2       	ldi	r24, 0x20	; 32
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
            printable = bus;
        sprintf(str, "%02X %c ", (int)bus & 0xff, (int)printable);
   1125c:	1f 92       	push	r1
   1125e:	8f 93       	push	r24
   11260:	c8 01       	movw	r24, r16
   11262:	99 27       	eor	r25, r25
   11264:	9f 93       	push	r25
   11266:	8f 93       	push	r24
   11268:	8b ef       	ldi	r24, 0xFB	; 251
   1126a:	9f e0       	ldi	r25, 0x0F	; 15
   1126c:	1f 92       	push	r1
   1126e:	9f 93       	push	r25
   11270:	8f 93       	push	r24
   11272:	df 92       	push	r13
   11274:	cf 92       	push	r12
   11276:	0e 94 47 47 	call	0x8e8e	; 0x8e8e <sprintf_P>
   1127a:	0f b6       	in	r0, 0x3f	; 63
   1127c:	f8 94       	cli
   1127e:	de bf       	out	0x3e, r29	; 62
   11280:	0f be       	out	0x3f, r0	; 63
   11282:	cd bf       	out	0x3d, r28	; 61
   11284:	0e c0       	rjmp	.+28     	; 0x112a2 <gpib_trace_display+0x7e>
    }
    else
    {
        sprintf(str, "     ");
   11286:	85 ef       	ldi	r24, 0xF5	; 245
   11288:	9f e0       	ldi	r25, 0x0F	; 15
   1128a:	1f 92       	push	r1
   1128c:	9f 93       	push	r25
   1128e:	8f 93       	push	r24
   11290:	df 92       	push	r13
   11292:	cf 92       	push	r12
   11294:	0e 94 47 47 	call	0x8e8e	; 0x8e8e <sprintf_P>
   11298:	0f 90       	pop	r0
   1129a:	0f 90       	pop	r0
   1129c:	0f 90       	pop	r0
   1129e:	0f 90       	pop	r0
   112a0:	0f 90       	pop	r0
    }

    tmp = str + strlen(str);
   112a2:	f6 01       	movw	r30, r12
   112a4:	01 90       	ld	r0, Z+
   112a6:	00 20       	and	r0, r0
   112a8:	e9 f7       	brne	.-6      	; 0x112a4 <gpib_trace_display+0x80>
   112aa:	31 97       	sbiw	r30, 0x01	; 1
   112ac:	cf 01       	movw	r24, r30
   112ae:	01 96       	adiw	r24, 0x01	; 1

    if(status & ATN_FLAG)
   112b0:	81 14       	cp	r8, r1
   112b2:	91 04       	cpc	r9, r1
   112b4:	11 f0       	breq	.+4      	; 0x112ba <gpib_trace_display+0x96>
        *tmp++ = 'A';
   112b6:	21 e4       	ldi	r18, 0x41	; 65
   112b8:	01 c0       	rjmp	.+2      	; 0x112bc <gpib_trace_display+0x98>
    else
        *tmp++ = '-';
   112ba:	2d e2       	ldi	r18, 0x2D	; 45
   112bc:	20 83       	st	Z, r18
   112be:	dc 01       	movw	r26, r24
   112c0:	11 96       	adiw	r26, 0x01	; 1

    if(status & EOI_FLAG)
   112c2:	10 ff       	sbrs	r17, 0
   112c4:	02 c0       	rjmp	.+4      	; 0x112ca <gpib_trace_display+0xa6>
        *tmp++ = 'E';
   112c6:	25 e4       	ldi	r18, 0x45	; 69
   112c8:	01 c0       	rjmp	.+2      	; 0x112cc <gpib_trace_display+0xa8>
    else
        *tmp++ = '-';
   112ca:	2d e2       	ldi	r18, 0x2D	; 45
   112cc:	fc 01       	movw	r30, r24
   112ce:	20 83       	st	Z, r18
   112d0:	fd 01       	movw	r30, r26
   112d2:	31 96       	adiw	r30, 0x01	; 1

    if(status & SRQ_FLAG)
   112d4:	11 ff       	sbrs	r17, 1
   112d6:	02 c0       	rjmp	.+4      	; 0x112dc <gpib_trace_display+0xb8>
        *tmp++ = 'S';
   112d8:	83 e5       	ldi	r24, 0x53	; 83
   112da:	01 c0       	rjmp	.+2      	; 0x112de <gpib_trace_display+0xba>
    else
        *tmp++ = '-';
   112dc:	8d e2       	ldi	r24, 0x2D	; 45
   112de:	8c 93       	st	X, r24
   112e0:	df 01       	movw	r26, r30
   112e2:	11 96       	adiw	r26, 0x01	; 1

    if(status & REN_FLAG)
   112e4:	13 ff       	sbrs	r17, 3
   112e6:	02 c0       	rjmp	.+4      	; 0x112ec <gpib_trace_display+0xc8>
        *tmp++ = 'R';
   112e8:	82 e5       	ldi	r24, 0x52	; 82
   112ea:	01 c0       	rjmp	.+2      	; 0x112ee <gpib_trace_display+0xca>
    else
        *tmp++ = '-';
   112ec:	8d e2       	ldi	r24, 0x2D	; 45
   112ee:	80 83       	st	Z, r24
   112f0:	fd 01       	movw	r30, r26
   112f2:	31 96       	adiw	r30, 0x01	; 1

    if(status & IFC_FLAG)
   112f4:	14 ff       	sbrs	r17, 4
   112f6:	02 c0       	rjmp	.+4      	; 0x112fc <gpib_trace_display+0xd8>
        *tmp++ = 'I';
   112f8:	89 e4       	ldi	r24, 0x49	; 73
   112fa:	01 c0       	rjmp	.+2      	; 0x112fe <gpib_trace_display+0xda>
    else
        *tmp++ = '-';
   112fc:	8d e2       	ldi	r24, 0x2D	; 45
   112fe:	8c 93       	st	X, r24

    if(trace_state == TRACE_DISABLE)
   11300:	a1 14       	cp	r10, r1
   11302:	b1 04       	cpc	r11, r1
   11304:	d1 f4       	brne	.+52     	; 0x1133a <gpib_trace_display+0x116>
   11306:	df 01       	movw	r26, r30
   11308:	11 96       	adiw	r26, 0x01	; 1
    {
        if(status & PP_FLAG)
   1130a:	15 ff       	sbrs	r17, 5
   1130c:	02 c0       	rjmp	.+4      	; 0x11312 <gpib_trace_display+0xee>
            *tmp++ = 'P';
   1130e:	80 e5       	ldi	r24, 0x50	; 80
   11310:	01 c0       	rjmp	.+2      	; 0x11314 <gpib_trace_display+0xf0>
        else
            *tmp++ = '-';
   11312:	8d e2       	ldi	r24, 0x2D	; 45
   11314:	80 83       	st	Z, r24
   11316:	fd 01       	movw	r30, r26
   11318:	31 96       	adiw	r30, 0x01	; 1
        if(status & TIMEOUT_FLAG)
   1131a:	16 ff       	sbrs	r17, 6
   1131c:	02 c0       	rjmp	.+4      	; 0x11322 <gpib_trace_display+0xfe>
            *tmp++ = 'T';
   1131e:	84 e5       	ldi	r24, 0x54	; 84
   11320:	01 c0       	rjmp	.+2      	; 0x11324 <gpib_trace_display+0x100>
        else
            *tmp++ = '-';
   11322:	8d e2       	ldi	r24, 0x2D	; 45
   11324:	8c 93       	st	X, r24
   11326:	cf 01       	movw	r24, r30
   11328:	01 96       	adiw	r24, 0x01	; 1
        if(status & BUS_ERROR_FLAG)
            *tmp++ = 'B';
   1132a:	7c 01       	movw	r14, r24
            *tmp++ = '-';
        if(status & TIMEOUT_FLAG)
            *tmp++ = 'T';
        else
            *tmp++ = '-';
        if(status & BUS_ERROR_FLAG)
   1132c:	17 ff       	sbrs	r17, 7
   1132e:	02 c0       	rjmp	.+4      	; 0x11334 <gpib_trace_display+0x110>
            *tmp++ = 'B';
   11330:	82 e4       	ldi	r24, 0x42	; 66
   11332:	01 c0       	rjmp	.+2      	; 0x11336 <gpib_trace_display+0x112>
        else
            *tmp++ = '-';
   11334:	8d e2       	ldi	r24, 0x2D	; 45
   11336:	80 83       	st	Z, r24
   11338:	08 c0       	rjmp	.+16     	; 0x1134a <gpib_trace_display+0x126>
    }
    else
    {
        // not used when tracing
        *tmp++ = '-';
   1133a:	8d e2       	ldi	r24, 0x2D	; 45
   1133c:	80 83       	st	Z, r24
        *tmp++ = '-';
   1133e:	81 83       	std	Z+1, r24	; 0x01
        *tmp++ = '-';
   11340:	7f 01       	movw	r14, r30
   11342:	43 e0       	ldi	r20, 0x03	; 3
   11344:	e4 0e       	add	r14, r20
   11346:	f1 1c       	adc	r15, r1
   11348:	82 83       	std	Z+2, r24	; 0x02
    }
    *tmp = 0;
   1134a:	f7 01       	movw	r30, r14
   1134c:	10 82       	st	Z, r1

    if(trace_state == TRACE_READ || trace_state == TRACE_BUS)
   1134e:	f1 e0       	ldi	r31, 0x01	; 1
   11350:	af 1a       	sub	r10, r31
   11352:	b1 08       	sbc	r11, r1
   11354:	42 e0       	ldi	r20, 0x02	; 2
   11356:	a4 16       	cp	r10, r20
   11358:	b1 04       	cpc	r11, r1
   1135a:	f0 f4       	brcc	.+60     	; 0x11398 <gpib_trace_display+0x174>
    {
        if(status & DAV_FLAG)
   1135c:	15 ff       	sbrs	r17, 5
   1135e:	03 c0       	rjmp	.+6      	; 0x11366 <gpib_trace_display+0x142>
            strcat(str,"  DAV");
   11360:	65 ed       	ldi	r22, 0xD5	; 213
   11362:	7c e0       	ldi	r23, 0x0C	; 12
   11364:	02 c0       	rjmp	.+4      	; 0x1136a <gpib_trace_display+0x146>
        else
            strcat(str,"     ");
   11366:	62 e3       	ldi	r22, 0x32	; 50
   11368:	78 e0       	ldi	r23, 0x08	; 8
   1136a:	c6 01       	movw	r24, r12
   1136c:	0e 94 74 32 	call	0x64e8	; 0x64e8 <strcat>
        if(status & NRFD_FLAG)
   11370:	16 ff       	sbrs	r17, 6
   11372:	03 c0       	rjmp	.+6      	; 0x1137a <gpib_trace_display+0x156>
            strcat(str," NRFD");
   11374:	6b ed       	ldi	r22, 0xDB	; 219
   11376:	7c e0       	ldi	r23, 0x0C	; 12
   11378:	02 c0       	rjmp	.+4      	; 0x1137e <gpib_trace_display+0x15a>
        else
            strcat(str,"     ");
   1137a:	62 e3       	ldi	r22, 0x32	; 50
   1137c:	78 e0       	ldi	r23, 0x08	; 8
   1137e:	c6 01       	movw	r24, r12
   11380:	0e 94 74 32 	call	0x64e8	; 0x64e8 <strcat>
        if(status & NDAC_FLAG)
   11384:	17 ff       	sbrs	r17, 7
   11386:	03 c0       	rjmp	.+6      	; 0x1138e <gpib_trace_display+0x16a>
            strcat(str," NDAC");
   11388:	61 ee       	ldi	r22, 0xE1	; 225
   1138a:	7c e0       	ldi	r23, 0x0C	; 12
   1138c:	02 c0       	rjmp	.+4      	; 0x11392 <gpib_trace_display+0x16e>
        else
            strcat(str,"     ");
   1138e:	62 e3       	ldi	r22, 0x32	; 50
   11390:	78 e0       	ldi	r23, 0x08	; 8
   11392:	c6 01       	movw	r24, r12
   11394:	0e 94 74 32 	call	0x64e8	; 0x64e8 <strcat>
    }

    if( (status & ATN_FLAG) )
   11398:	81 14       	cp	r8, r1
   1139a:	91 04       	cpc	r9, r1
   1139c:	09 f4       	brne	.+2      	; 0x113a0 <gpib_trace_display+0x17c>
   1139e:	58 c0       	rjmp	.+176    	; 0x11450 <gpib_trace_display+0x22c>
    {
        int i;
        int cmd = status & CMD_MASK;
   113a0:	c8 01       	movw	r24, r16
   113a2:	8f 77       	andi	r24, 0x7F	; 127
   113a4:	99 27       	eor	r25, r25
        if(cmd >= 0x020 && cmd <= 0x3e)
   113a6:	9c 01       	movw	r18, r24
   113a8:	20 52       	subi	r18, 0x20	; 32
   113aa:	31 09       	sbc	r19, r1
   113ac:	2f 31       	cpi	r18, 0x1F	; 31
   113ae:	31 05       	cpc	r19, r1
   113b0:	38 f4       	brcc	.+14     	; 0x113c0 <gpib_trace_display+0x19c>
            sprintf(tmp," MLA %02Xh", cmd & 0x1f);
   113b2:	0f 71       	andi	r16, 0x1F	; 31
   113b4:	11 27       	eor	r17, r17
   113b6:	1f 93       	push	r17
   113b8:	0f 93       	push	r16
   113ba:	8a ee       	ldi	r24, 0xEA	; 234
   113bc:	9f e0       	ldi	r25, 0x0F	; 15
   113be:	0c c0       	rjmp	.+24     	; 0x113d8 <gpib_trace_display+0x1b4>
        else if(cmd >= 0x040 && cmd <= 0x4e)
   113c0:	9c 01       	movw	r18, r24
   113c2:	20 54       	subi	r18, 0x40	; 64
   113c4:	31 09       	sbc	r19, r1
   113c6:	2f 30       	cpi	r18, 0x0F	; 15
   113c8:	31 05       	cpc	r19, r1
   113ca:	98 f4       	brcc	.+38     	; 0x113f2 <gpib_trace_display+0x1ce>
            sprintf(tmp," MTA %02Xh", cmd & 0x1f);
   113cc:	0f 71       	andi	r16, 0x1F	; 31
   113ce:	11 27       	eor	r17, r17
   113d0:	1f 93       	push	r17
   113d2:	0f 93       	push	r16
   113d4:	8f ed       	ldi	r24, 0xDF	; 223
   113d6:	9f e0       	ldi	r25, 0x0F	; 15
   113d8:	1f 92       	push	r1
   113da:	9f 93       	push	r25
   113dc:	8f 93       	push	r24
   113de:	ff 92       	push	r15
   113e0:	ef 92       	push	r14
   113e2:	0e 94 47 47 	call	0x8e8e	; 0x8e8e <sprintf_P>
   113e6:	0f b6       	in	r0, 0x3f	; 63
   113e8:	f8 94       	cli
   113ea:	de bf       	out	0x3e, r29	; 62
   113ec:	0f be       	out	0x3f, r0	; 63
   113ee:	cd bf       	out	0x3d, r28	; 61
   113f0:	2f c0       	rjmp	.+94     	; 0x11450 <gpib_trace_display+0x22c>
        else if(cmd >= 0x060 && cmd <= 0x6f)
   113f2:	9c 01       	movw	r18, r24
   113f4:	20 56       	subi	r18, 0x60	; 96
   113f6:	31 09       	sbc	r19, r1
   113f8:	20 31       	cpi	r18, 0x10	; 16
   113fa:	31 05       	cpc	r19, r1
   113fc:	28 f0       	brcs	.+10     	; 0x11408 <gpib_trace_display+0x1e4>
   113fe:	e9 e8       	ldi	r30, 0x89	; 137
   11400:	f1 e0       	ldi	r31, 0x01	; 1
   11402:	00 e0       	ldi	r16, 0x00	; 0
   11404:	10 e0       	ldi	r17, 0x00	; 0
   11406:	09 c0       	rjmp	.+18     	; 0x1141a <gpib_trace_display+0x1f6>
            sprintf(tmp," MSA %02Xh", cmd & 0x1f);
   11408:	0f 71       	andi	r16, 0x1F	; 31
   1140a:	11 27       	eor	r17, r17
   1140c:	1f 93       	push	r17
   1140e:	0f 93       	push	r16
   11410:	84 ed       	ldi	r24, 0xD4	; 212
   11412:	9f e0       	ldi	r25, 0x0F	; 15
   11414:	e1 cf       	rjmp	.-62     	; 0x113d8 <gpib_trace_display+0x1b4>
        else
        {
            for(i=0;gpib_tokens[i].cmd != -1;++i)
   11416:	0f 5f       	subi	r16, 0xFF	; 255
   11418:	1f 4f       	sbci	r17, 0xFF	; 255
   1141a:	20 81       	ld	r18, Z
   1141c:	31 81       	ldd	r19, Z+1	; 0x01
   1141e:	2f 3f       	cpi	r18, 0xFF	; 255
   11420:	4f ef       	ldi	r20, 0xFF	; 255
   11422:	34 07       	cpc	r19, r20
   11424:	a9 f0       	breq	.+42     	; 0x11450 <gpib_trace_display+0x22c>
   11426:	34 96       	adiw	r30, 0x04	; 4
            {
                if(cmd == gpib_tokens[i].cmd)
   11428:	82 17       	cp	r24, r18
   1142a:	93 07       	cpc	r25, r19
   1142c:	a1 f7       	brne	.-24     	; 0x11416 <gpib_trace_display+0x1f2>
                {
                    strcat(tmp," ");
   1142e:	66 e3       	ldi	r22, 0x36	; 54
   11430:	78 e0       	ldi	r23, 0x08	; 8
   11432:	c7 01       	movw	r24, r14
   11434:	0e 94 74 32 	call	0x64e8	; 0x64e8 <strcat>
                    strcat(tmp,gpib_tokens[i].name);
   11438:	00 0f       	add	r16, r16
   1143a:	11 1f       	adc	r17, r17
   1143c:	00 0f       	add	r16, r16
   1143e:	11 1f       	adc	r17, r17
   11440:	f8 01       	movw	r30, r16
   11442:	e7 57       	subi	r30, 0x77	; 119
   11444:	fe 4f       	sbci	r31, 0xFE	; 254
   11446:	62 81       	ldd	r22, Z+2	; 0x02
   11448:	73 81       	ldd	r23, Z+3	; 0x03
   1144a:	c7 01       	movw	r24, r14
   1144c:	0e 94 74 32 	call	0x64e8	; 0x64e8 <strcat>
                }
            }
        }
    }

    if(gpib_log_fp == NULL)
   11450:	20 91 61 18 	lds	r18, 0x1861	; 0x801861 <gpib_log_fp>
   11454:	30 91 62 18 	lds	r19, 0x1862	; 0x801862 <gpib_log_fp+0x1>
   11458:	80 91 bd 1b 	lds	r24, 0x1BBD	; 0x801bbd <__iob+0x2>
   1145c:	90 91 be 1b 	lds	r25, 0x1BBE	; 0x801bbe <__iob+0x3>
   11460:	23 2b       	or	r18, r19
   11462:	21 f4       	brne	.+8      	; 0x1146c <gpib_trace_display+0x248>
        gpib_log_fp = stdout;
   11464:	90 93 62 18 	sts	0x1862, r25	; 0x801862 <gpib_log_fp+0x1>
   11468:	80 93 61 18 	sts	0x1861, r24	; 0x801861 <gpib_log_fp>

    // Echo to console unless file is the console
    if(gpib_log_fp != stdout)
   1146c:	20 91 61 18 	lds	r18, 0x1861	; 0x801861 <gpib_log_fp>
   11470:	30 91 62 18 	lds	r19, 0x1862	; 0x801862 <gpib_log_fp+0x1>
   11474:	82 17       	cp	r24, r18
   11476:	93 07       	cpc	r25, r19
   11478:	19 f0       	breq	.+6      	; 0x11480 <gpib_trace_display+0x25c>
        puts(str);
   1147a:	c6 01       	movw	r24, r12
   1147c:	0e 94 bd 77 	call	0xef7a	; 0xef7a <puts>

    // Save to file
    fprintf(gpib_log_fp,"%s\n",str);
   11480:	df 92       	push	r13
   11482:	cf 92       	push	r12
   11484:	87 ee       	ldi	r24, 0xE7	; 231
   11486:	9c e0       	ldi	r25, 0x0C	; 12
   11488:	9f 93       	push	r25
   1148a:	8f 93       	push	r24
   1148c:	80 91 62 18 	lds	r24, 0x1862	; 0x801862 <gpib_log_fp+0x1>
   11490:	8f 93       	push	r24
   11492:	80 91 61 18 	lds	r24, 0x1861	; 0x801861 <gpib_log_fp>
   11496:	8f 93       	push	r24
   11498:	0e 94 4c 7f 	call	0xfe98	; 0xfe98 <fprintf>
}
   1149c:	0f 90       	pop	r0
   1149e:	0f 90       	pop	r0
   114a0:	0f 90       	pop	r0
   114a2:	0f 90       	pop	r0
   114a4:	0f 90       	pop	r0
   114a6:	0f 90       	pop	r0
   114a8:	c0 58       	subi	r28, 0x80	; 128
   114aa:	df 4f       	sbci	r29, 0xFF	; 255
   114ac:	ec e0       	ldi	r30, 0x0C	; 12
   114ae:	0c 94 02 e6 	jmp	0x1cc04	; 0x1cc04 <__epilogue_restores__+0xc>

000114b2 <gpib_read_byte>:
///     - Error Flags:
///       - IFC_FLAG
///
/// @return (data bus, control and error status)
uint16_t gpib_read_byte(int trace)
{
   114b2:	af 92       	push	r10
   114b4:	bf 92       	push	r11
   114b6:	cf 92       	push	r12
   114b8:	df 92       	push	r13
   114ba:	ff 92       	push	r15
   114bc:	0f 93       	push	r16
   114be:	1f 93       	push	r17
   114c0:	cf 93       	push	r28
   114c2:	df 93       	push	r29

    ch = 0;
    control_last = 0;

    // If we have an unread state it has already been traced!
    if(gpib_unread_f)
   114c4:	20 91 60 18 	lds	r18, 0x1860	; 0x801860 <gpib_unread_f>
   114c8:	22 23       	and	r18, r18
   114ca:	39 f0       	breq	.+14     	; 0x114da <gpib_read_byte+0x28>
    {
        gpib_unread_f = 0;
   114cc:	10 92 60 18 	sts	0x1860, r1	; 0x801860 <gpib_unread_f>
        return(gpib_unread_data);
   114d0:	80 91 ee 1d 	lds	r24, 0x1DEE	; 0x801dee <gpib_unread_data>
   114d4:	90 91 ef 1d 	lds	r25, 0x1DEF	; 0x801def <gpib_unread_data+0x1>
   114d8:	b8 c0       	rjmp	.+368    	; 0x1164a <gpib_read_byte+0x198>
   114da:	6c 01       	movw	r12, r24
    }

	gpib_bus_read_init(1); // Busy until we are ready
   114dc:	81 e0       	ldi	r24, 0x01	; 1
   114de:	90 e0       	ldi	r25, 0x00	; 0
   114e0:	ad db       	rcall	.-2214   	; 0x10c3c <gpib_bus_read_init>


///@brief V2 boards can NOT read all bits on the control bus at once
/// FIXME We could add a test for read/write state ??
///@brief NRFD,NDAC SRQ are outputs
    if(trace)
   114e2:	c1 14       	cp	r12, r1
   114e4:	d1 04       	cpc	r13, r1
    {
        control_last = gpib_control_pin_read();
   114e6:	51 f0       	breq	.+20     	; 0x114fc <gpib_read_byte+0x4a>
   114e8:	c7 dc       	rcall	.-1650   	; 0x10e78 <gpib_control_pin_read>
        control_last |= gpib_handshake_pin_read();
   114ea:	8c 01       	movw	r16, r24
   114ec:	d5 dc       	rcall	.-1622   	; 0x10e98 <gpib_handshake_pin_read>
   114ee:	08 2b       	or	r16, r24
        gpib_trace_display(control_last, TRACE_BUS);
   114f0:	19 2b       	or	r17, r25
   114f2:	62 e0       	ldi	r22, 0x02	; 2
   114f4:	70 e0       	ldi	r23, 0x00	; 0
   114f6:	c8 01       	movw	r24, r16
   114f8:	95 de       	rcall	.-726    	; 0x11224 <gpib_trace_display>
    uint16_t bus, control, control_last;
    extern uint8_t gpib_unread_f;
    extern uint16_t gpib_unread_data;

    ch = 0;
    control_last = 0;
   114fa:	02 c0       	rjmp	.+4      	; 0x11500 <gpib_read_byte+0x4e>
   114fc:	00 e0       	ldi	r16, 0x00	; 0
        control_last |= gpib_handshake_pin_read();
        gpib_trace_display(control_last, TRACE_BUS);
    }

    rx_state = GPIB_RX_START;
    while(rx_state != GPIB_RX_DONE)
   114fe:	10 e0       	ldi	r17, 0x00	; 0
   11500:	f1 2c       	mov	r15, r1
   11502:	c0 e0       	ldi	r28, 0x00	; 0
    {
        if(uart_keyhit(0))
   11504:	d0 e0       	ldi	r29, 0x00	; 0
   11506:	80 e0       	ldi	r24, 0x00	; 0
   11508:	0e 94 1c 2c 	call	0x5838	; 0x5838 <uart_keyhit>
   1150c:	89 2b       	or	r24, r25
		if(gpib_detect_PP())
            ch |= PP_FLAG;
#endif

		// IFC is always in for a device
        if(GPIB_PIN_TST(IFC) == 0)
   1150e:	09 f0       	breq	.+2      	; 0x11512 <gpib_read_byte+0x60>
   11510:	78 c0       	rjmp	.+240    	; 0x11602 <gpib_read_byte+0x150>
        {
            ch |= IFC_FLAG;
   11512:	4c 99       	sbic	0x09, 4	; 9
			gpib_bus_init();
   11514:	03 c0       	rjmp	.+6      	; 0x1151c <gpib_read_byte+0x6a>
   11516:	d0 61       	ori	r29, 0x10	; 16
   11518:	b4 db       	rcall	.-2200   	; 0x10c82 <gpib_bus_init>
            break;
        }


        switch(rx_state)
   1151a:	73 c0       	rjmp	.+230    	; 0x11602 <gpib_read_byte+0x150>
   1151c:	8f 2d       	mov	r24, r15
   1151e:	90 e0       	ldi	r25, 0x00	; 0
   11520:	89 30       	cpi	r24, 0x09	; 9
   11522:	91 05       	cpc	r25, r1
   11524:	08 f0       	brcs	.+2      	; 0x11528 <gpib_read_byte+0x76>
   11526:	51 c0       	rjmp	.+162    	; 0x115ca <gpib_read_byte+0x118>
   11528:	fc 01       	movw	r30, r24
   1152a:	e9 53       	subi	r30, 0x39	; 57
   1152c:	ff 4f       	sbci	r31, 0xFF	; 255
   1152e:	0c 94 9c e5 	jmp	0x1cb38	; 0x1cb38 <__tablejump2__>
   11532:	52 98       	cbi	0x0a, 2	; 10
   11534:	8d e0       	ldi	r24, 0x0D	; 13
   11536:	8a 95       	dec	r24
   11538:	f1 f7       	brne	.-4      	; 0x11536 <gpib_read_byte+0x84>
        {
            case GPIB_RX_START:
                ///@brief Signal that we are ready to ready
                GPIB_PIN_FLOAT_UP(NRFD);
                GPIB_BUS_SETTLE();                // Let Data BUS settle
                rx_state = GPIB_RX_WAIT_FOR_DAV_LOW;
   1153a:	00 00       	nop
   1153c:	ff 24       	eor	r15, r15
   1153e:	f3 94       	inc	r15
                break;

            case GPIB_RX_WAIT_FOR_DAV_LOW:
                ///@brief Wait for Ready acknowledge
                if ( GPIB_PIN_TST(DAV) == 0 )
   11540:	7f c0       	rjmp	.+254    	; 0x11640 <gpib_read_byte+0x18e>
                    rx_state = GPIB_RX_DAV_IS_LOW;
   11542:	19 99       	sbic	0x03, 1	; 3
                break;

// Accept Data
            case GPIB_RX_DAV_IS_LOW:
                GPIB_IO_LOW(NRFD);                // BUSY
   11544:	7d c0       	rjmp	.+250    	; 0x11640 <gpib_read_byte+0x18e>

                ///@brief gpib_bus_read strips command parity if ATN is low at read time
                bus = gpib_bus_read();
   11546:	62 e0       	ldi	r22, 0x02	; 2
   11548:	f6 2e       	mov	r15, r22
   1154a:	7a c0       	rjmp	.+244    	; 0x11640 <gpib_read_byte+0x18e>
   1154c:	5a 98       	cbi	0x0b, 2	; 11
                ch |= bus;
///@brief V2 boards can NOT read all bits on the control bus at once
/// FIXME could add a test for read/write state ??
///@brief NRFD,NDAC SRQ are outputs
                control_last = gpib_control_pin_read();
   1154e:	52 9a       	sbi	0x0a, 2	; 10
   11550:	8d dc       	rcall	.-1766   	; 0x10e6c <gpib_bus_read>
   11552:	a8 2e       	mov	r10, r24
   11554:	b1 2c       	mov	r11, r1
                ch |= control_last;
   11556:	90 dc       	rcall	.-1760   	; 0x10e78 <gpib_control_pin_read>
   11558:	8c 01       	movw	r16, r24

                if(trace)
   1155a:	c8 2b       	or	r28, r24
   1155c:	d9 2b       	or	r29, r25
   1155e:	ca 29       	or	r28, r10
                {
///@brief V2 boards can NOT read all bits on the control bus at once
/// FIXME We could add a test for read/write state ??
///@brief NRFD,NDAC SRQ are outputs
                    control_last |= gpib_handshake_pin_read();
   11560:	db 29       	or	r29, r11
   11562:	c1 14       	cp	r12, r1
   11564:	d1 04       	cpc	r13, r1
                    gpib_trace_display(bus | control_last, TRACE_READ);
   11566:	49 f0       	breq	.+18     	; 0x1157a <gpib_read_byte+0xc8>
   11568:	97 dc       	rcall	.-1746   	; 0x10e98 <gpib_handshake_pin_read>
   1156a:	08 2b       	or	r16, r24
   1156c:	19 2b       	or	r17, r25
   1156e:	61 e0       	ldi	r22, 0x01	; 1
   11570:	70 e0       	ldi	r23, 0x00	; 0
   11572:	c5 01       	movw	r24, r10
   11574:	80 2b       	or	r24, r16
   11576:	91 2b       	or	r25, r17
   11578:	55 de       	rcall	.-854    	; 0x11224 <gpib_trace_display>
                }

                GPIB_PIN_FLOAT_UP(NDAC);
                GPIB_BUS_SETTLE();                // Let Data BUS settle
                gpib_timeout_set(HTIMEOUT);
   1157a:	53 98       	cbi	0x0a, 3	; 10
   1157c:	8d e0       	ldi	r24, 0x0D	; 13
   1157e:	8a 95       	dec	r24
   11580:	f1 f7       	brne	.-4      	; 0x1157e <gpib_read_byte+0xcc>
   11582:	00 00       	nop
#if BOARD == 2
				/// FIXME do we want to keep the next state ?
                rx_state = GPIB_RX_WAIT_FOR_DAV_HI;
   11584:	64 ef       	ldi	r22, 0xF4	; 244
   11586:	71 e0       	ldi	r23, 0x01	; 1
   11588:	80 e0       	ldi	r24, 0x00	; 0
/// FIXME We clould add a test for read/write state ??
///@brief V2 boards we can't - not a big deal as the DAV test works anyway
            ///@brief Wait for NDAC float HI

            case GPIB_RX_WAIT_FOR_NDAC_HI:
                if (GPIB_PIN_TST(NDAC) == 1)
   1158a:	90 e0       	ldi	r25, 0x00	; 0
   1158c:	4d db       	rcall	.-2406   	; 0x10c28 <gpib_timeout_set>
                {
                    gpib_timeout_set(HTIMEOUT);
   1158e:	54 e0       	ldi	r21, 0x04	; 4
   11590:	f5 2e       	mov	r15, r21
   11592:	56 c0       	rjmp	.+172    	; 0x11640 <gpib_read_byte+0x18e>
   11594:	4b 9b       	sbis	0x09, 3	; 9
   11596:	0c c0       	rjmp	.+24     	; 0x115b0 <gpib_read_byte+0xfe>
   11598:	64 ef       	ldi	r22, 0xF4	; 244
                    rx_state = GPIB_RX_WAIT_FOR_DAV_HI;
   1159a:	71 e0       	ldi	r23, 0x01	; 1
   1159c:	80 e0       	ldi	r24, 0x00	; 0
   1159e:	90 e0       	ldi	r25, 0x00	; 0
                }
                break;

            ///@brief Wait for DAV HI
            case GPIB_RX_WAIT_FOR_DAV_HI:
                if (GPIB_PIN_TST(DAV) == 1)
   115a0:	43 db       	rcall	.-2426   	; 0x10c28 <gpib_timeout_set>
   115a2:	44 e0       	ldi	r20, 0x04	; 4
				{
                    rx_state = GPIB_RX_DAV_IS_HI;
   115a4:	f4 2e       	mov	r15, r20
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   115a6:	04 c0       	rjmp	.+8      	; 0x115b0 <gpib_read_byte+0xfe>
            case GPIB_RX_WAIT_FOR_DAV_HI:
                if (GPIB_PIN_TST(DAV) == 1)
				{
                    rx_state = GPIB_RX_DAV_IS_HI;
				}
                if (gpib_timeout_test())
   115a8:	19 9b       	sbis	0x03, 1	; 3
   115aa:	02 c0       	rjmp	.+4      	; 0x115b0 <gpib_read_byte+0xfe>
   115ac:	35 e0       	ldi	r19, 0x05	; 5
                {
                    ch |= TIMEOUT_FLAG;
   115ae:	f3 2e       	mov	r15, r19
                    rx_state = GPIB_RX_ERROR;
   115b0:	80 91 e3 1b 	lds	r24, 0x1BE3	; 0x801be3 <gpib_timer+0x8>
   115b4:	88 23       	and	r24, r24
            case GPIB_RX_ERROR:
                rx_state = GPIB_RX_DONE;
                break;

            case GPIB_RX_DONE:
				gpib_bus_read_init(1); // Busy
   115b6:	09 f4       	brne	.+2      	; 0x115ba <gpib_read_byte+0x108>
   115b8:	43 c0       	rjmp	.+134    	; 0x11640 <gpib_read_byte+0x18e>
   115ba:	d0 64       	ori	r29, 0x40	; 64
                break;
        }

        if(trace)
   115bc:	27 e0       	ldi	r18, 0x07	; 7
   115be:	f2 2e       	mov	r15, r18
   115c0:	3f c0       	rjmp	.+126    	; 0x11640 <gpib_read_byte+0x18e>
   115c2:	81 e0       	ldi	r24, 0x01	; 1
   115c4:	90 e0       	ldi	r25, 0x00	; 0
   115c6:	3a db       	rcall	.-2444   	; 0x10c3c <gpib_bus_read_init>
   115c8:	04 c0       	rjmp	.+8      	; 0x115d2 <gpib_read_byte+0x120>
   115ca:	c1 14       	cp	r12, r1
        {
			/// V2 boards can not read all control and handshake bits at once
			/// FIXME We could add a test for read/write state ??
			/// NRFD,NDAC SRQ are outputs durring write phase, but not at very start
            control = gpib_control_pin_read();
   115cc:	d1 04       	cpc	r13, r1
   115ce:	99 f0       	breq	.+38     	; 0x115f6 <gpib_read_byte+0x144>
   115d0:	05 c0       	rjmp	.+10     	; 0x115dc <gpib_read_byte+0x12a>
            control |= gpib_handshake_pin_read();
   115d2:	c1 14       	cp	r12, r1
   115d4:	d1 04       	cpc	r13, r1
   115d6:	a9 f0       	breq	.+42     	; 0x11602 <gpib_read_byte+0x150>
   115d8:	98 e0       	ldi	r25, 0x08	; 8
            if(control_last != control)
   115da:	f9 2e       	mov	r15, r25
   115dc:	4d dc       	rcall	.-1894   	; 0x10e78 <gpib_control_pin_read>
   115de:	5c 01       	movw	r10, r24
            {
                gpib_trace_display(control, TRACE_BUS);
   115e0:	5b dc       	rcall	.-1866   	; 0x10e98 <gpib_handshake_pin_read>
   115e2:	a8 2a       	or	r10, r24
   115e4:	b9 2a       	or	r11, r25
   115e6:	a0 16       	cp	r10, r16
   115e8:	b1 06       	cpc	r11, r17
   115ea:	31 f0       	breq	.+12     	; 0x115f8 <gpib_read_byte+0x146>
            case GPIB_RX_DONE:
				gpib_bus_read_init(1); // Busy
                break;
        }

        if(trace)
   115ec:	62 e0       	ldi	r22, 0x02	; 2
        control_last |= gpib_handshake_pin_read();
        gpib_trace_display(control_last, TRACE_BUS);
    }

    rx_state = GPIB_RX_START;
    while(rx_state != GPIB_RX_DONE)
   115ee:	70 e0       	ldi	r23, 0x00	; 0
   115f0:	c5 01       	movw	r24, r10
   115f2:	18 de       	rcall	.-976    	; 0x11224 <gpib_trace_display>
   115f4:	01 c0       	rjmp	.+2      	; 0x115f8 <gpib_read_byte+0x146>
   115f6:	58 01       	movw	r10, r16
///  - Remember that NDAC and NRFD are now both LOW!
///  - The spec says to KEEP BOTH LOW when NOT ready to read otherwise
///    we may miss a transfer and cause a controller timeout!
///  - GPIB TX state expects NRFD LOW on entry or it is an ERROR!

    lastcmd = current;
   115f8:	88 e0       	ldi	r24, 0x08	; 8
   115fa:	f8 16       	cp	r15, r24
   115fc:	11 f0       	breq	.+4      	; 0x11602 <gpib_read_byte+0x150>
   115fe:	85 01       	movw	r16, r10
   11600:	82 cf       	rjmp	.-252    	; 0x11506 <gpib_read_byte+0x54>
   11602:	80 91 e8 1d 	lds	r24, 0x1DE8	; 0x801de8 <current>
   11606:	90 91 e9 1d 	lds	r25, 0x1DE9	; 0x801de9 <current+0x1>

    if(ch & ERROR_MASK || (ch & ATN_FLAG) == 0)
   1160a:	90 93 e5 1b 	sts	0x1BE5, r25	; 0x801be5 <lastcmd+0x1>
   1160e:	80 93 e4 1b 	sts	0x1BE4, r24	; 0x801be4 <lastcmd>
   11612:	ce 01       	movw	r24, r28
   11614:	88 27       	eor	r24, r24
        current = 0;
   11616:	90 7d       	andi	r25, 0xD0	; 208
   11618:	89 2b       	or	r24, r25
   1161a:	11 f4       	brne	.+4      	; 0x11620 <gpib_read_byte+0x16e>
   1161c:	d2 fd       	sbrc	r29, 2
   1161e:	05 c0       	rjmp	.+10     	; 0x1162a <gpib_read_byte+0x178>
    else
        current = ch & CMD_MASK;
   11620:	10 92 e9 1d 	sts	0x1DE9, r1	; 0x801de9 <current+0x1>
   11624:	10 92 e8 1d 	sts	0x1DE8, r1	; 0x801de8 <current>
   11628:	07 c0       	rjmp	.+14     	; 0x11638 <gpib_read_byte+0x186>
   1162a:	ce 01       	movw	r24, r28
   1162c:	8f 77       	andi	r24, 0x7F	; 127
   1162e:	99 27       	eor	r25, r25
   11630:	90 93 e9 1d 	sts	0x1DE9, r25	; 0x801de9 <current+0x1>
                }
                break;

            ///@brief Ready for next byte
            case GPIB_RX_DAV_IS_HI:
                rx_state = GPIB_RX_FINISH;        // DONE
   11634:	80 93 e8 1d 	sts	0x1DE8, r24	; 0x801de8 <current>
            case GPIB_RX_DONE:
				gpib_bus_read_init(1); // Busy
                break;
        }

        if(trace)
   11638:	ce 01       	movw	r24, r28
   1163a:	07 c0       	rjmp	.+14     	; 0x1164a <gpib_read_byte+0x198>
   1163c:	86 e0       	ldi	r24, 0x06	; 6
   1163e:	f8 2e       	mov	r15, r24
        current = 0;
    else
        current = ch & CMD_MASK;

    return (ch);
}
   11640:	c1 14       	cp	r12, r1
   11642:	d1 04       	cpc	r13, r1
   11644:	09 f4       	brne	.+2      	; 0x11648 <gpib_read_byte+0x196>
   11646:	5f cf       	rjmp	.-322    	; 0x11506 <gpib_read_byte+0x54>
   11648:	c9 cf       	rjmp	.-110    	; 0x115dc <gpib_read_byte+0x12a>
   1164a:	df 91       	pop	r29
   1164c:	cf 91       	pop	r28
   1164e:	1f 91       	pop	r17
   11650:	0f 91       	pop	r16
   11652:	ff 90       	pop	r15
   11654:	df 90       	pop	r13
   11656:	cf 90       	pop	r12
   11658:	bf 90       	pop	r11
   1165a:	af 90       	pop	r10
   1165c:	08 95       	ret

0001165e <gpib_decode>:
/// @see gpib_decode_str()
/// @return  void

void gpib_decode(uint16_t ch)
{
    gpib_trace_display(ch,0);
   1165e:	60 e0       	ldi	r22, 0x00	; 0
   11660:	70 e0       	ldi	r23, 0x00	; 0
   11662:	e0 cd       	rjmp	.-1088   	; 0x11224 <gpib_trace_display>
   11664:	08 95       	ret

00011666 <gpib_read_str>:
///       - REN_FLAG
///       - PP_FLAG
///     - Error Flags:
///       - IFC_FLAG
int gpib_read_str(uint8_t *buf, int size, uint16_t *status)
{
   11666:	a0 e0       	ldi	r26, 0x00	; 0
   11668:	b0 e0       	ldi	r27, 0x00	; 0
   1166a:	e9 e3       	ldi	r30, 0x39	; 57
   1166c:	fb e8       	ldi	r31, 0x8B	; 139
   1166e:	0c 94 e8 e5 	jmp	0x1cbd0	; 0x1cbd0 <__prologue_saves__+0x10>
   11672:	5b 01       	movw	r10, r22
   11674:	6a 01       	movw	r12, r20
    uint16_t val;
    int ind = 0;

    *status &= STATUS_MASK;
   11676:	fa 01       	movw	r30, r20
   11678:	20 81       	ld	r18, Z
   1167a:	31 81       	ldd	r19, Z+1	; 0x01
   1167c:	22 27       	eor	r18, r18
   1167e:	31 83       	std	Z+1, r19	; 0x01
   11680:	20 83       	st	Z, r18

    if(!size)
   11682:	67 2b       	or	r22, r23
   11684:	21 f0       	breq	.+8      	; 0x1168e <gpib_read_str+0x28>
   11686:	7c 01       	movw	r14, r24
   11688:	c0 e0       	ldi	r28, 0x00	; 0
   1168a:	d0 e0       	ldi	r29, 0x00	; 0
   1168c:	28 c0       	rjmp	.+80     	; 0x116de <gpib_read_str+0x78>
    {
        if(debuglevel & (1+4))
   1168e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11692:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   11696:	85 70       	andi	r24, 0x05	; 5
   11698:	99 27       	eor	r25, r25
   1169a:	89 2b       	or	r24, r25
   1169c:	09 f4       	brne	.+2      	; 0x116a0 <gpib_read_str+0x3a>
   1169e:	89 c0       	rjmp	.+274    	; 0x117b2 <gpib_read_str+0x14c>
            printf("gpib_read_str: size = 0\n");
   116a0:	8b eb       	ldi	r24, 0xBB	; 187
   116a2:	9f e0       	ldi	r25, 0x0F	; 15
   116a4:	1f 92       	push	r1
   116a6:	9f 93       	push	r25
   116a8:	8f 93       	push	r24
   116aa:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   116ae:	0f 90       	pop	r0
   116b0:	0f 90       	pop	r0
   116b2:	0f 90       	pop	r0
   116b4:	7e c0       	rjmp	.+252    	; 0x117b2 <gpib_read_str+0x14c>
        {
            *status |= (val & ERROR_MASK);
            break;
        }

        if((*status & ATN_FLAG) != (val & ATN_FLAG))
   116b6:	80 27       	eor	r24, r16
   116b8:	91 27       	eor	r25, r17
   116ba:	92 fd       	sbrc	r25, 2
   116bc:	2e c0       	rjmp	.+92     	; 0x1171a <gpib_read_str+0xb4>
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
            gpib_unread(val);
            break;
        }

        if(val & ATN_FLAG)
   116be:	c8 01       	movw	r24, r16
   116c0:	88 27       	eor	r24, r24
   116c2:	94 70       	andi	r25, 0x04	; 4
   116c4:	12 ff       	sbrs	r17, 2
   116c6:	49 c0       	rjmp	.+146    	; 0x1175a <gpib_read_str+0xf4>
            buf[ind] = (val & CMD_MASK);
   116c8:	20 2f       	mov	r18, r16
   116ca:	2f 77       	andi	r18, 0x7F	; 127
   116cc:	f7 01       	movw	r30, r14
   116ce:	20 83       	st	Z, r18
        else
            buf[ind] = (val & DATA_MASK);
        ++ind;
   116d0:	21 96       	adiw	r28, 0x01	; 1

        if(!(val & ATN_FLAG) && (val & EOI_FLAG) )
   116d2:	89 2b       	or	r24, r25
   116d4:	09 f4       	brne	.+2      	; 0x116d8 <gpib_read_str+0x72>
   116d6:	44 c0       	rjmp	.+136    	; 0x11760 <gpib_read_str+0xfa>
   116d8:	ff ef       	ldi	r31, 0xFF	; 255
   116da:	ef 1a       	sub	r14, r31
   116dc:	ff 0a       	sbc	r15, r31
    {
        if(debuglevel & (1+4))
            printf("gpib_read_str: size = 0\n");
    }

    while(ind < size)
   116de:	ca 15       	cp	r28, r10
   116e0:	db 05       	cpc	r29, r11
   116e2:	0c f0       	brlt	.+2      	; 0x116e6 <gpib_read_str+0x80>
   116e4:	47 c0       	rjmp	.+142    	; 0x11774 <gpib_read_str+0x10e>
    {
        val = gpib_read_byte(NO_TRACE);
   116e6:	80 e0       	ldi	r24, 0x00	; 0
   116e8:	90 e0       	ldi	r25, 0x00	; 0
   116ea:	e3 de       	rcall	.-570    	; 0x114b2 <gpib_read_byte>
   116ec:	8c 01       	movw	r16, r24
#if SDEBUG
        if(debuglevel & 256)
   116ee:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   116f2:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   116f6:	90 ff       	sbrs	r25, 0
            gpib_decode(val);
   116f8:	02 c0       	rjmp	.+4      	; 0x116fe <gpib_read_str+0x98>
   116fa:	c8 01       	movw	r24, r16
#endif
        if(val & ERROR_MASK)
   116fc:	b0 df       	rcall	.-160    	; 0x1165e <gpib_decode>
   116fe:	98 01       	movw	r18, r16
   11700:	22 27       	eor	r18, r18
   11702:	30 7d       	andi	r19, 0xD0	; 208
   11704:	f6 01       	movw	r30, r12
   11706:	80 81       	ld	r24, Z
   11708:	91 81       	ldd	r25, Z+1	; 0x01
   1170a:	21 15       	cp	r18, r1
   1170c:	31 05       	cpc	r19, r1
        {
            *status |= (val & ERROR_MASK);
   1170e:	99 f2       	breq	.-90     	; 0x116b6 <gpib_read_str+0x50>
   11710:	82 2b       	or	r24, r18
   11712:	93 2b       	or	r25, r19
   11714:	91 83       	std	Z+1, r25	; 0x01
            break;
   11716:	80 83       	st	Z, r24
        }

        if((*status & ATN_FLAG) != (val & ATN_FLAG))
        {
            if(debuglevel & (1+4))
   11718:	30 c0       	rjmp	.+96     	; 0x1177a <gpib_read_str+0x114>
   1171a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1171e:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   11722:	85 70       	andi	r24, 0x05	; 5
   11724:	99 27       	eor	r25, r25
   11726:	89 2b       	or	r24, r25
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
   11728:	a9 f0       	breq	.+42     	; 0x11754 <gpib_read_str+0xee>
   1172a:	c8 01       	movw	r24, r16
   1172c:	99 27       	eor	r25, r25
   1172e:	9f 93       	push	r25
   11730:	8f 93       	push	r24
   11732:	df 93       	push	r29
   11734:	cf 93       	push	r28
   11736:	8e e8       	ldi	r24, 0x8E	; 142
   11738:	9f e0       	ldi	r25, 0x0F	; 15
   1173a:	1f 92       	push	r1
   1173c:	9f 93       	push	r25
   1173e:	8f 93       	push	r24
   11740:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   11744:	ed b7       	in	r30, 0x3d	; 61
   11746:	fe b7       	in	r31, 0x3e	; 62
   11748:	37 96       	adiw	r30, 0x07	; 7
   1174a:	0f b6       	in	r0, 0x3f	; 63
   1174c:	f8 94       	cli
   1174e:	fe bf       	out	0x3e, r31	; 62
            gpib_unread(val);
   11750:	0f be       	out	0x3f, r0	; 63
   11752:	ed bf       	out	0x3d, r30	; 61
   11754:	c8 01       	movw	r24, r16
            break;
   11756:	65 db       	rcall	.-2358   	; 0x10e22 <gpib_unread>
        }

        if(val & ATN_FLAG)
            buf[ind] = (val & CMD_MASK);
        else
            buf[ind] = (val & DATA_MASK);
   11758:	10 c0       	rjmp	.+32     	; 0x1177a <gpib_read_str+0x114>
   1175a:	f7 01       	movw	r30, r14
   1175c:	00 83       	st	Z, r16
        ++ind;

        if(!(val & ATN_FLAG) && (val & EOI_FLAG) )
   1175e:	b8 cf       	rjmp	.-144    	; 0x116d0 <gpib_read_str+0x6a>
   11760:	10 ff       	sbrs	r17, 0
        {

            if(*status & EOI_FLAG)
   11762:	ba cf       	rjmp	.-140    	; 0x116d8 <gpib_read_str+0x72>
   11764:	f6 01       	movw	r30, r12
   11766:	80 81       	ld	r24, Z
   11768:	91 81       	ldd	r25, Z+1	; 0x01
   1176a:	90 fd       	sbrc	r25, 0
                return(ind);
/// @todo TODO
///  decode this state - for now I just set the EOI_FLAG
            *status |= EOI_FLAG;
   1176c:	24 c0       	rjmp	.+72     	; 0x117b6 <gpib_read_str+0x150>
   1176e:	91 60       	ori	r25, 0x01	; 1
   11770:	91 83       	std	Z+1, r25	; 0x01
            break;
        }
    }
    if ( ind != size )
   11772:	80 83       	st	Z, r24
   11774:	ca 15       	cp	r28, r10
   11776:	db 05       	cpc	r29, r11
    {
        if(debuglevel & (1+4))
   11778:	f1 f0       	breq	.+60     	; 0x117b6 <gpib_read_str+0x150>
   1177a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1177e:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   11782:	85 70       	andi	r24, 0x05	; 5
   11784:	99 27       	eor	r25, r25
   11786:	89 2b       	or	r24, r25
            printf("[gpib_read_str read(%d) expected(%d)]\n", ind , size);
   11788:	b1 f0       	breq	.+44     	; 0x117b6 <gpib_read_str+0x150>
   1178a:	bf 92       	push	r11
   1178c:	af 92       	push	r10
   1178e:	df 93       	push	r29
   11790:	cf 93       	push	r28
   11792:	87 e6       	ldi	r24, 0x67	; 103
   11794:	9f e0       	ldi	r25, 0x0F	; 15
   11796:	1f 92       	push	r1
   11798:	9f 93       	push	r25
   1179a:	8f 93       	push	r24
   1179c:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   117a0:	ed b7       	in	r30, 0x3d	; 61
   117a2:	fe b7       	in	r31, 0x3e	; 62
   117a4:	37 96       	adiw	r30, 0x07	; 7
   117a6:	0f b6       	in	r0, 0x3f	; 63
   117a8:	f8 94       	cli
   117aa:	fe bf       	out	0x3e, r31	; 62
   117ac:	0f be       	out	0x3f, r0	; 63
   117ae:	ed bf       	out	0x3d, r30	; 61
   117b0:	02 c0       	rjmp	.+4      	; 0x117b6 <gpib_read_str+0x150>
   117b2:	c0 e0       	ldi	r28, 0x00	; 0
    }
    return(ind);
}
   117b4:	d0 e0       	ldi	r29, 0x00	; 0
   117b6:	ce 01       	movw	r24, r28
   117b8:	cd b7       	in	r28, 0x3d	; 61
   117ba:	de b7       	in	r29, 0x3e	; 62
   117bc:	ea e0       	ldi	r30, 0x0A	; 10
   117be:	0c 94 04 e6 	jmp	0x1cc08	; 0x1cc08 <__epilogue_restores__+0x10>

000117c2 <gpib_write_str>:
///     - Error Flags:
///       - IFC_FLAG
/// @see: gpib_write_byte()
/// @see: gpib.h _FLAGS defines for a full list)
int gpib_write_str(uint8_t *buf, int size, uint16_t *status)
{
   117c2:	a0 e0       	ldi	r26, 0x00	; 0
   117c4:	b0 e0       	ldi	r27, 0x00	; 0
   117c6:	e7 ee       	ldi	r30, 0xE7	; 231
   117c8:	fb e8       	ldi	r31, 0x8B	; 139
   117ca:	0c 94 e8 e5 	jmp	0x1cbd0	; 0x1cbd0 <__prologue_saves__+0x10>
   117ce:	8b 01       	movw	r16, r22
   117d0:	7a 01       	movw	r14, r20
    uint16_t val, ch;
    int ind = 0;

    *status &= STATUS_MASK;
   117d2:	fa 01       	movw	r30, r20
   117d4:	20 81       	ld	r18, Z
   117d6:	31 81       	ldd	r19, Z+1	; 0x01
   117d8:	22 27       	eor	r18, r18
   117da:	31 83       	std	Z+1, r19	; 0x01
   117dc:	20 83       	st	Z, r18

    if(!size)
   117de:	67 2b       	or	r22, r23
   117e0:	21 f0       	breq	.+8      	; 0x117ea <gpib_write_str+0x28>
   117e2:	6c 01       	movw	r12, r24
   117e4:	c0 e0       	ldi	r28, 0x00	; 0
   117e6:	d0 e0       	ldi	r29, 0x00	; 0
   117e8:	35 c0       	rjmp	.+106    	; 0x11854 <gpib_write_str+0x92>
    {
        if(debuglevel & (1+4))
   117ea:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   117ee:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   117f2:	85 70       	andi	r24, 0x05	; 5
   117f4:	99 27       	eor	r25, r25
   117f6:	89 2b       	or	r24, r25
   117f8:	09 f4       	brne	.+2      	; 0x117fc <gpib_write_str+0x3a>
   117fa:	54 c0       	rjmp	.+168    	; 0x118a4 <gpib_write_str+0xe2>
            printf("gpib_write_str: size = 0\n");
   117fc:	8d e4       	ldi	r24, 0x4D	; 77
   117fe:	9f e0       	ldi	r25, 0x0F	; 15
   11800:	1f 92       	push	r1
   11802:	9f 93       	push	r25
   11804:	8f 93       	push	r24
   11806:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1180a:	0f 90       	pop	r0
   1180c:	0f 90       	pop	r0
   1180e:	0f 90       	pop	r0
   11810:	49 c0       	rjmp	.+146    	; 0x118a4 <gpib_write_str+0xe2>
    }

    while(ind < size)
    {
        ch = buf[ind++] & 0xff;                   // unsigned
   11812:	21 96       	adiw	r28, 0x01	; 1
   11814:	f6 01       	movw	r30, r12
   11816:	81 91       	ld	r24, Z+
   11818:	6f 01       	movw	r12, r30
   1181a:	90 e0       	ldi	r25, 0x00	; 0

        if(*status & ATN_FLAG)
   1181c:	f7 01       	movw	r30, r14
   1181e:	20 81       	ld	r18, Z
   11820:	31 81       	ldd	r19, Z+1	; 0x01
   11822:	32 fd       	sbrc	r19, 2
        {
            ch |= ATN_FLAG;
   11824:	94 60       	ori	r25, 0x04	; 4
        }

        if( (*status & EOI_FLAG) && (ind == size ) )
   11826:	30 fd       	sbrc	r19, 0
            ch |= EOI_FLAG;

/// @return Returns

        val = gpib_write_byte(ch);
   11828:	19 c0       	rjmp	.+50     	; 0x1185c <gpib_write_str+0x9a>
        *status |= (val & ERROR_MASK);
   1182a:	42 db       	rcall	.-2428   	; 0x10eb0 <gpib_write_byte>
   1182c:	5c 01       	movw	r10, r24
   1182e:	aa 24       	eor	r10, r10
   11830:	f0 ed       	ldi	r31, 0xD0	; 208
   11832:	bf 22       	and	r11, r31
   11834:	f7 01       	movw	r30, r14
   11836:	20 81       	ld	r18, Z
   11838:	31 81       	ldd	r19, Z+1	; 0x01
   1183a:	2a 29       	or	r18, r10
   1183c:	3b 29       	or	r19, r11
   1183e:	31 83       	std	Z+1, r19	; 0x01

#if SDEBUG
        if(debuglevel & 256)
   11840:	20 83       	st	Z, r18
   11842:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   11846:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <debuglevel+0x1>
            gpib_decode(val);
   1184a:	30 fd       	sbrc	r19, 0
#endif
        if(val & ERROR_MASK)
   1184c:	08 df       	rcall	.-496    	; 0x1165e <gpib_decode>
   1184e:	a1 14       	cp	r10, r1
   11850:	b1 04       	cpc	r11, r1
    {
        if(debuglevel & (1+4))
            printf("gpib_write_str: size = 0\n");
    }

    while(ind < size)
   11852:	49 f4       	brne	.+18     	; 0x11866 <gpib_write_str+0xa4>
   11854:	c0 17       	cp	r28, r16
   11856:	d1 07       	cpc	r29, r17
   11858:	e4 f2       	brlt	.-72     	; 0x11812 <gpib_write_str+0x50>
        if(*status & ATN_FLAG)
        {
            ch |= ATN_FLAG;
        }

        if( (*status & EOI_FLAG) && (ind == size ) )
   1185a:	05 c0       	rjmp	.+10     	; 0x11866 <gpib_write_str+0xa4>
   1185c:	0c 17       	cp	r16, r28
   1185e:	1d 07       	cpc	r17, r29
            ch |= EOI_FLAG;
   11860:	21 f7       	brne	.-56     	; 0x1182a <gpib_write_str+0x68>
   11862:	91 60       	ori	r25, 0x01	; 1
        {
            break;
        }

    }                                             // while(ind < size)
    if ( ind != size )
   11864:	e2 cf       	rjmp	.-60     	; 0x1182a <gpib_write_str+0x68>
   11866:	c0 17       	cp	r28, r16
   11868:	d1 07       	cpc	r29, r17
    {
        if(debuglevel & (1+4))
   1186a:	f1 f0       	breq	.+60     	; 0x118a8 <gpib_write_str+0xe6>
   1186c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11870:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   11874:	85 70       	andi	r24, 0x05	; 5
   11876:	99 27       	eor	r25, r25
   11878:	89 2b       	or	r24, r25
            printf("[gpib_write_str sent(%d) expected(%d)]\n", ind,size);
   1187a:	b1 f0       	breq	.+44     	; 0x118a8 <gpib_write_str+0xe6>
   1187c:	1f 93       	push	r17
   1187e:	0f 93       	push	r16
   11880:	df 93       	push	r29
   11882:	cf 93       	push	r28
   11884:	85 e2       	ldi	r24, 0x25	; 37
   11886:	9f e0       	ldi	r25, 0x0F	; 15
   11888:	1f 92       	push	r1
   1188a:	9f 93       	push	r25
   1188c:	8f 93       	push	r24
   1188e:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   11892:	8d b7       	in	r24, 0x3d	; 61
   11894:	9e b7       	in	r25, 0x3e	; 62
   11896:	07 96       	adiw	r24, 0x07	; 7
   11898:	0f b6       	in	r0, 0x3f	; 63
   1189a:	f8 94       	cli
   1189c:	9e bf       	out	0x3e, r25	; 62
   1189e:	0f be       	out	0x3f, r0	; 63
   118a0:	8d bf       	out	0x3d, r24	; 61
    uint16_t val, ch;
    int ind = 0;

    *status &= STATUS_MASK;

    if(!size)
   118a2:	02 c0       	rjmp	.+4      	; 0x118a8 <gpib_write_str+0xe6>
   118a4:	c0 e0       	ldi	r28, 0x00	; 0
    {
        if(debuglevel & (1+4))
            printf("[gpib_write_str sent(%d) expected(%d)]\n", ind,size);
    }
    return(ind);
}
   118a6:	d0 e0       	ldi	r29, 0x00	; 0
   118a8:	ce 01       	movw	r24, r28
   118aa:	cd b7       	in	r28, 0x3d	; 61
   118ac:	de b7       	in	r29, 0x3e	; 62
   118ae:	ea e0       	ldi	r30, 0x0A	; 10
   118b0:	0c 94 04 e6 	jmp	0x1cc08	; 0x1cc08 <__epilogue_restores__+0x10>

000118b4 <gpib_file_init>:
   118b4:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <debuglevel+0x1>
   118b8:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <debuglevel>
   118bc:	8f eb       	ldi	r24, 0xBF	; 191
   118be:	91 e0       	ldi	r25, 0x01	; 1
   118c0:	0e 94 df 97 	call	0x12fbe	; 0x12fbe <Read_Config>
   118c4:	18 16       	cp	r1, r24
   118c6:	19 06       	cpc	r1, r25
   118c8:	b4 f4       	brge	.+44     	; 0x118f6 <gpib_file_init+0x42>
   118ca:	9f 93       	push	r25
   118cc:	8f 93       	push	r24
   118ce:	8f eb       	ldi	r24, 0xBF	; 191
   118d0:	91 e0       	ldi	r25, 0x01	; 1
   118d2:	9f 93       	push	r25
   118d4:	8f 93       	push	r24
   118d6:	84 e7       	ldi	r24, 0x74	; 116
   118d8:	94 e1       	ldi	r25, 0x14	; 20
   118da:	1f 92       	push	r1
   118dc:	9f 93       	push	r25
   118de:	8f 93       	push	r24
   118e0:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   118e4:	8d b7       	in	r24, 0x3d	; 61
   118e6:	9e b7       	in	r25, 0x3e	; 62
   118e8:	07 96       	adiw	r24, 0x07	; 7
   118ea:	0f b6       	in	r0, 0x3f	; 63
   118ec:	f8 94       	cli
   118ee:	9e bf       	out	0x3e, r25	; 62
   118f0:	0f be       	out	0x3f, r0	; 63
   118f2:	8d bf       	out	0x3d, r24	; 61
   118f4:	12 c0       	rjmp	.+36     	; 0x1191a <gpib_file_init+0x66>
   118f6:	89 2b       	or	r24, r25
   118f8:	81 f0       	breq	.+32     	; 0x1191a <gpib_file_init+0x66>
   118fa:	8f eb       	ldi	r24, 0xBF	; 191
   118fc:	91 e0       	ldi	r25, 0x01	; 1
   118fe:	9f 93       	push	r25
   11900:	8f 93       	push	r24
   11902:	83 e6       	ldi	r24, 0x63	; 99
   11904:	94 e1       	ldi	r25, 0x14	; 20
   11906:	1f 92       	push	r1
   11908:	9f 93       	push	r25
   1190a:	8f 93       	push	r24
   1190c:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   11910:	0f 90       	pop	r0
   11912:	0f 90       	pop	r0
   11914:	0f 90       	pop	r0
   11916:	0f 90       	pop	r0
   11918:	0f 90       	pop	r0
   1191a:	0e 94 99 96 	call	0x12d32	; 0x12d32 <set_Config_Defaults>
   1191e:	0e 94 43 71 	call	0xe286	; 0xe286 <mmc_wp_status>
   11922:	89 2b       	or	r24, r25
   11924:	51 f0       	breq	.+20     	; 0x1193a <gpib_file_init+0x86>
   11926:	8a e4       	ldi	r24, 0x4A	; 74
   11928:	94 e1       	ldi	r25, 0x14	; 20
   1192a:	1f 92       	push	r1
   1192c:	9f 93       	push	r25
   1192e:	8f 93       	push	r24
   11930:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   11934:	0f 90       	pop	r0
   11936:	0f 90       	pop	r0
   11938:	0f 90       	pop	r0
   1193a:	08 95       	ret

0001193c <SS80_is_MLA>:
   1193c:	40 e2       	ldi	r20, 0x20	; 32
   1193e:	50 e0       	ldi	r21, 0x00	; 0
   11940:	bc 01       	movw	r22, r24
   11942:	83 e0       	ldi	r24, 0x03	; 3
   11944:	90 e0       	ldi	r25, 0x00	; 0
   11946:	8a d6       	rcall	.+3348   	; 0x1265c <find_device>
   11948:	8f 3f       	cpi	r24, 0xFF	; 255
   1194a:	2f ef       	ldi	r18, 0xFF	; 255
   1194c:	92 07       	cpc	r25, r18
   1194e:	11 f0       	breq	.+4      	; 0x11954 <SS80_is_MLA+0x18>
   11950:	af c6       	rjmp	.+3422   	; 0x126b0 <set_active_device>
   11952:	08 95       	ret
   11954:	80 e0       	ldi	r24, 0x00	; 0
   11956:	90 e0       	ldi	r25, 0x00	; 0
   11958:	08 95       	ret

0001195a <SS80_is_MTA>:
   1195a:	40 e4       	ldi	r20, 0x40	; 64
   1195c:	50 e0       	ldi	r21, 0x00	; 0
   1195e:	bc 01       	movw	r22, r24
   11960:	83 e0       	ldi	r24, 0x03	; 3
   11962:	90 e0       	ldi	r25, 0x00	; 0
   11964:	7b d6       	rcall	.+3318   	; 0x1265c <find_device>
   11966:	8f 3f       	cpi	r24, 0xFF	; 255
   11968:	2f ef       	ldi	r18, 0xFF	; 255
   1196a:	92 07       	cpc	r25, r18
   1196c:	11 f0       	breq	.+4      	; 0x11972 <SS80_is_MTA+0x18>
   1196e:	a0 c6       	rjmp	.+3392   	; 0x126b0 <set_active_device>
   11970:	08 95       	ret
   11972:	80 e0       	ldi	r24, 0x00	; 0
   11974:	90 e0       	ldi	r25, 0x00	; 0
   11976:	08 95       	ret

00011978 <SS80_is_MSA>:
   11978:	40 e6       	ldi	r20, 0x60	; 96
   1197a:	50 e0       	ldi	r21, 0x00	; 0
   1197c:	bc 01       	movw	r22, r24
   1197e:	83 e0       	ldi	r24, 0x03	; 3
   11980:	90 e0       	ldi	r25, 0x00	; 0
   11982:	6c d6       	rcall	.+3288   	; 0x1265c <find_device>
   11984:	8f 3f       	cpi	r24, 0xFF	; 255
   11986:	2f ef       	ldi	r18, 0xFF	; 255
   11988:	92 07       	cpc	r25, r18
   1198a:	11 f0       	breq	.+4      	; 0x11990 <SS80_is_MSA+0x18>
   1198c:	91 c6       	rjmp	.+3362   	; 0x126b0 <set_active_device>
   1198e:	08 95       	ret
   11990:	80 e0       	ldi	r24, 0x00	; 0
   11992:	90 e0       	ldi	r25, 0x00	; 0
   11994:	08 95       	ret

00011996 <AMIGO_is_MLA>:
   11996:	40 e2       	ldi	r20, 0x20	; 32
   11998:	50 e0       	ldi	r21, 0x00	; 0
   1199a:	bc 01       	movw	r22, r24
   1199c:	81 e0       	ldi	r24, 0x01	; 1
   1199e:	90 e0       	ldi	r25, 0x00	; 0
   119a0:	5d d6       	rcall	.+3258   	; 0x1265c <find_device>
   119a2:	8f 3f       	cpi	r24, 0xFF	; 255
   119a4:	2f ef       	ldi	r18, 0xFF	; 255
   119a6:	92 07       	cpc	r25, r18
   119a8:	11 f0       	breq	.+4      	; 0x119ae <AMIGO_is_MLA+0x18>
   119aa:	82 c6       	rjmp	.+3332   	; 0x126b0 <set_active_device>
   119ac:	08 95       	ret
   119ae:	80 e0       	ldi	r24, 0x00	; 0
   119b0:	90 e0       	ldi	r25, 0x00	; 0
   119b2:	08 95       	ret

000119b4 <AMIGO_is_MTA>:
   119b4:	40 e4       	ldi	r20, 0x40	; 64
   119b6:	50 e0       	ldi	r21, 0x00	; 0
   119b8:	bc 01       	movw	r22, r24
   119ba:	81 e0       	ldi	r24, 0x01	; 1
   119bc:	90 e0       	ldi	r25, 0x00	; 0
   119be:	4e d6       	rcall	.+3228   	; 0x1265c <find_device>
   119c0:	8f 3f       	cpi	r24, 0xFF	; 255
   119c2:	2f ef       	ldi	r18, 0xFF	; 255
   119c4:	92 07       	cpc	r25, r18
   119c6:	11 f0       	breq	.+4      	; 0x119cc <AMIGO_is_MTA+0x18>
   119c8:	73 c6       	rjmp	.+3302   	; 0x126b0 <set_active_device>
   119ca:	08 95       	ret
   119cc:	80 e0       	ldi	r24, 0x00	; 0
   119ce:	90 e0       	ldi	r25, 0x00	; 0
   119d0:	08 95       	ret

000119d2 <AMIGO_is_MSA>:
   119d2:	40 e6       	ldi	r20, 0x60	; 96
   119d4:	50 e0       	ldi	r21, 0x00	; 0
   119d6:	bc 01       	movw	r22, r24
   119d8:	81 e0       	ldi	r24, 0x01	; 1
   119da:	90 e0       	ldi	r25, 0x00	; 0
   119dc:	3f d6       	rcall	.+3198   	; 0x1265c <find_device>
   119de:	8f 3f       	cpi	r24, 0xFF	; 255
   119e0:	2f ef       	ldi	r18, 0xFF	; 255
   119e2:	92 07       	cpc	r25, r18
   119e4:	11 f0       	breq	.+4      	; 0x119ea <AMIGO_is_MSA+0x18>
   119e6:	64 c6       	rjmp	.+3272   	; 0x126b0 <set_active_device>
   119e8:	08 95       	ret
   119ea:	80 e0       	ldi	r24, 0x00	; 0
   119ec:	90 e0       	ldi	r25, 0x00	; 0
   119ee:	08 95       	ret

000119f0 <PRINTER_is_MLA>:
   119f0:	40 e2       	ldi	r20, 0x20	; 32
   119f2:	50 e0       	ldi	r21, 0x00	; 0
   119f4:	bc 01       	movw	r22, r24
   119f6:	84 e0       	ldi	r24, 0x04	; 4
   119f8:	90 e0       	ldi	r25, 0x00	; 0
   119fa:	30 d6       	rcall	.+3168   	; 0x1265c <find_device>
   119fc:	8f 3f       	cpi	r24, 0xFF	; 255
   119fe:	2f ef       	ldi	r18, 0xFF	; 255
   11a00:	92 07       	cpc	r25, r18
   11a02:	11 f0       	breq	.+4      	; 0x11a08 <PRINTER_is_MLA+0x18>
   11a04:	55 c6       	rjmp	.+3242   	; 0x126b0 <set_active_device>
   11a06:	08 95       	ret
   11a08:	80 e0       	ldi	r24, 0x00	; 0
   11a0a:	90 e0       	ldi	r25, 0x00	; 0
   11a0c:	08 95       	ret

00011a0e <PRINTER_is_MTA>:
   11a0e:	40 e4       	ldi	r20, 0x40	; 64
   11a10:	50 e0       	ldi	r21, 0x00	; 0
   11a12:	bc 01       	movw	r22, r24
   11a14:	84 e0       	ldi	r24, 0x04	; 4
   11a16:	90 e0       	ldi	r25, 0x00	; 0
   11a18:	21 d6       	rcall	.+3138   	; 0x1265c <find_device>
   11a1a:	8f 3f       	cpi	r24, 0xFF	; 255
   11a1c:	2f ef       	ldi	r18, 0xFF	; 255
   11a1e:	92 07       	cpc	r25, r18
   11a20:	11 f0       	breq	.+4      	; 0x11a26 <PRINTER_is_MTA+0x18>
   11a22:	46 c6       	rjmp	.+3212   	; 0x126b0 <set_active_device>
   11a24:	08 95       	ret
   11a26:	80 e0       	ldi	r24, 0x00	; 0
   11a28:	90 e0       	ldi	r25, 0x00	; 0
   11a2a:	08 95       	ret

00011a2c <gpib_init_devices>:
   11a2c:	2a d9       	rcall	.-3500   	; 0x10c82 <gpib_bus_init>
   11a2e:	0e 94 54 b0 	call	0x160a8	; 0x160a8 <SS80_init>
   11a32:	0e 94 d9 b5 	call	0x16bb2	; 0x16bb2 <amigo_init>
   11a36:	0c 94 c0 c0 	jmp	0x18180	; 0x18180 <printer_close>
   11a3a:	08 95       	ret

00011a3c <gpib_trace_task>:
   11a3c:	0f 93       	push	r16
   11a3e:	1f 93       	push	r17
   11a40:	cf 93       	push	r28
   11a42:	df 93       	push	r29
   11a44:	eb 01       	movw	r28, r22
   11a46:	00 97       	sbiw	r24, 0x00	; 0
   11a48:	09 f4       	brne	.+2      	; 0x11a4c <gpib_trace_task+0x10>
   11a4a:	42 c0       	rjmp	.+132    	; 0x11ad0 <gpib_trace_task+0x94>
   11a4c:	fc 01       	movw	r30, r24
   11a4e:	20 81       	ld	r18, Z
   11a50:	22 23       	and	r18, r18
   11a52:	f1 f1       	breq	.+124    	; 0x11ad0 <gpib_trace_task+0x94>
   11a54:	0e 94 bd 32 	call	0x657a	; 0x657a <skipspaces>
   11a58:	8c 01       	movw	r16, r24
   11a5a:	1f 93       	push	r17
   11a5c:	8f 93       	push	r24
   11a5e:	80 e3       	ldi	r24, 0x30	; 48
   11a60:	94 e1       	ldi	r25, 0x14	; 20
   11a62:	1f 92       	push	r1
   11a64:	9f 93       	push	r25
   11a66:	8f 93       	push	r24
   11a68:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   11a6c:	0f 90       	pop	r0
   11a6e:	0f 90       	pop	r0
   11a70:	0f 90       	pop	r0
   11a72:	0f 90       	pop	r0
   11a74:	0f 90       	pop	r0
   11a76:	20 97       	sbiw	r28, 0x00	; 0
   11a78:	51 f0       	breq	.+20     	; 0x11a8e <gpib_trace_task+0x52>
   11a7a:	85 e0       	ldi	r24, 0x05	; 5
   11a7c:	94 e1       	ldi	r25, 0x14	; 20
   11a7e:	1f 92       	push	r1
   11a80:	9f 93       	push	r25
   11a82:	8f 93       	push	r24
   11a84:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   11a88:	0f 90       	pop	r0
   11a8a:	0f 90       	pop	r0
   11a8c:	0f 90       	pop	r0
   11a8e:	8e ee       	ldi	r24, 0xEE	; 238
   11a90:	93 e1       	ldi	r25, 0x13	; 19
   11a92:	1f 92       	push	r1
   11a94:	9f 93       	push	r25
   11a96:	8f 93       	push	r24
   11a98:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   11a9c:	64 e9       	ldi	r22, 0x94	; 148
   11a9e:	78 e0       	ldi	r23, 0x08	; 8
   11aa0:	c8 01       	movw	r24, r16
   11aa2:	0e 94 40 7f 	call	0xfe80	; 0xfe80 <fopen>
   11aa6:	90 93 62 18 	sts	0x1862, r25	; 0x801862 <gpib_log_fp+0x1>
   11aaa:	80 93 61 18 	sts	0x1861, r24	; 0x801861 <gpib_log_fp>
   11aae:	0f 90       	pop	r0
   11ab0:	0f 90       	pop	r0
   11ab2:	0f 90       	pop	r0
   11ab4:	89 2b       	or	r24, r25
   11ab6:	a1 f4       	brne	.+40     	; 0x11ae0 <gpib_trace_task+0xa4>
   11ab8:	8b e1       	ldi	r24, 0x1B	; 27
   11aba:	9d e0       	ldi	r25, 0x0D	; 13
   11abc:	0e 94 8a 79 	call	0xf314	; 0xf314 <perror>
   11ac0:	82 ee       	ldi	r24, 0xE2	; 226
   11ac2:	93 e1       	ldi	r25, 0x13	; 19
   11ac4:	1f 92       	push	r1
   11ac6:	9f 93       	push	r25
   11ac8:	8f 93       	push	r24
   11aca:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   11ace:	3b c0       	rjmp	.+118    	; 0x11b46 <gpib_trace_task+0x10a>
   11ad0:	80 91 bd 1b 	lds	r24, 0x1BBD	; 0x801bbd <__iob+0x2>
   11ad4:	90 91 be 1b 	lds	r25, 0x1BBE	; 0x801bbe <__iob+0x3>
   11ad8:	90 93 62 18 	sts	0x1862, r25	; 0x801862 <gpib_log_fp+0x1>
   11adc:	80 93 61 18 	sts	0x1861, r24	; 0x801861 <gpib_log_fp>
   11ae0:	f8 d8       	rcall	.-3600   	; 0x10cd2 <gpib_state_init>
   11ae2:	a4 df       	rcall	.-184    	; 0x11a2c <gpib_init_devices>
   11ae4:	80 91 61 18 	lds	r24, 0x1861	; 0x801861 <gpib_log_fp>
   11ae8:	90 91 62 18 	lds	r25, 0x1862	; 0x801862 <gpib_log_fp+0x1>
   11aec:	49 db       	rcall	.-2414   	; 0x11180 <gpib_decode_header>
   11aee:	80 e0       	ldi	r24, 0x00	; 0
   11af0:	0e 94 1c 2c 	call	0x5838	; 0x5838 <uart_keyhit>
   11af4:	89 2b       	or	r24, r25
   11af6:	31 f4       	brne	.+12     	; 0x11b04 <gpib_trace_task+0xc8>
   11af8:	ce 01       	movw	r24, r28
   11afa:	db dc       	rcall	.-1610   	; 0x114b2 <gpib_read_byte>
   11afc:	20 97       	sbiw	r28, 0x00	; 0
   11afe:	b9 f7       	brne	.-18     	; 0x11aee <gpib_trace_task+0xb2>
   11b00:	ae dd       	rcall	.-1188   	; 0x1165e <gpib_decode>
   11b02:	f5 cf       	rjmp	.-22     	; 0x11aee <gpib_trace_task+0xb2>
   11b04:	8c ed       	ldi	r24, 0xDC	; 220
   11b06:	93 e1       	ldi	r25, 0x13	; 19
   11b08:	1f 92       	push	r1
   11b0a:	9f 93       	push	r25
   11b0c:	8f 93       	push	r24
   11b0e:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   11b12:	80 91 61 18 	lds	r24, 0x1861	; 0x801861 <gpib_log_fp>
   11b16:	90 91 62 18 	lds	r25, 0x1862	; 0x801862 <gpib_log_fp+0x1>
   11b1a:	0f 90       	pop	r0
   11b1c:	0f 90       	pop	r0
   11b1e:	0f 90       	pop	r0
   11b20:	00 97       	sbiw	r24, 0x00	; 0
   11b22:	a1 f0       	breq	.+40     	; 0x11b4c <gpib_trace_task+0x110>
   11b24:	0e 94 ea 7d 	call	0xfbd4	; 0xfbd4 <fclose>
   11b28:	8a ec       	ldi	r24, 0xCA	; 202
   11b2a:	93 e1       	ldi	r25, 0x13	; 19
   11b2c:	1f 92       	push	r1
   11b2e:	9f 93       	push	r25
   11b30:	8f 93       	push	r24
   11b32:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   11b36:	80 91 bd 1b 	lds	r24, 0x1BBD	; 0x801bbd <__iob+0x2>
   11b3a:	90 91 be 1b 	lds	r25, 0x1BBE	; 0x801bbe <__iob+0x3>
   11b3e:	90 93 62 18 	sts	0x1862, r25	; 0x801862 <gpib_log_fp+0x1>
   11b42:	80 93 61 18 	sts	0x1861, r24	; 0x801861 <gpib_log_fp>
   11b46:	0f 90       	pop	r0
   11b48:	0f 90       	pop	r0
   11b4a:	0f 90       	pop	r0
   11b4c:	df 91       	pop	r29
   11b4e:	cf 91       	pop	r28
   11b50:	1f 91       	pop	r17
   11b52:	0f 91       	pop	r16
   11b54:	08 95       	ret

00011b56 <gpib_error_test>:
   11b56:	ef 92       	push	r14
   11b58:	ff 92       	push	r15
   11b5a:	0f 93       	push	r16
   11b5c:	1f 93       	push	r17
   11b5e:	cf 93       	push	r28
   11b60:	df 93       	push	r29
   11b62:	7c 01       	movw	r14, r24
   11b64:	ec 01       	movw	r28, r24
   11b66:	cc 27       	eor	r28, r28
   11b68:	d0 7d       	andi	r29, 0xD0	; 208
   11b6a:	20 97       	sbiw	r28, 0x00	; 0
   11b6c:	61 f0       	breq	.+24     	; 0x11b86 <gpib_error_test+0x30>
   11b6e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11b72:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   11b76:	8e 72       	andi	r24, 0x2E	; 46
   11b78:	99 27       	eor	r25, r25
   11b7a:	87 01       	movw	r16, r14
   11b7c:	00 27       	eor	r16, r16
   11b7e:	10 71       	andi	r17, 0x10	; 16
   11b80:	89 2b       	or	r24, r25
   11b82:	59 f4       	brne	.+22     	; 0x11b9a <gpib_error_test+0x44>
   11b84:	17 c0       	rjmp	.+46     	; 0x11bb4 <gpib_error_test+0x5e>
   11b86:	80 e0       	ldi	r24, 0x00	; 0
   11b88:	0e 94 1c 2c 	call	0x5838	; 0x5838 <uart_keyhit>
   11b8c:	89 2b       	or	r24, r25
   11b8e:	79 f7       	brne	.-34     	; 0x11b6e <gpib_error_test+0x18>
   11b90:	0e 94 40 71 	call	0xe280	; 0xe280 <mmc_ins_status>
   11b94:	01 97       	sbiw	r24, 0x01	; 1
   11b96:	59 f7       	brne	.-42     	; 0x11b6e <gpib_error_test+0x18>
   11b98:	62 c0       	rjmp	.+196    	; 0x11c5e <gpib_error_test+0x108>
   11b9a:	01 15       	cp	r16, r1
   11b9c:	11 05       	cpc	r17, r1
   11b9e:	51 f0       	breq	.+20     	; 0x11bb4 <gpib_error_test+0x5e>
   11ba0:	83 ec       	ldi	r24, 0xC3	; 195
   11ba2:	93 e1       	ldi	r25, 0x13	; 19
   11ba4:	1f 92       	push	r1
   11ba6:	9f 93       	push	r25
   11ba8:	8f 93       	push	r24
   11baa:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   11bae:	0f 90       	pop	r0
   11bb0:	0f 90       	pop	r0
   11bb2:	0f 90       	pop	r0
   11bb4:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11bb8:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   11bbc:	85 70       	andi	r24, 0x05	; 5
   11bbe:	99 27       	eor	r25, r25
   11bc0:	89 2b       	or	r24, r25
   11bc2:	c1 f0       	breq	.+48     	; 0x11bf4 <gpib_error_test+0x9e>
   11bc4:	f6 fe       	sbrs	r15, 6
   11bc6:	0a c0       	rjmp	.+20     	; 0x11bdc <gpib_error_test+0x86>
   11bc8:	88 eb       	ldi	r24, 0xB8	; 184
   11bca:	93 e1       	ldi	r25, 0x13	; 19
   11bcc:	1f 92       	push	r1
   11bce:	9f 93       	push	r25
   11bd0:	8f 93       	push	r24
   11bd2:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   11bd6:	0f 90       	pop	r0
   11bd8:	0f 90       	pop	r0
   11bda:	0f 90       	pop	r0
   11bdc:	d7 ff       	sbrs	r29, 7
   11bde:	0a c0       	rjmp	.+20     	; 0x11bf4 <gpib_error_test+0x9e>
   11be0:	81 eb       	ldi	r24, 0xB1	; 177
   11be2:	93 e1       	ldi	r25, 0x13	; 19
   11be4:	1f 92       	push	r1
   11be6:	9f 93       	push	r25
   11be8:	8f 93       	push	r24
   11bea:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   11bee:	0f 90       	pop	r0
   11bf0:	0f 90       	pop	r0
   11bf2:	0f 90       	pop	r0
   11bf4:	80 e0       	ldi	r24, 0x00	; 0
   11bf6:	0e 94 1c 2c 	call	0x5838	; 0x5838 <uart_keyhit>
   11bfa:	89 2b       	or	r24, r25
   11bfc:	51 f0       	breq	.+20     	; 0x11c12 <gpib_error_test+0xbc>
   11bfe:	84 ea       	ldi	r24, 0xA4	; 164
   11c00:	93 e1       	ldi	r25, 0x13	; 19
   11c02:	1f 92       	push	r1
   11c04:	9f 93       	push	r25
   11c06:	8f 93       	push	r24
   11c08:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   11c0c:	0f 90       	pop	r0
   11c0e:	0f 90       	pop	r0
   11c10:	0f 90       	pop	r0
   11c12:	0e 94 40 71 	call	0xe280	; 0xe280 <mmc_ins_status>
   11c16:	01 97       	sbiw	r24, 0x01	; 1
   11c18:	51 f0       	breq	.+20     	; 0x11c2e <gpib_error_test+0xd8>
   11c1a:	83 e9       	ldi	r24, 0x93	; 147
   11c1c:	93 e1       	ldi	r25, 0x13	; 19
   11c1e:	1f 92       	push	r1
   11c20:	9f 93       	push	r25
   11c22:	8f 93       	push	r24
   11c24:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   11c28:	0f 90       	pop	r0
   11c2a:	0f 90       	pop	r0
   11c2c:	0f 90       	pop	r0
   11c2e:	01 15       	cp	r16, r1
   11c30:	11 05       	cpc	r17, r1
   11c32:	09 f0       	breq	.+2      	; 0x11c36 <gpib_error_test+0xe0>
   11c34:	fb de       	rcall	.-522    	; 0x11a2c <gpib_init_devices>
   11c36:	80 e0       	ldi	r24, 0x00	; 0
   11c38:	0e 94 1c 2c 	call	0x5838	; 0x5838 <uart_keyhit>
   11c3c:	89 2b       	or	r24, r25
   11c3e:	11 f0       	breq	.+4      	; 0x11c44 <gpib_error_test+0xee>
   11c40:	f5 de       	rcall	.-534    	; 0x11a2c <gpib_init_devices>
   11c42:	0b c0       	rjmp	.+22     	; 0x11c5a <gpib_error_test+0x104>
   11c44:	0e 94 40 71 	call	0xe280	; 0xe280 <mmc_ins_status>
   11c48:	01 97       	sbiw	r24, 0x01	; 1
   11c4a:	39 f4       	brne	.+14     	; 0x11c5a <gpib_error_test+0x104>
   11c4c:	01 15       	cp	r16, r1
   11c4e:	11 05       	cpc	r17, r1
   11c50:	31 f0       	breq	.+12     	; 0x11c5e <gpib_error_test+0x108>
   11c52:	54 98       	cbi	0x0a, 4	; 10
   11c54:	4c 9b       	sbis	0x09, 4	; 9
   11c56:	fd cf       	rjmp	.-6      	; 0x11c52 <gpib_error_test+0xfc>
   11c58:	02 c0       	rjmp	.+4      	; 0x11c5e <gpib_error_test+0x108>
   11c5a:	c1 e0       	ldi	r28, 0x01	; 1
   11c5c:	d0 e0       	ldi	r29, 0x00	; 0
   11c5e:	ce 01       	movw	r24, r28
   11c60:	cd b7       	in	r28, 0x3d	; 61
   11c62:	de b7       	in	r29, 0x3e	; 62
   11c64:	e6 e0       	ldi	r30, 0x06	; 6
   11c66:	0c 94 08 e6 	jmp	0x1cc10	; 0x1cc10 <__epilogue_restores__+0x18>

00011c6a <GPIB_COMMANDS>:
   11c6a:	1f 93       	push	r17
   11c6c:	cf 93       	push	r28
   11c6e:	df 93       	push	r29
   11c70:	ec 01       	movw	r28, r24
   11c72:	16 2f       	mov	r17, r22
   11c74:	80 91 ea 1d 	lds	r24, 0x1DEA	; 0x801dea <talking>
   11c78:	8f 35       	cpi	r24, 0x5F	; 95
   11c7a:	91 f0       	breq	.+36     	; 0x11ca0 <GPIB_COMMANDS+0x36>
   11c7c:	80 91 ec 1d 	lds	r24, 0x1DEC	; 0x801dec <listening>
   11c80:	90 e0       	ldi	r25, 0x00	; 0
   11c82:	89 de       	rcall	.-750    	; 0x11996 <AMIGO_is_MLA>
   11c84:	89 2b       	or	r24, r25
   11c86:	c9 f4       	brne	.+50     	; 0x11cba <GPIB_COMMANDS+0x50>
   11c88:	80 91 ec 1d 	lds	r24, 0x1DEC	; 0x801dec <listening>
   11c8c:	90 e0       	ldi	r25, 0x00	; 0
   11c8e:	56 de       	rcall	.-852    	; 0x1193c <SS80_is_MLA>
   11c90:	89 2b       	or	r24, r25
   11c92:	11 f5       	brne	.+68     	; 0x11cd8 <GPIB_COMMANDS+0x6e>
   11c94:	80 91 ec 1d 	lds	r24, 0x1DEC	; 0x801dec <listening>
   11c98:	90 e0       	ldi	r25, 0x00	; 0
   11c9a:	aa de       	rcall	.-684    	; 0x119f0 <PRINTER_is_MLA>
   11c9c:	89 2b       	or	r24, r25
   11c9e:	59 f5       	brne	.+86     	; 0x11cf6 <GPIB_COMMANDS+0x8c>
   11ca0:	80 91 ec 1d 	lds	r24, 0x1DEC	; 0x801dec <listening>
   11ca4:	8f 33       	cpi	r24, 0x3F	; 63
   11ca6:	19 f4       	brne	.+6      	; 0x11cae <GPIB_COMMANDS+0x44>
   11ca8:	80 e0       	ldi	r24, 0x00	; 0
   11caa:	90 e0       	ldi	r25, 0x00	; 0
   11cac:	2e c0       	rjmp	.+92     	; 0x11d0a <GPIB_COMMANDS+0xa0>
   11cae:	80 91 ea 1d 	lds	r24, 0x1DEA	; 0x801dea <talking>
   11cb2:	90 e0       	ldi	r25, 0x00	; 0
   11cb4:	7f de       	rcall	.-770    	; 0x119b4 <AMIGO_is_MTA>
   11cb6:	89 2b       	or	r24, r25
   11cb8:	49 f0       	breq	.+18     	; 0x11ccc <GPIB_COMMANDS+0x62>
   11cba:	11 23       	and	r17, r17
   11cbc:	11 f0       	breq	.+4      	; 0x11cc2 <GPIB_COMMANDS+0x58>
   11cbe:	ce 01       	movw	r24, r28
   11cc0:	b0 d8       	rcall	.-3744   	; 0x10e22 <gpib_unread>
   11cc2:	80 91 eb 1d 	lds	r24, 0x1DEB	; 0x801deb <secondary>
   11cc6:	0e 94 c1 bf 	call	0x17f82	; 0x17f82 <AMIGO_COMMANDS>
   11cca:	1d c0       	rjmp	.+58     	; 0x11d06 <GPIB_COMMANDS+0x9c>
   11ccc:	80 91 ea 1d 	lds	r24, 0x1DEA	; 0x801dea <talking>
   11cd0:	90 e0       	ldi	r25, 0x00	; 0
   11cd2:	43 de       	rcall	.-890    	; 0x1195a <SS80_is_MTA>
   11cd4:	89 2b       	or	r24, r25
   11cd6:	49 f0       	breq	.+18     	; 0x11cea <GPIB_COMMANDS+0x80>
   11cd8:	11 23       	and	r17, r17
   11cda:	11 f0       	breq	.+4      	; 0x11ce0 <GPIB_COMMANDS+0x76>
   11cdc:	ce 01       	movw	r24, r28
   11cde:	a1 d8       	rcall	.-3774   	; 0x10e22 <gpib_unread>
   11ce0:	80 91 eb 1d 	lds	r24, 0x1DEB	; 0x801deb <secondary>
   11ce4:	0e 94 33 b4 	call	0x16866	; 0x16866 <SS80_COMMANDS>
   11ce8:	0e c0       	rjmp	.+28     	; 0x11d06 <GPIB_COMMANDS+0x9c>
   11cea:	80 91 ea 1d 	lds	r24, 0x1DEA	; 0x801dea <talking>
   11cee:	90 e0       	ldi	r25, 0x00	; 0
   11cf0:	8e de       	rcall	.-740    	; 0x11a0e <PRINTER_is_MTA>
   11cf2:	89 2b       	or	r24, r25
   11cf4:	c9 f2       	breq	.-78     	; 0x11ca8 <GPIB_COMMANDS+0x3e>
   11cf6:	11 23       	and	r17, r17
   11cf8:	11 f0       	breq	.+4      	; 0x11cfe <GPIB_COMMANDS+0x94>
   11cfa:	ce 01       	movw	r24, r28
   11cfc:	92 d8       	rcall	.-3804   	; 0x10e22 <gpib_unread>
   11cfe:	80 91 eb 1d 	lds	r24, 0x1DEB	; 0x801deb <secondary>
   11d02:	0e 94 21 c2 	call	0x18442	; 0x18442 <PRINTER_COMMANDS>
   11d06:	10 92 eb 1d 	sts	0x1DEB, r1	; 0x801deb <secondary>
   11d0a:	df 91       	pop	r29
   11d0c:	cf 91       	pop	r28
   11d0e:	1f 91       	pop	r17
   11d10:	08 95       	ret

00011d12 <Send_Identify>:
   11d12:	a4 e0       	ldi	r26, 0x04	; 4
   11d14:	b0 e0       	ldi	r27, 0x00	; 0
   11d16:	ef e8       	ldi	r30, 0x8F	; 143
   11d18:	fe e8       	ldi	r31, 0x8E	; 142
   11d1a:	0c 94 eb e5 	jmp	0x1cbd6	; 0x1cbd6 <__prologue_saves__+0x16>
   11d1e:	d8 2e       	mov	r13, r24
   11d20:	7b 01       	movw	r14, r22
   11d22:	80 e0       	ldi	r24, 0x00	; 0
   11d24:	91 e0       	ldi	r25, 0x01	; 1
   11d26:	9c 83       	std	Y+4, r25	; 0x04
   11d28:	8b 83       	std	Y+3, r24	; 0x03
   11d2a:	8b 01       	movw	r16, r22
   11d2c:	20 e0       	ldi	r18, 0x00	; 0
   11d2e:	30 e0       	ldi	r19, 0x00	; 0
   11d30:	42 e0       	ldi	r20, 0x02	; 2
   11d32:	50 e0       	ldi	r21, 0x00	; 0
   11d34:	60 e0       	ldi	r22, 0x00	; 0
   11d36:	70 e0       	ldi	r23, 0x00	; 0
   11d38:	ce 01       	movw	r24, r28
   11d3a:	01 96       	adiw	r24, 0x01	; 1
   11d3c:	e7 d3       	rcall	.+1998   	; 0x1250c <V2B_MSB>
   11d3e:	ae 01       	movw	r20, r28
   11d40:	4d 5f       	subi	r20, 0xFD	; 253
   11d42:	5f 4f       	sbci	r21, 0xFF	; 255
   11d44:	62 e0       	ldi	r22, 0x02	; 2
   11d46:	70 e0       	ldi	r23, 0x00	; 0
   11d48:	ce 01       	movw	r24, r28
   11d4a:	01 96       	adiw	r24, 0x01	; 1
   11d4c:	3a dd       	rcall	.-1420   	; 0x117c2 <gpib_write_str>
   11d4e:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   11d52:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <debuglevel+0x1>
   11d56:	02 97       	sbiw	r24, 0x02	; 2
   11d58:	59 f0       	breq	.+22     	; 0x11d70 <Send_Identify+0x5e>
   11d5a:	25 70       	andi	r18, 0x05	; 5
   11d5c:	33 27       	eor	r19, r19
   11d5e:	23 2b       	or	r18, r19
   11d60:	c9 f0       	breq	.+50     	; 0x11d94 <Send_Identify+0x82>
   11d62:	ff 92       	push	r15
   11d64:	ef 92       	push	r14
   11d66:	1f 92       	push	r1
   11d68:	df 92       	push	r13
   11d6a:	82 e7       	ldi	r24, 0x72	; 114
   11d6c:	93 e1       	ldi	r25, 0x13	; 19
   11d6e:	08 c0       	rjmp	.+16     	; 0x11d80 <Send_Identify+0x6e>
   11d70:	22 ff       	sbrs	r18, 2
   11d72:	10 c0       	rjmp	.+32     	; 0x11d94 <Send_Identify+0x82>
   11d74:	ff 92       	push	r15
   11d76:	ef 92       	push	r14
   11d78:	1f 92       	push	r1
   11d7a:	df 92       	push	r13
   11d7c:	88 e5       	ldi	r24, 0x58	; 88
   11d7e:	93 e1       	ldi	r25, 0x13	; 19
   11d80:	1f 92       	push	r1
   11d82:	9f 93       	push	r25
   11d84:	8f 93       	push	r24
   11d86:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   11d8a:	0f b6       	in	r0, 0x3f	; 63
   11d8c:	f8 94       	cli
   11d8e:	de bf       	out	0x3e, r29	; 62
   11d90:	0f be       	out	0x3f, r0	; 63
   11d92:	cd bf       	out	0x3d, r28	; 61
   11d94:	8b 81       	ldd	r24, Y+3	; 0x03
   11d96:	9c 81       	ldd	r25, Y+4	; 0x04
   11d98:	88 27       	eor	r24, r24
   11d9a:	90 7d       	andi	r25, 0xD0	; 208
   11d9c:	24 96       	adiw	r28, 0x04	; 4
   11d9e:	e7 e0       	ldi	r30, 0x07	; 7
   11da0:	0c 94 07 e6 	jmp	0x1cc0e	; 0x1cc0e <__epilogue_restores__+0x16>

00011da4 <GPIB>:
   11da4:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   11da8:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <debuglevel+0x1>
   11dac:	85 30       	cpi	r24, 0x05	; 5
   11dae:	89 f4       	brne	.+34     	; 0x11dd2 <GPIB+0x2e>
   11db0:	24 71       	andi	r18, 0x14	; 20
   11db2:	33 27       	eor	r19, r19
   11db4:	23 2b       	or	r18, r19
   11db6:	51 f0       	breq	.+20     	; 0x11dcc <GPIB+0x28>
   11db8:	85 e4       	ldi	r24, 0x45	; 69
   11dba:	93 e1       	ldi	r25, 0x13	; 19
   11dbc:	1f 92       	push	r1
   11dbe:	9f 93       	push	r25
   11dc0:	8f 93       	push	r24
   11dc2:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   11dc6:	0f 90       	pop	r0
   11dc8:	0f 90       	pop	r0
   11dca:	0f 90       	pop	r0
   11dcc:	10 92 e7 1d 	sts	0x1DE7, r1	; 0x801de7 <spoll>
   11dd0:	9d c0       	rjmp	.+314    	; 0x11f0c <GPIB+0x168>
   11dd2:	85 31       	cpi	r24, 0x15	; 21
   11dd4:	39 f4       	brne	.+14     	; 0x11de4 <GPIB+0x40>
   11dd6:	24 71       	andi	r18, 0x14	; 20
   11dd8:	33 27       	eor	r19, r19
   11dda:	23 2b       	or	r18, r19
   11ddc:	b9 f3       	breq	.-18     	; 0x11dcc <GPIB+0x28>
   11dde:	82 e3       	ldi	r24, 0x32	; 50
   11de0:	93 e1       	ldi	r25, 0x13	; 19
   11de2:	ec cf       	rjmp	.-40     	; 0x11dbc <GPIB+0x18>
   11de4:	88 31       	cpi	r24, 0x18	; 24
   11de6:	c9 f4       	brne	.+50     	; 0x11e1a <GPIB+0x76>
   11de8:	22 ff       	sbrs	r18, 2
   11dea:	0a c0       	rjmp	.+20     	; 0x11e00 <GPIB+0x5c>
   11dec:	8b e2       	ldi	r24, 0x2B	; 43
   11dee:	93 e1       	ldi	r25, 0x13	; 19
   11df0:	1f 92       	push	r1
   11df2:	9f 93       	push	r25
   11df4:	8f 93       	push	r24
   11df6:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   11dfa:	0f 90       	pop	r0
   11dfc:	0f 90       	pop	r0
   11dfe:	0f 90       	pop	r0
   11e00:	81 e0       	ldi	r24, 0x01	; 1
   11e02:	80 93 e7 1d 	sts	0x1DE7, r24	; 0x801de7 <spoll>
   11e06:	80 91 ea 1d 	lds	r24, 0x1DEA	; 0x801dea <talking>
   11e0a:	90 e0       	ldi	r25, 0x00	; 0
   11e0c:	a6 dd       	rcall	.-1204   	; 0x1195a <SS80_is_MTA>
   11e0e:	89 2b       	or	r24, r25
   11e10:	09 f4       	brne	.+2      	; 0x11e14 <GPIB+0x70>
   11e12:	7c c0       	rjmp	.+248    	; 0x11f0c <GPIB+0x168>
   11e14:	0c 94 e7 af 	jmp	0x15fce	; 0x15fce <SS80_Report>
   11e18:	08 95       	ret
   11e1a:	89 31       	cpi	r24, 0x19	; 25
   11e1c:	29 f4       	brne	.+10     	; 0x11e28 <GPIB+0x84>
   11e1e:	22 ff       	sbrs	r18, 2
   11e20:	d5 cf       	rjmp	.-86     	; 0x11dcc <GPIB+0x28>
   11e22:	84 e2       	ldi	r24, 0x24	; 36
   11e24:	93 e1       	ldi	r25, 0x13	; 19
   11e26:	ca cf       	rjmp	.-108    	; 0x11dbc <GPIB+0x18>
   11e28:	84 30       	cpi	r24, 0x04	; 4
   11e2a:	09 f0       	breq	.+2      	; 0x11e2e <GPIB+0x8a>
   11e2c:	48 c0       	rjmp	.+144    	; 0x11ebe <GPIB+0x11a>
   11e2e:	22 ff       	sbrs	r18, 2
   11e30:	0a c0       	rjmp	.+20     	; 0x11e46 <GPIB+0xa2>
   11e32:	8d e1       	ldi	r24, 0x1D	; 29
   11e34:	93 e1       	ldi	r25, 0x13	; 19
   11e36:	1f 92       	push	r1
   11e38:	9f 93       	push	r25
   11e3a:	8f 93       	push	r24
   11e3c:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   11e40:	0f 90       	pop	r0
   11e42:	0f 90       	pop	r0
   11e44:	0f 90       	pop	r0
   11e46:	80 91 ec 1d 	lds	r24, 0x1DEC	; 0x801dec <listening>
   11e4a:	90 e0       	ldi	r25, 0x00	; 0
   11e4c:	77 dd       	rcall	.-1298   	; 0x1193c <SS80_is_MLA>
   11e4e:	89 2b       	or	r24, r25
   11e50:	d9 f0       	breq	.+54     	; 0x11e88 <GPIB+0xe4>
   11e52:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11e56:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   11e5a:	84 72       	andi	r24, 0x24	; 36
   11e5c:	99 27       	eor	r25, r25
   11e5e:	89 2b       	or	r24, r25
   11e60:	51 f0       	breq	.+20     	; 0x11e76 <GPIB+0xd2>
   11e62:	81 e1       	ldi	r24, 0x11	; 17
   11e64:	93 e1       	ldi	r25, 0x13	; 19
   11e66:	1f 92       	push	r1
   11e68:	9f 93       	push	r25
   11e6a:	8f 93       	push	r24
   11e6c:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   11e70:	0f 90       	pop	r0
   11e72:	0f 90       	pop	r0
   11e74:	0f 90       	pop	r0
   11e76:	e0 91 69 18 	lds	r30, 0x1869	; 0x801869 <SS80s>
   11e7a:	f0 91 6a 18 	lds	r31, 0x186A	; 0x80186a <SS80s+0x1>
   11e7e:	85 81       	ldd	r24, Z+5	; 0x05
   11e80:	90 e0       	ldi	r25, 0x00	; 0
   11e82:	0c 94 b5 b0 	jmp	0x1616a	; 0x1616a <SS80_Selected_Device_Clear>
   11e86:	08 95       	ret
   11e88:	80 91 ec 1d 	lds	r24, 0x1DEC	; 0x801dec <listening>
   11e8c:	90 e0       	ldi	r25, 0x00	; 0
   11e8e:	83 dd       	rcall	.-1274   	; 0x11996 <AMIGO_is_MLA>
   11e90:	89 2b       	or	r24, r25
   11e92:	e1 f1       	breq	.+120    	; 0x11f0c <GPIB+0x168>
   11e94:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11e98:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   11e9c:	84 72       	andi	r24, 0x24	; 36
   11e9e:	99 27       	eor	r25, r25
   11ea0:	89 2b       	or	r24, r25
   11ea2:	51 f0       	breq	.+20     	; 0x11eb8 <GPIB+0x114>
   11ea4:	84 e0       	ldi	r24, 0x04	; 4
   11ea6:	93 e1       	ldi	r25, 0x13	; 19
   11ea8:	1f 92       	push	r1
   11eaa:	9f 93       	push	r25
   11eac:	8f 93       	push	r24
   11eae:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   11eb2:	0f 90       	pop	r0
   11eb4:	0f 90       	pop	r0
   11eb6:	0f 90       	pop	r0
   11eb8:	0c 94 94 ba 	jmp	0x17528	; 0x17528 <amigo_cmd_clear>
   11ebc:	08 95       	ret
   11ebe:	84 31       	cpi	r24, 0x14	; 20
   11ec0:	99 f4       	brne	.+38     	; 0x11ee8 <GPIB+0x144>
   11ec2:	22 ff       	sbrs	r18, 2
   11ec4:	0a c0       	rjmp	.+20     	; 0x11eda <GPIB+0x136>
   11ec6:	8d ef       	ldi	r24, 0xFD	; 253
   11ec8:	92 e1       	ldi	r25, 0x12	; 18
   11eca:	1f 92       	push	r1
   11ecc:	9f 93       	push	r25
   11ece:	8f 93       	push	r24
   11ed0:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   11ed4:	0f 90       	pop	r0
   11ed6:	0f 90       	pop	r0
   11ed8:	0f 90       	pop	r0
   11eda:	0e 94 a7 b0 	call	0x1614e	; 0x1614e <SS80_Universal_Device_Clear>
   11ede:	0e 94 94 ba 	call	0x17528	; 0x17528 <amigo_cmd_clear>
   11ee2:	0e 94 c0 c0 	call	0x18180	; 0x18180 <printer_close>
   11ee6:	12 c0       	rjmp	.+36     	; 0x11f0c <GPIB+0x168>
   11ee8:	25 71       	andi	r18, 0x15	; 21
   11eea:	33 27       	eor	r19, r19
   11eec:	23 2b       	or	r18, r19
   11eee:	71 f0       	breq	.+28     	; 0x11f0c <GPIB+0x168>
   11ef0:	1f 92       	push	r1
   11ef2:	8f 93       	push	r24
   11ef4:	81 ee       	ldi	r24, 0xE1	; 225
   11ef6:	92 e1       	ldi	r25, 0x12	; 18
   11ef8:	1f 92       	push	r1
   11efa:	9f 93       	push	r25
   11efc:	8f 93       	push	r24
   11efe:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   11f02:	0f 90       	pop	r0
   11f04:	0f 90       	pop	r0
   11f06:	0f 90       	pop	r0
   11f08:	0f 90       	pop	r0
   11f0a:	0f 90       	pop	r0
   11f0c:	80 e0       	ldi	r24, 0x00	; 0
   11f0e:	90 e0       	ldi	r25, 0x00	; 0
   11f10:	08 95       	ret

00011f12 <GPIB_TALK>:
   11f12:	0f 93       	push	r16
   11f14:	1f 93       	push	r17
   11f16:	cf 93       	push	r28
   11f18:	c8 2f       	mov	r28, r24
   11f1a:	80 91 ea 1d 	lds	r24, 0x1DEA	; 0x801dea <talking>
   11f1e:	80 93 ed 1d 	sts	0x1DED, r24	; 0x801ded <talking_last>
   11f22:	c0 93 ea 1d 	sts	0x1DEA, r28	; 0x801dea <talking>
   11f26:	cf 35       	cpi	r28, 0x5F	; 95
   11f28:	79 f4       	brne	.+30     	; 0x11f48 <GPIB_TALK+0x36>
   11f2a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11f2e:	82 ff       	sbrs	r24, 2
   11f30:	7f c0       	rjmp	.+254    	; 0x12030 <GPIB_TALK+0x11e>
   11f32:	8e e8       	ldi	r24, 0x8E	; 142
   11f34:	92 e1       	ldi	r25, 0x12	; 18
   11f36:	1f 92       	push	r1
   11f38:	9f 93       	push	r25
   11f3a:	8f 93       	push	r24
   11f3c:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   11f40:	0f 90       	pop	r0
   11f42:	0f 90       	pop	r0
   11f44:	0f 90       	pop	r0
   11f46:	74 c0       	rjmp	.+232    	; 0x12030 <GPIB_TALK+0x11e>
   11f48:	0c 2f       	mov	r16, r28
   11f4a:	10 e0       	ldi	r17, 0x00	; 0
   11f4c:	c8 01       	movw	r24, r16
   11f4e:	05 dd       	rcall	.-1526   	; 0x1195a <SS80_is_MTA>
   11f50:	89 2b       	or	r24, r25
   11f52:	f1 f0       	breq	.+60     	; 0x11f90 <GPIB_TALK+0x7e>
   11f54:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11f58:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   11f5c:	84 72       	andi	r24, 0x24	; 36
   11f5e:	99 27       	eor	r25, r25
   11f60:	89 2b       	or	r24, r25
   11f62:	71 f0       	breq	.+28     	; 0x11f80 <GPIB_TALK+0x6e>
   11f64:	1f 92       	push	r1
   11f66:	cf 93       	push	r28
   11f68:	8d e7       	ldi	r24, 0x7D	; 125
   11f6a:	92 e1       	ldi	r25, 0x12	; 18
   11f6c:	1f 92       	push	r1
   11f6e:	9f 93       	push	r25
   11f70:	8f 93       	push	r24
   11f72:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   11f76:	0f 90       	pop	r0
   11f78:	0f 90       	pop	r0
   11f7a:	0f 90       	pop	r0
   11f7c:	0f 90       	pop	r0
   11f7e:	0f 90       	pop	r0
   11f80:	80 91 e7 1d 	lds	r24, 0x1DE7	; 0x801de7 <spoll>
   11f84:	88 23       	and	r24, r24
   11f86:	09 f4       	brne	.+2      	; 0x11f8a <GPIB_TALK+0x78>
   11f88:	53 c0       	rjmp	.+166    	; 0x12030 <GPIB_TALK+0x11e>
   11f8a:	0e 94 e7 af 	call	0x15fce	; 0x15fce <SS80_Report>
   11f8e:	50 c0       	rjmp	.+160    	; 0x12030 <GPIB_TALK+0x11e>
   11f90:	c8 01       	movw	r24, r16
   11f92:	10 dd       	rcall	.-1504   	; 0x119b4 <AMIGO_is_MTA>
   11f94:	89 2b       	or	r24, r25
   11f96:	71 f0       	breq	.+28     	; 0x11fb4 <GPIB_TALK+0xa2>
   11f98:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11f9c:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   11fa0:	84 72       	andi	r24, 0x24	; 36
   11fa2:	99 27       	eor	r25, r25
   11fa4:	89 2b       	or	r24, r25
   11fa6:	09 f4       	brne	.+2      	; 0x11faa <GPIB_TALK+0x98>
   11fa8:	43 c0       	rjmp	.+134    	; 0x12030 <GPIB_TALK+0x11e>
   11faa:	1f 92       	push	r1
   11fac:	cf 93       	push	r28
   11fae:	8b e6       	ldi	r24, 0x6B	; 107
   11fb0:	92 e1       	ldi	r25, 0x12	; 18
   11fb2:	34 c0       	rjmp	.+104    	; 0x1201c <GPIB_TALK+0x10a>
   11fb4:	c8 01       	movw	r24, r16
   11fb6:	2b dd       	rcall	.-1450   	; 0x11a0e <PRINTER_is_MTA>
   11fb8:	89 2b       	or	r24, r25
   11fba:	69 f0       	breq	.+26     	; 0x11fd6 <GPIB_TALK+0xc4>
   11fbc:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11fc0:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   11fc4:	84 72       	andi	r24, 0x24	; 36
   11fc6:	99 27       	eor	r25, r25
   11fc8:	89 2b       	or	r24, r25
   11fca:	91 f1       	breq	.+100    	; 0x12030 <GPIB_TALK+0x11e>
   11fcc:	1f 92       	push	r1
   11fce:	cf 93       	push	r28
   11fd0:	87 e5       	ldi	r24, 0x57	; 87
   11fd2:	92 e1       	ldi	r25, 0x12	; 18
   11fd4:	23 c0       	rjmp	.+70     	; 0x1201c <GPIB_TALK+0x10a>
   11fd6:	80 91 ec 1d 	lds	r24, 0x1DEC	; 0x801dec <listening>
   11fda:	90 e0       	ldi	r25, 0x00	; 0
   11fdc:	09 dd       	rcall	.-1518   	; 0x119f0 <PRINTER_is_MLA>
   11fde:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   11fe2:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <debuglevel+0x1>
   11fe6:	89 2b       	or	r24, r25
   11fe8:	99 f0       	breq	.+38     	; 0x12010 <GPIB_TALK+0xfe>
   11fea:	24 72       	andi	r18, 0x24	; 36
   11fec:	33 27       	eor	r19, r19
   11fee:	23 2b       	or	r18, r19
   11ff0:	51 f0       	breq	.+20     	; 0x12006 <GPIB_TALK+0xf4>
   11ff2:	87 e4       	ldi	r24, 0x47	; 71
   11ff4:	92 e1       	ldi	r25, 0x12	; 18
   11ff6:	1f 92       	push	r1
   11ff8:	9f 93       	push	r25
   11ffa:	8f 93       	push	r24
   11ffc:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   12000:	0f 90       	pop	r0
   12002:	0f 90       	pop	r0
   12004:	0f 90       	pop	r0
   12006:	80 e0       	ldi	r24, 0x00	; 0
   12008:	90 e0       	ldi	r25, 0x00	; 0
   1200a:	0e 94 0d c1 	call	0x1821a	; 0x1821a <printer_open>
   1200e:	10 c0       	rjmp	.+32     	; 0x12030 <GPIB_TALK+0x11e>
   12010:	22 ff       	sbrs	r18, 2
   12012:	0e c0       	rjmp	.+28     	; 0x12030 <GPIB_TALK+0x11e>
   12014:	1f 92       	push	r1
   12016:	cf 93       	push	r28
   12018:	8b e3       	ldi	r24, 0x3B	; 59
   1201a:	92 e1       	ldi	r25, 0x12	; 18
   1201c:	1f 92       	push	r1
   1201e:	9f 93       	push	r25
   12020:	8f 93       	push	r24
   12022:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   12026:	0f 90       	pop	r0
   12028:	0f 90       	pop	r0
   1202a:	0f 90       	pop	r0
   1202c:	0f 90       	pop	r0
   1202e:	0f 90       	pop	r0
   12030:	80 e0       	ldi	r24, 0x00	; 0
   12032:	90 e0       	ldi	r25, 0x00	; 0
   12034:	cf 91       	pop	r28
   12036:	1f 91       	pop	r17
   12038:	0f 91       	pop	r16
   1203a:	08 95       	ret

0001203c <GPIB_SECONDARY_ADDRESS>:
   1203c:	0f 93       	push	r16
   1203e:	1f 93       	push	r17
   12040:	cf 93       	push	r28
   12042:	c8 2f       	mov	r28, r24
   12044:	08 2f       	mov	r16, r24
   12046:	10 e0       	ldi	r17, 0x00	; 0
   12048:	c8 01       	movw	r24, r16
   1204a:	96 dc       	rcall	.-1748   	; 0x11978 <SS80_is_MSA>
   1204c:	89 2b       	or	r24, r25
   1204e:	19 f1       	breq	.+70     	; 0x12096 <GPIB_SECONDARY_ADDRESS+0x5a>
   12050:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   12054:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   12058:	84 72       	andi	r24, 0x24	; 36
   1205a:	99 27       	eor	r25, r25
   1205c:	89 2b       	or	r24, r25
   1205e:	71 f0       	breq	.+28     	; 0x1207c <GPIB_SECONDARY_ADDRESS+0x40>
   12060:	1f 92       	push	r1
   12062:	cf 93       	push	r28
   12064:	8a e2       	ldi	r24, 0x2A	; 42
   12066:	92 e1       	ldi	r25, 0x12	; 18
   12068:	1f 92       	push	r1
   1206a:	9f 93       	push	r25
   1206c:	8f 93       	push	r24
   1206e:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   12072:	0f 90       	pop	r0
   12074:	0f 90       	pop	r0
   12076:	0f 90       	pop	r0
   12078:	0f 90       	pop	r0
   1207a:	0f 90       	pop	r0
   1207c:	e0 91 6b 18 	lds	r30, 0x186B	; 0x80186b <SS80p>
   12080:	f0 91 6c 18 	lds	r31, 0x186C	; 0x80186c <SS80p+0x1>
   12084:	81 81       	ldd	r24, Z+1	; 0x01
   12086:	90 e0       	ldi	r25, 0x00	; 0
   12088:	0e 94 c2 86 	call	0x10d84	; 0x10d84 <gpib_disable_PPR>
   1208c:	e0 91 6b 18 	lds	r30, 0x186B	; 0x80186b <SS80p>
   12090:	f0 91 6c 18 	lds	r31, 0x186C	; 0x80186c <SS80p+0x1>
   12094:	27 c0       	rjmp	.+78     	; 0x120e4 <GPIB_SECONDARY_ADDRESS+0xa8>
   12096:	c8 01       	movw	r24, r16
   12098:	9c dc       	rcall	.-1736   	; 0x119d2 <AMIGO_is_MSA>
   1209a:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   1209e:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <debuglevel+0x1>
   120a2:	89 2b       	or	r24, r25
   120a4:	21 f1       	breq	.+72     	; 0x120ee <GPIB_SECONDARY_ADDRESS+0xb2>
   120a6:	c9 01       	movw	r24, r18
   120a8:	84 72       	andi	r24, 0x24	; 36
   120aa:	99 27       	eor	r25, r25
   120ac:	89 2b       	or	r24, r25
   120ae:	71 f0       	breq	.+28     	; 0x120cc <GPIB_SECONDARY_ADDRESS+0x90>
   120b0:	1f 92       	push	r1
   120b2:	cf 93       	push	r28
   120b4:	88 e1       	ldi	r24, 0x18	; 24
   120b6:	92 e1       	ldi	r25, 0x12	; 18
   120b8:	1f 92       	push	r1
   120ba:	9f 93       	push	r25
   120bc:	8f 93       	push	r24
   120be:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   120c2:	0f 90       	pop	r0
   120c4:	0f 90       	pop	r0
   120c6:	0f 90       	pop	r0
   120c8:	0f 90       	pop	r0
   120ca:	0f 90       	pop	r0
   120cc:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <AMIGOp>
   120d0:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <AMIGOp+0x1>
   120d4:	81 81       	ldd	r24, Z+1	; 0x01
   120d6:	90 e0       	ldi	r25, 0x00	; 0
   120d8:	0e 94 c2 86 	call	0x10d84	; 0x10d84 <gpib_disable_PPR>
   120dc:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <AMIGOp>
   120e0:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <AMIGOp+0x1>
   120e4:	63 a1       	ldd	r22, Z+35	; 0x23
   120e6:	74 a1       	ldd	r23, Z+36	; 0x24
   120e8:	8c 2f       	mov	r24, r28
   120ea:	13 de       	rcall	.-986    	; 0x11d12 <Send_Identify>
   120ec:	20 c0       	rjmp	.+64     	; 0x1212e <GPIB_SECONDARY_ADDRESS+0xf2>
   120ee:	c9 01       	movw	r24, r18
   120f0:	84 72       	andi	r24, 0x24	; 36
   120f2:	99 27       	eor	r25, r25
   120f4:	00 97       	sbiw	r24, 0x00	; 0
   120f6:	d9 f0       	breq	.+54     	; 0x1212e <GPIB_SECONDARY_ADDRESS+0xf2>
   120f8:	80 91 ea 1d 	lds	r24, 0x1DEA	; 0x801dea <talking>
   120fc:	1f 92       	push	r1
   120fe:	8f 93       	push	r24
   12100:	80 91 ec 1d 	lds	r24, 0x1DEC	; 0x801dec <listening>
   12104:	1f 92       	push	r1
   12106:	8f 93       	push	r24
   12108:	1f 92       	push	r1
   1210a:	cf 93       	push	r28
   1210c:	82 ef       	ldi	r24, 0xF2	; 242
   1210e:	91 e1       	ldi	r25, 0x11	; 17
   12110:	1f 92       	push	r1
   12112:	9f 93       	push	r25
   12114:	8f 93       	push	r24
   12116:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1211a:	8d b7       	in	r24, 0x3d	; 61
   1211c:	9e b7       	in	r25, 0x3e	; 62
   1211e:	09 96       	adiw	r24, 0x09	; 9
   12120:	0f b6       	in	r0, 0x3f	; 63
   12122:	f8 94       	cli
   12124:	9e bf       	out	0x3e, r25	; 62
   12126:	0f be       	out	0x3f, r0	; 63
   12128:	8d bf       	out	0x3d, r24	; 61
   1212a:	80 e0       	ldi	r24, 0x00	; 0
   1212c:	90 e0       	ldi	r25, 0x00	; 0
   1212e:	cf 91       	pop	r28
   12130:	1f 91       	pop	r17
   12132:	0f 91       	pop	r16
   12134:	08 95       	ret

00012136 <listen_cleanup>:
   12136:	60 91 e6 1d 	lds	r22, 0x1DE6	; 0x801de6 <listening_last>
   1213a:	66 23       	and	r22, r22
   1213c:	e1 f0       	breq	.+56     	; 0x12176 <listen_cleanup+0x40>
   1213e:	70 e0       	ldi	r23, 0x00	; 0
   12140:	40 e2       	ldi	r20, 0x20	; 32
   12142:	50 e0       	ldi	r21, 0x00	; 0
   12144:	84 e0       	ldi	r24, 0x04	; 4
   12146:	90 e0       	ldi	r25, 0x00	; 0
   12148:	89 d2       	rcall	.+1298   	; 0x1265c <find_device>
   1214a:	01 96       	adiw	r24, 0x01	; 1
   1214c:	a1 f0       	breq	.+40     	; 0x12176 <listen_cleanup+0x40>
   1214e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   12152:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   12156:	84 72       	andi	r24, 0x24	; 36
   12158:	99 27       	eor	r25, r25
   1215a:	89 2b       	or	r24, r25
   1215c:	51 f0       	breq	.+20     	; 0x12172 <listen_cleanup+0x3c>
   1215e:	81 ee       	ldi	r24, 0xE1	; 225
   12160:	91 e1       	ldi	r25, 0x11	; 17
   12162:	1f 92       	push	r1
   12164:	9f 93       	push	r25
   12166:	8f 93       	push	r24
   12168:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1216c:	0f 90       	pop	r0
   1216e:	0f 90       	pop	r0
   12170:	0f 90       	pop	r0
   12172:	0c 94 c0 c0 	jmp	0x18180	; 0x18180 <printer_close>
   12176:	08 95       	ret

00012178 <GPIB_LISTEN>:
   12178:	0f 93       	push	r16
   1217a:	1f 93       	push	r17
   1217c:	cf 93       	push	r28
   1217e:	c8 2f       	mov	r28, r24
   12180:	80 91 ec 1d 	lds	r24, 0x1DEC	; 0x801dec <listening>
   12184:	80 93 e6 1d 	sts	0x1DE6, r24	; 0x801de6 <listening_last>
   12188:	c0 93 ec 1d 	sts	0x1DEC, r28	; 0x801dec <listening>
   1218c:	d4 df       	rcall	.-88     	; 0x12136 <listen_cleanup>
   1218e:	cf 33       	cpi	r28, 0x3F	; 63
   12190:	19 f5       	brne	.+70     	; 0x121d8 <GPIB_LISTEN+0x60>
   12192:	10 92 ec 1d 	sts	0x1DEC, r1	; 0x801dec <listening>
   12196:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1219a:	82 ff       	sbrs	r24, 2
   1219c:	75 c0       	rjmp	.+234    	; 0x12288 <GPIB_LISTEN+0x110>
   1219e:	8a ed       	ldi	r24, 0xDA	; 218
   121a0:	92 e1       	ldi	r25, 0x12	; 18
   121a2:	1f 92       	push	r1
   121a4:	9f 93       	push	r25
   121a6:	8f 93       	push	r24
   121a8:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   121ac:	0f 90       	pop	r0
   121ae:	0f 90       	pop	r0
   121b0:	0f 90       	pop	r0
   121b2:	80 91 e4 1b 	lds	r24, 0x1BE4	; 0x801be4 <lastcmd>
   121b6:	90 91 e5 1b 	lds	r25, 0x1BE5	; 0x801be5 <lastcmd+0x1>
   121ba:	8f 35       	cpi	r24, 0x5F	; 95
   121bc:	91 05       	cpc	r25, r1
   121be:	09 f0       	breq	.+2      	; 0x121c2 <GPIB_LISTEN+0x4a>
   121c0:	63 c0       	rjmp	.+198    	; 0x12288 <GPIB_LISTEN+0x110>
   121c2:	88 ed       	ldi	r24, 0xD8	; 216
   121c4:	92 e1       	ldi	r25, 0x12	; 18
   121c6:	1f 92       	push	r1
   121c8:	9f 93       	push	r25
   121ca:	8f 93       	push	r24
   121cc:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   121d0:	0f 90       	pop	r0
   121d2:	0f 90       	pop	r0
   121d4:	0f 90       	pop	r0
   121d6:	58 c0       	rjmp	.+176    	; 0x12288 <GPIB_LISTEN+0x110>
   121d8:	0c 2f       	mov	r16, r28
   121da:	10 e0       	ldi	r17, 0x00	; 0
   121dc:	c8 01       	movw	r24, r16
   121de:	db db       	rcall	.-2122   	; 0x11996 <AMIGO_is_MLA>
   121e0:	89 2b       	or	r24, r25
   121e2:	71 f0       	breq	.+28     	; 0x12200 <GPIB_LISTEN+0x88>
   121e4:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   121e8:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   121ec:	84 72       	andi	r24, 0x24	; 36
   121ee:	99 27       	eor	r25, r25
   121f0:	89 2b       	or	r24, r25
   121f2:	09 f4       	brne	.+2      	; 0x121f6 <GPIB_LISTEN+0x7e>
   121f4:	49 c0       	rjmp	.+146    	; 0x12288 <GPIB_LISTEN+0x110>
   121f6:	1f 92       	push	r1
   121f8:	cf 93       	push	r28
   121fa:	86 ec       	ldi	r24, 0xC6	; 198
   121fc:	92 e1       	ldi	r25, 0x12	; 18
   121fe:	3a c0       	rjmp	.+116    	; 0x12274 <GPIB_LISTEN+0xfc>
   12200:	c8 01       	movw	r24, r16
   12202:	9c db       	rcall	.-2248   	; 0x1193c <SS80_is_MLA>
   12204:	89 2b       	or	r24, r25
   12206:	69 f0       	breq	.+26     	; 0x12222 <GPIB_LISTEN+0xaa>
   12208:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1220c:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   12210:	84 72       	andi	r24, 0x24	; 36
   12212:	99 27       	eor	r25, r25
   12214:	89 2b       	or	r24, r25
   12216:	c1 f1       	breq	.+112    	; 0x12288 <GPIB_LISTEN+0x110>
   12218:	1f 92       	push	r1
   1221a:	cf 93       	push	r28
   1221c:	85 eb       	ldi	r24, 0xB5	; 181
   1221e:	92 e1       	ldi	r25, 0x12	; 18
   12220:	29 c0       	rjmp	.+82     	; 0x12274 <GPIB_LISTEN+0xfc>
   12222:	c8 01       	movw	r24, r16
   12224:	e5 db       	rcall	.-2102   	; 0x119f0 <PRINTER_is_MLA>
   12226:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   1222a:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <debuglevel+0x1>
   1222e:	89 2b       	or	r24, r25
   12230:	d9 f0       	breq	.+54     	; 0x12268 <GPIB_LISTEN+0xf0>
   12232:	24 72       	andi	r18, 0x24	; 36
   12234:	33 27       	eor	r19, r19
   12236:	23 2b       	or	r18, r19
   12238:	71 f0       	breq	.+28     	; 0x12256 <GPIB_LISTEN+0xde>
   1223a:	1f 92       	push	r1
   1223c:	cf 93       	push	r28
   1223e:	81 ea       	ldi	r24, 0xA1	; 161
   12240:	92 e1       	ldi	r25, 0x12	; 18
   12242:	1f 92       	push	r1
   12244:	9f 93       	push	r25
   12246:	8f 93       	push	r24
   12248:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1224c:	0f 90       	pop	r0
   1224e:	0f 90       	pop	r0
   12250:	0f 90       	pop	r0
   12252:	0f 90       	pop	r0
   12254:	0f 90       	pop	r0
   12256:	80 91 ea 1d 	lds	r24, 0x1DEA	; 0x801dea <talking>
   1225a:	8f 35       	cpi	r24, 0x5F	; 95
   1225c:	a9 f0       	breq	.+42     	; 0x12288 <GPIB_LISTEN+0x110>
   1225e:	80 e0       	ldi	r24, 0x00	; 0
   12260:	90 e0       	ldi	r25, 0x00	; 0
   12262:	0e 94 0d c1 	call	0x1821a	; 0x1821a <printer_open>
   12266:	10 c0       	rjmp	.+32     	; 0x12288 <GPIB_LISTEN+0x110>
   12268:	22 ff       	sbrs	r18, 2
   1226a:	0e c0       	rjmp	.+28     	; 0x12288 <GPIB_LISTEN+0x110>
   1226c:	1f 92       	push	r1
   1226e:	cf 93       	push	r28
   12270:	85 e9       	ldi	r24, 0x95	; 149
   12272:	92 e1       	ldi	r25, 0x12	; 18
   12274:	1f 92       	push	r1
   12276:	9f 93       	push	r25
   12278:	8f 93       	push	r24
   1227a:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1227e:	0f 90       	pop	r0
   12280:	0f 90       	pop	r0
   12282:	0f 90       	pop	r0
   12284:	0f 90       	pop	r0
   12286:	0f 90       	pop	r0
   12288:	80 e0       	ldi	r24, 0x00	; 0
   1228a:	90 e0       	ldi	r25, 0x00	; 0
   1228c:	cf 91       	pop	r28
   1228e:	1f 91       	pop	r17
   12290:	0f 91       	pop	r16
   12292:	08 95       	ret

00012294 <gpib_task>:
   12294:	cf 93       	push	r28
   12296:	df 93       	push	r29
   12298:	0e 94 69 86 	call	0x10cd2	; 0x10cd2 <gpib_state_init>
   1229c:	c7 db       	rcall	.-2162   	; 0x11a2c <gpib_init_devices>
   1229e:	10 92 62 18 	sts	0x1862, r1	; 0x801862 <gpib_log_fp+0x1>
   122a2:	10 92 61 18 	sts	0x1861, r1	; 0x801861 <gpib_log_fp>
   122a6:	80 e0       	ldi	r24, 0x00	; 0
   122a8:	90 e0       	ldi	r25, 0x00	; 0
   122aa:	03 d9       	rcall	.-3578   	; 0x114b2 <gpib_read_byte>
   122ac:	ec 01       	movw	r28, r24
   122ae:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   122b2:	83 ff       	sbrs	r24, 3
   122b4:	02 c0       	rjmp	.+4      	; 0x122ba <gpib_task+0x26>
   122b6:	ce 01       	movw	r24, r28
   122b8:	d2 d9       	rcall	.-3164   	; 0x1165e <gpib_decode>
   122ba:	ce 01       	movw	r24, r28
   122bc:	4c dc       	rcall	.-1896   	; 0x11b56 <gpib_error_test>
   122be:	9c 01       	movw	r18, r24
   122c0:	23 70       	andi	r18, 0x03	; 3
   122c2:	33 27       	eor	r19, r19
   122c4:	23 2b       	or	r18, r19
   122c6:	09 f0       	breq	.+2      	; 0x122ca <gpib_task+0x36>
   122c8:	43 c0       	rjmp	.+134    	; 0x12350 <gpib_task+0xbc>
   122ca:	89 2b       	or	r24, r25
   122cc:	61 f7       	brne	.-40     	; 0x122a6 <gpib_task+0x12>
   122ce:	d2 ff       	sbrs	r29, 2
   122d0:	26 c0       	rjmp	.+76     	; 0x1231e <gpib_task+0x8a>
   122d2:	8c 2f       	mov	r24, r28
   122d4:	8f 77       	andi	r24, 0x7F	; 127
   122d6:	80 32       	cpi	r24, 0x20	; 32
   122d8:	10 f4       	brcc	.+4      	; 0x122de <gpib_task+0x4a>
   122da:	64 dd       	rcall	.-1336   	; 0x11da4 <GPIB>
   122dc:	e4 cf       	rjmp	.-56     	; 0x122a6 <gpib_task+0x12>
   122de:	90 ee       	ldi	r25, 0xE0	; 224
   122e0:	98 0f       	add	r25, r24
   122e2:	90 32       	cpi	r25, 0x20	; 32
   122e4:	10 f4       	brcc	.+4      	; 0x122ea <gpib_task+0x56>
   122e6:	48 df       	rcall	.-368    	; 0x12178 <GPIB_LISTEN>
   122e8:	de cf       	rjmp	.-68     	; 0x122a6 <gpib_task+0x12>
   122ea:	90 ec       	ldi	r25, 0xC0	; 192
   122ec:	98 0f       	add	r25, r24
   122ee:	90 32       	cpi	r25, 0x20	; 32
   122f0:	10 f4       	brcc	.+4      	; 0x122f6 <gpib_task+0x62>
   122f2:	0f de       	rcall	.-994    	; 0x11f12 <GPIB_TALK>
   122f4:	d8 cf       	rjmp	.-80     	; 0x122a6 <gpib_task+0x12>
   122f6:	90 91 ec 1d 	lds	r25, 0x1DEC	; 0x801dec <listening>
   122fa:	99 23       	and	r25, r25
   122fc:	59 f0       	breq	.+22     	; 0x12314 <gpib_task+0x80>
   122fe:	20 91 e4 1b 	lds	r18, 0x1BE4	; 0x801be4 <lastcmd>
   12302:	30 91 e5 1b 	lds	r19, 0x1BE5	; 0x801be5 <lastcmd+0x1>
   12306:	2f 35       	cpi	r18, 0x5F	; 95
   12308:	31 05       	cpc	r19, r1
   1230a:	21 f4       	brne	.+8      	; 0x12314 <gpib_task+0x80>
   1230c:	10 92 eb 1d 	sts	0x1DEB, r1	; 0x801deb <secondary>
   12310:	95 de       	rcall	.-726    	; 0x1203c <GPIB_SECONDARY_ADDRESS>
   12312:	c9 cf       	rjmp	.-110    	; 0x122a6 <gpib_task+0x12>
   12314:	80 93 eb 1d 	sts	0x1DEB, r24	; 0x801deb <secondary>
   12318:	60 e0       	ldi	r22, 0x00	; 0
   1231a:	90 e0       	ldi	r25, 0x00	; 0
   1231c:	12 c0       	rjmp	.+36     	; 0x12342 <gpib_task+0xae>
   1231e:	80 91 ec 1d 	lds	r24, 0x1DEC	; 0x801dec <listening>
   12322:	90 e0       	ldi	r25, 0x00	; 0
   12324:	65 db       	rcall	.-2358   	; 0x119f0 <PRINTER_is_MLA>
   12326:	89 2b       	or	r24, r25
   12328:	29 f0       	breq	.+10     	; 0x12334 <gpib_task+0xa0>
   1232a:	ce 01       	movw	r24, r28
   1232c:	99 27       	eor	r25, r25
   1232e:	0e 94 ae c1 	call	0x1835c	; 0x1835c <printer_buffer>
   12332:	b9 cf       	rjmp	.-142    	; 0x122a6 <gpib_task+0x12>
   12334:	80 91 eb 1d 	lds	r24, 0x1DEB	; 0x801deb <secondary>
   12338:	88 23       	and	r24, r24
   1233a:	09 f4       	brne	.+2      	; 0x1233e <gpib_task+0xaa>
   1233c:	b4 cf       	rjmp	.-152    	; 0x122a6 <gpib_task+0x12>
   1233e:	61 e0       	ldi	r22, 0x01	; 1
   12340:	ce 01       	movw	r24, r28
   12342:	93 dc       	rcall	.-1754   	; 0x11c6a <GPIB_COMMANDS>
   12344:	08 dc       	rcall	.-2032   	; 0x11b56 <gpib_error_test>
   12346:	83 70       	andi	r24, 0x03	; 3
   12348:	99 27       	eor	r25, r25
   1234a:	89 2b       	or	r24, r25
   1234c:	09 f4       	brne	.+2      	; 0x12350 <gpib_task+0xbc>
   1234e:	ab cf       	rjmp	.-170    	; 0x122a6 <gpib_task+0x12>
   12350:	df 91       	pop	r29
   12352:	cf 91       	pop	r28
   12354:	08 95       	ret

00012356 <talk_cleanup>:
   12356:	08 95       	ret

00012358 <gpib_help>:
///  Help Menu for User invoked GPIB functions and tasks
///  See: int gpib_tests(char *str)
/// @return  void

void gpib_help(int full)
{
   12358:	cf 93       	push	r28
   1235a:	df 93       	push	r29
   1235c:	ec 01       	movw	r28, r24
    printf("gpib help\n");
   1235e:	8d e4       	ldi	r24, 0x4D	; 77
   12360:	95 e1       	ldi	r25, 0x15	; 21
   12362:	1f 92       	push	r1
   12364:	9f 93       	push	r25
   12366:	8f 93       	push	r24
   12368:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    if(full)
   1236c:	0f 90       	pop	r0
   1236e:	0f 90       	pop	r0
   12370:	0f 90       	pop	r0
   12372:	cd 2b       	or	r28, r29
   12374:	51 f0       	breq	.+20     	; 0x1238a <gpib_help+0x32>
    {
        printf("gpib prefix is optional\n"
   12376:	83 e9       	ldi	r24, 0x93	; 147
   12378:	94 e1       	ldi	r25, 0x14	; 20
   1237a:	1f 92       	push	r1
   1237c:	9f 93       	push	r25
   1237e:	8f 93       	push	r24
   12380:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   12384:	0f 90       	pop	r0
   12386:	0f 90       	pop	r0
   12388:	0f 90       	pop	r0
            "gpib ppr_set XX\n"
#endif
            "\n"
            );
    }
}
   1238a:	df 91       	pop	r29
   1238c:	cf 91       	pop	r28
   1238e:	08 95       	ret

00012390 <gpib_tests>:

/// @brief GPIB user tests
///  User invoked GPIB functions and tasks
/// @return  1 matched token, 0 if not
int gpib_tests(int argc, char * argv[])
{
   12390:	ef 92       	push	r14
   12392:	ff 92       	push	r15
   12394:	0f 93       	push	r16
   12396:	1f 93       	push	r17
   12398:	cf 93       	push	r28
   1239a:	df 93       	push	r29
   1239c:	8c 01       	movw	r16, r24

    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   1239e:	fb 01       	movw	r30, r22
   123a0:	80 81       	ld	r24, Z
   123a2:	91 81       	ldd	r25, Z+1	; 0x01

    // skip optional gpib key word
    if( !ptr || !MATCH(ptr,"gpib") )
   123a4:	00 97       	sbiw	r24, 0x00	; 0
   123a6:	19 f4       	brne	.+6      	; 0x123ae <gpib_tests+0x1e>
        return(0);
   123a8:	80 e0       	ldi	r24, 0x00	; 0
   123aa:	90 e0       	ldi	r25, 0x00	; 0
   123ac:	aa c0       	rjmp	.+340    	; 0x12502 <gpib_tests+0x172>
   123ae:	7b 01       	movw	r14, r22

    ind = 0;
    ptr = argv[ind++];

    // skip optional gpib key word
    if( !ptr || !MATCH(ptr,"gpib") )
   123b0:	67 e2       	ldi	r22, 0x27	; 39
   123b2:	7d e0       	ldi	r23, 0x0D	; 13
   123b4:	0e 94 30 33 	call	0x6660	; 0x6660 <MATCH>
   123b8:	89 2b       	or	r24, r25
   123ba:	b1 f3       	breq	.-20     	; 0x123a8 <gpib_tests+0x18>
        return(0);

    ptr = argv[ind++];
   123bc:	f7 01       	movw	r30, r14
   123be:	c2 81       	ldd	r28, Z+2	; 0x02
   123c0:	d3 81       	ldd	r29, Z+3	; 0x03
    if ( !ptr || MATCH(ptr,"help") )
   123c2:	20 97       	sbiw	r28, 0x00	; 0
   123c4:	21 f4       	brne	.+8      	; 0x123ce <gpib_tests+0x3e>
    {
        gpib_help(1);
   123c6:	81 e0       	ldi	r24, 0x01	; 1
   123c8:	90 e0       	ldi	r25, 0x00	; 0
   123ca:	c6 df       	rcall	.-116    	; 0x12358 <gpib_help>
   123cc:	98 c0       	rjmp	.+304    	; 0x124fe <gpib_tests+0x16e>
    // skip optional gpib key word
    if( !ptr || !MATCH(ptr,"gpib") )
        return(0);

    ptr = argv[ind++];
    if ( !ptr || MATCH(ptr,"help") )
   123ce:	67 ef       	ldi	r22, 0xF7	; 247
   123d0:	75 e1       	ldi	r23, 0x15	; 21
   123d2:	ce 01       	movw	r24, r28
   123d4:	0e 94 30 33 	call	0x6660	; 0x6660 <MATCH>
   123d8:	89 2b       	or	r24, r25
   123da:	a9 f7       	brne	.-22     	; 0x123c6 <gpib_tests+0x36>
    {
        gpib_help(1);
        return(1);
    }

    if (MATCHARGS(ptr,"addresses",(ind+0),argc))
   123dc:	98 01       	movw	r18, r16
   123de:	42 e0       	ldi	r20, 0x02	; 2
   123e0:	50 e0       	ldi	r21, 0x00	; 0
   123e2:	6c e2       	ldi	r22, 0x2C	; 44
   123e4:	7d e0       	ldi	r23, 0x0D	; 13
   123e6:	ce 01       	movw	r24, r28
   123e8:	0e 94 44 33 	call	0x6688	; 0x6688 <MATCHARGS>
   123ec:	89 2b       	or	r24, r25
   123ee:	19 f0       	breq	.+6      	; 0x123f6 <gpib_tests+0x66>
    {
        display_Addresses();
   123f0:	0e 94 f9 a0 	call	0x141f2	; 0x141f2 <display_Addresses>
   123f4:	84 c0       	rjmp	.+264    	; 0x124fe <gpib_tests+0x16e>
        return(1);
    }

    if (MATCHARGS(ptr,"config",(ind+0),argc))
   123f6:	98 01       	movw	r18, r16
   123f8:	42 e0       	ldi	r20, 0x02	; 2
   123fa:	50 e0       	ldi	r21, 0x00	; 0
   123fc:	66 e3       	ldi	r22, 0x36	; 54
   123fe:	7d e0       	ldi	r23, 0x0D	; 13
   12400:	ce 01       	movw	r24, r28
   12402:	0e 94 44 33 	call	0x6688	; 0x6688 <MATCHARGS>
   12406:	89 2b       	or	r24, r25
   12408:	19 f0       	breq	.+6      	; 0x12410 <gpib_tests+0x80>
    {
        display_Config();
   1240a:	0e 94 f4 a1 	call	0x143e8	; 0x143e8 <display_Config>
   1240e:	77 c0       	rjmp	.+238    	; 0x124fe <gpib_tests+0x16e>
        return(1);
    }

    if (MATCHARGS(ptr,"debug", (ind+1) ,argc))
   12410:	98 01       	movw	r18, r16
   12412:	43 e0       	ldi	r20, 0x03	; 3
   12414:	50 e0       	ldi	r21, 0x00	; 0
   12416:	6d e3       	ldi	r22, 0x3D	; 61
   12418:	7d e0       	ldi	r23, 0x0D	; 13
   1241a:	ce 01       	movw	r24, r28
   1241c:	0e 94 44 33 	call	0x6688	; 0x6688 <MATCHARGS>
   12420:	89 2b       	or	r24, r25
   12422:	c1 f0       	breq	.+48     	; 0x12454 <gpib_tests+0xc4>
    {
        debuglevel = get_value(argv[ind]);
   12424:	f7 01       	movw	r30, r14
   12426:	84 81       	ldd	r24, Z+4	; 0x04
   12428:	95 81       	ldd	r25, Z+5	; 0x05
   1242a:	0e 94 72 34 	call	0x68e4	; 0x68e4 <get_value>
   1242e:	60 93 bd 01 	sts	0x01BD, r22	; 0x8001bd <debuglevel>
   12432:	70 93 be 01 	sts	0x01BE, r23	; 0x8001be <debuglevel+0x1>
        printf("debug=%04XH\n", debuglevel);
   12436:	7f 93       	push	r23
   12438:	6f 93       	push	r22
   1243a:	86 e8       	ldi	r24, 0x86	; 134
   1243c:	94 e1       	ldi	r25, 0x14	; 20
   1243e:	1f 92       	push	r1
   12440:	9f 93       	push	r25
   12442:	8f 93       	push	r24
   12444:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
        return(1);
   12448:	0f 90       	pop	r0
   1244a:	0f 90       	pop	r0
   1244c:	0f 90       	pop	r0
   1244e:	0f 90       	pop	r0
   12450:	0f 90       	pop	r0
   12452:	55 c0       	rjmp	.+170    	; 0x124fe <gpib_tests+0x16e>
    }

    if (MATCHARGS(ptr,"elapsed_reset",(ind+0),argc))
   12454:	98 01       	movw	r18, r16
   12456:	42 e0       	ldi	r20, 0x02	; 2
   12458:	50 e0       	ldi	r21, 0x00	; 0
   1245a:	63 e4       	ldi	r22, 0x43	; 67
   1245c:	7d e0       	ldi	r23, 0x0D	; 13
   1245e:	ce 01       	movw	r24, r28
   12460:	0e 94 44 33 	call	0x6688	; 0x6688 <MATCHARGS>
   12464:	89 2b       	or	r24, r25
   12466:	19 f0       	breq	.+6      	; 0x1246e <gpib_tests+0xde>
    {
        gpib_timer_elapsed_begin();
   12468:	0e 94 d9 85 	call	0x10bb2	; 0x10bb2 <gpib_timer_elapsed_begin>
   1246c:	48 c0       	rjmp	.+144    	; 0x124fe <gpib_tests+0x16e>
        return(1);
    }

    if (MATCHARGS(ptr,"elapsed",(ind+0),argc))
   1246e:	98 01       	movw	r18, r16
   12470:	42 e0       	ldi	r20, 0x02	; 2
   12472:	50 e0       	ldi	r21, 0x00	; 0
   12474:	61 e5       	ldi	r22, 0x51	; 81
   12476:	7d e0       	ldi	r23, 0x0D	; 13
   12478:	ce 01       	movw	r24, r28
   1247a:	0e 94 44 33 	call	0x6688	; 0x6688 <MATCHARGS>
   1247e:	89 2b       	or	r24, r25
   12480:	29 f0       	breq	.+10     	; 0x1248c <gpib_tests+0xfc>
    {
        gpib_timer_elapsed_end("gpib elapsed:");
   12482:	89 e5       	ldi	r24, 0x59	; 89
   12484:	9d e0       	ldi	r25, 0x0D	; 13
   12486:	0e 94 eb 85 	call	0x10bd6	; 0x10bd6 <gpib_timer_elapsed_end>
   1248a:	39 c0       	rjmp	.+114    	; 0x124fe <gpib_tests+0x16e>
        return(1);
    }

    if ( MATCHARGS(ptr, "ifc",(ind+0),argc))
   1248c:	98 01       	movw	r18, r16
   1248e:	42 e0       	ldi	r20, 0x02	; 2
   12490:	50 e0       	ldi	r21, 0x00	; 0
   12492:	67 e6       	ldi	r22, 0x67	; 103
   12494:	7d e0       	ldi	r23, 0x0D	; 13
   12496:	ce 01       	movw	r24, r28
   12498:	0e 94 44 33 	call	0x6688	; 0x6688 <MATCHARGS>
   1249c:	89 2b       	or	r24, r25
   1249e:	19 f0       	breq	.+6      	; 0x124a6 <gpib_tests+0x116>
    {
        gpib_assert_ifc();
   124a0:	0e 94 f3 86 	call	0x10de6	; 0x10de6 <gpib_assert_ifc>
   124a4:	2c c0       	rjmp	.+88     	; 0x124fe <gpib_tests+0x16e>
        return(1);

    }

    if (MATCHARGS(ptr,"task",(ind+0),argc))
   124a6:	98 01       	movw	r18, r16
   124a8:	42 e0       	ldi	r20, 0x02	; 2
   124aa:	50 e0       	ldi	r21, 0x00	; 0
   124ac:	6b e6       	ldi	r22, 0x6B	; 107
   124ae:	7d e0       	ldi	r23, 0x0D	; 13
   124b0:	ce 01       	movw	r24, r28
   124b2:	0e 94 44 33 	call	0x6688	; 0x6688 <MATCHARGS>
   124b6:	89 2b       	or	r24, r25
    {
        gpib_task();
   124b8:	11 f0       	breq	.+4      	; 0x124be <gpib_tests+0x12e>
   124ba:	ec de       	rcall	.-552    	; 0x12294 <gpib_task>
   124bc:	20 c0       	rjmp	.+64     	; 0x124fe <gpib_tests+0x16e>
        return(1);
    }

    if (MATCHARGS(ptr,"trace", (ind+1) ,argc))
   124be:	98 01       	movw	r18, r16
   124c0:	43 e0       	ldi	r20, 0x03	; 3
   124c2:	50 e0       	ldi	r21, 0x00	; 0
   124c4:	60 e7       	ldi	r22, 0x70	; 112
   124c6:	7d e0       	ldi	r23, 0x0D	; 13
   124c8:	ce 01       	movw	r24, r28
   124ca:	0e 94 44 33 	call	0x6688	; 0x6688 <MATCHARGS>
   124ce:	89 2b       	or	r24, r25
   124d0:	09 f4       	brne	.+2      	; 0x124d4 <gpib_tests+0x144>
   124d2:	6a cf       	rjmp	.-300    	; 0x123a8 <gpib_tests+0x18>
    {
        int detail = 0;
        if(argv[ind+1] && MATCH(argv[ind+1],"BUS"))
   124d4:	f7 01       	movw	r30, r14
   124d6:	86 81       	ldd	r24, Z+6	; 0x06
   124d8:	97 81       	ldd	r25, Z+7	; 0x07
   124da:	00 97       	sbiw	r24, 0x00	; 0
   124dc:	51 f0       	breq	.+20     	; 0x124f2 <gpib_tests+0x162>
   124de:	66 e7       	ldi	r22, 0x76	; 118
   124e0:	7d e0       	ldi	r23, 0x0D	; 13
   124e2:	0e 94 30 33 	call	0x6660	; 0x6660 <MATCH>
        return(1);
    }

    if (MATCHARGS(ptr,"trace", (ind+1) ,argc))
    {
        int detail = 0;
   124e6:	61 e0       	ldi	r22, 0x01	; 1
   124e8:	70 e0       	ldi	r23, 0x00	; 0
   124ea:	89 2b       	or	r24, r25
   124ec:	21 f4       	brne	.+8      	; 0x124f6 <gpib_tests+0x166>
   124ee:	60 e0       	ldi	r22, 0x00	; 0
   124f0:	02 c0       	rjmp	.+4      	; 0x124f6 <gpib_tests+0x166>
   124f2:	60 e0       	ldi	r22, 0x00	; 0
   124f4:	70 e0       	ldi	r23, 0x00	; 0
        if(argv[ind+1] && MATCH(argv[ind+1],"BUS"))
            detail = 1;
        gpib_trace_task(argv[ind], detail);
   124f6:	f7 01       	movw	r30, r14
   124f8:	84 81       	ldd	r24, Z+4	; 0x04
   124fa:	95 81       	ldd	r25, Z+5	; 0x05
   124fc:	9f da       	rcall	.-2754   	; 0x11a3c <gpib_trace_task>
        return(1);
   124fe:	81 e0       	ldi	r24, 0x01	; 1
   12500:	90 e0       	ldi	r25, 0x00	; 0

	} // port write 
#endif  // #ifdef GPIB_EXTENDED_TESTS

    return(0);
}
   12502:	cd b7       	in	r28, 0x3d	; 61
   12504:	de b7       	in	r29, 0x3e	; 62
   12506:	e6 e0       	ldi	r30, 0x06	; 6
   12508:	0c 94 08 e6 	jmp	0x1cc10	; 0x1cc10 <__epilogue_restores__+0x18>

0001250c <V2B_MSB>:
   1250c:	0f 93       	push	r16
   1250e:	1f 93       	push	r17
   12510:	da 01       	movw	r26, r20
   12512:	11 97       	sbiw	r26, 0x01	; 1
   12514:	b7 fd       	sbrc	r27, 7
   12516:	0b c0       	rjmp	.+22     	; 0x1252e <V2B_MSB+0x22>
   12518:	fd 01       	movw	r30, r26
   1251a:	e6 0f       	add	r30, r22
   1251c:	f7 1f       	adc	r31, r23
   1251e:	e8 0f       	add	r30, r24
   12520:	f9 1f       	adc	r31, r25
   12522:	00 83       	st	Z, r16
   12524:	01 2f       	mov	r16, r17
   12526:	12 2f       	mov	r17, r18
   12528:	23 2f       	mov	r18, r19
   1252a:	33 27       	eor	r19, r19
   1252c:	f2 cf       	rjmp	.-28     	; 0x12512 <V2B_MSB+0x6>
   1252e:	1f 91       	pop	r17
   12530:	0f 91       	pop	r16
   12532:	08 95       	ret

00012534 <V2B_LSB>:
   12534:	0f 93       	push	r16
   12536:	1f 93       	push	r17
   12538:	fc 01       	movw	r30, r24
   1253a:	e6 0f       	add	r30, r22
   1253c:	f7 1f       	adc	r31, r23
   1253e:	bf 01       	movw	r22, r30
   12540:	cf 01       	movw	r24, r30
   12542:	86 1b       	sub	r24, r22
   12544:	97 0b       	sbc	r25, r23
   12546:	84 17       	cp	r24, r20
   12548:	95 07       	cpc	r25, r21
   1254a:	34 f4       	brge	.+12     	; 0x12558 <V2B_LSB+0x24>
   1254c:	01 93       	st	Z+, r16
   1254e:	01 2f       	mov	r16, r17
   12550:	12 2f       	mov	r17, r18
   12552:	23 2f       	mov	r18, r19
   12554:	33 27       	eor	r19, r19
   12556:	f4 cf       	rjmp	.-24     	; 0x12540 <V2B_LSB+0xc>
   12558:	1f 91       	pop	r17
   1255a:	0f 91       	pop	r16
   1255c:	08 95       	ret

0001255e <B2V_MSB>:
   1255e:	cf 92       	push	r12
   12560:	df 92       	push	r13
   12562:	ef 92       	push	r14
   12564:	ff 92       	push	r15
   12566:	fc 01       	movw	r30, r24
   12568:	e6 0f       	add	r30, r22
   1256a:	f7 1f       	adc	r31, r23
   1256c:	60 e0       	ldi	r22, 0x00	; 0
   1256e:	70 e0       	ldi	r23, 0x00	; 0
   12570:	cb 01       	movw	r24, r22
   12572:	df 01       	movw	r26, r30
   12574:	9f 01       	movw	r18, r30
   12576:	2a 1b       	sub	r18, r26
   12578:	3b 0b       	sbc	r19, r27
   1257a:	24 17       	cp	r18, r20
   1257c:	35 07       	cpc	r19, r21
   1257e:	4c f4       	brge	.+18     	; 0x12592 <B2V_MSB+0x34>
   12580:	cc 24       	eor	r12, r12
   12582:	d6 2e       	mov	r13, r22
   12584:	e7 2e       	mov	r14, r23
   12586:	f8 2e       	mov	r15, r24
   12588:	21 91       	ld	r18, Z+
   1258a:	c7 01       	movw	r24, r14
   1258c:	b6 01       	movw	r22, r12
   1258e:	62 2b       	or	r22, r18
   12590:	f1 cf       	rjmp	.-30     	; 0x12574 <B2V_MSB+0x16>
   12592:	ff 90       	pop	r15
   12594:	ef 90       	pop	r14
   12596:	df 90       	pop	r13
   12598:	cf 90       	pop	r12
   1259a:	08 95       	ret

0001259c <B2V_LSB>:
   1259c:	cf 92       	push	r12
   1259e:	df 92       	push	r13
   125a0:	ef 92       	push	r14
   125a2:	ff 92       	push	r15
   125a4:	9c 01       	movw	r18, r24
   125a6:	db 01       	movw	r26, r22
   125a8:	60 e0       	ldi	r22, 0x00	; 0
   125aa:	70 e0       	ldi	r23, 0x00	; 0
   125ac:	cb 01       	movw	r24, r22
   125ae:	41 50       	subi	r20, 0x01	; 1
   125b0:	51 09       	sbc	r21, r1
   125b2:	57 fd       	sbrc	r21, 7
   125b4:	0e c0       	rjmp	.+28     	; 0x125d2 <B2V_LSB+0x36>
   125b6:	cc 24       	eor	r12, r12
   125b8:	d6 2e       	mov	r13, r22
   125ba:	e7 2e       	mov	r14, r23
   125bc:	f8 2e       	mov	r15, r24
   125be:	fa 01       	movw	r30, r20
   125c0:	ea 0f       	add	r30, r26
   125c2:	fb 1f       	adc	r31, r27
   125c4:	e2 0f       	add	r30, r18
   125c6:	f3 1f       	adc	r31, r19
   125c8:	e0 81       	ld	r30, Z
   125ca:	c7 01       	movw	r24, r14
   125cc:	b6 01       	movw	r22, r12
   125ce:	6e 2b       	or	r22, r30
   125d0:	ee cf       	rjmp	.-36     	; 0x125ae <B2V_LSB+0x12>
   125d2:	ff 90       	pop	r15
   125d4:	ef 90       	pop	r14
   125d6:	df 90       	pop	r13
   125d8:	cf 90       	pop	r12
   125da:	08 95       	ret

000125dc <find_type>:
   125dc:	e0 ef       	ldi	r30, 0xF0	; 240
   125de:	fd e1       	ldi	r31, 0x1D	; 29
   125e0:	20 e0       	ldi	r18, 0x00	; 0
   125e2:	30 e0       	ldi	r19, 0x00	; 0
   125e4:	40 81       	ld	r20, Z
   125e6:	50 e0       	ldi	r21, 0x00	; 0
   125e8:	48 17       	cp	r20, r24
   125ea:	59 07       	cpc	r21, r25
   125ec:	49 f0       	breq	.+18     	; 0x12600 <find_type+0x24>
   125ee:	2f 5f       	subi	r18, 0xFF	; 255
   125f0:	3f 4f       	sbci	r19, 0xFF	; 255
   125f2:	bb 96       	adiw	r30, 0x2b	; 43
   125f4:	2c 30       	cpi	r18, 0x0C	; 12
   125f6:	31 05       	cpc	r19, r1
   125f8:	a9 f7       	brne	.-22     	; 0x125e4 <find_type+0x8>
   125fa:	8f ef       	ldi	r24, 0xFF	; 255
   125fc:	9f ef       	ldi	r25, 0xFF	; 255
   125fe:	08 95       	ret
   12600:	c9 01       	movw	r24, r18
   12602:	08 95       	ret

00012604 <count_drive_types>:
   12604:	28 2f       	mov	r18, r24
   12606:	e0 ef       	ldi	r30, 0xF0	; 240
   12608:	fd e1       	ldi	r31, 0x1D	; 29
   1260a:	80 e0       	ldi	r24, 0x00	; 0
   1260c:	90 e0       	ldi	r25, 0x00	; 0
   1260e:	30 81       	ld	r19, Z
   12610:	32 13       	cpse	r19, r18
   12612:	01 c0       	rjmp	.+2      	; 0x12616 <count_drive_types+0x12>
   12614:	01 96       	adiw	r24, 0x01	; 1
   12616:	bb 96       	adiw	r30, 0x2b	; 43
   12618:	3f e1       	ldi	r19, 0x1F	; 31
   1261a:	e4 3f       	cpi	r30, 0xF4	; 244
   1261c:	f3 07       	cpc	r31, r19
   1261e:	b9 f7       	brne	.-18     	; 0x1260e <count_drive_types+0xa>
   12620:	08 95       	ret

00012622 <type_to_str>:
   12622:	00 97       	sbiw	r24, 0x00	; 0
   12624:	59 f0       	breq	.+22     	; 0x1263c <type_to_str+0x1a>
   12626:	81 30       	cpi	r24, 0x01	; 1
   12628:	91 05       	cpc	r25, r1
   1262a:	59 f0       	breq	.+22     	; 0x12642 <type_to_str+0x20>
   1262c:	83 30       	cpi	r24, 0x03	; 3
   1262e:	91 05       	cpc	r25, r1
   12630:	59 f0       	breq	.+22     	; 0x12648 <type_to_str+0x26>
   12632:	04 97       	sbiw	r24, 0x04	; 4
   12634:	61 f0       	breq	.+24     	; 0x1264e <type_to_str+0x2c>
   12636:	84 ea       	ldi	r24, 0xA4	; 164
   12638:	9d e0       	ldi	r25, 0x0D	; 13
   1263a:	08 95       	ret
   1263c:	8a e7       	ldi	r24, 0x7A	; 122
   1263e:	9d e0       	ldi	r25, 0x0D	; 13
   12640:	08 95       	ret
   12642:	82 e8       	ldi	r24, 0x82	; 130
   12644:	9d e0       	ldi	r25, 0x0D	; 13
   12646:	08 95       	ret
   12648:	8a e9       	ldi	r24, 0x9A	; 154
   1264a:	9d e0       	ldi	r25, 0x0D	; 13
   1264c:	08 95       	ret
   1264e:	8d e8       	ldi	r24, 0x8D	; 141
   12650:	9d e0       	ldi	r25, 0x0D	; 13
   12652:	08 95       	ret

00012654 <find_free>:
   12654:	80 e0       	ldi	r24, 0x00	; 0
   12656:	90 e0       	ldi	r25, 0x00	; 0
   12658:	c1 cf       	rjmp	.-126    	; 0x125dc <find_type>
   1265a:	08 95       	ret

0001265c <find_device>:
int find_device(int type, int address, int base)
{
    int i;

    ///@skip Only interested in device addresses
    if(address < BASE_MLA || address >(BASE_MSA+30))
   1265c:	9b 01       	movw	r18, r22
   1265e:	20 52       	subi	r18, 0x20	; 32
   12660:	31 09       	sbc	r19, r1
   12662:	2f 35       	cpi	r18, 0x5F	; 95
   12664:	31 05       	cpc	r19, r1
   12666:	f8 f4       	brcc	.+62     	; 0x126a6 <find_device+0x4a>
        return(-1);

    ///@brief Make sure address is in expected range
    if(address < base || address > (base+30))
   12668:	64 17       	cp	r22, r20
   1266a:	75 07       	cpc	r23, r21
   1266c:	e4 f0       	brlt	.+56     	; 0x126a6 <find_device+0x4a>
   1266e:	9a 01       	movw	r18, r20
   12670:	22 5e       	subi	r18, 0xE2	; 226
   12672:	3f 4f       	sbci	r19, 0xFF	; 255
   12674:	26 17       	cp	r18, r22
   12676:	37 07       	cpc	r19, r23
   12678:	b4 f0       	brlt	.+44     	; 0x126a6 <find_device+0x4a>
        return(-1);

    ///@brief convert to device address
    address -= base;
   1267a:	64 1b       	sub	r22, r20
   1267c:	75 0b       	sbc	r23, r21
   1267e:	e0 ef       	ldi	r30, 0xF0	; 240
   12680:	fd e1       	ldi	r31, 0x1D	; 29

    ///@brief search for device address
    for(i=0;i<MAX_DEVICES;++i)
   12682:	20 e0       	ldi	r18, 0x00	; 0
   12684:	30 e0       	ldi	r19, 0x00	; 0
    {
        if(Devices[i].TYPE == type && Devices[i].ADDRESS == address)
   12686:	40 81       	ld	r20, Z
   12688:	50 e0       	ldi	r21, 0x00	; 0
   1268a:	48 17       	cp	r20, r24
   1268c:	59 07       	cpc	r21, r25
   1268e:	29 f4       	brne	.+10     	; 0x1269a <find_device+0x3e>
   12690:	41 81       	ldd	r20, Z+1	; 0x01
   12692:	50 e0       	ldi	r21, 0x00	; 0
   12694:	64 17       	cp	r22, r20
   12696:	75 07       	cpc	r23, r21
   12698:	49 f0       	breq	.+18     	; 0x126ac <find_device+0x50>

    ///@brief convert to device address
    address -= base;

    ///@brief search for device address
    for(i=0;i<MAX_DEVICES;++i)
   1269a:	2f 5f       	subi	r18, 0xFF	; 255
   1269c:	3f 4f       	sbci	r19, 0xFF	; 255
   1269e:	bb 96       	adiw	r30, 0x2b	; 43
   126a0:	2c 30       	cpi	r18, 0x0C	; 12
   126a2:	31 05       	cpc	r19, r1
   126a4:	81 f7       	brne	.-32     	; 0x12686 <find_device+0x2a>
{
    int i;

    ///@skip Only interested in device addresses
    if(address < BASE_MLA || address >(BASE_MSA+30))
        return(-1);
   126a6:	8f ef       	ldi	r24, 0xFF	; 255
   126a8:	9f ef       	ldi	r25, 0xFF	; 255
   126aa:	08 95       	ret
   126ac:	c9 01       	movw	r24, r18
    {
        if(Devices[i].TYPE == type && Devices[i].ADDRESS == address)
            return(i);
    }
    return(-1);
}
   126ae:	08 95       	ret

000126b0 <set_active_device>:
/// Since we can be called multiple times per single GPIB state we do not
/// display state changes here. Other code displays the active state.
///@param index: Devices[] index
///@return 1 on success or 0 on fail
int set_active_device(int index)
{
   126b0:	1f 93       	push	r17
   126b2:	cf 93       	push	r28
   126b4:	df 93       	push	r29
    int type,address;

    ///@brief We also check for -1 
    /// So the result of find_device() can be used without additional tests
    if(index == -1)
   126b6:	8f 3f       	cpi	r24, 0xFF	; 255
   126b8:	2f ef       	ldi	r18, 0xFF	; 255
   126ba:	92 07       	cpc	r25, r18
   126bc:	09 f4       	brne	.+2      	; 0x126c0 <set_active_device+0x10>
   126be:	fa c0       	rjmp	.+500    	; 0x128b4 <set_active_device+0x204>
   126c0:	ec 01       	movw	r28, r24
    {
        return(0);
    }

    if(index < 0 || index >= MAX_DEVICES)
   126c2:	0c 97       	sbiw	r24, 0x0c	; 12
   126c4:	c0 f0       	brcs	.+48     	; 0x126f6 <set_active_device+0x46>
    {
        if(debuglevel & 1)
   126c6:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   126ca:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   126ce:	9c 01       	movw	r18, r24
   126d0:	21 70       	andi	r18, 0x01	; 1
   126d2:	33 27       	eor	r19, r19
   126d4:	80 ff       	sbrs	r24, 0
   126d6:	f0 c0       	rjmp	.+480    	; 0x128b8 <set_active_device+0x208>
            printf("set_active_device:(%d) out of range\n", index);
   126d8:	df 93       	push	r29
   126da:	cf 93       	push	r28
   126dc:	8c ef       	ldi	r24, 0xFC	; 252
   126de:	9e e1       	ldi	r25, 0x1E	; 30
   126e0:	1f 92       	push	r1
   126e2:	9f 93       	push	r25
   126e4:	8f 93       	push	r24
   126e6:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   126ea:	0f 90       	pop	r0
   126ec:	0f 90       	pop	r0
   126ee:	0f 90       	pop	r0
   126f0:	0f 90       	pop	r0
   126f2:	0f 90       	pop	r0
   126f4:	df c0       	rjmp	.+446    	; 0x128b4 <set_active_device+0x204>
        return(0);
    }

    type = Devices[index].TYPE;
    address = Devices[index].ADDRESS;
   126f6:	8b e2       	ldi	r24, 0x2B	; 43
   126f8:	8c 9f       	mul	r24, r28
   126fa:	f0 01       	movw	r30, r0
   126fc:	8d 9f       	mul	r24, r29
   126fe:	f0 0d       	add	r31, r0
   12700:	11 24       	eor	r1, r1
   12702:	e0 51       	subi	r30, 0x10	; 16
   12704:	f2 4e       	sbci	r31, 0xE2	; 226
   12706:	81 81       	ldd	r24, Z+1	; 0x01
    if(address < 0 || address > 30)
   12708:	8f 31       	cpi	r24, 0x1F	; 31
   1270a:	e8 f0       	brcs	.+58     	; 0x12746 <set_active_device+0x96>
    {
        if(debuglevel & 1)
   1270c:	40 91 bd 01 	lds	r20, 0x01BD	; 0x8001bd <debuglevel>
   12710:	50 91 be 01 	lds	r21, 0x01BE	; 0x8001be <debuglevel+0x1>
   12714:	9a 01       	movw	r18, r20
   12716:	21 70       	andi	r18, 0x01	; 1
   12718:	33 27       	eor	r19, r19
   1271a:	40 ff       	sbrs	r20, 0
   1271c:	cd c0       	rjmp	.+410    	; 0x128b8 <set_active_device+0x208>
            printf("set_active_device: index:%d address: %02XH out of range\n", index,address);
   1271e:	1f 92       	push	r1
   12720:	8f 93       	push	r24
   12722:	df 93       	push	r29
   12724:	cf 93       	push	r28
   12726:	83 ec       	ldi	r24, 0xC3	; 195
   12728:	9e e1       	ldi	r25, 0x1E	; 30
   1272a:	1f 92       	push	r1
   1272c:	9f 93       	push	r25
   1272e:	8f 93       	push	r24
   12730:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   12734:	8d b7       	in	r24, 0x3d	; 61
   12736:	9e b7       	in	r25, 0x3e	; 62
   12738:	07 96       	adiw	r24, 0x07	; 7
   1273a:	0f b6       	in	r0, 0x3f	; 63
   1273c:	f8 94       	cli
   1273e:	9e bf       	out	0x3e, r25	; 62
   12740:	0f be       	out	0x3f, r0	; 63
   12742:	8d bf       	out	0x3d, r24	; 61
   12744:	b7 c0       	rjmp	.+366    	; 0x128b4 <set_active_device+0x204>
        if(debuglevel & 1)
            printf("set_active_device:(%d) out of range\n", index);
        return(0);
    }

    type = Devices[index].TYPE;
   12746:	10 81       	ld	r17, Z
   12748:	81 2f       	mov	r24, r17
   1274a:	90 e0       	ldi	r25, 0x00	; 0
        if(debuglevel & 1)
            printf("set_active_device: index:%d address: %02XH out of range\n", index,address);
        return(0);
    }

    if(Devices[index].dev == NULL)
   1274c:	27 a1       	ldd	r18, Z+39	; 0x27
   1274e:	30 a5       	ldd	r19, Z+40	; 0x28
   12750:	21 15       	cp	r18, r1
   12752:	31 05       	cpc	r19, r1
   12754:	01 f5       	brne	.+64     	; 0x12796 <set_active_device+0xe6>
    {
        if(debuglevel & 1)
   12756:	40 91 bd 01 	lds	r20, 0x01BD	; 0x8001bd <debuglevel>
   1275a:	50 91 be 01 	lds	r21, 0x01BE	; 0x8001be <debuglevel+0x1>
   1275e:	9a 01       	movw	r18, r20
   12760:	21 70       	andi	r18, 0x01	; 1
   12762:	33 27       	eor	r19, r19
   12764:	40 ff       	sbrs	r20, 0
            printf("set_active_device: index:%d type:%d:%s, dev == NULL\n", 
   12766:	a8 c0       	rjmp	.+336    	; 0x128b8 <set_active_device+0x208>
   12768:	5c df       	rcall	.-328    	; 0x12622 <type_to_str>
   1276a:	9f 93       	push	r25
   1276c:	8f 93       	push	r24
   1276e:	1f 92       	push	r1
   12770:	1f 93       	push	r17
   12772:	df 93       	push	r29
   12774:	cf 93       	push	r28
   12776:	8e e8       	ldi	r24, 0x8E	; 142
   12778:	9e e1       	ldi	r25, 0x1E	; 30
   1277a:	1f 92       	push	r1
   1277c:	9f 93       	push	r25
   1277e:	8f 93       	push	r24
   12780:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   12784:	8d b7       	in	r24, 0x3d	; 61
   12786:	9e b7       	in	r25, 0x3e	; 62
   12788:	09 96       	adiw	r24, 0x09	; 9
   1278a:	0f b6       	in	r0, 0x3f	; 63
   1278c:	f8 94       	cli
   1278e:	9e bf       	out	0x3e, r25	; 62
   12790:	0f be       	out	0x3f, r0	; 63
   12792:	8d bf       	out	0x3d, r24	; 61
                index,type,type_to_str(type));
        return(0);
    }

    if(type == NO_TYPE)
   12794:	8f c0       	rjmp	.+286    	; 0x128b4 <set_active_device+0x204>
   12796:	00 97       	sbiw	r24, 0x00	; 0
    {
        if(debuglevel & 1)
   12798:	11 f5       	brne	.+68     	; 0x127de <set_active_device+0x12e>
   1279a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1279e:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   127a2:	9c 01       	movw	r18, r24
   127a4:	21 70       	andi	r18, 0x01	; 1
   127a6:	33 27       	eor	r19, r19
   127a8:	80 ff       	sbrs	r24, 0
            printf("set_active_device: index %d uninitalized type:%d:%s\n", 
   127aa:	86 c0       	rjmp	.+268    	; 0x128b8 <set_active_device+0x208>
   127ac:	80 e0       	ldi	r24, 0x00	; 0
   127ae:	90 e0       	ldi	r25, 0x00	; 0
   127b0:	38 df       	rcall	.-400    	; 0x12622 <type_to_str>
   127b2:	9f 93       	push	r25
   127b4:	8f 93       	push	r24
   127b6:	1f 92       	push	r1
   127b8:	1f 92       	push	r1
   127ba:	df 93       	push	r29
   127bc:	cf 93       	push	r28
   127be:	89 e5       	ldi	r24, 0x59	; 89
   127c0:	9e e1       	ldi	r25, 0x1E	; 30
   127c2:	1f 92       	push	r1
   127c4:	9f 93       	push	r25
   127c6:	8f 93       	push	r24
   127c8:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   127cc:	8d b7       	in	r24, 0x3d	; 61
   127ce:	9e b7       	in	r25, 0x3e	; 62
   127d0:	09 96       	adiw	r24, 0x09	; 9
   127d2:	0f b6       	in	r0, 0x3f	; 63
   127d4:	f8 94       	cli
   127d6:	9e bf       	out	0x3e, r25	; 62
   127d8:	0f be       	out	0x3f, r0	; 63
   127da:	8d bf       	out	0x3d, r24	; 61
                index,type,type_to_str(type));
        return(0);
    }

    if(type == PRINTER_TYPE)
   127dc:	6b c0       	rjmp	.+214    	; 0x128b4 <set_active_device+0x204>
   127de:	84 30       	cpi	r24, 0x04	; 4
   127e0:	91 05       	cpc	r25, r1
    {
        PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
   127e2:	29 f4       	brne	.+10     	; 0x127ee <set_active_device+0x13e>
   127e4:	30 93 6e 18 	sts	0x186E, r19	; 0x80186e <PRINTERp+0x1>
   127e8:	20 93 6d 18 	sts	0x186D, r18	; 0x80186d <PRINTERp>
        return(1);
    }

    if(type == AMIGO_TYPE || type == SS80_TYPE) 
   127ec:	41 c0       	rjmp	.+130    	; 0x12870 <set_active_device+0x1c0>
   127ee:	41 2f       	mov	r20, r17
   127f0:	4d 7f       	andi	r20, 0xFD	; 253
   127f2:	41 30       	cpi	r20, 0x01	; 1
   127f4:	09 f0       	breq	.+2      	; 0x127f8 <set_active_device+0x148>
    {
        if(Devices[index].state == NULL)
   127f6:	3f c0       	rjmp	.+126    	; 0x12876 <set_active_device+0x1c6>
   127f8:	41 a5       	ldd	r20, Z+41	; 0x29
   127fa:	52 a5       	ldd	r21, Z+42	; 0x2a
   127fc:	41 15       	cp	r20, r1
   127fe:	51 05       	cpc	r21, r1
        {
            if(debuglevel & 1)
   12800:	01 f5       	brne	.+64     	; 0x12842 <set_active_device+0x192>
   12802:	40 91 bd 01 	lds	r20, 0x01BD	; 0x8001bd <debuglevel>
   12806:	50 91 be 01 	lds	r21, 0x01BE	; 0x8001be <debuglevel+0x1>
   1280a:	9a 01       	movw	r18, r20
   1280c:	21 70       	andi	r18, 0x01	; 1
   1280e:	33 27       	eor	r19, r19
                printf("set_active_device: index: %d type:%d:%s, state == NULL\n",
   12810:	40 ff       	sbrs	r20, 0
   12812:	52 c0       	rjmp	.+164    	; 0x128b8 <set_active_device+0x208>
   12814:	06 df       	rcall	.-500    	; 0x12622 <type_to_str>
   12816:	9f 93       	push	r25
   12818:	8f 93       	push	r24
   1281a:	1f 92       	push	r1
   1281c:	1f 93       	push	r17
   1281e:	df 93       	push	r29
   12820:	cf 93       	push	r28
   12822:	81 e2       	ldi	r24, 0x21	; 33
   12824:	9e e1       	ldi	r25, 0x1E	; 30
   12826:	1f 92       	push	r1
   12828:	9f 93       	push	r25
   1282a:	8f 93       	push	r24
   1282c:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   12830:	8d b7       	in	r24, 0x3d	; 61
   12832:	9e b7       	in	r25, 0x3e	; 62
   12834:	09 96       	adiw	r24, 0x09	; 9
   12836:	0f b6       	in	r0, 0x3f	; 63
   12838:	f8 94       	cli
   1283a:	9e bf       	out	0x3e, r25	; 62
   1283c:	0f be       	out	0x3f, r0	; 63
   1283e:	8d bf       	out	0x3d, r24	; 61
                     index,type,type_to_str(type));
            return(0);
        }
#ifdef AMIGO
        if(type == AMIGO_TYPE)
   12840:	39 c0       	rjmp	.+114    	; 0x128b4 <set_active_device+0x204>
   12842:	81 30       	cpi	r24, 0x01	; 1
   12844:	91 05       	cpc	r25, r1
        {
            AMIGOp = (AMIGODiskType *) Devices[index].dev;
   12846:	49 f4       	brne	.+18     	; 0x1285a <set_active_device+0x1aa>
   12848:	30 93 68 18 	sts	0x1868, r19	; 0x801868 <AMIGOp+0x1>
   1284c:	20 93 67 18 	sts	0x1867, r18	; 0x801867 <AMIGOp>
            AMIGOs = (AMIGOStateType *) Devices[index].state;
   12850:	50 93 66 18 	sts	0x1866, r21	; 0x801866 <AMIGOs+0x1>
   12854:	40 93 65 18 	sts	0x1865, r20	; 0x801865 <AMIGOs>
            return(1);
        }
#endif
        if(type == SS80_TYPE)
   12858:	0b c0       	rjmp	.+22     	; 0x12870 <set_active_device+0x1c0>
   1285a:	83 30       	cpi	r24, 0x03	; 3
   1285c:	91 05       	cpc	r25, r1
        {
            SS80p = (SS80DiskType *) Devices[index].dev;
   1285e:	59 f4       	brne	.+22     	; 0x12876 <set_active_device+0x1c6>
   12860:	30 93 6c 18 	sts	0x186C, r19	; 0x80186c <SS80p+0x1>
   12864:	20 93 6b 18 	sts	0x186B, r18	; 0x80186b <SS80p>
            SS80s = (SS80StateType *) Devices[index].state;
   12868:	50 93 6a 18 	sts	0x186A, r21	; 0x80186a <SS80s+0x1>
   1286c:	40 93 69 18 	sts	0x1869, r20	; 0x801869 <SS80s>
            return(1);
   12870:	21 e0       	ldi	r18, 0x01	; 1
   12872:	30 e0       	ldi	r19, 0x00	; 0
        }
    }
    if(debuglevel & 1)
   12874:	21 c0       	rjmp	.+66     	; 0x128b8 <set_active_device+0x208>
   12876:	40 91 bd 01 	lds	r20, 0x01BD	; 0x8001bd <debuglevel>
   1287a:	50 91 be 01 	lds	r21, 0x01BE	; 0x8001be <debuglevel+0x1>
   1287e:	9a 01       	movw	r18, r20
   12880:	21 70       	andi	r18, 0x01	; 1
   12882:	33 27       	eor	r19, r19
        printf("set_active_device:(%d) invalid type:%d:%s\n", 
   12884:	40 ff       	sbrs	r20, 0
   12886:	18 c0       	rjmp	.+48     	; 0x128b8 <set_active_device+0x208>
   12888:	cc de       	rcall	.-616    	; 0x12622 <type_to_str>
   1288a:	9f 93       	push	r25
   1288c:	8f 93       	push	r24
   1288e:	1f 92       	push	r1
   12890:	1f 93       	push	r17
   12892:	df 93       	push	r29
   12894:	cf 93       	push	r28
   12896:	86 ef       	ldi	r24, 0xF6	; 246
   12898:	9d e1       	ldi	r25, 0x1D	; 29
   1289a:	1f 92       	push	r1
   1289c:	9f 93       	push	r25
   1289e:	8f 93       	push	r24
   128a0:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   128a4:	8d b7       	in	r24, 0x3d	; 61
   128a6:	9e b7       	in	r25, 0x3e	; 62
   128a8:	09 96       	adiw	r24, 0x09	; 9
   128aa:	0f b6       	in	r0, 0x3f	; 63
   128ac:	f8 94       	cli
   128ae:	9e bf       	out	0x3e, r25	; 62
   128b0:	0f be       	out	0x3f, r0	; 63

    ///@brief We also check for -1 
    /// So the result of find_device() can be used without additional tests
    if(index == -1)
    {
        return(0);
   128b2:	8d bf       	out	0x3d, r24	; 61
   128b4:	20 e0       	ldi	r18, 0x00	; 0
    }
    if(debuglevel & 1)
        printf("set_active_device:(%d) invalid type:%d:%s\n", 
            index,type,type_to_str(type));
    return(0);
}
   128b6:	30 e0       	ldi	r19, 0x00	; 0
   128b8:	c9 01       	movw	r24, r18
   128ba:	df 91       	pop	r29
   128bc:	cf 91       	pop	r28
   128be:	1f 91       	pop	r17
   128c0:	08 95       	ret

000128c2 <SS80_Set_Defaults>:
///@brief Set Default Values for a new SS80 Device IF defaults have been defined
/// Most values in the CONTROLER and UNIT are defaults that should not need to be specified
/// Note all of the values are zeroed on allocation including strings
///@return void
void SS80_Set_Defaults(int index)
{
   128c2:	0f 93       	push	r16
   128c4:	1f 93       	push	r17
   128c6:	cf 93       	push	r28
   128c8:	df 93       	push	r29
   128ca:	ec 01       	movw	r28, r24
	int defindex = find_type(SS80_DEFAULT_TYPE);
   128cc:	82 e0       	ldi	r24, 0x02	; 2
   128ce:	90 e0       	ldi	r25, 0x00	; 0
   128d0:	85 de       	rcall	.-758    	; 0x125dc <find_type>
	SS80DiskType *SS80p = (SS80DiskType *) Devices[index].dev;
	SS80DiskType *SS80DEFAULTp;

	if(defindex < 0 )
   128d2:	97 fd       	sbrc	r25, 7
   128d4:	88 c0       	rjmp	.+272    	; 0x129e6 <SS80_Set_Defaults+0x124>
/// Note all of the values are zeroed on allocation including strings
///@return void
void SS80_Set_Defaults(int index)
{
	int defindex = find_type(SS80_DEFAULT_TYPE);
	SS80DiskType *SS80p = (SS80DiskType *) Devices[index].dev;
   128d6:	2b e2       	ldi	r18, 0x2B	; 43
   128d8:	2c 9f       	mul	r18, r28
   128da:	f0 01       	movw	r30, r0
   128dc:	2d 9f       	mul	r18, r29
   128de:	f0 0d       	add	r31, r0
   128e0:	11 24       	eor	r1, r1
   128e2:	e0 51       	subi	r30, 0x10	; 16
   128e4:	f2 4e       	sbci	r31, 0xE2	; 226
   128e6:	c7 a1       	ldd	r28, Z+39	; 0x27
   128e8:	d0 a5       	ldd	r29, Z+40	; 0x28
	SS80DiskType *SS80DEFAULTp;

	if(defindex < 0 )
		return;

	SS80DEFAULTp = (SS80DiskType *) Devices[defindex].dev;
   128ea:	28 9f       	mul	r18, r24
   128ec:	f0 01       	movw	r30, r0
   128ee:	29 9f       	mul	r18, r25
   128f0:	f0 0d       	add	r31, r0
   128f2:	11 24       	eor	r1, r1
   128f4:	e0 51       	subi	r30, 0x10	; 16
   128f6:	f2 4e       	sbci	r31, 0xE2	; 226
   128f8:	07 a1       	ldd	r16, Z+39	; 0x27
   128fa:	10 a5       	ldd	r17, Z+40	; 0x28

	SS80p->HEADER.ADDRESS				= SS80DEFAULTp->HEADER.ADDRESS;
   128fc:	f8 01       	movw	r30, r16
   128fe:	80 81       	ld	r24, Z
   12900:	88 83       	st	Y, r24
	SS80p->HEADER.PPR					= SS80DEFAULTp->HEADER.PPR;
   12902:	81 81       	ldd	r24, Z+1	; 0x01
   12904:	89 83       	std	Y+1, r24	; 0x01
	strncpy(SS80p->HEADER.NAME,SS80DEFAULTp->HEADER.NAME,sizeof(SS80p->HEADER.NAME)-1);
   12906:	b8 01       	movw	r22, r16
   12908:	6e 5f       	subi	r22, 0xFE	; 254
   1290a:	7f 4f       	sbci	r23, 0xFF	; 255
   1290c:	40 e2       	ldi	r20, 0x20	; 32
   1290e:	50 e0       	ldi	r21, 0x00	; 0
   12910:	ce 01       	movw	r24, r28
   12912:	02 96       	adiw	r24, 0x02	; 2
   12914:	0e 94 5e 32 	call	0x64bc	; 0x64bc <strncpy>

	SS80p->CONFIG.ID					= SS80DEFAULTp->CONFIG.ID;
   12918:	f8 01       	movw	r30, r16
   1291a:	83 a1       	ldd	r24, Z+35	; 0x23
   1291c:	94 a1       	ldd	r25, Z+36	; 0x24
   1291e:	9c a3       	std	Y+36, r25	; 0x24
   12920:	8b a3       	std	Y+35, r24	; 0x23
	SS80p->CONTROLLER.UNITS_INSTALLED	= SS80DEFAULTp->CONTROLLER.UNITS_INSTALLED;
   12922:	85 a1       	ldd	r24, Z+37	; 0x25
   12924:	96 a1       	ldd	r25, Z+38	; 0x26
   12926:	9e a3       	std	Y+38, r25	; 0x26
   12928:	8d a3       	std	Y+37, r24	; 0x25
	SS80p->CONTROLLER.TRANSFER_RATE		= SS80DEFAULTp->CONTROLLER.TRANSFER_RATE;
   1292a:	87 a1       	ldd	r24, Z+39	; 0x27
   1292c:	90 a5       	ldd	r25, Z+40	; 0x28
   1292e:	98 a7       	std	Y+40, r25	; 0x28
   12930:	8f a3       	std	Y+39, r24	; 0x27
	SS80p->CONTROLLER.TYPE				= SS80DEFAULTp->CONTROLLER.TYPE;
   12932:	81 a5       	ldd	r24, Z+41	; 0x29
   12934:	89 a7       	std	Y+41, r24	; 0x29

	SS80p->UNIT.UNIT_TYPE				= SS80DEFAULTp->UNIT.UNIT_TYPE;
   12936:	82 a5       	ldd	r24, Z+42	; 0x2a
   12938:	8a a7       	std	Y+42, r24	; 0x2a
	SS80p->UNIT.DEVICE_NUMBER			= SS80DEFAULTp->UNIT.DEVICE_NUMBER;
   1293a:	83 a5       	ldd	r24, Z+43	; 0x2b
   1293c:	94 a5       	ldd	r25, Z+44	; 0x2c
   1293e:	a5 a5       	ldd	r26, Z+45	; 0x2d
   12940:	b6 a5       	ldd	r27, Z+46	; 0x2e
   12942:	8b a7       	std	Y+43, r24	; 0x2b
   12944:	9c a7       	std	Y+44, r25	; 0x2c
   12946:	ad a7       	std	Y+45, r26	; 0x2d
   12948:	be a7       	std	Y+46, r27	; 0x2e
	SS80p->UNIT.BYTES_PER_BLOCK			= SS80DEFAULTp->UNIT.BYTES_PER_BLOCK;
   1294a:	87 a5       	ldd	r24, Z+47	; 0x2f
   1294c:	90 a9       	ldd	r25, Z+48	; 0x30
   1294e:	98 ab       	std	Y+48, r25	; 0x30
   12950:	8f a7       	std	Y+47, r24	; 0x2f
	SS80p->UNIT.BUFFERED_BLOCKS			= SS80DEFAULTp->UNIT.BUFFERED_BLOCKS;
   12952:	81 a9       	ldd	r24, Z+49	; 0x31
   12954:	89 ab       	std	Y+49, r24	; 0x31
	SS80p->UNIT.BURST_SIZE				= SS80DEFAULTp->UNIT.BURST_SIZE;
   12956:	82 a9       	ldd	r24, Z+50	; 0x32
   12958:	8a ab       	std	Y+50, r24	; 0x32
	SS80p->UNIT.BLOCK_TIME				= SS80DEFAULTp->UNIT.BLOCK_TIME;
   1295a:	83 a9       	ldd	r24, Z+51	; 0x33
   1295c:	94 a9       	ldd	r25, Z+52	; 0x34
   1295e:	9c ab       	std	Y+52, r25	; 0x34
   12960:	8b ab       	std	Y+51, r24	; 0x33
	SS80p->UNIT.CONTINOUS_TRANSFER_RATE	= SS80DEFAULTp->UNIT.CONTINOUS_TRANSFER_RATE;
   12962:	85 a9       	ldd	r24, Z+53	; 0x35
   12964:	96 a9       	ldd	r25, Z+54	; 0x36
   12966:	9e ab       	std	Y+54, r25	; 0x36
   12968:	8d ab       	std	Y+53, r24	; 0x35
	SS80p->UNIT.OPTIMAL_RETRY_TIME		= SS80DEFAULTp->UNIT.OPTIMAL_RETRY_TIME;
   1296a:	87 a9       	ldd	r24, Z+55	; 0x37
   1296c:	90 ad       	ldd	r25, Z+56	; 0x38
   1296e:	98 af       	std	Y+56, r25	; 0x38
   12970:	8f ab       	std	Y+55, r24	; 0x37
	SS80p->UNIT.ACCESS_TIME				= SS80DEFAULTp->UNIT.ACCESS_TIME;
   12972:	81 ad       	ldd	r24, Z+57	; 0x39
   12974:	92 ad       	ldd	r25, Z+58	; 0x3a
   12976:	9a af       	std	Y+58, r25	; 0x3a
   12978:	89 af       	std	Y+57, r24	; 0x39
	SS80p->UNIT.MAXIMUM_INTERLEAVE		= SS80DEFAULTp->UNIT.MAXIMUM_INTERLEAVE;
   1297a:	83 ad       	ldd	r24, Z+59	; 0x3b
   1297c:	8b af       	std	Y+59, r24	; 0x3b
	SS80p->UNIT.FIXED_VOLUMES			= SS80DEFAULTp->UNIT.FIXED_VOLUMES;
   1297e:	84 ad       	ldd	r24, Z+60	; 0x3c
   12980:	8c af       	std	Y+60, r24	; 0x3c

	SS80p->VOLUME.MAX_CYLINDER			= SS80DEFAULTp->VOLUME.MAX_CYLINDER;
   12982:	fe 96       	adiw	r30, 0x3e	; 62
   12984:	80 81       	ld	r24, Z
   12986:	91 81       	ldd	r25, Z+1	; 0x01
   12988:	a2 81       	ldd	r26, Z+2	; 0x02
   1298a:	b3 81       	ldd	r27, Z+3	; 0x03
   1298c:	fe 01       	movw	r30, r28
   1298e:	fe 96       	adiw	r30, 0x3e	; 62
   12990:	80 83       	st	Z, r24
   12992:	91 83       	std	Z+1, r25	; 0x01
   12994:	a2 83       	std	Z+2, r26	; 0x02
   12996:	b3 83       	std	Z+3, r27	; 0x03
	SS80p->VOLUME.MAX_HEAD				= SS80DEFAULTp->VOLUME.MAX_HEAD;
   12998:	f8 01       	movw	r30, r16
   1299a:	ee 5b       	subi	r30, 0xBE	; 190
   1299c:	ff 4f       	sbci	r31, 0xFF	; 255
   1299e:	80 81       	ld	r24, Z
   129a0:	fe 01       	movw	r30, r28
   129a2:	ee 5b       	subi	r30, 0xBE	; 190
   129a4:	ff 4f       	sbci	r31, 0xFF	; 255
   129a6:	80 83       	st	Z, r24
	SS80p->VOLUME.MAX_SECTOR			= SS80DEFAULTp->VOLUME.MAX_SECTOR;
   129a8:	f8 01       	movw	r30, r16
   129aa:	ed 5b       	subi	r30, 0xBD	; 189
   129ac:	ff 4f       	sbci	r31, 0xFF	; 255
   129ae:	80 81       	ld	r24, Z
   129b0:	91 81       	ldd	r25, Z+1	; 0x01
   129b2:	fe 01       	movw	r30, r28
   129b4:	ed 5b       	subi	r30, 0xBD	; 189
   129b6:	ff 4f       	sbci	r31, 0xFF	; 255
   129b8:	91 83       	std	Z+1, r25	; 0x01
   129ba:	80 83       	st	Z, r24
	SS80p->VOLUME.MAX_BLOCK_NUMBER		= SS80DEFAULTp->VOLUME.MAX_BLOCK_NUMBER;
   129bc:	f8 01       	movw	r30, r16
   129be:	eb 5b       	subi	r30, 0xBB	; 187
   129c0:	ff 4f       	sbci	r31, 0xFF	; 255
   129c2:	80 81       	ld	r24, Z
   129c4:	91 81       	ldd	r25, Z+1	; 0x01
   129c6:	a2 81       	ldd	r26, Z+2	; 0x02
   129c8:	b3 81       	ldd	r27, Z+3	; 0x03
   129ca:	fe 01       	movw	r30, r28
   129cc:	eb 5b       	subi	r30, 0xBB	; 187
   129ce:	ff 4f       	sbci	r31, 0xFF	; 255
   129d0:	80 83       	st	Z, r24
   129d2:	91 83       	std	Z+1, r25	; 0x01
   129d4:	a2 83       	std	Z+2, r26	; 0x02
   129d6:	b3 83       	std	Z+3, r27	; 0x03
	SS80p->VOLUME.INTERLEAVE			= SS80DEFAULTp->VOLUME.INTERLEAVE;
   129d8:	f8 01       	movw	r30, r16
   129da:	e7 5b       	subi	r30, 0xB7	; 183
   129dc:	ff 4f       	sbci	r31, 0xFF	; 255
   129de:	80 81       	ld	r24, Z
   129e0:	c7 5b       	subi	r28, 0xB7	; 183
   129e2:	df 4f       	sbci	r29, 0xFF	; 255
   129e4:	88 83       	st	Y, r24
};
   129e6:	df 91       	pop	r29
   129e8:	cf 91       	pop	r28
   129ea:	1f 91       	pop	r17
   129ec:	0f 91       	pop	r16
   129ee:	08 95       	ret

000129f0 <alloc_device>:

///@brief Allocate a Device structure for a disk or printer
///@param type: disk type
///@return Devices[] index on sucess or -1
int alloc_device(int type)
{
   129f0:	0f 93       	push	r16
   129f2:	1f 93       	push	r17
   129f4:	cf 93       	push	r28
   129f6:	df 93       	push	r29
    int ind;
    int index = -1;

    // Find a free slot
    ind = find_free();
   129f8:	ec 01       	movw	r28, r24
   129fa:	2c de       	rcall	.-936    	; 0x12654 <find_free>
    if(ind == -1)
   129fc:	8c 01       	movw	r16, r24
   129fe:	0f 3f       	cpi	r16, 0xFF	; 255
   12a00:	8f ef       	ldi	r24, 0xFF	; 255
   12a02:	18 07       	cpc	r17, r24
    {
        if(debuglevel & 1)
   12a04:	99 f4       	brne	.+38     	; 0x12a2c <alloc_device+0x3c>
   12a06:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   12a0a:	80 ff       	sbrs	r24, 0
            printf("alloc_device: Device table is full\n", type);
   12a0c:	9e c0       	rjmp	.+316    	; 0x12b4a <alloc_device+0x15a>
   12a0e:	df 93       	push	r29
   12a10:	cf 93       	push	r28
   12a12:	82 ed       	ldi	r24, 0xD2	; 210
   12a14:	9d e1       	ldi	r25, 0x1D	; 29
   12a16:	1f 92       	push	r1
   12a18:	9f 93       	push	r25
   12a1a:	8f 93       	push	r24
   12a1c:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   12a20:	0f 90       	pop	r0
   12a22:	0f 90       	pop	r0
   12a24:	0f 90       	pop	r0
   12a26:	0f 90       	pop	r0
   12a28:	0f 90       	pop	r0
        return(ind);
    }

    switch(type)
   12a2a:	8f c0       	rjmp	.+286    	; 0x12b4a <alloc_device+0x15a>
   12a2c:	c2 30       	cpi	r28, 0x02	; 2
   12a2e:	d1 05       	cpc	r29, r1
   12a30:	c1 f1       	breq	.+112    	; 0x12aa2 <alloc_device+0xb2>
   12a32:	dc f4       	brge	.+54     	; 0x12a6a <alloc_device+0x7a>
   12a34:	c1 30       	cpi	r28, 0x01	; 1
   12a36:	d1 05       	cpc	r29, r1
   12a38:	09 f0       	breq	.+2      	; 0x12a3c <alloc_device+0x4c>
            index = ind;
			SS80_Set_Defaults(index);	// Set any defaults we may have
            break;
#ifdef AMIGO
        case AMIGO_TYPE:
            Devices[ind].TYPE = type;
   12a3a:	6c c0       	rjmp	.+216    	; 0x12b14 <alloc_device+0x124>
   12a3c:	8b e2       	ldi	r24, 0x2B	; 43
   12a3e:	80 9f       	mul	r24, r16
   12a40:	e0 01       	movw	r28, r0
   12a42:	81 9f       	mul	r24, r17
   12a44:	d0 0d       	add	r29, r0
   12a46:	11 24       	eor	r1, r1
   12a48:	c0 51       	subi	r28, 0x10	; 16
   12a4a:	d2 4e       	sbci	r29, 0xE2	; 226
   12a4c:	81 e0       	ldi	r24, 0x01	; 1
            Devices[ind].dev = safecalloc(sizeof(AMIGODiskType)+7,1);
   12a4e:	88 83       	st	Y, r24
   12a50:	61 e0       	ldi	r22, 0x01	; 1
   12a52:	70 e0       	ldi	r23, 0x00	; 0
   12a54:	84 e3       	ldi	r24, 0x34	; 52
   12a56:	90 e0       	ldi	r25, 0x00	; 0
   12a58:	0e 94 86 29 	call	0x530c	; 0x530c <safecalloc>
   12a5c:	98 a7       	std	Y+40, r25	; 0x28
            Devices[ind].state = safecalloc(sizeof(AMIGOStateType)+7,1);
   12a5e:	8f a3       	std	Y+39, r24	; 0x27
   12a60:	61 e0       	ldi	r22, 0x01	; 1
   12a62:	70 e0       	ldi	r23, 0x00	; 0
   12a64:	88 e1       	ldi	r24, 0x18	; 24
   12a66:	90 e0       	ldi	r25, 0x00	; 0
        if(debuglevel & 1)
            printf("alloc_device: Device table is full\n", type);
        return(ind);
    }

    switch(type)
   12a68:	50 c0       	rjmp	.+160    	; 0x12b0a <alloc_device+0x11a>
   12a6a:	c3 30       	cpi	r28, 0x03	; 3
   12a6c:	d1 05       	cpc	r29, r1
   12a6e:	81 f1       	breq	.+96     	; 0x12ad0 <alloc_device+0xe0>
   12a70:	c4 30       	cpi	r28, 0x04	; 4
   12a72:	d1 05       	cpc	r29, r1
   12a74:	09 f0       	breq	.+2      	; 0x12a78 <alloc_device+0x88>
            Devices[ind].state = safecalloc(sizeof(AMIGOStateType)+7,1);
            index = ind;
            break;
#endif
        case PRINTER_TYPE:
            Devices[ind].TYPE = type;
   12a76:	4e c0       	rjmp	.+156    	; 0x12b14 <alloc_device+0x124>
   12a78:	8b e2       	ldi	r24, 0x2B	; 43
   12a7a:	80 9f       	mul	r24, r16
   12a7c:	e0 01       	movw	r28, r0
   12a7e:	81 9f       	mul	r24, r17
   12a80:	d0 0d       	add	r29, r0
   12a82:	11 24       	eor	r1, r1
   12a84:	c0 51       	subi	r28, 0x10	; 16
   12a86:	d2 4e       	sbci	r29, 0xE2	; 226
   12a88:	84 e0       	ldi	r24, 0x04	; 4
            Devices[ind].dev = safecalloc(sizeof(PRINTERDeviceType)+7,1);
   12a8a:	88 83       	st	Y, r24
   12a8c:	61 e0       	ldi	r22, 0x01	; 1
   12a8e:	70 e0       	ldi	r23, 0x00	; 0
   12a90:	8a e2       	ldi	r24, 0x2A	; 42
   12a92:	90 e0       	ldi	r25, 0x00	; 0
   12a94:	0e 94 86 29 	call	0x530c	; 0x530c <safecalloc>
   12a98:	98 a7       	std	Y+40, r25	; 0x28
            Devices[ind].state = NULL;
   12a9a:	8f a3       	std	Y+39, r24	; 0x27
   12a9c:	1a a6       	std	Y+42, r1	; 0x2a
            index = ind;
            break;
   12a9e:	19 a6       	std	Y+41, r1	; 0x29

    switch(type)
    {
		// Same as SS80 type but sets initial defaults for any remaining SS80 drives
        case SS80_DEFAULT_TYPE:
            Devices[ind].TYPE = type;
   12aa0:	54 c0       	rjmp	.+168    	; 0x12b4a <alloc_device+0x15a>
   12aa2:	8b e2       	ldi	r24, 0x2B	; 43
   12aa4:	80 9f       	mul	r24, r16
   12aa6:	e0 01       	movw	r28, r0
   12aa8:	81 9f       	mul	r24, r17
   12aaa:	d0 0d       	add	r29, r0
   12aac:	11 24       	eor	r1, r1
   12aae:	c0 51       	subi	r28, 0x10	; 16
   12ab0:	d2 4e       	sbci	r29, 0xE2	; 226
   12ab2:	82 e0       	ldi	r24, 0x02	; 2
            Devices[ind].dev = safecalloc(sizeof(SS80DiskType)+7,1);
   12ab4:	88 83       	st	Y, r24
   12ab6:	61 e0       	ldi	r22, 0x01	; 1
   12ab8:	70 e0       	ldi	r23, 0x00	; 0
   12aba:	81 e5       	ldi	r24, 0x51	; 81
   12abc:	90 e0       	ldi	r25, 0x00	; 0
   12abe:	0e 94 86 29 	call	0x530c	; 0x530c <safecalloc>
   12ac2:	98 a7       	std	Y+40, r25	; 0x28
            Devices[ind].state = safecalloc(sizeof(SS80StateType)+7,1);
   12ac4:	8f a3       	std	Y+39, r24	; 0x27
   12ac6:	61 e0       	ldi	r22, 0x01	; 1
   12ac8:	70 e0       	ldi	r23, 0x00	; 0
   12aca:	86 e1       	ldi	r24, 0x16	; 22
   12acc:	90 e0       	ldi	r25, 0x00	; 0
            index = ind;
            break;
        case SS80_TYPE:
            Devices[ind].TYPE = type;
   12ace:	1d c0       	rjmp	.+58     	; 0x12b0a <alloc_device+0x11a>
   12ad0:	8b e2       	ldi	r24, 0x2B	; 43
   12ad2:	80 9f       	mul	r24, r16
   12ad4:	e0 01       	movw	r28, r0
   12ad6:	81 9f       	mul	r24, r17
   12ad8:	d0 0d       	add	r29, r0
   12ada:	11 24       	eor	r1, r1
   12adc:	c0 51       	subi	r28, 0x10	; 16
   12ade:	d2 4e       	sbci	r29, 0xE2	; 226
   12ae0:	83 e0       	ldi	r24, 0x03	; 3
            Devices[ind].dev = safecalloc(sizeof(SS80DiskType)+7,1);
   12ae2:	88 83       	st	Y, r24
   12ae4:	61 e0       	ldi	r22, 0x01	; 1
   12ae6:	70 e0       	ldi	r23, 0x00	; 0
   12ae8:	81 e5       	ldi	r24, 0x51	; 81
   12aea:	90 e0       	ldi	r25, 0x00	; 0
   12aec:	0e 94 86 29 	call	0x530c	; 0x530c <safecalloc>
   12af0:	98 a7       	std	Y+40, r25	; 0x28
            Devices[ind].state = safecalloc(sizeof(SS80StateType)+7,1);
   12af2:	8f a3       	std	Y+39, r24	; 0x27
   12af4:	61 e0       	ldi	r22, 0x01	; 1
   12af6:	70 e0       	ldi	r23, 0x00	; 0
   12af8:	86 e1       	ldi	r24, 0x16	; 22
   12afa:	90 e0       	ldi	r25, 0x00	; 0
   12afc:	0e 94 86 29 	call	0x530c	; 0x530c <safecalloc>
            index = ind;
			SS80_Set_Defaults(index);	// Set any defaults we may have
   12b00:	9a a7       	std	Y+42, r25	; 0x2a
   12b02:	89 a7       	std	Y+41, r24	; 0x29
            break;
   12b04:	c8 01       	movw	r24, r16
#ifdef AMIGO
        case AMIGO_TYPE:
            Devices[ind].TYPE = type;
            Devices[ind].dev = safecalloc(sizeof(AMIGODiskType)+7,1);
            Devices[ind].state = safecalloc(sizeof(AMIGOStateType)+7,1);
   12b06:	dd de       	rcall	.-582    	; 0x128c2 <SS80_Set_Defaults>
   12b08:	20 c0       	rjmp	.+64     	; 0x12b4a <alloc_device+0x15a>
   12b0a:	0e 94 86 29 	call	0x530c	; 0x530c <safecalloc>
            index = ind;
            break;
   12b0e:	9a a7       	std	Y+42, r25	; 0x2a
            Devices[ind].dev = safecalloc(sizeof(PRINTERDeviceType)+7,1);
            Devices[ind].state = NULL;
            index = ind;
            break;
        default:
            if(debuglevel & 1)
   12b10:	89 a7       	std	Y+41, r24	; 0x29
   12b12:	1b c0       	rjmp	.+54     	; 0x12b4a <alloc_device+0x15a>
   12b14:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
                printf("alloc_device: invalid type:%d:%s\n", type,type_to_str(type));
   12b18:	80 ff       	sbrs	r24, 0
   12b1a:	15 c0       	rjmp	.+42     	; 0x12b46 <alloc_device+0x156>
   12b1c:	ce 01       	movw	r24, r28
   12b1e:	81 dd       	rcall	.-1278   	; 0x12622 <type_to_str>
   12b20:	9f 93       	push	r25
   12b22:	8f 93       	push	r24
   12b24:	df 93       	push	r29
   12b26:	cf 93       	push	r28
   12b28:	80 eb       	ldi	r24, 0xB0	; 176
   12b2a:	9d e1       	ldi	r25, 0x1D	; 29
   12b2c:	1f 92       	push	r1
   12b2e:	9f 93       	push	r25
   12b30:	8f 93       	push	r24
   12b32:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   12b36:	8d b7       	in	r24, 0x3d	; 61
   12b38:	9e b7       	in	r25, 0x3e	; 62
   12b3a:	07 96       	adiw	r24, 0x07	; 7
   12b3c:	0f b6       	in	r0, 0x3f	; 63
   12b3e:	f8 94       	cli
   12b40:	9e bf       	out	0x3e, r25	; 62
   12b42:	0f be       	out	0x3f, r0	; 63
   12b44:	8d bf       	out	0x3d, r24	; 61
            break;
    }
    return(index);
}
   12b46:	0f ef       	ldi	r16, 0xFF	; 255
   12b48:	1f ef       	ldi	r17, 0xFF	; 255
   12b4a:	c8 01       	movw	r24, r16
   12b4c:	df 91       	pop	r29
   12b4e:	cf 91       	pop	r28
   12b50:	1f 91       	pop	r17
   12b52:	0f 91       	pop	r16
   12b54:	08 95       	ret

00012b56 <init_Devices>:

// =============================================
/// @brief Init Config Parser Stack
/// Called only durring power up so we do not have to free memory
void init_Devices()
{
   12b56:	cf 93       	push	r28
   12b58:	df 93       	push	r29
    int i;
    stack_ind = 0;
   12b5a:	10 92 7a 18 	sts	0x187A, r1	; 0x80187a <stack_ind+0x1>
   12b5e:	10 92 79 18 	sts	0x1879, r1	; 0x801879 <stack_ind>
   12b62:	e0 ef       	ldi	r30, 0xF0	; 240
   12b64:	fd e1       	ldi	r31, 0x1D	; 29
    for(i=0;i<MAX_DEVICES;++i)
    {
        Devices[i].TYPE = NO_TYPE;
        Devices[i].ADDRESS = 0;
        Devices[i].PPR = 0xff;
   12b66:	9f ef       	ldi	r25, 0xFF	; 255
        Devices[i].BLOCKS = 0;
        memset(Devices[i].model, 0, sizeof(Devices[i].model) );
   12b68:	80 e2       	ldi	r24, 0x20	; 32
{
    int i;
    stack_ind = 0;
    for(i=0;i<MAX_DEVICES;++i)
    {
        Devices[i].TYPE = NO_TYPE;
   12b6a:	10 82       	st	Z, r1
        Devices[i].ADDRESS = 0;
   12b6c:	11 82       	std	Z+1, r1	; 0x01
        Devices[i].PPR = 0xff;
   12b6e:	92 83       	std	Z+2, r25	; 0x02
        Devices[i].BLOCKS = 0;
   12b70:	13 82       	std	Z+3, r1	; 0x03
   12b72:	14 82       	std	Z+4, r1	; 0x04
   12b74:	15 82       	std	Z+5, r1	; 0x05
   12b76:	16 82       	std	Z+6, r1	; 0x06
        memset(Devices[i].model, 0, sizeof(Devices[i].model) );
   12b78:	df 01       	movw	r26, r30
   12b7a:	17 96       	adiw	r26, 0x07	; 7
   12b7c:	ed 01       	movw	r28, r26
   12b7e:	28 2f       	mov	r18, r24
   12b80:	19 92       	st	Y+, r1
   12b82:	2a 95       	dec	r18
   12b84:	e9 f7       	brne	.-6      	; 0x12b80 <init_Devices+0x2a>
        Devices[i].dev = NULL;
   12b86:	10 a6       	std	Z+40, r1	; 0x28
   12b88:	17 a2       	std	Z+39, r1	; 0x27
        Devices[i].state = NULL;
   12b8a:	12 a6       	std	Z+42, r1	; 0x2a
   12b8c:	11 a6       	std	Z+41, r1	; 0x29
   12b8e:	bb 96       	adiw	r30, 0x2b	; 43
/// Called only durring power up so we do not have to free memory
void init_Devices()
{
    int i;
    stack_ind = 0;
    for(i=0;i<MAX_DEVICES;++i)
   12b90:	cf e1       	ldi	r28, 0x1F	; 31
   12b92:	e4 3f       	cpi	r30, 0xF4	; 244
   12b94:	fc 07       	cpc	r31, r28
   12b96:	49 f7       	brne	.-46     	; 0x12b6a <init_Devices+0x14>
        Devices[i].BLOCKS = 0;
        memset(Devices[i].model, 0, sizeof(Devices[i].model) );
        Devices[i].dev = NULL;
        Devices[i].state = NULL;
    }
}
   12b98:	df 91       	pop	r29
   12b9a:	cf 91       	pop	r28
   12b9c:	08 95       	ret

00012b9e <push_state>:
/// @brief Push Parser State
/// @param state: parser state
/// @return state
int push_state(int state)
{
    if(stack_ind < MAX_STACK)
   12b9e:	20 91 79 18 	lds	r18, 0x1879	; 0x801879 <stack_ind>
   12ba2:	30 91 7a 18 	lds	r19, 0x187A	; 0x80187a <stack_ind+0x1>
   12ba6:	25 30       	cpi	r18, 0x05	; 5
   12ba8:	31 05       	cpc	r19, r1
   12baa:	7c f4       	brge	.+30     	; 0x12bca <push_state+0x2c>
        stack_p[stack_ind++] = state;
   12bac:	a9 01       	movw	r20, r18
   12bae:	4f 5f       	subi	r20, 0xFF	; 255
   12bb0:	5f 4f       	sbci	r21, 0xFF	; 255
   12bb2:	50 93 7a 18 	sts	0x187A, r21	; 0x80187a <stack_ind+0x1>
   12bb6:	40 93 79 18 	sts	0x1879, r20	; 0x801879 <stack_ind>
   12bba:	22 0f       	add	r18, r18
   12bbc:	33 1f       	adc	r19, r19
   12bbe:	f9 01       	movw	r30, r18
   12bc0:	e1 59       	subi	r30, 0x91	; 145
   12bc2:	f7 4e       	sbci	r31, 0xE7	; 231
   12bc4:	80 83       	st	Z, r24
   12bc6:	91 83       	std	Z+1, r25	; 0x01
    else
        return(START_STATE);
    return(state);
   12bc8:	08 95       	ret
int push_state(int state)
{
    if(stack_ind < MAX_STACK)
        stack_p[stack_ind++] = state;
    else
        return(START_STATE);
   12bca:	80 e0       	ldi	r24, 0x00	; 0
   12bcc:	90 e0       	ldi	r25, 0x00	; 0
    return(state);
}
   12bce:	08 95       	ret

00012bd0 <pop_state>:
/// ===============================================
/// @brief Pop Parser State
/// @return state
int pop_state()
{
    if(stack_ind > 0)
   12bd0:	80 91 79 18 	lds	r24, 0x1879	; 0x801879 <stack_ind>
   12bd4:	90 91 7a 18 	lds	r25, 0x187A	; 0x80187a <stack_ind+0x1>
   12bd8:	18 16       	cp	r1, r24
   12bda:	19 06       	cpc	r1, r25
   12bdc:	6c f4       	brge	.+26     	; 0x12bf8 <pop_state+0x28>
        return(stack_p[--stack_ind]);
   12bde:	01 97       	sbiw	r24, 0x01	; 1
   12be0:	90 93 7a 18 	sts	0x187A, r25	; 0x80187a <stack_ind+0x1>
   12be4:	80 93 79 18 	sts	0x1879, r24	; 0x801879 <stack_ind>
   12be8:	88 0f       	add	r24, r24
   12bea:	99 1f       	adc	r25, r25
   12bec:	fc 01       	movw	r30, r24
   12bee:	e1 59       	subi	r30, 0x91	; 145
   12bf0:	f7 4e       	sbci	r31, 0xE7	; 231
   12bf2:	80 81       	ld	r24, Z
   12bf4:	91 81       	ldd	r25, Z+1	; 0x01
   12bf6:	08 95       	ret
    else
        return(START_STATE);
   12bf8:	80 e0       	ldi	r24, 0x00	; 0
   12bfa:	90 e0       	ldi	r25, 0x00	; 0
}
   12bfc:	08 95       	ret

00012bfe <assign_value>:
/// @param[in] maxval: maximum value
/// @param[in] *val: value to set
///
/// @return  1 is matched and value in range, 0 not matched or out of range
bool assign_value(char *str, uint32_t minval, uint32_t maxval, uint32_t *val)
{
   12bfe:	a0 e0       	ldi	r26, 0x00	; 0
   12c00:	b0 e0       	ldi	r27, 0x00	; 0
   12c02:	e5 e0       	ldi	r30, 0x05	; 5
   12c04:	f6 e9       	ldi	r31, 0x96	; 150
   12c06:	0c 94 e2 e5 	jmp	0x1cbc4	; 0x1cbc4 <__prologue_saves__+0x4>
   12c0a:	2a 01       	movw	r4, r20
   12c0c:	3b 01       	movw	r6, r22
   12c0e:	48 01       	movw	r8, r16
   12c10:	59 01       	movw	r10, r18
   12c12:	87 01       	movw	r16, r14
    uint32_t tmp;
    int bad = 0;
    char *ptr;

    // Skip spaces before assignment
    ptr = skipspaces(str);
   12c14:	0e 94 bd 32 	call	0x657a	; 0x657a <skipspaces>
   12c18:	ec 01       	movw	r28, r24
    // Skip optional '='
    if(*ptr == '=')
   12c1a:	88 81       	ld	r24, Y
   12c1c:	8d 33       	cpi	r24, 0x3D	; 61
   12c1e:	29 f4       	brne	.+10     	; 0x12c2a <assign_value+0x2c>
    {
        ++ptr;
        // skip spaces after assignment
        ptr = skipspaces(ptr);
   12c20:	ce 01       	movw	r24, r28
   12c22:	01 96       	adiw	r24, 0x01	; 1
   12c24:	0e 94 bd 32 	call	0x657a	; 0x657a <skipspaces>
   12c28:	ec 01       	movw	r28, r24
    }
    if(!*ptr)
   12c2a:	88 81       	ld	r24, Y
   12c2c:	81 11       	cpse	r24, r1
   12c2e:	17 c0       	rjmp	.+46     	; 0x12c5e <assign_value+0x60>
    {
        if(debuglevel & 1)
   12c30:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   12c34:	80 ff       	sbrs	r24, 0
   12c36:	76 c0       	rjmp	.+236    	; 0x12d24 <assign_value+0x126>
            printf("line:%d, missing value\n", lines);
   12c38:	80 91 64 18 	lds	r24, 0x1864	; 0x801864 <lines+0x1>
   12c3c:	8f 93       	push	r24
   12c3e:	80 91 63 18 	lds	r24, 0x1863	; 0x801863 <lines>
   12c42:	8f 93       	push	r24
   12c44:	88 e9       	ldi	r24, 0x98	; 152
   12c46:	9d e1       	ldi	r25, 0x1D	; 29
   12c48:	1f 92       	push	r1
   12c4a:	9f 93       	push	r25
   12c4c:	8f 93       	push	r24
   12c4e:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   12c52:	0f 90       	pop	r0
   12c54:	0f 90       	pop	r0
   12c56:	0f 90       	pop	r0
   12c58:	0f 90       	pop	r0
   12c5a:	0f 90       	pop	r0
   12c5c:	63 c0       	rjmp	.+198    	; 0x12d24 <assign_value+0x126>
        bad = 1;
    }
    if(!bad)
    {
        // FIXME detect bad numbers
        tmp = get_value(ptr);
   12c5e:	ce 01       	movw	r24, r28
   12c60:	0e 94 72 34 	call	0x68e4	; 0x68e4 <get_value>
   12c64:	6b 01       	movw	r12, r22
   12c66:	7c 01       	movw	r14, r24
        *val = tmp;
   12c68:	f8 01       	movw	r30, r16
   12c6a:	60 83       	st	Z, r22
   12c6c:	71 83       	std	Z+1, r23	; 0x01
   12c6e:	82 83       	std	Z+2, r24	; 0x02
   12c70:	93 83       	std	Z+3, r25	; 0x03
        if((minval && (tmp < minval)))
   12c72:	41 14       	cp	r4, r1
   12c74:	51 04       	cpc	r5, r1
   12c76:	61 04       	cpc	r6, r1
   12c78:	71 04       	cpc	r7, r1
   12c7a:	39 f1       	breq	.+78     	; 0x12cca <assign_value+0xcc>
   12c7c:	c4 14       	cp	r12, r4
   12c7e:	d5 04       	cpc	r13, r5
   12c80:	e6 04       	cpc	r14, r6
   12c82:	f7 04       	cpc	r15, r7
   12c84:	10 f5       	brcc	.+68     	; 0x12cca <assign_value+0xcc>
        {
            printf("line:%d, %s is below range %d\n", lines, ptr,(int)minval);
   12c86:	5f 92       	push	r5
   12c88:	4f 92       	push	r4
   12c8a:	df 93       	push	r29
   12c8c:	cf 93       	push	r28
   12c8e:	80 91 64 18 	lds	r24, 0x1864	; 0x801864 <lines+0x1>
   12c92:	8f 93       	push	r24
   12c94:	80 91 63 18 	lds	r24, 0x1863	; 0x801863 <lines>
   12c98:	8f 93       	push	r24
   12c9a:	89 e7       	ldi	r24, 0x79	; 121
   12c9c:	9d e1       	ldi	r25, 0x1D	; 29
   12c9e:	1f 92       	push	r1
   12ca0:	9f 93       	push	r25
   12ca2:	8f 93       	push	r24
   12ca4:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
            bad = 1;
        }
        if((maxval != 0xffffffffUL) && (tmp > maxval))
   12ca8:	ed b7       	in	r30, 0x3d	; 61
   12caa:	fe b7       	in	r31, 0x3e	; 62
   12cac:	39 96       	adiw	r30, 0x09	; 9
   12cae:	0f b6       	in	r0, 0x3f	; 63
   12cb0:	f8 94       	cli
   12cb2:	fe bf       	out	0x3e, r31	; 62
   12cb4:	0f be       	out	0x3f, r0	; 63
   12cb6:	ed bf       	out	0x3d, r30	; 61
   12cb8:	ff ef       	ldi	r31, 0xFF	; 255
   12cba:	8f 16       	cp	r8, r31
   12cbc:	9f 06       	cpc	r9, r31
   12cbe:	af 06       	cpc	r10, r31
   12cc0:	bf 06       	cpc	r11, r31
   12cc2:	81 f1       	breq	.+96     	; 0x12d24 <assign_value+0x126>
        tmp = get_value(ptr);
        *val = tmp;
        if((minval && (tmp < minval)))
        {
            printf("line:%d, %s is below range %d\n", lines, ptr,(int)minval);
            bad = 1;
   12cc4:	81 e0       	ldi	r24, 0x01	; 1
   12cc6:	90 e0       	ldi	r25, 0x00	; 0
   12cc8:	08 c0       	rjmp	.+16     	; 0x12cda <assign_value+0xdc>
        }
        if((maxval != 0xffffffffUL) && (tmp > maxval))
   12cca:	ff ef       	ldi	r31, 0xFF	; 255
   12ccc:	8f 16       	cp	r8, r31
   12cce:	9f 06       	cpc	r9, r31
   12cd0:	af 06       	cpc	r10, r31
   12cd2:	bf 06       	cpc	r11, r31
   12cd4:	21 f1       	breq	.+72     	; 0x12d1e <assign_value+0x120>
   12cd6:	80 e0       	ldi	r24, 0x00	; 0
   12cd8:	90 e0       	ldi	r25, 0x00	; 0
   12cda:	8c 14       	cp	r8, r12
   12cdc:	9d 04       	cpc	r9, r13
   12cde:	ae 04       	cpc	r10, r14
   12ce0:	bf 04       	cpc	r11, r15
   12ce2:	d0 f4       	brcc	.+52     	; 0x12d18 <assign_value+0x11a>
        {
            printf("line:%d, %s is above range %d\n", lines, ptr,(int)maxval);
   12ce4:	9f 92       	push	r9
   12ce6:	8f 92       	push	r8
   12ce8:	df 93       	push	r29
   12cea:	cf 93       	push	r28
   12cec:	80 91 64 18 	lds	r24, 0x1864	; 0x801864 <lines+0x1>
   12cf0:	8f 93       	push	r24
   12cf2:	80 91 63 18 	lds	r24, 0x1863	; 0x801863 <lines>
   12cf6:	8f 93       	push	r24
   12cf8:	8a e5       	ldi	r24, 0x5A	; 90
   12cfa:	9d e1       	ldi	r25, 0x1D	; 29
   12cfc:	1f 92       	push	r1
   12cfe:	9f 93       	push	r25
   12d00:	8f 93       	push	r24
   12d02:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   12d06:	ed b7       	in	r30, 0x3d	; 61
   12d08:	fe b7       	in	r31, 0x3e	; 62
   12d0a:	39 96       	adiw	r30, 0x09	; 9
   12d0c:	0f b6       	in	r0, 0x3f	; 63
   12d0e:	f8 94       	cli
   12d10:	fe bf       	out	0x3e, r31	; 62
   12d12:	0f be       	out	0x3f, r0	; 63
   12d14:	ed bf       	out	0x3d, r30	; 61
   12d16:	06 c0       	rjmp	.+12     	; 0x12d24 <assign_value+0x126>
            bad = 1;
        }
    }
    if(bad)
        return(0);
   12d18:	f1 e0       	ldi	r31, 0x01	; 1
   12d1a:	8f 27       	eor	r24, r31
   12d1c:	05 c0       	rjmp	.+10     	; 0x12d28 <assign_value+0x12a>
    return(1);
   12d1e:	81 e0       	ldi	r24, 0x01	; 1
   12d20:	90 e0       	ldi	r25, 0x00	; 0
   12d22:	02 c0       	rjmp	.+4      	; 0x12d28 <assign_value+0x12a>
            printf("line:%d, %s is above range %d\n", lines, ptr,(int)maxval);
            bad = 1;
        }
    }
    if(bad)
        return(0);
   12d24:	80 e0       	ldi	r24, 0x00	; 0
   12d26:	90 e0       	ldi	r25, 0x00	; 0
    return(1);
}
   12d28:	cd b7       	in	r28, 0x3d	; 61
   12d2a:	de b7       	in	r29, 0x3e	; 62
   12d2c:	e0 e1       	ldi	r30, 0x10	; 16
   12d2e:	0c 94 fe e5 	jmp	0x1cbfc	; 0x1cbfc <__epilogue_restores__+0x4>

00012d32 <set_Config_Defaults>:
/// ===============================================
///@brief Set Defaults for any missing disk or printer devices
/// These are only used if the Config file omits them or is empty
/// @return  void
void set_Config_Defaults()
{
   12d32:	08 95       	ret

00012d34 <hpdir_set_device>:
{
    SS80DiskType *SS80p = NULL;
#ifdef AMIGO
    AMIGODiskType *AMIGOp = NULL;
#endif
	if(Devices[index].TYPE == SS80_TYPE)
   12d34:	2b e2       	ldi	r18, 0x2B	; 43
   12d36:	28 9f       	mul	r18, r24
   12d38:	f0 01       	movw	r30, r0
   12d3a:	29 9f       	mul	r18, r25
   12d3c:	f0 0d       	add	r31, r0
   12d3e:	11 24       	eor	r1, r1
   12d40:	e0 51       	subi	r30, 0x10	; 16
   12d42:	f2 4e       	sbci	r31, 0xE2	; 226
   12d44:	20 81       	ld	r18, Z
   12d46:	23 30       	cpi	r18, 0x03	; 3
   12d48:	e1 f5       	brne	.+120    	; 0x12dc2 <hpdir_set_device+0x8e>
	{
		SS80p = (SS80DiskType *) Devices[index].dev;
   12d4a:	07 a0       	ldd	r0, Z+39	; 0x27
   12d4c:	f0 a5       	ldd	r31, Z+40	; 0x28
   12d4e:	e0 2d       	mov	r30, r0
		return;
	}

	if(Devices[index].TYPE == SS80_TYPE)
	{
		SS80p->CONFIG.ID 				= hpdir.ID;
   12d50:	20 91 74 20 	lds	r18, 0x2074	; 0x802074 <hpdir+0x80>
   12d54:	30 91 75 20 	lds	r19, 0x2075	; 0x802075 <hpdir+0x81>
   12d58:	34 a3       	std	Z+36, r19	; 0x24
   12d5a:	23 a3       	std	Z+35, r18	; 0x23
		SS80p->UNIT.DEVICE_NUMBER 		= hpdir.DEVICE_NUMBER;
   12d5c:	40 91 80 20 	lds	r20, 0x2080	; 0x802080 <hpdir+0x8c>
   12d60:	50 91 81 20 	lds	r21, 0x2081	; 0x802081 <hpdir+0x8d>
   12d64:	60 91 82 20 	lds	r22, 0x2082	; 0x802082 <hpdir+0x8e>
   12d68:	70 91 83 20 	lds	r23, 0x2083	; 0x802083 <hpdir+0x8f>
   12d6c:	43 a7       	std	Z+43, r20	; 0x2b
   12d6e:	54 a7       	std	Z+44, r21	; 0x2c
   12d70:	65 a7       	std	Z+45, r22	; 0x2d
   12d72:	76 a7       	std	Z+46, r23	; 0x2e
		SS80p->UNIT.BYTES_PER_BLOCK 	= hpdir.BYTES_PER_SECTOR;
   12d74:	20 91 94 20 	lds	r18, 0x2094	; 0x802094 <hpdir+0xa0>
   12d78:	30 91 95 20 	lds	r19, 0x2095	; 0x802095 <hpdir+0xa1>
   12d7c:	30 ab       	std	Z+48, r19	; 0x30
   12d7e:	27 a7       	std	Z+47, r18	; 0x2f

		// CHS NOT used in this emulator!
		SS80p->VOLUME.MAX_CYLINDER 		= 0;	// hpdir.CYLINDERS-1;
   12d80:	df 01       	movw	r26, r30
   12d82:	de 96       	adiw	r26, 0x3e	; 62
   12d84:	1d 92       	st	X+, r1
   12d86:	1d 92       	st	X+, r1
   12d88:	1d 92       	st	X+, r1
   12d8a:	1c 92       	st	X, r1
   12d8c:	13 97       	sbiw	r26, 0x03	; 3
		SS80p->VOLUME.MAX_HEAD 			= 0;	// hpdir.HEADS-1;
   12d8e:	14 96       	adiw	r26, 0x04	; 4
   12d90:	1c 92       	st	X, r1
		SS80p->VOLUME.MAX_SECTOR 		= 0;	// hpdir.SECTORS-1;
   12d92:	11 96       	adiw	r26, 0x01	; 1
   12d94:	1d 92       	st	X+, r1
   12d96:	1c 92       	st	X, r1

		SS80p->VOLUME.MAX_BLOCK_NUMBER 	= hpdir.BLOCKS-1;
   12d98:	eb 5b       	subi	r30, 0xBB	; 187
   12d9a:	ff 4f       	sbci	r31, 0xFF	; 255
   12d9c:	40 91 a0 20 	lds	r20, 0x20A0	; 0x8020a0 <hpdir+0xac>
   12da0:	50 91 a1 20 	lds	r21, 0x20A1	; 0x8020a1 <hpdir+0xad>
   12da4:	60 91 a2 20 	lds	r22, 0x20A2	; 0x8020a2 <hpdir+0xae>
   12da8:	70 91 a3 20 	lds	r23, 0x20A3	; 0x8020a3 <hpdir+0xaf>
   12dac:	41 50       	subi	r20, 0x01	; 1
   12dae:	51 09       	sbc	r21, r1
   12db0:	61 09       	sbc	r22, r1
   12db2:	71 09       	sbc	r23, r1
   12db4:	40 83       	st	Z, r20
   12db6:	51 83       	std	Z+1, r21	; 0x01
   12db8:	62 83       	std	Z+2, r22	; 0x02
   12dba:	73 83       	std	Z+3, r23	; 0x03
///@return 1 on sucess or 0 on fail
void hpdir_set_device(int index)
{
    SS80DiskType *SS80p = NULL;
#ifdef AMIGO
    AMIGODiskType *AMIGOp = NULL;
   12dbc:	e0 e0       	ldi	r30, 0x00	; 0
   12dbe:	f0 e0       	ldi	r31, 0x00	; 0
   12dc0:	11 c0       	rjmp	.+34     	; 0x12de4 <hpdir_set_device+0xb0>
	if(Devices[index].TYPE == SS80_TYPE)
	{
		SS80p = (SS80DiskType *) Devices[index].dev;
	}
#ifdef AMIGO
	else if(Devices[index].TYPE == AMIGO_TYPE)
   12dc2:	21 30       	cpi	r18, 0x01	; 1
   12dc4:	21 f4       	brne	.+8      	; 0x12dce <hpdir_set_device+0x9a>
	{
		AMIGOp = (AMIGODiskType *) Devices[index].dev;
   12dc6:	07 a0       	ldd	r0, Z+39	; 0x27
   12dc8:	f0 a5       	ldd	r31, Z+40	; 0x28
   12dca:	e0 2d       	mov	r30, r0
   12dcc:	0b c0       	rjmp	.+22     	; 0x12de4 <hpdir_set_device+0xb0>
	}
#endif
	else
	{
		printf("hpdir_parameters invalid TYPE\n");
   12dce:	8b e3       	ldi	r24, 0x3B	; 59
   12dd0:	9d e1       	ldi	r25, 0x1D	; 29
   12dd2:	1f 92       	push	r1
   12dd4:	9f 93       	push	r25
   12dd6:	8f 93       	push	r24
   12dd8:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
		return;
   12ddc:	0f 90       	pop	r0
   12dde:	0f 90       	pop	r0
   12de0:	0f 90       	pop	r0
   12de2:	08 95       	ret

		SS80p->VOLUME.MAX_BLOCK_NUMBER 	= hpdir.BLOCKS-1;
	}

#ifdef AMIGO
	if(Devices[index].TYPE == AMIGO_TYPE)
   12de4:	2b e2       	ldi	r18, 0x2B	; 43
   12de6:	28 9f       	mul	r18, r24
   12de8:	d0 01       	movw	r26, r0
   12dea:	29 9f       	mul	r18, r25
   12dec:	b0 0d       	add	r27, r0
   12dee:	11 24       	eor	r1, r1
   12df0:	a0 51       	subi	r26, 0x10	; 16
   12df2:	b2 4e       	sbci	r27, 0xE2	; 226
   12df4:	2c 91       	ld	r18, X
   12df6:	21 30       	cpi	r18, 0x01	; 1
   12df8:	f1 f4       	brne	.+60     	; 0x12e36 <hpdir_set_device+0x102>
	{
		AMIGOp->CONFIG.ID = hpdir.ID;
   12dfa:	20 91 74 20 	lds	r18, 0x2074	; 0x802074 <hpdir+0x80>
   12dfe:	30 91 75 20 	lds	r19, 0x2075	; 0x802075 <hpdir+0x81>
   12e02:	34 a3       	std	Z+36, r19	; 0x24
   12e04:	23 a3       	std	Z+35, r18	; 0x23
		AMIGOp->GEOMETRY.BYTES_PER_SECTOR = hpdir.BYTES_PER_SECTOR;
   12e06:	20 91 94 20 	lds	r18, 0x2094	; 0x802094 <hpdir+0xa0>
   12e0a:	30 91 95 20 	lds	r19, 0x2095	; 0x802095 <hpdir+0xa1>
   12e0e:	36 a3       	std	Z+38, r19	; 0x26
   12e10:	25 a3       	std	Z+37, r18	; 0x25
		AMIGOp->GEOMETRY.SECTORS_PER_TRACK = hpdir.SECTORS;
   12e12:	20 91 90 20 	lds	r18, 0x2090	; 0x802090 <hpdir+0x9c>
   12e16:	30 91 91 20 	lds	r19, 0x2091	; 0x802091 <hpdir+0x9d>
   12e1a:	30 a7       	std	Z+40, r19	; 0x28
   12e1c:	27 a3       	std	Z+39, r18	; 0x27
		AMIGOp->GEOMETRY.HEADS = hpdir.HEADS;
   12e1e:	20 91 8c 20 	lds	r18, 0x208C	; 0x80208c <hpdir+0x98>
   12e22:	30 91 8d 20 	lds	r19, 0x208D	; 0x80208d <hpdir+0x99>
   12e26:	32 a7       	std	Z+42, r19	; 0x2a
   12e28:	21 a7       	std	Z+41, r18	; 0x29
		AMIGOp->GEOMETRY.CYLINDERS = hpdir.CYLINDERS;
   12e2a:	20 91 88 20 	lds	r18, 0x2088	; 0x802088 <hpdir+0x94>
   12e2e:	30 91 89 20 	lds	r19, 0x2089	; 0x802089 <hpdir+0x95>
   12e32:	34 a7       	std	Z+44, r19	; 0x2c
   12e34:	23 a7       	std	Z+43, r18	; 0x2b
	}
#endif
	Devices[index].BLOCKS = hpdir.BLOCKS;
   12e36:	4b e2       	ldi	r20, 0x2B	; 43
   12e38:	48 9f       	mul	r20, r24
   12e3a:	90 01       	movw	r18, r0
   12e3c:	49 9f       	mul	r20, r25
   12e3e:	30 0d       	add	r19, r0
   12e40:	11 24       	eor	r1, r1
   12e42:	f9 01       	movw	r30, r18
   12e44:	e0 51       	subi	r30, 0x10	; 16
   12e46:	f2 4e       	sbci	r31, 0xE2	; 226
   12e48:	80 91 a0 20 	lds	r24, 0x20A0	; 0x8020a0 <hpdir+0xac>
   12e4c:	90 91 a1 20 	lds	r25, 0x20A1	; 0x8020a1 <hpdir+0xad>
   12e50:	a0 91 a2 20 	lds	r26, 0x20A2	; 0x8020a2 <hpdir+0xae>
   12e54:	b0 91 a3 20 	lds	r27, 0x20A3	; 0x8020a3 <hpdir+0xaf>
   12e58:	83 83       	std	Z+3, r24	; 0x03
   12e5a:	94 83       	std	Z+4, r25	; 0x04
   12e5c:	a5 83       	std	Z+5, r26	; 0x05
   12e5e:	b6 83       	std	Z+6, r27	; 0x06
	strncpy(Devices[index].model, hpdir.model, sizeof(Devices[index].model) -2);
   12e60:	4e e1       	ldi	r20, 0x1E	; 30
   12e62:	50 e0       	ldi	r21, 0x00	; 0
   12e64:	64 ef       	ldi	r22, 0xF4	; 244
   12e66:	7f e1       	ldi	r23, 0x1F	; 31
   12e68:	c9 01       	movw	r24, r18
   12e6a:	89 50       	subi	r24, 0x09	; 9
   12e6c:	92 4e       	sbci	r25, 0xE2	; 226
   12e6e:	0c 94 5e 32 	jmp	0x64bc	; 0x64bc <strncpy>
   12e72:	08 95       	ret

00012e74 <hpdir_set_parameters>:
///@param[in] index: Devices index
///@param[in] model: model string
///
///@return void
void hpdir_set_parameters(int index, char *model)
{
   12e74:	cf 93       	push	r28
   12e76:	df 93       	push	r29
   12e78:	ec 01       	movw	r28, r24
   12e7a:	cb 01       	movw	r24, r22
	if ( hpdir_find_drive( model, 0 ,1) )
   12e7c:	41 e0       	ldi	r20, 0x01	; 1
   12e7e:	50 e0       	ldi	r21, 0x00	; 0
   12e80:	60 e0       	ldi	r22, 0x00	; 0
   12e82:	70 e0       	ldi	r23, 0x00	; 0
   12e84:	0e 94 9a a6 	call	0x14d34	; 0x14d34 <hpdir_find_drive>
   12e88:	89 2b       	or	r24, r25
   12e8a:	11 f0       	breq	.+4      	; 0x12e90 <hpdir_set_parameters+0x1c>
		hpdir_set_device(index);
   12e8c:	ce 01       	movw	r24, r28
   12e8e:	52 df       	rcall	.-348    	; 0x12d34 <hpdir_set_device>
}
   12e90:	df 91       	pop	r29
   12e92:	cf 91       	pop	r28
   12e94:	08 95       	ret

00012e96 <Post_Config>:

/// ===============================================
/// @brief Post Process COnfiguration file after reading
/// @return  void
void Post_Config()
{
   12e96:	4f 92       	push	r4
   12e98:	5f 92       	push	r5
   12e9a:	6f 92       	push	r6
   12e9c:	7f 92       	push	r7
   12e9e:	8f 92       	push	r8
   12ea0:	af 92       	push	r10
   12ea2:	bf 92       	push	r11
   12ea4:	cf 92       	push	r12
   12ea6:	df 92       	push	r13
   12ea8:	ef 92       	push	r14
   12eaa:	0f 93       	push	r16
   12eac:	1f 93       	push	r17
   12eae:	cf 93       	push	r28
   12eb0:	df 93       	push	r29
   12eb2:	c0 ef       	ldi	r28, 0xF0	; 240
   12eb4:	dd e1       	ldi	r29, 0x1D	; 29
   12eb6:	84 ef       	ldi	r24, 0xF4	; 244
   12eb8:	48 2e       	mov	r4, r24
   12eba:	8f e1       	ldi	r24, 0x1F	; 31
   12ebc:	58 2e       	mov	r5, r24
        if(Devices[i].TYPE == AMIGO_TYPE )
        {
            AMIGOp = (AMIGODiskType *)Devices[i].dev;
			if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
			{
				AMIGOp->GEOMETRY.BYTES_PER_SECTOR = 256;
   12ebe:	a1 2c       	mov	r10, r1
   12ec0:	bb 24       	eor	r11, r11
   12ec2:	b3 94       	inc	r11
				printf("Warning: %s BYTES_PER_SECTOR != 256, Adjusting to 256\n", Devices[i].model);
   12ec4:	8e ec       	ldi	r24, 0xCE	; 206
   12ec6:	9c e1       	ldi	r25, 0x1C	; 28
   12ec8:	6c 01       	movw	r12, r24
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
			if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
			{
				// SS80p->UNIT.BYTES_PER_BLOCK = 256;
				printf("Warning: %s BYTES_PER_BLOCK != 256, Adjusting to 256\n", Devices[i].model);
   12eca:	85 e0       	ldi	r24, 0x05	; 5
   12ecc:	9d e1       	ldi	r25, 0x1D	; 29
   12ece:	3c 01       	movw	r6, r24
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   12ed0:	88 81       	ld	r24, Y
   12ed2:	88 23       	and	r24, r24
   12ed4:	09 f4       	brne	.+2      	; 0x12ed8 <Post_Config+0x42>
   12ed6:	5f c0       	rjmp	.+190    	; 0x12f96 <Post_Config+0x100>
            continue;

        if(Devices[i].TYPE == SS80_TYPE)
   12ed8:	83 30       	cpi	r24, 0x03	; 3
   12eda:	21 f5       	brne	.+72     	; 0x12f24 <Post_Config+0x8e>
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
   12edc:	0f a1       	ldd	r16, Y+39	; 0x27
   12ede:	18 a5       	ldd	r17, Y+40	; 0x28
			if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
   12ee0:	f8 01       	movw	r30, r16
   12ee2:	87 a5       	ldd	r24, Z+47	; 0x2f
   12ee4:	90 a9       	ldd	r25, Z+48	; 0x30
   12ee6:	81 15       	cp	r24, r1
   12ee8:	91 40       	sbci	r25, 0x01	; 1
   12eea:	71 f0       	breq	.+28     	; 0x12f08 <Post_Config+0x72>
			{
				// SS80p->UNIT.BYTES_PER_BLOCK = 256;
				printf("Warning: %s BYTES_PER_BLOCK != 256, Adjusting to 256\n", Devices[i].model);
   12eec:	ce 01       	movw	r24, r28
   12eee:	07 96       	adiw	r24, 0x07	; 7
   12ef0:	9f 93       	push	r25
   12ef2:	8f 93       	push	r24
   12ef4:	1f 92       	push	r1
   12ef6:	7f 92       	push	r7
   12ef8:	6f 92       	push	r6
   12efa:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   12efe:	0f 90       	pop	r0
   12f00:	0f 90       	pop	r0
   12f02:	0f 90       	pop	r0
   12f04:	0f 90       	pop	r0
   12f06:	0f 90       	pop	r0
			}
			sectors = SS80p->VOLUME.MAX_BLOCK_NUMBER+1;
   12f08:	f8 01       	movw	r30, r16
   12f0a:	eb 5b       	subi	r30, 0xBB	; 187
   12f0c:	ff 4f       	sbci	r31, 0xFF	; 255
			Devices[i].BLOCKS = sectors;
   12f0e:	80 81       	ld	r24, Z
   12f10:	91 81       	ldd	r25, Z+1	; 0x01
   12f12:	a2 81       	ldd	r26, Z+2	; 0x02
   12f14:	b3 81       	ldd	r27, Z+3	; 0x03
   12f16:	01 96       	adiw	r24, 0x01	; 1
   12f18:	a1 1d       	adc	r26, r1
   12f1a:	b1 1d       	adc	r27, r1
   12f1c:	8b 83       	std	Y+3, r24	; 0x03
   12f1e:	9c 83       	std	Y+4, r25	; 0x04
   12f20:	ad 83       	std	Y+5, r26	; 0x05
   12f22:	be 83       	std	Y+6, r27	; 0x06
        } // SS80_TYPE

#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   12f24:	88 81       	ld	r24, Y
   12f26:	81 30       	cpi	r24, 0x01	; 1
   12f28:	b1 f5       	brne	.+108    	; 0x12f96 <Post_Config+0x100>
        {
            AMIGOp = (AMIGODiskType *)Devices[i].dev;
   12f2a:	0f a1       	ldd	r16, Y+39	; 0x27
   12f2c:	18 a5       	ldd	r17, Y+40	; 0x28
			if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
   12f2e:	f8 01       	movw	r30, r16
   12f30:	85 a1       	ldd	r24, Z+37	; 0x25
   12f32:	96 a1       	ldd	r25, Z+38	; 0x26
   12f34:	81 15       	cp	r24, r1
   12f36:	91 40       	sbci	r25, 0x01	; 1
   12f38:	89 f0       	breq	.+34     	; 0x12f5c <Post_Config+0xc6>
			{
				AMIGOp->GEOMETRY.BYTES_PER_SECTOR = 256;
   12f3a:	f8 01       	movw	r30, r16
   12f3c:	b6 a2       	std	Z+38, r11	; 0x26
   12f3e:	a5 a2       	std	Z+37, r10	; 0x25
				printf("Warning: %s BYTES_PER_SECTOR != 256, Adjusting to 256\n", Devices[i].model);
   12f40:	ce 01       	movw	r24, r28
   12f42:	07 96       	adiw	r24, 0x07	; 7
   12f44:	9f 93       	push	r25
   12f46:	8f 93       	push	r24
   12f48:	1f 92       	push	r1
   12f4a:	df 92       	push	r13
   12f4c:	cf 92       	push	r12
   12f4e:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   12f52:	0f 90       	pop	r0
   12f54:	0f 90       	pop	r0
   12f56:	0f 90       	pop	r0
   12f58:	0f 90       	pop	r0
   12f5a:	0f 90       	pop	r0
			}
			sectors = AMIGOp->GEOMETRY.SECTORS_PER_TRACK
				 * AMIGOp->GEOMETRY.HEADS
				 * AMIGOp->GEOMETRY.CYLINDERS;
			Devices[i].BLOCKS = sectors;
   12f5c:	f8 01       	movw	r30, r16
   12f5e:	27 a1       	ldd	r18, Z+39	; 0x27
   12f60:	30 a5       	ldd	r19, Z+40	; 0x28
   12f62:	81 a5       	ldd	r24, Z+41	; 0x29
   12f64:	92 a5       	ldd	r25, Z+42	; 0x2a
   12f66:	28 9f       	mul	r18, r24
   12f68:	a0 01       	movw	r20, r0
   12f6a:	29 9f       	mul	r18, r25
   12f6c:	50 0d       	add	r21, r0
   12f6e:	38 9f       	mul	r19, r24
   12f70:	50 0d       	add	r21, r0
   12f72:	11 24       	eor	r1, r1
   12f74:	23 a5       	ldd	r18, Z+43	; 0x2b
   12f76:	34 a5       	ldd	r19, Z+44	; 0x2c
   12f78:	42 9f       	mul	r20, r18
   12f7a:	c0 01       	movw	r24, r0
   12f7c:	43 9f       	mul	r20, r19
   12f7e:	90 0d       	add	r25, r0
   12f80:	52 9f       	mul	r21, r18
   12f82:	90 0d       	add	r25, r0
   12f84:	11 24       	eor	r1, r1
   12f86:	09 2e       	mov	r0, r25
   12f88:	00 0c       	add	r0, r0
   12f8a:	aa 0b       	sbc	r26, r26
   12f8c:	bb 0b       	sbc	r27, r27
   12f8e:	8b 83       	std	Y+3, r24	; 0x03
   12f90:	9c 83       	std	Y+4, r25	; 0x04
   12f92:	ad 83       	std	Y+5, r26	; 0x05
   12f94:	be 83       	std	Y+6, r27	; 0x06
   12f96:	ab 96       	adiw	r28, 0x2b	; 43
#ifdef AMIGO
    ///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
   12f98:	4c 16       	cp	r4, r28
   12f9a:	5d 06       	cpc	r5, r29
   12f9c:	09 f0       	breq	.+2      	; 0x12fa0 <Post_Config+0x10a>
   12f9e:	98 cf       	rjmp	.-208    	; 0x12ed0 <Post_Config+0x3a>
				 * AMIGOp->GEOMETRY.CYLINDERS;
			Devices[i].BLOCKS = sectors;
        } 
#endif // #ifdef AMIGO
    }
}
   12fa0:	df 91       	pop	r29
   12fa2:	cf 91       	pop	r28
   12fa4:	1f 91       	pop	r17
   12fa6:	0f 91       	pop	r16
   12fa8:	ef 90       	pop	r14
   12faa:	df 90       	pop	r13
   12fac:	cf 90       	pop	r12
   12fae:	bf 90       	pop	r11
   12fb0:	af 90       	pop	r10
   12fb2:	8f 90       	pop	r8
   12fb4:	7f 90       	pop	r7
   12fb6:	6f 90       	pop	r6
   12fb8:	5f 90       	pop	r5
   12fba:	4f 90       	pop	r4
   12fbc:	08 95       	ret

00012fbe <Read_Config>:
/// Set all drive parameters and debuglevel 
///
/// @param name: config file name to process
/// @return  number of parse errors
int Read_Config(char *name)
{
   12fbe:	aa e9       	ldi	r26, 0x9A	; 154
   12fc0:	b0 e0       	ldi	r27, 0x00	; 0
   12fc2:	e5 ee       	ldi	r30, 0xE5	; 229
   12fc4:	f7 e9       	ldi	r31, 0x97	; 151
   12fc6:	0c 94 e0 e5 	jmp	0x1cbc0	; 0x1cbc0 <__prologue_saves__>
   12fca:	18 2f       	mov	r17, r24
#endif

    char *ptr;
    char str[128];

    init_Devices();
   12fcc:	09 2f       	mov	r16, r25

    lines = 0;
   12fce:	c3 dd       	rcall	.-1146   	; 0x12b56 <init_Devices>
   12fd0:	10 92 64 18 	sts	0x1864, r1	; 0x801864 <lines+0x1>
   12fd4:	10 92 63 18 	sts	0x1863, r1	; 0x801863 <lines>

    printf("Reading: %s\n", name);
   12fd8:	0f 93       	push	r16
   12fda:	1f 93       	push	r17
   12fdc:	81 ec       	ldi	r24, 0xC1	; 193
   12fde:	9c e1       	ldi	r25, 0x1C	; 28
   12fe0:	1f 92       	push	r1
   12fe2:	9f 93       	push	r25
   12fe4:	8f 93       	push	r24
   12fe6:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    cfg = fopen(name, "rb");
   12fea:	66 e8       	ldi	r22, 0x86	; 134
   12fec:	78 e0       	ldi	r23, 0x08	; 8
   12fee:	81 2f       	mov	r24, r17
   12ff0:	90 2f       	mov	r25, r16
   12ff2:	0e 94 40 7f 	call	0xfe80	; 0xfe80 <fopen>
   12ff6:	c9 57       	subi	r28, 0x79	; 121
   12ff8:	df 4f       	sbci	r29, 0xFF	; 255
   12ffa:	99 83       	std	Y+1, r25	; 0x01
   12ffc:	88 83       	st	Y, r24
   12ffe:	c7 58       	subi	r28, 0x87	; 135
    if(cfg == NULL)
   13000:	d0 40       	sbci	r29, 0x00	; 0
   13002:	0f 90       	pop	r0
   13004:	0f 90       	pop	r0
   13006:	0f 90       	pop	r0
   13008:	0f 90       	pop	r0
   1300a:	0f 90       	pop	r0
   1300c:	89 2b       	or	r24, r25
   1300e:	09 f4       	brne	.+2      	; 0x13012 <Read_Config+0x54>
   13010:	53 c0       	rjmp	.+166    	; 0x130b8 <Read_Config+0xfa>
   13012:	21 2c       	mov	r2, r1
   13014:	31 2c       	mov	r3, r1
   13016:	41 2c       	mov	r4, r1
   13018:	51 2c       	mov	r5, r1
   1301a:	cb 57       	subi	r28, 0x7B	; 123
   1301c:	df 4f       	sbci	r29, 0xFF	; 255
   1301e:	19 82       	std	Y+1, r1	; 0x01
   13020:	18 82       	st	Y, r1
   13022:	c5 58       	subi	r28, 0x85	; 133
   13024:	d0 40       	sbci	r29, 0x00	; 0
   13026:	81 2c       	mov	r8, r1
   13028:	91 2c       	mov	r9, r1
   1302a:	a1 2c       	mov	r10, r1
   1302c:	b1 2c       	mov	r11, r1
   1302e:	61 2c       	mov	r6, r1
            }
            break;
#endif // #ifdef AMIGO

        default:
            printf("Unexpected STATE: %s, at line:%d\n", ptr,lines);
   13030:	71 2c       	mov	r7, r1
   13032:	84 ee       	ldi	r24, 0xE4	; 228
   13034:	99 e1       	ldi	r25, 0x19	; 25
   13036:	9c 01       	movw	r18, r24
   13038:	40 e0       	ldi	r20, 0x00	; 0
   1303a:	c7 57       	subi	r28, 0x77	; 119
   1303c:	df 4f       	sbci	r29, 0xFF	; 255
   1303e:	28 83       	st	Y, r18
   13040:	39 83       	std	Y+1, r19	; 0x01
   13042:	4a 83       	std	Y+2, r20	; 0x02
   13044:	c9 58       	subi	r28, 0x89	; 137
                    ++errors;
                AMIGOp->GEOMETRY.CYLINDERS = val;
            }
            else
            {
                printf("Unexpected AMIGO GEMETRY token: %s, at line:%d\n", ptr,lines);
   13046:	d0 40       	sbci	r29, 0x00	; 0
   13048:	86 e0       	ldi	r24, 0x06	; 6
   1304a:	9a e1       	ldi	r25, 0x1A	; 26
   1304c:	9c 01       	movw	r18, r24
   1304e:	40 e0       	ldi	r20, 0x00	; 0
   13050:	c4 57       	subi	r28, 0x74	; 116
   13052:	df 4f       	sbci	r29, 0xFF	; 255
   13054:	28 83       	st	Y, r18
   13056:	39 83       	std	Y+1, r19	; 0x01
   13058:	4a 83       	std	Y+2, r20	; 0x02
   1305a:	cc 58       	subi	r28, 0x8C	; 140
            if( (ind = token(ptr,"BYTES_PER_SECTOR")) )
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0x1000UL, &val) )
                    ++errors;
printf("BYTES PER SECTOR: %s\n", token);
   1305c:	d0 40       	sbci	r29, 0x00	; 0
   1305e:	86 e3       	ldi	r24, 0x36	; 54
   13060:	9a e1       	ldi	r25, 0x1A	; 26
   13062:	9c 01       	movw	r18, r24
   13064:	40 e0       	ldi	r20, 0x00	; 0
   13066:	c1 57       	subi	r28, 0x71	; 113
   13068:	df 4f       	sbci	r29, 0xFF	; 255
   1306a:	28 83       	st	Y, r18
   1306c:	39 83       	std	Y+1, r19	; 0x01
   1306e:	4a 83       	std	Y+2, r20	; 0x02
   13070:	cf 58       	subi	r28, 0x8F	; 143
                    ++errors;
                AMIGOp->CONFIG.ID = val;
            }
            else
            {
                printf("Unexpected AMIGO CONFIG token: %s, at line:%d\n", ptr,lines);
   13072:	d0 40       	sbci	r29, 0x00	; 0
   13074:	8c e4       	ldi	r24, 0x4C	; 76
   13076:	9a e1       	ldi	r25, 0x1A	; 26
   13078:	9c 01       	movw	r18, r24
   1307a:	40 e0       	ldi	r20, 0x00	; 0
   1307c:	ce 56       	subi	r28, 0x6E	; 110
   1307e:	df 4f       	sbci	r29, 0xFF	; 255
   13080:	28 83       	st	Y, r18
   13082:	39 83       	std	Y+1, r19	; 0x01
   13084:	4a 83       	std	Y+2, r20	; 0x02
   13086:	c2 59       	subi	r28, 0x92	; 146
                strncpy(AMIGOp->HEADER.NAME, ptr, sizeof(AMIGOp->HEADER.NAME)-1);
                AMIGOp->HEADER.NAME[sizeof(AMIGOp->HEADER.NAME)-1] = 0;
            }
            else
            {
                printf("Unexpected HEADER CONFIG token: %s, at line:%d\n", ptr,lines);
   13088:	d0 40       	sbci	r29, 0x00	; 0
   1308a:	8b e7       	ldi	r24, 0x7B	; 123
   1308c:	9a e1       	ldi	r25, 0x1A	; 26
   1308e:	9c 01       	movw	r18, r24
   13090:	40 e0       	ldi	r20, 0x00	; 0
   13092:	cb 56       	subi	r28, 0x6B	; 107
   13094:	df 4f       	sbci	r29, 0xFF	; 255
   13096:	28 83       	st	Y, r18
   13098:	39 83       	std	Y+1, r19	; 0x01
   1309a:	4a 83       	std	Y+2, r20	; 0x02
   1309c:	c5 59       	subi	r28, 0x95	; 149

        case AMIGO_HEADER:
            if( (ind = token(ptr,"DRIVE")) )
            {
                ptr += ind;
                printf("Skipping %s, at line:%d\n", ptr,lines);
   1309e:	d0 40       	sbci	r29, 0x00	; 0
   130a0:	8b ea       	ldi	r24, 0xAB	; 171
   130a2:	9a e1       	ldi	r25, 0x1A	; 26
   130a4:	9c 01       	movw	r18, r24
   130a6:	40 e0       	ldi	r20, 0x00	; 0
   130a8:	c8 56       	subi	r28, 0x68	; 104
   130aa:	df 4f       	sbci	r29, 0xFF	; 255
   130ac:	28 83       	st	Y, r18
   130ae:	39 83       	std	Y+1, r19	; 0x01
   130b0:	4a 83       	std	Y+2, r20	; 0x02
   130b2:	c8 59       	subi	r28, 0x98	; 152
   130b4:	d0 40       	sbci	r29, 0x00	; 0
    cfg = fopen(name, "rb");
    if(cfg == NULL)
    {
        ++errors;
        //FIXME
        perror("Read_Config - open");
   130b6:	2f c0       	rjmp	.+94     	; 0x13116 <Read_Config+0x158>
   130b8:	8c ec       	ldi	r24, 0xCC	; 204
   130ba:	9d e0       	ldi	r25, 0x0D	; 13
   130bc:	0e 94 8a 79 	call	0xf314	; 0xf314 <perror>
        printf("Read_Config: open(%s) failed\n", name);
   130c0:	0f 93       	push	r16
   130c2:	1f 93       	push	r17
   130c4:	83 ea       	ldi	r24, 0xA3	; 163
   130c6:	9c e1       	ldi	r25, 0x1C	; 28
   130c8:	1f 92       	push	r1
   130ca:	9f 93       	push	r25
   130cc:	8f 93       	push	r24
   130ce:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
        set_Config_Defaults();
        return(errors);
   130d2:	0f 90       	pop	r0
   130d4:	0f 90       	pop	r0
   130d6:	0f 90       	pop	r0
   130d8:	0f 90       	pop	r0
   130da:	0f 90       	pop	r0
   130dc:	81 e0       	ldi	r24, 0x01	; 1
   130de:	90 e0       	ldi	r25, 0x00	; 0
    }

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
    {
        ++lines;
   130e0:	eb c7       	rjmp	.+4054   	; 0x140b8 <Read_Config+0x10fa>
   130e2:	80 91 63 18 	lds	r24, 0x1863	; 0x801863 <lines>
   130e6:	90 91 64 18 	lds	r25, 0x1864	; 0x801864 <lines+0x1>
   130ea:	01 96       	adiw	r24, 0x01	; 1
   130ec:	90 93 64 18 	sts	0x1864, r25	; 0x801864 <lines+0x1>
   130f0:	80 93 63 18 	sts	0x1863, r24	; 0x801863 <lines>

        ptr = str;

        trim_tail(ptr);
   130f4:	ce 01       	movw	r24, r28
   130f6:	01 96       	adiw	r24, 0x01	; 1
   130f8:	0e 94 ad 32 	call	0x655a	; 0x655a <trim_tail>
        ptr = skipspaces(ptr);
   130fc:	ce 01       	movw	r24, r28
   130fe:	01 96       	adiw	r24, 0x01	; 1
   13100:	0e 94 bd 32 	call	0x657a	; 0x657a <skipspaces>
        len = strlen(ptr);
   13104:	6c 01       	movw	r12, r24
   13106:	fc 01       	movw	r30, r24
   13108:	01 90       	ld	r0, Z+
   1310a:	00 20       	and	r0, r0
   1310c:	e9 f7       	brne	.-6      	; 0x13108 <Read_Config+0x14a>
        if(!len)
   1310e:	31 97       	sbiw	r30, 0x01	; 1
   13110:	8e 17       	cp	r24, r30
   13112:	9f 07       	cpc	r25, r31
        printf("Read_Config: open(%s) failed\n", name);
        set_Config_Defaults();
        return(errors);
    }

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
   13114:	79 f4       	brne	.+30     	; 0x13134 <Read_Config+0x176>
   13116:	c9 57       	subi	r28, 0x79	; 121
   13118:	df 4f       	sbci	r29, 0xFF	; 255
   1311a:	48 81       	ld	r20, Y
   1311c:	59 81       	ldd	r21, Y+1	; 0x01
   1311e:	c7 58       	subi	r28, 0x87	; 135
   13120:	d0 40       	sbci	r29, 0x00	; 0
   13122:	6e e7       	ldi	r22, 0x7E	; 126
   13124:	70 e0       	ldi	r23, 0x00	; 0
   13126:	ce 01       	movw	r24, r28
   13128:	01 96       	adiw	r24, 0x01	; 1
   1312a:	0e 94 71 77 	call	0xeee2	; 0xeee2 <fgets>
   1312e:	89 2b       	or	r24, r25
   13130:	c1 f6       	brne	.-80     	; 0x130e2 <Read_Config+0x124>
        ptr = skipspaces(ptr);
        len = strlen(ptr);
        if(!len)
            continue;
        // Skip comments
        if(*ptr == '#')
   13132:	73 c7       	rjmp	.+3814   	; 0x1401a <Read_Config+0x105c>
   13134:	dc 01       	movw	r26, r24
   13136:	8c 91       	ld	r24, X
   13138:	83 32       	cpi	r24, 0x23	; 35
            continue;

        //FIXME check for state and last state
        if(token(ptr,"END"))
   1313a:	69 f3       	breq	.-38     	; 0x13116 <Read_Config+0x158>
   1313c:	6f ed       	ldi	r22, 0xDF	; 223
   1313e:	7d e0       	ldi	r23, 0x0D	; 13
   13140:	c6 01       	movw	r24, r12
   13142:	0e 94 40 34 	call	0x6880	; 0x6880 <token>
        {
            state = pop_state();
   13146:	89 2b       	or	r24, r25
   13148:	19 f0       	breq	.+6      	; 0x13150 <Read_Config+0x192>
   1314a:	42 dd       	rcall	.-1404   	; 0x12bd0 <pop_state>
            continue;
   1314c:	3c 01       	movw	r6, r24
        }

        switch(state)
   1314e:	e3 cf       	rjmp	.-58     	; 0x13116 <Read_Config+0x158>
   13150:	b0 e1       	ldi	r27, 0x10	; 16
   13152:	6b 16       	cp	r6, r27
   13154:	71 04       	cpc	r7, r1
   13156:	08 f0       	brcs	.+2      	; 0x1315a <Read_Config+0x19c>
   13158:	40 c7       	rjmp	.+3712   	; 0x13fda <Read_Config+0x101c>
   1315a:	f3 01       	movw	r30, r6
   1315c:	e0 53       	subi	r30, 0x30	; 48
   1315e:	ff 4f       	sbci	r31, 0xFF	; 255
   13160:	0c 94 9c e5 	jmp	0x1cb38	; 0x1cb38 <__tablejump2__>
        {
        case START_STATE:

            if( (ind = token(ptr,"SS80_DEFAULT") ))
   13164:	63 ee       	ldi	r22, 0xE3	; 227
   13166:	7d e0       	ldi	r23, 0x0D	; 13
   13168:	c6 01       	movw	r24, r12
   1316a:	0e 94 40 34 	call	0x6880	; 0x6880 <token>
            {
                push_state(state);
   1316e:	89 2b       	or	r24, r25
   13170:	a1 f0       	breq	.+40     	; 0x1319a <Read_Config+0x1dc>
				state = SS80_STATE;
				index = alloc_device(SS80_DEFAULT_TYPE);
   13172:	80 e0       	ldi	r24, 0x00	; 0
   13174:	90 e0       	ldi	r25, 0x00	; 0
   13176:	13 dd       	rcall	.-1498   	; 0x12b9e <push_state>
   13178:	82 e0       	ldi	r24, 0x02	; 2
   1317a:	90 e0       	ldi	r25, 0x00	; 0
				if(index == -1)
   1317c:	39 dc       	rcall	.-1934   	; 0x129f0 <alloc_device>
   1317e:	4c 01       	movw	r8, r24
					state = START_STATE;
				else
					SS80p = (SS80DiskType *) Devices[index].dev;
   13180:	01 96       	adiw	r24, 0x01	; 1
   13182:	49 f2       	breq	.-110    	; 0x13116 <Read_Config+0x158>
   13184:	8b e2       	ldi	r24, 0x2B	; 43
   13186:	88 9d       	mul	r24, r8
   13188:	f0 01       	movw	r30, r0
   1318a:	89 9d       	mul	r24, r9
   1318c:	f0 0d       	add	r31, r0
   1318e:	11 24       	eor	r1, r1
   13190:	e0 51       	subi	r30, 0x10	; 16
   13192:	f2 4e       	sbci	r31, 0xE2	; 226
   13194:	47 a0       	ldd	r4, Z+39	; 0x27
            }

            else if( (ind = token(ptr,"SS80")) || (ind = token(ptr, "CS80")) )
   13196:	50 a4       	ldd	r5, Z+40	; 0x28
   13198:	2c c0       	rjmp	.+88     	; 0x131f2 <Read_Config+0x234>
   1319a:	60 ef       	ldi	r22, 0xF0	; 240
   1319c:	7d e0       	ldi	r23, 0x0D	; 13
   1319e:	c6 01       	movw	r24, r12
   131a0:	0e 94 40 34 	call	0x6880	; 0x6880 <token>
   131a4:	8c 01       	movw	r16, r24
   131a6:	89 2b       	or	r24, r25
   131a8:	41 f4       	brne	.+16     	; 0x131ba <Read_Config+0x1fc>
   131aa:	65 ef       	ldi	r22, 0xF5	; 245
   131ac:	7d e0       	ldi	r23, 0x0D	; 13
   131ae:	c6 01       	movw	r24, r12
   131b0:	0e 94 40 34 	call	0x6880	; 0x6880 <token>
            {
                push_state(state);
   131b4:	8c 01       	movw	r16, r24
   131b6:	89 2b       	or	r24, r25
   131b8:	01 f1       	breq	.+64     	; 0x131fa <Read_Config+0x23c>
				state = SS80_STATE;
				index = alloc_device(SS80_TYPE);
   131ba:	80 e0       	ldi	r24, 0x00	; 0
   131bc:	90 e0       	ldi	r25, 0x00	; 0
   131be:	ef dc       	rcall	.-1570   	; 0x12b9e <push_state>
   131c0:	83 e0       	ldi	r24, 0x03	; 3
   131c2:	90 e0       	ldi	r25, 0x00	; 0
				if(index == -1)
   131c4:	15 dc       	rcall	.-2006   	; 0x129f0 <alloc_device>
   131c6:	4c 01       	movw	r8, r24
   131c8:	01 96       	adiw	r24, 0x01	; 1
				{
					state = START_STATE;
				}
				else
				{
					SS80p = (SS80DiskType *) Devices[index].dev;
   131ca:	09 f4       	brne	.+2      	; 0x131ce <Read_Config+0x210>
   131cc:	a4 cf       	rjmp	.-184    	; 0x13116 <Read_Config+0x158>
   131ce:	8b e2       	ldi	r24, 0x2B	; 43
   131d0:	88 9d       	mul	r24, r8
   131d2:	f0 01       	movw	r30, r0
   131d4:	89 9d       	mul	r24, r9
   131d6:	f0 0d       	add	r31, r0
   131d8:	11 24       	eor	r1, r1
   131da:	e0 51       	subi	r30, 0x10	; 16
   131dc:	f2 4e       	sbci	r31, 0xE2	; 226
					ptr += ind;
					ptr = skipspaces(ptr);
   131de:	47 a0       	ldd	r4, Z+39	; 0x27
   131e0:	50 a4       	ldd	r5, Z+40	; 0x28
   131e2:	c6 01       	movw	r24, r12
   131e4:	80 0f       	add	r24, r16
					hpdir_set_parameters(index,ptr);	// Also sets Devices[index].model
   131e6:	91 1f       	adc	r25, r17
   131e8:	0e 94 bd 32 	call	0x657a	; 0x657a <skipspaces>
   131ec:	bc 01       	movw	r22, r24
            }

            else if( (ind = token(ptr,"SS80")) || (ind = token(ptr, "CS80")) )
            {
                push_state(state);
				state = SS80_STATE;
   131ee:	c4 01       	movw	r24, r8
   131f0:	41 de       	rcall	.-894    	; 0x12e74 <hpdir_set_parameters>
   131f2:	66 24       	eor	r6, r6
   131f4:	63 94       	inc	r6
					hpdir_set_parameters(index,ptr);	// Also sets Devices[index].model
				}
			}

#ifdef AMIGO
            else if( (ind = token(ptr,"AMIGO")) )
   131f6:	71 2c       	mov	r7, r1
   131f8:	8e cf       	rjmp	.-228    	; 0x13116 <Read_Config+0x158>
   131fa:	6a ef       	ldi	r22, 0xFA	; 250
   131fc:	7d e0       	ldi	r23, 0x0D	; 13
   131fe:	c6 01       	movw	r24, r12
   13200:	0e 94 40 34 	call	0x6880	; 0x6880 <token>
            {
                push_state(state);
   13204:	8c 01       	movw	r16, r24
   13206:	89 2b       	or	r24, r25
   13208:	01 f1       	breq	.+64     	; 0x1324a <Read_Config+0x28c>
                state = AMIGO_STATE;
                index = alloc_device(AMIGO_TYPE);
   1320a:	80 e0       	ldi	r24, 0x00	; 0
   1320c:	90 e0       	ldi	r25, 0x00	; 0
   1320e:	c7 dc       	rcall	.-1650   	; 0x12b9e <push_state>
   13210:	81 e0       	ldi	r24, 0x01	; 1
   13212:	90 e0       	ldi	r25, 0x00	; 0
                if(index == -1)
   13214:	ed db       	rcall	.-2086   	; 0x129f0 <alloc_device>
   13216:	4c 01       	movw	r8, r24
   13218:	01 96       	adiw	r24, 0x01	; 1
				{
                    state = START_STATE;
				}
                else
				{
                    AMIGOp = (AMIGODiskType *) Devices[index].dev;
   1321a:	09 f4       	brne	.+2      	; 0x1321e <Read_Config+0x260>
   1321c:	7c cf       	rjmp	.-264    	; 0x13116 <Read_Config+0x158>
   1321e:	8b e2       	ldi	r24, 0x2B	; 43
   13220:	88 9d       	mul	r24, r8
   13222:	f0 01       	movw	r30, r0
   13224:	89 9d       	mul	r24, r9
   13226:	f0 0d       	add	r31, r0
   13228:	11 24       	eor	r1, r1
   1322a:	e0 51       	subi	r30, 0x10	; 16
					ptr += ind;
					ptr = skipspaces(ptr);
   1322c:	f2 4e       	sbci	r31, 0xE2	; 226
   1322e:	27 a0       	ldd	r2, Z+39	; 0x27
   13230:	30 a4       	ldd	r3, Z+40	; 0x28
   13232:	c6 01       	movw	r24, r12
   13234:	80 0f       	add	r24, r16
					hpdir_set_parameters(index,ptr);	// Also sets Devices[index.model
   13236:	91 1f       	adc	r25, r17
   13238:	0e 94 bd 32 	call	0x657a	; 0x657a <skipspaces>
   1323c:	bc 01       	movw	r22, r24

#ifdef AMIGO
            else if( (ind = token(ptr,"AMIGO")) )
            {
                push_state(state);
                state = AMIGO_STATE;
   1323e:	c4 01       	movw	r24, r8
   13240:	19 de       	rcall	.-974    	; 0x12e74 <hpdir_set_parameters>
   13242:	aa e0       	ldi	r26, 0x0A	; 10
					ptr = skipspaces(ptr);
					hpdir_set_parameters(index,ptr);	// Also sets Devices[index.model
				}
			}
#endif
            else if(token(ptr,"PRINTER"))
   13244:	6a 2e       	mov	r6, r26
   13246:	71 2c       	mov	r7, r1
   13248:	66 cf       	rjmp	.-308    	; 0x13116 <Read_Config+0x158>
   1324a:	60 e0       	ldi	r22, 0x00	; 0
   1324c:	7e e0       	ldi	r23, 0x0E	; 14
   1324e:	c6 01       	movw	r24, r12
            {
                push_state(state);
   13250:	0e 94 40 34 	call	0x6880	; 0x6880 <token>
   13254:	89 2b       	or	r24, r25
   13256:	f1 f0       	breq	.+60     	; 0x13294 <Read_Config+0x2d6>
                state = PRINTER_STATE;
                index = alloc_device(PRINTER_TYPE);
   13258:	80 e0       	ldi	r24, 0x00	; 0
   1325a:	90 e0       	ldi	r25, 0x00	; 0
   1325c:	a0 dc       	rcall	.-1728   	; 0x12b9e <push_state>
   1325e:	84 e0       	ldi	r24, 0x04	; 4
   13260:	90 e0       	ldi	r25, 0x00	; 0
                if(index == -1)
   13262:	c6 db       	rcall	.-2164   	; 0x129f0 <alloc_device>
   13264:	4c 01       	movw	r8, r24
   13266:	01 96       	adiw	r24, 0x01	; 1
                    state = START_STATE;
                else
                    PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
   13268:	09 f4       	brne	.+2      	; 0x1326c <Read_Config+0x2ae>
   1326a:	55 cf       	rjmp	.-342    	; 0x13116 <Read_Config+0x158>
   1326c:	8b e2       	ldi	r24, 0x2B	; 43
   1326e:	88 9d       	mul	r24, r8
   13270:	f0 01       	movw	r30, r0
   13272:	89 9d       	mul	r24, r9
   13274:	f0 0d       	add	r31, r0
   13276:	11 24       	eor	r1, r1
   13278:	e0 51       	subi	r30, 0x10	; 16
   1327a:	f2 4e       	sbci	r31, 0xE2	; 226
   1327c:	87 a1       	ldd	r24, Z+39	; 0x27
   1327e:	90 a5       	ldd	r25, Z+40	; 0x28
   13280:	cb 57       	subi	r28, 0x7B	; 123
   13282:	df 4f       	sbci	r29, 0xFF	; 255
   13284:	99 83       	std	Y+1, r25	; 0x01
   13286:	88 83       	st	Y, r24
			}
#endif
            else if(token(ptr,"PRINTER"))
            {
                push_state(state);
                state = PRINTER_STATE;
   13288:	c5 58       	subi	r28, 0x85	; 133
   1328a:	d0 40       	sbci	r29, 0x00	; 0
   1328c:	fe e0       	ldi	r31, 0x0E	; 14
   1328e:	6f 2e       	mov	r6, r31
                if(index == -1)
                    state = START_STATE;
                else
                    PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
            }
            else if( (ind = token(ptr,"DEBUG")) )
   13290:	71 2c       	mov	r7, r1
   13292:	41 cf       	rjmp	.-382    	; 0x13116 <Read_Config+0x158>
   13294:	68 e0       	ldi	r22, 0x08	; 8
   13296:	7e e0       	ldi	r23, 0x0E	; 14
   13298:	c6 01       	movw	r24, r12
   1329a:	0e 94 40 34 	call	0x6880	; 0x6880 <token>
            {
                ptr += ind;
                if ( assign_value(ptr, 0, 65535, &val) )
   1329e:	00 97       	sbiw	r24, 0x00	; 0
   132a0:	e1 f0       	breq	.+56     	; 0x132da <Read_Config+0x31c>
   132a2:	de 01       	movw	r26, r28
   132a4:	af 57       	subi	r26, 0x7F	; 127
   132a6:	bf 4f       	sbci	r27, 0xFF	; 255
   132a8:	7d 01       	movw	r14, r26
   132aa:	0f ef       	ldi	r16, 0xFF	; 255
   132ac:	1f ef       	ldi	r17, 0xFF	; 255
   132ae:	20 e0       	ldi	r18, 0x00	; 0
   132b0:	30 e0       	ldi	r19, 0x00	; 0
   132b2:	40 e0       	ldi	r20, 0x00	; 0
   132b4:	50 e0       	ldi	r21, 0x00	; 0
   132b6:	ba 01       	movw	r22, r20
   132b8:	8c 0d       	add	r24, r12
   132ba:	9d 1d       	adc	r25, r13
   132bc:	a0 dc       	rcall	.-1728   	; 0x12bfe <assign_value>
   132be:	89 2b       	or	r24, r25
                    debuglevel = val;
   132c0:	09 f4       	brne	.+2      	; 0x132c4 <Read_Config+0x306>
   132c2:	29 cf       	rjmp	.-430    	; 0x13116 <Read_Config+0x158>
   132c4:	cf 57       	subi	r28, 0x7F	; 127
   132c6:	df 4f       	sbci	r29, 0xFF	; 255
   132c8:	88 81       	ld	r24, Y
   132ca:	99 81       	ldd	r25, Y+1	; 0x01
   132cc:	c1 58       	subi	r28, 0x81	; 129
   132ce:	d0 40       	sbci	r29, 0x00	; 0
   132d0:	90 93 be 01 	sts	0x01BE, r25	; 0x8001be <debuglevel+0x1>
   132d4:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <debuglevel>
            }
            else if( (ind = token(ptr,"PRINTER_DEFAULT_ADDRESS")) )
   132d8:	1e cf       	rjmp	.-452    	; 0x13116 <Read_Config+0x158>
   132da:	6e e0       	ldi	r22, 0x0E	; 14
   132dc:	7e e0       	ldi	r23, 0x0E	; 14
   132de:	c6 01       	movw	r24, r12
   132e0:	0e 94 40 34 	call	0x6880	; 0x6880 <token>
   132e4:	30 91 64 18 	lds	r19, 0x1864	; 0x801864 <lines+0x1>
   132e8:	20 91 63 18 	lds	r18, 0x1863	; 0x801863 <lines>
            {
                ptr += ind;
                //FIXME REMOVE from config
                printf("Skipping %s, at line:%d\n", ptr,lines);
   132ec:	00 97       	sbiw	r24, 0x00	; 0
   132ee:	61 f0       	breq	.+24     	; 0x13308 <Read_Config+0x34a>
   132f0:	3f 93       	push	r19
   132f2:	2f 93       	push	r18
   132f4:	c8 0e       	add	r12, r24
   132f6:	d9 1e       	adc	r13, r25
   132f8:	df 92       	push	r13
   132fa:	cf 92       	push	r12
   132fc:	8a e8       	ldi	r24, 0x8A	; 138
   132fe:	9c e1       	ldi	r25, 0x1C	; 28
   13300:	1f 92       	push	r1
   13302:	9f 93       	push	r25
            }
            else
            {
                printf("Unexpected START token: %s, at line:%d\n", ptr,lines);
   13304:	8f 93       	push	r24
   13306:	ca c4       	rjmp	.+2452   	; 0x13c9c <Read_Config+0xcde>
   13308:	3f 93       	push	r19
   1330a:	2f 93       	push	r18
   1330c:	df 92       	push	r13
   1330e:	cf 92       	push	r12
                ++errors;
            }
            break;

        case PRINTER_STATE:
            if(token(ptr,"CONFIG"))
   13310:	82 e6       	ldi	r24, 0x62	; 98
   13312:	9c e1       	ldi	r25, 0x1C	; 28
   13314:	b0 c0       	rjmp	.+352    	; 0x13476 <Read_Config+0x4b8>
   13316:	66 e2       	ldi	r22, 0x26	; 38
   13318:	7e e0       	ldi	r23, 0x0E	; 14
   1331a:	c6 01       	movw	r24, r12
   1331c:	0e 94 40 34 	call	0x6880	; 0x6880 <token>
            {
                push_state(state);
   13320:	89 2b       	or	r24, r25
   13322:	39 f0       	breq	.+14     	; 0x13332 <Read_Config+0x374>
   13324:	8e e0       	ldi	r24, 0x0E	; 14
                state = PRINTER_CONFIG;
   13326:	90 e0       	ldi	r25, 0x00	; 0
   13328:	3a dc       	rcall	.-1932   	; 0x12b9e <push_state>
   1332a:	ef e0       	ldi	r30, 0x0F	; 15
   1332c:	6e 2e       	mov	r6, r30
            }
            else
            {
                printf("Unexpected PRINTER token: %s, at line:%d\n", ptr,lines);
   1332e:	71 2c       	mov	r7, r1
   13330:	f2 ce       	rjmp	.-540    	; 0x13116 <Read_Config+0x158>
   13332:	80 91 64 18 	lds	r24, 0x1864	; 0x801864 <lines+0x1>
   13336:	8f 93       	push	r24
   13338:	80 91 63 18 	lds	r24, 0x1863	; 0x801863 <lines>
   1333c:	8f 93       	push	r24
   1333e:	df 92       	push	r13
   13340:	cf 92       	push	r12
   13342:	88 e3       	ldi	r24, 0x38	; 56
                ++errors;
            }
            break;

        case PRINTER_CONFIG:
            if( (ind = token(ptr,"ADDRESS")) )
   13344:	9c e1       	ldi	r25, 0x1C	; 28
   13346:	88 c4       	rjmp	.+2320   	; 0x13c58 <Read_Config+0xc9a>
   13348:	6e e1       	ldi	r22, 0x1E	; 30
   1334a:	7e e0       	ldi	r23, 0x0E	; 14
   1334c:	c6 01       	movw	r24, r12
   1334e:	0e 94 40 34 	call	0x6880	; 0x6880 <token>
            {
                ptr += ind;
                
                tmp = 0xff;
                if (!assign_value(ptr, 0, 14, &val) )
   13352:	00 97       	sbiw	r24, 0x00	; 0
   13354:	69 f1       	breq	.+90     	; 0x133b0 <Read_Config+0x3f2>
   13356:	de 01       	movw	r26, r28
   13358:	af 57       	subi	r26, 0x7F	; 127
   1335a:	bf 4f       	sbci	r27, 0xFF	; 255
   1335c:	7d 01       	movw	r14, r26
   1335e:	0e e0       	ldi	r16, 0x0E	; 14
   13360:	10 e0       	ldi	r17, 0x00	; 0
   13362:	20 e0       	ldi	r18, 0x00	; 0
   13364:	30 e0       	ldi	r19, 0x00	; 0
   13366:	40 e0       	ldi	r20, 0x00	; 0
   13368:	50 e0       	ldi	r21, 0x00	; 0
   1336a:	ba 01       	movw	r22, r20
   1336c:	8c 0d       	add	r24, r12
   1336e:	9d 1d       	adc	r25, r13
   13370:	46 dc       	rcall	.-1908   	; 0x12bfe <assign_value>
                    ++errors;
   13372:	89 2b       	or	r24, r25
   13374:	29 f4       	brne	.+10     	; 0x13380 <Read_Config+0x3c2>
   13376:	bf ef       	ldi	r27, 0xFF	; 255
        case PRINTER_CONFIG:
            if( (ind = token(ptr,"ADDRESS")) )
            {
                ptr += ind;
                
                tmp = 0xff;
   13378:	ab 1a       	sub	r10, r27
   1337a:	bb 0a       	sbc	r11, r27
                if (!assign_value(ptr, 0, 14, &val) )
                    ++errors;
                else
                    tmp = val;
   1337c:	8f ef       	ldi	r24, 0xFF	; 255
   1337e:	05 c0       	rjmp	.+10     	; 0x1338a <Read_Config+0x3cc>
   13380:	cf 57       	subi	r28, 0x7F	; 127
   13382:	df 4f       	sbci	r29, 0xFF	; 255
   13384:	88 81       	ld	r24, Y
                Devices[index].ADDRESS = tmp;
   13386:	c1 58       	subi	r28, 0x81	; 129
   13388:	d0 40       	sbci	r29, 0x00	; 0
   1338a:	9b e2       	ldi	r25, 0x2B	; 43
   1338c:	98 9d       	mul	r25, r8
   1338e:	f0 01       	movw	r30, r0
   13390:	99 9d       	mul	r25, r9
   13392:	f0 0d       	add	r31, r0
   13394:	11 24       	eor	r1, r1
   13396:	e0 51       	subi	r30, 0x10	; 16
                PRINTERp->HEADER.ADDRESS  = tmp;
   13398:	f2 4e       	sbci	r31, 0xE2	; 226
   1339a:	81 83       	std	Z+1, r24	; 0x01
   1339c:	cb 57       	subi	r28, 0x7B	; 123
   1339e:	df 4f       	sbci	r29, 0xFF	; 255
   133a0:	a8 81       	ld	r26, Y
   133a2:	b9 81       	ldd	r27, Y+1	; 0x01
   133a4:	c5 58       	subi	r28, 0x85	; 133
                // NO PPR
                Devices[index].PPR = 0xff;
   133a6:	d0 40       	sbci	r29, 0x00	; 0
   133a8:	8c 93       	st	X, r24
   133aa:	8f ef       	ldi	r24, 0xFF	; 255
                PRINTERp->HEADER.PPR = 0xff;
            }
            else
            {
                printf("Unexpected PRINTER CONFIG token: %s, at line:%d\n", ptr,lines);
   133ac:	82 83       	std	Z+2, r24	; 0x02
   133ae:	be c0       	rjmp	.+380    	; 0x1352c <Read_Config+0x56e>
   133b0:	80 91 64 18 	lds	r24, 0x1864	; 0x801864 <lines+0x1>
   133b4:	8f 93       	push	r24
   133b6:	80 91 63 18 	lds	r24, 0x1863	; 0x801863 <lines>
   133ba:	8f 93       	push	r24
   133bc:	df 92       	push	r13
   133be:	cf 92       	push	r12
   133c0:	87 e0       	ldi	r24, 0x07	; 7
   133c2:	9c e1       	ldi	r25, 0x1C	; 28
   133c4:	1f 92       	push	r1
   133c6:	9f 93       	push	r25
                ++errors;
   133c8:	8f 93       	push	r24
   133ca:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   133ce:	bf ef       	ldi	r27, 0xFF	; 255
            }
            break;

        case SS80_STATE:
            if(token(ptr,"HEADER"))
   133d0:	ab 1a       	sub	r10, r27
   133d2:	bb 0a       	sbc	r11, r27
   133d4:	1c c6       	rjmp	.+3128   	; 0x1400e <Read_Config+0x1050>
   133d6:	6d e2       	ldi	r22, 0x2D	; 45
   133d8:	7e e0       	ldi	r23, 0x0E	; 14
   133da:	c6 01       	movw	r24, r12
   133dc:	0e 94 40 34 	call	0x6880	; 0x6880 <token>
            {
                push_state(state);
   133e0:	89 2b       	or	r24, r25
   133e2:	39 f0       	breq	.+14     	; 0x133f2 <Read_Config+0x434>
                state = SS80_HEADER;
   133e4:	81 e0       	ldi	r24, 0x01	; 1
   133e6:	90 e0       	ldi	r25, 0x00	; 0
   133e8:	da db       	rcall	.-2124   	; 0x12b9e <push_state>
   133ea:	72 e0       	ldi	r23, 0x02	; 2
            }
            else if(token(ptr,"CONFIG"))
   133ec:	67 2e       	mov	r6, r23
   133ee:	71 2c       	mov	r7, r1
   133f0:	92 ce       	rjmp	.-732    	; 0x13116 <Read_Config+0x158>
   133f2:	66 e2       	ldi	r22, 0x26	; 38
   133f4:	7e e0       	ldi	r23, 0x0E	; 14
   133f6:	c6 01       	movw	r24, r12
            {
                push_state(state);
   133f8:	0e 94 40 34 	call	0x6880	; 0x6880 <token>
   133fc:	89 2b       	or	r24, r25
                state = SS80_CONFIG;
   133fe:	39 f0       	breq	.+14     	; 0x1340e <Read_Config+0x450>
   13400:	81 e0       	ldi	r24, 0x01	; 1
   13402:	90 e0       	ldi	r25, 0x00	; 0
   13404:	cc db       	rcall	.-2152   	; 0x12b9e <push_state>
            }
            else if(token(ptr,"CONTROLLER"))
   13406:	63 e0       	ldi	r22, 0x03	; 3
   13408:	66 2e       	mov	r6, r22
   1340a:	71 2c       	mov	r7, r1
   1340c:	84 ce       	rjmp	.-760    	; 0x13116 <Read_Config+0x158>
   1340e:	64 e3       	ldi	r22, 0x34	; 52
   13410:	7e e0       	ldi	r23, 0x0E	; 14
            {
                push_state(state);
   13412:	c6 01       	movw	r24, r12
   13414:	0e 94 40 34 	call	0x6880	; 0x6880 <token>
   13418:	89 2b       	or	r24, r25
                state = SS80_CONTROLLER;
   1341a:	39 f0       	breq	.+14     	; 0x1342a <Read_Config+0x46c>
   1341c:	81 e0       	ldi	r24, 0x01	; 1
   1341e:	90 e0       	ldi	r25, 0x00	; 0
   13420:	be db       	rcall	.-2180   	; 0x12b9e <push_state>
            }
            else if(token(ptr,"UNIT"))
   13422:	54 e0       	ldi	r21, 0x04	; 4
   13424:	65 2e       	mov	r6, r21
   13426:	71 2c       	mov	r7, r1
   13428:	76 ce       	rjmp	.-788    	; 0x13116 <Read_Config+0x158>
   1342a:	6f e3       	ldi	r22, 0x3F	; 63
   1342c:	7e e0       	ldi	r23, 0x0E	; 14
            {
                push_state(state);
   1342e:	c6 01       	movw	r24, r12
   13430:	0e 94 40 34 	call	0x6880	; 0x6880 <token>
   13434:	89 2b       	or	r24, r25
                state = SS80_UNIT;
   13436:	39 f0       	breq	.+14     	; 0x13446 <Read_Config+0x488>
   13438:	81 e0       	ldi	r24, 0x01	; 1
   1343a:	90 e0       	ldi	r25, 0x00	; 0
   1343c:	b0 db       	rcall	.-2208   	; 0x12b9e <push_state>
            }
            else if(token(ptr,"VOLUME"))
   1343e:	45 e0       	ldi	r20, 0x05	; 5
   13440:	64 2e       	mov	r6, r20
   13442:	71 2c       	mov	r7, r1
   13444:	68 ce       	rjmp	.-816    	; 0x13116 <Read_Config+0x158>
   13446:	64 e4       	ldi	r22, 0x44	; 68
   13448:	7e e0       	ldi	r23, 0x0E	; 14
   1344a:	c6 01       	movw	r24, r12
            {
                push_state(state);
   1344c:	0e 94 40 34 	call	0x6880	; 0x6880 <token>
   13450:	89 2b       	or	r24, r25
   13452:	39 f0       	breq	.+14     	; 0x13462 <Read_Config+0x4a4>
                state = SS80_VOLUME;
   13454:	81 e0       	ldi	r24, 0x01	; 1
   13456:	90 e0       	ldi	r25, 0x00	; 0
   13458:	a2 db       	rcall	.-2236   	; 0x12b9e <push_state>
   1345a:	36 e0       	ldi	r19, 0x06	; 6
            }
            else
            {
                printf("Unexpected SS80 START token: %s, at line:%d\n", ptr,lines);
   1345c:	63 2e       	mov	r6, r19
   1345e:	71 2c       	mov	r7, r1
   13460:	5a ce       	rjmp	.-844    	; 0x13116 <Read_Config+0x158>
   13462:	80 91 64 18 	lds	r24, 0x1864	; 0x801864 <lines+0x1>
   13466:	8f 93       	push	r24
   13468:	80 91 63 18 	lds	r24, 0x1863	; 0x801863 <lines>
   1346c:	8f 93       	push	r24
   1346e:	df 92       	push	r13
   13470:	cf 92       	push	r12
   13472:	8a ed       	ldi	r24, 0xDA	; 218
   13474:	9b e1       	ldi	r25, 0x1B	; 27
            }
            break;


        case SS80_HEADER:
            if( (ind = token(ptr,"ADDRESS")) )
   13476:	1f 92       	push	r1
   13478:	9f 93       	push	r25
   1347a:	8f 93       	push	r24
   1347c:	a8 c5       	rjmp	.+2896   	; 0x13fce <Read_Config+0x1010>
   1347e:	6e e1       	ldi	r22, 0x1E	; 30
   13480:	7e e0       	ldi	r23, 0x0E	; 14
            {
                ptr += ind;
                tmp = 0xff;
                if (!assign_value(ptr, 0, 30, &val) )
   13482:	c6 01       	movw	r24, r12
   13484:	0e 94 40 34 	call	0x6880	; 0x6880 <token>
   13488:	00 97       	sbiw	r24, 0x00	; 0
   1348a:	29 f1       	breq	.+74     	; 0x134d6 <Read_Config+0x518>
   1348c:	de 01       	movw	r26, r28
   1348e:	af 57       	subi	r26, 0x7F	; 127
   13490:	bf 4f       	sbci	r27, 0xFF	; 255
   13492:	7d 01       	movw	r14, r26
   13494:	0e e1       	ldi	r16, 0x1E	; 30
   13496:	10 e0       	ldi	r17, 0x00	; 0
   13498:	20 e0       	ldi	r18, 0x00	; 0
   1349a:	30 e0       	ldi	r19, 0x00	; 0
   1349c:	40 e0       	ldi	r20, 0x00	; 0
   1349e:	50 e0       	ldi	r21, 0x00	; 0
   134a0:	ba 01       	movw	r22, r20
   134a2:	8c 0d       	add	r24, r12
                    ++errors;
   134a4:	9d 1d       	adc	r25, r13
   134a6:	ab db       	rcall	.-2218   	; 0x12bfe <assign_value>
   134a8:	89 2b       	or	r24, r25

        case SS80_HEADER:
            if( (ind = token(ptr,"ADDRESS")) )
            {
                ptr += ind;
                tmp = 0xff;
   134aa:	29 f4       	brne	.+10     	; 0x134b6 <Read_Config+0x4f8>
   134ac:	bf ef       	ldi	r27, 0xFF	; 255
                if (!assign_value(ptr, 0, 30, &val) )
                    ++errors;
                else
                    tmp = val;
   134ae:	ab 1a       	sub	r10, r27
   134b0:	bb 0a       	sbc	r11, r27
   134b2:	8f ef       	ldi	r24, 0xFF	; 255
   134b4:	05 c0       	rjmp	.+10     	; 0x134c0 <Read_Config+0x502>
   134b6:	cf 57       	subi	r28, 0x7F	; 127
                Devices[index].ADDRESS = tmp;
   134b8:	df 4f       	sbci	r29, 0xFF	; 255
   134ba:	88 81       	ld	r24, Y
   134bc:	c1 58       	subi	r28, 0x81	; 129
   134be:	d0 40       	sbci	r29, 0x00	; 0
   134c0:	9b e2       	ldi	r25, 0x2B	; 43
   134c2:	98 9d       	mul	r25, r8
   134c4:	f0 01       	movw	r30, r0
   134c6:	99 9d       	mul	r25, r9
   134c8:	f0 0d       	add	r31, r0
                SS80p->HEADER.ADDRESS  = tmp;
   134ca:	11 24       	eor	r1, r1
            }
            else if( (ind = token(ptr,"PPR")) )
   134cc:	e0 51       	subi	r30, 0x10	; 16
   134ce:	f2 4e       	sbci	r31, 0xE2	; 226
   134d0:	81 83       	std	Z+1, r24	; 0x01
   134d2:	f2 01       	movw	r30, r4
   134d4:	03 c3       	rjmp	.+1542   	; 0x13adc <Read_Config+0xb1e>
   134d6:	6b e4       	ldi	r22, 0x4B	; 75
   134d8:	7e e0       	ldi	r23, 0x0E	; 14
            {
                ptr += ind;
                tmp = 0xff;
                if (!assign_value(ptr, 0, 7, &val) )
   134da:	c6 01       	movw	r24, r12
   134dc:	0e 94 40 34 	call	0x6880	; 0x6880 <token>
   134e0:	00 97       	sbiw	r24, 0x00	; 0
   134e2:	39 f1       	breq	.+78     	; 0x13532 <Read_Config+0x574>
   134e4:	9e 01       	movw	r18, r28
   134e6:	2f 57       	subi	r18, 0x7F	; 127
   134e8:	3f 4f       	sbci	r19, 0xFF	; 255
   134ea:	79 01       	movw	r14, r18
   134ec:	07 e0       	ldi	r16, 0x07	; 7
   134ee:	10 e0       	ldi	r17, 0x00	; 0
   134f0:	20 e0       	ldi	r18, 0x00	; 0
   134f2:	30 e0       	ldi	r19, 0x00	; 0
   134f4:	40 e0       	ldi	r20, 0x00	; 0
   134f6:	50 e0       	ldi	r21, 0x00	; 0
   134f8:	ba 01       	movw	r22, r20
   134fa:	8c 0d       	add	r24, r12
                    ++errors;
   134fc:	9d 1d       	adc	r25, r13
   134fe:	7f db       	rcall	.-2306   	; 0x12bfe <assign_value>
   13500:	89 2b       	or	r24, r25
                SS80p->HEADER.ADDRESS  = tmp;
            }
            else if( (ind = token(ptr,"PPR")) )
            {
                ptr += ind;
                tmp = 0xff;
   13502:	29 f4       	brne	.+10     	; 0x1350e <Read_Config+0x550>
   13504:	3f ef       	ldi	r19, 0xFF	; 255
                if (!assign_value(ptr, 0, 7, &val) )
                    ++errors;
                else
                    tmp = val;
   13506:	a3 1a       	sub	r10, r19
   13508:	b3 0a       	sbc	r11, r19
   1350a:	8f ef       	ldi	r24, 0xFF	; 255
   1350c:	05 c0       	rjmp	.+10     	; 0x13518 <Read_Config+0x55a>
   1350e:	cf 57       	subi	r28, 0x7F	; 127
                Devices[index].PPR = tmp;
   13510:	df 4f       	sbci	r29, 0xFF	; 255
   13512:	88 81       	ld	r24, Y
   13514:	c1 58       	subi	r28, 0x81	; 129
   13516:	d0 40       	sbci	r29, 0x00	; 0
   13518:	9b e2       	ldi	r25, 0x2B	; 43
   1351a:	98 9d       	mul	r25, r8
   1351c:	f0 01       	movw	r30, r0
   1351e:	99 9d       	mul	r25, r9
   13520:	f0 0d       	add	r31, r0
                SS80p->HEADER.PPR = tmp;
   13522:	11 24       	eor	r1, r1
   13524:	e0 51       	subi	r30, 0x10	; 16
   13526:	f2 4e       	sbci	r31, 0xE2	; 226
   13528:	82 83       	std	Z+2, r24	; 0x02
            }
            else if( (ind = token(ptr,"FILE")) )
   1352a:	d2 01       	movw	r26, r4
   1352c:	11 96       	adiw	r26, 0x01	; 1
   1352e:	8c 93       	st	X, r24
   13530:	f2 cd       	rjmp	.-1052   	; 0x13116 <Read_Config+0x158>
   13532:	6f e4       	ldi	r22, 0x4F	; 79
   13534:	7e e0       	ldi	r23, 0x0E	; 14
   13536:	c6 01       	movw	r24, r12
            {
                ptr += ind;
                ptr = skipspaces(ptr);
   13538:	0e 94 40 34 	call	0x6880	; 0x6880 <token>
   1353c:	00 97       	sbiw	r24, 0x00	; 0
   1353e:	a1 f0       	breq	.+40     	; 0x13568 <Read_Config+0x5aa>
                if(*ptr == '=')
   13540:	8c 0d       	add	r24, r12
   13542:	9d 1d       	adc	r25, r13
   13544:	0e 94 bd 32 	call	0x657a	; 0x657a <skipspaces>
                {
                    ++ptr;
                    ptr = skipspaces(ptr);
   13548:	fc 01       	movw	r30, r24
   1354a:	20 81       	ld	r18, Z
   1354c:	2d 33       	cpi	r18, 0x3D	; 61
                }
                strncpy(SS80p->HEADER.NAME,ptr, sizeof(SS80p->HEADER.NAME)-1);
   1354e:	19 f4       	brne	.+6      	; 0x13556 <Read_Config+0x598>
   13550:	01 96       	adiw	r24, 0x01	; 1
   13552:	0e 94 bd 32 	call	0x657a	; 0x657a <skipspaces>
   13556:	40 e2       	ldi	r20, 0x20	; 32
   13558:	50 e0       	ldi	r21, 0x00	; 0
   1355a:	bc 01       	movw	r22, r24
                SS80p->HEADER.NAME[sizeof(SS80p->HEADER.NAME)-1] = 0;
   1355c:	c2 01       	movw	r24, r4
   1355e:	02 96       	adiw	r24, 0x02	; 2
            }
            else
            {
                printf("Unexpected SS80 CONFIG token: %s, at line:%d\n", ptr,lines);
   13560:	0e 94 5e 32 	call	0x64bc	; 0x64bc <strncpy>
   13564:	d2 01       	movw	r26, r4
   13566:	12 c4       	rjmp	.+2084   	; 0x13d8c <Read_Config+0xdce>
   13568:	80 91 64 18 	lds	r24, 0x1864	; 0x801864 <lines+0x1>
   1356c:	8f 93       	push	r24
   1356e:	80 91 63 18 	lds	r24, 0x1863	; 0x801863 <lines>
   13572:	8f 93       	push	r24
                ++errors;
            }
            break;

        case SS80_CONFIG:
            if( (ind = token(ptr,"ID")) )
   13574:	df 92       	push	r13
   13576:	cf 92       	push	r12
   13578:	8c ea       	ldi	r24, 0xAC	; 172
   1357a:	9b e1       	ldi	r25, 0x1B	; 27
   1357c:	23 cf       	rjmp	.-442    	; 0x133c4 <Read_Config+0x406>
   1357e:	64 e5       	ldi	r22, 0x54	; 84
   13580:	7e e0       	ldi	r23, 0x0E	; 14
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val))
   13582:	c6 01       	movw	r24, r12
   13584:	0e 94 40 34 	call	0x6880	; 0x6880 <token>
   13588:	00 97       	sbiw	r24, 0x00	; 0
   1358a:	f9 f0       	breq	.+62     	; 0x135ca <Read_Config+0x60c>
   1358c:	9e 01       	movw	r18, r28
   1358e:	2f 57       	subi	r18, 0x7F	; 127
   13590:	3f 4f       	sbci	r19, 0xFF	; 255
   13592:	79 01       	movw	r14, r18
   13594:	0f ef       	ldi	r16, 0xFF	; 255
   13596:	1f ef       	ldi	r17, 0xFF	; 255
   13598:	20 e0       	ldi	r18, 0x00	; 0
   1359a:	30 e0       	ldi	r19, 0x00	; 0
   1359c:	40 e0       	ldi	r20, 0x00	; 0
   1359e:	50 e0       	ldi	r21, 0x00	; 0
   135a0:	ba 01       	movw	r22, r20
   135a2:	8c 0d       	add	r24, r12
                    ++errors;
   135a4:	9d 1d       	adc	r25, r13
   135a6:	2b db       	rcall	.-2474   	; 0x12bfe <assign_value>
   135a8:	89 2b       	or	r24, r25
                SS80p->CONFIG.ID = val;
   135aa:	19 f4       	brne	.+6      	; 0x135b2 <Read_Config+0x5f4>
   135ac:	3f ef       	ldi	r19, 0xFF	; 255
   135ae:	a3 1a       	sub	r10, r19
   135b0:	b3 0a       	sbc	r11, r19
   135b2:	cf 57       	subi	r28, 0x7F	; 127
   135b4:	df 4f       	sbci	r29, 0xFF	; 255
   135b6:	88 81       	ld	r24, Y
   135b8:	99 81       	ldd	r25, Y+1	; 0x01
   135ba:	c1 58       	subi	r28, 0x81	; 129
   135bc:	d0 40       	sbci	r29, 0x00	; 0
   135be:	d2 01       	movw	r26, r4
   135c0:	94 96       	adiw	r26, 0x24	; 36
            }
            else
            {
                printf("Unexpected SS80 CONFIG token: %s, at line:%d\n", ptr,lines);
   135c2:	9c 93       	st	X, r25
   135c4:	8e 93       	st	-X, r24
   135c6:	93 97       	sbiw	r26, 0x23	; 35
   135c8:	a6 cd       	rjmp	.-1204   	; 0x13116 <Read_Config+0x158>
   135ca:	80 91 64 18 	lds	r24, 0x1864	; 0x801864 <lines+0x1>
   135ce:	8f 93       	push	r24
   135d0:	80 91 63 18 	lds	r24, 0x1863	; 0x801863 <lines>
   135d4:	8f 93       	push	r24
                ++errors;
            }
            break;

        case SS80_CONTROLLER:
            if( (ind = token(ptr,"UNITS_INSTALLED")) )
   135d6:	df 92       	push	r13
   135d8:	cf 92       	push	r12
   135da:	8e e7       	ldi	r24, 0x7E	; 126
   135dc:	9b e1       	ldi	r25, 0x1B	; 27
   135de:	f2 ce       	rjmp	.-540    	; 0x133c4 <Read_Config+0x406>
   135e0:	67 e5       	ldi	r22, 0x57	; 87
   135e2:	7e e0       	ldi	r23, 0x0E	; 14
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val))
   135e4:	c6 01       	movw	r24, r12
   135e6:	0e 94 40 34 	call	0x6880	; 0x6880 <token>
   135ea:	00 97       	sbiw	r24, 0x00	; 0
   135ec:	f9 f0       	breq	.+62     	; 0x1362c <Read_Config+0x66e>
   135ee:	9e 01       	movw	r18, r28
   135f0:	2f 57       	subi	r18, 0x7F	; 127
   135f2:	3f 4f       	sbci	r19, 0xFF	; 255
   135f4:	79 01       	movw	r14, r18
   135f6:	0f ef       	ldi	r16, 0xFF	; 255
   135f8:	1f ef       	ldi	r17, 0xFF	; 255
   135fa:	20 e0       	ldi	r18, 0x00	; 0
   135fc:	30 e0       	ldi	r19, 0x00	; 0
   135fe:	40 e0       	ldi	r20, 0x00	; 0
   13600:	50 e0       	ldi	r21, 0x00	; 0
   13602:	ba 01       	movw	r22, r20
   13604:	8c 0d       	add	r24, r12
                    ++errors;
   13606:	9d 1d       	adc	r25, r13
   13608:	fa da       	rcall	.-2572   	; 0x12bfe <assign_value>
   1360a:	89 2b       	or	r24, r25
                SS80p->CONTROLLER.UNITS_INSTALLED = val;
   1360c:	19 f4       	brne	.+6      	; 0x13614 <Read_Config+0x656>
   1360e:	3f ef       	ldi	r19, 0xFF	; 255
   13610:	a3 1a       	sub	r10, r19
   13612:	b3 0a       	sbc	r11, r19
   13614:	cf 57       	subi	r28, 0x7F	; 127
   13616:	df 4f       	sbci	r29, 0xFF	; 255
   13618:	88 81       	ld	r24, Y
   1361a:	99 81       	ldd	r25, Y+1	; 0x01
   1361c:	c1 58       	subi	r28, 0x81	; 129
   1361e:	d0 40       	sbci	r29, 0x00	; 0
   13620:	d2 01       	movw	r26, r4
            }
            else if( (ind = token(ptr,"TRANSFER_RATE")) )
   13622:	96 96       	adiw	r26, 0x26	; 38
   13624:	9c 93       	st	X, r25
   13626:	8e 93       	st	-X, r24
   13628:	95 97       	sbiw	r26, 0x25	; 37
   1362a:	75 cd       	rjmp	.-1302   	; 0x13116 <Read_Config+0x158>
   1362c:	6f eb       	ldi	r22, 0xBF	; 191
   1362e:	7e e0       	ldi	r23, 0x0E	; 14
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val))
   13630:	c6 01       	movw	r24, r12
   13632:	0e 94 40 34 	call	0x6880	; 0x6880 <token>
   13636:	00 97       	sbiw	r24, 0x00	; 0
   13638:	d9 f0       	breq	.+54     	; 0x13670 <Read_Config+0x6b2>
   1363a:	fe 01       	movw	r30, r28
   1363c:	ef 57       	subi	r30, 0x7F	; 127
   1363e:	ff 4f       	sbci	r31, 0xFF	; 255
   13640:	7f 01       	movw	r14, r30
   13642:	0f ef       	ldi	r16, 0xFF	; 255
   13644:	1f ef       	ldi	r17, 0xFF	; 255
   13646:	20 e0       	ldi	r18, 0x00	; 0
   13648:	30 e0       	ldi	r19, 0x00	; 0
   1364a:	40 e0       	ldi	r20, 0x00	; 0
   1364c:	50 e0       	ldi	r21, 0x00	; 0
   1364e:	ba 01       	movw	r22, r20
   13650:	8c 0d       	add	r24, r12
                    ++errors;
   13652:	9d 1d       	adc	r25, r13
   13654:	d4 da       	rcall	.-2648   	; 0x12bfe <assign_value>
   13656:	89 2b       	or	r24, r25
                SS80p->CONTROLLER.TRANSFER_RATE = val;
   13658:	19 f4       	brne	.+6      	; 0x13660 <Read_Config+0x6a2>
   1365a:	ff ef       	ldi	r31, 0xFF	; 255
   1365c:	af 1a       	sub	r10, r31
   1365e:	bf 0a       	sbc	r11, r31
   13660:	cf 57       	subi	r28, 0x7F	; 127
   13662:	df 4f       	sbci	r29, 0xFF	; 255
   13664:	88 81       	ld	r24, Y
            }
            else if( (ind = token(ptr,"TYPE")) )
   13666:	99 81       	ldd	r25, Y+1	; 0x01
   13668:	c1 58       	subi	r28, 0x81	; 129
   1366a:	d0 40       	sbci	r29, 0x00	; 0
   1366c:	d2 01       	movw	r26, r4
   1366e:	47 c4       	rjmp	.+2190   	; 0x13efe <Read_Config+0xf40>
   13670:	6c ea       	ldi	r22, 0xAC	; 172
   13672:	7d e0       	ldi	r23, 0x0D	; 13
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val))
   13674:	c6 01       	movw	r24, r12
   13676:	0e 94 40 34 	call	0x6880	; 0x6880 <token>
   1367a:	00 97       	sbiw	r24, 0x00	; 0
   1367c:	e1 f0       	breq	.+56     	; 0x136b6 <Read_Config+0x6f8>
   1367e:	fe 01       	movw	r30, r28
   13680:	ef 57       	subi	r30, 0x7F	; 127
   13682:	ff 4f       	sbci	r31, 0xFF	; 255
   13684:	7f 01       	movw	r14, r30
   13686:	0f ef       	ldi	r16, 0xFF	; 255
   13688:	1f ef       	ldi	r17, 0xFF	; 255
   1368a:	20 e0       	ldi	r18, 0x00	; 0
   1368c:	30 e0       	ldi	r19, 0x00	; 0
   1368e:	40 e0       	ldi	r20, 0x00	; 0
   13690:	50 e0       	ldi	r21, 0x00	; 0
   13692:	ba 01       	movw	r22, r20
   13694:	8c 0d       	add	r24, r12
                    ++errors;
   13696:	9d 1d       	adc	r25, r13
   13698:	b2 da       	rcall	.-2716   	; 0x12bfe <assign_value>
   1369a:	89 2b       	or	r24, r25
                SS80p->CONTROLLER.TYPE = val;
   1369c:	19 f4       	brne	.+6      	; 0x136a4 <Read_Config+0x6e6>
   1369e:	ff ef       	ldi	r31, 0xFF	; 255
   136a0:	af 1a       	sub	r10, r31
   136a2:	bf 0a       	sbc	r11, r31
   136a4:	cf 57       	subi	r28, 0x7F	; 127
   136a6:	df 4f       	sbci	r29, 0xFF	; 255
   136a8:	88 81       	ld	r24, Y
   136aa:	c1 58       	subi	r28, 0x81	; 129
   136ac:	d0 40       	sbci	r29, 0x00	; 0
            }
            else
            {
                printf("Unexpected SS80 CONTROLLER token: %s, at line:%d\n", ptr,lines);
   136ae:	d2 01       	movw	r26, r4
   136b0:	99 96       	adiw	r26, 0x29	; 41
   136b2:	8c 93       	st	X, r24
   136b4:	30 cd       	rjmp	.-1440   	; 0x13116 <Read_Config+0x158>
   136b6:	80 91 64 18 	lds	r24, 0x1864	; 0x801864 <lines+0x1>
   136ba:	8f 93       	push	r24
   136bc:	80 91 63 18 	lds	r24, 0x1863	; 0x801863 <lines>
   136c0:	8f 93       	push	r24
            }
            break;


        case SS80_UNIT:
            if( (ind = token(ptr,"UNIT_TYPE")) )
   136c2:	df 92       	push	r13
   136c4:	cf 92       	push	r12
   136c6:	8c e4       	ldi	r24, 0x4C	; 76
   136c8:	9b e1       	ldi	r25, 0x1B	; 27
   136ca:	7c ce       	rjmp	.-776    	; 0x133c4 <Read_Config+0x406>
   136cc:	67 e6       	ldi	r22, 0x67	; 103
   136ce:	7e e0       	ldi	r23, 0x0E	; 14
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val))
   136d0:	c6 01       	movw	r24, r12
   136d2:	0e 94 40 34 	call	0x6880	; 0x6880 <token>
   136d6:	00 97       	sbiw	r24, 0x00	; 0
   136d8:	e1 f0       	breq	.+56     	; 0x13712 <Read_Config+0x754>
   136da:	9e 01       	movw	r18, r28
   136dc:	2f 57       	subi	r18, 0x7F	; 127
   136de:	3f 4f       	sbci	r19, 0xFF	; 255
   136e0:	79 01       	movw	r14, r18
   136e2:	0f ef       	ldi	r16, 0xFF	; 255
   136e4:	1f ef       	ldi	r17, 0xFF	; 255
   136e6:	20 e0       	ldi	r18, 0x00	; 0
   136e8:	30 e0       	ldi	r19, 0x00	; 0
   136ea:	40 e0       	ldi	r20, 0x00	; 0
   136ec:	50 e0       	ldi	r21, 0x00	; 0
   136ee:	ba 01       	movw	r22, r20
   136f0:	8c 0d       	add	r24, r12
                    ++errors;
   136f2:	9d 1d       	adc	r25, r13
   136f4:	84 da       	rcall	.-2808   	; 0x12bfe <assign_value>
                SS80p->UNIT.UNIT_TYPE = val;
   136f6:	89 2b       	or	r24, r25
   136f8:	19 f4       	brne	.+6      	; 0x13700 <Read_Config+0x742>
   136fa:	3f ef       	ldi	r19, 0xFF	; 255
   136fc:	a3 1a       	sub	r10, r19
   136fe:	b3 0a       	sbc	r11, r19
   13700:	cf 57       	subi	r28, 0x7F	; 127
   13702:	df 4f       	sbci	r29, 0xFF	; 255
   13704:	88 81       	ld	r24, Y
            }
            else if( (ind = token(ptr,"DEVICE_NUMBER")) )
   13706:	c1 58       	subi	r28, 0x81	; 129
   13708:	d0 40       	sbci	r29, 0x00	; 0
   1370a:	d2 01       	movw	r26, r4
   1370c:	9a 96       	adiw	r26, 0x2a	; 42
   1370e:	8c 93       	st	X, r24
   13710:	02 cd       	rjmp	.-1532   	; 0x13116 <Read_Config+0x158>
   13712:	61 e7       	ldi	r22, 0x71	; 113
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFFFFFUL, &val))
   13714:	7e e0       	ldi	r23, 0x0E	; 14
   13716:	c6 01       	movw	r24, r12
   13718:	0e 94 40 34 	call	0x6880	; 0x6880 <token>
   1371c:	00 97       	sbiw	r24, 0x00	; 0
   1371e:	01 f1       	breq	.+64     	; 0x13760 <Read_Config+0x7a2>
   13720:	fe 01       	movw	r30, r28
   13722:	ef 57       	subi	r30, 0x7F	; 127
   13724:	ff 4f       	sbci	r31, 0xFF	; 255
   13726:	7f 01       	movw	r14, r30
   13728:	0f ef       	ldi	r16, 0xFF	; 255
   1372a:	1f ef       	ldi	r17, 0xFF	; 255
   1372c:	98 01       	movw	r18, r16
   1372e:	40 e0       	ldi	r20, 0x00	; 0
   13730:	50 e0       	ldi	r21, 0x00	; 0
   13732:	ba 01       	movw	r22, r20
                    ++errors;
   13734:	8c 0d       	add	r24, r12
   13736:	9d 1d       	adc	r25, r13
   13738:	62 da       	rcall	.-2876   	; 0x12bfe <assign_value>
                SS80p->UNIT.DEVICE_NUMBER = val;
   1373a:	89 2b       	or	r24, r25
   1373c:	19 f4       	brne	.+6      	; 0x13744 <Read_Config+0x786>
   1373e:	ff ef       	ldi	r31, 0xFF	; 255
   13740:	af 1a       	sub	r10, r31
   13742:	bf 0a       	sbc	r11, r31
   13744:	cf 57       	subi	r28, 0x7F	; 127
   13746:	df 4f       	sbci	r29, 0xFF	; 255
   13748:	88 81       	ld	r24, Y
   1374a:	99 81       	ldd	r25, Y+1	; 0x01
   1374c:	aa 81       	ldd	r26, Y+2	; 0x02
   1374e:	bb 81       	ldd	r27, Y+3	; 0x03
   13750:	c1 58       	subi	r28, 0x81	; 129
   13752:	d0 40       	sbci	r29, 0x00	; 0
            }
            else if( (ind = token(ptr,"BYTES_PER_BLOCK")) )
   13754:	f2 01       	movw	r30, r4
   13756:	83 a7       	std	Z+43, r24	; 0x2b
   13758:	94 a7       	std	Z+44, r25	; 0x2c
   1375a:	a5 a7       	std	Z+45, r26	; 0x2d
   1375c:	b6 a7       	std	Z+46, r27	; 0x2e
   1375e:	db cc       	rjmp	.-1610   	; 0x13116 <Read_Config+0x158>
   13760:	6f e7       	ldi	r22, 0x7F	; 127
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0x1000UL, &val) )
   13762:	7e e0       	ldi	r23, 0x0E	; 14
   13764:	c6 01       	movw	r24, r12
   13766:	0e 94 40 34 	call	0x6880	; 0x6880 <token>
   1376a:	00 97       	sbiw	r24, 0x00	; 0
   1376c:	f9 f0       	breq	.+62     	; 0x137ac <Read_Config+0x7ee>
   1376e:	9e 01       	movw	r18, r28
   13770:	2f 57       	subi	r18, 0x7F	; 127
   13772:	3f 4f       	sbci	r19, 0xFF	; 255
   13774:	79 01       	movw	r14, r18
   13776:	00 e0       	ldi	r16, 0x00	; 0
   13778:	10 e1       	ldi	r17, 0x10	; 16
   1377a:	20 e0       	ldi	r18, 0x00	; 0
   1377c:	30 e0       	ldi	r19, 0x00	; 0
   1377e:	40 e0       	ldi	r20, 0x00	; 0
   13780:	50 e0       	ldi	r21, 0x00	; 0
   13782:	ba 01       	movw	r22, r20
                    ++errors;
   13784:	8c 0d       	add	r24, r12
   13786:	9d 1d       	adc	r25, r13
   13788:	3a da       	rcall	.-2956   	; 0x12bfe <assign_value>
                SS80p->UNIT.BYTES_PER_BLOCK = val;
   1378a:	89 2b       	or	r24, r25
   1378c:	19 f4       	brne	.+6      	; 0x13794 <Read_Config+0x7d6>
   1378e:	3f ef       	ldi	r19, 0xFF	; 255
   13790:	a3 1a       	sub	r10, r19
   13792:	b3 0a       	sbc	r11, r19
   13794:	cf 57       	subi	r28, 0x7F	; 127
   13796:	df 4f       	sbci	r29, 0xFF	; 255
   13798:	88 81       	ld	r24, Y
   1379a:	99 81       	ldd	r25, Y+1	; 0x01
   1379c:	c1 58       	subi	r28, 0x81	; 129
   1379e:	d0 40       	sbci	r29, 0x00	; 0
            }
            else if( (ind = token(ptr,"BUFFERED_BLOCKS")) )
   137a0:	d2 01       	movw	r26, r4
   137a2:	d0 96       	adiw	r26, 0x30	; 48
   137a4:	9c 93       	st	X, r25
   137a6:	8e 93       	st	-X, r24
   137a8:	9f 97       	sbiw	r26, 0x2f	; 47
   137aa:	b5 cc       	rjmp	.-1686   	; 0x13116 <Read_Config+0x158>
   137ac:	6f e8       	ldi	r22, 0x8F	; 143
            {
                ptr += ind;
                if (!assign_value(ptr, 1UL, 1UL, &val) )
   137ae:	7e e0       	ldi	r23, 0x0E	; 14
   137b0:	c6 01       	movw	r24, r12
   137b2:	0e 94 40 34 	call	0x6880	; 0x6880 <token>
   137b6:	00 97       	sbiw	r24, 0x00	; 0
   137b8:	e9 f0       	breq	.+58     	; 0x137f4 <Read_Config+0x836>
   137ba:	fe 01       	movw	r30, r28
   137bc:	ef 57       	subi	r30, 0x7F	; 127
   137be:	ff 4f       	sbci	r31, 0xFF	; 255
   137c0:	7f 01       	movw	r14, r30
   137c2:	01 e0       	ldi	r16, 0x01	; 1
   137c4:	10 e0       	ldi	r17, 0x00	; 0
   137c6:	20 e0       	ldi	r18, 0x00	; 0
   137c8:	30 e0       	ldi	r19, 0x00	; 0
   137ca:	41 e0       	ldi	r20, 0x01	; 1
   137cc:	50 e0       	ldi	r21, 0x00	; 0
   137ce:	60 e0       	ldi	r22, 0x00	; 0
                    ++errors;
   137d0:	70 e0       	ldi	r23, 0x00	; 0
   137d2:	8c 0d       	add	r24, r12
                SS80p->UNIT.BUFFERED_BLOCKS = val;
   137d4:	9d 1d       	adc	r25, r13
   137d6:	13 da       	rcall	.-3034   	; 0x12bfe <assign_value>
   137d8:	89 2b       	or	r24, r25
   137da:	19 f4       	brne	.+6      	; 0x137e2 <Read_Config+0x824>
   137dc:	ff ef       	ldi	r31, 0xFF	; 255
   137de:	af 1a       	sub	r10, r31
   137e0:	bf 0a       	sbc	r11, r31
   137e2:	cf 57       	subi	r28, 0x7F	; 127
   137e4:	df 4f       	sbci	r29, 0xFF	; 255
            }
            else if( (ind = token(ptr,"BURST_SIZE")) )
   137e6:	88 81       	ld	r24, Y
   137e8:	c1 58       	subi	r28, 0x81	; 129
   137ea:	d0 40       	sbci	r29, 0x00	; 0
   137ec:	d2 01       	movw	r26, r4
   137ee:	d1 96       	adiw	r26, 0x31	; 49
   137f0:	8c 93       	st	X, r24
   137f2:	91 cc       	rjmp	.-1758   	; 0x13116 <Read_Config+0x158>
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0, &val) )
   137f4:	6f e9       	ldi	r22, 0x9F	; 159
   137f6:	7e e0       	ldi	r23, 0x0E	; 14
   137f8:	c6 01       	movw	r24, r12
   137fa:	0e 94 40 34 	call	0x6880	; 0x6880 <token>
   137fe:	00 97       	sbiw	r24, 0x00	; 0
   13800:	d9 f0       	breq	.+54     	; 0x13838 <Read_Config+0x87a>
   13802:	fe 01       	movw	r30, r28
   13804:	ef 57       	subi	r30, 0x7F	; 127
   13806:	ff 4f       	sbci	r31, 0xFF	; 255
   13808:	7f 01       	movw	r14, r30
   1380a:	00 e0       	ldi	r16, 0x00	; 0
   1380c:	10 e0       	ldi	r17, 0x00	; 0
   1380e:	98 01       	movw	r18, r16
   13810:	40 e0       	ldi	r20, 0x00	; 0
                    ++errors;
   13812:	50 e0       	ldi	r21, 0x00	; 0
   13814:	ba 01       	movw	r22, r20
                SS80p->UNIT.BURST_SIZE = val;
   13816:	8c 0d       	add	r24, r12
   13818:	9d 1d       	adc	r25, r13
   1381a:	f1 d9       	rcall	.-3102   	; 0x12bfe <assign_value>
   1381c:	89 2b       	or	r24, r25
   1381e:	19 f4       	brne	.+6      	; 0x13826 <Read_Config+0x868>
   13820:	ff ef       	ldi	r31, 0xFF	; 255
   13822:	af 1a       	sub	r10, r31
   13824:	bf 0a       	sbc	r11, r31
   13826:	cf 57       	subi	r28, 0x7F	; 127
            }
            else if( (ind = token(ptr,"BLOCK_TIME")) )
   13828:	df 4f       	sbci	r29, 0xFF	; 255
   1382a:	88 81       	ld	r24, Y
   1382c:	c1 58       	subi	r28, 0x81	; 129
   1382e:	d0 40       	sbci	r29, 0x00	; 0
   13830:	d2 01       	movw	r26, r4
   13832:	d2 96       	adiw	r26, 0x32	; 50
   13834:	8c 93       	st	X, r24
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val) )
   13836:	6f cc       	rjmp	.-1826   	; 0x13116 <Read_Config+0x158>
   13838:	6a ea       	ldi	r22, 0xAA	; 170
   1383a:	7e e0       	ldi	r23, 0x0E	; 14
   1383c:	c6 01       	movw	r24, r12
   1383e:	0e 94 40 34 	call	0x6880	; 0x6880 <token>
   13842:	00 97       	sbiw	r24, 0x00	; 0
   13844:	f9 f0       	breq	.+62     	; 0x13884 <Read_Config+0x8c6>
   13846:	fe 01       	movw	r30, r28
   13848:	ef 57       	subi	r30, 0x7F	; 127
   1384a:	ff 4f       	sbci	r31, 0xFF	; 255
   1384c:	7f 01       	movw	r14, r30
   1384e:	0f ef       	ldi	r16, 0xFF	; 255
   13850:	1f ef       	ldi	r17, 0xFF	; 255
   13852:	20 e0       	ldi	r18, 0x00	; 0
   13854:	30 e0       	ldi	r19, 0x00	; 0
   13856:	40 e0       	ldi	r20, 0x00	; 0
                    ++errors;
   13858:	50 e0       	ldi	r21, 0x00	; 0
   1385a:	ba 01       	movw	r22, r20
                SS80p->UNIT.BLOCK_TIME = val;
   1385c:	8c 0d       	add	r24, r12
   1385e:	9d 1d       	adc	r25, r13
   13860:	ce d9       	rcall	.-3172   	; 0x12bfe <assign_value>
   13862:	89 2b       	or	r24, r25
   13864:	19 f4       	brne	.+6      	; 0x1386c <Read_Config+0x8ae>
   13866:	ff ef       	ldi	r31, 0xFF	; 255
   13868:	af 1a       	sub	r10, r31
   1386a:	bf 0a       	sbc	r11, r31
   1386c:	cf 57       	subi	r28, 0x7F	; 127
   1386e:	df 4f       	sbci	r29, 0xFF	; 255
   13870:	88 81       	ld	r24, Y
   13872:	99 81       	ldd	r25, Y+1	; 0x01
            }
            else if( (ind = token(ptr,"CONTINOUS_TRANSFER_RATE")) )
   13874:	c1 58       	subi	r28, 0x81	; 129
   13876:	d0 40       	sbci	r29, 0x00	; 0
   13878:	d2 01       	movw	r26, r4
   1387a:	d4 96       	adiw	r26, 0x34	; 52
   1387c:	9c 93       	st	X, r25
   1387e:	8e 93       	st	-X, r24
   13880:	d3 97       	sbiw	r26, 0x33	; 51
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val) )
   13882:	49 cc       	rjmp	.-1902   	; 0x13116 <Read_Config+0x158>
   13884:	65 eb       	ldi	r22, 0xB5	; 181
   13886:	7e e0       	ldi	r23, 0x0E	; 14
   13888:	c6 01       	movw	r24, r12
   1388a:	0e 94 40 34 	call	0x6880	; 0x6880 <token>
   1388e:	00 97       	sbiw	r24, 0x00	; 0
   13890:	f9 f0       	breq	.+62     	; 0x138d0 <Read_Config+0x912>
   13892:	fe 01       	movw	r30, r28
   13894:	ef 57       	subi	r30, 0x7F	; 127
   13896:	ff 4f       	sbci	r31, 0xFF	; 255
   13898:	7f 01       	movw	r14, r30
   1389a:	0f ef       	ldi	r16, 0xFF	; 255
   1389c:	1f ef       	ldi	r17, 0xFF	; 255
   1389e:	20 e0       	ldi	r18, 0x00	; 0
   138a0:	30 e0       	ldi	r19, 0x00	; 0
   138a2:	40 e0       	ldi	r20, 0x00	; 0
                    ++errors;
   138a4:	50 e0       	ldi	r21, 0x00	; 0
   138a6:	ba 01       	movw	r22, r20
                SS80p->UNIT.CONTINOUS_TRANSFER_RATE = val;
   138a8:	8c 0d       	add	r24, r12
   138aa:	9d 1d       	adc	r25, r13
   138ac:	a8 d9       	rcall	.-3248   	; 0x12bfe <assign_value>
   138ae:	89 2b       	or	r24, r25
   138b0:	19 f4       	brne	.+6      	; 0x138b8 <Read_Config+0x8fa>
   138b2:	ff ef       	ldi	r31, 0xFF	; 255
   138b4:	af 1a       	sub	r10, r31
   138b6:	bf 0a       	sbc	r11, r31
   138b8:	cf 57       	subi	r28, 0x7F	; 127
   138ba:	df 4f       	sbci	r29, 0xFF	; 255
   138bc:	88 81       	ld	r24, Y
   138be:	99 81       	ldd	r25, Y+1	; 0x01
            }
            else if( (ind = token(ptr,"OPTIMAL_RETRY_TIME")) )
   138c0:	c1 58       	subi	r28, 0x81	; 129
   138c2:	d0 40       	sbci	r29, 0x00	; 0
   138c4:	d2 01       	movw	r26, r4
   138c6:	d6 96       	adiw	r26, 0x36	; 54
   138c8:	9c 93       	st	X, r25
   138ca:	8e 93       	st	-X, r24
   138cc:	d5 97       	sbiw	r26, 0x35	; 53
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val) )
   138ce:	23 cc       	rjmp	.-1978   	; 0x13116 <Read_Config+0x158>
   138d0:	6d ec       	ldi	r22, 0xCD	; 205
   138d2:	7e e0       	ldi	r23, 0x0E	; 14
   138d4:	c6 01       	movw	r24, r12
   138d6:	0e 94 40 34 	call	0x6880	; 0x6880 <token>
   138da:	00 97       	sbiw	r24, 0x00	; 0
   138dc:	f9 f0       	breq	.+62     	; 0x1391c <Read_Config+0x95e>
   138de:	fe 01       	movw	r30, r28
   138e0:	ef 57       	subi	r30, 0x7F	; 127
   138e2:	ff 4f       	sbci	r31, 0xFF	; 255
   138e4:	7f 01       	movw	r14, r30
   138e6:	0f ef       	ldi	r16, 0xFF	; 255
   138e8:	1f ef       	ldi	r17, 0xFF	; 255
   138ea:	20 e0       	ldi	r18, 0x00	; 0
   138ec:	30 e0       	ldi	r19, 0x00	; 0
                    ++errors;
   138ee:	40 e0       	ldi	r20, 0x00	; 0
   138f0:	50 e0       	ldi	r21, 0x00	; 0
                SS80p->UNIT.OPTIMAL_RETRY_TIME = val;
   138f2:	ba 01       	movw	r22, r20
   138f4:	8c 0d       	add	r24, r12
   138f6:	9d 1d       	adc	r25, r13
   138f8:	82 d9       	rcall	.-3324   	; 0x12bfe <assign_value>
   138fa:	89 2b       	or	r24, r25
   138fc:	19 f4       	brne	.+6      	; 0x13904 <Read_Config+0x946>
   138fe:	ff ef       	ldi	r31, 0xFF	; 255
   13900:	af 1a       	sub	r10, r31
   13902:	bf 0a       	sbc	r11, r31
   13904:	cf 57       	subi	r28, 0x7F	; 127
   13906:	df 4f       	sbci	r29, 0xFF	; 255
   13908:	88 81       	ld	r24, Y
            }
            else if( (ind = token(ptr,"ACCESS_TIME")) )
   1390a:	99 81       	ldd	r25, Y+1	; 0x01
   1390c:	c1 58       	subi	r28, 0x81	; 129
   1390e:	d0 40       	sbci	r29, 0x00	; 0
   13910:	d2 01       	movw	r26, r4
   13912:	d8 96       	adiw	r26, 0x38	; 56
   13914:	9c 93       	st	X, r25
   13916:	8e 93       	st	-X, r24
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val) )
   13918:	d7 97       	sbiw	r26, 0x37	; 55
   1391a:	fd cb       	rjmp	.-2054   	; 0x13116 <Read_Config+0x158>
   1391c:	60 ee       	ldi	r22, 0xE0	; 224
   1391e:	7e e0       	ldi	r23, 0x0E	; 14
   13920:	c6 01       	movw	r24, r12
   13922:	0e 94 40 34 	call	0x6880	; 0x6880 <token>
   13926:	00 97       	sbiw	r24, 0x00	; 0
   13928:	f9 f0       	breq	.+62     	; 0x13968 <Read_Config+0x9aa>
   1392a:	fe 01       	movw	r30, r28
   1392c:	ef 57       	subi	r30, 0x7F	; 127
   1392e:	ff 4f       	sbci	r31, 0xFF	; 255
   13930:	7f 01       	movw	r14, r30
   13932:	0f ef       	ldi	r16, 0xFF	; 255
   13934:	1f ef       	ldi	r17, 0xFF	; 255
   13936:	20 e0       	ldi	r18, 0x00	; 0
                    ++errors;
   13938:	30 e0       	ldi	r19, 0x00	; 0
   1393a:	40 e0       	ldi	r20, 0x00	; 0
   1393c:	50 e0       	ldi	r21, 0x00	; 0
                SS80p->UNIT.ACCESS_TIME = val;
   1393e:	ba 01       	movw	r22, r20
   13940:	8c 0d       	add	r24, r12
   13942:	9d 1d       	adc	r25, r13
   13944:	5c d9       	rcall	.-3400   	; 0x12bfe <assign_value>
   13946:	89 2b       	or	r24, r25
   13948:	19 f4       	brne	.+6      	; 0x13950 <Read_Config+0x992>
   1394a:	ff ef       	ldi	r31, 0xFF	; 255
   1394c:	af 1a       	sub	r10, r31
   1394e:	bf 0a       	sbc	r11, r31
   13950:	cf 57       	subi	r28, 0x7F	; 127
   13952:	df 4f       	sbci	r29, 0xFF	; 255
   13954:	88 81       	ld	r24, Y
            }
            else if( (ind = token(ptr,"MAXIMUM_INTERLEAVE")) )
   13956:	99 81       	ldd	r25, Y+1	; 0x01
   13958:	c1 58       	subi	r28, 0x81	; 129
   1395a:	d0 40       	sbci	r29, 0x00	; 0
   1395c:	d2 01       	movw	r26, r4
   1395e:	da 96       	adiw	r26, 0x3a	; 58
   13960:	9c 93       	st	X, r25
   13962:	8e 93       	st	-X, r24
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFUL, &val) )
   13964:	d9 97       	sbiw	r26, 0x39	; 57
   13966:	d7 cb       	rjmp	.-2130   	; 0x13116 <Read_Config+0x158>
   13968:	6c ee       	ldi	r22, 0xEC	; 236
   1396a:	7e e0       	ldi	r23, 0x0E	; 14
   1396c:	c6 01       	movw	r24, r12
   1396e:	0e 94 40 34 	call	0x6880	; 0x6880 <token>
   13972:	00 97       	sbiw	r24, 0x00	; 0
   13974:	e1 f0       	breq	.+56     	; 0x139ae <Read_Config+0x9f0>
   13976:	fe 01       	movw	r30, r28
   13978:	ef 57       	subi	r30, 0x7F	; 127
   1397a:	ff 4f       	sbci	r31, 0xFF	; 255
   1397c:	7f 01       	movw	r14, r30
   1397e:	0f ef       	ldi	r16, 0xFF	; 255
   13980:	10 e0       	ldi	r17, 0x00	; 0
   13982:	20 e0       	ldi	r18, 0x00	; 0
                    ++errors;
   13984:	30 e0       	ldi	r19, 0x00	; 0
   13986:	40 e0       	ldi	r20, 0x00	; 0
   13988:	50 e0       	ldi	r21, 0x00	; 0
                SS80p->UNIT.MAXIMUM_INTERLEAVE = val;
   1398a:	ba 01       	movw	r22, r20
   1398c:	8c 0d       	add	r24, r12
   1398e:	9d 1d       	adc	r25, r13
   13990:	36 d9       	rcall	.-3476   	; 0x12bfe <assign_value>
   13992:	89 2b       	or	r24, r25
   13994:	19 f4       	brne	.+6      	; 0x1399c <Read_Config+0x9de>
   13996:	ff ef       	ldi	r31, 0xFF	; 255
   13998:	af 1a       	sub	r10, r31
   1399a:	bf 0a       	sbc	r11, r31
            }
            else if( (ind = token(ptr,"FIXED_VOLUMES")) )
   1399c:	cf 57       	subi	r28, 0x7F	; 127
   1399e:	df 4f       	sbci	r29, 0xFF	; 255
   139a0:	88 81       	ld	r24, Y
   139a2:	c1 58       	subi	r28, 0x81	; 129
   139a4:	d0 40       	sbci	r29, 0x00	; 0
   139a6:	d2 01       	movw	r26, r4
   139a8:	db 96       	adiw	r26, 0x3b	; 59
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFUL, &val) )
   139aa:	8c 93       	st	X, r24
   139ac:	b4 cb       	rjmp	.-2200   	; 0x13116 <Read_Config+0x158>
   139ae:	6f ef       	ldi	r22, 0xFF	; 255
   139b0:	7e e0       	ldi	r23, 0x0E	; 14
   139b2:	c6 01       	movw	r24, r12
   139b4:	0e 94 40 34 	call	0x6880	; 0x6880 <token>
   139b8:	00 97       	sbiw	r24, 0x00	; 0
   139ba:	e1 f0       	breq	.+56     	; 0x139f4 <Read_Config+0xa36>
   139bc:	fe 01       	movw	r30, r28
   139be:	ef 57       	subi	r30, 0x7F	; 127
   139c0:	ff 4f       	sbci	r31, 0xFF	; 255
   139c2:	7f 01       	movw	r14, r30
   139c4:	0f ef       	ldi	r16, 0xFF	; 255
   139c6:	10 e0       	ldi	r17, 0x00	; 0
   139c8:	20 e0       	ldi	r18, 0x00	; 0
                    ++errors;
   139ca:	30 e0       	ldi	r19, 0x00	; 0
   139cc:	40 e0       	ldi	r20, 0x00	; 0
   139ce:	50 e0       	ldi	r21, 0x00	; 0
                SS80p->UNIT.FIXED_VOLUMES = val;
   139d0:	ba 01       	movw	r22, r20
   139d2:	8c 0d       	add	r24, r12
   139d4:	9d 1d       	adc	r25, r13
   139d6:	13 d9       	rcall	.-3546   	; 0x12bfe <assign_value>
   139d8:	89 2b       	or	r24, r25
   139da:	19 f4       	brne	.+6      	; 0x139e2 <Read_Config+0xa24>
   139dc:	ff ef       	ldi	r31, 0xFF	; 255
   139de:	af 1a       	sub	r10, r31
   139e0:	bf 0a       	sbc	r11, r31
            }
            else if( (ind = token(ptr,"REMOVABLE_VOLUMES")) )
   139e2:	cf 57       	subi	r28, 0x7F	; 127
   139e4:	df 4f       	sbci	r29, 0xFF	; 255
   139e6:	88 81       	ld	r24, Y
   139e8:	c1 58       	subi	r28, 0x81	; 129
   139ea:	d0 40       	sbci	r29, 0x00	; 0
   139ec:	d2 01       	movw	r26, r4
   139ee:	dc 96       	adiw	r26, 0x3c	; 60
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFUL, &val) )
   139f0:	8c 93       	st	X, r24
   139f2:	91 cb       	rjmp	.-2270   	; 0x13116 <Read_Config+0x158>
   139f4:	6d e0       	ldi	r22, 0x0D	; 13
   139f6:	7f e0       	ldi	r23, 0x0F	; 15
   139f8:	c6 01       	movw	r24, r12
   139fa:	0e 94 40 34 	call	0x6880	; 0x6880 <token>
   139fe:	00 97       	sbiw	r24, 0x00	; 0
   13a00:	e1 f0       	breq	.+56     	; 0x13a3a <Read_Config+0xa7c>
   13a02:	fe 01       	movw	r30, r28
   13a04:	ef 57       	subi	r30, 0x7F	; 127
   13a06:	ff 4f       	sbci	r31, 0xFF	; 255
   13a08:	7f 01       	movw	r14, r30
   13a0a:	0f ef       	ldi	r16, 0xFF	; 255
   13a0c:	10 e0       	ldi	r17, 0x00	; 0
   13a0e:	20 e0       	ldi	r18, 0x00	; 0
   13a10:	30 e0       	ldi	r19, 0x00	; 0
                    ++errors;
   13a12:	40 e0       	ldi	r20, 0x00	; 0
   13a14:	50 e0       	ldi	r21, 0x00	; 0
                SS80p->UNIT.REMOVABLE_VOLUMES = val;
   13a16:	ba 01       	movw	r22, r20
   13a18:	8c 0d       	add	r24, r12
   13a1a:	9d 1d       	adc	r25, r13
   13a1c:	f0 d8       	rcall	.-3616   	; 0x12bfe <assign_value>
   13a1e:	89 2b       	or	r24, r25
   13a20:	19 f4       	brne	.+6      	; 0x13a28 <Read_Config+0xa6a>
   13a22:	ff ef       	ldi	r31, 0xFF	; 255
   13a24:	af 1a       	sub	r10, r31
            }
            else
            {
                printf("Unexpected SS80 UNIT token: %s, at line:%d\n", ptr,lines);
   13a26:	bf 0a       	sbc	r11, r31
   13a28:	cf 57       	subi	r28, 0x7F	; 127
   13a2a:	df 4f       	sbci	r29, 0xFF	; 255
   13a2c:	88 81       	ld	r24, Y
   13a2e:	c1 58       	subi	r28, 0x81	; 129
   13a30:	d0 40       	sbci	r29, 0x00	; 0
   13a32:	d2 01       	movw	r26, r4
   13a34:	dd 96       	adiw	r26, 0x3d	; 61
   13a36:	8c 93       	st	X, r24
   13a38:	6e cb       	rjmp	.-2340   	; 0x13116 <Read_Config+0x158>
   13a3a:	80 91 64 18 	lds	r24, 0x1864	; 0x801864 <lines+0x1>
                ++errors;
            }
            break;

        case SS80_VOLUME:
            if( (ind = token(ptr,"MAX_CYLINDER")) )
   13a3e:	8f 93       	push	r24
   13a40:	80 91 63 18 	lds	r24, 0x1863	; 0x801863 <lines>
   13a44:	8f 93       	push	r24
   13a46:	df 92       	push	r13
   13a48:	cf 92       	push	r12
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFFFFFUL, &val) )
   13a4a:	80 e2       	ldi	r24, 0x20	; 32
   13a4c:	9b e1       	ldi	r25, 0x1B	; 27
   13a4e:	ba cc       	rjmp	.-1676   	; 0x133c4 <Read_Config+0x406>
   13a50:	6f e1       	ldi	r22, 0x1F	; 31
   13a52:	7f e0       	ldi	r23, 0x0F	; 15
   13a54:	c6 01       	movw	r24, r12
   13a56:	0e 94 40 34 	call	0x6880	; 0x6880 <token>
   13a5a:	00 97       	sbiw	r24, 0x00	; 0
   13a5c:	e9 f0       	breq	.+58     	; 0x13a98 <Read_Config+0xada>
   13a5e:	9e 01       	movw	r18, r28
   13a60:	2f 57       	subi	r18, 0x7F	; 127
   13a62:	3f 4f       	sbci	r19, 0xFF	; 255
   13a64:	79 01       	movw	r14, r18
   13a66:	0f ef       	ldi	r16, 0xFF	; 255
                    ++errors;
   13a68:	1f ef       	ldi	r17, 0xFF	; 255
   13a6a:	98 01       	movw	r18, r16
   13a6c:	40 e0       	ldi	r20, 0x00	; 0
                SS80p->VOLUME.MAX_CYLINDER = val;
   13a6e:	50 e0       	ldi	r21, 0x00	; 0
   13a70:	ba 01       	movw	r22, r20
   13a72:	8c 0d       	add	r24, r12
   13a74:	9d 1d       	adc	r25, r13
   13a76:	c3 d8       	rcall	.-3706   	; 0x12bfe <assign_value>
   13a78:	89 2b       	or	r24, r25
   13a7a:	19 f4       	brne	.+6      	; 0x13a82 <Read_Config+0xac4>
   13a7c:	3f ef       	ldi	r19, 0xFF	; 255
   13a7e:	a3 1a       	sub	r10, r19
   13a80:	b3 0a       	sbc	r11, r19
   13a82:	cf 57       	subi	r28, 0x7F	; 127
            }
            else if( (ind = token(ptr,"MAX_HEAD")) )
   13a84:	df 4f       	sbci	r29, 0xFF	; 255
   13a86:	88 81       	ld	r24, Y
   13a88:	99 81       	ldd	r25, Y+1	; 0x01
   13a8a:	aa 81       	ldd	r26, Y+2	; 0x02
   13a8c:	bb 81       	ldd	r27, Y+3	; 0x03
   13a8e:	c1 58       	subi	r28, 0x81	; 129
   13a90:	d0 40       	sbci	r29, 0x00	; 0
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFUL, &val) )
   13a92:	f2 01       	movw	r30, r4
   13a94:	fe 96       	adiw	r30, 0x3e	; 62
   13a96:	6e c0       	rjmp	.+220    	; 0x13b74 <Read_Config+0xbb6>
   13a98:	6c e2       	ldi	r22, 0x2C	; 44
   13a9a:	7f e0       	ldi	r23, 0x0F	; 15
   13a9c:	c6 01       	movw	r24, r12
   13a9e:	0e 94 40 34 	call	0x6880	; 0x6880 <token>
   13aa2:	00 97       	sbiw	r24, 0x00	; 0
   13aa4:	e9 f0       	breq	.+58     	; 0x13ae0 <Read_Config+0xb22>
   13aa6:	de 01       	movw	r26, r28
   13aa8:	af 57       	subi	r26, 0x7F	; 127
   13aaa:	bf 4f       	sbci	r27, 0xFF	; 255
   13aac:	7d 01       	movw	r14, r26
   13aae:	0f ef       	ldi	r16, 0xFF	; 255
   13ab0:	10 e0       	ldi	r17, 0x00	; 0
                    ++errors;
   13ab2:	20 e0       	ldi	r18, 0x00	; 0
   13ab4:	30 e0       	ldi	r19, 0x00	; 0
   13ab6:	40 e0       	ldi	r20, 0x00	; 0
                SS80p->VOLUME.MAX_HEAD = val;
   13ab8:	50 e0       	ldi	r21, 0x00	; 0
   13aba:	ba 01       	movw	r22, r20
   13abc:	8c 0d       	add	r24, r12
   13abe:	9d 1d       	adc	r25, r13
   13ac0:	9e d8       	rcall	.-3780   	; 0x12bfe <assign_value>
   13ac2:	89 2b       	or	r24, r25
   13ac4:	19 f4       	brne	.+6      	; 0x13acc <Read_Config+0xb0e>
   13ac6:	bf ef       	ldi	r27, 0xFF	; 255
   13ac8:	ab 1a       	sub	r10, r27
   13aca:	bb 0a       	sbc	r11, r27
            }
            else if( (ind = token(ptr,"MAX_SECTOR")) )
   13acc:	cf 57       	subi	r28, 0x7F	; 127
   13ace:	df 4f       	sbci	r29, 0xFF	; 255
   13ad0:	88 81       	ld	r24, Y
   13ad2:	c1 58       	subi	r28, 0x81	; 129
   13ad4:	d0 40       	sbci	r29, 0x00	; 0
   13ad6:	f2 01       	movw	r30, r4
   13ad8:	ee 5b       	subi	r30, 0xBE	; 190
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val) )
   13ada:	ff 4f       	sbci	r31, 0xFF	; 255
   13adc:	80 83       	st	Z, r24
   13ade:	1b cb       	rjmp	.-2506   	; 0x13116 <Read_Config+0x158>
   13ae0:	65 e3       	ldi	r22, 0x35	; 53
   13ae2:	7f e0       	ldi	r23, 0x0F	; 15
   13ae4:	c6 01       	movw	r24, r12
   13ae6:	0e 94 40 34 	call	0x6880	; 0x6880 <token>
   13aea:	00 97       	sbiw	r24, 0x00	; 0
   13aec:	f9 f0       	breq	.+62     	; 0x13b2c <Read_Config+0xb6e>
   13aee:	fe 01       	movw	r30, r28
   13af0:	ef 57       	subi	r30, 0x7F	; 127
   13af2:	ff 4f       	sbci	r31, 0xFF	; 255
   13af4:	7f 01       	movw	r14, r30
   13af6:	0f ef       	ldi	r16, 0xFF	; 255
   13af8:	1f ef       	ldi	r17, 0xFF	; 255
                    ++errors;
   13afa:	20 e0       	ldi	r18, 0x00	; 0
   13afc:	30 e0       	ldi	r19, 0x00	; 0
   13afe:	40 e0       	ldi	r20, 0x00	; 0
                SS80p->VOLUME.MAX_SECTOR = val;
   13b00:	50 e0       	ldi	r21, 0x00	; 0
   13b02:	ba 01       	movw	r22, r20
   13b04:	8c 0d       	add	r24, r12
   13b06:	9d 1d       	adc	r25, r13
   13b08:	7a d8       	rcall	.-3852   	; 0x12bfe <assign_value>
   13b0a:	89 2b       	or	r24, r25
   13b0c:	19 f4       	brne	.+6      	; 0x13b14 <Read_Config+0xb56>
   13b0e:	ff ef       	ldi	r31, 0xFF	; 255
   13b10:	af 1a       	sub	r10, r31
   13b12:	bf 0a       	sbc	r11, r31
   13b14:	cf 57       	subi	r28, 0x7F	; 127
   13b16:	df 4f       	sbci	r29, 0xFF	; 255
            }
            else if( (ind = token(ptr,"MAX_BLOCK_NUMBER")) )
   13b18:	88 81       	ld	r24, Y
   13b1a:	99 81       	ldd	r25, Y+1	; 0x01
   13b1c:	c1 58       	subi	r28, 0x81	; 129
   13b1e:	d0 40       	sbci	r29, 0x00	; 0
   13b20:	f2 01       	movw	r30, r4
   13b22:	ed 5b       	subi	r30, 0xBD	; 189
   13b24:	ff 4f       	sbci	r31, 0xFF	; 255
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFFFFFUL, &val) )
   13b26:	91 83       	std	Z+1, r25	; 0x01
   13b28:	80 83       	st	Z, r24
   13b2a:	f5 ca       	rjmp	.-2582   	; 0x13116 <Read_Config+0x158>
   13b2c:	60 e4       	ldi	r22, 0x40	; 64
   13b2e:	7f e0       	ldi	r23, 0x0F	; 15
   13b30:	c6 01       	movw	r24, r12
   13b32:	0e 94 40 34 	call	0x6880	; 0x6880 <token>
   13b36:	00 97       	sbiw	r24, 0x00	; 0
   13b38:	11 f1       	breq	.+68     	; 0x13b7e <Read_Config+0xbc0>
   13b3a:	9e 01       	movw	r18, r28
   13b3c:	2f 57       	subi	r18, 0x7F	; 127
   13b3e:	3f 4f       	sbci	r19, 0xFF	; 255
   13b40:	79 01       	movw	r14, r18
   13b42:	0f ef       	ldi	r16, 0xFF	; 255
                    ++errors;
   13b44:	1f ef       	ldi	r17, 0xFF	; 255
   13b46:	98 01       	movw	r18, r16
   13b48:	40 e0       	ldi	r20, 0x00	; 0
                SS80p->VOLUME.MAX_BLOCK_NUMBER = val;
   13b4a:	50 e0       	ldi	r21, 0x00	; 0
   13b4c:	ba 01       	movw	r22, r20
   13b4e:	8c 0d       	add	r24, r12
   13b50:	9d 1d       	adc	r25, r13
   13b52:	55 d8       	rcall	.-3926   	; 0x12bfe <assign_value>
   13b54:	89 2b       	or	r24, r25
   13b56:	19 f4       	brne	.+6      	; 0x13b5e <Read_Config+0xba0>
   13b58:	3f ef       	ldi	r19, 0xFF	; 255
   13b5a:	a3 1a       	sub	r10, r19
   13b5c:	b3 0a       	sbc	r11, r19
   13b5e:	cf 57       	subi	r28, 0x7F	; 127
   13b60:	df 4f       	sbci	r29, 0xFF	; 255
   13b62:	88 81       	ld	r24, Y
   13b64:	99 81       	ldd	r25, Y+1	; 0x01
   13b66:	aa 81       	ldd	r26, Y+2	; 0x02
   13b68:	bb 81       	ldd	r27, Y+3	; 0x03
            }
            else if( (ind = token(ptr,"INTERLEAVE")) )
   13b6a:	c1 58       	subi	r28, 0x81	; 129
   13b6c:	d0 40       	sbci	r29, 0x00	; 0
   13b6e:	f2 01       	movw	r30, r4
   13b70:	eb 5b       	subi	r30, 0xBB	; 187
   13b72:	ff 4f       	sbci	r31, 0xFF	; 255
   13b74:	80 83       	st	Z, r24
   13b76:	91 83       	std	Z+1, r25	; 0x01
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFUL, &val) )
   13b78:	a2 83       	std	Z+2, r26	; 0x02
   13b7a:	b3 83       	std	Z+3, r27	; 0x03
   13b7c:	cc ca       	rjmp	.-2664   	; 0x13116 <Read_Config+0x158>
   13b7e:	64 ef       	ldi	r22, 0xF4	; 244
   13b80:	7e e0       	ldi	r23, 0x0E	; 14
   13b82:	c6 01       	movw	r24, r12
   13b84:	0e 94 40 34 	call	0x6880	; 0x6880 <token>
   13b88:	00 97       	sbiw	r24, 0x00	; 0
   13b8a:	e1 f0       	breq	.+56     	; 0x13bc4 <Read_Config+0xc06>
   13b8c:	de 01       	movw	r26, r28
   13b8e:	af 57       	subi	r26, 0x7F	; 127
   13b90:	bf 4f       	sbci	r27, 0xFF	; 255
   13b92:	7d 01       	movw	r14, r26
   13b94:	0f ef       	ldi	r16, 0xFF	; 255
   13b96:	10 e0       	ldi	r17, 0x00	; 0
   13b98:	20 e0       	ldi	r18, 0x00	; 0
                    ++errors;
   13b9a:	30 e0       	ldi	r19, 0x00	; 0
   13b9c:	40 e0       	ldi	r20, 0x00	; 0
   13b9e:	50 e0       	ldi	r21, 0x00	; 0
                SS80p->VOLUME.INTERLEAVE = val;
   13ba0:	ba 01       	movw	r22, r20
   13ba2:	8c 0d       	add	r24, r12
   13ba4:	9d 1d       	adc	r25, r13
   13ba6:	2b d8       	rcall	.-4010   	; 0x12bfe <assign_value>
   13ba8:	89 2b       	or	r24, r25
   13baa:	19 f4       	brne	.+6      	; 0x13bb2 <Read_Config+0xbf4>
   13bac:	bf ef       	ldi	r27, 0xFF	; 255
   13bae:	ab 1a       	sub	r10, r27
   13bb0:	bb 0a       	sbc	r11, r27

            }
            else
            {
                printf("Unexpected SS80 VOLUME token: %s, at line:%d\n", ptr,lines);
   13bb2:	cf 57       	subi	r28, 0x7F	; 127
   13bb4:	df 4f       	sbci	r29, 0xFF	; 255
   13bb6:	88 81       	ld	r24, Y
   13bb8:	c1 58       	subi	r28, 0x81	; 129
   13bba:	d0 40       	sbci	r29, 0x00	; 0
   13bbc:	f2 01       	movw	r30, r4
   13bbe:	e7 5b       	subi	r30, 0xB7	; 183
   13bc0:	ff 4f       	sbci	r31, 0xFF	; 255
   13bc2:	8c cf       	rjmp	.-232    	; 0x13adc <Read_Config+0xb1e>
   13bc4:	80 91 64 18 	lds	r24, 0x1864	; 0x801864 <lines+0x1>
   13bc8:	8f 93       	push	r24
   13bca:	80 91 63 18 	lds	r24, 0x1863	; 0x801863 <lines>
   13bce:	8f 93       	push	r24
                ++errors;
   13bd0:	df 92       	push	r13
   13bd2:	cf 92       	push	r12
   13bd4:	82 ef       	ldi	r24, 0xF2	; 242
   13bd6:	9a e1       	ldi	r25, 0x1A	; 26
            }
            break;

#ifdef AMIGO
        case AMIGO_STATE:
            if(token(ptr,"HEADER"))
   13bd8:	1f 92       	push	r1
   13bda:	9f 93       	push	r25
   13bdc:	8f 93       	push	r24
   13bde:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   13be2:	ef ef       	ldi	r30, 0xFF	; 255
   13be4:	ae 1a       	sub	r10, r30
            {
                push_state(state);
   13be6:	be 0a       	sbc	r11, r30
   13be8:	12 c2       	rjmp	.+1060   	; 0x1400e <Read_Config+0x1050>
   13bea:	6d e2       	ldi	r22, 0x2D	; 45
   13bec:	7e e0       	ldi	r23, 0x0E	; 14
                state = AMIGO_HEADER;
   13bee:	c6 01       	movw	r24, r12
   13bf0:	0e 94 40 34 	call	0x6880	; 0x6880 <token>
   13bf4:	89 2b       	or	r24, r25
            }
            else if(token(ptr,"CONFIG"))
   13bf6:	41 f0       	breq	.+16     	; 0x13c08 <Read_Config+0xc4a>
   13bf8:	8a e0       	ldi	r24, 0x0A	; 10
   13bfa:	90 e0       	ldi	r25, 0x00	; 0
   13bfc:	0e 94 cf 95 	call	0x12b9e	; 0x12b9e <push_state>
   13c00:	2b e0       	ldi	r18, 0x0B	; 11
   13c02:	62 2e       	mov	r6, r18
            {
                push_state(state);
   13c04:	71 2c       	mov	r7, r1
   13c06:	87 ca       	rjmp	.-2802   	; 0x13116 <Read_Config+0x158>
   13c08:	66 e2       	ldi	r22, 0x26	; 38
   13c0a:	7e e0       	ldi	r23, 0x0E	; 14
                state = AMIGO_CONFIG;
   13c0c:	c6 01       	movw	r24, r12
   13c0e:	0e 94 40 34 	call	0x6880	; 0x6880 <token>
   13c12:	89 2b       	or	r24, r25
            }
            else if(token(ptr,"GEOMETRY"))
   13c14:	41 f0       	breq	.+16     	; 0x13c26 <Read_Config+0xc68>
   13c16:	8a e0       	ldi	r24, 0x0A	; 10
   13c18:	90 e0       	ldi	r25, 0x00	; 0
   13c1a:	0e 94 cf 95 	call	0x12b9e	; 0x12b9e <push_state>
   13c1e:	9c e0       	ldi	r25, 0x0C	; 12
   13c20:	69 2e       	mov	r6, r25
            {
                push_state(state);
   13c22:	71 2c       	mov	r7, r1
   13c24:	78 ca       	rjmp	.-2832   	; 0x13116 <Read_Config+0x158>
   13c26:	61 e5       	ldi	r22, 0x51	; 81
   13c28:	7f e0       	ldi	r23, 0x0F	; 15
                state = AMIGO_GEOMETRY;
   13c2a:	c6 01       	movw	r24, r12
   13c2c:	0e 94 40 34 	call	0x6880	; 0x6880 <token>
   13c30:	89 2b       	or	r24, r25
            }
            else
            {
                printf("Unexpected AMIGO START token: %s, at line:%d\n", ptr,lines);
   13c32:	41 f0       	breq	.+16     	; 0x13c44 <Read_Config+0xc86>
   13c34:	8a e0       	ldi	r24, 0x0A	; 10
   13c36:	90 e0       	ldi	r25, 0x00	; 0
   13c38:	0e 94 cf 95 	call	0x12b9e	; 0x12b9e <push_state>
   13c3c:	8d e0       	ldi	r24, 0x0D	; 13
   13c3e:	68 2e       	mov	r6, r24
   13c40:	71 2c       	mov	r7, r1
   13c42:	69 ca       	rjmp	.-2862   	; 0x13116 <Read_Config+0x158>
   13c44:	80 91 64 18 	lds	r24, 0x1864	; 0x801864 <lines+0x1>
   13c48:	8f 93       	push	r24
   13c4a:	80 91 63 18 	lds	r24, 0x1863	; 0x801863 <lines>
                ++errors;
            }
            break;

        case AMIGO_HEADER:
            if( (ind = token(ptr,"DRIVE")) )
   13c4e:	8f 93       	push	r24
   13c50:	df 92       	push	r13
   13c52:	cf 92       	push	r12
   13c54:	84 ec       	ldi	r24, 0xC4	; 196
   13c56:	9a e1       	ldi	r25, 0x1A	; 26
   13c58:	1f 92       	push	r1
   13c5a:	9f 93       	push	r25
            {
                ptr += ind;
                printf("Skipping %s, at line:%d\n", ptr,lines);
   13c5c:	8f 93       	push	r24
   13c5e:	e8 c0       	rjmp	.+464    	; 0x13e30 <Read_Config+0xe72>
   13c60:	6a e5       	ldi	r22, 0x5A	; 90
   13c62:	7f e0       	ldi	r23, 0x0F	; 15
   13c64:	c6 01       	movw	r24, r12
   13c66:	0e 94 40 34 	call	0x6880	; 0x6880 <token>
   13c6a:	00 97       	sbiw	r24, 0x00	; 0
   13c6c:	d1 f0       	breq	.+52     	; 0x13ca2 <Read_Config+0xce4>
   13c6e:	20 91 64 18 	lds	r18, 0x1864	; 0x801864 <lines+0x1>
   13c72:	2f 93       	push	r18
   13c74:	20 91 63 18 	lds	r18, 0x1863	; 0x801863 <lines>
   13c78:	2f 93       	push	r18
   13c7a:	c8 0e       	add	r12, r24
   13c7c:	d9 1e       	adc	r13, r25
   13c7e:	df 92       	push	r13
   13c80:	cf 92       	push	r12
   13c82:	1f 92       	push	r1
   13c84:	c7 56       	subi	r28, 0x67	; 103
   13c86:	df 4f       	sbci	r29, 0xFF	; 255
   13c88:	98 81       	ld	r25, Y
   13c8a:	c9 59       	subi	r28, 0x99	; 153
   13c8c:	d0 40       	sbci	r29, 0x00	; 0
   13c8e:	9f 93       	push	r25
                //skip this
            }
            else if( (ind = token(ptr,"ADDRESS")) )
   13c90:	c8 56       	subi	r28, 0x68	; 104
   13c92:	df 4f       	sbci	r29, 0xFF	; 255
   13c94:	a8 81       	ld	r26, Y
   13c96:	c8 59       	subi	r28, 0x98	; 152
   13c98:	d0 40       	sbci	r29, 0x00	; 0
   13c9a:	af 93       	push	r26
   13c9c:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
            {
                ptr += ind;
                tmp = 0xff;
                if (!assign_value(ptr, 0, 14UL, &val) )
   13ca0:	b6 c1       	rjmp	.+876    	; 0x1400e <Read_Config+0x1050>
   13ca2:	6e e1       	ldi	r22, 0x1E	; 30
   13ca4:	7e e0       	ldi	r23, 0x0E	; 14
   13ca6:	c6 01       	movw	r24, r12
   13ca8:	0e 94 40 34 	call	0x6880	; 0x6880 <token>
   13cac:	00 97       	sbiw	r24, 0x00	; 0
   13cae:	39 f1       	breq	.+78     	; 0x13cfe <Read_Config+0xd40>
   13cb0:	9e 01       	movw	r18, r28
   13cb2:	2f 57       	subi	r18, 0x7F	; 127
   13cb4:	3f 4f       	sbci	r19, 0xFF	; 255
   13cb6:	79 01       	movw	r14, r18
   13cb8:	0e e0       	ldi	r16, 0x0E	; 14
   13cba:	10 e0       	ldi	r17, 0x00	; 0
   13cbc:	20 e0       	ldi	r18, 0x00	; 0
   13cbe:	30 e0       	ldi	r19, 0x00	; 0
                    ++errors;
   13cc0:	40 e0       	ldi	r20, 0x00	; 0
   13cc2:	50 e0       	ldi	r21, 0x00	; 0
   13cc4:	ba 01       	movw	r22, r20
                //skip this
            }
            else if( (ind = token(ptr,"ADDRESS")) )
            {
                ptr += ind;
                tmp = 0xff;
   13cc6:	8c 0d       	add	r24, r12
   13cc8:	9d 1d       	adc	r25, r13
                if (!assign_value(ptr, 0, 14UL, &val) )
                    ++errors;
                else
                    tmp = val;
   13cca:	0e 94 ff 95 	call	0x12bfe	; 0x12bfe <assign_value>
   13cce:	89 2b       	or	r24, r25
   13cd0:	29 f4       	brne	.+10     	; 0x13cdc <Read_Config+0xd1e>
   13cd2:	3f ef       	ldi	r19, 0xFF	; 255
                Devices[index].ADDRESS = tmp;
   13cd4:	a3 1a       	sub	r10, r19
   13cd6:	b3 0a       	sbc	r11, r19
   13cd8:	8f ef       	ldi	r24, 0xFF	; 255
   13cda:	05 c0       	rjmp	.+10     	; 0x13ce6 <Read_Config+0xd28>
   13cdc:	cf 57       	subi	r28, 0x7F	; 127
   13cde:	df 4f       	sbci	r29, 0xFF	; 255
   13ce0:	88 81       	ld	r24, Y
   13ce2:	c1 58       	subi	r28, 0x81	; 129
   13ce4:	d0 40       	sbci	r29, 0x00	; 0
                AMIGOp->HEADER.ADDRESS = tmp;
   13ce6:	9b e2       	ldi	r25, 0x2B	; 43
   13ce8:	98 9d       	mul	r25, r8
   13cea:	f0 01       	movw	r30, r0
            }
            else if( (ind = token(ptr,"PPR")) )
   13cec:	99 9d       	mul	r25, r9
   13cee:	f0 0d       	add	r31, r0
   13cf0:	11 24       	eor	r1, r1
   13cf2:	e0 51       	subi	r30, 0x10	; 16
   13cf4:	f2 4e       	sbci	r31, 0xE2	; 226
   13cf6:	81 83       	std	Z+1, r24	; 0x01
   13cf8:	d1 01       	movw	r26, r2
            {
                ptr += ind;
                tmp = 0xff;
                if (!assign_value(ptr, 0, 7UL, &val) )
   13cfa:	8c 93       	st	X, r24
   13cfc:	0c ca       	rjmp	.-3048   	; 0x13116 <Read_Config+0x158>
   13cfe:	6b e4       	ldi	r22, 0x4B	; 75
   13d00:	7e e0       	ldi	r23, 0x0E	; 14
   13d02:	c6 01       	movw	r24, r12
   13d04:	0e 94 40 34 	call	0x6880	; 0x6880 <token>
   13d08:	00 97       	sbiw	r24, 0x00	; 0
   13d0a:	31 f1       	breq	.+76     	; 0x13d58 <Read_Config+0xd9a>
   13d0c:	fe 01       	movw	r30, r28
   13d0e:	ef 57       	subi	r30, 0x7F	; 127
   13d10:	ff 4f       	sbci	r31, 0xFF	; 255
   13d12:	7f 01       	movw	r14, r30
   13d14:	07 e0       	ldi	r16, 0x07	; 7
   13d16:	10 e0       	ldi	r17, 0x00	; 0
   13d18:	20 e0       	ldi	r18, 0x00	; 0
   13d1a:	30 e0       	ldi	r19, 0x00	; 0
                    ++errors;
   13d1c:	40 e0       	ldi	r20, 0x00	; 0
   13d1e:	50 e0       	ldi	r21, 0x00	; 0
   13d20:	ba 01       	movw	r22, r20
                AMIGOp->HEADER.ADDRESS = tmp;
            }
            else if( (ind = token(ptr,"PPR")) )
            {
                ptr += ind;
                tmp = 0xff;
   13d22:	8c 0d       	add	r24, r12
   13d24:	9d 1d       	adc	r25, r13
                if (!assign_value(ptr, 0, 7UL, &val) )
                    ++errors;
                else
                    tmp = val;
   13d26:	0e 94 ff 95 	call	0x12bfe	; 0x12bfe <assign_value>
   13d2a:	89 2b       	or	r24, r25
   13d2c:	29 f4       	brne	.+10     	; 0x13d38 <Read_Config+0xd7a>
   13d2e:	ff ef       	ldi	r31, 0xFF	; 255
                Devices[index].PPR = tmp;
   13d30:	af 1a       	sub	r10, r31
   13d32:	bf 0a       	sbc	r11, r31
   13d34:	8f ef       	ldi	r24, 0xFF	; 255
   13d36:	05 c0       	rjmp	.+10     	; 0x13d42 <Read_Config+0xd84>
   13d38:	cf 57       	subi	r28, 0x7F	; 127
   13d3a:	df 4f       	sbci	r29, 0xFF	; 255
   13d3c:	88 81       	ld	r24, Y
   13d3e:	c1 58       	subi	r28, 0x81	; 129
   13d40:	d0 40       	sbci	r29, 0x00	; 0
                AMIGOp->HEADER.PPR = tmp;
   13d42:	9b e2       	ldi	r25, 0x2B	; 43
   13d44:	98 9d       	mul	r25, r8
            }
            else if( (ind = token(ptr,"FILE")) )
   13d46:	f0 01       	movw	r30, r0
   13d48:	99 9d       	mul	r25, r9
   13d4a:	f0 0d       	add	r31, r0
   13d4c:	11 24       	eor	r1, r1
   13d4e:	e0 51       	subi	r30, 0x10	; 16
   13d50:	f2 4e       	sbci	r31, 0xE2	; 226
   13d52:	82 83       	std	Z+2, r24	; 0x02
            {
                ptr += ind;
                ptr = skipspaces(ptr);
   13d54:	d1 01       	movw	r26, r2
   13d56:	ea cb       	rjmp	.-2092   	; 0x1352c <Read_Config+0x56e>
   13d58:	6f e4       	ldi	r22, 0x4F	; 79
   13d5a:	7e e0       	ldi	r23, 0x0E	; 14
                if(*ptr == '=')
   13d5c:	c6 01       	movw	r24, r12
   13d5e:	0e 94 40 34 	call	0x6880	; 0x6880 <token>
   13d62:	00 97       	sbiw	r24, 0x00	; 0
                {
                    ++ptr;
                    ptr = skipspaces(ptr);
   13d64:	b1 f0       	breq	.+44     	; 0x13d92 <Read_Config+0xdd4>
   13d66:	8c 0d       	add	r24, r12
   13d68:	9d 1d       	adc	r25, r13
                }
                strncpy(AMIGOp->HEADER.NAME, ptr, sizeof(AMIGOp->HEADER.NAME)-1);
   13d6a:	0e 94 bd 32 	call	0x657a	; 0x657a <skipspaces>
   13d6e:	fc 01       	movw	r30, r24
   13d70:	20 81       	ld	r18, Z
   13d72:	2d 33       	cpi	r18, 0x3D	; 61
   13d74:	19 f4       	brne	.+6      	; 0x13d7c <Read_Config+0xdbe>
   13d76:	01 96       	adiw	r24, 0x01	; 1
                AMIGOp->HEADER.NAME[sizeof(AMIGOp->HEADER.NAME)-1] = 0;
   13d78:	0e 94 bd 32 	call	0x657a	; 0x657a <skipspaces>
   13d7c:	40 e2       	ldi	r20, 0x20	; 32
   13d7e:	50 e0       	ldi	r21, 0x00	; 0
            }
            else
            {
                printf("Unexpected HEADER CONFIG token: %s, at line:%d\n", ptr,lines);
   13d80:	bc 01       	movw	r22, r24
   13d82:	c1 01       	movw	r24, r2
   13d84:	02 96       	adiw	r24, 0x02	; 2
   13d86:	0e 94 5e 32 	call	0x64bc	; 0x64bc <strncpy>
   13d8a:	d1 01       	movw	r26, r2
   13d8c:	92 96       	adiw	r26, 0x22	; 34
   13d8e:	1c 92       	st	X, r1
   13d90:	c2 c9       	rjmp	.-3196   	; 0x13116 <Read_Config+0x158>
   13d92:	80 91 64 18 	lds	r24, 0x1864	; 0x801864 <lines+0x1>
   13d96:	8f 93       	push	r24
   13d98:	80 91 63 18 	lds	r24, 0x1863	; 0x801863 <lines>
   13d9c:	8f 93       	push	r24
   13d9e:	df 92       	push	r13
   13da0:	cf 92       	push	r12
   13da2:	1f 92       	push	r1
   13da4:	ca 56       	subi	r28, 0x6A	; 106
   13da6:	df 4f       	sbci	r29, 0xFF	; 255
   13da8:	b8 81       	ld	r27, Y
                ++errors;
            }
            break;

        case AMIGO_CONFIG:
            if( (ind = token(ptr,"ID")) )
   13daa:	c6 59       	subi	r28, 0x96	; 150
   13dac:	d0 40       	sbci	r29, 0x00	; 0
   13dae:	bf 93       	push	r27
   13db0:	cb 56       	subi	r28, 0x6B	; 107
   13db2:	df 4f       	sbci	r29, 0xFF	; 255
   13db4:	e8 81       	ld	r30, Y
   13db6:	c5 59       	subi	r28, 0x95	; 149
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val) )
   13db8:	d0 40       	sbci	r29, 0x00	; 0
   13dba:	08 c1       	rjmp	.+528    	; 0x13fcc <Read_Config+0x100e>
   13dbc:	64 e5       	ldi	r22, 0x54	; 84
   13dbe:	7e e0       	ldi	r23, 0x0E	; 14
   13dc0:	c6 01       	movw	r24, r12
   13dc2:	0e 94 40 34 	call	0x6880	; 0x6880 <token>
   13dc6:	00 97       	sbiw	r24, 0x00	; 0
   13dc8:	f1 f0       	breq	.+60     	; 0x13e06 <Read_Config+0xe48>
   13dca:	de 01       	movw	r26, r28
   13dcc:	af 57       	subi	r26, 0x7F	; 127
   13dce:	bf 4f       	sbci	r27, 0xFF	; 255
   13dd0:	7d 01       	movw	r14, r26
   13dd2:	0f ef       	ldi	r16, 0xFF	; 255
   13dd4:	1f ef       	ldi	r17, 0xFF	; 255
   13dd6:	20 e0       	ldi	r18, 0x00	; 0
   13dd8:	30 e0       	ldi	r19, 0x00	; 0
                    ++errors;
   13dda:	40 e0       	ldi	r20, 0x00	; 0
   13ddc:	50 e0       	ldi	r21, 0x00	; 0
   13dde:	ba 01       	movw	r22, r20
                AMIGOp->CONFIG.ID = val;
   13de0:	8c 0d       	add	r24, r12
   13de2:	9d 1d       	adc	r25, r13
   13de4:	0e 94 ff 95 	call	0x12bfe	; 0x12bfe <assign_value>
   13de8:	89 2b       	or	r24, r25
   13dea:	19 f4       	brne	.+6      	; 0x13df2 <Read_Config+0xe34>
   13dec:	bf ef       	ldi	r27, 0xFF	; 255
   13dee:	ab 1a       	sub	r10, r27
   13df0:	bb 0a       	sbc	r11, r27
   13df2:	cf 57       	subi	r28, 0x7F	; 127
            }
            else
            {
                printf("Unexpected AMIGO CONFIG token: %s, at line:%d\n", ptr,lines);
   13df4:	df 4f       	sbci	r29, 0xFF	; 255
   13df6:	88 81       	ld	r24, Y
   13df8:	99 81       	ldd	r25, Y+1	; 0x01
   13dfa:	c1 58       	subi	r28, 0x81	; 129
   13dfc:	d0 40       	sbci	r29, 0x00	; 0
   13dfe:	f1 01       	movw	r30, r2
   13e00:	94 a3       	std	Z+36, r25	; 0x24
   13e02:	83 a3       	std	Z+35, r24	; 0x23
   13e04:	88 c9       	rjmp	.-3312   	; 0x13116 <Read_Config+0x158>
   13e06:	80 91 64 18 	lds	r24, 0x1864	; 0x801864 <lines+0x1>
   13e0a:	8f 93       	push	r24
   13e0c:	80 91 63 18 	lds	r24, 0x1863	; 0x801863 <lines>
   13e10:	8f 93       	push	r24
   13e12:	df 92       	push	r13
   13e14:	cf 92       	push	r12
   13e16:	1f 92       	push	r1
   13e18:	cd 56       	subi	r28, 0x6D	; 109
   13e1a:	df 4f       	sbci	r29, 0xFF	; 255
   13e1c:	f8 81       	ld	r31, Y
   13e1e:	c3 59       	subi	r28, 0x93	; 147
   13e20:	d0 40       	sbci	r29, 0x00	; 0
                ++errors;
   13e22:	ff 93       	push	r31
   13e24:	ce 56       	subi	r28, 0x6E	; 110
   13e26:	df 4f       	sbci	r29, 0xFF	; 255
   13e28:	28 81       	ld	r18, Y
            }
            break;

        case AMIGO_GEOMETRY:
            if( (ind = token(ptr,"BYTES_PER_SECTOR")) )
   13e2a:	c2 59       	subi	r28, 0x92	; 146
   13e2c:	d0 40       	sbci	r29, 0x00	; 0
   13e2e:	2f 93       	push	r18
   13e30:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   13e34:	3f ef       	ldi	r19, 0xFF	; 255
   13e36:	a3 1a       	sub	r10, r19
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0x1000UL, &val) )
   13e38:	b3 0a       	sbc	r11, r19
   13e3a:	e9 c0       	rjmp	.+466    	; 0x1400e <Read_Config+0x1050>
   13e3c:	60 e6       	ldi	r22, 0x60	; 96
   13e3e:	7f e0       	ldi	r23, 0x0F	; 15
   13e40:	c6 01       	movw	r24, r12
   13e42:	0e 94 40 34 	call	0x6880	; 0x6880 <token>
   13e46:	00 97       	sbiw	r24, 0x00	; 0
   13e48:	c1 f1       	breq	.+112    	; 0x13eba <Read_Config+0xefc>
   13e4a:	de 01       	movw	r26, r28
   13e4c:	af 57       	subi	r26, 0x7F	; 127
   13e4e:	bf 4f       	sbci	r27, 0xFF	; 255
   13e50:	7d 01       	movw	r14, r26
   13e52:	00 e0       	ldi	r16, 0x00	; 0
   13e54:	10 e1       	ldi	r17, 0x10	; 16
   13e56:	20 e0       	ldi	r18, 0x00	; 0
   13e58:	30 e0       	ldi	r19, 0x00	; 0
                    ++errors;
   13e5a:	40 e0       	ldi	r20, 0x00	; 0
   13e5c:	50 e0       	ldi	r21, 0x00	; 0
   13e5e:	ba 01       	movw	r22, r20
printf("BYTES PER SECTOR: %s\n", token);
   13e60:	8c 0d       	add	r24, r12
   13e62:	9d 1d       	adc	r25, r13
   13e64:	0e 94 ff 95 	call	0x12bfe	; 0x12bfe <assign_value>
   13e68:	89 2b       	or	r24, r25
   13e6a:	19 f4       	brne	.+6      	; 0x13e72 <Read_Config+0xeb4>
   13e6c:	bf ef       	ldi	r27, 0xFF	; 255
   13e6e:	ab 1a       	sub	r10, r27
   13e70:	bb 0a       	sbc	r11, r27
   13e72:	80 e4       	ldi	r24, 0x40	; 64
   13e74:	94 e3       	ldi	r25, 0x34	; 52
   13e76:	9f 93       	push	r25
   13e78:	8f 93       	push	r24
   13e7a:	1f 92       	push	r1
   13e7c:	c0 57       	subi	r28, 0x70	; 112
   13e7e:	df 4f       	sbci	r29, 0xFF	; 255
   13e80:	e8 81       	ld	r30, Y
   13e82:	c0 59       	subi	r28, 0x90	; 144
   13e84:	d0 40       	sbci	r29, 0x00	; 0
                AMIGOp->GEOMETRY.BYTES_PER_SECTOR = val;
   13e86:	ef 93       	push	r30
   13e88:	c1 57       	subi	r28, 0x71	; 113
   13e8a:	df 4f       	sbci	r29, 0xFF	; 255
   13e8c:	f8 81       	ld	r31, Y
   13e8e:	cf 58       	subi	r28, 0x8F	; 143
   13e90:	d0 40       	sbci	r29, 0x00	; 0
   13e92:	ff 93       	push	r31
   13e94:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   13e98:	cf 57       	subi	r28, 0x7F	; 127
   13e9a:	df 4f       	sbci	r29, 0xFF	; 255
   13e9c:	88 81       	ld	r24, Y
   13e9e:	99 81       	ldd	r25, Y+1	; 0x01
   13ea0:	c1 58       	subi	r28, 0x81	; 129
   13ea2:	d0 40       	sbci	r29, 0x00	; 0
   13ea4:	d1 01       	movw	r26, r2
   13ea6:	96 96       	adiw	r26, 0x26	; 38
            }
            else if( (ind = token(ptr,"SECTORS_PER_TRACK")) )
   13ea8:	9c 93       	st	X, r25
   13eaa:	8e 93       	st	-X, r24
   13eac:	95 97       	sbiw	r26, 0x25	; 37
   13eae:	0f 90       	pop	r0
   13eb0:	0f 90       	pop	r0
   13eb2:	0f 90       	pop	r0
   13eb4:	0f 90       	pop	r0
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFUL, &val) )
   13eb6:	0f 90       	pop	r0
   13eb8:	2e c9       	rjmp	.-3492   	; 0x13116 <Read_Config+0x158>
   13eba:	61 e7       	ldi	r22, 0x71	; 113
   13ebc:	7f e0       	ldi	r23, 0x0F	; 15
   13ebe:	c6 01       	movw	r24, r12
   13ec0:	0e 94 40 34 	call	0x6880	; 0x6880 <token>
   13ec4:	00 97       	sbiw	r24, 0x00	; 0
   13ec6:	01 f1       	breq	.+64     	; 0x13f08 <Read_Config+0xf4a>
   13ec8:	fe 01       	movw	r30, r28
   13eca:	ef 57       	subi	r30, 0x7F	; 127
   13ecc:	ff 4f       	sbci	r31, 0xFF	; 255
   13ece:	7f 01       	movw	r14, r30
   13ed0:	0f ef       	ldi	r16, 0xFF	; 255
   13ed2:	10 e0       	ldi	r17, 0x00	; 0
   13ed4:	20 e0       	ldi	r18, 0x00	; 0
   13ed6:	30 e0       	ldi	r19, 0x00	; 0
                    ++errors;
   13ed8:	40 e0       	ldi	r20, 0x00	; 0
   13eda:	50 e0       	ldi	r21, 0x00	; 0
   13edc:	ba 01       	movw	r22, r20
                AMIGOp->GEOMETRY.SECTORS_PER_TRACK = val;
   13ede:	8c 0d       	add	r24, r12
   13ee0:	9d 1d       	adc	r25, r13
   13ee2:	0e 94 ff 95 	call	0x12bfe	; 0x12bfe <assign_value>
   13ee6:	89 2b       	or	r24, r25
   13ee8:	19 f4       	brne	.+6      	; 0x13ef0 <Read_Config+0xf32>
   13eea:	ff ef       	ldi	r31, 0xFF	; 255
   13eec:	af 1a       	sub	r10, r31
   13eee:	bf 0a       	sbc	r11, r31
   13ef0:	cf 57       	subi	r28, 0x7F	; 127
   13ef2:	df 4f       	sbci	r29, 0xFF	; 255
   13ef4:	88 81       	ld	r24, Y
            }
            else if( (ind = token(ptr,"HEADS")) )
   13ef6:	99 81       	ldd	r25, Y+1	; 0x01
   13ef8:	c1 58       	subi	r28, 0x81	; 129
   13efa:	d0 40       	sbci	r29, 0x00	; 0
   13efc:	d1 01       	movw	r26, r2
   13efe:	98 96       	adiw	r26, 0x28	; 40
   13f00:	9c 93       	st	X, r25
   13f02:	8e 93       	st	-X, r24
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFUL, &val) )
   13f04:	97 97       	sbiw	r26, 0x27	; 39
   13f06:	07 c9       	rjmp	.-3570   	; 0x13116 <Read_Config+0x158>
   13f08:	63 e8       	ldi	r22, 0x83	; 131
   13f0a:	7f e0       	ldi	r23, 0x0F	; 15
   13f0c:	c6 01       	movw	r24, r12
   13f0e:	0e 94 40 34 	call	0x6880	; 0x6880 <token>
   13f12:	00 97       	sbiw	r24, 0x00	; 0
   13f14:	01 f1       	breq	.+64     	; 0x13f56 <Read_Config+0xf98>
   13f16:	fe 01       	movw	r30, r28
   13f18:	ef 57       	subi	r30, 0x7F	; 127
   13f1a:	ff 4f       	sbci	r31, 0xFF	; 255
   13f1c:	7f 01       	movw	r14, r30
   13f1e:	0f ef       	ldi	r16, 0xFF	; 255
   13f20:	10 e0       	ldi	r17, 0x00	; 0
   13f22:	20 e0       	ldi	r18, 0x00	; 0
   13f24:	30 e0       	ldi	r19, 0x00	; 0
                    ++errors;
   13f26:	40 e0       	ldi	r20, 0x00	; 0
   13f28:	50 e0       	ldi	r21, 0x00	; 0
   13f2a:	ba 01       	movw	r22, r20
                AMIGOp->GEOMETRY.HEADS = val;
   13f2c:	8c 0d       	add	r24, r12
   13f2e:	9d 1d       	adc	r25, r13
   13f30:	0e 94 ff 95 	call	0x12bfe	; 0x12bfe <assign_value>
   13f34:	89 2b       	or	r24, r25
   13f36:	19 f4       	brne	.+6      	; 0x13f3e <Read_Config+0xf80>
   13f38:	ff ef       	ldi	r31, 0xFF	; 255
   13f3a:	af 1a       	sub	r10, r31
   13f3c:	bf 0a       	sbc	r11, r31
   13f3e:	cf 57       	subi	r28, 0x7F	; 127
   13f40:	df 4f       	sbci	r29, 0xFF	; 255
   13f42:	88 81       	ld	r24, Y
            }
            else if( (ind = token(ptr,"CYLINDERS")) )
   13f44:	99 81       	ldd	r25, Y+1	; 0x01
   13f46:	c1 58       	subi	r28, 0x81	; 129
   13f48:	d0 40       	sbci	r29, 0x00	; 0
   13f4a:	d1 01       	movw	r26, r2
   13f4c:	9a 96       	adiw	r26, 0x2a	; 42
   13f4e:	9c 93       	st	X, r25
   13f50:	8e 93       	st	-X, r24
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFUL, &val) )
   13f52:	99 97       	sbiw	r26, 0x29	; 41
   13f54:	e0 c8       	rjmp	.-3648   	; 0x13116 <Read_Config+0x158>
   13f56:	69 e8       	ldi	r22, 0x89	; 137
   13f58:	7f e0       	ldi	r23, 0x0F	; 15
   13f5a:	c6 01       	movw	r24, r12
   13f5c:	0e 94 40 34 	call	0x6880	; 0x6880 <token>
   13f60:	00 97       	sbiw	r24, 0x00	; 0
   13f62:	01 f1       	breq	.+64     	; 0x13fa4 <Read_Config+0xfe6>
   13f64:	fe 01       	movw	r30, r28
   13f66:	ef 57       	subi	r30, 0x7F	; 127
   13f68:	ff 4f       	sbci	r31, 0xFF	; 255
   13f6a:	7f 01       	movw	r14, r30
   13f6c:	0f ef       	ldi	r16, 0xFF	; 255
   13f6e:	10 e0       	ldi	r17, 0x00	; 0
   13f70:	20 e0       	ldi	r18, 0x00	; 0
   13f72:	30 e0       	ldi	r19, 0x00	; 0
                    ++errors;
   13f74:	40 e0       	ldi	r20, 0x00	; 0
   13f76:	50 e0       	ldi	r21, 0x00	; 0
   13f78:	ba 01       	movw	r22, r20
                AMIGOp->GEOMETRY.CYLINDERS = val;
   13f7a:	8c 0d       	add	r24, r12
   13f7c:	9d 1d       	adc	r25, r13
   13f7e:	0e 94 ff 95 	call	0x12bfe	; 0x12bfe <assign_value>
   13f82:	89 2b       	or	r24, r25
   13f84:	19 f4       	brne	.+6      	; 0x13f8c <Read_Config+0xfce>
   13f86:	ff ef       	ldi	r31, 0xFF	; 255
   13f88:	af 1a       	sub	r10, r31
   13f8a:	bf 0a       	sbc	r11, r31
   13f8c:	cf 57       	subi	r28, 0x7F	; 127
   13f8e:	df 4f       	sbci	r29, 0xFF	; 255
   13f90:	88 81       	ld	r24, Y
            }
            else
            {
                printf("Unexpected AMIGO GEMETRY token: %s, at line:%d\n", ptr,lines);
   13f92:	99 81       	ldd	r25, Y+1	; 0x01
   13f94:	c1 58       	subi	r28, 0x81	; 129
   13f96:	d0 40       	sbci	r29, 0x00	; 0
   13f98:	d1 01       	movw	r26, r2
   13f9a:	9c 96       	adiw	r26, 0x2c	; 44
   13f9c:	9c 93       	st	X, r25
   13f9e:	8e 93       	st	-X, r24
   13fa0:	9b 97       	sbiw	r26, 0x2b	; 43
   13fa2:	b9 c8       	rjmp	.-3726   	; 0x13116 <Read_Config+0x158>
   13fa4:	80 91 64 18 	lds	r24, 0x1864	; 0x801864 <lines+0x1>
   13fa8:	8f 93       	push	r24
   13faa:	80 91 63 18 	lds	r24, 0x1863	; 0x801863 <lines>
   13fae:	8f 93       	push	r24
   13fb0:	df 92       	push	r13
   13fb2:	cf 92       	push	r12
   13fb4:	1f 92       	push	r1
   13fb6:	c3 57       	subi	r28, 0x73	; 115
   13fb8:	df 4f       	sbci	r29, 0xFF	; 255
   13fba:	b8 81       	ld	r27, Y
   13fbc:	cd 58       	subi	r28, 0x8D	; 141
   13fbe:	d0 40       	sbci	r29, 0x00	; 0
                ++errors;
   13fc0:	bf 93       	push	r27
   13fc2:	c4 57       	subi	r28, 0x74	; 116
   13fc4:	df 4f       	sbci	r29, 0xFF	; 255
   13fc6:	e8 81       	ld	r30, Y
            }
            break;
#endif // #ifdef AMIGO

        default:
            printf("Unexpected STATE: %s, at line:%d\n", ptr,lines);
   13fc8:	cc 58       	subi	r28, 0x8C	; 140
   13fca:	d0 40       	sbci	r29, 0x00	; 0
   13fcc:	ef 93       	push	r30
   13fce:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   13fd2:	ff ef       	ldi	r31, 0xFF	; 255
   13fd4:	af 1a       	sub	r10, r31
   13fd6:	bf 0a       	sbc	r11, r31
   13fd8:	1a c0       	rjmp	.+52     	; 0x1400e <Read_Config+0x1050>
   13fda:	80 91 64 18 	lds	r24, 0x1864	; 0x801864 <lines+0x1>
   13fde:	8f 93       	push	r24
   13fe0:	80 91 63 18 	lds	r24, 0x1863	; 0x801863 <lines>
   13fe4:	8f 93       	push	r24
   13fe6:	df 92       	push	r13
   13fe8:	cf 92       	push	r12
   13fea:	1f 92       	push	r1
   13fec:	c6 57       	subi	r28, 0x76	; 118
   13fee:	df 4f       	sbci	r29, 0xFF	; 255
   13ff0:	38 81       	ld	r19, Y
   13ff2:	ca 58       	subi	r28, 0x8A	; 138
   13ff4:	d0 40       	sbci	r29, 0x00	; 0
            ++errors;
   13ff6:	3f 93       	push	r19
   13ff8:	c7 57       	subi	r28, 0x77	; 119
   13ffa:	df 4f       	sbci	r29, 0xFF	; 255
            break;
   13ffc:	48 81       	ld	r20, Y
   13ffe:	c9 58       	subi	r28, 0x89	; 137
   14000:	d0 40       	sbci	r29, 0x00	; 0
   14002:	4f 93       	push	r20
   14004:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>

        } // switch
    } //while
    if(state != START_STATE)
   14008:	8f ef       	ldi	r24, 0xFF	; 255
   1400a:	a8 1a       	sub	r10, r24
   1400c:	b8 0a       	sbc	r11, r24
    {
        printf("Missing END statement at line:%d\n", lines);
   1400e:	0f b6       	in	r0, 0x3f	; 63
   14010:	f8 94       	cli
   14012:	de bf       	out	0x3e, r29	; 62
   14014:	0f be       	out	0x3f, r0	; 63
   14016:	cd bf       	out	0x3d, r28	; 61
   14018:	7e c8       	rjmp	.-3844   	; 0x13116 <Read_Config+0x158>
   1401a:	61 14       	cp	r6, r1
   1401c:	71 04       	cpc	r7, r1
   1401e:	a9 f0       	breq	.+42     	; 0x1404a <Read_Config+0x108c>
   14020:	80 91 64 18 	lds	r24, 0x1864	; 0x801864 <lines+0x1>
   14024:	8f 93       	push	r24
   14026:	80 91 63 18 	lds	r24, 0x1863	; 0x801863 <lines>
        ++errors;
   1402a:	8f 93       	push	r24
   1402c:	82 ec       	ldi	r24, 0xC2	; 194
   1402e:	99 e1       	ldi	r25, 0x19	; 25
   14030:	1f 92       	push	r1
   14032:	9f 93       	push	r25
   14034:	8f 93       	push	r24
   14036:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    }
    printf("Read_Config: read(%d) lines\n", lines);
   1403a:	bf ef       	ldi	r27, 0xFF	; 255
   1403c:	ab 1a       	sub	r10, r27
   1403e:	bb 0a       	sbc	r11, r27
   14040:	0f 90       	pop	r0
   14042:	0f 90       	pop	r0
   14044:	0f 90       	pop	r0
   14046:	0f 90       	pop	r0
   14048:	0f 90       	pop	r0
   1404a:	80 91 64 18 	lds	r24, 0x1864	; 0x801864 <lines+0x1>
   1404e:	8f 93       	push	r24
   14050:	80 91 63 18 	lds	r24, 0x1863	; 0x801863 <lines>
    if(errors)
   14054:	8f 93       	push	r24
   14056:	85 ea       	ldi	r24, 0xA5	; 165
   14058:	99 e1       	ldi	r25, 0x19	; 25
   1405a:	1f 92       	push	r1
   1405c:	9f 93       	push	r25
   1405e:	8f 93       	push	r24
   14060:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
        printf("Read_Config: ****** errors(%d) ******\n", errors);
   14064:	0f 90       	pop	r0
   14066:	0f 90       	pop	r0
   14068:	0f 90       	pop	r0
   1406a:	0f 90       	pop	r0
   1406c:	0f 90       	pop	r0
   1406e:	a1 14       	cp	r10, r1
   14070:	b1 04       	cpc	r11, r1
   14072:	71 f0       	breq	.+28     	; 0x14090 <Read_Config+0x10d2>
   14074:	bf 92       	push	r11
   14076:	af 92       	push	r10
   14078:	8e e7       	ldi	r24, 0x7E	; 126
   1407a:	99 e1       	ldi	r25, 0x19	; 25
   1407c:	1f 92       	push	r1

    ret = fclose(cfg);
   1407e:	9f 93       	push	r25
   14080:	8f 93       	push	r24
   14082:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   14086:	0f 90       	pop	r0
   14088:	0f 90       	pop	r0
   1408a:	0f 90       	pop	r0
   1408c:	0f 90       	pop	r0
    if(ret == EOF)
   1408e:	0f 90       	pop	r0
   14090:	c9 57       	subi	r28, 0x79	; 121
    {
        perror("Read_Config - close error");
   14092:	df 4f       	sbci	r29, 0xFF	; 255
   14094:	88 81       	ld	r24, Y
   14096:	99 81       	ldd	r25, Y+1	; 0x01
   14098:	c7 58       	subi	r28, 0x87	; 135
        ++errors;
   1409a:	d0 40       	sbci	r29, 0x00	; 0
   1409c:	0e 94 ea 7d 	call	0xfbd4	; 0xfbd4 <fclose>
    }

	// Post process device values
	Post_Config();
   140a0:	01 96       	adiw	r24, 0x01	; 1
   140a2:	39 f4       	brne	.+14     	; 0x140b2 <Read_Config+0x10f4>

    return(errors);
   140a4:	83 e9       	ldi	r24, 0x93	; 147
}
   140a6:	9f e0       	ldi	r25, 0x0F	; 15
   140a8:	0e 94 8a 79 	call	0xf314	; 0xf314 <perror>
   140ac:	ff ef       	ldi	r31, 0xFF	; 255
   140ae:	af 1a       	sub	r10, r31
   140b0:	bf 0a       	sbc	r11, r31
   140b2:	0e 94 4b 97 	call	0x12e96	; 0x12e96 <Post_Config>
   140b6:	c5 01       	movw	r24, r10
   140b8:	c6 56       	subi	r28, 0x66	; 102
   140ba:	df 4f       	sbci	r29, 0xFF	; 255
   140bc:	e2 e1       	ldi	r30, 0x12	; 18
   140be:	0c 94 fc e5 	jmp	0x1cbf8	; 0x1cbf8 <__epilogue_restores__>

000140c2 <print_var_P>:
/// @brief Display Configuration File variable
/// @param str: title
/// @param val: variable value
/// @return  void
void print_var_P(__memx const char *str, uint32_t val)
{
   140c2:	cf 92       	push	r12
   140c4:	df 92       	push	r13
   140c6:	ef 92       	push	r14
   140c8:	0f 93       	push	r16
   140ca:	1f 93       	push	r17
   140cc:	cf 93       	push	r28
   140ce:	df 93       	push	r29
   140d0:	cd b7       	in	r28, 0x3d	; 61
   140d2:	de b7       	in	r29, 0x3e	; 62
   140d4:	c0 54       	subi	r28, 0x40	; 64
   140d6:	d1 09       	sbc	r29, r1
   140d8:	0f b6       	in	r0, 0x3f	; 63
   140da:	f8 94       	cli
   140dc:	de bf       	out	0x3e, r29	; 62
   140de:	0f be       	out	0x3f, r0	; 63
   140e0:	cd bf       	out	0x3d, r28	; 61
   140e2:	6b 01       	movw	r12, r22
   140e4:	e8 2e       	mov	r14, r24
   140e6:	75 2f       	mov	r23, r21
   140e8:	de 01       	movw	r26, r28
   140ea:	11 96       	adiw	r26, 0x01	; 1
    char tmp[64];
    int i=0;
   140ec:	80 e0       	ldi	r24, 0x00	; 0
   140ee:	90 e0       	ldi	r25, 0x00	; 0
   140f0:	8d 01       	movw	r16, r26
    while( *str && i < 62)
   140f2:	f6 01       	movw	r30, r12
   140f4:	5e 2d       	mov	r21, r14
   140f6:	0e 94 17 e6 	call	0x1cc2e	; 0x1cc2e <__xload_1>
   140fa:	66 23       	and	r22, r22
   140fc:	51 f0       	breq	.+20     	; 0x14112 <print_var_P+0x50>
   140fe:	8e 33       	cpi	r24, 0x3E	; 62
   14100:	91 05       	cpc	r25, r1
   14102:	39 f0       	breq	.+14     	; 0x14112 <print_var_P+0x50>
        tmp[i++] = *str++;
   14104:	01 96       	adiw	r24, 0x01	; 1
   14106:	5f ef       	ldi	r21, 0xFF	; 255
   14108:	c5 1a       	sub	r12, r21
   1410a:	d5 0a       	sbc	r13, r21
   1410c:	e5 0a       	sbc	r14, r21
   1410e:	6d 93       	st	X+, r22
   14110:	f0 cf       	rjmp	.-32     	; 0x140f2 <print_var_P+0x30>
    tmp[i++] = 0;
   14112:	f8 01       	movw	r30, r16
   14114:	e8 0f       	add	r30, r24
   14116:	f9 1f       	adc	r31, r25
   14118:	10 82       	st	Z, r1

    printf("    %-25s = %8lxH (%ld)\n", tmp, val, val); 
   1411a:	7f 93       	push	r23
   1411c:	4f 93       	push	r20
   1411e:	3f 93       	push	r19
   14120:	2f 93       	push	r18
   14122:	7f 93       	push	r23
   14124:	4f 93       	push	r20
   14126:	3f 93       	push	r19
   14128:	2f 93       	push	r18
   1412a:	1f 93       	push	r17
   1412c:	0f 93       	push	r16
   1412e:	85 e6       	ldi	r24, 0x65	; 101
   14130:	99 e1       	ldi	r25, 0x19	; 25
   14132:	1f 92       	push	r1
   14134:	9f 93       	push	r25
   14136:	8f 93       	push	r24
   14138:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
}
   1413c:	0f b6       	in	r0, 0x3f	; 63
   1413e:	f8 94       	cli
   14140:	de bf       	out	0x3e, r29	; 62
   14142:	0f be       	out	0x3f, r0	; 63
   14144:	cd bf       	out	0x3d, r28	; 61
   14146:	c0 5c       	subi	r28, 0xC0	; 192
   14148:	df 4f       	sbci	r29, 0xFF	; 255
   1414a:	0f b6       	in	r0, 0x3f	; 63
   1414c:	f8 94       	cli
   1414e:	de bf       	out	0x3e, r29	; 62
   14150:	0f be       	out	0x3f, r0	; 63
   14152:	cd bf       	out	0x3d, r28	; 61
   14154:	df 91       	pop	r29
   14156:	cf 91       	pop	r28
   14158:	1f 91       	pop	r17
   1415a:	0f 91       	pop	r16
   1415c:	ef 90       	pop	r14
   1415e:	df 90       	pop	r13
   14160:	cf 90       	pop	r12
   14162:	08 95       	ret

00014164 <print_str_P>:
/// @brief Display Configuration File string
/// @param *str: title
/// @param *arg: string
/// @return  void
void print_str_P(__memx const char *str, char *arg)
{
   14164:	cf 92       	push	r12
   14166:	df 92       	push	r13
   14168:	ef 92       	push	r14
   1416a:	cf 93       	push	r28
   1416c:	df 93       	push	r29
   1416e:	cd b7       	in	r28, 0x3d	; 61
   14170:	de b7       	in	r29, 0x3e	; 62
   14172:	c0 54       	subi	r28, 0x40	; 64
   14174:	d1 09       	sbc	r29, r1
   14176:	0f b6       	in	r0, 0x3f	; 63
   14178:	f8 94       	cli
   1417a:	de bf       	out	0x3e, r29	; 62
   1417c:	0f be       	out	0x3f, r0	; 63
   1417e:	cd bf       	out	0x3d, r28	; 61
   14180:	6b 01       	movw	r12, r22
   14182:	e8 2e       	mov	r14, r24
   14184:	75 2f       	mov	r23, r21
   14186:	de 01       	movw	r26, r28
   14188:	11 96       	adiw	r26, 0x01	; 1
    char tmp[64];
    int i=0;
   1418a:	80 e0       	ldi	r24, 0x00	; 0
   1418c:	90 e0       	ldi	r25, 0x00	; 0
   1418e:	9d 01       	movw	r18, r26
    while( *str && i < 62)
   14190:	f6 01       	movw	r30, r12
   14192:	5e 2d       	mov	r21, r14
   14194:	0e 94 17 e6 	call	0x1cc2e	; 0x1cc2e <__xload_1>
   14198:	66 23       	and	r22, r22
   1419a:	51 f0       	breq	.+20     	; 0x141b0 <print_str_P+0x4c>
   1419c:	8e 33       	cpi	r24, 0x3E	; 62
   1419e:	91 05       	cpc	r25, r1
   141a0:	39 f0       	breq	.+14     	; 0x141b0 <print_str_P+0x4c>
        tmp[i++] = *str++;
   141a2:	01 96       	adiw	r24, 0x01	; 1
   141a4:	5f ef       	ldi	r21, 0xFF	; 255
   141a6:	c5 1a       	sub	r12, r21
   141a8:	d5 0a       	sbc	r13, r21
   141aa:	e5 0a       	sbc	r14, r21
   141ac:	6d 93       	st	X+, r22
   141ae:	f0 cf       	rjmp	.-32     	; 0x14190 <print_str_P+0x2c>
    tmp[i++] = 0;
   141b0:	f9 01       	movw	r30, r18
   141b2:	e8 0f       	add	r30, r24
   141b4:	f9 1f       	adc	r31, r25
   141b6:	10 82       	st	Z, r1
    printf("    %-25s = \"%s\"\n", tmp, arg);   
   141b8:	7f 93       	push	r23
   141ba:	4f 93       	push	r20
   141bc:	3f 93       	push	r19
   141be:	2f 93       	push	r18
   141c0:	83 e5       	ldi	r24, 0x53	; 83
   141c2:	99 e1       	ldi	r25, 0x19	; 25
   141c4:	1f 92       	push	r1
   141c6:	9f 93       	push	r25
   141c8:	8f 93       	push	r24
   141ca:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
}
   141ce:	0f b6       	in	r0, 0x3f	; 63
   141d0:	f8 94       	cli
   141d2:	de bf       	out	0x3e, r29	; 62
   141d4:	0f be       	out	0x3f, r0	; 63
   141d6:	cd bf       	out	0x3d, r28	; 61
   141d8:	c0 5c       	subi	r28, 0xC0	; 192
   141da:	df 4f       	sbci	r29, 0xFF	; 255
   141dc:	0f b6       	in	r0, 0x3f	; 63
   141de:	f8 94       	cli
   141e0:	de bf       	out	0x3e, r29	; 62
   141e2:	0f be       	out	0x3f, r0	; 63
   141e4:	cd bf       	out	0x3d, r28	; 61
   141e6:	df 91       	pop	r29
   141e8:	cf 91       	pop	r28
   141ea:	ef 90       	pop	r14
   141ec:	df 90       	pop	r13
   141ee:	cf 90       	pop	r12
   141f0:	08 95       	ret

000141f2 <display_Addresses>:

/// ===============================================
/// @brief Display Configuration device address saummary
/// @return  void
void display_Addresses()
{
   141f2:	2f 92       	push	r2
   141f4:	3f 92       	push	r3
   141f6:	4f 92       	push	r4
   141f8:	6f 92       	push	r6
   141fa:	7f 92       	push	r7
   141fc:	8f 92       	push	r8
   141fe:	af 92       	push	r10
   14200:	bf 92       	push	r11
   14202:	cf 92       	push	r12
   14204:	df 92       	push	r13
   14206:	ef 92       	push	r14
   14208:	0f 93       	push	r16
   1420a:	1f 93       	push	r17
   1420c:	cf 93       	push	r28
   1420e:	df 93       	push	r29
   14210:	cd b7       	in	r28, 0x3d	; 61
   14212:	de b7       	in	r29, 0x3e	; 62
   14214:	2b 97       	sbiw	r28, 0x0b	; 11
   14216:	0f b6       	in	r0, 0x3f	; 63
   14218:	f8 94       	cli
   1421a:	de bf       	out	0x3e, r29	; 62
   1421c:	0f be       	out	0x3f, r0	; 63
   1421e:	cd bf       	out	0x3d, r28	; 61
    int i;
    int address;
    printf("Listen and Talk Address Settings\n");
   14220:	81 e3       	ldi	r24, 0x31	; 49
   14222:	99 e1       	ldi	r25, 0x19	; 25
   14224:	1f 92       	push	r1
   14226:	9f 93       	push	r25
   14228:	8f 93       	push	r24
   1422a:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1422e:	00 ef       	ldi	r16, 0xF0	; 240
   14230:	1d e1       	ldi	r17, 0x1D	; 29
   14232:	0f 90       	pop	r0
   14234:	0f 90       	pop	r0
   14236:	0f 90       	pop	r0
            printf("  AMIGO_MSA   = %02XH\n",BASE_MSA + address );
        }
#endif
        if(Devices[i].TYPE == PRINTER_TYPE )
        {
            printf("  PRINTER_MLA = %02XH\n",BASE_MLA + address );
   14238:	80 e9       	ldi	r24, 0x90	; 144
   1423a:	98 e1       	ldi	r25, 0x18	; 24
   1423c:	9c 01       	movw	r18, r24
   1423e:	40 e0       	ldi	r20, 0x00	; 0
   14240:	29 83       	std	Y+1, r18	; 0x01
   14242:	3a 83       	std	Y+2, r19	; 0x02
   14244:	4b 83       	std	Y+3, r20	; 0x03
            printf("  PRINTER_MTA = %02XH\n",BASE_MTA + address );
   14246:	89 e7       	ldi	r24, 0x79	; 121
   14248:	98 e1       	ldi	r25, 0x18	; 24
   1424a:	9c 01       	movw	r18, r24
   1424c:	40 e0       	ldi	r20, 0x00	; 0
   1424e:	2c 83       	std	Y+4, r18	; 0x04
   14250:	3d 83       	std	Y+5, r19	; 0x05
   14252:	4e 83       	std	Y+6, r20	; 0x06
            printf("  PRINTER_MSA = %02XH\n",BASE_MSA + address );
   14254:	82 e6       	ldi	r24, 0x62	; 98
   14256:	98 e1       	ldi	r25, 0x18	; 24
   14258:	9c 01       	movw	r18, r24
   1425a:	40 e0       	ldi	r20, 0x00	; 0
   1425c:	2f 83       	std	Y+7, r18	; 0x07
   1425e:	38 87       	std	Y+8, r19	; 0x08
   14260:	49 87       	std	Y+9, r20	; 0x09
            printf("  SS80_MSA    = %02XH\n",BASE_MSA + address );
        }
#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
        {
            printf("  AMIGO_MLA   = %02XH\n",BASE_MLA + address );
   14262:	85 ed       	ldi	r24, 0xD5	; 213
   14264:	98 e1       	ldi	r25, 0x18	; 24
   14266:	6c 01       	movw	r12, r24
            printf("  AMIGO_MTA   = %02XH\n",BASE_MTA + address );
   14268:	8e eb       	ldi	r24, 0xBE	; 190
   1426a:	98 e1       	ldi	r25, 0x18	; 24
   1426c:	3c 01       	movw	r6, r24
            printf("  AMIGO_MSA   = %02XH\n",BASE_MSA + address );
   1426e:	87 ea       	ldi	r24, 0xA7	; 167
   14270:	98 e1       	ldi	r25, 0x18	; 24
   14272:	1c 01       	movw	r2, r24
            continue;
        address = Devices[i].ADDRESS;

        if(Devices[i].TYPE == SS80_TYPE)
        {
            printf("  SS80_MLA    = %02XH\n",BASE_MLA + address );
   14274:	8a e1       	ldi	r24, 0x1A	; 26
   14276:	a8 2e       	mov	r10, r24
   14278:	89 e1       	ldi	r24, 0x19	; 25
   1427a:	b8 2e       	mov	r11, r24
    int i;
    int address;
    printf("Listen and Talk Address Settings\n");
    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   1427c:	f8 01       	movw	r30, r16
   1427e:	80 81       	ld	r24, Z
   14280:	88 23       	and	r24, r24
   14282:	09 f4       	brne	.+2      	; 0x14286 <display_Addresses+0x94>
   14284:	8a c0       	rjmp	.+276    	; 0x1439a <display_Addresses+0x1a8>
            continue;
        address = Devices[i].ADDRESS;
   14286:	f1 81       	ldd	r31, Z+1	; 0x01
   14288:	2f 2f       	mov	r18, r31
   1428a:	30 e0       	ldi	r19, 0x00	; 0
   1428c:	3b 87       	std	Y+11, r19	; 0x0b
   1428e:	2a 87       	std	Y+10, r18	; 0x0a

        if(Devices[i].TYPE == SS80_TYPE)
   14290:	83 30       	cpi	r24, 0x03	; 3
   14292:	49 f5       	brne	.+82     	; 0x142e6 <display_Addresses+0xf4>
        {
            printf("  SS80_MLA    = %02XH\n",BASE_MLA + address );
   14294:	c9 01       	movw	r24, r18
   14296:	80 96       	adiw	r24, 0x20	; 32
   14298:	9f 93       	push	r25
   1429a:	8f 93       	push	r24
   1429c:	c5 01       	movw	r24, r10
   1429e:	1f 92       	push	r1
   142a0:	9f 93       	push	r25
   142a2:	af 92       	push	r10
   142a4:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
            printf("  SS80_MTA    = %02XH\n",BASE_MTA + address );
   142a8:	8a 85       	ldd	r24, Y+10	; 0x0a
   142aa:	9b 85       	ldd	r25, Y+11	; 0x0b
   142ac:	80 5c       	subi	r24, 0xC0	; 192
   142ae:	9f 4f       	sbci	r25, 0xFF	; 255
   142b0:	9f 93       	push	r25
   142b2:	8f 93       	push	r24
   142b4:	83 e0       	ldi	r24, 0x03	; 3
   142b6:	99 e1       	ldi	r25, 0x19	; 25
   142b8:	1f 92       	push	r1
   142ba:	9f 93       	push	r25
   142bc:	8f 93       	push	r24
   142be:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
            printf("  SS80_MSA    = %02XH\n",BASE_MSA + address );
   142c2:	8a 85       	ldd	r24, Y+10	; 0x0a
   142c4:	9b 85       	ldd	r25, Y+11	; 0x0b
   142c6:	80 5a       	subi	r24, 0xA0	; 160
   142c8:	9f 4f       	sbci	r25, 0xFF	; 255
   142ca:	9f 93       	push	r25
   142cc:	8f 93       	push	r24
   142ce:	8c ee       	ldi	r24, 0xEC	; 236
   142d0:	98 e1       	ldi	r25, 0x18	; 24
   142d2:	1f 92       	push	r1
   142d4:	9f 93       	push	r25
   142d6:	8f 93       	push	r24
   142d8:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   142dc:	0f b6       	in	r0, 0x3f	; 63
   142de:	f8 94       	cli
   142e0:	de bf       	out	0x3e, r29	; 62
   142e2:	0f be       	out	0x3f, r0	; 63
   142e4:	cd bf       	out	0x3d, r28	; 61
        }
#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   142e6:	f8 01       	movw	r30, r16
   142e8:	80 81       	ld	r24, Z
   142ea:	81 30       	cpi	r24, 0x01	; 1
   142ec:	29 f5       	brne	.+74     	; 0x14338 <display_Addresses+0x146>
        {
            printf("  AMIGO_MLA   = %02XH\n",BASE_MLA + address );
   142ee:	8a 85       	ldd	r24, Y+10	; 0x0a
   142f0:	9b 85       	ldd	r25, Y+11	; 0x0b
   142f2:	80 96       	adiw	r24, 0x20	; 32
   142f4:	9f 93       	push	r25
   142f6:	8f 93       	push	r24
   142f8:	1f 92       	push	r1
   142fa:	df 92       	push	r13
   142fc:	cf 92       	push	r12
   142fe:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
            printf("  AMIGO_MTA   = %02XH\n",BASE_MTA + address );
   14302:	8a 85       	ldd	r24, Y+10	; 0x0a
   14304:	9b 85       	ldd	r25, Y+11	; 0x0b
   14306:	80 5c       	subi	r24, 0xC0	; 192
   14308:	9f 4f       	sbci	r25, 0xFF	; 255
   1430a:	9f 93       	push	r25
   1430c:	8f 93       	push	r24
   1430e:	1f 92       	push	r1
   14310:	7f 92       	push	r7
   14312:	6f 92       	push	r6
   14314:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
            printf("  AMIGO_MSA   = %02XH\n",BASE_MSA + address );
   14318:	8a 85       	ldd	r24, Y+10	; 0x0a
   1431a:	9b 85       	ldd	r25, Y+11	; 0x0b
   1431c:	80 5a       	subi	r24, 0xA0	; 160
   1431e:	9f 4f       	sbci	r25, 0xFF	; 255
   14320:	9f 93       	push	r25
   14322:	8f 93       	push	r24
   14324:	1f 92       	push	r1
   14326:	3f 92       	push	r3
   14328:	2f 92       	push	r2
   1432a:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1432e:	0f b6       	in	r0, 0x3f	; 63
   14330:	f8 94       	cli
   14332:	de bf       	out	0x3e, r29	; 62
   14334:	0f be       	out	0x3f, r0	; 63
   14336:	cd bf       	out	0x3d, r28	; 61
        }
#endif
        if(Devices[i].TYPE == PRINTER_TYPE )
   14338:	f8 01       	movw	r30, r16
   1433a:	80 81       	ld	r24, Z
   1433c:	84 30       	cpi	r24, 0x04	; 4
   1433e:	69 f5       	brne	.+90     	; 0x1439a <display_Addresses+0x1a8>
        {
            printf("  PRINTER_MLA = %02XH\n",BASE_MLA + address );
   14340:	8a 85       	ldd	r24, Y+10	; 0x0a
   14342:	9b 85       	ldd	r25, Y+11	; 0x0b
   14344:	80 96       	adiw	r24, 0x20	; 32
   14346:	9f 93       	push	r25
   14348:	8f 93       	push	r24
   1434a:	1f 92       	push	r1
   1434c:	fa 81       	ldd	r31, Y+2	; 0x02
   1434e:	ff 93       	push	r31
   14350:	29 81       	ldd	r18, Y+1	; 0x01
   14352:	2f 93       	push	r18
   14354:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
            printf("  PRINTER_MTA = %02XH\n",BASE_MTA + address );
   14358:	8a 85       	ldd	r24, Y+10	; 0x0a
   1435a:	9b 85       	ldd	r25, Y+11	; 0x0b
   1435c:	80 5c       	subi	r24, 0xC0	; 192
   1435e:	9f 4f       	sbci	r25, 0xFF	; 255
   14360:	9f 93       	push	r25
   14362:	8f 93       	push	r24
   14364:	1f 92       	push	r1
   14366:	3d 81       	ldd	r19, Y+5	; 0x05
   14368:	3f 93       	push	r19
   1436a:	4c 81       	ldd	r20, Y+4	; 0x04
   1436c:	4f 93       	push	r20
   1436e:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
            printf("  PRINTER_MSA = %02XH\n",BASE_MSA + address );
   14372:	8a 85       	ldd	r24, Y+10	; 0x0a
   14374:	9b 85       	ldd	r25, Y+11	; 0x0b
   14376:	80 5a       	subi	r24, 0xA0	; 160
   14378:	9f 4f       	sbci	r25, 0xFF	; 255
   1437a:	9b 87       	std	Y+11, r25	; 0x0b
   1437c:	8a 87       	std	Y+10, r24	; 0x0a
   1437e:	9f 93       	push	r25
   14380:	8f 93       	push	r24
   14382:	1f 92       	push	r1
   14384:	98 85       	ldd	r25, Y+8	; 0x08
   14386:	9f 93       	push	r25
   14388:	ef 81       	ldd	r30, Y+7	; 0x07
   1438a:	ef 93       	push	r30
   1438c:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   14390:	0f b6       	in	r0, 0x3f	; 63
   14392:	f8 94       	cli
   14394:	de bf       	out	0x3e, r29	; 62
   14396:	0f be       	out	0x3f, r0	; 63
   14398:	cd bf       	out	0x3d, r28	; 61
   1439a:	05 5d       	subi	r16, 0xD5	; 213
   1439c:	1f 4f       	sbci	r17, 0xFF	; 255
void display_Addresses()
{
    int i;
    int address;
    printf("Listen and Talk Address Settings\n");
    for(i=0;i<MAX_DEVICES;++i)
   1439e:	3f e1       	ldi	r19, 0x1F	; 31
   143a0:	04 3f       	cpi	r16, 0xF4	; 244
   143a2:	13 07       	cpc	r17, r19
   143a4:	09 f0       	breq	.+2      	; 0x143a8 <display_Addresses+0x1b6>
   143a6:	6a cf       	rjmp	.-300    	; 0x1427c <display_Addresses+0x8a>
            printf("  PRINTER_MLA = %02XH\n",BASE_MLA + address );
            printf("  PRINTER_MTA = %02XH\n",BASE_MTA + address );
            printf("  PRINTER_MSA = %02XH\n",BASE_MSA + address );
        }
    }
    printf("\n");
   143a8:	80 e6       	ldi	r24, 0x60	; 96
   143aa:	98 e1       	ldi	r25, 0x18	; 24
   143ac:	1f 92       	push	r1
   143ae:	9f 93       	push	r25
   143b0:	8f 93       	push	r24
   143b2:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
}
   143b6:	0f 90       	pop	r0
   143b8:	0f 90       	pop	r0
   143ba:	0f 90       	pop	r0
   143bc:	2b 96       	adiw	r28, 0x0b	; 11
   143be:	0f b6       	in	r0, 0x3f	; 63
   143c0:	f8 94       	cli
   143c2:	de bf       	out	0x3e, r29	; 62
   143c4:	0f be       	out	0x3f, r0	; 63
   143c6:	cd bf       	out	0x3d, r28	; 61
   143c8:	df 91       	pop	r29
   143ca:	cf 91       	pop	r28
   143cc:	1f 91       	pop	r17
   143ce:	0f 91       	pop	r16
   143d0:	ef 90       	pop	r14
   143d2:	df 90       	pop	r13
   143d4:	cf 90       	pop	r12
   143d6:	bf 90       	pop	r11
   143d8:	af 90       	pop	r10
   143da:	8f 90       	pop	r8
   143dc:	7f 90       	pop	r7
   143de:	6f 90       	pop	r6
   143e0:	4f 90       	pop	r4
   143e2:	3f 90       	pop	r3
   143e4:	2f 90       	pop	r2
   143e6:	08 95       	ret

000143e8 <display_Config>:

/// ===============================================
/// @brief Display current Configuration File values
/// @return  void
void display_Config()
{
   143e8:	2f 92       	push	r2
   143ea:	3f 92       	push	r3
   143ec:	4f 92       	push	r4
   143ee:	6f 92       	push	r6
   143f0:	7f 92       	push	r7
   143f2:	8f 92       	push	r8
   143f4:	af 92       	push	r10
   143f6:	bf 92       	push	r11
   143f8:	cf 92       	push	r12
   143fa:	df 92       	push	r13
   143fc:	ef 92       	push	r14
   143fe:	0f 93       	push	r16
   14400:	1f 93       	push	r17
   14402:	cf 93       	push	r28
   14404:	df 93       	push	r29
   14406:	cd b7       	in	r28, 0x3d	; 61
   14408:	de b7       	in	r29, 0x3e	; 62
   1440a:	2b 97       	sbiw	r28, 0x0b	; 11
   1440c:	0f b6       	in	r0, 0x3f	; 63
   1440e:	f8 94       	cli
   14410:	de bf       	out	0x3e, r29	; 62
   14412:	0f be       	out	0x3f, r0	; 63
   14414:	cd bf       	out	0x3d, r28	; 61
#ifdef AMIGO
    ///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    printf("Current Configuration Settings\n");
   14416:	80 e4       	ldi	r24, 0x40	; 64
   14418:	98 e1       	ldi	r25, 0x18	; 24
   1441a:	1f 92       	push	r1
   1441c:	9f 93       	push	r25
   1441e:	8f 93       	push	r24
   14420:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   14424:	00 ef       	ldi	r16, 0xF0	; 240
   14426:	1d e1       	ldi	r17, 0x1D	; 29
   14428:	0f 90       	pop	r0
   1442a:	0f 90       	pop	r0
   1442c:	0f 90       	pop	r0
            printf("PRINTER\n");
            printf("  CONFIG\n");
                print_var("ADDRESS", (uint32_t) PRINTERp->HEADER.ADDRESS);
			printf("  END\n");
        }
		printf("END\n");
   1442e:	87 eb       	ldi	r24, 0xB7	; 183
   14430:	95 e1       	ldi	r25, 0x15	; 21
   14432:	9c 01       	movw	r18, r24
   14434:	40 e0       	ldi	r20, 0x00	; 0
   14436:	29 83       	std	Y+1, r18	; 0x01
   14438:	3a 83       	std	Y+2, r19	; 0x02
   1443a:	4b 83       	std	Y+3, r20	; 0x03
		printf("\n");
   1443c:	85 eb       	ldi	r24, 0xB5	; 181
   1443e:	95 e1       	ldi	r25, 0x15	; 21
   14440:	9c 01       	movw	r18, r24
   14442:	40 e0       	ldi	r20, 0x00	; 0
   14444:	2c 83       	std	Y+4, r18	; 0x04
   14446:	3d 83       	std	Y+5, r19	; 0x05
   14448:	4e 83       	std	Y+6, r20	; 0x06

        if(Devices[i].TYPE == PRINTER_TYPE )
        {
            PRINTERp= (PRINTERDeviceType *)Devices[i].dev;

            printf("PRINTER\n");
   1444a:	85 ed       	ldi	r24, 0xD5	; 213
   1444c:	95 e1       	ldi	r25, 0x15	; 21
   1444e:	9c 01       	movw	r18, r24
   14450:	40 e0       	ldi	r20, 0x00	; 0
   14452:	2f 83       	std	Y+7, r18	; 0x07
   14454:	38 87       	std	Y+8, r19	; 0x08
   14456:	49 87       	std	Y+9, r20	; 0x09
            printf("  CONFIG\n");
   14458:	8b ec       	ldi	r24, 0xCB	; 203
   1445a:	95 e1       	ldi	r25, 0x15	; 21
   1445c:	1c 01       	movw	r2, r24
                print_var("ADDRESS", (uint32_t) PRINTERp->HEADER.ADDRESS);
   1445e:	83 ec       	ldi	r24, 0xC3	; 195
   14460:	95 e1       	ldi	r25, 0x15	; 21
   14462:	3c 01       	movw	r6, r24
   14464:	81 2c       	mov	r8, r1
			printf("  END\n");
   14466:	8c eb       	ldi	r24, 0xBC	; 188
   14468:	95 e1       	ldi	r25, 0x15	; 21
   1446a:	6c 01       	movw	r12, r24
#endif

    printf("Current Configuration Settings\n");
    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   1446c:	f8 01       	movw	r30, r16
   1446e:	80 81       	ld	r24, Z
   14470:	88 23       	and	r24, r24
   14472:	09 f4       	brne	.+2      	; 0x14476 <display_Config+0x8e>
   14474:	6d c2       	rjmp	.+1242   	; 0x14950 <display_Config+0x568>
            continue;

        if(Devices[i].TYPE == SS80_TYPE)
   14476:	83 30       	cpi	r24, 0x03	; 3
   14478:	09 f0       	breq	.+2      	; 0x1447c <display_Config+0x94>
   1447a:	75 c1       	rjmp	.+746    	; 0x14766 <display_Config+0x37e>
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
   1447c:	27 a1       	ldd	r18, Z+39	; 0x27
   1447e:	30 a5       	ldd	r19, Z+40	; 0x28
   14480:	3b 87       	std	Y+11, r19	; 0x0b
   14482:	2a 87       	std	Y+10, r18	; 0x0a

            printf("SS80 %s\n", Devices[i].model);
   14484:	c8 01       	movw	r24, r16
   14486:	07 96       	adiw	r24, 0x07	; 7
   14488:	9f 93       	push	r25
   1448a:	8f 93       	push	r24
   1448c:	87 e3       	ldi	r24, 0x37	; 55
   1448e:	98 e1       	ldi	r25, 0x18	; 24
   14490:	1f 92       	push	r1
   14492:	9f 93       	push	r25
   14494:	8f 93       	push	r24
   14496:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
			printf("  # HP85 BASIC ADDRESS :D7%d0\n", (int) SS80p->HEADER.ADDRESS);
   1449a:	ea 85       	ldd	r30, Y+10	; 0x0a
   1449c:	fb 85       	ldd	r31, Y+11	; 0x0b
   1449e:	80 81       	ld	r24, Z
   144a0:	1f 92       	push	r1
   144a2:	8f 93       	push	r24
   144a4:	88 e1       	ldi	r24, 0x18	; 24
   144a6:	98 e1       	ldi	r25, 0x18	; 24
   144a8:	1f 92       	push	r1
   144aa:	9f 93       	push	r25
   144ac:	8f 93       	push	r24
   144ae:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
            printf("  CONFIG\n");
   144b2:	8e e0       	ldi	r24, 0x0E	; 14
   144b4:	98 e1       	ldi	r25, 0x18	; 24
   144b6:	1f 92       	push	r1
   144b8:	9f 93       	push	r25
   144ba:	8f 93       	push	r24
   144bc:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
                print_var("ADDRESS", (uint32_t) SS80p->HEADER.ADDRESS);
   144c0:	ea 85       	ldd	r30, Y+10	; 0x0a
   144c2:	fb 85       	ldd	r31, Y+11	; 0x0b
   144c4:	20 81       	ld	r18, Z
   144c6:	30 e0       	ldi	r19, 0x00	; 0
   144c8:	40 e0       	ldi	r20, 0x00	; 0
   144ca:	50 e0       	ldi	r21, 0x00	; 0
   144cc:	66 e0       	ldi	r22, 0x06	; 6
   144ce:	78 e1       	ldi	r23, 0x18	; 24
   144d0:	80 e0       	ldi	r24, 0x00	; 0
   144d2:	f7 dd       	rcall	.-1042   	; 0x140c2 <print_var_P>
                print_var("PPR", (uint32_t) SS80p->HEADER.PPR);
   144d4:	ea 85       	ldd	r30, Y+10	; 0x0a
   144d6:	fb 85       	ldd	r31, Y+11	; 0x0b
   144d8:	21 81       	ldd	r18, Z+1	; 0x01
   144da:	30 e0       	ldi	r19, 0x00	; 0
   144dc:	40 e0       	ldi	r20, 0x00	; 0
   144de:	50 e0       	ldi	r21, 0x00	; 0
   144e0:	62 e0       	ldi	r22, 0x02	; 2
   144e2:	78 e1       	ldi	r23, 0x18	; 24
   144e4:	80 e0       	ldi	r24, 0x00	; 0
   144e6:	ed dd       	rcall	.-1062   	; 0x140c2 <print_var_P>
                print_str("FILE", SS80p->HEADER.NAME);
   144e8:	4a 85       	ldd	r20, Y+10	; 0x0a
   144ea:	5b 85       	ldd	r21, Y+11	; 0x0b
   144ec:	4e 5f       	subi	r20, 0xFE	; 254
   144ee:	5f 4f       	sbci	r21, 0xFF	; 255
   144f0:	6d ef       	ldi	r22, 0xFD	; 253
   144f2:	77 e1       	ldi	r23, 0x17	; 23
   144f4:	80 e0       	ldi	r24, 0x00	; 0
   144f6:	36 de       	rcall	.-916    	; 0x14164 <print_str_P>
			printf("  END\n");
   144f8:	86 ef       	ldi	r24, 0xF6	; 246
   144fa:	97 e1       	ldi	r25, 0x17	; 23
   144fc:	1f 92       	push	r1
   144fe:	9f 93       	push	r25
   14500:	8f 93       	push	r24
   14502:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
            printf("  HEADER\n");
   14506:	8c ee       	ldi	r24, 0xEC	; 236
   14508:	97 e1       	ldi	r25, 0x17	; 23
   1450a:	1f 92       	push	r1
   1450c:	9f 93       	push	r25
   1450e:	8f 93       	push	r24
   14510:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
                print_var("ID", (uint32_t) SS80p->CONFIG.ID);
   14514:	ea 85       	ldd	r30, Y+10	; 0x0a
   14516:	fb 85       	ldd	r31, Y+11	; 0x0b
   14518:	23 a1       	ldd	r18, Z+35	; 0x23
   1451a:	34 a1       	ldd	r19, Z+36	; 0x24
   1451c:	40 e0       	ldi	r20, 0x00	; 0
   1451e:	50 e0       	ldi	r21, 0x00	; 0
   14520:	69 ee       	ldi	r22, 0xE9	; 233
   14522:	77 e1       	ldi	r23, 0x17	; 23
   14524:	80 e0       	ldi	r24, 0x00	; 0
   14526:	cd dd       	rcall	.-1126   	; 0x140c2 <print_var_P>
			printf("  END\n");
   14528:	82 ee       	ldi	r24, 0xE2	; 226
   1452a:	97 e1       	ldi	r25, 0x17	; 23
   1452c:	1f 92       	push	r1
   1452e:	9f 93       	push	r25
   14530:	8f 93       	push	r24
   14532:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
            printf("  CONTROLLER\n");
   14536:	84 ed       	ldi	r24, 0xD4	; 212
   14538:	97 e1       	ldi	r25, 0x17	; 23
   1453a:	1f 92       	push	r1
   1453c:	9f 93       	push	r25
   1453e:	8f 93       	push	r24
   14540:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
                print_var("UNITS_INSTALLED", (uint32_t) SS80p->CONTROLLER.UNITS_INSTALLED);
   14544:	ea 85       	ldd	r30, Y+10	; 0x0a
   14546:	fb 85       	ldd	r31, Y+11	; 0x0b
   14548:	25 a1       	ldd	r18, Z+37	; 0x25
   1454a:	36 a1       	ldd	r19, Z+38	; 0x26
   1454c:	40 e0       	ldi	r20, 0x00	; 0
   1454e:	50 e0       	ldi	r21, 0x00	; 0
   14550:	64 ec       	ldi	r22, 0xC4	; 196
   14552:	77 e1       	ldi	r23, 0x17	; 23
   14554:	80 e0       	ldi	r24, 0x00	; 0
   14556:	b5 dd       	rcall	.-1174   	; 0x140c2 <print_var_P>
                print_var("TRANSFER_RATE", (uint32_t)  SS80p->CONTROLLER.TRANSFER_RATE);
   14558:	ea 85       	ldd	r30, Y+10	; 0x0a
   1455a:	fb 85       	ldd	r31, Y+11	; 0x0b
   1455c:	27 a1       	ldd	r18, Z+39	; 0x27
   1455e:	30 a5       	ldd	r19, Z+40	; 0x28
   14560:	40 e0       	ldi	r20, 0x00	; 0
   14562:	50 e0       	ldi	r21, 0x00	; 0
   14564:	66 eb       	ldi	r22, 0xB6	; 182
   14566:	77 e1       	ldi	r23, 0x17	; 23
   14568:	80 e0       	ldi	r24, 0x00	; 0
   1456a:	ab dd       	rcall	.-1194   	; 0x140c2 <print_var_P>
                print_var("TYPE", (uint32_t)  SS80p->CONTROLLER.TYPE);
   1456c:	ea 85       	ldd	r30, Y+10	; 0x0a
   1456e:	fb 85       	ldd	r31, Y+11	; 0x0b
   14570:	21 a5       	ldd	r18, Z+41	; 0x29
   14572:	30 e0       	ldi	r19, 0x00	; 0
   14574:	40 e0       	ldi	r20, 0x00	; 0
   14576:	50 e0       	ldi	r21, 0x00	; 0
   14578:	61 eb       	ldi	r22, 0xB1	; 177
   1457a:	77 e1       	ldi	r23, 0x17	; 23
   1457c:	80 e0       	ldi	r24, 0x00	; 0
   1457e:	a1 dd       	rcall	.-1214   	; 0x140c2 <print_var_P>
			printf("  END\n");
   14580:	8a ea       	ldi	r24, 0xAA	; 170
   14582:	97 e1       	ldi	r25, 0x17	; 23
   14584:	1f 92       	push	r1
   14586:	9f 93       	push	r25
   14588:	8f 93       	push	r24
   1458a:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
            printf("  UNIT\n");
   1458e:	82 ea       	ldi	r24, 0xA2	; 162
   14590:	97 e1       	ldi	r25, 0x17	; 23
   14592:	1f 92       	push	r1
   14594:	9f 93       	push	r25
   14596:	8f 93       	push	r24
   14598:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
                print_var("UNIT_TYPE", (uint32_t)SS80p->UNIT.UNIT_TYPE);
   1459c:	ea 85       	ldd	r30, Y+10	; 0x0a
   1459e:	fb 85       	ldd	r31, Y+11	; 0x0b
   145a0:	22 a5       	ldd	r18, Z+42	; 0x2a
   145a2:	30 e0       	ldi	r19, 0x00	; 0
   145a4:	40 e0       	ldi	r20, 0x00	; 0
   145a6:	50 e0       	ldi	r21, 0x00	; 0
   145a8:	68 e9       	ldi	r22, 0x98	; 152
   145aa:	77 e1       	ldi	r23, 0x17	; 23
   145ac:	80 e0       	ldi	r24, 0x00	; 0
   145ae:	89 dd       	rcall	.-1262   	; 0x140c2 <print_var_P>
                print_var("DEVICE_NUMBER", (uint32_t)SS80p->UNIT.DEVICE_NUMBER);
   145b0:	ea 85       	ldd	r30, Y+10	; 0x0a
   145b2:	fb 85       	ldd	r31, Y+11	; 0x0b
   145b4:	23 a5       	ldd	r18, Z+43	; 0x2b
   145b6:	34 a5       	ldd	r19, Z+44	; 0x2c
   145b8:	45 a5       	ldd	r20, Z+45	; 0x2d
   145ba:	56 a5       	ldd	r21, Z+46	; 0x2e
   145bc:	6a e8       	ldi	r22, 0x8A	; 138
   145be:	77 e1       	ldi	r23, 0x17	; 23
   145c0:	80 e0       	ldi	r24, 0x00	; 0
                print_var("BYTES_PER_BLOCK", (uint32_t)SS80p->UNIT.BYTES_PER_BLOCK);
   145c2:	7f dd       	rcall	.-1282   	; 0x140c2 <print_var_P>
   145c4:	ea 85       	ldd	r30, Y+10	; 0x0a
   145c6:	fb 85       	ldd	r31, Y+11	; 0x0b
   145c8:	27 a5       	ldd	r18, Z+47	; 0x2f
   145ca:	30 a9       	ldd	r19, Z+48	; 0x30
   145cc:	40 e0       	ldi	r20, 0x00	; 0
   145ce:	50 e0       	ldi	r21, 0x00	; 0
   145d0:	6a e7       	ldi	r22, 0x7A	; 122
   145d2:	77 e1       	ldi	r23, 0x17	; 23
                print_var("BUFFERED_BLOCKS", (uint32_t)SS80p->UNIT.BUFFERED_BLOCKS);
   145d4:	80 e0       	ldi	r24, 0x00	; 0
   145d6:	75 dd       	rcall	.-1302   	; 0x140c2 <print_var_P>
   145d8:	ea 85       	ldd	r30, Y+10	; 0x0a
   145da:	fb 85       	ldd	r31, Y+11	; 0x0b
   145dc:	21 a9       	ldd	r18, Z+49	; 0x31
   145de:	30 e0       	ldi	r19, 0x00	; 0
   145e0:	40 e0       	ldi	r20, 0x00	; 0
   145e2:	50 e0       	ldi	r21, 0x00	; 0
   145e4:	6a e6       	ldi	r22, 0x6A	; 106
   145e6:	77 e1       	ldi	r23, 0x17	; 23
                print_var("BURST_SIZE", (uint32_t)SS80p->UNIT.BURST_SIZE);
   145e8:	80 e0       	ldi	r24, 0x00	; 0
   145ea:	6b dd       	rcall	.-1322   	; 0x140c2 <print_var_P>
   145ec:	ea 85       	ldd	r30, Y+10	; 0x0a
   145ee:	fb 85       	ldd	r31, Y+11	; 0x0b
   145f0:	22 a9       	ldd	r18, Z+50	; 0x32
   145f2:	30 e0       	ldi	r19, 0x00	; 0
   145f4:	40 e0       	ldi	r20, 0x00	; 0
   145f6:	50 e0       	ldi	r21, 0x00	; 0
   145f8:	6f e5       	ldi	r22, 0x5F	; 95
   145fa:	77 e1       	ldi	r23, 0x17	; 23
                print_var("BLOCK_TIME", (uint32_t)SS80p->UNIT.BLOCK_TIME);
   145fc:	80 e0       	ldi	r24, 0x00	; 0
   145fe:	61 dd       	rcall	.-1342   	; 0x140c2 <print_var_P>
   14600:	ea 85       	ldd	r30, Y+10	; 0x0a
   14602:	fb 85       	ldd	r31, Y+11	; 0x0b
   14604:	23 a9       	ldd	r18, Z+51	; 0x33
   14606:	34 a9       	ldd	r19, Z+52	; 0x34
   14608:	40 e0       	ldi	r20, 0x00	; 0
   1460a:	50 e0       	ldi	r21, 0x00	; 0
   1460c:	64 e5       	ldi	r22, 0x54	; 84
   1460e:	77 e1       	ldi	r23, 0x17	; 23
                print_var("CONTINOUS_TRANSFER_RATE", (uint32_t)SS80p->UNIT.CONTINOUS_TRANSFER_RATE);
   14610:	80 e0       	ldi	r24, 0x00	; 0
   14612:	57 dd       	rcall	.-1362   	; 0x140c2 <print_var_P>
   14614:	ea 85       	ldd	r30, Y+10	; 0x0a
   14616:	fb 85       	ldd	r31, Y+11	; 0x0b
   14618:	25 a9       	ldd	r18, Z+53	; 0x35
   1461a:	36 a9       	ldd	r19, Z+54	; 0x36
   1461c:	40 e0       	ldi	r20, 0x00	; 0
   1461e:	50 e0       	ldi	r21, 0x00	; 0
   14620:	6c e3       	ldi	r22, 0x3C	; 60
   14622:	77 e1       	ldi	r23, 0x17	; 23
                print_var("OPTIMAL_RETRY_TIME", (uint32_t)SS80p->UNIT.OPTIMAL_RETRY_TIME);
   14624:	80 e0       	ldi	r24, 0x00	; 0
   14626:	4d dd       	rcall	.-1382   	; 0x140c2 <print_var_P>
   14628:	ea 85       	ldd	r30, Y+10	; 0x0a
   1462a:	fb 85       	ldd	r31, Y+11	; 0x0b
   1462c:	27 a9       	ldd	r18, Z+55	; 0x37
   1462e:	30 ad       	ldd	r19, Z+56	; 0x38
   14630:	40 e0       	ldi	r20, 0x00	; 0
   14632:	50 e0       	ldi	r21, 0x00	; 0
   14634:	69 e2       	ldi	r22, 0x29	; 41
   14636:	77 e1       	ldi	r23, 0x17	; 23
                print_var("ACCESS_TIME", (uint32_t)SS80p->UNIT.ACCESS_TIME);
   14638:	80 e0       	ldi	r24, 0x00	; 0
   1463a:	43 dd       	rcall	.-1402   	; 0x140c2 <print_var_P>
   1463c:	ea 85       	ldd	r30, Y+10	; 0x0a
   1463e:	fb 85       	ldd	r31, Y+11	; 0x0b
   14640:	21 ad       	ldd	r18, Z+57	; 0x39
   14642:	32 ad       	ldd	r19, Z+58	; 0x3a
   14644:	40 e0       	ldi	r20, 0x00	; 0
   14646:	50 e0       	ldi	r21, 0x00	; 0
   14648:	6d e1       	ldi	r22, 0x1D	; 29
   1464a:	77 e1       	ldi	r23, 0x17	; 23
                print_var("MAXIMUM_INTERLEAVE", (uint32_t)SS80p->UNIT.MAXIMUM_INTERLEAVE);
   1464c:	80 e0       	ldi	r24, 0x00	; 0
   1464e:	39 dd       	rcall	.-1422   	; 0x140c2 <print_var_P>
   14650:	ea 85       	ldd	r30, Y+10	; 0x0a
   14652:	fb 85       	ldd	r31, Y+11	; 0x0b
   14654:	23 ad       	ldd	r18, Z+59	; 0x3b
   14656:	30 e0       	ldi	r19, 0x00	; 0
   14658:	40 e0       	ldi	r20, 0x00	; 0
   1465a:	50 e0       	ldi	r21, 0x00	; 0
   1465c:	6a e0       	ldi	r22, 0x0A	; 10
   1465e:	77 e1       	ldi	r23, 0x17	; 23
                print_var("FIXED_VOLUMES", (uint32_t)SS80p->UNIT.FIXED_VOLUMES);
   14660:	80 e0       	ldi	r24, 0x00	; 0
   14662:	2f dd       	rcall	.-1442   	; 0x140c2 <print_var_P>
   14664:	ea 85       	ldd	r30, Y+10	; 0x0a
   14666:	fb 85       	ldd	r31, Y+11	; 0x0b
   14668:	24 ad       	ldd	r18, Z+60	; 0x3c
   1466a:	30 e0       	ldi	r19, 0x00	; 0
   1466c:	40 e0       	ldi	r20, 0x00	; 0
   1466e:	50 e0       	ldi	r21, 0x00	; 0
   14670:	6c ef       	ldi	r22, 0xFC	; 252
   14672:	76 e1       	ldi	r23, 0x16	; 22
                print_var("REMOVABLE_VOLUMES", (uint32_t)SS80p->UNIT.REMOVABLE_VOLUMES);
   14674:	80 e0       	ldi	r24, 0x00	; 0
   14676:	25 dd       	rcall	.-1462   	; 0x140c2 <print_var_P>
   14678:	ea 85       	ldd	r30, Y+10	; 0x0a
   1467a:	fb 85       	ldd	r31, Y+11	; 0x0b
   1467c:	25 ad       	ldd	r18, Z+61	; 0x3d
   1467e:	30 e0       	ldi	r19, 0x00	; 0
   14680:	40 e0       	ldi	r20, 0x00	; 0
   14682:	50 e0       	ldi	r21, 0x00	; 0
   14684:	6a ee       	ldi	r22, 0xEA	; 234
   14686:	76 e1       	ldi	r23, 0x16	; 22
   14688:	80 e0       	ldi	r24, 0x00	; 0
			printf("  END\n");
   1468a:	1b dd       	rcall	.-1482   	; 0x140c2 <print_var_P>
   1468c:	83 ee       	ldi	r24, 0xE3	; 227
   1468e:	96 e1       	ldi	r25, 0x16	; 22
   14690:	1f 92       	push	r1
   14692:	9f 93       	push	r25
   14694:	8f 93       	push	r24
   14696:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
            printf("  VOLUME\n");
   1469a:	0f b6       	in	r0, 0x3f	; 63
   1469c:	f8 94       	cli
   1469e:	de bf       	out	0x3e, r29	; 62
   146a0:	0f be       	out	0x3f, r0	; 63
   146a2:	cd bf       	out	0x3d, r28	; 61
   146a4:	89 ed       	ldi	r24, 0xD9	; 217
   146a6:	96 e1       	ldi	r25, 0x16	; 22
   146a8:	1f 92       	push	r1
   146aa:	9f 93       	push	r25
   146ac:	8f 93       	push	r24
                print_var("MAX_CYLINDER", (uint32_t)SS80p->VOLUME.MAX_CYLINDER);
   146ae:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   146b2:	ea 85       	ldd	r30, Y+10	; 0x0a
   146b4:	fb 85       	ldd	r31, Y+11	; 0x0b
   146b6:	fe 96       	adiw	r30, 0x3e	; 62
   146b8:	20 81       	ld	r18, Z
   146ba:	31 81       	ldd	r19, Z+1	; 0x01
   146bc:	42 81       	ldd	r20, Z+2	; 0x02
   146be:	53 81       	ldd	r21, Z+3	; 0x03
   146c0:	6c ec       	ldi	r22, 0xCC	; 204
   146c2:	76 e1       	ldi	r23, 0x16	; 22
                print_var("MAX_HEAD", (uint32_t)SS80p->VOLUME.MAX_HEAD);
   146c4:	80 e0       	ldi	r24, 0x00	; 0
   146c6:	fd dc       	rcall	.-1542   	; 0x140c2 <print_var_P>
   146c8:	ea 85       	ldd	r30, Y+10	; 0x0a
   146ca:	fb 85       	ldd	r31, Y+11	; 0x0b
   146cc:	ee 5b       	subi	r30, 0xBE	; 190
   146ce:	ff 4f       	sbci	r31, 0xFF	; 255
   146d0:	20 81       	ld	r18, Z
   146d2:	30 e0       	ldi	r19, 0x00	; 0
   146d4:	40 e0       	ldi	r20, 0x00	; 0
   146d6:	50 e0       	ldi	r21, 0x00	; 0
   146d8:	63 ec       	ldi	r22, 0xC3	; 195
   146da:	76 e1       	ldi	r23, 0x16	; 22
                print_var("MAX_SECTOR", (uint32_t)SS80p->VOLUME.MAX_SECTOR);
   146dc:	80 e0       	ldi	r24, 0x00	; 0
   146de:	f1 dc       	rcall	.-1566   	; 0x140c2 <print_var_P>
   146e0:	ea 85       	ldd	r30, Y+10	; 0x0a
   146e2:	fb 85       	ldd	r31, Y+11	; 0x0b
   146e4:	ed 5b       	subi	r30, 0xBD	; 189
   146e6:	ff 4f       	sbci	r31, 0xFF	; 255
   146e8:	20 81       	ld	r18, Z
   146ea:	31 81       	ldd	r19, Z+1	; 0x01
   146ec:	40 e0       	ldi	r20, 0x00	; 0
   146ee:	50 e0       	ldi	r21, 0x00	; 0
   146f0:	68 eb       	ldi	r22, 0xB8	; 184
   146f2:	76 e1       	ldi	r23, 0x16	; 22
                print_var("MAX_BLOCK_NUMBER", (uint32_t)SS80p->VOLUME.MAX_BLOCK_NUMBER);
   146f4:	80 e0       	ldi	r24, 0x00	; 0
   146f6:	e5 dc       	rcall	.-1590   	; 0x140c2 <print_var_P>
   146f8:	aa 84       	ldd	r10, Y+10	; 0x0a
   146fa:	bb 84       	ldd	r11, Y+11	; 0x0b
   146fc:	35 e4       	ldi	r19, 0x45	; 69
   146fe:	a3 0e       	add	r10, r19
   14700:	b1 1c       	adc	r11, r1
   14702:	f5 01       	movw	r30, r10
   14704:	20 81       	ld	r18, Z
   14706:	31 81       	ldd	r19, Z+1	; 0x01
   14708:	42 81       	ldd	r20, Z+2	; 0x02
   1470a:	53 81       	ldd	r21, Z+3	; 0x03
   1470c:	67 ea       	ldi	r22, 0xA7	; 167
   1470e:	76 e1       	ldi	r23, 0x16	; 22
                print_var("INTERLEAVE", (uint32_t)SS80p->VOLUME.INTERLEAVE);
   14710:	80 e0       	ldi	r24, 0x00	; 0
   14712:	d7 dc       	rcall	.-1618   	; 0x140c2 <print_var_P>
   14714:	2a 85       	ldd	r18, Y+10	; 0x0a
   14716:	3b 85       	ldd	r19, Y+11	; 0x0b
   14718:	27 5b       	subi	r18, 0xB7	; 183
   1471a:	3f 4f       	sbci	r19, 0xFF	; 255
   1471c:	f9 01       	movw	r30, r18
   1471e:	20 81       	ld	r18, Z
   14720:	30 e0       	ldi	r19, 0x00	; 0
   14722:	40 e0       	ldi	r20, 0x00	; 0
   14724:	50 e0       	ldi	r21, 0x00	; 0
   14726:	6c e9       	ldi	r22, 0x9C	; 156
   14728:	76 e1       	ldi	r23, 0x16	; 22
                print_var("# BLOCKS", (uint32_t)SS80p->VOLUME.MAX_BLOCK_NUMBER+1);
   1472a:	80 e0       	ldi	r24, 0x00	; 0
   1472c:	ca dc       	rcall	.-1644   	; 0x140c2 <print_var_P>
   1472e:	f5 01       	movw	r30, r10
   14730:	80 81       	ld	r24, Z
   14732:	91 81       	ldd	r25, Z+1	; 0x01
   14734:	a2 81       	ldd	r26, Z+2	; 0x02
   14736:	b3 81       	ldd	r27, Z+3	; 0x03
   14738:	9c 01       	movw	r18, r24
   1473a:	ad 01       	movw	r20, r26
   1473c:	2f 5f       	subi	r18, 0xFF	; 255
   1473e:	3f 4f       	sbci	r19, 0xFF	; 255
   14740:	4f 4f       	sbci	r20, 0xFF	; 255
   14742:	5f 4f       	sbci	r21, 0xFF	; 255
   14744:	63 e9       	ldi	r22, 0x93	; 147
   14746:	76 e1       	ldi	r23, 0x16	; 22
   14748:	80 e0       	ldi	r24, 0x00	; 0
			printf("  END\n");
   1474a:	bb dc       	rcall	.-1674   	; 0x140c2 <print_var_P>
   1474c:	8c e8       	ldi	r24, 0x8C	; 140
   1474e:	96 e1       	ldi	r25, 0x16	; 22
   14750:	1f 92       	push	r1
   14752:	9f 93       	push	r25
   14754:	8f 93       	push	r24
   14756:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1475a:	0f 90       	pop	r0
   1475c:	0f 90       	pop	r0
   1475e:	0f 90       	pop	r0
   14760:	0f 90       	pop	r0
   14762:	0f 90       	pop	r0
        } // SS80_TYPE

#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   14764:	0f 90       	pop	r0
   14766:	f8 01       	movw	r30, r16
   14768:	80 81       	ld	r24, Z
   1476a:	81 30       	cpi	r24, 0x01	; 1
   1476c:	09 f0       	breq	.+2      	; 0x14770 <display_Config+0x388>
        {
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
   1476e:	b5 c0       	rjmp	.+362    	; 0x148da <display_Config+0x4f2>
   14770:	27 a1       	ldd	r18, Z+39	; 0x27
   14772:	30 a5       	ldd	r19, Z+40	; 0x28
   14774:	3b 87       	std	Y+11, r19	; 0x0b

            printf("AMIGO %s\n", Devices[i].model);
   14776:	2a 87       	std	Y+10, r18	; 0x0a
   14778:	c8 01       	movw	r24, r16
   1477a:	07 96       	adiw	r24, 0x07	; 7
   1477c:	9f 93       	push	r25
   1477e:	8f 93       	push	r24
   14780:	e2 e8       	ldi	r30, 0x82	; 130
   14782:	f6 e1       	ldi	r31, 0x16	; 22
   14784:	cf 01       	movw	r24, r30
   14786:	1f 92       	push	r1
   14788:	9f 93       	push	r25
   1478a:	ef 93       	push	r30
   1478c:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
			printf("  # HP85 BASIC ADDRESS :D7%d0\n", (int) AMIGOp->HEADER.ADDRESS);
   14790:	ea 85       	ldd	r30, Y+10	; 0x0a
   14792:	fb 85       	ldd	r31, Y+11	; 0x0b
   14794:	80 81       	ld	r24, Z
   14796:	1f 92       	push	r1
   14798:	8f 93       	push	r24
   1479a:	83 e6       	ldi	r24, 0x63	; 99
   1479c:	96 e1       	ldi	r25, 0x16	; 22
   1479e:	1f 92       	push	r1
   147a0:	9f 93       	push	r25
   147a2:	8f 93       	push	r24
            printf("  HEADER\n");
   147a4:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   147a8:	89 e5       	ldi	r24, 0x59	; 89
   147aa:	96 e1       	ldi	r25, 0x16	; 22
   147ac:	1f 92       	push	r1
   147ae:	9f 93       	push	r25
                print_var("ADDRESS", (uint32_t) AMIGOp->HEADER.ADDRESS);
   147b0:	8f 93       	push	r24
   147b2:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   147b6:	ea 85       	ldd	r30, Y+10	; 0x0a
   147b8:	fb 85       	ldd	r31, Y+11	; 0x0b
   147ba:	20 81       	ld	r18, Z
   147bc:	30 e0       	ldi	r19, 0x00	; 0
   147be:	40 e0       	ldi	r20, 0x00	; 0
   147c0:	50 e0       	ldi	r21, 0x00	; 0
   147c2:	61 e5       	ldi	r22, 0x51	; 81
                print_var("PPR", (uint32_t) AMIGOp->HEADER.PPR);
   147c4:	76 e1       	ldi	r23, 0x16	; 22
   147c6:	80 e0       	ldi	r24, 0x00	; 0
   147c8:	7c dc       	rcall	.-1800   	; 0x140c2 <print_var_P>
   147ca:	ea 85       	ldd	r30, Y+10	; 0x0a
   147cc:	fb 85       	ldd	r31, Y+11	; 0x0b
   147ce:	21 81       	ldd	r18, Z+1	; 0x01
   147d0:	30 e0       	ldi	r19, 0x00	; 0
   147d2:	40 e0       	ldi	r20, 0x00	; 0
   147d4:	50 e0       	ldi	r21, 0x00	; 0
   147d6:	6d e4       	ldi	r22, 0x4D	; 77
   147d8:	76 e1       	ldi	r23, 0x16	; 22
                print_str("FILE", AMIGOp->HEADER.NAME);
   147da:	80 e0       	ldi	r24, 0x00	; 0
   147dc:	72 dc       	rcall	.-1820   	; 0x140c2 <print_var_P>
   147de:	4a 85       	ldd	r20, Y+10	; 0x0a
   147e0:	5b 85       	ldd	r21, Y+11	; 0x0b
   147e2:	4e 5f       	subi	r20, 0xFE	; 254
   147e4:	5f 4f       	sbci	r21, 0xFF	; 255
   147e6:	68 e4       	ldi	r22, 0x48	; 72
   147e8:	76 e1       	ldi	r23, 0x16	; 22
			printf("  END\n");
   147ea:	80 e0       	ldi	r24, 0x00	; 0
   147ec:	bb dc       	rcall	.-1674   	; 0x14164 <print_str_P>
   147ee:	81 e4       	ldi	r24, 0x41	; 65
   147f0:	96 e1       	ldi	r25, 0x16	; 22
   147f2:	1f 92       	push	r1
   147f4:	9f 93       	push	r25
   147f6:	8f 93       	push	r24
            printf("  CONFIG\n");
   147f8:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   147fc:	87 e3       	ldi	r24, 0x37	; 55
   147fe:	96 e1       	ldi	r25, 0x16	; 22
   14800:	1f 92       	push	r1
   14802:	9f 93       	push	r25
   14804:	8f 93       	push	r24
                print_var("ID", (uint32_t) AMIGOp->CONFIG.ID);
   14806:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1480a:	ea 85       	ldd	r30, Y+10	; 0x0a
   1480c:	fb 85       	ldd	r31, Y+11	; 0x0b
   1480e:	23 a1       	ldd	r18, Z+35	; 0x23
   14810:	34 a1       	ldd	r19, Z+36	; 0x24
   14812:	40 e0       	ldi	r20, 0x00	; 0
   14814:	50 e0       	ldi	r21, 0x00	; 0
   14816:	64 e3       	ldi	r22, 0x34	; 52
   14818:	76 e1       	ldi	r23, 0x16	; 22
			printf("  END\n");
   1481a:	80 e0       	ldi	r24, 0x00	; 0
   1481c:	52 dc       	rcall	.-1884   	; 0x140c2 <print_var_P>
   1481e:	8d e2       	ldi	r24, 0x2D	; 45
   14820:	96 e1       	ldi	r25, 0x16	; 22
   14822:	1f 92       	push	r1
   14824:	9f 93       	push	r25
   14826:	8f 93       	push	r24
            printf("  GEOMETRY\n");
   14828:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1482c:	81 e2       	ldi	r24, 0x21	; 33
   1482e:	96 e1       	ldi	r25, 0x16	; 22
   14830:	1f 92       	push	r1
   14832:	9f 93       	push	r25
                print_var("BYTES_PER_SECTOR", (uint32_t) AMIGOp->GEOMETRY.BYTES_PER_SECTOR);
   14834:	8f 93       	push	r24
   14836:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1483a:	ea 85       	ldd	r30, Y+10	; 0x0a
   1483c:	fb 85       	ldd	r31, Y+11	; 0x0b
   1483e:	25 a1       	ldd	r18, Z+37	; 0x25
   14840:	36 a1       	ldd	r19, Z+38	; 0x26
   14842:	03 2e       	mov	r0, r19
   14844:	00 0c       	add	r0, r0
   14846:	44 0b       	sbc	r20, r20
   14848:	55 0b       	sbc	r21, r21
   1484a:	60 e1       	ldi	r22, 0x10	; 16
                print_var("SECTORS_PER_TRACK", (uint32_t) AMIGOp->GEOMETRY.SECTORS_PER_TRACK);
   1484c:	76 e1       	ldi	r23, 0x16	; 22
   1484e:	80 e0       	ldi	r24, 0x00	; 0
   14850:	38 dc       	rcall	.-1936   	; 0x140c2 <print_var_P>
   14852:	ea 85       	ldd	r30, Y+10	; 0x0a
   14854:	fb 85       	ldd	r31, Y+11	; 0x0b
   14856:	27 a1       	ldd	r18, Z+39	; 0x27
   14858:	30 a5       	ldd	r19, Z+40	; 0x28
   1485a:	03 2e       	mov	r0, r19
   1485c:	00 0c       	add	r0, r0
   1485e:	44 0b       	sbc	r20, r20
   14860:	55 0b       	sbc	r21, r21
   14862:	6e ef       	ldi	r22, 0xFE	; 254
                print_var("HEADS", (uint32_t) AMIGOp->GEOMETRY.HEADS);
   14864:	75 e1       	ldi	r23, 0x15	; 21
   14866:	80 e0       	ldi	r24, 0x00	; 0
   14868:	2c dc       	rcall	.-1960   	; 0x140c2 <print_var_P>
   1486a:	ea 85       	ldd	r30, Y+10	; 0x0a
   1486c:	fb 85       	ldd	r31, Y+11	; 0x0b
   1486e:	21 a5       	ldd	r18, Z+41	; 0x29
   14870:	32 a5       	ldd	r19, Z+42	; 0x2a
   14872:	03 2e       	mov	r0, r19
   14874:	00 0c       	add	r0, r0
   14876:	44 0b       	sbc	r20, r20
   14878:	55 0b       	sbc	r21, r21
   1487a:	68 ef       	ldi	r22, 0xF8	; 248
                print_var("CYLINDERS", (uint32_t) AMIGOp->GEOMETRY.CYLINDERS);
   1487c:	75 e1       	ldi	r23, 0x15	; 21
   1487e:	80 e0       	ldi	r24, 0x00	; 0
   14880:	20 dc       	rcall	.-1984   	; 0x140c2 <print_var_P>
   14882:	ea 85       	ldd	r30, Y+10	; 0x0a
   14884:	fb 85       	ldd	r31, Y+11	; 0x0b
   14886:	23 a5       	ldd	r18, Z+43	; 0x2b
   14888:	34 a5       	ldd	r19, Z+44	; 0x2c
   1488a:	03 2e       	mov	r0, r19
   1488c:	00 0c       	add	r0, r0
   1488e:	44 0b       	sbc	r20, r20
   14890:	55 0b       	sbc	r21, r21
   14892:	6e ee       	ldi	r22, 0xEE	; 238
   14894:	75 e1       	ldi	r23, 0x15	; 21
                print_var("# BLOCKS", (uint32_t)AMIGOp->GEOMETRY.CYLINDERS * AMIGOp->GEOMETRY.SECTORS_PER_TRACK * AMIGOp->GEOMETRY.HEADS );
   14896:	80 e0       	ldi	r24, 0x00	; 0
   14898:	14 dc       	rcall	.-2008   	; 0x140c2 <print_var_P>
   1489a:	ea 85       	ldd	r30, Y+10	; 0x0a
   1489c:	fb 85       	ldd	r31, Y+11	; 0x0b
   1489e:	23 a5       	ldd	r18, Z+43	; 0x2b
   148a0:	34 a5       	ldd	r19, Z+44	; 0x2c
   148a2:	a7 a1       	ldd	r26, Z+39	; 0x27
   148a4:	b0 a5       	ldd	r27, Z+40	; 0x28
   148a6:	0e 94 a5 e5 	call	0x1cb4a	; 0x1cb4a <__mulhisi3>
   148aa:	9b 01       	movw	r18, r22
   148ac:	ac 01       	movw	r20, r24
   148ae:	a1 a5       	ldd	r26, Z+41	; 0x29
   148b0:	b2 a5       	ldd	r27, Z+42	; 0x2a
   148b2:	0e 94 ca e5 	call	0x1cb94	; 0x1cb94 <__mulshisi3>
   148b6:	9b 01       	movw	r18, r22
   148b8:	ac 01       	movw	r20, r24
   148ba:	65 ee       	ldi	r22, 0xE5	; 229
   148bc:	75 e1       	ldi	r23, 0x15	; 21
   148be:	80 e0       	ldi	r24, 0x00	; 0
			printf("  END\n");
   148c0:	00 dc       	rcall	.-2048   	; 0x140c2 <print_var_P>
   148c2:	8e ed       	ldi	r24, 0xDE	; 222
   148c4:	95 e1       	ldi	r25, 0x15	; 21
   148c6:	1f 92       	push	r1
   148c8:	9f 93       	push	r25
   148ca:	8f 93       	push	r24
   148cc:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   148d0:	0f b6       	in	r0, 0x3f	; 63
   148d2:	f8 94       	cli
   148d4:	de bf       	out	0x3e, r29	; 62
        } 
#endif // #ifdef AMIGO

        if(Devices[i].TYPE == PRINTER_TYPE )
   148d6:	0f be       	out	0x3f, r0	; 63
   148d8:	cd bf       	out	0x3d, r28	; 61
   148da:	f8 01       	movw	r30, r16
   148dc:	80 81       	ld	r24, Z
        {
            PRINTERp= (PRINTERDeviceType *)Devices[i].dev;
   148de:	84 30       	cpi	r24, 0x04	; 4
   148e0:	19 f5       	brne	.+70     	; 0x14928 <display_Config+0x540>
   148e2:	27 a1       	ldd	r18, Z+39	; 0x27
   148e4:	30 a5       	ldd	r19, Z+40	; 0x28

            printf("PRINTER\n");
   148e6:	3b 87       	std	Y+11, r19	; 0x0b
   148e8:	2a 87       	std	Y+10, r18	; 0x0a
   148ea:	1f 92       	push	r1
   148ec:	38 85       	ldd	r19, Y+8	; 0x08
   148ee:	3f 93       	push	r19
   148f0:	4f 81       	ldd	r20, Y+7	; 0x07
   148f2:	4f 93       	push	r20
            printf("  CONFIG\n");
   148f4:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   148f8:	1f 92       	push	r1
   148fa:	3f 92       	push	r3
   148fc:	2f 92       	push	r2
                print_var("ADDRESS", (uint32_t) PRINTERp->HEADER.ADDRESS);
   148fe:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   14902:	ea 85       	ldd	r30, Y+10	; 0x0a
   14904:	fb 85       	ldd	r31, Y+11	; 0x0b
   14906:	20 81       	ld	r18, Z
   14908:	30 e0       	ldi	r19, 0x00	; 0
   1490a:	40 e0       	ldi	r20, 0x00	; 0
   1490c:	50 e0       	ldi	r21, 0x00	; 0
   1490e:	88 2d       	mov	r24, r8
   14910:	b3 01       	movw	r22, r6
			printf("  END\n");
   14912:	d7 db       	rcall	.-2130   	; 0x140c2 <print_var_P>
   14914:	1f 92       	push	r1
   14916:	df 92       	push	r13
   14918:	cf 92       	push	r12
   1491a:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1491e:	0f b6       	in	r0, 0x3f	; 63
   14920:	f8 94       	cli
   14922:	de bf       	out	0x3e, r29	; 62
   14924:	0f be       	out	0x3f, r0	; 63
        }
		printf("END\n");
   14926:	cd bf       	out	0x3d, r28	; 61
   14928:	1f 92       	push	r1
   1492a:	3a 81       	ldd	r19, Y+2	; 0x02
   1492c:	3f 93       	push	r19
   1492e:	49 81       	ldd	r20, Y+1	; 0x01
   14930:	4f 93       	push	r20
   14932:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
		printf("\n");
   14936:	1f 92       	push	r1
   14938:	8d 81       	ldd	r24, Y+5	; 0x05
   1493a:	8f 93       	push	r24
   1493c:	9c 81       	ldd	r25, Y+4	; 0x04
   1493e:	9f 93       	push	r25
   14940:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   14944:	0f 90       	pop	r0
   14946:	0f 90       	pop	r0
   14948:	0f 90       	pop	r0
   1494a:	0f 90       	pop	r0
   1494c:	0f 90       	pop	r0
   1494e:	0f 90       	pop	r0
   14950:	05 5d       	subi	r16, 0xD5	; 213
    ///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    printf("Current Configuration Settings\n");
    for(i=0;i<MAX_DEVICES;++i)
   14952:	1f 4f       	sbci	r17, 0xFF	; 255
   14954:	ef e1       	ldi	r30, 0x1F	; 31
   14956:	04 3f       	cpi	r16, 0xF4	; 244
   14958:	1e 07       	cpc	r17, r30
   1495a:	09 f0       	breq	.+2      	; 0x1495e <display_Config+0x576>
			printf("  END\n");
        }
		printf("END\n");
		printf("\n");
    }
    printf("END\n");
   1495c:	87 cd       	rjmp	.-1266   	; 0x1446c <display_Config+0x84>
   1495e:	80 eb       	ldi	r24, 0xB0	; 176
   14960:	95 e1       	ldi	r25, 0x15	; 21
   14962:	1f 92       	push	r1
   14964:	9f 93       	push	r25
   14966:	8f 93       	push	r24
   14968:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    printf("\n");
   1496c:	8e ea       	ldi	r24, 0xAE	; 174
   1496e:	95 e1       	ldi	r25, 0x15	; 21
   14970:	1f 92       	push	r1
   14972:	9f 93       	push	r25
   14974:	8f 93       	push	r24
   14976:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
}
   1497a:	0f 90       	pop	r0
   1497c:	0f 90       	pop	r0
   1497e:	0f 90       	pop	r0
   14980:	0f 90       	pop	r0
   14982:	0f 90       	pop	r0
   14984:	0f 90       	pop	r0
   14986:	2b 96       	adiw	r28, 0x0b	; 11
   14988:	0f b6       	in	r0, 0x3f	; 63
   1498a:	f8 94       	cli
   1498c:	de bf       	out	0x3e, r29	; 62
   1498e:	0f be       	out	0x3f, r0	; 63
   14990:	cd bf       	out	0x3d, r28	; 61
   14992:	df 91       	pop	r29
   14994:	cf 91       	pop	r28
   14996:	1f 91       	pop	r17
   14998:	0f 91       	pop	r16
   1499a:	ef 90       	pop	r14
   1499c:	df 90       	pop	r13
   1499e:	cf 90       	pop	r12
   149a0:	bf 90       	pop	r11
   149a2:	af 90       	pop	r10
   149a4:	8f 90       	pop	r8
   149a6:	7f 90       	pop	r7
   149a8:	6f 90       	pop	r6
   149aa:	4f 90       	pop	r4
   149ac:	3f 90       	pop	r3
   149ae:	2f 90       	pop	r2
   149b0:	08 95       	ret

000149b2 <format_drives>:

/// ===============================================
/// @brief Format devices that have no image file
/// @return  void
void format_drives()
{
   149b2:	2f 92       	push	r2
   149b4:	3f 92       	push	r3
   149b6:	4f 92       	push	r4
   149b8:	5f 92       	push	r5
   149ba:	6f 92       	push	r6
   149bc:	7f 92       	push	r7
   149be:	8f 92       	push	r8
   149c0:	af 92       	push	r10
   149c2:	bf 92       	push	r11
   149c4:	cf 92       	push	r12
   149c6:	df 92       	push	r13
   149c8:	ef 92       	push	r14
   149ca:	ff 92       	push	r15
   149cc:	0f 93       	push	r16
   149ce:	1f 93       	push	r17
   149d0:	cf 93       	push	r28
   149d2:	df 93       	push	r29
   149d4:	cd b7       	in	r28, 0x3d	; 61
   149d6:	de b7       	in	r29, 0x3e	; 62
   149d8:	cd 55       	subi	r28, 0x5D	; 93
   149da:	d1 09       	sbc	r29, r1
   149dc:	0f b6       	in	r0, 0x3f	; 63
   149de:	f8 94       	cli
   149e0:	de bf       	out	0x3e, r29	; 62
   149e2:	0f be       	out	0x3f, r0	; 63
   149e4:	cd bf       	out	0x3d, r28	; 61
   149e6:	80 ef       	ldi	r24, 0xF0	; 240
   149e8:	a8 2e       	mov	r10, r24
   149ea:	8d e1       	ldi	r24, 0x1D	; 29
   149ec:	b8 2e       	mov	r11, r24
    int i;
    struct stat st;
    long sectors;
    char label[32];
    int ss80 = 1;
    int amigo = 1;
   149ee:	21 e0       	ldi	r18, 0x01	; 1
   149f0:	30 e0       	ldi	r19, 0x00	; 0
   149f2:	65 96       	adiw	r28, 0x15	; 21
   149f4:	3f af       	std	Y+63, r19	; 0x3f
   149f6:	2e af       	std	Y+62, r18	; 0x3e
   149f8:	65 97       	sbiw	r28, 0x15	; 21
{
    int i;
    struct stat st;
    long sectors;
    char label[32];
    int ss80 = 1;
   149fa:	81 e0       	ldi	r24, 0x01	; 1
   149fc:	90 e0       	ldi	r25, 0x00	; 0
   149fe:	63 96       	adiw	r28, 0x13	; 19
   14a00:	9f af       	std	Y+63, r25	; 0x3f
   14a02:	8e af       	std	Y+62, r24	; 0x3e
   14a04:	63 97       	sbiw	r28, 0x13	; 19
                {
                    printf("Can not use non 256 byte sectors\n");
                    continue;
                }
                sectors = Devices[i].BLOCKS;
                sprintf(label,"AMIGO%d", amigo);
   14a06:	8a e5       	ldi	r24, 0x5A	; 90
   14a08:	95 e1       	ldi	r25, 0x15	; 21
   14a0a:	9c 01       	movw	r18, r24
   14a0c:	40 e0       	ldi	r20, 0x00	; 0
   14a0e:	68 96       	adiw	r28, 0x18	; 24
   14a10:	2d af       	std	Y+61, r18	; 0x3d
   14a12:	3e af       	std	Y+62, r19	; 0x3e
   14a14:	4f af       	std	Y+63, r20	; 0x3f
   14a16:	68 97       	sbiw	r28, 0x18	; 24
   14a18:	2e 01       	movw	r4, r28
   14a1a:	31 e3       	ldi	r19, 0x31	; 49
   14a1c:	43 0e       	add	r4, r19
   14a1e:	51 1c       	adc	r5, r1
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
            if(stat(AMIGOp->HEADER.NAME, &st) == -1) 
            {
                if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
                {
                    printf("Can not use non 256 byte sectors\n");
   14a20:	82 e6       	ldi	r24, 0x62	; 98
   14a22:	95 e1       	ldi	r25, 0x15	; 21
   14a24:	9c 01       	movw	r18, r24
   14a26:	40 e0       	ldi	r20, 0x00	; 0
   14a28:	6b 96       	adiw	r28, 0x1b	; 27
   14a2a:	2d af       	std	Y+61, r18	; 0x3d
   14a2c:	3e af       	std	Y+62, r19	; 0x3e
   14a2e:	4f af       	std	Y+63, r20	; 0x3f
   14a30:	6b 97       	sbiw	r28, 0x1b	; 27
                }
                //SS80p->VOLUME.MAX_CYLINDER;
                //SS80p->VOLUME.MAX_HEAD;
                //SS80p->VOLUME.MAX_SECTOR;
                sectors = Devices[i].BLOCKS;
                sprintf(label,"SS80-%d", ss80);
   14a32:	84 e8       	ldi	r24, 0x84	; 132
   14a34:	95 e1       	ldi	r25, 0x15	; 21
   14a36:	3c 01       	movw	r6, r24

            if(stat(SS80p->HEADER.NAME, &st) == -1) 
            {
                if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
                {
                    printf("Can not use non 256 byte sectors\n");
   14a38:	8c e8       	ldi	r24, 0x8C	; 140
   14a3a:	95 e1       	ldi	r25, 0x15	; 21
   14a3c:	9c 01       	movw	r18, r24
   14a3e:	40 e0       	ldi	r20, 0x00	; 0
   14a40:	6e 96       	adiw	r28, 0x1e	; 30
   14a42:	2d af       	std	Y+61, r18	; 0x3d
   14a44:	3e af       	std	Y+62, r19	; 0x3e
   14a46:	4f af       	std	Y+63, r20	; 0x3f
   14a48:	6e 97       	sbiw	r28, 0x1e	; 30
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   14a4a:	f5 01       	movw	r30, r10
   14a4c:	80 81       	ld	r24, Z
   14a4e:	88 23       	and	r24, r24
   14a50:	09 f4       	brne	.+2      	; 0x14a54 <format_drives+0xa2>
   14a52:	a9 c0       	rjmp	.+338    	; 0x14ba6 <format_drives+0x1f4>
            continue;

        if(Devices[i].TYPE == SS80_TYPE)
   14a54:	83 30       	cpi	r24, 0x03	; 3
   14a56:	09 f0       	breq	.+2      	; 0x14a5a <format_drives+0xa8>
   14a58:	4a c0       	rjmp	.+148    	; 0x14aee <format_drives+0x13c>
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
   14a5a:	07 a1       	ldd	r16, Z+39	; 0x27
   14a5c:	10 a5       	ldd	r17, Z+40	; 0x28

            if(stat(SS80p->HEADER.NAME, &st) == -1) 
   14a5e:	18 01       	movw	r2, r16
   14a60:	f2 e0       	ldi	r31, 0x02	; 2
   14a62:	2f 0e       	add	r2, r31
   14a64:	31 1c       	adc	r3, r1
   14a66:	be 01       	movw	r22, r28
   14a68:	6f 5f       	subi	r22, 0xFF	; 255
   14a6a:	7f 4f       	sbci	r23, 0xFF	; 255
   14a6c:	c1 01       	movw	r24, r2
   14a6e:	0e 94 54 7a 	call	0xf4a8	; 0xf4a8 <stat>
   14a72:	01 96       	adiw	r24, 0x01	; 1
   14a74:	99 f5       	brne	.+102    	; 0x14adc <format_drives+0x12a>
            {
                if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
   14a76:	f8 01       	movw	r30, r16
   14a78:	87 a5       	ldd	r24, Z+47	; 0x2f
   14a7a:	90 a9       	ldd	r25, Z+48	; 0x30
   14a7c:	81 15       	cp	r24, r1
   14a7e:	91 40       	sbci	r25, 0x01	; 1
   14a80:	49 f0       	breq	.+18     	; 0x14a94 <format_drives+0xe2>
                {
                    printf("Can not use non 256 byte sectors\n");
   14a82:	1f 92       	push	r1
   14a84:	6d 96       	adiw	r28, 0x1d	; 29
   14a86:	2f ad       	ldd	r18, Y+63	; 0x3f
   14a88:	6d 97       	sbiw	r28, 0x1d	; 29
   14a8a:	2f 93       	push	r18
   14a8c:	6c 96       	adiw	r28, 0x1c	; 28
   14a8e:	3f ad       	ldd	r19, Y+63	; 0x3f
   14a90:	6c 97       	sbiw	r28, 0x1c	; 28
   14a92:	4f c0       	rjmp	.+158    	; 0x14b32 <format_drives+0x180>
                    continue;
                }
                //SS80p->VOLUME.MAX_CYLINDER;
                //SS80p->VOLUME.MAX_HEAD;
                //SS80p->VOLUME.MAX_SECTOR;
                sectors = Devices[i].BLOCKS;
   14a94:	f5 01       	movw	r30, r10
   14a96:	c3 80       	ldd	r12, Z+3	; 0x03
   14a98:	d4 80       	ldd	r13, Z+4	; 0x04
   14a9a:	e5 80       	ldd	r14, Z+5	; 0x05
   14a9c:	f6 80       	ldd	r15, Z+6	; 0x06
                sprintf(label,"SS80-%d", ss80);
   14a9e:	63 96       	adiw	r28, 0x13	; 19
   14aa0:	ff ad       	ldd	r31, Y+63	; 0x3f
   14aa2:	63 97       	sbiw	r28, 0x13	; 19
   14aa4:	ff 93       	push	r31
   14aa6:	62 96       	adiw	r28, 0x12	; 18
   14aa8:	2f ad       	ldd	r18, Y+63	; 0x3f
   14aaa:	62 97       	sbiw	r28, 0x12	; 18
   14aac:	2f 93       	push	r18
   14aae:	1f 92       	push	r1
   14ab0:	7f 92       	push	r7
   14ab2:	6f 92       	push	r6
   14ab4:	5f 92       	push	r5
   14ab6:	4f 92       	push	r4
   14ab8:	0e 94 47 47 	call	0x8e8e	; 0x8e8e <sprintf_P>
#ifdef LIF_SUPPORT
                lif_create_image(SS80p->HEADER.NAME,
                    label,
                    lif_dir_count(sectors), 
   14abc:	c7 01       	movw	r24, r14
   14abe:	b6 01       	movw	r22, r12
   14ac0:	1c d1       	rcall	.+568    	; 0x14cfa <lif_dir_count>
   14ac2:	9b 01       	movw	r18, r22
   14ac4:	ac 01       	movw	r20, r24
                //SS80p->VOLUME.MAX_HEAD;
                //SS80p->VOLUME.MAX_SECTOR;
                sectors = Devices[i].BLOCKS;
                sprintf(label,"SS80-%d", ss80);
#ifdef LIF_SUPPORT
                lif_create_image(SS80p->HEADER.NAME,
   14ac6:	87 01       	movw	r16, r14
   14ac8:	76 01       	movw	r14, r12
   14aca:	b2 01       	movw	r22, r4
   14acc:	c1 01       	movw	r24, r2
   14ace:	0e 94 17 e0 	call	0x1c02e	; 0x1c02e <lif_create_image>
   14ad2:	0f b6       	in	r0, 0x3f	; 63
   14ad4:	f8 94       	cli
   14ad6:	de bf       	out	0x3e, r29	; 62
   14ad8:	0f be       	out	0x3f, r0	; 63
   14ada:	cd bf       	out	0x3d, r28	; 61
#else
                printf("please create a SS80 LIF image with %ld sectors and 128 directory sectors\n", sectors);
#endif

            }
            ss80++;
   14adc:	63 96       	adiw	r28, 0x13	; 19
   14ade:	ee ad       	ldd	r30, Y+62	; 0x3e
   14ae0:	ff ad       	ldd	r31, Y+63	; 0x3f
   14ae2:	63 97       	sbiw	r28, 0x13	; 19
   14ae4:	31 96       	adiw	r30, 0x01	; 1
   14ae6:	63 96       	adiw	r28, 0x13	; 19
   14ae8:	ff af       	std	Y+63, r31	; 0x3f
   14aea:	ee af       	std	Y+62, r30	; 0x3e
   14aec:	63 97       	sbiw	r28, 0x13	; 19
        } // SS80_TYPE

#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   14aee:	f5 01       	movw	r30, r10
   14af0:	80 81       	ld	r24, Z
   14af2:	81 30       	cpi	r24, 0x01	; 1
   14af4:	09 f0       	breq	.+2      	; 0x14af8 <format_drives+0x146>
   14af6:	57 c0       	rjmp	.+174    	; 0x14ba6 <format_drives+0x1f4>
        {
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
   14af8:	07 a1       	ldd	r16, Z+39	; 0x27
   14afa:	10 a5       	ldd	r17, Z+40	; 0x28
            if(stat(AMIGOp->HEADER.NAME, &st) == -1) 
   14afc:	18 01       	movw	r2, r16
   14afe:	f2 e0       	ldi	r31, 0x02	; 2
   14b00:	2f 0e       	add	r2, r31
   14b02:	31 1c       	adc	r3, r1
   14b04:	be 01       	movw	r22, r28
   14b06:	6f 5f       	subi	r22, 0xFF	; 255
   14b08:	7f 4f       	sbci	r23, 0xFF	; 255
   14b0a:	c1 01       	movw	r24, r2
   14b0c:	0e 94 54 7a 	call	0xf4a8	; 0xf4a8 <stat>
   14b10:	01 96       	adiw	r24, 0x01	; 1
   14b12:	09 f0       	breq	.+2      	; 0x14b16 <format_drives+0x164>
   14b14:	3f c0       	rjmp	.+126    	; 0x14b94 <format_drives+0x1e2>
            {
                if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
   14b16:	f8 01       	movw	r30, r16
   14b18:	85 a1       	ldd	r24, Z+37	; 0x25
   14b1a:	96 a1       	ldd	r25, Z+38	; 0x26
   14b1c:	81 15       	cp	r24, r1
   14b1e:	91 40       	sbci	r25, 0x01	; 1
   14b20:	79 f0       	breq	.+30     	; 0x14b40 <format_drives+0x18e>
                {
                    printf("Can not use non 256 byte sectors\n");
   14b22:	1f 92       	push	r1
   14b24:	6a 96       	adiw	r28, 0x1a	; 26
   14b26:	2f ad       	ldd	r18, Y+63	; 0x3f
   14b28:	6a 97       	sbiw	r28, 0x1a	; 26
   14b2a:	2f 93       	push	r18
   14b2c:	69 96       	adiw	r28, 0x19	; 25
   14b2e:	3f ad       	ldd	r19, Y+63	; 0x3f
   14b30:	69 97       	sbiw	r28, 0x19	; 25
   14b32:	3f 93       	push	r19
   14b34:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
                    continue;
   14b38:	0f 90       	pop	r0
   14b3a:	0f 90       	pop	r0
   14b3c:	0f 90       	pop	r0
   14b3e:	33 c0       	rjmp	.+102    	; 0x14ba6 <format_drives+0x1f4>
                }
                sectors = Devices[i].BLOCKS;
   14b40:	f5 01       	movw	r30, r10
   14b42:	c3 80       	ldd	r12, Z+3	; 0x03
   14b44:	d4 80       	ldd	r13, Z+4	; 0x04
   14b46:	e5 80       	ldd	r14, Z+5	; 0x05
   14b48:	f6 80       	ldd	r15, Z+6	; 0x06
                sprintf(label,"AMIGO%d", amigo);
   14b4a:	65 96       	adiw	r28, 0x15	; 21
   14b4c:	ff ad       	ldd	r31, Y+63	; 0x3f
   14b4e:	65 97       	sbiw	r28, 0x15	; 21
   14b50:	ff 93       	push	r31
   14b52:	64 96       	adiw	r28, 0x14	; 20
   14b54:	2f ad       	ldd	r18, Y+63	; 0x3f
   14b56:	64 97       	sbiw	r28, 0x14	; 20
   14b58:	2f 93       	push	r18
   14b5a:	1f 92       	push	r1
   14b5c:	67 96       	adiw	r28, 0x17	; 23
   14b5e:	3f ad       	ldd	r19, Y+63	; 0x3f
   14b60:	67 97       	sbiw	r28, 0x17	; 23
   14b62:	3f 93       	push	r19
   14b64:	66 96       	adiw	r28, 0x16	; 22
   14b66:	4f ad       	ldd	r20, Y+63	; 0x3f
   14b68:	66 97       	sbiw	r28, 0x16	; 22
   14b6a:	4f 93       	push	r20
   14b6c:	5f 92       	push	r5
   14b6e:	4f 92       	push	r4
   14b70:	0e 94 47 47 	call	0x8e8e	; 0x8e8e <sprintf_P>
#ifdef LIF_SUPPORT
                lif_create_image(AMIGOp->HEADER.NAME,
                    label,
                    lif_dir_count(sectors), 
   14b74:	c7 01       	movw	r24, r14
   14b76:	b6 01       	movw	r22, r12
   14b78:	c0 d0       	rcall	.+384    	; 0x14cfa <lif_dir_count>
   14b7a:	9b 01       	movw	r18, r22
   14b7c:	ac 01       	movw	r20, r24
                    continue;
                }
                sectors = Devices[i].BLOCKS;
                sprintf(label,"AMIGO%d", amigo);
#ifdef LIF_SUPPORT
                lif_create_image(AMIGOp->HEADER.NAME,
   14b7e:	87 01       	movw	r16, r14
   14b80:	76 01       	movw	r14, r12
   14b82:	b2 01       	movw	r22, r4
   14b84:	c1 01       	movw	r24, r2
   14b86:	0e 94 17 e0 	call	0x1c02e	; 0x1c02e <lif_create_image>
   14b8a:	0f b6       	in	r0, 0x3f	; 63
   14b8c:	f8 94       	cli
   14b8e:	de bf       	out	0x3e, r29	; 62
   14b90:	0f be       	out	0x3f, r0	; 63
   14b92:	cd bf       	out	0x3d, r28	; 61
                    sectors);
#else
                printf("please create a AMIGO LIF image with %ld sectors and 15 directory sectors\n", sectors);
#endif
            }
            amigo++;
   14b94:	65 96       	adiw	r28, 0x15	; 21
   14b96:	ee ad       	ldd	r30, Y+62	; 0x3e
   14b98:	ff ad       	ldd	r31, Y+63	; 0x3f
   14b9a:	65 97       	sbiw	r28, 0x15	; 21
   14b9c:	31 96       	adiw	r30, 0x01	; 1
   14b9e:	65 96       	adiw	r28, 0x15	; 21
   14ba0:	ff af       	std	Y+63, r31	; 0x3f
   14ba2:	ee af       	std	Y+62, r30	; 0x3e
   14ba4:	65 97       	sbiw	r28, 0x15	; 21
   14ba6:	fb e2       	ldi	r31, 0x2B	; 43
   14ba8:	af 0e       	add	r10, r31
   14baa:	b1 1c       	adc	r11, r1
#ifdef AMIGO
    ///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
   14bac:	24 ef       	ldi	r18, 0xF4	; 244
   14bae:	3f e1       	ldi	r19, 0x1F	; 31
   14bb0:	2a 15       	cp	r18, r10
   14bb2:	3b 05       	cpc	r19, r11
   14bb4:	09 f0       	breq	.+2      	; 0x14bb8 <format_drives+0x206>
   14bb6:	49 cf       	rjmp	.-366    	; 0x14a4a <format_drives+0x98>
            }
            amigo++;
        } 
#endif // #ifdef AMIGO
    }
    printf("\n");
   14bb8:	88 e5       	ldi	r24, 0x58	; 88
   14bba:	95 e1       	ldi	r25, 0x15	; 21
   14bbc:	1f 92       	push	r1
   14bbe:	9f 93       	push	r25
   14bc0:	8f 93       	push	r24
   14bc2:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
}
   14bc6:	0f 90       	pop	r0
   14bc8:	0f 90       	pop	r0
   14bca:	0f 90       	pop	r0
   14bcc:	c3 5a       	subi	r28, 0xA3	; 163
   14bce:	df 4f       	sbci	r29, 0xFF	; 255
   14bd0:	0f b6       	in	r0, 0x3f	; 63
   14bd2:	f8 94       	cli
   14bd4:	de bf       	out	0x3e, r29	; 62
   14bd6:	0f be       	out	0x3f, r0	; 63
   14bd8:	cd bf       	out	0x3d, r28	; 61
   14bda:	df 91       	pop	r29
   14bdc:	cf 91       	pop	r28
   14bde:	1f 91       	pop	r17
   14be0:	0f 91       	pop	r16
   14be2:	ff 90       	pop	r15
   14be4:	ef 90       	pop	r14
   14be6:	df 90       	pop	r13
   14be8:	cf 90       	pop	r12
   14bea:	bf 90       	pop	r11
   14bec:	af 90       	pop	r10
   14bee:	8f 90       	pop	r8
   14bf0:	7f 90       	pop	r7
   14bf2:	6f 90       	pop	r6
   14bf4:	5f 90       	pop	r5
   14bf6:	4f 90       	pop	r4
   14bf8:	3f 90       	pop	r3
   14bfa:	2f 90       	pop	r2
   14bfc:	08 95       	ret

00014bfe <hpdir_init>:
/// disk parameters from a single hpdir disk entry
///
///@return void
void hpdir_init()
{
    memset(hpdir.model,0,sizeof(hpdir.model) -1);		// 1
   14bfe:	8f e1       	ldi	r24, 0x1F	; 31
   14c00:	e4 ef       	ldi	r30, 0xF4	; 244
   14c02:	ff e1       	ldi	r31, 0x1F	; 31
   14c04:	df 01       	movw	r26, r30
   14c06:	98 2f       	mov	r25, r24
   14c08:	1d 92       	st	X+, r1
   14c0a:	9a 95       	dec	r25
   14c0c:	e9 f7       	brne	.-6      	; 0x14c08 <hpdir_init+0xa>
    memset(hpdir.comment,0,sizeof(hpdir.comment) -1);	// 2
   14c0e:	9f e3       	ldi	r25, 0x3F	; 63
   14c10:	e4 e1       	ldi	r30, 0x14	; 20
   14c12:	f0 e2       	ldi	r31, 0x20	; 32
   14c14:	df 01       	movw	r26, r30
   14c16:	1d 92       	st	X+, r1
   14c18:	9a 95       	dec	r25
   14c1a:	e9 f7       	brne	.-6      	; 0x14c16 <hpdir_init+0x18>
    memset(hpdir.TYPE,0,sizeof(hpdir.TYPE) -1);		// 3
   14c1c:	e4 e5       	ldi	r30, 0x54	; 84
   14c1e:	f0 e2       	ldi	r31, 0x20	; 32
   14c20:	df 01       	movw	r26, r30
   14c22:	1d 92       	st	X+, r1
   14c24:	8a 95       	dec	r24
   14c26:	e9 f7       	brne	.-6      	; 0x14c22 <hpdir_init+0x24>
    hpdir.ID = 0;						// 4
   14c28:	10 92 74 20 	sts	0x2074, r1	; 0x802074 <hpdir+0x80>
   14c2c:	10 92 75 20 	sts	0x2075, r1	; 0x802075 <hpdir+0x81>
   14c30:	10 92 76 20 	sts	0x2076, r1	; 0x802076 <hpdir+0x82>
   14c34:	10 92 77 20 	sts	0x2077, r1	; 0x802077 <hpdir+0x83>
	hpdir.mask_stat2 = 0;				// 5
   14c38:	10 92 78 20 	sts	0x2078, r1	; 0x802078 <hpdir+0x84>
   14c3c:	10 92 79 20 	sts	0x2079, r1	; 0x802079 <hpdir+0x85>
   14c40:	10 92 7a 20 	sts	0x207A, r1	; 0x80207a <hpdir+0x86>
   14c44:	10 92 7b 20 	sts	0x207B, r1	; 0x80207b <hpdir+0x87>
	hpdir.id_stat2 = 0;					// 6
   14c48:	10 92 7c 20 	sts	0x207C, r1	; 0x80207c <hpdir+0x88>
   14c4c:	10 92 7d 20 	sts	0x207D, r1	; 0x80207d <hpdir+0x89>
   14c50:	10 92 7e 20 	sts	0x207E, r1	; 0x80207e <hpdir+0x8a>
   14c54:	10 92 7f 20 	sts	0x207F, r1	; 0x80207f <hpdir+0x8b>
	hpdir.DEVICE_NUMBER = 0;			// 7
   14c58:	10 92 80 20 	sts	0x2080, r1	; 0x802080 <hpdir+0x8c>
   14c5c:	10 92 81 20 	sts	0x2081, r1	; 0x802081 <hpdir+0x8d>
   14c60:	10 92 82 20 	sts	0x2082, r1	; 0x802082 <hpdir+0x8e>
   14c64:	10 92 83 20 	sts	0x2083, r1	; 0x802083 <hpdir+0x8f>
	hpdir.UNITS_INSTALLED = 0x8001;		// 8
   14c68:	81 e0       	ldi	r24, 0x01	; 1
   14c6a:	90 e8       	ldi	r25, 0x80	; 128
   14c6c:	a0 e0       	ldi	r26, 0x00	; 0
   14c6e:	b0 e0       	ldi	r27, 0x00	; 0
   14c70:	80 93 84 20 	sts	0x2084, r24	; 0x802084 <hpdir+0x90>
   14c74:	90 93 85 20 	sts	0x2085, r25	; 0x802085 <hpdir+0x91>
   14c78:	a0 93 86 20 	sts	0x2086, r26	; 0x802086 <hpdir+0x92>
   14c7c:	b0 93 87 20 	sts	0x2087, r27	; 0x802087 <hpdir+0x93>
	hpdir.CYLINDERS = 0;  				// 9
   14c80:	10 92 88 20 	sts	0x2088, r1	; 0x802088 <hpdir+0x94>
   14c84:	10 92 89 20 	sts	0x2089, r1	; 0x802089 <hpdir+0x95>
   14c88:	10 92 8a 20 	sts	0x208A, r1	; 0x80208a <hpdir+0x96>
   14c8c:	10 92 8b 20 	sts	0x208B, r1	; 0x80208b <hpdir+0x97>
	hpdir.HEADS= 0;	     				// 10
   14c90:	10 92 8c 20 	sts	0x208C, r1	; 0x80208c <hpdir+0x98>
   14c94:	10 92 8d 20 	sts	0x208D, r1	; 0x80208d <hpdir+0x99>
   14c98:	10 92 8e 20 	sts	0x208E, r1	; 0x80208e <hpdir+0x9a>
   14c9c:	10 92 8f 20 	sts	0x208F, r1	; 0x80208f <hpdir+0x9b>
	hpdir.SECTORS= 0;    				// 11
   14ca0:	10 92 90 20 	sts	0x2090, r1	; 0x802090 <hpdir+0x9c>
   14ca4:	10 92 91 20 	sts	0x2091, r1	; 0x802091 <hpdir+0x9d>
   14ca8:	10 92 92 20 	sts	0x2092, r1	; 0x802092 <hpdir+0x9e>
   14cac:	10 92 93 20 	sts	0x2093, r1	; 0x802093 <hpdir+0x9f>
	hpdir.BYTES_PER_SECTOR = 0;			// 12
   14cb0:	10 92 94 20 	sts	0x2094, r1	; 0x802094 <hpdir+0xa0>
   14cb4:	10 92 95 20 	sts	0x2095, r1	; 0x802095 <hpdir+0xa1>
   14cb8:	10 92 96 20 	sts	0x2096, r1	; 0x802096 <hpdir+0xa2>
   14cbc:	10 92 97 20 	sts	0x2097, r1	; 0x802097 <hpdir+0xa3>
	hpdir.INTERLEAVE = 0;				// 13
   14cc0:	10 92 98 20 	sts	0x2098, r1	; 0x802098 <hpdir+0xa4>
   14cc4:	10 92 99 20 	sts	0x2099, r1	; 0x802099 <hpdir+0xa5>
   14cc8:	10 92 9a 20 	sts	0x209A, r1	; 0x80209a <hpdir+0xa6>
   14ccc:	10 92 9b 20 	sts	0x209B, r1	; 0x80209b <hpdir+0xa7>
    hpdir.FIXED = 1;					// 14 ALWAYS 1
   14cd0:	81 e0       	ldi	r24, 0x01	; 1
   14cd2:	90 e0       	ldi	r25, 0x00	; 0
   14cd4:	a0 e0       	ldi	r26, 0x00	; 0
   14cd6:	b0 e0       	ldi	r27, 0x00	; 0
   14cd8:	80 93 9c 20 	sts	0x209C, r24	; 0x80209c <hpdir+0xa8>
   14cdc:	90 93 9d 20 	sts	0x209D, r25	; 0x80209d <hpdir+0xa9>
   14ce0:	a0 93 9e 20 	sts	0x209E, r26	; 0x80209e <hpdir+0xaa>
   14ce4:	b0 93 9f 20 	sts	0x209F, r27	; 0x80209f <hpdir+0xab>

	// Computed values
    hpdir.BLOCKS = 0;
   14ce8:	10 92 a0 20 	sts	0x20A0, r1	; 0x8020a0 <hpdir+0xac>
   14cec:	10 92 a1 20 	sts	0x20A1, r1	; 0x8020a1 <hpdir+0xad>
   14cf0:	10 92 a2 20 	sts	0x20A2, r1	; 0x8020a2 <hpdir+0xae>
   14cf4:	10 92 a3 20 	sts	0x20A3, r1	; 0x8020a3 <hpdir+0xaf>
   14cf8:	08 95       	ret

00014cfa <lif_dir_count>:
///@param[in] blocks: size of LIF image in total
///
///@return Size of LIF directory in blocks
long lif_dir_count(long blocks)
{
	int scale = 0;
   14cfa:	20 e0       	ldi	r18, 0x00	; 0
   14cfc:	30 e0       	ldi	r19, 0x00	; 0
	long num = 1;
	while(blocks)
   14cfe:	61 15       	cp	r22, r1
   14d00:	71 05       	cpc	r23, r1
   14d02:	81 05       	cpc	r24, r1
   14d04:	91 05       	cpc	r25, r1
   14d06:	39 f0       	breq	.+14     	; 0x14d16 <lif_dir_count+0x1c>
	{
		scale++;
   14d08:	2f 5f       	subi	r18, 0xFF	; 255
   14d0a:	3f 4f       	sbci	r19, 0xFF	; 255
 		blocks >>= 1;
   14d0c:	95 95       	asr	r25
   14d0e:	87 95       	ror	r24
   14d10:	77 95       	ror	r23
   14d12:	67 95       	ror	r22
   14d14:	f4 cf       	rjmp	.-24     	; 0x14cfe <lif_dir_count+0x4>
	}
	scale>>=1;
   14d16:	35 95       	asr	r19
   14d18:	27 95       	ror	r18
///
///@return Size of LIF directory in blocks
long lif_dir_count(long blocks)
{
	int scale = 0;
	long num = 1;
   14d1a:	61 e0       	ldi	r22, 0x01	; 1
   14d1c:	70 e0       	ldi	r23, 0x00	; 0
   14d1e:	80 e0       	ldi	r24, 0x00	; 0
   14d20:	90 e0       	ldi	r25, 0x00	; 0
	{
		scale++;
 		blocks >>= 1;
	}
	scale>>=1;
	while(scale--)
   14d22:	21 50       	subi	r18, 0x01	; 1
   14d24:	31 09       	sbc	r19, r1
   14d26:	28 f0       	brcs	.+10     	; 0x14d32 <lif_dir_count+0x38>
		num <<=1;
   14d28:	66 0f       	add	r22, r22
   14d2a:	77 1f       	adc	r23, r23
   14d2c:	88 1f       	adc	r24, r24
   14d2e:	99 1f       	adc	r25, r25
   14d30:	f8 cf       	rjmp	.-16     	; 0x14d22 <lif_dir_count+0x28>
	return(num);
}
   14d32:	08 95       	ret

00014d34 <hpdir_find_drive>:
///
///@param[in] model: model string
///
///@return 1 on sucess or 0 on fail
int hpdir_find_drive(char *model, int list, int verbose)
{
   14d34:	a1 e8       	ldi	r26, 0x81	; 129
   14d36:	b1 e0       	ldi	r27, 0x01	; 1
   14d38:	e0 ea       	ldi	r30, 0xA0	; 160
   14d3a:	f6 ea       	ldi	r31, 0xA6	; 166
   14d3c:	0c 94 e0 e5 	jmp	0x1cbc0	; 0x1cbc0 <__prologue_saves__>
   14d40:	98 2e       	mov	r9, r24
   14d42:	59 2e       	mov	r5, r25
   14d44:	1b 01       	movw	r2, r22
	FILE *cfg;
	char *ptr;
    char str[256];
    char token[128];

	hpdir_init();
   14d46:	5a 01       	movw	r10, r20

	cfg = fopen("hpdir.ini","rb");
   14d48:	5a df       	rcall	.-332    	; 0x14bfe <hpdir_init>
   14d4a:	66 e8       	ldi	r22, 0x86	; 134
   14d4c:	78 e0       	ldi	r23, 0x08	; 8
   14d4e:	8e ea       	ldi	r24, 0xAE	; 174
   14d50:	9f e0       	ldi	r25, 0x0F	; 15
   14d52:	0e 94 40 7f 	call	0xfe80	; 0xfe80 <fopen>

#ifndef LIF_STAND_ALONE
	if(cfg == NULL)
   14d56:	7c 01       	movw	r14, r24
   14d58:	89 2b       	or	r24, r25
		cfg = fopen("/hpdir.ini","rb");
   14d5a:	49 f4       	brne	.+18     	; 0x14d6e <hpdir_find_drive+0x3a>
   14d5c:	66 e8       	ldi	r22, 0x86	; 134
   14d5e:	78 e0       	ldi	r23, 0x08	; 8
   14d60:	8d ea       	ldi	r24, 0xAD	; 173
   14d62:	9f e0       	ldi	r25, 0x0F	; 15
   14d64:	0e 94 40 7f 	call	0xfe80	; 0xfe80 <fopen>
        strcat  (name, "/hpdir.ini");
        cfg = fopen(name, "rb");
    }
#endif

	if(cfg == NULL)
   14d68:	7c 01       	movw	r14, r24
   14d6a:	89 2b       	or	r24, r25
		// MODEL something else
		ptr = get_token(ptr, token, 	sizeof(token)-2);

        if(MATCHI(token,"[driveinfo]"))
        {
			driveinfo = 1;
   14d6c:	51 f0       	breq	.+20     	; 0x14d82 <hpdir_find_drive+0x4e>
   14d6e:	c1 2c       	mov	r12, r1

		if(*ptr == '[' && driveinfo == 1 )
                break;

		// MODEL something else
		ptr = get_token(ptr, token, 	sizeof(token)-2);
   14d70:	d1 2c       	mov	r13, r1
   14d72:	8e 01       	movw	r16, r28
   14d74:	0f 5f       	subi	r16, 0xFF	; 255
		if( driveinfo != 1)
			continue;

        if(list)
        {
            printf("%s %s\n", token, ptr);
   14d76:	1e 4f       	sbci	r17, 0xFE	; 254
   14d78:	82 e3       	ldi	r24, 0x32	; 50
   14d7a:	9f e1       	ldi	r25, 0x1F	; 31
   14d7c:	3c 01       	movw	r6, r24
   14d7e:	81 2c       	mov	r8, r1
    }
#endif

	if(cfg == NULL)
	{
		if(verbose)
   14d80:	1f c0       	rjmp	.+62     	; 0x14dc0 <hpdir_find_drive+0x8c>
   14d82:	a1 14       	cp	r10, r1
   14d84:	b1 04       	cpc	r11, r1
   14d86:	09 f4       	brne	.+2      	; 0x14d8a <hpdir_find_drive+0x56>
			printf("Error: hpdir.ini not found!\n");
   14d88:	7a c1       	rjmp	.+756    	; 0x1507e <hpdir_find_drive+0x34a>
   14d8a:	89 e3       	ldi	r24, 0x39	; 57
   14d8c:	9f e1       	ldi	r25, 0x1F	; 31
   14d8e:	1f 92       	push	r1
   14d90:	9f 93       	push	r25
   14d92:	8f 93       	push	r24
   14d94:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   14d98:	0f 90       	pop	r0
   14d9a:	0f 90       	pop	r0
   14d9c:	0f 90       	pop	r0
    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
    {
		errors = 0;
        ptr = str;

        trim_tail(ptr);
   14d9e:	6f c1       	rjmp	.+734    	; 0x1507e <hpdir_find_drive+0x34a>
   14da0:	ce 01       	movw	r24, r28
   14da2:	01 96       	adiw	r24, 0x01	; 1
   14da4:	0e 94 ad 32 	call	0x655a	; 0x655a <trim_tail>
        ptr = skipspaces(ptr);
   14da8:	ce 01       	movw	r24, r28
   14daa:	01 96       	adiw	r24, 0x01	; 1
   14dac:	0e 94 bd 32 	call	0x657a	; 0x657a <skipspaces>

        len = strlen(ptr);
   14db0:	fc 01       	movw	r30, r24
   14db2:	01 90       	ld	r0, Z+
   14db4:	00 20       	and	r0, r0
   14db6:	e9 f7       	brne	.-6      	; 0x14db2 <hpdir_find_drive+0x7e>
        if(!len)
   14db8:	31 97       	sbiw	r30, 0x01	; 1
   14dba:	8e 17       	cp	r24, r30
   14dbc:	9f 07       	cpc	r25, r31
		return(0);
	}

	// printf("Searching /hpdir.ini for model:%s\n", model);

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
   14dbe:	51 f4       	brne	.+20     	; 0x14dd4 <hpdir_find_drive+0xa0>
   14dc0:	a7 01       	movw	r20, r14
   14dc2:	6e ef       	ldi	r22, 0xFE	; 254
   14dc4:	70 e0       	ldi	r23, 0x00	; 0
   14dc6:	ce 01       	movw	r24, r28
   14dc8:	01 96       	adiw	r24, 0x01	; 1
   14dca:	0e 94 71 77 	call	0xeee2	; 0xeee2 <fgets>
   14dce:	89 2b       	or	r24, r25
   14dd0:	39 f7       	brne	.-50     	; 0x14da0 <hpdir_find_drive+0x6c>
        len = strlen(ptr);
        if(!len)
            continue;

        // Skip comments
        if(*ptr == ';' || *ptr == '#' )
   14dd2:	0c c0       	rjmp	.+24     	; 0x14dec <hpdir_find_drive+0xb8>
   14dd4:	fc 01       	movw	r30, r24
   14dd6:	20 81       	ld	r18, Z
   14dd8:	2b 33       	cpi	r18, 0x3B	; 59
   14dda:	91 f3       	breq	.-28     	; 0x14dc0 <hpdir_find_drive+0x8c>
   14ddc:	23 32       	cpi	r18, 0x23	; 35
            continue;

		if(*ptr == '[' && driveinfo == 1 )
   14dde:	81 f3       	breq	.-32     	; 0x14dc0 <hpdir_find_drive+0x8c>
   14de0:	2b 35       	cpi	r18, 0x5B	; 91
   14de2:	31 f4       	brne	.+12     	; 0x14df0 <hpdir_find_drive+0xbc>
   14de4:	f1 e0       	ldi	r31, 0x01	; 1
   14de6:	cf 16       	cp	r12, r31
   14de8:	d1 04       	cpc	r13, r1
int hpdir_find_drive(char *model, int list, int verbose)
{
    int len;
    int errors = 0;
    int driveinfo=0;
    int found = 0;
   14dea:	11 f4       	brne	.+4      	; 0x14df0 <hpdir_find_drive+0xbc>
   14dec:	00 e0       	ldi	r16, 0x00	; 0

		if(*ptr == '[' && driveinfo == 1 )
                break;

		// MODEL something else
		ptr = get_token(ptr, token, 	sizeof(token)-2);
   14dee:	41 c1       	rjmp	.+642    	; 0x15072 <hpdir_find_drive+0x33e>
   14df0:	4e e7       	ldi	r20, 0x7E	; 126
   14df2:	50 e0       	ldi	r21, 0x00	; 0
   14df4:	b8 01       	movw	r22, r16
   14df6:	0e 94 fd 33 	call	0x67fa	; 0x67fa <get_token>
   14dfa:	cf 57       	subi	r28, 0x7F	; 127
   14dfc:	de 4f       	sbci	r29, 0xFE	; 254
   14dfe:	88 83       	st	Y, r24
   14e00:	c1 58       	subi	r28, 0x81	; 129
   14e02:	d1 40       	sbci	r29, 0x01	; 1

        if(MATCHI(token,"[driveinfo]"))
   14e04:	49 2e       	mov	r4, r25
   14e06:	68 eb       	ldi	r22, 0xB8	; 184
   14e08:	7f e0       	ldi	r23, 0x0F	; 15
   14e0a:	c8 01       	movw	r24, r16
   14e0c:	0e 94 73 33 	call	0x66e6	; 0x66e6 <MATCHI>
   14e10:	89 2b       	or	r24, r25
        {
			driveinfo = 1;
   14e12:	21 f0       	breq	.+8      	; 0x14e1c <hpdir_find_drive+0xe8>
   14e14:	cc 24       	eor	r12, r12
   14e16:	c3 94       	inc	r12
   14e18:	d1 2c       	mov	r13, r1
            continue;
        }

		if( driveinfo != 1)
   14e1a:	d2 cf       	rjmp	.-92     	; 0x14dc0 <hpdir_find_drive+0x8c>
   14e1c:	21 e0       	ldi	r18, 0x01	; 1
   14e1e:	c2 16       	cp	r12, r18
   14e20:	d1 04       	cpc	r13, r1
			continue;

        if(list)
   14e22:	71 f6       	brne	.-100    	; 0x14dc0 <hpdir_find_drive+0x8c>
   14e24:	21 14       	cp	r2, r1
   14e26:	31 04       	cpc	r3, r1
        {
            printf("%s %s\n", token, ptr);
   14e28:	a1 f0       	breq	.+40     	; 0x14e52 <hpdir_find_drive+0x11e>
   14e2a:	4f 92       	push	r4
   14e2c:	cf 57       	subi	r28, 0x7F	; 127
   14e2e:	de 4f       	sbci	r29, 0xFE	; 254
   14e30:	88 81       	ld	r24, Y
   14e32:	c1 58       	subi	r28, 0x81	; 129
   14e34:	d1 40       	sbci	r29, 0x01	; 1
   14e36:	8f 93       	push	r24
   14e38:	1f 93       	push	r17
   14e3a:	0f 93       	push	r16
   14e3c:	1f 92       	push	r1
   14e3e:	7f 92       	push	r7
   14e40:	6f 92       	push	r6
   14e42:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
            continue;
   14e46:	0f b6       	in	r0, 0x3f	; 63
   14e48:	f8 94       	cli
   14e4a:	de bf       	out	0x3e, r29	; 62
   14e4c:	0f be       	out	0x3f, r0	; 63
   14e4e:	cd bf       	out	0x3d, r28	; 61
        }

		if ( ! MATCHI(model,token) )
   14e50:	b7 cf       	rjmp	.-146    	; 0x14dc0 <hpdir_find_drive+0x8c>
   14e52:	b8 01       	movw	r22, r16
   14e54:	89 2d       	mov	r24, r9
   14e56:	95 2d       	mov	r25, r5
   14e58:	0e 94 73 33 	call	0x66e6	; 0x66e6 <MATCHI>
			continue;

		hpdir_init();
   14e5c:	89 2b       	or	r24, r25
   14e5e:	d1 f2       	breq	.-76     	; 0x14e14 <hpdir_find_drive+0xe0>

		if(verbose)
   14e60:	ce de       	rcall	.-612    	; 0x14bfe <hpdir_init>
   14e62:	a1 14       	cp	r10, r1
   14e64:	b1 04       	cpc	r11, r1
			printf("Found Model: %s\n", model);
   14e66:	71 f0       	breq	.+28     	; 0x14e84 <hpdir_find_drive+0x150>
   14e68:	5f 92       	push	r5
   14e6a:	9f 92       	push	r9
   14e6c:	81 e2       	ldi	r24, 0x21	; 33
   14e6e:	9f e1       	ldi	r25, 0x1F	; 31
   14e70:	1f 92       	push	r1
   14e72:	9f 93       	push	r25
   14e74:	8f 93       	push	r24
   14e76:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   14e7a:	0f 90       	pop	r0
   14e7c:	0f 90       	pop	r0
   14e7e:	0f 90       	pop	r0
   14e80:	0f 90       	pop	r0

		strncpy(hpdir.model,token,sizeof(hpdir.model)-2);				// 1 Model
   14e82:	0f 90       	pop	r0
   14e84:	4e e1       	ldi	r20, 0x1E	; 30
   14e86:	50 e0       	ldi	r21, 0x00	; 0
   14e88:	b8 01       	movw	r22, r16
   14e8a:	84 ef       	ldi	r24, 0xF4	; 244
   14e8c:	9f e1       	ldi	r25, 0x1F	; 31
   14e8e:	0e 94 5e 32 	call	0x64bc	; 0x64bc <strncpy>

		ptr = get_token(ptr, token, 	sizeof(token)-2);				// =
   14e92:	4e e7       	ldi	r20, 0x7E	; 126
   14e94:	50 e0       	ldi	r21, 0x00	; 0
   14e96:	b8 01       	movw	r22, r16
   14e98:	cf 57       	subi	r28, 0x7F	; 127
   14e9a:	de 4f       	sbci	r29, 0xFE	; 254
   14e9c:	88 81       	ld	r24, Y
   14e9e:	c1 58       	subi	r28, 0x81	; 129
   14ea0:	d1 40       	sbci	r29, 0x01	; 1
   14ea2:	94 2d       	mov	r25, r4
   14ea4:	0e 94 fd 33 	call	0x67fa	; 0x67fa <get_token>

		ptr = get_token(ptr, hpdir.comment, sizeof(hpdir.comment)-2);	// 2 Comment
   14ea8:	4e e3       	ldi	r20, 0x3E	; 62
   14eaa:	50 e0       	ldi	r21, 0x00	; 0
   14eac:	64 e1       	ldi	r22, 0x14	; 20
   14eae:	70 e2       	ldi	r23, 0x20	; 32
   14eb0:	0e 94 fd 33 	call	0x67fa	; 0x67fa <get_token>

		ptr = get_token(ptr, hpdir.TYPE,  sizeof(hpdir.TYPE)-2);		// 3 AMIGO/SS80/CS80
   14eb4:	4e e1       	ldi	r20, 0x1E	; 30
   14eb6:	50 e0       	ldi	r21, 0x00	; 0
   14eb8:	64 e5       	ldi	r22, 0x54	; 84
   14eba:	70 e2       	ldi	r23, 0x20	; 32
   14ebc:	0e 94 fd 33 	call	0x67fa	; 0x67fa <get_token>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 4 Identify ID
   14ec0:	4e e7       	ldi	r20, 0x7E	; 126
   14ec2:	50 e0       	ldi	r21, 0x00	; 0
   14ec4:	b8 01       	movw	r22, r16
   14ec6:	0e 94 fd 33 	call	0x67fa	; 0x67fa <get_token>
		hpdir.ID = get_value(token);
   14eca:	6c 01       	movw	r12, r24
   14ecc:	c8 01       	movw	r24, r16
   14ece:	0e 94 72 34 	call	0x68e4	; 0x68e4 <get_value>
   14ed2:	60 93 74 20 	sts	0x2074, r22	; 0x802074 <hpdir+0x80>
   14ed6:	70 93 75 20 	sts	0x2075, r23	; 0x802075 <hpdir+0x81>
   14eda:	80 93 76 20 	sts	0x2076, r24	; 0x802076 <hpdir+0x82>
   14ede:	90 93 77 20 	sts	0x2077, r25	; 0x802077 <hpdir+0x83>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 5 MASK STAT 2
   14ee2:	4e e7       	ldi	r20, 0x7E	; 126
   14ee4:	50 e0       	ldi	r21, 0x00	; 0
   14ee6:	b8 01       	movw	r22, r16
   14ee8:	c6 01       	movw	r24, r12
   14eea:	0e 94 fd 33 	call	0x67fa	; 0x67fa <get_token>
		hpdir.mask_stat2 = get_value(token);
   14eee:	6c 01       	movw	r12, r24
   14ef0:	c8 01       	movw	r24, r16
   14ef2:	0e 94 72 34 	call	0x68e4	; 0x68e4 <get_value>
   14ef6:	60 93 78 20 	sts	0x2078, r22	; 0x802078 <hpdir+0x84>
   14efa:	70 93 79 20 	sts	0x2079, r23	; 0x802079 <hpdir+0x85>
   14efe:	80 93 7a 20 	sts	0x207A, r24	; 0x80207a <hpdir+0x86>
   14f02:	90 93 7b 20 	sts	0x207B, r25	; 0x80207b <hpdir+0x87>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 6 STAT2
   14f06:	4e e7       	ldi	r20, 0x7E	; 126
   14f08:	50 e0       	ldi	r21, 0x00	; 0
   14f0a:	b8 01       	movw	r22, r16
   14f0c:	c6 01       	movw	r24, r12
   14f0e:	0e 94 fd 33 	call	0x67fa	; 0x67fa <get_token>
		hpdir.id_stat2 = get_value(token);
   14f12:	6c 01       	movw	r12, r24
   14f14:	c8 01       	movw	r24, r16
   14f16:	0e 94 72 34 	call	0x68e4	; 0x68e4 <get_value>
   14f1a:	60 93 7c 20 	sts	0x207C, r22	; 0x80207c <hpdir+0x88>
   14f1e:	70 93 7d 20 	sts	0x207D, r23	; 0x80207d <hpdir+0x89>
   14f22:	80 93 7e 20 	sts	0x207E, r24	; 0x80207e <hpdir+0x8a>
   14f26:	90 93 7f 20 	sts	0x207F, r25	; 0x80207f <hpdir+0x8b>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 7 BCD include model number
   14f2a:	4e e7       	ldi	r20, 0x7E	; 126
   14f2c:	50 e0       	ldi	r21, 0x00	; 0
   14f2e:	b8 01       	movw	r22, r16
   14f30:	c6 01       	movw	r24, r12
   14f32:	0e 94 fd 33 	call	0x67fa	; 0x67fa <get_token>
		hpdir.DEVICE_NUMBER = get_value(token);
   14f36:	6c 01       	movw	r12, r24
   14f38:	c8 01       	movw	r24, r16
   14f3a:	0e 94 72 34 	call	0x68e4	; 0x68e4 <get_value>
   14f3e:	60 93 80 20 	sts	0x2080, r22	; 0x802080 <hpdir+0x8c>
   14f42:	70 93 81 20 	sts	0x2081, r23	; 0x802081 <hpdir+0x8d>
   14f46:	80 93 82 20 	sts	0x2082, r24	; 0x802082 <hpdir+0x8e>
   14f4a:	90 93 83 20 	sts	0x2083, r25	; 0x802083 <hpdir+0x8f>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 8 Units installed
   14f4e:	4e e7       	ldi	r20, 0x7E	; 126
   14f50:	50 e0       	ldi	r21, 0x00	; 0
   14f52:	b8 01       	movw	r22, r16
   14f54:	c6 01       	movw	r24, r12
   14f56:	0e 94 fd 33 	call	0x67fa	; 0x67fa <get_token>
		hpdir.UNITS_INSTALLED = get_value(token);
   14f5a:	6c 01       	movw	r12, r24
   14f5c:	c8 01       	movw	r24, r16
   14f5e:	0e 94 72 34 	call	0x68e4	; 0x68e4 <get_value>
   14f62:	60 93 84 20 	sts	0x2084, r22	; 0x802084 <hpdir+0x90>
   14f66:	70 93 85 20 	sts	0x2085, r23	; 0x802085 <hpdir+0x91>
   14f6a:	80 93 86 20 	sts	0x2086, r24	; 0x802086 <hpdir+0x92>
   14f6e:	90 93 87 20 	sts	0x2087, r25	; 0x802087 <hpdir+0x93>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 9 Cylinders
   14f72:	4e e7       	ldi	r20, 0x7E	; 126
   14f74:	50 e0       	ldi	r21, 0x00	; 0
   14f76:	b8 01       	movw	r22, r16
   14f78:	c6 01       	movw	r24, r12
   14f7a:	0e 94 fd 33 	call	0x67fa	; 0x67fa <get_token>
		hpdir.CYLINDERS = get_value(token);
   14f7e:	6c 01       	movw	r12, r24
   14f80:	c8 01       	movw	r24, r16
   14f82:	0e 94 72 34 	call	0x68e4	; 0x68e4 <get_value>
   14f86:	60 93 88 20 	sts	0x2088, r22	; 0x802088 <hpdir+0x94>
   14f8a:	70 93 89 20 	sts	0x2089, r23	; 0x802089 <hpdir+0x95>
   14f8e:	80 93 8a 20 	sts	0x208A, r24	; 0x80208a <hpdir+0x96>
   14f92:	90 93 8b 20 	sts	0x208B, r25	; 0x80208b <hpdir+0x97>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 10 Heads
   14f96:	4e e7       	ldi	r20, 0x7E	; 126
   14f98:	50 e0       	ldi	r21, 0x00	; 0
   14f9a:	b8 01       	movw	r22, r16
   14f9c:	c6 01       	movw	r24, r12
   14f9e:	0e 94 fd 33 	call	0x67fa	; 0x67fa <get_token>
		hpdir.HEADS = get_value(token);
   14fa2:	6c 01       	movw	r12, r24
   14fa4:	c8 01       	movw	r24, r16
   14fa6:	0e 94 72 34 	call	0x68e4	; 0x68e4 <get_value>
   14faa:	60 93 8c 20 	sts	0x208C, r22	; 0x80208c <hpdir+0x98>
   14fae:	70 93 8d 20 	sts	0x208D, r23	; 0x80208d <hpdir+0x99>
   14fb2:	80 93 8e 20 	sts	0x208E, r24	; 0x80208e <hpdir+0x9a>
   14fb6:	90 93 8f 20 	sts	0x208F, r25	; 0x80208f <hpdir+0x9b>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 11 Sectors
   14fba:	4e e7       	ldi	r20, 0x7E	; 126
   14fbc:	50 e0       	ldi	r21, 0x00	; 0
   14fbe:	b8 01       	movw	r22, r16
   14fc0:	c6 01       	movw	r24, r12
   14fc2:	0e 94 fd 33 	call	0x67fa	; 0x67fa <get_token>
		hpdir.SECTORS = get_value(token);
   14fc6:	6c 01       	movw	r12, r24
   14fc8:	c8 01       	movw	r24, r16
   14fca:	0e 94 72 34 	call	0x68e4	; 0x68e4 <get_value>
   14fce:	60 93 90 20 	sts	0x2090, r22	; 0x802090 <hpdir+0x9c>
   14fd2:	70 93 91 20 	sts	0x2091, r23	; 0x802091 <hpdir+0x9d>
   14fd6:	80 93 92 20 	sts	0x2092, r24	; 0x802092 <hpdir+0x9e>
   14fda:	90 93 93 20 	sts	0x2093, r25	; 0x802093 <hpdir+0x9f>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 12 Bytes Per Block/Sector
   14fde:	4e e7       	ldi	r20, 0x7E	; 126
   14fe0:	50 e0       	ldi	r21, 0x00	; 0
   14fe2:	b8 01       	movw	r22, r16
   14fe4:	c6 01       	movw	r24, r12
   14fe6:	0e 94 fd 33 	call	0x67fa	; 0x67fa <get_token>
		hpdir.BYTES_PER_SECTOR = get_value(token);
   14fea:	6c 01       	movw	r12, r24
   14fec:	c8 01       	movw	r24, r16
   14fee:	0e 94 72 34 	call	0x68e4	; 0x68e4 <get_value>
   14ff2:	60 93 94 20 	sts	0x2094, r22	; 0x802094 <hpdir+0xa0>
   14ff6:	70 93 95 20 	sts	0x2095, r23	; 0x802095 <hpdir+0xa1>
   14ffa:	80 93 96 20 	sts	0x2096, r24	; 0x802096 <hpdir+0xa2>
   14ffe:	90 93 97 20 	sts	0x2097, r25	; 0x802097 <hpdir+0xa3>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 13 Interleave
   15002:	4e e7       	ldi	r20, 0x7E	; 126
   15004:	50 e0       	ldi	r21, 0x00	; 0
   15006:	b8 01       	movw	r22, r16
   15008:	c6 01       	movw	r24, r12
   1500a:	0e 94 fd 33 	call	0x67fa	; 0x67fa <get_token>
		hpdir.INTERLEAVE = get_value(token);
   1500e:	c8 01       	movw	r24, r16
   15010:	0e 94 72 34 	call	0x68e4	; 0x68e4 <get_value>
   15014:	60 93 98 20 	sts	0x2098, r22	; 0x802098 <hpdir+0xa4>
   15018:	70 93 99 20 	sts	0x2099, r23	; 0x802099 <hpdir+0xa5>
   1501c:	80 93 9a 20 	sts	0x209A, r24	; 0x80209a <hpdir+0xa6>
   15020:	90 93 9b 20 	sts	0x209B, r25	; 0x80209b <hpdir+0xa7>

		// Computed values
		hpdir.BLOCKS = ( hpdir.CYLINDERS * hpdir.HEADS * hpdir.SECTORS );
   15024:	20 91 88 20 	lds	r18, 0x2088	; 0x802088 <hpdir+0x94>
   15028:	30 91 89 20 	lds	r19, 0x2089	; 0x802089 <hpdir+0x95>
   1502c:	40 91 8a 20 	lds	r20, 0x208A	; 0x80208a <hpdir+0x96>
   15030:	50 91 8b 20 	lds	r21, 0x208B	; 0x80208b <hpdir+0x97>
   15034:	60 91 8c 20 	lds	r22, 0x208C	; 0x80208c <hpdir+0x98>
   15038:	70 91 8d 20 	lds	r23, 0x208D	; 0x80208d <hpdir+0x99>
   1503c:	80 91 8e 20 	lds	r24, 0x208E	; 0x80208e <hpdir+0x9a>
   15040:	90 91 8f 20 	lds	r25, 0x208F	; 0x80208f <hpdir+0x9b>
   15044:	0e 94 1c e5 	call	0x1ca38	; 0x1ca38 <__mulsi3>
   15048:	9b 01       	movw	r18, r22
   1504a:	ac 01       	movw	r20, r24
   1504c:	60 91 90 20 	lds	r22, 0x2090	; 0x802090 <hpdir+0x9c>
   15050:	70 91 91 20 	lds	r23, 0x2091	; 0x802091 <hpdir+0x9d>
   15054:	80 91 92 20 	lds	r24, 0x2092	; 0x802092 <hpdir+0x9e>
   15058:	90 91 93 20 	lds	r25, 0x2093	; 0x802093 <hpdir+0x9f>
   1505c:	0e 94 1c e5 	call	0x1ca38	; 0x1ca38 <__mulsi3>
   15060:	60 93 a0 20 	sts	0x20A0, r22	; 0x8020a0 <hpdir+0xac>
   15064:	70 93 a1 20 	sts	0x20A1, r23	; 0x8020a1 <hpdir+0xad>
   15068:	80 93 a2 20 	sts	0x20A2, r24	; 0x8020a2 <hpdir+0xae>
   1506c:	90 93 a3 20 	sts	0x20A3, r25	; 0x8020a3 <hpdir+0xaf>
		{
			if(verbose)
				printf("Error /hpdir.ini parsing\n");
			break;
		}
		found = 1;
   15070:	01 e0       	ldi	r16, 0x01	; 1
		break;

	}	// while
	fclose(cfg);
   15072:	10 e0       	ldi	r17, 0x00	; 0
   15074:	c7 01       	movw	r24, r14
   15076:	0e 94 ea 7d 	call	0xfbd4	; 0xfbd4 <fclose>
	return(found);
   1507a:	c8 01       	movw	r24, r16

	if(cfg == NULL)
	{
		if(verbose)
			printf("Error: hpdir.ini not found!\n");
		return(0);
   1507c:	02 c0       	rjmp	.+4      	; 0x15082 <hpdir_find_drive+0x34e>
   1507e:	80 e0       	ldi	r24, 0x00	; 0
		break;

	}	// while
	fclose(cfg);
	return(found);
}
   15080:	90 e0       	ldi	r25, 0x00	; 0
   15082:	cf 57       	subi	r28, 0x7F	; 127
   15084:	de 4f       	sbci	r29, 0xFE	; 254
   15086:	e2 e1       	ldi	r30, 0x12	; 18
   15088:	0c 94 fc e5 	jmp	0x1cbf8	; 0x1cbf8 <__epilogue_restores__>

0001508c <SS80ControllerPack>:
   1508c:	0f 93       	push	r16
   1508e:	1f 93       	push	r17
   15090:	25 e0       	ldi	r18, 0x05	; 5
   15092:	30 e0       	ldi	r19, 0x00	; 0
   15094:	fc 01       	movw	r30, r24
   15096:	31 83       	std	Z+1, r19	; 0x01
   15098:	20 83       	st	Z, r18
   1509a:	e0 91 6b 18 	lds	r30, 0x186B	; 0x80186b <SS80p>
   1509e:	f0 91 6c 18 	lds	r31, 0x186C	; 0x80186c <SS80p+0x1>
   150a2:	05 a1       	ldd	r16, Z+37	; 0x25
   150a4:	16 a1       	ldd	r17, Z+38	; 0x26
   150a6:	20 e0       	ldi	r18, 0x00	; 0
   150a8:	30 e0       	ldi	r19, 0x00	; 0
   150aa:	42 e0       	ldi	r20, 0x02	; 2
   150ac:	50 e0       	ldi	r21, 0x00	; 0
   150ae:	60 e0       	ldi	r22, 0x00	; 0
   150b0:	70 e0       	ldi	r23, 0x00	; 0
   150b2:	8b e9       	ldi	r24, 0x9B	; 155
   150b4:	98 e1       	ldi	r25, 0x18	; 24
   150b6:	0e 94 86 92 	call	0x1250c	; 0x1250c <V2B_MSB>
   150ba:	e0 91 6b 18 	lds	r30, 0x186B	; 0x80186b <SS80p>
   150be:	f0 91 6c 18 	lds	r31, 0x186C	; 0x80186c <SS80p+0x1>
   150c2:	07 a1       	ldd	r16, Z+39	; 0x27
   150c4:	10 a5       	ldd	r17, Z+40	; 0x28
   150c6:	20 e0       	ldi	r18, 0x00	; 0
   150c8:	30 e0       	ldi	r19, 0x00	; 0
   150ca:	42 e0       	ldi	r20, 0x02	; 2
   150cc:	50 e0       	ldi	r21, 0x00	; 0
   150ce:	61 e0       	ldi	r22, 0x01	; 1
   150d0:	70 e0       	ldi	r23, 0x00	; 0
   150d2:	8b e9       	ldi	r24, 0x9B	; 155
   150d4:	98 e1       	ldi	r25, 0x18	; 24
   150d6:	0e 94 86 92 	call	0x1250c	; 0x1250c <V2B_MSB>
{
#ifdef ESP8266
    hspi_RX((uint8_t *) data,count);
#endif
#ifdef AVR
    SPI0_RX((uint8_t *)data,count);
   150da:	e0 91 6b 18 	lds	r30, 0x186B	; 0x80186b <SS80p>
   150de:	f0 91 6c 18 	lds	r31, 0x186C	; 0x80186c <SS80p+0x1>
   150e2:	01 a5       	ldd	r16, Z+41	; 0x29
   150e4:	10 e0       	ldi	r17, 0x00	; 0
   150e6:	20 e0       	ldi	r18, 0x00	; 0
   150e8:	30 e0       	ldi	r19, 0x00	; 0
   150ea:	41 e0       	ldi	r20, 0x01	; 1
   150ec:	50 e0       	ldi	r21, 0x00	; 0
   150ee:	64 e0       	ldi	r22, 0x04	; 4
   150f0:	70 e0       	ldi	r23, 0x00	; 0
   150f2:	8b e9       	ldi	r24, 0x9B	; 155
   150f4:	98 e1       	ldi	r25, 0x18	; 24
   150f6:	0e 94 86 92 	call	0x1250c	; 0x1250c <V2B_MSB>
   150fa:	8b e9       	ldi	r24, 0x9B	; 155
   150fc:	98 e1       	ldi	r25, 0x18	; 24
   150fe:	1f 91       	pop	r17
   15100:	0f 91       	pop	r16
   15102:	08 95       	ret

00015104 <SS80UnitPack>:
   15104:	0f 93       	push	r16
   15106:	1f 93       	push	r17
   15108:	23 e1       	ldi	r18, 0x13	; 19
   1510a:	30 e0       	ldi	r19, 0x00	; 0
   1510c:	fc 01       	movw	r30, r24
   1510e:	31 83       	std	Z+1, r19	; 0x01
   15110:	20 83       	st	Z, r18
   15112:	e0 91 6b 18 	lds	r30, 0x186B	; 0x80186b <SS80p>
   15116:	f0 91 6c 18 	lds	r31, 0x186C	; 0x80186c <SS80p+0x1>
   1511a:	02 a5       	ldd	r16, Z+42	; 0x2a
   1511c:	10 e0       	ldi	r17, 0x00	; 0
   1511e:	20 e0       	ldi	r18, 0x00	; 0
   15120:	30 e0       	ldi	r19, 0x00	; 0
   15122:	41 e0       	ldi	r20, 0x01	; 1
   15124:	50 e0       	ldi	r21, 0x00	; 0
   15126:	60 e0       	ldi	r22, 0x00	; 0
   15128:	70 e0       	ldi	r23, 0x00	; 0
   1512a:	88 e8       	ldi	r24, 0x88	; 136
   1512c:	98 e1       	ldi	r25, 0x18	; 24
   1512e:	0e 94 86 92 	call	0x1250c	; 0x1250c <V2B_MSB>
   15132:	e0 91 6b 18 	lds	r30, 0x186B	; 0x80186b <SS80p>
   15136:	f0 91 6c 18 	lds	r31, 0x186C	; 0x80186c <SS80p+0x1>
   1513a:	03 a5       	ldd	r16, Z+43	; 0x2b
   1513c:	14 a5       	ldd	r17, Z+44	; 0x2c
   1513e:	25 a5       	ldd	r18, Z+45	; 0x2d
   15140:	36 a5       	ldd	r19, Z+46	; 0x2e
   15142:	43 e0       	ldi	r20, 0x03	; 3
   15144:	50 e0       	ldi	r21, 0x00	; 0
   15146:	61 e0       	ldi	r22, 0x01	; 1
   15148:	70 e0       	ldi	r23, 0x00	; 0
   1514a:	88 e8       	ldi	r24, 0x88	; 136
   1514c:	98 e1       	ldi	r25, 0x18	; 24
   1514e:	0e 94 86 92 	call	0x1250c	; 0x1250c <V2B_MSB>
   15152:	e0 91 6b 18 	lds	r30, 0x186B	; 0x80186b <SS80p>
   15156:	f0 91 6c 18 	lds	r31, 0x186C	; 0x80186c <SS80p+0x1>
   1515a:	07 a5       	ldd	r16, Z+47	; 0x2f
   1515c:	10 a9       	ldd	r17, Z+48	; 0x30
   1515e:	20 e0       	ldi	r18, 0x00	; 0
   15160:	30 e0       	ldi	r19, 0x00	; 0
   15162:	42 e0       	ldi	r20, 0x02	; 2
   15164:	50 e0       	ldi	r21, 0x00	; 0
   15166:	64 e0       	ldi	r22, 0x04	; 4
   15168:	70 e0       	ldi	r23, 0x00	; 0
   1516a:	88 e8       	ldi	r24, 0x88	; 136
   1516c:	98 e1       	ldi	r25, 0x18	; 24
   1516e:	0e 94 86 92 	call	0x1250c	; 0x1250c <V2B_MSB>
   15172:	e0 91 6b 18 	lds	r30, 0x186B	; 0x80186b <SS80p>
   15176:	f0 91 6c 18 	lds	r31, 0x186C	; 0x80186c <SS80p+0x1>
   1517a:	01 a9       	ldd	r16, Z+49	; 0x31
   1517c:	10 e0       	ldi	r17, 0x00	; 0
   1517e:	20 e0       	ldi	r18, 0x00	; 0
   15180:	30 e0       	ldi	r19, 0x00	; 0
   15182:	41 e0       	ldi	r20, 0x01	; 1
   15184:	50 e0       	ldi	r21, 0x00	; 0
   15186:	66 e0       	ldi	r22, 0x06	; 6
   15188:	70 e0       	ldi	r23, 0x00	; 0
   1518a:	88 e8       	ldi	r24, 0x88	; 136
   1518c:	98 e1       	ldi	r25, 0x18	; 24
   1518e:	0e 94 86 92 	call	0x1250c	; 0x1250c <V2B_MSB>
   15192:	e0 91 6b 18 	lds	r30, 0x186B	; 0x80186b <SS80p>
   15196:	f0 91 6c 18 	lds	r31, 0x186C	; 0x80186c <SS80p+0x1>
   1519a:	02 a9       	ldd	r16, Z+50	; 0x32
   1519c:	10 e0       	ldi	r17, 0x00	; 0
   1519e:	20 e0       	ldi	r18, 0x00	; 0
   151a0:	30 e0       	ldi	r19, 0x00	; 0
   151a2:	41 e0       	ldi	r20, 0x01	; 1
   151a4:	50 e0       	ldi	r21, 0x00	; 0
   151a6:	67 e0       	ldi	r22, 0x07	; 7
   151a8:	70 e0       	ldi	r23, 0x00	; 0
   151aa:	88 e8       	ldi	r24, 0x88	; 136
   151ac:	98 e1       	ldi	r25, 0x18	; 24
   151ae:	0e 94 86 92 	call	0x1250c	; 0x1250c <V2B_MSB>
   151b2:	e0 91 6b 18 	lds	r30, 0x186B	; 0x80186b <SS80p>
   151b6:	f0 91 6c 18 	lds	r31, 0x186C	; 0x80186c <SS80p+0x1>
   151ba:	03 a9       	ldd	r16, Z+51	; 0x33
   151bc:	14 a9       	ldd	r17, Z+52	; 0x34
   151be:	20 e0       	ldi	r18, 0x00	; 0
   151c0:	30 e0       	ldi	r19, 0x00	; 0
   151c2:	42 e0       	ldi	r20, 0x02	; 2
   151c4:	50 e0       	ldi	r21, 0x00	; 0
   151c6:	68 e0       	ldi	r22, 0x08	; 8
   151c8:	70 e0       	ldi	r23, 0x00	; 0
   151ca:	88 e8       	ldi	r24, 0x88	; 136
   151cc:	98 e1       	ldi	r25, 0x18	; 24
   151ce:	0e 94 86 92 	call	0x1250c	; 0x1250c <V2B_MSB>
   151d2:	e0 91 6b 18 	lds	r30, 0x186B	; 0x80186b <SS80p>
   151d6:	f0 91 6c 18 	lds	r31, 0x186C	; 0x80186c <SS80p+0x1>
   151da:	05 a9       	ldd	r16, Z+53	; 0x35
   151dc:	16 a9       	ldd	r17, Z+54	; 0x36
   151de:	20 e0       	ldi	r18, 0x00	; 0
   151e0:	30 e0       	ldi	r19, 0x00	; 0
   151e2:	42 e0       	ldi	r20, 0x02	; 2
   151e4:	50 e0       	ldi	r21, 0x00	; 0
   151e6:	6a e0       	ldi	r22, 0x0A	; 10
   151e8:	70 e0       	ldi	r23, 0x00	; 0
   151ea:	88 e8       	ldi	r24, 0x88	; 136
   151ec:	98 e1       	ldi	r25, 0x18	; 24
   151ee:	0e 94 86 92 	call	0x1250c	; 0x1250c <V2B_MSB>
   151f2:	e0 91 6b 18 	lds	r30, 0x186B	; 0x80186b <SS80p>
   151f6:	f0 91 6c 18 	lds	r31, 0x186C	; 0x80186c <SS80p+0x1>
   151fa:	07 a9       	ldd	r16, Z+55	; 0x37
   151fc:	10 ad       	ldd	r17, Z+56	; 0x38
   151fe:	20 e0       	ldi	r18, 0x00	; 0
   15200:	30 e0       	ldi	r19, 0x00	; 0
   15202:	42 e0       	ldi	r20, 0x02	; 2
   15204:	50 e0       	ldi	r21, 0x00	; 0
   15206:	6c e0       	ldi	r22, 0x0C	; 12
   15208:	70 e0       	ldi	r23, 0x00	; 0
   1520a:	88 e8       	ldi	r24, 0x88	; 136
   1520c:	98 e1       	ldi	r25, 0x18	; 24
   1520e:	0e 94 86 92 	call	0x1250c	; 0x1250c <V2B_MSB>
   15212:	e0 91 6b 18 	lds	r30, 0x186B	; 0x80186b <SS80p>
   15216:	f0 91 6c 18 	lds	r31, 0x186C	; 0x80186c <SS80p+0x1>
   1521a:	01 ad       	ldd	r16, Z+57	; 0x39
   1521c:	12 ad       	ldd	r17, Z+58	; 0x3a
   1521e:	20 e0       	ldi	r18, 0x00	; 0
   15220:	30 e0       	ldi	r19, 0x00	; 0
   15222:	42 e0       	ldi	r20, 0x02	; 2
   15224:	50 e0       	ldi	r21, 0x00	; 0
   15226:	6e e0       	ldi	r22, 0x0E	; 14
   15228:	70 e0       	ldi	r23, 0x00	; 0
   1522a:	88 e8       	ldi	r24, 0x88	; 136
   1522c:	98 e1       	ldi	r25, 0x18	; 24
   1522e:	0e 94 86 92 	call	0x1250c	; 0x1250c <V2B_MSB>
   15232:	e0 91 6b 18 	lds	r30, 0x186B	; 0x80186b <SS80p>
   15236:	f0 91 6c 18 	lds	r31, 0x186C	; 0x80186c <SS80p+0x1>
   1523a:	03 ad       	ldd	r16, Z+59	; 0x3b
   1523c:	10 e0       	ldi	r17, 0x00	; 0
   1523e:	20 e0       	ldi	r18, 0x00	; 0
   15240:	30 e0       	ldi	r19, 0x00	; 0
   15242:	41 e0       	ldi	r20, 0x01	; 1
   15244:	50 e0       	ldi	r21, 0x00	; 0
   15246:	60 e1       	ldi	r22, 0x10	; 16
   15248:	70 e0       	ldi	r23, 0x00	; 0
   1524a:	88 e8       	ldi	r24, 0x88	; 136
   1524c:	98 e1       	ldi	r25, 0x18	; 24
   1524e:	0e 94 86 92 	call	0x1250c	; 0x1250c <V2B_MSB>
   15252:	e0 91 6b 18 	lds	r30, 0x186B	; 0x80186b <SS80p>
   15256:	f0 91 6c 18 	lds	r31, 0x186C	; 0x80186c <SS80p+0x1>
   1525a:	04 ad       	ldd	r16, Z+60	; 0x3c
   1525c:	10 e0       	ldi	r17, 0x00	; 0
   1525e:	20 e0       	ldi	r18, 0x00	; 0
   15260:	30 e0       	ldi	r19, 0x00	; 0
   15262:	41 e0       	ldi	r20, 0x01	; 1
   15264:	50 e0       	ldi	r21, 0x00	; 0
   15266:	61 e1       	ldi	r22, 0x11	; 17
   15268:	70 e0       	ldi	r23, 0x00	; 0
   1526a:	88 e8       	ldi	r24, 0x88	; 136
   1526c:	98 e1       	ldi	r25, 0x18	; 24
   1526e:	0e 94 86 92 	call	0x1250c	; 0x1250c <V2B_MSB>
   15272:	e0 91 6b 18 	lds	r30, 0x186B	; 0x80186b <SS80p>
   15276:	f0 91 6c 18 	lds	r31, 0x186C	; 0x80186c <SS80p+0x1>
   1527a:	05 ad       	ldd	r16, Z+61	; 0x3d
   1527c:	10 e0       	ldi	r17, 0x00	; 0
   1527e:	20 e0       	ldi	r18, 0x00	; 0
   15280:	30 e0       	ldi	r19, 0x00	; 0
   15282:	41 e0       	ldi	r20, 0x01	; 1
   15284:	50 e0       	ldi	r21, 0x00	; 0
   15286:	62 e1       	ldi	r22, 0x12	; 18
   15288:	70 e0       	ldi	r23, 0x00	; 0
   1528a:	88 e8       	ldi	r24, 0x88	; 136
   1528c:	98 e1       	ldi	r25, 0x18	; 24
   1528e:	0e 94 86 92 	call	0x1250c	; 0x1250c <V2B_MSB>
   15292:	88 e8       	ldi	r24, 0x88	; 136
   15294:	98 e1       	ldi	r25, 0x18	; 24
   15296:	1f 91       	pop	r17
   15298:	0f 91       	pop	r16
   1529a:	08 95       	ret

0001529c <SS80VolumePack>:
   1529c:	0f 93       	push	r16
   1529e:	1f 93       	push	r17
   152a0:	2d e0       	ldi	r18, 0x0D	; 13
   152a2:	30 e0       	ldi	r19, 0x00	; 0
   152a4:	fc 01       	movw	r30, r24
   152a6:	31 83       	std	Z+1, r19	; 0x01
   152a8:	20 83       	st	Z, r18
   152aa:	e0 91 6b 18 	lds	r30, 0x186B	; 0x80186b <SS80p>
   152ae:	f0 91 6c 18 	lds	r31, 0x186C	; 0x80186c <SS80p+0x1>
   152b2:	fe 96       	adiw	r30, 0x3e	; 62
   152b4:	00 81       	ld	r16, Z
   152b6:	11 81       	ldd	r17, Z+1	; 0x01
   152b8:	22 81       	ldd	r18, Z+2	; 0x02
   152ba:	33 81       	ldd	r19, Z+3	; 0x03
   152bc:	43 e0       	ldi	r20, 0x03	; 3
   152be:	50 e0       	ldi	r21, 0x00	; 0
   152c0:	60 e0       	ldi	r22, 0x00	; 0
   152c2:	70 e0       	ldi	r23, 0x00	; 0
   152c4:	8b e7       	ldi	r24, 0x7B	; 123
   152c6:	98 e1       	ldi	r25, 0x18	; 24
   152c8:	0e 94 86 92 	call	0x1250c	; 0x1250c <V2B_MSB>
   152cc:	e0 91 6b 18 	lds	r30, 0x186B	; 0x80186b <SS80p>
   152d0:	f0 91 6c 18 	lds	r31, 0x186C	; 0x80186c <SS80p+0x1>
   152d4:	ee 5b       	subi	r30, 0xBE	; 190
   152d6:	ff 4f       	sbci	r31, 0xFF	; 255
   152d8:	00 81       	ld	r16, Z
   152da:	10 e0       	ldi	r17, 0x00	; 0
   152dc:	20 e0       	ldi	r18, 0x00	; 0
   152de:	30 e0       	ldi	r19, 0x00	; 0
   152e0:	41 e0       	ldi	r20, 0x01	; 1
   152e2:	50 e0       	ldi	r21, 0x00	; 0
   152e4:	63 e0       	ldi	r22, 0x03	; 3
   152e6:	70 e0       	ldi	r23, 0x00	; 0
   152e8:	8b e7       	ldi	r24, 0x7B	; 123
   152ea:	98 e1       	ldi	r25, 0x18	; 24
   152ec:	0e 94 86 92 	call	0x1250c	; 0x1250c <V2B_MSB>
   152f0:	e0 91 6b 18 	lds	r30, 0x186B	; 0x80186b <SS80p>
   152f4:	f0 91 6c 18 	lds	r31, 0x186C	; 0x80186c <SS80p+0x1>
   152f8:	ed 5b       	subi	r30, 0xBD	; 189
   152fa:	ff 4f       	sbci	r31, 0xFF	; 255
   152fc:	00 81       	ld	r16, Z
   152fe:	11 81       	ldd	r17, Z+1	; 0x01
   15300:	20 e0       	ldi	r18, 0x00	; 0
   15302:	30 e0       	ldi	r19, 0x00	; 0
   15304:	42 e0       	ldi	r20, 0x02	; 2
   15306:	50 e0       	ldi	r21, 0x00	; 0
   15308:	64 e0       	ldi	r22, 0x04	; 4
   1530a:	70 e0       	ldi	r23, 0x00	; 0
   1530c:	8b e7       	ldi	r24, 0x7B	; 123
   1530e:	98 e1       	ldi	r25, 0x18	; 24
   15310:	0e 94 86 92 	call	0x1250c	; 0x1250c <V2B_MSB>
   15314:	e0 91 6b 18 	lds	r30, 0x186B	; 0x80186b <SS80p>
   15318:	f0 91 6c 18 	lds	r31, 0x186C	; 0x80186c <SS80p+0x1>
   1531c:	eb 5b       	subi	r30, 0xBB	; 187
   1531e:	ff 4f       	sbci	r31, 0xFF	; 255
   15320:	00 81       	ld	r16, Z
   15322:	11 81       	ldd	r17, Z+1	; 0x01
   15324:	22 81       	ldd	r18, Z+2	; 0x02
   15326:	33 81       	ldd	r19, Z+3	; 0x03
   15328:	46 e0       	ldi	r20, 0x06	; 6
   1532a:	50 e0       	ldi	r21, 0x00	; 0
   1532c:	66 e0       	ldi	r22, 0x06	; 6
   1532e:	70 e0       	ldi	r23, 0x00	; 0
   15330:	8b e7       	ldi	r24, 0x7B	; 123
   15332:	98 e1       	ldi	r25, 0x18	; 24
   15334:	0e 94 86 92 	call	0x1250c	; 0x1250c <V2B_MSB>
   15338:	e0 91 6b 18 	lds	r30, 0x186B	; 0x80186b <SS80p>
   1533c:	f0 91 6c 18 	lds	r31, 0x186C	; 0x80186c <SS80p+0x1>
   15340:	e7 5b       	subi	r30, 0xB7	; 183
   15342:	ff 4f       	sbci	r31, 0xFF	; 255
   15344:	00 81       	ld	r16, Z
   15346:	10 e0       	ldi	r17, 0x00	; 0
   15348:	20 e0       	ldi	r18, 0x00	; 0
   1534a:	30 e0       	ldi	r19, 0x00	; 0
   1534c:	41 e0       	ldi	r20, 0x01	; 1
   1534e:	50 e0       	ldi	r21, 0x00	; 0
   15350:	6c e0       	ldi	r22, 0x0C	; 12
   15352:	70 e0       	ldi	r23, 0x00	; 0
   15354:	8b e7       	ldi	r24, 0x7B	; 123
   15356:	98 e1       	ldi	r25, 0x18	; 24
   15358:	0e 94 86 92 	call	0x1250c	; 0x1250c <V2B_MSB>
   1535c:	8b e7       	ldi	r24, 0x7B	; 123
   1535e:	98 e1       	ldi	r25, 0x18	; 24
   15360:	1f 91       	pop	r17
   15362:	0f 91       	pop	r16
   15364:	08 95       	ret

00015366 <SS80_test_extended_status>:
   15366:	9b 01       	movw	r18, r22
   15368:	43 e0       	ldi	r20, 0x03	; 3
   1536a:	35 95       	asr	r19
   1536c:	27 95       	ror	r18
   1536e:	4a 95       	dec	r20
   15370:	e1 f7       	brne	.-8      	; 0x1536a <SS80_test_extended_status+0x4>
   15372:	82 0f       	add	r24, r18
   15374:	93 1f       	adc	r25, r19
   15376:	67 70       	andi	r22, 0x07	; 7
   15378:	77 27       	eor	r23, r23
   1537a:	20 e8       	ldi	r18, 0x80	; 128
   1537c:	30 e0       	ldi	r19, 0x00	; 0
   1537e:	02 c0       	rjmp	.+4      	; 0x15384 <SS80_test_extended_status+0x1e>
   15380:	35 95       	asr	r19
   15382:	27 95       	ror	r18
   15384:	6a 95       	dec	r22
   15386:	e2 f7       	brpl	.-8      	; 0x15380 <SS80_test_extended_status+0x1a>
   15388:	fc 01       	movw	r30, r24
   1538a:	80 81       	ld	r24, Z
   1538c:	28 23       	and	r18, r24
   1538e:	81 e0       	ldi	r24, 0x01	; 1
   15390:	90 e0       	ldi	r25, 0x00	; 0
   15392:	11 f4       	brne	.+4      	; 0x15398 <SS80_test_extended_status+0x32>
   15394:	80 e0       	ldi	r24, 0x00	; 0
   15396:	90 e0       	ldi	r25, 0x00	; 0
   15398:	08 95       	ret

0001539a <SS80_display_extended_status>:
   1539a:	6f 92       	push	r6
   1539c:	7f 92       	push	r7
   1539e:	8f 92       	push	r8
   153a0:	ef 92       	push	r14
   153a2:	ff 92       	push	r15
   153a4:	0f 93       	push	r16
   153a6:	1f 93       	push	r17
   153a8:	cf 93       	push	r28
   153aa:	df 93       	push	r29
   153ac:	fc 01       	movw	r30, r24
   153ae:	ac 01       	movw	r20, r24
   153b0:	48 5f       	subi	r20, 0xF8	; 248
   153b2:	5f 4f       	sbci	r21, 0xFF	; 255
   153b4:	20 e0       	ldi	r18, 0x00	; 0
   153b6:	30 e0       	ldi	r19, 0x00	; 0
   153b8:	a1 91       	ld	r26, Z+
   153ba:	aa 23       	and	r26, r26
   153bc:	11 f0       	breq	.+4      	; 0x153c2 <SS80_display_extended_status+0x28>
   153be:	21 e0       	ldi	r18, 0x01	; 1
   153c0:	30 e0       	ldi	r19, 0x00	; 0
   153c2:	e4 17       	cp	r30, r20
   153c4:	f5 07       	cpc	r31, r21
   153c6:	c1 f7       	brne	.-16     	; 0x153b8 <SS80_display_extended_status+0x1e>
   153c8:	23 2b       	or	r18, r19
   153ca:	a1 f1       	breq	.+104    	; 0x15434 <SS80_display_extended_status+0x9a>
   153cc:	8c 01       	movw	r16, r24
   153ce:	7f 93       	push	r23
   153d0:	6f 93       	push	r22
   153d2:	8c ea       	ldi	r24, 0xAC	; 172
   153d4:	95 e2       	ldi	r25, 0x25	; 37
   153d6:	1f 92       	push	r1
   153d8:	9f 93       	push	r25
   153da:	8f 93       	push	r24
   153dc:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   153e0:	cb ec       	ldi	r28, 0xCB	; 203
   153e2:	d1 e0       	ldi	r29, 0x01	; 1
   153e4:	0f 90       	pop	r0
   153e6:	0f 90       	pop	r0
   153e8:	0f 90       	pop	r0
   153ea:	0f 90       	pop	r0
   153ec:	0f 90       	pop	r0
   153ee:	81 ea       	ldi	r24, 0xA1	; 161
   153f0:	95 e2       	ldi	r25, 0x25	; 37
   153f2:	3c 01       	movw	r6, r24
   153f4:	e8 80       	ld	r14, Y
   153f6:	f9 80       	ldd	r15, Y+1	; 0x01
   153f8:	9f ef       	ldi	r25, 0xFF	; 255
   153fa:	e9 16       	cp	r14, r25
   153fc:	f9 06       	cpc	r15, r25
   153fe:	d1 f0       	breq	.+52     	; 0x15434 <SS80_display_extended_status+0x9a>
   15400:	b7 01       	movw	r22, r14
   15402:	c8 01       	movw	r24, r16
   15404:	b0 df       	rcall	.-160    	; 0x15366 <SS80_test_extended_status>
   15406:	89 2b       	or	r24, r25
   15408:	99 f0       	breq	.+38     	; 0x15430 <SS80_display_extended_status+0x96>
   1540a:	8b 81       	ldd	r24, Y+3	; 0x03
   1540c:	8f 93       	push	r24
   1540e:	8a 81       	ldd	r24, Y+2	; 0x02
   15410:	8f 93       	push	r24
   15412:	ff 92       	push	r15
   15414:	ef 92       	push	r14
   15416:	1f 92       	push	r1
   15418:	7f 92       	push	r7
   1541a:	6f 92       	push	r6
   1541c:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   15420:	8d b7       	in	r24, 0x3d	; 61
   15422:	9e b7       	in	r25, 0x3e	; 62
   15424:	07 96       	adiw	r24, 0x07	; 7
   15426:	0f b6       	in	r0, 0x3f	; 63
   15428:	f8 94       	cli
   1542a:	9e bf       	out	0x3e, r25	; 62
   1542c:	0f be       	out	0x3f, r0	; 63
   1542e:	8d bf       	out	0x3d, r24	; 61
   15430:	24 96       	adiw	r28, 0x04	; 4
   15432:	e0 cf       	rjmp	.-64     	; 0x153f4 <SS80_display_extended_status+0x5a>
   15434:	df 91       	pop	r29
   15436:	cf 91       	pop	r28
   15438:	1f 91       	pop	r17
   1543a:	0f 91       	pop	r16
   1543c:	ff 90       	pop	r15
   1543e:	ef 90       	pop	r14
   15440:	8f 90       	pop	r8
   15442:	7f 90       	pop	r7
   15444:	6f 90       	pop	r6
   15446:	08 95       	ret

00015448 <SS80_send_status>:
   15448:	a6 e1       	ldi	r26, 0x16	; 22
   1544a:	b0 e0       	ldi	r27, 0x00	; 0
   1544c:	ea e2       	ldi	r30, 0x2A	; 42
   1544e:	fa ea       	ldi	r31, 0xAA	; 170
   15450:	0c 94 ec e5 	jmp	0x1cbd8	; 0x1cbd8 <__prologue_saves__+0x18>
   15454:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15458:	85 ff       	sbrs	r24, 5
   1545a:	0a c0       	rjmp	.+20     	; 0x15470 <SS80_send_status+0x28>
   1545c:	8d e8       	ldi	r24, 0x8D	; 141
   1545e:	95 e2       	ldi	r25, 0x25	; 37
   15460:	1f 92       	push	r1
   15462:	9f 93       	push	r25
   15464:	8f 93       	push	r24
   15466:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1546a:	0f 90       	pop	r0
   1546c:	0f 90       	pop	r0
   1546e:	0f 90       	pop	r0
   15470:	ce 01       	movw	r24, r28
   15472:	01 96       	adiw	r24, 0x01	; 1
   15474:	7c 01       	movw	r14, r24
   15476:	84 e1       	ldi	r24, 0x14	; 20
   15478:	f7 01       	movw	r30, r14
   1547a:	11 92       	st	Z+, r1
   1547c:	8a 95       	dec	r24
   1547e:	e9 f7       	brne	.-6      	; 0x1547a <SS80_send_status+0x32>
   15480:	e0 91 69 18 	lds	r30, 0x1869	; 0x801869 <SS80s>
   15484:	f0 91 6a 18 	lds	r31, 0x186A	; 0x80186a <SS80s+0x1>
   15488:	86 81       	ldd	r24, Z+6	; 0x06
   1548a:	20 e1       	ldi	r18, 0x10	; 16
   1548c:	82 9f       	mul	r24, r18
   1548e:	c0 01       	movw	r24, r0
   15490:	11 24       	eor	r1, r1
   15492:	95 81       	ldd	r25, Z+5	; 0x05
   15494:	9f 70       	andi	r25, 0x0F	; 15
   15496:	89 2b       	or	r24, r25
   15498:	89 83       	std	Y+1, r24	; 0x01
   1549a:	8f ef       	ldi	r24, 0xFF	; 255
   1549c:	8a 83       	std	Y+2, r24	; 0x02
   1549e:	83 81       	ldd	r24, Z+3	; 0x03
   154a0:	86 ff       	sbrs	r24, 6
   154a2:	02 c0       	rjmp	.+4      	; 0x154a8 <SS80_send_status+0x60>
   154a4:	92 e0       	ldi	r25, 0x02	; 2
   154a6:	9b 83       	std	Y+3, r25	; 0x03
   154a8:	82 ff       	sbrs	r24, 2
   154aa:	03 c0       	rjmp	.+6      	; 0x154b2 <SS80_send_status+0x6a>
   154ac:	9b 81       	ldd	r25, Y+3	; 0x03
   154ae:	91 60       	ori	r25, 0x01	; 1
   154b0:	9b 83       	std	Y+3, r25	; 0x03
   154b2:	80 ff       	sbrs	r24, 0
   154b4:	02 c0       	rjmp	.+4      	; 0x154ba <SS80_send_status+0x72>
   154b6:	82 e0       	ldi	r24, 0x02	; 2
   154b8:	8d 83       	std	Y+5, r24	; 0x05
   154ba:	83 81       	ldd	r24, Z+3	; 0x03
   154bc:	81 ff       	sbrs	r24, 1
   154be:	03 c0       	rjmp	.+6      	; 0x154c6 <SS80_send_status+0x7e>
   154c0:	8d 81       	ldd	r24, Y+5	; 0x05
   154c2:	82 60       	ori	r24, 0x02	; 2
   154c4:	8d 83       	std	Y+5, r24	; 0x05
   154c6:	83 81       	ldd	r24, Z+3	; 0x03
   154c8:	83 ff       	sbrs	r24, 3
   154ca:	02 c0       	rjmp	.+4      	; 0x154d0 <SS80_send_status+0x88>
   154cc:	88 e0       	ldi	r24, 0x08	; 8
   154ce:	8f 83       	std	Y+7, r24	; 0x07
   154d0:	83 81       	ldd	r24, Z+3	; 0x03
   154d2:	94 81       	ldd	r25, Z+4	; 0x04
   154d4:	89 2b       	or	r24, r25
   154d6:	59 f4       	brne	.+22     	; 0x154ee <SS80_send_status+0xa6>
   154d8:	07 81       	ldd	r16, Z+7	; 0x07
   154da:	10 85       	ldd	r17, Z+8	; 0x08
   154dc:	21 85       	ldd	r18, Z+9	; 0x09
   154de:	32 85       	ldd	r19, Z+10	; 0x0a
   154e0:	46 e0       	ldi	r20, 0x06	; 6
   154e2:	50 e0       	ldi	r21, 0x00	; 0
   154e4:	6a e0       	ldi	r22, 0x0A	; 10
   154e6:	70 e0       	ldi	r23, 0x00	; 0
   154e8:	c7 01       	movw	r24, r14
   154ea:	0e 94 86 92 	call	0x1250c	; 0x1250c <V2B_MSB>
   154ee:	e0 91 69 18 	lds	r30, 0x1869	; 0x801869 <SS80s>
   154f2:	f0 91 6a 18 	lds	r31, 0x186A	; 0x80186a <SS80s+0x1>
   154f6:	83 81       	ldd	r24, Z+3	; 0x03
   154f8:	94 81       	ldd	r25, Z+4	; 0x04
   154fa:	89 2b       	or	r24, r25
   154fc:	11 f0       	breq	.+4      	; 0x15502 <SS80_send_status+0xba>
   154fe:	81 e0       	ldi	r24, 0x01	; 1
   15500:	82 83       	std	Z+2, r24	; 0x02
   15502:	80 e0       	ldi	r24, 0x00	; 0
   15504:	91 e0       	ldi	r25, 0x01	; 1
   15506:	9e 8b       	std	Y+22, r25	; 0x16
   15508:	8d 8b       	std	Y+21, r24	; 0x15
   1550a:	ae 01       	movw	r20, r28
   1550c:	4b 5e       	subi	r20, 0xEB	; 235
   1550e:	5f 4f       	sbci	r21, 0xFF	; 255
   15510:	64 e1       	ldi	r22, 0x14	; 20
   15512:	70 e0       	ldi	r23, 0x00	; 0
   15514:	c7 01       	movw	r24, r14
   15516:	0e 94 e1 8b 	call	0x117c2	; 0x117c2 <gpib_write_str>
   1551a:	44 97       	sbiw	r24, 0x14	; 20
   1551c:	71 f0       	breq	.+28     	; 0x1553a <SS80_send_status+0xf2>
   1551e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15522:	80 ff       	sbrs	r24, 0
   15524:	0a c0       	rjmp	.+20     	; 0x1553a <SS80_send_status+0xf2>
   15526:	82 e7       	ldi	r24, 0x72	; 114
   15528:	95 e2       	ldi	r25, 0x25	; 37
   1552a:	1f 92       	push	r1
   1552c:	9f 93       	push	r25
   1552e:	8f 93       	push	r24
   15530:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   15534:	0f 90       	pop	r0
   15536:	0f 90       	pop	r0
   15538:	0f 90       	pop	r0
   1553a:	8d 89       	ldd	r24, Y+21	; 0x15
   1553c:	9e 89       	ldd	r25, Y+22	; 0x16
   1553e:	88 27       	eor	r24, r24
   15540:	90 7d       	andi	r25, 0xD0	; 208
   15542:	66 96       	adiw	r28, 0x16	; 22
   15544:	e6 e0       	ldi	r30, 0x06	; 6
   15546:	0c 94 08 e6 	jmp	0x1cc10	; 0x1cc10 <__epilogue_restores__+0x18>

0001554a <SS80_describe>:
   1554a:	a4 e0       	ldi	r26, 0x04	; 4
   1554c:	b0 e0       	ldi	r27, 0x00	; 0
   1554e:	eb ea       	ldi	r30, 0xAB	; 171
   15550:	fa ea       	ldi	r31, 0xAA	; 170
   15552:	0c 94 f0 e5 	jmp	0x1cbe0	; 0x1cbe0 <__prologue_saves__+0x20>
   15556:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1555a:	85 ff       	sbrs	r24, 5
   1555c:	0a c0       	rjmp	.+20     	; 0x15572 <SS80_describe+0x28>
   1555e:	81 e6       	ldi	r24, 0x61	; 97
   15560:	95 e2       	ldi	r25, 0x25	; 37
   15562:	1f 92       	push	r1
   15564:	9f 93       	push	r25
   15566:	8f 93       	push	r24
   15568:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1556c:	0f 90       	pop	r0
   1556e:	0f 90       	pop	r0
   15570:	0f 90       	pop	r0
   15572:	1c 82       	std	Y+4, r1	; 0x04
   15574:	1b 82       	std	Y+3, r1	; 0x03
   15576:	ce 01       	movw	r24, r28
   15578:	01 96       	adiw	r24, 0x01	; 1
   1557a:	88 dd       	rcall	.-1264   	; 0x1508c <SS80ControllerPack>
   1557c:	69 81       	ldd	r22, Y+1	; 0x01
   1557e:	7a 81       	ldd	r23, Y+2	; 0x02
   15580:	ae 01       	movw	r20, r28
   15582:	4d 5f       	subi	r20, 0xFD	; 253
   15584:	5f 4f       	sbci	r21, 0xFF	; 255
   15586:	0e 94 e1 8b 	call	0x117c2	; 0x117c2 <gpib_write_str>
   1558a:	29 81       	ldd	r18, Y+1	; 0x01
   1558c:	3a 81       	ldd	r19, Y+2	; 0x02
   1558e:	82 17       	cp	r24, r18
   15590:	93 07       	cpc	r25, r19
   15592:	39 f0       	breq	.+14     	; 0x155a2 <SS80_describe+0x58>
   15594:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15598:	80 ff       	sbrs	r24, 0
   1559a:	3c c0       	rjmp	.+120    	; 0x15614 <SS80_describe+0xca>
   1559c:	8e e3       	ldi	r24, 0x3E	; 62
   1559e:	95 e2       	ldi	r25, 0x25	; 37
   155a0:	31 c0       	rjmp	.+98     	; 0x15604 <SS80_describe+0xba>
   155a2:	1c 82       	std	Y+4, r1	; 0x04
   155a4:	1b 82       	std	Y+3, r1	; 0x03
   155a6:	ce 01       	movw	r24, r28
   155a8:	01 96       	adiw	r24, 0x01	; 1
   155aa:	ac dd       	rcall	.-1192   	; 0x15104 <SS80UnitPack>
   155ac:	69 81       	ldd	r22, Y+1	; 0x01
   155ae:	7a 81       	ldd	r23, Y+2	; 0x02
   155b0:	ae 01       	movw	r20, r28
   155b2:	4d 5f       	subi	r20, 0xFD	; 253
   155b4:	5f 4f       	sbci	r21, 0xFF	; 255
   155b6:	0e 94 e1 8b 	call	0x117c2	; 0x117c2 <gpib_write_str>
   155ba:	29 81       	ldd	r18, Y+1	; 0x01
   155bc:	3a 81       	ldd	r19, Y+2	; 0x02
   155be:	82 17       	cp	r24, r18
   155c0:	93 07       	cpc	r25, r19
   155c2:	39 f0       	breq	.+14     	; 0x155d2 <SS80_describe+0x88>
   155c4:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   155c8:	80 ff       	sbrs	r24, 0
   155ca:	24 c0       	rjmp	.+72     	; 0x15614 <SS80_describe+0xca>
   155cc:	81 e2       	ldi	r24, 0x21	; 33
   155ce:	95 e2       	ldi	r25, 0x25	; 37
   155d0:	19 c0       	rjmp	.+50     	; 0x15604 <SS80_describe+0xba>
   155d2:	80 e0       	ldi	r24, 0x00	; 0
   155d4:	91 e0       	ldi	r25, 0x01	; 1
   155d6:	9c 83       	std	Y+4, r25	; 0x04
   155d8:	8b 83       	std	Y+3, r24	; 0x03
   155da:	ce 01       	movw	r24, r28
   155dc:	01 96       	adiw	r24, 0x01	; 1
   155de:	5e de       	rcall	.-836    	; 0x1529c <SS80VolumePack>
   155e0:	69 81       	ldd	r22, Y+1	; 0x01
   155e2:	7a 81       	ldd	r23, Y+2	; 0x02
   155e4:	ae 01       	movw	r20, r28
   155e6:	4d 5f       	subi	r20, 0xFD	; 253
   155e8:	5f 4f       	sbci	r21, 0xFF	; 255
   155ea:	0e 94 e1 8b 	call	0x117c2	; 0x117c2 <gpib_write_str>
   155ee:	29 81       	ldd	r18, Y+1	; 0x01
   155f0:	3a 81       	ldd	r19, Y+2	; 0x02
   155f2:	82 17       	cp	r24, r18
   155f4:	93 07       	cpc	r25, r19
   155f6:	99 f0       	breq	.+38     	; 0x1561e <SS80_describe+0xd4>
   155f8:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   155fc:	80 ff       	sbrs	r24, 0
   155fe:	0a c0       	rjmp	.+20     	; 0x15614 <SS80_describe+0xca>
   15600:	82 e0       	ldi	r24, 0x02	; 2
   15602:	95 e2       	ldi	r25, 0x25	; 37
   15604:	1f 92       	push	r1
   15606:	9f 93       	push	r25
   15608:	8f 93       	push	r24
   1560a:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1560e:	0f 90       	pop	r0
   15610:	0f 90       	pop	r0
   15612:	0f 90       	pop	r0
   15614:	8b 81       	ldd	r24, Y+3	; 0x03
   15616:	9c 81       	ldd	r25, Y+4	; 0x04
   15618:	88 27       	eor	r24, r24
   1561a:	90 7d       	andi	r25, 0xD0	; 208
   1561c:	02 c0       	rjmp	.+4      	; 0x15622 <SS80_describe+0xd8>
   1561e:	80 e0       	ldi	r24, 0x00	; 0
   15620:	90 e0       	ldi	r25, 0x00	; 0
   15622:	24 96       	adiw	r28, 0x04	; 4
   15624:	e2 e0       	ldi	r30, 0x02	; 2
   15626:	0c 94 0c e6 	jmp	0x1cc18	; 0x1cc18 <__epilogue_restores__+0x20>

0001562a <SS80_Check_Unit>:
   1562a:	e0 91 69 18 	lds	r30, 0x1869	; 0x801869 <SS80s>
   1562e:	f0 91 6a 18 	lds	r31, 0x186A	; 0x80186a <SS80s+0x1>
   15632:	88 23       	and	r24, r24
   15634:	d1 f0       	breq	.+52     	; 0x1566a <SS80_Check_Unit+0x40>
   15636:	8f 30       	cpi	r24, 0x0F	; 15
   15638:	c1 f0       	breq	.+48     	; 0x1566a <SS80_Check_Unit+0x40>
   1563a:	23 81       	ldd	r18, Z+3	; 0x03
   1563c:	34 81       	ldd	r19, Z+4	; 0x04
   1563e:	20 64       	ori	r18, 0x40	; 64
   15640:	34 83       	std	Z+4, r19	; 0x04
   15642:	23 83       	std	Z+3, r18	; 0x03
   15644:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <debuglevel>
   15648:	90 ff       	sbrs	r25, 0
   1564a:	10 c0       	rjmp	.+32     	; 0x1566c <SS80_Check_Unit+0x42>
   1564c:	1f 92       	push	r1
   1564e:	8f 93       	push	r24
   15650:	8a ee       	ldi	r24, 0xEA	; 234
   15652:	94 e2       	ldi	r25, 0x24	; 36
   15654:	1f 92       	push	r1
   15656:	9f 93       	push	r25
   15658:	8f 93       	push	r24
   1565a:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1565e:	0f 90       	pop	r0
   15660:	0f 90       	pop	r0
   15662:	0f 90       	pop	r0
   15664:	0f 90       	pop	r0
   15666:	0f 90       	pop	r0
   15668:	08 95       	ret
   1566a:	85 83       	std	Z+5, r24	; 0x05
   1566c:	08 95       	ret

0001566e <SS80_Check_Volume>:
   1566e:	e0 91 69 18 	lds	r30, 0x1869	; 0x801869 <SS80s>
   15672:	f0 91 6a 18 	lds	r31, 0x186A	; 0x80186a <SS80s+0x1>
   15676:	88 23       	and	r24, r24
   15678:	c1 f0       	breq	.+48     	; 0x156aa <SS80_Check_Volume+0x3c>
   1567a:	23 81       	ldd	r18, Z+3	; 0x03
   1567c:	34 81       	ldd	r19, Z+4	; 0x04
   1567e:	20 64       	ori	r18, 0x40	; 64
   15680:	34 83       	std	Z+4, r19	; 0x04
   15682:	23 83       	std	Z+3, r18	; 0x03
   15684:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <debuglevel>
   15688:	90 ff       	sbrs	r25, 0
   1568a:	10 c0       	rjmp	.+32     	; 0x156ac <SS80_Check_Volume+0x3e>
   1568c:	1f 92       	push	r1
   1568e:	8f 93       	push	r24
   15690:	80 ed       	ldi	r24, 0xD0	; 208
   15692:	94 e2       	ldi	r25, 0x24	; 36
   15694:	1f 92       	push	r1
   15696:	9f 93       	push	r25
   15698:	8f 93       	push	r24
   1569a:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1569e:	0f 90       	pop	r0
   156a0:	0f 90       	pop	r0
   156a2:	0f 90       	pop	r0
   156a4:	0f 90       	pop	r0
   156a6:	0f 90       	pop	r0
   156a8:	08 95       	ret
   156aa:	16 82       	std	Z+6, r1	; 0x06
   156ac:	08 95       	ret

000156ae <SS80_Command_State>:
   156ae:	2f 92       	push	r2
   156b0:	3f 92       	push	r3
   156b2:	4f 92       	push	r4
   156b4:	6f 92       	push	r6
   156b6:	7f 92       	push	r7
   156b8:	8f 92       	push	r8
   156ba:	af 92       	push	r10
   156bc:	bf 92       	push	r11
   156be:	cf 92       	push	r12
   156c0:	df 92       	push	r13
   156c2:	ef 92       	push	r14
   156c4:	ff 92       	push	r15
   156c6:	0f 93       	push	r16
   156c8:	1f 93       	push	r17
   156ca:	cf 93       	push	r28
   156cc:	df 93       	push	r29
   156ce:	cd b7       	in	r28, 0x3d	; 61
   156d0:	de b7       	in	r29, 0x3e	; 62
   156d2:	60 97       	sbiw	r28, 0x10	; 16
   156d4:	0f b6       	in	r0, 0x3f	; 63
   156d6:	f8 94       	cli
   156d8:	de bf       	out	0x3e, r29	; 62
   156da:	0f be       	out	0x3f, r0	; 63
   156dc:	cd bf       	out	0x3d, r28	; 61
   156de:	e0 91 6b 18 	lds	r30, 0x186B	; 0x80186b <SS80p>
   156e2:	f0 91 6c 18 	lds	r31, 0x186C	; 0x80186c <SS80p+0x1>
   156e6:	81 81       	ldd	r24, Z+1	; 0x01
   156e8:	90 e0       	ldi	r25, 0x00	; 0
   156ea:	0e 94 c2 86 	call	0x10d84	; 0x10d84 <gpib_disable_PPR>
   156ee:	80 e0       	ldi	r24, 0x00	; 0
   156f0:	91 e0       	ldi	r25, 0x01	; 1
   156f2:	9a 83       	std	Y+2, r25	; 0x02
   156f4:	89 83       	std	Y+1, r24	; 0x01
   156f6:	ae 01       	movw	r20, r28
   156f8:	4f 5f       	subi	r20, 0xFF	; 255
   156fa:	5f 4f       	sbci	r21, 0xFF	; 255
   156fc:	60 e0       	ldi	r22, 0x00	; 0
   156fe:	72 e0       	ldi	r23, 0x02	; 2
   15700:	86 ee       	ldi	r24, 0xE6	; 230
   15702:	9b e1       	ldi	r25, 0x1B	; 27
   15704:	0e 94 33 8b 	call	0x11666	; 0x11666 <gpib_read_str>
   15708:	6c 01       	movw	r12, r24
   1570a:	89 81       	ldd	r24, Y+1	; 0x01
   1570c:	9a 81       	ldd	r25, Y+2	; 0x02
   1570e:	9c 01       	movw	r18, r24
   15710:	22 27       	eor	r18, r18
   15712:	30 7d       	andi	r19, 0xD0	; 208
   15714:	23 2b       	or	r18, r19
   15716:	79 f0       	breq	.+30     	; 0x15736 <SS80_Command_State+0x88>
   15718:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1571c:	80 ff       	sbrs	r24, 0
   1571e:	21 c2       	rjmp	.+1090   	; 0x15b62 <SS80_Command_State+0x4b4>
   15720:	8a ea       	ldi	r24, 0xAA	; 170
   15722:	94 e2       	ldi	r25, 0x24	; 36
   15724:	1f 92       	push	r1
   15726:	9f 93       	push	r25
   15728:	8f 93       	push	r24
   1572a:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1572e:	0f 90       	pop	r0
   15730:	0f 90       	pop	r0
   15732:	0f 90       	pop	r0
   15734:	16 c2       	rjmp	.+1068   	; 0x15b62 <SS80_Command_State+0x4b4>
   15736:	c1 14       	cp	r12, r1
   15738:	d1 04       	cpc	r13, r1
   1573a:	09 f4       	brne	.+2      	; 0x1573e <SS80_Command_State+0x90>
   1573c:	17 c2       	rjmp	.+1070   	; 0x15b6c <SS80_Command_State+0x4be>
   1573e:	90 fd       	sbrc	r25, 0
   15740:	0e c0       	rjmp	.+28     	; 0x1575e <SS80_Command_State+0xb0>
   15742:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15746:	80 ff       	sbrs	r24, 0
   15748:	0a c0       	rjmp	.+20     	; 0x1575e <SS80_Command_State+0xb0>
   1574a:	81 e9       	ldi	r24, 0x91	; 145
   1574c:	94 e2       	ldi	r25, 0x24	; 36
   1574e:	1f 92       	push	r1
   15750:	9f 93       	push	r25
   15752:	8f 93       	push	r24
   15754:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   15758:	0f 90       	pop	r0
   1575a:	0f 90       	pop	r0
   1575c:	0f 90       	pop	r0
   1575e:	e1 2c       	mov	r14, r1
   15760:	f1 2c       	mov	r15, r1
   15762:	85 e9       	ldi	r24, 0x95	; 149
   15764:	93 e2       	ldi	r25, 0x23	; 35
   15766:	9c 01       	movw	r18, r24
   15768:	40 e0       	ldi	r20, 0x00	; 0
   1576a:	2d 83       	std	Y+5, r18	; 0x05
   1576c:	3e 83       	std	Y+6, r19	; 0x06
   1576e:	4f 83       	std	Y+7, r20	; 0x07
   15770:	8a eb       	ldi	r24, 0xBA	; 186
   15772:	93 e2       	ldi	r25, 0x23	; 35
   15774:	9c 01       	movw	r18, r24
   15776:	40 e0       	ldi	r20, 0x00	; 0
   15778:	28 87       	std	Y+8, r18	; 0x08
   1577a:	39 87       	std	Y+9, r19	; 0x09
   1577c:	4a 87       	std	Y+10, r20	; 0x0a
   1577e:	84 ed       	ldi	r24, 0xD4	; 212
   15780:	93 e2       	ldi	r25, 0x23	; 35
   15782:	9c 01       	movw	r18, r24
   15784:	40 e0       	ldi	r20, 0x00	; 0
   15786:	2b 87       	std	Y+11, r18	; 0x0b
   15788:	3c 87       	std	Y+12, r19	; 0x0c
   1578a:	4d 87       	std	Y+13, r20	; 0x0d
   1578c:	8a ee       	ldi	r24, 0xEA	; 234
   1578e:	93 e2       	ldi	r25, 0x23	; 35
   15790:	3c 01       	movw	r6, r24
   15792:	88 ef       	ldi	r24, 0xF8	; 248
   15794:	93 e2       	ldi	r25, 0x23	; 35
   15796:	9c 01       	movw	r18, r24
   15798:	40 e0       	ldi	r20, 0x00	; 0
///
/// @param[in] uart: uart number.
///
/// @return  Character count in receive buffer.
int uart_keyhit(uint8_t uart)
{
   1579a:	2e 87       	std	Y+14, r18	; 0x0e
   1579c:	3f 87       	std	Y+15, r19	; 0x0f
   1579e:	48 8b       	std	Y+16, r20	; 0x10
   157a0:	84 e1       	ldi	r24, 0x14	; 20
   157a2:	94 e2       	ldi	r25, 0x24	; 36
   157a4:	1c 01       	movw	r2, r24
   157a6:	82 e6       	ldi	r24, 0x62	; 98
   157a8:	a8 2e       	mov	r10, r24
   157aa:	84 e2       	ldi	r24, 0x24	; 36
   157ac:	b8 2e       	mov	r11, r24
   157ae:	87 01       	movw	r16, r14
   157b0:	ec 14       	cp	r14, r12
   157b2:	fd 04       	cpc	r15, r13
   157b4:	0c f0       	brlt	.+2      	; 0x157b8 <SS80_Command_State+0x10a>
   157b6:	b6 c1       	rjmp	.+876    	; 0x15b24 <SS80_Command_State+0x476>
   157b8:	0f 5f       	subi	r16, 0xFF	; 255
   157ba:	1f 4f       	sbci	r17, 0xFF	; 255
   157bc:	f7 01       	movw	r30, r14
   157be:	ea 51       	subi	r30, 0x1A	; 26
   157c0:	f4 4e       	sbci	r31, 0xE4	; 228
   157c2:	80 81       	ld	r24, Z
   157c4:	28 2f       	mov	r18, r24
   157c6:	30 e0       	ldi	r19, 0x00	; 0
   157c8:	a9 01       	movw	r20, r18
   157ca:	40 52       	subi	r20, 0x20	; 32
   157cc:	51 09       	sbc	r21, r1
   157ce:	40 31       	cpi	r20, 0x10	; 16
   157d0:	51 05       	cpc	r21, r1
   157d2:	80 f4       	brcc	.+32     	; 0x157f4 <SS80_Command_State+0x146>
   157d4:	80 52       	subi	r24, 0x20	; 32
   157d6:	29 df       	rcall	.-430    	; 0x1562a <SS80_Check_Unit>
   157d8:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   157dc:	85 ff       	sbrs	r24, 5
   157de:	a0 c1       	rjmp	.+832    	; 0x15b20 <SS80_Command_State+0x472>
   157e0:	e0 91 69 18 	lds	r30, 0x1869	; 0x801869 <SS80s>
   157e4:	f0 91 6a 18 	lds	r31, 0x186A	; 0x80186a <SS80s+0x1>
   157e8:	85 81       	ldd	r24, Z+5	; 0x05
   157ea:	1f 92       	push	r1
   157ec:	8f 93       	push	r24
   157ee:	8b e7       	ldi	r24, 0x7B	; 123
   157f0:	94 e2       	ldi	r25, 0x24	; 36
   157f2:	14 c0       	rjmp	.+40     	; 0x1581c <SS80_Command_State+0x16e>
   157f4:	a9 01       	movw	r20, r18
   157f6:	40 54       	subi	r20, 0x40	; 64
   157f8:	51 09       	sbc	r21, r1
   157fa:	40 31       	cpi	r20, 0x10	; 16
   157fc:	51 05       	cpc	r21, r1
   157fe:	c8 f4       	brcc	.+50     	; 0x15832 <SS80_Command_State+0x184>
   15800:	80 54       	subi	r24, 0x40	; 64
   15802:	35 df       	rcall	.-406    	; 0x1566e <SS80_Check_Volume>
   15804:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15808:	85 ff       	sbrs	r24, 5
   1580a:	8a c1       	rjmp	.+788    	; 0x15b20 <SS80_Command_State+0x472>
   1580c:	e0 91 69 18 	lds	r30, 0x1869	; 0x801869 <SS80s>
   15810:	f0 91 6a 18 	lds	r31, 0x186A	; 0x80186a <SS80s+0x1>
   15814:	86 81       	ldd	r24, Z+6	; 0x06
   15816:	1f 92       	push	r1
   15818:	8f 93       	push	r24
   1581a:	c5 01       	movw	r24, r10
   1581c:	1f 92       	push	r1
   1581e:	9f 93       	push	r25
   15820:	8f 93       	push	r24
   15822:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   15826:	0f 90       	pop	r0
   15828:	0f 90       	pop	r0
   1582a:	0f 90       	pop	r0
   1582c:	0f 90       	pop	r0
   1582e:	0f 90       	pop	r0
   15830:	77 c1       	rjmp	.+750    	; 0x15b20 <SS80_Command_State+0x472>
   15832:	21 15       	cp	r18, r1
   15834:	31 05       	cpc	r19, r1
    return ( uart_rx_count( uart ) );
   15836:	79 f4       	brne	.+30     	; 0x15856 <SS80_Command_State+0x1a8>
}
   15838:	e0 91 69 18 	lds	r30, 0x1869	; 0x801869 <SS80s>
   1583c:	f0 91 6a 18 	lds	r31, 0x186A	; 0x80186a <SS80s+0x1>
   15840:	81 e0       	ldi	r24, 0x01	; 1
   15842:	90 e0       	ldi	r25, 0x00	; 0
   15844:	91 83       	std	Z+1, r25	; 0x01
   15846:	80 83       	st	Z, r24
   15848:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1584c:	85 ff       	sbrs	r24, 5
   1584e:	6a c1       	rjmp	.+724    	; 0x15b24 <SS80_Command_State+0x476>
   15850:	8a e4       	ldi	r24, 0x4A	; 74
   15852:	94 e2       	ldi	r25, 0x24	; 36
   15854:	0f c0       	rjmp	.+30     	; 0x15874 <SS80_Command_State+0x1c6>
   15856:	22 30       	cpi	r18, 0x02	; 2
   15858:	31 05       	cpc	r19, r1
   1585a:	a9 f4       	brne	.+42     	; 0x15886 <SS80_Command_State+0x1d8>
   1585c:	e0 91 69 18 	lds	r30, 0x1869	; 0x801869 <SS80s>
   15860:	f0 91 6a 18 	lds	r31, 0x186A	; 0x80186a <SS80s+0x1>
   15864:	31 83       	std	Z+1, r19	; 0x01
   15866:	20 83       	st	Z, r18
   15868:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1586c:	85 ff       	sbrs	r24, 5
   1586e:	5a c1       	rjmp	.+692    	; 0x15b24 <SS80_Command_State+0x476>
   15870:	81 e3       	ldi	r24, 0x31	; 49
   15872:	94 e2       	ldi	r25, 0x24	; 36
   15874:	1f 92       	push	r1
   15876:	9f 93       	push	r25
   15878:	8f 93       	push	r24
   1587a:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1587e:	0f 90       	pop	r0
   15880:	0f 90       	pop	r0
   15882:	0f 90       	pop	r0
   15884:	4f c1       	rjmp	.+670    	; 0x15b24 <SS80_Command_State+0x476>
   15886:	20 31       	cpi	r18, 0x10	; 16
   15888:	31 05       	cpc	r19, r1
   1588a:	a1 f5       	brne	.+104    	; 0x158f4 <SS80_Command_State+0x246>
   1588c:	80 91 69 18 	lds	r24, 0x1869	; 0x801869 <SS80s>
   15890:	90 91 6a 18 	lds	r25, 0x186A	; 0x80186a <SS80s+0x1>
   15894:	9c 83       	std	Y+4, r25	; 0x04
   15896:	8b 83       	std	Y+3, r24	; 0x03
   15898:	46 e0       	ldi	r20, 0x06	; 6
   1589a:	50 e0       	ldi	r21, 0x00	; 0
   1589c:	b8 01       	movw	r22, r16
   1589e:	86 ee       	ldi	r24, 0xE6	; 230
   158a0:	9b e1       	ldi	r25, 0x1B	; 27
   158a2:	0e 94 af 92 	call	0x1255e	; 0x1255e <B2V_MSB>
   158a6:	eb 81       	ldd	r30, Y+3	; 0x03
   158a8:	fc 81       	ldd	r31, Y+4	; 0x04
   158aa:	67 83       	std	Z+7, r22	; 0x07
   158ac:	70 87       	std	Z+8, r23	; 0x08
   158ae:	81 87       	std	Z+9, r24	; 0x09
   158b0:	92 87       	std	Z+10, r25	; 0x0a
   158b2:	87 01       	movw	r16, r14
   158b4:	09 5f       	subi	r16, 0xF9	; 249
   158b6:	1f 4f       	sbci	r17, 0xFF	; 255
   158b8:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   158bc:	85 ff       	sbrs	r24, 5
   158be:	30 c1       	rjmp	.+608    	; 0x15b20 <SS80_Command_State+0x472>
   158c0:	e0 91 69 18 	lds	r30, 0x1869	; 0x801869 <SS80s>
   158c4:	f0 91 6a 18 	lds	r31, 0x186A	; 0x80186a <SS80s+0x1>
   158c8:	a0 91 6b 18 	lds	r26, 0x186B	; 0x80186b <SS80p>
   158cc:	b0 91 6c 18 	lds	r27, 0x186C	; 0x80186c <SS80p+0x1>
   158d0:	9f 96       	adiw	r26, 0x2f	; 47
   158d2:	0d 90       	ld	r0, X+
   158d4:	bc 91       	ld	r27, X
   158d6:	a0 2d       	mov	r26, r0
   158d8:	27 81       	ldd	r18, Z+7	; 0x07
   158da:	30 85       	ldd	r19, Z+8	; 0x08
   158dc:	41 85       	ldd	r20, Z+9	; 0x09
   158de:	52 85       	ldd	r21, Z+10	; 0x0a
   158e0:	0e 94 c0 e5 	call	0x1cb80	; 0x1cb80 <__muluhisi3>
   158e4:	9f 93       	push	r25
   158e6:	8f 93       	push	r24
   158e8:	7f 93       	push	r23
   158ea:	6f 93       	push	r22
   158ec:	1f 92       	push	r1
   158ee:	3f 92       	push	r3
   158f0:	2f 92       	push	r2
   158f2:	2e c0       	rjmp	.+92     	; 0x15950 <SS80_Command_State+0x2a2>
   158f4:	28 31       	cpi	r18, 0x18	; 24
   158f6:	31 05       	cpc	r19, r1
   158f8:	99 f5       	brne	.+102    	; 0x15960 <SS80_Command_State+0x2b2>
   158fa:	80 91 69 18 	lds	r24, 0x1869	; 0x801869 <SS80s>
   158fe:	90 91 6a 18 	lds	r25, 0x186A	; 0x80186a <SS80s+0x1>
   15902:	9c 83       	std	Y+4, r25	; 0x04
   15904:	8b 83       	std	Y+3, r24	; 0x03
   15906:	44 e0       	ldi	r20, 0x04	; 4
   15908:	50 e0       	ldi	r21, 0x00	; 0
   1590a:	b8 01       	movw	r22, r16
   1590c:	86 ee       	ldi	r24, 0xE6	; 230
   1590e:	9b e1       	ldi	r25, 0x1B	; 27
   15910:	0e 94 af 92 	call	0x1255e	; 0x1255e <B2V_MSB>
   15914:	eb 81       	ldd	r30, Y+3	; 0x03
   15916:	fc 81       	ldd	r31, Y+4	; 0x04
   15918:	63 87       	std	Z+11, r22	; 0x0b
   1591a:	74 87       	std	Z+12, r23	; 0x0c
   1591c:	85 87       	std	Z+13, r24	; 0x0d
   1591e:	96 87       	std	Z+14, r25	; 0x0e
   15920:	87 01       	movw	r16, r14
   15922:	0b 5f       	subi	r16, 0xFB	; 251
   15924:	1f 4f       	sbci	r17, 0xFF	; 255
   15926:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1592a:	85 ff       	sbrs	r24, 5
   1592c:	f9 c0       	rjmp	.+498    	; 0x15b20 <SS80_Command_State+0x472>
   1592e:	e0 91 69 18 	lds	r30, 0x1869	; 0x801869 <SS80s>
   15932:	f0 91 6a 18 	lds	r31, 0x186A	; 0x80186a <SS80s+0x1>
   15936:	86 85       	ldd	r24, Z+14	; 0x0e
   15938:	8f 93       	push	r24
   1593a:	85 85       	ldd	r24, Z+13	; 0x0d
   1593c:	8f 93       	push	r24
   1593e:	84 85       	ldd	r24, Z+12	; 0x0c
   15940:	8f 93       	push	r24
   15942:	83 85       	ldd	r24, Z+11	; 0x0b
   15944:	8f 93       	push	r24
   15946:	1f 92       	push	r1
   15948:	ff 85       	ldd	r31, Y+15	; 0x0f
   1594a:	ff 93       	push	r31
   1594c:	2e 85       	ldd	r18, Y+14	; 0x0e
   1594e:	2f 93       	push	r18
   15950:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   15954:	0f b6       	in	r0, 0x3f	; 63
   15956:	f8 94       	cli
   15958:	de bf       	out	0x3e, r29	; 62
   1595a:	0f be       	out	0x3f, r0	; 63
   1595c:	cd bf       	out	0x3d, r28	; 61
   1595e:	e0 c0       	rjmp	.+448    	; 0x15b20 <SS80_Command_State+0x472>
   15960:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15964:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   15968:	24 33       	cpi	r18, 0x34	; 52
   1596a:	31 05       	cpc	r19, r1
   1596c:	31 f4       	brne	.+12     	; 0x1597a <SS80_Command_State+0x2cc>
   1596e:	85 ff       	sbrs	r24, 5
   15970:	d7 c0       	rjmp	.+430    	; 0x15b20 <SS80_Command_State+0x472>
   15972:	1f 92       	push	r1
   15974:	7f 92       	push	r7
   15976:	6f 92       	push	r6
   15978:	2c c0       	rjmp	.+88     	; 0x159d2 <SS80_Command_State+0x324>
   1597a:	29 33       	cpi	r18, 0x39	; 57
   1597c:	31 05       	cpc	r19, r1
   1597e:	59 f4       	brne	.+22     	; 0x15996 <SS80_Command_State+0x2e8>
   15980:	87 01       	movw	r16, r14
   15982:	0d 5f       	subi	r16, 0xFD	; 253
   15984:	1f 4f       	sbci	r17, 0xFF	; 255
   15986:	85 ff       	sbrs	r24, 5
   15988:	cb c0       	rjmp	.+406    	; 0x15b20 <SS80_Command_State+0x472>
   1598a:	1f 92       	push	r1
   1598c:	9c 85       	ldd	r25, Y+12	; 0x0c
   1598e:	9f 93       	push	r25
   15990:	eb 85       	ldd	r30, Y+11	; 0x0b
   15992:	ef 93       	push	r30
   15994:	1e c0       	rjmp	.+60     	; 0x159d2 <SS80_Command_State+0x324>
   15996:	2b 33       	cpi	r18, 0x3B	; 59
   15998:	31 05       	cpc	r19, r1
   1599a:	59 f4       	brne	.+22     	; 0x159b2 <SS80_Command_State+0x304>
   1599c:	87 01       	movw	r16, r14
   1599e:	0e 5f       	subi	r16, 0xFE	; 254
   159a0:	1f 4f       	sbci	r17, 0xFF	; 255
   159a2:	85 ff       	sbrs	r24, 5
   159a4:	bd c0       	rjmp	.+378    	; 0x15b20 <SS80_Command_State+0x472>
   159a6:	1f 92       	push	r1
   159a8:	f9 85       	ldd	r31, Y+9	; 0x09
   159aa:	ff 93       	push	r31
   159ac:	28 85       	ldd	r18, Y+8	; 0x08
   159ae:	2f 93       	push	r18
   159b0:	10 c0       	rjmp	.+32     	; 0x159d2 <SS80_Command_State+0x324>
   159b2:	28 34       	cpi	r18, 0x48	; 72
   159b4:	31 05       	cpc	r19, r1
   159b6:	99 f4       	brne	.+38     	; 0x159de <SS80_Command_State+0x330>
   159b8:	87 01       	movw	r16, r14
   159ba:	0e 5f       	subi	r16, 0xFE	; 254
   159bc:	1f 4f       	sbci	r17, 0xFF	; 255
   159be:	80 73       	andi	r24, 0x30	; 48
   159c0:	99 27       	eor	r25, r25
   159c2:	89 2b       	or	r24, r25
   159c4:	09 f4       	brne	.+2      	; 0x159c8 <SS80_Command_State+0x31a>
   159c6:	ac c0       	rjmp	.+344    	; 0x15b20 <SS80_Command_State+0x472>
   159c8:	1f 92       	push	r1
   159ca:	3e 81       	ldd	r19, Y+6	; 0x06
   159cc:	3f 93       	push	r19
   159ce:	4d 81       	ldd	r20, Y+5	; 0x05
   159d0:	4f 93       	push	r20
   159d2:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   159d6:	0f 90       	pop	r0
   159d8:	0f 90       	pop	r0
   159da:	0f 90       	pop	r0
   159dc:	a1 c0       	rjmp	.+322    	; 0x15b20 <SS80_Command_State+0x472>
   159de:	24 30       	cpi	r18, 0x04	; 4
   159e0:	31 05       	cpc	r19, r1
   159e2:	41 f4       	brne	.+16     	; 0x159f4 <SS80_Command_State+0x346>
   159e4:	80 73       	andi	r24, 0x30	; 48
   159e6:	99 27       	eor	r25, r25
   159e8:	89 2b       	or	r24, r25
   159ea:	09 f4       	brne	.+2      	; 0x159ee <SS80_Command_State+0x340>
   159ec:	9b c0       	rjmp	.+310    	; 0x15b24 <SS80_Command_State+0x476>
   159ee:	84 e7       	ldi	r24, 0x74	; 116
   159f0:	93 e2       	ldi	r25, 0x23	; 35
   159f2:	40 cf       	rjmp	.-384    	; 0x15874 <SS80_Command_State+0x1c6>
   159f4:	2e 30       	cpi	r18, 0x0E	; 14
   159f6:	31 05       	cpc	r19, r1
   159f8:	29 f4       	brne	.+10     	; 0x15a04 <SS80_Command_State+0x356>
   159fa:	85 ff       	sbrs	r24, 5
   159fc:	93 c0       	rjmp	.+294    	; 0x15b24 <SS80_Command_State+0x476>
   159fe:	8e e5       	ldi	r24, 0x5E	; 94
   15a00:	93 e2       	ldi	r25, 0x23	; 35
   15a02:	38 cf       	rjmp	.-400    	; 0x15874 <SS80_Command_State+0x1c6>
   15a04:	2f 30       	cpi	r18, 0x0F	; 15
   15a06:	31 05       	cpc	r19, r1
   15a08:	29 f4       	brne	.+10     	; 0x15a14 <SS80_Command_State+0x366>
   15a0a:	85 ff       	sbrs	r24, 5
   15a0c:	8b c0       	rjmp	.+278    	; 0x15b24 <SS80_Command_State+0x476>
   15a0e:	81 e4       	ldi	r24, 0x41	; 65
   15a10:	93 e2       	ldi	r25, 0x23	; 35
   15a12:	30 cf       	rjmp	.-416    	; 0x15874 <SS80_Command_State+0x1c6>
   15a14:	21 33       	cpi	r18, 0x31	; 49
   15a16:	31 05       	cpc	r19, r1
   15a18:	41 f4       	brne	.+16     	; 0x15a2a <SS80_Command_State+0x37c>
   15a1a:	87 01       	movw	r16, r14
   15a1c:	0d 5f       	subi	r16, 0xFD	; 253
   15a1e:	1f 4f       	sbci	r17, 0xFF	; 255
   15a20:	85 ff       	sbrs	r24, 5
   15a22:	80 c0       	rjmp	.+256    	; 0x15b24 <SS80_Command_State+0x476>
   15a24:	85 e2       	ldi	r24, 0x25	; 37
   15a26:	93 e2       	ldi	r25, 0x23	; 35
   15a28:	25 cf       	rjmp	.-438    	; 0x15874 <SS80_Command_State+0x1c6>
   15a2a:	25 33       	cpi	r18, 0x35	; 53
   15a2c:	31 05       	cpc	r19, r1
   15a2e:	69 f4       	brne	.+26     	; 0x15a4a <SS80_Command_State+0x39c>
   15a30:	e0 91 69 18 	lds	r30, 0x1869	; 0x801869 <SS80s>
   15a34:	f0 91 6a 18 	lds	r31, 0x186A	; 0x80186a <SS80s+0x1>
   15a38:	24 e0       	ldi	r18, 0x04	; 4
   15a3a:	30 e0       	ldi	r19, 0x00	; 0
   15a3c:	31 83       	std	Z+1, r19	; 0x01
   15a3e:	20 83       	st	Z, r18
   15a40:	85 ff       	sbrs	r24, 5
   15a42:	70 c0       	rjmp	.+224    	; 0x15b24 <SS80_Command_State+0x476>
   15a44:	84 e1       	ldi	r24, 0x14	; 20
   15a46:	93 e2       	ldi	r25, 0x23	; 35
   15a48:	15 cf       	rjmp	.-470    	; 0x15874 <SS80_Command_State+0x1c6>
   15a4a:	27 33       	cpi	r18, 0x37	; 55
   15a4c:	31 05       	cpc	r19, r1
   15a4e:	59 f4       	brne	.+22     	; 0x15a66 <SS80_Command_State+0x3b8>
   15a50:	87 01       	movw	r16, r14
   15a52:	0d 5f       	subi	r16, 0xFD	; 253
   15a54:	1f 4f       	sbci	r17, 0xFF	; 255
   15a56:	80 73       	andi	r24, 0x30	; 48
   15a58:	99 27       	eor	r25, r25
   15a5a:	89 2b       	or	r24, r25
   15a5c:	09 f4       	brne	.+2      	; 0x15a60 <SS80_Command_State+0x3b2>
   15a5e:	62 c0       	rjmp	.+196    	; 0x15b24 <SS80_Command_State+0x476>
   15a60:	86 ef       	ldi	r24, 0xF6	; 246
   15a62:	92 e2       	ldi	r25, 0x22	; 34
   15a64:	07 cf       	rjmp	.-498    	; 0x15874 <SS80_Command_State+0x1c6>
   15a66:	2e 33       	cpi	r18, 0x3E	; 62
   15a68:	31 05       	cpc	r19, r1
   15a6a:	c1 f4       	brne	.+48     	; 0x15a9c <SS80_Command_State+0x3ee>
   15a6c:	80 73       	andi	r24, 0x30	; 48
   15a6e:	99 27       	eor	r25, r25
   15a70:	89 2b       	or	r24, r25
   15a72:	81 f0       	breq	.+32     	; 0x15a94 <SS80_Command_State+0x3e6>
   15a74:	87 ed       	ldi	r24, 0xD7	; 215
   15a76:	92 e2       	ldi	r25, 0x22	; 34
   15a78:	1f 92       	push	r1
   15a7a:	9f 93       	push	r25
   15a7c:	8f 93       	push	r24
   15a7e:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   15a82:	64 ec       	ldi	r22, 0xC4	; 196
   15a84:	7f e0       	ldi	r23, 0x0F	; 15
   15a86:	c8 01       	movw	r24, r16
   15a88:	8a 51       	subi	r24, 0x1A	; 26
   15a8a:	94 4e       	sbci	r25, 0xE4	; 228
   15a8c:	86 dc       	rcall	.-1780   	; 0x1539a <SS80_display_extended_status>
   15a8e:	0f 90       	pop	r0
   15a90:	0f 90       	pop	r0
   15a92:	0f 90       	pop	r0
   15a94:	87 01       	movw	r16, r14
   15a96:	07 5f       	subi	r16, 0xF7	; 247
   15a98:	1f 4f       	sbci	r17, 0xFF	; 255
   15a9a:	44 c0       	rjmp	.+136    	; 0x15b24 <SS80_Command_State+0x476>
   15a9c:	2c 34       	cpi	r18, 0x4C	; 76
   15a9e:	31 05       	cpc	r19, r1
   15aa0:	39 f4       	brne	.+14     	; 0x15ab0 <SS80_Command_State+0x402>
   15aa2:	80 73       	andi	r24, 0x30	; 48
   15aa4:	99 27       	eor	r25, r25
   15aa6:	89 2b       	or	r24, r25
   15aa8:	e9 f1       	breq	.+122    	; 0x15b24 <SS80_Command_State+0x476>
   15aaa:	8c eb       	ldi	r24, 0xBC	; 188
   15aac:	92 e2       	ldi	r25, 0x22	; 34
   15aae:	e2 ce       	rjmp	.-572    	; 0x15874 <SS80_Command_State+0x1c6>
   15ab0:	2d 34       	cpi	r18, 0x4D	; 77
   15ab2:	31 05       	cpc	r19, r1
   15ab4:	39 f4       	brne	.+14     	; 0x15ac4 <SS80_Command_State+0x416>
   15ab6:	80 73       	andi	r24, 0x30	; 48
   15ab8:	99 27       	eor	r25, r25
   15aba:	89 2b       	or	r24, r25
   15abc:	99 f1       	breq	.+102    	; 0x15b24 <SS80_Command_State+0x476>
   15abe:	83 ea       	ldi	r24, 0xA3	; 163
   15ac0:	92 e2       	ldi	r25, 0x22	; 34
   15ac2:	d8 ce       	rjmp	.-592    	; 0x15874 <SS80_Command_State+0x1c6>
   15ac4:	2d 30       	cpi	r18, 0x0D	; 13
   15ac6:	31 05       	cpc	r19, r1
   15ac8:	69 f4       	brne	.+26     	; 0x15ae4 <SS80_Command_State+0x436>
   15aca:	e0 91 69 18 	lds	r30, 0x1869	; 0x801869 <SS80s>
   15ace:	f0 91 6a 18 	lds	r31, 0x186A	; 0x80186a <SS80s+0x1>
   15ad2:	23 e0       	ldi	r18, 0x03	; 3
   15ad4:	30 e0       	ldi	r19, 0x00	; 0
   15ad6:	31 83       	std	Z+1, r19	; 0x01
   15ad8:	20 83       	st	Z, r18
   15ada:	85 ff       	sbrs	r24, 5
   15adc:	23 c0       	rjmp	.+70     	; 0x15b24 <SS80_Command_State+0x476>
   15ade:	8c e8       	ldi	r24, 0x8C	; 140
   15ae0:	92 e2       	ldi	r25, 0x22	; 34
   15ae2:	c8 ce       	rjmp	.-624    	; 0x15874 <SS80_Command_State+0x1c6>
   15ae4:	23 33       	cpi	r18, 0x33	; 51
   15ae6:	31 05       	cpc	r19, r1
   15ae8:	51 f4       	brne	.+20     	; 0x15afe <SS80_Command_State+0x450>
   15aea:	87 01       	movw	r16, r14
   15aec:	0c 5f       	subi	r16, 0xFC	; 252
   15aee:	1f 4f       	sbci	r17, 0xFF	; 255
   15af0:	80 73       	andi	r24, 0x30	; 48
   15af2:	99 27       	eor	r25, r25
   15af4:	89 2b       	or	r24, r25
   15af6:	b1 f0       	breq	.+44     	; 0x15b24 <SS80_Command_State+0x476>
   15af8:	8b e6       	ldi	r24, 0x6B	; 107
   15afa:	92 e2       	ldi	r25, 0x22	; 34
   15afc:	bb ce       	rjmp	.-650    	; 0x15874 <SS80_Command_State+0x1c6>
   15afe:	80 ff       	sbrs	r24, 0
   15b00:	28 c0       	rjmp	.+80     	; 0x15b52 <SS80_Command_State+0x4a4>
   15b02:	3f 93       	push	r19
   15b04:	2f 93       	push	r18
   15b06:	8b e4       	ldi	r24, 0x4B	; 75
   15b08:	92 e2       	ldi	r25, 0x22	; 34
   15b0a:	1f 92       	push	r1
   15b0c:	9f 93       	push	r25
   15b0e:	8f 93       	push	r24
   15b10:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   15b14:	0f 90       	pop	r0
   15b16:	0f 90       	pop	r0
   15b18:	0f 90       	pop	r0
   15b1a:	0f 90       	pop	r0
   15b1c:	0f 90       	pop	r0
   15b1e:	02 c0       	rjmp	.+4      	; 0x15b24 <SS80_Command_State+0x476>
   15b20:	78 01       	movw	r14, r16
   15b22:	45 ce       	rjmp	.-886    	; 0x157ae <SS80_Command_State+0x100>
   15b24:	0c 15       	cp	r16, r12
   15b26:	1d 05       	cpc	r17, r13
   15b28:	a1 f0       	breq	.+40     	; 0x15b52 <SS80_Command_State+0x4a4>
   15b2a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15b2e:	80 ff       	sbrs	r24, 0
   15b30:	10 c0       	rjmp	.+32     	; 0x15b52 <SS80_Command_State+0x4a4>
   15b32:	df 92       	push	r13
   15b34:	cf 92       	push	r12
   15b36:	1f 93       	push	r17
   15b38:	0f 93       	push	r16
   15b3a:	83 e1       	ldi	r24, 0x13	; 19
   15b3c:	92 e2       	ldi	r25, 0x22	; 34
   15b3e:	1f 92       	push	r1
   15b40:	9f 93       	push	r25
   15b42:	8f 93       	push	r24
   15b44:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   15b48:	0f b6       	in	r0, 0x3f	; 63
   15b4a:	f8 94       	cli
   15b4c:	de bf       	out	0x3e, r29	; 62
   15b4e:	0f be       	out	0x3f, r0	; 63
   15b50:	cd bf       	out	0x3d, r28	; 61
   15b52:	e0 91 6b 18 	lds	r30, 0x186B	; 0x80186b <SS80p>
   15b56:	f0 91 6c 18 	lds	r31, 0x186C	; 0x80186c <SS80p+0x1>
   15b5a:	81 81       	ldd	r24, Z+1	; 0x01
   15b5c:	90 e0       	ldi	r25, 0x00	; 0
   15b5e:	0e 94 91 86 	call	0x10d22	; 0x10d22 <gpib_enable_PPR>
   15b62:	89 81       	ldd	r24, Y+1	; 0x01
   15b64:	9a 81       	ldd	r25, Y+2	; 0x02
   15b66:	88 27       	eor	r24, r24
   15b68:	90 7d       	andi	r25, 0xD0	; 208
   15b6a:	02 c0       	rjmp	.+4      	; 0x15b70 <SS80_Command_State+0x4c2>
   15b6c:	80 e0       	ldi	r24, 0x00	; 0
   15b6e:	90 e0       	ldi	r25, 0x00	; 0
   15b70:	60 96       	adiw	r28, 0x10	; 16
   15b72:	0f b6       	in	r0, 0x3f	; 63
   15b74:	f8 94       	cli
   15b76:	de bf       	out	0x3e, r29	; 62
   15b78:	0f be       	out	0x3f, r0	; 63
   15b7a:	cd bf       	out	0x3d, r28	; 61
   15b7c:	df 91       	pop	r29
   15b7e:	cf 91       	pop	r28
   15b80:	1f 91       	pop	r17
   15b82:	0f 91       	pop	r16
   15b84:	ff 90       	pop	r15
   15b86:	ef 90       	pop	r14
   15b88:	df 90       	pop	r13
   15b8a:	cf 90       	pop	r12
   15b8c:	bf 90       	pop	r11
   15b8e:	af 90       	pop	r10
   15b90:	8f 90       	pop	r8
   15b92:	7f 90       	pop	r7
   15b94:	6f 90       	pop	r6
   15b96:	4f 90       	pop	r4
   15b98:	3f 90       	pop	r3
   15b9a:	2f 90       	pop	r2
   15b9c:	08 95       	ret

00015b9e <SS80_cmd_seek>:
   15b9e:	a0 e0       	ldi	r26, 0x00	; 0
   15ba0:	b0 e0       	ldi	r27, 0x00	; 0
   15ba2:	e5 ed       	ldi	r30, 0xD5	; 213
   15ba4:	fd ea       	ldi	r31, 0xAD	; 173
   15ba6:	0c 94 e2 e5 	jmp	0x1cbc4	; 0x1cbc4 <__prologue_saves__+0x4>
   15baa:	c0 91 69 18 	lds	r28, 0x1869	; 0x801869 <SS80s>
   15bae:	d0 91 6a 18 	lds	r29, 0x186A	; 0x80186a <SS80s+0x1>
   15bb2:	8f 80       	ldd	r8, Y+7	; 0x07
   15bb4:	98 84       	ldd	r9, Y+8	; 0x08
   15bb6:	a9 84       	ldd	r10, Y+9	; 0x09
   15bb8:	ba 84       	ldd	r11, Y+10	; 0x0a
   15bba:	00 91 6b 18 	lds	r16, 0x186B	; 0x80186b <SS80p>
   15bbe:	10 91 6c 18 	lds	r17, 0x186C	; 0x80186c <SS80p+0x1>
   15bc2:	f8 01       	movw	r30, r16
   15bc4:	c7 a4       	ldd	r12, Z+47	; 0x2f
   15bc6:	d0 a8       	ldd	r13, Z+48	; 0x30
   15bc8:	e1 2c       	mov	r14, r1
   15bca:	f1 2c       	mov	r15, r1
   15bcc:	6b 85       	ldd	r22, Y+11	; 0x0b
   15bce:	7c 85       	ldd	r23, Y+12	; 0x0c
   15bd0:	8d 85       	ldd	r24, Y+13	; 0x0d
   15bd2:	9e 85       	ldd	r25, Y+14	; 0x0e
   15bd4:	a7 01       	movw	r20, r14
   15bd6:	96 01       	movw	r18, r12
   15bd8:	0e 94 5e e5 	call	0x1cabc	; 0x1cabc <__udivmodsi4>
   15bdc:	da 01       	movw	r26, r20
   15bde:	c9 01       	movw	r24, r18
   15be0:	88 0d       	add	r24, r8
   15be2:	99 1d       	adc	r25, r9
   15be4:	aa 1d       	adc	r26, r10
   15be6:	bb 1d       	adc	r27, r11
   15be8:	f8 01       	movw	r30, r16
   15bea:	eb 5b       	subi	r30, 0xBB	; 187
   15bec:	ff 4f       	sbci	r31, 0xFF	; 255
   15bee:	40 80       	ld	r4, Z
   15bf0:	51 80       	ldd	r5, Z+1	; 0x01
   15bf2:	62 80       	ldd	r6, Z+2	; 0x02
   15bf4:	73 80       	ldd	r7, Z+3	; 0x03
   15bf6:	40 91 bd 01 	lds	r20, 0x01BD	; 0x8001bd <debuglevel>
   15bfa:	50 91 be 01 	lds	r21, 0x01BE	; 0x8001be <debuglevel+0x1>
   15bfe:	48 16       	cp	r4, r24
   15c00:	59 06       	cpc	r5, r25
   15c02:	6a 06       	cpc	r6, r26
   15c04:	7b 06       	cpc	r7, r27
   15c06:	20 f5       	brcc	.+72     	; 0x15c50 <SS80_cmd_seek+0xb2>
   15c08:	81 e0       	ldi	r24, 0x01	; 1
   15c0a:	8a 83       	std	Y+2, r24	; 0x02
   15c0c:	8b 81       	ldd	r24, Y+3	; 0x03
   15c0e:	9c 81       	ldd	r25, Y+4	; 0x04
   15c10:	84 60       	ori	r24, 0x04	; 4
   15c12:	9c 83       	std	Y+4, r25	; 0x04
   15c14:	8b 83       	std	Y+3, r24	; 0x03
   15c16:	40 ff       	sbrs	r20, 0
   15c18:	3c c0       	rjmp	.+120    	; 0x15c92 <SS80_cmd_seek+0xf4>
   15c1a:	f8 01       	movw	r30, r16
   15c1c:	a7 a5       	ldd	r26, Z+47	; 0x2f
   15c1e:	b0 a9       	ldd	r27, Z+48	; 0x30
   15c20:	a5 01       	movw	r20, r10
   15c22:	94 01       	movw	r18, r8
   15c24:	0e 94 c0 e5 	call	0x1cb80	; 0x1cb80 <__muluhisi3>
   15c28:	9f 93       	push	r25
   15c2a:	8f 93       	push	r24
   15c2c:	7f 93       	push	r23
   15c2e:	6f 93       	push	r22
   15c30:	80 ed       	ldi	r24, 0xD0	; 208
   15c32:	90 e2       	ldi	r25, 0x20	; 32
   15c34:	1f 92       	push	r1
   15c36:	9f 93       	push	r25
   15c38:	8f 93       	push	r24
   15c3a:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   15c3e:	8d b7       	in	r24, 0x3d	; 61
   15c40:	9e b7       	in	r25, 0x3e	; 62
   15c42:	07 96       	adiw	r24, 0x07	; 7
   15c44:	0f b6       	in	r0, 0x3f	; 63
   15c46:	f8 94       	cli
   15c48:	9e bf       	out	0x3e, r25	; 62
   15c4a:	0f be       	out	0x3f, r0	; 63
   15c4c:	8d bf       	out	0x3d, r24	; 61
   15c4e:	21 c0       	rjmp	.+66     	; 0x15c92 <SS80_cmd_seek+0xf4>
   15c50:	ca 01       	movw	r24, r20
   15c52:	80 72       	andi	r24, 0x20	; 32
   15c54:	99 27       	eor	r25, r25
   15c56:	45 ff       	sbrs	r20, 5
   15c58:	1e c0       	rjmp	.+60     	; 0x15c96 <SS80_cmd_seek+0xf8>
   15c5a:	a5 01       	movw	r20, r10
   15c5c:	94 01       	movw	r18, r8
   15c5e:	c7 01       	movw	r24, r14
   15c60:	b6 01       	movw	r22, r12
   15c62:	0e 94 1c e5 	call	0x1ca38	; 0x1ca38 <__mulsi3>
   15c66:	9f 93       	push	r25
   15c68:	8f 93       	push	r24
   15c6a:	7f 93       	push	r23
   15c6c:	6f 93       	push	r22
   15c6e:	8c eb       	ldi	r24, 0xBC	; 188
   15c70:	90 e2       	ldi	r25, 0x20	; 32
   15c72:	1f 92       	push	r1
   15c74:	9f 93       	push	r25
   15c76:	8f 93       	push	r24
   15c78:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   15c7c:	ed b7       	in	r30, 0x3d	; 61
   15c7e:	fe b7       	in	r31, 0x3e	; 62
   15c80:	37 96       	adiw	r30, 0x07	; 7
   15c82:	0f b6       	in	r0, 0x3f	; 63
   15c84:	f8 94       	cli
   15c86:	fe bf       	out	0x3e, r31	; 62
   15c88:	0f be       	out	0x3f, r0	; 63
   15c8a:	ed bf       	out	0x3d, r30	; 61
   15c8c:	80 e0       	ldi	r24, 0x00	; 0
   15c8e:	90 e0       	ldi	r25, 0x00	; 0
   15c90:	02 c0       	rjmp	.+4      	; 0x15c96 <SS80_cmd_seek+0xf8>
   15c92:	81 e0       	ldi	r24, 0x01	; 1
   15c94:	90 e0       	ldi	r25, 0x00	; 0
   15c96:	cd b7       	in	r28, 0x3d	; 61
   15c98:	de b7       	in	r29, 0x3e	; 62
   15c9a:	e0 e1       	ldi	r30, 0x10	; 16
   15c9c:	0c 94 fe e5 	jmp	0x1cbfc	; 0x1cbfc <__epilogue_restores__+0x4>

00015ca0 <SS80_locate_and_write>:
   15ca0:	a8 e0       	ldi	r26, 0x08	; 8
   15ca2:	b0 e0       	ldi	r27, 0x00	; 0
   15ca4:	e6 e5       	ldi	r30, 0x56	; 86
   15ca6:	fe ea       	ldi	r31, 0xAE	; 174
   15ca8:	0c 94 e0 e5 	jmp	0x1cbc0	; 0x1cbc0 <__prologue_saves__>
   15cac:	e0 91 69 18 	lds	r30, 0x1869	; 0x801869 <SS80s>
   15cb0:	f0 91 6a 18 	lds	r31, 0x186A	; 0x80186a <SS80s+0x1>
   15cb4:	a0 91 6b 18 	lds	r26, 0x186B	; 0x80186b <SS80p>
   15cb8:	b0 91 6c 18 	lds	r27, 0x186C	; 0x80186c <SS80p+0x1>
   15cbc:	9f 96       	adiw	r26, 0x2f	; 47
   15cbe:	0d 90       	ld	r0, X+
   15cc0:	bc 91       	ld	r27, X
   15cc2:	a0 2d       	mov	r26, r0
   15cc4:	27 81       	ldd	r18, Z+7	; 0x07
   15cc6:	30 85       	ldd	r19, Z+8	; 0x08
   15cc8:	41 85       	ldd	r20, Z+9	; 0x09
   15cca:	52 85       	ldd	r21, Z+10	; 0x0a
   15ccc:	0e 94 c0 e5 	call	0x1cb80	; 0x1cb80 <__muluhisi3>
   15cd0:	4b 01       	movw	r8, r22
   15cd2:	5c 01       	movw	r10, r24
   15cd4:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15cd8:	85 ff       	sbrs	r24, 5
   15cda:	18 c0       	rjmp	.+48     	; 0x15d0c <SS80_locate_and_write+0x6c>
   15cdc:	86 85       	ldd	r24, Z+14	; 0x0e
   15cde:	8f 93       	push	r24
   15ce0:	85 85       	ldd	r24, Z+13	; 0x0d
   15ce2:	8f 93       	push	r24
   15ce4:	84 85       	ldd	r24, Z+12	; 0x0c
   15ce6:	8f 93       	push	r24
   15ce8:	83 85       	ldd	r24, Z+11	; 0x0b
   15cea:	8f 93       	push	r24
   15cec:	bf 92       	push	r11
   15cee:	af 92       	push	r10
   15cf0:	9f 92       	push	r9
   15cf2:	8f 92       	push	r8
   15cf4:	81 e5       	ldi	r24, 0x51	; 81
   15cf6:	96 e2       	ldi	r25, 0x26	; 38
   15cf8:	1f 92       	push	r1
   15cfa:	9f 93       	push	r25
   15cfc:	8f 93       	push	r24
   15cfe:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   15d02:	0f b6       	in	r0, 0x3f	; 63
   15d04:	f8 94       	cli
   15d06:	de bf       	out	0x3e, r29	; 62
   15d08:	0f be       	out	0x3f, r0	; 63
   15d0a:	cd bf       	out	0x3d, r28	; 61
   15d0c:	e0 91 69 18 	lds	r30, 0x1869	; 0x801869 <SS80s>
   15d10:	f0 91 6a 18 	lds	r31, 0x186A	; 0x80186a <SS80s+0x1>
   15d14:	12 82       	std	Z+2, r1	; 0x02
   15d16:	54 98       	cbi	0x0a, 4	; 10
   15d18:	4c 99       	sbic	0x09, 4	; 9
   15d1a:	03 c0       	rjmp	.+6      	; 0x15d22 <SS80_locate_and_write+0x82>
   15d1c:	80 e0       	ldi	r24, 0x00	; 0
   15d1e:	90 e1       	ldi	r25, 0x10	; 16
   15d20:	52 c1       	rjmp	.+676    	; 0x15fc6 <SS80_locate_and_write+0x326>
   15d22:	3d df       	rcall	.-390    	; 0x15b9e <SS80_cmd_seek>
   15d24:	e0 91 69 18 	lds	r30, 0x1869	; 0x801869 <SS80s>
   15d28:	f0 91 6a 18 	lds	r31, 0x186A	; 0x80186a <SS80s+0x1>
   15d2c:	89 2b       	or	r24, r25
   15d2e:	41 f0       	breq	.+16     	; 0x15d40 <SS80_locate_and_write+0xa0>
   15d30:	83 81       	ldd	r24, Z+3	; 0x03
   15d32:	94 81       	ldd	r25, Z+4	; 0x04
   15d34:	82 60       	ori	r24, 0x02	; 2
   15d36:	94 83       	std	Z+4, r25	; 0x04
   15d38:	83 83       	std	Z+3, r24	; 0x03
   15d3a:	01 e0       	ldi	r16, 0x01	; 1
   15d3c:	10 e0       	ldi	r17, 0x00	; 0
   15d3e:	02 c0       	rjmp	.+4      	; 0x15d44 <SS80_locate_and_write+0xa4>
   15d40:	00 e0       	ldi	r16, 0x00	; 0
   15d42:	10 e0       	ldi	r17, 0x00	; 0
   15d44:	23 84       	ldd	r2, Z+11	; 0x0b
   15d46:	34 84       	ldd	r3, Z+12	; 0x0c
   15d48:	1a 82       	std	Y+2, r1	; 0x02
   15d4a:	19 82       	std	Y+1, r1	; 0x01
   15d4c:	41 2c       	mov	r4, r1
   15d4e:	51 2c       	mov	r5, r1
   15d50:	32 01       	movw	r6, r4
   15d52:	84 e0       	ldi	r24, 0x04	; 4
   15d54:	96 e2       	ldi	r25, 0x26	; 38
   15d56:	9c 01       	movw	r18, r24
   15d58:	40 e0       	ldi	r20, 0x00	; 0
   15d5a:	2b 83       	std	Y+3, r18	; 0x03
   15d5c:	3c 83       	std	Y+4, r19	; 0x04
   15d5e:	4d 83       	std	Y+5, r20	; 0x05
   15d60:	8a e2       	ldi	r24, 0x2A	; 42
   15d62:	96 e2       	ldi	r25, 0x26	; 38
   15d64:	9c 01       	movw	r18, r24
   15d66:	40 e0       	ldi	r20, 0x00	; 0
   15d68:	2e 83       	std	Y+6, r18	; 0x06
   15d6a:	3f 83       	std	Y+7, r19	; 0x07
   15d6c:	48 87       	std	Y+8, r20	; 0x08
   15d6e:	12 14       	cp	r1, r2
   15d70:	13 04       	cpc	r1, r3
   15d72:	0c f0       	brlt	.+2      	; 0x15d76 <SS80_locate_and_write+0xd6>
   15d74:	f6 c0       	rjmp	.+492    	; 0x15f62 <SS80_locate_and_write+0x2c2>
   15d76:	54 98       	cbi	0x0a, 4	; 10
   15d78:	4c 9b       	sbis	0x09, 4	; 9
   15d7a:	d0 cf       	rjmp	.-96     	; 0x15d1c <SS80_locate_and_write+0x7c>
   15d7c:	71 01       	movw	r14, r2
   15d7e:	31 e0       	ldi	r19, 0x01	; 1
   15d80:	23 16       	cp	r2, r19
   15d82:	33 06       	cpc	r3, r19
   15d84:	1c f0       	brlt	.+6      	; 0x15d8c <SS80_locate_and_write+0xec>
   15d86:	e1 2c       	mov	r14, r1
   15d88:	ff 24       	eor	r15, r15
   15d8a:	f3 94       	inc	r15
   15d8c:	e6 ee       	ldi	r30, 0xE6	; 230
   15d8e:	fb e1       	ldi	r31, 0x1B	; 27
   15d90:	20 e0       	ldi	r18, 0x00	; 0
   15d92:	32 e0       	ldi	r19, 0x02	; 2
   15d94:	11 92       	st	Z+, r1
   15d96:	21 50       	subi	r18, 0x01	; 1
   15d98:	30 40       	sbci	r19, 0x00	; 0
   15d9a:	e1 f7       	brne	.-8      	; 0x15d94 <SS80_locate_and_write+0xf4>
   15d9c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15da0:	87 fd       	sbrc	r24, 7
   15da2:	0e 94 d9 85 	call	0x10bb2	; 0x10bb2 <gpib_timer_elapsed_begin>
   15da6:	ae 01       	movw	r20, r28
   15da8:	4f 5f       	subi	r20, 0xFF	; 255
   15daa:	5f 4f       	sbci	r21, 0xFF	; 255
   15dac:	b7 01       	movw	r22, r14
   15dae:	86 ee       	ldi	r24, 0xE6	; 230
   15db0:	9b e1       	ldi	r25, 0x1B	; 27
   15db2:	0e 94 33 8b 	call	0x11666	; 0x11666 <gpib_read_str>
   15db6:	6c 01       	movw	r12, r24
   15db8:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15dbc:	87 ff       	sbrs	r24, 7
   15dbe:	04 c0       	rjmp	.+8      	; 0x15dc8 <SS80_locate_and_write+0x128>
   15dc0:	80 ee       	ldi	r24, 0xE0	; 224
   15dc2:	9f e0       	ldi	r25, 0x0F	; 15
   15dc4:	0e 94 eb 85 	call	0x10bd6	; 0x10bd6 <gpib_timer_elapsed_end>
   15dc8:	ce 14       	cp	r12, r14
   15dca:	df 04       	cpc	r13, r15
   15dcc:	39 f1       	breq	.+78     	; 0x15e1c <SS80_locate_and_write+0x17c>
   15dce:	89 81       	ldd	r24, Y+1	; 0x01
   15dd0:	9a 81       	ldd	r25, Y+2	; 0x02
   15dd2:	9c 01       	movw	r18, r24
   15dd4:	22 27       	eor	r18, r18
   15dd6:	30 7d       	andi	r19, 0xD0	; 208
   15dd8:	23 2b       	or	r18, r19
   15dda:	d1 f0       	breq	.+52     	; 0x15e10 <SS80_locate_and_write+0x170>
   15ddc:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15de0:	80 ff       	sbrs	r24, 0
   15de2:	0a c0       	rjmp	.+20     	; 0x15df8 <SS80_locate_and_write+0x158>
   15de4:	8e e3       	ldi	r24, 0x3E	; 62
   15de6:	96 e2       	ldi	r25, 0x26	; 38
   15de8:	1f 92       	push	r1
   15dea:	9f 93       	push	r25
   15dec:	8f 93       	push	r24
   15dee:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   15df2:	0f 90       	pop	r0
   15df4:	0f 90       	pop	r0
   15df6:	0f 90       	pop	r0
   15df8:	e0 91 69 18 	lds	r30, 0x1869	; 0x801869 <SS80s>
   15dfc:	f0 91 6a 18 	lds	r31, 0x186A	; 0x80186a <SS80s+0x1>
   15e00:	83 81       	ldd	r24, Z+3	; 0x03
   15e02:	94 81       	ldd	r25, Z+4	; 0x04
   15e04:	82 60       	ori	r24, 0x02	; 2
   15e06:	94 83       	std	Z+4, r25	; 0x04
   15e08:	83 83       	std	Z+3, r24	; 0x03
   15e0a:	81 e0       	ldi	r24, 0x01	; 1
   15e0c:	82 83       	std	Z+2, r24	; 0x02
   15e0e:	9a c0       	rjmp	.+308    	; 0x15f44 <SS80_locate_and_write+0x2a4>
   15e10:	c1 14       	cp	r12, r1
   15e12:	d1 04       	cpc	r13, r1
   15e14:	09 f0       	breq	.+2      	; 0x15e18 <SS80_locate_and_write+0x178>
   15e16:	d3 c0       	rjmp	.+422    	; 0x15fbe <SS80_locate_and_write+0x31e>
   15e18:	90 fd       	sbrc	r25, 0
   15e1a:	94 c0       	rjmp	.+296    	; 0x15f44 <SS80_locate_and_write+0x2a4>
   15e1c:	01 15       	cp	r16, r1
   15e1e:	11 05       	cpc	r17, r1
   15e20:	09 f0       	breq	.+2      	; 0x15e24 <SS80_locate_and_write+0x184>
   15e22:	85 c0       	rjmp	.+266    	; 0x15f2e <SS80_locate_and_write+0x28e>
   15e24:	c1 14       	cp	r12, r1
   15e26:	d1 04       	cpc	r13, r1
   15e28:	09 f4       	brne	.+2      	; 0x15e2c <SS80_locate_and_write+0x18c>
   15e2a:	83 c0       	rjmp	.+262    	; 0x15f32 <SS80_locate_and_write+0x292>
   15e2c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15e30:	86 fd       	sbrc	r24, 6
   15e32:	0e 94 d9 85 	call	0x10bb2	; 0x10bb2 <gpib_timer_elapsed_begin>
   15e36:	e0 90 69 18 	lds	r14, 0x1869	; 0x801869 <SS80s>
   15e3a:	f0 90 6a 18 	lds	r15, 0x186A	; 0x80186a <SS80s+0x1>
   15e3e:	33 e0       	ldi	r19, 0x03	; 3
   15e40:	e3 0e       	add	r14, r19
   15e42:	f1 1c       	adc	r15, r1
   15e44:	80 91 6b 18 	lds	r24, 0x186B	; 0x80186b <SS80p>
   15e48:	90 91 6c 18 	lds	r25, 0x186C	; 0x80186c <SS80p+0x1>
   15e4c:	86 01       	movw	r16, r12
   15e4e:	26 ee       	ldi	r18, 0xE6	; 230
   15e50:	3b e1       	ldi	r19, 0x1B	; 27
   15e52:	b5 01       	movw	r22, r10
   15e54:	a4 01       	movw	r20, r8
   15e56:	02 96       	adiw	r24, 0x02	; 2
   15e58:	0e 94 82 85 	call	0x10b04	; 0x10b04 <dbf_open_write>
   15e5c:	7c 01       	movw	r14, r24
   15e5e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15e62:	86 ff       	sbrs	r24, 6
   15e64:	04 c0       	rjmp	.+8      	; 0x15e6e <SS80_locate_and_write+0x1ce>
   15e66:	8a ee       	ldi	r24, 0xEA	; 234
   15e68:	9f e0       	ldi	r25, 0x0F	; 15
   15e6a:	0e 94 eb 85 	call	0x10bd6	; 0x10bd6 <gpib_timer_elapsed_end>
   15e6e:	ce 14       	cp	r12, r14
   15e70:	df 04       	cpc	r13, r15
   15e72:	39 f1       	breq	.+78     	; 0x15ec2 <SS80_locate_and_write+0x222>
   15e74:	e0 91 69 18 	lds	r30, 0x1869	; 0x801869 <SS80s>
   15e78:	f0 91 6a 18 	lds	r31, 0x186A	; 0x80186a <SS80s+0x1>
   15e7c:	83 81       	ldd	r24, Z+3	; 0x03
   15e7e:	94 81       	ldd	r25, Z+4	; 0x04
   15e80:	82 60       	ori	r24, 0x02	; 2
   15e82:	94 83       	std	Z+4, r25	; 0x04
   15e84:	83 83       	std	Z+3, r24	; 0x03
   15e86:	0e 94 43 71 	call	0xe286	; 0xe286 <mmc_wp_status>
   15e8a:	e0 91 69 18 	lds	r30, 0x1869	; 0x801869 <SS80s>
   15e8e:	f0 91 6a 18 	lds	r31, 0x186A	; 0x80186a <SS80s+0x1>
   15e92:	89 2b       	or	r24, r25
   15e94:	29 f0       	breq	.+10     	; 0x15ea0 <SS80_locate_and_write+0x200>
   15e96:	83 81       	ldd	r24, Z+3	; 0x03
   15e98:	94 81       	ldd	r25, Z+4	; 0x04
   15e9a:	88 60       	ori	r24, 0x08	; 8
   15e9c:	94 83       	std	Z+4, r25	; 0x04
   15e9e:	83 83       	std	Z+3, r24	; 0x03
   15ea0:	41 e0       	ldi	r20, 0x01	; 1
   15ea2:	42 83       	std	Z+2, r20	; 0x02
   15ea4:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15ea8:	80 ff       	sbrs	r24, 0
   15eaa:	29 c0       	rjmp	.+82     	; 0x15efe <SS80_locate_and_write+0x25e>
   15eac:	1f 92       	push	r1
   15eae:	8f 81       	ldd	r24, Y+7	; 0x07
   15eb0:	8f 93       	push	r24
   15eb2:	9e 81       	ldd	r25, Y+6	; 0x06
   15eb4:	9f 93       	push	r25
   15eb6:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   15eba:	0f 90       	pop	r0
   15ebc:	0f 90       	pop	r0
   15ebe:	0f 90       	pop	r0
   15ec0:	1e c0       	rjmp	.+60     	; 0x15efe <SS80_locate_and_write+0x25e>
   15ec2:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15ec6:	85 ff       	sbrs	r24, 5
   15ec8:	0e c0       	rjmp	.+28     	; 0x15ee6 <SS80_locate_and_write+0x246>
   15eca:	df 92       	push	r13
   15ecc:	cf 92       	push	r12
   15ece:	1f 92       	push	r1
   15ed0:	ec 81       	ldd	r30, Y+4	; 0x04
   15ed2:	ef 93       	push	r30
   15ed4:	fb 81       	ldd	r31, Y+3	; 0x03
   15ed6:	ff 93       	push	r31
   15ed8:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   15edc:	0f 90       	pop	r0
   15ede:	0f 90       	pop	r0
   15ee0:	0f 90       	pop	r0
   15ee2:	0f 90       	pop	r0
   15ee4:	0f 90       	pop	r0
   15ee6:	c6 01       	movw	r24, r12
   15ee8:	0d 2c       	mov	r0, r13
   15eea:	00 0c       	add	r0, r0
   15eec:	aa 0b       	sbc	r26, r26
   15eee:	bb 0b       	sbc	r27, r27
   15ef0:	88 0e       	add	r8, r24
   15ef2:	99 1e       	adc	r9, r25
   15ef4:	aa 1e       	adc	r10, r26
   15ef6:	bb 1e       	adc	r11, r27
   15ef8:	00 e0       	ldi	r16, 0x00	; 0
   15efa:	10 e0       	ldi	r17, 0x00	; 0
   15efc:	05 c0       	rjmp	.+10     	; 0x15f08 <SS80_locate_and_write+0x268>
   15efe:	ec 14       	cp	r14, r12
   15f00:	fd 04       	cpc	r15, r13
   15f02:	64 f0       	brlt	.+24     	; 0x15f1c <SS80_locate_and_write+0x27c>
   15f04:	01 e0       	ldi	r16, 0x01	; 1
   15f06:	10 e0       	ldi	r17, 0x00	; 0
   15f08:	c7 01       	movw	r24, r14
   15f0a:	0f 2c       	mov	r0, r15
   15f0c:	00 0c       	add	r0, r0
   15f0e:	aa 0b       	sbc	r26, r26
   15f10:	bb 0b       	sbc	r27, r27
   15f12:	48 0e       	add	r4, r24
   15f14:	59 1e       	adc	r5, r25
   15f16:	6a 1e       	adc	r6, r26
   15f18:	7b 1e       	adc	r7, r27
   15f1a:	0b c0       	rjmp	.+22     	; 0x15f32 <SS80_locate_and_write+0x292>
   15f1c:	c6 01       	movw	r24, r12
   15f1e:	0d 2c       	mov	r0, r13
   15f20:	00 0c       	add	r0, r0
   15f22:	aa 0b       	sbc	r26, r26
   15f24:	bb 0b       	sbc	r27, r27
   15f26:	48 0e       	add	r4, r24
   15f28:	59 1e       	adc	r5, r25
   15f2a:	6a 1e       	adc	r6, r26
   15f2c:	7b 1e       	adc	r7, r27
   15f2e:	01 e0       	ldi	r16, 0x01	; 1
   15f30:	10 e0       	ldi	r17, 0x00	; 0
   15f32:	2c 18       	sub	r2, r12
   15f34:	3d 08       	sbc	r3, r13
   15f36:	89 81       	ldd	r24, Y+1	; 0x01
   15f38:	9a 81       	ldd	r25, Y+2	; 0x02
   15f3a:	90 ff       	sbrs	r25, 0
   15f3c:	18 cf       	rjmp	.-464    	; 0x15d6e <SS80_locate_and_write+0xce>
   15f3e:	12 14       	cp	r1, r2
   15f40:	13 04       	cpc	r1, r3
   15f42:	7c f4       	brge	.+30     	; 0x15f62 <SS80_locate_and_write+0x2c2>
   15f44:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15f48:	80 ff       	sbrs	r24, 0
   15f4a:	1f c0       	rjmp	.+62     	; 0x15f8a <SS80_locate_and_write+0x2ea>
   15f4c:	8c ed       	ldi	r24, 0xDC	; 220
   15f4e:	95 e2       	ldi	r25, 0x25	; 37
   15f50:	1f 92       	push	r1
   15f52:	9f 93       	push	r25
   15f54:	8f 93       	push	r24
   15f56:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   15f5a:	0f 90       	pop	r0
   15f5c:	0f 90       	pop	r0
   15f5e:	0f 90       	pop	r0
   15f60:	14 c0       	rjmp	.+40     	; 0x15f8a <SS80_locate_and_write+0x2ea>
   15f62:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15f66:	85 ff       	sbrs	r24, 5
   15f68:	10 c0       	rjmp	.+32     	; 0x15f8a <SS80_locate_and_write+0x2ea>
   15f6a:	7f 92       	push	r7
   15f6c:	6f 92       	push	r6
   15f6e:	5f 92       	push	r5
   15f70:	4f 92       	push	r4
   15f72:	81 eb       	ldi	r24, 0xB1	; 177
   15f74:	95 e2       	ldi	r25, 0x25	; 37
   15f76:	1f 92       	push	r1
   15f78:	9f 93       	push	r25
   15f7a:	8f 93       	push	r24
   15f7c:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   15f80:	0f b6       	in	r0, 0x3f	; 63
   15f82:	f8 94       	cli
   15f84:	de bf       	out	0x3e, r29	; 62
   15f86:	0f be       	out	0x3f, r0	; 63
   15f88:	cd bf       	out	0x3d, r28	; 61
   15f8a:	00 91 69 18 	lds	r16, 0x1869	; 0x801869 <SS80s>
   15f8e:	10 91 6a 18 	lds	r17, 0x186A	; 0x80186a <SS80s+0x1>
   15f92:	e0 91 6b 18 	lds	r30, 0x186B	; 0x80186b <SS80p>
   15f96:	f0 91 6c 18 	lds	r31, 0x186C	; 0x80186c <SS80p+0x1>
   15f9a:	27 a5       	ldd	r18, Z+47	; 0x2f
   15f9c:	30 a9       	ldd	r19, Z+48	; 0x30
   15f9e:	40 e0       	ldi	r20, 0x00	; 0
   15fa0:	50 e0       	ldi	r21, 0x00	; 0
   15fa2:	c5 01       	movw	r24, r10
   15fa4:	b4 01       	movw	r22, r8
   15fa6:	0e 94 5e e5 	call	0x1cabc	; 0x1cabc <__udivmodsi4>
   15faa:	f8 01       	movw	r30, r16
   15fac:	27 83       	std	Z+7, r18	; 0x07
   15fae:	30 87       	std	Z+8, r19	; 0x08
   15fb0:	41 87       	std	Z+9, r20	; 0x09
   15fb2:	52 87       	std	Z+10, r21	; 0x0a
   15fb4:	89 81       	ldd	r24, Y+1	; 0x01
   15fb6:	9a 81       	ldd	r25, Y+2	; 0x02
   15fb8:	88 27       	eor	r24, r24
   15fba:	90 7d       	andi	r25, 0xD0	; 208
   15fbc:	04 c0       	rjmp	.+8      	; 0x15fc6 <SS80_locate_and_write+0x326>
   15fbe:	01 2b       	or	r16, r17
   15fc0:	09 f4       	brne	.+2      	; 0x15fc4 <SS80_locate_and_write+0x324>
   15fc2:	34 cf       	rjmp	.-408    	; 0x15e2c <SS80_locate_and_write+0x18c>
   15fc4:	b4 cf       	rjmp	.-152    	; 0x15f2e <SS80_locate_and_write+0x28e>
   15fc6:	28 96       	adiw	r28, 0x08	; 8
   15fc8:	e2 e1       	ldi	r30, 0x12	; 18
   15fca:	0c 94 fc e5 	jmp	0x1cbf8	; 0x1cbf8 <__epilogue_restores__>

00015fce <SS80_Report>:
   15fce:	a3 e0       	ldi	r26, 0x03	; 3
   15fd0:	b0 e0       	ldi	r27, 0x00	; 0
   15fd2:	ed ee       	ldi	r30, 0xED	; 237
   15fd4:	ff ea       	ldi	r31, 0xAF	; 175
   15fd6:	0c 94 f0 e5 	jmp	0x1cbe0	; 0x1cbe0 <__prologue_saves__+0x20>
   15fda:	e0 91 69 18 	lds	r30, 0x1869	; 0x801869 <SS80s>
   15fde:	f0 91 6a 18 	lds	r31, 0x186A	; 0x80186a <SS80s+0x1>
   15fe2:	82 81       	ldd	r24, Z+2	; 0x02
   15fe4:	8b 83       	std	Y+3, r24	; 0x03
   15fe6:	80 e0       	ldi	r24, 0x00	; 0
   15fe8:	91 e0       	ldi	r25, 0x01	; 1
   15fea:	9a 83       	std	Y+2, r25	; 0x02
   15fec:	89 83       	std	Y+1, r24	; 0x01
   15fee:	ae 01       	movw	r20, r28
   15ff0:	4f 5f       	subi	r20, 0xFF	; 255
   15ff2:	5f 4f       	sbci	r21, 0xFF	; 255
   15ff4:	61 e0       	ldi	r22, 0x01	; 1
   15ff6:	70 e0       	ldi	r23, 0x00	; 0
   15ff8:	ce 01       	movw	r24, r28
   15ffa:	03 96       	adiw	r24, 0x03	; 3
   15ffc:	0e 94 e1 8b 	call	0x117c2	; 0x117c2 <gpib_write_str>
   16000:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   16004:	01 97       	sbiw	r24, 0x01	; 1
   16006:	89 f0       	breq	.+34     	; 0x1602a <SS80_Report+0x5c>
   16008:	20 ff       	sbrs	r18, 0
   1600a:	0a c0       	rjmp	.+20     	; 0x16020 <SS80_Report+0x52>
   1600c:	82 ea       	ldi	r24, 0xA2	; 162
   1600e:	90 e2       	ldi	r25, 0x20	; 32
   16010:	1f 92       	push	r1
   16012:	9f 93       	push	r25
   16014:	8f 93       	push	r24
   16016:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1601a:	0f 90       	pop	r0
   1601c:	0f 90       	pop	r0
   1601e:	0f 90       	pop	r0
   16020:	89 81       	ldd	r24, Y+1	; 0x01
   16022:	9a 81       	ldd	r25, Y+2	; 0x02
   16024:	88 27       	eor	r24, r24
   16026:	90 7d       	andi	r25, 0xD0	; 208
   16028:	1c c0       	rjmp	.+56     	; 0x16062 <SS80_Report+0x94>
   1602a:	25 ff       	sbrs	r18, 5
   1602c:	13 c0       	rjmp	.+38     	; 0x16054 <SS80_Report+0x86>
   1602e:	e0 91 69 18 	lds	r30, 0x1869	; 0x801869 <SS80s>
   16032:	f0 91 6a 18 	lds	r31, 0x186A	; 0x80186a <SS80s+0x1>
   16036:	82 81       	ldd	r24, Z+2	; 0x02
   16038:	1f 92       	push	r1
   1603a:	8f 93       	push	r24
   1603c:	8f e8       	ldi	r24, 0x8F	; 143
   1603e:	90 e2       	ldi	r25, 0x20	; 32
   16040:	1f 92       	push	r1
   16042:	9f 93       	push	r25
   16044:	8f 93       	push	r24
   16046:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1604a:	0f 90       	pop	r0
   1604c:	0f 90       	pop	r0
   1604e:	0f 90       	pop	r0
   16050:	0f 90       	pop	r0
   16052:	0f 90       	pop	r0
   16054:	e0 91 69 18 	lds	r30, 0x1869	; 0x801869 <SS80s>
   16058:	f0 91 6a 18 	lds	r31, 0x186A	; 0x80186a <SS80s+0x1>
   1605c:	12 82       	std	Z+2, r1	; 0x02
   1605e:	80 e0       	ldi	r24, 0x00	; 0
   16060:	90 e0       	ldi	r25, 0x00	; 0
   16062:	23 96       	adiw	r28, 0x03	; 3
   16064:	e2 e0       	ldi	r30, 0x02	; 2
   16066:	0c 94 0c e6 	jmp	0x1cc18	; 0x1cc18 <__epilogue_restores__+0x20>

0001606a <Clear_Common>:
   1606a:	e0 91 69 18 	lds	r30, 0x1869	; 0x801869 <SS80s>
   1606e:	f0 91 6a 18 	lds	r31, 0x186A	; 0x80186a <SS80s+0x1>
   16072:	25 81       	ldd	r18, Z+5	; 0x05
   16074:	30 e0       	ldi	r19, 0x00	; 0
   16076:	28 17       	cp	r18, r24
   16078:	39 07       	cpc	r19, r25
   1607a:	19 f0       	breq	.+6      	; 0x16082 <Clear_Common+0x18>
   1607c:	0f 97       	sbiw	r24, 0x0f	; 15
   1607e:	99 f4       	brne	.+38     	; 0x160a6 <Clear_Common+0x3c>
   16080:	03 c0       	rjmp	.+6      	; 0x16088 <Clear_Common+0x1e>
   16082:	2f 30       	cpi	r18, 0x0F	; 15
   16084:	31 05       	cpc	r19, r1
   16086:	09 f4       	brne	.+2      	; 0x1608a <Clear_Common+0x20>
   16088:	15 82       	std	Z+5, r1	; 0x05
   1608a:	16 82       	std	Z+6, r1	; 0x06
   1608c:	17 82       	std	Z+7, r1	; 0x07
   1608e:	10 86       	std	Z+8, r1	; 0x08
   16090:	11 86       	std	Z+9, r1	; 0x09
   16092:	12 86       	std	Z+10, r1	; 0x0a
   16094:	13 86       	std	Z+11, r1	; 0x0b
   16096:	14 86       	std	Z+12, r1	; 0x0c
   16098:	15 86       	std	Z+13, r1	; 0x0d
   1609a:	16 86       	std	Z+14, r1	; 0x0e
   1609c:	11 82       	std	Z+1, r1	; 0x01
   1609e:	10 82       	st	Z, r1
   160a0:	14 82       	std	Z+4, r1	; 0x04
   160a2:	13 82       	std	Z+3, r1	; 0x03
   160a4:	12 82       	std	Z+2, r1	; 0x02
   160a6:	08 95       	ret

000160a8 <SS80_init>:
   160a8:	a0 e0       	ldi	r26, 0x00	; 0
   160aa:	b0 e0       	ldi	r27, 0x00	; 0
   160ac:	ea e5       	ldi	r30, 0x5A	; 90
   160ae:	f0 eb       	ldi	r31, 0xB0	; 176
   160b0:	0c 94 ea e5 	jmp	0x1cbd4	; 0x1cbd4 <__prologue_saves__+0x14>
   160b4:	09 ec       	ldi	r16, 0xC9	; 201
   160b6:	1f e1       	ldi	r17, 0x1F	; 31
   160b8:	cb e0       	ldi	r28, 0x0B	; 11
   160ba:	d0 e0       	ldi	r29, 0x00	; 0
   160bc:	82 e0       	ldi	r24, 0x02	; 2
   160be:	f8 2e       	mov	r15, r24
   160c0:	8a e5       	ldi	r24, 0x5A	; 90
   160c2:	97 e2       	ldi	r25, 0x27	; 39
   160c4:	6c 01       	movw	r12, r24
   160c6:	e1 2c       	mov	r14, r1
   160c8:	f8 01       	movw	r30, r16
   160ca:	80 81       	ld	r24, Z
   160cc:	83 30       	cpi	r24, 0x03	; 3
   160ce:	39 f5       	brne	.+78     	; 0x1611e <SS80_init+0x76>
   160d0:	ce 01       	movw	r24, r28
   160d2:	0e 94 58 93 	call	0x126b0	; 0x126b0 <set_active_device>
   160d6:	89 2b       	or	r24, r25
   160d8:	11 f1       	breq	.+68     	; 0x1611e <SS80_init+0x76>
   160da:	8f e0       	ldi	r24, 0x0F	; 15
   160dc:	90 e0       	ldi	r25, 0x00	; 0
   160de:	c5 df       	rcall	.-118    	; 0x1606a <Clear_Common>
   160e0:	e0 91 69 18 	lds	r30, 0x1869	; 0x801869 <SS80s>
   160e4:	f0 91 6a 18 	lds	r31, 0x186A	; 0x80186a <SS80s+0x1>
   160e8:	f2 82       	std	Z+2, r15	; 0x02
   160ea:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   160ee:	85 ff       	sbrs	r24, 5
   160f0:	0e c0       	rjmp	.+28     	; 0x1610e <SS80_init+0x66>
   160f2:	f8 01       	movw	r30, r16
   160f4:	81 81       	ldd	r24, Z+1	; 0x01
   160f6:	1f 92       	push	r1
   160f8:	8f 93       	push	r24
   160fa:	1f 92       	push	r1
   160fc:	df 92       	push	r13
   160fe:	cf 92       	push	r12
   16100:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   16104:	0f 90       	pop	r0
   16106:	0f 90       	pop	r0
   16108:	0f 90       	pop	r0
   1610a:	0f 90       	pop	r0
   1610c:	0f 90       	pop	r0
   1610e:	e0 91 6b 18 	lds	r30, 0x186B	; 0x80186b <SS80p>
   16112:	f0 91 6c 18 	lds	r31, 0x186C	; 0x80186c <SS80p+0x1>
   16116:	81 81       	ldd	r24, Z+1	; 0x01
   16118:	90 e0       	ldi	r25, 0x00	; 0
   1611a:	0e 94 c2 86 	call	0x10d84	; 0x10d84 <gpib_disable_PPR>
   1611e:	21 97       	sbiw	r28, 0x01	; 1
   16120:	0b 52       	subi	r16, 0x2B	; 43
   16122:	11 09       	sbc	r17, r1
   16124:	cf 3f       	cpi	r28, 0xFF	; 255
   16126:	ff ef       	ldi	r31, 0xFF	; 255
   16128:	df 07       	cpc	r29, r31
   1612a:	71 f6       	brne	.-100    	; 0x160c8 <SS80_init+0x20>
   1612c:	cd b7       	in	r28, 0x3d	; 61
   1612e:	de b7       	in	r29, 0x3e	; 62
   16130:	e8 e0       	ldi	r30, 0x08	; 8
   16132:	0c 94 06 e6 	jmp	0x1cc0c	; 0x1cc0c <__epilogue_restores__+0x14>

00016136 <SS80_Channel_Independent_Clear>:
   16136:	99 df       	rcall	.-206    	; 0x1606a <Clear_Common>
   16138:	e0 91 6b 18 	lds	r30, 0x186B	; 0x80186b <SS80p>
   1613c:	f0 91 6c 18 	lds	r31, 0x186C	; 0x80186c <SS80p+0x1>
   16140:	81 81       	ldd	r24, Z+1	; 0x01
   16142:	90 e0       	ldi	r25, 0x00	; 0
   16144:	0e 94 91 86 	call	0x10d22	; 0x10d22 <gpib_enable_PPR>
   16148:	80 e0       	ldi	r24, 0x00	; 0
   1614a:	90 e0       	ldi	r25, 0x00	; 0
   1614c:	08 95       	ret

0001614e <SS80_Universal_Device_Clear>:
   1614e:	8f e0       	ldi	r24, 0x0F	; 15
   16150:	90 e0       	ldi	r25, 0x00	; 0
   16152:	8b df       	rcall	.-234    	; 0x1606a <Clear_Common>
   16154:	e0 91 6b 18 	lds	r30, 0x186B	; 0x80186b <SS80p>
   16158:	f0 91 6c 18 	lds	r31, 0x186C	; 0x80186c <SS80p+0x1>
   1615c:	81 81       	ldd	r24, Z+1	; 0x01
   1615e:	90 e0       	ldi	r25, 0x00	; 0
   16160:	0e 94 91 86 	call	0x10d22	; 0x10d22 <gpib_enable_PPR>
   16164:	80 e0       	ldi	r24, 0x00	; 0
   16166:	90 e0       	ldi	r25, 0x00	; 0
   16168:	08 95       	ret

0001616a <SS80_Selected_Device_Clear>:
   1616a:	cf 93       	push	r28
   1616c:	df 93       	push	r29
   1616e:	ec 01       	movw	r28, r24
   16170:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16174:	85 ff       	sbrs	r24, 5
   16176:	0a c0       	rjmp	.+20     	; 0x1618c <SS80_Selected_Device_Clear+0x22>
   16178:	83 e8       	ldi	r24, 0x83	; 131
   1617a:	90 e2       	ldi	r25, 0x20	; 32
   1617c:	1f 92       	push	r1
   1617e:	9f 93       	push	r25
   16180:	8f 93       	push	r24
   16182:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   16186:	0f 90       	pop	r0
   16188:	0f 90       	pop	r0
   1618a:	0f 90       	pop	r0
   1618c:	ce 01       	movw	r24, r28
   1618e:	6d df       	rcall	.-294    	; 0x1606a <Clear_Common>
   16190:	e0 91 6b 18 	lds	r30, 0x186B	; 0x80186b <SS80p>
   16194:	f0 91 6c 18 	lds	r31, 0x186C	; 0x80186c <SS80p+0x1>
   16198:	81 81       	ldd	r24, Z+1	; 0x01
   1619a:	90 e0       	ldi	r25, 0x00	; 0
   1619c:	0e 94 91 86 	call	0x10d22	; 0x10d22 <gpib_enable_PPR>
   161a0:	80 e0       	ldi	r24, 0x00	; 0
   161a2:	90 e0       	ldi	r25, 0x00	; 0
   161a4:	df 91       	pop	r29
   161a6:	cf 91       	pop	r28
   161a8:	08 95       	ret

000161aa <SS80_Amigo_Clear>:
   161aa:	a3 e0       	ldi	r26, 0x03	; 3
   161ac:	b0 e0       	ldi	r27, 0x00	; 0
   161ae:	eb ed       	ldi	r30, 0xDB	; 219
   161b0:	f0 eb       	ldi	r31, 0xB0	; 176
   161b2:	0c 94 f0 e5 	jmp	0x1cbe0	; 0x1cbe0 <__prologue_saves__+0x20>
   161b6:	1a 82       	std	Y+2, r1	; 0x02
   161b8:	19 82       	std	Y+1, r1	; 0x01
   161ba:	ae 01       	movw	r20, r28
   161bc:	4f 5f       	subi	r20, 0xFF	; 255
   161be:	5f 4f       	sbci	r21, 0xFF	; 255
   161c0:	61 e0       	ldi	r22, 0x01	; 1
   161c2:	70 e0       	ldi	r23, 0x00	; 0
   161c4:	ce 01       	movw	r24, r28
   161c6:	03 96       	adiw	r24, 0x03	; 3
   161c8:	0e 94 33 8b 	call	0x11666	; 0x11666 <gpib_read_str>
   161cc:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   161d0:	01 97       	sbiw	r24, 0x01	; 1
   161d2:	89 f0       	breq	.+34     	; 0x161f6 <SS80_Amigo_Clear+0x4c>
   161d4:	20 ff       	sbrs	r18, 0
   161d6:	0a c0       	rjmp	.+20     	; 0x161ec <SS80_Amigo_Clear+0x42>
   161d8:	80 e7       	ldi	r24, 0x70	; 112
   161da:	90 e2       	ldi	r25, 0x20	; 32
   161dc:	1f 92       	push	r1
   161de:	9f 93       	push	r25
   161e0:	8f 93       	push	r24
   161e2:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   161e6:	0f 90       	pop	r0
   161e8:	0f 90       	pop	r0
   161ea:	0f 90       	pop	r0
   161ec:	89 81       	ldd	r24, Y+1	; 0x01
   161ee:	9a 81       	ldd	r25, Y+2	; 0x02
   161f0:	88 27       	eor	r24, r24
   161f2:	90 7d       	andi	r25, 0xD0	; 208
   161f4:	19 c0       	rjmp	.+50     	; 0x16228 <SS80_Amigo_Clear+0x7e>
   161f6:	25 ff       	sbrs	r18, 5
   161f8:	0a c0       	rjmp	.+20     	; 0x1620e <SS80_Amigo_Clear+0x64>
   161fa:	81 e6       	ldi	r24, 0x61	; 97
   161fc:	90 e2       	ldi	r25, 0x20	; 32
   161fe:	1f 92       	push	r1
   16200:	9f 93       	push	r25
   16202:	8f 93       	push	r24
   16204:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   16208:	0f 90       	pop	r0
   1620a:	0f 90       	pop	r0
   1620c:	0f 90       	pop	r0
   1620e:	8f e0       	ldi	r24, 0x0F	; 15
   16210:	90 e0       	ldi	r25, 0x00	; 0
   16212:	2b df       	rcall	.-426    	; 0x1606a <Clear_Common>
   16214:	e0 91 6b 18 	lds	r30, 0x186B	; 0x80186b <SS80p>
   16218:	f0 91 6c 18 	lds	r31, 0x186C	; 0x80186c <SS80p+0x1>
   1621c:	81 81       	ldd	r24, Z+1	; 0x01
   1621e:	90 e0       	ldi	r25, 0x00	; 0
   16220:	0e 94 91 86 	call	0x10d22	; 0x10d22 <gpib_enable_PPR>
   16224:	80 e0       	ldi	r24, 0x00	; 0
   16226:	90 e0       	ldi	r25, 0x00	; 0
   16228:	23 96       	adiw	r28, 0x03	; 3
   1622a:	e2 e0       	ldi	r30, 0x02	; 2
   1622c:	0c 94 0c e6 	jmp	0x1cc18	; 0x1cc18 <__epilogue_restores__+0x20>

00016230 <SS80_Cancel>:
   16230:	e0 91 69 18 	lds	r30, 0x1869	; 0x801869 <SS80s>
   16234:	f0 91 6a 18 	lds	r31, 0x186A	; 0x80186a <SS80s+0x1>
   16238:	11 82       	std	Z+1, r1	; 0x01
   1623a:	10 82       	st	Z, r1
   1623c:	e0 91 6b 18 	lds	r30, 0x186B	; 0x80186b <SS80p>
   16240:	f0 91 6c 18 	lds	r31, 0x186C	; 0x80186c <SS80p+0x1>
   16244:	81 81       	ldd	r24, Z+1	; 0x01
   16246:	90 e0       	ldi	r25, 0x00	; 0
   16248:	0e 94 91 86 	call	0x10d22	; 0x10d22 <gpib_enable_PPR>
   1624c:	80 e0       	ldi	r24, 0x00	; 0
   1624e:	90 e0       	ldi	r25, 0x00	; 0
   16250:	08 95       	ret

00016252 <SS80_Transparent_State>:
   16252:	a2 e0       	ldi	r26, 0x02	; 2
   16254:	b0 e0       	ldi	r27, 0x00	; 0
   16256:	ef e2       	ldi	r30, 0x2F	; 47
   16258:	f1 eb       	ldi	r31, 0xB1	; 177
   1625a:	0c 94 e8 e5 	jmp	0x1cbd0	; 0x1cbd0 <__prologue_saves__+0x10>
   1625e:	e0 91 6b 18 	lds	r30, 0x186B	; 0x80186b <SS80p>
   16262:	f0 91 6c 18 	lds	r31, 0x186C	; 0x80186c <SS80p+0x1>
   16266:	81 81       	ldd	r24, Z+1	; 0x01
   16268:	90 e0       	ldi	r25, 0x00	; 0
   1626a:	0e 94 c2 86 	call	0x10d84	; 0x10d84 <gpib_disable_PPR>
   1626e:	80 e0       	ldi	r24, 0x00	; 0
   16270:	91 e0       	ldi	r25, 0x01	; 1
   16272:	9a 83       	std	Y+2, r25	; 0x02
   16274:	89 83       	std	Y+1, r24	; 0x01
   16276:	ae 01       	movw	r20, r28
   16278:	4f 5f       	subi	r20, 0xFF	; 255
   1627a:	5f 4f       	sbci	r21, 0xFF	; 255
   1627c:	60 e0       	ldi	r22, 0x00	; 0
   1627e:	72 e0       	ldi	r23, 0x02	; 2
   16280:	86 ee       	ldi	r24, 0xE6	; 230
   16282:	9b e1       	ldi	r25, 0x1B	; 27
   16284:	0e 94 33 8b 	call	0x11666	; 0x11666 <gpib_read_str>
   16288:	7c 01       	movw	r14, r24
   1628a:	89 81       	ldd	r24, Y+1	; 0x01
   1628c:	9a 81       	ldd	r25, Y+2	; 0x02
   1628e:	9c 01       	movw	r18, r24
   16290:	22 27       	eor	r18, r18
   16292:	30 7d       	andi	r19, 0xD0	; 208
   16294:	23 2b       	or	r18, r19
   16296:	79 f0       	breq	.+30     	; 0x162b6 <SS80_Transparent_State+0x64>
   16298:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1629c:	80 ff       	sbrs	r24, 0
   1629e:	e0 c0       	rjmp	.+448    	; 0x16460 <SS80_Transparent_State+0x20e>
   162a0:	80 e0       	ldi	r24, 0x00	; 0
   162a2:	92 e2       	ldi	r25, 0x22	; 34
   162a4:	1f 92       	push	r1
   162a6:	9f 93       	push	r25
   162a8:	8f 93       	push	r24
   162aa:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   162ae:	0f 90       	pop	r0
   162b0:	0f 90       	pop	r0
   162b2:	0f 90       	pop	r0
   162b4:	d5 c0       	rjmp	.+426    	; 0x16460 <SS80_Transparent_State+0x20e>
   162b6:	e1 14       	cp	r14, r1
   162b8:	f1 04       	cpc	r15, r1
   162ba:	09 f4       	brne	.+2      	; 0x162be <SS80_Transparent_State+0x6c>
   162bc:	d6 c0       	rjmp	.+428    	; 0x1646a <SS80_Transparent_State+0x218>
   162be:	90 fd       	sbrc	r25, 0
   162c0:	0e c0       	rjmp	.+28     	; 0x162de <SS80_Transparent_State+0x8c>
   162c2:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   162c6:	80 ff       	sbrs	r24, 0
   162c8:	0a c0       	rjmp	.+20     	; 0x162de <SS80_Transparent_State+0x8c>
   162ca:	87 ee       	ldi	r24, 0xE7	; 231
   162cc:	91 e2       	ldi	r25, 0x21	; 33
   162ce:	1f 92       	push	r1
   162d0:	9f 93       	push	r25
   162d2:	8f 93       	push	r24
   162d4:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   162d8:	0f 90       	pop	r0
   162da:	0f 90       	pop	r0
   162dc:	0f 90       	pop	r0
   162de:	86 ee       	ldi	r24, 0xE6	; 230
   162e0:	a8 2e       	mov	r10, r24
   162e2:	8b e1       	ldi	r24, 0x1B	; 27
   162e4:	b8 2e       	mov	r11, r24
   162e6:	00 e0       	ldi	r16, 0x00	; 0
   162e8:	10 e0       	ldi	r17, 0x00	; 0
   162ea:	0e 15       	cp	r16, r14
   162ec:	1f 05       	cpc	r17, r15
   162ee:	0c f0       	brlt	.+2      	; 0x162f2 <SS80_Transparent_State+0xa0>
   162f0:	a0 c0       	rjmp	.+320    	; 0x16432 <SS80_Transparent_State+0x1e0>
   162f2:	68 01       	movw	r12, r16
   162f4:	8f ef       	ldi	r24, 0xFF	; 255
   162f6:	c8 1a       	sub	r12, r24
   162f8:	d8 0a       	sbc	r13, r24
   162fa:	f5 01       	movw	r30, r10
   162fc:	81 91       	ld	r24, Z+
   162fe:	5f 01       	movw	r10, r30
   16300:	28 2f       	mov	r18, r24
   16302:	30 e0       	ldi	r19, 0x00	; 0
   16304:	a9 01       	movw	r20, r18
   16306:	40 52       	subi	r20, 0x20	; 32
   16308:	51 09       	sbc	r21, r1
   1630a:	40 31       	cpi	r20, 0x10	; 16
   1630c:	51 05       	cpc	r21, r1
   1630e:	20 f4       	brcc	.+8      	; 0x16318 <SS80_Transparent_State+0xc6>
   16310:	80 52       	subi	r24, 0x20	; 32
   16312:	8b d9       	rcall	.-3306   	; 0x1562a <SS80_Check_Unit>
   16314:	86 01       	movw	r16, r12
   16316:	e9 cf       	rjmp	.-46     	; 0x162ea <SS80_Transparent_State+0x98>
   16318:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1631c:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   16320:	21 30       	cpi	r18, 0x01	; 1
   16322:	31 05       	cpc	r19, r1
   16324:	c9 f4       	brne	.+50     	; 0x16358 <SS80_Transparent_State+0x106>
   16326:	0e 5f       	subi	r16, 0xFE	; 254
   16328:	1f 4f       	sbci	r17, 0xFF	; 255
   1632a:	80 73       	andi	r24, 0x30	; 48
   1632c:	99 27       	eor	r25, r25
   1632e:	89 2b       	or	r24, r25
   16330:	51 f0       	breq	.+20     	; 0x16346 <SS80_Transparent_State+0xf4>
   16332:	82 ec       	ldi	r24, 0xC2	; 194
   16334:	91 e2       	ldi	r25, 0x21	; 33
   16336:	1f 92       	push	r1
   16338:	9f 93       	push	r25
   1633a:	8f 93       	push	r24
   1633c:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   16340:	0f 90       	pop	r0
   16342:	0f 90       	pop	r0
   16344:	0f 90       	pop	r0
   16346:	e0 91 6b 18 	lds	r30, 0x186B	; 0x80186b <SS80p>
   1634a:	f0 91 6c 18 	lds	r31, 0x186C	; 0x80186c <SS80p+0x1>
   1634e:	81 81       	ldd	r24, Z+1	; 0x01
   16350:	90 e0       	ldi	r25, 0x00	; 0
   16352:	0e 94 91 86 	call	0x10d22	; 0x10d22 <gpib_enable_PPR>
   16356:	6d c0       	rjmp	.+218    	; 0x16432 <SS80_Transparent_State+0x1e0>
   16358:	22 30       	cpi	r18, 0x02	; 2
   1635a:	31 05       	cpc	r19, r1
   1635c:	51 f4       	brne	.+20     	; 0x16372 <SS80_Transparent_State+0x120>
   1635e:	0b 5f       	subi	r16, 0xFB	; 251
   16360:	1f 4f       	sbci	r17, 0xFF	; 255
   16362:	80 73       	andi	r24, 0x30	; 48
   16364:	99 27       	eor	r25, r25
   16366:	89 2b       	or	r24, r25
   16368:	09 f4       	brne	.+2      	; 0x1636c <SS80_Transparent_State+0x11a>
   1636a:	63 c0       	rjmp	.+198    	; 0x16432 <SS80_Transparent_State+0x1e0>
   1636c:	85 ea       	ldi	r24, 0xA5	; 165
   1636e:	91 e2       	ldi	r25, 0x21	; 33
   16370:	0c c0       	rjmp	.+24     	; 0x1638a <SS80_Transparent_State+0x138>
   16372:	23 30       	cpi	r18, 0x03	; 3
   16374:	31 05       	cpc	r19, r1
   16376:	91 f4       	brne	.+36     	; 0x1639c <SS80_Transparent_State+0x14a>
   16378:	0b 5f       	subi	r16, 0xFB	; 251
   1637a:	1f 4f       	sbci	r17, 0xFF	; 255
   1637c:	80 73       	andi	r24, 0x30	; 48
   1637e:	99 27       	eor	r25, r25
   16380:	89 2b       	or	r24, r25
   16382:	09 f4       	brne	.+2      	; 0x16386 <SS80_Transparent_State+0x134>
   16384:	56 c0       	rjmp	.+172    	; 0x16432 <SS80_Transparent_State+0x1e0>
   16386:	87 e8       	ldi	r24, 0x87	; 135
   16388:	91 e2       	ldi	r25, 0x21	; 33
   1638a:	1f 92       	push	r1
   1638c:	9f 93       	push	r25
   1638e:	8f 93       	push	r24
   16390:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   16394:	0f 90       	pop	r0
   16396:	0f 90       	pop	r0
   16398:	0f 90       	pop	r0
   1639a:	4b c0       	rjmp	.+150    	; 0x16432 <SS80_Transparent_State+0x1e0>
   1639c:	28 30       	cpi	r18, 0x08	; 8
   1639e:	31 05       	cpc	r19, r1
   163a0:	e9 f4       	brne	.+58     	; 0x163dc <SS80_Transparent_State+0x18a>
   163a2:	85 ff       	sbrs	r24, 5
   163a4:	13 c0       	rjmp	.+38     	; 0x163cc <SS80_Transparent_State+0x17a>
   163a6:	e0 91 69 18 	lds	r30, 0x1869	; 0x801869 <SS80s>
   163aa:	f0 91 6a 18 	lds	r31, 0x186A	; 0x80186a <SS80s+0x1>
   163ae:	85 81       	ldd	r24, Z+5	; 0x05
   163b0:	1f 92       	push	r1
   163b2:	8f 93       	push	r24
   163b4:	80 e6       	ldi	r24, 0x60	; 96
   163b6:	91 e2       	ldi	r25, 0x21	; 33
   163b8:	1f 92       	push	r1
   163ba:	9f 93       	push	r25
   163bc:	8f 93       	push	r24
   163be:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   163c2:	0f 90       	pop	r0
   163c4:	0f 90       	pop	r0
   163c6:	0f 90       	pop	r0
   163c8:	0f 90       	pop	r0
   163ca:	0f 90       	pop	r0
   163cc:	e0 91 69 18 	lds	r30, 0x1869	; 0x801869 <SS80s>
   163d0:	f0 91 6a 18 	lds	r31, 0x186A	; 0x80186a <SS80s+0x1>
   163d4:	85 81       	ldd	r24, Z+5	; 0x05
   163d6:	90 e0       	ldi	r25, 0x00	; 0
   163d8:	ae de       	rcall	.-676    	; 0x16136 <SS80_Channel_Independent_Clear>
   163da:	49 c0       	rjmp	.+146    	; 0x1646e <SS80_Transparent_State+0x21c>
   163dc:	29 30       	cpi	r18, 0x09	; 9
   163de:	31 05       	cpc	r19, r1
   163e0:	b9 f4       	brne	.+46     	; 0x16410 <SS80_Transparent_State+0x1be>
   163e2:	85 ff       	sbrs	r24, 5
   163e4:	13 c0       	rjmp	.+38     	; 0x1640c <SS80_Transparent_State+0x1ba>
   163e6:	e0 91 69 18 	lds	r30, 0x1869	; 0x801869 <SS80s>
   163ea:	f0 91 6a 18 	lds	r31, 0x186A	; 0x80186a <SS80s+0x1>
   163ee:	85 81       	ldd	r24, Z+5	; 0x05
   163f0:	1f 92       	push	r1
   163f2:	8f 93       	push	r24
   163f4:	8c e4       	ldi	r24, 0x4C	; 76
   163f6:	91 e2       	ldi	r25, 0x21	; 33
   163f8:	1f 92       	push	r1
   163fa:	9f 93       	push	r25
   163fc:	8f 93       	push	r24
   163fe:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   16402:	0f 90       	pop	r0
   16404:	0f 90       	pop	r0
   16406:	0f 90       	pop	r0
   16408:	0f 90       	pop	r0
   1640a:	0f 90       	pop	r0
   1640c:	11 df       	rcall	.-478    	; 0x16230 <SS80_Cancel>
   1640e:	2f c0       	rjmp	.+94     	; 0x1646e <SS80_Transparent_State+0x21c>
   16410:	80 ff       	sbrs	r24, 0
   16412:	26 c0       	rjmp	.+76     	; 0x16460 <SS80_Transparent_State+0x20e>
   16414:	3f 93       	push	r19
   16416:	2f 93       	push	r18
   16418:	8c e2       	ldi	r24, 0x2C	; 44
   1641a:	91 e2       	ldi	r25, 0x21	; 33
   1641c:	1f 92       	push	r1
   1641e:	9f 93       	push	r25
   16420:	8f 93       	push	r24
   16422:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   16426:	0f 90       	pop	r0
   16428:	0f 90       	pop	r0
   1642a:	0f 90       	pop	r0
   1642c:	0f 90       	pop	r0
   1642e:	0f 90       	pop	r0
   16430:	86 01       	movw	r16, r12
   16432:	0e 15       	cp	r16, r14
   16434:	1f 05       	cpc	r17, r15
   16436:	a1 f0       	breq	.+40     	; 0x16460 <SS80_Transparent_State+0x20e>
   16438:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1643c:	80 ff       	sbrs	r24, 0
   1643e:	10 c0       	rjmp	.+32     	; 0x16460 <SS80_Transparent_State+0x20e>
   16440:	ff 92       	push	r15
   16442:	ef 92       	push	r14
   16444:	1f 93       	push	r17
   16446:	0f 93       	push	r16
   16448:	80 ef       	ldi	r24, 0xF0	; 240
   1644a:	90 e2       	ldi	r25, 0x20	; 32
   1644c:	1f 92       	push	r1
   1644e:	9f 93       	push	r25
   16450:	8f 93       	push	r24
   16452:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   16456:	0f b6       	in	r0, 0x3f	; 63
   16458:	f8 94       	cli
   1645a:	de bf       	out	0x3e, r29	; 62
   1645c:	0f be       	out	0x3f, r0	; 63
   1645e:	cd bf       	out	0x3d, r28	; 61
   16460:	89 81       	ldd	r24, Y+1	; 0x01
   16462:	9a 81       	ldd	r25, Y+2	; 0x02
   16464:	88 27       	eor	r24, r24
   16466:	90 7d       	andi	r25, 0xD0	; 208
   16468:	02 c0       	rjmp	.+4      	; 0x1646e <SS80_Transparent_State+0x21c>
   1646a:	80 e0       	ldi	r24, 0x00	; 0
   1646c:	90 e0       	ldi	r25, 0x00	; 0
   1646e:	22 96       	adiw	r28, 0x02	; 2
   16470:	ea e0       	ldi	r30, 0x0A	; 10
   16472:	0c 94 04 e6 	jmp	0x1cc08	; 0x1cc08 <__epilogue_restores__+0x10>

00016476 <SS80_error_return>:
   16476:	a3 e0       	ldi	r26, 0x03	; 3
   16478:	b0 e0       	ldi	r27, 0x00	; 0
   1647a:	e1 e4       	ldi	r30, 0x41	; 65
   1647c:	f2 eb       	ldi	r31, 0xB2	; 178
   1647e:	0c 94 f0 e5 	jmp	0x1cbe0	; 0x1cbe0 <__prologue_saves__+0x20>
   16482:	80 e0       	ldi	r24, 0x00	; 0
   16484:	91 e0       	ldi	r25, 0x01	; 1
   16486:	9a 83       	std	Y+2, r25	; 0x02
   16488:	89 83       	std	Y+1, r24	; 0x01
   1648a:	e0 91 69 18 	lds	r30, 0x1869	; 0x801869 <SS80s>
   1648e:	f0 91 6a 18 	lds	r31, 0x186A	; 0x80186a <SS80s+0x1>
   16492:	81 e0       	ldi	r24, 0x01	; 1
   16494:	82 83       	std	Z+2, r24	; 0x02
   16496:	8b 83       	std	Y+3, r24	; 0x03
   16498:	ae 01       	movw	r20, r28
   1649a:	4f 5f       	subi	r20, 0xFF	; 255
   1649c:	5f 4f       	sbci	r21, 0xFF	; 255
   1649e:	61 e0       	ldi	r22, 0x01	; 1
   164a0:	70 e0       	ldi	r23, 0x00	; 0
   164a2:	ce 01       	movw	r24, r28
   164a4:	03 96       	adiw	r24, 0x03	; 3
   164a6:	0e 94 e1 8b 	call	0x117c2	; 0x117c2 <gpib_write_str>
   164aa:	01 97       	sbiw	r24, 0x01	; 1
   164ac:	99 f0       	breq	.+38     	; 0x164d4 <SS80_error_return+0x5e>
   164ae:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   164b2:	80 ff       	sbrs	r24, 0
   164b4:	0a c0       	rjmp	.+20     	; 0x164ca <SS80_error_return+0x54>
   164b6:	82 e2       	ldi	r24, 0x22	; 34
   164b8:	90 e2       	ldi	r25, 0x20	; 32
   164ba:	1f 92       	push	r1
   164bc:	9f 93       	push	r25
   164be:	8f 93       	push	r24
   164c0:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   164c4:	0f 90       	pop	r0
   164c6:	0f 90       	pop	r0
   164c8:	0f 90       	pop	r0
   164ca:	89 81       	ldd	r24, Y+1	; 0x01
   164cc:	9a 81       	ldd	r25, Y+2	; 0x02
   164ce:	88 27       	eor	r24, r24
   164d0:	90 7d       	andi	r25, 0xD0	; 208
   164d2:	07 c0       	rjmp	.+14     	; 0x164e2 <SS80_error_return+0x6c>
   164d4:	e0 91 69 18 	lds	r30, 0x1869	; 0x801869 <SS80s>
   164d8:	f0 91 6a 18 	lds	r31, 0x186A	; 0x80186a <SS80s+0x1>
   164dc:	12 82       	std	Z+2, r1	; 0x02
   164de:	80 e0       	ldi	r24, 0x00	; 0
   164e0:	90 e0       	ldi	r25, 0x00	; 0
   164e2:	23 96       	adiw	r28, 0x03	; 3
   164e4:	e2 e0       	ldi	r30, 0x02	; 2
   164e6:	0c 94 0c e6 	jmp	0x1cc18	; 0x1cc18 <__epilogue_restores__+0x20>

000164ea <SS80_locate_and_read>:
/// - Phases: Command, Report
/// @param[in] u: Unit
/// @return  0

int SS80_Channel_Independent_Clear( int u )
{
   164ea:	ac e0       	ldi	r26, 0x0C	; 12
   164ec:	b0 e0       	ldi	r27, 0x00	; 0
   164ee:	eb e7       	ldi	r30, 0x7B	; 123
   164f0:	f2 eb       	ldi	r31, 0xB2	; 178
   164f2:	0c 94 e1 e5 	jmp	0x1cbc2	; 0x1cbc2 <__prologue_saves__+0x2>
   164f6:	e0 91 69 18 	lds	r30, 0x1869	; 0x801869 <SS80s>
   164fa:	f0 91 6a 18 	lds	r31, 0x186A	; 0x80186a <SS80s+0x1>
   164fe:	27 81       	ldd	r18, Z+7	; 0x07
   16500:	30 85       	ldd	r19, Z+8	; 0x08
   16502:	41 85       	ldd	r20, Z+9	; 0x09
   16504:	52 85       	ldd	r21, Z+10	; 0x0a
   16506:	a0 91 6b 18 	lds	r26, 0x186B	; 0x80186b <SS80p>
   1650a:	b0 91 6c 18 	lds	r27, 0x186C	; 0x80186c <SS80p+0x1>
   1650e:	9f 96       	adiw	r26, 0x2f	; 47
   16510:	0d 90       	ld	r0, X+
   16512:	bc 91       	ld	r27, X
   16514:	a0 2d       	mov	r26, r0
   16516:	12 82       	std	Z+2, r1	; 0x02
   16518:	1a 82       	std	Y+2, r1	; 0x02
   1651a:	19 82       	std	Y+1, r1	; 0x01
   1651c:	54 98       	cbi	0x0a, 4	; 10
   1651e:	4c 99       	sbic	0x09, 4	; 9
   16520:	03 c0       	rjmp	.+6      	; 0x16528 <SS80_locate_and_read+0x3e>
   16522:	80 e0       	ldi	r24, 0x00	; 0
   16524:	90 e1       	ldi	r25, 0x10	; 16
   16526:	45 c1       	rjmp	.+650    	; 0x167b2 <SS80_locate_and_read+0x2c8>
   16528:	0e 94 c0 e5 	call	0x1cb80	; 0x1cb80 <__muluhisi3>
   1652c:	4b 01       	movw	r8, r22
   1652e:	5c 01       	movw	r10, r24
   16530:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16534:	85 ff       	sbrs	r24, 5
   16536:	1c c0       	rjmp	.+56     	; 0x16570 <SS80_locate_and_read+0x86>
   16538:	e0 91 69 18 	lds	r30, 0x1869	; 0x801869 <SS80s>
   1653c:	f0 91 6a 18 	lds	r31, 0x186A	; 0x80186a <SS80s+0x1>
   16540:	86 85       	ldd	r24, Z+14	; 0x0e
   16542:	8f 93       	push	r24
   16544:	85 85       	ldd	r24, Z+13	; 0x0d
   16546:	8f 93       	push	r24
   16548:	84 85       	ldd	r24, Z+12	; 0x0c
   1654a:	8f 93       	push	r24
   1654c:	83 85       	ldd	r24, Z+11	; 0x0b
   1654e:	8f 93       	push	r24
   16550:	bf 92       	push	r11
   16552:	af 92       	push	r10
   16554:	9f 92       	push	r9
   16556:	8f 92       	push	r8
   16558:	86 e1       	ldi	r24, 0x16	; 22
   1655a:	97 e2       	ldi	r25, 0x27	; 39
   1655c:	1f 92       	push	r1
   1655e:	9f 93       	push	r25
   16560:	8f 93       	push	r24
   16562:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   16566:	0f b6       	in	r0, 0x3f	; 63
   16568:	f8 94       	cli
   1656a:	de bf       	out	0x3e, r29	; 62
   1656c:	0f be       	out	0x3f, r0	; 63
   1656e:	cd bf       	out	0x3d, r28	; 61
   16570:	16 db       	rcall	.-2516   	; 0x15b9e <SS80_cmd_seek>
   16572:	89 2b       	or	r24, r25
   16574:	09 f0       	breq	.+2      	; 0x16578 <SS80_locate_and_read+0x8e>
   16576:	af c0       	rjmp	.+350    	; 0x166d6 <SS80_locate_and_read+0x1ec>
   16578:	e0 91 69 18 	lds	r30, 0x1869	; 0x801869 <SS80s>
   1657c:	f0 91 6a 18 	lds	r31, 0x186A	; 0x80186a <SS80s+0x1>
   16580:	43 84       	ldd	r4, Z+11	; 0x0b
   16582:	54 84       	ldd	r5, Z+12	; 0x0c
   16584:	65 84       	ldd	r6, Z+13	; 0x0d
   16586:	76 84       	ldd	r7, Z+14	; 0x0e
   16588:	1b 82       	std	Y+3, r1	; 0x03
   1658a:	1c 82       	std	Y+4, r1	; 0x04
   1658c:	1d 82       	std	Y+5, r1	; 0x05
   1658e:	1e 82       	std	Y+6, r1	; 0x06
   16590:	88 ef       	ldi	r24, 0xF8	; 248
   16592:	96 e2       	ldi	r25, 0x26	; 38
   16594:	9c 01       	movw	r18, r24
   16596:	40 e0       	ldi	r20, 0x00	; 0
   16598:	2f 83       	std	Y+7, r18	; 0x07
   1659a:	38 87       	std	Y+8, r19	; 0x08
   1659c:	49 87       	std	Y+9, r20	; 0x09
   1659e:	33 24       	eor	r3, r3
   165a0:	33 94       	inc	r3
   165a2:	87 ec       	ldi	r24, 0xC7	; 199
   165a4:	96 e2       	ldi	r25, 0x26	; 38
   165a6:	9c 01       	movw	r18, r24
   165a8:	40 e0       	ldi	r20, 0x00	; 0
   165aa:	2a 87       	std	Y+10, r18	; 0x0a
   165ac:	3b 87       	std	Y+11, r19	; 0x0b
   165ae:	4c 87       	std	Y+12, r20	; 0x0c
   165b0:	34 c0       	rjmp	.+104    	; 0x1661a <SS80_locate_and_read+0x130>
   165b2:	86 fd       	sbrc	r24, 6
   165b4:	0e 94 d9 85 	call	0x10bb2	; 0x10bb2 <gpib_timer_elapsed_begin>
   165b8:	ae 01       	movw	r20, r28
   165ba:	4f 5f       	subi	r20, 0xFF	; 255
   165bc:	5f 4f       	sbci	r21, 0xFF	; 255
   165be:	b6 01       	movw	r22, r12
   165c0:	86 ee       	ldi	r24, 0xE6	; 230
   165c2:	9b e1       	ldi	r25, 0x1B	; 27
   165c4:	0e 94 e1 8b 	call	0x117c2	; 0x117c2 <gpib_write_str>
   165c8:	8c 01       	movw	r16, r24
   165ca:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   165ce:	86 ff       	sbrs	r24, 6
   165d0:	04 c0       	rjmp	.+8      	; 0x165da <SS80_locate_and_read+0xf0>
   165d2:	8f ef       	ldi	r24, 0xFF	; 255
   165d4:	9f e0       	ldi	r25, 0x0F	; 15
   165d6:	0e 94 eb 85 	call	0x10bd6	; 0x10bd6 <gpib_timer_elapsed_end>
   165da:	c0 16       	cp	r12, r16
   165dc:	d1 06       	cpc	r13, r17
   165de:	09 f0       	breq	.+2      	; 0x165e2 <SS80_locate_and_read+0xf8>
   165e0:	83 c0       	rjmp	.+262    	; 0x166e8 <SS80_locate_and_read+0x1fe>
   165e2:	0d 2c       	mov	r0, r13
   165e4:	00 0c       	add	r0, r0
   165e6:	ee 08       	sbc	r14, r14
   165e8:	ff 08       	sbc	r15, r15
   165ea:	8c 0c       	add	r8, r12
   165ec:	9d 1c       	adc	r9, r13
   165ee:	ae 1c       	adc	r10, r14
   165f0:	bf 1c       	adc	r11, r15
   165f2:	01 2e       	mov	r0, r17
   165f4:	00 0c       	add	r0, r0
   165f6:	22 0b       	sbc	r18, r18
   165f8:	33 0b       	sbc	r19, r19
   165fa:	8b 81       	ldd	r24, Y+3	; 0x03
   165fc:	9c 81       	ldd	r25, Y+4	; 0x04
   165fe:	ad 81       	ldd	r26, Y+5	; 0x05
   16600:	be 81       	ldd	r27, Y+6	; 0x06
   16602:	80 0f       	add	r24, r16
   16604:	91 1f       	adc	r25, r17
   16606:	a2 1f       	adc	r26, r18
   16608:	b3 1f       	adc	r27, r19
   1660a:	8b 83       	std	Y+3, r24	; 0x03
   1660c:	9c 83       	std	Y+4, r25	; 0x04
   1660e:	ad 83       	std	Y+5, r26	; 0x05
   16610:	be 83       	std	Y+6, r27	; 0x06
   16612:	40 1a       	sub	r4, r16
   16614:	51 0a       	sbc	r5, r17
   16616:	62 0a       	sbc	r6, r18
   16618:	73 0a       	sbc	r7, r19
   1661a:	41 14       	cp	r4, r1
   1661c:	51 04       	cpc	r5, r1
   1661e:	61 04       	cpc	r6, r1
   16620:	71 04       	cpc	r7, r1
   16622:	09 f4       	brne	.+2      	; 0x16626 <SS80_locate_and_read+0x13c>
   16624:	93 c0       	rjmp	.+294    	; 0x1674c <SS80_locate_and_read+0x262>
   16626:	54 98       	cbi	0x0a, 4	; 10
   16628:	4c 9b       	sbis	0x09, 4	; 9
   1662a:	7b cf       	rjmp	.-266    	; 0x16522 <SS80_locate_and_read+0x38>
   1662c:	31 e0       	ldi	r19, 0x01	; 1
   1662e:	43 16       	cp	r4, r19
   16630:	53 06       	cpc	r5, r19
   16632:	61 04       	cpc	r6, r1
   16634:	71 04       	cpc	r7, r1
   16636:	08 f4       	brcc	.+2      	; 0x1663a <SS80_locate_and_read+0x150>
   16638:	50 c0       	rjmp	.+160    	; 0x166da <SS80_locate_and_read+0x1f0>
   1663a:	1a 82       	std	Y+2, r1	; 0x02
   1663c:	19 82       	std	Y+1, r1	; 0x01
   1663e:	c1 2c       	mov	r12, r1
   16640:	dd 24       	eor	r13, r13
   16642:	d3 94       	inc	r13
   16644:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16648:	86 fd       	sbrc	r24, 6
   1664a:	0e 94 d9 85 	call	0x10bb2	; 0x10bb2 <gpib_timer_elapsed_begin>
   1664e:	e0 90 69 18 	lds	r14, 0x1869	; 0x801869 <SS80s>
   16652:	f0 90 6a 18 	lds	r15, 0x186A	; 0x80186a <SS80s+0x1>
   16656:	43 e0       	ldi	r20, 0x03	; 3
   16658:	e4 0e       	add	r14, r20
   1665a:	f1 1c       	adc	r15, r1
   1665c:	80 91 6b 18 	lds	r24, 0x186B	; 0x80186b <SS80p>
   16660:	90 91 6c 18 	lds	r25, 0x186C	; 0x80186c <SS80p+0x1>
   16664:	86 01       	movw	r16, r12
   16666:	26 ee       	ldi	r18, 0xE6	; 230
   16668:	3b e1       	ldi	r19, 0x1B	; 27
   1666a:	b5 01       	movw	r22, r10
   1666c:	a4 01       	movw	r20, r8
   1666e:	02 96       	adiw	r24, 0x02	; 2
   16670:	0e 94 2b 85 	call	0x10a56	; 0x10a56 <dbf_open_read>
   16674:	8c 01       	movw	r16, r24
   16676:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1667a:	86 ff       	sbrs	r24, 6
   1667c:	04 c0       	rjmp	.+8      	; 0x16686 <SS80_locate_and_read+0x19c>
   1667e:	85 ef       	ldi	r24, 0xF5	; 245
   16680:	9f e0       	ldi	r25, 0x0F	; 15
   16682:	0e 94 eb 85 	call	0x10bd6	; 0x10bd6 <gpib_timer_elapsed_end>
   16686:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1668a:	85 ff       	sbrs	r24, 5
   1668c:	0e c0       	rjmp	.+28     	; 0x166aa <SS80_locate_and_read+0x1c0>
   1668e:	1f 93       	push	r17
   16690:	0f 93       	push	r16
   16692:	1f 92       	push	r1
   16694:	88 85       	ldd	r24, Y+8	; 0x08
   16696:	8f 93       	push	r24
   16698:	9f 81       	ldd	r25, Y+7	; 0x07
   1669a:	9f 93       	push	r25
   1669c:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   166a0:	0f 90       	pop	r0
   166a2:	0f 90       	pop	r0
   166a4:	0f 90       	pop	r0
   166a6:	0f 90       	pop	r0
   166a8:	0f 90       	pop	r0
   166aa:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   166ae:	17 ff       	sbrs	r17, 7
   166b0:	80 cf       	rjmp	.-256    	; 0x165b2 <SS80_locate_and_read+0xc8>
   166b2:	e0 91 69 18 	lds	r30, 0x1869	; 0x801869 <SS80s>
   166b6:	f0 91 6a 18 	lds	r31, 0x186A	; 0x80186a <SS80s+0x1>
   166ba:	91 e0       	ldi	r25, 0x01	; 1
   166bc:	92 83       	std	Z+2, r25	; 0x02
   166be:	80 ff       	sbrs	r24, 0
   166c0:	0a c0       	rjmp	.+20     	; 0x166d6 <SS80_locate_and_read+0x1ec>
   166c2:	80 ee       	ldi	r24, 0xE0	; 224
   166c4:	96 e2       	ldi	r25, 0x26	; 38
   166c6:	1f 92       	push	r1
   166c8:	9f 93       	push	r25
   166ca:	8f 93       	push	r24
   166cc:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   166d0:	0f 90       	pop	r0
   166d2:	0f 90       	pop	r0
   166d4:	0f 90       	pop	r0
   166d6:	cf de       	rcall	.-610    	; 0x16476 <SS80_error_return>
   166d8:	6c c0       	rjmp	.+216    	; 0x167b2 <SS80_locate_and_read+0x2c8>
   166da:	62 01       	movw	r12, r4
   166dc:	89 81       	ldd	r24, Y+1	; 0x01
   166de:	9a 81       	ldd	r25, Y+2	; 0x02
   166e0:	91 60       	ori	r25, 0x01	; 1
   166e2:	9a 83       	std	Y+2, r25	; 0x02
   166e4:	89 83       	std	Y+1, r24	; 0x01
   166e6:	ae cf       	rjmp	.-164    	; 0x16644 <SS80_locate_and_read+0x15a>
   166e8:	e0 91 69 18 	lds	r30, 0x1869	; 0x801869 <SS80s>
   166ec:	f0 91 6a 18 	lds	r31, 0x186A	; 0x80186a <SS80s+0x1>
   166f0:	32 82       	std	Z+2, r3	; 0x02
   166f2:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   166f6:	80 ff       	sbrs	r24, 0
   166f8:	0a c0       	rjmp	.+20     	; 0x1670e <SS80_locate_and_read+0x224>
   166fa:	1f 92       	push	r1
   166fc:	ab 85       	ldd	r26, Y+11	; 0x0b
   166fe:	af 93       	push	r26
   16700:	ba 85       	ldd	r27, Y+10	; 0x0a
   16702:	bf 93       	push	r27
   16704:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   16708:	0f 90       	pop	r0
   1670a:	0f 90       	pop	r0
   1670c:	0f 90       	pop	r0
   1670e:	89 81       	ldd	r24, Y+1	; 0x01
   16710:	9a 81       	ldd	r25, Y+2	; 0x02
   16712:	88 27       	eor	r24, r24
   16714:	90 7d       	andi	r25, 0xD0	; 208
   16716:	89 2b       	or	r24, r25
   16718:	09 f4       	brne	.+2      	; 0x1671c <SS80_locate_and_read+0x232>
   1671a:	63 cf       	rjmp	.-314    	; 0x165e2 <SS80_locate_and_read+0xf8>
   1671c:	e0 91 69 18 	lds	r30, 0x1869	; 0x801869 <SS80s>
   16720:	f0 91 6a 18 	lds	r31, 0x186A	; 0x80186a <SS80s+0x1>
   16724:	83 81       	ldd	r24, Z+3	; 0x03
   16726:	94 81       	ldd	r25, Z+4	; 0x04
   16728:	80 62       	ori	r24, 0x20	; 32
   1672a:	94 83       	std	Z+4, r25	; 0x04
   1672c:	83 83       	std	Z+3, r24	; 0x03
   1672e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16732:	80 ff       	sbrs	r24, 0
   16734:	23 c0       	rjmp	.+70     	; 0x1677c <SS80_locate_and_read+0x292>
   16736:	82 ea       	ldi	r24, 0xA2	; 162
   16738:	96 e2       	ldi	r25, 0x26	; 38
   1673a:	1f 92       	push	r1
   1673c:	9f 93       	push	r25
   1673e:	8f 93       	push	r24
   16740:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   16744:	0f 90       	pop	r0
   16746:	0f 90       	pop	r0
   16748:	0f 90       	pop	r0
   1674a:	18 c0       	rjmp	.+48     	; 0x1677c <SS80_locate_and_read+0x292>
   1674c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16750:	85 ff       	sbrs	r24, 5
   16752:	14 c0       	rjmp	.+40     	; 0x1677c <SS80_locate_and_read+0x292>
   16754:	9e 81       	ldd	r25, Y+6	; 0x06
   16756:	9f 93       	push	r25
   16758:	ad 81       	ldd	r26, Y+5	; 0x05
   1675a:	af 93       	push	r26
   1675c:	bc 81       	ldd	r27, Y+4	; 0x04
   1675e:	bf 93       	push	r27
   16760:	eb 81       	ldd	r30, Y+3	; 0x03
   16762:	ef 93       	push	r30
   16764:	8a e7       	ldi	r24, 0x7A	; 122
   16766:	96 e2       	ldi	r25, 0x26	; 38
   16768:	1f 92       	push	r1
   1676a:	9f 93       	push	r25
   1676c:	8f 93       	push	r24
   1676e:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   16772:	0f b6       	in	r0, 0x3f	; 63
   16774:	f8 94       	cli
   16776:	de bf       	out	0x3e, r29	; 62
   16778:	0f be       	out	0x3f, r0	; 63
   1677a:	cd bf       	out	0x3d, r28	; 61
   1677c:	00 91 69 18 	lds	r16, 0x1869	; 0x801869 <SS80s>
   16780:	10 91 6a 18 	lds	r17, 0x186A	; 0x80186a <SS80s+0x1>
   16784:	e0 91 6b 18 	lds	r30, 0x186B	; 0x80186b <SS80p>
   16788:	f0 91 6c 18 	lds	r31, 0x186C	; 0x80186c <SS80p+0x1>
   1678c:	27 a5       	ldd	r18, Z+47	; 0x2f
   1678e:	30 a9       	ldd	r19, Z+48	; 0x30
   16790:	40 e0       	ldi	r20, 0x00	; 0
   16792:	50 e0       	ldi	r21, 0x00	; 0
   16794:	c5 01       	movw	r24, r10
   16796:	b4 01       	movw	r22, r8
   16798:	0e 94 5e e5 	call	0x1cabc	; 0x1cabc <__udivmodsi4>
   1679c:	d8 01       	movw	r26, r16
   1679e:	17 96       	adiw	r26, 0x07	; 7
   167a0:	2d 93       	st	X+, r18
   167a2:	3d 93       	st	X+, r19
   167a4:	4d 93       	st	X+, r20
   167a6:	5c 93       	st	X, r21
   167a8:	1a 97       	sbiw	r26, 0x0a	; 10
   167aa:	89 81       	ldd	r24, Y+1	; 0x01
   167ac:	9a 81       	ldd	r25, Y+2	; 0x02
   167ae:	88 27       	eor	r24, r24
   167b0:	90 7d       	andi	r25, 0xD0	; 208
   167b2:	2c 96       	adiw	r28, 0x0c	; 12
   167b4:	e1 e1       	ldi	r30, 0x11	; 17
   167b6:	0c 94 fd e5 	jmp	0x1cbfa	; 0x1cbfa <__epilogue_restores__+0x2>

000167ba <SS80_Execute_State>:
   167ba:	cf 93       	push	r28
   167bc:	df 93       	push	r29
   167be:	e0 91 6b 18 	lds	r30, 0x186B	; 0x80186b <SS80p>
   167c2:	f0 91 6c 18 	lds	r31, 0x186C	; 0x80186c <SS80p+0x1>
   167c6:	81 81       	ldd	r24, Z+1	; 0x01
   167c8:	90 e0       	ldi	r25, 0x00	; 0
   167ca:	0e 94 c2 86 	call	0x10d84	; 0x10d84 <gpib_disable_PPR>
   167ce:	e0 91 69 18 	lds	r30, 0x1869	; 0x801869 <SS80s>
   167d2:	f0 91 6a 18 	lds	r31, 0x186A	; 0x80186a <SS80s+0x1>
   167d6:	80 81       	ld	r24, Z
   167d8:	91 81       	ldd	r25, Z+1	; 0x01
   167da:	82 30       	cpi	r24, 0x02	; 2
   167dc:	91 05       	cpc	r25, r1
   167de:	89 f0       	breq	.+34     	; 0x16802 <SS80_Execute_State+0x48>
   167e0:	3c f4       	brge	.+14     	; 0x167f0 <SS80_Execute_State+0x36>
   167e2:	00 97       	sbiw	r24, 0x00	; 0
   167e4:	91 f1       	breq	.+100    	; 0x1684a <SS80_Execute_State+0x90>
   167e6:	81 30       	cpi	r24, 0x01	; 1
   167e8:	91 05       	cpc	r25, r1
   167ea:	b9 f4       	brne	.+46     	; 0x1681a <SS80_Execute_State+0x60>
   167ec:	7e de       	rcall	.-772    	; 0x164ea <SS80_locate_and_read>
   167ee:	0d c0       	rjmp	.+26     	; 0x1680a <SS80_Execute_State+0x50>
   167f0:	83 30       	cpi	r24, 0x03	; 3
   167f2:	91 05       	cpc	r25, r1
   167f4:	41 f0       	breq	.+16     	; 0x16806 <SS80_Execute_State+0x4c>
   167f6:	84 30       	cpi	r24, 0x04	; 4
   167f8:	91 05       	cpc	r25, r1
   167fa:	79 f4       	brne	.+30     	; 0x1681a <SS80_Execute_State+0x60>
   167fc:	0e 94 a5 aa 	call	0x1554a	; 0x1554a <SS80_describe>
   16800:	04 c0       	rjmp	.+8      	; 0x1680a <SS80_Execute_State+0x50>
   16802:	4e da       	rcall	.-2916   	; 0x15ca0 <SS80_locate_and_write>
   16804:	02 c0       	rjmp	.+4      	; 0x1680a <SS80_Execute_State+0x50>
   16806:	0e 94 24 aa 	call	0x15448	; 0x15448 <SS80_send_status>
   1680a:	ec 01       	movw	r28, r24
   1680c:	e0 91 69 18 	lds	r30, 0x1869	; 0x801869 <SS80s>
   16810:	f0 91 6a 18 	lds	r31, 0x186A	; 0x80186a <SS80s+0x1>
   16814:	11 82       	std	Z+1, r1	; 0x01
   16816:	10 82       	st	Z, r1
   16818:	1a c0       	rjmp	.+52     	; 0x1684e <SS80_Execute_State+0x94>
   1681a:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   1681e:	20 ff       	sbrs	r18, 0
   16820:	0e c0       	rjmp	.+28     	; 0x1683e <SS80_Execute_State+0x84>
   16822:	9f 93       	push	r25
   16824:	8f 93       	push	r24
   16826:	8e e3       	ldi	r24, 0x3E	; 62
   16828:	97 e2       	ldi	r25, 0x27	; 39
   1682a:	1f 92       	push	r1
   1682c:	9f 93       	push	r25
   1682e:	8f 93       	push	r24
   16830:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   16834:	0f 90       	pop	r0
   16836:	0f 90       	pop	r0
   16838:	0f 90       	pop	r0
   1683a:	0f 90       	pop	r0
   1683c:	0f 90       	pop	r0
   1683e:	e0 91 69 18 	lds	r30, 0x1869	; 0x801869 <SS80s>
   16842:	f0 91 6a 18 	lds	r31, 0x186A	; 0x80186a <SS80s+0x1>
   16846:	11 82       	std	Z+1, r1	; 0x01
   16848:	10 82       	st	Z, r1
   1684a:	c0 e0       	ldi	r28, 0x00	; 0
   1684c:	d0 e0       	ldi	r29, 0x00	; 0
   1684e:	e0 91 6b 18 	lds	r30, 0x186B	; 0x80186b <SS80p>
   16852:	f0 91 6c 18 	lds	r31, 0x186C	; 0x80186c <SS80p+0x1>
   16856:	81 81       	ldd	r24, Z+1	; 0x01
   16858:	90 e0       	ldi	r25, 0x00	; 0
   1685a:	0e 94 91 86 	call	0x10d22	; 0x10d22 <gpib_enable_PPR>
   1685e:	ce 01       	movw	r24, r28
   16860:	df 91       	pop	r29
   16862:	cf 91       	pop	r28
   16864:	08 95       	ret

00016866 <SS80_COMMANDS>:
   16866:	1f 93       	push	r17
   16868:	cf 93       	push	r28
   1686a:	df 93       	push	r29
   1686c:	18 2f       	mov	r17, r24
   1686e:	80 91 ea 1d 	lds	r24, 0x1DEA	; 0x801dea <talking>
   16872:	90 e0       	ldi	r25, 0x00	; 0
   16874:	0e 94 ad 8c 	call	0x1195a	; 0x1195a <SS80_is_MTA>
   16878:	89 2b       	or	r24, r25
   1687a:	19 f0       	breq	.+6      	; 0x16882 <SS80_COMMANDS+0x1c>
   1687c:	15 36       	cpi	r17, 0x65	; 101
   1687e:	19 f5       	brne	.+70     	; 0x168c6 <SS80_COMMANDS+0x60>
   16880:	09 c0       	rjmp	.+18     	; 0x16894 <SS80_COMMANDS+0x2e>
   16882:	80 91 ec 1d 	lds	r24, 0x1DEC	; 0x801dec <listening>
   16886:	90 e0       	ldi	r25, 0x00	; 0
   16888:	0e 94 9e 8c 	call	0x1193c	; 0x1193c <SS80_is_MLA>
   1688c:	ec 01       	movw	r28, r24
   1688e:	89 2b       	or	r24, r25
   16890:	a9 f7       	brne	.-22     	; 0x1687c <SS80_COMMANDS+0x16>
   16892:	ae c0       	rjmp	.+348    	; 0x169f0 <SS80_COMMANDS+0x18a>
   16894:	80 91 ec 1d 	lds	r24, 0x1DEC	; 0x801dec <listening>
   16898:	90 e0       	ldi	r25, 0x00	; 0
   1689a:	0e 94 9e 8c 	call	0x1193c	; 0x1193c <SS80_is_MLA>
   1689e:	89 2b       	or	r24, r25
   168a0:	09 f4       	brne	.+2      	; 0x168a4 <SS80_COMMANDS+0x3e>
   168a2:	a3 c0       	rjmp	.+326    	; 0x169ea <SS80_COMMANDS+0x184>
   168a4:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   168a8:	85 ff       	sbrs	r24, 5
   168aa:	0a c0       	rjmp	.+20     	; 0x168c0 <SS80_COMMANDS+0x5a>
   168ac:	8c e0       	ldi	r24, 0x0C	; 12
   168ae:	90 e2       	ldi	r25, 0x20	; 32
   168b0:	1f 92       	push	r1
   168b2:	9f 93       	push	r25
   168b4:	8f 93       	push	r24
   168b6:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   168ba:	0f 90       	pop	r0
   168bc:	0f 90       	pop	r0
   168be:	0f 90       	pop	r0
   168c0:	0e 94 57 ab 	call	0x156ae	; 0x156ae <SS80_Command_State>
   168c4:	73 c0       	rjmp	.+230    	; 0x169ac <SS80_COMMANDS+0x146>
   168c6:	1e 36       	cpi	r17, 0x6E	; 110
   168c8:	01 f5       	brne	.+64     	; 0x1690a <SS80_COMMANDS+0xa4>
   168ca:	80 91 ec 1d 	lds	r24, 0x1DEC	; 0x801dec <listening>
   168ce:	90 e0       	ldi	r25, 0x00	; 0
   168d0:	0e 94 9e 8c 	call	0x1193c	; 0x1193c <SS80_is_MLA>
   168d4:	89 2b       	or	r24, r25
   168d6:	79 f0       	breq	.+30     	; 0x168f6 <SS80_COMMANDS+0x90>
   168d8:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   168dc:	85 ff       	sbrs	r24, 5
   168de:	13 c0       	rjmp	.+38     	; 0x16906 <SS80_COMMANDS+0xa0>
   168e0:	86 ef       	ldi	r24, 0xF6	; 246
   168e2:	9f e1       	ldi	r25, 0x1F	; 31
   168e4:	1f 92       	push	r1
   168e6:	9f 93       	push	r25
   168e8:	8f 93       	push	r24
   168ea:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   168ee:	0f 90       	pop	r0
   168f0:	0f 90       	pop	r0
   168f2:	0f 90       	pop	r0
   168f4:	08 c0       	rjmp	.+16     	; 0x16906 <SS80_COMMANDS+0xa0>
   168f6:	80 91 ea 1d 	lds	r24, 0x1DEA	; 0x801dea <talking>
   168fa:	90 e0       	ldi	r25, 0x00	; 0
   168fc:	0e 94 ad 8c 	call	0x1195a	; 0x1195a <SS80_is_MTA>
   16900:	89 2b       	or	r24, r25
   16902:	51 f7       	brne	.-44     	; 0x168d8 <SS80_COMMANDS+0x72>
   16904:	72 c0       	rjmp	.+228    	; 0x169ea <SS80_COMMANDS+0x184>
   16906:	59 df       	rcall	.-334    	; 0x167ba <SS80_Execute_State>
   16908:	51 c0       	rjmp	.+162    	; 0x169ac <SS80_COMMANDS+0x146>
   1690a:	10 37       	cpi	r17, 0x70	; 112
   1690c:	b9 f5       	brne	.+110    	; 0x1697c <SS80_COMMANDS+0x116>
   1690e:	80 91 ea 1d 	lds	r24, 0x1DEA	; 0x801dea <talking>
   16912:	90 e0       	ldi	r25, 0x00	; 0
   16914:	0e 94 ad 8c 	call	0x1195a	; 0x1195a <SS80_is_MTA>
   16918:	89 2b       	or	r24, r25
   1691a:	81 f0       	breq	.+32     	; 0x1693c <SS80_COMMANDS+0xd6>
   1691c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16920:	85 ff       	sbrs	r24, 5
   16922:	0a c0       	rjmp	.+20     	; 0x16938 <SS80_COMMANDS+0xd2>
   16924:	81 ee       	ldi	r24, 0xE1	; 225
   16926:	9f e1       	ldi	r25, 0x1F	; 31
   16928:	1f 92       	push	r1
   1692a:	9f 93       	push	r25
   1692c:	8f 93       	push	r24
   1692e:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   16932:	0f 90       	pop	r0
   16934:	0f 90       	pop	r0
   16936:	0f 90       	pop	r0
   16938:	4a db       	rcall	.-2412   	; 0x15fce <SS80_Report>
   1693a:	38 c0       	rjmp	.+112    	; 0x169ac <SS80_COMMANDS+0x146>
   1693c:	80 91 ec 1d 	lds	r24, 0x1DEC	; 0x801dec <listening>
   16940:	90 e0       	ldi	r25, 0x00	; 0
   16942:	0e 94 9e 8c 	call	0x1193c	; 0x1193c <SS80_is_MLA>
   16946:	89 2b       	or	r24, r25
   16948:	09 f4       	brne	.+2      	; 0x1694c <SS80_COMMANDS+0xe6>
   1694a:	4f c0       	rjmp	.+158    	; 0x169ea <SS80_COMMANDS+0x184>
   1694c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16950:	85 ff       	sbrs	r24, 5
   16952:	0a c0       	rjmp	.+20     	; 0x16968 <SS80_COMMANDS+0x102>
   16954:	82 ed       	ldi	r24, 0xD2	; 210
   16956:	9f e1       	ldi	r25, 0x1F	; 31
   16958:	1f 92       	push	r1
   1695a:	9f 93       	push	r25
   1695c:	8f 93       	push	r24
   1695e:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   16962:	0f 90       	pop	r0
   16964:	0f 90       	pop	r0
   16966:	0f 90       	pop	r0
   16968:	e0 91 6b 18 	lds	r30, 0x186B	; 0x80186b <SS80p>
   1696c:	f0 91 6c 18 	lds	r31, 0x186C	; 0x80186c <SS80p+0x1>
   16970:	81 81       	ldd	r24, Z+1	; 0x01
   16972:	90 e0       	ldi	r25, 0x00	; 0
   16974:	0e 94 c2 86 	call	0x10d84	; 0x10d84 <gpib_disable_PPR>
   16978:	18 dc       	rcall	.-2000   	; 0x161aa <SS80_Amigo_Clear>
   1697a:	18 c0       	rjmp	.+48     	; 0x169ac <SS80_COMMANDS+0x146>
   1697c:	12 37       	cpi	r17, 0x72	; 114
   1697e:	c1 f4       	brne	.+48     	; 0x169b0 <SS80_COMMANDS+0x14a>
   16980:	80 91 ec 1d 	lds	r24, 0x1DEC	; 0x801dec <listening>
   16984:	90 e0       	ldi	r25, 0x00	; 0
   16986:	0e 94 9e 8c 	call	0x1193c	; 0x1193c <SS80_is_MLA>
   1698a:	89 2b       	or	r24, r25
   1698c:	89 f0       	breq	.+34     	; 0x169b0 <SS80_COMMANDS+0x14a>
   1698e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16992:	85 ff       	sbrs	r24, 5
   16994:	0a c0       	rjmp	.+20     	; 0x169aa <SS80_COMMANDS+0x144>
   16996:	8e eb       	ldi	r24, 0xBE	; 190
   16998:	9f e1       	ldi	r25, 0x1F	; 31
   1699a:	1f 92       	push	r1
   1699c:	9f 93       	push	r25
   1699e:	8f 93       	push	r24
   169a0:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   169a4:	0f 90       	pop	r0
   169a6:	0f 90       	pop	r0
   169a8:	0f 90       	pop	r0
   169aa:	53 dc       	rcall	.-1882   	; 0x16252 <SS80_Transparent_State>
   169ac:	ec 01       	movw	r28, r24
   169ae:	3d c0       	rjmp	.+122    	; 0x16a2a <SS80_COMMANDS+0x1c4>
   169b0:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   169b4:	80 ff       	sbrs	r24, 0
   169b6:	19 c0       	rjmp	.+50     	; 0x169ea <SS80_COMMANDS+0x184>
   169b8:	80 91 ea 1d 	lds	r24, 0x1DEA	; 0x801dea <talking>
   169bc:	1f 92       	push	r1
   169be:	8f 93       	push	r24
   169c0:	80 91 ec 1d 	lds	r24, 0x1DEC	; 0x801dec <listening>
   169c4:	1f 92       	push	r1
   169c6:	8f 93       	push	r24
   169c8:	1f 92       	push	r1
   169ca:	1f 93       	push	r17
   169cc:	8a e8       	ldi	r24, 0x8A	; 138
   169ce:	9f e1       	ldi	r25, 0x1F	; 31
   169d0:	1f 92       	push	r1
   169d2:	9f 93       	push	r25
   169d4:	8f 93       	push	r24
   169d6:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   169da:	8d b7       	in	r24, 0x3d	; 61
   169dc:	9e b7       	in	r25, 0x3e	; 62
   169de:	09 96       	adiw	r24, 0x09	; 9
   169e0:	0f b6       	in	r0, 0x3f	; 63
   169e2:	f8 94       	cli
   169e4:	9e bf       	out	0x3e, r25	; 62
   169e6:	0f be       	out	0x3f, r0	; 63
   169e8:	8d bf       	out	0x3d, r24	; 61
   169ea:	c0 e0       	ldi	r28, 0x00	; 0
   169ec:	d0 e0       	ldi	r29, 0x00	; 0
   169ee:	1d c0       	rjmp	.+58     	; 0x16a2a <SS80_COMMANDS+0x1c4>
   169f0:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   169f4:	80 ff       	sbrs	r24, 0
   169f6:	f9 cf       	rjmp	.-14     	; 0x169ea <SS80_COMMANDS+0x184>
   169f8:	80 91 ea 1d 	lds	r24, 0x1DEA	; 0x801dea <talking>
   169fc:	1f 92       	push	r1
   169fe:	8f 93       	push	r24
   16a00:	80 91 ec 1d 	lds	r24, 0x1DEC	; 0x801dec <listening>
   16a04:	1f 92       	push	r1
   16a06:	8f 93       	push	r24
   16a08:	1f 92       	push	r1
   16a0a:	1f 93       	push	r17
   16a0c:	86 e5       	ldi	r24, 0x56	; 86
   16a0e:	9f e1       	ldi	r25, 0x1F	; 31
   16a10:	1f 92       	push	r1
   16a12:	9f 93       	push	r25
   16a14:	8f 93       	push	r24
   16a16:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   16a1a:	8d b7       	in	r24, 0x3d	; 61
   16a1c:	9e b7       	in	r25, 0x3e	; 62
   16a1e:	09 96       	adiw	r24, 0x09	; 9
   16a20:	0f b6       	in	r0, 0x3f	; 63
   16a22:	f8 94       	cli
   16a24:	9e bf       	out	0x3e, r25	; 62
   16a26:	0f be       	out	0x3f, r0	; 63
   16a28:	8d bf       	out	0x3d, r24	; 61
   16a2a:	ce 01       	movw	r24, r28
   16a2c:	df 91       	pop	r29
   16a2e:	cf 91       	pop	r28
   16a30:	1f 91       	pop	r17
   16a32:	08 95       	ret

00016a34 <amigo_overflow_check>:
   16a34:	cf 92       	push	r12
   16a36:	df 92       	push	r13
   16a38:	ef 92       	push	r14
   16a3a:	0f 93       	push	r16
   16a3c:	1f 93       	push	r17
   16a3e:	cf 93       	push	r28
   16a40:	df 93       	push	r29
   16a42:	ec 01       	movw	r28, r24
   16a44:	8b 01       	movw	r16, r22
   16a46:	80 e0       	ldi	r24, 0x00	; 0
   16a48:	90 e0       	ldi	r25, 0x00	; 0
   16a4a:	2d e2       	ldi	r18, 0x2D	; 45
   16a4c:	3f e2       	ldi	r19, 0x2F	; 47
   16a4e:	69 01       	movw	r12, r18
   16a50:	2d 81       	ldd	r18, Y+5	; 0x05
   16a52:	30 e0       	ldi	r19, 0x00	; 0
   16a54:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <AMIGOp>
   16a58:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <AMIGOp+0x1>
   16a5c:	47 a1       	ldd	r20, Z+39	; 0x27
   16a5e:	50 a5       	ldd	r21, Z+40	; 0x28
   16a60:	24 17       	cp	r18, r20
   16a62:	35 07       	cpc	r19, r21
   16a64:	7c f1       	brlt	.+94     	; 0x16ac4 <amigo_overflow_check+0x90>
   16a66:	1d 82       	std	Y+5, r1	; 0x05
   16a68:	2c 81       	ldd	r18, Y+4	; 0x04
   16a6a:	2f 5f       	subi	r18, 0xFF	; 255
   16a6c:	2c 83       	std	Y+4, r18	; 0x04
   16a6e:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <AMIGOp>
   16a72:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <AMIGOp+0x1>
   16a76:	2c 81       	ldd	r18, Y+4	; 0x04
   16a78:	30 e0       	ldi	r19, 0x00	; 0
   16a7a:	41 a5       	ldd	r20, Z+41	; 0x29
   16a7c:	52 a5       	ldd	r21, Z+42	; 0x2a
   16a7e:	24 17       	cp	r18, r20
   16a80:	35 07       	cpc	r19, r21
   16a82:	34 f3       	brlt	.-52     	; 0x16a50 <amigo_overflow_check+0x1c>
   16a84:	1c 82       	std	Y+4, r1	; 0x04
   16a86:	2b 81       	ldd	r18, Y+3	; 0x03
   16a88:	2f 5f       	subi	r18, 0xFF	; 255
   16a8a:	2b 83       	std	Y+3, r18	; 0x03
   16a8c:	30 e0       	ldi	r19, 0x00	; 0
   16a8e:	43 a5       	ldd	r20, Z+43	; 0x2b
   16a90:	54 a5       	ldd	r21, Z+44	; 0x2c
   16a92:	24 17       	cp	r18, r20
   16a94:	35 07       	cpc	r19, r21
   16a96:	5c f3       	brlt	.-42     	; 0x16a6e <amigo_overflow_check+0x3a>
   16a98:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16a9c:	80 ff       	sbrs	r24, 0
   16a9e:	0f c0       	rjmp	.+30     	; 0x16abe <amigo_overflow_check+0x8a>
   16aa0:	01 15       	cp	r16, r1
   16aa2:	11 05       	cpc	r17, r1
   16aa4:	61 f0       	breq	.+24     	; 0x16abe <amigo_overflow_check+0x8a>
   16aa6:	1f 93       	push	r17
   16aa8:	0f 93       	push	r16
   16aaa:	1f 92       	push	r1
   16aac:	df 92       	push	r13
   16aae:	cf 92       	push	r12
   16ab0:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   16ab4:	0f 90       	pop	r0
   16ab6:	0f 90       	pop	r0
   16ab8:	0f 90       	pop	r0
   16aba:	0f 90       	pop	r0
   16abc:	0f 90       	pop	r0
   16abe:	81 e0       	ldi	r24, 0x01	; 1
   16ac0:	90 e0       	ldi	r25, 0x00	; 0
   16ac2:	d5 cf       	rjmp	.-86     	; 0x16a6e <amigo_overflow_check+0x3a>
   16ac4:	df 91       	pop	r29
   16ac6:	cf 91       	pop	r28
   16ac8:	1f 91       	pop	r17
   16aca:	0f 91       	pop	r16
   16acc:	ef 90       	pop	r14
   16ace:	df 90       	pop	r13
   16ad0:	cf 90       	pop	r12
   16ad2:	08 95       	ret

00016ad4 <amigo_chs_to_logical>:
   16ad4:	a0 e0       	ldi	r26, 0x00	; 0
   16ad6:	b0 e0       	ldi	r27, 0x00	; 0
   16ad8:	e0 e7       	ldi	r30, 0x70	; 112
   16ada:	f5 eb       	ldi	r31, 0xB5	; 181
   16adc:	0c 94 e9 e5 	jmp	0x1cbd2	; 0x1cbd2 <__prologue_saves__+0x12>
   16ae0:	dc 01       	movw	r26, r24
   16ae2:	d6 2f       	mov	r29, r22
   16ae4:	17 2f       	mov	r17, r23
   16ae6:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <AMIGOp>
   16aea:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <AMIGOp+0x1>
   16aee:	87 a1       	ldd	r24, Z+39	; 0x27
   16af0:	90 a5       	ldd	r25, Z+40	; 0x28
   16af2:	14 96       	adiw	r26, 0x04	; 4
   16af4:	cc 91       	ld	r28, X
   16af6:	14 97       	sbiw	r26, 0x04	; 4
   16af8:	c8 9f       	mul	r28, r24
   16afa:	90 01       	movw	r18, r0
   16afc:	c9 9f       	mul	r28, r25
   16afe:	30 0d       	add	r19, r0
   16b00:	11 24       	eor	r1, r1
   16b02:	a9 01       	movw	r20, r18
   16b04:	33 0f       	add	r19, r19
   16b06:	66 0b       	sbc	r22, r22
   16b08:	77 0b       	sbc	r23, r23
   16b0a:	13 96       	adiw	r26, 0x03	; 3
   16b0c:	0c 91       	ld	r16, X
   16b0e:	13 97       	sbiw	r26, 0x03	; 3
   16b10:	21 a5       	ldd	r18, Z+41	; 0x29
   16b12:	32 a5       	ldd	r19, Z+42	; 0x2a
   16b14:	82 9f       	mul	r24, r18
   16b16:	70 01       	movw	r14, r0
   16b18:	83 9f       	mul	r24, r19
   16b1a:	f0 0c       	add	r15, r0
   16b1c:	92 9f       	mul	r25, r18
   16b1e:	f0 0c       	add	r15, r0
   16b20:	11 24       	eor	r1, r1
   16b22:	0e 9d       	mul	r16, r14
   16b24:	90 01       	movw	r18, r0
   16b26:	0f 9d       	mul	r16, r15
   16b28:	30 0d       	add	r19, r0
   16b2a:	11 24       	eor	r1, r1
   16b2c:	69 01       	movw	r12, r18
   16b2e:	33 0f       	add	r19, r19
   16b30:	ee 08       	sbc	r14, r14
   16b32:	ff 08       	sbc	r15, r15
   16b34:	4c 0d       	add	r20, r12
   16b36:	5d 1d       	adc	r21, r13
   16b38:	6e 1d       	adc	r22, r14
   16b3a:	7f 1d       	adc	r23, r15
   16b3c:	15 96       	adiw	r26, 0x05	; 5
   16b3e:	bc 90       	ld	r11, X
   16b40:	9a 01       	movw	r18, r20
   16b42:	ab 01       	movw	r20, r22
   16b44:	2b 0d       	add	r18, r11
   16b46:	31 1d       	adc	r19, r1
   16b48:	41 1d       	adc	r20, r1
   16b4a:	51 1d       	adc	r21, r1
   16b4c:	a5 a1       	ldd	r26, Z+37	; 0x25
   16b4e:	b6 a1       	ldd	r27, Z+38	; 0x26
   16b50:	0e 94 ca e5 	call	0x1cb94	; 0x1cb94 <__mulshisi3>
   16b54:	6b 01       	movw	r12, r22
   16b56:	7c 01       	movw	r14, r24
   16b58:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16b5c:	85 ff       	sbrs	r24, 5
   16b5e:	22 c0       	rjmp	.+68     	; 0x16ba4 <amigo_chs_to_logical+0xd0>
   16b60:	1f 92       	push	r1
   16b62:	bf 92       	push	r11
   16b64:	1f 92       	push	r1
   16b66:	cf 93       	push	r28
   16b68:	1f 92       	push	r1
   16b6a:	0f 93       	push	r16
   16b6c:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <AMIGOs>
   16b70:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <AMIGOs+0x1>
   16b74:	81 81       	ldd	r24, Z+1	; 0x01
   16b76:	1f 92       	push	r1
   16b78:	8f 93       	push	r24
   16b7a:	ff 92       	push	r15
   16b7c:	ef 92       	push	r14
   16b7e:	df 92       	push	r13
   16b80:	cf 92       	push	r12
   16b82:	1f 93       	push	r17
   16b84:	df 93       	push	r29
   16b86:	8a ed       	ldi	r24, 0xDA	; 218
   16b88:	9e e2       	ldi	r25, 0x2E	; 46
   16b8a:	1f 92       	push	r1
   16b8c:	9f 93       	push	r25
   16b8e:	8f 93       	push	r24
   16b90:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   16b94:	8d b7       	in	r24, 0x3d	; 61
   16b96:	9e b7       	in	r25, 0x3e	; 62
   16b98:	41 96       	adiw	r24, 0x11	; 17
   16b9a:	0f b6       	in	r0, 0x3f	; 63
   16b9c:	f8 94       	cli
   16b9e:	9e bf       	out	0x3e, r25	; 62
   16ba0:	0f be       	out	0x3f, r0	; 63
   16ba2:	8d bf       	out	0x3d, r24	; 61
   16ba4:	b6 01       	movw	r22, r12
   16ba6:	c7 01       	movw	r24, r14
   16ba8:	cd b7       	in	r28, 0x3d	; 61
   16baa:	de b7       	in	r29, 0x3e	; 62
   16bac:	e9 e0       	ldi	r30, 0x09	; 9
   16bae:	0c 94 05 e6 	jmp	0x1cc0a	; 0x1cc0a <__epilogue_restores__+0x12>

00016bb2 <amigo_init>:
   16bb2:	ef 92       	push	r14
   16bb4:	ff 92       	push	r15
   16bb6:	0f 93       	push	r16
   16bb8:	1f 93       	push	r17
   16bba:	cf 93       	push	r28
   16bbc:	df 93       	push	r29
   16bbe:	09 ec       	ldi	r16, 0xC9	; 201
   16bc0:	1f e1       	ldi	r17, 0x1F	; 31
   16bc2:	cb e0       	ldi	r28, 0x0B	; 11
   16bc4:	d0 e0       	ldi	r29, 0x00	; 0
   16bc6:	84 e0       	ldi	r24, 0x04	; 4
   16bc8:	f8 2e       	mov	r15, r24
   16bca:	92 e0       	ldi	r25, 0x02	; 2
   16bcc:	e9 2e       	mov	r14, r25
   16bce:	d8 01       	movw	r26, r16
   16bd0:	8c 91       	ld	r24, X
   16bd2:	81 30       	cpi	r24, 0x01	; 1
   16bd4:	31 f5       	brne	.+76     	; 0x16c22 <amigo_init+0x70>
   16bd6:	ce 01       	movw	r24, r28
   16bd8:	0e 94 58 93 	call	0x126b0	; 0x126b0 <set_active_device>
   16bdc:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <AMIGOs>
   16be0:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <AMIGOs+0x1>
   16be4:	10 82       	st	Z, r1
   16be6:	9f 01       	movw	r18, r30
   16be8:	27 5f       	subi	r18, 0xF7	; 247
   16bea:	3f 4f       	sbci	r19, 0xFF	; 255
   16bec:	d9 01       	movw	r26, r18
   16bee:	8f 2d       	mov	r24, r15
   16bf0:	1d 92       	st	X+, r1
   16bf2:	8a 95       	dec	r24
   16bf4:	e9 f7       	brne	.-6      	; 0x16bf0 <amigo_init+0x3e>
   16bf6:	2c 5f       	subi	r18, 0xFC	; 252
   16bf8:	3f 4f       	sbci	r19, 0xFF	; 255
   16bfa:	d9 01       	movw	r26, r18
   16bfc:	8f 2d       	mov	r24, r15
   16bfe:	1d 92       	st	X+, r1
   16c00:	8a 95       	dec	r24
   16c02:	e9 f7       	brne	.-6      	; 0x16bfe <amigo_init+0x4c>
   16c04:	11 82       	std	Z+1, r1	; 0x01
   16c06:	15 82       	std	Z+5, r1	; 0x05
   16c08:	14 82       	std	Z+4, r1	; 0x04
   16c0a:	13 82       	std	Z+3, r1	; 0x03
   16c0c:	e6 82       	std	Z+6, r14	; 0x06
   16c0e:	10 86       	std	Z+8, r1	; 0x08
   16c10:	17 82       	std	Z+7, r1	; 0x07
   16c12:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <AMIGOp>
   16c16:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <AMIGOp+0x1>
   16c1a:	81 81       	ldd	r24, Z+1	; 0x01
   16c1c:	90 e0       	ldi	r25, 0x00	; 0
   16c1e:	0e 94 c2 86 	call	0x10d84	; 0x10d84 <gpib_disable_PPR>
   16c22:	21 97       	sbiw	r28, 0x01	; 1
   16c24:	0b 52       	subi	r16, 0x2B	; 43
   16c26:	11 09       	sbc	r17, r1
   16c28:	cf 3f       	cpi	r28, 0xFF	; 255
   16c2a:	af ef       	ldi	r26, 0xFF	; 255
   16c2c:	da 07       	cpc	r29, r26
   16c2e:	79 f6       	brne	.-98     	; 0x16bce <amigo_init+0x1c>
   16c30:	cd b7       	in	r28, 0x3d	; 61
   16c32:	de b7       	in	r29, 0x3e	; 62
   16c34:	e6 e0       	ldi	r30, 0x06	; 6
   16c36:	0c 94 08 e6 	jmp	0x1cc10	; 0x1cc10 <__epilogue_restores__+0x18>

00016c3a <amigo_request_logical_address>:
   16c3a:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <AMIGOs>
   16c3e:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <AMIGOs+0x1>
   16c42:	15 86       	std	Z+13, r1	; 0x0d
   16c44:	83 81       	ldd	r24, Z+3	; 0x03
   16c46:	86 87       	std	Z+14, r24	; 0x0e
   16c48:	84 81       	ldd	r24, Z+4	; 0x04
   16c4a:	87 87       	std	Z+15, r24	; 0x0f
   16c4c:	85 81       	ldd	r24, Z+5	; 0x05
   16c4e:	80 8b       	std	Z+16, r24	; 0x10
   16c50:	80 e0       	ldi	r24, 0x00	; 0
   16c52:	90 e0       	ldi	r25, 0x00	; 0
   16c54:	08 95       	ret

00016c56 <amigo_request_status>:
   16c56:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16c5a:	85 ff       	sbrs	r24, 5
   16c5c:	0a c0       	rjmp	.+20     	; 0x16c72 <amigo_request_status+0x1c>
   16c5e:	8d ea       	ldi	r24, 0xAD	; 173
   16c60:	9f e2       	ldi	r25, 0x2F	; 47
   16c62:	1f 92       	push	r1
   16c64:	9f 93       	push	r25
   16c66:	8f 93       	push	r24
   16c68:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   16c6c:	0f 90       	pop	r0
   16c6e:	0f 90       	pop	r0
   16c70:	0f 90       	pop	r0
   16c72:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <AMIGOs>
   16c76:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <AMIGOs+0x1>
   16c7a:	11 86       	std	Z+9, r1	; 0x09
   16c7c:	81 81       	ldd	r24, Z+1	; 0x01
   16c7e:	82 87       	std	Z+10, r24	; 0x0a
   16c80:	8d e0       	ldi	r24, 0x0D	; 13
   16c82:	83 87       	std	Z+11, r24	; 0x0b
   16c84:	14 86       	std	Z+12, r1	; 0x0c
   16c86:	0e 94 43 71 	call	0xe286	; 0xe286 <mmc_wp_status>
   16c8a:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <AMIGOs>
   16c8e:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <AMIGOs+0x1>
   16c92:	89 2b       	or	r24, r25
   16c94:	19 f0       	breq	.+6      	; 0x16c9c <amigo_request_status+0x46>
   16c96:	84 85       	ldd	r24, Z+12	; 0x0c
   16c98:	80 66       	ori	r24, 0x60	; 96
   16c9a:	84 87       	std	Z+12, r24	; 0x0c
   16c9c:	86 81       	ldd	r24, Z+6	; 0x06
   16c9e:	82 30       	cpi	r24, 0x02	; 2
   16ca0:	31 f4       	brne	.+12     	; 0x16cae <amigo_request_status+0x58>
   16ca2:	83 e1       	ldi	r24, 0x13	; 19
   16ca4:	81 87       	std	Z+9, r24	; 0x09
   16ca6:	84 85       	ldd	r24, Z+12	; 0x0c
   16ca8:	88 60       	ori	r24, 0x08	; 8
   16caa:	84 87       	std	Z+12, r24	; 0x0c
   16cac:	21 c0       	rjmp	.+66     	; 0x16cf0 <amigo_request_status+0x9a>
   16cae:	27 81       	ldd	r18, Z+7	; 0x07
   16cb0:	30 85       	ldd	r19, Z+8	; 0x08
   16cb2:	21 15       	cp	r18, r1
   16cb4:	31 05       	cpc	r19, r1
   16cb6:	11 f4       	brne	.+4      	; 0x16cbc <amigo_request_status+0x66>
   16cb8:	81 30       	cpi	r24, 0x01	; 1
   16cba:	d1 f4       	brne	.+52     	; 0x16cf0 <amigo_request_status+0x9a>
   16cbc:	26 fd       	sbrc	r18, 6
   16cbe:	0c c0       	rjmp	.+24     	; 0x16cd8 <amigo_request_status+0x82>
   16cc0:	25 ff       	sbrs	r18, 5
   16cc2:	03 c0       	rjmp	.+6      	; 0x16cca <amigo_request_status+0x74>
   16cc4:	8a e0       	ldi	r24, 0x0A	; 10
   16cc6:	81 87       	std	Z+9, r24	; 0x09
   16cc8:	0d c0       	rjmp	.+26     	; 0x16ce4 <amigo_request_status+0x8e>
   16cca:	84 85       	ldd	r24, Z+12	; 0x0c
   16ccc:	24 ff       	sbrs	r18, 4
   16cce:	02 c0       	rjmp	.+4      	; 0x16cd4 <amigo_request_status+0x7e>
   16cd0:	83 60       	ori	r24, 0x03	; 3
   16cd2:	07 c0       	rjmp	.+14     	; 0x16ce2 <amigo_request_status+0x8c>
   16cd4:	21 ff       	sbrs	r18, 1
   16cd6:	02 c0       	rjmp	.+4      	; 0x16cdc <amigo_request_status+0x86>
   16cd8:	83 e1       	ldi	r24, 0x13	; 19
   16cda:	f5 cf       	rjmp	.-22     	; 0x16cc6 <amigo_request_status+0x70>
   16cdc:	22 ff       	sbrs	r18, 2
   16cde:	02 c0       	rjmp	.+4      	; 0x16ce4 <amigo_request_status+0x8e>
   16ce0:	84 60       	ori	r24, 0x04	; 4
   16ce2:	84 87       	std	Z+12, r24	; 0x0c
   16ce4:	84 85       	ldd	r24, Z+12	; 0x0c
   16ce6:	80 61       	ori	r24, 0x10	; 16
   16ce8:	84 87       	std	Z+12, r24	; 0x0c
   16cea:	83 85       	ldd	r24, Z+11	; 0x0b
   16cec:	80 68       	ori	r24, 0x80	; 128
   16cee:	83 87       	std	Z+11, r24	; 0x0b
   16cf0:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <AMIGOp>
   16cf4:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <AMIGOp+0x1>
   16cf8:	81 81       	ldd	r24, Z+1	; 0x01
   16cfa:	90 e0       	ldi	r25, 0x00	; 0
   16cfc:	0e 94 91 86 	call	0x10d22	; 0x10d22 <gpib_enable_PPR>
   16d00:	80 e0       	ldi	r24, 0x00	; 0
   16d02:	90 e0       	ldi	r25, 0x00	; 0
   16d04:	08 95       	ret

00016d06 <amigo_send_logical_address>:
   16d06:	a2 e0       	ldi	r26, 0x02	; 2
   16d08:	b0 e0       	ldi	r27, 0x00	; 0
   16d0a:	e9 e8       	ldi	r30, 0x89	; 137
   16d0c:	f6 eb       	ldi	r31, 0xB6	; 182
   16d0e:	0c 94 f0 e5 	jmp	0x1cbe0	; 0x1cbe0 <__prologue_saves__+0x20>
   16d12:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16d16:	85 ff       	sbrs	r24, 5
   16d18:	0a c0       	rjmp	.+20     	; 0x16d2e <amigo_send_logical_address+0x28>
   16d1a:	8f e8       	ldi	r24, 0x8F	; 143
   16d1c:	9f e2       	ldi	r25, 0x2F	; 47
   16d1e:	1f 92       	push	r1
   16d20:	9f 93       	push	r25
   16d22:	8f 93       	push	r24
   16d24:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   16d28:	0f 90       	pop	r0
   16d2a:	0f 90       	pop	r0
   16d2c:	0f 90       	pop	r0
   16d2e:	80 e0       	ldi	r24, 0x00	; 0
   16d30:	91 e0       	ldi	r25, 0x01	; 1
   16d32:	9a 83       	std	Y+2, r25	; 0x02
   16d34:	89 83       	std	Y+1, r24	; 0x01
   16d36:	80 91 65 18 	lds	r24, 0x1865	; 0x801865 <AMIGOs>
   16d3a:	90 91 66 18 	lds	r25, 0x1866	; 0x801866 <AMIGOs+0x1>
   16d3e:	ae 01       	movw	r20, r28
   16d40:	4f 5f       	subi	r20, 0xFF	; 255
   16d42:	5f 4f       	sbci	r21, 0xFF	; 255
   16d44:	64 e0       	ldi	r22, 0x04	; 4
   16d46:	70 e0       	ldi	r23, 0x00	; 0
   16d48:	0d 96       	adiw	r24, 0x0d	; 13
   16d4a:	0e 94 e1 8b 	call	0x117c2	; 0x117c2 <gpib_write_str>
   16d4e:	29 81       	ldd	r18, Y+1	; 0x01
   16d50:	3a 81       	ldd	r19, Y+2	; 0x02
   16d52:	22 27       	eor	r18, r18
   16d54:	30 7d       	andi	r19, 0xD0	; 208
   16d56:	23 2b       	or	r18, r19
   16d58:	49 f0       	breq	.+18     	; 0x16d6c <amigo_send_logical_address+0x66>
   16d5a:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <AMIGOs>
   16d5e:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <AMIGOs+0x1>
   16d62:	27 81       	ldd	r18, Z+7	; 0x07
   16d64:	30 85       	ldd	r19, Z+8	; 0x08
   16d66:	20 62       	ori	r18, 0x20	; 32
   16d68:	30 87       	std	Z+8, r19	; 0x08
   16d6a:	27 83       	std	Z+7, r18	; 0x07
   16d6c:	04 97       	sbiw	r24, 0x04	; 4
   16d6e:	c9 f0       	breq	.+50     	; 0x16da2 <amigo_send_logical_address+0x9c>
   16d70:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <AMIGOs>
   16d74:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <AMIGOs+0x1>
   16d78:	87 81       	ldd	r24, Z+7	; 0x07
   16d7a:	90 85       	ldd	r25, Z+8	; 0x08
   16d7c:	80 62       	ori	r24, 0x20	; 32
   16d7e:	90 87       	std	Z+8, r25	; 0x08
   16d80:	87 83       	std	Z+7, r24	; 0x07
   16d82:	81 e0       	ldi	r24, 0x01	; 1
   16d84:	86 83       	std	Z+6, r24	; 0x06
   16d86:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16d8a:	80 ff       	sbrs	r24, 0
   16d8c:	0a c0       	rjmp	.+20     	; 0x16da2 <amigo_send_logical_address+0x9c>
   16d8e:	85 e7       	ldi	r24, 0x75	; 117
   16d90:	9f e2       	ldi	r25, 0x2F	; 47
   16d92:	1f 92       	push	r1
   16d94:	9f 93       	push	r25
   16d96:	8f 93       	push	r24
   16d98:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   16d9c:	0f 90       	pop	r0
   16d9e:	0f 90       	pop	r0
   16da0:	0f 90       	pop	r0
   16da2:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <AMIGOp>
   16da6:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <AMIGOp+0x1>
   16daa:	81 81       	ldd	r24, Z+1	; 0x01
   16dac:	90 e0       	ldi	r25, 0x00	; 0
   16dae:	0e 94 91 86 	call	0x10d22	; 0x10d22 <gpib_enable_PPR>
   16db2:	89 81       	ldd	r24, Y+1	; 0x01
   16db4:	9a 81       	ldd	r25, Y+2	; 0x02
   16db6:	88 27       	eor	r24, r24
   16db8:	90 7d       	andi	r25, 0xD0	; 208
   16dba:	22 96       	adiw	r28, 0x02	; 2
   16dbc:	e2 e0       	ldi	r30, 0x02	; 2
   16dbe:	0c 94 0c e6 	jmp	0x1cc18	; 0x1cc18 <__epilogue_restores__+0x20>

00016dc2 <amigo_send_status>:
   16dc2:	a2 e0       	ldi	r26, 0x02	; 2
   16dc4:	b0 e0       	ldi	r27, 0x00	; 0
   16dc6:	e7 ee       	ldi	r30, 0xE7	; 231
   16dc8:	f6 eb       	ldi	r31, 0xB6	; 182
   16dca:	0c 94 f0 e5 	jmp	0x1cbe0	; 0x1cbe0 <__prologue_saves__+0x20>
   16dce:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16dd2:	85 ff       	sbrs	r24, 5
   16dd4:	0a c0       	rjmp	.+20     	; 0x16dea <amigo_send_status+0x28>
   16dd6:	80 e6       	ldi	r24, 0x60	; 96
   16dd8:	9f e2       	ldi	r25, 0x2F	; 47
   16dda:	1f 92       	push	r1
   16ddc:	9f 93       	push	r25
   16dde:	8f 93       	push	r24
   16de0:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   16de4:	0f 90       	pop	r0
   16de6:	0f 90       	pop	r0
   16de8:	0f 90       	pop	r0
   16dea:	80 e0       	ldi	r24, 0x00	; 0
   16dec:	91 e0       	ldi	r25, 0x01	; 1
   16dee:	9a 83       	std	Y+2, r25	; 0x02
   16df0:	89 83       	std	Y+1, r24	; 0x01
   16df2:	80 91 65 18 	lds	r24, 0x1865	; 0x801865 <AMIGOs>
   16df6:	90 91 66 18 	lds	r25, 0x1866	; 0x801866 <AMIGOs+0x1>
   16dfa:	ae 01       	movw	r20, r28
   16dfc:	4f 5f       	subi	r20, 0xFF	; 255
   16dfe:	5f 4f       	sbci	r21, 0xFF	; 255
   16e00:	64 e0       	ldi	r22, 0x04	; 4
   16e02:	70 e0       	ldi	r23, 0x00	; 0
   16e04:	09 96       	adiw	r24, 0x09	; 9
   16e06:	0e 94 e1 8b 	call	0x117c2	; 0x117c2 <gpib_write_str>
   16e0a:	29 81       	ldd	r18, Y+1	; 0x01
   16e0c:	3a 81       	ldd	r19, Y+2	; 0x02
   16e0e:	22 27       	eor	r18, r18
   16e10:	30 7d       	andi	r19, 0xD0	; 208
   16e12:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <AMIGOs>
   16e16:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <AMIGOs+0x1>
   16e1a:	23 2b       	or	r18, r19
   16e1c:	29 f0       	breq	.+10     	; 0x16e28 <amigo_send_status+0x66>
   16e1e:	27 81       	ldd	r18, Z+7	; 0x07
   16e20:	30 85       	ldd	r19, Z+8	; 0x08
   16e22:	20 62       	ori	r18, 0x20	; 32
   16e24:	30 87       	std	Z+8, r19	; 0x08
   16e26:	27 83       	std	Z+7, r18	; 0x07
   16e28:	04 97       	sbiw	r24, 0x04	; 4
   16e2a:	b1 f0       	breq	.+44     	; 0x16e58 <amigo_send_status+0x96>
   16e2c:	87 81       	ldd	r24, Z+7	; 0x07
   16e2e:	90 85       	ldd	r25, Z+8	; 0x08
   16e30:	80 62       	ori	r24, 0x20	; 32
   16e32:	90 87       	std	Z+8, r25	; 0x08
   16e34:	87 83       	std	Z+7, r24	; 0x07
   16e36:	81 e0       	ldi	r24, 0x01	; 1
   16e38:	86 83       	std	Z+6, r24	; 0x06
   16e3a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16e3e:	80 ff       	sbrs	r24, 0
   16e40:	0e c0       	rjmp	.+28     	; 0x16e5e <amigo_send_status+0x9c>
   16e42:	86 e4       	ldi	r24, 0x46	; 70
   16e44:	9f e2       	ldi	r25, 0x2F	; 47
   16e46:	1f 92       	push	r1
   16e48:	9f 93       	push	r25
   16e4a:	8f 93       	push	r24
   16e4c:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   16e50:	0f 90       	pop	r0
   16e52:	0f 90       	pop	r0
   16e54:	0f 90       	pop	r0
   16e56:	03 c0       	rjmp	.+6      	; 0x16e5e <amigo_send_status+0x9c>
   16e58:	10 86       	std	Z+8, r1	; 0x08
   16e5a:	17 82       	std	Z+7, r1	; 0x07
   16e5c:	16 82       	std	Z+6, r1	; 0x06
   16e5e:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <AMIGOp>
   16e62:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <AMIGOp+0x1>
   16e66:	81 81       	ldd	r24, Z+1	; 0x01
   16e68:	90 e0       	ldi	r25, 0x00	; 0
   16e6a:	0e 94 91 86 	call	0x10d22	; 0x10d22 <gpib_enable_PPR>
   16e6e:	89 81       	ldd	r24, Y+1	; 0x01
   16e70:	9a 81       	ldd	r25, Y+2	; 0x02
   16e72:	88 27       	eor	r24, r24
   16e74:	90 7d       	andi	r25, 0xD0	; 208
   16e76:	22 96       	adiw	r28, 0x02	; 2
   16e78:	e2 e0       	ldi	r30, 0x02	; 2
   16e7a:	0c 94 0c e6 	jmp	0x1cc18	; 0x1cc18 <__epilogue_restores__+0x20>

00016e7e <amigo_increment>:
   16e7e:	a1 e1       	ldi	r26, 0x11	; 17
   16e80:	b0 e0       	ldi	r27, 0x00	; 0
   16e82:	e5 e4       	ldi	r30, 0x45	; 69
   16e84:	f7 eb       	ldi	r31, 0xB7	; 183
   16e86:	0c 94 f0 e5 	jmp	0x1cbe0	; 0x1cbe0 <__prologue_saves__+0x20>
   16e8a:	bc 01       	movw	r22, r24
   16e8c:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <AMIGOs>
   16e90:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <AMIGOs+0x1>
   16e94:	91 e1       	ldi	r25, 0x11	; 17
   16e96:	de 01       	movw	r26, r28
   16e98:	11 96       	adiw	r26, 0x01	; 1
   16e9a:	01 90       	ld	r0, Z+
   16e9c:	0d 92       	st	X+, r0
   16e9e:	9a 95       	dec	r25
   16ea0:	e1 f7       	brne	.-8      	; 0x16e9a <amigo_increment+0x1c>
   16ea2:	9e 81       	ldd	r25, Y+6	; 0x06
   16ea4:	9f 5f       	subi	r25, 0xFF	; 255
   16ea6:	9e 83       	std	Y+6, r25	; 0x06
   16ea8:	ce 01       	movw	r24, r28
   16eaa:	01 96       	adiw	r24, 0x01	; 1
   16eac:	c3 dd       	rcall	.-1146   	; 0x16a34 <amigo_overflow_check>
   16eae:	00 97       	sbiw	r24, 0x00	; 0
   16eb0:	59 f4       	brne	.+22     	; 0x16ec8 <amigo_increment+0x4a>
   16eb2:	a0 91 65 18 	lds	r26, 0x1865	; 0x801865 <AMIGOs>
   16eb6:	b0 91 66 18 	lds	r27, 0x1866	; 0x801866 <AMIGOs+0x1>
   16eba:	21 e1       	ldi	r18, 0x11	; 17
   16ebc:	fe 01       	movw	r30, r28
   16ebe:	31 96       	adiw	r30, 0x01	; 1
   16ec0:	01 90       	ld	r0, Z+
   16ec2:	0d 92       	st	X+, r0
   16ec4:	2a 95       	dec	r18
   16ec6:	e1 f7       	brne	.-8      	; 0x16ec0 <amigo_increment+0x42>
   16ec8:	61 96       	adiw	r28, 0x11	; 17
   16eca:	e2 e0       	ldi	r30, 0x02	; 2
   16ecc:	0c 94 0c e6 	jmp	0x1cc18	; 0x1cc18 <__epilogue_restores__+0x20>

00016ed0 <amigo_seek>:
   16ed0:	0f 93       	push	r16
   16ed2:	1f 93       	push	r17
   16ed4:	cf 93       	push	r28
   16ed6:	df 93       	push	r29
   16ed8:	ec 01       	movw	r28, r24
   16eda:	6b ed       	ldi	r22, 0xDB	; 219
   16edc:	74 e1       	ldi	r23, 0x14	; 20
   16ede:	aa dd       	rcall	.-1196   	; 0x16a34 <amigo_overflow_check>
   16ee0:	8c 01       	movw	r16, r24
   16ee2:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <AMIGOs>
   16ee6:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <AMIGOs+0x1>
   16eea:	89 2b       	or	r24, r25
   16eec:	41 f0       	breq	.+16     	; 0x16efe <amigo_seek+0x2e>
   16eee:	81 e0       	ldi	r24, 0x01	; 1
   16ef0:	86 83       	std	Z+6, r24	; 0x06
   16ef2:	87 81       	ldd	r24, Z+7	; 0x07
   16ef4:	90 85       	ldd	r25, Z+8	; 0x08
   16ef6:	84 60       	ori	r24, 0x04	; 4
   16ef8:	90 87       	std	Z+8, r25	; 0x08
   16efa:	87 83       	std	Z+7, r24	; 0x07
   16efc:	06 c0       	rjmp	.+12     	; 0x16f0a <amigo_seek+0x3a>
   16efe:	8d 81       	ldd	r24, Y+5	; 0x05
   16f00:	85 83       	std	Z+5, r24	; 0x05
   16f02:	8c 81       	ldd	r24, Y+4	; 0x04
   16f04:	84 83       	std	Z+4, r24	; 0x04
   16f06:	8b 81       	ldd	r24, Y+3	; 0x03
   16f08:	83 83       	std	Z+3, r24	; 0x03
   16f0a:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <AMIGOp>
   16f0e:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <AMIGOp+0x1>
   16f12:	81 81       	ldd	r24, Z+1	; 0x01
   16f14:	90 e0       	ldi	r25, 0x00	; 0
   16f16:	0e 94 91 86 	call	0x10d22	; 0x10d22 <gpib_enable_PPR>
   16f1a:	c8 01       	movw	r24, r16
   16f1c:	df 91       	pop	r29
   16f1e:	cf 91       	pop	r28
   16f20:	1f 91       	pop	r17
   16f22:	0f 91       	pop	r16
   16f24:	08 95       	ret

00016f26 <amigo_verify>:
   16f26:	8f 92       	push	r8
   16f28:	9f 92       	push	r9
   16f2a:	af 92       	push	r10
   16f2c:	bf 92       	push	r11
   16f2e:	ef 92       	push	r14
   16f30:	ff 92       	push	r15
   16f32:	0f 93       	push	r16
   16f34:	1f 93       	push	r17
   16f36:	cf 93       	push	r28
   16f38:	df 93       	push	r29
   16f3a:	7c 01       	movw	r14, r24
   16f3c:	60 ee       	ldi	r22, 0xE0	; 224
   16f3e:	74 e1       	ldi	r23, 0x14	; 20
   16f40:	80 91 65 18 	lds	r24, 0x1865	; 0x801865 <AMIGOs>
   16f44:	90 91 66 18 	lds	r25, 0x1866	; 0x801866 <AMIGOs+0x1>
   16f48:	c5 dd       	rcall	.-1142   	; 0x16ad4 <amigo_chs_to_logical>
   16f4a:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   16f4e:	25 ff       	sbrs	r18, 5
   16f50:	15 c0       	rjmp	.+42     	; 0x16f7c <amigo_verify+0x56>
   16f52:	ff 92       	push	r15
   16f54:	ef 92       	push	r14
   16f56:	9f 93       	push	r25
   16f58:	8f 93       	push	r24
   16f5a:	7f 93       	push	r23
   16f5c:	6f 93       	push	r22
   16f5e:	85 e0       	ldi	r24, 0x05	; 5
   16f60:	9f e2       	ldi	r25, 0x2F	; 47
   16f62:	1f 92       	push	r1
   16f64:	9f 93       	push	r25
   16f66:	8f 93       	push	r24
   16f68:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   16f6c:	8d b7       	in	r24, 0x3d	; 61
   16f6e:	9e b7       	in	r25, 0x3e	; 62
   16f70:	09 96       	adiw	r24, 0x09	; 9
   16f72:	0f b6       	in	r0, 0x3f	; 63
   16f74:	f8 94       	cli
   16f76:	9e bf       	out	0x3e, r25	; 62
   16f78:	0f be       	out	0x3f, r0	; 63
   16f7a:	8d bf       	out	0x3d, r24	; 61
   16f7c:	e7 01       	movw	r28, r14
   16f7e:	20 97       	sbiw	r28, 0x00	; 0
   16f80:	09 f4       	brne	.+2      	; 0x16f84 <amigo_verify+0x5e>
   16f82:	49 c0       	rjmp	.+146    	; 0x17016 <amigo_verify+0xf0>
   16f84:	6d ee       	ldi	r22, 0xED	; 237
   16f86:	74 e1       	ldi	r23, 0x14	; 20
   16f88:	80 91 65 18 	lds	r24, 0x1865	; 0x801865 <AMIGOs>
   16f8c:	90 91 66 18 	lds	r25, 0x1866	; 0x801866 <AMIGOs+0x1>
   16f90:	a1 dd       	rcall	.-1214   	; 0x16ad4 <amigo_chs_to_logical>
   16f92:	4b 01       	movw	r8, r22
   16f94:	5c 01       	movw	r10, r24
   16f96:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16f9a:	86 fd       	sbrc	r24, 6
   16f9c:	0e 94 d9 85 	call	0x10bb2	; 0x10bb2 <gpib_timer_elapsed_begin>
   16fa0:	80 91 67 18 	lds	r24, 0x1867	; 0x801867 <AMIGOp>
   16fa4:	90 91 68 18 	lds	r25, 0x1868	; 0x801868 <AMIGOp+0x1>
   16fa8:	e0 90 65 18 	lds	r14, 0x1865	; 0x801865 <AMIGOs>
   16fac:	f0 90 66 18 	lds	r15, 0x1866	; 0x801866 <AMIGOs+0x1>
   16fb0:	e7 e0       	ldi	r30, 0x07	; 7
   16fb2:	ee 0e       	add	r14, r30
   16fb4:	f1 1c       	adc	r15, r1
   16fb6:	fc 01       	movw	r30, r24
   16fb8:	05 a1       	ldd	r16, Z+37	; 0x25
   16fba:	16 a1       	ldd	r17, Z+38	; 0x26
   16fbc:	26 ee       	ldi	r18, 0xE6	; 230
   16fbe:	3b e1       	ldi	r19, 0x1B	; 27
   16fc0:	b5 01       	movw	r22, r10
   16fc2:	a4 01       	movw	r20, r8
   16fc4:	02 96       	adiw	r24, 0x02	; 2
   16fc6:	0e 94 2b 85 	call	0x10a56	; 0x10a56 <dbf_open_read>
   16fca:	7c 01       	movw	r14, r24
   16fcc:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16fd0:	86 ff       	sbrs	r24, 6
   16fd2:	04 c0       	rjmp	.+8      	; 0x16fdc <amigo_verify+0xb6>
   16fd4:	85 ef       	ldi	r24, 0xF5	; 245
   16fd6:	9f e0       	ldi	r25, 0x0F	; 15
   16fd8:	0e 94 eb 85 	call	0x10bd6	; 0x10bd6 <gpib_timer_elapsed_end>
   16fdc:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <AMIGOp>
   16fe0:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <AMIGOp+0x1>
   16fe4:	85 a1       	ldd	r24, Z+37	; 0x25
   16fe6:	96 a1       	ldd	r25, Z+38	; 0x26
   16fe8:	e8 16       	cp	r14, r24
   16fea:	f9 06       	cpc	r15, r25
   16fec:	61 f0       	breq	.+24     	; 0x17006 <amigo_verify+0xe0>
   16fee:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <AMIGOs>
   16ff2:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <AMIGOs+0x1>
   16ff6:	81 e0       	ldi	r24, 0x01	; 1
   16ff8:	86 83       	std	Z+6, r24	; 0x06
   16ffa:	87 81       	ldd	r24, Z+7	; 0x07
   16ffc:	90 85       	ldd	r25, Z+8	; 0x08
   16ffe:	81 60       	ori	r24, 0x01	; 1
   17000:	90 87       	std	Z+8, r25	; 0x08
   17002:	87 83       	std	Z+7, r24	; 0x07
   17004:	0b c0       	rjmp	.+22     	; 0x1701c <amigo_verify+0xf6>
   17006:	85 ef       	ldi	r24, 0xF5	; 245
   17008:	94 e1       	ldi	r25, 0x14	; 20
   1700a:	39 df       	rcall	.-398    	; 0x16e7e <amigo_increment>
   1700c:	21 97       	sbiw	r28, 0x01	; 1
   1700e:	89 2b       	or	r24, r25
   17010:	09 f4       	brne	.+2      	; 0x17014 <amigo_verify+0xee>
   17012:	b5 cf       	rjmp	.-150    	; 0x16f7e <amigo_verify+0x58>
   17014:	03 c0       	rjmp	.+6      	; 0x1701c <amigo_verify+0xf6>
   17016:	c0 e0       	ldi	r28, 0x00	; 0
   17018:	d0 e0       	ldi	r29, 0x00	; 0
   1701a:	02 c0       	rjmp	.+4      	; 0x17020 <amigo_verify+0xfa>
   1701c:	c1 e0       	ldi	r28, 0x01	; 1
   1701e:	d0 e0       	ldi	r29, 0x00	; 0
   17020:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <AMIGOp>
   17024:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <AMIGOp+0x1>
   17028:	81 81       	ldd	r24, Z+1	; 0x01
   1702a:	90 e0       	ldi	r25, 0x00	; 0
   1702c:	0e 94 91 86 	call	0x10d22	; 0x10d22 <gpib_enable_PPR>
   17030:	ce 01       	movw	r24, r28
   17032:	df 91       	pop	r29
   17034:	cf 91       	pop	r28
   17036:	1f 91       	pop	r17
   17038:	0f 91       	pop	r16
   1703a:	ff 90       	pop	r15
   1703c:	ef 90       	pop	r14
   1703e:	bf 90       	pop	r11
   17040:	af 90       	pop	r10
   17042:	9f 90       	pop	r9
   17044:	8f 90       	pop	r8
   17046:	08 95       	ret

00017048 <amigo_format>:
   17048:	ef 92       	push	r14
   1704a:	ff 92       	push	r15
   1704c:	0f 93       	push	r16
   1704e:	1f 93       	push	r17
   17050:	cf 93       	push	r28
   17052:	df 93       	push	r29
   17054:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <AMIGOs>
   17058:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <AMIGOs+0x1>
   1705c:	15 82       	std	Z+5, r1	; 0x05
   1705e:	14 82       	std	Z+4, r1	; 0x04
   17060:	13 82       	std	Z+3, r1	; 0x03
   17062:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <AMIGOp>
   17066:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <AMIGOp+0x1>
   1706a:	45 a1       	ldd	r20, Z+37	; 0x25
   1706c:	56 a1       	ldd	r21, Z+38	; 0x26
   1706e:	68 2f       	mov	r22, r24
   17070:	70 e0       	ldi	r23, 0x00	; 0
   17072:	86 ee       	ldi	r24, 0xE6	; 230
   17074:	9b e1       	ldi	r25, 0x1B	; 27
   17076:	0e 94 b0 ea 	call	0x1d560	; 0x1d560 <memset>
   1707a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1707e:	85 ff       	sbrs	r24, 5
   17080:	0a c0       	rjmp	.+20     	; 0x17096 <amigo_format+0x4e>
   17082:	8a ec       	ldi	r24, 0xCA	; 202
   17084:	9e e2       	ldi	r25, 0x2E	; 46
   17086:	1f 92       	push	r1
   17088:	9f 93       	push	r25
   1708a:	8f 93       	push	r24
   1708c:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   17090:	0f 90       	pop	r0
   17092:	0f 90       	pop	r0
   17094:	0f 90       	pop	r0
   17096:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1709a:	86 fd       	sbrc	r24, 6
   1709c:	0e 94 d9 85 	call	0x10bb2	; 0x10bb2 <gpib_timer_elapsed_begin>
   170a0:	6c ef       	ldi	r22, 0xFC	; 252
   170a2:	74 e1       	ldi	r23, 0x14	; 20
   170a4:	80 91 65 18 	lds	r24, 0x1865	; 0x801865 <AMIGOs>
   170a8:	90 91 66 18 	lds	r25, 0x1866	; 0x801866 <AMIGOs+0x1>
   170ac:	13 dd       	rcall	.-1498   	; 0x16ad4 <amigo_chs_to_logical>
   170ae:	ab 01       	movw	r20, r22
   170b0:	bc 01       	movw	r22, r24
   170b2:	80 91 67 18 	lds	r24, 0x1867	; 0x801867 <AMIGOp>
   170b6:	90 91 68 18 	lds	r25, 0x1868	; 0x801868 <AMIGOp+0x1>
   170ba:	e0 90 65 18 	lds	r14, 0x1865	; 0x801865 <AMIGOs>
   170be:	f0 90 66 18 	lds	r15, 0x1866	; 0x801866 <AMIGOs+0x1>
   170c2:	27 e0       	ldi	r18, 0x07	; 7
   170c4:	e2 0e       	add	r14, r18
   170c6:	f1 1c       	adc	r15, r1
   170c8:	fc 01       	movw	r30, r24
   170ca:	05 a1       	ldd	r16, Z+37	; 0x25
   170cc:	16 a1       	ldd	r17, Z+38	; 0x26
   170ce:	26 ee       	ldi	r18, 0xE6	; 230
   170d0:	3b e1       	ldi	r19, 0x1B	; 27
   170d2:	02 96       	adiw	r24, 0x02	; 2
   170d4:	0e 94 82 85 	call	0x10b04	; 0x10b04 <dbf_open_write>
   170d8:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <AMIGOp>
   170dc:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <AMIGOp+0x1>
   170e0:	25 a1       	ldd	r18, Z+37	; 0x25
   170e2:	36 a1       	ldd	r19, Z+38	; 0x26
   170e4:	82 17       	cp	r24, r18
   170e6:	93 07       	cpc	r25, r19
   170e8:	71 f0       	breq	.+28     	; 0x17106 <amigo_format+0xbe>
   170ea:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <AMIGOs>
   170ee:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <AMIGOs+0x1>
   170f2:	87 81       	ldd	r24, Z+7	; 0x07
   170f4:	90 85       	ldd	r25, Z+8	; 0x08
   170f6:	82 60       	ori	r24, 0x02	; 2
   170f8:	90 87       	std	Z+8, r25	; 0x08
   170fa:	87 83       	std	Z+7, r24	; 0x07
   170fc:	81 e0       	ldi	r24, 0x01	; 1
   170fe:	86 83       	std	Z+6, r24	; 0x06
   17100:	c1 e0       	ldi	r28, 0x01	; 1
   17102:	d0 e0       	ldi	r29, 0x00	; 0
   17104:	0f c0       	rjmp	.+30     	; 0x17124 <amigo_format+0xdc>
   17106:	80 e0       	ldi	r24, 0x00	; 0
   17108:	90 e0       	ldi	r25, 0x00	; 0
   1710a:	b9 de       	rcall	.-654    	; 0x16e7e <amigo_increment>
   1710c:	89 2b       	or	r24, r25
   1710e:	41 f2       	breq	.-112    	; 0x170a0 <amigo_format+0x58>
   17110:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <AMIGOs>
   17114:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <AMIGOs+0x1>
   17118:	15 82       	std	Z+5, r1	; 0x05
   1711a:	14 82       	std	Z+4, r1	; 0x04
   1711c:	13 82       	std	Z+3, r1	; 0x03
   1711e:	16 82       	std	Z+6, r1	; 0x06
   17120:	c0 e0       	ldi	r28, 0x00	; 0
   17122:	d0 e0       	ldi	r29, 0x00	; 0
   17124:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17128:	86 ff       	sbrs	r24, 6
   1712a:	04 c0       	rjmp	.+8      	; 0x17134 <amigo_format+0xec>
   1712c:	8c ef       	ldi	r24, 0xFC	; 252
   1712e:	94 e1       	ldi	r25, 0x14	; 20
   17130:	0e 94 eb 85 	call	0x10bd6	; 0x10bd6 <gpib_timer_elapsed_end>
   17134:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17138:	85 ff       	sbrs	r24, 5
   1713a:	0a c0       	rjmp	.+20     	; 0x17150 <amigo_format+0x108>
   1713c:	85 eb       	ldi	r24, 0xB5	; 181
   1713e:	9e e2       	ldi	r25, 0x2E	; 46
   17140:	1f 92       	push	r1
   17142:	9f 93       	push	r25
   17144:	8f 93       	push	r24
   17146:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1714a:	0f 90       	pop	r0
   1714c:	0f 90       	pop	r0
   1714e:	0f 90       	pop	r0
   17150:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <AMIGOp>
   17154:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <AMIGOp+0x1>
   17158:	81 81       	ldd	r24, Z+1	; 0x01
   1715a:	90 e0       	ldi	r25, 0x00	; 0
   1715c:	0e 94 91 86 	call	0x10d22	; 0x10d22 <gpib_enable_PPR>
   17160:	ce 01       	movw	r24, r28
   17162:	cd b7       	in	r28, 0x3d	; 61
   17164:	de b7       	in	r29, 0x3e	; 62
   17166:	e6 e0       	ldi	r30, 0x06	; 6
   17168:	0c 94 08 e6 	jmp	0x1cc10	; 0x1cc10 <__epilogue_restores__+0x18>

0001716c <amigo_buffered_read>:
   1716c:	8f 92       	push	r8
   1716e:	9f 92       	push	r9
   17170:	af 92       	push	r10
   17172:	bf 92       	push	r11
   17174:	ef 92       	push	r14
   17176:	ff 92       	push	r15
   17178:	0f 93       	push	r16
   1717a:	1f 93       	push	r17
   1717c:	cf 93       	push	r28
   1717e:	df 93       	push	r29
   17180:	00 d0       	rcall	.+0      	; 0x17182 <amigo_buffered_read+0x16>
   17182:	cd b7       	in	r28, 0x3d	; 61
   17184:	de b7       	in	r29, 0x3e	; 62
   17186:	63 e0       	ldi	r22, 0x03	; 3
   17188:	75 e1       	ldi	r23, 0x15	; 21
   1718a:	80 91 65 18 	lds	r24, 0x1865	; 0x801865 <AMIGOs>
   1718e:	90 91 66 18 	lds	r25, 0x1866	; 0x801866 <AMIGOs+0x1>
   17192:	a0 dc       	rcall	.-1728   	; 0x16ad4 <amigo_chs_to_logical>
   17194:	4b 01       	movw	r8, r22
   17196:	5c 01       	movw	r10, r24
   17198:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1719c:	86 fd       	sbrc	r24, 6
   1719e:	0e 94 d9 85 	call	0x10bb2	; 0x10bb2 <gpib_timer_elapsed_begin>
   171a2:	80 91 67 18 	lds	r24, 0x1867	; 0x801867 <AMIGOp>
   171a6:	90 91 68 18 	lds	r25, 0x1868	; 0x801868 <AMIGOp+0x1>
   171aa:	e0 90 65 18 	lds	r14, 0x1865	; 0x801865 <AMIGOs>
   171ae:	f0 90 66 18 	lds	r15, 0x1866	; 0x801866 <AMIGOs+0x1>
   171b2:	27 e0       	ldi	r18, 0x07	; 7
   171b4:	e2 0e       	add	r14, r18
   171b6:	f1 1c       	adc	r15, r1
   171b8:	fc 01       	movw	r30, r24
   171ba:	05 a1       	ldd	r16, Z+37	; 0x25
   171bc:	16 a1       	ldd	r17, Z+38	; 0x26
   171be:	26 ee       	ldi	r18, 0xE6	; 230
   171c0:	3b e1       	ldi	r19, 0x1B	; 27
   171c2:	b5 01       	movw	r22, r10
   171c4:	a4 01       	movw	r20, r8
   171c6:	02 96       	adiw	r24, 0x02	; 2
   171c8:	0e 94 2b 85 	call	0x10a56	; 0x10a56 <dbf_open_read>
   171cc:	7c 01       	movw	r14, r24
   171ce:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   171d2:	86 ff       	sbrs	r24, 6
   171d4:	04 c0       	rjmp	.+8      	; 0x171de <amigo_buffered_read+0x72>
   171d6:	85 ef       	ldi	r24, 0xF5	; 245
   171d8:	9f e0       	ldi	r25, 0x0F	; 15
   171da:	0e 94 eb 85 	call	0x10bd6	; 0x10bd6 <gpib_timer_elapsed_end>
   171de:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <AMIGOp>
   171e2:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <AMIGOp+0x1>
   171e6:	85 a1       	ldd	r24, Z+37	; 0x25
   171e8:	96 a1       	ldd	r25, Z+38	; 0x26
   171ea:	e8 16       	cp	r14, r24
   171ec:	f9 06       	cpc	r15, r25
   171ee:	39 f0       	breq	.+14     	; 0x171fe <amigo_buffered_read+0x92>
   171f0:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <AMIGOs>
   171f4:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <AMIGOs+0x1>
   171f8:	81 e0       	ldi	r24, 0x01	; 1
   171fa:	86 83       	std	Z+6, r24	; 0x06
   171fc:	6c c0       	rjmp	.+216    	; 0x172d6 <amigo_buffered_read+0x16a>
   171fe:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17202:	87 fd       	sbrc	r24, 7
   17204:	0e 94 d9 85 	call	0x10bb2	; 0x10bb2 <gpib_timer_elapsed_begin>
   17208:	80 e0       	ldi	r24, 0x00	; 0
   1720a:	91 e0       	ldi	r25, 0x01	; 1
   1720c:	9a 83       	std	Y+2, r25	; 0x02
   1720e:	89 83       	std	Y+1, r24	; 0x01
   17210:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <AMIGOp>
   17214:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <AMIGOp+0x1>
   17218:	65 a1       	ldd	r22, Z+37	; 0x25
   1721a:	76 a1       	ldd	r23, Z+38	; 0x26
   1721c:	ae 01       	movw	r20, r28
   1721e:	4f 5f       	subi	r20, 0xFF	; 255
   17220:	5f 4f       	sbci	r21, 0xFF	; 255
   17222:	86 ee       	ldi	r24, 0xE6	; 230
   17224:	9b e1       	ldi	r25, 0x1B	; 27
   17226:	0e 94 e1 8b 	call	0x117c2	; 0x117c2 <gpib_write_str>
   1722a:	7c 01       	movw	r14, r24
   1722c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17230:	87 ff       	sbrs	r24, 7
   17232:	04 c0       	rjmp	.+8      	; 0x1723c <amigo_buffered_read+0xd0>
   17234:	81 e1       	ldi	r24, 0x11	; 17
   17236:	95 e1       	ldi	r25, 0x15	; 21
   17238:	0e 94 eb 85 	call	0x10bd6	; 0x10bd6 <gpib_timer_elapsed_end>
   1723c:	89 81       	ldd	r24, Y+1	; 0x01
   1723e:	9a 81       	ldd	r25, Y+2	; 0x02
   17240:	88 27       	eor	r24, r24
   17242:	90 7d       	andi	r25, 0xD0	; 208
   17244:	89 2b       	or	r24, r25
   17246:	49 f4       	brne	.+18     	; 0x1725a <amigo_buffered_read+0xee>
   17248:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <AMIGOp>
   1724c:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <AMIGOp+0x1>
   17250:	85 a1       	ldd	r24, Z+37	; 0x25
   17252:	96 a1       	ldd	r25, Z+38	; 0x26
   17254:	e8 16       	cp	r14, r24
   17256:	f9 06       	cpc	r15, r25
   17258:	31 f1       	breq	.+76     	; 0x172a6 <amigo_buffered_read+0x13a>
   1725a:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <AMIGOs>
   1725e:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <AMIGOs+0x1>
   17262:	81 e0       	ldi	r24, 0x01	; 1
   17264:	86 83       	std	Z+6, r24	; 0x06
   17266:	87 81       	ldd	r24, Z+7	; 0x07
   17268:	90 85       	ldd	r25, Z+8	; 0x08
   1726a:	80 62       	ori	r24, 0x20	; 32
   1726c:	90 87       	std	Z+8, r25	; 0x08
   1726e:	87 83       	std	Z+7, r24	; 0x07
   17270:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17274:	80 ff       	sbrs	r24, 0
   17276:	0a c0       	rjmp	.+20     	; 0x1728c <amigo_buffered_read+0x120>
   17278:	8b e9       	ldi	r24, 0x9B	; 155
   1727a:	9e e2       	ldi	r25, 0x2E	; 46
   1727c:	1f 92       	push	r1
   1727e:	9f 93       	push	r25
   17280:	8f 93       	push	r24
   17282:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   17286:	0f 90       	pop	r0
   17288:	0f 90       	pop	r0
   1728a:	0f 90       	pop	r0
   1728c:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <AMIGOp>
   17290:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <AMIGOp+0x1>
   17294:	81 81       	ldd	r24, Z+1	; 0x01
   17296:	90 e0       	ldi	r25, 0x00	; 0
   17298:	0e 94 91 86 	call	0x10d22	; 0x10d22 <gpib_enable_PPR>
   1729c:	89 81       	ldd	r24, Y+1	; 0x01
   1729e:	9a 81       	ldd	r25, Y+2	; 0x02
   172a0:	88 27       	eor	r24, r24
   172a2:	90 7d       	andi	r25, 0xD0	; 208
   172a4:	1a c0       	rjmp	.+52     	; 0x172da <amigo_buffered_read+0x16e>
   172a6:	83 e0       	ldi	r24, 0x03	; 3
   172a8:	95 e1       	ldi	r25, 0x15	; 21
   172aa:	e9 dd       	rcall	.-1070   	; 0x16e7e <amigo_increment>
   172ac:	89 2b       	or	r24, r25
   172ae:	59 f0       	breq	.+22     	; 0x172c6 <amigo_buffered_read+0x15a>
   172b0:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <AMIGOs>
   172b4:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <AMIGOs+0x1>
   172b8:	81 e0       	ldi	r24, 0x01	; 1
   172ba:	86 83       	std	Z+6, r24	; 0x06
   172bc:	87 81       	ldd	r24, Z+7	; 0x07
   172be:	90 85       	ldd	r25, Z+8	; 0x08
   172c0:	84 60       	ori	r24, 0x04	; 4
   172c2:	90 87       	std	Z+8, r25	; 0x08
   172c4:	87 83       	std	Z+7, r24	; 0x07
   172c6:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <AMIGOp>
   172ca:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <AMIGOp+0x1>
   172ce:	81 81       	ldd	r24, Z+1	; 0x01
   172d0:	90 e0       	ldi	r25, 0x00	; 0
   172d2:	0e 94 91 86 	call	0x10d22	; 0x10d22 <gpib_enable_PPR>
   172d6:	80 e0       	ldi	r24, 0x00	; 0
   172d8:	90 e0       	ldi	r25, 0x00	; 0
   172da:	0f 90       	pop	r0
   172dc:	0f 90       	pop	r0
   172de:	df 91       	pop	r29
   172e0:	cf 91       	pop	r28
   172e2:	1f 91       	pop	r17
   172e4:	0f 91       	pop	r16
   172e6:	ff 90       	pop	r15
   172e8:	ef 90       	pop	r14
   172ea:	bf 90       	pop	r11
   172ec:	af 90       	pop	r10
   172ee:	9f 90       	pop	r9
   172f0:	8f 90       	pop	r8
   172f2:	08 95       	ret

000172f4 <amigo_buffered_write>:
   172f4:	8f 92       	push	r8
   172f6:	9f 92       	push	r9
   172f8:	af 92       	push	r10
   172fa:	bf 92       	push	r11
   172fc:	ef 92       	push	r14
   172fe:	ff 92       	push	r15
   17300:	0f 93       	push	r16
   17302:	1f 93       	push	r17
   17304:	cf 93       	push	r28
   17306:	df 93       	push	r29
   17308:	00 d0       	rcall	.+0      	; 0x1730a <amigo_buffered_write+0x16>
   1730a:	cd b7       	in	r28, 0x3d	; 61
   1730c:	de b7       	in	r29, 0x3e	; 62
   1730e:	6c e1       	ldi	r22, 0x1C	; 28
   17310:	75 e1       	ldi	r23, 0x15	; 21
   17312:	80 91 65 18 	lds	r24, 0x1865	; 0x801865 <AMIGOs>
   17316:	90 91 66 18 	lds	r25, 0x1866	; 0x801866 <AMIGOs+0x1>
   1731a:	dc db       	rcall	.-2120   	; 0x16ad4 <amigo_chs_to_logical>
   1731c:	4b 01       	movw	r8, r22
   1731e:	5c 01       	movw	r10, r24
   17320:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17324:	87 fd       	sbrc	r24, 7
   17326:	0e 94 d9 85 	call	0x10bb2	; 0x10bb2 <gpib_timer_elapsed_begin>
   1732a:	1a 82       	std	Y+2, r1	; 0x02
   1732c:	19 82       	std	Y+1, r1	; 0x01
   1732e:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <AMIGOp>
   17332:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <AMIGOp+0x1>
   17336:	65 a1       	ldd	r22, Z+37	; 0x25
   17338:	76 a1       	ldd	r23, Z+38	; 0x26
   1733a:	ae 01       	movw	r20, r28
   1733c:	4f 5f       	subi	r20, 0xFF	; 255
   1733e:	5f 4f       	sbci	r21, 0xFF	; 255
   17340:	86 ee       	ldi	r24, 0xE6	; 230
   17342:	9b e1       	ldi	r25, 0x1B	; 27
   17344:	0e 94 33 8b 	call	0x11666	; 0x11666 <gpib_read_str>
   17348:	7c 01       	movw	r14, r24
   1734a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1734e:	87 ff       	sbrs	r24, 7
   17350:	04 c0       	rjmp	.+8      	; 0x1735a <amigo_buffered_write+0x66>
   17352:	8b e2       	ldi	r24, 0x2B	; 43
   17354:	95 e1       	ldi	r25, 0x15	; 21
   17356:	0e 94 eb 85 	call	0x10bd6	; 0x10bd6 <gpib_timer_elapsed_end>
   1735a:	89 81       	ldd	r24, Y+1	; 0x01
   1735c:	9a 81       	ldd	r25, Y+2	; 0x02
   1735e:	88 27       	eor	r24, r24
   17360:	90 7d       	andi	r25, 0xD0	; 208
   17362:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   17366:	89 2b       	or	r24, r25
   17368:	49 f4       	brne	.+18     	; 0x1737c <amigo_buffered_write+0x88>
   1736a:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <AMIGOp>
   1736e:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <AMIGOp+0x1>
   17372:	85 a1       	ldd	r24, Z+37	; 0x25
   17374:	96 a1       	ldd	r25, Z+38	; 0x26
   17376:	e8 16       	cp	r14, r24
   17378:	f9 06       	cpc	r15, r25
   1737a:	c1 f0       	breq	.+48     	; 0x173ac <amigo_buffered_write+0xb8>
   1737c:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <AMIGOs>
   17380:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <AMIGOs+0x1>
   17384:	81 e0       	ldi	r24, 0x01	; 1
   17386:	86 83       	std	Z+6, r24	; 0x06
   17388:	87 81       	ldd	r24, Z+7	; 0x07
   1738a:	90 85       	ldd	r25, Z+8	; 0x08
   1738c:	80 62       	ori	r24, 0x20	; 32
   1738e:	90 87       	std	Z+8, r25	; 0x08
   17390:	87 83       	std	Z+7, r24	; 0x07
   17392:	20 ff       	sbrs	r18, 0
   17394:	4e c0       	rjmp	.+156    	; 0x17432 <amigo_buffered_write+0x13e>
   17396:	8c e7       	ldi	r24, 0x7C	; 124
   17398:	9e e2       	ldi	r25, 0x2E	; 46
   1739a:	1f 92       	push	r1
   1739c:	9f 93       	push	r25
   1739e:	8f 93       	push	r24
   173a0:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   173a4:	0f 90       	pop	r0
   173a6:	0f 90       	pop	r0
   173a8:	0f 90       	pop	r0
   173aa:	43 c0       	rjmp	.+134    	; 0x17432 <amigo_buffered_write+0x13e>
   173ac:	26 fd       	sbrc	r18, 6
   173ae:	0e 94 d9 85 	call	0x10bb2	; 0x10bb2 <gpib_timer_elapsed_begin>
   173b2:	80 91 67 18 	lds	r24, 0x1867	; 0x801867 <AMIGOp>
   173b6:	90 91 68 18 	lds	r25, 0x1868	; 0x801868 <AMIGOp+0x1>
   173ba:	e0 90 65 18 	lds	r14, 0x1865	; 0x801865 <AMIGOs>
   173be:	f0 90 66 18 	lds	r15, 0x1866	; 0x801866 <AMIGOs+0x1>
   173c2:	27 e0       	ldi	r18, 0x07	; 7
   173c4:	e2 0e       	add	r14, r18
   173c6:	f1 1c       	adc	r15, r1
   173c8:	fc 01       	movw	r30, r24
   173ca:	05 a1       	ldd	r16, Z+37	; 0x25
   173cc:	16 a1       	ldd	r17, Z+38	; 0x26
   173ce:	26 ee       	ldi	r18, 0xE6	; 230
   173d0:	3b e1       	ldi	r19, 0x1B	; 27
   173d2:	b5 01       	movw	r22, r10
   173d4:	a4 01       	movw	r20, r8
   173d6:	02 96       	adiw	r24, 0x02	; 2
   173d8:	0e 94 82 85 	call	0x10b04	; 0x10b04 <dbf_open_write>
   173dc:	7c 01       	movw	r14, r24
   173de:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   173e2:	86 ff       	sbrs	r24, 6
   173e4:	04 c0       	rjmp	.+8      	; 0x173ee <amigo_buffered_write+0xfa>
   173e6:	8a ee       	ldi	r24, 0xEA	; 234
   173e8:	9f e0       	ldi	r25, 0x0F	; 15
   173ea:	0e 94 eb 85 	call	0x10bd6	; 0x10bd6 <gpib_timer_elapsed_end>
   173ee:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <AMIGOp>
   173f2:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <AMIGOp+0x1>
   173f6:	85 a1       	ldd	r24, Z+37	; 0x25
   173f8:	96 a1       	ldd	r25, Z+38	; 0x26
   173fa:	e8 16       	cp	r14, r24
   173fc:	f9 06       	cpc	r15, r25
   173fe:	49 f0       	breq	.+18     	; 0x17412 <amigo_buffered_write+0x11e>
   17400:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <AMIGOs>
   17404:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <AMIGOs+0x1>
   17408:	81 e0       	ldi	r24, 0x01	; 1
   1740a:	86 83       	std	Z+6, r24	; 0x06
   1740c:	80 e0       	ldi	r24, 0x00	; 0
   1740e:	90 e0       	ldi	r25, 0x00	; 0
   17410:	1c c0       	rjmp	.+56     	; 0x1744a <amigo_buffered_write+0x156>
   17412:	8c e1       	ldi	r24, 0x1C	; 28
   17414:	95 e1       	ldi	r25, 0x15	; 21
   17416:	33 dd       	rcall	.-1434   	; 0x16e7e <amigo_increment>
   17418:	89 2b       	or	r24, r25
   1741a:	59 f0       	breq	.+22     	; 0x17432 <amigo_buffered_write+0x13e>
   1741c:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <AMIGOs>
   17420:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <AMIGOs+0x1>
   17424:	81 e0       	ldi	r24, 0x01	; 1
   17426:	86 83       	std	Z+6, r24	; 0x06
   17428:	87 81       	ldd	r24, Z+7	; 0x07
   1742a:	90 85       	ldd	r25, Z+8	; 0x08
   1742c:	84 60       	ori	r24, 0x04	; 4
   1742e:	90 87       	std	Z+8, r25	; 0x08
   17430:	87 83       	std	Z+7, r24	; 0x07
   17432:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <AMIGOp>
   17436:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <AMIGOp+0x1>
   1743a:	81 81       	ldd	r24, Z+1	; 0x01
   1743c:	90 e0       	ldi	r25, 0x00	; 0
   1743e:	0e 94 91 86 	call	0x10d22	; 0x10d22 <gpib_enable_PPR>
   17442:	89 81       	ldd	r24, Y+1	; 0x01
   17444:	9a 81       	ldd	r25, Y+2	; 0x02
   17446:	88 27       	eor	r24, r24
   17448:	90 7d       	andi	r25, 0xD0	; 208
   1744a:	0f 90       	pop	r0
   1744c:	0f 90       	pop	r0
   1744e:	df 91       	pop	r29
   17450:	cf 91       	pop	r28
   17452:	1f 91       	pop	r17
   17454:	0f 91       	pop	r16
   17456:	ff 90       	pop	r15
   17458:	ef 90       	pop	r14
   1745a:	bf 90       	pop	r11
   1745c:	af 90       	pop	r10
   1745e:	9f 90       	pop	r9
   17460:	8f 90       	pop	r8
   17462:	08 95       	ret

00017464 <amigo_cmd_dsj>:
   17464:	a3 e0       	ldi	r26, 0x03	; 3
   17466:	b0 e0       	ldi	r27, 0x00	; 0
   17468:	e8 e3       	ldi	r30, 0x38	; 56
   1746a:	fa eb       	ldi	r31, 0xBA	; 186
   1746c:	0c 94 f0 e5 	jmp	0x1cbe0	; 0x1cbe0 <__prologue_saves__+0x20>
   17470:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <AMIGOs>
   17474:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <AMIGOs+0x1>
   17478:	86 81       	ldd	r24, Z+6	; 0x06
   1747a:	8b 83       	std	Y+3, r24	; 0x03
   1747c:	80 e0       	ldi	r24, 0x00	; 0
   1747e:	91 e0       	ldi	r25, 0x01	; 1
   17480:	9a 83       	std	Y+2, r25	; 0x02
   17482:	89 83       	std	Y+1, r24	; 0x01
   17484:	ae 01       	movw	r20, r28
   17486:	4f 5f       	subi	r20, 0xFF	; 255
   17488:	5f 4f       	sbci	r21, 0xFF	; 255
   1748a:	61 e0       	ldi	r22, 0x01	; 1
   1748c:	70 e0       	ldi	r23, 0x00	; 0
   1748e:	ce 01       	movw	r24, r28
   17490:	03 96       	adiw	r24, 0x03	; 3
   17492:	0e 94 e1 8b 	call	0x117c2	; 0x117c2 <gpib_write_str>
   17496:	29 81       	ldd	r18, Y+1	; 0x01
   17498:	3a 81       	ldd	r19, Y+2	; 0x02
   1749a:	22 27       	eor	r18, r18
   1749c:	30 7d       	andi	r19, 0xD0	; 208
   1749e:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <AMIGOs>
   174a2:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <AMIGOs+0x1>
   174a6:	23 2b       	or	r18, r19
   174a8:	29 f0       	breq	.+10     	; 0x174b4 <amigo_cmd_dsj+0x50>
   174aa:	27 81       	ldd	r18, Z+7	; 0x07
   174ac:	30 85       	ldd	r19, Z+8	; 0x08
   174ae:	20 62       	ori	r18, 0x20	; 32
   174b0:	30 87       	std	Z+8, r19	; 0x08
   174b2:	27 83       	std	Z+7, r18	; 0x07
   174b4:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   174b8:	01 97       	sbiw	r24, 0x01	; 1
   174ba:	c1 f0       	breq	.+48     	; 0x174ec <amigo_cmd_dsj+0x88>
   174bc:	81 e0       	ldi	r24, 0x01	; 1
   174be:	86 83       	std	Z+6, r24	; 0x06
   174c0:	87 81       	ldd	r24, Z+7	; 0x07
   174c2:	90 85       	ldd	r25, Z+8	; 0x08
   174c4:	80 62       	ori	r24, 0x20	; 32
   174c6:	90 87       	std	Z+8, r25	; 0x08
   174c8:	87 83       	std	Z+7, r24	; 0x07
   174ca:	20 ff       	sbrs	r18, 0
   174cc:	0a c0       	rjmp	.+20     	; 0x174e2 <amigo_cmd_dsj+0x7e>
   174ce:	82 e6       	ldi	r24, 0x62	; 98
   174d0:	9e e2       	ldi	r25, 0x2E	; 46
   174d2:	1f 92       	push	r1
   174d4:	9f 93       	push	r25
   174d6:	8f 93       	push	r24
   174d8:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   174dc:	0f 90       	pop	r0
   174de:	0f 90       	pop	r0
   174e0:	0f 90       	pop	r0
   174e2:	89 81       	ldd	r24, Y+1	; 0x01
   174e4:	9a 81       	ldd	r25, Y+2	; 0x02
   174e6:	88 27       	eor	r24, r24
   174e8:	90 7d       	andi	r25, 0xD0	; 208
   174ea:	1a c0       	rjmp	.+52     	; 0x17520 <amigo_cmd_dsj+0xbc>
   174ec:	25 ff       	sbrs	r18, 5
   174ee:	0f c0       	rjmp	.+30     	; 0x1750e <amigo_cmd_dsj+0xaa>
   174f0:	86 81       	ldd	r24, Z+6	; 0x06
   174f2:	1f 92       	push	r1
   174f4:	8f 93       	push	r24
   174f6:	85 e5       	ldi	r24, 0x55	; 85
   174f8:	9e e2       	ldi	r25, 0x2E	; 46
   174fa:	1f 92       	push	r1
   174fc:	9f 93       	push	r25
   174fe:	8f 93       	push	r24
   17500:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   17504:	0f 90       	pop	r0
   17506:	0f 90       	pop	r0
   17508:	0f 90       	pop	r0
   1750a:	0f 90       	pop	r0
   1750c:	0f 90       	pop	r0
   1750e:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <AMIGOs>
   17512:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <AMIGOs+0x1>
   17516:	16 82       	std	Z+6, r1	; 0x06
   17518:	10 86       	std	Z+8, r1	; 0x08
   1751a:	17 82       	std	Z+7, r1	; 0x07
   1751c:	80 e0       	ldi	r24, 0x00	; 0
   1751e:	90 e0       	ldi	r25, 0x00	; 0
   17520:	23 96       	adiw	r28, 0x03	; 3
   17522:	e2 e0       	ldi	r30, 0x02	; 2
   17524:	0c 94 0c e6 	jmp	0x1cc18	; 0x1cc18 <__epilogue_restores__+0x20>

00017528 <amigo_cmd_clear>:
   17528:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1752c:	85 ff       	sbrs	r24, 5
   1752e:	0a c0       	rjmp	.+20     	; 0x17544 <amigo_cmd_clear+0x1c>
   17530:	8c e1       	ldi	r24, 0x1C	; 28
   17532:	9e e2       	ldi	r25, 0x2E	; 46
   17534:	1f 92       	push	r1
   17536:	9f 93       	push	r25
   17538:	8f 93       	push	r24
   1753a:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1753e:	0f 90       	pop	r0
   17540:	0f 90       	pop	r0
   17542:	0f 90       	pop	r0
   17544:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <AMIGOs>
   17548:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <AMIGOs+0x1>
   1754c:	15 82       	std	Z+5, r1	; 0x05
   1754e:	14 82       	std	Z+4, r1	; 0x04
   17550:	13 82       	std	Z+3, r1	; 0x03
   17552:	16 82       	std	Z+6, r1	; 0x06
   17554:	10 86       	std	Z+8, r1	; 0x08
   17556:	17 82       	std	Z+7, r1	; 0x07
   17558:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <AMIGOp>
   1755c:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <AMIGOp+0x1>
   17560:	81 81       	ldd	r24, Z+1	; 0x01
   17562:	90 e0       	ldi	r25, 0x00	; 0
   17564:	0e 94 91 86 	call	0x10d22	; 0x10d22 <gpib_enable_PPR>
   17568:	80 e0       	ldi	r24, 0x00	; 0
   1756a:	90 e0       	ldi	r25, 0x00	; 0
   1756c:	08 95       	ret

0001756e <amigo_todo_op>:
/// @param[in] opcode: GPIB data byte OP Code
/// @param[in] len: Length of GOIB data returned
/// @return  0

int amigo_todo_op(uint8_t secondary, uint8_t opcode, int len)
{
   1756e:	0f 93       	push	r16
   17570:	1f 93       	push	r17
   17572:	cf 93       	push	r28
   17574:	df 93       	push	r29
   17576:	c8 2f       	mov	r28, r24
   17578:	d6 2f       	mov	r29, r22
   1757a:	14 2f       	mov	r17, r20
   1757c:	05 2f       	mov	r16, r21
    if(AMIGO_is_MLA(listening))
   1757e:	80 91 ec 1d 	lds	r24, 0x1DEC	; 0x801dec <listening>
   17582:	90 e0       	ldi	r25, 0x00	; 0
   17584:	0e 94 cb 8c 	call	0x11996	; 0x11996 <AMIGO_is_MLA>
   17588:	20 91 ea 1d 	lds	r18, 0x1DEA	; 0x801dea <talking>
   1758c:	89 2b       	or	r24, r25
   1758e:	19 f1       	breq	.+70     	; 0x175d6 <amigo_todo_op+0x68>
        printf("[L   Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   17590:	1f 92       	push	r1
   17592:	2f 93       	push	r18
   17594:	80 91 ec 1d 	lds	r24, 0x1DEC	; 0x801dec <listening>
   17598:	1f 92       	push	r1
   1759a:	8f 93       	push	r24
   1759c:	0f 93       	push	r16
   1759e:	1f 93       	push	r17
   175a0:	1f 92       	push	r1
   175a2:	df 93       	push	r29
   175a4:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <AMIGOs>
   175a8:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <AMIGOs+0x1>
   175ac:	80 81       	ld	r24, Z
   175ae:	1f 92       	push	r1
   175b0:	8f 93       	push	r24
   175b2:	1f 92       	push	r1
   175b4:	cf 93       	push	r28
   175b6:	85 eb       	ldi	r24, 0xB5	; 181
   175b8:	9d e2       	ldi	r25, 0x2D	; 45
   175ba:	1f 92       	push	r1
   175bc:	9f 93       	push	r25
   175be:	8f 93       	push	r24
   175c0:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   175c4:	8d b7       	in	r24, 0x3d	; 61
   175c6:	9e b7       	in	r25, 0x3e	; 62
   175c8:	0f 96       	adiw	r24, 0x0f	; 15
   175ca:	0f b6       	in	r0, 0x3f	; 63
   175cc:	f8 94       	cli
   175ce:	9e bf       	out	0x3e, r25	; 62
   175d0:	0f be       	out	0x3f, r0	; 63
   175d2:	8d bf       	out	0x3d, r24	; 61
   175d4:	66 c0       	rjmp	.+204    	; 0x176a2 <amigo_todo_op+0x134>
            secondary, AMIGOs->state, opcode, len, listening, talking);
    else if(AMIGO_is_MTA(talking))
   175d6:	82 2f       	mov	r24, r18
   175d8:	90 e0       	ldi	r25, 0x00	; 0
   175da:	0e 94 da 8c 	call	0x119b4	; 0x119b4 <AMIGO_is_MTA>
   175de:	30 91 ec 1d 	lds	r19, 0x1DEC	; 0x801dec <listening>
   175e2:	20 91 ea 1d 	lds	r18, 0x1DEA	; 0x801dea <talking>
   175e6:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <AMIGOs>
   175ea:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <AMIGOs+0x1>
   175ee:	89 2b       	or	r24, r25
   175f0:	e9 f0       	breq	.+58     	; 0x1762c <amigo_todo_op+0xbe>
        printf("[T   Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   175f2:	1f 92       	push	r1
   175f4:	2f 93       	push	r18
   175f6:	1f 92       	push	r1
   175f8:	3f 93       	push	r19
   175fa:	0f 93       	push	r16
   175fc:	1f 93       	push	r17
   175fe:	1f 92       	push	r1
   17600:	df 93       	push	r29
   17602:	80 81       	ld	r24, Z
   17604:	1f 92       	push	r1
   17606:	8f 93       	push	r24
   17608:	1f 92       	push	r1
   1760a:	cf 93       	push	r28
   1760c:	8e e4       	ldi	r24, 0x4E	; 78
   1760e:	9d e2       	ldi	r25, 0x2D	; 45
   17610:	1f 92       	push	r1
   17612:	9f 93       	push	r25
   17614:	8f 93       	push	r24
   17616:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1761a:	8d b7       	in	r24, 0x3d	; 61
   1761c:	9e b7       	in	r25, 0x3e	; 62
   1761e:	0f 96       	adiw	r24, 0x0f	; 15
   17620:	0f b6       	in	r0, 0x3f	; 63
   17622:	f8 94       	cli
   17624:	9e bf       	out	0x3e, r25	; 62
   17626:	0f be       	out	0x3f, r0	; 63
   17628:	8d bf       	out	0x3d, r24	; 61
   1762a:	3b c0       	rjmp	.+118    	; 0x176a2 <amigo_todo_op+0x134>
                secondary, AMIGOs->state, opcode, len, listening, talking);
    else if(talking == UNT)
   1762c:	2f 35       	cpi	r18, 0x5F	; 95
   1762e:	e9 f4       	brne	.+58     	; 0x1766a <amigo_todo_op+0xfc>
        printf("[UNT Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   17630:	1f 92       	push	r1
   17632:	2f 93       	push	r18
   17634:	1f 92       	push	r1
   17636:	3f 93       	push	r19
   17638:	0f 93       	push	r16
   1763a:	1f 93       	push	r17
   1763c:	1f 92       	push	r1
   1763e:	df 93       	push	r29
   17640:	80 81       	ld	r24, Z
   17642:	1f 92       	push	r1
   17644:	8f 93       	push	r24
   17646:	1f 92       	push	r1
   17648:	cf 93       	push	r28
   1764a:	87 ee       	ldi	r24, 0xE7	; 231
   1764c:	9c e2       	ldi	r25, 0x2C	; 44
   1764e:	1f 92       	push	r1
   17650:	9f 93       	push	r25
   17652:	8f 93       	push	r24
   17654:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   17658:	8d b7       	in	r24, 0x3d	; 61
   1765a:	9e b7       	in	r25, 0x3e	; 62
   1765c:	0f 96       	adiw	r24, 0x0f	; 15
   1765e:	0f b6       	in	r0, 0x3f	; 63
   17660:	f8 94       	cli
   17662:	9e bf       	out	0x3e, r25	; 62
   17664:	0f be       	out	0x3f, r0	; 63
   17666:	8d bf       	out	0x3d, r24	; 61
   17668:	1c c0       	rjmp	.+56     	; 0x176a2 <amigo_todo_op+0x134>
                secondary, AMIGOs->state, opcode, len, listening, talking);
    else
        printf("[U Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   1766a:	1f 92       	push	r1
   1766c:	2f 93       	push	r18
   1766e:	1f 92       	push	r1
   17670:	3f 93       	push	r19
   17672:	0f 93       	push	r16
   17674:	1f 93       	push	r17
   17676:	1f 92       	push	r1
   17678:	df 93       	push	r29
   1767a:	80 81       	ld	r24, Z
   1767c:	1f 92       	push	r1
   1767e:	8f 93       	push	r24
   17680:	1f 92       	push	r1
   17682:	cf 93       	push	r28
   17684:	82 e8       	ldi	r24, 0x82	; 130
   17686:	9c e2       	ldi	r25, 0x2C	; 44
   17688:	1f 92       	push	r1
   1768a:	9f 93       	push	r25
   1768c:	8f 93       	push	r24
   1768e:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   17692:	8d b7       	in	r24, 0x3d	; 61
   17694:	9e b7       	in	r25, 0x3e	; 62
   17696:	0f 96       	adiw	r24, 0x0f	; 15
   17698:	0f b6       	in	r0, 0x3f	; 63
   1769a:	f8 94       	cli
   1769c:	9e bf       	out	0x3e, r25	; 62
   1769e:	0f be       	out	0x3f, r0	; 63
   176a0:	8d bf       	out	0x3d, r24	; 61
            secondary, AMIGOs->state, opcode, len, listening, talking);
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   176a2:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <AMIGOp>
   176a6:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <AMIGOp+0x1>
   176aa:	81 81       	ldd	r24, Z+1	; 0x01
   176ac:	90 e0       	ldi	r25, 0x00	; 0
   176ae:	0e 94 91 86 	call	0x10d22	; 0x10d22 <gpib_enable_PPR>
    return(0);
}
   176b2:	80 e0       	ldi	r24, 0x00	; 0
   176b4:	90 e0       	ldi	r25, 0x00	; 0
   176b6:	df 91       	pop	r29
   176b8:	cf 91       	pop	r28
   176ba:	1f 91       	pop	r17
   176bc:	0f 91       	pop	r16
   176be:	08 95       	ret

000176c0 <amigo_todo>:
/// @param[in] secondary: GPIB seconday command
///
/// @return  0

int amigo_todo(uint8_t secondary)
{
   176c0:	cf 93       	push	r28
   176c2:	c8 2f       	mov	r28, r24
    if(AMIGO_is_MLA(listening))
   176c4:	80 91 ec 1d 	lds	r24, 0x1DEC	; 0x801dec <listening>
   176c8:	90 e0       	ldi	r25, 0x00	; 0
   176ca:	0e 94 cb 8c 	call	0x11996	; 0x11996 <AMIGO_is_MLA>
   176ce:	20 91 ea 1d 	lds	r18, 0x1DEA	; 0x801dea <talking>
   176d2:	89 2b       	or	r24, r25
   176d4:	f9 f0       	breq	.+62     	; 0x17714 <amigo_todo+0x54>
        printf("[L   Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   176d6:	1f 92       	push	r1
   176d8:	2f 93       	push	r18
   176da:	80 91 ec 1d 	lds	r24, 0x1DEC	; 0x801dec <listening>
   176de:	1f 92       	push	r1
   176e0:	8f 93       	push	r24
   176e2:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <AMIGOs>
   176e6:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <AMIGOs+0x1>
   176ea:	80 81       	ld	r24, Z
   176ec:	1f 92       	push	r1
   176ee:	8f 93       	push	r24
   176f0:	1f 92       	push	r1
   176f2:	cf 93       	push	r28
   176f4:	82 e3       	ldi	r24, 0x32	; 50
   176f6:	9c e2       	ldi	r25, 0x2C	; 44
   176f8:	1f 92       	push	r1
   176fa:	9f 93       	push	r25
   176fc:	8f 93       	push	r24
   176fe:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   17702:	8d b7       	in	r24, 0x3d	; 61
   17704:	9e b7       	in	r25, 0x3e	; 62
   17706:	0b 96       	adiw	r24, 0x0b	; 11
   17708:	0f b6       	in	r0, 0x3f	; 63
   1770a:	f8 94       	cli
   1770c:	9e bf       	out	0x3e, r25	; 62
   1770e:	0f be       	out	0x3f, r0	; 63
   17710:	8d bf       	out	0x3d, r24	; 61
   17712:	5a c0       	rjmp	.+180    	; 0x177c8 <amigo_todo+0x108>
            secondary,AMIGOs->state,listening,talking);
    else if(AMIGO_is_MTA(talking))
   17714:	82 2f       	mov	r24, r18
   17716:	90 e0       	ldi	r25, 0x00	; 0
   17718:	0e 94 da 8c 	call	0x119b4	; 0x119b4 <AMIGO_is_MTA>
   1771c:	30 91 ec 1d 	lds	r19, 0x1DEC	; 0x801dec <listening>
   17720:	20 91 ea 1d 	lds	r18, 0x1DEA	; 0x801dea <talking>
   17724:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <AMIGOs>
   17728:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <AMIGOs+0x1>
   1772c:	89 2b       	or	r24, r25
   1772e:	c9 f0       	breq	.+50     	; 0x17762 <amigo_todo+0xa2>
        printf("[T   Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   17730:	1f 92       	push	r1
   17732:	2f 93       	push	r18
   17734:	1f 92       	push	r1
   17736:	3f 93       	push	r19
   17738:	80 81       	ld	r24, Z
   1773a:	1f 92       	push	r1
   1773c:	8f 93       	push	r24
   1773e:	1f 92       	push	r1
   17740:	cf 93       	push	r28
   17742:	82 ee       	ldi	r24, 0xE2	; 226
   17744:	9b e2       	ldi	r25, 0x2B	; 43
   17746:	1f 92       	push	r1
   17748:	9f 93       	push	r25
   1774a:	8f 93       	push	r24
   1774c:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   17750:	8d b7       	in	r24, 0x3d	; 61
   17752:	9e b7       	in	r25, 0x3e	; 62
   17754:	0b 96       	adiw	r24, 0x0b	; 11
   17756:	0f b6       	in	r0, 0x3f	; 63
   17758:	f8 94       	cli
   1775a:	9e bf       	out	0x3e, r25	; 62
   1775c:	0f be       	out	0x3f, r0	; 63
   1775e:	8d bf       	out	0x3d, r24	; 61
   17760:	33 c0       	rjmp	.+102    	; 0x177c8 <amigo_todo+0x108>
                secondary,AMIGOs->state,listening,talking);
    else if(talking == UNT)
   17762:	2f 35       	cpi	r18, 0x5F	; 95
   17764:	c9 f4       	brne	.+50     	; 0x17798 <amigo_todo+0xd8>
        printf("[UNT Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   17766:	1f 92       	push	r1
   17768:	2f 93       	push	r18
   1776a:	1f 92       	push	r1
   1776c:	3f 93       	push	r19
   1776e:	80 81       	ld	r24, Z
   17770:	1f 92       	push	r1
   17772:	8f 93       	push	r24
   17774:	1f 92       	push	r1
   17776:	cf 93       	push	r28
   17778:	82 e9       	ldi	r24, 0x92	; 146
   1777a:	9b e2       	ldi	r25, 0x2B	; 43
   1777c:	1f 92       	push	r1
   1777e:	9f 93       	push	r25
   17780:	8f 93       	push	r24
   17782:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   17786:	8d b7       	in	r24, 0x3d	; 61
   17788:	9e b7       	in	r25, 0x3e	; 62
   1778a:	0b 96       	adiw	r24, 0x0b	; 11
   1778c:	0f b6       	in	r0, 0x3f	; 63
   1778e:	f8 94       	cli
   17790:	9e bf       	out	0x3e, r25	; 62
   17792:	0f be       	out	0x3f, r0	; 63
   17794:	8d bf       	out	0x3d, r24	; 61
   17796:	18 c0       	rjmp	.+48     	; 0x177c8 <amigo_todo+0x108>
                secondary,AMIGOs->state,listening,talking);
    else
        printf("[E   Amigo ERROR secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   17798:	1f 92       	push	r1
   1779a:	2f 93       	push	r18
   1779c:	1f 92       	push	r1
   1779e:	3f 93       	push	r19
   177a0:	80 81       	ld	r24, Z
   177a2:	1f 92       	push	r1
   177a4:	8f 93       	push	r24
   177a6:	1f 92       	push	r1
   177a8:	cf 93       	push	r28
   177aa:	81 e4       	ldi	r24, 0x41	; 65
   177ac:	9b e2       	ldi	r25, 0x2B	; 43
   177ae:	1f 92       	push	r1
   177b0:	9f 93       	push	r25
   177b2:	8f 93       	push	r24
   177b4:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   177b8:	8d b7       	in	r24, 0x3d	; 61
   177ba:	9e b7       	in	r25, 0x3e	; 62
   177bc:	0b 96       	adiw	r24, 0x0b	; 11
   177be:	0f b6       	in	r0, 0x3f	; 63
   177c0:	f8 94       	cli
   177c2:	9e bf       	out	0x3e, r25	; 62
   177c4:	0f be       	out	0x3f, r0	; 63
   177c6:	8d bf       	out	0x3d, r24	; 61
            secondary,AMIGOs->state,listening,talking);
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   177c8:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <AMIGOp>
   177cc:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <AMIGOp+0x1>
   177d0:	81 81       	ldd	r24, Z+1	; 0x01
   177d2:	90 e0       	ldi	r25, 0x00	; 0
   177d4:	0e 94 91 86 	call	0x10d22	; 0x10d22 <gpib_enable_PPR>
    return(0);
}
   177d8:	80 e0       	ldi	r24, 0x00	; 0
   177da:	90 e0       	ldi	r25, 0x00	; 0
   177dc:	cf 91       	pop	r28
   177de:	08 95       	ret

000177e0 <amigo_check_unit>:
/// @brief  Amigo Check Valid unit
/// @param[in] unit: unit to set
/// @return void
void amigo_check_unit(uint8_t unit)
{
    if(unit != 15)
   177e0:	8f 30       	cpi	r24, 0x0F	; 15
   177e2:	29 f0       	breq	.+10     	; 0x177ee <amigo_check_unit+0xe>
        AMIGOs->unitNO = unit;
   177e4:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <AMIGOs>
   177e8:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <AMIGOs+0x1>
   177ec:	81 83       	std	Z+1, r24	; 0x01
    if(AMIGOs->unitNO != 0)
   177ee:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <AMIGOs>
   177f2:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <AMIGOs+0x1>
   177f6:	81 81       	ldd	r24, Z+1	; 0x01
   177f8:	88 23       	and	r24, r24
   177fa:	29 f0       	breq	.+10     	; 0x17806 <amigo_check_unit+0x26>
        AMIGOs->Errors |= ERR_UNIT;
   177fc:	87 81       	ldd	r24, Z+7	; 0x07
   177fe:	90 85       	ldd	r25, Z+8	; 0x08
   17800:	80 64       	ori	r24, 0x40	; 64
   17802:	90 87       	std	Z+8, r25	; 0x08
   17804:	87 83       	std	Z+7, r24	; 0x07
   17806:	08 95       	ret

00017808 <Amigo_Command>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list)

int Amigo_Command( int secondary )
{
   17808:	a3 e1       	ldi	r26, 0x13	; 19
   1780a:	b0 e0       	ldi	r27, 0x00	; 0
   1780c:	ea e0       	ldi	r30, 0x0A	; 10
   1780e:	fc eb       	ldi	r31, 0xBC	; 188
   17810:	0c 94 ec e5 	jmp	0x1cbd8	; 0x1cbd8 <__prologue_saves__+0x18>
   17814:	7c 01       	movw	r14, r24
    uint8_t *ptr;
    uint16_t status;                              // Current status
    UINT len;                                     // Size of Data/Op Codes/Parameters read in bytes

#if SDEBUG
    if(debuglevel & 32)
   17816:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1781a:	85 ff       	sbrs	r24, 5
   1781c:	16 c0       	rjmp	.+44     	; 0x1784a <Amigo_Command+0x42>
        printf("[AMIGO Command(%02XH): listen:%02XH, talk:%02XH]\n",
   1781e:	80 91 ea 1d 	lds	r24, 0x1DEA	; 0x801dea <talking>
   17822:	1f 92       	push	r1
   17824:	8f 93       	push	r24
   17826:	80 91 ec 1d 	lds	r24, 0x1DEC	; 0x801dec <listening>
   1782a:	1f 92       	push	r1
   1782c:	8f 93       	push	r24
   1782e:	ff 92       	push	r15
   17830:	ef 92       	push	r14
   17832:	8f e0       	ldi	r24, 0x0F	; 15
   17834:	9b e2       	ldi	r25, 0x2B	; 43
   17836:	1f 92       	push	r1
   17838:	9f 93       	push	r25
   1783a:	8f 93       	push	r24
   1783c:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   17840:	0f b6       	in	r0, 0x3f	; 63
   17842:	f8 94       	cli
   17844:	de bf       	out	0x3e, r29	; 62
   17846:	0f be       	out	0x3f, r0	; 63
   17848:	cd bf       	out	0x3d, r28	; 61
            secondary, listening, talking);
#endif

///  Reference: A14
    if (secondary == 0x7e && AMIGO_is_MTA(talking))
   1784a:	9e e7       	ldi	r25, 0x7E	; 126
   1784c:	e9 16       	cp	r14, r25
   1784e:	f1 04       	cpc	r15, r1
   17850:	f1 f5       	brne	.+124    	; 0x178ce <Amigo_Command+0xc6>
   17852:	80 91 ea 1d 	lds	r24, 0x1DEA	; 0x801dea <talking>
   17856:	90 e0       	ldi	r25, 0x00	; 0
   17858:	0e 94 da 8c 	call	0x119b4	; 0x119b4 <AMIGO_is_MTA>
   1785c:	89 2b       	or	r24, r25
   1785e:	09 f4       	brne	.+2      	; 0x17862 <Amigo_Command+0x5a>
   17860:	86 c0       	rjmp	.+268    	; 0x1796e <Amigo_Command+0x166>
    {
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   17862:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <AMIGOp>
   17866:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <AMIGOp+0x1>
   1786a:	81 81       	ldd	r24, Z+1	; 0x01
   1786c:	90 e0       	ldi	r25, 0x00	; 0
   1786e:	0e 94 c2 86 	call	0x10d84	; 0x10d84 <gpib_disable_PPR>
        status = EOI_FLAG;
   17872:	80 e0       	ldi	r24, 0x00	; 0
   17874:	91 e0       	ldi	r25, 0x01	; 1
   17876:	9b 8b       	std	Y+19, r25	; 0x13
   17878:	8a 8b       	std	Y+18, r24	; 0x12
        len = gpib_write_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   1787a:	ae 01       	movw	r20, r28
   1787c:	4e 5e       	subi	r20, 0xEE	; 238
   1787e:	5f 4f       	sbci	r21, 0xFF	; 255
   17880:	60 e0       	ldi	r22, 0x00	; 0
   17882:	72 e0       	ldi	r23, 0x02	; 2
   17884:	86 ee       	ldi	r24, 0xE6	; 230
   17886:	9b e1       	ldi	r25, 0x1B	; 27
   17888:	0e 94 e1 8b 	call	0x117c2	; 0x117c2 <gpib_write_str>
        gpib_enable_PPR(AMIGOp->HEADER.PPR);
   1788c:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <AMIGOp>
   17890:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <AMIGOp+0x1>
   17894:	81 81       	ldd	r24, Z+1	; 0x01
   17896:	90 e0       	ldi	r25, 0x00	; 0
   17898:	0e 94 91 86 	call	0x10d22	; 0x10d22 <gpib_enable_PPR>
        if(status & ERROR_MASK)
   1789c:	8a 89       	ldd	r24, Y+18	; 0x12
   1789e:	9b 89       	ldd	r25, Y+19	; 0x13
   178a0:	88 27       	eor	r24, r24
   178a2:	90 7d       	andi	r25, 0xD0	; 208
   178a4:	89 2b       	or	r24, r25
   178a6:	09 f4       	brne	.+2      	; 0x178aa <Amigo_Command+0xa2>
   178a8:	89 c2       	rjmp	.+1298   	; 0x17dbc <Amigo_Command+0x5b4>
        {
            AMIGOs->dsj = 1;
   178aa:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <AMIGOs>
   178ae:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <AMIGOs+0x1>
   178b2:	81 e0       	ldi	r24, 0x01	; 1
   178b4:	86 83       	std	Z+6, r24	; 0x06
            AMIGOs->Errors |= ERR_GPIB;
   178b6:	87 81       	ldd	r24, Z+7	; 0x07
   178b8:	90 85       	ldd	r25, Z+8	; 0x08
   178ba:	80 62       	ori	r24, 0x20	; 32
   178bc:	90 87       	std	Z+8, r25	; 0x08
   178be:	87 83       	std	Z+7, r24	; 0x07
            if(debuglevel & 1)
   178c0:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   178c4:	80 ff       	sbrs	r24, 0
   178c6:	7a c2       	rjmp	.+1268   	; 0x17dbc <Amigo_Command+0x5b4>
                printf("[AMIGO_Command:GPIB write error]\n");
   178c8:	8d ee       	ldi	r24, 0xED	; 237
   178ca:	9a e2       	ldi	r25, 0x2A	; 42
   178cc:	8e c0       	rjmp	.+284    	; 0x179ea <Amigo_Command+0x1e2>
        }
        return(status & ERROR_MASK);
    }

///  Reference: A25
    if (secondary == 0x7f && AMIGO_is_MLA(listening))
   178ce:	8f e7       	ldi	r24, 0x7F	; 127
   178d0:	e8 16       	cp	r14, r24
   178d2:	f1 04       	cpc	r15, r1
   178d4:	09 f0       	breq	.+2      	; 0x178d8 <Amigo_Command+0xd0>
   178d6:	4b c0       	rjmp	.+150    	; 0x1796e <Amigo_Command+0x166>
   178d8:	80 91 ec 1d 	lds	r24, 0x1DEC	; 0x801dec <listening>
   178dc:	90 e0       	ldi	r25, 0x00	; 0
   178de:	0e 94 cb 8c 	call	0x11996	; 0x11996 <AMIGO_is_MLA>
   178e2:	89 2b       	or	r24, r25
   178e4:	09 f4       	brne	.+2      	; 0x178e8 <Amigo_Command+0xe0>
   178e6:	43 c0       	rjmp	.+134    	; 0x1796e <Amigo_Command+0x166>
    {
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   178e8:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <AMIGOp>
   178ec:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <AMIGOp+0x1>
   178f0:	81 81       	ldd	r24, Z+1	; 0x01
   178f2:	90 e0       	ldi	r25, 0x00	; 0
   178f4:	0e 94 c2 86 	call	0x10d84	; 0x10d84 <gpib_disable_PPR>
#if SDEBUG
        if(debuglevel & 128)
   178f8:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   178fc:	87 fd       	sbrc	r24, 7
            gpib_timer_elapsed_begin();
   178fe:	0e 94 d9 85 	call	0x10bb2	; 0x10bb2 <gpib_timer_elapsed_begin>
#endif
        status = EOI_FLAG;
   17902:	80 e0       	ldi	r24, 0x00	; 0
   17904:	91 e0       	ldi	r25, 0x01	; 1
   17906:	9b 8b       	std	Y+19, r25	; 0x13
   17908:	8a 8b       	std	Y+18, r24	; 0x12
        len = gpib_read_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   1790a:	ae 01       	movw	r20, r28
   1790c:	4e 5e       	subi	r20, 0xEE	; 238
   1790e:	5f 4f       	sbci	r21, 0xFF	; 255
   17910:	60 e0       	ldi	r22, 0x00	; 0
   17912:	72 e0       	ldi	r23, 0x02	; 2
   17914:	86 ee       	ldi	r24, 0xE6	; 230
   17916:	9b e1       	ldi	r25, 0x1B	; 27
   17918:	0e 94 33 8b 	call	0x11666	; 0x11666 <gpib_read_str>
#if SDEBUG
        if(debuglevel & 128)
   1791c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17920:	87 ff       	sbrs	r24, 7
   17922:	04 c0       	rjmp	.+8      	; 0x1792c <Amigo_Command+0x124>
            gpib_timer_elapsed_end("GPIB read str");
   17924:	8b e2       	ldi	r24, 0x2B	; 43
   17926:	95 e1       	ldi	r25, 0x15	; 21
   17928:	0e 94 eb 85 	call	0x10bd6	; 0x10bd6 <gpib_timer_elapsed_end>
#endif
        gpib_enable_PPR(AMIGOp->HEADER.PPR);
   1792c:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <AMIGOp>
   17930:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <AMIGOp+0x1>
   17934:	81 81       	ldd	r24, Z+1	; 0x01
   17936:	90 e0       	ldi	r25, 0x00	; 0
   17938:	0e 94 91 86 	call	0x10d22	; 0x10d22 <gpib_enable_PPR>
        if(status & ERROR_MASK)
   1793c:	8a 89       	ldd	r24, Y+18	; 0x12
   1793e:	9b 89       	ldd	r25, Y+19	; 0x13
   17940:	88 27       	eor	r24, r24
   17942:	90 7d       	andi	r25, 0xD0	; 208
   17944:	89 2b       	or	r24, r25
   17946:	09 f4       	brne	.+2      	; 0x1794a <Amigo_Command+0x142>
   17948:	39 c2       	rjmp	.+1138   	; 0x17dbc <Amigo_Command+0x5b4>
        {
            AMIGOs->dsj = 1;
   1794a:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <AMIGOs>
   1794e:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <AMIGOs+0x1>
   17952:	81 e0       	ldi	r24, 0x01	; 1
   17954:	86 83       	std	Z+6, r24	; 0x06
            AMIGOs->Errors |= ERR_GPIB;
   17956:	87 81       	ldd	r24, Z+7	; 0x07
   17958:	90 85       	ldd	r25, Z+8	; 0x08
   1795a:	80 62       	ori	r24, 0x20	; 32
   1795c:	90 87       	std	Z+8, r25	; 0x08
   1795e:	87 83       	std	Z+7, r24	; 0x07
            if(debuglevel & 1)
   17960:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17964:	80 ff       	sbrs	r24, 0
   17966:	2a c2       	rjmp	.+1108   	; 0x17dbc <Amigo_Command+0x5b4>
                printf("[AMIGO Command:GPIB read error]\n");
   17968:	8c ec       	ldi	r24, 0xCC	; 204
   1796a:	9a e2       	ldi	r25, 0x2A	; 42
   1796c:	3e c0       	rjmp	.+124    	; 0x179ea <Amigo_Command+0x1e2>
        }
        return(status & ERROR_MASK);
    }

    if( !AMIGO_is_MLA(listening) || AMIGO_is_MTA(talking))
   1796e:	80 91 ec 1d 	lds	r24, 0x1DEC	; 0x801dec <listening>
   17972:	90 e0       	ldi	r25, 0x00	; 0
   17974:	0e 94 cb 8c 	call	0x11996	; 0x11996 <AMIGO_is_MLA>
   17978:	89 2b       	or	r24, r25
   1797a:	19 f4       	brne	.+6      	; 0x17982 <Amigo_Command+0x17a>
        return(0);
   1797c:	80 e0       	ldi	r24, 0x00	; 0
   1797e:	90 e0       	ldi	r25, 0x00	; 0
   17980:	25 c2       	rjmp	.+1098   	; 0x17dcc <Amigo_Command+0x5c4>
                printf("[AMIGO Command:GPIB read error]\n");
        }
        return(status & ERROR_MASK);
    }

    if( !AMIGO_is_MLA(listening) || AMIGO_is_MTA(talking))
   17982:	80 91 ea 1d 	lds	r24, 0x1DEA	; 0x801dea <talking>
   17986:	90 e0       	ldi	r25, 0x00	; 0
   17988:	0e 94 da 8c 	call	0x119b4	; 0x119b4 <AMIGO_is_MTA>
   1798c:	89 2b       	or	r24, r25
   1798e:	b1 f7       	brne	.-20     	; 0x1797c <Amigo_Command+0x174>
        return(0);

    gpib_disable_PPR(AMIGOp->HEADER.PPR);
   17990:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <AMIGOp>
   17994:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <AMIGOp+0x1>
   17998:	81 81       	ldd	r24, Z+1	; 0x01
   1799a:	90 e0       	ldi	r25, 0x00	; 0
   1799c:	0e 94 c2 86 	call	0x10d84	; 0x10d84 <gpib_disable_PPR>


///  Note: the function will "unread" any commands and return
///  All Data MUST have EOI

    status = EOI_FLAG;
   179a0:	80 e0       	ldi	r24, 0x00	; 0
   179a2:	91 e0       	ldi	r25, 0x01	; 1
   179a4:	9b 8b       	std	Y+19, r25	; 0x13
   179a6:	8a 8b       	std	Y+18, r24	; 0x12
    len = gpib_read_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   179a8:	ae 01       	movw	r20, r28
   179aa:	4e 5e       	subi	r20, 0xEE	; 238
   179ac:	5f 4f       	sbci	r21, 0xFF	; 255
   179ae:	60 e0       	ldi	r22, 0x00	; 0
   179b0:	72 e0       	ldi	r23, 0x02	; 2
   179b2:	86 ee       	ldi	r24, 0xE6	; 230
   179b4:	9b e1       	ldi	r25, 0x1B	; 27
   179b6:	0e 94 33 8b 	call	0x11666	; 0x11666 <gpib_read_str>
   179ba:	8c 01       	movw	r16, r24
    if(status & ERROR_MASK)
   179bc:	8a 89       	ldd	r24, Y+18	; 0x12
   179be:	9b 89       	ldd	r25, Y+19	; 0x13
   179c0:	88 27       	eor	r24, r24
   179c2:	90 7d       	andi	r25, 0xD0	; 208
   179c4:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   179c8:	89 2b       	or	r24, r25
   179ca:	c1 f0       	breq	.+48     	; 0x179fc <Amigo_Command+0x1f4>
    {
        AMIGOs->dsj = 1;
   179cc:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <AMIGOs>
   179d0:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <AMIGOs+0x1>
   179d4:	81 e0       	ldi	r24, 0x01	; 1
   179d6:	86 83       	std	Z+6, r24	; 0x06
        AMIGOs->Errors |= ERR_GPIB;
   179d8:	87 81       	ldd	r24, Z+7	; 0x07
   179da:	90 85       	ldd	r25, Z+8	; 0x08
   179dc:	80 62       	ori	r24, 0x20	; 32
   179de:	90 87       	std	Z+8, r25	; 0x08
   179e0:	87 83       	std	Z+7, r24	; 0x07
        if(debuglevel & 1)
   179e2:	20 ff       	sbrs	r18, 0
   179e4:	eb c1       	rjmp	.+982    	; 0x17dbc <Amigo_Command+0x5b4>
            printf("[AMIGO Command:GPIB read error]\n");
   179e6:	8b ea       	ldi	r24, 0xAB	; 171
   179e8:	9a e2       	ldi	r25, 0x2A	; 42
   179ea:	1f 92       	push	r1
   179ec:	9f 93       	push	r25
   179ee:	8f 93       	push	r24
   179f0:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   179f4:	0f 90       	pop	r0
   179f6:	0f 90       	pop	r0
   179f8:	0f 90       	pop	r0
   179fa:	e0 c1       	rjmp	.+960    	; 0x17dbc <Amigo_Command+0x5b4>
        return(status & ERROR_MASK);
    }
#if SDEBUG
    if(debuglevel & 32)
   179fc:	25 ff       	sbrs	r18, 5
   179fe:	10 c0       	rjmp	.+32     	; 0x17a20 <Amigo_Command+0x218>
        printf("[AMIGO Command(%02XH): GPIB read bytes:%02XH]\n",
   17a00:	1f 93       	push	r17
   17a02:	0f 93       	push	r16
   17a04:	ff 92       	push	r15
   17a06:	ef 92       	push	r14
   17a08:	8c e7       	ldi	r24, 0x7C	; 124
   17a0a:	9a e2       	ldi	r25, 0x2A	; 42
   17a0c:	1f 92       	push	r1
   17a0e:	9f 93       	push	r25
   17a10:	8f 93       	push	r24
   17a12:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   17a16:	0f b6       	in	r0, 0x3f	; 63
   17a18:	f8 94       	cli
   17a1a:	de bf       	out	0x3e, r29	; 62
   17a1c:	0f be       	out	0x3f, r0	; 63
   17a1e:	cd bf       	out	0x3d, r28	; 61
            secondary, len);
#endif
    if(!len)
   17a20:	01 15       	cp	r16, r1
   17a22:	11 05       	cpc	r17, r1
   17a24:	61 f4       	brne	.+24     	; 0x17a3e <Amigo_Command+0x236>
    {
        AMIGOs->dsj = 1;
   17a26:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <AMIGOs>
   17a2a:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <AMIGOs+0x1>
   17a2e:	81 e0       	ldi	r24, 0x01	; 1
   17a30:	86 83       	std	Z+6, r24	; 0x06
        AMIGOs->Errors |= ERR_GPIB;
   17a32:	87 81       	ldd	r24, Z+7	; 0x07
   17a34:	90 85       	ldd	r25, Z+8	; 0x08
   17a36:	80 62       	ori	r24, 0x20	; 32
   17a38:	90 87       	std	Z+8, r25	; 0x08
   17a3a:	87 83       	std	Z+7, r24	; 0x07
   17a3c:	bf c1       	rjmp	.+894    	; 0x17dbc <Amigo_Command+0x5b4>
        return(status & ERROR_MASK);
    }

    ptr = gpib_iobuff;
    op = *ptr++;
   17a3e:	60 91 e6 1b 	lds	r22, 0x1BE6	; 0x801be6 <gpib_iobuff>

    if (secondary == 0x68)
   17a42:	98 e6       	ldi	r25, 0x68	; 104
   17a44:	e9 16       	cp	r14, r25
   17a46:	f1 04       	cpc	r15, r1
   17a48:	09 f0       	breq	.+2      	; 0x17a4c <Amigo_Command+0x244>
   17a4a:	28 c1       	rjmp	.+592    	; 0x17c9c <Amigo_Command+0x494>
    {
        if(op == 0x00 && len == 2)
   17a4c:	61 11       	cpse	r22, r1
   17a4e:	2e c0       	rjmp	.+92     	; 0x17aac <Amigo_Command+0x2a4>
   17a50:	02 30       	cpi	r16, 0x02	; 2
   17a52:	11 05       	cpc	r17, r1
   17a54:	09 f0       	breq	.+2      	; 0x17a58 <Amigo_Command+0x250>
   17a56:	b7 c1       	rjmp	.+878    	; 0x17dc6 <Amigo_Command+0x5be>
        {
///  Reference: A40

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & 32)
   17a58:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17a5c:	85 ff       	sbrs	r24, 5
   17a5e:	0a c0       	rjmp	.+20     	; 0x17a74 <Amigo_Command+0x26c>
                printf("[AMIGO Cold Load Read Command]\n");
   17a60:	8c e5       	ldi	r24, 0x5C	; 92
   17a62:	9a e2       	ldi	r25, 0x2A	; 42
   17a64:	1f 92       	push	r1
   17a66:	9f 93       	push	r25
   17a68:	8f 93       	push	r24
   17a6a:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   17a6e:	0f 90       	pop	r0
   17a70:	0f 90       	pop	r0
   17a72:	0f 90       	pop	r0
#endif
            ///TODO we do NOT support multiple units yet
            AMIGOs->unitNO = 0;
   17a74:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <AMIGOs>
   17a78:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <AMIGOs+0x1>
   17a7c:	11 82       	std	Z+1, r1	; 0x01
            AMIGOs->dsj = 0;
   17a7e:	16 82       	std	Z+6, r1	; 0x06
            AMIGOs->Errors = 0;
   17a80:	10 86       	std	Z+8, r1	; 0x08
   17a82:	17 82       	std	Z+7, r1	; 0x07
            /// Fill in temparary address
            tmp.cyl = 0;
   17a84:	1c 82       	std	Y+4, r1	; 0x04
            tmp.head = ( (0xff & *ptr) >> 6) & 0x03;
   17a86:	80 91 e7 1b 	lds	r24, 0x1BE7	; 0x801be7 <gpib_iobuff+0x1>
   17a8a:	98 2f       	mov	r25, r24
   17a8c:	92 95       	swap	r25
   17a8e:	96 95       	lsr	r25
   17a90:	96 95       	lsr	r25
   17a92:	93 70       	andi	r25, 0x03	; 3
   17a94:	9d 83       	std	Y+5, r25	; 0x05
            tmp.sector = 0x3f & *ptr;
   17a96:	8f 73       	andi	r24, 0x3F	; 63
   17a98:	8e 83       	std	Y+6, r24	; 0x06
            ++ptr;
            //update to real address on sucess
            amigo_seek((AMIGOStateType *) &tmp);
   17a9a:	ce 01       	movw	r24, r28
   17a9c:	01 96       	adiw	r24, 0x01	; 1
   17a9e:	18 da       	rcall	.-3024   	; 0x16ed0 <amigo_seek>
            AMIGOs->state = AMIGO_COLD_LOAD_READ;
   17aa0:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <AMIGOs>
   17aa4:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <AMIGOs+0x1>
   17aa8:	85 e0       	ldi	r24, 0x05	; 5
   17aaa:	5c c1       	rjmp	.+696    	; 0x17d64 <Amigo_Command+0x55c>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x02 && len == 5)
   17aac:	62 30       	cpi	r22, 0x02	; 2
   17aae:	09 f0       	breq	.+2      	; 0x17ab2 <Amigo_Command+0x2aa>
   17ab0:	3f c0       	rjmp	.+126    	; 0x17b30 <Amigo_Command+0x328>
   17ab2:	05 30       	cpi	r16, 0x05	; 5
   17ab4:	11 05       	cpc	r17, r1
   17ab6:	d1 f4       	brne	.+52     	; 0x17aec <Amigo_Command+0x2e4>
/// @brief 
///  Seek 1 byte cylinder

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & 32)
   17ab8:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17abc:	85 ff       	sbrs	r24, 5
   17abe:	0a c0       	rjmp	.+20     	; 0x17ad4 <Amigo_Command+0x2cc>
                printf("[AMIGO Seek len=5]\n");
   17ac0:	88 e4       	ldi	r24, 0x48	; 72
   17ac2:	9a e2       	ldi	r25, 0x2A	; 42
   17ac4:	1f 92       	push	r1
   17ac6:	9f 93       	push	r25
   17ac8:	8f 93       	push	r24
   17aca:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   17ace:	0f 90       	pop	r0
   17ad0:	0f 90       	pop	r0
   17ad2:	0f 90       	pop	r0
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17ad4:	80 91 e7 1b 	lds	r24, 0x1BE7	; 0x801be7 <gpib_iobuff+0x1>
   17ad8:	83 de       	rcall	.-762    	; 0x177e0 <amigo_check_unit>

            /// Fill in temparary address
            tmp.cyl = 0xff & *ptr++;
   17ada:	80 91 e8 1b 	lds	r24, 0x1BE8	; 0x801be8 <gpib_iobuff+0x2>
   17ade:	8c 83       	std	Y+4, r24	; 0x04
            tmp.head = 0xff & *ptr++;
   17ae0:	80 91 e9 1b 	lds	r24, 0x1BE9	; 0x801be9 <gpib_iobuff+0x3>
   17ae4:	8d 83       	std	Y+5, r24	; 0x05
            tmp.sector = 0xff & *ptr++;
   17ae6:	80 91 ea 1b 	lds	r24, 0x1BEA	; 0x801bea <gpib_iobuff+0x4>
   17aea:	1d c0       	rjmp	.+58     	; 0x17b26 <Amigo_Command+0x31e>
            //update to real address on sucess
            amigo_seek((AMIGOStateType *)&tmp);
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x02 && len == 6)
   17aec:	06 30       	cpi	r16, 0x06	; 6
   17aee:	11 05       	cpc	r17, r1
   17af0:	09 f0       	breq	.+2      	; 0x17af4 <Amigo_Command+0x2ec>
   17af2:	69 c1       	rjmp	.+722    	; 0x17dc6 <Amigo_Command+0x5be>
/// @brief 
///  Seek 2 byte cylinder

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & 32)
   17af4:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17af8:	85 ff       	sbrs	r24, 5
   17afa:	0a c0       	rjmp	.+20     	; 0x17b10 <Amigo_Command+0x308>
                printf("[AMIGO Seek len=6]\n");
   17afc:	84 e3       	ldi	r24, 0x34	; 52
   17afe:	9a e2       	ldi	r25, 0x2A	; 42
   17b00:	1f 92       	push	r1
   17b02:	9f 93       	push	r25
   17b04:	8f 93       	push	r24
   17b06:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   17b0a:	0f 90       	pop	r0
   17b0c:	0f 90       	pop	r0
   17b0e:	0f 90       	pop	r0
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17b10:	80 91 e7 1b 	lds	r24, 0x1BE7	; 0x801be7 <gpib_iobuff+0x1>
   17b14:	65 de       	rcall	.-822    	; 0x177e0 <amigo_check_unit>
            /// Fill in temparary address
            tmp.cyl = (0xff & *ptr++) << 8;       // MSB
            tmp.cyl |= (0xff & *ptr++);           // LSB
   17b16:	80 91 e9 1b 	lds	r24, 0x1BE9	; 0x801be9 <gpib_iobuff+0x3>
   17b1a:	8c 83       	std	Y+4, r24	; 0x04
            tmp.head = 0xff & *ptr++;
   17b1c:	80 91 ea 1b 	lds	r24, 0x1BEA	; 0x801bea <gpib_iobuff+0x4>
   17b20:	8d 83       	std	Y+5, r24	; 0x05
            tmp.sector = 0xff & *ptr++;
   17b22:	80 91 eb 1b 	lds	r24, 0x1BEB	; 0x801beb <gpib_iobuff+0x5>
            //update to real address on sucess
            amigo_seek((AMIGOStateType *)&tmp);
   17b26:	8e 83       	std	Y+6, r24	; 0x06
   17b28:	ce 01       	movw	r24, r28
   17b2a:	01 96       	adiw	r24, 0x01	; 1
   17b2c:	d1 d9       	rcall	.-3166   	; 0x16ed0 <amigo_seek>
   17b2e:	1b c1       	rjmp	.+566    	; 0x17d66 <Amigo_Command+0x55e>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x03 && len == 2)
   17b30:	63 30       	cpi	r22, 0x03	; 3
   17b32:	e9 f4       	brne	.+58     	; 0x17b6e <Amigo_Command+0x366>
   17b34:	02 30       	cpi	r16, 0x02	; 2
   17b36:	11 05       	cpc	r17, r1
   17b38:	09 f0       	breq	.+2      	; 0x17b3c <Amigo_Command+0x334>
   17b3a:	45 c1       	rjmp	.+650    	; 0x17dc6 <Amigo_Command+0x5be>
        {
///  Reference: A15
#if SDEBUG
            if(debuglevel & 32)
   17b3c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17b40:	85 ff       	sbrs	r24, 5
   17b42:	0a c0       	rjmp	.+20     	; 0x17b58 <Amigo_Command+0x350>
                printf("[AMIGO Request Status Buffered Command]\n");
   17b44:	8b e0       	ldi	r24, 0x0B	; 11
   17b46:	9a e2       	ldi	r25, 0x2A	; 42
   17b48:	1f 92       	push	r1
   17b4a:	9f 93       	push	r25
   17b4c:	8f 93       	push	r24
   17b4e:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   17b52:	0f 90       	pop	r0
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17b54:	0f 90       	pop	r0
   17b56:	0f 90       	pop	r0
   17b58:	80 91 e7 1b 	lds	r24, 0x1BE7	; 0x801be7 <gpib_iobuff+0x1>
            amigo_request_status();
   17b5c:	41 de       	rcall	.-894    	; 0x177e0 <amigo_check_unit>
            AMIGOs->state = AMIGO_REQUEST_STATUS_BUFFERED;
   17b5e:	7b d8       	rcall	.-3850   	; 0x16c56 <amigo_request_status>
   17b60:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <AMIGOs>
   17b64:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <AMIGOs+0x1>
   17b68:	83 e0       	ldi	r24, 0x03	; 3
   17b6a:	80 83       	st	Z, r24
            return(status & ERROR_MASK);
        }
        else if(op == 0x05 && len == 2)
   17b6c:	27 c1       	rjmp	.+590    	; 0x17dbc <Amigo_Command+0x5b4>
   17b6e:	65 30       	cpi	r22, 0x05	; 5
   17b70:	d9 f4       	brne	.+54     	; 0x17ba8 <Amigo_Command+0x3a0>
   17b72:	02 30       	cpi	r16, 0x02	; 2
   17b74:	11 05       	cpc	r17, r1
   17b76:	09 f0       	breq	.+2      	; 0x17b7a <Amigo_Command+0x372>
        {
///  Reference: A35
#if SDEBUG
            if(debuglevel & 32)
   17b78:	26 c1       	rjmp	.+588    	; 0x17dc6 <Amigo_Command+0x5be>
   17b7a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17b7e:	85 ff       	sbrs	r24, 5
                printf("[AMIGO Read Unbuffered Command]\n");
   17b80:	0a c0       	rjmp	.+20     	; 0x17b96 <Amigo_Command+0x38e>
   17b82:	8a ee       	ldi	r24, 0xEA	; 234
   17b84:	99 e2       	ldi	r25, 0x29	; 41
   17b86:	1f 92       	push	r1
   17b88:	9f 93       	push	r25
   17b8a:	8f 93       	push	r24
   17b8c:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   17b90:	0f 90       	pop	r0
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17b92:	0f 90       	pop	r0
   17b94:	0f 90       	pop	r0
   17b96:	80 91 e7 1b 	lds	r24, 0x1BE7	; 0x801be7 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_READ_UNBUFFERED;
   17b9a:	22 de       	rcall	.-956    	; 0x177e0 <amigo_check_unit>
   17b9c:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <AMIGOs>
   17ba0:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <AMIGOs+0x1>
   17ba4:	86 e0       	ldi	r24, 0x06	; 6
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x07 && len == 4)
   17ba6:	de c0       	rjmp	.+444    	; 0x17d64 <Amigo_Command+0x55c>
   17ba8:	67 30       	cpi	r22, 0x07	; 7
   17baa:	f9 f4       	brne	.+62     	; 0x17bea <Amigo_Command+0x3e2>
   17bac:	04 30       	cpi	r16, 0x04	; 4
   17bae:	11 05       	cpc	r17, r1
   17bb0:	09 f0       	breq	.+2      	; 0x17bb4 <Amigo_Command+0x3ac>
        {
            uint16_t sectors;
#if SDEBUG
            if(debuglevel & 32)
   17bb2:	09 c1       	rjmp	.+530    	; 0x17dc6 <Amigo_Command+0x5be>
   17bb4:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17bb8:	85 ff       	sbrs	r24, 5
                printf("[AMIGO Verify]\n");
   17bba:	0a c0       	rjmp	.+20     	; 0x17bd0 <Amigo_Command+0x3c8>
   17bbc:	8a ed       	ldi	r24, 0xDA	; 218
   17bbe:	99 e2       	ldi	r25, 0x29	; 41
   17bc0:	1f 92       	push	r1
   17bc2:	9f 93       	push	r25
   17bc4:	8f 93       	push	r24
   17bc6:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   17bca:	0f 90       	pop	r0
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17bcc:	0f 90       	pop	r0
   17bce:	0f 90       	pop	r0
   17bd0:	80 91 e7 1b 	lds	r24, 0x1BE7	; 0x801be7 <gpib_iobuff+0x1>
            sectors = (0xff & *ptr++) << 8;
   17bd4:	05 de       	rcall	.-1014   	; 0x177e0 <amigo_check_unit>
   17bd6:	80 91 e8 1b 	lds	r24, 0x1BE8	; 0x801be8 <gpib_iobuff+0x2>
            sectors |= (0xff & *ptr++);
            return ( amigo_verify( sectors) );
   17bda:	90 e0       	ldi	r25, 0x00	; 0
   17bdc:	98 2f       	mov	r25, r24
   17bde:	88 27       	eor	r24, r24
   17be0:	20 91 e9 1b 	lds	r18, 0x1BE9	; 0x801be9 <gpib_iobuff+0x3>
   17be4:	82 2b       	or	r24, r18
        }
        else if(op == 0x08 && len == 2)
   17be6:	9f d9       	rcall	.-3266   	; 0x16f26 <amigo_verify>
   17be8:	f1 c0       	rjmp	.+482    	; 0x17dcc <Amigo_Command+0x5c4>
   17bea:	68 30       	cpi	r22, 0x08	; 8
   17bec:	d9 f4       	brne	.+54     	; 0x17c24 <Amigo_Command+0x41c>
   17bee:	02 30       	cpi	r16, 0x02	; 2
   17bf0:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   17bf2:	09 f0       	breq	.+2      	; 0x17bf6 <Amigo_Command+0x3ee>
   17bf4:	e8 c0       	rjmp	.+464    	; 0x17dc6 <Amigo_Command+0x5be>
   17bf6:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
                printf("[AMIGO Write Unbuffered Command]\n");
   17bfa:	85 ff       	sbrs	r24, 5
   17bfc:	0a c0       	rjmp	.+20     	; 0x17c12 <Amigo_Command+0x40a>
   17bfe:	88 eb       	ldi	r24, 0xB8	; 184
   17c00:	99 e2       	ldi	r25, 0x29	; 41
   17c02:	1f 92       	push	r1
   17c04:	9f 93       	push	r25
   17c06:	8f 93       	push	r24
   17c08:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17c0c:	0f 90       	pop	r0
   17c0e:	0f 90       	pop	r0
   17c10:	0f 90       	pop	r0
   17c12:	80 91 e7 1b 	lds	r24, 0x1BE7	; 0x801be7 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_WRITE_UNBUFFERED;
   17c16:	e4 dd       	rcall	.-1080   	; 0x177e0 <amigo_check_unit>
   17c18:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <AMIGOs>
   17c1c:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if((op == 0x0B || op == 0x2b) && len == 2)
   17c20:	88 e0       	ldi	r24, 0x08	; 8
   17c22:	a0 c0       	rjmp	.+320    	; 0x17d64 <Amigo_Command+0x55c>
   17c24:	86 2f       	mov	r24, r22
   17c26:	8f 7d       	andi	r24, 0xDF	; 223
   17c28:	8b 30       	cpi	r24, 0x0B	; 11
   17c2a:	d9 f4       	brne	.+54     	; 0x17c62 <Amigo_Command+0x45a>
   17c2c:	02 30       	cpi	r16, 0x02	; 2
   17c2e:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   17c30:	09 f0       	breq	.+2      	; 0x17c34 <Amigo_Command+0x42c>
   17c32:	c9 c0       	rjmp	.+402    	; 0x17dc6 <Amigo_Command+0x5be>
   17c34:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
                printf("[AMIGO Initialize Command]\n");
   17c38:	85 ff       	sbrs	r24, 5
   17c3a:	0a c0       	rjmp	.+20     	; 0x17c50 <Amigo_Command+0x448>
   17c3c:	8c e9       	ldi	r24, 0x9C	; 156
   17c3e:	99 e2       	ldi	r25, 0x29	; 41
   17c40:	1f 92       	push	r1
   17c42:	9f 93       	push	r25
   17c44:	8f 93       	push	r24
   17c46:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17c4a:	0f 90       	pop	r0
   17c4c:	0f 90       	pop	r0
   17c4e:	0f 90       	pop	r0
   17c50:	80 91 e7 1b 	lds	r24, 0x1BE7	; 0x801be7 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_INITIALIZE;
   17c54:	c5 dd       	rcall	.-1142   	; 0x177e0 <amigo_check_unit>
   17c56:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <AMIGOs>
   17c5a:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x14 && len == 2)
   17c5e:	8a e0       	ldi	r24, 0x0A	; 10
   17c60:	81 c0       	rjmp	.+258    	; 0x17d64 <Amigo_Command+0x55c>
   17c62:	64 31       	cpi	r22, 0x14	; 20
   17c64:	09 f0       	breq	.+2      	; 0x17c68 <Amigo_Command+0x460>
   17c66:	af c0       	rjmp	.+350    	; 0x17dc6 <Amigo_Command+0x5be>
   17c68:	02 30       	cpi	r16, 0x02	; 2
   17c6a:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   17c6c:	09 f0       	breq	.+2      	; 0x17c70 <Amigo_Command+0x468>
   17c6e:	ab c0       	rjmp	.+342    	; 0x17dc6 <Amigo_Command+0x5be>
   17c70:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
                printf("[AMIGO Request Logical Address Command]\n");
   17c74:	85 ff       	sbrs	r24, 5
   17c76:	0a c0       	rjmp	.+20     	; 0x17c8c <Amigo_Command+0x484>
   17c78:	83 e7       	ldi	r24, 0x73	; 115
   17c7a:	99 e2       	ldi	r25, 0x29	; 41
   17c7c:	1f 92       	push	r1
   17c7e:	9f 93       	push	r25
   17c80:	8f 93       	push	r24
   17c82:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   17c86:	0f 90       	pop	r0
#endif
            amigo_request_logical_address();
   17c88:	0f 90       	pop	r0
   17c8a:	0f 90       	pop	r0
            AMIGOs->state = AMIGO_REQUEST_LOGICAL_ADDRESS;
   17c8c:	0e 94 1d b6 	call	0x16c3a	; 0x16c3a <amigo_request_logical_address>
   17c90:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <AMIGOs>
   17c94:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x69)
   17c98:	84 e0       	ldi	r24, 0x04	; 4
   17c9a:	64 c0       	rjmp	.+200    	; 0x17d64 <Amigo_Command+0x55c>
   17c9c:	89 e6       	ldi	r24, 0x69	; 105
   17c9e:	e8 16       	cp	r14, r24
    {
        if(op == 0x08 && len == 2)
   17ca0:	f1 04       	cpc	r15, r1
   17ca2:	f1 f4       	brne	.+60     	; 0x17ce0 <Amigo_Command+0x4d8>
   17ca4:	68 30       	cpi	r22, 0x08	; 8
   17ca6:	09 f0       	breq	.+2      	; 0x17caa <Amigo_Command+0x4a2>
   17ca8:	8e c0       	rjmp	.+284    	; 0x17dc6 <Amigo_Command+0x5be>
   17caa:	02 30       	cpi	r16, 0x02	; 2
   17cac:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   17cae:	09 f0       	breq	.+2      	; 0x17cb2 <Amigo_Command+0x4aa>
   17cb0:	8a c0       	rjmp	.+276    	; 0x17dc6 <Amigo_Command+0x5be>
   17cb2:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
                printf("[AMIGO Write Buffered Command]\n");
   17cb6:	85 ff       	sbrs	r24, 5
   17cb8:	0a c0       	rjmp	.+20     	; 0x17cce <Amigo_Command+0x4c6>
   17cba:	83 e5       	ldi	r24, 0x53	; 83
   17cbc:	99 e2       	ldi	r25, 0x29	; 41
   17cbe:	1f 92       	push	r1
   17cc0:	9f 93       	push	r25
   17cc2:	8f 93       	push	r24
   17cc4:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17cc8:	0f 90       	pop	r0
   17cca:	0f 90       	pop	r0
   17ccc:	0f 90       	pop	r0
   17cce:	80 91 e7 1b 	lds	r24, 0x1BE7	; 0x801be7 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_WRITE_BUFFERED;
   17cd2:	86 dd       	rcall	.-1268   	; 0x177e0 <amigo_check_unit>
   17cd4:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <AMIGOs>
   17cd8:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x6A)
   17cdc:	89 e0       	ldi	r24, 0x09	; 9
   17cde:	42 c0       	rjmp	.+132    	; 0x17d64 <Amigo_Command+0x55c>
   17ce0:	9a e6       	ldi	r25, 0x6A	; 106
   17ce2:	e9 16       	cp	r14, r25
   17ce4:	f1 04       	cpc	r15, r1
    {
        if(op == 0x08 && len == 2)
   17ce6:	09 f0       	breq	.+2      	; 0x17cea <Amigo_Command+0x4e2>
   17ce8:	47 c0       	rjmp	.+142    	; 0x17d78 <Amigo_Command+0x570>
   17cea:	68 30       	cpi	r22, 0x08	; 8
   17cec:	f1 f4       	brne	.+60     	; 0x17d2a <Amigo_Command+0x522>
   17cee:	02 30       	cpi	r16, 0x02	; 2
   17cf0:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   17cf2:	09 f0       	breq	.+2      	; 0x17cf6 <Amigo_Command+0x4ee>
   17cf4:	68 c0       	rjmp	.+208    	; 0x17dc6 <Amigo_Command+0x5be>
   17cf6:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
                printf("[AMIGO Request Status Unbuffered Command]\n");
   17cfa:	85 ff       	sbrs	r24, 5
   17cfc:	0a c0       	rjmp	.+20     	; 0x17d12 <Amigo_Command+0x50a>
   17cfe:	88 e2       	ldi	r24, 0x28	; 40
   17d00:	99 e2       	ldi	r25, 0x29	; 41
   17d02:	1f 92       	push	r1
   17d04:	9f 93       	push	r25
   17d06:	8f 93       	push	r24
   17d08:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17d0c:	0f 90       	pop	r0
   17d0e:	0f 90       	pop	r0
   17d10:	0f 90       	pop	r0
   17d12:	80 91 e7 1b 	lds	r24, 0x1BE7	; 0x801be7 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_REQUEST_STATUS_UNBUFFERED;
   17d16:	64 dd       	rcall	.-1336   	; 0x177e0 <amigo_check_unit>
   17d18:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <AMIGOs>
   17d1c:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <AMIGOs+0x1>
            amigo_request_status();
   17d20:	82 e0       	ldi	r24, 0x02	; 2
   17d22:	80 83       	st	Z, r24
   17d24:	0e 94 2b b6 	call	0x16c56	; 0x16c56 <amigo_request_status>
            return(status & ERROR_MASK);
        }
        if(op == 0x05 && len == 2)
   17d28:	49 c0       	rjmp	.+146    	; 0x17dbc <Amigo_Command+0x5b4>
   17d2a:	65 30       	cpi	r22, 0x05	; 5
   17d2c:	09 f0       	breq	.+2      	; 0x17d30 <Amigo_Command+0x528>
   17d2e:	4b c0       	rjmp	.+150    	; 0x17dc6 <Amigo_Command+0x5be>
   17d30:	02 30       	cpi	r16, 0x02	; 2
   17d32:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   17d34:	09 f0       	breq	.+2      	; 0x17d38 <Amigo_Command+0x530>
   17d36:	47 c0       	rjmp	.+142    	; 0x17dc6 <Amigo_Command+0x5be>
   17d38:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
                printf("[AMIGO Read Buffered Command]\n");
   17d3c:	85 ff       	sbrs	r24, 5
   17d3e:	0a c0       	rjmp	.+20     	; 0x17d54 <Amigo_Command+0x54c>
   17d40:	89 e0       	ldi	r24, 0x09	; 9
   17d42:	99 e2       	ldi	r25, 0x29	; 41
   17d44:	1f 92       	push	r1
   17d46:	9f 93       	push	r25
   17d48:	8f 93       	push	r24
   17d4a:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17d4e:	0f 90       	pop	r0
   17d50:	0f 90       	pop	r0
   17d52:	0f 90       	pop	r0
   17d54:	80 91 e7 1b 	lds	r24, 0x1BE7	; 0x801be7 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_READ_BUFFERED;
   17d58:	43 dd       	rcall	.-1402   	; 0x177e0 <amigo_check_unit>
   17d5a:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <AMIGOs>
   17d5e:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
   17d62:	87 e0       	ldi	r24, 0x07	; 7
   17d64:	80 83       	st	Z, r24
   17d66:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <AMIGOp>
   17d6a:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <AMIGOp+0x1>
   17d6e:	81 81       	ldd	r24, Z+1	; 0x01
   17d70:	90 e0       	ldi	r25, 0x00	; 0
   17d72:	0e 94 91 86 	call	0x10d22	; 0x10d22 <gpib_enable_PPR>
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x6C)
   17d76:	22 c0       	rjmp	.+68     	; 0x17dbc <Amigo_Command+0x5b4>
   17d78:	8c e6       	ldi	r24, 0x6C	; 108
   17d7a:	e8 16       	cp	r14, r24
    {
        if(op == 0x18 && len == 5)
   17d7c:	f1 04       	cpc	r15, r1
   17d7e:	d1 f4       	brne	.+52     	; 0x17db4 <Amigo_Command+0x5ac>
   17d80:	68 31       	cpi	r22, 0x18	; 24
   17d82:	09 f5       	brne	.+66     	; 0x17dc6 <Amigo_Command+0x5be>
   17d84:	05 30       	cpi	r16, 0x05	; 5
        {
///  Reference: A48 ..  A50

            uint8_t db;
#if SDEBUG
            if(debuglevel & 32)
   17d86:	11 05       	cpc	r17, r1
   17d88:	f1 f4       	brne	.+60     	; 0x17dc6 <Amigo_Command+0x5be>
   17d8a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
                printf("[AMIGO Format]\n");
   17d8e:	85 ff       	sbrs	r24, 5
   17d90:	0a c0       	rjmp	.+20     	; 0x17da6 <Amigo_Command+0x59e>
   17d92:	89 ef       	ldi	r24, 0xF9	; 249
   17d94:	98 e2       	ldi	r25, 0x28	; 40
   17d96:	1f 92       	push	r1
   17d98:	9f 93       	push	r25
   17d9a:	8f 93       	push	r24
   17d9c:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17da0:	0f 90       	pop	r0
   17da2:	0f 90       	pop	r0
   17da4:	0f 90       	pop	r0
            ++ptr; // override not used
            ++ptr; // interleave not used
            db = 0xff & *ptr++;
            amigo_format(db);
   17da6:	80 91 e7 1b 	lds	r24, 0x1BE7	; 0x801be7 <gpib_iobuff+0x1>
   17daa:	1a dd       	rcall	.-1484   	; 0x177e0 <amigo_check_unit>
   17dac:	80 91 ea 1b 	lds	r24, 0x1BEA	; 0x801bea <gpib_iobuff+0x4>
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x70)                   // HP-300 Clear
   17db0:	4b d9       	rcall	.-3434   	; 0x17048 <amigo_format>
   17db2:	04 c0       	rjmp	.+8      	; 0x17dbc <Amigo_Command+0x5b4>
    {
///  Reference: A23
        ++ptr;                                    // Dummy byte
        return(status & ERROR_MASK);
   17db4:	90 e7       	ldi	r25, 0x70	; 112
   17db6:	e9 16       	cp	r14, r25
   17db8:	f1 04       	cpc	r15, r1
   17dba:	29 f4       	brne	.+10     	; 0x17dc6 <Amigo_Command+0x5be>
   17dbc:	8a 89       	ldd	r24, Y+18	; 0x12
    }
    return ( amigo_todo_op(secondary, op, len) );
   17dbe:	9b 89       	ldd	r25, Y+19	; 0x13
   17dc0:	88 27       	eor	r24, r24
   17dc2:	90 7d       	andi	r25, 0xD0	; 208
   17dc4:	03 c0       	rjmp	.+6      	; 0x17dcc <Amigo_Command+0x5c4>
}
   17dc6:	a8 01       	movw	r20, r16
   17dc8:	8e 2d       	mov	r24, r14
   17dca:	d1 db       	rcall	.-2142   	; 0x1756e <amigo_todo_op>
   17dcc:	63 96       	adiw	r28, 0x13	; 19
   17dce:	e6 e0       	ldi	r30, 0x06	; 6
   17dd0:	0c 94 08 e6 	jmp	0x1cc10	; 0x1cc10 <__epilogue_restores__+0x18>

00017dd4 <Amigo_Execute>:
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list)


int Amigo_Execute( int secondary )
{
   17dd4:	cf 93       	push	r28
   17dd6:	df 93       	push	r29
   17dd8:	ec 01       	movw	r28, r24
#if SDEBUG
    if(debuglevel & 32)
   17dda:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17dde:	85 ff       	sbrs	r24, 5
   17de0:	19 c0       	rjmp	.+50     	; 0x17e14 <Amigo_Execute+0x40>
        printf("[AMIGO Execute(%02XH): listen:%02XH, talk:%02XH]\n",
   17de2:	80 91 ea 1d 	lds	r24, 0x1DEA	; 0x801dea <talking>
   17de6:	1f 92       	push	r1
   17de8:	8f 93       	push	r24
   17dea:	80 91 ec 1d 	lds	r24, 0x1DEC	; 0x801dec <listening>
   17dee:	1f 92       	push	r1
   17df0:	8f 93       	push	r24
   17df2:	df 93       	push	r29
   17df4:	cf 93       	push	r28
   17df6:	87 ec       	ldi	r24, 0xC7	; 199
   17df8:	98 e2       	ldi	r25, 0x28	; 40
   17dfa:	1f 92       	push	r1
   17dfc:	9f 93       	push	r25
   17dfe:	8f 93       	push	r24
   17e00:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   17e04:	8d b7       	in	r24, 0x3d	; 61
   17e06:	9e b7       	in	r25, 0x3e	; 62
   17e08:	09 96       	adiw	r24, 0x09	; 9
   17e0a:	0f b6       	in	r0, 0x3f	; 63
   17e0c:	f8 94       	cli
   17e0e:	9e bf       	out	0x3e, r25	; 62
   17e10:	0f be       	out	0x3f, r0	; 63
   17e12:	8d bf       	out	0x3d, r24	; 61
            secondary, listening, talking);
#endif

    if(talking == UNT)
   17e14:	80 91 ea 1d 	lds	r24, 0x1DEA	; 0x801dea <talking>
   17e18:	8f 35       	cpi	r24, 0x5F	; 95
   17e1a:	09 f4       	brne	.+2      	; 0x17e1e <Amigo_Execute+0x4a>
   17e1c:	ad c0       	rjmp	.+346    	; 0x17f78 <Amigo_Execute+0x1a4>
        return(0);

    if(!AMIGO_is_MTA(talking) && !AMIGO_is_MLA(listening))
   17e1e:	90 e0       	ldi	r25, 0x00	; 0
   17e20:	0e 94 da 8c 	call	0x119b4	; 0x119b4 <AMIGO_is_MTA>
   17e24:	89 2b       	or	r24, r25
   17e26:	39 f0       	breq	.+14     	; 0x17e36 <Amigo_Execute+0x62>
        return(0);

    if(secondary != 0x60 && secondary != 0x68)
   17e28:	ce 01       	movw	r24, r28
   17e2a:	87 7f       	andi	r24, 0xF7	; 247
   17e2c:	80 36       	cpi	r24, 0x60	; 96
   17e2e:	91 05       	cpc	r25, r1
   17e30:	09 f0       	breq	.+2      	; 0x17e34 <Amigo_Execute+0x60>
   17e32:	a2 c0       	rjmp	.+324    	; 0x17f78 <Amigo_Execute+0x1a4>
   17e34:	08 c0       	rjmp	.+16     	; 0x17e46 <Amigo_Execute+0x72>
#endif

    if(talking == UNT)
        return(0);

    if(!AMIGO_is_MTA(talking) && !AMIGO_is_MLA(listening))
   17e36:	80 91 ec 1d 	lds	r24, 0x1DEC	; 0x801dec <listening>
   17e3a:	90 e0       	ldi	r25, 0x00	; 0
   17e3c:	0e 94 cb 8c 	call	0x11996	; 0x11996 <AMIGO_is_MLA>
   17e40:	89 2b       	or	r24, r25
   17e42:	91 f7       	brne	.-28     	; 0x17e28 <Amigo_Execute+0x54>
   17e44:	99 c0       	rjmp	.+306    	; 0x17f78 <Amigo_Execute+0x1a4>
        return(0);

    if(secondary != 0x60 && secondary != 0x68)
        return(0);

    gpib_disable_PPR(AMIGOp->HEADER.PPR);
   17e46:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <AMIGOp>
   17e4a:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <AMIGOp+0x1>
   17e4e:	81 81       	ldd	r24, Z+1	; 0x01
   17e50:	90 e0       	ldi	r25, 0x00	; 0
   17e52:	0e 94 c2 86 	call	0x10d84	; 0x10d84 <gpib_disable_PPR>

    if(secondary == 0x60)
   17e56:	c0 36       	cpi	r28, 0x60	; 96
   17e58:	d1 05       	cpc	r29, r1
   17e5a:	09 f0       	breq	.+2      	; 0x17e5e <Amigo_Execute+0x8a>
   17e5c:	4e c0       	rjmp	.+156    	; 0x17efa <Amigo_Execute+0x126>
    {
        switch(AMIGOs->state)
   17e5e:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <AMIGOs>
   17e62:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <AMIGOs+0x1>
   17e66:	e0 81       	ld	r30, Z
   17e68:	8e 2f       	mov	r24, r30
   17e6a:	90 e0       	ldi	r25, 0x00	; 0
   17e6c:	8b 30       	cpi	r24, 0x0B	; 11
   17e6e:	91 05       	cpc	r25, r1
   17e70:	08 f0       	brcs	.+2      	; 0x17e74 <Amigo_Execute+0xa0>
   17e72:	41 c0       	rjmp	.+130    	; 0x17ef6 <Amigo_Execute+0x122>
   17e74:	fc 01       	movw	r30, r24
   17e76:	e0 52       	subi	r30, 0x20	; 32
   17e78:	ff 4f       	sbci	r31, 0xFF	; 255
   17e7a:	0c 94 9c e5 	jmp	0x1cb38	; 0x1cb38 <__tablejump2__>
        {
            case AMIGO_IDLE:
                return(0);
            case AMIGO_COLD_LOAD_READ:
#if SDEBUG
                if(debuglevel & 32)
   17e7e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17e82:	85 ff       	sbrs	r24, 5
   17e84:	18 c0       	rjmp	.+48     	; 0x17eb6 <Amigo_Execute+0xe2>
                    printf("[AMIGO Execute Cold Load Read]\n");
   17e86:	87 ea       	ldi	r24, 0xA7	; 167
   17e88:	98 e2       	ldi	r25, 0x28	; 40
   17e8a:	0d c0       	rjmp	.+26     	; 0x17ea6 <Amigo_Execute+0xd2>
#endif
                return ( amigo_buffered_read() );
            case AMIGO_READ_UNBUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   17e8c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17e90:	85 ff       	sbrs	r24, 5
   17e92:	11 c0       	rjmp	.+34     	; 0x17eb6 <Amigo_Execute+0xe2>
                    printf("[AMIGO Execute Read Unbuffered]\n");
   17e94:	86 e8       	ldi	r24, 0x86	; 134
   17e96:	98 e2       	ldi	r25, 0x28	; 40
   17e98:	06 c0       	rjmp	.+12     	; 0x17ea6 <Amigo_Execute+0xd2>
#endif
                return ( amigo_buffered_read() );
            case AMIGO_READ_BUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   17e9a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17e9e:	85 ff       	sbrs	r24, 5
   17ea0:	0a c0       	rjmp	.+20     	; 0x17eb6 <Amigo_Execute+0xe2>
                    printf("[AMIGO Execute Read Buffered]\n");
   17ea2:	87 e6       	ldi	r24, 0x67	; 103
   17ea4:	98 e2       	ldi	r25, 0x28	; 40
   17ea6:	1f 92       	push	r1
   17ea8:	9f 93       	push	r25
   17eaa:	8f 93       	push	r24
   17eac:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   17eb0:	0f 90       	pop	r0
   17eb2:	0f 90       	pop	r0
#endif
                return ( amigo_buffered_read() );
   17eb4:	0f 90       	pop	r0
   17eb6:	5a d9       	rcall	.-3404   	; 0x1716c <amigo_buffered_read>
            case AMIGO_WRITE_UNBUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   17eb8:	61 c0       	rjmp	.+194    	; 0x17f7c <Amigo_Execute+0x1a8>
   17eba:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17ebe:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Write Unbuffered]\n");
   17ec0:	18 c0       	rjmp	.+48     	; 0x17ef2 <Amigo_Execute+0x11e>
   17ec2:	85 e4       	ldi	r24, 0x45	; 69
   17ec4:	98 e2       	ldi	r25, 0x28	; 40
#endif
                return ( amigo_buffered_write() );
            case AMIGO_INITIALIZE:
#if SDEBUG
                if(debuglevel & 32)
   17ec6:	0d c0       	rjmp	.+26     	; 0x17ee2 <Amigo_Execute+0x10e>
   17ec8:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17ecc:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Initialize]\n");
   17ece:	11 c0       	rjmp	.+34     	; 0x17ef2 <Amigo_Execute+0x11e>
   17ed0:	89 e2       	ldi	r24, 0x29	; 41
   17ed2:	98 e2       	ldi	r25, 0x28	; 40
#endif
                return ( amigo_buffered_write() );
            case AMIGO_WRITE_BUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   17ed4:	06 c0       	rjmp	.+12     	; 0x17ee2 <Amigo_Execute+0x10e>
   17ed6:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17eda:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Write Buffered]\n");
   17edc:	0a c0       	rjmp	.+20     	; 0x17ef2 <Amigo_Execute+0x11e>
   17ede:	89 e0       	ldi	r24, 0x09	; 9
   17ee0:	98 e2       	ldi	r25, 0x28	; 40
   17ee2:	1f 92       	push	r1
   17ee4:	9f 93       	push	r25
   17ee6:	8f 93       	push	r24
   17ee8:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   17eec:	0f 90       	pop	r0
#endif
                return ( amigo_buffered_write() );
   17eee:	0f 90       	pop	r0
   17ef0:	0f 90       	pop	r0
   17ef2:	00 da       	rcall	.-3072   	; 0x172f4 <amigo_buffered_write>
            default:
                return ( amigo_todo(secondary) );
   17ef4:	43 c0       	rjmp	.+134    	; 0x17f7c <Amigo_Execute+0x1a8>
   17ef6:	80 e6       	ldi	r24, 0x60	; 96
        }
        AMIGOs->state = AMIGO_IDLE;
    }
    if(secondary == 0x68)
   17ef8:	3d c0       	rjmp	.+122    	; 0x17f74 <Amigo_Execute+0x1a0>
   17efa:	c8 36       	cpi	r28, 0x68	; 104
   17efc:	d1 05       	cpc	r29, r1
    {
        switch(AMIGOs->state)
   17efe:	e1 f5       	brne	.+120    	; 0x17f78 <Amigo_Execute+0x1a4>
   17f00:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <AMIGOs>
   17f04:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <AMIGOs+0x1>
   17f08:	80 81       	ld	r24, Z
   17f0a:	82 30       	cpi	r24, 0x02	; 2
   17f0c:	81 f0       	breq	.+32     	; 0x17f2e <Amigo_Execute+0x15a>
   17f0e:	18 f4       	brcc	.+6      	; 0x17f16 <Amigo_Execute+0x142>
   17f10:	88 23       	and	r24, r24
   17f12:	91 f1       	breq	.+100    	; 0x17f78 <Amigo_Execute+0x1a4>
   17f14:	2e c0       	rjmp	.+92     	; 0x17f72 <Amigo_Execute+0x19e>
   17f16:	83 30       	cpi	r24, 0x03	; 3
   17f18:	19 f0       	breq	.+6      	; 0x17f20 <Amigo_Execute+0x14c>
   17f1a:	84 30       	cpi	r24, 0x04	; 4
   17f1c:	c9 f0       	breq	.+50     	; 0x17f50 <Amigo_Execute+0x17c>
        {
            case AMIGO_IDLE:
                return(0);
            case AMIGO_REQUEST_STATUS_BUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   17f1e:	29 c0       	rjmp	.+82     	; 0x17f72 <Amigo_Execute+0x19e>
   17f20:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17f24:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Request Status Buffered]\n");
   17f26:	11 c0       	rjmp	.+34     	; 0x17f4a <Amigo_Execute+0x176>
   17f28:	80 ee       	ldi	r24, 0xE0	; 224
   17f2a:	97 e2       	ldi	r25, 0x27	; 39
#endif
                return ( amigo_send_status() );
            case AMIGO_REQUEST_STATUS_UNBUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   17f2c:	06 c0       	rjmp	.+12     	; 0x17f3a <Amigo_Execute+0x166>
   17f2e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17f32:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Exicute Request Status Unbuffered]\n");
   17f34:	0a c0       	rjmp	.+20     	; 0x17f4a <Amigo_Execute+0x176>
   17f36:	85 eb       	ldi	r24, 0xB5	; 181
   17f38:	97 e2       	ldi	r25, 0x27	; 39
   17f3a:	1f 92       	push	r1
   17f3c:	9f 93       	push	r25
   17f3e:	8f 93       	push	r24
   17f40:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   17f44:	0f 90       	pop	r0
   17f46:	0f 90       	pop	r0
#endif
                return ( amigo_send_status() );
   17f48:	0f 90       	pop	r0
   17f4a:	0e 94 e1 b6 	call	0x16dc2	; 0x16dc2 <amigo_send_status>
            case AMIGO_REQUEST_LOGICAL_ADDRESS:
#if SDEBUG
                if(debuglevel & 32)
   17f4e:	16 c0       	rjmp	.+44     	; 0x17f7c <Amigo_Execute+0x1a8>
   17f50:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17f54:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Request Logical Address]\n");
   17f56:	0a c0       	rjmp	.+20     	; 0x17f6c <Amigo_Execute+0x198>
   17f58:	8c e8       	ldi	r24, 0x8C	; 140
   17f5a:	97 e2       	ldi	r25, 0x27	; 39
   17f5c:	1f 92       	push	r1
   17f5e:	9f 93       	push	r25
   17f60:	8f 93       	push	r24
   17f62:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   17f66:	0f 90       	pop	r0
   17f68:	0f 90       	pop	r0
#endif
                return ( amigo_send_logical_address() );
   17f6a:	0f 90       	pop	r0
   17f6c:	0e 94 83 b6 	call	0x16d06	; 0x16d06 <amigo_send_logical_address>
            default:
                return ( amigo_todo(secondary) );
   17f70:	05 c0       	rjmp	.+10     	; 0x17f7c <Amigo_Execute+0x1a8>
   17f72:	88 e6       	ldi	r24, 0x68	; 104
   17f74:	a5 db       	rcall	.-2230   	; 0x176c0 <amigo_todo>
    if(secondary == 0x68)
    {
        switch(AMIGOs->state)
        {
            case AMIGO_IDLE:
                return(0);
   17f76:	02 c0       	rjmp	.+4      	; 0x17f7c <Amigo_Execute+0x1a8>
   17f78:	80 e0       	ldi	r24, 0x00	; 0
                return ( amigo_todo(secondary) );
        }
        AMIGOs->state = AMIGO_IDLE;
    }
    return(0);
}
   17f7a:	90 e0       	ldi	r25, 0x00	; 0
   17f7c:	df 91       	pop	r29
   17f7e:	cf 91       	pop	r28
   17f80:	08 95       	ret

00017f82 <AMIGO_COMMANDS>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list.

int AMIGO_COMMANDS(uint8_t ch)
{
   17f82:	cf 93       	push	r28
   17f84:	df 93       	push	r29
   17f86:	c8 2f       	mov	r28, r24

    if(AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening))
   17f88:	80 91 ea 1d 	lds	r24, 0x1DEA	; 0x801dea <talking>
   17f8c:	90 e0       	ldi	r25, 0x00	; 0
   17f8e:	0e 94 da 8c 	call	0x119b4	; 0x119b4 <AMIGO_is_MTA>
   17f92:	89 2b       	or	r24, r25
   17f94:	51 f0       	breq	.+20     	; 0x17faa <AMIGO_COMMANDS+0x28>
    {

        if(talking == UNT && AMIGO_is_MLA(listening))
   17f96:	80 91 ea 1d 	lds	r24, 0x1DEA	; 0x801dea <talking>
   17f9a:	8f 35       	cpi	r24, 0x5F	; 95
   17f9c:	71 f4       	brne	.+28     	; 0x17fba <AMIGO_COMMANDS+0x38>
   17f9e:	80 91 ec 1d 	lds	r24, 0x1DEC	; 0x801dec <listening>
   17fa2:	90 e0       	ldi	r25, 0x00	; 0
   17fa4:	0e 94 cb 8c 	call	0x11996	; 0x11996 <AMIGO_is_MLA>
   17fa8:	08 c0       	rjmp	.+16     	; 0x17fba <AMIGO_COMMANDS+0x38>
/// @see  gpib.h ERROR_MASK defines for a full list.

int AMIGO_COMMANDS(uint8_t ch)
{

    if(AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening))
   17faa:	80 91 ec 1d 	lds	r24, 0x1DEC	; 0x801dec <listening>
   17fae:	90 e0       	ldi	r25, 0x00	; 0
   17fb0:	0e 94 cb 8c 	call	0x11996	; 0x11996 <AMIGO_is_MLA>
   17fb4:	89 2b       	or	r24, r25
   17fb6:	79 f7       	brne	.-34     	; 0x17f96 <AMIGO_COMMANDS+0x14>
   17fb8:	76 c0       	rjmp	.+236    	; 0x180a6 <AMIGO_COMMANDS+0x124>

        if(talking == UNT && AMIGO_is_MLA(listening))
        {
            // printf("AMIGO COMMANDS %02XH NO TALK ADDRESS!\n", ch);
        }
        if(listening == 0 && AMIGO_is_MTA(talking))
   17fba:	80 91 ec 1d 	lds	r24, 0x1DEC	; 0x801dec <listening>
   17fbe:	81 11       	cpse	r24, r1
   17fc0:	05 c0       	rjmp	.+10     	; 0x17fcc <AMIGO_COMMANDS+0x4a>
   17fc2:	80 91 ea 1d 	lds	r24, 0x1DEA	; 0x801dea <talking>
   17fc6:	90 e0       	ldi	r25, 0x00	; 0
   17fc8:	0e 94 da 8c 	call	0x119b4	; 0x119b4 <AMIGO_is_MTA>
        {
            // printf("AMIGO COMMANDS %02XH NO LISTEN ADDRESS!\n", ch);
        }

        if(ch == 0x60 && (AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening)) )
   17fcc:	c0 36       	cpi	r28, 0x60	; 96
   17fce:	99 f4       	brne	.+38     	; 0x17ff6 <AMIGO_COMMANDS+0x74>
   17fd0:	80 91 ea 1d 	lds	r24, 0x1DEA	; 0x801dea <talking>
   17fd4:	90 e0       	ldi	r25, 0x00	; 0
   17fd6:	0e 94 da 8c 	call	0x119b4	; 0x119b4 <AMIGO_is_MTA>
   17fda:	89 2b       	or	r24, r25
   17fdc:	19 f0       	breq	.+6      	; 0x17fe4 <AMIGO_COMMANDS+0x62>
        {
            return (Amigo_Execute(ch) );
   17fde:	80 e6       	ldi	r24, 0x60	; 96
   17fe0:	90 e0       	ldi	r25, 0x00	; 0
   17fe2:	14 c0       	rjmp	.+40     	; 0x1800c <AMIGO_COMMANDS+0x8a>
        if(listening == 0 && AMIGO_is_MTA(talking))
        {
            // printf("AMIGO COMMANDS %02XH NO LISTEN ADDRESS!\n", ch);
        }

        if(ch == 0x60 && (AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening)) )
   17fe4:	80 91 ec 1d 	lds	r24, 0x1DEC	; 0x801dec <listening>
   17fe8:	90 e0       	ldi	r25, 0x00	; 0
   17fea:	0e 94 cb 8c 	call	0x11996	; 0x11996 <AMIGO_is_MLA>
   17fee:	89 2b       	or	r24, r25
   17ff0:	09 f4       	brne	.+2      	; 0x17ff4 <AMIGO_COMMANDS+0x72>
   17ff2:	59 c0       	rjmp	.+178    	; 0x180a6 <AMIGO_COMMANDS+0x124>
   17ff4:	f4 cf       	rjmp	.-24     	; 0x17fde <AMIGO_COMMANDS+0x5c>
        {
            return (Amigo_Execute(ch) );
        }

        if(ch == 0x68 && AMIGO_is_MTA(talking) )
   17ff6:	c8 36       	cpi	r28, 0x68	; 104
   17ff8:	c1 f4       	brne	.+48     	; 0x1802a <AMIGO_COMMANDS+0xa8>
   17ffa:	80 91 ea 1d 	lds	r24, 0x1DEA	; 0x801dea <talking>
   17ffe:	90 e0       	ldi	r25, 0x00	; 0
   18000:	0e 94 da 8c 	call	0x119b4	; 0x119b4 <AMIGO_is_MTA>
   18004:	89 2b       	or	r24, r25
   18006:	21 f0       	breq	.+8      	; 0x18010 <AMIGO_COMMANDS+0x8e>
        {
            return (Amigo_Execute(ch) );
   18008:	88 e6       	ldi	r24, 0x68	; 104
   1800a:	90 e0       	ldi	r25, 0x00	; 0
   1800c:	e3 de       	rcall	.-570    	; 0x17dd4 <Amigo_Execute>
   1800e:	0b c0       	rjmp	.+22     	; 0x18026 <AMIGO_COMMANDS+0xa4>
        }

        if(ch == 0x68 && AMIGO_is_MLA(listening) ) // Single byte command
   18010:	80 91 ec 1d 	lds	r24, 0x1DEC	; 0x801dec <listening>
   18014:	90 e0       	ldi	r25, 0x00	; 0
   18016:	0e 94 cb 8c 	call	0x11996	; 0x11996 <AMIGO_is_MLA>
   1801a:	89 2b       	or	r24, r25
   1801c:	09 f4       	brne	.+2      	; 0x18020 <AMIGO_COMMANDS+0x9e>
   1801e:	43 c0       	rjmp	.+134    	; 0x180a6 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   18020:	88 e6       	ldi	r24, 0x68	; 104
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x6c && AMIGO_is_MLA(listening) ) // Single byte command
        {
            return (Amigo_Command(ch) );
   18022:	90 e0       	ldi	r25, 0x00	; 0
   18024:	f1 db       	rcall	.-2078   	; 0x17808 <Amigo_Command>
        }
        if(ch == 0x70 && AMIGO_is_MTA(talking))
        {
            gpib_disable_PPR(AMIGOp->HEADER.PPR);
            return( amigo_cmd_dsj() );
   18026:	ec 01       	movw	r28, r24
   18028:	40 c0       	rjmp	.+128    	; 0x180aa <AMIGO_COMMANDS+0x128>

        if(ch == 0x68 && AMIGO_is_MLA(listening) ) // Single byte command
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x69 && AMIGO_is_MLA(listening) ) // Single byte command
   1802a:	c9 36       	cpi	r28, 0x69	; 105
   1802c:	51 f4       	brne	.+20     	; 0x18042 <AMIGO_COMMANDS+0xc0>
   1802e:	80 91 ec 1d 	lds	r24, 0x1DEC	; 0x801dec <listening>
   18032:	90 e0       	ldi	r25, 0x00	; 0
   18034:	0e 94 cb 8c 	call	0x11996	; 0x11996 <AMIGO_is_MLA>
   18038:	89 2b       	or	r24, r25
   1803a:	a9 f1       	breq	.+106    	; 0x180a6 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   1803c:	89 e6       	ldi	r24, 0x69	; 105
   1803e:	90 e0       	ldi	r25, 0x00	; 0
   18040:	f1 cf       	rjmp	.-30     	; 0x18024 <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x6a && AMIGO_is_MLA(listening) ) // Single byte command
   18042:	ca 36       	cpi	r28, 0x6A	; 106
   18044:	51 f4       	brne	.+20     	; 0x1805a <AMIGO_COMMANDS+0xd8>
   18046:	80 91 ec 1d 	lds	r24, 0x1DEC	; 0x801dec <listening>
   1804a:	90 e0       	ldi	r25, 0x00	; 0
   1804c:	0e 94 cb 8c 	call	0x11996	; 0x11996 <AMIGO_is_MLA>
   18050:	89 2b       	or	r24, r25
   18052:	49 f1       	breq	.+82     	; 0x180a6 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   18054:	8a e6       	ldi	r24, 0x6A	; 106
   18056:	90 e0       	ldi	r25, 0x00	; 0
   18058:	e5 cf       	rjmp	.-54     	; 0x18024 <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x6c && AMIGO_is_MLA(listening) ) // Single byte command
   1805a:	cc 36       	cpi	r28, 0x6C	; 108
   1805c:	51 f4       	brne	.+20     	; 0x18072 <AMIGO_COMMANDS+0xf0>
   1805e:	80 91 ec 1d 	lds	r24, 0x1DEC	; 0x801dec <listening>
   18062:	90 e0       	ldi	r25, 0x00	; 0
   18064:	0e 94 cb 8c 	call	0x11996	; 0x11996 <AMIGO_is_MLA>
   18068:	89 2b       	or	r24, r25
   1806a:	e9 f0       	breq	.+58     	; 0x180a6 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   1806c:	8c e6       	ldi	r24, 0x6C	; 108
   1806e:	90 e0       	ldi	r25, 0x00	; 0
   18070:	d9 cf       	rjmp	.-78     	; 0x18024 <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x70 && AMIGO_is_MTA(talking))
   18072:	c0 37       	cpi	r28, 0x70	; 112
   18074:	c1 f4       	brne	.+48     	; 0x180a6 <AMIGO_COMMANDS+0x124>
   18076:	80 91 ea 1d 	lds	r24, 0x1DEA	; 0x801dea <talking>
   1807a:	90 e0       	ldi	r25, 0x00	; 0
   1807c:	0e 94 da 8c 	call	0x119b4	; 0x119b4 <AMIGO_is_MTA>
   18080:	ec 01       	movw	r28, r24
   18082:	89 2b       	or	r24, r25
   18084:	51 f0       	breq	.+20     	; 0x1809a <AMIGO_COMMANDS+0x118>
        {
            gpib_disable_PPR(AMIGOp->HEADER.PPR);
   18086:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <AMIGOp>
   1808a:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <AMIGOp+0x1>
   1808e:	81 81       	ldd	r24, Z+1	; 0x01
   18090:	90 e0       	ldi	r25, 0x00	; 0
   18092:	0e 94 c2 86 	call	0x10d84	; 0x10d84 <gpib_disable_PPR>
            return( amigo_cmd_dsj() );
   18096:	e6 d9       	rcall	.-3124   	; 0x17464 <amigo_cmd_dsj>
   18098:	c6 cf       	rjmp	.-116    	; 0x18026 <AMIGO_COMMANDS+0xa4>
        }
        if(ch == 0x7e && ch == 0x7f)
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x70 && AMIGO_is_MLA(listening))
   1809a:	80 91 ec 1d 	lds	r24, 0x1DEC	; 0x801dec <listening>
   1809e:	90 e0       	ldi	r25, 0x00	; 0
   180a0:	0e 94 cb 8c 	call	0x11996	; 0x11996 <AMIGO_is_MLA>
   180a4:	02 c0       	rjmp	.+4      	; 0x180aa <AMIGO_COMMANDS+0x128>
        {
            // NOP
        }
    }
    return(0);
   180a6:	c0 e0       	ldi	r28, 0x00	; 0
   180a8:	d0 e0       	ldi	r29, 0x00	; 0
}
   180aa:	ce 01       	movw	r24, r28
   180ac:	df 91       	pop	r29
   180ae:	cf 91       	pop	r28
   180b0:	08 95       	ret

000180b2 <printer_init>:
/// - Only called once after power on by main().
/// @return  void

void printer_init()
{
    plot.error = 0;
   180b2:	e0 ea       	ldi	r30, 0xA0	; 160
   180b4:	f8 e1       	ldi	r31, 0x18	; 24
   180b6:	10 86       	std	Z+8, r1	; 0x08
    plot.count = 0;
   180b8:	10 82       	st	Z, r1
   180ba:	11 82       	std	Z+1, r1	; 0x01
   180bc:	12 82       	std	Z+2, r1	; 0x02
   180be:	13 82       	std	Z+3, r1	; 0x03
    plot.ind = 0;
   180c0:	15 82       	std	Z+5, r1	; 0x05
   180c2:	14 82       	std	Z+4, r1	; 0x04
    plot.fp = NULL;
   180c4:	12 86       	std	Z+10, r1	; 0x0a
   180c6:	11 86       	std	Z+9, r1	; 0x09
    plot.buf = NULL;
   180c8:	14 86       	std	Z+12, r1	; 0x0c
   180ca:	13 86       	std	Z+11, r1	; 0x0b
   180cc:	08 95       	ret

000180ce <receive_plot_flush>:
/// @see posix.h
/// @see printer_buffer()
/// @return  file handle

int receive_plot_flush()
{
   180ce:	cf 93       	push	r28
   180d0:	df 93       	push	r29
    int ret;
    int fno;

    if(plot.fp == NULL || plot.ind == 0)
   180d2:	20 91 a9 18 	lds	r18, 0x18A9	; 0x8018a9 <plot+0x9>
   180d6:	30 91 aa 18 	lds	r19, 0x18AA	; 0x8018aa <plot+0xa>
   180da:	21 15       	cp	r18, r1
   180dc:	31 05       	cpc	r19, r1
   180de:	09 f4       	brne	.+2      	; 0x180e2 <receive_plot_flush+0x14>
   180e0:	4a c0       	rjmp	.+148    	; 0x18176 <receive_plot_flush+0xa8>
   180e2:	80 91 a4 18 	lds	r24, 0x18A4	; 0x8018a4 <plot+0x4>
   180e6:	90 91 a5 18 	lds	r25, 0x18A5	; 0x8018a5 <plot+0x5>
   180ea:	00 97       	sbiw	r24, 0x00	; 0
   180ec:	09 f4       	brne	.+2      	; 0x180f0 <receive_plot_flush+0x22>
   180ee:	45 c0       	rjmp	.+138    	; 0x1817a <receive_plot_flush+0xac>
        return(0);

    ret  = fwrite(plot.buf, 1, plot.ind , plot.fp);
   180f0:	ac 01       	movw	r20, r24
   180f2:	61 e0       	ldi	r22, 0x01	; 1
   180f4:	70 e0       	ldi	r23, 0x00	; 0
   180f6:	80 91 ab 18 	lds	r24, 0x18AB	; 0x8018ab <plot+0xb>
   180fa:	90 91 ac 18 	lds	r25, 0x18AC	; 0x8018ac <plot+0xc>
   180fe:	0e 94 68 7d 	call	0xfad0	; 0xfad0 <fwrite>
   18102:	ec 01       	movw	r28, r24
    if(ret != plot.ind)
   18104:	80 91 a4 18 	lds	r24, 0x18A4	; 0x8018a4 <plot+0x4>
   18108:	90 91 a5 18 	lds	r25, 0x18A5	; 0x8018a5 <plot+0x5>
   1810c:	c8 17       	cp	r28, r24
   1810e:	d9 07       	cpc	r29, r25
   18110:	31 f1       	breq	.+76     	; 0x1815e <receive_plot_flush+0x90>
    {
        if(debuglevel & (1+32))
   18112:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   18116:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1811a:	81 72       	andi	r24, 0x21	; 33
   1811c:	99 27       	eor	r25, r25
   1811e:	89 2b       	or	r24, r25
   18120:	d9 f0       	breq	.+54     	; 0x18158 <receive_plot_flush+0x8a>
        {
            perror("receive_plot_flush");
   18122:	89 e3       	ldi	r24, 0x39	; 57
   18124:	95 e1       	ldi	r25, 0x15	; 21
   18126:	0e 94 8a 79 	call	0xf314	; 0xf314 <perror>
            printf("write failed: wanted %d, got:%d\n", plot.ind, ret);
   1812a:	df 93       	push	r29
   1812c:	cf 93       	push	r28
   1812e:	80 91 a5 18 	lds	r24, 0x18A5	; 0x8018a5 <plot+0x5>
   18132:	8f 93       	push	r24
   18134:	80 91 a4 18 	lds	r24, 0x18A4	; 0x8018a4 <plot+0x4>
   18138:	8f 93       	push	r24
   1813a:	80 e5       	ldi	r24, 0x50	; 80
   1813c:	90 e3       	ldi	r25, 0x30	; 48
   1813e:	1f 92       	push	r1
   18140:	9f 93       	push	r25
   18142:	8f 93       	push	r24
   18144:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   18148:	8d b7       	in	r24, 0x3d	; 61
   1814a:	9e b7       	in	r25, 0x3e	; 62
   1814c:	07 96       	adiw	r24, 0x07	; 7
   1814e:	0f b6       	in	r0, 0x3f	; 63
   18150:	f8 94       	cli
   18152:	9e bf       	out	0x3e, r25	; 62
   18154:	0f be       	out	0x3f, r0	; 63
   18156:	8d bf       	out	0x3d, r24	; 61
        }
        return(-1);
   18158:	8f ef       	ldi	r24, 0xFF	; 255
   1815a:	9f ef       	ldi	r25, 0xFF	; 255
   1815c:	0e c0       	rjmp	.+28     	; 0x1817a <receive_plot_flush+0xac>
    }

    fno = fileno( plot.fp );
   1815e:	80 91 a9 18 	lds	r24, 0x18A9	; 0x8018a9 <plot+0x9>
   18162:	90 91 aa 18 	lds	r25, 0x18AA	; 0x8018aa <plot+0xa>
   18166:	0e 94 d4 77 	call	0xefa8	; 0xefa8 <fileno>
    if(fno < 0)
   1816a:	97 fd       	sbrc	r25, 7
   1816c:	f5 cf       	rjmp	.-22     	; 0x18158 <receive_plot_flush+0x8a>
        return(-1);
    ///@brief sync filesystem after every write 
    syncfs( fno );
   1816e:	0e 94 b2 7c 	call	0xf964	; 0xf964 <syncfs>
    return (ret);
   18172:	ce 01       	movw	r24, r28
   18174:	02 c0       	rjmp	.+4      	; 0x1817a <receive_plot_flush+0xac>
{
    int ret;
    int fno;

    if(plot.fp == NULL || plot.ind == 0)
        return(0);
   18176:	80 e0       	ldi	r24, 0x00	; 0
   18178:	90 e0       	ldi	r25, 0x00	; 0
    if(fno < 0)
        return(-1);
    ///@brief sync filesystem after every write 
    syncfs( fno );
    return (ret);
}
   1817a:	df 91       	pop	r29
   1817c:	cf 91       	pop	r28
   1817e:	08 95       	ret

00018180 <printer_close>:
   18180:	a6 df       	rcall	.-180    	; 0x180ce <receive_plot_flush>
   18182:	97 ff       	sbrs	r25, 7
   18184:	03 c0       	rjmp	.+6      	; 0x1818c <printer_close+0xc>
   18186:	81 e0       	ldi	r24, 0x01	; 1
   18188:	80 93 a8 18 	sts	0x18A8, r24	; 0x8018a8 <plot+0x8>
   1818c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   18190:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   18194:	81 72       	andi	r24, 0x21	; 33
   18196:	99 27       	eor	r25, r25
   18198:	89 2b       	or	r24, r25
   1819a:	71 f0       	breq	.+28     	; 0x181b8 <printer_close+0x38>
   1819c:	80 91 a8 18 	lds	r24, 0x18A8	; 0x8018a8 <plot+0x8>
   181a0:	88 23       	and	r24, r24
   181a2:	51 f0       	breq	.+20     	; 0x181b8 <printer_close+0x38>
   181a4:	8f e7       	ldi	r24, 0x7F	; 127
   181a6:	90 e3       	ldi	r25, 0x30	; 48
   181a8:	1f 92       	push	r1
   181aa:	9f 93       	push	r25
   181ac:	8f 93       	push	r24
   181ae:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   181b2:	0f 90       	pop	r0
   181b4:	0f 90       	pop	r0
   181b6:	0f 90       	pop	r0
   181b8:	80 91 a9 18 	lds	r24, 0x18A9	; 0x8018a9 <plot+0x9>
   181bc:	90 91 aa 18 	lds	r25, 0x18AA	; 0x8018aa <plot+0xa>
   181c0:	00 97       	sbiw	r24, 0x00	; 0
   181c2:	09 f1       	breq	.+66     	; 0x18206 <printer_close+0x86>
   181c4:	0e 94 ea 7d 	call	0xfbd4	; 0xfbd4 <fclose>
   181c8:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   181cc:	85 ff       	sbrs	r24, 5
   181ce:	1b c0       	rjmp	.+54     	; 0x18206 <printer_close+0x86>
   181d0:	80 91 a3 18 	lds	r24, 0x18A3	; 0x8018a3 <plot+0x3>
   181d4:	8f 93       	push	r24
   181d6:	80 91 a2 18 	lds	r24, 0x18A2	; 0x8018a2 <plot+0x2>
   181da:	8f 93       	push	r24
   181dc:	80 91 a1 18 	lds	r24, 0x18A1	; 0x8018a1 <plot+0x1>
   181e0:	8f 93       	push	r24
   181e2:	80 91 a0 18 	lds	r24, 0x18A0	; 0x8018a0 <plot>
   181e6:	8f 93       	push	r24
   181e8:	81 e7       	ldi	r24, 0x71	; 113
   181ea:	90 e3       	ldi	r25, 0x30	; 48
   181ec:	1f 92       	push	r1
   181ee:	9f 93       	push	r25
   181f0:	8f 93       	push	r24
   181f2:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   181f6:	8d b7       	in	r24, 0x3d	; 61
   181f8:	9e b7       	in	r25, 0x3e	; 62
   181fa:	07 96       	adiw	r24, 0x07	; 7
   181fc:	0f b6       	in	r0, 0x3f	; 63
   181fe:	f8 94       	cli
   18200:	9e bf       	out	0x3e, r25	; 62
   18202:	0f be       	out	0x3f, r0	; 63
   18204:	8d bf       	out	0x3d, r24	; 61
   18206:	80 91 ab 18 	lds	r24, 0x18AB	; 0x8018ab <plot+0xb>
   1820a:	90 91 ac 18 	lds	r25, 0x18AC	; 0x8018ac <plot+0xc>
   1820e:	00 97       	sbiw	r24, 0x00	; 0
   18210:	11 f0       	breq	.+4      	; 0x18216 <printer_close+0x96>
   18212:	0e 94 cf 29 	call	0x539e	; 0x539e <safefree>
   18216:	4d cf       	rjmp	.-358    	; 0x180b2 <printer_init>
   18218:	08 95       	ret

0001821a <printer_open>:
   1821a:	ac e4       	ldi	r26, 0x4C	; 76
   1821c:	b0 e0       	ldi	r27, 0x00	; 0
   1821e:	e3 e1       	ldi	r30, 0x13	; 19
   18220:	f1 ec       	ldi	r31, 0xC1	; 193
   18222:	0c 94 e6 e5 	jmp	0x1cbcc	; 0x1cbcc <__prologue_saves__+0xc>
   18226:	8c 01       	movw	r16, r24
   18228:	89 2b       	or	r24, r25
   1822a:	09 f0       	breq	.+2      	; 0x1822e <printer_open+0x14>
   1822c:	4b c0       	rjmp	.+150    	; 0x182c4 <printer_open+0xaa>
   1822e:	be 01       	movw	r22, r28
   18230:	6f 5b       	subi	r22, 0xBF	; 191
   18232:	7f 4f       	sbci	r23, 0xFF	; 255
   18234:	80 e0       	ldi	r24, 0x00	; 0
   18236:	90 e0       	ldi	r25, 0x00	; 0
   18238:	0e 94 ec 34 	call	0x69d8	; 0x69d8 <clock_gettime>
   1823c:	25 96       	adiw	r28, 0x05	; 5
   1823e:	8c ad       	ldd	r24, Y+60	; 0x3c
   18240:	9d ad       	ldd	r25, Y+61	; 0x3d
   18242:	ae ad       	ldd	r26, Y+62	; 0x3e
   18244:	bf ad       	ldd	r27, Y+63	; 0x3f
   18246:	25 97       	sbiw	r28, 0x05	; 5
   18248:	2d 96       	adiw	r28, 0x0d	; 13
   1824a:	8c af       	std	Y+60, r24	; 0x3c
   1824c:	9d af       	std	Y+61, r25	; 0x3d
   1824e:	ae af       	std	Y+62, r26	; 0x3e
   18250:	bf af       	std	Y+63, r27	; 0x3f
   18252:	2d 97       	sbiw	r28, 0x0d	; 13
   18254:	ce 01       	movw	r24, r28
   18256:	87 5b       	subi	r24, 0xB7	; 183
   18258:	9f 4f       	sbci	r25, 0xFF	; 255
   1825a:	0e 94 bc 38 	call	0x7178	; 0x7178 <gmtime>
   1825e:	8c 01       	movw	r16, r24
   18260:	fc 01       	movw	r30, r24
   18262:	90 80       	ld	r9, Z
   18264:	81 80       	ldd	r8, Z+1	; 0x01
   18266:	b2 80       	ldd	r11, Z+2	; 0x02
   18268:	a3 80       	ldd	r10, Z+3	; 0x03
   1826a:	d4 80       	ldd	r13, Z+4	; 0x04
   1826c:	c5 80       	ldd	r12, Z+5	; 0x05
   1826e:	e2 84       	ldd	r14, Z+10	; 0x0a
   18270:	f3 84       	ldd	r15, Z+11	; 0x0b
   18272:	f4 e9       	ldi	r31, 0x94	; 148
   18274:	ef 1a       	sub	r14, r31
   18276:	f8 ef       	ldi	r31, 0xF8	; 248
   18278:	ff 0a       	sbc	r15, r31
   1827a:	fc 01       	movw	r30, r24
   1827c:	80 85       	ldd	r24, Z+8	; 0x08
   1827e:	91 85       	ldd	r25, Z+9	; 0x09
   18280:	0e 94 98 37 	call	0x6f30	; 0x6f30 <tm_mon_to_ascii>
   18284:	8f 92       	push	r8
   18286:	9f 92       	push	r9
   18288:	af 92       	push	r10
   1828a:	bf 92       	push	r11
   1828c:	cf 92       	push	r12
   1828e:	df 92       	push	r13
   18290:	ff 92       	push	r15
   18292:	ef 92       	push	r14
   18294:	9f 93       	push	r25
   18296:	8f 93       	push	r24
   18298:	f8 01       	movw	r30, r16
   1829a:	87 81       	ldd	r24, Z+7	; 0x07
   1829c:	8f 93       	push	r24
   1829e:	86 81       	ldd	r24, Z+6	; 0x06
   182a0:	8f 93       	push	r24
   182a2:	86 eb       	ldi	r24, 0xB6	; 182
   182a4:	90 e3       	ldi	r25, 0x30	; 48
   182a6:	1f 92       	push	r1
   182a8:	9f 93       	push	r25
   182aa:	8f 93       	push	r24
   182ac:	8e 01       	movw	r16, r28
   182ae:	0f 5f       	subi	r16, 0xFF	; 255
   182b0:	1f 4f       	sbci	r17, 0xFF	; 255
   182b2:	1f 93       	push	r17
   182b4:	0f 93       	push	r16
   182b6:	0e 94 47 47 	call	0x8e8e	; 0x8e8e <sprintf_P>
   182ba:	0f b6       	in	r0, 0x3f	; 63
   182bc:	f8 94       	cli
   182be:	de bf       	out	0x3e, r29	; 62
   182c0:	0f be       	out	0x3f, r0	; 63
   182c2:	cd bf       	out	0x3d, r28	; 61
   182c4:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   182c8:	85 ff       	sbrs	r24, 5
   182ca:	0e c0       	rjmp	.+28     	; 0x182e8 <printer_open+0xce>
   182cc:	1f 93       	push	r17
   182ce:	0f 93       	push	r16
   182d0:	80 ea       	ldi	r24, 0xA0	; 160
   182d2:	90 e3       	ldi	r25, 0x30	; 48
   182d4:	1f 92       	push	r1
   182d6:	9f 93       	push	r25
   182d8:	8f 93       	push	r24
   182da:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   182de:	0f 90       	pop	r0
   182e0:	0f 90       	pop	r0
   182e2:	0f 90       	pop	r0
   182e4:	0f 90       	pop	r0
   182e6:	0f 90       	pop	r0
   182e8:	64 e9       	ldi	r22, 0x94	; 148
   182ea:	78 e0       	ldi	r23, 0x08	; 8
   182ec:	c8 01       	movw	r24, r16
   182ee:	0e 94 40 7f 	call	0xfe80	; 0xfe80 <fopen>
   182f2:	90 93 aa 18 	sts	0x18AA, r25	; 0x8018aa <plot+0xa>
   182f6:	80 93 a9 18 	sts	0x18A9, r24	; 0x8018a9 <plot+0x9>
   182fa:	89 2b       	or	r24, r25
   182fc:	b9 f4       	brne	.+46     	; 0x1832c <printer_open+0x112>
   182fe:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   18302:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   18306:	81 72       	andi	r24, 0x21	; 33
   18308:	99 27       	eor	r25, r25
   1830a:	89 2b       	or	r24, r25
   1830c:	11 f1       	breq	.+68     	; 0x18352 <printer_open+0x138>
   1830e:	8b e1       	ldi	r24, 0x1B	; 27
   18310:	9d e0       	ldi	r25, 0x0D	; 13
   18312:	0e 94 8a 79 	call	0xf314	; 0xf314 <perror>
   18316:	84 e9       	ldi	r24, 0x94	; 148
   18318:	90 e3       	ldi	r25, 0x30	; 48
   1831a:	1f 92       	push	r1
   1831c:	9f 93       	push	r25
   1831e:	8f 93       	push	r24
   18320:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   18324:	0f 90       	pop	r0
   18326:	0f 90       	pop	r0
   18328:	0f 90       	pop	r0
   1832a:	13 c0       	rjmp	.+38     	; 0x18352 <printer_open+0x138>
   1832c:	61 e0       	ldi	r22, 0x01	; 1
   1832e:	70 e0       	ldi	r23, 0x00	; 0
   18330:	81 e0       	ldi	r24, 0x01	; 1
   18332:	92 e0       	ldi	r25, 0x02	; 2
   18334:	0e 94 86 29 	call	0x530c	; 0x530c <safecalloc>
   18338:	90 93 ac 18 	sts	0x18AC, r25	; 0x8018ac <plot+0xc>
   1833c:	80 93 ab 18 	sts	0x18AB, r24	; 0x8018ab <plot+0xb>
   18340:	89 2b       	or	r24, r25
   18342:	09 f4       	brne	.+2      	; 0x18346 <printer_open+0x12c>
   18344:	1d df       	rcall	.-454    	; 0x18180 <printer_close>
   18346:	80 e0       	ldi	r24, 0x00	; 0
   18348:	92 e0       	ldi	r25, 0x02	; 2
   1834a:	90 93 a7 18 	sts	0x18A7, r25	; 0x8018a7 <plot+0x7>
   1834e:	80 93 a6 18 	sts	0x18A6, r24	; 0x8018a6 <plot+0x6>
   18352:	c4 5b       	subi	r28, 0xB4	; 180
   18354:	df 4f       	sbci	r29, 0xFF	; 255
   18356:	ec e0       	ldi	r30, 0x0C	; 12
   18358:	0c 94 02 e6 	jmp	0x1cc04	; 0x1cc04 <__epilogue_restores__+0xc>

0001835c <printer_buffer>:
   1835c:	cf 93       	push	r28
   1835e:	df 93       	push	r29
   18360:	ec 01       	movw	r28, r24
   18362:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   18366:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1836a:	81 72       	andi	r24, 0x21	; 33
   1836c:	99 27       	eor	r25, r25
   1836e:	89 2b       	or	r24, r25
   18370:	e9 f0       	breq	.+58     	; 0x183ac <printer_buffer+0x50>
   18372:	80 91 a0 18 	lds	r24, 0x18A0	; 0x8018a0 <plot>
   18376:	90 91 a1 18 	lds	r25, 0x18A1	; 0x8018a1 <plot+0x1>
   1837a:	20 91 a2 18 	lds	r18, 0x18A2	; 0x8018a2 <plot+0x2>
   1837e:	30 91 a3 18 	lds	r19, 0x18A3	; 0x8018a3 <plot+0x3>
   18382:	81 11       	cpse	r24, r1
   18384:	13 c0       	rjmp	.+38     	; 0x183ac <printer_buffer+0x50>
   18386:	3f 93       	push	r19
   18388:	2f 93       	push	r18
   1838a:	9f 93       	push	r25
   1838c:	8f 93       	push	r24
   1838e:	89 e4       	ldi	r24, 0x49	; 73
   18390:	90 e3       	ldi	r25, 0x30	; 48
   18392:	1f 92       	push	r1
   18394:	9f 93       	push	r25
   18396:	8f 93       	push	r24
   18398:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1839c:	8d b7       	in	r24, 0x3d	; 61
   1839e:	9e b7       	in	r25, 0x3e	; 62
   183a0:	07 96       	adiw	r24, 0x07	; 7
   183a2:	0f b6       	in	r0, 0x3f	; 63
   183a4:	f8 94       	cli
   183a6:	9e bf       	out	0x3e, r25	; 62
   183a8:	0f be       	out	0x3f, r0	; 63
   183aa:	8d bf       	out	0x3d, r24	; 61
   183ac:	ce 01       	movw	r24, r28
   183ae:	88 27       	eor	r24, r24
   183b0:	97 7f       	andi	r25, 0xF7	; 247
   183b2:	89 2b       	or	r24, r25
   183b4:	41 f0       	breq	.+16     	; 0x183c6 <printer_buffer+0x6a>
   183b6:	8b de       	rcall	.-746    	; 0x180ce <receive_plot_flush>
   183b8:	89 2b       	or	r24, r25
   183ba:	09 f4       	brne	.+2      	; 0x183be <printer_buffer+0x62>
   183bc:	3f c0       	rjmp	.+126    	; 0x1843c <printer_buffer+0xe0>
   183be:	81 e0       	ldi	r24, 0x01	; 1
   183c0:	80 93 a8 18 	sts	0x18A8, r24	; 0x8018a8 <plot+0x8>
   183c4:	3b c0       	rjmp	.+118    	; 0x1843c <printer_buffer+0xe0>
   183c6:	20 91 ab 18 	lds	r18, 0x18AB	; 0x8018ab <plot+0xb>
   183ca:	30 91 ac 18 	lds	r19, 0x18AC	; 0x8018ac <plot+0xc>
   183ce:	80 91 a4 18 	lds	r24, 0x18A4	; 0x8018a4 <plot+0x4>
   183d2:	90 91 a5 18 	lds	r25, 0x18A5	; 0x8018a5 <plot+0x5>
   183d6:	ac 01       	movw	r20, r24
   183d8:	4f 5f       	subi	r20, 0xFF	; 255
   183da:	5f 4f       	sbci	r21, 0xFF	; 255
   183dc:	50 93 a5 18 	sts	0x18A5, r21	; 0x8018a5 <plot+0x5>
   183e0:	40 93 a4 18 	sts	0x18A4, r20	; 0x8018a4 <plot+0x4>
   183e4:	f9 01       	movw	r30, r18
   183e6:	e8 0f       	add	r30, r24
   183e8:	f9 1f       	adc	r31, r25
   183ea:	c0 83       	st	Z, r28
   183ec:	80 91 a0 18 	lds	r24, 0x18A0	; 0x8018a0 <plot>
   183f0:	90 91 a1 18 	lds	r25, 0x18A1	; 0x8018a1 <plot+0x1>
   183f4:	a0 91 a2 18 	lds	r26, 0x18A2	; 0x8018a2 <plot+0x2>
   183f8:	b0 91 a3 18 	lds	r27, 0x18A3	; 0x8018a3 <plot+0x3>
   183fc:	01 96       	adiw	r24, 0x01	; 1
   183fe:	a1 1d       	adc	r26, r1
   18400:	b1 1d       	adc	r27, r1
   18402:	80 93 a0 18 	sts	0x18A0, r24	; 0x8018a0 <plot>
   18406:	90 93 a1 18 	sts	0x18A1, r25	; 0x8018a1 <plot+0x1>
   1840a:	a0 93 a2 18 	sts	0x18A2, r26	; 0x8018a2 <plot+0x2>
   1840e:	b0 93 a3 18 	sts	0x18A3, r27	; 0x8018a3 <plot+0x3>
   18412:	20 91 a4 18 	lds	r18, 0x18A4	; 0x8018a4 <plot+0x4>
   18416:	30 91 a5 18 	lds	r19, 0x18A5	; 0x8018a5 <plot+0x5>
   1841a:	80 91 a6 18 	lds	r24, 0x18A6	; 0x8018a6 <plot+0x6>
   1841e:	90 91 a7 18 	lds	r25, 0x18A7	; 0x8018a7 <plot+0x7>
   18422:	28 17       	cp	r18, r24
   18424:	39 07       	cpc	r19, r25
   18426:	54 f0       	brlt	.+20     	; 0x1843c <printer_buffer+0xe0>
   18428:	52 de       	rcall	.-860    	; 0x180ce <receive_plot_flush>
   1842a:	97 ff       	sbrs	r25, 7
   1842c:	03 c0       	rjmp	.+6      	; 0x18434 <printer_buffer+0xd8>
   1842e:	81 e0       	ldi	r24, 0x01	; 1
   18430:	80 93 a8 18 	sts	0x18A8, r24	; 0x8018a8 <plot+0x8>
   18434:	10 92 a5 18 	sts	0x18A5, r1	; 0x8018a5 <plot+0x5>
   18438:	10 92 a4 18 	sts	0x18A4, r1	; 0x8018a4 <plot+0x4>
   1843c:	df 91       	pop	r29
   1843e:	cf 91       	pop	r28
   18440:	08 95       	ret

00018442 <PRINTER_COMMANDS>:
   18442:	cf 93       	push	r28
   18444:	c8 2f       	mov	r28, r24
   18446:	80 91 ec 1d 	lds	r24, 0x1DEC	; 0x801dec <listening>
   1844a:	90 e0       	ldi	r25, 0x00	; 0
   1844c:	0e 94 f8 8c 	call	0x119f0	; 0x119f0 <PRINTER_is_MLA>
   18450:	89 2b       	or	r24, r25
   18452:	49 f0       	breq	.+18     	; 0x18466 <PRINTER_COMMANDS+0x24>
   18454:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   18458:	85 ff       	sbrs	r24, 5
   1845a:	1e c0       	rjmp	.+60     	; 0x18498 <PRINTER_COMMANDS+0x56>
   1845c:	1f 92       	push	r1
   1845e:	cf 93       	push	r28
   18460:	8d e2       	ldi	r24, 0x2D	; 45
   18462:	90 e3       	ldi	r25, 0x30	; 48
   18464:	0f c0       	rjmp	.+30     	; 0x18484 <PRINTER_COMMANDS+0x42>
   18466:	80 91 ea 1d 	lds	r24, 0x1DEA	; 0x801dea <talking>
   1846a:	90 e0       	ldi	r25, 0x00	; 0
   1846c:	0e 94 07 8d 	call	0x11a0e	; 0x11a0e <PRINTER_is_MTA>
   18470:	89 2b       	or	r24, r25
   18472:	91 f0       	breq	.+36     	; 0x18498 <PRINTER_COMMANDS+0x56>
   18474:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   18478:	85 ff       	sbrs	r24, 5
   1847a:	0e c0       	rjmp	.+28     	; 0x18498 <PRINTER_COMMANDS+0x56>
   1847c:	1f 92       	push	r1
   1847e:	cf 93       	push	r28
   18480:	83 e1       	ldi	r24, 0x13	; 19
   18482:	90 e3       	ldi	r25, 0x30	; 48
   18484:	1f 92       	push	r1
   18486:	9f 93       	push	r25
   18488:	8f 93       	push	r24
   1848a:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1848e:	0f 90       	pop	r0
   18490:	0f 90       	pop	r0
   18492:	0f 90       	pop	r0
   18494:	0f 90       	pop	r0
   18496:	0f 90       	pop	r0
   18498:	80 e0       	ldi	r24, 0x00	; 0
   1849a:	90 e0       	ldi	r25, 0x00	; 0
   1849c:	cf 91       	pop	r28
   1849e:	08 95       	ret

000184a0 <lif_help>:
   184a0:	cf 93       	push	r28
   184a2:	df 93       	push	r29
   184a4:	ec 01       	movw	r28, r24
   184a6:	85 ef       	ldi	r24, 0xF5	; 245
   184a8:	94 e4       	ldi	r25, 0x44	; 68
   184aa:	1f 92       	push	r1
   184ac:	9f 93       	push	r25
   184ae:	8f 93       	push	r24
   184b0:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   184b4:	0f 90       	pop	r0
   184b6:	0f 90       	pop	r0
   184b8:	0f 90       	pop	r0
   184ba:	cd 2b       	or	r28, r29
   184bc:	51 f0       	breq	.+20     	; 0x184d2 <lif_help+0x32>
   184be:	8c e2       	ldi	r24, 0x2C	; 44
   184c0:	93 e4       	ldi	r25, 0x43	; 67
   184c2:	1f 92       	push	r1
   184c4:	9f 93       	push	r25
   184c6:	8f 93       	push	r24
   184c8:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   184cc:	0f 90       	pop	r0
   184ce:	0f 90       	pop	r0
   184d0:	0f 90       	pop	r0
   184d2:	df 91       	pop	r29
   184d4:	cf 91       	pop	r28
   184d6:	08 95       	ret

000184d8 <lif_calloc>:
   184d8:	ef 92       	push	r14
   184da:	ff 92       	push	r15
   184dc:	0f 93       	push	r16
   184de:	1f 93       	push	r17
   184e0:	cf 93       	push	r28
   184e2:	df 93       	push	r29
   184e4:	16 2f       	mov	r17, r22
   184e6:	07 2f       	mov	r16, r23
   184e8:	f8 2e       	mov	r15, r24
   184ea:	e9 2e       	mov	r14, r25
   184ec:	61 e0       	ldi	r22, 0x01	; 1
   184ee:	70 e0       	ldi	r23, 0x00	; 0
   184f0:	81 2f       	mov	r24, r17
   184f2:	90 2f       	mov	r25, r16
   184f4:	0e 94 86 29 	call	0x530c	; 0x530c <safecalloc>
   184f8:	ec 01       	movw	r28, r24
   184fa:	89 2b       	or	r24, r25
   184fc:	99 f4       	brne	.+38     	; 0x18524 <lif_calloc+0x4c>
   184fe:	ef 92       	push	r14
   18500:	ff 92       	push	r15
   18502:	0f 93       	push	r16
   18504:	1f 93       	push	r17
   18506:	82 ee       	ldi	r24, 0xE2	; 226
   18508:	92 e4       	ldi	r25, 0x42	; 66
   1850a:	1f 92       	push	r1
   1850c:	9f 93       	push	r25
   1850e:	8f 93       	push	r24
   18510:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   18514:	8d b7       	in	r24, 0x3d	; 61
   18516:	9e b7       	in	r25, 0x3e	; 62
   18518:	07 96       	adiw	r24, 0x07	; 7
   1851a:	0f b6       	in	r0, 0x3f	; 63
   1851c:	f8 94       	cli
   1851e:	9e bf       	out	0x3e, r25	; 62
   18520:	0f be       	out	0x3f, r0	; 63
   18522:	8d bf       	out	0x3d, r24	; 61
   18524:	ce 01       	movw	r24, r28
   18526:	cd b7       	in	r28, 0x3d	; 61
   18528:	de b7       	in	r29, 0x3e	; 62
   1852a:	e6 e0       	ldi	r30, 0x06	; 6
   1852c:	0c 94 08 e6 	jmp	0x1cc10	; 0x1cc10 <__epilogue_restores__+0x18>

00018530 <lif_free>:
   18530:	00 97       	sbiw	r24, 0x00	; 0
   18532:	59 f4       	brne	.+22     	; 0x1854a <lif_free+0x1a>
   18534:	8a ec       	ldi	r24, 0xCA	; 202
   18536:	92 e4       	ldi	r25, 0x42	; 66
   18538:	1f 92       	push	r1
   1853a:	9f 93       	push	r25
   1853c:	8f 93       	push	r24
   1853e:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   18542:	0f 90       	pop	r0
   18544:	0f 90       	pop	r0
   18546:	0f 90       	pop	r0
   18548:	08 95       	ret
   1854a:	0c 94 cf 29 	jmp	0x539e	; 0x539e <safefree>
   1854e:	08 95       	ret

00018550 <lif_stralloc>:
   18550:	0f 93       	push	r16
   18552:	1f 93       	push	r17
   18554:	cf 93       	push	r28
   18556:	df 93       	push	r29
   18558:	ec 01       	movw	r28, r24
   1855a:	fc 01       	movw	r30, r24
   1855c:	01 90       	ld	r0, Z+
   1855e:	00 20       	and	r0, r0
   18560:	e9 f7       	brne	.-6      	; 0x1855c <lif_stralloc+0xc>
   18562:	bf 01       	movw	r22, r30
   18564:	68 1b       	sub	r22, r24
   18566:	79 0b       	sbc	r23, r25
   18568:	6d 5f       	subi	r22, 0xFD	; 253
   1856a:	7f 4f       	sbci	r23, 0xFF	; 255
   1856c:	07 2e       	mov	r0, r23
   1856e:	00 0c       	add	r0, r0
   18570:	88 0b       	sbc	r24, r24
   18572:	99 0b       	sbc	r25, r25
   18574:	b1 df       	rcall	.-158    	; 0x184d8 <lif_calloc>
   18576:	8c 01       	movw	r16, r24
   18578:	00 97       	sbiw	r24, 0x00	; 0
   1857a:	19 f0       	breq	.+6      	; 0x18582 <lif_stralloc+0x32>
   1857c:	be 01       	movw	r22, r28
   1857e:	0e 94 53 32 	call	0x64a6	; 0x64a6 <strcpy>
   18582:	c8 01       	movw	r24, r16
   18584:	df 91       	pop	r29
   18586:	cf 91       	pop	r28
   18588:	1f 91       	pop	r17
   1858a:	0f 91       	pop	r16
   1858c:	08 95       	ret

0001858e <lif_open>:
   1858e:	ef 92       	push	r14
   18590:	ff 92       	push	r15
   18592:	0f 93       	push	r16
   18594:	1f 93       	push	r17
   18596:	cf 93       	push	r28
   18598:	df 93       	push	r29
   1859a:	18 2f       	mov	r17, r24
   1859c:	09 2f       	mov	r16, r25
   1859e:	f6 2e       	mov	r15, r22
   185a0:	e7 2e       	mov	r14, r23
   185a2:	0e 94 40 7f 	call	0xfe80	; 0xfe80 <fopen>
   185a6:	ec 01       	movw	r28, r24
   185a8:	89 2b       	or	r24, r25
   185aa:	99 f4       	brne	.+38     	; 0x185d2 <lif_open+0x44>
   185ac:	ef 92       	push	r14
   185ae:	ff 92       	push	r15
   185b0:	0f 93       	push	r16
   185b2:	1f 93       	push	r17
   185b4:	85 ea       	ldi	r24, 0xA5	; 165
   185b6:	92 e4       	ldi	r25, 0x42	; 66
   185b8:	1f 92       	push	r1
   185ba:	9f 93       	push	r25
   185bc:	8f 93       	push	r24
   185be:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   185c2:	8d b7       	in	r24, 0x3d	; 61
   185c4:	9e b7       	in	r25, 0x3e	; 62
   185c6:	07 96       	adiw	r24, 0x07	; 7
   185c8:	0f b6       	in	r0, 0x3f	; 63
   185ca:	f8 94       	cli
   185cc:	9e bf       	out	0x3e, r25	; 62
   185ce:	0f be       	out	0x3f, r0	; 63
   185d0:	8d bf       	out	0x3d, r24	; 61
   185d2:	ce 01       	movw	r24, r28
   185d4:	cd b7       	in	r28, 0x3d	; 61
   185d6:	de b7       	in	r29, 0x3e	; 62
   185d8:	e6 e0       	ldi	r30, 0x06	; 6
   185da:	0c 94 08 e6 	jmp	0x1cc10	; 0x1cc10 <__epilogue_restores__+0x18>

000185de <lif_stat>:
   185de:	0f 93       	push	r16
   185e0:	1f 93       	push	r17
   185e2:	cf 93       	push	r28
   185e4:	df 93       	push	r29
   185e6:	18 2f       	mov	r17, r24
   185e8:	09 2f       	mov	r16, r25
   185ea:	d6 2f       	mov	r29, r22
   185ec:	c7 2f       	mov	r28, r23
   185ee:	0e 94 54 7a 	call	0xf4a8	; 0xf4a8 <stat>
   185f2:	97 ff       	sbrs	r25, 7
   185f4:	11 c0       	rjmp	.+34     	; 0x18618 <lif_stat+0x3a>
   185f6:	0f 93       	push	r16
   185f8:	1f 93       	push	r17
   185fa:	8c e8       	ldi	r24, 0x8C	; 140
   185fc:	92 e4       	ldi	r25, 0x42	; 66
   185fe:	1f 92       	push	r1
   18600:	9f 93       	push	r25
   18602:	8f 93       	push	r24
   18604:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   18608:	0f 90       	pop	r0
   1860a:	0f 90       	pop	r0
   1860c:	0f 90       	pop	r0
   1860e:	0f 90       	pop	r0
   18610:	0f 90       	pop	r0
   18612:	80 e0       	ldi	r24, 0x00	; 0
   18614:	90 e0       	ldi	r25, 0x00	; 0
   18616:	02 c0       	rjmp	.+4      	; 0x1861c <lif_stat+0x3e>
   18618:	8d 2f       	mov	r24, r29
   1861a:	9c 2f       	mov	r25, r28
   1861c:	df 91       	pop	r29
   1861e:	cf 91       	pop	r28
   18620:	1f 91       	pop	r17
   18622:	0f 91       	pop	r16
   18624:	08 95       	ret

00018626 <lif_seek_msg>:
   18626:	a0 e0       	ldi	r26, 0x00	; 0
   18628:	b0 e0       	ldi	r27, 0x00	; 0
   1862a:	e9 e1       	ldi	r30, 0x19	; 25
   1862c:	f3 ec       	ldi	r31, 0xC3	; 195
   1862e:	0c 94 ea e5 	jmp	0x1cbd4	; 0x1cbd4 <__prologue_saves__+0x14>
   18632:	ec 01       	movw	r28, r24
   18634:	6a 01       	movw	r12, r20
   18636:	7b 01       	movw	r14, r22
   18638:	12 2f       	mov	r17, r18
   1863a:	03 2f       	mov	r16, r19
   1863c:	0e 94 80 7b 	call	0xf700	; 0xf700 <ftell>
   18640:	6c 15       	cp	r22, r12
   18642:	7d 05       	cpc	r23, r13
   18644:	8e 05       	cpc	r24, r14
   18646:	9f 05       	cpc	r25, r15
   18648:	19 f4       	brne	.+6      	; 0x18650 <lif_seek_msg+0x2a>
   1864a:	81 e0       	ldi	r24, 0x01	; 1
   1864c:	90 e0       	ldi	r25, 0x00	; 0
   1864e:	20 c0       	rjmp	.+64     	; 0x18690 <lif_seek_msg+0x6a>
   18650:	20 e0       	ldi	r18, 0x00	; 0
   18652:	30 e0       	ldi	r19, 0x00	; 0
   18654:	b7 01       	movw	r22, r14
   18656:	a6 01       	movw	r20, r12
   18658:	ce 01       	movw	r24, r28
   1865a:	0e 94 02 7c 	call	0xf804	; 0xf804 <fseek>
   1865e:	97 ff       	sbrs	r25, 7
   18660:	f4 cf       	rjmp	.-24     	; 0x1864a <lif_seek_msg+0x24>
   18662:	ff 92       	push	r15
   18664:	ef 92       	push	r14
   18666:	df 92       	push	r13
   18668:	cf 92       	push	r12
   1866a:	0f 93       	push	r16
   1866c:	1f 93       	push	r17
   1866e:	8b e6       	ldi	r24, 0x6B	; 107
   18670:	92 e4       	ldi	r25, 0x42	; 66
   18672:	1f 92       	push	r1
   18674:	9f 93       	push	r25
   18676:	8f 93       	push	r24
   18678:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1867c:	8d b7       	in	r24, 0x3d	; 61
   1867e:	9e b7       	in	r25, 0x3e	; 62
   18680:	09 96       	adiw	r24, 0x09	; 9
   18682:	0f b6       	in	r0, 0x3f	; 63
   18684:	f8 94       	cli
   18686:	9e bf       	out	0x3e, r25	; 62
   18688:	0f be       	out	0x3f, r0	; 63
   1868a:	8d bf       	out	0x3d, r24	; 61
   1868c:	80 e0       	ldi	r24, 0x00	; 0
   1868e:	90 e0       	ldi	r25, 0x00	; 0
   18690:	cd b7       	in	r28, 0x3d	; 61
   18692:	de b7       	in	r29, 0x3e	; 62
   18694:	e8 e0       	ldi	r30, 0x08	; 8
   18696:	0c 94 06 e6 	jmp	0x1cc0c	; 0x1cc0c <__epilogue_restores__+0x14>

0001869a <lif_read>:
   1869a:	a0 e0       	ldi	r26, 0x00	; 0
   1869c:	b0 e0       	ldi	r27, 0x00	; 0
   1869e:	e3 e5       	ldi	r30, 0x53	; 83
   186a0:	f3 ec       	ldi	r31, 0xC3	; 195
   186a2:	0c 94 e6 e5 	jmp	0x1cbcc	; 0x1cbcc <__prologue_saves__+0xc>
   186a6:	ec 01       	movw	r28, r24
   186a8:	7b 01       	movw	r14, r22
   186aa:	b2 2e       	mov	r11, r18
   186ac:	a3 2e       	mov	r10, r19
   186ae:	94 2e       	mov	r9, r20
   186b0:	85 2e       	mov	r8, r21
   186b2:	28 81       	ld	r18, Y
   186b4:	39 81       	ldd	r19, Y+1	; 0x01
   186b6:	4b 2d       	mov	r20, r11
   186b8:	5a 2d       	mov	r21, r10
   186ba:	69 2d       	mov	r22, r9
   186bc:	78 2d       	mov	r23, r8
   186be:	8a 81       	ldd	r24, Y+2	; 0x02
   186c0:	9b 81       	ldd	r25, Y+3	; 0x03
   186c2:	b1 df       	rcall	.-158    	; 0x18626 <lif_seek_msg>
   186c4:	89 2b       	or	r24, r25
   186c6:	b9 f1       	breq	.+110    	; 0x18736 <lif_read+0x9c>
   186c8:	2a 81       	ldd	r18, Y+2	; 0x02
   186ca:	3b 81       	ldd	r19, Y+3	; 0x03
   186cc:	a8 01       	movw	r20, r16
   186ce:	61 e0       	ldi	r22, 0x01	; 1
   186d0:	70 e0       	ldi	r23, 0x00	; 0
   186d2:	c7 01       	movw	r24, r14
   186d4:	0e 94 96 7c 	call	0xf92c	; 0xf92c <fread>
   186d8:	6c 01       	movw	r12, r24
   186da:	e1 2c       	mov	r14, r1
   186dc:	f1 2c       	mov	r15, r1
   186de:	b8 01       	movw	r22, r16
   186e0:	01 2e       	mov	r0, r17
   186e2:	00 0c       	add	r0, r0
   186e4:	88 0b       	sbc	r24, r24
   186e6:	99 0b       	sbc	r25, r25
   186e8:	c6 16       	cp	r12, r22
   186ea:	d7 06       	cpc	r13, r23
   186ec:	e8 06       	cpc	r14, r24
   186ee:	f9 06       	cpc	r15, r25
   186f0:	41 f1       	breq	.+80     	; 0x18742 <lif_read+0xa8>
   186f2:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   186f6:	80 ff       	sbrs	r24, 0
   186f8:	22 c0       	rjmp	.+68     	; 0x1873e <lif_read+0xa4>
   186fa:	1f 93       	push	r17
   186fc:	0f 93       	push	r16
   186fe:	1f 92       	push	r1
   18700:	1f 92       	push	r1
   18702:	df 92       	push	r13
   18704:	cf 92       	push	r12
   18706:	8f 92       	push	r8
   18708:	9f 92       	push	r9
   1870a:	af 92       	push	r10
   1870c:	bf 92       	push	r11
   1870e:	89 81       	ldd	r24, Y+1	; 0x01
   18710:	8f 93       	push	r24
   18712:	88 81       	ld	r24, Y
   18714:	8f 93       	push	r24
   18716:	8f e2       	ldi	r24, 0x2F	; 47
   18718:	92 e4       	ldi	r25, 0x42	; 66
   1871a:	1f 92       	push	r1
   1871c:	9f 93       	push	r25
   1871e:	8f 93       	push	r24
   18720:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   18724:	8d b7       	in	r24, 0x3d	; 61
   18726:	9e b7       	in	r25, 0x3e	; 62
   18728:	0f 96       	adiw	r24, 0x0f	; 15
   1872a:	0f b6       	in	r0, 0x3f	; 63
   1872c:	f8 94       	cli
   1872e:	9e bf       	out	0x3e, r25	; 62
   18730:	0f be       	out	0x3f, r0	; 63
   18732:	8d bf       	out	0x3d, r24	; 61
   18734:	04 c0       	rjmp	.+8      	; 0x1873e <lif_read+0xa4>
   18736:	60 e0       	ldi	r22, 0x00	; 0
   18738:	70 e0       	ldi	r23, 0x00	; 0
   1873a:	cb 01       	movw	r24, r22
   1873c:	02 c0       	rjmp	.+4      	; 0x18742 <lif_read+0xa8>
   1873e:	c7 01       	movw	r24, r14
   18740:	b6 01       	movw	r22, r12
   18742:	cd b7       	in	r28, 0x3d	; 61
   18744:	de b7       	in	r29, 0x3e	; 62
   18746:	ec e0       	ldi	r30, 0x0C	; 12
   18748:	0c 94 02 e6 	jmp	0x1cc04	; 0x1cc04 <__epilogue_restores__+0xc>

0001874c <lif_write>:
   1874c:	a0 e0       	ldi	r26, 0x00	; 0
   1874e:	b0 e0       	ldi	r27, 0x00	; 0
   18750:	ec ea       	ldi	r30, 0xAC	; 172
   18752:	f3 ec       	ldi	r31, 0xC3	; 195
   18754:	0c 94 e8 e5 	jmp	0x1cbd0	; 0x1cbd0 <__prologue_saves__+0x10>
   18758:	7c 01       	movw	r14, r24
   1875a:	eb 01       	movw	r28, r22
   1875c:	d2 2e       	mov	r13, r18
   1875e:	c3 2e       	mov	r12, r19
   18760:	b4 2e       	mov	r11, r20
   18762:	a5 2e       	mov	r10, r21
   18764:	fc 01       	movw	r30, r24
   18766:	20 81       	ld	r18, Z
   18768:	31 81       	ldd	r19, Z+1	; 0x01
   1876a:	4d 2d       	mov	r20, r13
   1876c:	5c 2d       	mov	r21, r12
   1876e:	6b 2d       	mov	r22, r11
   18770:	7a 2d       	mov	r23, r10
   18772:	82 81       	ldd	r24, Z+2	; 0x02
   18774:	93 81       	ldd	r25, Z+3	; 0x03
   18776:	57 df       	rcall	.-338    	; 0x18626 <lif_seek_msg>
   18778:	00 97       	sbiw	r24, 0x00	; 0
   1877a:	89 f1       	breq	.+98     	; 0x187de <lif_write+0x92>
   1877c:	f7 01       	movw	r30, r14
   1877e:	22 81       	ldd	r18, Z+2	; 0x02
   18780:	33 81       	ldd	r19, Z+3	; 0x03
   18782:	a8 01       	movw	r20, r16
   18784:	61 e0       	ldi	r22, 0x01	; 1
   18786:	70 e0       	ldi	r23, 0x00	; 0
   18788:	ce 01       	movw	r24, r28
   1878a:	0e 94 68 7d 	call	0xfad0	; 0xfad0 <fwrite>
   1878e:	ec 01       	movw	r28, r24
   18790:	08 17       	cp	r16, r24
   18792:	19 07       	cpc	r17, r25
   18794:	09 f1       	breq	.+66     	; 0x187d8 <lif_write+0x8c>
   18796:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1879a:	80 ff       	sbrs	r24, 0
   1879c:	1f c0       	rjmp	.+62     	; 0x187dc <lif_write+0x90>
   1879e:	1f 93       	push	r17
   187a0:	0f 93       	push	r16
   187a2:	df 93       	push	r29
   187a4:	cf 93       	push	r28
   187a6:	af 92       	push	r10
   187a8:	bf 92       	push	r11
   187aa:	cf 92       	push	r12
   187ac:	df 92       	push	r13
   187ae:	f7 01       	movw	r30, r14
   187b0:	81 81       	ldd	r24, Z+1	; 0x01
   187b2:	8f 93       	push	r24
   187b4:	80 81       	ld	r24, Z
   187b6:	8f 93       	push	r24
   187b8:	82 ef       	ldi	r24, 0xF2	; 242
   187ba:	91 e4       	ldi	r25, 0x41	; 65
   187bc:	1f 92       	push	r1
   187be:	9f 93       	push	r25
   187c0:	8f 93       	push	r24
   187c2:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   187c6:	8d b7       	in	r24, 0x3d	; 61
   187c8:	9e b7       	in	r25, 0x3e	; 62
   187ca:	0d 96       	adiw	r24, 0x0d	; 13
   187cc:	0f b6       	in	r0, 0x3f	; 63
   187ce:	f8 94       	cli
   187d0:	9e bf       	out	0x3e, r25	; 62
   187d2:	0f be       	out	0x3f, r0	; 63
   187d4:	8d bf       	out	0x3d, r24	; 61
   187d6:	02 c0       	rjmp	.+4      	; 0x187dc <lif_write+0x90>
   187d8:	c8 01       	movw	r24, r16
   187da:	01 c0       	rjmp	.+2      	; 0x187de <lif_write+0x92>
   187dc:	ce 01       	movw	r24, r28
   187de:	cd b7       	in	r28, 0x3d	; 61
   187e0:	de b7       	in	r29, 0x3e	; 62
   187e2:	ea e0       	ldi	r30, 0x0A	; 10
   187e4:	0c 94 04 e6 	jmp	0x1cc08	; 0x1cc08 <__epilogue_restores__+0x10>

000187e8 <lif_chars>:
   187e8:	80 32       	cpi	r24, 0x20	; 32
   187ea:	91 05       	cpc	r25, r1
   187ec:	e1 f0       	breq	.+56     	; 0x18826 <lif_chars+0x3e>
   187ee:	9c 01       	movw	r18, r24
   187f0:	21 56       	subi	r18, 0x61	; 97
   187f2:	31 09       	sbc	r19, r1
   187f4:	2a 31       	cpi	r18, 0x1A	; 26
   187f6:	31 05       	cpc	r19, r1
   187f8:	10 f4       	brcc	.+4      	; 0x187fe <lif_chars+0x16>
   187fa:	80 97       	sbiw	r24, 0x20	; 32
   187fc:	08 95       	ret
   187fe:	9c 01       	movw	r18, r24
   18800:	21 54       	subi	r18, 0x41	; 65
   18802:	31 09       	sbc	r19, r1
   18804:	2a 31       	cpi	r18, 0x1A	; 26
   18806:	31 05       	cpc	r19, r1
   18808:	c8 f0       	brcs	.+50     	; 0x1883c <lif_chars+0x54>
   1880a:	16 16       	cp	r1, r22
   1880c:	17 06       	cpc	r1, r23
   1880e:	74 f4       	brge	.+28     	; 0x1882c <lif_chars+0x44>
   18810:	2f 5e       	subi	r18, 0xEF	; 239
   18812:	3f 4f       	sbci	r19, 0xFF	; 255
   18814:	2a 30       	cpi	r18, 0x0A	; 10
   18816:	31 05       	cpc	r19, r1
   18818:	88 f0       	brcs	.+34     	; 0x1883c <lif_chars+0x54>
   1881a:	8f 35       	cpi	r24, 0x5F	; 95
   1881c:	91 05       	cpc	r25, r1
   1881e:	49 f0       	breq	.+18     	; 0x18832 <lif_chars+0x4a>
   18820:	8d 97       	sbiw	r24, 0x2d	; 45
   18822:	21 f4       	brne	.+8      	; 0x1882c <lif_chars+0x44>
   18824:	09 c0       	rjmp	.+18     	; 0x18838 <lif_chars+0x50>
   18826:	80 e2       	ldi	r24, 0x20	; 32
   18828:	90 e0       	ldi	r25, 0x00	; 0
   1882a:	08 95       	ret
   1882c:	80 e0       	ldi	r24, 0x00	; 0
   1882e:	90 e0       	ldi	r25, 0x00	; 0
   18830:	08 95       	ret
   18832:	8f e5       	ldi	r24, 0x5F	; 95
   18834:	90 e0       	ldi	r25, 0x00	; 0
   18836:	08 95       	ret
   18838:	8d e2       	ldi	r24, 0x2D	; 45
   1883a:	90 e0       	ldi	r25, 0x00	; 0
   1883c:	08 95       	ret

0001883e <lif_B2S>:
   1883e:	a0 e0       	ldi	r26, 0x00	; 0
   18840:	b0 e0       	ldi	r27, 0x00	; 0
   18842:	e5 e2       	ldi	r30, 0x25	; 37
   18844:	f4 ec       	ldi	r31, 0xC4	; 196
   18846:	0c 94 e6 e5 	jmp	0x1cbcc	; 0x1cbcc <__prologue_saves__+0xc>
   1884a:	5c 01       	movw	r10, r24
   1884c:	6b 01       	movw	r12, r22
   1884e:	ea 01       	movw	r28, r20
   18850:	4c 01       	movw	r8, r24
   18852:	ee 24       	eor	r14, r14
   18854:	e3 94       	inc	r14
   18856:	f1 2c       	mov	r15, r1
   18858:	00 e0       	ldi	r16, 0x00	; 0
   1885a:	10 e0       	ldi	r17, 0x00	; 0
   1885c:	0c 17       	cp	r16, r28
   1885e:	1d 07       	cpc	r17, r29
   18860:	6c f4       	brge	.+26     	; 0x1887c <lif_B2S+0x3e>
   18862:	f4 01       	movw	r30, r8
   18864:	81 91       	ld	r24, Z+
   18866:	4f 01       	movw	r8, r30
   18868:	b8 01       	movw	r22, r16
   1886a:	90 e0       	ldi	r25, 0x00	; 0
   1886c:	bd df       	rcall	.-134    	; 0x187e8 <lif_chars>
   1886e:	89 2b       	or	r24, r25
   18870:	11 f4       	brne	.+4      	; 0x18876 <lif_B2S+0x38>
   18872:	e1 2c       	mov	r14, r1
   18874:	f1 2c       	mov	r15, r1
   18876:	0f 5f       	subi	r16, 0xFF	; 255
   18878:	1f 4f       	sbci	r17, 0xFF	; 255
   1887a:	f0 cf       	rjmp	.-32     	; 0x1885c <lif_B2S+0x1e>
   1887c:	d6 01       	movw	r26, r12
   1887e:	f5 01       	movw	r30, r10
   18880:	cf 01       	movw	r24, r30
   18882:	8a 19       	sub	r24, r10
   18884:	9b 09       	sbc	r25, r11
   18886:	8c 17       	cp	r24, r28
   18888:	9d 07       	cpc	r25, r29
   1888a:	1c f4       	brge	.+6      	; 0x18892 <lif_B2S+0x54>
   1888c:	81 91       	ld	r24, Z+
   1888e:	8d 93       	st	X+, r24
   18890:	f7 cf       	rjmp	.-18     	; 0x18880 <lif_B2S+0x42>
   18892:	d7 ff       	sbrs	r29, 7
   18894:	02 c0       	rjmp	.+4      	; 0x1889a <lif_B2S+0x5c>
   18896:	c0 e0       	ldi	r28, 0x00	; 0
   18898:	d0 e0       	ldi	r29, 0x00	; 0
   1889a:	cc 0d       	add	r28, r12
   1889c:	dd 1d       	adc	r29, r13
   1889e:	18 82       	st	Y, r1
   188a0:	c6 01       	movw	r24, r12
   188a2:	0e 94 ad 32 	call	0x655a	; 0x655a <trim_tail>
   188a6:	c7 01       	movw	r24, r14
   188a8:	cd b7       	in	r28, 0x3d	; 61
   188aa:	de b7       	in	r29, 0x3e	; 62
   188ac:	ec e0       	ldi	r30, 0x0C	; 12
   188ae:	0c 94 02 e6 	jmp	0x1cc04	; 0x1cc04 <__epilogue_restores__+0xc>

000188b2 <lif_checkname>:
   188b2:	ef 92       	push	r14
   188b4:	ff 92       	push	r15
   188b6:	0f 93       	push	r16
   188b8:	1f 93       	push	r17
   188ba:	cf 93       	push	r28
   188bc:	df 93       	push	r29
   188be:	7c 01       	movw	r14, r24
   188c0:	ec 01       	movw	r28, r24
   188c2:	01 e0       	ldi	r16, 0x01	; 1
   188c4:	10 e0       	ldi	r17, 0x00	; 0
   188c6:	be 01       	movw	r22, r28
   188c8:	6e 19       	sub	r22, r14
   188ca:	7f 09       	sbc	r23, r15
   188cc:	89 91       	ld	r24, Y+
   188ce:	88 23       	and	r24, r24
   188d0:	39 f0       	breq	.+14     	; 0x188e0 <lif_checkname+0x2e>
   188d2:	90 e0       	ldi	r25, 0x00	; 0
   188d4:	89 df       	rcall	.-238    	; 0x187e8 <lif_chars>
   188d6:	89 2b       	or	r24, r25
   188d8:	b1 f7       	brne	.-20     	; 0x188c6 <lif_checkname+0x14>
   188da:	00 e0       	ldi	r16, 0x00	; 0
   188dc:	10 e0       	ldi	r17, 0x00	; 0
   188de:	f3 cf       	rjmp	.-26     	; 0x188c6 <lif_checkname+0x14>
   188e0:	c8 01       	movw	r24, r16
   188e2:	cd b7       	in	r28, 0x3d	; 61
   188e4:	de b7       	in	r29, 0x3e	; 62
   188e6:	e6 e0       	ldi	r30, 0x06	; 6
   188e8:	0c 94 08 e6 	jmp	0x1cc10	; 0x1cc10 <__epilogue_restores__+0x18>

000188ec <lif_S2B>:
   188ec:	fb 01       	movw	r30, r22
   188ee:	dc 01       	movw	r26, r24
   188f0:	20 e0       	ldi	r18, 0x00	; 0
   188f2:	30 e0       	ldi	r19, 0x00	; 0
   188f4:	61 91       	ld	r22, Z+
   188f6:	61 11       	cpse	r22, r1
   188f8:	05 c0       	rjmp	.+10     	; 0x18904 <lif_S2B+0x18>
   188fa:	fc 01       	movw	r30, r24
   188fc:	e2 0f       	add	r30, r18
   188fe:	f3 1f       	adc	r31, r19
   18900:	60 e2       	ldi	r22, 0x20	; 32
   18902:	08 c0       	rjmp	.+16     	; 0x18914 <lif_S2B+0x28>
   18904:	24 17       	cp	r18, r20
   18906:	35 07       	cpc	r19, r21
   18908:	24 f4       	brge	.+8      	; 0x18912 <lif_S2B+0x26>
   1890a:	6d 93       	st	X+, r22
   1890c:	2f 5f       	subi	r18, 0xFF	; 255
   1890e:	3f 4f       	sbci	r19, 0xFF	; 255
   18910:	f1 cf       	rjmp	.-30     	; 0x188f4 <lif_S2B+0x8>
   18912:	08 95       	ret
   18914:	9f 01       	movw	r18, r30
   18916:	28 1b       	sub	r18, r24
   18918:	39 0b       	sbc	r19, r25
   1891a:	24 17       	cp	r18, r20
   1891c:	35 07       	cpc	r19, r21
   1891e:	14 f4       	brge	.+4      	; 0x18924 <lif_S2B+0x38>
   18920:	61 93       	st	Z+, r22
   18922:	f8 cf       	rjmp	.-16     	; 0x18914 <lif_S2B+0x28>
   18924:	08 95       	ret

00018926 <lif_fixname>:
   18926:	a0 e0       	ldi	r26, 0x00	; 0
   18928:	b0 e0       	ldi	r27, 0x00	; 0
   1892a:	e9 e9       	ldi	r30, 0x99	; 153
   1892c:	f4 ec       	ldi	r31, 0xC4	; 196
   1892e:	0c 94 e9 e5 	jmp	0x1cbd2	; 0x1cbd2 <__prologue_saves__+0x12>
   18932:	8c 01       	movw	r16, r24
   18934:	cb 01       	movw	r24, r22
   18936:	7a 01       	movw	r14, r20
   18938:	0e 94 2a 78 	call	0xf054	; 0xf054 <basename>
   1893c:	6c 01       	movw	r12, r24
   1893e:	e8 01       	movw	r28, r16
   18940:	80 e2       	ldi	r24, 0x20	; 32
   18942:	b8 2e       	mov	r11, r24
   18944:	be 01       	movw	r22, r28
   18946:	60 1b       	sub	r22, r16
   18948:	71 0b       	sbc	r23, r17
   1894a:	f6 01       	movw	r30, r12
   1894c:	81 91       	ld	r24, Z+
   1894e:	6f 01       	movw	r12, r30
   18950:	81 11       	cpse	r24, r1
   18952:	02 c0       	rjmp	.+4      	; 0x18958 <lif_fixname+0x32>
   18954:	20 e2       	ldi	r18, 0x20	; 32
   18956:	0e c0       	rjmp	.+28     	; 0x18974 <lif_fixname+0x4e>
   18958:	1e 14       	cp	r1, r14
   1895a:	1f 04       	cpc	r1, r15
   1895c:	dc f7       	brge	.-10     	; 0x18954 <lif_fixname+0x2e>
   1895e:	8e 32       	cpi	r24, 0x2E	; 46
   18960:	c9 f3       	breq	.-14     	; 0x18954 <lif_fixname+0x2e>
   18962:	90 e0       	ldi	r25, 0x00	; 0
   18964:	41 df       	rcall	.-382    	; 0x187e8 <lif_chars>
   18966:	88 23       	and	r24, r24
   18968:	11 f0       	breq	.+4      	; 0x1896e <lif_fixname+0x48>
   1896a:	88 83       	st	Y, r24
   1896c:	01 c0       	rjmp	.+2      	; 0x18970 <lif_fixname+0x4a>
   1896e:	b8 82       	st	Y, r11
   18970:	21 96       	adiw	r28, 0x01	; 1
   18972:	e8 cf       	rjmp	.-48     	; 0x18944 <lif_fixname+0x1e>
   18974:	ce 01       	movw	r24, r28
   18976:	80 1b       	sub	r24, r16
   18978:	91 0b       	sbc	r25, r17
   1897a:	8e 15       	cp	r24, r14
   1897c:	9f 05       	cpc	r25, r15
   1897e:	14 f4       	brge	.+4      	; 0x18984 <lif_fixname+0x5e>
   18980:	29 93       	st	Y+, r18
   18982:	f8 cf       	rjmp	.-16     	; 0x18974 <lif_fixname+0x4e>
   18984:	18 82       	st	Y, r1
   18986:	f8 01       	movw	r30, r16
   18988:	01 90       	ld	r0, Z+
   1898a:	00 20       	and	r0, r0
   1898c:	e9 f7       	brne	.-6      	; 0x18988 <lif_fixname+0x62>
   1898e:	cf 01       	movw	r24, r30
   18990:	01 97       	sbiw	r24, 0x01	; 1
   18992:	80 1b       	sub	r24, r16
   18994:	91 0b       	sbc	r25, r17
   18996:	cd b7       	in	r28, 0x3d	; 61
   18998:	de b7       	in	r29, 0x3e	; 62
   1899a:	e9 e0       	ldi	r30, 0x09	; 9
   1899c:	0c 94 05 e6 	jmp	0x1cc0a	; 0x1cc0a <__epilogue_restores__+0x12>

000189a0 <lif_vol2str>:
   189a0:	ef 92       	push	r14
   189a2:	ff 92       	push	r15
   189a4:	0f 93       	push	r16
   189a6:	1f 93       	push	r17
   189a8:	cf 93       	push	r28
   189aa:	df 93       	push	r29
   189ac:	7c 01       	movw	r14, r24
   189ae:	eb 01       	movw	r28, r22
   189b0:	fc 01       	movw	r30, r24
   189b2:	04 a1       	ldd	r16, Z+36	; 0x24
   189b4:	15 a1       	ldd	r17, Z+37	; 0x25
   189b6:	20 e0       	ldi	r18, 0x00	; 0
   189b8:	30 e0       	ldi	r19, 0x00	; 0
   189ba:	42 e0       	ldi	r20, 0x02	; 2
   189bc:	50 e0       	ldi	r21, 0x00	; 0
   189be:	60 e0       	ldi	r22, 0x00	; 0
   189c0:	70 e0       	ldi	r23, 0x00	; 0
   189c2:	ce 01       	movw	r24, r28
   189c4:	0e 94 86 92 	call	0x1250c	; 0x1250c <V2B_MSB>
   189c8:	b7 01       	movw	r22, r14
   189ca:	6a 5d       	subi	r22, 0xDA	; 218
   189cc:	7f 4f       	sbci	r23, 0xFF	; 255
   189ce:	46 e0       	ldi	r20, 0x06	; 6
   189d0:	50 e0       	ldi	r21, 0x00	; 0
   189d2:	ce 01       	movw	r24, r28
   189d4:	02 96       	adiw	r24, 0x02	; 2
   189d6:	8a df       	rcall	.-236    	; 0x188ec <lif_S2B>
   189d8:	f7 01       	movw	r30, r14
   189da:	05 a5       	ldd	r16, Z+45	; 0x2d
   189dc:	16 a5       	ldd	r17, Z+46	; 0x2e
   189de:	27 a5       	ldd	r18, Z+47	; 0x2f
   189e0:	30 a9       	ldd	r19, Z+48	; 0x30
   189e2:	44 e0       	ldi	r20, 0x04	; 4
   189e4:	50 e0       	ldi	r21, 0x00	; 0
   189e6:	68 e0       	ldi	r22, 0x08	; 8
   189e8:	70 e0       	ldi	r23, 0x00	; 0
   189ea:	ce 01       	movw	r24, r28
   189ec:	0e 94 86 92 	call	0x1250c	; 0x1250c <V2B_MSB>
   189f0:	f7 01       	movw	r30, r14
   189f2:	01 a9       	ldd	r16, Z+49	; 0x31
   189f4:	12 a9       	ldd	r17, Z+50	; 0x32
   189f6:	20 e0       	ldi	r18, 0x00	; 0
   189f8:	30 e0       	ldi	r19, 0x00	; 0
   189fa:	42 e0       	ldi	r20, 0x02	; 2
   189fc:	50 e0       	ldi	r21, 0x00	; 0
   189fe:	6c e0       	ldi	r22, 0x0C	; 12
   18a00:	70 e0       	ldi	r23, 0x00	; 0
   18a02:	ce 01       	movw	r24, r28
   18a04:	0e 94 86 92 	call	0x1250c	; 0x1250c <V2B_MSB>
   18a08:	00 e0       	ldi	r16, 0x00	; 0
   18a0a:	10 e0       	ldi	r17, 0x00	; 0
   18a0c:	98 01       	movw	r18, r16
   18a0e:	42 e0       	ldi	r20, 0x02	; 2
   18a10:	50 e0       	ldi	r21, 0x00	; 0
   18a12:	6e e0       	ldi	r22, 0x0E	; 14
   18a14:	70 e0       	ldi	r23, 0x00	; 0
   18a16:	ce 01       	movw	r24, r28
   18a18:	0e 94 86 92 	call	0x1250c	; 0x1250c <V2B_MSB>
   18a1c:	f7 01       	movw	r30, r14
   18a1e:	05 a9       	ldd	r16, Z+53	; 0x35
   18a20:	16 a9       	ldd	r17, Z+54	; 0x36
   18a22:	27 a9       	ldd	r18, Z+55	; 0x37
   18a24:	30 ad       	ldd	r19, Z+56	; 0x38
   18a26:	44 e0       	ldi	r20, 0x04	; 4
   18a28:	50 e0       	ldi	r21, 0x00	; 0
   18a2a:	60 e1       	ldi	r22, 0x10	; 16
   18a2c:	70 e0       	ldi	r23, 0x00	; 0
   18a2e:	ce 01       	movw	r24, r28
   18a30:	0e 94 86 92 	call	0x1250c	; 0x1250c <V2B_MSB>
   18a34:	f7 01       	movw	r30, r14
   18a36:	01 ad       	ldd	r16, Z+57	; 0x39
   18a38:	12 ad       	ldd	r17, Z+58	; 0x3a
   18a3a:	20 e0       	ldi	r18, 0x00	; 0
   18a3c:	30 e0       	ldi	r19, 0x00	; 0
   18a3e:	42 e0       	ldi	r20, 0x02	; 2
   18a40:	50 e0       	ldi	r21, 0x00	; 0
   18a42:	64 e1       	ldi	r22, 0x14	; 20
   18a44:	70 e0       	ldi	r23, 0x00	; 0
   18a46:	ce 01       	movw	r24, r28
   18a48:	0e 94 86 92 	call	0x1250c	; 0x1250c <V2B_MSB>
   18a4c:	00 e0       	ldi	r16, 0x00	; 0
   18a4e:	10 e0       	ldi	r17, 0x00	; 0
   18a50:	98 01       	movw	r18, r16
   18a52:	42 e0       	ldi	r20, 0x02	; 2
   18a54:	50 e0       	ldi	r21, 0x00	; 0
   18a56:	66 e1       	ldi	r22, 0x16	; 22
   18a58:	70 e0       	ldi	r23, 0x00	; 0
   18a5a:	ce 01       	movw	r24, r28
   18a5c:	0e 94 86 92 	call	0x1250c	; 0x1250c <V2B_MSB>
   18a60:	f7 01       	movw	r30, r14
   18a62:	fd 96       	adiw	r30, 0x3d	; 61
   18a64:	00 81       	ld	r16, Z
   18a66:	11 81       	ldd	r17, Z+1	; 0x01
   18a68:	22 81       	ldd	r18, Z+2	; 0x02
   18a6a:	33 81       	ldd	r19, Z+3	; 0x03
   18a6c:	44 e0       	ldi	r20, 0x04	; 4
   18a6e:	50 e0       	ldi	r21, 0x00	; 0
   18a70:	68 e1       	ldi	r22, 0x18	; 24
   18a72:	70 e0       	ldi	r23, 0x00	; 0
   18a74:	ce 01       	movw	r24, r28
   18a76:	0e 94 86 92 	call	0x1250c	; 0x1250c <V2B_MSB>
   18a7a:	f7 01       	movw	r30, r14
   18a7c:	ef 5b       	subi	r30, 0xBF	; 191
   18a7e:	ff 4f       	sbci	r31, 0xFF	; 255
   18a80:	00 81       	ld	r16, Z
   18a82:	11 81       	ldd	r17, Z+1	; 0x01
   18a84:	22 81       	ldd	r18, Z+2	; 0x02
   18a86:	33 81       	ldd	r19, Z+3	; 0x03
   18a88:	44 e0       	ldi	r20, 0x04	; 4
   18a8a:	50 e0       	ldi	r21, 0x00	; 0
   18a8c:	6c e1       	ldi	r22, 0x1C	; 28
   18a8e:	70 e0       	ldi	r23, 0x00	; 0
   18a90:	ce 01       	movw	r24, r28
   18a92:	0e 94 86 92 	call	0x1250c	; 0x1250c <V2B_MSB>
   18a96:	f7 01       	movw	r30, r14
   18a98:	eb 5b       	subi	r30, 0xBB	; 187
   18a9a:	ff 4f       	sbci	r31, 0xFF	; 255
   18a9c:	00 81       	ld	r16, Z
   18a9e:	11 81       	ldd	r17, Z+1	; 0x01
   18aa0:	22 81       	ldd	r18, Z+2	; 0x02
   18aa2:	33 81       	ldd	r19, Z+3	; 0x03
   18aa4:	44 e0       	ldi	r20, 0x04	; 4
   18aa6:	50 e0       	ldi	r21, 0x00	; 0
   18aa8:	60 e2       	ldi	r22, 0x20	; 32
   18aaa:	70 e0       	ldi	r23, 0x00	; 0
   18aac:	ce 01       	movw	r24, r28
   18aae:	0e 94 86 92 	call	0x1250c	; 0x1250c <V2B_MSB>
   18ab2:	de 01       	movw	r26, r28
   18ab4:	94 96       	adiw	r26, 0x24	; 36
   18ab6:	f7 01       	movw	r30, r14
   18ab8:	e7 5b       	subi	r30, 0xB7	; 183
   18aba:	ff 4f       	sbci	r31, 0xFF	; 255
   18abc:	86 e0       	ldi	r24, 0x06	; 6
   18abe:	01 90       	ld	r0, Z+
   18ac0:	0d 92       	st	X+, r0
   18ac2:	8a 95       	dec	r24
   18ac4:	e1 f7       	brne	.-8      	; 0x18abe <lif_vol2str+0x11e>
   18ac6:	cd b7       	in	r28, 0x3d	; 61
   18ac8:	de b7       	in	r29, 0x3e	; 62
   18aca:	e6 e0       	ldi	r30, 0x06	; 6
   18acc:	0c 94 08 e6 	jmp	0x1cc10	; 0x1cc10 <__epilogue_restores__+0x18>

00018ad0 <lif_str2vol>:
   18ad0:	0f 93       	push	r16
   18ad2:	1f 93       	push	r17
   18ad4:	cf 93       	push	r28
   18ad6:	df 93       	push	r29
   18ad8:	8c 01       	movw	r16, r24
   18ada:	eb 01       	movw	r28, r22
   18adc:	42 e0       	ldi	r20, 0x02	; 2
   18ade:	50 e0       	ldi	r21, 0x00	; 0
   18ae0:	60 e0       	ldi	r22, 0x00	; 0
   18ae2:	70 e0       	ldi	r23, 0x00	; 0
   18ae4:	0e 94 af 92 	call	0x1255e	; 0x1255e <B2V_MSB>
   18ae8:	7d a3       	std	Y+37, r23	; 0x25
   18aea:	6c a3       	std	Y+36, r22	; 0x24
   18aec:	be 01       	movw	r22, r28
   18aee:	6a 5d       	subi	r22, 0xDA	; 218
   18af0:	7f 4f       	sbci	r23, 0xFF	; 255
   18af2:	46 e0       	ldi	r20, 0x06	; 6
   18af4:	50 e0       	ldi	r21, 0x00	; 0
   18af6:	c8 01       	movw	r24, r16
   18af8:	02 96       	adiw	r24, 0x02	; 2
   18afa:	a1 de       	rcall	.-702    	; 0x1883e <lif_B2S>
   18afc:	44 e0       	ldi	r20, 0x04	; 4
   18afe:	50 e0       	ldi	r21, 0x00	; 0
   18b00:	68 e0       	ldi	r22, 0x08	; 8
   18b02:	70 e0       	ldi	r23, 0x00	; 0
   18b04:	c8 01       	movw	r24, r16
   18b06:	0e 94 af 92 	call	0x1255e	; 0x1255e <B2V_MSB>
   18b0a:	6d a7       	std	Y+45, r22	; 0x2d
   18b0c:	7e a7       	std	Y+46, r23	; 0x2e
   18b0e:	8f a7       	std	Y+47, r24	; 0x2f
   18b10:	98 ab       	std	Y+48, r25	; 0x30
   18b12:	42 e0       	ldi	r20, 0x02	; 2
   18b14:	50 e0       	ldi	r21, 0x00	; 0
   18b16:	6c e0       	ldi	r22, 0x0C	; 12
   18b18:	70 e0       	ldi	r23, 0x00	; 0
   18b1a:	c8 01       	movw	r24, r16
   18b1c:	0e 94 af 92 	call	0x1255e	; 0x1255e <B2V_MSB>
   18b20:	7a ab       	std	Y+50, r23	; 0x32
   18b22:	69 ab       	std	Y+49, r22	; 0x31
   18b24:	42 e0       	ldi	r20, 0x02	; 2
   18b26:	50 e0       	ldi	r21, 0x00	; 0
   18b28:	6e e0       	ldi	r22, 0x0E	; 14
   18b2a:	70 e0       	ldi	r23, 0x00	; 0
   18b2c:	c8 01       	movw	r24, r16
   18b2e:	0e 94 af 92 	call	0x1255e	; 0x1255e <B2V_MSB>
   18b32:	7c ab       	std	Y+52, r23	; 0x34
   18b34:	6b ab       	std	Y+51, r22	; 0x33
   18b36:	44 e0       	ldi	r20, 0x04	; 4
   18b38:	50 e0       	ldi	r21, 0x00	; 0
   18b3a:	60 e1       	ldi	r22, 0x10	; 16
   18b3c:	70 e0       	ldi	r23, 0x00	; 0
   18b3e:	c8 01       	movw	r24, r16
   18b40:	0e 94 af 92 	call	0x1255e	; 0x1255e <B2V_MSB>
   18b44:	6d ab       	std	Y+53, r22	; 0x35
   18b46:	7e ab       	std	Y+54, r23	; 0x36
   18b48:	8f ab       	std	Y+55, r24	; 0x37
   18b4a:	98 af       	std	Y+56, r25	; 0x38
   18b4c:	42 e0       	ldi	r20, 0x02	; 2
   18b4e:	50 e0       	ldi	r21, 0x00	; 0
   18b50:	64 e1       	ldi	r22, 0x14	; 20
   18b52:	70 e0       	ldi	r23, 0x00	; 0
   18b54:	c8 01       	movw	r24, r16
   18b56:	0e 94 af 92 	call	0x1255e	; 0x1255e <B2V_MSB>
   18b5a:	7a af       	std	Y+58, r23	; 0x3a
   18b5c:	69 af       	std	Y+57, r22	; 0x39
   18b5e:	42 e0       	ldi	r20, 0x02	; 2
   18b60:	50 e0       	ldi	r21, 0x00	; 0
   18b62:	66 e1       	ldi	r22, 0x16	; 22
   18b64:	70 e0       	ldi	r23, 0x00	; 0
   18b66:	c8 01       	movw	r24, r16
   18b68:	0e 94 af 92 	call	0x1255e	; 0x1255e <B2V_MSB>
   18b6c:	7c af       	std	Y+60, r23	; 0x3c
   18b6e:	6b af       	std	Y+59, r22	; 0x3b
   18b70:	44 e0       	ldi	r20, 0x04	; 4
   18b72:	50 e0       	ldi	r21, 0x00	; 0
   18b74:	68 e1       	ldi	r22, 0x18	; 24
   18b76:	70 e0       	ldi	r23, 0x00	; 0
   18b78:	c8 01       	movw	r24, r16
   18b7a:	0e 94 af 92 	call	0x1255e	; 0x1255e <B2V_MSB>
   18b7e:	fe 01       	movw	r30, r28
   18b80:	fd 96       	adiw	r30, 0x3d	; 61
   18b82:	60 83       	st	Z, r22
   18b84:	71 83       	std	Z+1, r23	; 0x01
   18b86:	82 83       	std	Z+2, r24	; 0x02
   18b88:	93 83       	std	Z+3, r25	; 0x03
   18b8a:	44 e0       	ldi	r20, 0x04	; 4
   18b8c:	50 e0       	ldi	r21, 0x00	; 0
   18b8e:	6c e1       	ldi	r22, 0x1C	; 28
   18b90:	70 e0       	ldi	r23, 0x00	; 0
   18b92:	c8 01       	movw	r24, r16
   18b94:	0e 94 af 92 	call	0x1255e	; 0x1255e <B2V_MSB>
   18b98:	fe 01       	movw	r30, r28
   18b9a:	ef 5b       	subi	r30, 0xBF	; 191
   18b9c:	ff 4f       	sbci	r31, 0xFF	; 255
   18b9e:	60 83       	st	Z, r22
   18ba0:	71 83       	std	Z+1, r23	; 0x01
   18ba2:	82 83       	std	Z+2, r24	; 0x02
   18ba4:	93 83       	std	Z+3, r25	; 0x03
   18ba6:	44 e0       	ldi	r20, 0x04	; 4
   18ba8:	50 e0       	ldi	r21, 0x00	; 0
   18baa:	60 e2       	ldi	r22, 0x20	; 32
   18bac:	70 e0       	ldi	r23, 0x00	; 0
   18bae:	c8 01       	movw	r24, r16
   18bb0:	0e 94 af 92 	call	0x1255e	; 0x1255e <B2V_MSB>
   18bb4:	fe 01       	movw	r30, r28
   18bb6:	eb 5b       	subi	r30, 0xBB	; 187
   18bb8:	ff 4f       	sbci	r31, 0xFF	; 255
   18bba:	60 83       	st	Z, r22
   18bbc:	71 83       	std	Z+1, r23	; 0x01
   18bbe:	82 83       	std	Z+2, r24	; 0x02
   18bc0:	93 83       	std	Z+3, r25	; 0x03
   18bc2:	de 01       	movw	r26, r28
   18bc4:	a7 5b       	subi	r26, 0xB7	; 183
   18bc6:	bf 4f       	sbci	r27, 0xFF	; 255
   18bc8:	f8 01       	movw	r30, r16
   18bca:	b4 96       	adiw	r30, 0x24	; 36
   18bcc:	86 e0       	ldi	r24, 0x06	; 6
   18bce:	01 90       	ld	r0, Z+
   18bd0:	0d 92       	st	X+, r0
   18bd2:	8a 95       	dec	r24
   18bd4:	e1 f7       	brne	.-8      	; 0x18bce <lif_str2vol+0xfe>
   18bd6:	df 91       	pop	r29
   18bd8:	cf 91       	pop	r28
   18bda:	1f 91       	pop	r17
   18bdc:	0f 91       	pop	r16
   18bde:	08 95       	ret

00018be0 <lif_dir2str>:
   18be0:	ef 92       	push	r14
   18be2:	ff 92       	push	r15
   18be4:	0f 93       	push	r16
   18be6:	1f 93       	push	r17
   18be8:	cf 93       	push	r28
   18bea:	df 93       	push	r29
   18bec:	ec 01       	movw	r28, r24
   18bee:	7b 01       	movw	r14, r22
   18bf0:	bc 01       	movw	r22, r24
   18bf2:	61 5b       	subi	r22, 0xB1	; 177
   18bf4:	7f 4f       	sbci	r23, 0xFF	; 255
   18bf6:	4a e0       	ldi	r20, 0x0A	; 10
   18bf8:	50 e0       	ldi	r21, 0x00	; 0
   18bfa:	c7 01       	movw	r24, r14
   18bfc:	77 de       	rcall	.-786    	; 0x188ec <lif_S2B>
   18bfe:	fe 01       	movw	r30, r28
   18c00:	e6 5a       	subi	r30, 0xA6	; 166
   18c02:	ff 4f       	sbci	r31, 0xFF	; 255
   18c04:	00 81       	ld	r16, Z
   18c06:	11 81       	ldd	r17, Z+1	; 0x01
   18c08:	20 e0       	ldi	r18, 0x00	; 0
   18c0a:	30 e0       	ldi	r19, 0x00	; 0
   18c0c:	42 e0       	ldi	r20, 0x02	; 2
   18c0e:	50 e0       	ldi	r21, 0x00	; 0
   18c10:	6a e0       	ldi	r22, 0x0A	; 10
   18c12:	70 e0       	ldi	r23, 0x00	; 0
   18c14:	c7 01       	movw	r24, r14
   18c16:	0e 94 86 92 	call	0x1250c	; 0x1250c <V2B_MSB>
   18c1a:	fe 01       	movw	r30, r28
   18c1c:	e4 5a       	subi	r30, 0xA4	; 164
   18c1e:	ff 4f       	sbci	r31, 0xFF	; 255
   18c20:	00 81       	ld	r16, Z
   18c22:	11 81       	ldd	r17, Z+1	; 0x01
   18c24:	22 81       	ldd	r18, Z+2	; 0x02
   18c26:	33 81       	ldd	r19, Z+3	; 0x03
   18c28:	44 e0       	ldi	r20, 0x04	; 4
   18c2a:	50 e0       	ldi	r21, 0x00	; 0
   18c2c:	6c e0       	ldi	r22, 0x0C	; 12
   18c2e:	70 e0       	ldi	r23, 0x00	; 0
   18c30:	c7 01       	movw	r24, r14
   18c32:	0e 94 86 92 	call	0x1250c	; 0x1250c <V2B_MSB>
   18c36:	fe 01       	movw	r30, r28
   18c38:	e0 5a       	subi	r30, 0xA0	; 160
   18c3a:	ff 4f       	sbci	r31, 0xFF	; 255
   18c3c:	00 81       	ld	r16, Z
   18c3e:	11 81       	ldd	r17, Z+1	; 0x01
   18c40:	22 81       	ldd	r18, Z+2	; 0x02
   18c42:	33 81       	ldd	r19, Z+3	; 0x03
   18c44:	44 e0       	ldi	r20, 0x04	; 4
   18c46:	50 e0       	ldi	r21, 0x00	; 0
   18c48:	60 e1       	ldi	r22, 0x10	; 16
   18c4a:	70 e0       	ldi	r23, 0x00	; 0
   18c4c:	c7 01       	movw	r24, r14
   18c4e:	0e 94 86 92 	call	0x1250c	; 0x1250c <V2B_MSB>
   18c52:	d7 01       	movw	r26, r14
   18c54:	54 96       	adiw	r26, 0x14	; 20
   18c56:	fe 01       	movw	r30, r28
   18c58:	ec 59       	subi	r30, 0x9C	; 156
   18c5a:	ff 4f       	sbci	r31, 0xFF	; 255
   18c5c:	86 e0       	ldi	r24, 0x06	; 6
   18c5e:	01 90       	ld	r0, Z+
   18c60:	0d 92       	st	X+, r0
   18c62:	8a 95       	dec	r24
   18c64:	e1 f7       	brne	.-8      	; 0x18c5e <lif_dir2str+0x7e>
   18c66:	fe 01       	movw	r30, r28
   18c68:	e6 59       	subi	r30, 0x96	; 150
   18c6a:	ff 4f       	sbci	r31, 0xFF	; 255
   18c6c:	00 81       	ld	r16, Z
   18c6e:	11 81       	ldd	r17, Z+1	; 0x01
   18c70:	20 e0       	ldi	r18, 0x00	; 0
   18c72:	30 e0       	ldi	r19, 0x00	; 0
   18c74:	42 e0       	ldi	r20, 0x02	; 2
   18c76:	50 e0       	ldi	r21, 0x00	; 0
   18c78:	6a e1       	ldi	r22, 0x1A	; 26
   18c7a:	70 e0       	ldi	r23, 0x00	; 0
   18c7c:	c7 01       	movw	r24, r14
   18c7e:	0e 94 86 92 	call	0x1250c	; 0x1250c <V2B_MSB>
   18c82:	fe 01       	movw	r30, r28
   18c84:	e4 59       	subi	r30, 0x94	; 148
   18c86:	ff 4f       	sbci	r31, 0xFF	; 255
   18c88:	00 81       	ld	r16, Z
   18c8a:	11 81       	ldd	r17, Z+1	; 0x01
   18c8c:	20 e0       	ldi	r18, 0x00	; 0
   18c8e:	30 e0       	ldi	r19, 0x00	; 0
   18c90:	42 e0       	ldi	r20, 0x02	; 2
   18c92:	50 e0       	ldi	r21, 0x00	; 0
   18c94:	6c e1       	ldi	r22, 0x1C	; 28
   18c96:	70 e0       	ldi	r23, 0x00	; 0
   18c98:	c7 01       	movw	r24, r14
   18c9a:	0e 94 9a 92 	call	0x12534	; 0x12534 <V2B_LSB>
   18c9e:	c2 59       	subi	r28, 0x92	; 146
   18ca0:	df 4f       	sbci	r29, 0xFF	; 255
   18ca2:	08 81       	ld	r16, Y
   18ca4:	19 81       	ldd	r17, Y+1	; 0x01
   18ca6:	20 e0       	ldi	r18, 0x00	; 0
   18ca8:	30 e0       	ldi	r19, 0x00	; 0
   18caa:	42 e0       	ldi	r20, 0x02	; 2
   18cac:	50 e0       	ldi	r21, 0x00	; 0
   18cae:	6e e1       	ldi	r22, 0x1E	; 30
   18cb0:	70 e0       	ldi	r23, 0x00	; 0
   18cb2:	c7 01       	movw	r24, r14
   18cb4:	0e 94 9a 92 	call	0x12534	; 0x12534 <V2B_LSB>
   18cb8:	cd b7       	in	r28, 0x3d	; 61
   18cba:	de b7       	in	r29, 0x3e	; 62
   18cbc:	e6 e0       	ldi	r30, 0x06	; 6
   18cbe:	0c 94 08 e6 	jmp	0x1cc10	; 0x1cc10 <__epilogue_restores__+0x18>

00018cc2 <lif_str2dir>:
   18cc2:	0f 93       	push	r16
   18cc4:	1f 93       	push	r17
   18cc6:	cf 93       	push	r28
   18cc8:	df 93       	push	r29
   18cca:	8c 01       	movw	r16, r24
   18ccc:	eb 01       	movw	r28, r22
   18cce:	61 5b       	subi	r22, 0xB1	; 177
   18cd0:	7f 4f       	sbci	r23, 0xFF	; 255
   18cd2:	4a e0       	ldi	r20, 0x0A	; 10
   18cd4:	50 e0       	ldi	r21, 0x00	; 0
   18cd6:	b3 dd       	rcall	.-1178   	; 0x1883e <lif_B2S>
   18cd8:	42 e0       	ldi	r20, 0x02	; 2
   18cda:	50 e0       	ldi	r21, 0x00	; 0
   18cdc:	6a e0       	ldi	r22, 0x0A	; 10
   18cde:	70 e0       	ldi	r23, 0x00	; 0
   18ce0:	c8 01       	movw	r24, r16
   18ce2:	0e 94 af 92 	call	0x1255e	; 0x1255e <B2V_MSB>
   18ce6:	fe 01       	movw	r30, r28
   18ce8:	e6 5a       	subi	r30, 0xA6	; 166
   18cea:	ff 4f       	sbci	r31, 0xFF	; 255
   18cec:	71 83       	std	Z+1, r23	; 0x01
   18cee:	60 83       	st	Z, r22
   18cf0:	44 e0       	ldi	r20, 0x04	; 4
   18cf2:	50 e0       	ldi	r21, 0x00	; 0
   18cf4:	6c e0       	ldi	r22, 0x0C	; 12
   18cf6:	70 e0       	ldi	r23, 0x00	; 0
   18cf8:	c8 01       	movw	r24, r16
   18cfa:	0e 94 af 92 	call	0x1255e	; 0x1255e <B2V_MSB>
   18cfe:	fe 01       	movw	r30, r28
   18d00:	e4 5a       	subi	r30, 0xA4	; 164
   18d02:	ff 4f       	sbci	r31, 0xFF	; 255
   18d04:	60 83       	st	Z, r22
   18d06:	71 83       	std	Z+1, r23	; 0x01
   18d08:	82 83       	std	Z+2, r24	; 0x02
   18d0a:	93 83       	std	Z+3, r25	; 0x03
   18d0c:	44 e0       	ldi	r20, 0x04	; 4
   18d0e:	50 e0       	ldi	r21, 0x00	; 0
   18d10:	60 e1       	ldi	r22, 0x10	; 16
   18d12:	70 e0       	ldi	r23, 0x00	; 0
   18d14:	c8 01       	movw	r24, r16
   18d16:	0e 94 af 92 	call	0x1255e	; 0x1255e <B2V_MSB>
   18d1a:	fe 01       	movw	r30, r28
   18d1c:	e0 5a       	subi	r30, 0xA0	; 160
   18d1e:	ff 4f       	sbci	r31, 0xFF	; 255
   18d20:	60 83       	st	Z, r22
   18d22:	71 83       	std	Z+1, r23	; 0x01
   18d24:	82 83       	std	Z+2, r24	; 0x02
   18d26:	93 83       	std	Z+3, r25	; 0x03
   18d28:	de 01       	movw	r26, r28
   18d2a:	ac 59       	subi	r26, 0x9C	; 156
   18d2c:	bf 4f       	sbci	r27, 0xFF	; 255
   18d2e:	f8 01       	movw	r30, r16
   18d30:	74 96       	adiw	r30, 0x14	; 20
   18d32:	86 e0       	ldi	r24, 0x06	; 6
   18d34:	01 90       	ld	r0, Z+
   18d36:	0d 92       	st	X+, r0
   18d38:	8a 95       	dec	r24
   18d3a:	e1 f7       	brne	.-8      	; 0x18d34 <lif_str2dir+0x72>
   18d3c:	42 e0       	ldi	r20, 0x02	; 2
   18d3e:	50 e0       	ldi	r21, 0x00	; 0
   18d40:	6a e1       	ldi	r22, 0x1A	; 26
   18d42:	70 e0       	ldi	r23, 0x00	; 0
   18d44:	c8 01       	movw	r24, r16
   18d46:	0e 94 af 92 	call	0x1255e	; 0x1255e <B2V_MSB>
   18d4a:	fe 01       	movw	r30, r28
   18d4c:	e6 59       	subi	r30, 0x96	; 150
   18d4e:	ff 4f       	sbci	r31, 0xFF	; 255
   18d50:	71 83       	std	Z+1, r23	; 0x01
   18d52:	60 83       	st	Z, r22
   18d54:	42 e0       	ldi	r20, 0x02	; 2
   18d56:	50 e0       	ldi	r21, 0x00	; 0
   18d58:	6c e1       	ldi	r22, 0x1C	; 28
   18d5a:	70 e0       	ldi	r23, 0x00	; 0
   18d5c:	c8 01       	movw	r24, r16
   18d5e:	0e 94 ce 92 	call	0x1259c	; 0x1259c <B2V_LSB>
   18d62:	fe 01       	movw	r30, r28
   18d64:	e4 59       	subi	r30, 0x94	; 148
   18d66:	ff 4f       	sbci	r31, 0xFF	; 255
   18d68:	71 83       	std	Z+1, r23	; 0x01
   18d6a:	60 83       	st	Z, r22
   18d6c:	42 e0       	ldi	r20, 0x02	; 2
   18d6e:	50 e0       	ldi	r21, 0x00	; 0
   18d70:	6e e1       	ldi	r22, 0x1E	; 30
   18d72:	70 e0       	ldi	r23, 0x00	; 0
   18d74:	c8 01       	movw	r24, r16
   18d76:	0e 94 ce 92 	call	0x1259c	; 0x1259c <B2V_LSB>
   18d7a:	c2 59       	subi	r28, 0x92	; 146
   18d7c:	df 4f       	sbci	r29, 0xFF	; 255
   18d7e:	79 83       	std	Y+1, r23	; 0x01
   18d80:	68 83       	st	Y, r22
   18d82:	df 91       	pop	r29
   18d84:	cf 91       	pop	r28
   18d86:	1f 91       	pop	r17
   18d88:	0f 91       	pop	r16
   18d8a:	08 95       	ret

00018d8c <lif_BIN2BCD>:
   18d8c:	6a e0       	ldi	r22, 0x0A	; 10
   18d8e:	0e 94 2b e5 	call	0x1ca56	; 0x1ca56 <__udivmodqi4>
   18d92:	82 95       	swap	r24
   18d94:	80 7f       	andi	r24, 0xF0	; 240
   18d96:	89 2b       	or	r24, r25
   18d98:	08 95       	ret

00018d9a <lif_BCD2BIN>:
   18d9a:	28 2f       	mov	r18, r24
   18d9c:	22 95       	swap	r18
   18d9e:	2f 70       	andi	r18, 0x0F	; 15
   18da0:	8f 70       	andi	r24, 0x0F	; 15
   18da2:	90 e0       	ldi	r25, 0x00	; 0
   18da4:	3a e0       	ldi	r19, 0x0A	; 10
   18da6:	23 9f       	mul	r18, r19
   18da8:	80 0d       	add	r24, r0
   18daa:	91 1d       	adc	r25, r1
   18dac:	11 24       	eor	r1, r1
   18dae:	08 95       	ret

00018db0 <lif_time2lifbcd>:
   18db0:	aa e1       	ldi	r26, 0x1A	; 26
   18db2:	b0 e0       	ldi	r27, 0x00	; 0
   18db4:	ee ed       	ldi	r30, 0xDE	; 222
   18db6:	f6 ec       	ldi	r31, 0xC6	; 198
   18db8:	0c 94 ee e5 	jmp	0x1cbdc	; 0x1cbdc <__prologue_saves__+0x1c>
   18dbc:	8b 01       	movw	r16, r22
   18dbe:	9c 01       	movw	r18, r24
   18dc0:	6f 8b       	std	Y+23, r22	; 0x17
   18dc2:	78 8f       	std	Y+24, r23	; 0x18
   18dc4:	89 8f       	std	Y+25, r24	; 0x19
   18dc6:	9a 8f       	std	Y+26, r25	; 0x1a
   18dc8:	67 2b       	or	r22, r23
   18dca:	68 2b       	or	r22, r24
   18dcc:	69 2b       	or	r22, r25
   18dce:	41 f4       	brne	.+16     	; 0x18de0 <lif_time2lifbcd+0x30>
   18dd0:	fa 01       	movw	r30, r20
   18dd2:	ca 01       	movw	r24, r20
   18dd4:	06 96       	adiw	r24, 0x06	; 6
   18dd6:	11 92       	st	Z+, r1
   18dd8:	e8 17       	cp	r30, r24
   18dda:	f9 07       	cpc	r31, r25
   18ddc:	e1 f7       	brne	.-8      	; 0x18dd6 <lif_time2lifbcd+0x26>
   18dde:	26 c0       	rjmp	.+76     	; 0x18e2c <lif_time2lifbcd+0x7c>
   18de0:	8a 01       	movw	r16, r20
   18de2:	be 01       	movw	r22, r28
   18de4:	6f 5f       	subi	r22, 0xFF	; 255
   18de6:	7f 4f       	sbci	r23, 0xFF	; 255
   18de8:	ce 01       	movw	r24, r28
   18dea:	47 96       	adiw	r24, 0x17	; 23
   18dec:	0e 94 a7 38 	call	0x714e	; 0x714e <gmtime_r>
   18df0:	8b 85       	ldd	r24, Y+11	; 0x0b
   18df2:	9c 85       	ldd	r25, Y+12	; 0x0c
   18df4:	64 e6       	ldi	r22, 0x64	; 100
   18df6:	70 e0       	ldi	r23, 0x00	; 0
   18df8:	0e 94 4b e5 	call	0x1ca96	; 0x1ca96 <__divmodhi4>
   18dfc:	c7 df       	rcall	.-114    	; 0x18d8c <lif_BIN2BCD>
   18dfe:	f8 01       	movw	r30, r16
   18e00:	80 83       	st	Z, r24
   18e02:	89 85       	ldd	r24, Y+9	; 0x09
   18e04:	8f 5f       	subi	r24, 0xFF	; 255
   18e06:	c2 df       	rcall	.-124    	; 0x18d8c <lif_BIN2BCD>
   18e08:	f8 01       	movw	r30, r16
   18e0a:	81 83       	std	Z+1, r24	; 0x01
   18e0c:	8f 81       	ldd	r24, Y+7	; 0x07
   18e0e:	be df       	rcall	.-132    	; 0x18d8c <lif_BIN2BCD>
   18e10:	f8 01       	movw	r30, r16
   18e12:	82 83       	std	Z+2, r24	; 0x02
   18e14:	8d 81       	ldd	r24, Y+5	; 0x05
   18e16:	ba df       	rcall	.-140    	; 0x18d8c <lif_BIN2BCD>
   18e18:	f8 01       	movw	r30, r16
   18e1a:	83 83       	std	Z+3, r24	; 0x03
   18e1c:	8b 81       	ldd	r24, Y+3	; 0x03
   18e1e:	b6 df       	rcall	.-148    	; 0x18d8c <lif_BIN2BCD>
   18e20:	f8 01       	movw	r30, r16
   18e22:	84 83       	std	Z+4, r24	; 0x04
   18e24:	89 81       	ldd	r24, Y+1	; 0x01
   18e26:	b2 df       	rcall	.-156    	; 0x18d8c <lif_BIN2BCD>
   18e28:	f8 01       	movw	r30, r16
   18e2a:	85 83       	std	Z+5, r24	; 0x05
   18e2c:	6a 96       	adiw	r28, 0x1a	; 26
   18e2e:	e4 e0       	ldi	r30, 0x04	; 4
   18e30:	0c 94 0a e6 	jmp	0x1cc14	; 0x1cc14 <__epilogue_restores__+0x1c>

00018e34 <lif_lifbcd2time>:
   18e34:	a6 e1       	ldi	r26, 0x16	; 22
   18e36:	b0 e0       	ldi	r27, 0x00	; 0
   18e38:	e0 e2       	ldi	r30, 0x20	; 32
   18e3a:	f7 ec       	ldi	r31, 0xC7	; 199
   18e3c:	0c 94 e8 e5 	jmp	0x1cbd0	; 0x1cbd0 <__prologue_saves__+0x10>
   18e40:	8c 01       	movw	r16, r24
   18e42:	7c 01       	movw	r14, r24
   18e44:	5c 01       	movw	r10, r24
   18e46:	26 e0       	ldi	r18, 0x06	; 6
   18e48:	a2 0e       	add	r10, r18
   18e4a:	b1 1c       	adc	r11, r1
   18e4c:	cc 24       	eor	r12, r12
   18e4e:	c3 94       	inc	r12
   18e50:	d1 2c       	mov	r13, r1
   18e52:	f7 01       	movw	r30, r14
   18e54:	81 91       	ld	r24, Z+
   18e56:	7f 01       	movw	r14, r30
   18e58:	a0 df       	rcall	.-192    	; 0x18d9a <lif_BCD2BIN>
   18e5a:	89 2b       	or	r24, r25
   18e5c:	11 f0       	breq	.+4      	; 0x18e62 <lif_lifbcd2time+0x2e>
   18e5e:	c1 2c       	mov	r12, r1
   18e60:	d1 2c       	mov	r13, r1
   18e62:	ea 14       	cp	r14, r10
   18e64:	fb 04       	cpc	r15, r11
   18e66:	a9 f7       	brne	.-22     	; 0x18e52 <lif_lifbcd2time+0x1e>
   18e68:	c1 14       	cp	r12, r1
   18e6a:	d1 04       	cpc	r13, r1
   18e6c:	61 f5       	brne	.+88     	; 0x18ec6 <lif_lifbcd2time+0x92>
   18e6e:	f8 01       	movw	r30, r16
   18e70:	80 81       	ld	r24, Z
   18e72:	93 df       	rcall	.-218    	; 0x18d9a <lif_BCD2BIN>
   18e74:	7c 01       	movw	r14, r24
   18e76:	f8 01       	movw	r30, r16
   18e78:	81 81       	ldd	r24, Z+1	; 0x01
   18e7a:	8f df       	rcall	.-226    	; 0x18d9a <lif_BCD2BIN>
   18e7c:	01 97       	sbiw	r24, 0x01	; 1
   18e7e:	f6 e4       	ldi	r31, 0x46	; 70
   18e80:	ef 16       	cp	r14, r31
   18e82:	f1 04       	cpc	r15, r1
   18e84:	1c f4       	brge	.+6      	; 0x18e8c <lif_lifbcd2time+0x58>
   18e86:	24 e6       	ldi	r18, 0x64	; 100
   18e88:	e2 0e       	add	r14, r18
   18e8a:	f1 1c       	adc	r15, r1
   18e8c:	fc 86       	std	Y+12, r15	; 0x0c
   18e8e:	eb 86       	std	Y+11, r14	; 0x0b
   18e90:	9a 87       	std	Y+10, r25	; 0x0a
   18e92:	89 87       	std	Y+9, r24	; 0x09
   18e94:	f8 01       	movw	r30, r16
   18e96:	82 81       	ldd	r24, Z+2	; 0x02
   18e98:	80 df       	rcall	.-256    	; 0x18d9a <lif_BCD2BIN>
   18e9a:	98 87       	std	Y+8, r25	; 0x08
   18e9c:	8f 83       	std	Y+7, r24	; 0x07
   18e9e:	f8 01       	movw	r30, r16
   18ea0:	83 81       	ldd	r24, Z+3	; 0x03
   18ea2:	7b df       	rcall	.-266    	; 0x18d9a <lif_BCD2BIN>
   18ea4:	9e 83       	std	Y+6, r25	; 0x06
   18ea6:	8d 83       	std	Y+5, r24	; 0x05
   18ea8:	f8 01       	movw	r30, r16
   18eaa:	84 81       	ldd	r24, Z+4	; 0x04
   18eac:	76 df       	rcall	.-276    	; 0x18d9a <lif_BCD2BIN>
   18eae:	9c 83       	std	Y+4, r25	; 0x04
   18eb0:	8b 83       	std	Y+3, r24	; 0x03
   18eb2:	f8 01       	movw	r30, r16
   18eb4:	85 81       	ldd	r24, Z+5	; 0x05
   18eb6:	71 df       	rcall	.-286    	; 0x18d9a <lif_BCD2BIN>
   18eb8:	9a 83       	std	Y+2, r25	; 0x02
   18eba:	89 83       	std	Y+1, r24	; 0x01
   18ebc:	ce 01       	movw	r24, r28
   18ebe:	01 96       	adiw	r24, 0x01	; 1
   18ec0:	0e 94 7c 3b 	call	0x76f8	; 0x76f8 <timegm>
   18ec4:	03 c0       	rjmp	.+6      	; 0x18ecc <lif_lifbcd2time+0x98>
   18ec6:	60 e0       	ldi	r22, 0x00	; 0
   18ec8:	70 e0       	ldi	r23, 0x00	; 0
   18eca:	cb 01       	movw	r24, r22
   18ecc:	66 96       	adiw	r28, 0x16	; 22
   18ece:	ea e0       	ldi	r30, 0x0A	; 10
   18ed0:	0c 94 04 e6 	jmp	0x1cc08	; 0x1cc08 <__epilogue_restores__+0x10>

00018ed4 <lif_ctime_gmt>:
   18ed4:	a6 e1       	ldi	r26, 0x16	; 22
   18ed6:	b0 e0       	ldi	r27, 0x00	; 0
   18ed8:	e0 e7       	ldi	r30, 0x70	; 112
   18eda:	f7 ec       	ldi	r31, 0xC7	; 199
   18edc:	0c 94 ee e5 	jmp	0x1cbdc	; 0x1cbdc <__prologue_saves__+0x1c>
   18ee0:	20 e2       	ldi	r18, 0x20	; 32
   18ee2:	ed ec       	ldi	r30, 0xCD	; 205
   18ee4:	f8 e1       	ldi	r31, 0x18	; 24
   18ee6:	df 01       	movw	r26, r30
   18ee8:	1d 92       	st	X+, r1
   18eea:	2a 95       	dec	r18
   18eec:	e9 f7       	brne	.-6      	; 0x18ee8 <lif_ctime_gmt+0x14>
   18eee:	be 01       	movw	r22, r28
   18ef0:	6f 5f       	subi	r22, 0xFF	; 255
   18ef2:	7f 4f       	sbci	r23, 0xFF	; 255
   18ef4:	0e 94 a7 38 	call	0x714e	; 0x714e <gmtime_r>
   18ef8:	6d ec       	ldi	r22, 0xCD	; 205
   18efa:	78 e1       	ldi	r23, 0x18	; 24
   18efc:	0e 94 d2 3d 	call	0x7ba4	; 0x7ba4 <asctime_r>
   18f00:	8c 01       	movw	r16, r24
   18f02:	0e 94 ad 32 	call	0x655a	; 0x655a <trim_tail>
   18f06:	c8 01       	movw	r24, r16
   18f08:	66 96       	adiw	r28, 0x16	; 22
   18f0a:	e4 e0       	ldi	r30, 0x04	; 4
   18f0c:	0c 94 0a e6 	jmp	0x1cc14	; 0x1cc14 <__epilogue_restores__+0x1c>

00018f10 <lif_lifbcd2timestr>:
   18f10:	a4 e0       	ldi	r26, 0x04	; 4
   18f12:	b0 e0       	ldi	r27, 0x00	; 0
   18f14:	ee e8       	ldi	r30, 0x8E	; 142
   18f16:	f7 ec       	ldi	r31, 0xC7	; 199
   18f18:	0c 94 f0 e5 	jmp	0x1cbe0	; 0x1cbe0 <__prologue_saves__+0x20>
   18f1c:	20 e2       	ldi	r18, 0x20	; 32
   18f1e:	ed ea       	ldi	r30, 0xAD	; 173
   18f20:	f8 e1       	ldi	r31, 0x18	; 24
   18f22:	df 01       	movw	r26, r30
   18f24:	1d 92       	st	X+, r1
   18f26:	2a 95       	dec	r18
   18f28:	e9 f7       	brne	.-6      	; 0x18f24 <lif_lifbcd2timestr+0x14>
   18f2a:	84 df       	rcall	.-248    	; 0x18e34 <lif_lifbcd2time>
   18f2c:	69 83       	std	Y+1, r22	; 0x01
   18f2e:	7a 83       	std	Y+2, r23	; 0x02
   18f30:	8b 83       	std	Y+3, r24	; 0x03
   18f32:	9c 83       	std	Y+4, r25	; 0x04
   18f34:	67 2b       	or	r22, r23
   18f36:	68 2b       	or	r22, r24
   18f38:	69 2b       	or	r22, r25
   18f3a:	29 f0       	breq	.+10     	; 0x18f46 <lif_lifbcd2timestr+0x36>
   18f3c:	ce 01       	movw	r24, r28
   18f3e:	01 96       	adiw	r24, 0x01	; 1
   18f40:	c9 df       	rcall	.-110    	; 0x18ed4 <lif_ctime_gmt>
   18f42:	bc 01       	movw	r22, r24
   18f44:	02 c0       	rjmp	.+4      	; 0x18f4a <lif_lifbcd2timestr+0x3a>
   18f46:	62 e7       	ldi	r22, 0x72	; 114
   18f48:	75 e1       	ldi	r23, 0x15	; 21
   18f4a:	8d ea       	ldi	r24, 0xAD	; 173
   18f4c:	98 e1       	ldi	r25, 0x18	; 24
   18f4e:	0e 94 53 32 	call	0x64a6	; 0x64a6 <strcpy>
   18f52:	8d ea       	ldi	r24, 0xAD	; 173
   18f54:	98 e1       	ldi	r25, 0x18	; 24
   18f56:	24 96       	adiw	r28, 0x04	; 4
   18f58:	e2 e0       	ldi	r30, 0x02	; 2
   18f5a:	0c 94 0c e6 	jmp	0x1cc18	; 0x1cc18 <__epilogue_restores__+0x20>

00018f5e <lif_image_clear>:
   18f5e:	20 e7       	ldi	r18, 0x70	; 112
   18f60:	fc 01       	movw	r30, r24
   18f62:	11 92       	st	Z+, r1
   18f64:	2a 95       	dec	r18
   18f66:	e9 f7       	brne	.-6      	; 0x18f62 <lif_image_clear+0x4>
   18f68:	08 95       	ret

00018f6a <lif_dir_clear>:
   18f6a:	81 5b       	subi	r24, 0xB1	; 177
   18f6c:	9f 4f       	sbci	r25, 0xFF	; 255
   18f6e:	21 e2       	ldi	r18, 0x21	; 33
   18f70:	fc 01       	movw	r30, r24
   18f72:	11 92       	st	Z+, r1
   18f74:	2a 95       	dec	r18
   18f76:	e9 f7       	brne	.-6      	; 0x18f72 <lif_dir_clear+0x8>
   18f78:	08 95       	ret

00018f7a <lif_vol_clear>:
   18f7a:	84 96       	adiw	r24, 0x24	; 36
   18f7c:	2b e2       	ldi	r18, 0x2B	; 43
   18f7e:	fc 01       	movw	r30, r24
   18f80:	11 92       	st	Z+, r1
   18f82:	2a 95       	dec	r18
   18f84:	e9 f7       	brne	.-6      	; 0x18f80 <lif_vol_clear+0x6>
   18f86:	08 95       	ret

00018f88 <lif_dump_vol>:
   18f88:	cf 93       	push	r28
   18f8a:	df 93       	push	r29
   18f8c:	ec 01       	movw	r28, r24
   18f8e:	7f 93       	push	r23
   18f90:	6f 93       	push	r22
   18f92:	8d ee       	ldi	r24, 0xED	; 237
   18f94:	91 e4       	ldi	r25, 0x41	; 65
   18f96:	1f 92       	push	r1
   18f98:	9f 93       	push	r25
   18f9a:	8f 93       	push	r24
   18f9c:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   18fa0:	89 81       	ldd	r24, Y+1	; 0x01
   18fa2:	8f 93       	push	r24
   18fa4:	88 81       	ld	r24, Y
   18fa6:	8f 93       	push	r24
   18fa8:	83 ed       	ldi	r24, 0xD3	; 211
   18faa:	91 e4       	ldi	r25, 0x41	; 65
   18fac:	1f 92       	push	r1
   18fae:	9f 93       	push	r25
   18fb0:	8f 93       	push	r24
   18fb2:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   18fb6:	8f 81       	ldd	r24, Y+7	; 0x07
   18fb8:	8f 93       	push	r24
   18fba:	8e 81       	ldd	r24, Y+6	; 0x06
   18fbc:	8f 93       	push	r24
   18fbe:	8d 81       	ldd	r24, Y+5	; 0x05
   18fc0:	8f 93       	push	r24
   18fc2:	8c 81       	ldd	r24, Y+4	; 0x04
   18fc4:	8f 93       	push	r24
   18fc6:	86 eb       	ldi	r24, 0xB6	; 182
   18fc8:	91 e4       	ldi	r25, 0x41	; 65
   18fca:	1f 92       	push	r1
   18fcc:	9f 93       	push	r25
   18fce:	8f 93       	push	r24
   18fd0:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   18fd4:	8b 85       	ldd	r24, Y+11	; 0x0b
   18fd6:	8f 93       	push	r24
   18fd8:	8a 85       	ldd	r24, Y+10	; 0x0a
   18fda:	8f 93       	push	r24
   18fdc:	89 85       	ldd	r24, Y+9	; 0x09
   18fde:	8f 93       	push	r24
   18fe0:	88 85       	ldd	r24, Y+8	; 0x08
   18fe2:	8f 93       	push	r24
   18fe4:	89 e9       	ldi	r24, 0x99	; 153
   18fe6:	91 e4       	ldi	r25, 0x41	; 65
   18fe8:	1f 92       	push	r1
   18fea:	9f 93       	push	r25
   18fec:	8f 93       	push	r24
   18fee:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   18ff2:	8f 85       	ldd	r24, Y+15	; 0x0f
   18ff4:	8f 93       	push	r24
   18ff6:	8e 85       	ldd	r24, Y+14	; 0x0e
   18ff8:	8f 93       	push	r24
   18ffa:	8d 85       	ldd	r24, Y+13	; 0x0d
   18ffc:	8f 93       	push	r24
   18ffe:	8c 85       	ldd	r24, Y+12	; 0x0c
   19000:	8f 93       	push	r24
   19002:	8c e7       	ldi	r24, 0x7C	; 124
   19004:	91 e4       	ldi	r25, 0x41	; 65
   19006:	1f 92       	push	r1
   19008:	9f 93       	push	r25
   1900a:	8f 93       	push	r24
   1900c:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   19010:	8b 89       	ldd	r24, Y+19	; 0x13
   19012:	8f 93       	push	r24
   19014:	8a 89       	ldd	r24, Y+18	; 0x12
   19016:	8f 93       	push	r24
   19018:	89 89       	ldd	r24, Y+17	; 0x11
   1901a:	8f 93       	push	r24
   1901c:	88 89       	ldd	r24, Y+16	; 0x10
   1901e:	8f 93       	push	r24
   19020:	8f e5       	ldi	r24, 0x5F	; 95
   19022:	91 e4       	ldi	r25, 0x41	; 65
   19024:	1f 92       	push	r1
   19026:	9f 93       	push	r25
   19028:	8f 93       	push	r24
   1902a:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1902e:	8d b7       	in	r24, 0x3d	; 61
   19030:	9e b7       	in	r25, 0x3e	; 62
   19032:	86 96       	adiw	r24, 0x26	; 38
   19034:	0f b6       	in	r0, 0x3f	; 63
   19036:	f8 94       	cli
   19038:	9e bf       	out	0x3e, r25	; 62
   1903a:	0f be       	out	0x3f, r0	; 63
   1903c:	8d bf       	out	0x3d, r24	; 61
   1903e:	8f 89       	ldd	r24, Y+23	; 0x17
   19040:	8f 93       	push	r24
   19042:	8e 89       	ldd	r24, Y+22	; 0x16
   19044:	8f 93       	push	r24
   19046:	8d 89       	ldd	r24, Y+21	; 0x15
   19048:	8f 93       	push	r24
   1904a:	8c 89       	ldd	r24, Y+20	; 0x14
   1904c:	8f 93       	push	r24
   1904e:	82 e4       	ldi	r24, 0x42	; 66
   19050:	91 e4       	ldi	r25, 0x41	; 65
   19052:	1f 92       	push	r1
   19054:	9f 93       	push	r25
   19056:	8f 93       	push	r24
   19058:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1905c:	8b 8d       	ldd	r24, Y+27	; 0x1b
   1905e:	8f 93       	push	r24
   19060:	8a 8d       	ldd	r24, Y+26	; 0x1a
   19062:	8f 93       	push	r24
   19064:	89 8d       	ldd	r24, Y+25	; 0x19
   19066:	8f 93       	push	r24
   19068:	88 8d       	ldd	r24, Y+24	; 0x18
   1906a:	8f 93       	push	r24
   1906c:	85 e2       	ldi	r24, 0x25	; 37
   1906e:	91 e4       	ldi	r25, 0x41	; 65
   19070:	1f 92       	push	r1
   19072:	9f 93       	push	r25
   19074:	8f 93       	push	r24
   19076:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1907a:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1907c:	9d 8d       	ldd	r25, Y+29	; 0x1d
   1907e:	09 2e       	mov	r0, r25
   19080:	00 0c       	add	r0, r0
   19082:	aa 0b       	sbc	r26, r26
   19084:	bb 0b       	sbc	r27, r27
   19086:	bf 93       	push	r27
   19088:	af 93       	push	r26
   1908a:	9f 93       	push	r25
   1908c:	8f 93       	push	r24
   1908e:	88 e0       	ldi	r24, 0x08	; 8
   19090:	91 e4       	ldi	r25, 0x41	; 65
   19092:	1f 92       	push	r1
   19094:	9f 93       	push	r25
   19096:	8f 93       	push	r24
   19098:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1909c:	8e 8d       	ldd	r24, Y+30	; 0x1e
   1909e:	9f 8d       	ldd	r25, Y+31	; 0x1f
   190a0:	09 2e       	mov	r0, r25
   190a2:	00 0c       	add	r0, r0
   190a4:	aa 0b       	sbc	r26, r26
   190a6:	bb 0b       	sbc	r27, r27
   190a8:	bf 93       	push	r27
   190aa:	af 93       	push	r26
   190ac:	9f 93       	push	r25
   190ae:	8f 93       	push	r24
   190b0:	8b ee       	ldi	r24, 0xEB	; 235
   190b2:	90 e4       	ldi	r25, 0x40	; 64
   190b4:	1f 92       	push	r1
   190b6:	9f 93       	push	r25
   190b8:	8f 93       	push	r24
   190ba:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   190be:	ce 01       	movw	r24, r28
   190c0:	86 96       	adiw	r24, 0x26	; 38
   190c2:	9f 93       	push	r25
   190c4:	8f 93       	push	r24
   190c6:	81 ed       	ldi	r24, 0xD1	; 209
   190c8:	90 e4       	ldi	r25, 0x40	; 64
   190ca:	1f 92       	push	r1
   190cc:	9f 93       	push	r25
   190ce:	8f 93       	push	r24
   190d0:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   190d4:	8d b7       	in	r24, 0x3d	; 61
   190d6:	9e b7       	in	r25, 0x3e	; 62
   190d8:	81 96       	adiw	r24, 0x21	; 33
   190da:	0f b6       	in	r0, 0x3f	; 63
   190dc:	f8 94       	cli
   190de:	9e bf       	out	0x3e, r25	; 62
   190e0:	0f be       	out	0x3f, r0	; 63
   190e2:	8d bf       	out	0x3d, r24	; 61
   190e4:	8d a1       	ldd	r24, Y+37	; 0x25
   190e6:	8f 93       	push	r24
   190e8:	8c a1       	ldd	r24, Y+36	; 0x24
   190ea:	8f 93       	push	r24
   190ec:	85 eb       	ldi	r24, 0xB5	; 181
   190ee:	90 e4       	ldi	r25, 0x40	; 64
   190f0:	1f 92       	push	r1
   190f2:	9f 93       	push	r25
   190f4:	8f 93       	push	r24
   190f6:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   190fa:	88 a9       	ldd	r24, Y+48	; 0x30
   190fc:	8f 93       	push	r24
   190fe:	8f a5       	ldd	r24, Y+47	; 0x2f
   19100:	8f 93       	push	r24
   19102:	8e a5       	ldd	r24, Y+46	; 0x2e
   19104:	8f 93       	push	r24
   19106:	8d a5       	ldd	r24, Y+45	; 0x2d
   19108:	8f 93       	push	r24
   1910a:	88 e9       	ldi	r24, 0x98	; 152
   1910c:	90 e4       	ldi	r25, 0x40	; 64
   1910e:	1f 92       	push	r1
   19110:	9f 93       	push	r25
   19112:	8f 93       	push	r24
   19114:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   19118:	88 ad       	ldd	r24, Y+56	; 0x38
   1911a:	8f 93       	push	r24
   1911c:	8f a9       	ldd	r24, Y+55	; 0x37
   1911e:	8f 93       	push	r24
   19120:	8e a9       	ldd	r24, Y+54	; 0x36
   19122:	8f 93       	push	r24
   19124:	8d a9       	ldd	r24, Y+53	; 0x35
   19126:	8f 93       	push	r24
   19128:	8b e7       	ldi	r24, 0x7B	; 123
   1912a:	90 e4       	ldi	r25, 0x40	; 64
   1912c:	1f 92       	push	r1
   1912e:	9f 93       	push	r25
   19130:	8f 93       	push	r24
   19132:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   19136:	8a a9       	ldd	r24, Y+50	; 0x32
   19138:	8f 93       	push	r24
   1913a:	89 a9       	ldd	r24, Y+49	; 0x31
   1913c:	8f 93       	push	r24
   1913e:	8f e5       	ldi	r24, 0x5F	; 95
   19140:	90 e4       	ldi	r25, 0x40	; 64
   19142:	1f 92       	push	r1
   19144:	9f 93       	push	r25
   19146:	8f 93       	push	r24
   19148:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1914c:	8a ad       	ldd	r24, Y+58	; 0x3a
   1914e:	8f 93       	push	r24
   19150:	89 ad       	ldd	r24, Y+57	; 0x39
   19152:	8f 93       	push	r24
   19154:	83 e4       	ldi	r24, 0x43	; 67
   19156:	90 e4       	ldi	r25, 0x40	; 64
   19158:	1f 92       	push	r1
   1915a:	9f 93       	push	r25
   1915c:	8f 93       	push	r24
   1915e:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   19162:	ce 01       	movw	r24, r28
   19164:	87 5b       	subi	r24, 0xB7	; 183
   19166:	9f 4f       	sbci	r25, 0xFF	; 255
   19168:	d3 de       	rcall	.-602    	; 0x18f10 <lif_lifbcd2timestr>
   1916a:	9f 93       	push	r25
   1916c:	8f 93       	push	r24
   1916e:	89 e2       	ldi	r24, 0x29	; 41
   19170:	90 e4       	ldi	r25, 0x40	; 64
   19172:	1f 92       	push	r1
   19174:	9f 93       	push	r25
   19176:	8f 93       	push	r24
   19178:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1917c:	8d b7       	in	r24, 0x3d	; 61
   1917e:	9e b7       	in	r25, 0x3e	; 62
   19180:	82 96       	adiw	r24, 0x22	; 34
   19182:	0f b6       	in	r0, 0x3f	; 63
   19184:	f8 94       	cli
   19186:	9e bf       	out	0x3e, r25	; 62
   19188:	0f be       	out	0x3f, r0	; 63
   1918a:	8d bf       	out	0x3d, r24	; 61
   1918c:	ce 01       	movw	r24, r28
   1918e:	81 5b       	subi	r24, 0xB1	; 177
   19190:	9f 4f       	sbci	r25, 0xFF	; 255
   19192:	9f 93       	push	r25
   19194:	8f 93       	push	r24
   19196:	8f e0       	ldi	r24, 0x0F	; 15
   19198:	90 e4       	ldi	r25, 0x40	; 64
   1919a:	1f 92       	push	r1
   1919c:	9f 93       	push	r25
   1919e:	8f 93       	push	r24
   191a0:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   191a4:	fe 01       	movw	r30, r28
   191a6:	e6 5a       	subi	r30, 0xA6	; 166
   191a8:	ff 4f       	sbci	r31, 0xFF	; 255
   191aa:	81 81       	ldd	r24, Z+1	; 0x01
   191ac:	8f 93       	push	r24
   191ae:	80 81       	ld	r24, Z
   191b0:	8f 93       	push	r24
   191b2:	83 ef       	ldi	r24, 0xF3	; 243
   191b4:	9f e3       	ldi	r25, 0x3F	; 63
   191b6:	1f 92       	push	r1
   191b8:	9f 93       	push	r25
   191ba:	8f 93       	push	r24
   191bc:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   191c0:	fe 01       	movw	r30, r28
   191c2:	e6 59       	subi	r30, 0x96	; 150
   191c4:	ff 4f       	sbci	r31, 0xFF	; 255
   191c6:	81 81       	ldd	r24, Z+1	; 0x01
   191c8:	8f 93       	push	r24
   191ca:	80 81       	ld	r24, Z
   191cc:	8f 93       	push	r24
   191ce:	87 ed       	ldi	r24, 0xD7	; 215
   191d0:	9f e3       	ldi	r25, 0x3F	; 63
   191d2:	1f 92       	push	r1
   191d4:	9f 93       	push	r25
   191d6:	8f 93       	push	r24
   191d8:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   191dc:	fe 01       	movw	r30, r28
   191de:	e4 5a       	subi	r30, 0xA4	; 164
   191e0:	ff 4f       	sbci	r31, 0xFF	; 255
   191e2:	83 81       	ldd	r24, Z+3	; 0x03
   191e4:	8f 93       	push	r24
   191e6:	82 81       	ldd	r24, Z+2	; 0x02
   191e8:	8f 93       	push	r24
   191ea:	81 81       	ldd	r24, Z+1	; 0x01
   191ec:	8f 93       	push	r24
   191ee:	80 81       	ld	r24, Z
   191f0:	8f 93       	push	r24
   191f2:	8a eb       	ldi	r24, 0xBA	; 186
   191f4:	9f e3       	ldi	r25, 0x3F	; 63
   191f6:	1f 92       	push	r1
   191f8:	9f 93       	push	r25
   191fa:	8f 93       	push	r24
   191fc:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   19200:	fe 01       	movw	r30, r28
   19202:	e0 5a       	subi	r30, 0xA0	; 160
   19204:	ff 4f       	sbci	r31, 0xFF	; 255
   19206:	83 81       	ldd	r24, Z+3	; 0x03
   19208:	8f 93       	push	r24
   1920a:	82 81       	ldd	r24, Z+2	; 0x02
   1920c:	8f 93       	push	r24
   1920e:	81 81       	ldd	r24, Z+1	; 0x01
   19210:	8f 93       	push	r24
   19212:	80 81       	ld	r24, Z
   19214:	8f 93       	push	r24
   19216:	8d e9       	ldi	r24, 0x9D	; 157
   19218:	9f e3       	ldi	r25, 0x3F	; 63
   1921a:	1f 92       	push	r1
   1921c:	9f 93       	push	r25
   1921e:	8f 93       	push	r24
   19220:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   19224:	fe 01       	movw	r30, r28
   19226:	e4 59       	subi	r30, 0x94	; 148
   19228:	ff 4f       	sbci	r31, 0xFF	; 255
   1922a:	80 81       	ld	r24, Z
   1922c:	91 81       	ldd	r25, Z+1	; 0x01
   1922e:	1f 92       	push	r1
   19230:	1f 92       	push	r1
   19232:	9f 93       	push	r25
   19234:	8f 93       	push	r24
   19236:	80 e8       	ldi	r24, 0x80	; 128
   19238:	9f e3       	ldi	r25, 0x3F	; 63
   1923a:	1f 92       	push	r1
   1923c:	9f 93       	push	r25
   1923e:	8f 93       	push	r24
   19240:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   19244:	8d b7       	in	r24, 0x3d	; 61
   19246:	9e b7       	in	r25, 0x3e	; 62
   19248:	84 96       	adiw	r24, 0x24	; 36
   1924a:	0f b6       	in	r0, 0x3f	; 63
   1924c:	f8 94       	cli
   1924e:	9e bf       	out	0x3e, r25	; 62
   19250:	0f be       	out	0x3f, r0	; 63
   19252:	8d bf       	out	0x3d, r24	; 61
   19254:	fe 01       	movw	r30, r28
   19256:	e2 59       	subi	r30, 0x92	; 146
   19258:	ff 4f       	sbci	r31, 0xFF	; 255
   1925a:	81 81       	ldd	r24, Z+1	; 0x01
   1925c:	8f 93       	push	r24
   1925e:	80 81       	ld	r24, Z
   19260:	8f 93       	push	r24
   19262:	84 e6       	ldi	r24, 0x64	; 100
   19264:	9f e3       	ldi	r25, 0x3F	; 63
   19266:	1f 92       	push	r1
   19268:	9f 93       	push	r25
   1926a:	8f 93       	push	r24
   1926c:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   19270:	ce 01       	movw	r24, r28
   19272:	8c 59       	subi	r24, 0x9C	; 156
   19274:	9f 4f       	sbci	r25, 0xFF	; 255
   19276:	4c de       	rcall	.-872    	; 0x18f10 <lif_lifbcd2timestr>
   19278:	9f 93       	push	r25
   1927a:	8f 93       	push	r24
   1927c:	8a e4       	ldi	r24, 0x4A	; 74
   1927e:	9f e3       	ldi	r25, 0x3F	; 63
   19280:	1f 92       	push	r1
   19282:	9f 93       	push	r25
   19284:	8f 93       	push	r24
   19286:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1928a:	88 e4       	ldi	r24, 0x48	; 72
   1928c:	9f e3       	ldi	r25, 0x3F	; 63
   1928e:	1f 92       	push	r1
   19290:	9f 93       	push	r25
   19292:	8f 93       	push	r24
   19294:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   19298:	8d b7       	in	r24, 0x3d	; 61
   1929a:	9e b7       	in	r25, 0x3e	; 62
   1929c:	0d 96       	adiw	r24, 0x0d	; 13
   1929e:	0f b6       	in	r0, 0x3f	; 63
   192a0:	f8 94       	cli
   192a2:	9e bf       	out	0x3e, r25	; 62
   192a4:	0f be       	out	0x3f, r0	; 63
   192a6:	8d bf       	out	0x3d, r24	; 61
   192a8:	df 91       	pop	r29
   192aa:	cf 91       	pop	r28
   192ac:	08 95       	ret

000192ae <lif_check_volume>:
   192ae:	0f 93       	push	r16
   192b0:	1f 93       	push	r17
   192b2:	cf 93       	push	r28
   192b4:	df 93       	push	r29
   192b6:	ec 01       	movw	r28, r24
   192b8:	86 96       	adiw	r24, 0x26	; 38
   192ba:	fb da       	rcall	.-2570   	; 0x188b2 <lif_checkname>
   192bc:	89 2b       	or	r24, r25
   192be:	79 f4       	brne	.+30     	; 0x192de <lif_check_volume+0x30>
   192c0:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   192c4:	80 ff       	sbrs	r24, 0
   192c6:	0e c0       	rjmp	.+28     	; 0x192e4 <lif_check_volume+0x36>
   192c8:	89 e2       	ldi	r24, 0x29	; 41
   192ca:	9f e3       	ldi	r25, 0x3F	; 63
   192cc:	1f 92       	push	r1
   192ce:	9f 93       	push	r25
   192d0:	8f 93       	push	r24
   192d2:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   192d6:	0f 90       	pop	r0
   192d8:	0f 90       	pop	r0
   192da:	0f 90       	pop	r0
   192dc:	03 c0       	rjmp	.+6      	; 0x192e4 <lif_check_volume+0x36>
   192de:	81 e0       	ldi	r24, 0x01	; 1
   192e0:	90 e0       	ldi	r25, 0x00	; 0
   192e2:	02 c0       	rjmp	.+4      	; 0x192e8 <lif_check_volume+0x3a>
   192e4:	80 e0       	ldi	r24, 0x00	; 0
   192e6:	90 e0       	ldi	r25, 0x00	; 0
   192e8:	29 a9       	ldd	r18, Y+49	; 0x31
   192ea:	3a a9       	ldd	r19, Y+50	; 0x32
   192ec:	21 15       	cp	r18, r1
   192ee:	40 e1       	ldi	r20, 0x10	; 16
   192f0:	34 07       	cpc	r19, r20
   192f2:	a1 f0       	breq	.+40     	; 0x1931c <lif_check_volume+0x6e>
   192f4:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   192f8:	80 ff       	sbrs	r24, 0
   192fa:	0e c0       	rjmp	.+28     	; 0x19318 <lif_check_volume+0x6a>
   192fc:	3f 93       	push	r19
   192fe:	2f 93       	push	r18
   19300:	80 ef       	ldi	r24, 0xF0	; 240
   19302:	9e e3       	ldi	r25, 0x3E	; 62
   19304:	1f 92       	push	r1
   19306:	9f 93       	push	r25
   19308:	8f 93       	push	r24
   1930a:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1930e:	0f 90       	pop	r0
   19310:	0f 90       	pop	r0
   19312:	0f 90       	pop	r0
   19314:	0f 90       	pop	r0
   19316:	0f 90       	pop	r0
   19318:	80 e0       	ldi	r24, 0x00	; 0
   1931a:	90 e0       	ldi	r25, 0x00	; 0
   1931c:	29 ad       	ldd	r18, Y+57	; 0x39
   1931e:	3a ad       	ldd	r19, Y+58	; 0x3a
   19320:	22 30       	cpi	r18, 0x02	; 2
   19322:	31 05       	cpc	r19, r1
   19324:	a0 f0       	brcs	.+40     	; 0x1934e <lif_check_volume+0xa0>
   19326:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1932a:	80 ff       	sbrs	r24, 0
   1932c:	0e c0       	rjmp	.+28     	; 0x1934a <lif_check_volume+0x9c>
   1932e:	3f 93       	push	r19
   19330:	2f 93       	push	r18
   19332:	88 ed       	ldi	r24, 0xD8	; 216
   19334:	9e e3       	ldi	r25, 0x3E	; 62
   19336:	1f 92       	push	r1
   19338:	9f 93       	push	r25
   1933a:	8f 93       	push	r24
   1933c:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   19340:	0f 90       	pop	r0
   19342:	0f 90       	pop	r0
   19344:	0f 90       	pop	r0
   19346:	0f 90       	pop	r0
   19348:	0f 90       	pop	r0
   1934a:	80 e0       	ldi	r24, 0x00	; 0
   1934c:	90 e0       	ldi	r25, 0x00	; 0
   1934e:	2b a9       	ldd	r18, Y+51	; 0x33
   19350:	3c a9       	ldd	r19, Y+52	; 0x34
   19352:	23 2b       	or	r18, r19
   19354:	81 f0       	breq	.+32     	; 0x19376 <lif_check_volume+0xc8>
   19356:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1935a:	80 ff       	sbrs	r24, 0
   1935c:	0a c0       	rjmp	.+20     	; 0x19372 <lif_check_volume+0xc4>
   1935e:	8f e9       	ldi	r24, 0x9F	; 159
   19360:	9e e3       	ldi	r25, 0x3E	; 62
   19362:	1f 92       	push	r1
   19364:	9f 93       	push	r25
   19366:	8f 93       	push	r24
   19368:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1936c:	0f 90       	pop	r0
   1936e:	0f 90       	pop	r0
   19370:	0f 90       	pop	r0
   19372:	80 e0       	ldi	r24, 0x00	; 0
   19374:	90 e0       	ldi	r25, 0x00	; 0
   19376:	2b ad       	ldd	r18, Y+59	; 0x3b
   19378:	3c ad       	ldd	r19, Y+60	; 0x3c
   1937a:	23 2b       	or	r18, r19
   1937c:	81 f0       	breq	.+32     	; 0x1939e <lif_check_volume+0xf0>
   1937e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   19382:	80 ff       	sbrs	r24, 0
   19384:	0a c0       	rjmp	.+20     	; 0x1939a <lif_check_volume+0xec>
   19386:	86 e6       	ldi	r24, 0x66	; 102
   19388:	9e e3       	ldi	r25, 0x3E	; 62
   1938a:	1f 92       	push	r1
   1938c:	9f 93       	push	r25
   1938e:	8f 93       	push	r24
   19390:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   19394:	0f 90       	pop	r0
   19396:	0f 90       	pop	r0
   19398:	0f 90       	pop	r0
   1939a:	80 e0       	ldi	r24, 0x00	; 0
   1939c:	90 e0       	ldi	r25, 0x00	; 0
   1939e:	4d a5       	ldd	r20, Y+45	; 0x2d
   193a0:	5e a5       	ldd	r21, Y+46	; 0x2e
   193a2:	6f a5       	ldd	r22, Y+47	; 0x2f
   193a4:	78 a9       	ldd	r23, Y+48	; 0x30
   193a6:	45 2b       	or	r20, r21
   193a8:	46 2b       	or	r20, r22
   193aa:	47 2b       	or	r20, r23
   193ac:	c9 f4       	brne	.+50     	; 0x193e0 <lif_check_volume+0x132>
   193ae:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   193b2:	80 ff       	sbrs	r24, 0
   193b4:	13 c0       	rjmp	.+38     	; 0x193dc <lif_check_volume+0x12e>
   193b6:	1f 92       	push	r1
   193b8:	1f 92       	push	r1
   193ba:	1f 92       	push	r1
   193bc:	1f 92       	push	r1
   193be:	81 e4       	ldi	r24, 0x41	; 65
   193c0:	9e e3       	ldi	r25, 0x3E	; 62
   193c2:	1f 92       	push	r1
   193c4:	9f 93       	push	r25
   193c6:	8f 93       	push	r24
   193c8:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   193cc:	8d b7       	in	r24, 0x3d	; 61
   193ce:	9e b7       	in	r25, 0x3e	; 62
   193d0:	07 96       	adiw	r24, 0x07	; 7
   193d2:	0f b6       	in	r0, 0x3f	; 63
   193d4:	f8 94       	cli
   193d6:	9e bf       	out	0x3e, r25	; 62
   193d8:	0f be       	out	0x3f, r0	; 63
   193da:	8d bf       	out	0x3d, r24	; 61
   193dc:	80 e0       	ldi	r24, 0x00	; 0
   193de:	90 e0       	ldi	r25, 0x00	; 0
   193e0:	4d a9       	ldd	r20, Y+53	; 0x35
   193e2:	5e a9       	ldd	r21, Y+54	; 0x36
   193e4:	6f a9       	ldd	r22, Y+55	; 0x37
   193e6:	78 ad       	ldd	r23, Y+56	; 0x38
   193e8:	45 2b       	or	r20, r21
   193ea:	46 2b       	or	r20, r22
   193ec:	47 2b       	or	r20, r23
   193ee:	81 f4       	brne	.+32     	; 0x19410 <lif_check_volume+0x162>
   193f0:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   193f4:	80 ff       	sbrs	r24, 0
   193f6:	0a c0       	rjmp	.+20     	; 0x1940c <lif_check_volume+0x15e>
   193f8:	82 e1       	ldi	r24, 0x12	; 18
   193fa:	9e e3       	ldi	r25, 0x3E	; 62
   193fc:	1f 92       	push	r1
   193fe:	9f 93       	push	r25
   19400:	8f 93       	push	r24
   19402:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   19406:	0f 90       	pop	r0
   19408:	0f 90       	pop	r0
   1940a:	0f 90       	pop	r0
   1940c:	80 e0       	ldi	r24, 0x00	; 0
   1940e:	90 e0       	ldi	r25, 0x00	; 0
   19410:	0d a5       	ldd	r16, Y+45	; 0x2d
   19412:	1e a5       	ldd	r17, Y+46	; 0x2e
   19414:	2f a5       	ldd	r18, Y+47	; 0x2f
   19416:	38 a9       	ldd	r19, Y+48	; 0x30
   19418:	4d a9       	ldd	r20, Y+53	; 0x35
   1941a:	5e a9       	ldd	r21, Y+54	; 0x36
   1941c:	6f a9       	ldd	r22, Y+55	; 0x37
   1941e:	78 ad       	ldd	r23, Y+56	; 0x38
   19420:	40 0f       	add	r20, r16
   19422:	51 1f       	adc	r21, r17
   19424:	62 1f       	adc	r22, r18
   19426:	73 1f       	adc	r23, r19
   19428:	0c 81       	ldd	r16, Y+4	; 0x04
   1942a:	1d 81       	ldd	r17, Y+5	; 0x05
   1942c:	2e 81       	ldd	r18, Y+6	; 0x06
   1942e:	3f 81       	ldd	r19, Y+7	; 0x07
   19430:	04 17       	cp	r16, r20
   19432:	15 07       	cpc	r17, r21
   19434:	26 07       	cpc	r18, r22
   19436:	37 07       	cpc	r19, r23
   19438:	80 f4       	brcc	.+32     	; 0x1945a <lif_check_volume+0x1ac>
   1943a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1943e:	80 ff       	sbrs	r24, 0
   19440:	0a c0       	rjmp	.+20     	; 0x19456 <lif_check_volume+0x1a8>
   19442:	86 ee       	ldi	r24, 0xE6	; 230
   19444:	9d e3       	ldi	r25, 0x3D	; 61
   19446:	1f 92       	push	r1
   19448:	9f 93       	push	r25
   1944a:	8f 93       	push	r24
   1944c:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   19450:	0f 90       	pop	r0
   19452:	0f 90       	pop	r0
   19454:	0f 90       	pop	r0
   19456:	80 e0       	ldi	r24, 0x00	; 0
   19458:	90 e0       	ldi	r25, 0x00	; 0
   1945a:	df 91       	pop	r29
   1945c:	cf 91       	pop	r28
   1945e:	1f 91       	pop	r17
   19460:	0f 91       	pop	r16
   19462:	08 95       	ret

00019464 <lif_check_dir>:
   19464:	a4 e0       	ldi	r26, 0x04	; 4
   19466:	b0 e0       	ldi	r27, 0x00	; 0
   19468:	e8 e3       	ldi	r30, 0x38	; 56
   1946a:	fa ec       	ldi	r31, 0xCA	; 202
   1946c:	0c 94 e0 e5 	jmp	0x1cbc0	; 0x1cbc0 <__prologue_saves__>
   19470:	6c 01       	movw	r12, r24
   19472:	2a e5       	ldi	r18, 0x5A	; 90
   19474:	c2 0e       	add	r12, r18
   19476:	d1 1c       	adc	r13, r1
   19478:	f6 01       	movw	r30, r12
   1947a:	20 81       	ld	r18, Z
   1947c:	31 81       	ldd	r19, Z+1	; 0x01
   1947e:	21 50       	subi	r18, 0x01	; 1
   19480:	31 09       	sbc	r19, r1
   19482:	2e 3f       	cpi	r18, 0xFE	; 254
   19484:	3f 4f       	sbci	r19, 0xFF	; 255
   19486:	08 f0       	brcs	.+2      	; 0x1948a <lif_check_dir+0x26>
   19488:	98 c1       	rjmp	.+816    	; 0x197ba <lif_check_dir+0x356>
   1948a:	9c 83       	std	Y+4, r25	; 0x04
   1948c:	8b 83       	std	Y+3, r24	; 0x03
   1948e:	8c 01       	movw	r16, r24
   19490:	01 5b       	subi	r16, 0xB1	; 177
   19492:	1f 4f       	sbci	r17, 0xFF	; 255
   19494:	c8 01       	movw	r24, r16
   19496:	0d da       	rcall	.-3046   	; 0x188b2 <lif_checkname>
   19498:	89 2b       	or	r24, r25
   1949a:	99 f4       	brne	.+38     	; 0x194c2 <lif_check_dir+0x5e>
   1949c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   194a0:	80 ff       	sbrs	r24, 0
   194a2:	12 c0       	rjmp	.+36     	; 0x194c8 <lif_check_dir+0x64>
   194a4:	1f 93       	push	r17
   194a6:	0f 93       	push	r16
   194a8:	85 ec       	ldi	r24, 0xC5	; 197
   194aa:	9d e3       	ldi	r25, 0x3D	; 61
   194ac:	1f 92       	push	r1
   194ae:	9f 93       	push	r25
   194b0:	8f 93       	push	r24
   194b2:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   194b6:	0f 90       	pop	r0
   194b8:	0f 90       	pop	r0
   194ba:	0f 90       	pop	r0
   194bc:	0f 90       	pop	r0
   194be:	0f 90       	pop	r0
   194c0:	03 c0       	rjmp	.+6      	; 0x194c8 <lif_check_dir+0x64>
   194c2:	ee 24       	eor	r14, r14
   194c4:	e3 94       	inc	r14
   194c6:	01 c0       	rjmp	.+2      	; 0x194ca <lif_check_dir+0x66>
   194c8:	e1 2c       	mov	r14, r1
   194ca:	f1 2c       	mov	r15, r1
   194cc:	eb 81       	ldd	r30, Y+3	; 0x03
   194ce:	fc 81       	ldd	r31, Y+4	; 0x04
   194d0:	84 85       	ldd	r24, Z+12	; 0x0c
   194d2:	95 85       	ldd	r25, Z+13	; 0x0d
   194d4:	a6 85       	ldd	r26, Z+14	; 0x0e
   194d6:	b7 85       	ldd	r27, Z+15	; 0x0f
   194d8:	00 97       	sbiw	r24, 0x00	; 0
   194da:	a1 05       	cpc	r26, r1
   194dc:	b1 05       	cpc	r27, r1
   194de:	39 f1       	breq	.+78     	; 0x1952e <lif_check_dir+0xca>
   194e0:	e4 5a       	subi	r30, 0xA4	; 164
   194e2:	ff 4f       	sbci	r31, 0xFF	; 255
   194e4:	40 81       	ld	r20, Z
   194e6:	51 81       	ldd	r21, Z+1	; 0x01
   194e8:	62 81       	ldd	r22, Z+2	; 0x02
   194ea:	73 81       	ldd	r23, Z+3	; 0x03
   194ec:	48 17       	cp	r20, r24
   194ee:	59 07       	cpc	r21, r25
   194f0:	6a 07       	cpc	r22, r26
   194f2:	7b 07       	cpc	r23, r27
   194f4:	e0 f4       	brcc	.+56     	; 0x1952e <lif_check_dir+0xca>
   194f6:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   194fa:	20 ff       	sbrs	r18, 0
   194fc:	16 c0       	rjmp	.+44     	; 0x1952a <lif_check_dir+0xc6>
   194fe:	bf 93       	push	r27
   19500:	af 93       	push	r26
   19502:	9f 93       	push	r25
   19504:	8f 93       	push	r24
   19506:	7f 93       	push	r23
   19508:	6f 93       	push	r22
   1950a:	5f 93       	push	r21
   1950c:	4f 93       	push	r20
   1950e:	1f 93       	push	r17
   19510:	0f 93       	push	r16
   19512:	81 e8       	ldi	r24, 0x81	; 129
   19514:	9d e3       	ldi	r25, 0x3D	; 61
   19516:	1f 92       	push	r1
   19518:	9f 93       	push	r25
   1951a:	8f 93       	push	r24
   1951c:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   19520:	0f b6       	in	r0, 0x3f	; 63
   19522:	f8 94       	cli
   19524:	de bf       	out	0x3e, r29	; 62
   19526:	0f be       	out	0x3f, r0	; 63
   19528:	cd bf       	out	0x3d, r28	; 61
   1952a:	e1 2c       	mov	r14, r1
   1952c:	f1 2c       	mov	r15, r1
   1952e:	eb 81       	ldd	r30, Y+3	; 0x03
   19530:	fc 81       	ldd	r31, Y+4	; 0x04
   19532:	44 81       	ldd	r20, Z+4	; 0x04
   19534:	55 81       	ldd	r21, Z+5	; 0x05
   19536:	66 81       	ldd	r22, Z+6	; 0x06
   19538:	77 81       	ldd	r23, Z+7	; 0x07
   1953a:	41 15       	cp	r20, r1
   1953c:	51 05       	cpc	r21, r1
   1953e:	61 05       	cpc	r22, r1
   19540:	71 05       	cpc	r23, r1
   19542:	99 f1       	breq	.+102    	; 0x195aa <lif_check_dir+0x146>
   19544:	e4 5a       	subi	r30, 0xA4	; 164
   19546:	ff 4f       	sbci	r31, 0xFF	; 255
   19548:	80 80       	ld	r8, Z
   1954a:	91 80       	ldd	r9, Z+1	; 0x01
   1954c:	a2 80       	ldd	r10, Z+2	; 0x02
   1954e:	b3 80       	ldd	r11, Z+3	; 0x03
   19550:	eb 81       	ldd	r30, Y+3	; 0x03
   19552:	fc 81       	ldd	r31, Y+4	; 0x04
   19554:	e0 5a       	subi	r30, 0xA0	; 160
   19556:	ff 4f       	sbci	r31, 0xFF	; 255
   19558:	80 81       	ld	r24, Z
   1955a:	91 81       	ldd	r25, Z+1	; 0x01
   1955c:	a2 81       	ldd	r26, Z+2	; 0x02
   1955e:	b3 81       	ldd	r27, Z+3	; 0x03
   19560:	88 0d       	add	r24, r8
   19562:	99 1d       	adc	r25, r9
   19564:	aa 1d       	adc	r26, r10
   19566:	bb 1d       	adc	r27, r11
   19568:	48 17       	cp	r20, r24
   1956a:	59 07       	cpc	r21, r25
   1956c:	6a 07       	cpc	r22, r26
   1956e:	7b 07       	cpc	r23, r27
   19570:	e0 f4       	brcc	.+56     	; 0x195aa <lif_check_dir+0x146>
   19572:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   19576:	20 ff       	sbrs	r18, 0
   19578:	16 c0       	rjmp	.+44     	; 0x195a6 <lif_check_dir+0x142>
   1957a:	7f 93       	push	r23
   1957c:	6f 93       	push	r22
   1957e:	5f 93       	push	r21
   19580:	4f 93       	push	r20
   19582:	bf 93       	push	r27
   19584:	af 93       	push	r26
   19586:	9f 93       	push	r25
   19588:	8f 93       	push	r24
   1958a:	1f 93       	push	r17
   1958c:	0f 93       	push	r16
   1958e:	80 e4       	ldi	r24, 0x40	; 64
   19590:	9d e3       	ldi	r25, 0x3D	; 61
   19592:	1f 92       	push	r1
   19594:	9f 93       	push	r25
   19596:	8f 93       	push	r24
   19598:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1959c:	0f b6       	in	r0, 0x3f	; 63
   1959e:	f8 94       	cli
   195a0:	de bf       	out	0x3e, r29	; 62
   195a2:	0f be       	out	0x3f, r0	; 63
   195a4:	cd bf       	out	0x3d, r28	; 61
   195a6:	e1 2c       	mov	r14, r1
   195a8:	f1 2c       	mov	r15, r1
   195aa:	eb 81       	ldd	r30, Y+3	; 0x03
   195ac:	fc 81       	ldd	r31, Y+4	; 0x04
   195ae:	e6 59       	subi	r30, 0x96	; 150
   195b0:	ff 4f       	sbci	r31, 0xFF	; 255
   195b2:	80 81       	ld	r24, Z
   195b4:	91 81       	ldd	r25, Z+1	; 0x01
   195b6:	81 30       	cpi	r24, 0x01	; 1
   195b8:	30 e8       	ldi	r19, 0x80	; 128
   195ba:	93 07       	cpc	r25, r19
   195bc:	b1 f0       	breq	.+44     	; 0x195ea <lif_check_dir+0x186>
   195be:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   195c2:	20 ff       	sbrs	r18, 0
   195c4:	10 c0       	rjmp	.+32     	; 0x195e6 <lif_check_dir+0x182>
   195c6:	9f 93       	push	r25
   195c8:	8f 93       	push	r24
   195ca:	1f 93       	push	r17
   195cc:	0f 93       	push	r16
   195ce:	82 e1       	ldi	r24, 0x12	; 18
   195d0:	9d e3       	ldi	r25, 0x3D	; 61
   195d2:	1f 92       	push	r1
   195d4:	9f 93       	push	r25
   195d6:	8f 93       	push	r24
   195d8:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   195dc:	0f b6       	in	r0, 0x3f	; 63
   195de:	f8 94       	cli
   195e0:	de bf       	out	0x3e, r29	; 62
   195e2:	0f be       	out	0x3f, r0	; 63
   195e4:	cd bf       	out	0x3d, r28	; 61
   195e6:	e1 2c       	mov	r14, r1
   195e8:	f1 2c       	mov	r15, r1
   195ea:	f6 01       	movw	r30, r12
   195ec:	80 81       	ld	r24, Z
   195ee:	91 81       	ldd	r25, Z+1	; 0x01
   195f0:	8c 7f       	andi	r24, 0xFC	; 252
   195f2:	80 31       	cpi	r24, 0x10	; 16
   195f4:	90 4e       	sbci	r25, 0xE0	; 224
   195f6:	09 f0       	breq	.+2      	; 0x195fa <lif_check_dir+0x196>
   195f8:	b3 c0       	rjmp	.+358    	; 0x19760 <lif_check_dir+0x2fc>
   195fa:	cb 80       	ldd	r12, Y+3	; 0x03
   195fc:	dc 80       	ldd	r13, Y+4	; 0x04
   195fe:	2c e6       	ldi	r18, 0x6C	; 108
   19600:	c2 0e       	add	r12, r18
   19602:	d1 1c       	adc	r13, r1
   19604:	f6 01       	movw	r30, r12
   19606:	20 81       	ld	r18, Z
   19608:	31 81       	ldd	r19, Z+1	; 0x01
   1960a:	21 15       	cp	r18, r1
   1960c:	31 05       	cpc	r19, r1
   1960e:	09 f4       	brne	.+2      	; 0x19612 <lif_check_dir+0x1ae>
   19610:	a7 c0       	rjmp	.+334    	; 0x19760 <lif_check_dir+0x2fc>
   19612:	49 01       	movw	r8, r18
   19614:	a1 2c       	mov	r10, r1
   19616:	b1 2c       	mov	r11, r1
   19618:	bb 27       	eor	r27, r27
   1961a:	ab 2d       	mov	r26, r11
   1961c:	9a 2d       	mov	r25, r10
   1961e:	89 2d       	mov	r24, r9
   19620:	33 27       	eor	r19, r19
   19622:	2c 01       	movw	r4, r24
   19624:	3d 01       	movw	r6, r26
   19626:	21 15       	cp	r18, r1
   19628:	31 05       	cpc	r19, r1
   1962a:	29 f0       	breq	.+10     	; 0x19636 <lif_check_dir+0x1d2>
   1962c:	ff ef       	ldi	r31, 0xFF	; 255
   1962e:	4f 1a       	sub	r4, r31
   19630:	5f 0a       	sbc	r5, r31
   19632:	6f 0a       	sbc	r6, r31
   19634:	7f 0a       	sbc	r7, r31
   19636:	2b 80       	ldd	r2, Y+3	; 0x03
   19638:	3c 80       	ldd	r3, Y+4	; 0x04
   1963a:	40 e6       	ldi	r20, 0x60	; 96
   1963c:	24 0e       	add	r2, r20
   1963e:	31 1c       	adc	r3, r1
   19640:	f1 01       	movw	r30, r2
   19642:	40 81       	ld	r20, Z
   19644:	51 81       	ldd	r21, Z+1	; 0x01
   19646:	62 81       	ldd	r22, Z+2	; 0x02
   19648:	73 81       	ldd	r23, Z+3	; 0x03
   1964a:	44 15       	cp	r20, r4
   1964c:	55 05       	cpc	r21, r5
   1964e:	66 05       	cpc	r22, r6
   19650:	77 05       	cpc	r23, r7
   19652:	28 f5       	brcc	.+74     	; 0x1969e <lif_check_dir+0x23a>
   19654:	e0 91 bd 01 	lds	r30, 0x01BD	; 0x8001bd <debuglevel>
   19658:	e0 ff       	sbrs	r30, 0
   1965a:	1f c0       	rjmp	.+62     	; 0x1969a <lif_check_dir+0x236>
   1965c:	23 2b       	or	r18, r19
   1965e:	19 f0       	breq	.+6      	; 0x19666 <lif_check_dir+0x202>
   19660:	01 96       	adiw	r24, 0x01	; 1
   19662:	a1 1d       	adc	r26, r1
   19664:	b1 1d       	adc	r27, r1
   19666:	7f 93       	push	r23
   19668:	6f 93       	push	r22
   1966a:	5f 93       	push	r21
   1966c:	4f 93       	push	r20
   1966e:	bf 93       	push	r27
   19670:	af 93       	push	r26
   19672:	9f 93       	push	r25
   19674:	8f 93       	push	r24
   19676:	1f 92       	push	r1
   19678:	1f 92       	push	r1
   1967a:	9f 92       	push	r9
   1967c:	8f 92       	push	r8
   1967e:	1f 93       	push	r17
   19680:	0f 93       	push	r16
   19682:	87 ec       	ldi	r24, 0xC7	; 199
   19684:	9c e3       	ldi	r25, 0x3C	; 60
   19686:	1f 92       	push	r1
   19688:	9f 93       	push	r25
   1968a:	8f 93       	push	r24
   1968c:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   19690:	0f b6       	in	r0, 0x3f	; 63
   19692:	f8 94       	cli
   19694:	de bf       	out	0x3e, r29	; 62
   19696:	0f be       	out	0x3f, r0	; 63
   19698:	cd bf       	out	0x3d, r28	; 61
   1969a:	e1 2c       	mov	r14, r1
   1969c:	f1 2c       	mov	r15, r1
   1969e:	f6 01       	movw	r30, r12
   196a0:	20 81       	ld	r18, Z
   196a2:	31 81       	ldd	r19, Z+1	; 0x01
   196a4:	49 01       	movw	r8, r18
   196a6:	a1 2c       	mov	r10, r1
   196a8:	b1 2c       	mov	r11, r1
   196aa:	bb 27       	eor	r27, r27
   196ac:	ab 2d       	mov	r26, r11
   196ae:	9a 2d       	mov	r25, r10
   196b0:	89 2d       	mov	r24, r9
   196b2:	a9 01       	movw	r20, r18
   196b4:	55 27       	eor	r21, r21
   196b6:	5a 83       	std	Y+2, r21	; 0x02
   196b8:	49 83       	std	Y+1, r20	; 0x01
   196ba:	2c 01       	movw	r4, r24
   196bc:	3d 01       	movw	r6, r26
   196be:	45 2b       	or	r20, r21
   196c0:	29 f0       	breq	.+10     	; 0x196cc <lif_check_dir+0x268>
   196c2:	5f ef       	ldi	r21, 0xFF	; 255
   196c4:	45 1a       	sub	r4, r21
   196c6:	55 0a       	sbc	r5, r21
   196c8:	65 0a       	sbc	r6, r21
   196ca:	75 0a       	sbc	r7, r21
   196cc:	f1 01       	movw	r30, r2
   196ce:	40 81       	ld	r20, Z
   196d0:	51 81       	ldd	r21, Z+1	; 0x01
   196d2:	62 81       	ldd	r22, Z+2	; 0x02
   196d4:	73 81       	ldd	r23, Z+3	; 0x03
   196d6:	44 16       	cp	r4, r20
   196d8:	55 06       	cpc	r5, r21
   196da:	66 06       	cpc	r6, r22
   196dc:	77 06       	cpc	r7, r23
   196de:	38 f5       	brcc	.+78     	; 0x1972e <lif_check_dir+0x2ca>
   196e0:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   196e4:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <debuglevel+0x1>
   196e8:	32 ff       	sbrs	r19, 2
   196ea:	21 c0       	rjmp	.+66     	; 0x1972e <lif_check_dir+0x2ca>
   196ec:	29 81       	ldd	r18, Y+1	; 0x01
   196ee:	3a 81       	ldd	r19, Y+2	; 0x02
   196f0:	23 2b       	or	r18, r19
   196f2:	19 f0       	breq	.+6      	; 0x196fa <lif_check_dir+0x296>
   196f4:	01 96       	adiw	r24, 0x01	; 1
   196f6:	a1 1d       	adc	r26, r1
   196f8:	b1 1d       	adc	r27, r1
   196fa:	7f 93       	push	r23
   196fc:	6f 93       	push	r22
   196fe:	5f 93       	push	r21
   19700:	4f 93       	push	r20
   19702:	bf 93       	push	r27
   19704:	af 93       	push	r26
   19706:	9f 93       	push	r25
   19708:	8f 93       	push	r24
   1970a:	1f 92       	push	r1
   1970c:	1f 92       	push	r1
   1970e:	9f 92       	push	r9
   19710:	8f 92       	push	r8
   19712:	1f 93       	push	r17
   19714:	0f 93       	push	r16
   19716:	8c e7       	ldi	r24, 0x7C	; 124
   19718:	9c e3       	ldi	r25, 0x3C	; 60
   1971a:	1f 92       	push	r1
   1971c:	9f 93       	push	r25
   1971e:	8f 93       	push	r24
   19720:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   19724:	0f b6       	in	r0, 0x3f	; 63
   19726:	f8 94       	cli
   19728:	de bf       	out	0x3e, r29	; 62
   1972a:	0f be       	out	0x3f, r0	; 63
   1972c:	cd bf       	out	0x3d, r28	; 61
   1972e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   19732:	80 ff       	sbrs	r24, 0
   19734:	15 c0       	rjmp	.+42     	; 0x19760 <lif_check_dir+0x2fc>
   19736:	f6 01       	movw	r30, r12
   19738:	80 81       	ld	r24, Z
   1973a:	91 81       	ldd	r25, Z+1	; 0x01
   1973c:	89 2b       	or	r24, r25
   1973e:	81 f4       	brne	.+32     	; 0x19760 <lif_check_dir+0x2fc>
   19740:	1f 93       	push	r17
   19742:	0f 93       	push	r16
   19744:	81 e5       	ldi	r24, 0x51	; 81
   19746:	9c e3       	ldi	r25, 0x3C	; 60
   19748:	1f 92       	push	r1
   1974a:	9f 93       	push	r25
   1974c:	8f 93       	push	r24
   1974e:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   19752:	0f 90       	pop	r0
   19754:	0f 90       	pop	r0
   19756:	0f 90       	pop	r0
   19758:	0f 90       	pop	r0
   1975a:	0f 90       	pop	r0
   1975c:	e1 2c       	mov	r14, r1
   1975e:	f1 2c       	mov	r15, r1
   19760:	eb 81       	ldd	r30, Y+3	; 0x03
   19762:	fc 81       	ldd	r31, Y+4	; 0x04
   19764:	e2 59       	subi	r30, 0x92	; 146
   19766:	ff 4f       	sbci	r31, 0xFF	; 255
   19768:	20 81       	ld	r18, Z
   1976a:	31 81       	ldd	r19, Z+1	; 0x01
   1976c:	21 15       	cp	r18, r1
   1976e:	f1 e0       	ldi	r31, 0x01	; 1
   19770:	3f 07       	cpc	r19, r31
   19772:	31 f1       	breq	.+76     	; 0x197c0 <lif_check_dir+0x35c>
   19774:	40 91 bd 01 	lds	r20, 0x01BD	; 0x8001bd <debuglevel>
   19778:	50 91 be 01 	lds	r21, 0x01BE	; 0x8001be <debuglevel+0x1>
   1977c:	ca 01       	movw	r24, r20
   1977e:	81 70       	andi	r24, 0x01	; 1
   19780:	99 27       	eor	r25, r25
   19782:	40 ff       	sbrs	r20, 0
   19784:	1e c0       	rjmp	.+60     	; 0x197c2 <lif_check_dir+0x35e>
   19786:	c9 01       	movw	r24, r18
   19788:	1f 92       	push	r1
   1978a:	1f 92       	push	r1
   1978c:	9f 93       	push	r25
   1978e:	2f 93       	push	r18
   19790:	eb 81       	ldd	r30, Y+3	; 0x03
   19792:	fc 81       	ldd	r31, Y+4	; 0x04
   19794:	81 81       	ldd	r24, Z+1	; 0x01
   19796:	8f 93       	push	r24
   19798:	80 81       	ld	r24, Z
   1979a:	8f 93       	push	r24
   1979c:	85 e2       	ldi	r24, 0x25	; 37
   1979e:	9c e3       	ldi	r25, 0x3C	; 60
   197a0:	1f 92       	push	r1
   197a2:	9f 93       	push	r25
   197a4:	8f 93       	push	r24
   197a6:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   197aa:	0f b6       	in	r0, 0x3f	; 63
   197ac:	f8 94       	cli
   197ae:	de bf       	out	0x3e, r29	; 62
   197b0:	0f be       	out	0x3f, r0	; 63
   197b2:	cd bf       	out	0x3d, r28	; 61
   197b4:	80 e0       	ldi	r24, 0x00	; 0
   197b6:	90 e0       	ldi	r25, 0x00	; 0
   197b8:	04 c0       	rjmp	.+8      	; 0x197c2 <lif_check_dir+0x35e>
   197ba:	81 e0       	ldi	r24, 0x01	; 1
   197bc:	90 e0       	ldi	r25, 0x00	; 0
   197be:	01 c0       	rjmp	.+2      	; 0x197c2 <lif_check_dir+0x35e>
   197c0:	c7 01       	movw	r24, r14
   197c2:	24 96       	adiw	r28, 0x04	; 4
   197c4:	e2 e1       	ldi	r30, 0x12	; 18
   197c6:	0c 94 fc e5 	jmp	0x1cbf8	; 0x1cbf8 <__epilogue_restores__>

000197ca <lif_close_volume>:
   197ca:	cf 93       	push	r28
   197cc:	df 93       	push	r29
   197ce:	00 97       	sbiw	r24, 0x00	; 0
   197d0:	f9 f0       	breq	.+62     	; 0x19810 <lif_close_volume+0x46>
   197d2:	ec 01       	movw	r28, r24
   197d4:	8a 81       	ldd	r24, Y+2	; 0x02
   197d6:	9b 81       	ldd	r25, Y+3	; 0x03
   197d8:	00 97       	sbiw	r24, 0x00	; 0
   197da:	79 f0       	breq	.+30     	; 0x197fa <lif_close_volume+0x30>
   197dc:	22 e0       	ldi	r18, 0x02	; 2
   197de:	30 e0       	ldi	r19, 0x00	; 0
   197e0:	40 e0       	ldi	r20, 0x00	; 0
   197e2:	50 e0       	ldi	r21, 0x00	; 0
   197e4:	ba 01       	movw	r22, r20
   197e6:	0e 94 02 7c 	call	0xf804	; 0xf804 <fseek>
   197ea:	8a 81       	ldd	r24, Y+2	; 0x02
   197ec:	9b 81       	ldd	r25, Y+3	; 0x03
   197ee:	0e 94 ea 7d 	call	0xfbd4	; 0xfbd4 <fclose>
   197f2:	1b 82       	std	Y+3, r1	; 0x03
   197f4:	1a 82       	std	Y+2, r1	; 0x02
   197f6:	0e 94 e5 7c 	call	0xf9ca	; 0xf9ca <sync>
   197fa:	88 81       	ld	r24, Y
   197fc:	99 81       	ldd	r25, Y+1	; 0x01
   197fe:	00 97       	sbiw	r24, 0x00	; 0
   19800:	11 f0       	breq	.+4      	; 0x19806 <lif_close_volume+0x3c>
   19802:	0e 94 98 c2 	call	0x18530	; 0x18530 <lif_free>
   19806:	ce 01       	movw	r24, r28
   19808:	b8 db       	rcall	.-2192   	; 0x18f7a <lif_vol_clear>
   1980a:	ce 01       	movw	r24, r28
   1980c:	0e 94 98 c2 	call	0x18530	; 0x18530 <lif_free>
   19810:	df 91       	pop	r29
   19812:	cf 91       	pop	r28
   19814:	08 95       	ret

00019816 <lif_checkdirindex>:
   19816:	a0 e0       	ldi	r26, 0x00	; 0
   19818:	b0 e0       	ldi	r27, 0x00	; 0
   1981a:	e1 e1       	ldi	r30, 0x11	; 17
   1981c:	fc ec       	ldi	r31, 0xCC	; 204
   1981e:	0c 94 ea e5 	jmp	0x1cbd4	; 0x1cbd4 <__prologue_saves__+0x14>
   19822:	77 fd       	sbrc	r23, 7
   19824:	26 c0       	rjmp	.+76     	; 0x19872 <lif_checkdirindex+0x5c>
   19826:	8b 01       	movw	r16, r22
   19828:	07 2e       	mov	r0, r23
   1982a:	00 0c       	add	r0, r0
   1982c:	22 0b       	sbc	r18, r18
   1982e:	33 0b       	sbc	r19, r19
   19830:	45 e0       	ldi	r20, 0x05	; 5
   19832:	00 0f       	add	r16, r16
   19834:	11 1f       	adc	r17, r17
   19836:	22 1f       	adc	r18, r18
   19838:	33 1f       	adc	r19, r19
   1983a:	4a 95       	dec	r20
   1983c:	d1 f7       	brne	.-12     	; 0x19832 <lif_checkdirindex+0x1c>
   1983e:	c1 2e       	mov	r12, r17
   19840:	d2 2e       	mov	r13, r18
   19842:	e3 2e       	mov	r14, r19
   19844:	ff 24       	eor	r15, r15
   19846:	11 27       	eor	r17, r17
   19848:	22 27       	eor	r18, r18
   1984a:	33 27       	eor	r19, r19
   1984c:	01 2b       	or	r16, r17
   1984e:	02 2b       	or	r16, r18
   19850:	03 2b       	or	r16, r19
   19852:	29 f0       	breq	.+10     	; 0x1985e <lif_checkdirindex+0x48>
   19854:	2f ef       	ldi	r18, 0xFF	; 255
   19856:	c2 1a       	sub	r12, r18
   19858:	d2 0a       	sbc	r13, r18
   1985a:	e2 0a       	sbc	r14, r18
   1985c:	f2 0a       	sbc	r15, r18
   1985e:	fc 01       	movw	r30, r24
   19860:	05 a9       	ldd	r16, Z+53	; 0x35
   19862:	16 a9       	ldd	r17, Z+54	; 0x36
   19864:	27 a9       	ldd	r18, Z+55	; 0x37
   19866:	30 ad       	ldd	r19, Z+56	; 0x38
   19868:	0c 15       	cp	r16, r12
   1986a:	1d 05       	cpc	r17, r13
   1986c:	2e 05       	cpc	r18, r14
   1986e:	3f 05       	cpc	r19, r15
   19870:	30 f5       	brcc	.+76     	; 0x198be <lif_checkdirindex+0xa8>
   19872:	ec 01       	movw	r28, r24
   19874:	7f 93       	push	r23
   19876:	6f 93       	push	r22
   19878:	89 81       	ldd	r24, Y+1	; 0x01
   1987a:	8f 93       	push	r24
   1987c:	88 81       	ld	r24, Y
   1987e:	8f 93       	push	r24
   19880:	82 e6       	ldi	r24, 0x62	; 98
   19882:	9b e3       	ldi	r25, 0x3B	; 59
   19884:	1f 92       	push	r1
   19886:	9f 93       	push	r25
   19888:	8f 93       	push	r24
   1988a:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1988e:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   19892:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <debuglevel+0x1>
   19896:	8d b7       	in	r24, 0x3d	; 61
   19898:	9e b7       	in	r25, 0x3e	; 62
   1989a:	07 96       	adiw	r24, 0x07	; 7
   1989c:	0f b6       	in	r0, 0x3f	; 63
   1989e:	f8 94       	cli
   198a0:	9e bf       	out	0x3e, r25	; 62
   198a2:	0f be       	out	0x3f, r0	; 63
   198a4:	8d bf       	out	0x3d, r24	; 61
   198a6:	c9 01       	movw	r24, r18
   198a8:	88 27       	eor	r24, r24
   198aa:	94 70       	andi	r25, 0x04	; 4
   198ac:	32 ff       	sbrs	r19, 2
   198ae:	09 c0       	rjmp	.+18     	; 0x198c2 <lif_checkdirindex+0xac>
   198b0:	6a e7       	ldi	r22, 0x7A	; 122
   198b2:	75 e1       	ldi	r23, 0x15	; 21
   198b4:	ce 01       	movw	r24, r28
   198b6:	68 db       	rcall	.-2352   	; 0x18f88 <lif_dump_vol>
   198b8:	80 e0       	ldi	r24, 0x00	; 0
   198ba:	90 e0       	ldi	r25, 0x00	; 0
   198bc:	02 c0       	rjmp	.+4      	; 0x198c2 <lif_checkdirindex+0xac>
   198be:	81 e0       	ldi	r24, 0x01	; 1
   198c0:	90 e0       	ldi	r25, 0x00	; 0
   198c2:	cd b7       	in	r28, 0x3d	; 61
   198c4:	de b7       	in	r29, 0x3e	; 62
   198c6:	e8 e0       	ldi	r30, 0x08	; 8
   198c8:	0c 94 06 e6 	jmp	0x1cc0c	; 0x1cc0c <__epilogue_restores__+0x14>

000198cc <lif_readdirindex>:
   198cc:	a0 e2       	ldi	r26, 0x20	; 32
   198ce:	b0 e0       	ldi	r27, 0x00	; 0
   198d0:	ec e6       	ldi	r30, 0x6C	; 108
   198d2:	fc ec       	ldi	r31, 0xCC	; 204
   198d4:	0c 94 ea e5 	jmp	0x1cbd4	; 0x1cbd4 <__prologue_saves__+0x14>
   198d8:	7c 01       	movw	r14, r24
   198da:	6b 01       	movw	r12, r22
   198dc:	9c df       	rcall	.-200    	; 0x19816 <lif_checkdirindex>
   198de:	89 2b       	or	r24, r25
   198e0:	19 f4       	brne	.+6      	; 0x198e8 <lif_readdirindex+0x1c>
   198e2:	00 e0       	ldi	r16, 0x00	; 0
   198e4:	10 e0       	ldi	r17, 0x00	; 0
   198e6:	56 c0       	rjmp	.+172    	; 0x19994 <lif_readdirindex+0xc8>
   198e8:	f7 01       	movw	r30, r14
   198ea:	85 a5       	ldd	r24, Z+45	; 0x2d
   198ec:	96 a5       	ldd	r25, Z+46	; 0x2e
   198ee:	a7 a5       	ldd	r26, Z+47	; 0x2f
   198f0:	b0 a9       	ldd	r27, Z+48	; 0x30
   198f2:	44 27       	eor	r20, r20
   198f4:	58 2f       	mov	r21, r24
   198f6:	69 2f       	mov	r22, r25
   198f8:	7a 2f       	mov	r23, r26
   198fa:	c6 01       	movw	r24, r12
   198fc:	0d 2c       	mov	r0, r13
   198fe:	00 0c       	add	r0, r0
   19900:	aa 0b       	sbc	r26, r26
   19902:	bb 0b       	sbc	r27, r27
   19904:	35 e0       	ldi	r19, 0x05	; 5
   19906:	88 0f       	add	r24, r24
   19908:	99 1f       	adc	r25, r25
   1990a:	aa 1f       	adc	r26, r26
   1990c:	bb 1f       	adc	r27, r27
   1990e:	3a 95       	dec	r19
   19910:	d1 f7       	brne	.-12     	; 0x19906 <lif_readdirindex+0x3a>
   19912:	9a 01       	movw	r18, r20
   19914:	ab 01       	movw	r20, r22
   19916:	28 0f       	add	r18, r24
   19918:	39 1f       	adc	r19, r25
   1991a:	4a 1f       	adc	r20, r26
   1991c:	5b 1f       	adc	r21, r27
   1991e:	00 e2       	ldi	r16, 0x20	; 32
   19920:	10 e0       	ldi	r17, 0x00	; 0
   19922:	be 01       	movw	r22, r28
   19924:	6f 5f       	subi	r22, 0xFF	; 255
   19926:	7f 4f       	sbci	r23, 0xFF	; 255
   19928:	c7 01       	movw	r24, r14
   1992a:	0e 94 4d c3 	call	0x1869a	; 0x1869a <lif_read>
   1992e:	60 32       	cpi	r22, 0x20	; 32
   19930:	71 05       	cpc	r23, r1
   19932:	81 05       	cpc	r24, r1
   19934:	91 05       	cpc	r25, r1
   19936:	a8 f2       	brcs	.-86     	; 0x198e2 <lif_readdirindex+0x16>
   19938:	b7 01       	movw	r22, r14
   1993a:	ce 01       	movw	r24, r28
   1993c:	01 96       	adiw	r24, 0x01	; 1
   1993e:	c1 d9       	rcall	.-3198   	; 0x18cc2 <lif_str2dir>
   19940:	f7 01       	movw	r30, r14
   19942:	e6 5a       	subi	r30, 0xA6	; 166
   19944:	ff 4f       	sbci	r31, 0xFF	; 255
   19946:	80 81       	ld	r24, Z
   19948:	91 81       	ldd	r25, Z+1	; 0x01
   1994a:	01 96       	adiw	r24, 0x01	; 1
   1994c:	19 f4       	brne	.+6      	; 0x19954 <lif_readdirindex+0x88>
   1994e:	f7 01       	movw	r30, r14
   19950:	d3 a2       	std	Z+35, r13	; 0x23
   19952:	c2 a2       	std	Z+34, r12	; 0x22
   19954:	c7 01       	movw	r24, r14
   19956:	86 dd       	rcall	.-1268   	; 0x19464 <lif_check_dir>
   19958:	8c 01       	movw	r16, r24
   1995a:	89 2b       	or	r24, r25
   1995c:	c9 f4       	brne	.+50     	; 0x19990 <lif_readdirindex+0xc4>
   1995e:	df 92       	push	r13
   19960:	cf 92       	push	r12
   19962:	82 e4       	ldi	r24, 0x42	; 66
   19964:	9b e3       	ldi	r25, 0x3B	; 59
   19966:	1f 92       	push	r1
   19968:	9f 93       	push	r25
   1996a:	8f 93       	push	r24
   1996c:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   19970:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   19974:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   19978:	0f 90       	pop	r0
   1997a:	0f 90       	pop	r0
   1997c:	0f 90       	pop	r0
   1997e:	0f 90       	pop	r0
   19980:	0f 90       	pop	r0
   19982:	92 ff       	sbrs	r25, 2
   19984:	ae cf       	rjmp	.-164    	; 0x198e2 <lif_readdirindex+0x16>
   19986:	6b e8       	ldi	r22, 0x8B	; 139
   19988:	75 e1       	ldi	r23, 0x15	; 21
   1998a:	c7 01       	movw	r24, r14
   1998c:	fd da       	rcall	.-2566   	; 0x18f88 <lif_dump_vol>
   1998e:	02 c0       	rjmp	.+4      	; 0x19994 <lif_readdirindex+0xc8>
   19990:	01 e0       	ldi	r16, 0x01	; 1
   19992:	10 e0       	ldi	r17, 0x00	; 0
   19994:	c8 01       	movw	r24, r16
   19996:	a0 96       	adiw	r28, 0x20	; 32
   19998:	e8 e0       	ldi	r30, 0x08	; 8
   1999a:	0c 94 06 e6 	jmp	0x1cc0c	; 0x1cc0c <__epilogue_restores__+0x14>

0001999e <lif_writedirindex>:
   1999e:	a0 e2       	ldi	r26, 0x20	; 32
   199a0:	b0 e0       	ldi	r27, 0x00	; 0
   199a2:	e5 ed       	ldi	r30, 0xD5	; 213
   199a4:	fc ec       	ldi	r31, 0xCC	; 204
   199a6:	0c 94 e8 e5 	jmp	0x1cbd0	; 0x1cbd0 <__prologue_saves__+0x10>
   199aa:	5c 01       	movw	r10, r24
   199ac:	6b 01       	movw	r12, r22
   199ae:	5a dd       	rcall	.-1356   	; 0x19464 <lif_check_dir>
   199b0:	7c 01       	movw	r14, r24
   199b2:	89 2b       	or	r24, r25
   199b4:	71 f4       	brne	.+28     	; 0x199d2 <lif_writedirindex+0x34>
   199b6:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   199ba:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   199be:	92 fd       	sbrc	r25, 2
   199c0:	03 c0       	rjmp	.+6      	; 0x199c8 <lif_writedirindex+0x2a>
   199c2:	e1 2c       	mov	r14, r1
   199c4:	f1 2c       	mov	r15, r1
   199c6:	42 c0       	rjmp	.+132    	; 0x19a4c <lif_writedirindex+0xae>
   199c8:	6c e9       	ldi	r22, 0x9C	; 156
   199ca:	75 e1       	ldi	r23, 0x15	; 21
   199cc:	c5 01       	movw	r24, r10
   199ce:	dc da       	rcall	.-2632   	; 0x18f88 <lif_dump_vol>
   199d0:	3d c0       	rjmp	.+122    	; 0x19a4c <lif_writedirindex+0xae>
   199d2:	b6 01       	movw	r22, r12
   199d4:	c5 01       	movw	r24, r10
   199d6:	1f df       	rcall	.-450    	; 0x19816 <lif_checkdirindex>
   199d8:	89 2b       	or	r24, r25
   199da:	99 f3       	breq	.-26     	; 0x199c2 <lif_writedirindex+0x24>
   199dc:	f5 01       	movw	r30, r10
   199de:	e6 5a       	subi	r30, 0xA6	; 166
   199e0:	ff 4f       	sbci	r31, 0xFF	; 255
   199e2:	80 81       	ld	r24, Z
   199e4:	91 81       	ldd	r25, Z+1	; 0x01
   199e6:	01 96       	adiw	r24, 0x01	; 1
   199e8:	19 f4       	brne	.+6      	; 0x199f0 <lif_writedirindex+0x52>
   199ea:	f5 01       	movw	r30, r10
   199ec:	d3 a2       	std	Z+35, r13	; 0x23
   199ee:	c2 a2       	std	Z+34, r12	; 0x22
   199f0:	f5 01       	movw	r30, r10
   199f2:	85 a5       	ldd	r24, Z+45	; 0x2d
   199f4:	96 a5       	ldd	r25, Z+46	; 0x2e
   199f6:	a7 a5       	ldd	r26, Z+47	; 0x2f
   199f8:	b0 a9       	ldd	r27, Z+48	; 0x30
   199fa:	ba 2f       	mov	r27, r26
   199fc:	a9 2f       	mov	r26, r25
   199fe:	98 2f       	mov	r25, r24
   19a00:	88 27       	eor	r24, r24
   19a02:	0d 2c       	mov	r0, r13
   19a04:	00 0c       	add	r0, r0
   19a06:	ee 08       	sbc	r14, r14
   19a08:	ff 08       	sbc	r15, r15
   19a0a:	35 e0       	ldi	r19, 0x05	; 5
   19a0c:	cc 0c       	add	r12, r12
   19a0e:	dd 1c       	adc	r13, r13
   19a10:	ee 1c       	adc	r14, r14
   19a12:	ff 1c       	adc	r15, r15
   19a14:	3a 95       	dec	r19
   19a16:	d1 f7       	brne	.-12     	; 0x19a0c <lif_writedirindex+0x6e>
   19a18:	c8 0e       	add	r12, r24
   19a1a:	d9 1e       	adc	r13, r25
   19a1c:	ea 1e       	adc	r14, r26
   19a1e:	fb 1e       	adc	r15, r27
   19a20:	be 01       	movw	r22, r28
   19a22:	6f 5f       	subi	r22, 0xFF	; 255
   19a24:	7f 4f       	sbci	r23, 0xFF	; 255
   19a26:	c5 01       	movw	r24, r10
   19a28:	db d8       	rcall	.-3658   	; 0x18be0 <lif_dir2str>
   19a2a:	00 e2       	ldi	r16, 0x20	; 32
   19a2c:	10 e0       	ldi	r17, 0x00	; 0
   19a2e:	a7 01       	movw	r20, r14
   19a30:	96 01       	movw	r18, r12
   19a32:	be 01       	movw	r22, r28
   19a34:	6f 5f       	subi	r22, 0xFF	; 255
   19a36:	7f 4f       	sbci	r23, 0xFF	; 255
   19a38:	c5 01       	movw	r24, r10
   19a3a:	0e 94 a6 c3 	call	0x1874c	; 0x1874c <lif_write>
   19a3e:	31 e0       	ldi	r19, 0x01	; 1
   19a40:	20 e0       	ldi	r18, 0x00	; 0
   19a42:	80 97       	sbiw	r24, 0x20	; 32
   19a44:	0c f4       	brge	.+2      	; 0x19a48 <lif_writedirindex+0xaa>
   19a46:	30 e0       	ldi	r19, 0x00	; 0
   19a48:	e3 2e       	mov	r14, r19
   19a4a:	f2 2e       	mov	r15, r18
   19a4c:	c7 01       	movw	r24, r14
   19a4e:	a0 96       	adiw	r28, 0x20	; 32
   19a50:	ea e0       	ldi	r30, 0x0A	; 10
   19a52:	0c 94 04 e6 	jmp	0x1cc08	; 0x1cc08 <__epilogue_restores__+0x10>

00019a56 <lif_writedirEOF>:
   19a56:	0f 93       	push	r16
   19a58:	1f 93       	push	r17
   19a5a:	cf 93       	push	r28
   19a5c:	df 93       	push	r29
   19a5e:	ec 01       	movw	r28, r24
   19a60:	8b 01       	movw	r16, r22
   19a62:	83 da       	rcall	.-2810   	; 0x18f6a <lif_dir_clear>
   19a64:	fe 01       	movw	r30, r28
   19a66:	e6 5a       	subi	r30, 0xA6	; 166
   19a68:	ff 4f       	sbci	r31, 0xFF	; 255
   19a6a:	8f ef       	ldi	r24, 0xFF	; 255
   19a6c:	9f ef       	ldi	r25, 0xFF	; 255
   19a6e:	91 83       	std	Z+1, r25	; 0x01
   19a70:	80 83       	st	Z, r24
   19a72:	1b a3       	std	Y+35, r17	; 0x23
   19a74:	0a a3       	std	Y+34, r16	; 0x22
   19a76:	b8 01       	movw	r22, r16
   19a78:	ce 01       	movw	r24, r28
   19a7a:	91 df       	rcall	.-222    	; 0x1999e <lif_writedirindex>
   19a7c:	df 91       	pop	r29
   19a7e:	cf 91       	pop	r28
   19a80:	1f 91       	pop	r17
   19a82:	0f 91       	pop	r16
   19a84:	08 95       	ret

00019a86 <lif_updatefree>:
   19a86:	2f 92       	push	r2
   19a88:	3f 92       	push	r3
   19a8a:	4f 92       	push	r4
   19a8c:	5f 92       	push	r5
   19a8e:	6f 92       	push	r6
   19a90:	7f 92       	push	r7
   19a92:	8f 92       	push	r8
   19a94:	af 92       	push	r10
   19a96:	bf 92       	push	r11
   19a98:	cf 92       	push	r12
   19a9a:	df 92       	push	r13
   19a9c:	ef 92       	push	r14
   19a9e:	ff 92       	push	r15
   19aa0:	0f 93       	push	r16
   19aa2:	1f 93       	push	r17
   19aa4:	cf 93       	push	r28
   19aa6:	df 93       	push	r29
   19aa8:	cd b7       	in	r28, 0x3d	; 61
   19aaa:	de b7       	in	r29, 0x3e	; 62
   19aac:	28 97       	sbiw	r28, 0x08	; 8
   19aae:	0f b6       	in	r0, 0x3f	; 63
   19ab0:	f8 94       	cli
   19ab2:	de bf       	out	0x3e, r29	; 62
   19ab4:	0f be       	out	0x3f, r0	; 63
   19ab6:	cd bf       	out	0x3d, r28	; 61
   19ab8:	98 87       	std	Y+8, r25	; 0x08
   19aba:	8f 83       	std	Y+7, r24	; 0x07
   19abc:	fc 01       	movw	r30, r24
   19abe:	24 84       	ldd	r2, Z+12	; 0x0c
   19ac0:	35 84       	ldd	r3, Z+13	; 0x0d
   19ac2:	46 84       	ldd	r4, Z+14	; 0x0e
   19ac4:	57 84       	ldd	r5, Z+15	; 0x0f
   19ac6:	80 89       	ldd	r24, Z+16	; 0x10
   19ac8:	91 89       	ldd	r25, Z+17	; 0x11
   19aca:	a2 89       	ldd	r26, Z+18	; 0x12
   19acc:	b3 89       	ldd	r27, Z+19	; 0x13
   19ace:	80 8f       	std	Z+24, r24	; 0x18
   19ad0:	91 8f       	std	Z+25, r25	; 0x19
   19ad2:	a2 8f       	std	Z+26, r26	; 0x1a
   19ad4:	b3 8f       	std	Z+27, r27	; 0x1b
   19ad6:	14 8a       	std	Z+20, r1	; 0x14
   19ad8:	15 8a       	std	Z+21, r1	; 0x15
   19ada:	16 8a       	std	Z+22, r1	; 0x16
   19adc:	17 8a       	std	Z+23, r1	; 0x17
   19ade:	17 8e       	std	Z+31, r1	; 0x1f
   19ae0:	16 8e       	std	Z+30, r1	; 0x1e
   19ae2:	15 8e       	std	Z+29, r1	; 0x1d
   19ae4:	14 8e       	std	Z+28, r1	; 0x1c
   19ae6:	11 a2       	std	Z+33, r1	; 0x21
   19ae8:	10 a2       	std	Z+32, r1	; 0x20
   19aea:	13 a2       	std	Z+35, r1	; 0x23
   19aec:	12 a2       	std	Z+34, r1	; 0x22
   19aee:	cc 24       	eor	r12, r12
   19af0:	c3 94       	inc	r12
   19af2:	d1 2c       	mov	r13, r1
   19af4:	0f ef       	ldi	r16, 0xFF	; 255
   19af6:	1f ef       	ldi	r17, 0xFF	; 255
   19af8:	e6 5a       	subi	r30, 0xA6	; 166
   19afa:	ff 4f       	sbci	r31, 0xFF	; 255
   19afc:	fc 83       	std	Y+4, r31	; 0x04
   19afe:	eb 83       	std	Y+3, r30	; 0x03
   19b00:	af 80       	ldd	r10, Y+7	; 0x07
   19b02:	b8 84       	ldd	r11, Y+8	; 0x08
   19b04:	fc e5       	ldi	r31, 0x5C	; 92
   19b06:	af 0e       	add	r10, r31
   19b08:	b1 1c       	adc	r11, r1
   19b0a:	8f 81       	ldd	r24, Y+7	; 0x07
   19b0c:	98 85       	ldd	r25, Y+8	; 0x08
   19b0e:	80 5a       	subi	r24, 0xA0	; 160
   19b10:	9f 4f       	sbci	r25, 0xFF	; 255
   19b12:	9e 83       	std	Y+6, r25	; 0x06
   19b14:	8d 83       	std	Y+5, r24	; 0x05
   19b16:	ef 81       	ldd	r30, Y+7	; 0x07
   19b18:	f8 85       	ldd	r31, Y+8	; 0x08
   19b1a:	e1 5b       	subi	r30, 0xB1	; 177
   19b1c:	ff 4f       	sbci	r31, 0xFF	; 255
   19b1e:	fa 83       	std	Y+2, r31	; 0x02
   19b20:	e9 83       	std	Y+1, r30	; 0x01
   19b22:	85 ef       	ldi	r24, 0xF5	; 245
   19b24:	9a e3       	ldi	r25, 0x3A	; 58
   19b26:	3c 01       	movw	r6, r24
   19b28:	76 01       	movw	r14, r12
   19b2a:	21 e0       	ldi	r18, 0x01	; 1
   19b2c:	e2 1a       	sub	r14, r18
   19b2e:	f1 08       	sbc	r15, r1
   19b30:	b7 01       	movw	r22, r14
   19b32:	8f 81       	ldd	r24, Y+7	; 0x07
   19b34:	98 85       	ldd	r25, Y+8	; 0x08
   19b36:	ca de       	rcall	.-620    	; 0x198cc <lif_readdirindex>
   19b38:	89 2b       	or	r24, r25
   19b3a:	19 f4       	brne	.+6      	; 0x19b42 <lif_updatefree+0xbc>
   19b3c:	80 e0       	ldi	r24, 0x00	; 0
   19b3e:	90 e0       	ldi	r25, 0x00	; 0
   19b40:	92 c0       	rjmp	.+292    	; 0x19c66 <lif_updatefree+0x1e0>
   19b42:	eb 81       	ldd	r30, Y+3	; 0x03
   19b44:	fc 81       	ldd	r31, Y+4	; 0x04
   19b46:	80 81       	ld	r24, Z
   19b48:	91 81       	ldd	r25, Z+1	; 0x01
   19b4a:	8f 3f       	cpi	r24, 0xFF	; 255
   19b4c:	ff ef       	ldi	r31, 0xFF	; 255
   19b4e:	9f 07       	cpc	r25, r31
   19b50:	c1 f4       	brne	.+48     	; 0x19b82 <lif_updatefree+0xfc>
   19b52:	ef 81       	ldd	r30, Y+7	; 0x07
   19b54:	f8 85       	ldd	r31, Y+8	; 0x08
   19b56:	0f 3f       	cpi	r16, 0xFF	; 255
   19b58:	2f ef       	ldi	r18, 0xFF	; 255
   19b5a:	12 07       	cpc	r17, r18
   19b5c:	09 f4       	brne	.+2      	; 0x19b60 <lif_updatefree+0xda>
   19b5e:	79 c0       	rjmp	.+242    	; 0x19c52 <lif_updatefree+0x1cc>
   19b60:	13 a3       	std	Z+35, r17	; 0x23
   19b62:	02 a3       	std	Z+34, r16	; 0x22
   19b64:	e0 1a       	sub	r14, r16
   19b66:	f1 0a       	sbc	r15, r17
   19b68:	86 8d       	ldd	r24, Z+30	; 0x1e
   19b6a:	97 8d       	ldd	r25, Z+31	; 0x1f
   19b6c:	8e 19       	sub	r24, r14
   19b6e:	9f 09       	sbc	r25, r15
   19b70:	97 8f       	std	Z+31, r25	; 0x1f
   19b72:	86 8f       	std	Z+30, r24	; 0x1e
   19b74:	b8 01       	movw	r22, r16
   19b76:	cf 01       	movw	r24, r30
   19b78:	6e df       	rcall	.-292    	; 0x19a56 <lif_writedirEOF>
   19b7a:	89 2b       	or	r24, r25
   19b7c:	09 f0       	breq	.+2      	; 0x19b80 <lif_updatefree+0xfa>
   19b7e:	6b c0       	rjmp	.+214    	; 0x19c56 <lif_updatefree+0x1d0>
   19b80:	dd cf       	rjmp	.-70     	; 0x19b3c <lif_updatefree+0xb6>
   19b82:	89 2b       	or	r24, r25
   19b84:	81 f4       	brne	.+32     	; 0x19ba6 <lif_updatefree+0x120>
   19b86:	0f 3f       	cpi	r16, 0xFF	; 255
   19b88:	ff ef       	ldi	r31, 0xFF	; 255
   19b8a:	1f 07       	cpc	r17, r31
   19b8c:	09 f4       	brne	.+2      	; 0x19b90 <lif_updatefree+0x10a>
   19b8e:	87 01       	movw	r16, r14
   19b90:	ef 81       	ldd	r30, Y+7	; 0x07
   19b92:	f8 85       	ldd	r31, Y+8	; 0x08
   19b94:	86 8d       	ldd	r24, Z+30	; 0x1e
   19b96:	97 8d       	ldd	r25, Z+31	; 0x1f
   19b98:	01 96       	adiw	r24, 0x01	; 1
   19b9a:	97 8f       	std	Z+31, r25	; 0x1f
   19b9c:	86 8f       	std	Z+30, r24	; 0x1e
   19b9e:	ff ef       	ldi	r31, 0xFF	; 255
   19ba0:	cf 1a       	sub	r12, r31
   19ba2:	df 0a       	sbc	r13, r31
   19ba4:	c1 cf       	rjmp	.-126    	; 0x19b28 <lif_updatefree+0xa2>
   19ba6:	f5 01       	movw	r30, r10
   19ba8:	80 81       	ld	r24, Z
   19baa:	91 81       	ldd	r25, Z+1	; 0x01
   19bac:	a2 81       	ldd	r26, Z+2	; 0x02
   19bae:	b3 81       	ldd	r27, Z+3	; 0x03
   19bb0:	82 15       	cp	r24, r2
   19bb2:	93 05       	cpc	r25, r3
   19bb4:	a4 05       	cpc	r26, r4
   19bb6:	b5 05       	cpc	r27, r5
   19bb8:	c0 f4       	brcc	.+48     	; 0x19bea <lif_updatefree+0x164>
   19bba:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   19bbe:	80 ff       	sbrs	r24, 0
   19bc0:	14 c0       	rjmp	.+40     	; 0x19bea <lif_updatefree+0x164>
   19bc2:	fa 81       	ldd	r31, Y+2	; 0x02
   19bc4:	ff 93       	push	r31
   19bc6:	29 81       	ldd	r18, Y+1	; 0x01
   19bc8:	2f 93       	push	r18
   19bca:	ef 81       	ldd	r30, Y+7	; 0x07
   19bcc:	f8 85       	ldd	r31, Y+8	; 0x08
   19bce:	81 81       	ldd	r24, Z+1	; 0x01
   19bd0:	8f 93       	push	r24
   19bd2:	80 81       	ld	r24, Z
   19bd4:	8f 93       	push	r24
   19bd6:	1f 92       	push	r1
   19bd8:	7f 92       	push	r7
   19bda:	6f 92       	push	r6
   19bdc:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   19be0:	0f b6       	in	r0, 0x3f	; 63
   19be2:	f8 94       	cli
   19be4:	de bf       	out	0x3e, r29	; 62
   19be6:	0f be       	out	0x3f, r0	; 63
   19be8:	cd bf       	out	0x3d, r28	; 61
   19bea:	ed 81       	ldd	r30, Y+5	; 0x05
   19bec:	fe 81       	ldd	r31, Y+6	; 0x06
   19bee:	80 81       	ld	r24, Z
   19bf0:	91 81       	ldd	r25, Z+1	; 0x01
   19bf2:	a2 81       	ldd	r26, Z+2	; 0x02
   19bf4:	b3 81       	ldd	r27, Z+3	; 0x03
   19bf6:	ef 81       	ldd	r30, Y+7	; 0x07
   19bf8:	f8 85       	ldd	r31, Y+8	; 0x08
   19bfa:	44 89       	ldd	r20, Z+20	; 0x14
   19bfc:	55 89       	ldd	r21, Z+21	; 0x15
   19bfe:	66 89       	ldd	r22, Z+22	; 0x16
   19c00:	77 89       	ldd	r23, Z+23	; 0x17
   19c02:	48 0f       	add	r20, r24
   19c04:	59 1f       	adc	r21, r25
   19c06:	6a 1f       	adc	r22, r26
   19c08:	7b 1f       	adc	r23, r27
   19c0a:	44 8b       	std	Z+20, r20	; 0x14
   19c0c:	55 8b       	std	Z+21, r21	; 0x15
   19c0e:	66 8b       	std	Z+22, r22	; 0x16
   19c10:	77 8b       	std	Z+23, r23	; 0x17
   19c12:	40 8d       	ldd	r20, Z+24	; 0x18
   19c14:	51 8d       	ldd	r21, Z+25	; 0x19
   19c16:	62 8d       	ldd	r22, Z+26	; 0x1a
   19c18:	73 8d       	ldd	r23, Z+27	; 0x1b
   19c1a:	48 1b       	sub	r20, r24
   19c1c:	59 0b       	sbc	r21, r25
   19c1e:	6a 0b       	sbc	r22, r26
   19c20:	7b 0b       	sbc	r23, r27
   19c22:	40 8f       	std	Z+24, r20	; 0x18
   19c24:	51 8f       	std	Z+25, r21	; 0x19
   19c26:	62 8f       	std	Z+26, r22	; 0x1a
   19c28:	73 8f       	std	Z+27, r23	; 0x1b
   19c2a:	24 8d       	ldd	r18, Z+28	; 0x1c
   19c2c:	35 8d       	ldd	r19, Z+29	; 0x1d
   19c2e:	2f 5f       	subi	r18, 0xFF	; 255
   19c30:	3f 4f       	sbci	r19, 0xFF	; 255
   19c32:	35 8f       	std	Z+29, r19	; 0x1d
   19c34:	24 8f       	std	Z+28, r18	; 0x1c
   19c36:	f5 01       	movw	r30, r10
   19c38:	40 81       	ld	r20, Z
   19c3a:	51 81       	ldd	r21, Z+1	; 0x01
   19c3c:	62 81       	ldd	r22, Z+2	; 0x02
   19c3e:	73 81       	ldd	r23, Z+3	; 0x03
   19c40:	1c 01       	movw	r2, r24
   19c42:	2d 01       	movw	r4, r26
   19c44:	24 0e       	add	r2, r20
   19c46:	35 1e       	adc	r3, r21
   19c48:	46 1e       	adc	r4, r22
   19c4a:	57 1e       	adc	r5, r23
   19c4c:	0f ef       	ldi	r16, 0xFF	; 255
   19c4e:	1f ef       	ldi	r17, 0xFF	; 255
   19c50:	a6 cf       	rjmp	.-180    	; 0x19b9e <lif_updatefree+0x118>
   19c52:	f3 a2       	std	Z+35, r15	; 0x23
   19c54:	e2 a2       	std	Z+34, r14	; 0x22
   19c56:	8f ef       	ldi	r24, 0xFF	; 255
   19c58:	9f ef       	ldi	r25, 0xFF	; 255
   19c5a:	ef 81       	ldd	r30, Y+7	; 0x07
   19c5c:	f8 85       	ldd	r31, Y+8	; 0x08
   19c5e:	91 a3       	std	Z+33, r25	; 0x21
   19c60:	80 a3       	std	Z+32, r24	; 0x20
   19c62:	8f 81       	ldd	r24, Y+7	; 0x07
   19c64:	98 85       	ldd	r25, Y+8	; 0x08
   19c66:	28 96       	adiw	r28, 0x08	; 8
   19c68:	0f b6       	in	r0, 0x3f	; 63
   19c6a:	f8 94       	cli
   19c6c:	de bf       	out	0x3e, r29	; 62
   19c6e:	0f be       	out	0x3f, r0	; 63
   19c70:	cd bf       	out	0x3d, r28	; 61
   19c72:	df 91       	pop	r29
   19c74:	cf 91       	pop	r28
   19c76:	1f 91       	pop	r17
   19c78:	0f 91       	pop	r16
   19c7a:	ff 90       	pop	r15
   19c7c:	ef 90       	pop	r14
   19c7e:	df 90       	pop	r13
   19c80:	cf 90       	pop	r12
   19c82:	bf 90       	pop	r11
   19c84:	af 90       	pop	r10
   19c86:	8f 90       	pop	r8
   19c88:	7f 90       	pop	r7
   19c8a:	6f 90       	pop	r6
   19c8c:	5f 90       	pop	r5
   19c8e:	4f 90       	pop	r4
   19c90:	3f 90       	pop	r3
   19c92:	2f 90       	pop	r2
   19c94:	08 95       	ret

00019c96 <lif_create_volume>:
/// @param[in] dirstart:   Directory start sector
/// @param[in] dirsectors: Directory sectors
/// @return pointer to LIF structure
MEMSPACE
lif_t *lif_create_volume(char *imagename, char *liflabel, long dirstart, long dirsectors, long filesectors)
{
   19c96:	a6 e1       	ldi	r26, 0x16	; 22
   19c98:	b1 e0       	ldi	r27, 0x01	; 1
   19c9a:	e1 e5       	ldi	r30, 0x51	; 81
   19c9c:	fe ec       	ldi	r31, 0xCE	; 206
   19c9e:	0c 94 e0 e5 	jmp	0x1cbc0	; 0x1cbc0 <__prologue_saves__>
   19ca2:	4c 01       	movw	r8, r24
   19ca4:	1b 01       	movw	r2, r22
   19ca6:	29 01       	movw	r4, r18
   19ca8:	3a 01       	movw	r6, r20
   19caa:	cd 5e       	subi	r28, 0xED	; 237
   19cac:	de 4f       	sbci	r29, 0xFE	; 254
   19cae:	e8 82       	st	Y, r14
   19cb0:	f9 82       	std	Y+1, r15	; 0x01
   19cb2:	0a 83       	std	Y+2, r16	; 0x02
   19cb4:	1b 83       	std	Y+3, r17	; 0x03
   19cb6:	c3 51       	subi	r28, 0x13	; 19
   19cb8:	d1 40       	sbci	r29, 0x01	; 1
   19cba:	c5 5f       	subi	r28, 0xF5	; 245
   19cbc:	de 4f       	sbci	r29, 0xFE	; 254
   19cbe:	a8 82       	st	Y, r10
   19cc0:	b9 82       	std	Y+1, r11	; 0x01
   19cc2:	ca 82       	std	Y+2, r12	; 0x02
   19cc4:	db 82       	std	Y+3, r13	; 0x03
   19cc6:	cb 50       	subi	r28, 0x0B	; 11
   19cc8:	d1 40       	sbci	r29, 0x01	; 1
    long i;
    long offset;
    long count;
    uint8_t buffer[LIF_SECTOR_SIZE];

    time_t t = time(NULL);
   19cca:	80 e0       	ldi	r24, 0x00	; 0
   19ccc:	90 e0       	ldi	r25, 0x00	; 0
   19cce:	0e 94 17 39 	call	0x722e	; 0x722e <time>
   19cd2:	6b 01       	movw	r12, r22
   19cd4:	7c 01       	movw	r14, r24

    lif_t *LIF = lif_calloc(sizeof(lif_t)+4);
   19cd6:	64 e7       	ldi	r22, 0x74	; 116
   19cd8:	70 e0       	ldi	r23, 0x00	; 0
   19cda:	80 e0       	ldi	r24, 0x00	; 0
   19cdc:	90 e0       	ldi	r25, 0x00	; 0
   19cde:	0e 94 6c c2 	call	0x184d8	; 0x184d8 <lif_calloc>
   19ce2:	5c 01       	movw	r10, r24
    if(LIF == NULL)
   19ce4:	89 2b       	or	r24, r25
   19ce6:	09 f4       	brne	.+2      	; 0x19cea <lif_create_volume+0x54>
   19ce8:	f9 c2       	rjmp	.+1522   	; 0x1a2dc <lif_create_volume+0x646>
        return(NULL);

	printf("Creating:%s, Label:[%s], Directory Start %ld, Directory Size: %ld, File Sectors:%ld\n",
   19cea:	c2 5f       	subi	r28, 0xF2	; 242
   19cec:	de 4f       	sbci	r29, 0xFE	; 254
   19cee:	28 81       	ld	r18, Y
   19cf0:	ce 50       	subi	r28, 0x0E	; 14
   19cf2:	d1 40       	sbci	r29, 0x01	; 1
   19cf4:	2f 93       	push	r18
   19cf6:	c3 5f       	subi	r28, 0xF3	; 243
   19cf8:	de 4f       	sbci	r29, 0xFE	; 254
   19cfa:	38 81       	ld	r19, Y
   19cfc:	cd 50       	subi	r28, 0x0D	; 13
   19cfe:	d1 40       	sbci	r29, 0x01	; 1
   19d00:	3f 93       	push	r19
   19d02:	c4 5f       	subi	r28, 0xF4	; 244
   19d04:	de 4f       	sbci	r29, 0xFE	; 254
   19d06:	48 81       	ld	r20, Y
   19d08:	cc 50       	subi	r28, 0x0C	; 12
   19d0a:	d1 40       	sbci	r29, 0x01	; 1
   19d0c:	4f 93       	push	r20
   19d0e:	c5 5f       	subi	r28, 0xF5	; 245
   19d10:	de 4f       	sbci	r29, 0xFE	; 254
   19d12:	58 81       	ld	r21, Y
   19d14:	cb 50       	subi	r28, 0x0B	; 11
   19d16:	d1 40       	sbci	r29, 0x01	; 1
   19d18:	5f 93       	push	r21
   19d1a:	ca 5e       	subi	r28, 0xEA	; 234
   19d1c:	de 4f       	sbci	r29, 0xFE	; 254
   19d1e:	88 81       	ld	r24, Y
   19d20:	c6 51       	subi	r28, 0x16	; 22
   19d22:	d1 40       	sbci	r29, 0x01	; 1
   19d24:	8f 93       	push	r24
   19d26:	cb 5e       	subi	r28, 0xEB	; 235
   19d28:	de 4f       	sbci	r29, 0xFE	; 254
   19d2a:	98 81       	ld	r25, Y
   19d2c:	c5 51       	subi	r28, 0x15	; 21
   19d2e:	d1 40       	sbci	r29, 0x01	; 1
   19d30:	9f 93       	push	r25
   19d32:	cc 5e       	subi	r28, 0xEC	; 236
   19d34:	de 4f       	sbci	r29, 0xFE	; 254
   19d36:	a8 81       	ld	r26, Y
   19d38:	c4 51       	subi	r28, 0x14	; 20
   19d3a:	d1 40       	sbci	r29, 0x01	; 1
   19d3c:	af 93       	push	r26
   19d3e:	cd 5e       	subi	r28, 0xED	; 237
   19d40:	de 4f       	sbci	r29, 0xFE	; 254
   19d42:	b8 81       	ld	r27, Y
   19d44:	c3 51       	subi	r28, 0x13	; 19
   19d46:	d1 40       	sbci	r29, 0x01	; 1
   19d48:	bf 93       	push	r27
   19d4a:	7f 92       	push	r7
   19d4c:	6f 92       	push	r6
   19d4e:	5f 92       	push	r5
   19d50:	4f 92       	push	r4
   19d52:	3f 92       	push	r3
   19d54:	2f 92       	push	r2
   19d56:	9f 92       	push	r9
   19d58:	8f 92       	push	r8
   19d5a:	80 ed       	ldi	r24, 0xD0	; 208
   19d5c:	9b e3       	ldi	r25, 0x3B	; 59
   19d5e:	1f 92       	push	r1
   19d60:	9f 93       	push	r25
   19d62:	8f 93       	push	r24
   19d64:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
		imagename, liflabel, dirstart, dirsectors, filesectors );

    if(debuglevel & 0x400)
   19d68:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   19d6c:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   19d70:	0f b6       	in	r0, 0x3f	; 63
   19d72:	f8 94       	cli
   19d74:	de bf       	out	0x3e, r29	; 62
   19d76:	0f be       	out	0x3f, r0	; 63
   19d78:	cd bf       	out	0x3d, r28	; 61
   19d7a:	92 ff       	sbrs	r25, 2
   19d7c:	04 c0       	rjmp	.+8      	; 0x19d86 <lif_create_volume+0xf0>
        lif_dump_vol(LIF,"lif_create_volume");
   19d7e:	6e ea       	ldi	r22, 0xAE	; 174
   19d80:	75 e1       	ldi	r23, 0x15	; 21
   19d82:	c5 01       	movw	r24, r10
    
    lif_image_clear(LIF);
   19d84:	01 d9       	rcall	.-3582   	; 0x18f88 <lif_dump_vol>
   19d86:	c5 01       	movw	r24, r10

    // Initialize volume header
    LIF->VOL.LIFid = 0x8000;
   19d88:	ea d8       	rcall	.-3628   	; 0x18f5e <lif_image_clear>
   19d8a:	80 e0       	ldi	r24, 0x00	; 0
   19d8c:	90 e8       	ldi	r25, 0x80	; 128
   19d8e:	d5 01       	movw	r26, r10
   19d90:	95 96       	adiw	r26, 0x25	; 37
   19d92:	9c 93       	st	X, r25
   19d94:	8e 93       	st	-X, r24
    lif_fixname(LIF->VOL.Label, liflabel, 6);
   19d96:	94 97       	sbiw	r26, 0x24	; 36
   19d98:	46 e0       	ldi	r20, 0x06	; 6
   19d9a:	50 e0       	ldi	r21, 0x00	; 0
   19d9c:	b1 01       	movw	r22, r2
   19d9e:	c5 01       	movw	r24, r10
   19da0:	86 96       	adiw	r24, 0x26	; 38
   19da2:	0e 94 93 c4 	call	0x18926	; 0x18926 <lif_fixname>
    LIF->VOL.DirStartSector = dirstart;
   19da6:	f5 01       	movw	r30, r10
   19da8:	45 a6       	std	Z+45, r4	; 0x2d
   19daa:	56 a6       	std	Z+46, r5	; 0x2e
   19dac:	67 a6       	std	Z+47, r6	; 0x2f
    LIF->VOL.DirSectors = dirsectors;
   19dae:	70 aa       	std	Z+48, r7	; 0x30
   19db0:	cd 5e       	subi	r28, 0xED	; 237
   19db2:	de 4f       	sbci	r29, 0xFE	; 254
   19db4:	28 81       	ld	r18, Y
   19db6:	39 81       	ldd	r19, Y+1	; 0x01
   19db8:	4a 81       	ldd	r20, Y+2	; 0x02
   19dba:	5b 81       	ldd	r21, Y+3	; 0x03
   19dbc:	c3 51       	subi	r28, 0x13	; 19
   19dbe:	d1 40       	sbci	r29, 0x01	; 1
   19dc0:	25 ab       	std	Z+53, r18	; 0x35
   19dc2:	36 ab       	std	Z+54, r19	; 0x36
   19dc4:	47 ab       	std	Z+55, r20	; 0x37
    LIF->VOL.System3000LIFid = 0x1000;
   19dc6:	50 af       	std	Z+56, r21	; 0x38
   19dc8:	80 e0       	ldi	r24, 0x00	; 0
   19dca:	90 e1       	ldi	r25, 0x10	; 16
   19dcc:	92 ab       	std	Z+50, r25	; 0x32
    LIF->VOL.tracks_per_side = 0;
   19dce:	81 ab       	std	Z+49, r24	; 0x31
   19dd0:	fd 96       	adiw	r30, 0x3d	; 61
   19dd2:	10 82       	st	Z, r1
   19dd4:	11 82       	std	Z+1, r1	; 0x01
   19dd6:	12 82       	std	Z+2, r1	; 0x02
    LIF->VOL.sides = 0;
   19dd8:	13 82       	std	Z+3, r1	; 0x03
   19dda:	34 96       	adiw	r30, 0x04	; 4
   19ddc:	10 82       	st	Z, r1
   19dde:	11 82       	std	Z+1, r1	; 0x01
   19de0:	12 82       	std	Z+2, r1	; 0x02
    LIF->VOL.sectors_per_track = 0;
   19de2:	13 82       	std	Z+3, r1	; 0x03
   19de4:	34 96       	adiw	r30, 0x04	; 4
   19de6:	10 82       	st	Z, r1
   19de8:	11 82       	std	Z+1, r1	; 0x01
   19dea:	12 82       	std	Z+2, r1	; 0x02
    ///@brief 0 causes time to return the current date

    lif_time2lifbcd(t, LIF->VOL.date);
   19dec:	13 82       	std	Z+3, r1	; 0x03
   19dee:	a5 01       	movw	r20, r10
   19df0:	47 5b       	subi	r20, 0xB7	; 183
   19df2:	5f 4f       	sbci	r21, 0xFF	; 255
   19df4:	c7 01       	movw	r24, r14
   19df6:	b6 01       	movw	r22, r12
   19df8:	0e 94 d8 c6 	call	0x18db0	; 0x18db0 <lif_time2lifbcd>

    // update LIF headers
    LIF->name = lif_stralloc(imagename);
   19dfc:	c4 01       	movw	r24, r8
   19dfe:	0e 94 a8 c2 	call	0x18550	; 0x18550 <lif_stralloc>
   19e02:	f5 01       	movw	r30, r10
   19e04:	91 83       	std	Z+1, r25	; 0x01
    if(LIF->name == NULL)
   19e06:	80 83       	st	Z, r24
   19e08:	89 2b       	or	r24, r25
   19e0a:	09 f4       	brne	.+2      	; 0x19e0e <lif_create_volume+0x178>
        lif_close_volume(LIF);
        return(NULL);
    }

    // Initilize all LIF headers
    LIF->filesectors = filesectors;
   19e0c:	5c c2       	rjmp	.+1208   	; 0x1a2c6 <lif_create_volume+0x630>
   19e0e:	c5 5f       	subi	r28, 0xF5	; 245
   19e10:	de 4f       	sbci	r29, 0xFE	; 254
   19e12:	28 81       	ld	r18, Y
   19e14:	39 81       	ldd	r19, Y+1	; 0x01
   19e16:	4a 81       	ldd	r20, Y+2	; 0x02
   19e18:	5b 81       	ldd	r21, Y+3	; 0x03
   19e1a:	cb 50       	subi	r28, 0x0B	; 11
   19e1c:	d1 40       	sbci	r29, 0x01	; 1
   19e1e:	20 8b       	std	Z+16, r18	; 0x10
   19e20:	31 8b       	std	Z+17, r19	; 0x11
   19e22:	42 8b       	std	Z+18, r20	; 0x12
    LIF->filestart = dirstart + dirsectors;
   19e24:	53 8b       	std	Z+19, r21	; 0x13
   19e26:	cd 5e       	subi	r28, 0xED	; 237
   19e28:	de 4f       	sbci	r29, 0xFE	; 254
   19e2a:	88 81       	ld	r24, Y
   19e2c:	99 81       	ldd	r25, Y+1	; 0x01
   19e2e:	aa 81       	ldd	r26, Y+2	; 0x02
   19e30:	bb 81       	ldd	r27, Y+3	; 0x03
   19e32:	c3 51       	subi	r28, 0x13	; 19
   19e34:	d1 40       	sbci	r29, 0x01	; 1
   19e36:	84 0d       	add	r24, r4
   19e38:	95 1d       	adc	r25, r5
   19e3a:	a6 1d       	adc	r26, r6
   19e3c:	b7 1d       	adc	r27, r7
   19e3e:	f5 01       	movw	r30, r10
   19e40:	84 87       	std	Z+12, r24	; 0x0c
   19e42:	95 87       	std	Z+13, r25	; 0x0d
   19e44:	a6 87       	std	Z+14, r26	; 0x0e
    LIF->sectors = (LIF->filestart+LIF->filesectors);
   19e46:	b7 87       	std	Z+15, r27	; 0x0f
   19e48:	82 0f       	add	r24, r18
   19e4a:	93 1f       	adc	r25, r19
   19e4c:	a4 1f       	adc	r26, r20
   19e4e:	b5 1f       	adc	r27, r21
   19e50:	84 83       	std	Z+4, r24	; 0x04
   19e52:	95 83       	std	Z+5, r25	; 0x05
   19e54:	a6 83       	std	Z+6, r26	; 0x06
    LIF->imagebytes = LIF->sectors * (long)LIF_SECTOR_SIZE;
   19e56:	b7 83       	std	Z+7, r27	; 0x07
   19e58:	ba 2f       	mov	r27, r26
   19e5a:	a9 2f       	mov	r26, r25
   19e5c:	98 2f       	mov	r25, r24
   19e5e:	88 27       	eor	r24, r24
   19e60:	80 87       	std	Z+8, r24	; 0x08
   19e62:	91 87       	std	Z+9, r25	; 0x09
   19e64:	a2 87       	std	Z+10, r26	; 0x0a
    LIF->freesectors = LIF->filesectors;
   19e66:	b3 87       	std	Z+11, r27	; 0x0b
   19e68:	20 8f       	std	Z+24, r18	; 0x18
   19e6a:	31 8f       	std	Z+25, r19	; 0x19
   19e6c:	42 8f       	std	Z+26, r20	; 0x1a
    LIF->usedsectors = 0;
   19e6e:	53 8f       	std	Z+27, r21	; 0x1b
   19e70:	14 8a       	std	Z+20, r1	; 0x14
   19e72:	15 8a       	std	Z+21, r1	; 0x15
   19e74:	16 8a       	std	Z+22, r1	; 0x16
    LIF->files = 0;
   19e76:	17 8a       	std	Z+23, r1	; 0x17
   19e78:	15 8e       	std	Z+29, r1	; 0x1d
    LIF->purged = 0;
   19e7a:	14 8e       	std	Z+28, r1	; 0x1c
   19e7c:	17 8e       	std	Z+31, r1	; 0x1f
    LIF->dirindex = 0;
   19e7e:	16 8e       	std	Z+30, r1	; 0x1e
   19e80:	11 a2       	std	Z+33, r1	; 0x21
    LIF->EOFindex = 0;
   19e82:	10 a2       	std	Z+32, r1	; 0x20
   19e84:	13 a2       	std	Z+35, r1	; 0x23

    memset(buffer,0,LIF_SECTOR_SIZE);
   19e86:	12 a2       	std	Z+34, r1	; 0x22
   19e88:	c1 2c       	mov	r12, r1
   19e8a:	dd 24       	eor	r13, r13
   19e8c:	d3 94       	inc	r13
   19e8e:	9e 01       	movw	r18, r28
   19e90:	2f 5f       	subi	r18, 0xFF	; 255
   19e92:	3f 4f       	sbci	r19, 0xFF	; 255
   19e94:	79 01       	movw	r14, r18
   19e96:	d9 01       	movw	r26, r18
   19e98:	f6 01       	movw	r30, r12
   19e9a:	1d 92       	st	X+, r1
   19e9c:	31 97       	sbiw	r30, 0x01	; 1

    lif_vol2str(LIF,buffer);
   19e9e:	e9 f7       	brne	.-6      	; 0x19e9a <lif_create_volume+0x204>
   19ea0:	b9 01       	movw	r22, r18
   19ea2:	c5 01       	movw	r24, r10
   19ea4:	0e 94 d0 c4 	call	0x189a0	; 0x189a0 <lif_vol2str>

    // Write Volume header
    LIF->fp = lif_open(LIF->name,"wb+");
   19ea8:	6e e9       	ldi	r22, 0x9E	; 158
   19eaa:	78 e0       	ldi	r23, 0x08	; 8
   19eac:	d5 01       	movw	r26, r10
   19eae:	8d 91       	ld	r24, X+
   19eb0:	9c 91       	ld	r25, X
   19eb2:	0e 94 c7 c2 	call	0x1858e	; 0x1858e <lif_open>
   19eb6:	f5 01       	movw	r30, r10
   19eb8:	93 83       	std	Z+3, r25	; 0x03
    if(LIF->fp == NULL)
   19eba:	82 83       	std	Z+2, r24	; 0x02
   19ebc:	89 2b       	or	r24, r25
   19ebe:	09 f4       	brne	.+2      	; 0x19ec2 <lif_create_volume+0x22c>
    }

    offset = 0;
    count = 0;

    size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   19ec0:	02 c2       	rjmp	.+1028   	; 0x1a2c6 <lif_create_volume+0x630>
   19ec2:	00 e0       	ldi	r16, 0x00	; 0
   19ec4:	11 e0       	ldi	r17, 0x01	; 1
   19ec6:	20 e0       	ldi	r18, 0x00	; 0
   19ec8:	30 e0       	ldi	r19, 0x00	; 0
   19eca:	a9 01       	movw	r20, r18
   19ecc:	b7 01       	movw	r22, r14
   19ece:	c5 01       	movw	r24, r10
   19ed0:	0e 94 a6 c3 	call	0x1874c	; 0x1874c <lif_write>
   19ed4:	9c 01       	movw	r18, r24
   19ed6:	99 0f       	add	r25, r25
   19ed8:	44 0b       	sbc	r20, r20
   19eda:	55 0b       	sbc	r21, r21
   19edc:	c9 5f       	subi	r28, 0xF9	; 249
   19ede:	de 4f       	sbci	r29, 0xFE	; 254
   19ee0:	28 83       	st	Y, r18
   19ee2:	39 83       	std	Y+1, r19	; 0x01
   19ee4:	4a 83       	std	Y+2, r20	; 0x02
   19ee6:	5b 83       	std	Y+3, r21	; 0x03
   19ee8:	c7 50       	subi	r28, 0x07	; 7

    if(size < LIF_SECTOR_SIZE)
   19eea:	d1 40       	sbci	r29, 0x01	; 1
   19eec:	2f 3f       	cpi	r18, 0xFF	; 255
   19eee:	31 05       	cpc	r19, r1
   19ef0:	41 05       	cpc	r20, r1
   19ef2:	51 05       	cpc	r21, r1
   19ef4:	09 f0       	breq	.+2      	; 0x19ef8 <lif_create_volume+0x262>
   19ef6:	0c f4       	brge	.+2      	; 0x19efa <lif_create_volume+0x264>
    }
    offset += size;
    ++count;


    memset(buffer,0,LIF_SECTOR_SIZE);
   19ef8:	e6 c1       	rjmp	.+972    	; 0x1a2c6 <lif_create_volume+0x630>
   19efa:	d7 01       	movw	r26, r14
   19efc:	f6 01       	movw	r30, r12
   19efe:	1d 92       	st	X+, r1
   19f00:	31 97       	sbiw	r30, 0x01	; 1

    // Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   19f02:	e9 f7       	brne	.-6      	; 0x19efe <lif_create_volume+0x268>
   19f04:	21 e0       	ldi	r18, 0x01	; 1
   19f06:	30 e0       	ldi	r19, 0x00	; 0
   19f08:	40 e0       	ldi	r20, 0x00	; 0
   19f0a:	50 e0       	ldi	r21, 0x00	; 0
   19f0c:	cd 5f       	subi	r28, 0xFD	; 253
   19f0e:	de 4f       	sbci	r29, 0xFE	; 254
   19f10:	28 83       	st	Y, r18
   19f12:	39 83       	std	Y+1, r19	; 0x01
   19f14:	4a 83       	std	Y+2, r20	; 0x02
   19f16:	5b 83       	std	Y+3, r21	; 0x03
   19f18:	c3 50       	subi	r28, 0x03	; 3
   19f1a:	d1 40       	sbci	r29, 0x01	; 1
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
            printf("\tWrote: %ld\r", count);
   19f1c:	47 01       	movw	r8, r14
   19f1e:	83 ec       	ldi	r24, 0xC3	; 195
   19f20:	9b e3       	ldi	r25, 0x3B	; 59


    memset(buffer,0,LIF_SECTOR_SIZE);

    // Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   19f22:	6c 01       	movw	r12, r24
   19f24:	cd 5f       	subi	r28, 0xFD	; 253
   19f26:	de 4f       	sbci	r29, 0xFE	; 254
   19f28:	88 81       	ld	r24, Y
   19f2a:	99 81       	ldd	r25, Y+1	; 0x01
   19f2c:	aa 81       	ldd	r26, Y+2	; 0x02
   19f2e:	bb 81       	ldd	r27, Y+3	; 0x03
   19f30:	c3 50       	subi	r28, 0x03	; 3
   19f32:	d1 40       	sbci	r29, 0x01	; 1
   19f34:	84 15       	cp	r24, r4
   19f36:	95 05       	cpc	r25, r5
   19f38:	a6 05       	cpc	r26, r6
   19f3a:	b7 05       	cpc	r27, r7
   19f3c:	0c f0       	brlt	.+2      	; 0x19f40 <lif_create_volume+0x2aa>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   19f3e:	64 c0       	rjmp	.+200    	; 0x1a008 <lif_create_volume+0x372>
   19f40:	00 e0       	ldi	r16, 0x00	; 0
   19f42:	11 e0       	ldi	r17, 0x01	; 1
   19f44:	c9 5f       	subi	r28, 0xF9	; 249
   19f46:	de 4f       	sbci	r29, 0xFE	; 254
   19f48:	28 81       	ld	r18, Y
   19f4a:	39 81       	ldd	r19, Y+1	; 0x01
   19f4c:	4a 81       	ldd	r20, Y+2	; 0x02
   19f4e:	5b 81       	ldd	r21, Y+3	; 0x03
   19f50:	c7 50       	subi	r28, 0x07	; 7
   19f52:	d1 40       	sbci	r29, 0x01	; 1
   19f54:	b4 01       	movw	r22, r8
   19f56:	c5 01       	movw	r24, r10
   19f58:	0e 94 a6 c3 	call	0x1874c	; 0x1874c <lif_write>
   19f5c:	09 2e       	mov	r0, r25
   19f5e:	00 0c       	add	r0, r0
   19f60:	aa 0b       	sbc	r26, r26
        if(size < LIF_SECTOR_SIZE)
   19f62:	bb 0b       	sbc	r27, r27
   19f64:	8f 3f       	cpi	r24, 0xFF	; 255
   19f66:	91 05       	cpc	r25, r1
   19f68:	a1 05       	cpc	r26, r1
   19f6a:	b1 05       	cpc	r27, r1
   19f6c:	09 f0       	breq	.+2      	; 0x19f70 <lif_create_volume+0x2da>
   19f6e:	0c f4       	brge	.+2      	; 0x19f72 <lif_create_volume+0x2dc>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   19f70:	aa c1       	rjmp	.+852    	; 0x1a2c6 <lif_create_volume+0x630>
   19f72:	c9 5f       	subi	r28, 0xF9	; 249
   19f74:	de 4f       	sbci	r29, 0xFE	; 254
   19f76:	28 81       	ld	r18, Y
   19f78:	39 81       	ldd	r19, Y+1	; 0x01
   19f7a:	4a 81       	ldd	r20, Y+2	; 0x02
   19f7c:	5b 81       	ldd	r21, Y+3	; 0x03
   19f7e:	c7 50       	subi	r28, 0x07	; 7
   19f80:	d1 40       	sbci	r29, 0x01	; 1
   19f82:	28 0f       	add	r18, r24
   19f84:	39 1f       	adc	r19, r25
   19f86:	4a 1f       	adc	r20, r26
   19f88:	5b 1f       	adc	r21, r27
   19f8a:	c9 5f       	subi	r28, 0xF9	; 249
   19f8c:	de 4f       	sbci	r29, 0xFE	; 254
   19f8e:	28 83       	st	Y, r18
   19f90:	39 83       	std	Y+1, r19	; 0x01
   19f92:	4a 83       	std	Y+2, r20	; 0x02
   19f94:	5b 83       	std	Y+3, r21	; 0x03
   19f96:	c7 50       	subi	r28, 0x07	; 7
            printf("\tWrote: %ld\r", count);
   19f98:	d1 40       	sbci	r29, 0x01	; 1
   19f9a:	ca 5f       	subi	r28, 0xFA	; 250
   19f9c:	de 4f       	sbci	r29, 0xFE	; 254
   19f9e:	38 81       	ld	r19, Y
   19fa0:	c6 50       	subi	r28, 0x06	; 6
   19fa2:	d1 40       	sbci	r29, 0x01	; 1
   19fa4:	3f 93       	push	r19
   19fa6:	cb 5f       	subi	r28, 0xFB	; 251
   19fa8:	de 4f       	sbci	r29, 0xFE	; 254
   19faa:	48 81       	ld	r20, Y
   19fac:	c5 50       	subi	r28, 0x05	; 5
   19fae:	d1 40       	sbci	r29, 0x01	; 1
   19fb0:	4f 93       	push	r20
   19fb2:	cc 5f       	subi	r28, 0xFC	; 252
   19fb4:	de 4f       	sbci	r29, 0xFE	; 254
   19fb6:	58 81       	ld	r21, Y
   19fb8:	c4 50       	subi	r28, 0x04	; 4
   19fba:	d1 40       	sbci	r29, 0x01	; 1
   19fbc:	5f 93       	push	r21
   19fbe:	cd 5f       	subi	r28, 0xFD	; 253
   19fc0:	de 4f       	sbci	r29, 0xFE	; 254
   19fc2:	88 81       	ld	r24, Y
   19fc4:	c3 50       	subi	r28, 0x03	; 3
   19fc6:	d1 40       	sbci	r29, 0x01	; 1
   19fc8:	8f 93       	push	r24
   19fca:	1f 92       	push	r1
   19fcc:	df 92       	push	r13
   19fce:	cf 92       	push	r12
   19fd0:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>


    memset(buffer,0,LIF_SECTOR_SIZE);

    // Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   19fd4:	cd 5f       	subi	r28, 0xFD	; 253
   19fd6:	de 4f       	sbci	r29, 0xFE	; 254
   19fd8:	28 81       	ld	r18, Y
   19fda:	39 81       	ldd	r19, Y+1	; 0x01
   19fdc:	4a 81       	ldd	r20, Y+2	; 0x02
   19fde:	5b 81       	ldd	r21, Y+3	; 0x03
   19fe0:	c3 50       	subi	r28, 0x03	; 3
   19fe2:	d1 40       	sbci	r29, 0x01	; 1
   19fe4:	2f 5f       	subi	r18, 0xFF	; 255
   19fe6:	3f 4f       	sbci	r19, 0xFF	; 255
   19fe8:	4f 4f       	sbci	r20, 0xFF	; 255
   19fea:	5f 4f       	sbci	r21, 0xFF	; 255
   19fec:	cd 5f       	subi	r28, 0xFD	; 253
   19fee:	de 4f       	sbci	r29, 0xFE	; 254
   19ff0:	28 83       	st	Y, r18
   19ff2:	39 83       	std	Y+1, r19	; 0x01
   19ff4:	4a 83       	std	Y+2, r20	; 0x02
   19ff6:	5b 83       	std	Y+3, r21	; 0x03
   19ff8:	c3 50       	subi	r28, 0x03	; 3
   19ffa:	d1 40       	sbci	r29, 0x01	; 1
   19ffc:	0f b6       	in	r0, 0x3f	; 63
   19ffe:	f8 94       	cli
   1a000:	de bf       	out	0x3e, r29	; 62
   1a002:	0f be       	out	0x3f, r0	; 63
   1a004:	cd bf       	out	0x3d, r28	; 61
            printf("\tWrote: %ld\r", count);
        ++count;
    }

    // Write Directory sectors
    lif_dir_clear(LIF);
   1a006:	8e cf       	rjmp	.-228    	; 0x19f24 <lif_create_volume+0x28e>
   1a008:	c5 01       	movw	r24, r10
   1a00a:	0e 94 b5 c7 	call	0x18f6a	; 0x18f6a <lif_dir_clear>
    LIF->DIR.FileType = 0xffff;
   1a00e:	8f ef       	ldi	r24, 0xFF	; 255
   1a010:	9f ef       	ldi	r25, 0xFF	; 255
   1a012:	f5 01       	movw	r30, r10
   1a014:	e6 5a       	subi	r30, 0xA6	; 166
   1a016:	ff 4f       	sbci	r31, 0xFF	; 255
   1a018:	91 83       	std	Z+1, r25	; 0x01
   1a01a:	80 83       	st	Z, r24
   1a01c:	74 01       	movw	r14, r8
   1a01e:	6e 01       	movw	r12, r28
   1a020:	91 e0       	ldi	r25, 0x01	; 1
   1a022:	c9 0e       	add	r12, r25

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);
   1a024:	d9 1e       	adc	r13, r25
   1a026:	b7 01       	movw	r22, r14
   1a028:	c5 01       	movw	r24, r10
   1a02a:	0e 94 f0 c5 	call	0x18be0	; 0x18be0 <lif_dir2str>
   1a02e:	a0 e2       	ldi	r26, 0x20	; 32
   1a030:	ea 0e       	add	r14, r26

    // Write Directory sectors
    lif_dir_clear(LIF);
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
   1a032:	f1 1c       	adc	r15, r1
   1a034:	ce 14       	cp	r12, r14
   1a036:	df 04       	cpc	r13, r15
   1a038:	b1 f7       	brne	.-20     	; 0x1a026 <lif_create_volume+0x390>
   1a03a:	c1 2c       	mov	r12, r1
   1a03c:	d1 2c       	mov	r13, r1
   1a03e:	76 01       	movw	r14, r12
   1a040:	fe 01       	movw	r30, r28
   1a042:	31 96       	adiw	r30, 0x01	; 1
   1a044:	cf 5f       	subi	r28, 0xFF	; 255
   1a046:	de 4f       	sbci	r29, 0xFE	; 254
   1a048:	f9 83       	std	Y+1, r31	; 0x01
   1a04a:	e8 83       	st	Y, r30
   1a04c:	c1 50       	subi	r28, 0x01	; 1
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        if((count % 100) == 0)
   1a04e:	d1 40       	sbci	r29, 0x01	; 1
   1a050:	84 e6       	ldi	r24, 0x64	; 100
   1a052:	28 2e       	mov	r2, r24
   1a054:	31 2c       	mov	r3, r1
   1a056:	41 2c       	mov	r4, r1
            printf("\tWrote: %ld\r", count);
   1a058:	51 2c       	mov	r5, r1
   1a05a:	86 eb       	ldi	r24, 0xB6	; 182
   1a05c:	9b e3       	ldi	r25, 0x3B	; 59
   1a05e:	3c 01       	movw	r6, r24
   1a060:	81 2c       	mov	r8, r1
   1a062:	cd 5f       	subi	r28, 0xFD	; 253
   1a064:	de 4f       	sbci	r29, 0xFE	; 254
   1a066:	28 81       	ld	r18, Y
   1a068:	39 81       	ldd	r19, Y+1	; 0x01
   1a06a:	4a 81       	ldd	r20, Y+2	; 0x02
   1a06c:	5b 81       	ldd	r21, Y+3	; 0x03
   1a06e:	c3 50       	subi	r28, 0x03	; 3
   1a070:	d1 40       	sbci	r29, 0x01	; 1
   1a072:	2c 0d       	add	r18, r12
   1a074:	3d 1d       	adc	r19, r13
   1a076:	4e 1d       	adc	r20, r14
   1a078:	5f 1d       	adc	r21, r15
   1a07a:	c1 5f       	subi	r28, 0xF1	; 241
   1a07c:	de 4f       	sbci	r29, 0xFE	; 254
   1a07e:	28 83       	st	Y, r18
   1a080:	39 83       	std	Y+1, r19	; 0x01
   1a082:	4a 83       	std	Y+2, r20	; 0x02
   1a084:	5b 83       	std	Y+3, r21	; 0x03
   1a086:	cf 50       	subi	r28, 0x0F	; 15
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);

    for(i=0;i<dirsectors;++i)
   1a088:	d1 40       	sbci	r29, 0x01	; 1
   1a08a:	cd 5e       	subi	r28, 0xED	; 237
   1a08c:	de 4f       	sbci	r29, 0xFE	; 254
   1a08e:	88 81       	ld	r24, Y
   1a090:	99 81       	ldd	r25, Y+1	; 0x01
   1a092:	aa 81       	ldd	r26, Y+2	; 0x02
   1a094:	bb 81       	ldd	r27, Y+3	; 0x03
   1a096:	c3 51       	subi	r28, 0x13	; 19
   1a098:	d1 40       	sbci	r29, 0x01	; 1
   1a09a:	c8 16       	cp	r12, r24
   1a09c:	d9 06       	cpc	r13, r25
   1a09e:	ea 06       	cpc	r14, r26
   1a0a0:	fb 06       	cpc	r15, r27
   1a0a2:	0c f0       	brlt	.+2      	; 0x1a0a6 <lif_create_volume+0x410>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   1a0a4:	67 c0       	rjmp	.+206    	; 0x1a174 <lif_create_volume+0x4de>
   1a0a6:	00 e0       	ldi	r16, 0x00	; 0
   1a0a8:	11 e0       	ldi	r17, 0x01	; 1
   1a0aa:	c9 5f       	subi	r28, 0xF9	; 249
   1a0ac:	de 4f       	sbci	r29, 0xFE	; 254
   1a0ae:	28 81       	ld	r18, Y
   1a0b0:	39 81       	ldd	r19, Y+1	; 0x01
   1a0b2:	4a 81       	ldd	r20, Y+2	; 0x02
   1a0b4:	5b 81       	ldd	r21, Y+3	; 0x03
   1a0b6:	c7 50       	subi	r28, 0x07	; 7
   1a0b8:	d1 40       	sbci	r29, 0x01	; 1
   1a0ba:	be 01       	movw	r22, r28
   1a0bc:	6f 5f       	subi	r22, 0xFF	; 255
   1a0be:	7f 4f       	sbci	r23, 0xFF	; 255
   1a0c0:	c5 01       	movw	r24, r10
   1a0c2:	0e 94 a6 c3 	call	0x1874c	; 0x1874c <lif_write>
   1a0c6:	09 2e       	mov	r0, r25
   1a0c8:	00 0c       	add	r0, r0
   1a0ca:	aa 0b       	sbc	r26, r26
        if(size < LIF_SECTOR_SIZE)
   1a0cc:	bb 0b       	sbc	r27, r27
   1a0ce:	8f 3f       	cpi	r24, 0xFF	; 255
   1a0d0:	91 05       	cpc	r25, r1
   1a0d2:	a1 05       	cpc	r26, r1
   1a0d4:	b1 05       	cpc	r27, r1
   1a0d6:	09 f0       	breq	.+2      	; 0x1a0da <lif_create_volume+0x444>
   1a0d8:	0c f4       	brge	.+2      	; 0x1a0dc <lif_create_volume+0x446>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   1a0da:	f5 c0       	rjmp	.+490    	; 0x1a2c6 <lif_create_volume+0x630>
   1a0dc:	c9 5f       	subi	r28, 0xF9	; 249
   1a0de:	de 4f       	sbci	r29, 0xFE	; 254
   1a0e0:	28 81       	ld	r18, Y
   1a0e2:	39 81       	ldd	r19, Y+1	; 0x01
   1a0e4:	4a 81       	ldd	r20, Y+2	; 0x02
   1a0e6:	5b 81       	ldd	r21, Y+3	; 0x03
   1a0e8:	c7 50       	subi	r28, 0x07	; 7
   1a0ea:	d1 40       	sbci	r29, 0x01	; 1
   1a0ec:	28 0f       	add	r18, r24
   1a0ee:	39 1f       	adc	r19, r25
   1a0f0:	4a 1f       	adc	r20, r26
   1a0f2:	5b 1f       	adc	r21, r27
   1a0f4:	c9 5f       	subi	r28, 0xF9	; 249
   1a0f6:	de 4f       	sbci	r29, 0xFE	; 254
   1a0f8:	28 83       	st	Y, r18
   1a0fa:	39 83       	std	Y+1, r19	; 0x01
   1a0fc:	4a 83       	std	Y+2, r20	; 0x02
   1a0fe:	5b 83       	std	Y+3, r21	; 0x03
   1a100:	c7 50       	subi	r28, 0x07	; 7
        if((count % 100) == 0)
   1a102:	d1 40       	sbci	r29, 0x01	; 1
   1a104:	c1 5f       	subi	r28, 0xF1	; 241
   1a106:	de 4f       	sbci	r29, 0xFE	; 254
   1a108:	68 81       	ld	r22, Y
   1a10a:	79 81       	ldd	r23, Y+1	; 0x01
   1a10c:	8a 81       	ldd	r24, Y+2	; 0x02
   1a10e:	9b 81       	ldd	r25, Y+3	; 0x03
   1a110:	cf 50       	subi	r28, 0x0F	; 15
   1a112:	d1 40       	sbci	r29, 0x01	; 1
   1a114:	a2 01       	movw	r20, r4
   1a116:	91 01       	movw	r18, r2
   1a118:	0e 94 80 e5 	call	0x1cb00	; 0x1cb00 <__divmodsi4>
   1a11c:	67 2b       	or	r22, r23
   1a11e:	68 2b       	or	r22, r24
   1a120:	69 2b       	or	r22, r25
            printf("\tWrote: %ld\r", count);
   1a122:	11 f5       	brne	.+68     	; 0x1a168 <lif_create_volume+0x4d2>
   1a124:	ce 5e       	subi	r28, 0xEE	; 238
   1a126:	de 4f       	sbci	r29, 0xFE	; 254
   1a128:	38 81       	ld	r19, Y
   1a12a:	c2 51       	subi	r28, 0x12	; 18
   1a12c:	d1 40       	sbci	r29, 0x01	; 1
   1a12e:	3f 93       	push	r19
   1a130:	cf 5e       	subi	r28, 0xEF	; 239
   1a132:	de 4f       	sbci	r29, 0xFE	; 254
   1a134:	48 81       	ld	r20, Y
   1a136:	c1 51       	subi	r28, 0x11	; 17
   1a138:	d1 40       	sbci	r29, 0x01	; 1
   1a13a:	4f 93       	push	r20
   1a13c:	c0 5f       	subi	r28, 0xF0	; 240
   1a13e:	de 4f       	sbci	r29, 0xFE	; 254
   1a140:	58 81       	ld	r21, Y
   1a142:	c0 51       	subi	r28, 0x10	; 16
   1a144:	d1 40       	sbci	r29, 0x01	; 1
   1a146:	5f 93       	push	r21
   1a148:	c1 5f       	subi	r28, 0xF1	; 241
   1a14a:	de 4f       	sbci	r29, 0xFE	; 254
   1a14c:	88 81       	ld	r24, Y
   1a14e:	cf 50       	subi	r28, 0x0F	; 15
   1a150:	d1 40       	sbci	r29, 0x01	; 1
   1a152:	8f 93       	push	r24
   1a154:	1f 92       	push	r1
   1a156:	7f 92       	push	r7
   1a158:	6f 92       	push	r6
   1a15a:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1a15e:	0f b6       	in	r0, 0x3f	; 63
   1a160:	f8 94       	cli
   1a162:	de bf       	out	0x3e, r29	; 62
   1a164:	0f be       	out	0x3f, r0	; 63
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);

    for(i=0;i<dirsectors;++i)
   1a166:	cd bf       	out	0x3d, r28	; 61
   1a168:	bf ef       	ldi	r27, 0xFF	; 255
   1a16a:	cb 1a       	sub	r12, r27
   1a16c:	db 0a       	sbc	r13, r27
   1a16e:	eb 0a       	sbc	r14, r27
   1a170:	fb 0a       	sbc	r15, r27
            printf("\tWrote: %ld\r", count);
        ++count;
    }

    // File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
   1a172:	77 cf       	rjmp	.-274    	; 0x1a062 <lif_create_volume+0x3cc>
   1a174:	80 e0       	ldi	r24, 0x00	; 0
   1a176:	91 e0       	ldi	r25, 0x01	; 1
   1a178:	cf 5f       	subi	r28, 0xFF	; 255
   1a17a:	de 4f       	sbci	r29, 0xFE	; 254
   1a17c:	a8 81       	ld	r26, Y
   1a17e:	b9 81       	ldd	r27, Y+1	; 0x01
   1a180:	c1 50       	subi	r28, 0x01	; 1
   1a182:	d1 40       	sbci	r29, 0x01	; 1
   1a184:	fc 01       	movw	r30, r24
   1a186:	1d 92       	st	X+, r1
   1a188:	31 97       	sbiw	r30, 0x01	; 1
    for(i=0;i<filesectors;++i)
   1a18a:	e9 f7       	brne	.-6      	; 0x1a186 <lif_create_volume+0x4f0>
   1a18c:	41 2c       	mov	r4, r1
   1a18e:	51 2c       	mov	r5, r1
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        if((count % 100) == 0)
            printf("\tWrote: %ld\r", count);
   1a190:	32 01       	movw	r6, r4
   1a192:	89 ea       	ldi	r24, 0xA9	; 169
   1a194:	9b e3       	ldi	r25, 0x3B	; 59
   1a196:	9c 01       	movw	r18, r24
   1a198:	40 e0       	ldi	r20, 0x00	; 0
   1a19a:	cd 5f       	subi	r28, 0xFD	; 253
   1a19c:	de 4f       	sbci	r29, 0xFE	; 254
   1a19e:	28 83       	st	Y, r18
   1a1a0:	39 83       	std	Y+1, r19	; 0x01
   1a1a2:	4a 83       	std	Y+2, r20	; 0x02
   1a1a4:	c3 50       	subi	r28, 0x03	; 3
   1a1a6:	d1 40       	sbci	r29, 0x01	; 1
   1a1a8:	c1 5f       	subi	r28, 0xF1	; 241
   1a1aa:	de 4f       	sbci	r29, 0xFE	; 254
   1a1ac:	c8 80       	ld	r12, Y
   1a1ae:	d9 80       	ldd	r13, Y+1	; 0x01
   1a1b0:	ea 80       	ldd	r14, Y+2	; 0x02
   1a1b2:	fb 80       	ldd	r15, Y+3	; 0x03
   1a1b4:	cf 50       	subi	r28, 0x0F	; 15
   1a1b6:	d1 40       	sbci	r29, 0x01	; 1
   1a1b8:	c4 0c       	add	r12, r4
   1a1ba:	d5 1c       	adc	r13, r5
   1a1bc:	e6 1c       	adc	r14, r6
        ++count;
    }

    // File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
    for(i=0;i<filesectors;++i)
   1a1be:	f7 1c       	adc	r15, r7
   1a1c0:	c5 5f       	subi	r28, 0xF5	; 245
   1a1c2:	de 4f       	sbci	r29, 0xFE	; 254
   1a1c4:	28 81       	ld	r18, Y
   1a1c6:	39 81       	ldd	r19, Y+1	; 0x01
   1a1c8:	4a 81       	ldd	r20, Y+2	; 0x02
   1a1ca:	5b 81       	ldd	r21, Y+3	; 0x03
   1a1cc:	cb 50       	subi	r28, 0x0B	; 11
   1a1ce:	d1 40       	sbci	r29, 0x01	; 1
   1a1d0:	42 16       	cp	r4, r18
   1a1d2:	53 06       	cpc	r5, r19
   1a1d4:	64 06       	cpc	r6, r20
   1a1d6:	75 06       	cpc	r7, r21
   1a1d8:	0c f0       	brlt	.+2      	; 0x1a1dc <lif_create_volume+0x546>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   1a1da:	59 c0       	rjmp	.+178    	; 0x1a28e <lif_create_volume+0x5f8>
   1a1dc:	00 e0       	ldi	r16, 0x00	; 0
   1a1de:	11 e0       	ldi	r17, 0x01	; 1
   1a1e0:	c9 5f       	subi	r28, 0xF9	; 249
   1a1e2:	de 4f       	sbci	r29, 0xFE	; 254
   1a1e4:	28 81       	ld	r18, Y
   1a1e6:	39 81       	ldd	r19, Y+1	; 0x01
   1a1e8:	4a 81       	ldd	r20, Y+2	; 0x02
   1a1ea:	5b 81       	ldd	r21, Y+3	; 0x03
   1a1ec:	c7 50       	subi	r28, 0x07	; 7
   1a1ee:	d1 40       	sbci	r29, 0x01	; 1
   1a1f0:	be 01       	movw	r22, r28
   1a1f2:	6f 5f       	subi	r22, 0xFF	; 255
   1a1f4:	7f 4f       	sbci	r23, 0xFF	; 255
   1a1f6:	c5 01       	movw	r24, r10
   1a1f8:	0e 94 a6 c3 	call	0x1874c	; 0x1874c <lif_write>
   1a1fc:	09 2e       	mov	r0, r25
   1a1fe:	00 0c       	add	r0, r0
   1a200:	aa 0b       	sbc	r26, r26
        if(size < LIF_SECTOR_SIZE)
   1a202:	bb 0b       	sbc	r27, r27
   1a204:	8f 3f       	cpi	r24, 0xFF	; 255
   1a206:	91 05       	cpc	r25, r1
   1a208:	a1 05       	cpc	r26, r1
   1a20a:	b1 05       	cpc	r27, r1
   1a20c:	09 f0       	breq	.+2      	; 0x1a210 <lif_create_volume+0x57a>
   1a20e:	0c f4       	brge	.+2      	; 0x1a212 <lif_create_volume+0x57c>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   1a210:	5a c0       	rjmp	.+180    	; 0x1a2c6 <lif_create_volume+0x630>
   1a212:	c9 5f       	subi	r28, 0xF9	; 249
   1a214:	de 4f       	sbci	r29, 0xFE	; 254
   1a216:	28 81       	ld	r18, Y
   1a218:	39 81       	ldd	r19, Y+1	; 0x01
   1a21a:	4a 81       	ldd	r20, Y+2	; 0x02
   1a21c:	5b 81       	ldd	r21, Y+3	; 0x03
   1a21e:	c7 50       	subi	r28, 0x07	; 7
   1a220:	d1 40       	sbci	r29, 0x01	; 1
   1a222:	28 0f       	add	r18, r24
   1a224:	39 1f       	adc	r19, r25
   1a226:	4a 1f       	adc	r20, r26
   1a228:	5b 1f       	adc	r21, r27
   1a22a:	c9 5f       	subi	r28, 0xF9	; 249
   1a22c:	de 4f       	sbci	r29, 0xFE	; 254
   1a22e:	28 83       	st	Y, r18
   1a230:	39 83       	std	Y+1, r19	; 0x01
   1a232:	4a 83       	std	Y+2, r20	; 0x02
   1a234:	5b 83       	std	Y+3, r21	; 0x03
   1a236:	c7 50       	subi	r28, 0x07	; 7
        if((count % 100) == 0)
   1a238:	d1 40       	sbci	r29, 0x01	; 1
   1a23a:	c7 01       	movw	r24, r14
   1a23c:	b6 01       	movw	r22, r12
   1a23e:	24 e6       	ldi	r18, 0x64	; 100
   1a240:	30 e0       	ldi	r19, 0x00	; 0
   1a242:	40 e0       	ldi	r20, 0x00	; 0
   1a244:	50 e0       	ldi	r21, 0x00	; 0
   1a246:	0e 94 80 e5 	call	0x1cb00	; 0x1cb00 <__divmodsi4>
   1a24a:	67 2b       	or	r22, r23
   1a24c:	68 2b       	or	r22, r24
   1a24e:	69 2b       	or	r22, r25
            printf("\tWrote: %ld\r", count);
   1a250:	c1 f4       	brne	.+48     	; 0x1a282 <lif_create_volume+0x5ec>
   1a252:	ff 92       	push	r15
   1a254:	ef 92       	push	r14
   1a256:	df 92       	push	r13
   1a258:	cf 92       	push	r12
   1a25a:	1f 92       	push	r1
   1a25c:	cc 5f       	subi	r28, 0xFC	; 252
   1a25e:	de 4f       	sbci	r29, 0xFE	; 254
   1a260:	38 81       	ld	r19, Y
   1a262:	c4 50       	subi	r28, 0x04	; 4
   1a264:	d1 40       	sbci	r29, 0x01	; 1
   1a266:	3f 93       	push	r19
   1a268:	cd 5f       	subi	r28, 0xFD	; 253
   1a26a:	de 4f       	sbci	r29, 0xFE	; 254
   1a26c:	48 81       	ld	r20, Y
   1a26e:	c3 50       	subi	r28, 0x03	; 3
   1a270:	d1 40       	sbci	r29, 0x01	; 1
   1a272:	4f 93       	push	r20
   1a274:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1a278:	0f b6       	in	r0, 0x3f	; 63
   1a27a:	f8 94       	cli
   1a27c:	de bf       	out	0x3e, r29	; 62
   1a27e:	0f be       	out	0x3f, r0	; 63
        ++count;
    }

    // File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
    for(i=0;i<filesectors;++i)
   1a280:	cd bf       	out	0x3d, r28	; 61
   1a282:	9f ef       	ldi	r25, 0xFF	; 255
   1a284:	49 1a       	sub	r4, r25
   1a286:	59 0a       	sbc	r5, r25
   1a288:	69 0a       	sbc	r6, r25
   1a28a:	79 0a       	sbc	r7, r25
        offset += size;
        if((count % 100) == 0)
            printf("\tWrote: %ld\r", count);
        ++count;
    }
    printf("\tWrote: %ld\n", count);
   1a28c:	8d cf       	rjmp	.-230    	; 0x1a1a8 <lif_create_volume+0x512>
   1a28e:	ff 92       	push	r15
   1a290:	ef 92       	push	r14
   1a292:	df 92       	push	r13
   1a294:	cf 92       	push	r12
   1a296:	8c e9       	ldi	r24, 0x9C	; 156
   1a298:	9b e3       	ldi	r25, 0x3B	; 59
   1a29a:	1f 92       	push	r1
   1a29c:	9f 93       	push	r25
   1a29e:	8f 93       	push	r24
   1a2a0:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
/// @return void
MEMSPACE
void lif_rewinddir(lif_t *LIF)
{
    // Directory index
    LIF->dirindex = -1;
   1a2a4:	8f ef       	ldi	r24, 0xFF	; 255
   1a2a6:	9f ef       	ldi	r25, 0xFF	; 255
   1a2a8:	d5 01       	movw	r26, r10
   1a2aa:	91 96       	adiw	r26, 0x21	; 33
   1a2ac:	9c 93       	st	X, r25
   1a2ae:	8e 93       	st	-X, r24
    printf("\tWrote: %ld\n", count);

    lif_rewinddir(LIF);

    // As a sanity check verify basic values
    if( !lif_check_volume(LIF) )
   1a2b0:	90 97       	sbiw	r26, 0x20	; 32
   1a2b2:	c5 01       	movw	r24, r10
   1a2b4:	0e 94 57 c9 	call	0x192ae	; 0x192ae <lif_check_volume>
   1a2b8:	0f b6       	in	r0, 0x3f	; 63
   1a2ba:	f8 94       	cli
   1a2bc:	de bf       	out	0x3e, r29	; 62
   1a2be:	0f be       	out	0x3f, r0	; 63
   1a2c0:	cd bf       	out	0x3d, r28	; 61
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a2c2:	89 2b       	or	r24, r25
   1a2c4:	19 f4       	brne	.+6      	; 0x1a2cc <lif_create_volume+0x636>
   1a2c6:	c5 01       	movw	r24, r10
   1a2c8:	80 da       	rcall	.-2816   	; 0x197ca <lif_close_volume>
        lif_closedir(LIF);
        return(NULL);
    }

    // Scan directory and verify values
    if( !lif_updatefree(LIF))
   1a2ca:	08 c0       	rjmp	.+16     	; 0x1a2dc <lif_create_volume+0x646>
   1a2cc:	c5 01       	movw	r24, r10
   1a2ce:	db db       	rcall	.-2122   	; 0x19a86 <lif_updatefree>
   1a2d0:	7c 01       	movw	r14, r24
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a2d2:	89 2b       	or	r24, r25
   1a2d4:	31 f4       	brne	.+12     	; 0x1a2e2 <lif_create_volume+0x64c>
   1a2d6:	c5 01       	movw	r24, r10

    // Scan directory and verify values
    if( !lif_updatefree(LIF))
    {
        lif_closedir(LIF);
        return(NULL);
   1a2d8:	78 da       	rcall	.-2832   	; 0x197ca <lif_close_volume>

    time_t t = time(NULL);

    lif_t *LIF = lif_calloc(sizeof(lif_t)+4);
    if(LIF == NULL)
        return(NULL);
   1a2da:	04 c0       	rjmp	.+8      	; 0x1a2e4 <lif_create_volume+0x64e>
   1a2dc:	e1 2c       	mov	r14, r1
   1a2de:	f1 2c       	mov	r15, r1
   1a2e0:	01 c0       	rjmp	.+2      	; 0x1a2e4 <lif_create_volume+0x64e>
        lif_closedir(LIF);
        return(NULL);
    }

    return(LIF);
}
   1a2e2:	75 01       	movw	r14, r10
   1a2e4:	c7 01       	movw	r24, r14
   1a2e6:	ca 5e       	subi	r28, 0xEA	; 234
   1a2e8:	de 4f       	sbci	r29, 0xFE	; 254
   1a2ea:	e2 e1       	ldi	r30, 0x12	; 18
   1a2ec:	0c 94 fc e5 	jmp	0x1cbf8	; 0x1cbf8 <__epilogue_restores__>

0001a2f0 <lif_newdir>:
/// @param[in] *LIF: LIF pointer
/// @param[in] sectors: try to find specified free space
/// @return index or free record or -1 on error
MEMSPACE
int lif_newdir(lif_t *LIF, long sectors)
{
   1a2f0:	ac e0       	ldi	r26, 0x0C	; 12
   1a2f2:	b0 e0       	ldi	r27, 0x00	; 0
   1a2f4:	ee e7       	ldi	r30, 0x7E	; 126
   1a2f6:	f1 ed       	ldi	r31, 0xD1	; 209
   1a2f8:	0c 94 e0 e5 	jmp	0x1cbc0	; 0x1cbc0 <__prologue_saves__>
   1a2fc:	9c 87       	std	Y+12, r25	; 0x0c
   1a2fe:	8b 87       	std	Y+11, r24	; 0x0b
   1a300:	6a 01       	movw	r12, r20
   1a302:	7b 01       	movw	r14, r22

    // Directory index
    index = 0;

    // Start of free space
    start = LIF->filestart;
   1a304:	fc 01       	movw	r30, r24
   1a306:	84 84       	ldd	r8, Z+12	; 0x0c
   1a308:	95 84       	ldd	r9, Z+13	; 0x0d
   1a30a:	a6 84       	ldd	r10, Z+14	; 0x0e

    // Update all file information
    if(lif_updatefree(LIF) == NULL)
   1a30c:	b7 84       	ldd	r11, Z+15	; 0x0f
   1a30e:	bb db       	rcall	.-2186   	; 0x19a86 <lif_updatefree>
   1a310:	89 2b       	or	r24, r25
    {
        printf("lif_newdir: not enough free space:[%ld] for size:[%ld]\n", (long)LIF->freesectors, (long) sectors);
   1a312:	b1 f4       	brne	.+44     	; 0x1a340 <lif_newdir+0x50>
   1a314:	ff 92       	push	r15
   1a316:	ef 92       	push	r14
   1a318:	df 92       	push	r13
   1a31a:	cf 92       	push	r12
   1a31c:	eb 85       	ldd	r30, Y+11	; 0x0b
   1a31e:	fc 85       	ldd	r31, Y+12	; 0x0c
   1a320:	83 8d       	ldd	r24, Z+27	; 0x1b
   1a322:	8f 93       	push	r24
   1a324:	82 8d       	ldd	r24, Z+26	; 0x1a
   1a326:	8f 93       	push	r24
   1a328:	81 8d       	ldd	r24, Z+25	; 0x19
   1a32a:	8f 93       	push	r24
   1a32c:	80 8d       	ldd	r24, Z+24	; 0x18
   1a32e:	8f 93       	push	r24
   1a330:	8d eb       	ldi	r24, 0xBD	; 189
   1a332:	9a e3       	ldi	r25, 0x3A	; 58
   1a334:	1f 92       	push	r1
   1a336:	9f 93       	push	r25
   1a338:	8f 93       	push	r24
   1a33a:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
        return(-1);
    }

    // Not enough room ?
    if(sectors > (long)LIF->freesectors)
   1a33e:	2c c0       	rjmp	.+88     	; 0x1a398 <lif_newdir+0xa8>
   1a340:	eb 85       	ldd	r30, Y+11	; 0x0b
   1a342:	fc 85       	ldd	r31, Y+12	; 0x0c
   1a344:	80 8d       	ldd	r24, Z+24	; 0x18
   1a346:	91 8d       	ldd	r25, Z+25	; 0x19
   1a348:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a34a:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a34c:	8c 15       	cp	r24, r12
   1a34e:	9d 05       	cpc	r25, r13
   1a350:	ae 05       	cpc	r26, r14
   1a352:	bf 05       	cpc	r27, r15
   1a354:	b4 f0       	brlt	.+44     	; 0x1a382 <lif_newdir+0x92>
   1a356:	44 24       	eor	r4, r4
   1a358:	43 94       	inc	r4
   1a35a:	51 2c       	mov	r5, r1
   1a35c:	61 2c       	mov	r6, r1
#endif
            break;
        }

        // We hit the EOF record
        if(LIF->DIR.FileType == 0xffff)
   1a35e:	71 2c       	mov	r7, r1
   1a360:	e6 5a       	subi	r30, 0xA6	; 166
   1a362:	ff 4f       	sbci	r31, 0xFF	; 255
   1a364:	fc 83       	std	Y+4, r31	; 0x04
   1a366:	eb 83       	std	Y+3, r30	; 0x03
   1a368:	8b 85       	ldd	r24, Y+11	; 0x0b
   1a36a:	9c 85       	ldd	r25, Y+12	; 0x0c
   1a36c:	84 5a       	subi	r24, 0xA4	; 164
   1a36e:	9f 4f       	sbci	r25, 0xFF	; 255
   1a370:	9a 83       	std	Y+2, r25	; 0x02
                freestate = 0;  // Try again
        }
        
        // Computed start of next record
        // Note: MUST be <= actual start of next VALID record or we have overlapping records!
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   1a372:	89 83       	std	Y+1, r24	; 0x01
   1a374:	eb 85       	ldd	r30, Y+11	; 0x0b
   1a376:	fc 85       	ldd	r31, Y+12	; 0x0c
   1a378:	e0 5a       	subi	r30, 0xA0	; 160
   1a37a:	ff 4f       	sbci	r31, 0xFF	; 255
   1a37c:	fe 83       	std	Y+6, r31	; 0x06
   1a37e:	ed 83       	std	Y+5, r30	; 0x05
    }

    // Not enough room ?
    if(sectors > (long)LIF->freesectors)
    {
        printf("lif_newdir: not enough free space:[%ld]\n", (long)LIF->freesectors);
   1a380:	23 c0       	rjmp	.+70     	; 0x1a3c8 <lif_newdir+0xd8>
   1a382:	bf 93       	push	r27
   1a384:	af 93       	push	r26
   1a386:	9f 93       	push	r25
   1a388:	8f 93       	push	r24
   1a38a:	84 e9       	ldi	r24, 0x94	; 148
   1a38c:	9a e3       	ldi	r25, 0x3A	; 58
   1a38e:	1f 92       	push	r1
   1a390:	9f 93       	push	r25
   1a392:	8f 93       	push	r24
   1a394:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
        return(-1);
   1a398:	0f b6       	in	r0, 0x3f	; 63
   1a39a:	f8 94       	cli
   1a39c:	de bf       	out	0x3e, r29	; 62
   1a39e:	0f be       	out	0x3f, r0	; 63
   1a3a0:	cd bf       	out	0x3d, r28	; 61
#endif
            break;
        }

        // We hit the EOF record
        if(LIF->DIR.FileType == 0xffff)
   1a3a2:	05 c1       	rjmp	.+522    	; 0x1a5ae <lif_newdir+0x2be>
   1a3a4:	eb 81       	ldd	r30, Y+3	; 0x03
   1a3a6:	fc 81       	ldd	r31, Y+4	; 0x04
   1a3a8:	80 81       	ld	r24, Z
   1a3aa:	91 81       	ldd	r25, Z+1	; 0x01
   1a3ac:	8f 3f       	cpi	r24, 0xFF	; 255
   1a3ae:	ff ef       	ldi	r31, 0xFF	; 255
   1a3b0:	9f 07       	cpc	r25, r31
            return(index);
        }


        // PURGED records
        if(LIF->DIR.FileType == 0)
   1a3b2:	a1 f0       	breq	.+40     	; 0x1a3dc <lif_newdir+0xec>
   1a3b4:	89 2b       	or	r24, r25
   1a3b6:	09 f0       	breq	.+2      	; 0x1a3ba <lif_newdir+0xca>
        {
            if(freestate == 0)
   1a3b8:	d0 c0       	rjmp	.+416    	; 0x1a55a <lif_newdir+0x26a>
   1a3ba:	61 14       	cp	r6, r1
   1a3bc:	71 04       	cpc	r7, r1
   1a3be:	09 f4       	brne	.+2      	; 0x1a3c2 <lif_newdir+0xd2>
   1a3c0:	c3 c0       	rjmp	.+390    	; 0x1a548 <lif_newdir+0x258>
   1a3c2:	9f ef       	ldi	r25, 0xFF	; 255
   1a3c4:	49 1a       	sub	r4, r25
   1a3c6:	59 0a       	sbc	r5, r25
   1a3c8:	82 01       	movw	r16, r4
   1a3ca:	01 50       	subi	r16, 0x01	; 1

    // Update free space and EOF pointers
    while(1)
    {
        // Write new EOF after current one
        if( !lif_readdirindex(LIF,index) )
   1a3cc:	11 09       	sbc	r17, r1
   1a3ce:	b8 01       	movw	r22, r16
   1a3d0:	8b 85       	ldd	r24, Y+11	; 0x0b
   1a3d2:	9c 85       	ldd	r25, Y+12	; 0x0c
   1a3d4:	7b da       	rcall	.-2826   	; 0x198cc <lif_readdirindex>
   1a3d6:	89 2b       	or	r24, r25
   1a3d8:	29 f7       	brne	.-54     	; 0x1a3a4 <lif_newdir+0xb4>
        if(LIF->DIR.FileType == 0xffff)
        {

            // Was enough free space found in purged area ?
            // Do NOT need to update EOF!
            if(freestate == 2)
   1a3da:	e9 c0       	rjmp	.+466    	; 0x1a5ae <lif_newdir+0x2be>
   1a3dc:	22 e0       	ldi	r18, 0x02	; 2
   1a3de:	62 16       	cp	r6, r18
   1a3e0:	71 04       	cpc	r7, r1
   1a3e2:	09 f0       	breq	.+2      	; 0x1a3e6 <lif_newdir+0xf6>
            {
                // Update free pace for new file
                lif_dir_clear(LIF);
   1a3e4:	46 c0       	rjmp	.+140    	; 0x1a472 <lif_newdir+0x182>
   1a3e6:	8b 85       	ldd	r24, Y+11	; 0x0b
   1a3e8:	9c 85       	ldd	r25, Y+12	; 0x0c
   1a3ea:	0e 94 b5 c7 	call	0x18f6a	; 0x18f6a <lif_dir_clear>
                LIF->DIR.FileStartSector = freestart;
   1a3ee:	eb 85       	ldd	r30, Y+11	; 0x0b
   1a3f0:	fc 85       	ldd	r31, Y+12	; 0x0c
   1a3f2:	e4 5a       	subi	r30, 0xA4	; 164
   1a3f4:	ff 4f       	sbci	r31, 0xFF	; 255
   1a3f6:	8f 81       	ldd	r24, Y+7	; 0x07
   1a3f8:	80 83       	st	Z, r24
   1a3fa:	98 85       	ldd	r25, Y+8	; 0x08
   1a3fc:	91 83       	std	Z+1, r25	; 0x01
   1a3fe:	29 85       	ldd	r18, Y+9	; 0x09
   1a400:	22 83       	std	Z+2, r18	; 0x02
   1a402:	8a 85       	ldd	r24, Y+10	; 0x0a
                LIF->DIR.FileSectors = sectors;
   1a404:	83 83       	std	Z+3, r24	; 0x03
   1a406:	eb 85       	ldd	r30, Y+11	; 0x0b
   1a408:	fc 85       	ldd	r31, Y+12	; 0x0c
   1a40a:	e0 5a       	subi	r30, 0xA0	; 160
   1a40c:	ff 4f       	sbci	r31, 0xFF	; 255
   1a40e:	c0 82       	st	Z, r12
   1a410:	d1 82       	std	Z+1, r13	; 0x01
   1a412:	e2 82       	std	Z+2, r14	; 0x02
                LIF->usedsectors += sectors;
   1a414:	f3 82       	std	Z+3, r15	; 0x03
   1a416:	eb 85       	ldd	r30, Y+11	; 0x0b
   1a418:	fc 85       	ldd	r31, Y+12	; 0x0c
   1a41a:	84 89       	ldd	r24, Z+20	; 0x14
   1a41c:	95 89       	ldd	r25, Z+21	; 0x15
   1a41e:	a6 89       	ldd	r26, Z+22	; 0x16
   1a420:	b7 89       	ldd	r27, Z+23	; 0x17
   1a422:	8c 0d       	add	r24, r12
   1a424:	9d 1d       	adc	r25, r13
   1a426:	ae 1d       	adc	r26, r14
   1a428:	bf 1d       	adc	r27, r15
   1a42a:	84 8b       	std	Z+20, r24	; 0x14
   1a42c:	95 8b       	std	Z+21, r25	; 0x15
   1a42e:	a6 8b       	std	Z+22, r26	; 0x16
                LIF->freesectors -= sectors;
   1a430:	b7 8b       	std	Z+23, r27	; 0x17
   1a432:	80 8d       	ldd	r24, Z+24	; 0x18
   1a434:	91 8d       	ldd	r25, Z+25	; 0x19
   1a436:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a438:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a43a:	8c 19       	sub	r24, r12
   1a43c:	9d 09       	sbc	r25, r13
   1a43e:	ae 09       	sbc	r26, r14
   1a440:	bf 09       	sbc	r27, r15
   1a442:	80 8f       	std	Z+24, r24	; 0x18
   1a444:	91 8f       	std	Z+25, r25	; 0x19
   1a446:	a2 8f       	std	Z+26, r26	; 0x1a
                LIF->files++;
   1a448:	b3 8f       	std	Z+27, r27	; 0x1b
   1a44a:	84 8d       	ldd	r24, Z+28	; 0x1c
   1a44c:	95 8d       	ldd	r25, Z+29	; 0x1d
   1a44e:	01 96       	adiw	r24, 0x01	; 1
   1a450:	95 8f       	std	Z+29, r25	; 0x1d
                LIF->purged--;
   1a452:	84 8f       	std	Z+28, r24	; 0x1c
   1a454:	86 8d       	ldd	r24, Z+30	; 0x1e
   1a456:	97 8d       	ldd	r25, Z+31	; 0x1f
   1a458:	01 97       	sbiw	r24, 0x01	; 1
   1a45a:	97 8f       	std	Z+31, r25	; 0x1f
                LIF->dirindex = freeindex;
   1a45c:	86 8f       	std	Z+30, r24	; 0x1e
                // Write new record (FileType is still EOF until data is updated by user)
                if( !lif_writedirindex(LIF,freeindex))
   1a45e:	20 a2       	std	Z+32, r2	; 0x20
   1a460:	31 a2       	std	Z+33, r3	; 0x21
   1a462:	b1 01       	movw	r22, r2
   1a464:	cf 01       	movw	r24, r30
   1a466:	9b da       	rcall	.-2762   	; 0x1999e <lif_writedirindex>
   1a468:	89 2b       	or	r24, r25
   1a46a:	09 f4       	brne	.+2      	; 0x1a46e <lif_newdir+0x17e>
   1a46c:	a0 c0       	rjmp	.+320    	; 0x1a5ae <lif_newdir+0x2be>
                    break;
                }
                return(freeindex);
            }

            if(debuglevel & 0x400)
   1a46e:	c1 01       	movw	r24, r2
   1a470:	a0 c0       	rjmp	.+320    	; 0x1a5b2 <lif_newdir+0x2c2>
   1a472:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1a476:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
                printf("lif_newdir: index:[%d] adding at:[%ld]to purged space:[%ld] sectors, free:[%ld]\n", 
   1a47a:	92 ff       	sbrs	r25, 2
   1a47c:	20 c0       	rjmp	.+64     	; 0x1a4be <lif_newdir+0x1ce>
   1a47e:	eb 85       	ldd	r30, Y+11	; 0x0b
   1a480:	fc 85       	ldd	r31, Y+12	; 0x0c
   1a482:	83 8d       	ldd	r24, Z+27	; 0x1b
   1a484:	8f 93       	push	r24
   1a486:	82 8d       	ldd	r24, Z+26	; 0x1a
   1a488:	8f 93       	push	r24
   1a48a:	81 8d       	ldd	r24, Z+25	; 0x19
   1a48c:	8f 93       	push	r24
   1a48e:	80 8d       	ldd	r24, Z+24	; 0x18
   1a490:	8f 93       	push	r24
   1a492:	ff 92       	push	r15
   1a494:	ef 92       	push	r14
   1a496:	df 92       	push	r13
   1a498:	cf 92       	push	r12
   1a49a:	bf 92       	push	r11
   1a49c:	af 92       	push	r10
   1a49e:	9f 92       	push	r9
   1a4a0:	8f 92       	push	r8
   1a4a2:	1f 93       	push	r17
   1a4a4:	0f 93       	push	r16
   1a4a6:	83 e4       	ldi	r24, 0x43	; 67
   1a4a8:	9a e3       	ldi	r25, 0x3A	; 58
   1a4aa:	1f 92       	push	r1
   1a4ac:	9f 93       	push	r25
   1a4ae:	8f 93       	push	r24
   1a4b0:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1a4b4:	0f b6       	in	r0, 0x3f	; 63
   1a4b6:	f8 94       	cli
   1a4b8:	de bf       	out	0x3e, r29	; 62
                    (int) index,(long)start,(long) sectors, (long)LIF->freesectors);

            // Write new EOF after current one
            if( !lif_writedirEOF(LIF,index+1) )
   1a4ba:	0f be       	out	0x3f, r0	; 63
   1a4bc:	cd bf       	out	0x3d, r28	; 61
   1a4be:	b8 01       	movw	r22, r16
   1a4c0:	6f 5f       	subi	r22, 0xFF	; 255
   1a4c2:	7f 4f       	sbci	r23, 0xFF	; 255
   1a4c4:	8b 85       	ldd	r24, Y+11	; 0x0b
   1a4c6:	9c 85       	ldd	r25, Y+12	; 0x0c
   1a4c8:	c6 da       	rcall	.-2676   	; 0x19a56 <lif_writedirEOF>
   1a4ca:	89 2b       	or	r24, r25
            {
                break;
            }

            lif_dir_clear(LIF);
   1a4cc:	09 f4       	brne	.+2      	; 0x1a4d0 <lif_newdir+0x1e0>
   1a4ce:	6f c0       	rjmp	.+222    	; 0x1a5ae <lif_newdir+0x2be>
   1a4d0:	8b 85       	ldd	r24, Y+11	; 0x0b
   1a4d2:	9c 85       	ldd	r25, Y+12	; 0x0c
            LIF->DIR.FileStartSector = start;
   1a4d4:	0e 94 b5 c7 	call	0x18f6a	; 0x18f6a <lif_dir_clear>
   1a4d8:	eb 85       	ldd	r30, Y+11	; 0x0b
   1a4da:	fc 85       	ldd	r31, Y+12	; 0x0c
   1a4dc:	e4 5a       	subi	r30, 0xA4	; 164
   1a4de:	ff 4f       	sbci	r31, 0xFF	; 255
   1a4e0:	80 82       	st	Z, r8
   1a4e2:	91 82       	std	Z+1, r9	; 0x01
            LIF->DIR.FileSectors = sectors;
   1a4e4:	a2 82       	std	Z+2, r10	; 0x02
   1a4e6:	b3 82       	std	Z+3, r11	; 0x03
   1a4e8:	eb 85       	ldd	r30, Y+11	; 0x0b
   1a4ea:	fc 85       	ldd	r31, Y+12	; 0x0c
   1a4ec:	e0 5a       	subi	r30, 0xA0	; 160
   1a4ee:	ff 4f       	sbci	r31, 0xFF	; 255
   1a4f0:	c0 82       	st	Z, r12
   1a4f2:	d1 82       	std	Z+1, r13	; 0x01
            LIF->usedsectors += sectors;
   1a4f4:	e2 82       	std	Z+2, r14	; 0x02
   1a4f6:	f3 82       	std	Z+3, r15	; 0x03
   1a4f8:	eb 85       	ldd	r30, Y+11	; 0x0b
   1a4fa:	fc 85       	ldd	r31, Y+12	; 0x0c
   1a4fc:	84 89       	ldd	r24, Z+20	; 0x14
   1a4fe:	95 89       	ldd	r25, Z+21	; 0x15
   1a500:	a6 89       	ldd	r26, Z+22	; 0x16
   1a502:	b7 89       	ldd	r27, Z+23	; 0x17
   1a504:	8c 0d       	add	r24, r12
   1a506:	9d 1d       	adc	r25, r13
   1a508:	ae 1d       	adc	r26, r14
   1a50a:	bf 1d       	adc	r27, r15
   1a50c:	84 8b       	std	Z+20, r24	; 0x14
   1a50e:	95 8b       	std	Z+21, r25	; 0x15
            LIF->freesectors -= sectors;
   1a510:	a6 8b       	std	Z+22, r26	; 0x16
   1a512:	b7 8b       	std	Z+23, r27	; 0x17
   1a514:	80 8d       	ldd	r24, Z+24	; 0x18
   1a516:	91 8d       	ldd	r25, Z+25	; 0x19
   1a518:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a51a:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a51c:	8c 19       	sub	r24, r12
   1a51e:	9d 09       	sbc	r25, r13
   1a520:	ae 09       	sbc	r26, r14
   1a522:	bf 09       	sbc	r27, r15
   1a524:	80 8f       	std	Z+24, r24	; 0x18
   1a526:	91 8f       	std	Z+25, r25	; 0x19
            LIF->files++;
   1a528:	a2 8f       	std	Z+26, r26	; 0x1a
   1a52a:	b3 8f       	std	Z+27, r27	; 0x1b
   1a52c:	84 8d       	ldd	r24, Z+28	; 0x1c
   1a52e:	95 8d       	ldd	r25, Z+29	; 0x1d
            LIF->dirindex = index;
   1a530:	01 96       	adiw	r24, 0x01	; 1
            // Write new record (FileType is still EOF until data is updated by user )
            if( !lif_writedirindex(LIF,index))
   1a532:	95 8f       	std	Z+29, r25	; 0x1d
   1a534:	84 8f       	std	Z+28, r24	; 0x1c
   1a536:	11 a3       	std	Z+33, r17	; 0x21
   1a538:	00 a3       	std	Z+32, r16	; 0x20
   1a53a:	b8 01       	movw	r22, r16
   1a53c:	cf 01       	movw	r24, r30
   1a53e:	2f da       	rcall	.-2978   	; 0x1999e <lif_writedirindex>
   1a540:	89 2b       	or	r24, r25


        // PURGED records
        if(LIF->DIR.FileType == 0)
        {
            if(freestate == 0)
   1a542:	a9 f1       	breq	.+106    	; 0x1a5ae <lif_newdir+0x2be>
   1a544:	c8 01       	movw	r24, r16
   1a546:	35 c0       	rjmp	.+106    	; 0x1a5b2 <lif_newdir+0x2c2>
   1a548:	8f 82       	std	Y+7, r8	; 0x07
   1a54a:	98 86       	std	Y+8, r9	; 0x08
            {
                freeindex = index;
                freestart = start;
                freestate = 1;
   1a54c:	a9 86       	std	Y+9, r10	; 0x09
   1a54e:	ba 86       	std	Y+10, r11	; 0x0a
   1a550:	18 01       	movw	r2, r16
            }
            ++index;
            continue;
   1a552:	66 24       	eor	r6, r6
        }
        

        // VALID record
        if(freestate == 1)
   1a554:	63 94       	inc	r6
   1a556:	71 2c       	mov	r7, r1
   1a558:	34 cf       	rjmp	.-408    	; 0x1a3c2 <lif_newdir+0xd2>
   1a55a:	f1 e0       	ldi	r31, 0x01	; 1
        {
            long freesectors;
            // Compute sectors of purged space between valid records
            // Note: LIF specs prohibit using old purged file start and sectors!
            freesectors = LIF->DIR.FileStartSector - start;
            if(freesectors >= sectors )
   1a55c:	6f 16       	cp	r6, r31
   1a55e:	71 04       	cpc	r7, r1
   1a560:	a9 f4       	brne	.+42     	; 0x1a58c <lif_newdir+0x29c>
   1a562:	e9 81       	ldd	r30, Y+1	; 0x01
   1a564:	fa 81       	ldd	r31, Y+2	; 0x02
   1a566:	80 81       	ld	r24, Z
   1a568:	91 81       	ldd	r25, Z+1	; 0x01
   1a56a:	a2 81       	ldd	r26, Z+2	; 0x02
   1a56c:	b3 81       	ldd	r27, Z+3	; 0x03
   1a56e:	88 19       	sub	r24, r8
   1a570:	99 09       	sbc	r25, r9
   1a572:	aa 09       	sbc	r26, r10
   1a574:	bb 09       	sbc	r27, r11
   1a576:	8c 15       	cp	r24, r12
   1a578:	9d 05       	cpc	r25, r13
                freestate = 2;      // Found free space in purged record
            else
                freestate = 0;  // Try again
   1a57a:	ae 05       	cpc	r26, r14
   1a57c:	bf 05       	cpc	r27, r15
   1a57e:	1c f4       	brge	.+6      	; 0x1a586 <lif_newdir+0x296>
            long freesectors;
            // Compute sectors of purged space between valid records
            // Note: LIF specs prohibit using old purged file start and sectors!
            freesectors = LIF->DIR.FileStartSector - start;
            if(freesectors >= sectors )
                freestate = 2;      // Found free space in purged record
   1a580:	61 2c       	mov	r6, r1
   1a582:	71 2c       	mov	r7, r1
   1a584:	03 c0       	rjmp	.+6      	; 0x1a58c <lif_newdir+0x29c>
                freestate = 0;  // Try again
        }
        
        // Computed start of next record
        // Note: MUST be <= actual start of next VALID record or we have overlapping records!
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   1a586:	82 e0       	ldi	r24, 0x02	; 2
   1a588:	68 2e       	mov	r6, r24
   1a58a:	71 2c       	mov	r7, r1
   1a58c:	e9 81       	ldd	r30, Y+1	; 0x01
   1a58e:	fa 81       	ldd	r31, Y+2	; 0x02
   1a590:	80 80       	ld	r8, Z
   1a592:	91 80       	ldd	r9, Z+1	; 0x01
   1a594:	a2 80       	ldd	r10, Z+2	; 0x02
   1a596:	b3 80       	ldd	r11, Z+3	; 0x03
   1a598:	ed 81       	ldd	r30, Y+5	; 0x05
   1a59a:	fe 81       	ldd	r31, Y+6	; 0x06
   1a59c:	80 81       	ld	r24, Z
   1a59e:	91 81       	ldd	r25, Z+1	; 0x01
   1a5a0:	a2 81       	ldd	r26, Z+2	; 0x02
   1a5a2:	b3 81       	ldd	r27, Z+3	; 0x03
   1a5a4:	88 0e       	add	r8, r24
   1a5a6:	99 1e       	adc	r9, r25
        ++index;
    }
    // ERROR
    return(-1);
   1a5a8:	aa 1e       	adc	r10, r26
   1a5aa:	bb 1e       	adc	r11, r27
}
   1a5ac:	0a cf       	rjmp	.-492    	; 0x1a3c2 <lif_newdir+0xd2>
   1a5ae:	8f ef       	ldi	r24, 0xFF	; 255
   1a5b0:	9f ef       	ldi	r25, 0xFF	; 255
   1a5b2:	2c 96       	adiw	r28, 0x0c	; 12
   1a5b4:	e2 e1       	ldi	r30, 0x12	; 18
   1a5b6:	0c 94 fc e5 	jmp	0x1cbf8	; 0x1cbf8 <__epilogue_restores__>

0001a5ba <lif_open_volume>:
/// @param[in] *name: file name of LIF image
/// @param[in] *mode: "rb" = read, "rb+" = read/write
/// @return LIF pointer on sucesses or NULL on error
MEMSPACE
lif_t *lif_open_volume(char *name, char *mode)
{
   1a5ba:	a0 e3       	ldi	r26, 0x30	; 48
   1a5bc:	b1 e0       	ldi	r27, 0x01	; 1
   1a5be:	e3 ee       	ldi	r30, 0xE3	; 227
   1a5c0:	f2 ed       	ldi	r31, 0xD2	; 210
   1a5c2:	0c 94 e8 e5 	jmp	0x1cbd0	; 0x1cbd0 <__prologue_saves__+0x10>
   1a5c6:	b8 2e       	mov	r11, r24
   1a5c8:	a9 2e       	mov	r10, r25
   1a5ca:	6b 01       	movw	r12, r22
    lif_t *LIF;
    stat_t sb, *sp;
    uint8_t buffer[LIF_SECTOR_SIZE];


    sp = lif_stat(name, (stat_t *)&sb);
   1a5cc:	be 01       	movw	r22, r28
   1a5ce:	6f 5f       	subi	r22, 0xFF	; 255
   1a5d0:	7e 4f       	sbci	r23, 0xFE	; 254
   1a5d2:	0e 94 ef c2 	call	0x185de	; 0x185de <lif_stat>
   1a5d6:	8c 01       	movw	r16, r24
    if(sp == NULL)
   1a5d8:	00 97       	sbiw	r24, 0x00	; 0
   1a5da:	09 f1       	breq	.+66     	; 0x1a61e <lif_open_volume+0x64>
        return(NULL);


    // To read LIF volume we must have at minimum two sectors
    // volume header a directory entry
    if(sp->st_size < (long)LIF_SECTOR_SIZE*2)
   1a5dc:	fc 01       	movw	r30, r24
   1a5de:	80 8d       	ldd	r24, Z+24	; 0x18
   1a5e0:	91 8d       	ldd	r25, Z+25	; 0x19
   1a5e2:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a5e4:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a5e6:	81 15       	cp	r24, r1
   1a5e8:	f2 e0       	ldi	r31, 0x02	; 2
   1a5ea:	9f 07       	cpc	r25, r31
   1a5ec:	a1 05       	cpc	r26, r1
   1a5ee:	b1 05       	cpc	r27, r1
   1a5f0:	c8 f4       	brcc	.+50     	; 0x1a624 <lif_open_volume+0x6a>
    {
        if(debuglevel & 1)
   1a5f2:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   1a5f6:	20 ff       	sbrs	r18, 0
   1a5f8:	12 c0       	rjmp	.+36     	; 0x1a61e <lif_open_volume+0x64>
            printf("lif_open_volume:[%s] error volume header area too small:[%ld]\n", name, (long)sp->st_size);
   1a5fa:	bf 93       	push	r27
   1a5fc:	af 93       	push	r26
   1a5fe:	9f 93       	push	r25
   1a600:	8f 93       	push	r24
   1a602:	af 92       	push	r10
   1a604:	bf 92       	push	r11
   1a606:	84 e0       	ldi	r24, 0x04	; 4
   1a608:	9a e3       	ldi	r25, 0x3A	; 58
   1a60a:	1f 92       	push	r1
   1a60c:	9f 93       	push	r25
   1a60e:	8f 93       	push	r24
   1a610:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1a614:	0f b6       	in	r0, 0x3f	; 63
   1a616:	f8 94       	cli
   1a618:	de bf       	out	0x3e, r29	; 62
   1a61a:	0f be       	out	0x3f, r0	; 63
   1a61c:	cd bf       	out	0x3d, r28	; 61
        return(NULL);
   1a61e:	00 e0       	ldi	r16, 0x00	; 0
   1a620:	10 e0       	ldi	r17, 0x00	; 0
   1a622:	c5 c0       	rjmp	.+394    	; 0x1a7ae <lif_open_volume+0x1f4>
    }


    // Allocate LIF structure
    LIF = lif_calloc(sizeof(lif_t)+4);
   1a624:	64 e7       	ldi	r22, 0x74	; 116
   1a626:	70 e0       	ldi	r23, 0x00	; 0
   1a628:	80 e0       	ldi	r24, 0x00	; 0
   1a62a:	90 e0       	ldi	r25, 0x00	; 0
   1a62c:	0e 94 6c c2 	call	0x184d8	; 0x184d8 <lif_calloc>
   1a630:	7c 01       	movw	r14, r24
    if(!LIF)
   1a632:	89 2b       	or	r24, r25
   1a634:	a1 f3       	breq	.-24     	; 0x1a61e <lif_open_volume+0x64>
        return(NULL);

    LIF->name = lif_stralloc(name);
   1a636:	8b 2d       	mov	r24, r11
   1a638:	9a 2d       	mov	r25, r10
   1a63a:	0e 94 a8 c2 	call	0x18550	; 0x18550 <lif_stralloc>
   1a63e:	f7 01       	movw	r30, r14
   1a640:	91 83       	std	Z+1, r25	; 0x01
   1a642:	80 83       	st	Z, r24
    if(!LIF->name)
   1a644:	00 97       	sbiw	r24, 0x00	; 0
   1a646:	09 f4       	brne	.+2      	; 0x1a64a <lif_open_volume+0x90>
   1a648:	5a c0       	rjmp	.+180    	; 0x1a6fe <lif_open_volume+0x144>
    {
        lif_closedir(LIF);
        return(NULL);
    }
        
    LIF->imagebytes = sp->st_size;
   1a64a:	f8 01       	movw	r30, r16
   1a64c:	00 8d       	ldd	r16, Z+24	; 0x18
   1a64e:	11 8d       	ldd	r17, Z+25	; 0x19
   1a650:	22 8d       	ldd	r18, Z+26	; 0x1a
   1a652:	33 8d       	ldd	r19, Z+27	; 0x1b
   1a654:	f7 01       	movw	r30, r14
   1a656:	00 87       	std	Z+8, r16	; 0x08
   1a658:	11 87       	std	Z+9, r17	; 0x09
   1a65a:	22 87       	std	Z+10, r18	; 0x0a
   1a65c:	33 87       	std	Z+11, r19	; 0x0b
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1a65e:	77 27       	eor	r23, r23
   1a660:	63 2f       	mov	r22, r19
   1a662:	52 2f       	mov	r21, r18
   1a664:	41 2f       	mov	r20, r17
    if(bytes % (long)LIF_SECTOR_SIZE)
   1a666:	00 23       	and	r16, r16
   1a668:	21 f0       	breq	.+8      	; 0x1a672 <lif_open_volume+0xb8>
        ++sectors;
   1a66a:	4f 5f       	subi	r20, 0xFF	; 255
   1a66c:	5f 4f       	sbci	r21, 0xFF	; 255
   1a66e:	6f 4f       	sbci	r22, 0xFF	; 255
   1a670:	7f 4f       	sbci	r23, 0xFF	; 255
        lif_closedir(LIF);
        return(NULL);
    }
        
    LIF->imagebytes = sp->st_size;
    LIF->sectors = lif_bytes2sectors(sp->st_size);
   1a672:	f7 01       	movw	r30, r14
   1a674:	44 83       	std	Z+4, r20	; 0x04
   1a676:	55 83       	std	Z+5, r21	; 0x05
   1a678:	66 83       	std	Z+6, r22	; 0x06
   1a67a:	77 83       	std	Z+7, r23	; 0x07

    LIF->fp = lif_open(LIF->name,mode);
   1a67c:	b6 01       	movw	r22, r12
   1a67e:	0e 94 c7 c2 	call	0x1858e	; 0x1858e <lif_open>
   1a682:	f7 01       	movw	r30, r14
   1a684:	93 83       	std	Z+3, r25	; 0x03
   1a686:	82 83       	std	Z+2, r24	; 0x02
    if(!LIF->fp)
   1a688:	89 2b       	or	r24, r25
   1a68a:	c9 f1       	breq	.+114    	; 0x1a6fe <lif_open_volume+0x144>
        return(NULL);
    }
        
        
    // Volume header must be it least one sector
    if( lif_read(LIF, buffer, 0, LIF_SECTOR_SIZE) < LIF_SECTOR_SIZE)
   1a68c:	00 e0       	ldi	r16, 0x00	; 0
   1a68e:	11 e0       	ldi	r17, 0x01	; 1
   1a690:	20 e0       	ldi	r18, 0x00	; 0
   1a692:	30 e0       	ldi	r19, 0x00	; 0
   1a694:	a9 01       	movw	r20, r18
   1a696:	be 01       	movw	r22, r28
   1a698:	6f 5f       	subi	r22, 0xFF	; 255
   1a69a:	7f 4f       	sbci	r23, 0xFF	; 255
   1a69c:	c7 01       	movw	r24, r14
   1a69e:	0e 94 4d c3 	call	0x1869a	; 0x1869a <lif_read>
   1a6a2:	6f 3f       	cpi	r22, 0xFF	; 255
   1a6a4:	71 05       	cpc	r23, r1
   1a6a6:	81 05       	cpc	r24, r1
   1a6a8:	91 05       	cpc	r25, r1
   1a6aa:	09 f0       	breq	.+2      	; 0x1a6ae <lif_open_volume+0xf4>
   1a6ac:	4c f4       	brge	.+18     	; 0x1a6c0 <lif_open_volume+0x106>
    {
        if(debuglevel & 1)
   1a6ae:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1a6b2:	80 ff       	sbrs	r24, 0
   1a6b4:	24 c0       	rjmp	.+72     	; 0x1a6fe <lif_open_volume+0x144>
            printf("lif_open_volume:[%s] error read volume header failed\n", name);
   1a6b6:	af 92       	push	r10
   1a6b8:	bf 92       	push	r11
   1a6ba:	8e ec       	ldi	r24, 0xCE	; 206
   1a6bc:	99 e3       	ldi	r25, 0x39	; 57
   1a6be:	15 c0       	rjmp	.+42     	; 0x1a6ea <lif_open_volume+0x130>
        lif_closedir(LIF);
        return(NULL);
    }

    // Unpack Volumes has the Directory start sector
    lif_str2vol(buffer, LIF);
   1a6c0:	b7 01       	movw	r22, r14
   1a6c2:	ce 01       	movw	r24, r28
   1a6c4:	01 96       	adiw	r24, 0x01	; 1
   1a6c6:	0e 94 68 c5 	call	0x18ad0	; 0x18ad0 <lif_str2vol>

    // Validate basic Volume headers 
    if( !lif_check_volume(LIF) )
   1a6ca:	c7 01       	movw	r24, r14
   1a6cc:	0e 94 57 c9 	call	0x192ae	; 0x192ae <lif_check_volume>
   1a6d0:	89 2b       	or	r24, r25
   1a6d2:	c1 f4       	brne	.+48     	; 0x1a704 <lif_open_volume+0x14a>
    {
        if(debuglevel & 1)
   1a6d4:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1a6d8:	80 ff       	sbrs	r24, 0
   1a6da:	11 c0       	rjmp	.+34     	; 0x1a6fe <lif_open_volume+0x144>
            printf("lif_open_volume:[%s] error volume validate failed\n", LIF->name);
   1a6dc:	f7 01       	movw	r30, r14
   1a6de:	81 81       	ldd	r24, Z+1	; 0x01
   1a6e0:	8f 93       	push	r24
   1a6e2:	80 81       	ld	r24, Z
   1a6e4:	8f 93       	push	r24
   1a6e6:	8b e9       	ldi	r24, 0x9B	; 155
   1a6e8:	99 e3       	ldi	r25, 0x39	; 57
   1a6ea:	1f 92       	push	r1
   1a6ec:	9f 93       	push	r25
   1a6ee:	8f 93       	push	r24
   1a6f0:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1a6f4:	0f 90       	pop	r0
   1a6f6:	0f 90       	pop	r0
   1a6f8:	0f 90       	pop	r0
   1a6fa:	0f 90       	pop	r0
   1a6fc:	0f 90       	pop	r0
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a6fe:	c7 01       	movw	r24, r14
   1a700:	64 d8       	rcall	.-3896   	; 0x197ca <lif_close_volume>
   1a702:	8d cf       	rjmp	.-230    	; 0x1a61e <lif_open_volume+0x64>
        lif_closedir(LIF);
        return(NULL);
    }

    // Initialize remaining LIF headers
    LIF->filestart = LIF->VOL.DirStartSector + LIF->VOL.DirSectors;
   1a704:	f7 01       	movw	r30, r14
   1a706:	45 a5       	ldd	r20, Z+45	; 0x2d
   1a708:	56 a5       	ldd	r21, Z+46	; 0x2e
   1a70a:	67 a5       	ldd	r22, Z+47	; 0x2f
   1a70c:	70 a9       	ldd	r23, Z+48	; 0x30
   1a70e:	85 a9       	ldd	r24, Z+53	; 0x35
   1a710:	96 a9       	ldd	r25, Z+54	; 0x36
   1a712:	a7 a9       	ldd	r26, Z+55	; 0x37
   1a714:	b0 ad       	ldd	r27, Z+56	; 0x38
   1a716:	48 0f       	add	r20, r24
   1a718:	59 1f       	adc	r21, r25
   1a71a:	6a 1f       	adc	r22, r26
   1a71c:	7b 1f       	adc	r23, r27
   1a71e:	44 87       	std	Z+12, r20	; 0x0c
   1a720:	55 87       	std	Z+13, r21	; 0x0d
   1a722:	66 87       	std	Z+14, r22	; 0x0e
   1a724:	77 87       	std	Z+15, r23	; 0x0f
    LIF->filesectors = LIF->sectors - LIF->filestart;
   1a726:	84 81       	ldd	r24, Z+4	; 0x04
   1a728:	95 81       	ldd	r25, Z+5	; 0x05
   1a72a:	a6 81       	ldd	r26, Z+6	; 0x06
   1a72c:	b7 81       	ldd	r27, Z+7	; 0x07
   1a72e:	84 1b       	sub	r24, r20
   1a730:	95 0b       	sbc	r25, r21
   1a732:	a6 0b       	sbc	r26, r22
   1a734:	b7 0b       	sbc	r27, r23
   1a736:	80 8b       	std	Z+16, r24	; 0x10
   1a738:	91 8b       	std	Z+17, r25	; 0x11
   1a73a:	a2 8b       	std	Z+18, r26	; 0x12
   1a73c:	b3 8b       	std	Z+19, r27	; 0x13
    LIF->freesectors = LIF->filesectors;
   1a73e:	80 8f       	std	Z+24, r24	; 0x18
   1a740:	91 8f       	std	Z+25, r25	; 0x19
   1a742:	a2 8f       	std	Z+26, r26	; 0x1a
   1a744:	b3 8f       	std	Z+27, r27	; 0x1b
    LIF->usedsectors = 0;
   1a746:	14 8a       	std	Z+20, r1	; 0x14
   1a748:	15 8a       	std	Z+21, r1	; 0x15
   1a74a:	16 8a       	std	Z+22, r1	; 0x16
   1a74c:	17 8a       	std	Z+23, r1	; 0x17
    LIF->purged = 0;
   1a74e:	17 8e       	std	Z+31, r1	; 0x1f
   1a750:	16 8e       	std	Z+30, r1	; 0x1e
    LIF->files = 0;
   1a752:	15 8e       	std	Z+29, r1	; 0x1d
   1a754:	14 8e       	std	Z+28, r1	; 0x1c
    LIF->dirindex = 0;
   1a756:	11 a2       	std	Z+33, r1	; 0x21
   1a758:	10 a2       	std	Z+32, r1	; 0x20
    LIF->EOFindex = 0;
   1a75a:	13 a2       	std	Z+35, r1	; 0x23

    if( lif_updatefree(LIF) == NULL)
   1a75c:	12 a2       	std	Z+34, r1	; 0x22
   1a75e:	c7 01       	movw	r24, r14
   1a760:	92 d9       	rcall	.-3292   	; 0x19a86 <lif_updatefree>
   1a762:	8c 01       	movw	r16, r24
   1a764:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1a768:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1a76c:	01 15       	cp	r16, r1
   1a76e:	11 05       	cpc	r17, r1
    {
        if(debuglevel & 1)
   1a770:	b1 f4       	brne	.+44     	; 0x1a79e <lif_open_volume+0x1e4>
   1a772:	80 ff       	sbrs	r24, 0
            printf("lif_open_volume:[%s] error directory check failed\n", LIF->name);
   1a774:	11 c0       	rjmp	.+34     	; 0x1a798 <lif_open_volume+0x1de>
   1a776:	f7 01       	movw	r30, r14
   1a778:	81 81       	ldd	r24, Z+1	; 0x01
   1a77a:	8f 93       	push	r24
   1a77c:	80 81       	ld	r24, Z
   1a77e:	8f 93       	push	r24
   1a780:	88 e6       	ldi	r24, 0x68	; 104
   1a782:	99 e3       	ldi	r25, 0x39	; 57
   1a784:	1f 92       	push	r1
   1a786:	9f 93       	push	r25
   1a788:	8f 93       	push	r24
   1a78a:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1a78e:	0f 90       	pop	r0
   1a790:	0f 90       	pop	r0
   1a792:	0f 90       	pop	r0
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a794:	0f 90       	pop	r0
   1a796:	0f 90       	pop	r0
   1a798:	c7 01       	movw	r24, r14
    if( lif_updatefree(LIF) == NULL)
    {
        if(debuglevel & 1)
            printf("lif_open_volume:[%s] error directory check failed\n", LIF->name);
        lif_closedir(LIF);
        return(NULL);
   1a79a:	17 d8       	rcall	.-4050   	; 0x197ca <lif_close_volume>
    }

	if(debuglevel &0x400)
   1a79c:	08 c0       	rjmp	.+16     	; 0x1a7ae <lif_open_volume+0x1f4>
   1a79e:	92 ff       	sbrs	r25, 2
		lif_dump_vol(LIF, "Volume Listing");	
   1a7a0:	05 c0       	rjmp	.+10     	; 0x1a7ac <lif_open_volume+0x1f2>
   1a7a2:	60 ec       	ldi	r22, 0xC0	; 192
   1a7a4:	75 e1       	ldi	r23, 0x15	; 21
   1a7a6:	c7 01       	movw	r24, r14
   1a7a8:	0e 94 c4 c7 	call	0x18f88	; 0x18f88 <lif_dump_vol>
    return( LIF );
}
   1a7ac:	87 01       	movw	r16, r14
   1a7ae:	c8 01       	movw	r24, r16
   1a7b0:	c0 5d       	subi	r28, 0xD0	; 208
   1a7b2:	de 4f       	sbci	r29, 0xFE	; 254
   1a7b4:	ea e0       	ldi	r30, 0x0A	; 10
   1a7b6:	0c 94 04 e6 	jmp	0x1cc08	; 0x1cc08 <__epilogue_restores__+0x10>

0001a7ba <lif_dir>:
/// @brief Display a LIF image file directory
/// @param[in] lifimagename: LIF disk image name
/// @return -1 on error or number of files found
MEMSPACE
void lif_dir(char *lifimagename)
{
   1a7ba:	a1 e1       	ldi	r26, 0x11	; 17
   1a7bc:	b0 e0       	ldi	r27, 0x00	; 0
   1a7be:	e3 ee       	ldi	r30, 0xE3	; 227
   1a7c0:	f3 ed       	ldi	r31, 0xD3	; 211
   1a7c2:	0c 94 e0 e5 	jmp	0x1cbc0	; 0x1cbc0 <__prologue_saves__>
    int index = 0;
    char *vol;

    int warn = ' ';

    LIF = lif_open_volume(lifimagename,"rb+");
   1a7c6:	60 e9       	ldi	r22, 0x90	; 144
   1a7c8:	78 e0       	ldi	r23, 0x08	; 8
   1a7ca:	f7 de       	rcall	.-530    	; 0x1a5ba <lif_open_volume>
   1a7cc:	99 8b       	std	Y+17, r25	; 0x11
   1a7ce:	88 8b       	std	Y+16, r24	; 0x10
    if(LIF == NULL)
   1a7d0:	00 97       	sbiw	r24, 0x00	; 0
   1a7d2:	09 f4       	brne	.+2      	; 0x1a7d6 <lif_dir+0x1c>
   1a7d4:	82 c1       	rjmp	.+772    	; 0x1aada <lif_dir+0x320>
        return;

    vol = (char *)LIF->VOL.Label;
    if(!vol[0])
   1a7d6:	fc 01       	movw	r30, r24
   1a7d8:	86 a1       	ldd	r24, Z+38	; 0x26
   1a7da:	88 23       	and	r24, r24
   1a7dc:	21 f0       	breq	.+8      	; 0x1a7e6 <lif_dir+0x2c>

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return;

    vol = (char *)LIF->VOL.Label;
   1a7de:	8f 01       	movw	r16, r30
   1a7e0:	0a 5d       	subi	r16, 0xDA	; 218
   1a7e2:	1f 4f       	sbci	r17, 0xFF	; 255
   1a7e4:	02 c0       	rjmp	.+4      	; 0x1a7ea <lif_dir+0x30>
    if(!vol[0])
        vol = "<EMPTY>";
   1a7e6:	02 e7       	ldi	r16, 0x72	; 114
   1a7e8:	15 e1       	ldi	r17, 0x15	; 21

    printf("Volume:[%s] Date:[%s]\n", vol, lif_lifbcd2timestr(LIF->VOL.date));
   1a7ea:	88 89       	ldd	r24, Y+16	; 0x10
   1a7ec:	99 89       	ldd	r25, Y+17	; 0x11
   1a7ee:	87 5b       	subi	r24, 0xB7	; 183
   1a7f0:	9f 4f       	sbci	r25, 0xFF	; 255
   1a7f2:	0e 94 88 c7 	call	0x18f10	; 0x18f10 <lif_lifbcd2timestr>
   1a7f6:	9f 93       	push	r25
   1a7f8:	8f 93       	push	r24
   1a7fa:	1f 93       	push	r17
   1a7fc:	0f 93       	push	r16
   1a7fe:	81 e5       	ldi	r24, 0x51	; 81
   1a800:	99 e3       	ldi	r25, 0x39	; 57
   1a802:	1f 92       	push	r1
   1a804:	9f 93       	push	r25
   1a806:	8f 93       	push	r24
   1a808:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    
    printf("NAME         TYPE   START SECTOR        SIZE    RECSIZE   DATE\n");
   1a80c:	81 e1       	ldi	r24, 0x11	; 17
   1a80e:	99 e3       	ldi	r25, 0x39	; 57
   1a810:	1f 92       	push	r1
   1a812:	9f 93       	push	r25
   1a814:	8f 93       	push	r24
   1a816:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1a81a:	0f b6       	in	r0, 0x3f	; 63
   1a81c:	f8 94       	cli
   1a81e:	de bf       	out	0x3e, r29	; 62
   1a820:	0f be       	out	0x3f, r0	; 63
   1a822:	cd bf       	out	0x3d, r28	; 61
    long bytes;
    lif_t *LIF;
    int index = 0;
    char *vol;

    int warn = ' ';
   1a824:	60 e2       	ldi	r22, 0x20	; 32
   1a826:	96 2e       	mov	r9, r22
MEMSPACE
void lif_dir(char *lifimagename)
{
    long bytes;
    lif_t *LIF;
    int index = 0;
   1a828:	00 e0       	ldi	r16, 0x00	; 0
   1a82a:	10 e0       	ldi	r17, 0x00	; 0

        if(!lif_readdirindex(LIF,index))
            break;


        if(LIF->DIR.FileType == 0xffff)
   1a82c:	88 89       	ldd	r24, Y+16	; 0x10
   1a82e:	99 89       	ldd	r25, Y+17	; 0x11
   1a830:	86 5a       	subi	r24, 0xA6	; 166
   1a832:	9f 4f       	sbci	r25, 0xFF	; 255
   1a834:	9c 83       	std	Y+4, r25	; 0x04
   1a836:	8b 83       	std	Y+3, r24	; 0x03
            break;

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);
   1a838:	e8 89       	ldd	r30, Y+16	; 0x10
   1a83a:	f9 89       	ldd	r31, Y+17	; 0x11
   1a83c:	e0 5a       	subi	r30, 0xA0	; 160
   1a83e:	ff 4f       	sbci	r31, 0xFF	; 255
   1a840:	fb 87       	std	Y+11, r31	; 0x0b
   1a842:	ea 87       	std	Y+10, r30	; 0x0a

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   1a844:	28 89       	ldd	r18, Y+16	; 0x10
   1a846:	39 89       	ldd	r19, Y+17	; 0x11
   1a848:	24 59       	subi	r18, 0x94	; 148
   1a84a:	3f 4f       	sbci	r19, 0xFF	; 255
   1a84c:	3d 87       	std	Y+13, r19	; 0x0d
   1a84e:	2c 87       	std	Y+12, r18	; 0x0c
            else
            {
                warn = '!';
                if(debuglevel & 0x400)
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n", 
   1a850:	88 89       	ldd	r24, Y+16	; 0x10
   1a852:	99 89       	ldd	r25, Y+17	; 0x11
   1a854:	81 5b       	subi	r24, 0xB1	; 177
   1a856:	9f 4f       	sbci	r25, 0xFF	; 255
   1a858:	9a 83       	std	Y+2, r25	; 0x02
   1a85a:	89 83       	std	Y+1, r24	; 0x01
   1a85c:	85 ec       	ldi	r24, 0xC5	; 197
   1a85e:	98 e3       	ldi	r25, 0x38	; 56
   1a860:	3c 01       	movw	r6, r24
   1a862:	81 2c       	mov	r8, r1
            }
        }


        // name type start size
        printf("%-10s  %04Xh      %8lXh   %9ld%c      %4d   %s\n", 
   1a864:	e8 89       	ldd	r30, Y+16	; 0x10
   1a866:	f9 89       	ldd	r31, Y+17	; 0x11
   1a868:	ec 59       	subi	r30, 0x9C	; 156
   1a86a:	ff 4f       	sbci	r31, 0xFF	; 255
   1a86c:	ff 87       	std	Y+15, r31	; 0x0f
   1a86e:	ee 87       	std	Y+14, r30	; 0x0e
   1a870:	28 89       	ldd	r18, Y+16	; 0x10
   1a872:	39 89       	ldd	r19, Y+17	; 0x11
   1a874:	22 59       	subi	r18, 0x92	; 146
   1a876:	3f 4f       	sbci	r19, 0xFF	; 255
   1a878:	3e 83       	std	Y+6, r19	; 0x06
   1a87a:	2d 83       	std	Y+5, r18	; 0x05
   1a87c:	a8 88       	ldd	r10, Y+16	; 0x10
   1a87e:	b9 88       	ldd	r11, Y+17	; 0x11
   1a880:	3c e5       	ldi	r19, 0x5C	; 92
   1a882:	a3 0e       	add	r10, r19
   1a884:	b1 1c       	adc	r11, r1
   1a886:	85 e9       	ldi	r24, 0x95	; 149
   1a888:	98 e3       	ldi	r25, 0x38	; 56
   1a88a:	9c 01       	movw	r18, r24
   1a88c:	40 e0       	ldi	r20, 0x00	; 0
   1a88e:	2f 83       	std	Y+7, r18	; 0x07
   1a890:	38 87       	std	Y+8, r19	; 0x08
   1a892:	49 87       	std	Y+9, r20	; 0x09
    
    printf("NAME         TYPE   START SECTOR        SIZE    RECSIZE   DATE\n");
    while(1)
    {

        if(!lif_readdirindex(LIF,index))
   1a894:	b8 01       	movw	r22, r16
   1a896:	88 89       	ldd	r24, Y+16	; 0x10
   1a898:	99 89       	ldd	r25, Y+17	; 0x11
   1a89a:	18 d8       	rcall	.-4048   	; 0x198cc <lif_readdirindex>
   1a89c:	89 2b       	or	r24, r25
   1a89e:	09 f4       	brne	.+2      	; 0x1a8a2 <lif_dir+0xe8>
   1a8a0:	9d c0       	rjmp	.+314    	; 0x1a9dc <lif_dir+0x222>
            break;


        if(LIF->DIR.FileType == 0xffff)
   1a8a2:	eb 81       	ldd	r30, Y+3	; 0x03
   1a8a4:	fc 81       	ldd	r31, Y+4	; 0x04
   1a8a6:	20 81       	ld	r18, Z
   1a8a8:	31 81       	ldd	r19, Z+1	; 0x01
   1a8aa:	2f 3f       	cpi	r18, 0xFF	; 255
   1a8ac:	ff ef       	ldi	r31, 0xFF	; 255
   1a8ae:	3f 07       	cpc	r19, r31
   1a8b0:	09 f4       	brne	.+2      	; 0x1a8b4 <lif_dir+0xfa>
   1a8b2:	94 c0       	rjmp	.+296    	; 0x1a9dc <lif_dir+0x222>
            break;

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);
   1a8b4:	ea 85       	ldd	r30, Y+10	; 0x0a
   1a8b6:	fb 85       	ldd	r31, Y+11	; 0x0b
   1a8b8:	80 81       	ld	r24, Z
   1a8ba:	91 81       	ldd	r25, Z+1	; 0x01
   1a8bc:	a2 81       	ldd	r26, Z+2	; 0x02
   1a8be:	b3 81       	ldd	r27, Z+3	; 0x03
   1a8c0:	cc 24       	eor	r12, r12
   1a8c2:	d8 2e       	mov	r13, r24
   1a8c4:	e9 2e       	mov	r14, r25
   1a8c6:	fa 2e       	mov	r15, r26

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
   1a8c8:	2c 7f       	andi	r18, 0xFC	; 252
   1a8ca:	20 31       	cpi	r18, 0x10	; 16
   1a8cc:	30 4e       	sbci	r19, 0xE0	; 224
   1a8ce:	09 f0       	breq	.+2      	; 0x1a8d2 <lif_dir+0x118>
   1a8d0:	4b c0       	rjmp	.+150    	; 0x1a968 <lif_dir+0x1ae>
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   1a8d2:	ec 85       	ldd	r30, Y+12	; 0x0c
   1a8d4:	fd 85       	ldd	r31, Y+13	; 0x0d
   1a8d6:	20 81       	ld	r18, Z
   1a8d8:	31 81       	ldd	r19, Z+1	; 0x01
   1a8da:	21 15       	cp	r18, r1
   1a8dc:	31 05       	cpc	r19, r1
   1a8de:	a9 f0       	breq	.+42     	; 0x1a90a <lif_dir+0x150>
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1a8e0:	19 01       	movw	r2, r18
   1a8e2:	41 2c       	mov	r4, r1
   1a8e4:	51 2c       	mov	r5, r1
   1a8e6:	77 27       	eor	r23, r23
   1a8e8:	65 2d       	mov	r22, r5
   1a8ea:	54 2d       	mov	r21, r4
   1a8ec:	43 2d       	mov	r20, r3
    if(bytes % (long)LIF_SECTOR_SIZE)
   1a8ee:	22 23       	and	r18, r18
   1a8f0:	21 f0       	breq	.+8      	; 0x1a8fa <lif_dir+0x140>
        ++sectors;
   1a8f2:	4f 5f       	subi	r20, 0xFF	; 255
   1a8f4:	5f 4f       	sbci	r21, 0xFF	; 255
   1a8f6:	6f 4f       	sbci	r22, 0xFF	; 255
   1a8f8:	7f 4f       	sbci	r23, 0xFF	; 255

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   1a8fa:	84 17       	cp	r24, r20
   1a8fc:	95 07       	cpc	r25, r21
   1a8fe:	a6 07       	cpc	r26, r22
   1a900:	b7 07       	cpc	r27, r23
   1a902:	19 f4       	brne	.+6      	; 0x1a90a <lif_dir+0x150>
            {
                bytes = LIF->DIR.FileBytes;
   1a904:	72 01       	movw	r14, r4
   1a906:	61 01       	movw	r12, r2
   1a908:	2f c0       	rjmp	.+94     	; 0x1a968 <lif_dir+0x1ae>
            }
            else
            {
                warn = '!';
                if(debuglevel & 0x400)
   1a90a:	40 91 bd 01 	lds	r20, 0x01BD	; 0x8001bd <debuglevel>
   1a90e:	50 91 be 01 	lds	r21, 0x01BE	; 0x8001be <debuglevel+0x1>
   1a912:	52 ff       	sbrs	r21, 2
   1a914:	27 c0       	rjmp	.+78     	; 0x1a964 <lif_dir+0x1aa>
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1a916:	19 01       	movw	r2, r18
   1a918:	41 2c       	mov	r4, r1
   1a91a:	51 2c       	mov	r5, r1
   1a91c:	77 27       	eor	r23, r23
   1a91e:	65 2d       	mov	r22, r5
   1a920:	54 2d       	mov	r21, r4
   1a922:	43 2d       	mov	r20, r3
    if(bytes % (long)LIF_SECTOR_SIZE)
   1a924:	22 23       	and	r18, r18
   1a926:	21 f0       	breq	.+8      	; 0x1a930 <lif_dir+0x176>
        ++sectors;
   1a928:	4f 5f       	subi	r20, 0xFF	; 255
   1a92a:	5f 4f       	sbci	r21, 0xFF	; 255
   1a92c:	6f 4f       	sbci	r22, 0xFF	; 255
   1a92e:	7f 4f       	sbci	r23, 0xFF	; 255
            else
            {
                warn = '!';
                if(debuglevel & 0x400)
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n", 
   1a930:	bf 93       	push	r27
   1a932:	af 93       	push	r26
   1a934:	9f 93       	push	r25
   1a936:	8f 93       	push	r24
   1a938:	7f 93       	push	r23
   1a93a:	6f 93       	push	r22
   1a93c:	5f 93       	push	r21
   1a93e:	4f 93       	push	r20
   1a940:	1f 92       	push	r1
   1a942:	1f 92       	push	r1
   1a944:	3f 92       	push	r3
   1a946:	2f 92       	push	r2
   1a948:	fa 81       	ldd	r31, Y+2	; 0x02
   1a94a:	ff 93       	push	r31
   1a94c:	29 81       	ldd	r18, Y+1	; 0x01
   1a94e:	2f 93       	push	r18
   1a950:	1f 92       	push	r1
   1a952:	7f 92       	push	r7
   1a954:	6f 92       	push	r6
   1a956:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1a95a:	0f b6       	in	r0, 0x3f	; 63
   1a95c:	f8 94       	cli
   1a95e:	de bf       	out	0x3e, r29	; 62
   1a960:	0f be       	out	0x3f, r0	; 63
   1a962:	cd bf       	out	0x3d, r28	; 61
            {
                bytes = LIF->DIR.FileBytes;
            }
            else
            {
                warn = '!';
   1a964:	81 e2       	ldi	r24, 0x21	; 33
   1a966:	98 2e       	mov	r9, r24
            }
        }


        // name type start size
        printf("%-10s  %04Xh      %8lXh   %9ld%c      %4d   %s\n", 
   1a968:	8e 85       	ldd	r24, Y+14	; 0x0e
   1a96a:	9f 85       	ldd	r25, Y+15	; 0x0f
   1a96c:	0e 94 88 c7 	call	0x18f10	; 0x18f10 <lif_lifbcd2timestr>
   1a970:	ed 81       	ldd	r30, Y+5	; 0x05
   1a972:	fe 81       	ldd	r31, Y+6	; 0x06
   1a974:	a0 81       	ld	r26, Z
   1a976:	b1 81       	ldd	r27, Z+1	; 0x01
   1a978:	f5 01       	movw	r30, r10
   1a97a:	60 81       	ld	r22, Z
   1a97c:	71 81       	ldd	r23, Z+1	; 0x01
   1a97e:	52 80       	ldd	r5, Z+2	; 0x02
   1a980:	43 80       	ldd	r4, Z+3	; 0x03
   1a982:	eb 81       	ldd	r30, Y+3	; 0x03
   1a984:	fc 81       	ldd	r31, Y+4	; 0x04
   1a986:	40 81       	ld	r20, Z
   1a988:	51 81       	ldd	r21, Z+1	; 0x01
   1a98a:	41 15       	cp	r20, r1
   1a98c:	51 05       	cpc	r21, r1
   1a98e:	19 f0       	breq	.+6      	; 0x1a996 <lif_dir+0x1dc>
   1a990:	29 81       	ldd	r18, Y+1	; 0x01
   1a992:	3a 81       	ldd	r19, Y+2	; 0x02
   1a994:	02 c0       	rjmp	.+4      	; 0x1a99a <lif_dir+0x1e0>
   1a996:	2f ec       	ldi	r18, 0xCF	; 207
   1a998:	35 e1       	ldi	r19, 0x15	; 21
   1a99a:	9f 93       	push	r25
   1a99c:	8f 93       	push	r24
   1a99e:	bf 93       	push	r27
   1a9a0:	af 93       	push	r26
   1a9a2:	1f 92       	push	r1
   1a9a4:	9f 92       	push	r9
   1a9a6:	ff 92       	push	r15
   1a9a8:	ef 92       	push	r14
   1a9aa:	df 92       	push	r13
   1a9ac:	cf 92       	push	r12
   1a9ae:	4f 92       	push	r4
   1a9b0:	5f 92       	push	r5
   1a9b2:	7f 93       	push	r23
   1a9b4:	6f 93       	push	r22
   1a9b6:	5f 93       	push	r21
   1a9b8:	4f 93       	push	r20
   1a9ba:	3f 93       	push	r19
   1a9bc:	2f 93       	push	r18
   1a9be:	1f 92       	push	r1
   1a9c0:	f8 85       	ldd	r31, Y+8	; 0x08
   1a9c2:	ff 93       	push	r31
   1a9c4:	2f 81       	ldd	r18, Y+7	; 0x07
   1a9c6:	2f 93       	push	r18
   1a9c8:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
            (long)bytes, 
            warn,
            (int)LIF->DIR.SectorSize,
            lif_lifbcd2timestr(LIF->DIR.date));

        ++index;
   1a9cc:	0f 5f       	subi	r16, 0xFF	; 255
   1a9ce:	1f 4f       	sbci	r17, 0xFF	; 255
    }   
   1a9d0:	0f b6       	in	r0, 0x3f	; 63
   1a9d2:	f8 94       	cli
   1a9d4:	de bf       	out	0x3e, r29	; 62
   1a9d6:	0f be       	out	0x3f, r0	; 63
   1a9d8:	cd bf       	out	0x3d, r28	; 61
   1a9da:	5c cf       	rjmp	.-328    	; 0x1a894 <lif_dir+0xda>

    printf("\n");
   1a9dc:	83 e9       	ldi	r24, 0x93	; 147
   1a9de:	98 e3       	ldi	r25, 0x38	; 56
   1a9e0:	1f 92       	push	r1
   1a9e2:	9f 93       	push	r25
   1a9e4:	8f 93       	push	r24
   1a9e6:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    printf("%8ld Files\n", (long)LIF->files);
   1a9ea:	e8 89       	ldd	r30, Y+16	; 0x10
   1a9ec:	f9 89       	ldd	r31, Y+17	; 0x11
   1a9ee:	84 8d       	ldd	r24, Z+28	; 0x1c
   1a9f0:	95 8d       	ldd	r25, Z+29	; 0x1d
   1a9f2:	09 2e       	mov	r0, r25
   1a9f4:	00 0c       	add	r0, r0
   1a9f6:	aa 0b       	sbc	r26, r26
   1a9f8:	bb 0b       	sbc	r27, r27
   1a9fa:	bf 93       	push	r27
   1a9fc:	af 93       	push	r26
   1a9fe:	9f 93       	push	r25
   1aa00:	8f 93       	push	r24
   1aa02:	87 e8       	ldi	r24, 0x87	; 135
   1aa04:	98 e3       	ldi	r25, 0x38	; 56
   1aa06:	1f 92       	push	r1
   1aa08:	9f 93       	push	r25
   1aa0a:	8f 93       	push	r24
   1aa0c:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    printf("%8ld Purged\n", (long)LIF->purged);
   1aa10:	e8 89       	ldd	r30, Y+16	; 0x10
   1aa12:	f9 89       	ldd	r31, Y+17	; 0x11
   1aa14:	86 8d       	ldd	r24, Z+30	; 0x1e
   1aa16:	97 8d       	ldd	r25, Z+31	; 0x1f
   1aa18:	09 2e       	mov	r0, r25
   1aa1a:	00 0c       	add	r0, r0
   1aa1c:	aa 0b       	sbc	r26, r26
   1aa1e:	bb 0b       	sbc	r27, r27
   1aa20:	bf 93       	push	r27
   1aa22:	af 93       	push	r26
   1aa24:	9f 93       	push	r25
   1aa26:	8f 93       	push	r24
   1aa28:	8a e7       	ldi	r24, 0x7A	; 122
   1aa2a:	98 e3       	ldi	r25, 0x38	; 56
   1aa2c:	1f 92       	push	r1
   1aa2e:	9f 93       	push	r25
   1aa30:	8f 93       	push	r24
   1aa32:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    printf("%8ld Dir  start\n",   (long)LIF->VOL.DirStartSector);
   1aa36:	e8 89       	ldd	r30, Y+16	; 0x10
   1aa38:	f9 89       	ldd	r31, Y+17	; 0x11
   1aa3a:	80 a9       	ldd	r24, Z+48	; 0x30
   1aa3c:	8f 93       	push	r24
   1aa3e:	87 a5       	ldd	r24, Z+47	; 0x2f
   1aa40:	8f 93       	push	r24
   1aa42:	86 a5       	ldd	r24, Z+46	; 0x2e
   1aa44:	8f 93       	push	r24
   1aa46:	85 a5       	ldd	r24, Z+45	; 0x2d
   1aa48:	8f 93       	push	r24
   1aa4a:	89 e6       	ldi	r24, 0x69	; 105
   1aa4c:	98 e3       	ldi	r25, 0x38	; 56
   1aa4e:	1f 92       	push	r1
   1aa50:	9f 93       	push	r25
   1aa52:	8f 93       	push	r24
   1aa54:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    printf("%8ld Dir  sectors\n", (long)LIF->VOL.DirSectors);
   1aa58:	e8 89       	ldd	r30, Y+16	; 0x10
   1aa5a:	f9 89       	ldd	r31, Y+17	; 0x11
   1aa5c:	80 ad       	ldd	r24, Z+56	; 0x38
   1aa5e:	8f 93       	push	r24
   1aa60:	87 a9       	ldd	r24, Z+55	; 0x37
   1aa62:	8f 93       	push	r24
   1aa64:	86 a9       	ldd	r24, Z+54	; 0x36
   1aa66:	8f 93       	push	r24
   1aa68:	85 a9       	ldd	r24, Z+53	; 0x35
   1aa6a:	8f 93       	push	r24
   1aa6c:	86 e5       	ldi	r24, 0x56	; 86
   1aa6e:	98 e3       	ldi	r25, 0x38	; 56
   1aa70:	1f 92       	push	r1
   1aa72:	9f 93       	push	r25
   1aa74:	8f 93       	push	r24
   1aa76:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    printf("%8ld Used sectors\n", (long)LIF->usedsectors);
   1aa7a:	e8 89       	ldd	r30, Y+16	; 0x10
   1aa7c:	f9 89       	ldd	r31, Y+17	; 0x11
   1aa7e:	87 89       	ldd	r24, Z+23	; 0x17
   1aa80:	8f 93       	push	r24
   1aa82:	86 89       	ldd	r24, Z+22	; 0x16
   1aa84:	8f 93       	push	r24
   1aa86:	85 89       	ldd	r24, Z+21	; 0x15
   1aa88:	8f 93       	push	r24
   1aa8a:	84 89       	ldd	r24, Z+20	; 0x14
   1aa8c:	8f 93       	push	r24
   1aa8e:	83 e4       	ldi	r24, 0x43	; 67
   1aa90:	98 e3       	ldi	r25, 0x38	; 56
   1aa92:	1f 92       	push	r1
   1aa94:	9f 93       	push	r25
   1aa96:	8f 93       	push	r24
   1aa98:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    printf("%8ld Free sectors\n", (long)LIF->freesectors);
   1aa9c:	0f b6       	in	r0, 0x3f	; 63
   1aa9e:	f8 94       	cli
   1aaa0:	de bf       	out	0x3e, r29	; 62
   1aaa2:	0f be       	out	0x3f, r0	; 63
   1aaa4:	cd bf       	out	0x3d, r28	; 61
   1aaa6:	e8 89       	ldd	r30, Y+16	; 0x10
   1aaa8:	f9 89       	ldd	r31, Y+17	; 0x11
   1aaaa:	83 8d       	ldd	r24, Z+27	; 0x1b
   1aaac:	8f 93       	push	r24
   1aaae:	82 8d       	ldd	r24, Z+26	; 0x1a
   1aab0:	8f 93       	push	r24
   1aab2:	81 8d       	ldd	r24, Z+25	; 0x19
   1aab4:	8f 93       	push	r24
   1aab6:	80 8d       	ldd	r24, Z+24	; 0x18
   1aab8:	8f 93       	push	r24
   1aaba:	80 e3       	ldi	r24, 0x30	; 48
   1aabc:	98 e3       	ldi	r25, 0x38	; 56
   1aabe:	1f 92       	push	r1
   1aac0:	9f 93       	push	r25
   1aac2:	8f 93       	push	r24
   1aac4:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1aac8:	88 89       	ldd	r24, Y+16	; 0x10
   1aaca:	99 89       	ldd	r25, Y+17	; 0x11
   1aacc:	0e 94 e5 cb 	call	0x197ca	; 0x197ca <lif_close_volume>
   1aad0:	0f b6       	in	r0, 0x3f	; 63
   1aad2:	f8 94       	cli
   1aad4:	de bf       	out	0x3e, r29	; 62
   1aad6:	0f be       	out	0x3f, r0	; 63
   1aad8:	cd bf       	out	0x3d, r28	; 61
    printf("%8ld Dir  sectors\n", (long)LIF->VOL.DirSectors);
    printf("%8ld Used sectors\n", (long)LIF->usedsectors);
    printf("%8ld Free sectors\n", (long)LIF->freesectors);

    lif_closedir(LIF);
}
   1aada:	61 96       	adiw	r28, 0x11	; 17
   1aadc:	e2 e1       	ldi	r30, 0x12	; 18
   1aade:	0c 94 fc e5 	jmp	0x1cbf8	; 0x1cbf8 <__epilogue_restores__>

0001aae2 <lif_find_file>:
/// @param[in] *LIF: directory pointer
/// @param[in] liflabel: File name in LIF image
/// @return Directory index of record
MEMSPACE
int lif_find_file(lif_t *LIF, char *liflabel)
{
   1aae2:	a0 e0       	ldi	r26, 0x00	; 0
   1aae4:	b0 e0       	ldi	r27, 0x00	; 0
   1aae6:	e7 e7       	ldi	r30, 0x77	; 119
   1aae8:	f5 ed       	ldi	r31, 0xD5	; 213
   1aaea:	0c 94 e8 e5 	jmp	0x1cbd0	; 0x1cbd0 <__prologue_saves__+0x10>
   1aaee:	7c 01       	movw	r14, r24
   1aaf0:	16 2f       	mov	r17, r22
   1aaf2:	07 2f       	mov	r16, r23
    int index;

    if( !lif_checkname(liflabel) )
   1aaf4:	86 2f       	mov	r24, r22
   1aaf6:	97 2f       	mov	r25, r23
   1aaf8:	0e 94 59 c4 	call	0x188b2	; 0x188b2 <lif_checkname>
   1aafc:	89 2b       	or	r24, r25
   1aafe:	49 f4       	brne	.+18     	; 0x1ab12 <lif_find_file+0x30>
    {
        if(debuglevel & 1)
   1ab00:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1ab04:	80 ff       	sbrs	r24, 0
   1ab06:	48 c0       	rjmp	.+144    	; 0x1ab98 <lif_find_file+0xb6>
            printf("lif_find_file:[%s] invalid characters\n", liflabel);
   1ab08:	0f 93       	push	r16
   1ab0a:	1f 93       	push	r17
   1ab0c:	89 e0       	ldi	r24, 0x09	; 9
   1ab0e:	98 e3       	ldi	r25, 0x38	; 56
   1ab10:	13 c0       	rjmp	.+38     	; 0x1ab38 <lif_find_file+0x56>
        return(-1);
    }
    if(strlen(liflabel) > 10)
   1ab12:	a1 2f       	mov	r26, r17
   1ab14:	b0 2f       	mov	r27, r16
   1ab16:	fd 01       	movw	r30, r26
   1ab18:	01 90       	ld	r0, Z+
   1ab1a:	00 20       	and	r0, r0
   1ab1c:	e9 f7       	brne	.-6      	; 0x1ab18 <lif_find_file+0x36>
   1ab1e:	31 97       	sbiw	r30, 0x01	; 1
   1ab20:	ea 1b       	sub	r30, r26
   1ab22:	fb 0b       	sbc	r31, r27
   1ab24:	3b 97       	sbiw	r30, 0x0b	; 11
   1ab26:	98 f0       	brcs	.+38     	; 0x1ab4e <lif_find_file+0x6c>
    {
        if(debuglevel & 1)
   1ab28:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1ab2c:	80 ff       	sbrs	r24, 0
   1ab2e:	34 c0       	rjmp	.+104    	; 0x1ab98 <lif_find_file+0xb6>
            printf("lif_find_file:[%s] liflabel too big\n", liflabel);
   1ab30:	0f 93       	push	r16
   1ab32:	1f 93       	push	r17
   1ab34:	84 ee       	ldi	r24, 0xE4	; 228
   1ab36:	97 e3       	ldi	r25, 0x37	; 55
   1ab38:	1f 92       	push	r1
   1ab3a:	9f 93       	push	r25
   1ab3c:	8f 93       	push	r24
   1ab3e:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1ab42:	0f 90       	pop	r0
   1ab44:	0f 90       	pop	r0
   1ab46:	0f 90       	pop	r0
   1ab48:	0f 90       	pop	r0
   1ab4a:	0f 90       	pop	r0
   1ab4c:	25 c0       	rjmp	.+74     	; 0x1ab98 <lif_find_file+0xb6>
        return(-1);
    }

    if(LIF == NULL)
   1ab4e:	e1 14       	cp	r14, r1
   1ab50:	f1 04       	cpc	r15, r1
   1ab52:	11 f1       	breq	.+68     	; 0x1ab98 <lif_find_file+0xb6>
   1ab54:	c0 e0       	ldi	r28, 0x00	; 0
   1ab56:	d0 e0       	ldi	r29, 0x00	; 0
    while(1)
    {
        if(!lif_readdirindex(LIF,index))
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
   1ab58:	67 01       	movw	r12, r14
   1ab5a:	2a e5       	ldi	r18, 0x5A	; 90
   1ab5c:	c2 0e       	add	r12, r18
   1ab5e:	d1 1c       	adc	r13, r1
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1ab60:	57 01       	movw	r10, r14
   1ab62:	8f e4       	ldi	r24, 0x4F	; 79
   1ab64:	a8 0e       	add	r10, r24
   1ab66:	b1 1c       	adc	r11, r1
        return(-1);
    
    index = 0;
    while(1)
    {
        if(!lif_readdirindex(LIF,index))
   1ab68:	be 01       	movw	r22, r28
   1ab6a:	c7 01       	movw	r24, r14
   1ab6c:	0e 94 66 cc 	call	0x198cc	; 0x198cc <lif_readdirindex>
   1ab70:	89 2b       	or	r24, r25
   1ab72:	91 f0       	breq	.+36     	; 0x1ab98 <lif_find_file+0xb6>
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
   1ab74:	f6 01       	movw	r30, r12
   1ab76:	80 81       	ld	r24, Z
   1ab78:	91 81       	ldd	r25, Z+1	; 0x01
   1ab7a:	8f 3f       	cpi	r24, 0xFF	; 255
   1ab7c:	ff ef       	ldi	r31, 0xFF	; 255
   1ab7e:	9f 07       	cpc	r25, r31
   1ab80:	59 f0       	breq	.+22     	; 0x1ab98 <lif_find_file+0xb6>
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1ab82:	89 2b       	or	r24, r25
   1ab84:	39 f0       	breq	.+14     	; 0x1ab94 <lif_find_file+0xb2>
   1ab86:	61 2f       	mov	r22, r17
   1ab88:	70 2f       	mov	r23, r16
   1ab8a:	c5 01       	movw	r24, r10
   1ab8c:	0e 94 e9 32 	call	0x65d2	; 0x65d2 <strcasecmp>
   1ab90:	89 2b       	or	r24, r25
   1ab92:	29 f0       	breq	.+10     	; 0x1ab9e <lif_find_file+0xbc>
            break;
        ++index;
   1ab94:	21 96       	adiw	r28, 0x01	; 1
   1ab96:	e8 cf       	rjmp	.-48     	; 0x1ab68 <lif_find_file+0x86>

    if( !lif_checkname(liflabel) )
    {
        if(debuglevel & 1)
            printf("lif_find_file:[%s] invalid characters\n", liflabel);
        return(-1);
   1ab98:	8f ef       	ldi	r24, 0xFF	; 255
   1ab9a:	9f ef       	ldi	r25, 0xFF	; 255
   1ab9c:	01 c0       	rjmp	.+2      	; 0x1aba0 <lif_find_file+0xbe>
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1ab9e:	ce 01       	movw	r24, r28
            break;
        ++index;
    }
    return(index);
}
   1aba0:	cd b7       	in	r28, 0x3d	; 61
   1aba2:	de b7       	in	r29, 0x3e	; 62
   1aba4:	ea e0       	ldi	r30, 0x0A	; 10
   1aba6:	0c 94 04 e6 	jmp	0x1cc08	; 0x1cc08 <__epilogue_restores__+0x10>

0001abaa <lif_e010_pad_sector>:
/// @param[in] offset: sector offset
/// @param[in] wbuf: E010 PAD data
/// @return size of E010 PAD data
MEMSPACE
int lif_e010_pad_sector(long offset, uint8_t *wbuf)
{
   1abaa:	a0 e0       	ldi	r26, 0x00	; 0
   1abac:	b0 e0       	ldi	r27, 0x00	; 0
   1abae:	eb ed       	ldi	r30, 0xDB	; 219
   1abb0:	f5 ed       	ldi	r31, 0xD5	; 213
   1abb2:	0c 94 ea e5 	jmp	0x1cbd4	; 0x1cbd4 <__prologue_saves__+0x14>
   1abb6:	6b 01       	movw	r12, r22
   1abb8:	7c 01       	movw	r14, r24
   1abba:	8a 01       	movw	r16, r20
    int ind;
    int pos,rem;
    
    // Compute the current offset in this sector
    pos = (offset % (long)LIF_SECTOR_SIZE);
   1abbc:	20 e0       	ldi	r18, 0x00	; 0
   1abbe:	31 e0       	ldi	r19, 0x01	; 1
   1abc0:	40 e0       	ldi	r20, 0x00	; 0
   1abc2:	50 e0       	ldi	r21, 0x00	; 0
   1abc4:	0e 94 80 e5 	call	0x1cb00	; 0x1cb00 <__divmodsi4>
    if(!pos)
   1abc8:	61 15       	cp	r22, r1
   1abca:	71 05       	cpc	r23, r1
   1abcc:	e1 f1       	breq	.+120    	; 0x1ac46 <lif_e010_pad_sector+0x9c>
        return(0);

    // Number of bytes free in this sector
    rem = (long)LIF_SECTOR_SIZE - (long)pos;
   1abce:	c0 e0       	ldi	r28, 0x00	; 0
   1abd0:	d1 e0       	ldi	r29, 0x01	; 1
   1abd2:	c6 1b       	sub	r28, r22
   1abd4:	d7 0b       	sbc	r29, r23

    // Bytes written to wbuf
    ind = 0;
    // PAD
    wbuf[ind++] = 0xEF;
   1abd6:	f8 01       	movw	r30, r16
   1abd8:	8f ee       	ldi	r24, 0xEF	; 239
   1abda:	81 93       	st	Z+, r24
    while(ind<rem)
        wbuf[ind++] = 0xff;
   1abdc:	2f ef       	ldi	r18, 0xFF	; 255

    // Bytes written to wbuf
    ind = 0;
    // PAD
    wbuf[ind++] = 0xEF;
    while(ind<rem)
   1abde:	cf 01       	movw	r24, r30
   1abe0:	80 1b       	sub	r24, r16
   1abe2:	91 0b       	sbc	r25, r17
   1abe4:	8c 17       	cp	r24, r28
   1abe6:	9d 07       	cpc	r25, r29
   1abe8:	14 f4       	brge	.+4      	; 0x1abee <lif_e010_pad_sector+0x44>
        wbuf[ind++] = 0xff;
   1abea:	21 93       	st	Z+, r18
   1abec:	f8 cf       	rjmp	.-16     	; 0x1abde <lif_e010_pad_sector+0x34>
   1abee:	1c 16       	cp	r1, r28
   1abf0:	1d 06       	cpc	r1, r29
   1abf2:	14 f0       	brlt	.+4      	; 0x1abf8 <lif_e010_pad_sector+0x4e>
   1abf4:	c1 e0       	ldi	r28, 0x01	; 1
   1abf6:	d0 e0       	ldi	r29, 0x00	; 0

    pos = (offset + (long) ind)  % (long) LIF_SECTOR_SIZE;
   1abf8:	ce 01       	movw	r24, r28
   1abfa:	0d 2e       	mov	r0, r29
   1abfc:	00 0c       	add	r0, r0
   1abfe:	aa 0b       	sbc	r26, r26
   1ac00:	bb 0b       	sbc	r27, r27
   1ac02:	bc 01       	movw	r22, r24
   1ac04:	cd 01       	movw	r24, r26
   1ac06:	6c 0d       	add	r22, r12
   1ac08:	7d 1d       	adc	r23, r13
   1ac0a:	8e 1d       	adc	r24, r14
   1ac0c:	9f 1d       	adc	r25, r15
   1ac0e:	20 e0       	ldi	r18, 0x00	; 0
   1ac10:	31 e0       	ldi	r19, 0x01	; 1
   1ac12:	40 e0       	ldi	r20, 0x00	; 0
   1ac14:	50 e0       	ldi	r21, 0x00	; 0
   1ac16:	0e 94 80 e5 	call	0x1cb00	; 0x1cb00 <__divmodsi4>
    // NEW SECTOR
    // Debugging make sure we are at sector boundry
    if(pos)
   1ac1a:	61 15       	cp	r22, r1
   1ac1c:	71 05       	cpc	r23, r1
   1ac1e:	b1 f0       	breq	.+44     	; 0x1ac4c <lif_e010_pad_sector+0xa2>
    {
        if(debuglevel & 1)
   1ac20:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   1ac24:	20 ff       	sbrs	r18, 0
   1ac26:	14 c0       	rjmp	.+40     	; 0x1ac50 <lif_e010_pad_sector+0xa6>
            printf("lif_e010_dap_sector: expected sector boundry: offset:%d\n", (int) pos);
   1ac28:	7f 93       	push	r23
   1ac2a:	6f 93       	push	r22
   1ac2c:	8b ea       	ldi	r24, 0xAB	; 171
   1ac2e:	97 e3       	ldi	r25, 0x37	; 55
   1ac30:	1f 92       	push	r1
   1ac32:	9f 93       	push	r25
   1ac34:	8f 93       	push	r24
   1ac36:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1ac3a:	0f 90       	pop	r0
   1ac3c:	0f 90       	pop	r0
   1ac3e:	0f 90       	pop	r0
   1ac40:	0f 90       	pop	r0
   1ac42:	0f 90       	pop	r0
   1ac44:	05 c0       	rjmp	.+10     	; 0x1ac50 <lif_e010_pad_sector+0xa6>
    int pos,rem;
    
    // Compute the current offset in this sector
    pos = (offset % (long)LIF_SECTOR_SIZE);
    if(!pos)
        return(0);
   1ac46:	80 e0       	ldi	r24, 0x00	; 0
   1ac48:	90 e0       	ldi	r25, 0x00	; 0
   1ac4a:	04 c0       	rjmp	.+8      	; 0x1ac54 <lif_e010_pad_sector+0xaa>
   1ac4c:	ce 01       	movw	r24, r28
   1ac4e:	02 c0       	rjmp	.+4      	; 0x1ac54 <lif_e010_pad_sector+0xaa>
    // Debugging make sure we are at sector boundry
    if(pos)
    {
        if(debuglevel & 1)
            printf("lif_e010_dap_sector: expected sector boundry: offset:%d\n", (int) pos);
        return(-1);
   1ac50:	8f ef       	ldi	r24, 0xFF	; 255
   1ac52:	9f ef       	ldi	r25, 0xFF	; 255
    }
    return(ind);
}
   1ac54:	cd b7       	in	r28, 0x3d	; 61
   1ac56:	de b7       	in	r29, 0x3e	; 62
   1ac58:	e8 e0       	ldi	r30, 0x08	; 8
   1ac5a:	0c 94 06 e6 	jmp	0x1cc0c	; 0x1cc0c <__epilogue_restores__+0x14>

0001ac5e <lif_ascii_string_to_e010>:
/// @param[in] offset: E010 data sector offset, only used in formatting wbuf with headers
/// @param[in] wbuf: E010 data result
/// @return size of E010 data
MEMSPACE
int lif_ascii_string_to_e010(char *str, long offset, uint8_t *wbuf)
{
   1ac5e:	a0 e0       	ldi	r26, 0x00	; 0
   1ac60:	b0 e0       	ldi	r27, 0x00	; 0
   1ac62:	e5 e3       	ldi	r30, 0x35	; 53
   1ac64:	f6 ed       	ldi	r31, 0xD6	; 214
   1ac66:	0c 94 e0 e5 	jmp	0x1cbc0	; 0x1cbc0 <__prologue_saves__>
   1ac6a:	ec 01       	movw	r28, r24
   1ac6c:	4a 01       	movw	r8, r20
   1ac6e:	5b 01       	movw	r10, r22
   1ac70:	79 01       	movw	r14, r18
    int ind;
    int len;
    int pos,rem;
    
    // String size
    len = strlen(str);
   1ac72:	fc 01       	movw	r30, r24
   1ac74:	01 90       	ld	r0, Z+
   1ac76:	00 20       	and	r0, r0
   1ac78:	e9 f7       	brne	.-6      	; 0x1ac74 <lif_ascii_string_to_e010+0x16>
   1ac7a:	31 97       	sbiw	r30, 0x01	; 1
   1ac7c:	6f 01       	movw	r12, r30
   1ac7e:	c8 1a       	sub	r12, r24
   1ac80:	d9 0a       	sbc	r13, r25
    ind = 0;

    // Compute the current offset in this sector
    pos = (offset % (long) LIF_SECTOR_SIZE);
    // Number of bytes free in this sector
    rem = (long) LIF_SECTOR_SIZE - (long) pos;
   1ac82:	41 2c       	mov	r4, r1
   1ac84:	51 2c       	mov	r5, r1
   1ac86:	32 01       	movw	r6, r4
   1ac88:	53 94       	inc	r5
   1ac8a:	cb 01       	movw	r24, r22
   1ac8c:	ba 01       	movw	r22, r20
   1ac8e:	a3 01       	movw	r20, r6
   1ac90:	92 01       	movw	r18, r4
   1ac92:	0e 94 80 e5 	call	0x1cb00	; 0x1cb00 <__divmodsi4>
   1ac96:	21 2c       	mov	r2, r1
   1ac98:	33 24       	eor	r3, r3
   1ac9a:	33 94       	inc	r3
   1ac9c:	c1 01       	movw	r24, r2
   1ac9e:	86 1b       	sub	r24, r22
   1aca0:	97 0b       	sbc	r25, r23

    /// We ALWAYS pad a sector if:
    ///   There is no room for a 0xdf single header 
    ///   - OR - 
    ///   Spliting a string takes more space then padding here (extra header)
    if(rem < 6)
   1aca2:	86 30       	cpi	r24, 0x06	; 6
   1aca4:	91 05       	cpc	r25, r1
   1aca6:	20 f0       	brcs	.+8      	; 0x1acb0 <lif_ascii_string_to_e010+0x52>
    ind = 0;

    // Compute the current offset in this sector
    pos = (offset % (long) LIF_SECTOR_SIZE);
    // Number of bytes free in this sector
    rem = (long) LIF_SECTOR_SIZE - (long) pos;
   1aca8:	1c 01       	movw	r2, r24
    
    // String size
    len = strlen(str);

    // Output buffer index
    ind = 0;
   1acaa:	00 e0       	ldi	r16, 0x00	; 0
   1acac:	10 e0       	ldi	r17, 0x00	; 0
   1acae:	17 c0       	rjmp	.+46     	; 0x1acde <lif_ascii_string_to_e010+0x80>
    ///   There is no room for a 0xdf single header 
    ///   - OR - 
    ///   Spliting a string takes more space then padding here (extra header)
    if(rem < 6)
    {
        ind = lif_e010_pad_sector(offset, wbuf);
   1acb0:	a7 01       	movw	r20, r14
   1acb2:	c5 01       	movw	r24, r10
   1acb4:	b4 01       	movw	r22, r8
   1acb6:	79 df       	rcall	.-270    	; 0x1abaa <lif_e010_pad_sector>
   1acb8:	8c 01       	movw	r16, r24
        if(ind < 0)
   1acba:	97 fd       	sbrc	r25, 7
   1acbc:	84 c0       	rjmp	.+264    	; 0x1adc6 <lif_ascii_string_to_e010+0x168>
            return(ind);

        // Compute the current offset in this sector
        pos = ((offset + ind) % (long) LIF_SECTOR_SIZE);
        // Number of bytes free in this sector
        rem = (long) LIF_SECTOR_SIZE - pos;
   1acbe:	09 2e       	mov	r0, r25
   1acc0:	00 0c       	add	r0, r0
   1acc2:	aa 0b       	sbc	r26, r26
   1acc4:	bb 0b       	sbc	r27, r27
   1acc6:	bc 01       	movw	r22, r24
   1acc8:	cd 01       	movw	r24, r26
   1acca:	68 0d       	add	r22, r8
   1accc:	79 1d       	adc	r23, r9
   1acce:	8a 1d       	adc	r24, r10
   1acd0:	9b 1d       	adc	r25, r11
   1acd2:	a3 01       	movw	r20, r6
   1acd4:	92 01       	movw	r18, r4
   1acd6:	0e 94 80 e5 	call	0x1cb00	; 0x1cb00 <__divmodsi4>
   1acda:	26 1a       	sub	r2, r22
   1acdc:	37 0a       	sbc	r3, r23
   1acde:	f7 01       	movw	r30, r14
   1ace0:	e0 0f       	add	r30, r16
   1ace2:	f1 1f       	adc	r31, r17
   1ace4:	0d 5f       	subi	r16, 0xFD	; 253
   1ace6:	1f 4f       	sbci	r17, 0xFF	; 255
    }

    // Note: IMPORTANT we have >= 6 bytes!!!

    // Do not have to split, there is enough room
    if(rem >= (3 + len)) 
   1ace8:	c6 01       	movw	r24, r12
   1acea:	02 96       	adiw	r24, 0x02	; 2
   1acec:	82 15       	cp	r24, r2
   1acee:	93 05       	cpc	r25, r3
   1acf0:	84 f4       	brge	.+32     	; 0x1ad12 <lif_ascii_string_to_e010+0xb4>
    {

        // Write string in new sector
        // The full string + header will fit
        wbuf[ind++] = 0xDF;
   1acf2:	8f ed       	ldi	r24, 0xDF	; 223
   1acf4:	80 83       	st	Z, r24
        wbuf[ind++] = len & 0xff;
   1acf6:	c1 82       	std	Z+1, r12	; 0x01
        wbuf[ind++] = (len >> 8) & 0xff;
   1acf8:	d2 82       	std	Z+2, r13	; 0x02
   1acfa:	f7 01       	movw	r30, r14
   1acfc:	e0 0f       	add	r30, r16
   1acfe:	f1 1f       	adc	r31, r17
   1ad00:	cf 01       	movw	r24, r30
   1ad02:	8e 19       	sub	r24, r14
   1ad04:	9f 09       	sbc	r25, r15
        // Write string
        while(*str)
   1ad06:	29 91       	ld	r18, Y+
   1ad08:	22 23       	and	r18, r18
   1ad0a:	09 f4       	brne	.+2      	; 0x1ad0e <lif_ascii_string_to_e010+0xb0>
   1ad0c:	5c c0       	rjmp	.+184    	; 0x1adc6 <lif_ascii_string_to_e010+0x168>
            wbuf[ind++] = *str++;
   1ad0e:	21 93       	st	Z+, r18
   1ad10:	f7 cf       	rjmp	.-18     	; 0x1ad00 <lif_ascii_string_to_e010+0xa2>

        // CURRENT SECTOR
        // String spans a sector , so split the string

        // 1st Split string header
        wbuf[ind++] = 0xCF;
   1ad12:	8f ec       	ldi	r24, 0xCF	; 207
   1ad14:	80 83       	st	Z, r24
        wbuf[ind++] = len & 0xff;
   1ad16:	c1 82       	std	Z+1, r12	; 0x01
        wbuf[ind++] = (len >>8) & 0xff;
   1ad18:	d2 82       	std	Z+2, r13	; 0x02
   1ad1a:	d7 01       	movw	r26, r14
   1ad1c:	a0 0f       	add	r26, r16
   1ad1e:	b1 1f       	adc	r27, r17
        // Write as much of the string as we can in this sector
        while(*str && ind<rem)
   1ad20:	fe 01       	movw	r30, r28
   1ad22:	81 91       	ld	r24, Z+
   1ad24:	81 11       	cpse	r24, r1
   1ad26:	0e c0       	rjmp	.+28     	; 0x1ad44 <lif_ascii_string_to_e010+0xe6>
            wbuf[ind++] = *str++;

        // NEW SECTOR
        // Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
   1ad28:	c8 01       	movw	r24, r16
   1ad2a:	01 2e       	mov	r0, r17
   1ad2c:	00 0c       	add	r0, r0
   1ad2e:	aa 0b       	sbc	r26, r26
   1ad30:	bb 0b       	sbc	r27, r27
   1ad32:	bc 01       	movw	r22, r24
   1ad34:	cd 01       	movw	r24, r26
   1ad36:	68 0d       	add	r22, r8
   1ad38:	79 1d       	adc	r23, r9
   1ad3a:	8a 1d       	adc	r24, r10
   1ad3c:	9b 1d       	adc	r25, r11
   1ad3e:	61 11       	cpse	r22, r1
   1ad40:	09 c0       	rjmp	.+18     	; 0x1ad54 <lif_ascii_string_to_e010+0xf6>
   1ad42:	21 c0       	rjmp	.+66     	; 0x1ad86 <lif_ascii_string_to_e010+0x128>
        // 1st Split string header
        wbuf[ind++] = 0xCF;
        wbuf[ind++] = len & 0xff;
        wbuf[ind++] = (len >>8) & 0xff;
        // Write as much of the string as we can in this sector
        while(*str && ind<rem)
   1ad44:	02 15       	cp	r16, r2
   1ad46:	13 05       	cpc	r17, r3
   1ad48:	7c f7       	brge	.-34     	; 0x1ad28 <lif_ascii_string_to_e010+0xca>
            wbuf[ind++] = *str++;
   1ad4a:	0f 5f       	subi	r16, 0xFF	; 255
   1ad4c:	1f 4f       	sbci	r17, 0xFF	; 255
   1ad4e:	8d 93       	st	X+, r24
   1ad50:	ef 01       	movw	r28, r30
   1ad52:	e6 cf       	rjmp	.-52     	; 0x1ad20 <lif_ascii_string_to_e010+0xc2>

        // NEW SECTOR
        // Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
        {
            if(debuglevel & 1)
   1ad54:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   1ad58:	20 ff       	sbrs	r18, 0
   1ad5a:	33 c0       	rjmp	.+102    	; 0x1adc2 <lif_ascii_string_to_e010+0x164>
                printf("Expected sector boundry, offset:%d\n", (int) ((offset + ind) % LIF_SECTOR_SIZE) );
   1ad5c:	20 e0       	ldi	r18, 0x00	; 0
   1ad5e:	31 e0       	ldi	r19, 0x01	; 1
   1ad60:	40 e0       	ldi	r20, 0x00	; 0
   1ad62:	50 e0       	ldi	r21, 0x00	; 0
   1ad64:	0e 94 80 e5 	call	0x1cb00	; 0x1cb00 <__divmodsi4>
   1ad68:	7f 93       	push	r23
   1ad6a:	6f 93       	push	r22
   1ad6c:	87 e8       	ldi	r24, 0x87	; 135
   1ad6e:	97 e3       	ldi	r25, 0x37	; 55
   1ad70:	1f 92       	push	r1
   1ad72:	9f 93       	push	r25
   1ad74:	8f 93       	push	r24
   1ad76:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1ad7a:	0f 90       	pop	r0
   1ad7c:	0f 90       	pop	r0
   1ad7e:	0f 90       	pop	r0
   1ad80:	0f 90       	pop	r0
   1ad82:	0f 90       	pop	r0
   1ad84:	1e c0       	rjmp	.+60     	; 0x1adc2 <lif_ascii_string_to_e010+0x164>
            return(-1);
        }

        // Update remining string length
        len = strlen(str);
   1ad86:	fe 01       	movw	r30, r28
   1ad88:	01 90       	ld	r0, Z+
   1ad8a:	00 20       	and	r0, r0
   1ad8c:	e9 f7       	brne	.-6      	; 0x1ad88 <lif_ascii_string_to_e010+0x12a>
   1ad8e:	31 97       	sbiw	r30, 0x01	; 1
   1ad90:	ec 1b       	sub	r30, r28
   1ad92:	fd 0b       	sbc	r31, r29
        // 2nd Split string header 
        wbuf[ind++] = 0x6F;
   1ad94:	d7 01       	movw	r26, r14
   1ad96:	a0 0f       	add	r26, r16
   1ad98:	b1 1f       	adc	r27, r17
   1ad9a:	8f e6       	ldi	r24, 0x6F	; 111
   1ad9c:	8c 93       	st	X, r24
        wbuf[ind++] = (len & 0xff);
   1ad9e:	11 96       	adiw	r26, 0x01	; 1
   1ada0:	ec 93       	st	X, r30
   1ada2:	11 97       	sbiw	r26, 0x01	; 1
        wbuf[ind++] = (len>>8) & 0xff;
   1ada4:	12 96       	adiw	r26, 0x02	; 2
   1ada6:	fc 93       	st	X, r31
   1ada8:	0d 5f       	subi	r16, 0xFD	; 253
   1adaa:	1f 4f       	sbci	r17, 0xFF	; 255
   1adac:	f7 01       	movw	r30, r14
   1adae:	e0 0f       	add	r30, r16
   1adb0:	f1 1f       	adc	r31, r17
   1adb2:	cf 01       	movw	r24, r30
   1adb4:	8e 19       	sub	r24, r14
   1adb6:	9f 09       	sbc	r25, r15
        // Write string
        while(*str)
   1adb8:	29 91       	ld	r18, Y+
   1adba:	22 23       	and	r18, r18
   1adbc:	21 f0       	breq	.+8      	; 0x1adc6 <lif_ascii_string_to_e010+0x168>
            wbuf[ind++] = *str++;
   1adbe:	21 93       	st	Z+, r18
   1adc0:	f8 cf       	rjmp	.-16     	; 0x1adb2 <lif_ascii_string_to_e010+0x154>
        // Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
        {
            if(debuglevel & 1)
                printf("Expected sector boundry, offset:%d\n", (int) ((offset + ind) % LIF_SECTOR_SIZE) );
            return(-1);
   1adc2:	8f ef       	ldi	r24, 0xFF	; 255
   1adc4:	9f ef       	ldi	r25, 0xFF	; 255
        while(*str)
            wbuf[ind++] = *str++;
    }

    return(ind);
}
   1adc6:	cd b7       	in	r28, 0x3d	; 61
   1adc8:	de b7       	in	r29, 0x3e	; 62
   1adca:	e2 e1       	ldi	r30, 0x12	; 18
   1adcc:	0c 94 fc e5 	jmp	0x1cbf8	; 0x1cbf8 <__epilogue_restores__>

0001add0 <lif_add_ascii_file_as_e010_wrapper>:
/// @param[in] userfile: User ASCII file source
/// @param[in] *LIF: Where to write file if set (not NULL)
/// @return size of formatted result
MEMSPACE
long lif_add_ascii_file_as_e010_wrapper(lif_t *LIF, uint32_t offset, char *username)
{
   1add0:	a6 e0       	ldi	r26, 0x06	; 6
   1add2:	b3 e0       	ldi	r27, 0x03	; 3
   1add4:	ee ee       	ldi	r30, 0xEE	; 238
   1add6:	f6 ed       	ldi	r31, 0xD6	; 214
   1add8:	0c 94 e0 e5 	jmp	0x1cbc0	; 0x1cbc0 <__prologue_saves__>
   1addc:	7c 01       	movw	r14, r24
   1adde:	4a 01       	movw	r8, r20
   1ade0:	5b 01       	movw	r10, r22
   1ade2:	c9 01       	movw	r24, r18
    // strings are limited to less then this
    char str[LIF_SECTOR_SIZE+1];
    // output buffer must be larger then a single sectors because of either headers or padding
    uint8_t obuf[LIF_SECTOR_SIZE*2];

    fi = lif_open(username, "rb");
   1ade4:	66 e8       	ldi	r22, 0x86	; 134
   1ade6:	78 e0       	ldi	r23, 0x08	; 8
   1ade8:	0e 94 c7 c2 	call	0x1858e	; 0x1858e <lif_open>
   1adec:	6c 01       	movw	r12, r24
    if(fi == NULL)
   1adee:	89 2b       	or	r24, r25
   1adf0:	09 f4       	brne	.+2      	; 0x1adf4 <lif_add_ascii_file_as_e010_wrapper+0x24>
   1adf2:	6b c0       	rjmp	.+214    	; 0x1aeca <lif_add_ascii_file_as_e010_wrapper+0xfa>
   1adf4:	21 2c       	mov	r2, r1
   1adf6:	31 2c       	mov	r3, r1
   1adf8:	41 2c       	mov	r4, r1
   1adfa:	51 2c       	mov	r5, r1
   1adfc:	32 01       	movw	r6, r4

        if(count > 256)
        {       
            count = 0;
            if(LIF)
                printf("\tWrote: %8ld\r", (long)bytes);
   1adfe:	89 e7       	ldi	r24, 0x79	; 121
   1ae00:	97 e3       	ldi	r25, 0x37	; 55
   1ae02:	9c 01       	movw	r18, r24
   1ae04:	40 e0       	ldi	r20, 0x00	; 0
   1ae06:	cc 5f       	subi	r28, 0xFC	; 252
   1ae08:	dc 4f       	sbci	r29, 0xFC	; 252
   1ae0a:	28 83       	st	Y, r18
   1ae0c:	39 83       	std	Y+1, r19	; 0x01
   1ae0e:	4a 83       	std	Y+2, r20	; 0x02
   1ae10:	c4 50       	subi	r28, 0x04	; 4
   1ae12:	d3 40       	sbci	r29, 0x03	; 3
   1ae14:	1a c0       	rjmp	.+52     	; 0x1ae4a <lif_add_ascii_file_as_e010_wrapper+0x7a>
                fclose(fi);
                return(-1);
            }
        }

        offset += size;
   1ae16:	ce 5f       	subi	r28, 0xFE	; 254
   1ae18:	dc 4f       	sbci	r29, 0xFC	; 252
   1ae1a:	28 81       	ld	r18, Y
   1ae1c:	39 81       	ldd	r19, Y+1	; 0x01
   1ae1e:	c2 50       	subi	r28, 0x02	; 2
   1ae20:	d3 40       	sbci	r29, 0x03	; 3
   1ae22:	c9 01       	movw	r24, r18
   1ae24:	03 2e       	mov	r0, r19
   1ae26:	00 0c       	add	r0, r0
   1ae28:	aa 0b       	sbc	r26, r26
   1ae2a:	bb 0b       	sbc	r27, r27
   1ae2c:	88 0e       	add	r8, r24
   1ae2e:	99 1e       	adc	r9, r25
   1ae30:	aa 1e       	adc	r10, r26
   1ae32:	bb 1e       	adc	r11, r27
        bytes += size;
   1ae34:	48 0e       	add	r4, r24
   1ae36:	59 1e       	adc	r5, r25
   1ae38:	6a 1e       	adc	r6, r26
   1ae3a:	7b 1e       	adc	r7, r27
        count += size;
   1ae3c:	22 0e       	add	r2, r18
   1ae3e:	33 1e       	adc	r3, r19

        if(count > 256)
   1ae40:	31 e0       	ldi	r19, 0x01	; 1
   1ae42:	23 16       	cp	r2, r19
   1ae44:	33 06       	cpc	r3, r19
   1ae46:	0c f0       	brlt	.+2      	; 0x1ae4a <lif_add_ascii_file_as_e010_wrapper+0x7a>
   1ae48:	45 c0       	rjmp	.+138    	; 0x1aed4 <lif_add_ascii_file_as_e010_wrapper+0x104>
    bytes = 0;
    count = 0;

    // Read user file and write LIF records
    // reserve 3 + LIF header bytes + 1 (EOS)
    while( fgets((char *)str,(int)sizeof(str) - 4, fi) != NULL )
   1ae4a:	a6 01       	movw	r20, r12
   1ae4c:	6d ef       	ldi	r22, 0xFD	; 253
   1ae4e:	70 e0       	ldi	r23, 0x00	; 0
   1ae50:	ce 01       	movw	r24, r28
   1ae52:	8f 5f       	subi	r24, 0xFF	; 255
   1ae54:	9d 4f       	sbci	r25, 0xFD	; 253
   1ae56:	0e 94 71 77 	call	0xeee2	; 0xeee2 <fgets>
   1ae5a:	89 2b       	or	r24, r25
   1ae5c:	09 f4       	brne	.+2      	; 0x1ae60 <lif_add_ascii_file_as_e010_wrapper+0x90>
   1ae5e:	58 c0       	rjmp	.+176    	; 0x1af10 <lif_add_ascii_file_as_e010_wrapper+0x140>
    {
        trim_tail((char *)str);
   1ae60:	ce 01       	movw	r24, r28
   1ae62:	8f 5f       	subi	r24, 0xFF	; 255
   1ae64:	9d 4f       	sbci	r25, 0xFD	; 253
   1ae66:	0e 94 ad 32 	call	0x655a	; 0x655a <trim_tail>

        strcat((char *)str,"\r"); // HP85 lines end with "\r"
   1ae6a:	68 ed       	ldi	r22, 0xD8	; 216
   1ae6c:	75 e1       	ldi	r23, 0x15	; 21
   1ae6e:	ce 01       	movw	r24, r28
   1ae70:	8f 5f       	subi	r24, 0xFF	; 255
   1ae72:	9d 4f       	sbci	r25, 0xFD	; 253
   1ae74:	0e 94 74 32 	call	0x64e8	; 0x64e8 <strcat>

        size = lif_ascii_string_to_e010(str, offset, obuf);
   1ae78:	9e 01       	movw	r18, r28
   1ae7a:	2f 5f       	subi	r18, 0xFF	; 255
   1ae7c:	3f 4f       	sbci	r19, 0xFF	; 255
   1ae7e:	b5 01       	movw	r22, r10
   1ae80:	a4 01       	movw	r20, r8
   1ae82:	ce 01       	movw	r24, r28
   1ae84:	8f 5f       	subi	r24, 0xFF	; 255
   1ae86:	9d 4f       	sbci	r25, 0xFD	; 253
   1ae88:	ea de       	rcall	.-556    	; 0x1ac5e <lif_ascii_string_to_e010>
   1ae8a:	ce 5f       	subi	r28, 0xFE	; 254
   1ae8c:	dc 4f       	sbci	r29, 0xFC	; 252
   1ae8e:	99 83       	std	Y+1, r25	; 0x01
   1ae90:	88 83       	st	Y, r24
   1ae92:	c2 50       	subi	r28, 0x02	; 2
   1ae94:	d3 40       	sbci	r29, 0x03	; 3
        // Write string
        // Now Write string
        if(LIF)
   1ae96:	e1 14       	cp	r14, r1
   1ae98:	f1 04       	cpc	r15, r1
   1ae9a:	09 f4       	brne	.+2      	; 0x1ae9e <lif_add_ascii_file_as_e010_wrapper+0xce>
   1ae9c:	bc cf       	rjmp	.-136    	; 0x1ae16 <lif_add_ascii_file_as_e010_wrapper+0x46>
        {
            len = lif_write(LIF, obuf, offset, size);
   1ae9e:	8c 01       	movw	r16, r24
   1aea0:	a5 01       	movw	r20, r10
   1aea2:	94 01       	movw	r18, r8
   1aea4:	be 01       	movw	r22, r28
   1aea6:	6f 5f       	subi	r22, 0xFF	; 255
   1aea8:	7f 4f       	sbci	r23, 0xFF	; 255
   1aeaa:	c7 01       	movw	r24, r14
   1aeac:	0e 94 a6 c3 	call	0x1874c	; 0x1874c <lif_write>
            if(len < size)
   1aeb0:	ce 5f       	subi	r28, 0xFE	; 254
   1aeb2:	dc 4f       	sbci	r29, 0xFC	; 252
   1aeb4:	08 81       	ld	r16, Y
   1aeb6:	19 81       	ldd	r17, Y+1	; 0x01
   1aeb8:	c2 50       	subi	r28, 0x02	; 2
   1aeba:	d3 40       	sbci	r29, 0x03	; 3
   1aebc:	80 17       	cp	r24, r16
   1aebe:	91 07       	cpc	r25, r17
   1aec0:	0c f0       	brlt	.+2      	; 0x1aec4 <lif_add_ascii_file_as_e010_wrapper+0xf4>
   1aec2:	a9 cf       	rjmp	.-174    	; 0x1ae16 <lif_add_ascii_file_as_e010_wrapper+0x46>
            {
                fclose(fi);
   1aec4:	c6 01       	movw	r24, r12
   1aec6:	0e 94 ea 7d 	call	0xfbd4	; 0xfbd4 <fclose>
                return(-1);
   1aeca:	6f ef       	ldi	r22, 0xFF	; 255
   1aecc:	7f ef       	ldi	r23, 0xFF	; 255
   1aece:	8f ef       	ldi	r24, 0xFF	; 255
   1aed0:	9f ef       	ldi	r25, 0xFF	; 255
   1aed2:	86 c0       	rjmp	.+268    	; 0x1afe0 <lif_add_ascii_file_as_e010_wrapper+0x210>
        count += size;

        if(count > 256)
        {       
            count = 0;
            if(LIF)
   1aed4:	e1 14       	cp	r14, r1
   1aed6:	f1 04       	cpc	r15, r1
   1aed8:	c1 f0       	breq	.+48     	; 0x1af0a <lif_add_ascii_file_as_e010_wrapper+0x13a>
                printf("\tWrote: %8ld\r", (long)bytes);
   1aeda:	7f 92       	push	r7
   1aedc:	6f 92       	push	r6
   1aede:	5f 92       	push	r5
   1aee0:	4f 92       	push	r4
   1aee2:	1f 92       	push	r1
   1aee4:	cb 5f       	subi	r28, 0xFB	; 251
   1aee6:	dc 4f       	sbci	r29, 0xFC	; 252
   1aee8:	48 81       	ld	r20, Y
   1aeea:	c5 50       	subi	r28, 0x05	; 5
   1aeec:	d3 40       	sbci	r29, 0x03	; 3
   1aeee:	4f 93       	push	r20
   1aef0:	cc 5f       	subi	r28, 0xFC	; 252
   1aef2:	dc 4f       	sbci	r29, 0xFC	; 252
   1aef4:	88 81       	ld	r24, Y
   1aef6:	c4 50       	subi	r28, 0x04	; 4
   1aef8:	d3 40       	sbci	r29, 0x03	; 3
   1aefa:	8f 93       	push	r24
   1aefc:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1af00:	0f b6       	in	r0, 0x3f	; 63
   1af02:	f8 94       	cli
   1af04:	de bf       	out	0x3e, r29	; 62
   1af06:	0f be       	out	0x3f, r0	; 63
   1af08:	cd bf       	out	0x3d, r28	; 61
        bytes += size;
        count += size;

        if(count > 256)
        {       
            count = 0;
   1af0a:	21 2c       	mov	r2, r1
   1af0c:	31 2c       	mov	r3, r1
   1af0e:	9d cf       	rjmp	.-198    	; 0x1ae4a <lif_add_ascii_file_as_e010_wrapper+0x7a>
            if(LIF)
                printf("\tWrote: %8ld\r", (long)bytes);
        }
    }

    fclose(fi);
   1af10:	c6 01       	movw	r24, r12
   1af12:	0e 94 ea 7d 	call	0xfbd4	; 0xfbd4 <fclose>

    // Write EOF
    str[0] = 0;
   1af16:	cf 5f       	subi	r28, 0xFF	; 255
   1af18:	dd 4f       	sbci	r29, 0xFD	; 253
   1af1a:	18 82       	st	Y, r1
   1af1c:	c1 50       	subi	r28, 0x01	; 1
   1af1e:	d2 40       	sbci	r29, 0x02	; 2
    // We only want to return the count of bytes in the file NOT the padding at the end
    // Write EOF string with padding
    size = lif_ascii_string_to_e010(str, offset,obuf);
   1af20:	9e 01       	movw	r18, r28
   1af22:	2f 5f       	subi	r18, 0xFF	; 255
   1af24:	3f 4f       	sbci	r19, 0xFF	; 255
   1af26:	b5 01       	movw	r22, r10
   1af28:	a4 01       	movw	r20, r8
   1af2a:	ce 01       	movw	r24, r28
   1af2c:	8f 5f       	subi	r24, 0xFF	; 255
   1af2e:	9d 4f       	sbci	r25, 0xFD	; 253
   1af30:	96 de       	rcall	.-724    	; 0x1ac5e <lif_ascii_string_to_e010>
   1af32:	6c 01       	movw	r12, r24

    if(LIF)
   1af34:	e1 14       	cp	r14, r1
   1af36:	f1 04       	cpc	r15, r1
   1af38:	b9 f4       	brne	.+46     	; 0x1af68 <lif_add_ascii_file_as_e010_wrapper+0x198>
            return(-1);

    }

    offset += size;
    bytes += size;
   1af3a:	c6 01       	movw	r24, r12
   1af3c:	dd 0c       	add	r13, r13
   1af3e:	aa 0b       	sbc	r26, r26
   1af40:	bb 0b       	sbc	r27, r27
   1af42:	48 0e       	add	r4, r24
   1af44:	59 1e       	adc	r5, r25
   1af46:	6a 1e       	adc	r6, r26
   1af48:	7b 1e       	adc	r7, r27

    // PAD
    size = lif_e010_pad_sector(offset, obuf);
   1af4a:	88 0e       	add	r8, r24
   1af4c:	99 1e       	adc	r9, r25
   1af4e:	aa 1e       	adc	r10, r26
   1af50:	bb 1e       	adc	r11, r27
   1af52:	ae 01       	movw	r20, r28
   1af54:	4f 5f       	subi	r20, 0xFF	; 255
   1af56:	5f 4f       	sbci	r21, 0xFF	; 255
   1af58:	c5 01       	movw	r24, r10
   1af5a:	b4 01       	movw	r22, r8
   1af5c:	26 de       	rcall	.-948    	; 0x1abaa <lif_e010_pad_sector>
   1af5e:	6c 01       	movw	r12, r24
    if(LIF)
   1af60:	e1 14       	cp	r14, r1
   1af62:	f1 04       	cpc	r15, r1
   1af64:	f1 f4       	brne	.+60     	; 0x1afa2 <lif_add_ascii_file_as_e010_wrapper+0x1d2>
   1af66:	3a c0       	rjmp	.+116    	; 0x1afdc <lif_add_ascii_file_as_e010_wrapper+0x20c>
    // Write EOF string with padding
    size = lif_ascii_string_to_e010(str, offset,obuf);

    if(LIF)
    {
        printf("\tWrote: %8ld\r", (long)bytes);
   1af68:	7f 92       	push	r7
   1af6a:	6f 92       	push	r6
   1af6c:	5f 92       	push	r5
   1af6e:	4f 92       	push	r4
   1af70:	8b e6       	ldi	r24, 0x6B	; 107
   1af72:	97 e3       	ldi	r25, 0x37	; 55
   1af74:	1f 92       	push	r1
   1af76:	9f 93       	push	r25
   1af78:	8f 93       	push	r24
   1af7a:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
        len = lif_write(LIF, obuf, offset, size);
   1af7e:	86 01       	movw	r16, r12
   1af80:	a5 01       	movw	r20, r10
   1af82:	94 01       	movw	r18, r8
   1af84:	be 01       	movw	r22, r28
   1af86:	6f 5f       	subi	r22, 0xFF	; 255
   1af88:	7f 4f       	sbci	r23, 0xFF	; 255
   1af8a:	c7 01       	movw	r24, r14
   1af8c:	0e 94 a6 c3 	call	0x1874c	; 0x1874c <lif_write>
        if(len < size)
   1af90:	0f b6       	in	r0, 0x3f	; 63
   1af92:	f8 94       	cli
   1af94:	de bf       	out	0x3e, r29	; 62
   1af96:	0f be       	out	0x3f, r0	; 63
   1af98:	cd bf       	out	0x3d, r28	; 61
   1af9a:	8c 15       	cp	r24, r12
   1af9c:	9d 05       	cpc	r25, r13
   1af9e:	6c f6       	brge	.-102    	; 0x1af3a <lif_add_ascii_file_as_e010_wrapper+0x16a>
   1afa0:	94 cf       	rjmp	.-216    	; 0x1aeca <lif_add_ascii_file_as_e010_wrapper+0xfa>

    // PAD
    size = lif_e010_pad_sector(offset, obuf);
    if(LIF)
    {
        len = lif_write(LIF, obuf, offset, size);
   1afa2:	8c 01       	movw	r16, r24
   1afa4:	a5 01       	movw	r20, r10
   1afa6:	94 01       	movw	r18, r8
   1afa8:	be 01       	movw	r22, r28
   1afaa:	6f 5f       	subi	r22, 0xFF	; 255
   1afac:	7f 4f       	sbci	r23, 0xFF	; 255
   1afae:	c7 01       	movw	r24, r14
   1afb0:	0e 94 a6 c3 	call	0x1874c	; 0x1874c <lif_write>
        if(len < size)
   1afb4:	8c 15       	cp	r24, r12
   1afb6:	9d 05       	cpc	r25, r13
   1afb8:	0c f4       	brge	.+2      	; 0x1afbc <lif_add_ascii_file_as_e010_wrapper+0x1ec>
   1afba:	87 cf       	rjmp	.-242    	; 0x1aeca <lif_add_ascii_file_as_e010_wrapper+0xfa>
            return(-1);
    }

    if(LIF)
        printf("\tWrote: %8ld\r",(long)bytes);
   1afbc:	7f 92       	push	r7
   1afbe:	6f 92       	push	r6
   1afc0:	5f 92       	push	r5
   1afc2:	4f 92       	push	r4
   1afc4:	8d e5       	ldi	r24, 0x5D	; 93
   1afc6:	97 e3       	ldi	r25, 0x37	; 55
   1afc8:	1f 92       	push	r1
   1afca:	9f 93       	push	r25
   1afcc:	8f 93       	push	r24
   1afce:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1afd2:	0f b6       	in	r0, 0x3f	; 63
   1afd4:	f8 94       	cli
   1afd6:	de bf       	out	0x3e, r29	; 62
   1afd8:	0f be       	out	0x3f, r0	; 63
   1afda:	cd bf       	out	0x3d, r28	; 61

    return(bytes);
   1afdc:	b2 01       	movw	r22, r4
   1afde:	c3 01       	movw	r24, r6
}
   1afe0:	ca 5f       	subi	r28, 0xFA	; 250
   1afe2:	dc 4f       	sbci	r29, 0xFC	; 252
   1afe4:	e2 e1       	ldi	r30, 0x12	; 18
   1afe6:	0c 94 fc e5 	jmp	0x1cbf8	; 0x1cbf8 <__epilogue_restores__>

0001afea <lif_add_ascii_file_as_e010>:
/// @param[in] lifname: LIF file name
/// @param[in] userfile: userfile name
/// @return size of data written into to LIF image, or -1 on error
MEMSPACE
long lif_add_ascii_file_as_e010(char *lifimagename, char *lifname, char *userfile)
{
   1afea:	a2 e3       	ldi	r26, 0x32	; 50
   1afec:	b0 e0       	ldi	r27, 0x00	; 0
   1afee:	eb ef       	ldi	r30, 0xFB	; 251
   1aff0:	f7 ed       	ldi	r31, 0xD7	; 215
   1aff2:	0c 94 e0 e5 	jmp	0x1cbc0	; 0x1cbc0 <__prologue_saves__>
   1aff6:	6c 01       	movw	r12, r24
   1aff8:	1b 01       	movw	r2, r22
   1affa:	7a 01       	movw	r14, r20
    int index;
    lif_t *LIF;
    stat_t st, *sp;


    if(!*lifimagename)
   1affc:	fc 01       	movw	r30, r24
   1affe:	80 81       	ld	r24, Z
   1b000:	81 11       	cpse	r24, r1
   1b002:	03 c0       	rjmp	.+6      	; 0x1b00a <lif_add_ascii_file_as_e010+0x20>
    {
        printf("lif_add_ascii_file_as_e010: lifimagename is empty\n");
   1b004:	8a e2       	ldi	r24, 0x2A	; 42
   1b006:	97 e3       	ldi	r25, 0x37	; 55
   1b008:	1a c0       	rjmp	.+52     	; 0x1b03e <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }
    if(!*lifname)
   1b00a:	fb 01       	movw	r30, r22
   1b00c:	80 81       	ld	r24, Z
   1b00e:	81 11       	cpse	r24, r1
   1b010:	03 c0       	rjmp	.+6      	; 0x1b018 <lif_add_ascii_file_as_e010+0x2e>
    {
        printf("lif_add_ascii_file_as_e010: lifname is empty\n");
   1b012:	8c ef       	ldi	r24, 0xFC	; 252
   1b014:	96 e3       	ldi	r25, 0x36	; 54
   1b016:	13 c0       	rjmp	.+38     	; 0x1b03e <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }
    if(!*userfile)
   1b018:	fa 01       	movw	r30, r20
   1b01a:	80 81       	ld	r24, Z
   1b01c:	81 11       	cpse	r24, r1
   1b01e:	03 c0       	rjmp	.+6      	; 0x1b026 <lif_add_ascii_file_as_e010+0x3c>
    {
        printf("lif_add_ascii_file_as_e010: userfile is empty\n");
   1b020:	8d ec       	ldi	r24, 0xCD	; 205
   1b022:	96 e3       	ldi	r25, 0x36	; 54
   1b024:	0c c0       	rjmp	.+24     	; 0x1b03e <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }

    //Get size and date info
    sp = lif_stat(userfile, (stat_t *)&st);
   1b026:	be 01       	movw	r22, r28
   1b028:	6f 5f       	subi	r22, 0xFF	; 255
   1b02a:	7f 4f       	sbci	r23, 0xFF	; 255
   1b02c:	ca 01       	movw	r24, r20
   1b02e:	0e 94 ef c2 	call	0x185de	; 0x185de <lif_stat>
   1b032:	9a ab       	std	Y+50, r25	; 0x32
   1b034:	89 ab       	std	Y+49, r24	; 0x31
    if(!sp)
   1b036:	89 2b       	or	r24, r25
   1b038:	59 f4       	brne	.+22     	; 0x1b050 <lif_add_ascii_file_as_e010+0x66>
    {
        printf("lif_add_ascii_file_as_e010: userfile not found\n");
   1b03a:	8d e9       	ldi	r24, 0x9D	; 157
   1b03c:	96 e3       	ldi	r25, 0x36	; 54
   1b03e:	1f 92       	push	r1
   1b040:	9f 93       	push	r25
   1b042:	8f 93       	push	r24
   1b044:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
        return(-1);
   1b048:	0f 90       	pop	r0
   1b04a:	0f 90       	pop	r0
   1b04c:	0f 90       	pop	r0
   1b04e:	fe c0       	rjmp	.+508    	; 0x1b24c <lif_add_ascii_file_as_e010+0x262>
    }

    if(debuglevel & 0x400)
   1b050:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1b054:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1b058:	92 ff       	sbrs	r25, 2
   1b05a:	12 c0       	rjmp	.+36     	; 0x1b080 <lif_add_ascii_file_as_e010+0x96>
        printf("LIF image:[%s], LIF name:[%s], user file:[%s]\n", 
   1b05c:	ff 92       	push	r15
   1b05e:	ef 92       	push	r14
   1b060:	3f 92       	push	r3
   1b062:	2f 92       	push	r2
   1b064:	df 92       	push	r13
   1b066:	cf 92       	push	r12
   1b068:	8e e6       	ldi	r24, 0x6E	; 110
   1b06a:	96 e3       	ldi	r25, 0x36	; 54
   1b06c:	1f 92       	push	r1
   1b06e:	9f 93       	push	r25
   1b070:	8f 93       	push	r24
   1b072:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1b076:	0f b6       	in	r0, 0x3f	; 63
   1b078:	f8 94       	cli
   1b07a:	de bf       	out	0x3e, r29	; 62
   1b07c:	0f be       	out	0x3f, r0	; 63
   1b07e:	cd bf       	out	0x3d, r28	; 61
            lifimagename, lifname, userfile);

    // Find out how big converted file will be
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
   1b080:	97 01       	movw	r18, r14
   1b082:	40 e0       	ldi	r20, 0x00	; 0
   1b084:	50 e0       	ldi	r21, 0x00	; 0
   1b086:	ba 01       	movw	r22, r20
   1b088:	80 e0       	ldi	r24, 0x00	; 0
   1b08a:	90 e0       	ldi	r25, 0x00	; 0
   1b08c:	a1 de       	rcall	.-702    	; 0x1add0 <lif_add_ascii_file_as_e010_wrapper>
   1b08e:	4b 01       	movw	r8, r22
   1b090:	5c 01       	movw	r10, r24
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1b092:	47 2e       	mov	r4, r23
   1b094:	58 2e       	mov	r5, r24
   1b096:	69 2e       	mov	r6, r25
   1b098:	77 24       	eor	r7, r7
    if(bytes % (long)LIF_SECTOR_SIZE)
   1b09a:	66 23       	and	r22, r22
   1b09c:	29 f0       	breq	.+10     	; 0x1b0a8 <lif_add_ascii_file_as_e010+0xbe>
        ++sectors;
   1b09e:	9f ef       	ldi	r25, 0xFF	; 255
   1b0a0:	49 1a       	sub	r4, r25
   1b0a2:	59 0a       	sbc	r5, r25
   1b0a4:	69 0a       	sbc	r6, r25
   1b0a6:	79 0a       	sbc	r7, r25

    // Find out how big converted file will be
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
    sectors = lif_bytes2sectors(bytes);

    LIF = lif_open_volume(lifimagename,"r+");
   1b0a8:	69 e8       	ldi	r22, 0x89	; 137
   1b0aa:	78 e0       	ldi	r23, 0x08	; 8
   1b0ac:	c6 01       	movw	r24, r12
   1b0ae:	85 da       	rcall	.-2806   	; 0x1a5ba <lif_open_volume>
   1b0b0:	8c 01       	movw	r16, r24
    if(LIF == NULL)
   1b0b2:	00 97       	sbiw	r24, 0x00	; 0
   1b0b4:	09 f4       	brne	.+2      	; 0x1b0b8 <lif_add_ascii_file_as_e010+0xce>
        return(-1); 

    // Now find free record
    index = lif_newdir(LIF, sectors);
   1b0b6:	ca c0       	rjmp	.+404    	; 0x1b24c <lif_add_ascii_file_as_e010+0x262>
   1b0b8:	b3 01       	movw	r22, r6
   1b0ba:	a2 01       	movw	r20, r4
   1b0bc:	19 d9       	rcall	.-3534   	; 0x1a2f0 <lif_newdir>
    if(index == -1)
   1b0be:	3c 01       	movw	r6, r24
   1b0c0:	01 96       	adiw	r24, 0x01	; 1
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n", 
   1b0c2:	a1 f4       	brne	.+40     	; 0x1b0ec <lif_add_ascii_file_as_e010+0x102>
   1b0c4:	ff 92       	push	r15
   1b0c6:	ef 92       	push	r14
   1b0c8:	df 92       	push	r13
   1b0ca:	cf 92       	push	r12
   1b0cc:	8e e3       	ldi	r24, 0x3E	; 62
   1b0ce:	96 e3       	ldi	r25, 0x36	; 54
   1b0d0:	1f 92       	push	r1
   1b0d2:	9f 93       	push	r25
   1b0d4:	8f 93       	push	r24
   1b0d6:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b0da:	c8 01       	movw	r24, r16
   1b0dc:	0e 94 e5 cb 	call	0x197ca	; 0x197ca <lif_close_volume>
    if(index == -1)
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n", 
            lifimagename, userfile);
            lif_closedir(LIF);
            return(-1);
   1b0e0:	0f b6       	in	r0, 0x3f	; 63
   1b0e2:	f8 94       	cli
   1b0e4:	de bf       	out	0x3e, r29	; 62
   1b0e6:	0f be       	out	0x3f, r0	; 63
   1b0e8:	cd bf       	out	0x3d, r28	; 61
    }

    // Initialize the free directory entry
    lif_fixname(LIF->DIR.filename, lifname,10);
   1b0ea:	b0 c0       	rjmp	.+352    	; 0x1b24c <lif_add_ascii_file_as_e010+0x262>
   1b0ec:	68 01       	movw	r12, r16
   1b0ee:	9f e4       	ldi	r25, 0x4F	; 79
   1b0f0:	c9 0e       	add	r12, r25
   1b0f2:	d1 1c       	adc	r13, r1
   1b0f4:	4a e0       	ldi	r20, 0x0A	; 10
   1b0f6:	50 e0       	ldi	r21, 0x00	; 0
   1b0f8:	b1 01       	movw	r22, r2
   1b0fa:	c6 01       	movw	r24, r12
   1b0fc:	0e 94 93 c4 	call	0x18926	; 0x18926 <lif_fixname>
    LIF->DIR.FileType = 0xe010;             // 10
   1b100:	80 e1       	ldi	r24, 0x10	; 16
   1b102:	90 ee       	ldi	r25, 0xE0	; 224
   1b104:	f8 01       	movw	r30, r16
   1b106:	e6 5a       	subi	r30, 0xA6	; 166
   1b108:	ff 4f       	sbci	r31, 0xFF	; 255
   1b10a:	91 83       	std	Z+1, r25	; 0x01
    lif_time2lifbcd(sp->st_mtime, LIF->DIR.date);
   1b10c:	80 83       	st	Z, r24
   1b10e:	e9 a9       	ldd	r30, Y+49	; 0x31
   1b110:	fa a9       	ldd	r31, Y+50	; 0x32
   1b112:	60 a5       	ldd	r22, Z+40	; 0x28
   1b114:	71 a5       	ldd	r23, Z+41	; 0x29
   1b116:	82 a5       	ldd	r24, Z+42	; 0x2a
   1b118:	93 a5       	ldd	r25, Z+43	; 0x2b
   1b11a:	a8 01       	movw	r20, r16
   1b11c:	4c 59       	subi	r20, 0x9C	; 156
   1b11e:	5f 4f       	sbci	r21, 0xFF	; 255
   1b120:	0e 94 d8 c6 	call	0x18db0	; 0x18db0 <lif_time2lifbcd>

    LIF->DIR.VolNumber = 0x8001;            // 26
   1b124:	81 e0       	ldi	r24, 0x01	; 1
   1b126:	90 e8       	ldi	r25, 0x80	; 128
   1b128:	f8 01       	movw	r30, r16
   1b12a:	e6 59       	subi	r30, 0x96	; 150
   1b12c:	ff 4f       	sbci	r31, 0xFF	; 255
   1b12e:	91 83       	std	Z+1, r25	; 0x01
    LIF->DIR.FileBytes = bytes;                 // 28
   1b130:	80 83       	st	Z, r24
   1b132:	32 96       	adiw	r30, 0x02	; 2
   1b134:	91 82       	std	Z+1, r9	; 0x01
    LIF->DIR.SectorSize  = 0x100;           // 30
   1b136:	80 82       	st	Z, r8
   1b138:	80 e0       	ldi	r24, 0x00	; 0
   1b13a:	91 e0       	ldi	r25, 0x01	; 1
   1b13c:	32 96       	adiw	r30, 0x02	; 2
   1b13e:	91 83       	std	Z+1, r25	; 0x01
    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1b140:	80 83       	st	Z, r24
   1b142:	58 01       	movw	r10, r16
   1b144:	fc e5       	ldi	r31, 0x5C	; 92
   1b146:	af 0e       	add	r10, r31
   1b148:	b1 1c       	adc	r11, r1
   1b14a:	f5 01       	movw	r30, r10
   1b14c:	80 81       	ld	r24, Z
   1b14e:	91 81       	ldd	r25, Z+1	; 0x01
   1b150:	a2 81       	ldd	r26, Z+2	; 0x02
   1b152:	b3 81       	ldd	r27, Z+3	; 0x03
   1b154:	22 24       	eor	r2, r2
   1b156:	38 2e       	mov	r3, r24
   1b158:	49 2e       	mov	r4, r25

    if(debuglevel & 0x400)
   1b15a:	5a 2e       	mov	r5, r26
   1b15c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1b160:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1b164:	92 ff       	sbrs	r25, 2
        lif_dump_vol(LIF,"lif_after lif_newdir");
   1b166:	05 c0       	rjmp	.+10     	; 0x1b172 <lif_add_ascii_file_as_e010+0x188>
   1b168:	6a ed       	ldi	r22, 0xDA	; 218
   1b16a:	75 e1       	ldi	r23, 0x15	; 21
   1b16c:	c8 01       	movw	r24, r16
   1b16e:	0e 94 c4 c7 	call	0x18f88	; 0x18f88 <lif_dump_vol>

    // Write converted file into free space first
    bytes = lif_add_ascii_file_as_e010_wrapper(LIF,offset,userfile);
   1b172:	97 01       	movw	r18, r14
   1b174:	b2 01       	movw	r22, r4
   1b176:	a1 01       	movw	r20, r2
   1b178:	c8 01       	movw	r24, r16
   1b17a:	2a de       	rcall	.-940    	; 0x1add0 <lif_add_ascii_file_as_e010_wrapper>
   1b17c:	4b 01       	movw	r8, r22

    if(debuglevel & 0x400)
   1b17e:	7c 01       	movw	r14, r24
   1b180:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1b184:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1b188:	92 ff       	sbrs	r25, 2
    {
        printf("New Directory Information AFTER write\n");
   1b18a:	40 c0       	rjmp	.+128    	; 0x1b20c <lif_add_ascii_file_as_e010+0x222>
   1b18c:	87 e1       	ldi	r24, 0x17	; 23
   1b18e:	96 e3       	ldi	r25, 0x36	; 54
   1b190:	1f 92       	push	r1
   1b192:	9f 93       	push	r25
   1b194:	8f 93       	push	r24
   1b196:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
        printf("Name:              %s\n", LIF->DIR.filename);
   1b19a:	df 92       	push	r13
   1b19c:	cf 92       	push	r12
   1b19e:	80 e0       	ldi	r24, 0x00	; 0
   1b1a0:	96 e3       	ldi	r25, 0x36	; 54
   1b1a2:	1f 92       	push	r1
   1b1a4:	9f 93       	push	r25
   1b1a6:	8f 93       	push	r24
   1b1a8:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
        printf("Index:            %4d\n", (int)index);
   1b1ac:	7f 92       	push	r7
   1b1ae:	6f 92       	push	r6
   1b1b0:	89 ee       	ldi	r24, 0xE9	; 233
   1b1b2:	95 e3       	ldi	r25, 0x35	; 53
   1b1b4:	1f 92       	push	r1
   1b1b6:	9f 93       	push	r25
   1b1b8:	8f 93       	push	r24
   1b1ba:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
        printf("First Sector:     %4lxH\n", (long) LIF->DIR.FileStartSector);
   1b1be:	f5 01       	movw	r30, r10
   1b1c0:	83 81       	ldd	r24, Z+3	; 0x03
   1b1c2:	8f 93       	push	r24
   1b1c4:	82 81       	ldd	r24, Z+2	; 0x02
   1b1c6:	8f 93       	push	r24
   1b1c8:	81 81       	ldd	r24, Z+1	; 0x01
   1b1ca:	8f 93       	push	r24
   1b1cc:	80 81       	ld	r24, Z
   1b1ce:	8f 93       	push	r24
   1b1d0:	80 ed       	ldi	r24, 0xD0	; 208
   1b1d2:	95 e3       	ldi	r25, 0x35	; 53
   1b1d4:	1f 92       	push	r1
   1b1d6:	9f 93       	push	r25
   1b1d8:	8f 93       	push	r24
   1b1da:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
        printf("File Sectors:     %4lxH\n", (long)LIF->DIR.FileSectors);
   1b1de:	f8 01       	movw	r30, r16
   1b1e0:	e0 5a       	subi	r30, 0xA0	; 160
   1b1e2:	ff 4f       	sbci	r31, 0xFF	; 255
   1b1e4:	83 81       	ldd	r24, Z+3	; 0x03
   1b1e6:	8f 93       	push	r24
   1b1e8:	82 81       	ldd	r24, Z+2	; 0x02
   1b1ea:	8f 93       	push	r24
   1b1ec:	81 81       	ldd	r24, Z+1	; 0x01
   1b1ee:	8f 93       	push	r24
   1b1f0:	80 81       	ld	r24, Z
   1b1f2:	8f 93       	push	r24
   1b1f4:	87 eb       	ldi	r24, 0xB7	; 183
   1b1f6:	95 e3       	ldi	r25, 0x35	; 53
   1b1f8:	1f 92       	push	r1
   1b1fa:	9f 93       	push	r25
   1b1fc:	8f 93       	push	r24
   1b1fe:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1b202:	0f b6       	in	r0, 0x3f	; 63
   1b204:	f8 94       	cli
   1b206:	de bf       	out	0x3e, r29	; 62
   1b208:	0f be       	out	0x3f, r0	; 63
    }

    // Write directory record
    // Note: lif_newdir alrwady did the new EOF
    if( !lif_writedirindex(LIF,index))
   1b20a:	cd bf       	out	0x3d, r28	; 61
   1b20c:	b3 01       	movw	r22, r6
   1b20e:	c8 01       	movw	r24, r16
   1b210:	0e 94 cf cc 	call	0x1999e	; 0x1999e <lif_writedirindex>
   1b214:	89 2b       	or	r24, r25
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b216:	21 f4       	brne	.+8      	; 0x1b220 <lif_add_ascii_file_as_e010+0x236>
   1b218:	c8 01       	movw	r24, r16
   1b21a:	0e 94 e5 cb 	call	0x197ca	; 0x197ca <lif_close_volume>
   1b21e:	16 c0       	rjmp	.+44     	; 0x1b24c <lif_add_ascii_file_as_e010+0x262>
   1b220:	c8 01       	movw	r24, r16
   1b222:	0e 94 e5 cb 	call	0x197ca	; 0x197ca <lif_close_volume>
        return(-1);
    }

    lif_closedir(LIF);

    printf("\tWrote: %8ld\n", bytes);
   1b226:	ff 92       	push	r15
   1b228:	ef 92       	push	r14
   1b22a:	9f 92       	push	r9
   1b22c:	8f 92       	push	r8
   1b22e:	89 ea       	ldi	r24, 0xA9	; 169
   1b230:	95 e3       	ldi	r25, 0x35	; 53
   1b232:	1f 92       	push	r1
   1b234:	9f 93       	push	r25
   1b236:	8f 93       	push	r24
   1b238:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>

    // Return file size
    return(bytes);
   1b23c:	0f b6       	in	r0, 0x3f	; 63
   1b23e:	f8 94       	cli
   1b240:	de bf       	out	0x3e, r29	; 62
   1b242:	0f be       	out	0x3f, r0	; 63
   1b244:	cd bf       	out	0x3d, r28	; 61
   1b246:	b4 01       	movw	r22, r8
   1b248:	c7 01       	movw	r24, r14
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
    sectors = lif_bytes2sectors(bytes);

    LIF = lif_open_volume(lifimagename,"r+");
    if(LIF == NULL)
        return(-1); 
   1b24a:	04 c0       	rjmp	.+8      	; 0x1b254 <lif_add_ascii_file_as_e010+0x26a>
   1b24c:	6f ef       	ldi	r22, 0xFF	; 255
   1b24e:	7f ef       	ldi	r23, 0xFF	; 255
   1b250:	8f ef       	ldi	r24, 0xFF	; 255

    printf("\tWrote: %8ld\n", bytes);

    // Return file size
    return(bytes);
}
   1b252:	9f ef       	ldi	r25, 0xFF	; 255
   1b254:	e2 96       	adiw	r28, 0x32	; 50
   1b256:	e2 e1       	ldi	r30, 0x12	; 18
   1b258:	0c 94 fc e5 	jmp	0x1cbf8	; 0x1cbf8 <__epilogue_restores__>

0001b25c <lif_extract_e010_as_ascii>:
/// @param[in] lifname:  name of file in LIF image
/// @param[in] username: name to call the extracted image
/// @return 1 on sucess or 0 on error
MEMSPACE
int lif_extract_e010_as_ascii(char *lifimagename, char *lifname, char *username)
{
   1b25c:	ac e2       	ldi	r26, 0x2C	; 44
   1b25e:	b2 e0       	ldi	r27, 0x02	; 2
   1b260:	e4 e3       	ldi	r30, 0x34	; 52
   1b262:	f9 ed       	ldi	r31, 0xD9	; 217
   1b264:	0c 94 e0 e5 	jmp	0x1cbc0	; 0x1cbc0 <__prologue_saves__>
   1b268:	f8 2e       	mov	r15, r24
   1b26a:	b9 2e       	mov	r11, r25
   1b26c:	16 2f       	mov	r17, r22
   1b26e:	07 2f       	mov	r16, r23
   1b270:	c4 5e       	subi	r28, 0xE4	; 228
   1b272:	dd 4f       	sbci	r29, 0xFD	; 253
   1b274:	48 83       	st	Y, r20
   1b276:	cc 51       	subi	r28, 0x1C	; 28
   1b278:	d2 40       	sbci	r29, 0x02	; 2
   1b27a:	e5 2e       	mov	r14, r21
    uint8_t buf[LIF_SECTOR_SIZE+4];
    // Write buffer, FYI: will ALWAYS be smaller then the read data buffer
    uint8_t wbuf[LIF_SECTOR_SIZE+4];


    LIF = lif_open_volume(lifimagename,"r");
   1b27c:	61 e4       	ldi	r22, 0x41	; 65
   1b27e:	77 e0       	ldi	r23, 0x07	; 7
   1b280:	9c d9       	rcall	.-3272   	; 0x1a5ba <lif_open_volume>
   1b282:	6c 01       	movw	r12, r24
    if(LIF == NULL)
   1b284:	00 97       	sbiw	r24, 0x00	; 0
   1b286:	51 f4       	brne	.+20     	; 0x1b29c <lif_extract_e010_as_ascii+0x40>
    {
        printf("LIF image not found:%s\n", lifimagename);
   1b288:	bf 92       	push	r11
   1b28a:	ff 92       	push	r15
   1b28c:	81 e9       	ldi	r24, 0x91	; 145
   1b28e:	95 e3       	ldi	r25, 0x35	; 53
   1b290:	1f 92       	push	r1
   1b292:	9f 93       	push	r25
   1b294:	8f 93       	push	r24
   1b296:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1b29a:	11 c0       	rjmp	.+34     	; 0x1b2be <lif_extract_e010_as_ascii+0x62>
        return(0);
    }

    index = lif_find_file(LIF, lifname);
   1b29c:	61 2f       	mov	r22, r17
   1b29e:	70 2f       	mov	r23, r16
   1b2a0:	20 dc       	rcall	.-1984   	; 0x1aae2 <lif_find_file>
    if(index == -1)
   1b2a2:	01 96       	adiw	r24, 0x01	; 1
   1b2a4:	a1 f4       	brne	.+40     	; 0x1b2ce <lif_extract_e010_as_ascii+0x72>
    {
        printf("LIF File not found:%s\n", lifname);
   1b2a6:	0f 93       	push	r16
   1b2a8:	1f 93       	push	r17
   1b2aa:	8a e7       	ldi	r24, 0x7A	; 122
   1b2ac:	95 e3       	ldi	r25, 0x35	; 53
   1b2ae:	1f 92       	push	r1
   1b2b0:	9f 93       	push	r25
   1b2b2:	8f 93       	push	r24
   1b2b4:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b2b8:	c6 01       	movw	r24, r12
   1b2ba:	0e 94 e5 cb 	call	0x197ca	; 0x197ca <lif_close_volume>
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        printf("LIF File not found:%s\n", lifname);
        lif_closedir(LIF);
        return(0);
   1b2be:	0f 90       	pop	r0
   1b2c0:	0f 90       	pop	r0
   1b2c2:	0f 90       	pop	r0
   1b2c4:	0f 90       	pop	r0
   1b2c6:	0f 90       	pop	r0
   1b2c8:	80 e0       	ldi	r24, 0x00	; 0
   1b2ca:	90 e0       	ldi	r25, 0x00	; 0
   1b2cc:	ae c2       	rjmp	.+1372   	; 0x1b82a <lif_extract_e010_as_ascii+0x5ce>
    }

    if((LIF->DIR.FileType & 0xFFFC) != 0xE010)
   1b2ce:	f6 01       	movw	r30, r12
   1b2d0:	e6 5a       	subi	r30, 0xA6	; 166
   1b2d2:	ff 4f       	sbci	r31, 0xFF	; 255
   1b2d4:	80 81       	ld	r24, Z
   1b2d6:	91 81       	ldd	r25, Z+1	; 0x01
   1b2d8:	9c 01       	movw	r18, r24
   1b2da:	2c 7f       	andi	r18, 0xFC	; 252
   1b2dc:	20 31       	cpi	r18, 0x10	; 16
   1b2de:	30 4e       	sbci	r19, 0xE0	; 224
   1b2e0:	c9 f0       	breq	.+50     	; 0x1b314 <lif_extract_e010_as_ascii+0xb8>
    {
        printf("File %s has wrong type:[%04XH] expected 0xE010..0xE013\n", username, (int) LIF->DIR.FileType);
   1b2e2:	9f 93       	push	r25
   1b2e4:	8f 93       	push	r24
   1b2e6:	ef 92       	push	r14
   1b2e8:	c4 5e       	subi	r28, 0xE4	; 228
   1b2ea:	dd 4f       	sbci	r29, 0xFD	; 253
   1b2ec:	58 81       	ld	r21, Y
   1b2ee:	cc 51       	subi	r28, 0x1C	; 28
   1b2f0:	d2 40       	sbci	r29, 0x02	; 2
   1b2f2:	5f 93       	push	r21
   1b2f4:	82 e4       	ldi	r24, 0x42	; 66
   1b2f6:	95 e3       	ldi	r25, 0x35	; 53
   1b2f8:	1f 92       	push	r1
   1b2fa:	9f 93       	push	r25
   1b2fc:	8f 93       	push	r24
   1b2fe:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b302:	c6 01       	movw	r24, r12
   1b304:	0e 94 e5 cb 	call	0x197ca	; 0x197ca <lif_close_volume>

    if((LIF->DIR.FileType & 0xFFFC) != 0xE010)
    {
        printf("File %s has wrong type:[%04XH] expected 0xE010..0xE013\n", username, (int) LIF->DIR.FileType);
        lif_closedir(LIF);
        return(0);
   1b308:	0f b6       	in	r0, 0x3f	; 63
   1b30a:	f8 94       	cli
   1b30c:	de bf       	out	0x3e, r29	; 62
   1b30e:	0f be       	out	0x3f, r0	; 63
   1b310:	cd bf       	out	0x3d, r28	; 61
   1b312:	da cf       	rjmp	.-76     	; 0x1b2c8 <lif_extract_e010_as_ascii+0x6c>
    }

    start = LIF->DIR.FileStartSector;
   1b314:	f6 01       	movw	r30, r12
   1b316:	e4 5a       	subi	r30, 0xA4	; 164
   1b318:	ff 4f       	sbci	r31, 0xFF	; 255
   1b31a:	80 80       	ld	r8, Z
   1b31c:	91 80       	ldd	r9, Z+1	; 0x01
   1b31e:	a2 80       	ldd	r10, Z+2	; 0x02
   1b320:	b3 80       	ldd	r11, Z+3	; 0x03
    end = start + LIF->DIR.FileSectors;
   1b322:	34 96       	adiw	r30, 0x04	; 4
   1b324:	80 81       	ld	r24, Z
   1b326:	91 81       	ldd	r25, Z+1	; 0x01
   1b328:	a2 81       	ldd	r26, Z+2	; 0x02
   1b32a:	b3 81       	ldd	r27, Z+3	; 0x03
   1b32c:	a5 01       	movw	r20, r10
   1b32e:	94 01       	movw	r18, r8
   1b330:	28 0f       	add	r18, r24
   1b332:	39 1f       	adc	r19, r25
   1b334:	4a 1f       	adc	r20, r26
   1b336:	5b 1f       	adc	r21, r27
   1b338:	c9 5d       	subi	r28, 0xD9	; 217
   1b33a:	dd 4f       	sbci	r29, 0xFD	; 253
   1b33c:	28 83       	st	Y, r18
   1b33e:	39 83       	std	Y+1, r19	; 0x01
   1b340:	4a 83       	std	Y+2, r20	; 0x02
   1b342:	5b 83       	std	Y+3, r21	; 0x03
   1b344:	c7 52       	subi	r28, 0x27	; 39
   1b346:	d2 40       	sbci	r29, 0x02	; 2

    t = lif_lifbcd2time(LIF->DIR.date);
   1b348:	c6 01       	movw	r24, r12
   1b34a:	8c 59       	subi	r24, 0x9C	; 156
   1b34c:	9f 4f       	sbci	r25, 0xFF	; 255
   1b34e:	0e 94 1a c7 	call	0x18e34	; 0x18e34 <lif_lifbcd2time>
   1b352:	c3 5e       	subi	r28, 0xE3	; 227
   1b354:	dd 4f       	sbci	r29, 0xFD	; 253
   1b356:	68 83       	st	Y, r22
   1b358:	79 83       	std	Y+1, r23	; 0x01
   1b35a:	8a 83       	std	Y+2, r24	; 0x02
   1b35c:	9b 83       	std	Y+3, r25	; 0x03
   1b35e:	cd 51       	subi	r28, 0x1D	; 29
   1b360:	d2 40       	sbci	r29, 0x02	; 2

    offset = start * (long) LIF_SECTOR_SIZE;
   1b362:	ba 2d       	mov	r27, r10
   1b364:	a9 2d       	mov	r26, r9
   1b366:	98 2d       	mov	r25, r8
   1b368:	88 27       	eor	r24, r24
   1b36a:	cf 5e       	subi	r28, 0xEF	; 239
   1b36c:	dd 4f       	sbci	r29, 0xFD	; 253
   1b36e:	88 83       	st	Y, r24
   1b370:	99 83       	std	Y+1, r25	; 0x01
   1b372:	aa 83       	std	Y+2, r26	; 0x02
   1b374:	bb 83       	std	Y+3, r27	; 0x03
   1b376:	c1 51       	subi	r28, 0x11	; 17
   1b378:	d2 40       	sbci	r29, 0x02	; 2

    fo = lif_open(username,"wb");
   1b37a:	64 e9       	ldi	r22, 0x94	; 148
   1b37c:	78 e0       	ldi	r23, 0x08	; 8
   1b37e:	c4 5e       	subi	r28, 0xE4	; 228
   1b380:	dd 4f       	sbci	r29, 0xFD	; 253
   1b382:	88 81       	ld	r24, Y
   1b384:	cc 51       	subi	r28, 0x1C	; 28
   1b386:	d2 40       	sbci	r29, 0x02	; 2
   1b388:	9e 2d       	mov	r25, r14
   1b38a:	0e 94 c7 c2 	call	0x1858e	; 0x1858e <lif_open>
   1b38e:	c6 5e       	subi	r28, 0xE6	; 230
   1b390:	dd 4f       	sbci	r29, 0xFD	; 253
   1b392:	99 83       	std	Y+1, r25	; 0x01
   1b394:	88 83       	st	Y, r24
   1b396:	ca 51       	subi	r28, 0x1A	; 26
   1b398:	d2 40       	sbci	r29, 0x02	; 2
    if(fo == NULL)
   1b39a:	89 2b       	or	r24, r25
   1b39c:	21 f4       	brne	.+8      	; 0x1b3a6 <lif_extract_e010_as_ascii+0x14a>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b39e:	c6 01       	movw	r24, r12
   1b3a0:	0e 94 e5 cb 	call	0x197ca	; 0x197ca <lif_close_volume>
   1b3a4:	91 cf       	rjmp	.-222    	; 0x1b2c8 <lif_extract_e010_as_ascii+0x6c>
    {
        lif_closedir(LIF);
        return(0);
    }

    printf("Extracting: %s\n", username);
   1b3a6:	ef 92       	push	r14
   1b3a8:	c4 5e       	subi	r28, 0xE4	; 228
   1b3aa:	dd 4f       	sbci	r29, 0xFD	; 253
   1b3ac:	98 81       	ld	r25, Y
   1b3ae:	cc 51       	subi	r28, 0x1C	; 28
   1b3b0:	d2 40       	sbci	r29, 0x02	; 2
   1b3b2:	9f 93       	push	r25
   1b3b4:	82 e3       	ldi	r24, 0x32	; 50
   1b3b6:	95 e3       	ldi	r25, 0x35	; 53
   1b3b8:	1f 92       	push	r1
   1b3ba:	9f 93       	push	r25
   1b3bc:	8f 93       	push	r24
   1b3be:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>

    bytes = 0;
    wind = 0;
    ind = 0;

    while(lif_bytes2sectors(offset) <= end)
   1b3c2:	0f 90       	pop	r0
   1b3c4:	0f 90       	pop	r0
   1b3c6:	0f 90       	pop	r0
   1b3c8:	0f 90       	pop	r0
   1b3ca:	0f 90       	pop	r0
    }

    printf("Extracting: %s\n", username);

    bytes = 0;
    wind = 0;
   1b3cc:	81 2c       	mov	r8, r1
   1b3ce:	91 2c       	mov	r9, r1
    uint32_t start, end;    // sectors
    long offset, bytes;     // bytes
    int index;
    int i, len,size;
    int status = 1;
    int done = 0;
   1b3d0:	c8 5e       	subi	r28, 0xE8	; 232
   1b3d2:	dd 4f       	sbci	r29, 0xFD	; 253
   1b3d4:	19 82       	std	Y+1, r1	; 0x01
   1b3d6:	18 82       	st	Y, r1
   1b3d8:	c8 51       	subi	r28, 0x18	; 24
   1b3da:	d2 40       	sbci	r29, 0x02	; 2
    lif_t *LIF;
    uint32_t start, end;    // sectors
    long offset, bytes;     // bytes
    int index;
    int i, len,size;
    int status = 1;
   1b3dc:	a1 e0       	ldi	r26, 0x01	; 1
   1b3de:	cb 5e       	subi	r28, 0xEB	; 235
   1b3e0:	dd 4f       	sbci	r29, 0xFD	; 253
   1b3e2:	a8 83       	st	Y, r26
   1b3e4:	c5 51       	subi	r28, 0x15	; 21
   1b3e6:	d2 40       	sbci	r29, 0x02	; 2
   1b3e8:	f1 2c       	mov	r15, r1
        return(0);
    }

    printf("Extracting: %s\n", username);

    bytes = 0;
   1b3ea:	41 2c       	mov	r4, r1
   1b3ec:	51 2c       	mov	r5, r1
   1b3ee:	32 01       	movw	r6, r4
                        status = 0;
                        done = 1;
                        break;
                    }
                    bytes += size;
                    printf("\tWrote: %8ld\r", bytes);
   1b3f0:	81 e7       	ldi	r24, 0x71	; 113
   1b3f2:	94 e3       	ldi	r25, 0x34	; 52
   1b3f4:	9c 01       	movw	r18, r24
   1b3f6:	40 e0       	ldi	r20, 0x00	; 0
   1b3f8:	cf 5d       	subi	r28, 0xDF	; 223
   1b3fa:	dd 4f       	sbci	r29, 0xFD	; 253
   1b3fc:	28 83       	st	Y, r18
   1b3fe:	39 83       	std	Y+1, r19	; 0x01
   1b400:	4a 83       	std	Y+2, r20	; 0x02
   1b402:	c1 52       	subi	r28, 0x21	; 33
   1b404:	d2 40       	sbci	r29, 0x02	; 2
                if(wind >= LIF_SECTOR_SIZE)
                {
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
   1b406:	8f e7       	ldi	r24, 0x7F	; 127
   1b408:	94 e3       	ldi	r25, 0x34	; 52
   1b40a:	9c 01       	movw	r18, r24
   1b40c:	40 e0       	ldi	r20, 0x00	; 0
   1b40e:	cc 5d       	subi	r28, 0xDC	; 220
   1b410:	dd 4f       	sbci	r29, 0xFD	; 253
   1b412:	28 83       	st	Y, r18
   1b414:	39 83       	std	Y+1, r19	; 0x01
   1b416:	4a 83       	std	Y+2, r20	; 0x02
   1b418:	c4 52       	subi	r28, 0x24	; 36
   1b41a:	d2 40       	sbci	r29, 0x02	; 2

    bytes = 0;
    wind = 0;
    ind = 0;

    while(lif_bytes2sectors(offset) <= end)
   1b41c:	cf 5e       	subi	r28, 0xEF	; 239
   1b41e:	dd 4f       	sbci	r29, 0xFD	; 253
   1b420:	28 81       	ld	r18, Y
   1b422:	39 81       	ldd	r19, Y+1	; 0x01
   1b424:	4a 81       	ldd	r20, Y+2	; 0x02
   1b426:	5b 81       	ldd	r21, Y+3	; 0x03
   1b428:	c1 51       	subi	r28, 0x11	; 17
   1b42a:	d2 40       	sbci	r29, 0x02	; 2
   1b42c:	bb 27       	eor	r27, r27
   1b42e:	a5 2f       	mov	r26, r21
   1b430:	94 2f       	mov	r25, r20
   1b432:	83 2f       	mov	r24, r19
   1b434:	c9 5d       	subi	r28, 0xD9	; 217
   1b436:	dd 4f       	sbci	r29, 0xFD	; 253
   1b438:	28 81       	ld	r18, Y
   1b43a:	39 81       	ldd	r19, Y+1	; 0x01
   1b43c:	4a 81       	ldd	r20, Y+2	; 0x02
   1b43e:	5b 81       	ldd	r21, Y+3	; 0x03
   1b440:	c7 52       	subi	r28, 0x27	; 39
   1b442:	d2 40       	sbci	r29, 0x02	; 2
   1b444:	28 17       	cp	r18, r24
   1b446:	39 07       	cpc	r19, r25
   1b448:	4a 07       	cpc	r20, r26
   1b44a:	5b 07       	cpc	r21, r27
   1b44c:	08 f4       	brcc	.+2      	; 0x1b450 <lif_extract_e010_as_ascii+0x1f4>
   1b44e:	76 c1       	rjmp	.+748    	; 0x1b73c <lif_extract_e010_as_ascii+0x4e0>
    {
        // LIF images are always multiples of LIF_SECTOR_SIZE
        size = lif_read(LIF, buf, offset, LIF_SECTOR_SIZE);
   1b450:	00 e0       	ldi	r16, 0x00	; 0
   1b452:	11 e0       	ldi	r17, 0x01	; 1
   1b454:	cf 5e       	subi	r28, 0xEF	; 239
   1b456:	dd 4f       	sbci	r29, 0xFD	; 253
   1b458:	28 81       	ld	r18, Y
   1b45a:	39 81       	ldd	r19, Y+1	; 0x01
   1b45c:	4a 81       	ldd	r20, Y+2	; 0x02
   1b45e:	5b 81       	ldd	r21, Y+3	; 0x03
   1b460:	c1 51       	subi	r28, 0x11	; 17
   1b462:	d2 40       	sbci	r29, 0x02	; 2
   1b464:	be 01       	movw	r22, r28
   1b466:	6b 5f       	subi	r22, 0xFB	; 251
   1b468:	7e 4f       	sbci	r23, 0xFE	; 254
   1b46a:	c6 01       	movw	r24, r12
   1b46c:	0e 94 4d c3 	call	0x1869a	; 0x1869a <lif_read>
        if(size < LIF_SECTOR_SIZE)
   1b470:	6f 3f       	cpi	r22, 0xFF	; 255
   1b472:	71 05       	cpc	r23, r1
   1b474:	09 f0       	breq	.+2      	; 0x1b478 <lif_extract_e010_as_ascii+0x21c>
   1b476:	0c f4       	brge	.+2      	; 0x1b47a <lif_extract_e010_as_ascii+0x21e>
   1b478:	5b c1       	rjmp	.+694    	; 0x1b730 <lif_extract_e010_as_ascii+0x4d4>
   1b47a:	00 e0       	ldi	r16, 0x00	; 0
   1b47c:	10 e0       	ldi	r17, 0x00	; 0
            status = 0;
            break;
        }

        ind = 0;
        while(ind < LIF_SECTOR_SIZE && !done)
   1b47e:	c8 5e       	subi	r28, 0xE8	; 232
   1b480:	dd 4f       	sbci	r29, 0xFD	; 253
   1b482:	a8 81       	ld	r26, Y
   1b484:	b9 81       	ldd	r27, Y+1	; 0x01
   1b486:	c8 51       	subi	r28, 0x18	; 24
   1b488:	d2 40       	sbci	r29, 0x02	; 2
   1b48a:	ab 2b       	or	r26, r27
   1b48c:	09 f0       	breq	.+2      	; 0x1b490 <lif_extract_e010_as_ascii+0x234>
   1b48e:	3c c1       	rjmp	.+632    	; 0x1b708 <lif_extract_e010_as_ascii+0x4ac>
        {
            if(buf[ind] == 0xDF || buf[ind] == 0xCF || buf[ind] == 0x6F)
   1b490:	e5 e0       	ldi	r30, 0x05	; 5
   1b492:	f1 e0       	ldi	r31, 0x01	; 1
   1b494:	ec 0f       	add	r30, r28
   1b496:	fd 1f       	adc	r31, r29
   1b498:	e0 0f       	add	r30, r16
   1b49a:	f1 1f       	adc	r31, r17
   1b49c:	80 81       	ld	r24, Z
   1b49e:	98 2f       	mov	r25, r24
   1b4a0:	9f 7e       	andi	r25, 0xEF	; 239
   1b4a2:	9f 3c       	cpi	r25, 0xCF	; 207
   1b4a4:	11 f0       	breq	.+4      	; 0x1b4aa <lif_extract_e010_as_ascii+0x24e>
   1b4a6:	8f 36       	cpi	r24, 0x6F	; 111
   1b4a8:	d9 f5       	brne	.+118    	; 0x1b520 <lif_extract_e010_as_ascii+0x2c4>
            {
                ++ind;
                len = buf[ind++] & 0xff;
   1b4aa:	e5 e0       	ldi	r30, 0x05	; 5
   1b4ac:	f1 e0       	ldi	r31, 0x01	; 1
   1b4ae:	ec 0f       	add	r30, r28
   1b4b0:	fd 1f       	adc	r31, r29
   1b4b2:	e0 0f       	add	r30, r16
   1b4b4:	f1 1f       	adc	r31, r17
   1b4b6:	21 80       	ldd	r2, Z+1	; 0x01
                len |= ((buf[ind++] & 0xff) <<8); 
   1b4b8:	f8 01       	movw	r30, r16
   1b4ba:	32 96       	adiw	r30, 0x02	; 2
   1b4bc:	45 e0       	ldi	r20, 0x05	; 5
   1b4be:	51 e0       	ldi	r21, 0x01	; 1
   1b4c0:	4c 0f       	add	r20, r28
   1b4c2:	5d 1f       	adc	r21, r29
   1b4c4:	e4 0f       	add	r30, r20
   1b4c6:	f5 1f       	adc	r31, r21
   1b4c8:	0d 5f       	subi	r16, 0xFD	; 253
   1b4ca:	1f 4f       	sbci	r17, 0xFF	; 255
   1b4cc:	80 81       	ld	r24, Z
   1b4ce:	31 2c       	mov	r3, r1
   1b4d0:	38 2a       	or	r3, r24
                // EOF ?
                if(len == 0)
   1b4d2:	21 14       	cp	r2, r1
   1b4d4:	31 04       	cpc	r3, r1
   1b4d6:	09 f4       	brne	.+2      	; 0x1b4da <lif_extract_e010_as_ascii+0x27e>
   1b4d8:	0f c1       	rjmp	.+542    	; 0x1b6f8 <lif_extract_e010_as_ascii+0x49c>
                {
                    done = 1;
                    break;
                }
                if(len >= LIF_SECTOR_SIZE)
   1b4da:	5f ef       	ldi	r21, 0xFF	; 255
   1b4dc:	25 16       	cp	r2, r21
   1b4de:	31 04       	cpc	r3, r1
   1b4e0:	09 f0       	breq	.+2      	; 0x1b4e4 <lif_extract_e010_as_ascii+0x288>
   1b4e2:	7c f4       	brge	.+30     	; 0x1b502 <lif_extract_e010_as_ascii+0x2a6>
   1b4e4:	ca 5e       	subi	r28, 0xEA	; 234
   1b4e6:	dd 4f       	sbci	r29, 0xFD	; 253
   1b4e8:	19 82       	std	Y+1, r1	; 0x01
   1b4ea:	18 82       	st	Y, r1
   1b4ec:	c6 51       	subi	r28, 0x16	; 22
   1b4ee:	d2 40       	sbci	r29, 0x02	; 2
                break;
            }
            // write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
            {
                if(buf[ind] == '\r' && i == len-1)
   1b4f0:	c1 01       	movw	r24, r2
   1b4f2:	01 97       	sbiw	r24, 0x01	; 1
   1b4f4:	c5 5d       	subi	r28, 0xD5	; 213
   1b4f6:	dd 4f       	sbci	r29, 0xFD	; 253
   1b4f8:	99 83       	std	Y+1, r25	; 0x01
   1b4fa:	88 83       	st	Y, r24
   1b4fc:	cb 52       	subi	r28, 0x2B	; 43
   1b4fe:	d2 40       	sbci	r29, 0x02	; 2
   1b500:	7b c0       	rjmp	.+246    	; 0x1b5f8 <lif_extract_e010_as_ascii+0x39c>
                    done = 1;
                    break;
                }
                if(len >= LIF_SECTOR_SIZE)
                {
                    printf("lif_extract_e010_as_ascii: string too big size = %d\n", (int)len);
   1b502:	3f 92       	push	r3
   1b504:	2f 92       	push	r2
   1b506:	8d ef       	ldi	r24, 0xFD	; 253
   1b508:	94 e3       	ldi	r25, 0x34	; 52
   1b50a:	1f 92       	push	r1
   1b50c:	9f 93       	push	r25
   1b50e:	8f 93       	push	r24
   1b510:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
                    status = 0;
                    done = 1;
                    break;
   1b514:	0f 90       	pop	r0
   1b516:	0f 90       	pop	r0
   1b518:	0f 90       	pop	r0
   1b51a:	0f 90       	pop	r0
   1b51c:	0f 90       	pop	r0
   1b51e:	2b c0       	rjmp	.+86     	; 0x1b576 <lif_extract_e010_as_ascii+0x31a>
                }
            }
            else if(buf[ind] == 0xEF)
   1b520:	8f 3e       	cpi	r24, 0xEF	; 239
   1b522:	09 f4       	brne	.+2      	; 0x1b526 <lif_extract_e010_as_ascii+0x2ca>
   1b524:	f1 c0       	rjmp	.+482    	; 0x1b708 <lif_extract_e010_as_ascii+0x4ac>
                ind = 0;
                break;
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
   1b526:	1f 93       	push	r17
   1b528:	0f 93       	push	r16
   1b52a:	cc 5e       	subi	r28, 0xEC	; 236
   1b52c:	dd 4f       	sbci	r29, 0xFD	; 253
   1b52e:	b8 81       	ld	r27, Y
   1b530:	c4 51       	subi	r28, 0x14	; 20
   1b532:	d2 40       	sbci	r29, 0x02	; 2
   1b534:	bf 93       	push	r27
   1b536:	cd 5e       	subi	r28, 0xED	; 237
   1b538:	dd 4f       	sbci	r29, 0xFD	; 253
   1b53a:	28 81       	ld	r18, Y
   1b53c:	c3 51       	subi	r28, 0x13	; 19
   1b53e:	d2 40       	sbci	r29, 0x02	; 2
   1b540:	2f 93       	push	r18
   1b542:	ce 5e       	subi	r28, 0xEE	; 238
   1b544:	dd 4f       	sbci	r29, 0xFD	; 253
   1b546:	38 81       	ld	r19, Y
   1b548:	c2 51       	subi	r28, 0x12	; 18
   1b54a:	d2 40       	sbci	r29, 0x02	; 2
   1b54c:	3f 93       	push	r19
   1b54e:	cf 5e       	subi	r28, 0xEF	; 239
   1b550:	dd 4f       	sbci	r29, 0xFD	; 253
   1b552:	48 81       	ld	r20, Y
   1b554:	c1 51       	subi	r28, 0x11	; 17
   1b556:	d2 40       	sbci	r29, 0x02	; 2
   1b558:	4f 93       	push	r20
   1b55a:	1f 92       	push	r1
   1b55c:	8f 93       	push	r24
   1b55e:	87 ea       	ldi	r24, 0xA7	; 167
   1b560:	94 e3       	ldi	r25, 0x34	; 52
   1b562:	1f 92       	push	r1
   1b564:	9f 93       	push	r25
   1b566:	8f 93       	push	r24
   1b568:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
                status = 0;
                done = 1;
                break;
   1b56c:	0f b6       	in	r0, 0x3f	; 63
   1b56e:	f8 94       	cli
   1b570:	de bf       	out	0x3e, r29	; 62
   1b572:	0f be       	out	0x3f, r0	; 63
   1b574:	cd bf       	out	0x3d, r28	; 61
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
                status = 0;
                done = 1;
   1b576:	a1 e0       	ldi	r26, 0x01	; 1
   1b578:	b0 e0       	ldi	r27, 0x00	; 0
   1b57a:	c8 5e       	subi	r28, 0xE8	; 232
   1b57c:	dd 4f       	sbci	r29, 0xFD	; 253
   1b57e:	b9 83       	std	Y+1, r27	; 0x01
   1b580:	a8 83       	st	Y, r26
   1b582:	c8 51       	subi	r28, 0x18	; 24
   1b584:	d2 40       	sbci	r29, 0x02	; 2
                break;
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
                status = 0;
   1b586:	cb 5e       	subi	r28, 0xEB	; 235
   1b588:	dd 4f       	sbci	r29, 0xFD	; 253
   1b58a:	18 82       	st	Y, r1
   1b58c:	c5 51       	subi	r28, 0x15	; 21
   1b58e:	d2 40       	sbci	r29, 0x02	; 2
   1b590:	f1 2c       	mov	r15, r1
                done = 1;
                break;
   1b592:	ba c0       	rjmp	.+372    	; 0x1b708 <lif_extract_e010_as_ascii+0x4ac>
            }
            // write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
   1b594:	0f 3f       	cpi	r16, 0xFF	; 255
   1b596:	11 05       	cpc	r17, r1
   1b598:	11 f0       	breq	.+4      	; 0x1b59e <lif_extract_e010_as_ascii+0x342>
   1b59a:	0c f0       	brlt	.+2      	; 0x1b59e <lif_extract_e010_as_ascii+0x342>
   1b59c:	b5 c0       	rjmp	.+362    	; 0x1b708 <lif_extract_e010_as_ascii+0x4ac>
            {
                if(buf[ind] == '\r' && i == len-1)
   1b59e:	e5 e0       	ldi	r30, 0x05	; 5
   1b5a0:	f1 e0       	ldi	r31, 0x01	; 1
   1b5a2:	ec 0f       	add	r30, r28
   1b5a4:	fd 1f       	adc	r31, r29
   1b5a6:	e0 0f       	add	r30, r16
   1b5a8:	f1 1f       	adc	r31, r17
   1b5aa:	20 81       	ld	r18, Z
   1b5ac:	a4 01       	movw	r20, r8
   1b5ae:	4f 5f       	subi	r20, 0xFF	; 255
   1b5b0:	5f 4f       	sbci	r21, 0xFF	; 255
   1b5b2:	5a 01       	movw	r10, r20
   1b5b4:	2d 30       	cpi	r18, 0x0D	; 13
   1b5b6:	51 f1       	breq	.+84     	; 0x1b60c <lif_extract_e010_as_ascii+0x3b0>
                    ++ind;
                    break;
                }
                else 
                {
                    wbuf[wind++] = buf[ind++];
   1b5b8:	9a 2d       	mov	r25, r10
   1b5ba:	8b 2d       	mov	r24, r11
   1b5bc:	0f 5f       	subi	r16, 0xFF	; 255
   1b5be:	1f 4f       	sbci	r17, 0xFF	; 255
   1b5c0:	e1 e0       	ldi	r30, 0x01	; 1
   1b5c2:	f0 e0       	ldi	r31, 0x00	; 0
   1b5c4:	ec 0f       	add	r30, r28
   1b5c6:	fd 1f       	adc	r31, r29
   1b5c8:	e8 0d       	add	r30, r8
   1b5ca:	f9 1d       	adc	r31, r9
   1b5cc:	20 83       	st	Z, r18
                }

                if(wind >= LIF_SECTOR_SIZE)
   1b5ce:	2f ef       	ldi	r18, 0xFF	; 255
   1b5d0:	a2 16       	cp	r10, r18
   1b5d2:	b1 04       	cpc	r11, r1
   1b5d4:	09 f0       	breq	.+2      	; 0x1b5d8 <lif_extract_e010_as_ascii+0x37c>
   1b5d6:	ac f5       	brge	.+106    	; 0x1b642 <lif_extract_e010_as_ascii+0x3e6>
                status = 0;
                done = 1;
                break;
            }
            // write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
   1b5d8:	ca 5e       	subi	r28, 0xEA	; 234
   1b5da:	dd 4f       	sbci	r29, 0xFD	; 253
   1b5dc:	48 81       	ld	r20, Y
   1b5de:	59 81       	ldd	r21, Y+1	; 0x01
   1b5e0:	c6 51       	subi	r28, 0x16	; 22
   1b5e2:	d2 40       	sbci	r29, 0x02	; 2
   1b5e4:	4f 5f       	subi	r20, 0xFF	; 255
   1b5e6:	5f 4f       	sbci	r21, 0xFF	; 255
   1b5e8:	ca 5e       	subi	r28, 0xEA	; 234
   1b5ea:	dd 4f       	sbci	r29, 0xFD	; 253
   1b5ec:	59 83       	std	Y+1, r21	; 0x01
   1b5ee:	48 83       	st	Y, r20
   1b5f0:	c6 51       	subi	r28, 0x16	; 22
   1b5f2:	d2 40       	sbci	r29, 0x02	; 2
   1b5f4:	89 2e       	mov	r8, r25
   1b5f6:	98 2e       	mov	r9, r24
   1b5f8:	ca 5e       	subi	r28, 0xEA	; 234
   1b5fa:	dd 4f       	sbci	r29, 0xFD	; 253
   1b5fc:	88 81       	ld	r24, Y
   1b5fe:	99 81       	ldd	r25, Y+1	; 0x01
   1b600:	c6 51       	subi	r28, 0x16	; 22
   1b602:	d2 40       	sbci	r29, 0x02	; 2
   1b604:	82 15       	cp	r24, r2
   1b606:	93 05       	cpc	r25, r3
   1b608:	2c f2       	brlt	.-118    	; 0x1b594 <lif_extract_e010_as_ascii+0x338>
   1b60a:	70 c0       	rjmp	.+224    	; 0x1b6ec <lif_extract_e010_as_ascii+0x490>
            {
                if(buf[ind] == '\r' && i == len-1)
   1b60c:	ca 5e       	subi	r28, 0xEA	; 234
   1b60e:	dd 4f       	sbci	r29, 0xFD	; 253
   1b610:	88 81       	ld	r24, Y
   1b612:	99 81       	ldd	r25, Y+1	; 0x01
   1b614:	c6 51       	subi	r28, 0x16	; 22
   1b616:	d2 40       	sbci	r29, 0x02	; 2
   1b618:	c5 5d       	subi	r28, 0xD5	; 213
   1b61a:	dd 4f       	sbci	r29, 0xFD	; 253
   1b61c:	a8 81       	ld	r26, Y
   1b61e:	b9 81       	ldd	r27, Y+1	; 0x01
   1b620:	cb 52       	subi	r28, 0x2B	; 43
   1b622:	d2 40       	sbci	r29, 0x02	; 2
   1b624:	8a 17       	cp	r24, r26
   1b626:	9b 07       	cpc	r25, r27
   1b628:	39 f6       	brne	.-114    	; 0x1b5b8 <lif_extract_e010_as_ascii+0x35c>
                {
                    wbuf[wind++] = '\n';
   1b62a:	e1 e0       	ldi	r30, 0x01	; 1
   1b62c:	f0 e0       	ldi	r31, 0x00	; 0
   1b62e:	ec 0f       	add	r30, r28
   1b630:	fd 1f       	adc	r31, r29
   1b632:	e8 0d       	add	r30, r8
   1b634:	f9 1d       	adc	r31, r9
   1b636:	ba e0       	ldi	r27, 0x0A	; 10
   1b638:	b0 83       	st	Z, r27
                    ++ind;
   1b63a:	0f 5f       	subi	r16, 0xFF	; 255
   1b63c:	1f 4f       	sbci	r17, 0xFF	; 255
            // write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
            {
                if(buf[ind] == '\r' && i == len-1)
                {
                    wbuf[wind++] = '\n';
   1b63e:	4a 01       	movw	r8, r20
                    ++ind;
                    break;
   1b640:	55 c0       	rjmp	.+170    	; 0x1b6ec <lif_extract_e010_as_ascii+0x490>
                    wbuf[wind++] = buf[ind++];
                }

                if(wind >= LIF_SECTOR_SIZE)
                {
                    size = fwrite(wbuf,1,wind,fo);
   1b642:	c6 5e       	subi	r28, 0xE6	; 230
   1b644:	dd 4f       	sbci	r29, 0xFD	; 253
   1b646:	28 81       	ld	r18, Y
   1b648:	39 81       	ldd	r19, Y+1	; 0x01
   1b64a:	ca 51       	subi	r28, 0x1A	; 26
   1b64c:	d2 40       	sbci	r29, 0x02	; 2
   1b64e:	a5 01       	movw	r20, r10
   1b650:	61 e0       	ldi	r22, 0x01	; 1
   1b652:	70 e0       	ldi	r23, 0x00	; 0
   1b654:	ce 01       	movw	r24, r28
   1b656:	01 96       	adiw	r24, 0x01	; 1
   1b658:	0e 94 68 7d 	call	0xfad0	; 0xfad0 <fwrite>
                    if(size < wind)
   1b65c:	8a 15       	cp	r24, r10
   1b65e:	9b 05       	cpc	r25, r11
   1b660:	14 f5       	brge	.+68     	; 0x1b6a6 <lif_extract_e010_as_ascii+0x44a>
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
   1b662:	1f 92       	push	r1
   1b664:	cb 5d       	subi	r28, 0xDB	; 219
   1b666:	dd 4f       	sbci	r29, 0xFD	; 253
   1b668:	38 81       	ld	r19, Y
   1b66a:	c5 52       	subi	r28, 0x25	; 37
   1b66c:	d2 40       	sbci	r29, 0x02	; 2
   1b66e:	3f 93       	push	r19
   1b670:	cc 5d       	subi	r28, 0xDC	; 220
   1b672:	dd 4f       	sbci	r29, 0xFD	; 253
   1b674:	48 81       	ld	r20, Y
   1b676:	c4 52       	subi	r28, 0x24	; 36
   1b678:	d2 40       	sbci	r29, 0x02	; 2
   1b67a:	4f 93       	push	r20
   1b67c:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
                        status = 0;
                        done = 1;
                        break;
   1b680:	0f 90       	pop	r0
   1b682:	0f 90       	pop	r0
   1b684:	0f 90       	pop	r0
                    ++ind;
                    break;
                }
                else 
                {
                    wbuf[wind++] = buf[ind++];
   1b686:	45 01       	movw	r8, r10
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
                        status = 0;
                        done = 1;
   1b688:	81 e0       	ldi	r24, 0x01	; 1
   1b68a:	90 e0       	ldi	r25, 0x00	; 0
   1b68c:	c8 5e       	subi	r28, 0xE8	; 232
   1b68e:	dd 4f       	sbci	r29, 0xFD	; 253
   1b690:	99 83       	std	Y+1, r25	; 0x01
   1b692:	88 83       	st	Y, r24
   1b694:	c8 51       	subi	r28, 0x18	; 24
   1b696:	d2 40       	sbci	r29, 0x02	; 2
                {
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
                        status = 0;
   1b698:	cb 5e       	subi	r28, 0xEB	; 235
   1b69a:	dd 4f       	sbci	r29, 0xFD	; 253
   1b69c:	18 82       	st	Y, r1
   1b69e:	c5 51       	subi	r28, 0x15	; 21
   1b6a0:	d2 40       	sbci	r29, 0x02	; 2
   1b6a2:	f1 2c       	mov	r15, r1
                        done = 1;
                        break;
   1b6a4:	23 c0       	rjmp	.+70     	; 0x1b6ec <lif_extract_e010_as_ascii+0x490>
                    }
                    bytes += size;
   1b6a6:	09 2e       	mov	r0, r25
   1b6a8:	00 0c       	add	r0, r0
   1b6aa:	aa 0b       	sbc	r26, r26
   1b6ac:	bb 0b       	sbc	r27, r27
   1b6ae:	48 0e       	add	r4, r24
   1b6b0:	59 1e       	adc	r5, r25
   1b6b2:	6a 1e       	adc	r6, r26
   1b6b4:	7b 1e       	adc	r7, r27
                    printf("\tWrote: %8ld\r", bytes);
   1b6b6:	7f 92       	push	r7
   1b6b8:	6f 92       	push	r6
   1b6ba:	5f 92       	push	r5
   1b6bc:	4f 92       	push	r4
   1b6be:	1f 92       	push	r1
   1b6c0:	ce 5d       	subi	r28, 0xDE	; 222
   1b6c2:	dd 4f       	sbci	r29, 0xFD	; 253
   1b6c4:	98 81       	ld	r25, Y
   1b6c6:	c2 52       	subi	r28, 0x22	; 34
   1b6c8:	d2 40       	sbci	r29, 0x02	; 2
   1b6ca:	9f 93       	push	r25
   1b6cc:	cf 5d       	subi	r28, 0xDF	; 223
   1b6ce:	dd 4f       	sbci	r29, 0xFD	; 253
   1b6d0:	a8 81       	ld	r26, Y
   1b6d2:	c1 52       	subi	r28, 0x21	; 33
   1b6d4:	d2 40       	sbci	r29, 0x02	; 2
   1b6d6:	af 93       	push	r26
   1b6d8:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1b6dc:	0f b6       	in	r0, 0x3f	; 63
   1b6de:	f8 94       	cli
   1b6e0:	de bf       	out	0x3e, r29	; 62
   1b6e2:	0f be       	out	0x3f, r0	; 63
   1b6e4:	cd bf       	out	0x3d, r28	; 61
                    wind = 0;
   1b6e6:	90 e0       	ldi	r25, 0x00	; 0
   1b6e8:	80 e0       	ldi	r24, 0x00	; 0
   1b6ea:	76 cf       	rjmp	.-276    	; 0x1b5d8 <lif_extract_e010_as_ascii+0x37c>
            status = 0;
            break;
        }

        ind = 0;
        while(ind < LIF_SECTOR_SIZE && !done)
   1b6ec:	0f 3f       	cpi	r16, 0xFF	; 255
   1b6ee:	11 05       	cpc	r17, r1
   1b6f0:	09 f0       	breq	.+2      	; 0x1b6f4 <lif_extract_e010_as_ascii+0x498>
   1b6f2:	0c f4       	brge	.+2      	; 0x1b6f6 <lif_extract_e010_as_ascii+0x49a>
   1b6f4:	c4 ce       	rjmp	.-632    	; 0x1b47e <lif_extract_e010_as_ascii+0x222>
   1b6f6:	08 c0       	rjmp	.+16     	; 0x1b708 <lif_extract_e010_as_ascii+0x4ac>
                len = buf[ind++] & 0xff;
                len |= ((buf[ind++] & 0xff) <<8); 
                // EOF ?
                if(len == 0)
                {
                    done = 1;
   1b6f8:	21 e0       	ldi	r18, 0x01	; 1
   1b6fa:	30 e0       	ldi	r19, 0x00	; 0
   1b6fc:	c8 5e       	subi	r28, 0xE8	; 232
   1b6fe:	dd 4f       	sbci	r29, 0xFD	; 253
   1b700:	39 83       	std	Y+1, r19	; 0x01
   1b702:	28 83       	st	Y, r18
   1b704:	c8 51       	subi	r28, 0x18	; 24
   1b706:	d2 40       	sbci	r29, 0x02	; 2

            }   // for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)

        }   // while(ind < LIF_SECTOR_SIZE && status)

        offset += (long) LIF_SECTOR_SIZE;
   1b708:	cf 5e       	subi	r28, 0xEF	; 239
   1b70a:	dd 4f       	sbci	r29, 0xFD	; 253
   1b70c:	88 81       	ld	r24, Y
   1b70e:	99 81       	ldd	r25, Y+1	; 0x01
   1b710:	aa 81       	ldd	r26, Y+2	; 0x02
   1b712:	bb 81       	ldd	r27, Y+3	; 0x03
   1b714:	c1 51       	subi	r28, 0x11	; 17
   1b716:	d2 40       	sbci	r29, 0x02	; 2
   1b718:	9f 5f       	subi	r25, 0xFF	; 255
   1b71a:	af 4f       	sbci	r26, 0xFF	; 255
   1b71c:	bf 4f       	sbci	r27, 0xFF	; 255
   1b71e:	cf 5e       	subi	r28, 0xEF	; 239
   1b720:	dd 4f       	sbci	r29, 0xFD	; 253
   1b722:	88 83       	st	Y, r24
   1b724:	99 83       	std	Y+1, r25	; 0x01
   1b726:	aa 83       	std	Y+2, r26	; 0x02
   1b728:	bb 83       	std	Y+3, r27	; 0x03
   1b72a:	c1 51       	subi	r28, 0x11	; 17
   1b72c:	d2 40       	sbci	r29, 0x02	; 2
   1b72e:	76 ce       	rjmp	.-788    	; 0x1b41c <lif_extract_e010_as_ascii+0x1c0>
    {
        // LIF images are always multiples of LIF_SECTOR_SIZE
        size = lif_read(LIF, buf, offset, LIF_SECTOR_SIZE);
        if(size < LIF_SECTOR_SIZE)
        {
            status = 0;
   1b730:	cb 5e       	subi	r28, 0xEB	; 235
   1b732:	dd 4f       	sbci	r29, 0xFD	; 253
   1b734:	18 82       	st	Y, r1
   1b736:	c5 51       	subi	r28, 0x15	; 21
   1b738:	d2 40       	sbci	r29, 0x02	; 2
   1b73a:	f1 2c       	mov	r15, r1
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b73c:	c6 01       	movw	r24, r12
   1b73e:	0e 94 e5 cb 	call	0x197ca	; 0x197ca <lif_close_volume>

    }   // while(offset <= end)

    lif_closedir(LIF);
    // Flush any remaining bytes
    if(wind)
   1b742:	81 14       	cp	r8, r1
   1b744:	91 04       	cpc	r9, r1
   1b746:	51 f1       	breq	.+84     	; 0x1b79c <lif_extract_e010_as_ascii+0x540>
    {
        size = fwrite(wbuf,1,wind,fo);
   1b748:	c6 5e       	subi	r28, 0xE6	; 230
   1b74a:	dd 4f       	sbci	r29, 0xFD	; 253
   1b74c:	28 81       	ld	r18, Y
   1b74e:	39 81       	ldd	r19, Y+1	; 0x01
   1b750:	ca 51       	subi	r28, 0x1A	; 26
   1b752:	d2 40       	sbci	r29, 0x02	; 2
   1b754:	a4 01       	movw	r20, r8
   1b756:	61 e0       	ldi	r22, 0x01	; 1
   1b758:	70 e0       	ldi	r23, 0x00	; 0
   1b75a:	ce 01       	movw	r24, r28
   1b75c:	01 96       	adiw	r24, 0x01	; 1
   1b75e:	0e 94 68 7d 	call	0xfad0	; 0xfad0 <fwrite>
   1b762:	8c 01       	movw	r16, r24
        if(size < wind)
   1b764:	88 15       	cp	r24, r8
   1b766:	99 05       	cpc	r25, r9
   1b768:	84 f4       	brge	.+32     	; 0x1b78a <lif_extract_e010_as_ascii+0x52e>
        {
            printf("lif_extract_e010_as_ascii: write error\n");
   1b76a:	89 e4       	ldi	r24, 0x49	; 73
   1b76c:	94 e3       	ldi	r25, 0x34	; 52
   1b76e:	1f 92       	push	r1
   1b770:	9f 93       	push	r25
   1b772:	8f 93       	push	r24
   1b774:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1b778:	0f 90       	pop	r0
   1b77a:	0f 90       	pop	r0
   1b77c:	0f 90       	pop	r0
            status = 0;
   1b77e:	cb 5e       	subi	r28, 0xEB	; 235
   1b780:	dd 4f       	sbci	r29, 0xFD	; 253
   1b782:	18 82       	st	Y, r1
   1b784:	c5 51       	subi	r28, 0x15	; 21
   1b786:	d2 40       	sbci	r29, 0x02	; 2
   1b788:	f1 2c       	mov	r15, r1
        }
        bytes += size;
   1b78a:	c8 01       	movw	r24, r16
   1b78c:	01 2e       	mov	r0, r17
   1b78e:	00 0c       	add	r0, r0
   1b790:	aa 0b       	sbc	r26, r26
   1b792:	bb 0b       	sbc	r27, r27
   1b794:	48 0e       	add	r4, r24
   1b796:	59 1e       	adc	r5, r25
   1b798:	6a 1e       	adc	r6, r26
   1b79a:	7b 1e       	adc	r7, r27
    }
    fclose(fo);
   1b79c:	c6 5e       	subi	r28, 0xE6	; 230
   1b79e:	dd 4f       	sbci	r29, 0xFD	; 253
   1b7a0:	88 81       	ld	r24, Y
   1b7a2:	99 81       	ldd	r25, Y+1	; 0x01
   1b7a4:	ca 51       	subi	r28, 0x1A	; 26
   1b7a6:	d2 40       	sbci	r29, 0x02	; 2
   1b7a8:	0e 94 ea 7d 	call	0xfbd4	; 0xfbd4 <fclose>
    if(t)
   1b7ac:	c3 5e       	subi	r28, 0xE3	; 227
   1b7ae:	dd 4f       	sbci	r29, 0xFD	; 253
   1b7b0:	88 81       	ld	r24, Y
   1b7b2:	99 81       	ldd	r25, Y+1	; 0x01
   1b7b4:	aa 81       	ldd	r26, Y+2	; 0x02
   1b7b6:	bb 81       	ldd	r27, Y+3	; 0x03
   1b7b8:	cd 51       	subi	r28, 0x1D	; 29
   1b7ba:	d2 40       	sbci	r29, 0x02	; 2
   1b7bc:	00 97       	sbiw	r24, 0x00	; 0
   1b7be:	a1 05       	cpc	r26, r1
   1b7c0:	b1 05       	cpc	r27, r1
   1b7c2:	d9 f0       	breq	.+54     	; 0x1b7fa <lif_extract_e010_as_ascii+0x59e>
    {
        struct utimbuf times;
        times.modtime = t;
   1b7c4:	c3 5f       	subi	r28, 0xF3	; 243
   1b7c6:	dd 4f       	sbci	r29, 0xFD	; 253
   1b7c8:	88 83       	st	Y, r24
   1b7ca:	99 83       	std	Y+1, r25	; 0x01
   1b7cc:	aa 83       	std	Y+2, r26	; 0x02
   1b7ce:	bb 83       	std	Y+3, r27	; 0x03
   1b7d0:	cd 50       	subi	r28, 0x0D	; 13
   1b7d2:	d2 40       	sbci	r29, 0x02	; 2
        times.actime = t;
   1b7d4:	c7 5f       	subi	r28, 0xF7	; 247
   1b7d6:	dd 4f       	sbci	r29, 0xFD	; 253
   1b7d8:	88 83       	st	Y, r24
   1b7da:	99 83       	std	Y+1, r25	; 0x01
   1b7dc:	aa 83       	std	Y+2, r26	; 0x02
   1b7de:	bb 83       	std	Y+3, r27	; 0x03
   1b7e0:	c9 50       	subi	r28, 0x09	; 9
   1b7e2:	d2 40       	sbci	r29, 0x02	; 2
        utime(username, (struct utimbuf *) &times);
   1b7e4:	be 01       	movw	r22, r28
   1b7e6:	67 5f       	subi	r22, 0xF7	; 247
   1b7e8:	7d 4f       	sbci	r23, 0xFD	; 253
   1b7ea:	c4 5e       	subi	r28, 0xE4	; 228
   1b7ec:	dd 4f       	sbci	r29, 0xFD	; 253
   1b7ee:	88 81       	ld	r24, Y
   1b7f0:	cc 51       	subi	r28, 0x1C	; 28
   1b7f2:	d2 40       	sbci	r29, 0x02	; 2
   1b7f4:	9e 2d       	mov	r25, r14
   1b7f6:	0e 94 28 7b 	call	0xf650	; 0xf650 <utime>
    }
    sync();
   1b7fa:	0e 94 e5 7c 	call	0xf9ca	; 0xf9ca <sync>
    printf("\tWrote: %8ld\n", bytes);
   1b7fe:	7f 92       	push	r7
   1b800:	6f 92       	push	r6
   1b802:	5f 92       	push	r5
   1b804:	4f 92       	push	r4
   1b806:	8b e3       	ldi	r24, 0x3B	; 59
   1b808:	94 e3       	ldi	r25, 0x34	; 52
   1b80a:	1f 92       	push	r1
   1b80c:	9f 93       	push	r25
   1b80e:	8f 93       	push	r24
   1b810:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    return(status);
   1b814:	0f b6       	in	r0, 0x3f	; 63
   1b816:	f8 94       	cli
   1b818:	de bf       	out	0x3e, r29	; 62
   1b81a:	0f be       	out	0x3f, r0	; 63
   1b81c:	cd bf       	out	0x3d, r28	; 61
   1b81e:	cb 5e       	subi	r28, 0xEB	; 235
   1b820:	dd 4f       	sbci	r29, 0xFD	; 253
   1b822:	88 81       	ld	r24, Y
   1b824:	c5 51       	subi	r28, 0x15	; 21
   1b826:	d2 40       	sbci	r29, 0x02	; 2
   1b828:	9f 2d       	mov	r25, r15
}
   1b82a:	c4 5d       	subi	r28, 0xD4	; 212
   1b82c:	dd 4f       	sbci	r29, 0xFD	; 253
   1b82e:	e2 e1       	ldi	r30, 0x12	; 18
   1b830:	0c 94 fc e5 	jmp	0x1cbf8	; 0x1cbf8 <__epilogue_restores__>

0001b834 <lif_extract_lif_as_lif>:
/// @param[in] lifname:  name of file in LIF image we want to extract
/// @param[in] username: new LIF file to create
/// @return 1 on sucess or 0 on error
MEMSPACE
int lif_extract_lif_as_lif(char *lifimagename, char *lifname, char *username)
{
   1b834:	ad e0       	ldi	r26, 0x0D	; 13
   1b836:	b1 e0       	ldi	r27, 0x01	; 1
   1b838:	e0 e2       	ldi	r30, 0x20	; 32
   1b83a:	fc ed       	ldi	r31, 0xDC	; 220
   1b83c:	0c 94 e0 e5 	jmp	0x1cbc0	; 0x1cbc0 <__prologue_saves__>
   1b840:	f8 2e       	mov	r15, r24
   1b842:	e9 2e       	mov	r14, r25
   1b844:	16 2f       	mov	r17, r22
   1b846:	07 2f       	mov	r16, r23
   1b848:	3a 01       	movw	r6, r20
    int i, size;
    int sectors;

    uint8_t buf[LIF_SECTOR_SIZE+4];

    LIF = lif_open_volume(lifimagename,"r");
   1b84a:	61 e4       	ldi	r22, 0x41	; 65
   1b84c:	77 e0       	ldi	r23, 0x07	; 7
   1b84e:	0e 94 dd d2 	call	0x1a5ba	; 0x1a5ba <lif_open_volume>
   1b852:	4c 01       	movw	r8, r24
    if(LIF == NULL)
   1b854:	00 97       	sbiw	r24, 0x00	; 0
   1b856:	51 f4       	brne	.+20     	; 0x1b86c <lif_extract_lif_as_lif+0x38>
    {
        printf("LIF image not found:%s\n", lifimagename);
   1b858:	ef 92       	push	r14
   1b85a:	ff 92       	push	r15
   1b85c:	83 e2       	ldi	r24, 0x23	; 35
   1b85e:	94 e3       	ldi	r25, 0x34	; 52
   1b860:	1f 92       	push	r1
   1b862:	9f 93       	push	r25
   1b864:	8f 93       	push	r24
   1b866:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1b86a:	11 c0       	rjmp	.+34     	; 0x1b88e <lif_extract_lif_as_lif+0x5a>
        return(0);
    }

    index = lif_find_file(LIF, lifname);
   1b86c:	61 2f       	mov	r22, r17
   1b86e:	70 2f       	mov	r23, r16
   1b870:	38 d9       	rcall	.-3472   	; 0x1aae2 <lif_find_file>
    if(index == -1)
   1b872:	01 96       	adiw	r24, 0x01	; 1
   1b874:	a1 f4       	brne	.+40     	; 0x1b89e <lif_extract_lif_as_lif+0x6a>
    {
        printf("File not found:%s\n", lifname);
   1b876:	0f 93       	push	r16
   1b878:	1f 93       	push	r17
   1b87a:	80 e1       	ldi	r24, 0x10	; 16
   1b87c:	94 e3       	ldi	r25, 0x34	; 52
   1b87e:	1f 92       	push	r1
   1b880:	9f 93       	push	r25
   1b882:	8f 93       	push	r24
   1b884:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b888:	c4 01       	movw	r24, r8
   1b88a:	0e 94 e5 cb 	call	0x197ca	; 0x197ca <lif_close_volume>
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        printf("File not found:%s\n", lifname);
        lif_closedir(LIF);
        return(0);
   1b88e:	0f 90       	pop	r0
   1b890:	0f 90       	pop	r0
   1b892:	0f 90       	pop	r0
   1b894:	0f 90       	pop	r0
   1b896:	0f 90       	pop	r0
   1b898:	00 e0       	ldi	r16, 0x00	; 0
   1b89a:	10 e0       	ldi	r17, 0x00	; 0
   1b89c:	0c c1       	rjmp	.+536    	; 0x1bab6 <lif_extract_lif_as_lif+0x282>
    }

    sectors = LIF->DIR.FileSectors;
   1b89e:	a4 01       	movw	r20, r8
   1b8a0:	40 5a       	subi	r20, 0xA0	; 160
   1b8a2:	5f 4f       	sbci	r21, 0xFF	; 255
   1b8a4:	c4 5f       	subi	r28, 0xF4	; 244
   1b8a6:	de 4f       	sbci	r29, 0xFE	; 254
   1b8a8:	59 83       	std	Y+1, r21	; 0x01
   1b8aa:	48 83       	st	Y, r20
   1b8ac:	cc 50       	subi	r28, 0x0C	; 12
   1b8ae:	d1 40       	sbci	r29, 0x01	; 1

    //Initialize the user file lif_t structure
    ULIF = lif_create_volume(username, "HFSLIF",1,1,sectors);
   1b8b0:	da 01       	movw	r26, r20
   1b8b2:	ad 90       	ld	r10, X+
   1b8b4:	bc 90       	ld	r11, X
   1b8b6:	0b 2c       	mov	r0, r11
   1b8b8:	00 0c       	add	r0, r0
   1b8ba:	cc 08       	sbc	r12, r12
   1b8bc:	dd 08       	sbc	r13, r13
   1b8be:	e1 2c       	mov	r14, r1
   1b8c0:	f1 2c       	mov	r15, r1
   1b8c2:	87 01       	movw	r16, r14
   1b8c4:	e3 94       	inc	r14
   1b8c6:	21 e0       	ldi	r18, 0x01	; 1
   1b8c8:	30 e0       	ldi	r19, 0x00	; 0
   1b8ca:	40 e0       	ldi	r20, 0x00	; 0
   1b8cc:	50 e0       	ldi	r21, 0x00	; 0
   1b8ce:	6f ee       	ldi	r22, 0xEF	; 239
   1b8d0:	75 e1       	ldi	r23, 0x15	; 21
   1b8d2:	c3 01       	movw	r24, r6
   1b8d4:	0e 94 4b ce 	call	0x19c96	; 0x19c96 <lif_create_volume>
   1b8d8:	5c 01       	movw	r10, r24
    if(ULIF == NULL)
   1b8da:	89 2b       	or	r24, r25
   1b8dc:	11 f4       	brne	.+4      	; 0x1b8e2 <lif_extract_lif_as_lif+0xae>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b8de:	c4 01       	movw	r24, r8
   1b8e0:	cf c0       	rjmp	.+414    	; 0x1ba80 <lif_extract_lif_as_lif+0x24c>
    }

    // Only the start sector changes

    // Copy directory record
    ULIF->DIR = LIF->DIR;
   1b8e2:	81 e2       	ldi	r24, 0x21	; 33
   1b8e4:	f4 01       	movw	r30, r8
   1b8e6:	e1 5b       	subi	r30, 0xB1	; 177
   1b8e8:	ff 4f       	sbci	r31, 0xFF	; 255
   1b8ea:	d5 01       	movw	r26, r10
   1b8ec:	a1 5b       	subi	r26, 0xB1	; 177
   1b8ee:	bf 4f       	sbci	r27, 0xFF	; 255
   1b8f0:	01 90       	ld	r0, Z+
   1b8f2:	0d 92       	st	X+, r0
   1b8f4:	8a 95       	dec	r24
   1b8f6:	e1 f7       	brne	.-8      	; 0x1b8f0 <lif_extract_lif_as_lif+0xbc>

    ULIF->DIR.FileStartSector = 2;
   1b8f8:	82 e0       	ldi	r24, 0x02	; 2
   1b8fa:	90 e0       	ldi	r25, 0x00	; 0
   1b8fc:	a0 e0       	ldi	r26, 0x00	; 0
   1b8fe:	b0 e0       	ldi	r27, 0x00	; 0
   1b900:	f5 01       	movw	r30, r10
   1b902:	e4 5a       	subi	r30, 0xA4	; 164
   1b904:	ff 4f       	sbci	r31, 0xFF	; 255
   1b906:	80 83       	st	Z, r24
   1b908:	91 83       	std	Z+1, r25	; 0x01
   1b90a:	a2 83       	std	Z+2, r26	; 0x02
   1b90c:	b3 83       	std	Z+3, r27	; 0x03
    ULIF->filesectors = LIF->DIR.FileSectors;
   1b90e:	c4 5f       	subi	r28, 0xF4	; 244
   1b910:	de 4f       	sbci	r29, 0xFE	; 254
   1b912:	e8 81       	ld	r30, Y
   1b914:	f9 81       	ldd	r31, Y+1	; 0x01
   1b916:	cc 50       	subi	r28, 0x0C	; 12
   1b918:	d1 40       	sbci	r29, 0x01	; 1
   1b91a:	80 81       	ld	r24, Z
   1b91c:	91 81       	ldd	r25, Z+1	; 0x01
   1b91e:	a2 81       	ldd	r26, Z+2	; 0x02
   1b920:	b3 81       	ldd	r27, Z+3	; 0x03
   1b922:	f5 01       	movw	r30, r10
   1b924:	80 8b       	std	Z+16, r24	; 0x10
   1b926:	91 8b       	std	Z+17, r25	; 0x11
   1b928:	a2 8b       	std	Z+18, r26	; 0x12
   1b92a:	b3 8b       	std	Z+19, r27	; 0x13

    if( !lif_writedirindex(ULIF,0))
   1b92c:	60 e0       	ldi	r22, 0x00	; 0
   1b92e:	70 e0       	ldi	r23, 0x00	; 0
   1b930:	c5 01       	movw	r24, r10
   1b932:	0e 94 cf cc 	call	0x1999e	; 0x1999e <lif_writedirindex>
   1b936:	8c 01       	movw	r16, r24
   1b938:	89 2b       	or	r24, r25
   1b93a:	41 f0       	breq	.+16     	; 0x1b94c <lif_extract_lif_as_lif+0x118>
    {
        lif_closedir(LIF);
        lif_closedir(ULIF);
        return(0);
    }
    if( !lif_writedirEOF(ULIF,1) )
   1b93c:	61 e0       	ldi	r22, 0x01	; 1
   1b93e:	70 e0       	ldi	r23, 0x00	; 0
   1b940:	c5 01       	movw	r24, r10
   1b942:	0e 94 2b cd 	call	0x19a56	; 0x19a56 <lif_writedirEOF>
   1b946:	8c 01       	movw	r16, r24
   1b948:	89 2b       	or	r24, r25
   1b94a:	39 f4       	brne	.+14     	; 0x1b95a <lif_extract_lif_as_lif+0x126>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b94c:	c4 01       	movw	r24, r8
   1b94e:	0e 94 e5 cb 	call	0x197ca	; 0x197ca <lif_close_volume>
   1b952:	c5 01       	movw	r24, r10
   1b954:	0e 94 e5 cb 	call	0x197ca	; 0x197ca <lif_close_volume>
    }
    if( !lif_writedirEOF(ULIF,1) )
    {
        lif_closedir(LIF);
        lif_closedir(ULIF);
        return(0);
   1b958:	ae c0       	rjmp	.+348    	; 0x1bab6 <lif_extract_lif_as_lif+0x282>
    }

    uoffset =  ULIF->filestart * (long) LIF_SECTOR_SIZE;
   1b95a:	d5 01       	movw	r26, r10
   1b95c:	1c 96       	adiw	r26, 0x0c	; 12
   1b95e:	cd 90       	ld	r12, X+
   1b960:	dd 90       	ld	r13, X+
   1b962:	ed 90       	ld	r14, X+
   1b964:	fc 90       	ld	r15, X
   1b966:	1f 97       	sbiw	r26, 0x0f	; 15
   1b968:	fe 2c       	mov	r15, r14
   1b96a:	ed 2c       	mov	r14, r13
   1b96c:	dc 2c       	mov	r13, r12
   1b96e:	cc 24       	eor	r12, r12

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1b970:	f4 01       	movw	r30, r8
   1b972:	e4 5a       	subi	r30, 0xA4	; 164
   1b974:	ff 4f       	sbci	r31, 0xFF	; 255
   1b976:	80 81       	ld	r24, Z
   1b978:	91 81       	ldd	r25, Z+1	; 0x01
   1b97a:	a2 81       	ldd	r26, Z+2	; 0x02
   1b97c:	b3 81       	ldd	r27, Z+3	; 0x03
   1b97e:	22 27       	eor	r18, r18
   1b980:	38 2f       	mov	r19, r24
   1b982:	49 2f       	mov	r20, r25
   1b984:	5a 2f       	mov	r21, r26
   1b986:	cb 5f       	subi	r28, 0xFB	; 251
   1b988:	de 4f       	sbci	r29, 0xFE	; 254
   1b98a:	28 83       	st	Y, r18
   1b98c:	39 83       	std	Y+1, r19	; 0x01
   1b98e:	4a 83       	std	Y+2, r20	; 0x02
   1b990:	5b 83       	std	Y+3, r21	; 0x03
   1b992:	c5 50       	subi	r28, 0x05	; 5
   1b994:	d1 40       	sbci	r29, 0x01	; 1

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b996:	21 2c       	mov	r2, r1
   1b998:	31 2c       	mov	r3, r1
            return(0);
        }
        bytes += size;
        offset += size;
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
   1b99a:	82 e0       	ldi	r24, 0x02	; 2
   1b99c:	94 e3       	ldi	r25, 0x34	; 52
   1b99e:	9c 01       	movw	r18, r24
   1b9a0:	40 e0       	ldi	r20, 0x00	; 0
   1b9a2:	c7 5f       	subi	r28, 0xF7	; 247
   1b9a4:	de 4f       	sbci	r29, 0xFE	; 254
   1b9a6:	28 83       	st	Y, r18
   1b9a8:	39 83       	std	Y+1, r19	; 0x01
   1b9aa:	4a 83       	std	Y+2, r20	; 0x02
   1b9ac:	c9 50       	subi	r28, 0x09	; 9
   1b9ae:	d1 40       	sbci	r29, 0x01	; 1

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b9b0:	41 c0       	rjmp	.+130    	; 0x1ba34 <lif_extract_lif_as_lif+0x200>
            lif_closedir(LIF);
            lif_closedir(ULIF);
            return(0);
        }

        lif_write(ULIF,buf,uoffset,LIF_SECTOR_SIZE);
   1b9b2:	00 e0       	ldi	r16, 0x00	; 0
   1b9b4:	11 e0       	ldi	r17, 0x01	; 1
   1b9b6:	a7 01       	movw	r20, r14
   1b9b8:	96 01       	movw	r18, r12
   1b9ba:	be 01       	movw	r22, r28
   1b9bc:	6f 5f       	subi	r22, 0xFF	; 255
   1b9be:	7f 4f       	sbci	r23, 0xFF	; 255
   1b9c0:	c5 01       	movw	r24, r10
   1b9c2:	0e 94 a6 c3 	call	0x1874c	; 0x1874c <lif_write>
        {
            lif_closedir(LIF);
            lif_closedir(ULIF);
            return(0);
        }
        bytes += size;
   1b9c6:	05 2c       	mov	r0, r5
   1b9c8:	00 0c       	add	r0, r0
   1b9ca:	66 08       	sbc	r6, r6
   1b9cc:	77 08       	sbc	r7, r7
   1b9ce:	c4 0c       	add	r12, r4
   1b9d0:	d5 1c       	adc	r13, r5
   1b9d2:	e6 1c       	adc	r14, r6
   1b9d4:	f7 1c       	adc	r15, r7
        offset += size;
   1b9d6:	cb 5f       	subi	r28, 0xFB	; 251
   1b9d8:	de 4f       	sbci	r29, 0xFE	; 254
   1b9da:	88 81       	ld	r24, Y
   1b9dc:	99 81       	ldd	r25, Y+1	; 0x01
   1b9de:	aa 81       	ldd	r26, Y+2	; 0x02
   1b9e0:	bb 81       	ldd	r27, Y+3	; 0x03
   1b9e2:	c5 50       	subi	r28, 0x05	; 5
   1b9e4:	d1 40       	sbci	r29, 0x01	; 1
   1b9e6:	84 0d       	add	r24, r4
   1b9e8:	95 1d       	adc	r25, r5
   1b9ea:	a6 1d       	adc	r26, r6
   1b9ec:	b7 1d       	adc	r27, r7
   1b9ee:	cb 5f       	subi	r28, 0xFB	; 251
   1b9f0:	de 4f       	sbci	r29, 0xFE	; 254
   1b9f2:	88 83       	st	Y, r24
   1b9f4:	99 83       	std	Y+1, r25	; 0x01
   1b9f6:	aa 83       	std	Y+2, r26	; 0x02
   1b9f8:	bb 83       	std	Y+3, r27	; 0x03
   1b9fa:	c5 50       	subi	r28, 0x05	; 5
   1b9fc:	d1 40       	sbci	r29, 0x01	; 1
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
   1b9fe:	ff 92       	push	r15
   1ba00:	ef 92       	push	r14
   1ba02:	df 92       	push	r13
   1ba04:	cf 92       	push	r12
   1ba06:	1f 92       	push	r1
   1ba08:	c6 5f       	subi	r28, 0xF6	; 246
   1ba0a:	de 4f       	sbci	r29, 0xFE	; 254
   1ba0c:	98 81       	ld	r25, Y
   1ba0e:	ca 50       	subi	r28, 0x0A	; 10
   1ba10:	d1 40       	sbci	r29, 0x01	; 1
   1ba12:	9f 93       	push	r25
   1ba14:	c7 5f       	subi	r28, 0xF7	; 247
   1ba16:	de 4f       	sbci	r29, 0xFE	; 254
   1ba18:	a8 81       	ld	r26, Y
   1ba1a:	c9 50       	subi	r28, 0x09	; 9
   1ba1c:	d1 40       	sbci	r29, 0x01	; 1
   1ba1e:	af 93       	push	r26
   1ba20:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1ba24:	bf ef       	ldi	r27, 0xFF	; 255
   1ba26:	2b 1a       	sub	r2, r27
   1ba28:	3b 0a       	sbc	r3, r27
   1ba2a:	0f b6       	in	r0, 0x3f	; 63
   1ba2c:	f8 94       	cli
   1ba2e:	de bf       	out	0x3e, r29	; 62
   1ba30:	0f be       	out	0x3f, r0	; 63
   1ba32:	cd bf       	out	0x3d, r28	; 61
   1ba34:	c4 5f       	subi	r28, 0xF4	; 244
   1ba36:	de 4f       	sbci	r29, 0xFE	; 254
   1ba38:	a8 81       	ld	r26, Y
   1ba3a:	b9 81       	ldd	r27, Y+1	; 0x01
   1ba3c:	cc 50       	subi	r28, 0x0C	; 12
   1ba3e:	d1 40       	sbci	r29, 0x01	; 1
   1ba40:	8d 91       	ld	r24, X+
   1ba42:	9c 91       	ld	r25, X
   1ba44:	28 16       	cp	r2, r24
   1ba46:	39 06       	cpc	r3, r25
   1ba48:	f4 f4       	brge	.+60     	; 0x1ba86 <lif_extract_lif_as_lif+0x252>
    {
        size = lif_read(LIF, buf, offset,LIF_SECTOR_SIZE);
   1ba4a:	00 e0       	ldi	r16, 0x00	; 0
   1ba4c:	11 e0       	ldi	r17, 0x01	; 1
   1ba4e:	cb 5f       	subi	r28, 0xFB	; 251
   1ba50:	de 4f       	sbci	r29, 0xFE	; 254
   1ba52:	28 81       	ld	r18, Y
   1ba54:	39 81       	ldd	r19, Y+1	; 0x01
   1ba56:	4a 81       	ldd	r20, Y+2	; 0x02
   1ba58:	5b 81       	ldd	r21, Y+3	; 0x03
   1ba5a:	c5 50       	subi	r28, 0x05	; 5
   1ba5c:	d1 40       	sbci	r29, 0x01	; 1
   1ba5e:	be 01       	movw	r22, r28
   1ba60:	6f 5f       	subi	r22, 0xFF	; 255
   1ba62:	7f 4f       	sbci	r23, 0xFF	; 255
   1ba64:	c4 01       	movw	r24, r8
   1ba66:	0e 94 4d c3 	call	0x1869a	; 0x1869a <lif_read>
   1ba6a:	2b 01       	movw	r4, r22
   1ba6c:	3c 01       	movw	r6, r24
        if(size < LIF_SECTOR_SIZE)
   1ba6e:	6f 3f       	cpi	r22, 0xFF	; 255
   1ba70:	71 05       	cpc	r23, r1
   1ba72:	11 f0       	breq	.+4      	; 0x1ba78 <lif_extract_lif_as_lif+0x244>
   1ba74:	0c f0       	brlt	.+2      	; 0x1ba78 <lif_extract_lif_as_lif+0x244>
   1ba76:	9d cf       	rjmp	.-198    	; 0x1b9b2 <lif_extract_lif_as_lif+0x17e>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1ba78:	c4 01       	movw	r24, r8
   1ba7a:	0e 94 e5 cb 	call	0x197ca	; 0x197ca <lif_close_volume>
   1ba7e:	c5 01       	movw	r24, r10
   1ba80:	0e 94 e5 cb 	call	0x197ca	; 0x197ca <lif_close_volume>
   1ba84:	09 cf       	rjmp	.-494    	; 0x1b898 <lif_extract_lif_as_lif+0x64>
   1ba86:	c4 01       	movw	r24, r8
   1ba88:	0e 94 e5 cb 	call	0x197ca	; 0x197ca <lif_close_volume>
   1ba8c:	c5 01       	movw	r24, r10
   1ba8e:	0e 94 e5 cb 	call	0x197ca	; 0x197ca <lif_close_volume>
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
    }
    lif_closedir(LIF);
    lif_closedir(ULIF);
    printf("\tWrote: %8ld\n", bytes);
   1ba92:	ff 92       	push	r15
   1ba94:	ef 92       	push	r14
   1ba96:	df 92       	push	r13
   1ba98:	cf 92       	push	r12
   1ba9a:	84 ef       	ldi	r24, 0xF4	; 244
   1ba9c:	93 e3       	ldi	r25, 0x33	; 51
   1ba9e:	1f 92       	push	r1
   1baa0:	9f 93       	push	r25
   1baa2:	8f 93       	push	r24
   1baa4:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    return(1);
   1baa8:	0f b6       	in	r0, 0x3f	; 63
   1baaa:	f8 94       	cli
   1baac:	de bf       	out	0x3e, r29	; 62
   1baae:	0f be       	out	0x3f, r0	; 63
   1bab0:	cd bf       	out	0x3d, r28	; 61
   1bab2:	01 e0       	ldi	r16, 0x01	; 1
   1bab4:	10 e0       	ldi	r17, 0x00	; 0
}
   1bab6:	c8 01       	movw	r24, r16
   1bab8:	c3 5f       	subi	r28, 0xF3	; 243
   1baba:	de 4f       	sbci	r29, 0xFE	; 254
   1babc:	e2 e1       	ldi	r30, 0x12	; 18
   1babe:	0c 94 fc e5 	jmp	0x1cbf8	; 0x1cbf8 <__epilogue_restores__>

0001bac2 <lif_add_lif_file>:
/// @param[in] lifname: LIF file name to copy file to
/// @param[in] userfile: LIF mage name copy file from 
/// @return size of data written into to LIF image, or -1 on error
MEMSPACE
long lif_add_lif_file(char *lifimagename, char *lifname, char *userfile)
{
   1bac2:	2f 92       	push	r2
   1bac4:	3f 92       	push	r3
   1bac6:	4f 92       	push	r4
   1bac8:	5f 92       	push	r5
   1baca:	6f 92       	push	r6
   1bacc:	8f 92       	push	r8
   1bace:	9f 92       	push	r9
   1bad0:	af 92       	push	r10
   1bad2:	bf 92       	push	r11
   1bad4:	cf 92       	push	r12
   1bad6:	df 92       	push	r13
   1bad8:	ef 92       	push	r14
   1bada:	ff 92       	push	r15
   1badc:	0f 93       	push	r16
   1bade:	1f 93       	push	r17
   1bae0:	cf 93       	push	r28
   1bae2:	df 93       	push	r29
   1bae4:	cd b7       	in	r28, 0x3d	; 61
   1bae6:	de b7       	in	r29, 0x3e	; 62
   1bae8:	c4 51       	subi	r28, 0x14	; 20
   1baea:	d1 40       	sbci	r29, 0x01	; 1
   1baec:	0f b6       	in	r0, 0x3f	; 63
   1baee:	f8 94       	cli
   1baf0:	de bf       	out	0x3e, r29	; 62
   1baf2:	0f be       	out	0x3f, r0	; 63
   1baf4:	cd bf       	out	0x3d, r28	; 61
   1baf6:	7c 01       	movw	r14, r24
   1baf8:	5b 01       	movw	r10, r22
   1bafa:	6a 01       	movw	r12, r20
    long offset, uoffset, start, bytes;
    int i, size;

    uint8_t buf[LIF_SECTOR_SIZE+4];

    if(!*lifimagename)
   1bafc:	dc 01       	movw	r26, r24
   1bafe:	8c 91       	ld	r24, X
   1bb00:	81 11       	cpse	r24, r1
   1bb02:	03 c0       	rjmp	.+6      	; 0x1bb0a <lif_add_lif_file+0x48>
    {
        printf("lif_add: lifimagename is empty\n");
   1bb04:	84 ed       	ldi	r24, 0xD4	; 212
   1bb06:	93 e3       	ldi	r25, 0x33	; 51
   1bb08:	06 c0       	rjmp	.+12     	; 0x1bb16 <lif_add_lif_file+0x54>
        return(-1);
    }
    if(!*lifname)
   1bb0a:	fb 01       	movw	r30, r22
   1bb0c:	80 81       	ld	r24, Z
   1bb0e:	81 11       	cpse	r24, r1
   1bb10:	0b c0       	rjmp	.+22     	; 0x1bb28 <lif_add_lif_file+0x66>
    {
        printf("lif_add: lifname is empty\n");
   1bb12:	89 eb       	ldi	r24, 0xB9	; 185
   1bb14:	93 e3       	ldi	r25, 0x33	; 51
   1bb16:	1f 92       	push	r1
   1bb18:	9f 93       	push	r25
   1bb1a:	8f 93       	push	r24
   1bb1c:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
        return(-1);
   1bb20:	0f 90       	pop	r0
   1bb22:	0f 90       	pop	r0
   1bb24:	0f 90       	pop	r0
   1bb26:	32 c1       	rjmp	.+612    	; 0x1bd8c <lif_add_lif_file+0x2ca>
    }
    if(!*userfile)
   1bb28:	da 01       	movw	r26, r20
   1bb2a:	8c 91       	ld	r24, X
   1bb2c:	81 11       	cpse	r24, r1
   1bb2e:	03 c0       	rjmp	.+6      	; 0x1bb36 <lif_add_lif_file+0x74>
    {
        printf("lif_add: userfile is empty\n");
   1bb30:	8d e9       	ldi	r24, 0x9D	; 157
   1bb32:	93 e3       	ldi	r25, 0x33	; 51
   1bb34:	f0 cf       	rjmp	.-32     	; 0x1bb16 <lif_add_lif_file+0x54>
        return(-1);
    }

    if(debuglevel & 0x400)
   1bb36:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1bb3a:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1bb3e:	92 ff       	sbrs	r25, 2
   1bb40:	12 c0       	rjmp	.+36     	; 0x1bb66 <lif_add_lif_file+0xa4>
        printf("LIF image:[%s], LIF name:[%s], user file:[%s]\n", 
   1bb42:	df 92       	push	r13
   1bb44:	4f 93       	push	r20
   1bb46:	bf 92       	push	r11
   1bb48:	6f 93       	push	r22
   1bb4a:	ff 92       	push	r15
   1bb4c:	ef 92       	push	r14
   1bb4e:	8e e6       	ldi	r24, 0x6E	; 110
   1bb50:	93 e3       	ldi	r25, 0x33	; 51
   1bb52:	1f 92       	push	r1
   1bb54:	9f 93       	push	r25
   1bb56:	8f 93       	push	r24
   1bb58:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1bb5c:	0f b6       	in	r0, 0x3f	; 63
   1bb5e:	f8 94       	cli
   1bb60:	de bf       	out	0x3e, r29	; 62
   1bb62:	0f be       	out	0x3f, r0	; 63
   1bb64:	cd bf       	out	0x3d, r28	; 61
            lifimagename, lifname, userfile);

    // open  userfile as LIF image
    ULIF = lif_open_volume(userfile,"rb+");
   1bb66:	60 e9       	ldi	r22, 0x90	; 144
   1bb68:	78 e0       	ldi	r23, 0x08	; 8
   1bb6a:	c6 01       	movw	r24, r12
   1bb6c:	0e 94 dd d2 	call	0x1a5ba	; 0x1a5ba <lif_open_volume>
   1bb70:	4c 01       	movw	r8, r24
    if(ULIF == NULL)
   1bb72:	00 97       	sbiw	r24, 0x00	; 0
   1bb74:	09 f4       	brne	.+2      	; 0x1bb78 <lif_add_lif_file+0xb6>
   1bb76:	0a c1       	rjmp	.+532    	; 0x1bd8c <lif_add_lif_file+0x2ca>
        return(-1); 

    // find lif file in user image
    index = lif_find_file(ULIF, lifname);
   1bb78:	b5 01       	movw	r22, r10
   1bb7a:	0e 94 71 d5 	call	0x1aae2	; 0x1aae2 <lif_find_file>
    if(index == -1)
   1bb7e:	01 96       	adiw	r24, 0x01	; 1
   1bb80:	b1 f4       	brne	.+44     	; 0x1bbae <lif_add_lif_file+0xec>
    {
        printf("File not found:%s\n", lifname);
   1bb82:	bf 92       	push	r11
   1bb84:	af 92       	push	r10
   1bb86:	8b e5       	ldi	r24, 0x5B	; 91
   1bb88:	93 e3       	ldi	r25, 0x33	; 51
   1bb8a:	1f 92       	push	r1
   1bb8c:	9f 93       	push	r25
   1bb8e:	8f 93       	push	r24
   1bb90:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bb94:	c4 01       	movw	r24, r8
   1bb96:	0e 94 e5 cb 	call	0x197ca	; 0x197ca <lif_close_volume>
    index = lif_find_file(ULIF, lifname);
    if(index == -1)
    {
        printf("File not found:%s\n", lifname);
        lif_closedir(ULIF);
        return(0);
   1bb9a:	0f 90       	pop	r0
   1bb9c:	0f 90       	pop	r0
   1bb9e:	0f 90       	pop	r0
   1bba0:	0f 90       	pop	r0
   1bba2:	0f 90       	pop	r0
   1bba4:	60 e0       	ldi	r22, 0x00	; 0
   1bba6:	70 e0       	ldi	r23, 0x00	; 0
   1bba8:	80 e0       	ldi	r24, 0x00	; 0
   1bbaa:	90 e0       	ldi	r25, 0x00	; 0
   1bbac:	09 c1       	rjmp	.+530    	; 0x1bdc0 <lif_add_lif_file+0x2fe>
    }

    LIF = lif_open_volume(lifimagename,"rb+");
   1bbae:	60 e9       	ldi	r22, 0x90	; 144
   1bbb0:	78 e0       	ldi	r23, 0x08	; 8
   1bbb2:	c7 01       	movw	r24, r14
   1bbb4:	0e 94 dd d2 	call	0x1a5ba	; 0x1a5ba <lif_open_volume>
   1bbb8:	5c 01       	movw	r10, r24
    if(LIF == NULL)
   1bbba:	00 97       	sbiw	r24, 0x00	; 0
   1bbbc:	09 f4       	brne	.+2      	; 0x1bbc0 <lif_add_lif_file+0xfe>
   1bbbe:	e6 c0       	rjmp	.+460    	; 0x1bd8c <lif_add_lif_file+0x2ca>
        return(-1); 

    // Now find a new free record that is big enough
    index = lif_newdir(LIF, ULIF->DIR.FileSectors);
   1bbc0:	f4 01       	movw	r30, r8
   1bbc2:	e0 5a       	subi	r30, 0xA0	; 160
   1bbc4:	ff 4f       	sbci	r31, 0xFF	; 255
   1bbc6:	40 81       	ld	r20, Z
   1bbc8:	51 81       	ldd	r21, Z+1	; 0x01
   1bbca:	62 81       	ldd	r22, Z+2	; 0x02
   1bbcc:	73 81       	ldd	r23, Z+3	; 0x03
   1bbce:	0e 94 78 d1 	call	0x1a2f0	; 0x1a2f0 <lif_newdir>
   1bbd2:	c3 5f       	subi	r28, 0xF3	; 243
   1bbd4:	de 4f       	sbci	r29, 0xFE	; 254
   1bbd6:	99 83       	std	Y+1, r25	; 0x01
   1bbd8:	88 83       	st	Y, r24
   1bbda:	cd 50       	subi	r28, 0x0D	; 13
   1bbdc:	d1 40       	sbci	r29, 0x01	; 1
    if(index == -1)
   1bbde:	01 96       	adiw	r24, 0x01	; 1
   1bbe0:	b9 f4       	brne	.+46     	; 0x1bc10 <lif_add_lif_file+0x14e>
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n", 
   1bbe2:	df 92       	push	r13
   1bbe4:	cf 92       	push	r12
   1bbe6:	ff 92       	push	r15
   1bbe8:	ef 92       	push	r14
   1bbea:	8b e2       	ldi	r24, 0x2B	; 43
   1bbec:	93 e3       	ldi	r25, 0x33	; 51
   1bbee:	1f 92       	push	r1
   1bbf0:	9f 93       	push	r25
   1bbf2:	8f 93       	push	r24
   1bbf4:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bbf8:	c5 01       	movw	r24, r10
   1bbfa:	0e 94 e5 cb 	call	0x197ca	; 0x197ca <lif_close_volume>
   1bbfe:	c4 01       	movw	r24, r8
   1bc00:	0e 94 e5 cb 	call	0x197ca	; 0x197ca <lif_close_volume>
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n", 
            lifimagename, userfile);
            lif_closedir(LIF);
            lif_closedir(ULIF);
        return(-1);
   1bc04:	0f b6       	in	r0, 0x3f	; 63
   1bc06:	f8 94       	cli
   1bc08:	de bf       	out	0x3e, r29	; 62
   1bc0a:	0f be       	out	0x3f, r0	; 63
   1bc0c:	cd bf       	out	0x3d, r28	; 61
   1bc0e:	be c0       	rjmp	.+380    	; 0x1bd8c <lif_add_lif_file+0x2ca>
    }

    // Save start sector
    start = LIF->DIR.FileStartSector;
   1bc10:	c5 01       	movw	r24, r10
   1bc12:	84 5a       	subi	r24, 0xA4	; 164
   1bc14:	9f 4f       	sbci	r25, 0xFF	; 255
   1bc16:	dc 01       	movw	r26, r24
   1bc18:	4d 91       	ld	r20, X+
   1bc1a:	5d 91       	ld	r21, X+
   1bc1c:	6d 91       	ld	r22, X+
   1bc1e:	7c 91       	ld	r23, X
   1bc20:	13 97       	sbiw	r26, 0x03	; 3

    // Copy user image directory record to master image directory record
    LIF->DIR = ULIF->DIR;
   1bc22:	21 e2       	ldi	r18, 0x21	; 33
   1bc24:	f4 01       	movw	r30, r8
   1bc26:	e1 5b       	subi	r30, 0xB1	; 177
   1bc28:	ff 4f       	sbci	r31, 0xFF	; 255
   1bc2a:	1d 97       	sbiw	r26, 0x0d	; 13
   1bc2c:	01 90       	ld	r0, Z+
   1bc2e:	0d 92       	st	X+, r0
   1bc30:	2a 95       	dec	r18
   1bc32:	e1 f7       	brne	.-8      	; 0x1bc2c <lif_add_lif_file+0x16a>

    // Restore FileStartSector
    LIF->DIR.FileStartSector = start;
   1bc34:	fc 01       	movw	r30, r24
   1bc36:	40 83       	st	Z, r20
   1bc38:	51 83       	std	Z+1, r21	; 0x01
   1bc3a:	62 83       	std	Z+2, r22	; 0x02
   1bc3c:	73 83       	std	Z+3, r23	; 0x03

    // Master lif image file start in bytes
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1bc3e:	b6 2f       	mov	r27, r22
   1bc40:	a5 2f       	mov	r26, r21
   1bc42:	94 2f       	mov	r25, r20
   1bc44:	88 27       	eor	r24, r24
   1bc46:	cb 5f       	subi	r28, 0xFB	; 251
   1bc48:	de 4f       	sbci	r29, 0xFE	; 254
   1bc4a:	88 83       	st	Y, r24
   1bc4c:	99 83       	std	Y+1, r25	; 0x01
   1bc4e:	aa 83       	std	Y+2, r26	; 0x02
   1bc50:	bb 83       	std	Y+3, r27	; 0x03
   1bc52:	c5 50       	subi	r28, 0x05	; 5
   1bc54:	d1 40       	sbci	r29, 0x01	; 1
    // User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1bc56:	f4 01       	movw	r30, r8
   1bc58:	e4 5a       	subi	r30, 0xA4	; 164
   1bc5a:	ff 4f       	sbci	r31, 0xFF	; 255
   1bc5c:	80 81       	ld	r24, Z
   1bc5e:	91 81       	ldd	r25, Z+1	; 0x01
   1bc60:	a2 81       	ldd	r26, Z+2	; 0x02
   1bc62:	b3 81       	ldd	r27, Z+3	; 0x03
   1bc64:	22 27       	eor	r18, r18
   1bc66:	38 2f       	mov	r19, r24
   1bc68:	49 2f       	mov	r20, r25
   1bc6a:	5a 2f       	mov	r21, r26
   1bc6c:	c7 5f       	subi	r28, 0xF7	; 247
   1bc6e:	de 4f       	sbci	r29, 0xFE	; 254
   1bc70:	28 83       	st	Y, r18
   1bc72:	39 83       	std	Y+1, r19	; 0x01
   1bc74:	4a 83       	std	Y+2, r20	; 0x02
   1bc76:	5b 83       	std	Y+3, r21	; 0x03
   1bc78:	c9 50       	subi	r28, 0x09	; 9
   1bc7a:	d1 40       	sbci	r29, 0x01	; 1
    bytes = 0;
    // Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1bc7c:	21 2c       	mov	r2, r1
   1bc7e:	31 2c       	mov	r3, r1

    // Master lif image file start in bytes
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    // User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
   1bc80:	c1 2c       	mov	r12, r1
   1bc82:	d1 2c       	mov	r13, r1
   1bc84:	76 01       	movw	r14, r12
    // Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1bc86:	a5 01       	movw	r20, r10
   1bc88:	40 5a       	subi	r20, 0xA0	; 160
   1bc8a:	5f 4f       	sbci	r21, 0xFF	; 255
   1bc8c:	cd 5e       	subi	r28, 0xED	; 237
   1bc8e:	de 4f       	sbci	r29, 0xFE	; 254
   1bc90:	59 83       	std	Y+1, r21	; 0x01
   1bc92:	48 83       	st	Y, r20
   1bc94:	c3 51       	subi	r28, 0x13	; 19
   1bc96:	d1 40       	sbci	r29, 0x01	; 1
            return(-1);
        }
        offset += (long) LIF_SECTOR_SIZE;
        uoffset += (long) LIF_SECTOR_SIZE;
        bytes += (long) LIF_SECTOR_SIZE;
        printf("\tWrote: %8ld\r", bytes);
   1bc98:	8d e1       	ldi	r24, 0x1D	; 29
   1bc9a:	93 e3       	ldi	r25, 0x33	; 51
   1bc9c:	2c 01       	movw	r4, r24
   1bc9e:	c7 5f       	subi	r28, 0xF7	; 247
   1bca0:	de 4f       	sbci	r29, 0xFE	; 254
   1bca2:	28 81       	ld	r18, Y
   1bca4:	39 81       	ldd	r19, Y+1	; 0x01
   1bca6:	4a 81       	ldd	r20, Y+2	; 0x02
   1bca8:	5b 81       	ldd	r21, Y+3	; 0x03
   1bcaa:	c9 50       	subi	r28, 0x09	; 9
   1bcac:	d1 40       	sbci	r29, 0x01	; 1
   1bcae:	2c 0d       	add	r18, r12
   1bcb0:	3d 1d       	adc	r19, r13
   1bcb2:	4e 1d       	adc	r20, r14
   1bcb4:	5f 1d       	adc	r21, r15
   1bcb6:	cb 5f       	subi	r28, 0xFB	; 251
   1bcb8:	de 4f       	sbci	r29, 0xFE	; 254
   1bcba:	88 81       	ld	r24, Y
   1bcbc:	99 81       	ldd	r25, Y+1	; 0x01
   1bcbe:	aa 81       	ldd	r26, Y+2	; 0x02
   1bcc0:	bb 81       	ldd	r27, Y+3	; 0x03
   1bcc2:	c5 50       	subi	r28, 0x05	; 5
   1bcc4:	d1 40       	sbci	r29, 0x01	; 1
   1bcc6:	8c 0d       	add	r24, r12
   1bcc8:	9d 1d       	adc	r25, r13
   1bcca:	ae 1d       	adc	r26, r14
   1bccc:	bf 1d       	adc	r27, r15
   1bcce:	c1 5f       	subi	r28, 0xF1	; 241
   1bcd0:	de 4f       	sbci	r29, 0xFE	; 254
   1bcd2:	88 83       	st	Y, r24
   1bcd4:	99 83       	std	Y+1, r25	; 0x01
   1bcd6:	aa 83       	std	Y+2, r26	; 0x02
   1bcd8:	bb 83       	std	Y+3, r27	; 0x03
   1bcda:	cf 50       	subi	r28, 0x0F	; 15
   1bcdc:	d1 40       	sbci	r29, 0x01	; 1
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    // User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
    // Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1bcde:	cd 5e       	subi	r28, 0xED	; 237
   1bce0:	de 4f       	sbci	r29, 0xFE	; 254
   1bce2:	a8 81       	ld	r26, Y
   1bce4:	b9 81       	ldd	r27, Y+1	; 0x01
   1bce6:	c3 51       	subi	r28, 0x13	; 19
   1bce8:	d1 40       	sbci	r29, 0x01	; 1
   1bcea:	8d 91       	ld	r24, X+
   1bcec:	9c 91       	ld	r25, X
   1bcee:	28 16       	cp	r2, r24
   1bcf0:	39 06       	cpc	r3, r25
   1bcf2:	dc f5       	brge	.+118    	; 0x1bd6a <lif_add_lif_file+0x2a8>
    {
        // Read
        size = lif_read(ULIF, buf, uoffset, LIF_SECTOR_SIZE);
   1bcf4:	00 e0       	ldi	r16, 0x00	; 0
   1bcf6:	11 e0       	ldi	r17, 0x01	; 1
   1bcf8:	be 01       	movw	r22, r28
   1bcfa:	6f 5f       	subi	r22, 0xFF	; 255
   1bcfc:	7f 4f       	sbci	r23, 0xFF	; 255
   1bcfe:	c4 01       	movw	r24, r8
   1bd00:	0e 94 4d c3 	call	0x1869a	; 0x1869a <lif_read>
        if(size < LIF_SECTOR_SIZE)
   1bd04:	6f 3f       	cpi	r22, 0xFF	; 255
   1bd06:	71 05       	cpc	r23, r1
   1bd08:	a9 f0       	breq	.+42     	; 0x1bd34 <lif_add_lif_file+0x272>
   1bd0a:	a4 f0       	brlt	.+40     	; 0x1bd34 <lif_add_lif_file+0x272>
            lif_closedir(ULIF);
            return(-1);
        }

        // Write
        size = lif_write(LIF, buf, offset, LIF_SECTOR_SIZE);
   1bd0c:	00 e0       	ldi	r16, 0x00	; 0
   1bd0e:	11 e0       	ldi	r17, 0x01	; 1
   1bd10:	c1 5f       	subi	r28, 0xF1	; 241
   1bd12:	de 4f       	sbci	r29, 0xFE	; 254
   1bd14:	28 81       	ld	r18, Y
   1bd16:	39 81       	ldd	r19, Y+1	; 0x01
   1bd18:	4a 81       	ldd	r20, Y+2	; 0x02
   1bd1a:	5b 81       	ldd	r21, Y+3	; 0x03
   1bd1c:	cf 50       	subi	r28, 0x0F	; 15
   1bd1e:	d1 40       	sbci	r29, 0x01	; 1
   1bd20:	be 01       	movw	r22, r28
   1bd22:	6f 5f       	subi	r22, 0xFF	; 255
   1bd24:	7f 4f       	sbci	r23, 0xFF	; 255
   1bd26:	c5 01       	movw	r24, r10
   1bd28:	0e 94 a6 c3 	call	0x1874c	; 0x1874c <lif_write>
        if(size < LIF_SECTOR_SIZE)
   1bd2c:	8f 3f       	cpi	r24, 0xFF	; 255
   1bd2e:	91 05       	cpc	r25, r1
   1bd30:	09 f0       	breq	.+2      	; 0x1bd34 <lif_add_lif_file+0x272>
   1bd32:	2c f4       	brge	.+10     	; 0x1bd3e <lif_add_lif_file+0x27c>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bd34:	c5 01       	movw	r24, r10
   1bd36:	0e 94 e5 cb 	call	0x197ca	; 0x197ca <lif_close_volume>
   1bd3a:	c4 01       	movw	r24, r8
   1bd3c:	25 c0       	rjmp	.+74     	; 0x1bd88 <lif_add_lif_file+0x2c6>
            lif_closedir(ULIF);
            return(-1);
        }
        offset += (long) LIF_SECTOR_SIZE;
        uoffset += (long) LIF_SECTOR_SIZE;
        bytes += (long) LIF_SECTOR_SIZE;
   1bd3e:	5f ef       	ldi	r21, 0xFF	; 255
   1bd40:	d5 1a       	sub	r13, r21
   1bd42:	e5 0a       	sbc	r14, r21
   1bd44:	f5 0a       	sbc	r15, r21
        printf("\tWrote: %8ld\r", bytes);
   1bd46:	ff 92       	push	r15
   1bd48:	ef 92       	push	r14
   1bd4a:	df 92       	push	r13
   1bd4c:	cf 92       	push	r12
   1bd4e:	1f 92       	push	r1
   1bd50:	5f 92       	push	r5
   1bd52:	4f 92       	push	r4
   1bd54:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    // User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
    // Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1bd58:	8f ef       	ldi	r24, 0xFF	; 255
   1bd5a:	28 1a       	sub	r2, r24
   1bd5c:	38 0a       	sbc	r3, r24
   1bd5e:	0f b6       	in	r0, 0x3f	; 63
   1bd60:	f8 94       	cli
   1bd62:	de bf       	out	0x3e, r29	; 62
   1bd64:	0f be       	out	0x3f, r0	; 63
   1bd66:	cd bf       	out	0x3d, r28	; 61
   1bd68:	9a cf       	rjmp	.-204    	; 0x1bc9e <lif_add_lif_file+0x1dc>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bd6a:	c4 01       	movw	r24, r8
   1bd6c:	0e 94 e5 cb 	call	0x197ca	; 0x197ca <lif_close_volume>
        printf("\tWrote: %8ld\r", bytes);
    }
    lif_closedir(ULIF);

    // Write directory record
    if( !lif_writedirindex(LIF,index))
   1bd70:	c3 5f       	subi	r28, 0xF3	; 243
   1bd72:	de 4f       	sbci	r29, 0xFE	; 254
   1bd74:	68 81       	ld	r22, Y
   1bd76:	79 81       	ldd	r23, Y+1	; 0x01
   1bd78:	cd 50       	subi	r28, 0x0D	; 13
   1bd7a:	d1 40       	sbci	r29, 0x01	; 1
   1bd7c:	c5 01       	movw	r24, r10
   1bd7e:	0e 94 cf cc 	call	0x1999e	; 0x1999e <lif_writedirindex>
   1bd82:	89 2b       	or	r24, r25
   1bd84:	41 f4       	brne	.+16     	; 0x1bd96 <lif_add_lif_file+0x2d4>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bd86:	c5 01       	movw	r24, r10
   1bd88:	0e 94 e5 cb 	call	0x197ca	; 0x197ca <lif_close_volume>

    // Write directory record
    if( !lif_writedirindex(LIF,index))
    {
        lif_closedir(LIF);
        return(-1);
   1bd8c:	6f ef       	ldi	r22, 0xFF	; 255
   1bd8e:	7f ef       	ldi	r23, 0xFF	; 255
   1bd90:	8f ef       	ldi	r24, 0xFF	; 255
   1bd92:	9f ef       	ldi	r25, 0xFF	; 255
   1bd94:	15 c0       	rjmp	.+42     	; 0x1bdc0 <lif_add_lif_file+0x2fe>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bd96:	c5 01       	movw	r24, r10
   1bd98:	0e 94 e5 cb 	call	0x197ca	; 0x197ca <lif_close_volume>
    {
        lif_closedir(LIF);
        return(-1);
    }
    lif_closedir(LIF);
    printf("\tWrote: %8ld\n", bytes);
   1bd9c:	ff 92       	push	r15
   1bd9e:	ef 92       	push	r14
   1bda0:	df 92       	push	r13
   1bda2:	cf 92       	push	r12
   1bda4:	8f e0       	ldi	r24, 0x0F	; 15
   1bda6:	93 e3       	ldi	r25, 0x33	; 51
   1bda8:	1f 92       	push	r1
   1bdaa:	9f 93       	push	r25
   1bdac:	8f 93       	push	r24
   1bdae:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    return(bytes);
   1bdb2:	0f b6       	in	r0, 0x3f	; 63
   1bdb4:	f8 94       	cli
   1bdb6:	de bf       	out	0x3e, r29	; 62
   1bdb8:	0f be       	out	0x3f, r0	; 63
   1bdba:	cd bf       	out	0x3d, r28	; 61
   1bdbc:	b6 01       	movw	r22, r12
   1bdbe:	c7 01       	movw	r24, r14
}
   1bdc0:	cc 5e       	subi	r28, 0xEC	; 236
   1bdc2:	de 4f       	sbci	r29, 0xFE	; 254
   1bdc4:	0f b6       	in	r0, 0x3f	; 63
   1bdc6:	f8 94       	cli
   1bdc8:	de bf       	out	0x3e, r29	; 62
   1bdca:	0f be       	out	0x3f, r0	; 63
   1bdcc:	cd bf       	out	0x3d, r28	; 61
   1bdce:	df 91       	pop	r29
   1bdd0:	cf 91       	pop	r28
   1bdd2:	1f 91       	pop	r17
   1bdd4:	0f 91       	pop	r16
   1bdd6:	ff 90       	pop	r15
   1bdd8:	ef 90       	pop	r14
   1bdda:	df 90       	pop	r13
   1bddc:	cf 90       	pop	r12
   1bdde:	bf 90       	pop	r11
   1bde0:	af 90       	pop	r10
   1bde2:	9f 90       	pop	r9
   1bde4:	8f 90       	pop	r8
   1bde6:	6f 90       	pop	r6
   1bde8:	5f 90       	pop	r5
   1bdea:	4f 90       	pop	r4
   1bdec:	3f 90       	pop	r3
   1bdee:	2f 90       	pop	r2
   1bdf0:	08 95       	ret

0001bdf2 <lif_del_file>:
/// @param[in] lifimagename: LIF image name
/// @param[in] lifname: LIF file name
/// @return 1 if deleted, 0 if not found, -1 error
MEMSPACE
int lif_del_file(char *lifimagename, char *lifname)
{
   1bdf2:	ef 92       	push	r14
   1bdf4:	ff 92       	push	r15
   1bdf6:	0f 93       	push	r16
   1bdf8:	1f 93       	push	r17
   1bdfa:	cf 93       	push	r28
   1bdfc:	df 93       	push	r29
   1bdfe:	7c 01       	movw	r14, r24
   1be00:	8b 01       	movw	r16, r22
    lif_t *LIF;
    int index;

    if(!*lifimagename)
   1be02:	fc 01       	movw	r30, r24
   1be04:	80 81       	ld	r24, Z
   1be06:	81 11       	cpse	r24, r1
   1be08:	03 c0       	rjmp	.+6      	; 0x1be10 <lif_del_file+0x1e>
    {
        printf("lif_del_file: lifimagename is empty\n");
   1be0a:	8a ee       	ldi	r24, 0xEA	; 234
   1be0c:	92 e3       	ldi	r25, 0x32	; 50
   1be0e:	06 c0       	rjmp	.+12     	; 0x1be1c <lif_del_file+0x2a>
        return(-1);
    }
    if(!*lifname)
   1be10:	fb 01       	movw	r30, r22
   1be12:	80 81       	ld	r24, Z
   1be14:	81 11       	cpse	r24, r1
   1be16:	0b c0       	rjmp	.+22     	; 0x1be2e <lif_del_file+0x3c>
    {
        printf("lif_del_file: lifname is empty\n");
   1be18:	8a ec       	ldi	r24, 0xCA	; 202
   1be1a:	92 e3       	ldi	r25, 0x32	; 50
   1be1c:	1f 92       	push	r1
   1be1e:	9f 93       	push	r25
   1be20:	8f 93       	push	r24
   1be22:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
        return(-1);
   1be26:	0f 90       	pop	r0
   1be28:	0f 90       	pop	r0
   1be2a:	0f 90       	pop	r0
   1be2c:	74 c0       	rjmp	.+232    	; 0x1bf16 <lif_del_file+0x124>
    }
    if(debuglevel & 0x400)
   1be2e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1be32:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1be36:	92 ff       	sbrs	r25, 2
   1be38:	13 c0       	rjmp	.+38     	; 0x1be60 <lif_del_file+0x6e>
        printf("LIF image:[%s], LIF name:[%s]\n", 
   1be3a:	1f 93       	push	r17
   1be3c:	6f 93       	push	r22
   1be3e:	ff 92       	push	r15
   1be40:	ef 92       	push	r14
   1be42:	8b ea       	ldi	r24, 0xAB	; 171
   1be44:	92 e3       	ldi	r25, 0x32	; 50
   1be46:	1f 92       	push	r1
   1be48:	9f 93       	push	r25
   1be4a:	8f 93       	push	r24
   1be4c:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1be50:	8d b7       	in	r24, 0x3d	; 61
   1be52:	9e b7       	in	r25, 0x3e	; 62
   1be54:	07 96       	adiw	r24, 0x07	; 7
   1be56:	0f b6       	in	r0, 0x3f	; 63
   1be58:	f8 94       	cli
   1be5a:	9e bf       	out	0x3e, r25	; 62
   1be5c:	0f be       	out	0x3f, r0	; 63
   1be5e:	8d bf       	out	0x3d, r24	; 61
            lifimagename, lifname);


    LIF = lif_open_volume(lifimagename,"rb+");
   1be60:	60 e9       	ldi	r22, 0x90	; 144
   1be62:	78 e0       	ldi	r23, 0x08	; 8
   1be64:	c7 01       	movw	r24, r14
   1be66:	0e 94 dd d2 	call	0x1a5ba	; 0x1a5ba <lif_open_volume>
   1be6a:	ec 01       	movw	r28, r24
    if(LIF == NULL)
   1be6c:	00 97       	sbiw	r24, 0x00	; 0
   1be6e:	09 f4       	brne	.+2      	; 0x1be72 <lif_del_file+0x80>
   1be70:	52 c0       	rjmp	.+164    	; 0x1bf16 <lif_del_file+0x124>
        return(-1); 

    // Now find file record
    index = lif_find_file(LIF, lifname);
   1be72:	b8 01       	movw	r22, r16
   1be74:	0e 94 71 d5 	call	0x1aae2	; 0x1aae2 <lif_find_file>
    if(index == -1)
   1be78:	8f 3f       	cpi	r24, 0xFF	; 255
   1be7a:	ef ef       	ldi	r30, 0xFF	; 255
   1be7c:	9e 07       	cpc	r25, r30
   1be7e:	c9 f4       	brne	.+50     	; 0x1beb2 <lif_del_file+0xc0>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1be80:	ce 01       	movw	r24, r28
   1be82:	0e 94 e5 cb 	call	0x197ca	; 0x197ca <lif_close_volume>
    // Now find file record
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        lif_closedir(LIF);
        printf("LIF image:[%s] lif name:[%s] not found\n", lifimagename, lifname);
   1be86:	1f 93       	push	r17
   1be88:	0f 93       	push	r16
   1be8a:	ff 92       	push	r15
   1be8c:	ef 92       	push	r14
   1be8e:	83 e8       	ldi	r24, 0x83	; 131
   1be90:	92 e3       	ldi	r25, 0x32	; 50
   1be92:	1f 92       	push	r1
   1be94:	9f 93       	push	r25
   1be96:	8f 93       	push	r24
   1be98:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
        return(0);
   1be9c:	8d b7       	in	r24, 0x3d	; 61
   1be9e:	9e b7       	in	r25, 0x3e	; 62
   1bea0:	07 96       	adiw	r24, 0x07	; 7
   1bea2:	0f b6       	in	r0, 0x3f	; 63
   1bea4:	f8 94       	cli
   1bea6:	9e bf       	out	0x3e, r25	; 62
   1bea8:	0f be       	out	0x3f, r0	; 63
   1beaa:	8d bf       	out	0x3d, r24	; 61
   1beac:	80 e0       	ldi	r24, 0x00	; 0
   1beae:	90 e0       	ldi	r25, 0x00	; 0
   1beb0:	34 c0       	rjmp	.+104    	; 0x1bf1a <lif_del_file+0x128>
    }


// IF the next record is EOF then update EOF
    if(index >= LIF->EOFindex-1)
   1beb2:	2a a1       	ldd	r18, Y+34	; 0x22
   1beb4:	3b a1       	ldd	r19, Y+35	; 0x23
   1beb6:	21 50       	subi	r18, 0x01	; 1
   1beb8:	31 09       	sbc	r19, r1
   1beba:	fe 01       	movw	r30, r28
   1bebc:	e6 5a       	subi	r30, 0xA6	; 166
   1bebe:	ff 4f       	sbci	r31, 0xFF	; 255
   1bec0:	82 17       	cp	r24, r18
   1bec2:	93 07       	cpc	r25, r19
   1bec4:	2c f0       	brlt	.+10     	; 0x1bed0 <lif_del_file+0xde>
        LIF->DIR.FileType = 0xffff;
   1bec6:	2f ef       	ldi	r18, 0xFF	; 255
   1bec8:	3f ef       	ldi	r19, 0xFF	; 255
   1beca:	31 83       	std	Z+1, r19	; 0x01
   1becc:	20 83       	st	Z, r18
   1bece:	02 c0       	rjmp	.+4      	; 0x1bed4 <lif_del_file+0xe2>
    else
        LIF->DIR.FileType = 0;
   1bed0:	11 82       	std	Z+1, r1	; 0x01
   1bed2:	10 82       	st	Z, r1

    // re-Write directory record
    if( !lif_writedirindex(LIF,index) )
   1bed4:	bc 01       	movw	r22, r24
   1bed6:	ce 01       	movw	r24, r28
   1bed8:	0e 94 cf cc 	call	0x1999e	; 0x1999e <lif_writedirindex>
   1bedc:	89 2b       	or	r24, r25
   1bede:	21 f4       	brne	.+8      	; 0x1bee8 <lif_del_file+0xf6>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bee0:	ce 01       	movw	r24, r28
   1bee2:	0e 94 e5 cb 	call	0x197ca	; 0x197ca <lif_close_volume>
   1bee6:	17 c0       	rjmp	.+46     	; 0x1bf16 <lif_del_file+0x124>
    {
        lif_closedir(LIF);
        return(-1);
    }

    lif_updatefree(LIF);
   1bee8:	ce 01       	movw	r24, r28
   1beea:	0e 94 43 cd 	call	0x19a86	; 0x19a86 <lif_updatefree>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1beee:	ce 01       	movw	r24, r28
   1bef0:	0e 94 e5 cb 	call	0x197ca	; 0x197ca <lif_close_volume>
    }

    lif_updatefree(LIF);

    lif_closedir(LIF);
    printf("Deleted: %10s\n", lifname);
   1bef4:	1f 93       	push	r17
   1bef6:	0f 93       	push	r16
   1bef8:	84 e7       	ldi	r24, 0x74	; 116
   1befa:	92 e3       	ldi	r25, 0x32	; 50
   1befc:	1f 92       	push	r1
   1befe:	9f 93       	push	r25
   1bf00:	8f 93       	push	r24
   1bf02:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>

    return(1);
   1bf06:	0f 90       	pop	r0
   1bf08:	0f 90       	pop	r0
   1bf0a:	0f 90       	pop	r0
   1bf0c:	0f 90       	pop	r0
   1bf0e:	0f 90       	pop	r0
   1bf10:	81 e0       	ldi	r24, 0x01	; 1
   1bf12:	90 e0       	ldi	r25, 0x00	; 0
   1bf14:	02 c0       	rjmp	.+4      	; 0x1bf1a <lif_del_file+0x128>
            lifimagename, lifname);


    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return(-1); 
   1bf16:	8f ef       	ldi	r24, 0xFF	; 255
   1bf18:	9f ef       	ldi	r25, 0xFF	; 255

    lif_closedir(LIF);
    printf("Deleted: %10s\n", lifname);

    return(1);
}
   1bf1a:	cd b7       	in	r28, 0x3d	; 61
   1bf1c:	de b7       	in	r29, 0x3e	; 62
   1bf1e:	e6 e0       	ldi	r30, 0x06	; 6
   1bf20:	77 c6       	rjmp	.+3310   	; 0x1cc10 <__epilogue_restores__+0x18>

0001bf22 <lif_rename_file>:
/// @param[in] oldlifname: old LIF file name
/// @param[in] newlifname: new LIF file name
/// @return 1 if renamed, 0 if not found, -1 error
MEMSPACE
int lif_rename_file(char *lifimagename, char *oldlifname, char *newlifname)
{
   1bf22:	a0 e0       	ldi	r26, 0x00	; 0
   1bf24:	b0 e0       	ldi	r27, 0x00	; 0
   1bf26:	e6 e9       	ldi	r30, 0x96	; 150
   1bf28:	ff ed       	ldi	r31, 0xDF	; 223
   1bf2a:	52 c6       	rjmp	.+3236   	; 0x1cbd0 <__prologue_saves__+0x10>
   1bf2c:	6c 01       	movw	r12, r24
   1bf2e:	8b 01       	movw	r16, r22
   1bf30:	7a 01       	movw	r14, r20
    int index;
    lif_t *LIF;

    if(!*lifimagename)
   1bf32:	fc 01       	movw	r30, r24
   1bf34:	80 81       	ld	r24, Z
   1bf36:	81 11       	cpse	r24, r1
   1bf38:	03 c0       	rjmp	.+6      	; 0x1bf40 <lif_rename_file+0x1e>
    {
        printf("lif_rename_file: lifimagename is empty\n");
   1bf3a:	8c e4       	ldi	r24, 0x4C	; 76
   1bf3c:	92 e3       	ldi	r25, 0x32	; 50
   1bf3e:	06 c0       	rjmp	.+12     	; 0x1bf4c <lif_rename_file+0x2a>
        return(-1);
    }
    if(!*oldlifname)
   1bf40:	fb 01       	movw	r30, r22
   1bf42:	80 81       	ld	r24, Z
   1bf44:	81 11       	cpse	r24, r1
   1bf46:	0b c0       	rjmp	.+22     	; 0x1bf5e <lif_rename_file+0x3c>
    {
        printf("lif_rename_file: old lifname is empty\n");
   1bf48:	85 e2       	ldi	r24, 0x25	; 37
   1bf4a:	92 e3       	ldi	r25, 0x32	; 50
   1bf4c:	1f 92       	push	r1
   1bf4e:	9f 93       	push	r25
   1bf50:	8f 93       	push	r24
   1bf52:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
        return(-1);
   1bf56:	0f 90       	pop	r0
   1bf58:	0f 90       	pop	r0
   1bf5a:	0f 90       	pop	r0
   1bf5c:	62 c0       	rjmp	.+196    	; 0x1c022 <lif_rename_file+0x100>
    }
    if(!*newlifname)
   1bf5e:	fa 01       	movw	r30, r20
   1bf60:	80 81       	ld	r24, Z
   1bf62:	81 11       	cpse	r24, r1
   1bf64:	03 c0       	rjmp	.+6      	; 0x1bf6c <lif_rename_file+0x4a>
    {
        printf("lif_rename_file: new lifname is empty\n");
   1bf66:	8e ef       	ldi	r24, 0xFE	; 254
   1bf68:	91 e3       	ldi	r25, 0x31	; 49
   1bf6a:	f0 cf       	rjmp	.-32     	; 0x1bf4c <lif_rename_file+0x2a>
        return(-1);
    }

    if(!lif_checkname(newlifname))
   1bf6c:	ca 01       	movw	r24, r20
   1bf6e:	0e 94 59 c4 	call	0x188b2	; 0x188b2 <lif_checkname>
   1bf72:	89 2b       	or	r24, r25
   1bf74:	19 f4       	brne	.+6      	; 0x1bf7c <lif_rename_file+0x5a>
    {
        printf("lif_rename_file: new lifname contains bad characters\n");
   1bf76:	88 ec       	ldi	r24, 0xC8	; 200
   1bf78:	91 e3       	ldi	r25, 0x31	; 49
   1bf7a:	e8 cf       	rjmp	.-48     	; 0x1bf4c <lif_rename_file+0x2a>
        return(-1);

    }

    LIF = lif_open_volume(lifimagename,"rb+");
   1bf7c:	60 e9       	ldi	r22, 0x90	; 144
   1bf7e:	78 e0       	ldi	r23, 0x08	; 8
   1bf80:	c6 01       	movw	r24, r12
   1bf82:	0e 94 dd d2 	call	0x1a5ba	; 0x1a5ba <lif_open_volume>
   1bf86:	ec 01       	movw	r28, r24
    if(LIF == NULL)
   1bf88:	00 97       	sbiw	r24, 0x00	; 0
   1bf8a:	09 f4       	brne	.+2      	; 0x1bf8e <lif_rename_file+0x6c>
   1bf8c:	4a c0       	rjmp	.+148    	; 0x1c022 <lif_rename_file+0x100>
        return(-1); 

    // Now find file record
    index = lif_find_file(LIF, oldlifname);
   1bf8e:	b8 01       	movw	r22, r16
   1bf90:	0e 94 71 d5 	call	0x1aae2	; 0x1aae2 <lif_find_file>
   1bf94:	5c 01       	movw	r10, r24
    if(index == -1)
   1bf96:	01 96       	adiw	r24, 0x01	; 1
   1bf98:	c9 f4       	brne	.+50     	; 0x1bfcc <lif_rename_file+0xaa>
    {
        printf("lif_rename:[%s] lif name:[%s] not found\n", lifimagename, oldlifname);
   1bf9a:	1f 93       	push	r17
   1bf9c:	0f 93       	push	r16
   1bf9e:	df 92       	push	r13
   1bfa0:	cf 92       	push	r12
   1bfa2:	8f e9       	ldi	r24, 0x9F	; 159
   1bfa4:	91 e3       	ldi	r25, 0x31	; 49
   1bfa6:	1f 92       	push	r1
   1bfa8:	9f 93       	push	r25
   1bfaa:	8f 93       	push	r24
   1bfac:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bfb0:	ce 01       	movw	r24, r28
   1bfb2:	0e 94 e5 cb 	call	0x197ca	; 0x197ca <lif_close_volume>
    index = lif_find_file(LIF, oldlifname);
    if(index == -1)
    {
        printf("lif_rename:[%s] lif name:[%s] not found\n", lifimagename, oldlifname);
        lif_closedir(LIF);
        return(0);
   1bfb6:	8d b7       	in	r24, 0x3d	; 61
   1bfb8:	9e b7       	in	r25, 0x3e	; 62
   1bfba:	07 96       	adiw	r24, 0x07	; 7
   1bfbc:	0f b6       	in	r0, 0x3f	; 63
   1bfbe:	f8 94       	cli
   1bfc0:	9e bf       	out	0x3e, r25	; 62
   1bfc2:	0f be       	out	0x3f, r0	; 63
   1bfc4:	8d bf       	out	0x3d, r24	; 61
   1bfc6:	80 e0       	ldi	r24, 0x00	; 0
   1bfc8:	90 e0       	ldi	r25, 0x00	; 0
   1bfca:	2d c0       	rjmp	.+90     	; 0x1c026 <lif_rename_file+0x104>
    }
    lif_fixname(LIF->DIR.filename, newlifname, 10);
   1bfcc:	4a e0       	ldi	r20, 0x0A	; 10
   1bfce:	50 e0       	ldi	r21, 0x00	; 0
   1bfd0:	b7 01       	movw	r22, r14
   1bfd2:	ce 01       	movw	r24, r28
   1bfd4:	81 5b       	subi	r24, 0xB1	; 177
   1bfd6:	9f 4f       	sbci	r25, 0xFF	; 255
   1bfd8:	0e 94 93 c4 	call	0x18926	; 0x18926 <lif_fixname>

    // re-Write directory record
    if( !lif_writedirindex(LIF,index))
   1bfdc:	b5 01       	movw	r22, r10
   1bfde:	ce 01       	movw	r24, r28
   1bfe0:	0e 94 cf cc 	call	0x1999e	; 0x1999e <lif_writedirindex>
   1bfe4:	89 2b       	or	r24, r25
   1bfe6:	21 f4       	brne	.+8      	; 0x1bff0 <lif_rename_file+0xce>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bfe8:	ce 01       	movw	r24, r28
   1bfea:	0e 94 e5 cb 	call	0x197ca	; 0x197ca <lif_close_volume>
   1bfee:	19 c0       	rjmp	.+50     	; 0x1c022 <lif_rename_file+0x100>
    if( !lif_writedirindex(LIF,index))
    {
        lif_closedir(LIF);
        return(-1);
    }
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);
   1bff0:	ff 92       	push	r15
   1bff2:	ef 92       	push	r14
   1bff4:	1f 93       	push	r17
   1bff6:	0f 93       	push	r16
   1bff8:	88 e8       	ldi	r24, 0x88	; 136
   1bffa:	91 e3       	ldi	r25, 0x31	; 49
   1bffc:	1f 92       	push	r1
   1bffe:	9f 93       	push	r25
   1c000:	8f 93       	push	r24
   1c002:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c006:	ce 01       	movw	r24, r28
   1c008:	0e 94 e5 cb 	call	0x197ca	; 0x197ca <lif_close_volume>
    }
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);

    lif_closedir(LIF);

    return(1);
   1c00c:	ed b7       	in	r30, 0x3d	; 61
   1c00e:	fe b7       	in	r31, 0x3e	; 62
   1c010:	37 96       	adiw	r30, 0x07	; 7
   1c012:	0f b6       	in	r0, 0x3f	; 63
   1c014:	f8 94       	cli
   1c016:	fe bf       	out	0x3e, r31	; 62
   1c018:	0f be       	out	0x3f, r0	; 63
   1c01a:	ed bf       	out	0x3d, r30	; 61
   1c01c:	81 e0       	ldi	r24, 0x01	; 1
   1c01e:	90 e0       	ldi	r25, 0x00	; 0
   1c020:	02 c0       	rjmp	.+4      	; 0x1c026 <lif_rename_file+0x104>

    }

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return(-1); 
   1c022:	8f ef       	ldi	r24, 0xFF	; 255
   1c024:	9f ef       	ldi	r25, 0xFF	; 255
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);

    lif_closedir(LIF);

    return(1);
}
   1c026:	cd b7       	in	r28, 0x3d	; 61
   1c028:	de b7       	in	r29, 0x3e	; 62
   1c02a:	ea e0       	ldi	r30, 0x0A	; 10
   1c02c:	ed c5       	rjmp	.+3034   	; 0x1cc08 <__epilogue_restores__+0x10>

0001c02e <lif_create_image>:
/// @param[in] dirsectors: Number of LIF directory sectors
/// @param[in] sectors: total disk image size in sectors
///@return bytes writting to disk image
MEMSPACE
long lif_create_image(char *lifimagename, char *liflabel, uint32_t dirsectors, uint32_t sectors)
{
   1c02e:	4f 92       	push	r4
   1c030:	5f 92       	push	r5
   1c032:	6f 92       	push	r6
   1c034:	7f 92       	push	r7
   1c036:	af 92       	push	r10
   1c038:	bf 92       	push	r11
   1c03a:	cf 92       	push	r12
   1c03c:	df 92       	push	r13
   1c03e:	ef 92       	push	r14
   1c040:	ff 92       	push	r15
   1c042:	0f 93       	push	r16
   1c044:	1f 93       	push	r17
   1c046:	cf 93       	push	r28
   1c048:	df 93       	push	r29
   1c04a:	27 01       	movw	r4, r14
   1c04c:	38 01       	movw	r6, r16
    uint32_t dirstart,filestart,filesectors,end;
    lif_t *LIF;

    if(!*lifimagename)
   1c04e:	dc 01       	movw	r26, r24
   1c050:	ec 91       	ld	r30, X
   1c052:	e1 11       	cpse	r30, r1
   1c054:	03 c0       	rjmp	.+6      	; 0x1c05c <lif_create_image+0x2e>
    {
        printf("lif_create_image: lifimagename is empty\n");
   1c056:	8f e5       	ldi	r24, 0x5F	; 95
   1c058:	91 e3       	ldi	r25, 0x31	; 49
   1c05a:	16 c0       	rjmp	.+44     	; 0x1c088 <lif_create_image+0x5a>
        return(-1);
    }
    if(!*liflabel)
   1c05c:	db 01       	movw	r26, r22
   1c05e:	ec 91       	ld	r30, X
   1c060:	e1 11       	cpse	r30, r1
   1c062:	03 c0       	rjmp	.+6      	; 0x1c06a <lif_create_image+0x3c>
    {
        printf("lif_create_image: liflabel is empty\n");
   1c064:	8a e3       	ldi	r24, 0x3A	; 58
   1c066:	91 e3       	ldi	r25, 0x31	; 49
   1c068:	0f c0       	rjmp	.+30     	; 0x1c088 <lif_create_image+0x5a>
        return(-1);
    }
    if(!dirsectors)
   1c06a:	21 15       	cp	r18, r1
   1c06c:	31 05       	cpc	r19, r1
   1c06e:	41 05       	cpc	r20, r1
   1c070:	51 05       	cpc	r21, r1
   1c072:	19 f4       	brne	.+6      	; 0x1c07a <lif_create_image+0x4c>
    {
        printf("lif_create_image: dirsectors is 0\n");
   1c074:	87 e1       	ldi	r24, 0x17	; 23
   1c076:	91 e3       	ldi	r25, 0x31	; 49
   1c078:	07 c0       	rjmp	.+14     	; 0x1c088 <lif_create_image+0x5a>
        return(-1);
    }
    if(!sectors)
   1c07a:	e1 14       	cp	r14, r1
   1c07c:	f1 04       	cpc	r15, r1
   1c07e:	01 05       	cpc	r16, r1
   1c080:	11 05       	cpc	r17, r1
   1c082:	59 f4       	brne	.+22     	; 0x1c09a <lif_create_image+0x6c>
    {
        printf("lif_create_image: sectors is 0\n");
   1c084:	87 ef       	ldi	r24, 0xF7	; 247
   1c086:	90 e3       	ldi	r25, 0x30	; 48
   1c088:	1f 92       	push	r1
   1c08a:	9f 93       	push	r25
   1c08c:	8f 93       	push	r24
   1c08e:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
        return(-1);
   1c092:	0f 90       	pop	r0
   1c094:	0f 90       	pop	r0
   1c096:	0f 90       	pop	r0
   1c098:	30 c0       	rjmp	.+96     	; 0x1c0fa <lif_create_image+0xcc>
    dirstart = 2;
    filestart = dirstart + dirsectors;
    filesectors = sectors - filestart;
    end = filestart + filesectors;

    LIF = lif_create_volume(lifimagename, liflabel, dirstart, dirsectors, filesectors);
   1c09a:	67 01       	movw	r12, r14
   1c09c:	78 01       	movw	r14, r16
   1c09e:	b2 e0       	ldi	r27, 0x02	; 2
   1c0a0:	cb 1a       	sub	r12, r27
   1c0a2:	d1 08       	sbc	r13, r1
   1c0a4:	e1 08       	sbc	r14, r1
   1c0a6:	f1 08       	sbc	r15, r1
   1c0a8:	56 01       	movw	r10, r12
   1c0aa:	67 01       	movw	r12, r14
   1c0ac:	a2 1a       	sub	r10, r18
   1c0ae:	b3 0a       	sbc	r11, r19
   1c0b0:	c4 0a       	sbc	r12, r20
   1c0b2:	d5 0a       	sbc	r13, r21
   1c0b4:	79 01       	movw	r14, r18
   1c0b6:	8a 01       	movw	r16, r20
   1c0b8:	22 e0       	ldi	r18, 0x02	; 2
   1c0ba:	30 e0       	ldi	r19, 0x00	; 0
   1c0bc:	40 e0       	ldi	r20, 0x00	; 0
   1c0be:	50 e0       	ldi	r21, 0x00	; 0
   1c0c0:	0e 94 4b ce 	call	0x19c96	; 0x19c96 <lif_create_volume>
    if(LIF == NULL)
   1c0c4:	00 97       	sbiw	r24, 0x00	; 0
   1c0c6:	c9 f0       	breq	.+50     	; 0x1c0fa <lif_create_image+0xcc>
        return(-1);
    lif_close_volume(LIF);
   1c0c8:	0e 94 e5 cb 	call	0x197ca	; 0x197ca <lif_close_volume>

    printf("\tFormating: wrote %ld sectors\n", (long)end);
   1c0cc:	82 01       	movw	r16, r4
   1c0ce:	d6 2d       	mov	r29, r6
   1c0d0:	c7 2d       	mov	r28, r7
   1c0d2:	7f 92       	push	r7
   1c0d4:	6f 92       	push	r6
   1c0d6:	5f 92       	push	r5
   1c0d8:	4f 92       	push	r4
   1c0da:	88 ed       	ldi	r24, 0xD8	; 216
   1c0dc:	90 e3       	ldi	r25, 0x30	; 48
   1c0de:	1f 92       	push	r1
   1c0e0:	9f 93       	push	r25
   1c0e2:	8f 93       	push	r24
   1c0e4:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    return(end);
   1c0e8:	8d b7       	in	r24, 0x3d	; 61
   1c0ea:	9e b7       	in	r25, 0x3e	; 62
   1c0ec:	07 96       	adiw	r24, 0x07	; 7
   1c0ee:	0f b6       	in	r0, 0x3f	; 63
   1c0f0:	f8 94       	cli
   1c0f2:	9e bf       	out	0x3e, r25	; 62
   1c0f4:	0f be       	out	0x3f, r0	; 63
   1c0f6:	8d bf       	out	0x3d, r24	; 61
   1c0f8:	04 c0       	rjmp	.+8      	; 0x1c102 <lif_create_image+0xd4>
    filesectors = sectors - filestart;
    end = filestart + filesectors;

    LIF = lif_create_volume(lifimagename, liflabel, dirstart, dirsectors, filesectors);
    if(LIF == NULL)
        return(-1);
   1c0fa:	0f ef       	ldi	r16, 0xFF	; 255
   1c0fc:	1f ef       	ldi	r17, 0xFF	; 255
   1c0fe:	df ef       	ldi	r29, 0xFF	; 255
   1c100:	cf ef       	ldi	r28, 0xFF	; 255
    lif_close_volume(LIF);

    printf("\tFormating: wrote %ld sectors\n", (long)end);
    return(end);
}
   1c102:	b8 01       	movw	r22, r16
   1c104:	8d 2f       	mov	r24, r29
   1c106:	9c 2f       	mov	r25, r28
   1c108:	df 91       	pop	r29
   1c10a:	cf 91       	pop	r28
   1c10c:	1f 91       	pop	r17
   1c10e:	0f 91       	pop	r16
   1c110:	ff 90       	pop	r15
   1c112:	ef 90       	pop	r14
   1c114:	df 90       	pop	r13
   1c116:	cf 90       	pop	r12
   1c118:	bf 90       	pop	r11
   1c11a:	af 90       	pop	r10
   1c11c:	7f 90       	pop	r7
   1c11e:	6f 90       	pop	r6
   1c120:	5f 90       	pop	r5
   1c122:	4f 90       	pop	r4
   1c124:	08 95       	ret

0001c126 <lif_tests>:

/// @brief LIF user tests
/// @return  1 matched token, 0 if not
MEMSPACE
int lif_tests(int argc, char *argv[])
{
   1c126:	a0 e0       	ldi	r26, 0x00	; 0
   1c128:	b0 e0       	ldi	r27, 0x00	; 0
   1c12a:	e8 e9       	ldi	r30, 0x98	; 152
   1c12c:	f0 ee       	ldi	r31, 0xE0	; 224
   1c12e:	4e c5       	rjmp	.+2716   	; 0x1cbcc <__prologue_saves__+0xc>
    // NAME
    ind = 0;
	// Skip program name
    ptr = argv[ind++];

    if(!ptr )
   1c130:	fb 01       	movw	r30, r22
   1c132:	20 81       	ld	r18, Z
   1c134:	31 81       	ldd	r19, Z+1	; 0x01
   1c136:	23 2b       	or	r18, r19
   1c138:	59 f0       	breq	.+22     	; 0x1c150 <lif_tests+0x2a>
   1c13a:	6b 01       	movw	r12, r22
   1c13c:	4c 01       	movw	r8, r24
        return(0);

	// Next Argument after program name
    ptr = argv[ind++];
   1c13e:	fb 01       	movw	r30, r22
   1c140:	a2 80       	ldd	r10, Z+2	; 0x02
   1c142:	b3 80       	ldd	r11, Z+3	; 0x03



    if(argc <= 1 || !ptr || MATCH(ptr,"help") || MATCH(ptr,"-help") || MATCH(ptr,"-?") )
   1c144:	02 97       	sbiw	r24, 0x02	; 2
   1c146:	3c f4       	brge	.+14     	; 0x1c156 <lif_tests+0x30>
    {
        lif_help(1);
   1c148:	81 e0       	ldi	r24, 0x01	; 1
   1c14a:	90 e0       	ldi	r25, 0x00	; 0
   1c14c:	0e 94 50 c2 	call	0x184a0	; 0x184a0 <lif_help>
#ifdef TELEDISK
        td0_help(1);
#endif
        return(0);
   1c150:	80 e0       	ldi	r24, 0x00	; 0
   1c152:	90 e0       	ldi	r25, 0x00	; 0
   1c154:	56 c1       	rjmp	.+684    	; 0x1c402 <lif_tests+0x2dc>
	// Next Argument after program name
    ptr = argv[ind++];



    if(argc <= 1 || !ptr || MATCH(ptr,"help") || MATCH(ptr,"-help") || MATCH(ptr,"-?") )
   1c156:	a1 14       	cp	r10, r1
   1c158:	b1 04       	cpc	r11, r1
   1c15a:	b1 f3       	breq	.-20     	; 0x1c148 <lif_tests+0x22>
   1c15c:	67 ef       	ldi	r22, 0xF7	; 247
   1c15e:	75 e1       	ldi	r23, 0x15	; 21
   1c160:	c5 01       	movw	r24, r10
   1c162:	0e 94 30 33 	call	0x6660	; 0x6660 <MATCH>
   1c166:	89 2b       	or	r24, r25
   1c168:	79 f7       	brne	.-34     	; 0x1c148 <lif_tests+0x22>
   1c16a:	66 ef       	ldi	r22, 0xF6	; 246
   1c16c:	75 e1       	ldi	r23, 0x15	; 21
   1c16e:	c5 01       	movw	r24, r10
   1c170:	0e 94 30 33 	call	0x6660	; 0x6660 <MATCH>
   1c174:	89 2b       	or	r24, r25
   1c176:	41 f7       	brne	.-48     	; 0x1c148 <lif_tests+0x22>
   1c178:	6c ef       	ldi	r22, 0xFC	; 252
   1c17a:	75 e1       	ldi	r23, 0x15	; 21
   1c17c:	c5 01       	movw	r24, r10
   1c17e:	0e 94 30 33 	call	0x6660	; 0x6660 <MATCH>
   1c182:	89 2b       	or	r24, r25
   1c184:	09 f7       	brne	.-62     	; 0x1c148 <lif_tests+0x22>
        return(0);
    }

	// Turn one debugging
	// in the future we can add tests for specific messages
    if (MATCHARGS(ptr,"-d", (ind + 0) ,argc))
   1c186:	94 01       	movw	r18, r8
   1c188:	42 e0       	ldi	r20, 0x02	; 2
   1c18a:	50 e0       	ldi	r21, 0x00	; 0
   1c18c:	6f ef       	ldi	r22, 0xFF	; 255
   1c18e:	75 e1       	ldi	r23, 0x15	; 21
   1c190:	c5 01       	movw	r24, r10
   1c192:	0e 94 44 33 	call	0x6688	; 0x6688 <MATCHARGS>
   1c196:	89 2b       	or	r24, r25
   1c198:	61 f0       	breq	.+24     	; 0x1c1b2 <lif_tests+0x8c>
    {
		debuglevel = 0xffff;
   1c19a:	8f ef       	ldi	r24, 0xFF	; 255
   1c19c:	9f ef       	ldi	r25, 0xFF	; 255
   1c19e:	90 93 be 01 	sts	0x01BE, r25	; 0x8001be <debuglevel+0x1>
   1c1a2:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <debuglevel>
		ptr = argv[ind++];
   1c1a6:	f6 01       	movw	r30, r12
   1c1a8:	a4 80       	ldd	r10, Z+4	; 0x04
   1c1aa:	b5 80       	ldd	r11, Z+5	; 0x05
   1c1ac:	c3 e0       	ldi	r28, 0x03	; 3
   1c1ae:	d0 e0       	ldi	r29, 0x00	; 0
   1c1b0:	02 c0       	rjmp	.+4      	; 0x1c1b6 <lif_tests+0x90>

    if(!ptr )
        return(0);

	// Next Argument after program name
    ptr = argv[ind++];
   1c1b2:	c2 e0       	ldi	r28, 0x02	; 2
   1c1b4:	d0 e0       	ldi	r29, 0x00	; 0
    {
		debuglevel = 0xffff;
		ptr = argv[ind++];
    }

    if (MATCHARGS(ptr,"addbin", (ind + 3) ,argc))
   1c1b6:	7e 01       	movw	r14, r28
   1c1b8:	f3 e0       	ldi	r31, 0x03	; 3
   1c1ba:	ef 0e       	add	r14, r31
   1c1bc:	f1 1c       	adc	r15, r1
   1c1be:	94 01       	movw	r18, r8
   1c1c0:	a7 01       	movw	r20, r14
   1c1c2:	62 e0       	ldi	r22, 0x02	; 2
   1c1c4:	76 e1       	ldi	r23, 0x16	; 22
   1c1c6:	c5 01       	movw	r24, r10
   1c1c8:	0e 94 44 33 	call	0x6688	; 0x6688 <MATCHARGS>
   1c1cc:	89 2b       	or	r24, r25
   1c1ce:	81 f0       	breq	.+32     	; 0x1c1f0 <lif_tests+0xca>
    {
        lif_add_lif_file(argv[ind],argv[ind+1],argv[ind+2]);
   1c1d0:	22 96       	adiw	r28, 0x02	; 2
   1c1d2:	cc 0f       	add	r28, r28
   1c1d4:	dd 1f       	adc	r29, r29
   1c1d6:	cc 0d       	add	r28, r12
   1c1d8:	dd 1d       	adc	r29, r13
   1c1da:	48 81       	ld	r20, Y
   1c1dc:	59 81       	ldd	r21, Y+1	; 0x01
   1c1de:	fe 01       	movw	r30, r28
   1c1e0:	32 97       	sbiw	r30, 0x02	; 2
   1c1e2:	60 81       	ld	r22, Z
   1c1e4:	71 81       	ldd	r23, Z+1	; 0x01
   1c1e6:	24 97       	sbiw	r28, 0x04	; 4
   1c1e8:	88 81       	ld	r24, Y
   1c1ea:	99 81       	ldd	r25, Y+1	; 0x01
   1c1ec:	6a dc       	rcall	.-1836   	; 0x1bac2 <lif_add_lif_file>
   1c1ee:	07 c1       	rjmp	.+526    	; 0x1c3fe <lif_tests+0x2d8>

        return(1);
    }
    if (MATCHARGS(ptr,"add", (ind + 3) ,argc))
   1c1f0:	94 01       	movw	r18, r8
   1c1f2:	a7 01       	movw	r20, r14
   1c1f4:	69 e0       	ldi	r22, 0x09	; 9
   1c1f6:	76 e1       	ldi	r23, 0x16	; 22
   1c1f8:	c5 01       	movw	r24, r10
   1c1fa:	0e 94 44 33 	call	0x6688	; 0x6688 <MATCHARGS>
   1c1fe:	89 2b       	or	r24, r25
   1c200:	89 f0       	breq	.+34     	; 0x1c224 <lif_tests+0xfe>
    {
        lif_add_ascii_file_as_e010(argv[ind],argv[ind+1],argv[ind+2]);
   1c202:	22 96       	adiw	r28, 0x02	; 2
   1c204:	cc 0f       	add	r28, r28
   1c206:	dd 1f       	adc	r29, r29
   1c208:	cc 0d       	add	r28, r12
   1c20a:	dd 1d       	adc	r29, r13
   1c20c:	48 81       	ld	r20, Y
   1c20e:	59 81       	ldd	r21, Y+1	; 0x01
   1c210:	fe 01       	movw	r30, r28
   1c212:	32 97       	sbiw	r30, 0x02	; 2
   1c214:	60 81       	ld	r22, Z
   1c216:	71 81       	ldd	r23, Z+1	; 0x01
   1c218:	24 97       	sbiw	r28, 0x04	; 4
   1c21a:	88 81       	ld	r24, Y
   1c21c:	99 81       	ldd	r25, Y+1	; 0x01
   1c21e:	0e 94 f5 d7 	call	0x1afea	; 0x1afea <lif_add_ascii_file_as_e010>
   1c222:	ed c0       	rjmp	.+474    	; 0x1c3fe <lif_tests+0x2d8>
        return(1);
    }
    if (MATCHARGS(ptr,"createdisk", (ind + 3) ,argc))
   1c224:	94 01       	movw	r18, r8
   1c226:	a7 01       	movw	r20, r14
   1c228:	6d e0       	ldi	r22, 0x0D	; 13
   1c22a:	76 e1       	ldi	r23, 0x16	; 22
   1c22c:	c5 01       	movw	r24, r10
   1c22e:	0e 94 44 33 	call	0x6688	; 0x6688 <MATCHARGS>
   1c232:	89 2b       	or	r24, r25
   1c234:	09 f4       	brne	.+2      	; 0x1c238 <lif_tests+0x112>
   1c236:	42 c0       	rjmp	.+132    	; 0x1c2bc <lif_tests+0x196>
    {
		///@brief format LIF image
		long dir,sectors;
		char *name = argv[ind];
   1c238:	cc 0f       	add	r28, r28
   1c23a:	dd 1f       	adc	r29, r29
   1c23c:	cc 0d       	add	r28, r12
   1c23e:	dd 1d       	adc	r29, r13
   1c240:	c8 80       	ld	r12, Y
   1c242:	d9 80       	ldd	r13, Y+1	; 0x01
		char *label = argv[ind+1];
   1c244:	aa 80       	ldd	r10, Y+2	; 0x02
   1c246:	bb 80       	ldd	r11, Y+3	; 0x03
		char *model = argv[ind+2];
   1c248:	0c 80       	ldd	r0, Y+4	; 0x04
   1c24a:	dd 81       	ldd	r29, Y+5	; 0x05
   1c24c:	c0 2d       	mov	r28, r0
		if( MATCHI_LEN(model,"hp"))
   1c24e:	68 e1       	ldi	r22, 0x18	; 24
   1c250:	76 e1       	ldi	r23, 0x16	; 22
   1c252:	ce 01       	movw	r24, r28
   1c254:	0e 94 87 33 	call	0x670e	; 0x670e <MATCHI_LEN>
   1c258:	89 2b       	or	r24, r25
   1c25a:	09 f0       	breq	.+2      	; 0x1c25e <lif_tests+0x138>
			model +=2;
   1c25c:	22 96       	adiw	r28, 0x02	; 2
		if(hpdir_find_drive(model,0, 0))
   1c25e:	40 e0       	ldi	r20, 0x00	; 0
   1c260:	50 e0       	ldi	r21, 0x00	; 0
   1c262:	60 e0       	ldi	r22, 0x00	; 0
   1c264:	70 e0       	ldi	r23, 0x00	; 0
   1c266:	ce 01       	movw	r24, r28
   1c268:	0e 94 9a a6 	call	0x14d34	; 0x14d34 <hpdir_find_drive>
   1c26c:	89 2b       	or	r24, r25
   1c26e:	b9 f0       	breq	.+46     	; 0x1c29e <lif_tests+0x178>
		{
			dir = lif_dir_count(hpdir.BLOCKS);
   1c270:	60 91 a0 20 	lds	r22, 0x20A0	; 0x8020a0 <hpdir+0xac>
   1c274:	70 91 a1 20 	lds	r23, 0x20A1	; 0x8020a1 <hpdir+0xad>
   1c278:	80 91 a2 20 	lds	r24, 0x20A2	; 0x8020a2 <hpdir+0xae>
   1c27c:	90 91 a3 20 	lds	r25, 0x20A3	; 0x8020a3 <hpdir+0xaf>
   1c280:	0e 94 7d a6 	call	0x14cfa	; 0x14cfa <lif_dir_count>
   1c284:	9b 01       	movw	r18, r22
   1c286:	ac 01       	movw	r20, r24
			sectors = hpdir.BLOCKS;
			lif_create_image(name, label, dir, sectors);
   1c288:	e0 90 a0 20 	lds	r14, 0x20A0	; 0x8020a0 <hpdir+0xac>
   1c28c:	f0 90 a1 20 	lds	r15, 0x20A1	; 0x8020a1 <hpdir+0xad>
   1c290:	00 91 a2 20 	lds	r16, 0x20A2	; 0x8020a2 <hpdir+0xae>
   1c294:	10 91 a3 20 	lds	r17, 0x20A3	; 0x8020a3 <hpdir+0xaf>
   1c298:	b5 01       	movw	r22, r10
   1c29a:	c6 01       	movw	r24, r12
   1c29c:	36 c0       	rjmp	.+108    	; 0x1c30a <lif_tests+0x1e4>
			return(1);
		}
		printf("Disk: %s not found in hpdir.ini\n", model);
   1c29e:	df 93       	push	r29
   1c2a0:	cf 93       	push	r28
   1c2a2:	8b e0       	ldi	r24, 0x0B	; 11
   1c2a4:	93 e4       	ldi	r25, 0x43	; 67
   1c2a6:	1f 92       	push	r1
   1c2a8:	9f 93       	push	r25
   1c2aa:	8f 93       	push	r24
   1c2ac:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
        return(1);
   1c2b0:	0f 90       	pop	r0
   1c2b2:	0f 90       	pop	r0
   1c2b4:	0f 90       	pop	r0
   1c2b6:	0f 90       	pop	r0
   1c2b8:	0f 90       	pop	r0
   1c2ba:	a1 c0       	rjmp	.+322    	; 0x1c3fe <lif_tests+0x2d8>
    }
    if (MATCHARGS(ptr,"create", (ind + 4) ,argc))
   1c2bc:	94 01       	movw	r18, r8
   1c2be:	ae 01       	movw	r20, r28
   1c2c0:	4c 5f       	subi	r20, 0xFC	; 252
   1c2c2:	5f 4f       	sbci	r21, 0xFF	; 255
   1c2c4:	6b e1       	ldi	r22, 0x1B	; 27
   1c2c6:	76 e1       	ldi	r23, 0x16	; 22
   1c2c8:	c5 01       	movw	r24, r10
   1c2ca:	0e 94 44 33 	call	0x6688	; 0x6688 <MATCHARGS>
   1c2ce:	89 2b       	or	r24, r25
   1c2d0:	f1 f0       	breq	.+60     	; 0x1c30e <lif_tests+0x1e8>
    {
        ///@brief format LIF image
        lif_create_image(argv[ind],argv[ind+1], atol(argv[ind+2]), atol(argv[ind+3]) );
   1c2d2:	e7 01       	movw	r28, r14
   1c2d4:	cc 0f       	add	r28, r28
   1c2d6:	dd 1f       	adc	r29, r29
   1c2d8:	cc 0d       	add	r28, r12
   1c2da:	dd 1d       	adc	r29, r13
   1c2dc:	88 81       	ld	r24, Y
   1c2de:	99 81       	ldd	r25, Y+1	; 0x01
   1c2e0:	0e 94 fb 47 	call	0x8ff6	; 0x8ff6 <atol>
   1c2e4:	6b 01       	movw	r12, r22
   1c2e6:	7c 01       	movw	r14, r24
   1c2e8:	fe 01       	movw	r30, r28
   1c2ea:	32 97       	sbiw	r30, 0x02	; 2
   1c2ec:	80 81       	ld	r24, Z
   1c2ee:	91 81       	ldd	r25, Z+1	; 0x01
   1c2f0:	0e 94 fb 47 	call	0x8ff6	; 0x8ff6 <atol>
   1c2f4:	9b 01       	movw	r18, r22
   1c2f6:	ac 01       	movw	r20, r24
   1c2f8:	fe 01       	movw	r30, r28
   1c2fa:	34 97       	sbiw	r30, 0x04	; 4
   1c2fc:	60 81       	ld	r22, Z
   1c2fe:	71 81       	ldd	r23, Z+1	; 0x01
   1c300:	26 97       	sbiw	r28, 0x06	; 6
   1c302:	87 01       	movw	r16, r14
   1c304:	76 01       	movw	r14, r12
   1c306:	88 81       	ld	r24, Y
   1c308:	99 81       	ldd	r25, Y+1	; 0x01
   1c30a:	91 de       	rcall	.-734    	; 0x1c02e <lif_create_image>
   1c30c:	78 c0       	rjmp	.+240    	; 0x1c3fe <lif_tests+0x2d8>
        return(1);
    }
    if (MATCHARGS(ptr,"del", (ind + 2) ,argc))
   1c30e:	8e 01       	movw	r16, r28
   1c310:	0e 5f       	subi	r16, 0xFE	; 254
   1c312:	1f 4f       	sbci	r17, 0xFF	; 255
   1c314:	94 01       	movw	r18, r8
   1c316:	a8 01       	movw	r20, r16
   1c318:	62 e2       	ldi	r22, 0x22	; 34
   1c31a:	76 e1       	ldi	r23, 0x16	; 22
   1c31c:	c5 01       	movw	r24, r10
   1c31e:	0e 94 44 33 	call	0x6688	; 0x6688 <MATCHARGS>
   1c322:	ae 01       	movw	r20, r28
   1c324:	4f 5f       	subi	r20, 0xFF	; 255
   1c326:	5f 4f       	sbci	r21, 0xFF	; 255
   1c328:	89 2b       	or	r24, r25
   1c32a:	61 f0       	breq	.+24     	; 0x1c344 <lif_tests+0x21e>
    {
        lif_del_file(argv[ind],argv[ind+1]);
   1c32c:	ea 01       	movw	r28, r20
   1c32e:	cc 0f       	add	r28, r28
   1c330:	dd 1f       	adc	r29, r29
   1c332:	cc 0d       	add	r28, r12
   1c334:	dd 1d       	adc	r29, r13
   1c336:	68 81       	ld	r22, Y
   1c338:	79 81       	ldd	r23, Y+1	; 0x01
   1c33a:	22 97       	sbiw	r28, 0x02	; 2
   1c33c:	88 81       	ld	r24, Y
   1c33e:	99 81       	ldd	r25, Y+1	; 0x01
   1c340:	58 dd       	rcall	.-1360   	; 0x1bdf2 <lif_del_file>
   1c342:	5d c0       	rjmp	.+186    	; 0x1c3fe <lif_tests+0x2d8>
        return(1);
    }
    if (MATCHARGS(ptr,"dir", (ind + 1) ,argc))
   1c344:	94 01       	movw	r18, r8
   1c346:	6c e4       	ldi	r22, 0x4C	; 76
   1c348:	7b e0       	ldi	r23, 0x0B	; 11
   1c34a:	c5 01       	movw	r24, r10
   1c34c:	0e 94 44 33 	call	0x6688	; 0x6688 <MATCHARGS>
   1c350:	89 2b       	or	r24, r25
   1c352:	49 f0       	breq	.+18     	; 0x1c366 <lif_tests+0x240>
    {
        lif_dir(argv[ind]);
   1c354:	cc 0f       	add	r28, r28
   1c356:	dd 1f       	adc	r29, r29
   1c358:	cc 0d       	add	r28, r12
   1c35a:	dd 1d       	adc	r29, r13
   1c35c:	88 81       	ld	r24, Y
   1c35e:	99 81       	ldd	r25, Y+1	; 0x01
   1c360:	0e 94 dd d3 	call	0x1a7ba	; 0x1a7ba <lif_dir>
   1c364:	4c c0       	rjmp	.+152    	; 0x1c3fe <lif_tests+0x2d8>
        return(1);
    }
    if (MATCHARGS(ptr,"extractbin", (ind + 3) ,argc))
   1c366:	94 01       	movw	r18, r8
   1c368:	a7 01       	movw	r20, r14
   1c36a:	66 e2       	ldi	r22, 0x26	; 38
   1c36c:	76 e1       	ldi	r23, 0x16	; 22
   1c36e:	c5 01       	movw	r24, r10
   1c370:	0e 94 44 33 	call	0x6688	; 0x6688 <MATCHARGS>
   1c374:	89 2b       	or	r24, r25
   1c376:	81 f0       	breq	.+32     	; 0x1c398 <lif_tests+0x272>
    {

        lif_extract_lif_as_lif(argv[ind],argv[ind+1],argv[ind+2]);
   1c378:	e8 01       	movw	r28, r16
   1c37a:	cc 0f       	add	r28, r28
   1c37c:	dd 1f       	adc	r29, r29
   1c37e:	cc 0d       	add	r28, r12
   1c380:	dd 1d       	adc	r29, r13
   1c382:	48 81       	ld	r20, Y
   1c384:	59 81       	ldd	r21, Y+1	; 0x01
   1c386:	fe 01       	movw	r30, r28
   1c388:	32 97       	sbiw	r30, 0x02	; 2
   1c38a:	60 81       	ld	r22, Z
   1c38c:	71 81       	ldd	r23, Z+1	; 0x01
   1c38e:	24 97       	sbiw	r28, 0x04	; 4
   1c390:	88 81       	ld	r24, Y
   1c392:	99 81       	ldd	r25, Y+1	; 0x01
   1c394:	4f da       	rcall	.-2914   	; 0x1b834 <lif_extract_lif_as_lif>
   1c396:	33 c0       	rjmp	.+102    	; 0x1c3fe <lif_tests+0x2d8>
        return(1);
    }
    if (MATCHARGS(ptr,"extract", (ind + 3) ,argc))
   1c398:	94 01       	movw	r18, r8
   1c39a:	a7 01       	movw	r20, r14
   1c39c:	61 e3       	ldi	r22, 0x31	; 49
   1c39e:	76 e1       	ldi	r23, 0x16	; 22
   1c3a0:	c5 01       	movw	r24, r10
   1c3a2:	0e 94 44 33 	call	0x6688	; 0x6688 <MATCHARGS>
   1c3a6:	89 2b       	or	r24, r25
   1c3a8:	89 f0       	breq	.+34     	; 0x1c3cc <lif_tests+0x2a6>
    {

        lif_extract_e010_as_ascii(argv[ind],argv[ind+1],argv[ind+2]);
   1c3aa:	e8 01       	movw	r28, r16
   1c3ac:	cc 0f       	add	r28, r28
   1c3ae:	dd 1f       	adc	r29, r29
   1c3b0:	cc 0d       	add	r28, r12
   1c3b2:	dd 1d       	adc	r29, r13
   1c3b4:	48 81       	ld	r20, Y
   1c3b6:	59 81       	ldd	r21, Y+1	; 0x01
   1c3b8:	fe 01       	movw	r30, r28
   1c3ba:	32 97       	sbiw	r30, 0x02	; 2
   1c3bc:	60 81       	ld	r22, Z
   1c3be:	71 81       	ldd	r23, Z+1	; 0x01
   1c3c0:	24 97       	sbiw	r28, 0x04	; 4
   1c3c2:	88 81       	ld	r24, Y
   1c3c4:	99 81       	ldd	r25, Y+1	; 0x01
   1c3c6:	0e 94 2e d9 	call	0x1b25c	; 0x1b25c <lif_extract_e010_as_ascii>
   1c3ca:	19 c0       	rjmp	.+50     	; 0x1c3fe <lif_tests+0x2d8>
        return(1);
    }
    if (MATCHARGS(ptr,"rename", (ind + 3) ,argc))
   1c3cc:	94 01       	movw	r18, r8
   1c3ce:	a7 01       	movw	r20, r14
   1c3d0:	69 e5       	ldi	r22, 0x59	; 89
   1c3d2:	7b e0       	ldi	r23, 0x0B	; 11
   1c3d4:	c5 01       	movw	r24, r10
   1c3d6:	0e 94 44 33 	call	0x6688	; 0x6688 <MATCHARGS>
   1c3da:	89 2b       	or	r24, r25
   1c3dc:	09 f4       	brne	.+2      	; 0x1c3e0 <lif_tests+0x2ba>
   1c3de:	b8 ce       	rjmp	.-656    	; 0x1c150 <lif_tests+0x2a>
    {
        lif_rename_file(argv[ind],argv[ind+1],argv[ind+2]);
   1c3e0:	00 0f       	add	r16, r16
   1c3e2:	11 1f       	adc	r17, r17
   1c3e4:	e6 01       	movw	r28, r12
   1c3e6:	c0 0f       	add	r28, r16
   1c3e8:	d1 1f       	adc	r29, r17
   1c3ea:	48 81       	ld	r20, Y
   1c3ec:	59 81       	ldd	r21, Y+1	; 0x01
   1c3ee:	fe 01       	movw	r30, r28
   1c3f0:	32 97       	sbiw	r30, 0x02	; 2
   1c3f2:	60 81       	ld	r22, Z
   1c3f4:	71 81       	ldd	r23, Z+1	; 0x01
   1c3f6:	24 97       	sbiw	r28, 0x04	; 4
   1c3f8:	88 81       	ld	r24, Y
   1c3fa:	99 81       	ldd	r25, Y+1	; 0x01
        return(1);
   1c3fc:	92 dd       	rcall	.-1244   	; 0x1bf22 <lif_rename_file>
        td02lif(argc,argv);
        return(1);
    }
#endif
    return(0);
}
   1c3fe:	81 e0       	ldi	r24, 0x01	; 1
   1c400:	90 e0       	ldi	r25, 0x00	; 0
   1c402:	cd b7       	in	r28, 0x3d	; 61
   1c404:	de b7       	in	r29, 0x3e	; 62
   1c406:	ec e0       	ldi	r30, 0x0C	; 12
   1c408:	fd c3       	rjmp	.+2042   	; 0x1cc04 <__epilogue_restores__+0xc>

0001c40a <copyright>:

///@brief Display Copyright
///@return void
void copyright()
{
    printf("Stand alone version of LIF utilities for linux\n");
   1c40a:	8d e6       	ldi	r24, 0x6D	; 109
   1c40c:	98 e4       	ldi	r25, 0x48	; 72
   1c40e:	1f 92       	push	r1
   1c410:	9f 93       	push	r25
   1c412:	8f 93       	push	r24
   1c414:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    printf("HP85 Disk and Device Emulator\n");
   1c418:	8e e4       	ldi	r24, 0x4E	; 78
   1c41a:	98 e4       	ldi	r25, 0x48	; 72
   1c41c:	1f 92       	push	r1
   1c41e:	9f 93       	push	r25
   1c420:	8f 93       	push	r24
   1c422:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    printf(" (c) 2014-2020 by Mike Gore\n");
   1c426:	81 e3       	ldi	r24, 0x31	; 49
   1c428:	98 e4       	ldi	r25, 0x48	; 72
   1c42a:	1f 92       	push	r1
   1c42c:	9f 93       	push	r25
   1c42e:	8f 93       	push	r24
   1c430:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    printf(" GNU version 3\n");
   1c434:	81 e2       	ldi	r24, 0x21	; 33
   1c436:	98 e4       	ldi	r25, 0x48	; 72
   1c438:	1f 92       	push	r1
   1c43a:	9f 93       	push	r25
   1c43c:	8f 93       	push	r24
   1c43e:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    printf("-> https://github.com/magore/hp85disk\n");
   1c442:	8a ef       	ldi	r24, 0xFA	; 250
   1c444:	97 e4       	ldi	r25, 0x47	; 71
   1c446:	1f 92       	push	r1
   1c448:	9f 93       	push	r25
   1c44a:	8f 93       	push	r24
   1c44c:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    printf("   GIT last pushed:   %s\n", GIT_VERSION);
   1c450:	89 e3       	ldi	r24, 0x39	; 57
   1c452:	96 e1       	ldi	r25, 0x16	; 22
   1c454:	9f 93       	push	r25
   1c456:	8f 93       	push	r24
   1c458:	80 ee       	ldi	r24, 0xE0	; 224
   1c45a:	97 e4       	ldi	r25, 0x47	; 71
   1c45c:	1f 92       	push	r1
   1c45e:	9f 93       	push	r25
   1c460:	8f 93       	push	r24
   1c462:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    printf("   Last updated file: %s\n", LOCAL_MOD);
   1c466:	8d e5       	ldi	r24, 0x5D	; 93
   1c468:	96 e1       	ldi	r25, 0x16	; 22
   1c46a:	9f 93       	push	r25
   1c46c:	8f 93       	push	r24
   1c46e:	86 ec       	ldi	r24, 0xC6	; 198
   1c470:	97 e4       	ldi	r25, 0x47	; 71
   1c472:	1f 92       	push	r1
   1c474:	9f 93       	push	r25
   1c476:	8f 93       	push	r24
   1c478:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
    printf("\n");
   1c47c:	84 ec       	ldi	r24, 0xC4	; 196
   1c47e:	97 e4       	ldi	r25, 0x47	; 71
   1c480:	1f 92       	push	r1
   1c482:	9f 93       	push	r25
   1c484:	8f 93       	push	r24
   1c486:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
}
   1c48a:	8d b7       	in	r24, 0x3d	; 61
   1c48c:	9e b7       	in	r25, 0x3e	; 62
   1c48e:	4c 96       	adiw	r24, 0x1c	; 28
   1c490:	0f b6       	in	r0, 0x3f	; 63
   1c492:	f8 94       	cli
   1c494:	9e bf       	out	0x3e, r25	; 62
   1c496:	0f be       	out	0x3f, r0	; 63
   1c498:	8d bf       	out	0x3d, r24	; 61
   1c49a:	08 95       	ret

0001c49c <delay_tests>:
///
/// This included measurement of avr-libc delays
/// @return  void
void delay_tests()
{
    printf("System delays\n");
   1c49c:	85 eb       	ldi	r24, 0xB5	; 181
   1c49e:	97 e4       	ldi	r25, 0x47	; 71
   1c4a0:	1f 92       	push	r1
   1c4a2:	9f 93       	push	r25
   1c4a4:	8f 93       	push	r24
   1c4a6:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>

    clock_elapsed_begin();
   1c4aa:	0e 94 88 36 	call	0x6d10	; 0x6d10 <clock_elapsed_begin>
    clock_elapsed_end("elapsed timer overhead");
   1c4ae:	81 e8       	ldi	r24, 0x81	; 129
   1c4b0:	96 e1       	ldi	r25, 0x16	; 22
   1c4b2:	0e 94 8e 36 	call	0x6d1c	; 0x6d1c <clock_elapsed_end>

    clock_elapsed_begin();
   1c4b6:	0e 94 88 36 	call	0x6d10	; 0x6d10 <clock_elapsed_begin>
   1c4ba:	83 ef       	ldi	r24, 0xF3	; 243
   1c4bc:	91 e0       	ldi	r25, 0x01	; 1
   1c4be:	01 97       	sbiw	r24, 0x01	; 1
   1c4c0:	f1 f7       	brne	.-4      	; 0x1c4be <delay_tests+0x22>
   1c4c2:	00 c0       	rjmp	.+0      	; 0x1c4c4 <delay_tests+0x28>
   1c4c4:	00 00       	nop
    _delay_us(100);
    clock_elapsed_end("_delay_us(100)");
   1c4c6:	88 e9       	ldi	r24, 0x98	; 152
   1c4c8:	96 e1       	ldi	r25, 0x16	; 22
   1c4ca:	0e 94 8e 36 	call	0x6d1c	; 0x6d1c <clock_elapsed_end>

    clock_elapsed_begin();
   1c4ce:	0e 94 88 36 	call	0x6d10	; 0x6d10 <clock_elapsed_begin>
   1c4d2:	83 ec       	ldi	r24, 0xC3	; 195
   1c4d4:	99 e0       	ldi	r25, 0x09	; 9
   1c4d6:	01 97       	sbiw	r24, 0x01	; 1
   1c4d8:	f1 f7       	brne	.-4      	; 0x1c4d6 <delay_tests+0x3a>
   1c4da:	00 c0       	rjmp	.+0      	; 0x1c4dc <delay_tests+0x40>
   1c4dc:	00 00       	nop
    _delay_us(500);
    clock_elapsed_end("_delay_us(500)");
   1c4de:	87 ea       	ldi	r24, 0xA7	; 167
   1c4e0:	96 e1       	ldi	r25, 0x16	; 22
   1c4e2:	0e 94 8e 36 	call	0x6d1c	; 0x6d1c <clock_elapsed_end>

    printf("My delays\n");
   1c4e6:	8a ea       	ldi	r24, 0xAA	; 170
   1c4e8:	97 e4       	ldi	r25, 0x47	; 71
   1c4ea:	1f 92       	push	r1
   1c4ec:	9f 93       	push	r25
   1c4ee:	8f 93       	push	r24
   1c4f0:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>

    clock_elapsed_begin();
   1c4f4:	0e 94 88 36 	call	0x6d10	; 0x6d10 <clock_elapsed_begin>
    delayus(100U);
   1c4f8:	64 e6       	ldi	r22, 0x64	; 100
   1c4fa:	70 e0       	ldi	r23, 0x00	; 0
   1c4fc:	80 e0       	ldi	r24, 0x00	; 0
   1c4fe:	90 e0       	ldi	r25, 0x00	; 0
   1c500:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <delayus>
    clock_elapsed_end("delayus(100)");
   1c504:	86 eb       	ldi	r24, 0xB6	; 182
   1c506:	96 e1       	ldi	r25, 0x16	; 22
   1c508:	0e 94 8e 36 	call	0x6d1c	; 0x6d1c <clock_elapsed_end>

    clock_elapsed_begin();
   1c50c:	0e 94 88 36 	call	0x6d10	; 0x6d10 <clock_elapsed_begin>
    delayus(500U);
   1c510:	64 ef       	ldi	r22, 0xF4	; 244
   1c512:	71 e0       	ldi	r23, 0x01	; 1
   1c514:	80 e0       	ldi	r24, 0x00	; 0
   1c516:	90 e0       	ldi	r25, 0x00	; 0
   1c518:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <delayus>
    clock_elapsed_end("delayus(500)");
   1c51c:	83 ec       	ldi	r24, 0xC3	; 195
   1c51e:	96 e1       	ldi	r25, 0x16	; 22
   1c520:	0e 94 8e 36 	call	0x6d1c	; 0x6d1c <clock_elapsed_end>

    clock_elapsed_begin();
   1c524:	0e 94 88 36 	call	0x6d10	; 0x6d10 <clock_elapsed_begin>
    delayus(1100);
   1c528:	6c e4       	ldi	r22, 0x4C	; 76
   1c52a:	74 e0       	ldi	r23, 0x04	; 4
   1c52c:	80 e0       	ldi	r24, 0x00	; 0
   1c52e:	90 e0       	ldi	r25, 0x00	; 0
   1c530:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <delayus>
    clock_elapsed_end("delayus(1100)");
   1c534:	80 ed       	ldi	r24, 0xD0	; 208
   1c536:	96 e1       	ldi	r25, 0x16	; 22
   1c538:	0e 94 8e 36 	call	0x6d1c	; 0x6d1c <clock_elapsed_end>

    clock_elapsed_begin();
   1c53c:	0e 94 88 36 	call	0x6d10	; 0x6d10 <clock_elapsed_begin>
    delayms(1000);
   1c540:	68 ee       	ldi	r22, 0xE8	; 232
   1c542:	73 e0       	ldi	r23, 0x03	; 3
   1c544:	80 e0       	ldi	r24, 0x00	; 0
   1c546:	90 e0       	ldi	r25, 0x00	; 0
   1c548:	0e 94 26 2a 	call	0x544c	; 0x544c <delayms>
    clock_elapsed_end("delayms(1100)");
   1c54c:	8e ed       	ldi	r24, 0xDE	; 222
   1c54e:	96 e1       	ldi	r25, 0x16	; 22
   1c550:	0e 94 8e 36 	call	0x6d1c	; 0x6d1c <clock_elapsed_end>
}
   1c554:	0f 90       	pop	r0
   1c556:	0f 90       	pop	r0
   1c558:	0f 90       	pop	r0
   1c55a:	0f 90       	pop	r0
   1c55c:	0f 90       	pop	r0
   1c55e:	0f 90       	pop	r0
   1c560:	08 95       	ret

0001c562 <help>:
   1c562:	53 df       	rcall	.-346    	; 0x1c40a <copyright>
   1c564:	80 e0       	ldi	r24, 0x00	; 0
   1c566:	90 e0       	ldi	r25, 0x00	; 0
   1c568:	0e 94 46 74 	call	0xe88c	; 0xe88c <fatfs_help>
   1c56c:	80 e0       	ldi	r24, 0x00	; 0
   1c56e:	90 e0       	ldi	r25, 0x00	; 0
   1c570:	0e 94 6c 7f 	call	0xfed8	; 0xfed8 <posix_help>
   1c574:	80 e0       	ldi	r24, 0x00	; 0
   1c576:	90 e0       	ldi	r25, 0x00	; 0
   1c578:	0e 94 50 c2 	call	0x184a0	; 0x184a0 <lif_help>
   1c57c:	80 e0       	ldi	r24, 0x00	; 0
   1c57e:	90 e0       	ldi	r25, 0x00	; 0
   1c580:	0e 94 ac 91 	call	0x12358	; 0x12358 <gpib_help>
   1c584:	86 e8       	ldi	r24, 0x86	; 134
   1c586:	97 e4       	ldi	r25, 0x47	; 71
   1c588:	1f 92       	push	r1
   1c58a:	9f 93       	push	r25
   1c58c:	8f 93       	push	r24
   1c58e:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1c592:	0f 90       	pop	r0
   1c594:	0f 90       	pop	r0
   1c596:	0f 90       	pop	r0
   1c598:	08 95       	ret

0001c59a <task>:
   1c59a:	a4 ee       	ldi	r26, 0xE4	; 228
   1c59c:	b0 e0       	ldi	r27, 0x00	; 0
   1c59e:	e2 ed       	ldi	r30, 0xD2	; 210
   1c5a0:	f2 ee       	ldi	r31, 0xE2	; 226
   1c5a2:	1a c3       	rjmp	.+1588   	; 0x1cbd8 <__prologue_saves__+0x18>
   1c5a4:	81 11       	cpse	r24, r1
   1c5a6:	0e 94 4a 91 	call	0x12294	; 0x12294 <gpib_task>
   1c5aa:	80 e0       	ldi	r24, 0x00	; 0
   1c5ac:	0e 94 99 2b 	call	0x5732	; 0x5732 <uart_rx_count>
   1c5b0:	89 2b       	or	r24, r25
   1c5b2:	09 f4       	brne	.+2      	; 0x1c5b6 <task+0x1c>
   1c5b4:	a0 c0       	rjmp	.+320    	; 0x1c6f6 <task+0x15c>
   1c5b6:	83 e8       	ldi	r24, 0x83	; 131
   1c5b8:	97 e4       	ldi	r25, 0x47	; 71
   1c5ba:	1f 92       	push	r1
   1c5bc:	9f 93       	push	r25
   1c5be:	8f 93       	push	r24
   1c5c0:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1c5c4:	40 91 bb 1b 	lds	r20, 0x1BBB	; 0x801bbb <__iob>
   1c5c8:	50 91 bc 1b 	lds	r21, 0x1BBC	; 0x801bbc <__iob+0x1>
   1c5cc:	6e e7       	ldi	r22, 0x7E	; 126
   1c5ce:	70 e0       	ldi	r23, 0x00	; 0
   1c5d0:	ce 01       	movw	r24, r28
   1c5d2:	01 96       	adiw	r24, 0x01	; 1
   1c5d4:	0e 94 71 77 	call	0xeee2	; 0xeee2 <fgets>
   1c5d8:	42 e3       	ldi	r20, 0x32	; 50
   1c5da:	50 e0       	ldi	r21, 0x00	; 0
   1c5dc:	be 01       	movw	r22, r28
   1c5de:	6f 57       	subi	r22, 0x7F	; 127
   1c5e0:	7f 4f       	sbci	r23, 0xFF	; 255
   1c5e2:	ce 01       	movw	r24, r28
   1c5e4:	01 96       	adiw	r24, 0x01	; 1
   1c5e6:	0e 94 a1 33 	call	0x6742	; 0x6742 <split_args>
   1c5ea:	8c 01       	movw	r16, r24
   1c5ec:	cf 57       	subi	r28, 0x7F	; 127
   1c5ee:	df 4f       	sbci	r29, 0xFF	; 255
   1c5f0:	e8 80       	ld	r14, Y
   1c5f2:	f9 80       	ldd	r15, Y+1	; 0x01
   1c5f4:	c1 58       	subi	r28, 0x81	; 129
   1c5f6:	d0 40       	sbci	r29, 0x00	; 0
   1c5f8:	0f 90       	pop	r0
   1c5fa:	0f 90       	pop	r0
   1c5fc:	0f 90       	pop	r0
   1c5fe:	e1 14       	cp	r14, r1
   1c600:	f1 04       	cpc	r15, r1
   1c602:	09 f4       	brne	.+2      	; 0x1c606 <task+0x6c>
   1c604:	78 c0       	rjmp	.+240    	; 0x1c6f6 <task+0x15c>
   1c606:	9c 01       	movw	r18, r24
   1c608:	41 e0       	ldi	r20, 0x01	; 1
   1c60a:	50 e0       	ldi	r21, 0x00	; 0
   1c60c:	6c ee       	ldi	r22, 0xEC	; 236
   1c60e:	76 e1       	ldi	r23, 0x16	; 22
   1c610:	c7 01       	movw	r24, r14
   1c612:	0e 94 44 33 	call	0x6688	; 0x6688 <MATCHARGS>
   1c616:	89 2b       	or	r24, r25
   1c618:	11 f0       	breq	.+4      	; 0x1c61e <task+0x84>
   1c61a:	40 df       	rcall	.-384    	; 0x1c49c <delay_tests>
   1c61c:	6c c0       	rjmp	.+216    	; 0x1c6f6 <task+0x15c>
   1c61e:	98 01       	movw	r18, r16
   1c620:	41 e0       	ldi	r20, 0x01	; 1
   1c622:	50 e0       	ldi	r21, 0x00	; 0
   1c624:	68 ef       	ldi	r22, 0xF8	; 248
   1c626:	76 e1       	ldi	r23, 0x16	; 22
   1c628:	c7 01       	movw	r24, r14
   1c62a:	0e 94 44 33 	call	0x6688	; 0x6688 <MATCHARGS>
   1c62e:	89 2b       	or	r24, r25
   1c630:	61 f4       	brne	.+24     	; 0x1c64a <task+0xb0>
   1c632:	98 01       	movw	r18, r16
   1c634:	41 e0       	ldi	r20, 0x01	; 1
   1c636:	50 e0       	ldi	r21, 0x00	; 0
   1c638:	6d ef       	ldi	r22, 0xFD	; 253
   1c63a:	76 e1       	ldi	r23, 0x16	; 22
   1c63c:	c7 01       	movw	r24, r14
   1c63e:	0e 94 44 33 	call	0x6688	; 0x6688 <MATCHARGS>
   1c642:	89 2b       	or	r24, r25
   1c644:	29 f0       	breq	.+10     	; 0x1c650 <task+0xb6>
   1c646:	0e 94 97 3c 	call	0x792e	; 0x792e <setdate>
   1c64a:	0e 94 b0 3e 	call	0x7d60	; 0x7d60 <display_clock>
   1c64e:	53 c0       	rjmp	.+166    	; 0x1c6f6 <task+0x15c>
   1c650:	98 01       	movw	r18, r16
   1c652:	41 e0       	ldi	r20, 0x01	; 1
   1c654:	50 e0       	ldi	r21, 0x00	; 0
   1c656:	65 e0       	ldi	r22, 0x05	; 5
   1c658:	77 e1       	ldi	r23, 0x17	; 23
   1c65a:	c7 01       	movw	r24, r14
   1c65c:	0e 94 44 33 	call	0x6688	; 0x6688 <MATCHARGS>
   1c660:	89 2b       	or	r24, r25
   1c662:	19 f0       	breq	.+6      	; 0x1c66a <task+0xd0>
   1c664:	0e 94 03 29 	call	0x5206	; 0x5206 <PrintFree>
   1c668:	46 c0       	rjmp	.+140    	; 0x1c6f6 <task+0x15c>
   1c66a:	98 01       	movw	r18, r16
   1c66c:	41 e0       	ldi	r20, 0x01	; 1
   1c66e:	50 e0       	ldi	r21, 0x00	; 0
   1c670:	67 ef       	ldi	r22, 0xF7	; 247
   1c672:	75 e1       	ldi	r23, 0x15	; 21
   1c674:	c7 01       	movw	r24, r14
   1c676:	0e 94 44 33 	call	0x6688	; 0x6688 <MATCHARGS>
   1c67a:	89 2b       	or	r24, r25
   1c67c:	11 f0       	breq	.+4      	; 0x1c682 <task+0xe8>
   1c67e:	71 df       	rcall	.-286    	; 0x1c562 <help>
   1c680:	3a c0       	rjmp	.+116    	; 0x1c6f6 <task+0x15c>
   1c682:	98 01       	movw	r18, r16
   1c684:	41 e0       	ldi	r20, 0x01	; 1
   1c686:	50 e0       	ldi	r21, 0x00	; 0
   1c688:	6d ef       	ldi	r22, 0xFD	; 253
   1c68a:	75 e1       	ldi	r23, 0x15	; 21
   1c68c:	c7 01       	movw	r24, r14
   1c68e:	0e 94 44 33 	call	0x6688	; 0x6688 <MATCHARGS>
   1c692:	89 2b       	or	r24, r25
   1c694:	a1 f7       	brne	.-24     	; 0x1c67e <task+0xe4>
   1c696:	be 01       	movw	r22, r28
   1c698:	6f 57       	subi	r22, 0x7F	; 127
   1c69a:	7f 4f       	sbci	r23, 0xFF	; 255
   1c69c:	c8 01       	movw	r24, r16
   1c69e:	0e 94 c8 91 	call	0x12390	; 0x12390 <gpib_tests>
   1c6a2:	89 2b       	or	r24, r25
   1c6a4:	19 f0       	breq	.+6      	; 0x1c6ac <task+0x112>
   1c6a6:	0e 94 16 8d 	call	0x11a2c	; 0x11a2c <gpib_init_devices>
   1c6aa:	25 c0       	rjmp	.+74     	; 0x1c6f6 <task+0x15c>
   1c6ac:	be 01       	movw	r22, r28
   1c6ae:	6f 57       	subi	r22, 0x7F	; 127
   1c6b0:	7f 4f       	sbci	r23, 0xFF	; 255
   1c6b2:	c8 01       	movw	r24, r16
   1c6b4:	0e 94 d7 82 	call	0x105ae	; 0x105ae <posix_tests>
   1c6b8:	89 2b       	or	r24, r25
   1c6ba:	e9 f4       	brne	.+58     	; 0x1c6f6 <task+0x15c>
   1c6bc:	be 01       	movw	r22, r28
   1c6be:	6f 57       	subi	r22, 0x7F	; 127
   1c6c0:	7f 4f       	sbci	r23, 0xFF	; 255
   1c6c2:	c8 01       	movw	r24, r16
   1c6c4:	0e 94 61 75 	call	0xeac2	; 0xeac2 <fatfs_tests>
   1c6c8:	89 2b       	or	r24, r25
   1c6ca:	a9 f4       	brne	.+42     	; 0x1c6f6 <task+0x15c>
   1c6cc:	be 01       	movw	r22, r28
   1c6ce:	6f 57       	subi	r22, 0x7F	; 127
   1c6d0:	7f 4f       	sbci	r23, 0xFF	; 255
   1c6d2:	c8 01       	movw	r24, r16
   1c6d4:	28 dd       	rcall	.-1456   	; 0x1c126 <lif_tests>
   1c6d6:	89 2b       	or	r24, r25
   1c6d8:	71 f4       	brne	.+28     	; 0x1c6f6 <task+0x15c>
   1c6da:	ff 92       	push	r15
   1c6dc:	ef 92       	push	r14
   1c6de:	87 e7       	ldi	r24, 0x77	; 119
   1c6e0:	97 e4       	ldi	r25, 0x47	; 71
   1c6e2:	1f 92       	push	r1
   1c6e4:	9f 93       	push	r25
   1c6e6:	8f 93       	push	r24
   1c6e8:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1c6ec:	0f 90       	pop	r0
   1c6ee:	0f 90       	pop	r0
   1c6f0:	0f 90       	pop	r0
   1c6f2:	0f 90       	pop	r0
   1c6f4:	0f 90       	pop	r0
   1c6f6:	cc 51       	subi	r28, 0x1C	; 28
   1c6f8:	df 4f       	sbci	r29, 0xFF	; 255
   1c6fa:	e6 e0       	ldi	r30, 0x06	; 6
   1c6fc:	89 c2       	rjmp	.+1298   	; 0x1cc10 <__epilogue_restores__+0x18>

0001c6fe <main>:
   1c6fe:	a8 e0       	ldi	r26, 0x08	; 8
   1c700:	b0 e0       	ldi	r27, 0x00	; 0
   1c702:	e4 e8       	ldi	r30, 0x84	; 132
   1c704:	f3 ee       	ldi	r31, 0xE3	; 227
   1c706:	67 c2       	rjmp	.+1230   	; 0x1cbd6 <__prologue_saves__+0x16>
   1c708:	0e 94 41 86 	call	0x10c82	; 0x10c82 <gpib_bus_init>
   1c70c:	40 e0       	ldi	r20, 0x00	; 0
   1c70e:	52 ec       	ldi	r21, 0xC2	; 194
   1c710:	61 e0       	ldi	r22, 0x01	; 1
   1c712:	70 e0       	ldi	r23, 0x00	; 0
   1c714:	80 e0       	ldi	r24, 0x00	; 0
   1c716:	0e 94 08 2b 	call	0x5610	; 0x5610 <uart_init>
   1c71a:	06 2f       	mov	r16, r22
   1c71c:	f7 2e       	mov	r15, r23
   1c71e:	e8 2e       	mov	r14, r24
   1c720:	d9 2e       	mov	r13, r25
   1c722:	68 ec       	ldi	r22, 0xC8	; 200
   1c724:	70 e0       	ldi	r23, 0x00	; 0
   1c726:	80 e0       	ldi	r24, 0x00	; 0
   1c728:	90 e0       	ldi	r25, 0x00	; 0
   1c72a:	0e 94 26 2a 	call	0x544c	; 0x544c <delayms>
   1c72e:	0e 94 30 32 	call	0x6460	; 0x6460 <sep>
   1c732:	80 e7       	ldi	r24, 0x70	; 112
   1c734:	97 e4       	ldi	r25, 0x47	; 71
   1c736:	1f 92       	push	r1
   1c738:	9f 93       	push	r25
   1c73a:	8f 93       	push	r24
   1c73c:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1c740:	11 e0       	ldi	r17, 0x01	; 1
   1c742:	1f 93       	push	r17
   1c744:	81 e3       	ldi	r24, 0x31	; 49
   1c746:	8f 93       	push	r24
   1c748:	8d e2       	ldi	r24, 0x2D	; 45
   1c74a:	8f 93       	push	r24
   1c74c:	1f 92       	push	r1
   1c74e:	8f e5       	ldi	r24, 0x5F	; 95
   1c750:	97 e4       	ldi	r25, 0x47	; 71
   1c752:	1f 92       	push	r1
   1c754:	9f 93       	push	r25
   1c756:	8f 93       	push	r24
   1c758:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1c75c:	df 92       	push	r13
   1c75e:	ef 92       	push	r14
   1c760:	ff 92       	push	r15
   1c762:	0f 93       	push	r16
   1c764:	1f 92       	push	r1
   1c766:	1f 93       	push	r17
   1c768:	82 ec       	ldi	r24, 0xC2	; 194
   1c76a:	8f 93       	push	r24
   1c76c:	1f 92       	push	r1
   1c76e:	88 e3       	ldi	r24, 0x38	; 56
   1c770:	97 e4       	ldi	r25, 0x47	; 71
   1c772:	1f 92       	push	r1
   1c774:	9f 93       	push	r25
   1c776:	8f 93       	push	r24
   1c778:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1c77c:	0e 94 13 37 	call	0x6e26	; 0x6e26 <init_timers>
   1c780:	0e 94 30 32 	call	0x6460	; 0x6460 <sep>
   1c784:	89 e1       	ldi	r24, 0x19	; 25
   1c786:	97 e4       	ldi	r25, 0x47	; 71
   1c788:	1f 92       	push	r1
   1c78a:	9f 93       	push	r25
   1c78c:	8f 93       	push	r24
   1c78e:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1c792:	8c ef       	ldi	r24, 0xFC	; 252
   1c794:	96 e4       	ldi	r25, 0x46	; 70
   1c796:	1f 92       	push	r1
   1c798:	9f 93       	push	r25
   1c79a:	8f 93       	push	r24
   1c79c:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1c7a0:	8c ee       	ldi	r24, 0xEC	; 236
   1c7a2:	96 e4       	ldi	r25, 0x46	; 70
   1c7a4:	1f 92       	push	r1
   1c7a6:	9f 93       	push	r25
   1c7a8:	8f 93       	push	r24
   1c7aa:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1c7ae:	85 ec       	ldi	r24, 0xC5	; 197
   1c7b0:	96 e4       	ldi	r25, 0x46	; 70
   1c7b2:	1f 92       	push	r1
   1c7b4:	9f 93       	push	r25
   1c7b6:	8f 93       	push	r24
   1c7b8:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1c7bc:	0f b6       	in	r0, 0x3f	; 63
   1c7be:	f8 94       	cli
   1c7c0:	de bf       	out	0x3e, r29	; 62
   1c7c2:	0f be       	out	0x3f, r0	; 63
   1c7c4:	cd bf       	out	0x3d, r28	; 61
   1c7c6:	89 e3       	ldi	r24, 0x39	; 57
   1c7c8:	96 e1       	ldi	r25, 0x16	; 22
   1c7ca:	9f 93       	push	r25
   1c7cc:	8f 93       	push	r24
   1c7ce:	8b ea       	ldi	r24, 0xAB	; 171
   1c7d0:	96 e4       	ldi	r25, 0x46	; 70
   1c7d2:	1f 92       	push	r1
   1c7d4:	9f 93       	push	r25
   1c7d6:	8f 93       	push	r24
   1c7d8:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1c7dc:	8d e5       	ldi	r24, 0x5D	; 93
   1c7de:	96 e1       	ldi	r25, 0x16	; 22
   1c7e0:	9f 93       	push	r25
   1c7e2:	8f 93       	push	r24
   1c7e4:	81 e9       	ldi	r24, 0x91	; 145
   1c7e6:	96 e4       	ldi	r25, 0x46	; 70
   1c7e8:	1f 92       	push	r1
   1c7ea:	9f 93       	push	r25
   1c7ec:	8f 93       	push	r24
   1c7ee:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1c7f2:	0e 94 30 32 	call	0x6460	; 0x6460 <sep>
   1c7f6:	0e 94 03 29 	call	0x5206	; 0x5206 <PrintFree>
   1c7fa:	0e 94 30 32 	call	0x6460	; 0x6460 <sep>
   1c7fe:	68 ec       	ldi	r22, 0xC8	; 200
   1c800:	70 e0       	ldi	r23, 0x00	; 0
   1c802:	80 e0       	ldi	r24, 0x00	; 0
   1c804:	90 e0       	ldi	r25, 0x00	; 0
   1c806:	0e 94 26 2a 	call	0x544c	; 0x544c <delayms>
   1c80a:	8b e7       	ldi	r24, 0x7B	; 123
   1c80c:	96 e4       	ldi	r25, 0x46	; 70
   1c80e:	1f 92       	push	r1
   1c810:	9f 93       	push	r25
   1c812:	8f 93       	push	r24
   1c814:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1c818:	4b e0       	ldi	r20, 0x0B	; 11
   1c81a:	50 e0       	ldi	r21, 0x00	; 0
   1c81c:	60 e2       	ldi	r22, 0x20	; 32
   1c81e:	71 ea       	ldi	r23, 0xA1	; 161
   1c820:	87 e0       	ldi	r24, 0x07	; 7
   1c822:	90 e0       	ldi	r25, 0x00	; 0
   1c824:	0e 94 7f 28 	call	0x50fe	; 0x50fe <spi_init>
   1c828:	85 e6       	ldi	r24, 0x65	; 101
   1c82a:	96 e4       	ldi	r25, 0x46	; 70
   1c82c:	1f 92       	push	r1
   1c82e:	9f 93       	push	r25
   1c830:	8f 93       	push	r24
   1c832:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1c836:	61 e1       	ldi	r22, 0x11	; 17
   1c838:	81 e0       	ldi	r24, 0x01	; 1
   1c83a:	0e 94 2d 2d 	call	0x5a5a	; 0x5a5a <TWI_Init>
   1c83e:	0e 94 30 32 	call	0x6460	; 0x6460 <sep>
   1c842:	83 e5       	ldi	r24, 0x53	; 83
   1c844:	96 e4       	ldi	r25, 0x46	; 70
   1c846:	1f 92       	push	r1
   1c848:	9f 93       	push	r25
   1c84a:	8f 93       	push	r24
   1c84c:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1c850:	0e 94 d0 36 	call	0x6da0	; 0x6da0 <clock_clear>
   1c854:	84 e4       	ldi	r24, 0x44	; 68
   1c856:	96 e4       	ldi	r25, 0x46	; 70
   1c858:	1f 92       	push	r1
   1c85a:	9f 93       	push	r25
   1c85c:	8f 93       	push	r24
   1c85e:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1c862:	be 01       	movw	r22, r28
   1c864:	6f 5f       	subi	r22, 0xFF	; 255
   1c866:	7f 4f       	sbci	r23, 0xFF	; 255
   1c868:	80 e0       	ldi	r24, 0x00	; 0
   1c86a:	90 e0       	ldi	r25, 0x00	; 0
   1c86c:	0e 94 6b 37 	call	0x6ed6	; 0x6ed6 <clock_getres>
   1c870:	88 85       	ldd	r24, Y+8	; 0x08
   1c872:	8f 93       	push	r24
   1c874:	8f 81       	ldd	r24, Y+7	; 0x07
   1c876:	8f 93       	push	r24
   1c878:	8e 81       	ldd	r24, Y+6	; 0x06
   1c87a:	8f 93       	push	r24
   1c87c:	8d 81       	ldd	r24, Y+5	; 0x05
   1c87e:	8f 93       	push	r24
   1c880:	87 e2       	ldi	r24, 0x27	; 39
   1c882:	96 e4       	ldi	r25, 0x46	; 70
   1c884:	1f 92       	push	r1
   1c886:	9f 93       	push	r25
   1c888:	8f 93       	push	r24
   1c88a:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1c88e:	8c e2       	ldi	r24, 0x2C	; 44
   1c890:	91 e0       	ldi	r25, 0x01	; 1
   1c892:	0e 94 39 3e 	call	0x7c72	; 0x7c72 <initialize_clock>
   1c896:	0e 94 b0 3e 	call	0x7d60	; 0x7d60 <display_clock>
   1c89a:	0e 94 30 32 	call	0x6460	; 0x6460 <sep>
   1c89e:	89 e0       	ldi	r24, 0x09	; 9
   1c8a0:	96 e4       	ldi	r25, 0x46	; 70
   1c8a2:	1f 92       	push	r1
   1c8a4:	9f 93       	push	r25
   1c8a6:	8f 93       	push	r24
   1c8a8:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1c8ac:	0f b6       	in	r0, 0x3f	; 63
   1c8ae:	f8 94       	cli
   1c8b0:	de bf       	out	0x3e, r29	; 62
   1c8b2:	0f be       	out	0x3f, r0	; 63
   1c8b4:	cd bf       	out	0x3d, r28	; 61
   1c8b6:	84 ee       	ldi	r24, 0xE4	; 228
   1c8b8:	0e 94 59 31 	call	0x62b2	; 0x62b2 <LCD_init>
   1c8bc:	89 2b       	or	r24, r25
   1c8be:	e9 f0       	breq	.+58     	; 0x1c8fa <main+0x1fc>
   1c8c0:	60 e0       	ldi	r22, 0x00	; 0
   1c8c2:	80 e0       	ldi	r24, 0x00	; 0
   1c8c4:	0e 94 23 31 	call	0x6246	; 0x6246 <LCD_pos>
   1c8c8:	89 e0       	ldi	r24, 0x09	; 9
   1c8ca:	97 e1       	ldi	r25, 0x17	; 23
   1c8cc:	9f 93       	push	r25
   1c8ce:	8f 93       	push	r24
   1c8d0:	0e 94 12 32 	call	0x6424	; 0x6424 <lcd_printf>
   1c8d4:	88 e1       	ldi	r24, 0x18	; 24
   1c8d6:	97 e1       	ldi	r25, 0x17	; 23
   1c8d8:	9f 93       	push	r25
   1c8da:	8f 93       	push	r24
   1c8dc:	0e 94 12 32 	call	0x6424	; 0x6424 <lcd_printf>
   1c8e0:	8c ee       	ldi	r24, 0xEC	; 236
   1c8e2:	95 e4       	ldi	r25, 0x45	; 69
   1c8e4:	1f 92       	push	r1
   1c8e6:	9f 93       	push	r25
   1c8e8:	8f 93       	push	r24
   1c8ea:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1c8ee:	0f b6       	in	r0, 0x3f	; 63
   1c8f0:	f8 94       	cli
   1c8f2:	de bf       	out	0x3e, r29	; 62
   1c8f4:	0f be       	out	0x3f, r0	; 63
   1c8f6:	cd bf       	out	0x3d, r28	; 61
   1c8f8:	0a c0       	rjmp	.+20     	; 0x1c90e <main+0x210>
   1c8fa:	82 ed       	ldi	r24, 0xD2	; 210
   1c8fc:	95 e4       	ldi	r25, 0x45	; 69
   1c8fe:	1f 92       	push	r1
   1c900:	9f 93       	push	r25
   1c902:	8f 93       	push	r24
   1c904:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1c908:	0f 90       	pop	r0
   1c90a:	0f 90       	pop	r0
   1c90c:	0f 90       	pop	r0
   1c90e:	0e 94 30 32 	call	0x6460	; 0x6460 <sep>
   1c912:	8a eb       	ldi	r24, 0xBA	; 186
   1c914:	95 e4       	ldi	r25, 0x45	; 69
   1c916:	1f 92       	push	r1
   1c918:	9f 93       	push	r25
   1c91a:	8f 93       	push	r24
   1c91c:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1c920:	81 e0       	ldi	r24, 0x01	; 1
   1c922:	90 e0       	ldi	r25, 0x00	; 0
   1c924:	0e 94 a1 70 	call	0xe142	; 0xe142 <mmc_init>
   1c928:	89 ea       	ldi	r24, 0xA9	; 169
   1c92a:	95 e4       	ldi	r25, 0x45	; 69
   1c92c:	1f 92       	push	r1
   1c92e:	9f 93       	push	r25
   1c930:	8f 93       	push	r24
   1c932:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1c936:	0e 94 30 32 	call	0x6460	; 0x6460 <sep>
   1c93a:	0e 94 41 86 	call	0x10c82	; 0x10c82 <gpib_bus_init>
   1c93e:	83 e9       	ldi	r24, 0x93	; 147
   1c940:	95 e4       	ldi	r25, 0x45	; 69
   1c942:	1f 92       	push	r1
   1c944:	9f 93       	push	r25
   1c946:	8f 93       	push	r24
   1c948:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1c94c:	0e 94 59 c0 	call	0x180b2	; 0x180b2 <printer_init>
   1c950:	8e e7       	ldi	r24, 0x7E	; 126
   1c952:	95 e4       	ldi	r25, 0x45	; 69
   1c954:	1f 92       	push	r1
   1c956:	9f 93       	push	r25
   1c958:	8f 93       	push	r24
   1c95a:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1c95e:	0e 94 30 32 	call	0x6460	; 0x6460 <sep>
   1c962:	8c e6       	ldi	r24, 0x6C	; 108
   1c964:	95 e4       	ldi	r25, 0x45	; 69
   1c966:	1f 92       	push	r1
   1c968:	9f 93       	push	r25
   1c96a:	8f 93       	push	r24
   1c96c:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1c970:	0e 94 51 84 	call	0x108a2	; 0x108a2 <gpib_timer_init>
   1c974:	84 e5       	ldi	r24, 0x54	; 84
   1c976:	95 e4       	ldi	r25, 0x45	; 69
   1c978:	1f 92       	push	r1
   1c97a:	9f 93       	push	r25
   1c97c:	8f 93       	push	r24
   1c97e:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1c982:	0e 94 5a 8c 	call	0x118b4	; 0x118b4 <gpib_file_init>
   1c986:	8f e3       	ldi	r24, 0x3F	; 63
   1c988:	95 e4       	ldi	r25, 0x45	; 69
   1c98a:	1f 92       	push	r1
   1c98c:	9f 93       	push	r25
   1c98e:	8f 93       	push	r24
   1c990:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1c994:	0e 94 69 86 	call	0x10cd2	; 0x10cd2 <gpib_state_init>
   1c998:	89 e2       	ldi	r24, 0x29	; 41
   1c99a:	95 e4       	ldi	r25, 0x45	; 69
   1c99c:	1f 92       	push	r1
   1c99e:	9f 93       	push	r25
   1c9a0:	8f 93       	push	r24
   1c9a2:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1c9a6:	0e 94 30 32 	call	0x6460	; 0x6460 <sep>
   1c9aa:	0e 94 f4 a1 	call	0x143e8	; 0x143e8 <display_Config>
   1c9ae:	0e 94 d9 a4 	call	0x149b2	; 0x149b2 <format_drives>
   1c9b2:	0e 94 30 32 	call	0x6460	; 0x6460 <sep>
   1c9b6:	0e 94 f9 a0 	call	0x141f2	; 0x141f2 <display_Addresses>
   1c9ba:	0e 94 30 32 	call	0x6460	; 0x6460 <sep>
   1c9be:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <debuglevel+0x1>
   1c9c2:	8f 93       	push	r24
   1c9c4:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1c9c8:	8f 93       	push	r24
   1c9ca:	83 e1       	ldi	r24, 0x13	; 19
   1c9cc:	95 e4       	ldi	r25, 0x45	; 69
   1c9ce:	1f 92       	push	r1
   1c9d0:	9f 93       	push	r25
   1c9d2:	8f 93       	push	r24
   1c9d4:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1c9d8:	60 e0       	ldi	r22, 0x00	; 0
   1c9da:	80 e0       	ldi	r24, 0x00	; 0
   1c9dc:	0e 94 23 31 	call	0x6246	; 0x6246 <LCD_pos>
   1c9e0:	83 e0       	ldi	r24, 0x03	; 3
   1c9e2:	0e 94 02 93 	call	0x12604	; 0x12604 <count_drive_types>
   1c9e6:	9f 93       	push	r25
   1c9e8:	8f 93       	push	r24
   1c9ea:	86 e2       	ldi	r24, 0x26	; 38
   1c9ec:	97 e1       	ldi	r25, 0x17	; 23
   1c9ee:	9f 93       	push	r25
   1c9f0:	8f 93       	push	r24
   1c9f2:	0e 94 12 32 	call	0x6424	; 0x6424 <lcd_printf>
   1c9f6:	0f b6       	in	r0, 0x3f	; 63
   1c9f8:	f8 94       	cli
   1c9fa:	de bf       	out	0x3e, r29	; 62
   1c9fc:	0f be       	out	0x3f, r0	; 63
   1c9fe:	cd bf       	out	0x3d, r28	; 61
   1ca00:	81 e0       	ldi	r24, 0x01	; 1
   1ca02:	0e 94 02 93 	call	0x12604	; 0x12604 <count_drive_types>
   1ca06:	9f 93       	push	r25
   1ca08:	8f 93       	push	r24
   1ca0a:	86 e3       	ldi	r24, 0x36	; 54
   1ca0c:	97 e1       	ldi	r25, 0x17	; 23
   1ca0e:	9f 93       	push	r25
   1ca10:	8f 93       	push	r24
   1ca12:	0e 94 12 32 	call	0x6424	; 0x6424 <lcd_printf>
   1ca16:	0e 94 30 32 	call	0x6460	; 0x6460 <sep>
   1ca1a:	8f ef       	ldi	r24, 0xFF	; 255
   1ca1c:	94 e4       	ldi	r25, 0x44	; 68
   1ca1e:	1f 92       	push	r1
   1ca20:	9f 93       	push	r25
   1ca22:	8f 93       	push	r24
   1ca24:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <printf_P>
   1ca28:	0f b6       	in	r0, 0x3f	; 63
   1ca2a:	f8 94       	cli
   1ca2c:	de bf       	out	0x3e, r29	; 62
   1ca2e:	0f be       	out	0x3f, r0	; 63
   1ca30:	cd bf       	out	0x3d, r28	; 61
   1ca32:	81 e0       	ldi	r24, 0x01	; 1
   1ca34:	b2 dd       	rcall	.-1180   	; 0x1c59a <task>
   1ca36:	fd cf       	rjmp	.-6      	; 0x1ca32 <main+0x334>

0001ca38 <__mulsi3>:
   1ca38:	db 01       	movw	r26, r22
   1ca3a:	8f 93       	push	r24
   1ca3c:	9f 93       	push	r25
   1ca3e:	a0 d0       	rcall	.+320    	; 0x1cb80 <__muluhisi3>
   1ca40:	bf 91       	pop	r27
   1ca42:	af 91       	pop	r26
   1ca44:	a2 9f       	mul	r26, r18
   1ca46:	80 0d       	add	r24, r0
   1ca48:	91 1d       	adc	r25, r1
   1ca4a:	a3 9f       	mul	r26, r19
   1ca4c:	90 0d       	add	r25, r0
   1ca4e:	b2 9f       	mul	r27, r18
   1ca50:	90 0d       	add	r25, r0
   1ca52:	11 24       	eor	r1, r1
   1ca54:	08 95       	ret

0001ca56 <__udivmodqi4>:
   1ca56:	99 1b       	sub	r25, r25
   1ca58:	79 e0       	ldi	r23, 0x09	; 9
   1ca5a:	04 c0       	rjmp	.+8      	; 0x1ca64 <__udivmodqi4_ep>

0001ca5c <__udivmodqi4_loop>:
   1ca5c:	99 1f       	adc	r25, r25
   1ca5e:	96 17       	cp	r25, r22
   1ca60:	08 f0       	brcs	.+2      	; 0x1ca64 <__udivmodqi4_ep>
   1ca62:	96 1b       	sub	r25, r22

0001ca64 <__udivmodqi4_ep>:
   1ca64:	88 1f       	adc	r24, r24
   1ca66:	7a 95       	dec	r23
   1ca68:	c9 f7       	brne	.-14     	; 0x1ca5c <__udivmodqi4_loop>
   1ca6a:	80 95       	com	r24
   1ca6c:	08 95       	ret

0001ca6e <__udivmodhi4>:
   1ca6e:	aa 1b       	sub	r26, r26
   1ca70:	bb 1b       	sub	r27, r27
   1ca72:	51 e1       	ldi	r21, 0x11	; 17
   1ca74:	07 c0       	rjmp	.+14     	; 0x1ca84 <__udivmodhi4_ep>

0001ca76 <__udivmodhi4_loop>:
   1ca76:	aa 1f       	adc	r26, r26
   1ca78:	bb 1f       	adc	r27, r27
   1ca7a:	a6 17       	cp	r26, r22
   1ca7c:	b7 07       	cpc	r27, r23
   1ca7e:	10 f0       	brcs	.+4      	; 0x1ca84 <__udivmodhi4_ep>
   1ca80:	a6 1b       	sub	r26, r22
   1ca82:	b7 0b       	sbc	r27, r23

0001ca84 <__udivmodhi4_ep>:
   1ca84:	88 1f       	adc	r24, r24
   1ca86:	99 1f       	adc	r25, r25
   1ca88:	5a 95       	dec	r21
   1ca8a:	a9 f7       	brne	.-22     	; 0x1ca76 <__udivmodhi4_loop>
   1ca8c:	80 95       	com	r24
   1ca8e:	90 95       	com	r25
   1ca90:	bc 01       	movw	r22, r24
   1ca92:	cd 01       	movw	r24, r26
   1ca94:	08 95       	ret

0001ca96 <__divmodhi4>:
   1ca96:	97 fb       	bst	r25, 7
   1ca98:	07 2e       	mov	r0, r23
   1ca9a:	16 f4       	brtc	.+4      	; 0x1caa0 <__divmodhi4+0xa>
   1ca9c:	00 94       	com	r0
   1ca9e:	06 d0       	rcall	.+12     	; 0x1caac <__divmodhi4_neg1>
   1caa0:	77 fd       	sbrc	r23, 7
   1caa2:	08 d0       	rcall	.+16     	; 0x1cab4 <__divmodhi4_neg2>
   1caa4:	e4 df       	rcall	.-56     	; 0x1ca6e <__udivmodhi4>
   1caa6:	07 fc       	sbrc	r0, 7
   1caa8:	05 d0       	rcall	.+10     	; 0x1cab4 <__divmodhi4_neg2>
   1caaa:	3e f4       	brtc	.+14     	; 0x1caba <__divmodhi4_exit>

0001caac <__divmodhi4_neg1>:
   1caac:	90 95       	com	r25
   1caae:	81 95       	neg	r24
   1cab0:	9f 4f       	sbci	r25, 0xFF	; 255
   1cab2:	08 95       	ret

0001cab4 <__divmodhi4_neg2>:
   1cab4:	70 95       	com	r23
   1cab6:	61 95       	neg	r22
   1cab8:	7f 4f       	sbci	r23, 0xFF	; 255

0001caba <__divmodhi4_exit>:
   1caba:	08 95       	ret

0001cabc <__udivmodsi4>:
   1cabc:	a1 e2       	ldi	r26, 0x21	; 33
   1cabe:	1a 2e       	mov	r1, r26
   1cac0:	aa 1b       	sub	r26, r26
   1cac2:	bb 1b       	sub	r27, r27
   1cac4:	fd 01       	movw	r30, r26
   1cac6:	0d c0       	rjmp	.+26     	; 0x1cae2 <__udivmodsi4_ep>

0001cac8 <__udivmodsi4_loop>:
   1cac8:	aa 1f       	adc	r26, r26
   1caca:	bb 1f       	adc	r27, r27
   1cacc:	ee 1f       	adc	r30, r30
   1cace:	ff 1f       	adc	r31, r31
   1cad0:	a2 17       	cp	r26, r18
   1cad2:	b3 07       	cpc	r27, r19
   1cad4:	e4 07       	cpc	r30, r20
   1cad6:	f5 07       	cpc	r31, r21
   1cad8:	20 f0       	brcs	.+8      	; 0x1cae2 <__udivmodsi4_ep>
   1cada:	a2 1b       	sub	r26, r18
   1cadc:	b3 0b       	sbc	r27, r19
   1cade:	e4 0b       	sbc	r30, r20
   1cae0:	f5 0b       	sbc	r31, r21

0001cae2 <__udivmodsi4_ep>:
   1cae2:	66 1f       	adc	r22, r22
   1cae4:	77 1f       	adc	r23, r23
   1cae6:	88 1f       	adc	r24, r24
   1cae8:	99 1f       	adc	r25, r25
   1caea:	1a 94       	dec	r1
   1caec:	69 f7       	brne	.-38     	; 0x1cac8 <__udivmodsi4_loop>
   1caee:	60 95       	com	r22
   1caf0:	70 95       	com	r23
   1caf2:	80 95       	com	r24
   1caf4:	90 95       	com	r25
   1caf6:	9b 01       	movw	r18, r22
   1caf8:	ac 01       	movw	r20, r24
   1cafa:	bd 01       	movw	r22, r26
   1cafc:	cf 01       	movw	r24, r30
   1cafe:	08 95       	ret

0001cb00 <__divmodsi4>:
   1cb00:	05 2e       	mov	r0, r21
   1cb02:	97 fb       	bst	r25, 7
   1cb04:	16 f4       	brtc	.+4      	; 0x1cb0a <__divmodsi4+0xa>
   1cb06:	00 94       	com	r0
   1cb08:	0f d0       	rcall	.+30     	; 0x1cb28 <__negsi2>
   1cb0a:	57 fd       	sbrc	r21, 7
   1cb0c:	05 d0       	rcall	.+10     	; 0x1cb18 <__divmodsi4_neg2>
   1cb0e:	d6 df       	rcall	.-84     	; 0x1cabc <__udivmodsi4>
   1cb10:	07 fc       	sbrc	r0, 7
   1cb12:	02 d0       	rcall	.+4      	; 0x1cb18 <__divmodsi4_neg2>
   1cb14:	46 f4       	brtc	.+16     	; 0x1cb26 <__divmodsi4_exit>
   1cb16:	08 c0       	rjmp	.+16     	; 0x1cb28 <__negsi2>

0001cb18 <__divmodsi4_neg2>:
   1cb18:	50 95       	com	r21
   1cb1a:	40 95       	com	r20
   1cb1c:	30 95       	com	r19
   1cb1e:	21 95       	neg	r18
   1cb20:	3f 4f       	sbci	r19, 0xFF	; 255
   1cb22:	4f 4f       	sbci	r20, 0xFF	; 255
   1cb24:	5f 4f       	sbci	r21, 0xFF	; 255

0001cb26 <__divmodsi4_exit>:
   1cb26:	08 95       	ret

0001cb28 <__negsi2>:
   1cb28:	90 95       	com	r25
   1cb2a:	80 95       	com	r24
   1cb2c:	70 95       	com	r23
   1cb2e:	61 95       	neg	r22
   1cb30:	7f 4f       	sbci	r23, 0xFF	; 255
   1cb32:	8f 4f       	sbci	r24, 0xFF	; 255
   1cb34:	9f 4f       	sbci	r25, 0xFF	; 255
   1cb36:	08 95       	ret

0001cb38 <__tablejump2__>:
   1cb38:	ee 0f       	add	r30, r30
   1cb3a:	ff 1f       	adc	r31, r31
   1cb3c:	00 24       	eor	r0, r0
   1cb3e:	00 1c       	adc	r0, r0
   1cb40:	0b be       	out	0x3b, r0	; 59
   1cb42:	07 90       	elpm	r0, Z+
   1cb44:	f6 91       	elpm	r31, Z
   1cb46:	e0 2d       	mov	r30, r0
   1cb48:	09 94       	ijmp

0001cb4a <__mulhisi3>:
   1cb4a:	05 d0       	rcall	.+10     	; 0x1cb56 <__umulhisi3>
   1cb4c:	33 23       	and	r19, r19
   1cb4e:	12 f4       	brpl	.+4      	; 0x1cb54 <__mulhisi3+0xa>
   1cb50:	8a 1b       	sub	r24, r26
   1cb52:	9b 0b       	sbc	r25, r27
   1cb54:	10 c0       	rjmp	.+32     	; 0x1cb76 <__usmulhisi3_tail>

0001cb56 <__umulhisi3>:
   1cb56:	a2 9f       	mul	r26, r18
   1cb58:	b0 01       	movw	r22, r0
   1cb5a:	b3 9f       	mul	r27, r19
   1cb5c:	c0 01       	movw	r24, r0
   1cb5e:	a3 9f       	mul	r26, r19
   1cb60:	70 0d       	add	r23, r0
   1cb62:	81 1d       	adc	r24, r1
   1cb64:	11 24       	eor	r1, r1
   1cb66:	91 1d       	adc	r25, r1
   1cb68:	b2 9f       	mul	r27, r18
   1cb6a:	70 0d       	add	r23, r0
   1cb6c:	81 1d       	adc	r24, r1
   1cb6e:	11 24       	eor	r1, r1
   1cb70:	91 1d       	adc	r25, r1
   1cb72:	08 95       	ret

0001cb74 <__usmulhisi3>:
   1cb74:	f0 df       	rcall	.-32     	; 0x1cb56 <__umulhisi3>

0001cb76 <__usmulhisi3_tail>:
   1cb76:	b7 ff       	sbrs	r27, 7
   1cb78:	08 95       	ret
   1cb7a:	82 1b       	sub	r24, r18
   1cb7c:	93 0b       	sbc	r25, r19
   1cb7e:	08 95       	ret

0001cb80 <__muluhisi3>:
   1cb80:	ea df       	rcall	.-44     	; 0x1cb56 <__umulhisi3>
   1cb82:	a5 9f       	mul	r26, r21
   1cb84:	90 0d       	add	r25, r0
   1cb86:	b4 9f       	mul	r27, r20
   1cb88:	90 0d       	add	r25, r0
   1cb8a:	a4 9f       	mul	r26, r20
   1cb8c:	80 0d       	add	r24, r0
   1cb8e:	91 1d       	adc	r25, r1
   1cb90:	11 24       	eor	r1, r1
   1cb92:	08 95       	ret

0001cb94 <__mulshisi3>:
   1cb94:	b7 ff       	sbrs	r27, 7
   1cb96:	f4 cf       	rjmp	.-24     	; 0x1cb80 <__muluhisi3>

0001cb98 <__mulohisi3>:
   1cb98:	f3 df       	rcall	.-26     	; 0x1cb80 <__muluhisi3>
   1cb9a:	82 1b       	sub	r24, r18
   1cb9c:	93 0b       	sbc	r25, r19
   1cb9e:	08 95       	ret

0001cba0 <__negdi2>:
   1cba0:	60 95       	com	r22
   1cba2:	70 95       	com	r23
   1cba4:	80 95       	com	r24
   1cba6:	90 95       	com	r25
   1cba8:	30 95       	com	r19
   1cbaa:	40 95       	com	r20
   1cbac:	50 95       	com	r21
   1cbae:	21 95       	neg	r18
   1cbb0:	3f 4f       	sbci	r19, 0xFF	; 255
   1cbb2:	4f 4f       	sbci	r20, 0xFF	; 255
   1cbb4:	5f 4f       	sbci	r21, 0xFF	; 255
   1cbb6:	6f 4f       	sbci	r22, 0xFF	; 255
   1cbb8:	7f 4f       	sbci	r23, 0xFF	; 255
   1cbba:	8f 4f       	sbci	r24, 0xFF	; 255
   1cbbc:	9f 4f       	sbci	r25, 0xFF	; 255
   1cbbe:	08 95       	ret

0001cbc0 <__prologue_saves__>:
   1cbc0:	2f 92       	push	r2
   1cbc2:	3f 92       	push	r3
   1cbc4:	4f 92       	push	r4
   1cbc6:	5f 92       	push	r5
   1cbc8:	6f 92       	push	r6
   1cbca:	7f 92       	push	r7
   1cbcc:	8f 92       	push	r8
   1cbce:	9f 92       	push	r9
   1cbd0:	af 92       	push	r10
   1cbd2:	bf 92       	push	r11
   1cbd4:	cf 92       	push	r12
   1cbd6:	df 92       	push	r13
   1cbd8:	ef 92       	push	r14
   1cbda:	ff 92       	push	r15
   1cbdc:	0f 93       	push	r16
   1cbde:	1f 93       	push	r17
   1cbe0:	cf 93       	push	r28
   1cbe2:	df 93       	push	r29
   1cbe4:	cd b7       	in	r28, 0x3d	; 61
   1cbe6:	de b7       	in	r29, 0x3e	; 62
   1cbe8:	ca 1b       	sub	r28, r26
   1cbea:	db 0b       	sbc	r29, r27
   1cbec:	0f b6       	in	r0, 0x3f	; 63
   1cbee:	f8 94       	cli
   1cbf0:	de bf       	out	0x3e, r29	; 62
   1cbf2:	0f be       	out	0x3f, r0	; 63
   1cbf4:	cd bf       	out	0x3d, r28	; 61
   1cbf6:	09 94       	ijmp

0001cbf8 <__epilogue_restores__>:
   1cbf8:	2a 88       	ldd	r2, Y+18	; 0x12
   1cbfa:	39 88       	ldd	r3, Y+17	; 0x11
   1cbfc:	48 88       	ldd	r4, Y+16	; 0x10
   1cbfe:	5f 84       	ldd	r5, Y+15	; 0x0f
   1cc00:	6e 84       	ldd	r6, Y+14	; 0x0e
   1cc02:	7d 84       	ldd	r7, Y+13	; 0x0d
   1cc04:	8c 84       	ldd	r8, Y+12	; 0x0c
   1cc06:	9b 84       	ldd	r9, Y+11	; 0x0b
   1cc08:	aa 84       	ldd	r10, Y+10	; 0x0a
   1cc0a:	b9 84       	ldd	r11, Y+9	; 0x09
   1cc0c:	c8 84       	ldd	r12, Y+8	; 0x08
   1cc0e:	df 80       	ldd	r13, Y+7	; 0x07
   1cc10:	ee 80       	ldd	r14, Y+6	; 0x06
   1cc12:	fd 80       	ldd	r15, Y+5	; 0x05
   1cc14:	0c 81       	ldd	r16, Y+4	; 0x04
   1cc16:	1b 81       	ldd	r17, Y+3	; 0x03
   1cc18:	aa 81       	ldd	r26, Y+2	; 0x02
   1cc1a:	b9 81       	ldd	r27, Y+1	; 0x01
   1cc1c:	ce 0f       	add	r28, r30
   1cc1e:	d1 1d       	adc	r29, r1
   1cc20:	0f b6       	in	r0, 0x3f	; 63
   1cc22:	f8 94       	cli
   1cc24:	de bf       	out	0x3e, r29	; 62
   1cc26:	0f be       	out	0x3f, r0	; 63
   1cc28:	cd bf       	out	0x3d, r28	; 61
   1cc2a:	ed 01       	movw	r28, r26
   1cc2c:	08 95       	ret

0001cc2e <__xload_1>:
   1cc2e:	57 fd       	sbrc	r21, 7
   1cc30:	03 c0       	rjmp	.+6      	; 0x1cc38 <__xload_1+0xa>
   1cc32:	5b bf       	out	0x3b, r21	; 59
   1cc34:	67 91       	elpm	r22, Z+
   1cc36:	08 95       	ret
   1cc38:	60 81       	ld	r22, Z
   1cc3a:	08 95       	ret

0001cc3c <__cmpdi2_s8>:
   1cc3c:	00 24       	eor	r0, r0
   1cc3e:	a7 fd       	sbrc	r26, 7
   1cc40:	00 94       	com	r0
   1cc42:	2a 17       	cp	r18, r26
   1cc44:	30 05       	cpc	r19, r0
   1cc46:	40 05       	cpc	r20, r0
   1cc48:	50 05       	cpc	r21, r0
   1cc4a:	60 05       	cpc	r22, r0
   1cc4c:	70 05       	cpc	r23, r0
   1cc4e:	80 05       	cpc	r24, r0
   1cc50:	90 05       	cpc	r25, r0
   1cc52:	08 95       	ret

0001cc54 <__subsf3>:
   1cc54:	50 58       	subi	r21, 0x80	; 128

0001cc56 <__addsf3>:
   1cc56:	bb 27       	eor	r27, r27
   1cc58:	aa 27       	eor	r26, r26
   1cc5a:	0e d0       	rcall	.+28     	; 0x1cc78 <__addsf3x>
   1cc5c:	75 c1       	rjmp	.+746    	; 0x1cf48 <__fp_round>
   1cc5e:	66 d1       	rcall	.+716    	; 0x1cf2c <__fp_pscA>
   1cc60:	30 f0       	brcs	.+12     	; 0x1cc6e <__addsf3+0x18>
   1cc62:	6b d1       	rcall	.+726    	; 0x1cf3a <__fp_pscB>
   1cc64:	20 f0       	brcs	.+8      	; 0x1cc6e <__addsf3+0x18>
   1cc66:	31 f4       	brne	.+12     	; 0x1cc74 <__addsf3+0x1e>
   1cc68:	9f 3f       	cpi	r25, 0xFF	; 255
   1cc6a:	11 f4       	brne	.+4      	; 0x1cc70 <__addsf3+0x1a>
   1cc6c:	1e f4       	brtc	.+6      	; 0x1cc74 <__addsf3+0x1e>
   1cc6e:	5b c1       	rjmp	.+694    	; 0x1cf26 <__fp_nan>
   1cc70:	0e f4       	brtc	.+2      	; 0x1cc74 <__addsf3+0x1e>
   1cc72:	e0 95       	com	r30
   1cc74:	e7 fb       	bst	r30, 7
   1cc76:	51 c1       	rjmp	.+674    	; 0x1cf1a <__fp_inf>

0001cc78 <__addsf3x>:
   1cc78:	e9 2f       	mov	r30, r25
   1cc7a:	77 d1       	rcall	.+750    	; 0x1cf6a <__fp_split3>
   1cc7c:	80 f3       	brcs	.-32     	; 0x1cc5e <__addsf3+0x8>
   1cc7e:	ba 17       	cp	r27, r26
   1cc80:	62 07       	cpc	r22, r18
   1cc82:	73 07       	cpc	r23, r19
   1cc84:	84 07       	cpc	r24, r20
   1cc86:	95 07       	cpc	r25, r21
   1cc88:	18 f0       	brcs	.+6      	; 0x1cc90 <__addsf3x+0x18>
   1cc8a:	71 f4       	brne	.+28     	; 0x1cca8 <__addsf3x+0x30>
   1cc8c:	9e f5       	brtc	.+102    	; 0x1ccf4 <__addsf3x+0x7c>
   1cc8e:	8f c1       	rjmp	.+798    	; 0x1cfae <__fp_zero>
   1cc90:	0e f4       	brtc	.+2      	; 0x1cc94 <__addsf3x+0x1c>
   1cc92:	e0 95       	com	r30
   1cc94:	0b 2e       	mov	r0, r27
   1cc96:	ba 2f       	mov	r27, r26
   1cc98:	a0 2d       	mov	r26, r0
   1cc9a:	0b 01       	movw	r0, r22
   1cc9c:	b9 01       	movw	r22, r18
   1cc9e:	90 01       	movw	r18, r0
   1cca0:	0c 01       	movw	r0, r24
   1cca2:	ca 01       	movw	r24, r20
   1cca4:	a0 01       	movw	r20, r0
   1cca6:	11 24       	eor	r1, r1
   1cca8:	ff 27       	eor	r31, r31
   1ccaa:	59 1b       	sub	r21, r25
   1ccac:	99 f0       	breq	.+38     	; 0x1ccd4 <__addsf3x+0x5c>
   1ccae:	59 3f       	cpi	r21, 0xF9	; 249
   1ccb0:	50 f4       	brcc	.+20     	; 0x1ccc6 <__addsf3x+0x4e>
   1ccb2:	50 3e       	cpi	r21, 0xE0	; 224
   1ccb4:	68 f1       	brcs	.+90     	; 0x1cd10 <__addsf3x+0x98>
   1ccb6:	1a 16       	cp	r1, r26
   1ccb8:	f0 40       	sbci	r31, 0x00	; 0
   1ccba:	a2 2f       	mov	r26, r18
   1ccbc:	23 2f       	mov	r18, r19
   1ccbe:	34 2f       	mov	r19, r20
   1ccc0:	44 27       	eor	r20, r20
   1ccc2:	58 5f       	subi	r21, 0xF8	; 248
   1ccc4:	f3 cf       	rjmp	.-26     	; 0x1ccac <__addsf3x+0x34>
   1ccc6:	46 95       	lsr	r20
   1ccc8:	37 95       	ror	r19
   1ccca:	27 95       	ror	r18
   1cccc:	a7 95       	ror	r26
   1ccce:	f0 40       	sbci	r31, 0x00	; 0
   1ccd0:	53 95       	inc	r21
   1ccd2:	c9 f7       	brne	.-14     	; 0x1ccc6 <__addsf3x+0x4e>
   1ccd4:	7e f4       	brtc	.+30     	; 0x1ccf4 <__addsf3x+0x7c>
   1ccd6:	1f 16       	cp	r1, r31
   1ccd8:	ba 0b       	sbc	r27, r26
   1ccda:	62 0b       	sbc	r22, r18
   1ccdc:	73 0b       	sbc	r23, r19
   1ccde:	84 0b       	sbc	r24, r20
   1cce0:	ba f0       	brmi	.+46     	; 0x1cd10 <__addsf3x+0x98>
   1cce2:	91 50       	subi	r25, 0x01	; 1
   1cce4:	a1 f0       	breq	.+40     	; 0x1cd0e <__addsf3x+0x96>
   1cce6:	ff 0f       	add	r31, r31
   1cce8:	bb 1f       	adc	r27, r27
   1ccea:	66 1f       	adc	r22, r22
   1ccec:	77 1f       	adc	r23, r23
   1ccee:	88 1f       	adc	r24, r24
   1ccf0:	c2 f7       	brpl	.-16     	; 0x1cce2 <__addsf3x+0x6a>
   1ccf2:	0e c0       	rjmp	.+28     	; 0x1cd10 <__addsf3x+0x98>
   1ccf4:	ba 0f       	add	r27, r26
   1ccf6:	62 1f       	adc	r22, r18
   1ccf8:	73 1f       	adc	r23, r19
   1ccfa:	84 1f       	adc	r24, r20
   1ccfc:	48 f4       	brcc	.+18     	; 0x1cd10 <__addsf3x+0x98>
   1ccfe:	87 95       	ror	r24
   1cd00:	77 95       	ror	r23
   1cd02:	67 95       	ror	r22
   1cd04:	b7 95       	ror	r27
   1cd06:	f7 95       	ror	r31
   1cd08:	9e 3f       	cpi	r25, 0xFE	; 254
   1cd0a:	08 f0       	brcs	.+2      	; 0x1cd0e <__addsf3x+0x96>
   1cd0c:	b3 cf       	rjmp	.-154    	; 0x1cc74 <__addsf3+0x1e>
   1cd0e:	93 95       	inc	r25
   1cd10:	88 0f       	add	r24, r24
   1cd12:	08 f0       	brcs	.+2      	; 0x1cd16 <__addsf3x+0x9e>
   1cd14:	99 27       	eor	r25, r25
   1cd16:	ee 0f       	add	r30, r30
   1cd18:	97 95       	ror	r25
   1cd1a:	87 95       	ror	r24
   1cd1c:	08 95       	ret

0001cd1e <__cmpsf2>:
   1cd1e:	d9 d0       	rcall	.+434    	; 0x1ced2 <__fp_cmp>
   1cd20:	08 f4       	brcc	.+2      	; 0x1cd24 <__cmpsf2+0x6>
   1cd22:	81 e0       	ldi	r24, 0x01	; 1
   1cd24:	08 95       	ret

0001cd26 <__divsf3>:
   1cd26:	0c d0       	rcall	.+24     	; 0x1cd40 <__divsf3x>
   1cd28:	0f c1       	rjmp	.+542    	; 0x1cf48 <__fp_round>
   1cd2a:	07 d1       	rcall	.+526    	; 0x1cf3a <__fp_pscB>
   1cd2c:	40 f0       	brcs	.+16     	; 0x1cd3e <__divsf3+0x18>
   1cd2e:	fe d0       	rcall	.+508    	; 0x1cf2c <__fp_pscA>
   1cd30:	30 f0       	brcs	.+12     	; 0x1cd3e <__divsf3+0x18>
   1cd32:	21 f4       	brne	.+8      	; 0x1cd3c <__divsf3+0x16>
   1cd34:	5f 3f       	cpi	r21, 0xFF	; 255
   1cd36:	19 f0       	breq	.+6      	; 0x1cd3e <__divsf3+0x18>
   1cd38:	f0 c0       	rjmp	.+480    	; 0x1cf1a <__fp_inf>
   1cd3a:	51 11       	cpse	r21, r1
   1cd3c:	39 c1       	rjmp	.+626    	; 0x1cfb0 <__fp_szero>
   1cd3e:	f3 c0       	rjmp	.+486    	; 0x1cf26 <__fp_nan>

0001cd40 <__divsf3x>:
   1cd40:	14 d1       	rcall	.+552    	; 0x1cf6a <__fp_split3>
   1cd42:	98 f3       	brcs	.-26     	; 0x1cd2a <__divsf3+0x4>

0001cd44 <__divsf3_pse>:
   1cd44:	99 23       	and	r25, r25
   1cd46:	c9 f3       	breq	.-14     	; 0x1cd3a <__divsf3+0x14>
   1cd48:	55 23       	and	r21, r21
   1cd4a:	b1 f3       	breq	.-20     	; 0x1cd38 <__divsf3+0x12>
   1cd4c:	95 1b       	sub	r25, r21
   1cd4e:	55 0b       	sbc	r21, r21
   1cd50:	bb 27       	eor	r27, r27
   1cd52:	aa 27       	eor	r26, r26
   1cd54:	62 17       	cp	r22, r18
   1cd56:	73 07       	cpc	r23, r19
   1cd58:	84 07       	cpc	r24, r20
   1cd5a:	38 f0       	brcs	.+14     	; 0x1cd6a <__divsf3_pse+0x26>
   1cd5c:	9f 5f       	subi	r25, 0xFF	; 255
   1cd5e:	5f 4f       	sbci	r21, 0xFF	; 255
   1cd60:	22 0f       	add	r18, r18
   1cd62:	33 1f       	adc	r19, r19
   1cd64:	44 1f       	adc	r20, r20
   1cd66:	aa 1f       	adc	r26, r26
   1cd68:	a9 f3       	breq	.-22     	; 0x1cd54 <__divsf3_pse+0x10>
   1cd6a:	33 d0       	rcall	.+102    	; 0x1cdd2 <__divsf3_pse+0x8e>
   1cd6c:	0e 2e       	mov	r0, r30
   1cd6e:	3a f0       	brmi	.+14     	; 0x1cd7e <__divsf3_pse+0x3a>
   1cd70:	e0 e8       	ldi	r30, 0x80	; 128
   1cd72:	30 d0       	rcall	.+96     	; 0x1cdd4 <__divsf3_pse+0x90>
   1cd74:	91 50       	subi	r25, 0x01	; 1
   1cd76:	50 40       	sbci	r21, 0x00	; 0
   1cd78:	e6 95       	lsr	r30
   1cd7a:	00 1c       	adc	r0, r0
   1cd7c:	ca f7       	brpl	.-14     	; 0x1cd70 <__divsf3_pse+0x2c>
   1cd7e:	29 d0       	rcall	.+82     	; 0x1cdd2 <__divsf3_pse+0x8e>
   1cd80:	fe 2f       	mov	r31, r30
   1cd82:	27 d0       	rcall	.+78     	; 0x1cdd2 <__divsf3_pse+0x8e>
   1cd84:	66 0f       	add	r22, r22
   1cd86:	77 1f       	adc	r23, r23
   1cd88:	88 1f       	adc	r24, r24
   1cd8a:	bb 1f       	adc	r27, r27
   1cd8c:	26 17       	cp	r18, r22
   1cd8e:	37 07       	cpc	r19, r23
   1cd90:	48 07       	cpc	r20, r24
   1cd92:	ab 07       	cpc	r26, r27
   1cd94:	b0 e8       	ldi	r27, 0x80	; 128
   1cd96:	09 f0       	breq	.+2      	; 0x1cd9a <__divsf3_pse+0x56>
   1cd98:	bb 0b       	sbc	r27, r27
   1cd9a:	80 2d       	mov	r24, r0
   1cd9c:	bf 01       	movw	r22, r30
   1cd9e:	ff 27       	eor	r31, r31
   1cda0:	93 58       	subi	r25, 0x83	; 131
   1cda2:	5f 4f       	sbci	r21, 0xFF	; 255
   1cda4:	2a f0       	brmi	.+10     	; 0x1cdb0 <__divsf3_pse+0x6c>
   1cda6:	9e 3f       	cpi	r25, 0xFE	; 254
   1cda8:	51 05       	cpc	r21, r1
   1cdaa:	68 f0       	brcs	.+26     	; 0x1cdc6 <__divsf3_pse+0x82>
   1cdac:	b6 c0       	rjmp	.+364    	; 0x1cf1a <__fp_inf>
   1cdae:	00 c1       	rjmp	.+512    	; 0x1cfb0 <__fp_szero>
   1cdb0:	5f 3f       	cpi	r21, 0xFF	; 255
   1cdb2:	ec f3       	brlt	.-6      	; 0x1cdae <__divsf3_pse+0x6a>
   1cdb4:	98 3e       	cpi	r25, 0xE8	; 232
   1cdb6:	dc f3       	brlt	.-10     	; 0x1cdae <__divsf3_pse+0x6a>
   1cdb8:	86 95       	lsr	r24
   1cdba:	77 95       	ror	r23
   1cdbc:	67 95       	ror	r22
   1cdbe:	b7 95       	ror	r27
   1cdc0:	f7 95       	ror	r31
   1cdc2:	9f 5f       	subi	r25, 0xFF	; 255
   1cdc4:	c9 f7       	brne	.-14     	; 0x1cdb8 <__divsf3_pse+0x74>
   1cdc6:	88 0f       	add	r24, r24
   1cdc8:	91 1d       	adc	r25, r1
   1cdca:	96 95       	lsr	r25
   1cdcc:	87 95       	ror	r24
   1cdce:	97 f9       	bld	r25, 7
   1cdd0:	08 95       	ret
   1cdd2:	e1 e0       	ldi	r30, 0x01	; 1
   1cdd4:	66 0f       	add	r22, r22
   1cdd6:	77 1f       	adc	r23, r23
   1cdd8:	88 1f       	adc	r24, r24
   1cdda:	bb 1f       	adc	r27, r27
   1cddc:	62 17       	cp	r22, r18
   1cdde:	73 07       	cpc	r23, r19
   1cde0:	84 07       	cpc	r24, r20
   1cde2:	ba 07       	cpc	r27, r26
   1cde4:	20 f0       	brcs	.+8      	; 0x1cdee <__divsf3_pse+0xaa>
   1cde6:	62 1b       	sub	r22, r18
   1cde8:	73 0b       	sbc	r23, r19
   1cdea:	84 0b       	sbc	r24, r20
   1cdec:	ba 0b       	sbc	r27, r26
   1cdee:	ee 1f       	adc	r30, r30
   1cdf0:	88 f7       	brcc	.-30     	; 0x1cdd4 <__divsf3_pse+0x90>
   1cdf2:	e0 95       	com	r30
   1cdf4:	08 95       	ret

0001cdf6 <__fixsfsi>:
   1cdf6:	04 d0       	rcall	.+8      	; 0x1ce00 <__fixunssfsi>
   1cdf8:	68 94       	set
   1cdfa:	b1 11       	cpse	r27, r1
   1cdfc:	d9 c0       	rjmp	.+434    	; 0x1cfb0 <__fp_szero>
   1cdfe:	08 95       	ret

0001ce00 <__fixunssfsi>:
   1ce00:	bc d0       	rcall	.+376    	; 0x1cf7a <__fp_splitA>
   1ce02:	88 f0       	brcs	.+34     	; 0x1ce26 <__fixunssfsi+0x26>
   1ce04:	9f 57       	subi	r25, 0x7F	; 127
   1ce06:	90 f0       	brcs	.+36     	; 0x1ce2c <__fixunssfsi+0x2c>
   1ce08:	b9 2f       	mov	r27, r25
   1ce0a:	99 27       	eor	r25, r25
   1ce0c:	b7 51       	subi	r27, 0x17	; 23
   1ce0e:	a0 f0       	brcs	.+40     	; 0x1ce38 <__fixunssfsi+0x38>
   1ce10:	d1 f0       	breq	.+52     	; 0x1ce46 <__fixunssfsi+0x46>
   1ce12:	66 0f       	add	r22, r22
   1ce14:	77 1f       	adc	r23, r23
   1ce16:	88 1f       	adc	r24, r24
   1ce18:	99 1f       	adc	r25, r25
   1ce1a:	1a f0       	brmi	.+6      	; 0x1ce22 <__fixunssfsi+0x22>
   1ce1c:	ba 95       	dec	r27
   1ce1e:	c9 f7       	brne	.-14     	; 0x1ce12 <__fixunssfsi+0x12>
   1ce20:	12 c0       	rjmp	.+36     	; 0x1ce46 <__fixunssfsi+0x46>
   1ce22:	b1 30       	cpi	r27, 0x01	; 1
   1ce24:	81 f0       	breq	.+32     	; 0x1ce46 <__fixunssfsi+0x46>
   1ce26:	c3 d0       	rcall	.+390    	; 0x1cfae <__fp_zero>
   1ce28:	b1 e0       	ldi	r27, 0x01	; 1
   1ce2a:	08 95       	ret
   1ce2c:	c0 c0       	rjmp	.+384    	; 0x1cfae <__fp_zero>
   1ce2e:	67 2f       	mov	r22, r23
   1ce30:	78 2f       	mov	r23, r24
   1ce32:	88 27       	eor	r24, r24
   1ce34:	b8 5f       	subi	r27, 0xF8	; 248
   1ce36:	39 f0       	breq	.+14     	; 0x1ce46 <__fixunssfsi+0x46>
   1ce38:	b9 3f       	cpi	r27, 0xF9	; 249
   1ce3a:	cc f3       	brlt	.-14     	; 0x1ce2e <__fixunssfsi+0x2e>
   1ce3c:	86 95       	lsr	r24
   1ce3e:	77 95       	ror	r23
   1ce40:	67 95       	ror	r22
   1ce42:	b3 95       	inc	r27
   1ce44:	d9 f7       	brne	.-10     	; 0x1ce3c <__fixunssfsi+0x3c>
   1ce46:	3e f4       	brtc	.+14     	; 0x1ce56 <__fixunssfsi+0x56>
   1ce48:	90 95       	com	r25
   1ce4a:	80 95       	com	r24
   1ce4c:	70 95       	com	r23
   1ce4e:	61 95       	neg	r22
   1ce50:	7f 4f       	sbci	r23, 0xFF	; 255
   1ce52:	8f 4f       	sbci	r24, 0xFF	; 255
   1ce54:	9f 4f       	sbci	r25, 0xFF	; 255
   1ce56:	08 95       	ret

0001ce58 <__floatunsisf>:
   1ce58:	e8 94       	clt
   1ce5a:	09 c0       	rjmp	.+18     	; 0x1ce6e <__floatsisf+0x12>

0001ce5c <__floatsisf>:
   1ce5c:	97 fb       	bst	r25, 7
   1ce5e:	3e f4       	brtc	.+14     	; 0x1ce6e <__floatsisf+0x12>
   1ce60:	90 95       	com	r25
   1ce62:	80 95       	com	r24
   1ce64:	70 95       	com	r23
   1ce66:	61 95       	neg	r22
   1ce68:	7f 4f       	sbci	r23, 0xFF	; 255
   1ce6a:	8f 4f       	sbci	r24, 0xFF	; 255
   1ce6c:	9f 4f       	sbci	r25, 0xFF	; 255
   1ce6e:	99 23       	and	r25, r25
   1ce70:	a9 f0       	breq	.+42     	; 0x1ce9c <__floatsisf+0x40>
   1ce72:	f9 2f       	mov	r31, r25
   1ce74:	96 e9       	ldi	r25, 0x96	; 150
   1ce76:	bb 27       	eor	r27, r27
   1ce78:	93 95       	inc	r25
   1ce7a:	f6 95       	lsr	r31
   1ce7c:	87 95       	ror	r24
   1ce7e:	77 95       	ror	r23
   1ce80:	67 95       	ror	r22
   1ce82:	b7 95       	ror	r27
   1ce84:	f1 11       	cpse	r31, r1
   1ce86:	f8 cf       	rjmp	.-16     	; 0x1ce78 <__floatsisf+0x1c>
   1ce88:	fa f4       	brpl	.+62     	; 0x1cec8 <__floatsisf+0x6c>
   1ce8a:	bb 0f       	add	r27, r27
   1ce8c:	11 f4       	brne	.+4      	; 0x1ce92 <__floatsisf+0x36>
   1ce8e:	60 ff       	sbrs	r22, 0
   1ce90:	1b c0       	rjmp	.+54     	; 0x1cec8 <__floatsisf+0x6c>
   1ce92:	6f 5f       	subi	r22, 0xFF	; 255
   1ce94:	7f 4f       	sbci	r23, 0xFF	; 255
   1ce96:	8f 4f       	sbci	r24, 0xFF	; 255
   1ce98:	9f 4f       	sbci	r25, 0xFF	; 255
   1ce9a:	16 c0       	rjmp	.+44     	; 0x1cec8 <__floatsisf+0x6c>
   1ce9c:	88 23       	and	r24, r24
   1ce9e:	11 f0       	breq	.+4      	; 0x1cea4 <__floatsisf+0x48>
   1cea0:	96 e9       	ldi	r25, 0x96	; 150
   1cea2:	11 c0       	rjmp	.+34     	; 0x1cec6 <__floatsisf+0x6a>
   1cea4:	77 23       	and	r23, r23
   1cea6:	21 f0       	breq	.+8      	; 0x1ceb0 <__floatsisf+0x54>
   1cea8:	9e e8       	ldi	r25, 0x8E	; 142
   1ceaa:	87 2f       	mov	r24, r23
   1ceac:	76 2f       	mov	r23, r22
   1ceae:	05 c0       	rjmp	.+10     	; 0x1ceba <__floatsisf+0x5e>
   1ceb0:	66 23       	and	r22, r22
   1ceb2:	71 f0       	breq	.+28     	; 0x1ced0 <__floatsisf+0x74>
   1ceb4:	96 e8       	ldi	r25, 0x86	; 134
   1ceb6:	86 2f       	mov	r24, r22
   1ceb8:	70 e0       	ldi	r23, 0x00	; 0
   1ceba:	60 e0       	ldi	r22, 0x00	; 0
   1cebc:	2a f0       	brmi	.+10     	; 0x1cec8 <__floatsisf+0x6c>
   1cebe:	9a 95       	dec	r25
   1cec0:	66 0f       	add	r22, r22
   1cec2:	77 1f       	adc	r23, r23
   1cec4:	88 1f       	adc	r24, r24
   1cec6:	da f7       	brpl	.-10     	; 0x1cebe <__floatsisf+0x62>
   1cec8:	88 0f       	add	r24, r24
   1ceca:	96 95       	lsr	r25
   1cecc:	87 95       	ror	r24
   1cece:	97 f9       	bld	r25, 7
   1ced0:	08 95       	ret

0001ced2 <__fp_cmp>:
   1ced2:	99 0f       	add	r25, r25
   1ced4:	00 08       	sbc	r0, r0
   1ced6:	55 0f       	add	r21, r21
   1ced8:	aa 0b       	sbc	r26, r26
   1ceda:	e0 e8       	ldi	r30, 0x80	; 128
   1cedc:	fe ef       	ldi	r31, 0xFE	; 254
   1cede:	16 16       	cp	r1, r22
   1cee0:	17 06       	cpc	r1, r23
   1cee2:	e8 07       	cpc	r30, r24
   1cee4:	f9 07       	cpc	r31, r25
   1cee6:	c0 f0       	brcs	.+48     	; 0x1cf18 <__fp_cmp+0x46>
   1cee8:	12 16       	cp	r1, r18
   1ceea:	13 06       	cpc	r1, r19
   1ceec:	e4 07       	cpc	r30, r20
   1ceee:	f5 07       	cpc	r31, r21
   1cef0:	98 f0       	brcs	.+38     	; 0x1cf18 <__fp_cmp+0x46>
   1cef2:	62 1b       	sub	r22, r18
   1cef4:	73 0b       	sbc	r23, r19
   1cef6:	84 0b       	sbc	r24, r20
   1cef8:	95 0b       	sbc	r25, r21
   1cefa:	39 f4       	brne	.+14     	; 0x1cf0a <__fp_cmp+0x38>
   1cefc:	0a 26       	eor	r0, r26
   1cefe:	61 f0       	breq	.+24     	; 0x1cf18 <__fp_cmp+0x46>
   1cf00:	23 2b       	or	r18, r19
   1cf02:	24 2b       	or	r18, r20
   1cf04:	25 2b       	or	r18, r21
   1cf06:	21 f4       	brne	.+8      	; 0x1cf10 <__fp_cmp+0x3e>
   1cf08:	08 95       	ret
   1cf0a:	0a 26       	eor	r0, r26
   1cf0c:	09 f4       	brne	.+2      	; 0x1cf10 <__fp_cmp+0x3e>
   1cf0e:	a1 40       	sbci	r26, 0x01	; 1
   1cf10:	a6 95       	lsr	r26
   1cf12:	8f ef       	ldi	r24, 0xFF	; 255
   1cf14:	81 1d       	adc	r24, r1
   1cf16:	81 1d       	adc	r24, r1
   1cf18:	08 95       	ret

0001cf1a <__fp_inf>:
   1cf1a:	97 f9       	bld	r25, 7
   1cf1c:	9f 67       	ori	r25, 0x7F	; 127
   1cf1e:	80 e8       	ldi	r24, 0x80	; 128
   1cf20:	70 e0       	ldi	r23, 0x00	; 0
   1cf22:	60 e0       	ldi	r22, 0x00	; 0
   1cf24:	08 95       	ret

0001cf26 <__fp_nan>:
   1cf26:	9f ef       	ldi	r25, 0xFF	; 255
   1cf28:	80 ec       	ldi	r24, 0xC0	; 192
   1cf2a:	08 95       	ret

0001cf2c <__fp_pscA>:
   1cf2c:	00 24       	eor	r0, r0
   1cf2e:	0a 94       	dec	r0
   1cf30:	16 16       	cp	r1, r22
   1cf32:	17 06       	cpc	r1, r23
   1cf34:	18 06       	cpc	r1, r24
   1cf36:	09 06       	cpc	r0, r25
   1cf38:	08 95       	ret

0001cf3a <__fp_pscB>:
   1cf3a:	00 24       	eor	r0, r0
   1cf3c:	0a 94       	dec	r0
   1cf3e:	12 16       	cp	r1, r18
   1cf40:	13 06       	cpc	r1, r19
   1cf42:	14 06       	cpc	r1, r20
   1cf44:	05 06       	cpc	r0, r21
   1cf46:	08 95       	ret

0001cf48 <__fp_round>:
   1cf48:	09 2e       	mov	r0, r25
   1cf4a:	03 94       	inc	r0
   1cf4c:	00 0c       	add	r0, r0
   1cf4e:	11 f4       	brne	.+4      	; 0x1cf54 <__fp_round+0xc>
   1cf50:	88 23       	and	r24, r24
   1cf52:	52 f0       	brmi	.+20     	; 0x1cf68 <__fp_round+0x20>
   1cf54:	bb 0f       	add	r27, r27
   1cf56:	40 f4       	brcc	.+16     	; 0x1cf68 <__fp_round+0x20>
   1cf58:	bf 2b       	or	r27, r31
   1cf5a:	11 f4       	brne	.+4      	; 0x1cf60 <__fp_round+0x18>
   1cf5c:	60 ff       	sbrs	r22, 0
   1cf5e:	04 c0       	rjmp	.+8      	; 0x1cf68 <__fp_round+0x20>
   1cf60:	6f 5f       	subi	r22, 0xFF	; 255
   1cf62:	7f 4f       	sbci	r23, 0xFF	; 255
   1cf64:	8f 4f       	sbci	r24, 0xFF	; 255
   1cf66:	9f 4f       	sbci	r25, 0xFF	; 255
   1cf68:	08 95       	ret

0001cf6a <__fp_split3>:
   1cf6a:	57 fd       	sbrc	r21, 7
   1cf6c:	90 58       	subi	r25, 0x80	; 128
   1cf6e:	44 0f       	add	r20, r20
   1cf70:	55 1f       	adc	r21, r21
   1cf72:	59 f0       	breq	.+22     	; 0x1cf8a <__fp_splitA+0x10>
   1cf74:	5f 3f       	cpi	r21, 0xFF	; 255
   1cf76:	71 f0       	breq	.+28     	; 0x1cf94 <__fp_splitA+0x1a>
   1cf78:	47 95       	ror	r20

0001cf7a <__fp_splitA>:
   1cf7a:	88 0f       	add	r24, r24
   1cf7c:	97 fb       	bst	r25, 7
   1cf7e:	99 1f       	adc	r25, r25
   1cf80:	61 f0       	breq	.+24     	; 0x1cf9a <__fp_splitA+0x20>
   1cf82:	9f 3f       	cpi	r25, 0xFF	; 255
   1cf84:	79 f0       	breq	.+30     	; 0x1cfa4 <__fp_splitA+0x2a>
   1cf86:	87 95       	ror	r24
   1cf88:	08 95       	ret
   1cf8a:	12 16       	cp	r1, r18
   1cf8c:	13 06       	cpc	r1, r19
   1cf8e:	14 06       	cpc	r1, r20
   1cf90:	55 1f       	adc	r21, r21
   1cf92:	f2 cf       	rjmp	.-28     	; 0x1cf78 <__fp_split3+0xe>
   1cf94:	46 95       	lsr	r20
   1cf96:	f1 df       	rcall	.-30     	; 0x1cf7a <__fp_splitA>
   1cf98:	08 c0       	rjmp	.+16     	; 0x1cfaa <__fp_splitA+0x30>
   1cf9a:	16 16       	cp	r1, r22
   1cf9c:	17 06       	cpc	r1, r23
   1cf9e:	18 06       	cpc	r1, r24
   1cfa0:	99 1f       	adc	r25, r25
   1cfa2:	f1 cf       	rjmp	.-30     	; 0x1cf86 <__fp_splitA+0xc>
   1cfa4:	86 95       	lsr	r24
   1cfa6:	71 05       	cpc	r23, r1
   1cfa8:	61 05       	cpc	r22, r1
   1cfaa:	08 94       	sec
   1cfac:	08 95       	ret

0001cfae <__fp_zero>:
   1cfae:	e8 94       	clt

0001cfb0 <__fp_szero>:
   1cfb0:	bb 27       	eor	r27, r27
   1cfb2:	66 27       	eor	r22, r22
   1cfb4:	77 27       	eor	r23, r23
   1cfb6:	cb 01       	movw	r24, r22
   1cfb8:	97 f9       	bld	r25, 7
   1cfba:	08 95       	ret

0001cfbc <__gesf2>:
   1cfbc:	8a df       	rcall	.-236    	; 0x1ced2 <__fp_cmp>
   1cfbe:	08 f4       	brcc	.+2      	; 0x1cfc2 <__gesf2+0x6>
   1cfc0:	8f ef       	ldi	r24, 0xFF	; 255
   1cfc2:	08 95       	ret

0001cfc4 <__mulsf3>:
   1cfc4:	0b d0       	rcall	.+22     	; 0x1cfdc <__mulsf3x>
   1cfc6:	c0 cf       	rjmp	.-128    	; 0x1cf48 <__fp_round>
   1cfc8:	b1 df       	rcall	.-158    	; 0x1cf2c <__fp_pscA>
   1cfca:	28 f0       	brcs	.+10     	; 0x1cfd6 <__mulsf3+0x12>
   1cfcc:	b6 df       	rcall	.-148    	; 0x1cf3a <__fp_pscB>
   1cfce:	18 f0       	brcs	.+6      	; 0x1cfd6 <__mulsf3+0x12>
   1cfd0:	95 23       	and	r25, r21
   1cfd2:	09 f0       	breq	.+2      	; 0x1cfd6 <__mulsf3+0x12>
   1cfd4:	a2 cf       	rjmp	.-188    	; 0x1cf1a <__fp_inf>
   1cfd6:	a7 cf       	rjmp	.-178    	; 0x1cf26 <__fp_nan>
   1cfd8:	11 24       	eor	r1, r1
   1cfda:	ea cf       	rjmp	.-44     	; 0x1cfb0 <__fp_szero>

0001cfdc <__mulsf3x>:
   1cfdc:	c6 df       	rcall	.-116    	; 0x1cf6a <__fp_split3>
   1cfde:	a0 f3       	brcs	.-24     	; 0x1cfc8 <__mulsf3+0x4>

0001cfe0 <__mulsf3_pse>:
   1cfe0:	95 9f       	mul	r25, r21
   1cfe2:	d1 f3       	breq	.-12     	; 0x1cfd8 <__mulsf3+0x14>
   1cfe4:	95 0f       	add	r25, r21
   1cfe6:	50 e0       	ldi	r21, 0x00	; 0
   1cfe8:	55 1f       	adc	r21, r21
   1cfea:	62 9f       	mul	r22, r18
   1cfec:	f0 01       	movw	r30, r0
   1cfee:	72 9f       	mul	r23, r18
   1cff0:	bb 27       	eor	r27, r27
   1cff2:	f0 0d       	add	r31, r0
   1cff4:	b1 1d       	adc	r27, r1
   1cff6:	63 9f       	mul	r22, r19
   1cff8:	aa 27       	eor	r26, r26
   1cffa:	f0 0d       	add	r31, r0
   1cffc:	b1 1d       	adc	r27, r1
   1cffe:	aa 1f       	adc	r26, r26
   1d000:	64 9f       	mul	r22, r20
   1d002:	66 27       	eor	r22, r22
   1d004:	b0 0d       	add	r27, r0
   1d006:	a1 1d       	adc	r26, r1
   1d008:	66 1f       	adc	r22, r22
   1d00a:	82 9f       	mul	r24, r18
   1d00c:	22 27       	eor	r18, r18
   1d00e:	b0 0d       	add	r27, r0
   1d010:	a1 1d       	adc	r26, r1
   1d012:	62 1f       	adc	r22, r18
   1d014:	73 9f       	mul	r23, r19
   1d016:	b0 0d       	add	r27, r0
   1d018:	a1 1d       	adc	r26, r1
   1d01a:	62 1f       	adc	r22, r18
   1d01c:	83 9f       	mul	r24, r19
   1d01e:	a0 0d       	add	r26, r0
   1d020:	61 1d       	adc	r22, r1
   1d022:	22 1f       	adc	r18, r18
   1d024:	74 9f       	mul	r23, r20
   1d026:	33 27       	eor	r19, r19
   1d028:	a0 0d       	add	r26, r0
   1d02a:	61 1d       	adc	r22, r1
   1d02c:	23 1f       	adc	r18, r19
   1d02e:	84 9f       	mul	r24, r20
   1d030:	60 0d       	add	r22, r0
   1d032:	21 1d       	adc	r18, r1
   1d034:	82 2f       	mov	r24, r18
   1d036:	76 2f       	mov	r23, r22
   1d038:	6a 2f       	mov	r22, r26
   1d03a:	11 24       	eor	r1, r1
   1d03c:	9f 57       	subi	r25, 0x7F	; 127
   1d03e:	50 40       	sbci	r21, 0x00	; 0
   1d040:	8a f0       	brmi	.+34     	; 0x1d064 <__mulsf3_pse+0x84>
   1d042:	e1 f0       	breq	.+56     	; 0x1d07c <__mulsf3_pse+0x9c>
   1d044:	88 23       	and	r24, r24
   1d046:	4a f0       	brmi	.+18     	; 0x1d05a <__mulsf3_pse+0x7a>
   1d048:	ee 0f       	add	r30, r30
   1d04a:	ff 1f       	adc	r31, r31
   1d04c:	bb 1f       	adc	r27, r27
   1d04e:	66 1f       	adc	r22, r22
   1d050:	77 1f       	adc	r23, r23
   1d052:	88 1f       	adc	r24, r24
   1d054:	91 50       	subi	r25, 0x01	; 1
   1d056:	50 40       	sbci	r21, 0x00	; 0
   1d058:	a9 f7       	brne	.-22     	; 0x1d044 <__mulsf3_pse+0x64>
   1d05a:	9e 3f       	cpi	r25, 0xFE	; 254
   1d05c:	51 05       	cpc	r21, r1
   1d05e:	70 f0       	brcs	.+28     	; 0x1d07c <__mulsf3_pse+0x9c>
   1d060:	5c cf       	rjmp	.-328    	; 0x1cf1a <__fp_inf>
   1d062:	a6 cf       	rjmp	.-180    	; 0x1cfb0 <__fp_szero>
   1d064:	5f 3f       	cpi	r21, 0xFF	; 255
   1d066:	ec f3       	brlt	.-6      	; 0x1d062 <__mulsf3_pse+0x82>
   1d068:	98 3e       	cpi	r25, 0xE8	; 232
   1d06a:	dc f3       	brlt	.-10     	; 0x1d062 <__mulsf3_pse+0x82>
   1d06c:	86 95       	lsr	r24
   1d06e:	77 95       	ror	r23
   1d070:	67 95       	ror	r22
   1d072:	b7 95       	ror	r27
   1d074:	f7 95       	ror	r31
   1d076:	e7 95       	ror	r30
   1d078:	9f 5f       	subi	r25, 0xFF	; 255
   1d07a:	c1 f7       	brne	.-16     	; 0x1d06c <__mulsf3_pse+0x8c>
   1d07c:	fe 2b       	or	r31, r30
   1d07e:	88 0f       	add	r24, r24
   1d080:	91 1d       	adc	r25, r1
   1d082:	96 95       	lsr	r25
   1d084:	87 95       	ror	r24
   1d086:	97 f9       	bld	r25, 7
   1d088:	08 95       	ret

0001d08a <round>:
   1d08a:	77 df       	rcall	.-274    	; 0x1cf7a <__fp_splitA>
   1d08c:	e0 f0       	brcs	.+56     	; 0x1d0c6 <round+0x3c>
   1d08e:	9e 37       	cpi	r25, 0x7E	; 126
   1d090:	d8 f0       	brcs	.+54     	; 0x1d0c8 <round+0x3e>
   1d092:	96 39       	cpi	r25, 0x96	; 150
   1d094:	b8 f4       	brcc	.+46     	; 0x1d0c4 <round+0x3a>
   1d096:	9e 38       	cpi	r25, 0x8E	; 142
   1d098:	48 f4       	brcc	.+18     	; 0x1d0ac <round+0x22>
   1d09a:	67 2f       	mov	r22, r23
   1d09c:	78 2f       	mov	r23, r24
   1d09e:	88 27       	eor	r24, r24
   1d0a0:	98 5f       	subi	r25, 0xF8	; 248
   1d0a2:	f9 cf       	rjmp	.-14     	; 0x1d096 <round+0xc>
   1d0a4:	86 95       	lsr	r24
   1d0a6:	77 95       	ror	r23
   1d0a8:	67 95       	ror	r22
   1d0aa:	93 95       	inc	r25
   1d0ac:	95 39       	cpi	r25, 0x95	; 149
   1d0ae:	d0 f3       	brcs	.-12     	; 0x1d0a4 <round+0x1a>
   1d0b0:	b6 2f       	mov	r27, r22
   1d0b2:	b1 70       	andi	r27, 0x01	; 1
   1d0b4:	6b 0f       	add	r22, r27
   1d0b6:	71 1d       	adc	r23, r1
   1d0b8:	81 1d       	adc	r24, r1
   1d0ba:	20 f4       	brcc	.+8      	; 0x1d0c4 <round+0x3a>
   1d0bc:	87 95       	ror	r24
   1d0be:	77 95       	ror	r23
   1d0c0:	67 95       	ror	r22
   1d0c2:	93 95       	inc	r25
   1d0c4:	02 c0       	rjmp	.+4      	; 0x1d0ca <__fp_mintl>
   1d0c6:	1c c0       	rjmp	.+56     	; 0x1d100 <__fp_mpack>
   1d0c8:	73 cf       	rjmp	.-282    	; 0x1cfb0 <__fp_szero>

0001d0ca <__fp_mintl>:
   1d0ca:	88 23       	and	r24, r24
   1d0cc:	71 f4       	brne	.+28     	; 0x1d0ea <__fp_mintl+0x20>
   1d0ce:	77 23       	and	r23, r23
   1d0d0:	21 f0       	breq	.+8      	; 0x1d0da <__fp_mintl+0x10>
   1d0d2:	98 50       	subi	r25, 0x08	; 8
   1d0d4:	87 2b       	or	r24, r23
   1d0d6:	76 2f       	mov	r23, r22
   1d0d8:	07 c0       	rjmp	.+14     	; 0x1d0e8 <__fp_mintl+0x1e>
   1d0da:	66 23       	and	r22, r22
   1d0dc:	11 f4       	brne	.+4      	; 0x1d0e2 <__fp_mintl+0x18>
   1d0de:	99 27       	eor	r25, r25
   1d0e0:	0d c0       	rjmp	.+26     	; 0x1d0fc <__fp_mintl+0x32>
   1d0e2:	90 51       	subi	r25, 0x10	; 16
   1d0e4:	86 2b       	or	r24, r22
   1d0e6:	70 e0       	ldi	r23, 0x00	; 0
   1d0e8:	60 e0       	ldi	r22, 0x00	; 0
   1d0ea:	2a f0       	brmi	.+10     	; 0x1d0f6 <__fp_mintl+0x2c>
   1d0ec:	9a 95       	dec	r25
   1d0ee:	66 0f       	add	r22, r22
   1d0f0:	77 1f       	adc	r23, r23
   1d0f2:	88 1f       	adc	r24, r24
   1d0f4:	da f7       	brpl	.-10     	; 0x1d0ec <__fp_mintl+0x22>
   1d0f6:	88 0f       	add	r24, r24
   1d0f8:	96 95       	lsr	r25
   1d0fa:	87 95       	ror	r24
   1d0fc:	97 f9       	bld	r25, 7
   1d0fe:	08 95       	ret

0001d100 <__fp_mpack>:
   1d100:	9f 3f       	cpi	r25, 0xFF	; 255
   1d102:	31 f0       	breq	.+12     	; 0x1d110 <__fp_mpack_finite+0xc>

0001d104 <__fp_mpack_finite>:
   1d104:	91 50       	subi	r25, 0x01	; 1
   1d106:	20 f4       	brcc	.+8      	; 0x1d110 <__fp_mpack_finite+0xc>
   1d108:	87 95       	ror	r24
   1d10a:	77 95       	ror	r23
   1d10c:	67 95       	ror	r22
   1d10e:	b7 95       	ror	r27
   1d110:	88 0f       	add	r24, r24
   1d112:	91 1d       	adc	r25, r1
   1d114:	96 95       	lsr	r25
   1d116:	87 95       	ror	r24
   1d118:	97 f9       	bld	r25, 7
   1d11a:	08 95       	ret

0001d11c <calloc>:
   1d11c:	0f 93       	push	r16
   1d11e:	1f 93       	push	r17
   1d120:	cf 93       	push	r28
   1d122:	df 93       	push	r29
   1d124:	86 9f       	mul	r24, r22
   1d126:	80 01       	movw	r16, r0
   1d128:	87 9f       	mul	r24, r23
   1d12a:	10 0d       	add	r17, r0
   1d12c:	96 9f       	mul	r25, r22
   1d12e:	10 0d       	add	r17, r0
   1d130:	11 24       	eor	r1, r1
   1d132:	c8 01       	movw	r24, r16
   1d134:	0d d0       	rcall	.+26     	; 0x1d150 <malloc>
   1d136:	ec 01       	movw	r28, r24
   1d138:	00 97       	sbiw	r24, 0x00	; 0
   1d13a:	21 f0       	breq	.+8      	; 0x1d144 <calloc+0x28>
   1d13c:	a8 01       	movw	r20, r16
   1d13e:	60 e0       	ldi	r22, 0x00	; 0
   1d140:	70 e0       	ldi	r23, 0x00	; 0
   1d142:	0e d2       	rcall	.+1052   	; 0x1d560 <memset>
   1d144:	ce 01       	movw	r24, r28
   1d146:	df 91       	pop	r29
   1d148:	cf 91       	pop	r28
   1d14a:	1f 91       	pop	r17
   1d14c:	0f 91       	pop	r16
   1d14e:	08 95       	ret

0001d150 <malloc>:
   1d150:	0f 93       	push	r16
   1d152:	1f 93       	push	r17
   1d154:	cf 93       	push	r28
   1d156:	df 93       	push	r29
   1d158:	82 30       	cpi	r24, 0x02	; 2
   1d15a:	91 05       	cpc	r25, r1
   1d15c:	10 f4       	brcc	.+4      	; 0x1d162 <malloc+0x12>
   1d15e:	82 e0       	ldi	r24, 0x02	; 2
   1d160:	90 e0       	ldi	r25, 0x00	; 0
   1d162:	e0 91 aa 20 	lds	r30, 0x20AA	; 0x8020aa <__flp>
   1d166:	f0 91 ab 20 	lds	r31, 0x20AB	; 0x8020ab <__flp+0x1>
   1d16a:	20 e0       	ldi	r18, 0x00	; 0
   1d16c:	30 e0       	ldi	r19, 0x00	; 0
   1d16e:	a0 e0       	ldi	r26, 0x00	; 0
   1d170:	b0 e0       	ldi	r27, 0x00	; 0
   1d172:	30 97       	sbiw	r30, 0x00	; 0
   1d174:	19 f1       	breq	.+70     	; 0x1d1bc <malloc+0x6c>
   1d176:	40 81       	ld	r20, Z
   1d178:	51 81       	ldd	r21, Z+1	; 0x01
   1d17a:	02 81       	ldd	r16, Z+2	; 0x02
   1d17c:	13 81       	ldd	r17, Z+3	; 0x03
   1d17e:	48 17       	cp	r20, r24
   1d180:	59 07       	cpc	r21, r25
   1d182:	c8 f0       	brcs	.+50     	; 0x1d1b6 <malloc+0x66>
   1d184:	84 17       	cp	r24, r20
   1d186:	95 07       	cpc	r25, r21
   1d188:	69 f4       	brne	.+26     	; 0x1d1a4 <malloc+0x54>
   1d18a:	10 97       	sbiw	r26, 0x00	; 0
   1d18c:	31 f0       	breq	.+12     	; 0x1d19a <malloc+0x4a>
   1d18e:	12 96       	adiw	r26, 0x02	; 2
   1d190:	0c 93       	st	X, r16
   1d192:	12 97       	sbiw	r26, 0x02	; 2
   1d194:	13 96       	adiw	r26, 0x03	; 3
   1d196:	1c 93       	st	X, r17
   1d198:	27 c0       	rjmp	.+78     	; 0x1d1e8 <malloc+0x98>
   1d19a:	00 93 aa 20 	sts	0x20AA, r16	; 0x8020aa <__flp>
   1d19e:	10 93 ab 20 	sts	0x20AB, r17	; 0x8020ab <__flp+0x1>
   1d1a2:	22 c0       	rjmp	.+68     	; 0x1d1e8 <malloc+0x98>
   1d1a4:	21 15       	cp	r18, r1
   1d1a6:	31 05       	cpc	r19, r1
   1d1a8:	19 f0       	breq	.+6      	; 0x1d1b0 <malloc+0x60>
   1d1aa:	42 17       	cp	r20, r18
   1d1ac:	53 07       	cpc	r21, r19
   1d1ae:	18 f4       	brcc	.+6      	; 0x1d1b6 <malloc+0x66>
   1d1b0:	9a 01       	movw	r18, r20
   1d1b2:	bd 01       	movw	r22, r26
   1d1b4:	ef 01       	movw	r28, r30
   1d1b6:	df 01       	movw	r26, r30
   1d1b8:	f8 01       	movw	r30, r16
   1d1ba:	db cf       	rjmp	.-74     	; 0x1d172 <malloc+0x22>
   1d1bc:	21 15       	cp	r18, r1
   1d1be:	31 05       	cpc	r19, r1
   1d1c0:	f9 f0       	breq	.+62     	; 0x1d200 <malloc+0xb0>
   1d1c2:	28 1b       	sub	r18, r24
   1d1c4:	39 0b       	sbc	r19, r25
   1d1c6:	24 30       	cpi	r18, 0x04	; 4
   1d1c8:	31 05       	cpc	r19, r1
   1d1ca:	80 f4       	brcc	.+32     	; 0x1d1ec <malloc+0x9c>
   1d1cc:	8a 81       	ldd	r24, Y+2	; 0x02
   1d1ce:	9b 81       	ldd	r25, Y+3	; 0x03
   1d1d0:	61 15       	cp	r22, r1
   1d1d2:	71 05       	cpc	r23, r1
   1d1d4:	21 f0       	breq	.+8      	; 0x1d1de <malloc+0x8e>
   1d1d6:	fb 01       	movw	r30, r22
   1d1d8:	93 83       	std	Z+3, r25	; 0x03
   1d1da:	82 83       	std	Z+2, r24	; 0x02
   1d1dc:	04 c0       	rjmp	.+8      	; 0x1d1e6 <malloc+0x96>
   1d1de:	90 93 ab 20 	sts	0x20AB, r25	; 0x8020ab <__flp+0x1>
   1d1e2:	80 93 aa 20 	sts	0x20AA, r24	; 0x8020aa <__flp>
   1d1e6:	fe 01       	movw	r30, r28
   1d1e8:	32 96       	adiw	r30, 0x02	; 2
   1d1ea:	44 c0       	rjmp	.+136    	; 0x1d274 <malloc+0x124>
   1d1ec:	fe 01       	movw	r30, r28
   1d1ee:	e2 0f       	add	r30, r18
   1d1f0:	f3 1f       	adc	r31, r19
   1d1f2:	81 93       	st	Z+, r24
   1d1f4:	91 93       	st	Z+, r25
   1d1f6:	22 50       	subi	r18, 0x02	; 2
   1d1f8:	31 09       	sbc	r19, r1
   1d1fa:	39 83       	std	Y+1, r19	; 0x01
   1d1fc:	28 83       	st	Y, r18
   1d1fe:	3a c0       	rjmp	.+116    	; 0x1d274 <malloc+0x124>
   1d200:	20 91 a8 20 	lds	r18, 0x20A8	; 0x8020a8 <__brkval>
   1d204:	30 91 a9 20 	lds	r19, 0x20A9	; 0x8020a9 <__brkval+0x1>
   1d208:	23 2b       	or	r18, r19
   1d20a:	41 f4       	brne	.+16     	; 0x1d21c <malloc+0xcc>
   1d20c:	20 91 57 02 	lds	r18, 0x0257	; 0x800257 <__malloc_heap_start>
   1d210:	30 91 58 02 	lds	r19, 0x0258	; 0x800258 <__malloc_heap_start+0x1>
   1d214:	30 93 a9 20 	sts	0x20A9, r19	; 0x8020a9 <__brkval+0x1>
   1d218:	20 93 a8 20 	sts	0x20A8, r18	; 0x8020a8 <__brkval>
   1d21c:	20 91 55 02 	lds	r18, 0x0255	; 0x800255 <__malloc_heap_end>
   1d220:	30 91 56 02 	lds	r19, 0x0256	; 0x800256 <__malloc_heap_end+0x1>
   1d224:	21 15       	cp	r18, r1
   1d226:	31 05       	cpc	r19, r1
   1d228:	41 f4       	brne	.+16     	; 0x1d23a <malloc+0xea>
   1d22a:	2d b7       	in	r18, 0x3d	; 61
   1d22c:	3e b7       	in	r19, 0x3e	; 62
   1d22e:	40 91 59 02 	lds	r20, 0x0259	; 0x800259 <__malloc_margin>
   1d232:	50 91 5a 02 	lds	r21, 0x025A	; 0x80025a <__malloc_margin+0x1>
   1d236:	24 1b       	sub	r18, r20
   1d238:	35 0b       	sbc	r19, r21
   1d23a:	e0 91 a8 20 	lds	r30, 0x20A8	; 0x8020a8 <__brkval>
   1d23e:	f0 91 a9 20 	lds	r31, 0x20A9	; 0x8020a9 <__brkval+0x1>
   1d242:	e2 17       	cp	r30, r18
   1d244:	f3 07       	cpc	r31, r19
   1d246:	a0 f4       	brcc	.+40     	; 0x1d270 <malloc+0x120>
   1d248:	2e 1b       	sub	r18, r30
   1d24a:	3f 0b       	sbc	r19, r31
   1d24c:	28 17       	cp	r18, r24
   1d24e:	39 07       	cpc	r19, r25
   1d250:	78 f0       	brcs	.+30     	; 0x1d270 <malloc+0x120>
   1d252:	ac 01       	movw	r20, r24
   1d254:	4e 5f       	subi	r20, 0xFE	; 254
   1d256:	5f 4f       	sbci	r21, 0xFF	; 255
   1d258:	24 17       	cp	r18, r20
   1d25a:	35 07       	cpc	r19, r21
   1d25c:	48 f0       	brcs	.+18     	; 0x1d270 <malloc+0x120>
   1d25e:	4e 0f       	add	r20, r30
   1d260:	5f 1f       	adc	r21, r31
   1d262:	50 93 a9 20 	sts	0x20A9, r21	; 0x8020a9 <__brkval+0x1>
   1d266:	40 93 a8 20 	sts	0x20A8, r20	; 0x8020a8 <__brkval>
   1d26a:	81 93       	st	Z+, r24
   1d26c:	91 93       	st	Z+, r25
   1d26e:	02 c0       	rjmp	.+4      	; 0x1d274 <malloc+0x124>
   1d270:	e0 e0       	ldi	r30, 0x00	; 0
   1d272:	f0 e0       	ldi	r31, 0x00	; 0
   1d274:	cf 01       	movw	r24, r30
   1d276:	df 91       	pop	r29
   1d278:	cf 91       	pop	r28
   1d27a:	1f 91       	pop	r17
   1d27c:	0f 91       	pop	r16
   1d27e:	08 95       	ret

0001d280 <free>:
   1d280:	cf 93       	push	r28
   1d282:	df 93       	push	r29
   1d284:	00 97       	sbiw	r24, 0x00	; 0
   1d286:	09 f4       	brne	.+2      	; 0x1d28a <free+0xa>
   1d288:	81 c0       	rjmp	.+258    	; 0x1d38c <free+0x10c>
   1d28a:	fc 01       	movw	r30, r24
   1d28c:	32 97       	sbiw	r30, 0x02	; 2
   1d28e:	13 82       	std	Z+3, r1	; 0x03
   1d290:	12 82       	std	Z+2, r1	; 0x02
   1d292:	a0 91 aa 20 	lds	r26, 0x20AA	; 0x8020aa <__flp>
   1d296:	b0 91 ab 20 	lds	r27, 0x20AB	; 0x8020ab <__flp+0x1>
   1d29a:	10 97       	sbiw	r26, 0x00	; 0
   1d29c:	81 f4       	brne	.+32     	; 0x1d2be <free+0x3e>
   1d29e:	20 81       	ld	r18, Z
   1d2a0:	31 81       	ldd	r19, Z+1	; 0x01
   1d2a2:	82 0f       	add	r24, r18
   1d2a4:	93 1f       	adc	r25, r19
   1d2a6:	20 91 a8 20 	lds	r18, 0x20A8	; 0x8020a8 <__brkval>
   1d2aa:	30 91 a9 20 	lds	r19, 0x20A9	; 0x8020a9 <__brkval+0x1>
   1d2ae:	28 17       	cp	r18, r24
   1d2b0:	39 07       	cpc	r19, r25
   1d2b2:	51 f5       	brne	.+84     	; 0x1d308 <free+0x88>
   1d2b4:	f0 93 a9 20 	sts	0x20A9, r31	; 0x8020a9 <__brkval+0x1>
   1d2b8:	e0 93 a8 20 	sts	0x20A8, r30	; 0x8020a8 <__brkval>
   1d2bc:	67 c0       	rjmp	.+206    	; 0x1d38c <free+0x10c>
   1d2be:	ed 01       	movw	r28, r26
   1d2c0:	20 e0       	ldi	r18, 0x00	; 0
   1d2c2:	30 e0       	ldi	r19, 0x00	; 0
   1d2c4:	ce 17       	cp	r28, r30
   1d2c6:	df 07       	cpc	r29, r31
   1d2c8:	40 f4       	brcc	.+16     	; 0x1d2da <free+0x5a>
   1d2ca:	4a 81       	ldd	r20, Y+2	; 0x02
   1d2cc:	5b 81       	ldd	r21, Y+3	; 0x03
   1d2ce:	9e 01       	movw	r18, r28
   1d2d0:	41 15       	cp	r20, r1
   1d2d2:	51 05       	cpc	r21, r1
   1d2d4:	f1 f0       	breq	.+60     	; 0x1d312 <free+0x92>
   1d2d6:	ea 01       	movw	r28, r20
   1d2d8:	f5 cf       	rjmp	.-22     	; 0x1d2c4 <free+0x44>
   1d2da:	d3 83       	std	Z+3, r29	; 0x03
   1d2dc:	c2 83       	std	Z+2, r28	; 0x02
   1d2de:	40 81       	ld	r20, Z
   1d2e0:	51 81       	ldd	r21, Z+1	; 0x01
   1d2e2:	84 0f       	add	r24, r20
   1d2e4:	95 1f       	adc	r25, r21
   1d2e6:	c8 17       	cp	r28, r24
   1d2e8:	d9 07       	cpc	r29, r25
   1d2ea:	59 f4       	brne	.+22     	; 0x1d302 <free+0x82>
   1d2ec:	88 81       	ld	r24, Y
   1d2ee:	99 81       	ldd	r25, Y+1	; 0x01
   1d2f0:	84 0f       	add	r24, r20
   1d2f2:	95 1f       	adc	r25, r21
   1d2f4:	02 96       	adiw	r24, 0x02	; 2
   1d2f6:	91 83       	std	Z+1, r25	; 0x01
   1d2f8:	80 83       	st	Z, r24
   1d2fa:	8a 81       	ldd	r24, Y+2	; 0x02
   1d2fc:	9b 81       	ldd	r25, Y+3	; 0x03
   1d2fe:	93 83       	std	Z+3, r25	; 0x03
   1d300:	82 83       	std	Z+2, r24	; 0x02
   1d302:	21 15       	cp	r18, r1
   1d304:	31 05       	cpc	r19, r1
   1d306:	29 f4       	brne	.+10     	; 0x1d312 <free+0x92>
   1d308:	f0 93 ab 20 	sts	0x20AB, r31	; 0x8020ab <__flp+0x1>
   1d30c:	e0 93 aa 20 	sts	0x20AA, r30	; 0x8020aa <__flp>
   1d310:	3d c0       	rjmp	.+122    	; 0x1d38c <free+0x10c>
   1d312:	e9 01       	movw	r28, r18
   1d314:	fb 83       	std	Y+3, r31	; 0x03
   1d316:	ea 83       	std	Y+2, r30	; 0x02
   1d318:	49 91       	ld	r20, Y+
   1d31a:	59 91       	ld	r21, Y+
   1d31c:	c4 0f       	add	r28, r20
   1d31e:	d5 1f       	adc	r29, r21
   1d320:	ec 17       	cp	r30, r28
   1d322:	fd 07       	cpc	r31, r29
   1d324:	61 f4       	brne	.+24     	; 0x1d33e <free+0xbe>
   1d326:	80 81       	ld	r24, Z
   1d328:	91 81       	ldd	r25, Z+1	; 0x01
   1d32a:	84 0f       	add	r24, r20
   1d32c:	95 1f       	adc	r25, r21
   1d32e:	02 96       	adiw	r24, 0x02	; 2
   1d330:	e9 01       	movw	r28, r18
   1d332:	99 83       	std	Y+1, r25	; 0x01
   1d334:	88 83       	st	Y, r24
   1d336:	82 81       	ldd	r24, Z+2	; 0x02
   1d338:	93 81       	ldd	r25, Z+3	; 0x03
   1d33a:	9b 83       	std	Y+3, r25	; 0x03
   1d33c:	8a 83       	std	Y+2, r24	; 0x02
   1d33e:	e0 e0       	ldi	r30, 0x00	; 0
   1d340:	f0 e0       	ldi	r31, 0x00	; 0
   1d342:	12 96       	adiw	r26, 0x02	; 2
   1d344:	8d 91       	ld	r24, X+
   1d346:	9c 91       	ld	r25, X
   1d348:	13 97       	sbiw	r26, 0x03	; 3
   1d34a:	00 97       	sbiw	r24, 0x00	; 0
   1d34c:	19 f0       	breq	.+6      	; 0x1d354 <free+0xd4>
   1d34e:	fd 01       	movw	r30, r26
   1d350:	dc 01       	movw	r26, r24
   1d352:	f7 cf       	rjmp	.-18     	; 0x1d342 <free+0xc2>
   1d354:	8d 91       	ld	r24, X+
   1d356:	9c 91       	ld	r25, X
   1d358:	11 97       	sbiw	r26, 0x01	; 1
   1d35a:	9d 01       	movw	r18, r26
   1d35c:	2e 5f       	subi	r18, 0xFE	; 254
   1d35e:	3f 4f       	sbci	r19, 0xFF	; 255
   1d360:	82 0f       	add	r24, r18
   1d362:	93 1f       	adc	r25, r19
   1d364:	20 91 a8 20 	lds	r18, 0x20A8	; 0x8020a8 <__brkval>
   1d368:	30 91 a9 20 	lds	r19, 0x20A9	; 0x8020a9 <__brkval+0x1>
   1d36c:	28 17       	cp	r18, r24
   1d36e:	39 07       	cpc	r19, r25
   1d370:	69 f4       	brne	.+26     	; 0x1d38c <free+0x10c>
   1d372:	30 97       	sbiw	r30, 0x00	; 0
   1d374:	29 f4       	brne	.+10     	; 0x1d380 <free+0x100>
   1d376:	10 92 ab 20 	sts	0x20AB, r1	; 0x8020ab <__flp+0x1>
   1d37a:	10 92 aa 20 	sts	0x20AA, r1	; 0x8020aa <__flp>
   1d37e:	02 c0       	rjmp	.+4      	; 0x1d384 <free+0x104>
   1d380:	13 82       	std	Z+3, r1	; 0x03
   1d382:	12 82       	std	Z+2, r1	; 0x02
   1d384:	b0 93 a9 20 	sts	0x20A9, r27	; 0x8020a9 <__brkval+0x1>
   1d388:	a0 93 a8 20 	sts	0x20A8, r26	; 0x8020a8 <__brkval>
   1d38c:	df 91       	pop	r29
   1d38e:	cf 91       	pop	r28
   1d390:	08 95       	ret

0001d392 <abort>:
   1d392:	81 e0       	ldi	r24, 0x01	; 1
   1d394:	90 e0       	ldi	r25, 0x00	; 0
   1d396:	f8 94       	cli
   1d398:	53 c1       	rjmp	.+678    	; 0x1d640 <_exit>

0001d39a <__ftoa_engine>:
   1d39a:	28 30       	cpi	r18, 0x08	; 8
   1d39c:	08 f0       	brcs	.+2      	; 0x1d3a0 <__ftoa_engine+0x6>
   1d39e:	27 e0       	ldi	r18, 0x07	; 7
   1d3a0:	33 27       	eor	r19, r19
   1d3a2:	da 01       	movw	r26, r20
   1d3a4:	99 0f       	add	r25, r25
   1d3a6:	31 1d       	adc	r19, r1
   1d3a8:	87 fd       	sbrc	r24, 7
   1d3aa:	91 60       	ori	r25, 0x01	; 1
   1d3ac:	00 96       	adiw	r24, 0x00	; 0
   1d3ae:	61 05       	cpc	r22, r1
   1d3b0:	71 05       	cpc	r23, r1
   1d3b2:	39 f4       	brne	.+14     	; 0x1d3c2 <__ftoa_engine+0x28>
   1d3b4:	32 60       	ori	r19, 0x02	; 2
   1d3b6:	2e 5f       	subi	r18, 0xFE	; 254
   1d3b8:	3d 93       	st	X+, r19
   1d3ba:	30 e3       	ldi	r19, 0x30	; 48
   1d3bc:	2a 95       	dec	r18
   1d3be:	e1 f7       	brne	.-8      	; 0x1d3b8 <__ftoa_engine+0x1e>
   1d3c0:	08 95       	ret
   1d3c2:	9f 3f       	cpi	r25, 0xFF	; 255
   1d3c4:	30 f0       	brcs	.+12     	; 0x1d3d2 <__ftoa_engine+0x38>
   1d3c6:	80 38       	cpi	r24, 0x80	; 128
   1d3c8:	71 05       	cpc	r23, r1
   1d3ca:	61 05       	cpc	r22, r1
   1d3cc:	09 f0       	breq	.+2      	; 0x1d3d0 <__ftoa_engine+0x36>
   1d3ce:	3c 5f       	subi	r19, 0xFC	; 252
   1d3d0:	3c 5f       	subi	r19, 0xFC	; 252
   1d3d2:	3d 93       	st	X+, r19
   1d3d4:	91 30       	cpi	r25, 0x01	; 1
   1d3d6:	08 f0       	brcs	.+2      	; 0x1d3da <__ftoa_engine+0x40>
   1d3d8:	80 68       	ori	r24, 0x80	; 128
   1d3da:	91 1d       	adc	r25, r1
   1d3dc:	df 93       	push	r29
   1d3de:	cf 93       	push	r28
   1d3e0:	1f 93       	push	r17
   1d3e2:	0f 93       	push	r16
   1d3e4:	ff 92       	push	r15
   1d3e6:	ef 92       	push	r14
   1d3e8:	19 2f       	mov	r17, r25
   1d3ea:	98 7f       	andi	r25, 0xF8	; 248
   1d3ec:	96 95       	lsr	r25
   1d3ee:	e9 2f       	mov	r30, r25
   1d3f0:	96 95       	lsr	r25
   1d3f2:	96 95       	lsr	r25
   1d3f4:	e9 0f       	add	r30, r25
   1d3f6:	ff 27       	eor	r31, r31
   1d3f8:	e8 5c       	subi	r30, 0xC8	; 200
   1d3fa:	fd 4f       	sbci	r31, 0xFD	; 253
   1d3fc:	99 27       	eor	r25, r25
   1d3fe:	33 27       	eor	r19, r19
   1d400:	ee 24       	eor	r14, r14
   1d402:	ff 24       	eor	r15, r15
   1d404:	a7 01       	movw	r20, r14
   1d406:	e7 01       	movw	r28, r14
   1d408:	05 90       	lpm	r0, Z+
   1d40a:	08 94       	sec
   1d40c:	07 94       	ror	r0
   1d40e:	28 f4       	brcc	.+10     	; 0x1d41a <__ftoa_engine+0x80>
   1d410:	36 0f       	add	r19, r22
   1d412:	e7 1e       	adc	r14, r23
   1d414:	f8 1e       	adc	r15, r24
   1d416:	49 1f       	adc	r20, r25
   1d418:	51 1d       	adc	r21, r1
   1d41a:	66 0f       	add	r22, r22
   1d41c:	77 1f       	adc	r23, r23
   1d41e:	88 1f       	adc	r24, r24
   1d420:	99 1f       	adc	r25, r25
   1d422:	06 94       	lsr	r0
   1d424:	a1 f7       	brne	.-24     	; 0x1d40e <__ftoa_engine+0x74>
   1d426:	05 90       	lpm	r0, Z+
   1d428:	07 94       	ror	r0
   1d42a:	28 f4       	brcc	.+10     	; 0x1d436 <__ftoa_engine+0x9c>
   1d42c:	e7 0e       	add	r14, r23
   1d42e:	f8 1e       	adc	r15, r24
   1d430:	49 1f       	adc	r20, r25
   1d432:	56 1f       	adc	r21, r22
   1d434:	c1 1d       	adc	r28, r1
   1d436:	77 0f       	add	r23, r23
   1d438:	88 1f       	adc	r24, r24
   1d43a:	99 1f       	adc	r25, r25
   1d43c:	66 1f       	adc	r22, r22
   1d43e:	06 94       	lsr	r0
   1d440:	a1 f7       	brne	.-24     	; 0x1d42a <__ftoa_engine+0x90>
   1d442:	05 90       	lpm	r0, Z+
   1d444:	07 94       	ror	r0
   1d446:	28 f4       	brcc	.+10     	; 0x1d452 <__ftoa_engine+0xb8>
   1d448:	f8 0e       	add	r15, r24
   1d44a:	49 1f       	adc	r20, r25
   1d44c:	56 1f       	adc	r21, r22
   1d44e:	c7 1f       	adc	r28, r23
   1d450:	d1 1d       	adc	r29, r1
   1d452:	88 0f       	add	r24, r24
   1d454:	99 1f       	adc	r25, r25
   1d456:	66 1f       	adc	r22, r22
   1d458:	77 1f       	adc	r23, r23
   1d45a:	06 94       	lsr	r0
   1d45c:	a1 f7       	brne	.-24     	; 0x1d446 <__ftoa_engine+0xac>
   1d45e:	05 90       	lpm	r0, Z+
   1d460:	07 94       	ror	r0
   1d462:	20 f4       	brcc	.+8      	; 0x1d46c <__ftoa_engine+0xd2>
   1d464:	49 0f       	add	r20, r25
   1d466:	56 1f       	adc	r21, r22
   1d468:	c7 1f       	adc	r28, r23
   1d46a:	d8 1f       	adc	r29, r24
   1d46c:	99 0f       	add	r25, r25
   1d46e:	66 1f       	adc	r22, r22
   1d470:	77 1f       	adc	r23, r23
   1d472:	88 1f       	adc	r24, r24
   1d474:	06 94       	lsr	r0
   1d476:	a9 f7       	brne	.-22     	; 0x1d462 <__ftoa_engine+0xc8>
   1d478:	84 91       	lpm	r24, Z
   1d47a:	10 95       	com	r17
   1d47c:	17 70       	andi	r17, 0x07	; 7
   1d47e:	41 f0       	breq	.+16     	; 0x1d490 <__ftoa_engine+0xf6>
   1d480:	d6 95       	lsr	r29
   1d482:	c7 95       	ror	r28
   1d484:	57 95       	ror	r21
   1d486:	47 95       	ror	r20
   1d488:	f7 94       	ror	r15
   1d48a:	e7 94       	ror	r14
   1d48c:	1a 95       	dec	r17
   1d48e:	c1 f7       	brne	.-16     	; 0x1d480 <__ftoa_engine+0xe6>
   1d490:	ee ed       	ldi	r30, 0xDE	; 222
   1d492:	f1 e0       	ldi	r31, 0x01	; 1
   1d494:	68 94       	set
   1d496:	15 90       	lpm	r1, Z+
   1d498:	15 91       	lpm	r17, Z+
   1d49a:	35 91       	lpm	r19, Z+
   1d49c:	65 91       	lpm	r22, Z+
   1d49e:	95 91       	lpm	r25, Z+
   1d4a0:	05 90       	lpm	r0, Z+
   1d4a2:	7f e2       	ldi	r23, 0x2F	; 47
   1d4a4:	73 95       	inc	r23
   1d4a6:	e1 18       	sub	r14, r1
   1d4a8:	f1 0a       	sbc	r15, r17
   1d4aa:	43 0b       	sbc	r20, r19
   1d4ac:	56 0b       	sbc	r21, r22
   1d4ae:	c9 0b       	sbc	r28, r25
   1d4b0:	d0 09       	sbc	r29, r0
   1d4b2:	c0 f7       	brcc	.-16     	; 0x1d4a4 <__ftoa_engine+0x10a>
   1d4b4:	e1 0c       	add	r14, r1
   1d4b6:	f1 1e       	adc	r15, r17
   1d4b8:	43 1f       	adc	r20, r19
   1d4ba:	56 1f       	adc	r21, r22
   1d4bc:	c9 1f       	adc	r28, r25
   1d4be:	d0 1d       	adc	r29, r0
   1d4c0:	7e f4       	brtc	.+30     	; 0x1d4e0 <__ftoa_engine+0x146>
   1d4c2:	70 33       	cpi	r23, 0x30	; 48
   1d4c4:	11 f4       	brne	.+4      	; 0x1d4ca <__ftoa_engine+0x130>
   1d4c6:	8a 95       	dec	r24
   1d4c8:	e6 cf       	rjmp	.-52     	; 0x1d496 <__ftoa_engine+0xfc>
   1d4ca:	e8 94       	clt
   1d4cc:	01 50       	subi	r16, 0x01	; 1
   1d4ce:	30 f0       	brcs	.+12     	; 0x1d4dc <__ftoa_engine+0x142>
   1d4d0:	08 0f       	add	r16, r24
   1d4d2:	0a f4       	brpl	.+2      	; 0x1d4d6 <__ftoa_engine+0x13c>
   1d4d4:	00 27       	eor	r16, r16
   1d4d6:	02 17       	cp	r16, r18
   1d4d8:	08 f4       	brcc	.+2      	; 0x1d4dc <__ftoa_engine+0x142>
   1d4da:	20 2f       	mov	r18, r16
   1d4dc:	23 95       	inc	r18
   1d4de:	02 2f       	mov	r16, r18
   1d4e0:	7a 33       	cpi	r23, 0x3A	; 58
   1d4e2:	28 f0       	brcs	.+10     	; 0x1d4ee <__ftoa_engine+0x154>
   1d4e4:	79 e3       	ldi	r23, 0x39	; 57
   1d4e6:	7d 93       	st	X+, r23
   1d4e8:	2a 95       	dec	r18
   1d4ea:	e9 f7       	brne	.-6      	; 0x1d4e6 <__ftoa_engine+0x14c>
   1d4ec:	10 c0       	rjmp	.+32     	; 0x1d50e <__ftoa_engine+0x174>
   1d4ee:	7d 93       	st	X+, r23
   1d4f0:	2a 95       	dec	r18
   1d4f2:	89 f6       	brne	.-94     	; 0x1d496 <__ftoa_engine+0xfc>
   1d4f4:	06 94       	lsr	r0
   1d4f6:	97 95       	ror	r25
   1d4f8:	67 95       	ror	r22
   1d4fa:	37 95       	ror	r19
   1d4fc:	17 95       	ror	r17
   1d4fe:	17 94       	ror	r1
   1d500:	e1 18       	sub	r14, r1
   1d502:	f1 0a       	sbc	r15, r17
   1d504:	43 0b       	sbc	r20, r19
   1d506:	56 0b       	sbc	r21, r22
   1d508:	c9 0b       	sbc	r28, r25
   1d50a:	d0 09       	sbc	r29, r0
   1d50c:	98 f0       	brcs	.+38     	; 0x1d534 <__ftoa_engine+0x19a>
   1d50e:	23 95       	inc	r18
   1d510:	7e 91       	ld	r23, -X
   1d512:	73 95       	inc	r23
   1d514:	7a 33       	cpi	r23, 0x3A	; 58
   1d516:	08 f0       	brcs	.+2      	; 0x1d51a <__ftoa_engine+0x180>
   1d518:	70 e3       	ldi	r23, 0x30	; 48
   1d51a:	7c 93       	st	X, r23
   1d51c:	20 13       	cpse	r18, r16
   1d51e:	b8 f7       	brcc	.-18     	; 0x1d50e <__ftoa_engine+0x174>
   1d520:	7e 91       	ld	r23, -X
   1d522:	70 61       	ori	r23, 0x10	; 16
   1d524:	7d 93       	st	X+, r23
   1d526:	30 f0       	brcs	.+12     	; 0x1d534 <__ftoa_engine+0x19a>
   1d528:	83 95       	inc	r24
   1d52a:	71 e3       	ldi	r23, 0x31	; 49
   1d52c:	7d 93       	st	X+, r23
   1d52e:	70 e3       	ldi	r23, 0x30	; 48
   1d530:	2a 95       	dec	r18
   1d532:	e1 f7       	brne	.-8      	; 0x1d52c <__ftoa_engine+0x192>
   1d534:	11 24       	eor	r1, r1
   1d536:	ef 90       	pop	r14
   1d538:	ff 90       	pop	r15
   1d53a:	0f 91       	pop	r16
   1d53c:	1f 91       	pop	r17
   1d53e:	cf 91       	pop	r28
   1d540:	df 91       	pop	r29
   1d542:	99 27       	eor	r25, r25
   1d544:	87 fd       	sbrc	r24, 7
   1d546:	90 95       	com	r25
   1d548:	08 95       	ret

0001d54a <strnlen_P>:
   1d54a:	fc 01       	movw	r30, r24
   1d54c:	05 90       	lpm	r0, Z+
   1d54e:	61 50       	subi	r22, 0x01	; 1
   1d550:	70 40       	sbci	r23, 0x00	; 0
   1d552:	01 10       	cpse	r0, r1
   1d554:	d8 f7       	brcc	.-10     	; 0x1d54c <strnlen_P+0x2>
   1d556:	80 95       	com	r24
   1d558:	90 95       	com	r25
   1d55a:	8e 0f       	add	r24, r30
   1d55c:	9f 1f       	adc	r25, r31
   1d55e:	08 95       	ret

0001d560 <memset>:
   1d560:	dc 01       	movw	r26, r24
   1d562:	01 c0       	rjmp	.+2      	; 0x1d566 <memset+0x6>
   1d564:	6d 93       	st	X+, r22
   1d566:	41 50       	subi	r20, 0x01	; 1
   1d568:	50 40       	sbci	r21, 0x00	; 0
   1d56a:	e0 f7       	brcc	.-8      	; 0x1d564 <memset+0x4>
   1d56c:	08 95       	ret

0001d56e <strnlen>:
   1d56e:	fc 01       	movw	r30, r24
   1d570:	61 50       	subi	r22, 0x01	; 1
   1d572:	70 40       	sbci	r23, 0x00	; 0
   1d574:	01 90       	ld	r0, Z+
   1d576:	01 10       	cpse	r0, r1
   1d578:	d8 f7       	brcc	.-10     	; 0x1d570 <strnlen+0x2>
   1d57a:	80 95       	com	r24
   1d57c:	90 95       	com	r25
   1d57e:	8e 0f       	add	r24, r30
   1d580:	9f 1f       	adc	r25, r31
   1d582:	08 95       	ret

0001d584 <__ultoa_invert>:
   1d584:	fa 01       	movw	r30, r20
   1d586:	aa 27       	eor	r26, r26
   1d588:	28 30       	cpi	r18, 0x08	; 8
   1d58a:	51 f1       	breq	.+84     	; 0x1d5e0 <__ultoa_invert+0x5c>
   1d58c:	20 31       	cpi	r18, 0x10	; 16
   1d58e:	81 f1       	breq	.+96     	; 0x1d5f0 <__ultoa_invert+0x6c>
   1d590:	e8 94       	clt
   1d592:	6f 93       	push	r22
   1d594:	6e 7f       	andi	r22, 0xFE	; 254
   1d596:	6e 5f       	subi	r22, 0xFE	; 254
   1d598:	7f 4f       	sbci	r23, 0xFF	; 255
   1d59a:	8f 4f       	sbci	r24, 0xFF	; 255
   1d59c:	9f 4f       	sbci	r25, 0xFF	; 255
   1d59e:	af 4f       	sbci	r26, 0xFF	; 255
   1d5a0:	b1 e0       	ldi	r27, 0x01	; 1
   1d5a2:	3e d0       	rcall	.+124    	; 0x1d620 <__ultoa_invert+0x9c>
   1d5a4:	b4 e0       	ldi	r27, 0x04	; 4
   1d5a6:	3c d0       	rcall	.+120    	; 0x1d620 <__ultoa_invert+0x9c>
   1d5a8:	67 0f       	add	r22, r23
   1d5aa:	78 1f       	adc	r23, r24
   1d5ac:	89 1f       	adc	r24, r25
   1d5ae:	9a 1f       	adc	r25, r26
   1d5b0:	a1 1d       	adc	r26, r1
   1d5b2:	68 0f       	add	r22, r24
   1d5b4:	79 1f       	adc	r23, r25
   1d5b6:	8a 1f       	adc	r24, r26
   1d5b8:	91 1d       	adc	r25, r1
   1d5ba:	a1 1d       	adc	r26, r1
   1d5bc:	6a 0f       	add	r22, r26
   1d5be:	71 1d       	adc	r23, r1
   1d5c0:	81 1d       	adc	r24, r1
   1d5c2:	91 1d       	adc	r25, r1
   1d5c4:	a1 1d       	adc	r26, r1
   1d5c6:	20 d0       	rcall	.+64     	; 0x1d608 <__ultoa_invert+0x84>
   1d5c8:	09 f4       	brne	.+2      	; 0x1d5cc <__ultoa_invert+0x48>
   1d5ca:	68 94       	set
   1d5cc:	3f 91       	pop	r19
   1d5ce:	2a e0       	ldi	r18, 0x0A	; 10
   1d5d0:	26 9f       	mul	r18, r22
   1d5d2:	11 24       	eor	r1, r1
   1d5d4:	30 19       	sub	r19, r0
   1d5d6:	30 5d       	subi	r19, 0xD0	; 208
   1d5d8:	31 93       	st	Z+, r19
   1d5da:	de f6       	brtc	.-74     	; 0x1d592 <__ultoa_invert+0xe>
   1d5dc:	cf 01       	movw	r24, r30
   1d5de:	08 95       	ret
   1d5e0:	46 2f       	mov	r20, r22
   1d5e2:	47 70       	andi	r20, 0x07	; 7
   1d5e4:	40 5d       	subi	r20, 0xD0	; 208
   1d5e6:	41 93       	st	Z+, r20
   1d5e8:	b3 e0       	ldi	r27, 0x03	; 3
   1d5ea:	0f d0       	rcall	.+30     	; 0x1d60a <__ultoa_invert+0x86>
   1d5ec:	c9 f7       	brne	.-14     	; 0x1d5e0 <__ultoa_invert+0x5c>
   1d5ee:	f6 cf       	rjmp	.-20     	; 0x1d5dc <__ultoa_invert+0x58>
   1d5f0:	46 2f       	mov	r20, r22
   1d5f2:	4f 70       	andi	r20, 0x0F	; 15
   1d5f4:	40 5d       	subi	r20, 0xD0	; 208
   1d5f6:	4a 33       	cpi	r20, 0x3A	; 58
   1d5f8:	18 f0       	brcs	.+6      	; 0x1d600 <__ultoa_invert+0x7c>
   1d5fa:	49 5d       	subi	r20, 0xD9	; 217
   1d5fc:	31 fd       	sbrc	r19, 1
   1d5fe:	40 52       	subi	r20, 0x20	; 32
   1d600:	41 93       	st	Z+, r20
   1d602:	02 d0       	rcall	.+4      	; 0x1d608 <__ultoa_invert+0x84>
   1d604:	a9 f7       	brne	.-22     	; 0x1d5f0 <__ultoa_invert+0x6c>
   1d606:	ea cf       	rjmp	.-44     	; 0x1d5dc <__ultoa_invert+0x58>
   1d608:	b4 e0       	ldi	r27, 0x04	; 4
   1d60a:	a6 95       	lsr	r26
   1d60c:	97 95       	ror	r25
   1d60e:	87 95       	ror	r24
   1d610:	77 95       	ror	r23
   1d612:	67 95       	ror	r22
   1d614:	ba 95       	dec	r27
   1d616:	c9 f7       	brne	.-14     	; 0x1d60a <__ultoa_invert+0x86>
   1d618:	00 97       	sbiw	r24, 0x00	; 0
   1d61a:	61 05       	cpc	r22, r1
   1d61c:	71 05       	cpc	r23, r1
   1d61e:	08 95       	ret
   1d620:	9b 01       	movw	r18, r22
   1d622:	ac 01       	movw	r20, r24
   1d624:	0a 2e       	mov	r0, r26
   1d626:	06 94       	lsr	r0
   1d628:	57 95       	ror	r21
   1d62a:	47 95       	ror	r20
   1d62c:	37 95       	ror	r19
   1d62e:	27 95       	ror	r18
   1d630:	ba 95       	dec	r27
   1d632:	c9 f7       	brne	.-14     	; 0x1d626 <__ultoa_invert+0xa2>
   1d634:	62 0f       	add	r22, r18
   1d636:	73 1f       	adc	r23, r19
   1d638:	84 1f       	adc	r24, r20
   1d63a:	95 1f       	adc	r25, r21
   1d63c:	a0 1d       	adc	r26, r0
   1d63e:	08 95       	ret

0001d640 <_exit>:
   1d640:	f8 94       	cli

0001d642 <__stop_program>:
   1d642:	ff cf       	rjmp	.-2      	; 0x1d642 <__stop_program>
