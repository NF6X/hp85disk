
gpib.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00001656  00800100  0001d600  0001d694  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0001d600  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000008e2  00801756  00801756  0001ecea  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0001ecea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0001ecfc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00001730  00000000  00000000  0001ed3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00029324  00000000  00000000  0002046c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000617f  00000000  00000000  00049790  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0001259d  00000000  00000000  0004f90f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00005158  00000000  00000000  00061eac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004ba9  00000000  00000000  00067004  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00024720  00000000  00000000  0006bbad  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001778  00000000  00000000  000902cd  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00800100 l    d  .data	00000000 .data
00000000 l    d  .text	00000000 .text
00801756 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .note.gnu.avr.deviceinfo	00000000 .note.gnu.avr.deviceinfo
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 malloc.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 hal.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000001c2 l     O .text	0000001e __c.3622
000001e0 l     O .text	0000001d __c.3617
00801756 l     O .bss	00000001 error_flag
00000000 l    df *ABS*	00000000 time.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00006d3e l     F .text	0000002a IS_Leap
00800388 l     O .data	00000018 __days
008017ce l     O .bss	00000016 t.3676
008017e4 l     O .bss	00000002 p.3677
008017b0 l     O .bss	00000008 ts.3755
008017b8 l     O .bss	00000016 t.3688
008003a0 l     O .data	0000001a __days_sum
00000719 l     O .text	00000012 __c.3795
00000708 l     O .text	00000011 __c.3797
000006f7 l     O .text	00000011 __c.3799
000006e5 l     O .text	00000012 __c.3801
000006d4 l     O .text	00000011 __c.3803
000006bd l     O .text	00000017 __c.3805
0000072b l     O .text	00000021 __c.3774
0000074c l     O .text	0000001d __c.3649
00801806 l     O .bss	00000020 buf.3654
008017e6 l     O .bss	00000020 buf.3666
000006ab l     O .text	00000012 __c.3851
00000696 l     O .text	00000015 __c.3853
0000067f l     O .text	00000017 __c.3855
00000665 l     O .text	0000001a __c.3857
00000641 l     O .text	00000024 __c.3859
0000062f l     O .text	00000012 __c.3866
0000061e l     O .text	00000011 __c.3868
0000060d l     O .text	00000011 __c.3870
000005fb l     O .text	00000012 __c.3872
000005ea l     O .text	00000011 __c.3874
00000000 l    df *ABS*	00000000 mmc.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000d3e8 l     F .text	00000004 xchg_spi
0000d3ec l     F .text	0000000c deselect
0000d3f8 l     F .text	00000046 rcvr_datablock
0000d462 l     F .text	00000044 select
00000769 l     O .text	00000010 __c.3617
0000d4a6 l     F .text	00000086 send_cmd
0000d52c l     F .text	0000004e xmit_datablock
0080182b l     O .bss	00000001 CardType
0080182d l     O .bss	00000001 Timer1
0080182c l     O .bss	00000001 Timer2
00000000 l    df *ABS*	00000000 posix.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00800ba6 l     O .data	00000014 CSWTCH.97
00000bde l     O .text	00000018 __c.3594
00000bc6 l     O .text	00000018 __c.3601
0000ece2 l     F .text	0000001a _fprintf_putc
00801938 l     O .bss	0000002e _dp
00801838 l     O .bss	00000100 _de
00000bb2 l     O .text	00000008 __c.3917
00000bae l     O .text	00000004 __c.3919
00000bba l     O .text	0000000c __c.3672
00000000 l    df *ABS*	00000000 posix_tests.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000e84 l     O .text	00000010 __c.3618
00000dbe l     O .text	000000c6 __c.3620
00000d1b l     O .text	0000000c __c.3687
00000d0b l     O .text	00000010 __c.3689
00000cfe l     O .text	0000000d __c.3691
00000cee l     O .text	00000010 __c.3693
00000ce1 l     O .text	0000000d __c.3695
00000cc5 l     O .text	0000000f __c.3700
00000cd4 l     O .text	0000000d __c.3697
00000cb2 l     O .text	00000013 __c.3704
00800180 l     O .data	00000002 _pagesize
00000cab l     O .text	00000007 __c.3714
00000ca9 l     O .text	00000002 __c.3716
00000d34 l     O .text	00000010 __c.3669
00000d32 l     O .text	00000002 __c.3674
00000d27 l     O .text	0000000b __c.3676
00000c97 l     O .text	00000012 __c.3728
00000c93 l     O .text	00000004 __c.3730
00000c79 l     O .text	0000001a __c.3735
00000c58 l     O .text	00000021 __c.3748
00000c42 l     O .text	00000016 __c.3750
00000c34 l     O .text	0000000e __c.3752
00000c01 l     O .text	00000023 __c.3760
00000c24 l     O .text	00000010 __c.3757
00000bf6 l     O .text	0000000b __c.3764
00000dad l     O .text	00000011 __c.3636
00000d95 l     O .text	00000018 __c.3640
00000d84 l     O .text	00000011 __c.3647
00000d78 l     O .text	0000000c __c.3651
00000d74 l     O .text	00000004 __c.3653
00000d63 l     O .text	00000011 __c.3655
00000d55 l     O .text	0000000e __c.3657
00000d44 l     O .text	00000011 __c.3659
00000000 l    df *ABS*	00000000 gpib.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000122c l     O .text	00000011 __c.4245
00001219 l     O .text	00000013 __c.4257
000011f3 l     O .text	00000026 __c.4262
000011d8 l     O .text	0000001b __c.4264
000011b1 l     O .text	00000027 __c.4269
00001196 l     O .text	0000001b __c.4271
00001168 l     O .text	0000002e __c.4287
00001063 l     O .text	0000002f __c.4318
00001092 l     O .text	0000003c __c.4314
0000110a l     O .text	0000003f __c.4308
000010ce l     O .text	0000003c __c.4310
00001149 l     O .text	0000001f __c.4303
00001050 l     O .text	00000013 __c.4323
00001029 l     O .text	00000009 __c.4365
00001023 l     O .text	00000006 __c.4367
00001018 l     O .text	0000000b __c.4371
0000100d l     O .text	0000000b __c.4373
00001002 l     O .text	0000000b __c.4375
00001032 l     O .text	0000001e __c.4339
00000fe9 l     O .text	00000019 __c.4391
00000fbc l     O .text	0000002d __c.4394
00000f95 l     O .text	00000027 __c.4398
00000f7b l     O .text	0000001a __c.4408
00000f4d l     O .text	0000002e __c.4410
00000f33 l     O .text	0000001a __c.4415
00000f0b l     O .text	00000028 __c.4423
00000000 l    df *ABS*	00000000 gpib_task.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000014df l     O .text	00000012 __c.4253
000014ce l     O .text	00000011 __c.4255
000014b5 l     O .text	00000019 __c.4257
0000149b l     O .text	0000001a __c.4303
00001470 l     O .text	0000002b __c.4305
00001459 l     O .text	00000017 __c.4307
0000144d l     O .text	0000000c __c.4309
00001447 l     O .text	00000006 __c.4313
00001435 l     O .text	00000012 __c.4315
0000142e l     O .text	00000007 __c.4320
00001423 l     O .text	0000000b __c.4322
0000141c l     O .text	00000007 __c.4324
0000140f l     O .text	0000000d __c.4326
000013fe l     O .text	00000011 __c.4328
000013dd l     O .text	00000021 __c.4355
000013c3 l     O .text	0000001a __c.4357
000013ab l     O .text	00000018 __c.4362
00001393 l     O .text	00000018 __c.4364
0000138c l     O .text	00000007 __c.4366
00001385 l     O .text	00000007 __c.4368
0000137e l     O .text	00000007 __c.4370
00001372 l     O .text	0000000c __c.4372
00001365 l     O .text	0000000d __c.4374
0000135e l     O .text	00000007 __c.4376
0000133d l     O .text	00000021 __c.4378
000012ea l     O .text	00000007 __c.4398
000012d9 l     O .text	00000011 __c.4400
000012c7 l     O .text	00000012 __c.4402
000012b3 l     O .text	00000014 __c.4404
000012a3 l     O .text	00000010 __c.4406
00001297 l     O .text	0000000c __c.4408
00001286 l     O .text	00000011 __c.4413
00001274 l     O .text	00000012 __c.4415
0000124e l     O .text	00000026 __c.4417
0000123d l     O .text	00000011 __c.4422
00001336 l     O .text	00000007 __c.4383
00001334 l     O .text	00000002 __c.4385
00001322 l     O .text	00000012 __c.4387
00001311 l     O .text	00000011 __c.4389
000012fd l     O .text	00000014 __c.4391
000012f1 l     O .text	0000000c __c.4393
00000000 l    df *ABS*	00000000 drives.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00002138 l     O .text	00000015 __c.4472
0000212c l     O .text	0000000c __c.4483
00002128 l     O .text	00000004 __c.4493
00001df2 l     O .text	00000012 __c.4639
00001dd4 l     O .text	00000002 __c.4648
00001dd6 l     O .text	00000009 __c.4646
00001ddf l     O .text	0000000a __c.4644
00001de9 l     O .text	00000009 __c.4642
00001dd2 l     O .text	00000002 __c.4653
00001db2 l     O .text	00000020 __c.4662
00001d37 l     O .text	00000002 __c.4677
00001d6c l     O .text	0000000a __c.4671
00001d4d l     O .text	0000001f __c.4673
00001d39 l     O .text	00000014 __c.4675
00001da9 l     O .text	00000009 __c.4665
00001d8a l     O .text	0000001f __c.4667
00001d76 l     O .text	00000014 __c.4669
00001d35 l     O .text	00000002 __c.4682
00001d10 l     O .text	00000025 __c.4721
00001cd7 l     O .text	00000039 __c.4723
00001ca2 l     O .text	00000035 __c.4725
00001c6d l     O .text	00000035 __c.4727
00001c35 l     O .text	00000038 __c.4729
00001c0a l     O .text	0000002b __c.4731
00001be6 l     O .text	00000024 __c.4752
00001bc4 l     O .text	00000022 __c.4760
0080197e l     O .bss	00000002 stack_ind
00801974 l     O .bss	0000000a stack_p
00001b9c l     O .text	00000028 __c.4796
00001b74 l     O .text	00000028 __c.4802
00001a51 l     O .text	0000001a __c.4856
00001a49 l     O .text	00000008 __c.4858
00001a6b l     O .text	00000022 __c.4854
00001a95 l     O .text	0000001a __c.4850
00001a8d l     O .text	00000008 __c.4852
00001aaf l     O .text	00000022 __c.4848
00001a39 l     O .text	00000010 __c.4866
00001854 l     O .text	000001e5 __c.4868
0000184b l     O .text	00000009 __c.4872
00001843 l     O .text	00000008 __c.4918
00001831 l     O .text	00000012 __c.4920
0000180e l     O .text	00000023 __c.4922
000017ef l     O .text	0000001f __c.4924
0000170e l     O .text	00000015 __c.4955
000016f9 l     O .text	00000015 __c.4957
000016e7 l     O .text	00000012 __c.4959
00001b59 l     O .text	0000001b __c.4818
00001b23 l     O .text	00000036 __c.4824
00001aec l     O .text	00000037 __c.4826
00001ad1 l     O .text	0000001b __c.4828
0000211b l     O .text	0000000d __c.4514
00001e6a l     O .text	00000022 __c.4625
00001e8c l     O .text	00000030 __c.4622
00001ebc l     O .text	0000002f __c.4613
00001eeb l     O .text	00000030 __c.4610
00001f1b l     O .text	0000002e __c.4601
00001f49 l     O .text	0000002e __c.4593
000020fd l     O .text	0000001e __c.4516
000020db l     O .text	00000022 __c.4519
000020b9 l     O .text	00000022 __c.4530
0000208f l     O .text	0000002a __c.4534
0000205e l     O .text	00000031 __c.4537
00002031 l     O .text	0000002d __c.4547
00002003 l     O .text	0000002e __c.4555
00001fd5 l     O .text	0000002e __c.4558
00001fa3 l     O .text	00000032 __c.4566
00001f77 l     O .text	0000002c __c.4583
00001e48 l     O .text	00000022 __c.4629
00001e2b l     O .text	0000001d __c.4631
00001e04 l     O .text	00000027 __c.4633
000016d7 l     O .text	00000010 __c.4964
000016d5 l     O .text	00000002 __c.4969
000017c9 l     O .text	00000026 __c.4935
000017a1 l     O .text	00000028 __c.4937
00001777 l     O .text	0000002a __c.4941
0000174c l     O .text	0000002b __c.4945
00001723 l     O .text	00000029 __c.4947
00000000 l    df *ABS*	00000000 ss80.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
008019a0 l     O .bss	00000005 B.4258
0080198d l     O .bss	00000013 B.4262
00801980 l     O .bss	0000000d B.4266
000027ed l     O .text	00000005 __c.4369
000027e2 l     O .text	0000000b __c.4371
000027ce l     O .text	00000014 __c.4381
000027b3 l     O .text	0000001b __c.4383
000027a2 l     O .text	00000011 __c.4391
0000277f l     O .text	00000023 __c.4393
00002762 l     O .text	0000001d __c.4395
00002743 l     O .text	0000001f __c.4397
0000272b l     O .text	00000018 __c.4402
00002711 l     O .text	0000001a __c.4407
000026eb l     O .text	00000026 __c.4416
000026d2 l     O .text	00000019 __c.4418
000025d6 l     O .text	00000025 __c.4440
000025fb l     O .text	0000001a __c.4438
00002615 l     O .text	00000016 __c.4436
0000262b l     O .text	0000000e __c.4434
00002639 l     O .text	0000001c __c.4432
00002655 l     O .text	0000001d __c.4430
000026bc l     O .text	00000016 __c.4420
000026a3 l     O .text	00000019 __c.4423
0000268b l     O .text	00000018 __c.4425
00002672 l     O .text	00000019 __c.4428
000025b5 l     O .text	00000021 __c.4442
0000259f l     O .text	00000016 __c.4444
00002582 l     O .text	0000001d __c.4446
00002566 l     O .text	0000001c __c.4448
00002555 l     O .text	00000011 __c.4450
00002537 l     O .text	0000001e __c.4452
00002518 l     O .text	0000001f __c.4454
000024fd l     O .text	0000001b __c.4456
000024e4 l     O .text	00000019 __c.4458
000024cd l     O .text	00000017 __c.4460
000024aa l     O .text	00000023 __c.4462
0000248a l     O .text	00000020 __c.4464
00002452 l     O .text	00000038 __c.4467
0000230f l     O .text	00000020 __c.4500
000022fb l     O .text	00000014 __c.4502
00002892 l     O .text	00000029 __c.4330
00002845 l     O .text	00000026 __c.4338
0000286b l     O .text	00000014 __c.4336
0000287f l     O .text	00000013 __c.4332
0000281d l     O .text	00000028 __c.4342
000027f2 l     O .text	0000002b __c.4344
000022e1 l     O .text	0000001a __c.4509
000022ce l     O .text	00000013 __c.4511
0000299b l     O .text	00000013 __c.4272
000022c2 l     O .text	0000000c __c.4525
000022af l     O .text	00000013 __c.4532
000022a0 l     O .text	0000000f __c.4534
0000243f l     O .text	00000013 __c.4476
00002426 l     O .text	00000019 __c.4478
00002401 l     O .text	00000025 __c.4481
000023e4 l     O .text	0000001d __c.4484
000023c6 l     O .text	0000001e __c.4486
0000239f l     O .text	00000027 __c.4488
0000238b l     O .text	00000014 __c.4490
0000236b l     O .text	00000020 __c.4492
0000232f l     O .text	0000003c __c.4495
0000227d l     O .text	00000023 __c.4548
00002957 l     O .text	00000028 __c.4305
00002939 l     O .text	0000001e __c.4307
00002908 l     O .text	00000019 __c.4311
00002921 l     O .text	00000018 __c.4309
000028e3 l     O .text	00000025 __c.4316
000028bb l     O .text	00000028 __c.4318
0000297f l     O .text	0000001c __c.4288
00002267 l     O .text	00000016 __c.4553
00002251 l     O .text	00000016 __c.4555
0000223c l     O .text	00000015 __c.4557
0000222d l     O .text	0000000f __c.4559
00002219 l     O .text	00000014 __c.4561
000021e5 l     O .text	00000034 __c.4563
000021b1 l     O .text	00000034 __c.4565
00000000 l    df *ABS*	00000000 main.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
008019f2 l     O .bss	00000002 lcd_display_time
00004bf6 l     O .text	0000003b __c.4471
00004bd9 l     O .text	0000001d __c.4473
00004bc9 l     O .text	00000010 __c.4475
00004ba2 l     O .text	00000027 __c.4477
00004b88 l     O .text	0000001a __c.4479
00004b6e l     O .text	0000001a __c.4481
00004b6c l     O .text	00000002 __c.4483
00004b56 l     O .text	00000016 __c.4497
00004b3c l     O .text	0000001a __c.4503
00004b1e l     O .text	0000001e __c.4509
00004b08 l     O .text	00000016 __c.4511
00004b02 l     O .text	00000006 __c.4513
00004afc l     O .text	00000006 __c.4515
00004ae2 l     O .text	0000001a __c.4517
00004adc l     O .text	00000006 __c.4524
00004ad6 l     O .text	00000006 __c.4526
00004ab2 l     O .text	00000024 __c.4533
000049f8 l     O .text	000000ba __c.4535
0001c502 l     F .text	000003ac user_task.part.1
000049f5 l     O .text	00000003 __c.4548
000049e0 l     O .text	00000015 __c.4550
000049d7 l     O .text	00000009 __c.4552
000049c2 l     O .text	00000015 __c.4557
000049be l     O .text	00000004 __c.4565
000049ae l     O .text	00000010 __c.4567
0000499d l     O .text	00000011 __c.4569
00004984 l     O .text	00000019 __c.4571
00004977 l     O .text	0000000d __c.4573
00004966 l     O .text	00000011 __c.4581
00004960 l     O .text	00000006 __c.4583
00004959 l     O .text	00000007 __c.4591
00004948 l     O .text	00000011 __c.4593
00004921 l     O .text	00000027 __c.4595
00004902 l     O .text	0000001f __c.4597
000048e5 l     O .text	0000001d __c.4599
000048d5 l     O .text	00000010 __c.4601
000048ae l     O .text	00000027 __c.4603
00004894 l     O .text	0000001a __c.4605
0000487a l     O .text	0000001a __c.4607
00004864 l     O .text	00000016 __c.4609
0000484e l     O .text	00000016 __c.4611
0000483c l     O .text	00000012 __c.4613
0000482d l     O .text	0000000f __c.4615
000047ff l     O .text	0000002e __c.4617
000047e7 l     O .text	00000018 __c.4619
000047d6 l     O .text	00000011 __c.4621
000047c0 l     O .text	00000016 __c.4623
000047ab l     O .text	00000015 __c.4625
00004799 l     O .text	00000012 __c.4627
00004781 l     O .text	00000018 __c.4629
0000476c l     O .text	00000015 __c.4631
00004756 l     O .text	00000016 __c.4633
00004740 l     O .text	00000016 __c.4635
0000473a l     O .text	00000006 __c.4637
00004720 l     O .text	0000001a __c.4639
0000470c l     O .text	00000014 __c.4641
00000000 l    df *ABS*	00000000 i2c.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000429 l     O .text	00000018 __c.3593
00000410 l     O .text	00000019 __c.3595
000003fa l     O .text	00000016 __c.3597
000003de l     O .text	0000001c __c.3640
0080175d l     O .bss	00000001 i2c_init_status
000003c7 l     O .text	00000017 __c.3646
00005bc0 l     F .text	00000014 i2c_next
000003c1 l     O .text	00000006 __c.3696
000003b3 l     O .text	0000000e __c.3698
000003a9 l     O .text	0000000a __c.3700
0000039d l     O .text	0000000c __c.3702
0000038b l     O .text	00000012 __c.3704
00000379 l     O .text	00000012 __c.3706
00000366 l     O .text	00000013 __c.3708
00000364 l     O .text	00000002 __c.3710
00000351 l     O .text	00000013 __c.3715
0000033d l     O .text	00000014 __c.3717
00000333 l     O .text	0000000a __c.3719
00000331 l     O .text	00000002 __c.3721
00000000 l    df *ABS*	00000000 parsing.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000051e l     O .text	00000020 __c.3586
000004f8 l     O .text	00000026 __c.3629
00000000 l    df *ABS*	00000000 printf.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00007cb2 l     F .text	00000018 _putc_fn
00000000 l    df *ABS*	00000000 ff.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00008fac l     F .text	0000002a ld_dword
00008fd6 l     F .text	0000000c st_dword
00008fe2 l     F .text	00000012 mem_set
00008ff4 l     F .text	0000001e mem_cmp
00009012 l     F .text	00000050 clst2sect
00009062 l     F .text	00000078 clmt_clust
000090da l     F .text	0000001e sum_sfn
0080046b l     O .data	00000080 ExCvt
000090f8 l     F .text	00000058 get_ldnumber
00801826 l     O .bss	00000001 CurrVol
00009150 l     F .text	00000058 validate
000091a8 l     F .text	00000254 get_fileinfo
000093fc l     F .text	00000016 mem_cpy.part.0
00009412 l     F .text	0000002a ld_clust.isra.3
0000943c l     F .text	0000001a st_clust.isra.4
00009456 l     F .text	000000a6 sync_window.part.5
000094fc l     F .text	000000e4 sync_fs
000095e0 l     F .text	00000150 dir_clear
00009730 l     F .text	00000076 move_window
000097a6 l     F .text	00000080 check_fs
00009826 l     F .text	000004b4 mount_volume
00801829 l     O .bss	00000002 FatFs
00801827 l     O .bss	00000002 Fsid
00009cda l     F .text	000001f2 put_fat
00009ecc l     F .text	00000168 get_fat.isra.9
0000a034 l     F .text	00000182 dir_sdi
0000a1b6 l     F .text	0000024c create_chain
0000a402 l     F .text	00000122 remove_chain
0000a524 l     F .text	000001d0 dir_next
0000a6f4 l     F .text	00000072 dir_alloc
0000a766 l     F .text	00000192 dir_read
008004eb l     O .data	0000000d LfnOfs
0000a8f8 l     F .text	00000090 dir_remove
0000a988 l     F .text	0000021c dir_find
0000aba4 l     F .text	0000031c dir_register
0000aec0 l     F .text	00000478 follow_path
00000000 l    df *ABS*	00000000 ffunicode.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
008007a6 l     O .data	00000100 uc437
008004f8 l     O .data	000000bc cvt2.1843
008005b4 l     O .data	000001f2 cvt1.1842
00000000 l    df *ABS*	00000000 mmc_hal.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000de56 l     F .text	00000048 mmc_task
00000827 l     O .text	0000001c __c.3594
0000081a l     O .text	0000000d __c.3622
0000080a l     O .text	00000010 __c.3636
0080182e l     O .bss	00000002 mmc_init_flag
000007ea l     O .text	00000020 __c.3638
000007d7 l     O .text	00000013 __c.3640
000007cb l     O .text	0000000c __c.3642
000007ba l     O .text	00000011 __c.3644
0000079c l     O .text	0000001e __c.3647
00000787 l     O .text	00000015 __c.3649
00000779 l     O .text	0000000e __c.3651
00000000 l    df *ABS*	00000000 fatfs_sup.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000a9c l     O .text	00000007 __c.3596
008008ca l     O .data	00000008 CSWTCH.25
00000a8b l     O .text	00000011 __c.3632
00000a6c l     O .text	0000001f __c.3634
00000a4e l     O .text	0000001e __c.3636
00000a2f l     O .text	0000001f __c.3638
00000a11 l     O .text	0000001e __c.3640
000009f3 l     O .text	0000001e __c.3642
000009d4 l     O .text	0000001f __c.3644
000009b5 l     O .text	0000001f __c.3646
00000996 l     O .text	0000001f __c.3648
00000977 l     O .text	0000001f __c.3650
00000958 l     O .text	0000001f __c.3652
00000938 l     O .text	00000020 __c.3654
0000091a l     O .text	0000001e __c.3656
000008f5 l     O .text	00000025 __c.3658
000008cf l     O .text	00000026 __c.3660
00000882 l     O .text	0000004d __c.3662
00000867 l     O .text	0000001b __c.3668
00000845 l     O .text	00000022 __c.3670
00000843 l     O .text	00000002 __c.3672
00000000 l    df *ABS*	00000000 fatfs_tests.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000b31 l     O .text	0000007d __c.3587
00000b21 l     O .text	00000010 __c.3589
00000ae1 l     O .text	0000000e __c.3624
00000ab8 l     O .text	00000029 __c.3628
00000aa3 l     O .text	00000015 __c.3630
00000b11 l     O .text	00000010 __c.3607
00000afd l     O .text	00000014 __c.3609
00000aef l     O .text	0000000e __c.3611
00000000 l    df *ABS*	00000000 gpib_tests.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000016c6 l     O .text	0000000f __c.4438
000014fe l     O .text	000001c8 __c.4440
000014f1 l     O .text	0000000d __c.4448
00000000 l    df *ABS*	00000000 drives_sup.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000218d l     O .text	00000007 __c.3641
00002194 l     O .text	0000001d __c.3637
0000216f l     O .text	0000001e __c.3643
0000214d l     O .text	00000022 __c.3648
00000000 l    df *ABS*	00000000 amigo.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0001657e l     F .text	000000ac amigo_overflow_check
00003169 l     O .text	00000019 __c.4195
0001662a l     F .text	000000e8 amigo_chs_to_logical
00003116 l     O .text	0000002b __c.4188
000031e9 l     O .text	00000018 __c.4165
000031cb l     O .text	0000001e __c.4171
000031b1 l     O .text	0000001a __c.4173
0000319c l     O .text	00000015 __c.4179
00003182 l     O .text	0000001a __c.4181
00003141 l     O .text	00000028 __c.4218
00003106 l     O .text	00000010 __c.4229
000030f1 l     O .text	00000015 __c.4233
000030df l     O .text	00000012 __c.4239
000030c5 l     O .text	0000001a __c.4245
000030b3 l     O .text	00000012 __c.4252
00003094 l     O .text	0000001f __c.4254
00003074 l     O .text	00000020 __c.4256
0000305a l     O .text	0000001a __c.4263
0000304d l     O .text	0000000d __c.4265
0000303e l     O .text	0000000f __c.4278
00002fd7 l     O .text	00000067 __c.4285
00002f70 l     O .text	00000067 __c.4287
00002f09 l     O .text	00000067 __c.4289
00002ea4 l     O .text	00000065 __c.4291
00002e54 l     O .text	00000050 __c.4296
00002e04 l     O .text	00000050 __c.4298
00002db4 l     O .text	00000050 __c.4300
00002d63 l     O .text	00000051 __c.4302
00002d31 l     O .text	00000032 __c.4314
00002d0f l     O .text	00000022 __c.4316
00002cee l     O .text	00000021 __c.4318
00002ccd l     O .text	00000021 __c.4320
00002c9e l     O .text	0000002f __c.4322
00002c7e l     O .text	00000020 __c.4325
00002c6a l     O .text	00000014 __c.4328
00002c56 l     O .text	00000014 __c.4331
00002c2d l     O .text	00000029 __c.4333
00002c0c l     O .text	00000021 __c.4335
00002bfc l     O .text	00000010 __c.4338
00002bda l     O .text	00000022 __c.4340
00002bbe l     O .text	0000001c __c.4342
00002b95 l     O .text	00000029 __c.4344
00002b75 l     O .text	00000020 __c.4346
00002b4a l     O .text	0000002b __c.4348
00002b2b l     O .text	0000001f __c.4350
00002b1b l     O .text	00000010 __c.4353
00002ae9 l     O .text	00000032 __c.4358
00002ac9 l     O .text	00000020 __c.4362
00002aa8 l     O .text	00000021 __c.4365
00002a89 l     O .text	0000001f __c.4368
00002a67 l     O .text	00000022 __c.4371
00002a4b l     O .text	0000001c __c.4374
00002a2b l     O .text	00000020 __c.4377
00002a02 l     O .text	00000029 __c.4382
000029d7 l     O .text	0000002b __c.4385
000029ae l     O .text	00000029 __c.4388
00000000 l    df *ABS*	00000000 printer.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000323e l     O .text	00000021 __c.4137
0000326d l     O .text	00000015 __c.4129
0000325f l     O .text	0000000e __c.4131
000032a4 l     O .text	00000022 __c.4119
0000328e l     O .text	00000016 __c.4121
00003282 l     O .text	0000000c __c.4123
00003237 l     O .text	00000007 __c.4143
0000321b l     O .text	0000001c __c.4148
00003201 l     O .text	0000001a __c.4150
00000000 l    df *ABS*	00000000 lifutils.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000046fc l     O .text	00000010 __c.3845
00004538 l     O .text	000001c4 __c.3847
000044d1 l     O .text	00000029 __c.3868
000044b9 l     O .text	00000018 __c.3873
00004494 l     O .text	00000025 __c.3885
0000447b l     O .text	00000019 __c.3891
0000445a l     O .text	00000021 __c.3898
0000441e l     O .text	0000003c __c.3907
000043e1 l     O .text	0000003d __c.3916
008019d2 l     O .bss	00000020 _lif_ctime_buf.4019
008019b2 l     O .bss	00000020 _timestr.4024
000043dc l     O .text	00000005 __c.4039
000043c2 l     O .text	0000001a __c.4041
000043a5 l     O .text	0000001d __c.4043
00004388 l     O .text	0000001d __c.4045
0000436b l     O .text	0000001d __c.4047
0000434e l     O .text	0000001d __c.4049
00004331 l     O .text	0000001d __c.4051
00004314 l     O .text	0000001d __c.4053
000042f7 l     O .text	0000001d __c.4055
000042da l     O .text	0000001d __c.4057
000042c0 l     O .text	0000001a __c.4059
000042a4 l     O .text	0000001c __c.4061
00004287 l     O .text	0000001d __c.4063
0000426a l     O .text	0000001d __c.4065
0000424e l     O .text	0000001c __c.4067
00004232 l     O .text	0000001c __c.4069
00004218 l     O .text	0000001a __c.4071
000041fe l     O .text	0000001a __c.4073
000041e2 l     O .text	0000001c __c.4075
000041c6 l     O .text	0000001c __c.4077
000041a9 l     O .text	0000001d __c.4079
0000418c l     O .text	0000001d __c.4081
0000416f l     O .text	0000001d __c.4083
00004153 l     O .text	0000001c __c.4085
00004139 l     O .text	0000001a __c.4087
00004137 l     O .text	00000002 __c.4089
00004118 l     O .text	0000001f __c.4096
000040df l     O .text	00000039 __c.4098
000040c7 l     O .text	00000018 __c.4100
0000408e l     O .text	00000039 __c.4102
00004055 l     O .text	00000039 __c.4104
00004030 l     O .text	00000025 __c.4106
00004001 l     O .text	0000002f __c.4108
00003fd5 l     O .text	0000002c __c.4110
00003fb4 l     O .text	00000021 __c.4116
00003f70 l     O .text	00000044 __c.4118
00003f2f l     O .text	00000041 __c.4120
00003f01 l     O .text	0000002e __c.4122
00003eb6 l     O .text	0000004b __c.4124
00003e6b l     O .text	0000004b __c.4126
00003e40 l     O .text	0000002b __c.4128
00003e14 l     O .text	0000002c __c.4130
00003d51 l     O .text	0000003a __c.4185
00003d31 l     O .text	00000020 __c.4194
00003ce4 l     O .text	0000004d __c.4219
00003dbf l     O .text	00000055 __c.4146
00003db2 l     O .text	0000000d __c.4148
00003da5 l     O .text	0000000d __c.4156
00003d98 l     O .text	0000000d __c.4161
00003d8b l     O .text	0000000d __c.4166
00003cac l     O .text	00000038 __c.4231
00003c83 l     O .text	00000029 __c.4233
00003c32 l     O .text	00000051 __c.4236
00003bf3 l     O .text	0000003f __c.4249
00003bbd l     O .text	00000036 __c.4251
00003b8a l     O .text	00000033 __c.4253
00003b57 l     O .text	00000033 __c.4255
00003b40 l     O .text	00000017 __c.4265
00003b00 l     O .text	00000040 __c.4267
00003ab4 l     O .text	0000004c __c.4270
00003a84 l     O .text	00000030 __c.4272
00003a82 l     O .text	00000002 __c.4275
00003a76 l     O .text	0000000c __c.4277
00003a69 l     O .text	0000000d __c.4279
00003a58 l     O .text	00000011 __c.4281
00003a45 l     O .text	00000013 __c.4283
00003a32 l     O .text	00000013 __c.4285
00003a1f l     O .text	00000013 __c.4287
000039f8 l     O .text	00000027 __c.4294
000039d3 l     O .text	00000025 __c.4296
0000399a l     O .text	00000039 __c.4310
00003976 l     O .text	00000024 __c.4327
00003968 l     O .text	0000000e __c.4344
0000395a l     O .text	0000000e __c.4349
0000394c l     O .text	0000000e __c.4351
00003919 l     O .text	00000033 __c.4365
000038eb l     O .text	0000002e __c.4367
000038bc l     O .text	0000002f __c.4369
0000388c l     O .text	00000030 __c.4371
0000385d l     O .text	0000002f __c.4373
0000382d l     O .text	00000030 __c.4375
00003806 l     O .text	00000027 __c.4377
000037ef l     O .text	00000017 __c.4379
000037d8 l     O .text	00000017 __c.4381
000037bf l     O .text	00000019 __c.4383
000037a6 l     O .text	00000019 __c.4385
00003798 l     O .text	0000000e __c.4387
00003780 l     O .text	00000018 __c.4411
00003769 l     O .text	00000017 __c.4413
00003731 l     O .text	00000038 __c.4415
00003721 l     O .text	00000010 __c.4417
00003660 l     O .text	0000000e __c.4428
0000366e l     O .text	00000028 __c.4426
000036ec l     O .text	00000035 __c.4421
00003696 l     O .text	00000056 __c.4423
00003638 l     O .text	00000028 __c.4436
0000362a l     O .text	0000000e __c.4439
00003612 l     O .text	00000018 __c.4456
000035ff l     O .text	00000013 __c.4458
000035f1 l     O .text	0000000e __c.4460
000035e3 l     O .text	0000000e __c.4465
000035c3 l     O .text	00000020 __c.4482
000035a8 l     O .text	0000001b __c.4484
0000358c l     O .text	0000001c __c.4486
0000355d l     O .text	0000002f __c.4488
0000354a l     O .text	00000013 __c.4490
0000351a l     O .text	00000030 __c.4492
0000350c l     O .text	0000000e __c.4494
000034fe l     O .text	0000000e __c.4499
000034d9 l     O .text	00000025 __c.4507
000034b9 l     O .text	00000020 __c.4509
0000349a l     O .text	0000001f __c.4511
00003472 l     O .text	00000028 __c.4513
00003463 l     O .text	0000000f __c.4515
0000343b l     O .text	00000028 __c.4524
00003414 l     O .text	00000027 __c.4526
000033ed l     O .text	00000027 __c.4528
000033b7 l     O .text	00000036 __c.4530
0000338e l     O .text	00000029 __c.4532
00003377 l     O .text	00000017 __c.4534
0000334e l     O .text	00000029 __c.4547
00003329 l     O .text	00000025 __c.4549
00003306 l     O .text	00000023 __c.4551
000032e6 l     O .text	00000020 __c.4553
000032c6 l     O .text	00000020 __c.4555
00004517 l     O .text	00000021 __c.3860
000044fa l     O .text	0000001d __c.3862
00000000 l    df *ABS*	00000000 ram.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000307 l     O .text	0000000d __c.3604
000002f4 l     O .text	00000013 __c.3606
000002e1 l     O .text	00000013 __c.3608
000002c3 l     O .text	0000001e __c.3610
000002a5 l     O .text	0000001e __c.3612
00000287 l     O .text	0000001e __c.3614
00000269 l     O .text	0000001e __c.3616
00000255 l     O .text	00000014 __c.3618
0000023a l     O .text	0000001b __c.3633
00000222 l     O .text	00000018 __c.3639
000001fd l     O .text	00000025 __c.3648
00000000 l    df *ABS*	00000000 spi.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00801759 l     O .bss	00000004 SPI0_Speed_value
00000314 l     O .text	0000001d __c.3602
00801757 l     O .bss	00000002 SPI0_Mode_value
00000000 l    df *ABS*	00000000 rtc.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000004de l     O .text	0000001a __c.3601
000004c2 l     O .text	0000001c __c.3609
000004a9 l     O .text	00000019 __c.3611
00000498 l     O .text	00000011 __c.3619
00000488 l     O .text	00000010 __c.3625
00000474 l     O .text	00000014 __c.3631
0000045f l     O .text	00000015 __c.3633
00000441 l     O .text	0000001e __c.3643
00000000 l    df *ABS*	00000000 timer.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00006940 l     F .text	0000007c clock_settime.part.2
000005cd l     O .text	0000001d __c.3599
000005c3 l     O .text	0000000a __c.3619
0080178c l     O .bss	00000020 _ts_to_str
00801784 l     O .bss	00000008 __clock_elapsed
000005b5 l     O .text	0000000e __c.3633
000005aa l     O .text	0000000b __c.3635
008017ac l     O .bss	00000002 timers_configured
008017ae l     O .bss	00000002 timers_enabled
00000596 l     O .text	00000014 __c.3655
00000583 l     O .text	00000013 __c.3657
00000577 l     O .text	0000000c __c.3659
0000055f l     O .text	00000018 __c.3661
0000054e l     O .text	00000011 __c.3663
0000053e l     O .text	00000010 __c.3665
00000000 l    df *ABS*	00000000 gpib_hal.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000eee l     O .text	0000001d __c.3744
00801966 l     O .bss	00000001 _ppr_reg
00000edb l     O .text	00000013 __c.3762
00000eca l     O .text	00000011 __c.3776
00000ebd l     O .text	0000000d __c.3785
00000eaf l     O .text	0000000e __c.3794
00000ea2 l     O .text	0000000d __c.3801
00000e94 l     O .text	0000000e __c.3807
00000000 l    df *ABS*	00000000 _clear_bss.o
00004c62 l       .text	00000000 .do_clear_bss_start
00004c60 l       .text	00000000 .do_clear_bss_loop
00000000 l    df *ABS*	00000000 delay.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 rs232.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 stringsup.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 timer_hal.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 mathio.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 ffsystem.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 diskio.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 vector.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 _udivmodqi4.o
0001cccc l       .text	00000000 __udivmodqi4_ep
0001ccc4 l       .text	00000000 __udivmodqi4_loop
00000000 l    df *ABS*	00000000 _udivmodhi4.o
0001ccec l       .text	00000000 __udivmodhi4_ep
0001ccde l       .text	00000000 __udivmodhi4_loop
00000000 l    df *ABS*	00000000 _divmodhi4.o
0001cd14 l       .text	00000000 __divmodhi4_neg1
0001cd1c l       .text	00000000 __divmodhi4_neg2
0001cd22 l       .text	00000000 __divmodhi4_exit
00000000 l    df *ABS*	00000000 _udivmodsi4.o
0001cd4a l       .text	00000000 __udivmodsi4_ep
0001cd30 l       .text	00000000 __udivmodsi4_loop
00000000 l    df *ABS*	00000000 _divmodsi4.o
0001cd80 l       .text	00000000 __divmodsi4_neg2
0001cd8e l       .text	00000000 __divmodsi4_exit
00000000 l    df *ABS*	00000000 calloc.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 _exit.o
0001d5fe l       .text	00000000 __stop_program
00000000 l    df *ABS*	00000000 
00000000 l       *UND*	00000000 --library=m
00015cb4 g     F .text	0000004a SS80_Selected_Device_Clear
0001cdb2 g       .text	00000002 .hidden __usmulhisi3
0000ed08 g     F .text	0000000c putchar
0001196c g     F .text	00000024 SS80_is_MTA
000067dc g     F .text	000000ea clock_gettime
00005e96 g     F .text	000000d4 i2c_display_task_errors
0000622e g     F .text	00000084 rtc_init
00011cb8 g     F .text	000000a8 GPIB_COMMANDS
00004c70  w      .text	00000000 __vector_22
00010dc0 g     F .text	00000054 gpib_unread
00004e54 g     F .text	0000000a set_error
00014e98 g     F .text	00000034 SS80_test_extended_status
000062e2  w    F .text	00000016 strcpy
00007a90 g     F .text	00000008 asctime
00006d68 g     F .text	00000020 tm_mon_to_ascii
00801a88 g     O .bss	00000235 Fatfs
0000ee3c g     F .text	0000004a mctime
00004c70  w      .text	00000000 __vector_28
0000ddb6 g     F .text	0000001a mmc_fast
0000606e g     F .text	0000008c rtc_write
00005a8e g     F .text	00000058 i2c_fn
00015da6 g     F .text	00000218 SS80_Transparent_State
00801967 g     O .bss	00000001 gpib_unread_f
00004d3e g     F .text	00000004 spi_RX_buffer
000123fe g     F .text	00000042 gpib_help
00015b10 g     F .text	0000009a SS80_Report
0000f96c g     F .text	0000006a free_file_descriptor
0000eafc g     F .text	00000096 fatfs_putc
0001ce92 g       .text	0000001e .hidden __umulhisi3
008001b8 g     O .data	0000000c cfgfile
00004c70  w      .text	00000000 __vector_1
00011e26 g     F .text	00000184 GPIB
0000e68a g     F .text	0000002a fatfs_help
00006a32 g     F .text	00000016 delete_all_timers
00005670 g     F .text	0000000c SPI0_TXRX_Byte
0001d360 g       .text	00000000 __fp_mpack_finite
0000f4b2 g     F .text	00000086 utime
00801a58 g     O .bss	00000008 __clock
0001c202 g     F .text	0000007c lcd_time
00012e72 g     F .text	00000052 find_device
000078be g     F .text	00000128 set_dst
0000f1d0 g     F .text	00000096 fdevopen
00011990 g     F .text	00000024 SS80_is_MSA
00004cda g     F .text	00000060 spi_end
000188f0 g     F .text	000000d6 lif_dir2str
0001d2e6 g     F .text	00000040 round
00013200 g     F .text	00000172 alloc_device
00005050 g     F .text	0000006a safefree
00013876 g     F .text	00000024 mount_usage
00011faa g     F .text	00000130 GPIB_TALK
00004c70  w      .text	00000000 __vector_32
0000ff00 g       *ABS*	00000000 __DATA_REGION_LENGTH__
0001cf82 g     F .text	00000004 __divsf3
0001ce36 g       .text	00000036 .hidden __epilogue_restores__
00005424 g     F .text	00000018 uart_rx_count
000147e2 g     F .text	0000003a lif_dir_count
00801ce7 g     O .bss	00000009 gpib_timer
000120da g     F .text	000000f6 GPIB_SECONDARY_ADDRESS
00000000 g       *ABS*	00000000 __TEXT_REGION_ORIGIN__
00018c72 g     F .text	0000000e lif_vol_clear
000068c6 g     F .text	0000007a clock_task
0001116c g     F .text	00000284 gpib_trace_display
0001bbf6 g     F .text	000000fe lif_rename_file
00013bf2 g     F .text	00000804 Read_Config
00012df2 g     F .text	00000026 find_type
0001d1a4 g     F .text	00000022 __fp_round
00012e18 g     F .text	00000020 count_drive_types
00006d88 g     F .text	00000042 Days_Per_Month
00006c22 g     F .text	00000028 execute_timers
00010084 g     F .text	00000176 ls_info
00004c70  w      .text	00000000 __vector_34
0000dd70 g     F .text	0000001a mmc_spi_begin
0001d052 g     F .text	0000000a __fixsfsi
00006b3c g     F .text	0000000c clock_elapsed_begin
0000634a  w    F .text	00000032 reverse
0000d6c4 g     F .text	00000006 mmc_disk_status
0001d1c6 g     F .text	00000044 __fp_split3
00010baa g     F .text	00000014 gpib_timeout_set
0001ccd6 g       .text	00000028 .hidden __udivmodhi4
00004cd6 g     F .text	00000004 chip_select_init
00006aca g     F .text	00000072 ts_to_str
00008fa0 g     F .text	0000000c atol
00007e12 g     F .text	000000aa p_ntoa
0000e046 g     F .text	000000d8 tm_to_fat
00004e96 g     F .text	00000122 PrintFree
00017072 g     F .text	000000b8 amigo_cmd_dsj
0000d43e g     F .text	00000024 wait_ready
000001c2 g       .text	00000000 __trampolines_start
00013404 g     F .text	00000112 hpdir_set_device
0001d12e g     F .text	00000048 __fp_cmp
00011748 g     F .text	00000166 gpib_write_str
008002f0 g     O .data	00000005 _backlight
00801cc5 g     O .bss	00000002 errno
00015d84 g     F .text	00000022 SS80_Cancel
0001d600 g       .text	00000000 _etext
0000d874 g     F .text	00000488 mmc_disk_ioctl
000064d2 g     F .text	00000028 MATCH
00800125 g     O .data	00000010 __WDay
00019736 g     F .text	000000b8 lif_writedirindex
0000552e g     F .text	000000ce SPI0_Speed
000059c8 g     F .text	000000c6 i2c_task_run
00006b48 g     F .text	0000007c clock_elapsed_end
0000d2b8 g     F .text	000000c4 ff_wtoupper
0001ceb0 g     F .text	0000000a __subsf3
0001b7b8 g     F .text	00000312 lif_add_lif_file
00801cf0 g     O .bss	00000002 lastcmd
00004c70  w      .text	00000000 __vector_24
00013402 g     F .text	00000002 set_Config_Defaults
00006000 g     F .text	00000062 i2c_rtc_read
000064be g     F .text	00000014 skipspaces
0000becc g     F .text	0000026c f_getcwd
00004c70  w      .text	00000000 __vector_12
000107e6 g     F .text	00000032 gpib_timer_init
00010848 g     F .text	0000002c ppr_init
0000ed14 g     F .text	00000068 fgets
0000543c g     F .text	0000004c uart_get_tail
0000500c g     F .text	00000044 safemalloc
0001baca g     F .text	0000012c lif_del_file
00007c80 g     F .text	00000032 _putc_buffer_fn
0001a9f0 g     F .text	00000172 lif_ascii_string_to_e010
0000de3c g     F .text	0000001a mmc_ins_status
0080030a g     O .data	00000002 _cmd2
00018c08 g     F .text	0000004e lif_lifbcd2timestr
00801cf2 g     O .bss	00000200 gpib_iobuff
000180c6 g     F .text	00000028 V2B_MSB
00018aa8 g     F .text	00000084 lif_time2lifbcd
00012e6a g     F .text	00000008 find_free
00005966 g     F .text	00000024 i2c_done
000191e2 g     F .text	0000036a lif_check_dir
00004c70 g       .text	00000000 __bad_interrupt
00005114 g     F .text	00000090 delayms
000145e4 g     F .text	00000102 drives_tests
00015c80 g     F .text	00000018 SS80_Channel_Independent_Clear
0000ffaa g     F .text	000000da cat
00008e10 g     F .text	00000028 snprintf_P
0001717a g     F .text	00000132 amigo_todo_op
00015cfe g     F .text	00000086 SS80_Amigo_Clear
0000f146 g     F .text	0000008a perror
0001c48a g     F .text	00000024 gpib_user_task
0001ec56 g       *ABS*	00000000 __data_load_end
0000d388 g     F .text	0000000c disk_initialize
008019a5 g     O .bss	0000000d plot
00010b58 g     F .text	00000006 gpib_timer_elapsed_end
00018244 g     F .text	0000002a lif_free
0000edac g     F .text	0000002e puts
0000fd7e g     F .text	000001bc copy
00006d2e g     F .text	00000010 clock_settime
0001826e g     F .text	0000003e lif_stralloc
000062b2  w    F .text	00000016 islower
00004e68 g     F .text	0000002e freeRam
0001678e g     F .text	0000001c amigo_request_logical_address
00005ae6 g     F .text	0000001c i2c_send_stop
0000cdac g     F .text	0000022a f_rename
00004c70  w      .text	00000000 __vector_6
00010b3a g     F .text	0000001e gpib_timer_reset
00019a32 g     F .text	000005d4 lif_create_volume
0001d3ac g     F .text	00000130 malloc
00004d62 g     F .text	00000040 spi_init
0000fd3c g     F .text	00000042 posix_help
00004c70  w      .text	00000000 __vector_31
000108aa g     F .text	00000046 dbf_open
0001c154 g     F .text	000000ae copyright
0000be16 g     F .text	000000b6 f_chdir
0001cf7a g       .text	00000000 __lesf2
00004ca6 g     F .text	00000030 chip_deselect
00018050 g     F .text	00000076 PRINTER_COMMANDS
00006bc4 g     F .text	00000036 clock_clear
00007aba g     F .text	000000ee initialize_clock
0000de3a g     F .text	00000002 mmc_power_off
000143f6 g     F .text	00000044 display_mounts
0000e040 g     F .text	00000006 mmc_wp_status
0000e9f6 g     F .text	00000106 fatfs_getc
00801ef2 g     O .bss	00000001 listening_last
0000d37c g     F .text	0000000c disk_status
00800102 g     O .data	00000002 __malloc_heap_start
000001c2 g       .text	00000000 __trampolines_end
00006d04 g     F .text	0000002a clock_getres
0080177e g     O .bss	00000004 i2c_task
0001ab62 g     F .text	00000210 lif_add_ascii_file_as_e010_wrapper
000084de  w    F .text	00000038 strlen_X
00018a92 g     F .text	00000016 lif_BCD2BIN
000182ac g     F .text	00000054 lif_open
00007ba8 g     F .text	000000d8 display_clock
00010874 g     F .text	0000001a ppr_bit_set
00004c70  w      .text	00000000 __vector_3
00010840 g     F .text	00000008 ppr_reg
000115fc g     F .text	00000008 gpib_decode
000051a4 g     F .text	00000022 uart_rx_flush
0000f054 g     F .text	00000004 rmdir
000069bc g     F .text	00000076 set_timers
00801a7c g     O .bss	0000000c dst
0000f0ca g     F .text	0000007c readdir
0001d20a g     F .text	0000000e __fp_zero
0000c790 g     F .text	0000002a f_closedir
0001c2cc g     F .text	00000148 lcd_setup
0000d3d4 g     F .text	00000014 disk_ioctl
0001be02 g     F .text	0000033e lif_tests
000083a2 g     F .text	00000084 _puts_pad
00004d42 g     F .text	00000020 spi_TX
008019f4 g     O .bss	00000001 debug_input
00018c80 g     F .text	0000038c lif_dump_vol
000121d0 g     F .text	0000004c listen_cleanup
00018b2c g     F .text	000000a0 lif_lifbcd2time
000189c6 g     F .text	000000be lif_str2dir
00013956 g     F .text	000000f2 display_mount
000056fe g     F .text	0000002c SPI0_TXRX
0080030c g     O .data	00000015 _line1
0001cf7a g       .text	00000000 __nesf2
00013516 g     F .text	00000040 hpdir_set_parameters
00005f6a g     F .text	0000000e BINtoBCD
0000f598 g     F .text	000000d0 lseek
00004c70  w      .text	00000000 __vector_23
0001d600 g       *ABS*	00000000 __data_load_start
00801832 g     O .bss	00000004 _mmc_clock
00004c32 g       .text	00000000 __dtors_end
0001389a g     F .text	0000002c index_address
00011a68 g     F .text	00000012 gpib_init_devices
000063ee  w    F .text	00000050 strncasecmp
00802038 g       .bss	00000000 __bss_end
00018520 g     F .text	00000056 lif_chars
0001cdbe g       .text	00000014 .hidden __muluhisi3
00012684 g     F .text	0000006a print_tok_str
00004c70  w      .text	00000000 __vector_30
00000400 g       *ABS*	00000000 __LOCK_REGION_LENGTH__
00013556 g     F .text	000002f6 format_drives
00004c70  w      .text	00000000 __vector_25
00802034 g     O .bss	00000002 __brkval
00006f86 g     F .text	0000002a gmtime_r
0000eee0 g     F .text	00000052 chmod
00006c4a g     F .text	000000ba init_timers
000119fc g     F .text	00000024 AMIGO_is_MSA
00019598 g     F .text	000000d0 lif_checkdirindex
0000ca7e g     F .text	0000014e f_unlink
00010e20 g     F .text	00000020 gpib_control_pin_read
000109d8 g     F .text	000000ae dbf_open_read
00005f8a g     F .text	00000076 i2c_rtc_write
0000de38 g     F .text	00000002 mmc_power_on
00008ed6 g     F .text	000000bc strtol
00010b34 g     F .text	00000006 gpib_timer_elapsed_begin
000051c6 g     F .text	00000134 uart_ubr
0000d228 g     F .text	00000066 ff_uni2oem
00005780 g     F .text	0000009e i2c_check_op
0001a93a g     F .text	000000b6 lif_e010_pad_sector
00018196 g     F .text	00000042 lif_help
000065aa g     F .text	000000b8 split_args
0000efd8 g     F .text	0000003e rename
0001099e g     F .text	0000003a dbf_close
00017caa g     F .text	000000be receive_plot_flush
0001cf9c g     F .text	000000dc __divsf3x
00004c70  w      .text	00000000 __vector_11
00801ef3 g     O .bss	00000001 spoll
0000ee86 g     F .text	0000001c basename
00014ecc g     F .text	000000c6 SS80_display_extended_status
00017b5e g     F .text	00000130 AMIGO_COMMANDS
0001865e g     F .text	0000007a lif_fixname
0000d78c g     F .text	000000e8 mmc_disk_write
00004c32  w      .text	00000000 __init
0001d378 g     F .text	00000034 calloc
0001b548 g     F .text	00000270 lif_extract_lif_as_lif
00006768 g     F .text	00000026 install_timers_isr
00010818 g     F .text	00000014 reverse_8bits
00015094 g     F .text	000000e0 SS80_describe
000054c0 g     F .text	0000002c uart_getchar
00007ebc g     F .text	0000020e p_ftoa
0000f858 g     F .text	000000dc write
00018576 g     F .text	00000074 lif_B2S
0001d218 g       .text	00000000 __gtsf2
0000fcfc g     F .text	00000040 fprintf
000110c8 g     F .text	000000a4 gpib_decode_header
000113f0 g     F .text	0000020c gpib_read_byte
00012588 g     F .text	0000003e tok_index
00015c98 g     F .text	0000001c SS80_Universal_Device_Clear
0001ad72 g     F .text	00000278 lif_add_ascii_file_as_e010
0000678e g     F .text	0000004e __vector_13
00006324  w    F .text	00000026 strcat
008019f7 g     O .bss	00000057 uarts
00004e5e g     F .text	0000000a clear_error
0001d23c g       .text	00000000 __mulsf3_pse
00004c70  w      .text	00000000 __vector_17
00004e32 g     F .text	00000022 spi_TXRX
0001d182 g     F .text	00000006 __fp_nan
00012ec4 g     F .text	0000018a set_active_device
00004c70  w      .text	00000000 __vector_19
000066e8 g     F .text	0000007c get_value
000056d6 g     F .text	00000028 SPI0_TX
000185ea g     F .text	0000003a lif_checkname
0000eea2 g     F .text	0000003e chdir
00004c70  w      .text	00000000 __vector_7
00016dee g     F .text	000000b6 amigo_buffered_read_execute
0000de9e g     F .text	000001a2 mmc_init
0000e6b4 g     F .text	000001a6 fatfs_ls
0001d176 g     F .text	0000000c __fp_inf
00008e38 g     F .text	00000028 sprintf_P
0001ce7a g       .text	00000018 .hidden __cmpdi2_s8
0000f266 g     F .text	00000088 fat_time_to_unix
0000f668 g     F .text	0000004e fseek
00801cbd g     O .bss	00000004 AccSize
00018c56 g     F .text	0000000c lif_image_clear
0000dde2 g     F .text	0000000e mmc_set_ms_timeout
00006764 g     F .text	00000004 enable_system_task
0000ddd6 g     F .text	00000006 mmc_spi_RX_buffer
0000598a g     F .text	00000024 i2c_task_done
000070a6 g     F .text	00000058 is_dst
000052fa g     F .text	0000008e uart_init
00014bd0 g     F .text	00000078 SS80ControllerPack
00013be0 g     F .text	00000012 verify_devices
00801efc g     O .bss	00000084 Devices
00004c58 g       .text	00000010 .hidden __do_clear_bss
000055fc g     F .text	00000074 SPI0_Mode
00810000 g       .comment	00000000 __eeprom_end
0001a2c6 g     F .text	00000200 lif_open_volume
0000ff3a g     F .text	00000070 testpage
00017f5e g     F .text	000000f2 printer_buffer
0000bde4 g     F .text	00000032 f_close
0001d238 g     F .text	000000d2 __mulsf3x
00017c8e g     F .text	0000001c printer_init
0000dd92 g     F .text	0000001a mmc_slow
0000647e g     F .text	00000020 sep
00800100 g     O .data	00000002 __malloc_heap_end
0001082c g     F .text	00000014 ppr_set
00016ba4 g     F .text	00000130 amigo_format
0000f6b6 g     F .text	000000da read
000197ee g     F .text	00000030 lif_writedirEOF
0000dd8a g     F .text	00000008 mmc_spi_end
0001d0b8 g       .text	00000000 __floatsisf
0001712a g     F .text	00000050 amigo_cmd_clear
00000000 g       .text	00000000 __vectors
0001981e g     F .text	00000214 lif_updatefree
0000572a g     F .text	0000002a SPI0_RX
0000b720 g     F .text	00000296 f_read
008019f5 g     O .bss	00000002 rtc_ok
00010c6a g     F .text	00000024 gpib_tx_init
00011948 g     F .text	00000024 SS80_is_MLA
00005388 g     F .text	00000048 uart_rx_interrupt
000054ec g     F .text	00000006 uart0_getchar
00004c70  w      .text	00000000 __vector_27
00010d54 g     F .text	0000006c gpib_disable_PPR
0000e16e g     F .text	000000e0 fatfs_scan_files
00004c74 g     F .text	00000032 chip_select
00801756 g       .data	00000000 __data_end
00010964 g     F .text	0000003a dbf_lseek
000163aa g     F .text	000001d4 SS80_COMMANDS
0000643e g     F .text	00000040 stralloc
0000c7ba g     F .text	00000088 f_readdir
00801ef4 g     O .bss	00000002 current
000151c6 g     F .text	0000004e SS80_Check_Volume
0000dd38 g     F .text	00000038 mmc_install_timer
00007ddc g     F .text	00000036 pch
00008e9a g     F .text	0000003c atodigit
0001cca0 g       .text	0000001e .hidden __mulsi3
000062f8  w    F .text	0000002c strncpy
0000f016 g     F .text	0000003e unlink
0000f82e g     F .text	0000002a sync
00015be8 g     F .text	00000098 SS80_init
0001cf7a g       .text	00000000 __eqsf2
0000fa48 g     F .text	0000008a new_file_descriptor
000063b0  w    F .text	0000003e strcasecmp
0001cdde g       .text	00000020 .hidden __negdi2
00018156 g     F .text	00000040 B2V_LSB
0000e584 g     F .text	00000106 fatfs_filinfo_list
0000cfd6 g     F .text	0000009a f_chmod
00801a60 g     O .bss	00000018 timer_irq
000059ae g     F .text	0000001a i2c_send_start
00012e38 g     F .text	00000032 type_to_str
00000000  w      .text	00000000 __vector_default
0001ccfe g       .text	00000026 .hidden __divmodhi4
00014c48 g     F .text	00000198 SS80UnitPack
00010a86 g     F .text	000000ae dbf_open_write
00004c70  w      .text	00000000 __vector_5
0000dcfc g     F .text	0000003c mmc_disk_timerproc
00801a4e g     O .bss	0000000a i2c
000077b2 g     F .text	0000010c find_dst
00800182 g     O .data	00000034 gpib_tokens
00004c70  w      .text	00000000 __vector_33
000125c6 g     F .text	0000003e tok_name
00011604 g     F .text	00000144 gpib_read_str
0001a4c6 g     F .text	000003aa lif_dir
00016ea4 g     F .text	000001ce amigo_buffered_write
00000400 g       *ABS*	00000000 __SIGNATURE_REGION_LENGTH__
00014f92 g     F .text	00000102 SS80_send_status
0001cda0 g       .text	00000012 .hidden __tablejump2__
00011a7a g     F .text	00000124 gpib_trace_task
00800135 g     O .data	00000001 Stat
0000f422 g     F .text	00000090 unix_time_to_fat
00004c32 g       .text	00000000 __ctors_start
0000d57a g     F .text	0000014a mmc_disk_initialize
00801a78 g     O .bss	00000004 __tzone
0000e11e g     F .text	00000026 get_fattime
00800321 g     O .data	00000002 _cmd1
0000f790 g     F .text	00000038 fread
00018c62 g     F .text	00000010 lif_dir_clear
000169c0 g     F .text	00000052 amigo_increment
0001221c g     F .text	00000122 GPIB_LISTEN
008001b6 g     O .data	00000002 debuglevel
00801836 g     O .bss	00000002 _mmc_timeout
00004c3e g       .text	0000001a .hidden __do_copy_data
0080027c g     O .data	00000074 faults
0000fc10 g     F .text	000000d4 posix_fopen_modes_to_open
00018118 g     F .text	0000003e B2V_MSB
00801782 g     O .bss	00000002 i2c_callback
00018a84 g     F .text	0000000e lif_BIN2BCD
0001d326 g     F .text	00000036 __fp_mintl
0001cf7a g     F .text	00000008 __cmpsf2
0001ce6c g       .text	0000000e .hidden __xload_1
00010c2e g     F .text	0000003c gpib_rx_init
00007008 g     F .text	0000005c gettimeofday
0001d196 g     F .text	0000000e __fp_pscB
0001d1d6 g       .text	00000000 __fp_splitA
00018bcc g     F .text	0000003c lif_ctime_gmt
000183b4 g     F .text	000000a6 lif_read
0000fce4 g     F .text	00000018 fopen
00801756 g       .bss	00000000 __bss_start
000079e6 g     F .text	000000aa asctime_r
00007196 g     F .text	00000008 localtime
0001d5ee g     F .text	0000000e memset
000172ac g     F .text	00000108 amigo_todo
000133a2 g     F .text	00000032 push_state
00007770 g     F .text	00000042 setdate
0001c932 g     F .text	0000036e main
008002f5 g     O .data	00000015 _line2
000123fc g     F .text	00000002 talk_cleanup
000061a0 g     F .text	0000008e rtc_run
00013a48 g     F .text	00000198 verify_device
0000f562 g     F .text	00000036 ftell
00801ef6 g     O .bss	00000001 talking
0000bce4 g     F .text	00000100 f_sync
0080196a g     O .bss	00000002 AMIGOs
0001cf7a g       .text	00000000 __ltsf2
0000552a g     F .text	00000004 uart_keyhit
00013372 g     F .text	00000030 init_Devices
00004c70  w      .text	00000000 __vector_4
0001954c g     F .text	0000004c lif_close_volume
0000ddac g     F .text	0000000a mmc_spi_init
00800100 g       *ABS*	00000000 __DATA_REGION_ORIGIN__
00019668 g     F .text	000000ce lif_readdirindex
000173dc g     F .text	000005cc Amigo_Command
0000fa38 g     F .text	00000010 fclose
0000ecfc g     F .text	0000000c getchar
0001690e g     F .text	000000b2 amigo_send_status
00016712 g     F .text	0000007c amigo_init
00800136 g     O .data	0000004a sys_errlist
00007064 g     F .text	00000042 time
0000f08e g     F .text	0000003c opendir
0001d35c g     F .text	0000001c __fp_mpack
0001304e g     F .text	000000f0 SS80_Set_Defaults
00006062 g     F .text	0000000c i2c_rtc_init
00006fe4 g     F .text	00000024 settimezone
0000b338 g     F .text	00000078 f_mount
0000e26c g     F .text	00000318 fatfs_status
000119d8 g     F .text	00000024 AMIGO_is_MTA
0001cd90 g       .text	00000010 .hidden __negsi2
0000c6ae g     F .text	000000e2 f_opendir
0001384c g     F .text	0000002a drives_help
00015baa g     F .text	0000003e Clear_Common
0001c4ae g     F .text	00000054 help
00010ce8 g     F .text	0000006c gpib_enable_PPR
0001443a g     F .text	000001aa mount
00016a68 g     F .text	0000013c amigo_verify
0001d220 g     F .text	00000004 __mulsf3
00006662 g     F .text	00000086 get_token
000167aa g     F .text	000000ba amigo_request_status
0001273a g     F .text	000001a8 display_Addresses
0000f538 g     F .text	0000002a fileno_to_fatfs
0000d28e g     F .text	0000002a ff_oem2uni
00006396  w    F .text	0000001a strcmp
00010c8e g     F .text	0000005a gpib_state_init
00000000  w      *ABS*	00000000 __heap_end
00010b5e g     F .text	0000004c gpib_timer_task
000050ba g     F .text	0000005a delayus
000133d4 g     F .text	0000002e pop_state
00004c70  w      .text	00000000 __vector_9
0000ef32 g     F .text	0000004a getcwd
00004c70  w      .text	00000000 __vector_2
000064fa g     F .text	00000028 MATCHI
000173b4 g     F .text	00000028 amigo_check_unit
0001ced4 g     F .text	000000cc __addsf3x
00000400 g       *ABS*	00000000 __USER_SIGNATURE_REGION_LENGTH__
0000c138 g     F .text	00000576 f_lseek
0000eb92 g     F .text	000000ac fgetc
00801ef7 g     O .bss	00000001 secondary
00008dc4 g     F .text	0000004c vsnprintf_P
00007a98 g     F .text	00000022 ctime_gm
0001d218 g     F .text	00000008 __gesf2
000146e6 g     F .text	000000fc hpdir_init
00016864 g     F .text	000000aa amigo_send_logical_address
00015174 g     F .text	00000052 SS80_Check_Unit
000118ae g     F .text	0000009a gpib_file_init
0080010a g     O .data	00000001 _cs_pin
000138c6 g     F .text	00000090 umount
00801968 g     O .bss	00000002 gpib_log_fp
00004c70  w      .text	00000000 __vector_21
00004c70  w      .text	00000000 __vector_15
000080ca g     F .text	000002d8 p_etoa
000126ee g     F .text	0000004c print_tok
0080175e g     O .bss	00000020 i2c_task_op
00016032 g     F .text	000002c4 SS80_locate_and_read
0000589c g     F .text	000000ca i2c_init
00012440 g     F .text	00000148 gpib_tests
0001313e g     F .text	000000c2 free_device
00801cc1 g     O .bss	00000002 AccDirs
0000d222 g     F .text	00000006 ff_memfree
00801972 g     O .bss	00000002 PRINTERp
0001d188 g     F .text	0000000e __fp_pscA
0001ccbe g       .text	00000018 .hidden __udivmodqi4
00801ef8 g     O .bss	00000001 listening
00011b9e g     F .text	0000011a gpib_error_test
0080196e g     O .bss	00000002 SS80s
0000c842 g     F .text	0000007c f_stat
00010bbe g     F .text	00000070 gpib_bus_init
00005754 g     F .text	0000002c i2c_timer
0000ec3e g     F .text	000000a4 fputc
00004c70  w      .text	00000000 __vector_29
00005516 g     F .text	00000014 uart0_putchar
00008e60 g     F .text	0000003a printf_P
0001cdd6 g       .text	00000008 .hidden __mulohisi3
000162f6 g     F .text	000000b4 SS80_Execute_State
0000752e g     F .text	00000008 timegm
00015214 g     F .text	000004ee SS80_Command_State
00006fc6 g     F .text	0000001e gettimezone
00802038 g       .comment	00000000 __heap_start
0000649e g     F .text	00000020 trim_tail
00010e58 g     F .text	00000270 gpib_write_byte
00017d68 g     F .text	000000b0 printer_close
00005848 g     F .text	00000054 i2c_task_op_add
0001900c g     F .text	000001d6 lif_check_volume
000070fe g     F .text	00000098 localtime_r
008001c4 g     O .data	000000b8 tokens
00801cc3 g     O .bss	00000002 AccFiles
000060fa g     F .text	000000a6 rtc_read
00004c32 g       .text	00000000 __dtors_start
00004c32 g       .text	00000000 __ctors_end
0001cd68 g       .text	00000028 .hidden __divmodsi4
00010e14 g     F .text	0000000c gpib_bus_read
0000f2ee g     F .text	00000134 stat
000040ff  w      *ABS*	00000000 __stack
0000f7c8 g     F .text	00000066 syncfs
000181d8 g     F .text	0000006c lif_calloc
0000f934 g     F .text	00000038 fwrite
00011d60 g     F .text	000000c6 Send_Identify
00801830 g     O .bss	00000002 _mmc_pre
0000dddc g     F .text	00000006 mmc_spi_TXRX
00801756 g       .data	00000000 _edata
0000d070 g     F .text	000000b2 f_utime
000128e2 g     F .text	00000510 display_Config
0001cdb4 g       .text	0000000a .hidden __usmulhisi3_tail
00802038 g       .comment	00000000 _end
0001834a g     F .text	0000006a lif_seek_msg
00004da2 g     F .text	00000090 spi_begin
00017e18 g     F .text	00000146 printer_open
0000b9b6 g     F .text	0000032e f_write
00004c70  w      .text	00000000 __vector_8
0001a870 g     F .text	000000ca lif_find_file
00005bd4 g     F .text	000001d4 __vector_26
00007cca g     F .text	00000112 bin2num
0001cfa0 g       .text	00000000 __divsf3_pse
00800106 g     O .data	00000004 _spi_clock
00008426 g     F .text	000000b8 _puts_pad_X
0080196c g     O .bss	00000002 AMIGOp
0000ddd0 g     F .text	00000006 mmc_spi_TX_buffer
0000b3b0 g     F .text	00000370 f_open
000186d8 g     F .text	0000011c lif_vol2str
0000d3b4 g     F .text	00000020 disk_write
000101fa g     F .text	00000210 ls
0001d5fc  w      .text	00000000 .hidden exit
0001233e g     F .text	000000be gpib_task
00005b02 g     F .text	000000be i2c_task_next_op
0001d0b4 g     F .text	0000007a __floatunsisf
00016cd4 g     F .text	0000011a amigo_buffered_read_command
00006a48 g     F .text	00000082 subtract_timespec
0001ccfe g       .text	00000000 .hidden _div
00005da8 g     F .text	000000ee i2c_print_error
000179a8 g     F .text	000001b6 Amigo_Execute
0000637c  w    F .text	0000001a strupper
00802036 g     O .bss	00000002 __flp
00012604 g     F .text	00000080 print_tok_val
0001cd24 g       .text	00000044 .hidden __udivmodsi4
00011a44 g     F .text	00000024 PRINTER_is_MTA
0001a006 g     F .text	000002c0 lif_newdir
0001481c g     F .text	000003b4 hpdir_find_drive
00011a20 g     F .text	00000024 PRINTER_is_MLA
00008f92 g     F .text	0000000e atoi
00006dca g     F .text	000001bc time_to_tm
0000e144 g     F .text	0000002a put_rc
0000edda g     F .text	00000038 fileno
0080010b g     O .data	0000001a __Month
0000567c g     F .text	0000005a SPI0_Init
0000cbcc g     F .text	000001e0 f_mkdir
0001d05c g     F .text	00000058 __fixunssfsi
00801f80 g     O .bss	000000b4 hpdir
00007536 g     F .text	0000023a setdate_r
00006522 g     F .text	00000054 MATCHARGS
00004d3a g     F .text	00000004 spi_TX_buffer
00010000 g       *ABS*	00000000 __EEPROM_REGION_LENGTH__
0001d5fc g       .text	00000000 .hidden _exit
0001845a g     F .text	000000c6 lif_write
00018624 g     F .text	0000003a lif_S2B
0001c8ae g     F .text	00000014 user_task
00801ef9 g     O .bss	00000001 talking_last
000108f0 g     F .text	0000003a dbf_read
00005f78 g     F .text	00000012 BCDtoBIN
0001c414 g     F .text	00000076 i2c_lcd_task
0000719e g     F .text	00000390 normalize
00006fb0 g     F .text	00000016 gmtime
00004c70  w      .text	00000000 __vector_14
0000e8cc g     F .text	0000012a fatfs_tests
0001bcf4 g     F .text	0000010e lif_create_image
0000d394 g     F .text	00000020 disk_read
0000fad2 g     F .text	0000013e open
000062c8  w    F .text	0000001a toupper
000157ec g     F .text	00000324 SS80_locate_and_write
0001c140 g     F .text	00000014 lcd_task
00008516 g     F .text	000008ae _printf_fn
00004c70  w      .text	00000000 __vector_10
0001088e g     F .text	0000001c ppr_bit_clr
00801cc7 g     O .bss	00000020 __iob
0000d122 g     F .text	000000fa f_getlabel
000187f4 g     F .text	000000fc lif_str2vol
0000c8be g     F .text	000001c0 f_getfree
0000ed7c g     F .text	00000030 fputs
00004c70  w      .text	00000000 __vector_16
00006576 g     F .text	00000034 MATCHI_LEN
00800100 g       .data	00000000 __data_start
00004fb8 g     F .text	00000054 safecalloc
0001c8c2 g     F .text	00000070 update_drive_counts
0000ee12 g     F .text	0000002a fileno_to_stream
00015702 g     F .text	000000ea SS80_cmd_seek
0000f058 g     F .text	00000036 closedir
00004c70  w      .text	00000000 __vector_18
0000581e g     F .text	0000002a i2c_task_init
00000003 g       *ABS*	00000000 __FUSE_REGION_LENGTH__
00014de0 g     F .text	000000b8 SS80VolumePack
0000d6ca g     F .text	000000c2 mmc_disk_read
0000e85a g     F .text	00000072 mmc_test
00020000 g       *ABS*	00000000 __TEXT_REGION_LENGTH__
00018300 g     F .text	0000004a lif_stat
00005488 g     F .text	00000006 uart_rx_byte
00015fbe g     F .text	00000074 SS80_error_return
00800104 g     O .data	00000002 __malloc_margin
000053d0 g     F .text	00000054 __vector_20
0000ef7c g     F .text	0000005c mkdir
0001c27e g     F .text	0000004e lcd_backlight
000054f2 g     F .text	00000024 uart_putchar
0001040a g     F .text	000003dc posix_tests
00801efa g     O .bss	00000002 gpib_unread_data
0000f9d6 g     F .text	00000062 close
0001ceb2 g       .text	00000000 __addsf3
0001cdfe g       .text	00000038 .hidden __prologue_saves__
000119b4 g     F .text	00000024 AMIGO_is_MLA
0000ddf0 g     F .text	00000048 mmc_test_timeout
0001afea g     F .text	0000055e lif_extract_e010_as_ascii
00016a12 g     F .text	00000056 amigo_seek
00010e40 g     F .text	00000018 gpib_handshake_pin_read
00006bfa g     F .text	00000028 enable_timers
0000e24e g     F .text	0000001e fatfs_fstype
000180ee g     F .text	0000002a V2B_LSB
0001092a g     F .text	0000003a dbf_write
00801970 g     O .bss	00000002 SS80p
0000d21c g     F .text	00000006 ff_memalloc
0001d4dc g     F .text	00000112 free
0001d20c g       .text	00000000 __fp_szero
0000548e g     F .text	00000032 uart_tx_byte
0001cdd2 g       .text	00000004 .hidden __mulshisi3



Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 19 26 	jmp	0x4c32	; 0x4c32 <__ctors_end>
       4:	0c 94 38 26 	jmp	0x4c70	; 0x4c70 <__bad_interrupt>
       8:	0c 94 38 26 	jmp	0x4c70	; 0x4c70 <__bad_interrupt>
       c:	0c 94 38 26 	jmp	0x4c70	; 0x4c70 <__bad_interrupt>
      10:	0c 94 38 26 	jmp	0x4c70	; 0x4c70 <__bad_interrupt>
      14:	0c 94 38 26 	jmp	0x4c70	; 0x4c70 <__bad_interrupt>
      18:	0c 94 38 26 	jmp	0x4c70	; 0x4c70 <__bad_interrupt>
      1c:	0c 94 38 26 	jmp	0x4c70	; 0x4c70 <__bad_interrupt>
      20:	0c 94 38 26 	jmp	0x4c70	; 0x4c70 <__bad_interrupt>
      24:	0c 94 38 26 	jmp	0x4c70	; 0x4c70 <__bad_interrupt>
      28:	0c 94 38 26 	jmp	0x4c70	; 0x4c70 <__bad_interrupt>
      2c:	0c 94 38 26 	jmp	0x4c70	; 0x4c70 <__bad_interrupt>
      30:	0c 94 38 26 	jmp	0x4c70	; 0x4c70 <__bad_interrupt>
      34:	0c 94 c7 33 	jmp	0x678e	; 0x678e <__vector_13>
      38:	0c 94 38 26 	jmp	0x4c70	; 0x4c70 <__bad_interrupt>
      3c:	0c 94 38 26 	jmp	0x4c70	; 0x4c70 <__bad_interrupt>
      40:	0c 94 38 26 	jmp	0x4c70	; 0x4c70 <__bad_interrupt>
      44:	0c 94 38 26 	jmp	0x4c70	; 0x4c70 <__bad_interrupt>
      48:	0c 94 38 26 	jmp	0x4c70	; 0x4c70 <__bad_interrupt>
      4c:	0c 94 38 26 	jmp	0x4c70	; 0x4c70 <__bad_interrupt>
      50:	0c 94 e8 29 	jmp	0x53d0	; 0x53d0 <__vector_20>
      54:	0c 94 38 26 	jmp	0x4c70	; 0x4c70 <__bad_interrupt>
      58:	0c 94 38 26 	jmp	0x4c70	; 0x4c70 <__bad_interrupt>
      5c:	0c 94 38 26 	jmp	0x4c70	; 0x4c70 <__bad_interrupt>
      60:	0c 94 38 26 	jmp	0x4c70	; 0x4c70 <__bad_interrupt>
      64:	0c 94 38 26 	jmp	0x4c70	; 0x4c70 <__bad_interrupt>
      68:	0c 94 ea 2d 	jmp	0x5bd4	; 0x5bd4 <__vector_26>
      6c:	0c 94 38 26 	jmp	0x4c70	; 0x4c70 <__bad_interrupt>
      70:	0c 94 38 26 	jmp	0x4c70	; 0x4c70 <__bad_interrupt>
      74:	0c 94 38 26 	jmp	0x4c70	; 0x4c70 <__bad_interrupt>
      78:	0c 94 38 26 	jmp	0x4c70	; 0x4c70 <__bad_interrupt>
      7c:	0c 94 38 26 	jmp	0x4c70	; 0x4c70 <__bad_interrupt>
      80:	0c 94 38 26 	jmp	0x4c70	; 0x4c70 <__bad_interrupt>
      84:	0c 94 38 26 	jmp	0x4c70	; 0x4c70 <__bad_interrupt>
      88:	0c 94 38 26 	jmp	0x4c70	; 0x4c70 <__bad_interrupt>
      8c:	f7 43       	sbci	r31, 0x37	; 55
      8e:	47 45       	sbci	r20, 0x57	; 87
      90:	2f 44       	sbci	r18, 0x4F	; 79
      92:	1a 45       	sbci	r17, 0x5A	; 90
      94:	1a 45       	sbci	r17, 0x5A	; 90
      96:	47 45       	sbci	r20, 0x57	; 87
      98:	47 45       	sbci	r20, 0x57	; 87
      9a:	47 45       	sbci	r20, 0x57	; 87
      9c:	47 45       	sbci	r20, 0x57	; 87
      9e:	47 45       	sbci	r20, 0x57	; 87
      a0:	47 45       	sbci	r20, 0x57	; 87
      a2:	47 45       	sbci	r20, 0x57	; 87
      a4:	47 45       	sbci	r20, 0x57	; 87
      a6:	f7 43       	sbci	r31, 0x37	; 55
      a8:	f4 43       	sbci	r31, 0x34	; 52
      aa:	47 45       	sbci	r20, 0x57	; 87
      ac:	47 45       	sbci	r20, 0x57	; 87
      ae:	3d 45       	sbci	r19, 0x5D	; 93
      b0:	47 45       	sbci	r20, 0x57	; 87
      b2:	29 44       	sbci	r18, 0x49	; 73
      b4:	47 45       	sbci	r20, 0x57	; 87
      b6:	47 45       	sbci	r20, 0x57	; 87
      b8:	f7 43       	sbci	r31, 0x37	; 55
      ba:	47 45       	sbci	r20, 0x57	; 87
      bc:	47 45       	sbci	r20, 0x57	; 87
      be:	47 45       	sbci	r20, 0x57	; 87
      c0:	47 45       	sbci	r20, 0x57	; 87
      c2:	47 45       	sbci	r20, 0x57	; 87
      c4:	47 45       	sbci	r20, 0x57	; 87
      c6:	47 45       	sbci	r20, 0x57	; 87
      c8:	47 45       	sbci	r20, 0x57	; 87
      ca:	47 45       	sbci	r20, 0x57	; 87
      cc:	f7 43       	sbci	r31, 0x37	; 55
      ce:	42 45       	sbci	r20, 0x52	; 82
      d0:	2f 44       	sbci	r18, 0x4F	; 79
      d2:	1a 45       	sbci	r17, 0x5A	; 90
      d4:	1a 45       	sbci	r17, 0x5A	; 90
      d6:	47 45       	sbci	r20, 0x57	; 87
      d8:	47 45       	sbci	r20, 0x57	; 87
      da:	47 45       	sbci	r20, 0x57	; 87
      dc:	47 45       	sbci	r20, 0x57	; 87
      de:	47 45       	sbci	r20, 0x57	; 87
      e0:	47 45       	sbci	r20, 0x57	; 87
      e2:	47 45       	sbci	r20, 0x57	; 87
      e4:	47 45       	sbci	r20, 0x57	; 87
      e6:	f7 43       	sbci	r31, 0x37	; 55
      e8:	f4 43       	sbci	r31, 0x34	; 52
      ea:	47 45       	sbci	r20, 0x57	; 87
      ec:	47 45       	sbci	r20, 0x57	; 87
      ee:	38 45       	sbci	r19, 0x58	; 88
      f0:	47 45       	sbci	r20, 0x57	; 87
      f2:	29 44       	sbci	r18, 0x49	; 73
      f4:	47 45       	sbci	r20, 0x57	; 87
      f6:	47 45       	sbci	r20, 0x57	; 87
      f8:	f7 43       	sbci	r31, 0x37	; 55
      fa:	6c 45       	sbci	r22, 0x5C	; 92
      fc:	ad 46       	sbci	r26, 0x6D	; 109
      fe:	5f 45       	sbci	r21, 0x5F	; 95
     100:	c7 45       	sbci	r28, 0x57	; 87
     102:	ab 45       	sbci	r26, 0x5B	; 91
     104:	ad 46       	sbci	r26, 0x6D	; 109
     106:	ad 46       	sbci	r26, 0x6D	; 109
     108:	ad 46       	sbci	r26, 0x6D	; 109
     10a:	ad 46       	sbci	r26, 0x6D	; 109
     10c:	ad 46       	sbci	r26, 0x6D	; 109
     10e:	ad 46       	sbci	r26, 0x6D	; 109
     110:	ad 46       	sbci	r26, 0x6D	; 109
     112:	ad 46       	sbci	r26, 0x6D	; 109
     114:	79 45       	sbci	r23, 0x59	; 89
     116:	8d 45       	sbci	r24, 0x5D	; 93
     118:	ad 46       	sbci	r26, 0x6D	; 109
     11a:	ad 46       	sbci	r26, 0x6D	; 109
     11c:	53 46       	sbci	r21, 0x63	; 99
     11e:	ad 46       	sbci	r26, 0x6D	; 109
     120:	5b 45       	sbci	r21, 0x5B	; 91
     122:	ad 46       	sbci	r26, 0x6D	; 109
     124:	ad 46       	sbci	r26, 0x6D	; 109
     126:	8d 45       	sbci	r24, 0x5D	; 93
     128:	ad 46       	sbci	r26, 0x6D	; 109
     12a:	ad 46       	sbci	r26, 0x6D	; 109
     12c:	ad 46       	sbci	r26, 0x6D	; 109
     12e:	ad 46       	sbci	r26, 0x6D	; 109
     130:	ad 46       	sbci	r26, 0x6D	; 109
     132:	ad 46       	sbci	r26, 0x6D	; 109
     134:	ad 46       	sbci	r26, 0x6D	; 109
     136:	ad 46       	sbci	r26, 0x6D	; 109
     138:	ad 46       	sbci	r26, 0x6D	; 109
     13a:	6c 45       	sbci	r22, 0x5C	; 92
     13c:	fb 45       	sbci	r31, 0x5B	; 91
     13e:	5f 45       	sbci	r21, 0x5F	; 95
     140:	c7 45       	sbci	r28, 0x57	; 87
     142:	ab 45       	sbci	r26, 0x5B	; 91
     144:	ad 46       	sbci	r26, 0x6D	; 109
     146:	ad 46       	sbci	r26, 0x6D	; 109
     148:	ad 46       	sbci	r26, 0x6D	; 109
     14a:	ad 46       	sbci	r26, 0x6D	; 109
     14c:	ad 46       	sbci	r26, 0x6D	; 109
     14e:	ad 46       	sbci	r26, 0x6D	; 109
     150:	ad 46       	sbci	r26, 0x6D	; 109
     152:	ad 46       	sbci	r26, 0x6D	; 109
     154:	79 45       	sbci	r23, 0x59	; 89
     156:	8d 45       	sbci	r24, 0x5D	; 93
     158:	ad 46       	sbci	r26, 0x6D	; 109
     15a:	ad 46       	sbci	r26, 0x6D	; 109
     15c:	fb 45       	sbci	r31, 0x5B	; 91
     15e:	ad 46       	sbci	r26, 0x6D	; 109
     160:	5b 45       	sbci	r21, 0x5B	; 91
     162:	ad 46       	sbci	r26, 0x6D	; 109
     164:	ad 46       	sbci	r26, 0x6D	; 109
     166:	8d 45       	sbci	r24, 0x5D	; 93
     168:	8c 69       	ori	r24, 0x9C	; 156
     16a:	96 69       	ori	r25, 0x96	; 150
     16c:	9e 69       	ori	r25, 0x9E	; 158
     16e:	a1 69       	ori	r26, 0x91	; 145
     170:	a4 69       	ori	r26, 0x94	; 148
     172:	a7 69       	ori	r26, 0x97	; 151
     174:	aa 69       	ori	r26, 0x9A	; 154
     176:	ad 69       	ori	r26, 0x9D	; 157
     178:	b0 69       	ori	r27, 0x90	; 144
     17a:	8c 87       	std	Y+12, r24	; 0x0c
     17c:	94 87       	std	Z+12, r25	; 0x0c
     17e:	c5 87       	std	Z+13, r28	; 0x0d
     180:	de 87       	std	Y+14, r29	; 0x0e
     182:	fa 87       	std	Y+10, r31	; 0x0a
     184:	07 88       	ldd	r0, Z+23	; 0x17
     186:	23 88       	ldd	r2, Z+19	; 0x13
     188:	4d 88       	ldd	r4, Y+21	; 0x15
     18a:	30 88       	ldd	r3, Z+16	; 0x10
     18c:	e9 9e       	mul	r14, r25
     18e:	b9 9f       	mul	r27, r25
     190:	f5 9f       	mul	r31, r21
     192:	28 a0       	ldd	r2, Y+32	; 0x20
     194:	38 a0       	ldd	r3, Y+32	; 0x20
     196:	55 a0       	ldd	r5, Z+37	; 0x25
     198:	b5 a0       	ldd	r11, Z+37	; 0x25
     19a:	a0 a1       	ldd	r26, Z+32	; 0x20
     19c:	a0 a1       	ldd	r26, Z+32	; 0x20
     19e:	a0 a1       	ldd	r26, Z+32	; 0x20
     1a0:	e9 a0       	ldd	r14, Y+33	; 0x21
     1a2:	15 a1       	ldd	r17, Z+37	; 0x25
     1a4:	58 a1       	ldd	r21, Y+32	; 0x20
     1a6:	6f a1       	ldd	r22, Y+39	; 0x27
     1a8:	82 9f       	mul	r24, r18
     1aa:	95 9f       	mul	r25, r21
     1ac:	a7 bd       	out	0x27, r26	; 39
     1ae:	66 bd       	out	0x26, r22	; 38
     1b0:	66 bd       	out	0x26, r22	; 38
     1b2:	66 bd       	out	0x26, r22	; 38
     1b4:	66 bd       	out	0x26, r22	; 38
     1b6:	2a bd       	out	0x2a, r18	; 42
     1b8:	31 bd       	out	0x21, r19	; 33
     1ba:	38 bd       	out	0x28, r19	; 40
     1bc:	48 bd       	out	0x28, r20	; 40
     1be:	56 bd       	out	0x26, r21	; 38
     1c0:	4f bd       	out	0x2f, r20	; 47

000001c2 <__trampolines_end>:
     1c2:	63 73       	andi	r22, 0x33	; 51
     1c4:	5f 64       	ori	r21, 0x4F	; 79
     1c6:	69 73       	andi	r22, 0x39	; 57
     1c8:	61 62       	ori	r22, 0x21	; 33
     1ca:	6c 65       	ori	r22, 0x5C	; 92
     1cc:	20 77       	andi	r18, 0x70	; 112
     1ce:	61 73       	andi	r22, 0x31	; 49
     1d0:	3a 20       	and	r3, r10
     1d2:	25 64       	ori	r18, 0x45	; 69
     1d4:	2c 20       	and	r2, r12
     1d6:	77 61       	ori	r23, 0x17	; 23
     1d8:	6e 74       	andi	r22, 0x4E	; 78
     1da:	3a 20       	and	r3, r10
     1dc:	25 64       	ori	r18, 0x45	; 69
     1de:	0a 00       	.word	0x000a	; ????

000001e0 <__c.3617>:
     1e0:	63 73 5f 65 6e 61 62 6c 65 20 77 61 73 3a 20 25     cs_enable was: %
     1f0:	64 2c 20 77 61 6e 74 3a 20 25 64 0a 00              d, want: %d..

000001fd <__c.3648>:
     1fd:	73 61 66 65 66 72 65 65 3a 20 46 52 45 45 20 45     safefree: FREE E
     20d:	52 52 4f 52 20 28 25 75 29 2c 20 74 6f 70 3a 28     RROR (%u), top:(
     21d:	25 75 29 0a 00                                      %u)..

00000222 <__c.3639>:
     222:	73 61 66 65 6d 61 6c 6c 6f 63 28 25 64 29 20 66     safemalloc(%d) f
     232:	61 69 6c 65 64 21 0a 00                             ailed!..

0000023a <__c.3633>:
     23a:	73 61 66 65 63 61 6c 6c 6f 63 28 25 64 2c 25 64     safecalloc(%d,%d
     24a:	29 20 66 61 69 6c 65 64 21 0a 00                    ) failed!..

00000255 <__c.3618>:
     255:	20 20 5f 5f 62 72 6b 76 61 6c 3a 20 20 20 20 25       __brkval:    %
     265:	35 75 0a 00                                         5u..

00000269 <__c.3616>:
     269:	20 20 4d 61 6c 6c 6f 63 20 73 74 61 72 74 20 25       Malloc start %
     279:	35 75 20 20 65 6e 64 3a 20 25 35 75 0a 00           5u  end: %5u..

00000287 <__c.3614>:
     287:	20 20 48 65 61 70 3a 20 73 74 61 72 74 3a 20 25       Heap: start: %
     297:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000002a5 <__c.3612>:
     2a5:	20 20 44 61 74 61 20 20 73 74 61 72 74 3a 20 25       Data  start: %
     2b5:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000002c3 <__c.3610>:
     2c3:	20 20 42 53 53 20 20 20 73 74 61 72 74 3a 20 25       BSS   start: %
     2d3:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000002e1 <__c.3608>:
     2e1:	20 20 53 74 61 63 6b 20 46 72 65 65 3a 20 20 25       Stack Free:  %
     2f1:	75 0a 00                                            u..

000002f4 <__c.3606>:
     2f4:	20 20 53 74 61 63 6b 20 54 6f 70 3a 20 20 20 25       Stack Top:   %
     304:	75 0a 00                                            u..

00000307 <__c.3604>:
     307:	46 72 65 65 20 52 61 6d 3a 25 75 0a 00              Free Ram:%u..

00000314 <__c.3602>:
     314:	53 50 49 30 5f 4d 6f 64 65 3a 20 49 6e 76 61 6c     SPI0_Mode: Inval
     324:	69 64 20 6d 6f 64 65 28 25 64 29 0a 00              id mode(%d)..

00000331 <__c.3721>:
     331:	0a 00                                               ..

00000333 <__c.3719>:
     333:	74 61 73 6b 3a 20 25 64 0a 00                       task: %d..

0000033d <__c.3717>:
     33d:	69 32 63 5f 74 61 73 6b 2e 65 72 72 6f 72 3a 20     i2c_task.error: 
     34d:	25 64 0a 00                                         %d..

00000351 <__c.3715>:
     351:	69 32 63 5f 74 61 73 6b 2e 64 6f 6e 65 3a 20 25     i2c_task.done: %
     361:	64 0a 00                                            d..

00000364 <__c.3710>:
     364:	0a 00                                               ..

00000366 <__c.3708>:
     366:	20 20 54 57 5f 4d 54 5f 44 41 54 41 5f 4e 41 43       TW_MT_DATA_NAC
     376:	4b 0a 00                                            K..

00000379 <__c.3706>:
     379:	20 20 54 57 5f 4d 54 5f 53 4c 41 5f 4e 41 43 4b       TW_MT_SLA_NACK
     389:	0a 00                                               ..

0000038b <__c.3704>:
     38b:	20 20 54 57 5f 4d 52 5f 53 4c 41 5f 4e 41 43 4b       TW_MR_SLA_NACK
     39b:	0a 00                                               ..

0000039d <__c.3702>:
     39d:	20 20 4f 50 5f 45 52 52 4f 52 0a 00                   OP_ERROR..

000003a9 <__c.3700>:
     3a9:	20 20 4f 50 5f 4c 45 4e 0a 00                         OP_LEN..

000003b3 <__c.3698>:
     3b3:	20 20 4f 50 5f 54 49 4d 45 4f 55 54 0a 00             OP_TIMEOUT..

000003c1 <__c.3696>:
     3c1:	20 20 25 73 0a 00                                     %s..

000003c7 <__c.3646>:
     3c7:	69 32 63 5f 74 69 6d 65 72 20 69 6e 69 74 20 66     i2c_timer init f
     3d7:	61 69 6c 65 64 0a 00                                ailed..

000003de <__c.3640>:
     3de:	69 32 63 5f 69 6e 69 74 20 70 72 65 73 63 61 6c     i2c_init prescal
     3ee:	65 20 6f 76 65 72 66 6c 6f 77 0a 00                 e overflow..

000003fa <__c.3597>:
     3fa:	49 32 43 20 6f 70 5b 25 64 5d 2d 3e 6c 65 6e 20     I2C op[%d]->len 
     40a:	3d 3d 20 30 0a 00                                   == 0..

00000410 <__c.3595>:
     410:	49 32 43 20 6f 70 5b 25 64 5d 2d 3e 62 75 66 20     I2C op[%d]->buf 
     420:	3d 3d 20 4e 55 4c 4c 0a 00                          == NULL..

00000429 <__c.3593>:
     429:	49 32 43 20 6f 70 5b 49 4e 44 45 58 20 25 64 20     I2C op[INDEX %d 
     439:	3e 3d 20 25 64 5d 0a 00                             >= %d]..

00000441 <__c.3643>:
     441:	72 74 63 5f 69 6e 69 74 20 20 77 72 69 74 65 20     rtc_init  write 
     451:	65 70 6f 63 68 20 66 61 69 6c 65 64 0a 00           epoch failed..

0000045f <__c.3633>:
     45f:	72 74 63 5f 72 75 6e 20 77 72 69 74 65 20 65 72     rtc_run write er
     46f:	72 6f 72 0a 00                                      ror..

00000474 <__c.3631>:
     474:	72 74 63 5f 72 75 6e 20 72 65 61 64 20 65 72 72     rtc_run read err
     484:	6f 72 0a 00                                         or..

00000488 <__c.3625>:
     488:	72 74 63 5f 72 65 61 64 20 65 72 72 6f 72 0a 00     rtc_read error..

00000498 <__c.3619>:
     498:	72 74 63 5f 77 72 69 74 65 20 65 72 72 6f 72 0a     rtc_write error.
	...

000004a9 <__c.3611>:
     4a9:	69 32 63 5f 72 74 63 5f 72 65 61 64 20 64 61 74     i2c_rtc_read dat
     4b9:	61 20 65 72 72 6f 72 0a 00                          a error..

000004c2 <__c.3609>:
     4c2:	69 32 63 5f 72 74 63 5f 72 65 61 64 20 61 64 64     i2c_rtc_read add
     4d2:	72 65 73 73 20 65 72 72 6f 72 0a 00                 ress error..

000004de <__c.3601>:
     4de:	69 32 63 5f 72 74 63 5f 77 72 69 74 65 20 64 61     i2c_rtc_write da
     4ee:	74 61 20 65 72 72 6f 72 0a 00                       ta error..

000004f8 <__c.3629>:
     4f8:	25 73 20 65 78 70 65 63 74 65 64 20 25 64 20 61     %s expected %d a
     508:	72 67 75 6d 65 6e 74 73 20 6f 6e 6c 79 20 67 6f     rguments only go
     518:	74 20 25 64 0a 00                                   t %d..

0000051e <__c.3586>:
     51e:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     52e:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

0000053e <__c.3665>:
     53e:	54 69 6d 65 72 73 20 65 6e 61 62 6c 65 64 0a 00     Timers enabled..

0000054e <__c.3663>:
     54e:	43 6c 6f 63 6b 20 49 6e 73 74 61 6c 6c 65 64 0a     Clock Installed.
	...

0000055f <__c.3661>:
     55f:	43 6c 6f 63 6b 20 74 61 73 6b 20 69 6e 69 74 20     Clock task init 
     56f:	66 61 69 6c 65 64 0a 00                             failed..

00000577 <__c.3659>:
     577:	43 6c 6f 63 6b 20 49 6e 69 74 0a 00                 Clock Init..

00000583 <__c.3657>:
     583:	54 69 6d 65 72 73 20 63 6f 6e 66 69 67 75 72 65     Timers configure
     593:	64 0a 00                                            d..

00000596 <__c.3655>:
     596:	54 69 6d 65 72 73 20 69 6e 69 74 20 63 61 6c 6c     Timers init call
     5a6:	65 64 0a 00                                         ed..

000005aa <__c.3635>:
     5aa:	5b 54 69 6d 65 3a 25 73 5d 0a 00                    [Time:%s]..

000005b5 <__c.3633>:
     5b5:	5b 25 73 20 54 69 6d 65 3a 25 73 5d 0a 00           [%s Time:%s]..

000005c3 <__c.3619>:
     5c3:	25 6c 64 2e 25 30 39 6c 64 00                       %ld.%09ld.

000005cd <__c.3599>:
     5cd:	73 65 74 5f 74 69 6d 65 72 73 3a 20 4e 6f 20 6d     set_timers: No m
     5dd:	6f 72 65 20 74 69 6d 65 72 73 21 0a 00              ore timers!..

000005ea <__c.3874>:
     5ea:	63 6c 6b 20 74 69 6d 65 3a 20 20 20 20 25 73 0a     clk time:    %s.
	...

000005fb <__c.3872>:
     5fb:	63 6c 6b 20 73 65 63 6f 6e 64 73 3a 20 25 6c 75     clk seconds: %lu
     60b:	0a 00                                               ..

0000060d <__c.3870>:
     60d:	52 54 43 20 72 65 61 64 20 66 61 69 6c 65 64 0a     RTC read failed.
	...

0000061e <__c.3868>:
     61e:	72 74 63 20 74 69 6d 65 3a 20 20 20 20 25 73 0a     rtc time:    %s.
	...

0000062f <__c.3866>:
     62f:	72 74 63 20 73 65 63 6f 6e 64 73 3a 20 25 6c 75     rtc seconds: %lu
     63f:	0a 00                                               ..

00000641 <__c.3859>:
     641:	75 73 65 20 73 65 74 64 61 74 65 20 63 6f 6d 6d     use setdate comm
     651:	61 6e 64 20 74 6f 20 63 68 61 6e 67 65 20 74 69     and to change ti
     661:	6d 65 0a 00                                         me..

00000665 <__c.3857>:
     665:	72 74 63 20 72 65 61 64 20 65 72 72 6f 72 61 66     rtc read erroraf
     675:	74 65 72 20 69 6e 69 74 0a 00                       ter init..

0000067f <__c.3855>:
     67f:	72 74 63 20 66 6f 72 63 65 20 69 6e 69 74 20 66     rtc force init f
     68f:	61 69 6c 65 64 0a 00                                ailed..

00000696 <__c.3853>:
     696:	61 74 74 65 6d 70 74 69 6e 67 20 72 74 63 20 69     attempting rtc i
     6a6:	6e 69 74 0a 00                                      nit..

000006ab <__c.3851>:
     6ab:	72 74 63 20 75 6e 69 6e 69 74 69 6c 69 7a 65 64     rtc uninitilized
     6bb:	0a 00                                               ..

000006bd <__c.3805>:
     6bd:	72 74 63 20 66 6f 72 63 65 20 69 6e 69 74 20 66     rtc force init f
     6cd:	61 69 6c 65 64 0a 00                                ailed..

000006d4 <__c.3803>:
     6d4:	69 6e 76 61 6c 69 64 20 6d 69 6e 3a 20 25 64 0a     invalid min: %d.
	...

000006e5 <__c.3801>:
     6e5:	69 6e 76 61 6c 69 64 20 68 6f 75 72 3a 20 25 64     invalid hour: %d
     6f5:	0a 00                                               ..

000006f7 <__c.3799>:
     6f7:	69 6e 76 61 6c 69 64 20 64 61 79 3a 20 25 64 0a     invalid day: %d.
	...

00000708 <__c.3797>:
     708:	69 6e 76 61 6c 69 64 20 6d 6f 6e 3a 20 25 64 0a     invalid mon: %d.
	...

00000719 <__c.3795>:
     719:	69 6e 76 61 6c 69 64 20 79 65 61 72 3a 20 25 64     invalid year: %d
     729:	0a 00                                               ..

0000072b <__c.3774>:
     72b:	45 6e 74 65 72 20 64 61 74 65 20 59 59 59 59 20     Enter date YYYY 
     73b:	4d 4d 20 44 44 20 48 48 3a 4d 4d 3a 53 53 20 3e     MM DD HH:MM:SS >
	...

0000074c <__c.3649>:
     74c:	25 73 20 25 73 20 25 32 64 20 25 30 32 64 3a 25     %s %s %2d %02d:%
     75c:	30 32 64 3a 25 30 32 64 20 25 34 64 00              02d:%02d %4d.

00000769 <__c.3617>:
     769:	73 65 6c 65 63 74 20 66 61 69 6c 65 64 21 0a 00     select failed!..

00000779 <__c.3651>:
     779:	45 4e 44 20 4d 4d 43 20 49 4e 49 54 0a 00           END MMC INIT..

00000787 <__c.3649>:
     787:	4d 4d 43 20 42 6c 6f 63 6b 20 53 69 7a 65 3a 20     MMC Block Size: 
     797:	25 6c 64 0a 00                                      %ld..

0000079c <__c.3647>:
     79c:	4d 4d 43 20 42 6c 6f 63 6b 20 53 69 7a 65 20 2d     MMC Block Size -
     7ac:	20 72 65 61 64 20 66 61 69 6c 65 64 0a 00            read failed..

000007ba <__c.3644>:
     7ba:	2c 20 43 6f 64 65 20 70 61 67 65 3a 20 25 75 0a     , Code page: %u.
	...

000007cb <__c.3642>:
     7cb:	4c 46 4e 20 45 6e 61 62 6c 65 64 00                 LFN Enabled.

000007d7 <__c.3640>:
     7d7:	4d 4d 43 20 43 61 72 64 20 49 6e 73 65 72 74 65     MMC Card Inserte
     7e7:	64 0a 00                                            d..

000007ea <__c.3638>:
     7ea:	2a 2a 2a 20 4d 4d 43 20 43 61 72 64 20 4e 4f 54     *** MMC Card NOT
     7fa:	20 49 6e 73 65 72 74 65 64 21 20 2a 2a 2a 0a 00      Inserted! ***..

0000080a <__c.3636>:
     80a:	53 54 41 52 54 20 4d 4d 43 20 49 4e 49 54 0a 00     START MMC INIT..

0000081a <__c.3622>:
     81a:	4d 4d 43 20 54 49 4d 45 4f 55 54 0a 00              MMC TIMEOUT..

00000827 <__c.3594>:
     827:	4d 4d 43 20 43 6c 6f 63 6b 20 74 61 73 6b 20 69     MMC Clock task i
     837:	6e 69 74 20 66 61 69 6c 65 64 0a 00                 nit failed..

00000843 <__c.3672>:
     843:	0a 00                                               ..

00000845 <__c.3670>:
     845:	25 73 20 25 75 2f 25 30 32 75 2f 25 30 32 75 20     %s %u/%02u/%02u 
     855:	25 30 32 75 3a 25 30 32 75 20 25 39 6c 75 20 25     %02u:%02u %9lu %
     865:	73 00                                               s.

00000867 <__c.3668>:
     867:	66 61 74 66 73 5f 66 69 6c 69 6e 66 6f 5f 6c 69     fatfs_filinfo_li
     877:	73 74 3a 20 65 6d 70 74 79 0a 00                    st: empty..

00000882 <__c.3662>:
     882:	25 75 20 66 69 6c 65 73 2c 20 25 6c 75 20 62 79     %u files, %lu by
     892:	74 65 73 2e 0a 25 75 20 66 6f 6c 64 65 72 73 2e     tes..%u folders.
     8a2:	0a 25 6c 75 20 4b 42 20 74 6f 74 61 6c 20 64 69     .%lu KB total di
     8b2:	73 6b 20 73 70 61 63 65 2e 0a 25 6c 75 20 4b 42     sk space..%lu KB
     8c2:	20 61 76 61 69 6c 61 62 6c 65 2e 0a 00               available...

000008cf <__c.3660>:
     8cf:	66 61 74 66 73 5f 73 74 61 74 75 73 20 66 61 74     fatfs_status fat
     8df:	66 73 5f 73 63 61 6e 5f 66 69 6c 65 73 20 66 61     fs_scan_files fa
     8ef:	69 6c 65 64 0a 00                                   iled..

000008f5 <__c.3658>:
     8f5:	56 6f 6c 75 6d 65 20 53 2f 4e 20 20 20 20 20 20     Volume S/N      
     905:	20 20 20 20 20 20 20 20 3d 20 25 30 34 58 2d 25             = %04X-%
     915:	30 34 58 0a 00                                      04X..

0000091a <__c.3656>:
     91a:	56 6f 6c 75 6d 65 20 6e 61 6d 65 20 20 20 20 20     Volume name     
     92a:	20 20 20 20 20 20 20 20 3d 20 25 73 0a 00                   = %s..

00000938 <__c.3654>:
     938:	66 61 74 66 73 5f 73 74 61 74 75 73 20 66 5f 67     fatfs_status f_g
     948:	65 74 6c 61 62 65 6c 20 66 61 69 6c 65 64 0a 00     etlabel failed..

00000958 <__c.3652>:
     958:	44 61 74 61 20 73 74 61 72 74 20 28 6c 62 61 29     Data start (lba)
     968:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

00000977 <__c.3650>:
     977:	44 49 52 20 73 74 61 72 74 20 28 6c 62 61 2c 63     DIR start (lba,c
     987:	6c 75 73 74 6f 72 29 20 3d 20 25 6c 75 0a 00        lustor) = %lu..

00000996 <__c.3648>:
     996:	46 41 54 20 73 74 61 72 74 20 28 6c 62 61 29 20     FAT start (lba) 
     9a6:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

000009b5 <__c.3646>:
     9b5:	4e 75 6d 62 65 72 20 6f 66 20 63 6c 75 73 74 65     Number of cluste
     9c5:	72 73 20 20 20 20 20 20 3d 20 25 6c 75 0a 00        rs      = %lu..

000009d4 <__c.3644>:
     9d4:	53 65 63 74 6f 72 73 2f 46 41 54 20 20 20 20 20     Sectors/FAT     
     9e4:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

000009f3 <__c.3642>:
     9f3:	52 6f 6f 74 20 44 49 52 20 65 6e 74 72 69 65 73     Root DIR entries
     a03:	20 20 20 20 20 20 20 20 3d 20 25 75 0a 00                   = %u..

00000a11 <__c.3640>:
     a11:	4e 75 6d 62 65 72 20 6f 66 20 46 41 54 73 20 20     Number of FATs  
     a21:	20 20 20 20 20 20 20 20 3d 20 25 75 0a 00                   = %u..

00000a2f <__c.3638>:
     a2f:	42 79 74 65 73 2f 43 6c 75 73 74 65 72 20 20 20     Bytes/Cluster   
     a3f:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

00000a4e <__c.3636>:
     a4e:	46 41 54 20 74 79 70 65 20 20 20 20 20 20 20 20     FAT type        
     a5e:	20 20 20 20 20 20 20 20 3d 20 25 73 0a 00                   = %s..

00000a6c <__c.3634>:
     a6c:	66 61 74 66 73 5f 73 74 61 74 75 73 20 66 5f 67     fatfs_status f_g
     a7c:	65 74 66 72 65 65 20 66 61 69 6c 65 64 0a 00        etfree failed..

00000a8b <__c.3632>:
     a8b:	66 61 74 66 73 20 73 74 61 74 75 73 3a 25 73 0a     fatfs status:%s.
	...

00000a9c <__c.3596>:
     a9c:	72 63 3d 25 75 0a 00                                rc=%u..

00000aa3 <__c.3630>:
     aa3:	2c 20 25 31 30 6c 75 4b 20 62 79 74 65 73 20 66     , %10luK bytes f
     ab3:	72 65 65 0a 00                                      ree..

00000ab8 <__c.3628>:
     ab8:	25 34 75 20 46 69 6c 65 28 73 29 2c 25 31 30 6c     %4u File(s),%10l
     ac8:	75 20 62 79 74 65 73 20 74 6f 74 61 6c 0a 25 34     u bytes total.%4
     ad8:	75 20 44 69 72 28 73 29 00                          u Dir(s).

00000ae1 <__c.3624>:
     ae1:	4c 69 73 74 69 6e 67 3a 5b 25 73 5d 0a 00           Listing:[%s]..

00000aef <__c.3611>:
     aef:	45 4e 44 20 4d 4d 43 20 54 45 53 54 0a 00           END MMC TEST..

00000afd <__c.3609>:
     afd:	4d 4d 43 20 44 69 72 65 63 74 6f 72 79 20 4c 69     MMC Directory Li
     b0d:	73 74 0a 00                                         st..

00000b11 <__c.3607>:
     b11:	53 54 41 52 54 20 4d 4d 43 20 54 45 53 54 0a 00     START MMC TEST..

00000b21 <__c.3589>:
     b21:	66 61 74 66 73 20 20 20 20 20 68 65 6c 70 0a 00     fatfs     help..

00000b31 <__c.3587>:
     b31:	4e 6f 74 65 3a 20 66 61 74 66 73 20 74 65 73 74     Note: fatfs test
     b41:	73 20 4d 55 53 54 20 73 74 61 72 74 20 77 69 74     s MUST start wit
     b51:	68 20 22 66 61 74 66 73 22 20 6b 65 79 77 6f 72     h "fatfs" keywor
     b61:	64 0a 66 61 74 66 73 20 68 65 6c 70 0a 66 61 74     d.fatfs help.fat
     b71:	66 73 20 6d 6d 63 5f 74 65 73 74 0a 66 61 74 66     fs mmc_test.fatf
     b81:	73 20 6d 6d 63 5f 69 6e 69 74 0a 66 61 74 66 73     s mmc_init.fatfs
     b91:	20 6c 73 20 64 69 72 65 63 74 6f 72 79 0a 66 61      ls directory.fa
     ba1:	74 66 73 20 73 74 61 74 75 73 0a 0a 00              tfs status...

00000bae <__c.3919>:
     bae:	25 73 0a 00                                         %s..

00000bb2 <__c.3917>:
     bb2:	25 73 3a 20 25 73 0a 00                             %s: %s..

00000bba <__c.3672>:
     bba:	53 65 65 6b 20 66 61 69 6c 65 64 00                 Seek failed.

00000bc6 <__c.3601>:
     bc6:	66 70 75 74 63 20 73 74 72 65 61 6d 2d 3e 70 75     fputc stream->pu
     bd6:	74 20 4e 55 4c 4c 0a 00                             t NULL..

00000bde <__c.3594>:
     bde:	66 67 65 74 63 20 73 74 72 65 61 6d 2d 3e 67 65     fgetc stream->ge
     bee:	74 20 4e 55 4c 4c 0a 00                             t NULL..

00000bf6 <__c.3764>:
     bf6:	46 69 6c 65 73 3a 20 25 64 0a 00                    Files: %d..

00000c01 <__c.3760>:
     c01:	6e 61 6d 65 3a 5b 25 73 5d 20 74 6f 6f 20 6c 6f     name:[%s] too lo
     c11:	6e 67 20 77 69 74 68 20 66 75 6c 6c 20 70 61 74     ng with full pat
     c21:	68 0a 00                                            h..

00000c24 <__c.3757>:
     c24:	6f 70 65 6e 64 69 72 20 66 61 69 6c 65 64 0a 00     opendir failed..

00000c34 <__c.3752>:
     c34:	4c 69 73 74 69 6e 67 3a 5b 25 73 5d 0a 00           Listing:[%s]..

00000c42 <__c.3750>:
     c42:	6c 73 3a 20 63 61 6e 6e 6f 74 20 73 74 61 74 20     ls: cannot stat 
     c52:	5b 25 73 5d 0a 00                                   [%s]..

00000c58 <__c.3748>:
     c58:	6c 73 3a 20 43 61 6e 27 74 20 67 65 74 20 63 75     ls: Can't get cu
     c68:	72 72 65 6e 74 20 64 69 72 65 63 74 6f 72 79 0a     rrent directory.
	...

00000c79 <__c.3735>:
     c79:	25 73 20 6e 6f 6e 65 20 6e 6f 6e 65 20 25 31 32     %s none none %12
     c89:	6c 64 20 25 73 20 25 73 0a 00                       ld %s %s..

00000c93 <__c.3730>:
     c93:	25 73 0a 00                                         %s..

00000c97 <__c.3728>:
     c97:	63 61 6e 20 6e 6f 74 20 73 74 61 74 3a 20 25 73     can not stat: %s
     ca7:	0a 00                                               ..

00000ca9 <__c.3716>:
     ca9:	0d 00                                               ..

00000cab <__c.3714>:
     cab:	4d 6f 72 65 2e 2e 00                                More...

00000cb2 <__c.3704>:
     cb2:	25 6c 75 20 62 79 74 65 73 20 63 6f 70 69 65 64     %lu bytes copied
     cc2:	2e 0a 00                                            ...

00000cc5 <__c.3700>:
     cc5:	43 6f 70 69 65 64 3a 20 25 30 38 6c 64 0d 00        Copied: %08ld..

00000cd4 <__c.3697>:
     cd4:	57 72 69 74 65 20 65 72 72 6f 72 0a 00              Write error..

00000ce1 <__c.3695>:
     ce1:	0a 43 6f 70 79 69 6e 67 2e 2e 2e 0a 00              .Copying.....

00000cee <__c.3693>:
     cee:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000cfe <__c.3691>:
     cfe:	43 72 65 61 74 69 6e 67 20 25 73 0a 00              Creating %s..

00000d0b <__c.3689>:
     d0b:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000d1b <__c.3687>:
     d1b:	4f 70 65 6e 69 6e 67 20 25 73 0a 00                 Opening %s..

00000d27 <__c.3676>:
     d27:	25 6c 64 20 62 79 74 65 73 0a 00                    %ld bytes..

00000d32 <__c.3674>:
     d32:	0a 00                                               ..

00000d34 <__c.3669>:
     d34:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000d44 <__c.3659>:
     d44:	72 6d 64 69 72 20 25 73 20 66 61 69 6c 65 64 0a     rmdir %s failed.
	...

00000d55 <__c.3657>:
     d55:	72 6d 20 25 73 20 66 61 69 6c 65 64 0a 00           rm %s failed..

00000d63 <__c.3655>:
     d63:	72 65 6e 61 6d 65 20 25 73 20 74 6f 20 25 73 0a     rename %s to %s.
	...

00000d74 <__c.3653>:
     d74:	25 73 0a 00                                         %s..

00000d78 <__c.3651>:
     d78:	70 77 64 20 46 41 49 4c 45 44 0a 00                 pwd FAILED..

00000d84 <__c.3647>:
     d84:	6d 6b 64 69 72 20 25 73 20 66 61 69 6c 65 64 0a     mkdir %s failed.
	...

00000d95 <__c.3640>:
     d95:	6c 73 3a 20 6e 75 6c 6c 20 61 72 67 75 6d 65 6e     ls: null argumen
     da5:	74 20 23 20 25 64 0a 00                             t # %d..

00000dad <__c.3636>:
     dad:	63 68 64 69 72 20 25 73 20 66 61 69 6c 65 64 0a     chdir %s failed.
	...

00000dbe <__c.3620>:
     dbe:	4e 6f 74 65 3a 20 70 6f 73 69 78 20 70 72 65 66     Note: posix pref
     dce:	69 78 20 69 73 20 6f 70 74 69 6f 6e 61 6c 0a 70     ix is optional.p
     dde:	6f 73 69 78 20 63 61 74 20 66 69 6c 65 20 5b 2d     osix cat file [-
     dee:	70 5d 0a 70 6f 73 69 78 20 63 64 20 64 69 72 0a     p].posix cd dir.
     dfe:	70 6f 73 69 78 20 63 6f 70 79 20 66 69 6c 65 31     posix copy file1
     e0e:	20 66 69 6c 65 32 0a 70 6f 73 69 78 20 6c 73 20      file2.posix ls 
     e1e:	64 69 72 20 5b 2d 6c 5d 0a 70 6f 73 69 78 20 6d     dir [-l].posix m
     e2e:	6b 64 69 72 20 64 69 72 0a 70 6f 73 69 78 20 70     kdir dir.posix p
     e3e:	61 67 65 20 4e 4e 0a 70 6f 73 69 78 20 70 77 64     age NN.posix pwd
     e4e:	0a 70 6f 73 69 78 20 72 6d 20 66 69 6c 65 0a 70     .posix rm file.p
     e5e:	6f 73 69 78 20 72 6d 64 69 72 20 64 69 72 0a 70     osix rmdir dir.p
     e6e:	6f 73 69 78 20 72 65 6e 61 6d 65 20 6f 6c 64 20     osix rename old 
     e7e:	6e 65 77 0a 0a 00                                   new...

00000e84 <__c.3618>:
     e84:	70 6f 73 69 78 20 20 20 20 20 68 65 6c 70 0a 00     posix     help..

00000e94 <__c.3807>:
     e94:	43 6c 6f 73 65 20 65 72 72 6f 72 3a 20 00           Close error: .

00000ea2 <__c.3801>:
     ea2:	53 65 65 6b 20 65 72 72 6f 72 3a 20 00              Seek error: .

00000eaf <__c.3794>:
     eaf:	57 72 69 74 65 20 65 72 72 6f 72 3a 20 00           Write error: .

00000ebd <__c.3785>:
     ebd:	52 65 61 64 20 65 72 72 6f 72 3a 20 00              Read error: .

00000eca <__c.3776>:
     eca:	4f 70 65 6e 20 65 72 72 6f 72 3a 5b 25 73 5d 20     Open error:[%s] 
	...

00000edb <__c.3762>:
     edb:	5b 50 50 52 20 44 49 53 41 42 4c 45 20 41 4c 4c     [PPR DISABLE ALL
     eeb:	5d 0a 00                                            ]..

00000eee <__c.3744>:
     eee:	47 50 49 42 20 43 6c 6f 63 6b 20 74 61 73 6b 20     GPIB Clock task 
     efe:	69 6e 69 74 20 66 61 69 6c 65 64 0a 00              init failed..

00000f0b <__c.4423>:
     f0b:	5b 67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 20     [gpib_write_str 
     f1b:	73 65 6e 74 28 25 64 29 20 65 78 70 65 63 74 65     sent(%d) expecte
     f2b:	64 28 25 64 29 5d 0a 00                             d(%d)]..

00000f33 <__c.4415>:
     f33:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
     f43:	20 44 41 56 3d 3d 31 3e 0a 00                        DAV==1>..

00000f4d <__c.4410>:
     f4d:	3c 67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 20     <gpib_write_str 
     f5d:	74 69 6d 65 6f 75 74 20 77 61 69 74 69 6e 67 20     timeout waiting 
     f6d:	66 6f 72 20 41 54 4e 20 3d 20 31 3e 0a 00           for ATN = 1>..

00000f7b <__c.4408>:
     f7b:	67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 3a 20     gpib_write_str: 
     f8b:	73 69 7a 65 20 3d 20 30 0a 00                       size = 0..

00000f95 <__c.4398>:
     f95:	5b 67 70 69 62 5f 72 65 61 64 5f 73 74 72 20 72     [gpib_read_str r
     fa5:	65 61 64 28 25 64 29 20 65 78 70 65 63 74 65 64     ead(%d) expected
     fb5:	28 25 64 29 5d 0a 00                                (%d)]..

00000fbc <__c.4394>:
     fbc:	67 70 69 62 5f 72 65 61 64 5f 73 74 72 28 69 6e     gpib_read_str(in
     fcc:	64 3a 25 64 29 3a 20 41 54 4e 20 25 30 32 58 48     d:%d): ATN %02XH
     fdc:	20 75 6e 65 78 70 65 63 74 65 64 0a 00               unexpected..

00000fe9 <__c.4391>:
     fe9:	67 70 69 62 5f 72 65 61 64 5f 73 74 72 3a 20 73     gpib_read_str: s
     ff9:	69 7a 65 20 3d 20 30 0a 00                          ize = 0..

00001002 <__c.4375>:
    1002:	20 4d 53 41 20 25 30 32 58 68 00                     MSA %02Xh.

0000100d <__c.4373>:
    100d:	20 4d 54 41 20 25 30 32 58 68 00                     MTA %02Xh.

00001018 <__c.4371>:
    1018:	20 4d 4c 41 20 25 30 32 58 68 00                     MLA %02Xh.

00001023 <__c.4367>:
    1023:	20 20 20 20 20 00                                        .

00001029 <__c.4365>:
    1029:	25 30 32 58 20 25 63 20 00                          %02X %c .

00001032 <__c.4339>:
    1032:	67 70 69 62 5f 72 65 61 64 5f 62 79 74 65 3a 20     gpib_read_byte: 
    1042:	49 46 43 20 73 74 61 74 65 3d 25 64 0a 00           IFC state=%d..

00001050 <__c.4323>:
    1050:	3c 47 50 49 42 20 54 58 20 54 49 4d 45 4f 55 54     <GPIB TX TIMEOUT
    1060:	3e 0a 00                                            >..

00001063 <__c.4318>:
    1063:	3c 67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65     <gpib_write_byte
    1073:	20 74 69 6d 65 6f 75 74 20 77 61 69 74 69 6e 67      timeout waiting
    1083:	20 66 6f 72 20 4e 44 41 43 3d 3d 31 3e 0a 00         for NDAC==1>..

00001092 <__c.4314>:
    1092:	3c 67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65     <gpib_write_byte
    10a2:	20 74 69 6d 65 6f 75 74 20 77 61 69 74 69 6e 67      timeout waiting
    10b2:	20 66 6f 72 20 4e 52 46 44 3d 3d 31 20 26 26 20      for NRFD==1 && 
    10c2:	4e 44 41 43 20 3d 3d 20 30 3e 0a 00                 NDAC == 0>..

000010ce <__c.4310>:
    10ce:	3c 67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65     <gpib_write_byte
    10de:	20 74 69 6d 65 6f 75 74 20 77 61 69 74 69 6e 67      timeout waiting
    10ee:	20 66 6f 72 20 4e 52 46 44 3d 3d 31 20 26 26 20      for NRFD==1 && 
    10fe:	4e 44 41 43 20 3d 3d 20 30 3e 0a 00                 NDAC == 0>..

0000110a <__c.4308>:
    110a:	67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65 3a     gpib_write_byte:
    111a:	20 41 54 4e 20 3d 20 30 20 77 68 69 6c 65 20 77      ATN = 0 while w
    112a:	61 69 74 69 6e 67 20 66 6f 72 20 4e 52 46 44 20     aiting for NRFD 
    113a:	4c 4f 57 20 73 74 61 74 65 20 3d 25 64 0a 00        LOW state =%d..

00001149 <__c.4303>:
    1149:	67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65 3a     gpib_write_byte:
    1159:	20 49 46 43 20 73 74 61 74 65 3d 25 64 0a 00         IFC state=%d..

00001168 <__c.4287>:
    1168:	67 70 69 62 5f 75 6e 72 65 61 64 3a 20 65 72 72     gpib_unread: err
    1178:	6f 72 2c 20 63 61 6e 20 6f 6e 6c 79 20 62 65 20     or, can only be 
    1188:	63 61 6c 6c 65 64 20 6f 6e 63 65 21 0a 00           called once!..

00001196 <__c.4271>:
    1196:	5b 44 50 50 52 20 62 69 74 3a 25 64 2c 20 6d 61     [DPPR bit:%d, ma
    11a6:	73 6b 3a 25 30 32 58 48 5d 0a 00                    sk:%02XH]..

000011b1 <__c.4269>:
    11b1:	67 70 69 62 5f 64 69 73 61 62 6c 65 5f 50 50 52     gpib_disable_PPR
    11c1:	3a 20 62 69 74 20 25 64 20 6f 75 74 20 6f 66 20     : bit %d out of 
    11d1:	72 61 6e 67 65 0a 00                                range..

000011d8 <__c.4264>:
    11d8:	5b 45 50 50 52 20 62 69 74 3a 25 64 2c 20 6d 61     [EPPR bit:%d, ma
    11e8:	73 6b 3a 25 30 32 58 48 5d 0a 00                    sk:%02XH]..

000011f3 <__c.4262>:
    11f3:	67 70 69 62 5f 65 6e 61 62 6c 65 5f 50 50 52 3a     gpib_enable_PPR:
    1203:	20 62 69 74 20 25 64 20 6f 75 74 20 6f 66 20 72      bit %d out of r
    1213:	61 6e 67 65 0a 00                                   ange..

00001219 <__c.4257>:
    1219:	5b 47 50 49 42 20 53 54 41 54 45 20 49 4e 49 54     [GPIB STATE INIT
    1229:	5d 0a 00                                            ]..

0000122c <__c.4245>:
    122c:	5b 47 50 49 42 20 42 55 53 5f 49 4e 49 54 5d 0a     [GPIB BUS_INIT].
	...

0000123d <__c.4422>:
    123d:	5b 50 52 49 4e 54 45 52 20 63 6c 6f 73 65 5d 0a     [PRINTER close].
	...

0000124e <__c.4417>:
    124e:	5b 53 41 20 25 30 32 58 48 2c 20 6c 69 73 74 65     [SA %02XH, liste
    125e:	6e 3a 25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30     n:%02XH, talk:%0
    126e:	32 58 48 5d 0a 00                                   2XH]..

00001274 <__c.4415>:
    1274:	5b 53 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [SA %02XH AMIGO]
    1284:	0a 00                                               ..

00001286 <__c.4413>:
    1286:	5b 53 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [SA %02XH SS80].
	...

00001297 <__c.4408>:
    1297:	5b 54 41 20 25 30 32 58 48 5d 0a 00                 [TA %02XH]..

000012a3 <__c.4406>:
    12a3:	5b 50 52 49 4e 54 45 52 20 4f 50 45 4e 5d 0a 00     [PRINTER OPEN]..

000012b3 <__c.4404>:
    12b3:	5b 54 41 20 25 30 32 58 48 20 50 52 49 4e 54 45     [TA %02XH PRINTE
    12c3:	52 5d 0a 00                                         R]..

000012c7 <__c.4402>:
    12c7:	5b 54 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [TA %02XH AMIGO]
    12d7:	0a 00                                               ..

000012d9 <__c.4400>:
    12d9:	5b 54 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [TA %02XH SS80].
	...

000012ea <__c.4398>:
    12ea:	5b 55 4e 54 5d 0a 00                                [UNT]..

000012f1 <__c.4393>:
    12f1:	5b 4c 41 20 25 30 32 58 48 5d 0a 00                 [LA %02XH]..

000012fd <__c.4391>:
    12fd:	5b 4c 41 20 25 30 32 58 48 20 50 52 49 4e 54 45     [LA %02XH PRINTE
    130d:	52 5d 0a 00                                         R]..

00001311 <__c.4389>:
    1311:	5b 4c 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [LA %02XH SS80].
	...

00001322 <__c.4387>:
    1322:	5b 4c 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [LA %02XH AMIGO]
    1332:	0a 00                                               ..

00001334 <__c.4385>:
    1334:	0a 00                                               ..

00001336 <__c.4383>:
    1336:	5b 55 4e 4c 5d 0a 00                                [UNL]..

0000133d <__c.4378>:
    133d:	5b 47 50 49 42 20 28 25 30 32 58 48 29 20 6e 6f     [GPIB (%02XH) no
    134d:	74 20 64 65 66 69 6e 65 64 20 54 4f 44 4f 5d 0a     t defined TODO].
	...

0000135e <__c.4376>:
    135e:	5b 44 43 4c 5d 0a 00                                [DCL]..

00001365 <__c.4374>:
    1365:	5b 53 44 43 20 41 4d 49 47 4f 5d 0a 00              [SDC AMIGO]..

00001372 <__c.4372>:
    1372:	5b 53 44 43 20 53 53 38 30 5d 0a 00                 [SDC SS80]..

0000137e <__c.4370>:
    137e:	5b 53 44 43 5d 0a 00                                [SDC]..

00001385 <__c.4368>:
    1385:	5b 53 50 44 5d 0a 00                                [SPD]..

0000138c <__c.4366>:
    138c:	5b 53 50 45 5d 0a 00                                [SPE]..

00001393 <__c.4364>:
    1393:	5b 50 50 55 20 75 6e 73 75 70 70 6f 72 74 65 64     [PPU unsupported
    13a3:	20 54 4f 44 4f 5d 0a 00                              TODO]..

000013ab <__c.4362>:
    13ab:	5b 50 50 43 20 75 6e 73 75 70 70 6f 72 74 65 64     [PPC unsupported
    13bb:	20 54 4f 44 4f 5d 0a 00                              TODO]..

000013c3 <__c.4357>:
    13c3:	5b 49 44 45 4e 54 20 55 6e 69 74 3a 25 30 32 58     [IDENT Unit:%02X
    13d3:	48 3d 25 30 34 58 48 5d 0a 00                       H=%04XH]..

000013dd <__c.4355>:
    13dd:	5b 49 44 45 4e 54 20 55 6e 69 74 3a 25 30 32 58     [IDENT Unit:%02X
    13ed:	48 3d 25 30 34 58 48 20 46 41 49 4c 45 44 5d 0a     H=%04XH FAILED].
	...

000013fe <__c.4328>:
    13fe:	3c 4d 45 44 49 41 20 4d 49 53 53 49 4e 47 3e 0a     <MEDIA MISSING>.
	...

0000140f <__c.4326>:
    140f:	3c 49 4e 54 45 52 52 55 50 54 3e 0a 00              <INTERRUPT>..

0000141c <__c.4324>:
    141c:	3c 42 55 53 3e 0a 00                                <BUS>..

00001423 <__c.4322>:
    1423:	3c 54 49 4d 45 4f 55 54 3e 0a 00                    <TIMEOUT>..

0000142e <__c.4320>:
    142e:	3c 49 46 43 3e 0a 00                                <IFC>..

00001435 <__c.4315>:
    1435:	43 61 70 74 75 72 69 6e 67 20 43 6c 6f 73 65 64     Capturing Closed
    1445:	0a 00                                               ..

00001447 <__c.4313>:
    1447:	44 6f 6e 65 0a 00                                   Done..

0000144d <__c.4309>:
    144d:	65 78 69 74 69 6e 67 2e 2e 2e 0a 00                 exiting.....

00001459 <__c.4307>:
    1459:	50 72 65 73 73 20 41 4e 59 20 6b 65 79 20 74 6f     Press ANY key to
    1469:	20 65 78 69 74 0a 00                                 exit..

00001470 <__c.4305>:
    1470:	46 55 4c 4c 20 47 50 49 42 20 42 55 53 20 68 61     FULL GPIB BUS ha
    1480:	6e 64 73 68 61 6b 65 20 6c 6f 67 67 69 6e 67 20     ndshake logging 
    1490:	72 65 71 75 65 73 74 65 64 0a 00                    requested..

0000149b <__c.4303>:
    149b:	43 61 70 74 75 72 69 6e 67 20 47 50 49 42 20 42     Capturing GPIB B
    14ab:	55 53 20 74 6f 3a 25 73 0a 00                       US to:%s..

000014b5 <__c.4257>:
    14b5:	43 61 72 64 20 69 73 20 77 72 69 74 65 20 70 72     Card is write pr
    14c5:	6f 74 65 63 74 65 64 0a 00                          otected..

000014ce <__c.4255>:
    14ce:	25 73 20 6f 70 65 6e 20 66 61 69 6c 75 72 65 0a     %s open failure.
	...

000014df <__c.4253>:
    14df:	25 73 20 68 61 64 20 25 64 20 65 72 72 6f 72 73     %s had %d errors
    14ef:	0a 00                                               ..

000014f1 <__c.4448>:
    14f1:	64 65 62 75 67 3d 25 30 34 58 48 0a 00              debug=%04XH..

000014fe <__c.4440>:
    14fe:	4e 6f 74 65 3a 20 67 70 69 62 20 70 72 65 66 69     Note: gpib prefi
    150e:	78 20 69 73 20 6f 70 74 69 6f 6e 61 6c 0a 67 70     x is optional.gp
    151e:	69 62 20 61 64 64 72 65 73 73 65 73 0a 20 20 20     ib addresses.   
    152e:	44 69 73 70 6c 61 79 20 61 6c 6c 20 64 65 76 69     Display all devi
    153e:	63 65 20 47 50 49 42 20 62 75 73 20 61 64 64 72     ce GPIB bus addr
    154e:	65 73 73 65 73 20 61 6e 64 20 50 50 52 20 76 61     esses and PPR va
    155e:	6c 75 65 73 0a 67 70 69 62 20 63 6f 6e 66 69 67     lues.gpib config
    156e:	20 5b 2d 76 5d 0a 20 20 20 44 69 73 70 6c 61 79      [-v].   Display
    157e:	20 63 75 72 72 65 6e 74 20 64 72 69 76 65 73 20      current drives 
    158e:	63 6f 6e 66 69 67 75 72 61 74 69 6f 6e 0a 20 20     configuration.  
    159e:	20 2d 76 20 56 65 72 62 6f 73 65 20 2d 20 73 68      -v Verbose - sh
    15ae:	6f 77 20 66 75 6c 6c 20 64 65 74 61 69 6c 0a 67     ow full detail.g
    15be:	70 69 62 20 64 65 62 75 67 20 4e 0a 20 20 20 64     pib debug N.   d
    15ce:	65 62 75 67 20 6d 65 73 73 61 67 65 20 72 65 70     ebug message rep
    15de:	6f 72 74 69 6e 67 20 73 65 65 20 68 70 64 69 73     orting see hpdis
    15ee:	6b 2e 63 66 67 20 66 6f 72 20 64 65 74 61 69 6c     k.cfg for detail
    15fe:	73 0a 67 70 69 62 20 65 6c 61 70 73 65 64 0a 67     s.gpib elapsed.g
    160e:	70 69 62 20 65 6c 61 70 73 65 64 5f 72 65 73 65     pib elapsed_rese
    161e:	74 0a 67 70 69 62 20 69 66 63 0a 67 70 69 62 20     t.gpib ifc.gpib 
    162e:	70 6c 6f 74 20 66 69 6c 65 6e 61 6d 65 2e 74 78     plot filename.tx
    163e:	74 0a 67 70 69 62 20 70 6c 6f 74 5f 65 63 68 6f     t.gpib plot_echo
    164e:	0a 67 70 69 62 20 74 61 73 6b 0a 67 70 69 62 20     .gpib task.gpib 
    165e:	74 72 61 63 65 20 66 69 6c 65 6e 61 6d 65 2e 74     trace filename.t
    166e:	78 74 20 5b 42 55 53 5d 0a 20 20 20 44 69 73 70     xt [BUS].   Disp
    167e:	6c 61 79 20 61 63 74 69 76 69 74 79 20 6f 66 20     lay activity of 
    168e:	47 50 49 42 20 62 75 73 20 61 6e 64 20 6c 6f 67     GPIB bus and log
    169e:	20 69 74 0a 20 20 20 42 55 53 20 2d 20 69 6e 63      it.   BUS - inc
    16ae:	6c 75 64 65 20 68 61 6e 64 73 68 61 6b 65 20 73     lude handshake s
    16be:	74 61 74 65 73 0a 0a 00                             tates...

000016c6 <__c.4438>:
    16c6:	67 70 69 62 20 20 20 20 20 68 65 6c 70 0a 00        gpib     help..

000016d5 <__c.4969>:
    16d5:	0a 00                                               ..

000016d7 <__c.4964>:
    16d7:	4d 6f 75 6e 74 65 64 20 64 72 69 76 65 73 0a 00     Mounted drives..

000016e7 <__c.4959>:
    16e7:	50 52 49 4e 54 45 52 20 25 2d 38 73 20 25 32 64     PRINTER %-8s %2d
    16f7:	0a 00                                               ..

000016f9 <__c.4957>:
    16f9:	41 4d 49 47 4f 20 20 20 25 2d 38 73 20 25 32 64     AMIGO   %-8s %2d
    1709:	20 25 73 0a 00                                       %s..

0000170e <__c.4955>:
    170e:	53 53 38 30 20 20 20 20 25 2d 38 73 20 25 32 64     SS80    %-8s %2d
    171e:	20 25 73 0a 00                                       %s..

00001723 <__c.4947>:
    1723:	45 78 70 65 63 74 65 64 20 41 4d 49 47 4f 20 6f     Expected AMIGO o
    1733:	72 20 53 53 38 30 20 6f 72 20 43 53 38 30 20 66     r SS80 or CS80 f
    1743:	6f 72 20 5b 25 73 5d 0a 00                          or [%s]..

0000174c <__c.4945>:
    174c:	43 6f 75 6c 64 20 6e 6f 74 20 61 6c 6c 6f 63 61     Could not alloca
    175c:	74 65 20 41 4d 49 47 4f 20 73 74 72 75 63 74 75     te AMIGO structu
    176c:	72 65 20 66 6f 72 20 25 73 0a 00                    re for %s..

00001777 <__c.4941>:
    1777:	43 6f 75 6c 64 20 6e 6f 74 20 61 6c 6c 6f 63 61     Could not alloca
    1787:	74 65 20 53 53 38 30 20 73 74 72 75 63 74 75 72     te SS80 structur
    1797:	65 20 66 6f 72 20 25 73 0a 00                       e for %s..

000017a1 <__c.4937>:
    17a1:	57 41 52 4e 49 4e 47 3a 20 6d 6f 64 65 6c 20 4e     WARNING: model N
    17b1:	4f 54 20 66 6f 75 6e 64 20 69 6e 20 68 70 64 69     OT found in hpdi
    17c1:	72 2e 69 6e 69 21 0a 00                             r.ini!..

000017c9 <__c.4935>:
    17c9:	43 6f 75 6c 64 20 6e 6f 74 20 61 6c 6c 6f 63 61     Could not alloca
    17d9:	74 65 20 50 52 49 4e 54 45 52 20 73 74 72 75 63     te PRINTER struc
    17e9:	74 75 72 65 0a 00                                   ture..

000017ef <__c.4924>:
    17ef:	75 6d 6f 75 6e 74 20 61 64 64 72 65 73 73 3a 5b     umount address:[
    17ff:	25 64 5d 20 4e 4f 54 20 66 6f 75 6e 64 0a 00        %d] NOT found..

0000180e <__c.4922>:
    180e:	20 20 2d 20 61 64 64 72 65 73 73 20 69 73 20 74       - address is t
    181e:	68 65 20 64 65 76 69 63 65 20 61 64 64 72 65 73     he device addres
    182e:	73 0a 00                                            s..

00001831 <__c.4920>:
    1831:	20 20 75 6d 6f 75 6e 74 20 61 64 64 72 65 73 73       umount address
    1841:	0a 00                                               ..

00001843 <__c.4918>:
    1843:	55 73 61 67 65 3a 0a 00                             Usage:..

0000184b <__c.4872>:
    184b:	55 73 61 67 65 3a 20 0a 00                          Usage: ..

00001854 <__c.4868>:
    1854:	6d 6f 75 6e 74 0a 20 20 20 20 20 64 69 73 70 6c     mount.     displ
    1864:	61 79 73 20 61 20 6c 69 73 74 20 6f 66 20 6d 6f     ays a list of mo
    1874:	75 6e 74 65 64 20 64 72 69 76 65 73 20 6f 6e 65     unted drives one
    1884:	20 70 65 72 20 6c 69 6e 65 0a 6d 6f 75 6e 74 20      per line.mount 
    1894:	41 4d 49 47 4f 7c 53 53 38 30 20 6d 6f 64 65 6c     AMIGO|SS80 model
    18a4:	20 61 64 64 72 65 73 73 20 66 69 6c 65 0a 20 20      address file.  
    18b4:	20 20 20 45 78 61 6d 70 6c 65 3a 20 6d 6f 75 6e        Example: moun
    18c4:	74 20 39 31 32 31 20 20 36 20 2f 61 6d 69 67 6f     t 9121  6 /amigo
    18d4:	36 2e 6c 69 66 0a 20 20 20 20 20 45 78 61 6d 70     6.lif.     Examp
    18e4:	6c 65 3a 20 6d 6f 75 6e 74 20 39 31 33 34 44 20     le: mount 9134D 
    18f4:	32 20 2f 61 6d 69 67 6f 32 2e 6c 69 66 0a 20 20     2 /amigo2.lif.  
    1904:	20 20 20 4e 6f 74 65 3a 20 64 72 69 76 65 20 6d        Note: drive m
    1914:	6f 64 65 6c 20 6d 75 73 74 20 65 78 69 73 74 20     odel must exist 
    1924:	69 6e 20 68 70 64 69 72 2e 69 6e 69 20 5b 64 72     in hpdir.ini [dr
    1934:	69 76 65 69 6e 66 6f 5d 20 73 65 63 74 69 6f 6e     iveinfo] section
    1944:	0a 6d 6f 75 6e 74 20 50 52 49 4e 54 45 52 20 61     .mount PRINTER a
    1954:	64 64 72 65 73 73 0a 20 20 20 20 20 45 78 61 6d     ddress.     Exam
    1964:	70 6c 65 3a 20 6d 6f 75 6e 74 20 50 52 49 4e 54     ple: mount PRINT
    1974:	45 52 20 35 0a 75 6d 6f 75 6e 74 20 61 64 64 72     ER 5.umount addr
    1984:	65 73 73 0a 20 20 20 20 20 45 78 61 6d 70 6c 65     ess.     Example
    1994:	3a 20 75 6d 6f 75 6e 74 20 36 0a 0a 61 64 64 72     : umount 6..addr
    19a4:	65 73 73 65 73 0a 20 20 20 44 69 73 70 6c 61 79     esses.   Display
    19b4:	20 61 6c 6c 20 64 65 76 69 63 65 20 47 50 49 42      all device GPIB
    19c4:	20 62 75 73 20 61 64 64 72 65 73 73 65 73 20 61      bus addresses a
    19d4:	6e 64 20 50 50 52 20 76 61 6c 75 65 73 0a 63 6f     nd PPR values.co
    19e4:	6e 66 69 67 20 5b 2d 76 5d 0a 20 20 20 44 69 73     nfig [-v].   Dis
    19f4:	70 6c 61 79 20 63 75 72 72 65 6e 74 20 64 72 69     play current dri
    1a04:	76 65 73 20 63 6f 6e 66 69 67 75 72 61 74 69 6f     ves configuratio
    1a14:	6e 0a 20 20 20 2d 76 20 56 65 72 62 6f 73 65 20     n.   -v Verbose 
    1a24:	2d 20 73 68 6f 77 20 66 75 6c 6c 20 64 65 74 61     - show full deta
    1a34:	69 6c 0a 0a 00                                      il...

00001a39 <__c.4866>:
    1a39:	64 72 69 76 65 73 20 20 20 20 68 65 6c 70 0a 00     drives    help..

00001a49 <__c.4858>:
    1a49:	41 4d 49 47 4f 25 64 00                             AMIGO%d.

00001a51 <__c.4856>:
    1a51:	66 6f 72 6d 61 74 69 6e 67 20 25 73 20 25 6c 64     formating %s %ld
    1a61:	20 73 65 63 74 6f 72 73 0a 00                        sectors..

00001a6b <__c.4854>:
    1a6b:	43 61 6e 20 6e 6f 74 20 75 73 65 20 6e 6f 6e 20     Can not use non 
    1a7b:	32 35 36 20 62 79 74 65 20 73 65 63 74 6f 72 73     256 byte sectors
    1a8b:	0a 00                                               ..

00001a8d <__c.4852>:
    1a8d:	53 53 38 30 2d 25 64 00                             SS80-%d.

00001a95 <__c.4850>:
    1a95:	66 6f 72 6d 61 74 69 6e 67 20 25 73 20 25 6c 64     formating %s %ld
    1aa5:	20 73 65 63 74 6f 72 73 0a 00                        sectors..

00001aaf <__c.4848>:
    1aaf:	43 61 6e 20 6e 6f 74 20 75 73 65 20 6e 6f 6e 20     Can not use non 
    1abf:	32 35 36 20 62 79 74 65 20 73 65 63 74 6f 72 73     256 byte sectors
    1acf:	0a 00                                               ..

00001ad1 <__c.4828>:
    1ad1:	44 65 76 69 63 65 20 65 72 72 6f 72 73 20 2d 20     Device errors - 
    1ae1:	72 65 6d 6f 76 69 6e 67 3a 20 00                    removing: .

00001aec <__c.4826>:
    1aec:	57 61 72 6e 69 6e 67 3a 20 25 73 20 42 59 54 45     Warning: %s BYTE
    1afc:	53 5f 50 45 52 5f 53 45 43 54 4f 52 20 21 3d 20     S_PER_SECTOR != 
    1b0c:	32 35 36 2c 20 41 64 6a 75 73 74 69 6e 67 20 74     256, Adjusting t
    1b1c:	6f 20 32 35 36 0a 00                                o 256..

00001b23 <__c.4824>:
    1b23:	57 61 72 6e 69 6e 67 3a 20 25 73 20 42 59 54 45     Warning: %s BYTE
    1b33:	53 5f 50 45 52 5f 42 4c 4f 43 4b 20 21 3d 20 32     S_PER_BLOCK != 2
    1b43:	35 36 2c 20 41 64 6a 75 73 74 69 6e 67 20 74 6f     56, Adjusting to
    1b53:	20 32 35 36 0a 00                                    256..

00001b59 <__c.4818>:
    1b59:	41 64 64 72 65 73 73 20 28 25 64 29 20 6f 75 74     Address (%d) out
    1b69:	20 6f 66 20 72 61 6e 67 65 0a 00                     of range..

00001b74 <__c.4802>:
    1b74:	57 41 52 4e 49 4e 47 3a 20 6d 6f 64 65 6c 20 4e     WARNING: model N
    1b84:	4f 54 20 66 6f 75 6e 64 20 69 6e 20 68 70 64 69     OT found in hpdi
    1b94:	72 2e 69 6e 69 21 0a 00                             r.ini!..

00001b9c <__c.4796>:
    1b9c:	68 70 64 69 72 20 69 6e 76 61 6c 69 64 20 74 79     hpdir invalid ty
    1bac:	70 65 20 2d 20 4e 4f 54 20 41 4d 49 47 4f 20 6f     pe - NOT AMIGO o
    1bbc:	66 20 53 53 38 30 0a 00                             f SS80..

00001bc4 <__c.4760>:
    1bc4:	61 6c 6c 6f 63 5f 64 65 76 69 63 65 3a 20 69 6e     alloc_device: in
    1bd4:	76 61 6c 69 64 20 74 79 70 65 3a 25 64 3a 25 73     valid type:%d:%s
    1be4:	0a 00                                               ..

00001be6 <__c.4752>:
    1be6:	61 6c 6c 6f 63 5f 64 65 76 69 63 65 3a 20 44 65     alloc_device: De
    1bf6:	76 69 63 65 20 74 61 62 6c 65 20 69 73 20 66 75     vice table is fu
    1c06:	6c 6c 0a 00                                         ll..

00001c0a <__c.4731>:
    1c0a:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1c1a:	65 3a 28 25 64 29 20 69 6e 76 61 6c 69 64 20 74     e:(%d) invalid t
    1c2a:	79 70 65 3a 25 64 3a 25 73 0a 00                    ype:%d:%s..

00001c35 <__c.4729>:
    1c35:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1c45:	65 3a 20 69 6e 64 65 78 3a 20 25 64 20 74 79 70     e: index: %d typ
    1c55:	65 3a 25 64 3a 25 73 2c 20 73 74 61 74 65 20 3d     e:%d:%s, state =
    1c65:	3d 20 4e 55 4c 4c 0a 00                             = NULL..

00001c6d <__c.4727>:
    1c6d:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1c7d:	65 3a 20 69 6e 64 65 78 20 25 64 20 75 6e 69 6e     e: index %d unin
    1c8d:	69 74 61 6c 69 7a 65 64 20 74 79 70 65 3a 25 64     italized type:%d
    1c9d:	3a 25 73 0a 00                                      :%s..

00001ca2 <__c.4725>:
    1ca2:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1cb2:	65 3a 20 69 6e 64 65 78 3a 25 64 20 74 79 70 65     e: index:%d type
    1cc2:	3a 25 64 3a 25 73 2c 20 64 65 76 20 3d 3d 20 4e     :%d:%s, dev == N
    1cd2:	55 4c 4c 0a 00                                      ULL..

00001cd7 <__c.4723>:
    1cd7:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1ce7:	65 3a 20 69 6e 64 65 78 3a 25 64 20 61 64 64 72     e: index:%d addr
    1cf7:	65 73 73 3a 20 25 30 32 58 48 20 6f 75 74 20 6f     ess: %02XH out o
    1d07:	66 20 72 61 6e 67 65 0a 00                          f range..

00001d10 <__c.4721>:
    1d10:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1d20:	65 3a 28 25 64 29 20 6f 75 74 20 6f 66 20 72 61     e:(%d) out of ra
    1d30:	6e 67 65 0a 00                                      nge..

00001d35 <__c.4682>:
    1d35:	0a 00                                               ..

00001d37 <__c.4677>:
    1d37:	0a 00                                               ..

00001d39 <__c.4675>:
    1d39:	20 20 20 20 23 20 42 4c 4f 43 4b 53 20 3d 20 25         # BLOCKS = %
    1d49:	6c 64 0a 00                                         ld..

00001d4d <__c.4673>:
    1d4d:	20 20 23 20 48 50 38 35 20 42 41 53 49 43 20 41       # HP85 BASIC A
    1d5d:	44 44 52 45 53 53 20 3a 44 37 25 64 30 0a 00        DDRESS :D7%d0..

00001d6c <__c.4671>:
    1d6c:	41 4d 49 47 4f 20 25 73 0a 00                       AMIGO %s..

00001d76 <__c.4669>:
    1d76:	20 20 20 20 23 20 42 4c 4f 43 4b 53 20 3d 20 25         # BLOCKS = %
    1d86:	6c 64 0a 00                                         ld..

00001d8a <__c.4667>:
    1d8a:	20 20 23 20 48 50 38 35 20 42 41 53 49 43 20 41       # HP85 BASIC A
    1d9a:	44 44 52 45 53 53 20 3a 44 37 25 64 30 0a 00        DDRESS :D7%d0..

00001da9 <__c.4665>:
    1da9:	53 53 38 30 20 25 73 0a 00                          SS80 %s..

00001db2 <__c.4662>:
    1db2:	43 75 72 72 65 6e 74 20 43 6f 6e 66 69 67 75 72     Current Configur
    1dc2:	61 74 69 6f 6e 20 53 65 74 74 69 6e 67 73 0a 00     ation Settings..

00001dd2 <__c.4653>:
    1dd2:	0a 00                                               ..

00001dd4 <__c.4648>:
    1dd4:	0a 00                                               ..

00001dd6 <__c.4646>:
    1dd6:	50 52 49 4e 54 45 52 0a 00                          PRINTER..

00001ddf <__c.4644>:
    1ddf:	41 4d 49 47 4f 20 25 73 0a 00                       AMIGO %s..

00001de9 <__c.4642>:
    1de9:	53 53 38 30 20 25 73 0a 00                          SS80 %s..

00001df2 <__c.4639>:
    1df2:	44 65 76 69 63 65 20 41 64 64 72 65 73 73 65 73     Device Addresses
    1e02:	0a 00                                               ..

00001e04 <__c.4633>:
    1e04:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 2a 2a 2a     Read_Config: ***
    1e14:	2a 2a 2a 20 65 72 72 6f 72 73 28 25 64 29 20 2a     *** errors(%d) *
    1e24:	2a 2a 2a 2a 2a 0a 00                                *****..

00001e2b <__c.4631>:
    1e2b:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 72 65 61     Read_Config: rea
    1e3b:	64 28 25 64 29 20 6c 69 6e 65 73 0a 00              d(%d) lines..

00001e48 <__c.4629>:
    1e48:	4d 69 73 73 69 6e 67 20 45 4e 44 20 73 74 61 74     Missing END stat
    1e58:	65 6d 65 6e 74 20 61 74 20 6c 69 6e 65 3a 25 64     ement at line:%d
    1e68:	0a 00                                               ..

00001e6a <__c.4625>:
    1e6a:	55 6e 65 78 70 65 63 74 65 64 20 53 54 41 54 45     Unexpected STATE
    1e7a:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1e8a:	0a 00                                               ..

00001e8c <__c.4622>:
    1e8c:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1e9c:	20 47 45 4d 45 54 52 59 20 74 6f 6b 65 6e 3a 20      GEMETRY token: 
    1eac:	25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00     %s, at line:%d..

00001ebc <__c.4613>:
    1ebc:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1ecc:	20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25      CONFIG token: %
    1edc:	73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00        s, at line:%d..

00001eeb <__c.4610>:
    1eeb:	55 6e 65 78 70 65 63 74 65 64 20 48 45 41 44 45     Unexpected HEADE
    1efb:	52 20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20     R CONFIG token: 
    1f0b:	25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00     %s, at line:%d..

00001f1b <__c.4601>:
    1f1b:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1f2b:	20 53 54 41 52 54 20 74 6f 6b 65 6e 3a 20 25 73      START token: %s
    1f3b:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001f49 <__c.4593>:
    1f49:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1f59:	56 4f 4c 55 4d 45 20 74 6f 6b 65 6e 3a 20 25 73     VOLUME token: %s
    1f69:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001f77 <__c.4583>:
    1f77:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1f87:	55 4e 49 54 20 74 6f 6b 65 6e 3a 20 25 73 2c 20     UNIT token: %s, 
    1f97:	61 74 20 6c 69 6e 65 3a 25 64 0a 00                 at line:%d..

00001fa3 <__c.4566>:
    1fa3:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1fb3:	43 4f 4e 54 52 4f 4c 4c 45 52 20 74 6f 6b 65 6e     CONTROLLER token
    1fc3:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1fd3:	0a 00                                               ..

00001fd5 <__c.4558>:
    1fd5:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1fe5:	43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25 73     CONFIG token: %s
    1ff5:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00002003 <__c.4555>:
    2003:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    2013:	43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25 73     CONFIG token: %s
    2023:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00002031 <__c.4547>:
    2031:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    2041:	53 54 41 52 54 20 74 6f 6b 65 6e 3a 20 25 73 2c     START token: %s,
    2051:	20 61 74 20 6c 69 6e 65 3a 25 64 0a 00               at line:%d..

0000205e <__c.4537>:
    205e:	55 6e 65 78 70 65 63 74 65 64 20 50 52 49 4e 54     Unexpected PRINT
    206e:	45 52 20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a     ER CONFIG token:
    207e:	20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a      %s, at line:%d.
	...

0000208f <__c.4534>:
    208f:	55 6e 65 78 70 65 63 74 65 64 20 50 52 49 4e 54     Unexpected PRINT
    209f:	45 52 20 74 6f 6b 65 6e 3a 20 25 73 2c 20 61 74     ER token: %s, at
    20af:	20 6c 69 6e 65 3a 25 64 0a 00                        line:%d..

000020b9 <__c.4530>:
    20b9:	55 6e 65 78 70 65 63 74 65 64 20 74 6f 6b 65 6e     Unexpected token
    20c9:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    20d9:	0a 00                                               ..

000020db <__c.4519>:
    20db:	55 6e 65 78 70 65 63 74 65 64 20 74 6f 6b 65 6e     Unexpected token
    20eb:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    20fb:	0a 00                                               ..

000020fd <__c.4516>:
    20fd:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 6f 70 65     Read_Config: ope
    210d:	6e 28 25 73 29 20 66 61 69 6c 65 64 0a 00           n(%s) failed..

0000211b <__c.4514>:
    211b:	52 65 61 64 69 6e 67 3a 20 25 73 0a 00              Reading: %s..

00002128 <__c.4493>:
    2128:	25 73 0a 00                                         %s..

0000212c <__c.4483>:
    212c:	25 2d 32 35 73 20 3d 20 25 73 0a 00                 %-25s = %s..

00002138 <__c.4472>:
    2138:	25 2d 32 35 73 20 3d 20 25 38 6c 78 48 20 28 25     %-25s = %8lxH (%
    2148:	6c 64 29 0a 00                                      ld)..

0000214d <__c.3648>:
    214d:	4d 6f 64 65 6c 3a 20 25 73 20 4e 4f 54 20 66 6f     Model: %s NOT fo
    215d:	75 6e 64 20 69 6e 20 68 70 64 69 72 2e 69 6e 69     und in hpdir.ini
    216d:	0a 00                                               ..

0000216f <__c.3643>:
    216f:	4d 6f 64 65 6c 3a 20 25 73 20 66 6f 75 6e 64 20     Model: %s found 
    217f:	69 6e 20 68 70 64 69 72 2e 69 6e 69 0a 00           in hpdir.ini..

0000218d <__c.3641>:
    218d:	25 73 20 25 73 0a 00                                %s %s..

00002194 <__c.3637>:
    2194:	45 72 72 6f 72 3a 20 68 70 64 69 72 2e 69 6e 69     Error: hpdir.ini
    21a4:	20 6e 6f 74 20 66 6f 75 6e 64 21 0a 00               not found!..

000021b1 <__c.4565>:
    21b1:	5b 53 53 38 30 20 55 6e 6b 6e 6f 77 6e 20 53 43     [SS80 Unknown SC
    21c1:	3a 20 25 30 32 58 48 2c 20 6c 69 73 74 65 6e 3a     : %02XH, listen:
    21d1:	25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58     %02XH, talk:%02X
    21e1:	48 5d 0a 00                                         H]..

000021e5 <__c.4563>:
    21e5:	5b 53 53 38 30 20 53 43 20 55 6e 6b 6e 6f 77 6e     [SS80 SC Unknown
    21f5:	3a 20 25 30 32 58 48 2c 20 6c 69 73 74 65 6e 3a     : %02XH, listen:
    2205:	25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58     %02XH, talk:%02X
    2215:	48 5d 0a 00                                         H]..

00002219 <__c.4561>:
    2219:	5b 53 53 38 30 20 54 72 61 6e 73 70 61 72 65 6e     [SS80 Transparen
    2229:	74 5d 0a 00                                         t]..

0000222d <__c.4559>:
    222d:	5b 41 6d 69 67 6f 20 43 6c 65 61 72 5d 0a 00        [Amigo Clear]..

0000223c <__c.4557>:
    223c:	5b 53 53 38 30 20 52 65 70 6f 72 74 20 53 74 61     [SS80 Report Sta
    224c:	74 65 5d 0a 00                                      te]..

00002251 <__c.4555>:
    2251:	5b 53 53 30 30 20 45 78 65 63 75 74 65 20 53 74     [SS00 Execute St
    2261:	61 74 65 5d 0a 00                                   ate]..

00002267 <__c.4553>:
    2267:	5b 53 53 38 30 20 43 6f 6d 6d 61 6e 64 20 53 74     [SS80 Command St
    2277:	61 74 65 5d 0a 00                                   ate]..

0000227d <__c.4548>:
    227d:	5b 47 50 49 42 20 45 72 72 6f 72 20 52 65 74 75     [GPIB Error Retu
    228d:	72 6e 20 2d 20 57 72 69 74 65 20 45 52 52 4f 52     rn - Write ERROR
    229d:	5d 0a 00                                            ]..

000022a0 <__c.4534>:
    22a0:	5b 41 6d 69 67 6f 20 43 6c 65 61 72 5d 0a 00        [Amigo Clear]..

000022af <__c.4532>:
    22af:	5b 47 50 49 42 20 52 65 61 64 20 45 72 72 6f 72     [GPIB Read Error
    22bf:	5d 0a 00                                            ]..

000022c2 <__c.4525>:
    22c2:	5b 53 53 38 30 20 53 44 43 5d 0a 00                 [SS80 SDC]..

000022ce <__c.4511>:
    22ce:	5b 53 53 38 30 20 71 73 74 61 74 20 25 30 32 58     [SS80 qstat %02X
    22de:	5d 0a 00                                            ]..

000022e1 <__c.4509>:
    22e1:	5b 53 53 38 30 20 71 73 74 61 74 20 73 65 6e 64     [SS80 qstat send
    22f1:	20 46 41 49 4c 45 44 5d 0a 00                        FAILED]..

000022fb <__c.4502>:
    22fb:	5b 53 53 38 30 20 53 65 65 6b 3a 25 30 38 6c 58     [SS80 Seek:%08lX
    230b:	48 5d 0a 00                                         H]..

0000230f <__c.4500>:
    230f:	5b 53 53 38 30 20 53 65 65 6b 20 4f 56 45 52 46     [SS80 Seek OVERF
    231f:	4c 4f 57 20 61 74 20 25 30 38 6c 58 48 5d 0a 00     LOW at %08lXH]..

0000232f <__c.4495>:
    232f:	5b 53 53 38 30 20 54 72 61 6e 73 70 61 72 65 6e     [SS80 Transparen
    233f:	74 20 43 6f 6d 6d 61 6e 64 2c 20 45 72 72 6f 72     t Command, Error
    234f:	20 61 74 20 28 25 64 29 20 6f 66 20 28 25 64 29      at (%d) of (%d)
    235f:	20 4f 50 20 43 6f 64 65 73 5d 0a 00                  OP Codes]..

0000236b <__c.4492>:
    236b:	5b 53 53 38 30 20 49 6e 76 61 6c 69 64 20 4f 50     [SS80 Invalid OP
    237b:	20 43 6f 64 65 20 28 25 30 32 58 48 29 5d 0a 00      Code (%02XH)]..

0000238b <__c.4490>:
    238b:	5b 53 53 38 30 20 43 61 6e 63 65 6c 20 28 25 64     [SS80 Cancel (%d
    239b:	29 5d 0a 00                                         )]..

0000239f <__c.4488>:
    239f:	5b 53 53 38 30 20 43 68 61 6e 6e 65 6c 20 49 6e     [SS80 Channel In
    23af:	64 65 70 65 6e 64 65 6e 74 20 43 6c 65 61 72 20     dependent Clear 
    23bf:	28 25 64 29 5d 0a 00                                (%d)]..

000023c6 <__c.4486>:
    23c6:	5b 53 53 38 30 20 57 72 69 74 65 20 4c 6f 6f 70     [SS80 Write Loop
    23d6:	62 61 63 6b 20 2d 20 54 4f 44 4f 5d 0a 00           back - TODO]..

000023e4 <__c.4484>:
    23e4:	5b 53 53 38 30 20 52 65 61 64 20 4c 6f 6f 70 62     [SS80 Read Loopb
    23f4:	61 63 6b 20 2d 20 54 4f 44 4f 5d 0a 00              ack - TODO]..

00002401 <__c.4481>:
    2401:	5b 53 53 38 30 20 48 50 2d 49 42 20 50 61 72 69     [SS80 HP-IB Pari
    2411:	74 79 20 43 68 65 63 6b 69 6e 67 20 2d 20 54 4f     ty Checking - TO
    2421:	44 4f 5d 0a 00                                      DO]..

00002426 <__c.4478>:
    2426:	5b 47 50 49 42 20 62 75 66 66 65 72 20 4f 56 45     [GPIB buffer OVE
    2436:	52 46 4c 4f 57 21 5d 0a 00                          RFLOW!]..

0000243f <__c.4476>:
    243f:	5b 47 50 49 42 20 52 65 61 64 20 45 52 52 4f 52     [GPIB Read ERROR
    244f:	5d 0a 00                                            ]..

00002452 <__c.4467>:
    2452:	5b 53 53 38 30 20 45 78 65 63 75 74 65 20 43 6f     [SS80 Execute Co
    2462:	6d 6d 61 6e 64 2c 20 45 72 72 6f 72 20 61 74 20     mmand, Error at 
    2472:	28 25 64 29 20 6f 66 20 28 25 64 29 20 4f 50 20     (%d) of (%d) OP 
    2482:	43 6f 64 65 73 5d 0a 00                             Codes]..

0000248a <__c.4464>:
    248a:	5b 53 53 38 30 20 49 6e 76 61 6c 69 64 20 4f 50     [SS80 Invalid OP
    249a:	20 43 6f 64 65 20 28 25 30 32 58 48 29 5d 0a 00      Code (%02XH)]..

000024aa <__c.4462>:
    24aa:	5b 53 53 38 30 20 49 6e 69 74 69 61 74 65 20 44     [SS80 Initiate D
    24ba:	69 61 67 6e 6f 73 74 69 63 20 2d 20 54 4f 44 4f     iagnostic - TODO
    24ca:	5d 0a 00                                            ]..

000024cd <__c.4460>:
    24cd:	5b 53 53 38 30 20 52 65 71 75 65 73 74 20 53 74     [SS80 Request St
    24dd:	61 74 75 73 5d 0a 00                                atus]..

000024e4 <__c.4458>:
    24e4:	5b 53 53 38 30 20 44 6f 6f 72 20 4c 6f 63 6b 20     [SS80 Door Lock 
    24f4:	2d 20 54 4f 44 4f 5d 0a 00                          - TODO]..

000024fd <__c.4456>:
    24fd:	5b 53 53 38 30 20 44 6f 6f 72 20 55 6e 4c 6f 63     [SS80 Door UnLoc
    250d:	6b 20 2d 20 54 4f 44 4f 5d 0a 00                    k - TODO]..

00002518 <__c.4454>:
    2518:	5b 53 53 38 30 20 53 65 74 20 53 74 61 74 75 73     [SS80 Set Status
    2528:	20 4d 61 73 6b 20 2d 20 54 4f 44 4f 5d 0a 00         Mask - TODO]..

00002537 <__c.4452>:
    2537:	5b 53 53 38 30 20 49 6e 69 74 69 61 6c 69 7a 65     [SS80 Initialize
    2547:	20 4d 65 64 69 61 20 54 4f 44 4f 5d 0a 00            Media TODO]..

00002555 <__c.4450>:
    2555:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 5d 0a     [SS80 Describe].
	...

00002566 <__c.4448>:
    2566:	5b 53 53 38 30 20 56 61 6c 69 64 61 74 65 20 4b     [SS80 Validate K
    2576:	65 79 20 2d 20 54 4f 44 4f 5d 0a 00                 ey - TODO]..

00002582 <__c.4446>:
    2582:	5b 53 53 38 30 20 52 65 6c 65 61 73 65 20 44 65     [SS80 Release De
    2592:	6e 69 65 64 20 4e 4f 2d 4f 50 5d 0a 00              nied NO-OP]..

0000259f <__c.4444>:
    259f:	5b 53 53 38 30 20 52 65 6c 65 61 73 65 20 4e 4f     [SS80 Release NO
    25af:	2d 4f 50 5d 0a 00                                   -OP]..

000025b5 <__c.4442>:
    25b5:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    25c5:	20 56 65 72 69 66 79 20 2d 20 54 4f 44 4f 5d 0a      Verify - TODO].
	...

000025d6 <__c.4440>:
    25d6:	5b 53 53 38 30 20 53 65 74 20 52 65 74 75 72 6e     [SS80 Set Return
    25e6:	20 41 64 64 72 65 73 73 69 6e 67 20 2d 20 54 4f      Addressing - TO
    25f6:	44 4f 5d 0a 00                                      DO]..

000025fb <__c.4438>:
    25fb:	5b 53 53 38 30 20 53 65 74 20 52 65 6c 65 61 73     [SS80 Set Releas
    260b:	65 20 4e 4f 2d 4f 50 5d 0a 00                       e NO-OP]..

00002615 <__c.4436>:
    2615:	5b 53 53 38 30 20 53 65 74 20 52 50 53 20 4e 4f     [SS80 Set RPS NO
    2625:	2d 4f 50 5d 0a 00                                   -OP]..

0000262b <__c.4434>:
    262b:	5b 53 53 38 30 20 4e 4f 2d 4f 50 5d 0a 00           [SS80 NO-OP]..

00002639 <__c.4432>:
    2639:	5b 53 53 38 30 20 53 65 74 20 4c 65 6e 67 74 68     [SS80 Set Length
    2649:	3a 28 25 30 38 6c 58 48 29 5d 0a 00                 :(%08lXH)]..

00002655 <__c.4430>:
    2655:	5b 53 53 38 30 20 53 65 74 20 41 64 64 72 65 73     [SS80 Set Addres
    2665:	73 3a 28 25 30 38 6c 58 48 29 5d 0a 00              s:(%08lXH)]..

00002672 <__c.4428>:
    2672:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2682:	20 57 72 69 74 65 5d 0a 00                           Write]..

0000268b <__c.4425>:
    268b:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    269b:	20 52 65 61 64 5d 0a 00                              Read]..

000026a3 <__c.4423>:
    26a3:	5b 53 53 38 30 20 53 65 74 20 56 6f 6c 75 6d 65     [SS80 Set Volume
    26b3:	3a 20 28 25 64 29 5d 0a 00                          : (%d)]..

000026bc <__c.4420>:
    26bc:	5b 53 53 38 30 20 53 65 74 20 55 6e 69 74 3a 28     [SS80 Set Unit:(
    26cc:	25 64 29 5d 0a 00                                   %d)]..

000026d2 <__c.4418>:
    26d2:	5b 47 50 49 42 20 62 75 66 66 65 72 20 4f 56 45     [GPIB buffer OVE
    26e2:	52 46 4c 4f 57 21 5d 0a 00                          RFLOW!]..

000026eb <__c.4416>:
    26eb:	5b 53 53 38 30 20 43 6f 6d 6d 61 6e 64 20 53 74     [SS80 Command St
    26fb:	61 74 65 20 47 50 49 42 20 52 65 61 64 20 45 52     ate GPIB Read ER
    270b:	52 4f 52 5d 0a 00                                   ROR]..

00002711 <__c.4407>:
    2711:	5b 53 53 38 30 20 56 6f 6c 75 6d 65 3a 25 64 20     [SS80 Volume:%d 
    2721:	69 6e 76 61 6c 69 64 5d 0a 00                       invalid]..

0000272b <__c.4402>:
    272b:	5b 53 53 38 30 20 55 4e 49 54 3a 25 64 20 69 6e     [SS80 UNIT:%d in
    273b:	76 61 6c 69 64 5d 0a 00                             valid]..

00002743 <__c.4397>:
    2743:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 56     [SS80 Describe V
    2753:	6f 6c 75 6d 65 20 46 41 49 4c 45 44 5d 0a 00        olume FAILED]..

00002762 <__c.4395>:
    2762:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 55     [SS80 Describe U
    2772:	6e 69 74 20 46 41 49 4c 45 44 5d 0a 00              nit FAILED]..

0000277f <__c.4393>:
    277f:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 43     [SS80 Describe C
    278f:	6f 6e 74 72 6f 6c 6c 65 72 20 46 41 49 4c 45 44     ontroller FAILED
    279f:	5d 0a 00                                            ]..

000027a2 <__c.4391>:
    27a2:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 5d 0a     [SS80 Describe].
	...

000027b3 <__c.4383>:
    27b3:	5b 53 53 38 30 20 53 65 6e 64 20 53 74 61 74 75     [SS80 Send Statu
    27c3:	73 20 46 41 49 4c 45 44 5d 0a 00                    s FAILED]..

000027ce <__c.4381>:
    27ce:	5b 53 53 38 30 20 53 65 6e 64 20 53 74 61 74 75     [SS80 Send Statu
    27de:	73 5d 0a 00                                         s]..

000027e2 <__c.4371>:
    27e2:	20 20 20 20 25 64 3a 25 73 0a 00                        %d:%s..

000027ed <__c.4369>:
    27ed:	25 73 3a 0a 00                                      %s:..

000027f2 <__c.4344>:
    27f2:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2802:	20 57 72 69 74 65 20 57 72 6f 74 65 20 54 6f 74      Write Wrote Tot
    2812:	61 6c 28 25 6c 78 48 29 5d 0a 00                    al(%lxH)]..

0000281d <__c.4342>:
    281d:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    282d:	20 57 72 69 74 65 20 44 49 44 20 4e 4f 54 20 46      Write DID NOT F
    283d:	49 4e 49 53 48 5d 0a 00                             INISH]..

00002845 <__c.4338>:
    2845:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2855:	20 57 72 69 74 65 20 77 72 6f 74 65 28 25 30 32      Write wrote(%02
    2865:	58 48 29 5d 0a 00                                   XH)]..

0000286b <__c.4336>:
    286b:	5b 44 69 73 6b 20 57 72 69 74 65 20 45 72 72 6f     [Disk Write Erro
    287b:	72 5d 0a 00                                         r]..

0000287f <__c.4332>:
    287f:	5b 47 50 49 42 20 52 65 61 64 20 45 72 72 6f 72     [GPIB Read Error
    288f:	5d 0a 00                                            ]..

00002892 <__c.4330>:
    2892:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    28a2:	20 57 72 69 74 65 20 61 74 20 25 30 38 6c 58 48      Write at %08lXH
    28b2:	28 25 6c 58 48 29 5d 0a 00                          (%lXH)]..

000028bb <__c.4318>:
    28bb:	5b 53 53 38 30 20 42 75 66 66 65 72 65 64 20 52     [SS80 Buffered R
    28cb:	65 61 64 20 54 6f 74 61 6c 28 25 6c 58 48 29 20     ead Total(%lXH) 
    28db:	62 79 74 65 73 5d 0a 00                             bytes]..

000028e3 <__c.4316>:
    28e3:	5b 53 53 38 30 20 42 75 66 66 65 72 65 64 20 52     [SS80 Buffered R
    28f3:	65 61 64 20 44 49 44 20 4e 4f 54 20 46 49 4e 49     ead DID NOT FINI
    2903:	53 48 5d 0a 00                                      SH]..

00002908 <__c.4311>:
    2908:	5b 53 53 38 30 20 47 50 49 42 20 57 72 69 74 65     [SS80 GPIB Write
    2918:	20 45 72 72 6f 72 5d 0a 00                           Error]..

00002921 <__c.4309>:
    2921:	5b 53 53 38 30 20 44 69 73 6b 20 52 65 61 64 20     [SS80 Disk Read 
    2931:	45 72 72 6f 72 5d 0a 00                             Error]..

00002939 <__c.4307>:
    2939:	5b 53 53 38 30 20 44 69 73 6b 20 52 65 61 64 20     [SS80 Disk Read 
    2949:	25 30 32 58 48 20 62 79 74 65 73 5d 0a 00           %02XH bytes]..

00002957 <__c.4305>:
    2957:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2967:	20 52 65 61 64 20 61 74 20 25 30 38 6c 58 48 28      Read at %08lXH(
    2977:	25 6c 58 48 29 5d 0a 00                             %lXH)]..

0000297f <__c.4288>:
    297f:	5b 53 53 38 30 20 45 58 45 43 20 73 74 61 74 65     [SS80 EXEC state
    298f:	3a 25 64 20 65 72 72 6f 72 5d 0a 00                 :%d error]..

0000299b <__c.4272>:
    299b:	5b 53 53 38 30 20 25 30 32 58 48 20 49 4e 49 54     [SS80 %02XH INIT
    29ab:	5d 0a 00                                            ]..

000029ae <__c.4388>:
    29ae:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    29be:	65 71 75 65 73 74 20 4c 6f 67 69 63 61 6c 20 41     equest Logical A
    29ce:	64 64 72 65 73 73 5d 0a 00                          ddress]..

000029d7 <__c.4385>:
    29d7:	5b 41 4d 49 47 4f 20 45 78 69 63 75 74 65 20 52     [AMIGO Exicute R
    29e7:	65 71 75 65 73 74 20 53 74 61 74 75 73 20 55 6e     equest Status Un
    29f7:	62 75 66 66 65 72 65 64 5d 0a 00                    buffered]..

00002a02 <__c.4382>:
    2a02:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    2a12:	65 71 75 65 73 74 20 53 74 61 74 75 73 20 42 75     equest Status Bu
    2a22:	66 66 65 72 65 64 5d 0a 00                          ffered]..

00002a2b <__c.4377>:
    2a2b:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 57     [AMIGO Execute W
    2a3b:	72 69 74 65 20 42 75 66 66 65 72 65 64 5d 0a 00     rite Buffered]..

00002a4b <__c.4374>:
    2a4b:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 49     [AMIGO Execute I
    2a5b:	6e 69 74 69 61 6c 69 7a 65 5d 0a 00                 nitialize]..

00002a67 <__c.4371>:
    2a67:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 57     [AMIGO Execute W
    2a77:	72 69 74 65 20 55 6e 62 75 66 66 65 72 65 64 5d     rite Unbuffered]
    2a87:	0a 00                                               ..

00002a89 <__c.4368>:
    2a89:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    2a99:	65 61 64 20 42 75 66 66 65 72 65 64 5d 0a 00        ead Buffered]..

00002aa8 <__c.4365>:
    2aa8:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    2ab8:	65 61 64 20 55 6e 62 75 66 66 65 72 65 64 5d 0a     ead Unbuffered].
	...

00002ac9 <__c.4362>:
    2ac9:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 43     [AMIGO Execute C
    2ad9:	6f 6c 64 20 4c 6f 61 64 20 52 65 61 64 5d 0a 00     old Load Read]..

00002ae9 <__c.4358>:
    2ae9:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 28 25     [AMIGO Execute(%
    2af9:	30 32 58 48 29 3a 20 6c 69 73 74 65 6e 3a 25 30     02XH): listen:%0
    2b09:	32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58 48 5d     2XH, talk:%02XH]
    2b19:	0a 00                                               ..

00002b1b <__c.4353>:
    2b1b:	5b 41 4d 49 47 4f 20 46 6f 72 6d 61 74 5d 0a 00     [AMIGO Format]..

00002b2b <__c.4350>:
    2b2b:	5b 41 4d 49 47 4f 20 52 65 61 64 20 42 75 66 66     [AMIGO Read Buff
    2b3b:	65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00        ered Command]..

00002b4a <__c.4348>:
    2b4a:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 53     [AMIGO Request S
    2b5a:	74 61 74 75 73 20 55 6e 62 75 66 66 65 72 65 64     tatus Unbuffered
    2b6a:	20 43 6f 6d 6d 61 6e 64 5d 0a 00                     Command]..

00002b75 <__c.4346>:
    2b75:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 42 75 66     [AMIGO Write Buf
    2b85:	66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00     fered Command]..

00002b95 <__c.4344>:
    2b95:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 4c     [AMIGO Request L
    2ba5:	6f 67 69 63 61 6c 20 41 64 64 72 65 73 73 20 43     ogical Address C
    2bb5:	6f 6d 6d 61 6e 64 5d 0a 00                          ommand]..

00002bbe <__c.4342>:
    2bbe:	5b 41 4d 49 47 4f 20 49 6e 69 74 69 61 6c 69 7a     [AMIGO Initializ
    2bce:	65 20 43 6f 6d 6d 61 6e 64 5d 0a 00                 e Command]..

00002bda <__c.4340>:
    2bda:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 55 6e 62     [AMIGO Write Unb
    2bea:	75 66 66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d     uffered Command]
    2bfa:	0a 00                                               ..

00002bfc <__c.4338>:
    2bfc:	5b 41 4d 49 47 4f 20 56 65 72 69 66 79 5d 0a 00     [AMIGO Verify]..

00002c0c <__c.4335>:
    2c0c:	5b 41 4d 49 47 4f 20 52 65 61 64 20 55 6e 62 75     [AMIGO Read Unbu
    2c1c:	66 66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a     ffered Command].
	...

00002c2d <__c.4333>:
    2c2d:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 53     [AMIGO Request S
    2c3d:	74 61 74 75 73 20 42 75 66 66 65 72 65 64 20 43     tatus Buffered C
    2c4d:	6f 6d 6d 61 6e 64 5d 0a 00                          ommand]..

00002c56 <__c.4331>:
    2c56:	5b 41 4d 49 47 4f 20 53 65 65 6b 20 6c 65 6e 3d     [AMIGO Seek len=
    2c66:	36 5d 0a 00                                         6]..

00002c6a <__c.4328>:
    2c6a:	5b 41 4d 49 47 4f 20 53 65 65 6b 20 6c 65 6e 3d     [AMIGO Seek len=
    2c7a:	35 5d 0a 00                                         5]..

00002c7e <__c.4325>:
    2c7e:	5b 41 4d 49 47 4f 20 43 6f 6c 64 20 4c 6f 61 64     [AMIGO Cold Load
    2c8e:	20 52 65 61 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00      Read Command]..

00002c9e <__c.4322>:
    2c9e:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 28 25     [AMIGO Command(%
    2cae:	30 32 58 48 29 3a 20 47 50 49 42 20 72 65 61 64     02XH): GPIB read
    2cbe:	20 62 79 74 65 73 3a 25 30 32 58 48 5d 0a 00         bytes:%02XH]..

00002ccd <__c.4320>:
    2ccd:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO Command:G
    2cdd:	50 49 42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a     PIB read error].
	...

00002cee <__c.4318>:
    2cee:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO Command:G
    2cfe:	50 49 42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a     PIB read error].
	...

00002d0f <__c.4316>:
    2d0f:	5b 41 4d 49 47 4f 5f 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO_Command:G
    2d1f:	50 49 42 20 77 72 69 74 65 20 65 72 72 6f 72 5d     PIB write error]
    2d2f:	0a 00                                               ..

00002d31 <__c.4314>:
    2d31:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 28 25     [AMIGO Command(%
    2d41:	30 32 58 48 29 3a 20 6c 69 73 74 65 6e 3a 25 30     02XH): listen:%0
    2d51:	32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58 48 5d     2XH, talk:%02XH]
    2d61:	0a 00                                               ..

00002d63 <__c.4302>:
    2d63:	5b 45 20 20 20 41 6d 69 67 6f 20 45 52 52 4f 52     [E   Amigo ERROR
    2d73:	20 73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58      secondary: %02X
    2d83:	48 2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20     H, state:%02XH, 
    2d93:	6c 69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c     listening:%02XH,
    2da3:	20 74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a      talking:%02XH].
	...

00002db4 <__c.4300>:
    2db4:	5b 55 4e 54 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [UNT Amigo TODO 
    2dc4:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2dd4:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2de4:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2df4:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002e04 <__c.4298>:
    2e04:	5b 54 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [T   Amigo TODO 
    2e14:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2e24:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2e34:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2e44:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002e54 <__c.4296>:
    2e54:	5b 4c 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [L   Amigo TODO 
    2e64:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2e74:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2e84:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2e94:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002ea4 <__c.4291>:
    2ea4:	5b 55 20 41 6d 69 67 6f 20 54 4f 44 4f 20 73 65     [U Amigo TODO se
    2eb4:	63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48 2c 20     condary: %02XH, 
    2ec4:	73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f 70 63     state:%02XH, opc
    2ed4:	6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e 3a 25     ode:%02XH, len:%
    2ee4:	33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a 25 30     3d, listening:%0
    2ef4:	32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25 30 32     2XH, talking:%02
    2f04:	58 48 5d 0a 00                                      XH]..

00002f09 <__c.4289>:
    2f09:	5b 55 4e 54 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [UNT Amigo TODO 
    2f19:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2f29:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2f39:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2f49:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2f59:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2f69:	30 32 58 48 5d 0a 00                                02XH]..

00002f70 <__c.4287>:
    2f70:	5b 54 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [T   Amigo TODO 
    2f80:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2f90:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2fa0:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2fb0:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2fc0:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2fd0:	30 32 58 48 5d 0a 00                                02XH]..

00002fd7 <__c.4285>:
    2fd7:	5b 4c 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [L   Amigo TODO 
    2fe7:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2ff7:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    3007:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    3017:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    3027:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    3037:	30 32 58 48 5d 0a 00                                02XH]..

0000303e <__c.4278>:
    303e:	5b 41 4d 49 47 4f 20 43 6c 65 61 72 5d 0a 00        [AMIGO Clear]..

0000304d <__c.4265>:
    304d:	5b 44 53 4a 20 25 30 32 58 48 5d 0a 00              [DSJ %02XH]..

0000305a <__c.4263>:
    305a:	5b 41 49 4d 47 4f 3a 20 44 53 4a 20 73 65 6e 64     [AIMGO: DSJ send
    306a:	20 66 61 69 6c 65 64 5d 0a 00                        failed]..

00003074 <__c.4256>:
    3074:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 64 69 73     [AMIGO Write dis
    3084:	6b 20 77 72 69 74 65 20 65 72 72 6f 72 5d 0a 00     k write error]..

00003094 <__c.4254>:
    3094:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 47 50 49     [AMIGO Write GPI
    30a4:	42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a 00        B read error]..

000030b3 <__c.4252>:
    30b3:	41 4d 49 47 4f 73 2d 3e 73 74 61 74 65 3a 25 64     AMIGOs->state:%d
    30c3:	0a 00                                               ..

000030c5 <__c.4245>:
    30c5:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    30d5:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

000030df <__c.4239>:
    30df:	41 4d 49 47 4f 73 2d 3e 73 74 61 74 65 3a 25 64     AMIGOs->state:%d
    30ef:	0a 00                                               ..

000030f1 <__c.4233>:
    30f1:	5b 41 4d 49 47 4f 20 46 6f 72 6d 61 74 20 44 6f     [AMIGO Format Do
    3101:	6e 65 5d 0a 00                                      ne]..

00003106 <__c.4229>:
    3106:	5b 41 4d 49 47 4f 20 66 6f 72 6d 61 74 5d 0a 00     [AMIGO format]..

00003116 <__c.4188>:
    3116:	5b 41 4d 49 47 4f 20 25 73 2c 20 50 3a 25 30 38     [AMIGO %s, P:%08
    3126:	6c 78 48 2c 20 55 3a 25 64 20 43 3a 25 64 20 48     lxH, U:%d C:%d H
    3136:	3a 25 64 20 53 3a 25 64 5d 0a 00                    :%d S:%d]..

00003141 <__c.4218>:
    3141:	5b 41 4d 49 47 4f 20 76 65 72 69 66 79 20 50 3a     [AMIGO verify P:
    3151:	25 30 38 6c 58 48 2c 20 73 65 63 74 6f 72 73 3a     %08lXH, sectors:
    3161:	25 30 34 58 48 5d 0a 00                             %04XH]..

00003169 <__c.4195>:
    3169:	5b 41 4d 49 47 4f 20 25 73 20 70 6f 73 20 4f 56     [AMIGO %s pos OV
    3179:	45 52 46 4c 4f 57 5d 0a 00                          ERFLOW]..

00003182 <__c.4181>:
    3182:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    3192:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

0000319c <__c.4179>:
    319c:	5b 41 4d 49 47 4f 20 73 65 6e 64 20 73 74 61 74     [AMIGO send stat
    31ac:	75 73 5d 0a 00                                      us]..

000031b1 <__c.4173>:
    31b1:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    31c1:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

000031cb <__c.4171>:
    31cb:	5b 41 4d 49 47 4f 20 73 65 6e 64 20 6c 6f 67 69     [AMIGO send logi
    31db:	63 61 6c 20 61 64 64 72 65 73 73 5d 0a 00           cal address]..

000031e9 <__c.4165>:
    31e9:	5b 41 4d 49 47 4f 20 72 65 71 75 65 73 74 20 73     [AMIGO request s
    31f9:	74 61 74 75 73 5d 0a 00                             tatus]..

00003201 <__c.4150>:
    3201:	5b 53 43 20 50 52 49 4e 54 45 52 20 54 61 6c 6b     [SC PRINTER Talk
    3211:	3a 20 25 30 32 58 48 5d 0a 00                       : %02XH]..

0000321b <__c.4148>:
    321b:	5b 53 43 20 50 52 49 4e 54 45 52 20 4c 69 73 74     [SC PRINTER List
    322b:	65 6e 3a 20 25 30 32 58 48 5d 0a 00                 en: %02XH]..

00003237 <__c.4143>:
    3237:	25 30 38 6c 64 0d 00                                %08ld..

0000323e <__c.4137>:
    323e:	77 72 69 74 65 20 66 61 69 6c 65 64 3a 20 77 61     write failed: wa
    324e:	6e 74 65 64 20 25 64 2c 20 67 6f 74 3a 25 64 0a     nted %d, got:%d.
	...

0000325f <__c.4131>:
    325f:	0a 44 4f 4e 45 3a 20 25 30 38 6c 64 0a 00           .DONE: %08ld..

0000326d <__c.4129>:
    326d:	45 52 52 4f 52 20 64 75 72 72 69 6e 67 20 77 72     ERROR durring wr
    327d:	69 74 65 0a 00                                      ite..

00003282 <__c.4123>:
    3282:	65 78 69 74 69 6e 67 2e 2e 2e 0a 00                 exiting.....

0000328e <__c.4121>:
    328e:	43 61 70 74 75 72 69 6e 67 20 70 6c 6f 74 20 74     Capturing plot t
    329e:	6f 3a 25 73 0a 00                                   o:%s..

000032a4 <__c.4119>:
    32a4:	2f 70 6c 6f 74 2d 25 30 32 64 25 73 25 30 34 64     /plot-%02d%s%04d
    32b4:	2d 25 30 32 64 25 30 32 64 25 30 32 64 2e 70 6c     -%02d%02d%02d.pl
    32c4:	74 00                                               t.

000032c6 <__c.4555>:
    32c6:	09 46 6f 72 6d 61 74 74 69 6e 67 3a 20 77 72 6f     .Formatting: wro
    32d6:	74 65 20 25 6c 64 20 73 65 63 74 6f 72 73 0a 00     te %ld sectors..

000032e6 <__c.4553>:
    32e6:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    32f6:	3a 20 73 65 63 74 6f 72 73 20 69 73 20 30 0a 00     : sectors is 0..

00003306 <__c.4551>:
    3306:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    3316:	3a 20 64 69 72 73 65 63 74 6f 72 73 20 69 73 20     : dirsectors is 
    3326:	30 0a 00                                            0..

00003329 <__c.4549>:
    3329:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    3339:	3a 20 6c 69 66 6c 61 62 65 6c 20 69 73 20 65 6d     : liflabel is em
    3349:	70 74 79 0a 00                                      pty..

0000334e <__c.4547>:
    334e:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    335e:	3a 20 6c 69 66 69 6d 61 67 65 6e 61 6d 65 20 69     : lifimagename i
    336e:	73 20 65 6d 70 74 79 0a 00                          s empty..

00003377 <__c.4534>:
    3377:	72 65 6e 61 6d 65 64 3a 20 25 31 30 73 20 74 6f     renamed: %10s to
    3387:	20 25 31 30 73 0a 00                                 %10s..

0000338e <__c.4532>:
    338e:	6c 69 66 5f 72 65 6e 61 6d 65 3a 5b 25 73 5d 20     lif_rename:[%s] 
    339e:	6c 69 66 20 6e 61 6d 65 3a 5b 25 73 5d 20 6e 6f     lif name:[%s] no
    33ae:	74 20 66 6f 75 6e 64 0a 00                          t found..

000033b7 <__c.4530>:
    33b7:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    33c7:	20 6e 65 77 20 6c 69 66 6e 61 6d 65 20 63 6f 6e      new lifname con
    33d7:	74 61 69 6e 73 20 62 61 64 20 63 68 61 72 61 63     tains bad charac
    33e7:	74 65 72 73 0a 00                                   ters..

000033ed <__c.4528>:
    33ed:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    33fd:	20 6e 65 77 20 6c 69 66 6e 61 6d 65 20 69 73 20      new lifname is 
    340d:	65 6d 70 74 79 0a 00                                empty..

00003414 <__c.4526>:
    3414:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    3424:	20 6f 6c 64 20 6c 69 66 6e 61 6d 65 20 69 73 20      old lifname is 
    3434:	65 6d 70 74 79 0a 00                                empty..

0000343b <__c.4524>:
    343b:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    344b:	20 6c 69 66 69 6d 61 67 65 6e 61 6d 65 20 69 73      lifimagename is
    345b:	20 65 6d 70 74 79 0a 00                              empty..

00003463 <__c.4515>:
    3463:	44 65 6c 65 74 65 64 3a 20 25 31 30 73 0a 00        Deleted: %10s..

00003472 <__c.4513>:
    3472:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 20 6c     LIF image:[%s] l
    3482:	69 66 20 6e 61 6d 65 3a 5b 25 73 5d 20 6e 6f 74     if name:[%s] not
    3492:	20 66 6f 75 6e 64 0a 00                              found..

0000349a <__c.4511>:
    349a:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    34aa:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 0a 00        LIF name:[%s]..

000034b9 <__c.4509>:
    34b9:	6c 69 66 5f 64 65 6c 5f 66 69 6c 65 3a 20 6c 69     lif_del_file: li
    34c9:	66 6e 61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00     fname is empty..

000034d9 <__c.4507>:
    34d9:	6c 69 66 5f 64 65 6c 5f 66 69 6c 65 3a 20 6c 69     lif_del_file: li
    34e9:	66 69 6d 61 67 65 6e 61 6d 65 20 69 73 20 65 6d     fimagename is em
    34f9:	70 74 79 0a 00                                      pty..

000034fe <__c.4499>:
    34fe:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

0000350c <__c.4494>:
    350c:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

0000351a <__c.4492>:
    351a:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    352a:	6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65 20     not enough free 
    353a:	73 70 61 63 65 20 66 6f 72 3a 5b 25 73 5d 0a 00     space for:[%s]..

0000354a <__c.4490>:
    354a:	46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 3a 25     File not found:%
    355a:	73 0a 00                                            s..

0000355d <__c.4488>:
    355d:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    356d:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 2c 20 75     LIF name:[%s], u
    357d:	73 65 72 20 66 69 6c 65 3a 5b 25 73 5d 0a 00        ser file:[%s]..

0000358c <__c.4486>:
    358c:	6c 69 66 5f 61 64 64 3a 20 75 73 65 72 66 69 6c     lif_add: userfil
    359c:	65 20 69 73 20 65 6d 70 74 79 0a 00                 e is empty..

000035a8 <__c.4484>:
    35a8:	6c 69 66 5f 61 64 64 3a 20 6c 69 66 6e 61 6d 65     lif_add: lifname
    35b8:	20 69 73 20 65 6d 70 74 79 0a 00                     is empty..

000035c3 <__c.4482>:
    35c3:	6c 69 66 5f 61 64 64 3a 20 6c 69 66 69 6d 61 67     lif_add: lifimag
    35d3:	65 6e 61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00     ename is empty..

000035e3 <__c.4465>:
    35e3:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

000035f1 <__c.4460>:
    35f1:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

000035ff <__c.4458>:
    35ff:	46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 3a 25     File not found:%
    360f:	73 0a 00                                            s..

00003612 <__c.4456>:
    3612:	4c 49 46 20 69 6d 61 67 65 20 6e 6f 74 20 66 6f     LIF image not fo
    3622:	75 6e 64 3a 25 73 0a 00                             und:%s..

0000362a <__c.4439>:
    362a:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

00003638 <__c.4436>:
    3638:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    3648:	5f 61 73 5f 61 73 63 69 69 3a 20 77 72 69 74 65     _as_ascii: write
    3658:	20 65 72 72 6f 72 0a 00                              error..

00003660 <__c.4428>:
    3660:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

0000366e <__c.4426>:
    366e:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    367e:	5f 61 73 5f 61 73 63 69 69 3a 20 77 72 69 74 65     _as_ascii: write
    368e:	20 65 72 72 6f 72 0a 00                              error..

00003696 <__c.4423>:
    3696:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    36a6:	5f 61 73 5f 61 73 63 69 69 3a 20 75 6e 65 78 70     _as_ascii: unexp
    36b6:	65 63 74 65 64 20 63 6f 6e 74 72 6f 6c 20 62 79     ected control by
    36c6:	74 65 3a 5b 25 30 32 58 48 5d 20 40 20 6f 66 66     te:[%02XH] @ off
    36d6:	73 65 74 3a 20 25 38 6c 78 2c 20 69 6e 64 3a 25     set: %8lx, ind:%
    36e6:	30 32 58 48 0a 00                                   02XH..

000036ec <__c.4421>:
    36ec:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    36fc:	5f 61 73 5f 61 73 63 69 69 3a 20 73 74 72 69 6e     _as_ascii: strin
    370c:	67 20 74 6f 6f 20 62 69 67 20 73 69 7a 65 20 3d     g too big size =
    371c:	20 25 64 0a 00                                       %d..

00003721 <__c.4417>:
    3721:	45 78 74 72 61 63 74 69 6e 67 3a 20 25 73 0a 00     Extracting: %s..

00003731 <__c.4415>:
    3731:	46 69 6c 65 20 25 73 20 68 61 73 20 77 72 6f 6e     File %s has wron
    3741:	67 20 74 79 70 65 3a 5b 25 30 34 58 48 5d 20 65     g type:[%04XH] e
    3751:	78 70 65 63 74 65 64 20 30 78 45 30 31 30 2e 2e     xpected 0xE010..
    3761:	30 78 45 30 31 33 0a 00                             0xE013..

00003769 <__c.4413>:
    3769:	4c 49 46 20 46 69 6c 65 20 6e 6f 74 20 66 6f 75     LIF File not fou
    3779:	6e 64 3a 25 73 0a 00                                nd:%s..

00003780 <__c.4411>:
    3780:	4c 49 46 20 69 6d 61 67 65 20 6e 6f 74 20 66 6f     LIF image not fo
    3790:	75 6e 64 3a 25 73 0a 00                             und:%s..

00003798 <__c.4387>:
    3798:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

000037a6 <__c.4385>:
    37a6:	46 69 6c 65 20 53 65 63 74 6f 72 73 3a 20 20 20     File Sectors:   
    37b6:	20 20 25 34 6c 78 48 0a 00                            %4lxH..

000037bf <__c.4383>:
    37bf:	46 69 72 73 74 20 53 65 63 74 6f 72 3a 20 20 20     First Sector:   
    37cf:	20 20 25 34 6c 78 48 0a 00                            %4lxH..

000037d8 <__c.4381>:
    37d8:	49 6e 64 65 78 3a 20 20 20 20 20 20 20 20 20 20     Index:          
    37e8:	20 20 25 34 64 0a 00                                  %4d..

000037ef <__c.4379>:
    37ef:	4e 61 6d 65 3a 20 20 20 20 20 20 20 20 20 20 20     Name:           
    37ff:	20 20 20 25 73 0a 00                                   %s..

00003806 <__c.4377>:
    3806:	4e 65 77 20 44 69 72 65 63 74 6f 72 79 20 49 6e     New Directory In
    3816:	66 6f 72 6d 61 74 69 6f 6e 20 41 46 54 45 52 20     formation AFTER 
    3826:	77 72 69 74 65 0a 00                                write..

0000382d <__c.4375>:
    382d:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    383d:	6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65 20     not enough free 
    384d:	73 70 61 63 65 20 66 6f 72 3a 5b 25 73 5d 0a 00     space for:[%s]..

0000385d <__c.4373>:
    385d:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    386d:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 2c 20 75     LIF name:[%s], u
    387d:	73 65 72 20 66 69 6c 65 3a 5b 25 73 5d 0a 00        ser file:[%s]..

0000388c <__c.4371>:
    388c:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    389c:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 75 73 65 72     le_as_e010: user
    38ac:	66 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 0a 00     file not found..

000038bc <__c.4369>:
    38bc:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    38cc:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 75 73 65 72     le_as_e010: user
    38dc:	66 69 6c 65 20 69 73 20 65 6d 70 74 79 0a 00        file is empty..

000038eb <__c.4367>:
    38eb:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    38fb:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 6c 69 66 6e     le_as_e010: lifn
    390b:	61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00           ame is empty..

00003919 <__c.4365>:
    3919:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    3929:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 6c 69 66 69     le_as_e010: lifi
    3939:	6d 61 67 65 6e 61 6d 65 20 69 73 20 65 6d 70 74     magename is empt
    3949:	79 0a 00                                            y..

0000394c <__c.4351>:
    394c:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

0000395a <__c.4349>:
    395a:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

00003968 <__c.4344>:
    3968:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

00003976 <__c.4327>:
    3976:	45 78 70 65 63 74 65 64 20 73 65 63 74 6f 72 20     Expected sector 
    3986:	62 6f 75 6e 64 72 79 2c 20 6f 66 66 73 65 74 3a     boundry, offset:
    3996:	25 64 0a 00                                         %d..

0000399a <__c.4310>:
    399a:	6c 69 66 5f 65 30 31 30 5f 64 61 70 5f 73 65 63     lif_e010_dap_sec
    39aa:	74 6f 72 3a 20 65 78 70 65 63 74 65 64 20 73 65     tor: expected se
    39ba:	63 74 6f 72 20 62 6f 75 6e 64 72 79 3a 20 6f 66     ctor boundry: of
    39ca:	66 73 65 74 3a 25 64 0a 00                          fset:%d..

000039d3 <__c.4296>:
    39d3:	6c 69 66 5f 66 69 6e 64 5f 66 69 6c 65 3a 5b 25     lif_find_file:[%
    39e3:	73 5d 20 6c 69 66 6c 61 62 65 6c 20 74 6f 6f 20     s] liflabel too 
    39f3:	62 69 67 0a 00                                      big..

000039f8 <__c.4294>:
    39f8:	6c 69 66 5f 66 69 6e 64 5f 66 69 6c 65 3a 5b 25     lif_find_file:[%
    3a08:	73 5d 20 69 6e 76 61 6c 69 64 20 63 68 61 72 61     s] invalid chara
    3a18:	63 74 65 72 73 0a 00                                cters..

00003a1f <__c.4287>:
    3a1f:	25 38 6c 64 20 46 72 65 65 20 73 65 63 74 6f 72     %8ld Free sector
    3a2f:	73 0a 00                                            s..

00003a32 <__c.4285>:
    3a32:	25 38 6c 64 20 55 73 65 64 20 73 65 63 74 6f 72     %8ld Used sector
    3a42:	73 0a 00                                            s..

00003a45 <__c.4283>:
    3a45:	25 38 6c 64 20 44 69 72 20 20 73 65 63 74 6f 72     %8ld Dir  sector
    3a55:	73 0a 00                                            s..

00003a58 <__c.4281>:
    3a58:	25 38 6c 64 20 44 69 72 20 20 73 74 61 72 74 0a     %8ld Dir  start.
	...

00003a69 <__c.4279>:
    3a69:	25 38 6c 64 20 50 75 72 67 65 64 0a 00              %8ld Purged..

00003a76 <__c.4277>:
    3a76:	25 38 6c 64 20 46 69 6c 65 73 0a 00                 %8ld Files..

00003a82 <__c.4275>:
    3a82:	0a 00                                               ..

00003a84 <__c.4272>:
    3a84:	25 2d 31 30 73 20 20 25 30 34 58 68 20 20 20 20     %-10s  %04Xh    
    3a94:	20 20 25 38 6c 58 68 20 20 20 25 39 6c 64 25 63       %8lXh   %9ld%c
    3aa4:	20 20 20 20 20 20 25 34 64 20 20 20 25 73 0a 00           %4d   %s..

00003ab4 <__c.4270>:
    3ab4:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3ac4:	73 5d 20 77 61 72 6e 69 6e 67 20 46 69 6c 65 42     s] warning FileB
    3ad4:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3ae4:	6f 72 73 3a 25 6c 64 20 21 3d 20 46 69 6c 65 53     ors:%ld != FileS
    3af4:	65 63 74 6f 72 73 3a 25 6c 64 0a 00                 ectors:%ld..

00003b00 <__c.4267>:
    3b00:	4e 41 4d 45 20 20 20 20 20 20 20 20 20 54 59 50     NAME         TYP
    3b10:	45 20 20 20 53 54 41 52 54 20 53 45 43 54 4f 52     E   START SECTOR
    3b20:	20 20 20 20 20 20 20 20 53 49 5a 45 20 20 20 20             SIZE    
    3b30:	52 45 43 53 49 5a 45 20 20 20 44 41 54 45 0a 00     RECSIZE   DATE..

00003b40 <__c.4265>:
    3b40:	56 6f 6c 75 6d 65 3a 5b 25 73 5d 20 44 61 74 65     Volume:[%s] Date
    3b50:	3a 5b 25 73 5d 0a 00                                :[%s]..

00003b57 <__c.4255>:
    3b57:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3b67:	5b 25 73 5d 20 65 72 72 6f 72 20 64 69 72 65 63     [%s] error direc
    3b77:	74 6f 72 79 20 63 68 65 63 6b 20 66 61 69 6c 65     tory check faile
    3b87:	64 0a 00                                            d..

00003b8a <__c.4253>:
    3b8a:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3b9a:	5b 25 73 5d 20 65 72 72 6f 72 20 76 6f 6c 75 6d     [%s] error volum
    3baa:	65 20 76 61 6c 69 64 61 74 65 20 66 61 69 6c 65     e validate faile
    3bba:	64 0a 00                                            d..

00003bbd <__c.4251>:
    3bbd:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3bcd:	5b 25 73 5d 20 65 72 72 6f 72 20 72 65 61 64 20     [%s] error read 
    3bdd:	76 6f 6c 75 6d 65 20 68 65 61 64 65 72 20 66 61     volume header fa
    3bed:	69 6c 65 64 0a 00                                   iled..

00003bf3 <__c.4249>:
    3bf3:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3c03:	5b 25 73 5d 20 65 72 72 6f 72 20 76 6f 6c 75 6d     [%s] error volum
    3c13:	65 20 68 65 61 64 65 72 20 61 72 65 61 20 74 6f     e header area to
    3c23:	6f 20 73 6d 61 6c 6c 3a 5b 25 6c 64 5d 0a 00        o small:[%ld]..

00003c32 <__c.4236>:
    3c32:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 69 6e 64 65     lif_newdir: inde
    3c42:	78 3a 5b 25 64 5d 20 61 64 64 69 6e 67 20 61 74     x:[%d] adding at
    3c52:	3a 5b 25 6c 64 5d 74 6f 20 70 75 72 67 65 64 20     :[%ld]to purged 
    3c62:	73 70 61 63 65 3a 5b 25 6c 64 5d 20 73 65 63 74     space:[%ld] sect
    3c72:	6f 72 73 2c 20 66 72 65 65 3a 5b 25 6c 64 5d 0a     ors, free:[%ld].
	...

00003c83 <__c.4233>:
    3c83:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 6e 6f 74 20     lif_newdir: not 
    3c93:	65 6e 6f 75 67 68 20 66 72 65 65 20 73 70 61 63     enough free spac
    3ca3:	65 3a 5b 25 6c 64 5d 0a 00                          e:[%ld]..

00003cac <__c.4231>:
    3cac:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 6e 6f 74 20     lif_newdir: not 
    3cbc:	65 6e 6f 75 67 68 20 66 72 65 65 20 73 70 61 63     enough free spac
    3ccc:	65 3a 5b 25 6c 64 5d 20 66 6f 72 20 73 69 7a 65     e:[%ld] for size
    3cdc:	3a 5b 25 6c 64 5d 0a 00                             :[%ld]..

00003ce4 <__c.4219>:
    3ce4:	6c 69 66 5f 75 70 64 61 74 65 5f 66 72 65 65 3a     lif_update_free:
    3cf4:	5b 25 73 5d 20 65 72 72 6f 72 20 70 72 65 76 69     [%s] error previ
    3d04:	6f 75 73 20 72 65 63 6f 72 64 20 66 69 6c 65 20     ous record file 
    3d14:	61 72 65 61 20 6f 76 65 72 6c 61 70 73 20 74 68     area overlaps th
    3d24:	69 73 20 6f 6e 65 3a 5b 25 73 5d 0a 00              is one:[%s]..

00003d31 <__c.4194>:
    3d31:	6c 69 66 5f 63 68 65 63 6b 5f 64 69 72 3a 20 65     lif_check_dir: e
    3d41:	72 72 6f 72 2c 20 69 6e 64 65 78 3a 25 64 0a 00     rror, index:%d..

00003d51 <__c.4185>:
    3d51:	6c 69 66 5f 63 68 65 63 6b 64 69 72 69 6e 64 65     lif_checkdirinde
    3d61:	78 3a 5b 25 73 5d 20 64 69 72 65 63 6f 72 79 20     x:[%s] direcory 
    3d71:	69 6e 64 65 78 3a 5b 25 64 5d 20 6f 75 74 20 6f     index:[%d] out o
    3d81:	66 20 62 6f 75 6e 64 73 0a 00                       f bounds..

00003d8b <__c.4166>:
    3d8b:	09 57 72 6f 74 65 3a 20 25 6c 64 0a 00              .Wrote: %ld..

00003d98 <__c.4161>:
    3d98:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

00003da5 <__c.4156>:
    3da5:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

00003db2 <__c.4148>:
    3db2:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

00003dbf <__c.4146>:
    3dbf:	43 72 65 61 74 69 6e 67 3a 25 73 2c 20 4c 61 62     Creating:%s, Lab
    3dcf:	65 6c 3a 5b 25 73 5d 2c 20 44 69 72 65 63 74 6f     el:[%s], Directo
    3ddf:	72 79 20 53 74 61 72 74 20 25 6c 64 2c 20 44 69     ry Start %ld, Di
    3def:	72 65 63 74 6f 72 79 20 53 69 7a 65 3a 20 25 6c     rectory Size: %l
    3dff:	64 2c 20 46 69 6c 65 20 53 65 63 74 6f 72 73 3a     d, File Sectors:
    3e0f:	25 6c 64 0a 00                                      %ld..

00003e14 <__c.4130>:
    3e14:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3e24:	73 5d 20 69 6e 76 61 6c 69 64 20 73 65 63 74 6f     s] invalid secto
    3e34:	72 20 73 69 7a 65 3a 25 6c 64 0a 00                 r size:%ld..

00003e40 <__c.4128>:
    3e40:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3e50:	73 5d 20 69 6e 76 61 6c 69 64 20 46 69 6c 65 42     s] invalid FileB
    3e60:	79 74 65 73 20 3d 3d 20 30 0a 00                    ytes == 0..

00003e6b <__c.4126>:
    3e6b:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3e7b:	73 5d 20 77 61 72 6e 69 6e 67 20 46 69 6c 65 42     s] warning FileB
    3e8b:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3e9b:	6f 72 73 3a 25 6c 64 20 3c 20 46 69 6c 65 53 65     ors:%ld < FileSe
    3eab:	63 74 6f 72 73 3a 25 6c 64 0a 00                    ctors:%ld..

00003eb6 <__c.4124>:
    3eb6:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3ec6:	73 5d 20 69 6e 76 61 6c 69 64 20 46 69 6c 65 42     s] invalid FileB
    3ed6:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3ee6:	6f 72 73 3a 25 6c 64 20 3e 20 46 69 6c 65 53 65     ors:%ld > FileSe
    3ef6:	63 74 6f 72 73 3a 25 6c 64 0a 00                    ctors:%ld..

00003f01 <__c.4122>:
    3f01:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3f11:	73 5d 20 69 6e 76 61 6c 69 64 20 56 6f 6c 75 6d     s] invalid Volum
    3f21:	65 20 4e 75 6d 62 65 72 3a 25 58 68 0a 00           e Number:%Xh..

00003f2f <__c.4120>:
    3f2f:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3f3f:	73 5d 20 69 6e 76 61 6c 69 64 20 65 6e 64 20 73     s] invalid end s
    3f4f:	65 63 74 6f 72 3a 25 6c 58 68 20 3e 20 74 6f 74     ector:%lXh > tot
    3f5f:	61 6c 20 73 65 63 74 6f 72 73 3a 25 6c 58 68 0a     al sectors:%lXh.
	...

00003f70 <__c.4118>:
    3f70:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3f80:	73 5d 20 69 6e 76 61 6c 69 64 20 73 74 61 72 74     s] invalid start
    3f90:	20 73 65 63 74 6f 72 3a 25 6c 58 68 20 3c 20 66      sector:%lXh < f
    3fa0:	69 65 20 61 72 65 61 20 73 74 61 72 74 3a 25 6c     ie area start:%l
    3fb0:	58 68 0a 00                                         Xh..

00003fb4 <__c.4116>:
    3fb4:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3fc4:	73 5d 20 69 6e 76 61 6c 69 64 20 4e 61 6d 65 0a     s] invalid Name.
	...

00003fd5 <__c.4110>:
    3fd5:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3fe5:	69 64 20 66 69 6c 65 20 73 74 61 72 74 20 3e 20     id file start > 
    3ff5:	69 6d 61 67 65 20 73 69 7a 65 0a 00                 image size..

00004001 <__c.4108>:
    4001:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    4011:	69 64 20 44 69 72 65 63 74 6f 72 79 20 53 65 63     id Directory Sec
    4021:	74 6f 72 20 43 6f 75 6e 74 20 3c 20 31 0a 00        tor Count < 1..

00004030 <__c.4106>:
    4030:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    4040:	69 64 20 73 74 61 72 74 20 73 65 63 74 6f 72 3a     id start sector:
    4050:	25 6c 64 0a 00                                      %ld..

00004055 <__c.4104>:
    4055:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    4065:	69 64 20 62 79 74 65 73 20 61 74 20 6f 66 66 73     id bytes at offs
    4075:	65 74 20 32 32 26 32 33 20 73 68 6f 75 6c 64 20     et 22&23 should 
    4085:	62 65 20 7a 65 72 6f 0a 00                          be zero..

0000408e <__c.4102>:
    408e:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    409e:	69 64 20 62 79 74 65 73 20 61 74 20 6f 66 66 73     id bytes at offs
    40ae:	65 74 20 31 34 26 31 35 20 73 68 6f 75 6c 64 20     et 14&15 should 
    40be:	62 65 20 7a 65 72 6f 0a 00                          be zero..

000040c7 <__c.4100>:
    40c7:	4c 49 46 20 56 65 72 73 69 6f 6e 3a 20 25 30 34     LIF Version: %04
    40d7:	58 48 20 3e 20 31 0a 00                             XH > 1..

000040df <__c.4098>:
    40df:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    40ef:	69 64 20 53 79 73 74 65 6d 33 30 30 30 20 49 44     id System3000 ID
    40ff:	20 28 25 30 34 58 48 29 20 65 78 70 65 63 74 65      (%04XH) expecte
    410f:	64 20 31 30 30 30 48 0a 00                          d 1000H..

00004118 <__c.4096>:
    4118:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    4128:	69 64 20 56 6f 6c 75 6d 65 20 4e 61 6d 65 00        id Volume Name.

00004137 <__c.4089>:
    4137:	0a 00                                               ..

00004139 <__c.4087>:
    4139:	44 49 52 20 46 69 6c 65 20 44 61 74 65 3a 20 20     DIR File Date:  
    4149:	20 20 20 20 20 20 25 73 0a 00                             %s..

00004153 <__c.4085>:
    4153:	44 49 52 20 46 69 6c 65 20 73 65 63 74 6f 72 20     DIR File sector 
    4163:	73 69 7a 65 3a 20 25 38 58 68 0a 00                 size: %8Xh..

0000416f <__c.4083>:
    416f:	44 49 52 20 46 69 6c 65 20 62 79 74 65 73 3a 20     DIR File bytes: 
    417f:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

0000418c <__c.4081>:
    418c:	44 49 52 20 46 69 6c 65 20 73 65 63 74 6f 72 73     DIR File sectors
    419c:	3a 20 20 20 20 20 25 38 6c 58 68 0a 00              :     %8lXh..

000041a9 <__c.4079>:
    41a9:	44 49 52 20 46 69 6c 65 20 73 74 61 72 74 3a 20     DIR File start: 
    41b9:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000041c6 <__c.4077>:
    41c6:	44 49 52 20 46 69 6c 65 20 56 6f 6c 75 6d 65 23     DIR File Volume#
    41d6:	3a 20 20 20 20 20 25 38 58 68 0a 00                 :     %8Xh..

000041e2 <__c.4075>:
    41e2:	44 49 52 20 46 69 6c 65 20 54 79 70 65 3a 20 20     DIR File Type:  
    41f2:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

000041fe <__c.4073>:
    41fe:	44 49 52 20 46 69 6c 65 20 4e 61 6d 65 3a 20 20     DIR File Name:  
    420e:	20 20 20 20 20 20 25 73 0a 00                             %s..

00004218 <__c.4071>:
    4218:	56 4f 4c 20 44 61 74 65 3a 20 20 20 20 20 20 20     VOL Date:       
    4228:	20 20 20 20 20 20 25 73 0a 00                             %s..

00004232 <__c.4069>:
    4232:	56 4f 4c 20 4c 49 46 56 65 72 73 69 6f 6e 3a 20     VOL LIFVersion: 
    4242:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

0000424e <__c.4067>:
    424e:	56 4f 4c 20 33 30 30 30 4c 49 46 69 64 3a 20 20     VOL 3000LIFid:  
    425e:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

0000426a <__c.4065>:
    426a:	56 4f 4c 20 44 69 72 20 73 65 63 74 6f 72 73 3a     VOL Dir sectors:
    427a:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004287 <__c.4063>:
    4287:	56 4f 4c 20 44 69 72 20 73 74 61 72 74 3a 20 20     VOL Dir start:  
    4297:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000042a4 <__c.4061>:
    42a4:	56 4f 4c 20 4c 49 46 69 64 3a 20 20 20 20 20 20     VOL LIFid:      
    42b4:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

000042c0 <__c.4059>:
    42c0:	56 4f 4c 20 4c 61 62 65 6c 3a 20 20 20 20 20 20     VOL Label:      
    42d0:	20 20 20 20 20 20 25 73 0a 00                             %s..

000042da <__c.4057>:
    42da:	4c 49 46 20 70 75 72 67 65 64 3a 20 20 20 20 20     LIF purged:     
    42ea:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000042f7 <__c.4055>:
    42f7:	4c 49 46 20 66 69 6c 65 73 3a 20 20 20 20 20 20     LIF files:      
    4307:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004314 <__c.4053>:
    4314:	4c 49 46 20 66 72 65 65 3a 20 20 20 20 20 20 20     LIF free:       
    4324:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004331 <__c.4051>:
    4331:	4c 49 46 20 75 73 65 64 3a 20 20 20 20 20 20 20     LIF used:       
    4341:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

0000434e <__c.4049>:
    434e:	4c 49 46 20 66 69 6c 65 20 73 65 63 74 6f 72 73     LIF file sectors
    435e:	3a 20 20 20 20 20 25 38 6c 58 68 0a 00              :     %8lXh..

0000436b <__c.4047>:
    436b:	4c 49 46 20 66 69 6c 65 73 74 61 72 74 3a 20 20     LIF filestart:  
    437b:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004388 <__c.4045>:
    4388:	4c 49 46 20 62 79 74 65 73 3a 20 20 20 20 20 20     LIF bytes:      
    4398:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000043a5 <__c.4043>:
    43a5:	4c 49 46 20 73 65 63 74 6f 72 73 3a 20 20 20 20     LIF sectors:    
    43b5:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000043c2 <__c.4041>:
    43c2:	4c 49 46 20 6e 61 6d 65 3a 20 20 20 20 20 20 20     LIF name:       
    43d2:	20 20 20 20 20 20 25 73 0a 00                             %s..

000043dc <__c.4039>:
    43dc:	0a 25 73 0a 00                                      .%s..

000043e1 <__c.3916>:
    43e1:	6c 69 66 5f 77 72 69 74 65 3a 20 57 72 69 74 65     lif_write: Write
    43f1:	3a 5b 25 73 5d 20 6f 66 66 73 65 74 3a 5b 25 6c     :[%s] offset:[%l
    4401:	64 5d 20 77 72 69 74 65 3a 5b 25 64 5d 20 65 78     d] write:[%d] ex
    4411:	70 65 63 74 65 64 3a 5b 25 64 5d 0a 00              pected:[%d]..

0000441e <__c.3907>:
    441e:	6c 69 66 5f 72 65 61 64 3a 20 72 65 61 64 3a 5b     lif_read: read:[
    442e:	25 73 5d 20 6f 66 66 73 65 74 3a 5b 25 6c 64 5d     %s] offset:[%ld]
    443e:	20 77 72 69 74 65 3a 5b 25 6c 64 5d 20 65 78 70      write:[%ld] exp
    444e:	65 63 74 65 64 3a 5b 25 64 5d 0a 00                 ected:[%d]..

0000445a <__c.3898>:
    445a:	6c 69 66 5f 72 65 61 64 5f 6d 73 67 3a 20 25 73     lif_read_msg: %s
    446a:	20 53 65 65 6b 20 65 72 72 6f 72 20 25 6c 64 0a      Seek error %ld.
	...

0000447b <__c.3891>:
    447b:	6c 69 66 5f 73 74 61 74 3a 20 43 61 6e 27 74 20     lif_stat: Can't 
    448b:	73 74 61 74 3a 25 73 0a 00                          stat:%s..

00004494 <__c.3885>:
    4494:	6c 69 66 5f 6f 70 65 6e 3a 20 43 61 6e 27 74 20     lif_open: Can't 
    44a4:	6f 70 65 6e 3a 5b 25 73 5d 20 6d 6f 64 65 3a 5b     open:[%s] mode:[
    44b4:	25 73 5d 0a 00                                      %s]..

000044b9 <__c.3873>:
    44b9:	6c 69 66 5f 66 72 65 65 3a 20 4e 55 4c 4c 20 70     lif_free: NULL p
    44c9:	6f 69 6e 74 65 72 0a 00                             ointer..

000044d1 <__c.3868>:
    44d1:	6c 69 66 5f 63 61 6c 6c 6f 63 3a 5b 25 6c 64 5d     lif_calloc:[%ld]
    44e1:	20 6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65      not enough free
    44f1:	20 6d 65 6d 6f 72 79 0a 00                           memory..

000044fa <__c.3862>:
    44fa:	74 64 30 32 6c 69 66 20 73 75 70 70 6f 72 74 20     td02lif support 
    450a:	6e 6f 74 20 65 6e 61 62 6c 65 64 0a 00              not enabled..

00004517 <__c.3860>:
    4517:	44 69 73 6b 3a 20 25 73 20 6e 6f 74 20 66 6f 75     Disk: %s not fou
    4527:	6e 64 20 69 6e 20 68 70 64 69 72 2e 69 6e 69 0a     nd in hpdir.ini.
	...

00004538 <__c.3847>:
    4538:	6c 69 66 20 61 64 64 20 6c 69 66 69 6d 61 67 65     lif add lifimage
    4548:	20 6c 69 66 6e 61 6d 65 20 66 72 6f 6d 5f 61 73      lifname from_as
    4558:	63 69 69 5f 66 69 6c 65 0a 6c 69 66 20 61 64 64     cii_file.lif add
    4568:	62 69 6e 20 6c 69 66 69 6d 61 67 65 20 6c 69 66     bin lifimage lif
    4578:	6e 61 6d 65 20 66 72 6f 6d 5f 6c 69 66 5f 66 69     name from_lif_fi
    4588:	6c 65 0a 6c 69 66 20 63 72 65 61 74 65 20 6c 69     le.lif create li
    4598:	66 69 6d 61 67 65 20 6c 61 62 65 6c 20 64 69 72     fimage label dir
    45a8:	65 63 74 6f 72 79 5f 73 65 63 74 6f 72 73 20 73     ectory_sectors s
    45b8:	65 63 74 6f 72 73 0a 6c 69 66 20 63 72 65 61 74     ectors.lif creat
    45c8:	65 64 69 73 6b 20 6c 69 66 69 6d 61 67 65 20 6c     edisk lifimage l
    45d8:	61 62 65 6c 20 6d 6f 64 65 6c 0a 6c 69 66 20 64     abel model.lif d
    45e8:	65 6c 20 6c 69 66 69 6d 61 67 65 20 6e 61 6d 65     el lifimage name
    45f8:	0a 6c 69 66 20 64 69 72 20 6c 69 66 69 6d 61 67     .lif dir lifimag
    4608:	65 0a 6c 69 66 20 65 78 74 72 61 63 74 20 6c 69     e.lif extract li
    4618:	66 69 6d 61 67 65 20 6c 69 66 6e 61 6d 65 20 74     fimage lifname t
    4628:	6f 5f 61 73 63 69 69 5f 66 69 6c 65 0a 6c 69 66     o_ascii_file.lif
    4638:	20 65 78 74 72 61 63 74 62 69 6e 20 6c 69 66 69      extractbin lifi
    4648:	6d 61 67 65 20 6c 69 66 6e 61 6d 65 20 74 6f 5f     mage lifname to_
    4658:	6c 69 66 5f 66 69 6c 65 0a 20 20 20 20 65 78 74     lif_file.    ext
    4668:	72 61 63 74 73 20 61 20 66 69 6c 65 20 69 6e 74     racts a file int
    4678:	6f 20 61 20 73 69 67 6c 65 20 66 69 6c 65 20 4c     o a sigle file L
    4688:	49 46 20 69 6d 61 67 65 0a 6c 69 66 20 72 65 6e     IF image.lif ren
    4698:	61 6d 65 20 6c 69 66 69 6d 61 67 65 20 6f 6c 64     ame lifimage old
    46a8:	6c 69 66 6e 61 6d 65 20 6e 65 77 6c 69 66 6e 61     lifname newlifna
    46b8:	6d 65 0a 55 73 65 20 2d 64 20 20 61 66 74 65 72     me.Use -d  after
    46c8:	20 27 6c 69 66 27 20 6b 65 79 77 6f 72 64 20 74      'lif' keyword t
    46d8:	6f 20 65 6e 61 62 6c 65 20 4c 49 46 20 66 69 6c     o enable LIF fil
    46e8:	65 73 79 73 74 65 6d 20 64 65 62 75 67 67 69 6e     esystem debuggin
    46f8:	67 0a 0a 00                                         g...

000046fc <__c.3845>:
    46fc:	6c 69 66 20 20 20 20 20 20 20 68 65 6c 70 0a 00     lif       help..

0000470c <__c.4641>:
    470c:	53 74 61 72 74 69 6e 67 20 47 50 49 42 20 54 41     Starting GPIB TA
    471c:	53 4b 0a 00                                         SK..

00004720 <__c.4639>:
    4720:	49 32 43 20 4c 43 44 20 69 73 20 4e 4f 54 20 61     I2C LCD is NOT a
    4730:	74 74 61 63 68 65 64 21 0a 00                       ttached!..

0000473a <__c.4637>:
    473a:	25 2d 31 36 73 00                                   %-16s.

00004740 <__c.4635>:
    4740:	64 65 62 75 67 6c 65 76 65 6c 20 20 20 3d 20 25     debuglevel   = %
    4750:	30 34 78 48 0a 00                                   04xH..

00004756 <__c.4633>:
    4756:	47 50 49 42 20 53 74 61 74 65 20 69 6e 69 74 20     GPIB State init 
    4766:	64 6f 6e 65 0a 00                                   done..

0000476c <__c.4631>:
    476c:	47 50 49 42 20 46 69 6c 65 20 69 6e 69 74 20 64     GPIB File init d
    477c:	6f 6e 65 0a 00                                      one..

00004781 <__c.4629>:
    4781:	47 50 49 42 20 54 69 6d 65 72 20 69 6e 69 74 69     GPIB Timer initi
    4791:	61 6c 69 7a 65 64 0a 00                             alized..

00004799 <__c.4627>:
    4799:	47 50 49 42 20 54 69 6d 65 72 20 53 65 74 75 70     GPIB Timer Setup
    47a9:	0a 00                                               ..

000047ab <__c.4625>:
    47ab:	50 72 69 6e 74 65 72 20 69 6e 69 74 69 61 6c 69     Printer initiali
    47bb:	7a 65 64 0a 00                                      zed..

000047c0 <__c.4623>:
    47c0:	47 50 49 42 20 62 75 73 20 69 6e 69 74 69 61 6c     GPIB bus initial
    47d0:	69 7a 65 64 0a 00                                   ized..

000047d6 <__c.4621>:
    47d6:	4d 4d 43 20 69 6e 69 74 69 61 6c 69 7a 65 64 0a     MMC initialized.
	...

000047e7 <__c.4619>:
    47e7:	4d 4d 43 20 69 6e 69 74 69 61 6c 69 7a 69 6e 67     MMC initializing
    47f7:	20 73 74 61 72 74 0a 00                              start..

000047ff <__c.4617>:
    47ff:	53 79 73 74 65 6d 20 54 61 73 6b 20 49 6e 74 65     System Task Inte
    480f:	72 72 75 70 74 20 52 61 74 65 3a 20 25 6c 64 20     rrupt Rate: %ld 
    481f:	4e 61 6e 6f 20 53 65 63 6f 6e 64 73 0a 00           Nano Seconds..

0000482d <__c.4615>:
    482d:	43 6c 6f 63 6b 20 63 6c 65 61 72 65 64 0a 00        Clock cleared..

0000483c <__c.4613>:
    483c:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 52 54 43     Initializing RTC
    484c:	0a 00                                               ..

0000484e <__c.4611>:
    484e:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 49 32 43     Initializing I2C
    485e:	20 62 75 73 0a 00                                    bus..

00004864 <__c.4609>:
    4864:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 53 50 49     Initializing SPI
    4874:	20 62 75 73 0a 00                                    bus..

0000487a <__c.4607>:
    487a:	20 20 20 4c 61 73 74 20 75 70 64 61 74 65 64 20        Last updated 
    488a:	66 69 6c 65 3a 20 25 73 0a 00                       file: %s..

00004894 <__c.4605>:
    4894:	20 20 20 47 49 54 20 6c 61 73 74 20 70 75 73 68        GIT last push
    48a4:	65 64 3a 20 20 20 25 73 0a 00                       ed:   %s..

000048ae <__c.4603>:
    48ae:	2d 3e 20 68 74 74 70 73 3a 2f 2f 67 69 74 68 75     -> https://githu
    48be:	62 2e 63 6f 6d 2f 6d 61 67 6f 72 65 2f 68 70 38     b.com/magore/hp8
    48ce:	35 64 69 73 6b 0a 00                                5disk..

000048d5 <__c.4601>:
    48d5:	20 47 4e 55 20 76 65 72 73 69 6f 6e 20 33 0a 00      GNU version 3..

000048e5 <__c.4599>:
    48e5:	20 28 43 29 20 32 30 31 34 2d 32 30 32 30 20 62      (C) 2014-2020 b
    48f5:	79 20 4d 69 6b 65 20 47 6f 72 65 0a 00              y Mike Gore..

00004902 <__c.4597>:
    4902:	48 50 38 35 20 44 69 73 6b 20 61 6e 64 20 44 65     HP85 Disk and De
    4912:	76 69 63 65 20 45 6d 75 6c 61 74 6f 72 0a 00        vice Emulator..

00004921 <__c.4595>:
    4921:	52 65 71 75 65 73 74 65 64 20 42 61 75 64 20 52     Requested Baud R
    4931:	61 74 65 3a 20 25 6c 64 2c 20 41 63 74 75 61 6c     ate: %ld, Actual
    4941:	3a 20 25 6c 64 0a 00                                : %ld..

00004948 <__c.4593>:
    4948:	43 50 55 20 43 6c 6f 63 6b 20 3d 20 25 6c 75 0a     CPU Clock = %lu.
	...

00004959 <__c.4591>:
    4959:	53 74 61 72 74 0a 00                                Start..

00004960 <__c.4583>:
    4960:	25 2d 31 36 73 00                                   %-16s.

00004966 <__c.4581>:
    4966:	53 53 38 30 3d 25 64 20 41 4d 49 47 4f 3d 25 64     SS80=%d AMIGO=%d
	...

00004977 <__c.4573>:
    4977:	20 20 20 20 20 20 20 5b 25 73 5d 0a 00                     [%s]..

00004984 <__c.4571>:
    4984:	20 20 20 20 41 72 67 75 6d 65 6e 74 20 63 6f 75         Argument cou
    4994:	6e 74 20 3d 20 25 64 0a 00                          nt = %d..

0000499d <__c.4569>:
    499d:	49 6e 76 61 6c 69 64 20 43 6f 6d 6d 61 6e 64 0a     Invalid Command.
	...

000049ae <__c.4567>:
    49ae:	43 6f 6d 6d 61 6e 64 20 46 41 49 4c 45 44 0a 00     Command FAILED..

000049be <__c.4565>:
    49be:	4f 4b 0a 00                                         OK..

000049c2 <__c.4557>:
    49c2:	49 6e 70 75 74 20 64 65 62 75 67 67 69 6e 67 3a     Input debugging:
    49d2:	20 25 73 0a 00                                       %s..

000049d7 <__c.4552>:
    49d7:	20 20 20 5b 25 73 5d 0a 00                             [%s]..

000049e0 <__c.4550>:
    49e0:	41 72 67 75 6d 65 6e 74 20 63 6f 75 6e 74 20 3d     Argument count =
    49f0:	20 25 64 0a 00                                       %d..

000049f5 <__c.4548>:
    49f5:	0a 3e 00                                            .>.

000049f8 <__c.4535>:
    49f8:	62 61 63 6b 6c 69 67 68 74 20 30 78 52 52 47 47     backlight 0xRRGG
    4a08:	42 42 0a 64 69 72 20 20 20 20 20 20 20 64 69 72     BB.dir       dir
    4a18:	65 63 74 6f 72 69 65 73 20 6c 69 73 74 0a 69 6e     ectories list.in
    4a28:	70 75 74 20 20 20 2d 20 74 6f 67 67 6c 65 20 69     put   - toggle i
    4a38:	6e 70 75 74 20 64 65 62 75 67 67 69 6e 67 0a 6d     nput debugging.m
    4a48:	65 6d 20 20 20 20 20 2d 20 64 69 73 70 6c 61 79     em     - display
    4a58:	20 66 72 65 65 20 6d 65 6d 6f 72 79 0a 72 65 73      free memory.res
    4a68:	65 74 20 20 20 2d 20 72 65 73 65 74 20 65 6d 75     et   - reset emu
    4a78:	6c 61 74 6f 72 0a 73 65 74 64 61 74 65 20 2d 20     lator.setdate - 
    4a88:	73 65 74 20 64 61 74 65 0a 74 69 6d 65 20 20 20     set date.time   
    4a98:	20 2d 20 64 69 73 70 6c 61 79 20 63 75 72 72 65      - display curre
    4aa8:	6e 74 20 74 69 6d 65 0a 0a 00                       nt time...

00004ab2 <__c.4533>:
    4ab2:	68 65 6c 70 20 20 20 20 20 2d 20 64 69 73 70 6c     help     - displ
    4ac2:	61 79 73 20 74 68 69 73 20 68 65 6c 70 20 6d 65     ays this help me
    4ad2:	6e 75 0a 00                                         nu..

00004ad6 <__c.4526>:
    4ad6:	25 2d 31 36 73 00                                   %-16s.

00004adc <__c.4524>:
    4adc:	25 2d 31 36 73 00                                   %-16s.

00004ae2 <__c.4517>:
    4ae2:	49 32 43 20 4c 43 44 20 69 73 20 4e 4f 54 20 61     I2C LCD is NOT a
    4af2:	74 74 61 63 68 65 64 21 0a 00                       ttached!..

00004afc <__c.4515>:
    4afc:	25 2d 31 36 73 00                                   %-16s.

00004b02 <__c.4513>:
    4b02:	25 2d 31 36 73 00                                   %-16s.

00004b08 <__c.4511>:
    4b08:	6c 63 64 5f 74 61 73 6b 20 69 6e 69 74 20 66 61     lcd_task init fa
    4b18:	69 6c 65 64 0a 00                                   iled..

00004b1e <__c.4509>:
    4b1e:	49 32 43 20 4c 43 44 20 69 6e 69 74 69 61 6c 69     I2C LCD initiali
    4b2e:	7a 61 74 69 6f 6e 20 73 74 61 72 74 0a 00           zation start..

00004b3c <__c.4503>:
    4b3c:	49 32 43 20 4c 43 44 20 69 73 20 4e 4f 54 20 61     I2C LCD is NOT a
    4b4c:	74 74 61 63 68 65 64 21 0a 00                       ttached!..

00004b56 <__c.4497>:
    4b56:	25 73 20 25 32 64 20 25 30 32 64 3a 25 30 32 64     %s %2d %02d:%02d
    4b66:	3a 25 30 32 64 00                                   :%02d.

00004b6c <__c.4483>:
    4b6c:	0a 00                                               ..

00004b6e <__c.4481>:
    4b6e:	20 20 20 4c 61 73 74 20 75 70 64 61 74 65 64 20        Last updated 
    4b7e:	66 69 6c 65 3a 20 25 73 0a 00                       file: %s..

00004b88 <__c.4479>:
    4b88:	20 20 20 47 49 54 20 6c 61 73 74 20 70 75 73 68        GIT last push
    4b98:	65 64 3a 20 20 20 25 73 0a 00                       ed:   %s..

00004ba2 <__c.4477>:
    4ba2:	2d 3e 20 68 74 74 70 73 3a 2f 2f 67 69 74 68 75     -> https://githu
    4bb2:	62 2e 63 6f 6d 2f 6d 61 67 6f 72 65 2f 68 70 38     b.com/magore/hp8
    4bc2:	35 64 69 73 6b 0a 00                                5disk..

00004bc9 <__c.4475>:
    4bc9:	20 47 4e 55 20 76 65 72 73 69 6f 6e 20 33 0a 00      GNU version 3..

00004bd9 <__c.4473>:
    4bd9:	20 28 63 29 20 32 30 31 34 2d 32 30 32 30 20 62      (c) 2014-2020 b
    4be9:	79 20 4d 69 6b 65 20 47 6f 72 65 0a 00              y Mike Gore..

00004bf6 <__c.4471>:
    4bf6:	48 50 38 35 20 44 69 73 6b 20 61 6e 64 20 44 65     HP85 Disk and De
    4c06:	76 69 63 65 20 45 6d 75 6c 61 74 6f 72 20 77 69     vice Emulator wi
    4c16:	74 68 20 62 75 69 6c 74 20 69 6e 20 4c 49 46 20     th built in LIF 
    4c26:	75 74 69 6c 69 74 69 65 73 0a 00 00                 utilities...

00004c32 <__ctors_end>:
    4c32:	11 24       	eor	r1, r1
    4c34:	1f be       	out	0x3f, r1	; 63
    4c36:	cf ef       	ldi	r28, 0xFF	; 255
    4c38:	d0 e4       	ldi	r29, 0x40	; 64
    4c3a:	de bf       	out	0x3e, r29	; 62
    4c3c:	cd bf       	out	0x3d, r28	; 61

00004c3e <__do_copy_data>:
    4c3e:	17 e1       	ldi	r17, 0x17	; 23
    4c40:	a0 e0       	ldi	r26, 0x00	; 0
    4c42:	b1 e0       	ldi	r27, 0x01	; 1
    4c44:	e0 e0       	ldi	r30, 0x00	; 0
    4c46:	f6 ed       	ldi	r31, 0xD6	; 214
    4c48:	01 e0       	ldi	r16, 0x01	; 1
    4c4a:	0b bf       	out	0x3b, r16	; 59
    4c4c:	02 c0       	rjmp	.+4      	; 0x4c52 <__do_copy_data+0x14>
    4c4e:	07 90       	elpm	r0, Z+
    4c50:	0d 92       	st	X+, r0
    4c52:	a6 35       	cpi	r26, 0x56	; 86
    4c54:	b1 07       	cpc	r27, r17
    4c56:	d9 f7       	brne	.-10     	; 0x4c4e <__do_copy_data+0x10>

00004c58 <__do_clear_bss>:
    4c58:	20 e2       	ldi	r18, 0x20	; 32
    4c5a:	a6 e5       	ldi	r26, 0x56	; 86
    4c5c:	b7 e1       	ldi	r27, 0x17	; 23
    4c5e:	01 c0       	rjmp	.+2      	; 0x4c62 <.do_clear_bss_start>

00004c60 <.do_clear_bss_loop>:
    4c60:	1d 92       	st	X+, r1

00004c62 <.do_clear_bss_start>:
    4c62:	a8 33       	cpi	r26, 0x38	; 56
    4c64:	b2 07       	cpc	r27, r18
    4c66:	e1 f7       	brne	.-8      	; 0x4c60 <.do_clear_bss_loop>
    4c68:	0e 94 99 e4 	call	0x1c932	; 0x1c932 <main>
    4c6c:	0c 94 fe ea 	jmp	0x1d5fc	; 0x1d5fc <_exit>

00004c70 <__bad_interrupt>:
    4c70:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00004c74 <chip_select>:
#endif
#ifdef AVR
    SPI0_RX(&data,1);
#endif
    return(data);
}
    4c74:	e8 2f       	mov	r30, r24
    4c76:	e6 95       	lsr	r30
    4c78:	e6 95       	lsr	r30
    4c7a:	e6 95       	lsr	r30
    4c7c:	93 e0       	ldi	r25, 0x03	; 3
    4c7e:	e9 9f       	mul	r30, r25
    4c80:	f0 01       	movw	r30, r0
    4c82:	11 24       	eor	r1, r1
    4c84:	32 a1       	ldd	r19, Z+34	; 0x22
    4c86:	28 2f       	mov	r18, r24
    4c88:	27 70       	andi	r18, 0x07	; 7
    4c8a:	81 e0       	ldi	r24, 0x01	; 1
    4c8c:	90 e0       	ldi	r25, 0x00	; 0
    4c8e:	01 c0       	rjmp	.+2      	; 0x4c92 <chip_select+0x1e>
    4c90:	88 0f       	add	r24, r24
    4c92:	2a 95       	dec	r18
    4c94:	ea f7       	brpl	.-6      	; 0x4c90 <chip_select+0x1c>
    4c96:	98 2f       	mov	r25, r24
    4c98:	90 95       	com	r25
    4c9a:	93 23       	and	r25, r19
    4c9c:	92 a3       	std	Z+34, r25	; 0x22
    4c9e:	91 a1       	ldd	r25, Z+33	; 0x21
    4ca0:	89 2b       	or	r24, r25
    4ca2:	81 a3       	std	Z+33, r24	; 0x21
    4ca4:	08 95       	ret

00004ca6 <chip_deselect>:
    4ca6:	e8 2f       	mov	r30, r24
    4ca8:	e6 95       	lsr	r30
    4caa:	e6 95       	lsr	r30
    4cac:	e6 95       	lsr	r30
    4cae:	93 e0       	ldi	r25, 0x03	; 3
    4cb0:	e9 9f       	mul	r30, r25
    4cb2:	f0 01       	movw	r30, r0
    4cb4:	11 24       	eor	r1, r1
    4cb6:	32 a1       	ldd	r19, Z+34	; 0x22
    4cb8:	28 2f       	mov	r18, r24
    4cba:	27 70       	andi	r18, 0x07	; 7
    4cbc:	81 e0       	ldi	r24, 0x01	; 1
    4cbe:	90 e0       	ldi	r25, 0x00	; 0
    4cc0:	01 c0       	rjmp	.+2      	; 0x4cc4 <chip_deselect+0x1e>
    4cc2:	88 0f       	add	r24, r24
    4cc4:	2a 95       	dec	r18
    4cc6:	ea f7       	brpl	.-6      	; 0x4cc2 <chip_deselect+0x1c>
    4cc8:	93 2f       	mov	r25, r19
    4cca:	98 2b       	or	r25, r24
    4ccc:	92 a3       	std	Z+34, r25	; 0x22
    4cce:	91 a1       	ldd	r25, Z+33	; 0x21
    4cd0:	89 2b       	or	r24, r25
    4cd2:	81 a3       	std	Z+33, r24	; 0x21
    4cd4:	08 95       	ret

00004cd6 <chip_select_init>:
    4cd6:	e7 cf       	rjmp	.-50     	; 0x4ca6 <chip_deselect>
    4cd8:	08 95       	ret

00004cda <spi_end>:
    4cda:	cf 93       	push	r28
    4cdc:	ad b7       	in	r26, 0x3d	; 61
    4cde:	be b7       	in	r27, 0x3e	; 62
    4ce0:	17 97       	sbiw	r26, 0x07	; 7
    4ce2:	0f b6       	in	r0, 0x3f	; 63
    4ce4:	f8 94       	cli
    4ce6:	be bf       	out	0x3e, r27	; 62
    4ce8:	0f be       	out	0x3f, r0	; 63
    4cea:	ad bf       	out	0x3d, r26	; 61
    4cec:	c8 2f       	mov	r28, r24
    4cee:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_cs_pin>
    4cf2:	8c 17       	cp	r24, r28
    4cf4:	99 f0       	breq	.+38     	; 0x4d1c <spi_end+0x42>
    4cf6:	8f 3f       	cpi	r24, 0xFF	; 255
    4cf8:	89 f0       	breq	.+34     	; 0x4d1c <spi_end+0x42>
    4cfa:	2c 2f       	mov	r18, r28
    4cfc:	30 e0       	ldi	r19, 0x00	; 0
    4cfe:	ed b7       	in	r30, 0x3d	; 61
    4d00:	fe b7       	in	r31, 0x3e	; 62
    4d02:	37 83       	std	Z+7, r19	; 0x07
    4d04:	26 83       	std	Z+6, r18	; 0x06
    4d06:	90 e0       	ldi	r25, 0x00	; 0
    4d08:	95 83       	std	Z+5, r25	; 0x05
    4d0a:	84 83       	std	Z+4, r24	; 0x04
    4d0c:	82 ec       	ldi	r24, 0xC2	; 194
    4d0e:	91 e0       	ldi	r25, 0x01	; 1
    4d10:	a0 e0       	ldi	r26, 0x00	; 0
    4d12:	81 83       	std	Z+1, r24	; 0x01
    4d14:	92 83       	std	Z+2, r25	; 0x02
    4d16:	a3 83       	std	Z+3, r26	; 0x03
    4d18:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    4d1c:	8c 2f       	mov	r24, r28
    4d1e:	c3 df       	rcall	.-122    	; 0x4ca6 <chip_deselect>
    4d20:	8f ef       	ldi	r24, 0xFF	; 255
    4d22:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_cs_pin>
    4d26:	ad b7       	in	r26, 0x3d	; 61
    4d28:	be b7       	in	r27, 0x3e	; 62
    4d2a:	17 96       	adiw	r26, 0x07	; 7
    4d2c:	0f b6       	in	r0, 0x3f	; 63
    4d2e:	f8 94       	cli
    4d30:	be bf       	out	0x3e, r27	; 62
    4d32:	0f be       	out	0x3f, r0	; 63
    4d34:	ad bf       	out	0x3d, r26	; 61
    4d36:	cf 91       	pop	r28
    4d38:	08 95       	ret

00004d3a <spi_TX_buffer>:
    4d3a:	cd c4       	rjmp	.+2458   	; 0x56d6 <SPI0_TX>
    4d3c:	08 95       	ret

00004d3e <spi_RX_buffer>:
    4d3e:	f5 c4       	rjmp	.+2538   	; 0x572a <SPI0_RX>
    4d40:	08 95       	ret

00004d42 <spi_TX>:

/// @brief SPI write 1 byte
/// @param[in] data: value to transmit
/// @return  void
void spi_TX(uint8_t data)
{
    4d42:	a1 e0       	ldi	r26, 0x01	; 1
    4d44:	b0 e0       	ldi	r27, 0x00	; 0
    4d46:	e7 ea       	ldi	r30, 0xA7	; 167
    4d48:	f6 e2       	ldi	r31, 0x26	; 38
    4d4a:	0c 94 0f e7 	jmp	0x1ce1e	; 0x1ce1e <__prologue_saves__+0x20>
    4d4e:	89 83       	std	Y+1, r24	; 0x01
#ifdef ESP8266
    hspi_TX(&data,1);
#endif
#ifdef AVR
    SPI0_TX(&data,1);
    4d50:	61 e0       	ldi	r22, 0x01	; 1
    4d52:	70 e0       	ldi	r23, 0x00	; 0
    4d54:	ce 01       	movw	r24, r28
    4d56:	01 96       	adiw	r24, 0x01	; 1
    4d58:	be d4       	rcall	.+2428   	; 0x56d6 <SPI0_TX>
#endif
}
    4d5a:	21 96       	adiw	r28, 0x01	; 1
    4d5c:	e2 e0       	ldi	r30, 0x02	; 2
    4d5e:	0c 94 2b e7 	jmp	0x1ce56	; 0x1ce56 <__epilogue_restores__+0x20>

00004d62 <spi_init>:
 @return void
*/
uint8_t _cs_pin = 0xff;
uint32_t _spi_clock = -1L;
void spi_init(uint32_t clock, int pin)
{
    4d62:	cf 92       	push	r12
    4d64:	df 92       	push	r13
    4d66:	ef 92       	push	r14
    4d68:	ff 92       	push	r15
    4d6a:	6b 01       	movw	r12, r22
    4d6c:	7c 01       	movw	r14, r24
    4d6e:	84 2f       	mov	r24, r20
    spi_waitReady();
    chip_deselect(pin);
    4d70:	9a df       	rcall	.-204    	; 0x4ca6 <chip_deselect>
    _cs_pin = 0xff;
    4d72:	8f ef       	ldi	r24, 0xFF	; 255
    4d74:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_cs_pin>

#ifdef AVR
    SPI0_Init(clock);                             // Initialize the SPI bus - does nothing if clock unchanged
    4d78:	c7 01       	movw	r24, r14
    4d7a:	b6 01       	movw	r22, r12
    4d7c:	7f d4       	rcall	.+2302   	; 0x567c <SPI0_Init>
    SPI0_Mode(0);                                 // Set the clocking mode, etc
    4d7e:	80 e0       	ldi	r24, 0x00	; 0
    4d80:	90 e0       	ldi	r25, 0x00	; 0
#endif
#ifdef ESP8266
    hspi_init(clock,0);                           // Initialize the SPI bus - does nothing if clock unchanged
#endif
    spi_TX(0xff);
    4d82:	3c d4       	rcall	.+2168   	; 0x55fc <SPI0_Mode>
    4d84:	8f ef       	ldi	r24, 0xFF	; 255
    4d86:	dd df       	rcall	.-70     	; 0x4d42 <spi_TX>
    _spi_clock = clock;
    4d88:	c0 92 06 01 	sts	0x0106, r12	; 0x800106 <_spi_clock>
    4d8c:	d0 92 07 01 	sts	0x0107, r13	; 0x800107 <_spi_clock+0x1>
    4d90:	e0 92 08 01 	sts	0x0108, r14	; 0x800108 <_spi_clock+0x2>
    4d94:	f0 92 09 01 	sts	0x0109, r15	; 0x800109 <_spi_clock+0x3>
// waits for any prior transactions to complete before updating
    spi_waitReady();
}
    4d98:	ff 90       	pop	r15
    4d9a:	ef 90       	pop	r14
    4d9c:	df 90       	pop	r13
    4d9e:	cf 90       	pop	r12
    4da0:	08 95       	ret

00004da2 <spi_begin>:
 @param[in] clock: SPI clock rate
 @param[in] pin: GPIO CS pin
 @return void
*/
void spi_begin(uint32_t clock, int pin)
{
    4da2:	cf 92       	push	r12
    4da4:	df 92       	push	r13
    4da6:	ef 92       	push	r14
    4da8:	ff 92       	push	r15
    4daa:	cf 93       	push	r28
    4dac:	df 93       	push	r29
    4dae:	ad b7       	in	r26, 0x3d	; 61
    4db0:	be b7       	in	r27, 0x3e	; 62
    4db2:	17 97       	sbiw	r26, 0x07	; 7
    4db4:	0f b6       	in	r0, 0x3f	; 63
    4db6:	f8 94       	cli
    4db8:	be bf       	out	0x3e, r27	; 62
    4dba:	0f be       	out	0x3f, r0	; 63
    4dbc:	ad bf       	out	0x3d, r26	; 61
    4dbe:	6b 01       	movw	r12, r22
    4dc0:	7c 01       	movw	r14, r24
    4dc2:	ea 01       	movw	r28, r20
// FIXME allow nesting by using an array of clock values for each pin

//@brief if there is a prior chip select in progress flag an error
    if(_cs_pin != 0xff)
    4dc4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_cs_pin>
    4dc8:	8f 3f       	cpi	r24, 0xFF	; 255
    4dca:	79 f0       	breq	.+30     	; 0x4dea <spi_begin+0x48>
    {
// This implies a bug!
        printf("cs_enable was: %d, want: %d\n", 0xff & _cs_pin, pin);
    4dcc:	ed b7       	in	r30, 0x3d	; 61
    4dce:	fe b7       	in	r31, 0x3e	; 62
    4dd0:	46 83       	std	Z+6, r20	; 0x06
    4dd2:	d7 83       	std	Z+7, r29	; 0x07
    4dd4:	90 e0       	ldi	r25, 0x00	; 0
    4dd6:	95 83       	std	Z+5, r25	; 0x05
    4dd8:	84 83       	std	Z+4, r24	; 0x04
    4dda:	80 ee       	ldi	r24, 0xE0	; 224
    4ddc:	91 e0       	ldi	r25, 0x01	; 1
    4dde:	a0 e0       	ldi	r26, 0x00	; 0
    4de0:	81 83       	std	Z+1, r24	; 0x01
    4de2:	92 83       	std	Z+2, r25	; 0x02
    4de4:	a3 83       	std	Z+3, r26	; 0x03
    4de6:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
// waits for any prior transactions to complete before updating
    spi_waitReady();

///@brief initialize pin in case it has not been done yet
///@ we cache the clock frequency seeting for multiple device support
    if(_spi_clock != clock)
    4dea:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_spi_clock>
    4dee:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_spi_clock+0x1>
    4df2:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_spi_clock+0x2>
    4df6:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_spi_clock+0x3>
    4dfa:	8c 15       	cp	r24, r12
    4dfc:	9d 05       	cpc	r25, r13
    4dfe:	ae 05       	cpc	r26, r14
    4e00:	bf 05       	cpc	r27, r15
    4e02:	21 f0       	breq	.+8      	; 0x4e0c <spi_begin+0x6a>
    {
        spi_init(clock,pin);
    4e04:	ae 01       	movw	r20, r28
    4e06:	c7 01       	movw	r24, r14
    4e08:	b6 01       	movw	r22, r12
    4e0a:	ab df       	rcall	.-170    	; 0x4d62 <spi_init>
    }

    chip_select(pin);
    4e0c:	8c 2f       	mov	r24, r28
    4e0e:	32 df       	rcall	.-412    	; 0x4c74 <chip_select>
    _cs_pin = pin;
    4e10:	c0 93 0a 01 	sts	0x010A, r28	; 0x80010a <_cs_pin>
}
    4e14:	ad b7       	in	r26, 0x3d	; 61
    4e16:	be b7       	in	r27, 0x3e	; 62
    4e18:	17 96       	adiw	r26, 0x07	; 7
    4e1a:	0f b6       	in	r0, 0x3f	; 63
    4e1c:	f8 94       	cli
    4e1e:	be bf       	out	0x3e, r27	; 62
    4e20:	0f be       	out	0x3f, r0	; 63
    4e22:	ad bf       	out	0x3d, r26	; 61
    4e24:	df 91       	pop	r29
    4e26:	cf 91       	pop	r28
    4e28:	ff 90       	pop	r15
    4e2a:	ef 90       	pop	r14
    4e2c:	df 90       	pop	r13
    4e2e:	cf 90       	pop	r12
    4e30:	08 95       	ret

00004e32 <spi_TXRX>:

/// @brief SPI read and write 1 byte
/// @param[in] data: value to transmit
/// @return  uint8_t value read
uint8_t spi_TXRX(uint8_t data)
{
    4e32:	a1 e0       	ldi	r26, 0x01	; 1
    4e34:	b0 e0       	ldi	r27, 0x00	; 0
    4e36:	ef e1       	ldi	r30, 0x1F	; 31
    4e38:	f7 e2       	ldi	r31, 0x27	; 39
    4e3a:	0c 94 0f e7 	jmp	0x1ce1e	; 0x1ce1e <__prologue_saves__+0x20>
    4e3e:	89 83       	std	Y+1, r24	; 0x01
#ifdef ESP8266
    hspi_TXRX(&data,1);
#endif
#ifdef AVR
    SPI0_TXRX(&data,1);
    4e40:	61 e0       	ldi	r22, 0x01	; 1
    4e42:	70 e0       	ldi	r23, 0x00	; 0
    4e44:	ce 01       	movw	r24, r28
    4e46:	01 96       	adiw	r24, 0x01	; 1
    4e48:	5a d4       	rcall	.+2228   	; 0x56fe <SPI0_TXRX>
#endif
    return(data);
}
    4e4a:	89 81       	ldd	r24, Y+1	; 0x01
    4e4c:	21 96       	adiw	r28, 0x01	; 1
    4e4e:	e2 e0       	ldi	r30, 0x02	; 2
    4e50:	0c 94 2b e7 	jmp	0x1ce56	; 0x1ce56 <__epilogue_restores__+0x20>

00004e54 <set_error>:
static uint8_t error_flag = 0;
/// @brief Set error condition
/// @return  void
void set_error(uint8_t error)
{
	error_flag = error;
    4e54:	80 93 56 17 	sts	0x1756, r24	; 0x801756 <__data_end>
    GPIO_PIN_HI(LED2);
    4e58:	2c 9a       	sbi	0x05, 4	; 5
    4e5a:	24 9a       	sbi	0x04, 4	; 4
    4e5c:	08 95       	ret

00004e5e <clear_error>:

/// @brief Set error condition
/// @return  void
void clear_error()
{
	error_flag = 0;
    4e5e:	10 92 56 17 	sts	0x1756, r1	; 0x801756 <__data_end>
    GPIO_PIN_LOW(LED2);
    4e62:	2c 98       	cbi	0x05, 4	; 5
    4e64:	24 9a       	sbi	0x04, 4	; 4
    4e66:	08 95       	ret

00004e68 <freeRam>:
/// - avr-libc dependent code.
///
/// @return free memory in bytes.
/// @see malloc().
uint16_t freeRam ()
{
    4e68:	a2 e0       	ldi	r26, 0x02	; 2
    4e6a:	b0 e0       	ldi	r27, 0x00	; 0
    4e6c:	ea e3       	ldi	r30, 0x3A	; 58
    4e6e:	f7 e2       	ldi	r31, 0x27	; 39
    4e70:	0c 94 0f e7 	jmp	0x1ce1e	; 0x1ce1e <__prologue_saves__+0x20>
    extern void * __heap_start;
    extern void * __brkval;
    int ret;
    uint16_t top;

    if(__brkval)
    4e74:	20 91 34 20 	lds	r18, 0x2034	; 0x802034 <__brkval>
    4e78:	30 91 35 20 	lds	r19, 0x2035	; 0x802035 <__brkval+0x1>
    4e7c:	21 15       	cp	r18, r1
    4e7e:	31 05       	cpc	r19, r1
    4e80:	11 f4       	brne	.+4      	; 0x4e86 <freeRam+0x1e>
        top = (uint16_t) __brkval;
    else
        top = (uint16_t) & __heap_start;
    4e82:	28 e3       	ldi	r18, 0x38	; 56
    4e84:	30 e2       	ldi	r19, 0x20	; 32

    ret = (uint16_t) &v - top;
    return ( ret );
}
    4e86:	ce 01       	movw	r24, r28
    4e88:	01 96       	adiw	r24, 0x01	; 1
    4e8a:	82 1b       	sub	r24, r18
    4e8c:	93 0b       	sbc	r25, r19
    4e8e:	22 96       	adiw	r28, 0x02	; 2
    4e90:	e2 e0       	ldi	r30, 0x02	; 2
    4e92:	0c 94 2b e7 	jmp	0x1ce56	; 0x1ce56 <__epilogue_restores__+0x20>

00004e96 <PrintFree>:
/// - avr-libc dependent code.
/// - Stack, BSS, Data, Heap, Malloc.
///
/// @return  void
void PrintFree()
{
    4e96:	a9 e0       	ldi	r26, 0x09	; 9
    4e98:	b0 e0       	ldi	r27, 0x00	; 0
    4e9a:	e1 e5       	ldi	r30, 0x51	; 81
    4e9c:	f7 e2       	ldi	r31, 0x27	; 39
    4e9e:	0c 94 0f e7 	jmp	0x1ce1e	; 0x1ce1e <__prologue_saves__+0x20>
    extern void * __data_start;
    extern void * __data_end;
    extern void * __stack;
    uint16_t ram;

    ram = freeRam();
    4ea2:	e2 df       	rcall	.-60     	; 0x4e68 <freeRam>
    4ea4:	99 87       	std	Y+9, r25	; 0x09
    4ea6:	88 87       	std	Y+8, r24	; 0x08

    printf("Free Ram:%u\n", ram);
    4ea8:	ed b7       	in	r30, 0x3d	; 61
    4eaa:	fe b7       	in	r31, 0x3e	; 62
    4eac:	95 83       	std	Z+5, r25	; 0x05
    4eae:	84 83       	std	Z+4, r24	; 0x04
    4eb0:	87 e0       	ldi	r24, 0x07	; 7
    4eb2:	93 e0       	ldi	r25, 0x03	; 3
    4eb4:	a0 e0       	ldi	r26, 0x00	; 0
    4eb6:	81 83       	std	Z+1, r24	; 0x01
    4eb8:	92 83       	std	Z+2, r25	; 0x02
    4eba:	a3 83       	std	Z+3, r26	; 0x03
    4ebc:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    printf("  Stack Top:   %u\n", (unsigned int) &__stack);
    4ec0:	8f ef       	ldi	r24, 0xFF	; 255
    4ec2:	90 e4       	ldi	r25, 0x40	; 64
    4ec4:	ed b7       	in	r30, 0x3d	; 61
    4ec6:	fe b7       	in	r31, 0x3e	; 62
    4ec8:	95 83       	std	Z+5, r25	; 0x05
    4eca:	84 83       	std	Z+4, r24	; 0x04
    4ecc:	84 ef       	ldi	r24, 0xF4	; 244
    4ece:	92 e0       	ldi	r25, 0x02	; 2
    4ed0:	a0 e0       	ldi	r26, 0x00	; 0
    4ed2:	81 83       	std	Z+1, r24	; 0x01
    4ed4:	92 83       	std	Z+2, r25	; 0x02
    4ed6:	a3 83       	std	Z+3, r26	; 0x03
    4ed8:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    printf("  Stack Free:  %u\n", (unsigned int) &ram - 0);
    4edc:	ce 01       	movw	r24, r28
    4ede:	08 96       	adiw	r24, 0x08	; 8
    4ee0:	ed b7       	in	r30, 0x3d	; 61
    4ee2:	fe b7       	in	r31, 0x3e	; 62
    4ee4:	95 83       	std	Z+5, r25	; 0x05
    4ee6:	84 83       	std	Z+4, r24	; 0x04
    4ee8:	81 ee       	ldi	r24, 0xE1	; 225
    4eea:	92 e0       	ldi	r25, 0x02	; 2
    4eec:	a0 e0       	ldi	r26, 0x00	; 0
    4eee:	81 83       	std	Z+1, r24	; 0x01
    4ef0:	92 83       	std	Z+2, r25	; 0x02
    4ef2:	a3 83       	std	Z+3, r26	; 0x03
    4ef4:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>

    printf("  BSS   start: %5u, end: %5u\n",
    4ef8:	88 e3       	ldi	r24, 0x38	; 56
    4efa:	90 e2       	ldi	r25, 0x20	; 32
    4efc:	ed b7       	in	r30, 0x3d	; 61
    4efe:	fe b7       	in	r31, 0x3e	; 62
    4f00:	97 83       	std	Z+7, r25	; 0x07
    4f02:	86 83       	std	Z+6, r24	; 0x06
    4f04:	86 e5       	ldi	r24, 0x56	; 86
    4f06:	97 e1       	ldi	r25, 0x17	; 23
    4f08:	95 83       	std	Z+5, r25	; 0x05
    4f0a:	84 83       	std	Z+4, r24	; 0x04
    4f0c:	83 ec       	ldi	r24, 0xC3	; 195
    4f0e:	92 e0       	ldi	r25, 0x02	; 2
    4f10:	a0 e0       	ldi	r26, 0x00	; 0
    4f12:	81 83       	std	Z+1, r24	; 0x01
    4f14:	92 83       	std	Z+2, r25	; 0x02
    4f16:	a3 83       	std	Z+3, r26	; 0x03
    4f18:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
        (unsigned int)&__bss_start, (unsigned int)&__bss_end);

    printf("  Data  start: %5u, end: %5u\n",
    4f1c:	86 e5       	ldi	r24, 0x56	; 86
    4f1e:	97 e1       	ldi	r25, 0x17	; 23
    4f20:	ed b7       	in	r30, 0x3d	; 61
    4f22:	fe b7       	in	r31, 0x3e	; 62
    4f24:	97 83       	std	Z+7, r25	; 0x07
    4f26:	86 83       	std	Z+6, r24	; 0x06
    4f28:	80 e0       	ldi	r24, 0x00	; 0
    4f2a:	91 e0       	ldi	r25, 0x01	; 1
    4f2c:	95 83       	std	Z+5, r25	; 0x05
    4f2e:	84 83       	std	Z+4, r24	; 0x04
    4f30:	85 ea       	ldi	r24, 0xA5	; 165
    4f32:	92 e0       	ldi	r25, 0x02	; 2
    4f34:	a0 e0       	ldi	r26, 0x00	; 0
    4f36:	81 83       	std	Z+1, r24	; 0x01
    4f38:	92 83       	std	Z+2, r25	; 0x02
    4f3a:	a3 83       	std	Z+3, r26	; 0x03
    4f3c:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
        (unsigned int)&__data_start, (unsigned int)&__data_end);

    printf("  Heap: start: %5u, end: %5u\n",
    4f40:	80 e0       	ldi	r24, 0x00	; 0
    4f42:	90 e0       	ldi	r25, 0x00	; 0
    4f44:	ed b7       	in	r30, 0x3d	; 61
    4f46:	fe b7       	in	r31, 0x3e	; 62
    4f48:	97 83       	std	Z+7, r25	; 0x07
    4f4a:	86 83       	std	Z+6, r24	; 0x06
    4f4c:	88 e3       	ldi	r24, 0x38	; 56
    4f4e:	90 e2       	ldi	r25, 0x20	; 32
    4f50:	95 83       	std	Z+5, r25	; 0x05
    4f52:	84 83       	std	Z+4, r24	; 0x04
    4f54:	87 e8       	ldi	r24, 0x87	; 135
    4f56:	92 e0       	ldi	r25, 0x02	; 2
    4f58:	a0 e0       	ldi	r26, 0x00	; 0
    4f5a:	81 83       	std	Z+1, r24	; 0x01
    4f5c:	92 83       	std	Z+2, r25	; 0x02
    4f5e:	a3 83       	std	Z+3, r26	; 0x03
    4f60:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
        (unsigned int)&__heap_start, (unsigned int)&__heap_end);

    printf("  Malloc start %5u  end: %5u\n",
    4f64:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    4f68:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    4f6c:	ed b7       	in	r30, 0x3d	; 61
    4f6e:	fe b7       	in	r31, 0x3e	; 62
    4f70:	97 83       	std	Z+7, r25	; 0x07
    4f72:	86 83       	std	Z+6, r24	; 0x06
    4f74:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__malloc_heap_start>
    4f78:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    4f7c:	95 83       	std	Z+5, r25	; 0x05
    4f7e:	84 83       	std	Z+4, r24	; 0x04
    4f80:	89 e6       	ldi	r24, 0x69	; 105
    4f82:	92 e0       	ldi	r25, 0x02	; 2
    4f84:	a0 e0       	ldi	r26, 0x00	; 0
    4f86:	81 83       	std	Z+1, r24	; 0x01
    4f88:	92 83       	std	Z+2, r25	; 0x02
    4f8a:	a3 83       	std	Z+3, r26	; 0x03
    4f8c:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
        (unsigned int)__malloc_heap_start, (unsigned int) __malloc_heap_end );

    printf("  __brkval:    %5u\n", (unsigned int) __brkval);
    4f90:	80 91 34 20 	lds	r24, 0x2034	; 0x802034 <__brkval>
    4f94:	90 91 35 20 	lds	r25, 0x2035	; 0x802035 <__brkval+0x1>
    4f98:	ed b7       	in	r30, 0x3d	; 61
    4f9a:	fe b7       	in	r31, 0x3e	; 62
    4f9c:	95 83       	std	Z+5, r25	; 0x05
    4f9e:	84 83       	std	Z+4, r24	; 0x04
    4fa0:	85 e5       	ldi	r24, 0x55	; 85
    4fa2:	92 e0       	ldi	r25, 0x02	; 2
    4fa4:	a0 e0       	ldi	r26, 0x00	; 0
    4fa6:	81 83       	std	Z+1, r24	; 0x01
    4fa8:	92 83       	std	Z+2, r25	; 0x02
    4faa:	a3 83       	std	Z+3, r26	; 0x03
    4fac:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>

}
    4fb0:	29 96       	adiw	r28, 0x09	; 9
    4fb2:	e2 e0       	ldi	r30, 0x02	; 2
    4fb4:	0c 94 2b e7 	jmp	0x1ce56	; 0x1ce56 <__epilogue_restores__+0x20>

00004fb8 <safecalloc>:
///  - We check if the pointer was in the heap.
///  - Otherwise it may have been statically defined - display error.
///
/// @return  void.
void *safecalloc(int size, int elements)
{
    4fb8:	ef 92       	push	r14
    4fba:	ff 92       	push	r15
    4fbc:	0f 93       	push	r16
    4fbe:	1f 93       	push	r17
    4fc0:	cf 93       	push	r28
    4fc2:	df 93       	push	r29
    4fc4:	ad b7       	in	r26, 0x3d	; 61
    4fc6:	be b7       	in	r27, 0x3e	; 62
    4fc8:	17 97       	sbiw	r26, 0x07	; 7
    4fca:	0f b6       	in	r0, 0x3f	; 63
    4fcc:	f8 94       	cli
    4fce:	be bf       	out	0x3e, r27	; 62
    4fd0:	0f be       	out	0x3f, r0	; 63
    4fd2:	ad bf       	out	0x3d, r26	; 61
    4fd4:	8c 01       	movw	r16, r24
    4fd6:	7b 01       	movw	r14, r22
    void *p = calloc(size, elements);
    4fd8:	0e 94 bc e9 	call	0x1d378	; 0x1d378 <calloc>
    4fdc:	ec 01       	movw	r28, r24
    if(!p)
    4fde:	89 2b       	or	r24, r25
    4fe0:	71 f4       	brne	.+28     	; 0x4ffe <safecalloc+0x46>
    {
        printf("safecalloc(%d,%d) failed!\n", size, elements);
    4fe2:	ed b7       	in	r30, 0x3d	; 61
    4fe4:	fe b7       	in	r31, 0x3e	; 62
    4fe6:	f7 82       	std	Z+7, r15	; 0x07
    4fe8:	e6 82       	std	Z+6, r14	; 0x06
    4fea:	15 83       	std	Z+5, r17	; 0x05
    4fec:	04 83       	std	Z+4, r16	; 0x04
    4fee:	8a e3       	ldi	r24, 0x3A	; 58
    4ff0:	92 e0       	ldi	r25, 0x02	; 2
    4ff2:	a0 e0       	ldi	r26, 0x00	; 0
    4ff4:	81 83       	std	Z+1, r24	; 0x01
    4ff6:	92 83       	std	Z+2, r25	; 0x02
    4ff8:	a3 83       	std	Z+3, r26	; 0x03
    4ffa:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    }
    return(p);
}
    4ffe:	ce 01       	movw	r24, r28
    5000:	cd b7       	in	r28, 0x3d	; 61
    5002:	de b7       	in	r29, 0x3e	; 62
    5004:	27 96       	adiw	r28, 0x07	; 7
    5006:	e6 e0       	ldi	r30, 0x06	; 6
    5008:	0c 94 27 e7 	jmp	0x1ce4e	; 0x1ce4e <__epilogue_restores__+0x18>

0000500c <safemalloc>:
///  - We check if the pointer was in the heap.
///  - Otherwise it may have been statically defined - display error.
/// @param[in] size:  size
/// @return  void.
void *safemalloc(size_t size)
{
    500c:	0f 93       	push	r16
    500e:	1f 93       	push	r17
    5010:	cf 93       	push	r28
    5012:	df 93       	push	r29
    5014:	00 d0       	rcall	.+0      	; 0x5016 <safemalloc+0xa>
    5016:	00 d0       	rcall	.+0      	; 0x5018 <safemalloc+0xc>
    5018:	1f 92       	push	r1
    501a:	8c 01       	movw	r16, r24
    void *p = calloc(size, 1);
    501c:	61 e0       	ldi	r22, 0x01	; 1
    501e:	70 e0       	ldi	r23, 0x00	; 0
    5020:	0e 94 bc e9 	call	0x1d378	; 0x1d378 <calloc>
    5024:	ec 01       	movw	r28, r24
    if(!p)
    5026:	89 2b       	or	r24, r25
    5028:	61 f4       	brne	.+24     	; 0x5042 <safemalloc+0x36>
    {
        printf("safemalloc(%d) failed!\n", size);
    502a:	ed b7       	in	r30, 0x3d	; 61
    502c:	fe b7       	in	r31, 0x3e	; 62
    502e:	15 83       	std	Z+5, r17	; 0x05
    5030:	04 83       	std	Z+4, r16	; 0x04
    5032:	82 e2       	ldi	r24, 0x22	; 34
    5034:	92 e0       	ldi	r25, 0x02	; 2
    5036:	a0 e0       	ldi	r26, 0x00	; 0
    5038:	81 83       	std	Z+1, r24	; 0x01
    503a:	92 83       	std	Z+2, r25	; 0x02
    503c:	a3 83       	std	Z+3, r26	; 0x03
    503e:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    }
    return(p);
}
    5042:	ce 01       	movw	r24, r28
    5044:	cd b7       	in	r28, 0x3d	; 61
    5046:	de b7       	in	r29, 0x3e	; 62
    5048:	25 96       	adiw	r28, 0x05	; 5
    504a:	e4 e0       	ldi	r30, 0x04	; 4
    504c:	0c 94 29 e7 	jmp	0x1ce52	; 0x1ce52 <__epilogue_restores__+0x1c>

00005050 <safefree>:
///
/// @param[in] p: pointer to free.
///
/// @return  void.
void safefree(void *p)
{
    5050:	ad b7       	in	r26, 0x3d	; 61
    5052:	be b7       	in	r27, 0x3e	; 62
    5054:	17 97       	sbiw	r26, 0x07	; 7
    5056:	0f b6       	in	r0, 0x3f	; 63
    5058:	f8 94       	cli
    505a:	be bf       	out	0x3e, r27	; 62
    505c:	0f be       	out	0x3f, r0	; 63
    505e:	ad bf       	out	0x3d, r26	; 61
    extern void *__brkval;
    extern void * __heap_start;
    extern void * __heap_end;
    uint16_t top;

    if(p == NULL)
    5060:	00 97       	sbiw	r24, 0x00	; 0
    5062:	11 f1       	breq	.+68     	; 0x50a8 <safefree+0x58>
        return;

    if(__brkval)
    5064:	20 91 34 20 	lds	r18, 0x2034	; 0x802034 <__brkval>
    5068:	30 91 35 20 	lds	r19, 0x2035	; 0x802035 <__brkval+0x1>
    506c:	21 15       	cp	r18, r1
    506e:	31 05       	cpc	r19, r1
    5070:	11 f4       	brne	.+4      	; 0x5076 <safefree+0x26>
        top = (uint16_t) __brkval;
    else
        top = (uint16_t) & __heap_start;
    5072:	28 e3       	ldi	r18, 0x38	; 56
    5074:	30 e2       	ldi	r19, 0x20	; 32

    if( ((uint16_t) p >= (uint16_t) &__heap_start) &&
    5076:	40 e2       	ldi	r20, 0x20	; 32
    5078:	88 33       	cpi	r24, 0x38	; 56
    507a:	94 07       	cpc	r25, r20
    507c:	30 f0       	brcs	.+12     	; 0x508a <safefree+0x3a>
    507e:	28 17       	cp	r18, r24
    5080:	39 07       	cpc	r19, r25
    5082:	18 f0       	brcs	.+6      	; 0x508a <safefree+0x3a>
        ((uint16_t) p <= top) )
    {
        free(p);
    5084:	0e 94 6e ea 	call	0x1d4dc	; 0x1d4dc <free>
        return;
    5088:	0f c0       	rjmp	.+30     	; 0x50a8 <safefree+0x58>
    }
    printf("safefree: FREE ERROR (%u), top:(%u)\n", (uint16_t) p, (uint16_t) top);
    508a:	ed b7       	in	r30, 0x3d	; 61
    508c:	fe b7       	in	r31, 0x3e	; 62
    508e:	37 83       	std	Z+7, r19	; 0x07
    5090:	26 83       	std	Z+6, r18	; 0x06
    5092:	95 83       	std	Z+5, r25	; 0x05
    5094:	84 83       	std	Z+4, r24	; 0x04
    5096:	8d ef       	ldi	r24, 0xFD	; 253
    5098:	91 e0       	ldi	r25, 0x01	; 1
    509a:	a0 e0       	ldi	r26, 0x00	; 0
    509c:	81 83       	std	Z+1, r24	; 0x01
    509e:	92 83       	std	Z+2, r25	; 0x02
    50a0:	a3 83       	std	Z+3, r26	; 0x03
    50a2:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    PrintFree();
    50a6:	f7 de       	rcall	.-530    	; 0x4e96 <PrintFree>
}
    50a8:	ad b7       	in	r26, 0x3d	; 61
    50aa:	be b7       	in	r27, 0x3e	; 62
    50ac:	17 96       	adiw	r26, 0x07	; 7
    50ae:	0f b6       	in	r0, 0x3f	; 63
    50b0:	f8 94       	cli
    50b2:	be bf       	out	0x3e, r27	; 62
    50b4:	0f be       	out	0x3f, r0	; 63
    50b6:	ad bf       	out	0x3d, r26	; 61
    50b8:	08 95       	ret

000050ba <delayus>:
/// @return  void
/// @see _delay_us() is part of avr-libc
void delayus(uint32_t us)
{

    while (us >= 100U)
    50ba:	64 36       	cpi	r22, 0x64	; 100
    50bc:	71 05       	cpc	r23, r1
    50be:	81 05       	cpc	r24, r1
    50c0:	91 05       	cpc	r25, r1
    50c2:	58 f0       	brcs	.+22     	; 0x50da <delayus+0x20>
    {
        us -= 100U;
    50c4:	64 56       	subi	r22, 0x64	; 100
    50c6:	71 09       	sbc	r23, r1
    50c8:	81 09       	sbc	r24, r1
    50ca:	91 09       	sbc	r25, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    50cc:	e3 ef       	ldi	r30, 0xF3	; 243
    50ce:	f1 e0       	ldi	r31, 0x01	; 1
    50d0:	31 97       	sbiw	r30, 0x01	; 1
    50d2:	f1 f7       	brne	.-4      	; 0x50d0 <delayus+0x16>
    50d4:	00 c0       	rjmp	.+0      	; 0x50d6 <delayus+0x1c>
    50d6:	00 00       	nop
    50d8:	f0 cf       	rjmp	.-32     	; 0x50ba <delayus>
        _delay_us(100);
    }
    while (us >= 10U)
    50da:	6a 30       	cpi	r22, 0x0A	; 10
    50dc:	71 05       	cpc	r23, r1
    50de:	81 05       	cpc	r24, r1
    50e0:	91 05       	cpc	r25, r1
    50e2:	48 f0       	brcs	.+18     	; 0x50f6 <delayus+0x3c>
    {
        us -= 10U;
    50e4:	6a 50       	subi	r22, 0x0A	; 10
    50e6:	71 09       	sbc	r23, r1
    50e8:	81 09       	sbc	r24, r1
    50ea:	91 09       	sbc	r25, r1
    50ec:	f2 e4       	ldi	r31, 0x42	; 66
    50ee:	fa 95       	dec	r31
    50f0:	f1 f7       	brne	.-4      	; 0x50ee <delayus+0x34>
    50f2:	00 c0       	rjmp	.+0      	; 0x50f4 <delayus+0x3a>
    50f4:	f2 cf       	rjmp	.-28     	; 0x50da <delayus+0x20>
        _delay_us(10);
    }
    while (us != 0U)
    50f6:	61 15       	cp	r22, r1
    50f8:	71 05       	cpc	r23, r1
    50fa:	81 05       	cpc	r24, r1
    50fc:	91 05       	cpc	r25, r1
    50fe:	49 f0       	breq	.+18     	; 0x5112 <delayus+0x58>
    {
        --us;
    5100:	61 50       	subi	r22, 0x01	; 1
    5102:	71 09       	sbc	r23, r1
    5104:	81 09       	sbc	r24, r1
    5106:	91 09       	sbc	r25, r1
    5108:	26 e0       	ldi	r18, 0x06	; 6
    510a:	2a 95       	dec	r18
    510c:	f1 f7       	brne	.-4      	; 0x510a <delayus+0x50>
    510e:	00 c0       	rjmp	.+0      	; 0x5110 <delayus+0x56>
    5110:	f2 cf       	rjmp	.-28     	; 0x50f6 <delayus+0x3c>
        _delay_us(1);
    }
}
    5112:	08 95       	ret

00005114 <delayms>:
/// _delay_us() has limited range - this extends it.
/// @return  void
/// @see _delay_us() is part of avr-libc
void delayms(uint32_t ms)
{
    while (ms--)
    5114:	61 15       	cp	r22, r1
    5116:	71 05       	cpc	r23, r1
    5118:	81 05       	cpc	r24, r1
    511a:	91 05       	cpc	r25, r1
    511c:	09 f4       	brne	.+2      	; 0x5120 <delayms+0xc>
    511e:	41 c0       	rjmp	.+130    	; 0x51a2 <delayms+0x8e>
    5120:	e3 ef       	ldi	r30, 0xF3	; 243
    5122:	f1 e0       	ldi	r31, 0x01	; 1
    5124:	31 97       	sbiw	r30, 0x01	; 1
    5126:	f1 f7       	brne	.-4      	; 0x5124 <delayms+0x10>
    5128:	00 c0       	rjmp	.+0      	; 0x512a <delayms+0x16>
    512a:	00 00       	nop
    512c:	e3 ef       	ldi	r30, 0xF3	; 243
    512e:	f1 e0       	ldi	r31, 0x01	; 1
    5130:	31 97       	sbiw	r30, 0x01	; 1
    5132:	f1 f7       	brne	.-4      	; 0x5130 <delayms+0x1c>
    5134:	00 c0       	rjmp	.+0      	; 0x5136 <delayms+0x22>
    5136:	00 00       	nop
    5138:	e3 ef       	ldi	r30, 0xF3	; 243
    513a:	f1 e0       	ldi	r31, 0x01	; 1
    513c:	31 97       	sbiw	r30, 0x01	; 1
    513e:	f1 f7       	brne	.-4      	; 0x513c <delayms+0x28>
    5140:	00 c0       	rjmp	.+0      	; 0x5142 <delayms+0x2e>
    5142:	00 00       	nop
    5144:	e3 ef       	ldi	r30, 0xF3	; 243
    5146:	f1 e0       	ldi	r31, 0x01	; 1
    5148:	31 97       	sbiw	r30, 0x01	; 1
    514a:	f1 f7       	brne	.-4      	; 0x5148 <delayms+0x34>
    514c:	00 c0       	rjmp	.+0      	; 0x514e <delayms+0x3a>
    514e:	00 00       	nop
    5150:	e3 ef       	ldi	r30, 0xF3	; 243
    5152:	f1 e0       	ldi	r31, 0x01	; 1
    5154:	31 97       	sbiw	r30, 0x01	; 1
    5156:	f1 f7       	brne	.-4      	; 0x5154 <delayms+0x40>
    5158:	00 c0       	rjmp	.+0      	; 0x515a <delayms+0x46>
    515a:	00 00       	nop
    515c:	e3 ef       	ldi	r30, 0xF3	; 243
    515e:	f1 e0       	ldi	r31, 0x01	; 1
    5160:	31 97       	sbiw	r30, 0x01	; 1
    5162:	f1 f7       	brne	.-4      	; 0x5160 <delayms+0x4c>
    5164:	00 c0       	rjmp	.+0      	; 0x5166 <delayms+0x52>
    5166:	00 00       	nop
    5168:	e3 ef       	ldi	r30, 0xF3	; 243
    516a:	f1 e0       	ldi	r31, 0x01	; 1
    516c:	31 97       	sbiw	r30, 0x01	; 1
    516e:	f1 f7       	brne	.-4      	; 0x516c <delayms+0x58>
    5170:	00 c0       	rjmp	.+0      	; 0x5172 <delayms+0x5e>
    5172:	00 00       	nop
    5174:	e3 ef       	ldi	r30, 0xF3	; 243
    5176:	f1 e0       	ldi	r31, 0x01	; 1
    5178:	31 97       	sbiw	r30, 0x01	; 1
    517a:	f1 f7       	brne	.-4      	; 0x5178 <delayms+0x64>
    517c:	00 c0       	rjmp	.+0      	; 0x517e <delayms+0x6a>
    517e:	00 00       	nop
    5180:	e3 ef       	ldi	r30, 0xF3	; 243
    5182:	f1 e0       	ldi	r31, 0x01	; 1
    5184:	31 97       	sbiw	r30, 0x01	; 1
    5186:	f1 f7       	brne	.-4      	; 0x5184 <delayms+0x70>
    5188:	00 c0       	rjmp	.+0      	; 0x518a <delayms+0x76>
    518a:	00 00       	nop
    518c:	e3 ef       	ldi	r30, 0xF3	; 243
    518e:	f1 e0       	ldi	r31, 0x01	; 1
    5190:	31 97       	sbiw	r30, 0x01	; 1
    5192:	f1 f7       	brne	.-4      	; 0x5190 <delayms+0x7c>
    5194:	00 c0       	rjmp	.+0      	; 0x5196 <delayms+0x82>
    5196:	00 00       	nop
    5198:	61 50       	subi	r22, 0x01	; 1
    519a:	71 09       	sbc	r23, r1
    519c:	81 09       	sbc	r24, r1
    519e:	91 09       	sbc	r25, r1
    51a0:	b9 cf       	rjmp	.-142    	; 0x5114 <delayms>
        _delay_us(100);                           // 700
        _delay_us(100);                           // 800
        _delay_us(100);                           // 900
        _delay_us(100);                           //1000
    }
}
    51a2:	08 95       	ret

000051a4 <uart_rx_flush>:

    cli();
    c = uarts[uart].rx_buf[uarts[uart].rx_tail];
    sei();
    return (c & 0xff);
}
    51a4:	81 11       	cpse	r24, r1
    51a6:	0e c0       	rjmp	.+28     	; 0x51c4 <uart_rx_flush+0x20>
    51a8:	f8 94       	cli
    51aa:	10 92 fb 19 	sts	0x19FB, r1	; 0x8019fb <uarts+0x4>
    51ae:	10 92 fa 19 	sts	0x19FA, r1	; 0x8019fa <uarts+0x3>
    51b2:	10 92 f7 19 	sts	0x19F7, r1	; 0x8019f7 <uarts>
    51b6:	10 92 f8 19 	sts	0x19F8, r1	; 0x8019f8 <uarts+0x1>
    51ba:	10 92 f9 19 	sts	0x19F9, r1	; 0x8019f9 <uarts+0x2>
    51be:	10 92 fc 19 	sts	0x19FC, r1	; 0x8019fc <uarts+0x5>
    51c2:	78 94       	sei
    51c4:	08 95       	ret

000051c6 <uart_ubr>:
    51c6:	4f 92       	push	r4
    51c8:	5f 92       	push	r5
    51ca:	6f 92       	push	r6
    51cc:	7f 92       	push	r7
    51ce:	8f 92       	push	r8
    51d0:	9f 92       	push	r9
    51d2:	af 92       	push	r10
    51d4:	bf 92       	push	r11
    51d6:	cf 92       	push	r12
    51d8:	df 92       	push	r13
    51da:	ef 92       	push	r14
    51dc:	ff 92       	push	r15
    51de:	cf 93       	push	r28
    51e0:	df 93       	push	r29
    51e2:	5a 01       	movw	r10, r20
    51e4:	e9 01       	movw	r28, r18
    51e6:	0e 94 5a e8 	call	0x1d0b4	; 0x1d0b4 <__floatunsisf>
    51ea:	2b 01       	movw	r4, r22
    51ec:	3c 01       	movw	r6, r24
    51ee:	20 e0       	ldi	r18, 0x00	; 0
    51f0:	30 e0       	ldi	r19, 0x00	; 0
    51f2:	40 e0       	ldi	r20, 0x00	; 0
    51f4:	51 e4       	ldi	r21, 0x41	; 65
    51f6:	0e 94 10 e9 	call	0x1d220	; 0x1d220 <__mulsf3>
    51fa:	9b 01       	movw	r18, r22
    51fc:	ac 01       	movw	r20, r24
    51fe:	60 e8       	ldi	r22, 0x80	; 128
    5200:	76 e9       	ldi	r23, 0x96	; 150
    5202:	88 e9       	ldi	r24, 0x98	; 152
    5204:	9b e4       	ldi	r25, 0x4B	; 75
    5206:	0e 94 c1 e7 	call	0x1cf82	; 0x1cf82 <__divsf3>
    520a:	20 e0       	ldi	r18, 0x00	; 0
    520c:	30 e0       	ldi	r19, 0x00	; 0
    520e:	40 e8       	ldi	r20, 0x80	; 128
    5210:	5f e3       	ldi	r21, 0x3F	; 63
    5212:	0e 94 58 e7 	call	0x1ceb0	; 0x1ceb0 <__subsf3>
    5216:	0e 94 73 e9 	call	0x1d2e6	; 0x1d2e6 <round>
    521a:	0e 94 2e e8 	call	0x1d05c	; 0x1d05c <__fixunssfsi>
    521e:	6b 01       	movw	r12, r22
    5220:	7c 01       	movw	r14, r24
    5222:	c1 14       	cp	r12, r1
    5224:	80 e1       	ldi	r24, 0x10	; 16
    5226:	d8 06       	cpc	r13, r24
    5228:	e1 04       	cpc	r14, r1
    522a:	f1 04       	cpc	r15, r1
    522c:	58 f4       	brcc	.+22     	; 0x5244 <uart_ubr+0x7e>
    522e:	81 e0       	ldi	r24, 0x01	; 1
    5230:	90 e0       	ldi	r25, 0x00	; 0
    5232:	f5 01       	movw	r30, r10
    5234:	91 83       	std	Z+1, r25	; 0x01
    5236:	80 83       	st	Z, r24
    5238:	81 2c       	mov	r8, r1
    523a:	91 2c       	mov	r9, r1
    523c:	a1 2c       	mov	r10, r1
    523e:	21 e4       	ldi	r18, 0x41	; 65
    5240:	b2 2e       	mov	r11, r18
    5242:	31 c0       	rjmp	.+98     	; 0x52a6 <uart_ubr+0xe0>
    5244:	f5 01       	movw	r30, r10
    5246:	11 82       	std	Z+1, r1	; 0x01
    5248:	10 82       	st	Z, r1
    524a:	20 e0       	ldi	r18, 0x00	; 0
    524c:	30 e0       	ldi	r19, 0x00	; 0
    524e:	40 e8       	ldi	r20, 0x80	; 128
    5250:	51 e4       	ldi	r21, 0x41	; 65
    5252:	c3 01       	movw	r24, r6
    5254:	b2 01       	movw	r22, r4
    5256:	0e 94 10 e9 	call	0x1d220	; 0x1d220 <__mulsf3>
    525a:	9b 01       	movw	r18, r22
    525c:	ac 01       	movw	r20, r24
    525e:	60 e8       	ldi	r22, 0x80	; 128
    5260:	76 e9       	ldi	r23, 0x96	; 150
    5262:	88 e9       	ldi	r24, 0x98	; 152
    5264:	9b e4       	ldi	r25, 0x4B	; 75
    5266:	0e 94 c1 e7 	call	0x1cf82	; 0x1cf82 <__divsf3>
    526a:	20 e0       	ldi	r18, 0x00	; 0
    526c:	30 e0       	ldi	r19, 0x00	; 0
    526e:	40 e8       	ldi	r20, 0x80	; 128
    5270:	5f e3       	ldi	r21, 0x3F	; 63
    5272:	0e 94 58 e7 	call	0x1ceb0	; 0x1ceb0 <__subsf3>
    5276:	0e 94 73 e9 	call	0x1d2e6	; 0x1d2e6 <round>
    527a:	0e 94 2e e8 	call	0x1d05c	; 0x1d05c <__fixunssfsi>
    527e:	6b 01       	movw	r12, r22
    5280:	7c 01       	movw	r14, r24
    5282:	81 2c       	mov	r8, r1
    5284:	91 2c       	mov	r9, r1
    5286:	90 e8       	ldi	r25, 0x80	; 128
    5288:	a9 2e       	mov	r10, r25
    528a:	91 e4       	ldi	r25, 0x41	; 65
    528c:	b9 2e       	mov	r11, r25
    528e:	c1 14       	cp	r12, r1
    5290:	f0 e1       	ldi	r31, 0x10	; 16
    5292:	df 06       	cpc	r13, r31
    5294:	e1 04       	cpc	r14, r1
    5296:	f1 04       	cpc	r15, r1
    5298:	30 f0       	brcs	.+12     	; 0x52a6 <uart_ubr+0xe0>
    529a:	cc 24       	eor	r12, r12
    529c:	ca 94       	dec	r12
    529e:	8f e0       	ldi	r24, 0x0F	; 15
    52a0:	d8 2e       	mov	r13, r24
    52a2:	e1 2c       	mov	r14, r1
    52a4:	f1 2c       	mov	r15, r1
    52a6:	c7 01       	movw	r24, r14
    52a8:	b6 01       	movw	r22, r12
    52aa:	6f 5f       	subi	r22, 0xFF	; 255
    52ac:	7f 4f       	sbci	r23, 0xFF	; 255
    52ae:	8f 4f       	sbci	r24, 0xFF	; 255
    52b0:	9f 4f       	sbci	r25, 0xFF	; 255
    52b2:	0e 94 5a e8 	call	0x1d0b4	; 0x1d0b4 <__floatunsisf>
    52b6:	a5 01       	movw	r20, r10
    52b8:	94 01       	movw	r18, r8
    52ba:	0e 94 10 e9 	call	0x1d220	; 0x1d220 <__mulsf3>
    52be:	9b 01       	movw	r18, r22
    52c0:	ac 01       	movw	r20, r24
    52c2:	60 e8       	ldi	r22, 0x80	; 128
    52c4:	76 e9       	ldi	r23, 0x96	; 150
    52c6:	88 e9       	ldi	r24, 0x98	; 152
    52c8:	9b e4       	ldi	r25, 0x4B	; 75
    52ca:	0e 94 c1 e7 	call	0x1cf82	; 0x1cf82 <__divsf3>
    52ce:	0e 94 2e e8 	call	0x1d05c	; 0x1d05c <__fixunssfsi>
    52d2:	68 83       	st	Y, r22
    52d4:	79 83       	std	Y+1, r23	; 0x01
    52d6:	8a 83       	std	Y+2, r24	; 0x02
    52d8:	9b 83       	std	Y+3, r25	; 0x03
    52da:	c6 01       	movw	r24, r12
    52dc:	df 91       	pop	r29
    52de:	cf 91       	pop	r28
    52e0:	ff 90       	pop	r15
    52e2:	ef 90       	pop	r14
    52e4:	df 90       	pop	r13
    52e6:	cf 90       	pop	r12
    52e8:	bf 90       	pop	r11
    52ea:	af 90       	pop	r10
    52ec:	9f 90       	pop	r9
    52ee:	8f 90       	pop	r8
    52f0:	7f 90       	pop	r7
    52f2:	6f 90       	pop	r6
    52f4:	5f 90       	pop	r5
    52f6:	4f 90       	pop	r4
    52f8:	08 95       	ret

000052fa <uart_init>:
    52fa:	a6 e0       	ldi	r26, 0x06	; 6
    52fc:	b0 e0       	ldi	r27, 0x00	; 0
    52fe:	e3 e8       	ldi	r30, 0x83	; 131
    5300:	f9 e2       	ldi	r31, 0x29	; 41
    5302:	0c 94 0f e7 	jmp	0x1ce1e	; 0x1ce1e <__prologue_saves__+0x20>
    5306:	1e 82       	std	Y+6, r1	; 0x06
    5308:	1d 82       	std	Y+5, r1	; 0x05
    530a:	81 11       	cpse	r24, r1
    530c:	36 c0       	rjmp	.+108    	; 0x537a <uart_init+0x80>
    530e:	cb 01       	movw	r24, r22
    5310:	ba 01       	movw	r22, r20
    5312:	9e 01       	movw	r18, r28
    5314:	2f 5f       	subi	r18, 0xFF	; 255
    5316:	3f 4f       	sbci	r19, 0xFF	; 255
    5318:	ae 01       	movw	r20, r28
    531a:	4b 5f       	subi	r20, 0xFB	; 251
    531c:	5f 4f       	sbci	r21, 0xFF	; 255
    531e:	53 df       	rcall	.-346    	; 0x51c6 <uart_ubr>
    5320:	f8 94       	cli
    5322:	10 92 fb 19 	sts	0x19FB, r1	; 0x8019fb <uarts+0x4>
    5326:	10 92 fa 19 	sts	0x19FA, r1	; 0x8019fa <uarts+0x3>
    532a:	10 92 f7 19 	sts	0x19F7, r1	; 0x8019f7 <uarts>
    532e:	10 92 f8 19 	sts	0x19F8, r1	; 0x8019f8 <uarts+0x1>
    5332:	10 92 f9 19 	sts	0x19F9, r1	; 0x8019f9 <uarts+0x2>
    5336:	10 92 fc 19 	sts	0x19FC, r1	; 0x8019fc <uarts+0x5>
    533a:	78 94       	sei
    533c:	f8 94       	cli
    533e:	58 9a       	sbi	0x0b, 0	; 11
    5340:	59 9a       	sbi	0x0b, 1	; 11
    5342:	50 98       	cbi	0x0a, 0	; 10
    5344:	51 9a       	sbi	0x0a, 1	; 10
    5346:	28 e9       	ldi	r18, 0x98	; 152
    5348:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    534c:	2d 81       	ldd	r18, Y+5	; 0x05
    534e:	3e 81       	ldd	r19, Y+6	; 0x06
    5350:	23 2b       	or	r18, r19
    5352:	19 f0       	breq	.+6      	; 0x535a <uart_init+0x60>
    5354:	22 e0       	ldi	r18, 0x02	; 2
    5356:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    535a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    535e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    5362:	78 94       	sei
    5364:	66 e7       	ldi	r22, 0x76	; 118
    5366:	7a e2       	ldi	r23, 0x2A	; 42
    5368:	8b e8       	ldi	r24, 0x8B	; 139
    536a:	9a e2       	ldi	r25, 0x2A	; 42
    536c:	0e 94 e8 78 	call	0xf1d0	; 0xf1d0 <fdevopen>
    5370:	69 81       	ldd	r22, Y+1	; 0x01
    5372:	7a 81       	ldd	r23, Y+2	; 0x02
    5374:	8b 81       	ldd	r24, Y+3	; 0x03
    5376:	9c 81       	ldd	r25, Y+4	; 0x04
    5378:	03 c0       	rjmp	.+6      	; 0x5380 <uart_init+0x86>
    537a:	60 e0       	ldi	r22, 0x00	; 0
    537c:	70 e0       	ldi	r23, 0x00	; 0
    537e:	cb 01       	movw	r24, r22
    5380:	26 96       	adiw	r28, 0x06	; 6
    5382:	e2 e0       	ldi	r30, 0x02	; 2
    5384:	0c 94 2b e7 	jmp	0x1ce56	; 0x1ce56 <__epilogue_restores__+0x20>

00005388 <uart_rx_interrupt>:
    5388:	cf 93       	push	r28
    538a:	df 93       	push	r29
    538c:	27 e5       	ldi	r18, 0x57	; 87
    538e:	82 9f       	mul	r24, r18
    5390:	c0 01       	movw	r24, r0
    5392:	11 24       	eor	r1, r1
    5394:	fc 01       	movw	r30, r24
    5396:	e9 50       	subi	r30, 0x09	; 9
    5398:	f6 4e       	sbci	r31, 0xE6	; 230
    539a:	83 81       	ldd	r24, Z+3	; 0x03
    539c:	94 81       	ldd	r25, Z+4	; 0x04
    539e:	80 35       	cpi	r24, 0x50	; 80
    53a0:	91 05       	cpc	r25, r1
    53a2:	84 f4       	brge	.+32     	; 0x53c4 <uart_rx_interrupt+0x3c>
    53a4:	30 81       	ld	r19, Z
    53a6:	21 e0       	ldi	r18, 0x01	; 1
    53a8:	23 0f       	add	r18, r19
    53aa:	20 83       	st	Z, r18
    53ac:	ef 01       	movw	r28, r30
    53ae:	c3 0f       	add	r28, r19
    53b0:	d1 1d       	adc	r29, r1
    53b2:	6f 77       	andi	r22, 0x7F	; 127
    53b4:	6e 83       	std	Y+6, r22	; 0x06
    53b6:	01 96       	adiw	r24, 0x01	; 1
    53b8:	94 83       	std	Z+4, r25	; 0x04
    53ba:	83 83       	std	Z+3, r24	; 0x03
    53bc:	20 35       	cpi	r18, 0x50	; 80
    53be:	28 f0       	brcs	.+10     	; 0x53ca <uart_rx_interrupt+0x42>
    53c0:	10 82       	st	Z, r1
    53c2:	03 c0       	rjmp	.+6      	; 0x53ca <uart_rx_interrupt+0x42>
    53c4:	85 81       	ldd	r24, Z+5	; 0x05
    53c6:	81 60       	ori	r24, 0x01	; 1
    53c8:	85 83       	std	Z+5, r24	; 0x05
    53ca:	df 91       	pop	r29
    53cc:	cf 91       	pop	r28
    53ce:	08 95       	ret

000053d0 <__vector_20>:
    53d0:	1f 92       	push	r1
    53d2:	0f 92       	push	r0
    53d4:	0f b6       	in	r0, 0x3f	; 63
    53d6:	0f 92       	push	r0
    53d8:	11 24       	eor	r1, r1
    53da:	0b b6       	in	r0, 0x3b	; 59
    53dc:	0f 92       	push	r0
    53de:	2f 93       	push	r18
    53e0:	3f 93       	push	r19
    53e2:	4f 93       	push	r20
    53e4:	5f 93       	push	r21
    53e6:	6f 93       	push	r22
    53e8:	7f 93       	push	r23
    53ea:	8f 93       	push	r24
    53ec:	9f 93       	push	r25
    53ee:	af 93       	push	r26
    53f0:	bf 93       	push	r27
    53f2:	ef 93       	push	r30
    53f4:	ff 93       	push	r31
    53f6:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    53fa:	80 e0       	ldi	r24, 0x00	; 0
    53fc:	c5 df       	rcall	.-118    	; 0x5388 <uart_rx_interrupt>
    53fe:	ff 91       	pop	r31
    5400:	ef 91       	pop	r30
    5402:	bf 91       	pop	r27
    5404:	af 91       	pop	r26
    5406:	9f 91       	pop	r25
    5408:	8f 91       	pop	r24
    540a:	7f 91       	pop	r23
    540c:	6f 91       	pop	r22
    540e:	5f 91       	pop	r21
    5410:	4f 91       	pop	r20
    5412:	3f 91       	pop	r19
    5414:	2f 91       	pop	r18
    5416:	0f 90       	pop	r0
    5418:	0b be       	out	0x3b, r0	; 59
    541a:	0f 90       	pop	r0
    541c:	0f be       	out	0x3f, r0	; 63
    541e:	0f 90       	pop	r0
    5420:	1f 90       	pop	r1
    5422:	18 95       	reti

00005424 <uart_rx_count>:
/// @return  Character count in ring buffer.
int uart_rx_count(uint8_t uart)
{
    int count;

    if(uart >= UARTS)
    5424:	81 11       	cpse	r24, r1
    5426:	07 c0       	rjmp	.+14     	; 0x5436 <uart_rx_count+0x12>
        return(EOF);

    cli();
    5428:	f8 94       	cli

    count = uarts[uart].rx_count;
    542a:	80 91 fa 19 	lds	r24, 0x19FA	; 0x8019fa <uarts+0x3>
    542e:	90 91 fb 19 	lds	r25, 0x19FB	; 0x8019fb <uarts+0x4>

    sei();
    5432:	78 94       	sei

    return (count );
    5434:	08 95       	ret
int uart_rx_count(uint8_t uart)
{
    int count;

    if(uart >= UARTS)
        return(EOF);
    5436:	8f ef       	ldi	r24, 0xFF	; 255
    5438:	9f ef       	ldi	r25, 0xFF	; 255
    count = uarts[uart].rx_count;

    sei();

    return (count );
}
    543a:	08 95       	ret

0000543c <uart_get_tail>:
/// @see uart_rx_count().
int uart_get_tail(uint8_t uart)
{
    uint8_t c;

    if (uart >= UARTS)
    543c:	81 11       	cpse	r24, r1
    543e:	21 c0       	rjmp	.+66     	; 0x5482 <uart_get_tail+0x46>
    {
        return(EOF);
    }

    while(uart_rx_count(uart) < 1)
    5440:	80 e0       	ldi	r24, 0x00	; 0
    5442:	f0 df       	rcall	.-32     	; 0x5424 <uart_rx_count>
    5444:	18 16       	cp	r1, r24
    5446:	19 06       	cpc	r1, r25
    5448:	dc f7       	brge	.-10     	; 0x5440 <uart_get_tail+0x4>
        ;

    cli();
    544a:	f8 94       	cli
    c = uarts[uart].rx_buf[uarts[uart].rx_tail++];
    544c:	e0 91 f8 19 	lds	r30, 0x19F8	; 0x8019f8 <uarts+0x1>
    5450:	91 e0       	ldi	r25, 0x01	; 1
    5452:	9e 0f       	add	r25, r30
    5454:	90 93 f8 19 	sts	0x19F8, r25	; 0x8019f8 <uarts+0x1>
    5458:	f0 e0       	ldi	r31, 0x00	; 0
    545a:	e9 50       	subi	r30, 0x09	; 9
    545c:	f6 4e       	sbci	r31, 0xE6	; 230
    545e:	86 81       	ldd	r24, Z+6	; 0x06
    if (uarts[uart].rx_tail >= RX_BUF_SIZE)
    5460:	90 35       	cpi	r25, 0x50	; 80
    5462:	10 f0       	brcs	.+4      	; 0x5468 <uart_get_tail+0x2c>
        uarts[uart].rx_tail = 0;
    5464:	10 92 f8 19 	sts	0x19F8, r1	; 0x8019f8 <uarts+0x1>
    uarts[uart].rx_count--;
    5468:	20 91 fa 19 	lds	r18, 0x19FA	; 0x8019fa <uarts+0x3>
    546c:	30 91 fb 19 	lds	r19, 0x19FB	; 0x8019fb <uarts+0x4>
    5470:	21 50       	subi	r18, 0x01	; 1
    5472:	31 09       	sbc	r19, r1
    5474:	30 93 fb 19 	sts	0x19FB, r19	; 0x8019fb <uarts+0x4>
    5478:	20 93 fa 19 	sts	0x19FA, r18	; 0x8019fa <uarts+0x3>
    sei();
    547c:	78 94       	sei

    return (c & 0xff);
    547e:	90 e0       	ldi	r25, 0x00	; 0
    5480:	08 95       	ret
{
    uint8_t c;

    if (uart >= UARTS)
    {
        return(EOF);
    5482:	8f ef       	ldi	r24, 0xFF	; 255
    5484:	9f ef       	ldi	r25, 0xFF	; 255
        uarts[uart].rx_tail = 0;
    uarts[uart].rx_count--;
    sei();

    return (c & 0xff);
}
    5486:	08 95       	ret

00005488 <uart_rx_byte>:
/// @param[in] uart: uart number.
///
/// @return  Character.
int uart_rx_byte(uint8_t uart)
{
    return( uart_get_tail(uart) & 0xff);
    5488:	d9 df       	rcall	.-78     	; 0x543c <uart_get_tail>
}
    548a:	99 27       	eor	r25, r25
    548c:	08 95       	ret

0000548e <uart_tx_byte>:
/// @param[in] uart: uart number.
///
/// @return void.
int uart_tx_byte(int c, uint8_t uart)
{
    if(uart == 0)
    548e:	61 11       	cpse	r22, r1
    5490:	09 c0       	rjmp	.+18     	; 0x54a4 <uart_tx_byte+0x16>
    {
        while (!BIT_TST(UCSR0A, UDRE0))
    5492:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    5496:	25 ff       	sbrs	r18, 5
    5498:	fc cf       	rjmp	.-8      	; 0x5492 <uart_tx_byte+0x4>
            ;
        UDR0 = c & 0x7f;
    549a:	28 2f       	mov	r18, r24
    549c:	2f 77       	andi	r18, 0x7F	; 127
    549e:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
        return(c);
    54a2:	08 95       	ret
    }
#ifdef UARTS > 1
    if(uart == 1)
    54a4:	61 30       	cpi	r22, 0x01	; 1
    54a6:	49 f4       	brne	.+18     	; 0x54ba <uart_tx_byte+0x2c>
    {
        while (!BIT_TST(UCSR1A, UDRE1))
    54a8:	20 91 c8 00 	lds	r18, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    54ac:	25 ff       	sbrs	r18, 5
    54ae:	fc cf       	rjmp	.-8      	; 0x54a8 <uart_tx_byte+0x1a>
            ;
        UDR1 = c & 0x7f;
    54b0:	28 2f       	mov	r18, r24
    54b2:	2f 77       	andi	r18, 0x7F	; 127
    54b4:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    54b8:	08 95       	ret
        return(c);
    }
#endif
    return(EOF);
    54ba:	8f ef       	ldi	r24, 0xFF	; 255
    54bc:	9f ef       	ldi	r25, 0xFF	; 255
}
    54be:	08 95       	ret

000054c0 <uart_getchar>:
///
/// @param[in] uart: uart number.
///
/// @return  Character.
int uart_getchar(uint8_t uart)
{
    54c0:	cf 93       	push	r28
    uint8_t c;

    if(uart >= UARTS)
    54c2:	81 11       	cpse	r24, r1
    54c4:	0f c0       	rjmp	.+30     	; 0x54e4 <uart_getchar+0x24>
        break;
    }
    if(c == '\r')
        c = '\n';
#endif
    c = uart_rx_byte(uart);
    54c6:	e0 df       	rcall	.-64     	; 0x5488 <uart_rx_byte>
    54c8:	c8 2f       	mov	r28, r24
    uart_tx_byte(c, uart);
    54ca:	60 e0       	ldi	r22, 0x00	; 0
    54cc:	90 e0       	ldi	r25, 0x00	; 0
    54ce:	df df       	rcall	.-66     	; 0x548e <uart_tx_byte>
    if(c == '\r')
    54d0:	cd 30       	cpi	r28, 0x0D	; 13
    54d2:	29 f4       	brne	.+10     	; 0x54de <uart_getchar+0x1e>
    {
        c = '\n';
        uart_tx_byte(c, uart);
    54d4:	60 e0       	ldi	r22, 0x00	; 0
    54d6:	8a e0       	ldi	r24, 0x0A	; 10
    54d8:	90 e0       	ldi	r25, 0x00	; 0
    54da:	d9 df       	rcall	.-78     	; 0x548e <uart_tx_byte>
#endif
    c = uart_rx_byte(uart);
    uart_tx_byte(c, uart);
    if(c == '\r')
    {
        c = '\n';
    54dc:	ca e0       	ldi	r28, 0x0A	; 10
        uart_tx_byte(c, uart);
    }
//FIXME ECHO
    return (c);
    54de:	8c 2f       	mov	r24, r28
    54e0:	90 e0       	ldi	r25, 0x00	; 0
    54e2:	02 c0       	rjmp	.+4      	; 0x54e8 <uart_getchar+0x28>
int uart_getchar(uint8_t uart)
{
    uint8_t c;

    if(uart >= UARTS)
        return(EOF);
    54e4:	8f ef       	ldi	r24, 0xFF	; 255
    54e6:	9f ef       	ldi	r25, 0xFF	; 255
        c = '\n';
        uart_tx_byte(c, uart);
    }
//FIXME ECHO
    return (c);
}
    54e8:	cf 91       	pop	r28
    54ea:	08 95       	ret

000054ec <uart0_getchar>:
///
/// @return  uart_getchar(0);.
/// @see fdevopen() from avr-libc.
int uart0_getchar( void *f  __attribute__((unused)))
{
    return( uart_getchar(0) );
    54ec:	80 e0       	ldi	r24, 0x00	; 0
    54ee:	e8 cf       	rjmp	.-48     	; 0x54c0 <uart_getchar>
}
    54f0:	08 95       	ret

000054f2 <uart_putchar>:
/// @param[in] c: transmit character.
/// @param[in] uart: uart number.
///
/// @return void.
int uart_putchar(int c, int uart)
{
    54f2:	1f 93       	push	r17
    54f4:	cf 93       	push	r28
    54f6:	df 93       	push	r29
    54f8:	ec 01       	movw	r28, r24
    54fa:	16 2f       	mov	r17, r22
    uart_tx_byte(c, uart);
    54fc:	c8 df       	rcall	.-112    	; 0x548e <uart_tx_byte>

    if( c == '\n' )
    54fe:	ca 30       	cpi	r28, 0x0A	; 10
    5500:	d1 05       	cpc	r29, r1
    5502:	21 f4       	brne	.+8      	; 0x550c <uart_putchar+0x1a>
        uart_tx_byte('\r', uart);
    5504:	61 2f       	mov	r22, r17
    5506:	8d e0       	ldi	r24, 0x0D	; 13
    5508:	90 e0       	ldi	r25, 0x00	; 0
    550a:	c1 df       	rcall	.-126    	; 0x548e <uart_tx_byte>

    return(c);
}
    550c:	ce 01       	movw	r24, r28
    550e:	df 91       	pop	r29
    5510:	cf 91       	pop	r28
    5512:	1f 91       	pop	r17
    5514:	08 95       	ret

00005516 <uart0_putchar>:
/// @param[in] f: unused FILE *stream pointer.
///
/// @return  uart_putchar(c, 0);.
/// @see fdevopen() from avr-libc.
int uart0_putchar(int c, void *f  __attribute__((unused)))
{
    5516:	cf 93       	push	r28
    5518:	df 93       	push	r29
    551a:	ec 01       	movw	r28, r24
    uart_putchar(c, 0);
    551c:	60 e0       	ldi	r22, 0x00	; 0
    551e:	70 e0       	ldi	r23, 0x00	; 0
    5520:	e8 df       	rcall	.-48     	; 0x54f2 <uart_putchar>
    return(c);
}
    5522:	ce 01       	movw	r24, r28
    5524:	df 91       	pop	r29
    5526:	cf 91       	pop	r28
    5528:	08 95       	ret

0000552a <uart_keyhit>:
/// @param[in] uart: uart number.
///
/// @return  Character count in receive buffer.
int uart_keyhit(uint8_t uart)
{
    return ( uart_rx_count( uart ) );
    552a:	7c cf       	rjmp	.-264    	; 0x5424 <uart_rx_count>
}
    552c:	08 95       	ret

0000552e <SPI0_Speed>:
/// @brief  Return saved SPI mode as set by SPI0_Mode().
/// @return  saved mode.
int SPI0_Get_Mode( void )
{
    return(SPI0_Mode_value);
}
    552e:	cf 92       	push	r12
    5530:	df 92       	push	r13
    5532:	ef 92       	push	r14
    5534:	ff 92       	push	r15
    5536:	6b 01       	movw	r12, r22
    5538:	7c 01       	movw	r14, r24
    553a:	80 91 59 17 	lds	r24, 0x1759	; 0x801759 <SPI0_Speed_value>
    553e:	90 91 5a 17 	lds	r25, 0x175A	; 0x80175a <SPI0_Speed_value+0x1>
    5542:	a0 91 5b 17 	lds	r26, 0x175B	; 0x80175b <SPI0_Speed_value+0x2>
    5546:	b0 91 5c 17 	lds	r27, 0x175C	; 0x80175c <SPI0_Speed_value+0x3>
    554a:	8c 15       	cp	r24, r12
    554c:	9d 05       	cpc	r25, r13
    554e:	ae 05       	cpc	r26, r14
    5550:	bf 05       	cpc	r27, r15
    5552:	09 f4       	brne	.+2      	; 0x5556 <SPI0_Speed+0x28>
    5554:	4e c0       	rjmp	.+156    	; 0x55f2 <SPI0_Speed+0xc4>
    5556:	60 e0       	ldi	r22, 0x00	; 0
    5558:	7d e2       	ldi	r23, 0x2D	; 45
    555a:	81 e3       	ldi	r24, 0x31	; 49
    555c:	91 e0       	ldi	r25, 0x01	; 1
    555e:	a7 01       	movw	r20, r14
    5560:	96 01       	movw	r18, r12
    5562:	0e 94 92 e6 	call	0x1cd24	; 0x1cd24 <__udivmodsi4>
    5566:	20 38       	cpi	r18, 0x80	; 128
    5568:	31 05       	cpc	r19, r1
    556a:	41 05       	cpc	r20, r1
    556c:	51 05       	cpc	r21, r1
    556e:	28 f4       	brcc	.+10     	; 0x557a <SPI0_Speed+0x4c>
    5570:	20 34       	cpi	r18, 0x40	; 64
    5572:	31 05       	cpc	r19, r1
    5574:	41 05       	cpc	r20, r1
    5576:	51 05       	cpc	r21, r1
    5578:	30 f0       	brcs	.+12     	; 0x5586 <SPI0_Speed+0x58>
    557a:	8d b5       	in	r24, 0x2d	; 45
    557c:	8e 7f       	andi	r24, 0xFE	; 254
    557e:	8d bd       	out	0x2d, r24	; 45
    5580:	8c b5       	in	r24, 0x2c	; 44
    5582:	82 60       	ori	r24, 0x02	; 2
    5584:	1b c0       	rjmp	.+54     	; 0x55bc <SPI0_Speed+0x8e>
    5586:	8d b5       	in	r24, 0x2d	; 45
    5588:	20 32       	cpi	r18, 0x20	; 32
    558a:	31 05       	cpc	r19, r1
    558c:	41 05       	cpc	r20, r1
    558e:	51 05       	cpc	r21, r1
    5590:	28 f0       	brcs	.+10     	; 0x559c <SPI0_Speed+0x6e>
    5592:	81 60       	ori	r24, 0x01	; 1
    5594:	8d bd       	out	0x2d, r24	; 45
    5596:	8c b5       	in	r24, 0x2c	; 44
    5598:	82 60       	ori	r24, 0x02	; 2
    559a:	1f c0       	rjmp	.+62     	; 0x55da <SPI0_Speed+0xac>
    559c:	20 31       	cpi	r18, 0x10	; 16
    559e:	31 05       	cpc	r19, r1
    55a0:	41 05       	cpc	r20, r1
    55a2:	51 05       	cpc	r21, r1
    55a4:	10 f0       	brcs	.+4      	; 0x55aa <SPI0_Speed+0x7c>
    55a6:	8e 7f       	andi	r24, 0xFE	; 254
    55a8:	06 c0       	rjmp	.+12     	; 0x55b6 <SPI0_Speed+0x88>
    55aa:	28 30       	cpi	r18, 0x08	; 8
    55ac:	31 05       	cpc	r19, r1
    55ae:	41 05       	cpc	r20, r1
    55b0:	51 05       	cpc	r21, r1
    55b2:	40 f0       	brcs	.+16     	; 0x55c4 <SPI0_Speed+0x96>
    55b4:	81 60       	ori	r24, 0x01	; 1
    55b6:	8d bd       	out	0x2d, r24	; 45
    55b8:	8c b5       	in	r24, 0x2c	; 44
    55ba:	8d 7f       	andi	r24, 0xFD	; 253
    55bc:	8c bd       	out	0x2c, r24	; 44
    55be:	8c b5       	in	r24, 0x2c	; 44
    55c0:	81 60       	ori	r24, 0x01	; 1
    55c2:	0e c0       	rjmp	.+28     	; 0x55e0 <SPI0_Speed+0xb2>
    55c4:	24 30       	cpi	r18, 0x04	; 4
    55c6:	31 05       	cpc	r19, r1
    55c8:	41 05       	cpc	r20, r1
    55ca:	51 05       	cpc	r21, r1
    55cc:	10 f0       	brcs	.+4      	; 0x55d2 <SPI0_Speed+0xa4>
    55ce:	8e 7f       	andi	r24, 0xFE	; 254
    55d0:	01 c0       	rjmp	.+2      	; 0x55d4 <SPI0_Speed+0xa6>
    55d2:	81 60       	ori	r24, 0x01	; 1
    55d4:	8d bd       	out	0x2d, r24	; 45
    55d6:	8c b5       	in	r24, 0x2c	; 44
    55d8:	8d 7f       	andi	r24, 0xFD	; 253
    55da:	8c bd       	out	0x2c, r24	; 44
    55dc:	8c b5       	in	r24, 0x2c	; 44
    55de:	8e 7f       	andi	r24, 0xFE	; 254
    55e0:	8c bd       	out	0x2c, r24	; 44
    55e2:	c0 92 59 17 	sts	0x1759, r12	; 0x801759 <SPI0_Speed_value>
    55e6:	d0 92 5a 17 	sts	0x175A, r13	; 0x80175a <SPI0_Speed_value+0x1>
    55ea:	e0 92 5b 17 	sts	0x175B, r14	; 0x80175b <SPI0_Speed_value+0x2>
    55ee:	f0 92 5c 17 	sts	0x175C, r15	; 0x80175c <SPI0_Speed_value+0x3>
    55f2:	ff 90       	pop	r15
    55f4:	ef 90       	pop	r14
    55f6:	df 90       	pop	r13
    55f8:	cf 90       	pop	r12
    55fa:	08 95       	ret

000055fc <SPI0_Mode>:
    55fc:	cf 93       	push	r28
    55fe:	df 93       	push	r29
    5600:	00 d0       	rcall	.+0      	; 0x5602 <SPI0_Mode+0x6>
    5602:	00 d0       	rcall	.+0      	; 0x5604 <SPI0_Mode+0x8>
    5604:	1f 92       	push	r1
    5606:	ec 01       	movw	r28, r24
    5608:	81 30       	cpi	r24, 0x01	; 1
    560a:	91 05       	cpc	r25, r1
    560c:	71 f0       	breq	.+28     	; 0x562a <SPI0_Mode+0x2e>
    560e:	2c f4       	brge	.+10     	; 0x561a <SPI0_Mode+0x1e>
    5610:	89 2b       	or	r24, r25
    5612:	c1 f4       	brne	.+48     	; 0x5644 <SPI0_Mode+0x48>
    5614:	8c b5       	in	r24, 0x2c	; 44
    5616:	87 7f       	andi	r24, 0xF7	; 247
    5618:	11 c0       	rjmp	.+34     	; 0x563c <SPI0_Mode+0x40>
    561a:	82 30       	cpi	r24, 0x02	; 2
    561c:	91 05       	cpc	r25, r1
    561e:	61 f0       	breq	.+24     	; 0x5638 <SPI0_Mode+0x3c>
    5620:	03 97       	sbiw	r24, 0x03	; 3
    5622:	81 f4       	brne	.+32     	; 0x5644 <SPI0_Mode+0x48>
    5624:	8c b5       	in	r24, 0x2c	; 44
    5626:	88 60       	ori	r24, 0x08	; 8
    5628:	02 c0       	rjmp	.+4      	; 0x562e <SPI0_Mode+0x32>
    562a:	8c b5       	in	r24, 0x2c	; 44
    562c:	87 7f       	andi	r24, 0xF7	; 247
    562e:	8c bd       	out	0x2c, r24	; 44
    5630:	8c b5       	in	r24, 0x2c	; 44
    5632:	84 60       	ori	r24, 0x04	; 4
    5634:	8c bd       	out	0x2c, r24	; 44
    5636:	12 c0       	rjmp	.+36     	; 0x565c <SPI0_Mode+0x60>
    5638:	8c b5       	in	r24, 0x2c	; 44
    563a:	88 60       	ori	r24, 0x08	; 8
    563c:	8c bd       	out	0x2c, r24	; 44
    563e:	8c b5       	in	r24, 0x2c	; 44
    5640:	8b 7f       	andi	r24, 0xFB	; 251
    5642:	f8 cf       	rjmp	.-16     	; 0x5634 <SPI0_Mode+0x38>
    5644:	ed b7       	in	r30, 0x3d	; 61
    5646:	fe b7       	in	r31, 0x3e	; 62
    5648:	d5 83       	std	Z+5, r29	; 0x05
    564a:	c4 83       	std	Z+4, r28	; 0x04
    564c:	84 e1       	ldi	r24, 0x14	; 20
    564e:	93 e0       	ldi	r25, 0x03	; 3
    5650:	a0 e0       	ldi	r26, 0x00	; 0
    5652:	81 83       	std	Z+1, r24	; 0x01
    5654:	92 83       	std	Z+2, r25	; 0x02
    5656:	a3 83       	std	Z+3, r26	; 0x03
    5658:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    565c:	d0 93 58 17 	sts	0x1758, r29	; 0x801758 <SPI0_Mode_value+0x1>
    5660:	c0 93 57 17 	sts	0x1757, r28	; 0x801757 <SPI0_Mode_value>
    5664:	cd b7       	in	r28, 0x3d	; 61
    5666:	de b7       	in	r29, 0x3e	; 62
    5668:	25 96       	adiw	r28, 0x05	; 5
    566a:	e2 e0       	ldi	r30, 0x02	; 2
    566c:	0c 94 2b e7 	jmp	0x1ce56	; 0x1ce56 <__epilogue_restores__+0x20>

00005670 <SPI0_TXRX_Byte>:
/// @param[in] Data: Data to send.
///
/// @return  Data received.
uint8_t SPI0_TXRX_Byte(uint8_t Data)
{
    SPDR = Data;                                  // Transmit
    5670:	8e bd       	out	0x2e, r24	; 46

    while( !BIT_TST(SPSR,SPIF) )                  // Wait for send
    5672:	0d b4       	in	r0, 0x2d	; 45
    5674:	07 fe       	sbrs	r0, 7
    5676:	fd cf       	rjmp	.-6      	; 0x5672 <SPI0_TXRX_Byte+0x2>
        ;

    return (SPDR);                                // Received Data
    5678:	8e b5       	in	r24, 0x2e	; 46
}
    567a:	08 95       	ret

0000567c <SPI0_Init>:

///@brief Initialize SPI0 device.
/// See Atmel App Note AVR151
/// Set default speed, IO pins and mode.
void SPI0_Init(uint32_t speed)
{
    567c:	cf 92       	push	r12
    567e:	df 92       	push	r13
    5680:	ef 92       	push	r14
    5682:	ff 92       	push	r15
    5684:	cf 93       	push	r28
    5686:	df 93       	push	r29
    5688:	1f 92       	push	r1
    568a:	cd b7       	in	r28, 0x3d	; 61
    568c:	de b7       	in	r29, 0x3e	; 62
    568e:	6b 01       	movw	r12, r22
    5690:	7c 01       	movw	r14, r24
    printf("Port B DDR:   0x%02x\n", (int) GPIO_PORT_DDR_RD(GPIO_B));
    printf("Port B LATCH: 0x%02x\n", (int) GPIO_PORT_LATCH_RD(GPIO_B));
    printf("Port B PINS:  0x%02x\n", (int) GPIO_PORT_LATCH_RD(GPIO_B));
#endif

    SPCR = 0;                                     // Clear SPCR in case we are not called after RESET
    5692:	1c bc       	out	0x2c, r1	; 44

    GPIO_PIN_HI(SCK);                             // SCK Output
    5694:	2f 9a       	sbi	0x05, 7	; 5
    5696:	27 9a       	sbi	0x04, 7	; 4
    GPIO_PIN_HI(MOSI);                            // MOSI Output
    5698:	2d 9a       	sbi	0x05, 5	; 5
    569a:	25 9a       	sbi	0x04, 5	; 4
    GPIO_PIN_FLOAT(MISO);                         // MISO Input, no pull-up
    569c:	26 98       	cbi	0x04, 6	; 4

// Warning *** MSTR MUST be set BEFORE SPE!!!! *** otherwise SS will NOT behave as an output
    GPIO_PIN_LOW(SS);                             // SS Output must be HI prevent slave mode from getting set while initializing
    569e:	2c 98       	cbi	0x05, 4	; 5
    56a0:	24 9a       	sbi	0x04, 4	; 4
    BIT_SET(SPCR, MSTR);                          // Master Mode
    56a2:	8c b5       	in	r24, 0x2c	; 44
    56a4:	80 61       	ori	r24, 0x10	; 16
    56a6:	8c bd       	out	0x2c, r24	; 44
    BIT_SET(SPCR, SPE);                           // Enable SPI
    56a8:	8c b5       	in	r24, 0x2c	; 44
    56aa:	80 64       	ori	r24, 0x40	; 64
    56ac:	8c bd       	out	0x2c, r24	; 44

// SPI Clear any pending interrupt flags
    D = SPSR;
    56ae:	8d b5       	in	r24, 0x2d	; 45
    56b0:	89 83       	std	Y+1, r24	; 0x01
    D = SPDR;
    56b2:	8e b5       	in	r24, 0x2e	; 46
    56b4:	89 83       	std	Y+1, r24	; 0x01

/// Set SPI clock mode 0
///  SPI Mode     CPOL    CPHA            Sample
///  0    0       0       Leading (Rising)   Edge
    SPI0_Mode(0);
    56b6:	80 e0       	ldi	r24, 0x00	; 0
    56b8:	90 e0       	ldi	r25, 0x00	; 0
    56ba:	a0 df       	rcall	.-192    	; 0x55fc <SPI0_Mode>

// Set SPI clock speed
    SPI0_Speed(speed);
    56bc:	c7 01       	movw	r24, r14
    56be:	b6 01       	movw	r22, r12
    56c0:	36 df       	rcall	.-404    	; 0x552e <SPI0_Speed>

    SPI0_TXRX_Byte(0xff);                         // Send dummy 0xFF
    56c2:	8f ef       	ldi	r24, 0xFF	; 255
    56c4:	d5 df       	rcall	.-86     	; 0x5670 <SPI0_TXRX_Byte>
    56c6:	0f 90       	pop	r0
    SPI0_Init_state = 1;

}
    56c8:	df 91       	pop	r29
    56ca:	cf 91       	pop	r28
    56cc:	ff 90       	pop	r15
    56ce:	ef 90       	pop	r14
    56d0:	df 90       	pop	r13
    56d2:	cf 90       	pop	r12
    56d4:	08 95       	ret

000056d6 <SPI0_TX>:
    56d6:	0f 93       	push	r16
/// @brief HSPI write using FIFO
/// @param[in] *data: transmit buffer
/// @param[in] count: number of bytes to write
/// @return  void
void SPI0_TX(uint8_t *data, int count)
{
    56d8:	1f 93       	push	r17
    56da:	cf 93       	push	r28
    56dc:	df 93       	push	r29
    56de:	8c 01       	movw	r16, r24
    56e0:	eb 01       	movw	r28, r22

    while(count > 0)
    56e2:	1c 16       	cp	r1, r28
    56e4:	1d 06       	cpc	r1, r29
    56e6:	34 f4       	brge	.+12     	; 0x56f4 <SPI0_TX+0x1e>
    {
        SPI0_TXRX_Byte(*data);
    56e8:	f8 01       	movw	r30, r16
    56ea:	81 91       	ld	r24, Z+
    56ec:	8f 01       	movw	r16, r30
    56ee:	c0 df       	rcall	.-128    	; 0x5670 <SPI0_TXRX_Byte>
        ++data;
        --count;
    56f0:	21 97       	sbiw	r28, 0x01	; 1
    56f2:	f7 cf       	rjmp	.-18     	; 0x56e2 <SPI0_TX+0xc>
    }
}
    56f4:	df 91       	pop	r29
    56f6:	cf 91       	pop	r28
    56f8:	1f 91       	pop	r17
    56fa:	0f 91       	pop	r16
    56fc:	08 95       	ret

000056fe <SPI0_TXRX>:
/// @param[in] *data: transmit / receive buffer
/// @param[in] count: number of bytes to write / read
/// @return  void

void SPI0_TXRX(uint8_t *data, int count)
{
    56fe:	0f 93       	push	r16
    5700:	1f 93       	push	r17
    5702:	cf 93       	push	r28
    5704:	df 93       	push	r29
    5706:	8c 01       	movw	r16, r24
    5708:	eb 01       	movw	r28, r22

    while(count > 0)
    570a:	1c 16       	cp	r1, r28
    570c:	1d 06       	cpc	r1, r29
    570e:	44 f4       	brge	.+16     	; 0x5720 <SPI0_TXRX+0x22>
    {
        *data = SPI0_TXRX_Byte(*data);
    5710:	f8 01       	movw	r30, r16
    5712:	80 81       	ld	r24, Z
    5714:	ad df       	rcall	.-166    	; 0x5670 <SPI0_TXRX_Byte>
    5716:	f8 01       	movw	r30, r16
    5718:	81 93       	st	Z+, r24
    571a:	8f 01       	movw	r16, r30
        ++data;
        --count;
    571c:	21 97       	sbiw	r28, 0x01	; 1
    571e:	f5 cf       	rjmp	.-22     	; 0x570a <SPI0_TXRX+0xc>
    }
}
    5720:	df 91       	pop	r29
    5722:	cf 91       	pop	r28
    5724:	1f 91       	pop	r17
    5726:	0f 91       	pop	r16
    5728:	08 95       	ret

0000572a <SPI0_RX>:
/// @brief HSPI read using FIFO
/// @param[in] *data: receive buffer
/// @param[in] count: number of bytes to read
/// @return  void
void SPI0_RX(uint8_t *data, int count)
{
    572a:	0f 93       	push	r16
    572c:	1f 93       	push	r17
    572e:	cf 93       	push	r28
    5730:	df 93       	push	r29
    5732:	8c 01       	movw	r16, r24
    5734:	eb 01       	movw	r28, r22

    while(count > 0)
    5736:	1c 16       	cp	r1, r28
    5738:	1d 06       	cpc	r1, r29
    573a:	3c f4       	brge	.+14     	; 0x574a <SPI0_RX+0x20>
    {
        *data = SPI0_TXRX_Byte(0xff);
    573c:	8f ef       	ldi	r24, 0xFF	; 255
    573e:	98 df       	rcall	.-208    	; 0x5670 <SPI0_TXRX_Byte>
    5740:	f8 01       	movw	r30, r16
    5742:	81 93       	st	Z+, r24
    5744:	8f 01       	movw	r16, r30
        ++data;
        --count;
    5746:	21 97       	sbiw	r28, 0x01	; 1
    5748:	f6 cf       	rjmp	.-20     	; 0x5736 <SPI0_RX+0xc>
    }
}
    574a:	df 91       	pop	r29
    574c:	cf 91       	pop	r28
    574e:	1f 91       	pop	r17
    5750:	0f 91       	pop	r16
    5752:	08 95       	ret

00005754 <i2c_timer>:
int8_t i2c_ok()
{
	if (i2c.flags) 
		return(0);
	return(1);
}
    5754:	2f b7       	in	r18, 0x3f	; 63
    5756:	80 91 4f 1a 	lds	r24, 0x1A4F	; 0x801a4f <i2c+0x1>
    575a:	81 11       	cpse	r24, r1
    575c:	04 c0       	rjmp	.+8      	; 0x5766 <i2c_timer+0x12>
    575e:	80 91 50 1a 	lds	r24, 0x1A50	; 0x801a50 <i2c+0x2>
    5762:	81 11       	cpse	r24, r1
    5764:	0b c0       	rjmp	.+22     	; 0x577c <i2c_timer+0x28>
    5766:	80 91 52 1a 	lds	r24, 0x1A52	; 0x801a52 <i2c+0x4>
    576a:	90 91 53 1a 	lds	r25, 0x1A53	; 0x801a53 <i2c+0x5>
    576e:	00 97       	sbiw	r24, 0x00	; 0
    5770:	29 f0       	breq	.+10     	; 0x577c <i2c_timer+0x28>
    5772:	01 97       	sbiw	r24, 0x01	; 1
    5774:	90 93 53 1a 	sts	0x1A53, r25	; 0x801a53 <i2c+0x5>
    5778:	80 93 52 1a 	sts	0x1A52, r24	; 0x801a52 <i2c+0x4>
    577c:	2f bf       	out	0x3f, r18	; 63
    577e:	08 95       	ret

00005780 <i2c_check_op>:
    5780:	ad b7       	in	r26, 0x3d	; 61
    5782:	be b7       	in	r27, 0x3e	; 62
    5784:	17 97       	sbiw	r26, 0x07	; 7
    5786:	0f b6       	in	r0, 0x3f	; 63
    5788:	f8 94       	cli
    578a:	be bf       	out	0x3e, r27	; 62
    578c:	0f be       	out	0x3f, r0	; 63
    578e:	ad bf       	out	0x3d, r26	; 61
    5790:	28 2f       	mov	r18, r24
    5792:	08 2e       	mov	r0, r24
    5794:	00 0c       	add	r0, r0
    5796:	33 0b       	sbc	r19, r19
    5798:	80 31       	cpi	r24, 0x10	; 16
    579a:	88 f0       	brcs	.+34     	; 0x57be <i2c_check_op+0x3e>
    579c:	80 e1       	ldi	r24, 0x10	; 16
    579e:	90 e0       	ldi	r25, 0x00	; 0
    57a0:	ed b7       	in	r30, 0x3d	; 61
    57a2:	fe b7       	in	r31, 0x3e	; 62
    57a4:	97 83       	std	Z+7, r25	; 0x07
    57a6:	86 83       	std	Z+6, r24	; 0x06
    57a8:	35 83       	std	Z+5, r19	; 0x05
    57aa:	24 83       	std	Z+4, r18	; 0x04
    57ac:	89 e2       	ldi	r24, 0x29	; 41
    57ae:	94 e0       	ldi	r25, 0x04	; 4
    57b0:	a0 e0       	ldi	r26, 0x00	; 0
    57b2:	81 83       	std	Z+1, r24	; 0x01
    57b4:	92 83       	std	Z+2, r25	; 0x02
    57b6:	a3 83       	std	Z+3, r26	; 0x03
    57b8:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    57bc:	24 c0       	rjmp	.+72     	; 0x5806 <i2c_check_op+0x86>
    57be:	f9 01       	movw	r30, r18
    57c0:	ee 0f       	add	r30, r30
    57c2:	ff 1f       	adc	r31, r31
    57c4:	e2 5a       	subi	r30, 0xA2	; 162
    57c6:	f8 4e       	sbci	r31, 0xE8	; 232
    57c8:	01 90       	ld	r0, Z+
    57ca:	f0 81       	ld	r31, Z
    57cc:	e0 2d       	mov	r30, r0
    57ce:	30 97       	sbiw	r30, 0x00	; 0
    57d0:	d1 f0       	breq	.+52     	; 0x5806 <i2c_check_op+0x86>
    57d2:	80 85       	ldd	r24, Z+8	; 0x08
    57d4:	91 85       	ldd	r25, Z+9	; 0x09
    57d6:	89 2b       	or	r24, r25
    57d8:	39 f4       	brne	.+14     	; 0x57e8 <i2c_check_op+0x68>
    57da:	ed b7       	in	r30, 0x3d	; 61
    57dc:	fe b7       	in	r31, 0x3e	; 62
    57de:	35 83       	std	Z+5, r19	; 0x05
    57e0:	24 83       	std	Z+4, r18	; 0x04
    57e2:	80 e1       	ldi	r24, 0x10	; 16
    57e4:	94 e0       	ldi	r25, 0x04	; 4
    57e6:	09 c0       	rjmp	.+18     	; 0x57fa <i2c_check_op+0x7a>
    57e8:	86 81       	ldd	r24, Z+6	; 0x06
    57ea:	81 11       	cpse	r24, r1
    57ec:	0e c0       	rjmp	.+28     	; 0x580a <i2c_check_op+0x8a>
    57ee:	ed b7       	in	r30, 0x3d	; 61
    57f0:	fe b7       	in	r31, 0x3e	; 62
    57f2:	35 83       	std	Z+5, r19	; 0x05
    57f4:	24 83       	std	Z+4, r18	; 0x04
    57f6:	8a ef       	ldi	r24, 0xFA	; 250
    57f8:	93 e0       	ldi	r25, 0x03	; 3
    57fa:	a0 e0       	ldi	r26, 0x00	; 0
    57fc:	81 83       	std	Z+1, r24	; 0x01
    57fe:	92 83       	std	Z+2, r25	; 0x02
    5800:	a3 83       	std	Z+3, r26	; 0x03
    5802:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    5806:	80 e0       	ldi	r24, 0x00	; 0
    5808:	01 c0       	rjmp	.+2      	; 0x580c <i2c_check_op+0x8c>
    580a:	81 e0       	ldi	r24, 0x01	; 1
    580c:	ad b7       	in	r26, 0x3d	; 61
    580e:	be b7       	in	r27, 0x3e	; 62
    5810:	17 96       	adiw	r26, 0x07	; 7
    5812:	0f b6       	in	r0, 0x3f	; 63
    5814:	f8 94       	cli
    5816:	be bf       	out	0x3e, r27	; 62
    5818:	0f be       	out	0x3f, r0	; 63
    581a:	ad bf       	out	0x3d, r26	; 61
    581c:	08 95       	ret

0000581e <i2c_task_init>:
    581e:	8f b7       	in	r24, 0x3f	; 63
    5820:	f8 94       	cli
    5822:	ee e5       	ldi	r30, 0x5E	; 94
    5824:	f7 e1       	ldi	r31, 0x17	; 23
    5826:	11 92       	st	Z+, r1
    5828:	11 92       	st	Z+, r1
    582a:	97 e1       	ldi	r25, 0x17	; 23
    582c:	ee 37       	cpi	r30, 0x7E	; 126
    582e:	f9 07       	cpc	r31, r25
    5830:	d1 f7       	brne	.-12     	; 0x5826 <i2c_task_init+0x8>
    5832:	10 92 7e 17 	sts	0x177E, r1	; 0x80177e <i2c_task>
    5836:	91 e0       	ldi	r25, 0x01	; 1
    5838:	90 93 80 17 	sts	0x1780, r25	; 0x801780 <i2c_task+0x2>
    583c:	10 92 7f 17 	sts	0x177F, r1	; 0x80177f <i2c_task+0x1>
    5840:	10 92 81 17 	sts	0x1781, r1	; 0x801781 <i2c_task+0x3>
    5844:	8f bf       	out	0x3f, r24	; 63
    5846:	08 95       	ret

00005848 <i2c_task_op_add>:
    5848:	ef 92       	push	r14
    584a:	ff 92       	push	r15
    584c:	0f 93       	push	r16
    584e:	1f 93       	push	r17
    5850:	cf 93       	push	r28
    5852:	df 93       	push	r29
    5854:	d8 2f       	mov	r29, r24
    5856:	c6 2f       	mov	r28, r22
    5858:	7a 01       	movw	r14, r20
    585a:	02 2f       	mov	r16, r18
    585c:	1f b7       	in	r17, 0x3f	; 63
    585e:	6a e0       	ldi	r22, 0x0A	; 10
    5860:	70 e0       	ldi	r23, 0x00	; 0
    5862:	81 e0       	ldi	r24, 0x01	; 1
    5864:	90 e0       	ldi	r25, 0x00	; 0
    5866:	a8 db       	rcall	.-2224   	; 0x4fb8 <safecalloc>
    5868:	fc 01       	movw	r30, r24
    586a:	89 2b       	or	r24, r25
    586c:	89 f0       	breq	.+34     	; 0x5890 <i2c_task_op_add+0x48>
    586e:	f8 94       	cli
    5870:	11 82       	std	Z+1, r1	; 0x01
    5872:	12 82       	std	Z+2, r1	; 0x02
    5874:	dd 0f       	add	r29, r29
    5876:	c1 70       	andi	r28, 0x01	; 1
    5878:	cd 2b       	or	r28, r29
    587a:	c0 83       	st	Z, r28
    587c:	8a e0       	ldi	r24, 0x0A	; 10
    587e:	90 e0       	ldi	r25, 0x00	; 0
    5880:	95 83       	std	Z+5, r25	; 0x05
    5882:	84 83       	std	Z+4, r24	; 0x04
    5884:	13 82       	std	Z+3, r1	; 0x03
    5886:	06 83       	std	Z+6, r16	; 0x06
    5888:	17 82       	std	Z+7, r1	; 0x07
    588a:	f1 86       	std	Z+9, r15	; 0x09
    588c:	e0 86       	std	Z+8, r14	; 0x08
    588e:	1f bf       	out	0x3f, r17	; 63
    5890:	cf 01       	movw	r24, r30
    5892:	cd b7       	in	r28, 0x3d	; 61
    5894:	de b7       	in	r29, 0x3e	; 62
    5896:	e6 e0       	ldi	r30, 0x06	; 6
    5898:	0c 94 27 e7 	jmp	0x1ce4e	; 0x1ce4e <__epilogue_restores__+0x18>

0000589c <i2c_init>:
    589c:	cf 93       	push	r28
    589e:	00 d0       	rcall	.+0      	; 0x58a0 <i2c_init+0x4>
    58a0:	1f 92       	push	r1
    58a2:	9b 01       	movw	r18, r22
    58a4:	ac 01       	movw	r20, r24
    58a6:	cf b7       	in	r28, 0x3f	; 63
    58a8:	60 e0       	ldi	r22, 0x00	; 0
    58aa:	7d e2       	ldi	r23, 0x2D	; 45
    58ac:	81 e3       	ldi	r24, 0x31	; 49
    58ae:	91 e0       	ldi	r25, 0x01	; 1
    58b0:	0e 94 92 e6 	call	0x1cd24	; 0x1cd24 <__udivmodsi4>
    58b4:	da 01       	movw	r26, r20
    58b6:	c9 01       	movw	r24, r18
    58b8:	40 97       	sbiw	r24, 0x10	; 16
    58ba:	a1 09       	sbc	r26, r1
    58bc:	b1 09       	sbc	r27, r1
    58be:	ac 01       	movw	r20, r24
    58c0:	bd 01       	movw	r22, r26
    58c2:	76 95       	lsr	r23
    58c4:	67 95       	ror	r22
    58c6:	57 95       	ror	r21
    58c8:	47 95       	ror	r20
    58ca:	ca 01       	movw	r24, r20
    58cc:	88 27       	eor	r24, r24
    58ce:	89 2b       	or	r24, r25
    58d0:	59 f0       	breq	.+22     	; 0x58e8 <i2c_init+0x4c>
    58d2:	8e ed       	ldi	r24, 0xDE	; 222
    58d4:	93 e0       	ldi	r25, 0x03	; 3
    58d6:	a0 e0       	ldi	r26, 0x00	; 0
    58d8:	ed b7       	in	r30, 0x3d	; 61
    58da:	fe b7       	in	r31, 0x3e	; 62
    58dc:	81 83       	std	Z+1, r24	; 0x01
    58de:	92 83       	std	Z+2, r25	; 0x02
    58e0:	a3 83       	std	Z+3, r26	; 0x03
    58e2:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    58e6:	3a c0       	rjmp	.+116    	; 0x595c <i2c_init+0xc0>
    58e8:	f8 94       	cli
    58ea:	40 93 b8 00 	sts	0x00B8, r20	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    58ee:	10 92 4f 1a 	sts	0x1A4F, r1	; 0x801a4f <i2c+0x1>
    58f2:	81 e0       	ldi	r24, 0x01	; 1
    58f4:	80 93 50 1a 	sts	0x1A50, r24	; 0x801a50 <i2c+0x2>
    58f8:	10 92 7e 17 	sts	0x177E, r1	; 0x80177e <i2c_task>
    58fc:	80 93 80 17 	sts	0x1780, r24	; 0x801780 <i2c_task+0x2>
    5900:	40 9a       	sbi	0x08, 0	; 8
    5902:	41 9a       	sbi	0x08, 1	; 8
    5904:	84 e8       	ldi	r24, 0x84	; 132
    5906:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    590a:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
    590e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5912:	8c 7f       	andi	r24, 0xFC	; 252
    5914:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5918:	80 91 5d 17 	lds	r24, 0x175D	; 0x80175d <i2c_init_status>
    591c:	81 11       	cpse	r24, r1
    591e:	1d c0       	rjmp	.+58     	; 0x595a <i2c_init+0xbe>
    5920:	ee e5       	ldi	r30, 0x5E	; 94
    5922:	f7 e1       	ldi	r31, 0x17	; 23
    5924:	11 92       	st	Z+, r1
    5926:	11 92       	st	Z+, r1
    5928:	27 e1       	ldi	r18, 0x17	; 23
    592a:	ee 37       	cpi	r30, 0x7E	; 126
    592c:	f2 07       	cpc	r31, r18
    592e:	d1 f7       	brne	.-12     	; 0x5924 <i2c_init+0x88>
    5930:	61 e0       	ldi	r22, 0x01	; 1
    5932:	70 e0       	ldi	r23, 0x00	; 0
    5934:	8a ea       	ldi	r24, 0xAA	; 170
    5936:	9b e2       	ldi	r25, 0x2B	; 43
    5938:	0e 94 de 34 	call	0x69bc	; 0x69bc <set_timers>
    593c:	01 96       	adiw	r24, 0x01	; 1
    593e:	51 f4       	brne	.+20     	; 0x5954 <i2c_init+0xb8>
    5940:	87 ec       	ldi	r24, 0xC7	; 199
    5942:	93 e0       	ldi	r25, 0x03	; 3
    5944:	a0 e0       	ldi	r26, 0x00	; 0
    5946:	ed b7       	in	r30, 0x3d	; 61
    5948:	fe b7       	in	r31, 0x3e	; 62
    594a:	81 83       	std	Z+1, r24	; 0x01
    594c:	92 83       	std	Z+2, r25	; 0x02
    594e:	a3 83       	std	Z+3, r26	; 0x03
    5950:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    5954:	81 e0       	ldi	r24, 0x01	; 1
    5956:	80 93 5d 17 	sts	0x175D, r24	; 0x80175d <i2c_init_status>
    595a:	cf bf       	out	0x3f, r28	; 63
    595c:	0f 90       	pop	r0
    595e:	0f 90       	pop	r0
    5960:	0f 90       	pop	r0
    5962:	cf 91       	pop	r28
    5964:	08 95       	ret

00005966 <i2c_done>:
///@brief Is i2c structure done sending/receiving ?
///
/// @return  1 DONE, 0 NOT DONE
int8_t i2c_done()
{
	delayus(1);
    5966:	61 e0       	ldi	r22, 0x01	; 1
    5968:	70 e0       	ldi	r23, 0x00	; 0
    596a:	80 e0       	ldi	r24, 0x00	; 0
    596c:	90 e0       	ldi	r25, 0x00	; 0
    596e:	a5 db       	rcall	.-2230   	; 0x50ba <delayus>
	if(!i2c.enable || i2c.done )
    5970:	80 91 4f 1a 	lds	r24, 0x1A4F	; 0x801a4f <i2c+0x1>
    5974:	88 23       	and	r24, r24
    5976:	39 f0       	breq	.+14     	; 0x5986 <i2c_done+0x20>
		return(1);
    5978:	81 e0       	ldi	r24, 0x01	; 1
    597a:	90 91 50 1a 	lds	r25, 0x1A50	; 0x801a50 <i2c+0x2>
    597e:	91 11       	cpse	r25, r1
    5980:	03 c0       	rjmp	.+6      	; 0x5988 <i2c_done+0x22>
    5982:	80 e0       	ldi	r24, 0x00	; 0
    5984:	08 95       	ret
    5986:	81 e0       	ldi	r24, 0x01	; 1
	return(0);
}
    5988:	08 95       	ret

0000598a <i2c_task_done>:
///@brief Are all i2c_task_op[] pointers done sending/receiving ?
///
/// @return  1 DONE, 0 NOT DONE
int8_t i2c_task_done()
{
	delayus(1);
    598a:	61 e0       	ldi	r22, 0x01	; 1
    598c:	70 e0       	ldi	r23, 0x00	; 0
    598e:	80 e0       	ldi	r24, 0x00	; 0
    5990:	90 e0       	ldi	r25, 0x00	; 0
    5992:	93 db       	rcall	.-2266   	; 0x50ba <delayus>
	if(!i2c_task.enable || i2c_task.done )
    5994:	80 91 7e 17 	lds	r24, 0x177E	; 0x80177e <i2c_task>
    5998:	88 23       	and	r24, r24
    599a:	39 f0       	breq	.+14     	; 0x59aa <i2c_task_done+0x20>
		return(1);
    599c:	81 e0       	ldi	r24, 0x01	; 1
    599e:	90 91 80 17 	lds	r25, 0x1780	; 0x801780 <i2c_task+0x2>
    59a2:	91 11       	cpse	r25, r1
    59a4:	03 c0       	rjmp	.+6      	; 0x59ac <i2c_task_done+0x22>
    59a6:	80 e0       	ldi	r24, 0x00	; 0
    59a8:	08 95       	ret
    59aa:	81 e0       	ldi	r24, 0x01	; 1
	return(0);
}
    59ac:	08 95       	ret

000059ae <i2c_send_start>:
///@brief Send I2C START and enable interrupts
///
/// @return  void
void i2c_send_start()
{
	i2c.done = 0;
    59ae:	ee e4       	ldi	r30, 0x4E	; 78
    59b0:	fa e1       	ldi	r31, 0x1A	; 26
    59b2:	12 82       	std	Z+2, r1	; 0x02
	i2c.enable = 1;
    59b4:	81 e0       	ldi	r24, 0x01	; 1
    59b6:	81 83       	std	Z+1, r24	; 0x01
	i2c.timeout = I2C_TIMEOUT;		// Start timeout timer
    59b8:	8a e0       	ldi	r24, 0x0A	; 10
    59ba:	90 e0       	ldi	r25, 0x00	; 0
    59bc:	95 83       	std	Z+5, r25	; 0x05
    59be:	84 83       	std	Z+4, r24	; 0x04
	// Start a transactions
	// TWI Enable
	// TWI Interrupt Enable
	// TWI Interrupt Clear
	// TWI SEND RESTART
	TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWSTA);
    59c0:	85 ea       	ldi	r24, 0xA5	; 165
    59c2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    59c6:	08 95       	ret

000059c8 <i2c_task_run>:

/// @brief Run all valid i2c_task_op[] tasks
///
/// @return  void
void i2c_task_run()
{
    59c8:	ef 92       	push	r14
    59ca:	ff 92       	push	r15
    59cc:	0f 93       	push	r16
    59ce:	1f 93       	push	r17
    59d0:	cf 93       	push	r28
    59d2:	df 93       	push	r29
	uint8_t sreg = SREG;
    59d4:	ff b6       	in	r15, 0x3f	; 63
	i2c_op_t *o;
    uint8_t run = 0;
	int8_t i;


	cli();
    59d6:	f8 94       	cli
	i2c_task.done = 0;
    59d8:	10 92 80 17 	sts	0x1780, r1	; 0x801780 <i2c_task+0x2>
	i2c_task.error = 0;
    59dc:	10 92 81 17 	sts	0x1781, r1	; 0x801781 <i2c_task+0x3>
	i2c_task.ind = 0;
    59e0:	10 92 7f 17 	sts	0x177F, r1	; 0x80177f <i2c_task+0x1>

	// re-enable tasks
	for(i=0;i2c_check_op(i);++i)
    59e4:	c0 e0       	ldi	r28, 0x00	; 0
/// @return  void
void i2c_task_run()
{
	uint8_t sreg = SREG;
	i2c_op_t *o;
    uint8_t run = 0;
    59e6:	d0 e0       	ldi	r29, 0x00	; 0

	// re-enable tasks
	for(i=0;i2c_check_op(i);++i)
	{
		o = i2c_task_op[i];
		o->enable = 1;
    59e8:	ee 24       	eor	r14, r14
    59ea:	e3 94       	inc	r14
		o->done = 0;
		o->flags = 0;
		o->ind = 0;
		o->timeout = I2C_TIMEOUT;
    59ec:	0a e0       	ldi	r16, 0x0A	; 10
    59ee:	10 e0       	ldi	r17, 0x00	; 0
	i2c_task.done = 0;
	i2c_task.error = 0;
	i2c_task.ind = 0;

	// re-enable tasks
	for(i=0;i2c_check_op(i);++i)
    59f0:	8c 2f       	mov	r24, r28
    59f2:	c6 de       	rcall	.-628    	; 0x5780 <i2c_check_op>
    59f4:	88 23       	and	r24, r24
    59f6:	d1 f0       	breq	.+52     	; 0x5a2c <i2c_task_run+0x64>
	{
		o = i2c_task_op[i];
    59f8:	ec 2f       	mov	r30, r28
    59fa:	ee 0f       	add	r30, r30
    59fc:	ff 0b       	sbc	r31, r31
    59fe:	e2 5a       	subi	r30, 0xA2	; 162
    5a00:	f8 4e       	sbci	r31, 0xE8	; 232
    5a02:	01 90       	ld	r0, Z+
    5a04:	f0 81       	ld	r31, Z
    5a06:	e0 2d       	mov	r30, r0
		o->enable = 1;
    5a08:	e1 82       	std	Z+1, r14	; 0x01
		o->done = 0;
    5a0a:	12 82       	std	Z+2, r1	; 0x02
		o->flags = 0;
    5a0c:	13 82       	std	Z+3, r1	; 0x03
		o->ind = 0;
    5a0e:	17 82       	std	Z+7, r1	; 0x07
		o->timeout = I2C_TIMEOUT;
    5a10:	15 83       	std	Z+5, r17	; 0x05
    5a12:	04 83       	std	Z+4, r16	; 0x04
		if(!run)
    5a14:	d1 11       	cpse	r29, r1
    5a16:	07 c0       	rjmp	.+14     	; 0x5a26 <i2c_task_run+0x5e>
		{
			run = 1;
			i2c = *o;
    5a18:	8a e0       	ldi	r24, 0x0A	; 10
    5a1a:	ae e4       	ldi	r26, 0x4E	; 78
    5a1c:	ba e1       	ldi	r27, 0x1A	; 26
    5a1e:	01 90       	ld	r0, Z+
    5a20:	0d 92       	st	X+, r0
    5a22:	8a 95       	dec	r24
    5a24:	e1 f7       	brne	.-8      	; 0x5a1e <i2c_task_run+0x56>
    5a26:	cf 5f       	subi	r28, 0xFF	; 255
    5a28:	d1 e0       	ldi	r29, 0x01	; 1
    5a2a:	e2 cf       	rjmp	.-60     	; 0x59f0 <i2c_task_run+0x28>
		}
	}

	if(run)
    5a2c:	dd 23       	and	r29, r29
    5a2e:	91 f0       	breq	.+36     	; 0x5a54 <i2c_task_run+0x8c>
	{
		// TASK callback
		i2c_callback = i2c_task_next_op;
    5a30:	81 e8       	ldi	r24, 0x81	; 129
    5a32:	9d e2       	ldi	r25, 0x2D	; 45
    5a34:	90 93 83 17 	sts	0x1783, r25	; 0x801783 <i2c_callback+0x1>
    5a38:	80 93 82 17 	sts	0x1782, r24	; 0x801782 <i2c_callback>

		i2c_task.enable = 1;
    5a3c:	81 e0       	ldi	r24, 0x01	; 1
    5a3e:	80 93 7e 17 	sts	0x177E, r24	; 0x80177e <i2c_task>
		i2c_task.done = 0;
    5a42:	10 92 80 17 	sts	0x1780, r1	; 0x801780 <i2c_task+0x2>

        // Reset Status
        TWSR &= ~(_BV(TWPS0) | _BV(TWPS1));
    5a46:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5a4a:	8c 7f       	andi	r24, 0xFC	; 252
    5a4c:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
        // TWI Interrupt Clear
        // TWI SEND RESTART
        // TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWSTA);
        // Disable Slave Mode

		i2c_send_start();
    5a50:	ae df       	rcall	.-164    	; 0x59ae <i2c_send_start>
    5a52:	15 c0       	rjmp	.+42     	; 0x5a7e <i2c_task_run+0xb6>
        // FIXME we should notify the user ?
		// Nothing to DO
		// User Error

		// TASK callback
		i2c_callback = NULL;
    5a54:	10 92 83 17 	sts	0x1783, r1	; 0x801783 <i2c_callback+0x1>
    5a58:	10 92 82 17 	sts	0x1782, r1	; 0x801782 <i2c_callback>

		// TASK Nothing to DO
		i2c_task.enable = 0;
    5a5c:	10 92 7e 17 	sts	0x177E, r1	; 0x80177e <i2c_task>
		i2c_task.done = 1;
    5a60:	81 e0       	ldi	r24, 0x01	; 1
    5a62:	80 93 80 17 	sts	0x1780, r24	; 0x801780 <i2c_task+0x2>

		// I2C Nothing to do
        i2c.done = 1;
    5a66:	80 93 50 1a 	sts	0x1A50, r24	; 0x801a50 <i2c+0x2>
        i2c.enable = 0;
    5a6a:	10 92 4f 1a 	sts	0x1A4F, r1	; 0x801a4f <i2c+0x1>

        // TWI Enable
        // TWI Disable Enable
        // TWI Interrupt Clear
        TWCR = _BV(TWEN) | _BV(TWINT);
    5a6e:	84 e8       	ldi	r24, 0x84	; 132
    5a70:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
        // Reset status
        TWSR &= ~(_BV(TWPS0) | _BV(TWPS1));
    5a74:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5a78:	8c 7f       	andi	r24, 0xFC	; 252
    5a7a:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
        // Disable Slave Mode
        TWAR = 0;
    5a7e:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
	}
	// Disable Slave Mode

	SREG = sreg;
    5a82:	ff be       	out	0x3f, r15	; 63

}
    5a84:	cd b7       	in	r28, 0x3d	; 61
    5a86:	de b7       	in	r29, 0x3e	; 62
    5a88:	e6 e0       	ldi	r30, 0x06	; 6
    5a8a:	0c 94 27 e7 	jmp	0x1ce4e	; 0x1ce4e <__epilogue_restores__+0x18>

00005a8e <i2c_fn>:
/// @param[in] *buf: pointer to buffer for send or receive
/// @param[in] len: size of buffer to read or write
/// @return  1 = OK, 0 = ERROR
uint8_t i2c_fn(uint8_t address, uint8_t mode, uint8_t *buf, uint8_t len)
{
	uint8_t sreg = SREG;
    5a8e:	9f b7       	in	r25, 0x3f	; 63
	
    cli();
    5a90:	f8 94       	cli

	// sign task only
	i2c_callback = NULL;
    5a92:	10 92 83 17 	sts	0x1783, r1	; 0x801783 <i2c_callback+0x1>
    5a96:	10 92 82 17 	sts	0x1782, r1	; 0x801782 <i2c_callback>

	i2c.enable = 1; // Enabled
    5a9a:	31 e0       	ldi	r19, 0x01	; 1
    5a9c:	30 93 4f 1a 	sts	0x1A4F, r19	; 0x801a4f <i2c+0x1>
	i2c.done = 0;
    5aa0:	10 92 50 1a 	sts	0x1A50, r1	; 0x801a50 <i2c+0x2>
    i2c.address = (address << 1) | (mode & 1);
    5aa4:	88 0f       	add	r24, r24
    5aa6:	61 70       	andi	r22, 0x01	; 1
    5aa8:	68 2b       	or	r22, r24
    5aaa:	60 93 4e 1a 	sts	0x1A4E, r22	; 0x801a4e <i2c>
	i2c.flags = 0;
    5aae:	10 92 51 1a 	sts	0x1A51, r1	; 0x801a51 <i2c+0x3>
    i2c.len = len;
    5ab2:	20 93 54 1a 	sts	0x1A54, r18	; 0x801a54 <i2c+0x6>
    i2c.ind = 0;
    5ab6:	10 92 55 1a 	sts	0x1A55, r1	; 0x801a55 <i2c+0x7>
    i2c.buf = buf;
    5aba:	50 93 57 1a 	sts	0x1A57, r21	; 0x801a57 <i2c+0x9>
    5abe:	40 93 56 1a 	sts	0x1A56, r20	; 0x801a56 <i2c+0x8>

	// Reset Status
	TWSR &= ~(_BV(TWPS0) | _BV(TWPS1));
    5ac2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5ac6:	8c 7f       	andi	r24, 0xFC	; 252
    5ac8:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>

	// Disable Slave Mode
	TWAR = 0;
    5acc:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>

	SREG = sreg;
    5ad0:	9f bf       	out	0x3f, r25	; 63

	i2c_send_start();
    5ad2:	6d df       	rcall	.-294    	; 0x59ae <i2c_send_start>
	{
		printf("timeout: %d\r",(int)i2c.timeout);
	}
	printf("\n");
#else
	while(! i2c_done() )
    5ad4:	48 df       	rcall	.-368    	; 0x5966 <i2c_done>
    5ad6:	88 23       	and	r24, r24
    5ad8:	e9 f3       	breq	.-6      	; 0x5ad4 <i2c_fn+0x46>
    5ada:	81 e0       	ldi	r24, 0x01	; 1
		;
#endif
	return( i2c.flags ? 0 : 1);
    5adc:	90 91 51 1a 	lds	r25, 0x1A51	; 0x801a51 <i2c+0x3>
    5ae0:	91 11       	cpse	r25, r1
    5ae2:	80 e0       	ldi	r24, 0x00	; 0
    5ae4:	08 95       	ret

00005ae6 <i2c_send_stop>:
}
    5ae6:	ee e4       	ldi	r30, 0x4E	; 78
///
/// @return  void
void i2c_send_stop()
{
    // All transactions are done
    i2c.done = 1;
    5ae8:	fa e1       	ldi	r31, 0x1A	; 26
    5aea:	81 e0       	ldi	r24, 0x01	; 1
    5aec:	82 83       	std	Z+2, r24	; 0x02
    i2c.enable = 0;
    5aee:	11 82       	std	Z+1, r1	; 0x01
    // We are DONE
    // TWI Enable
    // TWI Interrupt Disable
    // TWI Interrupt Clear
    // TWI SEND STOP
    TWCR = _BV(TWEN) | _BV(TWINT) | _BV(TWSTO);
    5af0:	84 e9       	ldi	r24, 0x94	; 148
    5af2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	delayus(10);
    5af6:	6a e0       	ldi	r22, 0x0A	; 10
    5af8:	70 e0       	ldi	r23, 0x00	; 0
    5afa:	80 e0       	ldi	r24, 0x00	; 0
    5afc:	90 e0       	ldi	r25, 0x00	; 0
    5afe:	dd ca       	rjmp	.-2630   	; 0x50ba <delayus>
    5b00:	08 95       	ret

00005b02 <i2c_task_next_op>:

///@brief I2C task ISR callback function
///
/// @return  void
int8_t i2c_task_next_op()
{
    5b02:	cf 93       	push	r28
    5b04:	df 93       	push	r29
	i2c_op_t *o;

	// NOTE: we are in an ISR do not disable other interrupts

	if(i2c_task.enable)
    5b06:	80 91 7e 17 	lds	r24, 0x177E	; 0x80177e <i2c_task>
    5b0a:	88 23       	and	r24, r24
    5b0c:	09 f4       	brne	.+2      	; 0x5b10 <i2c_task_next_op+0xe>
    5b0e:	46 c0       	rjmp	.+140    	; 0x5b9c <i2c_task_next_op+0x9a>
	{
		// Save state of LAST operation
		if(i2c_check_op(i2c_task.ind) )
    5b10:	80 91 7f 17 	lds	r24, 0x177F	; 0x80177f <i2c_task+0x1>
    5b14:	35 de       	rcall	.-918    	; 0x5780 <i2c_check_op>
    5b16:	88 23       	and	r24, r24
    5b18:	b1 f0       	breq	.+44     	; 0x5b46 <i2c_task_next_op+0x44>
		{
			o = i2c_task_op[i2c_task.ind];
    5b1a:	e0 91 7f 17 	lds	r30, 0x177F	; 0x80177f <i2c_task+0x1>
    5b1e:	ee 0f       	add	r30, r30
    5b20:	ff 0b       	sbc	r31, r31
    5b22:	e2 5a       	subi	r30, 0xA2	; 162
    5b24:	f8 4e       	sbci	r31, 0xE8	; 232
    5b26:	c0 81       	ld	r28, Z
    5b28:	d1 81       	ldd	r29, Z+1	; 0x01
			// Save state in last opperation
			*o = i2c;
    5b2a:	8a e0       	ldi	r24, 0x0A	; 10
    5b2c:	ee e4       	ldi	r30, 0x4E	; 78
    5b2e:	fa e1       	ldi	r31, 0x1A	; 26
    5b30:	de 01       	movw	r26, r28
    5b32:	01 90       	ld	r0, Z+
    5b34:	0d 92       	st	X+, r0
    5b36:	8a 95       	dec	r24
    5b38:	e1 f7       	brne	.-8      	; 0x5b32 <i2c_task_next_op+0x30>
			if(o->flags)
    5b3a:	8b 81       	ldd	r24, Y+3	; 0x03
    5b3c:	88 23       	and	r24, r24
    5b3e:	19 f0       	breq	.+6      	; 0x5b46 <i2c_task_next_op+0x44>
				i2c_task.error = 1;
    5b40:	81 e0       	ldi	r24, 0x01	; 1
    5b42:	80 93 81 17 	sts	0x1781, r24	; 0x801781 <i2c_task+0x3>
		}

		if(i2c_check_op(i2c_task.ind+1) )
    5b46:	80 91 7f 17 	lds	r24, 0x177F	; 0x80177f <i2c_task+0x1>
    5b4a:	8f 5f       	subi	r24, 0xFF	; 255
    5b4c:	19 de       	rcall	.-974    	; 0x5780 <i2c_check_op>
    5b4e:	88 23       	and	r24, r24
    5b50:	29 f1       	breq	.+74     	; 0x5b9c <i2c_task_next_op+0x9a>
		{
			i2c_task.ind++;
    5b52:	e0 91 7f 17 	lds	r30, 0x177F	; 0x80177f <i2c_task+0x1>
    5b56:	ef 5f       	subi	r30, 0xFF	; 255
    5b58:	e0 93 7f 17 	sts	0x177F, r30	; 0x80177f <i2c_task+0x1>

			o = i2c_task_op[i2c_task.ind];
    5b5c:	ee 0f       	add	r30, r30
    5b5e:	ff 0b       	sbc	r31, r31
    5b60:	e2 5a       	subi	r30, 0xA2	; 162
    5b62:	f8 4e       	sbci	r31, 0xE8	; 232
    5b64:	01 90       	ld	r0, Z+
    5b66:	f0 81       	ld	r31, Z
    5b68:	e0 2d       	mov	r30, r0

			if( o->enable == 1 || o->done == 0)
    5b6a:	81 81       	ldd	r24, Z+1	; 0x01
    5b6c:	81 30       	cpi	r24, 0x01	; 1
    5b6e:	19 f0       	breq	.+6      	; 0x5b76 <i2c_task_next_op+0x74>
    5b70:	82 81       	ldd	r24, Z+2	; 0x02
    5b72:	81 11       	cpse	r24, r1
    5b74:	13 c0       	rjmp	.+38     	; 0x5b9c <i2c_task_next_op+0x9a>
			{
				o->timeout = I2C_TIMEOUT;
    5b76:	8a e0       	ldi	r24, 0x0A	; 10
    5b78:	90 e0       	ldi	r25, 0x00	; 0
    5b7a:	95 83       	std	Z+5, r25	; 0x05
    5b7c:	84 83       	std	Z+4, r24	; 0x04
				o->flags = 0;
    5b7e:	13 82       	std	Z+3, r1	; 0x03
				o->ind = 0;
    5b80:	17 82       	std	Z+7, r1	; 0x07
				o->enable = 1;
    5b82:	81 e0       	ldi	r24, 0x01	; 1
    5b84:	81 83       	std	Z+1, r24	; 0x01
				o->done = 0;
    5b86:	12 82       	std	Z+2, r1	; 0x02

				i2c = *o;
    5b88:	8a e0       	ldi	r24, 0x0A	; 10
    5b8a:	ae e4       	ldi	r26, 0x4E	; 78
    5b8c:	ba e1       	ldi	r27, 0x1A	; 26
    5b8e:	01 90       	ld	r0, Z+
    5b90:	0d 92       	st	X+, r0
    5b92:	8a 95       	dec	r24

				i2c_send_start();
    5b94:	e1 f7       	brne	.-8      	; 0x5b8e <i2c_task_next_op+0x8c>
    5b96:	0b df       	rcall	.-490    	; 0x59ae <i2c_send_start>

				return(1);
    5b98:	81 e0       	ldi	r24, 0x01	; 1
    5b9a:	0f c0       	rjmp	.+30     	; 0x5bba <i2c_task_next_op+0xb8>
			}
		}
	}
	// program error
	// Disable TASK
	i2c_task.enable = 0;
    5b9c:	10 92 7e 17 	sts	0x177E, r1	; 0x80177e <i2c_task>
	i2c_task.done = 1;
    5ba0:	81 e0       	ldi	r24, 0x01	; 1
    5ba2:	80 93 80 17 	sts	0x1780, r24	; 0x801780 <i2c_task+0x2>

	// I2C disable
	i2c.done = 1;
    5ba6:	80 93 50 1a 	sts	0x1A50, r24	; 0x801a50 <i2c+0x2>
	i2c.enable = 0;
    5baa:	10 92 4f 1a 	sts	0x1A4F, r1	; 0x801a4f <i2c+0x1>
	i2c.flags = 0;
    5bae:	10 92 51 1a 	sts	0x1A51, r1	; 0x801a51 <i2c+0x3>
	i2c.ind = 0;
    5bb2:	10 92 55 1a 	sts	0x1A55, r1	; 0x801a55 <i2c+0x7>

	i2c_send_stop();
    5bb6:	97 df       	rcall	.-210    	; 0x5ae6 <i2c_send_stop>

	return(0);
    5bb8:	80 e0       	ldi	r24, 0x00	; 0
}
    5bba:	df 91       	pop	r29
    5bbc:	cf 91       	pop	r28
    5bbe:	08 95       	ret

00005bc0 <i2c_next>:
{

	// IF we have an i2c_callback() function then
	// it must save status and reset i2c structure for next operation

	if(i2c_callback)
    5bc0:	e0 91 82 17 	lds	r30, 0x1782	; 0x801782 <i2c_callback>
    5bc4:	f0 91 83 17 	lds	r31, 0x1783	; 0x801783 <i2c_callback+0x1>
    5bc8:	30 97       	sbiw	r30, 0x00	; 0
    5bca:	11 f0       	breq	.+4      	; 0x5bd0 <i2c_next+0x10>
	    i2c_callback();
    5bcc:	09 95       	icall
    5bce:	08 95       	ret
	else
		i2c_send_stop();
    5bd0:	8a cf       	rjmp	.-236    	; 0x5ae6 <i2c_send_stop>
    5bd2:	08 95       	ret

00005bd4 <__vector_26>:

///@brief I2C ISR for send/receive
///
/// @return  void
ISR(TWI_vect)
{
    5bd4:	1f 92       	push	r1
    5bd6:	0f 92       	push	r0
    5bd8:	0f b6       	in	r0, 0x3f	; 63
    5bda:	0f 92       	push	r0
    5bdc:	11 24       	eor	r1, r1
    5bde:	0b b6       	in	r0, 0x3b	; 59
    5be0:	0f 92       	push	r0
    5be2:	2f 93       	push	r18
    5be4:	3f 93       	push	r19
    5be6:	4f 93       	push	r20
    5be8:	5f 93       	push	r21
    5bea:	6f 93       	push	r22
    5bec:	7f 93       	push	r23
    5bee:	8f 93       	push	r24
    5bf0:	9f 93       	push	r25
    5bf2:	af 93       	push	r26
    5bf4:	bf 93       	push	r27
    5bf6:	ef 93       	push	r30
    5bf8:	ff 93       	push	r31
	// FYI: reading TWSR clears the status
	// twi.h defines TW_STATUS
    // #define TW_STATUS (TWSR & TW_STATUS_MASK)
    uint8_t status = TW_STATUS;	
    5bfa:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>

	// Are we Enabled to Receive/Send ?
	// Are we Done ?
	// Program errors - these should not happen
	if(!i2c.enable || i2c.done || !i2c.buf || !i2c.len )
    5bfe:	90 91 4f 1a 	lds	r25, 0x1A4F	; 0x801a4f <i2c+0x1>
    5c02:	99 23       	and	r25, r25
    5c04:	09 f1       	breq	.+66     	; 0x5c48 <__vector_26+0x74>
    5c06:	90 91 50 1a 	lds	r25, 0x1A50	; 0x801a50 <i2c+0x2>
    5c0a:	91 11       	cpse	r25, r1
    5c0c:	1d c0       	rjmp	.+58     	; 0x5c48 <__vector_26+0x74>
    5c0e:	20 91 56 1a 	lds	r18, 0x1A56	; 0x801a56 <i2c+0x8>
    5c12:	30 91 57 1a 	lds	r19, 0x1A57	; 0x801a57 <i2c+0x9>
    5c16:	21 15       	cp	r18, r1
    5c18:	31 05       	cpc	r19, r1
    5c1a:	b1 f0       	breq	.+44     	; 0x5c48 <__vector_26+0x74>
    5c1c:	90 91 54 1a 	lds	r25, 0x1A54	; 0x801a54 <i2c+0x6>
    5c20:	99 23       	and	r25, r25
    5c22:	91 f0       	breq	.+36     	; 0x5c48 <__vector_26+0x74>
		i2c_send_stop();
		return;
	}

	// TUMEOUT ? STOP everything
	if(i2c.timeout == 0)
    5c24:	40 91 52 1a 	lds	r20, 0x1A52	; 0x801a52 <i2c+0x4>
    5c28:	50 91 53 1a 	lds	r21, 0x1A53	; 0x801a53 <i2c+0x5>
    5c2c:	45 2b       	or	r20, r21
    5c2e:	71 f4       	brne	.+28     	; 0x5c4c <__vector_26+0x78>
	{
		i2c.flags |= (I2C_OP_TIMEOUT);
    5c30:	80 91 51 1a 	lds	r24, 0x1A51	; 0x801a51 <i2c+0x3>
    5c34:	81 60       	ori	r24, 0x01	; 1
    5c36:	80 93 51 1a 	sts	0x1A51, r24	; 0x801a51 <i2c+0x3>
		i2c_task.enable = 0;
    5c3a:	10 92 7e 17 	sts	0x177E, r1	; 0x80177e <i2c_task>
		i2c_task.done = 1;
    5c3e:	81 e0       	ldi	r24, 0x01	; 1
    5c40:	80 93 80 17 	sts	0x1780, r24	; 0x801780 <i2c_task+0x2>
		i2c_task.error = 1;
    5c44:	80 93 81 17 	sts	0x1781, r24	; 0x801781 <i2c_task+0x3>
		i2c_send_stop();
    5c48:	4e df       	rcall	.-356    	; 0x5ae6 <i2c_send_stop>
		return;
    5c4a:	9b c0       	rjmp	.+310    	; 0x5d82 <__vector_26+0x1ae>
	}

	// Master Receiver mode
	switch (status)
    5c4c:	88 7f       	andi	r24, 0xF8	; 248
    5c4e:	80 33       	cpi	r24, 0x30	; 48
    5c50:	09 f4       	brne	.+2      	; 0x5c54 <__vector_26+0x80>
    5c52:	83 c0       	rjmp	.+262    	; 0x5d5a <__vector_26+0x186>
    5c54:	70 f4       	brcc	.+28     	; 0x5c72 <__vector_26+0x9e>
    5c56:	88 31       	cpi	r24, 0x18	; 24
    5c58:	09 f1       	breq	.+66     	; 0x5c9c <__vector_26+0xc8>
    5c5a:	28 f4       	brcc	.+10     	; 0x5c66 <__vector_26+0x92>
    5c5c:	88 30       	cpi	r24, 0x08	; 8
    5c5e:	c9 f0       	breq	.+50     	; 0x5c92 <__vector_26+0xbe>
    5c60:	80 31       	cpi	r24, 0x10	; 16
    5c62:	b9 f0       	breq	.+46     	; 0x5c92 <__vector_26+0xbe>
    5c64:	83 c0       	rjmp	.+262    	; 0x5d6c <__vector_26+0x198>
    5c66:	80 32       	cpi	r24, 0x20	; 32
    5c68:	09 f4       	brne	.+2      	; 0x5c6c <__vector_26+0x98>
    5c6a:	65 c0       	rjmp	.+202    	; 0x5d36 <__vector_26+0x162>
    5c6c:	88 32       	cpi	r24, 0x28	; 40
    5c6e:	b1 f0       	breq	.+44     	; 0x5c9c <__vector_26+0xc8>
    5c70:	7d c0       	rjmp	.+250    	; 0x5d6c <__vector_26+0x198>
    5c72:	88 34       	cpi	r24, 0x48	; 72
    5c74:	09 f4       	brne	.+2      	; 0x5c78 <__vector_26+0xa4>
    5c76:	68 c0       	rjmp	.+208    	; 0x5d48 <__vector_26+0x174>
    5c78:	38 f4       	brcc	.+14     	; 0x5c88 <__vector_26+0xb4>
    5c7a:	88 33       	cpi	r24, 0x38	; 56
    5c7c:	09 f4       	brne	.+2      	; 0x5c80 <__vector_26+0xac>
    5c7e:	57 c0       	rjmp	.+174    	; 0x5d2e <__vector_26+0x15a>
    5c80:	80 34       	cpi	r24, 0x40	; 64
    5c82:	09 f4       	brne	.+2      	; 0x5c86 <__vector_26+0xb2>
    5c84:	42 c0       	rjmp	.+132    	; 0x5d0a <__vector_26+0x136>
    5c86:	72 c0       	rjmp	.+228    	; 0x5d6c <__vector_26+0x198>
    5c88:	80 35       	cpi	r24, 0x50	; 80
    5c8a:	79 f1       	breq	.+94     	; 0x5cea <__vector_26+0x116>
    5c8c:	88 35       	cpi	r24, 0x58	; 88
    5c8e:	b9 f0       	breq	.+46     	; 0x5cbe <__vector_26+0xea>
    5c90:	6d c0       	rjmp	.+218    	; 0x5d6c <__vector_26+0x198>
	{
		case TW_START:		// START has been transmitted
		case TW_REP_START:  // RE-START has been transmitted
			i2c.ind = 0;
    5c92:	10 92 55 1a 	sts	0x1A55, r1	; 0x801a55 <i2c+0x7>
			TWDR = i2c.address;
    5c96:	80 91 4e 1a 	lds	r24, 0x1A4E	; 0x801a4e <i2c>
    5c9a:	0e c0       	rjmp	.+28     	; 0x5cb8 <__vector_26+0xe4>
			break;


		case TW_MT_SLA_ACK:	// SLA+W trasnmitted and ACK received
		case TW_MT_DATA_ACK:// Data trasnmitted and ACK received
			if (i2c.ind < i2c.len)
    5c9c:	80 91 55 1a 	lds	r24, 0x1A55	; 0x801a55 <i2c+0x7>
    5ca0:	89 17       	cp	r24, r25
    5ca2:	ec f4       	brge	.+58     	; 0x5cde <__vector_26+0x10a>
			{
				TWDR = i2c.buf[i2c.ind++];
    5ca4:	91 e0       	ldi	r25, 0x01	; 1
    5ca6:	98 0f       	add	r25, r24
    5ca8:	90 93 55 1a 	sts	0x1A55, r25	; 0x801a55 <i2c+0x7>
    5cac:	f9 01       	movw	r30, r18
    5cae:	e8 0f       	add	r30, r24
    5cb0:	f1 1d       	adc	r31, r1
    5cb2:	87 fd       	sbrc	r24, 7
    5cb4:	fa 95       	dec	r31
    5cb6:	80 81       	ld	r24, Z
    5cb8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5cbc:	36 c0       	rjmp	.+108    	; 0x5d2a <__vector_26+0x156>
				TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
			}
			break;

		case TW_MR_DATA_NACK:	// Data received NACK transmitted
			if(i2c.ind < i2c.len)
    5cbe:	80 91 55 1a 	lds	r24, 0x1A55	; 0x801a55 <i2c+0x7>
    5cc2:	89 17       	cp	r24, r25
    5cc4:	64 f4       	brge	.+24     	; 0x5cde <__vector_26+0x10a>
				i2c.buf[i2c.ind++] = TWDR;
    5cc6:	91 e0       	ldi	r25, 0x01	; 1
    5cc8:	98 0f       	add	r25, r24
    5cca:	90 93 55 1a 	sts	0x1A55, r25	; 0x801a55 <i2c+0x7>
    5cce:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5cd2:	f9 01       	movw	r30, r18
    5cd4:	e8 0f       	add	r30, r24
    5cd6:	f1 1d       	adc	r31, r1
    5cd8:	87 fd       	sbrc	r24, 7
    5cda:	fa 95       	dec	r31
    5cdc:	90 83       	st	Z, r25
				TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
			}
			else
			{
				// Done
				i2c.done = 1;
    5cde:	81 e0       	ldi	r24, 0x01	; 1
    5ce0:	80 93 50 1a 	sts	0x1A50, r24	; 0x801a50 <i2c+0x2>
				i2c.enable = 0;
    5ce4:	10 92 4f 1a 	sts	0x1A4F, r1	; 0x801a4f <i2c+0x1>
    5ce8:	4b c0       	rjmp	.+150    	; 0x5d80 <__vector_26+0x1ac>
				i2c_next();
			}
			break;

		case TW_MR_DATA_ACK:	// Data received ACK transmitted
			if(i2c.ind < i2c.len)
    5cea:	80 91 55 1a 	lds	r24, 0x1A55	; 0x801a55 <i2c+0x7>
    5cee:	89 17       	cp	r24, r25
    5cf0:	64 f4       	brge	.+24     	; 0x5d0a <__vector_26+0x136>
				i2c.buf[i2c.ind++] = TWDR;
    5cf2:	91 e0       	ldi	r25, 0x01	; 1
    5cf4:	98 0f       	add	r25, r24
    5cf6:	90 93 55 1a 	sts	0x1A55, r25	; 0x801a55 <i2c+0x7>
    5cfa:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5cfe:	f9 01       	movw	r30, r18
    5d00:	e8 0f       	add	r30, r24
    5d02:	f1 1d       	adc	r31, r1
    5d04:	87 fd       	sbrc	r24, 7
    5d06:	fa 95       	dec	r31
    5d08:	90 83       	st	Z, r25
		case TW_MR_SLA_ACK:		// SLA+R transmitted ACK received
			if ((i2c.ind+1) < i2c.len)
    5d0a:	80 91 55 1a 	lds	r24, 0x1A55	; 0x801a55 <i2c+0x7>
    5d0e:	08 2e       	mov	r0, r24
    5d10:	00 0c       	add	r0, r0
    5d12:	99 0b       	sbc	r25, r25
    5d14:	01 96       	adiw	r24, 0x01	; 1
    5d16:	20 91 54 1a 	lds	r18, 0x1A54	; 0x801a54 <i2c+0x6>
    5d1a:	02 2e       	mov	r0, r18
    5d1c:	00 0c       	add	r0, r0
    5d1e:	33 0b       	sbc	r19, r19
    5d20:	82 17       	cp	r24, r18
    5d22:	93 07       	cpc	r25, r19
    5d24:	14 f4       	brge	.+4      	; 0x5d2a <__vector_26+0x156>
			{
				// TWI Enable
				// TWI Interrupt Enable
				// TWI Interrupt Clear
				// SEND ACK after receive
				TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    5d26:	85 ec       	ldi	r24, 0xC5	; 197
    5d28:	03 c0       	rjmp	.+6      	; 0x5d30 <__vector_26+0x15c>
				// LAST BYTE
				// TWI Enable
				// TWI Interrupt Enable
				// TWI Interrupt Clear
				// SEND NACK after receive
				TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    5d2a:	85 e8       	ldi	r24, 0x85	; 133
    5d2c:	01 c0       	rjmp	.+2      	; 0x5d30 <__vector_26+0x15c>
		case TW_ARB_LOST:
			// TWI Enable
			// TWI Interrupt Enable
			// TWI Interrupt Clear
			// TWI SEND RESTART
			TWCR = _BV(TWEN) |  _BV(TWIE) | _BV(TWINT) | _BV(TWSTA);
    5d2e:	85 ea       	ldi	r24, 0xA5	; 165
    5d30:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			break;
    5d34:	26 c0       	rjmp	.+76     	; 0x5d82 <__vector_26+0x1ae>

// Error cases
		case TW_MT_SLA_NACK:	// SLA+W transmitted NACK received
			i2c.done = 1;
    5d36:	81 e0       	ldi	r24, 0x01	; 1
    5d38:	80 93 50 1a 	sts	0x1A50, r24	; 0x801a50 <i2c+0x2>
			i2c.enable = 0;
    5d3c:	10 92 4f 1a 	sts	0x1A4F, r1	; 0x801a4f <i2c+0x1>
			i2c.flags |= I2C_TW_MT_SLA_NACK;
    5d40:	80 91 51 1a 	lds	r24, 0x1A51	; 0x801a51 <i2c+0x3>
    5d44:	88 60       	ori	r24, 0x08	; 8
    5d46:	1a c0       	rjmp	.+52     	; 0x5d7c <__vector_26+0x1a8>
			// ERROR
			i2c_next();
			break;

		case TW_MR_SLA_NACK:	// SLA+R transmitted NACK received
			i2c.done = 1;
    5d48:	81 e0       	ldi	r24, 0x01	; 1
    5d4a:	80 93 50 1a 	sts	0x1A50, r24	; 0x801a50 <i2c+0x2>
			i2c.enable = 0;
    5d4e:	10 92 4f 1a 	sts	0x1A4F, r1	; 0x801a4f <i2c+0x1>
			i2c.flags |= I2C_TW_MR_SLA_NACK;
    5d52:	80 91 51 1a 	lds	r24, 0x1A51	; 0x801a51 <i2c+0x3>
    5d56:	80 61       	ori	r24, 0x10	; 16
    5d58:	11 c0       	rjmp	.+34     	; 0x5d7c <__vector_26+0x1a8>
			// ERROR
			i2c_next();
			break;

		case TW_MT_DATA_NACK:	// Data Transmitted NACK received
			i2c.done = 1;
    5d5a:	81 e0       	ldi	r24, 0x01	; 1
    5d5c:	80 93 50 1a 	sts	0x1A50, r24	; 0x801a50 <i2c+0x2>
			i2c.enable = 0;
    5d60:	10 92 4f 1a 	sts	0x1A4F, r1	; 0x801a4f <i2c+0x1>
			i2c.flags |= I2C_TW_MT_DATA_NACK;
    5d64:	80 91 51 1a 	lds	r24, 0x1A51	; 0x801a51 <i2c+0x3>
    5d68:	80 62       	ori	r24, 0x20	; 32
    5d6a:	08 c0       	rjmp	.+16     	; 0x5d7c <__vector_26+0x1a8>
			// ERROR
			i2c_next();
			break;

		default:				// Error
			i2c.done = 1;
    5d6c:	81 e0       	ldi	r24, 0x01	; 1
    5d6e:	80 93 50 1a 	sts	0x1A50, r24	; 0x801a50 <i2c+0x2>
			i2c.enable = 0;
    5d72:	10 92 4f 1a 	sts	0x1A4F, r1	; 0x801a4f <i2c+0x1>
			// ERROR
			i2c.flags |= I2C_BUS_ERROR;
    5d76:	80 91 51 1a 	lds	r24, 0x1A51	; 0x801a51 <i2c+0x3>
    5d7a:	80 64       	ori	r24, 0x40	; 64
    5d7c:	80 93 51 1a 	sts	0x1A51, r24	; 0x801a51 <i2c+0x3>
			i2c_next();
    5d80:	1f df       	rcall	.-450    	; 0x5bc0 <i2c_next>
			break;
	}
}
    5d82:	ff 91       	pop	r31
    5d84:	ef 91       	pop	r30
    5d86:	bf 91       	pop	r27
    5d88:	af 91       	pop	r26
    5d8a:	9f 91       	pop	r25
    5d8c:	8f 91       	pop	r24
    5d8e:	7f 91       	pop	r23
    5d90:	6f 91       	pop	r22
    5d92:	5f 91       	pop	r21
    5d94:	4f 91       	pop	r20
    5d96:	3f 91       	pop	r19
    5d98:	2f 91       	pop	r18
    5d9a:	0f 90       	pop	r0
    5d9c:	0b be       	out	0x3b, r0	; 59
    5d9e:	0f 90       	pop	r0
    5da0:	0f be       	out	0x3f, r0	; 63
    5da2:	0f 90       	pop	r0
    5da4:	1f 90       	pop	r1
    5da6:	18 95       	reti

00005da8 <i2c_print_error>:
/// @brief Display Errors for i2c_task_op[index]
///
/// @param[in] index: index of i2c_task_op[] array
/// @return  void
void i2c_print_error(i2c_op_t *o)
{
    5da8:	cf 93       	push	r28
    5daa:	00 d0       	rcall	.+0      	; 0x5dac <i2c_print_error+0x4>
    5dac:	00 d0       	rcall	.+0      	; 0x5dae <i2c_print_error+0x6>
    5dae:	1f 92       	push	r1
    int flags = o->flags;
    5db0:	fc 01       	movw	r30, r24
    5db2:	c3 81       	ldd	r28, Z+3	; 0x03

	if(flags)
    5db4:	cc 23       	and	r28, r28
    5db6:	09 f4       	brne	.+2      	; 0x5dba <i2c_print_error+0x12>
    5db8:	67 c0       	rjmp	.+206    	; 0x5e88 <i2c_print_error+0xe0>
	{
		printf("  %s\n", (i2c.done ? "DONE" : "ACTIVE") );
    5dba:	80 91 50 1a 	lds	r24, 0x1A50	; 0x801a50 <i2c+0x2>
    5dbe:	81 11       	cpse	r24, r1
    5dc0:	03 c0       	rjmp	.+6      	; 0x5dc8 <i2c_print_error+0x20>
    5dc2:	88 e2       	ldi	r24, 0x28	; 40
    5dc4:	93 e0       	ldi	r25, 0x03	; 3
    5dc6:	02 c0       	rjmp	.+4      	; 0x5dcc <i2c_print_error+0x24>
    5dc8:	83 e2       	ldi	r24, 0x23	; 35
    5dca:	93 e0       	ldi	r25, 0x03	; 3
    5dcc:	ed b7       	in	r30, 0x3d	; 61
    5dce:	fe b7       	in	r31, 0x3e	; 62
    5dd0:	95 83       	std	Z+5, r25	; 0x05
    5dd2:	84 83       	std	Z+4, r24	; 0x04
    5dd4:	81 ec       	ldi	r24, 0xC1	; 193
    5dd6:	93 e0       	ldi	r25, 0x03	; 3
    5dd8:	a0 e0       	ldi	r26, 0x00	; 0
    5dda:	81 83       	std	Z+1, r24	; 0x01
    5ddc:	92 83       	std	Z+2, r25	; 0x02
    5dde:	a3 83       	std	Z+3, r26	; 0x03
    5de0:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
		if(flags & I2C_OP_TIMEOUT)
    5de4:	c0 ff       	sbrs	r28, 0
    5de6:	0a c0       	rjmp	.+20     	; 0x5dfc <i2c_print_error+0x54>
			printf("  OP_TIMEOUT\n");
    5de8:	83 eb       	ldi	r24, 0xB3	; 179
    5dea:	93 e0       	ldi	r25, 0x03	; 3
    5dec:	a0 e0       	ldi	r26, 0x00	; 0
    5dee:	ed b7       	in	r30, 0x3d	; 61
    5df0:	fe b7       	in	r31, 0x3e	; 62
    5df2:	81 83       	std	Z+1, r24	; 0x01
    5df4:	92 83       	std	Z+2, r25	; 0x02
    5df6:	a3 83       	std	Z+3, r26	; 0x03
    5df8:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
		if(flags & I2C_OP_LEN)
    5dfc:	c1 ff       	sbrs	r28, 1
    5dfe:	0a c0       	rjmp	.+20     	; 0x5e14 <i2c_print_error+0x6c>
			printf("  OP_LEN\n");
    5e00:	89 ea       	ldi	r24, 0xA9	; 169
    5e02:	93 e0       	ldi	r25, 0x03	; 3
    5e04:	a0 e0       	ldi	r26, 0x00	; 0
    5e06:	ed b7       	in	r30, 0x3d	; 61
    5e08:	fe b7       	in	r31, 0x3e	; 62
    5e0a:	81 83       	std	Z+1, r24	; 0x01
    5e0c:	92 83       	std	Z+2, r25	; 0x02
    5e0e:	a3 83       	std	Z+3, r26	; 0x03
    5e10:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
		if(flags & I2C_OP_ERROR)
    5e14:	c2 ff       	sbrs	r28, 2
    5e16:	0a c0       	rjmp	.+20     	; 0x5e2c <i2c_print_error+0x84>
			printf("  OP_ERROR\n");
    5e18:	8d e9       	ldi	r24, 0x9D	; 157
    5e1a:	93 e0       	ldi	r25, 0x03	; 3
    5e1c:	a0 e0       	ldi	r26, 0x00	; 0
    5e1e:	ed b7       	in	r30, 0x3d	; 61
    5e20:	fe b7       	in	r31, 0x3e	; 62
    5e22:	81 83       	std	Z+1, r24	; 0x01
    5e24:	92 83       	std	Z+2, r25	; 0x02
    5e26:	a3 83       	std	Z+3, r26	; 0x03
    5e28:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
		if(flags & I2C_TW_MR_SLA_NACK)
    5e2c:	c4 ff       	sbrs	r28, 4
    5e2e:	0a c0       	rjmp	.+20     	; 0x5e44 <i2c_print_error+0x9c>
			printf("  TW_MR_SLA_NACK\n");
    5e30:	8b e8       	ldi	r24, 0x8B	; 139
    5e32:	93 e0       	ldi	r25, 0x03	; 3
    5e34:	a0 e0       	ldi	r26, 0x00	; 0
    5e36:	ed b7       	in	r30, 0x3d	; 61
    5e38:	fe b7       	in	r31, 0x3e	; 62
    5e3a:	81 83       	std	Z+1, r24	; 0x01
    5e3c:	92 83       	std	Z+2, r25	; 0x02
    5e3e:	a3 83       	std	Z+3, r26	; 0x03
    5e40:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
		if(flags & I2C_TW_MT_SLA_NACK)
    5e44:	c3 ff       	sbrs	r28, 3
    5e46:	0a c0       	rjmp	.+20     	; 0x5e5c <i2c_print_error+0xb4>
			printf("  TW_MT_SLA_NACK\n");
    5e48:	89 e7       	ldi	r24, 0x79	; 121
    5e4a:	93 e0       	ldi	r25, 0x03	; 3
    5e4c:	a0 e0       	ldi	r26, 0x00	; 0
    5e4e:	ed b7       	in	r30, 0x3d	; 61
    5e50:	fe b7       	in	r31, 0x3e	; 62
    5e52:	81 83       	std	Z+1, r24	; 0x01
    5e54:	92 83       	std	Z+2, r25	; 0x02
    5e56:	a3 83       	std	Z+3, r26	; 0x03
    5e58:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
		if(flags & I2C_TW_MT_DATA_NACK)
    5e5c:	c5 ff       	sbrs	r28, 5
    5e5e:	0a c0       	rjmp	.+20     	; 0x5e74 <i2c_print_error+0xcc>
			printf("  TW_MT_DATA_NACK\n");
    5e60:	86 e6       	ldi	r24, 0x66	; 102
    5e62:	93 e0       	ldi	r25, 0x03	; 3
    5e64:	a0 e0       	ldi	r26, 0x00	; 0
    5e66:	ed b7       	in	r30, 0x3d	; 61
    5e68:	fe b7       	in	r31, 0x3e	; 62
    5e6a:	81 83       	std	Z+1, r24	; 0x01
    5e6c:	92 83       	std	Z+2, r25	; 0x02
    5e6e:	a3 83       	std	Z+3, r26	; 0x03
    5e70:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
		printf("\n");
    5e74:	84 e6       	ldi	r24, 0x64	; 100
    5e76:	93 e0       	ldi	r25, 0x03	; 3
    5e78:	a0 e0       	ldi	r26, 0x00	; 0
    5e7a:	ed b7       	in	r30, 0x3d	; 61
    5e7c:	fe b7       	in	r31, 0x3e	; 62
    5e7e:	81 83       	std	Z+1, r24	; 0x01
    5e80:	92 83       	std	Z+2, r25	; 0x02
    5e82:	a3 83       	std	Z+3, r26	; 0x03
    5e84:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
	}
}
    5e88:	0f 90       	pop	r0
    5e8a:	0f 90       	pop	r0
    5e8c:	0f 90       	pop	r0
    5e8e:	0f 90       	pop	r0
    5e90:	0f 90       	pop	r0
    5e92:	cf 91       	pop	r28
    5e94:	08 95       	ret

00005e96 <i2c_display_task_errors>:

///@brief Display any task errors
void i2c_display_task_errors()
{
    5e96:	6f 92       	push	r6
    5e98:	7f 92       	push	r7
    5e9a:	8f 92       	push	r8
    5e9c:	af 92       	push	r10
    5e9e:	bf 92       	push	r11
    5ea0:	cf 92       	push	r12
    5ea2:	df 92       	push	r13
    5ea4:	ef 92       	push	r14
    5ea6:	0f 93       	push	r16
    5ea8:	1f 93       	push	r17
    5eaa:	cf 93       	push	r28
    5eac:	df 93       	push	r29
    5eae:	00 d0       	rcall	.+0      	; 0x5eb0 <i2c_display_task_errors+0x1a>
    5eb0:	00 d0       	rcall	.+0      	; 0x5eb2 <i2c_display_task_errors+0x1c>
    5eb2:	1f 92       	push	r1
	int8_t i;
	printf("i2c_task.done: %d\n", (int) i2c_task.done);
    5eb4:	80 91 80 17 	lds	r24, 0x1780	; 0x801780 <i2c_task+0x2>
    5eb8:	90 e0       	ldi	r25, 0x00	; 0
    5eba:	ed b7       	in	r30, 0x3d	; 61
    5ebc:	fe b7       	in	r31, 0x3e	; 62
    5ebe:	95 83       	std	Z+5, r25	; 0x05
    5ec0:	84 83       	std	Z+4, r24	; 0x04
    5ec2:	81 e5       	ldi	r24, 0x51	; 81
    5ec4:	93 e0       	ldi	r25, 0x03	; 3
    5ec6:	a0 e0       	ldi	r26, 0x00	; 0
    5ec8:	81 83       	std	Z+1, r24	; 0x01
    5eca:	92 83       	std	Z+2, r25	; 0x02
    5ecc:	a3 83       	std	Z+3, r26	; 0x03
    5ece:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
	printf("i2c_task.error: %d\n", (int) i2c_task.error);
    5ed2:	80 91 81 17 	lds	r24, 0x1781	; 0x801781 <i2c_task+0x3>
    5ed6:	90 e0       	ldi	r25, 0x00	; 0
    5ed8:	ed b7       	in	r30, 0x3d	; 61
    5eda:	fe b7       	in	r31, 0x3e	; 62
    5edc:	95 83       	std	Z+5, r25	; 0x05
    5ede:	84 83       	std	Z+4, r24	; 0x04
    5ee0:	8d e3       	ldi	r24, 0x3D	; 61
    5ee2:	93 e0       	ldi	r25, 0x03	; 3
    5ee4:	a0 e0       	ldi	r26, 0x00	; 0
    5ee6:	81 83       	std	Z+1, r24	; 0x01
    5ee8:	92 83       	std	Z+2, r25	; 0x02
    5eea:	a3 83       	std	Z+3, r26	; 0x03
    5eec:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    5ef0:	ce e5       	ldi	r28, 0x5E	; 94
    5ef2:	d7 e1       	ldi	r29, 0x17	; 23
	for(i=0;i2c_task_op[i] && i < I2C_OPS;++i)
    5ef4:	00 e0       	ldi	r16, 0x00	; 0
    5ef6:	10 e0       	ldi	r17, 0x00	; 0
	{
		printf("task: %d\n", (int) i);
    5ef8:	83 e3       	ldi	r24, 0x33	; 51
    5efa:	93 e0       	ldi	r25, 0x03	; 3
    5efc:	6c 01       	movw	r12, r24
    5efe:	e1 2c       	mov	r14, r1
		i2c_print_error(i2c_task_op[i]);
		printf("\n");
    5f00:	81 e3       	ldi	r24, 0x31	; 49
    5f02:	93 e0       	ldi	r25, 0x03	; 3
    5f04:	3c 01       	movw	r6, r24
    5f06:	81 2c       	mov	r8, r1
void i2c_display_task_errors()
{
	int8_t i;
	printf("i2c_task.done: %d\n", (int) i2c_task.done);
	printf("i2c_task.error: %d\n", (int) i2c_task.error);
	for(i=0;i2c_task_op[i] && i < I2C_OPS;++i)
    5f08:	30 2f       	mov	r19, r16
    5f0a:	21 2f       	mov	r18, r17
    5f0c:	5e 01       	movw	r10, r28
    5f0e:	0f 5f       	subi	r16, 0xFF	; 255
    5f10:	1f 4f       	sbci	r17, 0xFF	; 255
    5f12:	88 81       	ld	r24, Y
    5f14:	99 81       	ldd	r25, Y+1	; 0x01
    5f16:	89 2b       	or	r24, r25
    5f18:	b1 f0       	breq	.+44     	; 0x5f46 <i2c_display_task_errors+0xb0>
	{
		printf("task: %d\n", (int) i);
    5f1a:	ed b7       	in	r30, 0x3d	; 61
    5f1c:	fe b7       	in	r31, 0x3e	; 62
    5f1e:	34 83       	std	Z+4, r19	; 0x04
    5f20:	25 83       	std	Z+5, r18	; 0x05
    5f22:	c1 82       	std	Z+1, r12	; 0x01
    5f24:	d2 82       	std	Z+2, r13	; 0x02
    5f26:	e3 82       	std	Z+3, r14	; 0x03
    5f28:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    5f2c:	22 96       	adiw	r28, 0x02	; 2
		i2c_print_error(i2c_task_op[i]);
    5f2e:	f5 01       	movw	r30, r10
    5f30:	80 81       	ld	r24, Z
    5f32:	91 81       	ldd	r25, Z+1	; 0x01
    5f34:	39 df       	rcall	.-398    	; 0x5da8 <i2c_print_error>
		printf("\n");
    5f36:	ed b7       	in	r30, 0x3d	; 61
    5f38:	fe b7       	in	r31, 0x3e	; 62
    5f3a:	61 82       	std	Z+1, r6	; 0x01
    5f3c:	72 82       	std	Z+2, r7	; 0x02
    5f3e:	83 82       	std	Z+3, r8	; 0x03
    5f40:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    5f44:	e1 cf       	rjmp	.-62     	; 0x5f08 <i2c_display_task_errors+0x72>
	}
}
    5f46:	0f 90       	pop	r0
    5f48:	0f 90       	pop	r0
    5f4a:	0f 90       	pop	r0
    5f4c:	0f 90       	pop	r0
    5f4e:	0f 90       	pop	r0
    5f50:	df 91       	pop	r29
    5f52:	cf 91       	pop	r28
    5f54:	1f 91       	pop	r17
    5f56:	0f 91       	pop	r16
    5f58:	ef 90       	pop	r14
    5f5a:	df 90       	pop	r13
    5f5c:	cf 90       	pop	r12
    5f5e:	bf 90       	pop	r11
    5f60:	af 90       	pop	r10
    5f62:	8f 90       	pop	r8
    5f64:	7f 90       	pop	r7
    5f66:	6f 90       	pop	r6
    5f68:	08 95       	ret

00005f6a <BINtoBCD>:
/// @return 0 if not running.
/// @return -1 ERROR
int8_t rtc_run_test()
{
	return ( rtc_run(-1) );
}
    5f6a:	6a e0       	ldi	r22, 0x0A	; 10
    5f6c:	0e 94 5f e6 	call	0x1ccbe	; 0x1ccbe <__udivmodqi4>
    5f70:	82 95       	swap	r24
    5f72:	80 7f       	andi	r24, 0xF0	; 240
    5f74:	89 2b       	or	r24, r25
    5f76:	08 95       	ret

00005f78 <BCDtoBIN>:
    5f78:	98 2f       	mov	r25, r24
    5f7a:	92 95       	swap	r25
    5f7c:	9f 70       	andi	r25, 0x0F	; 15
    5f7e:	8f 70       	andi	r24, 0x0F	; 15
    5f80:	2a e0       	ldi	r18, 0x0A	; 10
    5f82:	92 9f       	mul	r25, r18
    5f84:	80 0d       	add	r24, r0
    5f86:	11 24       	eor	r1, r1
    5f88:	08 95       	ret

00005f8a <i2c_rtc_write>:
    5f8a:	ac e0       	ldi	r26, 0x0C	; 12
    5f8c:	b0 e0       	ldi	r27, 0x00	; 0
    5f8e:	eb ec       	ldi	r30, 0xCB	; 203
    5f90:	ff e2       	ldi	r31, 0x2F	; 47
    5f92:	0c 94 0d e7 	jmp	0x1ce1a	; 0x1ce1a <__prologue_saves__+0x1c>
    5f96:	9f ef       	ldi	r25, 0xFF	; 255
    5f98:	92 0f       	add	r25, r18
    5f9a:	98 30       	cpi	r25, 0x08	; 8
    5f9c:	50 f5       	brcc	.+84     	; 0x5ff2 <i2c_rtc_write+0x68>
    5f9e:	6c 83       	std	Y+4, r22	; 0x04
    5fa0:	90 e0       	ldi	r25, 0x00	; 0
    5fa2:	02 2f       	mov	r16, r18
    5fa4:	10 e0       	ldi	r17, 0x00	; 0
    5fa6:	69 2f       	mov	r22, r25
    5fa8:	09 2e       	mov	r0, r25
    5faa:	00 0c       	add	r0, r0
    5fac:	77 0b       	sbc	r23, r23
    5fae:	60 17       	cp	r22, r16
    5fb0:	71 07       	cpc	r23, r17
    5fb2:	6c f4       	brge	.+26     	; 0x5fce <i2c_rtc_write+0x44>
    5fb4:	a5 e0       	ldi	r26, 0x05	; 5
    5fb6:	b0 e0       	ldi	r27, 0x00	; 0
    5fb8:	ac 0f       	add	r26, r28
    5fba:	bd 1f       	adc	r27, r29
    5fbc:	a6 0f       	add	r26, r22
    5fbe:	b7 1f       	adc	r27, r23
    5fc0:	64 0f       	add	r22, r20
    5fc2:	75 1f       	adc	r23, r21
    5fc4:	fb 01       	movw	r30, r22
    5fc6:	30 81       	ld	r19, Z
    5fc8:	3c 93       	st	X, r19
    5fca:	9f 5f       	subi	r25, 0xFF	; 255
    5fcc:	ec cf       	rjmp	.-40     	; 0x5fa6 <i2c_rtc_write+0x1c>
    5fce:	2f 5f       	subi	r18, 0xFF	; 255
    5fd0:	ae 01       	movw	r20, r28
    5fd2:	4c 5f       	subi	r20, 0xFC	; 252
    5fd4:	5f 4f       	sbci	r21, 0xFF	; 255
    5fd6:	60 e0       	ldi	r22, 0x00	; 0
    5fd8:	5a dd       	rcall	.-1356   	; 0x5a8e <i2c_fn>
    5fda:	81 11       	cpse	r24, r1
    5fdc:	0c c0       	rjmp	.+24     	; 0x5ff6 <i2c_rtc_write+0x6c>
    5fde:	8e ed       	ldi	r24, 0xDE	; 222
    5fe0:	94 e0       	ldi	r25, 0x04	; 4
    5fe2:	a0 e0       	ldi	r26, 0x00	; 0
    5fe4:	ed b7       	in	r30, 0x3d	; 61
    5fe6:	fe b7       	in	r31, 0x3e	; 62
    5fe8:	81 83       	std	Z+1, r24	; 0x01
    5fea:	92 83       	std	Z+2, r25	; 0x02
    5fec:	a3 83       	std	Z+3, r26	; 0x03
    5fee:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    5ff2:	80 e0       	ldi	r24, 0x00	; 0
    5ff4:	01 c0       	rjmp	.+2      	; 0x5ff8 <i2c_rtc_write+0x6e>
    5ff6:	81 e0       	ldi	r24, 0x01	; 1
    5ff8:	2c 96       	adiw	r28, 0x0c	; 12
    5ffa:	e4 e0       	ldi	r30, 0x04	; 4
    5ffc:	0c 94 29 e7 	jmp	0x1ce52	; 0x1ce52 <__epilogue_restores__+0x1c>

00006000 <i2c_rtc_read>:
    6000:	a4 e0       	ldi	r26, 0x04	; 4
    6002:	b0 e0       	ldi	r27, 0x00	; 0
    6004:	e6 e0       	ldi	r30, 0x06	; 6
    6006:	f0 e3       	ldi	r31, 0x30	; 48
    6008:	0c 94 0b e7 	jmp	0x1ce16	; 0x1ce16 <__prologue_saves__+0x18>
    600c:	6c 83       	std	Y+4, r22	; 0x04
    600e:	9f ef       	ldi	r25, 0xFF	; 255
    6010:	92 0f       	add	r25, r18
    6012:	98 30       	cpi	r25, 0x08	; 8
    6014:	f8 f4       	brcc	.+62     	; 0x6054 <i2c_rtc_read+0x54>
    6016:	02 2f       	mov	r16, r18
    6018:	7a 01       	movw	r14, r20
    601a:	18 2f       	mov	r17, r24
    601c:	21 e0       	ldi	r18, 0x01	; 1
    601e:	ae 01       	movw	r20, r28
    6020:	4c 5f       	subi	r20, 0xFC	; 252
    6022:	5f 4f       	sbci	r21, 0xFF	; 255
    6024:	60 e0       	ldi	r22, 0x00	; 0
    6026:	33 dd       	rcall	.-1434   	; 0x5a8e <i2c_fn>
    6028:	81 11       	cpse	r24, r1
    602a:	03 c0       	rjmp	.+6      	; 0x6032 <i2c_rtc_read+0x32>
    602c:	82 ec       	ldi	r24, 0xC2	; 194
    602e:	94 e0       	ldi	r25, 0x04	; 4
    6030:	09 c0       	rjmp	.+18     	; 0x6044 <i2c_rtc_read+0x44>
    6032:	20 2f       	mov	r18, r16
    6034:	a7 01       	movw	r20, r14
    6036:	61 e0       	ldi	r22, 0x01	; 1
    6038:	81 2f       	mov	r24, r17
    603a:	29 dd       	rcall	.-1454   	; 0x5a8e <i2c_fn>
    603c:	81 11       	cpse	r24, r1
    603e:	0c c0       	rjmp	.+24     	; 0x6058 <i2c_rtc_read+0x58>
    6040:	89 ea       	ldi	r24, 0xA9	; 169
    6042:	94 e0       	ldi	r25, 0x04	; 4
    6044:	a0 e0       	ldi	r26, 0x00	; 0
    6046:	ed b7       	in	r30, 0x3d	; 61
    6048:	fe b7       	in	r31, 0x3e	; 62
    604a:	81 83       	std	Z+1, r24	; 0x01
    604c:	92 83       	std	Z+2, r25	; 0x02
    604e:	a3 83       	std	Z+3, r26	; 0x03
    6050:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    6054:	80 e0       	ldi	r24, 0x00	; 0
    6056:	01 c0       	rjmp	.+2      	; 0x605a <i2c_rtc_read+0x5a>
    6058:	81 e0       	ldi	r24, 0x01	; 1
    605a:	24 96       	adiw	r28, 0x04	; 4
    605c:	e6 e0       	ldi	r30, 0x06	; 6
    605e:	0c 94 27 e7 	jmp	0x1ce4e	; 0x1ce4e <__epilogue_restores__+0x18>

00006062 <i2c_rtc_init>:
    6062:	60 ea       	ldi	r22, 0xA0	; 160
    6064:	76 e8       	ldi	r23, 0x86	; 134
    6066:	81 e0       	ldi	r24, 0x01	; 1
    6068:	90 e0       	ldi	r25, 0x00	; 0
    606a:	18 cc       	rjmp	.-2000   	; 0x589c <i2c_init>
    606c:	08 95       	ret

0000606e <rtc_write>:
    606e:	ab e0       	ldi	r26, 0x0B	; 11
    6070:	b0 e0       	ldi	r27, 0x00	; 0
    6072:	ed e3       	ldi	r30, 0x3D	; 61
    6074:	f0 e3       	ldi	r31, 0x30	; 48
    6076:	0c 94 0d e7 	jmp	0x1ce1a	; 0x1ce1a <__prologue_saves__+0x1c>
    607a:	8c 01       	movw	r16, r24
    607c:	fc 01       	movw	r30, r24
    607e:	80 81       	ld	r24, Z
    6080:	74 df       	rcall	.-280    	; 0x5f6a <BINtoBCD>
    6082:	8f 77       	andi	r24, 0x7F	; 127
    6084:	8c 83       	std	Y+4, r24	; 0x04
    6086:	f8 01       	movw	r30, r16
    6088:	82 81       	ldd	r24, Z+2	; 0x02
    608a:	6f df       	rcall	.-290    	; 0x5f6a <BINtoBCD>
    608c:	8f 77       	andi	r24, 0x7F	; 127
    608e:	8d 83       	std	Y+5, r24	; 0x05
    6090:	f8 01       	movw	r30, r16
    6092:	84 81       	ldd	r24, Z+4	; 0x04
    6094:	6a df       	rcall	.-300    	; 0x5f6a <BINtoBCD>
    6096:	8f 73       	andi	r24, 0x3F	; 63
    6098:	8e 83       	std	Y+6, r24	; 0x06
    609a:	f8 01       	movw	r30, r16
    609c:	84 85       	ldd	r24, Z+12	; 0x0c
    609e:	87 70       	andi	r24, 0x07	; 7
    60a0:	8f 5f       	subi	r24, 0xFF	; 255
    60a2:	8f 83       	std	Y+7, r24	; 0x07
    60a4:	86 81       	ldd	r24, Z+6	; 0x06
    60a6:	61 df       	rcall	.-318    	; 0x5f6a <BINtoBCD>
    60a8:	8f 73       	andi	r24, 0x3F	; 63
    60aa:	88 87       	std	Y+8, r24	; 0x08
    60ac:	f8 01       	movw	r30, r16
    60ae:	80 85       	ldd	r24, Z+8	; 0x08
    60b0:	8f 5f       	subi	r24, 0xFF	; 255
    60b2:	5b df       	rcall	.-330    	; 0x5f6a <BINtoBCD>
    60b4:	8f 71       	andi	r24, 0x1F	; 31
    60b6:	89 87       	std	Y+9, r24	; 0x09
    60b8:	f8 01       	movw	r30, r16
    60ba:	82 85       	ldd	r24, Z+10	; 0x0a
    60bc:	84 56       	subi	r24, 0x64	; 100
    60be:	55 df       	rcall	.-342    	; 0x5f6a <BINtoBCD>
    60c0:	8a 87       	std	Y+10, r24	; 0x0a
    60c2:	83 e9       	ldi	r24, 0x93	; 147
    60c4:	8b 87       	std	Y+11, r24	; 0x0b
    60c6:	28 e0       	ldi	r18, 0x08	; 8
    60c8:	ae 01       	movw	r20, r28
    60ca:	4c 5f       	subi	r20, 0xFC	; 252
    60cc:	5f 4f       	sbci	r21, 0xFF	; 255
    60ce:	60 e0       	ldi	r22, 0x00	; 0
    60d0:	88 e6       	ldi	r24, 0x68	; 104
    60d2:	5b df       	rcall	.-330    	; 0x5f8a <i2c_rtc_write>
    60d4:	81 11       	cpse	r24, r1
    60d6:	0c c0       	rjmp	.+24     	; 0x60f0 <rtc_write+0x82>
    60d8:	88 e9       	ldi	r24, 0x98	; 152
    60da:	94 e0       	ldi	r25, 0x04	; 4
    60dc:	a0 e0       	ldi	r26, 0x00	; 0
    60de:	ed b7       	in	r30, 0x3d	; 61
    60e0:	fe b7       	in	r31, 0x3e	; 62
    60e2:	81 83       	std	Z+1, r24	; 0x01
    60e4:	92 83       	std	Z+2, r25	; 0x02
    60e6:	a3 83       	std	Z+3, r26	; 0x03
    60e8:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    60ec:	80 e0       	ldi	r24, 0x00	; 0
    60ee:	01 c0       	rjmp	.+2      	; 0x60f2 <rtc_write+0x84>
    60f0:	81 e0       	ldi	r24, 0x01	; 1
    60f2:	2b 96       	adiw	r28, 0x0b	; 11
    60f4:	e4 e0       	ldi	r30, 0x04	; 4
    60f6:	0c 94 29 e7 	jmp	0x1ce52	; 0x1ce52 <__epilogue_restores__+0x1c>

000060fa <rtc_read>:
    60fa:	ab e0       	ldi	r26, 0x0B	; 11
    60fc:	b0 e0       	ldi	r27, 0x00	; 0
    60fe:	e3 e8       	ldi	r30, 0x83	; 131
    6100:	f0 e3       	ldi	r31, 0x30	; 48
    6102:	0c 94 0d e7 	jmp	0x1ce1a	; 0x1ce1a <__prologue_saves__+0x1c>
    6106:	8c 01       	movw	r16, r24
    6108:	28 e0       	ldi	r18, 0x08	; 8
    610a:	ae 01       	movw	r20, r28
    610c:	4c 5f       	subi	r20, 0xFC	; 252
    610e:	5f 4f       	sbci	r21, 0xFF	; 255
    6110:	60 e0       	ldi	r22, 0x00	; 0
    6112:	88 e6       	ldi	r24, 0x68	; 104
    6114:	75 df       	rcall	.-278    	; 0x6000 <i2c_rtc_read>
    6116:	81 11       	cpse	r24, r1
    6118:	0c c0       	rjmp	.+24     	; 0x6132 <rtc_read+0x38>
    611a:	88 e8       	ldi	r24, 0x88	; 136
    611c:	94 e0       	ldi	r25, 0x04	; 4
    611e:	a0 e0       	ldi	r26, 0x00	; 0
    6120:	ed b7       	in	r30, 0x3d	; 61
    6122:	fe b7       	in	r31, 0x3e	; 62
    6124:	81 83       	std	Z+1, r24	; 0x01
    6126:	92 83       	std	Z+2, r25	; 0x02
    6128:	a3 83       	std	Z+3, r26	; 0x03
    612a:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    612e:	80 e0       	ldi	r24, 0x00	; 0
    6130:	33 c0       	rjmp	.+102    	; 0x6198 <rtc_read+0x9e>
    6132:	8c 81       	ldd	r24, Y+4	; 0x04
    6134:	8f 77       	andi	r24, 0x7F	; 127
    6136:	20 df       	rcall	.-448    	; 0x5f78 <BCDtoBIN>
    6138:	90 e0       	ldi	r25, 0x00	; 0
    613a:	f8 01       	movw	r30, r16
    613c:	91 83       	std	Z+1, r25	; 0x01
    613e:	80 83       	st	Z, r24
    6140:	8d 81       	ldd	r24, Y+5	; 0x05
    6142:	8f 77       	andi	r24, 0x7F	; 127
    6144:	19 df       	rcall	.-462    	; 0x5f78 <BCDtoBIN>
    6146:	90 e0       	ldi	r25, 0x00	; 0
    6148:	f8 01       	movw	r30, r16
    614a:	93 83       	std	Z+3, r25	; 0x03
    614c:	82 83       	std	Z+2, r24	; 0x02
    614e:	8e 81       	ldd	r24, Y+6	; 0x06
    6150:	8f 73       	andi	r24, 0x3F	; 63
    6152:	12 df       	rcall	.-476    	; 0x5f78 <BCDtoBIN>
    6154:	90 e0       	ldi	r25, 0x00	; 0
    6156:	f8 01       	movw	r30, r16
    6158:	95 83       	std	Z+5, r25	; 0x05
    615a:	84 83       	std	Z+4, r24	; 0x04
    615c:	8f 81       	ldd	r24, Y+7	; 0x07
    615e:	87 70       	andi	r24, 0x07	; 7
    6160:	90 e0       	ldi	r25, 0x00	; 0
    6162:	01 97       	sbiw	r24, 0x01	; 1
    6164:	95 87       	std	Z+13, r25	; 0x0d
    6166:	84 87       	std	Z+12, r24	; 0x0c
    6168:	88 85       	ldd	r24, Y+8	; 0x08
    616a:	8f 73       	andi	r24, 0x3F	; 63
    616c:	05 df       	rcall	.-502    	; 0x5f78 <BCDtoBIN>
    616e:	90 e0       	ldi	r25, 0x00	; 0
    6170:	f8 01       	movw	r30, r16
    6172:	97 83       	std	Z+7, r25	; 0x07
    6174:	86 83       	std	Z+6, r24	; 0x06
    6176:	89 85       	ldd	r24, Y+9	; 0x09
    6178:	8f 71       	andi	r24, 0x1F	; 31
    617a:	fe de       	rcall	.-516    	; 0x5f78 <BCDtoBIN>
    617c:	90 e0       	ldi	r25, 0x00	; 0
    617e:	01 97       	sbiw	r24, 0x01	; 1
    6180:	f8 01       	movw	r30, r16
    6182:	91 87       	std	Z+9, r25	; 0x09
    6184:	80 87       	std	Z+8, r24	; 0x08
    6186:	8a 85       	ldd	r24, Y+10	; 0x0a
    6188:	f7 de       	rcall	.-530    	; 0x5f78 <BCDtoBIN>
    618a:	90 e0       	ldi	r25, 0x00	; 0
    618c:	8c 59       	subi	r24, 0x9C	; 156
    618e:	9f 4f       	sbci	r25, 0xFF	; 255
    6190:	f8 01       	movw	r30, r16
    6192:	93 87       	std	Z+11, r25	; 0x0b
    6194:	82 87       	std	Z+10, r24	; 0x0a
    6196:	81 e0       	ldi	r24, 0x01	; 1
    6198:	2b 96       	adiw	r28, 0x0b	; 11
    619a:	e4 e0       	ldi	r30, 0x04	; 4
    619c:	0c 94 29 e7 	jmp	0x1ce52	; 0x1ce52 <__epilogue_restores__+0x1c>

000061a0 <rtc_run>:
    61a0:	a4 e0       	ldi	r26, 0x04	; 4
    61a2:	b0 e0       	ldi	r27, 0x00	; 0
    61a4:	e6 ed       	ldi	r30, 0xD6	; 214
    61a6:	f0 e3       	ldi	r31, 0x30	; 48
    61a8:	0c 94 0d e7 	jmp	0x1ce1a	; 0x1ce1a <__prologue_saves__+0x1c>
    61ac:	8c 01       	movw	r16, r24
    61ae:	21 e0       	ldi	r18, 0x01	; 1
    61b0:	ae 01       	movw	r20, r28
    61b2:	4c 5f       	subi	r20, 0xFC	; 252
    61b4:	5f 4f       	sbci	r21, 0xFF	; 255
    61b6:	60 e0       	ldi	r22, 0x00	; 0
    61b8:	88 e6       	ldi	r24, 0x68	; 104
    61ba:	22 df       	rcall	.-444    	; 0x6000 <i2c_rtc_read>
    61bc:	81 11       	cpse	r24, r1
    61be:	03 c0       	rjmp	.+6      	; 0x61c6 <rtc_run+0x26>
    61c0:	84 e7       	ldi	r24, 0x74	; 116
    61c2:	94 e0       	ldi	r25, 0x04	; 4
    61c4:	24 c0       	rjmp	.+72     	; 0x620e <rtc_run+0x6e>
    61c6:	8c 81       	ldd	r24, Y+4	; 0x04
    61c8:	0f 3f       	cpi	r16, 0xFF	; 255
    61ca:	ff ef       	ldi	r31, 0xFF	; 255
    61cc:	1f 07       	cpc	r17, r31
    61ce:	59 f4       	brne	.+22     	; 0x61e6 <rtc_run+0x46>
    61d0:	08 2e       	mov	r0, r24
    61d2:	00 0c       	add	r0, r0
    61d4:	99 0b       	sbc	r25, r25
    61d6:	80 95       	com	r24
    61d8:	90 95       	com	r25
    61da:	89 2f       	mov	r24, r25
    61dc:	88 1f       	adc	r24, r24
    61de:	88 27       	eor	r24, r24
    61e0:	88 1f       	adc	r24, r24
    61e2:	90 e0       	ldi	r25, 0x00	; 0
    61e4:	20 c0       	rjmp	.+64     	; 0x6226 <rtc_run+0x86>
    61e6:	8f 77       	andi	r24, 0x7F	; 127
    61e8:	01 15       	cp	r16, r1
    61ea:	11 05       	cpc	r17, r1
    61ec:	11 f4       	brne	.+4      	; 0x61f2 <rtc_run+0x52>
    61ee:	90 e8       	ldi	r25, 0x80	; 128
    61f0:	01 c0       	rjmp	.+2      	; 0x61f4 <rtc_run+0x54>
    61f2:	90 e0       	ldi	r25, 0x00	; 0
    61f4:	89 2b       	or	r24, r25
    61f6:	8c 83       	std	Y+4, r24	; 0x04
    61f8:	21 e0       	ldi	r18, 0x01	; 1
    61fa:	ae 01       	movw	r20, r28
    61fc:	4c 5f       	subi	r20, 0xFC	; 252
    61fe:	5f 4f       	sbci	r21, 0xFF	; 255
    6200:	60 e0       	ldi	r22, 0x00	; 0
    6202:	88 e6       	ldi	r24, 0x68	; 104
    6204:	c2 de       	rcall	.-636    	; 0x5f8a <i2c_rtc_write>
    6206:	81 11       	cpse	r24, r1
    6208:	0d c0       	rjmp	.+26     	; 0x6224 <rtc_run+0x84>
    620a:	8f e5       	ldi	r24, 0x5F	; 95
    620c:	94 e0       	ldi	r25, 0x04	; 4
    620e:	a0 e0       	ldi	r26, 0x00	; 0
    6210:	ed b7       	in	r30, 0x3d	; 61
    6212:	fe b7       	in	r31, 0x3e	; 62
    6214:	81 83       	std	Z+1, r24	; 0x01
    6216:	92 83       	std	Z+2, r25	; 0x02
    6218:	a3 83       	std	Z+3, r26	; 0x03
    621a:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    621e:	8f ef       	ldi	r24, 0xFF	; 255
    6220:	9f ef       	ldi	r25, 0xFF	; 255
    6222:	01 c0       	rjmp	.+2      	; 0x6226 <rtc_run+0x86>
    6224:	c8 01       	movw	r24, r16
    6226:	24 96       	adiw	r28, 0x04	; 4
    6228:	e4 e0       	ldi	r30, 0x04	; 4
    622a:	0c 94 29 e7 	jmp	0x1ce52	; 0x1ce52 <__epilogue_restores__+0x1c>

0000622e <rtc_init>:
/// @param[in] seconds: POSIX EPOCH time in seconds.
///
/// @return  run state 0 = STOP, 1 = RUN
/// @return -1 = ERROR
uint8_t rtc_init (int force, time_t seconds)
{
    622e:	a7 e0       	ldi	r26, 0x07	; 7
    6230:	b0 e0       	ldi	r27, 0x00	; 0
    6232:	ed e1       	ldi	r30, 0x1D	; 29
    6234:	f1 e3       	ldi	r31, 0x31	; 49
    6236:	0c 94 0d e7 	jmp	0x1ce1a	; 0x1ce1a <__prologue_saves__+0x1c>
    623a:	8c 01       	movw	r16, r24
    623c:	4c 83       	std	Y+4, r20	; 0x04
    623e:	5d 83       	std	Y+5, r21	; 0x05
    6240:	6e 83       	std	Y+6, r22	; 0x06
    6242:	7f 83       	std	Y+7, r23	; 0x07
    int8_t    state;

    tm_t *tmp;

    i2c_rtc_init();
    6244:	0e df       	rcall	.-484    	; 0x6062 <i2c_rtc_init>

    if(!force)
    6246:	01 15       	cp	r16, r1
    6248:	11 05       	cpc	r17, r1
    624a:	39 f4       	brne	.+14     	; 0x625a <rtc_init+0x2c>
    {
        state = rtc_run(-1);
    624c:	8f ef       	ldi	r24, 0xFF	; 255
    624e:	9f ef       	ldi	r25, 0xFF	; 255
    6250:	a7 df       	rcall	.-178    	; 0x61a0 <rtc_run>
        if(state < 0)
    6252:	87 fd       	sbrc	r24, 7
    6254:	16 c0       	rjmp	.+44     	; 0x6282 <rtc_init+0x54>
        {
            rtc_ok = 0;
            return 0;
        }
        if(state == 0)                            // stopped
    6256:	81 11       	cpse	r24, r1
    6258:	22 c0       	rjmp	.+68     	; 0x629e <rtc_init+0x70>
            force = 1;
    }

    if(force)                                     // INIT
    {
        if(rtc_run(0) < 0)                        // STOP RTC
    625a:	80 e0       	ldi	r24, 0x00	; 0
    625c:	90 e0       	ldi	r25, 0x00	; 0
    625e:	a0 df       	rcall	.-192    	; 0x61a0 <rtc_run>
    6260:	97 fd       	sbrc	r25, 7
    6262:	0f c0       	rjmp	.+30     	; 0x6282 <rtc_init+0x54>
        {
            rtc_ok = 0;                           // Fail
            return 0;
        }

        tmp = gmtime(&seconds);
    6264:	ce 01       	movw	r24, r28
    6266:	04 96       	adiw	r24, 0x04	; 4
    6268:	a3 d6       	rcall	.+3398   	; 0x6fb0 <gmtime>
    626a:	00 97       	sbiw	r24, 0x00	; 0

        if(tmp == NULL || !rtc_write(tmp))
    626c:	81 f4       	brne	.+32     	; 0x628e <rtc_init+0x60>
    626e:	81 e4       	ldi	r24, 0x41	; 65
        {
            printf("rtc_init  write epoch failed\n");
    6270:	94 e0       	ldi	r25, 0x04	; 4
    6272:	a0 e0       	ldi	r26, 0x00	; 0
    6274:	ed b7       	in	r30, 0x3d	; 61
    6276:	fe b7       	in	r31, 0x3e	; 62
    6278:	81 83       	std	Z+1, r24	; 0x01
    627a:	92 83       	std	Z+2, r25	; 0x02
    627c:	a3 83       	std	Z+3, r26	; 0x03
    627e:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    6282:	10 92 f6 19 	sts	0x19F6, r1	; 0x8019f6 <rtc_ok+0x1>
            rtc_ok = 0;
    6286:	10 92 f5 19 	sts	0x19F5, r1	; 0x8019f5 <rtc_ok>
            return 0;
    628a:	80 e0       	ldi	r24, 0x00	; 0
    628c:	0e c0       	rjmp	.+28     	; 0x62aa <rtc_init+0x7c>
            return 0;
        }

        tmp = gmtime(&seconds);

        if(tmp == NULL || !rtc_write(tmp))
    628e:	ef de       	rcall	.-546    	; 0x606e <rtc_write>
    6290:	88 23       	and	r24, r24
    6292:	69 f3       	breq	.-38     	; 0x626e <rtc_init+0x40>
            printf("rtc_init  write epoch failed\n");
            rtc_ok = 0;
            return 0;
        }

        if(rtc_run(1) < 0)                        // START RTC
    6294:	81 e0       	ldi	r24, 0x01	; 1
    6296:	90 e0       	ldi	r25, 0x00	; 0
    6298:	83 df       	rcall	.-250    	; 0x61a0 <rtc_run>
    629a:	97 fd       	sbrc	r25, 7
    629c:	f2 cf       	rjmp	.-28     	; 0x6282 <rtc_init+0x54>
    629e:	81 e0       	ldi	r24, 0x01	; 1
        {
            rtc_ok = 0;                           // Fail
            return 0;
        }
    }
    rtc_ok = 1;
    62a0:	90 e0       	ldi	r25, 0x00	; 0
    62a2:	90 93 f6 19 	sts	0x19F6, r25	; 0x8019f6 <rtc_ok+0x1>
    62a6:	80 93 f5 19 	sts	0x19F5, r24	; 0x8019f5 <rtc_ok>
    62aa:	27 96       	adiw	r28, 0x07	; 7
    return 1;
}
    62ac:	e4 e0       	ldi	r30, 0x04	; 4
    62ae:	0c 94 29 e7 	jmp	0x1ce52	; 0x1ce52 <__epilogue_restores__+0x1c>

000062b2 <islower>:
    62b2:	9c 01       	movw	r18, r24
    if(!ptr)
        return(ptr);
    strncpy(ptr,str,len);
    return(ptr);

}
    62b4:	21 56       	subi	r18, 0x61	; 97
    62b6:	31 09       	sbc	r19, r1
    62b8:	81 e0       	ldi	r24, 0x01	; 1
    62ba:	90 e0       	ldi	r25, 0x00	; 0
    62bc:	2a 31       	cpi	r18, 0x1A	; 26
    62be:	31 05       	cpc	r19, r1
    62c0:	10 f0       	brcs	.+4      	; 0x62c6 <islower+0x14>
    62c2:	80 e0       	ldi	r24, 0x00	; 0
    62c4:	90 e0       	ldi	r25, 0x00	; 0
    62c6:	08 95       	ret

000062c8 <toupper>:
    62c8:	cf 93       	push	r28
    62ca:	df 93       	push	r29
    62cc:	ec 01       	movw	r28, r24
    62ce:	f1 df       	rcall	.-30     	; 0x62b2 <islower>
    62d0:	89 2b       	or	r24, r25
    62d2:	19 f0       	breq	.+6      	; 0x62da <toupper+0x12>
    62d4:	ce 01       	movw	r24, r28
    62d6:	80 97       	sbiw	r24, 0x20	; 32
    62d8:	01 c0       	rjmp	.+2      	; 0x62dc <toupper+0x14>
    62da:	ce 01       	movw	r24, r28
    62dc:	df 91       	pop	r29
    62de:	cf 91       	pop	r28
    62e0:	08 95       	ret

000062e2 <strcpy>:
    62e2:	fc 01       	movw	r30, r24
    62e4:	db 01       	movw	r26, r22
    62e6:	2d 91       	ld	r18, X+
    62e8:	bd 01       	movw	r22, r26
    62ea:	01 96       	adiw	r24, 0x01	; 1
    62ec:	22 23       	and	r18, r18
    62ee:	11 f0       	breq	.+4      	; 0x62f4 <strcpy+0x12>
    62f0:	20 83       	st	Z, r18
    62f2:	f7 cf       	rjmp	.-18     	; 0x62e2 <strcpy>
    62f4:	10 82       	st	Z, r1
    62f6:	08 95       	ret

000062f8 <strncpy>:
    62f8:	db 01       	movw	r26, r22
    62fa:	fc 01       	movw	r30, r24
    62fc:	2d 91       	ld	r18, X+
    62fe:	21 11       	cpse	r18, r1
    6300:	03 c0       	rjmp	.+6      	; 0x6308 <strncpy+0x10>
    6302:	4e 0f       	add	r20, r30
    6304:	5f 1f       	adc	r21, r31
    6306:	08 c0       	rjmp	.+16     	; 0x6318 <strncpy+0x20>
    6308:	41 15       	cp	r20, r1
    630a:	51 05       	cpc	r21, r1
    630c:	21 f0       	breq	.+8      	; 0x6316 <strncpy+0x1e>
    630e:	21 93       	st	Z+, r18
    6310:	41 50       	subi	r20, 0x01	; 1
    6312:	51 09       	sbc	r21, r1
    6314:	f3 cf       	rjmp	.-26     	; 0x62fc <strncpy+0x4>
    6316:	08 95       	ret
    6318:	4e 17       	cp	r20, r30
    631a:	5f 07       	cpc	r21, r31
    631c:	11 f0       	breq	.+4      	; 0x6322 <strncpy+0x2a>
    631e:	11 92       	st	Z+, r1
    6320:	fb cf       	rjmp	.-10     	; 0x6318 <strncpy+0x20>
    6322:	08 95       	ret

00006324 <strcat>:
    6324:	cf 93       	push	r28
    6326:	df 93       	push	r29
    6328:	d8 2f       	mov	r29, r24
    632a:	c9 2f       	mov	r28, r25
    632c:	28 2f       	mov	r18, r24
    632e:	39 2f       	mov	r19, r25
    6330:	c9 01       	movw	r24, r18
    6332:	2f 5f       	subi	r18, 0xFF	; 255
    6334:	3f 4f       	sbci	r19, 0xFF	; 255
    6336:	fc 01       	movw	r30, r24
    6338:	40 81       	ld	r20, Z
    633a:	41 11       	cpse	r20, r1
    633c:	f9 cf       	rjmp	.-14     	; 0x6330 <strcat+0xc>
    633e:	d1 df       	rcall	.-94     	; 0x62e2 <strcpy>
    6340:	8d 2f       	mov	r24, r29
    6342:	9c 2f       	mov	r25, r28
    6344:	df 91       	pop	r29
    6346:	cf 91       	pop	r28
    6348:	08 95       	ret

0000634a <reverse>:
    634a:	fc 01       	movw	r30, r24
    634c:	01 90       	ld	r0, Z+
    634e:	00 20       	and	r0, r0
    6350:	e9 f7       	brne	.-6      	; 0x634c <reverse+0x2>
    6352:	31 97       	sbiw	r30, 0x01	; 1
    6354:	e8 1b       	sub	r30, r24
    6356:	f9 0b       	sbc	r31, r25
    6358:	af 01       	movw	r20, r30
    635a:	55 95       	asr	r21
    635c:	47 95       	ror	r20
    635e:	e8 0f       	add	r30, r24
    6360:	f9 1f       	adc	r31, r25
    6362:	dc 01       	movw	r26, r24
    6364:	9d 01       	movw	r18, r26
    6366:	28 1b       	sub	r18, r24
    6368:	39 0b       	sbc	r19, r25
    636a:	24 17       	cp	r18, r20
    636c:	35 07       	cpc	r19, r21
    636e:	2c f4       	brge	.+10     	; 0x637a <reverse+0x30>
    6370:	22 91       	ld	r18, -Z
    6372:	3c 91       	ld	r19, X
    6374:	30 83       	st	Z, r19
    6376:	2d 93       	st	X+, r18
    6378:	f5 cf       	rjmp	.-22     	; 0x6364 <reverse+0x1a>
    637a:	08 95       	ret

0000637c <strupper>:
    637c:	cf 93       	push	r28
    637e:	df 93       	push	r29
    6380:	ec 01       	movw	r28, r24
    6382:	88 81       	ld	r24, Y
    6384:	88 23       	and	r24, r24
    6386:	21 f0       	breq	.+8      	; 0x6390 <strupper+0x14>
    6388:	90 e0       	ldi	r25, 0x00	; 0
    638a:	9e df       	rcall	.-196    	; 0x62c8 <toupper>
    638c:	89 93       	st	Y+, r24
    638e:	f9 cf       	rjmp	.-14     	; 0x6382 <strupper+0x6>
    6390:	df 91       	pop	r29
    6392:	cf 91       	pop	r28
    6394:	08 95       	ret

00006396 <strcmp>:
    6396:	dc 01       	movw	r26, r24
    6398:	fb 01       	movw	r30, r22
    639a:	2d 91       	ld	r18, X+
    639c:	41 91       	ld	r20, Z+
    639e:	50 e0       	ldi	r21, 0x00	; 0
    63a0:	30 e0       	ldi	r19, 0x00	; 0
    63a2:	c9 01       	movw	r24, r18
    63a4:	84 1b       	sub	r24, r20
    63a6:	95 0b       	sbc	r25, r21
    63a8:	11 f4       	brne	.+4      	; 0x63ae <strcmp+0x18>
    63aa:	45 2b       	or	r20, r21
    63ac:	b1 f7       	brne	.-20     	; 0x639a <strcmp+0x4>
    63ae:	08 95       	ret

000063b0 <strcasecmp>:
    63b0:	ef 92       	push	r14
    63b2:	ff 92       	push	r15
    63b4:	0f 93       	push	r16
    63b6:	1f 93       	push	r17
    63b8:	cf 93       	push	r28
    63ba:	df 93       	push	r29
    63bc:	7c 01       	movw	r14, r24
    63be:	8b 01       	movw	r16, r22
    63c0:	f7 01       	movw	r30, r14
    63c2:	81 91       	ld	r24, Z+
    63c4:	7f 01       	movw	r14, r30
    63c6:	90 e0       	ldi	r25, 0x00	; 0
    63c8:	7f df       	rcall	.-258    	; 0x62c8 <toupper>
    63ca:	ec 01       	movw	r28, r24
    63cc:	f8 01       	movw	r30, r16
    63ce:	81 91       	ld	r24, Z+
    63d0:	8f 01       	movw	r16, r30
    63d2:	90 e0       	ldi	r25, 0x00	; 0
    63d4:	79 df       	rcall	.-270    	; 0x62c8 <toupper>
    63d6:	9c 01       	movw	r18, r24
    63d8:	ce 01       	movw	r24, r28
    63da:	82 1b       	sub	r24, r18
    63dc:	93 0b       	sbc	r25, r19
    63de:	11 f4       	brne	.+4      	; 0x63e4 <strcasecmp+0x34>
    63e0:	23 2b       	or	r18, r19
    63e2:	71 f7       	brne	.-36     	; 0x63c0 <strcasecmp+0x10>
    63e4:	cd b7       	in	r28, 0x3d	; 61
    63e6:	de b7       	in	r29, 0x3e	; 62
    63e8:	e6 e0       	ldi	r30, 0x06	; 6
    63ea:	0c 94 27 e7 	jmp	0x1ce4e	; 0x1ce4e <__epilogue_restores__+0x18>

000063ee <strncasecmp>:
    63ee:	a0 e0       	ldi	r26, 0x00	; 0
    63f0:	b0 e0       	ldi	r27, 0x00	; 0
    63f2:	ed ef       	ldi	r30, 0xFD	; 253
    63f4:	f1 e3       	ldi	r31, 0x31	; 49
    63f6:	0c 94 09 e7 	jmp	0x1ce12	; 0x1ce12 <__prologue_saves__+0x14>
    63fa:	8c 01       	movw	r16, r24
    63fc:	7b 01       	movw	r14, r22
    63fe:	6c 01       	movw	r12, r24
    6400:	c4 0e       	add	r12, r20
    6402:	d5 1e       	adc	r13, r21
    6404:	0c 15       	cp	r16, r12
    6406:	1d 05       	cpc	r17, r13
    6408:	99 f0       	breq	.+38     	; 0x6430 <strncasecmp+0x42>
    640a:	f8 01       	movw	r30, r16
    640c:	81 91       	ld	r24, Z+
    640e:	8f 01       	movw	r16, r30
    6410:	90 e0       	ldi	r25, 0x00	; 0
    6412:	5a df       	rcall	.-332    	; 0x62c8 <toupper>
    6414:	ec 01       	movw	r28, r24
    6416:	f7 01       	movw	r30, r14
    6418:	81 91       	ld	r24, Z+
    641a:	7f 01       	movw	r14, r30
    641c:	90 e0       	ldi	r25, 0x00	; 0
    641e:	54 df       	rcall	.-344    	; 0x62c8 <toupper>
    6420:	9c 01       	movw	r18, r24
    6422:	ce 01       	movw	r24, r28
    6424:	82 1b       	sub	r24, r18
    6426:	93 0b       	sbc	r25, r19
    6428:	29 f4       	brne	.+10     	; 0x6434 <strncasecmp+0x46>
    642a:	23 2b       	or	r18, r19
    642c:	59 f7       	brne	.-42     	; 0x6404 <strncasecmp+0x16>
    642e:	02 c0       	rjmp	.+4      	; 0x6434 <strncasecmp+0x46>
    6430:	80 e0       	ldi	r24, 0x00	; 0
    6432:	90 e0       	ldi	r25, 0x00	; 0
    6434:	cd b7       	in	r28, 0x3d	; 61
    6436:	de b7       	in	r29, 0x3e	; 62
    6438:	e8 e0       	ldi	r30, 0x08	; 8
    643a:	0c 94 25 e7 	jmp	0x1ce4a	; 0x1ce4a <__epilogue_restores__+0x14>

0000643e <stralloc>:
///
///@return pointer to alocated string.
///@return NULL on out of memory.
MEMSPACE
char *stralloc(char *str)
{
    643e:	0f 93       	push	r16
    6440:	1f 93       	push	r17
    6442:	cf 93       	push	r28
    6444:	df 93       	push	r29
    char *ptr;
    int len;

    if(!str)
    6446:	00 97       	sbiw	r24, 0x00	; 0
    6448:	99 f0       	breq	.+38     	; 0x6470 <stralloc+0x32>
    644a:	ec 01       	movw	r28, r24
        return(str);;
    len  = strlen(str);
    644c:	fc 01       	movw	r30, r24
    644e:	01 90       	ld	r0, Z+
    6450:	00 20       	and	r0, r0
    6452:	e9 f7       	brne	.-6      	; 0x644e <stralloc+0x10>
    6454:	cf 01       	movw	r24, r30
    ptr = safecalloc(len+1,1);
    6456:	61 e0       	ldi	r22, 0x01	; 1
    6458:	70 e0       	ldi	r23, 0x00	; 0
    645a:	8c 1b       	sub	r24, r28
    645c:	9d 0b       	sbc	r25, r29
    645e:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <safecalloc>
    6462:	8c 01       	movw	r16, r24
    if(!ptr)
    6464:	00 97       	sbiw	r24, 0x00	; 0
    6466:	21 f0       	breq	.+8      	; 0x6470 <stralloc+0x32>
        return(ptr);
    strcpy(ptr,str);
    6468:	be 01       	movw	r22, r28
    646a:	3b df       	rcall	.-394    	; 0x62e2 <strcpy>
    return(ptr);
    646c:	c8 01       	movw	r24, r16
    646e:	02 c0       	rjmp	.+4      	; 0x6474 <stralloc+0x36>
    6470:	80 e0       	ldi	r24, 0x00	; 0
    6472:	90 e0       	ldi	r25, 0x00	; 0
}
    6474:	df 91       	pop	r29
    6476:	cf 91       	pop	r28
    6478:	1f 91       	pop	r17
    647a:	0f 91       	pop	r16
    647c:	08 95       	ret

0000647e <sep>:
        return(0);

    if(strncmp(str,pat,patlen) == 0)
        return(len);
    return(0);
}
    647e:	00 d0       	rcall	.+0      	; 0x6480 <sep+0x2>
    6480:	1f 92       	push	r1
    6482:	8e e1       	ldi	r24, 0x1E	; 30
    6484:	95 e0       	ldi	r25, 0x05	; 5
    6486:	a0 e0       	ldi	r26, 0x00	; 0
    6488:	ed b7       	in	r30, 0x3d	; 61
    648a:	fe b7       	in	r31, 0x3e	; 62
    648c:	81 83       	std	Z+1, r24	; 0x01
    648e:	92 83       	std	Z+2, r25	; 0x02
    6490:	a3 83       	std	Z+3, r26	; 0x03
    6492:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    6496:	0f 90       	pop	r0
    6498:	0f 90       	pop	r0
    649a:	0f 90       	pop	r0
    649c:	08 95       	ret

0000649e <trim_tail>:
    649e:	00 97       	sbiw	r24, 0x00	; 0
    64a0:	69 f0       	breq	.+26     	; 0x64bc <trim_tail+0x1e>
    64a2:	fc 01       	movw	r30, r24
    64a4:	01 90       	ld	r0, Z+
    64a6:	00 20       	and	r0, r0
    64a8:	e9 f7       	brne	.-6      	; 0x64a4 <trim_tail+0x6>
    64aa:	31 97       	sbiw	r30, 0x01	; 1
    64ac:	e8 17       	cp	r30, r24
    64ae:	f9 07       	cpc	r31, r25
    64b0:	29 f0       	breq	.+10     	; 0x64bc <trim_tail+0x1e>
    64b2:	22 91       	ld	r18, -Z
    64b4:	21 32       	cpi	r18, 0x21	; 33
    64b6:	10 f4       	brcc	.+4      	; 0x64bc <trim_tail+0x1e>
    64b8:	10 82       	st	Z, r1
    64ba:	f8 cf       	rjmp	.-16     	; 0x64ac <trim_tail+0xe>
    64bc:	08 95       	ret

000064be <skipspaces>:
    64be:	00 97       	sbiw	r24, 0x00	; 0
    64c0:	39 f0       	breq	.+14     	; 0x64d0 <skipspaces+0x12>
    64c2:	fc 01       	movw	r30, r24
    64c4:	cf 01       	movw	r24, r30
    64c6:	21 91       	ld	r18, Z+
    64c8:	20 32       	cpi	r18, 0x20	; 32
    64ca:	e1 f3       	breq	.-8      	; 0x64c4 <skipspaces+0x6>
    64cc:	29 30       	cpi	r18, 0x09	; 9
    64ce:	d1 f3       	breq	.-12     	; 0x64c4 <skipspaces+0x6>
    64d0:	08 95       	ret

000064d2 <MATCH>:
    64d2:	cf 93       	push	r28
    64d4:	df 93       	push	r29
    64d6:	fb 01       	movw	r30, r22
    64d8:	01 90       	ld	r0, Z+
    64da:	00 20       	and	r0, r0
    64dc:	e9 f7       	brne	.-6      	; 0x64d8 <MATCH+0x6>
    64de:	31 97       	sbiw	r30, 0x01	; 1
    64e0:	ef 01       	movw	r28, r30
    64e2:	c6 1b       	sub	r28, r22
    64e4:	d7 0b       	sbc	r29, r23
    64e6:	57 df       	rcall	.-338    	; 0x6396 <strcmp>
    64e8:	89 2b       	or	r24, r25
    64ea:	11 f4       	brne	.+4      	; 0x64f0 <MATCH+0x1e>
    64ec:	ce 01       	movw	r24, r28
    64ee:	02 c0       	rjmp	.+4      	; 0x64f4 <MATCH+0x22>
    64f0:	80 e0       	ldi	r24, 0x00	; 0
    64f2:	90 e0       	ldi	r25, 0x00	; 0
    64f4:	df 91       	pop	r29
    64f6:	cf 91       	pop	r28
    64f8:	08 95       	ret

000064fa <MATCHI>:
    64fa:	cf 93       	push	r28
    64fc:	df 93       	push	r29
    64fe:	fb 01       	movw	r30, r22
    6500:	01 90       	ld	r0, Z+
    6502:	00 20       	and	r0, r0
    6504:	e9 f7       	brne	.-6      	; 0x6500 <MATCHI+0x6>
    6506:	31 97       	sbiw	r30, 0x01	; 1
    6508:	ef 01       	movw	r28, r30
    650a:	c6 1b       	sub	r28, r22
    650c:	d7 0b       	sbc	r29, r23
    650e:	50 df       	rcall	.-352    	; 0x63b0 <strcasecmp>
    6510:	89 2b       	or	r24, r25
    6512:	11 f4       	brne	.+4      	; 0x6518 <MATCHI+0x1e>
    6514:	ce 01       	movw	r24, r28
    6516:	02 c0       	rjmp	.+4      	; 0x651c <MATCHI+0x22>
    6518:	80 e0       	ldi	r24, 0x00	; 0
    651a:	90 e0       	ldi	r25, 0x00	; 0
    651c:	df 91       	pop	r29
    651e:	cf 91       	pop	r28
    6520:	08 95       	ret

00006522 <MATCHARGS>:
    6522:	a9 e0       	ldi	r26, 0x09	; 9
    6524:	b0 e0       	ldi	r27, 0x00	; 0
    6526:	e7 e9       	ldi	r30, 0x97	; 151
    6528:	f2 e3       	ldi	r31, 0x32	; 50
    652a:	0c 94 0b e7 	jmp	0x1ce16	; 0x1ce16 <__prologue_saves__+0x18>
    652e:	eb 01       	movw	r28, r22
    6530:	8a 01       	movw	r16, r20
    6532:	79 01       	movw	r14, r18
    6534:	e2 df       	rcall	.-60     	; 0x64fa <MATCHI>
    6536:	00 97       	sbiw	r24, 0x00	; 0
    6538:	c1 f0       	breq	.+48     	; 0x656a <MATCHARGS+0x48>
    653a:	e0 16       	cp	r14, r16
    653c:	f1 06       	cpc	r15, r17
    653e:	9c f4       	brge	.+38     	; 0x6566 <MATCHARGS+0x44>
    6540:	ed b7       	in	r30, 0x3d	; 61
    6542:	fe b7       	in	r31, 0x3e	; 62
    6544:	f1 86       	std	Z+9, r15	; 0x09
    6546:	e0 86       	std	Z+8, r14	; 0x08
    6548:	17 83       	std	Z+7, r17	; 0x07
    654a:	06 83       	std	Z+6, r16	; 0x06
    654c:	d5 83       	std	Z+5, r29	; 0x05
    654e:	c4 83       	std	Z+4, r28	; 0x04
    6550:	88 ef       	ldi	r24, 0xF8	; 248
    6552:	94 e0       	ldi	r25, 0x04	; 4
    6554:	a0 e0       	ldi	r26, 0x00	; 0
    6556:	81 83       	std	Z+1, r24	; 0x01
    6558:	92 83       	std	Z+2, r25	; 0x02
    655a:	a3 83       	std	Z+3, r26	; 0x03
    655c:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    6560:	80 e0       	ldi	r24, 0x00	; 0
    6562:	90 e0       	ldi	r25, 0x00	; 0
    6564:	02 c0       	rjmp	.+4      	; 0x656a <MATCHARGS+0x48>
    6566:	81 e0       	ldi	r24, 0x01	; 1
    6568:	90 e0       	ldi	r25, 0x00	; 0
    656a:	cd b7       	in	r28, 0x3d	; 61
    656c:	de b7       	in	r29, 0x3e	; 62
    656e:	29 96       	adiw	r28, 0x09	; 9
    6570:	e6 e0       	ldi	r30, 0x06	; 6
    6572:	0c 94 27 e7 	jmp	0x1ce4e	; 0x1ce4e <__epilogue_restores__+0x18>

00006576 <MATCHI_LEN>:
    6576:	cf 93       	push	r28
    6578:	df 93       	push	r29
    657a:	00 97       	sbiw	r24, 0x00	; 0
    657c:	89 f0       	breq	.+34     	; 0x65a0 <MATCHI_LEN+0x2a>
    657e:	61 15       	cp	r22, r1
    6580:	71 05       	cpc	r23, r1
    6582:	71 f0       	breq	.+28     	; 0x65a0 <MATCHI_LEN+0x2a>
    6584:	eb 01       	movw	r28, r22
    6586:	09 90       	ld	r0, Y+
    6588:	00 20       	and	r0, r0
    658a:	e9 f7       	brne	.-6      	; 0x6586 <MATCHI_LEN+0x10>
    658c:	21 97       	sbiw	r28, 0x01	; 1
    658e:	c6 1b       	sub	r28, r22
    6590:	d7 0b       	sbc	r29, r23
    6592:	31 f0       	breq	.+12     	; 0x65a0 <MATCHI_LEN+0x2a>
    6594:	ae 01       	movw	r20, r28
    6596:	2b df       	rcall	.-426    	; 0x63ee <strncasecmp>
    6598:	89 2b       	or	r24, r25
    659a:	11 f4       	brne	.+4      	; 0x65a0 <MATCHI_LEN+0x2a>
    659c:	ce 01       	movw	r24, r28
    659e:	02 c0       	rjmp	.+4      	; 0x65a4 <MATCHI_LEN+0x2e>
    65a0:	80 e0       	ldi	r24, 0x00	; 0
    65a2:	90 e0       	ldi	r25, 0x00	; 0
    65a4:	df 91       	pop	r29
    65a6:	cf 91       	pop	r28
    65a8:	08 95       	ret

000065aa <split_args>:
    65aa:	a0 e0       	ldi	r26, 0x00	; 0
    65ac:	b0 e0       	ldi	r27, 0x00	; 0
    65ae:	eb ed       	ldi	r30, 0xDB	; 219
    65b0:	f2 e3       	ldi	r31, 0x32	; 50
    65b2:	0c 94 09 e7 	jmp	0x1ce12	; 0x1ce12 <__prologue_saves__+0x14>
    65b6:	dc 01       	movw	r26, r24
    65b8:	6a 01       	movw	r12, r20
    65ba:	8b 01       	movw	r16, r22
    65bc:	fb 01       	movw	r30, r22
    65be:	80 e0       	ldi	r24, 0x00	; 0
    65c0:	90 e0       	ldi	r25, 0x00	; 0
    65c2:	8c 15       	cp	r24, r12
    65c4:	9d 05       	cpc	r25, r13
    65c6:	24 f4       	brge	.+8      	; 0x65d0 <split_args+0x26>
    65c8:	11 92       	st	Z+, r1
    65ca:	11 92       	st	Z+, r1
    65cc:	01 96       	adiw	r24, 0x01	; 1
    65ce:	f9 cf       	rjmp	.-14     	; 0x65c2 <split_args+0x18>
    65d0:	c1 14       	cp	r12, r1
    65d2:	d1 04       	cpc	r13, r1
    65d4:	d9 f1       	breq	.+118    	; 0x664c <split_args+0xa2>
    65d6:	10 97       	sbiw	r26, 0x00	; 0
    65d8:	c9 f1       	breq	.+114    	; 0x664c <split_args+0xa2>
    65da:	ee 24       	eor	r14, r14
    65dc:	e3 94       	inc	r14
    65de:	f1 2c       	mov	r15, r1
    65e0:	c0 e0       	ldi	r28, 0x00	; 0
    65e2:	d0 e0       	ldi	r29, 0x00	; 0
    65e4:	8c 91       	ld	r24, X
    65e6:	88 23       	and	r24, r24
    65e8:	b1 f1       	breq	.+108    	; 0x6656 <split_args+0xac>
    65ea:	cc 15       	cp	r28, r12
    65ec:	dd 05       	cpc	r29, r13
    65ee:	9c f5       	brge	.+102    	; 0x6656 <split_args+0xac>
    65f0:	cd 01       	movw	r24, r26
    65f2:	65 df       	rcall	.-310    	; 0x64be <skipspaces>
    65f4:	dc 01       	movw	r26, r24
    65f6:	2c 91       	ld	r18, X
    65f8:	22 23       	and	r18, r18
    65fa:	69 f1       	breq	.+90     	; 0x6656 <split_args+0xac>
    65fc:	22 32       	cpi	r18, 0x22	; 34
    65fe:	79 f4       	brne	.+30     	; 0x661e <split_args+0x74>
    6600:	fc 01       	movw	r30, r24
    6602:	31 96       	adiw	r30, 0x01	; 1
    6604:	d8 01       	movw	r26, r16
    6606:	ed 93       	st	X+, r30
    6608:	fc 93       	st	X, r31
    660a:	df 01       	movw	r26, r30
    660c:	80 81       	ld	r24, Z
    660e:	31 96       	adiw	r30, 0x01	; 1
    6610:	88 23       	and	r24, r24
    6612:	a9 f0       	breq	.+42     	; 0x663e <split_args+0x94>
    6614:	82 32       	cpi	r24, 0x22	; 34
    6616:	c9 f7       	brne	.-14     	; 0x660a <split_args+0x60>
    6618:	1c 92       	st	X, r1
    661a:	df 01       	movw	r26, r30
    661c:	10 c0       	rjmp	.+32     	; 0x663e <split_args+0x94>
    661e:	f8 01       	movw	r30, r16
    6620:	91 83       	std	Z+1, r25	; 0x01
    6622:	80 83       	st	Z, r24
    6624:	fc 01       	movw	r30, r24
    6626:	2e 2f       	mov	r18, r30
    6628:	9f 2f       	mov	r25, r31
    662a:	81 91       	ld	r24, Z+
    662c:	3f ed       	ldi	r19, 0xDF	; 223
    662e:	38 0f       	add	r19, r24
    6630:	3e 35       	cpi	r19, 0x5E	; 94
    6632:	c8 f3       	brcs	.-14     	; 0x6626 <split_args+0x7c>
    6634:	88 23       	and	r24, r24
    6636:	69 f0       	breq	.+26     	; 0x6652 <split_args+0xa8>
    6638:	a2 2f       	mov	r26, r18
    663a:	b9 2f       	mov	r27, r25
    663c:	1d 92       	st	X+, r1
    663e:	21 96       	adiw	r28, 0x01	; 1
    6640:	ff ef       	ldi	r31, 0xFF	; 255
    6642:	ef 1a       	sub	r14, r31
    6644:	ff 0a       	sbc	r15, r31
    6646:	0e 5f       	subi	r16, 0xFE	; 254
    6648:	1f 4f       	sbci	r17, 0xFF	; 255
    664a:	cc cf       	rjmp	.-104    	; 0x65e4 <split_args+0x3a>
    664c:	80 e0       	ldi	r24, 0x00	; 0
    664e:	90 e0       	ldi	r25, 0x00	; 0
    6650:	03 c0       	rjmp	.+6      	; 0x6658 <split_args+0xae>
    6652:	c7 01       	movw	r24, r14
    6654:	01 c0       	rjmp	.+2      	; 0x6658 <split_args+0xae>
    6656:	ce 01       	movw	r24, r28
    6658:	cd b7       	in	r28, 0x3d	; 61
    665a:	de b7       	in	r29, 0x3e	; 62
    665c:	e8 e0       	ldi	r30, 0x08	; 8
    665e:	0c 94 25 e7 	jmp	0x1ce4a	; 0x1ce4a <__epilogue_restores__+0x14>

00006662 <get_token>:
    6662:	ef 92       	push	r14
    6664:	ff 92       	push	r15
    6666:	0f 93       	push	r16
    6668:	1f 93       	push	r17
    666a:	cf 93       	push	r28
    666c:	df 93       	push	r29
    666e:	eb 01       	movw	r28, r22
    6670:	8a 01       	movw	r16, r20
    6672:	18 82       	st	Y, r1
    6674:	00 97       	sbiw	r24, 0x00	; 0
    6676:	89 f1       	breq	.+98     	; 0x66da <get_token+0x78>
    6678:	fc 01       	movw	r30, r24
    667a:	20 81       	ld	r18, Z
    667c:	22 23       	and	r18, r18
    667e:	79 f1       	breq	.+94     	; 0x66de <get_token+0x7c>
    6680:	1e df       	rcall	.-452    	; 0x64be <skipspaces>
    6682:	7c 01       	movw	r14, r24
    6684:	0c df       	rcall	.-488    	; 0x649e <trim_tail>
    6686:	f7 01       	movw	r30, r14
    6688:	cf 01       	movw	r24, r30
    668a:	21 91       	ld	r18, Z+
    668c:	21 32       	cpi	r18, 0x21	; 33
    668e:	e0 f0       	brcs	.+56     	; 0x66c8 <get_token+0x66>
    6690:	10 16       	cp	r1, r16
    6692:	11 06       	cpc	r1, r17
    6694:	cc f4       	brge	.+50     	; 0x66c8 <get_token+0x66>
    6696:	22 32       	cpi	r18, 0x22	; 34
    6698:	79 f4       	brne	.+30     	; 0x66b8 <get_token+0x56>
    669a:	fc 01       	movw	r30, r24
    669c:	31 96       	adiw	r30, 0x01	; 1
    669e:	0c 0f       	add	r16, r28
    66a0:	1d 1f       	adc	r17, r29
    66a2:	cf 01       	movw	r24, r30
    66a4:	21 91       	ld	r18, Z+
    66a6:	22 23       	and	r18, r18
    66a8:	79 f0       	breq	.+30     	; 0x66c8 <get_token+0x66>
    66aa:	22 32       	cpi	r18, 0x22	; 34
    66ac:	59 f0       	breq	.+22     	; 0x66c4 <get_token+0x62>
    66ae:	c0 17       	cp	r28, r16
    66b0:	d1 07       	cpc	r29, r17
    66b2:	51 f0       	breq	.+20     	; 0x66c8 <get_token+0x66>
    66b4:	29 93       	st	Y+, r18
    66b6:	f5 cf       	rjmp	.-22     	; 0x66a2 <get_token+0x40>
    66b8:	2c 32       	cpi	r18, 0x2C	; 44
    66ba:	31 f0       	breq	.+12     	; 0x66c8 <get_token+0x66>
    66bc:	29 93       	st	Y+, r18
    66be:	01 50       	subi	r16, 0x01	; 1
    66c0:	11 09       	sbc	r17, r1
    66c2:	e2 cf       	rjmp	.-60     	; 0x6688 <get_token+0x26>
    66c4:	cf 01       	movw	r24, r30
    66c6:	18 82       	st	Y, r1
    66c8:	fa de       	rcall	.-524    	; 0x64be <skipspaces>
    66ca:	fc 01       	movw	r30, r24
    66cc:	80 81       	ld	r24, Z
    66ce:	8c 32       	cpi	r24, 0x2C	; 44
    66d0:	09 f4       	brne	.+2      	; 0x66d4 <get_token+0x72>
    66d2:	31 96       	adiw	r30, 0x01	; 1
    66d4:	18 82       	st	Y, r1
    66d6:	cf 01       	movw	r24, r30
    66d8:	02 c0       	rjmp	.+4      	; 0x66de <get_token+0x7c>
    66da:	80 e0       	ldi	r24, 0x00	; 0
    66dc:	90 e0       	ldi	r25, 0x00	; 0
    66de:	cd b7       	in	r28, 0x3d	; 61
    66e0:	de b7       	in	r29, 0x3e	; 62
    66e2:	e6 e0       	ldi	r30, 0x06	; 6
    66e4:	0c 94 27 e7 	jmp	0x1ce4e	; 0x1ce4e <__epilogue_restores__+0x18>

000066e8 <get_value>:
/// @param[in] str: string to examine
///
/// @return  value
MEMSPACE
int32_t get_value(char *str)
{
    66e8:	a2 e0       	ldi	r26, 0x02	; 2
    66ea:	b0 e0       	ldi	r27, 0x00	; 0
    66ec:	ea e7       	ldi	r30, 0x7A	; 122
    66ee:	f3 e3       	ldi	r31, 0x33	; 51
    66f0:	0c 94 0d e7 	jmp	0x1ce1a	; 0x1ce1a <__prologue_saves__+0x1c>
    int base;
    int ret;
    char *ptr;
    char *endptr;

    if(!str || *str == 0)
    66f4:	00 97       	sbiw	r24, 0x00	; 0
    66f6:	79 f1       	breq	.+94     	; 0x6756 <get_value+0x6e>
    66f8:	fc 01       	movw	r30, r24
    66fa:	20 81       	ld	r18, Z
    66fc:	22 23       	and	r18, r18
    66fe:	59 f1       	breq	.+86     	; 0x6756 <get_value+0x6e>
        return(0);

    ptr = skipspaces(str);
    6700:	de de       	rcall	.-580    	; 0x64be <skipspaces>
    6702:	8c 01       	movw	r16, r24
    base = 10;

// convert number base 10, 16, 8 and 2
    if( (ret = MATCHI_LEN(ptr,"0x")) )
    6704:	6f e2       	ldi	r22, 0x2F	; 47
    6706:	73 e0       	ldi	r23, 0x03	; 3
    6708:	36 df       	rcall	.-404    	; 0x6576 <MATCHI_LEN>
    670a:	00 97       	sbiw	r24, 0x00	; 0
    670c:	29 f0       	breq	.+10     	; 0x6718 <get_value+0x30>
    {
        base = 16;
        ptr += ret;
    670e:	08 0f       	add	r16, r24
    6710:	19 1f       	adc	r17, r25
    base = 10;

// convert number base 10, 16, 8 and 2
    if( (ret = MATCHI_LEN(ptr,"0x")) )
    {
        base = 16;
    6712:	40 e1       	ldi	r20, 0x10	; 16
    6714:	50 e0       	ldi	r21, 0x00	; 0
    6716:	18 c0       	rjmp	.+48     	; 0x6748 <get_value+0x60>
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0o")) )
    6718:	62 e3       	ldi	r22, 0x32	; 50
    671a:	73 e0       	ldi	r23, 0x03	; 3
    671c:	c8 01       	movw	r24, r16
    671e:	2b df       	rcall	.-426    	; 0x6576 <MATCHI_LEN>
    6720:	00 97       	sbiw	r24, 0x00	; 0
    6722:	29 f0       	breq	.+10     	; 0x672e <get_value+0x46>
    {
        base = 8;
        ptr += ret;
    6724:	08 0f       	add	r16, r24
    6726:	19 1f       	adc	r17, r25
        base = 16;
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0o")) )
    {
        base = 8;
    6728:	48 e0       	ldi	r20, 0x08	; 8
    672a:	50 e0       	ldi	r21, 0x00	; 0
    672c:	0d c0       	rjmp	.+26     	; 0x6748 <get_value+0x60>
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    672e:	65 e3       	ldi	r22, 0x35	; 53
    6730:	73 e0       	ldi	r23, 0x03	; 3
    6732:	c8 01       	movw	r24, r16
    6734:	20 df       	rcall	.-448    	; 0x6576 <MATCHI_LEN>
    6736:	00 97       	sbiw	r24, 0x00	; 0
    6738:	29 f0       	breq	.+10     	; 0x6744 <get_value+0x5c>
    {
        base = 2;
        ptr += ret;
    673a:	08 0f       	add	r16, r24
    673c:	19 1f       	adc	r17, r25
        base = 8;
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    {
        base = 2;
    673e:	42 e0       	ldi	r20, 0x02	; 2
    6740:	50 e0       	ldi	r21, 0x00	; 0
    6742:	02 c0       	rjmp	.+4      	; 0x6748 <get_value+0x60>

    if(!str || *str == 0)
        return(0);

    ptr = skipspaces(str);
    base = 10;
    6744:	4a e0       	ldi	r20, 0x0A	; 10
    6746:	50 e0       	ldi	r21, 0x00	; 0
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    {
        base = 2;
        ptr += ret;
    }
    return(strtol(ptr, (char **)&endptr, base));
    6748:	be 01       	movw	r22, r28
    674a:	6f 5f       	subi	r22, 0xFF	; 255
    674c:	7f 4f       	sbci	r23, 0xFF	; 255
    674e:	c8 01       	movw	r24, r16
    6750:	0e 94 6b 47 	call	0x8ed6	; 0x8ed6 <strtol>
    6754:	03 c0       	rjmp	.+6      	; 0x675c <get_value+0x74>
    int ret;
    char *ptr;
    char *endptr;

    if(!str || *str == 0)
        return(0);
    6756:	60 e0       	ldi	r22, 0x00	; 0
    6758:	70 e0       	ldi	r23, 0x00	; 0
    675a:	cb 01       	movw	r24, r22
    {
        base = 2;
        ptr += ret;
    }
    return(strtol(ptr, (char **)&endptr, base));
}
    675c:	22 96       	adiw	r28, 0x02	; 2
    675e:	e4 e0       	ldi	r30, 0x04	; 4
    6760:	0c 94 29 e7 	jmp	0x1ce52	; 0x1ce52 <__epilogue_restores__+0x1c>

00006764 <enable_system_task>:
/// @brief Enable interrupts
/// @return void.
MEMSPACE
void enable_system_task()
{
    sei();
    6764:	78 94       	sei
    6766:	08 95       	ret

00006768 <install_timers_isr>:
///
/// @see ISR().
/// @return void.
MEMSPACE void install_timers_isr()
{
    cli();
    6768:	f8 94       	cli
    TCCR1B=(1<<WGM12) | TIMER1_PRE_1;             // No Prescale
    676a:	89 e0       	ldi	r24, 0x09	; 9
    676c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    TCCR1A=0;
    6770:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    OCR1A=(TIMER1_COUNTS_PER_TIC-1);              // 0 .. count
    6774:	8f e1       	ldi	r24, 0x1F	; 31
    6776:	9e e4       	ldi	r25, 0x4E	; 78
    6778:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    677c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    TIMSK1 |= (1<<OCIE1A);                        //Enable the Output Compare A interrupt
    6780:	ef e6       	ldi	r30, 0x6F	; 111
    6782:	f0 e0       	ldi	r31, 0x00	; 0
    6784:	80 81       	ld	r24, Z
    6786:	82 60       	ori	r24, 0x02	; 2
    6788:	80 83       	st	Z, r24
    sei();
    678a:	78 94       	sei
    678c:	08 95       	ret

0000678e <__vector_13>:
/// @brief AVR Timer Interrupt Vector
///
/// - calls execute_timers() - we call this the System task.
///
ISR(TIMER1_COMPA_vect)
{
    678e:	1f 92       	push	r1
    6790:	0f 92       	push	r0
    6792:	0f b6       	in	r0, 0x3f	; 63
    6794:	0f 92       	push	r0
    6796:	11 24       	eor	r1, r1
    6798:	0b b6       	in	r0, 0x3b	; 59
    679a:	0f 92       	push	r0
    679c:	2f 93       	push	r18
    679e:	3f 93       	push	r19
    67a0:	4f 93       	push	r20
    67a2:	5f 93       	push	r21
    67a4:	6f 93       	push	r22
    67a6:	7f 93       	push	r23
    67a8:	8f 93       	push	r24
    67aa:	9f 93       	push	r25
    67ac:	af 93       	push	r26
    67ae:	bf 93       	push	r27
    67b0:	ef 93       	push	r30
    67b2:	ff 93       	push	r31
    execute_timers();
    67b4:	36 d2       	rcall	.+1132   	; 0x6c22 <execute_timers>
}
    67b6:	ff 91       	pop	r31
    67b8:	ef 91       	pop	r30
    67ba:	bf 91       	pop	r27
    67bc:	af 91       	pop	r26
    67be:	9f 91       	pop	r25
    67c0:	8f 91       	pop	r24
    67c2:	7f 91       	pop	r23
    67c4:	6f 91       	pop	r22
    67c6:	5f 91       	pop	r21
    67c8:	4f 91       	pop	r20
    67ca:	3f 91       	pop	r19
    67cc:	2f 91       	pop	r18
    67ce:	0f 90       	pop	r0
    67d0:	0b be       	out	0x3b, r0	; 59
    67d2:	0f 90       	pop	r0
    67d4:	0f be       	out	0x3f, r0	; 63
    67d6:	0f 90       	pop	r0
    67d8:	1f 90       	pop	r1
    67da:	18 95       	reti

000067dc <clock_gettime>:
///
/// @return 0 on success.
/// @return -1 on error.
MEMSPACE
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    67dc:	0f 93       	push	r16
    67de:	1f 93       	push	r17
    67e0:	cf 93       	push	r28
    67e2:	df 93       	push	r29
    67e4:	fb 01       	movw	r30, r22
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;

// disable interrupts
    cli();
    67e6:	f8 94       	cli

    count1 = TCNT1;
    67e8:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    67ec:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>

    ts->tv_sec = __clock.tv_sec;
    67f0:	80 91 58 1a 	lds	r24, 0x1A58	; 0x801a58 <__clock>
    67f4:	90 91 59 1a 	lds	r25, 0x1A59	; 0x801a59 <__clock+0x1>
    67f8:	a0 91 5a 1a 	lds	r26, 0x1A5A	; 0x801a5a <__clock+0x2>
    67fc:	b0 91 5b 1a 	lds	r27, 0x1A5B	; 0x801a5b <__clock+0x3>
    6800:	80 83       	st	Z, r24
    6802:	91 83       	std	Z+1, r25	; 0x01
    6804:	a2 83       	std	Z+2, r26	; 0x02
    6806:	b3 83       	std	Z+3, r27	; 0x03
    ts->tv_nsec = __clock.tv_nsec;
    6808:	80 91 5c 1a 	lds	r24, 0x1A5C	; 0x801a5c <__clock+0x4>
    680c:	90 91 5d 1a 	lds	r25, 0x1A5D	; 0x801a5d <__clock+0x5>
    6810:	a0 91 5e 1a 	lds	r26, 0x1A5E	; 0x801a5e <__clock+0x6>
    6814:	b0 91 5f 1a 	lds	r27, 0x1A5F	; 0x801a5f <__clock+0x7>
    6818:	84 83       	std	Z+4, r24	; 0x04
    681a:	95 83       	std	Z+5, r25	; 0x05
    681c:	a6 83       	std	Z+6, r26	; 0x06
    681e:	b7 83       	std	Z+7, r27	; 0x07

    count2 = TCNT1;
    6820:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    6824:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>

    if( TIFR1 & (1<<OCF1A) )
    6828:	b1 9b       	sbis	0x16, 1	; 22
    682a:	03 c0       	rjmp	.+6      	; 0x6832 <clock_gettime+0x56>
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;
    682c:	c0 e0       	ldi	r28, 0x00	; 0
    682e:	d0 e0       	ldi	r29, 0x00	; 0
    6830:	3f c0       	rjmp	.+126    	; 0x68b0 <clock_gettime+0xd4>
    count2 = TCNT1;

    if( TIFR1 & (1<<OCF1A) )
        pendingf = 1;

    if (count2 < count1)
    6832:	82 17       	cp	r24, r18
    6834:	93 07       	cpc	r25, r19
    6836:	d0 f1       	brcs	.+116    	; 0x68ac <clock_gettime+0xd0>
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;
    6838:	c0 e0       	ldi	r28, 0x00	; 0
    683a:	d0 e0       	ldi	r29, 0x00	; 0
/// @return -1 on error.
MEMSPACE
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    683c:	40 e0       	ldi	r20, 0x00	; 0
    683e:	50 e0       	ldi	r21, 0x00	; 0
    6840:	ba 01       	movw	r22, r20
    else
    {
        if( pendingf )
            offset = TIMER1_COUNTS_PER_TIC;       // overflow
    }
    offset += count2;
    6842:	9a 01       	movw	r18, r20
    6844:	ab 01       	movw	r20, r22
    6846:	28 0f       	add	r18, r24
    6848:	39 1f       	adc	r19, r25
    684a:	41 1d       	adc	r20, r1
    684c:	51 1d       	adc	r21, r1

// enable interrupts
    sei();
    684e:	78 94       	sei

    offset *= TIMER1_COUNTER_RES;

    ts->tv_nsec += offset;
    6850:	a2 e3       	ldi	r26, 0x32	; 50
    6852:	b0 e0       	ldi	r27, 0x00	; 0
    6854:	0e 94 df e6 	call	0x1cdbe	; 0x1cdbe <__muluhisi3>
    6858:	04 81       	ldd	r16, Z+4	; 0x04
    685a:	15 81       	ldd	r17, Z+5	; 0x05
    685c:	26 81       	ldd	r18, Z+6	; 0x06
    685e:	37 81       	ldd	r19, Z+7	; 0x07
    6860:	dc 01       	movw	r26, r24
    6862:	cb 01       	movw	r24, r22
    6864:	80 0f       	add	r24, r16
    6866:	91 1f       	adc	r25, r17
    6868:	a2 1f       	adc	r26, r18
    686a:	b3 1f       	adc	r27, r19

    if (ts->tv_nsec >= 1000000000L)
    686c:	81 15       	cp	r24, r1
    686e:	2a ec       	ldi	r18, 0xCA	; 202
    6870:	92 07       	cpc	r25, r18
    6872:	2a e9       	ldi	r18, 0x9A	; 154
    6874:	a2 07       	cpc	r26, r18
    6876:	2b e3       	ldi	r18, 0x3B	; 59
    6878:	b2 07       	cpc	r27, r18
    687a:	2c f4       	brge	.+10     	; 0x6886 <clock_gettime+0xaa>
// enable interrupts
    sei();

    offset *= TIMER1_COUNTER_RES;

    ts->tv_nsec += offset;
    687c:	84 83       	std	Z+4, r24	; 0x04
    687e:	95 83       	std	Z+5, r25	; 0x05
    6880:	a6 83       	std	Z+6, r26	; 0x06
    6882:	b7 83       	std	Z+7, r27	; 0x07
    6884:	1a c0       	rjmp	.+52     	; 0x68ba <clock_gettime+0xde>

    if (ts->tv_nsec >= 1000000000L)
    {
        ts->tv_nsec -= 1000000000L;
    6886:	9a 5c       	subi	r25, 0xCA	; 202
    6888:	aa 49       	sbci	r26, 0x9A	; 154
    688a:	bb 43       	sbci	r27, 0x3B	; 59
    688c:	84 83       	std	Z+4, r24	; 0x04
    688e:	95 83       	std	Z+5, r25	; 0x05
    6890:	a6 83       	std	Z+6, r26	; 0x06
    6892:	b7 83       	std	Z+7, r27	; 0x07
        ts->tv_sec++;
    6894:	80 81       	ld	r24, Z
    6896:	91 81       	ldd	r25, Z+1	; 0x01
    6898:	a2 81       	ldd	r26, Z+2	; 0x02
    689a:	b3 81       	ldd	r27, Z+3	; 0x03
    689c:	01 96       	adiw	r24, 0x01	; 1
    689e:	a1 1d       	adc	r26, r1
    68a0:	b1 1d       	adc	r27, r1
    68a2:	80 83       	st	Z, r24
    68a4:	91 83       	std	Z+1, r25	; 0x01
    68a6:	a2 83       	std	Z+2, r26	; 0x02
    68a8:	b3 83       	std	Z+3, r27	; 0x03
    }
    return(errorf);
    68aa:	07 c0       	rjmp	.+14     	; 0x68ba <clock_gettime+0xde>

    if (count2 < count1)
    {
///  note: counter2 < count1 implies ISR flag must be set
        if( !pendingf )
            errorf = -1;                          // counter overflow and NO pending is an error!
    68ac:	cf ef       	ldi	r28, 0xFF	; 255
    68ae:	df ef       	ldi	r29, 0xFF	; 255
        offset = TIMER1_COUNTS_PER_TIC;           // overflow
    68b0:	40 e2       	ldi	r20, 0x20	; 32
    68b2:	5e e4       	ldi	r21, 0x4E	; 78
    68b4:	60 e0       	ldi	r22, 0x00	; 0
    68b6:	70 e0       	ldi	r23, 0x00	; 0
    68b8:	c4 cf       	rjmp	.-120    	; 0x6842 <clock_gettime+0x66>
    {
        ts->tv_nsec -= 1000000000L;
        ts->tv_sec++;
    }
    return(errorf);
}
    68ba:	ce 01       	movw	r24, r28
    68bc:	df 91       	pop	r29
    68be:	cf 91       	pop	r28
    68c0:	1f 91       	pop	r17
    68c2:	0f 91       	pop	r16
    68c4:	08 95       	ret

000068c6 <clock_task>:
void disable_timers()
{
    if(timers_configured && timers_enabled)
    {
        disable_system_task();
        timers_enabled = 0;
    68c6:	80 91 5c 1a 	lds	r24, 0x1A5C	; 0x801a5c <__clock+0x4>
    68ca:	90 91 5d 1a 	lds	r25, 0x1A5D	; 0x801a5d <__clock+0x5>
    68ce:	a0 91 5e 1a 	lds	r26, 0x1A5E	; 0x801a5e <__clock+0x6>
    68d2:	b0 91 5f 1a 	lds	r27, 0x1A5F	; 0x801a5f <__clock+0x7>
    68d6:	80 5c       	subi	r24, 0xC0	; 192
    68d8:	9d 4b       	sbci	r25, 0xBD	; 189
    68da:	a0 4f       	sbci	r26, 0xF0	; 240
    68dc:	bf 4f       	sbci	r27, 0xFF	; 255
    68de:	80 93 5c 1a 	sts	0x1A5C, r24	; 0x801a5c <__clock+0x4>
    68e2:	90 93 5d 1a 	sts	0x1A5D, r25	; 0x801a5d <__clock+0x5>
    68e6:	a0 93 5e 1a 	sts	0x1A5E, r26	; 0x801a5e <__clock+0x6>
    68ea:	b0 93 5f 1a 	sts	0x1A5F, r27	; 0x801a5f <__clock+0x7>
    68ee:	80 91 5c 1a 	lds	r24, 0x1A5C	; 0x801a5c <__clock+0x4>
    68f2:	90 91 5d 1a 	lds	r25, 0x1A5D	; 0x801a5d <__clock+0x5>
    68f6:	a0 91 5e 1a 	lds	r26, 0x1A5E	; 0x801a5e <__clock+0x6>
    68fa:	b0 91 5f 1a 	lds	r27, 0x1A5F	; 0x801a5f <__clock+0x7>
    68fe:	81 15       	cp	r24, r1
    6900:	9a 4c       	sbci	r25, 0xCA	; 202
    6902:	aa 49       	sbci	r26, 0x9A	; 154
    6904:	bb 43       	sbci	r27, 0x3B	; 59
    6906:	dc f0       	brlt	.+54     	; 0x693e <clock_task+0x78>
    6908:	80 91 58 1a 	lds	r24, 0x1A58	; 0x801a58 <__clock>
    690c:	90 91 59 1a 	lds	r25, 0x1A59	; 0x801a59 <__clock+0x1>
    6910:	a0 91 5a 1a 	lds	r26, 0x1A5A	; 0x801a5a <__clock+0x2>
    6914:	b0 91 5b 1a 	lds	r27, 0x1A5B	; 0x801a5b <__clock+0x3>
    6918:	01 96       	adiw	r24, 0x01	; 1
    691a:	a1 1d       	adc	r26, r1
    691c:	b1 1d       	adc	r27, r1
    691e:	80 93 58 1a 	sts	0x1A58, r24	; 0x801a58 <__clock>
    6922:	90 93 59 1a 	sts	0x1A59, r25	; 0x801a59 <__clock+0x1>
    6926:	a0 93 5a 1a 	sts	0x1A5A, r26	; 0x801a5a <__clock+0x2>
    692a:	b0 93 5b 1a 	sts	0x1A5B, r27	; 0x801a5b <__clock+0x3>
    692e:	10 92 5c 1a 	sts	0x1A5C, r1	; 0x801a5c <__clock+0x4>
    6932:	10 92 5d 1a 	sts	0x1A5D, r1	; 0x801a5d <__clock+0x5>
    6936:	10 92 5e 1a 	sts	0x1A5E, r1	; 0x801a5e <__clock+0x6>
    693a:	10 92 5f 1a 	sts	0x1A5F, r1	; 0x801a5f <__clock+0x7>
    693e:	08 95       	ret

00006940 <clock_settime.part.2>:
    6940:	fc 01       	movw	r30, r24
    6942:	84 81       	ldd	r24, Z+4	; 0x04
    6944:	95 81       	ldd	r25, Z+5	; 0x05
    6946:	a6 81       	ldd	r26, Z+6	; 0x06
    6948:	b7 81       	ldd	r27, Z+7	; 0x07
    694a:	80 93 5c 1a 	sts	0x1A5C, r24	; 0x801a5c <__clock+0x4>
    694e:	90 93 5d 1a 	sts	0x1A5D, r25	; 0x801a5d <__clock+0x5>
    6952:	a0 93 5e 1a 	sts	0x1A5E, r26	; 0x801a5e <__clock+0x6>
    6956:	b0 93 5f 1a 	sts	0x1A5F, r27	; 0x801a5f <__clock+0x7>
    695a:	80 81       	ld	r24, Z
    695c:	91 81       	ldd	r25, Z+1	; 0x01
    695e:	a2 81       	ldd	r26, Z+2	; 0x02
    6960:	b3 81       	ldd	r27, Z+3	; 0x03
    6962:	80 93 58 1a 	sts	0x1A58, r24	; 0x801a58 <__clock>
    6966:	90 93 59 1a 	sts	0x1A59, r25	; 0x801a59 <__clock+0x1>
    696a:	a0 93 5a 1a 	sts	0x1A5A, r26	; 0x801a5a <__clock+0x2>
    696e:	b0 93 5b 1a 	sts	0x1A5B, r27	; 0x801a5b <__clock+0x3>
    6972:	80 91 5c 1a 	lds	r24, 0x1A5C	; 0x801a5c <__clock+0x4>
    6976:	90 91 5d 1a 	lds	r25, 0x1A5D	; 0x801a5d <__clock+0x5>
    697a:	a0 91 5e 1a 	lds	r26, 0x1A5E	; 0x801a5e <__clock+0x6>
    697e:	b0 91 5f 1a 	lds	r27, 0x1A5F	; 0x801a5f <__clock+0x7>
    6982:	44 81       	ldd	r20, Z+4	; 0x04
    6984:	55 81       	ldd	r21, Z+5	; 0x05
    6986:	66 81       	ldd	r22, Z+6	; 0x06
    6988:	77 81       	ldd	r23, Z+7	; 0x07
    698a:	48 17       	cp	r20, r24
    698c:	59 07       	cpc	r21, r25
    698e:	6a 07       	cpc	r22, r26
    6990:	7b 07       	cpc	r23, r27
    6992:	b9 f6       	brne	.-82     	; 0x6942 <clock_settime.part.2+0x2>
    6994:	80 91 58 1a 	lds	r24, 0x1A58	; 0x801a58 <__clock>
    6998:	90 91 59 1a 	lds	r25, 0x1A59	; 0x801a59 <__clock+0x1>
    699c:	a0 91 5a 1a 	lds	r26, 0x1A5A	; 0x801a5a <__clock+0x2>
    69a0:	b0 91 5b 1a 	lds	r27, 0x1A5B	; 0x801a5b <__clock+0x3>
    69a4:	40 81       	ld	r20, Z
    69a6:	51 81       	ldd	r21, Z+1	; 0x01
    69a8:	62 81       	ldd	r22, Z+2	; 0x02
    69aa:	73 81       	ldd	r23, Z+3	; 0x03
    69ac:	48 17       	cp	r20, r24
    69ae:	59 07       	cpc	r21, r25
    69b0:	6a 07       	cpc	r22, r26
    69b2:	7b 07       	cpc	r23, r27
    69b4:	31 f6       	brne	.-116    	; 0x6942 <clock_settime.part.2+0x2>
    69b6:	80 e0       	ldi	r24, 0x00	; 0
    69b8:	90 e0       	ldi	r25, 0x00	; 0
    69ba:	08 95       	ret

000069bc <set_timers>:
    69bc:	00 d0       	rcall	.+0      	; 0x69be <set_timers+0x2>
    69be:	1f 92       	push	r1
    69c0:	00 97       	sbiw	r24, 0x00	; 0
    69c2:	79 f1       	breq	.+94     	; 0x6a22 <set_timers+0x66>
    69c4:	e0 e6       	ldi	r30, 0x60	; 96
    69c6:	fa e1       	ldi	r31, 0x1A	; 26
    69c8:	4f ef       	ldi	r20, 0xFF	; 255
    69ca:	5f ef       	ldi	r21, 0xFF	; 255
    69cc:	20 e0       	ldi	r18, 0x00	; 0
    69ce:	30 e0       	ldi	r19, 0x00	; 0
    69d0:	60 81       	ld	r22, Z
    69d2:	71 81       	ldd	r23, Z+1	; 0x01
    69d4:	86 17       	cp	r24, r22
    69d6:	97 07       	cpc	r25, r23
    69d8:	79 f0       	breq	.+30     	; 0x69f8 <set_timers+0x3c>
    69da:	67 2b       	or	r22, r23
    69dc:	71 f4       	brne	.+28     	; 0x69fa <set_timers+0x3e>
    69de:	f9 01       	movw	r30, r18
    69e0:	ee 0f       	add	r30, r30
    69e2:	ff 1f       	adc	r31, r31
    69e4:	e2 0f       	add	r30, r18
    69e6:	f3 1f       	adc	r31, r19
    69e8:	e0 5a       	subi	r30, 0xA0	; 160
    69ea:	f5 4e       	sbci	r31, 0xE5	; 229
    69ec:	91 83       	std	Z+1, r25	; 0x01
    69ee:	80 83       	st	Z, r24
    69f0:	81 e0       	ldi	r24, 0x01	; 1
    69f2:	82 83       	std	Z+2, r24	; 0x02
    69f4:	c9 01       	movw	r24, r18
    69f6:	19 c0       	rjmp	.+50     	; 0x6a2a <set_timers+0x6e>
    69f8:	a9 01       	movw	r20, r18
    69fa:	2f 5f       	subi	r18, 0xFF	; 255
    69fc:	3f 4f       	sbci	r19, 0xFF	; 255
    69fe:	33 96       	adiw	r30, 0x03	; 3
    6a00:	28 30       	cpi	r18, 0x08	; 8
    6a02:	31 05       	cpc	r19, r1
    6a04:	29 f7       	brne	.-54     	; 0x69d0 <set_timers+0x14>
    6a06:	4f 3f       	cpi	r20, 0xFF	; 255
    6a08:	8f ef       	ldi	r24, 0xFF	; 255
    6a0a:	58 07       	cpc	r21, r24
    6a0c:	69 f4       	brne	.+26     	; 0x6a28 <set_timers+0x6c>
    6a0e:	8d ec       	ldi	r24, 0xCD	; 205
    6a10:	95 e0       	ldi	r25, 0x05	; 5
    6a12:	a0 e0       	ldi	r26, 0x00	; 0
    6a14:	ed b7       	in	r30, 0x3d	; 61
    6a16:	fe b7       	in	r31, 0x3e	; 62
    6a18:	81 83       	std	Z+1, r24	; 0x01
    6a1a:	92 83       	std	Z+2, r25	; 0x02
    6a1c:	a3 83       	std	Z+3, r26	; 0x03
    6a1e:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    6a22:	8f ef       	ldi	r24, 0xFF	; 255
    6a24:	9f ef       	ldi	r25, 0xFF	; 255
    6a26:	01 c0       	rjmp	.+2      	; 0x6a2a <set_timers+0x6e>
    6a28:	ca 01       	movw	r24, r20
    6a2a:	0f 90       	pop	r0
    6a2c:	0f 90       	pop	r0
    6a2e:	0f 90       	pop	r0
    6a30:	08 95       	ret

00006a32 <delete_all_timers>:
    6a32:	e0 e6       	ldi	r30, 0x60	; 96
    6a34:	fa e1       	ldi	r31, 0x1A	; 26
    6a36:	12 82       	std	Z+2, r1	; 0x02
    6a38:	11 82       	std	Z+1, r1	; 0x01
    6a3a:	10 82       	st	Z, r1
    6a3c:	33 96       	adiw	r30, 0x03	; 3
    6a3e:	8a e1       	ldi	r24, 0x1A	; 26
    6a40:	e8 37       	cpi	r30, 0x78	; 120
    6a42:	f8 07       	cpc	r31, r24
    6a44:	c1 f7       	brne	.-16     	; 0x6a36 <delete_all_timers+0x4>
    6a46:	08 95       	ret

00006a48 <subtract_timespec>:
    6a48:	0f 93       	push	r16
    6a4a:	1f 93       	push	r17
    6a4c:	cf 93       	push	r28
    6a4e:	df 93       	push	r29
    6a50:	fc 01       	movw	r30, r24
    6a52:	84 81       	ldd	r24, Z+4	; 0x04
    6a54:	95 81       	ldd	r25, Z+5	; 0x05
    6a56:	a6 81       	ldd	r26, Z+6	; 0x06
    6a58:	b7 81       	ldd	r27, Z+7	; 0x07
    6a5a:	eb 01       	movw	r28, r22
    6a5c:	0c 81       	ldd	r16, Y+4	; 0x04
    6a5e:	1d 81       	ldd	r17, Y+5	; 0x05
    6a60:	2e 81       	ldd	r18, Y+6	; 0x06
    6a62:	3f 81       	ldd	r19, Y+7	; 0x07
    6a64:	80 1b       	sub	r24, r16
    6a66:	91 0b       	sbc	r25, r17
    6a68:	a2 0b       	sbc	r26, r18
    6a6a:	b3 0b       	sbc	r27, r19
    6a6c:	b7 fd       	sbrc	r27, 7
    6a6e:	05 c0       	rjmp	.+10     	; 0x6a7a <subtract_timespec+0x32>
    6a70:	84 83       	std	Z+4, r24	; 0x04
    6a72:	95 83       	std	Z+5, r25	; 0x05
    6a74:	a6 83       	std	Z+6, r26	; 0x06
    6a76:	b7 83       	std	Z+7, r27	; 0x07
    6a78:	12 c0       	rjmp	.+36     	; 0x6a9e <subtract_timespec+0x56>
    6a7a:	96 53       	subi	r25, 0x36	; 54
    6a7c:	a5 46       	sbci	r26, 0x65	; 101
    6a7e:	b4 4c       	sbci	r27, 0xC4	; 196
    6a80:	84 83       	std	Z+4, r24	; 0x04
    6a82:	95 83       	std	Z+5, r25	; 0x05
    6a84:	a6 83       	std	Z+6, r26	; 0x06
    6a86:	b7 83       	std	Z+7, r27	; 0x07
    6a88:	80 81       	ld	r24, Z
    6a8a:	91 81       	ldd	r25, Z+1	; 0x01
    6a8c:	a2 81       	ldd	r26, Z+2	; 0x02
    6a8e:	b3 81       	ldd	r27, Z+3	; 0x03
    6a90:	01 97       	sbiw	r24, 0x01	; 1
    6a92:	a1 09       	sbc	r26, r1
    6a94:	b1 09       	sbc	r27, r1
    6a96:	80 83       	st	Z, r24
    6a98:	91 83       	std	Z+1, r25	; 0x01
    6a9a:	a2 83       	std	Z+2, r26	; 0x02
    6a9c:	b3 83       	std	Z+3, r27	; 0x03
    6a9e:	80 81       	ld	r24, Z
    6aa0:	91 81       	ldd	r25, Z+1	; 0x01
    6aa2:	a2 81       	ldd	r26, Z+2	; 0x02
    6aa4:	b3 81       	ldd	r27, Z+3	; 0x03
    6aa6:	eb 01       	movw	r28, r22
    6aa8:	48 81       	ld	r20, Y
    6aaa:	59 81       	ldd	r21, Y+1	; 0x01
    6aac:	6a 81       	ldd	r22, Y+2	; 0x02
    6aae:	7b 81       	ldd	r23, Y+3	; 0x03
    6ab0:	84 1b       	sub	r24, r20
    6ab2:	95 0b       	sbc	r25, r21
    6ab4:	a6 0b       	sbc	r26, r22
    6ab6:	b7 0b       	sbc	r27, r23
    6ab8:	80 83       	st	Z, r24
    6aba:	91 83       	std	Z+1, r25	; 0x01
    6abc:	a2 83       	std	Z+2, r26	; 0x02
    6abe:	b3 83       	std	Z+3, r27	; 0x03
    6ac0:	df 91       	pop	r29
    6ac2:	cf 91       	pop	r28
    6ac4:	1f 91       	pop	r17
    6ac6:	0f 91       	pop	r16
    6ac8:	08 95       	ret

00006aca <ts_to_str>:
    6aca:	ad b7       	in	r26, 0x3d	; 61
    6acc:	be b7       	in	r27, 0x3e	; 62
    6ace:	1f 97       	sbiw	r26, 0x0f	; 15
    6ad0:	0f b6       	in	r0, 0x3f	; 63
    6ad2:	f8 94       	cli
    6ad4:	be bf       	out	0x3e, r27	; 62
    6ad6:	0f be       	out	0x3f, r0	; 63
    6ad8:	ad bf       	out	0x3d, r26	; 61
    6ada:	fc 01       	movw	r30, r24
    6adc:	44 81       	ldd	r20, Z+4	; 0x04
    6ade:	55 81       	ldd	r21, Z+5	; 0x05
    6ae0:	66 81       	ldd	r22, Z+6	; 0x06
    6ae2:	77 81       	ldd	r23, Z+7	; 0x07
    6ae4:	ed b7       	in	r30, 0x3d	; 61
    6ae6:	fe b7       	in	r31, 0x3e	; 62
    6ae8:	44 87       	std	Z+12, r20	; 0x0c
    6aea:	55 87       	std	Z+13, r21	; 0x0d
    6aec:	66 87       	std	Z+14, r22	; 0x0e
    6aee:	77 87       	std	Z+15, r23	; 0x0f
    6af0:	fc 01       	movw	r30, r24
    6af2:	80 81       	ld	r24, Z
    6af4:	91 81       	ldd	r25, Z+1	; 0x01
    6af6:	a2 81       	ldd	r26, Z+2	; 0x02
    6af8:	b3 81       	ldd	r27, Z+3	; 0x03
    6afa:	ed b7       	in	r30, 0x3d	; 61
    6afc:	fe b7       	in	r31, 0x3e	; 62
    6afe:	80 87       	std	Z+8, r24	; 0x08
    6b00:	91 87       	std	Z+9, r25	; 0x09
    6b02:	a2 87       	std	Z+10, r26	; 0x0a
    6b04:	b3 87       	std	Z+11, r27	; 0x0b
    6b06:	83 ec       	ldi	r24, 0xC3	; 195
    6b08:	95 e0       	ldi	r25, 0x05	; 5
    6b0a:	a0 e0       	ldi	r26, 0x00	; 0
    6b0c:	85 83       	std	Z+5, r24	; 0x05
    6b0e:	96 83       	std	Z+6, r25	; 0x06
    6b10:	a7 83       	std	Z+7, r26	; 0x07
    6b12:	8f e1       	ldi	r24, 0x1F	; 31
    6b14:	90 e0       	ldi	r25, 0x00	; 0
    6b16:	94 83       	std	Z+4, r25	; 0x04
    6b18:	83 83       	std	Z+3, r24	; 0x03
    6b1a:	8c e8       	ldi	r24, 0x8C	; 140
    6b1c:	97 e1       	ldi	r25, 0x17	; 23
    6b1e:	92 83       	std	Z+2, r25	; 0x02
    6b20:	81 83       	std	Z+1, r24	; 0x01
    6b22:	0e 94 08 47 	call	0x8e10	; 0x8e10 <snprintf_P>
    6b26:	8c e8       	ldi	r24, 0x8C	; 140
    6b28:	97 e1       	ldi	r25, 0x17	; 23
    6b2a:	ad b7       	in	r26, 0x3d	; 61
    6b2c:	be b7       	in	r27, 0x3e	; 62
    6b2e:	1f 96       	adiw	r26, 0x0f	; 15
    6b30:	0f b6       	in	r0, 0x3f	; 63
    6b32:	f8 94       	cli
    6b34:	be bf       	out	0x3e, r27	; 62
    6b36:	0f be       	out	0x3f, r0	; 63
    6b38:	ad bf       	out	0x3d, r26	; 61
    6b3a:	08 95       	ret

00006b3c <clock_elapsed_begin>:
    6b3c:	64 e8       	ldi	r22, 0x84	; 132
    6b3e:	77 e1       	ldi	r23, 0x17	; 23
    6b40:	80 e0       	ldi	r24, 0x00	; 0
    6b42:	90 e0       	ldi	r25, 0x00	; 0
    6b44:	4b ce       	rjmp	.-874    	; 0x67dc <clock_gettime>
    6b46:	08 95       	ret

00006b48 <clock_elapsed_end>:
    6b48:	af e0       	ldi	r26, 0x0F	; 15
    6b4a:	b0 e0       	ldi	r27, 0x00	; 0
    6b4c:	ea ea       	ldi	r30, 0xAA	; 170
    6b4e:	f5 e3       	ldi	r31, 0x35	; 53
    6b50:	0c 94 0d e7 	jmp	0x1ce1a	; 0x1ce1a <__prologue_saves__+0x1c>
    6b54:	8c 01       	movw	r16, r24
    6b56:	be 01       	movw	r22, r28
    6b58:	68 5f       	subi	r22, 0xF8	; 248
    6b5a:	7f 4f       	sbci	r23, 0xFF	; 255
    6b5c:	80 e0       	ldi	r24, 0x00	; 0
    6b5e:	90 e0       	ldi	r25, 0x00	; 0
    6b60:	3d de       	rcall	.-902    	; 0x67dc <clock_gettime>
    6b62:	64 e8       	ldi	r22, 0x84	; 132
    6b64:	77 e1       	ldi	r23, 0x17	; 23
    6b66:	ce 01       	movw	r24, r28
    6b68:	08 96       	adiw	r24, 0x08	; 8
    6b6a:	6e df       	rcall	.-292    	; 0x6a48 <subtract_timespec>
    6b6c:	01 15       	cp	r16, r1
    6b6e:	11 05       	cpc	r17, r1
    6b70:	b1 f0       	breq	.+44     	; 0x6b9e <clock_elapsed_end+0x56>
    6b72:	f8 01       	movw	r30, r16
    6b74:	80 81       	ld	r24, Z
    6b76:	88 23       	and	r24, r24
    6b78:	91 f0       	breq	.+36     	; 0x6b9e <clock_elapsed_end+0x56>
    6b7a:	ce 01       	movw	r24, r28
    6b7c:	08 96       	adiw	r24, 0x08	; 8
    6b7e:	a5 df       	rcall	.-182    	; 0x6aca <ts_to_str>
    6b80:	ed b7       	in	r30, 0x3d	; 61
    6b82:	fe b7       	in	r31, 0x3e	; 62
    6b84:	97 83       	std	Z+7, r25	; 0x07
    6b86:	86 83       	std	Z+6, r24	; 0x06
    6b88:	15 83       	std	Z+5, r17	; 0x05
    6b8a:	04 83       	std	Z+4, r16	; 0x04
    6b8c:	85 eb       	ldi	r24, 0xB5	; 181
    6b8e:	95 e0       	ldi	r25, 0x05	; 5
    6b90:	a0 e0       	ldi	r26, 0x00	; 0
    6b92:	81 83       	std	Z+1, r24	; 0x01
    6b94:	92 83       	std	Z+2, r25	; 0x02
    6b96:	a3 83       	std	Z+3, r26	; 0x03
    6b98:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    6b9c:	0f c0       	rjmp	.+30     	; 0x6bbc <clock_elapsed_end+0x74>
    6b9e:	ce 01       	movw	r24, r28
    6ba0:	08 96       	adiw	r24, 0x08	; 8
    6ba2:	93 df       	rcall	.-218    	; 0x6aca <ts_to_str>
    6ba4:	ed b7       	in	r30, 0x3d	; 61
    6ba6:	fe b7       	in	r31, 0x3e	; 62
    6ba8:	95 83       	std	Z+5, r25	; 0x05
    6baa:	84 83       	std	Z+4, r24	; 0x04
    6bac:	8a ea       	ldi	r24, 0xAA	; 170
    6bae:	95 e0       	ldi	r25, 0x05	; 5
    6bb0:	a0 e0       	ldi	r26, 0x00	; 0
    6bb2:	81 83       	std	Z+1, r24	; 0x01
    6bb4:	92 83       	std	Z+2, r25	; 0x02
    6bb6:	a3 83       	std	Z+3, r26	; 0x03
    6bb8:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    6bbc:	2f 96       	adiw	r28, 0x0f	; 15
    6bbe:	e4 e0       	ldi	r30, 0x04	; 4
    6bc0:	0c 94 29 e7 	jmp	0x1ce52	; 0x1ce52 <__epilogue_restores__+0x1c>

00006bc4 <clock_clear>:
    6bc4:	a8 e0       	ldi	r26, 0x08	; 8
    6bc6:	b0 e0       	ldi	r27, 0x00	; 0
    6bc8:	e8 ee       	ldi	r30, 0xE8	; 232
    6bca:	f5 e3       	ldi	r31, 0x35	; 53
    6bcc:	0c 94 0f e7 	jmp	0x1ce1e	; 0x1ce1e <__prologue_saves__+0x20>
    6bd0:	1d 82       	std	Y+5, r1	; 0x05
    6bd2:	1e 82       	std	Y+6, r1	; 0x06
    6bd4:	1f 82       	std	Y+7, r1	; 0x07
    6bd6:	18 86       	std	Y+8, r1	; 0x08
    6bd8:	19 82       	std	Y+1, r1	; 0x01
    6bda:	1a 82       	std	Y+2, r1	; 0x02
    6bdc:	1b 82       	std	Y+3, r1	; 0x03
    6bde:	1c 82       	std	Y+4, r1	; 0x04
    6be0:	ce 01       	movw	r24, r28
    6be2:	01 96       	adiw	r24, 0x01	; 1
    6be4:	ad de       	rcall	.-678    	; 0x6940 <clock_settime.part.2>
    6be6:	e8 e7       	ldi	r30, 0x78	; 120
    6be8:	fa e1       	ldi	r31, 0x1A	; 26
    6bea:	11 82       	std	Z+1, r1	; 0x01
    6bec:	10 82       	st	Z, r1
    6bee:	13 82       	std	Z+3, r1	; 0x03
    6bf0:	12 82       	std	Z+2, r1	; 0x02
    6bf2:	28 96       	adiw	r28, 0x08	; 8
    6bf4:	e2 e0       	ldi	r30, 0x02	; 2
    6bf6:	0c 94 2b e7 	jmp	0x1ce56	; 0x1ce56 <__epilogue_restores__+0x20>

00006bfa <enable_timers>:
///
/// @return  void
MEMSPACE
void enable_timers()
{
    if(timers_configured && !timers_enabled)
    6bfa:	80 91 ac 17 	lds	r24, 0x17AC	; 0x8017ac <timers_configured>
    6bfe:	90 91 ad 17 	lds	r25, 0x17AD	; 0x8017ad <timers_configured+0x1>
    6c02:	89 2b       	or	r24, r25
    6c04:	69 f0       	breq	.+26     	; 0x6c20 <enable_timers+0x26>
    6c06:	80 91 ae 17 	lds	r24, 0x17AE	; 0x8017ae <timers_enabled>
    6c0a:	90 91 af 17 	lds	r25, 0x17AF	; 0x8017af <timers_enabled+0x1>
    6c0e:	89 2b       	or	r24, r25
    6c10:	39 f4       	brne	.+14     	; 0x6c20 <enable_timers+0x26>
    {
        enable_system_task();
    6c12:	a8 dd       	rcall	.-1200   	; 0x6764 <enable_system_task>
        timers_enabled = 1;
    6c14:	81 e0       	ldi	r24, 0x01	; 1
    6c16:	90 e0       	ldi	r25, 0x00	; 0
    6c18:	90 93 af 17 	sts	0x17AF, r25	; 0x8017af <timers_enabled+0x1>
    6c1c:	80 93 ae 17 	sts	0x17AE, r24	; 0x8017ae <timers_enabled>
    6c20:	08 95       	ret

00006c22 <execute_timers>:
/// @brief  Execute all user timers at SYSTEM_HZ rate.
///  Called by system task
///
/// @return  void
void execute_timers()
{
    6c22:	cf 93       	push	r28
    6c24:	df 93       	push	r29
    6c26:	c0 e6       	ldi	r28, 0x60	; 96
    6c28:	da e1       	ldi	r29, 0x1A	; 26
    int i;

    for(i=0; i < MAX_TIMER_CNT; i++)
    {
        if(timer_irq[i].timer && timer_irq[i].user_timer_handler != NULL)
    6c2a:	8a 81       	ldd	r24, Y+2	; 0x02
    6c2c:	88 23       	and	r24, r24
    6c2e:	29 f0       	breq	.+10     	; 0x6c3a <execute_timers+0x18>
    6c30:	e8 81       	ld	r30, Y
    6c32:	f9 81       	ldd	r31, Y+1	; 0x01
    6c34:	30 97       	sbiw	r30, 0x00	; 0
    6c36:	09 f0       	breq	.+2      	; 0x6c3a <execute_timers+0x18>
            (*timer_irq[i].user_timer_handler)();
    6c38:	09 95       	icall
    6c3a:	23 96       	adiw	r28, 0x03	; 3
/// @return  void
void execute_timers()
{
    int i;

    for(i=0; i < MAX_TIMER_CNT; i++)
    6c3c:	8a e1       	ldi	r24, 0x1A	; 26
    6c3e:	c8 37       	cpi	r28, 0x78	; 120
    6c40:	d8 07       	cpc	r29, r24
    6c42:	99 f7       	brne	.-26     	; 0x6c2a <execute_timers+0x8>
    {
        if(timer_irq[i].timer && timer_irq[i].user_timer_handler != NULL)
            (*timer_irq[i].user_timer_handler)();
    }
}
    6c44:	df 91       	pop	r29
    6c46:	cf 91       	pop	r28
    6c48:	08 95       	ret

00006c4a <init_timers>:
/// @see: timer_hal.c for hardware dependent interface
//
/// @return  void
MEMSPACE
void init_timers()
{
    6c4a:	00 d0       	rcall	.+0      	; 0x6c4c <init_timers+0x2>
    6c4c:	1f 92       	push	r1
    printf("Timers init called\n");
    6c4e:	86 e9       	ldi	r24, 0x96	; 150
    6c50:	95 e0       	ldi	r25, 0x05	; 5
    6c52:	a0 e0       	ldi	r26, 0x00	; 0
    6c54:	ed b7       	in	r30, 0x3d	; 61
    6c56:	fe b7       	in	r31, 0x3e	; 62
    6c58:	81 83       	std	Z+1, r24	; 0x01
    6c5a:	92 83       	std	Z+2, r25	; 0x02
    6c5c:	a3 83       	std	Z+3, r26	; 0x03
    6c5e:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>

    if(!timers_configured)
    6c62:	80 91 ac 17 	lds	r24, 0x17AC	; 0x8017ac <timers_configured>
    6c66:	90 91 ad 17 	lds	r25, 0x17AD	; 0x8017ad <timers_configured+0x1>
    6c6a:	89 2b       	or	r24, r25
    6c6c:	a9 f4       	brne	.+42     	; 0x6c98 <init_timers+0x4e>
    {
        install_timers_isr();
    6c6e:	7c dd       	rcall	.-1288   	; 0x6768 <install_timers_isr>
        timers_configured = 1;
    6c70:	81 e0       	ldi	r24, 0x01	; 1
    6c72:	90 e0       	ldi	r25, 0x00	; 0
    6c74:	90 93 ad 17 	sts	0x17AD, r25	; 0x8017ad <timers_configured+0x1>
    6c78:	80 93 ac 17 	sts	0x17AC, r24	; 0x8017ac <timers_configured>
        timers_enabled = 0;
    6c7c:	10 92 af 17 	sts	0x17AF, r1	; 0x8017af <timers_enabled+0x1>
    6c80:	10 92 ae 17 	sts	0x17AE, r1	; 0x8017ae <timers_enabled>
        printf("Timers configured\n");
    6c84:	83 e8       	ldi	r24, 0x83	; 131
    6c86:	95 e0       	ldi	r25, 0x05	; 5
    6c88:	a0 e0       	ldi	r26, 0x00	; 0
    6c8a:	ed b7       	in	r30, 0x3d	; 61
    6c8c:	fe b7       	in	r31, 0x3e	; 62
    6c8e:	81 83       	std	Z+1, r24	; 0x01
    6c90:	92 83       	std	Z+2, r25	; 0x02
    6c92:	a3 83       	std	Z+3, r26	; 0x03
    6c94:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    }

    delete_all_timers();

    clock_clear();
    6c98:	cc de       	rcall	.-616    	; 0x6a32 <delete_all_timers>
    6c9a:	94 df       	rcall	.-216    	; 0x6bc4 <clock_clear>
    printf("Clock Init\n");
    6c9c:	87 e7       	ldi	r24, 0x77	; 119
    6c9e:	95 e0       	ldi	r25, 0x05	; 5
    6ca0:	a0 e0       	ldi	r26, 0x00	; 0
    6ca2:	ed b7       	in	r30, 0x3d	; 61
    6ca4:	fe b7       	in	r31, 0x3e	; 62
    6ca6:	81 83       	std	Z+1, r24	; 0x01
    6ca8:	92 83       	std	Z+2, r25	; 0x02
    6caa:	a3 83       	std	Z+3, r26	; 0x03
    6cac:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>

///  See time.c
    if(set_timers(clock_task,1) == -1)
    6cb0:	61 e0       	ldi	r22, 0x01	; 1
    6cb2:	70 e0       	ldi	r23, 0x00	; 0
    6cb4:	83 e6       	ldi	r24, 0x63	; 99
    6cb6:	94 e3       	ldi	r25, 0x34	; 52
    6cb8:	81 de       	rcall	.-766    	; 0x69bc <set_timers>
    6cba:	01 96       	adiw	r24, 0x01	; 1
    6cbc:	51 f4       	brne	.+20     	; 0x6cd2 <init_timers+0x88>
        printf("Clock task init failed\n");
    6cbe:	8f e5       	ldi	r24, 0x5F	; 95
    6cc0:	95 e0       	ldi	r25, 0x05	; 5
    6cc2:	a0 e0       	ldi	r26, 0x00	; 0
    6cc4:	ed b7       	in	r30, 0x3d	; 61
    6cc6:	fe b7       	in	r31, 0x3e	; 62
    6cc8:	81 83       	std	Z+1, r24	; 0x01
    6cca:	92 83       	std	Z+2, r25	; 0x02
    6ccc:	a3 83       	std	Z+3, r26	; 0x03
    6cce:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    printf("Clock Installed\n");
    6cd2:	8e e4       	ldi	r24, 0x4E	; 78
    6cd4:	95 e0       	ldi	r25, 0x05	; 5
    6cd6:	a0 e0       	ldi	r26, 0x00	; 0
    6cd8:	ed b7       	in	r30, 0x3d	; 61
    6cda:	fe b7       	in	r31, 0x3e	; 62
    6cdc:	81 83       	std	Z+1, r24	; 0x01
    6cde:	92 83       	std	Z+2, r25	; 0x02
    6ce0:	a3 83       	std	Z+3, r26	; 0x03
    6ce2:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>

    enable_timers();
    6ce6:	89 df       	rcall	.-238    	; 0x6bfa <enable_timers>

    printf("Timers enabled\n");
    6ce8:	8e e3       	ldi	r24, 0x3E	; 62
    6cea:	95 e0       	ldi	r25, 0x05	; 5
    6cec:	a0 e0       	ldi	r26, 0x00	; 0
    6cee:	ed b7       	in	r30, 0x3d	; 61
    6cf0:	fe b7       	in	r31, 0x3e	; 62
    6cf2:	81 83       	std	Z+1, r24	; 0x01
    6cf4:	92 83       	std	Z+2, r25	; 0x02
    6cf6:	a3 83       	std	Z+3, r26	; 0x03
    6cf8:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
}
    6cfc:	0f 90       	pop	r0
    6cfe:	0f 90       	pop	r0
    6d00:	0f 90       	pop	r0
    6d02:	08 95       	ret

00006d04 <clock_getres>:
/// @return 0 on success.
/// @return -1 on error.
MEMSPACE
int clock_getres(clockid_t clk_id  __attribute__((unused)), struct timespec *res)
{
    if(clk_id)
    6d04:	89 2b       	or	r24, r25
    6d06:	81 f4       	brne	.+32     	; 0x6d28 <clock_getres+0x24>
        return(-1);
    res->tv_sec = 0;
    6d08:	fb 01       	movw	r30, r22
    6d0a:	10 82       	st	Z, r1
    6d0c:	11 82       	std	Z+1, r1	; 0x01
    6d0e:	12 82       	std	Z+2, r1	; 0x02
    6d10:	13 82       	std	Z+3, r1	; 0x03
    res->tv_nsec = SYSTEM_TASK_TIC_NS;
    6d12:	80 e4       	ldi	r24, 0x40	; 64
    6d14:	92 e4       	ldi	r25, 0x42	; 66
    6d16:	af e0       	ldi	r26, 0x0F	; 15
    6d18:	b0 e0       	ldi	r27, 0x00	; 0
    6d1a:	84 83       	std	Z+4, r24	; 0x04
    6d1c:	95 83       	std	Z+5, r25	; 0x05
    6d1e:	a6 83       	std	Z+6, r26	; 0x06
    6d20:	b7 83       	std	Z+7, r27	; 0x07
    return(0);
    6d22:	80 e0       	ldi	r24, 0x00	; 0
    6d24:	90 e0       	ldi	r25, 0x00	; 0
    6d26:	08 95       	ret
/// @return -1 on error.
MEMSPACE
int clock_getres(clockid_t clk_id  __attribute__((unused)), struct timespec *res)
{
    if(clk_id)
        return(-1);
    6d28:	8f ef       	ldi	r24, 0xFF	; 255
    6d2a:	9f ef       	ldi	r25, 0xFF	; 255
    res->tv_sec = 0;
    res->tv_nsec = SYSTEM_TASK_TIC_NS;
    return(0);
}
    6d2c:	08 95       	ret

00006d2e <clock_settime>:
///
/// @return 0.
MEMSPACE
int clock_settime(clockid_t clk_id  __attribute__((unused)), const struct timespec *ts)
{
    if(clk_id)
    6d2e:	89 2b       	or	r24, r25
    6d30:	19 f4       	brne	.+6      	; 0x6d38 <clock_settime+0xa>
    6d32:	cb 01       	movw	r24, r22
    6d34:	05 ce       	rjmp	.-1014   	; 0x6940 <clock_settime.part.2>
    6d36:	08 95       	ret
        return(-1);
    6d38:	8f ef       	ldi	r24, 0xFF	; 255
    6d3a:	9f ef       	ldi	r25, 0xFF	; 255
            continue;
        break;
    }

    return(0);
}
    6d3c:	08 95       	ret

00006d3e <IS_Leap>:
void print_dst_gmt()
{
    printf("DST START       GMT: %s\n", ctime_gm(&dst.start));
    printf("DST END         GMT: %s\n", ctime_gm(&dst.end));

}
    6d3e:	9c 01       	movw	r18, r24
    6d40:	83 70       	andi	r24, 0x03	; 3
    6d42:	99 27       	eor	r25, r25
    6d44:	00 97       	sbiw	r24, 0x00	; 0
    6d46:	69 f4       	brne	.+26     	; 0x6d62 <IS_Leap+0x24>
    6d48:	2c 36       	cpi	r18, 0x6C	; 108
    6d4a:	47 e0       	ldi	r20, 0x07	; 7
    6d4c:	34 07       	cpc	r19, r20
    6d4e:	59 f0       	breq	.+22     	; 0x6d66 <IS_Leap+0x28>
    6d50:	51 e0       	ldi	r21, 0x01	; 1
    6d52:	40 e0       	ldi	r20, 0x00	; 0
    6d54:	24 33       	cpi	r18, 0x34	; 52
    6d56:	38 40       	sbci	r19, 0x08	; 8
    6d58:	09 f4       	brne	.+2      	; 0x6d5c <IS_Leap+0x1e>
    6d5a:	50 e0       	ldi	r21, 0x00	; 0
    6d5c:	85 2f       	mov	r24, r21
    6d5e:	94 2f       	mov	r25, r20
    6d60:	08 95       	ret
    6d62:	80 e0       	ldi	r24, 0x00	; 0
    6d64:	90 e0       	ldi	r25, 0x00	; 0
    6d66:	08 95       	ret

00006d68 <tm_mon_to_ascii>:
    6d68:	8c 30       	cpi	r24, 0x0C	; 12
    6d6a:	91 05       	cpc	r25, r1
    6d6c:	40 f4       	brcc	.+16     	; 0x6d7e <tm_mon_to_ascii+0x16>
    6d6e:	88 0f       	add	r24, r24
    6d70:	99 1f       	adc	r25, r25
    6d72:	fc 01       	movw	r30, r24
    6d74:	e5 5f       	subi	r30, 0xF5	; 245
    6d76:	fe 4f       	sbci	r31, 0xFE	; 254
    6d78:	80 81       	ld	r24, Z
    6d7a:	91 81       	ldd	r25, Z+1	; 0x01
    6d7c:	08 95       	ret
    6d7e:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <__Month+0x18>
    6d82:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <__Month+0x19>
    6d86:	08 95       	ret

00006d88 <Days_Per_Month>:
    6d88:	cf 93       	push	r28
    6d8a:	df 93       	push	r29
    6d8c:	8c 30       	cpi	r24, 0x0C	; 12
    6d8e:	91 05       	cpc	r25, r1
    6d90:	24 f0       	brlt	.+8      	; 0x6d9a <Days_Per_Month+0x12>
    6d92:	6f 5f       	subi	r22, 0xFF	; 255
    6d94:	7f 4f       	sbci	r23, 0xFF	; 255
    6d96:	0c 97       	sbiw	r24, 0x0c	; 12
    6d98:	f9 cf       	rjmp	.-14     	; 0x6d8c <Days_Per_Month+0x4>
    6d9a:	97 ff       	sbrs	r25, 7
    6d9c:	04 c0       	rjmp	.+8      	; 0x6da6 <Days_Per_Month+0x1e>
    6d9e:	61 50       	subi	r22, 0x01	; 1
    6da0:	71 09       	sbc	r23, r1
    6da2:	0c 96       	adiw	r24, 0x0c	; 12
    6da4:	fa cf       	rjmp	.-12     	; 0x6d9a <Days_Per_Month+0x12>
    6da6:	fc 01       	movw	r30, r24
    6da8:	ee 0f       	add	r30, r30
    6daa:	ff 1f       	adc	r31, r31
    6dac:	e8 57       	subi	r30, 0x78	; 120
    6dae:	fc 4f       	sbci	r31, 0xFC	; 252
    6db0:	c0 81       	ld	r28, Z
    6db2:	d1 81       	ldd	r29, Z+1	; 0x01
    6db4:	01 97       	sbiw	r24, 0x01	; 1
    6db6:	29 f4       	brne	.+10     	; 0x6dc2 <Days_Per_Month+0x3a>
    6db8:	cb 01       	movw	r24, r22
    6dba:	c1 df       	rcall	.-126    	; 0x6d3e <IS_Leap>
    6dbc:	89 2b       	or	r24, r25
    6dbe:	09 f0       	breq	.+2      	; 0x6dc2 <Days_Per_Month+0x3a>
    6dc0:	21 96       	adiw	r28, 0x01	; 1
    6dc2:	ce 01       	movw	r24, r28
    6dc4:	df 91       	pop	r29
    6dc6:	cf 91       	pop	r28
    6dc8:	08 95       	ret

00006dca <time_to_tm>:
    6dca:	a0 e0       	ldi	r26, 0x00	; 0
    6dcc:	b0 e0       	ldi	r27, 0x00	; 0
    6dce:	eb ee       	ldi	r30, 0xEB	; 235
    6dd0:	f6 e3       	ldi	r31, 0x36	; 54
    6dd2:	0c 94 01 e7 	jmp	0x1ce02	; 0x1ce02 <__prologue_saves__+0x4>
    6dd6:	e8 01       	movw	r28, r16
    6dd8:	e6 e1       	ldi	r30, 0x16	; 22
    6dda:	d8 01       	movw	r26, r16
    6ddc:	1d 92       	st	X+, r1
    6dde:	ea 95       	dec	r30
    6de0:	e9 f7       	brne	.-6      	; 0x6ddc <time_to_tm+0x12>
    6de2:	61 15       	cp	r22, r1
    6de4:	bd e5       	ldi	r27, 0x5D	; 93
    6de6:	7b 07       	cpc	r23, r27
    6de8:	bd ef       	ldi	r27, 0xFD	; 253
    6dea:	8b 07       	cpc	r24, r27
    6dec:	bf ef       	ldi	r27, 0xFF	; 255
    6dee:	9b 07       	cpc	r25, r27
    6df0:	08 f0       	brcs	.+2      	; 0x6df4 <time_to_tm+0x2a>
    6df2:	c0 c0       	rjmp	.+384    	; 0x6f74 <time_to_tm+0x1aa>
    6df4:	6b 01       	movw	r12, r22
    6df6:	7c 01       	movw	r14, r24
    6df8:	c2 1a       	sub	r12, r18
    6dfa:	d3 0a       	sbc	r13, r19
    6dfc:	e4 0a       	sbc	r14, r20
    6dfe:	f5 0a       	sbc	r15, r21
    6e00:	46 01       	movw	r8, r12
    6e02:	57 01       	movw	r10, r14
    6e04:	e0 e8       	ldi	r30, 0x80	; 128
    6e06:	ce 16       	cp	r12, r30
    6e08:	ee ea       	ldi	r30, 0xAE	; 174
    6e0a:	de 06       	cpc	r13, r30
    6e0c:	ee ef       	ldi	r30, 0xFE	; 254
    6e0e:	ee 06       	cpc	r14, r30
    6e10:	ef ef       	ldi	r30, 0xFF	; 255
    6e12:	fe 06       	cpc	r15, r30
    6e14:	50 f0       	brcs	.+20     	; 0x6e2a <time_to_tm+0x60>
    6e16:	80 e8       	ldi	r24, 0x80	; 128
    6e18:	88 0e       	add	r8, r24
    6e1a:	81 e5       	ldi	r24, 0x51	; 81
    6e1c:	98 1e       	adc	r9, r24
    6e1e:	81 e0       	ldi	r24, 0x01	; 1
    6e20:	a8 1e       	adc	r10, r24
    6e22:	b1 1c       	adc	r11, r1
    6e24:	01 e0       	ldi	r16, 0x01	; 1
    6e26:	10 e0       	ldi	r17, 0x00	; 0
    6e28:	02 c0       	rjmp	.+4      	; 0x6e2e <time_to_tm+0x64>
    6e2a:	00 e0       	ldi	r16, 0x00	; 0
    6e2c:	10 e0       	ldi	r17, 0x00	; 0
    6e2e:	8c e3       	ldi	r24, 0x3C	; 60
    6e30:	48 2e       	mov	r4, r24
    6e32:	51 2c       	mov	r5, r1
    6e34:	61 2c       	mov	r6, r1
    6e36:	71 2c       	mov	r7, r1
    6e38:	c5 01       	movw	r24, r10
    6e3a:	b4 01       	movw	r22, r8
    6e3c:	a3 01       	movw	r20, r6
    6e3e:	92 01       	movw	r18, r4
    6e40:	0e 94 92 e6 	call	0x1cd24	; 0x1cd24 <__udivmodsi4>
    6e44:	79 83       	std	Y+1, r23	; 0x01
    6e46:	68 83       	st	Y, r22
    6e48:	ca 01       	movw	r24, r20
    6e4a:	b9 01       	movw	r22, r18
    6e4c:	a3 01       	movw	r20, r6
    6e4e:	92 01       	movw	r18, r4
    6e50:	0e 94 92 e6 	call	0x1cd24	; 0x1cd24 <__udivmodsi4>
    6e54:	7b 83       	std	Y+3, r23	; 0x03
    6e56:	6a 83       	std	Y+2, r22	; 0x02
    6e58:	c5 01       	movw	r24, r10
    6e5a:	b4 01       	movw	r22, r8
    6e5c:	20 e1       	ldi	r18, 0x10	; 16
    6e5e:	3e e0       	ldi	r19, 0x0E	; 14
    6e60:	40 e0       	ldi	r20, 0x00	; 0
    6e62:	50 e0       	ldi	r21, 0x00	; 0
    6e64:	0e 94 92 e6 	call	0x1cd24	; 0x1cd24 <__udivmodsi4>
    6e68:	ca 01       	movw	r24, r20
    6e6a:	b9 01       	movw	r22, r18
    6e6c:	28 e1       	ldi	r18, 0x18	; 24
    6e6e:	30 e0       	ldi	r19, 0x00	; 0
    6e70:	40 e0       	ldi	r20, 0x00	; 0
    6e72:	50 e0       	ldi	r21, 0x00	; 0
    6e74:	0e 94 92 e6 	call	0x1cd24	; 0x1cd24 <__udivmodsi4>
    6e78:	7d 83       	std	Y+5, r23	; 0x05
    6e7a:	6c 83       	std	Y+4, r22	; 0x04
    6e7c:	01 15       	cp	r16, r1
    6e7e:	11 05       	cpc	r17, r1
    6e80:	89 f0       	breq	.+34     	; 0x6ea4 <time_to_tm+0xda>
    6e82:	85 e4       	ldi	r24, 0x45	; 69
    6e84:	90 e0       	ldi	r25, 0x00	; 0
    6e86:	9b 87       	std	Y+11, r25	; 0x0b
    6e88:	8a 87       	std	Y+10, r24	; 0x0a
    6e8a:	8b e0       	ldi	r24, 0x0B	; 11
    6e8c:	90 e0       	ldi	r25, 0x00	; 0
    6e8e:	99 87       	std	Y+9, r25	; 0x09
    6e90:	88 87       	std	Y+8, r24	; 0x08
    6e92:	8f e1       	ldi	r24, 0x1F	; 31
    6e94:	90 e0       	ldi	r25, 0x00	; 0
    6e96:	9f 83       	std	Y+7, r25	; 0x07
    6e98:	8e 83       	std	Y+6, r24	; 0x06
    6e9a:	83 e0       	ldi	r24, 0x03	; 3
    6e9c:	90 e0       	ldi	r25, 0x00	; 0
    6e9e:	9d 87       	std	Y+13, r25	; 0x0d
    6ea0:	8c 87       	std	Y+12, r24	; 0x0c
    6ea2:	65 c0       	rjmp	.+202    	; 0x6f6e <time_to_tm+0x1a4>
    6ea4:	c5 01       	movw	r24, r10
    6ea6:	b4 01       	movw	r22, r8
    6ea8:	20 e8       	ldi	r18, 0x80	; 128
    6eaa:	31 e5       	ldi	r19, 0x51	; 81
    6eac:	41 e0       	ldi	r20, 0x01	; 1
    6eae:	50 e0       	ldi	r21, 0x00	; 0
    6eb0:	0e 94 92 e6 	call	0x1cd24	; 0x1cd24 <__udivmodsi4>
    6eb4:	49 01       	movw	r8, r18
    6eb6:	5a 01       	movw	r10, r20
    6eb8:	ca 01       	movw	r24, r20
    6eba:	b9 01       	movw	r22, r18
    6ebc:	6c 5f       	subi	r22, 0xFC	; 252
    6ebe:	7f 4f       	sbci	r23, 0xFF	; 255
    6ec0:	8f 4f       	sbci	r24, 0xFF	; 255
    6ec2:	9f 4f       	sbci	r25, 0xFF	; 255
    6ec4:	27 e0       	ldi	r18, 0x07	; 7
    6ec6:	30 e0       	ldi	r19, 0x00	; 0
    6ec8:	40 e0       	ldi	r20, 0x00	; 0
    6eca:	50 e0       	ldi	r21, 0x00	; 0
    6ecc:	0e 94 b4 e6 	call	0x1cd68	; 0x1cd68 <__divmodsi4>
    6ed0:	7d 87       	std	Y+13, r23	; 0x0d
    6ed2:	6c 87       	std	Y+12, r22	; 0x0c
    6ed4:	02 eb       	ldi	r16, 0xB2	; 178
    6ed6:	17 e0       	ldi	r17, 0x07	; 7
    6ed8:	c8 01       	movw	r24, r16
    6eda:	31 df       	rcall	.-414    	; 0x6d3e <IS_Leap>
    6edc:	00 97       	sbiw	r24, 0x00	; 0
    6ede:	19 f4       	brne	.+6      	; 0x6ee6 <time_to_tm+0x11c>
    6ee0:	4d e6       	ldi	r20, 0x6D	; 109
    6ee2:	51 e0       	ldi	r21, 0x01	; 1
    6ee4:	02 c0       	rjmp	.+4      	; 0x6eea <time_to_tm+0x120>
    6ee6:	4e e6       	ldi	r20, 0x6E	; 110
    6ee8:	51 e0       	ldi	r21, 0x01	; 1
    6eea:	05 2e       	mov	r0, r21
    6eec:	00 0c       	add	r0, r0
    6eee:	66 0b       	sbc	r22, r22
    6ef0:	77 0b       	sbc	r23, r23
    6ef2:	84 16       	cp	r8, r20
    6ef4:	95 06       	cpc	r9, r21
    6ef6:	a6 06       	cpc	r10, r22
    6ef8:	b7 06       	cpc	r11, r23
    6efa:	3c f0       	brlt	.+14     	; 0x6f0a <time_to_tm+0x140>
    6efc:	0f 5f       	subi	r16, 0xFF	; 255
    6efe:	1f 4f       	sbci	r17, 0xFF	; 255
    6f00:	84 1a       	sub	r8, r20
    6f02:	95 0a       	sbc	r9, r21
    6f04:	a6 0a       	sbc	r10, r22
    6f06:	b7 0a       	sbc	r11, r23
    6f08:	e7 cf       	rjmp	.-50     	; 0x6ed8 <time_to_tm+0x10e>
    6f0a:	0c 56       	subi	r16, 0x6C	; 108
    6f0c:	17 40       	sbci	r17, 0x07	; 7
    6f0e:	1b 87       	std	Y+11, r17	; 0x0b
    6f10:	0a 87       	std	Y+10, r16	; 0x0a
    6f12:	9f 86       	std	Y+15, r9	; 0x0f
    6f14:	8e 86       	std	Y+14, r8	; 0x0e
    6f16:	e8 e8       	ldi	r30, 0x88	; 136
    6f18:	f3 e0       	ldi	r31, 0x03	; 3
    6f1a:	20 e0       	ldi	r18, 0x00	; 0
    6f1c:	30 e0       	ldi	r19, 0x00	; 0
    6f1e:	18 14       	cp	r1, r8
    6f20:	19 04       	cpc	r1, r9
    6f22:	1a 04       	cpc	r1, r10
    6f24:	1b 04       	cpc	r1, r11
    6f26:	e4 f4       	brge	.+56     	; 0x6f60 <time_to_tm+0x196>
    6f28:	2c 30       	cpi	r18, 0x0C	; 12
    6f2a:	31 05       	cpc	r19, r1
    6f2c:	c9 f0       	breq	.+50     	; 0x6f60 <time_to_tm+0x196>
    6f2e:	41 91       	ld	r20, Z+
    6f30:	51 91       	ld	r21, Z+
    6f32:	21 30       	cpi	r18, 0x01	; 1
    6f34:	31 05       	cpc	r19, r1
    6f36:	21 f4       	brne	.+8      	; 0x6f40 <time_to_tm+0x176>
    6f38:	00 97       	sbiw	r24, 0x00	; 0
    6f3a:	11 f0       	breq	.+4      	; 0x6f40 <time_to_tm+0x176>
    6f3c:	4f 5f       	subi	r20, 0xFF	; 255
    6f3e:	5f 4f       	sbci	r21, 0xFF	; 255
    6f40:	05 2e       	mov	r0, r21
    6f42:	00 0c       	add	r0, r0
    6f44:	66 0b       	sbc	r22, r22
    6f46:	77 0b       	sbc	r23, r23
    6f48:	84 16       	cp	r8, r20
    6f4a:	95 06       	cpc	r9, r21
    6f4c:	a6 06       	cpc	r10, r22
    6f4e:	b7 06       	cpc	r11, r23
    6f50:	3c f0       	brlt	.+14     	; 0x6f60 <time_to_tm+0x196>
    6f52:	84 1a       	sub	r8, r20
    6f54:	95 0a       	sbc	r9, r21
    6f56:	a6 0a       	sbc	r10, r22
    6f58:	b7 0a       	sbc	r11, r23
    6f5a:	2f 5f       	subi	r18, 0xFF	; 255
    6f5c:	3f 4f       	sbci	r19, 0xFF	; 255
    6f5e:	df cf       	rjmp	.-66     	; 0x6f1e <time_to_tm+0x154>
    6f60:	39 87       	std	Y+9, r19	; 0x09
    6f62:	28 87       	std	Y+8, r18	; 0x08
    6f64:	af ef       	ldi	r26, 0xFF	; 255
    6f66:	8a 1a       	sub	r8, r26
    6f68:	9a 0a       	sbc	r9, r26
    6f6a:	9f 82       	std	Y+7, r9	; 0x07
    6f6c:	8e 82       	std	Y+6, r8	; 0x06
    6f6e:	b6 01       	movw	r22, r12
    6f70:	c7 01       	movw	r24, r14
    6f72:	04 c0       	rjmp	.+8      	; 0x6f7c <time_to_tm+0x1b2>
    6f74:	6f ef       	ldi	r22, 0xFF	; 255
    6f76:	7f ef       	ldi	r23, 0xFF	; 255
    6f78:	8f ef       	ldi	r24, 0xFF	; 255
    6f7a:	9f ef       	ldi	r25, 0xFF	; 255
    6f7c:	cd b7       	in	r28, 0x3d	; 61
    6f7e:	de b7       	in	r29, 0x3e	; 62
    6f80:	e0 e1       	ldi	r30, 0x10	; 16
    6f82:	0c 94 1d e7 	jmp	0x1ce3a	; 0x1ce3a <__epilogue_restores__+0x4>

00006f86 <gmtime_r>:
    6f86:	0f 93       	push	r16
    6f88:	1f 93       	push	r17
    6f8a:	cf 93       	push	r28
    6f8c:	df 93       	push	r29
    6f8e:	eb 01       	movw	r28, r22
    6f90:	fc 01       	movw	r30, r24
    6f92:	60 81       	ld	r22, Z
    6f94:	71 81       	ldd	r23, Z+1	; 0x01
    6f96:	82 81       	ldd	r24, Z+2	; 0x02
    6f98:	93 81       	ldd	r25, Z+3	; 0x03
    6f9a:	8e 01       	movw	r16, r28
    6f9c:	20 e0       	ldi	r18, 0x00	; 0
    6f9e:	30 e0       	ldi	r19, 0x00	; 0
    6fa0:	a9 01       	movw	r20, r18
    6fa2:	13 df       	rcall	.-474    	; 0x6dca <time_to_tm>
    6fa4:	ce 01       	movw	r24, r28
    6fa6:	df 91       	pop	r29
    6fa8:	cf 91       	pop	r28
    6faa:	1f 91       	pop	r17
    6fac:	0f 91       	pop	r16
    6fae:	08 95       	ret

00006fb0 <gmtime>:
    6fb0:	2e ec       	ldi	r18, 0xCE	; 206
    6fb2:	37 e1       	ldi	r19, 0x17	; 23
    6fb4:	30 93 e5 17 	sts	0x17E5, r19	; 0x8017e5 <p.3677+0x1>
    6fb8:	20 93 e4 17 	sts	0x17E4, r18	; 0x8017e4 <p.3677>
    6fbc:	b9 01       	movw	r22, r18
    6fbe:	e3 df       	rcall	.-58     	; 0x6f86 <gmtime_r>
    6fc0:	8e ec       	ldi	r24, 0xCE	; 206
    6fc2:	97 e1       	ldi	r25, 0x17	; 23
    6fc4:	08 95       	ret

00006fc6 <gettimezone>:
    6fc6:	e8 e7       	ldi	r30, 0x78	; 120
    6fc8:	fa e1       	ldi	r31, 0x1A	; 26
    6fca:	20 81       	ld	r18, Z
    6fcc:	31 81       	ldd	r19, Z+1	; 0x01
    6fce:	dc 01       	movw	r26, r24
    6fd0:	2d 93       	st	X+, r18
    6fd2:	3c 93       	st	X, r19
    6fd4:	22 81       	ldd	r18, Z+2	; 0x02
    6fd6:	33 81       	ldd	r19, Z+3	; 0x03
    6fd8:	fc 01       	movw	r30, r24
    6fda:	33 83       	std	Z+3, r19	; 0x03
    6fdc:	22 83       	std	Z+2, r18	; 0x02
    6fde:	80 e0       	ldi	r24, 0x00	; 0
    6fe0:	90 e0       	ldi	r25, 0x00	; 0
    6fe2:	08 95       	ret

00006fe4 <settimezone>:
    6fe4:	cf 93       	push	r28
    6fe6:	df 93       	push	r29
    6fe8:	ec 01       	movw	r28, r24
    6fea:	28 81       	ld	r18, Y
    6fec:	39 81       	ldd	r19, Y+1	; 0x01
    6fee:	e8 e7       	ldi	r30, 0x78	; 120
    6ff0:	fa e1       	ldi	r31, 0x1A	; 26
    6ff2:	31 83       	std	Z+1, r19	; 0x01
    6ff4:	20 83       	st	Z, r18
    6ff6:	8a 81       	ldd	r24, Y+2	; 0x02
    6ff8:	9b 81       	ldd	r25, Y+3	; 0x03
    6ffa:	93 83       	std	Z+3, r25	; 0x03
    6ffc:	82 83       	std	Z+2, r24	; 0x02
    6ffe:	80 e0       	ldi	r24, 0x00	; 0
    7000:	90 e0       	ldi	r25, 0x00	; 0
    7002:	df 91       	pop	r29
    7004:	cf 91       	pop	r28
    7006:	08 95       	ret

00007008 <gettimeofday>:
    7008:	a8 e0       	ldi	r26, 0x08	; 8
    700a:	b0 e0       	ldi	r27, 0x00	; 0
    700c:	ea e0       	ldi	r30, 0x0A	; 10
    700e:	f8 e3       	ldi	r31, 0x38	; 56
    7010:	0c 94 0b e7 	jmp	0x1ce16	; 0x1ce16 <__prologue_saves__+0x18>
    7014:	8c 01       	movw	r16, r24
    7016:	7b 01       	movw	r14, r22
    7018:	be 01       	movw	r22, r28
    701a:	6f 5f       	subi	r22, 0xFF	; 255
    701c:	7f 4f       	sbci	r23, 0xFF	; 255
    701e:	80 e0       	ldi	r24, 0x00	; 0
    7020:	90 e0       	ldi	r25, 0x00	; 0
    7022:	dc db       	rcall	.-2120   	; 0x67dc <clock_gettime>
    7024:	89 81       	ldd	r24, Y+1	; 0x01
    7026:	9a 81       	ldd	r25, Y+2	; 0x02
    7028:	ab 81       	ldd	r26, Y+3	; 0x03
    702a:	bc 81       	ldd	r27, Y+4	; 0x04
    702c:	f8 01       	movw	r30, r16
    702e:	80 83       	st	Z, r24
    7030:	91 83       	std	Z+1, r25	; 0x01
    7032:	a2 83       	std	Z+2, r26	; 0x02
    7034:	b3 83       	std	Z+3, r27	; 0x03
    7036:	6d 81       	ldd	r22, Y+5	; 0x05
    7038:	7e 81       	ldd	r23, Y+6	; 0x06
    703a:	8f 81       	ldd	r24, Y+7	; 0x07
    703c:	98 85       	ldd	r25, Y+8	; 0x08
    703e:	28 ee       	ldi	r18, 0xE8	; 232
    7040:	33 e0       	ldi	r19, 0x03	; 3
    7042:	40 e0       	ldi	r20, 0x00	; 0
    7044:	50 e0       	ldi	r21, 0x00	; 0
    7046:	0e 94 b4 e6 	call	0x1cd68	; 0x1cd68 <__divmodsi4>
    704a:	f8 01       	movw	r30, r16
    704c:	24 83       	std	Z+4, r18	; 0x04
    704e:	35 83       	std	Z+5, r19	; 0x05
    7050:	46 83       	std	Z+6, r20	; 0x06
    7052:	57 83       	std	Z+7, r21	; 0x07
    7054:	c7 01       	movw	r24, r14
    7056:	b7 df       	rcall	.-146    	; 0x6fc6 <gettimezone>
    7058:	80 e0       	ldi	r24, 0x00	; 0
    705a:	90 e0       	ldi	r25, 0x00	; 0
    705c:	28 96       	adiw	r28, 0x08	; 8
    705e:	e6 e0       	ldi	r30, 0x06	; 6
    7060:	0c 94 27 e7 	jmp	0x1ce4e	; 0x1ce4e <__epilogue_restores__+0x18>

00007064 <time>:
    7064:	cf 93       	push	r28
    7066:	df 93       	push	r29
    7068:	ec 01       	movw	r28, r24
    706a:	60 eb       	ldi	r22, 0xB0	; 176
    706c:	77 e1       	ldi	r23, 0x17	; 23
    706e:	80 e0       	ldi	r24, 0x00	; 0
    7070:	90 e0       	ldi	r25, 0x00	; 0
    7072:	b4 db       	rcall	.-2200   	; 0x67dc <clock_gettime>
    7074:	20 97       	sbiw	r28, 0x00	; 0
    7076:	61 f0       	breq	.+24     	; 0x7090 <time+0x2c>
    7078:	80 91 b0 17 	lds	r24, 0x17B0	; 0x8017b0 <ts.3755>
    707c:	90 91 b1 17 	lds	r25, 0x17B1	; 0x8017b1 <ts.3755+0x1>
    7080:	a0 91 b2 17 	lds	r26, 0x17B2	; 0x8017b2 <ts.3755+0x2>
    7084:	b0 91 b3 17 	lds	r27, 0x17B3	; 0x8017b3 <ts.3755+0x3>
    7088:	88 83       	st	Y, r24
    708a:	99 83       	std	Y+1, r25	; 0x01
    708c:	aa 83       	std	Y+2, r26	; 0x02
    708e:	bb 83       	std	Y+3, r27	; 0x03
    7090:	60 91 b0 17 	lds	r22, 0x17B0	; 0x8017b0 <ts.3755>
    7094:	70 91 b1 17 	lds	r23, 0x17B1	; 0x8017b1 <ts.3755+0x1>
    7098:	80 91 b2 17 	lds	r24, 0x17B2	; 0x8017b2 <ts.3755+0x2>
    709c:	90 91 b3 17 	lds	r25, 0x17B3	; 0x8017b3 <ts.3755+0x3>
    70a0:	df 91       	pop	r29
    70a2:	cf 91       	pop	r28
    70a4:	08 95       	ret

000070a6 <is_dst>:
    70a6:	cf 92       	push	r12
    70a8:	df 92       	push	r13
    70aa:	ef 92       	push	r14
    70ac:	ff 92       	push	r15
    70ae:	6b 01       	movw	r12, r22
    70b0:	7c 01       	movw	r14, r24
    70b2:	05 d4       	rcall	.+2058   	; 0x78be <set_dst>
    70b4:	80 91 7c 1a 	lds	r24, 0x1A7C	; 0x801a7c <dst>
    70b8:	90 91 7d 1a 	lds	r25, 0x1A7D	; 0x801a7d <dst+0x1>
    70bc:	a0 91 7e 1a 	lds	r26, 0x1A7E	; 0x801a7e <dst+0x2>
    70c0:	b0 91 7f 1a 	lds	r27, 0x1A7F	; 0x801a7f <dst+0x3>
    70c4:	c8 16       	cp	r12, r24
    70c6:	d9 06       	cpc	r13, r25
    70c8:	ea 06       	cpc	r14, r26
    70ca:	fb 06       	cpc	r15, r27
    70cc:	88 f0       	brcs	.+34     	; 0x70f0 <is_dst+0x4a>
    70ce:	81 e0       	ldi	r24, 0x01	; 1
    70d0:	90 e0       	ldi	r25, 0x00	; 0
    70d2:	40 91 80 1a 	lds	r20, 0x1A80	; 0x801a80 <dst+0x4>
    70d6:	50 91 81 1a 	lds	r21, 0x1A81	; 0x801a81 <dst+0x5>
    70da:	60 91 82 1a 	lds	r22, 0x1A82	; 0x801a82 <dst+0x6>
    70de:	70 91 83 1a 	lds	r23, 0x1A83	; 0x801a83 <dst+0x7>
    70e2:	4c 15       	cp	r20, r12
    70e4:	5d 05       	cpc	r21, r13
    70e6:	6e 05       	cpc	r22, r14
    70e8:	7f 05       	cpc	r23, r15
    70ea:	20 f4       	brcc	.+8      	; 0x70f4 <is_dst+0x4e>
    70ec:	80 e0       	ldi	r24, 0x00	; 0
    70ee:	02 c0       	rjmp	.+4      	; 0x70f4 <is_dst+0x4e>
    70f0:	80 e0       	ldi	r24, 0x00	; 0
    70f2:	90 e0       	ldi	r25, 0x00	; 0
    70f4:	ff 90       	pop	r15
    70f6:	ef 90       	pop	r14
    70f8:	df 90       	pop	r13
    70fa:	cf 90       	pop	r12
    70fc:	08 95       	ret

000070fe <localtime_r>:
    70fe:	4f 92       	push	r4
    7100:	5f 92       	push	r5
    7102:	6f 92       	push	r6
    7104:	7f 92       	push	r7
    7106:	af 92       	push	r10
    7108:	bf 92       	push	r11
    710a:	cf 92       	push	r12
    710c:	df 92       	push	r13
    710e:	ef 92       	push	r14
    7110:	ff 92       	push	r15
    7112:	0f 93       	push	r16
    7114:	1f 93       	push	r17
    7116:	cf 93       	push	r28
    7118:	df 93       	push	r29
    711a:	00 d0       	rcall	.+0      	; 0x711c <localtime_r+0x1e>
    711c:	00 d0       	rcall	.+0      	; 0x711e <localtime_r+0x20>
    711e:	cd b7       	in	r28, 0x3d	; 61
    7120:	de b7       	in	r29, 0x3e	; 62
    7122:	5b 01       	movw	r10, r22
    7124:	fc 01       	movw	r30, r24
    7126:	40 80       	ld	r4, Z
    7128:	51 80       	ldd	r5, Z+1	; 0x01
    712a:	62 80       	ldd	r6, Z+2	; 0x02
    712c:	73 80       	ldd	r7, Z+3	; 0x03
    712e:	ce 01       	movw	r24, r28
    7130:	01 96       	adiw	r24, 0x01	; 1
    7132:	49 df       	rcall	.-366    	; 0x6fc6 <gettimezone>
    7134:	a9 81       	ldd	r26, Y+1	; 0x01
    7136:	ba 81       	ldd	r27, Y+2	; 0x02
    7138:	2c e3       	ldi	r18, 0x3C	; 60
    713a:	30 e0       	ldi	r19, 0x00	; 0
    713c:	0e 94 d9 e6 	call	0x1cdb2	; 0x1cdb2 <__usmulhisi3>
    7140:	6b 01       	movw	r12, r22
    7142:	7c 01       	movw	r14, r24
    7144:	c3 01       	movw	r24, r6
    7146:	b2 01       	movw	r22, r4
    7148:	6c 19       	sub	r22, r12
    714a:	7d 09       	sbc	r23, r13
    714c:	8e 09       	sbc	r24, r14
    714e:	9f 09       	sbc	r25, r15
    7150:	aa df       	rcall	.-172    	; 0x70a6 <is_dst>
    7152:	89 2b       	or	r24, r25
    7154:	31 f0       	breq	.+12     	; 0x7162 <localtime_r+0x64>
    7156:	f0 e1       	ldi	r31, 0x10	; 16
    7158:	cf 1a       	sub	r12, r31
    715a:	fe e0       	ldi	r31, 0x0E	; 14
    715c:	df 0a       	sbc	r13, r31
    715e:	e1 08       	sbc	r14, r1
    7160:	f1 08       	sbc	r15, r1
    7162:	85 01       	movw	r16, r10
    7164:	a7 01       	movw	r20, r14
    7166:	96 01       	movw	r18, r12
    7168:	c3 01       	movw	r24, r6
    716a:	b2 01       	movw	r22, r4
    716c:	2e de       	rcall	.-932    	; 0x6dca <time_to_tm>
    716e:	c5 01       	movw	r24, r10
    7170:	0f 90       	pop	r0
    7172:	0f 90       	pop	r0
    7174:	0f 90       	pop	r0
    7176:	0f 90       	pop	r0
    7178:	df 91       	pop	r29
    717a:	cf 91       	pop	r28
    717c:	1f 91       	pop	r17
    717e:	0f 91       	pop	r16
    7180:	ff 90       	pop	r15
    7182:	ef 90       	pop	r14
    7184:	df 90       	pop	r13
    7186:	cf 90       	pop	r12
    7188:	bf 90       	pop	r11
    718a:	af 90       	pop	r10
    718c:	7f 90       	pop	r7
    718e:	6f 90       	pop	r6
    7190:	5f 90       	pop	r5
    7192:	4f 90       	pop	r4
    7194:	08 95       	ret

00007196 <localtime>:
    7196:	68 eb       	ldi	r22, 0xB8	; 184
    7198:	77 e1       	ldi	r23, 0x17	; 23
    719a:	b1 cf       	rjmp	.-158    	; 0x70fe <localtime_r>
    719c:	08 95       	ret

0000719e <normalize>:
    719e:	aa e0       	ldi	r26, 0x0A	; 10
    71a0:	b0 e0       	ldi	r27, 0x00	; 0
    71a2:	e5 ed       	ldi	r30, 0xD5	; 213
    71a4:	f8 e3       	ldi	r31, 0x38	; 56
    71a6:	0c 94 ff e6 	jmp	0x1cdfe	; 0x1cdfe <__prologue_saves__>
    71aa:	7c 01       	movw	r14, r24
    71ac:	7a 87       	std	Y+10, r23	; 0x0a
    71ae:	69 87       	std	Y+9, r22	; 0x09
    71b0:	f7 01       	movw	r30, r14
    71b2:	80 81       	ld	r24, Z
    71b4:	91 81       	ldd	r25, Z+1	; 0x01
    71b6:	8c 33       	cpi	r24, 0x3C	; 60
    71b8:	91 05       	cpc	r25, r1
    71ba:	5c f0       	brlt	.+22     	; 0x71d2 <normalize+0x34>
    71bc:	f7 01       	movw	r30, r14
    71be:	22 81       	ldd	r18, Z+2	; 0x02
    71c0:	33 81       	ldd	r19, Z+3	; 0x03
    71c2:	2f 5f       	subi	r18, 0xFF	; 255
    71c4:	3f 4f       	sbci	r19, 0xFF	; 255
    71c6:	33 83       	std	Z+3, r19	; 0x03
    71c8:	22 83       	std	Z+2, r18	; 0x02
    71ca:	cc 97       	sbiw	r24, 0x3c	; 60
    71cc:	91 83       	std	Z+1, r25	; 0x01
    71ce:	80 83       	st	Z, r24
    71d0:	ef cf       	rjmp	.-34     	; 0x71b0 <normalize+0x12>
    71d2:	f7 01       	movw	r30, r14
    71d4:	01 90       	ld	r0, Z+
    71d6:	f0 81       	ld	r31, Z
    71d8:	e0 2d       	mov	r30, r0
    71da:	fe 83       	std	Y+6, r31	; 0x06
    71dc:	ed 83       	std	Y+5, r30	; 0x05
    71de:	f7 ff       	sbrs	r31, 7
    71e0:	0d c0       	rjmp	.+26     	; 0x71fc <normalize+0x5e>
    71e2:	f7 01       	movw	r30, r14
    71e4:	82 81       	ldd	r24, Z+2	; 0x02
    71e6:	93 81       	ldd	r25, Z+3	; 0x03
    71e8:	01 97       	sbiw	r24, 0x01	; 1
    71ea:	93 83       	std	Z+3, r25	; 0x03
    71ec:	82 83       	std	Z+2, r24	; 0x02
    71ee:	6d 81       	ldd	r22, Y+5	; 0x05
    71f0:	7e 81       	ldd	r23, Y+6	; 0x06
    71f2:	64 5c       	subi	r22, 0xC4	; 196
    71f4:	7f 4f       	sbci	r23, 0xFF	; 255
    71f6:	71 83       	std	Z+1, r23	; 0x01
    71f8:	60 83       	st	Z, r22
    71fa:	eb cf       	rjmp	.-42     	; 0x71d2 <normalize+0x34>
    71fc:	f7 01       	movw	r30, r14
    71fe:	82 81       	ldd	r24, Z+2	; 0x02
    7200:	93 81       	ldd	r25, Z+3	; 0x03
    7202:	8c 33       	cpi	r24, 0x3C	; 60
    7204:	91 05       	cpc	r25, r1
    7206:	5c f0       	brlt	.+22     	; 0x721e <normalize+0x80>
    7208:	f7 01       	movw	r30, r14
    720a:	24 81       	ldd	r18, Z+4	; 0x04
    720c:	35 81       	ldd	r19, Z+5	; 0x05
    720e:	2f 5f       	subi	r18, 0xFF	; 255
    7210:	3f 4f       	sbci	r19, 0xFF	; 255
    7212:	35 83       	std	Z+5, r19	; 0x05
    7214:	24 83       	std	Z+4, r18	; 0x04
    7216:	cc 97       	sbiw	r24, 0x3c	; 60
    7218:	93 83       	std	Z+3, r25	; 0x03
    721a:	82 83       	std	Z+2, r24	; 0x02
    721c:	ef cf       	rjmp	.-34     	; 0x71fc <normalize+0x5e>
    721e:	f7 01       	movw	r30, r14
    7220:	22 80       	ldd	r2, Z+2	; 0x02
    7222:	33 80       	ldd	r3, Z+3	; 0x03
    7224:	37 fe       	sbrs	r3, 7
    7226:	0d c0       	rjmp	.+26     	; 0x7242 <normalize+0xa4>
    7228:	f7 01       	movw	r30, r14
    722a:	84 81       	ldd	r24, Z+4	; 0x04
    722c:	95 81       	ldd	r25, Z+5	; 0x05
    722e:	01 97       	sbiw	r24, 0x01	; 1
    7230:	95 83       	std	Z+5, r25	; 0x05
    7232:	84 83       	std	Z+4, r24	; 0x04
    7234:	fc e3       	ldi	r31, 0x3C	; 60
    7236:	2f 0e       	add	r2, r31
    7238:	31 1c       	adc	r3, r1
    723a:	f7 01       	movw	r30, r14
    723c:	33 82       	std	Z+3, r3	; 0x03
    723e:	22 82       	std	Z+2, r2	; 0x02
    7240:	ee cf       	rjmp	.-36     	; 0x721e <normalize+0x80>
    7242:	f7 01       	movw	r30, r14
    7244:	84 81       	ldd	r24, Z+4	; 0x04
    7246:	95 81       	ldd	r25, Z+5	; 0x05
    7248:	88 31       	cpi	r24, 0x18	; 24
    724a:	91 05       	cpc	r25, r1
    724c:	5c f0       	brlt	.+22     	; 0x7264 <normalize+0xc6>
    724e:	f7 01       	movw	r30, r14
    7250:	26 81       	ldd	r18, Z+6	; 0x06
    7252:	37 81       	ldd	r19, Z+7	; 0x07
    7254:	2f 5f       	subi	r18, 0xFF	; 255
    7256:	3f 4f       	sbci	r19, 0xFF	; 255
    7258:	37 83       	std	Z+7, r19	; 0x07
    725a:	26 83       	std	Z+6, r18	; 0x06
    725c:	48 97       	sbiw	r24, 0x18	; 24
    725e:	95 83       	std	Z+5, r25	; 0x05
    7260:	84 83       	std	Z+4, r24	; 0x04
    7262:	ef cf       	rjmp	.-34     	; 0x7242 <normalize+0xa4>
    7264:	f7 01       	movw	r30, r14
    7266:	04 81       	ldd	r16, Z+4	; 0x04
    7268:	15 81       	ldd	r17, Z+5	; 0x05
    726a:	17 ff       	sbrs	r17, 7
    726c:	0b c0       	rjmp	.+22     	; 0x7284 <normalize+0xe6>
    726e:	f7 01       	movw	r30, r14
    7270:	86 81       	ldd	r24, Z+6	; 0x06
    7272:	97 81       	ldd	r25, Z+7	; 0x07
    7274:	01 97       	sbiw	r24, 0x01	; 1
    7276:	97 83       	std	Z+7, r25	; 0x07
    7278:	86 83       	std	Z+6, r24	; 0x06
    727a:	08 5e       	subi	r16, 0xE8	; 232
    727c:	1f 4f       	sbci	r17, 0xFF	; 255
    727e:	15 83       	std	Z+5, r17	; 0x05
    7280:	04 83       	std	Z+4, r16	; 0x04
    7282:	f0 cf       	rjmp	.-32     	; 0x7264 <normalize+0xc6>
    7284:	f7 01       	movw	r30, r14
    7286:	80 85       	ldd	r24, Z+8	; 0x08
    7288:	91 85       	ldd	r25, Z+9	; 0x09
    728a:	8c 30       	cpi	r24, 0x0C	; 12
    728c:	91 05       	cpc	r25, r1
    728e:	5c f0       	brlt	.+22     	; 0x72a6 <normalize+0x108>
    7290:	f7 01       	movw	r30, r14
    7292:	22 85       	ldd	r18, Z+10	; 0x0a
    7294:	33 85       	ldd	r19, Z+11	; 0x0b
    7296:	2f 5f       	subi	r18, 0xFF	; 255
    7298:	3f 4f       	sbci	r19, 0xFF	; 255
    729a:	33 87       	std	Z+11, r19	; 0x0b
    729c:	22 87       	std	Z+10, r18	; 0x0a
    729e:	0c 97       	sbiw	r24, 0x0c	; 12
    72a0:	91 87       	std	Z+9, r25	; 0x09
    72a2:	80 87       	std	Z+8, r24	; 0x08
    72a4:	ef cf       	rjmp	.-34     	; 0x7284 <normalize+0xe6>
    72a6:	f7 01       	movw	r30, r14
    72a8:	80 85       	ldd	r24, Z+8	; 0x08
    72aa:	91 85       	ldd	r25, Z+9	; 0x09
    72ac:	97 ff       	sbrs	r25, 7
    72ae:	2d c0       	rjmp	.+90     	; 0x730a <normalize+0x16c>
    72b0:	f7 01       	movw	r30, r14
    72b2:	22 85       	ldd	r18, Z+10	; 0x0a
    72b4:	33 85       	ldd	r19, Z+11	; 0x0b
    72b6:	21 50       	subi	r18, 0x01	; 1
    72b8:	31 09       	sbc	r19, r1
    72ba:	33 87       	std	Z+11, r19	; 0x0b
    72bc:	22 87       	std	Z+10, r18	; 0x0a
    72be:	0c 96       	adiw	r24, 0x0c	; 12
    72c0:	91 87       	std	Z+9, r25	; 0x09
    72c2:	80 87       	std	Z+8, r24	; 0x08
    72c4:	f0 cf       	rjmp	.-32     	; 0x72a6 <normalize+0x108>
    72c6:	f7 01       	movw	r30, r14
    72c8:	c6 80       	ldd	r12, Z+6	; 0x06
    72ca:	d7 80       	ldd	r13, Z+7	; 0x07
    72cc:	a0 84       	ldd	r10, Z+8	; 0x08
    72ce:	b1 84       	ldd	r11, Z+9	; 0x09
    72d0:	b4 01       	movw	r22, r8
    72d2:	c5 01       	movw	r24, r10
    72d4:	59 dd       	rcall	.-1358   	; 0x6d88 <Days_Per_Month>
    72d6:	8c 15       	cp	r24, r12
    72d8:	9d 05       	cpc	r25, r13
    72da:	84 f5       	brge	.+96     	; 0x733c <normalize+0x19e>
    72dc:	c8 1a       	sub	r12, r24
    72de:	d9 0a       	sbc	r13, r25
    72e0:	f7 01       	movw	r30, r14
    72e2:	d7 82       	std	Z+7, r13	; 0x07
    72e4:	c6 82       	std	Z+6, r12	; 0x06
    72e6:	c5 01       	movw	r24, r10
    72e8:	01 96       	adiw	r24, 0x01	; 1
    72ea:	91 87       	std	Z+9, r25	; 0x09
    72ec:	80 87       	std	Z+8, r24	; 0x08
    72ee:	0c 97       	sbiw	r24, 0x0c	; 12
    72f0:	54 f3       	brlt	.-44     	; 0x72c6 <normalize+0x128>
    72f2:	fb e0       	ldi	r31, 0x0B	; 11
    72f4:	af 1a       	sub	r10, r31
    72f6:	b1 08       	sbc	r11, r1
    72f8:	f7 01       	movw	r30, r14
    72fa:	b1 86       	std	Z+9, r11	; 0x09
    72fc:	a0 86       	std	Z+8, r10	; 0x08
    72fe:	ff ef       	ldi	r31, 0xFF	; 255
    7300:	8f 1a       	sub	r8, r31
    7302:	9f 0a       	sbc	r9, r31
    7304:	f7 01       	movw	r30, r14
    7306:	93 86       	std	Z+11, r9	; 0x0b
    7308:	82 86       	std	Z+10, r8	; 0x0a
    730a:	f7 01       	movw	r30, r14
    730c:	82 84       	ldd	r8, Z+10	; 0x0a
    730e:	93 84       	ldd	r9, Z+11	; 0x0b
    7310:	da cf       	rjmp	.-76     	; 0x72c6 <normalize+0x128>
    7312:	f7 01       	movw	r30, r14
    7314:	80 85       	ldd	r24, Z+8	; 0x08
    7316:	91 85       	ldd	r25, Z+9	; 0x09
    7318:	9c 01       	movw	r18, r24
    731a:	21 50       	subi	r18, 0x01	; 1
    731c:	31 09       	sbc	r19, r1
    731e:	37 fd       	sbrc	r19, 7
    7320:	16 c0       	rjmp	.+44     	; 0x734e <normalize+0x1b0>
    7322:	31 87       	std	Z+9, r19	; 0x09
    7324:	20 87       	std	Z+8, r18	; 0x08
    7326:	f7 01       	movw	r30, r14
    7328:	62 85       	ldd	r22, Z+10	; 0x0a
    732a:	73 85       	ldd	r23, Z+11	; 0x0b
    732c:	80 85       	ldd	r24, Z+8	; 0x08
    732e:	91 85       	ldd	r25, Z+9	; 0x09
    7330:	2b dd       	rcall	.-1450   	; 0x6d88 <Days_Per_Month>
    7332:	88 0d       	add	r24, r8
    7334:	99 1d       	adc	r25, r9
    7336:	f7 01       	movw	r30, r14
    7338:	97 83       	std	Z+7, r25	; 0x07
    733a:	86 83       	std	Z+6, r24	; 0x06
    733c:	f7 01       	movw	r30, r14
    733e:	86 80       	ldd	r8, Z+6	; 0x06
    7340:	97 80       	ldd	r9, Z+7	; 0x07
    7342:	a2 84       	ldd	r10, Z+10	; 0x0a
    7344:	b3 84       	ldd	r11, Z+11	; 0x0b
    7346:	18 14       	cp	r1, r8
    7348:	19 04       	cpc	r1, r9
    734a:	1c f7       	brge	.-58     	; 0x7312 <normalize+0x174>
    734c:	0b c0       	rjmp	.+22     	; 0x7364 <normalize+0x1c6>
    734e:	0b 96       	adiw	r24, 0x0b	; 11
    7350:	f7 01       	movw	r30, r14
    7352:	91 87       	std	Z+9, r25	; 0x09
    7354:	80 87       	std	Z+8, r24	; 0x08
    7356:	f1 e0       	ldi	r31, 0x01	; 1
    7358:	af 1a       	sub	r10, r31
    735a:	b1 08       	sbc	r11, r1
    735c:	f7 01       	movw	r30, r14
    735e:	b3 86       	std	Z+11, r11	; 0x0b
    7360:	a2 86       	std	Z+10, r10	; 0x0a
    7362:	e1 cf       	rjmp	.-62     	; 0x7326 <normalize+0x188>
    7364:	a5 01       	movw	r20, r10
    7366:	44 59       	subi	r20, 0x94	; 148
    7368:	58 4f       	sbci	r21, 0xF8	; 248
    736a:	58 87       	std	Y+8, r21	; 0x08
    736c:	4f 83       	std	Y+7, r20	; 0x07
    736e:	35 01       	movw	r6, r10
    7370:	56 e4       	ldi	r21, 0x46	; 70
    7372:	65 1a       	sub	r6, r21
    7374:	71 08       	sbc	r7, r1
    7376:	89 e8       	ldi	r24, 0x89	; 137
    7378:	68 16       	cp	r6, r24
    737a:	71 04       	cpc	r7, r1
    737c:	08 f0       	brcs	.+2      	; 0x7380 <normalize+0x1e2>
    737e:	9b c0       	rjmp	.+310    	; 0x74b6 <normalize+0x318>
    7380:	c0 84       	ldd	r12, Z+8	; 0x08
    7382:	d1 84       	ldd	r13, Z+9	; 0x09
    7384:	9c e0       	ldi	r25, 0x0C	; 12
    7386:	c9 16       	cp	r12, r25
    7388:	d1 04       	cpc	r13, r1
    738a:	08 f0       	brcs	.+2      	; 0x738e <normalize+0x1f0>
    738c:	94 c0       	rjmp	.+296    	; 0x74b6 <normalize+0x318>
    738e:	24 01       	movw	r4, r8
    7390:	e1 e0       	ldi	r30, 0x01	; 1
    7392:	4e 1a       	sub	r4, r30
    7394:	51 08       	sbc	r5, r1
    7396:	6f 81       	ldd	r22, Y+7	; 0x07
    7398:	78 85       	ldd	r23, Y+8	; 0x08
    739a:	c6 01       	movw	r24, r12
    739c:	f5 dc       	rcall	.-1558   	; 0x6d88 <Days_Per_Month>
    739e:	48 16       	cp	r4, r24
    73a0:	59 06       	cpc	r5, r25
    73a2:	0c f0       	brlt	.+2      	; 0x73a6 <normalize+0x208>
    73a4:	88 c0       	rjmp	.+272    	; 0x74b6 <normalize+0x318>
    73a6:	08 31       	cpi	r16, 0x18	; 24
    73a8:	11 05       	cpc	r17, r1
    73aa:	0c f0       	brlt	.+2      	; 0x73ae <normalize+0x210>
    73ac:	84 c0       	rjmp	.+264    	; 0x74b6 <normalize+0x318>
    73ae:	fc e3       	ldi	r31, 0x3C	; 60
    73b0:	2f 16       	cp	r2, r31
    73b2:	31 04       	cpc	r3, r1
    73b4:	0c f0       	brlt	.+2      	; 0x73b8 <normalize+0x21a>
    73b6:	7f c0       	rjmp	.+254    	; 0x74b6 <normalize+0x318>
    73b8:	4d 81       	ldd	r20, Y+5	; 0x05
    73ba:	5e 81       	ldd	r21, Y+6	; 0x06
    73bc:	4c 33       	cpi	r20, 0x3C	; 60
    73be:	51 05       	cpc	r21, r1
    73c0:	0c f0       	brlt	.+2      	; 0x73c4 <normalize+0x226>
    73c2:	79 c0       	rjmp	.+242    	; 0x74b6 <normalize+0x318>
    73c4:	2d e6       	ldi	r18, 0x6D	; 109
    73c6:	31 e0       	ldi	r19, 0x01	; 1
    73c8:	d3 01       	movw	r26, r6
    73ca:	0e 94 d9 e6 	call	0x1cdb2	; 0x1cdb2 <__usmulhisi3>
    73ce:	f6 01       	movw	r30, r12
    73d0:	ee 0f       	add	r30, r30
    73d2:	ff 1f       	adc	r31, r31
    73d4:	e0 56       	subi	r30, 0x60	; 96
    73d6:	fc 4f       	sbci	r31, 0xFC	; 252
    73d8:	20 81       	ld	r18, Z
    73da:	31 81       	ldd	r19, Z+1	; 0x01
    73dc:	dc 01       	movw	r26, r24
    73de:	cb 01       	movw	r24, r22
    73e0:	82 0f       	add	r24, r18
    73e2:	93 1f       	adc	r25, r19
    73e4:	a1 1d       	adc	r26, r1
    73e6:	b1 1d       	adc	r27, r1
    73e8:	05 2c       	mov	r0, r5
    73ea:	00 0c       	add	r0, r0
    73ec:	66 08       	sbc	r6, r6
    73ee:	77 08       	sbc	r7, r7
    73f0:	48 0e       	add	r4, r24
    73f2:	59 1e       	adc	r5, r25
    73f4:	6a 1e       	adc	r6, r26
    73f6:	7b 1e       	adc	r7, r27
    73f8:	1a 14       	cp	r1, r10
    73fa:	1b 04       	cpc	r1, r11
    73fc:	1c f4       	brge	.+6      	; 0x7404 <normalize+0x266>
    73fe:	51 e0       	ldi	r21, 0x01	; 1
    7400:	a5 1a       	sub	r10, r21
    7402:	b1 08       	sbc	r11, r1
    7404:	45 01       	movw	r8, r10
    7406:	95 94       	asr	r9
    7408:	87 94       	ror	r8
    740a:	95 94       	asr	r9
    740c:	87 94       	ror	r8
    740e:	88 ec       	ldi	r24, 0xC8	; 200
    7410:	a8 16       	cp	r10, r24
    7412:	b1 04       	cpc	r11, r1
    7414:	1c f0       	brlt	.+6      	; 0x741c <normalize+0x27e>
    7416:	91 e0       	ldi	r25, 0x01	; 1
    7418:	89 1a       	sub	r8, r25
    741a:	91 08       	sbc	r9, r1
    741c:	09 2c       	mov	r0, r9
    741e:	00 0c       	add	r0, r0
    7420:	aa 08       	sbc	r10, r10
    7422:	bb 08       	sbc	r11, r11
    7424:	84 0c       	add	r8, r4
    7426:	95 1c       	adc	r9, r5
    7428:	a6 1c       	adc	r10, r6
    742a:	b7 1c       	adc	r11, r7
    742c:	24 01       	movw	r4, r8
    742e:	35 01       	movw	r6, r10
    7430:	e1 e1       	ldi	r30, 0x11	; 17
    7432:	4e 1a       	sub	r4, r30
    7434:	51 08       	sbc	r5, r1
    7436:	61 08       	sbc	r6, r1
    7438:	71 08       	sbc	r7, r1
    743a:	f2 e0       	ldi	r31, 0x02	; 2
    743c:	cf 16       	cp	r12, r31
    743e:	d1 04       	cpc	r13, r1
    7440:	64 f0       	brlt	.+24     	; 0x745a <normalize+0x2bc>
    7442:	8f 81       	ldd	r24, Y+7	; 0x07
    7444:	98 85       	ldd	r25, Y+8	; 0x08
    7446:	7b dc       	rcall	.-1802   	; 0x6d3e <IS_Leap>
    7448:	89 2b       	or	r24, r25
    744a:	39 f0       	breq	.+14     	; 0x745a <normalize+0x2bc>
    744c:	24 01       	movw	r4, r8
    744e:	35 01       	movw	r6, r10
    7450:	40 e1       	ldi	r20, 0x10	; 16
    7452:	44 1a       	sub	r4, r20
    7454:	51 08       	sbc	r5, r1
    7456:	61 08       	sbc	r6, r1
    7458:	71 08       	sbc	r7, r1
    745a:	a8 e1       	ldi	r26, 0x18	; 24
    745c:	b0 e0       	ldi	r27, 0x00	; 0
    745e:	a3 01       	movw	r20, r6
    7460:	92 01       	movw	r18, r4
    7462:	0e 94 df e6 	call	0x1cdbe	; 0x1cdbe <__muluhisi3>
    7466:	01 2e       	mov	r0, r17
    7468:	00 0c       	add	r0, r0
    746a:	22 0b       	sbc	r18, r18
    746c:	33 0b       	sbc	r19, r19
    746e:	a9 01       	movw	r20, r18
    7470:	98 01       	movw	r18, r16
    7472:	26 0f       	add	r18, r22
    7474:	37 1f       	adc	r19, r23
    7476:	48 1f       	adc	r20, r24
    7478:	59 1f       	adc	r21, r25
    747a:	ac e3       	ldi	r26, 0x3C	; 60
    747c:	b0 e0       	ldi	r27, 0x00	; 0
    747e:	0e 94 df e6 	call	0x1cdbe	; 0x1cdbe <__muluhisi3>
    7482:	81 01       	movw	r16, r2
    7484:	03 2c       	mov	r0, r3
    7486:	00 0c       	add	r0, r0
    7488:	22 0b       	sbc	r18, r18
    748a:	33 0b       	sbc	r19, r19
    748c:	a9 01       	movw	r20, r18
    748e:	98 01       	movw	r18, r16
    7490:	26 0f       	add	r18, r22
    7492:	37 1f       	adc	r19, r23
    7494:	48 1f       	adc	r20, r24
    7496:	59 1f       	adc	r21, r25
    7498:	0e 94 df e6 	call	0x1cdbe	; 0x1cdbe <__muluhisi3>
    749c:	ed 81       	ldd	r30, Y+5	; 0x05
    749e:	fe 81       	ldd	r31, Y+6	; 0x06
    74a0:	8f 01       	movw	r16, r30
    74a2:	ff 0f       	add	r31, r31
    74a4:	22 0b       	sbc	r18, r18
    74a6:	33 0b       	sbc	r19, r19
    74a8:	48 01       	movw	r8, r16
    74aa:	59 01       	movw	r10, r18
    74ac:	86 0e       	add	r8, r22
    74ae:	97 1e       	adc	r9, r23
    74b0:	a8 1e       	adc	r10, r24
    74b2:	b9 1e       	adc	r11, r25
    74b4:	04 c0       	rjmp	.+8      	; 0x74be <normalize+0x320>
    74b6:	88 24       	eor	r8, r8
    74b8:	8a 94       	dec	r8
    74ba:	98 2c       	mov	r9, r8
    74bc:	54 01       	movw	r10, r8
    74be:	49 85       	ldd	r20, Y+9	; 0x09
    74c0:	5a 85       	ldd	r21, Y+10	; 0x0a
    74c2:	45 2b       	or	r20, r21
    74c4:	e9 f0       	breq	.+58     	; 0x7500 <normalize+0x362>
    74c6:	ce 01       	movw	r24, r28
    74c8:	01 96       	adiw	r24, 0x01	; 1
    74ca:	7d dd       	rcall	.-1286   	; 0x6fc6 <gettimezone>
    74cc:	a9 81       	ldd	r26, Y+1	; 0x01
    74ce:	ba 81       	ldd	r27, Y+2	; 0x02
    74d0:	2c e3       	ldi	r18, 0x3C	; 60
    74d2:	30 e0       	ldi	r19, 0x00	; 0
    74d4:	0e 94 d9 e6 	call	0x1cdb2	; 0x1cdb2 <__usmulhisi3>
    74d8:	2b 01       	movw	r4, r22
    74da:	3c 01       	movw	r6, r24
    74dc:	c5 01       	movw	r24, r10
    74de:	b4 01       	movw	r22, r8
    74e0:	e2 dd       	rcall	.-1084   	; 0x70a6 <is_dst>
    74e2:	89 2b       	or	r24, r25
    74e4:	51 f0       	breq	.+20     	; 0x74fa <normalize+0x35c>
    74e6:	50 e1       	ldi	r21, 0x10	; 16
    74e8:	45 1a       	sub	r4, r21
    74ea:	5e e0       	ldi	r21, 0x0E	; 14
    74ec:	55 0a       	sbc	r5, r21
    74ee:	61 08       	sbc	r6, r1
    74f0:	71 08       	sbc	r7, r1
    74f2:	cc 24       	eor	r12, r12
    74f4:	c3 94       	inc	r12
    74f6:	d1 2c       	mov	r13, r1
    74f8:	08 c0       	rjmp	.+16     	; 0x750a <normalize+0x36c>
    74fa:	c1 2c       	mov	r12, r1
    74fc:	d1 2c       	mov	r13, r1
    74fe:	05 c0       	rjmp	.+10     	; 0x750a <normalize+0x36c>
    7500:	c1 2c       	mov	r12, r1
    7502:	d1 2c       	mov	r13, r1
    7504:	41 2c       	mov	r4, r1
    7506:	51 2c       	mov	r5, r1
    7508:	32 01       	movw	r6, r4
    750a:	87 01       	movw	r16, r14
    750c:	a3 01       	movw	r20, r6
    750e:	92 01       	movw	r18, r4
    7510:	c5 01       	movw	r24, r10
    7512:	b4 01       	movw	r22, r8
    7514:	5a dc       	rcall	.-1868   	; 0x6dca <time_to_tm>
    7516:	c1 14       	cp	r12, r1
    7518:	d1 04       	cpc	r13, r1
    751a:	29 f0       	breq	.+10     	; 0x7526 <normalize+0x388>
    751c:	21 e0       	ldi	r18, 0x01	; 1
    751e:	30 e0       	ldi	r19, 0x00	; 0
    7520:	f7 01       	movw	r30, r14
    7522:	31 8b       	std	Z+17, r19	; 0x11
    7524:	20 8b       	std	Z+16, r18	; 0x10
    7526:	2a 96       	adiw	r28, 0x0a	; 10
    7528:	e2 e1       	ldi	r30, 0x12	; 18
    752a:	0c 94 1b e7 	jmp	0x1ce36	; 0x1ce36 <__epilogue_restores__>

0000752e <timegm>:
    752e:	60 e0       	ldi	r22, 0x00	; 0
    7530:	70 e0       	ldi	r23, 0x00	; 0
    7532:	35 ce       	rjmp	.-918    	; 0x719e <normalize>
    7534:	08 95       	ret

00007536 <setdate_r>:
    7536:	cf 92       	push	r12
    7538:	df 92       	push	r13
    753a:	ef 92       	push	r14
    753c:	ff 92       	push	r15
    753e:	cf 93       	push	r28
    7540:	df 93       	push	r29
    7542:	cd b7       	in	r28, 0x3d	; 61
    7544:	de b7       	in	r29, 0x3e	; 62
    7546:	a5 97       	sbiw	r28, 0x25	; 37
    7548:	0f b6       	in	r0, 0x3f	; 63
    754a:	f8 94       	cli
    754c:	de bf       	out	0x3e, r29	; 62
    754e:	0f be       	out	0x3f, r0	; 63
    7550:	cd bf       	out	0x3d, r28	; 61
    7552:	9d a3       	std	Y+37, r25	; 0x25
    7554:	8c a3       	std	Y+36, r24	; 0x24
    7556:	1f 82       	std	Y+7, r1	; 0x07
    7558:	1e 82       	std	Y+6, r1	; 0x06
    755a:	19 86       	std	Y+9, r1	; 0x09
    755c:	18 86       	std	Y+8, r1	; 0x08
    755e:	1b 86       	std	Y+11, r1	; 0x0b
    7560:	1a 86       	std	Y+10, r1	; 0x0a
    7562:	1d 86       	std	Y+13, r1	; 0x0d
    7564:	1c 86       	std	Y+12, r1	; 0x0c
    7566:	1f 86       	std	Y+15, r1	; 0x0f
    7568:	1e 86       	std	Y+14, r1	; 0x0e
    756a:	19 8a       	std	Y+17, r1	; 0x11
    756c:	18 8a       	std	Y+16, r1	; 0x10
    756e:	8c a1       	ldd	r24, Y+36	; 0x24
    7570:	9d a1       	ldd	r25, Y+37	; 0x25
    7572:	fc 01       	movw	r30, r24
    7574:	20 81       	ld	r18, Z
    7576:	20 32       	cpi	r18, 0x20	; 32
    7578:	21 f4       	brne	.+8      	; 0x7582 <setdate_r+0x4c>
    757a:	01 96       	adiw	r24, 0x01	; 1
    757c:	9d a3       	std	Y+37, r25	; 0x25
    757e:	8c a3       	std	Y+36, r24	; 0x24
    7580:	f6 cf       	rjmp	.-20     	; 0x756e <setdate_r+0x38>
    7582:	4a e0       	ldi	r20, 0x0A	; 10
    7584:	50 e0       	ldi	r21, 0x00	; 0
    7586:	be 01       	movw	r22, r28
    7588:	6c 5d       	subi	r22, 0xDC	; 220
    758a:	7f 4f       	sbci	r23, 0xFF	; 255
    758c:	0e 94 6b 47 	call	0x8ed6	; 0x8ed6 <strtol>
    7590:	79 8b       	std	Y+17, r23	; 0x11
    7592:	68 8b       	std	Y+16, r22	; 0x10
    7594:	8c a1       	ldd	r24, Y+36	; 0x24
    7596:	9d a1       	ldd	r25, Y+37	; 0x25
    7598:	fc 01       	movw	r30, r24
    759a:	20 81       	ld	r18, Z
    759c:	20 32       	cpi	r18, 0x20	; 32
    759e:	21 f4       	brne	.+8      	; 0x75a8 <setdate_r+0x72>
    75a0:	01 96       	adiw	r24, 0x01	; 1
    75a2:	9d a3       	std	Y+37, r25	; 0x25
    75a4:	8c a3       	std	Y+36, r24	; 0x24
    75a6:	f6 cf       	rjmp	.-20     	; 0x7594 <setdate_r+0x5e>
    75a8:	4a e0       	ldi	r20, 0x0A	; 10
    75aa:	50 e0       	ldi	r21, 0x00	; 0
    75ac:	be 01       	movw	r22, r28
    75ae:	6c 5d       	subi	r22, 0xDC	; 220
    75b0:	7f 4f       	sbci	r23, 0xFF	; 255
    75b2:	0e 94 6b 47 	call	0x8ed6	; 0x8ed6 <strtol>
    75b6:	7f 87       	std	Y+15, r23	; 0x0f
    75b8:	6e 87       	std	Y+14, r22	; 0x0e
    75ba:	8c a1       	ldd	r24, Y+36	; 0x24
    75bc:	9d a1       	ldd	r25, Y+37	; 0x25
    75be:	fc 01       	movw	r30, r24
    75c0:	20 81       	ld	r18, Z
    75c2:	20 32       	cpi	r18, 0x20	; 32
    75c4:	21 f4       	brne	.+8      	; 0x75ce <setdate_r+0x98>
    75c6:	01 96       	adiw	r24, 0x01	; 1
    75c8:	9d a3       	std	Y+37, r25	; 0x25
    75ca:	8c a3       	std	Y+36, r24	; 0x24
    75cc:	f6 cf       	rjmp	.-20     	; 0x75ba <setdate_r+0x84>
    75ce:	4a e0       	ldi	r20, 0x0A	; 10
    75d0:	50 e0       	ldi	r21, 0x00	; 0
    75d2:	be 01       	movw	r22, r28
    75d4:	6c 5d       	subi	r22, 0xDC	; 220
    75d6:	7f 4f       	sbci	r23, 0xFF	; 255
    75d8:	0e 94 6b 47 	call	0x8ed6	; 0x8ed6 <strtol>
    75dc:	7d 87       	std	Y+13, r23	; 0x0d
    75de:	6c 87       	std	Y+12, r22	; 0x0c
    75e0:	8c a1       	ldd	r24, Y+36	; 0x24
    75e2:	9d a1       	ldd	r25, Y+37	; 0x25
    75e4:	fc 01       	movw	r30, r24
    75e6:	20 81       	ld	r18, Z
    75e8:	20 32       	cpi	r18, 0x20	; 32
    75ea:	21 f4       	brne	.+8      	; 0x75f4 <setdate_r+0xbe>
    75ec:	01 96       	adiw	r24, 0x01	; 1
    75ee:	9d a3       	std	Y+37, r25	; 0x25
    75f0:	8c a3       	std	Y+36, r24	; 0x24
    75f2:	f6 cf       	rjmp	.-20     	; 0x75e0 <setdate_r+0xaa>
    75f4:	4a e0       	ldi	r20, 0x0A	; 10
    75f6:	50 e0       	ldi	r21, 0x00	; 0
    75f8:	be 01       	movw	r22, r28
    75fa:	6c 5d       	subi	r22, 0xDC	; 220
    75fc:	7f 4f       	sbci	r23, 0xFF	; 255
    75fe:	0e 94 6b 47 	call	0x8ed6	; 0x8ed6 <strtol>
    7602:	7b 87       	std	Y+11, r23	; 0x0b
    7604:	6a 87       	std	Y+10, r22	; 0x0a
    7606:	ec a1       	ldd	r30, Y+36	; 0x24
    7608:	fd a1       	ldd	r31, Y+37	; 0x25
    760a:	80 81       	ld	r24, Z
    760c:	88 23       	and	r24, r24
    760e:	39 f0       	breq	.+14     	; 0x761e <setdate_r+0xe8>
    7610:	80 32       	cpi	r24, 0x20	; 32
    7612:	11 f0       	breq	.+4      	; 0x7618 <setdate_r+0xe2>
    7614:	8a 33       	cpi	r24, 0x3A	; 58
    7616:	19 f4       	brne	.+6      	; 0x761e <setdate_r+0xe8>
    7618:	31 96       	adiw	r30, 0x01	; 1
    761a:	fd a3       	std	Y+37, r31	; 0x25
    761c:	ec a3       	std	Y+36, r30	; 0x24
    761e:	4a e0       	ldi	r20, 0x0A	; 10
    7620:	50 e0       	ldi	r21, 0x00	; 0
    7622:	be 01       	movw	r22, r28
    7624:	6c 5d       	subi	r22, 0xDC	; 220
    7626:	7f 4f       	sbci	r23, 0xFF	; 255
    7628:	8c a1       	ldd	r24, Y+36	; 0x24
    762a:	9d a1       	ldd	r25, Y+37	; 0x25
    762c:	0e 94 6b 47 	call	0x8ed6	; 0x8ed6 <strtol>
    7630:	79 87       	std	Y+9, r23	; 0x09
    7632:	68 87       	std	Y+8, r22	; 0x08
    7634:	ec a1       	ldd	r30, Y+36	; 0x24
    7636:	fd a1       	ldd	r31, Y+37	; 0x25
    7638:	80 81       	ld	r24, Z
    763a:	88 23       	and	r24, r24
    763c:	39 f0       	breq	.+14     	; 0x764c <setdate_r+0x116>
    763e:	80 32       	cpi	r24, 0x20	; 32
    7640:	11 f0       	breq	.+4      	; 0x7646 <setdate_r+0x110>
    7642:	8a 33       	cpi	r24, 0x3A	; 58
    7644:	19 f4       	brne	.+6      	; 0x764c <setdate_r+0x116>
    7646:	31 96       	adiw	r30, 0x01	; 1
    7648:	fd a3       	std	Y+37, r31	; 0x25
    764a:	ec a3       	std	Y+36, r30	; 0x24
    764c:	4a e0       	ldi	r20, 0x0A	; 10
    764e:	50 e0       	ldi	r21, 0x00	; 0
    7650:	be 01       	movw	r22, r28
    7652:	6c 5d       	subi	r22, 0xDC	; 220
    7654:	7f 4f       	sbci	r23, 0xFF	; 255
    7656:	8c a1       	ldd	r24, Y+36	; 0x24
    7658:	9d a1       	ldd	r25, Y+37	; 0x25
    765a:	0e 94 6b 47 	call	0x8ed6	; 0x8ed6 <strtol>
    765e:	7f 83       	std	Y+7, r23	; 0x07
    7660:	6e 83       	std	Y+6, r22	; 0x06
    7662:	2e 85       	ldd	r18, Y+14	; 0x0e
    7664:	3f 85       	ldd	r19, Y+15	; 0x0f
    7666:	21 50       	subi	r18, 0x01	; 1
    7668:	31 09       	sbc	r19, r1
    766a:	3f 87       	std	Y+15, r19	; 0x0f
    766c:	2e 87       	std	Y+14, r18	; 0x0e
    766e:	88 89       	ldd	r24, Y+16	; 0x10
    7670:	99 89       	ldd	r25, Y+17	; 0x11
    7672:	ac 01       	movw	r20, r24
    7674:	42 5b       	subi	r20, 0xB2	; 178
    7676:	57 40       	sbci	r21, 0x07	; 7
    7678:	45 34       	cpi	r20, 0x45	; 69
    767a:	51 05       	cpc	r21, r1
    767c:	38 f0       	brcs	.+14     	; 0x768c <setdate_r+0x156>
    767e:	ed b7       	in	r30, 0x3d	; 61
    7680:	fe b7       	in	r31, 0x3e	; 62
    7682:	95 83       	std	Z+5, r25	; 0x05
    7684:	84 83       	std	Z+4, r24	; 0x04
    7686:	89 e1       	ldi	r24, 0x19	; 25
    7688:	97 e0       	ldi	r25, 0x07	; 7
    768a:	34 c0       	rjmp	.+104    	; 0x76f4 <setdate_r+0x1be>
    768c:	8c 56       	subi	r24, 0x6C	; 108
    768e:	97 40       	sbci	r25, 0x07	; 7
    7690:	99 8b       	std	Y+17, r25	; 0x11
    7692:	88 8b       	std	Y+16, r24	; 0x10
    7694:	2c 30       	cpi	r18, 0x0C	; 12
    7696:	31 05       	cpc	r19, r1
    7698:	38 f0       	brcs	.+14     	; 0x76a8 <setdate_r+0x172>
    769a:	ed b7       	in	r30, 0x3d	; 61
    769c:	fe b7       	in	r31, 0x3e	; 62
    769e:	95 83       	std	Z+5, r25	; 0x05
    76a0:	84 83       	std	Z+4, r24	; 0x04
    76a2:	88 e0       	ldi	r24, 0x08	; 8
    76a4:	97 e0       	ldi	r25, 0x07	; 7
    76a6:	26 c0       	rjmp	.+76     	; 0x76f4 <setdate_r+0x1be>
    76a8:	8c 85       	ldd	r24, Y+12	; 0x0c
    76aa:	9d 85       	ldd	r25, Y+13	; 0x0d
    76ac:	9c 01       	movw	r18, r24
    76ae:	21 50       	subi	r18, 0x01	; 1
    76b0:	31 09       	sbc	r19, r1
    76b2:	2f 31       	cpi	r18, 0x1F	; 31
    76b4:	31 05       	cpc	r19, r1
    76b6:	38 f0       	brcs	.+14     	; 0x76c6 <setdate_r+0x190>
    76b8:	ed b7       	in	r30, 0x3d	; 61
    76ba:	fe b7       	in	r31, 0x3e	; 62
    76bc:	95 83       	std	Z+5, r25	; 0x05
    76be:	84 83       	std	Z+4, r24	; 0x04
    76c0:	87 ef       	ldi	r24, 0xF7	; 247
    76c2:	96 e0       	ldi	r25, 0x06	; 6
    76c4:	17 c0       	rjmp	.+46     	; 0x76f4 <setdate_r+0x1be>
    76c6:	8a 85       	ldd	r24, Y+10	; 0x0a
    76c8:	9b 85       	ldd	r25, Y+11	; 0x0b
    76ca:	88 31       	cpi	r24, 0x18	; 24
    76cc:	91 05       	cpc	r25, r1
    76ce:	38 f0       	brcs	.+14     	; 0x76de <setdate_r+0x1a8>
    76d0:	ed b7       	in	r30, 0x3d	; 61
    76d2:	fe b7       	in	r31, 0x3e	; 62
    76d4:	95 83       	std	Z+5, r25	; 0x05
    76d6:	84 83       	std	Z+4, r24	; 0x04
    76d8:	85 ee       	ldi	r24, 0xE5	; 229
    76da:	96 e0       	ldi	r25, 0x06	; 6
    76dc:	0b c0       	rjmp	.+22     	; 0x76f4 <setdate_r+0x1be>
    76de:	88 85       	ldd	r24, Y+8	; 0x08
    76e0:	99 85       	ldd	r25, Y+9	; 0x09
    76e2:	8c 33       	cpi	r24, 0x3C	; 60
    76e4:	91 05       	cpc	r25, r1
    76e6:	68 f0       	brcs	.+26     	; 0x7702 <setdate_r+0x1cc>
    76e8:	ed b7       	in	r30, 0x3d	; 61
    76ea:	fe b7       	in	r31, 0x3e	; 62
    76ec:	95 83       	std	Z+5, r25	; 0x05
    76ee:	84 83       	std	Z+4, r24	; 0x04
    76f0:	84 ed       	ldi	r24, 0xD4	; 212
    76f2:	96 e0       	ldi	r25, 0x06	; 6
    76f4:	a0 e0       	ldi	r26, 0x00	; 0
    76f6:	81 83       	std	Z+1, r24	; 0x01
    76f8:	92 83       	std	Z+2, r25	; 0x02
    76fa:	a3 83       	std	Z+3, r26	; 0x03
    76fc:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    7700:	25 c0       	rjmp	.+74     	; 0x774c <setdate_r+0x216>
    7702:	ce 01       	movw	r24, r28
    7704:	06 96       	adiw	r24, 0x06	; 6
    7706:	13 df       	rcall	.-474    	; 0x752e <timegm>
    7708:	6b 01       	movw	r12, r22
    770a:	7c 01       	movw	r14, r24
    770c:	6c 8f       	std	Y+28, r22	; 0x1c
    770e:	7d 8f       	std	Y+29, r23	; 0x1d
    7710:	8e 8f       	std	Y+30, r24	; 0x1e
    7712:	9f 8f       	std	Y+31, r25	; 0x1f
    7714:	18 a2       	std	Y+32, r1	; 0x20
    7716:	19 a2       	std	Y+33, r1	; 0x21
    7718:	1a a2       	std	Y+34, r1	; 0x22
    771a:	1b a2       	std	Y+35, r1	; 0x23
    771c:	be 01       	movw	r22, r28
    771e:	64 5e       	subi	r22, 0xE4	; 228
    7720:	7f 4f       	sbci	r23, 0xFF	; 255
    7722:	80 e0       	ldi	r24, 0x00	; 0
    7724:	90 e0       	ldi	r25, 0x00	; 0
    7726:	03 db       	rcall	.-2554   	; 0x6d2e <clock_settime>
    7728:	b7 01       	movw	r22, r14
    772a:	a6 01       	movw	r20, r12
    772c:	81 e0       	ldi	r24, 0x01	; 1
    772e:	90 e0       	ldi	r25, 0x00	; 0
    7730:	0e 94 17 31 	call	0x622e	; 0x622e <rtc_init>
    7734:	81 11       	cpse	r24, r1
    7736:	0d c0       	rjmp	.+26     	; 0x7752 <setdate_r+0x21c>
    7738:	8d eb       	ldi	r24, 0xBD	; 189
    773a:	96 e0       	ldi	r25, 0x06	; 6
    773c:	a0 e0       	ldi	r26, 0x00	; 0
    773e:	ed b7       	in	r30, 0x3d	; 61
    7740:	fe b7       	in	r31, 0x3e	; 62
    7742:	81 83       	std	Z+1, r24	; 0x01
    7744:	92 83       	std	Z+2, r25	; 0x02
    7746:	a3 83       	std	Z+3, r26	; 0x03
    7748:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    774c:	8f ef       	ldi	r24, 0xFF	; 255
    774e:	9f ef       	ldi	r25, 0xFF	; 255
    7750:	02 c0       	rjmp	.+4      	; 0x7756 <setdate_r+0x220>
    7752:	80 e0       	ldi	r24, 0x00	; 0
    7754:	90 e0       	ldi	r25, 0x00	; 0
    7756:	a5 96       	adiw	r28, 0x25	; 37
    7758:	0f b6       	in	r0, 0x3f	; 63
    775a:	f8 94       	cli
    775c:	de bf       	out	0x3e, r29	; 62
    775e:	0f be       	out	0x3f, r0	; 63
    7760:	cd bf       	out	0x3d, r28	; 61
    7762:	df 91       	pop	r29
    7764:	cf 91       	pop	r28
    7766:	ff 90       	pop	r15
    7768:	ef 90       	pop	r14
    776a:	df 90       	pop	r13
    776c:	cf 90       	pop	r12
    776e:	08 95       	ret

00007770 <setdate>:
    7770:	ab e2       	ldi	r26, 0x2B	; 43
    7772:	b0 e0       	ldi	r27, 0x00	; 0
    7774:	ee eb       	ldi	r30, 0xBE	; 190
    7776:	fb e3       	ldi	r31, 0x3B	; 59
    7778:	0c 94 0f e7 	jmp	0x1ce1e	; 0x1ce1e <__prologue_saves__+0x20>
    777c:	8b e2       	ldi	r24, 0x2B	; 43
    777e:	97 e0       	ldi	r25, 0x07	; 7
    7780:	a0 e0       	ldi	r26, 0x00	; 0
    7782:	ed b7       	in	r30, 0x3d	; 61
    7784:	fe b7       	in	r31, 0x3e	; 62
    7786:	81 83       	std	Z+1, r24	; 0x01
    7788:	92 83       	std	Z+2, r25	; 0x02
    778a:	a3 83       	std	Z+3, r26	; 0x03
    778c:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    7790:	40 91 c7 1c 	lds	r20, 0x1CC7	; 0x801cc7 <__iob>
    7794:	50 91 c8 1c 	lds	r21, 0x1CC8	; 0x801cc8 <__iob+0x1>
    7798:	66 e2       	ldi	r22, 0x26	; 38
    779a:	70 e0       	ldi	r23, 0x00	; 0
    779c:	ce 01       	movw	r24, r28
    779e:	04 96       	adiw	r24, 0x04	; 4
    77a0:	0e 94 8a 76 	call	0xed14	; 0xed14 <fgets>
    77a4:	ce 01       	movw	r24, r28
    77a6:	04 96       	adiw	r24, 0x04	; 4
    77a8:	c6 de       	rcall	.-628    	; 0x7536 <setdate_r>
    77aa:	ab 96       	adiw	r28, 0x2b	; 43
    77ac:	e2 e0       	ldi	r30, 0x02	; 2
    77ae:	0c 94 2b e7 	jmp	0x1ce56	; 0x1ce56 <__epilogue_restores__+0x20>

000077b2 <find_dst>:
    77b2:	a8 e2       	ldi	r26, 0x28	; 40
    77b4:	b0 e0       	ldi	r27, 0x00	; 0
    77b6:	ef ed       	ldi	r30, 0xDF	; 223
    77b8:	fb e3       	ldi	r31, 0x3B	; 59
    77ba:	0c 94 ff e6 	jmp	0x1cdfe	; 0x1cdfe <__prologue_saves__>
    77be:	3c 01       	movw	r6, r24
    77c0:	1a 01       	movw	r2, r20
    77c2:	2b 01       	movw	r4, r22
    77c4:	49 01       	movw	r8, r18
    77c6:	1c a3       	std	Y+36, r17	; 0x24
    77c8:	0b a3       	std	Y+35, r16	; 0x23
    77ca:	de a2       	std	Y+38, r13	; 0x26
    77cc:	cd a2       	std	Y+37, r12	; 0x25
    77ce:	b8 a6       	std	Y+40, r11	; 0x28
    77d0:	af a2       	std	Y+39, r10	; 0x27
    77d2:	be 01       	movw	r22, r28
    77d4:	61 5e       	subi	r22, 0xE1	; 225
    77d6:	7f 4f       	sbci	r23, 0xFF	; 255
    77d8:	ce 01       	movw	r24, r28
    77da:	47 96       	adiw	r24, 0x17	; 23
    77dc:	15 dc       	rcall	.-2006   	; 0x7008 <gettimeofday>
    77de:	af 8d       	ldd	r26, Y+31	; 0x1f
    77e0:	b8 a1       	ldd	r27, Y+32	; 0x20
    77e2:	2c e3       	ldi	r18, 0x3C	; 60
    77e4:	30 e0       	ldi	r19, 0x00	; 0
    77e6:	0e 94 d9 e6 	call	0x1cdb2	; 0x1cdb2 <__usmulhisi3>
    77ea:	5b 01       	movw	r10, r22
    77ec:	6c 01       	movw	r12, r24
    77ee:	61 14       	cp	r6, r1
    77f0:	71 04       	cpc	r7, r1
    77f2:	31 f0       	breq	.+12     	; 0x7800 <find_dst+0x4e>
    77f4:	20 e1       	ldi	r18, 0x10	; 16
    77f6:	a2 1a       	sub	r10, r18
    77f8:	2e e0       	ldi	r18, 0x0E	; 14
    77fa:	b2 0a       	sbc	r11, r18
    77fc:	c1 08       	sbc	r12, r1
    77fe:	d1 08       	sbc	r13, r1
    7800:	81 14       	cp	r8, r1
    7802:	91 04       	cpc	r9, r1
    7804:	39 f0       	breq	.+14     	; 0x7814 <find_dst+0x62>
    7806:	4c e6       	ldi	r20, 0x6C	; 108
    7808:	84 1a       	sub	r8, r20
    780a:	47 e0       	ldi	r20, 0x07	; 7
    780c:	94 0a       	sbc	r9, r20
    780e:	9c 86       	std	Y+12, r9	; 0x0c
    7810:	8b 86       	std	Y+11, r8	; 0x0b
    7812:	11 c0       	rjmp	.+34     	; 0x7836 <find_dst+0x84>
    7814:	21 14       	cp	r2, r1
    7816:	31 04       	cpc	r3, r1
    7818:	41 04       	cpc	r4, r1
    781a:	51 04       	cpc	r5, r1
    781c:	21 f4       	brne	.+8      	; 0x7826 <find_dst+0x74>
    781e:	2f 88       	ldd	r2, Y+23	; 0x17
    7820:	38 8c       	ldd	r3, Y+24	; 0x18
    7822:	49 8c       	ldd	r4, Y+25	; 0x19
    7824:	5a 8c       	ldd	r5, Y+26	; 0x1a
    7826:	8e 01       	movw	r16, r28
    7828:	0f 5f       	subi	r16, 0xFF	; 255
    782a:	1f 4f       	sbci	r17, 0xFF	; 255
    782c:	a6 01       	movw	r20, r12
    782e:	95 01       	movw	r18, r10
    7830:	c2 01       	movw	r24, r4
    7832:	b1 01       	movw	r22, r2
    7834:	ca da       	rcall	.-2668   	; 0x6dca <time_to_tm>
    7836:	8b a1       	ldd	r24, Y+35	; 0x23
    7838:	9c a1       	ldd	r25, Y+36	; 0x24
    783a:	01 97       	sbiw	r24, 0x01	; 1
    783c:	9a 87       	std	Y+10, r25	; 0x0a
    783e:	89 87       	std	Y+9, r24	; 0x09
    7840:	81 e0       	ldi	r24, 0x01	; 1
    7842:	90 e0       	ldi	r25, 0x00	; 0
    7844:	98 87       	std	Y+8, r25	; 0x08
    7846:	8f 83       	std	Y+7, r24	; 0x07
    7848:	8f a1       	ldd	r24, Y+39	; 0x27
    784a:	98 a5       	ldd	r25, Y+40	; 0x28
    784c:	9e 83       	std	Y+6, r25	; 0x06
    784e:	8d 83       	std	Y+5, r24	; 0x05
    7850:	1c 82       	std	Y+4, r1	; 0x04
    7852:	1b 82       	std	Y+3, r1	; 0x03
    7854:	1a 82       	std	Y+2, r1	; 0x02
    7856:	19 82       	std	Y+1, r1	; 0x01
    7858:	ce 01       	movw	r24, r28
    785a:	01 96       	adiw	r24, 0x01	; 1
    785c:	68 de       	rcall	.-816    	; 0x752e <timegm>
    785e:	45 01       	movw	r8, r10
    7860:	56 01       	movw	r10, r12
    7862:	86 0e       	add	r8, r22
    7864:	97 1e       	adc	r9, r23
    7866:	a8 1e       	adc	r10, r24
    7868:	b9 1e       	adc	r11, r25
    786a:	8e 01       	movw	r16, r28
    786c:	0f 5f       	subi	r16, 0xFF	; 255
    786e:	1f 4f       	sbci	r17, 0xFF	; 255
    7870:	20 e0       	ldi	r18, 0x00	; 0
    7872:	30 e0       	ldi	r19, 0x00	; 0
    7874:	a9 01       	movw	r20, r18
    7876:	c5 01       	movw	r24, r10
    7878:	b4 01       	movw	r22, r8
    787a:	a7 da       	rcall	.-2738   	; 0x6dca <time_to_tm>
    787c:	2d 85       	ldd	r18, Y+13	; 0x0d
    787e:	3e 85       	ldd	r19, Y+14	; 0x0e
    7880:	e7 e0       	ldi	r30, 0x07	; 7
    7882:	f0 e0       	ldi	r31, 0x00	; 0
    7884:	c9 01       	movw	r24, r18
    7886:	bf 01       	movw	r22, r30
    7888:	0e 94 7f e6 	call	0x1ccfe	; 0x1ccfe <__divmodhi4>
    788c:	4d a1       	ldd	r20, Y+37	; 0x25
    788e:	5e a1       	ldd	r21, Y+38	; 0x26
    7890:	48 17       	cp	r20, r24
    7892:	59 07       	cpc	r21, r25
    7894:	21 f4       	brne	.+8      	; 0x789e <find_dst+0xec>
    7896:	51 e0       	ldi	r21, 0x01	; 1
    7898:	e5 1a       	sub	r14, r21
    789a:	f1 08       	sbc	r15, r1
    789c:	51 f0       	breq	.+20     	; 0x78b2 <find_dst+0x100>
    789e:	80 e8       	ldi	r24, 0x80	; 128
    78a0:	88 0e       	add	r8, r24
    78a2:	81 e5       	ldi	r24, 0x51	; 81
    78a4:	98 1e       	adc	r9, r24
    78a6:	81 e0       	ldi	r24, 0x01	; 1
    78a8:	a8 1e       	adc	r10, r24
    78aa:	b1 1c       	adc	r11, r1
    78ac:	2f 5f       	subi	r18, 0xFF	; 255
    78ae:	3f 4f       	sbci	r19, 0xFF	; 255
    78b0:	e9 cf       	rjmp	.-46     	; 0x7884 <find_dst+0xd2>
    78b2:	c5 01       	movw	r24, r10
    78b4:	b4 01       	movw	r22, r8
    78b6:	a8 96       	adiw	r28, 0x28	; 40
    78b8:	e2 e1       	ldi	r30, 0x12	; 18
    78ba:	0c 94 1b e7 	jmp	0x1ce36	; 0x1ce36 <__epilogue_restores__>

000078be <set_dst>:
    78be:	4f 92       	push	r4
    78c0:	5f 92       	push	r5
    78c2:	6f 92       	push	r6
    78c4:	7f 92       	push	r7
    78c6:	af 92       	push	r10
    78c8:	bf 92       	push	r11
    78ca:	cf 92       	push	r12
    78cc:	df 92       	push	r13
    78ce:	ef 92       	push	r14
    78d0:	ff 92       	push	r15
    78d2:	0f 93       	push	r16
    78d4:	1f 93       	push	r17
    78d6:	cf 93       	push	r28
    78d8:	df 93       	push	r29
    78da:	cd b7       	in	r28, 0x3d	; 61
    78dc:	de b7       	in	r29, 0x3e	; 62
    78de:	2c 97       	sbiw	r28, 0x0c	; 12
    78e0:	0f b6       	in	r0, 0x3f	; 63
    78e2:	f8 94       	cli
    78e4:	de bf       	out	0x3e, r29	; 62
    78e6:	0f be       	out	0x3f, r0	; 63
    78e8:	cd bf       	out	0x3d, r28	; 61
    78ea:	2b 01       	movw	r4, r22
    78ec:	3c 01       	movw	r6, r24
    78ee:	67 2b       	or	r22, r23
    78f0:	68 2b       	or	r22, r24
    78f2:	69 2b       	or	r22, r25
    78f4:	51 f4       	brne	.+20     	; 0x790a <set_dst+0x4c>
    78f6:	be 01       	movw	r22, r28
    78f8:	67 5f       	subi	r22, 0xF7	; 247
    78fa:	7f 4f       	sbci	r23, 0xFF	; 255
    78fc:	ce 01       	movw	r24, r28
    78fe:	01 96       	adiw	r24, 0x01	; 1
    7900:	83 db       	rcall	.-2298   	; 0x7008 <gettimeofday>
    7902:	49 80       	ldd	r4, Y+1	; 0x01
    7904:	5a 80       	ldd	r5, Y+2	; 0x02
    7906:	6b 80       	ldd	r6, Y+3	; 0x03
    7908:	7c 80       	ldd	r7, Y+4	; 0x04
    790a:	80 91 84 1a 	lds	r24, 0x1A84	; 0x801a84 <dst+0x8>
    790e:	90 91 85 1a 	lds	r25, 0x1A85	; 0x801a85 <dst+0x9>
    7912:	a0 91 86 1a 	lds	r26, 0x1A86	; 0x801a86 <dst+0xa>
    7916:	b0 91 87 1a 	lds	r27, 0x1A87	; 0x801a87 <dst+0xb>
    791a:	84 15       	cp	r24, r4
    791c:	95 05       	cpc	r25, r5
    791e:	a6 05       	cpc	r26, r6
    7920:	b7 05       	cpc	r27, r7
    7922:	50 f0       	brcs	.+20     	; 0x7938 <set_dst+0x7a>
    7924:	84 19       	sub	r24, r4
    7926:	95 09       	sbc	r25, r5
    7928:	a6 09       	sbc	r26, r6
    792a:	b7 09       	sbc	r27, r7
    792c:	80 38       	cpi	r24, 0x80	; 128
    792e:	91 45       	sbci	r25, 0x51	; 81
    7930:	a1 40       	sbci	r26, 0x01	; 1
    7932:	b1 05       	cpc	r27, r1
    7934:	70 f4       	brcc	.+28     	; 0x7952 <set_dst+0x94>
    7936:	42 c0       	rjmp	.+132    	; 0x79bc <set_dst+0xfe>
    7938:	a3 01       	movw	r20, r6
    793a:	92 01       	movw	r18, r4
    793c:	28 1b       	sub	r18, r24
    793e:	39 0b       	sbc	r19, r25
    7940:	4a 0b       	sbc	r20, r26
    7942:	5b 0b       	sbc	r21, r27
    7944:	da 01       	movw	r26, r20
    7946:	c9 01       	movw	r24, r18
    7948:	80 38       	cpi	r24, 0x80	; 128
    794a:	91 45       	sbci	r25, 0x51	; 81
    794c:	a1 40       	sbci	r26, 0x01	; 1
    794e:	b1 05       	cpc	r27, r1
    7950:	a8 f1       	brcs	.+106    	; 0x79bc <set_dst+0xfe>
    7952:	40 92 84 1a 	sts	0x1A84, r4	; 0x801a84 <dst+0x8>
    7956:	50 92 85 1a 	sts	0x1A85, r5	; 0x801a85 <dst+0x9>
    795a:	60 92 86 1a 	sts	0x1A86, r6	; 0x801a86 <dst+0xa>
    795e:	70 92 87 1a 	sts	0x1A87, r7	; 0x801a87 <dst+0xb>
    7962:	82 e0       	ldi	r24, 0x02	; 2
    7964:	a8 2e       	mov	r10, r24
    7966:	b1 2c       	mov	r11, r1
    7968:	c1 2c       	mov	r12, r1
    796a:	d1 2c       	mov	r13, r1
    796c:	92 e0       	ldi	r25, 0x02	; 2
    796e:	e9 2e       	mov	r14, r25
    7970:	f1 2c       	mov	r15, r1
    7972:	03 e0       	ldi	r16, 0x03	; 3
    7974:	10 e0       	ldi	r17, 0x00	; 0
    7976:	20 e0       	ldi	r18, 0x00	; 0
    7978:	30 e0       	ldi	r19, 0x00	; 0
    797a:	b3 01       	movw	r22, r6
    797c:	a2 01       	movw	r20, r4
    797e:	80 e0       	ldi	r24, 0x00	; 0
    7980:	90 e0       	ldi	r25, 0x00	; 0
    7982:	17 df       	rcall	.-466    	; 0x77b2 <find_dst>
    7984:	60 93 7c 1a 	sts	0x1A7C, r22	; 0x801a7c <dst>
    7988:	70 93 7d 1a 	sts	0x1A7D, r23	; 0x801a7d <dst+0x1>
    798c:	80 93 7e 1a 	sts	0x1A7E, r24	; 0x801a7e <dst+0x2>
    7990:	90 93 7f 1a 	sts	0x1A7F, r25	; 0x801a7f <dst+0x3>
    7994:	ee 24       	eor	r14, r14
    7996:	e3 94       	inc	r14
    7998:	f1 2c       	mov	r15, r1
    799a:	0b e0       	ldi	r16, 0x0B	; 11
    799c:	10 e0       	ldi	r17, 0x00	; 0
    799e:	20 e0       	ldi	r18, 0x00	; 0
    79a0:	30 e0       	ldi	r19, 0x00	; 0
    79a2:	b3 01       	movw	r22, r6
    79a4:	a2 01       	movw	r20, r4
    79a6:	81 e0       	ldi	r24, 0x01	; 1
    79a8:	90 e0       	ldi	r25, 0x00	; 0
    79aa:	03 df       	rcall	.-506    	; 0x77b2 <find_dst>
    79ac:	60 93 80 1a 	sts	0x1A80, r22	; 0x801a80 <dst+0x4>
    79b0:	70 93 81 1a 	sts	0x1A81, r23	; 0x801a81 <dst+0x5>
    79b4:	80 93 82 1a 	sts	0x1A82, r24	; 0x801a82 <dst+0x6>
    79b8:	90 93 83 1a 	sts	0x1A83, r25	; 0x801a83 <dst+0x7>
    79bc:	2c 96       	adiw	r28, 0x0c	; 12
    79be:	0f b6       	in	r0, 0x3f	; 63
    79c0:	f8 94       	cli
    79c2:	de bf       	out	0x3e, r29	; 62
    79c4:	0f be       	out	0x3f, r0	; 63
    79c6:	cd bf       	out	0x3d, r28	; 61
    79c8:	df 91       	pop	r29
    79ca:	cf 91       	pop	r28
    79cc:	1f 91       	pop	r17
    79ce:	0f 91       	pop	r16
    79d0:	ff 90       	pop	r15
    79d2:	ef 90       	pop	r14
    79d4:	df 90       	pop	r13
    79d6:	cf 90       	pop	r12
    79d8:	bf 90       	pop	r11
    79da:	af 90       	pop	r10
    79dc:	7f 90       	pop	r7
    79de:	6f 90       	pop	r6
    79e0:	5f 90       	pop	r5
    79e2:	4f 90       	pop	r4
    79e4:	08 95       	ret

000079e6 <asctime_r>:
    79e6:	a5 e1       	ldi	r26, 0x15	; 21
    79e8:	b0 e0       	ldi	r27, 0x00	; 0
    79ea:	e9 ef       	ldi	r30, 0xF9	; 249
    79ec:	fc e3       	ldi	r31, 0x3C	; 60
    79ee:	0c 94 0d e7 	jmp	0x1ce1a	; 0x1ce1a <__prologue_saves__+0x1c>
    79f2:	ec 01       	movw	r28, r24
    79f4:	8b 01       	movw	r16, r22
    79f6:	60 e0       	ldi	r22, 0x00	; 0
    79f8:	70 e0       	ldi	r23, 0x00	; 0
    79fa:	d1 db       	rcall	.-2142   	; 0x719e <normalize>
    79fc:	80 e2       	ldi	r24, 0x20	; 32
    79fe:	f8 01       	movw	r30, r16
    7a00:	11 92       	st	Z+, r1
    7a02:	8a 95       	dec	r24
    7a04:	e9 f7       	brne	.-6      	; 0x7a00 <asctime_r+0x1a>
    7a06:	8a 85       	ldd	r24, Y+10	; 0x0a
    7a08:	9b 85       	ldd	r25, Y+11	; 0x0b
    7a0a:	84 59       	subi	r24, 0x94	; 148
    7a0c:	98 4f       	sbci	r25, 0xF8	; 248
    7a0e:	ed b7       	in	r30, 0x3d	; 61
    7a10:	fe b7       	in	r31, 0x3e	; 62
    7a12:	95 8b       	std	Z+21, r25	; 0x15
    7a14:	84 8b       	std	Z+20, r24	; 0x14
    7a16:	88 81       	ld	r24, Y
    7a18:	99 81       	ldd	r25, Y+1	; 0x01
    7a1a:	93 8b       	std	Z+19, r25	; 0x13
    7a1c:	82 8b       	std	Z+18, r24	; 0x12
    7a1e:	8a 81       	ldd	r24, Y+2	; 0x02
    7a20:	9b 81       	ldd	r25, Y+3	; 0x03
    7a22:	91 8b       	std	Z+17, r25	; 0x11
    7a24:	80 8b       	std	Z+16, r24	; 0x10
    7a26:	8c 81       	ldd	r24, Y+4	; 0x04
    7a28:	9d 81       	ldd	r25, Y+5	; 0x05
    7a2a:	97 87       	std	Z+15, r25	; 0x0f
    7a2c:	86 87       	std	Z+14, r24	; 0x0e
    7a2e:	8e 81       	ldd	r24, Y+6	; 0x06
    7a30:	9f 81       	ldd	r25, Y+7	; 0x07
    7a32:	95 87       	std	Z+13, r25	; 0x0d
    7a34:	84 87       	std	Z+12, r24	; 0x0c
    7a36:	e8 85       	ldd	r30, Y+8	; 0x08
    7a38:	f9 85       	ldd	r31, Y+9	; 0x09
    7a3a:	ee 0f       	add	r30, r30
    7a3c:	ff 1f       	adc	r31, r31
    7a3e:	e5 5f       	subi	r30, 0xF5	; 245
    7a40:	fe 4f       	sbci	r31, 0xFE	; 254
    7a42:	80 81       	ld	r24, Z
    7a44:	91 81       	ldd	r25, Z+1	; 0x01
    7a46:	ed b7       	in	r30, 0x3d	; 61
    7a48:	fe b7       	in	r31, 0x3e	; 62
    7a4a:	93 87       	std	Z+11, r25	; 0x0b
    7a4c:	82 87       	std	Z+10, r24	; 0x0a
    7a4e:	ec 85       	ldd	r30, Y+12	; 0x0c
    7a50:	fd 85       	ldd	r31, Y+13	; 0x0d
    7a52:	ee 0f       	add	r30, r30
    7a54:	ff 1f       	adc	r31, r31
    7a56:	eb 5d       	subi	r30, 0xDB	; 219
    7a58:	fe 4f       	sbci	r31, 0xFE	; 254
    7a5a:	80 81       	ld	r24, Z
    7a5c:	91 81       	ldd	r25, Z+1	; 0x01
    7a5e:	ed b7       	in	r30, 0x3d	; 61
    7a60:	fe b7       	in	r31, 0x3e	; 62
    7a62:	91 87       	std	Z+9, r25	; 0x09
    7a64:	80 87       	std	Z+8, r24	; 0x08
    7a66:	8c e4       	ldi	r24, 0x4C	; 76
    7a68:	97 e0       	ldi	r25, 0x07	; 7
    7a6a:	a0 e0       	ldi	r26, 0x00	; 0
    7a6c:	85 83       	std	Z+5, r24	; 0x05
    7a6e:	96 83       	std	Z+6, r25	; 0x06
    7a70:	a7 83       	std	Z+7, r26	; 0x07
    7a72:	80 e2       	ldi	r24, 0x20	; 32
    7a74:	90 e0       	ldi	r25, 0x00	; 0
    7a76:	94 83       	std	Z+4, r25	; 0x04
    7a78:	83 83       	std	Z+3, r24	; 0x03
    7a7a:	12 83       	std	Z+2, r17	; 0x02
    7a7c:	01 83       	std	Z+1, r16	; 0x01
    7a7e:	0e 94 08 47 	call	0x8e10	; 0x8e10 <snprintf_P>
    7a82:	c8 01       	movw	r24, r16
    7a84:	cd b7       	in	r28, 0x3d	; 61
    7a86:	de b7       	in	r29, 0x3e	; 62
    7a88:	65 96       	adiw	r28, 0x15	; 21
    7a8a:	e4 e0       	ldi	r30, 0x04	; 4
    7a8c:	0c 94 29 e7 	jmp	0x1ce52	; 0x1ce52 <__epilogue_restores__+0x1c>

00007a90 <asctime>:
    7a90:	66 e0       	ldi	r22, 0x06	; 6
    7a92:	78 e1       	ldi	r23, 0x18	; 24
    7a94:	a8 cf       	rjmp	.-176    	; 0x79e6 <asctime_r>
    7a96:	08 95       	ret

00007a98 <ctime_gm>:
    7a98:	a6 e1       	ldi	r26, 0x16	; 22
    7a9a:	b0 e0       	ldi	r27, 0x00	; 0
    7a9c:	e2 e5       	ldi	r30, 0x52	; 82
    7a9e:	fd e3       	ldi	r31, 0x3D	; 61
    7aa0:	0c 94 0f e7 	jmp	0x1ce1e	; 0x1ce1e <__prologue_saves__+0x20>
    7aa4:	be 01       	movw	r22, r28
    7aa6:	6f 5f       	subi	r22, 0xFF	; 255
    7aa8:	7f 4f       	sbci	r23, 0xFF	; 255
    7aaa:	6d da       	rcall	.-2854   	; 0x6f86 <gmtime_r>
    7aac:	66 ee       	ldi	r22, 0xE6	; 230
    7aae:	77 e1       	ldi	r23, 0x17	; 23
    7ab0:	9a df       	rcall	.-204    	; 0x79e6 <asctime_r>
    7ab2:	66 96       	adiw	r28, 0x16	; 22
    7ab4:	e2 e0       	ldi	r30, 0x02	; 2
    7ab6:	0c 94 2b e7 	jmp	0x1ce56	; 0x1ce56 <__epilogue_restores__+0x20>

00007aba <initialize_clock>:
/// @param[in] minwest: your time zone as minute west
///@return  void
///@see: clock_settime()
MEMSPACE
void initialize_clock(int minwest)
{
    7aba:	a5 e2       	ldi	r26, 0x25	; 37
    7abc:	b0 e0       	ldi	r27, 0x00	; 0
    7abe:	e3 e6       	ldi	r30, 0x63	; 99
    7ac0:	fd e3       	ldi	r31, 0x3D	; 61
    7ac2:	0c 94 09 e7 	jmp	0x1ce12	; 0x1ce12 <__prologue_saves__+0x14>
    7ac6:	8c 01       	movw	r16, r24
    tm_t tc;
    ts_t ts;
    tz_t tz;

#ifdef RTC_SUPPORT
    if(!rtc_init(0,0L))
    7ac8:	40 e0       	ldi	r20, 0x00	; 0
    7aca:	50 e0       	ldi	r21, 0x00	; 0
    7acc:	ba 01       	movw	r22, r20
    7ace:	80 e0       	ldi	r24, 0x00	; 0
    7ad0:	90 e0       	ldi	r25, 0x00	; 0
    7ad2:	0e 94 17 31 	call	0x622e	; 0x622e <rtc_init>
    7ad6:	81 11       	cpse	r24, r1
    7ad8:	27 c0       	rjmp	.+78     	; 0x7b28 <initialize_clock+0x6e>
    {
        printf("rtc uninitilized\n");
    7ada:	8b ea       	ldi	r24, 0xAB	; 171
    7adc:	96 e0       	ldi	r25, 0x06	; 6
    7ade:	a0 e0       	ldi	r26, 0x00	; 0
    7ae0:	ed b7       	in	r30, 0x3d	; 61
    7ae2:	fe b7       	in	r31, 0x3e	; 62
    7ae4:	81 83       	std	Z+1, r24	; 0x01
    7ae6:	92 83       	std	Z+2, r25	; 0x02
    7ae8:	a3 83       	std	Z+3, r26	; 0x03
    7aea:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
        printf("attempting rtc init\n");
    7aee:	86 e9       	ldi	r24, 0x96	; 150
    7af0:	96 e0       	ldi	r25, 0x06	; 6
    7af2:	a0 e0       	ldi	r26, 0x00	; 0
    7af4:	ed b7       	in	r30, 0x3d	; 61
    7af6:	fe b7       	in	r31, 0x3e	; 62
    7af8:	81 83       	std	Z+1, r24	; 0x01
    7afa:	92 83       	std	Z+2, r25	; 0x02
    7afc:	a3 83       	std	Z+3, r26	; 0x03
    7afe:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
        if( !rtc_init(1, (time_t) 0) )
    7b02:	40 e0       	ldi	r20, 0x00	; 0
    7b04:	50 e0       	ldi	r21, 0x00	; 0
    7b06:	ba 01       	movw	r22, r20
    7b08:	81 e0       	ldi	r24, 0x01	; 1
    7b0a:	90 e0       	ldi	r25, 0x00	; 0
    7b0c:	0e 94 17 31 	call	0x622e	; 0x622e <rtc_init>
    7b10:	81 11       	cpse	r24, r1
    7b12:	0a c0       	rjmp	.+20     	; 0x7b28 <initialize_clock+0x6e>
        {
            printf("rtc force init failed\n");
    7b14:	8f e7       	ldi	r24, 0x7F	; 127
    7b16:	96 e0       	ldi	r25, 0x06	; 6
    7b18:	a0 e0       	ldi	r26, 0x00	; 0
    7b1a:	ed b7       	in	r30, 0x3d	; 61
    7b1c:	fe b7       	in	r31, 0x3e	; 62
    7b1e:	81 83       	std	Z+1, r24	; 0x01
    7b20:	92 83       	std	Z+2, r25	; 0x02
    7b22:	a3 83       	std	Z+3, r26	; 0x03
    7b24:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
        }
    }

    if(rtc_read(&tc))
    7b28:	ce 01       	movw	r24, r28
    7b2a:	04 96       	adiw	r24, 0x04	; 4
    7b2c:	0e 94 7d 30 	call	0x60fa	; 0x60fa <rtc_read>
    7b30:	88 23       	and	r24, r24
    7b32:	51 f0       	breq	.+20     	; 0x7b48 <initialize_clock+0x8e>
    {
        seconds = timegm(&tc);
    7b34:	ce 01       	movw	r24, r28
    7b36:	04 96       	adiw	r24, 0x04	; 4
    7b38:	fa dc       	rcall	.-1548   	; 0x752e <timegm>
    7b3a:	6b 01       	movw	r12, r22
    7b3c:	7c 01       	movw	r14, r24
    }
#else
    printf("NO RTC\n");
    seconds = 0;
#endif                                        // RTC_SUPPORT
    if(!seconds)
    7b3e:	67 2b       	or	r22, r23
    7b40:	68 2b       	or	r22, r24
    7b42:	69 2b       	or	r22, r25
    7b44:	c1 f4       	brne	.+48     	; 0x7b76 <initialize_clock+0xbc>
    7b46:	0a c0       	rjmp	.+20     	; 0x7b5c <initialize_clock+0xa2>
        seconds = timegm(&tc);
    }
    else
    {
        seconds = 0;
        printf("rtc read errorafter init\n");
    7b48:	85 e6       	ldi	r24, 0x65	; 101
    7b4a:	96 e0       	ldi	r25, 0x06	; 6
    7b4c:	a0 e0       	ldi	r26, 0x00	; 0
    7b4e:	ed b7       	in	r30, 0x3d	; 61
    7b50:	fe b7       	in	r31, 0x3e	; 62
    7b52:	81 83       	std	Z+1, r24	; 0x01
    7b54:	92 83       	std	Z+2, r25	; 0x02
    7b56:	a3 83       	std	Z+3, r26	; 0x03
    7b58:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
#else
    printf("NO RTC\n");
    seconds = 0;
#endif                                        // RTC_SUPPORT
    if(!seconds)
        printf("use setdate command to change time\n");
    7b5c:	81 e4       	ldi	r24, 0x41	; 65
    7b5e:	96 e0       	ldi	r25, 0x06	; 6
    7b60:	a0 e0       	ldi	r26, 0x00	; 0
    7b62:	ed b7       	in	r30, 0x3d	; 61
    7b64:	fe b7       	in	r31, 0x3e	; 62
    7b66:	81 83       	std	Z+1, r24	; 0x01
    7b68:	92 83       	std	Z+2, r25	; 0x02
    7b6a:	a3 83       	std	Z+3, r26	; 0x03
    7b6c:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    7b70:	c1 2c       	mov	r12, r1
    7b72:	d1 2c       	mov	r13, r1
    7b74:	76 01       	movw	r14, r12
    tz.tz_minuteswest = minwest;
    7b76:	1b a3       	std	Y+35, r17	; 0x23
    7b78:	0a a3       	std	Y+34, r16	; 0x22
    tz.tz_dsttime = 0;
    7b7a:	1d a2       	std	Y+37, r1	; 0x25
    7b7c:	1c a2       	std	Y+36, r1	; 0x24
    settimezone( &tz );
    7b7e:	ce 01       	movw	r24, r28
    7b80:	82 96       	adiw	r24, 0x22	; 34
    7b82:	30 da       	rcall	.-2976   	; 0x6fe4 <settimezone>

    ts.tv_sec = seconds;
    7b84:	ca 8e       	std	Y+26, r12	; 0x1a
    7b86:	db 8e       	std	Y+27, r13	; 0x1b
    7b88:	ec 8e       	std	Y+28, r14	; 0x1c
    7b8a:	fd 8e       	std	Y+29, r15	; 0x1d
    ts.tv_nsec = 0L;
    7b8c:	1e 8e       	std	Y+30, r1	; 0x1e
    7b8e:	1f 8e       	std	Y+31, r1	; 0x1f
    7b90:	18 a2       	std	Y+32, r1	; 0x20
    7b92:	19 a2       	std	Y+33, r1	; 0x21
    clock_settime(0, (ts_t *) &ts);
    7b94:	be 01       	movw	r22, r28
    7b96:	66 5e       	subi	r22, 0xE6	; 230
    7b98:	7f 4f       	sbci	r23, 0xFF	; 255
    7b9a:	80 e0       	ldi	r24, 0x00	; 0
    7b9c:	90 e0       	ldi	r25, 0x00	; 0
    7b9e:	c7 d8       	rcall	.-3698   	; 0x6d2e <clock_settime>
}
    7ba0:	a5 96       	adiw	r28, 0x25	; 37
    7ba2:	e8 e0       	ldi	r30, 0x08	; 8
    7ba4:	0c 94 25 e7 	jmp	0x1ce4a	; 0x1ce4a <__epilogue_restores__+0x14>

00007ba8 <display_clock>:
/// @see: rtc_read
/// @see: timegm()
/// @see: ascitime()
MEMSPACE
void display_clock()
{
    7ba8:	a9 e2       	ldi	r26, 0x29	; 41
    7baa:	b0 e0       	ldi	r27, 0x00	; 0
    7bac:	ea ed       	ldi	r30, 0xDA	; 218
    7bae:	fd e3       	ldi	r31, 0x3D	; 61
    7bb0:	0c 94 0f e7 	jmp	0x1ce1e	; 0x1ce1e <__prologue_saves__+0x20>
    time_t seconds;
    tm_t tc;
    ts_t ts;

#ifdef RTC_SUPPORT
    if(rtc_read(&tc))
    7bb4:	ce 01       	movw	r24, r28
    7bb6:	08 96       	adiw	r24, 0x08	; 8
    7bb8:	0e 94 7d 30 	call	0x60fa	; 0x60fa <rtc_read>
    7bbc:	88 23       	and	r24, r24
    7bbe:	29 f1       	breq	.+74     	; 0x7c0a <display_clock+0x62>
    {
        seconds = timegm(&tc);
    7bc0:	ce 01       	movw	r24, r28
    7bc2:	08 96       	adiw	r24, 0x08	; 8
    7bc4:	b4 dc       	rcall	.-1688   	; 0x752e <timegm>
    7bc6:	6e a3       	std	Y+38, r22	; 0x26
    7bc8:	7f a3       	std	Y+39, r23	; 0x27
    7bca:	88 a7       	std	Y+40, r24	; 0x28
    7bcc:	99 a7       	std	Y+41, r25	; 0x29
        printf("rtc seconds: %lu\n",seconds);
    7bce:	ed b7       	in	r30, 0x3d	; 61
    7bd0:	fe b7       	in	r31, 0x3e	; 62
    7bd2:	64 83       	std	Z+4, r22	; 0x04
    7bd4:	75 83       	std	Z+5, r23	; 0x05
    7bd6:	86 83       	std	Z+6, r24	; 0x06
    7bd8:	97 83       	std	Z+7, r25	; 0x07
    7bda:	8f e2       	ldi	r24, 0x2F	; 47
    7bdc:	96 e0       	ldi	r25, 0x06	; 6
    7bde:	a0 e0       	ldi	r26, 0x00	; 0
    7be0:	81 83       	std	Z+1, r24	; 0x01
    7be2:	92 83       	std	Z+2, r25	; 0x02
    7be4:	a3 83       	std	Z+3, r26	; 0x03
    7be6:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
        printf("rtc time:    %s\n",asctime(&tc));
    7bea:	ce 01       	movw	r24, r28
    7bec:	08 96       	adiw	r24, 0x08	; 8
    7bee:	50 df       	rcall	.-352    	; 0x7a90 <asctime>
    7bf0:	ed b7       	in	r30, 0x3d	; 61
    7bf2:	fe b7       	in	r31, 0x3e	; 62
    7bf4:	95 83       	std	Z+5, r25	; 0x05
    7bf6:	84 83       	std	Z+4, r24	; 0x04
    7bf8:	8e e1       	ldi	r24, 0x1E	; 30
    7bfa:	96 e0       	ldi	r25, 0x06	; 6
    7bfc:	a0 e0       	ldi	r26, 0x00	; 0
    7bfe:	81 83       	std	Z+1, r24	; 0x01
    7c00:	92 83       	std	Z+2, r25	; 0x02
    7c02:	a3 83       	std	Z+3, r26	; 0x03
    7c04:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    7c08:	0a c0       	rjmp	.+20     	; 0x7c1e <display_clock+0x76>
            (int) tc.tm_wday);
#endif
    }
    else
    {
        printf("RTC read failed\n");
    7c0a:	8d e0       	ldi	r24, 0x0D	; 13
    7c0c:	96 e0       	ldi	r25, 0x06	; 6
    7c0e:	a0 e0       	ldi	r26, 0x00	; 0
    7c10:	ed b7       	in	r30, 0x3d	; 61
    7c12:	fe b7       	in	r31, 0x3e	; 62
    7c14:	81 83       	std	Z+1, r24	; 0x01
    7c16:	92 83       	std	Z+2, r25	; 0x02
    7c18:	a3 83       	std	Z+3, r26	; 0x03
    7c1a:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    }
#endif                                        // RTC_SUPPORT

    clock_gettime(0, (ts_t *) &ts);
    7c1e:	be 01       	movw	r22, r28
    7c20:	62 5e       	subi	r22, 0xE2	; 226
    7c22:	7f 4f       	sbci	r23, 0xFF	; 255
    7c24:	80 e0       	ldi	r24, 0x00	; 0
    7c26:	90 e0       	ldi	r25, 0x00	; 0
    7c28:	0e 94 ee 33 	call	0x67dc	; 0x67dc <clock_gettime>
    seconds = ts.tv_sec;
    7c2c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    7c2e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    7c30:	a8 a1       	ldd	r26, Y+32	; 0x20
    7c32:	b9 a1       	ldd	r27, Y+33	; 0x21
    7c34:	8e a3       	std	Y+38, r24	; 0x26
    7c36:	9f a3       	std	Y+39, r25	; 0x27
    7c38:	a8 a7       	std	Y+40, r26	; 0x28
    7c3a:	b9 a7       	std	Y+41, r27	; 0x29
    printf("clk seconds: %lu\n",seconds);
    7c3c:	ed b7       	in	r30, 0x3d	; 61
    7c3e:	fe b7       	in	r31, 0x3e	; 62
    7c40:	84 83       	std	Z+4, r24	; 0x04
    7c42:	95 83       	std	Z+5, r25	; 0x05
    7c44:	a6 83       	std	Z+6, r26	; 0x06
    7c46:	b7 83       	std	Z+7, r27	; 0x07
    7c48:	8b ef       	ldi	r24, 0xFB	; 251
    7c4a:	95 e0       	ldi	r25, 0x05	; 5
    7c4c:	a0 e0       	ldi	r26, 0x00	; 0
    7c4e:	81 83       	std	Z+1, r24	; 0x01
    7c50:	92 83       	std	Z+2, r25	; 0x02
    7c52:	a3 83       	std	Z+3, r26	; 0x03
    7c54:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    printf("clk time:    %s\n", asctime(gmtime(&seconds)));
    7c58:	ce 01       	movw	r24, r28
    7c5a:	86 96       	adiw	r24, 0x26	; 38
    7c5c:	a9 d9       	rcall	.-3246   	; 0x6fb0 <gmtime>
    7c5e:	18 df       	rcall	.-464    	; 0x7a90 <asctime>
    7c60:	ed b7       	in	r30, 0x3d	; 61
    7c62:	fe b7       	in	r31, 0x3e	; 62
    7c64:	95 83       	std	Z+5, r25	; 0x05
    7c66:	84 83       	std	Z+4, r24	; 0x04
    7c68:	8a ee       	ldi	r24, 0xEA	; 234
    7c6a:	95 e0       	ldi	r25, 0x05	; 5
    7c6c:	a0 e0       	ldi	r26, 0x00	; 0
    7c6e:	81 83       	std	Z+1, r24	; 0x01
    7c70:	92 83       	std	Z+2, r25	; 0x02
    7c72:	a3 83       	std	Z+3, r26	; 0x03
    7c74:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
}
    7c78:	a9 96       	adiw	r28, 0x29	; 41
    7c7a:	e2 e0       	ldi	r30, 0x02	; 2
    7c7c:	0c 94 2b e7 	jmp	0x1ce56	; 0x1ce56 <__epilogue_restores__+0x20>

00007c80 <_putc_buffer_fn>:
    va_start(va, format);
    _printf_fn(&fn, format, va);
    va_end(va);

    return ((int)fn.sent);
}
    7c80:	fc 01       	movw	r30, r24
    7c82:	84 81       	ldd	r24, Z+4	; 0x04
    7c84:	95 81       	ldd	r25, Z+5	; 0x05
    7c86:	00 97       	sbiw	r24, 0x00	; 0
    7c88:	79 f0       	breq	.+30     	; 0x7ca8 <_putc_buffer_fn+0x28>
    7c8a:	66 23       	and	r22, r22
    7c8c:	69 f0       	breq	.+26     	; 0x7ca8 <_putc_buffer_fn+0x28>
    7c8e:	01 97       	sbiw	r24, 0x01	; 1
    7c90:	95 83       	std	Z+5, r25	; 0x05
    7c92:	84 83       	std	Z+4, r24	; 0x04
    7c94:	86 81       	ldd	r24, Z+6	; 0x06
    7c96:	97 81       	ldd	r25, Z+7	; 0x07
    7c98:	01 96       	adiw	r24, 0x01	; 1
    7c9a:	97 83       	std	Z+7, r25	; 0x07
    7c9c:	86 83       	std	Z+6, r24	; 0x06
    7c9e:	a2 81       	ldd	r26, Z+2	; 0x02
    7ca0:	b3 81       	ldd	r27, Z+3	; 0x03
    7ca2:	6d 93       	st	X+, r22
    7ca4:	b3 83       	std	Z+3, r27	; 0x03
    7ca6:	a2 83       	std	Z+2, r26	; 0x02
    7ca8:	02 80       	ldd	r0, Z+2	; 0x02
    7caa:	f3 81       	ldd	r31, Z+3	; 0x03
    7cac:	e0 2d       	mov	r30, r0
    7cae:	10 82       	st	Z, r1
    7cb0:	08 95       	ret

00007cb2 <_putc_fn>:
    7cb2:	fc 01       	movw	r30, r24
    7cb4:	26 81       	ldd	r18, Z+6	; 0x06
    7cb6:	37 81       	ldd	r19, Z+7	; 0x07
    7cb8:	2f 5f       	subi	r18, 0xFF	; 255
    7cba:	3f 4f       	sbci	r19, 0xFF	; 255
    7cbc:	37 83       	std	Z+7, r19	; 0x07
    7cbe:	26 83       	std	Z+6, r18	; 0x06
    7cc0:	86 2f       	mov	r24, r22
    7cc2:	90 e0       	ldi	r25, 0x00	; 0
    7cc4:	0c 94 84 76 	jmp	0xed08	; 0xed08 <putchar>
    7cc8:	08 95       	ret

00007cca <bin2num>:
    7cca:	a0 e0       	ldi	r26, 0x00	; 0
    7ccc:	b0 e0       	ldi	r27, 0x00	; 0
    7cce:	eb e6       	ldi	r30, 0x6B	; 107
    7cd0:	fe e3       	ldi	r31, 0x3E	; 62
    7cd2:	0c 94 06 e7 	jmp	0x1ce0c	; 0x1ce0c <__prologue_saves__+0xe>
    7cd6:	ea 01       	movw	r28, r20
    7cd8:	53 e0       	ldi	r21, 0x03	; 3
    7cda:	ee 0c       	add	r14, r14
    7cdc:	ff 1c       	adc	r15, r15
    7cde:	5a 95       	dec	r21
    7ce0:	e1 f7       	brne	.-8      	; 0x7cda <bin2num+0x10>
    7ce2:	fc 01       	movw	r30, r24
    7ce4:	af 01       	movw	r20, r30
    7ce6:	48 1b       	sub	r20, r24
    7ce8:	59 0b       	sbc	r21, r25
    7cea:	c4 17       	cp	r28, r20
    7cec:	d5 07       	cpc	r29, r21
    7cee:	14 f0       	brlt	.+4      	; 0x7cf4 <bin2num+0x2a>
    7cf0:	11 92       	st	Z+, r1
    7cf2:	f8 cf       	rjmp	.-16     	; 0x7ce4 <bin2num+0x1a>
    7cf4:	41 e0       	ldi	r20, 0x01	; 1
    7cf6:	e4 1a       	sub	r14, r20
    7cf8:	f1 08       	sbc	r15, r1
    7cfa:	5b 01       	movw	r10, r22
    7cfc:	42 e0       	ldi	r20, 0x02	; 2
    7cfe:	a4 1a       	sub	r10, r20
    7d00:	b1 08       	sbc	r11, r1
    7d02:	f7 fc       	sbrc	r15, 7
    7d04:	3b c0       	rjmp	.+118    	; 0x7d7c <bin2num+0xb2>
    7d06:	f7 01       	movw	r30, r14
    7d08:	43 e0       	ldi	r20, 0x03	; 3
    7d0a:	f5 95       	asr	r31
    7d0c:	e7 95       	ror	r30
    7d0e:	4a 95       	dec	r20
    7d10:	e1 f7       	brne	.-8      	; 0x7d0a <bin2num+0x40>
    7d12:	e0 0f       	add	r30, r16
    7d14:	f1 1f       	adc	r31, r17
    7d16:	40 81       	ld	r20, Z
    7d18:	50 e0       	ldi	r21, 0x00	; 0
    7d1a:	f7 01       	movw	r30, r14
    7d1c:	e7 70       	andi	r30, 0x07	; 7
    7d1e:	ff 27       	eor	r31, r31
    7d20:	02 c0       	rjmp	.+4      	; 0x7d26 <bin2num+0x5c>
    7d22:	55 95       	asr	r21
    7d24:	47 95       	ror	r20
    7d26:	ea 95       	dec	r30
    7d28:	e2 f7       	brpl	.-8      	; 0x7d22 <bin2num+0x58>
    7d2a:	41 70       	andi	r20, 0x01	; 1
    7d2c:	55 27       	eor	r21, r21
    7d2e:	dc 01       	movw	r26, r24
    7d30:	e0 e0       	ldi	r30, 0x00	; 0
    7d32:	f0 e0       	ldi	r31, 0x00	; 0
    7d34:	ec 17       	cp	r30, r28
    7d36:	fd 07       	cpc	r31, r29
    7d38:	ec f4       	brge	.+58     	; 0x7d74 <bin2num+0xaa>
    7d3a:	ea 15       	cp	r30, r10
    7d3c:	fb 05       	cpc	r31, r11
    7d3e:	4c f0       	brlt	.+18     	; 0x7d52 <bin2num+0x88>
    7d40:	dc 01       	movw	r26, r24
    7d42:	ae 0f       	add	r26, r30
    7d44:	bf 1f       	adc	r27, r31
    7d46:	1c 92       	st	X, r1
    7d48:	41 e0       	ldi	r20, 0x01	; 1
    7d4a:	e4 1a       	sub	r14, r20
    7d4c:	f1 08       	sbc	r15, r1
    7d4e:	ef 01       	movw	r28, r30
    7d50:	d8 cf       	rjmp	.-80     	; 0x7d02 <bin2num+0x38>
    7d52:	9c 90       	ld	r9, X
    7d54:	99 0c       	add	r9, r9
    7d56:	94 2a       	or	r9, r20
    7d58:	49 2d       	mov	r20, r9
    7d5a:	50 e0       	ldi	r21, 0x00	; 0
    7d5c:	42 17       	cp	r20, r18
    7d5e:	53 07       	cpc	r21, r19
    7d60:	24 f0       	brlt	.+8      	; 0x7d6a <bin2num+0xa0>
    7d62:	92 1a       	sub	r9, r18
    7d64:	41 e0       	ldi	r20, 0x01	; 1
    7d66:	50 e0       	ldi	r21, 0x00	; 0
    7d68:	02 c0       	rjmp	.+4      	; 0x7d6e <bin2num+0xa4>
    7d6a:	40 e0       	ldi	r20, 0x00	; 0
    7d6c:	50 e0       	ldi	r21, 0x00	; 0
    7d6e:	9d 92       	st	X+, r9
    7d70:	31 96       	adiw	r30, 0x01	; 1
    7d72:	e0 cf       	rjmp	.-64     	; 0x7d34 <bin2num+0x6a>
    7d74:	41 15       	cp	r20, r1
    7d76:	51 05       	cpc	r21, r1
    7d78:	01 f7       	brne	.-64     	; 0x7d3a <bin2num+0x70>
    7d7a:	e2 cf       	rjmp	.-60     	; 0x7d40 <bin2num+0x76>
    7d7c:	fc 01       	movw	r30, r24
    7d7e:	9f 01       	movw	r18, r30
    7d80:	28 1b       	sub	r18, r24
    7d82:	39 0b       	sbc	r19, r25
    7d84:	2c 17       	cp	r18, r28
    7d86:	3d 07       	cpc	r19, r29
    7d88:	4c f4       	brge	.+18     	; 0x7d9c <bin2num+0xd2>
    7d8a:	20 81       	ld	r18, Z
    7d8c:	2a 30       	cpi	r18, 0x0A	; 10
    7d8e:	10 f4       	brcc	.+4      	; 0x7d94 <bin2num+0xca>
    7d90:	20 5d       	subi	r18, 0xD0	; 208
    7d92:	01 c0       	rjmp	.+2      	; 0x7d96 <bin2num+0xcc>
    7d94:	29 5a       	subi	r18, 0xA9	; 169
    7d96:	20 83       	st	Z, r18
    7d98:	31 96       	adiw	r30, 0x01	; 1
    7d9a:	f1 cf       	rjmp	.-30     	; 0x7d7e <bin2num+0xb4>
    7d9c:	9e 01       	movw	r18, r28
    7d9e:	d7 ff       	sbrs	r29, 7
    7da0:	02 c0       	rjmp	.+4      	; 0x7da6 <bin2num+0xdc>
    7da2:	20 e0       	ldi	r18, 0x00	; 0
    7da4:	30 e0       	ldi	r19, 0x00	; 0
    7da6:	c1 14       	cp	r12, r1
    7da8:	d1 04       	cpc	r13, r1
    7daa:	61 f0       	breq	.+24     	; 0x7dc4 <bin2num+0xfa>
    7dac:	61 50       	subi	r22, 0x01	; 1
    7dae:	71 09       	sbc	r23, r1
    7db0:	26 17       	cp	r18, r22
    7db2:	37 07       	cpc	r19, r23
    7db4:	3c f4       	brge	.+14     	; 0x7dc4 <bin2num+0xfa>
    7db6:	fc 01       	movw	r30, r24
    7db8:	e2 0f       	add	r30, r18
    7dba:	f3 1f       	adc	r31, r19
    7dbc:	c0 82       	st	Z, r12
    7dbe:	21 96       	adiw	r28, 0x01	; 1
    7dc0:	2f 5f       	subi	r18, 0xFF	; 255
    7dc2:	3f 4f       	sbci	r19, 0xFF	; 255
    7dc4:	fc 01       	movw	r30, r24
    7dc6:	e2 0f       	add	r30, r18
    7dc8:	f3 1f       	adc	r31, r19
    7dca:	10 82       	st	Z, r1
    7dcc:	0e 94 a5 31 	call	0x634a	; 0x634a <reverse>
    7dd0:	ce 01       	movw	r24, r28
    7dd2:	cd b7       	in	r28, 0x3d	; 61
    7dd4:	de b7       	in	r29, 0x3e	; 62
    7dd6:	eb e0       	ldi	r30, 0x0B	; 11
    7dd8:	0c 94 22 e7 	jmp	0x1ce44	; 0x1ce44 <__epilogue_restores__+0xe>

00007ddc <pch>:
    7ddc:	fc 01       	movw	r30, r24
    7dde:	22 81       	ldd	r18, Z+2	; 0x02
    7de0:	33 81       	ldd	r19, Z+3	; 0x03
    7de2:	44 81       	ldd	r20, Z+4	; 0x04
    7de4:	55 81       	ldd	r21, Z+5	; 0x05
    7de6:	80 81       	ld	r24, Z
    7de8:	91 81       	ldd	r25, Z+1	; 0x01
    7dea:	24 17       	cp	r18, r20
    7dec:	35 07       	cpc	r19, r21
    7dee:	54 f4       	brge	.+20     	; 0x7e04 <pch+0x28>
    7df0:	a9 01       	movw	r20, r18
    7df2:	4f 5f       	subi	r20, 0xFF	; 255
    7df4:	5f 4f       	sbci	r21, 0xFF	; 255
    7df6:	53 83       	std	Z+3, r21	; 0x03
    7df8:	42 83       	std	Z+2, r20	; 0x02
    7dfa:	dc 01       	movw	r26, r24
    7dfc:	a2 0f       	add	r26, r18
    7dfe:	b3 1f       	adc	r27, r19
    7e00:	6c 93       	st	X, r22
    7e02:	04 c0       	rjmp	.+8      	; 0x7e0c <pch+0x30>
    7e04:	dc 01       	movw	r26, r24
    7e06:	a2 0f       	add	r26, r18
    7e08:	b3 1f       	adc	r27, r19
    7e0a:	1c 92       	st	X, r1
    7e0c:	82 81       	ldd	r24, Z+2	; 0x02
    7e0e:	93 81       	ldd	r25, Z+3	; 0x03
    7e10:	08 95       	ret

00007e12 <p_ntoa>:
    7e12:	af 92       	push	r10
    7e14:	cf 92       	push	r12
    7e16:	df 92       	push	r13
    7e18:	ef 92       	push	r14
    7e1a:	ff 92       	push	r15
    7e1c:	0f 93       	push	r16
    7e1e:	1f 93       	push	r17
    7e20:	cf 93       	push	r28
    7e22:	df 93       	push	r29
    7e24:	dc 01       	movw	r26, r24
    7e26:	eb 01       	movw	r28, r22
    7e28:	fa 01       	movw	r30, r20
    7e2a:	b9 01       	movw	r22, r18
    7e2c:	98 01       	movw	r18, r16
    7e2e:	a6 01       	movw	r20, r12
    7e30:	9a 2d       	mov	r25, r10
    7e32:	a5 fa       	bst	r10, 5
    7e34:	cc 24       	eor	r12, r12
    7e36:	c0 f8       	bld	r12, 0
    7e38:	a6 fc       	sbrc	r10, 6
    7e3a:	07 c0       	rjmp	.+14     	; 0x7e4a <p_ntoa+0x38>
    7e3c:	a2 fc       	sbrc	r10, 2
    7e3e:	08 c0       	rjmp	.+16     	; 0x7e50 <p_ntoa+0x3e>
    7e40:	a4 fe       	sbrs	r10, 4
    7e42:	09 c0       	rjmp	.+18     	; 0x7e56 <p_ntoa+0x44>
    7e44:	00 e2       	ldi	r16, 0x20	; 32
    7e46:	10 e0       	ldi	r17, 0x00	; 0
    7e48:	08 c0       	rjmp	.+16     	; 0x7e5a <p_ntoa+0x48>
    7e4a:	0d e2       	ldi	r16, 0x2D	; 45
    7e4c:	10 e0       	ldi	r17, 0x00	; 0
    7e4e:	05 c0       	rjmp	.+10     	; 0x7e5a <p_ntoa+0x48>
    7e50:	0b e2       	ldi	r16, 0x2B	; 43
    7e52:	10 e0       	ldi	r17, 0x00	; 0
    7e54:	02 c0       	rjmp	.+4      	; 0x7e5a <p_ntoa+0x48>
    7e56:	00 e0       	ldi	r16, 0x00	; 0
    7e58:	10 e0       	ldi	r17, 0x00	; 0
    7e5a:	95 ff       	sbrs	r25, 5
    7e5c:	04 c0       	rjmp	.+8      	; 0x7e66 <p_ntoa+0x54>
    7e5e:	89 2f       	mov	r24, r25
    7e60:	8a 70       	andi	r24, 0x0A	; 10
    7e62:	09 f0       	breq	.+2      	; 0x7e66 <p_ntoa+0x54>
    7e64:	c1 2c       	mov	r12, r1
    7e66:	c0 fa       	bst	r12, 0
    7e68:	95 f9       	bld	r25, 5
    7e6a:	89 2f       	mov	r24, r25
    7e6c:	82 70       	andi	r24, 0x02	; 2
    7e6e:	c8 2e       	mov	r12, r24
    7e70:	91 fd       	sbrc	r25, 1
    7e72:	02 c0       	rjmp	.+4      	; 0x7e78 <p_ntoa+0x66>
    7e74:	40 e0       	ldi	r20, 0x00	; 0
    7e76:	50 e0       	ldi	r21, 0x00	; 0
    7e78:	89 2f       	mov	r24, r25
    7e7a:	83 70       	andi	r24, 0x03	; 3
    7e7c:	11 f4       	brne	.+4      	; 0x7e82 <p_ntoa+0x70>
    7e7e:	41 e0       	ldi	r20, 0x01	; 1
    7e80:	50 e0       	ldi	r21, 0x00	; 0
    7e82:	90 ff       	sbrs	r25, 0
    7e84:	0c c0       	rjmp	.+24     	; 0x7e9e <p_ntoa+0x8c>
    7e86:	95 fd       	sbrc	r25, 5
    7e88:	05 c0       	rjmp	.+10     	; 0x7e94 <p_ntoa+0x82>
    7e8a:	c1 10       	cpse	r12, r1
    7e8c:	08 c0       	rjmp	.+16     	; 0x7e9e <p_ntoa+0x8c>
    7e8e:	41 e0       	ldi	r20, 0x01	; 1
    7e90:	50 e0       	ldi	r21, 0x00	; 0
    7e92:	05 c0       	rjmp	.+10     	; 0x7e9e <p_ntoa+0x8c>
    7e94:	94 75       	andi	r25, 0x54	; 84
    7e96:	a7 01       	movw	r20, r14
    7e98:	11 f0       	breq	.+4      	; 0x7e9e <p_ntoa+0x8c>
    7e9a:	41 50       	subi	r20, 0x01	; 1
    7e9c:	51 09       	sbc	r21, r1
    7e9e:	68 01       	movw	r12, r16
    7ea0:	7e 01       	movw	r14, r28
    7ea2:	8d 01       	movw	r16, r26
    7ea4:	cf 01       	movw	r24, r30
    7ea6:	11 df       	rcall	.-478    	; 0x7cca <bin2num>
    7ea8:	df 91       	pop	r29
    7eaa:	cf 91       	pop	r28
    7eac:	1f 91       	pop	r17
    7eae:	0f 91       	pop	r16
    7eb0:	ff 90       	pop	r15
    7eb2:	ef 90       	pop	r14
    7eb4:	df 90       	pop	r13
    7eb6:	cf 90       	pop	r12
    7eb8:	af 90       	pop	r10
    7eba:	08 95       	ret

00007ebc <p_ftoa>:
    7ebc:	aa e0       	ldi	r26, 0x0A	; 10
    7ebe:	b0 e0       	ldi	r27, 0x00	; 0
    7ec0:	e4 e6       	ldi	r30, 0x64	; 100
    7ec2:	ff e3       	ldi	r31, 0x3F	; 63
    7ec4:	0c 94 ff e6 	jmp	0x1cdfe	; 0x1cdfe <__prologue_saves__>
    7ec8:	4b 01       	movw	r8, r22
    7eca:	5c 01       	movw	r10, r24
    7ecc:	1a 01       	movw	r2, r20
    7ece:	28 01       	movw	r4, r16
    7ed0:	c6 fa       	bst	r12, 6
    7ed2:	11 27       	eor	r17, r17
    7ed4:	10 f9       	bld	r17, 0
    7ed6:	5a 83       	std	Y+2, r21	; 0x02
    7ed8:	49 83       	std	Y+1, r20	; 0x01
    7eda:	1c 82       	std	Y+4, r1	; 0x04
    7edc:	1b 82       	std	Y+3, r1	; 0x03
    7ede:	21 50       	subi	r18, 0x01	; 1
    7ee0:	31 09       	sbc	r19, r1
    7ee2:	3e 83       	std	Y+6, r19	; 0x06
    7ee4:	2d 83       	std	Y+5, r18	; 0x05
    7ee6:	fa 01       	movw	r30, r20
    7ee8:	10 82       	st	Z, r1
    7eea:	20 e0       	ldi	r18, 0x00	; 0
    7eec:	30 e0       	ldi	r19, 0x00	; 0
    7eee:	a9 01       	movw	r20, r18
    7ef0:	0e 94 bd e7 	call	0x1cf7a	; 0x1cf7a <__cmpsf2>
    7ef4:	87 ff       	sbrs	r24, 7
    7ef6:	05 c0       	rjmp	.+10     	; 0x7f02 <p_ftoa+0x46>
    7ef8:	b7 fa       	bst	r11, 7
    7efa:	b0 94       	com	r11
    7efc:	b7 f8       	bld	r11, 7
    7efe:	b0 94       	com	r11
    7f00:	11 e0       	ldi	r17, 0x01	; 1
    7f02:	10 fb       	bst	r17, 0
    7f04:	c6 f8       	bld	r12, 6
    7f06:	c6 fe       	sbrs	r12, 6
    7f08:	02 c0       	rjmp	.+4      	; 0x7f0e <p_ftoa+0x52>
    7f0a:	6d e2       	ldi	r22, 0x2D	; 45
    7f0c:	07 c0       	rjmp	.+14     	; 0x7f1c <p_ftoa+0x60>
    7f0e:	c2 fe       	sbrs	r12, 2
    7f10:	02 c0       	rjmp	.+4      	; 0x7f16 <p_ftoa+0x5a>
    7f12:	6b e2       	ldi	r22, 0x2B	; 43
    7f14:	03 c0       	rjmp	.+6      	; 0x7f1c <p_ftoa+0x60>
    7f16:	c4 fe       	sbrs	r12, 4
    7f18:	04 c0       	rjmp	.+8      	; 0x7f22 <p_ftoa+0x66>
    7f1a:	60 e2       	ldi	r22, 0x20	; 32
    7f1c:	ce 01       	movw	r24, r28
    7f1e:	01 96       	adiw	r24, 0x01	; 1
    7f20:	5d df       	rcall	.-326    	; 0x7ddc <pch>
    7f22:	37 01       	movw	r6, r14
    7f24:	f7 fe       	sbrs	r15, 7
    7f26:	02 c0       	rjmp	.+4      	; 0x7f2c <p_ftoa+0x70>
    7f28:	61 2c       	mov	r6, r1
    7f2a:	71 2c       	mov	r7, r1
    7f2c:	20 e0       	ldi	r18, 0x00	; 0
    7f2e:	30 e0       	ldi	r19, 0x00	; 0
    7f30:	a9 01       	movw	r20, r18
    7f32:	c5 01       	movw	r24, r10
    7f34:	b4 01       	movw	r22, r8
    7f36:	0e 94 bd e7 	call	0x1cf7a	; 0x1cf7a <__cmpsf2>
    7f3a:	88 23       	and	r24, r24
    7f3c:	d1 f1       	breq	.+116    	; 0x7fb2 <p_ftoa+0xf6>
    7f3e:	c1 fe       	sbrs	r12, 1
    7f40:	11 c0       	rjmp	.+34     	; 0x7f64 <p_ftoa+0xa8>
    7f42:	83 01       	movw	r16, r6
    7f44:	60 e0       	ldi	r22, 0x00	; 0
    7f46:	70 e0       	ldi	r23, 0x00	; 0
    7f48:	80 e0       	ldi	r24, 0x00	; 0
    7f4a:	9f e3       	ldi	r25, 0x3F	; 63
    7f4c:	01 15       	cp	r16, r1
    7f4e:	11 05       	cpc	r17, r1
    7f50:	69 f0       	breq	.+26     	; 0x7f6c <p_ftoa+0xb0>
    7f52:	20 e0       	ldi	r18, 0x00	; 0
    7f54:	30 e0       	ldi	r19, 0x00	; 0
    7f56:	40 e2       	ldi	r20, 0x20	; 32
    7f58:	51 e4       	ldi	r21, 0x41	; 65
    7f5a:	0e 94 c1 e7 	call	0x1cf82	; 0x1cf82 <__divsf3>
    7f5e:	01 50       	subi	r16, 0x01	; 1
    7f60:	11 09       	sbc	r17, r1
    7f62:	f4 cf       	rjmp	.-24     	; 0x7f4c <p_ftoa+0x90>
    7f64:	60 e0       	ldi	r22, 0x00	; 0
    7f66:	70 e0       	ldi	r23, 0x00	; 0
    7f68:	80 e0       	ldi	r24, 0x00	; 0
    7f6a:	9f e3       	ldi	r25, 0x3F	; 63
    7f6c:	9b 01       	movw	r18, r22
    7f6e:	ac 01       	movw	r20, r24
    7f70:	c5 01       	movw	r24, r10
    7f72:	b4 01       	movw	r22, r8
    7f74:	0e 94 59 e7 	call	0x1ceb2	; 0x1ceb2 <__addsf3>
    7f78:	4b 01       	movw	r8, r22
    7f7a:	5c 01       	movw	r10, r24
    7f7c:	ee 24       	eor	r14, r14
    7f7e:	e3 94       	inc	r14
    7f80:	f1 2c       	mov	r15, r1
    7f82:	20 e0       	ldi	r18, 0x00	; 0
    7f84:	30 e0       	ldi	r19, 0x00	; 0
    7f86:	40 e2       	ldi	r20, 0x20	; 32
    7f88:	51 e4       	ldi	r21, 0x41	; 65
    7f8a:	c5 01       	movw	r24, r10
    7f8c:	b4 01       	movw	r22, r8
    7f8e:	0e 94 0c e9 	call	0x1d218	; 0x1d218 <__gesf2>
    7f92:	87 fd       	sbrc	r24, 7
    7f94:	11 c0       	rjmp	.+34     	; 0x7fb8 <p_ftoa+0xfc>
    7f96:	ff ef       	ldi	r31, 0xFF	; 255
    7f98:	ef 1a       	sub	r14, r31
    7f9a:	ff 0a       	sbc	r15, r31
    7f9c:	20 e0       	ldi	r18, 0x00	; 0
    7f9e:	30 e0       	ldi	r19, 0x00	; 0
    7fa0:	40 e2       	ldi	r20, 0x20	; 32
    7fa2:	51 e4       	ldi	r21, 0x41	; 65
    7fa4:	c5 01       	movw	r24, r10
    7fa6:	b4 01       	movw	r22, r8
    7fa8:	0e 94 c1 e7 	call	0x1cf82	; 0x1cf82 <__divsf3>
    7fac:	4b 01       	movw	r8, r22
    7fae:	5c 01       	movw	r10, r24
    7fb0:	e8 cf       	rjmp	.-48     	; 0x7f82 <p_ftoa+0xc6>
    7fb2:	ee 24       	eor	r14, r14
    7fb4:	e3 94       	inc	r14
    7fb6:	f1 2c       	mov	r15, r1
    7fb8:	8c 2d       	mov	r24, r12
    7fba:	88 72       	andi	r24, 0x28	; 40
    7fbc:	80 32       	cpi	r24, 0x20	; 32
    7fbe:	c1 f4       	brne	.+48     	; 0x7ff0 <p_ftoa+0x134>
    7fc0:	82 01       	movw	r16, r4
    7fc2:	0e 19       	sub	r16, r14
    7fc4:	1f 09       	sbc	r17, r15
    7fc6:	8b 81       	ldd	r24, Y+3	; 0x03
    7fc8:	9c 81       	ldd	r25, Y+4	; 0x04
    7fca:	08 1b       	sub	r16, r24
    7fcc:	19 0b       	sbc	r17, r25
    7fce:	c1 fe       	sbrs	r12, 1
    7fd0:	07 c0       	rjmp	.+14     	; 0x7fe0 <p_ftoa+0x124>
    7fd2:	61 14       	cp	r6, r1
    7fd4:	71 04       	cpc	r7, r1
    7fd6:	21 f0       	breq	.+8      	; 0x7fe0 <p_ftoa+0x124>
    7fd8:	06 19       	sub	r16, r6
    7fda:	17 09       	sbc	r17, r7
    7fdc:	01 50       	subi	r16, 0x01	; 1
    7fde:	11 09       	sbc	r17, r1
    7fe0:	10 16       	cp	r1, r16
    7fe2:	11 06       	cpc	r1, r17
    7fe4:	2c f4       	brge	.+10     	; 0x7ff0 <p_ftoa+0x134>
    7fe6:	60 e3       	ldi	r22, 0x30	; 48
    7fe8:	ce 01       	movw	r24, r28
    7fea:	01 96       	adiw	r24, 0x01	; 1
    7fec:	f7 de       	rcall	.-530    	; 0x7ddc <pch>
    7fee:	f6 cf       	rjmp	.-20     	; 0x7fdc <p_ftoa+0x120>
    7ff0:	c5 01       	movw	r24, r10
    7ff2:	b4 01       	movw	r22, r8
    7ff4:	0e 94 29 e8 	call	0x1d052	; 0x1d052 <__fixsfsi>
    7ff8:	6f 83       	std	Y+7, r22	; 0x07
    7ffa:	78 87       	std	Y+8, r23	; 0x08
    7ffc:	89 87       	std	Y+9, r24	; 0x09
    7ffe:	9a 87       	std	Y+10, r25	; 0x0a
    8000:	6f 81       	ldd	r22, Y+7	; 0x07
    8002:	60 5d       	subi	r22, 0xD0	; 208
    8004:	ce 01       	movw	r24, r28
    8006:	01 96       	adiw	r24, 0x01	; 1
    8008:	e9 de       	rcall	.-558    	; 0x7ddc <pch>
    800a:	2f 81       	ldd	r18, Y+7	; 0x07
    800c:	38 85       	ldd	r19, Y+8	; 0x08
    800e:	b9 01       	movw	r22, r18
    8010:	33 0f       	add	r19, r19
    8012:	88 0b       	sbc	r24, r24
    8014:	99 0b       	sbc	r25, r25
    8016:	0e 94 5c e8 	call	0x1d0b8	; 0x1d0b8 <__floatsisf>
    801a:	9b 01       	movw	r18, r22
    801c:	ac 01       	movw	r20, r24
    801e:	c5 01       	movw	r24, r10
    8020:	b4 01       	movw	r22, r8
    8022:	0e 94 58 e7 	call	0x1ceb0	; 0x1ceb0 <__subsf3>
    8026:	31 e0       	ldi	r19, 0x01	; 1
    8028:	e3 1a       	sub	r14, r19
    802a:	f1 08       	sbc	r15, r1
    802c:	20 e0       	ldi	r18, 0x00	; 0
    802e:	30 e0       	ldi	r19, 0x00	; 0
    8030:	40 e2       	ldi	r20, 0x20	; 32
    8032:	51 e4       	ldi	r21, 0x41	; 65
    8034:	0e 94 10 e9 	call	0x1d220	; 0x1d220 <__mulsf3>
    8038:	4b 01       	movw	r8, r22
    803a:	5c 01       	movw	r10, r24
    803c:	e1 14       	cp	r14, r1
    803e:	f1 04       	cpc	r15, r1
    8040:	b9 f6       	brne	.-82     	; 0x7ff0 <p_ftoa+0x134>
    8042:	c1 fc       	sbrc	r12, 1
    8044:	10 c0       	rjmp	.+32     	; 0x8066 <p_ftoa+0x1aa>
    8046:	60 e0       	ldi	r22, 0x00	; 0
    8048:	ce 01       	movw	r24, r28
    804a:	01 96       	adiw	r24, 0x01	; 1
    804c:	c7 de       	rcall	.-626    	; 0x7ddc <pch>
    804e:	f1 01       	movw	r30, r2
    8050:	01 90       	ld	r0, Z+
    8052:	00 20       	and	r0, r0
    8054:	e9 f7       	brne	.-6      	; 0x8050 <p_ftoa+0x194>
    8056:	31 97       	sbiw	r30, 0x01	; 1
    8058:	cf 01       	movw	r24, r30
    805a:	82 19       	sub	r24, r2
    805c:	93 09       	sbc	r25, r3
    805e:	2a 96       	adiw	r28, 0x0a	; 10
    8060:	e2 e1       	ldi	r30, 0x12	; 18
    8062:	0c 94 1b e7 	jmp	0x1ce36	; 0x1ce36 <__epilogue_restores__>
    8066:	61 14       	cp	r6, r1
    8068:	71 04       	cpc	r7, r1
    806a:	69 f3       	breq	.-38     	; 0x8046 <p_ftoa+0x18a>
    806c:	6e e2       	ldi	r22, 0x2E	; 46
    806e:	ce 01       	movw	r24, r28
    8070:	01 96       	adiw	r24, 0x01	; 1
    8072:	b4 de       	rcall	.-664    	; 0x7ddc <pch>
    8074:	c5 01       	movw	r24, r10
    8076:	b4 01       	movw	r22, r8
    8078:	0e 94 29 e8 	call	0x1d052	; 0x1d052 <__fixsfsi>
    807c:	6b 01       	movw	r12, r22
    807e:	7c 01       	movw	r14, r24
    8080:	07 2e       	mov	r0, r23
    8082:	00 0c       	add	r0, r0
    8084:	88 0b       	sbc	r24, r24
    8086:	99 0b       	sbc	r25, r25
    8088:	0e 94 5c e8 	call	0x1d0b8	; 0x1d0b8 <__floatsisf>
    808c:	9b 01       	movw	r18, r22
    808e:	ac 01       	movw	r20, r24
    8090:	c5 01       	movw	r24, r10
    8092:	b4 01       	movw	r22, r8
    8094:	0e 94 58 e7 	call	0x1ceb0	; 0x1ceb0 <__subsf3>
    8098:	4b 01       	movw	r8, r22
    809a:	5c 01       	movw	r10, r24
    809c:	b6 01       	movw	r22, r12
    809e:	60 5d       	subi	r22, 0xD0	; 208
    80a0:	7f 4f       	sbci	r23, 0xFF	; 255
    80a2:	ce 01       	movw	r24, r28
    80a4:	01 96       	adiw	r24, 0x01	; 1
    80a6:	9a de       	rcall	.-716    	; 0x7ddc <pch>
    80a8:	81 e0       	ldi	r24, 0x01	; 1
    80aa:	68 1a       	sub	r6, r24
    80ac:	71 08       	sbc	r7, r1
    80ae:	20 e0       	ldi	r18, 0x00	; 0
    80b0:	30 e0       	ldi	r19, 0x00	; 0
    80b2:	40 e2       	ldi	r20, 0x20	; 32
    80b4:	51 e4       	ldi	r21, 0x41	; 65
    80b6:	c5 01       	movw	r24, r10
    80b8:	b4 01       	movw	r22, r8
    80ba:	0e 94 10 e9 	call	0x1d220	; 0x1d220 <__mulsf3>
    80be:	4b 01       	movw	r8, r22
    80c0:	5c 01       	movw	r10, r24
    80c2:	61 14       	cp	r6, r1
    80c4:	71 04       	cpc	r7, r1
    80c6:	b1 f6       	brne	.-84     	; 0x8074 <p_ftoa+0x1b8>
    80c8:	be cf       	rjmp	.-132    	; 0x8046 <p_ftoa+0x18a>

000080ca <p_etoa>:
    80ca:	a3 e1       	ldi	r26, 0x13	; 19
    80cc:	b0 e0       	ldi	r27, 0x00	; 0
    80ce:	eb e6       	ldi	r30, 0x6B	; 107
    80d0:	f0 e4       	ldi	r31, 0x40	; 64
    80d2:	0c 94 ff e6 	jmp	0x1cdfe	; 0x1cdfe <__prologue_saves__>
    80d6:	4b 01       	movw	r8, r22
    80d8:	5c 01       	movw	r10, r24
    80da:	59 8b       	std	Y+17, r21	; 0x11
    80dc:	48 8b       	std	Y+16, r20	; 0x10
    80de:	1b 8b       	std	Y+19, r17	; 0x13
    80e0:	0a 8b       	std	Y+18, r16	; 0x12
    80e2:	3c 2c       	mov	r3, r12
    80e4:	c6 fa       	bst	r12, 6
    80e6:	11 27       	eor	r17, r17
    80e8:	10 f9       	bld	r17, 0
    80ea:	59 87       	std	Y+9, r21	; 0x09
    80ec:	48 87       	std	Y+8, r20	; 0x08
    80ee:	1b 86       	std	Y+11, r1	; 0x0b
    80f0:	1a 86       	std	Y+10, r1	; 0x0a
    80f2:	21 50       	subi	r18, 0x01	; 1
    80f4:	31 09       	sbc	r19, r1
    80f6:	3d 87       	std	Y+13, r19	; 0x0d
    80f8:	2c 87       	std	Y+12, r18	; 0x0c
    80fa:	fa 01       	movw	r30, r20
    80fc:	10 82       	st	Z, r1
    80fe:	20 e0       	ldi	r18, 0x00	; 0
    8100:	30 e0       	ldi	r19, 0x00	; 0
    8102:	a9 01       	movw	r20, r18
    8104:	0e 94 bd e7 	call	0x1cf7a	; 0x1cf7a <__cmpsf2>
    8108:	87 ff       	sbrs	r24, 7
    810a:	05 c0       	rjmp	.+10     	; 0x8116 <p_etoa+0x4c>
    810c:	b7 fa       	bst	r11, 7
    810e:	b0 94       	com	r11
    8110:	b7 f8       	bld	r11, 7
    8112:	b0 94       	com	r11
    8114:	11 e0       	ldi	r17, 0x01	; 1
    8116:	10 fb       	bst	r17, 0
    8118:	36 f8       	bld	r3, 6
    811a:	36 fe       	sbrs	r3, 6
    811c:	02 c0       	rjmp	.+4      	; 0x8122 <p_etoa+0x58>
    811e:	6d e2       	ldi	r22, 0x2D	; 45
    8120:	07 c0       	rjmp	.+14     	; 0x8130 <p_etoa+0x66>
    8122:	32 fe       	sbrs	r3, 2
    8124:	02 c0       	rjmp	.+4      	; 0x812a <p_etoa+0x60>
    8126:	6b e2       	ldi	r22, 0x2B	; 43
    8128:	03 c0       	rjmp	.+6      	; 0x8130 <p_etoa+0x66>
    812a:	34 fe       	sbrs	r3, 4
    812c:	04 c0       	rjmp	.+8      	; 0x8136 <p_etoa+0x6c>
    812e:	60 e2       	ldi	r22, 0x20	; 32
    8130:	ce 01       	movw	r24, r28
    8132:	08 96       	adiw	r24, 0x08	; 8
    8134:	53 de       	rcall	.-858    	; 0x7ddc <pch>
    8136:	37 01       	movw	r6, r14
    8138:	f7 fe       	sbrs	r15, 7
    813a:	02 c0       	rjmp	.+4      	; 0x8140 <p_etoa+0x76>
    813c:	61 2c       	mov	r6, r1
    813e:	71 2c       	mov	r7, r1
    8140:	1f 86       	std	Y+15, r1	; 0x0f
    8142:	1e 86       	std	Y+14, r1	; 0x0e
    8144:	20 e0       	ldi	r18, 0x00	; 0
    8146:	30 e0       	ldi	r19, 0x00	; 0
    8148:	a9 01       	movw	r20, r18
    814a:	c5 01       	movw	r24, r10
    814c:	b4 01       	movw	r22, r8
    814e:	0e 94 bd e7 	call	0x1cf7a	; 0x1cf7a <__cmpsf2>
    8152:	f3 2d       	mov	r31, r3
    8154:	f2 70       	andi	r31, 0x02	; 2
    8156:	2f 2e       	mov	r2, r31
    8158:	88 23       	and	r24, r24
    815a:	09 f4       	brne	.+2      	; 0x815e <p_etoa+0x94>
    815c:	70 c0       	rjmp	.+224    	; 0x823e <p_etoa+0x174>
    815e:	ff 23       	and	r31, r31
    8160:	b1 f0       	breq	.+44     	; 0x818e <p_etoa+0xc4>
    8162:	83 01       	movw	r16, r6
    8164:	c1 2c       	mov	r12, r1
    8166:	d1 2c       	mov	r13, r1
    8168:	e1 2c       	mov	r14, r1
    816a:	2f e3       	ldi	r18, 0x3F	; 63
    816c:	f2 2e       	mov	r15, r18
    816e:	01 15       	cp	r16, r1
    8170:	11 05       	cpc	r17, r1
    8172:	91 f0       	breq	.+36     	; 0x8198 <p_etoa+0xce>
    8174:	20 e0       	ldi	r18, 0x00	; 0
    8176:	30 e0       	ldi	r19, 0x00	; 0
    8178:	40 e2       	ldi	r20, 0x20	; 32
    817a:	51 e4       	ldi	r21, 0x41	; 65
    817c:	c7 01       	movw	r24, r14
    817e:	b6 01       	movw	r22, r12
    8180:	0e 94 c1 e7 	call	0x1cf82	; 0x1cf82 <__divsf3>
    8184:	6b 01       	movw	r12, r22
    8186:	7c 01       	movw	r14, r24
    8188:	01 50       	subi	r16, 0x01	; 1
    818a:	11 09       	sbc	r17, r1
    818c:	f0 cf       	rjmp	.-32     	; 0x816e <p_etoa+0xa4>
    818e:	c1 2c       	mov	r12, r1
    8190:	d1 2c       	mov	r13, r1
    8192:	e1 2c       	mov	r14, r1
    8194:	9f e3       	ldi	r25, 0x3F	; 63
    8196:	f9 2e       	mov	r15, r25
    8198:	41 2c       	mov	r4, r1
    819a:	51 2c       	mov	r5, r1
    819c:	82 01       	movw	r16, r4
    819e:	01 50       	subi	r16, 0x01	; 1
    81a0:	11 09       	sbc	r17, r1
    81a2:	20 e0       	ldi	r18, 0x00	; 0
    81a4:	30 e0       	ldi	r19, 0x00	; 0
    81a6:	40 e8       	ldi	r20, 0x80	; 128
    81a8:	5f e3       	ldi	r21, 0x3F	; 63
    81aa:	c5 01       	movw	r24, r10
    81ac:	b4 01       	movw	r22, r8
    81ae:	0e 94 bd e7 	call	0x1cf7a	; 0x1cf7a <__cmpsf2>
    81b2:	87 ff       	sbrs	r24, 7
    81b4:	0c c0       	rjmp	.+24     	; 0x81ce <p_etoa+0x104>
    81b6:	20 e0       	ldi	r18, 0x00	; 0
    81b8:	30 e0       	ldi	r19, 0x00	; 0
    81ba:	40 e2       	ldi	r20, 0x20	; 32
    81bc:	51 e4       	ldi	r21, 0x41	; 65
    81be:	c5 01       	movw	r24, r10
    81c0:	b4 01       	movw	r22, r8
    81c2:	0e 94 10 e9 	call	0x1d220	; 0x1d220 <__mulsf3>
    81c6:	4b 01       	movw	r8, r22
    81c8:	5c 01       	movw	r10, r24
    81ca:	28 01       	movw	r4, r16
    81cc:	e7 cf       	rjmp	.-50     	; 0x819c <p_etoa+0xd2>
    81ce:	82 01       	movw	r16, r4
    81d0:	0f 5f       	subi	r16, 0xFF	; 255
    81d2:	1f 4f       	sbci	r17, 0xFF	; 255
    81d4:	20 e0       	ldi	r18, 0x00	; 0
    81d6:	30 e0       	ldi	r19, 0x00	; 0
    81d8:	40 e2       	ldi	r20, 0x20	; 32
    81da:	51 e4       	ldi	r21, 0x41	; 65
    81dc:	c5 01       	movw	r24, r10
    81de:	b4 01       	movw	r22, r8
    81e0:	0e 94 0c e9 	call	0x1d218	; 0x1d218 <__gesf2>
    81e4:	87 fd       	sbrc	r24, 7
    81e6:	0c c0       	rjmp	.+24     	; 0x8200 <p_etoa+0x136>
    81e8:	20 e0       	ldi	r18, 0x00	; 0
    81ea:	30 e0       	ldi	r19, 0x00	; 0
    81ec:	40 e2       	ldi	r20, 0x20	; 32
    81ee:	51 e4       	ldi	r21, 0x41	; 65
    81f0:	c5 01       	movw	r24, r10
    81f2:	b4 01       	movw	r22, r8
    81f4:	0e 94 c1 e7 	call	0x1cf82	; 0x1cf82 <__divsf3>
    81f8:	4b 01       	movw	r8, r22
    81fa:	5c 01       	movw	r10, r24
    81fc:	28 01       	movw	r4, r16
    81fe:	e7 cf       	rjmp	.-50     	; 0x81ce <p_etoa+0x104>
    8200:	a7 01       	movw	r20, r14
    8202:	96 01       	movw	r18, r12
    8204:	c5 01       	movw	r24, r10
    8206:	b4 01       	movw	r22, r8
    8208:	0e 94 59 e7 	call	0x1ceb2	; 0x1ceb2 <__addsf3>
    820c:	4b 01       	movw	r8, r22
    820e:	5c 01       	movw	r10, r24
    8210:	82 01       	movw	r16, r4
    8212:	2f ef       	ldi	r18, 0xFF	; 255
    8214:	42 1a       	sub	r4, r18
    8216:	52 0a       	sbc	r5, r18
    8218:	20 e0       	ldi	r18, 0x00	; 0
    821a:	30 e0       	ldi	r19, 0x00	; 0
    821c:	40 e2       	ldi	r20, 0x20	; 32
    821e:	51 e4       	ldi	r21, 0x41	; 65
    8220:	0e 94 0c e9 	call	0x1d218	; 0x1d218 <__gesf2>
    8224:	87 fd       	sbrc	r24, 7
    8226:	09 c0       	rjmp	.+18     	; 0x823a <p_etoa+0x170>
    8228:	20 e0       	ldi	r18, 0x00	; 0
    822a:	30 e0       	ldi	r19, 0x00	; 0
    822c:	40 e2       	ldi	r20, 0x20	; 32
    822e:	51 e4       	ldi	r21, 0x41	; 65
    8230:	c5 01       	movw	r24, r10
    8232:	b4 01       	movw	r22, r8
    8234:	0e 94 c1 e7 	call	0x1cf82	; 0x1cf82 <__divsf3>
    8238:	e9 cf       	rjmp	.-46     	; 0x820c <p_etoa+0x142>
    823a:	0e 87       	std	Y+14, r16	; 0x0e
    823c:	1f 87       	std	Y+15, r17	; 0x0f
    823e:	85 e6       	ldi	r24, 0x65	; 101
    8240:	89 83       	std	Y+1, r24	; 0x01
    8242:	8e 85       	ldd	r24, Y+14	; 0x0e
    8244:	9f 85       	ldd	r25, Y+15	; 0x0f
    8246:	97 ff       	sbrs	r25, 7
    8248:	08 c0       	rjmp	.+16     	; 0x825a <p_etoa+0x190>
    824a:	91 95       	neg	r25
    824c:	81 95       	neg	r24
    824e:	91 09       	sbc	r25, r1
    8250:	9f 87       	std	Y+15, r25	; 0x0f
    8252:	8e 87       	std	Y+14, r24	; 0x0e
    8254:	8d e2       	ldi	r24, 0x2D	; 45
    8256:	90 e0       	ldi	r25, 0x00	; 0
    8258:	02 c0       	rjmp	.+4      	; 0x825e <p_etoa+0x194>
    825a:	8b e2       	ldi	r24, 0x2B	; 43
    825c:	90 e0       	ldi	r25, 0x00	; 0
    825e:	6c 01       	movw	r12, r24
    8260:	82 e0       	ldi	r24, 0x02	; 2
    8262:	e8 2e       	mov	r14, r24
    8264:	f1 2c       	mov	r15, r1
    8266:	8e 01       	movw	r16, r28
    8268:	02 5f       	subi	r16, 0xF2	; 242
    826a:	1f 4f       	sbci	r17, 0xFF	; 255
    826c:	2a e0       	ldi	r18, 0x0A	; 10
    826e:	30 e0       	ldi	r19, 0x00	; 0
    8270:	42 e0       	ldi	r20, 0x02	; 2
    8272:	50 e0       	ldi	r21, 0x00	; 0
    8274:	65 e0       	ldi	r22, 0x05	; 5
    8276:	70 e0       	ldi	r23, 0x00	; 0
    8278:	ce 01       	movw	r24, r28
    827a:	02 96       	adiw	r24, 0x02	; 2
    827c:	26 dd       	rcall	.-1460   	; 0x7cca <bin2num>
    827e:	9c 01       	movw	r18, r24
    8280:	93 2d       	mov	r25, r3
    8282:	98 72       	andi	r25, 0x28	; 40
    8284:	90 32       	cpi	r25, 0x20	; 32
    8286:	71 f0       	breq	.+28     	; 0x82a4 <p_etoa+0x1da>
    8288:	c5 01       	movw	r24, r10
    828a:	b4 01       	movw	r22, r8
    828c:	0e 94 29 e8 	call	0x1d052	; 0x1d052 <__fixsfsi>
    8290:	6b 01       	movw	r12, r22
    8292:	7c 01       	movw	r14, r24
    8294:	60 e3       	ldi	r22, 0x30	; 48
    8296:	6c 0d       	add	r22, r12
    8298:	ce 01       	movw	r24, r28
    829a:	08 96       	adiw	r24, 0x08	; 8
    829c:	9f dd       	rcall	.-1218   	; 0x7ddc <pch>
    829e:	21 10       	cpse	r2, r1
    82a0:	20 c0       	rjmp	.+64     	; 0x82e2 <p_etoa+0x218>
    82a2:	63 c0       	rjmp	.+198    	; 0x836a <p_etoa+0x2a0>
    82a4:	8a 85       	ldd	r24, Y+10	; 0x0a
    82a6:	9b 85       	ldd	r25, Y+11	; 0x0b
    82a8:	0a 89       	ldd	r16, Y+18	; 0x12
    82aa:	1b 89       	ldd	r17, Y+19	; 0x13
    82ac:	08 1b       	sub	r16, r24
    82ae:	19 0b       	sbc	r17, r25
    82b0:	22 20       	and	r2, r2
    82b2:	41 f0       	breq	.+16     	; 0x82c4 <p_etoa+0x1fa>
    82b4:	61 14       	cp	r6, r1
    82b6:	71 04       	cpc	r7, r1
    82b8:	29 f0       	breq	.+10     	; 0x82c4 <p_etoa+0x1fa>
    82ba:	06 19       	sub	r16, r6
    82bc:	17 09       	sbc	r17, r7
    82be:	06 50       	subi	r16, 0x06	; 6
    82c0:	11 09       	sbc	r17, r1
    82c2:	02 c0       	rjmp	.+4      	; 0x82c8 <p_etoa+0x1fe>
    82c4:	05 50       	subi	r16, 0x05	; 5
    82c6:	11 09       	sbc	r17, r1
    82c8:	24 30       	cpi	r18, 0x04	; 4
    82ca:	31 05       	cpc	r19, r1
    82cc:	14 f0       	brlt	.+4      	; 0x82d2 <p_etoa+0x208>
    82ce:	01 50       	subi	r16, 0x01	; 1
    82d0:	11 09       	sbc	r17, r1
    82d2:	10 16       	cp	r1, r16
    82d4:	11 06       	cpc	r1, r17
    82d6:	c4 f6       	brge	.-80     	; 0x8288 <p_etoa+0x1be>
    82d8:	60 e3       	ldi	r22, 0x30	; 48
    82da:	ce 01       	movw	r24, r28
    82dc:	08 96       	adiw	r24, 0x08	; 8
    82de:	7e dd       	rcall	.-1284   	; 0x7ddc <pch>
    82e0:	f6 cf       	rjmp	.-20     	; 0x82ce <p_etoa+0x204>
    82e2:	61 14       	cp	r6, r1
    82e4:	71 04       	cpc	r7, r1
    82e6:	09 f4       	brne	.+2      	; 0x82ea <p_etoa+0x220>
    82e8:	40 c0       	rjmp	.+128    	; 0x836a <p_etoa+0x2a0>
    82ea:	b6 01       	movw	r22, r12
    82ec:	dd 0c       	add	r13, r13
    82ee:	88 0b       	sbc	r24, r24
    82f0:	99 0b       	sbc	r25, r25
    82f2:	0e 94 5c e8 	call	0x1d0b8	; 0x1d0b8 <__floatsisf>
    82f6:	9b 01       	movw	r18, r22
    82f8:	ac 01       	movw	r20, r24
    82fa:	c5 01       	movw	r24, r10
    82fc:	b4 01       	movw	r22, r8
    82fe:	0e 94 58 e7 	call	0x1ceb0	; 0x1ceb0 <__subsf3>
    8302:	20 e0       	ldi	r18, 0x00	; 0
    8304:	30 e0       	ldi	r19, 0x00	; 0
    8306:	40 e2       	ldi	r20, 0x20	; 32
    8308:	51 e4       	ldi	r21, 0x41	; 65
    830a:	0e 94 10 e9 	call	0x1d220	; 0x1d220 <__mulsf3>
    830e:	4b 01       	movw	r8, r22
    8310:	5c 01       	movw	r10, r24
    8312:	6e e2       	ldi	r22, 0x2E	; 46
    8314:	ce 01       	movw	r24, r28
    8316:	08 96       	adiw	r24, 0x08	; 8
    8318:	61 dd       	rcall	.-1342   	; 0x7ddc <pch>
    831a:	c5 01       	movw	r24, r10
    831c:	b4 01       	movw	r22, r8
    831e:	0e 94 29 e8 	call	0x1d052	; 0x1d052 <__fixsfsi>
    8322:	6b 01       	movw	r12, r22
    8324:	7c 01       	movw	r14, r24
    8326:	07 2e       	mov	r0, r23
    8328:	00 0c       	add	r0, r0
    832a:	88 0b       	sbc	r24, r24
    832c:	99 0b       	sbc	r25, r25
    832e:	0e 94 5c e8 	call	0x1d0b8	; 0x1d0b8 <__floatsisf>
    8332:	9b 01       	movw	r18, r22
    8334:	ac 01       	movw	r20, r24
    8336:	c5 01       	movw	r24, r10
    8338:	b4 01       	movw	r22, r8
    833a:	0e 94 58 e7 	call	0x1ceb0	; 0x1ceb0 <__subsf3>
    833e:	4b 01       	movw	r8, r22
    8340:	5c 01       	movw	r10, r24
    8342:	b6 01       	movw	r22, r12
    8344:	60 5d       	subi	r22, 0xD0	; 208
    8346:	7f 4f       	sbci	r23, 0xFF	; 255
    8348:	ce 01       	movw	r24, r28
    834a:	08 96       	adiw	r24, 0x08	; 8
    834c:	47 dd       	rcall	.-1394   	; 0x7ddc <pch>
    834e:	20 e0       	ldi	r18, 0x00	; 0
    8350:	30 e0       	ldi	r19, 0x00	; 0
    8352:	40 e2       	ldi	r20, 0x20	; 32
    8354:	51 e4       	ldi	r21, 0x41	; 65
    8356:	c5 01       	movw	r24, r10
    8358:	b4 01       	movw	r22, r8
    835a:	0e 94 10 e9 	call	0x1d220	; 0x1d220 <__mulsf3>
    835e:	4b 01       	movw	r8, r22
    8360:	5c 01       	movw	r10, r24
    8362:	31 e0       	ldi	r19, 0x01	; 1
    8364:	63 1a       	sub	r6, r19
    8366:	71 08       	sbc	r7, r1
    8368:	c1 f6       	brne	.-80     	; 0x831a <p_etoa+0x250>
    836a:	8e 01       	movw	r16, r28
    836c:	0f 5f       	subi	r16, 0xFF	; 255
    836e:	1f 4f       	sbci	r17, 0xFF	; 255
    8370:	f8 01       	movw	r30, r16
    8372:	61 91       	ld	r22, Z+
    8374:	8f 01       	movw	r16, r30
    8376:	ce 01       	movw	r24, r28
    8378:	08 96       	adiw	r24, 0x08	; 8
    837a:	66 23       	and	r22, r22
    837c:	11 f0       	breq	.+4      	; 0x8382 <p_etoa+0x2b8>
    837e:	2e dd       	rcall	.-1444   	; 0x7ddc <pch>
    8380:	f7 cf       	rjmp	.-18     	; 0x8370 <p_etoa+0x2a6>
    8382:	2c dd       	rcall	.-1448   	; 0x7ddc <pch>
    8384:	e8 89       	ldd	r30, Y+16	; 0x10
    8386:	f9 89       	ldd	r31, Y+17	; 0x11
    8388:	01 90       	ld	r0, Z+
    838a:	00 20       	and	r0, r0
    838c:	e9 f7       	brne	.-6      	; 0x8388 <p_etoa+0x2be>
    838e:	cf 01       	movw	r24, r30
    8390:	01 97       	sbiw	r24, 0x01	; 1
    8392:	28 89       	ldd	r18, Y+16	; 0x10
    8394:	39 89       	ldd	r19, Y+17	; 0x11
    8396:	82 1b       	sub	r24, r18
    8398:	93 0b       	sbc	r25, r19
    839a:	63 96       	adiw	r28, 0x13	; 19
    839c:	e2 e1       	ldi	r30, 0x12	; 18
    839e:	0c 94 1b e7 	jmp	0x1ce36	; 0x1ce36 <__epilogue_restores__>

000083a2 <_puts_pad>:
    83a2:	a0 e0       	ldi	r26, 0x00	; 0
    83a4:	b0 e0       	ldi	r27, 0x00	; 0
    83a6:	e7 ed       	ldi	r30, 0xD7	; 215
    83a8:	f1 e4       	ldi	r31, 0x41	; 65
    83aa:	0c 94 05 e7 	jmp	0x1ce0a	; 0x1ce0a <__prologue_saves__+0xc>
    83ae:	6c 01       	movw	r12, r24
    83b0:	4b 01       	movw	r8, r22
    83b2:	79 01       	movw	r14, r18
    83b4:	24 17       	cp	r18, r20
    83b6:	35 07       	cpc	r19, r21
    83b8:	24 f4       	brge	.+8      	; 0x83c2 <_puts_pad+0x20>
    83ba:	ea 01       	movw	r28, r20
    83bc:	c2 1b       	sub	r28, r18
    83be:	d3 0b       	sbc	r29, r19
    83c0:	02 c0       	rjmp	.+4      	; 0x83c6 <_puts_pad+0x24>
    83c2:	c0 e0       	ldi	r28, 0x00	; 0
    83c4:	d0 e0       	ldi	r29, 0x00	; 0
    83c6:	01 15       	cp	r16, r1
    83c8:	11 05       	cpc	r17, r1
    83ca:	49 f4       	brne	.+18     	; 0x83de <_puts_pad+0x3c>
    83cc:	21 97       	sbiw	r28, 0x01	; 1
    83ce:	38 f0       	brcs	.+14     	; 0x83de <_puts_pad+0x3c>
    83d0:	d6 01       	movw	r26, r12
    83d2:	ed 91       	ld	r30, X+
    83d4:	fc 91       	ld	r31, X
    83d6:	60 e2       	ldi	r22, 0x20	; 32
    83d8:	c6 01       	movw	r24, r12
    83da:	09 95       	icall
    83dc:	f7 cf       	rjmp	.-18     	; 0x83cc <_puts_pad+0x2a>
    83de:	54 01       	movw	r10, r8
    83e0:	f5 01       	movw	r30, r10
    83e2:	61 91       	ld	r22, Z+
    83e4:	5f 01       	movw	r10, r30
    83e6:	66 23       	and	r22, r22
    83e8:	61 f0       	breq	.+24     	; 0x8402 <_puts_pad+0x60>
    83ea:	e1 14       	cp	r14, r1
    83ec:	f1 04       	cpc	r15, r1
    83ee:	49 f0       	breq	.+18     	; 0x8402 <_puts_pad+0x60>
    83f0:	d6 01       	movw	r26, r12
    83f2:	ed 91       	ld	r30, X+
    83f4:	fc 91       	ld	r31, X
    83f6:	c6 01       	movw	r24, r12
    83f8:	09 95       	icall
    83fa:	b1 e0       	ldi	r27, 0x01	; 1
    83fc:	eb 1a       	sub	r14, r27
    83fe:	f1 08       	sbc	r15, r1
    8400:	ef cf       	rjmp	.-34     	; 0x83e0 <_puts_pad+0x3e>
    8402:	01 15       	cp	r16, r1
    8404:	11 05       	cpc	r17, r1
    8406:	51 f0       	breq	.+20     	; 0x841c <_puts_pad+0x7a>
    8408:	20 97       	sbiw	r28, 0x00	; 0
    840a:	41 f0       	breq	.+16     	; 0x841c <_puts_pad+0x7a>
    840c:	d6 01       	movw	r26, r12
    840e:	ed 91       	ld	r30, X+
    8410:	fc 91       	ld	r31, X
    8412:	60 e2       	ldi	r22, 0x20	; 32
    8414:	c6 01       	movw	r24, r12
    8416:	09 95       	icall
    8418:	21 97       	sbiw	r28, 0x01	; 1
    841a:	f6 cf       	rjmp	.-20     	; 0x8408 <_puts_pad+0x66>
    841c:	cd b7       	in	r28, 0x3d	; 61
    841e:	de b7       	in	r29, 0x3e	; 62
    8420:	ec e0       	ldi	r30, 0x0C	; 12
    8422:	0c 94 21 e7 	jmp	0x1ce42	; 0x1ce42 <__epilogue_restores__+0xc>

00008426 <_puts_pad_X>:
    8426:	2f 92       	push	r2
    8428:	3f 92       	push	r3
    842a:	4f 92       	push	r4
    842c:	6f 92       	push	r6
    842e:	7f 92       	push	r7
    8430:	8f 92       	push	r8
    8432:	cf 92       	push	r12
    8434:	df 92       	push	r13
    8436:	ef 92       	push	r14
    8438:	ff 92       	push	r15
    843a:	0f 93       	push	r16
    843c:	1f 93       	push	r17
    843e:	cf 93       	push	r28
    8440:	df 93       	push	r29
    8442:	6c 01       	movw	r12, r24
    8444:	3a 01       	movw	r6, r20
    8446:	86 2e       	mov	r8, r22
    8448:	02 17       	cp	r16, r18
    844a:	13 07       	cpc	r17, r19
    844c:	24 f4       	brge	.+8      	; 0x8456 <_puts_pad_X+0x30>
    844e:	e9 01       	movw	r28, r18
    8450:	c0 1b       	sub	r28, r16
    8452:	d1 0b       	sbc	r29, r17
    8454:	02 c0       	rjmp	.+4      	; 0x845a <_puts_pad_X+0x34>
    8456:	c0 e0       	ldi	r28, 0x00	; 0
    8458:	d0 e0       	ldi	r29, 0x00	; 0
    845a:	e1 14       	cp	r14, r1
    845c:	f1 04       	cpc	r15, r1
    845e:	49 f4       	brne	.+18     	; 0x8472 <_puts_pad_X+0x4c>
    8460:	21 97       	sbiw	r28, 0x01	; 1
    8462:	38 f0       	brcs	.+14     	; 0x8472 <_puts_pad_X+0x4c>
    8464:	d6 01       	movw	r26, r12
    8466:	ed 91       	ld	r30, X+
    8468:	fc 91       	ld	r31, X
    846a:	60 e2       	ldi	r22, 0x20	; 32
    846c:	c6 01       	movw	r24, r12
    846e:	09 95       	icall
    8470:	f7 cf       	rjmp	.-18     	; 0x8460 <_puts_pad_X+0x3a>
    8472:	13 01       	movw	r2, r6
    8474:	48 2c       	mov	r4, r8
    8476:	20 0e       	add	r2, r16
    8478:	31 1e       	adc	r3, r17
    847a:	41 1c       	adc	r4, r1
    847c:	17 fd       	sbrc	r17, 7
    847e:	4a 94       	dec	r4
    8480:	f3 01       	movw	r30, r6
    8482:	58 2d       	mov	r21, r8
    8484:	0e 94 36 e7 	call	0x1ce6c	; 0x1ce6c <__xload_1>
    8488:	66 23       	and	r22, r22
    848a:	71 f0       	breq	.+28     	; 0x84a8 <_puts_pad_X+0x82>
    848c:	62 14       	cp	r6, r2
    848e:	73 04       	cpc	r7, r3
    8490:	84 04       	cpc	r8, r4
    8492:	51 f0       	breq	.+20     	; 0x84a8 <_puts_pad_X+0x82>
    8494:	d6 01       	movw	r26, r12
    8496:	ed 91       	ld	r30, X+
    8498:	fc 91       	ld	r31, X
    849a:	c6 01       	movw	r24, r12
    849c:	09 95       	icall
    849e:	bf ef       	ldi	r27, 0xFF	; 255
    84a0:	6b 1a       	sub	r6, r27
    84a2:	7b 0a       	sbc	r7, r27
    84a4:	8b 0a       	sbc	r8, r27
    84a6:	ec cf       	rjmp	.-40     	; 0x8480 <_puts_pad_X+0x5a>
    84a8:	ef 28       	or	r14, r15
    84aa:	51 f0       	breq	.+20     	; 0x84c0 <_puts_pad_X+0x9a>
    84ac:	20 97       	sbiw	r28, 0x00	; 0
    84ae:	41 f0       	breq	.+16     	; 0x84c0 <_puts_pad_X+0x9a>
    84b0:	d6 01       	movw	r26, r12
    84b2:	ed 91       	ld	r30, X+
    84b4:	fc 91       	ld	r31, X
    84b6:	60 e2       	ldi	r22, 0x20	; 32
    84b8:	c6 01       	movw	r24, r12
    84ba:	09 95       	icall
    84bc:	21 97       	sbiw	r28, 0x01	; 1
    84be:	f6 cf       	rjmp	.-20     	; 0x84ac <_puts_pad_X+0x86>
    84c0:	df 91       	pop	r29
    84c2:	cf 91       	pop	r28
    84c4:	1f 91       	pop	r17
    84c6:	0f 91       	pop	r16
    84c8:	ff 90       	pop	r15
    84ca:	ef 90       	pop	r14
    84cc:	df 90       	pop	r13
    84ce:	cf 90       	pop	r12
    84d0:	8f 90       	pop	r8
    84d2:	7f 90       	pop	r7
    84d4:	6f 90       	pop	r6
    84d6:	4f 90       	pop	r4
    84d8:	3f 90       	pop	r3
    84da:	2f 90       	pop	r2
    84dc:	08 95       	ret

000084de <strlen_X>:
    84de:	cf 92       	push	r12
    84e0:	df 92       	push	r13
    84e2:	ef 92       	push	r14
    84e4:	9b 01       	movw	r18, r22
    84e6:	48 2f       	mov	r20, r24
    84e8:	80 e0       	ldi	r24, 0x00	; 0
    84ea:	90 e0       	ldi	r25, 0x00	; 0
    84ec:	2f 5f       	subi	r18, 0xFF	; 255
    84ee:	3f 4f       	sbci	r19, 0xFF	; 255
    84f0:	4f 4f       	sbci	r20, 0xFF	; 255
    84f2:	69 01       	movw	r12, r18
    84f4:	e4 2e       	mov	r14, r20
    84f6:	51 e0       	ldi	r21, 0x01	; 1
    84f8:	c5 1a       	sub	r12, r21
    84fa:	d1 08       	sbc	r13, r1
    84fc:	e1 08       	sbc	r14, r1
    84fe:	f6 01       	movw	r30, r12
    8500:	5e 2d       	mov	r21, r14
    8502:	0e 94 36 e7 	call	0x1ce6c	; 0x1ce6c <__xload_1>
    8506:	66 23       	and	r22, r22
    8508:	11 f0       	breq	.+4      	; 0x850e <strlen_X+0x30>
    850a:	01 96       	adiw	r24, 0x01	; 1
    850c:	ef cf       	rjmp	.-34     	; 0x84ec <strlen_X+0xe>
    850e:	ef 90       	pop	r14
    8510:	df 90       	pop	r13
    8512:	cf 90       	pop	r12
    8514:	08 95       	ret

00008516 <_printf_fn>:
    8516:	ae e6       	ldi	r26, 0x6E	; 110
    8518:	b0 e0       	ldi	r27, 0x00	; 0
    851a:	e1 e9       	ldi	r30, 0x91	; 145
    851c:	f2 e4       	ldi	r31, 0x42	; 66
    851e:	0c 94 ff e6 	jmp	0x1cdfe	; 0x1cdfe <__prologue_saves__>
    8522:	a5 96       	adiw	r28, 0x25	; 37
    8524:	9f af       	std	Y+63, r25	; 0x3f
    8526:	8e af       	std	Y+62, r24	; 0x3e
    8528:	a5 97       	sbiw	r28, 0x25	; 37
    852a:	6a 01       	movw	r12, r20
    852c:	e6 2e       	mov	r14, r22
    852e:	19 01       	movw	r2, r18
    8530:	a9 96       	adiw	r28, 0x29	; 41
    8532:	1c ae       	std	Y+60, r1	; 0x3c
    8534:	1d ae       	std	Y+61, r1	; 0x3d
    8536:	1e ae       	std	Y+62, r1	; 0x3e
    8538:	1f ae       	std	Y+63, r1	; 0x3f
    853a:	a9 97       	sbiw	r28, 0x29	; 41
    853c:	8a e1       	ldi	r24, 0x1A	; 26
    853e:	94 e0       	ldi	r25, 0x04	; 4
    8540:	9c 01       	movw	r18, r24
    8542:	40 e8       	ldi	r20, 0x80	; 128
    8544:	ae 96       	adiw	r28, 0x2e	; 46
    8546:	2d af       	std	Y+61, r18	; 0x3d
    8548:	3e af       	std	Y+62, r19	; 0x3e
    854a:	4f af       	std	Y+63, r20	; 0x3f
    854c:	ae 97       	sbiw	r28, 0x2e	; 46
    854e:	ae 01       	movw	r20, r28
    8550:	4f 5a       	subi	r20, 0xAF	; 175
    8552:	5f 4f       	sbci	r21, 0xFF	; 255
    8554:	67 96       	adiw	r28, 0x17	; 23
    8556:	5f af       	std	Y+63, r21	; 0x3f
    8558:	4e af       	std	Y+62, r20	; 0x3e
    855a:	67 97       	sbiw	r28, 0x17	; 23
    855c:	ce 01       	movw	r24, r28
    855e:	8d 5b       	subi	r24, 0xBD	; 189
    8560:	9f 4f       	sbci	r25, 0xFF	; 255
    8562:	69 96       	adiw	r28, 0x19	; 25
    8564:	9f af       	std	Y+63, r25	; 0x3f
    8566:	8e af       	std	Y+62, r24	; 0x3e
    8568:	69 97       	sbiw	r28, 0x19	; 25
    856a:	de 01       	movw	r26, r28
    856c:	a5 5b       	subi	r26, 0xB5	; 181
    856e:	bf 4f       	sbci	r27, 0xFF	; 255
    8570:	6b 96       	adiw	r28, 0x1b	; 27
    8572:	bf af       	std	Y+63, r27	; 0x3f
    8574:	ae af       	std	Y+62, r26	; 0x3e
    8576:	6b 97       	sbiw	r28, 0x1b	; 27
    8578:	fe 01       	movw	r30, r28
    857a:	ed 5a       	subi	r30, 0xAD	; 173
    857c:	ff 4f       	sbci	r31, 0xFF	; 255
    857e:	6d 96       	adiw	r28, 0x1d	; 29
    8580:	ff af       	std	Y+63, r31	; 0x3f
    8582:	ee af       	std	Y+62, r30	; 0x3e
    8584:	6d 97       	sbiw	r28, 0x1d	; 29
    8586:	f6 01       	movw	r30, r12
    8588:	5e 2d       	mov	r21, r14
    858a:	0e 94 36 e7 	call	0x1ce6c	; 0x1ce6c <__xload_1>
    858e:	66 23       	and	r22, r22
    8590:	09 f4       	brne	.+2      	; 0x8594 <_printf_fn+0x7e>
    8592:	13 c4       	rjmp	.+2086   	; 0x8dba <_printf_fn+0x8a4>
    8594:	ae 2d       	mov	r26, r14
    8596:	c6 01       	movw	r24, r12
    8598:	01 96       	adiw	r24, 0x01	; 1
    859a:	a1 1d       	adc	r26, r1
    859c:	3c 01       	movw	r6, r24
    859e:	8a 2e       	mov	r8, r26
    85a0:	65 32       	cpi	r22, 0x25	; 37
    85a2:	51 f0       	breq	.+20     	; 0x85b8 <_printf_fn+0xa2>
    85a4:	a5 96       	adiw	r28, 0x25	; 37
    85a6:	ae ad       	ldd	r26, Y+62	; 0x3e
    85a8:	bf ad       	ldd	r27, Y+63	; 0x3f
    85aa:	a5 97       	sbiw	r28, 0x25	; 37
    85ac:	ed 91       	ld	r30, X+
    85ae:	fc 91       	ld	r31, X
    85b0:	11 97       	sbiw	r26, 0x01	; 1
    85b2:	cd 01       	movw	r24, r26
    85b4:	09 95       	icall
    85b6:	d5 c3       	rjmp	.+1962   	; 0x8d62 <_printf_fn+0x84c>
    85b8:	91 2c       	mov	r9, r1
    85ba:	f3 01       	movw	r30, r6
    85bc:	58 2d       	mov	r21, r8
    85be:	0e 94 36 e7 	call	0x1ce6c	; 0x1ce6c <__xload_1>
    85c2:	63 32       	cpi	r22, 0x23	; 35
    85c4:	19 f4       	brne	.+6      	; 0x85cc <_printf_fn+0xb6>
    85c6:	68 94       	set
    85c8:	97 f8       	bld	r9, 7
    85ca:	04 c0       	rjmp	.+8      	; 0x85d4 <_printf_fn+0xbe>
    85cc:	6b 32       	cpi	r22, 0x2B	; 43
    85ce:	39 f4       	brne	.+14     	; 0x85de <_printf_fn+0xc8>
    85d0:	68 94       	set
    85d2:	92 f8       	bld	r9, 2
    85d4:	bf ef       	ldi	r27, 0xFF	; 255
    85d6:	6b 1a       	sub	r6, r27
    85d8:	7b 0a       	sbc	r7, r27
    85da:	8b 0a       	sbc	r8, r27
    85dc:	ee cf       	rjmp	.-36     	; 0x85ba <_printf_fn+0xa4>
    85de:	6d 32       	cpi	r22, 0x2D	; 45
    85e0:	a9 f4       	brne	.+42     	; 0x860c <_printf_fn+0xf6>
    85e2:	93 fc       	sbrc	r9, 3
    85e4:	05 c0       	rjmp	.+10     	; 0x85f0 <_printf_fn+0xda>
    85e6:	6d 32       	cpi	r22, 0x2D	; 45
    85e8:	19 f4       	brne	.+6      	; 0x85f0 <_printf_fn+0xda>
    85ea:	68 94       	set
    85ec:	93 f8       	bld	r9, 3
    85ee:	f2 cf       	rjmp	.-28     	; 0x85d4 <_printf_fn+0xbe>
    85f0:	94 fc       	sbrc	r9, 4
    85f2:	05 c0       	rjmp	.+10     	; 0x85fe <_printf_fn+0xe8>
    85f4:	60 32       	cpi	r22, 0x20	; 32
    85f6:	19 f4       	brne	.+6      	; 0x85fe <_printf_fn+0xe8>
    85f8:	68 94       	set
    85fa:	94 f8       	bld	r9, 4
    85fc:	eb cf       	rjmp	.-42     	; 0x85d4 <_printf_fn+0xbe>
    85fe:	95 fc       	sbrc	r9, 5
    8600:	e9 cf       	rjmp	.-46     	; 0x85d4 <_printf_fn+0xbe>
    8602:	60 33       	cpi	r22, 0x30	; 48
    8604:	39 f7       	brne	.-50     	; 0x85d4 <_printf_fn+0xbe>
    8606:	68 94       	set
    8608:	95 f8       	bld	r9, 5
    860a:	e4 cf       	rjmp	.-56     	; 0x85d4 <_printf_fn+0xbe>
    860c:	86 2f       	mov	r24, r22
    860e:	8f 7e       	andi	r24, 0xEF	; 239
    8610:	80 32       	cpi	r24, 0x20	; 32
    8612:	39 f3       	breq	.-50     	; 0x85e2 <_printf_fn+0xcc>
    8614:	70 e0       	ldi	r23, 0x00	; 0
    8616:	60 53       	subi	r22, 0x30	; 48
    8618:	71 09       	sbc	r23, r1
    861a:	6f 96       	adiw	r28, 0x1f	; 31
    861c:	1f ae       	std	Y+63, r1	; 0x3f
    861e:	1e ae       	std	Y+62, r1	; 0x3e
    8620:	6f 97       	sbiw	r28, 0x1f	; 31
    8622:	6a 30       	cpi	r22, 0x0A	; 10
    8624:	71 05       	cpc	r23, r1
    8626:	10 f5       	brcc	.+68     	; 0x866c <_printf_fn+0x156>
    8628:	2a e0       	ldi	r18, 0x0A	; 10
    862a:	f3 01       	movw	r30, r6
    862c:	58 2d       	mov	r21, r8
    862e:	0e 94 36 e7 	call	0x1ce6c	; 0x1ce6c <__xload_1>
    8632:	70 e0       	ldi	r23, 0x00	; 0
    8634:	cb 01       	movw	r24, r22
    8636:	c0 97       	sbiw	r24, 0x30	; 48
    8638:	0a 97       	sbiw	r24, 0x0a	; 10
    863a:	b0 f4       	brcc	.+44     	; 0x8668 <_printf_fn+0x152>
    863c:	ef ef       	ldi	r30, 0xFF	; 255
    863e:	6e 1a       	sub	r6, r30
    8640:	7e 0a       	sbc	r7, r30
    8642:	8e 0a       	sbc	r8, r30
    8644:	6f 96       	adiw	r28, 0x1f	; 31
    8646:	4e ad       	ldd	r20, Y+62	; 0x3e
    8648:	5f ad       	ldd	r21, Y+63	; 0x3f
    864a:	6f 97       	sbiw	r28, 0x1f	; 31
    864c:	24 9f       	mul	r18, r20
    864e:	c0 01       	movw	r24, r0
    8650:	25 9f       	mul	r18, r21
    8652:	90 0d       	add	r25, r0
    8654:	11 24       	eor	r1, r1
    8656:	68 0f       	add	r22, r24
    8658:	79 1f       	adc	r23, r25
    865a:	cb 01       	movw	r24, r22
    865c:	c0 97       	sbiw	r24, 0x30	; 48
    865e:	6f 96       	adiw	r28, 0x1f	; 31
    8660:	9f af       	std	Y+63, r25	; 0x3f
    8662:	8e af       	std	Y+62, r24	; 0x3e
    8664:	6f 97       	sbiw	r28, 0x1f	; 31
    8666:	e1 cf       	rjmp	.-62     	; 0x862a <_printf_fn+0x114>
    8668:	68 94       	set
    866a:	90 f8       	bld	r9, 0
    866c:	f3 01       	movw	r30, r6
    866e:	58 2d       	mov	r21, r8
    8670:	0e 94 36 e7 	call	0x1ce6c	; 0x1ce6c <__xload_1>
    8674:	6e 32       	cpi	r22, 0x2E	; 46
    8676:	61 f5       	brne	.+88     	; 0x86d0 <_printf_fn+0x1ba>
    8678:	9f ef       	ldi	r25, 0xFF	; 255
    867a:	69 1a       	sub	r6, r25
    867c:	79 0a       	sbc	r7, r25
    867e:	89 0a       	sbc	r8, r25
    8680:	a1 96       	adiw	r28, 0x21	; 33
    8682:	1f ae       	std	Y+63, r1	; 0x3f
    8684:	1e ae       	std	Y+62, r1	; 0x3e
    8686:	a1 97       	sbiw	r28, 0x21	; 33
    8688:	2a e0       	ldi	r18, 0x0A	; 10
    868a:	f3 01       	movw	r30, r6
    868c:	58 2d       	mov	r21, r8
    868e:	0e 94 36 e7 	call	0x1ce6c	; 0x1ce6c <__xload_1>
    8692:	70 e0       	ldi	r23, 0x00	; 0
    8694:	cb 01       	movw	r24, r22
    8696:	c0 97       	sbiw	r24, 0x30	; 48
    8698:	0a 97       	sbiw	r24, 0x0a	; 10
    869a:	b8 f4       	brcc	.+46     	; 0x86ca <_printf_fn+0x1b4>
    869c:	af ef       	ldi	r26, 0xFF	; 255
    869e:	6a 1a       	sub	r6, r26
    86a0:	7a 0a       	sbc	r7, r26
    86a2:	8a 0a       	sbc	r8, r26
    86a4:	a1 96       	adiw	r28, 0x21	; 33
    86a6:	ee ad       	ldd	r30, Y+62	; 0x3e
    86a8:	ff ad       	ldd	r31, Y+63	; 0x3f
    86aa:	a1 97       	sbiw	r28, 0x21	; 33
    86ac:	2e 9f       	mul	r18, r30
    86ae:	c0 01       	movw	r24, r0
    86b0:	2f 9f       	mul	r18, r31
    86b2:	90 0d       	add	r25, r0
    86b4:	11 24       	eor	r1, r1
    86b6:	68 0f       	add	r22, r24
    86b8:	79 1f       	adc	r23, r25
    86ba:	ab 01       	movw	r20, r22
    86bc:	40 53       	subi	r20, 0x30	; 48
    86be:	51 09       	sbc	r21, r1
    86c0:	a1 96       	adiw	r28, 0x21	; 33
    86c2:	5f af       	std	Y+63, r21	; 0x3f
    86c4:	4e af       	std	Y+62, r20	; 0x3e
    86c6:	a1 97       	sbiw	r28, 0x21	; 33
    86c8:	e0 cf       	rjmp	.-64     	; 0x868a <_printf_fn+0x174>
    86ca:	68 94       	set
    86cc:	91 f8       	bld	r9, 1
    86ce:	04 c0       	rjmp	.+8      	; 0x86d8 <_printf_fn+0x1c2>
    86d0:	a1 96       	adiw	r28, 0x21	; 33
    86d2:	1f ae       	std	Y+63, r1	; 0x3f
    86d4:	1e ae       	std	Y+62, r1	; 0x3e
    86d6:	a1 97       	sbiw	r28, 0x21	; 33
    86d8:	f3 01       	movw	r30, r6
    86da:	58 2d       	mov	r21, r8
    86dc:	0e 94 36 e7 	call	0x1ce6c	; 0x1ce6c <__xload_1>
    86e0:	69 34       	cpi	r22, 0x49	; 73
    86e2:	91 f5       	brne	.+100    	; 0x8748 <_printf_fn+0x232>
    86e4:	5f ef       	ldi	r21, 0xFF	; 255
    86e6:	65 1a       	sub	r6, r21
    86e8:	75 0a       	sbc	r7, r21
    86ea:	85 0a       	sbc	r8, r21
    86ec:	41 2c       	mov	r4, r1
    86ee:	51 2c       	mov	r5, r1
    86f0:	2a e0       	ldi	r18, 0x0A	; 10
    86f2:	f3 01       	movw	r30, r6
    86f4:	58 2d       	mov	r21, r8
    86f6:	0e 94 36 e7 	call	0x1ce6c	; 0x1ce6c <__xload_1>
    86fa:	70 e0       	ldi	r23, 0x00	; 0
    86fc:	cb 01       	movw	r24, r22
    86fe:	c0 97       	sbiw	r24, 0x30	; 48
    8700:	0a 97       	sbiw	r24, 0x0a	; 10
    8702:	80 f4       	brcc	.+32     	; 0x8724 <_printf_fn+0x20e>
    8704:	8f ef       	ldi	r24, 0xFF	; 255
    8706:	68 1a       	sub	r6, r24
    8708:	78 0a       	sbc	r7, r24
    870a:	88 0a       	sbc	r8, r24
    870c:	24 9d       	mul	r18, r4
    870e:	c0 01       	movw	r24, r0
    8710:	25 9d       	mul	r18, r5
    8712:	90 0d       	add	r25, r0
    8714:	11 24       	eor	r1, r1
    8716:	68 0f       	add	r22, r24
    8718:	79 1f       	adc	r23, r25
    871a:	2b 01       	movw	r4, r22
    871c:	90 e3       	ldi	r25, 0x30	; 48
    871e:	49 1a       	sub	r4, r25
    8720:	51 08       	sbc	r5, r1
    8722:	e7 cf       	rjmp	.-50     	; 0x86f2 <_printf_fn+0x1dc>
    8724:	41 14       	cp	r4, r1
    8726:	51 04       	cpc	r5, r1
    8728:	09 f4       	brne	.+2      	; 0x872c <_printf_fn+0x216>
    872a:	40 c0       	rjmp	.+128    	; 0x87ac <_printf_fn+0x296>
    872c:	c2 01       	movw	r24, r4
    872e:	87 70       	andi	r24, 0x07	; 7
    8730:	99 27       	eor	r25, r25
    8732:	89 2b       	or	r24, r25
    8734:	c9 f5       	brne	.+114    	; 0x87a8 <_printf_fn+0x292>
    8736:	63 e0       	ldi	r22, 0x03	; 3
    8738:	55 94       	asr	r5
    873a:	47 94       	ror	r4
    873c:	6a 95       	dec	r22
    873e:	e1 f7       	brne	.-8      	; 0x8738 <_printf_fn+0x222>
    8740:	41 14       	cp	r4, r1
    8742:	51 04       	cpc	r5, r1
    8744:	99 f1       	breq	.+102    	; 0x87ac <_printf_fn+0x296>
    8746:	21 c0       	rjmp	.+66     	; 0x878a <_printf_fn+0x274>
    8748:	68 36       	cpi	r22, 0x68	; 104
    874a:	29 f4       	brne	.+10     	; 0x8756 <_printf_fn+0x240>
    874c:	af ef       	ldi	r26, 0xFF	; 255
    874e:	6a 1a       	sub	r6, r26
    8750:	7a 0a       	sbc	r7, r26
    8752:	8a 0a       	sbc	r8, r26
    8754:	09 c3       	rjmp	.+1554   	; 0x8d68 <_printf_fn+0x852>
    8756:	6c 36       	cpi	r22, 0x6C	; 108
    8758:	09 f0       	breq	.+2      	; 0x875c <_printf_fn+0x246>
    875a:	06 c3       	rjmp	.+1548   	; 0x8d68 <_printf_fn+0x852>
    875c:	a8 2d       	mov	r26, r8
    875e:	c3 01       	movw	r24, r6
    8760:	01 96       	adiw	r24, 0x01	; 1
    8762:	a1 1d       	adc	r26, r1
    8764:	fc 01       	movw	r30, r24
    8766:	5a 2f       	mov	r21, r26
    8768:	0e 94 36 e7 	call	0x1ce6c	; 0x1ce6c <__xload_1>
    876c:	6c 36       	cpi	r22, 0x6C	; 108
    876e:	31 f0       	breq	.+12     	; 0x877c <_printf_fn+0x266>
    8770:	3c 01       	movw	r6, r24
    8772:	8a 2e       	mov	r8, r26
    8774:	54 e0       	ldi	r21, 0x04	; 4
    8776:	45 2e       	mov	r4, r21
    8778:	51 2c       	mov	r5, r1
    877a:	07 c0       	rjmp	.+14     	; 0x878a <_printf_fn+0x274>
    877c:	b2 e0       	ldi	r27, 0x02	; 2
    877e:	6b 0e       	add	r6, r27
    8780:	71 1c       	adc	r7, r1
    8782:	81 1c       	adc	r8, r1
    8784:	48 e0       	ldi	r20, 0x08	; 8
    8786:	44 2e       	mov	r4, r20
    8788:	51 2c       	mov	r5, r1
    878a:	f3 01       	movw	r30, r6
    878c:	58 2d       	mov	r21, r8
    878e:	0e 94 36 e7 	call	0x1ce6c	; 0x1ce6c <__xload_1>
    8792:	e6 2f       	mov	r30, r22
    8794:	f0 e0       	ldi	r31, 0x00	; 0
    8796:	a3 96       	adiw	r28, 0x23	; 35
    8798:	ff af       	std	Y+63, r31	; 0x3f
    879a:	ee af       	std	Y+62, r30	; 0x3e
    879c:	a3 97       	sbiw	r28, 0x23	; 35
    879e:	e4 36       	cpi	r30, 0x64	; 100
    87a0:	f1 05       	cpc	r31, r1
    87a2:	09 f4       	brne	.+2      	; 0x87a6 <_printf_fn+0x290>
    87a4:	e5 c2       	rjmp	.+1482   	; 0x8d70 <_printf_fn+0x85a>
    87a6:	06 c0       	rjmp	.+12     	; 0x87b4 <_printf_fn+0x29e>
    87a8:	41 2c       	mov	r4, r1
    87aa:	51 2c       	mov	r5, r1
    87ac:	a3 96       	adiw	r28, 0x23	; 35
    87ae:	1f ae       	std	Y+63, r1	; 0x3f
    87b0:	1e ae       	std	Y+62, r1	; 0x3e
    87b2:	a3 97       	sbiw	r28, 0x23	; 35
    87b4:	31 e0       	ldi	r19, 0x01	; 1
    87b6:	20 e0       	ldi	r18, 0x00	; 0
    87b8:	a3 96       	adiw	r28, 0x23	; 35
    87ba:	4e ad       	ldd	r20, Y+62	; 0x3e
    87bc:	5f ad       	ldd	r21, Y+63	; 0x3f
    87be:	a3 97       	sbiw	r28, 0x23	; 35
    87c0:	44 34       	cpi	r20, 0x44	; 68
    87c2:	51 05       	cpc	r21, r1
    87c4:	09 f0       	breq	.+2      	; 0x87c8 <_printf_fn+0x2b2>
    87c6:	30 e0       	ldi	r19, 0x00	; 0
    87c8:	83 2f       	mov	r24, r19
    87ca:	92 2f       	mov	r25, r18
    87cc:	a3 96       	adiw	r28, 0x23	; 35
    87ce:	ee ad       	ldd	r30, Y+62	; 0x3e
    87d0:	ff ad       	ldd	r31, Y+63	; 0x3f
    87d2:	a3 97       	sbiw	r28, 0x23	; 35
    87d4:	e2 54       	subi	r30, 0x42	; 66
    87d6:	f1 09       	sbc	r31, r1
    87d8:	e7 33       	cpi	r30, 0x37	; 55
    87da:	f1 05       	cpc	r31, r1
    87dc:	08 f0       	brcs	.+2      	; 0x87e0 <_printf_fn+0x2ca>
    87de:	57 c1       	rjmp	.+686    	; 0x8a8e <_printf_fn+0x578>
    87e0:	ea 5b       	subi	r30, 0xBA	; 186
    87e2:	ff 4f       	sbci	r31, 0xFF	; 255
    87e4:	0c 94 d0 e6 	jmp	0x1cda0	; 0x1cda0 <__tablejump2__>
    87e8:	32 e0       	ldi	r19, 0x02	; 2
    87ea:	43 2e       	mov	r4, r19
    87ec:	51 2c       	mov	r5, r1
    87ee:	29 2d       	mov	r18, r9
    87f0:	28 72       	andi	r18, 0x28	; 40
    87f2:	28 32       	cpi	r18, 0x28	; 40
    87f4:	11 f4       	brne	.+4      	; 0x87fa <_printf_fn+0x2e4>
    87f6:	e8 94       	clt
    87f8:	95 f8       	bld	r9, 5
    87fa:	29 2d       	mov	r18, r9
    87fc:	22 72       	andi	r18, 0x22	; 34
    87fe:	22 32       	cpi	r18, 0x22	; 34
    8800:	11 f4       	brne	.+4      	; 0x8806 <_printf_fn+0x2f0>
    8802:	e8 94       	clt
    8804:	95 f8       	bld	r9, 5
    8806:	29 2d       	mov	r18, r9
    8808:	21 72       	andi	r18, 0x21	; 33
    880a:	21 32       	cpi	r18, 0x21	; 33
    880c:	79 f4       	brne	.+30     	; 0x882c <_printf_fn+0x316>
    880e:	a1 96       	adiw	r28, 0x21	; 33
    8810:	ae ad       	ldd	r26, Y+62	; 0x3e
    8812:	bf ad       	ldd	r27, Y+63	; 0x3f
    8814:	a1 97       	sbiw	r28, 0x21	; 33
    8816:	6f 96       	adiw	r28, 0x1f	; 31
    8818:	ee ad       	ldd	r30, Y+62	; 0x3e
    881a:	ff ad       	ldd	r31, Y+63	; 0x3f
    881c:	6f 97       	sbiw	r28, 0x1f	; 31
    881e:	ae 17       	cp	r26, r30
    8820:	bf 07       	cpc	r27, r31
    8822:	24 f4       	brge	.+8      	; 0x882c <_printf_fn+0x316>
    8824:	a1 96       	adiw	r28, 0x21	; 33
    8826:	ff af       	std	Y+63, r31	; 0x3f
    8828:	ee af       	std	Y+62, r30	; 0x3e
    882a:	a1 97       	sbiw	r28, 0x21	; 33
    882c:	29 2d       	mov	r18, r9
    882e:	23 72       	andi	r18, 0x23	; 35
    8830:	23 32       	cpi	r18, 0x23	; 35
    8832:	79 f4       	brne	.+30     	; 0x8852 <_printf_fn+0x33c>
    8834:	a1 96       	adiw	r28, 0x21	; 33
    8836:	2e ad       	ldd	r18, Y+62	; 0x3e
    8838:	3f ad       	ldd	r19, Y+63	; 0x3f
    883a:	a1 97       	sbiw	r28, 0x21	; 33
    883c:	6f 96       	adiw	r28, 0x1f	; 31
    883e:	4e ad       	ldd	r20, Y+62	; 0x3e
    8840:	5f ad       	ldd	r21, Y+63	; 0x3f
    8842:	6f 97       	sbiw	r28, 0x1f	; 31
    8844:	24 17       	cp	r18, r20
    8846:	35 07       	cpc	r19, r21
    8848:	24 f4       	brge	.+8      	; 0x8852 <_printf_fn+0x33c>
    884a:	a1 96       	adiw	r28, 0x21	; 33
    884c:	5f af       	std	Y+63, r21	; 0x3f
    884e:	4e af       	std	Y+62, r20	; 0x3e
    8850:	a1 97       	sbiw	r28, 0x21	; 33
    8852:	e8 94       	clt
    8854:	94 f8       	bld	r9, 4
    8856:	e8 94       	clt
    8858:	92 f8       	bld	r9, 2
    885a:	e8 94       	clt
    885c:	96 f8       	bld	r9, 6
    885e:	52 e0       	ldi	r21, 0x02	; 2
    8860:	45 16       	cp	r4, r21
    8862:	51 04       	cpc	r5, r1
    8864:	f9 f4       	brne	.+62     	; 0x88a4 <_printf_fn+0x38e>
    8866:	51 01       	movw	r10, r2
    8868:	82 e0       	ldi	r24, 0x02	; 2
    886a:	a8 0e       	add	r10, r24
    886c:	b1 1c       	adc	r11, r1
    886e:	d1 01       	movw	r26, r2
    8870:	8d 91       	ld	r24, X+
    8872:	9c 91       	ld	r25, X
    8874:	65 96       	adiw	r28, 0x15	; 21
    8876:	9f af       	std	Y+63, r25	; 0x3f
    8878:	8e af       	std	Y+62, r24	; 0x3e
    887a:	65 97       	sbiw	r28, 0x15	; 21
    887c:	a3 96       	adiw	r28, 0x23	; 35
    887e:	ee ad       	ldd	r30, Y+62	; 0x3e
    8880:	ff ad       	ldd	r31, Y+63	; 0x3f
    8882:	a3 97       	sbiw	r28, 0x23	; 35
    8884:	e4 34       	cpi	r30, 0x44	; 68
    8886:	f1 05       	cpc	r31, r1
    8888:	09 f0       	breq	.+2      	; 0x888c <_printf_fn+0x376>
    888a:	ac c0       	rjmp	.+344    	; 0x89e4 <_printf_fn+0x4ce>
    888c:	97 ff       	sbrs	r25, 7
    888e:	a7 c0       	rjmp	.+334    	; 0x89de <_printf_fn+0x4c8>
    8890:	68 94       	set
    8892:	96 f8       	bld	r9, 6
    8894:	91 95       	neg	r25
    8896:	81 95       	neg	r24
    8898:	91 09       	sbc	r25, r1
    889a:	65 96       	adiw	r28, 0x15	; 21
    889c:	9f af       	std	Y+63, r25	; 0x3f
    889e:	8e af       	std	Y+62, r24	; 0x3e
    88a0:	65 97       	sbiw	r28, 0x15	; 21
    88a2:	9d c0       	rjmp	.+314    	; 0x89de <_printf_fn+0x4c8>
    88a4:	f4 e0       	ldi	r31, 0x04	; 4
    88a6:	4f 16       	cp	r4, r31
    88a8:	51 04       	cpc	r5, r1
    88aa:	59 f5       	brne	.+86     	; 0x8902 <_printf_fn+0x3ec>
    88ac:	51 01       	movw	r10, r2
    88ae:	24 e0       	ldi	r18, 0x04	; 4
    88b0:	a2 0e       	add	r10, r18
    88b2:	b1 1c       	adc	r11, r1
    88b4:	f1 01       	movw	r30, r2
    88b6:	80 81       	ld	r24, Z
    88b8:	91 81       	ldd	r25, Z+1	; 0x01
    88ba:	a2 81       	ldd	r26, Z+2	; 0x02
    88bc:	b3 81       	ldd	r27, Z+3	; 0x03
    88be:	2f 96       	adiw	r28, 0x0f	; 15
    88c0:	8c af       	std	Y+60, r24	; 0x3c
    88c2:	9d af       	std	Y+61, r25	; 0x3d
    88c4:	ae af       	std	Y+62, r26	; 0x3e
    88c6:	bf af       	std	Y+63, r27	; 0x3f
    88c8:	2f 97       	sbiw	r28, 0x0f	; 15
    88ca:	a3 96       	adiw	r28, 0x23	; 35
    88cc:	2e ad       	ldd	r18, Y+62	; 0x3e
    88ce:	3f ad       	ldd	r19, Y+63	; 0x3f
    88d0:	a3 97       	sbiw	r28, 0x23	; 35
    88d2:	24 34       	cpi	r18, 0x44	; 68
    88d4:	31 05       	cpc	r19, r1
    88d6:	09 f0       	breq	.+2      	; 0x88da <_printf_fn+0x3c4>
    88d8:	8f c0       	rjmp	.+286    	; 0x89f8 <_printf_fn+0x4e2>
    88da:	b7 ff       	sbrs	r27, 7
    88dc:	8a c0       	rjmp	.+276    	; 0x89f2 <_printf_fn+0x4dc>
    88de:	68 94       	set
    88e0:	96 f8       	bld	r9, 6
    88e2:	b0 95       	com	r27
    88e4:	a0 95       	com	r26
    88e6:	90 95       	com	r25
    88e8:	81 95       	neg	r24
    88ea:	9f 4f       	sbci	r25, 0xFF	; 255
    88ec:	af 4f       	sbci	r26, 0xFF	; 255
    88ee:	bf 4f       	sbci	r27, 0xFF	; 255
    88f0:	2f 96       	adiw	r28, 0x0f	; 15
    88f2:	8c af       	std	Y+60, r24	; 0x3c
    88f4:	9d af       	std	Y+61, r25	; 0x3d
    88f6:	ae af       	std	Y+62, r26	; 0x3e
    88f8:	bf af       	std	Y+63, r27	; 0x3f
    88fa:	2f 97       	sbiw	r28, 0x0f	; 15
    88fc:	7a c0       	rjmp	.+244    	; 0x89f2 <_printf_fn+0x4dc>
    88fe:	81 e0       	ldi	r24, 0x01	; 1
    8900:	90 e0       	ldi	r25, 0x00	; 0
    8902:	51 01       	movw	r10, r2
    8904:	38 e0       	ldi	r19, 0x08	; 8
    8906:	43 16       	cp	r4, r19
    8908:	51 04       	cpc	r5, r1
    890a:	09 f0       	breq	.+2      	; 0x890e <_printf_fn+0x3f8>
    890c:	7c c0       	rjmp	.+248    	; 0x8a06 <_printf_fn+0x4f0>
    890e:	48 e0       	ldi	r20, 0x08	; 8
    8910:	a4 0e       	add	r10, r20
    8912:	b1 1c       	adc	r11, r1
    8914:	d1 01       	movw	r26, r2
    8916:	fc 90       	ld	r15, X
    8918:	f1 01       	movw	r30, r2
    891a:	01 81       	ldd	r16, Z+1	; 0x01
    891c:	12 81       	ldd	r17, Z+2	; 0x02
    891e:	f3 81       	ldd	r31, Z+3	; 0x03
    8920:	aa 96       	adiw	r28, 0x2a	; 42
    8922:	ff af       	std	Y+63, r31	; 0x3f
    8924:	aa 97       	sbiw	r28, 0x2a	; 42
    8926:	f1 01       	movw	r30, r2
    8928:	f4 81       	ldd	r31, Z+4	; 0x04
    892a:	ab 96       	adiw	r28, 0x2b	; 43
    892c:	ff af       	std	Y+63, r31	; 0x3f
    892e:	ab 97       	sbiw	r28, 0x2b	; 43
    8930:	f1 01       	movw	r30, r2
    8932:	b5 81       	ldd	r27, Z+5	; 0x05
    8934:	f6 81       	ldd	r31, Z+6	; 0x06
    8936:	af 96       	adiw	r28, 0x2f	; 47
    8938:	ff af       	std	Y+63, r31	; 0x3f
    893a:	af 97       	sbiw	r28, 0x2f	; 47
    893c:	f1 01       	movw	r30, r2
    893e:	37 80       	ldd	r3, Z+7	; 0x07
    8940:	24 96       	adiw	r28, 0x04	; 4
    8942:	ff ae       	std	Y+63, r15	; 0x3f
    8944:	24 97       	sbiw	r28, 0x04	; 4
    8946:	25 96       	adiw	r28, 0x05	; 5
    8948:	0f af       	std	Y+63, r16	; 0x3f
    894a:	25 97       	sbiw	r28, 0x05	; 5
    894c:	26 96       	adiw	r28, 0x06	; 6
    894e:	1f af       	std	Y+63, r17	; 0x3f
    8950:	26 97       	sbiw	r28, 0x06	; 6
    8952:	aa 96       	adiw	r28, 0x2a	; 42
    8954:	ff ad       	ldd	r31, Y+63	; 0x3f
    8956:	aa 97       	sbiw	r28, 0x2a	; 42
    8958:	27 96       	adiw	r28, 0x07	; 7
    895a:	ff af       	std	Y+63, r31	; 0x3f
    895c:	27 97       	sbiw	r28, 0x07	; 7
    895e:	ab 96       	adiw	r28, 0x2b	; 43
    8960:	ef ad       	ldd	r30, Y+63	; 0x3f
    8962:	ab 97       	sbiw	r28, 0x2b	; 43
    8964:	28 96       	adiw	r28, 0x08	; 8
    8966:	ef af       	std	Y+63, r30	; 0x3f
    8968:	28 97       	sbiw	r28, 0x08	; 8
    896a:	29 96       	adiw	r28, 0x09	; 9
    896c:	bf af       	std	Y+63, r27	; 0x3f
    896e:	29 97       	sbiw	r28, 0x09	; 9
    8970:	af 96       	adiw	r28, 0x2f	; 47
    8972:	ff ad       	ldd	r31, Y+63	; 0x3f
    8974:	af 97       	sbiw	r28, 0x2f	; 47
    8976:	2a 96       	adiw	r28, 0x0a	; 10
    8978:	ff af       	std	Y+63, r31	; 0x3f
    897a:	2a 97       	sbiw	r28, 0x0a	; 10
    897c:	2b 96       	adiw	r28, 0x0b	; 11
    897e:	3f ae       	std	Y+63, r3	; 0x3f
    8980:	2b 97       	sbiw	r28, 0x0b	; 11
    8982:	89 2b       	or	r24, r25
    8984:	09 f4       	brne	.+2      	; 0x8988 <_printf_fn+0x472>
    8986:	4a c0       	rjmp	.+148    	; 0x8a1c <_printf_fn+0x506>
    8988:	2f 2d       	mov	r18, r15
    898a:	30 2f       	mov	r19, r16
    898c:	41 2f       	mov	r20, r17
    898e:	aa 96       	adiw	r28, 0x2a	; 42
    8990:	5f ad       	ldd	r21, Y+63	; 0x3f
    8992:	aa 97       	sbiw	r28, 0x2a	; 42
    8994:	6e 2f       	mov	r22, r30
    8996:	7b 2f       	mov	r23, r27
    8998:	8f 2f       	mov	r24, r31
    899a:	93 2d       	mov	r25, r3
    899c:	a0 e0       	ldi	r26, 0x00	; 0
    899e:	0e 94 3d e7 	call	0x1ce7a	; 0x1ce7a <__cmpdi2_s8>
    89a2:	e4 f5       	brge	.+120    	; 0x8a1c <_printf_fn+0x506>
    89a4:	68 94       	set
    89a6:	96 f8       	bld	r9, 6
    89a8:	0e 94 ef e6 	call	0x1cdde	; 0x1cdde <__negdi2>
    89ac:	24 96       	adiw	r28, 0x04	; 4
    89ae:	2f af       	std	Y+63, r18	; 0x3f
    89b0:	24 97       	sbiw	r28, 0x04	; 4
    89b2:	25 96       	adiw	r28, 0x05	; 5
    89b4:	3f af       	std	Y+63, r19	; 0x3f
    89b6:	25 97       	sbiw	r28, 0x05	; 5
    89b8:	26 96       	adiw	r28, 0x06	; 6
    89ba:	4f af       	std	Y+63, r20	; 0x3f
    89bc:	26 97       	sbiw	r28, 0x06	; 6
    89be:	27 96       	adiw	r28, 0x07	; 7
    89c0:	5f af       	std	Y+63, r21	; 0x3f
    89c2:	27 97       	sbiw	r28, 0x07	; 7
    89c4:	28 96       	adiw	r28, 0x08	; 8
    89c6:	6f af       	std	Y+63, r22	; 0x3f
    89c8:	28 97       	sbiw	r28, 0x08	; 8
    89ca:	29 96       	adiw	r28, 0x09	; 9
    89cc:	7f af       	std	Y+63, r23	; 0x3f
    89ce:	29 97       	sbiw	r28, 0x09	; 9
    89d0:	2a 96       	adiw	r28, 0x0a	; 10
    89d2:	8f af       	std	Y+63, r24	; 0x3f
    89d4:	2a 97       	sbiw	r28, 0x0a	; 10
    89d6:	2b 96       	adiw	r28, 0x0b	; 11
    89d8:	9f af       	std	Y+63, r25	; 0x3f
    89da:	2b 97       	sbiw	r28, 0x0b	; 11
    89dc:	1f c0       	rjmp	.+62     	; 0x8a1c <_printf_fn+0x506>
    89de:	22 e0       	ldi	r18, 0x02	; 2
    89e0:	42 2e       	mov	r4, r18
    89e2:	51 2c       	mov	r5, r1
    89e4:	6c 96       	adiw	r28, 0x1c	; 28
    89e6:	8f ad       	ldd	r24, Y+63	; 0x3f
    89e8:	6c 97       	sbiw	r28, 0x1c	; 28
    89ea:	6d 96       	adiw	r28, 0x1d	; 29
    89ec:	9f ad       	ldd	r25, Y+63	; 0x3f
    89ee:	6d 97       	sbiw	r28, 0x1d	; 29
    89f0:	1b c0       	rjmp	.+54     	; 0x8a28 <_printf_fn+0x512>
    89f2:	94 e0       	ldi	r25, 0x04	; 4
    89f4:	49 2e       	mov	r4, r25
    89f6:	51 2c       	mov	r5, r1
    89f8:	6a 96       	adiw	r28, 0x1a	; 26
    89fa:	8f ad       	ldd	r24, Y+63	; 0x3f
    89fc:	6a 97       	sbiw	r28, 0x1a	; 26
    89fe:	6b 96       	adiw	r28, 0x1b	; 27
    8a00:	9f ad       	ldd	r25, Y+63	; 0x3f
    8a02:	6b 97       	sbiw	r28, 0x1b	; 27
    8a04:	11 c0       	rjmp	.+34     	; 0x8a28 <_printf_fn+0x512>
    8a06:	66 96       	adiw	r28, 0x16	; 22
    8a08:	8f ad       	ldd	r24, Y+63	; 0x3f
    8a0a:	66 97       	sbiw	r28, 0x16	; 22
    8a0c:	67 96       	adiw	r28, 0x17	; 23
    8a0e:	9f ad       	ldd	r25, Y+63	; 0x3f
    8a10:	67 97       	sbiw	r28, 0x17	; 23
    8a12:	a3 96       	adiw	r28, 0x23	; 35
    8a14:	1f ae       	std	Y+63, r1	; 0x3f
    8a16:	1e ae       	std	Y+62, r1	; 0x3e
    8a18:	a3 97       	sbiw	r28, 0x23	; 35
    8a1a:	06 c0       	rjmp	.+12     	; 0x8a28 <_printf_fn+0x512>
    8a1c:	68 96       	adiw	r28, 0x18	; 24
    8a1e:	8f ad       	ldd	r24, Y+63	; 0x3f
    8a20:	68 97       	sbiw	r28, 0x18	; 24
    8a22:	69 96       	adiw	r28, 0x19	; 25
    8a24:	9f ad       	ldd	r25, Y+63	; 0x3f
    8a26:	69 97       	sbiw	r28, 0x19	; 25
    8a28:	2f ef       	ldi	r18, 0xFF	; 255
    8a2a:	62 1a       	sub	r6, r18
    8a2c:	72 0a       	sbc	r7, r18
    8a2e:	82 0a       	sbc	r8, r18
    8a30:	15 01       	movw	r2, r10
    8a32:	33 c0       	rjmp	.+102    	; 0x8a9a <_printf_fn+0x584>
    8a34:	91 fc       	sbrc	r9, 1
    8a36:	08 c0       	rjmp	.+16     	; 0x8a48 <_printf_fn+0x532>
    8a38:	68 94       	set
    8a3a:	91 f8       	bld	r9, 1
    8a3c:	46 e0       	ldi	r20, 0x06	; 6
    8a3e:	50 e0       	ldi	r21, 0x00	; 0
    8a40:	a1 96       	adiw	r28, 0x21	; 33
    8a42:	5f af       	std	Y+63, r21	; 0x3f
    8a44:	4e af       	std	Y+62, r20	; 0x3e
    8a46:	a1 97       	sbiw	r28, 0x21	; 33
    8a48:	d1 01       	movw	r26, r2
    8a4a:	8d 91       	ld	r24, X+
    8a4c:	9d 91       	ld	r25, X+
    8a4e:	0d 90       	ld	r0, X+
    8a50:	bc 91       	ld	r27, X
    8a52:	a0 2d       	mov	r26, r0
    8a54:	a9 96       	adiw	r28, 0x29	; 41
    8a56:	8c af       	std	Y+60, r24	; 0x3c
    8a58:	9d af       	std	Y+61, r25	; 0x3d
    8a5a:	ae af       	std	Y+62, r26	; 0x3e
    8a5c:	bf af       	std	Y+63, r27	; 0x3f
    8a5e:	a9 97       	sbiw	r28, 0x29	; 41
    8a60:	bf ef       	ldi	r27, 0xFF	; 255
    8a62:	6b 1a       	sub	r6, r27
    8a64:	7b 0a       	sbc	r7, r27
    8a66:	8b 0a       	sbc	r8, r27
    8a68:	f1 01       	movw	r30, r2
    8a6a:	34 96       	adiw	r30, 0x04	; 4
    8a6c:	1f 01       	movw	r2, r30
    8a6e:	0f c0       	rjmp	.+30     	; 0x8a8e <_printf_fn+0x578>
    8a70:	ff ef       	ldi	r31, 0xFF	; 255
    8a72:	6f 1a       	sub	r6, r31
    8a74:	7f 0a       	sbc	r7, r31
    8a76:	8f 0a       	sbc	r8, r31
    8a78:	c5 c0       	rjmp	.+394    	; 0x8c04 <_printf_fn+0x6ee>
    8a7a:	2f ef       	ldi	r18, 0xFF	; 255
    8a7c:	62 1a       	sub	r6, r18
    8a7e:	72 0a       	sbc	r7, r18
    8a80:	82 0a       	sbc	r8, r18
    8a82:	11 c1       	rjmp	.+546    	; 0x8ca6 <_printf_fn+0x790>
    8a84:	3f ef       	ldi	r19, 0xFF	; 255
    8a86:	63 1a       	sub	r6, r19
    8a88:	73 0a       	sbc	r7, r19
    8a8a:	83 0a       	sbc	r8, r19
    8a8c:	c8 c0       	rjmp	.+400    	; 0x8c1e <_printf_fn+0x708>
    8a8e:	66 96       	adiw	r28, 0x16	; 22
    8a90:	8f ad       	ldd	r24, Y+63	; 0x3f
    8a92:	66 97       	sbiw	r28, 0x16	; 22
    8a94:	67 96       	adiw	r28, 0x17	; 23
    8a96:	9f ad       	ldd	r25, Y+63	; 0x3f
    8a98:	67 97       	sbiw	r28, 0x17	; 23
    8a9a:	a3 96       	adiw	r28, 0x23	; 35
    8a9c:	ee ad       	ldd	r30, Y+62	; 0x3e
    8a9e:	ff ad       	ldd	r31, Y+63	; 0x3f
    8aa0:	a3 97       	sbiw	r28, 0x23	; 35
    8aa2:	e2 54       	subi	r30, 0x42	; 66
    8aa4:	f1 09       	sbc	r31, r1
    8aa6:	e7 33       	cpi	r30, 0x37	; 55
    8aa8:	f1 05       	cpc	r31, r1
    8aaa:	08 f0       	brcs	.+2      	; 0x8aae <_printf_fn+0x598>
    8aac:	56 c1       	rjmp	.+684    	; 0x8d5a <_printf_fn+0x844>
    8aae:	e3 58       	subi	r30, 0x83	; 131
    8ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    8ab2:	0c 94 d0 e6 	jmp	0x1cda0	; 0x1cda0 <__tablejump2__>
    8ab6:	e8 94       	clt
    8ab8:	94 f8       	bld	r9, 4
    8aba:	e8 94       	clt
    8abc:	92 f8       	bld	r9, 2
    8abe:	a9 2c       	mov	r10, r9
    8ac0:	b1 2c       	mov	r11, r1
    8ac2:	a1 96       	adiw	r28, 0x21	; 33
    8ac4:	ce ac       	ldd	r12, Y+62	; 0x3e
    8ac6:	df ac       	ldd	r13, Y+63	; 0x3f
    8ac8:	a1 97       	sbiw	r28, 0x21	; 33
    8aca:	6f 96       	adiw	r28, 0x1f	; 31
    8acc:	ee ac       	ldd	r14, Y+62	; 0x3e
    8ace:	ff ac       	ldd	r15, Y+63	; 0x3f
    8ad0:	6f 97       	sbiw	r28, 0x1f	; 31
    8ad2:	0a e0       	ldi	r16, 0x0A	; 10
    8ad4:	10 e0       	ldi	r17, 0x00	; 0
    8ad6:	19 c0       	rjmp	.+50     	; 0x8b0a <_printf_fn+0x5f4>
    8ad8:	a9 2c       	mov	r10, r9
    8ada:	b1 2c       	mov	r11, r1
    8adc:	a1 96       	adiw	r28, 0x21	; 33
    8ade:	ce ac       	ldd	r12, Y+62	; 0x3e
    8ae0:	df ac       	ldd	r13, Y+63	; 0x3f
    8ae2:	a1 97       	sbiw	r28, 0x21	; 33
    8ae4:	6f 96       	adiw	r28, 0x1f	; 31
    8ae6:	ee ac       	ldd	r14, Y+62	; 0x3e
    8ae8:	ff ac       	ldd	r15, Y+63	; 0x3f
    8aea:	6f 97       	sbiw	r28, 0x1f	; 31
    8aec:	02 e0       	ldi	r16, 0x02	; 2
    8aee:	10 e0       	ldi	r17, 0x00	; 0
    8af0:	0c c0       	rjmp	.+24     	; 0x8b0a <_printf_fn+0x5f4>
    8af2:	a9 2c       	mov	r10, r9
    8af4:	b1 2c       	mov	r11, r1
    8af6:	a1 96       	adiw	r28, 0x21	; 33
    8af8:	ce ac       	ldd	r12, Y+62	; 0x3e
    8afa:	df ac       	ldd	r13, Y+63	; 0x3f
    8afc:	a1 97       	sbiw	r28, 0x21	; 33
    8afe:	6f 96       	adiw	r28, 0x1f	; 31
    8b00:	ee ac       	ldd	r14, Y+62	; 0x3e
    8b02:	ff ac       	ldd	r15, Y+63	; 0x3f
    8b04:	6f 97       	sbiw	r28, 0x1f	; 31
    8b06:	08 e0       	ldi	r16, 0x08	; 8
    8b08:	10 e0       	ldi	r17, 0x00	; 0
    8b0a:	22 e4       	ldi	r18, 0x42	; 66
    8b0c:	30 e0       	ldi	r19, 0x00	; 0
    8b0e:	ae 01       	movw	r20, r28
    8b10:	4f 5f       	subi	r20, 0xFF	; 255
    8b12:	5f 4f       	sbci	r21, 0xFF	; 255
    8b14:	b2 01       	movw	r22, r4
    8b16:	7d d9       	rcall	.-3334   	; 0x7e12 <p_ntoa>
    8b18:	34 c0       	rjmp	.+104    	; 0x8b82 <_printf_fn+0x66c>
    8b1a:	a9 2c       	mov	r10, r9
    8b1c:	b1 2c       	mov	r11, r1
    8b1e:	a1 96       	adiw	r28, 0x21	; 33
    8b20:	ce ac       	ldd	r12, Y+62	; 0x3e
    8b22:	df ac       	ldd	r13, Y+63	; 0x3f
    8b24:	a1 97       	sbiw	r28, 0x21	; 33
    8b26:	6f 96       	adiw	r28, 0x1f	; 31
    8b28:	ee ac       	ldd	r14, Y+62	; 0x3e
    8b2a:	ff ac       	ldd	r15, Y+63	; 0x3f
    8b2c:	6f 97       	sbiw	r28, 0x1f	; 31
    8b2e:	00 e1       	ldi	r16, 0x10	; 16
    8b30:	10 e0       	ldi	r17, 0x00	; 0
    8b32:	22 e4       	ldi	r18, 0x42	; 66
    8b34:	30 e0       	ldi	r19, 0x00	; 0
    8b36:	ae 01       	movw	r20, r28
    8b38:	4f 5f       	subi	r20, 0xFF	; 255
    8b3a:	5f 4f       	sbci	r21, 0xFF	; 255
    8b3c:	b2 01       	movw	r22, r4
    8b3e:	69 d9       	rcall	.-3374   	; 0x7e12 <p_ntoa>
    8b40:	6c 01       	movw	r12, r24
    8b42:	a3 96       	adiw	r28, 0x23	; 35
    8b44:	6e ad       	ldd	r22, Y+62	; 0x3e
    8b46:	7f ad       	ldd	r23, Y+63	; 0x3f
    8b48:	a3 97       	sbiw	r28, 0x23	; 35
    8b4a:	67 7f       	andi	r22, 0xF7	; 247
    8b4c:	60 35       	cpi	r22, 0x50	; 80
    8b4e:	71 05       	cpc	r23, r1
    8b50:	09 f0       	breq	.+2      	; 0x8b54 <_printf_fn+0x63e>
    8b52:	3f c0       	rjmp	.+126    	; 0x8bd2 <_printf_fn+0x6bc>
    8b54:	3a c0       	rjmp	.+116    	; 0x8bca <_printf_fn+0x6b4>
    8b56:	c9 2c       	mov	r12, r9
    8b58:	d1 2c       	mov	r13, r1
    8b5a:	a1 96       	adiw	r28, 0x21	; 33
    8b5c:	ee ac       	ldd	r14, Y+62	; 0x3e
    8b5e:	ff ac       	ldd	r15, Y+63	; 0x3f
    8b60:	a1 97       	sbiw	r28, 0x21	; 33
    8b62:	6f 96       	adiw	r28, 0x1f	; 31
    8b64:	0e ad       	ldd	r16, Y+62	; 0x3e
    8b66:	1f ad       	ldd	r17, Y+63	; 0x3f
    8b68:	6f 97       	sbiw	r28, 0x1f	; 31
    8b6a:	22 e4       	ldi	r18, 0x42	; 66
    8b6c:	30 e0       	ldi	r19, 0x00	; 0
    8b6e:	ae 01       	movw	r20, r28
    8b70:	4f 5f       	subi	r20, 0xFF	; 255
    8b72:	5f 4f       	sbci	r21, 0xFF	; 255
    8b74:	a9 96       	adiw	r28, 0x29	; 41
    8b76:	6c ad       	ldd	r22, Y+60	; 0x3c
    8b78:	7d ad       	ldd	r23, Y+61	; 0x3d
    8b7a:	8e ad       	ldd	r24, Y+62	; 0x3e
    8b7c:	9f ad       	ldd	r25, Y+63	; 0x3f
    8b7e:	a9 97       	sbiw	r28, 0x29	; 41
    8b80:	9d d9       	rcall	.-3270   	; 0x7ebc <p_ftoa>
    8b82:	93 fa       	bst	r9, 3
    8b84:	00 27       	eor	r16, r16
    8b86:	00 f9       	bld	r16, 0
    8b88:	10 e0       	ldi	r17, 0x00	; 0
    8b8a:	9c 01       	movw	r18, r24
    8b8c:	27 c0       	rjmp	.+78     	; 0x8bdc <_printf_fn+0x6c6>
    8b8e:	c9 2c       	mov	r12, r9
    8b90:	d1 2c       	mov	r13, r1
    8b92:	a1 96       	adiw	r28, 0x21	; 33
    8b94:	ee ac       	ldd	r14, Y+62	; 0x3e
    8b96:	ff ac       	ldd	r15, Y+63	; 0x3f
    8b98:	a1 97       	sbiw	r28, 0x21	; 33
    8b9a:	6f 96       	adiw	r28, 0x1f	; 31
    8b9c:	0e ad       	ldd	r16, Y+62	; 0x3e
    8b9e:	1f ad       	ldd	r17, Y+63	; 0x3f
    8ba0:	6f 97       	sbiw	r28, 0x1f	; 31
    8ba2:	22 e4       	ldi	r18, 0x42	; 66
    8ba4:	30 e0       	ldi	r19, 0x00	; 0
    8ba6:	ae 01       	movw	r20, r28
    8ba8:	4f 5f       	subi	r20, 0xFF	; 255
    8baa:	5f 4f       	sbci	r21, 0xFF	; 255
    8bac:	a9 96       	adiw	r28, 0x29	; 41
    8bae:	6c ad       	ldd	r22, Y+60	; 0x3c
    8bb0:	7d ad       	ldd	r23, Y+61	; 0x3d
    8bb2:	8e ad       	ldd	r24, Y+62	; 0x3e
    8bb4:	9f ad       	ldd	r25, Y+63	; 0x3f
    8bb6:	a9 97       	sbiw	r28, 0x29	; 41
    8bb8:	88 da       	rcall	.-2800   	; 0x80ca <p_etoa>
    8bba:	6c 01       	movw	r12, r24
    8bbc:	a3 96       	adiw	r28, 0x23	; 35
    8bbe:	4e ad       	ldd	r20, Y+62	; 0x3e
    8bc0:	5f ad       	ldd	r21, Y+63	; 0x3f
    8bc2:	a3 97       	sbiw	r28, 0x23	; 35
    8bc4:	45 34       	cpi	r20, 0x45	; 69
    8bc6:	51 05       	cpc	r21, r1
    8bc8:	21 f4       	brne	.+8      	; 0x8bd2 <_printf_fn+0x6bc>
    8bca:	ce 01       	movw	r24, r28
    8bcc:	01 96       	adiw	r24, 0x01	; 1
    8bce:	0e 94 be 31 	call	0x637c	; 0x637c <strupper>
    8bd2:	93 fa       	bst	r9, 3
    8bd4:	00 27       	eor	r16, r16
    8bd6:	00 f9       	bld	r16, 0
    8bd8:	10 e0       	ldi	r17, 0x00	; 0
    8bda:	96 01       	movw	r18, r12
    8bdc:	6f 96       	adiw	r28, 0x1f	; 31
    8bde:	4e ad       	ldd	r20, Y+62	; 0x3e
    8be0:	5f ad       	ldd	r21, Y+63	; 0x3f
    8be2:	6f 97       	sbiw	r28, 0x1f	; 31
    8be4:	be 01       	movw	r22, r28
    8be6:	6f 5f       	subi	r22, 0xFF	; 255
    8be8:	7f 4f       	sbci	r23, 0xFF	; 255
    8bea:	a5 96       	adiw	r28, 0x25	; 37
    8bec:	8e ad       	ldd	r24, Y+62	; 0x3e
    8bee:	9f ad       	ldd	r25, Y+63	; 0x3f
    8bf0:	a5 97       	sbiw	r28, 0x25	; 37
    8bf2:	d7 db       	rcall	.-2130   	; 0x83a2 <_puts_pad>
    8bf4:	b6 c0       	rjmp	.+364    	; 0x8d62 <_printf_fn+0x84c>
    8bf6:	a3 96       	adiw	r28, 0x23	; 35
    8bf8:	8e ad       	ldd	r24, Y+62	; 0x3e
    8bfa:	9f ad       	ldd	r25, Y+63	; 0x3f
    8bfc:	a3 97       	sbiw	r28, 0x23	; 35
    8bfe:	83 37       	cpi	r24, 0x73	; 115
    8c00:	91 05       	cpc	r25, r1
    8c02:	69 f4       	brne	.+26     	; 0x8c1e <_printf_fn+0x708>
    8c04:	61 01       	movw	r12, r2
    8c06:	92 e0       	ldi	r25, 0x02	; 2
    8c08:	c9 0e       	add	r12, r25
    8c0a:	d1 1c       	adc	r13, r1
    8c0c:	d1 01       	movw	r26, r2
    8c0e:	6d 91       	ld	r22, X+
    8c10:	7c 91       	ld	r23, X
    8c12:	61 15       	cp	r22, r1
    8c14:	71 05       	cpc	r23, r1
    8c16:	91 f4       	brne	.+36     	; 0x8c3c <_printf_fn+0x726>
    8c18:	6a e1       	ldi	r22, 0x1A	; 26
    8c1a:	74 e0       	ldi	r23, 0x04	; 4
    8c1c:	0f c0       	rjmp	.+30     	; 0x8c3c <_printf_fn+0x726>
    8c1e:	61 01       	movw	r12, r2
    8c20:	b2 e0       	ldi	r27, 0x02	; 2
    8c22:	cb 0e       	add	r12, r27
    8c24:	d1 1c       	adc	r13, r1
    8c26:	f1 01       	movw	r30, r2
    8c28:	80 81       	ld	r24, Z
    8c2a:	60 96       	adiw	r28, 0x10	; 16
    8c2c:	8f af       	std	Y+63, r24	; 0x3f
    8c2e:	60 97       	sbiw	r28, 0x10	; 16
    8c30:	61 96       	adiw	r28, 0x11	; 17
    8c32:	1f ae       	std	Y+63, r1	; 0x3f
    8c34:	61 97       	sbiw	r28, 0x11	; 17
    8c36:	be 01       	movw	r22, r28
    8c38:	61 5b       	subi	r22, 0xB1	; 177
    8c3a:	7f 4f       	sbci	r23, 0xFF	; 255
    8c3c:	fb 01       	movw	r30, r22
    8c3e:	01 90       	ld	r0, Z+
    8c40:	00 20       	and	r0, r0
    8c42:	e9 f7       	brne	.-6      	; 0x8c3e <_printf_fn+0x728>
    8c44:	31 97       	sbiw	r30, 0x01	; 1
    8c46:	e6 1b       	sub	r30, r22
    8c48:	f7 0b       	sbc	r31, r23
    8c4a:	a1 96       	adiw	r28, 0x21	; 33
    8c4c:	2e ad       	ldd	r18, Y+62	; 0x3e
    8c4e:	3f ad       	ldd	r19, Y+63	; 0x3f
    8c50:	a1 97       	sbiw	r28, 0x21	; 33
    8c52:	23 2b       	or	r18, r19
    8c54:	21 f4       	brne	.+8      	; 0x8c5e <_printf_fn+0x748>
    8c56:	a1 96       	adiw	r28, 0x21	; 33
    8c58:	ff af       	std	Y+63, r31	; 0x3f
    8c5a:	ee af       	std	Y+62, r30	; 0x3e
    8c5c:	a1 97       	sbiw	r28, 0x21	; 33
    8c5e:	6f 96       	adiw	r28, 0x1f	; 31
    8c60:	4e ad       	ldd	r20, Y+62	; 0x3e
    8c62:	5f ad       	ldd	r21, Y+63	; 0x3f
    8c64:	6f 97       	sbiw	r28, 0x1f	; 31
    8c66:	a1 96       	adiw	r28, 0x21	; 33
    8c68:	8e ad       	ldd	r24, Y+62	; 0x3e
    8c6a:	9f ad       	ldd	r25, Y+63	; 0x3f
    8c6c:	a1 97       	sbiw	r28, 0x21	; 33
    8c6e:	48 17       	cp	r20, r24
    8c70:	59 07       	cpc	r21, r25
    8c72:	3c f4       	brge	.+14     	; 0x8c82 <_printf_fn+0x76c>
    8c74:	41 15       	cp	r20, r1
    8c76:	51 05       	cpc	r21, r1
    8c78:	21 f0       	breq	.+8      	; 0x8c82 <_printf_fn+0x76c>
    8c7a:	a1 96       	adiw	r28, 0x21	; 33
    8c7c:	5f af       	std	Y+63, r21	; 0x3f
    8c7e:	4e af       	std	Y+62, r20	; 0x3e
    8c80:	a1 97       	sbiw	r28, 0x21	; 33
    8c82:	93 fa       	bst	r9, 3
    8c84:	00 27       	eor	r16, r16
    8c86:	00 f9       	bld	r16, 0
    8c88:	10 e0       	ldi	r17, 0x00	; 0
    8c8a:	a1 96       	adiw	r28, 0x21	; 33
    8c8c:	2e ad       	ldd	r18, Y+62	; 0x3e
    8c8e:	3f ad       	ldd	r19, Y+63	; 0x3f
    8c90:	a1 97       	sbiw	r28, 0x21	; 33
    8c92:	6f 96       	adiw	r28, 0x1f	; 31
    8c94:	4e ad       	ldd	r20, Y+62	; 0x3e
    8c96:	5f ad       	ldd	r21, Y+63	; 0x3f
    8c98:	6f 97       	sbiw	r28, 0x1f	; 31
    8c9a:	a5 96       	adiw	r28, 0x25	; 37
    8c9c:	8e ad       	ldd	r24, Y+62	; 0x3e
    8c9e:	9f ad       	ldd	r25, Y+63	; 0x3f
    8ca0:	a5 97       	sbiw	r28, 0x25	; 37
    8ca2:	7f db       	rcall	.-2306   	; 0x83a2 <_puts_pad>
    8ca4:	45 c0       	rjmp	.+138    	; 0x8d30 <_printf_fn+0x81a>
    8ca6:	61 01       	movw	r12, r2
    8ca8:	92 e0       	ldi	r25, 0x02	; 2
    8caa:	c9 0e       	add	r12, r25
    8cac:	d1 1c       	adc	r13, r1
    8cae:	d1 01       	movw	r26, r2
    8cb0:	2d 90       	ld	r2, X+
    8cb2:	3c 90       	ld	r3, X
    8cb4:	41 2c       	mov	r4, r1
    8cb6:	21 14       	cp	r2, r1
    8cb8:	31 04       	cpc	r3, r1
    8cba:	41 04       	cpc	r4, r1
    8cbc:	29 f4       	brne	.+10     	; 0x8cc8 <_printf_fn+0x7b2>
    8cbe:	ae 96       	adiw	r28, 0x2e	; 46
    8cc0:	2d ac       	ldd	r2, Y+61	; 0x3d
    8cc2:	3e ac       	ldd	r3, Y+62	; 0x3e
    8cc4:	4f ac       	ldd	r4, Y+63	; 0x3f
    8cc6:	ae 97       	sbiw	r28, 0x2e	; 46
    8cc8:	84 2d       	mov	r24, r4
    8cca:	b1 01       	movw	r22, r2
    8ccc:	08 dc       	rcall	.-2032   	; 0x84de <strlen_X>
    8cce:	a1 96       	adiw	r28, 0x21	; 33
    8cd0:	ee ad       	ldd	r30, Y+62	; 0x3e
    8cd2:	ff ad       	ldd	r31, Y+63	; 0x3f
    8cd4:	a1 97       	sbiw	r28, 0x21	; 33
    8cd6:	ef 2b       	or	r30, r31
    8cd8:	31 f4       	brne	.+12     	; 0x8ce6 <_printf_fn+0x7d0>
    8cda:	a0 96       	adiw	r28, 0x20	; 32
    8cdc:	8f af       	std	Y+63, r24	; 0x3f
    8cde:	a0 97       	sbiw	r28, 0x20	; 32
    8ce0:	a1 96       	adiw	r28, 0x21	; 33
    8ce2:	9f af       	std	Y+63, r25	; 0x3f
    8ce4:	a1 97       	sbiw	r28, 0x21	; 33
    8ce6:	6f 96       	adiw	r28, 0x1f	; 31
    8ce8:	2e ad       	ldd	r18, Y+62	; 0x3e
    8cea:	3f ad       	ldd	r19, Y+63	; 0x3f
    8cec:	6f 97       	sbiw	r28, 0x1f	; 31
    8cee:	a1 96       	adiw	r28, 0x21	; 33
    8cf0:	4e ad       	ldd	r20, Y+62	; 0x3e
    8cf2:	5f ad       	ldd	r21, Y+63	; 0x3f
    8cf4:	a1 97       	sbiw	r28, 0x21	; 33
    8cf6:	24 17       	cp	r18, r20
    8cf8:	35 07       	cpc	r19, r21
    8cfa:	3c f4       	brge	.+14     	; 0x8d0a <_printf_fn+0x7f4>
    8cfc:	21 15       	cp	r18, r1
    8cfe:	31 05       	cpc	r19, r1
    8d00:	21 f0       	breq	.+8      	; 0x8d0a <_printf_fn+0x7f4>
    8d02:	a1 96       	adiw	r28, 0x21	; 33
    8d04:	3f af       	std	Y+63, r19	; 0x3f
    8d06:	2e af       	std	Y+62, r18	; 0x3e
    8d08:	a1 97       	sbiw	r28, 0x21	; 33
    8d0a:	93 fa       	bst	r9, 3
    8d0c:	ee 24       	eor	r14, r14
    8d0e:	e0 f8       	bld	r14, 0
    8d10:	f1 2c       	mov	r15, r1
    8d12:	a1 96       	adiw	r28, 0x21	; 33
    8d14:	0e ad       	ldd	r16, Y+62	; 0x3e
    8d16:	1f ad       	ldd	r17, Y+63	; 0x3f
    8d18:	a1 97       	sbiw	r28, 0x21	; 33
    8d1a:	6f 96       	adiw	r28, 0x1f	; 31
    8d1c:	2e ad       	ldd	r18, Y+62	; 0x3e
    8d1e:	3f ad       	ldd	r19, Y+63	; 0x3f
    8d20:	6f 97       	sbiw	r28, 0x1f	; 31
    8d22:	64 2d       	mov	r22, r4
    8d24:	a1 01       	movw	r20, r2
    8d26:	a5 96       	adiw	r28, 0x25	; 37
    8d28:	8e ad       	ldd	r24, Y+62	; 0x3e
    8d2a:	9f ad       	ldd	r25, Y+63	; 0x3f
    8d2c:	a5 97       	sbiw	r28, 0x25	; 37
    8d2e:	7b db       	rcall	.-2314   	; 0x8426 <_puts_pad_X>
    8d30:	16 01       	movw	r2, r12
    8d32:	17 c0       	rjmp	.+46     	; 0x8d62 <_printf_fn+0x84c>
    8d34:	f6 01       	movw	r30, r12
    8d36:	5e 2d       	mov	r21, r14
    8d38:	0e 94 36 e7 	call	0x1ce6c	; 0x1ce6c <__xload_1>
    8d3c:	66 23       	and	r22, r22
    8d3e:	89 f0       	breq	.+34     	; 0x8d62 <_printf_fn+0x84c>
    8d40:	5f ef       	ldi	r21, 0xFF	; 255
    8d42:	c5 1a       	sub	r12, r21
    8d44:	d5 0a       	sbc	r13, r21
    8d46:	e5 0a       	sbc	r14, r21
    8d48:	a5 96       	adiw	r28, 0x25	; 37
    8d4a:	ae ad       	ldd	r26, Y+62	; 0x3e
    8d4c:	bf ad       	ldd	r27, Y+63	; 0x3f
    8d4e:	a5 97       	sbiw	r28, 0x25	; 37
    8d50:	ed 91       	ld	r30, X+
    8d52:	fc 91       	ld	r31, X
    8d54:	11 97       	sbiw	r26, 0x01	; 1
    8d56:	cd 01       	movw	r24, r26
    8d58:	09 95       	icall
    8d5a:	6c 14       	cp	r6, r12
    8d5c:	7d 04       	cpc	r7, r13
    8d5e:	8e 04       	cpc	r8, r14
    8d60:	48 f7       	brcc	.-46     	; 0x8d34 <_printf_fn+0x81e>
    8d62:	e8 2c       	mov	r14, r8
    8d64:	63 01       	movw	r12, r6
    8d66:	0f cc       	rjmp	.-2018   	; 0x8586 <_printf_fn+0x70>
    8d68:	82 e0       	ldi	r24, 0x02	; 2
    8d6a:	48 2e       	mov	r4, r24
    8d6c:	51 2c       	mov	r5, r1
    8d6e:	0d cd       	rjmp	.-1510   	; 0x878a <_printf_fn+0x274>
    8d70:	f2 e0       	ldi	r31, 0x02	; 2
    8d72:	4f 16       	cp	r4, r31
    8d74:	51 04       	cpc	r5, r1
    8d76:	61 f4       	brne	.+24     	; 0x8d90 <_printf_fn+0x87a>
    8d78:	51 01       	movw	r10, r2
    8d7a:	b2 e0       	ldi	r27, 0x02	; 2
    8d7c:	ab 0e       	add	r10, r27
    8d7e:	b1 1c       	adc	r11, r1
    8d80:	f1 01       	movw	r30, r2
    8d82:	80 81       	ld	r24, Z
    8d84:	91 81       	ldd	r25, Z+1	; 0x01
    8d86:	65 96       	adiw	r28, 0x15	; 21
    8d88:	9f af       	std	Y+63, r25	; 0x3f
    8d8a:	8e af       	std	Y+62, r24	; 0x3e
    8d8c:	65 97       	sbiw	r28, 0x15	; 21
    8d8e:	7e cd       	rjmp	.-1284   	; 0x888c <_printf_fn+0x376>
    8d90:	f4 e0       	ldi	r31, 0x04	; 4
    8d92:	4f 16       	cp	r4, r31
    8d94:	51 04       	cpc	r5, r1
    8d96:	09 f0       	breq	.+2      	; 0x8d9a <_printf_fn+0x884>
    8d98:	b2 cd       	rjmp	.-1180   	; 0x88fe <_printf_fn+0x3e8>
    8d9a:	51 01       	movw	r10, r2
    8d9c:	24 e0       	ldi	r18, 0x04	; 4
    8d9e:	a2 0e       	add	r10, r18
    8da0:	b1 1c       	adc	r11, r1
    8da2:	f1 01       	movw	r30, r2
    8da4:	80 81       	ld	r24, Z
    8da6:	91 81       	ldd	r25, Z+1	; 0x01
    8da8:	a2 81       	ldd	r26, Z+2	; 0x02
    8daa:	b3 81       	ldd	r27, Z+3	; 0x03
    8dac:	2f 96       	adiw	r28, 0x0f	; 15
    8dae:	8c af       	std	Y+60, r24	; 0x3c
    8db0:	9d af       	std	Y+61, r25	; 0x3d
    8db2:	ae af       	std	Y+62, r26	; 0x3e
    8db4:	bf af       	std	Y+63, r27	; 0x3f
    8db6:	2f 97       	sbiw	r28, 0x0f	; 15
    8db8:	90 cd       	rjmp	.-1248   	; 0x88da <_printf_fn+0x3c4>
    8dba:	c2 59       	subi	r28, 0x92	; 146
    8dbc:	df 4f       	sbci	r29, 0xFF	; 255
    8dbe:	e2 e1       	ldi	r30, 0x12	; 18
    8dc0:	0c 94 1b e7 	jmp	0x1ce36	; 0x1ce36 <__epilogue_restores__>

00008dc4 <vsnprintf_P>:
    8dc4:	a8 e0       	ldi	r26, 0x08	; 8
    8dc6:	b0 e0       	ldi	r27, 0x00	; 0
    8dc8:	e8 ee       	ldi	r30, 0xE8	; 232
    8dca:	f6 e4       	ldi	r31, 0x46	; 70
    8dcc:	0c 94 0b e7 	jmp	0x1ce16	; 0x1ce16 <__prologue_saves__+0x18>
    8dd0:	7c 01       	movw	r14, r24
    8dd2:	cb 01       	movw	r24, r22
    8dd4:	64 2f       	mov	r22, r20
    8dd6:	a9 01       	movw	r20, r18
    8dd8:	98 01       	movw	r18, r16
    8dda:	f7 01       	movw	r30, r14
    8ddc:	10 82       	st	Z, r1
    8dde:	e0 e4       	ldi	r30, 0x40	; 64
    8de0:	fe e3       	ldi	r31, 0x3E	; 62
    8de2:	fa 83       	std	Y+2, r31	; 0x02
    8de4:	e9 83       	std	Y+1, r30	; 0x01
    8de6:	9e 83       	std	Y+6, r25	; 0x06
    8de8:	8d 83       	std	Y+5, r24	; 0x05
    8dea:	18 86       	std	Y+8, r1	; 0x08
    8dec:	1f 82       	std	Y+7, r1	; 0x07
    8dee:	fc 82       	std	Y+4, r15	; 0x04
    8df0:	eb 82       	std	Y+3, r14	; 0x03
    8df2:	ce 01       	movw	r24, r28
    8df4:	01 96       	adiw	r24, 0x01	; 1
    8df6:	8f db       	rcall	.-2274   	; 0x8516 <_printf_fn>
    8df8:	f7 01       	movw	r30, r14
    8dfa:	01 90       	ld	r0, Z+
    8dfc:	00 20       	and	r0, r0
    8dfe:	e9 f7       	brne	.-6      	; 0x8dfa <vsnprintf_P+0x36>
    8e00:	cf 01       	movw	r24, r30
    8e02:	01 97       	sbiw	r24, 0x01	; 1
    8e04:	8e 19       	sub	r24, r14
    8e06:	9f 09       	sbc	r25, r15
    8e08:	28 96       	adiw	r28, 0x08	; 8
    8e0a:	e6 e0       	ldi	r30, 0x06	; 6
    8e0c:	0c 94 27 e7 	jmp	0x1ce4e	; 0x1ce4e <__epilogue_restores__+0x18>

00008e10 <snprintf_P>:
    8e10:	a0 e0       	ldi	r26, 0x00	; 0
    8e12:	b0 e0       	ldi	r27, 0x00	; 0
    8e14:	ee e0       	ldi	r30, 0x0E	; 14
    8e16:	f7 e4       	ldi	r31, 0x47	; 71
    8e18:	0c 94 0d e7 	jmp	0x1ce1a	; 0x1ce1a <__prologue_saves__+0x1c>
    8e1c:	8e 01       	movw	r16, r28
    8e1e:	02 5f       	subi	r16, 0xF2	; 242
    8e20:	1f 4f       	sbci	r17, 0xFF	; 255
    8e22:	2b 85       	ldd	r18, Y+11	; 0x0b
    8e24:	3c 85       	ldd	r19, Y+12	; 0x0c
    8e26:	4d 85       	ldd	r20, Y+13	; 0x0d
    8e28:	69 85       	ldd	r22, Y+9	; 0x09
    8e2a:	7a 85       	ldd	r23, Y+10	; 0x0a
    8e2c:	8f 81       	ldd	r24, Y+7	; 0x07
    8e2e:	98 85       	ldd	r25, Y+8	; 0x08
    8e30:	c9 df       	rcall	.-110    	; 0x8dc4 <vsnprintf_P>
    8e32:	e4 e0       	ldi	r30, 0x04	; 4
    8e34:	0c 94 29 e7 	jmp	0x1ce52	; 0x1ce52 <__epilogue_restores__+0x1c>

00008e38 <sprintf_P>:
    8e38:	a0 e0       	ldi	r26, 0x00	; 0
    8e3a:	b0 e0       	ldi	r27, 0x00	; 0
    8e3c:	e2 e2       	ldi	r30, 0x22	; 34
    8e3e:	f7 e4       	ldi	r31, 0x47	; 71
    8e40:	0c 94 0d e7 	jmp	0x1ce1a	; 0x1ce1a <__prologue_saves__+0x1c>
    8e44:	8e 01       	movw	r16, r28
    8e46:	04 5f       	subi	r16, 0xF4	; 244
    8e48:	1f 4f       	sbci	r17, 0xFF	; 255
    8e4a:	29 85       	ldd	r18, Y+9	; 0x09
    8e4c:	3a 85       	ldd	r19, Y+10	; 0x0a
    8e4e:	4b 85       	ldd	r20, Y+11	; 0x0b
    8e50:	60 e0       	ldi	r22, 0x00	; 0
    8e52:	74 e0       	ldi	r23, 0x04	; 4
    8e54:	8f 81       	ldd	r24, Y+7	; 0x07
    8e56:	98 85       	ldd	r25, Y+8	; 0x08
    8e58:	b5 df       	rcall	.-150    	; 0x8dc4 <vsnprintf_P>
    8e5a:	e4 e0       	ldi	r30, 0x04	; 4
    8e5c:	0c 94 29 e7 	jmp	0x1ce52	; 0x1ce52 <__epilogue_restores__+0x1c>

00008e60 <printf_P>:
/// @return size of printed string
/// TODO create a devprintf using an array of function prointers ?
MEMSPACE
int
printf_P(__memx const char *format, ...)
{
    8e60:	a8 e0       	ldi	r26, 0x08	; 8
    8e62:	b0 e0       	ldi	r27, 0x00	; 0
    8e64:	e6 e3       	ldi	r30, 0x36	; 54
    8e66:	f7 e4       	ldi	r31, 0x47	; 71
    8e68:	0c 94 0f e7 	jmp	0x1ce1e	; 0x1ce1e <__prologue_saves__+0x20>
    8e6c:	9e 01       	movw	r18, r28
    8e6e:	23 5f       	subi	r18, 0xF3	; 243
    8e70:	3f 4f       	sbci	r19, 0xFF	; 255
    8e72:	f9 01       	movw	r30, r18
    8e74:	41 91       	ld	r20, Z+
    8e76:	51 91       	ld	r21, Z+
    8e78:	61 91       	ld	r22, Z+
    8e7a:	9f 01       	movw	r18, r30
    printf_t fn;
    va_list va;

    fn.put = _putc_fn;
    8e7c:	89 e5       	ldi	r24, 0x59	; 89
    8e7e:	9e e3       	ldi	r25, 0x3E	; 62
    8e80:	9a 83       	std	Y+2, r25	; 0x02
    8e82:	89 83       	std	Y+1, r24	; 0x01
    fn.sent = 0;
    8e84:	18 86       	std	Y+8, r1	; 0x08
    8e86:	1f 82       	std	Y+7, r1	; 0x07

    va_start(va, format);
    _printf_fn(&fn, format, va);
    8e88:	ce 01       	movw	r24, r28
    8e8a:	01 96       	adiw	r24, 0x01	; 1
    8e8c:	44 db       	rcall	.-2424   	; 0x8516 <_printf_fn>
    va_end(va);

    return ((int)fn.sent);
}
    8e8e:	8f 81       	ldd	r24, Y+7	; 0x07
    8e90:	98 85       	ldd	r25, Y+8	; 0x08
    8e92:	28 96       	adiw	r28, 0x08	; 8
    8e94:	e2 e0       	ldi	r30, 0x02	; 2
    8e96:	0c 94 2b e7 	jmp	0x1ce56	; 0x1ce56 <__epilogue_restores__+0x20>

00008e9a <atodigit>:
    if(sign)
        num = -num;
    if(endptr)
        *endptr = (char *) nptr;
    return(num);
}
    8e9a:	9c 01       	movw	r18, r24
    8e9c:	20 53       	subi	r18, 0x30	; 48
    8e9e:	31 09       	sbc	r19, r1
    8ea0:	2a 30       	cpi	r18, 0x0A	; 10
    8ea2:	31 05       	cpc	r19, r1
    8ea4:	10 f4       	brcc	.+4      	; 0x8eaa <atodigit+0x10>
    8ea6:	c9 01       	movw	r24, r18
    8ea8:	10 c0       	rjmp	.+32     	; 0x8eca <atodigit+0x30>
    8eaa:	9c 01       	movw	r18, r24
    8eac:	21 54       	subi	r18, 0x41	; 65
    8eae:	31 09       	sbc	r19, r1
    8eb0:	26 30       	cpi	r18, 0x06	; 6
    8eb2:	31 05       	cpc	r19, r1
    8eb4:	10 f4       	brcc	.+4      	; 0x8eba <atodigit+0x20>
    8eb6:	c7 97       	sbiw	r24, 0x37	; 55
    8eb8:	08 c0       	rjmp	.+16     	; 0x8eca <atodigit+0x30>
    8eba:	9c 01       	movw	r18, r24
    8ebc:	21 56       	subi	r18, 0x61	; 97
    8ebe:	31 09       	sbc	r19, r1
    8ec0:	26 30       	cpi	r18, 0x06	; 6
    8ec2:	31 05       	cpc	r19, r1
    8ec4:	28 f4       	brcc	.+10     	; 0x8ed0 <atodigit+0x36>
    8ec6:	87 55       	subi	r24, 0x57	; 87
    8ec8:	91 09       	sbc	r25, r1
    8eca:	86 17       	cp	r24, r22
    8ecc:	97 07       	cpc	r25, r23
    8ece:	14 f0       	brlt	.+4      	; 0x8ed4 <atodigit+0x3a>
    8ed0:	8f ef       	ldi	r24, 0xFF	; 255
    8ed2:	9f ef       	ldi	r25, 0xFF	; 255
    8ed4:	08 95       	ret

00008ed6 <strtol>:
    8ed6:	a0 e0       	ldi	r26, 0x00	; 0
    8ed8:	b0 e0       	ldi	r27, 0x00	; 0
    8eda:	e1 e7       	ldi	r30, 0x71	; 113
    8edc:	f7 e4       	ldi	r31, 0x47	; 71
    8ede:	0c 94 ff e6 	jmp	0x1cdfe	; 0x1cdfe <__prologue_saves__>
    8ee2:	2b 01       	movw	r4, r22
    8ee4:	8a 01       	movw	r16, r20
    8ee6:	ec 01       	movw	r28, r24
    8ee8:	28 81       	ld	r18, Y
    8eea:	01 96       	adiw	r24, 0x01	; 1
    8eec:	20 32       	cpi	r18, 0x20	; 32
    8eee:	d9 f3       	breq	.-10     	; 0x8ee6 <strtol+0x10>
    8ef0:	29 30       	cpi	r18, 0x09	; 9
    8ef2:	c9 f3       	breq	.-14     	; 0x8ee6 <strtol+0x10>
    8ef4:	2d 32       	cpi	r18, 0x2D	; 45
    8ef6:	29 f4       	brne	.+10     	; 0x8f02 <strtol+0x2c>
    8ef8:	ec 01       	movw	r28, r24
    8efa:	66 24       	eor	r6, r6
    8efc:	63 94       	inc	r6
    8efe:	71 2c       	mov	r7, r1
    8f00:	05 c0       	rjmp	.+10     	; 0x8f0c <strtol+0x36>
    8f02:	2b 32       	cpi	r18, 0x2B	; 43
    8f04:	09 f4       	brne	.+2      	; 0x8f08 <strtol+0x32>
    8f06:	ec 01       	movw	r28, r24
    8f08:	61 2c       	mov	r6, r1
    8f0a:	71 2c       	mov	r7, r1
    8f0c:	9e 01       	movw	r18, r28
    8f0e:	2f 5f       	subi	r18, 0xFF	; 255
    8f10:	3f 4f       	sbci	r19, 0xFF	; 255
    8f12:	88 81       	ld	r24, Y
    8f14:	80 33       	cpi	r24, 0x30	; 48
    8f16:	11 f4       	brne	.+4      	; 0x8f1c <strtol+0x46>
    8f18:	e9 01       	movw	r28, r18
    8f1a:	f8 cf       	rjmp	.-16     	; 0x8f0c <strtol+0x36>
    8f1c:	c1 2c       	mov	r12, r1
    8f1e:	d1 2c       	mov	r13, r1
    8f20:	76 01       	movw	r14, r12
    8f22:	48 01       	movw	r8, r16
    8f24:	01 2e       	mov	r0, r17
    8f26:	00 0c       	add	r0, r0
    8f28:	aa 08       	sbc	r10, r10
    8f2a:	bb 08       	sbc	r11, r11
    8f2c:	3c 2e       	mov	r3, r28
    8f2e:	2d 2e       	mov	r2, r29
    8f30:	89 91       	ld	r24, Y+
    8f32:	88 23       	and	r24, r24
    8f34:	31 f0       	breq	.+12     	; 0x8f42 <strtol+0x6c>
    8f36:	b8 01       	movw	r22, r16
    8f38:	90 e0       	ldi	r25, 0x00	; 0
    8f3a:	af df       	rcall	.-162    	; 0x8e9a <atodigit>
    8f3c:	fc 01       	movw	r30, r24
    8f3e:	97 ff       	sbrs	r25, 7
    8f40:	0c c0       	rjmp	.+24     	; 0x8f5a <strtol+0x84>
    8f42:	61 14       	cp	r6, r1
    8f44:	71 04       	cpc	r7, r1
    8f46:	c1 f0       	breq	.+48     	; 0x8f78 <strtol+0xa2>
    8f48:	f0 94       	com	r15
    8f4a:	e0 94       	com	r14
    8f4c:	d0 94       	com	r13
    8f4e:	c0 94       	com	r12
    8f50:	c1 1c       	adc	r12, r1
    8f52:	d1 1c       	adc	r13, r1
    8f54:	e1 1c       	adc	r14, r1
    8f56:	f1 1c       	adc	r15, r1
    8f58:	0f c0       	rjmp	.+30     	; 0x8f78 <strtol+0xa2>
    8f5a:	a5 01       	movw	r20, r10
    8f5c:	94 01       	movw	r18, r8
    8f5e:	c7 01       	movw	r24, r14
    8f60:	b6 01       	movw	r22, r12
    8f62:	0e 94 50 e6 	call	0x1cca0	; 0x1cca0 <__mulsi3>
    8f66:	6f 01       	movw	r12, r30
    8f68:	ff 0f       	add	r31, r31
    8f6a:	ee 08       	sbc	r14, r14
    8f6c:	ff 08       	sbc	r15, r15
    8f6e:	c6 0e       	add	r12, r22
    8f70:	d7 1e       	adc	r13, r23
    8f72:	e8 1e       	adc	r14, r24
    8f74:	f9 1e       	adc	r15, r25
    8f76:	da cf       	rjmp	.-76     	; 0x8f2c <strtol+0x56>
    8f78:	41 14       	cp	r4, r1
    8f7a:	51 04       	cpc	r5, r1
    8f7c:	19 f0       	breq	.+6      	; 0x8f84 <strtol+0xae>
    8f7e:	f2 01       	movw	r30, r4
    8f80:	30 82       	st	Z, r3
    8f82:	21 82       	std	Z+1, r2	; 0x01
    8f84:	c7 01       	movw	r24, r14
    8f86:	b6 01       	movw	r22, r12
    8f88:	cd b7       	in	r28, 0x3d	; 61
    8f8a:	de b7       	in	r29, 0x3e	; 62
    8f8c:	e2 e1       	ldi	r30, 0x12	; 18
    8f8e:	0c 94 1b e7 	jmp	0x1ce36	; 0x1ce36 <__epilogue_restores__>

00008f92 <atoi>:
MEMSPACE
int
atoi(const char *str)
{
    unsigned long num;
    num = strtol(str, NULL, 10);
    8f92:	4a e0       	ldi	r20, 0x0A	; 10
    8f94:	50 e0       	ldi	r21, 0x00	; 0
    8f96:	60 e0       	ldi	r22, 0x00	; 0
    8f98:	70 e0       	ldi	r23, 0x00	; 0
    8f9a:	9d df       	rcall	.-198    	; 0x8ed6 <strtol>
    return((int)num);
}
    8f9c:	cb 01       	movw	r24, r22
    8f9e:	08 95       	ret

00008fa0 <atol>:
MEMSPACE
long
atol(const char *str)
{
    unsigned long num;
    num = strtol(str, NULL, 10);
    8fa0:	4a e0       	ldi	r20, 0x0A	; 10
    8fa2:	50 e0       	ldi	r21, 0x00	; 0
    8fa4:	60 e0       	ldi	r22, 0x00	; 0
    8fa6:	70 e0       	ldi	r23, 0x00	; 0
    8fa8:	96 cf       	rjmp	.-212    	; 0x8ed6 <strtol>
    return(num);
}
    8faa:	08 95       	ret

00008fac <ld_dword>:
#endif
		if (res != FR_OK) ABORT(fs, res);
	}

	LEAVE_FF(fs, res);
}
    8fac:	fc 01       	movw	r30, r24
    8fae:	62 81       	ldd	r22, Z+2	; 0x02
    8fb0:	73 81       	ldd	r23, Z+3	; 0x03
    8fb2:	cb 01       	movw	r24, r22
    8fb4:	a0 e0       	ldi	r26, 0x00	; 0
    8fb6:	b0 e0       	ldi	r27, 0x00	; 0
    8fb8:	ba 2f       	mov	r27, r26
    8fba:	a9 2f       	mov	r26, r25
    8fbc:	98 2f       	mov	r25, r24
    8fbe:	88 27       	eor	r24, r24
    8fc0:	21 81       	ldd	r18, Z+1	; 0x01
    8fc2:	82 2b       	or	r24, r18
    8fc4:	ba 2f       	mov	r27, r26
    8fc6:	a9 2f       	mov	r26, r25
    8fc8:	98 2f       	mov	r25, r24
    8fca:	88 27       	eor	r24, r24
    8fcc:	20 81       	ld	r18, Z
    8fce:	bc 01       	movw	r22, r24
    8fd0:	cd 01       	movw	r24, r26
    8fd2:	62 2b       	or	r22, r18
    8fd4:	08 95       	ret

00008fd6 <st_dword>:
    8fd6:	fc 01       	movw	r30, r24
    8fd8:	40 83       	st	Z, r20
    8fda:	51 83       	std	Z+1, r21	; 0x01
    8fdc:	62 83       	std	Z+2, r22	; 0x02
    8fde:	73 83       	std	Z+3, r23	; 0x03
    8fe0:	08 95       	ret

00008fe2 <mem_set>:
    8fe2:	48 0f       	add	r20, r24
    8fe4:	59 1f       	adc	r21, r25
    8fe6:	fc 01       	movw	r30, r24
    8fe8:	61 93       	st	Z+, r22
    8fea:	cf 01       	movw	r24, r30
    8fec:	e4 17       	cp	r30, r20
    8fee:	f5 07       	cpc	r31, r21
    8ff0:	d1 f7       	brne	.-12     	; 0x8fe6 <mem_set+0x4>
    8ff2:	08 95       	ret

00008ff4 <mem_cmp>:
    8ff4:	dc 01       	movw	r26, r24
    8ff6:	fb 01       	movw	r30, r22
    8ff8:	2d 91       	ld	r18, X+
    8ffa:	81 91       	ld	r24, Z+
    8ffc:	30 e0       	ldi	r19, 0x00	; 0
    8ffe:	b9 01       	movw	r22, r18
    9000:	68 1b       	sub	r22, r24
    9002:	71 09       	sbc	r23, r1
    9004:	cb 01       	movw	r24, r22
    9006:	41 50       	subi	r20, 0x01	; 1
    9008:	51 09       	sbc	r21, r1
    900a:	11 f0       	breq	.+4      	; 0x9010 <mem_cmp+0x1c>
    900c:	00 97       	sbiw	r24, 0x00	; 0
    900e:	a1 f3       	breq	.-24     	; 0x8ff8 <mem_cmp+0x4>
    9010:	08 95       	ret

00009012 <clst2sect>:
    9012:	0f 93       	push	r16
    9014:	1f 93       	push	r17
    9016:	fc 01       	movw	r30, r24
    9018:	9a 01       	movw	r18, r20
    901a:	ab 01       	movw	r20, r22
    901c:	22 50       	subi	r18, 0x02	; 2
    901e:	31 09       	sbc	r19, r1
    9020:	41 09       	sbc	r20, r1
    9022:	51 09       	sbc	r21, r1
    9024:	81 8d       	ldd	r24, Z+25	; 0x19
    9026:	92 8d       	ldd	r25, Z+26	; 0x1a
    9028:	a3 8d       	ldd	r26, Z+27	; 0x1b
    902a:	b4 8d       	ldd	r27, Z+28	; 0x1c
    902c:	02 97       	sbiw	r24, 0x02	; 2
    902e:	a1 09       	sbc	r26, r1
    9030:	b1 09       	sbc	r27, r1
    9032:	28 17       	cp	r18, r24
    9034:	39 07       	cpc	r19, r25
    9036:	4a 07       	cpc	r20, r26
    9038:	5b 07       	cpc	r21, r27
    903a:	68 f4       	brcc	.+26     	; 0x9056 <clst2sect+0x44>
    903c:	a1 85       	ldd	r26, Z+9	; 0x09
    903e:	b2 85       	ldd	r27, Z+10	; 0x0a
    9040:	0e 94 df e6 	call	0x1cdbe	; 0x1cdbe <__muluhisi3>
    9044:	05 a5       	ldd	r16, Z+45	; 0x2d
    9046:	16 a5       	ldd	r17, Z+46	; 0x2e
    9048:	27 a5       	ldd	r18, Z+47	; 0x2f
    904a:	30 a9       	ldd	r19, Z+48	; 0x30
    904c:	60 0f       	add	r22, r16
    904e:	71 1f       	adc	r23, r17
    9050:	82 1f       	adc	r24, r18
    9052:	93 1f       	adc	r25, r19
    9054:	03 c0       	rjmp	.+6      	; 0x905c <clst2sect+0x4a>
    9056:	60 e0       	ldi	r22, 0x00	; 0
    9058:	70 e0       	ldi	r23, 0x00	; 0
    905a:	cb 01       	movw	r24, r22
    905c:	1f 91       	pop	r17
    905e:	0f 91       	pop	r16
    9060:	08 95       	ret

00009062 <clmt_clust>:
    9062:	cf 93       	push	r28
    9064:	df 93       	push	r29
    9066:	fc 01       	movw	r30, r24
    9068:	c2 a1       	ldd	r28, Z+34	; 0x22
    906a:	d3 a1       	ldd	r29, Z+35	; 0x23
    906c:	24 96       	adiw	r28, 0x04	; 4
    906e:	cb 01       	movw	r24, r22
    9070:	ba 01       	movw	r22, r20
    9072:	29 e0       	ldi	r18, 0x09	; 9
    9074:	96 95       	lsr	r25
    9076:	87 95       	ror	r24
    9078:	77 95       	ror	r23
    907a:	67 95       	ror	r22
    907c:	2a 95       	dec	r18
    907e:	d1 f7       	brne	.-12     	; 0x9074 <clmt_clust+0x12>
    9080:	01 90       	ld	r0, Z+
    9082:	f0 81       	ld	r31, Z
    9084:	e0 2d       	mov	r30, r0
    9086:	21 85       	ldd	r18, Z+9	; 0x09
    9088:	32 85       	ldd	r19, Z+10	; 0x0a
    908a:	40 e0       	ldi	r20, 0x00	; 0
    908c:	50 e0       	ldi	r21, 0x00	; 0
    908e:	0e 94 92 e6 	call	0x1cd24	; 0x1cd24 <__udivmodsi4>
    9092:	88 81       	ld	r24, Y
    9094:	99 81       	ldd	r25, Y+1	; 0x01
    9096:	aa 81       	ldd	r26, Y+2	; 0x02
    9098:	bb 81       	ldd	r27, Y+3	; 0x03
    909a:	00 97       	sbiw	r24, 0x00	; 0
    909c:	a1 05       	cpc	r26, r1
    909e:	b1 05       	cpc	r27, r1
    90a0:	b1 f0       	breq	.+44     	; 0x90ce <clmt_clust+0x6c>
    90a2:	28 17       	cp	r18, r24
    90a4:	39 07       	cpc	r19, r25
    90a6:	4a 07       	cpc	r20, r26
    90a8:	5b 07       	cpc	r21, r27
    90aa:	30 f0       	brcs	.+12     	; 0x90b8 <clmt_clust+0x56>
    90ac:	28 1b       	sub	r18, r24
    90ae:	39 0b       	sbc	r19, r25
    90b0:	4a 0b       	sbc	r20, r26
    90b2:	5b 0b       	sbc	r21, r27
    90b4:	28 96       	adiw	r28, 0x08	; 8
    90b6:	ed cf       	rjmp	.-38     	; 0x9092 <clmt_clust+0x30>
    90b8:	8c 81       	ldd	r24, Y+4	; 0x04
    90ba:	9d 81       	ldd	r25, Y+5	; 0x05
    90bc:	ae 81       	ldd	r26, Y+6	; 0x06
    90be:	bf 81       	ldd	r27, Y+7	; 0x07
    90c0:	bc 01       	movw	r22, r24
    90c2:	cd 01       	movw	r24, r26
    90c4:	62 0f       	add	r22, r18
    90c6:	73 1f       	adc	r23, r19
    90c8:	84 1f       	adc	r24, r20
    90ca:	95 1f       	adc	r25, r21
    90cc:	03 c0       	rjmp	.+6      	; 0x90d4 <clmt_clust+0x72>
    90ce:	60 e0       	ldi	r22, 0x00	; 0
    90d0:	70 e0       	ldi	r23, 0x00	; 0
    90d2:	cb 01       	movw	r24, r22
    90d4:	df 91       	pop	r29
    90d6:	cf 91       	pop	r28
    90d8:	08 95       	ret

000090da <sum_sfn>:
    90da:	fc 01       	movw	r30, r24
    90dc:	9c 01       	movw	r18, r24
    90de:	25 5f       	subi	r18, 0xF5	; 245
    90e0:	3f 4f       	sbci	r19, 0xFF	; 255
    90e2:	80 e0       	ldi	r24, 0x00	; 0
    90e4:	98 2f       	mov	r25, r24
    90e6:	90 fb       	bst	r25, 0
    90e8:	97 95       	ror	r25
    90ea:	97 f9       	bld	r25, 7
    90ec:	81 91       	ld	r24, Z+
    90ee:	89 0f       	add	r24, r25
    90f0:	e2 17       	cp	r30, r18
    90f2:	f3 07       	cpc	r31, r19
    90f4:	b9 f7       	brne	.-18     	; 0x90e4 <sum_sfn+0xa>
    90f6:	08 95       	ret

000090f8 <get_ldnumber>:
    90f8:	cf 93       	push	r28
    90fa:	df 93       	push	r29
    90fc:	dc 01       	movw	r26, r24
    90fe:	ed 91       	ld	r30, X+
    9100:	fc 91       	ld	r31, X
    9102:	11 97       	sbiw	r26, 0x01	; 1
    9104:	30 97       	sbiw	r30, 0x00	; 0
    9106:	f9 f0       	breq	.+62     	; 0x9146 <get_ldnumber+0x4e>
    9108:	9f 01       	movw	r18, r30
    910a:	2f 5f       	subi	r18, 0xFF	; 255
    910c:	3f 4f       	sbci	r19, 0xFF	; 255
    910e:	e9 01       	movw	r28, r18
    9110:	21 97       	sbiw	r28, 0x01	; 1
    9112:	88 81       	ld	r24, Y
    9114:	80 32       	cpi	r24, 0x20	; 32
    9116:	18 f0       	brcs	.+6      	; 0x911e <get_ldnumber+0x26>
    9118:	8a 33       	cpi	r24, 0x3A	; 58
    911a:	b9 f7       	brne	.-18     	; 0x910a <get_ldnumber+0x12>
    911c:	04 c0       	rjmp	.+8      	; 0x9126 <get_ldnumber+0x2e>
    911e:	80 91 26 18 	lds	r24, 0x1826	; 0x801826 <CurrVol>
    9122:	90 e0       	ldi	r25, 0x00	; 0
    9124:	12 c0       	rjmp	.+36     	; 0x914a <get_ldnumber+0x52>
    9126:	90 81       	ld	r25, Z
    9128:	80 ed       	ldi	r24, 0xD0	; 208
    912a:	89 0f       	add	r24, r25
    912c:	8a 30       	cpi	r24, 0x0A	; 10
    912e:	58 f4       	brcc	.+22     	; 0x9146 <get_ldnumber+0x4e>
    9130:	32 96       	adiw	r30, 0x02	; 2
    9132:	2e 17       	cp	r18, r30
    9134:	3f 07       	cpc	r19, r31
    9136:	39 f4       	brne	.+14     	; 0x9146 <get_ldnumber+0x4e>
    9138:	90 33       	cpi	r25, 0x30	; 48
    913a:	29 f4       	brne	.+10     	; 0x9146 <get_ldnumber+0x4e>
    913c:	2d 93       	st	X+, r18
    913e:	3c 93       	st	X, r19
    9140:	80 e0       	ldi	r24, 0x00	; 0
    9142:	90 e0       	ldi	r25, 0x00	; 0
    9144:	02 c0       	rjmp	.+4      	; 0x914a <get_ldnumber+0x52>
    9146:	8f ef       	ldi	r24, 0xFF	; 255
    9148:	9f ef       	ldi	r25, 0xFF	; 255
    914a:	df 91       	pop	r29
    914c:	cf 91       	pop	r28
    914e:	08 95       	ret

00009150 <validate>:
    9150:	0f 93       	push	r16
    9152:	1f 93       	push	r17
    9154:	cf 93       	push	r28
    9156:	df 93       	push	r29
    9158:	ec 01       	movw	r28, r24
    915a:	8b 01       	movw	r16, r22
    915c:	89 2b       	or	r24, r25
    915e:	f9 f0       	breq	.+62     	; 0x919e <validate+0x4e>
    9160:	e8 81       	ld	r30, Y
    9162:	f9 81       	ldd	r31, Y+1	; 0x01
    9164:	30 97       	sbiw	r30, 0x00	; 0
    9166:	d9 f0       	breq	.+54     	; 0x919e <validate+0x4e>
    9168:	80 81       	ld	r24, Z
    916a:	88 23       	and	r24, r24
    916c:	c1 f0       	breq	.+48     	; 0x919e <validate+0x4e>
    916e:	2a 81       	ldd	r18, Y+2	; 0x02
    9170:	3b 81       	ldd	r19, Y+3	; 0x03
    9172:	85 81       	ldd	r24, Z+5	; 0x05
    9174:	96 81       	ldd	r25, Z+6	; 0x06
    9176:	28 17       	cp	r18, r24
    9178:	39 07       	cpc	r19, r25
    917a:	89 f4       	brne	.+34     	; 0x919e <validate+0x4e>
    917c:	81 81       	ldd	r24, Z+1	; 0x01
    917e:	0e 94 be 69 	call	0xd37c	; 0xd37c <disk_status>
    9182:	80 fd       	sbrc	r24, 0
    9184:	0c c0       	rjmp	.+24     	; 0x919e <validate+0x4e>
    9186:	28 81       	ld	r18, Y
    9188:	39 81       	ldd	r19, Y+1	; 0x01
    918a:	80 e0       	ldi	r24, 0x00	; 0
    918c:	90 e0       	ldi	r25, 0x00	; 0
    918e:	f8 01       	movw	r30, r16
    9190:	31 83       	std	Z+1, r19	; 0x01
    9192:	20 83       	st	Z, r18
    9194:	df 91       	pop	r29
    9196:	cf 91       	pop	r28
    9198:	1f 91       	pop	r17
    919a:	0f 91       	pop	r16
    919c:	08 95       	ret
    919e:	89 e0       	ldi	r24, 0x09	; 9
    91a0:	90 e0       	ldi	r25, 0x00	; 0
    91a2:	20 e0       	ldi	r18, 0x00	; 0
    91a4:	30 e0       	ldi	r19, 0x00	; 0
    91a6:	f3 cf       	rjmp	.-26     	; 0x918e <validate+0x3e>

000091a8 <get_fileinfo>:
    91a8:	a8 e0       	ldi	r26, 0x08	; 8
    91aa:	b0 e0       	ldi	r27, 0x00	; 0
    91ac:	ea ed       	ldi	r30, 0xDA	; 218
    91ae:	f8 e4       	ldi	r31, 0x48	; 72
    91b0:	0c 94 ff e6 	jmp	0x1cdfe	; 0x1cdfe <__prologue_saves__>
    91b4:	fc 01       	movw	r30, r24
    91b6:	01 90       	ld	r0, Z+
    91b8:	f0 81       	ld	r31, Z
    91ba:	e0 2d       	mov	r30, r0
    91bc:	f8 87       	std	Y+8, r31	; 0x08
    91be:	ef 83       	std	Y+7, r30	; 0x07
    91c0:	fb 01       	movw	r30, r22
    91c2:	16 8a       	std	Z+22, r1	; 0x16
    91c4:	fc 01       	movw	r30, r24
    91c6:	06 89       	ldd	r16, Z+22	; 0x16
    91c8:	17 89       	ldd	r17, Z+23	; 0x17
    91ca:	20 8d       	ldd	r18, Z+24	; 0x18
    91cc:	31 8d       	ldd	r19, Z+25	; 0x19
    91ce:	01 15       	cp	r16, r1
    91d0:	11 05       	cpc	r17, r1
    91d2:	21 05       	cpc	r18, r1
    91d4:	31 05       	cpc	r19, r1
    91d6:	09 f4       	brne	.+2      	; 0x91da <get_fileinfo+0x32>
    91d8:	0d c1       	rjmp	.+538    	; 0x93f4 <get_fileinfo+0x24c>
    91da:	7e 83       	std	Y+6, r23	; 0x06
    91dc:	6d 83       	std	Y+5, r22	; 0x05
    91de:	7c 01       	movw	r14, r24
    91e0:	80 a5       	ldd	r24, Z+40	; 0x28
    91e2:	91 a5       	ldd	r25, Z+41	; 0x29
    91e4:	a2 a5       	ldd	r26, Z+42	; 0x2a
    91e6:	b3 a5       	ldd	r27, Z+43	; 0x2b
    91e8:	8f 3f       	cpi	r24, 0xFF	; 255
    91ea:	9f 4f       	sbci	r25, 0xFF	; 255
    91ec:	af 4f       	sbci	r26, 0xFF	; 255
    91ee:	bf 4f       	sbci	r27, 0xFF	; 255
    91f0:	09 f4       	brne	.+2      	; 0x91f4 <get_fileinfo+0x4c>
    91f2:	6c c0       	rjmp	.+216    	; 0x92cc <get_fileinfo+0x124>
    91f4:	a1 2c       	mov	r10, r1
    91f6:	b1 2c       	mov	r11, r1
    91f8:	c1 2c       	mov	r12, r1
    91fa:	d1 2c       	mov	r13, r1
    91fc:	00 e0       	ldi	r16, 0x00	; 0
    91fe:	10 e0       	ldi	r17, 0x00	; 0
    9200:	66 24       	eor	r6, r6
    9202:	6a 94       	dec	r6
    9204:	71 2c       	mov	r7, r1
    9206:	ef 81       	ldd	r30, Y+7	; 0x07
    9208:	f8 85       	ldd	r31, Y+8	; 0x08
    920a:	83 85       	ldd	r24, Z+11	; 0x0b
    920c:	94 85       	ldd	r25, Z+12	; 0x0c
    920e:	fc 01       	movw	r30, r24
    9210:	ea 0d       	add	r30, r10
    9212:	fb 1d       	adc	r31, r11
    9214:	80 81       	ld	r24, Z
    9216:	91 81       	ldd	r25, Z+1	; 0x01
    9218:	00 97       	sbiw	r24, 0x00	; 0
    921a:	09 f4       	brne	.+2      	; 0x921e <get_fileinfo+0x76>
    921c:	4d c0       	rjmp	.+154    	; 0x92b8 <get_fileinfo+0x110>
    921e:	c1 14       	cp	r12, r1
    9220:	d1 04       	cpc	r13, r1
    9222:	29 f4       	brne	.+10     	; 0x922e <get_fileinfo+0x86>
    9224:	9c 01       	movw	r18, r24
    9226:	38 5d       	subi	r19, 0xD8	; 216
    9228:	21 15       	cp	r18, r1
    922a:	38 40       	sbci	r19, 0x08	; 8
    922c:	f0 f1       	brcs	.+124    	; 0x92aa <get_fileinfo+0x102>
    922e:	43 01       	movw	r8, r6
    9230:	80 1a       	sub	r8, r16
    9232:	91 0a       	sbc	r9, r17
    9234:	a6 01       	movw	r20, r12
    9236:	60 e0       	ldi	r22, 0x00	; 0
    9238:	70 e0       	ldi	r23, 0x00	; 0
    923a:	2a 01       	movw	r4, r20
    923c:	33 24       	eor	r3, r3
    923e:	22 24       	eor	r2, r2
    9240:	a0 e0       	ldi	r26, 0x00	; 0
    9242:	b0 e0       	ldi	r27, 0x00	; 0
    9244:	28 2a       	or	r2, r24
    9246:	39 2a       	or	r3, r25
    9248:	4a 2a       	or	r4, r26
    924a:	5b 2a       	or	r5, r27
    924c:	c2 01       	movw	r24, r4
    924e:	b1 01       	movw	r22, r2
    9250:	45 eb       	ldi	r20, 0xB5	; 181
    9252:	51 e0       	ldi	r21, 0x01	; 1
    9254:	0e 94 14 69 	call	0xd228	; 0xd228 <ff_uni2oem>
    9258:	8f 3f       	cpi	r24, 0xFF	; 255
    925a:	91 05       	cpc	r25, r1
    925c:	89 f0       	breq	.+34     	; 0x9280 <get_fileinfo+0xd8>
    925e:	80 f0       	brcs	.+32     	; 0x9280 <get_fileinfo+0xd8>
    9260:	22 e0       	ldi	r18, 0x02	; 2
    9262:	82 16       	cp	r8, r18
    9264:	91 04       	cpc	r9, r1
    9266:	c0 f0       	brcs	.+48     	; 0x9298 <get_fileinfo+0xf0>
    9268:	ed 81       	ldd	r30, Y+5	; 0x05
    926a:	fe 81       	ldd	r31, Y+6	; 0x06
    926c:	e0 0f       	add	r30, r16
    926e:	f1 1f       	adc	r31, r17
    9270:	96 8b       	std	Z+22, r25	; 0x16
    9272:	ed 81       	ldd	r30, Y+5	; 0x05
    9274:	fe 81       	ldd	r31, Y+6	; 0x06
    9276:	e0 0f       	add	r30, r16
    9278:	f1 1f       	adc	r31, r17
    927a:	87 8b       	std	Z+23, r24	; 0x17
    927c:	82 e0       	ldi	r24, 0x02	; 2
    927e:	0d c0       	rjmp	.+26     	; 0x929a <get_fileinfo+0xf2>
    9280:	00 97       	sbiw	r24, 0x00	; 0
    9282:	51 f0       	breq	.+20     	; 0x9298 <get_fileinfo+0xf0>
    9284:	81 14       	cp	r8, r1
    9286:	91 04       	cpc	r9, r1
    9288:	39 f0       	breq	.+14     	; 0x9298 <get_fileinfo+0xf0>
    928a:	ed 81       	ldd	r30, Y+5	; 0x05
    928c:	fe 81       	ldd	r31, Y+6	; 0x06
    928e:	e0 0f       	add	r30, r16
    9290:	f1 1f       	adc	r31, r17
    9292:	86 8b       	std	Z+22, r24	; 0x16
    9294:	81 e0       	ldi	r24, 0x01	; 1
    9296:	01 c0       	rjmp	.+2      	; 0x929a <get_fileinfo+0xf2>
    9298:	80 e0       	ldi	r24, 0x00	; 0
    929a:	28 2f       	mov	r18, r24
    929c:	30 e0       	ldi	r19, 0x00	; 0
    929e:	88 23       	and	r24, r24
    92a0:	49 f0       	breq	.+18     	; 0x92b4 <get_fileinfo+0x10c>
    92a2:	02 0f       	add	r16, r18
    92a4:	13 1f       	adc	r17, r19
    92a6:	80 e0       	ldi	r24, 0x00	; 0
    92a8:	90 e0       	ldi	r25, 0x00	; 0
    92aa:	32 e0       	ldi	r19, 0x02	; 2
    92ac:	a3 0e       	add	r10, r19
    92ae:	b1 1c       	adc	r11, r1
    92b0:	6c 01       	movw	r12, r24
    92b2:	a9 cf       	rjmp	.-174    	; 0x9206 <get_fileinfo+0x5e>
    92b4:	00 e0       	ldi	r16, 0x00	; 0
    92b6:	10 e0       	ldi	r17, 0x00	; 0
    92b8:	c1 14       	cp	r12, r1
    92ba:	d1 04       	cpc	r13, r1
    92bc:	11 f0       	breq	.+4      	; 0x92c2 <get_fileinfo+0x11a>
    92be:	00 e0       	ldi	r16, 0x00	; 0
    92c0:	10 e0       	ldi	r17, 0x00	; 0
    92c2:	ed 81       	ldd	r30, Y+5	; 0x05
    92c4:	fe 81       	ldd	r31, Y+6	; 0x06
    92c6:	e0 0f       	add	r30, r16
    92c8:	f1 1f       	adc	r31, r17
    92ca:	16 8a       	std	Z+22, r1	; 0x16
    92cc:	80 e0       	ldi	r24, 0x00	; 0
    92ce:	90 e0       	ldi	r25, 0x00	; 0
    92d0:	20 e0       	ldi	r18, 0x00	; 0
    92d2:	30 e0       	ldi	r19, 0x00	; 0
    92d4:	6e e2       	ldi	r22, 0x2E	; 46
    92d6:	a9 01       	movw	r20, r18
    92d8:	4f 5f       	subi	r20, 0xFF	; 255
    92da:	5f 4f       	sbci	r21, 0xFF	; 255
    92dc:	f7 01       	movw	r30, r14
    92de:	a2 8d       	ldd	r26, Z+26	; 0x1a
    92e0:	b3 8d       	ldd	r27, Z+27	; 0x1b
    92e2:	fd 01       	movw	r30, r26
    92e4:	e2 0f       	add	r30, r18
    92e6:	f3 1f       	adc	r31, r19
    92e8:	20 81       	ld	r18, Z
    92ea:	30 e0       	ldi	r19, 0x00	; 0
    92ec:	20 32       	cpi	r18, 0x20	; 32
    92ee:	31 05       	cpc	r19, r1
    92f0:	b9 f0       	breq	.+46     	; 0x9320 <get_fileinfo+0x178>
    92f2:	25 30       	cpi	r18, 0x05	; 5
    92f4:	31 05       	cpc	r19, r1
    92f6:	11 f4       	brne	.+4      	; 0x92fc <get_fileinfo+0x154>
    92f8:	25 ee       	ldi	r18, 0xE5	; 229
    92fa:	30 e0       	ldi	r19, 0x00	; 0
    92fc:	49 30       	cpi	r20, 0x09	; 9
    92fe:	51 05       	cpc	r21, r1
    9300:	49 f4       	brne	.+18     	; 0x9314 <get_fileinfo+0x16c>
    9302:	8c 30       	cpi	r24, 0x0C	; 12
    9304:	91 05       	cpc	r25, r1
    9306:	30 f4       	brcc	.+12     	; 0x9314 <get_fileinfo+0x16c>
    9308:	ed 81       	ldd	r30, Y+5	; 0x05
    930a:	fe 81       	ldd	r31, Y+6	; 0x06
    930c:	e8 0f       	add	r30, r24
    930e:	f9 1f       	adc	r31, r25
    9310:	61 87       	std	Z+9, r22	; 0x09
    9312:	01 96       	adiw	r24, 0x01	; 1
    9314:	ed 81       	ldd	r30, Y+5	; 0x05
    9316:	fe 81       	ldd	r31, Y+6	; 0x06
    9318:	e8 0f       	add	r30, r24
    931a:	f9 1f       	adc	r31, r25
    931c:	21 87       	std	Z+9, r18	; 0x09
    931e:	01 96       	adiw	r24, 0x01	; 1
    9320:	9a 01       	movw	r18, r20
    9322:	4b 30       	cpi	r20, 0x0B	; 11
    9324:	51 05       	cpc	r21, r1
    9326:	b9 f6       	brne	.-82     	; 0x92d6 <get_fileinfo+0x12e>
    9328:	ed 81       	ldd	r30, Y+5	; 0x05
    932a:	fe 81       	ldd	r31, Y+6	; 0x06
    932c:	e8 0f       	add	r30, r24
    932e:	f9 1f       	adc	r31, r25
    9330:	11 86       	std	Z+9, r1	; 0x09
    9332:	ed 81       	ldd	r30, Y+5	; 0x05
    9334:	fe 81       	ldd	r31, Y+6	; 0x06
    9336:	26 89       	ldd	r18, Z+22	; 0x16
    9338:	21 11       	cpse	r18, r1
    933a:	3a c0       	rjmp	.+116    	; 0x93b0 <get_fileinfo+0x208>
    933c:	89 2b       	or	r24, r25
    933e:	31 f0       	breq	.+12     	; 0x934c <get_fileinfo+0x1a4>
    9340:	df 01       	movw	r26, r30
    9342:	19 96       	adiw	r26, 0x09	; 9
    9344:	58 e0       	ldi	r21, 0x08	; 8
    9346:	20 e0       	ldi	r18, 0x00	; 0
    9348:	30 e0       	ldi	r19, 0x00	; 0
    934a:	16 c0       	rjmp	.+44     	; 0x9378 <get_fileinfo+0x1d0>
    934c:	8f e3       	ldi	r24, 0x3F	; 63
    934e:	ed 81       	ldd	r30, Y+5	; 0x05
    9350:	fe 81       	ldd	r31, Y+6	; 0x06
    9352:	86 8b       	std	Z+22, r24	; 0x16
    9354:	21 e0       	ldi	r18, 0x01	; 1
    9356:	30 e0       	ldi	r19, 0x00	; 0
    9358:	1c c0       	rjmp	.+56     	; 0x9392 <get_fileinfo+0x1ea>
    935a:	90 e0       	ldi	r25, 0x00	; 0
    935c:	8e 32       	cpi	r24, 0x2E	; 46
    935e:	91 05       	cpc	r25, r1
    9360:	09 f4       	brne	.+2      	; 0x9364 <get_fileinfo+0x1bc>
    9362:	50 e1       	ldi	r21, 0x10	; 16
    9364:	bc 01       	movw	r22, r24
    9366:	61 54       	subi	r22, 0x41	; 65
    9368:	71 09       	sbc	r23, r1
    936a:	6a 31       	cpi	r22, 0x1A	; 26
    936c:	71 05       	cpc	r23, r1
    936e:	40 f0       	brcs	.+16     	; 0x9380 <get_fileinfo+0x1d8>
    9370:	fd 01       	movw	r30, r26
    9372:	84 87       	std	Z+12, r24	; 0x0c
    9374:	2f 5f       	subi	r18, 0xFF	; 255
    9376:	3f 4f       	sbci	r19, 0xFF	; 255
    9378:	8d 91       	ld	r24, X+
    937a:	81 11       	cpse	r24, r1
    937c:	ee cf       	rjmp	.-36     	; 0x935a <get_fileinfo+0x1b2>
    937e:	09 c0       	rjmp	.+18     	; 0x9392 <get_fileinfo+0x1ea>
    9380:	f7 01       	movw	r30, r14
    9382:	62 8d       	ldd	r22, Z+26	; 0x1a
    9384:	73 8d       	ldd	r23, Z+27	; 0x1b
    9386:	fb 01       	movw	r30, r22
    9388:	44 85       	ldd	r20, Z+12	; 0x0c
    938a:	45 23       	and	r20, r21
    938c:	89 f3       	breq	.-30     	; 0x9370 <get_fileinfo+0x1c8>
    938e:	80 96       	adiw	r24, 0x20	; 32
    9390:	ef cf       	rjmp	.-34     	; 0x9370 <get_fileinfo+0x1c8>
    9392:	ed 81       	ldd	r30, Y+5	; 0x05
    9394:	fe 81       	ldd	r31, Y+6	; 0x06
    9396:	e2 0f       	add	r30, r18
    9398:	f3 1f       	adc	r31, r19
    939a:	16 8a       	std	Z+22, r1	; 0x16
    939c:	f7 01       	movw	r30, r14
    939e:	82 8d       	ldd	r24, Z+26	; 0x1a
    93a0:	93 8d       	ldd	r25, Z+27	; 0x1b
    93a2:	fc 01       	movw	r30, r24
    93a4:	84 85       	ldd	r24, Z+12	; 0x0c
    93a6:	81 11       	cpse	r24, r1
    93a8:	03 c0       	rjmp	.+6      	; 0x93b0 <get_fileinfo+0x208>
    93aa:	ed 81       	ldd	r30, Y+5	; 0x05
    93ac:	fe 81       	ldd	r31, Y+6	; 0x06
    93ae:	11 86       	std	Z+9, r1	; 0x09
    93b0:	f7 01       	movw	r30, r14
    93b2:	82 8d       	ldd	r24, Z+26	; 0x1a
    93b4:	93 8d       	ldd	r25, Z+27	; 0x1b
    93b6:	fc 01       	movw	r30, r24
    93b8:	83 85       	ldd	r24, Z+11	; 0x0b
    93ba:	ed 81       	ldd	r30, Y+5	; 0x05
    93bc:	fe 81       	ldd	r31, Y+6	; 0x06
    93be:	80 87       	std	Z+8, r24	; 0x08
    93c0:	f7 01       	movw	r30, r14
    93c2:	02 8d       	ldd	r16, Z+26	; 0x1a
    93c4:	13 8d       	ldd	r17, Z+27	; 0x1b
    93c6:	c8 01       	movw	r24, r16
    93c8:	4c 96       	adiw	r24, 0x1c	; 28
    93ca:	f0 dd       	rcall	.-1056   	; 0x8fac <ld_dword>
    93cc:	ed 81       	ldd	r30, Y+5	; 0x05
    93ce:	fe 81       	ldd	r31, Y+6	; 0x06
    93d0:	60 83       	st	Z, r22
    93d2:	71 83       	std	Z+1, r23	; 0x01
    93d4:	82 83       	std	Z+2, r24	; 0x02
    93d6:	93 83       	std	Z+3, r25	; 0x03
    93d8:	f8 01       	movw	r30, r16
    93da:	86 89       	ldd	r24, Z+22	; 0x16
    93dc:	97 89       	ldd	r25, Z+23	; 0x17
    93de:	ed 81       	ldd	r30, Y+5	; 0x05
    93e0:	fe 81       	ldd	r31, Y+6	; 0x06
    93e2:	97 83       	std	Z+7, r25	; 0x07
    93e4:	86 83       	std	Z+6, r24	; 0x06
    93e6:	f8 01       	movw	r30, r16
    93e8:	80 8d       	ldd	r24, Z+24	; 0x18
    93ea:	91 8d       	ldd	r25, Z+25	; 0x19
    93ec:	ed 81       	ldd	r30, Y+5	; 0x05
    93ee:	fe 81       	ldd	r31, Y+6	; 0x06
    93f0:	95 83       	std	Z+5, r25	; 0x05
    93f2:	84 83       	std	Z+4, r24	; 0x04
    93f4:	28 96       	adiw	r28, 0x08	; 8
    93f6:	e2 e1       	ldi	r30, 0x12	; 18
    93f8:	0c 94 1b e7 	jmp	0x1ce36	; 0x1ce36 <__epilogue_restores__>

000093fc <mem_cpy.part.0>:
    93fc:	fb 01       	movw	r30, r22
    93fe:	48 0f       	add	r20, r24
    9400:	59 1f       	adc	r21, r25
    9402:	21 91       	ld	r18, Z+
    9404:	dc 01       	movw	r26, r24
    9406:	2d 93       	st	X+, r18
    9408:	cd 01       	movw	r24, r26
    940a:	a4 17       	cp	r26, r20
    940c:	b5 07       	cpc	r27, r21
    940e:	c9 f7       	brne	.-14     	; 0x9402 <mem_cpy.part.0+0x6>
    9410:	08 95       	ret

00009412 <ld_clust.isra.3>:
    9412:	fb 01       	movw	r30, r22
    9414:	42 8d       	ldd	r20, Z+26	; 0x1a
    9416:	53 8d       	ldd	r21, Z+27	; 0x1b
    9418:	60 e0       	ldi	r22, 0x00	; 0
    941a:	70 e0       	ldi	r23, 0x00	; 0
    941c:	83 30       	cpi	r24, 0x03	; 3
    941e:	59 f4       	brne	.+22     	; 0x9436 <ld_clust.isra.3+0x24>
    9420:	84 89       	ldd	r24, Z+20	; 0x14
    9422:	95 89       	ldd	r25, Z+21	; 0x15
    9424:	a0 e0       	ldi	r26, 0x00	; 0
    9426:	b0 e0       	ldi	r27, 0x00	; 0
    9428:	dc 01       	movw	r26, r24
    942a:	99 27       	eor	r25, r25
    942c:	88 27       	eor	r24, r24
    942e:	48 2b       	or	r20, r24
    9430:	59 2b       	or	r21, r25
    9432:	6a 2b       	or	r22, r26
    9434:	7b 2b       	or	r23, r27
    9436:	cb 01       	movw	r24, r22
    9438:	ba 01       	movw	r22, r20
    943a:	08 95       	ret

0000943c <st_clust.isra.4>:
    943c:	fb 01       	movw	r30, r22
    943e:	22 8f       	std	Z+26, r18	; 0x1a
    9440:	33 8f       	std	Z+27, r19	; 0x1b
    9442:	dc 01       	movw	r26, r24
    9444:	8c 91       	ld	r24, X
    9446:	83 30       	cpi	r24, 0x03	; 3
    9448:	29 f4       	brne	.+10     	; 0x9454 <st_clust.isra.4+0x18>
    944a:	ca 01       	movw	r24, r20
    944c:	aa 27       	eor	r26, r26
    944e:	bb 27       	eor	r27, r27
    9450:	84 8b       	std	Z+20, r24	; 0x14
    9452:	95 8b       	std	Z+21, r25	; 0x15
    9454:	08 95       	ret

00009456 <sync_window.part.5>:
    9456:	8f 92       	push	r8
    9458:	9f 92       	push	r9
    945a:	af 92       	push	r10
    945c:	bf 92       	push	r11
    945e:	ef 92       	push	r14
    9460:	ff 92       	push	r15
    9462:	0f 93       	push	r16
    9464:	1f 93       	push	r17
    9466:	cf 93       	push	r28
    9468:	df 93       	push	r29
    946a:	ec 01       	movw	r28, r24
    946c:	7c 01       	movw	r14, r24
    946e:	45 e3       	ldi	r20, 0x35	; 53
    9470:	e4 0e       	add	r14, r20
    9472:	f1 1c       	adc	r15, r1
    9474:	29 a9       	ldd	r18, Y+49	; 0x31
    9476:	3a a9       	ldd	r19, Y+50	; 0x32
    9478:	4b a9       	ldd	r20, Y+51	; 0x33
    947a:	5c a9       	ldd	r21, Y+52	; 0x34
    947c:	01 e0       	ldi	r16, 0x01	; 1
    947e:	10 e0       	ldi	r17, 0x00	; 0
    9480:	b7 01       	movw	r22, r14
    9482:	89 81       	ldd	r24, Y+1	; 0x01
    9484:	0e 94 da 69 	call	0xd3b4	; 0xd3b4 <disk_write>
    9488:	89 2b       	or	r24, r25
    948a:	41 f5       	brne	.+80     	; 0x94dc <sync_window.part.5+0x86>
    948c:	1b 82       	std	Y+3, r1	; 0x03
    948e:	09 a9       	ldd	r16, Y+49	; 0x31
    9490:	1a a9       	ldd	r17, Y+50	; 0x32
    9492:	2b a9       	ldd	r18, Y+51	; 0x33
    9494:	3c a9       	ldd	r19, Y+52	; 0x34
    9496:	8d 8d       	ldd	r24, Y+29	; 0x1d
    9498:	9e 8d       	ldd	r25, Y+30	; 0x1e
    949a:	af 8d       	ldd	r26, Y+31	; 0x1f
    949c:	b8 a1       	ldd	r27, Y+32	; 0x20
    949e:	8d a0       	ldd	r8, Y+37	; 0x25
    94a0:	9e a0       	ldd	r9, Y+38	; 0x26
    94a2:	af a0       	ldd	r10, Y+39	; 0x27
    94a4:	b8 a4       	ldd	r11, Y+40	; 0x28
    94a6:	b9 01       	movw	r22, r18
    94a8:	a8 01       	movw	r20, r16
    94aa:	48 19       	sub	r20, r8
    94ac:	59 09       	sbc	r21, r9
    94ae:	6a 09       	sbc	r22, r10
    94b0:	7b 09       	sbc	r23, r11
    94b2:	48 17       	cp	r20, r24
    94b4:	59 07       	cpc	r21, r25
    94b6:	6a 07       	cpc	r22, r26
    94b8:	7b 07       	cpc	r23, r27
    94ba:	98 f4       	brcc	.+38     	; 0x94e2 <sync_window.part.5+0x8c>
    94bc:	6a 81       	ldd	r22, Y+2	; 0x02
    94be:	62 30       	cpi	r22, 0x02	; 2
    94c0:	81 f4       	brne	.+32     	; 0x94e2 <sync_window.part.5+0x8c>
    94c2:	a9 01       	movw	r20, r18
    94c4:	98 01       	movw	r18, r16
    94c6:	28 0f       	add	r18, r24
    94c8:	39 1f       	adc	r19, r25
    94ca:	4a 1f       	adc	r20, r26
    94cc:	5b 1f       	adc	r21, r27
    94ce:	01 e0       	ldi	r16, 0x01	; 1
    94d0:	10 e0       	ldi	r17, 0x00	; 0
    94d2:	b7 01       	movw	r22, r14
    94d4:	89 81       	ldd	r24, Y+1	; 0x01
    94d6:	0e 94 da 69 	call	0xd3b4	; 0xd3b4 <disk_write>
    94da:	03 c0       	rjmp	.+6      	; 0x94e2 <sync_window.part.5+0x8c>
    94dc:	81 e0       	ldi	r24, 0x01	; 1
    94de:	90 e0       	ldi	r25, 0x00	; 0
    94e0:	02 c0       	rjmp	.+4      	; 0x94e6 <sync_window.part.5+0x90>
    94e2:	80 e0       	ldi	r24, 0x00	; 0
    94e4:	90 e0       	ldi	r25, 0x00	; 0
    94e6:	df 91       	pop	r29
    94e8:	cf 91       	pop	r28
    94ea:	1f 91       	pop	r17
    94ec:	0f 91       	pop	r16
    94ee:	ff 90       	pop	r15
    94f0:	ef 90       	pop	r14
    94f2:	bf 90       	pop	r11
    94f4:	af 90       	pop	r10
    94f6:	9f 90       	pop	r9
    94f8:	8f 90       	pop	r8
    94fa:	08 95       	ret

000094fc <sync_fs>:
    94fc:	ef 92       	push	r14
    94fe:	ff 92       	push	r15
    9500:	0f 93       	push	r16
    9502:	1f 93       	push	r17
    9504:	cf 93       	push	r28
    9506:	df 93       	push	r29
    9508:	ec 01       	movw	r28, r24
    950a:	8b 81       	ldd	r24, Y+3	; 0x03
    950c:	81 11       	cpse	r24, r1
    950e:	05 c0       	rjmp	.+10     	; 0x951a <sync_fs+0x1e>
    9510:	88 81       	ld	r24, Y
    9512:	83 30       	cpi	r24, 0x03	; 3
    9514:	09 f0       	breq	.+2      	; 0x9518 <sync_fs+0x1c>
    9516:	52 c0       	rjmp	.+164    	; 0x95bc <sync_fs+0xc0>
    9518:	06 c0       	rjmp	.+12     	; 0x9526 <sync_fs+0x2a>
    951a:	ce 01       	movw	r24, r28
    951c:	9c df       	rcall	.-200    	; 0x9456 <sync_window.part.5>
    951e:	00 97       	sbiw	r24, 0x00	; 0
    9520:	09 f0       	breq	.+2      	; 0x9524 <sync_fs+0x28>
    9522:	59 c0       	rjmp	.+178    	; 0x95d6 <sync_fs+0xda>
    9524:	f5 cf       	rjmp	.-22     	; 0x9510 <sync_fs+0x14>
    9526:	8c 81       	ldd	r24, Y+4	; 0x04
    9528:	81 30       	cpi	r24, 0x01	; 1
    952a:	09 f0       	breq	.+2      	; 0x952e <sync_fs+0x32>
    952c:	47 c0       	rjmp	.+142    	; 0x95bc <sync_fs+0xc0>
    952e:	40 e0       	ldi	r20, 0x00	; 0
    9530:	52 e0       	ldi	r21, 0x02	; 2
    9532:	60 e0       	ldi	r22, 0x00	; 0
    9534:	70 e0       	ldi	r23, 0x00	; 0
    9536:	7e 01       	movw	r14, r28
    9538:	85 e3       	ldi	r24, 0x35	; 53
    953a:	e8 0e       	add	r14, r24
    953c:	f1 1c       	adc	r15, r1
    953e:	c7 01       	movw	r24, r14
    9540:	50 dd       	rcall	.-1376   	; 0x8fe2 <mem_set>
    9542:	85 e5       	ldi	r24, 0x55	; 85
    9544:	fe 01       	movw	r30, r28
    9546:	ed 5c       	subi	r30, 0xCD	; 205
    9548:	fd 4f       	sbci	r31, 0xFD	; 253
    954a:	80 83       	st	Z, r24
    954c:	8a ea       	ldi	r24, 0xAA	; 170
    954e:	31 96       	adiw	r30, 0x01	; 1
    9550:	80 83       	st	Z, r24
    9552:	82 e5       	ldi	r24, 0x52	; 82
    9554:	8d ab       	std	Y+53, r24	; 0x35
    9556:	8e ab       	std	Y+54, r24	; 0x36
    9558:	81 e6       	ldi	r24, 0x61	; 97
    955a:	8f ab       	std	Y+55, r24	; 0x37
    955c:	91 e4       	ldi	r25, 0x41	; 65
    955e:	98 af       	std	Y+56, r25	; 0x38
    9560:	22 e7       	ldi	r18, 0x72	; 114
    9562:	7b 97       	sbiw	r30, 0x1b	; 27
    9564:	20 83       	st	Z, r18
    9566:	31 96       	adiw	r30, 0x01	; 1
    9568:	20 83       	st	Z, r18
    956a:	31 96       	adiw	r30, 0x01	; 1
    956c:	90 83       	st	Z, r25
    956e:	31 96       	adiw	r30, 0x01	; 1
    9570:	80 83       	st	Z, r24
    9572:	49 89       	ldd	r20, Y+17	; 0x11
    9574:	5a 89       	ldd	r21, Y+18	; 0x12
    9576:	6b 89       	ldd	r22, Y+19	; 0x13
    9578:	7c 89       	ldd	r23, Y+20	; 0x14
    957a:	ce 01       	movw	r24, r28
    957c:	83 5e       	subi	r24, 0xE3	; 227
    957e:	9d 4f       	sbci	r25, 0xFD	; 253
    9580:	2a dd       	rcall	.-1452   	; 0x8fd6 <st_dword>
    9582:	4d 85       	ldd	r20, Y+13	; 0x0d
    9584:	5e 85       	ldd	r21, Y+14	; 0x0e
    9586:	6f 85       	ldd	r22, Y+15	; 0x0f
    9588:	78 89       	ldd	r23, Y+16	; 0x10
    958a:	ce 01       	movw	r24, r28
    958c:	8f 5d       	subi	r24, 0xDF	; 223
    958e:	9d 4f       	sbci	r25, 0xFD	; 253
    9590:	22 dd       	rcall	.-1468   	; 0x8fd6 <st_dword>
    9592:	89 a1       	ldd	r24, Y+33	; 0x21
    9594:	9a a1       	ldd	r25, Y+34	; 0x22
    9596:	ab a1       	ldd	r26, Y+35	; 0x23
    9598:	bc a1       	ldd	r27, Y+36	; 0x24
    959a:	9c 01       	movw	r18, r24
    959c:	ad 01       	movw	r20, r26
    959e:	2f 5f       	subi	r18, 0xFF	; 255
    95a0:	3f 4f       	sbci	r19, 0xFF	; 255
    95a2:	4f 4f       	sbci	r20, 0xFF	; 255
    95a4:	5f 4f       	sbci	r21, 0xFF	; 255
    95a6:	29 ab       	std	Y+49, r18	; 0x31
    95a8:	3a ab       	std	Y+50, r19	; 0x32
    95aa:	4b ab       	std	Y+51, r20	; 0x33
    95ac:	5c ab       	std	Y+52, r21	; 0x34
    95ae:	01 e0       	ldi	r16, 0x01	; 1
    95b0:	10 e0       	ldi	r17, 0x00	; 0
    95b2:	b7 01       	movw	r22, r14
    95b4:	89 81       	ldd	r24, Y+1	; 0x01
    95b6:	0e 94 da 69 	call	0xd3b4	; 0xd3b4 <disk_write>
    95ba:	1c 82       	std	Y+4, r1	; 0x04
    95bc:	40 e0       	ldi	r20, 0x00	; 0
    95be:	50 e0       	ldi	r21, 0x00	; 0
    95c0:	60 e0       	ldi	r22, 0x00	; 0
    95c2:	89 81       	ldd	r24, Y+1	; 0x01
    95c4:	0e 94 ea 69 	call	0xd3d4	; 0xd3d4 <disk_ioctl>
    95c8:	31 e0       	ldi	r19, 0x01	; 1
    95ca:	20 e0       	ldi	r18, 0x00	; 0
    95cc:	89 2b       	or	r24, r25
    95ce:	09 f4       	brne	.+2      	; 0x95d2 <sync_fs+0xd6>
    95d0:	30 e0       	ldi	r19, 0x00	; 0
    95d2:	83 2f       	mov	r24, r19
    95d4:	92 2f       	mov	r25, r18
    95d6:	cd b7       	in	r28, 0x3d	; 61
    95d8:	de b7       	in	r29, 0x3e	; 62
    95da:	e6 e0       	ldi	r30, 0x06	; 6
    95dc:	0c 94 27 e7 	jmp	0x1ce4e	; 0x1ce4e <__epilogue_restores__+0x18>

000095e0 <dir_clear>:
    95e0:	4f 92       	push	r4
    95e2:	5f 92       	push	r5
    95e4:	6f 92       	push	r6
    95e6:	7f 92       	push	r7
    95e8:	af 92       	push	r10
    95ea:	bf 92       	push	r11
    95ec:	cf 92       	push	r12
    95ee:	df 92       	push	r13
    95f0:	ef 92       	push	r14
    95f2:	ff 92       	push	r15
    95f4:	0f 93       	push	r16
    95f6:	1f 93       	push	r17
    95f8:	cf 93       	push	r28
    95fa:	df 93       	push	r29
    95fc:	ec 01       	movw	r28, r24
    95fe:	6a 01       	movw	r12, r20
    9600:	7b 01       	movw	r14, r22
    9602:	8b 81       	ldd	r24, Y+3	; 0x03
    9604:	81 11       	cpse	r24, r1
    9606:	28 c0       	rjmp	.+80     	; 0x9658 <dir_clear+0x78>
    9608:	b7 01       	movw	r22, r14
    960a:	a6 01       	movw	r20, r12
    960c:	ce 01       	movw	r24, r28
    960e:	01 dd       	rcall	.-1534   	; 0x9012 <clst2sect>
    9610:	2b 01       	movw	r4, r22
    9612:	3c 01       	movw	r6, r24
    9614:	69 ab       	std	Y+49, r22	; 0x31
    9616:	7a ab       	std	Y+50, r23	; 0x32
    9618:	8b ab       	std	Y+51, r24	; 0x33
    961a:	9c ab       	std	Y+52, r25	; 0x34
    961c:	5e 01       	movw	r10, r28
    961e:	25 e3       	ldi	r18, 0x35	; 53
    9620:	a2 0e       	add	r10, r18
    9622:	b1 1c       	adc	r11, r1
    9624:	40 e0       	ldi	r20, 0x00	; 0
    9626:	52 e0       	ldi	r21, 0x02	; 2
    9628:	60 e0       	ldi	r22, 0x00	; 0
    962a:	70 e0       	ldi	r23, 0x00	; 0
    962c:	c5 01       	movw	r24, r10
    962e:	d9 dc       	rcall	.-1614   	; 0x8fe2 <mem_set>
    9630:	09 85       	ldd	r16, Y+9	; 0x09
    9632:	1a 85       	ldd	r17, Y+10	; 0x0a
    9634:	c8 01       	movw	r24, r16
    9636:	a0 e0       	ldi	r26, 0x00	; 0
    9638:	b0 e0       	ldi	r27, 0x00	; 0
    963a:	39 e0       	ldi	r19, 0x09	; 9
    963c:	88 0f       	add	r24, r24
    963e:	99 1f       	adc	r25, r25
    9640:	aa 1f       	adc	r26, r26
    9642:	bb 1f       	adc	r27, r27
    9644:	3a 95       	dec	r19
    9646:	d1 f7       	brne	.-12     	; 0x963c <dir_clear+0x5c>
    9648:	81 15       	cp	r24, r1
    964a:	90 48       	sbci	r25, 0x80	; 128
    964c:	a1 05       	cpc	r26, r1
    964e:	b1 05       	cpc	r27, r1
    9650:	50 f0       	brcs	.+20     	; 0x9666 <dir_clear+0x86>
    9652:	00 e0       	ldi	r16, 0x00	; 0
    9654:	10 e8       	ldi	r17, 0x80	; 128
    9656:	14 c0       	rjmp	.+40     	; 0x9680 <dir_clear+0xa0>
    9658:	ce 01       	movw	r24, r28
    965a:	fd de       	rcall	.-518    	; 0x9456 <sync_window.part.5>
    965c:	89 2b       	or	r24, r25
    965e:	a1 f2       	breq	.-88     	; 0x9608 <dir_clear+0x28>
    9660:	81 e0       	ldi	r24, 0x01	; 1
    9662:	90 e0       	ldi	r25, 0x00	; 0
    9664:	56 c0       	rjmp	.+172    	; 0x9712 <dir_clear+0x132>
    9666:	10 2f       	mov	r17, r16
    9668:	00 27       	eor	r16, r16
    966a:	11 0f       	add	r17, r17
    966c:	09 c0       	rjmp	.+18     	; 0x9680 <dir_clear+0xa0>
    966e:	c8 01       	movw	r24, r16
    9670:	0e 94 0e 69 	call	0xd21c	; 0xd21c <ff_memalloc>
    9674:	6c 01       	movw	r12, r24
    9676:	00 97       	sbiw	r24, 0x00	; 0
    9678:	09 f0       	breq	.+2      	; 0x967c <dir_clear+0x9c>
    967a:	40 c0       	rjmp	.+128    	; 0x96fc <dir_clear+0x11c>
    967c:	16 95       	lsr	r17
    967e:	07 95       	ror	r16
    9680:	01 30       	cpi	r16, 0x01	; 1
    9682:	82 e0       	ldi	r24, 0x02	; 2
    9684:	18 07       	cpc	r17, r24
    9686:	98 f7       	brcc	.-26     	; 0x966e <dir_clear+0x8e>
    9688:	e1 2c       	mov	r14, r1
    968a:	f1 2c       	mov	r15, r1
    968c:	11 c0       	rjmp	.+34     	; 0x96b0 <dir_clear+0xd0>
    968e:	01 e0       	ldi	r16, 0x01	; 1
    9690:	10 e0       	ldi	r17, 0x00	; 0
    9692:	a3 01       	movw	r20, r6
    9694:	92 01       	movw	r18, r4
    9696:	2e 0d       	add	r18, r14
    9698:	3f 1d       	adc	r19, r15
    969a:	41 1d       	adc	r20, r1
    969c:	51 1d       	adc	r21, r1
    969e:	b5 01       	movw	r22, r10
    96a0:	89 81       	ldd	r24, Y+1	; 0x01
    96a2:	0e 94 da 69 	call	0xd3b4	; 0xd3b4 <disk_write>
    96a6:	89 2b       	or	r24, r25
    96a8:	01 f5       	brne	.+64     	; 0x96ea <dir_clear+0x10a>
    96aa:	2f ef       	ldi	r18, 0xFF	; 255
    96ac:	e2 1a       	sub	r14, r18
    96ae:	f2 0a       	sbc	r15, r18
    96b0:	89 85       	ldd	r24, Y+9	; 0x09
    96b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    96b4:	e8 16       	cp	r14, r24
    96b6:	f9 06       	cpc	r15, r25
    96b8:	50 f3       	brcs	.-44     	; 0x968e <dir_clear+0xae>
    96ba:	17 c0       	rjmp	.+46     	; 0x96ea <dir_clear+0x10a>
    96bc:	85 01       	movw	r16, r10
    96be:	a3 01       	movw	r20, r6
    96c0:	92 01       	movw	r18, r4
    96c2:	2e 0d       	add	r18, r14
    96c4:	3f 1d       	adc	r19, r15
    96c6:	41 1d       	adc	r20, r1
    96c8:	51 1d       	adc	r21, r1
    96ca:	b6 01       	movw	r22, r12
    96cc:	89 81       	ldd	r24, Y+1	; 0x01
    96ce:	0e 94 da 69 	call	0xd3b4	; 0xd3b4 <disk_write>
    96d2:	89 2b       	or	r24, r25
    96d4:	39 f4       	brne	.+14     	; 0x96e4 <dir_clear+0x104>
    96d6:	ea 0c       	add	r14, r10
    96d8:	fb 1c       	adc	r15, r11
    96da:	89 85       	ldd	r24, Y+9	; 0x09
    96dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    96de:	e8 16       	cp	r14, r24
    96e0:	f9 06       	cpc	r15, r25
    96e2:	60 f3       	brcs	.-40     	; 0x96bc <dir_clear+0xdc>
    96e4:	c6 01       	movw	r24, r12
    96e6:	0e 94 11 69 	call	0xd222	; 0xd222 <ff_memfree>
    96ea:	81 e0       	ldi	r24, 0x01	; 1
    96ec:	90 e0       	ldi	r25, 0x00	; 0
    96ee:	29 85       	ldd	r18, Y+9	; 0x09
    96f0:	3a 85       	ldd	r19, Y+10	; 0x0a
    96f2:	2e 15       	cp	r18, r14
    96f4:	3f 05       	cpc	r19, r15
    96f6:	69 f4       	brne	.+26     	; 0x9712 <dir_clear+0x132>
    96f8:	80 e0       	ldi	r24, 0x00	; 0
    96fa:	0b c0       	rjmp	.+22     	; 0x9712 <dir_clear+0x132>
    96fc:	a8 01       	movw	r20, r16
    96fe:	60 e0       	ldi	r22, 0x00	; 0
    9700:	70 e0       	ldi	r23, 0x00	; 0
    9702:	6f dc       	rcall	.-1826   	; 0x8fe2 <mem_set>
    9704:	58 01       	movw	r10, r16
    9706:	ab 2c       	mov	r10, r11
    9708:	bb 24       	eor	r11, r11
    970a:	a6 94       	lsr	r10
    970c:	e1 2c       	mov	r14, r1
    970e:	f1 2c       	mov	r15, r1
    9710:	e4 cf       	rjmp	.-56     	; 0x96da <dir_clear+0xfa>
    9712:	df 91       	pop	r29
    9714:	cf 91       	pop	r28
    9716:	1f 91       	pop	r17
    9718:	0f 91       	pop	r16
    971a:	ff 90       	pop	r15
    971c:	ef 90       	pop	r14
    971e:	df 90       	pop	r13
    9720:	cf 90       	pop	r12
    9722:	bf 90       	pop	r11
    9724:	af 90       	pop	r10
    9726:	7f 90       	pop	r7
    9728:	6f 90       	pop	r6
    972a:	5f 90       	pop	r5
    972c:	4f 90       	pop	r4
    972e:	08 95       	ret

00009730 <move_window>:
    9730:	a0 e0       	ldi	r26, 0x00	; 0
    9732:	b0 e0       	ldi	r27, 0x00	; 0
    9734:	ee e9       	ldi	r30, 0x9E	; 158
    9736:	fb e4       	ldi	r31, 0x4B	; 75
    9738:	0c 94 09 e7 	jmp	0x1ce12	; 0x1ce12 <__prologue_saves__+0x14>
    973c:	ec 01       	movw	r28, r24
    973e:	6a 01       	movw	r12, r20
    9740:	7b 01       	movw	r14, r22
    9742:	89 a9       	ldd	r24, Y+49	; 0x31
    9744:	9a a9       	ldd	r25, Y+50	; 0x32
    9746:	ab a9       	ldd	r26, Y+51	; 0x33
    9748:	bc a9       	ldd	r27, Y+52	; 0x34
    974a:	84 17       	cp	r24, r20
    974c:	95 07       	cpc	r25, r21
    974e:	a6 07       	cpc	r26, r22
    9750:	b7 07       	cpc	r27, r23
    9752:	11 f1       	breq	.+68     	; 0x9798 <move_window+0x68>
    9754:	8b 81       	ldd	r24, Y+3	; 0x03
    9756:	81 11       	cpse	r24, r1
    9758:	13 c0       	rjmp	.+38     	; 0x9780 <move_window+0x50>
    975a:	01 e0       	ldi	r16, 0x01	; 1
    975c:	10 e0       	ldi	r17, 0x00	; 0
    975e:	a7 01       	movw	r20, r14
    9760:	96 01       	movw	r18, r12
    9762:	be 01       	movw	r22, r28
    9764:	6b 5c       	subi	r22, 0xCB	; 203
    9766:	7f 4f       	sbci	r23, 0xFF	; 255
    9768:	89 81       	ldd	r24, Y+1	; 0x01
    976a:	0e 94 ca 69 	call	0xd394	; 0xd394 <disk_read>
    976e:	89 2b       	or	r24, r25
    9770:	61 f0       	breq	.+24     	; 0x978a <move_window+0x5a>
    9772:	81 e0       	ldi	r24, 0x01	; 1
    9774:	90 e0       	ldi	r25, 0x00	; 0
    9776:	cc 24       	eor	r12, r12
    9778:	ca 94       	dec	r12
    977a:	dc 2c       	mov	r13, r12
    977c:	76 01       	movw	r14, r12
    977e:	07 c0       	rjmp	.+14     	; 0x978e <move_window+0x5e>
    9780:	ce 01       	movw	r24, r28
    9782:	69 de       	rcall	.-814    	; 0x9456 <sync_window.part.5>
    9784:	00 97       	sbiw	r24, 0x00	; 0
    9786:	51 f4       	brne	.+20     	; 0x979c <move_window+0x6c>
    9788:	e8 cf       	rjmp	.-48     	; 0x975a <move_window+0x2a>
    978a:	80 e0       	ldi	r24, 0x00	; 0
    978c:	90 e0       	ldi	r25, 0x00	; 0
    978e:	c9 aa       	std	Y+49, r12	; 0x31
    9790:	da aa       	std	Y+50, r13	; 0x32
    9792:	eb aa       	std	Y+51, r14	; 0x33
    9794:	fc aa       	std	Y+52, r15	; 0x34
    9796:	02 c0       	rjmp	.+4      	; 0x979c <move_window+0x6c>
    9798:	80 e0       	ldi	r24, 0x00	; 0
    979a:	90 e0       	ldi	r25, 0x00	; 0
    979c:	cd b7       	in	r28, 0x3d	; 61
    979e:	de b7       	in	r29, 0x3e	; 62
    97a0:	e8 e0       	ldi	r30, 0x08	; 8
    97a2:	0c 94 25 e7 	jmp	0x1ce4a	; 0x1ce4a <__epilogue_restores__+0x14>

000097a6 <check_fs>:
    97a6:	cf 93       	push	r28
    97a8:	df 93       	push	r29
    97aa:	ec 01       	movw	r28, r24
    97ac:	1b 82       	std	Y+3, r1	; 0x03
    97ae:	8f ef       	ldi	r24, 0xFF	; 255
    97b0:	9f ef       	ldi	r25, 0xFF	; 255
    97b2:	dc 01       	movw	r26, r24
    97b4:	89 ab       	std	Y+49, r24	; 0x31
    97b6:	9a ab       	std	Y+50, r25	; 0x32
    97b8:	ab ab       	std	Y+51, r26	; 0x33
    97ba:	bc ab       	std	Y+52, r27	; 0x34
    97bc:	ce 01       	movw	r24, r28
    97be:	b8 df       	rcall	.-144    	; 0x9730 <move_window>
    97c0:	89 2b       	or	r24, r25
    97c2:	19 f5       	brne	.+70     	; 0x980a <check_fs+0x64>
    97c4:	fe 01       	movw	r30, r28
    97c6:	ed 5c       	subi	r30, 0xCD	; 205
    97c8:	fd 4f       	sbci	r31, 0xFD	; 253
    97ca:	80 81       	ld	r24, Z
    97cc:	91 81       	ldd	r25, Z+1	; 0x01
    97ce:	85 35       	cpi	r24, 0x55	; 85
    97d0:	9a 4a       	sbci	r25, 0xAA	; 170
    97d2:	f1 f4       	brne	.+60     	; 0x9810 <check_fs+0x6a>
    97d4:	8d a9       	ldd	r24, Y+53	; 0x35
    97d6:	8b 3e       	cpi	r24, 0xEB	; 235
    97d8:	19 f0       	breq	.+6      	; 0x97e0 <check_fs+0x3a>
    97da:	88 5e       	subi	r24, 0xE8	; 232
    97dc:	82 30       	cpi	r24, 0x02	; 2
    97de:	f0 f4       	brcc	.+60     	; 0x981c <check_fs+0x76>
    97e0:	43 e0       	ldi	r20, 0x03	; 3
    97e2:	50 e0       	ldi	r21, 0x00	; 0
    97e4:	66 ec       	ldi	r22, 0xC6	; 198
    97e6:	78 e0       	ldi	r23, 0x08	; 8
    97e8:	ce 01       	movw	r24, r28
    97ea:	85 59       	subi	r24, 0x95	; 149
    97ec:	9f 4f       	sbci	r25, 0xFF	; 255
    97ee:	02 dc       	rcall	.-2044   	; 0x8ff4 <mem_cmp>
    97f0:	89 2b       	or	r24, r25
    97f2:	89 f0       	breq	.+34     	; 0x9816 <check_fs+0x70>
    97f4:	45 e0       	ldi	r20, 0x05	; 5
    97f6:	50 e0       	ldi	r21, 0x00	; 0
    97f8:	61 e2       	ldi	r22, 0x21	; 33
    97fa:	74 e0       	ldi	r23, 0x04	; 4
    97fc:	ce 01       	movw	r24, r28
    97fe:	89 57       	subi	r24, 0x79	; 121
    9800:	9f 4f       	sbci	r25, 0xFF	; 255
    9802:	f8 db       	rcall	.-2064   	; 0x8ff4 <mem_cmp>
    9804:	89 2b       	or	r24, r25
    9806:	51 f4       	brne	.+20     	; 0x981c <check_fs+0x76>
    9808:	06 c0       	rjmp	.+12     	; 0x9816 <check_fs+0x70>
    980a:	84 e0       	ldi	r24, 0x04	; 4
    980c:	90 e0       	ldi	r25, 0x00	; 0
    980e:	08 c0       	rjmp	.+16     	; 0x9820 <check_fs+0x7a>
    9810:	83 e0       	ldi	r24, 0x03	; 3
    9812:	90 e0       	ldi	r25, 0x00	; 0
    9814:	05 c0       	rjmp	.+10     	; 0x9820 <check_fs+0x7a>
    9816:	80 e0       	ldi	r24, 0x00	; 0
    9818:	90 e0       	ldi	r25, 0x00	; 0
    981a:	02 c0       	rjmp	.+4      	; 0x9820 <check_fs+0x7a>
    981c:	82 e0       	ldi	r24, 0x02	; 2
    981e:	90 e0       	ldi	r25, 0x00	; 0
    9820:	df 91       	pop	r29
    9822:	cf 91       	pop	r28
    9824:	08 95       	ret

00009826 <mount_volume>:
    9826:	a0 e2       	ldi	r26, 0x20	; 32
    9828:	b0 e0       	ldi	r27, 0x00	; 0
    982a:	e9 e1       	ldi	r30, 0x19	; 25
    982c:	fc e4       	ldi	r31, 0x4C	; 76
    982e:	0c 94 01 e7 	jmp	0x1ce02	; 0x1ce02 <__prologue_saves__+0x4>
    9832:	5b 01       	movw	r10, r22
    9834:	f4 2e       	mov	r15, r20
    9836:	db 01       	movw	r26, r22
    9838:	1d 92       	st	X+, r1
    983a:	1c 92       	st	X, r1
    983c:	5d dc       	rcall	.-1862   	; 0x90f8 <get_ldnumber>
    983e:	6c 01       	movw	r12, r24
    9840:	97 fd       	sbrc	r25, 7
    9842:	39 c2       	rjmp	.+1138   	; 0x9cb6 <mount_volume+0x490>
    9844:	fc 01       	movw	r30, r24
    9846:	ee 0f       	add	r30, r30
    9848:	ff 1f       	adc	r31, r31
    984a:	e7 5d       	subi	r30, 0xD7	; 215
    984c:	f7 4e       	sbci	r31, 0xE7	; 231
    984e:	00 81       	ld	r16, Z
    9850:	11 81       	ldd	r17, Z+1	; 0x01
    9852:	01 15       	cp	r16, r1
    9854:	11 05       	cpc	r17, r1
    9856:	09 f4       	brne	.+2      	; 0x985a <mount_volume+0x34>
    9858:	31 c2       	rjmp	.+1122   	; 0x9cbc <mount_volume+0x496>
    985a:	f5 01       	movw	r30, r10
    985c:	11 83       	std	Z+1, r17	; 0x01
    985e:	00 83       	st	Z, r16
    9860:	ff 2d       	mov	r31, r15
    9862:	fe 7f       	andi	r31, 0xFE	; 254
    9864:	ff 2e       	mov	r15, r31
    9866:	d8 01       	movw	r26, r16
    9868:	8c 91       	ld	r24, X
    986a:	88 23       	and	r24, r24
    986c:	71 f0       	breq	.+28     	; 0x988a <mount_volume+0x64>
    986e:	f8 01       	movw	r30, r16
    9870:	81 81       	ldd	r24, Z+1	; 0x01
    9872:	0e 94 be 69 	call	0xd37c	; 0xd37c <disk_status>
    9876:	80 fd       	sbrc	r24, 0
    9878:	08 c0       	rjmp	.+16     	; 0x988a <mount_volume+0x64>
    987a:	ff 20       	and	r15, r15
    987c:	09 f4       	brne	.+2      	; 0x9880 <mount_volume+0x5a>
    987e:	21 c2       	rjmp	.+1090   	; 0x9cc2 <mount_volume+0x49c>
    9880:	82 ff       	sbrs	r24, 2
    9882:	1f c2       	rjmp	.+1086   	; 0x9cc2 <mount_volume+0x49c>
    9884:	8a e0       	ldi	r24, 0x0A	; 10
    9886:	90 e0       	ldi	r25, 0x00	; 0
    9888:	24 c2       	rjmp	.+1096   	; 0x9cd2 <mount_volume+0x4ac>
    988a:	d8 01       	movw	r26, r16
    988c:	1c 92       	st	X, r1
    988e:	f8 01       	movw	r30, r16
    9890:	c1 82       	std	Z+1, r12	; 0x01
    9892:	8c 2d       	mov	r24, r12
    9894:	0e 94 c4 69 	call	0xd388	; 0xd388 <disk_initialize>
    9898:	80 fd       	sbrc	r24, 0
    989a:	16 c2       	rjmp	.+1068   	; 0x9cc8 <mount_volume+0x4a2>
    989c:	ff 20       	and	r15, r15
    989e:	11 f0       	breq	.+4      	; 0x98a4 <mount_volume+0x7e>
    98a0:	82 fd       	sbrc	r24, 2
    98a2:	f0 cf       	rjmp	.-32     	; 0x9884 <mount_volume+0x5e>
    98a4:	40 e0       	ldi	r20, 0x00	; 0
    98a6:	50 e0       	ldi	r21, 0x00	; 0
    98a8:	ba 01       	movw	r22, r20
    98aa:	c8 01       	movw	r24, r16
    98ac:	7c df       	rcall	.-264    	; 0x97a6 <check_fs>
    98ae:	82 30       	cpi	r24, 0x02	; 2
    98b0:	91 05       	cpc	r25, r1
    98b2:	b9 f5       	brne	.+110    	; 0x9922 <mount_volume+0xfc>
    98b4:	68 01       	movw	r12, r16
    98b6:	f5 e0       	ldi	r31, 0x05	; 5
    98b8:	cf 1a       	sub	r12, r31
    98ba:	fe ef       	ldi	r31, 0xFE	; 254
    98bc:	df 0a       	sbc	r13, r31
    98be:	9e 01       	movw	r18, r28
    98c0:	2f 5f       	subi	r18, 0xFF	; 255
    98c2:	3f 4f       	sbci	r19, 0xFF	; 255
    98c4:	79 01       	movw	r14, r18
    98c6:	48 01       	movw	r8, r16
    98c8:	35 ec       	ldi	r19, 0xC5	; 197
    98ca:	83 1a       	sub	r8, r19
    98cc:	3d ef       	ldi	r19, 0xFD	; 253
    98ce:	93 0a       	sbc	r9, r19
    98d0:	57 01       	movw	r10, r14
    98d2:	c6 01       	movw	r24, r12
    98d4:	6b db       	rcall	.-2346   	; 0x8fac <ld_dword>
    98d6:	d5 01       	movw	r26, r10
    98d8:	6d 93       	st	X+, r22
    98da:	7d 93       	st	X+, r23
    98dc:	8d 93       	st	X+, r24
    98de:	9d 93       	st	X+, r25
    98e0:	5d 01       	movw	r10, r26
    98e2:	b0 e1       	ldi	r27, 0x10	; 16
    98e4:	cb 0e       	add	r12, r27
    98e6:	d1 1c       	adc	r13, r1
    98e8:	c8 14       	cp	r12, r8
    98ea:	d9 04       	cpc	r13, r9
    98ec:	91 f7       	brne	.-28     	; 0x98d2 <mount_volume+0xac>
    98ee:	6e 01       	movw	r12, r28
    98f0:	e1 e1       	ldi	r30, 0x11	; 17
    98f2:	ce 0e       	add	r12, r30
    98f4:	d1 1c       	adc	r13, r1
    98f6:	d7 01       	movw	r26, r14
    98f8:	4d 91       	ld	r20, X+
    98fa:	5d 91       	ld	r21, X+
    98fc:	6d 91       	ld	r22, X+
    98fe:	7d 91       	ld	r23, X+
    9900:	7d 01       	movw	r14, r26
    9902:	41 15       	cp	r20, r1
    9904:	51 05       	cpc	r21, r1
    9906:	61 05       	cpc	r22, r1
    9908:	71 05       	cpc	r23, r1
    990a:	31 f0       	breq	.+12     	; 0x9918 <mount_volume+0xf2>
    990c:	c8 01       	movw	r24, r16
    990e:	4b df       	rcall	.-362    	; 0x97a6 <check_fs>
    9910:	82 30       	cpi	r24, 0x02	; 2
    9912:	91 05       	cpc	r25, r1
    9914:	18 f4       	brcc	.+6      	; 0x991c <mount_volume+0xf6>
    9916:	05 c0       	rjmp	.+10     	; 0x9922 <mount_volume+0xfc>
    9918:	83 e0       	ldi	r24, 0x03	; 3
    991a:	90 e0       	ldi	r25, 0x00	; 0
    991c:	ce 14       	cp	r12, r14
    991e:	df 04       	cpc	r13, r15
    9920:	51 f7       	brne	.-44     	; 0x98f6 <mount_volume+0xd0>
    9922:	84 30       	cpi	r24, 0x04	; 4
    9924:	91 05       	cpc	r25, r1
    9926:	09 f4       	brne	.+2      	; 0x992a <mount_volume+0x104>
    9928:	d2 c1       	rjmp	.+932    	; 0x9cce <mount_volume+0x4a8>
    992a:	02 97       	sbiw	r24, 0x02	; 2
    992c:	18 f0       	brcs	.+6      	; 0x9934 <mount_volume+0x10e>
    992e:	8d e0       	ldi	r24, 0x0D	; 13
    9930:	90 e0       	ldi	r25, 0x00	; 0
    9932:	cf c1       	rjmp	.+926    	; 0x9cd2 <mount_volume+0x4ac>
    9934:	f8 01       	movw	r30, r16
    9936:	e0 5c       	subi	r30, 0xC0	; 192
    9938:	ff 4f       	sbci	r31, 0xFF	; 255
    993a:	80 81       	ld	r24, Z
    993c:	91 81       	ldd	r25, Z+1	; 0x01
    993e:	81 15       	cp	r24, r1
    9940:	92 40       	sbci	r25, 0x02	; 2
    9942:	a9 f7       	brne	.-22     	; 0x992e <mount_volume+0x108>
    9944:	3b 96       	adiw	r30, 0x0b	; 11
    9946:	40 80       	ld	r4, Z
    9948:	51 80       	ldd	r5, Z+1	; 0x01
    994a:	41 14       	cp	r4, r1
    994c:	51 04       	cpc	r5, r1
    994e:	19 f0       	breq	.+6      	; 0x9956 <mount_volume+0x130>
    9950:	61 2c       	mov	r6, r1
    9952:	71 2c       	mov	r7, r1
    9954:	06 c0       	rjmp	.+12     	; 0x9962 <mount_volume+0x13c>
    9956:	c8 01       	movw	r24, r16
    9958:	87 5a       	subi	r24, 0xA7	; 167
    995a:	9f 4f       	sbci	r25, 0xFF	; 255
    995c:	27 db       	rcall	.-2482   	; 0x8fac <ld_dword>
    995e:	2b 01       	movw	r4, r22
    9960:	3c 01       	movw	r6, r24
    9962:	f8 01       	movw	r30, r16
    9964:	21 a9       	ldd	r18, Z+49	; 0x31
    9966:	32 a9       	ldd	r19, Z+50	; 0x32
    9968:	43 a9       	ldd	r20, Z+51	; 0x33
    996a:	54 a9       	ldd	r21, Z+52	; 0x34
    996c:	29 8b       	std	Y+17, r18	; 0x11
    996e:	3a 8b       	std	Y+18, r19	; 0x12
    9970:	4b 8b       	std	Y+19, r20	; 0x13
    9972:	5c 8b       	std	Y+20, r21	; 0x14
    9974:	45 8e       	std	Z+29, r4	; 0x1d
    9976:	56 8e       	std	Z+30, r5	; 0x1e
    9978:	67 8e       	std	Z+31, r6	; 0x1f
    997a:	70 a2       	std	Z+32, r7	; 0x20
    997c:	eb 5b       	subi	r30, 0xBB	; 187
    997e:	ff 4f       	sbci	r31, 0xFF	; 255
    9980:	a0 80       	ld	r10, Z
    9982:	f8 01       	movw	r30, r16
    9984:	a2 82       	std	Z+2, r10	; 0x02
    9986:	8f ef       	ldi	r24, 0xFF	; 255
    9988:	8a 0d       	add	r24, r10
    998a:	82 30       	cpi	r24, 0x02	; 2
    998c:	80 f6       	brcc	.-96     	; 0x992e <mount_volume+0x108>
    998e:	ee 5b       	subi	r30, 0xBE	; 190
    9990:	ff 4f       	sbci	r31, 0xFF	; 255
    9992:	b0 80       	ld	r11, Z
    9994:	8b 2d       	mov	r24, r11
    9996:	90 e0       	ldi	r25, 0x00	; 0
    9998:	f8 01       	movw	r30, r16
    999a:	92 87       	std	Z+10, r25	; 0x0a
    999c:	81 87       	std	Z+9, r24	; 0x09
    999e:	00 97       	sbiw	r24, 0x00	; 0
    99a0:	31 f2       	breq	.-116    	; 0x992e <mount_volume+0x108>
    99a2:	9c 01       	movw	r18, r24
    99a4:	21 50       	subi	r18, 0x01	; 1
    99a6:	31 09       	sbc	r19, r1
    99a8:	82 23       	and	r24, r18
    99aa:	93 23       	and	r25, r19
    99ac:	89 2b       	or	r24, r25
    99ae:	09 f0       	breq	.+2      	; 0x99b2 <mount_volume+0x18c>
    99b0:	be cf       	rjmp	.-132    	; 0x992e <mount_volume+0x108>
    99b2:	ea 5b       	subi	r30, 0xBA	; 186
    99b4:	ff 4f       	sbci	r31, 0xFF	; 255
    99b6:	80 80       	ld	r8, Z
    99b8:	91 80       	ldd	r9, Z+1	; 0x01
    99ba:	f8 01       	movw	r30, r16
    99bc:	90 86       	std	Z+8, r9	; 0x08
    99be:	87 82       	std	Z+7, r8	; 0x07
    99c0:	c4 01       	movw	r24, r8
    99c2:	8f 70       	andi	r24, 0x0F	; 15
    99c4:	99 27       	eor	r25, r25
    99c6:	89 2b       	or	r24, r25
    99c8:	09 f0       	breq	.+2      	; 0x99cc <mount_volume+0x1a6>
    99ca:	b1 cf       	rjmp	.-158    	; 0x992e <mount_volume+0x108>
    99cc:	e8 5b       	subi	r30, 0xB8	; 184
    99ce:	ff 4f       	sbci	r31, 0xFF	; 255
    99d0:	80 81       	ld	r24, Z
    99d2:	91 81       	ldd	r25, Z+1	; 0x01
    99d4:	6c 01       	movw	r12, r24
    99d6:	e1 2c       	mov	r14, r1
    99d8:	f1 2c       	mov	r15, r1
    99da:	89 2b       	or	r24, r25
    99dc:	31 f4       	brne	.+12     	; 0x99ea <mount_volume+0x1c4>
    99de:	c8 01       	movw	r24, r16
    99e0:	8b 5a       	subi	r24, 0xAB	; 171
    99e2:	9f 4f       	sbci	r25, 0xFF	; 255
    99e4:	e3 da       	rcall	.-2618   	; 0x8fac <ld_dword>
    99e6:	6b 01       	movw	r12, r22
    99e8:	7c 01       	movw	r14, r24
    99ea:	f8 01       	movw	r30, r16
    99ec:	ed 5b       	subi	r30, 0xBD	; 189
    99ee:	ff 4f       	sbci	r31, 0xFF	; 255
    99f0:	01 90       	ld	r0, Z+
    99f2:	f0 81       	ld	r31, Z
    99f4:	e0 2d       	mov	r30, r0
    99f6:	30 97       	sbiw	r30, 0x00	; 0
    99f8:	09 f4       	brne	.+2      	; 0x99fc <mount_volume+0x1d6>
    99fa:	99 cf       	rjmp	.-206    	; 0x992e <mount_volume+0x108>
    99fc:	aa 2d       	mov	r26, r10
    99fe:	b0 e0       	ldi	r27, 0x00	; 0
    9a00:	a3 01       	movw	r20, r6
    9a02:	92 01       	movw	r18, r4
    9a04:	0e 94 df e6 	call	0x1cdbe	; 0x1cdbe <__muluhisi3>
    9a08:	69 8f       	std	Y+25, r22	; 0x19
    9a0a:	7a 8f       	std	Y+26, r23	; 0x1a
    9a0c:	8b 8f       	std	Y+27, r24	; 0x1b
    9a0e:	9c 8f       	std	Y+28, r25	; 0x1c
    9a10:	9f 01       	movw	r18, r30
    9a12:	40 e0       	ldi	r20, 0x00	; 0
    9a14:	50 e0       	ldi	r21, 0x00	; 0
    9a16:	2d 8f       	std	Y+29, r18	; 0x1d
    9a18:	3e 8f       	std	Y+30, r19	; 0x1e
    9a1a:	4f 8f       	std	Y+31, r20	; 0x1f
    9a1c:	58 a3       	std	Y+32, r21	; 0x20
    9a1e:	c4 01       	movw	r24, r8
    9a20:	f4 e0       	ldi	r31, 0x04	; 4
    9a22:	96 95       	lsr	r25
    9a24:	87 95       	ror	r24
    9a26:	fa 95       	dec	r31
    9a28:	e1 f7       	brne	.-8      	; 0x9a22 <mount_volume+0x1fc>
    9a2a:	28 0f       	add	r18, r24
    9a2c:	39 1f       	adc	r19, r25
    9a2e:	41 1d       	adc	r20, r1
    9a30:	51 1d       	adc	r21, r1
    9a32:	da 01       	movw	r26, r20
    9a34:	c9 01       	movw	r24, r18
    9a36:	29 8d       	ldd	r18, Y+25	; 0x19
    9a38:	3a 8d       	ldd	r19, Y+26	; 0x1a
    9a3a:	4b 8d       	ldd	r20, Y+27	; 0x1b
    9a3c:	5c 8d       	ldd	r21, Y+28	; 0x1c
    9a3e:	28 0f       	add	r18, r24
    9a40:	39 1f       	adc	r19, r25
    9a42:	4a 1f       	adc	r20, r26
    9a44:	5b 1f       	adc	r21, r27
    9a46:	2d 8b       	std	Y+21, r18	; 0x15
    9a48:	3e 8b       	std	Y+22, r19	; 0x16
    9a4a:	4f 8b       	std	Y+23, r20	; 0x17
    9a4c:	58 8f       	std	Y+24, r21	; 0x18
    9a4e:	c2 16       	cp	r12, r18
    9a50:	d3 06       	cpc	r13, r19
    9a52:	e4 06       	cpc	r14, r20
    9a54:	f5 06       	cpc	r15, r21
    9a56:	08 f4       	brcc	.+2      	; 0x9a5a <mount_volume+0x234>
    9a58:	6a cf       	rjmp	.-300    	; 0x992e <mount_volume+0x108>
    9a5a:	c7 01       	movw	r24, r14
    9a5c:	b6 01       	movw	r22, r12
    9a5e:	62 1b       	sub	r22, r18
    9a60:	73 0b       	sbc	r23, r19
    9a62:	84 0b       	sbc	r24, r20
    9a64:	95 0b       	sbc	r25, r21
    9a66:	2b 2d       	mov	r18, r11
    9a68:	30 e0       	ldi	r19, 0x00	; 0
    9a6a:	40 e0       	ldi	r20, 0x00	; 0
    9a6c:	50 e0       	ldi	r21, 0x00	; 0
    9a6e:	0e 94 92 e6 	call	0x1cd24	; 0x1cd24 <__udivmodsi4>
    9a72:	da 01       	movw	r26, r20
    9a74:	c9 01       	movw	r24, r18
    9a76:	01 97       	sbiw	r24, 0x01	; 1
    9a78:	a1 09       	sbc	r26, r1
    9a7a:	b1 09       	sbc	r27, r1
    9a7c:	85 3f       	cpi	r24, 0xF5	; 245
    9a7e:	9f 4f       	sbci	r25, 0xFF	; 255
    9a80:	af 4f       	sbci	r26, 0xFF	; 255
    9a82:	bf 40       	sbci	r27, 0x0F	; 15
    9a84:	08 f0       	brcs	.+2      	; 0x9a88 <mount_volume+0x262>
    9a86:	53 cf       	rjmp	.-346    	; 0x992e <mount_volume+0x108>
    9a88:	26 3f       	cpi	r18, 0xF6	; 246
    9a8a:	8f ef       	ldi	r24, 0xFF	; 255
    9a8c:	38 07       	cpc	r19, r24
    9a8e:	41 05       	cpc	r20, r1
    9a90:	51 05       	cpc	r21, r1
    9a92:	50 f4       	brcc	.+20     	; 0x9aa8 <mount_volume+0x282>
    9a94:	26 3f       	cpi	r18, 0xF6	; 246
    9a96:	9f e0       	ldi	r25, 0x0F	; 15
    9a98:	39 07       	cpc	r19, r25
    9a9a:	41 05       	cpc	r20, r1
    9a9c:	51 05       	cpc	r21, r1
    9a9e:	40 f4       	brcc	.+16     	; 0x9ab0 <mount_volume+0x28a>
    9aa0:	aa 24       	eor	r10, r10
    9aa2:	a3 94       	inc	r10
    9aa4:	b1 2c       	mov	r11, r1
    9aa6:	07 c0       	rjmp	.+14     	; 0x9ab6 <mount_volume+0x290>
    9aa8:	73 e0       	ldi	r23, 0x03	; 3
    9aaa:	a7 2e       	mov	r10, r23
    9aac:	b1 2c       	mov	r11, r1
    9aae:	03 c0       	rjmp	.+6      	; 0x9ab6 <mount_volume+0x290>
    9ab0:	62 e0       	ldi	r22, 0x02	; 2
    9ab2:	a6 2e       	mov	r10, r22
    9ab4:	b1 2c       	mov	r11, r1
    9ab6:	69 01       	movw	r12, r18
    9ab8:	7a 01       	movw	r14, r20
    9aba:	a2 e0       	ldi	r26, 0x02	; 2
    9abc:	ca 0e       	add	r12, r26
    9abe:	d1 1c       	adc	r13, r1
    9ac0:	e1 1c       	adc	r14, r1
    9ac2:	f1 1c       	adc	r15, r1
    9ac4:	f8 01       	movw	r30, r16
    9ac6:	c1 8e       	std	Z+25, r12	; 0x19
    9ac8:	d2 8e       	std	Z+26, r13	; 0x1a
    9aca:	e3 8e       	std	Z+27, r14	; 0x1b
    9acc:	f4 8e       	std	Z+28, r15	; 0x1c
    9ace:	29 89       	ldd	r18, Y+17	; 0x11
    9ad0:	3a 89       	ldd	r19, Y+18	; 0x12
    9ad2:	4b 89       	ldd	r20, Y+19	; 0x13
    9ad4:	5c 89       	ldd	r21, Y+20	; 0x14
    9ad6:	21 a3       	std	Z+33, r18	; 0x21
    9ad8:	32 a3       	std	Z+34, r19	; 0x22
    9ada:	43 a3       	std	Z+35, r20	; 0x23
    9adc:	54 a3       	std	Z+36, r21	; 0x24
    9ade:	8d 8d       	ldd	r24, Y+29	; 0x1d
    9ae0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    9ae2:	af 8d       	ldd	r26, Y+31	; 0x1f
    9ae4:	b8 a1       	ldd	r27, Y+32	; 0x20
    9ae6:	28 0f       	add	r18, r24
    9ae8:	39 1f       	adc	r19, r25
    9aea:	4a 1f       	adc	r20, r26
    9aec:	5b 1f       	adc	r21, r27
    9aee:	2d 8f       	std	Y+29, r18	; 0x1d
    9af0:	3e 8f       	std	Y+30, r19	; 0x1e
    9af2:	4f 8f       	std	Y+31, r20	; 0x1f
    9af4:	58 a3       	std	Y+32, r21	; 0x20
    9af6:	25 a3       	std	Z+37, r18	; 0x25
    9af8:	36 a3       	std	Z+38, r19	; 0x26
    9afa:	47 a3       	std	Z+39, r20	; 0x27
    9afc:	50 a7       	std	Z+40, r21	; 0x28
    9afe:	49 89       	ldd	r20, Y+17	; 0x11
    9b00:	5a 89       	ldd	r21, Y+18	; 0x12
    9b02:	6b 89       	ldd	r22, Y+19	; 0x13
    9b04:	7c 89       	ldd	r23, Y+20	; 0x14
    9b06:	8d 89       	ldd	r24, Y+21	; 0x15
    9b08:	9e 89       	ldd	r25, Y+22	; 0x16
    9b0a:	af 89       	ldd	r26, Y+23	; 0x17
    9b0c:	b8 8d       	ldd	r27, Y+24	; 0x18
    9b0e:	48 0f       	add	r20, r24
    9b10:	59 1f       	adc	r21, r25
    9b12:	6a 1f       	adc	r22, r26
    9b14:	7b 1f       	adc	r23, r27
    9b16:	45 a7       	std	Z+45, r20	; 0x2d
    9b18:	56 a7       	std	Z+46, r21	; 0x2e
    9b1a:	67 a7       	std	Z+47, r22	; 0x2f
    9b1c:	70 ab       	std	Z+48, r23	; 0x30
    9b1e:	f3 e0       	ldi	r31, 0x03	; 3
    9b20:	af 16       	cp	r10, r31
    9b22:	b1 04       	cpc	r11, r1
    9b24:	e9 f4       	brne	.+58     	; 0x9b60 <mount_volume+0x33a>
    9b26:	f8 01       	movw	r30, r16
    9b28:	e1 5a       	subi	r30, 0xA1	; 161
    9b2a:	ff 4f       	sbci	r31, 0xFF	; 255
    9b2c:	80 81       	ld	r24, Z
    9b2e:	91 81       	ldd	r25, Z+1	; 0x01
    9b30:	89 2b       	or	r24, r25
    9b32:	09 f0       	breq	.+2      	; 0x9b36 <mount_volume+0x310>
    9b34:	fc ce       	rjmp	.-520    	; 0x992e <mount_volume+0x108>
    9b36:	81 14       	cp	r8, r1
    9b38:	91 04       	cpc	r9, r1
    9b3a:	09 f0       	breq	.+2      	; 0x9b3e <mount_volume+0x318>
    9b3c:	f8 ce       	rjmp	.-528    	; 0x992e <mount_volume+0x108>
    9b3e:	c8 01       	movw	r24, r16
    9b40:	8f 59       	subi	r24, 0x9F	; 159
    9b42:	9f 4f       	sbci	r25, 0xFF	; 255
    9b44:	33 da       	rcall	.-2970   	; 0x8fac <ld_dword>
    9b46:	f8 01       	movw	r30, r16
    9b48:	61 a7       	std	Z+41, r22	; 0x29
    9b4a:	72 a7       	std	Z+42, r23	; 0x2a
    9b4c:	83 a7       	std	Z+43, r24	; 0x2b
    9b4e:	94 a7       	std	Z+44, r25	; 0x2c
    9b50:	42 e0       	ldi	r20, 0x02	; 2
    9b52:	cc 0c       	add	r12, r12
    9b54:	dd 1c       	adc	r13, r13
    9b56:	ee 1c       	adc	r14, r14
    9b58:	ff 1c       	adc	r15, r15
    9b5a:	4a 95       	dec	r20
    9b5c:	d1 f7       	brne	.-12     	; 0x9b52 <mount_volume+0x32c>
    9b5e:	33 c0       	rjmp	.+102    	; 0x9bc6 <mount_volume+0x3a0>
    9b60:	81 14       	cp	r8, r1
    9b62:	91 04       	cpc	r9, r1
    9b64:	09 f4       	brne	.+2      	; 0x9b68 <mount_volume+0x342>
    9b66:	e3 ce       	rjmp	.-570    	; 0x992e <mount_volume+0x108>
    9b68:	8d 8d       	ldd	r24, Y+29	; 0x1d
    9b6a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    9b6c:	af 8d       	ldd	r26, Y+31	; 0x1f
    9b6e:	b8 a1       	ldd	r27, Y+32	; 0x20
    9b70:	29 8d       	ldd	r18, Y+25	; 0x19
    9b72:	3a 8d       	ldd	r19, Y+26	; 0x1a
    9b74:	4b 8d       	ldd	r20, Y+27	; 0x1b
    9b76:	5c 8d       	ldd	r21, Y+28	; 0x1c
    9b78:	82 0f       	add	r24, r18
    9b7a:	93 1f       	adc	r25, r19
    9b7c:	a4 1f       	adc	r26, r20
    9b7e:	b5 1f       	adc	r27, r21
    9b80:	f8 01       	movw	r30, r16
    9b82:	81 a7       	std	Z+41, r24	; 0x29
    9b84:	92 a7       	std	Z+42, r25	; 0x2a
    9b86:	a3 a7       	std	Z+43, r26	; 0x2b
    9b88:	b4 a7       	std	Z+44, r27	; 0x2c
    9b8a:	f2 e0       	ldi	r31, 0x02	; 2
    9b8c:	af 16       	cp	r10, r31
    9b8e:	b1 04       	cpc	r11, r1
    9b90:	29 f4       	brne	.+10     	; 0x9b9c <mount_volume+0x376>
    9b92:	cc 0c       	add	r12, r12
    9b94:	dd 1c       	adc	r13, r13
    9b96:	ee 1c       	adc	r14, r14
    9b98:	ff 1c       	adc	r15, r15
    9b9a:	15 c0       	rjmp	.+42     	; 0x9bc6 <mount_volume+0x3a0>
    9b9c:	a3 e0       	ldi	r26, 0x03	; 3
    9b9e:	b0 e0       	ldi	r27, 0x00	; 0
    9ba0:	a7 01       	movw	r20, r14
    9ba2:	96 01       	movw	r18, r12
    9ba4:	0e 94 df e6 	call	0x1cdbe	; 0x1cdbe <__muluhisi3>
    9ba8:	dc 01       	movw	r26, r24
    9baa:	cb 01       	movw	r24, r22
    9bac:	b6 95       	lsr	r27
    9bae:	a7 95       	ror	r26
    9bb0:	97 95       	ror	r25
    9bb2:	87 95       	ror	r24
    9bb4:	21 e0       	ldi	r18, 0x01	; 1
    9bb6:	c2 22       	and	r12, r18
    9bb8:	dd 24       	eor	r13, r13
    9bba:	ee 24       	eor	r14, r14
    9bbc:	ff 24       	eor	r15, r15
    9bbe:	c8 0e       	add	r12, r24
    9bc0:	d9 1e       	adc	r13, r25
    9bc2:	ea 1e       	adc	r14, r26
    9bc4:	fb 1e       	adc	r15, r27
    9bc6:	3f ef       	ldi	r19, 0xFF	; 255
    9bc8:	c3 0e       	add	r12, r19
    9bca:	31 e0       	ldi	r19, 0x01	; 1
    9bcc:	d3 1e       	adc	r13, r19
    9bce:	e1 1c       	adc	r14, r1
    9bd0:	f1 1c       	adc	r15, r1
    9bd2:	89 e0       	ldi	r24, 0x09	; 9
    9bd4:	f6 94       	lsr	r15
    9bd6:	e7 94       	ror	r14
    9bd8:	d7 94       	ror	r13
    9bda:	c7 94       	ror	r12
    9bdc:	8a 95       	dec	r24
    9bde:	d1 f7       	brne	.-12     	; 0x9bd4 <mount_volume+0x3ae>
    9be0:	4c 14       	cp	r4, r12
    9be2:	5d 04       	cpc	r5, r13
    9be4:	6e 04       	cpc	r6, r14
    9be6:	7f 04       	cpc	r7, r15
    9be8:	08 f4       	brcc	.+2      	; 0x9bec <mount_volume+0x3c6>
    9bea:	a1 ce       	rjmp	.-702    	; 0x992e <mount_volume+0x108>
    9bec:	8f ef       	ldi	r24, 0xFF	; 255
    9bee:	9f ef       	ldi	r25, 0xFF	; 255
    9bf0:	dc 01       	movw	r26, r24
    9bf2:	f8 01       	movw	r30, r16
    9bf4:	81 8b       	std	Z+17, r24	; 0x11
    9bf6:	92 8b       	std	Z+18, r25	; 0x12
    9bf8:	a3 8b       	std	Z+19, r26	; 0x13
    9bfa:	b4 8b       	std	Z+20, r27	; 0x14
    9bfc:	85 87       	std	Z+13, r24	; 0x0d
    9bfe:	96 87       	std	Z+14, r25	; 0x0e
    9c00:	a7 87       	std	Z+15, r26	; 0x0f
    9c02:	b0 8b       	std	Z+16, r27	; 0x10
    9c04:	80 e8       	ldi	r24, 0x80	; 128
    9c06:	84 83       	std	Z+4, r24	; 0x04
    9c08:	f3 e0       	ldi	r31, 0x03	; 3
    9c0a:	af 16       	cp	r10, r31
    9c0c:	b1 04       	cpc	r11, r1
    9c0e:	09 f0       	breq	.+2      	; 0x9c12 <mount_volume+0x3ec>
    9c10:	3f c0       	rjmp	.+126    	; 0x9c90 <mount_volume+0x46a>
    9c12:	f8 01       	movw	r30, r16
    9c14:	eb 59       	subi	r30, 0x9B	; 155
    9c16:	ff 4f       	sbci	r31, 0xFF	; 255
    9c18:	80 81       	ld	r24, Z
    9c1a:	91 81       	ldd	r25, Z+1	; 0x01
    9c1c:	01 97       	sbiw	r24, 0x01	; 1
    9c1e:	c1 f5       	brne	.+112    	; 0x9c90 <mount_volume+0x46a>
    9c20:	49 89       	ldd	r20, Y+17	; 0x11
    9c22:	5a 89       	ldd	r21, Y+18	; 0x12
    9c24:	6b 89       	ldd	r22, Y+19	; 0x13
    9c26:	7c 89       	ldd	r23, Y+20	; 0x14
    9c28:	4f 5f       	subi	r20, 0xFF	; 255
    9c2a:	5f 4f       	sbci	r21, 0xFF	; 255
    9c2c:	6f 4f       	sbci	r22, 0xFF	; 255
    9c2e:	7f 4f       	sbci	r23, 0xFF	; 255
    9c30:	c8 01       	movw	r24, r16
    9c32:	7e dd       	rcall	.-1284   	; 0x9730 <move_window>
    9c34:	89 2b       	or	r24, r25
    9c36:	61 f5       	brne	.+88     	; 0x9c90 <mount_volume+0x46a>
    9c38:	f8 01       	movw	r30, r16
    9c3a:	14 82       	std	Z+4, r1	; 0x04
    9c3c:	ed 5c       	subi	r30, 0xCD	; 205
    9c3e:	fd 4f       	sbci	r31, 0xFD	; 253
    9c40:	80 81       	ld	r24, Z
    9c42:	91 81       	ldd	r25, Z+1	; 0x01
    9c44:	85 35       	cpi	r24, 0x55	; 85
    9c46:	9a 4a       	sbci	r25, 0xAA	; 170
    9c48:	19 f5       	brne	.+70     	; 0x9c90 <mount_volume+0x46a>
    9c4a:	c8 01       	movw	r24, r16
    9c4c:	c5 96       	adiw	r24, 0x35	; 53
    9c4e:	ae d9       	rcall	.-3236   	; 0x8fac <ld_dword>
    9c50:	62 35       	cpi	r22, 0x52	; 82
    9c52:	72 45       	sbci	r23, 0x52	; 82
    9c54:	81 46       	sbci	r24, 0x61	; 97
    9c56:	91 44       	sbci	r25, 0x41	; 65
    9c58:	d9 f4       	brne	.+54     	; 0x9c90 <mount_volume+0x46a>
    9c5a:	c8 01       	movw	r24, r16
    9c5c:	87 5e       	subi	r24, 0xE7	; 231
    9c5e:	9d 4f       	sbci	r25, 0xFD	; 253
    9c60:	a5 d9       	rcall	.-3254   	; 0x8fac <ld_dword>
    9c62:	62 37       	cpi	r22, 0x72	; 114
    9c64:	72 47       	sbci	r23, 0x72	; 114
    9c66:	81 44       	sbci	r24, 0x41	; 65
    9c68:	91 46       	sbci	r25, 0x61	; 97
    9c6a:	91 f4       	brne	.+36     	; 0x9c90 <mount_volume+0x46a>
    9c6c:	c8 01       	movw	r24, r16
    9c6e:	83 5e       	subi	r24, 0xE3	; 227
    9c70:	9d 4f       	sbci	r25, 0xFD	; 253
    9c72:	9c d9       	rcall	.-3272   	; 0x8fac <ld_dword>
    9c74:	f8 01       	movw	r30, r16
    9c76:	61 8b       	std	Z+17, r22	; 0x11
    9c78:	72 8b       	std	Z+18, r23	; 0x12
    9c7a:	83 8b       	std	Z+19, r24	; 0x13
    9c7c:	94 8b       	std	Z+20, r25	; 0x14
    9c7e:	c8 01       	movw	r24, r16
    9c80:	8f 5d       	subi	r24, 0xDF	; 223
    9c82:	9d 4f       	sbci	r25, 0xFD	; 253
    9c84:	93 d9       	rcall	.-3290   	; 0x8fac <ld_dword>
    9c86:	f8 01       	movw	r30, r16
    9c88:	65 87       	std	Z+13, r22	; 0x0d
    9c8a:	76 87       	std	Z+14, r23	; 0x0e
    9c8c:	87 87       	std	Z+15, r24	; 0x0f
    9c8e:	90 8b       	std	Z+16, r25	; 0x10
    9c90:	d8 01       	movw	r26, r16
    9c92:	ac 92       	st	X, r10
    9c94:	80 91 27 18 	lds	r24, 0x1827	; 0x801827 <Fsid>
    9c98:	90 91 28 18 	lds	r25, 0x1828	; 0x801828 <Fsid+0x1>
    9c9c:	01 96       	adiw	r24, 0x01	; 1
    9c9e:	90 93 28 18 	sts	0x1828, r25	; 0x801828 <Fsid+0x1>
    9ca2:	80 93 27 18 	sts	0x1827, r24	; 0x801827 <Fsid>
    9ca6:	f8 01       	movw	r30, r16
    9ca8:	96 83       	std	Z+6, r25	; 0x06
    9caa:	85 83       	std	Z+5, r24	; 0x05
    9cac:	15 8a       	std	Z+21, r1	; 0x15
    9cae:	16 8a       	std	Z+22, r1	; 0x16
    9cb0:	17 8a       	std	Z+23, r1	; 0x17
    9cb2:	10 8e       	std	Z+24, r1	; 0x18
    9cb4:	06 c0       	rjmp	.+12     	; 0x9cc2 <mount_volume+0x49c>
    9cb6:	8b e0       	ldi	r24, 0x0B	; 11
    9cb8:	90 e0       	ldi	r25, 0x00	; 0
    9cba:	0b c0       	rjmp	.+22     	; 0x9cd2 <mount_volume+0x4ac>
    9cbc:	8c e0       	ldi	r24, 0x0C	; 12
    9cbe:	90 e0       	ldi	r25, 0x00	; 0
    9cc0:	08 c0       	rjmp	.+16     	; 0x9cd2 <mount_volume+0x4ac>
    9cc2:	80 e0       	ldi	r24, 0x00	; 0
    9cc4:	90 e0       	ldi	r25, 0x00	; 0
    9cc6:	05 c0       	rjmp	.+10     	; 0x9cd2 <mount_volume+0x4ac>
    9cc8:	83 e0       	ldi	r24, 0x03	; 3
    9cca:	90 e0       	ldi	r25, 0x00	; 0
    9ccc:	02 c0       	rjmp	.+4      	; 0x9cd2 <mount_volume+0x4ac>
    9cce:	81 e0       	ldi	r24, 0x01	; 1
    9cd0:	90 e0       	ldi	r25, 0x00	; 0
    9cd2:	a0 96       	adiw	r28, 0x20	; 32
    9cd4:	e0 e1       	ldi	r30, 0x10	; 16
    9cd6:	0c 94 1d e7 	jmp	0x1ce3a	; 0x1ce3a <__epilogue_restores__+0x4>

00009cda <put_fat>:
    9cda:	a6 e0       	ldi	r26, 0x06	; 6
    9cdc:	b0 e0       	ldi	r27, 0x00	; 0
    9cde:	e3 e7       	ldi	r30, 0x73	; 115
    9ce0:	fe e4       	ldi	r31, 0x4E	; 78
    9ce2:	0c 94 ff e6 	jmp	0x1cdfe	; 0x1cdfe <__prologue_saves__>
    9ce6:	42 30       	cpi	r20, 0x02	; 2
    9ce8:	51 05       	cpc	r21, r1
    9cea:	61 05       	cpc	r22, r1
    9cec:	71 05       	cpc	r23, r1
    9cee:	08 f4       	brcc	.+2      	; 0x9cf2 <put_fat+0x18>
    9cf0:	e5 c0       	rjmp	.+458    	; 0x9ebc <put_fat+0x1e2>
    9cf2:	fc 01       	movw	r30, r24
    9cf4:	c1 8c       	ldd	r12, Z+25	; 0x19
    9cf6:	d2 8c       	ldd	r13, Z+26	; 0x1a
    9cf8:	e3 8c       	ldd	r14, Z+27	; 0x1b
    9cfa:	f4 8c       	ldd	r15, Z+28	; 0x1c
    9cfc:	4c 15       	cp	r20, r12
    9cfe:	5d 05       	cpc	r21, r13
    9d00:	6e 05       	cpc	r22, r14
    9d02:	7f 05       	cpc	r23, r15
    9d04:	08 f0       	brcs	.+2      	; 0x9d08 <put_fat+0x2e>
    9d06:	da c0       	rjmp	.+436    	; 0x9ebc <put_fat+0x1e2>
    9d08:	28 01       	movw	r4, r16
    9d0a:	39 01       	movw	r6, r18
    9d0c:	6a 01       	movw	r12, r20
    9d0e:	7b 01       	movw	r14, r22
    9d10:	9e 83       	std	Y+6, r25	; 0x06
    9d12:	8d 83       	std	Y+5, r24	; 0x05
    9d14:	80 81       	ld	r24, Z
    9d16:	82 30       	cpi	r24, 0x02	; 2
    9d18:	09 f4       	brne	.+2      	; 0x9d1c <put_fat+0x42>
    9d1a:	73 c0       	rjmp	.+230    	; 0x9e02 <put_fat+0x128>
    9d1c:	83 30       	cpi	r24, 0x03	; 3
    9d1e:	09 f4       	brne	.+2      	; 0x9d22 <put_fat+0x48>
    9d20:	92 c0       	rjmp	.+292    	; 0x9e46 <put_fat+0x16c>
    9d22:	81 30       	cpi	r24, 0x01	; 1
    9d24:	09 f0       	breq	.+2      	; 0x9d28 <put_fat+0x4e>
    9d26:	ca c0       	rjmp	.+404    	; 0x9ebc <put_fat+0x1e2>
    9d28:	4a 01       	movw	r8, r20
    9d2a:	96 94       	lsr	r9
    9d2c:	87 94       	ror	r8
    9d2e:	84 0e       	add	r8, r20
    9d30:	95 1e       	adc	r9, r21
    9d32:	c4 01       	movw	r24, r8
    9d34:	89 2f       	mov	r24, r25
    9d36:	99 27       	eor	r25, r25
    9d38:	86 95       	lsr	r24
    9d3a:	45 a1       	ldd	r20, Z+37	; 0x25
    9d3c:	56 a1       	ldd	r21, Z+38	; 0x26
    9d3e:	67 a1       	ldd	r22, Z+39	; 0x27
    9d40:	70 a5       	ldd	r23, Z+40	; 0x28
    9d42:	48 0f       	add	r20, r24
    9d44:	59 1f       	adc	r21, r25
    9d46:	61 1d       	adc	r22, r1
    9d48:	71 1d       	adc	r23, r1
    9d4a:	cf 01       	movw	r24, r30
    9d4c:	f1 dc       	rcall	.-1566   	; 0x9730 <move_window>
    9d4e:	5c 01       	movw	r10, r24
    9d50:	89 2b       	or	r24, r25
    9d52:	09 f0       	breq	.+2      	; 0x9d56 <put_fat+0x7c>
    9d54:	b6 c0       	rjmp	.+364    	; 0x9ec2 <put_fat+0x1e8>
    9d56:	2d 80       	ldd	r2, Y+5	; 0x05
    9d58:	3e 80       	ldd	r3, Y+6	; 0x06
    9d5a:	f5 e3       	ldi	r31, 0x35	; 53
    9d5c:	2f 0e       	add	r2, r31
    9d5e:	31 1c       	adc	r3, r1
    9d60:	84 01       	movw	r16, r8
    9d62:	0f 5f       	subi	r16, 0xFF	; 255
    9d64:	1f 4f       	sbci	r17, 0xFF	; 255
    9d66:	21 e0       	ldi	r18, 0x01	; 1
    9d68:	92 22       	and	r9, r18
    9d6a:	f1 01       	movw	r30, r2
    9d6c:	e8 0d       	add	r30, r8
    9d6e:	f9 1d       	adc	r31, r9
    9d70:	d7 01       	movw	r26, r14
    9d72:	c6 01       	movw	r24, r12
    9d74:	81 70       	andi	r24, 0x01	; 1
    9d76:	99 27       	eor	r25, r25
    9d78:	aa 27       	eor	r26, r26
    9d7a:	bb 27       	eor	r27, r27
    9d7c:	89 83       	std	Y+1, r24	; 0x01
    9d7e:	9a 83       	std	Y+2, r25	; 0x02
    9d80:	ab 83       	std	Y+3, r26	; 0x03
    9d82:	bc 83       	std	Y+4, r27	; 0x04
    9d84:	c0 fe       	sbrs	r12, 0
    9d86:	09 c0       	rjmp	.+18     	; 0x9d9a <put_fat+0xc0>
    9d88:	80 81       	ld	r24, Z
    9d8a:	28 2f       	mov	r18, r24
    9d8c:	2f 70       	andi	r18, 0x0F	; 15
    9d8e:	a0 e1       	ldi	r26, 0x10	; 16
    9d90:	4a 9e       	mul	r4, r26
    9d92:	c0 01       	movw	r24, r0
    9d94:	11 24       	eor	r1, r1
    9d96:	82 2b       	or	r24, r18
    9d98:	01 c0       	rjmp	.+2      	; 0x9d9c <put_fat+0xc2>
    9d9a:	84 2d       	mov	r24, r4
    9d9c:	80 83       	st	Z, r24
    9d9e:	81 e0       	ldi	r24, 0x01	; 1
    9da0:	ed 81       	ldd	r30, Y+5	; 0x05
    9da2:	fe 81       	ldd	r31, Y+6	; 0x06
    9da4:	83 83       	std	Z+3, r24	; 0x03
    9da6:	45 a1       	ldd	r20, Z+37	; 0x25
    9da8:	56 a1       	ldd	r21, Z+38	; 0x26
    9daa:	67 a1       	ldd	r22, Z+39	; 0x27
    9dac:	70 a5       	ldd	r23, Z+40	; 0x28
    9dae:	c8 01       	movw	r24, r16
    9db0:	89 2f       	mov	r24, r25
    9db2:	99 27       	eor	r25, r25
    9db4:	86 95       	lsr	r24
    9db6:	48 0f       	add	r20, r24
    9db8:	59 1f       	adc	r21, r25
    9dba:	61 1d       	adc	r22, r1
    9dbc:	71 1d       	adc	r23, r1
    9dbe:	cf 01       	movw	r24, r30
    9dc0:	b7 dc       	rcall	.-1682   	; 0x9730 <move_window>
    9dc2:	5c 01       	movw	r10, r24
    9dc4:	89 2b       	or	r24, r25
    9dc6:	09 f0       	breq	.+2      	; 0x9dca <put_fat+0xf0>
    9dc8:	7c c0       	rjmp	.+248    	; 0x9ec2 <put_fat+0x1e8>
    9dca:	11 70       	andi	r17, 0x01	; 1
    9dcc:	f1 01       	movw	r30, r2
    9dce:	e0 0f       	add	r30, r16
    9dd0:	f1 1f       	adc	r31, r17
    9dd2:	89 81       	ldd	r24, Y+1	; 0x01
    9dd4:	9a 81       	ldd	r25, Y+2	; 0x02
    9dd6:	ab 81       	ldd	r26, Y+3	; 0x03
    9dd8:	bc 81       	ldd	r27, Y+4	; 0x04
    9dda:	89 2b       	or	r24, r25
    9ddc:	8a 2b       	or	r24, r26
    9dde:	8b 2b       	or	r24, r27
    9de0:	41 f0       	breq	.+16     	; 0x9df2 <put_fat+0x118>
    9de2:	54 e0       	ldi	r21, 0x04	; 4
    9de4:	76 94       	lsr	r7
    9de6:	67 94       	ror	r6
    9de8:	57 94       	ror	r5
    9dea:	47 94       	ror	r4
    9dec:	5a 95       	dec	r21
    9dee:	d1 f7       	brne	.-12     	; 0x9de4 <put_fat+0x10a>
    9df0:	06 c0       	rjmp	.+12     	; 0x9dfe <put_fat+0x124>
    9df2:	00 81       	ld	r16, Z
    9df4:	00 7f       	andi	r16, 0xF0	; 240
    9df6:	85 2d       	mov	r24, r5
    9df8:	8f 70       	andi	r24, 0x0F	; 15
    9dfa:	40 2e       	mov	r4, r16
    9dfc:	48 2a       	or	r4, r24
    9dfe:	40 82       	st	Z, r4
    9e00:	58 c0       	rjmp	.+176    	; 0x9eb2 <put_fat+0x1d8>
    9e02:	77 27       	eor	r23, r23
    9e04:	6f 2d       	mov	r22, r15
    9e06:	5e 2d       	mov	r21, r14
    9e08:	4d 2d       	mov	r20, r13
    9e0a:	ed 81       	ldd	r30, Y+5	; 0x05
    9e0c:	fe 81       	ldd	r31, Y+6	; 0x06
    9e0e:	85 a1       	ldd	r24, Z+37	; 0x25
    9e10:	96 a1       	ldd	r25, Z+38	; 0x26
    9e12:	a7 a1       	ldd	r26, Z+39	; 0x27
    9e14:	b0 a5       	ldd	r27, Z+40	; 0x28
    9e16:	48 0f       	add	r20, r24
    9e18:	59 1f       	adc	r21, r25
    9e1a:	6a 1f       	adc	r22, r26
    9e1c:	7b 1f       	adc	r23, r27
    9e1e:	cf 01       	movw	r24, r30
    9e20:	87 dc       	rcall	.-1778   	; 0x9730 <move_window>
    9e22:	5c 01       	movw	r10, r24
    9e24:	89 2b       	or	r24, r25
    9e26:	09 f0       	breq	.+2      	; 0x9e2a <put_fat+0x150>
    9e28:	4c c0       	rjmp	.+152    	; 0x9ec2 <put_fat+0x1e8>
    9e2a:	ed 81       	ldd	r30, Y+5	; 0x05
    9e2c:	fe 81       	ldd	r31, Y+6	; 0x06
    9e2e:	f5 96       	adiw	r30, 0x35	; 53
    9e30:	cc 0c       	add	r12, r12
    9e32:	dd 1c       	adc	r13, r13
    9e34:	e8 94       	clt
    9e36:	c0 f8       	bld	r12, 0
    9e38:	21 e0       	ldi	r18, 0x01	; 1
    9e3a:	d2 22       	and	r13, r18
    9e3c:	ec 0d       	add	r30, r12
    9e3e:	fd 1d       	adc	r31, r13
    9e40:	40 82       	st	Z, r4
    9e42:	51 82       	std	Z+1, r5	; 0x01
    9e44:	36 c0       	rjmp	.+108    	; 0x9eb2 <put_fat+0x1d8>
    9e46:	ed 81       	ldd	r30, Y+5	; 0x05
    9e48:	fe 81       	ldd	r31, Y+6	; 0x06
    9e4a:	85 a1       	ldd	r24, Z+37	; 0x25
    9e4c:	96 a1       	ldd	r25, Z+38	; 0x26
    9e4e:	a7 a1       	ldd	r26, Z+39	; 0x27
    9e50:	b0 a5       	ldd	r27, Z+40	; 0x28
    9e52:	27 e0       	ldi	r18, 0x07	; 7
    9e54:	76 95       	lsr	r23
    9e56:	67 95       	ror	r22
    9e58:	57 95       	ror	r21
    9e5a:	47 95       	ror	r20
    9e5c:	2a 95       	dec	r18
    9e5e:	d1 f7       	brne	.-12     	; 0x9e54 <put_fat+0x17a>
    9e60:	48 0f       	add	r20, r24
    9e62:	59 1f       	adc	r21, r25
    9e64:	6a 1f       	adc	r22, r26
    9e66:	7b 1f       	adc	r23, r27
    9e68:	cf 01       	movw	r24, r30
    9e6a:	62 dc       	rcall	.-1852   	; 0x9730 <move_window>
    9e6c:	5c 01       	movw	r10, r24
    9e6e:	89 2b       	or	r24, r25
    9e70:	41 f5       	brne	.+80     	; 0x9ec2 <put_fat+0x1e8>
    9e72:	4d 81       	ldd	r20, Y+5	; 0x05
    9e74:	5e 81       	ldd	r21, Y+6	; 0x06
    9e76:	4b 5c       	subi	r20, 0xCB	; 203
    9e78:	5f 4f       	sbci	r21, 0xFF	; 255
    9e7a:	cc 0c       	add	r12, r12
    9e7c:	dd 1c       	adc	r13, r13
    9e7e:	cc 0c       	add	r12, r12
    9e80:	dd 1c       	adc	r13, r13
    9e82:	fc ef       	ldi	r31, 0xFC	; 252
    9e84:	cf 22       	and	r12, r31
    9e86:	f1 e0       	ldi	r31, 0x01	; 1
    9e88:	df 22       	and	r13, r31
    9e8a:	c4 0e       	add	r12, r20
    9e8c:	d5 1e       	adc	r13, r21
    9e8e:	c6 01       	movw	r24, r12
    9e90:	8d d8       	rcall	.-3814   	; 0x8fac <ld_dword>
    9e92:	2f e0       	ldi	r18, 0x0F	; 15
    9e94:	72 22       	and	r7, r18
    9e96:	dc 01       	movw	r26, r24
    9e98:	cb 01       	movw	r24, r22
    9e9a:	88 27       	eor	r24, r24
    9e9c:	99 27       	eor	r25, r25
    9e9e:	aa 27       	eor	r26, r26
    9ea0:	b0 7f       	andi	r27, 0xF0	; 240
    9ea2:	b3 01       	movw	r22, r6
    9ea4:	a2 01       	movw	r20, r4
    9ea6:	48 2b       	or	r20, r24
    9ea8:	59 2b       	or	r21, r25
    9eaa:	6a 2b       	or	r22, r26
    9eac:	7b 2b       	or	r23, r27
    9eae:	c6 01       	movw	r24, r12
    9eb0:	92 d8       	rcall	.-3804   	; 0x8fd6 <st_dword>
    9eb2:	81 e0       	ldi	r24, 0x01	; 1
    9eb4:	ed 81       	ldd	r30, Y+5	; 0x05
    9eb6:	fe 81       	ldd	r31, Y+6	; 0x06
    9eb8:	83 83       	std	Z+3, r24	; 0x03
    9eba:	03 c0       	rjmp	.+6      	; 0x9ec2 <put_fat+0x1e8>
    9ebc:	82 e0       	ldi	r24, 0x02	; 2
    9ebe:	a8 2e       	mov	r10, r24
    9ec0:	b1 2c       	mov	r11, r1
    9ec2:	c5 01       	movw	r24, r10
    9ec4:	26 96       	adiw	r28, 0x06	; 6
    9ec6:	e2 e1       	ldi	r30, 0x12	; 18
    9ec8:	0c 94 1b e7 	jmp	0x1ce36	; 0x1ce36 <__epilogue_restores__>

00009ecc <get_fat.isra.9>:
    9ecc:	a0 e0       	ldi	r26, 0x00	; 0
    9ece:	b0 e0       	ldi	r27, 0x00	; 0
    9ed0:	ec e6       	ldi	r30, 0x6C	; 108
    9ed2:	ff e4       	ldi	r31, 0x4F	; 79
    9ed4:	0c 94 07 e7 	jmp	0x1ce0e	; 0x1ce0e <__prologue_saves__+0x10>
    9ed8:	42 30       	cpi	r20, 0x02	; 2
    9eda:	51 05       	cpc	r21, r1
    9edc:	61 05       	cpc	r22, r1
    9ede:	71 05       	cpc	r23, r1
    9ee0:	08 f4       	brcc	.+2      	; 0x9ee4 <get_fat.isra.9+0x18>
    9ee2:	9f c0       	rjmp	.+318    	; 0xa022 <get_fat.isra.9+0x156>
    9ee4:	fc 01       	movw	r30, r24
    9ee6:	01 8d       	ldd	r16, Z+25	; 0x19
    9ee8:	12 8d       	ldd	r17, Z+26	; 0x1a
    9eea:	23 8d       	ldd	r18, Z+27	; 0x1b
    9eec:	34 8d       	ldd	r19, Z+28	; 0x1c
    9eee:	40 17       	cp	r20, r16
    9ef0:	51 07       	cpc	r21, r17
    9ef2:	62 07       	cpc	r22, r18
    9ef4:	73 07       	cpc	r23, r19
    9ef6:	08 f0       	brcs	.+2      	; 0x9efa <get_fat.isra.9+0x2e>
    9ef8:	94 c0       	rjmp	.+296    	; 0xa022 <get_fat.isra.9+0x156>
    9efa:	6a 01       	movw	r12, r20
    9efc:	7b 01       	movw	r14, r22
    9efe:	8c 01       	movw	r16, r24
    9f00:	80 81       	ld	r24, Z
    9f02:	82 30       	cpi	r24, 0x02	; 2
    9f04:	09 f4       	brne	.+2      	; 0x9f08 <get_fat.isra.9+0x3c>
    9f06:	4b c0       	rjmp	.+150    	; 0x9f9e <get_fat.isra.9+0xd2>
    9f08:	83 30       	cpi	r24, 0x03	; 3
    9f0a:	09 f4       	brne	.+2      	; 0x9f0e <get_fat.isra.9+0x42>
    9f0c:	67 c0       	rjmp	.+206    	; 0x9fdc <get_fat.isra.9+0x110>
    9f0e:	81 30       	cpi	r24, 0x01	; 1
    9f10:	09 f0       	breq	.+2      	; 0x9f14 <get_fat.isra.9+0x48>
    9f12:	87 c0       	rjmp	.+270    	; 0xa022 <get_fat.isra.9+0x156>
    9f14:	ea 01       	movw	r28, r20
    9f16:	d6 95       	lsr	r29
    9f18:	c7 95       	ror	r28
    9f1a:	cc 0d       	add	r28, r12
    9f1c:	dd 1d       	adc	r29, r13
    9f1e:	ce 01       	movw	r24, r28
    9f20:	89 2f       	mov	r24, r25
    9f22:	99 27       	eor	r25, r25
    9f24:	86 95       	lsr	r24
    9f26:	45 a1       	ldd	r20, Z+37	; 0x25
    9f28:	56 a1       	ldd	r21, Z+38	; 0x26
    9f2a:	67 a1       	ldd	r22, Z+39	; 0x27
    9f2c:	70 a5       	ldd	r23, Z+40	; 0x28
    9f2e:	48 0f       	add	r20, r24
    9f30:	59 1f       	adc	r21, r25
    9f32:	61 1d       	adc	r22, r1
    9f34:	71 1d       	adc	r23, r1
    9f36:	cf 01       	movw	r24, r30
    9f38:	fb db       	rcall	.-2058   	; 0x9730 <move_window>
    9f3a:	89 2b       	or	r24, r25
    9f3c:	21 f0       	breq	.+8      	; 0x9f46 <get_fat.isra.9+0x7a>
    9f3e:	6f ef       	ldi	r22, 0xFF	; 255
    9f40:	7f ef       	ldi	r23, 0xFF	; 255
    9f42:	cb 01       	movw	r24, r22
    9f44:	72 c0       	rjmp	.+228    	; 0xa02a <get_fat.isra.9+0x15e>
    9f46:	5e 01       	movw	r10, r28
    9f48:	ff ef       	ldi	r31, 0xFF	; 255
    9f4a:	af 1a       	sub	r10, r31
    9f4c:	bf 0a       	sbc	r11, r31
    9f4e:	d1 70       	andi	r29, 0x01	; 1
    9f50:	c0 0f       	add	r28, r16
    9f52:	d1 1f       	adc	r29, r17
    9f54:	cd a9       	ldd	r28, Y+53	; 0x35
    9f56:	c5 01       	movw	r24, r10
    9f58:	89 2f       	mov	r24, r25
    9f5a:	99 27       	eor	r25, r25
    9f5c:	86 95       	lsr	r24
    9f5e:	f8 01       	movw	r30, r16
    9f60:	45 a1       	ldd	r20, Z+37	; 0x25
    9f62:	56 a1       	ldd	r21, Z+38	; 0x26
    9f64:	67 a1       	ldd	r22, Z+39	; 0x27
    9f66:	70 a5       	ldd	r23, Z+40	; 0x28
    9f68:	48 0f       	add	r20, r24
    9f6a:	59 1f       	adc	r21, r25
    9f6c:	61 1d       	adc	r22, r1
    9f6e:	71 1d       	adc	r23, r1
    9f70:	c8 01       	movw	r24, r16
    9f72:	de db       	rcall	.-2116   	; 0x9730 <move_window>
    9f74:	89 2b       	or	r24, r25
    9f76:	19 f7       	brne	.-58     	; 0x9f3e <get_fat.isra.9+0x72>
    9f78:	f1 e0       	ldi	r31, 0x01	; 1
    9f7a:	bf 22       	and	r11, r31
    9f7c:	f8 01       	movw	r30, r16
    9f7e:	ea 0d       	add	r30, r10
    9f80:	fb 1d       	adc	r31, r11
    9f82:	85 a9       	ldd	r24, Z+53	; 0x35
    9f84:	6c 2f       	mov	r22, r28
    9f86:	70 e0       	ldi	r23, 0x00	; 0
    9f88:	78 2b       	or	r23, r24
    9f8a:	c0 fe       	sbrs	r12, 0
    9f8c:	06 c0       	rjmp	.+12     	; 0x9f9a <get_fat.isra.9+0xce>
    9f8e:	54 e0       	ldi	r21, 0x04	; 4
    9f90:	76 95       	lsr	r23
    9f92:	67 95       	ror	r22
    9f94:	5a 95       	dec	r21
    9f96:	e1 f7       	brne	.-8      	; 0x9f90 <get_fat.isra.9+0xc4>
    9f98:	1e c0       	rjmp	.+60     	; 0x9fd6 <get_fat.isra.9+0x10a>
    9f9a:	7f 70       	andi	r23, 0x0F	; 15
    9f9c:	1c c0       	rjmp	.+56     	; 0x9fd6 <get_fat.isra.9+0x10a>
    9f9e:	77 27       	eor	r23, r23
    9fa0:	6f 2d       	mov	r22, r15
    9fa2:	5e 2d       	mov	r21, r14
    9fa4:	4d 2d       	mov	r20, r13
    9fa6:	85 a1       	ldd	r24, Z+37	; 0x25
    9fa8:	96 a1       	ldd	r25, Z+38	; 0x26
    9faa:	a7 a1       	ldd	r26, Z+39	; 0x27
    9fac:	b0 a5       	ldd	r27, Z+40	; 0x28
    9fae:	48 0f       	add	r20, r24
    9fb0:	59 1f       	adc	r21, r25
    9fb2:	6a 1f       	adc	r22, r26
    9fb4:	7b 1f       	adc	r23, r27
    9fb6:	cf 01       	movw	r24, r30
    9fb8:	bb db       	rcall	.-2186   	; 0x9730 <move_window>
    9fba:	89 2b       	or	r24, r25
    9fbc:	09 f0       	breq	.+2      	; 0x9fc0 <get_fat.isra.9+0xf4>
    9fbe:	bf cf       	rjmp	.-130    	; 0x9f3e <get_fat.isra.9+0x72>
    9fc0:	cc 0c       	add	r12, r12
    9fc2:	dd 1c       	adc	r13, r13
    9fc4:	e8 94       	clt
    9fc6:	c0 f8       	bld	r12, 0
    9fc8:	f1 e0       	ldi	r31, 0x01	; 1
    9fca:	df 22       	and	r13, r31
    9fcc:	f8 01       	movw	r30, r16
    9fce:	ec 0d       	add	r30, r12
    9fd0:	fd 1d       	adc	r31, r13
    9fd2:	65 a9       	ldd	r22, Z+53	; 0x35
    9fd4:	76 a9       	ldd	r23, Z+54	; 0x36
    9fd6:	80 e0       	ldi	r24, 0x00	; 0
    9fd8:	90 e0       	ldi	r25, 0x00	; 0
    9fda:	27 c0       	rjmp	.+78     	; 0xa02a <get_fat.isra.9+0x15e>
    9fdc:	85 a1       	ldd	r24, Z+37	; 0x25
    9fde:	96 a1       	ldd	r25, Z+38	; 0x26
    9fe0:	a7 a1       	ldd	r26, Z+39	; 0x27
    9fe2:	b0 a5       	ldd	r27, Z+40	; 0x28
    9fe4:	27 e0       	ldi	r18, 0x07	; 7
    9fe6:	76 95       	lsr	r23
    9fe8:	67 95       	ror	r22
    9fea:	57 95       	ror	r21
    9fec:	47 95       	ror	r20
    9fee:	2a 95       	dec	r18
    9ff0:	d1 f7       	brne	.-12     	; 0x9fe6 <get_fat.isra.9+0x11a>
    9ff2:	48 0f       	add	r20, r24
    9ff4:	59 1f       	adc	r21, r25
    9ff6:	6a 1f       	adc	r22, r26
    9ff8:	7b 1f       	adc	r23, r27
    9ffa:	cf 01       	movw	r24, r30
    9ffc:	99 db       	rcall	.-2254   	; 0x9730 <move_window>
    9ffe:	89 2b       	or	r24, r25
    a000:	09 f0       	breq	.+2      	; 0xa004 <get_fat.isra.9+0x138>
    a002:	9d cf       	rjmp	.-198    	; 0x9f3e <get_fat.isra.9+0x72>
    a004:	0b 5c       	subi	r16, 0xCB	; 203
    a006:	1f 4f       	sbci	r17, 0xFF	; 255
    a008:	cc 0c       	add	r12, r12
    a00a:	dd 1c       	adc	r13, r13
    a00c:	cc 0c       	add	r12, r12
    a00e:	dd 1c       	adc	r13, r13
    a010:	c6 01       	movw	r24, r12
    a012:	8c 7f       	andi	r24, 0xFC	; 252
    a014:	91 70       	andi	r25, 0x01	; 1
    a016:	80 0f       	add	r24, r16
    a018:	91 1f       	adc	r25, r17
    a01a:	0e 94 d6 47 	call	0x8fac	; 0x8fac <ld_dword>
    a01e:	9f 70       	andi	r25, 0x0F	; 15
    a020:	04 c0       	rjmp	.+8      	; 0xa02a <get_fat.isra.9+0x15e>
    a022:	61 e0       	ldi	r22, 0x01	; 1
    a024:	70 e0       	ldi	r23, 0x00	; 0
    a026:	80 e0       	ldi	r24, 0x00	; 0
    a028:	90 e0       	ldi	r25, 0x00	; 0
    a02a:	cd b7       	in	r28, 0x3d	; 61
    a02c:	de b7       	in	r29, 0x3e	; 62
    a02e:	ea e0       	ldi	r30, 0x0A	; 10
    a030:	0c 94 23 e7 	jmp	0x1ce46	; 0x1ce46 <__epilogue_restores__+0x10>

0000a034 <dir_sdi>:
    a034:	a0 e0       	ldi	r26, 0x00	; 0
    a036:	b0 e0       	ldi	r27, 0x00	; 0
    a038:	e0 e2       	ldi	r30, 0x20	; 32
    a03a:	f0 e5       	ldi	r31, 0x50	; 80
    a03c:	0c 94 01 e7 	jmp	0x1ce02	; 0x1ce02 <__prologue_saves__+0x4>
    a040:	ec 01       	movw	r28, r24
    a042:	6a 01       	movw	r12, r20
    a044:	7b 01       	movw	r14, r22
    a046:	41 15       	cp	r20, r1
    a048:	51 05       	cpc	r21, r1
    a04a:	80 e2       	ldi	r24, 0x20	; 32
    a04c:	68 07       	cpc	r22, r24
    a04e:	71 05       	cpc	r23, r1
    a050:	18 f0       	brcs	.+6      	; 0xa058 <dir_sdi+0x24>
    a052:	82 e0       	ldi	r24, 0x02	; 2
    a054:	90 e0       	ldi	r25, 0x00	; 0
    a056:	aa c0       	rjmp	.+340    	; 0xa1ac <dir_sdi+0x178>
    a058:	db 01       	movw	r26, r22
    a05a:	ca 01       	movw	r24, r20
    a05c:	8f 71       	andi	r24, 0x1F	; 31
    a05e:	99 27       	eor	r25, r25
    a060:	aa 27       	eor	r26, r26
    a062:	bb 27       	eor	r27, r27
    a064:	89 2b       	or	r24, r25
    a066:	8a 2b       	or	r24, r26
    a068:	8b 2b       	or	r24, r27
    a06a:	99 f7       	brne	.-26     	; 0xa052 <dir_sdi+0x1e>
    a06c:	08 81       	ld	r16, Y
    a06e:	19 81       	ldd	r17, Y+1	; 0x01
    a070:	4e 87       	std	Y+14, r20	; 0x0e
    a072:	5f 87       	std	Y+15, r21	; 0x0f
    a074:	68 8b       	std	Y+16, r22	; 0x10
    a076:	79 8b       	std	Y+17, r23	; 0x11
    a078:	8e 80       	ldd	r8, Y+6	; 0x06
    a07a:	9f 80       	ldd	r9, Y+7	; 0x07
    a07c:	a8 84       	ldd	r10, Y+8	; 0x08
    a07e:	b9 84       	ldd	r11, Y+9	; 0x09
    a080:	81 14       	cp	r8, r1
    a082:	91 04       	cpc	r9, r1
    a084:	a1 04       	cpc	r10, r1
    a086:	b1 04       	cpc	r11, r1
    a088:	51 f5       	brne	.+84     	; 0xa0de <dir_sdi+0xaa>
    a08a:	f8 01       	movw	r30, r16
    a08c:	80 81       	ld	r24, Z
    a08e:	83 30       	cpi	r24, 0x03	; 3
    a090:	40 f0       	brcs	.+16     	; 0xa0a2 <dir_sdi+0x6e>
    a092:	81 a5       	ldd	r24, Z+41	; 0x29
    a094:	92 a5       	ldd	r25, Z+42	; 0x2a
    a096:	a3 a5       	ldd	r26, Z+43	; 0x2b
    a098:	b4 a5       	ldd	r27, Z+44	; 0x2c
    a09a:	00 97       	sbiw	r24, 0x00	; 0
    a09c:	a1 05       	cpc	r26, r1
    a09e:	b1 05       	cpc	r27, r1
    a0a0:	e1 f4       	brne	.+56     	; 0xa0da <dir_sdi+0xa6>
    a0a2:	f8 01       	movw	r30, r16
    a0a4:	87 81       	ldd	r24, Z+7	; 0x07
    a0a6:	90 85       	ldd	r25, Z+8	; 0x08
    a0a8:	a0 e0       	ldi	r26, 0x00	; 0
    a0aa:	b0 e0       	ldi	r27, 0x00	; 0
    a0ac:	b7 01       	movw	r22, r14
    a0ae:	a6 01       	movw	r20, r12
    a0b0:	25 e0       	ldi	r18, 0x05	; 5
    a0b2:	76 95       	lsr	r23
    a0b4:	67 95       	ror	r22
    a0b6:	57 95       	ror	r21
    a0b8:	47 95       	ror	r20
    a0ba:	2a 95       	dec	r18
    a0bc:	d1 f7       	brne	.-12     	; 0xa0b2 <dir_sdi+0x7e>
    a0be:	48 17       	cp	r20, r24
    a0c0:	59 07       	cpc	r21, r25
    a0c2:	6a 07       	cpc	r22, r26
    a0c4:	7b 07       	cpc	r23, r27
    a0c6:	28 f6       	brcc	.-118    	; 0xa052 <dir_sdi+0x1e>
    a0c8:	81 a5       	ldd	r24, Z+41	; 0x29
    a0ca:	92 a5       	ldd	r25, Z+42	; 0x2a
    a0cc:	a3 a5       	ldd	r26, Z+43	; 0x2b
    a0ce:	b4 a5       	ldd	r27, Z+44	; 0x2c
    a0d0:	8e 8b       	std	Y+22, r24	; 0x16
    a0d2:	9f 8b       	std	Y+23, r25	; 0x17
    a0d4:	a8 8f       	std	Y+24, r26	; 0x18
    a0d6:	b9 8f       	std	Y+25, r27	; 0x19
    a0d8:	3e c0       	rjmp	.+124    	; 0xa156 <dir_sdi+0x122>
    a0da:	4c 01       	movw	r8, r24
    a0dc:	5d 01       	movw	r10, r26
    a0de:	f8 01       	movw	r30, r16
    a0e0:	41 84       	ldd	r4, Z+9	; 0x09
    a0e2:	52 84       	ldd	r5, Z+10	; 0x0a
    a0e4:	61 2c       	mov	r6, r1
    a0e6:	71 2c       	mov	r7, r1
    a0e8:	39 e0       	ldi	r19, 0x09	; 9
    a0ea:	44 0c       	add	r4, r4
    a0ec:	55 1c       	adc	r5, r5
    a0ee:	66 1c       	adc	r6, r6
    a0f0:	77 1c       	adc	r7, r7
    a0f2:	3a 95       	dec	r19
    a0f4:	d1 f7       	brne	.-12     	; 0xa0ea <dir_sdi+0xb6>
    a0f6:	b5 01       	movw	r22, r10
    a0f8:	a4 01       	movw	r20, r8
    a0fa:	c4 14       	cp	r12, r4
    a0fc:	d5 04       	cpc	r13, r5
    a0fe:	e6 04       	cpc	r14, r6
    a100:	f7 04       	cpc	r15, r7
    a102:	10 f1       	brcs	.+68     	; 0xa148 <dir_sdi+0x114>
    a104:	88 81       	ld	r24, Y
    a106:	99 81       	ldd	r25, Y+1	; 0x01
    a108:	e1 de       	rcall	.-574    	; 0x9ecc <get_fat.isra.9>
    a10a:	4b 01       	movw	r8, r22
    a10c:	5c 01       	movw	r10, r24
    a10e:	6f 3f       	cpi	r22, 0xFF	; 255
    a110:	7f 4f       	sbci	r23, 0xFF	; 255
    a112:	8f 4f       	sbci	r24, 0xFF	; 255
    a114:	9f 4f       	sbci	r25, 0xFF	; 255
    a116:	09 f4       	brne	.+2      	; 0xa11a <dir_sdi+0xe6>
    a118:	47 c0       	rjmp	.+142    	; 0xa1a8 <dir_sdi+0x174>
    a11a:	82 e0       	ldi	r24, 0x02	; 2
    a11c:	88 16       	cp	r8, r24
    a11e:	91 04       	cpc	r9, r1
    a120:	a1 04       	cpc	r10, r1
    a122:	b1 04       	cpc	r11, r1
    a124:	08 f4       	brcc	.+2      	; 0xa128 <dir_sdi+0xf4>
    a126:	95 cf       	rjmp	.-214    	; 0xa052 <dir_sdi+0x1e>
    a128:	f8 01       	movw	r30, r16
    a12a:	81 8d       	ldd	r24, Z+25	; 0x19
    a12c:	92 8d       	ldd	r25, Z+26	; 0x1a
    a12e:	a3 8d       	ldd	r26, Z+27	; 0x1b
    a130:	b4 8d       	ldd	r27, Z+28	; 0x1c
    a132:	88 16       	cp	r8, r24
    a134:	99 06       	cpc	r9, r25
    a136:	aa 06       	cpc	r10, r26
    a138:	bb 06       	cpc	r11, r27
    a13a:	08 f0       	brcs	.+2      	; 0xa13e <dir_sdi+0x10a>
    a13c:	8a cf       	rjmp	.-236    	; 0xa052 <dir_sdi+0x1e>
    a13e:	c4 18       	sub	r12, r4
    a140:	d5 08       	sbc	r13, r5
    a142:	e6 08       	sbc	r14, r6
    a144:	f7 08       	sbc	r15, r7
    a146:	d7 cf       	rjmp	.-82     	; 0xa0f6 <dir_sdi+0xc2>
    a148:	c8 01       	movw	r24, r16
    a14a:	0e 94 09 48 	call	0x9012	; 0x9012 <clst2sect>
    a14e:	6e 8b       	std	Y+22, r22	; 0x16
    a150:	7f 8b       	std	Y+23, r23	; 0x17
    a152:	88 8f       	std	Y+24, r24	; 0x18
    a154:	99 8f       	std	Y+25, r25	; 0x19
    a156:	8a 8a       	std	Y+18, r8	; 0x12
    a158:	9b 8a       	std	Y+19, r9	; 0x13
    a15a:	ac 8a       	std	Y+20, r10	; 0x14
    a15c:	bd 8a       	std	Y+21, r11	; 0x15
    a15e:	8e 89       	ldd	r24, Y+22	; 0x16
    a160:	9f 89       	ldd	r25, Y+23	; 0x17
    a162:	a8 8d       	ldd	r26, Y+24	; 0x18
    a164:	b9 8d       	ldd	r27, Y+25	; 0x19
    a166:	00 97       	sbiw	r24, 0x00	; 0
    a168:	a1 05       	cpc	r26, r1
    a16a:	b1 05       	cpc	r27, r1
    a16c:	09 f4       	brne	.+2      	; 0xa170 <dir_sdi+0x13c>
    a16e:	71 cf       	rjmp	.-286    	; 0xa052 <dir_sdi+0x1e>
    a170:	b7 01       	movw	r22, r14
    a172:	a6 01       	movw	r20, r12
    a174:	29 e0       	ldi	r18, 0x09	; 9
    a176:	76 95       	lsr	r23
    a178:	67 95       	ror	r22
    a17a:	57 95       	ror	r21
    a17c:	47 95       	ror	r20
    a17e:	2a 95       	dec	r18
    a180:	d1 f7       	brne	.-12     	; 0xa176 <dir_sdi+0x142>
    a182:	84 0f       	add	r24, r20
    a184:	95 1f       	adc	r25, r21
    a186:	a6 1f       	adc	r26, r22
    a188:	b7 1f       	adc	r27, r23
    a18a:	8e 8b       	std	Y+22, r24	; 0x16
    a18c:	9f 8b       	std	Y+23, r25	; 0x17
    a18e:	a8 8f       	std	Y+24, r26	; 0x18
    a190:	b9 8f       	std	Y+25, r27	; 0x19
    a192:	0b 5c       	subi	r16, 0xCB	; 203
    a194:	1f 4f       	sbci	r17, 0xFF	; 255
    a196:	f1 e0       	ldi	r31, 0x01	; 1
    a198:	df 22       	and	r13, r31
    a19a:	c0 0e       	add	r12, r16
    a19c:	d1 1e       	adc	r13, r17
    a19e:	db 8e       	std	Y+27, r13	; 0x1b
    a1a0:	ca 8e       	std	Y+26, r12	; 0x1a
    a1a2:	80 e0       	ldi	r24, 0x00	; 0
    a1a4:	90 e0       	ldi	r25, 0x00	; 0
    a1a6:	02 c0       	rjmp	.+4      	; 0xa1ac <dir_sdi+0x178>
    a1a8:	81 e0       	ldi	r24, 0x01	; 1
    a1aa:	90 e0       	ldi	r25, 0x00	; 0
    a1ac:	cd b7       	in	r28, 0x3d	; 61
    a1ae:	de b7       	in	r29, 0x3e	; 62
    a1b0:	e0 e1       	ldi	r30, 0x10	; 16
    a1b2:	0c 94 1d e7 	jmp	0x1ce3a	; 0x1ce3a <__epilogue_restores__+0x4>

0000a1b6 <create_chain>:
    a1b6:	a0 e0       	ldi	r26, 0x00	; 0
    a1b8:	b0 e0       	ldi	r27, 0x00	; 0
    a1ba:	e1 ee       	ldi	r30, 0xE1	; 225
    a1bc:	f0 e5       	ldi	r31, 0x50	; 80
    a1be:	0c 94 01 e7 	jmp	0x1ce02	; 0x1ce02 <__prologue_saves__+0x4>
    a1c2:	8c 01       	movw	r16, r24
    a1c4:	2a 01       	movw	r4, r20
    a1c6:	3b 01       	movw	r6, r22
    a1c8:	fc 01       	movw	r30, r24
    a1ca:	c0 81       	ld	r28, Z
    a1cc:	d1 81       	ldd	r29, Z+1	; 0x01
    a1ce:	41 15       	cp	r20, r1
    a1d0:	51 05       	cpc	r21, r1
    a1d2:	61 05       	cpc	r22, r1
    a1d4:	71 05       	cpc	r23, r1
    a1d6:	99 f4       	brne	.+38     	; 0xa1fe <create_chain+0x48>
    a1d8:	8d 84       	ldd	r8, Y+13	; 0x0d
    a1da:	9e 84       	ldd	r9, Y+14	; 0x0e
    a1dc:	af 84       	ldd	r10, Y+15	; 0x0f
    a1de:	b8 88       	ldd	r11, Y+16	; 0x10
    a1e0:	81 14       	cp	r8, r1
    a1e2:	91 04       	cpc	r9, r1
    a1e4:	a1 04       	cpc	r10, r1
    a1e6:	b1 04       	cpc	r11, r1
    a1e8:	51 f1       	breq	.+84     	; 0xa23e <create_chain+0x88>
    a1ea:	89 8d       	ldd	r24, Y+25	; 0x19
    a1ec:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a1ee:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a1f0:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a1f2:	88 16       	cp	r8, r24
    a1f4:	99 06       	cpc	r9, r25
    a1f6:	aa 06       	cpc	r10, r26
    a1f8:	bb 06       	cpc	r11, r27
    a1fa:	28 f1       	brcs	.+74     	; 0xa246 <create_chain+0x90>
    a1fc:	20 c0       	rjmp	.+64     	; 0xa23e <create_chain+0x88>
    a1fe:	ce 01       	movw	r24, r28
    a200:	65 de       	rcall	.-822    	; 0x9ecc <get_fat.isra.9>
    a202:	62 30       	cpi	r22, 0x02	; 2
    a204:	71 05       	cpc	r23, r1
    a206:	81 05       	cpc	r24, r1
    a208:	91 05       	cpc	r25, r1
    a20a:	08 f4       	brcc	.+2      	; 0xa20e <create_chain+0x58>
    a20c:	ea c0       	rjmp	.+468    	; 0xa3e2 <create_chain+0x22c>
    a20e:	6f 3f       	cpi	r22, 0xFF	; 255
    a210:	ff ef       	ldi	r31, 0xFF	; 255
    a212:	7f 07       	cpc	r23, r31
    a214:	8f 07       	cpc	r24, r31
    a216:	9f 07       	cpc	r25, r31
    a218:	29 f4       	brne	.+10     	; 0xa224 <create_chain+0x6e>
    a21a:	4f ef       	ldi	r20, 0xFF	; 255
    a21c:	3f ef       	ldi	r19, 0xFF	; 255
    a21e:	2f ef       	ldi	r18, 0xFF	; 255
    a220:	9f ef       	ldi	r25, 0xFF	; 255
    a222:	e7 c0       	rjmp	.+462    	; 0xa3f2 <create_chain+0x23c>
    a224:	c9 8c       	ldd	r12, Y+25	; 0x19
    a226:	da 8c       	ldd	r13, Y+26	; 0x1a
    a228:	eb 8c       	ldd	r14, Y+27	; 0x1b
    a22a:	fc 8c       	ldd	r15, Y+28	; 0x1c
    a22c:	6c 15       	cp	r22, r12
    a22e:	7d 05       	cpc	r23, r13
    a230:	8e 05       	cpc	r24, r14
    a232:	9f 05       	cpc	r25, r15
    a234:	08 f4       	brcc	.+2      	; 0xa238 <create_chain+0x82>
    a236:	da c0       	rjmp	.+436    	; 0xa3ec <create_chain+0x236>
    a238:	53 01       	movw	r10, r6
    a23a:	42 01       	movw	r8, r4
    a23c:	04 c0       	rjmp	.+8      	; 0xa246 <create_chain+0x90>
    a23e:	81 2c       	mov	r8, r1
    a240:	91 2c       	mov	r9, r1
    a242:	54 01       	movw	r10, r8
    a244:	83 94       	inc	r8
    a246:	89 89       	ldd	r24, Y+17	; 0x11
    a248:	9a 89       	ldd	r25, Y+18	; 0x12
    a24a:	ab 89       	ldd	r26, Y+19	; 0x13
    a24c:	bc 89       	ldd	r27, Y+20	; 0x14
    a24e:	89 2b       	or	r24, r25
    a250:	8a 2b       	or	r24, r26
    a252:	8b 2b       	or	r24, r27
    a254:	11 f4       	brne	.+4      	; 0xa25a <create_chain+0xa4>
    a256:	40 e0       	ldi	r20, 0x00	; 0
    a258:	c5 c0       	rjmp	.+394    	; 0xa3e4 <create_chain+0x22e>
    a25a:	84 14       	cp	r8, r4
    a25c:	95 04       	cpc	r9, r5
    a25e:	a6 04       	cpc	r10, r6
    a260:	b7 04       	cpc	r11, r7
    a262:	09 f0       	breq	.+2      	; 0xa266 <create_chain+0xb0>
    a264:	46 c0       	rjmp	.+140    	; 0xa2f2 <create_chain+0x13c>
    a266:	75 01       	movw	r14, r10
    a268:	64 01       	movw	r12, r8
    a26a:	2f ef       	ldi	r18, 0xFF	; 255
    a26c:	c2 1a       	sub	r12, r18
    a26e:	d2 0a       	sbc	r13, r18
    a270:	e2 0a       	sbc	r14, r18
    a272:	f2 0a       	sbc	r15, r18
    a274:	89 8d       	ldd	r24, Y+25	; 0x19
    a276:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a278:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a27a:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a27c:	c8 16       	cp	r12, r24
    a27e:	d9 06       	cpc	r13, r25
    a280:	ea 06       	cpc	r14, r26
    a282:	fb 06       	cpc	r15, r27
    a284:	28 f0       	brcs	.+10     	; 0xa290 <create_chain+0xda>
    a286:	92 e0       	ldi	r25, 0x02	; 2
    a288:	c9 2e       	mov	r12, r25
    a28a:	d1 2c       	mov	r13, r1
    a28c:	e1 2c       	mov	r14, r1
    a28e:	f1 2c       	mov	r15, r1
    a290:	b7 01       	movw	r22, r14
    a292:	a6 01       	movw	r20, r12
    a294:	f8 01       	movw	r30, r16
    a296:	80 81       	ld	r24, Z
    a298:	91 81       	ldd	r25, Z+1	; 0x01
    a29a:	18 de       	rcall	.-976    	; 0x9ecc <get_fat.isra.9>
    a29c:	61 30       	cpi	r22, 0x01	; 1
    a29e:	71 05       	cpc	r23, r1
    a2a0:	81 05       	cpc	r24, r1
    a2a2:	91 05       	cpc	r25, r1
    a2a4:	09 f4       	brne	.+2      	; 0xa2a8 <create_chain+0xf2>
    a2a6:	9d c0       	rjmp	.+314    	; 0xa3e2 <create_chain+0x22c>
    a2a8:	6f 3f       	cpi	r22, 0xFF	; 255
    a2aa:	ff ef       	ldi	r31, 0xFF	; 255
    a2ac:	7f 07       	cpc	r23, r31
    a2ae:	8f 07       	cpc	r24, r31
    a2b0:	9f 07       	cpc	r25, r31
    a2b2:	09 f4       	brne	.+2      	; 0xa2b6 <create_chain+0x100>
    a2b4:	b2 cf       	rjmp	.-156    	; 0xa21a <create_chain+0x64>
    a2b6:	67 2b       	or	r22, r23
    a2b8:	68 2b       	or	r22, r24
    a2ba:	69 2b       	or	r22, r25
    a2bc:	a9 f0       	breq	.+42     	; 0xa2e8 <create_chain+0x132>
    a2be:	8d 85       	ldd	r24, Y+13	; 0x0d
    a2c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    a2c2:	af 85       	ldd	r26, Y+15	; 0x0f
    a2c4:	b8 89       	ldd	r27, Y+16	; 0x10
    a2c6:	82 30       	cpi	r24, 0x02	; 2
    a2c8:	91 05       	cpc	r25, r1
    a2ca:	a1 05       	cpc	r26, r1
    a2cc:	b1 05       	cpc	r27, r1
    a2ce:	88 f0       	brcs	.+34     	; 0xa2f2 <create_chain+0x13c>
    a2d0:	49 8d       	ldd	r20, Y+25	; 0x19
    a2d2:	5a 8d       	ldd	r21, Y+26	; 0x1a
    a2d4:	6b 8d       	ldd	r22, Y+27	; 0x1b
    a2d6:	7c 8d       	ldd	r23, Y+28	; 0x1c
    a2d8:	84 17       	cp	r24, r20
    a2da:	95 07       	cpc	r25, r21
    a2dc:	a6 07       	cpc	r26, r22
    a2de:	b7 07       	cpc	r27, r23
    a2e0:	40 f4       	brcc	.+16     	; 0xa2f2 <create_chain+0x13c>
    a2e2:	4c 01       	movw	r8, r24
    a2e4:	5d 01       	movw	r10, r26
    a2e6:	05 c0       	rjmp	.+10     	; 0xa2f2 <create_chain+0x13c>
    a2e8:	c1 14       	cp	r12, r1
    a2ea:	d1 04       	cpc	r13, r1
    a2ec:	e1 04       	cpc	r14, r1
    a2ee:	f1 04       	cpc	r15, r1
    a2f0:	c9 f5       	brne	.+114    	; 0xa364 <create_chain+0x1ae>
    a2f2:	75 01       	movw	r14, r10
    a2f4:	64 01       	movw	r12, r8
    a2f6:	2f ef       	ldi	r18, 0xFF	; 255
    a2f8:	c2 1a       	sub	r12, r18
    a2fa:	d2 0a       	sbc	r13, r18
    a2fc:	e2 0a       	sbc	r14, r18
    a2fe:	f2 0a       	sbc	r15, r18
    a300:	89 8d       	ldd	r24, Y+25	; 0x19
    a302:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a304:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a306:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a308:	c8 16       	cp	r12, r24
    a30a:	d9 06       	cpc	r13, r25
    a30c:	ea 06       	cpc	r14, r26
    a30e:	fb 06       	cpc	r15, r27
    a310:	60 f0       	brcs	.+24     	; 0xa32a <create_chain+0x174>
    a312:	82 e0       	ldi	r24, 0x02	; 2
    a314:	88 16       	cp	r8, r24
    a316:	91 04       	cpc	r9, r1
    a318:	a1 04       	cpc	r10, r1
    a31a:	b1 04       	cpc	r11, r1
    a31c:	08 f4       	brcc	.+2      	; 0xa320 <create_chain+0x16a>
    a31e:	9b cf       	rjmp	.-202    	; 0xa256 <create_chain+0xa0>
    a320:	82 e0       	ldi	r24, 0x02	; 2
    a322:	c8 2e       	mov	r12, r24
    a324:	d1 2c       	mov	r13, r1
    a326:	e1 2c       	mov	r14, r1
    a328:	f1 2c       	mov	r15, r1
    a32a:	b7 01       	movw	r22, r14
    a32c:	a6 01       	movw	r20, r12
    a32e:	f8 01       	movw	r30, r16
    a330:	80 81       	ld	r24, Z
    a332:	91 81       	ldd	r25, Z+1	; 0x01
    a334:	cb dd       	rcall	.-1130   	; 0x9ecc <get_fat.isra.9>
    a336:	61 15       	cp	r22, r1
    a338:	71 05       	cpc	r23, r1
    a33a:	81 05       	cpc	r24, r1
    a33c:	91 05       	cpc	r25, r1
    a33e:	91 f0       	breq	.+36     	; 0xa364 <create_chain+0x1ae>
    a340:	61 30       	cpi	r22, 0x01	; 1
    a342:	71 05       	cpc	r23, r1
    a344:	81 05       	cpc	r24, r1
    a346:	91 05       	cpc	r25, r1
    a348:	09 f4       	brne	.+2      	; 0xa34c <create_chain+0x196>
    a34a:	4b c0       	rjmp	.+150    	; 0xa3e2 <create_chain+0x22c>
    a34c:	6f 3f       	cpi	r22, 0xFF	; 255
    a34e:	7f 4f       	sbci	r23, 0xFF	; 255
    a350:	8f 4f       	sbci	r24, 0xFF	; 255
    a352:	9f 4f       	sbci	r25, 0xFF	; 255
    a354:	09 f4       	brne	.+2      	; 0xa358 <create_chain+0x1a2>
    a356:	61 cf       	rjmp	.-318    	; 0xa21a <create_chain+0x64>
    a358:	c8 14       	cp	r12, r8
    a35a:	d9 04       	cpc	r13, r9
    a35c:	ea 04       	cpc	r14, r10
    a35e:	fb 04       	cpc	r15, r11
    a360:	51 f6       	brne	.-108    	; 0xa2f6 <create_chain+0x140>
    a362:	79 cf       	rjmp	.-270    	; 0xa256 <create_chain+0xa0>
    a364:	0f ef       	ldi	r16, 0xFF	; 255
    a366:	1f ef       	ldi	r17, 0xFF	; 255
    a368:	98 01       	movw	r18, r16
    a36a:	b7 01       	movw	r22, r14
    a36c:	a6 01       	movw	r20, r12
    a36e:	ce 01       	movw	r24, r28
    a370:	b4 dc       	rcall	.-1688   	; 0x9cda <put_fat>
    a372:	00 97       	sbiw	r24, 0x00	; 0
    a374:	99 f5       	brne	.+102    	; 0xa3dc <create_chain+0x226>
    a376:	41 14       	cp	r4, r1
    a378:	51 04       	cpc	r5, r1
    a37a:	61 04       	cpc	r6, r1
    a37c:	71 04       	cpc	r7, r1
    a37e:	e9 f4       	brne	.+58     	; 0xa3ba <create_chain+0x204>
    a380:	cd 86       	std	Y+13, r12	; 0x0d
    a382:	de 86       	std	Y+14, r13	; 0x0e
    a384:	ef 86       	std	Y+15, r14	; 0x0f
    a386:	f8 8a       	std	Y+16, r15	; 0x10
    a388:	89 89       	ldd	r24, Y+17	; 0x11
    a38a:	9a 89       	ldd	r25, Y+18	; 0x12
    a38c:	ab 89       	ldd	r26, Y+19	; 0x13
    a38e:	bc 89       	ldd	r27, Y+20	; 0x14
    a390:	49 8d       	ldd	r20, Y+25	; 0x19
    a392:	5a 8d       	ldd	r21, Y+26	; 0x1a
    a394:	6b 8d       	ldd	r22, Y+27	; 0x1b
    a396:	7c 8d       	ldd	r23, Y+28	; 0x1c
    a398:	42 50       	subi	r20, 0x02	; 2
    a39a:	51 09       	sbc	r21, r1
    a39c:	61 09       	sbc	r22, r1
    a39e:	71 09       	sbc	r23, r1
    a3a0:	48 17       	cp	r20, r24
    a3a2:	59 07       	cpc	r21, r25
    a3a4:	6a 07       	cpc	r22, r26
    a3a6:	7b 07       	cpc	r23, r27
    a3a8:	88 f0       	brcs	.+34     	; 0xa3cc <create_chain+0x216>
    a3aa:	01 97       	sbiw	r24, 0x01	; 1
    a3ac:	a1 09       	sbc	r26, r1
    a3ae:	b1 09       	sbc	r27, r1
    a3b0:	89 8b       	std	Y+17, r24	; 0x11
    a3b2:	9a 8b       	std	Y+18, r25	; 0x12
    a3b4:	ab 8b       	std	Y+19, r26	; 0x13
    a3b6:	bc 8b       	std	Y+20, r27	; 0x14
    a3b8:	09 c0       	rjmp	.+18     	; 0xa3cc <create_chain+0x216>
    a3ba:	97 01       	movw	r18, r14
    a3bc:	86 01       	movw	r16, r12
    a3be:	b3 01       	movw	r22, r6
    a3c0:	a2 01       	movw	r20, r4
    a3c2:	ce 01       	movw	r24, r28
    a3c4:	8a dc       	rcall	.-1772   	; 0x9cda <put_fat>
    a3c6:	00 97       	sbiw	r24, 0x00	; 0
    a3c8:	d9 f2       	breq	.-74     	; 0xa380 <create_chain+0x1ca>
    a3ca:	08 c0       	rjmp	.+16     	; 0xa3dc <create_chain+0x226>
    a3cc:	8c 81       	ldd	r24, Y+4	; 0x04
    a3ce:	81 60       	ori	r24, 0x01	; 1
    a3d0:	8c 83       	std	Y+4, r24	; 0x04
    a3d2:	4c 2d       	mov	r20, r12
    a3d4:	3d 2d       	mov	r19, r13
    a3d6:	2e 2d       	mov	r18, r14
    a3d8:	9f 2d       	mov	r25, r15
    a3da:	0b c0       	rjmp	.+22     	; 0xa3f2 <create_chain+0x23c>
    a3dc:	01 97       	sbiw	r24, 0x01	; 1
    a3de:	09 f4       	brne	.+2      	; 0xa3e2 <create_chain+0x22c>
    a3e0:	1c cf       	rjmp	.-456    	; 0xa21a <create_chain+0x64>
    a3e2:	41 e0       	ldi	r20, 0x01	; 1
    a3e4:	30 e0       	ldi	r19, 0x00	; 0
    a3e6:	20 e0       	ldi	r18, 0x00	; 0
    a3e8:	90 e0       	ldi	r25, 0x00	; 0
    a3ea:	03 c0       	rjmp	.+6      	; 0xa3f2 <create_chain+0x23c>
    a3ec:	46 2f       	mov	r20, r22
    a3ee:	37 2f       	mov	r19, r23
    a3f0:	28 2f       	mov	r18, r24
    a3f2:	64 2f       	mov	r22, r20
    a3f4:	73 2f       	mov	r23, r19
    a3f6:	82 2f       	mov	r24, r18
    a3f8:	cd b7       	in	r28, 0x3d	; 61
    a3fa:	de b7       	in	r29, 0x3e	; 62
    a3fc:	e0 e1       	ldi	r30, 0x10	; 16
    a3fe:	0c 94 1d e7 	jmp	0x1ce3a	; 0x1ce3a <__epilogue_restores__+0x4>

0000a402 <remove_chain>:
    a402:	4f 92       	push	r4
    a404:	5f 92       	push	r5
    a406:	6f 92       	push	r6
    a408:	7f 92       	push	r7
    a40a:	af 92       	push	r10
    a40c:	bf 92       	push	r11
    a40e:	cf 92       	push	r12
    a410:	df 92       	push	r13
    a412:	ef 92       	push	r14
    a414:	ff 92       	push	r15
    a416:	0f 93       	push	r16
    a418:	1f 93       	push	r17
    a41a:	cf 93       	push	r28
    a41c:	df 93       	push	r29
    a41e:	5c 01       	movw	r10, r24
    a420:	6a 01       	movw	r12, r20
    a422:	7b 01       	movw	r14, r22
    a424:	b9 01       	movw	r22, r18
    a426:	a8 01       	movw	r20, r16
    a428:	22 e0       	ldi	r18, 0x02	; 2
    a42a:	c2 16       	cp	r12, r18
    a42c:	d1 04       	cpc	r13, r1
    a42e:	e1 04       	cpc	r14, r1
    a430:	f1 04       	cpc	r15, r1
    a432:	10 f4       	brcc	.+4      	; 0xa438 <remove_chain+0x36>
    a434:	22 e0       	ldi	r18, 0x02	; 2
    a436:	27 c0       	rjmp	.+78     	; 0xa486 <remove_chain+0x84>
    a438:	fc 01       	movw	r30, r24
    a43a:	c0 81       	ld	r28, Z
    a43c:	d1 81       	ldd	r29, Z+1	; 0x01
    a43e:	89 8d       	ldd	r24, Y+25	; 0x19
    a440:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a442:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a444:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a446:	c8 16       	cp	r12, r24
    a448:	d9 06       	cpc	r13, r25
    a44a:	ea 06       	cpc	r14, r26
    a44c:	fb 06       	cpc	r15, r27
    a44e:	90 f7       	brcc	.-28     	; 0xa434 <remove_chain+0x32>
    a450:	41 15       	cp	r20, r1
    a452:	51 05       	cpc	r21, r1
    a454:	61 05       	cpc	r22, r1
    a456:	71 05       	cpc	r23, r1
    a458:	41 f0       	breq	.+16     	; 0xa46a <remove_chain+0x68>
    a45a:	0f ef       	ldi	r16, 0xFF	; 255
    a45c:	1f ef       	ldi	r17, 0xFF	; 255
    a45e:	98 01       	movw	r18, r16
    a460:	ce 01       	movw	r24, r28
    a462:	3b dc       	rcall	.-1930   	; 0x9cda <put_fat>
    a464:	00 97       	sbiw	r24, 0x00	; 0
    a466:	09 f0       	breq	.+2      	; 0xa46a <remove_chain+0x68>
    a468:	4c c0       	rjmp	.+152    	; 0xa502 <remove_chain+0x100>
    a46a:	b7 01       	movw	r22, r14
    a46c:	a6 01       	movw	r20, r12
    a46e:	f5 01       	movw	r30, r10
    a470:	80 81       	ld	r24, Z
    a472:	91 81       	ldd	r25, Z+1	; 0x01
    a474:	2b dd       	rcall	.-1450   	; 0x9ecc <get_fat.isra.9>
    a476:	2b 01       	movw	r4, r22
    a478:	3c 01       	movw	r6, r24
    a47a:	61 15       	cp	r22, r1
    a47c:	71 05       	cpc	r23, r1
    a47e:	81 05       	cpc	r24, r1
    a480:	91 05       	cpc	r25, r1
    a482:	19 f4       	brne	.+6      	; 0xa48a <remove_chain+0x88>
    a484:	20 e0       	ldi	r18, 0x00	; 0
    a486:	90 e0       	ldi	r25, 0x00	; 0
    a488:	3d c0       	rjmp	.+122    	; 0xa504 <remove_chain+0x102>
    a48a:	61 30       	cpi	r22, 0x01	; 1
    a48c:	71 05       	cpc	r23, r1
    a48e:	81 05       	cpc	r24, r1
    a490:	91 05       	cpc	r25, r1
    a492:	81 f2       	breq	.-96     	; 0xa434 <remove_chain+0x32>
    a494:	6f 3f       	cpi	r22, 0xFF	; 255
    a496:	7f 4f       	sbci	r23, 0xFF	; 255
    a498:	8f 4f       	sbci	r24, 0xFF	; 255
    a49a:	9f 4f       	sbci	r25, 0xFF	; 255
    a49c:	81 f1       	breq	.+96     	; 0xa4fe <remove_chain+0xfc>
    a49e:	00 e0       	ldi	r16, 0x00	; 0
    a4a0:	10 e0       	ldi	r17, 0x00	; 0
    a4a2:	98 01       	movw	r18, r16
    a4a4:	b7 01       	movw	r22, r14
    a4a6:	a6 01       	movw	r20, r12
    a4a8:	ce 01       	movw	r24, r28
    a4aa:	17 dc       	rcall	.-2002   	; 0x9cda <put_fat>
    a4ac:	00 97       	sbiw	r24, 0x00	; 0
    a4ae:	49 f5       	brne	.+82     	; 0xa502 <remove_chain+0x100>
    a4b0:	89 89       	ldd	r24, Y+17	; 0x11
    a4b2:	9a 89       	ldd	r25, Y+18	; 0x12
    a4b4:	ab 89       	ldd	r26, Y+19	; 0x13
    a4b6:	bc 89       	ldd	r27, Y+20	; 0x14
    a4b8:	49 8d       	ldd	r20, Y+25	; 0x19
    a4ba:	5a 8d       	ldd	r21, Y+26	; 0x1a
    a4bc:	6b 8d       	ldd	r22, Y+27	; 0x1b
    a4be:	7c 8d       	ldd	r23, Y+28	; 0x1c
    a4c0:	6a 01       	movw	r12, r20
    a4c2:	7b 01       	movw	r14, r22
    a4c4:	e2 e0       	ldi	r30, 0x02	; 2
    a4c6:	ce 1a       	sub	r12, r30
    a4c8:	d1 08       	sbc	r13, r1
    a4ca:	e1 08       	sbc	r14, r1
    a4cc:	f1 08       	sbc	r15, r1
    a4ce:	8c 15       	cp	r24, r12
    a4d0:	9d 05       	cpc	r25, r13
    a4d2:	ae 05       	cpc	r26, r14
    a4d4:	bf 05       	cpc	r27, r15
    a4d6:	50 f4       	brcc	.+20     	; 0xa4ec <remove_chain+0xea>
    a4d8:	01 96       	adiw	r24, 0x01	; 1
    a4da:	a1 1d       	adc	r26, r1
    a4dc:	b1 1d       	adc	r27, r1
    a4de:	89 8b       	std	Y+17, r24	; 0x11
    a4e0:	9a 8b       	std	Y+18, r25	; 0x12
    a4e2:	ab 8b       	std	Y+19, r26	; 0x13
    a4e4:	bc 8b       	std	Y+20, r27	; 0x14
    a4e6:	8c 81       	ldd	r24, Y+4	; 0x04
    a4e8:	81 60       	ori	r24, 0x01	; 1
    a4ea:	8c 83       	std	Y+4, r24	; 0x04
    a4ec:	73 01       	movw	r14, r6
    a4ee:	62 01       	movw	r12, r4
    a4f0:	44 16       	cp	r4, r20
    a4f2:	55 06       	cpc	r5, r21
    a4f4:	66 06       	cpc	r6, r22
    a4f6:	77 06       	cpc	r7, r23
    a4f8:	08 f4       	brcc	.+2      	; 0xa4fc <remove_chain+0xfa>
    a4fa:	b7 cf       	rjmp	.-146    	; 0xa46a <remove_chain+0x68>
    a4fc:	c3 cf       	rjmp	.-122    	; 0xa484 <remove_chain+0x82>
    a4fe:	21 e0       	ldi	r18, 0x01	; 1
    a500:	c2 cf       	rjmp	.-124    	; 0xa486 <remove_chain+0x84>
    a502:	28 2f       	mov	r18, r24
    a504:	82 2f       	mov	r24, r18
    a506:	df 91       	pop	r29
    a508:	cf 91       	pop	r28
    a50a:	1f 91       	pop	r17
    a50c:	0f 91       	pop	r16
    a50e:	ff 90       	pop	r15
    a510:	ef 90       	pop	r14
    a512:	df 90       	pop	r13
    a514:	cf 90       	pop	r12
    a516:	bf 90       	pop	r11
    a518:	af 90       	pop	r10
    a51a:	7f 90       	pop	r7
    a51c:	6f 90       	pop	r6
    a51e:	5f 90       	pop	r5
    a520:	4f 90       	pop	r4
    a522:	08 95       	ret

0000a524 <dir_next>:
    a524:	4f 92       	push	r4
    a526:	5f 92       	push	r5
    a528:	6f 92       	push	r6
    a52a:	7f 92       	push	r7
    a52c:	af 92       	push	r10
    a52e:	bf 92       	push	r11
    a530:	cf 92       	push	r12
    a532:	df 92       	push	r13
    a534:	ef 92       	push	r14
    a536:	ff 92       	push	r15
    a538:	0f 93       	push	r16
    a53a:	1f 93       	push	r17
    a53c:	cf 93       	push	r28
    a53e:	df 93       	push	r29
    a540:	ec 01       	movw	r28, r24
    a542:	08 81       	ld	r16, Y
    a544:	19 81       	ldd	r17, Y+1	; 0x01
    a546:	ce 84       	ldd	r12, Y+14	; 0x0e
    a548:	df 84       	ldd	r13, Y+15	; 0x0f
    a54a:	e8 88       	ldd	r14, Y+16	; 0x10
    a54c:	f9 88       	ldd	r15, Y+17	; 0x11
    a54e:	80 e2       	ldi	r24, 0x20	; 32
    a550:	c8 0e       	add	r12, r24
    a552:	d1 1c       	adc	r13, r1
    a554:	e1 1c       	adc	r14, r1
    a556:	f1 1c       	adc	r15, r1
    a558:	c1 14       	cp	r12, r1
    a55a:	d1 04       	cpc	r13, r1
    a55c:	e0 e2       	ldi	r30, 0x20	; 32
    a55e:	ee 06       	cpc	r14, r30
    a560:	f1 04       	cpc	r15, r1
    a562:	20 f0       	brcs	.+8      	; 0xa56c <dir_next+0x48>
    a564:	1e 8a       	std	Y+22, r1	; 0x16
    a566:	1f 8a       	std	Y+23, r1	; 0x17
    a568:	18 8e       	std	Y+24, r1	; 0x18
    a56a:	19 8e       	std	Y+25, r1	; 0x19
    a56c:	8e 89       	ldd	r24, Y+22	; 0x16
    a56e:	9f 89       	ldd	r25, Y+23	; 0x17
    a570:	a8 8d       	ldd	r26, Y+24	; 0x18
    a572:	b9 8d       	ldd	r27, Y+25	; 0x19
    a574:	00 97       	sbiw	r24, 0x00	; 0
    a576:	a1 05       	cpc	r26, r1
    a578:	b1 05       	cpc	r27, r1
    a57a:	09 f4       	brne	.+2      	; 0xa57e <dir_next+0x5a>
    a57c:	a7 c0       	rjmp	.+334    	; 0xa6cc <dir_next+0x1a8>
    a57e:	5b 01       	movw	r10, r22
    a580:	b7 01       	movw	r22, r14
    a582:	a6 01       	movw	r20, r12
    a584:	51 70       	andi	r21, 0x01	; 1
    a586:	66 27       	eor	r22, r22
    a588:	77 27       	eor	r23, r23
    a58a:	45 2b       	or	r20, r21
    a58c:	46 2b       	or	r20, r22
    a58e:	47 2b       	or	r20, r23
    a590:	09 f0       	breq	.+2      	; 0xa594 <dir_next+0x70>
    a592:	8d c0       	rjmp	.+282    	; 0xa6ae <dir_next+0x18a>
    a594:	01 96       	adiw	r24, 0x01	; 1
    a596:	a1 1d       	adc	r26, r1
    a598:	b1 1d       	adc	r27, r1
    a59a:	8e 8b       	std	Y+22, r24	; 0x16
    a59c:	9f 8b       	std	Y+23, r25	; 0x17
    a59e:	a8 8f       	std	Y+24, r26	; 0x18
    a5a0:	b9 8f       	std	Y+25, r27	; 0x19
    a5a2:	4a 89       	ldd	r20, Y+18	; 0x12
    a5a4:	5b 89       	ldd	r21, Y+19	; 0x13
    a5a6:	6c 89       	ldd	r22, Y+20	; 0x14
    a5a8:	7d 89       	ldd	r23, Y+21	; 0x15
    a5aa:	f8 01       	movw	r30, r16
    a5ac:	41 15       	cp	r20, r1
    a5ae:	51 05       	cpc	r21, r1
    a5b0:	61 05       	cpc	r22, r1
    a5b2:	71 05       	cpc	r23, r1
    a5b4:	c1 f4       	brne	.+48     	; 0xa5e6 <dir_next+0xc2>
    a5b6:	87 81       	ldd	r24, Z+7	; 0x07
    a5b8:	90 85       	ldd	r25, Z+8	; 0x08
    a5ba:	a0 e0       	ldi	r26, 0x00	; 0
    a5bc:	b0 e0       	ldi	r27, 0x00	; 0
    a5be:	b7 01       	movw	r22, r14
    a5c0:	a6 01       	movw	r20, r12
    a5c2:	35 e0       	ldi	r19, 0x05	; 5
    a5c4:	76 95       	lsr	r23
    a5c6:	67 95       	ror	r22
    a5c8:	57 95       	ror	r21
    a5ca:	47 95       	ror	r20
    a5cc:	3a 95       	dec	r19
    a5ce:	d1 f7       	brne	.-12     	; 0xa5c4 <dir_next+0xa0>
    a5d0:	48 17       	cp	r20, r24
    a5d2:	59 07       	cpc	r21, r25
    a5d4:	6a 07       	cpc	r22, r26
    a5d6:	7b 07       	cpc	r23, r27
    a5d8:	08 f4       	brcc	.+2      	; 0xa5dc <dir_next+0xb8>
    a5da:	69 c0       	rjmp	.+210    	; 0xa6ae <dir_next+0x18a>
    a5dc:	1e 8a       	std	Y+22, r1	; 0x16
    a5de:	1f 8a       	std	Y+23, r1	; 0x17
    a5e0:	18 8e       	std	Y+24, r1	; 0x18
    a5e2:	19 8e       	std	Y+25, r1	; 0x19
    a5e4:	73 c0       	rjmp	.+230    	; 0xa6cc <dir_next+0x1a8>
    a5e6:	81 85       	ldd	r24, Z+9	; 0x09
    a5e8:	92 85       	ldd	r25, Z+10	; 0x0a
    a5ea:	01 97       	sbiw	r24, 0x01	; 1
    a5ec:	a0 e0       	ldi	r26, 0x00	; 0
    a5ee:	b0 e0       	ldi	r27, 0x00	; 0
    a5f0:	26 01       	movw	r4, r12
    a5f2:	37 01       	movw	r6, r14
    a5f4:	29 e0       	ldi	r18, 0x09	; 9
    a5f6:	76 94       	lsr	r7
    a5f8:	67 94       	ror	r6
    a5fa:	57 94       	ror	r5
    a5fc:	47 94       	ror	r4
    a5fe:	2a 95       	dec	r18
    a600:	d1 f7       	brne	.-12     	; 0xa5f6 <dir_next+0xd2>
    a602:	84 21       	and	r24, r4
    a604:	95 21       	and	r25, r5
    a606:	a6 21       	and	r26, r6
    a608:	b7 21       	and	r27, r7
    a60a:	89 2b       	or	r24, r25
    a60c:	8a 2b       	or	r24, r26
    a60e:	8b 2b       	or	r24, r27
    a610:	09 f0       	breq	.+2      	; 0xa614 <dir_next+0xf0>
    a612:	4d c0       	rjmp	.+154    	; 0xa6ae <dir_next+0x18a>
    a614:	c8 01       	movw	r24, r16
    a616:	5a dc       	rcall	.-1868   	; 0x9ecc <get_fat.isra.9>
    a618:	2b 01       	movw	r4, r22
    a61a:	3c 01       	movw	r6, r24
    a61c:	62 30       	cpi	r22, 0x02	; 2
    a61e:	71 05       	cpc	r23, r1
    a620:	81 05       	cpc	r24, r1
    a622:	91 05       	cpc	r25, r1
    a624:	18 f4       	brcc	.+6      	; 0xa62c <dir_next+0x108>
    a626:	82 e0       	ldi	r24, 0x02	; 2
    a628:	90 e0       	ldi	r25, 0x00	; 0
    a62a:	55 c0       	rjmp	.+170    	; 0xa6d6 <dir_next+0x1b2>
    a62c:	8f ef       	ldi	r24, 0xFF	; 255
    a62e:	48 16       	cp	r4, r24
    a630:	58 06       	cpc	r5, r24
    a632:	68 06       	cpc	r6, r24
    a634:	78 06       	cpc	r7, r24
    a636:	19 f4       	brne	.+6      	; 0xa63e <dir_next+0x11a>
    a638:	81 e0       	ldi	r24, 0x01	; 1
    a63a:	90 e0       	ldi	r25, 0x00	; 0
    a63c:	4c c0       	rjmp	.+152    	; 0xa6d6 <dir_next+0x1b2>
    a63e:	f8 01       	movw	r30, r16
    a640:	81 8d       	ldd	r24, Z+25	; 0x19
    a642:	92 8d       	ldd	r25, Z+26	; 0x1a
    a644:	a3 8d       	ldd	r26, Z+27	; 0x1b
    a646:	b4 8d       	ldd	r27, Z+28	; 0x1c
    a648:	48 16       	cp	r4, r24
    a64a:	59 06       	cpc	r5, r25
    a64c:	6a 06       	cpc	r6, r26
    a64e:	7b 06       	cpc	r7, r27
    a650:	08 f1       	brcs	.+66     	; 0xa694 <dir_next+0x170>
    a652:	ab 28       	or	r10, r11
    a654:	19 f2       	breq	.-122    	; 0xa5dc <dir_next+0xb8>
    a656:	4a 89       	ldd	r20, Y+18	; 0x12
    a658:	5b 89       	ldd	r21, Y+19	; 0x13
    a65a:	6c 89       	ldd	r22, Y+20	; 0x14
    a65c:	7d 89       	ldd	r23, Y+21	; 0x15
    a65e:	ce 01       	movw	r24, r28
    a660:	aa dd       	rcall	.-1196   	; 0xa1b6 <create_chain>
    a662:	2b 01       	movw	r4, r22
    a664:	3c 01       	movw	r6, r24
    a666:	61 15       	cp	r22, r1
    a668:	71 05       	cpc	r23, r1
    a66a:	81 05       	cpc	r24, r1
    a66c:	91 05       	cpc	r25, r1
    a66e:	89 f1       	breq	.+98     	; 0xa6d2 <dir_next+0x1ae>
    a670:	61 30       	cpi	r22, 0x01	; 1
    a672:	71 05       	cpc	r23, r1
    a674:	81 05       	cpc	r24, r1
    a676:	91 05       	cpc	r25, r1
    a678:	b1 f2       	breq	.-84     	; 0xa626 <dir_next+0x102>
    a67a:	8f ef       	ldi	r24, 0xFF	; 255
    a67c:	48 16       	cp	r4, r24
    a67e:	58 06       	cpc	r5, r24
    a680:	68 06       	cpc	r6, r24
    a682:	78 06       	cpc	r7, r24
    a684:	c9 f2       	breq	.-78     	; 0xa638 <dir_next+0x114>
    a686:	b3 01       	movw	r22, r6
    a688:	a2 01       	movw	r20, r4
    a68a:	c8 01       	movw	r24, r16
    a68c:	0e 94 f0 4a 	call	0x95e0	; 0x95e0 <dir_clear>
    a690:	89 2b       	or	r24, r25
    a692:	91 f6       	brne	.-92     	; 0xa638 <dir_next+0x114>
    a694:	4a 8a       	std	Y+18, r4	; 0x12
    a696:	5b 8a       	std	Y+19, r5	; 0x13
    a698:	6c 8a       	std	Y+20, r6	; 0x14
    a69a:	7d 8a       	std	Y+21, r7	; 0x15
    a69c:	b3 01       	movw	r22, r6
    a69e:	a2 01       	movw	r20, r4
    a6a0:	c8 01       	movw	r24, r16
    a6a2:	0e 94 09 48 	call	0x9012	; 0x9012 <clst2sect>
    a6a6:	6e 8b       	std	Y+22, r22	; 0x16
    a6a8:	7f 8b       	std	Y+23, r23	; 0x17
    a6aa:	88 8f       	std	Y+24, r24	; 0x18
    a6ac:	99 8f       	std	Y+25, r25	; 0x19
    a6ae:	ce 86       	std	Y+14, r12	; 0x0e
    a6b0:	df 86       	std	Y+15, r13	; 0x0f
    a6b2:	e8 8a       	std	Y+16, r14	; 0x10
    a6b4:	f9 8a       	std	Y+17, r15	; 0x11
    a6b6:	0b 5c       	subi	r16, 0xCB	; 203
    a6b8:	1f 4f       	sbci	r17, 0xFF	; 255
    a6ba:	e1 e0       	ldi	r30, 0x01	; 1
    a6bc:	de 22       	and	r13, r30
    a6be:	c0 0e       	add	r12, r16
    a6c0:	d1 1e       	adc	r13, r17
    a6c2:	db 8e       	std	Y+27, r13	; 0x1b
    a6c4:	ca 8e       	std	Y+26, r12	; 0x1a
    a6c6:	80 e0       	ldi	r24, 0x00	; 0
    a6c8:	90 e0       	ldi	r25, 0x00	; 0
    a6ca:	05 c0       	rjmp	.+10     	; 0xa6d6 <dir_next+0x1b2>
    a6cc:	84 e0       	ldi	r24, 0x04	; 4
    a6ce:	90 e0       	ldi	r25, 0x00	; 0
    a6d0:	02 c0       	rjmp	.+4      	; 0xa6d6 <dir_next+0x1b2>
    a6d2:	87 e0       	ldi	r24, 0x07	; 7
    a6d4:	90 e0       	ldi	r25, 0x00	; 0
    a6d6:	df 91       	pop	r29
    a6d8:	cf 91       	pop	r28
    a6da:	1f 91       	pop	r17
    a6dc:	0f 91       	pop	r16
    a6de:	ff 90       	pop	r15
    a6e0:	ef 90       	pop	r14
    a6e2:	df 90       	pop	r13
    a6e4:	cf 90       	pop	r12
    a6e6:	bf 90       	pop	r11
    a6e8:	af 90       	pop	r10
    a6ea:	7f 90       	pop	r7
    a6ec:	6f 90       	pop	r6
    a6ee:	5f 90       	pop	r5
    a6f0:	4f 90       	pop	r4
    a6f2:	08 95       	ret

0000a6f4 <dir_alloc>:
    a6f4:	a0 e0       	ldi	r26, 0x00	; 0
    a6f6:	b0 e0       	ldi	r27, 0x00	; 0
    a6f8:	e0 e8       	ldi	r30, 0x80	; 128
    a6fa:	f3 e5       	ldi	r31, 0x53	; 83
    a6fc:	0c 94 09 e7 	jmp	0x1ce12	; 0x1ce12 <__prologue_saves__+0x14>
    a700:	ec 01       	movw	r28, r24
    a702:	6b 01       	movw	r12, r22
    a704:	e8 80       	ld	r14, Y
    a706:	f9 80       	ldd	r15, Y+1	; 0x01
    a708:	40 e0       	ldi	r20, 0x00	; 0
    a70a:	50 e0       	ldi	r21, 0x00	; 0
    a70c:	ba 01       	movw	r22, r20
    a70e:	92 dc       	rcall	.-1756   	; 0xa034 <dir_sdi>
    a710:	00 97       	sbiw	r24, 0x00	; 0
    a712:	f9 f4       	brne	.+62     	; 0xa752 <dir_alloc+0x5e>
    a714:	00 e0       	ldi	r16, 0x00	; 0
    a716:	10 e0       	ldi	r17, 0x00	; 0
    a718:	4e 89       	ldd	r20, Y+22	; 0x16
    a71a:	5f 89       	ldd	r21, Y+23	; 0x17
    a71c:	68 8d       	ldd	r22, Y+24	; 0x18
    a71e:	79 8d       	ldd	r23, Y+25	; 0x19
    a720:	c7 01       	movw	r24, r14
    a722:	06 d8       	rcall	.-4084   	; 0x9730 <move_window>
    a724:	00 97       	sbiw	r24, 0x00	; 0
    a726:	a9 f4       	brne	.+42     	; 0xa752 <dir_alloc+0x5e>
    a728:	ea 8d       	ldd	r30, Y+26	; 0x1a
    a72a:	fb 8d       	ldd	r31, Y+27	; 0x1b
    a72c:	20 81       	ld	r18, Z
    a72e:	25 3e       	cpi	r18, 0xE5	; 229
    a730:	11 f0       	breq	.+4      	; 0xa736 <dir_alloc+0x42>
    a732:	21 11       	cpse	r18, r1
    a734:	06 c0       	rjmp	.+12     	; 0xa742 <dir_alloc+0x4e>
    a736:	0f 5f       	subi	r16, 0xFF	; 255
    a738:	1f 4f       	sbci	r17, 0xFF	; 255
    a73a:	0c 15       	cp	r16, r12
    a73c:	1d 05       	cpc	r17, r13
    a73e:	19 f4       	brne	.+6      	; 0xa746 <dir_alloc+0x52>
    a740:	0d c0       	rjmp	.+26     	; 0xa75c <dir_alloc+0x68>
    a742:	00 e0       	ldi	r16, 0x00	; 0
    a744:	10 e0       	ldi	r17, 0x00	; 0
    a746:	61 e0       	ldi	r22, 0x01	; 1
    a748:	70 e0       	ldi	r23, 0x00	; 0
    a74a:	ce 01       	movw	r24, r28
    a74c:	eb de       	rcall	.-554    	; 0xa524 <dir_next>
    a74e:	00 97       	sbiw	r24, 0x00	; 0
    a750:	19 f3       	breq	.-58     	; 0xa718 <dir_alloc+0x24>
    a752:	84 30       	cpi	r24, 0x04	; 4
    a754:	91 05       	cpc	r25, r1
    a756:	11 f4       	brne	.+4      	; 0xa75c <dir_alloc+0x68>
    a758:	87 e0       	ldi	r24, 0x07	; 7
    a75a:	90 e0       	ldi	r25, 0x00	; 0
    a75c:	cd b7       	in	r28, 0x3d	; 61
    a75e:	de b7       	in	r29, 0x3e	; 62
    a760:	e8 e0       	ldi	r30, 0x08	; 8
    a762:	0c 94 25 e7 	jmp	0x1ce4a	; 0x1ce4a <__epilogue_restores__+0x14>

0000a766 <dir_read>:
    a766:	a0 e0       	ldi	r26, 0x00	; 0
    a768:	b0 e0       	ldi	r27, 0x00	; 0
    a76a:	e9 eb       	ldi	r30, 0xB9	; 185
    a76c:	f3 e5       	ldi	r31, 0x53	; 83
    a76e:	0c 94 05 e7 	jmp	0x1ce0a	; 0x1ce0a <__prologue_saves__+0xc>
    a772:	ec 01       	movw	r28, r24
    a774:	7b 01       	movw	r14, r22
    a776:	a8 80       	ld	r10, Y
    a778:	b9 80       	ldd	r11, Y+1	; 0x01
    a77a:	dd 24       	eor	r13, r13
    a77c:	da 94       	dec	r13
    a77e:	1f ef       	ldi	r17, 0xFF	; 255
    a780:	84 e0       	ldi	r24, 0x04	; 4
    a782:	90 e0       	ldi	r25, 0x00	; 0
    a784:	fd e0       	ldi	r31, 0x0D	; 13
    a786:	cf 2e       	mov	r12, r31
    a788:	4e 89       	ldd	r20, Y+22	; 0x16
    a78a:	5f 89       	ldd	r21, Y+23	; 0x17
    a78c:	68 8d       	ldd	r22, Y+24	; 0x18
    a78e:	79 8d       	ldd	r23, Y+25	; 0x19
    a790:	41 15       	cp	r20, r1
    a792:	51 05       	cpc	r21, r1
    a794:	61 05       	cpc	r22, r1
    a796:	71 05       	cpc	r23, r1
    a798:	09 f4       	brne	.+2      	; 0xa79c <dir_read+0x36>
    a79a:	9a c0       	rjmp	.+308    	; 0xa8d0 <dir_read+0x16a>
    a79c:	c5 01       	movw	r24, r10
    a79e:	0e 94 98 4b 	call	0x9730	; 0x9730 <move_window>
    a7a2:	00 97       	sbiw	r24, 0x00	; 0
    a7a4:	09 f0       	breq	.+2      	; 0xa7a8 <dir_read+0x42>
    a7a6:	96 c0       	rjmp	.+300    	; 0xa8d4 <dir_read+0x16e>
    a7a8:	8a 8c       	ldd	r8, Y+26	; 0x1a
    a7aa:	9b 8c       	ldd	r9, Y+27	; 0x1b
    a7ac:	f4 01       	movw	r30, r8
    a7ae:	00 81       	ld	r16, Z
    a7b0:	00 23       	and	r16, r16
    a7b2:	09 f4       	brne	.+2      	; 0xa7b6 <dir_read+0x50>
    a7b4:	97 c0       	rjmp	.+302    	; 0xa8e4 <dir_read+0x17e>
    a7b6:	83 85       	ldd	r24, Z+11	; 0x0b
    a7b8:	8f 73       	andi	r24, 0x3F	; 63
    a7ba:	8c 83       	std	Y+4, r24	; 0x04
    a7bc:	05 3e       	cpi	r16, 0xE5	; 229
    a7be:	09 f4       	brne	.+2      	; 0xa7c2 <dir_read+0x5c>
    a7c0:	7e c0       	rjmp	.+252    	; 0xa8be <dir_read+0x158>
    a7c2:	0e 32       	cpi	r16, 0x2E	; 46
    a7c4:	09 f4       	brne	.+2      	; 0xa7c8 <dir_read+0x62>
    a7c6:	7b c0       	rjmp	.+246    	; 0xa8be <dir_read+0x158>
    a7c8:	21 e0       	ldi	r18, 0x01	; 1
    a7ca:	30 e0       	ldi	r19, 0x00	; 0
    a7cc:	98 2f       	mov	r25, r24
    a7ce:	9f 71       	andi	r25, 0x1F	; 31
    a7d0:	98 30       	cpi	r25, 0x08	; 8
    a7d2:	11 f0       	breq	.+4      	; 0xa7d8 <dir_read+0x72>
    a7d4:	20 e0       	ldi	r18, 0x00	; 0
    a7d6:	30 e0       	ldi	r19, 0x00	; 0
    a7d8:	2e 15       	cp	r18, r14
    a7da:	3f 05       	cpc	r19, r15
    a7dc:	09 f0       	breq	.+2      	; 0xa7e0 <dir_read+0x7a>
    a7de:	6f c0       	rjmp	.+222    	; 0xa8be <dir_read+0x158>
    a7e0:	8f 30       	cpi	r24, 0x0F	; 15
    a7e2:	09 f0       	breq	.+2      	; 0xa7e6 <dir_read+0x80>
    a7e4:	5c c0       	rjmp	.+184    	; 0xa89e <dir_read+0x138>
    a7e6:	06 ff       	sbrs	r16, 6
    a7e8:	0c c0       	rjmp	.+24     	; 0xa802 <dir_read+0x9c>
    a7ea:	f4 01       	movw	r30, r8
    a7ec:	85 85       	ldd	r24, Z+13	; 0x0d
    a7ee:	0f 7b       	andi	r16, 0xBF	; 191
    a7f0:	4e 85       	ldd	r20, Y+14	; 0x0e
    a7f2:	5f 85       	ldd	r21, Y+15	; 0x0f
    a7f4:	68 89       	ldd	r22, Y+16	; 0x10
    a7f6:	79 89       	ldd	r23, Y+17	; 0x11
    a7f8:	48 a7       	std	Y+40, r20	; 0x28
    a7fa:	59 a7       	std	Y+41, r21	; 0x29
    a7fc:	6a a7       	std	Y+42, r22	; 0x2a
    a7fe:	7b a7       	std	Y+43, r23	; 0x2b
    a800:	03 c0       	rjmp	.+6      	; 0xa808 <dir_read+0xa2>
    a802:	10 13       	cpse	r17, r16
    a804:	5c c0       	rjmp	.+184    	; 0xa8be <dir_read+0x158>
    a806:	8d 2d       	mov	r24, r13
    a808:	f4 01       	movw	r30, r8
    a80a:	d5 84       	ldd	r13, Z+13	; 0x0d
    a80c:	d8 12       	cpse	r13, r24
    a80e:	56 c0       	rjmp	.+172    	; 0xa8bc <dir_read+0x156>
    a810:	82 8d       	ldd	r24, Z+26	; 0x1a
    a812:	93 8d       	ldd	r25, Z+27	; 0x1b
    a814:	89 2b       	or	r24, r25
    a816:	09 f0       	breq	.+2      	; 0xa81a <dir_read+0xb4>
    a818:	52 c0       	rjmp	.+164    	; 0xa8be <dir_read+0x158>
    a81a:	f5 01       	movw	r30, r10
    a81c:	63 85       	ldd	r22, Z+11	; 0x0b
    a81e:	74 85       	ldd	r23, Z+12	; 0x0c
    a820:	f4 01       	movw	r30, r8
    a822:	80 81       	ld	r24, Z
    a824:	90 e0       	ldi	r25, 0x00	; 0
    a826:	8f 7b       	andi	r24, 0xBF	; 191
    a828:	01 97       	sbiw	r24, 0x01	; 1
    a82a:	c8 9e       	mul	r12, r24
    a82c:	90 01       	movw	r18, r0
    a82e:	c9 9e       	mul	r12, r25
    a830:	30 0d       	add	r19, r0
    a832:	11 24       	eor	r1, r1
    a834:	ab ee       	ldi	r26, 0xEB	; 235
    a836:	b4 e0       	ldi	r27, 0x04	; 4
    a838:	81 e0       	ldi	r24, 0x01	; 1
    a83a:	90 e0       	ldi	r25, 0x00	; 0
    a83c:	4d 91       	ld	r20, X+
    a83e:	f4 01       	movw	r30, r8
    a840:	e4 0f       	add	r30, r20
    a842:	f1 1d       	adc	r31, r1
    a844:	40 81       	ld	r20, Z
    a846:	51 81       	ldd	r21, Z+1	; 0x01
    a848:	00 97       	sbiw	r24, 0x00	; 0
    a84a:	81 f0       	breq	.+32     	; 0xa86c <dir_read+0x106>
    a84c:	2f 3f       	cpi	r18, 0xFF	; 255
    a84e:	31 05       	cpc	r19, r1
    a850:	09 f0       	breq	.+2      	; 0xa854 <dir_read+0xee>
    a852:	a8 f5       	brcc	.+106    	; 0xa8be <dir_read+0x158>
    a854:	c9 01       	movw	r24, r18
    a856:	88 0f       	add	r24, r24
    a858:	99 1f       	adc	r25, r25
    a85a:	86 0f       	add	r24, r22
    a85c:	97 1f       	adc	r25, r23
    a85e:	fc 01       	movw	r30, r24
    a860:	51 83       	std	Z+1, r21	; 0x01
    a862:	40 83       	st	Z, r20
    a864:	ca 01       	movw	r24, r20
    a866:	2f 5f       	subi	r18, 0xFF	; 255
    a868:	3f 4f       	sbci	r19, 0xFF	; 255
    a86a:	03 c0       	rjmp	.+6      	; 0xa872 <dir_read+0x10c>
    a86c:	4f 3f       	cpi	r20, 0xFF	; 255
    a86e:	5f 4f       	sbci	r21, 0xFF	; 255
    a870:	31 f5       	brne	.+76     	; 0xa8be <dir_read+0x158>
    a872:	44 e0       	ldi	r20, 0x04	; 4
    a874:	a8 3f       	cpi	r26, 0xF8	; 248
    a876:	b4 07       	cpc	r27, r20
    a878:	09 f7       	brne	.-62     	; 0xa83c <dir_read+0xd6>
    a87a:	f4 01       	movw	r30, r8
    a87c:	40 81       	ld	r20, Z
    a87e:	46 ff       	sbrs	r20, 6
    a880:	2e c0       	rjmp	.+92     	; 0xa8de <dir_read+0x178>
    a882:	89 2b       	or	r24, r25
    a884:	61 f1       	breq	.+88     	; 0xa8de <dir_read+0x178>
    a886:	2f 3f       	cpi	r18, 0xFF	; 255
    a888:	31 05       	cpc	r19, r1
    a88a:	09 f0       	breq	.+2      	; 0xa88e <dir_read+0x128>
    a88c:	c0 f4       	brcc	.+48     	; 0xa8be <dir_read+0x158>
    a88e:	22 0f       	add	r18, r18
    a890:	33 1f       	adc	r19, r19
    a892:	fb 01       	movw	r30, r22
    a894:	e2 0f       	add	r30, r18
    a896:	f3 1f       	adc	r31, r19
    a898:	11 82       	std	Z+1, r1	; 0x01
    a89a:	10 82       	st	Z, r1
    a89c:	20 c0       	rjmp	.+64     	; 0xa8de <dir_read+0x178>
    a89e:	11 11       	cpse	r17, r1
    a8a0:	05 c0       	rjmp	.+10     	; 0xa8ac <dir_read+0x146>
    a8a2:	c4 01       	movw	r24, r8
    a8a4:	0e 94 6d 48 	call	0x90da	; 0x90da <sum_sfn>
    a8a8:	d8 16       	cp	r13, r24
    a8aa:	f9 f0       	breq	.+62     	; 0xa8ea <dir_read+0x184>
    a8ac:	8f ef       	ldi	r24, 0xFF	; 255
    a8ae:	9f ef       	ldi	r25, 0xFF	; 255
    a8b0:	dc 01       	movw	r26, r24
    a8b2:	88 a7       	std	Y+40, r24	; 0x28
    a8b4:	99 a7       	std	Y+41, r25	; 0x29
    a8b6:	aa a7       	std	Y+42, r26	; 0x2a
    a8b8:	bb a7       	std	Y+43, r27	; 0x2b
    a8ba:	17 c0       	rjmp	.+46     	; 0xa8ea <dir_read+0x184>
    a8bc:	d8 2e       	mov	r13, r24
    a8be:	1f ef       	ldi	r17, 0xFF	; 255
    a8c0:	60 e0       	ldi	r22, 0x00	; 0
    a8c2:	70 e0       	ldi	r23, 0x00	; 0
    a8c4:	ce 01       	movw	r24, r28
    a8c6:	2e de       	rcall	.-932    	; 0xa524 <dir_next>
    a8c8:	00 97       	sbiw	r24, 0x00	; 0
    a8ca:	09 f4       	brne	.+2      	; 0xa8ce <dir_read+0x168>
    a8cc:	5d cf       	rjmp	.-326    	; 0xa788 <dir_read+0x22>
    a8ce:	02 c0       	rjmp	.+4      	; 0xa8d4 <dir_read+0x16e>
    a8d0:	00 97       	sbiw	r24, 0x00	; 0
    a8d2:	59 f0       	breq	.+22     	; 0xa8ea <dir_read+0x184>
    a8d4:	1e 8a       	std	Y+22, r1	; 0x16
    a8d6:	1f 8a       	std	Y+23, r1	; 0x17
    a8d8:	18 8e       	std	Y+24, r1	; 0x18
    a8da:	19 8e       	std	Y+25, r1	; 0x19
    a8dc:	08 c0       	rjmp	.+16     	; 0xa8ee <dir_read+0x188>
    a8de:	1f ef       	ldi	r17, 0xFF	; 255
    a8e0:	10 0f       	add	r17, r16
    a8e2:	ee cf       	rjmp	.-36     	; 0xa8c0 <dir_read+0x15a>
    a8e4:	84 e0       	ldi	r24, 0x04	; 4
    a8e6:	90 e0       	ldi	r25, 0x00	; 0
    a8e8:	f5 cf       	rjmp	.-22     	; 0xa8d4 <dir_read+0x16e>
    a8ea:	80 e0       	ldi	r24, 0x00	; 0
    a8ec:	90 e0       	ldi	r25, 0x00	; 0
    a8ee:	cd b7       	in	r28, 0x3d	; 61
    a8f0:	de b7       	in	r29, 0x3e	; 62
    a8f2:	ec e0       	ldi	r30, 0x0C	; 12
    a8f4:	0c 94 21 e7 	jmp	0x1ce42	; 0x1ce42 <__epilogue_restores__+0xc>

0000a8f8 <dir_remove>:
    a8f8:	a0 e0       	ldi	r26, 0x00	; 0
    a8fa:	b0 e0       	ldi	r27, 0x00	; 0
    a8fc:	e2 e8       	ldi	r30, 0x82	; 130
    a8fe:	f4 e5       	ldi	r31, 0x54	; 84
    a900:	0c 94 07 e7 	jmp	0x1ce0e	; 0x1ce0e <__prologue_saves__+0x10>
    a904:	ec 01       	movw	r28, r24
    a906:	08 81       	ld	r16, Y
    a908:	19 81       	ldd	r17, Y+1	; 0x01
    a90a:	ce 84       	ldd	r12, Y+14	; 0x0e
    a90c:	df 84       	ldd	r13, Y+15	; 0x0f
    a90e:	e8 88       	ldd	r14, Y+16	; 0x10
    a910:	f9 88       	ldd	r15, Y+17	; 0x11
    a912:	48 a5       	ldd	r20, Y+40	; 0x28
    a914:	59 a5       	ldd	r21, Y+41	; 0x29
    a916:	6a a5       	ldd	r22, Y+42	; 0x2a
    a918:	7b a5       	ldd	r23, Y+43	; 0x2b
    a91a:	4f 3f       	cpi	r20, 0xFF	; 255
    a91c:	8f ef       	ldi	r24, 0xFF	; 255
    a91e:	58 07       	cpc	r21, r24
    a920:	68 07       	cpc	r22, r24
    a922:	78 07       	cpc	r23, r24
    a924:	29 f4       	brne	.+10     	; 0xa930 <dir_remove+0x38>
    a926:	85 ee       	ldi	r24, 0xE5	; 229
    a928:	b8 2e       	mov	r11, r24
    a92a:	aa 24       	eor	r10, r10
    a92c:	a3 94       	inc	r10
    a92e:	19 c0       	rjmp	.+50     	; 0xa962 <dir_remove+0x6a>
    a930:	ce 01       	movw	r24, r28
    a932:	80 db       	rcall	.-2304   	; 0xa034 <dir_sdi>
    a934:	00 97       	sbiw	r24, 0x00	; 0
    a936:	19 f5       	brne	.+70     	; 0xa97e <dir_remove+0x86>
    a938:	f6 cf       	rjmp	.-20     	; 0xa926 <dir_remove+0x2e>
    a93a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    a93c:	fb 8d       	ldd	r31, Y+27	; 0x1b
    a93e:	b0 82       	st	Z, r11
    a940:	f8 01       	movw	r30, r16
    a942:	a3 82       	std	Z+3, r10	; 0x03
    a944:	4e 85       	ldd	r20, Y+14	; 0x0e
    a946:	5f 85       	ldd	r21, Y+15	; 0x0f
    a948:	68 89       	ldd	r22, Y+16	; 0x10
    a94a:	79 89       	ldd	r23, Y+17	; 0x11
    a94c:	4c 15       	cp	r20, r12
    a94e:	5d 05       	cpc	r21, r13
    a950:	6e 05       	cpc	r22, r14
    a952:	7f 05       	cpc	r23, r15
    a954:	a0 f4       	brcc	.+40     	; 0xa97e <dir_remove+0x86>
    a956:	60 e0       	ldi	r22, 0x00	; 0
    a958:	70 e0       	ldi	r23, 0x00	; 0
    a95a:	ce 01       	movw	r24, r28
    a95c:	e3 dd       	rcall	.-1082   	; 0xa524 <dir_next>
    a95e:	00 97       	sbiw	r24, 0x00	; 0
    a960:	49 f4       	brne	.+18     	; 0xa974 <dir_remove+0x7c>
    a962:	4e 89       	ldd	r20, Y+22	; 0x16
    a964:	5f 89       	ldd	r21, Y+23	; 0x17
    a966:	68 8d       	ldd	r22, Y+24	; 0x18
    a968:	79 8d       	ldd	r23, Y+25	; 0x19
    a96a:	c8 01       	movw	r24, r16
    a96c:	0e 94 98 4b 	call	0x9730	; 0x9730 <move_window>
    a970:	00 97       	sbiw	r24, 0x00	; 0
    a972:	19 f3       	breq	.-58     	; 0xa93a <dir_remove+0x42>
    a974:	84 30       	cpi	r24, 0x04	; 4
    a976:	91 05       	cpc	r25, r1
    a978:	11 f4       	brne	.+4      	; 0xa97e <dir_remove+0x86>
    a97a:	82 e0       	ldi	r24, 0x02	; 2
    a97c:	90 e0       	ldi	r25, 0x00	; 0
    a97e:	cd b7       	in	r28, 0x3d	; 61
    a980:	de b7       	in	r29, 0x3e	; 62
    a982:	ea e0       	ldi	r30, 0x0A	; 10
    a984:	0c 94 23 e7 	jmp	0x1ce46	; 0x1ce46 <__epilogue_restores__+0x10>

0000a988 <dir_find>:
    a988:	ac e0       	ldi	r26, 0x0C	; 12
    a98a:	b0 e0       	ldi	r27, 0x00	; 0
    a98c:	ea ec       	ldi	r30, 0xCA	; 202
    a98e:	f4 e5       	ldi	r31, 0x54	; 84
    a990:	0c 94 ff e6 	jmp	0x1cdfe	; 0x1cdfe <__prologue_saves__>
    a994:	9c 87       	std	Y+12, r25	; 0x0c
    a996:	8b 87       	std	Y+11, r24	; 0x0b
    a998:	fc 01       	movw	r30, r24
    a99a:	01 90       	ld	r0, Z+
    a99c:	f0 81       	ld	r31, Z
    a99e:	e0 2d       	mov	r30, r0
    a9a0:	fc 83       	std	Y+4, r31	; 0x04
    a9a2:	eb 83       	std	Y+3, r30	; 0x03
    a9a4:	40 e0       	ldi	r20, 0x00	; 0
    a9a6:	50 e0       	ldi	r21, 0x00	; 0
    a9a8:	ba 01       	movw	r22, r20
    a9aa:	44 db       	rcall	.-2424   	; 0xa034 <dir_sdi>
    a9ac:	00 97       	sbiw	r24, 0x00	; 0
    a9ae:	09 f0       	breq	.+2      	; 0xa9b2 <dir_find+0x2a>
    a9b0:	e7 c0       	rjmp	.+462    	; 0xab80 <dir_find+0x1f8>
    a9b2:	8f ef       	ldi	r24, 0xFF	; 255
    a9b4:	9f ef       	ldi	r25, 0xFF	; 255
    a9b6:	dc 01       	movw	r26, r24
    a9b8:	eb 85       	ldd	r30, Y+11	; 0x0b
    a9ba:	fc 85       	ldd	r31, Y+12	; 0x0c
    a9bc:	80 a7       	std	Z+40, r24	; 0x28
    a9be:	91 a7       	std	Z+41, r25	; 0x29
    a9c0:	a2 a7       	std	Z+42, r26	; 0x2a
    a9c2:	b3 a7       	std	Z+43, r27	; 0x2b
    a9c4:	0f ef       	ldi	r16, 0xFF	; 255
    a9c6:	1f ef       	ldi	r17, 0xFF	; 255
    a9c8:	44 24       	eor	r4, r4
    a9ca:	4a 94       	dec	r4
    a9cc:	54 2c       	mov	r5, r4
    a9ce:	32 01       	movw	r6, r4
    a9d0:	7c 96       	adiw	r30, 0x1c	; 28
    a9d2:	fa 87       	std	Y+10, r31	; 0x0a
    a9d4:	e9 87       	std	Y+9, r30	; 0x09
    a9d6:	eb 85       	ldd	r30, Y+11	; 0x0b
    a9d8:	fc 85       	ldd	r31, Y+12	; 0x0c
    a9da:	46 89       	ldd	r20, Z+22	; 0x16
    a9dc:	57 89       	ldd	r21, Z+23	; 0x17
    a9de:	60 8d       	ldd	r22, Z+24	; 0x18
    a9e0:	71 8d       	ldd	r23, Z+25	; 0x19
    a9e2:	8b 81       	ldd	r24, Y+3	; 0x03
    a9e4:	9c 81       	ldd	r25, Y+4	; 0x04
    a9e6:	0e 94 98 4b 	call	0x9730	; 0x9730 <move_window>
    a9ea:	00 97       	sbiw	r24, 0x00	; 0
    a9ec:	09 f0       	breq	.+2      	; 0xa9f0 <dir_find+0x68>
    a9ee:	c8 c0       	rjmp	.+400    	; 0xab80 <dir_find+0x1f8>
    a9f0:	eb 85       	ldd	r30, Y+11	; 0x0b
    a9f2:	fc 85       	ldd	r31, Y+12	; 0x0c
    a9f4:	e2 8c       	ldd	r14, Z+26	; 0x1a
    a9f6:	f3 8c       	ldd	r15, Z+27	; 0x1b
    a9f8:	f7 01       	movw	r30, r14
    a9fa:	d0 80       	ld	r13, Z
    a9fc:	dd 20       	and	r13, r13
    a9fe:	09 f4       	brne	.+2      	; 0xaa02 <dir_find+0x7a>
    aa00:	c1 c0       	rjmp	.+386    	; 0xab84 <dir_find+0x1fc>
    aa02:	93 85       	ldd	r25, Z+11	; 0x0b
    aa04:	89 2f       	mov	r24, r25
    aa06:	8f 73       	andi	r24, 0x3F	; 63
    aa08:	eb 85       	ldd	r30, Y+11	; 0x0b
    aa0a:	fc 85       	ldd	r31, Y+12	; 0x0c
    aa0c:	84 83       	std	Z+4, r24	; 0x04
    aa0e:	f5 ee       	ldi	r31, 0xE5	; 229
    aa10:	df 16       	cp	r13, r31
    aa12:	09 f4       	brne	.+2      	; 0xaa16 <dir_find+0x8e>
    aa14:	a6 c0       	rjmp	.+332    	; 0xab62 <dir_find+0x1da>
    aa16:	93 ff       	sbrs	r25, 3
    aa18:	04 c0       	rjmp	.+8      	; 0xaa22 <dir_find+0x9a>
    aa1a:	8f 30       	cpi	r24, 0x0F	; 15
    aa1c:	09 f0       	breq	.+2      	; 0xaa20 <dir_find+0x98>
    aa1e:	a1 c0       	rjmp	.+322    	; 0xab62 <dir_find+0x1da>
    aa20:	03 c0       	rjmp	.+6      	; 0xaa28 <dir_find+0xa0>
    aa22:	8f 30       	cpi	r24, 0x0F	; 15
    aa24:	09 f0       	breq	.+2      	; 0xaa28 <dir_find+0xa0>
    aa26:	88 c0       	rjmp	.+272    	; 0xab38 <dir_find+0x1b0>
    aa28:	eb 85       	ldd	r30, Y+11	; 0x0b
    aa2a:	fc 85       	ldd	r31, Y+12	; 0x0c
    aa2c:	87 a1       	ldd	r24, Z+39	; 0x27
    aa2e:	86 fd       	sbrc	r24, 6
    aa30:	9f c0       	rjmp	.+318    	; 0xab70 <dir_find+0x1e8>
    aa32:	d6 fe       	sbrs	r13, 6
    aa34:	10 c0       	rjmp	.+32     	; 0xaa56 <dir_find+0xce>
    aa36:	f7 01       	movw	r30, r14
    aa38:	05 85       	ldd	r16, Z+13	; 0x0d
    aa3a:	fd 2d       	mov	r31, r13
    aa3c:	ff 7b       	andi	r31, 0xBF	; 191
    aa3e:	df 2e       	mov	r13, r31
    aa40:	eb 85       	ldd	r30, Y+11	; 0x0b
    aa42:	fc 85       	ldd	r31, Y+12	; 0x0c
    aa44:	86 85       	ldd	r24, Z+14	; 0x0e
    aa46:	97 85       	ldd	r25, Z+15	; 0x0f
    aa48:	a0 89       	ldd	r26, Z+16	; 0x10
    aa4a:	b1 89       	ldd	r27, Z+17	; 0x11
    aa4c:	80 a7       	std	Z+40, r24	; 0x28
    aa4e:	91 a7       	std	Z+41, r25	; 0x29
    aa50:	a2 a7       	std	Z+42, r26	; 0x2a
    aa52:	b3 a7       	std	Z+43, r27	; 0x2b
    aa54:	02 c0       	rjmp	.+4      	; 0xaa5a <dir_find+0xd2>
    aa56:	1d 11       	cpse	r17, r13
    aa58:	8a c0       	rjmp	.+276    	; 0xab6e <dir_find+0x1e6>
    aa5a:	f7 01       	movw	r30, r14
    aa5c:	c5 84       	ldd	r12, Z+13	; 0x0d
    aa5e:	c0 12       	cpse	r12, r16
    aa60:	86 c0       	rjmp	.+268    	; 0xab6e <dir_find+0x1e6>
    aa62:	82 8d       	ldd	r24, Z+26	; 0x1a
    aa64:	93 8d       	ldd	r25, Z+27	; 0x1b
    aa66:	89 2b       	or	r24, r25
    aa68:	09 f0       	breq	.+2      	; 0xaa6c <dir_find+0xe4>
    aa6a:	91 c0       	rjmp	.+290    	; 0xab8e <dir_find+0x206>
    aa6c:	eb 81       	ldd	r30, Y+3	; 0x03
    aa6e:	fc 81       	ldd	r31, Y+4	; 0x04
    aa70:	03 84       	ldd	r0, Z+11	; 0x0b
    aa72:	f4 85       	ldd	r31, Z+12	; 0x0c
    aa74:	e0 2d       	mov	r30, r0
    aa76:	fe 83       	std	Y+6, r31	; 0x06
    aa78:	ed 83       	std	Y+5, r30	; 0x05
    aa7a:	f7 01       	movw	r30, r14
    aa7c:	80 81       	ld	r24, Z
    aa7e:	8f 73       	andi	r24, 0x3F	; 63
    aa80:	90 e0       	ldi	r25, 0x00	; 0
    aa82:	01 97       	sbiw	r24, 0x01	; 1
    aa84:	fd e0       	ldi	r31, 0x0D	; 13
    aa86:	f8 9f       	mul	r31, r24
    aa88:	80 01       	movw	r16, r0
    aa8a:	f9 9f       	mul	r31, r25
    aa8c:	10 0d       	add	r17, r0
    aa8e:	11 24       	eor	r1, r1
    aa90:	2b ee       	ldi	r18, 0xEB	; 235
    aa92:	34 e0       	ldi	r19, 0x04	; 4
    aa94:	3a 83       	std	Y+2, r19	; 0x02
    aa96:	29 83       	std	Y+1, r18	; 0x01
    aa98:	81 e0       	ldi	r24, 0x01	; 1
    aa9a:	90 e0       	ldi	r25, 0x00	; 0
    aa9c:	e9 81       	ldd	r30, Y+1	; 0x01
    aa9e:	fa 81       	ldd	r31, Y+2	; 0x02
    aaa0:	21 91       	ld	r18, Z+
    aaa2:	fa 83       	std	Y+2, r31	; 0x02
    aaa4:	e9 83       	std	Y+1, r30	; 0x01
    aaa6:	f7 01       	movw	r30, r14
    aaa8:	e2 0f       	add	r30, r18
    aaaa:	f1 1d       	adc	r31, r1
    aaac:	20 80       	ld	r2, Z
    aaae:	31 80       	ldd	r3, Z+1	; 0x01
    aab0:	00 97       	sbiw	r24, 0x00	; 0
    aab2:	39 f1       	breq	.+78     	; 0xab02 <dir_find+0x17a>
    aab4:	0f 3f       	cpi	r16, 0xFF	; 255
    aab6:	11 05       	cpc	r17, r1
    aab8:	11 f0       	breq	.+4      	; 0xaabe <dir_find+0x136>
    aaba:	08 f0       	brcs	.+2      	; 0xaabe <dir_find+0x136>
    aabc:	68 c0       	rjmp	.+208    	; 0xab8e <dir_find+0x206>
    aabe:	b1 01       	movw	r22, r2
    aac0:	80 e0       	ldi	r24, 0x00	; 0
    aac2:	90 e0       	ldi	r25, 0x00	; 0
    aac4:	0e 94 5c 69 	call	0xd2b8	; 0xd2b8 <ff_wtoupper>
    aac8:	4b 01       	movw	r8, r22
    aaca:	5c 01       	movw	r10, r24
    aacc:	98 01       	movw	r18, r16
    aace:	2f 5f       	subi	r18, 0xFF	; 255
    aad0:	3f 4f       	sbci	r19, 0xFF	; 255
    aad2:	38 87       	std	Y+8, r19	; 0x08
    aad4:	2f 83       	std	Y+7, r18	; 0x07
    aad6:	00 0f       	add	r16, r16
    aad8:	11 1f       	adc	r17, r17
    aada:	ed 81       	ldd	r30, Y+5	; 0x05
    aadc:	fe 81       	ldd	r31, Y+6	; 0x06
    aade:	e0 0f       	add	r30, r16
    aae0:	f1 1f       	adc	r31, r17
    aae2:	60 81       	ld	r22, Z
    aae4:	71 81       	ldd	r23, Z+1	; 0x01
    aae6:	80 e0       	ldi	r24, 0x00	; 0
    aae8:	90 e0       	ldi	r25, 0x00	; 0
    aaea:	0e 94 5c 69 	call	0xd2b8	; 0xd2b8 <ff_wtoupper>
    aaee:	86 16       	cp	r8, r22
    aaf0:	97 06       	cpc	r9, r23
    aaf2:	a8 06       	cpc	r10, r24
    aaf4:	b9 06       	cpc	r11, r25
    aaf6:	09 f0       	breq	.+2      	; 0xaafa <dir_find+0x172>
    aaf8:	4a c0       	rjmp	.+148    	; 0xab8e <dir_find+0x206>
    aafa:	c1 01       	movw	r24, r2
    aafc:	0f 81       	ldd	r16, Y+7	; 0x07
    aafe:	18 85       	ldd	r17, Y+8	; 0x08
    ab00:	05 c0       	rjmp	.+10     	; 0xab0c <dir_find+0x184>
    ab02:	3f ef       	ldi	r19, 0xFF	; 255
    ab04:	23 16       	cp	r2, r19
    ab06:	33 06       	cpc	r3, r19
    ab08:	09 f0       	breq	.+2      	; 0xab0c <dir_find+0x184>
    ab0a:	41 c0       	rjmp	.+130    	; 0xab8e <dir_find+0x206>
    ab0c:	e9 81       	ldd	r30, Y+1	; 0x01
    ab0e:	fa 81       	ldd	r31, Y+2	; 0x02
    ab10:	e8 5f       	subi	r30, 0xF8	; 248
    ab12:	f4 40       	sbci	r31, 0x04	; 4
    ab14:	19 f6       	brne	.-122    	; 0xaa9c <dir_find+0x114>
    ab16:	f7 01       	movw	r30, r14
    ab18:	20 81       	ld	r18, Z
    ab1a:	26 ff       	sbrs	r18, 6
    ab1c:	3a c0       	rjmp	.+116    	; 0xab92 <dir_find+0x20a>
    ab1e:	89 2b       	or	r24, r25
    ab20:	c1 f1       	breq	.+112    	; 0xab92 <dir_find+0x20a>
    ab22:	00 0f       	add	r16, r16
    ab24:	11 1f       	adc	r17, r17
    ab26:	ed 81       	ldd	r30, Y+5	; 0x05
    ab28:	fe 81       	ldd	r31, Y+6	; 0x06
    ab2a:	e0 0f       	add	r30, r16
    ab2c:	f1 1f       	adc	r31, r17
    ab2e:	80 81       	ld	r24, Z
    ab30:	91 81       	ldd	r25, Z+1	; 0x01
    ab32:	89 2b       	or	r24, r25
    ab34:	71 f1       	breq	.+92     	; 0xab92 <dir_find+0x20a>
    ab36:	2b c0       	rjmp	.+86     	; 0xab8e <dir_find+0x206>
    ab38:	11 11       	cpse	r17, r1
    ab3a:	05 c0       	rjmp	.+10     	; 0xab46 <dir_find+0x1be>
    ab3c:	c7 01       	movw	r24, r14
    ab3e:	0e 94 6d 48 	call	0x90da	; 0x90da <sum_sfn>
    ab42:	08 17       	cp	r16, r24
    ab44:	09 f1       	breq	.+66     	; 0xab88 <dir_find+0x200>
    ab46:	eb 85       	ldd	r30, Y+11	; 0x0b
    ab48:	fc 85       	ldd	r31, Y+12	; 0x0c
    ab4a:	87 a1       	ldd	r24, Z+39	; 0x27
    ab4c:	80 fd       	sbrc	r24, 0
    ab4e:	09 c0       	rjmp	.+18     	; 0xab62 <dir_find+0x1da>
    ab50:	4b e0       	ldi	r20, 0x0B	; 11
    ab52:	50 e0       	ldi	r21, 0x00	; 0
    ab54:	69 85       	ldd	r22, Y+9	; 0x09
    ab56:	7a 85       	ldd	r23, Y+10	; 0x0a
    ab58:	c7 01       	movw	r24, r14
    ab5a:	0e 94 fa 47 	call	0x8ff4	; 0x8ff4 <mem_cmp>
    ab5e:	89 2b       	or	r24, r25
    ab60:	99 f0       	breq	.+38     	; 0xab88 <dir_find+0x200>
    ab62:	eb 85       	ldd	r30, Y+11	; 0x0b
    ab64:	fc 85       	ldd	r31, Y+12	; 0x0c
    ab66:	40 a6       	std	Z+40, r4	; 0x28
    ab68:	51 a6       	std	Z+41, r5	; 0x29
    ab6a:	62 a6       	std	Z+42, r6	; 0x2a
    ab6c:	73 a6       	std	Z+43, r7	; 0x2b
    ab6e:	1f ef       	ldi	r17, 0xFF	; 255
    ab70:	60 e0       	ldi	r22, 0x00	; 0
    ab72:	70 e0       	ldi	r23, 0x00	; 0
    ab74:	8b 85       	ldd	r24, Y+11	; 0x0b
    ab76:	9c 85       	ldd	r25, Y+12	; 0x0c
    ab78:	d5 dc       	rcall	.-1622   	; 0xa524 <dir_next>
    ab7a:	00 97       	sbiw	r24, 0x00	; 0
    ab7c:	09 f4       	brne	.+2      	; 0xab80 <dir_find+0x1f8>
    ab7e:	2b cf       	rjmp	.-426    	; 0xa9d6 <dir_find+0x4e>
    ab80:	28 2f       	mov	r18, r24
    ab82:	0b c0       	rjmp	.+22     	; 0xab9a <dir_find+0x212>
    ab84:	24 e0       	ldi	r18, 0x04	; 4
    ab86:	01 c0       	rjmp	.+2      	; 0xab8a <dir_find+0x202>
    ab88:	20 e0       	ldi	r18, 0x00	; 0
    ab8a:	90 e0       	ldi	r25, 0x00	; 0
    ab8c:	06 c0       	rjmp	.+12     	; 0xab9a <dir_find+0x212>
    ab8e:	0c 2d       	mov	r16, r12
    ab90:	ee cf       	rjmp	.-36     	; 0xab6e <dir_find+0x1e6>
    ab92:	1f ef       	ldi	r17, 0xFF	; 255
    ab94:	1d 0d       	add	r17, r13
    ab96:	0c 2d       	mov	r16, r12
    ab98:	eb cf       	rjmp	.-42     	; 0xab70 <dir_find+0x1e8>
    ab9a:	82 2f       	mov	r24, r18
    ab9c:	2c 96       	adiw	r28, 0x0c	; 12
    ab9e:	e2 e1       	ldi	r30, 0x12	; 18
    aba0:	0c 94 1b e7 	jmp	0x1ce36	; 0x1ce36 <__epilogue_restores__>

0000aba4 <dir_register>:
    aba4:	a6 e1       	ldi	r26, 0x16	; 22
    aba6:	b0 e0       	ldi	r27, 0x00	; 0
    aba8:	e8 ed       	ldi	r30, 0xD8	; 216
    abaa:	f5 e5       	ldi	r31, 0x55	; 85
    abac:	0c 94 ff e6 	jmp	0x1cdfe	; 0x1cdfe <__prologue_saves__>
    abb0:	fc 01       	movw	r30, r24
    abb2:	27 a1       	ldd	r18, Z+39	; 0x27
    abb4:	20 7a       	andi	r18, 0xA0	; 160
    abb6:	09 f0       	breq	.+2      	; 0xabba <dir_register+0x16>
    abb8:	53 c1       	rjmp	.+678    	; 0xae60 <dir_register+0x2bc>
    abba:	c0 80       	ld	r12, Z
    abbc:	d1 80       	ldd	r13, Z+1	; 0x01
    abbe:	f6 01       	movw	r30, r12
    abc0:	a3 85       	ldd	r26, Z+11	; 0x0b
    abc2:	b4 85       	ldd	r27, Z+12	; 0x0c
    abc4:	81 2c       	mov	r8, r1
    abc6:	91 2c       	mov	r9, r1
    abc8:	2d 91       	ld	r18, X+
    abca:	3d 91       	ld	r19, X+
    abcc:	23 2b       	or	r18, r19
    abce:	21 f0       	breq	.+8      	; 0xabd8 <dir_register+0x34>
    abd0:	ff ef       	ldi	r31, 0xFF	; 255
    abd2:	8f 1a       	sub	r8, r31
    abd4:	9f 0a       	sbc	r9, r31
    abd6:	f8 cf       	rjmp	.-16     	; 0xabc8 <dir_register+0x24>
    abd8:	8c 01       	movw	r16, r24
    abda:	5c 01       	movw	r10, r24
    abdc:	2c e1       	ldi	r18, 0x1C	; 28
    abde:	a2 0e       	add	r10, r18
    abe0:	b1 1c       	adc	r11, r1
    abe2:	4c e0       	ldi	r20, 0x0C	; 12
    abe4:	50 e0       	ldi	r21, 0x00	; 0
    abe6:	b5 01       	movw	r22, r10
    abe8:	ce 01       	movw	r24, r28
    abea:	01 96       	adiw	r24, 0x01	; 1
    abec:	0e 94 fe 49 	call	0x93fc	; 0x93fc <mem_cpy.part.0>
    abf0:	8c 85       	ldd	r24, Y+12	; 0x0c
    abf2:	80 ff       	sbrs	r24, 0
    abf4:	94 c0       	rjmp	.+296    	; 0xad1e <dir_register+0x17a>
    abf6:	80 e4       	ldi	r24, 0x40	; 64
    abf8:	f8 01       	movw	r30, r16
    abfa:	87 a3       	std	Z+39, r24	; 0x27
    abfc:	41 2c       	mov	r4, r1
    abfe:	51 2c       	mov	r5, r1
    ac00:	32 01       	movw	r6, r4
    ac02:	43 94       	inc	r4
    ac04:	72 01       	movw	r14, r4
    ac06:	f6 01       	movw	r30, r12
    ac08:	23 84       	ldd	r2, Z+11	; 0x0b
    ac0a:	34 84       	ldd	r3, Z+12	; 0x0c
    ac0c:	4b e0       	ldi	r20, 0x0B	; 11
    ac0e:	50 e0       	ldi	r21, 0x00	; 0
    ac10:	be 01       	movw	r22, r28
    ac12:	6f 5f       	subi	r22, 0xFF	; 255
    ac14:	7f 4f       	sbci	r23, 0xFF	; 255
    ac16:	c5 01       	movw	r24, r10
    ac18:	0e 94 fe 49 	call	0x93fc	; 0x93fc <mem_cpy.part.0>
    ac1c:	f6 e0       	ldi	r31, 0x06	; 6
    ac1e:	4f 16       	cp	r4, r31
    ac20:	51 04       	cpc	r5, r1
    ac22:	18 f1       	brcs	.+70     	; 0xac6a <dir_register+0xc6>
    ac24:	f1 01       	movw	r30, r2
    ac26:	b3 01       	movw	r22, r6
    ac28:	a2 01       	movw	r20, r4
    ac2a:	81 91       	ld	r24, Z+
    ac2c:	91 91       	ld	r25, Z+
    ac2e:	00 97       	sbiw	r24, 0x00	; 0
    ac30:	d9 f0       	breq	.+54     	; 0xac68 <dir_register+0xc4>
    ac32:	20 e1       	ldi	r18, 0x10	; 16
    ac34:	30 e0       	ldi	r19, 0x00	; 0
    ac36:	44 0f       	add	r20, r20
    ac38:	55 1f       	adc	r21, r21
    ac3a:	66 1f       	adc	r22, r22
    ac3c:	77 1f       	adc	r23, r23
    ac3e:	dc 01       	movw	r26, r24
    ac40:	a1 70       	andi	r26, 0x01	; 1
    ac42:	bb 27       	eor	r27, r27
    ac44:	4a 0f       	add	r20, r26
    ac46:	5b 1f       	adc	r21, r27
    ac48:	61 1d       	adc	r22, r1
    ac4a:	71 1d       	adc	r23, r1
    ac4c:	96 95       	lsr	r25
    ac4e:	87 95       	ror	r24
    ac50:	60 ff       	sbrs	r22, 0
    ac52:	06 c0       	rjmp	.+12     	; 0xac60 <dir_register+0xbc>
    ac54:	a1 e2       	ldi	r26, 0x21	; 33
    ac56:	4a 27       	eor	r20, r26
    ac58:	a0 e1       	ldi	r26, 0x10	; 16
    ac5a:	5a 27       	eor	r21, r26
    ac5c:	a1 e0       	ldi	r26, 0x01	; 1
    ac5e:	6a 27       	eor	r22, r26
    ac60:	21 50       	subi	r18, 0x01	; 1
    ac62:	31 09       	sbc	r19, r1
    ac64:	41 f7       	brne	.-48     	; 0xac36 <dir_register+0x92>
    ac66:	e1 cf       	rjmp	.-62     	; 0xac2a <dir_register+0x86>
    ac68:	7a 01       	movw	r14, r20
    ac6a:	fe 01       	movw	r30, r28
    ac6c:	75 96       	adiw	r30, 0x15	; 21
    ac6e:	27 e0       	ldi	r18, 0x07	; 7
    ac70:	30 e0       	ldi	r19, 0x00	; 0
    ac72:	9e 2d       	mov	r25, r14
    ac74:	9f 70       	andi	r25, 0x0F	; 15
    ac76:	80 e3       	ldi	r24, 0x30	; 48
    ac78:	89 0f       	add	r24, r25
    ac7a:	8a 33       	cpi	r24, 0x3A	; 58
    ac7c:	10 f0       	brcs	.+4      	; 0xac82 <dir_register+0xde>
    ac7e:	87 e3       	ldi	r24, 0x37	; 55
    ac80:	89 0f       	add	r24, r25
    ac82:	21 50       	subi	r18, 0x01	; 1
    ac84:	31 09       	sbc	r19, r1
    ac86:	82 93       	st	-Z, r24
    ac88:	a4 e0       	ldi	r26, 0x04	; 4
    ac8a:	f6 94       	lsr	r15
    ac8c:	e7 94       	ror	r14
    ac8e:	aa 95       	dec	r26
    ac90:	e1 f7       	brne	.-8      	; 0xac8a <dir_register+0xe6>
    ac92:	e1 14       	cp	r14, r1
    ac94:	f1 04       	cpc	r15, r1
    ac96:	69 f7       	brne	.-38     	; 0xac72 <dir_register+0xce>
    ac98:	ed e0       	ldi	r30, 0x0D	; 13
    ac9a:	f0 e0       	ldi	r31, 0x00	; 0
    ac9c:	ec 0f       	add	r30, r28
    ac9e:	fd 1f       	adc	r31, r29
    aca0:	e2 0f       	add	r30, r18
    aca2:	f3 1f       	adc	r31, r19
    aca4:	4e e7       	ldi	r20, 0x7E	; 126
    aca6:	40 83       	st	Z, r20
    aca8:	f5 01       	movw	r30, r10
    acaa:	80 e0       	ldi	r24, 0x00	; 0
    acac:	90 e0       	ldi	r25, 0x00	; 0
    acae:	28 17       	cp	r18, r24
    acb0:	39 07       	cpc	r19, r25
    acb2:	29 f0       	breq	.+10     	; 0xacbe <dir_register+0x11a>
    acb4:	41 91       	ld	r20, Z+
    acb6:	40 32       	cpi	r20, 0x20	; 32
    acb8:	11 f0       	breq	.+4      	; 0xacbe <dir_register+0x11a>
    acba:	01 96       	adiw	r24, 0x01	; 1
    acbc:	f8 cf       	rjmp	.-16     	; 0xacae <dir_register+0x10a>
    acbe:	f5 01       	movw	r30, r10
    acc0:	e8 0f       	add	r30, r24
    acc2:	f9 1f       	adc	r31, r25
    acc4:	28 30       	cpi	r18, 0x08	; 8
    acc6:	31 05       	cpc	r19, r1
    acc8:	50 f4       	brcc	.+20     	; 0xacde <dir_register+0x13a>
    acca:	ad e0       	ldi	r26, 0x0D	; 13
    accc:	b0 e0       	ldi	r27, 0x00	; 0
    acce:	ac 0f       	add	r26, r28
    acd0:	bd 1f       	adc	r27, r29
    acd2:	a2 0f       	add	r26, r18
    acd4:	b3 1f       	adc	r27, r19
    acd6:	8c 91       	ld	r24, X
    acd8:	2f 5f       	subi	r18, 0xFF	; 255
    acda:	3f 4f       	sbci	r19, 0xFF	; 255
    acdc:	01 c0       	rjmp	.+2      	; 0xace0 <dir_register+0x13c>
    acde:	80 e2       	ldi	r24, 0x20	; 32
    ace0:	81 93       	st	Z+, r24
    ace2:	cf 01       	movw	r24, r30
    ace4:	8a 19       	sub	r24, r10
    ace6:	9b 09       	sbc	r25, r11
    ace8:	08 97       	sbiw	r24, 0x08	; 8
    acea:	60 f3       	brcs	.-40     	; 0xacc4 <dir_register+0x120>
    acec:	c8 01       	movw	r24, r16
    acee:	4c de       	rcall	.-872    	; 0xa988 <dir_find>
    acf0:	00 97       	sbiw	r24, 0x00	; 0
    acf2:	71 f4       	brne	.+28     	; 0xad10 <dir_register+0x16c>
    acf4:	8f ef       	ldi	r24, 0xFF	; 255
    acf6:	48 1a       	sub	r4, r24
    acf8:	58 0a       	sbc	r5, r24
    acfa:	68 0a       	sbc	r6, r24
    acfc:	78 0a       	sbc	r7, r24
    acfe:	94 e6       	ldi	r25, 0x64	; 100
    ad00:	49 16       	cp	r4, r25
    ad02:	51 04       	cpc	r5, r1
    ad04:	61 04       	cpc	r6, r1
    ad06:	71 04       	cpc	r7, r1
    ad08:	09 f0       	breq	.+2      	; 0xad0c <dir_register+0x168>
    ad0a:	7c cf       	rjmp	.-264    	; 0xac04 <dir_register+0x60>
    ad0c:	27 e0       	ldi	r18, 0x07	; 7
    ad0e:	a9 c0       	rjmp	.+338    	; 0xae62 <dir_register+0x2be>
    ad10:	84 30       	cpi	r24, 0x04	; 4
    ad12:	91 05       	cpc	r25, r1
    ad14:	09 f0       	breq	.+2      	; 0xad18 <dir_register+0x174>
    ad16:	ce c0       	rjmp	.+412    	; 0xaeb4 <dir_register+0x310>
    ad18:	8c 85       	ldd	r24, Y+12	; 0x0c
    ad1a:	f8 01       	movw	r30, r16
    ad1c:	87 a3       	std	Z+39, r24	; 0x27
    ad1e:	8c 85       	ldd	r24, Y+12	; 0x0c
    ad20:	81 ff       	sbrs	r24, 1
    ad22:	0b c0       	rjmp	.+22     	; 0xad3a <dir_register+0x196>
    ad24:	c4 01       	movw	r24, r8
    ad26:	0c 96       	adiw	r24, 0x0c	; 12
    ad28:	6d e0       	ldi	r22, 0x0D	; 13
    ad2a:	70 e0       	ldi	r23, 0x00	; 0
    ad2c:	0e 94 6b e6 	call	0x1ccd6	; 0x1ccd6 <__udivmodhi4>
    ad30:	7b 01       	movw	r14, r22
    ad32:	ff ef       	ldi	r31, 0xFF	; 255
    ad34:	ef 1a       	sub	r14, r31
    ad36:	ff 0a       	sbc	r15, r31
    ad38:	03 c0       	rjmp	.+6      	; 0xad40 <dir_register+0x19c>
    ad3a:	ee 24       	eor	r14, r14
    ad3c:	e3 94       	inc	r14
    ad3e:	f1 2c       	mov	r15, r1
    ad40:	b7 01       	movw	r22, r14
    ad42:	c8 01       	movw	r24, r16
    ad44:	d7 dc       	rcall	.-1618   	; 0xa6f4 <dir_alloc>
    ad46:	00 97       	sbiw	r24, 0x00	; 0
    ad48:	09 f0       	breq	.+2      	; 0xad4c <dir_register+0x1a8>
    ad4a:	b4 c0       	rjmp	.+360    	; 0xaeb4 <dir_register+0x310>
    ad4c:	21 e0       	ldi	r18, 0x01	; 1
    ad4e:	e2 1a       	sub	r14, r18
    ad50:	f1 08       	sbc	r15, r1
    ad52:	09 f4       	brne	.+2      	; 0xad56 <dir_register+0x1b2>
    ad54:	88 c0       	rjmp	.+272    	; 0xae66 <dir_register+0x2c2>
    ad56:	f8 01       	movw	r30, r16
    ad58:	46 85       	ldd	r20, Z+14	; 0x0e
    ad5a:	57 85       	ldd	r21, Z+15	; 0x0f
    ad5c:	60 89       	ldd	r22, Z+16	; 0x10
    ad5e:	71 89       	ldd	r23, Z+17	; 0x11
    ad60:	c7 01       	movw	r24, r14
    ad62:	e5 e0       	ldi	r30, 0x05	; 5
    ad64:	88 0f       	add	r24, r24
    ad66:	99 1f       	adc	r25, r25
    ad68:	ea 95       	dec	r30
    ad6a:	e1 f7       	brne	.-8      	; 0xad64 <dir_register+0x1c0>
    ad6c:	48 1b       	sub	r20, r24
    ad6e:	59 0b       	sbc	r21, r25
    ad70:	61 09       	sbc	r22, r1
    ad72:	71 09       	sbc	r23, r1
    ad74:	c8 01       	movw	r24, r16
    ad76:	5e d9       	rcall	.-3396   	; 0xa034 <dir_sdi>
    ad78:	00 97       	sbiw	r24, 0x00	; 0
    ad7a:	09 f0       	breq	.+2      	; 0xad7e <dir_register+0x1da>
    ad7c:	9b c0       	rjmp	.+310    	; 0xaeb4 <dir_register+0x310>
    ad7e:	c5 01       	movw	r24, r10
    ad80:	0e 94 6d 48 	call	0x90da	; 0x90da <sum_sfn>
    ad84:	68 2e       	mov	r6, r24
    ad86:	5f e0       	ldi	r21, 0x0F	; 15
    ad88:	35 2e       	mov	r3, r21
    ad8a:	6d e0       	ldi	r22, 0x0D	; 13
    ad8c:	46 2e       	mov	r4, r22
    ad8e:	78 ef       	ldi	r23, 0xF8	; 248
    ad90:	87 2e       	mov	r8, r23
    ad92:	74 e0       	ldi	r23, 0x04	; 4
    ad94:	97 2e       	mov	r9, r23
    ad96:	55 24       	eor	r5, r5
    ad98:	53 94       	inc	r5
    ad9a:	f8 01       	movw	r30, r16
    ad9c:	46 89       	ldd	r20, Z+22	; 0x16
    ad9e:	57 89       	ldd	r21, Z+23	; 0x17
    ada0:	60 8d       	ldd	r22, Z+24	; 0x18
    ada2:	71 8d       	ldd	r23, Z+25	; 0x19
    ada4:	c6 01       	movw	r24, r12
    ada6:	0e 94 98 4b 	call	0x9730	; 0x9730 <move_window>
    adaa:	00 97       	sbiw	r24, 0x00	; 0
    adac:	09 f0       	breq	.+2      	; 0xadb0 <dir_register+0x20c>
    adae:	82 c0       	rjmp	.+260    	; 0xaeb4 <dir_register+0x310>
    adb0:	f6 01       	movw	r30, r12
    adb2:	63 85       	ldd	r22, Z+11	; 0x0b
    adb4:	74 85       	ldd	r23, Z+12	; 0x0c
    adb6:	f8 01       	movw	r30, r16
    adb8:	02 8c       	ldd	r0, Z+26	; 0x1a
    adba:	f3 8d       	ldd	r31, Z+27	; 0x1b
    adbc:	e0 2d       	mov	r30, r0
    adbe:	fe 8b       	std	Y+22, r31	; 0x16
    adc0:	ed 8b       	std	Y+21, r30	; 0x15
    adc2:	7e 2c       	mov	r7, r14
    adc4:	65 86       	std	Z+13, r6	; 0x0d
    adc6:	33 86       	std	Z+11, r3	; 0x0b
    adc8:	14 86       	std	Z+12, r1	; 0x0c
    adca:	12 8e       	std	Z+26, r1	; 0x1a
    adcc:	13 8e       	std	Z+27, r1	; 0x1b
    adce:	97 01       	movw	r18, r14
    add0:	33 27       	eor	r19, r19
    add2:	21 50       	subi	r18, 0x01	; 1
    add4:	31 09       	sbc	r19, r1
    add6:	42 9e       	mul	r4, r18
    add8:	c0 01       	movw	r24, r0
    adda:	43 9e       	mul	r4, r19
    addc:	90 0d       	add	r25, r0
    adde:	11 24       	eor	r1, r1
    ade0:	ab ee       	ldi	r26, 0xEB	; 235
    ade2:	b4 e0       	ldi	r27, 0x04	; 4
    ade4:	20 e0       	ldi	r18, 0x00	; 0
    ade6:	30 e0       	ldi	r19, 0x00	; 0
    ade8:	2f 3f       	cpi	r18, 0xFF	; 255
    adea:	ff ef       	ldi	r31, 0xFF	; 255
    adec:	3f 07       	cpc	r19, r31
    adee:	49 f0       	breq	.+18     	; 0xae02 <dir_register+0x25e>
    adf0:	9c 01       	movw	r18, r24
    adf2:	22 0f       	add	r18, r18
    adf4:	33 1f       	adc	r19, r19
    adf6:	26 0f       	add	r18, r22
    adf8:	37 1f       	adc	r19, r23
    adfa:	f9 01       	movw	r30, r18
    adfc:	20 81       	ld	r18, Z
    adfe:	31 81       	ldd	r19, Z+1	; 0x01
    ae00:	01 96       	adiw	r24, 0x01	; 1
    ae02:	4d 91       	ld	r20, X+
    ae04:	ed 89       	ldd	r30, Y+21	; 0x15
    ae06:	fe 89       	ldd	r31, Y+22	; 0x16
    ae08:	e4 0f       	add	r30, r20
    ae0a:	f1 1d       	adc	r31, r1
    ae0c:	20 83       	st	Z, r18
    ae0e:	31 83       	std	Z+1, r19	; 0x01
    ae10:	21 15       	cp	r18, r1
    ae12:	31 05       	cpc	r19, r1
    ae14:	11 f4       	brne	.+4      	; 0xae1a <dir_register+0x276>
    ae16:	2f ef       	ldi	r18, 0xFF	; 255
    ae18:	3f ef       	ldi	r19, 0xFF	; 255
    ae1a:	8a 16       	cp	r8, r26
    ae1c:	9b 06       	cpc	r9, r27
    ae1e:	21 f7       	brne	.-56     	; 0xade8 <dir_register+0x244>
    ae20:	2f 3f       	cpi	r18, 0xFF	; 255
    ae22:	3f 4f       	sbci	r19, 0xFF	; 255
    ae24:	49 f0       	breq	.+18     	; 0xae38 <dir_register+0x294>
    ae26:	88 0f       	add	r24, r24
    ae28:	99 1f       	adc	r25, r25
    ae2a:	db 01       	movw	r26, r22
    ae2c:	a8 0f       	add	r26, r24
    ae2e:	b9 1f       	adc	r27, r25
    ae30:	8d 91       	ld	r24, X+
    ae32:	9c 91       	ld	r25, X
    ae34:	89 2b       	or	r24, r25
    ae36:	19 f4       	brne	.+6      	; 0xae3e <dir_register+0x29a>
    ae38:	27 2d       	mov	r18, r7
    ae3a:	20 64       	ori	r18, 0x40	; 64
    ae3c:	72 2e       	mov	r7, r18
    ae3e:	ed 89       	ldd	r30, Y+21	; 0x15
    ae40:	fe 89       	ldd	r31, Y+22	; 0x16
    ae42:	70 82       	st	Z, r7
    ae44:	f6 01       	movw	r30, r12
    ae46:	53 82       	std	Z+3, r5	; 0x03
    ae48:	60 e0       	ldi	r22, 0x00	; 0
    ae4a:	70 e0       	ldi	r23, 0x00	; 0
    ae4c:	c8 01       	movw	r24, r16
    ae4e:	6a db       	rcall	.-2348   	; 0xa524 <dir_next>
    ae50:	00 97       	sbiw	r24, 0x00	; 0
    ae52:	81 f5       	brne	.+96     	; 0xaeb4 <dir_register+0x310>
    ae54:	f1 e0       	ldi	r31, 0x01	; 1
    ae56:	ef 1a       	sub	r14, r31
    ae58:	f1 08       	sbc	r15, r1
    ae5a:	09 f0       	breq	.+2      	; 0xae5e <dir_register+0x2ba>
    ae5c:	9e cf       	rjmp	.-196    	; 0xad9a <dir_register+0x1f6>
    ae5e:	03 c0       	rjmp	.+6      	; 0xae66 <dir_register+0x2c2>
    ae60:	26 e0       	ldi	r18, 0x06	; 6
    ae62:	90 e0       	ldi	r25, 0x00	; 0
    ae64:	28 c0       	rjmp	.+80     	; 0xaeb6 <dir_register+0x312>
    ae66:	f8 01       	movw	r30, r16
    ae68:	46 89       	ldd	r20, Z+22	; 0x16
    ae6a:	57 89       	ldd	r21, Z+23	; 0x17
    ae6c:	60 8d       	ldd	r22, Z+24	; 0x18
    ae6e:	71 8d       	ldd	r23, Z+25	; 0x19
    ae70:	c6 01       	movw	r24, r12
    ae72:	0e 94 98 4b 	call	0x9730	; 0x9730 <move_window>
    ae76:	00 97       	sbiw	r24, 0x00	; 0
    ae78:	e9 f4       	brne	.+58     	; 0xaeb4 <dir_register+0x310>
    ae7a:	40 e2       	ldi	r20, 0x20	; 32
    ae7c:	50 e0       	ldi	r21, 0x00	; 0
    ae7e:	60 e0       	ldi	r22, 0x00	; 0
    ae80:	70 e0       	ldi	r23, 0x00	; 0
    ae82:	f8 01       	movw	r30, r16
    ae84:	82 8d       	ldd	r24, Z+26	; 0x1a
    ae86:	93 8d       	ldd	r25, Z+27	; 0x1b
    ae88:	0e 94 f1 47 	call	0x8fe2	; 0x8fe2 <mem_set>
    ae8c:	4b e0       	ldi	r20, 0x0B	; 11
    ae8e:	50 e0       	ldi	r21, 0x00	; 0
    ae90:	b5 01       	movw	r22, r10
    ae92:	f8 01       	movw	r30, r16
    ae94:	82 8d       	ldd	r24, Z+26	; 0x1a
    ae96:	93 8d       	ldd	r25, Z+27	; 0x1b
    ae98:	0e 94 fe 49 	call	0x93fc	; 0x93fc <mem_cpy.part.0>
    ae9c:	f8 01       	movw	r30, r16
    ae9e:	22 8d       	ldd	r18, Z+26	; 0x1a
    aea0:	33 8d       	ldd	r19, Z+27	; 0x1b
    aea2:	87 a1       	ldd	r24, Z+39	; 0x27
    aea4:	88 71       	andi	r24, 0x18	; 24
    aea6:	f9 01       	movw	r30, r18
    aea8:	84 87       	std	Z+12, r24	; 0x0c
    aeaa:	81 e0       	ldi	r24, 0x01	; 1
    aeac:	f6 01       	movw	r30, r12
    aeae:	83 83       	std	Z+3, r24	; 0x03
    aeb0:	20 e0       	ldi	r18, 0x00	; 0
    aeb2:	d7 cf       	rjmp	.-82     	; 0xae62 <dir_register+0x2be>
    aeb4:	28 2f       	mov	r18, r24
    aeb6:	82 2f       	mov	r24, r18
    aeb8:	66 96       	adiw	r28, 0x16	; 22
    aeba:	e2 e1       	ldi	r30, 0x12	; 18
    aebc:	0c 94 1b e7 	jmp	0x1ce36	; 0x1ce36 <__epilogue_restores__>

0000aec0 <follow_path>:
    aec0:	a8 e0       	ldi	r26, 0x08	; 8
    aec2:	b0 e0       	ldi	r27, 0x00	; 0
    aec4:	e6 e6       	ldi	r30, 0x66	; 102
    aec6:	f7 e5       	ldi	r31, 0x57	; 87
    aec8:	0c 94 ff e6 	jmp	0x1cdfe	; 0x1cdfe <__prologue_saves__>
    aecc:	8c 01       	movw	r16, r24
    aece:	78 87       	std	Y+8, r23	; 0x08
    aed0:	6f 83       	std	Y+7, r22	; 0x07
    aed2:	dc 01       	movw	r26, r24
    aed4:	0d 90       	ld	r0, X+
    aed6:	bc 91       	ld	r27, X
    aed8:	a0 2d       	mov	r26, r0
    aeda:	ba 83       	std	Y+2, r27	; 0x02
    aedc:	a9 83       	std	Y+1, r26	; 0x01
    aede:	fb 01       	movw	r30, r22
    aee0:	80 81       	ld	r24, Z
    aee2:	8f 32       	cpi	r24, 0x2F	; 47
    aee4:	11 f0       	breq	.+4      	; 0xaeea <follow_path+0x2a>
    aee6:	8c 35       	cpi	r24, 0x5C	; 92
    aee8:	19 f4       	brne	.+6      	; 0xaef0 <follow_path+0x30>
    aeea:	2f 81       	ldd	r18, Y+7	; 0x07
    aeec:	38 85       	ldd	r19, Y+8	; 0x08
    aeee:	0c c0       	rjmp	.+24     	; 0xaf08 <follow_path+0x48>
    aef0:	e9 81       	ldd	r30, Y+1	; 0x01
    aef2:	fa 81       	ldd	r31, Y+2	; 0x02
    aef4:	85 89       	ldd	r24, Z+21	; 0x15
    aef6:	96 89       	ldd	r25, Z+22	; 0x16
    aef8:	a7 89       	ldd	r26, Z+23	; 0x17
    aefa:	b0 8d       	ldd	r27, Z+24	; 0x18
    aefc:	f8 01       	movw	r30, r16
    aefe:	86 83       	std	Z+6, r24	; 0x06
    af00:	97 83       	std	Z+7, r25	; 0x07
    af02:	a0 87       	std	Z+8, r26	; 0x08
    af04:	b1 87       	std	Z+9, r27	; 0x09
    af06:	0f c0       	rjmp	.+30     	; 0xaf26 <follow_path+0x66>
    af08:	38 87       	std	Y+8, r19	; 0x08
    af0a:	2f 83       	std	Y+7, r18	; 0x07
    af0c:	d9 01       	movw	r26, r18
    af0e:	8c 91       	ld	r24, X
    af10:	2f 5f       	subi	r18, 0xFF	; 255
    af12:	3f 4f       	sbci	r19, 0xFF	; 255
    af14:	8f 32       	cpi	r24, 0x2F	; 47
    af16:	c1 f3       	breq	.-16     	; 0xaf08 <follow_path+0x48>
    af18:	8c 35       	cpi	r24, 0x5C	; 92
    af1a:	b1 f3       	breq	.-20     	; 0xaf08 <follow_path+0x48>
    af1c:	f8 01       	movw	r30, r16
    af1e:	16 82       	std	Z+6, r1	; 0x06
    af20:	17 82       	std	Z+7, r1	; 0x07
    af22:	10 86       	std	Z+8, r1	; 0x08
    af24:	11 86       	std	Z+9, r1	; 0x09
    af26:	af 81       	ldd	r26, Y+7	; 0x07
    af28:	b8 85       	ldd	r27, Y+8	; 0x08
    af2a:	8c 91       	ld	r24, X
    af2c:	80 32       	cpi	r24, 0x20	; 32
    af2e:	58 f0       	brcs	.+22     	; 0xaf46 <follow_path+0x86>
    af30:	f8 01       	movw	r30, r16
    af32:	7c 96       	adiw	r30, 0x1c	; 28
    af34:	fc 83       	std	Y+4, r31	; 0x04
    af36:	eb 83       	std	Y+3, r30	; 0x03
    af38:	29 81       	ldd	r18, Y+1	; 0x01
    af3a:	3a 81       	ldd	r19, Y+2	; 0x02
    af3c:	2b 5c       	subi	r18, 0xCB	; 203
    af3e:	3f 4f       	sbci	r19, 0xFF	; 255
    af40:	3e 83       	std	Y+6, r19	; 0x06
    af42:	2d 83       	std	Y+5, r18	; 0x05
    af44:	76 c0       	rjmp	.+236    	; 0xb032 <follow_path+0x172>
    af46:	80 e8       	ldi	r24, 0x80	; 128
    af48:	f8 01       	movw	r30, r16
    af4a:	87 a3       	std	Z+39, r24	; 0x27
    af4c:	40 e0       	ldi	r20, 0x00	; 0
    af4e:	50 e0       	ldi	r21, 0x00	; 0
    af50:	ba 01       	movw	r22, r20
    af52:	c8 01       	movw	r24, r16
    af54:	6f d8       	rcall	.-3874   	; 0xa034 <dir_sdi>
    af56:	ec c1       	rjmp	.+984    	; 0xb330 <follow_path+0x470>
    af58:	65 eb       	ldi	r22, 0xB5	; 181
    af5a:	71 e0       	ldi	r23, 0x01	; 1
    af5c:	0e 94 47 69 	call	0xd28e	; 0xd28e <ff_oem2uni>
    af60:	00 97       	sbiw	r24, 0x00	; 0
    af62:	09 f4       	brne	.+2      	; 0xaf66 <follow_path+0xa6>
    af64:	b8 c1       	rjmp	.+880    	; 0xb2d6 <follow_path+0x416>
    af66:	80 32       	cpi	r24, 0x20	; 32
    af68:	91 05       	cpc	r25, r1
    af6a:	30 f1       	brcs	.+76     	; 0xafb8 <follow_path+0xf8>
    af6c:	8f 32       	cpi	r24, 0x2F	; 47
    af6e:	91 05       	cpc	r25, r1
    af70:	09 f4       	brne	.+2      	; 0xaf74 <follow_path+0xb4>
    af72:	6b c0       	rjmp	.+214    	; 0xb04a <follow_path+0x18a>
    af74:	8c 35       	cpi	r24, 0x5C	; 92
    af76:	91 05       	cpc	r25, r1
    af78:	09 f4       	brne	.+2      	; 0xaf7c <follow_path+0xbc>
    af7a:	67 c0       	rjmp	.+206    	; 0xb04a <follow_path+0x18a>
    af7c:	80 38       	cpi	r24, 0x80	; 128
    af7e:	91 05       	cpc	r25, r1
    af80:	28 f4       	brcc	.+10     	; 0xaf8c <follow_path+0xcc>
    af82:	e7 e2       	ldi	r30, 0x27	; 39
    af84:	f4 e0       	ldi	r31, 0x04	; 4
    af86:	21 91       	ld	r18, Z+
    af88:	21 11       	cpse	r18, r1
    af8a:	61 c0       	rjmp	.+194    	; 0xb04e <follow_path+0x18e>
    af8c:	ef 81       	ldd	r30, Y+7	; 0x07
    af8e:	f8 85       	ldd	r31, Y+8	; 0x08
    af90:	ef 3f       	cpi	r30, 0xFF	; 255
    af92:	f1 05       	cpc	r31, r1
    af94:	09 f4       	brne	.+2      	; 0xaf98 <follow_path+0xd8>
    af96:	9f c1       	rjmp	.+830    	; 0xb2d6 <follow_path+0x416>
    af98:	31 96       	adiw	r30, 0x01	; 1
    af9a:	f8 87       	std	Y+8, r31	; 0x08
    af9c:	ef 83       	std	Y+7, r30	; 0x07
    af9e:	d6 01       	movw	r26, r12
    afa0:	8d 93       	st	X+, r24
    afa2:	9d 93       	st	X+, r25
    afa4:	6d 01       	movw	r12, r26
    afa6:	bf ef       	ldi	r27, 0xFF	; 255
    afa8:	eb 1a       	sub	r14, r27
    afaa:	fb 0a       	sbc	r15, r27
    afac:	f7 01       	movw	r30, r14
    afae:	31 97       	sbiw	r30, 0x01	; 1
    afb0:	80 81       	ld	r24, Z
    afb2:	90 e0       	ldi	r25, 0x00	; 0
    afb4:	00 97       	sbiw	r24, 0x00	; 0
    afb6:	81 f6       	brne	.-96     	; 0xaf58 <follow_path+0x98>
    afb8:	74 e0       	ldi	r23, 0x04	; 4
    afba:	37 2e       	mov	r3, r23
    afbc:	2f 81       	ldd	r18, Y+7	; 0x07
    afbe:	38 85       	ldd	r19, Y+8	; 0x08
    afc0:	22 0f       	add	r18, r18
    afc2:	33 1f       	adc	r19, r19
    afc4:	8f 81       	ldd	r24, Y+7	; 0x07
    afc6:	98 85       	ldd	r25, Y+8	; 0x08
    afc8:	01 97       	sbiw	r24, 0x01	; 1
    afca:	09 f0       	breq	.+2      	; 0xafce <follow_path+0x10e>
    afcc:	51 c0       	rjmp	.+162    	; 0xb070 <follow_path+0x1b0>
    afce:	d5 01       	movw	r26, r10
    afd0:	8d 91       	ld	r24, X+
    afd2:	9c 91       	ld	r25, X
    afd4:	8e 97       	sbiw	r24, 0x2e	; 46
    afd6:	09 f0       	breq	.+2      	; 0xafda <follow_path+0x11a>
    afd8:	57 c0       	rjmp	.+174    	; 0xb088 <follow_path+0x1c8>
    afda:	f9 01       	movw	r30, r18
    afdc:	ea 0d       	add	r30, r10
    afde:	fb 1d       	adc	r31, r11
    afe0:	11 82       	std	Z+1, r1	; 0x01
    afe2:	10 82       	st	Z, r1
    afe4:	f8 01       	movw	r30, r16
    afe6:	7c 96       	adiw	r30, 0x1c	; 28
    afe8:	80 e0       	ldi	r24, 0x00	; 0
    afea:	90 e0       	ldi	r25, 0x00	; 0
    afec:	2f 81       	ldd	r18, Y+7	; 0x07
    afee:	38 85       	ldd	r19, Y+8	; 0x08
    aff0:	82 17       	cp	r24, r18
    aff2:	93 07       	cpc	r25, r19
    aff4:	08 f0       	brcs	.+2      	; 0xaff8 <follow_path+0x138>
    aff6:	4c c0       	rjmp	.+152    	; 0xb090 <follow_path+0x1d0>
    aff8:	2e e2       	ldi	r18, 0x2E	; 46
    affa:	21 93       	st	Z+, r18
    affc:	01 96       	adiw	r24, 0x01	; 1
    affe:	8b 30       	cpi	r24, 0x0B	; 11
    b000:	91 05       	cpc	r25, r1
    b002:	a1 f7       	brne	.-24     	; 0xafec <follow_path+0x12c>
    b004:	83 2d       	mov	r24, r3
    b006:	80 62       	ori	r24, 0x20	; 32
    b008:	f8 01       	movw	r30, r16
    b00a:	87 a3       	std	Z+39, r24	; 0x27
    b00c:	c8 01       	movw	r24, r16
    b00e:	bc dc       	rcall	.-1672   	; 0xa988 <dir_find>
    b010:	f8 01       	movw	r30, r16
    b012:	27 a1       	ldd	r18, Z+39	; 0x27
    b014:	00 97       	sbiw	r24, 0x00	; 0
    b016:	09 f4       	brne	.+2      	; 0xb01a <follow_path+0x15a>
    b018:	6a c1       	rjmp	.+724    	; 0xb2ee <follow_path+0x42e>
    b01a:	84 30       	cpi	r24, 0x04	; 4
    b01c:	91 05       	cpc	r25, r1
    b01e:	09 f0       	breq	.+2      	; 0xb022 <follow_path+0x162>
    b020:	87 c1       	rjmp	.+782    	; 0xb330 <follow_path+0x470>
    b022:	32 2f       	mov	r19, r18
    b024:	34 70       	andi	r19, 0x04	; 4
    b026:	25 ff       	sbrs	r18, 5
    b028:	5f c1       	rjmp	.+702    	; 0xb2e8 <follow_path+0x428>
    b02a:	31 11       	cpse	r19, r1
    b02c:	57 c1       	rjmp	.+686    	; 0xb2dc <follow_path+0x41c>
    b02e:	f8 86       	std	Y+8, r15	; 0x08
    b030:	ef 82       	std	Y+7, r14	; 0x07
    b032:	d8 01       	movw	r26, r16
    b034:	ed 91       	ld	r30, X+
    b036:	fc 91       	ld	r31, X
    b038:	a3 84       	ldd	r10, Z+11	; 0x0b
    b03a:	b4 84       	ldd	r11, Z+12	; 0x0c
    b03c:	45 01       	movw	r8, r10
    b03e:	65 01       	movw	r12, r10
    b040:	ef 80       	ldd	r14, Y+7	; 0x07
    b042:	f8 84       	ldd	r15, Y+8	; 0x08
    b044:	18 86       	std	Y+8, r1	; 0x08
    b046:	1f 82       	std	Y+7, r1	; 0x07
    b048:	ae cf       	rjmp	.-164    	; 0xafa6 <follow_path+0xe6>
    b04a:	97 01       	movw	r18, r14
    b04c:	06 c0       	rjmp	.+12     	; 0xb05a <follow_path+0x19a>
    b04e:	30 e0       	ldi	r19, 0x00	; 0
    b050:	82 17       	cp	r24, r18
    b052:	93 07       	cpc	r25, r19
    b054:	09 f0       	breq	.+2      	; 0xb058 <follow_path+0x198>
    b056:	97 cf       	rjmp	.-210    	; 0xaf86 <follow_path+0xc6>
    b058:	3e c1       	rjmp	.+636    	; 0xb2d6 <follow_path+0x416>
    b05a:	79 01       	movw	r14, r18
    b05c:	f9 01       	movw	r30, r18
    b05e:	80 81       	ld	r24, Z
    b060:	2f 5f       	subi	r18, 0xFF	; 255
    b062:	3f 4f       	sbci	r19, 0xFF	; 255
    b064:	8f 32       	cpi	r24, 0x2F	; 47
    b066:	c9 f3       	breq	.-14     	; 0xb05a <follow_path+0x19a>
    b068:	8c 35       	cpi	r24, 0x5C	; 92
    b06a:	b9 f3       	breq	.-18     	; 0xb05a <follow_path+0x19a>
    b06c:	31 2c       	mov	r3, r1
    b06e:	a6 cf       	rjmp	.-180    	; 0xafbc <follow_path+0xfc>
    b070:	ef 81       	ldd	r30, Y+7	; 0x07
    b072:	f8 85       	ldd	r31, Y+8	; 0x08
    b074:	32 97       	sbiw	r30, 0x02	; 2
    b076:	41 f4       	brne	.+16     	; 0xb088 <follow_path+0x1c8>
    b078:	f5 01       	movw	r30, r10
    b07a:	82 81       	ldd	r24, Z+2	; 0x02
    b07c:	93 81       	ldd	r25, Z+3	; 0x03
    b07e:	8e 97       	sbiw	r24, 0x2e	; 46
    b080:	19 f4       	brne	.+6      	; 0xb088 <follow_path+0x1c8>
    b082:	80 81       	ld	r24, Z
    b084:	91 81       	ldd	r25, Z+1	; 0x01
    b086:	a6 cf       	rjmp	.-180    	; 0xafd4 <follow_path+0x114>
    b088:	f9 01       	movw	r30, r18
    b08a:	ea 0d       	add	r30, r10
    b08c:	fb 1d       	adc	r31, r11
    b08e:	0d c0       	rjmp	.+26     	; 0xb0aa <follow_path+0x1ea>
    b090:	20 e2       	ldi	r18, 0x20	; 32
    b092:	b3 cf       	rjmp	.-154    	; 0xaffa <follow_path+0x13a>
    b094:	92 91       	ld	r25, -Z
    b096:	82 91       	ld	r24, -Z
    b098:	80 32       	cpi	r24, 0x20	; 32
    b09a:	91 05       	cpc	r25, r1
    b09c:	59 f4       	brne	.+22     	; 0xb0b4 <follow_path+0x1f4>
    b09e:	2f 81       	ldd	r18, Y+7	; 0x07
    b0a0:	38 85       	ldd	r19, Y+8	; 0x08
    b0a2:	21 50       	subi	r18, 0x01	; 1
    b0a4:	31 09       	sbc	r19, r1
    b0a6:	38 87       	std	Y+8, r19	; 0x08
    b0a8:	2f 83       	std	Y+7, r18	; 0x07
    b0aa:	8f 81       	ldd	r24, Y+7	; 0x07
    b0ac:	98 85       	ldd	r25, Y+8	; 0x08
    b0ae:	89 2b       	or	r24, r25
    b0b0:	89 f7       	brne	.-30     	; 0xb094 <follow_path+0x1d4>
    b0b2:	02 c0       	rjmp	.+4      	; 0xb0b8 <follow_path+0x1f8>
    b0b4:	8e 97       	sbiw	r24, 0x2e	; 46
    b0b6:	99 f3       	breq	.-26     	; 0xb09e <follow_path+0x1de>
    b0b8:	ef 81       	ldd	r30, Y+7	; 0x07
    b0ba:	f8 85       	ldd	r31, Y+8	; 0x08
    b0bc:	ee 0f       	add	r30, r30
    b0be:	ff 1f       	adc	r31, r31
    b0c0:	ea 0d       	add	r30, r10
    b0c2:	fb 1d       	adc	r31, r11
    b0c4:	11 82       	std	Z+1, r1	; 0x01
    b0c6:	10 82       	st	Z, r1
    b0c8:	af 81       	ldd	r26, Y+7	; 0x07
    b0ca:	b8 85       	ldd	r27, Y+8	; 0x08
    b0cc:	ab 2b       	or	r26, r27
    b0ce:	09 f4       	brne	.+2      	; 0xb0d2 <follow_path+0x212>
    b0d0:	02 c1       	rjmp	.+516    	; 0xb2d6 <follow_path+0x416>
    b0d2:	61 2c       	mov	r6, r1
    b0d4:	71 2c       	mov	r7, r1
    b0d6:	d4 01       	movw	r26, r8
    b0d8:	8d 91       	ld	r24, X+
    b0da:	9d 91       	ld	r25, X+
    b0dc:	4d 01       	movw	r8, r26
    b0de:	80 32       	cpi	r24, 0x20	; 32
    b0e0:	91 05       	cpc	r25, r1
    b0e2:	21 f4       	brne	.+8      	; 0xb0ec <follow_path+0x22c>
    b0e4:	bf ef       	ldi	r27, 0xFF	; 255
    b0e6:	6b 1a       	sub	r6, r27
    b0e8:	7b 0a       	sbc	r7, r27
    b0ea:	f5 cf       	rjmp	.-22     	; 0xb0d6 <follow_path+0x216>
    b0ec:	61 14       	cp	r6, r1
    b0ee:	71 04       	cpc	r7, r1
    b0f0:	11 f4       	brne	.+4      	; 0xb0f6 <follow_path+0x236>
    b0f2:	8e 97       	sbiw	r24, 0x2e	; 46
    b0f4:	61 f4       	brne	.+24     	; 0xb10e <follow_path+0x24e>
    b0f6:	b3 2d       	mov	r27, r3
    b0f8:	b3 60       	ori	r27, 0x03	; 3
    b0fa:	3b 2e       	mov	r3, r27
    b0fc:	08 c0       	rjmp	.+16     	; 0xb10e <follow_path+0x24e>
    b0fe:	2f 81       	ldd	r18, Y+7	; 0x07
    b100:	38 85       	ldd	r19, Y+8	; 0x08
    b102:	21 50       	subi	r18, 0x01	; 1
    b104:	31 09       	sbc	r19, r1
    b106:	38 87       	std	Y+8, r19	; 0x08
    b108:	2f 83       	std	Y+7, r18	; 0x07
    b10a:	23 2b       	or	r18, r19
    b10c:	21 f0       	breq	.+8      	; 0xb116 <follow_path+0x256>
    b10e:	92 91       	ld	r25, -Z
    b110:	82 91       	ld	r24, -Z
    b112:	8e 97       	sbiw	r24, 0x2e	; 46
    b114:	a1 f7       	brne	.-24     	; 0xb0fe <follow_path+0x23e>
    b116:	4b e0       	ldi	r20, 0x0B	; 11
    b118:	50 e0       	ldi	r21, 0x00	; 0
    b11a:	60 e2       	ldi	r22, 0x20	; 32
    b11c:	70 e0       	ldi	r23, 0x00	; 0
    b11e:	8b 81       	ldd	r24, Y+3	; 0x03
    b120:	9c 81       	ldd	r25, Y+4	; 0x04
    b122:	0e 94 f1 47 	call	0x8fe2	; 0x8fe2 <mem_set>
    b126:	48 e0       	ldi	r20, 0x08	; 8
    b128:	84 2e       	mov	r8, r20
    b12a:	91 2c       	mov	r9, r1
    b12c:	c1 2c       	mov	r12, r1
    b12e:	d1 2c       	mov	r13, r1
    b130:	21 2c       	mov	r2, r1
    b132:	23 01       	movw	r4, r6
    b134:	3f ef       	ldi	r19, 0xFF	; 255
    b136:	43 1a       	sub	r4, r19
    b138:	53 0a       	sbc	r5, r19
    b13a:	66 0c       	add	r6, r6
    b13c:	77 1c       	adc	r7, r7
    b13e:	f5 01       	movw	r30, r10
    b140:	e6 0d       	add	r30, r6
    b142:	f7 1d       	adc	r31, r7
    b144:	80 81       	ld	r24, Z
    b146:	91 81       	ldd	r25, Z+1	; 0x01
    b148:	00 97       	sbiw	r24, 0x00	; 0
    b14a:	09 f4       	brne	.+2      	; 0xb14e <follow_path+0x28e>
    b14c:	9e c0       	rjmp	.+316    	; 0xb28a <follow_path+0x3ca>
    b14e:	80 32       	cpi	r24, 0x20	; 32
    b150:	91 05       	cpc	r25, r1
    b152:	41 f0       	breq	.+16     	; 0xb164 <follow_path+0x2a4>
    b154:	8e 32       	cpi	r24, 0x2E	; 46
    b156:	91 05       	cpc	r25, r1
    b158:	51 f4       	brne	.+20     	; 0xb16e <follow_path+0x2ae>
    b15a:	8f 81       	ldd	r24, Y+7	; 0x07
    b15c:	98 85       	ldd	r25, Y+8	; 0x08
    b15e:	84 15       	cp	r24, r4
    b160:	95 05       	cpc	r25, r5
    b162:	71 f0       	breq	.+28     	; 0xb180 <follow_path+0x2c0>
    b164:	93 2d       	mov	r25, r3
    b166:	93 60       	ori	r25, 0x03	; 3
    b168:	39 2e       	mov	r3, r25
    b16a:	32 01       	movw	r6, r4
    b16c:	e2 cf       	rjmp	.-60     	; 0xb132 <follow_path+0x272>
    b16e:	c8 14       	cp	r12, r8
    b170:	d9 04       	cpc	r13, r9
    b172:	50 f4       	brcc	.+20     	; 0xb188 <follow_path+0x2c8>
    b174:	af 81       	ldd	r26, Y+7	; 0x07
    b176:	b8 85       	ldd	r27, Y+8	; 0x08
    b178:	a4 15       	cp	r26, r4
    b17a:	b5 05       	cpc	r27, r5
    b17c:	49 f5       	brne	.+82     	; 0xb1d0 <follow_path+0x310>
    b17e:	d2 c0       	rjmp	.+420    	; 0xb324 <follow_path+0x464>
    b180:	c8 14       	cp	r12, r8
    b182:	d9 04       	cpc	r13, r9
    b184:	08 f4       	brcc	.+2      	; 0xb188 <follow_path+0x2c8>
    b186:	ce c0       	rjmp	.+412    	; 0xb324 <follow_path+0x464>
    b188:	bb e0       	ldi	r27, 0x0B	; 11
    b18a:	8b 16       	cp	r8, r27
    b18c:	91 04       	cpc	r9, r1
    b18e:	39 f4       	brne	.+14     	; 0xb19e <follow_path+0x2de>
    b190:	e3 2d       	mov	r30, r3
    b192:	e3 60       	ori	r30, 0x03	; 3
    b194:	3e 2e       	mov	r3, r30
    b196:	2b e0       	ldi	r18, 0x0B	; 11
    b198:	82 2e       	mov	r8, r18
    b19a:	91 2c       	mov	r9, r1
    b19c:	76 c0       	rjmp	.+236    	; 0xb28a <follow_path+0x3ca>
    b19e:	2f 81       	ldd	r18, Y+7	; 0x07
    b1a0:	38 85       	ldd	r19, Y+8	; 0x08
    b1a2:	24 15       	cp	r18, r4
    b1a4:	35 05       	cpc	r19, r5
    b1a6:	49 f0       	breq	.+18     	; 0xb1ba <follow_path+0x2fa>
    b1a8:	33 2d       	mov	r19, r3
    b1aa:	33 60       	ori	r19, 0x03	; 3
    b1ac:	33 2e       	mov	r3, r19
    b1ae:	8f 81       	ldd	r24, Y+7	; 0x07
    b1b0:	98 85       	ldd	r25, Y+8	; 0x08
    b1b2:	84 15       	cp	r24, r4
    b1b4:	95 05       	cpc	r25, r5
    b1b6:	08 f4       	brcc	.+2      	; 0xb1ba <follow_path+0x2fa>
    b1b8:	68 c0       	rjmp	.+208    	; 0xb28a <follow_path+0x3ca>
    b1ba:	22 0c       	add	r2, r2
    b1bc:	22 0c       	add	r2, r2
    b1be:	4f 80       	ldd	r4, Y+7	; 0x07
    b1c0:	58 84       	ldd	r5, Y+8	; 0x08
    b1c2:	8b e0       	ldi	r24, 0x0B	; 11
    b1c4:	88 2e       	mov	r8, r24
    b1c6:	91 2c       	mov	r9, r1
    b1c8:	98 e0       	ldi	r25, 0x08	; 8
    b1ca:	c9 2e       	mov	r12, r25
    b1cc:	d1 2c       	mov	r13, r1
    b1ce:	cd cf       	rjmp	.-102    	; 0xb16a <follow_path+0x2aa>
    b1d0:	80 38       	cpi	r24, 0x80	; 128
    b1d2:	91 05       	cpc	r25, r1
    b1d4:	70 f1       	brcs	.+92     	; 0xb232 <follow_path+0x372>
    b1d6:	a3 2d       	mov	r26, r3
    b1d8:	a2 60       	ori	r26, 0x02	; 2
    b1da:	7a 2e       	mov	r7, r26
    b1dc:	bc 01       	movw	r22, r24
    b1de:	80 e0       	ldi	r24, 0x00	; 0
    b1e0:	90 e0       	ldi	r25, 0x00	; 0
    b1e2:	45 eb       	ldi	r20, 0xB5	; 181
    b1e4:	51 e0       	ldi	r21, 0x01	; 1
    b1e6:	0e 94 14 69 	call	0xd228	; 0xd228 <ff_uni2oem>
    b1ea:	87 ff       	sbrs	r24, 7
    b1ec:	08 c0       	rjmp	.+16     	; 0xb1fe <follow_path+0x33e>
    b1ee:	8f 77       	andi	r24, 0x7F	; 127
    b1f0:	99 27       	eor	r25, r25
    b1f2:	fc 01       	movw	r30, r24
    b1f4:	e5 59       	subi	r30, 0x95	; 149
    b1f6:	fb 4f       	sbci	r31, 0xFB	; 251
    b1f8:	80 81       	ld	r24, Z
    b1fa:	90 e0       	ldi	r25, 0x00	; 0
    b1fc:	17 c0       	rjmp	.+46     	; 0xb22c <follow_path+0x36c>
    b1fe:	8f 3f       	cpi	r24, 0xFF	; 255
    b200:	91 05       	cpc	r25, r1
    b202:	a1 f0       	breq	.+40     	; 0xb22c <follow_path+0x36c>
    b204:	98 f0       	brcs	.+38     	; 0xb22c <follow_path+0x36c>
    b206:	94 01       	movw	r18, r8
    b208:	21 50       	subi	r18, 0x01	; 1
    b20a:	31 09       	sbc	r19, r1
    b20c:	c2 16       	cp	r12, r18
    b20e:	d3 06       	cpc	r13, r19
    b210:	28 f0       	brcs	.+10     	; 0xb21c <follow_path+0x35c>
    b212:	b3 2d       	mov	r27, r3
    b214:	b3 60       	ori	r27, 0x03	; 3
    b216:	3b 2e       	mov	r3, r27
    b218:	64 01       	movw	r12, r8
    b21a:	a7 cf       	rjmp	.-178    	; 0xb16a <follow_path+0x2aa>
    b21c:	f8 01       	movw	r30, r16
    b21e:	ec 0d       	add	r30, r12
    b220:	fd 1d       	adc	r31, r13
    b222:	94 8f       	std	Z+28, r25	; 0x1c
    b224:	f6 01       	movw	r30, r12
    b226:	31 96       	adiw	r30, 0x01	; 1
    b228:	6f 01       	movw	r12, r30
    b22a:	26 c0       	rjmp	.+76     	; 0xb278 <follow_path+0x3b8>
    b22c:	00 97       	sbiw	r24, 0x00	; 0
    b22e:	59 f0       	breq	.+22     	; 0xb246 <follow_path+0x386>
    b230:	01 c0       	rjmp	.+2      	; 0xb234 <follow_path+0x374>
    b232:	73 2c       	mov	r7, r3
    b234:	e0 e3       	ldi	r30, 0x30	; 48
    b236:	f4 e0       	ldi	r31, 0x04	; 4
    b238:	21 91       	ld	r18, Z+
    b23a:	22 23       	and	r18, r18
    b23c:	51 f0       	breq	.+20     	; 0xb252 <follow_path+0x392>
    b23e:	30 e0       	ldi	r19, 0x00	; 0
    b240:	82 17       	cp	r24, r18
    b242:	93 07       	cpc	r25, r19
    b244:	c9 f7       	brne	.-14     	; 0xb238 <follow_path+0x378>
    b246:	f7 2d       	mov	r31, r7
    b248:	f3 60       	ori	r31, 0x03	; 3
    b24a:	7f 2e       	mov	r7, r31
    b24c:	8f e5       	ldi	r24, 0x5F	; 95
    b24e:	90 e0       	ldi	r25, 0x00	; 0
    b250:	13 c0       	rjmp	.+38     	; 0xb278 <follow_path+0x3b8>
    b252:	9c 01       	movw	r18, r24
    b254:	21 54       	subi	r18, 0x41	; 65
    b256:	31 09       	sbc	r19, r1
    b258:	2a 31       	cpi	r18, 0x1A	; 26
    b25a:	31 05       	cpc	r19, r1
    b25c:	18 f4       	brcc	.+6      	; 0xb264 <follow_path+0x3a4>
    b25e:	22 2d       	mov	r18, r2
    b260:	22 60       	ori	r18, 0x02	; 2
    b262:	22 2e       	mov	r2, r18
    b264:	9c 01       	movw	r18, r24
    b266:	21 56       	subi	r18, 0x61	; 97
    b268:	31 09       	sbc	r19, r1
    b26a:	2a 31       	cpi	r18, 0x1A	; 26
    b26c:	31 05       	cpc	r19, r1
    b26e:	20 f4       	brcc	.+8      	; 0xb278 <follow_path+0x3b8>
    b270:	32 2d       	mov	r19, r2
    b272:	31 60       	ori	r19, 0x01	; 1
    b274:	23 2e       	mov	r2, r19
    b276:	80 97       	sbiw	r24, 0x20	; 32
    b278:	f8 01       	movw	r30, r16
    b27a:	ec 0d       	add	r30, r12
    b27c:	fd 1d       	adc	r31, r13
    b27e:	84 8f       	std	Z+28, r24	; 0x1c
    b280:	c6 01       	movw	r24, r12
    b282:	01 96       	adiw	r24, 0x01	; 1
    b284:	6c 01       	movw	r12, r24
    b286:	37 2c       	mov	r3, r7
    b288:	70 cf       	rjmp	.-288    	; 0xb16a <follow_path+0x2aa>
    b28a:	f8 01       	movw	r30, r16
    b28c:	84 8d       	ldd	r24, Z+28	; 0x1c
    b28e:	85 3e       	cpi	r24, 0xE5	; 229
    b290:	11 f4       	brne	.+4      	; 0xb296 <follow_path+0x3d6>
    b292:	25 e0       	ldi	r18, 0x05	; 5
    b294:	24 8f       	std	Z+28, r18	; 0x1c
    b296:	38 e0       	ldi	r19, 0x08	; 8
    b298:	83 16       	cp	r8, r19
    b29a:	91 04       	cpc	r9, r1
    b29c:	11 f4       	brne	.+4      	; 0xb2a2 <follow_path+0x3e2>
    b29e:	22 0c       	add	r2, r2
    b2a0:	22 0c       	add	r2, r2
    b2a2:	82 2d       	mov	r24, r2
    b2a4:	8c 70       	andi	r24, 0x0C	; 12
    b2a6:	8c 30       	cpi	r24, 0x0C	; 12
    b2a8:	21 f0       	breq	.+8      	; 0xb2b2 <follow_path+0x3f2>
    b2aa:	82 2d       	mov	r24, r2
    b2ac:	83 70       	andi	r24, 0x03	; 3
    b2ae:	83 30       	cpi	r24, 0x03	; 3
    b2b0:	19 f4       	brne	.+6      	; 0xb2b8 <follow_path+0x3f8>
    b2b2:	83 2d       	mov	r24, r3
    b2b4:	82 60       	ori	r24, 0x02	; 2
    b2b6:	38 2e       	mov	r3, r24
    b2b8:	31 fc       	sbrc	r3, 1
    b2ba:	0a c0       	rjmp	.+20     	; 0xb2d0 <follow_path+0x410>
    b2bc:	20 fe       	sbrs	r2, 0
    b2be:	03 c0       	rjmp	.+6      	; 0xb2c6 <follow_path+0x406>
    b2c0:	93 2d       	mov	r25, r3
    b2c2:	90 61       	ori	r25, 0x10	; 16
    b2c4:	39 2e       	mov	r3, r25
    b2c6:	22 fe       	sbrs	r2, 2
    b2c8:	03 c0       	rjmp	.+6      	; 0xb2d0 <follow_path+0x410>
    b2ca:	a3 2d       	mov	r26, r3
    b2cc:	a8 60       	ori	r26, 0x08	; 8
    b2ce:	3a 2e       	mov	r3, r26
    b2d0:	f8 01       	movw	r30, r16
    b2d2:	37 a2       	std	Z+39, r3	; 0x27
    b2d4:	9b ce       	rjmp	.-714    	; 0xb00c <follow_path+0x14c>
    b2d6:	86 e0       	ldi	r24, 0x06	; 6
    b2d8:	90 e0       	ldi	r25, 0x00	; 0
    b2da:	2a c0       	rjmp	.+84     	; 0xb330 <follow_path+0x470>
    b2dc:	80 e8       	ldi	r24, 0x80	; 128
    b2de:	f8 01       	movw	r30, r16
    b2e0:	87 a3       	std	Z+39, r24	; 0x27
    b2e2:	80 e0       	ldi	r24, 0x00	; 0
    b2e4:	90 e0       	ldi	r25, 0x00	; 0
    b2e6:	24 c0       	rjmp	.+72     	; 0xb330 <follow_path+0x470>
    b2e8:	33 23       	and	r19, r19
    b2ea:	c9 f0       	breq	.+50     	; 0xb31e <follow_path+0x45e>
    b2ec:	21 c0       	rjmp	.+66     	; 0xb330 <follow_path+0x470>
    b2ee:	22 fd       	sbrc	r18, 2
    b2f0:	1f c0       	rjmp	.+62     	; 0xb330 <follow_path+0x470>
    b2f2:	f8 01       	movw	r30, r16
    b2f4:	84 81       	ldd	r24, Z+4	; 0x04
    b2f6:	84 ff       	sbrs	r24, 4
    b2f8:	12 c0       	rjmp	.+36     	; 0xb31e <follow_path+0x45e>
    b2fa:	66 85       	ldd	r22, Z+14	; 0x0e
    b2fc:	77 85       	ldd	r23, Z+15	; 0x0f
    b2fe:	71 70       	andi	r23, 0x01	; 1
    b300:	2d 81       	ldd	r18, Y+5	; 0x05
    b302:	3e 81       	ldd	r19, Y+6	; 0x06
    b304:	62 0f       	add	r22, r18
    b306:	73 1f       	adc	r23, r19
    b308:	a9 81       	ldd	r26, Y+1	; 0x01
    b30a:	ba 81       	ldd	r27, Y+2	; 0x02
    b30c:	8c 91       	ld	r24, X
    b30e:	0e 94 09 4a 	call	0x9412	; 0x9412 <ld_clust.isra.3>
    b312:	f8 01       	movw	r30, r16
    b314:	66 83       	std	Z+6, r22	; 0x06
    b316:	77 83       	std	Z+7, r23	; 0x07
    b318:	80 87       	std	Z+8, r24	; 0x08
    b31a:	91 87       	std	Z+9, r25	; 0x09
    b31c:	88 ce       	rjmp	.-752    	; 0xb02e <follow_path+0x16e>
    b31e:	85 e0       	ldi	r24, 0x05	; 5
    b320:	90 e0       	ldi	r25, 0x00	; 0
    b322:	06 c0       	rjmp	.+12     	; 0xb330 <follow_path+0x470>
    b324:	fb e0       	ldi	r31, 0x0B	; 11
    b326:	8f 16       	cp	r8, r31
    b328:	91 04       	cpc	r9, r1
    b32a:	09 f0       	breq	.+2      	; 0xb32e <follow_path+0x46e>
    b32c:	46 cf       	rjmp	.-372    	; 0xb1ba <follow_path+0x2fa>
    b32e:	30 cf       	rjmp	.-416    	; 0xb190 <follow_path+0x2d0>
    b330:	28 96       	adiw	r28, 0x08	; 8
    b332:	e2 e1       	ldi	r30, 0x12	; 18
    b334:	0c 94 1b e7 	jmp	0x1ce36	; 0x1ce36 <__epilogue_restores__>

0000b338 <f_mount>:
    b338:	a6 e0       	ldi	r26, 0x06	; 6
    b33a:	b0 e0       	ldi	r27, 0x00	; 0
    b33c:	e2 ea       	ldi	r30, 0xA2	; 162
    b33e:	f9 e5       	ldi	r31, 0x59	; 89
    b340:	0c 94 0e e7 	jmp	0x1ce1c	; 0x1ce1c <__prologue_saves__+0x1e>
    b344:	9c 83       	std	Y+4, r25	; 0x04
    b346:	8b 83       	std	Y+3, r24	; 0x03
    b348:	7e 83       	std	Y+6, r23	; 0x06
    b34a:	6d 83       	std	Y+5, r22	; 0x05
    b34c:	14 2f       	mov	r17, r20
    b34e:	7a 83       	std	Y+2, r23	; 0x02
    b350:	69 83       	std	Y+1, r22	; 0x01
    b352:	ce 01       	movw	r24, r28
    b354:	01 96       	adiw	r24, 0x01	; 1
    b356:	0e 94 7c 48 	call	0x90f8	; 0x90f8 <get_ldnumber>
    b35a:	97 fd       	sbrc	r25, 7
    b35c:	20 c0       	rjmp	.+64     	; 0xb39e <f_mount+0x66>
    b35e:	88 0f       	add	r24, r24
    b360:	99 1f       	adc	r25, r25
    b362:	fc 01       	movw	r30, r24
    b364:	e7 5d       	subi	r30, 0xD7	; 215
    b366:	f7 4e       	sbci	r31, 0xE7	; 231
    b368:	01 90       	ld	r0, Z+
    b36a:	f0 81       	ld	r31, Z
    b36c:	e0 2d       	mov	r30, r0
    b36e:	30 97       	sbiw	r30, 0x00	; 0
    b370:	09 f0       	breq	.+2      	; 0xb374 <f_mount+0x3c>
    b372:	10 82       	st	Z, r1
    b374:	eb 81       	ldd	r30, Y+3	; 0x03
    b376:	fc 81       	ldd	r31, Y+4	; 0x04
    b378:	30 97       	sbiw	r30, 0x00	; 0
    b37a:	09 f0       	breq	.+2      	; 0xb37e <f_mount+0x46>
    b37c:	10 82       	st	Z, r1
    b37e:	dc 01       	movw	r26, r24
    b380:	a7 5d       	subi	r26, 0xD7	; 215
    b382:	b7 4e       	sbci	r27, 0xE7	; 231
    b384:	ed 93       	st	X+, r30
    b386:	fc 93       	st	X, r31
    b388:	11 23       	and	r17, r17
    b38a:	61 f0       	breq	.+24     	; 0xb3a4 <f_mount+0x6c>
    b38c:	40 e0       	ldi	r20, 0x00	; 0
    b38e:	be 01       	movw	r22, r28
    b390:	6d 5f       	subi	r22, 0xFD	; 253
    b392:	7f 4f       	sbci	r23, 0xFF	; 255
    b394:	ce 01       	movw	r24, r28
    b396:	05 96       	adiw	r24, 0x05	; 5
    b398:	0e 94 13 4c 	call	0x9826	; 0x9826 <mount_volume>
    b39c:	05 c0       	rjmp	.+10     	; 0xb3a8 <f_mount+0x70>
    b39e:	8b e0       	ldi	r24, 0x0B	; 11
    b3a0:	90 e0       	ldi	r25, 0x00	; 0
    b3a2:	02 c0       	rjmp	.+4      	; 0xb3a8 <f_mount+0x70>
    b3a4:	80 e0       	ldi	r24, 0x00	; 0
    b3a6:	90 e0       	ldi	r25, 0x00	; 0
    b3a8:	26 96       	adiw	r28, 0x06	; 6
    b3aa:	e3 e0       	ldi	r30, 0x03	; 3
    b3ac:	0c 94 2a e7 	jmp	0x1ce54	; 0x1ce54 <__epilogue_restores__+0x1e>

0000b3b0 <f_open>:
    b3b0:	a6 e3       	ldi	r26, 0x36	; 54
    b3b2:	b0 e0       	ldi	r27, 0x00	; 0
    b3b4:	ee ed       	ldi	r30, 0xDE	; 222
    b3b6:	f9 e5       	ldi	r31, 0x59	; 89
    b3b8:	0c 94 ff e6 	jmp	0x1cdfe	; 0x1cdfe <__prologue_saves__>
    b3bc:	7a ab       	std	Y+50, r23	; 0x32
    b3be:	69 ab       	std	Y+49, r22	; 0x31
    b3c0:	00 97       	sbiw	r24, 0x00	; 0
    b3c2:	09 f4       	brne	.+2      	; 0xb3c6 <f_open+0x16>
    b3c4:	93 c1       	rjmp	.+806    	; 0xb6ec <f_open+0x33c>
    b3c6:	74 2e       	mov	r7, r20
    b3c8:	7c 01       	movw	r14, r24
    b3ca:	24 2f       	mov	r18, r20
    b3cc:	2f 73       	andi	r18, 0x3F	; 63
    b3ce:	32 2e       	mov	r3, r18
    b3d0:	42 2f       	mov	r20, r18
    b3d2:	be 01       	movw	r22, r28
    b3d4:	61 5d       	subi	r22, 0xD1	; 209
    b3d6:	7f 4f       	sbci	r23, 0xFF	; 255
    b3d8:	ce 01       	movw	r24, r28
    b3da:	c1 96       	adiw	r24, 0x31	; 49
    b3dc:	0e 94 13 4c 	call	0x9826	; 0x9826 <mount_volume>
    b3e0:	00 97       	sbiw	r24, 0x00	; 0
    b3e2:	09 f0       	breq	.+2      	; 0xb3e6 <f_open+0x36>
    b3e4:	7d c1       	rjmp	.+762    	; 0xb6e0 <f_open+0x330>
    b3e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    b3e8:	98 a9       	ldd	r25, Y+48	; 0x30
    b3ea:	9a 83       	std	Y+2, r25	; 0x02
    b3ec:	89 83       	std	Y+1, r24	; 0x01
    b3ee:	80 e0       	ldi	r24, 0x00	; 0
    b3f0:	92 e0       	ldi	r25, 0x02	; 2
    b3f2:	0e 94 0e 69 	call	0xd21c	; 0xd21c <ff_memalloc>
    b3f6:	5c 01       	movw	r10, r24
    b3f8:	00 97       	sbiw	r24, 0x00	; 0
    b3fa:	09 f4       	brne	.+2      	; 0xb3fe <f_open+0x4e>
    b3fc:	79 c1       	rjmp	.+754    	; 0xb6f0 <f_open+0x340>
    b3fe:	ef a5       	ldd	r30, Y+47	; 0x2f
    b400:	f8 a9       	ldd	r31, Y+48	; 0x30
    b402:	94 87       	std	Z+12, r25	; 0x0c
    b404:	83 87       	std	Z+11, r24	; 0x0b
    b406:	69 a9       	ldd	r22, Y+49	; 0x31
    b408:	7a a9       	ldd	r23, Y+50	; 0x32
    b40a:	ce 01       	movw	r24, r28
    b40c:	01 96       	adiw	r24, 0x01	; 1
    b40e:	58 dd       	rcall	.-1360   	; 0xaec0 <follow_path>
    b410:	8c 01       	movw	r16, r24
    b412:	89 2b       	or	r24, r25
    b414:	29 f4       	brne	.+10     	; 0xb420 <f_open+0x70>
    b416:	88 a5       	ldd	r24, Y+40	; 0x28
    b418:	87 ff       	sbrs	r24, 7
    b41a:	02 c0       	rjmp	.+4      	; 0xb420 <f_open+0x70>
    b41c:	06 e0       	ldi	r16, 0x06	; 6
    b41e:	10 e0       	ldi	r17, 0x00	; 0
    b420:	87 2d       	mov	r24, r7
    b422:	8c 71       	andi	r24, 0x1C	; 28
    b424:	09 f4       	brne	.+2      	; 0xb428 <f_open+0x78>
    b426:	75 c0       	rjmp	.+234    	; 0xb512 <f_open+0x162>
    b428:	01 15       	cp	r16, r1
    b42a:	11 05       	cpc	r17, r1
    b42c:	79 f0       	breq	.+30     	; 0xb44c <f_open+0x9c>
    b42e:	04 30       	cpi	r16, 0x04	; 4
    b430:	11 05       	cpc	r17, r1
    b432:	09 f0       	breq	.+2      	; 0xb436 <f_open+0x86>
    b434:	6d c1       	rjmp	.+730    	; 0xb710 <f_open+0x360>
    b436:	ce 01       	movw	r24, r28
    b438:	01 96       	adiw	r24, 0x01	; 1
    b43a:	b4 db       	rcall	.-2200   	; 0xaba4 <dir_register>
    b43c:	8c 01       	movw	r16, r24
    b43e:	89 2b       	or	r24, r25
    b440:	09 f0       	breq	.+2      	; 0xb444 <f_open+0x94>
    b442:	66 c1       	rjmp	.+716    	; 0xb710 <f_open+0x360>
    b444:	33 2d       	mov	r19, r3
    b446:	38 60       	ori	r19, 0x08	; 8
    b448:	33 2e       	mov	r3, r19
    b44a:	06 c0       	rjmp	.+12     	; 0xb458 <f_open+0xa8>
    b44c:	8d 81       	ldd	r24, Y+5	; 0x05
    b44e:	81 71       	andi	r24, 0x11	; 17
    b450:	09 f0       	breq	.+2      	; 0xb454 <f_open+0xa4>
    b452:	5c c1       	rjmp	.+696    	; 0xb70c <f_open+0x35c>
    b454:	72 fc       	sbrc	r7, 2
    b456:	51 c1       	rjmp	.+674    	; 0xb6fa <f_open+0x34a>
    b458:	33 fe       	sbrs	r3, 3
    b45a:	6b c0       	rjmp	.+214    	; 0xb532 <f_open+0x182>
    b45c:	0b 8d       	ldd	r16, Y+27	; 0x1b
    b45e:	1c 8d       	ldd	r17, Y+28	; 0x1c
    b460:	ef a5       	ldd	r30, Y+47	; 0x2f
    b462:	f8 a9       	ldd	r31, Y+48	; 0x30
    b464:	b8 01       	movw	r22, r16
    b466:	80 81       	ld	r24, Z
    b468:	0e 94 09 4a 	call	0x9412	; 0x9412 <ld_clust.isra.3>
    b46c:	2b 01       	movw	r4, r22
    b46e:	3c 01       	movw	r6, r24
    b470:	0e 94 8f 70 	call	0xe11e	; 0xe11e <get_fattime>
    b474:	ab 01       	movw	r20, r22
    b476:	bc 01       	movw	r22, r24
    b478:	c8 01       	movw	r24, r16
    b47a:	0e 96       	adiw	r24, 0x0e	; 14
    b47c:	0e 94 eb 47 	call	0x8fd6	; 0x8fd6 <st_dword>
    b480:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b482:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b484:	80 e2       	ldi	r24, 0x20	; 32
    b486:	83 87       	std	Z+11, r24	; 0x0b
    b488:	af a5       	ldd	r26, Y+47	; 0x2f
    b48a:	b8 a9       	ldd	r27, Y+48	; 0x30
    b48c:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b48e:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b490:	12 8e       	std	Z+26, r1	; 0x1a
    b492:	13 8e       	std	Z+27, r1	; 0x1b
    b494:	8c 91       	ld	r24, X
    b496:	83 30       	cpi	r24, 0x03	; 3
    b498:	11 f4       	brne	.+4      	; 0xb49e <f_open+0xee>
    b49a:	14 8a       	std	Z+20, r1	; 0x14
    b49c:	15 8a       	std	Z+21, r1	; 0x15
    b49e:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b4a0:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b4a2:	14 8e       	std	Z+28, r1	; 0x1c
    b4a4:	15 8e       	std	Z+29, r1	; 0x1d
    b4a6:	16 8e       	std	Z+30, r1	; 0x1e
    b4a8:	17 8e       	std	Z+31, r1	; 0x1f
    b4aa:	81 e0       	ldi	r24, 0x01	; 1
    b4ac:	fd 01       	movw	r30, r26
    b4ae:	83 83       	std	Z+3, r24	; 0x03
    b4b0:	41 14       	cp	r4, r1
    b4b2:	51 04       	cpc	r5, r1
    b4b4:	61 04       	cpc	r6, r1
    b4b6:	71 04       	cpc	r7, r1
    b4b8:	c9 f1       	breq	.+114    	; 0xb52c <f_open+0x17c>
    b4ba:	21 a9       	ldd	r18, Z+49	; 0x31
    b4bc:	32 a9       	ldd	r19, Z+50	; 0x32
    b4be:	43 a9       	ldd	r20, Z+51	; 0x33
    b4c0:	54 a9       	ldd	r21, Z+52	; 0x34
    b4c2:	2b ab       	std	Y+51, r18	; 0x33
    b4c4:	3c ab       	std	Y+52, r19	; 0x34
    b4c6:	4d ab       	std	Y+53, r20	; 0x35
    b4c8:	5e ab       	std	Y+54, r21	; 0x36
    b4ca:	00 e0       	ldi	r16, 0x00	; 0
    b4cc:	10 e0       	ldi	r17, 0x00	; 0
    b4ce:	98 01       	movw	r18, r16
    b4d0:	b3 01       	movw	r22, r6
    b4d2:	a2 01       	movw	r20, r4
    b4d4:	ce 01       	movw	r24, r28
    b4d6:	01 96       	adiw	r24, 0x01	; 1
    b4d8:	0e 94 01 52 	call	0xa402	; 0xa402 <remove_chain>
    b4dc:	8c 01       	movw	r16, r24
    b4de:	89 2b       	or	r24, r25
    b4e0:	09 f0       	breq	.+2      	; 0xb4e4 <f_open+0x134>
    b4e2:	16 c1       	rjmp	.+556    	; 0xb710 <f_open+0x360>
    b4e4:	4b a9       	ldd	r20, Y+51	; 0x33
    b4e6:	5c a9       	ldd	r21, Y+52	; 0x34
    b4e8:	6d a9       	ldd	r22, Y+53	; 0x35
    b4ea:	7e a9       	ldd	r23, Y+54	; 0x36
    b4ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    b4ee:	98 a9       	ldd	r25, Y+48	; 0x30
    b4f0:	0e 94 98 4b 	call	0x9730	; 0x9730 <move_window>
    b4f4:	8c 01       	movw	r16, r24
    b4f6:	ef a5       	ldd	r30, Y+47	; 0x2f
    b4f8:	f8 a9       	ldd	r31, Y+48	; 0x30
    b4fa:	21 e0       	ldi	r18, 0x01	; 1
    b4fc:	42 1a       	sub	r4, r18
    b4fe:	51 08       	sbc	r5, r1
    b500:	61 08       	sbc	r6, r1
    b502:	71 08       	sbc	r7, r1
    b504:	45 86       	std	Z+13, r4	; 0x0d
    b506:	56 86       	std	Z+14, r5	; 0x0e
    b508:	67 86       	std	Z+15, r6	; 0x0f
    b50a:	70 8a       	std	Z+16, r7	; 0x10
    b50c:	89 2b       	or	r24, r25
    b50e:	61 f0       	breq	.+24     	; 0xb528 <f_open+0x178>
    b510:	ff c0       	rjmp	.+510    	; 0xb710 <f_open+0x360>
    b512:	01 15       	cp	r16, r1
    b514:	11 05       	cpc	r17, r1
    b516:	09 f0       	breq	.+2      	; 0xb51a <f_open+0x16a>
    b518:	fb c0       	rjmp	.+502    	; 0xb710 <f_open+0x360>
    b51a:	8d 81       	ldd	r24, Y+5	; 0x05
    b51c:	84 fd       	sbrc	r24, 4
    b51e:	f3 c0       	rjmp	.+486    	; 0xb706 <f_open+0x356>
    b520:	71 fe       	sbrs	r7, 1
    b522:	02 c0       	rjmp	.+4      	; 0xb528 <f_open+0x178>
    b524:	80 fd       	sbrc	r24, 0
    b526:	f2 c0       	rjmp	.+484    	; 0xb70c <f_open+0x35c>
    b528:	33 fe       	sbrs	r3, 3
    b52a:	03 c0       	rjmp	.+6      	; 0xb532 <f_open+0x182>
    b52c:	33 2d       	mov	r19, r3
    b52e:	30 64       	ori	r19, 0x40	; 64
    b530:	33 2e       	mov	r3, r19
    b532:	0f a5       	ldd	r16, Y+47	; 0x2f
    b534:	18 a9       	ldd	r17, Y+48	; 0x30
    b536:	f8 01       	movw	r30, r16
    b538:	81 a9       	ldd	r24, Z+49	; 0x31
    b53a:	92 a9       	ldd	r25, Z+50	; 0x32
    b53c:	a3 a9       	ldd	r26, Z+51	; 0x33
    b53e:	b4 a9       	ldd	r27, Z+52	; 0x34
    b540:	f7 01       	movw	r30, r14
    b542:	84 8f       	std	Z+28, r24	; 0x1c
    b544:	95 8f       	std	Z+29, r25	; 0x1d
    b546:	a6 8f       	std	Z+30, r26	; 0x1e
    b548:	b7 8f       	std	Z+31, r27	; 0x1f
    b54a:	6b 8c       	ldd	r6, Y+27	; 0x1b
    b54c:	7c 8c       	ldd	r7, Y+28	; 0x1c
    b54e:	71 a2       	std	Z+33, r7	; 0x21
    b550:	60 a2       	std	Z+32, r6	; 0x20
    b552:	b3 01       	movw	r22, r6
    b554:	f8 01       	movw	r30, r16
    b556:	80 81       	ld	r24, Z
    b558:	0e 94 09 4a 	call	0x9412	; 0x9412 <ld_clust.isra.3>
    b55c:	f7 01       	movw	r30, r14
    b55e:	66 83       	std	Z+6, r22	; 0x06
    b560:	77 83       	std	Z+7, r23	; 0x07
    b562:	80 87       	std	Z+8, r24	; 0x08
    b564:	91 87       	std	Z+9, r25	; 0x09
    b566:	c3 01       	movw	r24, r6
    b568:	4c 96       	adiw	r24, 0x1c	; 28
    b56a:	0e 94 d6 47 	call	0x8fac	; 0x8fac <ld_dword>
    b56e:	f7 01       	movw	r30, r14
    b570:	62 87       	std	Z+10, r22	; 0x0a
    b572:	73 87       	std	Z+11, r23	; 0x0b
    b574:	84 87       	std	Z+12, r24	; 0x0c
    b576:	95 87       	std	Z+13, r25	; 0x0d
    b578:	13 a2       	std	Z+35, r1	; 0x23
    b57a:	12 a2       	std	Z+34, r1	; 0x22
    b57c:	11 83       	std	Z+1, r17	; 0x01
    b57e:	00 83       	st	Z, r16
    b580:	f8 01       	movw	r30, r16
    b582:	85 81       	ldd	r24, Z+5	; 0x05
    b584:	96 81       	ldd	r25, Z+6	; 0x06
    b586:	f7 01       	movw	r30, r14
    b588:	93 83       	std	Z+3, r25	; 0x03
    b58a:	82 83       	std	Z+2, r24	; 0x02
    b58c:	36 86       	std	Z+14, r3	; 0x0e
    b58e:	17 86       	std	Z+15, r1	; 0x0f
    b590:	10 8e       	std	Z+24, r1	; 0x18
    b592:	11 8e       	std	Z+25, r1	; 0x19
    b594:	12 8e       	std	Z+26, r1	; 0x1a
    b596:	13 8e       	std	Z+27, r1	; 0x1b
    b598:	10 8a       	std	Z+16, r1	; 0x10
    b59a:	11 8a       	std	Z+17, r1	; 0x11
    b59c:	12 8a       	std	Z+18, r1	; 0x12
    b59e:	13 8a       	std	Z+19, r1	; 0x13
    b5a0:	67 01       	movw	r12, r14
    b5a2:	f4 e2       	ldi	r31, 0x24	; 36
    b5a4:	cf 0e       	add	r12, r31
    b5a6:	d1 1c       	adc	r13, r1
    b5a8:	40 e0       	ldi	r20, 0x00	; 0
    b5aa:	52 e0       	ldi	r21, 0x02	; 2
    b5ac:	60 e0       	ldi	r22, 0x00	; 0
    b5ae:	70 e0       	ldi	r23, 0x00	; 0
    b5b0:	c6 01       	movw	r24, r12
    b5b2:	0e 94 f1 47 	call	0x8fe2	; 0x8fe2 <mem_set>
    b5b6:	35 fc       	sbrc	r3, 5
    b5b8:	03 c0       	rjmp	.+6      	; 0xb5c0 <f_open+0x210>
    b5ba:	00 e0       	ldi	r16, 0x00	; 0
    b5bc:	10 e0       	ldi	r17, 0x00	; 0
    b5be:	89 c0       	rjmp	.+274    	; 0xb6d2 <f_open+0x322>
    b5c0:	f7 01       	movw	r30, r14
    b5c2:	62 84       	ldd	r6, Z+10	; 0x0a
    b5c4:	73 84       	ldd	r7, Z+11	; 0x0b
    b5c6:	84 84       	ldd	r8, Z+12	; 0x0c
    b5c8:	95 84       	ldd	r9, Z+13	; 0x0d
    b5ca:	61 14       	cp	r6, r1
    b5cc:	71 04       	cpc	r7, r1
    b5ce:	81 04       	cpc	r8, r1
    b5d0:	91 04       	cpc	r9, r1
    b5d2:	99 f3       	breq	.-26     	; 0xb5ba <f_open+0x20a>
    b5d4:	60 8a       	std	Z+16, r6	; 0x10
    b5d6:	71 8a       	std	Z+17, r7	; 0x11
    b5d8:	82 8a       	std	Z+18, r8	; 0x12
    b5da:	93 8a       	std	Z+19, r9	; 0x13
    b5dc:	ef a5       	ldd	r30, Y+47	; 0x2f
    b5de:	f8 a9       	ldd	r31, Y+48	; 0x30
    b5e0:	21 84       	ldd	r2, Z+9	; 0x09
    b5e2:	32 84       	ldd	r3, Z+10	; 0x0a
    b5e4:	c1 01       	movw	r24, r2
    b5e6:	a0 e0       	ldi	r26, 0x00	; 0
    b5e8:	b0 e0       	ldi	r27, 0x00	; 0
    b5ea:	1c 01       	movw	r2, r24
    b5ec:	2d 01       	movw	r4, r26
    b5ee:	59 e0       	ldi	r21, 0x09	; 9
    b5f0:	22 0c       	add	r2, r2
    b5f2:	33 1c       	adc	r3, r3
    b5f4:	44 1c       	adc	r4, r4
    b5f6:	55 1c       	adc	r5, r5
    b5f8:	5a 95       	dec	r21
    b5fa:	d1 f7       	brne	.-12     	; 0xb5f0 <f_open+0x240>
    b5fc:	f7 01       	movw	r30, r14
    b5fe:	46 81       	ldd	r20, Z+6	; 0x06
    b600:	57 81       	ldd	r21, Z+7	; 0x07
    b602:	60 85       	ldd	r22, Z+8	; 0x08
    b604:	71 85       	ldd	r23, Z+9	; 0x09
    b606:	26 14       	cp	r2, r6
    b608:	37 04       	cpc	r3, r7
    b60a:	48 04       	cpc	r4, r8
    b60c:	59 04       	cpc	r5, r9
    b60e:	f0 f4       	brcc	.+60     	; 0xb64c <f_open+0x29c>
    b610:	f7 01       	movw	r30, r14
    b612:	80 81       	ld	r24, Z
    b614:	91 81       	ldd	r25, Z+1	; 0x01
    b616:	0e 94 66 4f 	call	0x9ecc	; 0x9ecc <get_fat.isra.9>
    b61a:	ab 01       	movw	r20, r22
    b61c:	bc 01       	movw	r22, r24
    b61e:	d4 01       	movw	r26, r8
    b620:	c3 01       	movw	r24, r6
    b622:	82 19       	sub	r24, r2
    b624:	93 09       	sbc	r25, r3
    b626:	a4 09       	sbc	r26, r4
    b628:	b5 09       	sbc	r27, r5
    b62a:	3c 01       	movw	r6, r24
    b62c:	4d 01       	movw	r8, r26
    b62e:	42 30       	cpi	r20, 0x02	; 2
    b630:	51 05       	cpc	r21, r1
    b632:	61 05       	cpc	r22, r1
    b634:	71 05       	cpc	r23, r1
    b636:	08 f4       	brcc	.+2      	; 0xb63a <f_open+0x28a>
    b638:	63 c0       	rjmp	.+198    	; 0xb700 <f_open+0x350>
    b63a:	4f 3f       	cpi	r20, 0xFF	; 255
    b63c:	ff ef       	ldi	r31, 0xFF	; 255
    b63e:	5f 07       	cpc	r21, r31
    b640:	6f 07       	cpc	r22, r31
    b642:	7f 07       	cpc	r23, r31
    b644:	01 f7       	brne	.-64     	; 0xb606 <f_open+0x256>
    b646:	01 e0       	ldi	r16, 0x01	; 1
    b648:	10 e0       	ldi	r17, 0x00	; 0
    b64a:	02 c0       	rjmp	.+4      	; 0xb650 <f_open+0x2a0>
    b64c:	00 e0       	ldi	r16, 0x00	; 0
    b64e:	10 e0       	ldi	r17, 0x00	; 0
    b650:	f7 01       	movw	r30, r14
    b652:	44 8b       	std	Z+20, r20	; 0x14
    b654:	55 8b       	std	Z+21, r21	; 0x15
    b656:	66 8b       	std	Z+22, r22	; 0x16
    b658:	77 8b       	std	Z+23, r23	; 0x17
    b65a:	01 15       	cp	r16, r1
    b65c:	11 05       	cpc	r17, r1
    b65e:	c9 f5       	brne	.+114    	; 0xb6d2 <f_open+0x322>
    b660:	d4 01       	movw	r26, r8
    b662:	c3 01       	movw	r24, r6
    b664:	91 70       	andi	r25, 0x01	; 1
    b666:	aa 27       	eor	r26, r26
    b668:	bb 27       	eor	r27, r27
    b66a:	89 2b       	or	r24, r25
    b66c:	8a 2b       	or	r24, r26
    b66e:	8b 2b       	or	r24, r27
    b670:	09 f4       	brne	.+2      	; 0xb674 <f_open+0x2c4>
    b672:	a3 cf       	rjmp	.-186    	; 0xb5ba <f_open+0x20a>
    b674:	4f a4       	ldd	r4, Y+47	; 0x2f
    b676:	58 a8       	ldd	r5, Y+48	; 0x30
    b678:	c2 01       	movw	r24, r4
    b67a:	0e 94 09 48 	call	0x9012	; 0x9012 <clst2sect>
    b67e:	61 15       	cp	r22, r1
    b680:	71 05       	cpc	r23, r1
    b682:	81 05       	cpc	r24, r1
    b684:	91 05       	cpc	r25, r1
    b686:	19 f1       	breq	.+70     	; 0xb6ce <f_open+0x31e>
    b688:	94 01       	movw	r18, r8
    b68a:	83 01       	movw	r16, r6
    b68c:	49 e0       	ldi	r20, 0x09	; 9
    b68e:	36 95       	lsr	r19
    b690:	27 95       	ror	r18
    b692:	17 95       	ror	r17
    b694:	07 95       	ror	r16
    b696:	4a 95       	dec	r20
    b698:	d1 f7       	brne	.-12     	; 0xb68e <f_open+0x2de>
    b69a:	a9 01       	movw	r20, r18
    b69c:	98 01       	movw	r18, r16
    b69e:	26 0f       	add	r18, r22
    b6a0:	37 1f       	adc	r19, r23
    b6a2:	48 1f       	adc	r20, r24
    b6a4:	59 1f       	adc	r21, r25
    b6a6:	f7 01       	movw	r30, r14
    b6a8:	20 8f       	std	Z+24, r18	; 0x18
    b6aa:	31 8f       	std	Z+25, r19	; 0x19
    b6ac:	42 8f       	std	Z+26, r20	; 0x1a
    b6ae:	53 8f       	std	Z+27, r21	; 0x1b
    b6b0:	01 e0       	ldi	r16, 0x01	; 1
    b6b2:	10 e0       	ldi	r17, 0x00	; 0
    b6b4:	b6 01       	movw	r22, r12
    b6b6:	f2 01       	movw	r30, r4
    b6b8:	81 81       	ldd	r24, Z+1	; 0x01
    b6ba:	0e 94 ca 69 	call	0xd394	; 0xd394 <disk_read>
    b6be:	31 e0       	ldi	r19, 0x01	; 1
    b6c0:	20 e0       	ldi	r18, 0x00	; 0
    b6c2:	89 2b       	or	r24, r25
    b6c4:	09 f4       	brne	.+2      	; 0xb6c8 <f_open+0x318>
    b6c6:	30 e0       	ldi	r19, 0x00	; 0
    b6c8:	03 2f       	mov	r16, r19
    b6ca:	12 2f       	mov	r17, r18
    b6cc:	02 c0       	rjmp	.+4      	; 0xb6d2 <f_open+0x322>
    b6ce:	02 e0       	ldi	r16, 0x02	; 2
    b6d0:	10 e0       	ldi	r17, 0x00	; 0
    b6d2:	c5 01       	movw	r24, r10
    b6d4:	0e 94 11 69 	call	0xd222	; 0xd222 <ff_memfree>
    b6d8:	01 15       	cp	r16, r1
    b6da:	11 05       	cpc	r17, r1
    b6dc:	59 f0       	breq	.+22     	; 0xb6f4 <f_open+0x344>
    b6de:	01 c0       	rjmp	.+2      	; 0xb6e2 <f_open+0x332>
    b6e0:	8c 01       	movw	r16, r24
    b6e2:	f7 01       	movw	r30, r14
    b6e4:	11 82       	std	Z+1, r1	; 0x01
    b6e6:	10 82       	st	Z, r1
    b6e8:	c8 01       	movw	r24, r16
    b6ea:	16 c0       	rjmp	.+44     	; 0xb718 <f_open+0x368>
    b6ec:	89 e0       	ldi	r24, 0x09	; 9
    b6ee:	03 c0       	rjmp	.+6      	; 0xb6f6 <f_open+0x346>
    b6f0:	81 e1       	ldi	r24, 0x11	; 17
    b6f2:	01 c0       	rjmp	.+2      	; 0xb6f6 <f_open+0x346>
    b6f4:	80 e0       	ldi	r24, 0x00	; 0
    b6f6:	90 e0       	ldi	r25, 0x00	; 0
    b6f8:	0f c0       	rjmp	.+30     	; 0xb718 <f_open+0x368>
    b6fa:	08 e0       	ldi	r16, 0x08	; 8
    b6fc:	10 e0       	ldi	r17, 0x00	; 0
    b6fe:	08 c0       	rjmp	.+16     	; 0xb710 <f_open+0x360>
    b700:	02 e0       	ldi	r16, 0x02	; 2
    b702:	10 e0       	ldi	r17, 0x00	; 0
    b704:	a5 cf       	rjmp	.-182    	; 0xb650 <f_open+0x2a0>
    b706:	04 e0       	ldi	r16, 0x04	; 4
    b708:	10 e0       	ldi	r17, 0x00	; 0
    b70a:	02 c0       	rjmp	.+4      	; 0xb710 <f_open+0x360>
    b70c:	07 e0       	ldi	r16, 0x07	; 7
    b70e:	10 e0       	ldi	r17, 0x00	; 0
    b710:	c5 01       	movw	r24, r10
    b712:	0e 94 11 69 	call	0xd222	; 0xd222 <ff_memfree>
    b716:	e5 cf       	rjmp	.-54     	; 0xb6e2 <f_open+0x332>
    b718:	e6 96       	adiw	r28, 0x36	; 54
    b71a:	e2 e1       	ldi	r30, 0x12	; 18
    b71c:	0c 94 1b e7 	jmp	0x1ce36	; 0x1ce36 <__epilogue_restores__>

0000b720 <f_read>:
    b720:	a6 e0       	ldi	r26, 0x06	; 6
    b722:	b0 e0       	ldi	r27, 0x00	; 0
    b724:	e6 e9       	ldi	r30, 0x96	; 150
    b726:	fb e5       	ldi	r31, 0x5B	; 91
    b728:	0c 94 ff e6 	jmp	0x1cdfe	; 0x1cdfe <__prologue_saves__>
    b72c:	7c 01       	movw	r14, r24
    b72e:	4b 01       	movw	r8, r22
    b730:	5a 01       	movw	r10, r20
    b732:	3e 83       	std	Y+6, r19	; 0x06
    b734:	2d 83       	std	Y+5, r18	; 0x05
    b736:	f9 01       	movw	r30, r18
    b738:	11 82       	std	Z+1, r1	; 0x01
    b73a:	10 82       	st	Z, r1
    b73c:	be 01       	movw	r22, r28
    b73e:	6f 5f       	subi	r22, 0xFF	; 255
    b740:	7f 4f       	sbci	r23, 0xFF	; 255
    b742:	0e 94 a8 48 	call	0x9150	; 0x9150 <validate>
    b746:	00 97       	sbiw	r24, 0x00	; 0
    b748:	09 f0       	breq	.+2      	; 0xb74c <f_read+0x2c>
    b74a:	31 c1       	rjmp	.+610    	; 0xb9ae <f_read+0x28e>
    b74c:	f7 01       	movw	r30, r14
    b74e:	87 85       	ldd	r24, Z+15	; 0x0f
    b750:	90 e0       	ldi	r25, 0x00	; 0
    b752:	00 97       	sbiw	r24, 0x00	; 0
    b754:	09 f0       	breq	.+2      	; 0xb758 <f_read+0x38>
    b756:	2b c1       	rjmp	.+598    	; 0xb9ae <f_read+0x28e>
    b758:	86 85       	ldd	r24, Z+14	; 0x0e
    b75a:	80 ff       	sbrs	r24, 0
    b75c:	26 c1       	rjmp	.+588    	; 0xb9aa <f_read+0x28a>
    b75e:	82 85       	ldd	r24, Z+10	; 0x0a
    b760:	93 85       	ldd	r25, Z+11	; 0x0b
    b762:	a4 85       	ldd	r26, Z+12	; 0x0c
    b764:	b5 85       	ldd	r27, Z+13	; 0x0d
    b766:	40 89       	ldd	r20, Z+16	; 0x10
    b768:	51 89       	ldd	r21, Z+17	; 0x11
    b76a:	62 89       	ldd	r22, Z+18	; 0x12
    b76c:	73 89       	ldd	r23, Z+19	; 0x13
    b76e:	84 1b       	sub	r24, r20
    b770:	95 0b       	sbc	r25, r21
    b772:	a6 0b       	sbc	r26, r22
    b774:	b7 0b       	sbc	r27, r23
    b776:	a5 01       	movw	r20, r10
    b778:	60 e0       	ldi	r22, 0x00	; 0
    b77a:	70 e0       	ldi	r23, 0x00	; 0
    b77c:	84 17       	cp	r24, r20
    b77e:	95 07       	cpc	r25, r21
    b780:	a6 07       	cpc	r26, r22
    b782:	b7 07       	cpc	r27, r23
    b784:	08 f4       	brcc	.+2      	; 0xb788 <f_read+0x68>
    b786:	5c 01       	movw	r10, r24
    b788:	17 01       	movw	r2, r14
    b78a:	f4 e2       	ldi	r31, 0x24	; 36
    b78c:	2f 0e       	add	r2, r31
    b78e:	31 1c       	adc	r3, r1
    b790:	a1 14       	cp	r10, r1
    b792:	b1 04       	cpc	r11, r1
    b794:	09 f4       	brne	.+2      	; 0xb798 <f_read+0x78>
    b796:	07 c1       	rjmp	.+526    	; 0xb9a6 <f_read+0x286>
    b798:	f7 01       	movw	r30, r14
    b79a:	40 89       	ldd	r20, Z+16	; 0x10
    b79c:	51 89       	ldd	r21, Z+17	; 0x11
    b79e:	62 89       	ldd	r22, Z+18	; 0x12
    b7a0:	73 89       	ldd	r23, Z+19	; 0x13
    b7a2:	db 01       	movw	r26, r22
    b7a4:	ca 01       	movw	r24, r20
    b7a6:	91 70       	andi	r25, 0x01	; 1
    b7a8:	aa 27       	eor	r26, r26
    b7aa:	bb 27       	eor	r27, r27
    b7ac:	89 2b       	or	r24, r25
    b7ae:	8a 2b       	or	r24, r26
    b7b0:	8b 2b       	or	r24, r27
    b7b2:	09 f0       	breq	.+2      	; 0xb7b6 <f_read+0x96>
    b7b4:	cb c0       	rjmp	.+406    	; 0xb94c <f_read+0x22c>
    b7b6:	e9 81       	ldd	r30, Y+1	; 0x01
    b7b8:	fa 81       	ldd	r31, Y+2	; 0x02
    b7ba:	01 85       	ldd	r16, Z+9	; 0x09
    b7bc:	12 85       	ldd	r17, Z+10	; 0x0a
    b7be:	01 50       	subi	r16, 0x01	; 1
    b7c0:	11 09       	sbc	r17, r1
    b7c2:	db 01       	movw	r26, r22
    b7c4:	ca 01       	movw	r24, r20
    b7c6:	e9 e0       	ldi	r30, 0x09	; 9
    b7c8:	b6 95       	lsr	r27
    b7ca:	a7 95       	ror	r26
    b7cc:	97 95       	ror	r25
    b7ce:	87 95       	ror	r24
    b7d0:	ea 95       	dec	r30
    b7d2:	d1 f7       	brne	.-12     	; 0xb7c8 <f_read+0xa8>
    b7d4:	08 23       	and	r16, r24
    b7d6:	19 23       	and	r17, r25
    b7d8:	01 15       	cp	r16, r1
    b7da:	11 05       	cpc	r17, r1
    b7dc:	91 f5       	brne	.+100    	; 0xb842 <f_read+0x122>
    b7de:	f7 01       	movw	r30, r14
    b7e0:	41 15       	cp	r20, r1
    b7e2:	51 05       	cpc	r21, r1
    b7e4:	61 05       	cpc	r22, r1
    b7e6:	71 05       	cpc	r23, r1
    b7e8:	29 f4       	brne	.+10     	; 0xb7f4 <f_read+0xd4>
    b7ea:	66 81       	ldd	r22, Z+6	; 0x06
    b7ec:	77 81       	ldd	r23, Z+7	; 0x07
    b7ee:	80 85       	ldd	r24, Z+8	; 0x08
    b7f0:	91 85       	ldd	r25, Z+9	; 0x09
    b7f2:	11 c0       	rjmp	.+34     	; 0xb816 <f_read+0xf6>
    b7f4:	82 a1       	ldd	r24, Z+34	; 0x22
    b7f6:	93 a1       	ldd	r25, Z+35	; 0x23
    b7f8:	89 2b       	or	r24, r25
    b7fa:	21 f0       	breq	.+8      	; 0xb804 <f_read+0xe4>
    b7fc:	c7 01       	movw	r24, r14
    b7fe:	0e 94 31 48 	call	0x9062	; 0x9062 <clmt_clust>
    b802:	09 c0       	rjmp	.+18     	; 0xb816 <f_read+0xf6>
    b804:	f7 01       	movw	r30, r14
    b806:	44 89       	ldd	r20, Z+20	; 0x14
    b808:	55 89       	ldd	r21, Z+21	; 0x15
    b80a:	66 89       	ldd	r22, Z+22	; 0x16
    b80c:	77 89       	ldd	r23, Z+23	; 0x17
    b80e:	80 81       	ld	r24, Z
    b810:	91 81       	ldd	r25, Z+1	; 0x01
    b812:	0e 94 66 4f 	call	0x9ecc	; 0x9ecc <get_fat.isra.9>
    b816:	62 30       	cpi	r22, 0x02	; 2
    b818:	71 05       	cpc	r23, r1
    b81a:	81 05       	cpc	r24, r1
    b81c:	91 05       	cpc	r25, r1
    b81e:	10 f4       	brcc	.+4      	; 0xb824 <f_read+0x104>
    b820:	82 e0       	ldi	r24, 0x02	; 2
    b822:	07 c0       	rjmp	.+14     	; 0xb832 <f_read+0x112>
    b824:	6f 3f       	cpi	r22, 0xFF	; 255
    b826:	ff ef       	ldi	r31, 0xFF	; 255
    b828:	7f 07       	cpc	r23, r31
    b82a:	8f 07       	cpc	r24, r31
    b82c:	9f 07       	cpc	r25, r31
    b82e:	21 f4       	brne	.+8      	; 0xb838 <f_read+0x118>
    b830:	81 e0       	ldi	r24, 0x01	; 1
    b832:	f7 01       	movw	r30, r14
    b834:	87 87       	std	Z+15, r24	; 0x0f
    b836:	ba c0       	rjmp	.+372    	; 0xb9ac <f_read+0x28c>
    b838:	f7 01       	movw	r30, r14
    b83a:	64 8b       	std	Z+20, r22	; 0x14
    b83c:	75 8b       	std	Z+21, r23	; 0x15
    b83e:	86 8b       	std	Z+22, r24	; 0x16
    b840:	97 8b       	std	Z+23, r25	; 0x17
    b842:	89 81       	ldd	r24, Y+1	; 0x01
    b844:	9a 81       	ldd	r25, Y+2	; 0x02
    b846:	9c 83       	std	Y+4, r25	; 0x04
    b848:	8b 83       	std	Y+3, r24	; 0x03
    b84a:	f7 01       	movw	r30, r14
    b84c:	44 89       	ldd	r20, Z+20	; 0x14
    b84e:	55 89       	ldd	r21, Z+21	; 0x15
    b850:	66 89       	ldd	r22, Z+22	; 0x16
    b852:	77 89       	ldd	r23, Z+23	; 0x17
    b854:	0e 94 09 48 	call	0x9012	; 0x9012 <clst2sect>
    b858:	61 15       	cp	r22, r1
    b85a:	71 05       	cpc	r23, r1
    b85c:	81 05       	cpc	r24, r1
    b85e:	91 05       	cpc	r25, r1
    b860:	f9 f2       	breq	.-66     	; 0xb820 <f_read+0x100>
    b862:	2b 01       	movw	r4, r22
    b864:	3c 01       	movw	r6, r24
    b866:	40 0e       	add	r4, r16
    b868:	51 1e       	adc	r5, r17
    b86a:	61 1c       	adc	r6, r1
    b86c:	71 1c       	adc	r7, r1
    b86e:	65 01       	movw	r12, r10
    b870:	cd 2c       	mov	r12, r13
    b872:	dd 24       	eor	r13, r13
    b874:	c6 94       	lsr	r12
    b876:	c1 14       	cp	r12, r1
    b878:	d1 04       	cpc	r13, r1
    b87a:	d1 f1       	breq	.+116    	; 0xb8f0 <f_read+0x1d0>
    b87c:	eb 81       	ldd	r30, Y+3	; 0x03
    b87e:	fc 81       	ldd	r31, Y+4	; 0x04
    b880:	81 85       	ldd	r24, Z+9	; 0x09
    b882:	92 85       	ldd	r25, Z+10	; 0x0a
    b884:	98 01       	movw	r18, r16
    b886:	2c 0d       	add	r18, r12
    b888:	3d 1d       	adc	r19, r13
    b88a:	82 17       	cp	r24, r18
    b88c:	93 07       	cpc	r25, r19
    b88e:	18 f4       	brcc	.+6      	; 0xb896 <f_read+0x176>
    b890:	6c 01       	movw	r12, r24
    b892:	c0 1a       	sub	r12, r16
    b894:	d1 0a       	sbc	r13, r17
    b896:	86 01       	movw	r16, r12
    b898:	a3 01       	movw	r20, r6
    b89a:	92 01       	movw	r18, r4
    b89c:	b4 01       	movw	r22, r8
    b89e:	eb 81       	ldd	r30, Y+3	; 0x03
    b8a0:	fc 81       	ldd	r31, Y+4	; 0x04
    b8a2:	81 81       	ldd	r24, Z+1	; 0x01
    b8a4:	0e 94 ca 69 	call	0xd394	; 0xd394 <disk_read>
    b8a8:	89 2b       	or	r24, r25
    b8aa:	11 f6       	brne	.-124    	; 0xb830 <f_read+0x110>
    b8ac:	f7 01       	movw	r30, r14
    b8ae:	86 85       	ldd	r24, Z+14	; 0x0e
    b8b0:	87 ff       	sbrs	r24, 7
    b8b2:	1a c0       	rjmp	.+52     	; 0xb8e8 <f_read+0x1c8>
    b8b4:	80 8d       	ldd	r24, Z+24	; 0x18
    b8b6:	91 8d       	ldd	r25, Z+25	; 0x19
    b8b8:	a2 8d       	ldd	r26, Z+26	; 0x1a
    b8ba:	b3 8d       	ldd	r27, Z+27	; 0x1b
    b8bc:	84 19       	sub	r24, r4
    b8be:	95 09       	sbc	r25, r5
    b8c0:	a6 09       	sbc	r26, r6
    b8c2:	b7 09       	sbc	r27, r7
    b8c4:	a6 01       	movw	r20, r12
    b8c6:	60 e0       	ldi	r22, 0x00	; 0
    b8c8:	70 e0       	ldi	r23, 0x00	; 0
    b8ca:	84 17       	cp	r24, r20
    b8cc:	95 07       	cpc	r25, r21
    b8ce:	a6 07       	cpc	r26, r22
    b8d0:	b7 07       	cpc	r27, r23
    b8d2:	50 f4       	brcc	.+20     	; 0xb8e8 <f_read+0x1c8>
    b8d4:	98 2f       	mov	r25, r24
    b8d6:	88 27       	eor	r24, r24
    b8d8:	99 0f       	add	r25, r25
    b8da:	40 e0       	ldi	r20, 0x00	; 0
    b8dc:	52 e0       	ldi	r21, 0x02	; 2
    b8de:	b1 01       	movw	r22, r2
    b8e0:	88 0d       	add	r24, r8
    b8e2:	99 1d       	adc	r25, r9
    b8e4:	0e 94 fe 49 	call	0x93fc	; 0x93fc <mem_cpy.part.0>
    b8e8:	dc 2c       	mov	r13, r12
    b8ea:	cc 24       	eor	r12, r12
    b8ec:	dd 0c       	add	r13, r13
    b8ee:	41 c0       	rjmp	.+130    	; 0xb972 <f_read+0x252>
    b8f0:	f7 01       	movw	r30, r14
    b8f2:	20 8d       	ldd	r18, Z+24	; 0x18
    b8f4:	31 8d       	ldd	r19, Z+25	; 0x19
    b8f6:	42 8d       	ldd	r20, Z+26	; 0x1a
    b8f8:	53 8d       	ldd	r21, Z+27	; 0x1b
    b8fa:	42 16       	cp	r4, r18
    b8fc:	53 06       	cpc	r5, r19
    b8fe:	64 06       	cpc	r6, r20
    b900:	75 06       	cpc	r7, r21
    b902:	f9 f0       	breq	.+62     	; 0xb942 <f_read+0x222>
    b904:	86 85       	ldd	r24, Z+14	; 0x0e
    b906:	87 ff       	sbrs	r24, 7
    b908:	0f c0       	rjmp	.+30     	; 0xb928 <f_read+0x208>
    b90a:	01 e0       	ldi	r16, 0x01	; 1
    b90c:	10 e0       	ldi	r17, 0x00	; 0
    b90e:	b1 01       	movw	r22, r2
    b910:	eb 81       	ldd	r30, Y+3	; 0x03
    b912:	fc 81       	ldd	r31, Y+4	; 0x04
    b914:	81 81       	ldd	r24, Z+1	; 0x01
    b916:	0e 94 da 69 	call	0xd3b4	; 0xd3b4 <disk_write>
    b91a:	89 2b       	or	r24, r25
    b91c:	09 f0       	breq	.+2      	; 0xb920 <f_read+0x200>
    b91e:	88 cf       	rjmp	.-240    	; 0xb830 <f_read+0x110>
    b920:	f7 01       	movw	r30, r14
    b922:	86 85       	ldd	r24, Z+14	; 0x0e
    b924:	8f 77       	andi	r24, 0x7F	; 127
    b926:	86 87       	std	Z+14, r24	; 0x0e
    b928:	e9 81       	ldd	r30, Y+1	; 0x01
    b92a:	fa 81       	ldd	r31, Y+2	; 0x02
    b92c:	01 e0       	ldi	r16, 0x01	; 1
    b92e:	10 e0       	ldi	r17, 0x00	; 0
    b930:	a3 01       	movw	r20, r6
    b932:	92 01       	movw	r18, r4
    b934:	b1 01       	movw	r22, r2
    b936:	81 81       	ldd	r24, Z+1	; 0x01
    b938:	0e 94 ca 69 	call	0xd394	; 0xd394 <disk_read>
    b93c:	89 2b       	or	r24, r25
    b93e:	09 f0       	breq	.+2      	; 0xb942 <f_read+0x222>
    b940:	77 cf       	rjmp	.-274    	; 0xb830 <f_read+0x110>
    b942:	f7 01       	movw	r30, r14
    b944:	40 8e       	std	Z+24, r4	; 0x18
    b946:	51 8e       	std	Z+25, r5	; 0x19
    b948:	62 8e       	std	Z+26, r6	; 0x1a
    b94a:	73 8e       	std	Z+27, r7	; 0x1b
    b94c:	f7 01       	movw	r30, r14
    b94e:	60 89       	ldd	r22, Z+16	; 0x10
    b950:	71 89       	ldd	r23, Z+17	; 0x11
    b952:	71 70       	andi	r23, 0x01	; 1
    b954:	80 e0       	ldi	r24, 0x00	; 0
    b956:	92 e0       	ldi	r25, 0x02	; 2
    b958:	86 1b       	sub	r24, r22
    b95a:	97 0b       	sbc	r25, r23
    b95c:	65 01       	movw	r12, r10
    b95e:	8a 15       	cp	r24, r10
    b960:	9b 05       	cpc	r25, r11
    b962:	08 f4       	brcc	.+2      	; 0xb966 <f_read+0x246>
    b964:	6c 01       	movw	r12, r24
    b966:	62 0d       	add	r22, r2
    b968:	73 1d       	adc	r23, r3
    b96a:	a6 01       	movw	r20, r12
    b96c:	c4 01       	movw	r24, r8
    b96e:	0e 94 fe 49 	call	0x93fc	; 0x93fc <mem_cpy.part.0>
    b972:	ac 18       	sub	r10, r12
    b974:	bd 08       	sbc	r11, r13
    b976:	ed 81       	ldd	r30, Y+5	; 0x05
    b978:	fe 81       	ldd	r31, Y+6	; 0x06
    b97a:	80 81       	ld	r24, Z
    b97c:	91 81       	ldd	r25, Z+1	; 0x01
    b97e:	8c 0d       	add	r24, r12
    b980:	9d 1d       	adc	r25, r13
    b982:	91 83       	std	Z+1, r25	; 0x01
    b984:	80 83       	st	Z, r24
    b986:	8c 0c       	add	r8, r12
    b988:	9d 1c       	adc	r9, r13
    b98a:	f7 01       	movw	r30, r14
    b98c:	80 89       	ldd	r24, Z+16	; 0x10
    b98e:	91 89       	ldd	r25, Z+17	; 0x11
    b990:	a2 89       	ldd	r26, Z+18	; 0x12
    b992:	b3 89       	ldd	r27, Z+19	; 0x13
    b994:	8c 0d       	add	r24, r12
    b996:	9d 1d       	adc	r25, r13
    b998:	a1 1d       	adc	r26, r1
    b99a:	b1 1d       	adc	r27, r1
    b99c:	80 8b       	std	Z+16, r24	; 0x10
    b99e:	91 8b       	std	Z+17, r25	; 0x11
    b9a0:	a2 8b       	std	Z+18, r26	; 0x12
    b9a2:	b3 8b       	std	Z+19, r27	; 0x13
    b9a4:	f5 ce       	rjmp	.-534    	; 0xb790 <f_read+0x70>
    b9a6:	80 e0       	ldi	r24, 0x00	; 0
    b9a8:	01 c0       	rjmp	.+2      	; 0xb9ac <f_read+0x28c>
    b9aa:	87 e0       	ldi	r24, 0x07	; 7
    b9ac:	90 e0       	ldi	r25, 0x00	; 0
    b9ae:	26 96       	adiw	r28, 0x06	; 6
    b9b0:	e2 e1       	ldi	r30, 0x12	; 18
    b9b2:	0c 94 1b e7 	jmp	0x1ce36	; 0x1ce36 <__epilogue_restores__>

0000b9b6 <f_write>:
    b9b6:	a8 e0       	ldi	r26, 0x08	; 8
    b9b8:	b0 e0       	ldi	r27, 0x00	; 0
    b9ba:	e1 ee       	ldi	r30, 0xE1	; 225
    b9bc:	fc e5       	ldi	r31, 0x5C	; 92
    b9be:	0c 94 ff e6 	jmp	0x1cdfe	; 0x1cdfe <__prologue_saves__>
    b9c2:	7c 01       	movw	r14, r24
    b9c4:	3b 01       	movw	r6, r22
    b9c6:	5a 01       	movw	r10, r20
    b9c8:	38 87       	std	Y+8, r19	; 0x08
    b9ca:	2f 83       	std	Y+7, r18	; 0x07
    b9cc:	f9 01       	movw	r30, r18
    b9ce:	11 82       	std	Z+1, r1	; 0x01
    b9d0:	10 82       	st	Z, r1
    b9d2:	be 01       	movw	r22, r28
    b9d4:	6f 5f       	subi	r22, 0xFF	; 255
    b9d6:	7f 4f       	sbci	r23, 0xFF	; 255
    b9d8:	0e 94 a8 48 	call	0x9150	; 0x9150 <validate>
    b9dc:	00 97       	sbiw	r24, 0x00	; 0
    b9de:	09 f0       	breq	.+2      	; 0xb9e2 <f_write+0x2c>
    b9e0:	7d c1       	rjmp	.+762    	; 0xbcdc <f_write+0x326>
    b9e2:	f7 01       	movw	r30, r14
    b9e4:	87 85       	ldd	r24, Z+15	; 0x0f
    b9e6:	90 e0       	ldi	r25, 0x00	; 0
    b9e8:	00 97       	sbiw	r24, 0x00	; 0
    b9ea:	09 f0       	breq	.+2      	; 0xb9ee <f_write+0x38>
    b9ec:	77 c1       	rjmp	.+750    	; 0xbcdc <f_write+0x326>
    b9ee:	86 85       	ldd	r24, Z+14	; 0x0e
    b9f0:	81 ff       	sbrs	r24, 1
    b9f2:	72 c1       	rjmp	.+740    	; 0xbcd8 <f_write+0x322>
    b9f4:	80 89       	ldd	r24, Z+16	; 0x10
    b9f6:	91 89       	ldd	r25, Z+17	; 0x11
    b9f8:	a2 89       	ldd	r26, Z+18	; 0x12
    b9fa:	b3 89       	ldd	r27, Z+19	; 0x13
    b9fc:	ac 01       	movw	r20, r24
    b9fe:	bd 01       	movw	r22, r26
    ba00:	4a 0d       	add	r20, r10
    ba02:	5b 1d       	adc	r21, r11
    ba04:	61 1d       	adc	r22, r1
    ba06:	71 1d       	adc	r23, r1
    ba08:	48 17       	cp	r20, r24
    ba0a:	59 07       	cpc	r21, r25
    ba0c:	6a 07       	cpc	r22, r26
    ba0e:	7b 07       	cpc	r23, r27
    ba10:	18 f4       	brcc	.+6      	; 0xba18 <f_write+0x62>
    ba12:	5c 01       	movw	r10, r24
    ba14:	a0 94       	com	r10
    ba16:	b0 94       	com	r11
    ba18:	97 01       	movw	r18, r14
    ba1a:	2c 5d       	subi	r18, 0xDC	; 220
    ba1c:	3f 4f       	sbci	r19, 0xFF	; 255
    ba1e:	3e 83       	std	Y+6, r19	; 0x06
    ba20:	2d 83       	std	Y+5, r18	; 0x05
    ba22:	a1 14       	cp	r10, r1
    ba24:	b1 04       	cpc	r11, r1
    ba26:	09 f4       	brne	.+2      	; 0xba2a <f_write+0x74>
    ba28:	4d c0       	rjmp	.+154    	; 0xbac4 <f_write+0x10e>
    ba2a:	f7 01       	movw	r30, r14
    ba2c:	40 89       	ldd	r20, Z+16	; 0x10
    ba2e:	51 89       	ldd	r21, Z+17	; 0x11
    ba30:	62 89       	ldd	r22, Z+18	; 0x12
    ba32:	73 89       	ldd	r23, Z+19	; 0x13
    ba34:	db 01       	movw	r26, r22
    ba36:	ca 01       	movw	r24, r20
    ba38:	91 70       	andi	r25, 0x01	; 1
    ba3a:	aa 27       	eor	r26, r26
    ba3c:	bb 27       	eor	r27, r27
    ba3e:	89 2b       	or	r24, r25
    ba40:	8a 2b       	or	r24, r26
    ba42:	8b 2b       	or	r24, r27
    ba44:	09 f0       	breq	.+2      	; 0xba48 <f_write+0x92>
    ba46:	05 c1       	rjmp	.+522    	; 0xbc52 <f_write+0x29c>
    ba48:	e9 81       	ldd	r30, Y+1	; 0x01
    ba4a:	fa 81       	ldd	r31, Y+2	; 0x02
    ba4c:	81 84       	ldd	r8, Z+9	; 0x09
    ba4e:	92 84       	ldd	r9, Z+10	; 0x0a
    ba50:	f1 e0       	ldi	r31, 0x01	; 1
    ba52:	8f 1a       	sub	r8, r31
    ba54:	91 08       	sbc	r9, r1
    ba56:	db 01       	movw	r26, r22
    ba58:	ca 01       	movw	r24, r20
    ba5a:	e9 e0       	ldi	r30, 0x09	; 9
    ba5c:	b6 95       	lsr	r27
    ba5e:	a7 95       	ror	r26
    ba60:	97 95       	ror	r25
    ba62:	87 95       	ror	r24
    ba64:	ea 95       	dec	r30
    ba66:	d1 f7       	brne	.-12     	; 0xba5c <f_write+0xa6>
    ba68:	88 22       	and	r8, r24
    ba6a:	99 22       	and	r9, r25
    ba6c:	81 14       	cp	r8, r1
    ba6e:	91 04       	cpc	r9, r1
    ba70:	09 f0       	breq	.+2      	; 0xba74 <f_write+0xbe>
    ba72:	51 c0       	rjmp	.+162    	; 0xbb16 <f_write+0x160>
    ba74:	f7 01       	movw	r30, r14
    ba76:	41 15       	cp	r20, r1
    ba78:	51 05       	cpc	r21, r1
    ba7a:	61 05       	cpc	r22, r1
    ba7c:	71 05       	cpc	r23, r1
    ba7e:	69 f4       	brne	.+26     	; 0xba9a <f_write+0xe4>
    ba80:	66 81       	ldd	r22, Z+6	; 0x06
    ba82:	77 81       	ldd	r23, Z+7	; 0x07
    ba84:	80 85       	ldd	r24, Z+8	; 0x08
    ba86:	91 85       	ldd	r25, Z+9	; 0x09
    ba88:	61 15       	cp	r22, r1
    ba8a:	71 05       	cpc	r23, r1
    ba8c:	81 05       	cpc	r24, r1
    ba8e:	91 05       	cpc	r25, r1
    ba90:	f9 f4       	brne	.+62     	; 0xbad0 <f_write+0x11a>
    ba92:	40 e0       	ldi	r20, 0x00	; 0
    ba94:	50 e0       	ldi	r21, 0x00	; 0
    ba96:	ba 01       	movw	r22, r20
    ba98:	0d c0       	rjmp	.+26     	; 0xbab4 <f_write+0xfe>
    ba9a:	82 a1       	ldd	r24, Z+34	; 0x22
    ba9c:	93 a1       	ldd	r25, Z+35	; 0x23
    ba9e:	89 2b       	or	r24, r25
    baa0:	21 f0       	breq	.+8      	; 0xbaaa <f_write+0xf4>
    baa2:	c7 01       	movw	r24, r14
    baa4:	0e 94 31 48 	call	0x9062	; 0x9062 <clmt_clust>
    baa8:	08 c0       	rjmp	.+16     	; 0xbaba <f_write+0x104>
    baaa:	f7 01       	movw	r30, r14
    baac:	44 89       	ldd	r20, Z+20	; 0x14
    baae:	55 89       	ldd	r21, Z+21	; 0x15
    bab0:	66 89       	ldd	r22, Z+22	; 0x16
    bab2:	77 89       	ldd	r23, Z+23	; 0x17
    bab4:	c7 01       	movw	r24, r14
    bab6:	0e 94 db 50 	call	0xa1b6	; 0xa1b6 <create_chain>
    baba:	61 15       	cp	r22, r1
    babc:	71 05       	cpc	r23, r1
    babe:	81 05       	cpc	r24, r1
    bac0:	91 05       	cpc	r25, r1
    bac2:	31 f4       	brne	.+12     	; 0xbad0 <f_write+0x11a>
    bac4:	f7 01       	movw	r30, r14
    bac6:	86 85       	ldd	r24, Z+14	; 0x0e
    bac8:	80 64       	ori	r24, 0x40	; 64
    baca:	86 87       	std	Z+14, r24	; 0x0e
    bacc:	80 e0       	ldi	r24, 0x00	; 0
    bace:	05 c1       	rjmp	.+522    	; 0xbcda <f_write+0x324>
    bad0:	61 30       	cpi	r22, 0x01	; 1
    bad2:	71 05       	cpc	r23, r1
    bad4:	81 05       	cpc	r24, r1
    bad6:	91 05       	cpc	r25, r1
    bad8:	11 f4       	brne	.+4      	; 0xbade <f_write+0x128>
    bada:	82 e0       	ldi	r24, 0x02	; 2
    badc:	07 c0       	rjmp	.+14     	; 0xbaec <f_write+0x136>
    bade:	6f 3f       	cpi	r22, 0xFF	; 255
    bae0:	ff ef       	ldi	r31, 0xFF	; 255
    bae2:	7f 07       	cpc	r23, r31
    bae4:	8f 07       	cpc	r24, r31
    bae6:	9f 07       	cpc	r25, r31
    bae8:	21 f4       	brne	.+8      	; 0xbaf2 <f_write+0x13c>
    baea:	81 e0       	ldi	r24, 0x01	; 1
    baec:	f7 01       	movw	r30, r14
    baee:	87 87       	std	Z+15, r24	; 0x0f
    baf0:	f4 c0       	rjmp	.+488    	; 0xbcda <f_write+0x324>
    baf2:	f7 01       	movw	r30, r14
    baf4:	64 8b       	std	Z+20, r22	; 0x14
    baf6:	75 8b       	std	Z+21, r23	; 0x15
    baf8:	86 8b       	std	Z+22, r24	; 0x16
    bafa:	97 8b       	std	Z+23, r25	; 0x17
    bafc:	06 81       	ldd	r16, Z+6	; 0x06
    bafe:	17 81       	ldd	r17, Z+7	; 0x07
    bb00:	20 85       	ldd	r18, Z+8	; 0x08
    bb02:	31 85       	ldd	r19, Z+9	; 0x09
    bb04:	01 15       	cp	r16, r1
    bb06:	11 05       	cpc	r17, r1
    bb08:	21 05       	cpc	r18, r1
    bb0a:	31 05       	cpc	r19, r1
    bb0c:	21 f4       	brne	.+8      	; 0xbb16 <f_write+0x160>
    bb0e:	66 83       	std	Z+6, r22	; 0x06
    bb10:	77 83       	std	Z+7, r23	; 0x07
    bb12:	80 87       	std	Z+8, r24	; 0x08
    bb14:	91 87       	std	Z+9, r25	; 0x09
    bb16:	f7 01       	movw	r30, r14
    bb18:	86 85       	ldd	r24, Z+14	; 0x0e
    bb1a:	87 ff       	sbrs	r24, 7
    bb1c:	13 c0       	rjmp	.+38     	; 0xbb44 <f_write+0x18e>
    bb1e:	20 8d       	ldd	r18, Z+24	; 0x18
    bb20:	31 8d       	ldd	r19, Z+25	; 0x19
    bb22:	42 8d       	ldd	r20, Z+26	; 0x1a
    bb24:	53 8d       	ldd	r21, Z+27	; 0x1b
    bb26:	e9 81       	ldd	r30, Y+1	; 0x01
    bb28:	fa 81       	ldd	r31, Y+2	; 0x02
    bb2a:	01 e0       	ldi	r16, 0x01	; 1
    bb2c:	10 e0       	ldi	r17, 0x00	; 0
    bb2e:	6d 81       	ldd	r22, Y+5	; 0x05
    bb30:	7e 81       	ldd	r23, Y+6	; 0x06
    bb32:	81 81       	ldd	r24, Z+1	; 0x01
    bb34:	0e 94 da 69 	call	0xd3b4	; 0xd3b4 <disk_write>
    bb38:	89 2b       	or	r24, r25
    bb3a:	b9 f6       	brne	.-82     	; 0xbaea <f_write+0x134>
    bb3c:	f7 01       	movw	r30, r14
    bb3e:	86 85       	ldd	r24, Z+14	; 0x0e
    bb40:	8f 77       	andi	r24, 0x7F	; 127
    bb42:	86 87       	std	Z+14, r24	; 0x0e
    bb44:	29 81       	ldd	r18, Y+1	; 0x01
    bb46:	3a 81       	ldd	r19, Y+2	; 0x02
    bb48:	3c 83       	std	Y+4, r19	; 0x04
    bb4a:	2b 83       	std	Y+3, r18	; 0x03
    bb4c:	f7 01       	movw	r30, r14
    bb4e:	44 89       	ldd	r20, Z+20	; 0x14
    bb50:	55 89       	ldd	r21, Z+21	; 0x15
    bb52:	66 89       	ldd	r22, Z+22	; 0x16
    bb54:	77 89       	ldd	r23, Z+23	; 0x17
    bb56:	c9 01       	movw	r24, r18
    bb58:	0e 94 09 48 	call	0x9012	; 0x9012 <clst2sect>
    bb5c:	61 15       	cp	r22, r1
    bb5e:	71 05       	cpc	r23, r1
    bb60:	81 05       	cpc	r24, r1
    bb62:	91 05       	cpc	r25, r1
    bb64:	09 f4       	brne	.+2      	; 0xbb68 <f_write+0x1b2>
    bb66:	b9 cf       	rjmp	.-142    	; 0xbada <f_write+0x124>
    bb68:	1b 01       	movw	r2, r22
    bb6a:	2c 01       	movw	r4, r24
    bb6c:	28 0c       	add	r2, r8
    bb6e:	39 1c       	adc	r3, r9
    bb70:	41 1c       	adc	r4, r1
    bb72:	51 1c       	adc	r5, r1
    bb74:	65 01       	movw	r12, r10
    bb76:	cd 2c       	mov	r12, r13
    bb78:	dd 24       	eor	r13, r13
    bb7a:	c6 94       	lsr	r12
    bb7c:	c1 14       	cp	r12, r1
    bb7e:	d1 04       	cpc	r13, r1
    bb80:	f1 f1       	breq	.+124    	; 0xbbfe <f_write+0x248>
    bb82:	eb 81       	ldd	r30, Y+3	; 0x03
    bb84:	fc 81       	ldd	r31, Y+4	; 0x04
    bb86:	81 85       	ldd	r24, Z+9	; 0x09
    bb88:	92 85       	ldd	r25, Z+10	; 0x0a
    bb8a:	94 01       	movw	r18, r8
    bb8c:	2c 0d       	add	r18, r12
    bb8e:	3d 1d       	adc	r19, r13
    bb90:	82 17       	cp	r24, r18
    bb92:	93 07       	cpc	r25, r19
    bb94:	18 f4       	brcc	.+6      	; 0xbb9c <f_write+0x1e6>
    bb96:	6c 01       	movw	r12, r24
    bb98:	c8 18       	sub	r12, r8
    bb9a:	d9 08       	sbc	r13, r9
    bb9c:	86 01       	movw	r16, r12
    bb9e:	a2 01       	movw	r20, r4
    bba0:	91 01       	movw	r18, r2
    bba2:	b3 01       	movw	r22, r6
    bba4:	eb 81       	ldd	r30, Y+3	; 0x03
    bba6:	fc 81       	ldd	r31, Y+4	; 0x04
    bba8:	81 81       	ldd	r24, Z+1	; 0x01
    bbaa:	0e 94 da 69 	call	0xd3b4	; 0xd3b4 <disk_write>
    bbae:	89 2b       	or	r24, r25
    bbb0:	09 f0       	breq	.+2      	; 0xbbb4 <f_write+0x1fe>
    bbb2:	9b cf       	rjmp	.-202    	; 0xbaea <f_write+0x134>
    bbb4:	f7 01       	movw	r30, r14
    bbb6:	80 8d       	ldd	r24, Z+24	; 0x18
    bbb8:	91 8d       	ldd	r25, Z+25	; 0x19
    bbba:	a2 8d       	ldd	r26, Z+26	; 0x1a
    bbbc:	b3 8d       	ldd	r27, Z+27	; 0x1b
    bbbe:	82 19       	sub	r24, r2
    bbc0:	93 09       	sbc	r25, r3
    bbc2:	a4 09       	sbc	r26, r4
    bbc4:	b5 09       	sbc	r27, r5
    bbc6:	a6 01       	movw	r20, r12
    bbc8:	60 e0       	ldi	r22, 0x00	; 0
    bbca:	70 e0       	ldi	r23, 0x00	; 0
    bbcc:	84 17       	cp	r24, r20
    bbce:	95 07       	cpc	r25, r21
    bbd0:	a6 07       	cpc	r26, r22
    bbd2:	b7 07       	cpc	r27, r23
    bbd4:	80 f4       	brcc	.+32     	; 0xbbf6 <f_write+0x240>
    bbd6:	98 2f       	mov	r25, r24
    bbd8:	88 27       	eor	r24, r24
    bbda:	99 0f       	add	r25, r25
    bbdc:	b3 01       	movw	r22, r6
    bbde:	68 0f       	add	r22, r24
    bbe0:	79 1f       	adc	r23, r25
    bbe2:	40 e0       	ldi	r20, 0x00	; 0
    bbe4:	52 e0       	ldi	r21, 0x02	; 2
    bbe6:	8d 81       	ldd	r24, Y+5	; 0x05
    bbe8:	9e 81       	ldd	r25, Y+6	; 0x06
    bbea:	0e 94 fe 49 	call	0x93fc	; 0x93fc <mem_cpy.part.0>
    bbee:	f7 01       	movw	r30, r14
    bbf0:	86 85       	ldd	r24, Z+14	; 0x0e
    bbf2:	8f 77       	andi	r24, 0x7F	; 127
    bbf4:	86 87       	std	Z+14, r24	; 0x0e
    bbf6:	dc 2c       	mov	r13, r12
    bbf8:	cc 24       	eor	r12, r12
    bbfa:	dd 0c       	add	r13, r13
    bbfc:	43 c0       	rjmp	.+134    	; 0xbc84 <f_write+0x2ce>
    bbfe:	f7 01       	movw	r30, r14
    bc00:	80 8d       	ldd	r24, Z+24	; 0x18
    bc02:	91 8d       	ldd	r25, Z+25	; 0x19
    bc04:	a2 8d       	ldd	r26, Z+26	; 0x1a
    bc06:	b3 8d       	ldd	r27, Z+27	; 0x1b
    bc08:	28 16       	cp	r2, r24
    bc0a:	39 06       	cpc	r3, r25
    bc0c:	4a 06       	cpc	r4, r26
    bc0e:	5b 06       	cpc	r5, r27
    bc10:	d9 f0       	breq	.+54     	; 0xbc48 <f_write+0x292>
    bc12:	40 89       	ldd	r20, Z+16	; 0x10
    bc14:	51 89       	ldd	r21, Z+17	; 0x11
    bc16:	62 89       	ldd	r22, Z+18	; 0x12
    bc18:	73 89       	ldd	r23, Z+19	; 0x13
    bc1a:	82 85       	ldd	r24, Z+10	; 0x0a
    bc1c:	93 85       	ldd	r25, Z+11	; 0x0b
    bc1e:	a4 85       	ldd	r26, Z+12	; 0x0c
    bc20:	b5 85       	ldd	r27, Z+13	; 0x0d
    bc22:	48 17       	cp	r20, r24
    bc24:	59 07       	cpc	r21, r25
    bc26:	6a 07       	cpc	r22, r26
    bc28:	7b 07       	cpc	r23, r27
    bc2a:	70 f4       	brcc	.+28     	; 0xbc48 <f_write+0x292>
    bc2c:	01 e0       	ldi	r16, 0x01	; 1
    bc2e:	10 e0       	ldi	r17, 0x00	; 0
    bc30:	a2 01       	movw	r20, r4
    bc32:	91 01       	movw	r18, r2
    bc34:	6d 81       	ldd	r22, Y+5	; 0x05
    bc36:	7e 81       	ldd	r23, Y+6	; 0x06
    bc38:	eb 81       	ldd	r30, Y+3	; 0x03
    bc3a:	fc 81       	ldd	r31, Y+4	; 0x04
    bc3c:	81 81       	ldd	r24, Z+1	; 0x01
    bc3e:	0e 94 ca 69 	call	0xd394	; 0xd394 <disk_read>
    bc42:	89 2b       	or	r24, r25
    bc44:	09 f0       	breq	.+2      	; 0xbc48 <f_write+0x292>
    bc46:	51 cf       	rjmp	.-350    	; 0xbaea <f_write+0x134>
    bc48:	f7 01       	movw	r30, r14
    bc4a:	20 8e       	std	Z+24, r2	; 0x18
    bc4c:	31 8e       	std	Z+25, r3	; 0x19
    bc4e:	42 8e       	std	Z+26, r4	; 0x1a
    bc50:	53 8e       	std	Z+27, r5	; 0x1b
    bc52:	f7 01       	movw	r30, r14
    bc54:	80 89       	ldd	r24, Z+16	; 0x10
    bc56:	91 89       	ldd	r25, Z+17	; 0x11
    bc58:	91 70       	andi	r25, 0x01	; 1
    bc5a:	20 e0       	ldi	r18, 0x00	; 0
    bc5c:	32 e0       	ldi	r19, 0x02	; 2
    bc5e:	28 1b       	sub	r18, r24
    bc60:	39 0b       	sbc	r19, r25
    bc62:	65 01       	movw	r12, r10
    bc64:	2a 15       	cp	r18, r10
    bc66:	3b 05       	cpc	r19, r11
    bc68:	08 f4       	brcc	.+2      	; 0xbc6c <f_write+0x2b6>
    bc6a:	69 01       	movw	r12, r18
    bc6c:	a6 01       	movw	r20, r12
    bc6e:	b3 01       	movw	r22, r6
    bc70:	2d 81       	ldd	r18, Y+5	; 0x05
    bc72:	3e 81       	ldd	r19, Y+6	; 0x06
    bc74:	82 0f       	add	r24, r18
    bc76:	93 1f       	adc	r25, r19
    bc78:	0e 94 fe 49 	call	0x93fc	; 0x93fc <mem_cpy.part.0>
    bc7c:	f7 01       	movw	r30, r14
    bc7e:	86 85       	ldd	r24, Z+14	; 0x0e
    bc80:	80 68       	ori	r24, 0x80	; 128
    bc82:	86 87       	std	Z+14, r24	; 0x0e
    bc84:	ac 18       	sub	r10, r12
    bc86:	bd 08       	sbc	r11, r13
    bc88:	ef 81       	ldd	r30, Y+7	; 0x07
    bc8a:	f8 85       	ldd	r31, Y+8	; 0x08
    bc8c:	80 81       	ld	r24, Z
    bc8e:	91 81       	ldd	r25, Z+1	; 0x01
    bc90:	8c 0d       	add	r24, r12
    bc92:	9d 1d       	adc	r25, r13
    bc94:	91 83       	std	Z+1, r25	; 0x01
    bc96:	80 83       	st	Z, r24
    bc98:	6c 0c       	add	r6, r12
    bc9a:	7d 1c       	adc	r7, r13
    bc9c:	f7 01       	movw	r30, r14
    bc9e:	80 89       	ldd	r24, Z+16	; 0x10
    bca0:	91 89       	ldd	r25, Z+17	; 0x11
    bca2:	a2 89       	ldd	r26, Z+18	; 0x12
    bca4:	b3 89       	ldd	r27, Z+19	; 0x13
    bca6:	8c 0d       	add	r24, r12
    bca8:	9d 1d       	adc	r25, r13
    bcaa:	a1 1d       	adc	r26, r1
    bcac:	b1 1d       	adc	r27, r1
    bcae:	80 8b       	std	Z+16, r24	; 0x10
    bcb0:	91 8b       	std	Z+17, r25	; 0x11
    bcb2:	a2 8b       	std	Z+18, r26	; 0x12
    bcb4:	b3 8b       	std	Z+19, r27	; 0x13
    bcb6:	42 85       	ldd	r20, Z+10	; 0x0a
    bcb8:	53 85       	ldd	r21, Z+11	; 0x0b
    bcba:	64 85       	ldd	r22, Z+12	; 0x0c
    bcbc:	75 85       	ldd	r23, Z+13	; 0x0d
    bcbe:	48 17       	cp	r20, r24
    bcc0:	59 07       	cpc	r21, r25
    bcc2:	6a 07       	cpc	r22, r26
    bcc4:	7b 07       	cpc	r23, r27
    bcc6:	10 f4       	brcc	.+4      	; 0xbccc <f_write+0x316>
    bcc8:	ac 01       	movw	r20, r24
    bcca:	bd 01       	movw	r22, r26
    bccc:	f7 01       	movw	r30, r14
    bcce:	42 87       	std	Z+10, r20	; 0x0a
    bcd0:	53 87       	std	Z+11, r21	; 0x0b
    bcd2:	64 87       	std	Z+12, r22	; 0x0c
    bcd4:	75 87       	std	Z+13, r23	; 0x0d
    bcd6:	a5 ce       	rjmp	.-694    	; 0xba22 <f_write+0x6c>
    bcd8:	87 e0       	ldi	r24, 0x07	; 7
    bcda:	90 e0       	ldi	r25, 0x00	; 0
    bcdc:	28 96       	adiw	r28, 0x08	; 8
    bcde:	e2 e1       	ldi	r30, 0x12	; 18
    bce0:	0c 94 1b e7 	jmp	0x1ce36	; 0x1ce36 <__epilogue_restores__>

0000bce4 <f_sync>:
    bce4:	8f 92       	push	r8
    bce6:	9f 92       	push	r9
    bce8:	af 92       	push	r10
    bcea:	bf 92       	push	r11
    bcec:	ef 92       	push	r14
    bcee:	ff 92       	push	r15
    bcf0:	0f 93       	push	r16
    bcf2:	1f 93       	push	r17
    bcf4:	cf 93       	push	r28
    bcf6:	df 93       	push	r29
    bcf8:	00 d0       	rcall	.+0      	; 0xbcfa <f_sync+0x16>
    bcfa:	cd b7       	in	r28, 0x3d	; 61
    bcfc:	de b7       	in	r29, 0x3e	; 62
    bcfe:	7c 01       	movw	r14, r24
    bd00:	be 01       	movw	r22, r28
    bd02:	6f 5f       	subi	r22, 0xFF	; 255
    bd04:	7f 4f       	sbci	r23, 0xFF	; 255
    bd06:	0e 94 a8 48 	call	0x9150	; 0x9150 <validate>
    bd0a:	00 97       	sbiw	r24, 0x00	; 0
    bd0c:	09 f0       	breq	.+2      	; 0xbd10 <f_sync+0x2c>
    bd0e:	5d c0       	rjmp	.+186    	; 0xbdca <f_sync+0xe6>
    bd10:	f7 01       	movw	r30, r14
    bd12:	86 85       	ldd	r24, Z+14	; 0x0e
    bd14:	86 ff       	sbrs	r24, 6
    bd16:	55 c0       	rjmp	.+170    	; 0xbdc2 <f_sync+0xde>
    bd18:	87 ff       	sbrs	r24, 7
    bd1a:	15 c0       	rjmp	.+42     	; 0xbd46 <f_sync+0x62>
    bd1c:	20 8d       	ldd	r18, Z+24	; 0x18
    bd1e:	31 8d       	ldd	r19, Z+25	; 0x19
    bd20:	42 8d       	ldd	r20, Z+26	; 0x1a
    bd22:	53 8d       	ldd	r21, Z+27	; 0x1b
    bd24:	e9 81       	ldd	r30, Y+1	; 0x01
    bd26:	fa 81       	ldd	r31, Y+2	; 0x02
    bd28:	01 e0       	ldi	r16, 0x01	; 1
    bd2a:	10 e0       	ldi	r17, 0x00	; 0
    bd2c:	b7 01       	movw	r22, r14
    bd2e:	6c 5d       	subi	r22, 0xDC	; 220
    bd30:	7f 4f       	sbci	r23, 0xFF	; 255
    bd32:	81 81       	ldd	r24, Z+1	; 0x01
    bd34:	0e 94 da 69 	call	0xd3b4	; 0xd3b4 <disk_write>
    bd38:	89 2b       	or	r24, r25
    bd3a:	09 f0       	breq	.+2      	; 0xbd3e <f_sync+0x5a>
    bd3c:	44 c0       	rjmp	.+136    	; 0xbdc6 <f_sync+0xe2>
    bd3e:	f7 01       	movw	r30, r14
    bd40:	86 85       	ldd	r24, Z+14	; 0x0e
    bd42:	8f 77       	andi	r24, 0x7F	; 127
    bd44:	86 87       	std	Z+14, r24	; 0x0e
    bd46:	0e 94 8f 70 	call	0xe11e	; 0xe11e <get_fattime>
    bd4a:	4b 01       	movw	r8, r22
    bd4c:	5c 01       	movw	r10, r24
    bd4e:	f7 01       	movw	r30, r14
    bd50:	44 8d       	ldd	r20, Z+28	; 0x1c
    bd52:	55 8d       	ldd	r21, Z+29	; 0x1d
    bd54:	66 8d       	ldd	r22, Z+30	; 0x1e
    bd56:	77 8d       	ldd	r23, Z+31	; 0x1f
    bd58:	89 81       	ldd	r24, Y+1	; 0x01
    bd5a:	9a 81       	ldd	r25, Y+2	; 0x02
    bd5c:	0e 94 98 4b 	call	0x9730	; 0x9730 <move_window>
    bd60:	00 97       	sbiw	r24, 0x00	; 0
    bd62:	99 f5       	brne	.+102    	; 0xbdca <f_sync+0xe6>
    bd64:	f7 01       	movw	r30, r14
    bd66:	00 a1       	ldd	r16, Z+32	; 0x20
    bd68:	11 a1       	ldd	r17, Z+33	; 0x21
    bd6a:	f8 01       	movw	r30, r16
    bd6c:	83 85       	ldd	r24, Z+11	; 0x0b
    bd6e:	80 62       	ori	r24, 0x20	; 32
    bd70:	83 87       	std	Z+11, r24	; 0x0b
    bd72:	f7 01       	movw	r30, r14
    bd74:	26 81       	ldd	r18, Z+6	; 0x06
    bd76:	37 81       	ldd	r19, Z+7	; 0x07
    bd78:	40 85       	ldd	r20, Z+8	; 0x08
    bd7a:	51 85       	ldd	r21, Z+9	; 0x09
    bd7c:	b8 01       	movw	r22, r16
    bd7e:	80 81       	ld	r24, Z
    bd80:	91 81       	ldd	r25, Z+1	; 0x01
    bd82:	0e 94 1e 4a 	call	0x943c	; 0x943c <st_clust.isra.4>
    bd86:	f7 01       	movw	r30, r14
    bd88:	42 85       	ldd	r20, Z+10	; 0x0a
    bd8a:	53 85       	ldd	r21, Z+11	; 0x0b
    bd8c:	64 85       	ldd	r22, Z+12	; 0x0c
    bd8e:	75 85       	ldd	r23, Z+13	; 0x0d
    bd90:	c8 01       	movw	r24, r16
    bd92:	4c 96       	adiw	r24, 0x1c	; 28
    bd94:	0e 94 eb 47 	call	0x8fd6	; 0x8fd6 <st_dword>
    bd98:	b5 01       	movw	r22, r10
    bd9a:	a4 01       	movw	r20, r8
    bd9c:	c8 01       	movw	r24, r16
    bd9e:	46 96       	adiw	r24, 0x16	; 22
    bda0:	0e 94 eb 47 	call	0x8fd6	; 0x8fd6 <st_dword>
    bda4:	f8 01       	movw	r30, r16
    bda6:	12 8a       	std	Z+18, r1	; 0x12
    bda8:	13 8a       	std	Z+19, r1	; 0x13
    bdaa:	89 81       	ldd	r24, Y+1	; 0x01
    bdac:	9a 81       	ldd	r25, Y+2	; 0x02
    bdae:	21 e0       	ldi	r18, 0x01	; 1
    bdb0:	fc 01       	movw	r30, r24
    bdb2:	23 83       	std	Z+3, r18	; 0x03
    bdb4:	0e 94 7e 4a 	call	0x94fc	; 0x94fc <sync_fs>
    bdb8:	f7 01       	movw	r30, r14
    bdba:	26 85       	ldd	r18, Z+14	; 0x0e
    bdbc:	2f 7b       	andi	r18, 0xBF	; 191
    bdbe:	26 87       	std	Z+14, r18	; 0x0e
    bdc0:	04 c0       	rjmp	.+8      	; 0xbdca <f_sync+0xe6>
    bdc2:	80 e0       	ldi	r24, 0x00	; 0
    bdc4:	01 c0       	rjmp	.+2      	; 0xbdc8 <f_sync+0xe4>
    bdc6:	81 e0       	ldi	r24, 0x01	; 1
    bdc8:	90 e0       	ldi	r25, 0x00	; 0
    bdca:	0f 90       	pop	r0
    bdcc:	0f 90       	pop	r0
    bdce:	df 91       	pop	r29
    bdd0:	cf 91       	pop	r28
    bdd2:	1f 91       	pop	r17
    bdd4:	0f 91       	pop	r16
    bdd6:	ff 90       	pop	r15
    bdd8:	ef 90       	pop	r14
    bdda:	bf 90       	pop	r11
    bddc:	af 90       	pop	r10
    bdde:	9f 90       	pop	r9
    bde0:	8f 90       	pop	r8
    bde2:	08 95       	ret

0000bde4 <f_close>:
    bde4:	a2 e0       	ldi	r26, 0x02	; 2
    bde6:	b0 e0       	ldi	r27, 0x00	; 0
    bde8:	e8 ef       	ldi	r30, 0xF8	; 248
    bdea:	fe e5       	ldi	r31, 0x5E	; 94
    bdec:	0c 94 0d e7 	jmp	0x1ce1a	; 0x1ce1a <__prologue_saves__+0x1c>
    bdf0:	8c 01       	movw	r16, r24
    bdf2:	78 df       	rcall	.-272    	; 0xbce4 <f_sync>
    bdf4:	00 97       	sbiw	r24, 0x00	; 0
    bdf6:	59 f4       	brne	.+22     	; 0xbe0e <f_close+0x2a>
    bdf8:	be 01       	movw	r22, r28
    bdfa:	6f 5f       	subi	r22, 0xFF	; 255
    bdfc:	7f 4f       	sbci	r23, 0xFF	; 255
    bdfe:	c8 01       	movw	r24, r16
    be00:	0e 94 a8 48 	call	0x9150	; 0x9150 <validate>
    be04:	00 97       	sbiw	r24, 0x00	; 0
    be06:	19 f4       	brne	.+6      	; 0xbe0e <f_close+0x2a>
    be08:	f8 01       	movw	r30, r16
    be0a:	11 82       	std	Z+1, r1	; 0x01
    be0c:	10 82       	st	Z, r1
    be0e:	22 96       	adiw	r28, 0x02	; 2
    be10:	e4 e0       	ldi	r30, 0x04	; 4
    be12:	0c 94 29 e7 	jmp	0x1ce52	; 0x1ce52 <__epilogue_restores__+0x1c>

0000be16 <f_chdir>:
    be16:	a2 e3       	ldi	r26, 0x32	; 50
    be18:	b0 e0       	ldi	r27, 0x00	; 0
    be1a:	e1 e1       	ldi	r30, 0x11	; 17
    be1c:	ff e5       	ldi	r31, 0x5F	; 95
    be1e:	0c 94 09 e7 	jmp	0x1ce12	; 0x1ce12 <__prologue_saves__+0x14>
    be22:	9a ab       	std	Y+50, r25	; 0x32
    be24:	89 ab       	std	Y+49, r24	; 0x31
    be26:	40 e0       	ldi	r20, 0x00	; 0
    be28:	be 01       	movw	r22, r28
    be2a:	61 5d       	subi	r22, 0xD1	; 209
    be2c:	7f 4f       	sbci	r23, 0xFF	; 255
    be2e:	ce 01       	movw	r24, r28
    be30:	c1 96       	adiw	r24, 0x31	; 49
    be32:	0e 94 13 4c 	call	0x9826	; 0x9826 <mount_volume>
    be36:	00 97       	sbiw	r24, 0x00	; 0
    be38:	09 f0       	breq	.+2      	; 0xbe3c <f_chdir+0x26>
    be3a:	44 c0       	rjmp	.+136    	; 0xbec4 <f_chdir+0xae>
    be3c:	8f a5       	ldd	r24, Y+47	; 0x2f
    be3e:	98 a9       	ldd	r25, Y+48	; 0x30
    be40:	9a 83       	std	Y+2, r25	; 0x02
    be42:	89 83       	std	Y+1, r24	; 0x01
    be44:	80 e0       	ldi	r24, 0x00	; 0
    be46:	92 e0       	ldi	r25, 0x02	; 2
    be48:	0e 94 0e 69 	call	0xd21c	; 0xd21c <ff_memalloc>
    be4c:	7c 01       	movw	r14, r24
    be4e:	00 97       	sbiw	r24, 0x00	; 0
    be50:	a9 f1       	breq	.+106    	; 0xbebc <f_chdir+0xa6>
    be52:	ef a5       	ldd	r30, Y+47	; 0x2f
    be54:	f8 a9       	ldd	r31, Y+48	; 0x30
    be56:	94 87       	std	Z+12, r25	; 0x0c
    be58:	83 87       	std	Z+11, r24	; 0x0b
    be5a:	69 a9       	ldd	r22, Y+49	; 0x31
    be5c:	7a a9       	ldd	r23, Y+50	; 0x32
    be5e:	ce 01       	movw	r24, r28
    be60:	01 96       	adiw	r24, 0x01	; 1
    be62:	2e d8       	rcall	.-4004   	; 0xaec0 <follow_path>
    be64:	8c 01       	movw	r16, r24
    be66:	89 2b       	or	r24, r25
    be68:	09 f5       	brne	.+66     	; 0xbeac <f_chdir+0x96>
    be6a:	88 a5       	ldd	r24, Y+40	; 0x28
    be6c:	87 ff       	sbrs	r24, 7
    be6e:	0b c0       	rjmp	.+22     	; 0xbe86 <f_chdir+0x70>
    be70:	ef a5       	ldd	r30, Y+47	; 0x2f
    be72:	f8 a9       	ldd	r31, Y+48	; 0x30
    be74:	8f 81       	ldd	r24, Y+7	; 0x07
    be76:	98 85       	ldd	r25, Y+8	; 0x08
    be78:	a9 85       	ldd	r26, Y+9	; 0x09
    be7a:	ba 85       	ldd	r27, Y+10	; 0x0a
    be7c:	85 8b       	std	Z+21, r24	; 0x15
    be7e:	96 8b       	std	Z+22, r25	; 0x16
    be80:	a7 8b       	std	Z+23, r26	; 0x17
    be82:	b0 8f       	std	Z+24, r27	; 0x18
    be84:	13 c0       	rjmp	.+38     	; 0xbeac <f_chdir+0x96>
    be86:	8d 81       	ldd	r24, Y+5	; 0x05
    be88:	84 ff       	sbrs	r24, 4
    be8a:	0e c0       	rjmp	.+28     	; 0xbea8 <f_chdir+0x92>
    be8c:	cf a4       	ldd	r12, Y+47	; 0x2f
    be8e:	d8 a8       	ldd	r13, Y+48	; 0x30
    be90:	6b 8d       	ldd	r22, Y+27	; 0x1b
    be92:	7c 8d       	ldd	r23, Y+28	; 0x1c
    be94:	f6 01       	movw	r30, r12
    be96:	80 81       	ld	r24, Z
    be98:	0e 94 09 4a 	call	0x9412	; 0x9412 <ld_clust.isra.3>
    be9c:	f6 01       	movw	r30, r12
    be9e:	65 8b       	std	Z+21, r22	; 0x15
    bea0:	76 8b       	std	Z+22, r23	; 0x16
    bea2:	87 8b       	std	Z+23, r24	; 0x17
    bea4:	90 8f       	std	Z+24, r25	; 0x18
    bea6:	02 c0       	rjmp	.+4      	; 0xbeac <f_chdir+0x96>
    bea8:	05 e0       	ldi	r16, 0x05	; 5
    beaa:	10 e0       	ldi	r17, 0x00	; 0
    beac:	c7 01       	movw	r24, r14
    beae:	0e 94 11 69 	call	0xd222	; 0xd222 <ff_memfree>
    beb2:	04 30       	cpi	r16, 0x04	; 4
    beb4:	11 05       	cpc	r17, r1
    beb6:	29 f4       	brne	.+10     	; 0xbec2 <f_chdir+0xac>
    beb8:	85 e0       	ldi	r24, 0x05	; 5
    beba:	01 c0       	rjmp	.+2      	; 0xbebe <f_chdir+0xa8>
    bebc:	81 e1       	ldi	r24, 0x11	; 17
    bebe:	90 e0       	ldi	r25, 0x00	; 0
    bec0:	01 c0       	rjmp	.+2      	; 0xbec4 <f_chdir+0xae>
    bec2:	c8 01       	movw	r24, r16
    bec4:	e2 96       	adiw	r28, 0x32	; 50
    bec6:	e8 e0       	ldi	r30, 0x08	; 8
    bec8:	0c 94 25 e7 	jmp	0x1ce4a	; 0x1ce4a <__epilogue_restores__+0x14>

0000becc <f_getcwd>:
    becc:	a8 e4       	ldi	r26, 0x48	; 72
    bece:	b1 e0       	ldi	r27, 0x01	; 1
    bed0:	ec e6       	ldi	r30, 0x6C	; 108
    bed2:	ff e5       	ldi	r31, 0x5F	; 95
    bed4:	0c 94 ff e6 	jmp	0x1cdfe	; 0x1cdfe <__prologue_saves__>
    bed8:	c9 5b       	subi	r28, 0xB9	; 185
    beda:	de 4f       	sbci	r29, 0xFE	; 254
    bedc:	99 83       	std	Y+1, r25	; 0x01
    bede:	88 83       	st	Y, r24
    bee0:	c7 54       	subi	r28, 0x47	; 71
    bee2:	d1 40       	sbci	r29, 0x01	; 1
    bee4:	4b 01       	movw	r8, r22
    bee6:	7c 01       	movw	r14, r24
    bee8:	fc 01       	movw	r30, r24
    beea:	10 82       	st	Z, r1
    beec:	40 e0       	ldi	r20, 0x00	; 0
    beee:	be 01       	movw	r22, r28
    bef0:	6b 5b       	subi	r22, 0xBB	; 187
    bef2:	7e 4f       	sbci	r23, 0xFE	; 254
    bef4:	ce 01       	movw	r24, r28
    bef6:	89 5b       	subi	r24, 0xB9	; 185
    bef8:	9e 4f       	sbci	r25, 0xFE	; 254
    befa:	0e 94 13 4c 	call	0x9826	; 0x9826 <mount_volume>
    befe:	1c 01       	movw	r2, r24
    bf00:	89 2b       	or	r24, r25
    bf02:	09 f0       	breq	.+2      	; 0xbf06 <f_getcwd+0x3a>
    bf04:	03 c1       	rjmp	.+518    	; 0xc10c <f_getcwd+0x240>
    bf06:	cb 5b       	subi	r28, 0xBB	; 187
    bf08:	de 4f       	sbci	r29, 0xFE	; 254
    bf0a:	88 81       	ld	r24, Y
    bf0c:	99 81       	ldd	r25, Y+1	; 0x01
    bf0e:	c5 54       	subi	r28, 0x45	; 69
    bf10:	d1 40       	sbci	r29, 0x01	; 1
    bf12:	c9 5e       	subi	r28, 0xE9	; 233
    bf14:	de 4f       	sbci	r29, 0xFE	; 254
    bf16:	99 83       	std	Y+1, r25	; 0x01
    bf18:	88 83       	st	Y, r24
    bf1a:	c7 51       	subi	r28, 0x17	; 23
    bf1c:	d1 40       	sbci	r29, 0x01	; 1
    bf1e:	80 e0       	ldi	r24, 0x00	; 0
    bf20:	92 e0       	ldi	r25, 0x02	; 2
    bf22:	0e 94 0e 69 	call	0xd21c	; 0xd21c <ff_memalloc>
    bf26:	5c 01       	movw	r10, r24
    bf28:	00 97       	sbiw	r24, 0x00	; 0
    bf2a:	09 f4       	brne	.+2      	; 0xbf2e <f_getcwd+0x62>
    bf2c:	f3 c0       	rjmp	.+486    	; 0xc114 <f_getcwd+0x248>
    bf2e:	cb 5b       	subi	r28, 0xBB	; 187
    bf30:	de 4f       	sbci	r29, 0xFE	; 254
    bf32:	e8 81       	ld	r30, Y
    bf34:	f9 81       	ldd	r31, Y+1	; 0x01
    bf36:	c5 54       	subi	r28, 0x45	; 69
    bf38:	d1 40       	sbci	r29, 0x01	; 1
    bf3a:	94 87       	std	Z+12, r25	; 0x0c
    bf3c:	83 87       	std	Z+11, r24	; 0x0b
    bf3e:	85 89       	ldd	r24, Z+21	; 0x15
    bf40:	96 89       	ldd	r25, Z+22	; 0x16
    bf42:	a7 89       	ldd	r26, Z+23	; 0x17
    bf44:	b0 8d       	ldd	r27, Z+24	; 0x18
    bf46:	c3 5e       	subi	r28, 0xE3	; 227
    bf48:	de 4f       	sbci	r29, 0xFE	; 254
    bf4a:	88 83       	st	Y, r24
    bf4c:	99 83       	std	Y+1, r25	; 0x01
    bf4e:	aa 83       	std	Y+2, r26	; 0x02
    bf50:	bb 83       	std	Y+3, r27	; 0x03
    bf52:	cd 51       	subi	r28, 0x1D	; 29
    bf54:	d1 40       	sbci	r29, 0x01	; 1
    bf56:	84 01       	movw	r16, r8
    bf58:	ce 01       	movw	r24, r28
    bf5a:	01 96       	adiw	r24, 0x01	; 1
    bf5c:	6c 01       	movw	r12, r24
    bf5e:	c3 5e       	subi	r28, 0xE3	; 227
    bf60:	de 4f       	sbci	r29, 0xFE	; 254
    bf62:	48 80       	ld	r4, Y
    bf64:	59 80       	ldd	r5, Y+1	; 0x01
    bf66:	6a 80       	ldd	r6, Y+2	; 0x02
    bf68:	7b 80       	ldd	r7, Y+3	; 0x03
    bf6a:	cd 51       	subi	r28, 0x1D	; 29
    bf6c:	d1 40       	sbci	r29, 0x01	; 1
    bf6e:	41 14       	cp	r4, r1
    bf70:	51 04       	cpc	r5, r1
    bf72:	61 04       	cpc	r6, r1
    bf74:	71 04       	cpc	r7, r1
    bf76:	09 f4       	brne	.+2      	; 0xbf7a <f_getcwd+0xae>
    bf78:	a3 c0       	rjmp	.+326    	; 0xc0c0 <f_getcwd+0x1f4>
    bf7a:	40 e2       	ldi	r20, 0x20	; 32
    bf7c:	50 e0       	ldi	r21, 0x00	; 0
    bf7e:	60 e0       	ldi	r22, 0x00	; 0
    bf80:	70 e0       	ldi	r23, 0x00	; 0
    bf82:	ce 01       	movw	r24, r28
    bf84:	89 5e       	subi	r24, 0xE9	; 233
    bf86:	9e 4f       	sbci	r25, 0xFE	; 254
    bf88:	0e 94 1a 50 	call	0xa034	; 0xa034 <dir_sdi>
    bf8c:	00 97       	sbiw	r24, 0x00	; 0
    bf8e:	09 f0       	breq	.+2      	; 0xbf92 <f_getcwd+0xc6>
    bf90:	c6 c0       	rjmp	.+396    	; 0xc11e <f_getcwd+0x252>
    bf92:	c3 5d       	subi	r28, 0xD3	; 211
    bf94:	de 4f       	sbci	r29, 0xFE	; 254
    bf96:	48 81       	ld	r20, Y
    bf98:	59 81       	ldd	r21, Y+1	; 0x01
    bf9a:	6a 81       	ldd	r22, Y+2	; 0x02
    bf9c:	7b 81       	ldd	r23, Y+3	; 0x03
    bf9e:	cd 52       	subi	r28, 0x2D	; 45
    bfa0:	d1 40       	sbci	r29, 0x01	; 1
    bfa2:	cb 5b       	subi	r28, 0xBB	; 187
    bfa4:	de 4f       	sbci	r29, 0xFE	; 254
    bfa6:	88 81       	ld	r24, Y
    bfa8:	99 81       	ldd	r25, Y+1	; 0x01
    bfaa:	c5 54       	subi	r28, 0x45	; 69
    bfac:	d1 40       	sbci	r29, 0x01	; 1
    bfae:	0e 94 98 4b 	call	0x9730	; 0x9730 <move_window>
    bfb2:	00 97       	sbiw	r24, 0x00	; 0
    bfb4:	09 f0       	breq	.+2      	; 0xbfb8 <f_getcwd+0xec>
    bfb6:	b3 c0       	rjmp	.+358    	; 0xc11e <f_getcwd+0x252>
    bfb8:	cf 5c       	subi	r28, 0xCF	; 207
    bfba:	de 4f       	sbci	r29, 0xFE	; 254
    bfbc:	68 81       	ld	r22, Y
    bfbe:	79 81       	ldd	r23, Y+1	; 0x01
    bfc0:	c1 53       	subi	r28, 0x31	; 49
    bfc2:	d1 40       	sbci	r29, 0x01	; 1
    bfc4:	cb 5b       	subi	r28, 0xBB	; 187
    bfc6:	de 4f       	sbci	r29, 0xFE	; 254
    bfc8:	e8 81       	ld	r30, Y
    bfca:	f9 81       	ldd	r31, Y+1	; 0x01
    bfcc:	c5 54       	subi	r28, 0x45	; 69
    bfce:	d1 40       	sbci	r29, 0x01	; 1
    bfd0:	80 81       	ld	r24, Z
    bfd2:	0e 94 09 4a 	call	0x9412	; 0x9412 <ld_clust.isra.3>
    bfd6:	c3 5e       	subi	r28, 0xE3	; 227
    bfd8:	de 4f       	sbci	r29, 0xFE	; 254
    bfda:	68 83       	st	Y, r22
    bfdc:	79 83       	std	Y+1, r23	; 0x01
    bfde:	8a 83       	std	Y+2, r24	; 0x02
    bfe0:	9b 83       	std	Y+3, r25	; 0x03
    bfe2:	cd 51       	subi	r28, 0x1D	; 29
    bfe4:	d1 40       	sbci	r29, 0x01	; 1
    bfe6:	40 e0       	ldi	r20, 0x00	; 0
    bfe8:	50 e0       	ldi	r21, 0x00	; 0
    bfea:	ba 01       	movw	r22, r20
    bfec:	ce 01       	movw	r24, r28
    bfee:	89 5e       	subi	r24, 0xE9	; 233
    bff0:	9e 4f       	sbci	r25, 0xFE	; 254
    bff2:	0e 94 1a 50 	call	0xa034	; 0xa034 <dir_sdi>
    bff6:	00 97       	sbiw	r24, 0x00	; 0
    bff8:	09 f0       	breq	.+2      	; 0xbffc <f_getcwd+0x130>
    bffa:	91 c0       	rjmp	.+290    	; 0xc11e <f_getcwd+0x252>
    bffc:	60 e0       	ldi	r22, 0x00	; 0
    bffe:	70 e0       	ldi	r23, 0x00	; 0
    c000:	ce 01       	movw	r24, r28
    c002:	89 5e       	subi	r24, 0xE9	; 233
    c004:	9e 4f       	sbci	r25, 0xFE	; 254
    c006:	0e 94 b3 53 	call	0xa766	; 0xa766 <dir_read>
    c00a:	00 97       	sbiw	r24, 0x00	; 0
    c00c:	09 f0       	breq	.+2      	; 0xc010 <f_getcwd+0x144>
    c00e:	89 c0       	rjmp	.+274    	; 0xc122 <f_getcwd+0x256>
    c010:	cf 5c       	subi	r28, 0xCF	; 207
    c012:	de 4f       	sbci	r29, 0xFE	; 254
    c014:	68 81       	ld	r22, Y
    c016:	79 81       	ldd	r23, Y+1	; 0x01
    c018:	c1 53       	subi	r28, 0x31	; 49
    c01a:	d1 40       	sbci	r29, 0x01	; 1
    c01c:	cb 5b       	subi	r28, 0xBB	; 187
    c01e:	de 4f       	sbci	r29, 0xFE	; 254
    c020:	e8 81       	ld	r30, Y
    c022:	f9 81       	ldd	r31, Y+1	; 0x01
    c024:	c5 54       	subi	r28, 0x45	; 69
    c026:	d1 40       	sbci	r29, 0x01	; 1
    c028:	80 81       	ld	r24, Z
    c02a:	0e 94 09 4a 	call	0x9412	; 0x9412 <ld_clust.isra.3>
    c02e:	46 16       	cp	r4, r22
    c030:	57 06       	cpc	r5, r23
    c032:	68 06       	cpc	r6, r24
    c034:	79 06       	cpc	r7, r25
    c036:	41 f4       	brne	.+16     	; 0xc048 <f_getcwd+0x17c>
    c038:	b6 01       	movw	r22, r12
    c03a:	ce 01       	movw	r24, r28
    c03c:	89 5e       	subi	r24, 0xE9	; 233
    c03e:	9e 4f       	sbci	r25, 0xFE	; 254
    c040:	0e 94 d4 48 	call	0x91a8	; 0x91a8 <get_fileinfo>
    c044:	f6 01       	movw	r30, r12
    c046:	0a c0       	rjmp	.+20     	; 0xc05c <f_getcwd+0x190>
    c048:	60 e0       	ldi	r22, 0x00	; 0
    c04a:	70 e0       	ldi	r23, 0x00	; 0
    c04c:	ce 01       	movw	r24, r28
    c04e:	89 5e       	subi	r24, 0xE9	; 233
    c050:	9e 4f       	sbci	r25, 0xFE	; 254
    c052:	0e 94 92 52 	call	0xa524	; 0xa524 <dir_next>
    c056:	00 97       	sbiw	r24, 0x00	; 0
    c058:	89 f2       	breq	.-94     	; 0xbffc <f_getcwd+0x130>
    c05a:	63 c0       	rjmp	.+198    	; 0xc122 <f_getcwd+0x256>
    c05c:	cf 01       	movw	r24, r30
    c05e:	8c 19       	sub	r24, r12
    c060:	9d 09       	sbc	r25, r13
    c062:	31 96       	adiw	r30, 0x01	; 1
    c064:	25 89       	ldd	r18, Z+21	; 0x15
    c066:	21 11       	cpse	r18, r1
    c068:	f9 cf       	rjmp	.-14     	; 0xc05c <f_getcwd+0x190>
    c06a:	9c 01       	movw	r18, r24
    c06c:	2f 5f       	subi	r18, 0xFF	; 255
    c06e:	3f 4f       	sbci	r19, 0xFF	; 255
    c070:	02 17       	cp	r16, r18
    c072:	13 07       	cpc	r17, r19
    c074:	08 f4       	brcc	.+2      	; 0xc078 <f_getcwd+0x1ac>
    c076:	51 c0       	rjmp	.+162    	; 0xc11a <f_getcwd+0x24e>
    c078:	f6 01       	movw	r30, r12
    c07a:	e8 0f       	add	r30, r24
    c07c:	f9 1f       	adc	r31, r25
    c07e:	98 01       	movw	r18, r16
    c080:	ce 16       	cp	r12, r30
    c082:	df 06       	cpc	r13, r31
    c084:	71 f0       	breq	.+28     	; 0xc0a2 <f_getcwd+0x1d6>
    c086:	21 50       	subi	r18, 0x01	; 1
    c088:	31 09       	sbc	r19, r1
    c08a:	45 89       	ldd	r20, Z+21	; 0x15
    c08c:	c9 5b       	subi	r28, 0xB9	; 185
    c08e:	de 4f       	sbci	r29, 0xFE	; 254
    c090:	a8 81       	ld	r26, Y
    c092:	b9 81       	ldd	r27, Y+1	; 0x01
    c094:	c7 54       	subi	r28, 0x47	; 71
    c096:	d1 40       	sbci	r29, 0x01	; 1
    c098:	a2 0f       	add	r26, r18
    c09a:	b3 1f       	adc	r27, r19
    c09c:	4c 93       	st	X, r20
    c09e:	31 97       	sbiw	r30, 0x01	; 1
    c0a0:	ef cf       	rjmp	.-34     	; 0xc080 <f_getcwd+0x1b4>
    c0a2:	80 95       	com	r24
    c0a4:	90 95       	com	r25
    c0a6:	08 0f       	add	r16, r24
    c0a8:	19 1f       	adc	r17, r25
    c0aa:	c9 5b       	subi	r28, 0xB9	; 185
    c0ac:	de 4f       	sbci	r29, 0xFE	; 254
    c0ae:	e8 81       	ld	r30, Y
    c0b0:	f9 81       	ldd	r31, Y+1	; 0x01
    c0b2:	c7 54       	subi	r28, 0x47	; 71
    c0b4:	d1 40       	sbci	r29, 0x01	; 1
    c0b6:	e0 0f       	add	r30, r16
    c0b8:	f1 1f       	adc	r31, r17
    c0ba:	9f e2       	ldi	r25, 0x2F	; 47
    c0bc:	90 83       	st	Z, r25
    c0be:	4f cf       	rjmp	.-354    	; 0xbf5e <f_getcwd+0x92>
    c0c0:	08 15       	cp	r16, r8
    c0c2:	19 05       	cpc	r17, r9
    c0c4:	61 f4       	brne	.+24     	; 0xc0de <f_getcwd+0x212>
    c0c6:	01 50       	subi	r16, 0x01	; 1
    c0c8:	11 09       	sbc	r17, r1
    c0ca:	c9 5b       	subi	r28, 0xB9	; 185
    c0cc:	de 4f       	sbci	r29, 0xFE	; 254
    c0ce:	e8 81       	ld	r30, Y
    c0d0:	f9 81       	ldd	r31, Y+1	; 0x01
    c0d2:	c7 54       	subi	r28, 0x47	; 71
    c0d4:	d1 40       	sbci	r29, 0x01	; 1
    c0d6:	e0 0f       	add	r30, r16
    c0d8:	f1 1f       	adc	r31, r17
    c0da:	8f e2       	ldi	r24, 0x2F	; 47
    c0dc:	80 83       	st	Z, r24
    c0de:	ef ef       	ldi	r30, 0xFF	; 255
    c0e0:	ee 1a       	sub	r14, r30
    c0e2:	fe 0a       	sbc	r15, r30
    c0e4:	c9 5b       	subi	r28, 0xB9	; 185
    c0e6:	de 4f       	sbci	r29, 0xFE	; 254
    c0e8:	e8 81       	ld	r30, Y
    c0ea:	f9 81       	ldd	r31, Y+1	; 0x01
    c0ec:	c7 54       	subi	r28, 0x47	; 71
    c0ee:	d1 40       	sbci	r29, 0x01	; 1
    c0f0:	e0 0f       	add	r30, r16
    c0f2:	f1 1f       	adc	r31, r17
    c0f4:	80 81       	ld	r24, Z
    c0f6:	f7 01       	movw	r30, r14
    c0f8:	31 97       	sbiw	r30, 0x01	; 1
    c0fa:	80 83       	st	Z, r24
    c0fc:	0f 5f       	subi	r16, 0xFF	; 255
    c0fe:	1f 4f       	sbci	r17, 0xFF	; 255
    c100:	08 15       	cp	r16, r8
    c102:	19 05       	cpc	r17, r9
    c104:	60 f3       	brcs	.-40     	; 0xc0de <f_getcwd+0x212>
    c106:	c5 01       	movw	r24, r10
    c108:	0e 94 11 69 	call	0xd222	; 0xd222 <ff_memfree>
    c10c:	f7 01       	movw	r30, r14
    c10e:	10 82       	st	Z, r1
    c110:	c1 01       	movw	r24, r2
    c112:	0d c0       	rjmp	.+26     	; 0xc12e <f_getcwd+0x262>
    c114:	81 e1       	ldi	r24, 0x11	; 17
    c116:	90 e0       	ldi	r25, 0x00	; 0
    c118:	0a c0       	rjmp	.+20     	; 0xc12e <f_getcwd+0x262>
    c11a:	81 e1       	ldi	r24, 0x11	; 17
    c11c:	90 e0       	ldi	r25, 0x00	; 0
    c11e:	1c 01       	movw	r2, r24
    c120:	f2 cf       	rjmp	.-28     	; 0xc106 <f_getcwd+0x23a>
    c122:	84 30       	cpi	r24, 0x04	; 4
    c124:	91 05       	cpc	r25, r1
    c126:	d9 f7       	brne	.-10     	; 0xc11e <f_getcwd+0x252>
    c128:	82 e0       	ldi	r24, 0x02	; 2
    c12a:	90 e0       	ldi	r25, 0x00	; 0
    c12c:	f8 cf       	rjmp	.-16     	; 0xc11e <f_getcwd+0x252>
    c12e:	c8 5b       	subi	r28, 0xB8	; 184
    c130:	de 4f       	sbci	r29, 0xFE	; 254
    c132:	e2 e1       	ldi	r30, 0x12	; 18
    c134:	0c 94 1b e7 	jmp	0x1ce36	; 0x1ce36 <__epilogue_restores__>

0000c138 <f_lseek>:
    c138:	aa e0       	ldi	r26, 0x0A	; 10
    c13a:	b0 e0       	ldi	r27, 0x00	; 0
    c13c:	e2 ea       	ldi	r30, 0xA2	; 162
    c13e:	f0 e6       	ldi	r31, 0x60	; 96
    c140:	0c 94 ff e6 	jmp	0x1cdfe	; 0x1cdfe <__prologue_saves__>
    c144:	1c 01       	movw	r2, r24
    c146:	6a 01       	movw	r12, r20
    c148:	7b 01       	movw	r14, r22
    c14a:	be 01       	movw	r22, r28
    c14c:	6f 5f       	subi	r22, 0xFF	; 255
    c14e:	7f 4f       	sbci	r23, 0xFF	; 255
    c150:	0e 94 a8 48 	call	0x9150	; 0x9150 <validate>
    c154:	00 97       	sbiw	r24, 0x00	; 0
    c156:	09 f0       	breq	.+2      	; 0xc15a <f_lseek+0x22>
    c158:	a6 c2       	rjmp	.+1356   	; 0xc6a6 <f_lseek+0x56e>
    c15a:	f1 01       	movw	r30, r2
    c15c:	87 85       	ldd	r24, Z+15	; 0x0f
    c15e:	90 e0       	ldi	r25, 0x00	; 0
    c160:	00 97       	sbiw	r24, 0x00	; 0
    c162:	09 f0       	breq	.+2      	; 0xc166 <f_lseek+0x2e>
    c164:	a0 c2       	rjmp	.+1344   	; 0xc6a6 <f_lseek+0x56e>
    c166:	22 a1       	ldd	r18, Z+34	; 0x22
    c168:	33 a1       	ldd	r19, Z+35	; 0x23
    c16a:	21 15       	cp	r18, r1
    c16c:	31 05       	cpc	r19, r1
    c16e:	09 f4       	brne	.+2      	; 0xc172 <f_lseek+0x3a>
    c170:	2d c1       	rjmp	.+602    	; 0xc3cc <f_lseek+0x294>
    c172:	ff ef       	ldi	r31, 0xFF	; 255
    c174:	cf 16       	cp	r12, r31
    c176:	df 06       	cpc	r13, r31
    c178:	ef 06       	cpc	r14, r31
    c17a:	ff 06       	cpc	r15, r31
    c17c:	09 f0       	breq	.+2      	; 0xc180 <f_lseek+0x48>
    c17e:	9a c0       	rjmp	.+308    	; 0xc2b4 <f_lseek+0x17c>
    c180:	89 01       	movw	r16, r18
    c182:	0c 5f       	subi	r16, 0xFC	; 252
    c184:	1f 4f       	sbci	r17, 0xFF	; 255
    c186:	d9 01       	movw	r26, r18
    c188:	4d 91       	ld	r20, X+
    c18a:	5d 91       	ld	r21, X+
    c18c:	6d 91       	ld	r22, X+
    c18e:	7c 91       	ld	r23, X
    c190:	4f 83       	std	Y+7, r20	; 0x07
    c192:	58 87       	std	Y+8, r21	; 0x08
    c194:	69 87       	std	Y+9, r22	; 0x09
    c196:	7a 87       	std	Y+10, r23	; 0x0a
    c198:	f1 01       	movw	r30, r2
    c19a:	86 80       	ldd	r8, Z+6	; 0x06
    c19c:	97 80       	ldd	r9, Z+7	; 0x07
    c19e:	a0 84       	ldd	r10, Z+8	; 0x08
    c1a0:	b1 84       	ldd	r11, Z+9	; 0x09
    c1a2:	52 e0       	ldi	r21, 0x02	; 2
    c1a4:	c5 2e       	mov	r12, r21
    c1a6:	d1 2c       	mov	r13, r1
    c1a8:	e1 2c       	mov	r14, r1
    c1aa:	f1 2c       	mov	r15, r1
    c1ac:	81 14       	cp	r8, r1
    c1ae:	91 04       	cpc	r9, r1
    c1b0:	a1 04       	cpc	r10, r1
    c1b2:	b1 04       	cpc	r11, r1
    c1b4:	09 f4       	brne	.+2      	; 0xc1b8 <f_lseek+0x80>
    c1b6:	65 c0       	rjmp	.+202    	; 0xc282 <f_lseek+0x14a>
    c1b8:	24 01       	movw	r4, r8
    c1ba:	35 01       	movw	r6, r10
    c1bc:	1b 82       	std	Y+3, r1	; 0x03
    c1be:	1c 82       	std	Y+4, r1	; 0x04
    c1c0:	1d 82       	std	Y+5, r1	; 0x05
    c1c2:	1e 82       	std	Y+6, r1	; 0x06
    c1c4:	2b 81       	ldd	r18, Y+3	; 0x03
    c1c6:	3c 81       	ldd	r19, Y+4	; 0x04
    c1c8:	4d 81       	ldd	r20, Y+5	; 0x05
    c1ca:	5e 81       	ldd	r21, Y+6	; 0x06
    c1cc:	2f 5f       	subi	r18, 0xFF	; 255
    c1ce:	3f 4f       	sbci	r19, 0xFF	; 255
    c1d0:	4f 4f       	sbci	r20, 0xFF	; 255
    c1d2:	5f 4f       	sbci	r21, 0xFF	; 255
    c1d4:	2b 83       	std	Y+3, r18	; 0x03
    c1d6:	3c 83       	std	Y+4, r19	; 0x04
    c1d8:	4d 83       	std	Y+5, r20	; 0x05
    c1da:	5e 83       	std	Y+6, r21	; 0x06
    c1dc:	b3 01       	movw	r22, r6
    c1de:	a2 01       	movw	r20, r4
    c1e0:	d1 01       	movw	r26, r2
    c1e2:	8d 91       	ld	r24, X+
    c1e4:	9c 91       	ld	r25, X
    c1e6:	0e 94 66 4f 	call	0x9ecc	; 0x9ecc <get_fat.isra.9>
    c1ea:	62 30       	cpi	r22, 0x02	; 2
    c1ec:	71 05       	cpc	r23, r1
    c1ee:	81 05       	cpc	r24, r1
    c1f0:	91 05       	cpc	r25, r1
    c1f2:	10 f4       	brcc	.+4      	; 0xc1f8 <f_lseek+0xc0>
    c1f4:	82 e0       	ldi	r24, 0x02	; 2
    c1f6:	07 c0       	rjmp	.+14     	; 0xc206 <f_lseek+0xce>
    c1f8:	6f 3f       	cpi	r22, 0xFF	; 255
    c1fa:	ff ef       	ldi	r31, 0xFF	; 255
    c1fc:	7f 07       	cpc	r23, r31
    c1fe:	8f 07       	cpc	r24, r31
    c200:	9f 07       	cpc	r25, r31
    c202:	29 f4       	brne	.+10     	; 0xc20e <f_lseek+0xd6>
    c204:	81 e0       	ldi	r24, 0x01	; 1
    c206:	f1 01       	movw	r30, r2
    c208:	87 87       	std	Z+15, r24	; 0x0f
    c20a:	90 e0       	ldi	r25, 0x00	; 0
    c20c:	4c c2       	rjmp	.+1176   	; 0xc6a6 <f_lseek+0x56e>
    c20e:	a3 01       	movw	r20, r6
    c210:	92 01       	movw	r18, r4
    c212:	2f 5f       	subi	r18, 0xFF	; 255
    c214:	3f 4f       	sbci	r19, 0xFF	; 255
    c216:	4f 4f       	sbci	r20, 0xFF	; 255
    c218:	5f 4f       	sbci	r21, 0xFF	; 255
    c21a:	2b 01       	movw	r4, r22
    c21c:	3c 01       	movw	r6, r24
    c21e:	62 17       	cp	r22, r18
    c220:	73 07       	cpc	r23, r19
    c222:	84 07       	cpc	r24, r20
    c224:	95 07       	cpc	r25, r21
    c226:	71 f2       	breq	.-100    	; 0xc1c4 <f_lseek+0x8c>
    c228:	f2 e0       	ldi	r31, 0x02	; 2
    c22a:	cf 0e       	add	r12, r31
    c22c:	d1 1c       	adc	r13, r1
    c22e:	e1 1c       	adc	r14, r1
    c230:	f1 1c       	adc	r15, r1
    c232:	2f 81       	ldd	r18, Y+7	; 0x07
    c234:	38 85       	ldd	r19, Y+8	; 0x08
    c236:	49 85       	ldd	r20, Y+9	; 0x09
    c238:	5a 85       	ldd	r21, Y+10	; 0x0a
    c23a:	2c 15       	cp	r18, r12
    c23c:	3d 05       	cpc	r19, r13
    c23e:	4e 05       	cpc	r20, r14
    c240:	5f 05       	cpc	r21, r15
    c242:	88 f0       	brcs	.+34     	; 0xc266 <f_lseek+0x12e>
    c244:	2b 81       	ldd	r18, Y+3	; 0x03
    c246:	3c 81       	ldd	r19, Y+4	; 0x04
    c248:	4d 81       	ldd	r20, Y+5	; 0x05
    c24a:	5e 81       	ldd	r21, Y+6	; 0x06
    c24c:	d8 01       	movw	r26, r16
    c24e:	2d 93       	st	X+, r18
    c250:	3d 93       	st	X+, r19
    c252:	4d 93       	st	X+, r20
    c254:	5c 93       	st	X, r21
    c256:	13 97       	sbiw	r26, 0x03	; 3
    c258:	f8 01       	movw	r30, r16
    c25a:	84 82       	std	Z+4, r8	; 0x04
    c25c:	95 82       	std	Z+5, r9	; 0x05
    c25e:	a6 82       	std	Z+6, r10	; 0x06
    c260:	b7 82       	std	Z+7, r11	; 0x07
    c262:	08 5f       	subi	r16, 0xF8	; 248
    c264:	1f 4f       	sbci	r17, 0xFF	; 255
    c266:	e9 81       	ldd	r30, Y+1	; 0x01
    c268:	fa 81       	ldd	r31, Y+2	; 0x02
    c26a:	81 8c       	ldd	r8, Z+25	; 0x19
    c26c:	92 8c       	ldd	r9, Z+26	; 0x1a
    c26e:	a3 8c       	ldd	r10, Z+27	; 0x1b
    c270:	b4 8c       	ldd	r11, Z+28	; 0x1c
    c272:	68 15       	cp	r22, r8
    c274:	79 05       	cpc	r23, r9
    c276:	8a 05       	cpc	r24, r10
    c278:	9b 05       	cpc	r25, r11
    c27a:	18 f4       	brcc	.+6      	; 0xc282 <f_lseek+0x14a>
    c27c:	4b 01       	movw	r8, r22
    c27e:	5c 01       	movw	r10, r24
    c280:	9b cf       	rjmp	.-202    	; 0xc1b8 <f_lseek+0x80>
    c282:	f1 01       	movw	r30, r2
    c284:	a2 a1       	ldd	r26, Z+34	; 0x22
    c286:	b3 a1       	ldd	r27, Z+35	; 0x23
    c288:	cd 92       	st	X+, r12
    c28a:	dd 92       	st	X+, r13
    c28c:	ed 92       	st	X+, r14
    c28e:	fc 92       	st	X, r15
    c290:	13 97       	sbiw	r26, 0x03	; 3
    c292:	2f 81       	ldd	r18, Y+7	; 0x07
    c294:	38 85       	ldd	r19, Y+8	; 0x08
    c296:	49 85       	ldd	r20, Y+9	; 0x09
    c298:	5a 85       	ldd	r21, Y+10	; 0x0a
    c29a:	2c 15       	cp	r18, r12
    c29c:	3d 05       	cpc	r19, r13
    c29e:	4e 05       	cpc	r20, r14
    c2a0:	5f 05       	cpc	r21, r15
    c2a2:	08 f4       	brcc	.+2      	; 0xc2a6 <f_lseek+0x16e>
    c2a4:	f7 c1       	rjmp	.+1006   	; 0xc694 <f_lseek+0x55c>
    c2a6:	d8 01       	movw	r26, r16
    c2a8:	1d 92       	st	X+, r1
    c2aa:	1d 92       	st	X+, r1
    c2ac:	1d 92       	st	X+, r1
    c2ae:	1c 92       	st	X, r1
    c2b0:	13 97       	sbiw	r26, 0x03	; 3
    c2b2:	ee c1       	rjmp	.+988    	; 0xc690 <f_lseek+0x558>
    c2b4:	f1 01       	movw	r30, r2
    c2b6:	82 85       	ldd	r24, Z+10	; 0x0a
    c2b8:	93 85       	ldd	r25, Z+11	; 0x0b
    c2ba:	a4 85       	ldd	r26, Z+12	; 0x0c
    c2bc:	b5 85       	ldd	r27, Z+13	; 0x0d
    c2be:	46 01       	movw	r8, r12
    c2c0:	57 01       	movw	r10, r14
    c2c2:	8c 15       	cp	r24, r12
    c2c4:	9d 05       	cpc	r25, r13
    c2c6:	ae 05       	cpc	r26, r14
    c2c8:	bf 05       	cpc	r27, r15
    c2ca:	10 f4       	brcc	.+4      	; 0xc2d0 <f_lseek+0x198>
    c2cc:	4c 01       	movw	r8, r24
    c2ce:	5d 01       	movw	r10, r26
    c2d0:	f1 01       	movw	r30, r2
    c2d2:	80 8a       	std	Z+16, r8	; 0x10
    c2d4:	91 8a       	std	Z+17, r9	; 0x11
    c2d6:	a2 8a       	std	Z+18, r10	; 0x12
    c2d8:	b3 8a       	std	Z+19, r11	; 0x13
    c2da:	81 14       	cp	r8, r1
    c2dc:	91 04       	cpc	r9, r1
    c2de:	a1 04       	cpc	r10, r1
    c2e0:	b1 04       	cpc	r11, r1
    c2e2:	09 f4       	brne	.+2      	; 0xc2e6 <f_lseek+0x1ae>
    c2e4:	d5 c1       	rjmp	.+938    	; 0xc690 <f_lseek+0x558>
    c2e6:	24 01       	movw	r4, r8
    c2e8:	35 01       	movw	r6, r10
    c2ea:	f1 e0       	ldi	r31, 0x01	; 1
    c2ec:	4f 1a       	sub	r4, r31
    c2ee:	51 08       	sbc	r5, r1
    c2f0:	61 08       	sbc	r6, r1
    c2f2:	71 08       	sbc	r7, r1
    c2f4:	b3 01       	movw	r22, r6
    c2f6:	a2 01       	movw	r20, r4
    c2f8:	c1 01       	movw	r24, r2
    c2fa:	0e 94 31 48 	call	0x9062	; 0x9062 <clmt_clust>
    c2fe:	ab 01       	movw	r20, r22
    c300:	bc 01       	movw	r22, r24
    c302:	f1 01       	movw	r30, r2
    c304:	44 8b       	std	Z+20, r20	; 0x14
    c306:	55 8b       	std	Z+21, r21	; 0x15
    c308:	66 8b       	std	Z+22, r22	; 0x16
    c30a:	77 8b       	std	Z+23, r23	; 0x17
    c30c:	e9 80       	ldd	r14, Y+1	; 0x01
    c30e:	fa 80       	ldd	r15, Y+2	; 0x02
    c310:	c7 01       	movw	r24, r14
    c312:	0e 94 09 48 	call	0x9012	; 0x9012 <clst2sect>
    c316:	61 15       	cp	r22, r1
    c318:	71 05       	cpc	r23, r1
    c31a:	81 05       	cpc	r24, r1
    c31c:	91 05       	cpc	r25, r1
    c31e:	09 f4       	brne	.+2      	; 0xc322 <f_lseek+0x1ea>
    c320:	69 cf       	rjmp	.-302    	; 0xc1f4 <f_lseek+0xbc>
    c322:	95 01       	movw	r18, r10
    c324:	84 01       	movw	r16, r8
    c326:	11 70       	andi	r17, 0x01	; 1
    c328:	22 27       	eor	r18, r18
    c32a:	33 27       	eor	r19, r19
    c32c:	01 15       	cp	r16, r1
    c32e:	11 05       	cpc	r17, r1
    c330:	21 05       	cpc	r18, r1
    c332:	31 05       	cpc	r19, r1
    c334:	09 f4       	brne	.+2      	; 0xc338 <f_lseek+0x200>
    c336:	ac c1       	rjmp	.+856    	; 0xc690 <f_lseek+0x558>
    c338:	f7 01       	movw	r30, r14
    c33a:	81 84       	ldd	r8, Z+9	; 0x09
    c33c:	92 84       	ldd	r9, Z+10	; 0x0a
    c33e:	f1 e0       	ldi	r31, 0x01	; 1
    c340:	8f 1a       	sub	r8, r31
    c342:	91 08       	sbc	r9, r1
    c344:	a1 2c       	mov	r10, r1
    c346:	b1 2c       	mov	r11, r1
    c348:	49 e0       	ldi	r20, 0x09	; 9
    c34a:	76 94       	lsr	r7
    c34c:	67 94       	ror	r6
    c34e:	57 94       	ror	r5
    c350:	47 94       	ror	r4
    c352:	4a 95       	dec	r20
    c354:	d1 f7       	brne	.-12     	; 0xc34a <f_lseek+0x212>
    c356:	48 20       	and	r4, r8
    c358:	59 20       	and	r5, r9
    c35a:	6a 20       	and	r6, r10
    c35c:	7b 20       	and	r7, r11
    c35e:	53 01       	movw	r10, r6
    c360:	42 01       	movw	r8, r4
    c362:	86 0e       	add	r8, r22
    c364:	97 1e       	adc	r9, r23
    c366:	a8 1e       	adc	r10, r24
    c368:	b9 1e       	adc	r11, r25
    c36a:	f1 01       	movw	r30, r2
    c36c:	20 8d       	ldd	r18, Z+24	; 0x18
    c36e:	31 8d       	ldd	r19, Z+25	; 0x19
    c370:	42 8d       	ldd	r20, Z+26	; 0x1a
    c372:	53 8d       	ldd	r21, Z+27	; 0x1b
    c374:	82 16       	cp	r8, r18
    c376:	93 06       	cpc	r9, r19
    c378:	a4 06       	cpc	r10, r20
    c37a:	b5 06       	cpc	r11, r21
    c37c:	09 f4       	brne	.+2      	; 0xc380 <f_lseek+0x248>
    c37e:	88 c1       	rjmp	.+784    	; 0xc690 <f_lseek+0x558>
    c380:	86 85       	ldd	r24, Z+14	; 0x0e
    c382:	b1 01       	movw	r22, r2
    c384:	6c 5d       	subi	r22, 0xDC	; 220
    c386:	7f 4f       	sbci	r23, 0xFF	; 255
    c388:	6b 01       	movw	r12, r22
    c38a:	87 ff       	sbrs	r24, 7
    c38c:	0d c0       	rjmp	.+26     	; 0xc3a8 <f_lseek+0x270>
    c38e:	01 e0       	ldi	r16, 0x01	; 1
    c390:	10 e0       	ldi	r17, 0x00	; 0
    c392:	f7 01       	movw	r30, r14
    c394:	81 81       	ldd	r24, Z+1	; 0x01
    c396:	0e 94 da 69 	call	0xd3b4	; 0xd3b4 <disk_write>
    c39a:	89 2b       	or	r24, r25
    c39c:	09 f0       	breq	.+2      	; 0xc3a0 <f_lseek+0x268>
    c39e:	32 cf       	rjmp	.-412    	; 0xc204 <f_lseek+0xcc>
    c3a0:	f1 01       	movw	r30, r2
    c3a2:	86 85       	ldd	r24, Z+14	; 0x0e
    c3a4:	8f 77       	andi	r24, 0x7F	; 127
    c3a6:	86 87       	std	Z+14, r24	; 0x0e
    c3a8:	e9 81       	ldd	r30, Y+1	; 0x01
    c3aa:	fa 81       	ldd	r31, Y+2	; 0x02
    c3ac:	01 e0       	ldi	r16, 0x01	; 1
    c3ae:	10 e0       	ldi	r17, 0x00	; 0
    c3b0:	a5 01       	movw	r20, r10
    c3b2:	94 01       	movw	r18, r8
    c3b4:	b6 01       	movw	r22, r12
    c3b6:	81 81       	ldd	r24, Z+1	; 0x01
    c3b8:	ed d7       	rcall	.+4058   	; 0xd394 <disk_read>
    c3ba:	89 2b       	or	r24, r25
    c3bc:	09 f0       	breq	.+2      	; 0xc3c0 <f_lseek+0x288>
    c3be:	22 cf       	rjmp	.-444    	; 0xc204 <f_lseek+0xcc>
    c3c0:	f1 01       	movw	r30, r2
    c3c2:	80 8e       	std	Z+24, r8	; 0x18
    c3c4:	91 8e       	std	Z+25, r9	; 0x19
    c3c6:	a2 8e       	std	Z+26, r10	; 0x1a
    c3c8:	b3 8e       	std	Z+27, r11	; 0x1b
    c3ca:	62 c1       	rjmp	.+708    	; 0xc690 <f_lseek+0x558>
    c3cc:	f1 01       	movw	r30, r2
    c3ce:	82 85       	ldd	r24, Z+10	; 0x0a
    c3d0:	93 85       	ldd	r25, Z+11	; 0x0b
    c3d2:	a4 85       	ldd	r26, Z+12	; 0x0c
    c3d4:	b5 85       	ldd	r27, Z+13	; 0x0d
    c3d6:	8c 15       	cp	r24, r12
    c3d8:	9d 05       	cpc	r25, r13
    c3da:	ae 05       	cpc	r26, r14
    c3dc:	bf 05       	cpc	r27, r15
    c3de:	28 f4       	brcc	.+10     	; 0xc3ea <f_lseek+0x2b2>
    c3e0:	26 85       	ldd	r18, Z+14	; 0x0e
    c3e2:	21 fd       	sbrc	r18, 1
    c3e4:	02 c0       	rjmp	.+4      	; 0xc3ea <f_lseek+0x2b2>
    c3e6:	6c 01       	movw	r12, r24
    c3e8:	7d 01       	movw	r14, r26
    c3ea:	f1 01       	movw	r30, r2
    c3ec:	40 88       	ldd	r4, Z+16	; 0x10
    c3ee:	51 88       	ldd	r5, Z+17	; 0x11
    c3f0:	62 88       	ldd	r6, Z+18	; 0x12
    c3f2:	73 88       	ldd	r7, Z+19	; 0x13
    c3f4:	10 8a       	std	Z+16, r1	; 0x10
    c3f6:	11 8a       	std	Z+17, r1	; 0x11
    c3f8:	12 8a       	std	Z+18, r1	; 0x12
    c3fa:	13 8a       	std	Z+19, r1	; 0x13
    c3fc:	c1 14       	cp	r12, r1
    c3fe:	d1 04       	cpc	r13, r1
    c400:	e1 04       	cpc	r14, r1
    c402:	f1 04       	cpc	r15, r1
    c404:	09 f4       	brne	.+2      	; 0xc408 <f_lseek+0x2d0>
    c406:	48 c1       	rjmp	.+656    	; 0xc698 <f_lseek+0x560>
    c408:	e9 81       	ldd	r30, Y+1	; 0x01
    c40a:	fa 81       	ldd	r31, Y+2	; 0x02
    c40c:	81 84       	ldd	r8, Z+9	; 0x09
    c40e:	92 84       	ldd	r9, Z+10	; 0x0a
    c410:	a1 2c       	mov	r10, r1
    c412:	b1 2c       	mov	r11, r1
    c414:	39 e0       	ldi	r19, 0x09	; 9
    c416:	88 0c       	add	r8, r8
    c418:	99 1c       	adc	r9, r9
    c41a:	aa 1c       	adc	r10, r10
    c41c:	bb 1c       	adc	r11, r11
    c41e:	3a 95       	dec	r19
    c420:	d1 f7       	brne	.-12     	; 0xc416 <f_lseek+0x2de>
    c422:	41 14       	cp	r4, r1
    c424:	51 04       	cpc	r5, r1
    c426:	61 04       	cpc	r6, r1
    c428:	71 04       	cpc	r7, r1
    c42a:	d9 f1       	breq	.+118    	; 0xc4a2 <f_lseek+0x36a>
    c42c:	f1 e0       	ldi	r31, 0x01	; 1
    c42e:	4f 1a       	sub	r4, r31
    c430:	51 08       	sbc	r5, r1
    c432:	61 08       	sbc	r6, r1
    c434:	71 08       	sbc	r7, r1
    c436:	c7 01       	movw	r24, r14
    c438:	b6 01       	movw	r22, r12
    c43a:	61 50       	subi	r22, 0x01	; 1
    c43c:	71 09       	sbc	r23, r1
    c43e:	81 09       	sbc	r24, r1
    c440:	91 09       	sbc	r25, r1
    c442:	a5 01       	movw	r20, r10
    c444:	94 01       	movw	r18, r8
    c446:	0e 94 92 e6 	call	0x1cd24	; 0x1cd24 <__udivmodsi4>
    c44a:	2b 83       	std	Y+3, r18	; 0x03
    c44c:	3c 83       	std	Y+4, r19	; 0x04
    c44e:	4d 83       	std	Y+5, r20	; 0x05
    c450:	5e 83       	std	Y+6, r21	; 0x06
    c452:	c3 01       	movw	r24, r6
    c454:	b2 01       	movw	r22, r4
    c456:	a5 01       	movw	r20, r10
    c458:	94 01       	movw	r18, r8
    c45a:	0e 94 92 e6 	call	0x1cd24	; 0x1cd24 <__udivmodsi4>
    c45e:	6b 81       	ldd	r22, Y+3	; 0x03
    c460:	7c 81       	ldd	r23, Y+4	; 0x04
    c462:	8d 81       	ldd	r24, Y+5	; 0x05
    c464:	9e 81       	ldd	r25, Y+6	; 0x06
    c466:	62 17       	cp	r22, r18
    c468:	73 07       	cpc	r23, r19
    c46a:	84 07       	cpc	r24, r20
    c46c:	95 07       	cpc	r25, r21
    c46e:	c8 f0       	brcs	.+50     	; 0xc4a2 <f_lseek+0x36a>
    c470:	88 27       	eor	r24, r24
    c472:	99 27       	eor	r25, r25
    c474:	dc 01       	movw	r26, r24
    c476:	88 19       	sub	r24, r8
    c478:	99 09       	sbc	r25, r9
    c47a:	aa 09       	sbc	r26, r10
    c47c:	bb 09       	sbc	r27, r11
    c47e:	48 22       	and	r4, r24
    c480:	59 22       	and	r5, r25
    c482:	6a 22       	and	r6, r26
    c484:	7b 22       	and	r7, r27
    c486:	f1 01       	movw	r30, r2
    c488:	40 8a       	std	Z+16, r4	; 0x10
    c48a:	51 8a       	std	Z+17, r5	; 0x11
    c48c:	62 8a       	std	Z+18, r6	; 0x12
    c48e:	73 8a       	std	Z+19, r7	; 0x13
    c490:	c4 18       	sub	r12, r4
    c492:	d5 08       	sbc	r13, r5
    c494:	e6 08       	sbc	r14, r6
    c496:	f7 08       	sbc	r15, r7
    c498:	44 89       	ldd	r20, Z+20	; 0x14
    c49a:	55 89       	ldd	r21, Z+21	; 0x15
    c49c:	66 89       	ldd	r22, Z+22	; 0x16
    c49e:	77 89       	ldd	r23, Z+23	; 0x17
    c4a0:	29 c0       	rjmp	.+82     	; 0xc4f4 <f_lseek+0x3bc>
    c4a2:	f1 01       	movw	r30, r2
    c4a4:	46 81       	ldd	r20, Z+6	; 0x06
    c4a6:	57 81       	ldd	r21, Z+7	; 0x07
    c4a8:	60 85       	ldd	r22, Z+8	; 0x08
    c4aa:	71 85       	ldd	r23, Z+9	; 0x09
    c4ac:	41 15       	cp	r20, r1
    c4ae:	51 05       	cpc	r21, r1
    c4b0:	61 05       	cpc	r22, r1
    c4b2:	71 05       	cpc	r23, r1
    c4b4:	d1 f4       	brne	.+52     	; 0xc4ea <f_lseek+0x3b2>
    c4b6:	40 e0       	ldi	r20, 0x00	; 0
    c4b8:	50 e0       	ldi	r21, 0x00	; 0
    c4ba:	ba 01       	movw	r22, r20
    c4bc:	c1 01       	movw	r24, r2
    c4be:	0e 94 db 50 	call	0xa1b6	; 0xa1b6 <create_chain>
    c4c2:	ab 01       	movw	r20, r22
    c4c4:	bc 01       	movw	r22, r24
    c4c6:	41 30       	cpi	r20, 0x01	; 1
    c4c8:	51 05       	cpc	r21, r1
    c4ca:	61 05       	cpc	r22, r1
    c4cc:	71 05       	cpc	r23, r1
    c4ce:	09 f4       	brne	.+2      	; 0xc4d2 <f_lseek+0x39a>
    c4d0:	91 ce       	rjmp	.-734    	; 0xc1f4 <f_lseek+0xbc>
    c4d2:	4f 3f       	cpi	r20, 0xFF	; 255
    c4d4:	ff ef       	ldi	r31, 0xFF	; 255
    c4d6:	5f 07       	cpc	r21, r31
    c4d8:	6f 07       	cpc	r22, r31
    c4da:	7f 07       	cpc	r23, r31
    c4dc:	09 f4       	brne	.+2      	; 0xc4e0 <f_lseek+0x3a8>
    c4de:	92 ce       	rjmp	.-732    	; 0xc204 <f_lseek+0xcc>
    c4e0:	f1 01       	movw	r30, r2
    c4e2:	46 83       	std	Z+6, r20	; 0x06
    c4e4:	57 83       	std	Z+7, r21	; 0x07
    c4e6:	60 87       	std	Z+8, r22	; 0x08
    c4e8:	71 87       	std	Z+9, r23	; 0x09
    c4ea:	f1 01       	movw	r30, r2
    c4ec:	44 8b       	std	Z+20, r20	; 0x14
    c4ee:	55 8b       	std	Z+21, r21	; 0x15
    c4f0:	66 8b       	std	Z+22, r22	; 0x16
    c4f2:	77 8b       	std	Z+23, r23	; 0x17
    c4f4:	41 15       	cp	r20, r1
    c4f6:	51 05       	cpc	r21, r1
    c4f8:	61 05       	cpc	r22, r1
    c4fa:	71 05       	cpc	r23, r1
    c4fc:	09 f0       	breq	.+2      	; 0xc500 <f_lseek+0x3c8>
    c4fe:	40 c0       	rjmp	.+128    	; 0xc580 <f_lseek+0x448>
    c500:	c1 2c       	mov	r12, r1
    c502:	d1 2c       	mov	r13, r1
    c504:	76 01       	movw	r14, r12
    c506:	79 c0       	rjmp	.+242    	; 0xc5fa <f_lseek+0x4c2>
    c508:	c8 18       	sub	r12, r8
    c50a:	d9 08       	sbc	r13, r9
    c50c:	ea 08       	sbc	r14, r10
    c50e:	fb 08       	sbc	r15, r11
    c510:	f1 01       	movw	r30, r2
    c512:	80 89       	ldd	r24, Z+16	; 0x10
    c514:	91 89       	ldd	r25, Z+17	; 0x11
    c516:	a2 89       	ldd	r26, Z+18	; 0x12
    c518:	b3 89       	ldd	r27, Z+19	; 0x13
    c51a:	88 0d       	add	r24, r8
    c51c:	99 1d       	adc	r25, r9
    c51e:	aa 1d       	adc	r26, r10
    c520:	bb 1d       	adc	r27, r11
    c522:	80 8b       	std	Z+16, r24	; 0x10
    c524:	91 8b       	std	Z+17, r25	; 0x11
    c526:	a2 8b       	std	Z+18, r26	; 0x12
    c528:	b3 8b       	std	Z+19, r27	; 0x13
    c52a:	86 85       	ldd	r24, Z+14	; 0x0e
    c52c:	81 ff       	sbrs	r24, 1
    c52e:	2f c0       	rjmp	.+94     	; 0xc58e <f_lseek+0x456>
    c530:	c1 01       	movw	r24, r2
    c532:	0e 94 db 50 	call	0xa1b6	; 0xa1b6 <create_chain>
    c536:	ab 01       	movw	r20, r22
    c538:	bc 01       	movw	r22, r24
    c53a:	41 15       	cp	r20, r1
    c53c:	51 05       	cpc	r21, r1
    c53e:	61 05       	cpc	r22, r1
    c540:	71 05       	cpc	r23, r1
    c542:	61 f1       	breq	.+88     	; 0xc59c <f_lseek+0x464>
    c544:	4f 3f       	cpi	r20, 0xFF	; 255
    c546:	bf ef       	ldi	r27, 0xFF	; 255
    c548:	5b 07       	cpc	r21, r27
    c54a:	6b 07       	cpc	r22, r27
    c54c:	7b 07       	cpc	r23, r27
    c54e:	09 f4       	brne	.+2      	; 0xc552 <f_lseek+0x41a>
    c550:	59 ce       	rjmp	.-846    	; 0xc204 <f_lseek+0xcc>
    c552:	42 30       	cpi	r20, 0x02	; 2
    c554:	51 05       	cpc	r21, r1
    c556:	61 05       	cpc	r22, r1
    c558:	71 05       	cpc	r23, r1
    c55a:	08 f4       	brcc	.+2      	; 0xc55e <f_lseek+0x426>
    c55c:	4b ce       	rjmp	.-874    	; 0xc1f4 <f_lseek+0xbc>
    c55e:	e9 81       	ldd	r30, Y+1	; 0x01
    c560:	fa 81       	ldd	r31, Y+2	; 0x02
    c562:	81 8d       	ldd	r24, Z+25	; 0x19
    c564:	92 8d       	ldd	r25, Z+26	; 0x1a
    c566:	a3 8d       	ldd	r26, Z+27	; 0x1b
    c568:	b4 8d       	ldd	r27, Z+28	; 0x1c
    c56a:	48 17       	cp	r20, r24
    c56c:	59 07       	cpc	r21, r25
    c56e:	6a 07       	cpc	r22, r26
    c570:	7b 07       	cpc	r23, r27
    c572:	08 f0       	brcs	.+2      	; 0xc576 <f_lseek+0x43e>
    c574:	3f ce       	rjmp	.-898    	; 0xc1f4 <f_lseek+0xbc>
    c576:	f1 01       	movw	r30, r2
    c578:	44 8b       	std	Z+20, r20	; 0x14
    c57a:	55 8b       	std	Z+21, r21	; 0x15
    c57c:	66 8b       	std	Z+22, r22	; 0x16
    c57e:	77 8b       	std	Z+23, r23	; 0x17
    c580:	8c 14       	cp	r8, r12
    c582:	9d 04       	cpc	r9, r13
    c584:	ae 04       	cpc	r10, r14
    c586:	bf 04       	cpc	r11, r15
    c588:	08 f4       	brcc	.+2      	; 0xc58c <f_lseek+0x454>
    c58a:	be cf       	rjmp	.-132    	; 0xc508 <f_lseek+0x3d0>
    c58c:	0a c0       	rjmp	.+20     	; 0xc5a2 <f_lseek+0x46a>
    c58e:	80 81       	ld	r24, Z
    c590:	91 81       	ldd	r25, Z+1	; 0x01
    c592:	0e 94 66 4f 	call	0x9ecc	; 0x9ecc <get_fat.isra.9>
    c596:	ab 01       	movw	r20, r22
    c598:	bc 01       	movw	r22, r24
    c59a:	d4 cf       	rjmp	.-88     	; 0xc544 <f_lseek+0x40c>
    c59c:	c1 2c       	mov	r12, r1
    c59e:	d1 2c       	mov	r13, r1
    c5a0:	76 01       	movw	r14, r12
    c5a2:	f1 01       	movw	r30, r2
    c5a4:	80 89       	ldd	r24, Z+16	; 0x10
    c5a6:	91 89       	ldd	r25, Z+17	; 0x11
    c5a8:	a2 89       	ldd	r26, Z+18	; 0x12
    c5aa:	b3 89       	ldd	r27, Z+19	; 0x13
    c5ac:	8c 0d       	add	r24, r12
    c5ae:	9d 1d       	adc	r25, r13
    c5b0:	ae 1d       	adc	r26, r14
    c5b2:	bf 1d       	adc	r27, r15
    c5b4:	80 8b       	std	Z+16, r24	; 0x10
    c5b6:	91 8b       	std	Z+17, r25	; 0x11
    c5b8:	a2 8b       	std	Z+18, r26	; 0x12
    c5ba:	b3 8b       	std	Z+19, r27	; 0x13
    c5bc:	d7 01       	movw	r26, r14
    c5be:	c6 01       	movw	r24, r12
    c5c0:	91 70       	andi	r25, 0x01	; 1
    c5c2:	aa 27       	eor	r26, r26
    c5c4:	bb 27       	eor	r27, r27
    c5c6:	89 2b       	or	r24, r25
    c5c8:	8a 2b       	or	r24, r26
    c5ca:	8b 2b       	or	r24, r27
    c5cc:	09 f4       	brne	.+2      	; 0xc5d0 <f_lseek+0x498>
    c5ce:	98 cf       	rjmp	.-208    	; 0xc500 <f_lseek+0x3c8>
    c5d0:	89 81       	ldd	r24, Y+1	; 0x01
    c5d2:	9a 81       	ldd	r25, Y+2	; 0x02
    c5d4:	0e 94 09 48 	call	0x9012	; 0x9012 <clst2sect>
    c5d8:	61 15       	cp	r22, r1
    c5da:	71 05       	cpc	r23, r1
    c5dc:	81 05       	cpc	r24, r1
    c5de:	91 05       	cpc	r25, r1
    c5e0:	09 f4       	brne	.+2      	; 0xc5e4 <f_lseek+0x4ac>
    c5e2:	08 ce       	rjmp	.-1008   	; 0xc1f4 <f_lseek+0xbc>
    c5e4:	29 e0       	ldi	r18, 0x09	; 9
    c5e6:	f6 94       	lsr	r15
    c5e8:	e7 94       	ror	r14
    c5ea:	d7 94       	ror	r13
    c5ec:	c7 94       	ror	r12
    c5ee:	2a 95       	dec	r18
    c5f0:	d1 f7       	brne	.-12     	; 0xc5e6 <f_lseek+0x4ae>
    c5f2:	c6 0e       	add	r12, r22
    c5f4:	d7 1e       	adc	r13, r23
    c5f6:	e8 1e       	adc	r14, r24
    c5f8:	f9 1e       	adc	r15, r25
    c5fa:	f1 01       	movw	r30, r2
    c5fc:	80 89       	ldd	r24, Z+16	; 0x10
    c5fe:	91 89       	ldd	r25, Z+17	; 0x11
    c600:	a2 89       	ldd	r26, Z+18	; 0x12
    c602:	b3 89       	ldd	r27, Z+19	; 0x13
    c604:	42 85       	ldd	r20, Z+10	; 0x0a
    c606:	53 85       	ldd	r21, Z+11	; 0x0b
    c608:	64 85       	ldd	r22, Z+12	; 0x0c
    c60a:	75 85       	ldd	r23, Z+13	; 0x0d
    c60c:	48 17       	cp	r20, r24
    c60e:	59 07       	cpc	r21, r25
    c610:	6a 07       	cpc	r22, r26
    c612:	7b 07       	cpc	r23, r27
    c614:	38 f4       	brcc	.+14     	; 0xc624 <f_lseek+0x4ec>
    c616:	82 87       	std	Z+10, r24	; 0x0a
    c618:	93 87       	std	Z+11, r25	; 0x0b
    c61a:	a4 87       	std	Z+12, r26	; 0x0c
    c61c:	b5 87       	std	Z+13, r27	; 0x0d
    c61e:	26 85       	ldd	r18, Z+14	; 0x0e
    c620:	20 64       	ori	r18, 0x40	; 64
    c622:	26 87       	std	Z+14, r18	; 0x0e
    c624:	91 70       	andi	r25, 0x01	; 1
    c626:	aa 27       	eor	r26, r26
    c628:	bb 27       	eor	r27, r27
    c62a:	89 2b       	or	r24, r25
    c62c:	8a 2b       	or	r24, r26
    c62e:	8b 2b       	or	r24, r27
    c630:	79 f1       	breq	.+94     	; 0xc690 <f_lseek+0x558>
    c632:	f1 01       	movw	r30, r2
    c634:	20 8d       	ldd	r18, Z+24	; 0x18
    c636:	31 8d       	ldd	r19, Z+25	; 0x19
    c638:	42 8d       	ldd	r20, Z+26	; 0x1a
    c63a:	53 8d       	ldd	r21, Z+27	; 0x1b
    c63c:	2c 15       	cp	r18, r12
    c63e:	3d 05       	cpc	r19, r13
    c640:	4e 05       	cpc	r20, r14
    c642:	5f 05       	cpc	r21, r15
    c644:	29 f1       	breq	.+74     	; 0xc690 <f_lseek+0x558>
    c646:	86 85       	ldd	r24, Z+14	; 0x0e
    c648:	b1 01       	movw	r22, r2
    c64a:	6c 5d       	subi	r22, 0xDC	; 220
    c64c:	7f 4f       	sbci	r23, 0xFF	; 255
    c64e:	5b 01       	movw	r10, r22
    c650:	87 ff       	sbrs	r24, 7
    c652:	0d c0       	rjmp	.+26     	; 0xc66e <f_lseek+0x536>
    c654:	e9 81       	ldd	r30, Y+1	; 0x01
    c656:	fa 81       	ldd	r31, Y+2	; 0x02
    c658:	01 e0       	ldi	r16, 0x01	; 1
    c65a:	10 e0       	ldi	r17, 0x00	; 0
    c65c:	81 81       	ldd	r24, Z+1	; 0x01
    c65e:	aa d6       	rcall	.+3412   	; 0xd3b4 <disk_write>
    c660:	89 2b       	or	r24, r25
    c662:	09 f0       	breq	.+2      	; 0xc666 <f_lseek+0x52e>
    c664:	cf cd       	rjmp	.-1122   	; 0xc204 <f_lseek+0xcc>
    c666:	f1 01       	movw	r30, r2
    c668:	86 85       	ldd	r24, Z+14	; 0x0e
    c66a:	8f 77       	andi	r24, 0x7F	; 127
    c66c:	86 87       	std	Z+14, r24	; 0x0e
    c66e:	e9 81       	ldd	r30, Y+1	; 0x01
    c670:	fa 81       	ldd	r31, Y+2	; 0x02
    c672:	01 e0       	ldi	r16, 0x01	; 1
    c674:	10 e0       	ldi	r17, 0x00	; 0
    c676:	a7 01       	movw	r20, r14
    c678:	96 01       	movw	r18, r12
    c67a:	b5 01       	movw	r22, r10
    c67c:	81 81       	ldd	r24, Z+1	; 0x01
    c67e:	8a d6       	rcall	.+3348   	; 0xd394 <disk_read>
    c680:	89 2b       	or	r24, r25
    c682:	09 f0       	breq	.+2      	; 0xc686 <f_lseek+0x54e>
    c684:	bf cd       	rjmp	.-1154   	; 0xc204 <f_lseek+0xcc>
    c686:	f1 01       	movw	r30, r2
    c688:	c0 8e       	std	Z+24, r12	; 0x18
    c68a:	d1 8e       	std	Z+25, r13	; 0x19
    c68c:	e2 8e       	std	Z+26, r14	; 0x1a
    c68e:	f3 8e       	std	Z+27, r15	; 0x1b
    c690:	80 e0       	ldi	r24, 0x00	; 0
    c692:	bb cd       	rjmp	.-1162   	; 0xc20a <f_lseek+0xd2>
    c694:	81 e1       	ldi	r24, 0x11	; 17
    c696:	b9 cd       	rjmp	.-1166   	; 0xc20a <f_lseek+0xd2>
    c698:	80 e0       	ldi	r24, 0x00	; 0
    c69a:	90 e0       	ldi	r25, 0x00	; 0
    c69c:	dc 01       	movw	r26, r24
    c69e:	c1 2c       	mov	r12, r1
    c6a0:	d1 2c       	mov	r13, r1
    c6a2:	76 01       	movw	r14, r12
    c6a4:	bf cf       	rjmp	.-130    	; 0xc624 <f_lseek+0x4ec>
    c6a6:	2a 96       	adiw	r28, 0x0a	; 10
    c6a8:	e2 e1       	ldi	r30, 0x12	; 18
    c6aa:	0c 94 1b e7 	jmp	0x1ce36	; 0x1ce36 <__epilogue_restores__>

0000c6ae <f_opendir>:
    c6ae:	a4 e0       	ldi	r26, 0x04	; 4
    c6b0:	b0 e0       	ldi	r27, 0x00	; 0
    c6b2:	ed e5       	ldi	r30, 0x5D	; 93
    c6b4:	f3 e6       	ldi	r31, 0x63	; 99
    c6b6:	0c 94 09 e7 	jmp	0x1ce12	; 0x1ce12 <__prologue_saves__+0x14>
    c6ba:	7c 83       	std	Y+4, r23	; 0x04
    c6bc:	6b 83       	std	Y+3, r22	; 0x03
    c6be:	00 97       	sbiw	r24, 0x00	; 0
    c6c0:	09 f4       	brne	.+2      	; 0xc6c4 <f_opendir+0x16>
    c6c2:	48 c0       	rjmp	.+144    	; 0xc754 <f_opendir+0xa6>
    c6c4:	8c 01       	movw	r16, r24
    c6c6:	40 e0       	ldi	r20, 0x00	; 0
    c6c8:	be 01       	movw	r22, r28
    c6ca:	6f 5f       	subi	r22, 0xFF	; 255
    c6cc:	7f 4f       	sbci	r23, 0xFF	; 255
    c6ce:	ce 01       	movw	r24, r28
    c6d0:	03 96       	adiw	r24, 0x03	; 3
    c6d2:	0e 94 13 4c 	call	0x9826	; 0x9826 <mount_volume>
    c6d6:	7c 01       	movw	r14, r24
    c6d8:	89 2b       	or	r24, r25
    c6da:	b9 f5       	brne	.+110    	; 0xc74a <f_opendir+0x9c>
    c6dc:	89 81       	ldd	r24, Y+1	; 0x01
    c6de:	9a 81       	ldd	r25, Y+2	; 0x02
    c6e0:	f8 01       	movw	r30, r16
    c6e2:	91 83       	std	Z+1, r25	; 0x01
    c6e4:	80 83       	st	Z, r24
    c6e6:	80 e0       	ldi	r24, 0x00	; 0
    c6e8:	92 e0       	ldi	r25, 0x02	; 2
    c6ea:	98 d5       	rcall	.+2864   	; 0xd21c <ff_memalloc>
    c6ec:	6c 01       	movw	r12, r24
    c6ee:	00 97       	sbiw	r24, 0x00	; 0
    c6f0:	99 f1       	breq	.+102    	; 0xc758 <f_opendir+0xaa>
    c6f2:	e9 81       	ldd	r30, Y+1	; 0x01
    c6f4:	fa 81       	ldd	r31, Y+2	; 0x02
    c6f6:	94 87       	std	Z+12, r25	; 0x0c
    c6f8:	83 87       	std	Z+11, r24	; 0x0b
    c6fa:	6b 81       	ldd	r22, Y+3	; 0x03
    c6fc:	7c 81       	ldd	r23, Y+4	; 0x04
    c6fe:	c8 01       	movw	r24, r16
    c700:	0e 94 60 57 	call	0xaec0	; 0xaec0 <follow_path>
    c704:	7c 01       	movw	r14, r24
    c706:	89 2b       	or	r24, r25
    c708:	b9 f4       	brne	.+46     	; 0xc738 <f_opendir+0x8a>
    c70a:	f8 01       	movw	r30, r16
    c70c:	87 a1       	ldd	r24, Z+39	; 0x27
    c70e:	87 fd       	sbrc	r24, 7
    c710:	28 c0       	rjmp	.+80     	; 0xc762 <f_opendir+0xb4>
    c712:	84 81       	ldd	r24, Z+4	; 0x04
    c714:	84 ff       	sbrs	r24, 4
    c716:	0d c0       	rjmp	.+26     	; 0xc732 <f_opendir+0x84>
    c718:	62 8d       	ldd	r22, Z+26	; 0x1a
    c71a:	73 8d       	ldd	r23, Z+27	; 0x1b
    c71c:	e9 81       	ldd	r30, Y+1	; 0x01
    c71e:	fa 81       	ldd	r31, Y+2	; 0x02
    c720:	80 81       	ld	r24, Z
    c722:	0e 94 09 4a 	call	0x9412	; 0x9412 <ld_clust.isra.3>
    c726:	f8 01       	movw	r30, r16
    c728:	66 83       	std	Z+6, r22	; 0x06
    c72a:	77 83       	std	Z+7, r23	; 0x07
    c72c:	80 87       	std	Z+8, r24	; 0x08
    c72e:	91 87       	std	Z+9, r25	; 0x09
    c730:	18 c0       	rjmp	.+48     	; 0xc762 <f_opendir+0xb4>
    c732:	95 e0       	ldi	r25, 0x05	; 5
    c734:	e9 2e       	mov	r14, r25
    c736:	f1 2c       	mov	r15, r1
    c738:	c6 01       	movw	r24, r12
    c73a:	73 d5       	rcall	.+2790   	; 0xd222 <ff_memfree>
    c73c:	f4 e0       	ldi	r31, 0x04	; 4
    c73e:	ef 16       	cp	r14, r31
    c740:	f1 04       	cpc	r15, r1
    c742:	f1 f0       	breq	.+60     	; 0xc780 <f_opendir+0xd2>
    c744:	e1 14       	cp	r14, r1
    c746:	f1 04       	cpc	r15, r1
    c748:	49 f0       	breq	.+18     	; 0xc75c <f_opendir+0xae>
    c74a:	f8 01       	movw	r30, r16
    c74c:	11 82       	std	Z+1, r1	; 0x01
    c74e:	10 82       	st	Z, r1
    c750:	c7 01       	movw	r24, r14
    c752:	1a c0       	rjmp	.+52     	; 0xc788 <f_opendir+0xda>
    c754:	89 e0       	ldi	r24, 0x09	; 9
    c756:	03 c0       	rjmp	.+6      	; 0xc75e <f_opendir+0xb0>
    c758:	81 e1       	ldi	r24, 0x11	; 17
    c75a:	01 c0       	rjmp	.+2      	; 0xc75e <f_opendir+0xb0>
    c75c:	80 e0       	ldi	r24, 0x00	; 0
    c75e:	90 e0       	ldi	r25, 0x00	; 0
    c760:	13 c0       	rjmp	.+38     	; 0xc788 <f_opendir+0xda>
    c762:	e9 81       	ldd	r30, Y+1	; 0x01
    c764:	fa 81       	ldd	r31, Y+2	; 0x02
    c766:	85 81       	ldd	r24, Z+5	; 0x05
    c768:	96 81       	ldd	r25, Z+6	; 0x06
    c76a:	f8 01       	movw	r30, r16
    c76c:	93 83       	std	Z+3, r25	; 0x03
    c76e:	82 83       	std	Z+2, r24	; 0x02
    c770:	40 e0       	ldi	r20, 0x00	; 0
    c772:	50 e0       	ldi	r21, 0x00	; 0
    c774:	ba 01       	movw	r22, r20
    c776:	c8 01       	movw	r24, r16
    c778:	0e 94 1a 50 	call	0xa034	; 0xa034 <dir_sdi>
    c77c:	7c 01       	movw	r14, r24
    c77e:	dc cf       	rjmp	.-72     	; 0xc738 <f_opendir+0x8a>
    c780:	85 e0       	ldi	r24, 0x05	; 5
    c782:	e8 2e       	mov	r14, r24
    c784:	f1 2c       	mov	r15, r1
    c786:	e1 cf       	rjmp	.-62     	; 0xc74a <f_opendir+0x9c>
    c788:	24 96       	adiw	r28, 0x04	; 4
    c78a:	e8 e0       	ldi	r30, 0x08	; 8
    c78c:	0c 94 25 e7 	jmp	0x1ce4a	; 0x1ce4a <__epilogue_restores__+0x14>

0000c790 <f_closedir>:
    c790:	a2 e0       	ldi	r26, 0x02	; 2
    c792:	b0 e0       	ldi	r27, 0x00	; 0
    c794:	ee ec       	ldi	r30, 0xCE	; 206
    c796:	f3 e6       	ldi	r31, 0x63	; 99
    c798:	0c 94 0d e7 	jmp	0x1ce1a	; 0x1ce1a <__prologue_saves__+0x1c>
    c79c:	8c 01       	movw	r16, r24
    c79e:	be 01       	movw	r22, r28
    c7a0:	6f 5f       	subi	r22, 0xFF	; 255
    c7a2:	7f 4f       	sbci	r23, 0xFF	; 255
    c7a4:	0e 94 a8 48 	call	0x9150	; 0x9150 <validate>
    c7a8:	00 97       	sbiw	r24, 0x00	; 0
    c7aa:	19 f4       	brne	.+6      	; 0xc7b2 <f_closedir+0x22>
    c7ac:	f8 01       	movw	r30, r16
    c7ae:	11 82       	std	Z+1, r1	; 0x01
    c7b0:	10 82       	st	Z, r1
    c7b2:	22 96       	adiw	r28, 0x02	; 2
    c7b4:	e4 e0       	ldi	r30, 0x04	; 4
    c7b6:	0c 94 29 e7 	jmp	0x1ce52	; 0x1ce52 <__epilogue_restores__+0x1c>

0000c7ba <f_readdir>:
    c7ba:	a2 e0       	ldi	r26, 0x02	; 2
    c7bc:	b0 e0       	ldi	r27, 0x00	; 0
    c7be:	e3 ee       	ldi	r30, 0xE3	; 227
    c7c0:	f3 e6       	ldi	r31, 0x63	; 99
    c7c2:	0c 94 07 e7 	jmp	0x1ce0e	; 0x1ce0e <__prologue_saves__+0x10>
    c7c6:	7c 01       	movw	r14, r24
    c7c8:	5b 01       	movw	r10, r22
    c7ca:	be 01       	movw	r22, r28
    c7cc:	6f 5f       	subi	r22, 0xFF	; 255
    c7ce:	7f 4f       	sbci	r23, 0xFF	; 255
    c7d0:	0e 94 a8 48 	call	0x9150	; 0x9150 <validate>
    c7d4:	00 97       	sbiw	r24, 0x00	; 0
    c7d6:	89 f5       	brne	.+98     	; 0xc83a <f_readdir+0x80>
    c7d8:	a1 14       	cp	r10, r1
    c7da:	b1 04       	cpc	r11, r1
    c7dc:	39 f4       	brne	.+14     	; 0xc7ec <f_readdir+0x32>
    c7de:	40 e0       	ldi	r20, 0x00	; 0
    c7e0:	50 e0       	ldi	r21, 0x00	; 0
    c7e2:	ba 01       	movw	r22, r20
    c7e4:	c7 01       	movw	r24, r14
    c7e6:	0e 94 1a 50 	call	0xa034	; 0xa034 <dir_sdi>
    c7ea:	27 c0       	rjmp	.+78     	; 0xc83a <f_readdir+0x80>
    c7ec:	80 e0       	ldi	r24, 0x00	; 0
    c7ee:	92 e0       	ldi	r25, 0x02	; 2
    c7f0:	15 d5       	rcall	.+2602   	; 0xd21c <ff_memalloc>
    c7f2:	6c 01       	movw	r12, r24
    c7f4:	00 97       	sbiw	r24, 0x00	; 0
    c7f6:	f9 f0       	breq	.+62     	; 0xc836 <f_readdir+0x7c>
    c7f8:	e9 81       	ldd	r30, Y+1	; 0x01
    c7fa:	fa 81       	ldd	r31, Y+2	; 0x02
    c7fc:	94 87       	std	Z+12, r25	; 0x0c
    c7fe:	83 87       	std	Z+11, r24	; 0x0b
    c800:	60 e0       	ldi	r22, 0x00	; 0
    c802:	70 e0       	ldi	r23, 0x00	; 0
    c804:	c7 01       	movw	r24, r14
    c806:	0e 94 b3 53 	call	0xa766	; 0xa766 <dir_read>
    c80a:	8c 01       	movw	r16, r24
    c80c:	8b 7f       	andi	r24, 0xFB	; 251
    c80e:	89 2b       	or	r24, r25
    c810:	71 f4       	brne	.+28     	; 0xc82e <f_readdir+0x74>
    c812:	b5 01       	movw	r22, r10
    c814:	c7 01       	movw	r24, r14
    c816:	0e 94 d4 48 	call	0x91a8	; 0x91a8 <get_fileinfo>
    c81a:	60 e0       	ldi	r22, 0x00	; 0
    c81c:	70 e0       	ldi	r23, 0x00	; 0
    c81e:	c7 01       	movw	r24, r14
    c820:	0e 94 92 52 	call	0xa524	; 0xa524 <dir_next>
    c824:	8c 01       	movw	r16, r24
    c826:	04 97       	sbiw	r24, 0x04	; 4
    c828:	11 f4       	brne	.+4      	; 0xc82e <f_readdir+0x74>
    c82a:	00 e0       	ldi	r16, 0x00	; 0
    c82c:	10 e0       	ldi	r17, 0x00	; 0
    c82e:	c6 01       	movw	r24, r12
    c830:	f8 d4       	rcall	.+2544   	; 0xd222 <ff_memfree>
    c832:	c8 01       	movw	r24, r16
    c834:	02 c0       	rjmp	.+4      	; 0xc83a <f_readdir+0x80>
    c836:	81 e1       	ldi	r24, 0x11	; 17
    c838:	90 e0       	ldi	r25, 0x00	; 0
    c83a:	22 96       	adiw	r28, 0x02	; 2
    c83c:	ea e0       	ldi	r30, 0x0A	; 10
    c83e:	0c 94 23 e7 	jmp	0x1ce46	; 0x1ce46 <__epilogue_restores__+0x10>

0000c842 <f_stat>:
    c842:	a0 e3       	ldi	r26, 0x30	; 48
    c844:	b0 e0       	ldi	r27, 0x00	; 0
    c846:	e7 e2       	ldi	r30, 0x27	; 39
    c848:	f4 e6       	ldi	r31, 0x64	; 100
    c84a:	0c 94 09 e7 	jmp	0x1ce12	; 0x1ce12 <__prologue_saves__+0x14>
    c84e:	98 ab       	std	Y+48, r25	; 0x30
    c850:	8f a7       	std	Y+47, r24	; 0x2f
    c852:	6b 01       	movw	r12, r22
    c854:	40 e0       	ldi	r20, 0x00	; 0
    c856:	be 01       	movw	r22, r28
    c858:	6f 5f       	subi	r22, 0xFF	; 255
    c85a:	7f 4f       	sbci	r23, 0xFF	; 255
    c85c:	ce 01       	movw	r24, r28
    c85e:	8f 96       	adiw	r24, 0x2f	; 47
    c860:	0e 94 13 4c 	call	0x9826	; 0x9826 <mount_volume>
    c864:	00 97       	sbiw	r24, 0x00	; 0
    c866:	39 f5       	brne	.+78     	; 0xc8b6 <f_stat+0x74>
    c868:	80 e0       	ldi	r24, 0x00	; 0
    c86a:	92 e0       	ldi	r25, 0x02	; 2
    c86c:	d7 d4       	rcall	.+2478   	; 0xd21c <ff_memalloc>
    c86e:	7c 01       	movw	r14, r24
    c870:	00 97       	sbiw	r24, 0x00	; 0
    c872:	f9 f0       	breq	.+62     	; 0xc8b2 <f_stat+0x70>
    c874:	e9 81       	ldd	r30, Y+1	; 0x01
    c876:	fa 81       	ldd	r31, Y+2	; 0x02
    c878:	94 87       	std	Z+12, r25	; 0x0c
    c87a:	83 87       	std	Z+11, r24	; 0x0b
    c87c:	6f a5       	ldd	r22, Y+47	; 0x2f
    c87e:	78 a9       	ldd	r23, Y+48	; 0x30
    c880:	ce 01       	movw	r24, r28
    c882:	01 96       	adiw	r24, 0x01	; 1
    c884:	0e 94 60 57 	call	0xaec0	; 0xaec0 <follow_path>
    c888:	8c 01       	movw	r16, r24
    c88a:	89 2b       	or	r24, r25
    c88c:	71 f4       	brne	.+28     	; 0xc8aa <f_stat+0x68>
    c88e:	88 a5       	ldd	r24, Y+40	; 0x28
    c890:	87 fd       	sbrc	r24, 7
    c892:	09 c0       	rjmp	.+18     	; 0xc8a6 <f_stat+0x64>
    c894:	c1 14       	cp	r12, r1
    c896:	d1 04       	cpc	r13, r1
    c898:	41 f0       	breq	.+16     	; 0xc8aa <f_stat+0x68>
    c89a:	b6 01       	movw	r22, r12
    c89c:	ce 01       	movw	r24, r28
    c89e:	01 96       	adiw	r24, 0x01	; 1
    c8a0:	0e 94 d4 48 	call	0x91a8	; 0x91a8 <get_fileinfo>
    c8a4:	02 c0       	rjmp	.+4      	; 0xc8aa <f_stat+0x68>
    c8a6:	06 e0       	ldi	r16, 0x06	; 6
    c8a8:	10 e0       	ldi	r17, 0x00	; 0
    c8aa:	c7 01       	movw	r24, r14
    c8ac:	ba d4       	rcall	.+2420   	; 0xd222 <ff_memfree>
    c8ae:	c8 01       	movw	r24, r16
    c8b0:	02 c0       	rjmp	.+4      	; 0xc8b6 <f_stat+0x74>
    c8b2:	81 e1       	ldi	r24, 0x11	; 17
    c8b4:	90 e0       	ldi	r25, 0x00	; 0
    c8b6:	e0 96       	adiw	r28, 0x30	; 48
    c8b8:	e8 e0       	ldi	r30, 0x08	; 8
    c8ba:	0c 94 25 e7 	jmp	0x1ce4a	; 0x1ce4a <__epilogue_restores__+0x14>

0000c8be <f_getfree>:
    c8be:	aa e0       	ldi	r26, 0x0A	; 10
    c8c0:	b0 e0       	ldi	r27, 0x00	; 0
    c8c2:	e5 e6       	ldi	r30, 0x65	; 101
    c8c4:	f4 e6       	ldi	r31, 0x64	; 100
    c8c6:	0c 94 ff e6 	jmp	0x1cdfe	; 0x1cdfe <__prologue_saves__>
    c8ca:	9c 83       	std	Y+4, r25	; 0x04
    c8cc:	8b 83       	std	Y+3, r24	; 0x03
    c8ce:	7e 83       	std	Y+6, r23	; 0x06
    c8d0:	6d 83       	std	Y+5, r22	; 0x05
    c8d2:	7a 01       	movw	r14, r20
    c8d4:	40 e0       	ldi	r20, 0x00	; 0
    c8d6:	be 01       	movw	r22, r28
    c8d8:	6f 5f       	subi	r22, 0xFF	; 255
    c8da:	7f 4f       	sbci	r23, 0xFF	; 255
    c8dc:	ce 01       	movw	r24, r28
    c8de:	03 96       	adiw	r24, 0x03	; 3
    c8e0:	0e 94 13 4c 	call	0x9826	; 0x9826 <mount_volume>
    c8e4:	8c 01       	movw	r16, r24
    c8e6:	89 2b       	or	r24, r25
    c8e8:	09 f0       	breq	.+2      	; 0xc8ec <f_getfree+0x2e>
    c8ea:	c4 c0       	rjmp	.+392    	; 0xca74 <f_getfree+0x1b6>
    c8ec:	69 80       	ldd	r6, Y+1	; 0x01
    c8ee:	7a 80       	ldd	r7, Y+2	; 0x02
    c8f0:	d7 01       	movw	r26, r14
    c8f2:	6d 92       	st	X+, r6
    c8f4:	7c 92       	st	X, r7
    c8f6:	f3 01       	movw	r30, r6
    c8f8:	81 89       	ldd	r24, Z+17	; 0x11
    c8fa:	92 89       	ldd	r25, Z+18	; 0x12
    c8fc:	a3 89       	ldd	r26, Z+19	; 0x13
    c8fe:	b4 89       	ldd	r27, Z+20	; 0x14
    c900:	81 8c       	ldd	r8, Z+25	; 0x19
    c902:	92 8c       	ldd	r9, Z+26	; 0x1a
    c904:	a3 8c       	ldd	r10, Z+27	; 0x1b
    c906:	b4 8c       	ldd	r11, Z+28	; 0x1c
    c908:	b5 01       	movw	r22, r10
    c90a:	a4 01       	movw	r20, r8
    c90c:	42 50       	subi	r20, 0x02	; 2
    c90e:	51 09       	sbc	r21, r1
    c910:	61 09       	sbc	r22, r1
    c912:	71 09       	sbc	r23, r1
    c914:	48 17       	cp	r20, r24
    c916:	59 07       	cpc	r21, r25
    c918:	6a 07       	cpc	r22, r26
    c91a:	7b 07       	cpc	r23, r27
    c91c:	38 f0       	brcs	.+14     	; 0xc92c <f_getfree+0x6e>
    c91e:	ed 81       	ldd	r30, Y+5	; 0x05
    c920:	fe 81       	ldd	r31, Y+6	; 0x06
    c922:	80 83       	st	Z, r24
    c924:	91 83       	std	Z+1, r25	; 0x01
    c926:	a2 83       	std	Z+2, r26	; 0x02
    c928:	b3 83       	std	Z+3, r27	; 0x03
    c92a:	a4 c0       	rjmp	.+328    	; 0xca74 <f_getfree+0x1b6>
    c92c:	80 81       	ld	r24, Z
    c92e:	81 30       	cpi	r24, 0x01	; 1
    c930:	a1 f5       	brne	.+104    	; 0xc99a <f_getfree+0xdc>
    c932:	82 e0       	ldi	r24, 0x02	; 2
    c934:	88 2e       	mov	r8, r24
    c936:	91 2c       	mov	r9, r1
    c938:	a1 2c       	mov	r10, r1
    c93a:	b1 2c       	mov	r11, r1
    c93c:	c1 2c       	mov	r12, r1
    c93e:	d1 2c       	mov	r13, r1
    c940:	76 01       	movw	r14, r12
    c942:	b5 01       	movw	r22, r10
    c944:	a4 01       	movw	r20, r8
    c946:	c3 01       	movw	r24, r6
    c948:	0e 94 66 4f 	call	0x9ecc	; 0x9ecc <get_fat.isra.9>
    c94c:	6f 3f       	cpi	r22, 0xFF	; 255
    c94e:	bf ef       	ldi	r27, 0xFF	; 255
    c950:	7b 07       	cpc	r23, r27
    c952:	8b 07       	cpc	r24, r27
    c954:	9b 07       	cpc	r25, r27
    c956:	09 f4       	brne	.+2      	; 0xc95a <f_getfree+0x9c>
    c958:	76 c0       	rjmp	.+236    	; 0xca46 <f_getfree+0x188>
    c95a:	61 30       	cpi	r22, 0x01	; 1
    c95c:	71 05       	cpc	r23, r1
    c95e:	81 05       	cpc	r24, r1
    c960:	91 05       	cpc	r25, r1
    c962:	09 f4       	brne	.+2      	; 0xc966 <f_getfree+0xa8>
    c964:	73 c0       	rjmp	.+230    	; 0xca4c <f_getfree+0x18e>
    c966:	67 2b       	or	r22, r23
    c968:	68 2b       	or	r22, r24
    c96a:	69 2b       	or	r22, r25
    c96c:	29 f4       	brne	.+10     	; 0xc978 <f_getfree+0xba>
    c96e:	ef ef       	ldi	r30, 0xFF	; 255
    c970:	ce 1a       	sub	r12, r30
    c972:	de 0a       	sbc	r13, r30
    c974:	ee 0a       	sbc	r14, r30
    c976:	fe 0a       	sbc	r15, r30
    c978:	ff ef       	ldi	r31, 0xFF	; 255
    c97a:	8f 1a       	sub	r8, r31
    c97c:	9f 0a       	sbc	r9, r31
    c97e:	af 0a       	sbc	r10, r31
    c980:	bf 0a       	sbc	r11, r31
    c982:	e9 81       	ldd	r30, Y+1	; 0x01
    c984:	fa 81       	ldd	r31, Y+2	; 0x02
    c986:	81 8d       	ldd	r24, Z+25	; 0x19
    c988:	92 8d       	ldd	r25, Z+26	; 0x1a
    c98a:	a3 8d       	ldd	r26, Z+27	; 0x1b
    c98c:	b4 8d       	ldd	r27, Z+28	; 0x1c
    c98e:	88 16       	cp	r8, r24
    c990:	99 06       	cpc	r9, r25
    c992:	aa 06       	cpc	r10, r26
    c994:	bb 06       	cpc	r11, r27
    c996:	a8 f2       	brcs	.-86     	; 0xc942 <f_getfree+0x84>
    c998:	5d c0       	rjmp	.+186    	; 0xca54 <f_getfree+0x196>
    c99a:	f3 01       	movw	r30, r6
    c99c:	45 a0       	ldd	r4, Z+37	; 0x25
    c99e:	56 a0       	ldd	r5, Z+38	; 0x26
    c9a0:	67 a0       	ldd	r6, Z+39	; 0x27
    c9a2:	70 a4       	ldd	r7, Z+40	; 0x28
    c9a4:	21 2c       	mov	r2, r1
    c9a6:	31 2c       	mov	r3, r1
    c9a8:	c1 2c       	mov	r12, r1
    c9aa:	d1 2c       	mov	r13, r1
    c9ac:	76 01       	movw	r14, r12
    c9ae:	21 14       	cp	r2, r1
    c9b0:	31 04       	cpc	r3, r1
    c9b2:	b1 f4       	brne	.+44     	; 0xc9e0 <f_getfree+0x122>
    c9b4:	d3 01       	movw	r26, r6
    c9b6:	c2 01       	movw	r24, r4
    c9b8:	01 96       	adiw	r24, 0x01	; 1
    c9ba:	a1 1d       	adc	r26, r1
    c9bc:	b1 1d       	adc	r27, r1
    c9be:	8f 83       	std	Y+7, r24	; 0x07
    c9c0:	98 87       	std	Y+8, r25	; 0x08
    c9c2:	a9 87       	std	Y+9, r26	; 0x09
    c9c4:	ba 87       	std	Y+10, r27	; 0x0a
    c9c6:	b3 01       	movw	r22, r6
    c9c8:	a2 01       	movw	r20, r4
    c9ca:	89 81       	ldd	r24, Y+1	; 0x01
    c9cc:	9a 81       	ldd	r25, Y+2	; 0x02
    c9ce:	0e 94 98 4b 	call	0x9730	; 0x9730 <move_window>
    c9d2:	00 97       	sbiw	r24, 0x00	; 0
    c9d4:	09 f0       	breq	.+2      	; 0xc9d8 <f_getfree+0x11a>
    c9d6:	3d c0       	rjmp	.+122    	; 0xca52 <f_getfree+0x194>
    c9d8:	4f 80       	ldd	r4, Y+7	; 0x07
    c9da:	58 84       	ldd	r5, Y+8	; 0x08
    c9dc:	69 84       	ldd	r6, Y+9	; 0x09
    c9de:	7a 84       	ldd	r7, Y+10	; 0x0a
    c9e0:	e9 81       	ldd	r30, Y+1	; 0x01
    c9e2:	fa 81       	ldd	r31, Y+2	; 0x02
    c9e4:	80 81       	ld	r24, Z
    c9e6:	82 30       	cpi	r24, 0x02	; 2
    c9e8:	79 f4       	brne	.+30     	; 0xca08 <f_getfree+0x14a>
    c9ea:	e2 0d       	add	r30, r2
    c9ec:	f3 1d       	adc	r31, r3
    c9ee:	85 a9       	ldd	r24, Z+53	; 0x35
    c9f0:	96 a9       	ldd	r25, Z+54	; 0x36
    c9f2:	89 2b       	or	r24, r25
    c9f4:	29 f4       	brne	.+10     	; 0xca00 <f_getfree+0x142>
    c9f6:	9f ef       	ldi	r25, 0xFF	; 255
    c9f8:	c9 1a       	sub	r12, r25
    c9fa:	d9 0a       	sbc	r13, r25
    c9fc:	e9 0a       	sbc	r14, r25
    c9fe:	f9 0a       	sbc	r15, r25
    ca00:	a2 e0       	ldi	r26, 0x02	; 2
    ca02:	2a 0e       	add	r2, r26
    ca04:	31 1c       	adc	r3, r1
    ca06:	15 c0       	rjmp	.+42     	; 0xca32 <f_getfree+0x174>
    ca08:	cf 01       	movw	r24, r30
    ca0a:	c5 96       	adiw	r24, 0x35	; 53
    ca0c:	82 0d       	add	r24, r2
    ca0e:	93 1d       	adc	r25, r3
    ca10:	0e 94 d6 47 	call	0x8fac	; 0x8fac <ld_dword>
    ca14:	dc 01       	movw	r26, r24
    ca16:	cb 01       	movw	r24, r22
    ca18:	bf 70       	andi	r27, 0x0F	; 15
    ca1a:	89 2b       	or	r24, r25
    ca1c:	8a 2b       	or	r24, r26
    ca1e:	8b 2b       	or	r24, r27
    ca20:	29 f4       	brne	.+10     	; 0xca2c <f_getfree+0x16e>
    ca22:	bf ef       	ldi	r27, 0xFF	; 255
    ca24:	cb 1a       	sub	r12, r27
    ca26:	db 0a       	sbc	r13, r27
    ca28:	eb 0a       	sbc	r14, r27
    ca2a:	fb 0a       	sbc	r15, r27
    ca2c:	e4 e0       	ldi	r30, 0x04	; 4
    ca2e:	2e 0e       	add	r2, r30
    ca30:	31 1c       	adc	r3, r1
    ca32:	f1 e0       	ldi	r31, 0x01	; 1
    ca34:	3f 22       	and	r3, r31
    ca36:	21 e0       	ldi	r18, 0x01	; 1
    ca38:	82 1a       	sub	r8, r18
    ca3a:	91 08       	sbc	r9, r1
    ca3c:	a1 08       	sbc	r10, r1
    ca3e:	b1 08       	sbc	r11, r1
    ca40:	09 f0       	breq	.+2      	; 0xca44 <f_getfree+0x186>
    ca42:	b5 cf       	rjmp	.-150    	; 0xc9ae <f_getfree+0xf0>
    ca44:	07 c0       	rjmp	.+14     	; 0xca54 <f_getfree+0x196>
    ca46:	01 e0       	ldi	r16, 0x01	; 1
    ca48:	10 e0       	ldi	r17, 0x00	; 0
    ca4a:	04 c0       	rjmp	.+8      	; 0xca54 <f_getfree+0x196>
    ca4c:	02 e0       	ldi	r16, 0x02	; 2
    ca4e:	10 e0       	ldi	r17, 0x00	; 0
    ca50:	01 c0       	rjmp	.+2      	; 0xca54 <f_getfree+0x196>
    ca52:	8c 01       	movw	r16, r24
    ca54:	ad 81       	ldd	r26, Y+5	; 0x05
    ca56:	be 81       	ldd	r27, Y+6	; 0x06
    ca58:	cd 92       	st	X+, r12
    ca5a:	dd 92       	st	X+, r13
    ca5c:	ed 92       	st	X+, r14
    ca5e:	fc 92       	st	X, r15
    ca60:	13 97       	sbiw	r26, 0x03	; 3
    ca62:	e9 81       	ldd	r30, Y+1	; 0x01
    ca64:	fa 81       	ldd	r31, Y+2	; 0x02
    ca66:	c1 8a       	std	Z+17, r12	; 0x11
    ca68:	d2 8a       	std	Z+18, r13	; 0x12
    ca6a:	e3 8a       	std	Z+19, r14	; 0x13
    ca6c:	f4 8a       	std	Z+20, r15	; 0x14
    ca6e:	84 81       	ldd	r24, Z+4	; 0x04
    ca70:	81 60       	ori	r24, 0x01	; 1
    ca72:	84 83       	std	Z+4, r24	; 0x04
    ca74:	c8 01       	movw	r24, r16
    ca76:	2a 96       	adiw	r28, 0x0a	; 10
    ca78:	e2 e1       	ldi	r30, 0x12	; 18
    ca7a:	0c 94 1b e7 	jmp	0x1ce36	; 0x1ce36 <__epilogue_restores__>

0000ca7e <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
    ca7e:	a0 e6       	ldi	r26, 0x60	; 96
    ca80:	b0 e0       	ldi	r27, 0x00	; 0
    ca82:	e5 e4       	ldi	r30, 0x45	; 69
    ca84:	f5 e6       	ldi	r31, 0x65	; 101
    ca86:	0c 94 06 e7 	jmp	0x1ce0c	; 0x1ce0c <__prologue_saves__+0xe>
    ca8a:	a1 96       	adiw	r28, 0x21	; 33
    ca8c:	9f af       	std	Y+63, r25	; 0x3f
    ca8e:	8e af       	std	Y+62, r24	; 0x3e
    ca90:	a1 97       	sbiw	r28, 0x21	; 33
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = mount_volume(&path, &fs, FA_WRITE);
    ca92:	42 e0       	ldi	r20, 0x02	; 2
    ca94:	be 01       	movw	r22, r28
    ca96:	63 5a       	subi	r22, 0xA3	; 163
    ca98:	7f 4f       	sbci	r23, 0xFF	; 255
    ca9a:	ce 01       	movw	r24, r28
    ca9c:	81 5a       	subi	r24, 0xA1	; 161
    ca9e:	9f 4f       	sbci	r25, 0xFF	; 255
    caa0:	0e 94 13 4c 	call	0x9826	; 0x9826 <mount_volume>
	if (res == FR_OK) {
    caa4:	00 97       	sbiw	r24, 0x00	; 0
    caa6:	09 f0       	breq	.+2      	; 0xcaaa <f_unlink+0x2c>
    caa8:	8c c0       	rjmp	.+280    	; 0xcbc2 <f_unlink+0x144>
		dj.obj.fs = fs;
    caaa:	6f 96       	adiw	r28, 0x1f	; 31
    caac:	8e ad       	ldd	r24, Y+62	; 0x3e
    caae:	9f ad       	ldd	r25, Y+63	; 0x3f
    cab0:	6f 97       	sbiw	r28, 0x1f	; 31
    cab2:	98 ab       	std	Y+48, r25	; 0x30
    cab4:	8f a7       	std	Y+47, r24	; 0x2f
		INIT_NAMBUF(fs);
    cab6:	80 e0       	ldi	r24, 0x00	; 0
    cab8:	92 e0       	ldi	r25, 0x02	; 2
    caba:	b0 d3       	rcall	.+1888   	; 0xd21c <ff_memalloc>
    cabc:	5c 01       	movw	r10, r24
    cabe:	00 97       	sbiw	r24, 0x00	; 0
    cac0:	09 f4       	brne	.+2      	; 0xcac4 <f_unlink+0x46>
    cac2:	49 c0       	rjmp	.+146    	; 0xcb56 <f_unlink+0xd8>
    cac4:	6f 96       	adiw	r28, 0x1f	; 31
    cac6:	ee ad       	ldd	r30, Y+62	; 0x3e
    cac8:	ff ad       	ldd	r31, Y+63	; 0x3f
    caca:	6f 97       	sbiw	r28, 0x1f	; 31
    cacc:	94 87       	std	Z+12, r25	; 0x0c
    cace:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);		/* Follow the file path */
    cad0:	a1 96       	adiw	r28, 0x21	; 33
    cad2:	6e ad       	ldd	r22, Y+62	; 0x3e
    cad4:	7f ad       	ldd	r23, Y+63	; 0x3f
    cad6:	a1 97       	sbiw	r28, 0x21	; 33
    cad8:	ce 01       	movw	r24, r28
    cada:	8f 96       	adiw	r24, 0x2f	; 47
    cadc:	0e 94 60 57 	call	0xaec0	; 0xaec0 <follow_path>
    cae0:	8c 01       	movw	r16, r24
		if (FF_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
    cae2:	89 2b       	or	r24, r25
    cae4:	a1 f5       	brne	.+104    	; 0xcb4e <f_unlink+0xd0>
    cae6:	67 96       	adiw	r28, 0x17	; 23
    cae8:	8f ad       	ldd	r24, Y+63	; 0x3f
    caea:	67 97       	sbiw	r28, 0x17	; 23
    caec:	85 fd       	sbrc	r24, 5
    caee:	36 c0       	rjmp	.+108    	; 0xcb5c <f_unlink+0xde>
		}
#if FF_FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			if (dj.fn[NSFLAG] & NS_NONAME) {
    caf0:	87 fd       	sbrc	r24, 7
    caf2:	34 c0       	rjmp	.+104    	; 0xcb5c <f_unlink+0xde>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
			} else {
				if (dj.obj.attr & AM_RDO) {
    caf4:	9b a8       	ldd	r9, Y+51	; 0x33
    caf6:	90 fc       	sbrc	r9, 0
    caf8:	40 c0       	rjmp	.+128    	; 0xcb7a <f_unlink+0xfc>
					init_alloc_info(fs, &obj);
					dclst = obj.sclust;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
    cafa:	6f 96       	adiw	r28, 0x1f	; 31
    cafc:	0e ad       	ldd	r16, Y+62	; 0x3e
    cafe:	1f ad       	ldd	r17, Y+63	; 0x3f
    cb00:	6f 97       	sbiw	r28, 0x1f	; 31
    cb02:	2b 96       	adiw	r28, 0x0b	; 11
    cb04:	6e ad       	ldd	r22, Y+62	; 0x3e
    cb06:	7f ad       	ldd	r23, Y+63	; 0x3f
    cb08:	2b 97       	sbiw	r28, 0x0b	; 11
    cb0a:	f8 01       	movw	r30, r16
    cb0c:	80 81       	ld	r24, Z
    cb0e:	0e 94 09 4a 	call	0x9412	; 0x9412 <ld_clust.isra.3>
    cb12:	6b 01       	movw	r12, r22
    cb14:	7c 01       	movw	r14, r24
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
    cb16:	94 fe       	sbrs	r9, 4
    cb18:	33 c0       	rjmp	.+102    	; 0xcb80 <f_unlink+0x102>
#if FF_FS_RPATH != 0
					if (dclst == fs->cdir) {		 	/* Is it the current directory? */
    cb1a:	f8 01       	movw	r30, r16
    cb1c:	85 89       	ldd	r24, Z+21	; 0x15
    cb1e:	96 89       	ldd	r25, Z+22	; 0x16
    cb20:	a7 89       	ldd	r26, Z+23	; 0x17
    cb22:	b0 8d       	ldd	r27, Z+24	; 0x18
    cb24:	c8 16       	cp	r12, r24
    cb26:	d9 06       	cpc	r13, r25
    cb28:	ea 06       	cpc	r14, r26
    cb2a:	fb 06       	cpc	r15, r27
    cb2c:	31 f1       	breq	.+76     	; 0xcb7a <f_unlink+0xfc>
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;				/* Open the sub-directory */
    cb2e:	1a 83       	std	Y+2, r17	; 0x02
    cb30:	09 83       	std	Y+1, r16	; 0x01
						sdj.obj.sclust = dclst;
    cb32:	cf 82       	std	Y+7, r12	; 0x07
    cb34:	d8 86       	std	Y+8, r13	; 0x08
    cb36:	e9 86       	std	Y+9, r14	; 0x09
    cb38:	fa 86       	std	Y+10, r15	; 0x0a
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
    cb3a:	40 e0       	ldi	r20, 0x00	; 0
    cb3c:	50 e0       	ldi	r21, 0x00	; 0
    cb3e:	ba 01       	movw	r22, r20
    cb40:	ce 01       	movw	r24, r28
    cb42:	01 96       	adiw	r24, 0x01	; 1
    cb44:	0e 94 1a 50 	call	0xa034	; 0xa034 <dir_sdi>
    cb48:	8c 01       	movw	r16, r24
						if (res == FR_OK) {
    cb4a:	89 2b       	or	r24, r25
    cb4c:	51 f0       	breq	.+20     	; 0xcb62 <f_unlink+0xe4>
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    cb4e:	c5 01       	movw	r24, r10
    cb50:	68 d3       	rcall	.+1744   	; 0xd222 <ff_memfree>
    cb52:	c8 01       	movw	r24, r16
    cb54:	36 c0       	rjmp	.+108    	; 0xcbc2 <f_unlink+0x144>

	/* Get logical drive */
	res = mount_volume(&path, &fs, FA_WRITE);
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    cb56:	81 e1       	ldi	r24, 0x11	; 17
    cb58:	90 e0       	ldi	r25, 0x00	; 0
    cb5a:	33 c0       	rjmp	.+102    	; 0xcbc2 <f_unlink+0x144>
#if FF_FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			if (dj.fn[NSFLAG] & NS_NONAME) {
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
    cb5c:	06 e0       	ldi	r16, 0x06	; 6
    cb5e:	10 e0       	ldi	r17, 0x00	; 0
    cb60:	f6 cf       	rjmp	.-20     	; 0xcb4e <f_unlink+0xd0>
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
						if (res == FR_OK) {
							res = DIR_READ_FILE(&sdj);			/* Test if the directory is empty */
    cb62:	60 e0       	ldi	r22, 0x00	; 0
    cb64:	70 e0       	ldi	r23, 0x00	; 0
    cb66:	ce 01       	movw	r24, r28
    cb68:	01 96       	adiw	r24, 0x01	; 1
    cb6a:	0e 94 b3 53 	call	0xa766	; 0xa766 <dir_read>
    cb6e:	8c 01       	movw	r16, r24
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
    cb70:	00 97       	sbiw	r24, 0x00	; 0
    cb72:	19 f0       	breq	.+6      	; 0xcb7a <f_unlink+0xfc>
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
    cb74:	04 97       	sbiw	r24, 0x04	; 4
    cb76:	21 f0       	breq	.+8      	; 0xcb80 <f_unlink+0x102>
    cb78:	ea cf       	rjmp	.-44     	; 0xcb4e <f_unlink+0xd0>
					dclst = ld_clust(fs, dj.dir);
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
#if FF_FS_RPATH != 0
					if (dclst == fs->cdir) {		 	/* Is it the current directory? */
						res = FR_DENIED;
    cb7a:	07 e0       	ldi	r16, 0x07	; 7
    cb7c:	10 e0       	ldi	r17, 0x00	; 0
    cb7e:	e7 cf       	rjmp	.-50     	; 0xcb4e <f_unlink+0xd0>
						}
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj);			/* Remove the directory entry */
    cb80:	ce 01       	movw	r24, r28
    cb82:	8f 96       	adiw	r24, 0x2f	; 47
    cb84:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <dir_remove>
    cb88:	8c 01       	movw	r16, r24
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
    cb8a:	89 2b       	or	r24, r25
    cb8c:	01 f7       	brne	.-64     	; 0xcb4e <f_unlink+0xd0>
    cb8e:	c1 14       	cp	r12, r1
    cb90:	d1 04       	cpc	r13, r1
    cb92:	e1 04       	cpc	r14, r1
    cb94:	f1 04       	cpc	r15, r1
    cb96:	41 f4       	brne	.+16     	; 0xcba8 <f_unlink+0x12a>
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
    cb98:	6f 96       	adiw	r28, 0x1f	; 31
    cb9a:	8e ad       	ldd	r24, Y+62	; 0x3e
    cb9c:	9f ad       	ldd	r25, Y+63	; 0x3f
    cb9e:	6f 97       	sbiw	r28, 0x1f	; 31
    cba0:	0e 94 7e 4a 	call	0x94fc	; 0x94fc <sync_fs>
    cba4:	8c 01       	movw	r16, r24
    cba6:	d3 cf       	rjmp	.-90     	; 0xcb4e <f_unlink+0xd0>
				res = dir_remove(&dj);			/* Remove the directory entry */
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
#if FF_FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
    cba8:	00 e0       	ldi	r16, 0x00	; 0
    cbaa:	10 e0       	ldi	r17, 0x00	; 0
    cbac:	98 01       	movw	r18, r16
    cbae:	b7 01       	movw	r22, r14
    cbb0:	a6 01       	movw	r20, r12
    cbb2:	ce 01       	movw	r24, r28
    cbb4:	8f 96       	adiw	r24, 0x2f	; 47
    cbb6:	0e 94 01 52 	call	0xa402	; 0xa402 <remove_chain>
    cbba:	8c 01       	movw	r16, r24
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
    cbbc:	89 2b       	or	r24, r25
    cbbe:	39 f6       	brne	.-114    	; 0xcb4e <f_unlink+0xd0>
    cbc0:	eb cf       	rjmp	.-42     	; 0xcb98 <f_unlink+0x11a>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    cbc2:	c0 5a       	subi	r28, 0xA0	; 160
    cbc4:	df 4f       	sbci	r29, 0xFF	; 255
    cbc6:	eb e0       	ldi	r30, 0x0B	; 11
    cbc8:	0c 94 22 e7 	jmp	0x1ce44	; 0x1ce44 <__epilogue_restores__+0xe>

0000cbcc <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
    cbcc:	a0 e4       	ldi	r26, 0x40	; 64
    cbce:	b0 e0       	ldi	r27, 0x00	; 0
    cbd0:	ec ee       	ldi	r30, 0xEC	; 236
    cbd2:	f5 e6       	ldi	r31, 0x65	; 101
    cbd4:	0c 94 01 e7 	jmp	0x1ce02	; 0x1ce02 <__prologue_saves__+0x4>
    cbd8:	21 96       	adiw	r28, 0x01	; 1
    cbda:	9f af       	std	Y+63, r25	; 0x3f
    cbdc:	8e af       	std	Y+62, r24	; 0x3e
    cbde:	21 97       	sbiw	r28, 0x01	; 1
	FATFS *fs;
	DWORD dcl, pcl, tm;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    cbe0:	42 e0       	ldi	r20, 0x02	; 2
    cbe2:	be 01       	movw	r22, r28
    cbe4:	63 5c       	subi	r22, 0xC3	; 195
    cbe6:	7f 4f       	sbci	r23, 0xFF	; 255
    cbe8:	ce 01       	movw	r24, r28
    cbea:	cf 96       	adiw	r24, 0x3f	; 63
    cbec:	0e 94 13 4c 	call	0x9826	; 0x9826 <mount_volume>
	if (res == FR_OK) {
    cbf0:	00 97       	sbiw	r24, 0x00	; 0
    cbf2:	09 f0       	breq	.+2      	; 0xcbf6 <f_mkdir+0x2a>
    cbf4:	d6 c0       	rjmp	.+428    	; 0xcda2 <f_mkdir+0x1d6>
		dj.obj.fs = fs;
    cbf6:	8d ad       	ldd	r24, Y+61	; 0x3d
    cbf8:	9e ad       	ldd	r25, Y+62	; 0x3e
    cbfa:	9a 83       	std	Y+2, r25	; 0x02
    cbfc:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    cbfe:	80 e0       	ldi	r24, 0x00	; 0
    cc00:	92 e0       	ldi	r25, 0x02	; 2
    cc02:	0c d3       	rcall	.+1560   	; 0xd21c <ff_memalloc>
    cc04:	6c 01       	movw	r12, r24
    cc06:	00 97       	sbiw	r24, 0x00	; 0
    cc08:	e9 f0       	breq	.+58     	; 0xcc44 <f_mkdir+0x78>
    cc0a:	ed ad       	ldd	r30, Y+61	; 0x3d
    cc0c:	fe ad       	ldd	r31, Y+62	; 0x3e
    cc0e:	94 87       	std	Z+12, r25	; 0x0c
    cc10:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);			/* Follow the file path */
    cc12:	21 96       	adiw	r28, 0x01	; 1
    cc14:	6e ad       	ldd	r22, Y+62	; 0x3e
    cc16:	7f ad       	ldd	r23, Y+63	; 0x3f
    cc18:	21 97       	sbiw	r28, 0x01	; 1
    cc1a:	ce 01       	movw	r24, r28
    cc1c:	01 96       	adiw	r24, 0x01	; 1
    cc1e:	0e 94 60 57 	call	0xaec0	; 0xaec0 <follow_path>
    cc22:	7c 01       	movw	r14, r24
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
    cc24:	89 2b       	or	r24, r25
    cc26:	89 f0       	breq	.+34     	; 0xcc4a <f_mkdir+0x7e>
		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {	/* Invalid name? */
    cc28:	84 e0       	ldi	r24, 0x04	; 4
    cc2a:	e8 16       	cp	r14, r24
    cc2c:	f1 04       	cpc	r15, r1
    cc2e:	31 f4       	brne	.+12     	; 0xcc3c <f_mkdir+0x70>
    cc30:	88 a5       	ldd	r24, Y+40	; 0x28
    cc32:	85 ff       	sbrs	r24, 5
    cc34:	0e c0       	rjmp	.+28     	; 0xcc52 <f_mkdir+0x86>
			res = FR_INVALID_NAME;
    cc36:	26 e0       	ldi	r18, 0x06	; 6
    cc38:	e2 2e       	mov	r14, r18
    cc3a:	f1 2c       	mov	r15, r1
				}
			} else {
				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
			}
		}
		FREE_NAMBUF();
    cc3c:	c6 01       	movw	r24, r12
    cc3e:	f1 d2       	rcall	.+1506   	; 0xd222 <ff_memfree>
    cc40:	c7 01       	movw	r24, r14
    cc42:	af c0       	rjmp	.+350    	; 0xcda2 <f_mkdir+0x1d6>


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    cc44:	81 e1       	ldi	r24, 0x11	; 17
    cc46:	90 e0       	ldi	r25, 0x00	; 0
    cc48:	ac c0       	rjmp	.+344    	; 0xcda2 <f_mkdir+0x1d6>
		res = follow_path(&dj, path);			/* Follow the file path */
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
    cc4a:	38 e0       	ldi	r19, 0x08	; 8
    cc4c:	e3 2e       	mov	r14, r19
    cc4e:	f1 2c       	mov	r15, r1
    cc50:	f5 cf       	rjmp	.-22     	; 0xcc3c <f_mkdir+0x70>
		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {	/* Invalid name? */
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
    cc52:	8d ad       	ldd	r24, Y+61	; 0x3d
    cc54:	9e ad       	ldd	r25, Y+62	; 0x3e
    cc56:	98 ab       	std	Y+48, r25	; 0x30
    cc58:	8f a7       	std	Y+47, r24	; 0x2f
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
    cc5a:	40 e0       	ldi	r20, 0x00	; 0
    cc5c:	50 e0       	ldi	r21, 0x00	; 0
    cc5e:	ba 01       	movw	r22, r20
    cc60:	ce 01       	movw	r24, r28
    cc62:	8f 96       	adiw	r24, 0x2f	; 47
    cc64:	0e 94 db 50 	call	0xa1b6	; 0xa1b6 <create_chain>
    cc68:	4b 01       	movw	r8, r22
    cc6a:	5c 01       	movw	r10, r24
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
    cc6c:	67 2b       	or	r22, r23
    cc6e:	68 2b       	or	r22, r24
    cc70:	69 2b       	or	r22, r25
    cc72:	09 f1       	breq	.+66     	; 0xccb6 <f_mkdir+0xea>
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
    cc74:	e1 e0       	ldi	r30, 0x01	; 1
    cc76:	8e 16       	cp	r8, r30
    cc78:	91 04       	cpc	r9, r1
    cc7a:	a1 04       	cpc	r10, r1
    cc7c:	b1 04       	cpc	r11, r1
    cc7e:	61 f0       	breq	.+24     	; 0xcc98 <f_mkdir+0xcc>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
    cc80:	ff ef       	ldi	r31, 0xFF	; 255
    cc82:	8f 16       	cp	r8, r31
    cc84:	9f 06       	cpc	r9, r31
    cc86:	af 06       	cpc	r10, r31
    cc88:	bf 06       	cpc	r11, r31
    cc8a:	d9 f4       	brne	.+54     	; 0xccc2 <f_mkdir+0xf6>
			tm = GET_FATTIME();
    cc8c:	0e 94 8f 70 	call	0xe11e	; 0xe11e <get_fattime>
    cc90:	ee 24       	eor	r14, r14
    cc92:	e3 94       	inc	r14
    cc94:	f1 2c       	mov	r15, r1
    cc96:	05 c0       	rjmp	.+10     	; 0xcca2 <f_mkdir+0xd6>
    cc98:	0e 94 8f 70 	call	0xe11e	; 0xe11e <get_fattime>
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
    cc9c:	92 e0       	ldi	r25, 0x02	; 2
    cc9e:	e9 2e       	mov	r14, r25
    cca0:	f1 2c       	mov	r15, r1
				}
				if (res == FR_OK) {
					res = sync_fs(fs);
				}
			} else {
				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
    cca2:	00 e0       	ldi	r16, 0x00	; 0
    cca4:	10 e0       	ldi	r17, 0x00	; 0
    cca6:	98 01       	movw	r18, r16
    cca8:	b5 01       	movw	r22, r10
    ccaa:	a4 01       	movw	r20, r8
    ccac:	ce 01       	movw	r24, r28
    ccae:	8f 96       	adiw	r24, 0x2f	; 47
    ccb0:	0e 94 01 52 	call	0xa402	; 0xa402 <remove_chain>
    ccb4:	c3 cf       	rjmp	.-122    	; 0xcc3c <f_mkdir+0x70>
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
			tm = GET_FATTIME();
    ccb6:	0e 94 8f 70 	call	0xe11e	; 0xe11e <get_fattime>
		}
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
    ccba:	87 e0       	ldi	r24, 0x07	; 7
    ccbc:	e8 2e       	mov	r14, r24
    ccbe:	f1 2c       	mov	r15, r1
    ccc0:	f0 cf       	rjmp	.-32     	; 0xcca2 <f_mkdir+0xd6>
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
			tm = GET_FATTIME();
    ccc2:	0e 94 8f 70 	call	0xe11e	; 0xe11e <get_fattime>
    ccc6:	2b 01       	movw	r4, r22
    ccc8:	3c 01       	movw	r6, r24
			if (res == FR_OK) {
				res = dir_clear(fs, dcl);		/* Clean up the new table */
    ccca:	b5 01       	movw	r22, r10
    cccc:	a4 01       	movw	r20, r8
    ccce:	8d ad       	ldd	r24, Y+61	; 0x3d
    ccd0:	9e ad       	ldd	r25, Y+62	; 0x3e
    ccd2:	0e 94 f0 4a 	call	0x95e0	; 0x95e0 <dir_clear>
    ccd6:	7c 01       	movw	r14, r24
				if (res == FR_OK) {
    ccd8:	89 2b       	or	r24, r25
    ccda:	19 f7       	brne	.-58     	; 0xcca2 <f_mkdir+0xd6>
					if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {	/* Create dot entries (FAT only) */
						mem_set(fs->win + DIR_Name, ' ', 11);	/* Create "." entry */
    ccdc:	8d ad       	ldd	r24, Y+61	; 0x3d
    ccde:	9e ad       	ldd	r25, Y+62	; 0x3e
    cce0:	4b e0       	ldi	r20, 0x0B	; 11
    cce2:	50 e0       	ldi	r21, 0x00	; 0
    cce4:	60 e2       	ldi	r22, 0x20	; 32
    cce6:	70 e0       	ldi	r23, 0x00	; 0
    cce8:	c5 96       	adiw	r24, 0x35	; 53
    ccea:	0e 94 f1 47 	call	0x8fe2	; 0x8fe2 <mem_set>
						fs->win[DIR_Name] = '.';
    ccee:	8d ad       	ldd	r24, Y+61	; 0x3d
    ccf0:	9e ad       	ldd	r25, Y+62	; 0x3e
    ccf2:	1e e2       	ldi	r17, 0x2E	; 46
    ccf4:	fc 01       	movw	r30, r24
    ccf6:	15 ab       	std	Z+53, r17	; 0x35
						fs->win[DIR_Attr] = AM_DIR;
    ccf8:	e0 5c       	subi	r30, 0xC0	; 192
    ccfa:	ff 4f       	sbci	r31, 0xFF	; 255
    ccfc:	20 e1       	ldi	r18, 0x10	; 16
    ccfe:	20 83       	st	Z, r18
						st_dword(fs->win + DIR_ModTime, tm);
    cd00:	b3 01       	movw	r22, r6
    cd02:	a2 01       	movw	r20, r4
    cd04:	85 5b       	subi	r24, 0xB5	; 181
    cd06:	9f 4f       	sbci	r25, 0xFF	; 255
    cd08:	0e 94 eb 47 	call	0x8fd6	; 0x8fd6 <st_dword>
						st_clust(fs, fs->win, dcl);
    cd0c:	8d ad       	ldd	r24, Y+61	; 0x3d
    cd0e:	9e ad       	ldd	r25, Y+62	; 0x3e
    cd10:	bc 01       	movw	r22, r24
    cd12:	6b 5c       	subi	r22, 0xCB	; 203
    cd14:	7f 4f       	sbci	r23, 0xFF	; 255
    cd16:	a5 01       	movw	r20, r10
    cd18:	94 01       	movw	r18, r8
    cd1a:	0e 94 1e 4a 	call	0x943c	; 0x943c <st_clust.isra.4>
						mem_cpy(fs->win + SZDIRE, fs->win, SZDIRE); /* Create ".." entry */
    cd1e:	8d ad       	ldd	r24, Y+61	; 0x3d
    cd20:	9e ad       	ldd	r25, Y+62	; 0x3e
    cd22:	bc 01       	movw	r22, r24
    cd24:	6b 5c       	subi	r22, 0xCB	; 203
    cd26:	7f 4f       	sbci	r23, 0xFF	; 255
    cd28:	40 e2       	ldi	r20, 0x20	; 32
    cd2a:	50 e0       	ldi	r21, 0x00	; 0
    cd2c:	8b 5a       	subi	r24, 0xAB	; 171
    cd2e:	9f 4f       	sbci	r25, 0xFF	; 255
    cd30:	0e 94 fe 49 	call	0x93fc	; 0x93fc <mem_cpy.part.0>
						fs->win[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
    cd34:	8d ad       	ldd	r24, Y+61	; 0x3d
    cd36:	9e ad       	ldd	r25, Y+62	; 0x3e
    cd38:	fc 01       	movw	r30, r24
    cd3a:	ea 5a       	subi	r30, 0xAA	; 170
    cd3c:	ff 4f       	sbci	r31, 0xFF	; 255
    cd3e:	10 83       	st	Z, r17
						st_clust(fs, fs->win + SZDIRE, pcl);
    cd40:	2f 81       	ldd	r18, Y+7	; 0x07
    cd42:	38 85       	ldd	r19, Y+8	; 0x08
    cd44:	49 85       	ldd	r20, Y+9	; 0x09
    cd46:	5a 85       	ldd	r21, Y+10	; 0x0a
    cd48:	bc 01       	movw	r22, r24
    cd4a:	6b 5a       	subi	r22, 0xAB	; 171
    cd4c:	7f 4f       	sbci	r23, 0xFF	; 255
    cd4e:	0e 94 1e 4a 	call	0x943c	; 0x943c <st_clust.isra.4>
						fs->wflag = 1;
    cd52:	ed ad       	ldd	r30, Y+61	; 0x3d
    cd54:	fe ad       	ldd	r31, Y+62	; 0x3e
    cd56:	81 e0       	ldi	r24, 0x01	; 1
    cd58:	83 83       	std	Z+3, r24	; 0x03
					}
					res = dir_register(&dj);	/* Register the object to the parent directoy */
    cd5a:	ce 01       	movw	r24, r28
    cd5c:	01 96       	adiw	r24, 0x01	; 1
    cd5e:	0e 94 d2 55 	call	0xaba4	; 0xaba4 <dir_register>
    cd62:	7c 01       	movw	r14, r24
				}
			}
			if (res == FR_OK) {
    cd64:	89 2b       	or	r24, r25
    cd66:	09 f0       	breq	.+2      	; 0xcd6a <f_mkdir+0x19e>
    cd68:	9c cf       	rjmp	.-200    	; 0xcca2 <f_mkdir+0xd6>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					st_dword(dj.dir + DIR_ModTime, tm);	/* Created time */
    cd6a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    cd6c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    cd6e:	b3 01       	movw	r22, r6
    cd70:	a2 01       	movw	r20, r4
    cd72:	46 96       	adiw	r24, 0x16	; 22
    cd74:	0e 94 eb 47 	call	0x8fd6	; 0x8fd6 <st_dword>
					st_clust(fs, dj.dir, dcl);			/* Table start cluster */
    cd78:	6b 8d       	ldd	r22, Y+27	; 0x1b
    cd7a:	7c 8d       	ldd	r23, Y+28	; 0x1c
    cd7c:	a5 01       	movw	r20, r10
    cd7e:	94 01       	movw	r18, r8
    cd80:	8d ad       	ldd	r24, Y+61	; 0x3d
    cd82:	9e ad       	ldd	r25, Y+62	; 0x3e
    cd84:	0e 94 1e 4a 	call	0x943c	; 0x943c <st_clust.isra.4>
					dj.dir[DIR_Attr] = AM_DIR;			/* Attribute */
    cd88:	eb 8d       	ldd	r30, Y+27	; 0x1b
    cd8a:	fc 8d       	ldd	r31, Y+28	; 0x1c
    cd8c:	80 e1       	ldi	r24, 0x10	; 16
    cd8e:	83 87       	std	Z+11, r24	; 0x0b
					fs->wflag = 1;
    cd90:	8d ad       	ldd	r24, Y+61	; 0x3d
    cd92:	9e ad       	ldd	r25, Y+62	; 0x3e
    cd94:	21 e0       	ldi	r18, 0x01	; 1
    cd96:	fc 01       	movw	r30, r24
    cd98:	23 83       	std	Z+3, r18	; 0x03
				}
				if (res == FR_OK) {
					res = sync_fs(fs);
    cd9a:	0e 94 7e 4a 	call	0x94fc	; 0x94fc <sync_fs>
    cd9e:	7c 01       	movw	r14, r24
    cda0:	4d cf       	rjmp	.-358    	; 0xcc3c <f_mkdir+0x70>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    cda2:	c0 5c       	subi	r28, 0xC0	; 192
    cda4:	df 4f       	sbci	r29, 0xFF	; 255
    cda6:	e0 e1       	ldi	r30, 0x10	; 16
    cda8:	0c 94 1d e7 	jmp	0x1ce3a	; 0x1ce3a <__epilogue_restores__+0x4>

0000cdac <f_rename>:

FRESULT f_rename (
	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
	const TCHAR* path_new	/* Pointer to the new name */
)
{
    cdac:	a2 e8       	ldi	r26, 0x82	; 130
    cdae:	b0 e0       	ldi	r27, 0x00	; 0
    cdb0:	ec ed       	ldi	r30, 0xDC	; 220
    cdb2:	f6 e6       	ldi	r31, 0x66	; 102
    cdb4:	0c 94 08 e7 	jmp	0x1ce10	; 0x1ce10 <__prologue_saves__+0x12>
    cdb8:	c1 58       	subi	r28, 0x81	; 129
    cdba:	df 4f       	sbci	r29, 0xFF	; 255
    cdbc:	99 83       	std	Y+1, r25	; 0x01
    cdbe:	88 83       	st	Y, r24
    cdc0:	cf 57       	subi	r28, 0x7F	; 127
    cdc2:	d0 40       	sbci	r29, 0x00	; 0
    cdc4:	cf 57       	subi	r28, 0x7F	; 127
    cdc6:	df 4f       	sbci	r29, 0xFF	; 255
    cdc8:	79 83       	std	Y+1, r23	; 0x01
    cdca:	68 83       	st	Y, r22
    cdcc:	c1 58       	subi	r28, 0x81	; 129
    cdce:	d0 40       	sbci	r29, 0x00	; 0
	BYTE buf[FF_FS_EXFAT ? SZDIRE * 2 : SZDIRE], *dir;
	LBA_t sect;
	DEF_NAMBUF


	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
    cdd0:	ce 01       	movw	r24, r28
    cdd2:	8f 57       	subi	r24, 0x7F	; 127
    cdd4:	9f 4f       	sbci	r25, 0xFF	; 255
    cdd6:	0e 94 7c 48 	call	0x90f8	; 0x90f8 <get_ldnumber>
	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
    cdda:	42 e0       	ldi	r20, 0x02	; 2
    cddc:	be 01       	movw	r22, r28
    cdde:	63 58       	subi	r22, 0x83	; 131
    cde0:	7f 4f       	sbci	r23, 0xFF	; 255
    cde2:	ce 01       	movw	r24, r28
    cde4:	81 58       	subi	r24, 0x81	; 129
    cde6:	9f 4f       	sbci	r25, 0xFF	; 255
    cde8:	0e 94 13 4c 	call	0x9826	; 0x9826 <mount_volume>
	if (res == FR_OK) {
    cdec:	00 97       	sbiw	r24, 0x00	; 0
    cdee:	09 f0       	breq	.+2      	; 0xcdf2 <f_rename+0x46>
    cdf0:	ed c0       	rjmp	.+474    	; 0xcfcc <f_rename+0x220>
		djo.obj.fs = fs;
    cdf2:	ef 96       	adiw	r28, 0x3f	; 63
    cdf4:	8e ad       	ldd	r24, Y+62	; 0x3e
    cdf6:	9f ad       	ldd	r25, Y+63	; 0x3f
    cdf8:	ef 97       	sbiw	r28, 0x3f	; 63
    cdfa:	98 ab       	std	Y+48, r25	; 0x30
    cdfc:	8f a7       	std	Y+47, r24	; 0x2f
		INIT_NAMBUF(fs);
    cdfe:	80 e0       	ldi	r24, 0x00	; 0
    ce00:	92 e0       	ldi	r25, 0x02	; 2
    ce02:	0c d2       	rcall	.+1048   	; 0xd21c <ff_memalloc>
    ce04:	6c 01       	movw	r12, r24
    ce06:	00 97       	sbiw	r24, 0x00	; 0
    ce08:	f1 f0       	breq	.+60     	; 0xce46 <f_rename+0x9a>
    ce0a:	ef 96       	adiw	r28, 0x3f	; 63
    ce0c:	ee ad       	ldd	r30, Y+62	; 0x3e
    ce0e:	ff ad       	ldd	r31, Y+63	; 0x3f
    ce10:	ef 97       	sbiw	r28, 0x3f	; 63
    ce12:	94 87       	std	Z+12, r25	; 0x0c
    ce14:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&djo, path_old);		/* Check old object */
    ce16:	c1 58       	subi	r28, 0x81	; 129
    ce18:	df 4f       	sbci	r29, 0xFF	; 255
    ce1a:	68 81       	ld	r22, Y
    ce1c:	79 81       	ldd	r23, Y+1	; 0x01
    ce1e:	cf 57       	subi	r28, 0x7F	; 127
    ce20:	d0 40       	sbci	r29, 0x00	; 0
    ce22:	ce 01       	movw	r24, r28
    ce24:	8f 96       	adiw	r24, 0x2f	; 47
    ce26:	0e 94 60 57 	call	0xaec0	; 0xaec0 <follow_path>
    ce2a:	8c 01       	movw	r16, r24
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
    ce2c:	89 2b       	or	r24, r25
    ce2e:	39 f4       	brne	.+14     	; 0xce3e <f_rename+0x92>
    ce30:	67 96       	adiw	r28, 0x17	; 23
    ce32:	8f ad       	ldd	r24, Y+63	; 0x3f
    ce34:	67 97       	sbiw	r28, 0x17	; 23
    ce36:	80 7a       	andi	r24, 0xA0	; 160
    ce38:	49 f0       	breq	.+18     	; 0xce4c <f_rename+0xa0>
    ce3a:	06 e0       	ldi	r16, 0x06	; 6
    ce3c:	10 e0       	ldi	r17, 0x00	; 0
					res = sync_fs(fs);
				}
			}
/* End of the critical section */
		}
		FREE_NAMBUF();
    ce3e:	c6 01       	movw	r24, r12
    ce40:	f0 d1       	rcall	.+992    	; 0xd222 <ff_memfree>
    ce42:	c8 01       	movw	r24, r16
    ce44:	c3 c0       	rjmp	.+390    	; 0xcfcc <f_rename+0x220>

	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
	if (res == FR_OK) {
		djo.obj.fs = fs;
		INIT_NAMBUF(fs);
    ce46:	81 e1       	ldi	r24, 0x11	; 17
    ce48:	90 e0       	ldi	r25, 0x00	; 0
    ce4a:	c0 c0       	rjmp	.+384    	; 0xcfcc <f_rename+0x220>
    ce4c:	2b 96       	adiw	r28, 0x0b	; 11
    ce4e:	6e ad       	ldd	r22, Y+62	; 0x3e
    ce50:	7f ad       	ldd	r23, Y+63	; 0x3f
    ce52:	2b 97       	sbiw	r28, 0x0b	; 11
    ce54:	40 e2       	ldi	r20, 0x20	; 32
    ce56:	50 e0       	ldi	r21, 0x00	; 0
    ce58:	ce 01       	movw	r24, r28
    ce5a:	83 5a       	subi	r24, 0xA3	; 163
    ce5c:	9f 4f       	sbci	r25, 0xFF	; 255
    ce5e:	0e 94 fe 49 	call	0x93fc	; 0x93fc <mem_cpy.part.0>
    ce62:	4e e2       	ldi	r20, 0x2E	; 46
    ce64:	50 e0       	ldi	r21, 0x00	; 0
    ce66:	be 01       	movw	r22, r28
    ce68:	61 5d       	subi	r22, 0xD1	; 209
    ce6a:	7f 4f       	sbci	r23, 0xFF	; 255
    ce6c:	ce 01       	movw	r24, r28
    ce6e:	01 96       	adiw	r24, 0x01	; 1
    ce70:	0e 94 fe 49 	call	0x93fc	; 0x93fc <mem_cpy.part.0>
			} else
#endif
			{	/* At FAT/FAT32 volume */
				mem_cpy(buf, djo.dir, SZDIRE);			/* Save directory entry of the object */
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
    ce74:	cf 57       	subi	r28, 0x7F	; 127
    ce76:	df 4f       	sbci	r29, 0xFF	; 255
    ce78:	68 81       	ld	r22, Y
    ce7a:	79 81       	ldd	r23, Y+1	; 0x01
    ce7c:	c1 58       	subi	r28, 0x81	; 129
    ce7e:	d0 40       	sbci	r29, 0x00	; 0
    ce80:	ce 01       	movw	r24, r28
    ce82:	01 96       	adiw	r24, 0x01	; 1
    ce84:	0e 94 60 57 	call	0xaec0	; 0xaec0 <follow_path>
    ce88:	8c 01       	movw	r16, r24
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
    ce8a:	89 2b       	or	r24, r25
    ce8c:	f9 f4       	brne	.+62     	; 0xcecc <f_rename+0x120>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
    ce8e:	4f 81       	ldd	r20, Y+7	; 0x07
    ce90:	58 85       	ldd	r21, Y+8	; 0x08
    ce92:	69 85       	ldd	r22, Y+9	; 0x09
    ce94:	7a 85       	ldd	r23, Y+10	; 0x0a
    ce96:	8d a9       	ldd	r24, Y+53	; 0x35
    ce98:	9e a9       	ldd	r25, Y+54	; 0x36
    ce9a:	af a9       	ldd	r26, Y+55	; 0x37
    ce9c:	b8 ad       	ldd	r27, Y+56	; 0x38
    ce9e:	48 17       	cp	r20, r24
    cea0:	59 07       	cpc	r21, r25
    cea2:	6a 07       	cpc	r22, r26
    cea4:	7b 07       	cpc	r23, r27
    cea6:	09 f0       	breq	.+2      	; 0xceaa <f_rename+0xfe>
    cea8:	8b c0       	rjmp	.+278    	; 0xcfc0 <f_rename+0x214>
    ceaa:	4f 85       	ldd	r20, Y+15	; 0x0f
    ceac:	58 89       	ldd	r21, Y+16	; 0x10
    ceae:	69 89       	ldd	r22, Y+17	; 0x11
    ceb0:	7a 89       	ldd	r23, Y+18	; 0x12
    ceb2:	21 96       	adiw	r28, 0x01	; 1
    ceb4:	8c ad       	ldd	r24, Y+60	; 0x3c
    ceb6:	9d ad       	ldd	r25, Y+61	; 0x3d
    ceb8:	ae ad       	ldd	r26, Y+62	; 0x3e
    ceba:	bf ad       	ldd	r27, Y+63	; 0x3f
    cebc:	21 97       	sbiw	r28, 0x01	; 1
    cebe:	48 17       	cp	r20, r24
    cec0:	59 07       	cpc	r21, r25
    cec2:	6a 07       	cpc	r22, r26
    cec4:	7b 07       	cpc	r23, r27
    cec6:	09 f0       	breq	.+2      	; 0xceca <f_rename+0x11e>
    cec8:	7b c0       	rjmp	.+246    	; 0xcfc0 <f_rename+0x214>
    ceca:	04 c0       	rjmp	.+8      	; 0xced4 <f_rename+0x128>
				}
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
    cecc:	04 30       	cpi	r16, 0x04	; 4
    cece:	11 05       	cpc	r17, r1
    ced0:	09 f0       	breq	.+2      	; 0xced4 <f_rename+0x128>
    ced2:	b5 cf       	rjmp	.-150    	; 0xce3e <f_rename+0x92>
					res = dir_register(&djn);			/* Register the new entry */
    ced4:	ce 01       	movw	r24, r28
    ced6:	01 96       	adiw	r24, 0x01	; 1
    ced8:	0e 94 d2 55 	call	0xaba4	; 0xaba4 <dir_register>
    cedc:	8c 01       	movw	r16, r24
					if (res == FR_OK) {
    cede:	89 2b       	or	r24, r25
    cee0:	09 f0       	breq	.+2      	; 0xcee4 <f_rename+0x138>
    cee2:	ad cf       	rjmp	.-166    	; 0xce3e <f_rename+0x92>
						dir = djn.dir;					/* Copy directory entry of the object except name */
    cee4:	0b 8d       	ldd	r16, Y+27	; 0x1b
    cee6:	1c 8d       	ldd	r17, Y+28	; 0x1c
    cee8:	6d e5       	ldi	r22, 0x5D	; 93
    ceea:	70 e0       	ldi	r23, 0x00	; 0
    ceec:	6c 0f       	add	r22, r28
    ceee:	7d 1f       	adc	r23, r29
    cef0:	63 5f       	subi	r22, 0xF3	; 243
    cef2:	7f 4f       	sbci	r23, 0xFF	; 255
    cef4:	43 e1       	ldi	r20, 0x13	; 19
    cef6:	50 e0       	ldi	r21, 0x00	; 0
    cef8:	c8 01       	movw	r24, r16
    cefa:	0d 96       	adiw	r24, 0x0d	; 13
    cefc:	0e 94 fe 49 	call	0x93fc	; 0x93fc <mem_cpy.part.0>
						mem_cpy(dir + 13, buf + 13, SZDIRE - 13);
						dir[DIR_Attr] = buf[DIR_Attr];
    cf00:	a9 96       	adiw	r28, 0x29	; 41
    cf02:	8f ad       	ldd	r24, Y+63	; 0x3f
    cf04:	a9 97       	sbiw	r28, 0x29	; 41
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
    cf06:	84 ff       	sbrs	r24, 4
    cf08:	80 62       	ori	r24, 0x20	; 32
    cf0a:	f8 01       	movw	r30, r16
    cf0c:	83 87       	std	Z+11, r24	; 0x0b
						fs->wflag = 1;
    cf0e:	ef 96       	adiw	r28, 0x3f	; 63
    cf10:	ee ac       	ldd	r14, Y+62	; 0x3e
    cf12:	ff ac       	ldd	r15, Y+63	; 0x3f
    cf14:	ef 97       	sbiw	r28, 0x3f	; 63
    cf16:	bb 24       	eor	r11, r11
    cf18:	b3 94       	inc	r11
    cf1a:	f7 01       	movw	r30, r14
    cf1c:	b3 82       	std	Z+3, r11	; 0x03
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
    cf1e:	f8 01       	movw	r30, r16
    cf20:	83 85       	ldd	r24, Z+11	; 0x0b
    cf22:	84 ff       	sbrs	r24, 4
    cf24:	3d c0       	rjmp	.+122    	; 0xcfa0 <f_rename+0x1f4>
    cf26:	4d a9       	ldd	r20, Y+53	; 0x35
    cf28:	5e a9       	ldd	r21, Y+54	; 0x36
    cf2a:	6f a9       	ldd	r22, Y+55	; 0x37
    cf2c:	78 ad       	ldd	r23, Y+56	; 0x38
    cf2e:	8f 81       	ldd	r24, Y+7	; 0x07
    cf30:	98 85       	ldd	r25, Y+8	; 0x08
    cf32:	a9 85       	ldd	r26, Y+9	; 0x09
    cf34:	ba 85       	ldd	r27, Y+10	; 0x0a
    cf36:	48 17       	cp	r20, r24
    cf38:	59 07       	cpc	r21, r25
    cf3a:	6a 07       	cpc	r22, r26
    cf3c:	7b 07       	cpc	r23, r27
    cf3e:	81 f1       	breq	.+96     	; 0xcfa0 <f_rename+0x1f4>
							sect = clst2sect(fs, ld_clust(fs, dir));
    cf40:	b8 01       	movw	r22, r16
    cf42:	f7 01       	movw	r30, r14
    cf44:	80 81       	ld	r24, Z
    cf46:	0e 94 09 4a 	call	0x9412	; 0x9412 <ld_clust.isra.3>
    cf4a:	ab 01       	movw	r20, r22
    cf4c:	bc 01       	movw	r22, r24
    cf4e:	c7 01       	movw	r24, r14
    cf50:	0e 94 09 48 	call	0x9012	; 0x9012 <clst2sect>
    cf54:	ab 01       	movw	r20, r22
    cf56:	bc 01       	movw	r22, r24
							if (sect == 0) {
    cf58:	41 15       	cp	r20, r1
    cf5a:	51 05       	cpc	r21, r1
    cf5c:	61 05       	cpc	r22, r1
    cf5e:	71 05       	cpc	r23, r1
    cf60:	91 f1       	breq	.+100    	; 0xcfc6 <f_rename+0x21a>
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
    cf62:	c7 01       	movw	r24, r14
    cf64:	0e 94 98 4b 	call	0x9730	; 0x9730 <move_window>
    cf68:	8c 01       	movw	r16, r24
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
								if (res == FR_OK && dir[1] == '.') {
    cf6a:	89 2b       	or	r24, r25
    cf6c:	09 f0       	breq	.+2      	; 0xcf70 <f_rename+0x1c4>
    cf6e:	67 cf       	rjmp	.-306    	; 0xce3e <f_rename+0x92>
							if (sect == 0) {
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
    cf70:	ef 96       	adiw	r28, 0x3f	; 63
    cf72:	8e ad       	ldd	r24, Y+62	; 0x3e
    cf74:	9f ad       	ldd	r25, Y+63	; 0x3f
    cf76:	ef 97       	sbiw	r28, 0x3f	; 63
								if (res == FR_OK && dir[1] == '.') {
    cf78:	fc 01       	movw	r30, r24
    cf7a:	ea 5a       	subi	r30, 0xAA	; 170
    cf7c:	ff 4f       	sbci	r31, 0xFF	; 255
    cf7e:	20 81       	ld	r18, Z
    cf80:	2e 32       	cpi	r18, 0x2E	; 46
    cf82:	71 f4       	brne	.+28     	; 0xcfa0 <f_rename+0x1f4>
									st_clust(fs, dir, djn.obj.sclust);
    cf84:	2f 81       	ldd	r18, Y+7	; 0x07
    cf86:	38 85       	ldd	r19, Y+8	; 0x08
    cf88:	49 85       	ldd	r20, Y+9	; 0x09
    cf8a:	5a 85       	ldd	r21, Y+10	; 0x0a
							if (sect == 0) {
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
    cf8c:	bc 01       	movw	r22, r24
    cf8e:	6b 5a       	subi	r22, 0xAB	; 171
    cf90:	7f 4f       	sbci	r23, 0xFF	; 255
								if (res == FR_OK && dir[1] == '.') {
									st_clust(fs, dir, djn.obj.sclust);
    cf92:	0e 94 1e 4a 	call	0x943c	; 0x943c <st_clust.isra.4>
									fs->wflag = 1;
    cf96:	ef 96       	adiw	r28, 0x3f	; 63
    cf98:	ee ad       	ldd	r30, Y+62	; 0x3e
    cf9a:	ff ad       	ldd	r31, Y+63	; 0x3f
    cf9c:	ef 97       	sbiw	r28, 0x3f	; 63
    cf9e:	b3 82       	std	Z+3, r11	; 0x03
						}
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&djo);		/* Remove old entry */
    cfa0:	ce 01       	movw	r24, r28
    cfa2:	8f 96       	adiw	r24, 0x2f	; 47
    cfa4:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <dir_remove>
    cfa8:	8c 01       	movw	r16, r24
				if (res == FR_OK) {
    cfaa:	89 2b       	or	r24, r25
    cfac:	09 f0       	breq	.+2      	; 0xcfb0 <f_rename+0x204>
    cfae:	47 cf       	rjmp	.-370    	; 0xce3e <f_rename+0x92>
					res = sync_fs(fs);
    cfb0:	ef 96       	adiw	r28, 0x3f	; 63
    cfb2:	8e ad       	ldd	r24, Y+62	; 0x3e
    cfb4:	9f ad       	ldd	r25, Y+63	; 0x3f
    cfb6:	ef 97       	sbiw	r28, 0x3f	; 63
    cfb8:	0e 94 7e 4a 	call	0x94fc	; 0x94fc <sync_fs>
    cfbc:	8c 01       	movw	r16, r24
    cfbe:	3f cf       	rjmp	.-386    	; 0xce3e <f_rename+0x92>
    cfc0:	08 e0       	ldi	r16, 0x08	; 8
    cfc2:	10 e0       	ldi	r17, 0x00	; 0
    cfc4:	3c cf       	rjmp	.-392    	; 0xce3e <f_rename+0x92>
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
						fs->wflag = 1;
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
							sect = clst2sect(fs, ld_clust(fs, dir));
							if (sect == 0) {
								res = FR_INT_ERR;
    cfc6:	02 e0       	ldi	r16, 0x02	; 2
    cfc8:	10 e0       	ldi	r17, 0x00	; 0
    cfca:	39 cf       	rjmp	.-398    	; 0xce3e <f_rename+0x92>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    cfcc:	ce 57       	subi	r28, 0x7E	; 126
    cfce:	df 4f       	sbci	r29, 0xFF	; 255
    cfd0:	e9 e0       	ldi	r30, 0x09	; 9
    cfd2:	0c 94 24 e7 	jmp	0x1ce48	; 0x1ce48 <__epilogue_restores__+0x12>

0000cfd6 <f_chmod>:
FRESULT f_chmod (
	const TCHAR* path,	/* Pointer to the file path */
	BYTE attr,			/* Attribute bits */
	BYTE mask			/* Attribute mask to change */
)
{
    cfd6:	a2 e3       	ldi	r26, 0x32	; 50
    cfd8:	b0 e0       	ldi	r27, 0x00	; 0
    cfda:	e1 ef       	ldi	r30, 0xF1	; 241
    cfdc:	f7 e6       	ldi	r31, 0x67	; 103
    cfde:	0c 94 09 e7 	jmp	0x1ce12	; 0x1ce12 <__prologue_saves__+0x14>
    cfe2:	9a ab       	std	Y+50, r25	; 0x32
    cfe4:	89 ab       	std	Y+49, r24	; 0x31
    cfe6:	e6 2e       	mov	r14, r22
    cfe8:	f4 2e       	mov	r15, r20
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    cfea:	42 e0       	ldi	r20, 0x02	; 2
    cfec:	be 01       	movw	r22, r28
    cfee:	61 5d       	subi	r22, 0xD1	; 209
    cff0:	7f 4f       	sbci	r23, 0xFF	; 255
    cff2:	ce 01       	movw	r24, r28
    cff4:	c1 96       	adiw	r24, 0x31	; 49
    cff6:	0e 94 13 4c 	call	0x9826	; 0x9826 <mount_volume>
	if (res == FR_OK) {
    cffa:	00 97       	sbiw	r24, 0x00	; 0
    cffc:	a9 f5       	brne	.+106    	; 0xd068 <f_chmod+0x92>
		dj.obj.fs = fs;
    cffe:	8f a5       	ldd	r24, Y+47	; 0x2f
    d000:	98 a9       	ldd	r25, Y+48	; 0x30
    d002:	9a 83       	std	Y+2, r25	; 0x02
    d004:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    d006:	80 e0       	ldi	r24, 0x00	; 0
    d008:	92 e0       	ldi	r25, 0x02	; 2
    d00a:	08 d1       	rcall	.+528    	; 0xd21c <ff_memalloc>
    d00c:	6c 01       	movw	r12, r24
    d00e:	00 97       	sbiw	r24, 0x00	; 0
    d010:	b1 f0       	breq	.+44     	; 0xd03e <f_chmod+0x68>
    d012:	ef a5       	ldd	r30, Y+47	; 0x2f
    d014:	f8 a9       	ldd	r31, Y+48	; 0x30
    d016:	94 87       	std	Z+12, r25	; 0x0c
    d018:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);	/* Follow the file path */
    d01a:	69 a9       	ldd	r22, Y+49	; 0x31
    d01c:	7a a9       	ldd	r23, Y+50	; 0x32
    d01e:	ce 01       	movw	r24, r28
    d020:	01 96       	adiw	r24, 0x01	; 1
    d022:	0e 94 60 57 	call	0xaec0	; 0xaec0 <follow_path>
    d026:	8c 01       	movw	r16, r24
		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check object validity */
    d028:	89 2b       	or	r24, r25
    d02a:	29 f4       	brne	.+10     	; 0xd036 <f_chmod+0x60>
    d02c:	88 a5       	ldd	r24, Y+40	; 0x28
    d02e:	80 7a       	andi	r24, 0xA0	; 160
    d030:	49 f0       	breq	.+18     	; 0xd044 <f_chmod+0x6e>
    d032:	06 e0       	ldi	r16, 0x06	; 6
    d034:	10 e0       	ldi	r17, 0x00	; 0
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    d036:	c6 01       	movw	r24, r12
    d038:	f4 d0       	rcall	.+488    	; 0xd222 <ff_memfree>
    d03a:	c8 01       	movw	r24, r16
    d03c:	15 c0       	rjmp	.+42     	; 0xd068 <f_chmod+0x92>


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    d03e:	81 e1       	ldi	r24, 0x11	; 17
    d040:	90 e0       	ldi	r25, 0x00	; 0
    d042:	12 c0       	rjmp	.+36     	; 0xd068 <f_chmod+0x92>
				fs->dirbuf[XDIR_Attr] = (attr & mask) | (fs->dirbuf[XDIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
				res = store_xdir(&dj);
			} else
#endif
			{
				dj.dir[DIR_Attr] = (attr & mask) | (dj.dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
    d044:	eb 8d       	ldd	r30, Y+27	; 0x1b
    d046:	fc 8d       	ldd	r31, Y+28	; 0x1c
    d048:	83 85       	ldd	r24, Z+11	; 0x0b
    d04a:	6e 2d       	mov	r22, r14
    d04c:	68 27       	eor	r22, r24
    d04e:	6f 21       	and	r22, r15
    d050:	67 72       	andi	r22, 0x27	; 39
    d052:	68 27       	eor	r22, r24
    d054:	63 87       	std	Z+11, r22	; 0x0b
				fs->wflag = 1;
    d056:	8f a5       	ldd	r24, Y+47	; 0x2f
    d058:	98 a9       	ldd	r25, Y+48	; 0x30
    d05a:	21 e0       	ldi	r18, 0x01	; 1
    d05c:	fc 01       	movw	r30, r24
    d05e:	23 83       	std	Z+3, r18	; 0x03
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
    d060:	0e 94 7e 4a 	call	0x94fc	; 0x94fc <sync_fs>
    d064:	8c 01       	movw	r16, r24
    d066:	e7 cf       	rjmp	.-50     	; 0xd036 <f_chmod+0x60>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    d068:	e2 96       	adiw	r28, 0x32	; 50
    d06a:	e8 e0       	ldi	r30, 0x08	; 8
    d06c:	0c 94 25 e7 	jmp	0x1ce4a	; 0x1ce4a <__epilogue_restores__+0x14>

0000d070 <f_utime>:

FRESULT f_utime (
	const TCHAR* path,	/* Pointer to the file/directory name */
	const FILINFO* fno	/* Pointer to the timestamp to be set */
)
{
    d070:	a2 e3       	ldi	r26, 0x32	; 50
    d072:	b0 e0       	ldi	r27, 0x00	; 0
    d074:	ee e3       	ldi	r30, 0x3E	; 62
    d076:	f8 e6       	ldi	r31, 0x68	; 104
    d078:	0c 94 09 e7 	jmp	0x1ce12	; 0x1ce12 <__prologue_saves__+0x14>
    d07c:	9a ab       	std	Y+50, r25	; 0x32
    d07e:	89 ab       	std	Y+49, r24	; 0x31
    d080:	6b 01       	movw	r12, r22
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    d082:	42 e0       	ldi	r20, 0x02	; 2
    d084:	be 01       	movw	r22, r28
    d086:	61 5d       	subi	r22, 0xD1	; 209
    d088:	7f 4f       	sbci	r23, 0xFF	; 255
    d08a:	ce 01       	movw	r24, r28
    d08c:	c1 96       	adiw	r24, 0x31	; 49
    d08e:	0e 94 13 4c 	call	0x9826	; 0x9826 <mount_volume>
	if (res == FR_OK) {
    d092:	00 97       	sbiw	r24, 0x00	; 0
    d094:	09 f0       	breq	.+2      	; 0xd098 <f_utime+0x28>
    d096:	41 c0       	rjmp	.+130    	; 0xd11a <f_utime+0xaa>
		dj.obj.fs = fs;
    d098:	8f a5       	ldd	r24, Y+47	; 0x2f
    d09a:	98 a9       	ldd	r25, Y+48	; 0x30
    d09c:	9a 83       	std	Y+2, r25	; 0x02
    d09e:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    d0a0:	80 e0       	ldi	r24, 0x00	; 0
    d0a2:	92 e0       	ldi	r25, 0x02	; 2
    d0a4:	bb d0       	rcall	.+374    	; 0xd21c <ff_memalloc>
    d0a6:	7c 01       	movw	r14, r24
    d0a8:	00 97       	sbiw	r24, 0x00	; 0
    d0aa:	b1 f0       	breq	.+44     	; 0xd0d8 <f_utime+0x68>
    d0ac:	ef a5       	ldd	r30, Y+47	; 0x2f
    d0ae:	f8 a9       	ldd	r31, Y+48	; 0x30
    d0b0:	94 87       	std	Z+12, r25	; 0x0c
    d0b2:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);	/* Follow the file path */
    d0b4:	69 a9       	ldd	r22, Y+49	; 0x31
    d0b6:	7a a9       	ldd	r23, Y+50	; 0x32
    d0b8:	ce 01       	movw	r24, r28
    d0ba:	01 96       	adiw	r24, 0x01	; 1
    d0bc:	0e 94 60 57 	call	0xaec0	; 0xaec0 <follow_path>
    d0c0:	8c 01       	movw	r16, r24
		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check object validity */
    d0c2:	89 2b       	or	r24, r25
    d0c4:	29 f4       	brne	.+10     	; 0xd0d0 <f_utime+0x60>
    d0c6:	88 a5       	ldd	r24, Y+40	; 0x28
    d0c8:	80 7a       	andi	r24, 0xA0	; 160
    d0ca:	49 f0       	breq	.+18     	; 0xd0de <f_utime+0x6e>
    d0cc:	06 e0       	ldi	r16, 0x06	; 6
    d0ce:	10 e0       	ldi	r17, 0x00	; 0
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    d0d0:	c7 01       	movw	r24, r14
    d0d2:	a7 d0       	rcall	.+334    	; 0xd222 <ff_memfree>
    d0d4:	c8 01       	movw	r24, r16
    d0d6:	21 c0       	rjmp	.+66     	; 0xd11a <f_utime+0xaa>


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    d0d8:	81 e1       	ldi	r24, 0x11	; 17
    d0da:	90 e0       	ldi	r25, 0x00	; 0
    d0dc:	1e c0       	rjmp	.+60     	; 0xd11a <f_utime+0xaa>
				st_dword(fs->dirbuf + XDIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
				res = store_xdir(&dj);
			} else
#endif
			{
				st_dword(dj.dir + DIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
    d0de:	f6 01       	movw	r30, r12
    d0e0:	44 81       	ldd	r20, Z+4	; 0x04
    d0e2:	55 81       	ldd	r21, Z+5	; 0x05
    d0e4:	60 e0       	ldi	r22, 0x00	; 0
    d0e6:	70 e0       	ldi	r23, 0x00	; 0
    d0e8:	ba 01       	movw	r22, r20
    d0ea:	55 27       	eor	r21, r21
    d0ec:	44 27       	eor	r20, r20
    d0ee:	86 81       	ldd	r24, Z+6	; 0x06
    d0f0:	97 81       	ldd	r25, Z+7	; 0x07
    d0f2:	a0 e0       	ldi	r26, 0x00	; 0
    d0f4:	b0 e0       	ldi	r27, 0x00	; 0
    d0f6:	48 2b       	or	r20, r24
    d0f8:	59 2b       	or	r21, r25
    d0fa:	6a 2b       	or	r22, r26
    d0fc:	7b 2b       	or	r23, r27
    d0fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    d100:	9c 8d       	ldd	r25, Y+28	; 0x1c
    d102:	46 96       	adiw	r24, 0x16	; 22
    d104:	0e 94 eb 47 	call	0x8fd6	; 0x8fd6 <st_dword>
				fs->wflag = 1;
    d108:	8f a5       	ldd	r24, Y+47	; 0x2f
    d10a:	98 a9       	ldd	r25, Y+48	; 0x30
    d10c:	21 e0       	ldi	r18, 0x01	; 1
    d10e:	fc 01       	movw	r30, r24
    d110:	23 83       	std	Z+3, r18	; 0x03
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
    d112:	0e 94 7e 4a 	call	0x94fc	; 0x94fc <sync_fs>
    d116:	8c 01       	movw	r16, r24
    d118:	db cf       	rjmp	.-74     	; 0xd0d0 <f_utime+0x60>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    d11a:	e2 96       	adiw	r28, 0x32	; 50
    d11c:	e8 e0       	ldi	r30, 0x08	; 8
    d11e:	0c 94 25 e7 	jmp	0x1ce4a	; 0x1ce4a <__epilogue_restores__+0x14>

0000d122 <f_getlabel>:
FRESULT f_getlabel (
	const TCHAR* path,	/* Logical drive number */
	TCHAR* label,		/* Buffer to store the volume label */
	DWORD* vsn			/* Variable to store the volume serial number */
)
{
    d122:	a2 e3       	ldi	r26, 0x32	; 50
    d124:	b0 e0       	ldi	r27, 0x00	; 0
    d126:	e7 e9       	ldi	r30, 0x97	; 151
    d128:	f8 e6       	ldi	r31, 0x68	; 104
    d12a:	0c 94 09 e7 	jmp	0x1ce12	; 0x1ce12 <__prologue_saves__+0x14>
    d12e:	9a ab       	std	Y+50, r25	; 0x32
    d130:	89 ab       	std	Y+49, r24	; 0x31
    d132:	7b 01       	movw	r14, r22
    d134:	6a 01       	movw	r12, r20
	FATFS *fs;
	UINT si, di;
	WCHAR wc;

	/* Get logical drive */
	res = mount_volume(&path, &fs, 0);
    d136:	40 e0       	ldi	r20, 0x00	; 0
    d138:	be 01       	movw	r22, r28
    d13a:	61 5d       	subi	r22, 0xD1	; 209
    d13c:	7f 4f       	sbci	r23, 0xFF	; 255
    d13e:	ce 01       	movw	r24, r28
    d140:	c1 96       	adiw	r24, 0x31	; 49
    d142:	0e 94 13 4c 	call	0x9826	; 0x9826 <mount_volume>
    d146:	8c 01       	movw	r16, r24

	/* Get volume label */
	if (res == FR_OK && label) {
    d148:	89 2b       	or	r24, r25
    d14a:	09 f0       	breq	.+2      	; 0xd14e <f_getlabel+0x2c>
    d14c:	62 c0       	rjmp	.+196    	; 0xd212 <f_getlabel+0xf0>
    d14e:	e1 14       	cp	r14, r1
    d150:	f1 04       	cpc	r15, r1
    d152:	a1 f1       	breq	.+104    	; 0xd1bc <f_getlabel+0x9a>
		dj.obj.fs = fs; dj.obj.sclust = 0;	/* Open root directory */
    d154:	8f a5       	ldd	r24, Y+47	; 0x2f
    d156:	98 a9       	ldd	r25, Y+48	; 0x30
    d158:	9a 83       	std	Y+2, r25	; 0x02
    d15a:	89 83       	std	Y+1, r24	; 0x01
    d15c:	1f 82       	std	Y+7, r1	; 0x07
    d15e:	18 86       	std	Y+8, r1	; 0x08
    d160:	19 86       	std	Y+9, r1	; 0x09
    d162:	1a 86       	std	Y+10, r1	; 0x0a
		res = dir_sdi(&dj, 0);
    d164:	40 e0       	ldi	r20, 0x00	; 0
    d166:	50 e0       	ldi	r21, 0x00	; 0
    d168:	ba 01       	movw	r22, r20
    d16a:	ce 01       	movw	r24, r28
    d16c:	01 96       	adiw	r24, 0x01	; 1
    d16e:	0e 94 1a 50 	call	0xa034	; 0xa034 <dir_sdi>
		if (res == FR_OK) {
    d172:	00 97       	sbiw	r24, 0x00	; 0
    d174:	f1 f4       	brne	.+60     	; 0xd1b2 <f_getlabel+0x90>
		 	res = DIR_READ_LABEL(&dj);		/* Find a volume label entry */
    d176:	61 e0       	ldi	r22, 0x01	; 1
    d178:	70 e0       	ldi	r23, 0x00	; 0
    d17a:	ce 01       	movw	r24, r28
    d17c:	01 96       	adiw	r24, 0x01	; 1
    d17e:	0e 94 b3 53 	call	0xa766	; 0xa766 <dir_read>
		 	if (res == FR_OK) {
    d182:	00 97       	sbiw	r24, 0x00	; 0
    d184:	b1 f4       	brne	.+44     	; 0xd1b2 <f_getlabel+0x90>
    d186:	8b 8d       	ldd	r24, Y+27	; 0x1b
    d188:	9c 8d       	ldd	r25, Y+28	; 0x1c
    d18a:	f7 01       	movw	r30, r14
    d18c:	3b 96       	adiw	r30, 0x0b	; 11
				} else
#endif
				{
					si = di = 0;		/* Extract volume label from AM_VOL entry */
					while (si < 11) {
						wc = dj.dir[si++];
    d18e:	a7 01       	movw	r20, r14
    d190:	dc 01       	movw	r26, r24
    d192:	2d 91       	ld	r18, X+
    d194:	cd 01       	movw	r24, r26
						wc = ff_oem2uni(wc, CODEPAGE);					/* Convert it into Unicode */
						if (wc != 0) wc = put_utf(wc, &label[di], 4);	/* Put it in Unicode */
						if (wc == 0) { di = 0; break; }
						di += wc;
#else									/* ANSI/OEM output */
						label[di++] = (TCHAR)wc;
    d196:	da 01       	movw	r26, r20
    d198:	2d 93       	st	X+, r18
    d19a:	ad 01       	movw	r20, r26
					label[di] = 0;
				} else
#endif
				{
					si = di = 0;		/* Extract volume label from AM_VOL entry */
					while (si < 11) {
    d19c:	ae 17       	cp	r26, r30
    d19e:	bf 07       	cpc	r27, r31
    d1a0:	b9 f7       	brne	.-18     	; 0xd190 <f_getlabel+0x6e>
#else									/* ANSI/OEM output */
						label[di++] = (TCHAR)wc;
#endif
					}
					do {				/* Truncate trailing spaces */
						label[di] = 0;
    d1a2:	10 82       	st	Z, r1
						if (di == 0) break;
    d1a4:	ee 16       	cp	r14, r30
    d1a6:	ff 06       	cpc	r15, r31
    d1a8:	49 f0       	breq	.+18     	; 0xd1bc <f_getlabel+0x9a>
					} while (label[--di] == ' ');
    d1aa:	82 91       	ld	r24, -Z
    d1ac:	80 32       	cpi	r24, 0x20	; 32
    d1ae:	c9 f3       	breq	.-14     	; 0xd1a2 <f_getlabel+0x80>
    d1b0:	05 c0       	rjmp	.+10     	; 0xd1bc <f_getlabel+0x9a>
				}
			}
		}
		if (res == FR_NO_FILE) {	/* No label entry and return nul string */
    d1b2:	84 30       	cpi	r24, 0x04	; 4
    d1b4:	91 05       	cpc	r25, r1
    d1b6:	61 f5       	brne	.+88     	; 0xd210 <f_getlabel+0xee>
			label[0] = 0;
    d1b8:	f7 01       	movw	r30, r14
    d1ba:	10 82       	st	Z, r1
			res = FR_OK;
		}
	}

	/* Get volume serial number */
	if (res == FR_OK && vsn) {
    d1bc:	c1 14       	cp	r12, r1
    d1be:	d1 04       	cpc	r13, r1
    d1c0:	41 f1       	breq	.+80     	; 0xd212 <f_getlabel+0xf0>
		res = move_window(fs, fs->volbase);
    d1c2:	8f a5       	ldd	r24, Y+47	; 0x2f
    d1c4:	98 a9       	ldd	r25, Y+48	; 0x30
    d1c6:	fc 01       	movw	r30, r24
    d1c8:	41 a1       	ldd	r20, Z+33	; 0x21
    d1ca:	52 a1       	ldd	r21, Z+34	; 0x22
    d1cc:	63 a1       	ldd	r22, Z+35	; 0x23
    d1ce:	74 a1       	ldd	r23, Z+36	; 0x24
    d1d0:	0e 94 98 4b 	call	0x9730	; 0x9730 <move_window>
    d1d4:	8c 01       	movw	r16, r24
		if (res == FR_OK) {
    d1d6:	89 2b       	or	r24, r25
    d1d8:	e1 f4       	brne	.+56     	; 0xd212 <f_getlabel+0xf0>
			switch (fs->fs_type) {
    d1da:	ef a5       	ldd	r30, Y+47	; 0x2f
    d1dc:	f8 a9       	ldd	r31, Y+48	; 0x30
    d1de:	80 81       	ld	r24, Z
    d1e0:	83 30       	cpi	r24, 0x03	; 3
    d1e2:	29 f0       	breq	.+10     	; 0xd1ee <f_getlabel+0xcc>
    d1e4:	84 30       	cpi	r24, 0x04	; 4
    d1e6:	31 f0       	breq	.+12     	; 0xd1f4 <f_getlabel+0xd2>

			case FS_FAT32:
				di = BS_VolID32; break;

			default:
				di = BS_VolID;
    d1e8:	87 e2       	ldi	r24, 0x27	; 39
    d1ea:	90 e0       	ldi	r25, 0x00	; 0
    d1ec:	05 c0       	rjmp	.+10     	; 0xd1f8 <f_getlabel+0xd6>
			switch (fs->fs_type) {
			case FS_EXFAT:
				di = BPB_VolIDEx; break;

			case FS_FAT32:
				di = BS_VolID32; break;
    d1ee:	83 e4       	ldi	r24, 0x43	; 67
    d1f0:	90 e0       	ldi	r25, 0x00	; 0
    d1f2:	02 c0       	rjmp	.+4      	; 0xd1f8 <f_getlabel+0xd6>
	if (res == FR_OK && vsn) {
		res = move_window(fs, fs->volbase);
		if (res == FR_OK) {
			switch (fs->fs_type) {
			case FS_EXFAT:
				di = BPB_VolIDEx; break;
    d1f4:	84 e6       	ldi	r24, 0x64	; 100
    d1f6:	90 e0       	ldi	r25, 0x00	; 0
				di = BS_VolID32; break;

			default:
				di = BS_VolID;
			}
			*vsn = ld_dword(fs->win + di);
    d1f8:	f5 96       	adiw	r30, 0x35	; 53
    d1fa:	8e 0f       	add	r24, r30
    d1fc:	9f 1f       	adc	r25, r31
    d1fe:	0e 94 d6 47 	call	0x8fac	; 0x8fac <ld_dword>
    d202:	d6 01       	movw	r26, r12
    d204:	6d 93       	st	X+, r22
    d206:	7d 93       	st	X+, r23
    d208:	8d 93       	st	X+, r24
    d20a:	9c 93       	st	X, r25
    d20c:	13 97       	sbiw	r26, 0x03	; 3
    d20e:	01 c0       	rjmp	.+2      	; 0xd212 <f_getlabel+0xf0>
						if (di == 0) break;
					} while (label[--di] == ' ');
				}
			}
		}
		if (res == FR_NO_FILE) {	/* No label entry and return nul string */
    d210:	8c 01       	movw	r16, r24
			*vsn = ld_dword(fs->win + di);
		}
	}

	LEAVE_FF(fs, res);
}
    d212:	c8 01       	movw	r24, r16
    d214:	e2 96       	adiw	r28, 0x32	; 50
    d216:	e8 e0       	ldi	r30, 0x08	; 8
    d218:	0c 94 25 e7 	jmp	0x1ce4a	; 0x1ce4a <__epilogue_restores__+0x14>

0000d21c <ff_memalloc>:

void* ff_memalloc (	/* Returns pointer to the allocated memory block (null if not enough core) */
	UINT msize		/* Number of bytes to allocate */
)
{
	return safemalloc(msize);	/* Allocate a new memory block with POSIX API */
    d21c:	0c 94 06 28 	jmp	0x500c	; 0x500c <safemalloc>
}
    d220:	08 95       	ret

0000d222 <ff_memfree>:

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free (nothing to do if null) */
)
{
	safefree(mblock);	/* Free the memory block with POSIX API */
    d222:	0c 94 28 28 	jmp	0x5050	; 0x5050 <safefree>
    d226:	08 95       	ret

0000d228 <ff_uni2oem>:
#if FF_CODE_PAGE != 0 && FF_CODE_PAGE < 900
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
    d228:	cf 92       	push	r12
    d22a:	df 92       	push	r13
    d22c:	ef 92       	push	r14
    d22e:	ff 92       	push	r15
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (uni < 0x80) {	/* ASCII? */
    d230:	60 38       	cpi	r22, 0x80	; 128
    d232:	71 05       	cpc	r23, r1
    d234:	81 05       	cpc	r24, r1
    d236:	91 05       	cpc	r25, r1
    d238:	10 f4       	brcc	.+4      	; 0xd23e <ff_uni2oem+0x16>
		c = (WCHAR)uni;
    d23a:	cb 01       	movw	r24, r22
    d23c:	23 c0       	rjmp	.+70     	; 0xd284 <ff_uni2oem+0x5c>

	} else {			/* Non-ASCII */
		if (uni < 0x10000 && cp == FF_CODE_PAGE) {	/* Is it in BMP and valid code page? */
    d23e:	61 15       	cp	r22, r1
    d240:	71 05       	cpc	r23, r1
    d242:	21 e0       	ldi	r18, 0x01	; 1
    d244:	82 07       	cpc	r24, r18
    d246:	91 05       	cpc	r25, r1
    d248:	d8 f4       	brcc	.+54     	; 0xd280 <ff_uni2oem+0x58>
    d24a:	45 3b       	cpi	r20, 0xB5	; 181
    d24c:	51 40       	sbci	r21, 0x01	; 1
    d24e:	c1 f4       	brne	.+48     	; 0xd280 <ff_uni2oem+0x58>
    d250:	e6 ea       	ldi	r30, 0xA6	; 166
    d252:	f7 e0       	ldi	r31, 0x07	; 7
    d254:	20 e0       	ldi	r18, 0x00	; 0
    d256:	30 e0       	ldi	r19, 0x00	; 0
			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
    d258:	c1 90       	ld	r12, Z+
    d25a:	d1 90       	ld	r13, Z+
    d25c:	e1 2c       	mov	r14, r1
    d25e:	f1 2c       	mov	r15, r1
    d260:	6c 15       	cp	r22, r12
    d262:	7d 05       	cpc	r23, r13
    d264:	8e 05       	cpc	r24, r14
    d266:	9f 05       	cpc	r25, r15
    d268:	29 f0       	breq	.+10     	; 0xd274 <ff_uni2oem+0x4c>
    d26a:	2f 5f       	subi	r18, 0xFF	; 255
    d26c:	3f 4f       	sbci	r19, 0xFF	; 255
    d26e:	20 38       	cpi	r18, 0x80	; 128
    d270:	31 05       	cpc	r19, r1
    d272:	91 f7       	brne	.-28     	; 0xd258 <ff_uni2oem+0x30>
			c = (c + 0x80) & 0xFF;
    d274:	b9 01       	movw	r22, r18
    d276:	60 58       	subi	r22, 0x80	; 128
    d278:	7f 4f       	sbci	r23, 0xFF	; 255
    d27a:	cb 01       	movw	r24, r22
    d27c:	99 27       	eor	r25, r25
    d27e:	02 c0       	rjmp	.+4      	; 0xd284 <ff_uni2oem+0x5c>
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
	WCHAR c = 0;
    d280:	80 e0       	ldi	r24, 0x00	; 0
    d282:	90 e0       	ldi	r25, 0x00	; 0
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
    d284:	ff 90       	pop	r15
    d286:	ef 90       	pop	r14
    d288:	df 90       	pop	r13
    d28a:	cf 90       	pop	r12
    d28c:	08 95       	ret

0000d28e <ff_oem2uni>:
{
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (oem < 0x80) {	/* ASCII? */
    d28e:	80 38       	cpi	r24, 0x80	; 128
    d290:	91 05       	cpc	r25, r1
    d292:	88 f0       	brcs	.+34     	; 0xd2b6 <ff_oem2uni+0x28>
		c = oem;

	} else {			/* Extended char */
		if (cp == FF_CODE_PAGE) {	/* Is it a valid code page? */
    d294:	65 3b       	cpi	r22, 0xB5	; 181
    d296:	71 40       	sbci	r23, 0x01	; 1
    d298:	61 f4       	brne	.+24     	; 0xd2b2 <ff_oem2uni+0x24>
			if (oem < 0x100) c = p[oem - 0x80];
    d29a:	8f 3f       	cpi	r24, 0xFF	; 255
    d29c:	91 05       	cpc	r25, r1
    d29e:	09 f0       	breq	.+2      	; 0xd2a2 <ff_oem2uni+0x14>
    d2a0:	40 f4       	brcc	.+16     	; 0xd2b2 <ff_oem2uni+0x24>
    d2a2:	88 0f       	add	r24, r24
    d2a4:	99 1f       	adc	r25, r25
    d2a6:	fc 01       	movw	r30, r24
    d2a8:	ea 55       	subi	r30, 0x5A	; 90
    d2aa:	f9 4f       	sbci	r31, 0xF9	; 249
    d2ac:	80 81       	ld	r24, Z
    d2ae:	91 81       	ldd	r25, Z+1	; 0x01
    d2b0:	08 95       	ret
WCHAR ff_oem2uni (	/* Returns Unicode character in UTF-16, zero on error */
	WCHAR	oem,	/* OEM code to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
	WCHAR c = 0;
    d2b2:	80 e0       	ldi	r24, 0x00	; 0
    d2b4:	90 e0       	ldi	r25, 0x00	; 0
			if (oem < 0x100) c = p[oem - 0x80];
		}
	}

	return c;
}
    d2b6:	08 95       	ret

0000d2b8 <ff_wtoupper>:

		0x0000	/* EOT */
	};


	if (uni < 0x10000) {	/* Is it in BMP? */
    d2b8:	61 15       	cp	r22, r1
    d2ba:	71 05       	cpc	r23, r1
    d2bc:	21 e0       	ldi	r18, 0x01	; 1
    d2be:	82 07       	cpc	r24, r18
    d2c0:	91 05       	cpc	r25, r1
    d2c2:	08 f0       	brcs	.+2      	; 0xd2c6 <ff_wtoupper+0xe>
    d2c4:	5a c0       	rjmp	.+180    	; 0xd37a <ff_wtoupper+0xc2>
		uc = (WORD)uni;
		p = uc < 0x1000 ? cvt1 : cvt2;
    d2c6:	61 15       	cp	r22, r1
    d2c8:	80 e1       	ldi	r24, 0x10	; 16
    d2ca:	78 07       	cpc	r23, r24
    d2cc:	18 f0       	brcs	.+6      	; 0xd2d4 <ff_wtoupper+0x1c>
    d2ce:	a8 ef       	ldi	r26, 0xF8	; 248
    d2d0:	b4 e0       	ldi	r27, 0x04	; 4
    d2d2:	02 c0       	rjmp	.+4      	; 0xd2d8 <ff_wtoupper+0x20>
    d2d4:	a4 eb       	ldi	r26, 0xB4	; 180
    d2d6:	b5 e0       	ldi	r27, 0x05	; 5
		for (;;) {
			bc = *p++;								/* Get the block base */
    d2d8:	2d 91       	ld	r18, X+
    d2da:	3c 91       	ld	r19, X
    d2dc:	11 97       	sbiw	r26, 0x01	; 1
			if (bc == 0 || uc < bc) break;			/* Not matched? */
    d2de:	21 15       	cp	r18, r1
    d2e0:	31 05       	cpc	r19, r1
    d2e2:	09 f4       	brne	.+2      	; 0xd2e6 <ff_wtoupper+0x2e>
    d2e4:	48 c0       	rjmp	.+144    	; 0xd376 <ff_wtoupper+0xbe>
    d2e6:	62 17       	cp	r22, r18
    d2e8:	73 07       	cpc	r23, r19
    d2ea:	08 f4       	brcc	.+2      	; 0xd2ee <ff_wtoupper+0x36>
    d2ec:	44 c0       	rjmp	.+136    	; 0xd376 <ff_wtoupper+0xbe>
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
    d2ee:	14 96       	adiw	r26, 0x04	; 4
    d2f0:	fd 01       	movw	r30, r26
    d2f2:	32 97       	sbiw	r30, 0x02	; 2
    d2f4:	80 81       	ld	r24, Z
    d2f6:	91 81       	ldd	r25, Z+1	; 0x01
    d2f8:	e9 2f       	mov	r30, r25
    d2fa:	ff 27       	eor	r31, r31
    d2fc:	99 27       	eor	r25, r25
			if (uc < bc + nc) {	/* In the block? */
    d2fe:	a9 01       	movw	r20, r18
    d300:	48 0f       	add	r20, r24
    d302:	59 1f       	adc	r21, r25
    d304:	64 17       	cp	r22, r20
    d306:	75 07       	cpc	r23, r21
    d308:	70 f5       	brcc	.+92     	; 0xd366 <ff_wtoupper+0xae>
				switch (cmd) {
    d30a:	e9 30       	cpi	r30, 0x09	; 9
    d30c:	f1 05       	cpc	r31, r1
    d30e:	98 f5       	brcc	.+102    	; 0xd376 <ff_wtoupper+0xbe>
    d310:	ec 54       	subi	r30, 0x4C	; 76
    d312:	ff 4f       	sbci	r31, 0xFF	; 255
    d314:	0c 94 d0 e6 	jmp	0x1cda0	; 0x1cda0 <__tablejump2__>
				case 0:	uc = p[uc - bc]; break;		/* Table conversion */
    d318:	62 1b       	sub	r22, r18
    d31a:	73 0b       	sbc	r23, r19
    d31c:	fb 01       	movw	r30, r22
    d31e:	ee 0f       	add	r30, r30
    d320:	ff 1f       	adc	r31, r31
    d322:	ea 0f       	add	r30, r26
    d324:	fb 1f       	adc	r31, r27
    d326:	60 81       	ld	r22, Z
    d328:	71 81       	ldd	r23, Z+1	; 0x01
    d32a:	25 c0       	rjmp	.+74     	; 0xd376 <ff_wtoupper+0xbe>
				case 1:	uc -= (uc - bc) & 1; break;	/* Case pairs */
    d32c:	cb 01       	movw	r24, r22
    d32e:	82 1b       	sub	r24, r18
    d330:	93 0b       	sbc	r25, r19
    d332:	81 70       	andi	r24, 0x01	; 1
    d334:	99 27       	eor	r25, r25
    d336:	68 1b       	sub	r22, r24
    d338:	79 0b       	sbc	r23, r25
    d33a:	1d c0       	rjmp	.+58     	; 0xd376 <ff_wtoupper+0xbe>
				case 2: uc -= 16; break;			/* Shift -16 */
    d33c:	60 51       	subi	r22, 0x10	; 16
    d33e:	71 09       	sbc	r23, r1
    d340:	1a c0       	rjmp	.+52     	; 0xd376 <ff_wtoupper+0xbe>
				case 3:	uc -= 32; break;			/* Shift -32 */
    d342:	60 52       	subi	r22, 0x20	; 32
    d344:	71 09       	sbc	r23, r1
    d346:	17 c0       	rjmp	.+46     	; 0xd376 <ff_wtoupper+0xbe>
				case 4:	uc -= 48; break;			/* Shift -48 */
    d348:	60 53       	subi	r22, 0x30	; 48
    d34a:	71 09       	sbc	r23, r1
    d34c:	14 c0       	rjmp	.+40     	; 0xd376 <ff_wtoupper+0xbe>
				case 5:	uc -= 26; break;			/* Shift -26 */
    d34e:	6a 51       	subi	r22, 0x1A	; 26
    d350:	71 09       	sbc	r23, r1
    d352:	11 c0       	rjmp	.+34     	; 0xd376 <ff_wtoupper+0xbe>
				case 6:	uc += 8; break;				/* Shift +8 */
    d354:	68 5f       	subi	r22, 0xF8	; 248
    d356:	7f 4f       	sbci	r23, 0xFF	; 255
    d358:	0e c0       	rjmp	.+28     	; 0xd376 <ff_wtoupper+0xbe>
				case 7: uc -= 80; break;			/* Shift -80 */
    d35a:	60 55       	subi	r22, 0x50	; 80
    d35c:	71 09       	sbc	r23, r1
    d35e:	0b c0       	rjmp	.+22     	; 0xd376 <ff_wtoupper+0xbe>
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
    d360:	60 56       	subi	r22, 0x60	; 96
    d362:	7c 41       	sbci	r23, 0x1C	; 28
    d364:	08 c0       	rjmp	.+16     	; 0xd376 <ff_wtoupper+0xbe>
				}
				break;
			}
			if (cmd == 0) p += nc;	/* Skip table if needed */
    d366:	ef 2b       	or	r30, r31
    d368:	09 f0       	breq	.+2      	; 0xd36c <ff_wtoupper+0xb4>
    d36a:	b6 cf       	rjmp	.-148    	; 0xd2d8 <ff_wtoupper+0x20>
    d36c:	88 0f       	add	r24, r24
    d36e:	99 1f       	adc	r25, r25
    d370:	a8 0f       	add	r26, r24
    d372:	b9 1f       	adc	r27, r25
    d374:	b1 cf       	rjmp	.-158    	; 0xd2d8 <ff_wtoupper+0x20>
		}
		uni = uc;
    d376:	80 e0       	ldi	r24, 0x00	; 0
    d378:	90 e0       	ldi	r25, 0x00	; 0
	}

	return uni;
}
    d37a:	08 95       	ret

0000d37c <disk_status>:

DSTATUS disk_status (
BYTE pdrv                                         /* Physical drive nmuber to identify the drive */
)
{
    switch (pdrv)
    d37c:	81 11       	cpse	r24, r1
    d37e:	02 c0       	rjmp	.+4      	; 0xd384 <disk_status+0x8>
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_status() );
    d380:	a1 c1       	rjmp	.+834    	; 0xd6c4 <mmc_disk_status>
    d382:	08 95       	ret
#ifdef DRV_USB
        case DEV_USB :
            return ( usb_disk_status() );
#endif
    }
    return STA_NOINIT;
    d384:	81 e0       	ldi	r24, 0x01	; 1
}
    d386:	08 95       	ret

0000d388 <disk_initialize>:
DSTATUS disk_initialize (
BYTE pdrv                                         /* Physical drive nmuber to identify the drive */
)
{

    switch (pdrv)
    d388:	81 11       	cpse	r24, r1
    d38a:	02 c0       	rjmp	.+4      	; 0xd390 <disk_initialize+0x8>
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_initialize() );
    d38c:	f6 c0       	rjmp	.+492    	; 0xd57a <mmc_disk_initialize>
    d38e:	08 95       	ret
#ifdef DRV_USB
        case DEV_USB :
            return ( usb_disk_initialize() );
#endif
    }
    return STA_NOINIT;
    d390:	81 e0       	ldi	r24, 0x01	; 1
}
    d392:	08 95       	ret

0000d394 <disk_read>:
BYTE pdrv,                                        /* Physical drive nmuber to identify the drive */
BYTE *buff,                                       /* Data buffer to store read data */
LBA_t sector,                                     /* Start sector in LBA */
UINT count                                        /* Number of sectors to read */
)
{
    d394:	0f 93       	push	r16
    d396:	1f 93       	push	r17
    d398:	fb 01       	movw	r30, r22
    switch (pdrv)
    d39a:	81 11       	cpse	r24, r1
    d39c:	06 c0       	rjmp	.+12     	; 0xd3aa <disk_read+0x16>
    d39e:	ba 01       	movw	r22, r20
    d3a0:	a9 01       	movw	r20, r18
    d3a2:	cf 01       	movw	r24, r30
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_read(buff, sector, count) );
    d3a4:	98 01       	movw	r18, r16
    d3a6:	91 d1       	rcall	.+802    	; 0xd6ca <mmc_disk_read>
    d3a8:	02 c0       	rjmp	.+4      	; 0xd3ae <disk_read+0x1a>
#ifdef DRV_USB
        case DEV_USB :
            return ( usb_disk_read(buff, sector, count) );
#endif
    }
    return RES_PARERR;
    d3aa:	84 e0       	ldi	r24, 0x04	; 4
    d3ac:	90 e0       	ldi	r25, 0x00	; 0
}
    d3ae:	1f 91       	pop	r17
    d3b0:	0f 91       	pop	r16
    d3b2:	08 95       	ret

0000d3b4 <disk_write>:
BYTE pdrv,                                        /* Physical drive nmuber to identify the drive */
const BYTE *buff,                                 /* Data to be written */
LBA_t sector,                                     /* Start sector in LBA */
UINT count                                        /* Number of sectors to write */
)
{
    d3b4:	0f 93       	push	r16
    d3b6:	1f 93       	push	r17
    d3b8:	fb 01       	movw	r30, r22
    switch (pdrv)
    d3ba:	81 11       	cpse	r24, r1
    d3bc:	06 c0       	rjmp	.+12     	; 0xd3ca <disk_write+0x16>
    d3be:	ba 01       	movw	r22, r20
    d3c0:	a9 01       	movw	r20, r18
    d3c2:	cf 01       	movw	r24, r30
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_write(buff, sector, count) );
    d3c4:	98 01       	movw	r18, r16
    d3c6:	e2 d1       	rcall	.+964    	; 0xd78c <mmc_disk_write>
    d3c8:	02 c0       	rjmp	.+4      	; 0xd3ce <disk_write+0x1a>
        case DEV_USB :
            return ( usb_disk_write(buff, sector, count) );
#endif
    }

    return RES_PARERR;
    d3ca:	84 e0       	ldi	r24, 0x04	; 4
    d3cc:	90 e0       	ldi	r25, 0x00	; 0
}
    d3ce:	1f 91       	pop	r17
    d3d0:	0f 91       	pop	r16
    d3d2:	08 95       	ret

0000d3d4 <disk_ioctl>:
DRESULT disk_ioctl (
BYTE pdrv,                                        /* Physical drive nmuber (0..) */
BYTE cmd,                                         /* Control code */
void *buff                                        /* Buffer to send/receive control data */
)
{
    d3d4:	96 2f       	mov	r25, r22
    switch (pdrv)
    d3d6:	81 11       	cpse	r24, r1
    d3d8:	04 c0       	rjmp	.+8      	; 0xd3e2 <disk_ioctl+0xe>
    d3da:	ba 01       	movw	r22, r20
    d3dc:	89 2f       	mov	r24, r25
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_ioctl(cmd, buff) );
    d3de:	4a c2       	rjmp	.+1172   	; 0xd874 <mmc_disk_ioctl>
    d3e0:	08 95       	ret
#ifdef DRV_USB
        case DEV_MMC :
            return ( usb_disk_ioctl(cmd, buff) );
#endif
    }
    return RES_PARERR;
    d3e2:	84 e0       	ldi	r24, 0x04	; 4
    d3e4:	90 e0       	ldi	r25, 0x00	; 0
}
    d3e6:	08 95       	ret

0000d3e8 <xchg_spi>:
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d3e8:	f9 c4       	rjmp	.+2546   	; 0xdddc <mmc_spi_TXRX>
    return dat;
}
    d3ea:	08 95       	ret

0000d3ec <deselect>:
///@return void
MEMSPACE
static
void deselect (void)
{
    CS_HIGH();
    d3ec:	ce d4       	rcall	.+2460   	; 0xdd8a <mmc_spi_end>
    xchg_spi(0xFF);                               /*< Dummy clock (force DO hi-z for multiple slave SPI) */
    d3ee:	8f ef       	ldi	r24, 0xFF	; 255
    d3f0:	fb df       	rcall	.-10     	; 0xd3e8 <xchg_spi>
    xchg_spi(0xFF);                               /*< Dummy clock (force DO hi-z for multiple slave SPI) */
    d3f2:	8f ef       	ldi	r24, 0xFF	; 255
    d3f4:	f9 cf       	rjmp	.-14     	; 0xd3e8 <xchg_spi>
    d3f6:	08 95       	ret

0000d3f8 <rcvr_datablock>:
    d3f8:	0f 93       	push	r16
static
int rcvr_datablock (
BYTE *buff,                                       /*< Data buffer to store received data */
UINT btr                                          /*< Byte count (must be multiple of 4) */
)
{
    d3fa:	1f 93       	push	r17
    d3fc:	cf 93       	push	r28
    d3fe:	df 93       	push	r29
    d400:	ec 01       	movw	r28, r24
    d402:	8b 01       	movw	r16, r22
    BYTE token;

    mmc_set_ms_timeout(1000);
    d404:	88 ee       	ldi	r24, 0xE8	; 232
    d406:	93 e0       	ldi	r25, 0x03	; 3
    d408:	ec d4       	rcall	.+2520   	; 0xdde2 <mmc_set_ms_timeout>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d40a:	8f ef       	ldi	r24, 0xFF	; 255
    d40c:	e7 d4       	rcall	.+2510   	; 0xdddc <mmc_spi_TXRX>

    mmc_set_ms_timeout(1000);
    do                                            /* Wait for data packet in timeout of 400ms */
    {
        token = xchg_spi(0xFF);
    } while ((token == 0xFF) && !mmc_test_timeout());
    d40e:	8f 3f       	cpi	r24, 0xFF	; 255
    d410:	31 f4       	brne	.+12     	; 0xd41e <rcvr_datablock+0x26>
    d412:	ee d4       	rcall	.+2524   	; 0xddf0 <mmc_test_timeout>
    d414:	89 2b       	or	r24, r25
    d416:	c9 f3       	breq	.-14     	; 0xd40a <rcvr_datablock+0x12>
    if (token != 0xFE) return 0;                  /* If not valid data token, retutn with error */
    d418:	80 e0       	ldi	r24, 0x00	; 0
    d41a:	90 e0       	ldi	r25, 0x00	; 0
    d41c:	0b c0       	rjmp	.+22     	; 0xd434 <rcvr_datablock+0x3c>
    d41e:	8e 3f       	cpi	r24, 0xFE	; 254
void rcvr_spi_multi (
BYTE *p,                                          /* Data read buffer */
UINT cnt                                          /* Size of data block */
)
{
    mmc_spi_RX_buffer((uint8_t *)p, cnt);
    d420:	d9 f7       	brne	.-10     	; 0xd418 <rcvr_datablock+0x20>
    d422:	b8 01       	movw	r22, r16
    d424:	ce 01       	movw	r24, r28
        token = xchg_spi(0xFF);
    } while ((token == 0xFF) && !mmc_test_timeout());
    if (token != 0xFE) return 0;                  /* If not valid data token, retutn with error */

    rcvr_spi_multi(buff, btr);                    /* Receive the data block into buffer */
    xchg_spi(0xFF);                               /* Discard CRC */
    d426:	d7 d4       	rcall	.+2478   	; 0xddd6 <mmc_spi_RX_buffer>
    d428:	8f ef       	ldi	r24, 0xFF	; 255
    d42a:	de df       	rcall	.-68     	; 0xd3e8 <xchg_spi>
    xchg_spi(0xFF);
    d42c:	8f ef       	ldi	r24, 0xFF	; 255
    d42e:	dc df       	rcall	.-72     	; 0xd3e8 <xchg_spi>
    d430:	81 e0       	ldi	r24, 0x01	; 1
    d432:	90 e0       	ldi	r25, 0x00	; 0
    d434:	df 91       	pop	r29

    return 1;                                     /* Return with success */
}
    d436:	cf 91       	pop	r28
    d438:	1f 91       	pop	r17
    d43a:	0f 91       	pop	r16
    d43c:	08 95       	ret

0000d43e <wait_ready>:
    d43e:	cf 93       	push	r28
int wait_ready (
UINT wt                                           /*< Timeout [ms] */
)
{
    BYTE d;
    mmc_set_ms_timeout(wt);
    d440:	d0 d4       	rcall	.+2464   	; 0xdde2 <mmc_set_ms_timeout>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d442:	8f ef       	ldi	r24, 0xFF	; 255
    d444:	cb d4       	rcall	.+2454   	; 0xdddc <mmc_spi_TXRX>
    d446:	c8 2f       	mov	r28, r24
{
    BYTE d;
    mmc_set_ms_timeout(wt);
    do
    d = xchg_spi(0xFF);
    while (d != 0xFF && !mmc_test_timeout());
    d448:	8f 3f       	cpi	r24, 0xFF	; 255
    d44a:	19 f0       	breq	.+6      	; 0xd452 <wait_ready+0x14>
    d44c:	d1 d4       	rcall	.+2466   	; 0xddf0 <mmc_test_timeout>
    d44e:	89 2b       	or	r24, r25
    d450:	c1 f3       	breq	.-16     	; 0xd442 <wait_ready+0x4>

    return (d == 0xFF) ? 1 : 0;
    d452:	81 e0       	ldi	r24, 0x01	; 1
    d454:	90 e0       	ldi	r25, 0x00	; 0
    d456:	cf 3f       	cpi	r28, 0xFF	; 255
    d458:	11 f0       	breq	.+4      	; 0xd45e <wait_ready+0x20>
    d45a:	80 e0       	ldi	r24, 0x00	; 0
    d45c:	90 e0       	ldi	r25, 0x00	; 0
}
    d45e:	cf 91       	pop	r28
    d460:	08 95       	ret

0000d462 <select>:
///@return 1 Successful
///@return 0 Timeout
MEMSPACE
static
int select (void)
{
    d462:	cf 93       	push	r28
    d464:	df 93       	push	r29
    d466:	00 d0       	rcall	.+0      	; 0xd468 <select+0x6>
    d468:	1f 92       	push	r1
    CS_LOW();
    d46a:	82 d4       	rcall	.+2308   	; 0xdd70 <mmc_spi_begin>
    xchg_spi(0xFF);                               /* Dummy clock (force DO enabled) */
    d46c:	8f ef       	ldi	r24, 0xFF	; 255
    d46e:	bc df       	rcall	.-136    	; 0xd3e8 <xchg_spi>

    if (wait_ready(1000))
    d470:	88 ee       	ldi	r24, 0xE8	; 232
    d472:	93 e0       	ldi	r25, 0x03	; 3
    d474:	e4 df       	rcall	.-56     	; 0xd43e <wait_ready>
    d476:	ec 01       	movw	r28, r24
    d478:	89 2b       	or	r24, r25
    d47a:	61 f4       	brne	.+24     	; 0xd494 <select+0x32>
        return 1;                                 /* OK */

    printf("select failed!\n");
    d47c:	89 e6       	ldi	r24, 0x69	; 105
    d47e:	97 e0       	ldi	r25, 0x07	; 7
    d480:	a0 e0       	ldi	r26, 0x00	; 0
    d482:	ed b7       	in	r30, 0x3d	; 61
    d484:	fe b7       	in	r31, 0x3e	; 62
    d486:	81 83       	std	Z+1, r24	; 0x01
    d488:	92 83       	std	Z+2, r25	; 0x02
    d48a:	a3 83       	std	Z+3, r26	; 0x03
    d48c:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>

    deselect();
    d490:	ad df       	rcall	.-166    	; 0xd3ec <deselect>
    d492:	02 c0       	rjmp	.+4      	; 0xd498 <select+0x36>
{
    CS_LOW();
    xchg_spi(0xFF);                               /* Dummy clock (force DO enabled) */

    if (wait_ready(1000))
        return 1;                                 /* OK */
    d494:	c1 e0       	ldi	r28, 0x01	; 1
    d496:	d0 e0       	ldi	r29, 0x00	; 0

    printf("select failed!\n");

    deselect();
    return 0;                                     /* Timeout */
}
    d498:	ce 01       	movw	r24, r28
    d49a:	cd b7       	in	r28, 0x3d	; 61
    d49c:	de b7       	in	r29, 0x3e	; 62
    d49e:	23 96       	adiw	r28, 0x03	; 3
    d4a0:	e2 e0       	ldi	r30, 0x02	; 2
    d4a2:	0c 94 2b e7 	jmp	0x1ce56	; 0x1ce56 <__epilogue_restores__+0x20>

0000d4a6 <send_cmd>:
static
BYTE send_cmd (
BYTE cmd,                                         /*< Command index */
DWORD arg                                         /*< Argument */
)
{
    d4a6:	ff 92       	push	r15
    d4a8:	0f 93       	push	r16
    d4aa:	1f 93       	push	r17
    d4ac:	cf 93       	push	r28
    d4ae:	df 93       	push	r29
    d4b0:	c8 2f       	mov	r28, r24
    d4b2:	d4 2f       	mov	r29, r20
    d4b4:	15 2f       	mov	r17, r21
    d4b6:	06 2f       	mov	r16, r22
    d4b8:	f7 2e       	mov	r15, r23
    BYTE n, res;

    if (cmd & 0x80)                               /* ACMD<n> is the command sequense of CMD55-CMD<n> */
    d4ba:	87 ff       	sbrs	r24, 7
    d4bc:	08 c0       	rjmp	.+16     	; 0xd4ce <send_cmd+0x28>
    {
        cmd &= 0x7F;
        res = send_cmd(CMD55, 0);
    d4be:	40 e0       	ldi	r20, 0x00	; 0
    d4c0:	50 e0       	ldi	r21, 0x00	; 0
    d4c2:	ba 01       	movw	r22, r20
    d4c4:	87 e3       	ldi	r24, 0x37	; 55
    d4c6:	ef df       	rcall	.-34     	; 0xd4a6 <send_cmd>
        if (res > 1) return res;
    d4c8:	82 30       	cpi	r24, 0x02	; 2
    d4ca:	58 f5       	brcc	.+86     	; 0xd522 <send_cmd+0x7c>
{
    BYTE n, res;

    if (cmd & 0x80)                               /* ACMD<n> is the command sequense of CMD55-CMD<n> */
    {
        cmd &= 0x7F;
    d4cc:	cf 77       	andi	r28, 0x7F	; 127
        res = send_cmd(CMD55, 0);
        if (res > 1) return res;
    }

/* Select the card and wait for ready except to stop multiple block read */
    if (cmd != CMD12)
    d4ce:	cc 30       	cpi	r28, 0x0C	; 12
    d4d0:	71 f4       	brne	.+28     	; 0xd4ee <send_cmd+0x48>
        deselect();
        if (!select()) return 0xFF;
    }

/* Send command packet */
    xchg_spi(0x40 | cmd);                         /* Start + Command index */
    d4d2:	8c 2f       	mov	r24, r28
    d4d4:	80 64       	ori	r24, 0x40	; 64
    d4d6:	88 df       	rcall	.-240    	; 0xd3e8 <xchg_spi>
    xchg_spi((BYTE)(arg >> 24));                  /* Argument[31..24] */
    d4d8:	8f 2d       	mov	r24, r15
    d4da:	86 df       	rcall	.-244    	; 0xd3e8 <xchg_spi>
    xchg_spi((BYTE)(arg >> 16));                  /* Argument[23..16] */
    d4dc:	80 2f       	mov	r24, r16
    d4de:	84 df       	rcall	.-248    	; 0xd3e8 <xchg_spi>
    xchg_spi((BYTE)(arg >> 8));                   /* Argument[15..8] */
    d4e0:	81 2f       	mov	r24, r17
    d4e2:	82 df       	rcall	.-252    	; 0xd3e8 <xchg_spi>
    d4e4:	8d 2f       	mov	r24, r29
    xchg_spi((BYTE)arg);                          /* Argument[7..0] */
    d4e6:	80 df       	rcall	.-256    	; 0xd3e8 <xchg_spi>
    n = 0x01;                                     /* Dummy CRC + Stop */
    if (cmd == CMD0) n = 0x95;                    /* Valid CRC for CMD0(0) + Stop */
    d4e8:	cc 23       	and	r28, r28
    d4ea:	c9 f0       	breq	.+50     	; 0xd51e <send_cmd+0x78>
    d4ec:	06 c0       	rjmp	.+12     	; 0xd4fa <send_cmd+0x54>
    }

/* Select the card and wait for ready except to stop multiple block read */
    if (cmd != CMD12)
    {
        deselect();
    d4ee:	7e df       	rcall	.-260    	; 0xd3ec <deselect>
    d4f0:	b8 df       	rcall	.-144    	; 0xd462 <select>
        if (!select()) return 0xFF;
    d4f2:	89 2b       	or	r24, r25
    d4f4:	71 f7       	brne	.-36     	; 0xd4d2 <send_cmd+0x2c>
    d4f6:	8f ef       	ldi	r24, 0xFF	; 255
    d4f8:	14 c0       	rjmp	.+40     	; 0xd522 <send_cmd+0x7c>
    d4fa:	c8 30       	cpi	r28, 0x08	; 8
    xchg_spi((BYTE)(arg >> 16));                  /* Argument[23..16] */
    xchg_spi((BYTE)(arg >> 8));                   /* Argument[15..8] */
    xchg_spi((BYTE)arg);                          /* Argument[7..0] */
    n = 0x01;                                     /* Dummy CRC + Stop */
    if (cmd == CMD0) n = 0x95;                    /* Valid CRC for CMD0(0) + Stop */
    if (cmd == CMD8) n = 0x87;                    /* Valid CRC for CMD8(0x1AA) Stop */
    d4fc:	11 f4       	brne	.+4      	; 0xd502 <send_cmd+0x5c>
    d4fe:	87 e8       	ldi	r24, 0x87	; 135
    d500:	01 c0       	rjmp	.+2      	; 0xd504 <send_cmd+0x5e>

    xchg_spi(n);
    d502:	81 e0       	ldi	r24, 0x01	; 1
    d504:	71 df       	rcall	.-286    	; 0xd3e8 <xchg_spi>

/* Receive command response */
    if (cmd == CMD12) xchg_spi(0xFF);             /* Skip a stuff byte when stop reading */
    d506:	cc 30       	cpi	r28, 0x0C	; 12
    d508:	11 f4       	brne	.+4      	; 0xd50e <send_cmd+0x68>
    d50a:	8f ef       	ldi	r24, 0xFF	; 255
    d50c:	6d df       	rcall	.-294    	; 0xd3e8 <xchg_spi>
    d50e:	ca e0       	ldi	r28, 0x0A	; 10
    xchg_spi((BYTE)(arg >> 16));                  /* Argument[23..16] */
    xchg_spi((BYTE)(arg >> 8));                   /* Argument[15..8] */
    xchg_spi((BYTE)arg);                          /* Argument[7..0] */
    n = 0x01;                                     /* Dummy CRC + Stop */
    if (cmd == CMD0) n = 0x95;                    /* Valid CRC for CMD0(0) + Stop */
    if (cmd == CMD8) n = 0x87;                    /* Valid CRC for CMD8(0x1AA) Stop */
    d510:	8f ef       	ldi	r24, 0xFF	; 255
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d512:	64 d4       	rcall	.+2248   	; 0xdddc <mmc_spi_TXRX>
    d514:	87 ff       	sbrs	r24, 7
    d516:	05 c0       	rjmp	.+10     	; 0xd522 <send_cmd+0x7c>
    n = 10;                                       /* Wait for a valid response in timeout of 10 attempts */
    do
    {
        res = xchg_spi(0xFF);
    }
    while ((res & 0x80) && --n);
    d518:	c1 50       	subi	r28, 0x01	; 1
    d51a:	d1 f7       	brne	.-12     	; 0xd510 <send_cmd+0x6a>
    d51c:	02 c0       	rjmp	.+4      	; 0xd522 <send_cmd+0x7c>
    d51e:	85 e9       	ldi	r24, 0x95	; 149
    d520:	f5 cf       	rjmp	.-22     	; 0xd50c <send_cmd+0x66>
    xchg_spi((BYTE)arg);                          /* Argument[7..0] */
    n = 0x01;                                     /* Dummy CRC + Stop */
    if (cmd == CMD0) n = 0x95;                    /* Valid CRC for CMD0(0) + Stop */
    if (cmd == CMD8) n = 0x87;                    /* Valid CRC for CMD8(0x1AA) Stop */

    xchg_spi(n);
    d522:	cd b7       	in	r28, 0x3d	; 61
    d524:	de b7       	in	r29, 0x3e	; 62
        res = xchg_spi(0xFF);
    }
    while ((res & 0x80) && --n);

    return res;                                   /* Return with the response value */
}
    d526:	e5 e0       	ldi	r30, 0x05	; 5
    d528:	0c 94 28 e7 	jmp	0x1ce50	; 0x1ce50 <__epilogue_restores__+0x1a>

0000d52c <xmit_datablock>:
    d52c:	0f 93       	push	r16
    d52e:	1f 93       	push	r17
static
int xmit_datablock (
const BYTE *buff,                                 /*< 512 byte data block to be transmitted */
BYTE token                                        /*< Data/Stop token */
)
{
    d530:	cf 93       	push	r28
    d532:	8c 01       	movw	r16, r24
    d534:	c6 2f       	mov	r28, r22
    BYTE resp;

    if (!wait_ready(1000)) return 0;
    d536:	88 ee       	ldi	r24, 0xE8	; 232
    d538:	93 e0       	ldi	r25, 0x03	; 3
    d53a:	81 df       	rcall	.-254    	; 0xd43e <wait_ready>
    d53c:	00 97       	sbiw	r24, 0x00	; 0
    d53e:	c9 f0       	breq	.+50     	; 0xd572 <xmit_datablock+0x46>

    xchg_spi(token);                              /* Xmit data token */
    d540:	8c 2f       	mov	r24, r28
    d542:	52 df       	rcall	.-348    	; 0xd3e8 <xchg_spi>
    if (token != 0xFD)                            /* Is data token */
    d544:	cd 3f       	cpi	r28, 0xFD	; 253
    d546:	99 f0       	breq	.+38     	; 0xd56e <xmit_datablock+0x42>
void xmit_spi_multi (
const BYTE *p,                                    /* Data block to be sent */
UINT cnt                                          /* Size of data block */
)
{
    mmc_spi_TX_buffer((uint8_t *)p, cnt);
    d548:	60 e0       	ldi	r22, 0x00	; 0
    d54a:	72 e0       	ldi	r23, 0x02	; 2
    d54c:	c8 01       	movw	r24, r16
    xchg_spi(token);                              /* Xmit data token */
    if (token != 0xFD)                            /* Is data token */
    {
        xmit_spi_multi(buff, 512);                /* Xmit the data block to the MMC */

        xchg_spi(0xFF);                           /* CRC (Dummy) */
    d54e:	40 d4       	rcall	.+2176   	; 0xddd0 <mmc_spi_TX_buffer>
    d550:	8f ef       	ldi	r24, 0xFF	; 255
        xchg_spi(0xFF);
    d552:	4a df       	rcall	.-364    	; 0xd3e8 <xchg_spi>
    d554:	8f ef       	ldi	r24, 0xFF	; 255
    d556:	48 df       	rcall	.-368    	; 0xd3e8 <xchg_spi>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d558:	8f ef       	ldi	r24, 0xFF	; 255
    d55a:	40 d4       	rcall	.+2176   	; 0xdddc <mmc_spi_TXRX>
    d55c:	8f 71       	andi	r24, 0x1F	; 31
BYTE token                                        /*< Data/Stop token */
)
{
    BYTE resp;

    if (!wait_ready(1000)) return 0;
    d55e:	31 e0       	ldi	r19, 0x01	; 1
    d560:	20 e0       	ldi	r18, 0x00	; 0
    d562:	85 30       	cpi	r24, 0x05	; 5
    d564:	09 f0       	breq	.+2      	; 0xd568 <xmit_datablock+0x3c>
    d566:	30 e0       	ldi	r19, 0x00	; 0
    d568:	83 2f       	mov	r24, r19
    d56a:	92 2f       	mov	r25, r18
    d56c:	02 c0       	rjmp	.+4      	; 0xd572 <xmit_datablock+0x46>
    d56e:	81 e0       	ldi	r24, 0x01	; 1
        resp = xchg_spi(0xFF);                    /* Reveive data response */
        if ((resp & 0x1F) != 0x05)                /* If not accepted, return with error */
            return 0;
    }

    return 1;
    d570:	90 e0       	ldi	r25, 0x00	; 0
    d572:	cf 91       	pop	r28
}
    d574:	1f 91       	pop	r17
    d576:	0f 91       	pop	r16
    d578:	08 95       	ret

0000d57a <mmc_disk_initialize>:
    d57a:	a4 e0       	ldi	r26, 0x04	; 4

///@brief Initialize Disk Drive
///@return Stat
MEMSPACE
DSTATUS mmc_disk_initialize (void)
{
    d57c:	b0 e0       	ldi	r27, 0x00	; 0
    d57e:	e3 ec       	ldi	r30, 0xC3	; 195
    d580:	fa e6       	ldi	r31, 0x6A	; 106
    d582:	0c 94 09 e7 	jmp	0x1ce12	; 0x1ce12 <__prologue_saves__+0x14>
void power_off (void)
{
/* Disable SPI function */
/* De-configure MOSI/MISO/SCLK/CS pins (set hi-z) */
/* Turn socket power off (nothing to do if no power controls) */
    mmc_power_off();
    d586:	59 d4       	rcall	.+2226   	; 0xde3a <mmc_power_off>
DSTATUS mmc_disk_initialize (void)
{
    BYTE n, cmd, ty, ocr[4];

    power_off();                                  /* Turn off the socket power to reset the card */
    delayms(100);                                 /* Wait for 100ms */
    d588:	64 e6       	ldi	r22, 0x64	; 100
    d58a:	70 e0       	ldi	r23, 0x00	; 0
    d58c:	80 e0       	ldi	r24, 0x00	; 0
    d58e:	90 e0       	ldi	r25, 0x00	; 0
    d590:	0e 94 8a 28 	call	0x5114	; 0x5114 <delayms>

    if (Stat & STA_NODISK) return Stat;           /* No card in the socket? */
    d594:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d598:	81 fd       	sbrc	r24, 1
void power_on (void)
{
/* Turn socket power on and wait for 10ms+ (nothing to do if no power controls) */
/* Configure MOSI/MISO/SCLK/CS pins */
/* Enable SPI module in SPI mode 0 */
    mmc_power_on();
    d59a:	8e c0       	rjmp	.+284    	; 0xd6b8 <mmc_disk_initialize+0x13e>
    delayms(100);                                 /* Wait for 100ms */

    if (Stat & STA_NODISK) return Stat;           /* No card in the socket? */
    power_on();                                   /* Turn on the socket power */

    FCLK_SLOW();
    d59c:	4d d4       	rcall	.+2202   	; 0xde38 <mmc_power_on>
    d59e:	f9 d3       	rcall	.+2034   	; 0xdd92 <mmc_slow>

    for (n = 10; n; n--) xchg_spi(0xFF);          /* 80 dummy clocks */
    d5a0:	1a e0       	ldi	r17, 0x0A	; 10
    d5a2:	8f ef       	ldi	r24, 0xFF	; 255
    d5a4:	21 df       	rcall	.-446    	; 0xd3e8 <xchg_spi>
    d5a6:	11 50       	subi	r17, 0x01	; 1
    d5a8:	e1 f7       	brne	.-8      	; 0xd5a2 <mmc_disk_initialize+0x28>

    ty = 0;
    if (send_cmd(CMD0, 0) == 1)                   /* Enter Idle state */
    d5aa:	40 e0       	ldi	r20, 0x00	; 0
    d5ac:	50 e0       	ldi	r21, 0x00	; 0
    d5ae:	ba 01       	movw	r22, r20
    d5b0:	80 e0       	ldi	r24, 0x00	; 0
    d5b2:	79 df       	rcall	.-270    	; 0xd4a6 <send_cmd>
    d5b4:	81 30       	cpi	r24, 0x01	; 1
    d5b6:	09 f0       	breq	.+2      	; 0xd5ba <mmc_disk_initialize+0x40>
    {
        mmc_set_ms_timeout(2000);                 /* Initialization timeout of 1000 msec */
    d5b8:	6f c0       	rjmp	.+222    	; 0xd698 <mmc_disk_initialize+0x11e>
    d5ba:	80 ed       	ldi	r24, 0xD0	; 208
    d5bc:	97 e0       	ldi	r25, 0x07	; 7
        if (send_cmd(CMD8, 0x1AA) == 1)           /* SDv2? */
    d5be:	11 d4       	rcall	.+2082   	; 0xdde2 <mmc_set_ms_timeout>
    d5c0:	4a ea       	ldi	r20, 0xAA	; 170
    d5c2:	51 e0       	ldi	r21, 0x01	; 1
    d5c4:	60 e0       	ldi	r22, 0x00	; 0
    d5c6:	70 e0       	ldi	r23, 0x00	; 0
    d5c8:	88 e0       	ldi	r24, 0x08	; 8
    d5ca:	6d df       	rcall	.-294    	; 0xd4a6 <send_cmd>
    d5cc:	81 30       	cpi	r24, 0x01	; 1
    d5ce:	09 f0       	breq	.+2      	; 0xd5d2 <mmc_disk_initialize+0x58>
    d5d0:	3d c0       	rjmp	.+122    	; 0xd64c <mmc_disk_initialize+0xd2>
    d5d2:	8e 01       	movw	r16, r28
    d5d4:	0f 5f       	subi	r16, 0xFF	; 255
    d5d6:	1f 4f       	sbci	r17, 0xFF	; 255
    d5d8:	6e 01       	movw	r12, r28
    d5da:	85 e0       	ldi	r24, 0x05	; 5
    d5dc:	c8 0e       	add	r12, r24
    d5de:	d1 1c       	adc	r13, r1
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d5e0:	78 01       	movw	r14, r16
    d5e2:	8f ef       	ldi	r24, 0xFF	; 255
    d5e4:	fb d3       	rcall	.+2038   	; 0xdddc <mmc_spi_TXRX>
    {
        mmc_set_ms_timeout(2000);                 /* Initialization timeout of 1000 msec */
        if (send_cmd(CMD8, 0x1AA) == 1)           /* SDv2? */
        {
            for (n = 0; n < 4; n++)
                ocr[n] = xchg_spi(0xFF);          /* Get trailing return value of R7 resp */
    d5e6:	f7 01       	movw	r30, r14
    d5e8:	81 93       	st	Z+, r24
    d5ea:	7f 01       	movw	r14, r30
    if (send_cmd(CMD0, 0) == 1)                   /* Enter Idle state */
    {
        mmc_set_ms_timeout(2000);                 /* Initialization timeout of 1000 msec */
        if (send_cmd(CMD8, 0x1AA) == 1)           /* SDv2? */
        {
            for (n = 0; n < 4; n++)
    d5ec:	ce 16       	cp	r12, r30
    d5ee:	df 06       	cpc	r13, r31
    d5f0:	c1 f7       	brne	.-16     	; 0xd5e2 <mmc_disk_initialize+0x68>
                ocr[n] = xchg_spi(0xFF);          /* Get trailing return value of R7 resp */
            if (ocr[2] == 0x01 && ocr[3] == 0xAA) /* The card can work at vdd range of 2.7-3.6V */
    d5f2:	8b 81       	ldd	r24, Y+3	; 0x03
    d5f4:	81 30       	cpi	r24, 0x01	; 1
    d5f6:	09 f0       	breq	.+2      	; 0xd5fa <mmc_disk_initialize+0x80>
    d5f8:	4f c0       	rjmp	.+158    	; 0xd698 <mmc_disk_initialize+0x11e>
    d5fa:	8c 81       	ldd	r24, Y+4	; 0x04
    d5fc:	8a 3a       	cpi	r24, 0xAA	; 170
    d5fe:	09 f0       	breq	.+2      	; 0xd602 <mmc_disk_initialize+0x88>
            {
/* Wait for leaving idle state (ACMD41 with HCS bit) */
                while (!mmc_test_timeout() && send_cmd(ACMD41, 1UL << 30))
    d600:	4b c0       	rjmp	.+150    	; 0xd698 <mmc_disk_initialize+0x11e>
    d602:	f6 d3       	rcall	.+2028   	; 0xddf0 <mmc_test_timeout>
    d604:	89 2b       	or	r24, r25
    d606:	29 f0       	breq	.+10     	; 0xd612 <mmc_disk_initialize+0x98>
                    ;
/* Check CCS bit in the OCR */
                if (!mmc_test_timeout() && send_cmd(CMD58, 0) == 0)
    d608:	f3 d3       	rcall	.+2022   	; 0xddf0 <mmc_test_timeout>
    d60a:	89 2b       	or	r24, r25
    d60c:	09 f0       	breq	.+2      	; 0xd610 <mmc_disk_initialize+0x96>
    d60e:	44 c0       	rjmp	.+136    	; 0xd698 <mmc_disk_initialize+0x11e>
    d610:	09 c0       	rjmp	.+18     	; 0xd624 <mmc_disk_initialize+0xaa>
            for (n = 0; n < 4; n++)
                ocr[n] = xchg_spi(0xFF);          /* Get trailing return value of R7 resp */
            if (ocr[2] == 0x01 && ocr[3] == 0xAA) /* The card can work at vdd range of 2.7-3.6V */
            {
/* Wait for leaving idle state (ACMD41 with HCS bit) */
                while (!mmc_test_timeout() && send_cmd(ACMD41, 1UL << 30))
    d612:	40 e0       	ldi	r20, 0x00	; 0
    d614:	50 e0       	ldi	r21, 0x00	; 0
    d616:	60 e0       	ldi	r22, 0x00	; 0
    d618:	70 e4       	ldi	r23, 0x40	; 64
    d61a:	89 ea       	ldi	r24, 0xA9	; 169
    d61c:	44 df       	rcall	.-376    	; 0xd4a6 <send_cmd>
    d61e:	81 11       	cpse	r24, r1
    d620:	f0 cf       	rjmp	.-32     	; 0xd602 <mmc_disk_initialize+0x88>
                    ;
/* Check CCS bit in the OCR */
                if (!mmc_test_timeout() && send_cmd(CMD58, 0) == 0)
    d622:	f2 cf       	rjmp	.-28     	; 0xd608 <mmc_disk_initialize+0x8e>
    d624:	40 e0       	ldi	r20, 0x00	; 0
    d626:	50 e0       	ldi	r21, 0x00	; 0
    d628:	ba 01       	movw	r22, r20
    d62a:	8a e3       	ldi	r24, 0x3A	; 58
    d62c:	3c df       	rcall	.-392    	; 0xd4a6 <send_cmd>
    d62e:	81 11       	cpse	r24, r1
    d630:	33 c0       	rjmp	.+102    	; 0xd698 <mmc_disk_initialize+0x11e>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d632:	8f ef       	ldi	r24, 0xFF	; 255
    d634:	d3 d3       	rcall	.+1958   	; 0xdddc <mmc_spi_TXRX>
    d636:	f8 01       	movw	r30, r16
                while (!mmc_test_timeout() && send_cmd(ACMD41, 1UL << 30))
                    ;
/* Check CCS bit in the OCR */
                if (!mmc_test_timeout() && send_cmd(CMD58, 0) == 0)
                {
                    for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
    d638:	81 93       	st	Z+, r24
    d63a:	8f 01       	movw	r16, r30
    d63c:	ce 16       	cp	r12, r30
    d63e:	df 06       	cpc	r13, r31
    d640:	c1 f7       	brne	.-16     	; 0xd632 <mmc_disk_initialize+0xb8>
/* Check if the card is SDv2 */
                    ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
    d642:	89 81       	ldd	r24, Y+1	; 0x01
    d644:	86 fd       	sbrc	r24, 6
    d646:	2a c0       	rjmp	.+84     	; 0xd69c <mmc_disk_initialize+0x122>
    d648:	14 e0       	ldi	r17, 0x04	; 4
    d64a:	29 c0       	rjmp	.+82     	; 0xd69e <mmc_disk_initialize+0x124>
                }
            }
        }
        else
        {                                         /* SDv1 or MMCv3 */
            mmc_set_ms_timeout(2000);             /* Initialization timeout of 2000 msec */
    d64c:	80 ed       	ldi	r24, 0xD0	; 208
    d64e:	97 e0       	ldi	r25, 0x07	; 7
    d650:	c8 d3       	rcall	.+1936   	; 0xdde2 <mmc_set_ms_timeout>
            if (send_cmd(ACMD41, 0) <= 1)
    d652:	40 e0       	ldi	r20, 0x00	; 0
    d654:	50 e0       	ldi	r21, 0x00	; 0
    d656:	ba 01       	movw	r22, r20
    d658:	89 ea       	ldi	r24, 0xA9	; 169
    d65a:	25 df       	rcall	.-438    	; 0xd4a6 <send_cmd>
    d65c:	82 30       	cpi	r24, 0x02	; 2
    d65e:	18 f0       	brcs	.+6      	; 0xd666 <mmc_disk_initialize+0xec>
            {
                ty = CT_SD1; cmd = ACMD41;        /* SDv1 */
            }
            else
            {
                ty = CT_MMC; cmd = CMD1;          /* MMCv3 */
    d660:	11 e0       	ldi	r17, 0x01	; 1
    d662:	01 e0       	ldi	r16, 0x01	; 1
        else
        {                                         /* SDv1 or MMCv3 */
            mmc_set_ms_timeout(2000);             /* Initialization timeout of 2000 msec */
            if (send_cmd(ACMD41, 0) <= 1)
            {
                ty = CT_SD1; cmd = ACMD41;        /* SDv1 */
    d664:	02 c0       	rjmp	.+4      	; 0xd66a <mmc_disk_initialize+0xf0>
    d666:	12 e0       	ldi	r17, 0x02	; 2
            else
            {
                ty = CT_MMC; cmd = CMD1;          /* MMCv3 */
            }
/* Wait for leaving idle state */
            while (!mmc_test_timeout() && send_cmd(cmd, 0))
    d668:	09 ea       	ldi	r16, 0xA9	; 169
    d66a:	c2 d3       	rcall	.+1924   	; 0xddf0 <mmc_test_timeout>
    d66c:	89 2b       	or	r24, r25
    d66e:	21 f0       	breq	.+8      	; 0xd678 <mmc_disk_initialize+0xfe>
                ;
/* Set R/W block length to 512 */
            if (mmc_test_timeout() || send_cmd(CMD16, 512) != 0)
    d670:	bf d3       	rcall	.+1918   	; 0xddf0 <mmc_test_timeout>
    d672:	89 2b       	or	r24, r25
    d674:	89 f4       	brne	.+34     	; 0xd698 <mmc_disk_initialize+0x11e>
    d676:	08 c0       	rjmp	.+16     	; 0xd688 <mmc_disk_initialize+0x10e>
            else
            {
                ty = CT_MMC; cmd = CMD1;          /* MMCv3 */
            }
/* Wait for leaving idle state */
            while (!mmc_test_timeout() && send_cmd(cmd, 0))
    d678:	40 e0       	ldi	r20, 0x00	; 0
    d67a:	50 e0       	ldi	r21, 0x00	; 0
    d67c:	ba 01       	movw	r22, r20
    d67e:	80 2f       	mov	r24, r16
    d680:	12 df       	rcall	.-476    	; 0xd4a6 <send_cmd>
    d682:	81 11       	cpse	r24, r1
    d684:	f2 cf       	rjmp	.-28     	; 0xd66a <mmc_disk_initialize+0xf0>
    d686:	f4 cf       	rjmp	.-24     	; 0xd670 <mmc_disk_initialize+0xf6>
                ;
/* Set R/W block length to 512 */
            if (mmc_test_timeout() || send_cmd(CMD16, 512) != 0)
    d688:	40 e0       	ldi	r20, 0x00	; 0
    d68a:	52 e0       	ldi	r21, 0x02	; 2
    d68c:	60 e0       	ldi	r22, 0x00	; 0
    d68e:	70 e0       	ldi	r23, 0x00	; 0
    d690:	80 e1       	ldi	r24, 0x10	; 16
    d692:	09 df       	rcall	.-494    	; 0xd4a6 <send_cmd>
    d694:	88 23       	and	r24, r24
                ty = 0;
    d696:	19 f0       	breq	.+6      	; 0xd69e <mmc_disk_initialize+0x124>
    d698:	10 e0       	ldi	r17, 0x00	; 0
/* Check CCS bit in the OCR */
                if (!mmc_test_timeout() && send_cmd(CMD58, 0) == 0)
                {
                    for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
/* Check if the card is SDv2 */
                    ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
    d69a:	01 c0       	rjmp	.+2      	; 0xd69e <mmc_disk_initialize+0x124>
            if (mmc_test_timeout() || send_cmd(CMD16, 512) != 0)
                ty = 0;
        }
    }

    CardType = ty;
    d69c:	1c e0       	ldi	r17, 0x0C	; 12
    d69e:	10 93 2b 18 	sts	0x182B, r17	; 0x80182b <CardType>
    deselect();
    d6a2:	a4 de       	rcall	.-696    	; 0xd3ec <deselect>

    if (ty)                                       /* Initialization succeded */
    d6a4:	11 23       	and	r17, r17
    d6a6:	39 f0       	breq	.+14     	; 0xd6b6 <mmc_disk_initialize+0x13c>
    {
        Stat &= ~STA_NOINIT;                      /* Clear STA_NOINIT */
    d6a8:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d6ac:	8e 7f       	andi	r24, 0xFE	; 254
    d6ae:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <Stat>
        FCLK_FAST();
    d6b2:	81 d3       	rcall	.+1794   	; 0xddb6 <mmc_fast>
    d6b4:	01 c0       	rjmp	.+2      	; 0xd6b8 <mmc_disk_initialize+0x13e>
    d6b6:	c1 d3       	rcall	.+1922   	; 0xde3a <mmc_power_off>
void power_off (void)
{
/* Disable SPI function */
/* De-configure MOSI/MISO/SCLK/CS pins (set hi-z) */
/* Turn socket power off (nothing to do if no power controls) */
    mmc_power_off();
    d6b8:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    else
    {
        power_off();
    }

    return Stat;
    d6bc:	24 96       	adiw	r28, 0x04	; 4
    d6be:	e8 e0       	ldi	r30, 0x08	; 8
}
    d6c0:	0c 94 25 e7 	jmp	0x1ce4a	; 0x1ce4a <__epilogue_restores__+0x14>

0000d6c4 <mmc_disk_status>:
    d6c4:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
/// @return STA_NOINIT if no drive
MEMSPACE
DSTATUS mmc_disk_status ( void )
{
    return Stat;
}
    d6c8:	08 95       	ret

0000d6ca <mmc_disk_read>:
DRESULT mmc_disk_read (
BYTE *buff,                                       /*< Pointer to the data buffer to store read data */
DWORD sector,                                     /*< Start sector number (LBA) */
UINT count                                        /*< Sector count (1..128) */
)
{
    d6ca:	8f 92       	push	r8
    d6cc:	9f 92       	push	r9
    d6ce:	af 92       	push	r10
    d6d0:	bf 92       	push	r11
    d6d2:	ef 92       	push	r14
    d6d4:	ff 92       	push	r15
    d6d6:	1f 93       	push	r17
    d6d8:	cf 93       	push	r28
    d6da:	df 93       	push	r29
    d6dc:	7c 01       	movw	r14, r24
    d6de:	4a 01       	movw	r8, r20
    d6e0:	5b 01       	movw	r10, r22
    d6e2:	e9 01       	movw	r28, r18
    BYTE cmd;

    if (!count)
    d6e4:	20 97       	sbiw	r28, 0x00	; 0
    d6e6:	19 f4       	brne	.+6      	; 0xd6ee <mmc_disk_read+0x24>
    {
        deselect();
    d6e8:	81 de       	rcall	.-766    	; 0xd3ec <deselect>
        return RES_PARERR;
    d6ea:	84 e0       	ldi	r24, 0x04	; 4
    d6ec:	0d c0       	rjmp	.+26     	; 0xd708 <mmc_disk_read+0x3e>
    }

	if( Stat )
    d6ee:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d6f2:	88 23       	and	r24, r24
    d6f4:	19 f0       	breq	.+6      	; 0xd6fc <mmc_disk_read+0x32>
		set_error(1);
    d6f6:	81 e0       	ldi	r24, 0x01	; 1
    d6f8:	0e 94 2a 27 	call	0x4e54	; 0x4e54 <set_error>

    if (Stat & STA_NOINIT)
    d6fc:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d700:	80 ff       	sbrs	r24, 0
    {
        deselect();
    d702:	04 c0       	rjmp	.+8      	; 0xd70c <mmc_disk_read+0x42>
    d704:	73 de       	rcall	.-794    	; 0xd3ec <deselect>
        return RES_NOTRDY;
    d706:	83 e0       	ldi	r24, 0x03	; 3
    d708:	90 e0       	ldi	r25, 0x00	; 0
    d70a:	36 c0       	rjmp	.+108    	; 0xd778 <mmc_disk_read+0xae>
    }
    if (Stat & STA_NODISK)
    d70c:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d710:	81 fd       	sbrc	r24, 1
    d712:	f8 cf       	rjmp	.-16     	; 0xd704 <mmc_disk_read+0x3a>
    {
        deselect();
        return RES_NOTRDY;
	}
    GPIO_PIN_HI(LED1);
    d714:	46 9a       	sbi	0x08, 6	; 8
    d716:	3e 9a       	sbi	0x07, 6	; 7

    if (!(CardType & CT_BLOCK)) sector *= 512;    /* Convert to byte address if needed */
    d718:	80 91 2b 18 	lds	r24, 0x182B	; 0x80182b <CardType>
    d71c:	83 fd       	sbrc	r24, 3
    d71e:	07 c0       	rjmp	.+14     	; 0xd72e <mmc_disk_read+0x64>
    d720:	89 e0       	ldi	r24, 0x09	; 9
    d722:	88 0c       	add	r8, r8
    d724:	99 1c       	adc	r9, r9
    d726:	aa 1c       	adc	r10, r10
    d728:	bb 1c       	adc	r11, r11
    d72a:	8a 95       	dec	r24
    d72c:	d1 f7       	brne	.-12     	; 0xd722 <mmc_disk_read+0x58>

    cmd = count > 1 ? CMD18 : CMD17;              /*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
    d72e:	c2 30       	cpi	r28, 0x02	; 2
    d730:	d1 05       	cpc	r29, r1
    d732:	10 f4       	brcc	.+4      	; 0xd738 <mmc_disk_read+0x6e>
    d734:	11 e1       	ldi	r17, 0x11	; 17
    d736:	01 c0       	rjmp	.+2      	; 0xd73a <mmc_disk_read+0x70>
    d738:	12 e1       	ldi	r17, 0x12	; 18
    if (send_cmd(cmd, sector) == 0)
    d73a:	b5 01       	movw	r22, r10
    d73c:	a4 01       	movw	r20, r8
    d73e:	81 2f       	mov	r24, r17
    d740:	b2 de       	rcall	.-668    	; 0xd4a6 <send_cmd>
    d742:	81 11       	cpse	r24, r1
    d744:	11 c0       	rjmp	.+34     	; 0xd768 <mmc_disk_read+0x9e>
    {
        do
        {
            if (!rcvr_datablock(buff, 512))
    d746:	60 e0       	ldi	r22, 0x00	; 0
    d748:	72 e0       	ldi	r23, 0x02	; 2
    d74a:	c7 01       	movw	r24, r14
    d74c:	55 de       	rcall	.-854    	; 0xd3f8 <rcvr_datablock>
    d74e:	89 2b       	or	r24, r25
    d750:	21 f0       	breq	.+8      	; 0xd75a <mmc_disk_read+0x90>
                break;
            buff += 512;
    d752:	8e ef       	ldi	r24, 0xFE	; 254
    d754:	f8 1a       	sub	r15, r24
        } while (--count);
    d756:	21 97       	sbiw	r28, 0x01	; 1
    d758:	b1 f7       	brne	.-20     	; 0xd746 <mmc_disk_read+0x7c>
        if (cmd == CMD18) send_cmd(CMD12, 0);     /* STOP_TRANSMISSION */
    d75a:	12 31       	cpi	r17, 0x12	; 18
    d75c:	29 f4       	brne	.+10     	; 0xd768 <mmc_disk_read+0x9e>
    d75e:	40 e0       	ldi	r20, 0x00	; 0
    d760:	50 e0       	ldi	r21, 0x00	; 0
    d762:	ba 01       	movw	r22, r20
    d764:	8c e0       	ldi	r24, 0x0C	; 12
    }
    deselect();
    d766:	9f de       	rcall	.-706    	; 0xd4a6 <send_cmd>
    d768:	41 de       	rcall	.-894    	; 0xd3ec <deselect>
    GPIO_PIN_LOW(LED1);
    d76a:	46 98       	cbi	0x08, 6	; 8
    d76c:	3e 9a       	sbi	0x07, 6	; 7

    return count ? RES_ERROR : RES_OK;
    d76e:	81 e0       	ldi	r24, 0x01	; 1
    d770:	90 e0       	ldi	r25, 0x00	; 0
    d772:	cd 2b       	or	r28, r29
    d774:	09 f4       	brne	.+2      	; 0xd778 <mmc_disk_read+0xae>
    d776:	80 e0       	ldi	r24, 0x00	; 0
}
    d778:	df 91       	pop	r29
    d77a:	cf 91       	pop	r28
    d77c:	1f 91       	pop	r17
    d77e:	ff 90       	pop	r15
    d780:	ef 90       	pop	r14
    d782:	bf 90       	pop	r11
    d784:	af 90       	pop	r10
    d786:	9f 90       	pop	r9
    d788:	8f 90       	pop	r8
    d78a:	08 95       	ret

0000d78c <mmc_disk_write>:
DRESULT mmc_disk_write (
const BYTE *buff,                                 /*< Pointer to the data to be written */
DWORD sector,                                     /*< Start sector number (LBA) */
UINT count                                        /* Sector count (1..128) */
)
{
    d78c:	a0 e0       	ldi	r26, 0x00	; 0
    d78e:	b0 e0       	ldi	r27, 0x00	; 0
    d790:	ec ec       	ldi	r30, 0xCC	; 204
    d792:	fb e6       	ldi	r31, 0x6B	; 107
    d794:	0c 94 09 e7 	jmp	0x1ce12	; 0x1ce12 <__prologue_saves__+0x14>
    d798:	8c 01       	movw	r16, r24
    d79a:	6a 01       	movw	r12, r20
    d79c:	7b 01       	movw	r14, r22
    d79e:	e9 01       	movw	r28, r18
    if (!count)
    d7a0:	20 97       	sbiw	r28, 0x00	; 0
    d7a2:	19 f4       	brne	.+6      	; 0xd7aa <mmc_disk_write+0x1e>
    {
        deselect();
    d7a4:	23 de       	rcall	.-954    	; 0xd3ec <deselect>
        return RES_PARERR;
    d7a6:	84 e0       	ldi	r24, 0x04	; 4
    d7a8:	18 c0       	rjmp	.+48     	; 0xd7da <mmc_disk_write+0x4e>
    }

	if( Stat )
    d7aa:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d7ae:	88 23       	and	r24, r24
    d7b0:	19 f0       	breq	.+6      	; 0xd7b8 <mmc_disk_write+0x2c>
		set_error(1);
    d7b2:	81 e0       	ldi	r24, 0x01	; 1
    d7b4:	0e 94 2a 27 	call	0x4e54	; 0x4e54 <set_error>

    if (Stat & STA_NOINIT)
    d7b8:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d7bc:	80 ff       	sbrs	r24, 0
    {
        deselect();
    d7be:	03 c0       	rjmp	.+6      	; 0xd7c6 <mmc_disk_write+0x3a>
    d7c0:	15 de       	rcall	.-982    	; 0xd3ec <deselect>
        return RES_NOTRDY;
    d7c2:	83 e0       	ldi	r24, 0x03	; 3
    d7c4:	0a c0       	rjmp	.+20     	; 0xd7da <mmc_disk_write+0x4e>
    }
    if (Stat & STA_NODISK)
    d7c6:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d7ca:	81 fd       	sbrc	r24, 1
    d7cc:	f9 cf       	rjmp	.-14     	; 0xd7c0 <mmc_disk_write+0x34>
    {
        deselect();
        return RES_NOTRDY;
	}
    if (Stat & STA_PROTECT)
    d7ce:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d7d2:	82 ff       	sbrs	r24, 2
    {
        deselect();
    d7d4:	04 c0       	rjmp	.+8      	; 0xd7de <mmc_disk_write+0x52>
    d7d6:	0a de       	rcall	.-1004   	; 0xd3ec <deselect>
        return RES_WRPRT;
    d7d8:	82 e0       	ldi	r24, 0x02	; 2
    d7da:	90 e0       	ldi	r25, 0x00	; 0
    d7dc:	46 c0       	rjmp	.+140    	; 0xd86a <mmc_disk_write+0xde>
    }

    GPIO_PIN_HI(LED1);
    d7de:	46 9a       	sbi	0x08, 6	; 8
    d7e0:	3e 9a       	sbi	0x07, 6	; 7

    if (!(CardType & CT_BLOCK)) sector *= 512;    /* Convert to byte address if needed */
    d7e2:	80 91 2b 18 	lds	r24, 0x182B	; 0x80182b <CardType>
    d7e6:	83 fd       	sbrc	r24, 3
    d7e8:	07 c0       	rjmp	.+14     	; 0xd7f8 <mmc_disk_write+0x6c>
    d7ea:	99 e0       	ldi	r25, 0x09	; 9
    d7ec:	cc 0c       	add	r12, r12
    d7ee:	dd 1c       	adc	r13, r13
    d7f0:	ee 1c       	adc	r14, r14
    d7f2:	ff 1c       	adc	r15, r15
    d7f4:	9a 95       	dec	r25
    d7f6:	d1 f7       	brne	.-12     	; 0xd7ec <mmc_disk_write+0x60>

    if (count == 1)                               /* Single block write */
    d7f8:	c1 30       	cpi	r28, 0x01	; 1
    d7fa:	d1 05       	cpc	r29, r1
    d7fc:	89 f4       	brne	.+34     	; 0xd820 <mmc_disk_write+0x94>
    {
        if ((send_cmd(CMD24, sector) == 0)        /* WRITE_BLOCK */
    d7fe:	b7 01       	movw	r22, r14
    d800:	a6 01       	movw	r20, r12
    d802:	88 e1       	ldi	r24, 0x18	; 24
    d804:	50 de       	rcall	.-864    	; 0xd4a6 <send_cmd>
    d806:	81 11       	cpse	r24, r1
            && xmit_datablock(buff, 0xFE))
    d808:	26 c0       	rjmp	.+76     	; 0xd856 <mmc_disk_write+0xca>
    d80a:	6e ef       	ldi	r22, 0xFE	; 254
    d80c:	c8 01       	movw	r24, r16
    d80e:	8e de       	rcall	.-740    	; 0xd52c <xmit_datablock>
    d810:	31 e0       	ldi	r19, 0x01	; 1
    d812:	20 e0       	ldi	r18, 0x00	; 0
    d814:	89 2b       	or	r24, r25
    d816:	09 f0       	breq	.+2      	; 0xd81a <mmc_disk_write+0x8e>
    d818:	30 e0       	ldi	r19, 0x00	; 0
    d81a:	c3 2f       	mov	r28, r19
    d81c:	d2 2f       	mov	r29, r18
    d81e:	1d c0       	rjmp	.+58     	; 0xd85a <mmc_disk_write+0xce>
            count = 0;
    }
    else                                          /* Multiple block write */
    {
        if (CardType & CT_SDC) send_cmd(ACMD23, count);
    d820:	86 70       	andi	r24, 0x06	; 6
    d822:	29 f0       	breq	.+10     	; 0xd82e <mmc_disk_write+0xa2>
    d824:	ae 01       	movw	r20, r28
    d826:	60 e0       	ldi	r22, 0x00	; 0
    d828:	70 e0       	ldi	r23, 0x00	; 0
    d82a:	87 e9       	ldi	r24, 0x97	; 151
        if (send_cmd(CMD25, sector) == 0)         /* WRITE_MULTIPLE_BLOCK */
    d82c:	3c de       	rcall	.-904    	; 0xd4a6 <send_cmd>
    d82e:	b7 01       	movw	r22, r14
    d830:	a6 01       	movw	r20, r12
    d832:	89 e1       	ldi	r24, 0x19	; 25
    d834:	38 de       	rcall	.-912    	; 0xd4a6 <send_cmd>
    d836:	81 11       	cpse	r24, r1
        {
            do
            {
                if (!xmit_datablock(buff, 0xFC)) break;
    d838:	10 c0       	rjmp	.+32     	; 0xd85a <mmc_disk_write+0xce>
    d83a:	6c ef       	ldi	r22, 0xFC	; 252
    d83c:	c8 01       	movw	r24, r16
    d83e:	76 de       	rcall	.-788    	; 0xd52c <xmit_datablock>
    d840:	89 2b       	or	r24, r25
                buff += 512;
    d842:	19 f0       	breq	.+6      	; 0xd84a <mmc_disk_write+0xbe>
            } while (--count);
    d844:	1e 5f       	subi	r17, 0xFE	; 254
    d846:	21 97       	sbiw	r28, 0x01	; 1
            if (!xmit_datablock(0, 0xFD))         /* STOP_TRAN token */
    d848:	c1 f7       	brne	.-16     	; 0xd83a <mmc_disk_write+0xae>
    d84a:	6d ef       	ldi	r22, 0xFD	; 253
    d84c:	80 e0       	ldi	r24, 0x00	; 0
    d84e:	90 e0       	ldi	r25, 0x00	; 0
    d850:	6d de       	rcall	.-806    	; 0xd52c <xmit_datablock>
    d852:	89 2b       	or	r24, r25
                count = 1;
    d854:	11 f4       	brne	.+4      	; 0xd85a <mmc_disk_write+0xce>
    d856:	c1 e0       	ldi	r28, 0x01	; 1
        }
    }
    deselect();
    d858:	d0 e0       	ldi	r29, 0x00	; 0
    d85a:	c8 dd       	rcall	.-1136   	; 0xd3ec <deselect>
    GPIO_PIN_LOW(LED1);
    d85c:	46 98       	cbi	0x08, 6	; 8
    d85e:	3e 9a       	sbi	0x07, 6	; 7

    return count ? RES_ERROR : RES_OK;
    d860:	81 e0       	ldi	r24, 0x01	; 1
    d862:	90 e0       	ldi	r25, 0x00	; 0
    d864:	cd 2b       	or	r28, r29
    d866:	09 f4       	brne	.+2      	; 0xd86a <mmc_disk_write+0xde>
    d868:	80 e0       	ldi	r24, 0x00	; 0
}
    d86a:	cd b7       	in	r28, 0x3d	; 61
    d86c:	de b7       	in	r29, 0x3e	; 62
    d86e:	e8 e0       	ldi	r30, 0x08	; 8
    d870:	0c 94 25 e7 	jmp	0x1ce4a	; 0x1ce4a <__epilogue_restores__+0x14>

0000d874 <mmc_disk_ioctl>:
MEMSPACE
DRESULT mmc_disk_ioctl (
BYTE cmd,                                         /* Control code */
void *buff                                        /* Buffer to send/receive control data */
)
{
    d874:	a0 e1       	ldi	r26, 0x10	; 16
    d876:	b0 e0       	ldi	r27, 0x00	; 0
    d878:	e0 e4       	ldi	r30, 0x40	; 64
    d87a:	fc e6       	ldi	r31, 0x6C	; 108
    d87c:	0c 94 09 e7 	jmp	0x1ce12	; 0x1ce12 <__prologue_saves__+0x14>
    SDIO_CTRL *sdi;
    BYTE rc, *bp;
    UINT dc;
#endif

    if (Stat & STA_NOINIT)
    d880:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <Stat>
    d884:	90 fd       	sbrc	r25, 0
    d886:	31 c2       	rjmp	.+1122   	; 0xdcea <mmc_disk_ioctl+0x476>
    d888:	8b 01       	movw	r16, r22
        return RES_NOTRDY;

    if (Stat & STA_NODISK)
    d88a:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <Stat>
    d88e:	91 ff       	sbrs	r25, 1
    d890:	02 c0       	rjmp	.+4      	; 0xd896 <mmc_disk_ioctl+0x22>
    {
        deselect();
    d892:	ac dd       	rcall	.-1192   	; 0xd3ec <deselect>
    d894:	2a c2       	rjmp	.+1108   	; 0xdcea <mmc_disk_ioctl+0x476>
        return RES_NOTRDY;
	}

    res = RES_ERROR;
    switch (cmd)
    d896:	83 33       	cpi	r24, 0x33	; 51
    d898:	09 f4       	brne	.+2      	; 0xd89c <mmc_disk_ioctl+0x28>
    d89a:	01 c1       	rjmp	.+514    	; 0xda9e <mmc_disk_ioctl+0x22a>
    d89c:	a0 f4       	brcc	.+40     	; 0xd8c6 <mmc_disk_ioctl+0x52>
    d89e:	83 30       	cpi	r24, 0x03	; 3
    d8a0:	09 f4       	brne	.+2      	; 0xd8a4 <mmc_disk_ioctl+0x30>
    d8a2:	85 c0       	rjmp	.+266    	; 0xd9ae <mmc_disk_ioctl+0x13a>
    d8a4:	28 f4       	brcc	.+10     	; 0xd8b0 <mmc_disk_ioctl+0x3c>
    d8a6:	88 23       	and	r24, r24
    d8a8:	11 f1       	breq	.+68     	; 0xd8ee <mmc_disk_ioctl+0x7a>
    d8aa:	81 30       	cpi	r24, 0x01	; 1
    d8ac:	11 f1       	breq	.+68     	; 0xd8f2 <mmc_disk_ioctl+0x7e>
    d8ae:	1f c2       	rjmp	.+1086   	; 0xdcee <mmc_disk_ioctl+0x47a>
    d8b0:	87 30       	cpi	r24, 0x07	; 7
    d8b2:	09 f4       	brne	.+2      	; 0xd8b6 <mmc_disk_ioctl+0x42>
    d8b4:	2a c1       	rjmp	.+596    	; 0xdb0a <mmc_disk_ioctl+0x296>
    d8b6:	82 33       	cpi	r24, 0x32	; 50
    d8b8:	09 f0       	breq	.+2      	; 0xd8bc <mmc_disk_ioctl+0x48>
    d8ba:	19 c2       	rjmp	.+1074   	; 0xdcee <mmc_disk_ioctl+0x47a>
#endif

/* Following commands are never used by FatFs module */

        case MMC_GET_TYPE :                       /* Get card type flags (1 byte) */
            *ptr = CardType;
    d8bc:	80 91 2b 18 	lds	r24, 0x182B	; 0x80182b <CardType>
    d8c0:	fb 01       	movw	r30, r22
    d8c2:	80 83       	st	Z, r24
    d8c4:	28 c1       	rjmp	.+592    	; 0xdb16 <mmc_disk_ioctl+0x2a2>
        deselect();
        return RES_NOTRDY;
	}

    res = RES_ERROR;
    switch (cmd)
    d8c6:	86 33       	cpi	r24, 0x36	; 54
    d8c8:	09 f4       	brne	.+2      	; 0xd8cc <mmc_disk_ioctl+0x58>
    d8ca:	0c c1       	rjmp	.+536    	; 0xdae4 <mmc_disk_ioctl+0x270>
    d8cc:	38 f4       	brcc	.+14     	; 0xd8dc <mmc_disk_ioctl+0x68>
    d8ce:	84 33       	cpi	r24, 0x34	; 52
    d8d0:	09 f4       	brne	.+2      	; 0xd8d4 <mmc_disk_ioctl+0x60>
    d8d2:	ea c0       	rjmp	.+468    	; 0xdaa8 <mmc_disk_ioctl+0x234>
    d8d4:	85 33       	cpi	r24, 0x35	; 53
    d8d6:	09 f4       	brne	.+2      	; 0xd8da <mmc_disk_ioctl+0x66>
    d8d8:	f1 c0       	rjmp	.+482    	; 0xdabc <mmc_disk_ioctl+0x248>
    d8da:	09 c2       	rjmp	.+1042   	; 0xdcee <mmc_disk_ioctl+0x47a>
    d8dc:	88 33       	cpi	r24, 0x38	; 56
    d8de:	09 f4       	brne	.+2      	; 0xd8e2 <mmc_disk_ioctl+0x6e>
    d8e0:	74 c1       	rjmp	.+744    	; 0xdbca <mmc_disk_ioctl+0x356>
    d8e2:	08 f4       	brcc	.+2      	; 0xd8e6 <mmc_disk_ioctl+0x72>
    d8e4:	1a c1       	rjmp	.+564    	; 0xdb1a <mmc_disk_ioctl+0x2a6>
    d8e6:	89 33       	cpi	r24, 0x39	; 57
    d8e8:	09 f4       	brne	.+2      	; 0xd8ec <mmc_disk_ioctl+0x78>
    d8ea:	bc c1       	rjmp	.+888    	; 0xdc64 <mmc_disk_ioctl+0x3f0>
    {
        case CTRL_SYNC :                          /* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
            if (select()) res = RES_OK;
    d8ec:	00 c2       	rjmp	.+1024   	; 0xdcee <mmc_disk_ioctl+0x47a>
    d8ee:	b9 dd       	rcall	.-1166   	; 0xd462 <select>
    d8f0:	06 c1       	rjmp	.+524    	; 0xdafe <mmc_disk_ioctl+0x28a>
            deselect();
            break;

        case GET_SECTOR_COUNT :                   /* Get number of sectors on the disk (DWORD) */
            if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16))
    d8f2:	40 e0       	ldi	r20, 0x00	; 0
    d8f4:	50 e0       	ldi	r21, 0x00	; 0
    d8f6:	ba 01       	movw	r22, r20
    d8f8:	89 e0       	ldi	r24, 0x09	; 9
    d8fa:	d5 dd       	rcall	.-1110   	; 0xd4a6 <send_cmd>
    d8fc:	81 11       	cpse	r24, r1
    d8fe:	f1 c1       	rjmp	.+994    	; 0xdce2 <mmc_disk_ioctl+0x46e>
    d900:	60 e1       	ldi	r22, 0x10	; 16
    d902:	70 e0       	ldi	r23, 0x00	; 0
    d904:	ce 01       	movw	r24, r28
    d906:	01 96       	adiw	r24, 0x01	; 1
    d908:	77 dd       	rcall	.-1298   	; 0xd3f8 <rcvr_datablock>
    d90a:	89 2b       	or	r24, r25
    d90c:	09 f4       	brne	.+2      	; 0xd910 <mmc_disk_ioctl+0x9c>
    d90e:	e9 c1       	rjmp	.+978    	; 0xdce2 <mmc_disk_ioctl+0x46e>
            {
                if ((csd[0] >> 6) == 1)           /* SDC ver 2.00 */
    d910:	99 81       	ldd	r25, Y+1	; 0x01
    d912:	92 95       	swap	r25
    d914:	96 95       	lsr	r25
    d916:	96 95       	lsr	r25
    d918:	93 70       	andi	r25, 0x03	; 3
    d91a:	29 85       	ldd	r18, Y+9	; 0x09
    d91c:	4a 85       	ldd	r20, Y+10	; 0x0a
    d91e:	88 85       	ldd	r24, Y+8	; 0x08
    d920:	91 30       	cpi	r25, 0x01	; 1
    d922:	d9 f4       	brne	.+54     	; 0xd95a <mmc_disk_ioctl+0xe6>
                {
                    csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
                    *(DWORD*)buff = csize << 10;
    d924:	30 e0       	ldi	r19, 0x00	; 0
    d926:	32 2f       	mov	r19, r18
    d928:	22 27       	eor	r18, r18
    d92a:	24 0f       	add	r18, r20
    d92c:	31 1d       	adc	r19, r1
    d92e:	8f 73       	andi	r24, 0x3F	; 63
    d930:	90 e0       	ldi	r25, 0x00	; 0
    d932:	a0 e0       	ldi	r26, 0x00	; 0
    d934:	b0 e0       	ldi	r27, 0x00	; 0
    d936:	dc 01       	movw	r26, r24
    d938:	99 27       	eor	r25, r25
    d93a:	88 27       	eor	r24, r24
    d93c:	01 96       	adiw	r24, 0x01	; 1
    d93e:	a1 1d       	adc	r26, r1
    d940:	b1 1d       	adc	r27, r1
    d942:	82 0f       	add	r24, r18
    d944:	93 1f       	adc	r25, r19
    d946:	a1 1d       	adc	r26, r1
    d948:	b1 1d       	adc	r27, r1
    d94a:	fa e0       	ldi	r31, 0x0A	; 10
    d94c:	88 0f       	add	r24, r24
    d94e:	99 1f       	adc	r25, r25
    d950:	aa 1f       	adc	r26, r26
    d952:	bb 1f       	adc	r27, r27
    d954:	fa 95       	dec	r31
    d956:	d1 f7       	brne	.-12     	; 0xd94c <mmc_disk_ioctl+0xd8>
    d958:	9b c0       	rjmp	.+310    	; 0xda90 <mmc_disk_ioctl+0x21c>
                }                                 /* SDC ver 1.XX or MMC*/
                else
                {
                    n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
                    csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
                    *(DWORD*)buff = csize << (n - 9);
    d95a:	22 95       	swap	r18
    d95c:	26 95       	lsr	r18
    d95e:	26 95       	lsr	r18
    d960:	23 70       	andi	r18, 0x03	; 3
    d962:	f4 e0       	ldi	r31, 0x04	; 4
    d964:	8f 9f       	mul	r24, r31
    d966:	c0 01       	movw	r24, r0
    d968:	11 24       	eor	r1, r1
    d96a:	82 0f       	add	r24, r18
    d96c:	91 1d       	adc	r25, r1
    d96e:	01 96       	adiw	r24, 0x01	; 1
    d970:	2f 81       	ldd	r18, Y+7	; 0x07
    d972:	23 70       	andi	r18, 0x03	; 3
    d974:	30 e0       	ldi	r19, 0x00	; 0
    d976:	32 2f       	mov	r19, r18
    d978:	22 27       	eor	r18, r18
    d97a:	33 0f       	add	r19, r19
    d97c:	33 0f       	add	r19, r19
    d97e:	82 0f       	add	r24, r18
    d980:	93 1f       	adc	r25, r19
    d982:	a0 e0       	ldi	r26, 0x00	; 0
    d984:	b0 e0       	ldi	r27, 0x00	; 0
    d986:	2e 81       	ldd	r18, Y+6	; 0x06
    d988:	32 2f       	mov	r19, r18
    d98a:	3f 70       	andi	r19, 0x0F	; 15
    d98c:	2b 85       	ldd	r18, Y+11	; 0x0b
    d98e:	22 1f       	adc	r18, r18
    d990:	22 27       	eor	r18, r18
    d992:	22 1f       	adc	r18, r18
    d994:	23 0f       	add	r18, r19
    d996:	43 70       	andi	r20, 0x03	; 3
    d998:	44 0f       	add	r20, r20
    d99a:	42 0f       	add	r20, r18
    d99c:	47 50       	subi	r20, 0x07	; 7
    d99e:	04 c0       	rjmp	.+8      	; 0xd9a8 <mmc_disk_ioctl+0x134>
    d9a0:	88 0f       	add	r24, r24
    d9a2:	99 1f       	adc	r25, r25
    d9a4:	aa 1f       	adc	r26, r26
    d9a6:	bb 1f       	adc	r27, r27
    d9a8:	4a 95       	dec	r20
    d9aa:	d2 f7       	brpl	.-12     	; 0xd9a0 <mmc_disk_ioctl+0x12c>
    d9ac:	71 c0       	rjmp	.+226    	; 0xda90 <mmc_disk_ioctl+0x21c>
            }
            deselect();
            break;

        case GET_BLOCK_SIZE :                     /* Get erase block size in unit of sector (DWORD) */
            if (CardType & CT_SD2)                /* SDv2? */
    d9ae:	80 91 2b 18 	lds	r24, 0x182B	; 0x80182b <CardType>
            {
                if (send_cmd(ACMD13, 0) == 0)     /* Read SD status */
    d9b2:	40 e0       	ldi	r20, 0x00	; 0
    d9b4:	50 e0       	ldi	r21, 0x00	; 0
            }
            deselect();
            break;

        case GET_BLOCK_SIZE :                     /* Get erase block size in unit of sector (DWORD) */
            if (CardType & CT_SD2)                /* SDv2? */
    d9b6:	ba 01       	movw	r22, r20
    d9b8:	82 ff       	sbrs	r24, 2
            {
                if (send_cmd(ACMD13, 0) == 0)     /* Read SD status */
    d9ba:	24 c0       	rjmp	.+72     	; 0xda04 <mmc_disk_ioctl+0x190>
    d9bc:	8d e8       	ldi	r24, 0x8D	; 141
    d9be:	73 dd       	rcall	.-1306   	; 0xd4a6 <send_cmd>
    d9c0:	81 11       	cpse	r24, r1
                {
                    xchg_spi(0xFF);
    d9c2:	8f c1       	rjmp	.+798    	; 0xdce2 <mmc_disk_ioctl+0x46e>
    d9c4:	8f ef       	ldi	r24, 0xFF	; 255
                    if (rcvr_datablock(csd, 16))  /* Read partial block */
    d9c6:	10 dd       	rcall	.-1504   	; 0xd3e8 <xchg_spi>
    d9c8:	60 e1       	ldi	r22, 0x10	; 16
    d9ca:	70 e0       	ldi	r23, 0x00	; 0
    d9cc:	ce 01       	movw	r24, r28
    d9ce:	01 96       	adiw	r24, 0x01	; 1
    d9d0:	13 dd       	rcall	.-1498   	; 0xd3f8 <rcvr_datablock>
    d9d2:	89 2b       	or	r24, r25
    d9d4:	09 f4       	brne	.+2      	; 0xd9d8 <mmc_disk_ioctl+0x164>
    d9d6:	85 c1       	rjmp	.+778    	; 0xdce2 <mmc_disk_ioctl+0x46e>
    d9d8:	50 e3       	ldi	r21, 0x30	; 48
                    {
/* Purge trailing data */
                        for (n = 64 - 16; n; n--) xchg_spi(0xFF);
    d9da:	f5 2e       	mov	r15, r21
    d9dc:	8f ef       	ldi	r24, 0xFF	; 255
    d9de:	04 dd       	rcall	.-1528   	; 0xd3e8 <xchg_spi>
    d9e0:	fa 94       	dec	r15
    d9e2:	f1 10       	cpse	r15, r1
    d9e4:	fb cf       	rjmp	.-10     	; 0xd9dc <mmc_disk_ioctl+0x168>
                        *(DWORD*)buff = 16UL << (csd[10] >> 4);
    d9e6:	2b 85       	ldd	r18, Y+11	; 0x0b
    d9e8:	22 95       	swap	r18
    d9ea:	2f 70       	andi	r18, 0x0F	; 15
    d9ec:	80 e1       	ldi	r24, 0x10	; 16
    d9ee:	90 e0       	ldi	r25, 0x00	; 0
    d9f0:	a0 e0       	ldi	r26, 0x00	; 0
    d9f2:	b0 e0       	ldi	r27, 0x00	; 0
    d9f4:	04 c0       	rjmp	.+8      	; 0xd9fe <mmc_disk_ioctl+0x18a>
    d9f6:	88 0f       	add	r24, r24
    d9f8:	99 1f       	adc	r25, r25
    d9fa:	aa 1f       	adc	r26, r26
    d9fc:	bb 1f       	adc	r27, r27
    d9fe:	2a 95       	dec	r18
    da00:	d2 f7       	brpl	.-12     	; 0xd9f6 <mmc_disk_ioctl+0x182>
                }
            }                                     /* SDv1 or MMCv3 */
            else
            {
/* Read CSD */
                if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16))
    da02:	46 c0       	rjmp	.+140    	; 0xda90 <mmc_disk_ioctl+0x21c>
    da04:	89 e0       	ldi	r24, 0x09	; 9
    da06:	4f dd       	rcall	.-1378   	; 0xd4a6 <send_cmd>
    da08:	81 11       	cpse	r24, r1
    da0a:	6b c1       	rjmp	.+726    	; 0xdce2 <mmc_disk_ioctl+0x46e>
    da0c:	60 e1       	ldi	r22, 0x10	; 16
    da0e:	70 e0       	ldi	r23, 0x00	; 0
    da10:	ce 01       	movw	r24, r28
    da12:	01 96       	adiw	r24, 0x01	; 1
    da14:	f1 dc       	rcall	.-1566   	; 0xd3f8 <rcvr_datablock>
    da16:	89 2b       	or	r24, r25
    da18:	09 f4       	brne	.+2      	; 0xda1c <mmc_disk_ioctl+0x1a8>
    da1a:	63 c1       	rjmp	.+710    	; 0xdce2 <mmc_disk_ioctl+0x46e>
                {
                    if (CardType & CT_SD1)        /* SDv1 */
    da1c:	90 91 2b 18 	lds	r25, 0x182B	; 0x80182b <CardType>
    da20:	2b 85       	ldd	r18, Y+11	; 0x0b
    da22:	8c 85       	ldd	r24, Y+12	; 0x0c
    da24:	91 ff       	sbrs	r25, 1
    da26:	16 c0       	rjmp	.+44     	; 0xda54 <mmc_disk_ioctl+0x1e0>
                    {
                        *(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    da28:	2f 73       	andi	r18, 0x3F	; 63
    da2a:	88 1f       	adc	r24, r24
    da2c:	88 27       	eor	r24, r24
    da2e:	88 1f       	adc	r24, r24
    da30:	90 e0       	ldi	r25, 0x00	; 0
    da32:	01 96       	adiw	r24, 0x01	; 1
    da34:	82 0f       	add	r24, r18
    da36:	91 1d       	adc	r25, r1
    da38:	82 0f       	add	r24, r18
    da3a:	91 1d       	adc	r25, r1
    da3c:	2e 85       	ldd	r18, Y+14	; 0x0e
    da3e:	22 95       	swap	r18
    da40:	26 95       	lsr	r18
    da42:	26 95       	lsr	r18
    da44:	23 70       	andi	r18, 0x03	; 3
    da46:	21 50       	subi	r18, 0x01	; 1
    da48:	02 c0       	rjmp	.+4      	; 0xda4e <mmc_disk_ioctl+0x1da>
    da4a:	88 0f       	add	r24, r24
    da4c:	99 1f       	adc	r25, r25
    da4e:	2a 95       	dec	r18
    da50:	e2 f7       	brpl	.-8      	; 0xda4a <mmc_disk_ioctl+0x1d6>
    da52:	1c c0       	rjmp	.+56     	; 0xda8c <mmc_disk_ioctl+0x218>
                    }                             /* MMCv3 */
                    else
                    {
                        *(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    da54:	38 2f       	mov	r19, r24
    da56:	33 70       	andi	r19, 0x03	; 3
    da58:	82 95       	swap	r24
    da5a:	86 95       	lsr	r24
    da5c:	87 70       	andi	r24, 0x07	; 7
    da5e:	90 e0       	ldi	r25, 0x00	; 0
    da60:	f8 e0       	ldi	r31, 0x08	; 8
    da62:	3f 9f       	mul	r19, r31
    da64:	80 0d       	add	r24, r0
    da66:	91 1d       	adc	r25, r1
    da68:	11 24       	eor	r1, r1
    da6a:	01 96       	adiw	r24, 0x01	; 1
    da6c:	2c 77       	andi	r18, 0x7C	; 124
    da6e:	30 e0       	ldi	r19, 0x00	; 0
    da70:	35 95       	asr	r19
    da72:	27 95       	ror	r18
    da74:	35 95       	asr	r19
    da76:	27 95       	ror	r18
    da78:	2f 5f       	subi	r18, 0xFF	; 255
    da7a:	3f 4f       	sbci	r19, 0xFF	; 255
    da7c:	82 9f       	mul	r24, r18
    da7e:	a0 01       	movw	r20, r0
    da80:	83 9f       	mul	r24, r19
    da82:	50 0d       	add	r21, r0
    da84:	92 9f       	mul	r25, r18
    da86:	50 0d       	add	r21, r0
    da88:	11 24       	eor	r1, r1
    da8a:	ca 01       	movw	r24, r20
    da8c:	a0 e0       	ldi	r26, 0x00	; 0
    da8e:	b0 e0       	ldi	r27, 0x00	; 0
    da90:	f8 01       	movw	r30, r16
    da92:	80 83       	st	Z, r24
    da94:	91 83       	std	Z+1, r25	; 0x01
    da96:	a2 83       	std	Z+2, r26	; 0x02
    da98:	b3 83       	std	Z+3, r27	; 0x03
                    }
                    res = RES_OK;
    da9a:	00 e0       	ldi	r16, 0x00	; 0
            res = RES_OK;
            break;

        case MMC_GET_CSD :                        /* Receive CSD as a data block (16 bytes) */
/* READ_CSD */
            if (send_cmd(CMD9, 0) == 0 && rcvr_datablock(ptr, 16))
    da9c:	23 c1       	rjmp	.+582    	; 0xdce4 <mmc_disk_ioctl+0x470>
    da9e:	40 e0       	ldi	r20, 0x00	; 0
    daa0:	50 e0       	ldi	r21, 0x00	; 0
    daa2:	ba 01       	movw	r22, r20
    daa4:	89 e0       	ldi	r24, 0x09	; 9
            deselect();
            break;

        case MMC_GET_CID :                        /* Receive CID as a data block (16 bytes) */
/* READ_CID */
            if (send_cmd(CMD10, 0) == 0 && rcvr_datablock(ptr, 16))
    daa6:	04 c0       	rjmp	.+8      	; 0xdab0 <mmc_disk_ioctl+0x23c>
    daa8:	40 e0       	ldi	r20, 0x00	; 0
    daaa:	50 e0       	ldi	r21, 0x00	; 0
    daac:	ba 01       	movw	r22, r20
    daae:	8a e0       	ldi	r24, 0x0A	; 10
    dab0:	fa dc       	rcall	.-1548   	; 0xd4a6 <send_cmd>
    dab2:	81 11       	cpse	r24, r1
    dab4:	16 c1       	rjmp	.+556    	; 0xdce2 <mmc_disk_ioctl+0x46e>
    dab6:	60 e1       	ldi	r22, 0x10	; 16
    dab8:	70 e0       	ldi	r23, 0x00	; 0
                res = RES_OK;
            deselect();
            break;

        case MMC_GET_OCR :                        /* Receive OCR as an R3 resp (4 bytes) */
            if (send_cmd(CMD58, 0) == 0)          /* READ_OCR */
    daba:	1f c0       	rjmp	.+62     	; 0xdafa <mmc_disk_ioctl+0x286>
    dabc:	40 e0       	ldi	r20, 0x00	; 0
    dabe:	50 e0       	ldi	r21, 0x00	; 0
    dac0:	ba 01       	movw	r22, r20
    dac2:	8a e3       	ldi	r24, 0x3A	; 58
    dac4:	f0 dc       	rcall	.-1568   	; 0xd4a6 <send_cmd>
    dac6:	81 11       	cpse	r24, r1
    dac8:	0c c1       	rjmp	.+536    	; 0xdce2 <mmc_disk_ioctl+0x46e>
    daca:	78 01       	movw	r14, r16
    dacc:	f4 e0       	ldi	r31, 0x04	; 4
    dace:	ef 0e       	add	r14, r31
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    dad0:	f1 1c       	adc	r15, r1
    dad2:	8f ef       	ldi	r24, 0xFF	; 255
            break;

        case MMC_GET_OCR :                        /* Receive OCR as an R3 resp (4 bytes) */
            if (send_cmd(CMD58, 0) == 0)          /* READ_OCR */
            {
                for (n = 4; n; n--) *ptr++ = xchg_spi(0xFF);
    dad4:	83 d1       	rcall	.+774    	; 0xdddc <mmc_spi_TXRX>
    dad6:	f8 01       	movw	r30, r16
    dad8:	81 93       	st	Z+, r24
    dada:	8f 01       	movw	r16, r30
    dadc:	ee 15       	cp	r30, r14
    dade:	ff 05       	cpc	r31, r15
            }
            deselect();
            break;

        case MMC_GET_SDSTAT :                     /* Receive SD statsu as a data block (64 bytes) */
            if (send_cmd(ACMD13, 0) == 0)         /* SD_STATUS */
    dae0:	c1 f7       	brne	.-16     	; 0xdad2 <mmc_disk_ioctl+0x25e>
    dae2:	db cf       	rjmp	.-74     	; 0xda9a <mmc_disk_ioctl+0x226>
    dae4:	40 e0       	ldi	r20, 0x00	; 0
    dae6:	50 e0       	ldi	r21, 0x00	; 0
    dae8:	ba 01       	movw	r22, r20
    daea:	8d e8       	ldi	r24, 0x8D	; 141
    daec:	dc dc       	rcall	.-1608   	; 0xd4a6 <send_cmd>
            {
                xchg_spi(0xFF);
    daee:	81 11       	cpse	r24, r1
    daf0:	f8 c0       	rjmp	.+496    	; 0xdce2 <mmc_disk_ioctl+0x46e>
    daf2:	8f ef       	ldi	r24, 0xFF	; 255
                if (rcvr_datablock(ptr, 64)) res = RES_OK;
    daf4:	79 dc       	rcall	.-1806   	; 0xd3e8 <xchg_spi>
    daf6:	60 e4       	ldi	r22, 0x40	; 64
    daf8:	70 e0       	ldi	r23, 0x00	; 0
    dafa:	c8 01       	movw	r24, r16
    dafc:	7d dc       	rcall	.-1798   	; 0xd3f8 <rcvr_datablock>
    {
        deselect();
        return RES_NOTRDY;
	}

    res = RES_ERROR;
    dafe:	01 e0       	ldi	r16, 0x01	; 1
    db00:	10 e0       	ldi	r17, 0x00	; 0
    db02:	89 2b       	or	r24, r25
    db04:	09 f4       	brne	.+2      	; 0xdb08 <mmc_disk_ioctl+0x294>
    db06:	ef c0       	rjmp	.+478    	; 0xdce6 <mmc_disk_ioctl+0x472>
    db08:	ea c0       	rjmp	.+468    	; 0xdcde <mmc_disk_ioctl+0x46a>
void power_off (void)
{
/* Disable SPI function */
/* De-configure MOSI/MISO/SCLK/CS pins (set hi-z) */
/* Turn socket power off (nothing to do if no power controls) */
    mmc_power_off();
    db0a:	97 d1       	rcall	.+814    	; 0xde3a <mmc_power_off>
    db0c:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
            deselect();
            break;

        case CTRL_POWER_OFF :                     /* Power off */
            power_off();
            Stat |= STA_NOINIT;
    db10:	81 60       	ori	r24, 0x01	; 1
    db12:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <Stat>
    db16:	00 e0       	ldi	r16, 0x00	; 0
            res = RES_OK;
    db18:	eb c0       	rjmp	.+470    	; 0xdcf0 <mmc_disk_ioctl+0x47c>
    db1a:	fb 01       	movw	r30, r22
            break;
#if _USE_ISDIO
        case ISDIO_READ:
            sdi = buff;
            if (send_cmd(CMD48, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0)
    db1c:	43 81       	ldd	r20, Z+3	; 0x03
    db1e:	54 81       	ldd	r21, Z+4	; 0x04
    db20:	65 81       	ldd	r22, Z+5	; 0x05
    db22:	76 81       	ldd	r23, Z+6	; 0x06
    db24:	39 e0       	ldi	r19, 0x09	; 9
    db26:	44 0f       	add	r20, r20
    db28:	55 1f       	adc	r21, r21
    db2a:	66 1f       	adc	r22, r22
    db2c:	77 1f       	adc	r23, r23
    db2e:	3a 95       	dec	r19
    db30:	d1 f7       	brne	.-12     	; 0xdb26 <mmc_disk_ioctl+0x2b2>
    db32:	70 68       	ori	r23, 0x80	; 128
    db34:	80 81       	ld	r24, Z
    db36:	90 e0       	ldi	r25, 0x00	; 0
    db38:	a0 e0       	ldi	r26, 0x00	; 0
    db3a:	b0 e0       	ldi	r27, 0x00	; 0
    db3c:	2c e1       	ldi	r18, 0x1C	; 28
    db3e:	88 0f       	add	r24, r24
    db40:	99 1f       	adc	r25, r25
    db42:	aa 1f       	adc	r26, r26
    db44:	bb 1f       	adc	r27, r27
    db46:	2a 95       	dec	r18
    db48:	d1 f7       	brne	.-12     	; 0xdb3e <mmc_disk_ioctl+0x2ca>
    db4a:	48 2b       	or	r20, r24
    db4c:	59 2b       	or	r21, r25
    db4e:	6a 2b       	or	r22, r26
    db50:	7b 2b       	or	r23, r27
    db52:	81 81       	ldd	r24, Z+1	; 0x01
    db54:	92 81       	ldd	r25, Z+2	; 0x02
    db56:	01 97       	sbiw	r24, 0x01	; 1
    db58:	91 70       	andi	r25, 0x01	; 1
    db5a:	a0 e0       	ldi	r26, 0x00	; 0
    db5c:	b0 e0       	ldi	r27, 0x00	; 0
    db5e:	48 2b       	or	r20, r24
    db60:	59 2b       	or	r21, r25
    db62:	6a 2b       	or	r22, r26
    db64:	7b 2b       	or	r23, r27
    db66:	80 e3       	ldi	r24, 0x30	; 48
    db68:	9e dc       	rcall	.-1732   	; 0xd4a6 <send_cmd>
            {
                mmc_set_ms_timeout(1000);
    db6a:	81 11       	cpse	r24, r1
    db6c:	ba c0       	rjmp	.+372    	; 0xdce2 <mmc_disk_ioctl+0x46e>
    db6e:	88 ee       	ldi	r24, 0xE8	; 232
    db70:	93 e0       	ldi	r25, 0x03	; 3
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    db72:	37 d1       	rcall	.+622    	; 0xdde2 <mmc_set_ms_timeout>
    db74:	8f ef       	ldi	r24, 0xFF	; 255
    db76:	32 d1       	rcall	.+612    	; 0xdddc <mmc_spi_TXRX>
        case ISDIO_READ:
            sdi = buff;
            if (send_cmd(CMD48, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0)
            {
                mmc_set_ms_timeout(1000);
                while( (rc = xchg_spi(0xFF)) == 0xFF && !mmc_test_timeout() )
    db78:	8f 3f       	cpi	r24, 0xFF	; 255
    db7a:	21 f4       	brne	.+8      	; 0xdb84 <mmc_disk_ioctl+0x310>
    db7c:	39 d1       	rcall	.+626    	; 0xddf0 <mmc_test_timeout>
    db7e:	89 2b       	or	r24, r25
    db80:	c9 f3       	breq	.-14     	; 0xdb74 <mmc_disk_ioctl+0x300>
    db82:	af c0       	rjmp	.+350    	; 0xdce2 <mmc_disk_ioctl+0x46e>
                    ;
                if (rc == 0xFE)
    db84:	8e 3f       	cpi	r24, 0xFE	; 254
    db86:	09 f0       	breq	.+2      	; 0xdb8a <mmc_disk_ioctl+0x316>
    db88:	ac c0       	rjmp	.+344    	; 0xdce2 <mmc_disk_ioctl+0x46e>
                {
                    for (bp = sdi->data, dc = sdi->ndata; dc; dc--) *bp++ = xchg_spi(0xFF);
    db8a:	f8 01       	movw	r30, r16
    db8c:	e7 80       	ldd	r14, Z+7	; 0x07
    db8e:	f0 84       	ldd	r15, Z+8	; 0x08
    db90:	c1 80       	ldd	r12, Z+1	; 0x01
    db92:	d2 80       	ldd	r13, Z+2	; 0x02
    db94:	ce 0c       	add	r12, r14
    db96:	df 1c       	adc	r13, r15
    db98:	ce 14       	cp	r12, r14
    db9a:	df 04       	cpc	r13, r15
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    db9c:	31 f0       	breq	.+12     	; 0xdbaa <mmc_disk_ioctl+0x336>
    db9e:	8f ef       	ldi	r24, 0xFF	; 255
    dba0:	1d d1       	rcall	.+570    	; 0xdddc <mmc_spi_TXRX>
                mmc_set_ms_timeout(1000);
                while( (rc = xchg_spi(0xFF)) == 0xFF && !mmc_test_timeout() )
                    ;
                if (rc == 0xFE)
                {
                    for (bp = sdi->data, dc = sdi->ndata; dc; dc--) *bp++ = xchg_spi(0xFF);
    dba2:	f7 01       	movw	r30, r14
    dba4:	81 93       	st	Z+, r24
    dba6:	7f 01       	movw	r14, r30
    dba8:	f7 cf       	rjmp	.-18     	; 0xdb98 <mmc_disk_ioctl+0x324>
                    for (dc = 514 - sdi->ndata; dc; dc--) xchg_spi(0xFF);
    dbaa:	f8 01       	movw	r30, r16
    dbac:	81 81       	ldd	r24, Z+1	; 0x01
    dbae:	92 81       	ldd	r25, Z+2	; 0x02
    dbb0:	02 e0       	ldi	r16, 0x02	; 2
    dbb2:	12 e0       	ldi	r17, 0x02	; 2
    dbb4:	08 1b       	sub	r16, r24
    dbb6:	19 0b       	sbc	r17, r25
    dbb8:	01 15       	cp	r16, r1
    dbba:	11 05       	cpc	r17, r1
    dbbc:	09 f4       	brne	.+2      	; 0xdbc0 <mmc_disk_ioctl+0x34c>
    dbbe:	6d cf       	rjmp	.-294    	; 0xda9a <mmc_disk_ioctl+0x226>
    dbc0:	8f ef       	ldi	r24, 0xFF	; 255
    dbc2:	12 dc       	rcall	.-2012   	; 0xd3e8 <xchg_spi>
    dbc4:	01 50       	subi	r16, 0x01	; 1
    dbc6:	11 09       	sbc	r17, r1
    dbc8:	f7 cf       	rjmp	.-18     	; 0xdbb8 <mmc_disk_ioctl+0x344>
    dbca:	fb 01       	movw	r30, r22
            deselect();
            break;

        case ISDIO_WRITE:
            sdi = buff;
            if (send_cmd(CMD49, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0)
    dbcc:	43 81       	ldd	r20, Z+3	; 0x03
    dbce:	54 81       	ldd	r21, Z+4	; 0x04
    dbd0:	65 81       	ldd	r22, Z+5	; 0x05
    dbd2:	76 81       	ldd	r23, Z+6	; 0x06
    dbd4:	39 e0       	ldi	r19, 0x09	; 9
    dbd6:	44 0f       	add	r20, r20
    dbd8:	55 1f       	adc	r21, r21
    dbda:	66 1f       	adc	r22, r22
    dbdc:	77 1f       	adc	r23, r23
    dbde:	3a 95       	dec	r19
    dbe0:	d1 f7       	brne	.-12     	; 0xdbd6 <mmc_disk_ioctl+0x362>
    dbe2:	70 68       	ori	r23, 0x80	; 128
    dbe4:	80 81       	ld	r24, Z
    dbe6:	90 e0       	ldi	r25, 0x00	; 0
    dbe8:	a0 e0       	ldi	r26, 0x00	; 0
    dbea:	b0 e0       	ldi	r27, 0x00	; 0
    dbec:	2c e1       	ldi	r18, 0x1C	; 28
    dbee:	88 0f       	add	r24, r24
    dbf0:	99 1f       	adc	r25, r25
    dbf2:	aa 1f       	adc	r26, r26
    dbf4:	bb 1f       	adc	r27, r27
    dbf6:	2a 95       	dec	r18
    dbf8:	d1 f7       	brne	.-12     	; 0xdbee <mmc_disk_ioctl+0x37a>
    dbfa:	48 2b       	or	r20, r24
    dbfc:	59 2b       	or	r21, r25
    dbfe:	6a 2b       	or	r22, r26
    dc00:	7b 2b       	or	r23, r27
    dc02:	81 81       	ldd	r24, Z+1	; 0x01
    dc04:	92 81       	ldd	r25, Z+2	; 0x02
    dc06:	01 97       	sbiw	r24, 0x01	; 1
    dc08:	91 70       	andi	r25, 0x01	; 1
    dc0a:	a0 e0       	ldi	r26, 0x00	; 0
    dc0c:	b0 e0       	ldi	r27, 0x00	; 0
    dc0e:	48 2b       	or	r20, r24
    dc10:	59 2b       	or	r21, r25
    dc12:	6a 2b       	or	r22, r26
    dc14:	7b 2b       	or	r23, r27
    dc16:	81 e3       	ldi	r24, 0x31	; 49
    dc18:	46 dc       	rcall	.-1908   	; 0xd4a6 <send_cmd>
            {
                xchg_spi(0xFF); xchg_spi(0xFE);
    dc1a:	81 11       	cpse	r24, r1
    dc1c:	62 c0       	rjmp	.+196    	; 0xdce2 <mmc_disk_ioctl+0x46e>
    dc1e:	8f ef       	ldi	r24, 0xFF	; 255
    dc20:	e3 db       	rcall	.-2106   	; 0xd3e8 <xchg_spi>
    dc22:	8e ef       	ldi	r24, 0xFE	; 254
    dc24:	e1 db       	rcall	.-2110   	; 0xd3e8 <xchg_spi>
                for (bp = sdi->data, dc = sdi->ndata; dc; dc--) xchg_spi(*bp++);
    dc26:	f8 01       	movw	r30, r16
    dc28:	e7 80       	ldd	r14, Z+7	; 0x07
    dc2a:	f0 84       	ldd	r15, Z+8	; 0x08
    dc2c:	c1 80       	ldd	r12, Z+1	; 0x01
    dc2e:	d2 80       	ldd	r13, Z+2	; 0x02
    dc30:	ce 0c       	add	r12, r14
    dc32:	df 1c       	adc	r13, r15
    dc34:	ec 14       	cp	r14, r12
    dc36:	fd 04       	cpc	r15, r13
    dc38:	29 f0       	breq	.+10     	; 0xdc44 <mmc_disk_ioctl+0x3d0>
    dc3a:	f7 01       	movw	r30, r14
    dc3c:	81 91       	ld	r24, Z+
    dc3e:	7f 01       	movw	r14, r30
    dc40:	d3 db       	rcall	.-2138   	; 0xd3e8 <xchg_spi>
    dc42:	f8 cf       	rjmp	.-16     	; 0xdc34 <mmc_disk_ioctl+0x3c0>
                for (dc = 514 - sdi->ndata; dc; dc--) xchg_spi(0xFF);
    dc44:	f8 01       	movw	r30, r16
    dc46:	81 81       	ldd	r24, Z+1	; 0x01
    dc48:	92 81       	ldd	r25, Z+2	; 0x02
    dc4a:	02 e0       	ldi	r16, 0x02	; 2
    dc4c:	12 e0       	ldi	r17, 0x02	; 2
    dc4e:	08 1b       	sub	r16, r24
    dc50:	19 0b       	sbc	r17, r25
    dc52:	8f ef       	ldi	r24, 0xFF	; 255
    dc54:	01 15       	cp	r16, r1
    dc56:	11 05       	cpc	r17, r1
    dc58:	09 f4       	brne	.+2      	; 0xdc5c <mmc_disk_ioctl+0x3e8>
    dc5a:	3b c0       	rjmp	.+118    	; 0xdcd2 <mmc_disk_ioctl+0x45e>
    dc5c:	c5 db       	rcall	.-2166   	; 0xd3e8 <xchg_spi>
    dc5e:	01 50       	subi	r16, 0x01	; 1
    dc60:	11 09       	sbc	r17, r1
    dc62:	f7 cf       	rjmp	.-18     	; 0xdc52 <mmc_disk_ioctl+0x3de>
    dc64:	fb 01       	movw	r30, r22
            deselect();
            break;

        case ISDIO_MRITE:
            sdi = buff;
            if (send_cmd(CMD49, 0x84000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | sdi->ndata >> 8) == 0)
    dc66:	43 81       	ldd	r20, Z+3	; 0x03
    dc68:	54 81       	ldd	r21, Z+4	; 0x04
    dc6a:	65 81       	ldd	r22, Z+5	; 0x05
    dc6c:	76 81       	ldd	r23, Z+6	; 0x06
    dc6e:	89 e0       	ldi	r24, 0x09	; 9
    dc70:	44 0f       	add	r20, r20
    dc72:	55 1f       	adc	r21, r21
    dc74:	66 1f       	adc	r22, r22
    dc76:	77 1f       	adc	r23, r23
    dc78:	8a 95       	dec	r24
    dc7a:	d1 f7       	brne	.-12     	; 0xdc70 <mmc_disk_ioctl+0x3fc>
    dc7c:	74 68       	ori	r23, 0x84	; 132
    dc7e:	80 81       	ld	r24, Z
    dc80:	90 e0       	ldi	r25, 0x00	; 0
    dc82:	a0 e0       	ldi	r26, 0x00	; 0
    dc84:	b0 e0       	ldi	r27, 0x00	; 0
    dc86:	2c e1       	ldi	r18, 0x1C	; 28
    dc88:	88 0f       	add	r24, r24
    dc8a:	99 1f       	adc	r25, r25
    dc8c:	aa 1f       	adc	r26, r26
    dc8e:	bb 1f       	adc	r27, r27
    dc90:	2a 95       	dec	r18
    dc92:	d1 f7       	brne	.-12     	; 0xdc88 <mmc_disk_ioctl+0x414>
    dc94:	48 2b       	or	r20, r24
    dc96:	59 2b       	or	r21, r25
    dc98:	6a 2b       	or	r22, r26
    dc9a:	7b 2b       	or	r23, r27
    dc9c:	82 81       	ldd	r24, Z+2	; 0x02
    dc9e:	90 e0       	ldi	r25, 0x00	; 0
    dca0:	a0 e0       	ldi	r26, 0x00	; 0
    dca2:	b0 e0       	ldi	r27, 0x00	; 0
    dca4:	48 2b       	or	r20, r24
    dca6:	59 2b       	or	r21, r25
    dca8:	6a 2b       	or	r22, r26
    dcaa:	7b 2b       	or	r23, r27
            {
                xchg_spi(0xFF); xchg_spi(0xFE);
    dcac:	81 e3       	ldi	r24, 0x31	; 49
    dcae:	fb db       	rcall	.-2058   	; 0xd4a6 <send_cmd>
    dcb0:	81 11       	cpse	r24, r1
    dcb2:	17 c0       	rjmp	.+46     	; 0xdce2 <mmc_disk_ioctl+0x46e>
    dcb4:	8f ef       	ldi	r24, 0xFF	; 255
    dcb6:	98 db       	rcall	.-2256   	; 0xd3e8 <xchg_spi>
                xchg_spi(sdi->ndata);
    dcb8:	8e ef       	ldi	r24, 0xFE	; 254
    dcba:	96 db       	rcall	.-2260   	; 0xd3e8 <xchg_spi>
    dcbc:	f8 01       	movw	r30, r16
    dcbe:	81 81       	ldd	r24, Z+1	; 0x01
    dcc0:	93 db       	rcall	.-2266   	; 0xd3e8 <xchg_spi>
    dcc2:	01 e0       	ldi	r16, 0x01	; 1
                for (dc = 513; dc; dc--) xchg_spi(0xFF);
    dcc4:	12 e0       	ldi	r17, 0x02	; 2
    dcc6:	8f ef       	ldi	r24, 0xFF	; 255
    dcc8:	8f db       	rcall	.-2274   	; 0xd3e8 <xchg_spi>
    dcca:	01 50       	subi	r16, 0x01	; 1
    dccc:	11 09       	sbc	r17, r1
    dcce:	d9 f7       	brne	.-10     	; 0xdcc6 <mmc_disk_ioctl+0x452>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    dcd0:	8f ef       	ldi	r24, 0xFF	; 255
    dcd2:	84 d0       	rcall	.+264    	; 0xdddc <mmc_spi_TXRX>
    dcd4:	8f 71       	andi	r24, 0x1F	; 31
    {
        deselect();
        return RES_NOTRDY;
	}

    res = RES_ERROR;
    dcd6:	01 e0       	ldi	r16, 0x01	; 1
    dcd8:	10 e0       	ldi	r17, 0x00	; 0
    dcda:	85 30       	cpi	r24, 0x05	; 5
    dcdc:	21 f4       	brne	.+8      	; 0xdce6 <mmc_disk_ioctl+0x472>
    dcde:	00 e0       	ldi	r16, 0x00	; 0
    dce0:	02 c0       	rjmp	.+4      	; 0xdce6 <mmc_disk_ioctl+0x472>
    dce2:	01 e0       	ldi	r16, 0x01	; 1
    dce4:	10 e0       	ldi	r17, 0x00	; 0
    dce6:	82 db       	rcall	.-2300   	; 0xd3ec <deselect>
                xchg_spi(0xFF); xchg_spi(0xFE);
                xchg_spi(sdi->ndata);
                for (dc = 513; dc; dc--) xchg_spi(0xFF);
                if ((xchg_spi(0xFF) & 0x1F) == 0x05) res = RES_OK;
            }
            deselect();
    dce8:	04 c0       	rjmp	.+8      	; 0xdcf2 <mmc_disk_ioctl+0x47e>
    dcea:	03 e0       	ldi	r16, 0x03	; 3
            break;
    dcec:	01 c0       	rjmp	.+2      	; 0xdcf0 <mmc_disk_ioctl+0x47c>
    BYTE rc, *bp;
    UINT dc;
#endif

    if (Stat & STA_NOINIT)
        return RES_NOTRDY;
    dcee:	04 e0       	ldi	r16, 0x04	; 4
    dcf0:	10 e0       	ldi	r17, 0x00	; 0
            }
            deselect();
            break;
#endif
        default:
            res = RES_PARERR;
    dcf2:	c8 01       	movw	r24, r16
    dcf4:	60 96       	adiw	r28, 0x10	; 16
    }

    return res;
}
    dcf6:	e8 e0       	ldi	r30, 0x08	; 8
    dcf8:	0c 94 25 e7 	jmp	0x1ce4a	; 0x1ce4a <__epilogue_restores__+0x14>

0000dcfc <mmc_disk_timerproc>:
    dcfc:	cf 93       	push	r28
    dcfe:	80 91 2d 18 	lds	r24, 0x182D	; 0x80182d <Timer1>
{
    BYTE n;
    BYTE s;

    n = Timer1;                                   /* 100Hz decrement timer */
    if (n) Timer1 = --n;
    dd02:	88 23       	and	r24, r24
    dd04:	19 f0       	breq	.+6      	; 0xdd0c <mmc_disk_timerproc+0x10>
    dd06:	81 50       	subi	r24, 0x01	; 1
    dd08:	80 93 2d 18 	sts	0x182D, r24	; 0x80182d <Timer1>
    n = Timer2;
    dd0c:	80 91 2c 18 	lds	r24, 0x182C	; 0x80182c <Timer2>
    if (n) Timer2 = --n;
    dd10:	88 23       	and	r24, r24
    dd12:	19 f0       	breq	.+6      	; 0xdd1a <mmc_disk_timerproc+0x1e>
    dd14:	81 50       	subi	r24, 0x01	; 1
    dd16:	80 93 2c 18 	sts	0x182C, r24	; 0x80182c <Timer2>

    s = Stat;
    dd1a:	c0 91 35 01 	lds	r28, 0x0135	; 0x800135 <Stat>
        s |= STA_PROTECT;
    else                                          /* Write enabled */
        s &= ~STA_PROTECT;
#endif

    if (MMC_CD)                                   /* Card inserted */
    dd1e:	8e d0       	rcall	.+284    	; 0xde3c <mmc_ins_status>
    dd20:	89 2b       	or	r24, r25
    dd22:	11 f0       	breq	.+4      	; 0xdd28 <mmc_disk_timerproc+0x2c>
	{
        s &= ~STA_NODISK;
    dd24:	cd 7f       	andi	r28, 0xFD	; 253
    dd26:	04 c0       	rjmp	.+8      	; 0xdd30 <mmc_disk_timerproc+0x34>
	}
    else                                          /* Socket empty */
	{	
        s |= (STA_NODISK | STA_NOINIT);
    dd28:	c3 60       	ori	r28, 0x03	; 3
		set_error(1);
    dd2a:	81 e0       	ldi	r24, 0x01	; 1
    dd2c:	0e 94 2a 27 	call	0x4e54	; 0x4e54 <set_error>
	}

    Stat = s;                                     /* Update MMC status */
    dd30:	c0 93 35 01 	sts	0x0135, r28	; 0x800135 <Stat>
}
    dd34:	cf 91       	pop	r28
    dd36:	08 95       	ret

0000dd38 <mmc_install_timer>:
void mmc_ms_wait(int ms)
{
    mmc_set_ms_timeout(ms);
    while(!mmc_test_timeout())
        ;
}
    dd38:	00 d0       	rcall	.+0      	; 0xdd3a <mmc_install_timer+0x2>
    dd3a:	1f 92       	push	r1
    dd3c:	10 92 37 18 	sts	0x1837, r1	; 0x801837 <_mmc_timeout+0x1>
    dd40:	10 92 36 18 	sts	0x1836, r1	; 0x801836 <_mmc_timeout>
    dd44:	61 e0       	ldi	r22, 0x01	; 1
    dd46:	70 e0       	ldi	r23, 0x00	; 0
    dd48:	8b e2       	ldi	r24, 0x2B	; 43
    dd4a:	9f e6       	ldi	r25, 0x6F	; 111
    dd4c:	0e 94 de 34 	call	0x69bc	; 0x69bc <set_timers>
    dd50:	01 96       	adiw	r24, 0x01	; 1
    dd52:	51 f4       	brne	.+20     	; 0xdd68 <mmc_install_timer+0x30>
    dd54:	87 e2       	ldi	r24, 0x27	; 39
    dd56:	98 e0       	ldi	r25, 0x08	; 8
    dd58:	a0 e0       	ldi	r26, 0x00	; 0
    dd5a:	ed b7       	in	r30, 0x3d	; 61
    dd5c:	fe b7       	in	r31, 0x3e	; 62
    dd5e:	81 83       	std	Z+1, r24	; 0x01
    dd60:	92 83       	std	Z+2, r25	; 0x02
    dd62:	a3 83       	std	Z+3, r26	; 0x03
    dd64:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    dd68:	0f 90       	pop	r0
    dd6a:	0f 90       	pop	r0
    dd6c:	0f 90       	pop	r0
    dd6e:	08 95       	ret

0000dd70 <mmc_spi_begin>:
    dd70:	60 91 32 18 	lds	r22, 0x1832	; 0x801832 <_mmc_clock>
    dd74:	70 91 33 18 	lds	r23, 0x1833	; 0x801833 <_mmc_clock+0x1>
    dd78:	80 91 34 18 	lds	r24, 0x1834	; 0x801834 <_mmc_clock+0x2>
    dd7c:	90 91 35 18 	lds	r25, 0x1835	; 0x801835 <_mmc_clock+0x3>
    dd80:	4b e0       	ldi	r20, 0x0B	; 11
    dd82:	50 e0       	ldi	r21, 0x00	; 0
    dd84:	0c 94 d1 26 	jmp	0x4da2	; 0x4da2 <spi_begin>
    dd88:	08 95       	ret

0000dd8a <mmc_spi_end>:
    dd8a:	8b e0       	ldi	r24, 0x0B	; 11
    dd8c:	0c 94 6d 26 	jmp	0x4cda	; 0x4cda <spi_end>
    dd90:	08 95       	ret

0000dd92 <mmc_slow>:
    dd92:	80 e2       	ldi	r24, 0x20	; 32
    dd94:	91 ea       	ldi	r25, 0xA1	; 161
    dd96:	a7 e0       	ldi	r26, 0x07	; 7
    dd98:	b0 e0       	ldi	r27, 0x00	; 0
    dd9a:	80 93 32 18 	sts	0x1832, r24	; 0x801832 <_mmc_clock>
    dd9e:	90 93 33 18 	sts	0x1833, r25	; 0x801833 <_mmc_clock+0x1>
    dda2:	a0 93 34 18 	sts	0x1834, r26	; 0x801834 <_mmc_clock+0x2>
    dda6:	b0 93 35 18 	sts	0x1835, r27	; 0x801835 <_mmc_clock+0x3>
    ddaa:	08 95       	ret

0000ddac <mmc_spi_init>:
    ddac:	8b e0       	ldi	r24, 0x0B	; 11
    ddae:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <chip_select_init>
    ddb2:	ef cf       	rjmp	.-34     	; 0xdd92 <mmc_slow>
    ddb4:	08 95       	ret

0000ddb6 <mmc_fast>:
    ddb6:	80 ea       	ldi	r24, 0xA0	; 160
    ddb8:	95 e2       	ldi	r25, 0x25	; 37
    ddba:	a6 e2       	ldi	r26, 0x26	; 38
    ddbc:	b0 e0       	ldi	r27, 0x00	; 0
    ddbe:	80 93 32 18 	sts	0x1832, r24	; 0x801832 <_mmc_clock>
    ddc2:	90 93 33 18 	sts	0x1833, r25	; 0x801833 <_mmc_clock+0x1>
    ddc6:	a0 93 34 18 	sts	0x1834, r26	; 0x801834 <_mmc_clock+0x2>
    ddca:	b0 93 35 18 	sts	0x1835, r27	; 0x801835 <_mmc_clock+0x3>
    ddce:	08 95       	ret

0000ddd0 <mmc_spi_TX_buffer>:
    ddd0:	0c 94 9d 26 	jmp	0x4d3a	; 0x4d3a <spi_TX_buffer>
    ddd4:	08 95       	ret

0000ddd6 <mmc_spi_RX_buffer>:
    ddd6:	0c 94 9f 26 	jmp	0x4d3e	; 0x4d3e <spi_RX_buffer>
    ddda:	08 95       	ret

0000dddc <mmc_spi_TXRX>:
    dddc:	0c 94 19 27 	jmp	0x4e32	; 0x4e32 <spi_TXRX>
    dde0:	08 95       	ret

0000dde2 <mmc_set_ms_timeout>:
    dde2:	f8 94       	cli
    dde4:	90 93 37 18 	sts	0x1837, r25	; 0x801837 <_mmc_timeout+0x1>
    dde8:	80 93 36 18 	sts	0x1836, r24	; 0x801836 <_mmc_timeout>
    ddec:	78 94       	sei
    ddee:	08 95       	ret

0000ddf0 <mmc_test_timeout>:
    ddf0:	00 d0       	rcall	.+0      	; 0xddf2 <mmc_test_timeout+0x2>
    ddf2:	1f 92       	push	r1
    ddf4:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    ddf8:	81 fd       	sbrc	r24, 1
    ddfa:	15 c0       	rjmp	.+42     	; 0xde26 <mmc_test_timeout+0x36>
    ddfc:	80 91 36 18 	lds	r24, 0x1836	; 0x801836 <_mmc_timeout>
    de00:	90 91 37 18 	lds	r25, 0x1837	; 0x801837 <_mmc_timeout+0x1>
    de04:	89 2b       	or	r24, r25
    de06:	91 f4       	brne	.+36     	; 0xde2c <mmc_test_timeout+0x3c>
    de08:	8a e1       	ldi	r24, 0x1A	; 26
    de0a:	98 e0       	ldi	r25, 0x08	; 8
    de0c:	a0 e0       	ldi	r26, 0x00	; 0
    de0e:	ed b7       	in	r30, 0x3d	; 61
    de10:	fe b7       	in	r31, 0x3e	; 62
    de12:	81 83       	std	Z+1, r24	; 0x01
    de14:	92 83       	std	Z+2, r25	; 0x02
    de16:	a3 83       	std	Z+3, r26	; 0x03
    de18:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    de1c:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    de20:	83 60       	ori	r24, 0x03	; 3
    de22:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <Stat>
    de26:	81 e0       	ldi	r24, 0x01	; 1
    de28:	90 e0       	ldi	r25, 0x00	; 0
    de2a:	02 c0       	rjmp	.+4      	; 0xde30 <mmc_test_timeout+0x40>
    de2c:	80 e0       	ldi	r24, 0x00	; 0
    de2e:	90 e0       	ldi	r25, 0x00	; 0
    de30:	0f 90       	pop	r0
    de32:	0f 90       	pop	r0
    de34:	0f 90       	pop	r0
    de36:	08 95       	ret

0000de38 <mmc_power_on>:
    de38:	08 95       	ret

0000de3a <mmc_power_off>:
/// @brief  MMC Power OFF
///
/// @return void
MEMSPACE
void mmc_power_off()
{
    de3a:	08 95       	ret

0000de3c <mmc_ins_status>:

MEMSPACE
int mmc_ins_status()
{
	// HI when card is NOT inserted
	if( GPIO_PIN_RD(GPIO_C7) )
    de3c:	3f 98       	cbi	0x07, 7	; 7
    de3e:	86 b1       	in	r24, 0x06	; 6
    de40:	08 2e       	mov	r0, r24
    de42:	00 0c       	add	r0, r0
    de44:	99 0b       	sbc	r25, r25
    de46:	80 95       	com	r24
    de48:	90 95       	com	r25
		return (0);
	else
		return(1);;	
}
    de4a:	89 2f       	mov	r24, r25
    de4c:	88 1f       	adc	r24, r24
    de4e:	88 27       	eor	r24, r24
    de50:	88 1f       	adc	r24, r24
    de52:	90 e0       	ldi	r25, 0x00	; 0
    de54:	08 95       	ret

0000de56 <mmc_task>:
 @brief 1000HZ timer task
 @return void
*/
static void mmc_task(void)
{
    if(_mmc_timeout)
    de56:	80 91 36 18 	lds	r24, 0x1836	; 0x801836 <_mmc_timeout>
    de5a:	90 91 37 18 	lds	r25, 0x1837	; 0x801837 <_mmc_timeout+0x1>
    de5e:	00 97       	sbiw	r24, 0x00	; 0
    de60:	29 f0       	breq	.+10     	; 0xde6c <mmc_task+0x16>
        _mmc_timeout--;
    de62:	01 97       	sbiw	r24, 0x01	; 1
    de64:	90 93 37 18 	sts	0x1837, r25	; 0x801837 <_mmc_timeout+0x1>
    de68:	80 93 36 18 	sts	0x1836, r24	; 0x801836 <_mmc_timeout>

// 100HZ
    if(_mmc_pre++  < 10)
    de6c:	80 91 30 18 	lds	r24, 0x1830	; 0x801830 <_mmc_pre>
    de70:	90 91 31 18 	lds	r25, 0x1831	; 0x801831 <_mmc_pre+0x1>
    de74:	8a 30       	cpi	r24, 0x0A	; 10
    de76:	91 05       	cpc	r25, r1
    de78:	30 f4       	brcc	.+12     	; 0xde86 <mmc_task+0x30>
    de7a:	01 96       	adiw	r24, 0x01	; 1
    de7c:	90 93 31 18 	sts	0x1831, r25	; 0x801831 <_mmc_pre+0x1>
    de80:	80 93 30 18 	sts	0x1830, r24	; 0x801830 <_mmc_pre>
    de84:	08 95       	ret
        return;

    _mmc_pre = 0;
    de86:	10 92 31 18 	sts	0x1831, r1	; 0x801831 <_mmc_pre+0x1>
    de8a:	10 92 30 18 	sts	0x1830, r1	; 0x801830 <_mmc_pre>

	if(!mmc_ins_status())
    de8e:	d6 df       	rcall	.-84     	; 0xde3c <mmc_ins_status>
    de90:	89 2b       	or	r24, r25
    de92:	19 f4       	brne	.+6      	; 0xde9a <mmc_task+0x44>
		set_error(1);
    de94:	81 e0       	ldi	r24, 0x01	; 1
    de96:	0e 94 2a 27 	call	0x4e54	; 0x4e54 <set_error>

    mmc_disk_timerproc();
    de9a:	30 cf       	rjmp	.-416    	; 0xdcfc <mmc_disk_timerproc>
    de9c:	08 95       	ret

0000de9e <mmc_init>:
///
/// @param[in] verbose: display initialisation messages
/// @return
MEMSPACE
int mmc_init(int verbose)
{
    de9e:	ac e0       	ldi	r26, 0x0C	; 12
    dea0:	b1 e0       	ldi	r27, 0x01	; 1
    dea2:	e5 e5       	ldi	r30, 0x55	; 85
    dea4:	ff e6       	ldi	r31, 0x6F	; 111
    dea6:	0c 94 0b e7 	jmp	0x1ce16	; 0x1ce16 <__prologue_saves__+0x18>
    deaa:	7c 01       	movw	r14, r24
    int rc;

    char buff[MAX_NAME_LEN+1];

    Stat = 0;
    deac:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <Stat>
	clear_error();
    deb0:	0e 94 2f 27 	call	0x4e5e	; 0x4e5e <clear_error>

	// Card Detect
	GPIO_PIN_LATCH_LOW(GPIO_C7);
    deb4:	47 98       	cbi	0x08, 7	; 8
	GPIO_PIN_DIR_IN(GPIO_C7);
    deb6:	3f 98       	cbi	0x07, 7	; 7

    mmc_spi_init();
    deb8:	79 df       	rcall	.-270    	; 0xddac <mmc_spi_init>

    if( verbose)
    deba:	e1 14       	cp	r14, r1
    debc:	f1 04       	cpc	r15, r1
    debe:	51 f0       	breq	.+20     	; 0xded4 <mmc_init+0x36>
    {
        printf("START MMC INIT\n");
    dec0:	8a e0       	ldi	r24, 0x0A	; 10
    dec2:	98 e0       	ldi	r25, 0x08	; 8
    dec4:	a0 e0       	ldi	r26, 0x00	; 0
    dec6:	ed b7       	in	r30, 0x3d	; 61
    dec8:	fe b7       	in	r31, 0x3e	; 62
    deca:	81 83       	std	Z+1, r24	; 0x01
    decc:	92 83       	std	Z+2, r25	; 0x02
    dece:	a3 83       	std	Z+3, r26	; 0x03
    ded0:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    }
// we only install timers once!
    if(!mmc_init_flag)
    ded4:	80 91 2e 18 	lds	r24, 0x182E	; 0x80182e <mmc_init_flag>
    ded8:	90 91 2f 18 	lds	r25, 0x182F	; 0x80182f <mmc_init_flag+0x1>
    dedc:	89 2b       	or	r24, r25
        mmc_install_timer();
    dede:	09 f4       	brne	.+2      	; 0xdee2 <mmc_init+0x44>

	if(!mmc_ins_status())
    dee0:	2b df       	rcall	.-426    	; 0xdd38 <mmc_install_timer>
    dee2:	ac df       	rcall	.-168    	; 0xde3c <mmc_ins_status>
    dee4:	89 2b       	or	r24, r25
    dee6:	61 f4       	brne	.+24     	; 0xdf00 <mmc_init+0x62>
	{
		printf("*** MMC Card NOT Inserted! ***\n");
    dee8:	8a ee       	ldi	r24, 0xEA	; 234
    deea:	97 e0       	ldi	r25, 0x07	; 7
    deec:	a0 e0       	ldi	r26, 0x00	; 0
    deee:	ed b7       	in	r30, 0x3d	; 61
    def0:	fe b7       	in	r31, 0x3e	; 62
    def2:	81 83       	std	Z+1, r24	; 0x01
    def4:	92 83       	std	Z+2, r25	; 0x02
    def6:	a3 83       	std	Z+3, r26	; 0x03
    def8:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
		return(RES_NOTRDY);	
    defc:	83 e0       	ldi	r24, 0x03	; 3
    defe:	9a c0       	rjmp	.+308    	; 0xe034 <mmc_init+0x196>
	}


    if( verbose)
    df00:	e1 14       	cp	r14, r1
    df02:	f1 04       	cpc	r15, r1
    df04:	11 f1       	breq	.+68     	; 0xdf4a <mmc_init+0xac>
    {
		printf("MMC Card Inserted\n");
    df06:	87 ed       	ldi	r24, 0xD7	; 215
    df08:	97 e0       	ldi	r25, 0x07	; 7
    df0a:	a0 e0       	ldi	r26, 0x00	; 0
    df0c:	ed b7       	in	r30, 0x3d	; 61
    df0e:	fe b7       	in	r31, 0x3e	; 62
    df10:	81 83       	std	Z+1, r24	; 0x01
    df12:	92 83       	std	Z+2, r25	; 0x02
    df14:	a3 83       	std	Z+3, r26	; 0x03
    df16:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>

#if defined (FF_USE_LFN)
        printf("LFN Enabled");
    df1a:	8b ec       	ldi	r24, 0xCB	; 203
    df1c:	97 e0       	ldi	r25, 0x07	; 7
    df1e:	a0 e0       	ldi	r26, 0x00	; 0
    df20:	ed b7       	in	r30, 0x3d	; 61
    df22:	fe b7       	in	r31, 0x3e	; 62
    df24:	81 83       	std	Z+1, r24	; 0x01
    df26:	92 83       	std	Z+2, r25	; 0x02
    df28:	a3 83       	std	Z+3, r26	; 0x03
    df2a:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
#else
        printf("LFN Disabled");
#endif
        printf(", Code page: %u\n", FF_CODE_PAGE);
    df2e:	85 eb       	ldi	r24, 0xB5	; 181
    df30:	91 e0       	ldi	r25, 0x01	; 1
    df32:	ed b7       	in	r30, 0x3d	; 61
    df34:	fe b7       	in	r31, 0x3e	; 62
    df36:	95 83       	std	Z+5, r25	; 0x05
    df38:	84 83       	std	Z+4, r24	; 0x04
    df3a:	8a eb       	ldi	r24, 0xBA	; 186
    df3c:	97 e0       	ldi	r25, 0x07	; 7
    df3e:	a0 e0       	ldi	r26, 0x00	; 0
    df40:	81 83       	std	Z+1, r24	; 0x01
    df42:	92 83       	std	Z+2, r25	; 0x02
    df44:	a3 83       	std	Z+3, r26	; 0x03
    df46:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    }

    rc = disk_initialize(DEV_MMC);                // aliased to mmc_disk_initialize()
    df4a:	80 e0       	ldi	r24, 0x00	; 0
    df4c:	1d da       	rcall	.-3014   	; 0xd388 <disk_initialize>
    df4e:	08 2f       	mov	r16, r24
    df50:	10 e0       	ldi	r17, 0x00	; 0

    if( rc != RES_OK  )
    df52:	01 15       	cp	r16, r1
    df54:	11 05       	cpc	r17, r1
        put_rc(rc);
    df56:	19 f0       	breq	.+6      	; 0xdf5e <mmc_init+0xc0>
    df58:	c8 01       	movw	r24, r16
    df5a:	f4 d0       	rcall	.+488    	; 0xe144 <put_rc>
    df5c:	0e c0       	rjmp	.+28     	; 0xdf7a <mmc_init+0xdc>

    if( rc == RES_OK)
        rc = f_mount(&Fatfs[0],"/", 0);
    df5e:	40 e0       	ldi	r20, 0x00	; 0
    df60:	66 ea       	ldi	r22, 0xA6	; 166
    df62:	78 e0       	ldi	r23, 0x08	; 8
    df64:	88 e8       	ldi	r24, 0x88	; 136
    df66:	9a e1       	ldi	r25, 0x1A	; 26
    df68:	0e 94 9c 59 	call	0xb338	; 0xb338 <f_mount>
    df6c:	8c 01       	movw	r16, r24

    if( rc != RES_OK || verbose)
    df6e:	89 2b       	or	r24, r25
    df70:	21 f4       	brne	.+8      	; 0xdf7a <mmc_init+0xdc>
    df72:	e1 14       	cp	r14, r1
    df74:	f1 04       	cpc	r15, r1
    df76:	09 f4       	brne	.+2      	; 0xdf7a <mmc_init+0xdc>
        put_rc( rc );
    df78:	4f c0       	rjmp	.+158    	; 0xe018 <mmc_init+0x17a>
    df7a:	c8 01       	movw	r24, r16
    df7c:	e3 d0       	rcall	.+454    	; 0xe144 <put_rc>

    if (verbose )
    df7e:	e1 14       	cp	r14, r1
    df80:	f1 04       	cpc	r15, r1
    df82:	09 f4       	brne	.+2      	; 0xdf86 <mmc_init+0xe8>
    df84:	49 c0       	rjmp	.+146    	; 0xe018 <mmc_init+0x17a>
    {
        DWORD blksize = 0;
    df86:	c7 5f       	subi	r28, 0xF7	; 247
    df88:	de 4f       	sbci	r29, 0xFE	; 254
    df8a:	18 82       	st	Y, r1
    df8c:	19 82       	std	Y+1, r1	; 0x01
    df8e:	1a 82       	std	Y+2, r1	; 0x02
    df90:	1b 82       	std	Y+3, r1	; 0x03
    df92:	c9 50       	subi	r28, 0x09	; 9
    df94:	d1 40       	sbci	r29, 0x01	; 1
        if(rc == RES_OK)
    df96:	01 15       	cp	r16, r1
    df98:	11 05       	cpc	r17, r1
        {
            rc = disk_ioctl ( DEV_MMC, GET_BLOCK_SIZE, (void *) &blksize);
    df9a:	a1 f5       	brne	.+104    	; 0xe004 <mmc_init+0x166>
    df9c:	ae 01       	movw	r20, r28
    df9e:	47 5f       	subi	r20, 0xF7	; 247
    dfa0:	5e 4f       	sbci	r21, 0xFE	; 254
    dfa2:	63 e0       	ldi	r22, 0x03	; 3
    dfa4:	80 e0       	ldi	r24, 0x00	; 0
    dfa6:	16 da       	rcall	.-3028   	; 0xd3d4 <disk_ioctl>
            if( rc != RES_OK)
    dfa8:	8c 01       	movw	r16, r24
    dfaa:	00 97       	sbiw	r24, 0x00	; 0
            {
                put_rc( rc );
    dfac:	61 f0       	breq	.+24     	; 0xdfc6 <mmc_init+0x128>
    dfae:	ca d0       	rcall	.+404    	; 0xe144 <put_rc>
                printf("MMC Block Size - read failed\n");
    dfb0:	8c e9       	ldi	r24, 0x9C	; 156
    dfb2:	97 e0       	ldi	r25, 0x07	; 7
    dfb4:	a0 e0       	ldi	r26, 0x00	; 0
    dfb6:	ed b7       	in	r30, 0x3d	; 61
    dfb8:	fe b7       	in	r31, 0x3e	; 62
    dfba:	81 83       	std	Z+1, r24	; 0x01
    dfbc:	92 83       	std	Z+2, r25	; 0x02
    dfbe:	a3 83       	std	Z+3, r26	; 0x03
    dfc0:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    dfc4:	1f c0       	rjmp	.+62     	; 0xe004 <mmc_init+0x166>
            }
            else
            {
                printf("MMC Block Size: %ld\n", blksize);
    dfc6:	c7 5f       	subi	r28, 0xF7	; 247
    dfc8:	de 4f       	sbci	r29, 0xFE	; 254
    dfca:	88 81       	ld	r24, Y
    dfcc:	99 81       	ldd	r25, Y+1	; 0x01
    dfce:	aa 81       	ldd	r26, Y+2	; 0x02
    dfd0:	bb 81       	ldd	r27, Y+3	; 0x03
    dfd2:	c9 50       	subi	r28, 0x09	; 9
    dfd4:	d1 40       	sbci	r29, 0x01	; 1
    dfd6:	ed b7       	in	r30, 0x3d	; 61
    dfd8:	fe b7       	in	r31, 0x3e	; 62
    dfda:	84 83       	std	Z+4, r24	; 0x04
    dfdc:	95 83       	std	Z+5, r25	; 0x05
    dfde:	a6 83       	std	Z+6, r26	; 0x06
    dfe0:	b7 83       	std	Z+7, r27	; 0x07
    dfe2:	87 e8       	ldi	r24, 0x87	; 135
    dfe4:	97 e0       	ldi	r25, 0x07	; 7
    dfe6:	a0 e0       	ldi	r26, 0x00	; 0
    dfe8:	81 83       	std	Z+1, r24	; 0x01
    dfea:	92 83       	std	Z+2, r25	; 0x02
    dfec:	a3 83       	std	Z+3, r26	; 0x03
    dfee:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
            }
            if( rc == RES_OK)
            {
                strcpy(buff,"/");
    dff2:	66 ea       	ldi	r22, 0xA6	; 166
    dff4:	78 e0       	ldi	r23, 0x08	; 8
    dff6:	ce 01       	movw	r24, r28
    dff8:	08 96       	adiw	r24, 0x08	; 8
    dffa:	0e 94 71 31 	call	0x62e2	; 0x62e2 <strcpy>
                fatfs_status(buff);
    dffe:	ce 01       	movw	r24, r28
    e000:	08 96       	adiw	r24, 0x08	; 8
    e002:	34 d1       	rcall	.+616    	; 0xe26c <fatfs_status>
            }
        }
        printf("END MMC INIT\n");
    e004:	89 e7       	ldi	r24, 0x79	; 121
    e006:	97 e0       	ldi	r25, 0x07	; 7
    e008:	a0 e0       	ldi	r26, 0x00	; 0
    e00a:	ed b7       	in	r30, 0x3d	; 61
    e00c:	fe b7       	in	r31, 0x3e	; 62
    e00e:	81 83       	std	Z+1, r24	; 0x01
    e010:	92 83       	std	Z+2, r25	; 0x02
    e012:	a3 83       	std	Z+3, r26	; 0x03
    e014:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    }
    mmc_init_flag = 1;
    e018:	81 e0       	ldi	r24, 0x01	; 1
    e01a:	90 e0       	ldi	r25, 0x00	; 0
    e01c:	90 93 2f 18 	sts	0x182F, r25	; 0x80182f <mmc_init_flag+0x1>
    e020:	80 93 2e 18 	sts	0x182E, r24	; 0x80182e <mmc_init_flag>

	if(rc != RES_OK)
    e024:	01 15       	cp	r16, r1
    e026:	11 05       	cpc	r17, r1
    e028:	21 f0       	breq	.+8      	; 0xe032 <mmc_init+0x194>
		set_error(1);
    e02a:	0e 94 2a 27 	call	0x4e54	; 0x4e54 <set_error>
    e02e:	c8 01       	movw	r24, r16
    e030:	02 c0       	rjmp	.+4      	; 0xe036 <mmc_init+0x198>
    e032:	80 e0       	ldi	r24, 0x00	; 0
    e034:	90 e0       	ldi	r25, 0x00	; 0

    return( rc ) ;
}
    e036:	c4 5f       	subi	r28, 0xF4	; 244
    e038:	de 4f       	sbci	r29, 0xFE	; 254
    e03a:	e6 e0       	ldi	r30, 0x06	; 6
    e03c:	0c 94 27 e7 	jmp	0x1ce4e	; 0x1ce4e <__epilogue_restores__+0x18>

0000e040 <mmc_wp_status>:

MEMSPACE
int mmc_wp_status()
{
    return (0);
}
    e040:	80 e0       	ldi	r24, 0x00	; 0
    e042:	90 e0       	ldi	r25, 0x00	; 0
    e044:	08 95       	ret

0000e046 <tm_to_fat>:
/// @param[in] t: POSIX struct tm * to convert.
///
/// @return  FAT32 time.
MEMSPACE
uint32_t tm_to_fat(tm_t *t)
{
    e046:	0f 93       	push	r16
    e048:	1f 93       	push	r17
    e04a:	fc 01       	movw	r30, r24
        | (((uint32_t)t->tm_mon+1) << 21)
        | (((uint32_t)t->tm_mday) << 16)
        | ((uint32_t)t->tm_hour << 11)
        | ((uint32_t)t->tm_min << 5)
        | ((uint32_t)t->tm_sec >> 1);
    return(fat);
    e04c:	46 81       	ldd	r20, Z+6	; 0x06
    e04e:	57 81       	ldd	r21, Z+7	; 0x07
    e050:	05 2e       	mov	r0, r21
    e052:	00 0c       	add	r0, r0
    e054:	66 0b       	sbc	r22, r22
    e056:	77 0b       	sbc	r23, r23
    e058:	ba 01       	movw	r22, r20
    e05a:	55 27       	eor	r21, r21
    e05c:	44 27       	eor	r20, r20
    e05e:	84 81       	ldd	r24, Z+4	; 0x04
    e060:	95 81       	ldd	r25, Z+5	; 0x05
    e062:	09 2e       	mov	r0, r25
    e064:	00 0c       	add	r0, r0
    e066:	aa 0b       	sbc	r26, r26
    e068:	bb 0b       	sbc	r27, r27
    e06a:	2b e0       	ldi	r18, 0x0B	; 11
    e06c:	88 0f       	add	r24, r24
    e06e:	99 1f       	adc	r25, r25
    e070:	aa 1f       	adc	r26, r26
    e072:	bb 1f       	adc	r27, r27
    e074:	2a 95       	dec	r18
    e076:	d1 f7       	brne	.-12     	; 0xe06c <tm_to_fat+0x26>
    e078:	48 2b       	or	r20, r24
    e07a:	59 2b       	or	r21, r25
    e07c:	6a 2b       	or	r22, r26
    e07e:	7b 2b       	or	r23, r27
    e080:	82 81       	ldd	r24, Z+2	; 0x02
    e082:	93 81       	ldd	r25, Z+3	; 0x03
    e084:	09 2e       	mov	r0, r25
    e086:	00 0c       	add	r0, r0
    e088:	aa 0b       	sbc	r26, r26
    e08a:	bb 0b       	sbc	r27, r27
    e08c:	35 e0       	ldi	r19, 0x05	; 5
    e08e:	88 0f       	add	r24, r24
    e090:	99 1f       	adc	r25, r25
    e092:	aa 1f       	adc	r26, r26
    e094:	bb 1f       	adc	r27, r27
    e096:	3a 95       	dec	r19
    e098:	d1 f7       	brne	.-12     	; 0xe08e <tm_to_fat+0x48>
    e09a:	48 2b       	or	r20, r24
    e09c:	59 2b       	or	r21, r25
    e09e:	6a 2b       	or	r22, r26
    e0a0:	7b 2b       	or	r23, r27
    e0a2:	80 81       	ld	r24, Z
    e0a4:	91 81       	ldd	r25, Z+1	; 0x01
    e0a6:	09 2e       	mov	r0, r25
    e0a8:	00 0c       	add	r0, r0
    e0aa:	aa 0b       	sbc	r26, r26
    e0ac:	bb 0b       	sbc	r27, r27
    e0ae:	b6 95       	lsr	r27
    e0b0:	a7 95       	ror	r26
    e0b2:	97 95       	ror	r25
    e0b4:	87 95       	ror	r24
    e0b6:	84 2b       	or	r24, r20
    e0b8:	95 2b       	or	r25, r21
    e0ba:	a6 2b       	or	r26, r22
    e0bc:	b7 2b       	or	r27, r23
    e0be:	02 85       	ldd	r16, Z+10	; 0x0a
    e0c0:	13 85       	ldd	r17, Z+11	; 0x0b
    e0c2:	00 55       	subi	r16, 0x50	; 80
    e0c4:	11 09       	sbc	r17, r1
    e0c6:	01 2e       	mov	r0, r17
    e0c8:	00 0c       	add	r0, r0
    e0ca:	22 0b       	sbc	r18, r18
    e0cc:	33 0b       	sbc	r19, r19
    e0ce:	49 e1       	ldi	r20, 0x19	; 25
    e0d0:	00 0f       	add	r16, r16
    e0d2:	11 1f       	adc	r17, r17
    e0d4:	22 1f       	adc	r18, r18
    e0d6:	33 1f       	adc	r19, r19
    e0d8:	4a 95       	dec	r20
    e0da:	d1 f7       	brne	.-12     	; 0xe0d0 <tm_to_fat+0x8a>
    e0dc:	ac 01       	movw	r20, r24
    e0de:	bd 01       	movw	r22, r26
    e0e0:	40 2b       	or	r20, r16
    e0e2:	51 2b       	or	r21, r17
    e0e4:	62 2b       	or	r22, r18
    e0e6:	73 2b       	or	r23, r19
    e0e8:	80 85       	ldd	r24, Z+8	; 0x08
    e0ea:	91 85       	ldd	r25, Z+9	; 0x09
    e0ec:	09 2e       	mov	r0, r25
    e0ee:	00 0c       	add	r0, r0
    e0f0:	aa 0b       	sbc	r26, r26
    e0f2:	bb 0b       	sbc	r27, r27
    e0f4:	01 96       	adiw	r24, 0x01	; 1
    e0f6:	a1 1d       	adc	r26, r1
    e0f8:	b1 1d       	adc	r27, r1
    e0fa:	e5 e1       	ldi	r30, 0x15	; 21
    e0fc:	88 0f       	add	r24, r24
    e0fe:	99 1f       	adc	r25, r25
    e100:	aa 1f       	adc	r26, r26
    e102:	bb 1f       	adc	r27, r27
    e104:	ea 95       	dec	r30
    e106:	d1 f7       	brne	.-12     	; 0xe0fc <tm_to_fat+0xb6>
    e108:	8a 01       	movw	r16, r20
    e10a:	9b 01       	movw	r18, r22
    e10c:	08 2b       	or	r16, r24
    e10e:	19 2b       	or	r17, r25
    e110:	2a 2b       	or	r18, r26
    e112:	3b 2b       	or	r19, r27
    e114:	c9 01       	movw	r24, r18
    e116:	b8 01       	movw	r22, r16
}
    e118:	1f 91       	pop	r17
    e11a:	0f 91       	pop	r16
    e11c:	08 95       	ret

0000e11e <get_fattime>:
///
/// @return FAT32 time.
/// @see tm_to_fat().
MEMSPACE
DWORD get_fattime (void)
{
    e11e:	a4 e0       	ldi	r26, 0x04	; 4
    e120:	b0 e0       	ldi	r27, 0x00	; 0
    e122:	e5 e9       	ldi	r30, 0x95	; 149
    e124:	f0 e7       	ldi	r31, 0x70	; 112
    e126:	0c 94 0f e7 	jmp	0x1ce1e	; 0x1ce1e <__prologue_saves__+0x20>
    time_t t;
/* Get GMT time */
    time(&t);
    e12a:	ce 01       	movw	r24, r28
    e12c:	01 96       	adiw	r24, 0x01	; 1
    e12e:	0e 94 32 38 	call	0x7064	; 0x7064 <time>
    return( tm_to_fat(localtime(&t)));
    e132:	ce 01       	movw	r24, r28
    e134:	01 96       	adiw	r24, 0x01	; 1
    e136:	0e 94 cb 38 	call	0x7196	; 0x7196 <localtime>
    e13a:	85 df       	rcall	.-246    	; 0xe046 <tm_to_fat>
}
    e13c:	24 96       	adiw	r28, 0x04	; 4
    e13e:	e2 e0       	ldi	r30, 0x02	; 2
    e140:	0c 94 2b e7 	jmp	0x1ce56	; 0x1ce56 <__epilogue_restores__+0x20>

0000e144 <put_rc>:
/// @param[in] rc: FatFs status return code
/// @return  void

MEMSPACE
void put_rc (int rc)
{
    e144:	00 d0       	rcall	.+0      	; 0xe146 <put_rc+0x2>
    e146:	00 d0       	rcall	.+0      	; 0xe148 <put_rc+0x4>
    e148:	1f 92       	push	r1
        ptr = "INVALID ERROR MESSAGE";
    else
        ptr = (char *) err_msg[(int)rc];
    printf("rc=%u FR_%s\n", rc, ptr);
#else
    printf("rc=%u\n", rc);
    e14a:	ed b7       	in	r30, 0x3d	; 61
    e14c:	fe b7       	in	r31, 0x3e	; 62
    e14e:	95 83       	std	Z+5, r25	; 0x05
    e150:	84 83       	std	Z+4, r24	; 0x04
    e152:	8c e9       	ldi	r24, 0x9C	; 156
    e154:	9a e0       	ldi	r25, 0x0A	; 10
    e156:	a0 e0       	ldi	r26, 0x00	; 0
    e158:	81 83       	std	Z+1, r24	; 0x01
    e15a:	92 83       	std	Z+2, r25	; 0x02
    e15c:	a3 83       	std	Z+3, r26	; 0x03
    e15e:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
#endif
}
    e162:	0f 90       	pop	r0
    e164:	0f 90       	pop	r0
    e166:	0f 90       	pop	r0
    e168:	0f 90       	pop	r0
    e16a:	0f 90       	pop	r0
    e16c:	08 95       	ret

0000e16e <fatfs_scan_files>:

MEMSPACE
int fatfs_scan_files (
char* path                                        /* Pointer to the working buffer with start path */
)
{
    e16e:	a4 e4       	ldi	r26, 0x44	; 68
    e170:	b1 e0       	ldi	r27, 0x01	; 1
    e172:	ed eb       	ldi	r30, 0xBD	; 189
    e174:	f0 e7       	ldi	r31, 0x70	; 112
    e176:	0c 94 0a e7 	jmp	0x1ce14	; 0x1ce14 <__prologue_saves__+0x16>
    e17a:	8c 01       	movw	r16, r24
    DIR dirs;
    FRESULT fr;
    int i;
    FILINFO info;

    fr = f_opendir(&dirs, path);
    e17c:	bc 01       	movw	r22, r24
    e17e:	ce 01       	movw	r24, r28
    e180:	89 5e       	subi	r24, 0xE9	; 233
    e182:	9e 4f       	sbci	r25, 0xFE	; 254
    e184:	0e 94 57 63 	call	0xc6ae	; 0xc6ae <f_opendir>
    if (fr == FR_OK)
    e188:	00 97       	sbiw	r24, 0x00	; 0
    e18a:	09 f0       	breq	.+2      	; 0xe18e <fatfs_scan_files+0x20>
    e18c:	5b c0       	rjmp	.+182    	; 0xe244 <fatfs_scan_files+0xd6>
        {
            if (info.fattrib & AM_DIR)
            {
                AccDirs++;
                i = strlen(path);
                path[i] = '/'; strcpy(path+i+1, info.fname);
    e18e:	8f e2       	ldi	r24, 0x2F	; 47
    e190:	d8 2e       	mov	r13, r24
    FILINFO info;

    fr = f_opendir(&dirs, path);
    if (fr == FR_OK)
    {
        while (((fr = f_readdir(&dirs, &info)) == FR_OK) && info.fname[0])
    e192:	be 01       	movw	r22, r28
    e194:	6f 5f       	subi	r22, 0xFF	; 255
    e196:	7f 4f       	sbci	r23, 0xFF	; 255
    e198:	ce 01       	movw	r24, r28
    e19a:	89 5e       	subi	r24, 0xE9	; 233
    e19c:	9e 4f       	sbci	r25, 0xFE	; 254
    e19e:	0e 94 dd 63 	call	0xc7ba	; 0xc7ba <f_readdir>
    e1a2:	00 97       	sbiw	r24, 0x00	; 0
    e1a4:	09 f0       	breq	.+2      	; 0xe1a8 <fatfs_scan_files+0x3a>
    e1a6:	4e c0       	rjmp	.+156    	; 0xe244 <fatfs_scan_files+0xd6>
    e1a8:	2f 89       	ldd	r18, Y+23	; 0x17
    e1aa:	22 23       	and	r18, r18
    e1ac:	09 f4       	brne	.+2      	; 0xe1b0 <fatfs_scan_files+0x42>
    e1ae:	4a c0       	rjmp	.+148    	; 0xe244 <fatfs_scan_files+0xd6>
        {
            if (info.fattrib & AM_DIR)
    e1b0:	89 85       	ldd	r24, Y+9	; 0x09
    e1b2:	84 ff       	sbrs	r24, 4
    e1b4:	25 c0       	rjmp	.+74     	; 0xe200 <fatfs_scan_files+0x92>
            {
                AccDirs++;
    e1b6:	80 91 c1 1c 	lds	r24, 0x1CC1	; 0x801cc1 <AccDirs>
    e1ba:	90 91 c2 1c 	lds	r25, 0x1CC2	; 0x801cc2 <AccDirs+0x1>
    e1be:	01 96       	adiw	r24, 0x01	; 1
    e1c0:	90 93 c2 1c 	sts	0x1CC2, r25	; 0x801cc2 <AccDirs+0x1>
    e1c4:	80 93 c1 1c 	sts	0x1CC1, r24	; 0x801cc1 <AccDirs>
                i = strlen(path);
    e1c8:	f8 01       	movw	r30, r16
    e1ca:	01 90       	ld	r0, Z+
    e1cc:	00 20       	and	r0, r0
    e1ce:	e9 f7       	brne	.-6      	; 0xe1ca <fatfs_scan_files+0x5c>
    e1d0:	31 97       	sbiw	r30, 0x01	; 1
    e1d2:	e0 1b       	sub	r30, r16
    e1d4:	f1 0b       	sbc	r31, r17
                path[i] = '/'; strcpy(path+i+1, info.fname);
    e1d6:	78 01       	movw	r14, r16
    e1d8:	ee 0e       	add	r14, r30
    e1da:	ff 1e       	adc	r15, r31
    e1dc:	d7 01       	movw	r26, r14
    e1de:	dc 92       	st	X, r13
    e1e0:	cf 01       	movw	r24, r30
    e1e2:	01 96       	adiw	r24, 0x01	; 1
    e1e4:	be 01       	movw	r22, r28
    e1e6:	69 5e       	subi	r22, 0xE9	; 233
    e1e8:	7f 4f       	sbci	r23, 0xFF	; 255
    e1ea:	80 0f       	add	r24, r16
    e1ec:	91 1f       	adc	r25, r17
    e1ee:	0e 94 71 31 	call	0x62e2	; 0x62e2 <strcpy>
                fr = fatfs_scan_files(path);
    e1f2:	c8 01       	movw	r24, r16
    e1f4:	bc df       	rcall	.-136    	; 0xe16e <fatfs_scan_files>
                path[i] = 0;
    e1f6:	f7 01       	movw	r30, r14
    e1f8:	10 82       	st	Z, r1
                if (fr != FR_OK) break;
    e1fa:	00 97       	sbiw	r24, 0x00	; 0
    e1fc:	51 f2       	breq	.-108    	; 0xe192 <fatfs_scan_files+0x24>
    e1fe:	22 c0       	rjmp	.+68     	; 0xe244 <fatfs_scan_files+0xd6>
            }
            else
            {
//              xprintf(PSTR("%s/%s\n"), path, info.fname);
                AccFiles++;
    e200:	80 91 c3 1c 	lds	r24, 0x1CC3	; 0x801cc3 <AccFiles>
    e204:	90 91 c4 1c 	lds	r25, 0x1CC4	; 0x801cc4 <AccFiles+0x1>
    e208:	01 96       	adiw	r24, 0x01	; 1
    e20a:	90 93 c4 1c 	sts	0x1CC4, r25	; 0x801cc4 <AccFiles+0x1>
    e20e:	80 93 c3 1c 	sts	0x1CC3, r24	; 0x801cc3 <AccFiles>
                AccSize += info.fsize;
    e212:	40 91 bd 1c 	lds	r20, 0x1CBD	; 0x801cbd <AccSize>
    e216:	50 91 be 1c 	lds	r21, 0x1CBE	; 0x801cbe <AccSize+0x1>
    e21a:	60 91 bf 1c 	lds	r22, 0x1CBF	; 0x801cbf <AccSize+0x2>
    e21e:	70 91 c0 1c 	lds	r23, 0x1CC0	; 0x801cc0 <AccSize+0x3>
    e222:	89 81       	ldd	r24, Y+1	; 0x01
    e224:	9a 81       	ldd	r25, Y+2	; 0x02
    e226:	ab 81       	ldd	r26, Y+3	; 0x03
    e228:	bc 81       	ldd	r27, Y+4	; 0x04
    e22a:	84 0f       	add	r24, r20
    e22c:	95 1f       	adc	r25, r21
    e22e:	a6 1f       	adc	r26, r22
    e230:	b7 1f       	adc	r27, r23
    e232:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <AccSize>
    e236:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <AccSize+0x1>
    e23a:	a0 93 bf 1c 	sts	0x1CBF, r26	; 0x801cbf <AccSize+0x2>
    e23e:	b0 93 c0 1c 	sts	0x1CC0, r27	; 0x801cc0 <AccSize+0x3>
    e242:	a7 cf       	rjmp	.-178    	; 0xe192 <fatfs_scan_files+0x24>
#endif
        }
    }

    return fr;
}
    e244:	cc 5b       	subi	r28, 0xBC	; 188
    e246:	de 4f       	sbci	r29, 0xFE	; 254
    e248:	e7 e0       	ldi	r30, 0x07	; 7
    e24a:	0c 94 26 e7 	jmp	0x1ce4c	; 0x1ce4c <__epilogue_restores__+0x16>

0000e24e <fatfs_fstype>:
/// @brief  return a string with the file system type
/// @param[in] type: file system type
/// @return string with file system type
MEMSPACE
char *fatfs_fstype(int type)
{
    e24e:	01 97       	sbiw	r24, 0x01	; 1
    e250:	84 30       	cpi	r24, 0x04	; 4
    e252:	91 05       	cpc	r25, r1
    e254:	40 f4       	brcc	.+16     	; 0xe266 <fatfs_fstype+0x18>
    e256:	88 0f       	add	r24, r24
    e258:	99 1f       	adc	r25, r25
    e25a:	fc 01       	movw	r30, r24
    e25c:	e6 53       	subi	r30, 0x36	; 54
    e25e:	f7 4f       	sbci	r31, 0xF7	; 247
    e260:	80 81       	ld	r24, Z
    e262:	91 81       	ldd	r25, Z+1	; 0x01
    e264:	08 95       	ret
    char *ptr;
    switch(type)
    e266:	88 ea       	ldi	r24, 0xA8	; 168
    e268:	98 e0       	ldi	r25, 0x08	; 8
        default:
            ptr = "UNKNOWN";
            break;
    }
    return(ptr);
}
    e26a:	08 95       	ret

0000e26c <fatfs_status>:
/// @see AccFiles: Total number of Files
/// @see AccSize:  Total size of all files
/// @return  1 on success 0 on error
MEMSPACE
int fatfs_status(char *ptr)
{
    e26c:	a7 e3       	ldi	r26, 0x37	; 55
    e26e:	b0 e0       	ldi	r27, 0x00	; 0
    e270:	ec e3       	ldi	r30, 0x3C	; 60
    e272:	f1 e7       	ldi	r31, 0x71	; 113
    e274:	0c 94 09 e7 	jmp	0x1ce12	; 0x1ce12 <__prologue_saves__+0x14>
    e278:	7c 01       	movw	r14, r24
    int res;
    FATFS *fs;
    char label[24+2];
    DWORD vsn;                                    // volume serial number

    while(*ptr == ' ' || *ptr == '\t')
    e27a:	fc 01       	movw	r30, r24
    e27c:	21 91       	ld	r18, Z+
    e27e:	cf 01       	movw	r24, r30
    e280:	20 32       	cpi	r18, 0x20	; 32
    e282:	d1 f3       	breq	.-12     	; 0xe278 <fatfs_status+0xc>
    e284:	29 30       	cpi	r18, 0x09	; 9
    e286:	c1 f3       	breq	.-16     	; 0xe278 <fatfs_status+0xc>
        ++ptr;

    printf("fatfs status:%s\n",ptr);
    e288:	ed b7       	in	r30, 0x3d	; 61
    e28a:	fe b7       	in	r31, 0x3e	; 62
    e28c:	e4 82       	std	Z+4, r14	; 0x04
    e28e:	f5 82       	std	Z+5, r15	; 0x05
    e290:	8b e8       	ldi	r24, 0x8B	; 139
    e292:	9a e0       	ldi	r25, 0x0A	; 10
    e294:	a0 e0       	ldi	r26, 0x00	; 0
    e296:	81 83       	std	Z+1, r24	; 0x01
    e298:	92 83       	std	Z+2, r25	; 0x02
    e29a:	a3 83       	std	Z+3, r26	; 0x03
    e29c:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    res = f_getfree(ptr, (DWORD*)&p2, &fs);
    e2a0:	ae 01       	movw	r20, r28
    e2a2:	4a 5c       	subi	r20, 0xCA	; 202
    e2a4:	5f 4f       	sbci	r21, 0xFF	; 255
    e2a6:	be 01       	movw	r22, r28
    e2a8:	6e 5c       	subi	r22, 0xCE	; 206
    e2aa:	7f 4f       	sbci	r23, 0xFF	; 255
    e2ac:	c7 01       	movw	r24, r14
    e2ae:	0e 94 5f 64 	call	0xc8be	; 0xc8be <f_getfree>
    if (res)
    e2b2:	89 2b       	or	r24, r25
    e2b4:	19 f0       	breq	.+6      	; 0xe2bc <fatfs_status+0x50>
    {
        printf("fatfs_status f_getfree failed\n");
    e2b6:	8c e6       	ldi	r24, 0x6C	; 108
    e2b8:	9a e0       	ldi	r25, 0x0A	; 10
    e2ba:	c0 c0       	rjmp	.+384    	; 0xe43c <fatfs_status+0x1d0>
        return(0);
    }
    printf("FAT type                = %s\n",  fatfs_fstype(fs->fs_type));
    e2bc:	ee a9       	ldd	r30, Y+54	; 0x36
    e2be:	ff a9       	ldd	r31, Y+55	; 0x37
    e2c0:	80 81       	ld	r24, Z
    e2c2:	90 e0       	ldi	r25, 0x00	; 0
    e2c4:	c4 df       	rcall	.-120    	; 0xe24e <fatfs_fstype>
    e2c6:	ed b7       	in	r30, 0x3d	; 61
    e2c8:	fe b7       	in	r31, 0x3e	; 62
    e2ca:	95 83       	std	Z+5, r25	; 0x05
    e2cc:	84 83       	std	Z+4, r24	; 0x04
    e2ce:	8e e4       	ldi	r24, 0x4E	; 78
    e2d0:	9a e0       	ldi	r25, 0x0A	; 10
    e2d2:	a0 e0       	ldi	r26, 0x00	; 0
    e2d4:	81 83       	std	Z+1, r24	; 0x01
    e2d6:	92 83       	std	Z+2, r25	; 0x02
    e2d8:	a3 83       	std	Z+3, r26	; 0x03
    e2da:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    printf("Bytes/Cluster           = %lu\n", (DWORD)fs->csize * 512);
    e2de:	ee a9       	ldd	r30, Y+54	; 0x36
    e2e0:	ff a9       	ldd	r31, Y+55	; 0x37
    e2e2:	81 85       	ldd	r24, Z+9	; 0x09
    e2e4:	92 85       	ldd	r25, Z+10	; 0x0a
    e2e6:	a0 e0       	ldi	r26, 0x00	; 0
    e2e8:	b0 e0       	ldi	r27, 0x00	; 0
    e2ea:	39 e0       	ldi	r19, 0x09	; 9
    e2ec:	88 0f       	add	r24, r24
    e2ee:	99 1f       	adc	r25, r25
    e2f0:	aa 1f       	adc	r26, r26
    e2f2:	bb 1f       	adc	r27, r27
    e2f4:	3a 95       	dec	r19
    e2f6:	d1 f7       	brne	.-12     	; 0xe2ec <fatfs_status+0x80>
    e2f8:	ed b7       	in	r30, 0x3d	; 61
    e2fa:	fe b7       	in	r31, 0x3e	; 62
    e2fc:	84 83       	std	Z+4, r24	; 0x04
    e2fe:	95 83       	std	Z+5, r25	; 0x05
    e300:	a6 83       	std	Z+6, r26	; 0x06
    e302:	b7 83       	std	Z+7, r27	; 0x07
    e304:	8f e2       	ldi	r24, 0x2F	; 47
    e306:	9a e0       	ldi	r25, 0x0A	; 10
    e308:	a0 e0       	ldi	r26, 0x00	; 0
    e30a:	81 83       	std	Z+1, r24	; 0x01
    e30c:	92 83       	std	Z+2, r25	; 0x02
    e30e:	a3 83       	std	Z+3, r26	; 0x03
    e310:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    printf("Number of FATs          = %u\n",  fs->n_fats);
    e314:	ee a9       	ldd	r30, Y+54	; 0x36
    e316:	ff a9       	ldd	r31, Y+55	; 0x37
    e318:	82 81       	ldd	r24, Z+2	; 0x02
    e31a:	90 e0       	ldi	r25, 0x00	; 0
    e31c:	ed b7       	in	r30, 0x3d	; 61
    e31e:	fe b7       	in	r31, 0x3e	; 62
    e320:	95 83       	std	Z+5, r25	; 0x05
    e322:	84 83       	std	Z+4, r24	; 0x04
    e324:	81 e1       	ldi	r24, 0x11	; 17
    e326:	9a e0       	ldi	r25, 0x0A	; 10
    e328:	a0 e0       	ldi	r26, 0x00	; 0
    e32a:	81 83       	std	Z+1, r24	; 0x01
    e32c:	92 83       	std	Z+2, r25	; 0x02
    e32e:	a3 83       	std	Z+3, r26	; 0x03
    e330:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    printf("Root DIR entries        = %u\n",  fs->n_rootdir);
    e334:	ee a9       	ldd	r30, Y+54	; 0x36
    e336:	ff a9       	ldd	r31, Y+55	; 0x37
    e338:	87 81       	ldd	r24, Z+7	; 0x07
    e33a:	90 85       	ldd	r25, Z+8	; 0x08
    e33c:	ed b7       	in	r30, 0x3d	; 61
    e33e:	fe b7       	in	r31, 0x3e	; 62
    e340:	95 83       	std	Z+5, r25	; 0x05
    e342:	84 83       	std	Z+4, r24	; 0x04
    e344:	83 ef       	ldi	r24, 0xF3	; 243
    e346:	99 e0       	ldi	r25, 0x09	; 9
    e348:	a0 e0       	ldi	r26, 0x00	; 0
    e34a:	81 83       	std	Z+1, r24	; 0x01
    e34c:	92 83       	std	Z+2, r25	; 0x02
    e34e:	a3 83       	std	Z+3, r26	; 0x03
    e350:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    printf("Sectors/FAT             = %lu\n", fs->fsize);
    e354:	ee a9       	ldd	r30, Y+54	; 0x36
    e356:	ff a9       	ldd	r31, Y+55	; 0x37
    e358:	85 8d       	ldd	r24, Z+29	; 0x1d
    e35a:	96 8d       	ldd	r25, Z+30	; 0x1e
    e35c:	a7 8d       	ldd	r26, Z+31	; 0x1f
    e35e:	b0 a1       	ldd	r27, Z+32	; 0x20
    e360:	ed b7       	in	r30, 0x3d	; 61
    e362:	fe b7       	in	r31, 0x3e	; 62
    e364:	84 83       	std	Z+4, r24	; 0x04
    e366:	95 83       	std	Z+5, r25	; 0x05
    e368:	a6 83       	std	Z+6, r26	; 0x06
    e36a:	b7 83       	std	Z+7, r27	; 0x07
    e36c:	84 ed       	ldi	r24, 0xD4	; 212
    e36e:	99 e0       	ldi	r25, 0x09	; 9
    e370:	a0 e0       	ldi	r26, 0x00	; 0
    e372:	81 83       	std	Z+1, r24	; 0x01
    e374:	92 83       	std	Z+2, r25	; 0x02
    e376:	a3 83       	std	Z+3, r26	; 0x03
    e378:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    printf("Number of clusters      = %lu\n", fs->n_fatent - 2);
    e37c:	ee a9       	ldd	r30, Y+54	; 0x36
    e37e:	ff a9       	ldd	r31, Y+55	; 0x37
    e380:	81 8d       	ldd	r24, Z+25	; 0x19
    e382:	92 8d       	ldd	r25, Z+26	; 0x1a
    e384:	a3 8d       	ldd	r26, Z+27	; 0x1b
    e386:	b4 8d       	ldd	r27, Z+28	; 0x1c
    e388:	02 97       	sbiw	r24, 0x02	; 2
    e38a:	a1 09       	sbc	r26, r1
    e38c:	b1 09       	sbc	r27, r1
    e38e:	ed b7       	in	r30, 0x3d	; 61
    e390:	fe b7       	in	r31, 0x3e	; 62
    e392:	84 83       	std	Z+4, r24	; 0x04
    e394:	95 83       	std	Z+5, r25	; 0x05
    e396:	a6 83       	std	Z+6, r26	; 0x06
    e398:	b7 83       	std	Z+7, r27	; 0x07
    e39a:	85 eb       	ldi	r24, 0xB5	; 181
    e39c:	99 e0       	ldi	r25, 0x09	; 9
    e39e:	a0 e0       	ldi	r26, 0x00	; 0
    e3a0:	81 83       	std	Z+1, r24	; 0x01
    e3a2:	92 83       	std	Z+2, r25	; 0x02
    e3a4:	a3 83       	std	Z+3, r26	; 0x03
    e3a6:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    printf("FAT start (lba)         = %lu\n", fs->fatbase);
    e3aa:	ee a9       	ldd	r30, Y+54	; 0x36
    e3ac:	ff a9       	ldd	r31, Y+55	; 0x37
    e3ae:	85 a1       	ldd	r24, Z+37	; 0x25
    e3b0:	96 a1       	ldd	r25, Z+38	; 0x26
    e3b2:	a7 a1       	ldd	r26, Z+39	; 0x27
    e3b4:	b0 a5       	ldd	r27, Z+40	; 0x28
    e3b6:	ed b7       	in	r30, 0x3d	; 61
    e3b8:	fe b7       	in	r31, 0x3e	; 62
    e3ba:	84 83       	std	Z+4, r24	; 0x04
    e3bc:	95 83       	std	Z+5, r25	; 0x05
    e3be:	a6 83       	std	Z+6, r26	; 0x06
    e3c0:	b7 83       	std	Z+7, r27	; 0x07
    e3c2:	86 e9       	ldi	r24, 0x96	; 150
    e3c4:	99 e0       	ldi	r25, 0x09	; 9
    e3c6:	a0 e0       	ldi	r26, 0x00	; 0
    e3c8:	81 83       	std	Z+1, r24	; 0x01
    e3ca:	92 83       	std	Z+2, r25	; 0x02
    e3cc:	a3 83       	std	Z+3, r26	; 0x03
    e3ce:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    printf("DIR start (lba,clustor) = %lu\n", fs->dirbase);
    e3d2:	ee a9       	ldd	r30, Y+54	; 0x36
    e3d4:	ff a9       	ldd	r31, Y+55	; 0x37
    e3d6:	81 a5       	ldd	r24, Z+41	; 0x29
    e3d8:	92 a5       	ldd	r25, Z+42	; 0x2a
    e3da:	a3 a5       	ldd	r26, Z+43	; 0x2b
    e3dc:	b4 a5       	ldd	r27, Z+44	; 0x2c
    e3de:	ed b7       	in	r30, 0x3d	; 61
    e3e0:	fe b7       	in	r31, 0x3e	; 62
    e3e2:	84 83       	std	Z+4, r24	; 0x04
    e3e4:	95 83       	std	Z+5, r25	; 0x05
    e3e6:	a6 83       	std	Z+6, r26	; 0x06
    e3e8:	b7 83       	std	Z+7, r27	; 0x07
    e3ea:	87 e7       	ldi	r24, 0x77	; 119
    e3ec:	99 e0       	ldi	r25, 0x09	; 9
    e3ee:	a0 e0       	ldi	r26, 0x00	; 0
    e3f0:	81 83       	std	Z+1, r24	; 0x01
    e3f2:	92 83       	std	Z+2, r25	; 0x02
    e3f4:	a3 83       	std	Z+3, r26	; 0x03
    e3f6:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    printf("Data start (lba)        = %lu\n", fs->database);
    e3fa:	ee a9       	ldd	r30, Y+54	; 0x36
    e3fc:	ff a9       	ldd	r31, Y+55	; 0x37
    e3fe:	85 a5       	ldd	r24, Z+45	; 0x2d
    e400:	96 a5       	ldd	r25, Z+46	; 0x2e
    e402:	a7 a5       	ldd	r26, Z+47	; 0x2f
    e404:	b0 a9       	ldd	r27, Z+48	; 0x30
    e406:	ed b7       	in	r30, 0x3d	; 61
    e408:	fe b7       	in	r31, 0x3e	; 62
    e40a:	84 83       	std	Z+4, r24	; 0x04
    e40c:	95 83       	std	Z+5, r25	; 0x05
    e40e:	a6 83       	std	Z+6, r26	; 0x06
    e410:	b7 83       	std	Z+7, r27	; 0x07
    e412:	88 e5       	ldi	r24, 0x58	; 88
    e414:	99 e0       	ldi	r25, 0x09	; 9
    e416:	a0 e0       	ldi	r26, 0x00	; 0
    e418:	81 83       	std	Z+1, r24	; 0x01
    e41a:	92 83       	std	Z+2, r25	; 0x02
    e41c:	a3 83       	std	Z+3, r26	; 0x03
    e41e:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>

#if FF_USE_LABEL
    res = f_getlabel(ptr, label, (DWORD*)&vsn);
    e422:	ae 01       	movw	r20, r28
    e424:	42 5d       	subi	r20, 0xD2	; 210
    e426:	5f 4f       	sbci	r21, 0xFF	; 255
    e428:	be 01       	movw	r22, r28
    e42a:	6c 5e       	subi	r22, 0xEC	; 236
    e42c:	7f 4f       	sbci	r23, 0xFF	; 255
    e42e:	c7 01       	movw	r24, r14
    e430:	0e 94 91 68 	call	0xd122	; 0xd122 <f_getlabel>
    if (res)
    e434:	89 2b       	or	r24, r25
    e436:	69 f0       	breq	.+26     	; 0xe452 <fatfs_status+0x1e6>
    {
        printf("fatfs_status f_getlabel failed\n");
    e438:	88 e3       	ldi	r24, 0x38	; 56
    e43a:	99 e0       	ldi	r25, 0x09	; 9
    e43c:	a0 e0       	ldi	r26, 0x00	; 0
    e43e:	ed b7       	in	r30, 0x3d	; 61
    e440:	fe b7       	in	r31, 0x3e	; 62
    e442:	81 83       	std	Z+1, r24	; 0x01
    e444:	92 83       	std	Z+2, r25	; 0x02
    e446:	a3 83       	std	Z+3, r26	; 0x03
    e448:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
        return(0);
    e44c:	80 e0       	ldi	r24, 0x00	; 0
    e44e:	90 e0       	ldi	r25, 0x00	; 0
    e450:	95 c0       	rjmp	.+298    	; 0xe57c <fatfs_status+0x310>
    }
    printf("Volume name             = %s\n", label[0] ? label : "<blank>");
    e452:	8c 89       	ldd	r24, Y+20	; 0x14
    e454:	81 11       	cpse	r24, r1
    e456:	03 c0       	rjmp	.+6      	; 0xe45e <fatfs_status+0x1f2>
    e458:	80 eb       	ldi	r24, 0xB0	; 176
    e45a:	98 e0       	ldi	r25, 0x08	; 8
    e45c:	02 c0       	rjmp	.+4      	; 0xe462 <fatfs_status+0x1f6>
    e45e:	ce 01       	movw	r24, r28
    e460:	44 96       	adiw	r24, 0x14	; 20
    e462:	ed b7       	in	r30, 0x3d	; 61
    e464:	fe b7       	in	r31, 0x3e	; 62
    e466:	95 83       	std	Z+5, r25	; 0x05
    e468:	84 83       	std	Z+4, r24	; 0x04
    e46a:	8a e1       	ldi	r24, 0x1A	; 26
    e46c:	99 e0       	ldi	r25, 0x09	; 9
    e46e:	a0 e0       	ldi	r26, 0x00	; 0
    e470:	81 83       	std	Z+1, r24	; 0x01
    e472:	92 83       	std	Z+2, r25	; 0x02
    e474:	a3 83       	std	Z+3, r26	; 0x03
    e476:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    printf("Volume S/N              = %04X-%04X\n", (WORD)((DWORD)vsn >> 16), (WORD)(vsn & 0xFFFF));
    e47a:	8e a5       	ldd	r24, Y+46	; 0x2e
    e47c:	9f a5       	ldd	r25, Y+47	; 0x2f
    e47e:	a8 a9       	ldd	r26, Y+48	; 0x30
    e480:	b9 a9       	ldd	r27, Y+49	; 0x31
    e482:	ed b7       	in	r30, 0x3d	; 61
    e484:	fe b7       	in	r31, 0x3e	; 62
    e486:	97 83       	std	Z+7, r25	; 0x07
    e488:	86 83       	std	Z+6, r24	; 0x06
    e48a:	b5 83       	std	Z+5, r27	; 0x05
    e48c:	a4 83       	std	Z+4, r26	; 0x04
    e48e:	85 ef       	ldi	r24, 0xF5	; 245
    e490:	98 e0       	ldi	r25, 0x08	; 8
    e492:	a0 e0       	ldi	r26, 0x00	; 0
    e494:	81 83       	std	Z+1, r24	; 0x01
    e496:	92 83       	std	Z+2, r25	; 0x02
    e498:	a3 83       	std	Z+3, r26	; 0x03
    e49a:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
#endif

    AccSize = AccFiles = AccDirs = 0;
    e49e:	10 92 c2 1c 	sts	0x1CC2, r1	; 0x801cc2 <AccDirs+0x1>
    e4a2:	10 92 c1 1c 	sts	0x1CC1, r1	; 0x801cc1 <AccDirs>
    e4a6:	10 92 c4 1c 	sts	0x1CC4, r1	; 0x801cc4 <AccFiles+0x1>
    e4aa:	10 92 c3 1c 	sts	0x1CC3, r1	; 0x801cc3 <AccFiles>
    e4ae:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <AccSize>
    e4b2:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <AccSize+0x1>
    e4b6:	10 92 bf 1c 	sts	0x1CBF, r1	; 0x801cbf <AccSize+0x2>
    e4ba:	10 92 c0 1c 	sts	0x1CC0, r1	; 0x801cc0 <AccSize+0x3>
    res = fatfs_scan_files(ptr);
    e4be:	c7 01       	movw	r24, r14
    e4c0:	56 de       	rcall	.-852    	; 0xe16e <fatfs_scan_files>
    if (res)
    e4c2:	89 2b       	or	r24, r25
    e4c4:	19 f0       	breq	.+6      	; 0xe4cc <fatfs_status+0x260>
    {
        printf("fatfs_status fatfs_scan_files failed\n");
    e4c6:	8f ec       	ldi	r24, 0xCF	; 207
    e4c8:	98 e0       	ldi	r25, 0x08	; 8
    e4ca:	b8 cf       	rjmp	.-144    	; 0xe43c <fatfs_status+0x1d0>
        return(0);
    }
    printf("%u files, %lu bytes.\n%u folders.\n"
    e4cc:	0e a9       	ldd	r16, Y+54	; 0x36
    e4ce:	1f a9       	ldd	r17, Y+55	; 0x37
    e4d0:	f8 01       	movw	r30, r16
    e4d2:	c1 84       	ldd	r12, Z+9	; 0x09
    e4d4:	d2 84       	ldd	r13, Z+10	; 0x0a
    e4d6:	e1 2c       	mov	r14, r1
    e4d8:	f1 2c       	mov	r15, r1
    e4da:	6a a9       	ldd	r22, Y+50	; 0x32
    e4dc:	7b a9       	ldd	r23, Y+51	; 0x33
    e4de:	8c a9       	ldd	r24, Y+52	; 0x34
    e4e0:	9d a9       	ldd	r25, Y+53	; 0x35
    e4e2:	a7 01       	movw	r20, r14
    e4e4:	96 01       	movw	r18, r12
    e4e6:	0e 94 50 e6 	call	0x1cca0	; 0x1cca0 <__mulsi3>
    e4ea:	22 e0       	ldi	r18, 0x02	; 2
    e4ec:	30 e0       	ldi	r19, 0x00	; 0
    e4ee:	40 e0       	ldi	r20, 0x00	; 0
    e4f0:	50 e0       	ldi	r21, 0x00	; 0
    e4f2:	0e 94 b4 e6 	call	0x1cd68	; 0x1cd68 <__divmodsi4>
    e4f6:	ed b7       	in	r30, 0x3d	; 61
    e4f8:	fe b7       	in	r31, 0x3e	; 62
    e4fa:	20 8b       	std	Z+16, r18	; 0x10
    e4fc:	31 8b       	std	Z+17, r19	; 0x11
    e4fe:	42 8b       	std	Z+18, r20	; 0x12
    e500:	53 8b       	std	Z+19, r21	; 0x13
    e502:	f8 01       	movw	r30, r16
    e504:	81 8d       	ldd	r24, Z+25	; 0x19
    e506:	92 8d       	ldd	r25, Z+26	; 0x1a
    e508:	a3 8d       	ldd	r26, Z+27	; 0x1b
    e50a:	b4 8d       	ldd	r27, Z+28	; 0x1c
    e50c:	9c 01       	movw	r18, r24
    e50e:	ad 01       	movw	r20, r26
    e510:	22 50       	subi	r18, 0x02	; 2
    e512:	31 09       	sbc	r19, r1
    e514:	41 09       	sbc	r20, r1
    e516:	51 09       	sbc	r21, r1
    e518:	c7 01       	movw	r24, r14
    e51a:	b6 01       	movw	r22, r12
    e51c:	0e 94 50 e6 	call	0x1cca0	; 0x1cca0 <__mulsi3>
    e520:	dc 01       	movw	r26, r24
    e522:	cb 01       	movw	r24, r22
    e524:	b6 95       	lsr	r27
    e526:	a7 95       	ror	r26
    e528:	97 95       	ror	r25
    e52a:	87 95       	ror	r24
    e52c:	ed b7       	in	r30, 0x3d	; 61
    e52e:	fe b7       	in	r31, 0x3e	; 62
    e530:	84 87       	std	Z+12, r24	; 0x0c
    e532:	95 87       	std	Z+13, r25	; 0x0d
    e534:	a6 87       	std	Z+14, r26	; 0x0e
    e536:	b7 87       	std	Z+15, r27	; 0x0f
    e538:	80 91 c1 1c 	lds	r24, 0x1CC1	; 0x801cc1 <AccDirs>
    e53c:	90 91 c2 1c 	lds	r25, 0x1CC2	; 0x801cc2 <AccDirs+0x1>
    e540:	93 87       	std	Z+11, r25	; 0x0b
    e542:	82 87       	std	Z+10, r24	; 0x0a
    e544:	80 91 bd 1c 	lds	r24, 0x1CBD	; 0x801cbd <AccSize>
    e548:	90 91 be 1c 	lds	r25, 0x1CBE	; 0x801cbe <AccSize+0x1>
    e54c:	a0 91 bf 1c 	lds	r26, 0x1CBF	; 0x801cbf <AccSize+0x2>
    e550:	b0 91 c0 1c 	lds	r27, 0x1CC0	; 0x801cc0 <AccSize+0x3>
    e554:	86 83       	std	Z+6, r24	; 0x06
    e556:	97 83       	std	Z+7, r25	; 0x07
    e558:	a0 87       	std	Z+8, r26	; 0x08
    e55a:	b1 87       	std	Z+9, r27	; 0x09
    e55c:	80 91 c3 1c 	lds	r24, 0x1CC3	; 0x801cc3 <AccFiles>
    e560:	90 91 c4 1c 	lds	r25, 0x1CC4	; 0x801cc4 <AccFiles+0x1>
    e564:	95 83       	std	Z+5, r25	; 0x05
    e566:	84 83       	std	Z+4, r24	; 0x04
    e568:	82 e8       	ldi	r24, 0x82	; 130
    e56a:	98 e0       	ldi	r25, 0x08	; 8
    e56c:	a0 e0       	ldi	r26, 0x00	; 0
    e56e:	81 83       	std	Z+1, r24	; 0x01
    e570:	92 83       	std	Z+2, r25	; 0x02
    e572:	a3 83       	std	Z+3, r26	; 0x03
    e574:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
        "%lu KB total disk space.\n%lu KB available.\n",
        AccFiles, AccSize, AccDirs,
        (fs->n_fatent - 2) * fs->csize / 2, p2 * fs->csize / 2
        );
	return(1);
    e578:	81 e0       	ldi	r24, 0x01	; 1
    e57a:	90 e0       	ldi	r25, 0x00	; 0
}
    e57c:	e7 96       	adiw	r28, 0x37	; 55
    e57e:	e8 e0       	ldi	r30, 0x08	; 8
    e580:	0c 94 25 e7 	jmp	0x1ce4a	; 0x1ce4a <__epilogue_restores__+0x14>

0000e584 <fatfs_filinfo_list>:
/// @param[in] : FILINFO pointer
/// @return  void

MEMSPACE
void fatfs_filinfo_list(FILINFO *info)
{
    e584:	ab e1       	ldi	r26, 0x1B	; 27
    e586:	b0 e0       	ldi	r27, 0x00	; 0
    e588:	e8 ec       	ldi	r30, 0xC8	; 200
    e58a:	f2 e7       	ldi	r31, 0x72	; 114
    e58c:	0c 94 0f e7 	jmp	0x1ce1e	; 0x1ce1e <__prologue_saves__+0x20>
    e590:	dc 01       	movw	r26, r24
    char attrs[6];
    if(info->fname[0] == 0)
    e592:	fc 01       	movw	r30, r24
    e594:	86 89       	ldd	r24, Z+22	; 0x16
    e596:	81 11       	cpse	r24, r1
    e598:	03 c0       	rjmp	.+6      	; 0xe5a0 <fatfs_filinfo_list+0x1c>
    {
        printf("fatfs_filinfo_list: empty\n");
    e59a:	87 e6       	ldi	r24, 0x67	; 103
    e59c:	98 e0       	ldi	r25, 0x08	; 8
    e59e:	69 c0       	rjmp	.+210    	; 0xe672 <fatfs_filinfo_list+0xee>
        return;
    }
    attrs[0] = (info->fattrib & AM_DIR) ? 'D' : '-';
    e5a0:	fd 01       	movw	r30, r26
    e5a2:	80 85       	ldd	r24, Z+8	; 0x08
    e5a4:	84 fd       	sbrc	r24, 4
    e5a6:	02 c0       	rjmp	.+4      	; 0xe5ac <fatfs_filinfo_list+0x28>
    e5a8:	9d e2       	ldi	r25, 0x2D	; 45
    e5aa:	01 c0       	rjmp	.+2      	; 0xe5ae <fatfs_filinfo_list+0x2a>
    e5ac:	94 e4       	ldi	r25, 0x44	; 68
    e5ae:	9e 8b       	std	Y+22, r25	; 0x16
    attrs[1] = (info->fattrib & AM_RDO) ? 'R' : '-';
    e5b0:	80 fd       	sbrc	r24, 0
    e5b2:	02 c0       	rjmp	.+4      	; 0xe5b8 <fatfs_filinfo_list+0x34>
    e5b4:	9d e2       	ldi	r25, 0x2D	; 45
    e5b6:	01 c0       	rjmp	.+2      	; 0xe5ba <fatfs_filinfo_list+0x36>
    e5b8:	92 e5       	ldi	r25, 0x52	; 82
    e5ba:	9f 8b       	std	Y+23, r25	; 0x17
    attrs[2] = (info->fattrib & AM_HID) ? 'H' : '-';
    e5bc:	81 fd       	sbrc	r24, 1
    e5be:	02 c0       	rjmp	.+4      	; 0xe5c4 <fatfs_filinfo_list+0x40>
    e5c0:	9d e2       	ldi	r25, 0x2D	; 45
    e5c2:	01 c0       	rjmp	.+2      	; 0xe5c6 <fatfs_filinfo_list+0x42>
    e5c4:	98 e4       	ldi	r25, 0x48	; 72
    e5c6:	98 8f       	std	Y+24, r25	; 0x18
    attrs[3] = (info->fattrib & AM_SYS) ? 'S' : '-';
    e5c8:	82 fd       	sbrc	r24, 2
    e5ca:	02 c0       	rjmp	.+4      	; 0xe5d0 <fatfs_filinfo_list+0x4c>
    e5cc:	9d e2       	ldi	r25, 0x2D	; 45
    e5ce:	01 c0       	rjmp	.+2      	; 0xe5d2 <fatfs_filinfo_list+0x4e>
    e5d0:	93 e5       	ldi	r25, 0x53	; 83
    e5d2:	99 8f       	std	Y+25, r25	; 0x19
    attrs[4] = (info->fattrib & AM_ARC) ? 'A' : '-';
    e5d4:	85 fd       	sbrc	r24, 5
    e5d6:	02 c0       	rjmp	.+4      	; 0xe5dc <fatfs_filinfo_list+0x58>
    e5d8:	8d e2       	ldi	r24, 0x2D	; 45
    e5da:	01 c0       	rjmp	.+2      	; 0xe5de <fatfs_filinfo_list+0x5a>
    e5dc:	81 e4       	ldi	r24, 0x41	; 65
    e5de:	8a 8f       	std	Y+26, r24	; 0x1a
    attrs[5] = 0;
    e5e0:	1b 8e       	std	Y+27, r1	; 0x1b
    printf("%s %u/%02u/%02u %02u:%02u %9lu %s",
    e5e2:	fd 01       	movw	r30, r26
    e5e4:	24 81       	ldd	r18, Z+4	; 0x04
    e5e6:	35 81       	ldd	r19, Z+5	; 0x05
    e5e8:	46 81       	ldd	r20, Z+6	; 0x06
    e5ea:	57 81       	ldd	r21, Z+7	; 0x07
    e5ec:	cd 01       	movw	r24, r26
    e5ee:	46 96       	adiw	r24, 0x16	; 22
    e5f0:	ed b7       	in	r30, 0x3d	; 61
    e5f2:	fe b7       	in	r31, 0x3e	; 62
    e5f4:	95 8b       	std	Z+21, r25	; 0x15
    e5f6:	84 8b       	std	Z+20, r24	; 0x14
    e5f8:	8d 91       	ld	r24, X+
    e5fa:	9d 91       	ld	r25, X+
    e5fc:	0d 90       	ld	r0, X+
    e5fe:	bc 91       	ld	r27, X
    e600:	a0 2d       	mov	r26, r0
    e602:	80 8b       	std	Z+16, r24	; 0x10
    e604:	91 8b       	std	Z+17, r25	; 0x11
    e606:	a2 8b       	std	Z+18, r26	; 0x12
    e608:	b3 8b       	std	Z+19, r27	; 0x13
    e60a:	ca 01       	movw	r24, r20
    e60c:	45 e0       	ldi	r20, 0x05	; 5
    e60e:	96 95       	lsr	r25
    e610:	87 95       	ror	r24
    e612:	4a 95       	dec	r20
    e614:	e1 f7       	brne	.-8      	; 0xe60e <fatfs_filinfo_list+0x8a>
    e616:	8f 73       	andi	r24, 0x3F	; 63
    e618:	99 27       	eor	r25, r25
    e61a:	97 87       	std	Z+15, r25	; 0x0f
    e61c:	86 87       	std	Z+14, r24	; 0x0e
    e61e:	85 2f       	mov	r24, r21
    e620:	86 95       	lsr	r24
    e622:	86 95       	lsr	r24
    e624:	86 95       	lsr	r24
    e626:	84 87       	std	Z+12, r24	; 0x0c
    e628:	15 86       	std	Z+13, r1	; 0x0d
    e62a:	c9 01       	movw	r24, r18
    e62c:	8f 71       	andi	r24, 0x1F	; 31
    e62e:	99 27       	eor	r25, r25
    e630:	93 87       	std	Z+11, r25	; 0x0b
    e632:	82 87       	std	Z+10, r24	; 0x0a
    e634:	c9 01       	movw	r24, r18
    e636:	55 e0       	ldi	r21, 0x05	; 5
    e638:	96 95       	lsr	r25
    e63a:	87 95       	ror	r24
    e63c:	5a 95       	dec	r21
    e63e:	e1 f7       	brne	.-8      	; 0xe638 <fatfs_filinfo_list+0xb4>
    e640:	8f 70       	andi	r24, 0x0F	; 15
    e642:	99 27       	eor	r25, r25
    e644:	91 87       	std	Z+9, r25	; 0x09
    e646:	80 87       	std	Z+8, r24	; 0x08
    e648:	23 2f       	mov	r18, r19
    e64a:	33 27       	eor	r19, r19
    e64c:	26 95       	lsr	r18
    e64e:	24 54       	subi	r18, 0x44	; 68
    e650:	38 4f       	sbci	r19, 0xF8	; 248
    e652:	37 83       	std	Z+7, r19	; 0x07
    e654:	26 83       	std	Z+6, r18	; 0x06
    e656:	ce 01       	movw	r24, r28
    e658:	46 96       	adiw	r24, 0x16	; 22
    e65a:	95 83       	std	Z+5, r25	; 0x05
    e65c:	84 83       	std	Z+4, r24	; 0x04
    e65e:	85 e4       	ldi	r24, 0x45	; 69
    e660:	98 e0       	ldi	r25, 0x08	; 8
    e662:	a0 e0       	ldi	r26, 0x00	; 0
    e664:	81 83       	std	Z+1, r24	; 0x01
    e666:	92 83       	std	Z+2, r25	; 0x02
    e668:	a3 83       	std	Z+3, r26	; 0x03
    e66a:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
        attrs,
        (info->fdate >> 9) + 1980, (info->fdate >> 5) & 15, info->fdate & 31,
        (info->ftime >> 11), (info->ftime >> 5) & 63,
        info->fsize, info->fname);
    printf("\n");
    e66e:	83 e4       	ldi	r24, 0x43	; 67
    e670:	98 e0       	ldi	r25, 0x08	; 8
    e672:	a0 e0       	ldi	r26, 0x00	; 0
    e674:	ed b7       	in	r30, 0x3d	; 61
    e676:	fe b7       	in	r31, 0x3e	; 62
    e678:	81 83       	std	Z+1, r24	; 0x01
    e67a:	92 83       	std	Z+2, r25	; 0x02
    e67c:	a3 83       	std	Z+3, r26	; 0x03
    e67e:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
}
    e682:	6b 96       	adiw	r28, 0x1b	; 27
    e684:	e2 e0       	ldi	r30, 0x02	; 2
    e686:	0c 94 2b e7 	jmp	0x1ce56	; 0x1ce56 <__epilogue_restores__+0x20>

0000e68a <fatfs_help>:

/// @brief Display FatFs test diagnostics help menu.
/// @return  void
MEMSPACE
void fatfs_help( int full)
{
    e68a:	00 d0       	rcall	.+0      	; 0xe68c <fatfs_help+0x2>
    e68c:	1f 92       	push	r1
    if(full)
    e68e:	89 2b       	or	r24, r25
    e690:	19 f0       	breq	.+6      	; 0xe698 <fatfs_help+0xe>
    {
        printf(
    e692:	81 e3       	ldi	r24, 0x31	; 49
    e694:	9b e0       	ldi	r25, 0x0B	; 11
    e696:	02 c0       	rjmp	.+4      	; 0xe69c <fatfs_help+0x12>
            "\n"
            );
    }
	else
	{
		printf("fatfs     help\n");
    e698:	81 e2       	ldi	r24, 0x21	; 33
    e69a:	9b e0       	ldi	r25, 0x0B	; 11
    e69c:	a0 e0       	ldi	r26, 0x00	; 0
    e69e:	ed b7       	in	r30, 0x3d	; 61
    e6a0:	fe b7       	in	r31, 0x3e	; 62
    e6a2:	81 83       	std	Z+1, r24	; 0x01
    e6a4:	92 83       	std	Z+2, r25	; 0x02
    e6a6:	a3 83       	std	Z+3, r26	; 0x03
    e6a8:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
	}

}
    e6ac:	0f 90       	pop	r0
    e6ae:	0f 90       	pop	r0
    e6b0:	0f 90       	pop	r0
    e6b2:	08 95       	ret

0000e6b4 <fatfs_ls>:
///
/// @see fatfs_filinfo_list().
/// @return  1 on success or 0 on error
MEMSPACE
int fatfs_ls(char *name)
{
    e6b4:	a6 e5       	ldi	r26, 0x56	; 86
    e6b6:	b2 e0       	ldi	r27, 0x02	; 2
    e6b8:	e0 e6       	ldi	r30, 0x60	; 96
    e6ba:	f3 e7       	ldi	r31, 0x73	; 115
    e6bc:	0c 94 07 e7 	jmp	0x1ce0e	; 0x1ce0e <__prologue_saves__+0x10>
    FILINFO fno;
    DIR dirs;                                     /* Directory object */
    FATFS *fs;
    char buff[MAX_NAME_LEN+1];

	memset(buff,0,sizeof(buff)-1);
    e6c0:	8e 01       	movw	r16, r28
    e6c2:	0e 5d       	subi	r16, 0xDE	; 222
    e6c4:	1e 4f       	sbci	r17, 0xFE	; 254
    e6c6:	20 e0       	ldi	r18, 0x00	; 0
    e6c8:	31 e0       	ldi	r19, 0x01	; 1
    e6ca:	f8 01       	movw	r30, r16
    e6cc:	a9 01       	movw	r20, r18
    e6ce:	11 92       	st	Z+, r1
    e6d0:	41 50       	subi	r20, 0x01	; 1
    e6d2:	50 40       	sbci	r21, 0x00	; 0
    e6d4:	e1 f7       	brne	.-8      	; 0xe6ce <fatfs_ls+0x1a>

    if(!name || !*name)
    e6d6:	00 97       	sbiw	r24, 0x00	; 0
    e6d8:	21 f0       	breq	.+8      	; 0xe6e2 <fatfs_ls+0x2e>
    e6da:	fc 01       	movw	r30, r24
    e6dc:	20 81       	ld	r18, Z
    e6de:	21 11       	cpse	r18, r1
    e6e0:	03 c0       	rjmp	.+6      	; 0xe6e8 <fatfs_ls+0x34>
    {
        strcpy(buff,".");
    e6e2:	68 ef       	ldi	r22, 0xF8	; 248
    e6e4:	72 e1       	ldi	r23, 0x12	; 18
    e6e6:	01 c0       	rjmp	.+2      	; 0xe6ea <fatfs_ls+0x36>
    }
    else
    {
        strcpy(buff,name);
    e6e8:	bc 01       	movw	r22, r24
    e6ea:	c8 01       	movw	r24, r16
    e6ec:	0e 94 71 31 	call	0x62e2	; 0x62e2 <strcpy>
    }
    printf("Listing:[%s]\n",buff);
    e6f0:	ed b7       	in	r30, 0x3d	; 61
    e6f2:	fe b7       	in	r31, 0x3e	; 62
    e6f4:	15 83       	std	Z+5, r17	; 0x05
    e6f6:	04 83       	std	Z+4, r16	; 0x04
    e6f8:	81 ee       	ldi	r24, 0xE1	; 225
    e6fa:	9a e0       	ldi	r25, 0x0A	; 10
    e6fc:	a0 e0       	ldi	r26, 0x00	; 0
    e6fe:	81 83       	std	Z+1, r24	; 0x01
    e700:	92 83       	std	Z+2, r25	; 0x02
    e702:	a3 83       	std	Z+3, r26	; 0x03
    e704:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>

    res = f_opendir(&dirs, buff);
    e708:	b8 01       	movw	r22, r16
    e70a:	ce 01       	movw	r24, r28
    e70c:	8d 5d       	subi	r24, 0xDD	; 221
    e70e:	9d 4f       	sbci	r25, 0xFD	; 253
    e710:	0e 94 57 63 	call	0xc6ae	; 0xc6ae <f_opendir>
    if (res != FR_OK) 
    e714:	89 2b       	or	r24, r25
    e716:	09 f0       	breq	.+2      	; 0xe71a <fatfs_ls+0x66>
    e718:	96 c0       	rjmp	.+300    	; 0xe846 <fatfs_ls+0x192>
	{ 
		return(0); 
	}
    p1 = s1 = s2 = 0;
    e71a:	cf 5a       	subi	r28, 0xAF	; 175
    e71c:	dd 4f       	sbci	r29, 0xFD	; 253
    e71e:	18 82       	st	Y, r1
    e720:	19 82       	std	Y+1, r1	; 0x01
    e722:	1a 82       	std	Y+2, r1	; 0x02
    e724:	1b 82       	std	Y+3, r1	; 0x03
    e726:	c1 55       	subi	r28, 0x51	; 81
    e728:	d2 40       	sbci	r29, 0x02	; 2
    e72a:	a1 2c       	mov	r10, r1
    e72c:	b1 2c       	mov	r11, r1
    e72e:	c1 2c       	mov	r12, r1
    e730:	d1 2c       	mov	r13, r1
    while(1)
    {
        res = f_readdir(&dirs, &fno);
    e732:	be 01       	movw	r22, r28
    e734:	64 5f       	subi	r22, 0xF4	; 244
    e736:	7f 4f       	sbci	r23, 0xFF	; 255
    e738:	ce 01       	movw	r24, r28
    e73a:	8d 5d       	subi	r24, 0xDD	; 221
    e73c:	9d 4f       	sbci	r25, 0xFD	; 253
    e73e:	0e 94 dd 63 	call	0xc7ba	; 0xc7ba <f_readdir>
    e742:	7c 01       	movw	r14, r24
        if (res != FR_OK) 
    e744:	89 2b       	or	r24, r25
    e746:	49 f5       	brne	.+82     	; 0xe79a <fatfs_ls+0xe6>
			break;
		if(!fno.fname[0]) 
    e748:	8a a1       	ldd	r24, Y+34	; 0x22
    e74a:	88 23       	and	r24, r24
    e74c:	31 f1       	breq	.+76     	; 0xe79a <fatfs_ls+0xe6>
			break;
        if (fno.fattrib & AM_DIR)
    e74e:	8c 89       	ldd	r24, Y+20	; 0x14
    e750:	84 ff       	sbrs	r24, 4
    e752:	04 c0       	rjmp	.+8      	; 0xe75c <fatfs_ls+0xa8>
        {
            s2++;
    e754:	ff ef       	ldi	r31, 0xFF	; 255
    e756:	af 1a       	sub	r10, r31
    e758:	bf 0a       	sbc	r11, r31
    e75a:	1b c0       	rjmp	.+54     	; 0xe792 <fatfs_ls+0xde>
        }
        else
        {
            s1++; p1 += fno.fsize;
    e75c:	4f ef       	ldi	r20, 0xFF	; 255
    e75e:	c4 1a       	sub	r12, r20
    e760:	d4 0a       	sbc	r13, r20
    e762:	4c 85       	ldd	r20, Y+12	; 0x0c
    e764:	5d 85       	ldd	r21, Y+13	; 0x0d
    e766:	6e 85       	ldd	r22, Y+14	; 0x0e
    e768:	7f 85       	ldd	r23, Y+15	; 0x0f
    e76a:	cf 5a       	subi	r28, 0xAF	; 175
    e76c:	dd 4f       	sbci	r29, 0xFD	; 253
    e76e:	88 81       	ld	r24, Y
    e770:	99 81       	ldd	r25, Y+1	; 0x01
    e772:	aa 81       	ldd	r26, Y+2	; 0x02
    e774:	bb 81       	ldd	r27, Y+3	; 0x03
    e776:	c1 55       	subi	r28, 0x51	; 81
    e778:	d2 40       	sbci	r29, 0x02	; 2
    e77a:	84 0f       	add	r24, r20
    e77c:	95 1f       	adc	r25, r21
    e77e:	a6 1f       	adc	r26, r22
    e780:	b7 1f       	adc	r27, r23
    e782:	cf 5a       	subi	r28, 0xAF	; 175
    e784:	dd 4f       	sbci	r29, 0xFD	; 253
    e786:	88 83       	st	Y, r24
    e788:	99 83       	std	Y+1, r25	; 0x01
    e78a:	aa 83       	std	Y+2, r26	; 0x02
    e78c:	bb 83       	std	Y+3, r27	; 0x03
    e78e:	c1 55       	subi	r28, 0x51	; 81
    e790:	d2 40       	sbci	r29, 0x02	; 2
        }
        fatfs_filinfo_list(&fno);
    e792:	ce 01       	movw	r24, r28
    e794:	0c 96       	adiw	r24, 0x0c	; 12
    e796:	f6 de       	rcall	.-532    	; 0xe584 <fatfs_filinfo_list>
#ifdef ESP8266
        optimistic_yield(1000);
        wdt_reset();
#endif
    }
    e798:	cc cf       	rjmp	.-104    	; 0xe732 <fatfs_ls+0x7e>
	f_closedir(&dirs);
    e79a:	ce 01       	movw	r24, r28
    e79c:	8d 5d       	subi	r24, 0xDD	; 221
    e79e:	9d 4f       	sbci	r25, 0xFD	; 253
    e7a0:	0e 94 c8 63 	call	0xc790	; 0xc790 <f_closedir>
    printf("%4u File(s),%10lu bytes total\n%4u Dir(s)", s1, p1, s2);
    e7a4:	ed b7       	in	r30, 0x3d	; 61
    e7a6:	fe b7       	in	r31, 0x3e	; 62
    e7a8:	b3 86       	std	Z+11, r11	; 0x0b
    e7aa:	a2 86       	std	Z+10, r10	; 0x0a
    e7ac:	cf 5a       	subi	r28, 0xAF	; 175
    e7ae:	dd 4f       	sbci	r29, 0xFD	; 253
    e7b0:	88 81       	ld	r24, Y
    e7b2:	99 81       	ldd	r25, Y+1	; 0x01
    e7b4:	aa 81       	ldd	r26, Y+2	; 0x02
    e7b6:	bb 81       	ldd	r27, Y+3	; 0x03
    e7b8:	c1 55       	subi	r28, 0x51	; 81
    e7ba:	d2 40       	sbci	r29, 0x02	; 2
    e7bc:	86 83       	std	Z+6, r24	; 0x06
    e7be:	97 83       	std	Z+7, r25	; 0x07
    e7c0:	a0 87       	std	Z+8, r26	; 0x08
    e7c2:	b1 87       	std	Z+9, r27	; 0x09
    e7c4:	d5 82       	std	Z+5, r13	; 0x05
    e7c6:	c4 82       	std	Z+4, r12	; 0x04
    e7c8:	88 eb       	ldi	r24, 0xB8	; 184
    e7ca:	9a e0       	ldi	r25, 0x0A	; 10
    e7cc:	a0 e0       	ldi	r26, 0x00	; 0
    e7ce:	81 83       	std	Z+1, r24	; 0x01
    e7d0:	92 83       	std	Z+2, r25	; 0x02
    e7d2:	a3 83       	std	Z+3, r26	; 0x03
    e7d4:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    if (f_getfree(buff, (DWORD*)&p1, &fs) == FR_OK)
    e7d8:	ae 01       	movw	r20, r28
    e7da:	4b 5a       	subi	r20, 0xAB	; 171
    e7dc:	5d 4f       	sbci	r21, 0xFD	; 253
    e7de:	be 01       	movw	r22, r28
    e7e0:	6f 5a       	subi	r22, 0xAF	; 175
    e7e2:	7d 4f       	sbci	r23, 0xFD	; 253
    e7e4:	c8 01       	movw	r24, r16
    e7e6:	0e 94 5f 64 	call	0xc8be	; 0xc8be <f_getfree>
    e7ea:	89 2b       	or	r24, r25
    e7ec:	31 f5       	brne	.+76     	; 0xe83a <fatfs_ls+0x186>
        printf(", %10luK bytes free\n", p1 * fs->csize / 2);
    e7ee:	cb 5a       	subi	r28, 0xAB	; 171
    e7f0:	dd 4f       	sbci	r29, 0xFD	; 253
    e7f2:	e8 81       	ld	r30, Y
    e7f4:	f9 81       	ldd	r31, Y+1	; 0x01
    e7f6:	c5 55       	subi	r28, 0x55	; 85
    e7f8:	d2 40       	sbci	r29, 0x02	; 2
    e7fa:	a1 85       	ldd	r26, Z+9	; 0x09
    e7fc:	b2 85       	ldd	r27, Z+10	; 0x0a
    e7fe:	cf 5a       	subi	r28, 0xAF	; 175
    e800:	dd 4f       	sbci	r29, 0xFD	; 253
    e802:	28 81       	ld	r18, Y
    e804:	39 81       	ldd	r19, Y+1	; 0x01
    e806:	4a 81       	ldd	r20, Y+2	; 0x02
    e808:	5b 81       	ldd	r21, Y+3	; 0x03
    e80a:	c1 55       	subi	r28, 0x51	; 81
    e80c:	d2 40       	sbci	r29, 0x02	; 2
    e80e:	0e 94 df e6 	call	0x1cdbe	; 0x1cdbe <__muluhisi3>
    e812:	22 e0       	ldi	r18, 0x02	; 2
    e814:	30 e0       	ldi	r19, 0x00	; 0
    e816:	40 e0       	ldi	r20, 0x00	; 0
    e818:	50 e0       	ldi	r21, 0x00	; 0
    e81a:	0e 94 b4 e6 	call	0x1cd68	; 0x1cd68 <__divmodsi4>
    e81e:	ed b7       	in	r30, 0x3d	; 61
    e820:	fe b7       	in	r31, 0x3e	; 62
    e822:	24 83       	std	Z+4, r18	; 0x04
    e824:	35 83       	std	Z+5, r19	; 0x05
    e826:	46 83       	std	Z+6, r20	; 0x06
    e828:	57 83       	std	Z+7, r21	; 0x07
    e82a:	83 ea       	ldi	r24, 0xA3	; 163
    e82c:	9a e0       	ldi	r25, 0x0A	; 10
    e82e:	a0 e0       	ldi	r26, 0x00	; 0
    e830:	81 83       	std	Z+1, r24	; 0x01
    e832:	92 83       	std	Z+2, r25	; 0x02
    e834:	a3 83       	std	Z+3, r26	; 0x03
    e836:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
	if(res)
    e83a:	e1 14       	cp	r14, r1
    e83c:	f1 04       	cpc	r15, r1
    e83e:	31 f4       	brne	.+12     	; 0xe84c <fatfs_ls+0x198>
		return(-1);
	return(1);
    e840:	81 e0       	ldi	r24, 0x01	; 1
    e842:	90 e0       	ldi	r25, 0x00	; 0
    e844:	05 c0       	rjmp	.+10     	; 0xe850 <fatfs_ls+0x19c>
    printf("Listing:[%s]\n",buff);

    res = f_opendir(&dirs, buff);
    if (res != FR_OK) 
	{ 
		return(0); 
    e846:	80 e0       	ldi	r24, 0x00	; 0
    e848:	90 e0       	ldi	r25, 0x00	; 0
    e84a:	02 c0       	rjmp	.+4      	; 0xe850 <fatfs_ls+0x19c>
	f_closedir(&dirs);
    printf("%4u File(s),%10lu bytes total\n%4u Dir(s)", s1, p1, s2);
    if (f_getfree(buff, (DWORD*)&p1, &fs) == FR_OK)
        printf(", %10luK bytes free\n", p1 * fs->csize / 2);
	if(res)
		return(-1);
    e84c:	8f ef       	ldi	r24, 0xFF	; 255
    e84e:	9f ef       	ldi	r25, 0xFF	; 255
	return(1);
}
    e850:	ca 5a       	subi	r28, 0xAA	; 170
    e852:	dd 4f       	sbci	r29, 0xFD	; 253
    e854:	ea e0       	ldi	r30, 0x0A	; 10
    e856:	0c 94 23 e7 	jmp	0x1ce46	; 0x1ce46 <__epilogue_restores__+0x10>

0000e85a <mmc_test>:
/// - Assumes the device is formatted
///
/// @return void
MEMSPACE
void mmc_test(void)
{
    e85a:	a4 e0       	ldi	r26, 0x04	; 4
    e85c:	b1 e0       	ldi	r27, 0x01	; 1
    e85e:	e3 e3       	ldi	r30, 0x33	; 51
    e860:	f4 e7       	ldi	r31, 0x74	; 116
    e862:	0c 94 0f e7 	jmp	0x1ce1e	; 0x1ce1e <__prologue_saves__+0x20>
    char buff[MAX_NAME_LEN+1];

    sep();
    e866:	0e 94 3f 32 	call	0x647e	; 0x647e <sep>
    printf("START MMC TEST\n");
    e86a:	81 e1       	ldi	r24, 0x11	; 17
    e86c:	9b e0       	ldi	r25, 0x0B	; 11
    e86e:	a0 e0       	ldi	r26, 0x00	; 0
    e870:	ed b7       	in	r30, 0x3d	; 61
    e872:	fe b7       	in	r31, 0x3e	; 62
    e874:	81 83       	std	Z+1, r24	; 0x01
    e876:	92 83       	std	Z+2, r25	; 0x02
    e878:	a3 83       	std	Z+3, r26	; 0x03
    e87a:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    strcpy(buff,"/");
    e87e:	66 ea       	ldi	r22, 0xA6	; 166
    e880:	78 e0       	ldi	r23, 0x08	; 8
    e882:	ce 01       	movw	r24, r28
    e884:	04 96       	adiw	r24, 0x04	; 4
    e886:	0e 94 71 31 	call	0x62e2	; 0x62e2 <strcpy>
    fatfs_status(buff);
    e88a:	ce 01       	movw	r24, r28
    e88c:	04 96       	adiw	r24, 0x04	; 4
    e88e:	ee dc       	rcall	.-1572   	; 0xe26c <fatfs_status>
    printf("MMC Directory List\n");
    e890:	8d ef       	ldi	r24, 0xFD	; 253
    e892:	9a e0       	ldi	r25, 0x0A	; 10
    e894:	a0 e0       	ldi	r26, 0x00	; 0
    e896:	ed b7       	in	r30, 0x3d	; 61
    e898:	fe b7       	in	r31, 0x3e	; 62
    e89a:	81 83       	std	Z+1, r24	; 0x01
    e89c:	92 83       	std	Z+2, r25	; 0x02
    e89e:	a3 83       	std	Z+3, r26	; 0x03
    e8a0:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    fatfs_ls("/");
    e8a4:	86 ea       	ldi	r24, 0xA6	; 166
    e8a6:	98 e0       	ldi	r25, 0x08	; 8
    e8a8:	05 df       	rcall	.-502    	; 0xe6b4 <fatfs_ls>
    fatfs_cat("test3.txt");
    fatfs_ls("");
#endif
#endif

    printf("END MMC TEST\n");
    e8aa:	8f ee       	ldi	r24, 0xEF	; 239
    e8ac:	9a e0       	ldi	r25, 0x0A	; 10
    e8ae:	a0 e0       	ldi	r26, 0x00	; 0
    e8b0:	ed b7       	in	r30, 0x3d	; 61
    e8b2:	fe b7       	in	r31, 0x3e	; 62
    e8b4:	81 83       	std	Z+1, r24	; 0x01
    e8b6:	92 83       	std	Z+2, r25	; 0x02
    e8b8:	a3 83       	std	Z+3, r26	; 0x03
    e8ba:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    sep();
    e8be:	0e 94 3f 32 	call	0x647e	; 0x647e <sep>
}
    e8c2:	cc 5f       	subi	r28, 0xFC	; 252
    e8c4:	de 4f       	sbci	r29, 0xFE	; 254
    e8c6:	e2 e0       	ldi	r30, 0x02	; 2
    e8c8:	0c 94 2b e7 	jmp	0x1ce56	; 0x1ce56 <__epilogue_restores__+0x20>

0000e8cc <fatfs_tests>:
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int fatfs_tests(int argc,char *argv[])
{
    e8cc:	a4 e0       	ldi	r26, 0x04	; 4
    e8ce:	b1 e0       	ldi	r27, 0x01	; 1
    e8d0:	ec e6       	ldi	r30, 0x6C	; 108
    e8d2:	f4 e7       	ldi	r31, 0x74	; 116
    e8d4:	0c 94 09 e7 	jmp	0x1ce12	; 0x1ce12 <__prologue_saves__+0x14>
    int ind;

    char buff[MAX_NAME_LEN+1];

    ind = 0;
    ptr = argv[ind];
    e8d8:	fb 01       	movw	r30, r22
    e8da:	20 81       	ld	r18, Z
    e8dc:	31 81       	ldd	r19, Z+1	; 0x01

    if(!ptr)
    e8de:	21 15       	cp	r18, r1
    e8e0:	31 05       	cpc	r19, r1
    e8e2:	19 f4       	brne	.+6      	; 0xe8ea <fatfs_tests+0x1e>
        return(0);
    e8e4:	80 e0       	ldi	r24, 0x00	; 0
    e8e6:	90 e0       	ldi	r25, 0x00	; 0
    e8e8:	81 c0       	rjmp	.+258    	; 0xe9ec <fatfs_tests+0x120>
    e8ea:	8b 01       	movw	r16, r22
    e8ec:	6c 01       	movw	r12, r24

// If we have POSIX_TESTS we MUST prefix each test with "fatfs" keyword to avoid name clashing

    if( MATCHI(ptr,"fatfs") )
    e8ee:	62 ed       	ldi	r22, 0xD2	; 210
    e8f0:	78 e0       	ldi	r23, 0x08	; 8
    e8f2:	c9 01       	movw	r24, r18
    e8f4:	0e 94 7d 32 	call	0x64fa	; 0x64fa <MATCHI>
    e8f8:	89 2b       	or	r24, r25
    e8fa:	a1 f3       	breq	.-24     	; 0xe8e4 <fatfs_tests+0x18>
    {
        ptr = argv[++ind];
    e8fc:	f8 01       	movw	r30, r16
    e8fe:	e2 80       	ldd	r14, Z+2	; 0x02
    e900:	f3 80       	ldd	r15, Z+3	; 0x03
        if ( !ptr || MATCHI(ptr,"help") )
    e902:	e1 14       	cp	r14, r1
    e904:	f1 04       	cpc	r15, r1
    e906:	59 f4       	brne	.+22     	; 0xe91e <fatfs_tests+0x52>
MEMSPACE
void fatfs_help( int full)
{
    if(full)
    {
        printf(
    e908:	81 e3       	ldi	r24, 0x31	; 49
    e90a:	9b e0       	ldi	r25, 0x0B	; 11
    e90c:	a0 e0       	ldi	r26, 0x00	; 0
    e90e:	ed b7       	in	r30, 0x3d	; 61
    e910:	fe b7       	in	r31, 0x3e	; 62
    e912:	81 83       	std	Z+1, r24	; 0x01
    e914:	92 83       	std	Z+2, r25	; 0x02
    e916:	a3 83       	std	Z+3, r26	; 0x03
    e918:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    e91c:	40 c0       	rjmp	.+128    	; 0xe99e <fatfs_tests+0xd2>
// If we have POSIX_TESTS we MUST prefix each test with "fatfs" keyword to avoid name clashing

    if( MATCHI(ptr,"fatfs") )
    {
        ptr = argv[++ind];
        if ( !ptr || MATCHI(ptr,"help") )
    e91e:	64 e7       	ldi	r22, 0x74	; 116
    e920:	76 e1       	ldi	r23, 0x16	; 22
    e922:	c7 01       	movw	r24, r14
    e924:	0e 94 7d 32 	call	0x64fa	; 0x64fa <MATCHI>
    e928:	89 2b       	or	r24, r25
    e92a:	71 f7       	brne	.-36     	; 0xe908 <fatfs_tests+0x3c>
    {
        return(0);
    }
#endif

    if (MATCHI(ptr,"ls") || MATCHI(ptr,"dir") )
    e92c:	68 ed       	ldi	r22, 0xD8	; 216
    e92e:	78 e0       	ldi	r23, 0x08	; 8
    e930:	c7 01       	movw	r24, r14
    e932:	0e 94 7d 32 	call	0x64fa	; 0x64fa <MATCHI>
    e936:	89 2b       	or	r24, r25
    e938:	31 f0       	breq	.+12     	; 0xe946 <fatfs_tests+0x7a>
    e93a:	0c 5f       	subi	r16, 0xFC	; 252
    e93c:	1f 4f       	sbci	r17, 0xFF	; 255
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int fatfs_tests(int argc,char *argv[])
{
    e93e:	82 e0       	ldi	r24, 0x02	; 2
    e940:	e8 2e       	mov	r14, r24
    e942:	f1 2c       	mov	r15, r1
    e944:	12 c0       	rjmp	.+36     	; 0xe96a <fatfs_tests+0x9e>
    {
        return(0);
    }
#endif

    if (MATCHI(ptr,"ls") || MATCHI(ptr,"dir") )
    e946:	68 ed       	ldi	r22, 0xD8	; 216
    e948:	7b e0       	ldi	r23, 0x0B	; 11
    e94a:	c7 01       	movw	r24, r14
    e94c:	0e 94 7d 32 	call	0x64fa	; 0x64fa <MATCHI>
    e950:	89 2b       	or	r24, r25
    e952:	99 f7       	brne	.-26     	; 0xe93a <fatfs_tests+0x6e>
    e954:	19 c0       	rjmp	.+50     	; 0xe988 <fatfs_tests+0xbc>
    {
        int i;
        int args = 0;
        for(i=ind+1;i<argc;++i)
        {
            if(fatfs_ls(argv[i]) == 0)
    e956:	f8 01       	movw	r30, r16
    e958:	81 91       	ld	r24, Z+
    e95a:	91 91       	ld	r25, Z+
    e95c:	8f 01       	movw	r16, r30
    e95e:	aa de       	rcall	.-684    	; 0xe6b4 <fatfs_ls>
    e960:	89 2b       	or	r24, r25
    e962:	79 f0       	breq	.+30     	; 0xe982 <fatfs_tests+0xb6>

    if (MATCHI(ptr,"ls") || MATCHI(ptr,"dir") )
    {
        int i;
        int args = 0;
        for(i=ind+1;i<argc;++i)
    e964:	ff ef       	ldi	r31, 0xFF	; 255
    e966:	ef 1a       	sub	r14, r31
    e968:	ff 0a       	sbc	r15, r31
    e96a:	ec 14       	cp	r14, r12
    e96c:	fd 04       	cpc	r15, r13
    e96e:	9c f3       	brlt	.-26     	; 0xe956 <fatfs_tests+0x8a>
			{
				return(-1);
			}
            ++args;
        }
        if(!args)
    e970:	82 e0       	ldi	r24, 0x02	; 2
    e972:	e8 16       	cp	r14, r24
    e974:	f1 04       	cpc	r15, r1
    e976:	99 f4       	brne	.+38     	; 0xe99e <fatfs_tests+0xd2>
        {
            if(fatfs_ls("") == 0)
    e978:	80 e2       	ldi	r24, 0x20	; 32
    e97a:	9c e0       	ldi	r25, 0x0C	; 12
    e97c:	9b de       	rcall	.-714    	; 0xe6b4 <fatfs_ls>
    }

    else if (MATCHARGS(ptr,"status", (ind + 1), argc))
    {
        strcpy(buff,argv[ind]);
        if(fatfs_status(argv[ind]) == 0)
    e97e:	89 2b       	or	r24, r25
    e980:	71 f4       	brne	.+28     	; 0xe99e <fatfs_tests+0xd2>
        int args = 0;
        for(i=ind+1;i<argc;++i)
        {
            if(fatfs_ls(argv[i]) == 0)
			{
				return(-1);
    e982:	8f ef       	ldi	r24, 0xFF	; 255
    e984:	9f ef       	ldi	r25, 0xFF	; 255
    e986:	32 c0       	rjmp	.+100    	; 0xe9ec <fatfs_tests+0x120>
			}
        }
        return(1);
    }

    else if (MATCHARGS(ptr,"mmc_test",(ind+0),argc ))
    e988:	96 01       	movw	r18, r12
    e98a:	41 e0       	ldi	r20, 0x01	; 1
    e98c:	50 e0       	ldi	r21, 0x00	; 0
    e98e:	6b ed       	ldi	r22, 0xDB	; 219
    e990:	78 e0       	ldi	r23, 0x08	; 8
    e992:	c7 01       	movw	r24, r14
    e994:	0e 94 91 32 	call	0x6522	; 0x6522 <MATCHARGS>
    e998:	89 2b       	or	r24, r25
    {
        mmc_test();
    e99a:	21 f0       	breq	.+8      	; 0xe9a4 <fatfs_tests+0xd8>
    e99c:	5e df       	rcall	.-324    	; 0xe85a <mmc_test>
        return(1);
    e99e:	81 e0       	ldi	r24, 0x01	; 1
    e9a0:	90 e0       	ldi	r25, 0x00	; 0
    e9a2:	24 c0       	rjmp	.+72     	; 0xe9ec <fatfs_tests+0x120>
    }

    else if (MATCHARGS(ptr,"mmc_init",(ind+0),argc))
    e9a4:	96 01       	movw	r18, r12
    e9a6:	41 e0       	ldi	r20, 0x01	; 1
    e9a8:	50 e0       	ldi	r21, 0x00	; 0
    e9aa:	64 ee       	ldi	r22, 0xE4	; 228
    e9ac:	78 e0       	ldi	r23, 0x08	; 8
    e9ae:	c7 01       	movw	r24, r14
    e9b0:	0e 94 91 32 	call	0x6522	; 0x6522 <MATCHARGS>
    e9b4:	89 2b       	or	r24, r25
    {
        mmc_init(1);
    e9b6:	21 f0       	breq	.+8      	; 0xe9c0 <fatfs_tests+0xf4>
    e9b8:	81 e0       	ldi	r24, 0x01	; 1
    e9ba:	90 e0       	ldi	r25, 0x00	; 0
    e9bc:	70 da       	rcall	.-2848   	; 0xde9e <mmc_init>
    e9be:	ef cf       	rjmp	.-34     	; 0xe99e <fatfs_tests+0xd2>
        return(1);
    }

    else if (MATCHARGS(ptr,"status", (ind + 1), argc))
    e9c0:	96 01       	movw	r18, r12
    e9c2:	42 e0       	ldi	r20, 0x02	; 2
    e9c4:	50 e0       	ldi	r21, 0x00	; 0
    e9c6:	6d ee       	ldi	r22, 0xED	; 237
    e9c8:	78 e0       	ldi	r23, 0x08	; 8
    e9ca:	c7 01       	movw	r24, r14
    e9cc:	0e 94 91 32 	call	0x6522	; 0x6522 <MATCHARGS>
    e9d0:	89 2b       	or	r24, r25
    e9d2:	09 f4       	brne	.+2      	; 0xe9d6 <fatfs_tests+0x10a>
    e9d4:	87 cf       	rjmp	.-242    	; 0xe8e4 <fatfs_tests+0x18>
    {
        strcpy(buff,argv[ind]);
    e9d6:	f8 01       	movw	r30, r16
    e9d8:	02 81       	ldd	r16, Z+2	; 0x02
    e9da:	13 81       	ldd	r17, Z+3	; 0x03
    e9dc:	b8 01       	movw	r22, r16
    e9de:	ce 01       	movw	r24, r28
    e9e0:	04 96       	adiw	r24, 0x04	; 4
    e9e2:	0e 94 71 31 	call	0x62e2	; 0x62e2 <strcpy>
        if(fatfs_status(argv[ind]) == 0)
    e9e6:	c8 01       	movw	r24, r16
    e9e8:	41 dc       	rcall	.-1918   	; 0xe26c <fatfs_status>
    e9ea:	c9 cf       	rjmp	.-110    	; 0xe97e <fatfs_tests+0xb2>
        return(1);
    }
#endif

    return(0);
}
    e9ec:	cc 5f       	subi	r28, 0xFC	; 252
    e9ee:	de 4f       	sbci	r29, 0xFE	; 254
    e9f0:	e8 e0       	ldi	r30, 0x08	; 8
    e9f2:	0c 94 25 e7 	jmp	0x1ce4a	; 0x1ce4a <__epilogue_restores__+0x14>

0000e9f6 <fatfs_getc>:
    {
        errno = fatfs_to_errno(rc);
        return(-1);
    }
    return(0);
}
    e9f6:	8f 92       	push	r8
    e9f8:	9f 92       	push	r9
    e9fa:	af 92       	push	r10
    e9fc:	bf 92       	push	r11
    e9fe:	ef 92       	push	r14
    ea00:	ff 92       	push	r15
    ea02:	0f 93       	push	r16
    ea04:	1f 93       	push	r17
    ea06:	cf 93       	push	r28
    ea08:	df 93       	push	r29
    ea0a:	00 d0       	rcall	.+0      	; 0xea0c <fatfs_getc+0x16>
    ea0c:	1f 92       	push	r1
    ea0e:	cd b7       	in	r28, 0x3d	; 61
    ea10:	de b7       	in	r29, 0x3e	; 62
    ea12:	10 92 c6 1c 	sts	0x1CC6, r1	; 0x801cc6 <errno+0x1>
    ea16:	10 92 c5 1c 	sts	0x1CC5, r1	; 0x801cc5 <errno>
    ea1a:	00 97       	sbiw	r24, 0x00	; 0
    ea1c:	39 f4       	brne	.+14     	; 0xea2c <fatfs_getc+0x36>
    ea1e:	89 e0       	ldi	r24, 0x09	; 9
    ea20:	90 e0       	ldi	r25, 0x00	; 0
    ea22:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
    ea26:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
    ea2a:	2f c0       	rjmp	.+94     	; 0xea8a <fatfs_getc+0x94>
    ea2c:	fc 01       	movw	r30, r24
    ea2e:	e4 84       	ldd	r14, Z+12	; 0x0c
    ea30:	f5 84       	ldd	r15, Z+13	; 0x0d
    ea32:	e1 14       	cp	r14, r1
    ea34:	f1 04       	cpc	r15, r1
    ea36:	99 f3       	breq	.-26     	; 0xea1e <fatfs_getc+0x28>
    ea38:	8c 01       	movw	r16, r24
    ea3a:	9e 01       	movw	r18, r28
    ea3c:	2f 5f       	subi	r18, 0xFF	; 255
    ea3e:	3f 4f       	sbci	r19, 0xFF	; 255
    ea40:	41 e0       	ldi	r20, 0x01	; 1
    ea42:	50 e0       	ldi	r21, 0x00	; 0
    ea44:	be 01       	movw	r22, r28
    ea46:	6d 5f       	subi	r22, 0xFD	; 253
    ea48:	7f 4f       	sbci	r23, 0xFF	; 255
    ea4a:	c7 01       	movw	r24, r14
    ea4c:	0e 94 90 5b 	call	0xb720	; 0xb720 <f_read>
    ea50:	00 97       	sbiw	r24, 0x00	; 0
    ea52:	31 f4       	brne	.+12     	; 0xea60 <fatfs_getc+0x6a>
    ea54:	29 81       	ldd	r18, Y+1	; 0x01
    ea56:	3a 81       	ldd	r19, Y+2	; 0x02
    ea58:	21 30       	cpi	r18, 0x01	; 1
    ea5a:	31 05       	cpc	r19, r1
    ea5c:	c9 f0       	breq	.+50     	; 0xea90 <fatfs_getc+0x9a>
    ea5e:	03 c0       	rjmp	.+6      	; 0xea66 <fatfs_getc+0x70>
    ea60:	84 31       	cpi	r24, 0x14	; 20
    ea62:	91 05       	cpc	r25, r1
    ea64:	40 f4       	brcc	.+16     	; 0xea76 <fatfs_getc+0x80>
    ea66:	fc 01       	movw	r30, r24
    ea68:	ea 55       	subi	r30, 0x5A	; 90
    ea6a:	f4 4f       	sbci	r31, 0xF4	; 244
    ea6c:	80 81       	ld	r24, Z
    ea6e:	08 2e       	mov	r0, r24
    ea70:	00 0c       	add	r0, r0
    ea72:	99 0b       	sbc	r25, r25
    ea74:	02 c0       	rjmp	.+4      	; 0xea7a <fatfs_getc+0x84>
    ea76:	83 e2       	ldi	r24, 0x23	; 35
    ea78:	90 e0       	ldi	r25, 0x00	; 0
    ea7a:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
    ea7e:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
    ea82:	f8 01       	movw	r30, r16
    ea84:	83 81       	ldd	r24, Z+3	; 0x03
    ea86:	80 62       	ori	r24, 0x20	; 32
    ea88:	83 83       	std	Z+3, r24	; 0x03
    ea8a:	8f ef       	ldi	r24, 0xFF	; 255
    ea8c:	9f ef       	ldi	r25, 0xFF	; 255
    ea8e:	28 c0       	rjmp	.+80     	; 0xeae0 <fatfs_getc+0xea>
    ea90:	8b 81       	ldd	r24, Y+3	; 0x03
    ea92:	8d 30       	cpi	r24, 0x0D	; 13
    ea94:	01 f5       	brne	.+64     	; 0xead6 <fatfs_getc+0xe0>
    ea96:	f7 01       	movw	r30, r14
    ea98:	80 88       	ldd	r8, Z+16	; 0x10
    ea9a:	91 88       	ldd	r9, Z+17	; 0x11
    ea9c:	a2 88       	ldd	r10, Z+18	; 0x12
    ea9e:	b3 88       	ldd	r11, Z+19	; 0x13
    eaa0:	9e 01       	movw	r18, r28
    eaa2:	2f 5f       	subi	r18, 0xFF	; 255
    eaa4:	3f 4f       	sbci	r19, 0xFF	; 255
    eaa6:	41 e0       	ldi	r20, 0x01	; 1
    eaa8:	50 e0       	ldi	r21, 0x00	; 0
    eaaa:	be 01       	movw	r22, r28
    eaac:	6d 5f       	subi	r22, 0xFD	; 253
    eaae:	7f 4f       	sbci	r23, 0xFF	; 255
    eab0:	c7 01       	movw	r24, r14
    eab2:	0e 94 90 5b 	call	0xb720	; 0xb720 <f_read>
    eab6:	89 2b       	or	r24, r25
    eab8:	89 f4       	brne	.+34     	; 0xeadc <fatfs_getc+0xe6>
    eaba:	89 81       	ldd	r24, Y+1	; 0x01
    eabc:	9a 81       	ldd	r25, Y+2	; 0x02
    eabe:	01 97       	sbiw	r24, 0x01	; 1
    eac0:	69 f4       	brne	.+26     	; 0xeadc <fatfs_getc+0xe6>
    eac2:	8b 81       	ldd	r24, Y+3	; 0x03
    eac4:	8a 30       	cpi	r24, 0x0A	; 10
    eac6:	31 f0       	breq	.+12     	; 0xead4 <fatfs_getc+0xde>
    eac8:	b5 01       	movw	r22, r10
    eaca:	a4 01       	movw	r20, r8
    eacc:	c7 01       	movw	r24, r14
    eace:	0e 94 9c 60 	call	0xc138	; 0xc138 <f_lseek>
    ead2:	04 c0       	rjmp	.+8      	; 0xeadc <fatfs_getc+0xe6>
    ead4:	8b 83       	std	Y+3, r24	; 0x03
    ead6:	8b 81       	ldd	r24, Y+3	; 0x03
    ead8:	90 e0       	ldi	r25, 0x00	; 0
    eada:	02 c0       	rjmp	.+4      	; 0xeae0 <fatfs_getc+0xea>
    eadc:	8a e0       	ldi	r24, 0x0A	; 10
    eade:	90 e0       	ldi	r25, 0x00	; 0
    eae0:	0f 90       	pop	r0
    eae2:	0f 90       	pop	r0
    eae4:	0f 90       	pop	r0
    eae6:	df 91       	pop	r29
    eae8:	cf 91       	pop	r28
    eaea:	1f 91       	pop	r17
    eaec:	0f 91       	pop	r16
    eaee:	ff 90       	pop	r15
    eaf0:	ef 90       	pop	r14
    eaf2:	bf 90       	pop	r11
    eaf4:	af 90       	pop	r10
    eaf6:	9f 90       	pop	r9
    eaf8:	8f 90       	pop	r8
    eafa:	08 95       	ret

0000eafc <fatfs_putc>:
    eafc:	a3 e0       	ldi	r26, 0x03	; 3
    eafe:	b0 e0       	ldi	r27, 0x00	; 0
    eb00:	e4 e8       	ldi	r30, 0x84	; 132
    eb02:	f5 e7       	ldi	r31, 0x75	; 117
    eb04:	0c 94 0d e7 	jmp	0x1ce1a	; 0x1ce1a <__prologue_saves__+0x1c>
    eb08:	8b 83       	std	Y+3, r24	; 0x03
    eb0a:	10 92 c6 1c 	sts	0x1CC6, r1	; 0x801cc6 <errno+0x1>
    eb0e:	10 92 c5 1c 	sts	0x1CC5, r1	; 0x801cc5 <errno>
    eb12:	61 15       	cp	r22, r1
    eb14:	71 05       	cpc	r23, r1
    eb16:	39 f4       	brne	.+14     	; 0xeb26 <fatfs_putc+0x2a>
    eb18:	89 e0       	ldi	r24, 0x09	; 9
    eb1a:	90 e0       	ldi	r25, 0x00	; 0
    eb1c:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
    eb20:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
    eb24:	2d c0       	rjmp	.+90     	; 0xeb80 <fatfs_putc+0x84>
    eb26:	fb 01       	movw	r30, r22
    eb28:	84 85       	ldd	r24, Z+12	; 0x0c
    eb2a:	95 85       	ldd	r25, Z+13	; 0x0d
    eb2c:	00 97       	sbiw	r24, 0x00	; 0
    eb2e:	a1 f3       	breq	.-24     	; 0xeb18 <fatfs_putc+0x1c>
    eb30:	8b 01       	movw	r16, r22
    eb32:	9e 01       	movw	r18, r28
    eb34:	2f 5f       	subi	r18, 0xFF	; 255
    eb36:	3f 4f       	sbci	r19, 0xFF	; 255
    eb38:	41 e0       	ldi	r20, 0x01	; 1
    eb3a:	50 e0       	ldi	r21, 0x00	; 0
    eb3c:	be 01       	movw	r22, r28
    eb3e:	6d 5f       	subi	r22, 0xFD	; 253
    eb40:	7f 4f       	sbci	r23, 0xFF	; 255
    eb42:	0e 94 db 5c 	call	0xb9b6	; 0xb9b6 <f_write>
    eb46:	00 97       	sbiw	r24, 0x00	; 0
    eb48:	31 f4       	brne	.+12     	; 0xeb56 <fatfs_putc+0x5a>
    eb4a:	29 81       	ldd	r18, Y+1	; 0x01
    eb4c:	3a 81       	ldd	r19, Y+2	; 0x02
    eb4e:	21 30       	cpi	r18, 0x01	; 1
    eb50:	31 05       	cpc	r19, r1
    eb52:	c9 f0       	breq	.+50     	; 0xeb86 <fatfs_putc+0x8a>
    eb54:	03 c0       	rjmp	.+6      	; 0xeb5c <fatfs_putc+0x60>
    eb56:	84 31       	cpi	r24, 0x14	; 20
    eb58:	91 05       	cpc	r25, r1
    eb5a:	40 f4       	brcc	.+16     	; 0xeb6c <fatfs_putc+0x70>
    eb5c:	fc 01       	movw	r30, r24
    eb5e:	ea 55       	subi	r30, 0x5A	; 90
    eb60:	f4 4f       	sbci	r31, 0xF4	; 244
    eb62:	80 81       	ld	r24, Z
    eb64:	08 2e       	mov	r0, r24
    eb66:	00 0c       	add	r0, r0
    eb68:	99 0b       	sbc	r25, r25
    eb6a:	02 c0       	rjmp	.+4      	; 0xeb70 <fatfs_putc+0x74>
    eb6c:	83 e2       	ldi	r24, 0x23	; 35
    eb6e:	90 e0       	ldi	r25, 0x00	; 0
    eb70:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
    eb74:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
    eb78:	f8 01       	movw	r30, r16
    eb7a:	83 81       	ldd	r24, Z+3	; 0x03
    eb7c:	80 62       	ori	r24, 0x20	; 32
    eb7e:	83 83       	std	Z+3, r24	; 0x03
    eb80:	8f ef       	ldi	r24, 0xFF	; 255
    eb82:	9f ef       	ldi	r25, 0xFF	; 255
    eb84:	02 c0       	rjmp	.+4      	; 0xeb8a <fatfs_putc+0x8e>
    eb86:	8b 81       	ldd	r24, Y+3	; 0x03
    eb88:	90 e0       	ldi	r25, 0x00	; 0
    eb8a:	23 96       	adiw	r28, 0x03	; 3
    eb8c:	e4 e0       	ldi	r30, 0x04	; 4
    eb8e:	0c 94 29 e7 	jmp	0x1ce52	; 0x1ce52 <__epilogue_restores__+0x1c>

0000eb92 <fgetc>:
    eb92:	cf 93       	push	r28
    eb94:	df 93       	push	r29
    eb96:	00 d0       	rcall	.+0      	; 0xeb98 <fgetc+0x6>
    eb98:	1f 92       	push	r1
    eb9a:	ec 01       	movw	r28, r24
    eb9c:	00 97       	sbiw	r24, 0x00	; 0
    eb9e:	39 f4       	brne	.+14     	; 0xebae <fgetc+0x1c>
    eba0:	89 e0       	ldi	r24, 0x09	; 9
    eba2:	90 e0       	ldi	r25, 0x00	; 0
    eba4:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
    eba8:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
    ebac:	40 c0       	rjmp	.+128    	; 0xec2e <fgetc+0x9c>
    ebae:	2b 81       	ldd	r18, Y+3	; 0x03
    ebb0:	20 ff       	sbrs	r18, 0
    ebb2:	3d c0       	rjmp	.+122    	; 0xec2e <fgetc+0x9c>
    ebb4:	26 ff       	sbrs	r18, 6
    ebb6:	0a c0       	rjmp	.+20     	; 0xebcc <fgetc+0x3a>
    ebb8:	2f 7b       	andi	r18, 0xBF	; 191
    ebba:	2b 83       	std	Y+3, r18	; 0x03
    ebbc:	8e 81       	ldd	r24, Y+6	; 0x06
    ebbe:	9f 81       	ldd	r25, Y+7	; 0x07
    ebc0:	01 96       	adiw	r24, 0x01	; 1
    ebc2:	9f 83       	std	Y+7, r25	; 0x07
    ebc4:	8e 83       	std	Y+6, r24	; 0x06
    ebc6:	8a 81       	ldd	r24, Y+2	; 0x02
    ebc8:	90 e0       	ldi	r25, 0x00	; 0
    ebca:	33 c0       	rjmp	.+102    	; 0xec32 <fgetc+0xa0>
    ebcc:	22 ff       	sbrs	r18, 2
    ebce:	0d c0       	rjmp	.+26     	; 0xebea <fgetc+0x58>
    ebd0:	e8 81       	ld	r30, Y
    ebd2:	f9 81       	ldd	r31, Y+1	; 0x01
    ebd4:	80 81       	ld	r24, Z
    ebd6:	90 e0       	ldi	r25, 0x00	; 0
    ebd8:	00 97       	sbiw	r24, 0x00	; 0
    ebda:	19 f4       	brne	.+6      	; 0xebe2 <fgetc+0x50>
    ebdc:	20 62       	ori	r18, 0x20	; 32
    ebde:	2b 83       	std	Y+3, r18	; 0x03
    ebe0:	26 c0       	rjmp	.+76     	; 0xec2e <fgetc+0x9c>
    ebe2:	31 96       	adiw	r30, 0x01	; 1
    ebe4:	f9 83       	std	Y+1, r31	; 0x01
    ebe6:	e8 83       	st	Y, r30
    ebe8:	1b c0       	rjmp	.+54     	; 0xec20 <fgetc+0x8e>
    ebea:	ea 85       	ldd	r30, Y+10	; 0x0a
    ebec:	fb 85       	ldd	r31, Y+11	; 0x0b
    ebee:	30 97       	sbiw	r30, 0x00	; 0
    ebf0:	59 f4       	brne	.+22     	; 0xec08 <fgetc+0x76>
    ebf2:	8e ed       	ldi	r24, 0xDE	; 222
    ebf4:	9b e0       	ldi	r25, 0x0B	; 11
    ebf6:	a0 e0       	ldi	r26, 0x00	; 0
    ebf8:	ed b7       	in	r30, 0x3d	; 61
    ebfa:	fe b7       	in	r31, 0x3e	; 62
    ebfc:	81 83       	std	Z+1, r24	; 0x01
    ebfe:	92 83       	std	Z+2, r25	; 0x02
    ec00:	a3 83       	std	Z+3, r26	; 0x03
    ec02:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    ec06:	13 c0       	rjmp	.+38     	; 0xec2e <fgetc+0x9c>
    ec08:	09 95       	icall
    ec0a:	97 ff       	sbrs	r25, 7
    ec0c:	09 c0       	rjmp	.+18     	; 0xec20 <fgetc+0x8e>
    ec0e:	2b 81       	ldd	r18, Y+3	; 0x03
    ec10:	02 96       	adiw	r24, 0x02	; 2
    ec12:	11 f0       	breq	.+4      	; 0xec18 <fgetc+0x86>
    ec14:	80 e2       	ldi	r24, 0x20	; 32
    ec16:	01 c0       	rjmp	.+2      	; 0xec1a <fgetc+0x88>
    ec18:	80 e1       	ldi	r24, 0x10	; 16
    ec1a:	82 2b       	or	r24, r18
    ec1c:	8b 83       	std	Y+3, r24	; 0x03
    ec1e:	07 c0       	rjmp	.+14     	; 0xec2e <fgetc+0x9c>
    ec20:	2e 81       	ldd	r18, Y+6	; 0x06
    ec22:	3f 81       	ldd	r19, Y+7	; 0x07
    ec24:	2f 5f       	subi	r18, 0xFF	; 255
    ec26:	3f 4f       	sbci	r19, 0xFF	; 255
    ec28:	3f 83       	std	Y+7, r19	; 0x07
    ec2a:	2e 83       	std	Y+6, r18	; 0x06
    ec2c:	02 c0       	rjmp	.+4      	; 0xec32 <fgetc+0xa0>
    ec2e:	8f ef       	ldi	r24, 0xFF	; 255
    ec30:	9f ef       	ldi	r25, 0xFF	; 255
    ec32:	cd b7       	in	r28, 0x3d	; 61
    ec34:	de b7       	in	r29, 0x3e	; 62
    ec36:	23 96       	adiw	r28, 0x03	; 3
    ec38:	e2 e0       	ldi	r30, 0x02	; 2
    ec3a:	0c 94 2b e7 	jmp	0x1ce56	; 0x1ce56 <__epilogue_restores__+0x20>

0000ec3e <fputc>:
    ec3e:	cf 93       	push	r28
    ec40:	df 93       	push	r29
    ec42:	00 d0       	rcall	.+0      	; 0xec44 <fputc+0x6>
    ec44:	1f 92       	push	r1
    ec46:	eb 01       	movw	r28, r22
    ec48:	10 92 c6 1c 	sts	0x1CC6, r1	; 0x801cc6 <errno+0x1>
    ec4c:	10 92 c5 1c 	sts	0x1CC5, r1	; 0x801cc5 <errno>
    ec50:	20 91 c9 1c 	lds	r18, 0x1CC9	; 0x801cc9 <__iob+0x2>
    ec54:	30 91 ca 1c 	lds	r19, 0x1CCA	; 0x801cca <__iob+0x3>
    ec58:	62 17       	cp	r22, r18
    ec5a:	73 07       	cpc	r23, r19
    ec5c:	49 f0       	breq	.+18     	; 0xec70 <fputc+0x32>
    ec5e:	20 91 cb 1c 	lds	r18, 0x1CCB	; 0x801ccb <__iob+0x4>
    ec62:	30 91 cc 1c 	lds	r19, 0x1CCC	; 0x801ccc <__iob+0x5>
    ec66:	62 17       	cp	r22, r18
    ec68:	73 07       	cpc	r23, r19
    ec6a:	11 f0       	breq	.+4      	; 0xec70 <fputc+0x32>
    ec6c:	47 df       	rcall	.-370    	; 0xeafc <fatfs_putc>
    ec6e:	33 c0       	rjmp	.+102    	; 0xecd6 <fputc+0x98>
    ec70:	2b 81       	ldd	r18, Y+3	; 0x03
    ec72:	21 ff       	sbrs	r18, 1
    ec74:	2e c0       	rjmp	.+92     	; 0xecd2 <fputc+0x94>
    ec76:	22 ff       	sbrs	r18, 2
    ec78:	10 c0       	rjmp	.+32     	; 0xec9a <fputc+0x5c>
    ec7a:	4e 81       	ldd	r20, Y+6	; 0x06
    ec7c:	5f 81       	ldd	r21, Y+7	; 0x07
    ec7e:	2c 81       	ldd	r18, Y+4	; 0x04
    ec80:	3d 81       	ldd	r19, Y+5	; 0x05
    ec82:	42 17       	cp	r20, r18
    ec84:	53 07       	cpc	r21, r19
    ec86:	f4 f4       	brge	.+60     	; 0xecc4 <fputc+0x86>
    ec88:	e8 81       	ld	r30, Y
    ec8a:	f9 81       	ldd	r31, Y+1	; 0x01
    ec8c:	9f 01       	movw	r18, r30
    ec8e:	2f 5f       	subi	r18, 0xFF	; 255
    ec90:	3f 4f       	sbci	r19, 0xFF	; 255
    ec92:	39 83       	std	Y+1, r19	; 0x01
    ec94:	28 83       	st	Y, r18
    ec96:	80 83       	st	Z, r24
    ec98:	15 c0       	rjmp	.+42     	; 0xecc4 <fputc+0x86>
    ec9a:	e8 85       	ldd	r30, Y+8	; 0x08
    ec9c:	f9 85       	ldd	r31, Y+9	; 0x09
    ec9e:	30 97       	sbiw	r30, 0x00	; 0
    eca0:	59 f4       	brne	.+22     	; 0xecb8 <fputc+0x7a>
    eca2:	86 ec       	ldi	r24, 0xC6	; 198
    eca4:	9b e0       	ldi	r25, 0x0B	; 11
    eca6:	a0 e0       	ldi	r26, 0x00	; 0
    eca8:	ed b7       	in	r30, 0x3d	; 61
    ecaa:	fe b7       	in	r31, 0x3e	; 62
    ecac:	81 83       	std	Z+1, r24	; 0x01
    ecae:	92 83       	std	Z+2, r25	; 0x02
    ecb0:	a3 83       	std	Z+3, r26	; 0x03
    ecb2:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    ecb6:	0d c0       	rjmp	.+26     	; 0xecd2 <fputc+0x94>
    ecb8:	be 01       	movw	r22, r28
    ecba:	09 95       	icall
    ecbc:	8f 3f       	cpi	r24, 0xFF	; 255
    ecbe:	ff ef       	ldi	r31, 0xFF	; 255
    ecc0:	9f 07       	cpc	r25, r31
    ecc2:	39 f0       	breq	.+14     	; 0xecd2 <fputc+0x94>
    ecc4:	2e 81       	ldd	r18, Y+6	; 0x06
    ecc6:	3f 81       	ldd	r19, Y+7	; 0x07
    ecc8:	2f 5f       	subi	r18, 0xFF	; 255
    ecca:	3f 4f       	sbci	r19, 0xFF	; 255
    eccc:	3f 83       	std	Y+7, r19	; 0x07
    ecce:	2e 83       	std	Y+6, r18	; 0x06
    ecd0:	02 c0       	rjmp	.+4      	; 0xecd6 <fputc+0x98>
    ecd2:	8f ef       	ldi	r24, 0xFF	; 255
    ecd4:	9f ef       	ldi	r25, 0xFF	; 255
    ecd6:	cd b7       	in	r28, 0x3d	; 61
    ecd8:	de b7       	in	r29, 0x3e	; 62
    ecda:	23 96       	adiw	r28, 0x03	; 3
    ecdc:	e2 e0       	ldi	r30, 0x02	; 2
    ecde:	0c 94 2b e7 	jmp	0x1ce56	; 0x1ce56 <__epilogue_restores__+0x20>

0000ece2 <_fprintf_putc>:
    ece2:	fc 01       	movw	r30, r24
    ece4:	86 2f       	mov	r24, r22
    ece6:	26 81       	ldd	r18, Z+6	; 0x06
    ece8:	37 81       	ldd	r19, Z+7	; 0x07
    ecea:	2f 5f       	subi	r18, 0xFF	; 255
    ecec:	3f 4f       	sbci	r19, 0xFF	; 255
    ecee:	37 83       	std	Z+7, r19	; 0x07
    ecf0:	26 83       	std	Z+6, r18	; 0x06
    ecf2:	62 81       	ldd	r22, Z+2	; 0x02
    ecf4:	73 81       	ldd	r23, Z+3	; 0x03
    ecf6:	90 e0       	ldi	r25, 0x00	; 0
    ecf8:	a2 cf       	rjmp	.-188    	; 0xec3e <fputc>
    ecfa:	08 95       	ret

0000ecfc <getchar>:
    ecfc:	80 91 c7 1c 	lds	r24, 0x1CC7	; 0x801cc7 <__iob>
    ed00:	90 91 c8 1c 	lds	r25, 0x1CC8	; 0x801cc8 <__iob+0x1>
    ed04:	46 cf       	rjmp	.-372    	; 0xeb92 <fgetc>
    ed06:	08 95       	ret

0000ed08 <putchar>:
    ed08:	60 91 c9 1c 	lds	r22, 0x1CC9	; 0x801cc9 <__iob+0x2>
    ed0c:	70 91 ca 1c 	lds	r23, 0x1CCA	; 0x801cca <__iob+0x3>
    ed10:	96 cf       	rjmp	.-212    	; 0xec3e <fputc>
    ed12:	08 95       	ret

0000ed14 <fgets>:
    ed14:	a0 e0       	ldi	r26, 0x00	; 0
    ed16:	b0 e0       	ldi	r27, 0x00	; 0
    ed18:	e0 e9       	ldi	r30, 0x90	; 144
    ed1a:	f6 e7       	ldi	r31, 0x76	; 118
    ed1c:	0c 94 09 e7 	jmp	0x1ce12	; 0x1ce12 <__prologue_saves__+0x14>
    ed20:	7c 01       	movw	r14, r24
    ed22:	6a 01       	movw	r12, r20
    ed24:	8b 01       	movw	r16, r22
    ed26:	c0 e0       	ldi	r28, 0x00	; 0
    ed28:	d0 e0       	ldi	r29, 0x00	; 0
    ed2a:	01 15       	cp	r16, r1
    ed2c:	11 05       	cpc	r17, r1
    ed2e:	41 f0       	breq	.+16     	; 0xed40 <fgets+0x2c>
    ed30:	c6 01       	movw	r24, r12
    ed32:	2f df       	rcall	.-418    	; 0xeb92 <fgetc>
    ed34:	8f 3f       	cpi	r24, 0xFF	; 255
    ed36:	2f ef       	ldi	r18, 0xFF	; 255
    ed38:	92 07       	cpc	r25, r18
    ed3a:	39 f4       	brne	.+14     	; 0xed4a <fgets+0x36>
    ed3c:	20 97       	sbiw	r28, 0x00	; 0
    ed3e:	b9 f0       	breq	.+46     	; 0xed6e <fgets+0x5a>
    ed40:	ce 0d       	add	r28, r14
    ed42:	df 1d       	adc	r29, r15
    ed44:	18 82       	st	Y, r1
    ed46:	c7 01       	movw	r24, r14
    ed48:	14 c0       	rjmp	.+40     	; 0xed72 <fgets+0x5e>
    ed4a:	8a 30       	cpi	r24, 0x0A	; 10
    ed4c:	91 05       	cpc	r25, r1
    ed4e:	c1 f3       	breq	.-16     	; 0xed40 <fgets+0x2c>
    ed50:	88 30       	cpi	r24, 0x08	; 8
    ed52:	91 05       	cpc	r25, r1
    ed54:	21 f4       	brne	.+8      	; 0xed5e <fgets+0x4a>
    ed56:	20 97       	sbiw	r28, 0x00	; 0
    ed58:	39 f0       	breq	.+14     	; 0xed68 <fgets+0x54>
    ed5a:	21 97       	sbiw	r28, 0x01	; 1
    ed5c:	05 c0       	rjmp	.+10     	; 0xed68 <fgets+0x54>
    ed5e:	f7 01       	movw	r30, r14
    ed60:	ec 0f       	add	r30, r28
    ed62:	fd 1f       	adc	r31, r29
    ed64:	80 83       	st	Z, r24
    ed66:	21 96       	adiw	r28, 0x01	; 1
    ed68:	01 50       	subi	r16, 0x01	; 1
    ed6a:	11 09       	sbc	r17, r1
    ed6c:	de cf       	rjmp	.-68     	; 0xed2a <fgets+0x16>
    ed6e:	80 e0       	ldi	r24, 0x00	; 0
    ed70:	90 e0       	ldi	r25, 0x00	; 0
    ed72:	cd b7       	in	r28, 0x3d	; 61
    ed74:	de b7       	in	r29, 0x3e	; 62
    ed76:	e8 e0       	ldi	r30, 0x08	; 8
    ed78:	0c 94 25 e7 	jmp	0x1ce4a	; 0x1ce4a <__epilogue_restores__+0x14>

0000ed7c <fputs>:
    ed7c:	0f 93       	push	r16
    ed7e:	1f 93       	push	r17
    ed80:	cf 93       	push	r28
    ed82:	df 93       	push	r29
    ed84:	8b 01       	movw	r16, r22
    ed86:	ec 01       	movw	r28, r24
    ed88:	89 91       	ld	r24, Y+
    ed8a:	88 23       	and	r24, r24
    ed8c:	41 f0       	breq	.+16     	; 0xed9e <fputs+0x22>
    ed8e:	b8 01       	movw	r22, r16
    ed90:	90 e0       	ldi	r25, 0x00	; 0
    ed92:	55 df       	rcall	.-342    	; 0xec3e <fputc>
    ed94:	8f 3f       	cpi	r24, 0xFF	; 255
    ed96:	2f ef       	ldi	r18, 0xFF	; 255
    ed98:	92 07       	cpc	r25, r18
    ed9a:	b1 f7       	brne	.-20     	; 0xed88 <fputs+0xc>
    ed9c:	02 c0       	rjmp	.+4      	; 0xeda2 <fputs+0x26>
    ed9e:	80 e0       	ldi	r24, 0x00	; 0
    eda0:	90 e0       	ldi	r25, 0x00	; 0
    eda2:	df 91       	pop	r29
    eda4:	cf 91       	pop	r28
    eda6:	1f 91       	pop	r17
    eda8:	0f 91       	pop	r16
    edaa:	08 95       	ret

0000edac <puts>:
    edac:	cf 93       	push	r28
    edae:	df 93       	push	r29
    edb0:	ec 01       	movw	r28, r24
    edb2:	89 91       	ld	r24, Y+
    edb4:	60 91 c9 1c 	lds	r22, 0x1CC9	; 0x801cc9 <__iob+0x2>
    edb8:	70 91 ca 1c 	lds	r23, 0x1CCA	; 0x801cca <__iob+0x3>
    edbc:	88 23       	and	r24, r24
    edbe:	39 f0       	breq	.+14     	; 0xedce <puts+0x22>
    edc0:	90 e0       	ldi	r25, 0x00	; 0
    edc2:	3d df       	rcall	.-390    	; 0xec3e <fputc>
    edc4:	8f 3f       	cpi	r24, 0xFF	; 255
    edc6:	2f ef       	ldi	r18, 0xFF	; 255
    edc8:	92 07       	cpc	r25, r18
    edca:	99 f7       	brne	.-26     	; 0xedb2 <puts+0x6>
    edcc:	03 c0       	rjmp	.+6      	; 0xedd4 <puts+0x28>
    edce:	8a e0       	ldi	r24, 0x0A	; 10
    edd0:	90 e0       	ldi	r25, 0x00	; 0
    edd2:	35 df       	rcall	.-406    	; 0xec3e <fputc>
    edd4:	df 91       	pop	r29
    edd6:	cf 91       	pop	r28
    edd8:	08 95       	ret

0000edda <fileno>:
    edda:	00 97       	sbiw	r24, 0x00	; 0
    eddc:	39 f4       	brne	.+14     	; 0xedec <fileno+0x12>
    edde:	89 e0       	ldi	r24, 0x09	; 9
    ede0:	90 e0       	ldi	r25, 0x00	; 0
    ede2:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
    ede6:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
    edea:	0e c0       	rjmp	.+28     	; 0xee08 <fileno+0x2e>
    edec:	e7 ec       	ldi	r30, 0xC7	; 199
    edee:	fc e1       	ldi	r31, 0x1C	; 28
    edf0:	20 e0       	ldi	r18, 0x00	; 0
    edf2:	30 e0       	ldi	r19, 0x00	; 0
    edf4:	41 91       	ld	r20, Z+
    edf6:	51 91       	ld	r21, Z+
    edf8:	84 17       	cp	r24, r20
    edfa:	95 07       	cpc	r25, r21
    edfc:	41 f0       	breq	.+16     	; 0xee0e <fileno+0x34>
    edfe:	2f 5f       	subi	r18, 0xFF	; 255
    ee00:	3f 4f       	sbci	r19, 0xFF	; 255
    ee02:	20 31       	cpi	r18, 0x10	; 16
    ee04:	31 05       	cpc	r19, r1
    ee06:	b1 f7       	brne	.-20     	; 0xedf4 <fileno+0x1a>
    ee08:	8f ef       	ldi	r24, 0xFF	; 255
    ee0a:	9f ef       	ldi	r25, 0xFF	; 255
    ee0c:	08 95       	ret
    ee0e:	c9 01       	movw	r24, r18
    ee10:	08 95       	ret

0000ee12 <fileno_to_stream>:
    ee12:	80 31       	cpi	r24, 0x10	; 16
    ee14:	91 05       	cpc	r25, r1
    ee16:	48 f4       	brcc	.+18     	; 0xee2a <fileno_to_stream+0x18>
    ee18:	88 0f       	add	r24, r24
    ee1a:	99 1f       	adc	r25, r25
    ee1c:	fc 01       	movw	r30, r24
    ee1e:	e9 53       	subi	r30, 0x39	; 57
    ee20:	f3 4e       	sbci	r31, 0xE3	; 227
    ee22:	80 81       	ld	r24, Z
    ee24:	91 81       	ldd	r25, Z+1	; 0x01
    ee26:	00 97       	sbiw	r24, 0x00	; 0
    ee28:	41 f4       	brne	.+16     	; 0xee3a <fileno_to_stream+0x28>
    ee2a:	89 e0       	ldi	r24, 0x09	; 9
    ee2c:	90 e0       	ldi	r25, 0x00	; 0
    ee2e:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
    ee32:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
    ee36:	80 e0       	ldi	r24, 0x00	; 0
    ee38:	90 e0       	ldi	r25, 0x00	; 0
    ee3a:	08 95       	ret

0000ee3c <mctime>:
    ee3c:	a4 e0       	ldi	r26, 0x04	; 4
    ee3e:	b0 e0       	ldi	r27, 0x00	; 0
    ee40:	e4 e2       	ldi	r30, 0x24	; 36
    ee42:	f7 e7       	ldi	r31, 0x77	; 119
    ee44:	0c 94 0f e7 	jmp	0x1ce1e	; 0x1ce1e <__prologue_saves__+0x20>
    ee48:	69 83       	std	Y+1, r22	; 0x01
    ee4a:	7a 83       	std	Y+2, r23	; 0x02
    ee4c:	8b 83       	std	Y+3, r24	; 0x03
    ee4e:	9c 83       	std	Y+4, r25	; 0x04
    ee50:	10 92 c6 1c 	sts	0x1CC6, r1	; 0x801cc6 <errno+0x1>
    ee54:	10 92 c5 1c 	sts	0x1CC5, r1	; 0x801cc5 <errno>
    ee58:	ce 01       	movw	r24, r28
    ee5a:	01 96       	adiw	r24, 0x01	; 1
    ee5c:	0e 94 4c 3d 	call	0x7a98	; 0x7a98 <ctime_gm>
    ee60:	fc 01       	movw	r30, r24
    ee62:	01 90       	ld	r0, Z+
    ee64:	00 20       	and	r0, r0
    ee66:	e9 f7       	brne	.-6      	; 0xee62 <mctime+0x26>
    ee68:	31 97       	sbiw	r30, 0x01	; 1
    ee6a:	e8 1b       	sub	r30, r24
    ee6c:	f9 0b       	sbc	r31, r25
    ee6e:	39 f0       	breq	.+14     	; 0xee7e <mctime+0x42>
    ee70:	31 97       	sbiw	r30, 0x01	; 1
    ee72:	e8 0f       	add	r30, r24
    ee74:	f9 1f       	adc	r31, r25
    ee76:	20 81       	ld	r18, Z
    ee78:	2a 30       	cpi	r18, 0x0A	; 10
    ee7a:	09 f4       	brne	.+2      	; 0xee7e <mctime+0x42>
    ee7c:	10 82       	st	Z, r1
    ee7e:	24 96       	adiw	r28, 0x04	; 4
    ee80:	e2 e0       	ldi	r30, 0x02	; 2
    ee82:	0c 94 2b e7 	jmp	0x1ce56	; 0x1ce56 <__epilogue_restores__+0x20>

0000ee86 <basename>:
    ee86:	00 97       	sbiw	r24, 0x00	; 0
    ee88:	49 f0       	breq	.+18     	; 0xee9c <basename+0x16>
    ee8a:	fc 01       	movw	r30, r24
    ee8c:	21 91       	ld	r18, Z+
    ee8e:	22 23       	and	r18, r18
    ee90:	21 f0       	breq	.+8      	; 0xee9a <basename+0x14>
    ee92:	2f 32       	cpi	r18, 0x2F	; 47
    ee94:	d9 f7       	brne	.-10     	; 0xee8c <basename+0x6>
    ee96:	cf 01       	movw	r24, r30
    ee98:	f9 cf       	rjmp	.-14     	; 0xee8c <basename+0x6>
    ee9a:	08 95       	ret
    ee9c:	80 e2       	ldi	r24, 0x20	; 32
    ee9e:	9c e0       	ldi	r25, 0x0C	; 12
    eea0:	08 95       	ret

0000eea2 <chdir>:
    eea2:	10 92 c6 1c 	sts	0x1CC6, r1	; 0x801cc6 <errno+0x1>
    eea6:	10 92 c5 1c 	sts	0x1CC5, r1	; 0x801cc5 <errno>
    eeaa:	0e 94 0b 5f 	call	0xbe16	; 0xbe16 <f_chdir>
    eeae:	00 97       	sbiw	r24, 0x00	; 0
    eeb0:	a1 f0       	breq	.+40     	; 0xeeda <chdir+0x38>
    eeb2:	84 31       	cpi	r24, 0x14	; 20
    eeb4:	91 05       	cpc	r25, r1
    eeb6:	40 f4       	brcc	.+16     	; 0xeec8 <chdir+0x26>
    eeb8:	fc 01       	movw	r30, r24
    eeba:	ea 55       	subi	r30, 0x5A	; 90
    eebc:	f4 4f       	sbci	r31, 0xF4	; 244
    eebe:	80 81       	ld	r24, Z
    eec0:	08 2e       	mov	r0, r24
    eec2:	00 0c       	add	r0, r0
    eec4:	99 0b       	sbc	r25, r25
    eec6:	02 c0       	rjmp	.+4      	; 0xeecc <chdir+0x2a>
    eec8:	83 e2       	ldi	r24, 0x23	; 35
    eeca:	90 e0       	ldi	r25, 0x00	; 0
    eecc:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
    eed0:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
    eed4:	8f ef       	ldi	r24, 0xFF	; 255
    eed6:	9f ef       	ldi	r25, 0xFF	; 255
    eed8:	08 95       	ret
    eeda:	80 e0       	ldi	r24, 0x00	; 0
    eedc:	90 e0       	ldi	r25, 0x00	; 0
    eede:	08 95       	ret

0000eee0 <chmod>:
    eee0:	10 92 c6 1c 	sts	0x1CC6, r1	; 0x801cc6 <errno+0x1>
    eee4:	10 92 c5 1c 	sts	0x1CC5, r1	; 0x801cc5 <errno>
    eee8:	42 79       	andi	r20, 0x92	; 146
    eeea:	55 27       	eor	r21, r21
    eeec:	66 27       	eor	r22, r22
    eeee:	77 27       	eor	r23, r23
    eef0:	45 2b       	or	r20, r21
    eef2:	46 2b       	or	r20, r22
    eef4:	47 2b       	or	r20, r23
    eef6:	19 f0       	breq	.+6      	; 0xeefe <chmod+0x1e>
    eef8:	80 e0       	ldi	r24, 0x00	; 0
    eefa:	90 e0       	ldi	r25, 0x00	; 0
    eefc:	08 95       	ret
    eefe:	41 e0       	ldi	r20, 0x01	; 1
    ef00:	61 e0       	ldi	r22, 0x01	; 1
    ef02:	0e 94 eb 67 	call	0xcfd6	; 0xcfd6 <f_chmod>
    ef06:	00 97       	sbiw	r24, 0x00	; 0
    ef08:	b9 f3       	breq	.-18     	; 0xeef8 <chmod+0x18>
    ef0a:	84 31       	cpi	r24, 0x14	; 20
    ef0c:	91 05       	cpc	r25, r1
    ef0e:	40 f4       	brcc	.+16     	; 0xef20 <chmod+0x40>
    ef10:	fc 01       	movw	r30, r24
    ef12:	ea 55       	subi	r30, 0x5A	; 90
    ef14:	f4 4f       	sbci	r31, 0xF4	; 244
    ef16:	80 81       	ld	r24, Z
    ef18:	08 2e       	mov	r0, r24
    ef1a:	00 0c       	add	r0, r0
    ef1c:	99 0b       	sbc	r25, r25
    ef1e:	02 c0       	rjmp	.+4      	; 0xef24 <chmod+0x44>
    ef20:	83 e2       	ldi	r24, 0x23	; 35
    ef22:	90 e0       	ldi	r25, 0x00	; 0
    ef24:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
    ef28:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
    ef2c:	8f ef       	ldi	r24, 0xFF	; 255
    ef2e:	9f ef       	ldi	r25, 0xFF	; 255
    ef30:	08 95       	ret

0000ef32 <getcwd>:
    ef32:	cf 93       	push	r28
    ef34:	df 93       	push	r29
    ef36:	d8 2f       	mov	r29, r24
    ef38:	c9 2f       	mov	r28, r25
    ef3a:	10 92 c6 1c 	sts	0x1CC6, r1	; 0x801cc6 <errno+0x1>
    ef3e:	10 92 c5 1c 	sts	0x1CC5, r1	; 0x801cc5 <errno>
    ef42:	0e 94 66 5f 	call	0xbecc	; 0xbecc <f_getcwd>
    ef46:	00 97       	sbiw	r24, 0x00	; 0
    ef48:	a1 f0       	breq	.+40     	; 0xef72 <getcwd+0x40>
    ef4a:	84 31       	cpi	r24, 0x14	; 20
    ef4c:	91 05       	cpc	r25, r1
    ef4e:	40 f4       	brcc	.+16     	; 0xef60 <getcwd+0x2e>
    ef50:	fc 01       	movw	r30, r24
    ef52:	ea 55       	subi	r30, 0x5A	; 90
    ef54:	f4 4f       	sbci	r31, 0xF4	; 244
    ef56:	80 81       	ld	r24, Z
    ef58:	08 2e       	mov	r0, r24
    ef5a:	00 0c       	add	r0, r0
    ef5c:	99 0b       	sbc	r25, r25
    ef5e:	02 c0       	rjmp	.+4      	; 0xef64 <getcwd+0x32>
    ef60:	83 e2       	ldi	r24, 0x23	; 35
    ef62:	90 e0       	ldi	r25, 0x00	; 0
    ef64:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
    ef68:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
    ef6c:	80 e0       	ldi	r24, 0x00	; 0
    ef6e:	90 e0       	ldi	r25, 0x00	; 0
    ef70:	02 c0       	rjmp	.+4      	; 0xef76 <getcwd+0x44>
    ef72:	8d 2f       	mov	r24, r29
    ef74:	9c 2f       	mov	r25, r28
    ef76:	df 91       	pop	r29
    ef78:	cf 91       	pop	r28
    ef7a:	08 95       	ret

0000ef7c <mkdir>:
    ef7c:	cf 93       	push	r28
    ef7e:	df 93       	push	r29
    ef80:	ec 01       	movw	r28, r24
    ef82:	10 92 c6 1c 	sts	0x1CC6, r1	; 0x801cc6 <errno+0x1>
    ef86:	10 92 c5 1c 	sts	0x1CC5, r1	; 0x801cc5 <errno>
    ef8a:	41 15       	cp	r20, r1
    ef8c:	51 05       	cpc	r21, r1
    ef8e:	61 05       	cpc	r22, r1
    ef90:	71 05       	cpc	r23, r1
    ef92:	41 f4       	brne	.+16     	; 0xefa4 <mkdir+0x28>
    ef94:	ce 01       	movw	r24, r28
    ef96:	0e 94 e6 65 	call	0xcbcc	; 0xcbcc <f_mkdir>
    ef9a:	00 97       	sbiw	r24, 0x00	; 0
    ef9c:	39 f4       	brne	.+14     	; 0xefac <mkdir+0x30>
    ef9e:	80 e0       	ldi	r24, 0x00	; 0
    efa0:	90 e0       	ldi	r25, 0x00	; 0
    efa2:	17 c0       	rjmp	.+46     	; 0xefd2 <mkdir+0x56>
    efa4:	9d df       	rcall	.-198    	; 0xeee0 <chmod>
    efa6:	89 2b       	or	r24, r25
    efa8:	a9 f3       	breq	.-22     	; 0xef94 <mkdir+0x18>
    efaa:	11 c0       	rjmp	.+34     	; 0xefce <mkdir+0x52>
    efac:	84 31       	cpi	r24, 0x14	; 20
    efae:	91 05       	cpc	r25, r1
    efb0:	40 f4       	brcc	.+16     	; 0xefc2 <mkdir+0x46>
    efb2:	fc 01       	movw	r30, r24
    efb4:	ea 55       	subi	r30, 0x5A	; 90
    efb6:	f4 4f       	sbci	r31, 0xF4	; 244
    efb8:	80 81       	ld	r24, Z
    efba:	08 2e       	mov	r0, r24
    efbc:	00 0c       	add	r0, r0
    efbe:	99 0b       	sbc	r25, r25
    efc0:	02 c0       	rjmp	.+4      	; 0xefc6 <mkdir+0x4a>
    efc2:	83 e2       	ldi	r24, 0x23	; 35
    efc4:	90 e0       	ldi	r25, 0x00	; 0
    efc6:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
    efca:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
    efce:	8f ef       	ldi	r24, 0xFF	; 255
    efd0:	9f ef       	ldi	r25, 0xFF	; 255
    efd2:	df 91       	pop	r29
    efd4:	cf 91       	pop	r28
    efd6:	08 95       	ret

0000efd8 <rename>:
    efd8:	10 92 c6 1c 	sts	0x1CC6, r1	; 0x801cc6 <errno+0x1>
    efdc:	10 92 c5 1c 	sts	0x1CC5, r1	; 0x801cc5 <errno>
    efe0:	0e 94 d6 66 	call	0xcdac	; 0xcdac <f_rename>
    efe4:	00 97       	sbiw	r24, 0x00	; 0
    efe6:	a1 f0       	breq	.+40     	; 0xf010 <rename+0x38>
    efe8:	84 31       	cpi	r24, 0x14	; 20
    efea:	91 05       	cpc	r25, r1
    efec:	40 f4       	brcc	.+16     	; 0xeffe <rename+0x26>
    efee:	fc 01       	movw	r30, r24
    eff0:	ea 55       	subi	r30, 0x5A	; 90
    eff2:	f4 4f       	sbci	r31, 0xF4	; 244
    eff4:	80 81       	ld	r24, Z
    eff6:	08 2e       	mov	r0, r24
    eff8:	00 0c       	add	r0, r0
    effa:	99 0b       	sbc	r25, r25
    effc:	02 c0       	rjmp	.+4      	; 0xf002 <rename+0x2a>
    effe:	83 e2       	ldi	r24, 0x23	; 35
    f000:	90 e0       	ldi	r25, 0x00	; 0
    f002:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
    f006:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
    f00a:	8f ef       	ldi	r24, 0xFF	; 255
    f00c:	9f ef       	ldi	r25, 0xFF	; 255
    f00e:	08 95       	ret
    f010:	80 e0       	ldi	r24, 0x00	; 0
    f012:	90 e0       	ldi	r25, 0x00	; 0
    f014:	08 95       	ret

0000f016 <unlink>:
    f016:	10 92 c6 1c 	sts	0x1CC6, r1	; 0x801cc6 <errno+0x1>
    f01a:	10 92 c5 1c 	sts	0x1CC5, r1	; 0x801cc5 <errno>
    f01e:	0e 94 3f 65 	call	0xca7e	; 0xca7e <f_unlink>
    f022:	00 97       	sbiw	r24, 0x00	; 0
    f024:	a1 f0       	breq	.+40     	; 0xf04e <unlink+0x38>
    f026:	84 31       	cpi	r24, 0x14	; 20
    f028:	91 05       	cpc	r25, r1
    f02a:	40 f4       	brcc	.+16     	; 0xf03c <unlink+0x26>
    f02c:	fc 01       	movw	r30, r24
    f02e:	ea 55       	subi	r30, 0x5A	; 90
    f030:	f4 4f       	sbci	r31, 0xF4	; 244
    f032:	80 81       	ld	r24, Z
    f034:	08 2e       	mov	r0, r24
    f036:	00 0c       	add	r0, r0
    f038:	99 0b       	sbc	r25, r25
    f03a:	02 c0       	rjmp	.+4      	; 0xf040 <unlink+0x2a>
    f03c:	83 e2       	ldi	r24, 0x23	; 35
    f03e:	90 e0       	ldi	r25, 0x00	; 0
    f040:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
    f044:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
    f048:	8f ef       	ldi	r24, 0xFF	; 255
    f04a:	9f ef       	ldi	r25, 0xFF	; 255
    f04c:	08 95       	ret
    f04e:	80 e0       	ldi	r24, 0x00	; 0
    f050:	90 e0       	ldi	r25, 0x00	; 0
    f052:	08 95       	ret

0000f054 <rmdir>:
    f054:	e0 cf       	rjmp	.-64     	; 0xf016 <unlink>
    f056:	08 95       	ret

0000f058 <closedir>:
    f058:	0e 94 c8 63 	call	0xc790	; 0xc790 <f_closedir>
    f05c:	00 97       	sbiw	r24, 0x00	; 0
    f05e:	a1 f0       	breq	.+40     	; 0xf088 <closedir+0x30>
    f060:	84 31       	cpi	r24, 0x14	; 20
    f062:	91 05       	cpc	r25, r1
    f064:	40 f4       	brcc	.+16     	; 0xf076 <closedir+0x1e>
    f066:	fc 01       	movw	r30, r24
    f068:	ea 55       	subi	r30, 0x5A	; 90
    f06a:	f4 4f       	sbci	r31, 0xF4	; 244
    f06c:	80 81       	ld	r24, Z
    f06e:	08 2e       	mov	r0, r24
    f070:	00 0c       	add	r0, r0
    f072:	99 0b       	sbc	r25, r25
    f074:	02 c0       	rjmp	.+4      	; 0xf07a <closedir+0x22>
    f076:	83 e2       	ldi	r24, 0x23	; 35
    f078:	90 e0       	ldi	r25, 0x00	; 0
    f07a:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
    f07e:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
    f082:	8f ef       	ldi	r24, 0xFF	; 255
    f084:	9f ef       	ldi	r25, 0xFF	; 255
    f086:	08 95       	ret
    f088:	80 e0       	ldi	r24, 0x00	; 0
    f08a:	90 e0       	ldi	r25, 0x00	; 0
    f08c:	08 95       	ret

0000f08e <opendir>:
    f08e:	bc 01       	movw	r22, r24
    f090:	88 e3       	ldi	r24, 0x38	; 56
    f092:	99 e1       	ldi	r25, 0x19	; 25
    f094:	0e 94 57 63 	call	0xc6ae	; 0xc6ae <f_opendir>
    f098:	00 97       	sbiw	r24, 0x00	; 0
    f09a:	a1 f0       	breq	.+40     	; 0xf0c4 <opendir+0x36>
    f09c:	84 31       	cpi	r24, 0x14	; 20
    f09e:	91 05       	cpc	r25, r1
    f0a0:	40 f4       	brcc	.+16     	; 0xf0b2 <opendir+0x24>
    f0a2:	fc 01       	movw	r30, r24
    f0a4:	ea 55       	subi	r30, 0x5A	; 90
    f0a6:	f4 4f       	sbci	r31, 0xF4	; 244
    f0a8:	80 81       	ld	r24, Z
    f0aa:	08 2e       	mov	r0, r24
    f0ac:	00 0c       	add	r0, r0
    f0ae:	99 0b       	sbc	r25, r25
    f0b0:	02 c0       	rjmp	.+4      	; 0xf0b6 <opendir+0x28>
    f0b2:	83 e2       	ldi	r24, 0x23	; 35
    f0b4:	90 e0       	ldi	r25, 0x00	; 0
    f0b6:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
    f0ba:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
    f0be:	80 e0       	ldi	r24, 0x00	; 0
    f0c0:	90 e0       	ldi	r25, 0x00	; 0
    f0c2:	08 95       	ret
    f0c4:	88 e3       	ldi	r24, 0x38	; 56
    f0c6:	99 e1       	ldi	r25, 0x19	; 25
    f0c8:	08 95       	ret

0000f0ca <readdir>:
    f0ca:	a6 e1       	ldi	r26, 0x16	; 22
    f0cc:	b1 e0       	ldi	r27, 0x01	; 1
    f0ce:	eb e6       	ldi	r30, 0x6B	; 107
    f0d0:	f8 e7       	ldi	r31, 0x78	; 120
    f0d2:	0c 94 0d e7 	jmp	0x1ce1a	; 0x1ce1a <__prologue_saves__+0x1c>
    f0d6:	10 92 38 18 	sts	0x1838, r1	; 0x801838 <_de>
    f0da:	be 01       	movw	r22, r28
    f0dc:	6f 5f       	subi	r22, 0xFF	; 255
    f0de:	7f 4f       	sbci	r23, 0xFF	; 255
    f0e0:	0e 94 dd 63 	call	0xc7ba	; 0xc7ba <f_readdir>
    f0e4:	00 97       	sbiw	r24, 0x00	; 0
    f0e6:	a1 f0       	breq	.+40     	; 0xf110 <readdir+0x46>
    f0e8:	84 31       	cpi	r24, 0x14	; 20
    f0ea:	91 05       	cpc	r25, r1
    f0ec:	40 f4       	brcc	.+16     	; 0xf0fe <readdir+0x34>
    f0ee:	fc 01       	movw	r30, r24
    f0f0:	ea 55       	subi	r30, 0x5A	; 90
    f0f2:	f4 4f       	sbci	r31, 0xF4	; 244
    f0f4:	80 81       	ld	r24, Z
    f0f6:	08 2e       	mov	r0, r24
    f0f8:	00 0c       	add	r0, r0
    f0fa:	99 0b       	sbc	r25, r25
    f0fc:	02 c0       	rjmp	.+4      	; 0xf102 <readdir+0x38>
    f0fe:	83 e2       	ldi	r24, 0x23	; 35
    f100:	90 e0       	ldi	r25, 0x00	; 0
    f102:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
    f106:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
    f10a:	80 e0       	ldi	r24, 0x00	; 0
    f10c:	90 e0       	ldi	r25, 0x00	; 0
    f10e:	16 c0       	rjmp	.+44     	; 0xf13c <readdir+0x72>
    f110:	be 01       	movw	r22, r28
    f112:	69 5e       	subi	r22, 0xE9	; 233
    f114:	7f 4f       	sbci	r23, 0xFF	; 255
    f116:	fb 01       	movw	r30, r22
    f118:	01 90       	ld	r0, Z+
    f11a:	00 20       	and	r0, r0
    f11c:	e9 f7       	brne	.-6      	; 0xf118 <readdir+0x4e>
    f11e:	31 97       	sbiw	r30, 0x01	; 1
    f120:	8f 01       	movw	r16, r30
    f122:	06 1b       	sub	r16, r22
    f124:	17 0b       	sbc	r17, r23
    f126:	a8 01       	movw	r20, r16
    f128:	88 e3       	ldi	r24, 0x38	; 56
    f12a:	98 e1       	ldi	r25, 0x18	; 24
    f12c:	0e 94 7c 31 	call	0x62f8	; 0x62f8 <strncpy>
    f130:	f8 01       	movw	r30, r16
    f132:	e8 5c       	subi	r30, 0xC8	; 200
    f134:	f7 4e       	sbci	r31, 0xE7	; 231
    f136:	10 82       	st	Z, r1
    f138:	88 e3       	ldi	r24, 0x38	; 56
    f13a:	98 e1       	ldi	r25, 0x18	; 24
    f13c:	ca 5e       	subi	r28, 0xEA	; 234
    f13e:	de 4f       	sbci	r29, 0xFE	; 254
    f140:	e4 e0       	ldi	r30, 0x04	; 4
    f142:	0c 94 29 e7 	jmp	0x1ce52	; 0x1ce52 <__epilogue_restores__+0x1c>

0000f146 <perror>:
    f146:	ad b7       	in	r26, 0x3d	; 61
    f148:	be b7       	in	r27, 0x3e	; 62
    f14a:	17 97       	sbiw	r26, 0x07	; 7
    f14c:	0f b6       	in	r0, 0x3f	; 63
    f14e:	f8 94       	cli
    f150:	be bf       	out	0x3e, r27	; 62
    f152:	0f be       	out	0x3f, r0	; 63
    f154:	ad bf       	out	0x3d, r26	; 61
    f156:	20 91 c5 1c 	lds	r18, 0x1CC5	; 0x801cc5 <errno>
    f15a:	30 91 c6 1c 	lds	r19, 0x1CC6	; 0x801cc6 <errno+0x1>
    f15e:	23 32       	cpi	r18, 0x23	; 35
    f160:	31 05       	cpc	r19, r1
    f162:	40 f4       	brcc	.+16     	; 0xf174 <perror+0x2e>
    f164:	22 0f       	add	r18, r18
    f166:	33 1f       	adc	r19, r19
    f168:	f9 01       	movw	r30, r18
    f16a:	ea 5c       	subi	r30, 0xCA	; 202
    f16c:	fe 4f       	sbci	r31, 0xFE	; 254
    f16e:	20 81       	ld	r18, Z
    f170:	31 81       	ldd	r19, Z+1	; 0x01
    f172:	04 c0       	rjmp	.+8      	; 0xf17c <perror+0x36>
    f174:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <sys_errlist+0x46>
    f178:	30 91 7d 01 	lds	r19, 0x017D	; 0x80017d <sys_errlist+0x47>
    f17c:	00 97       	sbiw	r24, 0x00	; 0
    f17e:	99 f0       	breq	.+38     	; 0xf1a6 <perror+0x60>
    f180:	fc 01       	movw	r30, r24
    f182:	40 81       	ld	r20, Z
    f184:	44 23       	and	r20, r20
    f186:	79 f0       	breq	.+30     	; 0xf1a6 <perror+0x60>
    f188:	ed b7       	in	r30, 0x3d	; 61
    f18a:	fe b7       	in	r31, 0x3e	; 62
    f18c:	37 83       	std	Z+7, r19	; 0x07
    f18e:	26 83       	std	Z+6, r18	; 0x06
    f190:	95 83       	std	Z+5, r25	; 0x05
    f192:	84 83       	std	Z+4, r24	; 0x04
    f194:	82 eb       	ldi	r24, 0xB2	; 178
    f196:	9b e0       	ldi	r25, 0x0B	; 11
    f198:	a0 e0       	ldi	r26, 0x00	; 0
    f19a:	81 83       	std	Z+1, r24	; 0x01
    f19c:	92 83       	std	Z+2, r25	; 0x02
    f19e:	a3 83       	std	Z+3, r26	; 0x03
    f1a0:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    f1a4:	0c c0       	rjmp	.+24     	; 0xf1be <perror+0x78>
    f1a6:	ed b7       	in	r30, 0x3d	; 61
    f1a8:	fe b7       	in	r31, 0x3e	; 62
    f1aa:	35 83       	std	Z+5, r19	; 0x05
    f1ac:	24 83       	std	Z+4, r18	; 0x04
    f1ae:	8e ea       	ldi	r24, 0xAE	; 174
    f1b0:	9b e0       	ldi	r25, 0x0B	; 11
    f1b2:	a0 e0       	ldi	r26, 0x00	; 0
    f1b4:	81 83       	std	Z+1, r24	; 0x01
    f1b6:	92 83       	std	Z+2, r25	; 0x02
    f1b8:	a3 83       	std	Z+3, r26	; 0x03
    f1ba:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    f1be:	ad b7       	in	r26, 0x3d	; 61
    f1c0:	be b7       	in	r27, 0x3e	; 62
    f1c2:	17 96       	adiw	r26, 0x07	; 7
    f1c4:	0f b6       	in	r0, 0x3f	; 63
    f1c6:	f8 94       	cli
    f1c8:	be bf       	out	0x3e, r27	; 62
    f1ca:	0f be       	out	0x3f, r0	; 63
    f1cc:	ad bf       	out	0x3d, r26	; 61
    f1ce:	08 95       	ret

0000f1d0 <fdevopen>:
    f1d0:	0f 93       	push	r16
    f1d2:	1f 93       	push	r17
    f1d4:	cf 93       	push	r28
    f1d6:	df 93       	push	r29
    f1d8:	00 97       	sbiw	r24, 0x00	; 0
    f1da:	31 f4       	brne	.+12     	; 0xf1e8 <fdevopen+0x18>
    f1dc:	61 15       	cp	r22, r1
    f1de:	71 05       	cpc	r23, r1
    f1e0:	19 f4       	brne	.+6      	; 0xf1e8 <fdevopen+0x18>
    f1e2:	80 e0       	ldi	r24, 0x00	; 0
    f1e4:	90 e0       	ldi	r25, 0x00	; 0
    f1e6:	3a c0       	rjmp	.+116    	; 0xf25c <fdevopen+0x8c>
    f1e8:	8b 01       	movw	r16, r22
    f1ea:	ec 01       	movw	r28, r24
    f1ec:	6e e0       	ldi	r22, 0x0E	; 14
    f1ee:	70 e0       	ldi	r23, 0x00	; 0
    f1f0:	81 e0       	ldi	r24, 0x01	; 1
    f1f2:	90 e0       	ldi	r25, 0x00	; 0
    f1f4:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <safecalloc>
    f1f8:	fc 01       	movw	r30, r24
    f1fa:	89 2b       	or	r24, r25
    f1fc:	91 f3       	breq	.-28     	; 0xf1e2 <fdevopen+0x12>
    f1fe:	80 e8       	ldi	r24, 0x80	; 128
    f200:	83 83       	std	Z+3, r24	; 0x03
    f202:	01 15       	cp	r16, r1
    f204:	11 05       	cpc	r17, r1
    f206:	71 f0       	breq	.+28     	; 0xf224 <fdevopen+0x54>
    f208:	13 87       	std	Z+11, r17	; 0x0b
    f20a:	02 87       	std	Z+10, r16	; 0x0a
    f20c:	81 e8       	ldi	r24, 0x81	; 129
    f20e:	83 83       	std	Z+3, r24	; 0x03
    f210:	80 91 c7 1c 	lds	r24, 0x1CC7	; 0x801cc7 <__iob>
    f214:	90 91 c8 1c 	lds	r25, 0x1CC8	; 0x801cc8 <__iob+0x1>
    f218:	89 2b       	or	r24, r25
    f21a:	21 f4       	brne	.+8      	; 0xf224 <fdevopen+0x54>
    f21c:	f0 93 c8 1c 	sts	0x1CC8, r31	; 0x801cc8 <__iob+0x1>
    f220:	e0 93 c7 1c 	sts	0x1CC7, r30	; 0x801cc7 <__iob>
    f224:	20 97       	sbiw	r28, 0x00	; 0
    f226:	c9 f0       	breq	.+50     	; 0xf25a <fdevopen+0x8a>
    f228:	d1 87       	std	Z+9, r29	; 0x09
    f22a:	c0 87       	std	Z+8, r28	; 0x08
    f22c:	83 81       	ldd	r24, Z+3	; 0x03
    f22e:	82 60       	ori	r24, 0x02	; 2
    f230:	83 83       	std	Z+3, r24	; 0x03
    f232:	80 91 c9 1c 	lds	r24, 0x1CC9	; 0x801cc9 <__iob+0x2>
    f236:	90 91 ca 1c 	lds	r25, 0x1CCA	; 0x801cca <__iob+0x3>
    f23a:	89 2b       	or	r24, r25
    f23c:	21 f4       	brne	.+8      	; 0xf246 <fdevopen+0x76>
    f23e:	f0 93 ca 1c 	sts	0x1CCA, r31	; 0x801cca <__iob+0x3>
    f242:	e0 93 c9 1c 	sts	0x1CC9, r30	; 0x801cc9 <__iob+0x2>
    f246:	80 91 cb 1c 	lds	r24, 0x1CCB	; 0x801ccb <__iob+0x4>
    f24a:	90 91 cc 1c 	lds	r25, 0x1CCC	; 0x801ccc <__iob+0x5>
    f24e:	89 2b       	or	r24, r25
    f250:	21 f4       	brne	.+8      	; 0xf25a <fdevopen+0x8a>
    f252:	f0 93 cc 1c 	sts	0x1CCC, r31	; 0x801ccc <__iob+0x5>
    f256:	e0 93 cb 1c 	sts	0x1CCB, r30	; 0x801ccb <__iob+0x4>
    f25a:	cf 01       	movw	r24, r30
    f25c:	df 91       	pop	r29
    f25e:	cf 91       	pop	r28
    f260:	1f 91       	pop	r17
    f262:	0f 91       	pop	r16
    f264:	08 95       	ret

0000f266 <fat_time_to_unix>:
    f266:	a6 e1       	ldi	r26, 0x16	; 22
    f268:	b0 e0       	ldi	r27, 0x00	; 0
    f26a:	e9 e3       	ldi	r30, 0x39	; 57
    f26c:	f9 e7       	ldi	r31, 0x79	; 121
    f26e:	0c 94 0f e7 	jmp	0x1ce1e	; 0x1ce1e <__prologue_saves__+0x20>
    f272:	fe 01       	movw	r30, r28
    f274:	31 96       	adiw	r30, 0x01	; 1
    f276:	26 e1       	ldi	r18, 0x16	; 22
    f278:	df 01       	movw	r26, r30
    f27a:	1d 92       	st	X+, r1
    f27c:	2a 95       	dec	r18
    f27e:	e9 f7       	brne	.-6      	; 0xf27a <fat_time_to_unix+0x14>
    f280:	9b 01       	movw	r18, r22
    f282:	22 0f       	add	r18, r18
    f284:	33 1f       	adc	r19, r19
    f286:	2e 73       	andi	r18, 0x3E	; 62
    f288:	33 27       	eor	r19, r19
    f28a:	3a 83       	std	Y+2, r19	; 0x02
    f28c:	29 83       	std	Y+1, r18	; 0x01
    f28e:	9b 01       	movw	r18, r22
    f290:	55 e0       	ldi	r21, 0x05	; 5
    f292:	36 95       	lsr	r19
    f294:	27 95       	ror	r18
    f296:	5a 95       	dec	r21
    f298:	e1 f7       	brne	.-8      	; 0xf292 <fat_time_to_unix+0x2c>
    f29a:	2f 73       	andi	r18, 0x3F	; 63
    f29c:	33 27       	eor	r19, r19
    f29e:	3c 83       	std	Y+4, r19	; 0x04
    f2a0:	2b 83       	std	Y+3, r18	; 0x03
    f2a2:	27 2f       	mov	r18, r23
    f2a4:	26 95       	lsr	r18
    f2a6:	26 95       	lsr	r18
    f2a8:	26 95       	lsr	r18
    f2aa:	2d 83       	std	Y+5, r18	; 0x05
    f2ac:	1e 82       	std	Y+6, r1	; 0x06
    f2ae:	9c 01       	movw	r18, r24
    f2b0:	2f 71       	andi	r18, 0x1F	; 31
    f2b2:	33 27       	eor	r19, r19
    f2b4:	38 87       	std	Y+8, r19	; 0x08
    f2b6:	2f 83       	std	Y+7, r18	; 0x07
    f2b8:	9c 01       	movw	r18, r24
    f2ba:	65 e0       	ldi	r22, 0x05	; 5
    f2bc:	36 95       	lsr	r19
    f2be:	27 95       	ror	r18
    f2c0:	6a 95       	dec	r22
    f2c2:	e1 f7       	brne	.-8      	; 0xf2bc <fat_time_to_unix+0x56>
    f2c4:	2f 70       	andi	r18, 0x0F	; 15
    f2c6:	33 27       	eor	r19, r19
    f2c8:	21 50       	subi	r18, 0x01	; 1
    f2ca:	31 09       	sbc	r19, r1
    f2cc:	3a 87       	std	Y+10, r19	; 0x0a
    f2ce:	29 87       	std	Y+9, r18	; 0x09
    f2d0:	9c 01       	movw	r18, r24
    f2d2:	23 2f       	mov	r18, r19
    f2d4:	33 27       	eor	r19, r19
    f2d6:	26 95       	lsr	r18
    f2d8:	20 5b       	subi	r18, 0xB0	; 176
    f2da:	3f 4f       	sbci	r19, 0xFF	; 255
    f2dc:	3c 87       	std	Y+12, r19	; 0x0c
    f2de:	2b 87       	std	Y+11, r18	; 0x0b
    f2e0:	cf 01       	movw	r24, r30
    f2e2:	0e 94 97 3a 	call	0x752e	; 0x752e <timegm>
    f2e6:	66 96       	adiw	r28, 0x16	; 22
    f2e8:	e2 e0       	ldi	r30, 0x02	; 2
    f2ea:	0c 94 2b e7 	jmp	0x1ce56	; 0x1ce56 <__epilogue_restores__+0x20>

0000f2ee <stat>:
    f2ee:	a6 e1       	ldi	r26, 0x16	; 22
    f2f0:	b1 e0       	ldi	r27, 0x01	; 1
    f2f2:	ed e7       	ldi	r30, 0x7D	; 125
    f2f4:	f9 e7       	ldi	r31, 0x79	; 121
    f2f6:	0c 94 09 e7 	jmp	0x1ce12	; 0x1ce12 <__prologue_saves__+0x14>
    f2fa:	6c 01       	movw	r12, r24
    f2fc:	8b 01       	movw	r16, r22
    f2fe:	10 92 c6 1c 	sts	0x1CC6, r1	; 0x801cc6 <errno+0x1>
    f302:	10 92 c5 1c 	sts	0x1CC5, r1	; 0x801cc5 <errno>
    f306:	6c ef       	ldi	r22, 0xFC	; 252
    f308:	78 e0       	ldi	r23, 0x08	; 8
    f30a:	0e 94 69 32 	call	0x64d2	; 0x64d2 <MATCH>
    f30e:	89 2b       	or	r24, r25
    f310:	01 f1       	breq	.+64     	; 0xf352 <stat+0x64>
    f312:	f8 01       	movw	r30, r16
    f314:	14 a2       	std	Z+36, r1	; 0x24
    f316:	15 a2       	std	Z+37, r1	; 0x25
    f318:	16 a2       	std	Z+38, r1	; 0x26
    f31a:	17 a2       	std	Z+39, r1	; 0x27
    f31c:	10 a6       	std	Z+40, r1	; 0x28
    f31e:	11 a6       	std	Z+41, r1	; 0x29
    f320:	12 a6       	std	Z+42, r1	; 0x2a
    f322:	13 a6       	std	Z+43, r1	; 0x2b
    f324:	14 a6       	std	Z+44, r1	; 0x2c
    f326:	15 a6       	std	Z+45, r1	; 0x2d
    f328:	16 a6       	std	Z+46, r1	; 0x2e
    f32a:	17 a6       	std	Z+47, r1	; 0x2f
    f32c:	11 8a       	std	Z+17, r1	; 0x11
    f32e:	10 8a       	std	Z+16, r1	; 0x10
    f330:	13 8a       	std	Z+19, r1	; 0x13
    f332:	12 8a       	std	Z+18, r1	; 0x12
    f334:	10 8e       	std	Z+24, r1	; 0x18
    f336:	11 8e       	std	Z+25, r1	; 0x19
    f338:	12 8e       	std	Z+26, r1	; 0x1a
    f33a:	13 8e       	std	Z+27, r1	; 0x1b
    f33c:	80 e0       	ldi	r24, 0x00	; 0
    f33e:	90 e4       	ldi	r25, 0x40	; 64
    f340:	a0 e0       	ldi	r26, 0x00	; 0
    f342:	b0 e0       	ldi	r27, 0x00	; 0
    f344:	80 87       	std	Z+8, r24	; 0x08
    f346:	91 87       	std	Z+9, r25	; 0x09
    f348:	a2 87       	std	Z+10, r26	; 0x0a
    f34a:	b3 87       	std	Z+11, r27	; 0x0b
    f34c:	e1 2c       	mov	r14, r1
    f34e:	f1 2c       	mov	r15, r1
    f350:	62 c0       	rjmp	.+196    	; 0xf416 <stat+0x128>
    f352:	66 ea       	ldi	r22, 0xA6	; 166
    f354:	78 e0       	ldi	r23, 0x08	; 8
    f356:	c6 01       	movw	r24, r12
    f358:	0e 94 69 32 	call	0x64d2	; 0x64d2 <MATCH>
    f35c:	89 2b       	or	r24, r25
    f35e:	c9 f6       	brne	.-78     	; 0xf312 <stat+0x24>
    f360:	68 ef       	ldi	r22, 0xF8	; 248
    f362:	72 e1       	ldi	r23, 0x12	; 18
    f364:	c6 01       	movw	r24, r12
    f366:	0e 94 69 32 	call	0x64d2	; 0x64d2 <MATCH>
    f36a:	7c 01       	movw	r14, r24
    f36c:	89 2b       	or	r24, r25
    f36e:	89 f6       	brne	.-94     	; 0xf312 <stat+0x24>
    f370:	be 01       	movw	r22, r28
    f372:	6f 5f       	subi	r22, 0xFF	; 255
    f374:	7f 4f       	sbci	r23, 0xFF	; 255
    f376:	c6 01       	movw	r24, r12
    f378:	0e 94 21 64 	call	0xc842	; 0xc842 <f_stat>
    f37c:	00 97       	sbiw	r24, 0x00	; 0
    f37e:	a9 f0       	breq	.+42     	; 0xf3aa <stat+0xbc>
    f380:	84 31       	cpi	r24, 0x14	; 20
    f382:	91 05       	cpc	r25, r1
    f384:	40 f4       	brcc	.+16     	; 0xf396 <stat+0xa8>
    f386:	fc 01       	movw	r30, r24
    f388:	ea 55       	subi	r30, 0x5A	; 90
    f38a:	f4 4f       	sbci	r31, 0xF4	; 244
    f38c:	80 81       	ld	r24, Z
    f38e:	08 2e       	mov	r0, r24
    f390:	00 0c       	add	r0, r0
    f392:	99 0b       	sbc	r25, r25
    f394:	02 c0       	rjmp	.+4      	; 0xf39a <stat+0xac>
    f396:	83 e2       	ldi	r24, 0x23	; 35
    f398:	90 e0       	ldi	r25, 0x00	; 0
    f39a:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
    f39e:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
    f3a2:	ee 24       	eor	r14, r14
    f3a4:	ea 94       	dec	r14
    f3a6:	fe 2c       	mov	r15, r14
    f3a8:	36 c0       	rjmp	.+108    	; 0xf416 <stat+0x128>
    f3aa:	89 81       	ldd	r24, Y+1	; 0x01
    f3ac:	9a 81       	ldd	r25, Y+2	; 0x02
    f3ae:	ab 81       	ldd	r26, Y+3	; 0x03
    f3b0:	bc 81       	ldd	r27, Y+4	; 0x04
    f3b2:	f8 01       	movw	r30, r16
    f3b4:	80 8f       	std	Z+24, r24	; 0x18
    f3b6:	91 8f       	std	Z+25, r25	; 0x19
    f3b8:	a2 8f       	std	Z+26, r26	; 0x1a
    f3ba:	b3 8f       	std	Z+27, r27	; 0x1b
    f3bc:	6f 81       	ldd	r22, Y+7	; 0x07
    f3be:	78 85       	ldd	r23, Y+8	; 0x08
    f3c0:	8d 81       	ldd	r24, Y+5	; 0x05
    f3c2:	9e 81       	ldd	r25, Y+6	; 0x06
    f3c4:	50 df       	rcall	.-352    	; 0xf266 <fat_time_to_unix>
    f3c6:	f8 01       	movw	r30, r16
    f3c8:	64 a3       	std	Z+36, r22	; 0x24
    f3ca:	75 a3       	std	Z+37, r23	; 0x25
    f3cc:	86 a3       	std	Z+38, r24	; 0x26
    f3ce:	97 a3       	std	Z+39, r25	; 0x27
    f3d0:	60 a7       	std	Z+40, r22	; 0x28
    f3d2:	71 a7       	std	Z+41, r23	; 0x29
    f3d4:	82 a7       	std	Z+42, r24	; 0x2a
    f3d6:	93 a7       	std	Z+43, r25	; 0x2b
    f3d8:	64 a7       	std	Z+44, r22	; 0x2c
    f3da:	75 a7       	std	Z+45, r23	; 0x2d
    f3dc:	86 a7       	std	Z+46, r24	; 0x2e
    f3de:	97 a7       	std	Z+47, r25	; 0x2f
    f3e0:	29 85       	ldd	r18, Y+9	; 0x09
    f3e2:	20 fd       	sbrc	r18, 0
    f3e4:	03 c0       	rjmp	.+6      	; 0xf3ec <stat+0xfe>
    f3e6:	8f ef       	ldi	r24, 0xFF	; 255
    f3e8:	91 e0       	ldi	r25, 0x01	; 1
    f3ea:	02 c0       	rjmp	.+4      	; 0xf3f0 <stat+0x102>
    f3ec:	8d e6       	ldi	r24, 0x6D	; 109
    f3ee:	91 e0       	ldi	r25, 0x01	; 1
    f3f0:	48 ee       	ldi	r20, 0xE8	; 232
    f3f2:	53 e0       	ldi	r21, 0x03	; 3
    f3f4:	f8 01       	movw	r30, r16
    f3f6:	51 8b       	std	Z+17, r21	; 0x11
    f3f8:	40 8b       	std	Z+16, r20	; 0x10
    f3fa:	53 8b       	std	Z+19, r21	; 0x13
    f3fc:	42 8b       	std	Z+18, r20	; 0x12
    f3fe:	24 ff       	sbrs	r18, 4
    f400:	02 c0       	rjmp	.+4      	; 0xf406 <stat+0x118>
    f402:	90 64       	ori	r25, 0x40	; 64
    f404:	01 c0       	rjmp	.+2      	; 0xf408 <stat+0x11a>
    f406:	90 68       	ori	r25, 0x80	; 128
    f408:	a0 e0       	ldi	r26, 0x00	; 0
    f40a:	b0 e0       	ldi	r27, 0x00	; 0
    f40c:	f8 01       	movw	r30, r16
    f40e:	80 87       	std	Z+8, r24	; 0x08
    f410:	91 87       	std	Z+9, r25	; 0x09
    f412:	a2 87       	std	Z+10, r26	; 0x0a
    f414:	b3 87       	std	Z+11, r27	; 0x0b
    f416:	c7 01       	movw	r24, r14
    f418:	ca 5e       	subi	r28, 0xEA	; 234
    f41a:	de 4f       	sbci	r29, 0xFE	; 254
    f41c:	e8 e0       	ldi	r30, 0x08	; 8
    f41e:	0c 94 25 e7 	jmp	0x1ce4a	; 0x1ce4a <__epilogue_restores__+0x14>

0000f422 <unix_time_to_fat>:
    f422:	a4 e0       	ldi	r26, 0x04	; 4
    f424:	b0 e0       	ldi	r27, 0x00	; 0
    f426:	e7 e1       	ldi	r30, 0x17	; 23
    f428:	fa e7       	ldi	r31, 0x7A	; 122
    f42a:	0c 94 0b e7 	jmp	0x1ce16	; 0x1ce16 <__prologue_saves__+0x18>
    f42e:	69 83       	std	Y+1, r22	; 0x01
    f430:	7a 83       	std	Y+2, r23	; 0x02
    f432:	8b 83       	std	Y+3, r24	; 0x03
    f434:	9c 83       	std	Y+4, r25	; 0x04
    f436:	7a 01       	movw	r14, r20
    f438:	89 01       	movw	r16, r18
    f43a:	ce 01       	movw	r24, r28
    f43c:	01 96       	adiw	r24, 0x01	; 1
    f43e:	0e 94 d8 37 	call	0x6fb0	; 0x6fb0 <gmtime>
    f442:	fc 01       	movw	r30, r24
    f444:	22 85       	ldd	r18, Z+10	; 0x0a
    f446:	33 85       	ldd	r19, Z+11	; 0x0b
    f448:	20 55       	subi	r18, 0x50	; 80
    f44a:	31 09       	sbc	r19, r1
    f44c:	c9 01       	movw	r24, r18
    f44e:	98 2f       	mov	r25, r24
    f450:	88 27       	eor	r24, r24
    f452:	99 0f       	add	r25, r25
    f454:	20 85       	ldd	r18, Z+8	; 0x08
    f456:	31 85       	ldd	r19, Z+9	; 0x09
    f458:	2f 5f       	subi	r18, 0xFF	; 255
    f45a:	3f 4f       	sbci	r19, 0xFF	; 255
    f45c:	45 e0       	ldi	r20, 0x05	; 5
    f45e:	22 0f       	add	r18, r18
    f460:	33 1f       	adc	r19, r19
    f462:	4a 95       	dec	r20
    f464:	e1 f7       	brne	.-8      	; 0xf45e <unix_time_to_fat+0x3c>
    f466:	28 2b       	or	r18, r24
    f468:	39 2b       	or	r19, r25
    f46a:	86 81       	ldd	r24, Z+6	; 0x06
    f46c:	97 81       	ldd	r25, Z+7	; 0x07
    f46e:	28 2b       	or	r18, r24
    f470:	39 2b       	or	r19, r25
    f472:	d7 01       	movw	r26, r14
    f474:	2d 93       	st	X+, r18
    f476:	3c 93       	st	X, r19
    f478:	84 81       	ldd	r24, Z+4	; 0x04
    f47a:	20 e0       	ldi	r18, 0x00	; 0
    f47c:	30 e0       	ldi	r19, 0x00	; 0
    f47e:	38 2f       	mov	r19, r24
    f480:	33 0f       	add	r19, r19
    f482:	33 0f       	add	r19, r19
    f484:	33 0f       	add	r19, r19
    f486:	82 81       	ldd	r24, Z+2	; 0x02
    f488:	93 81       	ldd	r25, Z+3	; 0x03
    f48a:	55 e0       	ldi	r21, 0x05	; 5
    f48c:	88 0f       	add	r24, r24
    f48e:	99 1f       	adc	r25, r25
    f490:	5a 95       	dec	r21
    f492:	e1 f7       	brne	.-8      	; 0xf48c <unix_time_to_fat+0x6a>
    f494:	82 2b       	or	r24, r18
    f496:	93 2b       	or	r25, r19
    f498:	20 81       	ld	r18, Z
    f49a:	31 81       	ldd	r19, Z+1	; 0x01
    f49c:	36 95       	lsr	r19
    f49e:	27 95       	ror	r18
    f4a0:	82 2b       	or	r24, r18
    f4a2:	93 2b       	or	r25, r19
    f4a4:	f8 01       	movw	r30, r16
    f4a6:	91 83       	std	Z+1, r25	; 0x01
    f4a8:	80 83       	st	Z, r24
    f4aa:	24 96       	adiw	r28, 0x04	; 4
    f4ac:	e6 e0       	ldi	r30, 0x06	; 6
    f4ae:	0c 94 27 e7 	jmp	0x1ce4e	; 0x1ce4e <__epilogue_restores__+0x18>

0000f4b2 <utime>:
    f4b2:	aa e1       	ldi	r26, 0x1A	; 26
    f4b4:	b1 e0       	ldi	r27, 0x01	; 1
    f4b6:	ef e5       	ldi	r30, 0x5F	; 95
    f4b8:	fa e7       	ldi	r31, 0x7A	; 122
    f4ba:	0c 94 0d e7 	jmp	0x1ce1a	; 0x1ce1a <__prologue_saves__+0x1c>
    f4be:	8c 01       	movw	r16, r24
    f4c0:	61 15       	cp	r22, r1
    f4c2:	71 05       	cpc	r23, r1
    f4c4:	31 f0       	breq	.+12     	; 0xf4d2 <utime+0x20>
    f4c6:	fb 01       	movw	r30, r22
    f4c8:	64 81       	ldd	r22, Z+4	; 0x04
    f4ca:	75 81       	ldd	r23, Z+5	; 0x05
    f4cc:	86 81       	ldd	r24, Z+6	; 0x06
    f4ce:	97 81       	ldd	r25, Z+7	; 0x07
    f4d0:	04 c0       	rjmp	.+8      	; 0xf4da <utime+0x28>
    f4d2:	80 e0       	ldi	r24, 0x00	; 0
    f4d4:	90 e0       	ldi	r25, 0x00	; 0
    f4d6:	0e 94 32 38 	call	0x7064	; 0x7064 <time>
    f4da:	9e 01       	movw	r18, r28
    f4dc:	29 5e       	subi	r18, 0xE9	; 233
    f4de:	3e 4f       	sbci	r19, 0xFE	; 254
    f4e0:	ae 01       	movw	r20, r28
    f4e2:	47 5e       	subi	r20, 0xE7	; 231
    f4e4:	5e 4f       	sbci	r21, 0xFE	; 254
    f4e6:	9d df       	rcall	.-198    	; 0xf422 <unix_time_to_fat>
    f4e8:	c7 5e       	subi	r28, 0xE7	; 231
    f4ea:	de 4f       	sbci	r29, 0xFE	; 254
    f4ec:	88 81       	ld	r24, Y
    f4ee:	99 81       	ldd	r25, Y+1	; 0x01
    f4f0:	c9 51       	subi	r28, 0x19	; 25
    f4f2:	d1 40       	sbci	r29, 0x01	; 1
    f4f4:	9e 83       	std	Y+6, r25	; 0x06
    f4f6:	8d 83       	std	Y+5, r24	; 0x05
    f4f8:	c9 5e       	subi	r28, 0xE9	; 233
    f4fa:	de 4f       	sbci	r29, 0xFE	; 254
    f4fc:	88 81       	ld	r24, Y
    f4fe:	99 81       	ldd	r25, Y+1	; 0x01
    f500:	c7 51       	subi	r28, 0x17	; 23
    f502:	d1 40       	sbci	r29, 0x01	; 1
    f504:	98 87       	std	Y+8, r25	; 0x08
    f506:	8f 83       	std	Y+7, r24	; 0x07
    f508:	be 01       	movw	r22, r28
    f50a:	6f 5f       	subi	r22, 0xFF	; 255
    f50c:	7f 4f       	sbci	r23, 0xFF	; 255
    f50e:	c8 01       	movw	r24, r16
    f510:	0e 94 38 68 	call	0xd070	; 0xd070 <f_utime>
    f514:	84 31       	cpi	r24, 0x14	; 20
    f516:	91 05       	cpc	r25, r1
    f518:	40 f4       	brcc	.+16     	; 0xf52a <utime+0x78>
    f51a:	fc 01       	movw	r30, r24
    f51c:	ea 55       	subi	r30, 0x5A	; 90
    f51e:	f4 4f       	sbci	r31, 0xF4	; 244
    f520:	80 81       	ld	r24, Z
    f522:	08 2e       	mov	r0, r24
    f524:	00 0c       	add	r0, r0
    f526:	99 0b       	sbc	r25, r25
    f528:	02 c0       	rjmp	.+4      	; 0xf52e <utime+0x7c>
    f52a:	83 e2       	ldi	r24, 0x23	; 35
    f52c:	90 e0       	ldi	r25, 0x00	; 0
    f52e:	c6 5e       	subi	r28, 0xE6	; 230
    f530:	de 4f       	sbci	r29, 0xFE	; 254
    f532:	e4 e0       	ldi	r30, 0x04	; 4
    f534:	0c 94 29 e7 	jmp	0x1ce52	; 0x1ce52 <__epilogue_restores__+0x1c>

0000f538 <fileno_to_fatfs>:
    f538:	83 30       	cpi	r24, 0x03	; 3
    f53a:	91 05       	cpc	r25, r1
    f53c:	48 f4       	brcc	.+18     	; 0xf550 <fileno_to_fatfs+0x18>
    f53e:	89 e0       	ldi	r24, 0x09	; 9
    f540:	90 e0       	ldi	r25, 0x00	; 0
    f542:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
    f546:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
    f54a:	80 e0       	ldi	r24, 0x00	; 0
    f54c:	90 e0       	ldi	r25, 0x00	; 0
    f54e:	08 95       	ret
    f550:	60 dc       	rcall	.-1856   	; 0xee12 <fileno_to_stream>
    f552:	00 97       	sbiw	r24, 0x00	; 0
    f554:	d1 f3       	breq	.-12     	; 0xf54a <fileno_to_fatfs+0x12>
    f556:	fc 01       	movw	r30, r24
    f558:	84 85       	ldd	r24, Z+12	; 0x0c
    f55a:	95 85       	ldd	r25, Z+13	; 0x0d
    f55c:	00 97       	sbiw	r24, 0x00	; 0
    f55e:	79 f3       	breq	.-34     	; 0xf53e <fileno_to_fatfs+0x6>
    f560:	08 95       	ret

0000f562 <ftell>:
    f562:	10 92 c6 1c 	sts	0x1CC6, r1	; 0x801cc6 <errno+0x1>
    f566:	10 92 c5 1c 	sts	0x1CC5, r1	; 0x801cc5 <errno>
    f56a:	37 dc       	rcall	.-1938   	; 0xedda <fileno>
    f56c:	83 30       	cpi	r24, 0x03	; 3
    f56e:	91 05       	cpc	r25, r1
    f570:	48 f0       	brcs	.+18     	; 0xf584 <ftell+0x22>
    f572:	e2 df       	rcall	.-60     	; 0xf538 <fileno_to_fatfs>
    f574:	00 97       	sbiw	r24, 0x00	; 0
    f576:	51 f4       	brne	.+20     	; 0xf58c <ftell+0x2a>
    f578:	89 e0       	ldi	r24, 0x09	; 9
    f57a:	90 e0       	ldi	r25, 0x00	; 0
    f57c:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
    f580:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
    f584:	6f ef       	ldi	r22, 0xFF	; 255
    f586:	7f ef       	ldi	r23, 0xFF	; 255
    f588:	cb 01       	movw	r24, r22
    f58a:	08 95       	ret
    f58c:	fc 01       	movw	r30, r24
    f58e:	60 89       	ldd	r22, Z+16	; 0x10
    f590:	71 89       	ldd	r23, Z+17	; 0x11
    f592:	82 89       	ldd	r24, Z+18	; 0x12
    f594:	93 89       	ldd	r25, Z+19	; 0x13
    f596:	08 95       	ret

0000f598 <lseek>:
    f598:	a3 e0       	ldi	r26, 0x03	; 3
    f59a:	b0 e0       	ldi	r27, 0x00	; 0
    f59c:	e2 ed       	ldi	r30, 0xD2	; 210
    f59e:	fa e7       	ldi	r31, 0x7A	; 122
    f5a0:	0c 94 07 e7 	jmp	0x1ce0e	; 0x1ce0e <__prologue_saves__+0x10>
    f5a4:	5c 01       	movw	r10, r24
    f5a6:	6a 01       	movw	r12, r20
    f5a8:	7b 01       	movw	r14, r22
    f5aa:	89 01       	movw	r16, r18
    f5ac:	10 92 c6 1c 	sts	0x1CC6, r1	; 0x801cc6 <errno+0x1>
    f5b0:	10 92 c5 1c 	sts	0x1CC5, r1	; 0x801cc5 <errno>
    f5b4:	c1 df       	rcall	.-126    	; 0xf538 <fileno_to_fatfs>
    f5b6:	ec 01       	movw	r28, r24
    f5b8:	89 2b       	or	r24, r25
    f5ba:	19 f4       	brne	.+6      	; 0xf5c2 <lseek+0x2a>
    f5bc:	88 e1       	ldi	r24, 0x18	; 24
    f5be:	90 e0       	ldi	r25, 0x00	; 0
    f5c0:	26 c0       	rjmp	.+76     	; 0xf60e <lseek+0x76>
    f5c2:	83 e0       	ldi	r24, 0x03	; 3
    f5c4:	a8 16       	cp	r10, r24
    f5c6:	b1 04       	cpc	r11, r1
    f5c8:	d0 f1       	brcs	.+116    	; 0xf63e <lseek+0xa6>
    f5ca:	c5 01       	movw	r24, r10
    f5cc:	22 dc       	rcall	.-1980   	; 0xee12 <fileno_to_stream>
    f5ce:	fc 01       	movw	r30, r24
    f5d0:	93 81       	ldd	r25, Z+3	; 0x03
    f5d2:	90 64       	ori	r25, 0x40	; 64
    f5d4:	93 83       	std	Z+3, r25	; 0x03
    f5d6:	02 30       	cpi	r16, 0x02	; 2
    f5d8:	11 05       	cpc	r17, r1
    f5da:	a9 f5       	brne	.+106    	; 0xf646 <lseek+0xae>
    f5dc:	8a 85       	ldd	r24, Y+10	; 0x0a
    f5de:	9b 85       	ldd	r25, Y+11	; 0x0b
    f5e0:	ac 85       	ldd	r26, Y+12	; 0x0c
    f5e2:	bd 85       	ldd	r27, Y+13	; 0x0d
    f5e4:	c8 0e       	add	r12, r24
    f5e6:	d9 1e       	adc	r13, r25
    f5e8:	ea 1e       	adc	r14, r26
    f5ea:	fb 1e       	adc	r15, r27
    f5ec:	b7 01       	movw	r22, r14
    f5ee:	a6 01       	movw	r20, r12
    f5f0:	ce 01       	movw	r24, r28
    f5f2:	0e 94 9c 60 	call	0xc138	; 0xc138 <f_lseek>
    f5f6:	00 97       	sbiw	r24, 0x00	; 0
    f5f8:	79 f0       	breq	.+30     	; 0xf618 <lseek+0x80>
    f5fa:	84 31       	cpi	r24, 0x14	; 20
    f5fc:	91 05       	cpc	r25, r1
    f5fe:	58 f5       	brcc	.+86     	; 0xf656 <lseek+0xbe>
    f600:	fc 01       	movw	r30, r24
    f602:	ea 55       	subi	r30, 0x5A	; 90
    f604:	f4 4f       	sbci	r31, 0xF4	; 244
    f606:	80 81       	ld	r24, Z
    f608:	08 2e       	mov	r0, r24
    f60a:	00 0c       	add	r0, r0
    f60c:	99 0b       	sbc	r25, r25
    f60e:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
    f612:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
    f616:	13 c0       	rjmp	.+38     	; 0xf63e <lseek+0xa6>
    f618:	68 89       	ldd	r22, Y+16	; 0x10
    f61a:	79 89       	ldd	r23, Y+17	; 0x11
    f61c:	8a 89       	ldd	r24, Y+18	; 0x12
    f61e:	9b 89       	ldd	r25, Y+19	; 0x13
    f620:	c6 16       	cp	r12, r22
    f622:	d7 06       	cpc	r13, r23
    f624:	e8 06       	cpc	r14, r24
    f626:	f9 06       	cpc	r15, r25
    f628:	c9 f0       	breq	.+50     	; 0xf65c <lseek+0xc4>
    f62a:	8a eb       	ldi	r24, 0xBA	; 186
    f62c:	9b e0       	ldi	r25, 0x0B	; 11
    f62e:	a0 e0       	ldi	r26, 0x00	; 0
    f630:	ed b7       	in	r30, 0x3d	; 61
    f632:	fe b7       	in	r31, 0x3e	; 62
    f634:	81 83       	std	Z+1, r24	; 0x01
    f636:	92 83       	std	Z+2, r25	; 0x02
    f638:	a3 83       	std	Z+3, r26	; 0x03
    f63a:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    f63e:	6f ef       	ldi	r22, 0xFF	; 255
    f640:	7f ef       	ldi	r23, 0xFF	; 255
    f642:	cb 01       	movw	r24, r22
    f644:	0b c0       	rjmp	.+22     	; 0xf65c <lseek+0xc4>
    f646:	01 30       	cpi	r16, 0x01	; 1
    f648:	11 05       	cpc	r17, r1
    f64a:	81 f6       	brne	.-96     	; 0xf5ec <lseek+0x54>
    f64c:	88 89       	ldd	r24, Y+16	; 0x10
    f64e:	99 89       	ldd	r25, Y+17	; 0x11
    f650:	aa 89       	ldd	r26, Y+18	; 0x12
    f652:	bb 89       	ldd	r27, Y+19	; 0x13
    f654:	c7 cf       	rjmp	.-114    	; 0xf5e4 <lseek+0x4c>
    f656:	83 e2       	ldi	r24, 0x23	; 35
    f658:	90 e0       	ldi	r25, 0x00	; 0
    f65a:	d9 cf       	rjmp	.-78     	; 0xf60e <lseek+0x76>
    f65c:	cd b7       	in	r28, 0x3d	; 61
    f65e:	de b7       	in	r29, 0x3e	; 62
    f660:	23 96       	adiw	r28, 0x03	; 3
    f662:	ea e0       	ldi	r30, 0x0A	; 10
    f664:	0c 94 23 e7 	jmp	0x1ce46	; 0x1ce46 <__epilogue_restores__+0x10>

0000f668 <fseek>:
    f668:	cf 92       	push	r12
    f66a:	df 92       	push	r13
    f66c:	ef 92       	push	r14
    f66e:	ff 92       	push	r15
    f670:	cf 93       	push	r28
    f672:	df 93       	push	r29
    f674:	6a 01       	movw	r12, r20
    f676:	7b 01       	movw	r14, r22
    f678:	e9 01       	movw	r28, r18
    f67a:	af db       	rcall	.-2210   	; 0xedda <fileno>
    f67c:	97 fd       	sbrc	r25, 7
    f67e:	12 c0       	rjmp	.+36     	; 0xf6a4 <fseek+0x3c>
    f680:	9e 01       	movw	r18, r28
    f682:	b7 01       	movw	r22, r14
    f684:	a6 01       	movw	r20, r12
    f686:	88 df       	rcall	.-240    	; 0xf598 <lseek>
    f688:	21 e0       	ldi	r18, 0x01	; 1
    f68a:	30 e0       	ldi	r19, 0x00	; 0
    f68c:	6f 3f       	cpi	r22, 0xFF	; 255
    f68e:	7f 4f       	sbci	r23, 0xFF	; 255
    f690:	8f 4f       	sbci	r24, 0xFF	; 255
    f692:	9f 4f       	sbci	r25, 0xFF	; 255
    f694:	11 f0       	breq	.+4      	; 0xf69a <fseek+0x32>
    f696:	20 e0       	ldi	r18, 0x00	; 0
    f698:	30 e0       	ldi	r19, 0x00	; 0
    f69a:	88 27       	eor	r24, r24
    f69c:	99 27       	eor	r25, r25
    f69e:	82 1b       	sub	r24, r18
    f6a0:	93 0b       	sbc	r25, r19
    f6a2:	02 c0       	rjmp	.+4      	; 0xf6a8 <fseek+0x40>
    f6a4:	8f ef       	ldi	r24, 0xFF	; 255
    f6a6:	9f ef       	ldi	r25, 0xFF	; 255
    f6a8:	df 91       	pop	r29
    f6aa:	cf 91       	pop	r28
    f6ac:	ff 90       	pop	r15
    f6ae:	ef 90       	pop	r14
    f6b0:	df 90       	pop	r13
    f6b2:	cf 90       	pop	r12
    f6b4:	08 95       	ret

0000f6b6 <read>:
///
/// @return count on sucess.
/// @return -1 on error with errno set.
MEMSPACE
ssize_t read(int fd, const void *buf, size_t count)
{
    f6b6:	a2 e0       	ldi	r26, 0x02	; 2
    f6b8:	b0 e0       	ldi	r27, 0x00	; 0
    f6ba:	e1 e6       	ldi	r30, 0x61	; 97
    f6bc:	fb e7       	ldi	r31, 0x7B	; 123
    f6be:	0c 94 07 e7 	jmp	0x1ce0e	; 0x1ce0e <__prologue_saves__+0x10>
    f6c2:	5c 01       	movw	r10, r24
    f6c4:	8b 01       	movw	r16, r22
    f6c6:	6a 01       	movw	r12, r20
    int ret;
    FIL *fh;
    FILE *stream;

//FIXME
    *(char *) buf = 0;
    f6c8:	fb 01       	movw	r30, r22
    f6ca:	10 82       	st	Z, r1

    errno = 0;
    f6cc:	10 92 c6 1c 	sts	0x1CC6, r1	; 0x801cc6 <errno+0x1>
    f6d0:	10 92 c5 1c 	sts	0x1CC5, r1	; 0x801cc5 <errno>

// TTY read function
// FIXME should we really be blocking ???
    stream = fileno_to_stream(fd);
    f6d4:	9e db       	rcall	.-2244   	; 0xee12 <fileno_to_stream>
    f6d6:	7c 01       	movw	r14, r24
    if(stream == stdin)
    f6d8:	80 91 c7 1c 	lds	r24, 0x1CC7	; 0x801cc7 <__iob>
    f6dc:	90 91 c8 1c 	lds	r25, 0x1CC8	; 0x801cc8 <__iob+0x1>
    f6e0:	e8 16       	cp	r14, r24
    f6e2:	f9 06       	cpc	r15, r25
    f6e4:	c9 f4       	brne	.+50     	; 0xf718 <read+0x62>
    {
        char *ptr = (char *) buf;
// ungetc is undefined for read
        stream->flags |= __SUNGET;
    f6e6:	f7 01       	movw	r30, r14
    f6e8:	83 81       	ldd	r24, Z+3	; 0x03
    f6ea:	80 64       	ori	r24, 0x40	; 64
    f6ec:	83 83       	std	Z+3, r24	; 0x03
        size = 0;
    f6ee:	1a 82       	std	Y+2, r1	; 0x02
    f6f0:	19 82       	std	Y+1, r1	; 0x01
    f6f2:	c0 0e       	add	r12, r16
    f6f4:	d1 1e       	adc	r13, r17
        while(count--)
    f6f6:	0c 15       	cp	r16, r12
    f6f8:	1d 05       	cpc	r17, r13
    f6fa:	09 f4       	brne	.+2      	; 0xf6fe <read+0x48>
    f6fc:	3d c0       	rjmp	.+122    	; 0xf778 <read+0xc2>
        {
            ret = fgetc(stream);
    f6fe:	c7 01       	movw	r24, r14
    f700:	48 da       	rcall	.-2928   	; 0xeb92 <fgetc>
            if(ret < 0)
    f702:	97 fd       	sbrc	r25, 7
    f704:	39 c0       	rjmp	.+114    	; 0xf778 <read+0xc2>
                break;

            *ptr++ = ret;
    f706:	f8 01       	movw	r30, r16
    f708:	81 93       	st	Z+, r24
    f70a:	8f 01       	movw	r16, r30
            ++size;
    f70c:	89 81       	ldd	r24, Y+1	; 0x01
    f70e:	9a 81       	ldd	r25, Y+2	; 0x02
    f710:	01 96       	adiw	r24, 0x01	; 1
    f712:	9a 83       	std	Y+2, r25	; 0x02
    f714:	89 83       	std	Y+1, r24	; 0x01
    f716:	ef cf       	rjmp	.-34     	; 0xf6f6 <read+0x40>
        }
        return(size);
    }
    if(stream == stdout || stream == stderr)
    f718:	80 91 c9 1c 	lds	r24, 0x1CC9	; 0x801cc9 <__iob+0x2>
    f71c:	90 91 ca 1c 	lds	r25, 0x1CCA	; 0x801cca <__iob+0x3>
    f720:	e8 16       	cp	r14, r24
    f722:	f9 06       	cpc	r15, r25
    f724:	71 f1       	breq	.+92     	; 0xf782 <read+0xcc>
    f726:	80 91 cb 1c 	lds	r24, 0x1CCB	; 0x801ccb <__iob+0x4>
    f72a:	90 91 cc 1c 	lds	r25, 0x1CCC	; 0x801ccc <__iob+0x5>
    f72e:	e8 16       	cp	r14, r24
    f730:	f9 06       	cpc	r15, r25
    {
        return(-1);
    }

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    f732:	39 f1       	breq	.+78     	; 0xf782 <read+0xcc>
    f734:	c5 01       	movw	r24, r10
    f736:	00 df       	rcall	.-512    	; 0xf538 <fileno_to_fatfs>
    if ( fh == NULL )
    f738:	00 97       	sbiw	r24, 0x00	; 0
    f73a:	19 f4       	brne	.+6      	; 0xf742 <read+0x8c>
    {
        errno = EBADF;
    f73c:	89 e0       	ldi	r24, 0x09	; 9
    f73e:	90 e0       	ldi	r25, 0x00	; 0
    f740:	16 c0       	rjmp	.+44     	; 0xf76e <read+0xb8>
        return(-1);
    }

    res = f_read(fh, (void *) buf, bytes, &size);
    f742:	9e 01       	movw	r18, r28
    f744:	2f 5f       	subi	r18, 0xFF	; 255
    f746:	3f 4f       	sbci	r19, 0xFF	; 255
    f748:	a6 01       	movw	r20, r12
    f74a:	b8 01       	movw	r22, r16
    f74c:	0e 94 90 5b 	call	0xb720	; 0xb720 <f_read>
    if(res != FR_OK)
    f750:	00 97       	sbiw	r24, 0x00	; 0
    f752:	91 f0       	breq	.+36     	; 0xf778 <read+0xc2>
    f754:	84 31       	cpi	r24, 0x14	; 20
    f756:	91 05       	cpc	r25, r1
    f758:	40 f4       	brcc	.+16     	; 0xf76a <read+0xb4>
    f75a:	fc 01       	movw	r30, r24
    f75c:	ea 55       	subi	r30, 0x5A	; 90
    f75e:	f4 4f       	sbci	r31, 0xF4	; 244
    f760:	80 81       	ld	r24, Z
    f762:	08 2e       	mov	r0, r24
    f764:	00 0c       	add	r0, r0
    f766:	99 0b       	sbc	r25, r25
    f768:	02 c0       	rjmp	.+4      	; 0xf76e <read+0xb8>
    f76a:	83 e2       	ldi	r24, 0x23	; 35
    f76c:	90 e0       	ldi	r25, 0x00	; 0
    {
        errno = fatfs_to_errno(res);
    f76e:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
    f772:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
    f776:	05 c0       	rjmp	.+10     	; 0xf782 <read+0xcc>
        return(-1);
    }
    return ((ssize_t) size);
    f778:	69 81       	ldd	r22, Y+1	; 0x01
    f77a:	7a 81       	ldd	r23, Y+2	; 0x02
    f77c:	80 e0       	ldi	r24, 0x00	; 0
    f77e:	90 e0       	ldi	r25, 0x00	; 0
    f780:	03 c0       	rjmp	.+6      	; 0xf788 <read+0xd2>
        }
        return(size);
    }
    if(stream == stdout || stream == stderr)
    {
        return(-1);
    f782:	6f ef       	ldi	r22, 0xFF	; 255
    f784:	7f ef       	ldi	r23, 0xFF	; 255
    f786:	cb 01       	movw	r24, r22
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return ((ssize_t) size);
}
    f788:	22 96       	adiw	r28, 0x02	; 2
    f78a:	ea e0       	ldi	r30, 0x0A	; 10
    f78c:	0c 94 23 e7 	jmp	0x1ce46	; 0x1ce46 <__epilogue_restores__+0x10>

0000f790 <fread>:
///
/// @return count on sucess.
/// @return 0 or < size on error with errno set.
MEMSPACE
size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream)
{
    f790:	0f 93       	push	r16
    f792:	1f 93       	push	r17
    f794:	cf 93       	push	r28
    f796:	df 93       	push	r29
    f798:	ec 01       	movw	r28, r24
    f79a:	c9 01       	movw	r24, r18
    size_t count = size * nmemb;
    f79c:	64 9f       	mul	r22, r20
    f79e:	80 01       	movw	r16, r0
    f7a0:	65 9f       	mul	r22, r21
    f7a2:	10 0d       	add	r17, r0
    f7a4:	74 9f       	mul	r23, r20
    f7a6:	10 0d       	add	r17, r0
    f7a8:	11 24       	eor	r1, r1
    int fn = fileno(stream);
    f7aa:	17 db       	rcall	.-2514   	; 0xedda <fileno>
    ssize_t ret;

// read() checks for fn out of bounds
    ret = read(fn, ptr, count);
    f7ac:	a8 01       	movw	r20, r16
    f7ae:	be 01       	movw	r22, r28
    f7b0:	82 df       	rcall	.-252    	; 0xf6b6 <read>
    if(ret < 0)
    f7b2:	97 fd       	sbrc	r25, 7
    f7b4:	02 c0       	rjmp	.+4      	; 0xf7ba <fread+0x2a>
        return(0);

    return((size_t) ret);
    f7b6:	cb 01       	movw	r24, r22
    f7b8:	02 c0       	rjmp	.+4      	; 0xf7be <fread+0x2e>
    ssize_t ret;

// read() checks for fn out of bounds
    ret = read(fn, ptr, count);
    if(ret < 0)
        return(0);
    f7ba:	80 e0       	ldi	r24, 0x00	; 0
    f7bc:	90 e0       	ldi	r25, 0x00	; 0

    return((size_t) ret);
}
    f7be:	df 91       	pop	r29
    f7c0:	cf 91       	pop	r28
    f7c2:	1f 91       	pop	r17
    f7c4:	0f 91       	pop	r16
    f7c6:	08 95       	ret

0000f7c8 <syncfs>:
/// @param[in] fd: POSIX fileno to sync.
/// @return 0.
/// @return -1 on error witrh errno set.
MEMSPACE
int syncfs(int fd)
{
    f7c8:	cf 93       	push	r28
    f7ca:	df 93       	push	r29
    FIL *fh;
    FRESULT res;
    FILE *stream;

    errno = 0;
    f7cc:	10 92 c6 1c 	sts	0x1CC6, r1	; 0x801cc6 <errno+0x1>
    f7d0:	10 92 c5 1c 	sts	0x1CC5, r1	; 0x801cc5 <errno>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f7d4:	83 30       	cpi	r24, 0x03	; 3
    f7d6:	91 05       	cpc	r25, r1
    f7d8:	18 f4       	brcc	.+6      	; 0xf7e0 <syncfs+0x18>

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    if(fh == NULL)
    {
        errno = EBADF;
    f7da:	89 e0       	ldi	r24, 0x09	; 9
    f7dc:	90 e0       	ldi	r25, 0x00	; 0
    f7de:	18 c0       	rjmp	.+48     	; 0xf810 <syncfs+0x48>
    f7e0:	ec 01       	movw	r28, r24
    if(isatty(fd))
    {
        errno = EBADF;
        return(-1);
    }
    stream = fileno_to_stream(fd);
    f7e2:	17 db       	rcall	.-2514   	; 0xee12 <fileno_to_stream>
    f7e4:	fc 01       	movw	r30, r24
// reset unget on sync
    stream->flags |= __SUNGET;
    f7e6:	93 81       	ldd	r25, Z+3	; 0x03
    f7e8:	90 64       	ori	r25, 0x40	; 64
    f7ea:	93 83       	std	Z+3, r25	; 0x03

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    f7ec:	ce 01       	movw	r24, r28
    f7ee:	a4 de       	rcall	.-696    	; 0xf538 <fileno_to_fatfs>
    if(fh == NULL)
    f7f0:	00 97       	sbiw	r24, 0x00	; 0
    f7f2:	99 f3       	breq	.-26     	; 0xf7da <syncfs+0x12>
    {
        errno = EBADF;
        return(-1);
    }

    res  = f_sync ( fh );
    f7f4:	0e 94 72 5e 	call	0xbce4	; 0xbce4 <f_sync>
    if (res != FR_OK)
    f7f8:	00 97       	sbiw	r24, 0x00	; 0
    f7fa:	a1 f0       	breq	.+40     	; 0xf824 <syncfs+0x5c>
    f7fc:	84 31       	cpi	r24, 0x14	; 20
    f7fe:	91 05       	cpc	r25, r1
    f800:	70 f4       	brcc	.+28     	; 0xf81e <syncfs+0x56>
    f802:	fc 01       	movw	r30, r24
    f804:	ea 55       	subi	r30, 0x5A	; 90
    f806:	f4 4f       	sbci	r31, 0xF4	; 244
    f808:	80 81       	ld	r24, Z
    f80a:	08 2e       	mov	r0, r24
    f80c:	00 0c       	add	r0, r0
    f80e:	99 0b       	sbc	r25, r25
    {
        errno = fatfs_to_errno(res);
    f810:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
    f814:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
        return(-1);
    f818:	8f ef       	ldi	r24, 0xFF	; 255
    f81a:	9f ef       	ldi	r25, 0xFF	; 255
    f81c:	05 c0       	rjmp	.+10     	; 0xf828 <syncfs+0x60>
        errno = EBADF;
        return(-1);
    }

    res  = f_sync ( fh );
    if (res != FR_OK)
    f81e:	83 e2       	ldi	r24, 0x23	; 35
    f820:	90 e0       	ldi	r25, 0x00	; 0
    f822:	f6 cf       	rjmp	.-20     	; 0xf810 <syncfs+0x48>
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return(0);
    f824:	80 e0       	ldi	r24, 0x00	; 0
    f826:	90 e0       	ldi	r25, 0x00	; 0
}
    f828:	df 91       	pop	r29
    f82a:	cf 91       	pop	r28
    f82c:	08 95       	ret

0000f82e <sync>:
/// - man page sync (2).
///
/// @return  void.
MEMSPACE
void sync(void)
{
    f82e:	cf 93       	push	r28
    f830:	df 93       	push	r29
    FIL *fh;
    int i;

    for(i=0;i<MAX_FILES;++i)
    f832:	c0 e0       	ldi	r28, 0x00	; 0
    f834:	d0 e0       	ldi	r29, 0x00	; 0
    f836:	21 96       	adiw	r28, 0x01	; 1
    f838:	c0 31       	cpi	r28, 0x10	; 16
    f83a:	d1 05       	cpc	r29, r1
    f83c:	51 f0       	breq	.+20     	; 0xf852 <sync+0x24>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f83e:	c3 30       	cpi	r28, 0x03	; 3
    f840:	d1 05       	cpc	r29, r1
    f842:	cc f3       	brlt	.-14     	; 0xf836 <sync+0x8>
    {
        if(isatty(i))
            continue;

// fileno_to_fatfs checks for i out of bounds
        fh = fileno_to_fatfs(i);
    f844:	ce 01       	movw	r24, r28
    f846:	78 de       	rcall	.-784    	; 0xf538 <fileno_to_fatfs>
        if(fh == NULL)
    f848:	89 2b       	or	r24, r25
    f84a:	a9 f3       	breq	.-22     	; 0xf836 <sync+0x8>
            continue;

        (void ) syncfs(i);
    f84c:	ce 01       	movw	r24, r28
    f84e:	bc df       	rcall	.-136    	; 0xf7c8 <syncfs>
    f850:	f2 cf       	rjmp	.-28     	; 0xf836 <sync+0x8>
    }
}
    f852:	df 91       	pop	r29
    f854:	cf 91       	pop	r28
    f856:	08 95       	ret

0000f858 <write>:
/// @param[in] count: number of bytes to write.
/// @return count on sucess.
/// @return -1 on error with errno set.
MEMSPACE
ssize_t write(int fd, const void *buf, size_t count)
{
    f858:	a2 e0       	ldi	r26, 0x02	; 2
    f85a:	b0 e0       	ldi	r27, 0x00	; 0
    f85c:	e2 e3       	ldi	r30, 0x32	; 50
    f85e:	fc e7       	ldi	r31, 0x7C	; 124
    f860:	0c 94 05 e7 	jmp	0x1ce0a	; 0x1ce0a <__prologue_saves__+0xc>
    f864:	8c 01       	movw	r16, r24
    f866:	b6 2e       	mov	r11, r22
    f868:	f7 2e       	mov	r15, r23
    f86a:	4a 01       	movw	r8, r20
    UINT size;
    UINT bytes = count;
    FRESULT res;
    FIL *fh;
    FILE *stream;
    errno = 0;
    f86c:	10 92 c6 1c 	sts	0x1CC6, r1	; 0x801cc6 <errno+0x1>
    f870:	10 92 c5 1c 	sts	0x1CC5, r1	; 0x801cc5 <errno>

// TTY read function
    stream = fileno_to_stream(fd);
    f874:	ce da       	rcall	.-2660   	; 0xee12 <fileno_to_stream>
    f876:	6c 01       	movw	r12, r24
    if(stream == stdout || stream == stderr)
    f878:	80 91 c9 1c 	lds	r24, 0x1CC9	; 0x801cc9 <__iob+0x2>
    f87c:	90 91 ca 1c 	lds	r25, 0x1CCA	; 0x801cca <__iob+0x3>
    f880:	c8 16       	cp	r12, r24
    f882:	d9 06       	cpc	r13, r25
    f884:	39 f0       	breq	.+14     	; 0xf894 <write+0x3c>
    f886:	80 91 cb 1c 	lds	r24, 0x1CCB	; 0x801ccb <__iob+0x4>
    f88a:	90 91 cc 1c 	lds	r25, 0x1CCC	; 0x801ccc <__iob+0x5>
    f88e:	c8 16       	cp	r12, r24
    f890:	d9 06       	cpc	r13, r25
    f892:	d1 f4       	brne	.+52     	; 0xf8c8 <write+0x70>
    {
        char *ptr = (char *) buf;
        size = 0;
    f894:	1a 82       	std	Y+2, r1	; 0x02
    f896:	19 82       	std	Y+1, r1	; 0x01
    f898:	0b 2d       	mov	r16, r11
    f89a:	1f 2d       	mov	r17, r15
    f89c:	78 01       	movw	r14, r16
    f89e:	e8 0c       	add	r14, r8
    f8a0:	f9 1c       	adc	r15, r9
        while(count--)
    f8a2:	0e 15       	cp	r16, r14
    f8a4:	1f 05       	cpc	r17, r15
    f8a6:	d1 f1       	breq	.+116    	; 0xf91c <write+0xc4>
        {
            int c,ret;
            c = *ptr++;
    f8a8:	f8 01       	movw	r30, r16
    f8aa:	a1 90       	ld	r10, Z+
    f8ac:	8f 01       	movw	r16, r30
    f8ae:	b1 2c       	mov	r11, r1
            ret = fputc(c, stream);
    f8b0:	b6 01       	movw	r22, r12
    f8b2:	c5 01       	movw	r24, r10
    f8b4:	c4 d9       	rcall	.-3192   	; 0xec3e <fputc>
            if(c != ret)
    f8b6:	a8 16       	cp	r10, r24
    f8b8:	b9 06       	cpc	r11, r25
    f8ba:	81 f5       	brne	.+96     	; 0xf91c <write+0xc4>
                break;

            ++size;
    f8bc:	89 81       	ldd	r24, Y+1	; 0x01
    f8be:	9a 81       	ldd	r25, Y+2	; 0x02
    f8c0:	01 96       	adiw	r24, 0x01	; 1
    f8c2:	9a 83       	std	Y+2, r25	; 0x02
    f8c4:	89 83       	std	Y+1, r24	; 0x01
    f8c6:	ed cf       	rjmp	.-38     	; 0xf8a2 <write+0x4a>
        }
        return(size);
    }
    if(stream == stdin)
    f8c8:	80 91 c7 1c 	lds	r24, 0x1CC7	; 0x801cc7 <__iob>
    f8cc:	90 91 c8 1c 	lds	r25, 0x1CC8	; 0x801cc8 <__iob+0x1>
    f8d0:	c8 16       	cp	r12, r24
    f8d2:	d9 06       	cpc	r13, r25
    {
        return(-1);
    }

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    f8d4:	41 f1       	breq	.+80     	; 0xf926 <write+0xce>
    f8d6:	c8 01       	movw	r24, r16
    f8d8:	2f de       	rcall	.-930    	; 0xf538 <fileno_to_fatfs>
    if ( fh == NULL )
    f8da:	00 97       	sbiw	r24, 0x00	; 0
    f8dc:	19 f4       	brne	.+6      	; 0xf8e4 <write+0x8c>
    {
        errno = EBADF;
    f8de:	89 e0       	ldi	r24, 0x09	; 9
    f8e0:	90 e0       	ldi	r25, 0x00	; 0
    f8e2:	17 c0       	rjmp	.+46     	; 0xf912 <write+0xba>
        return(-1);
    }

    res = f_write(fh, buf, bytes, &size);
    f8e4:	9e 01       	movw	r18, r28
    f8e6:	2f 5f       	subi	r18, 0xFF	; 255
    f8e8:	3f 4f       	sbci	r19, 0xFF	; 255
    f8ea:	a4 01       	movw	r20, r8
    f8ec:	6b 2d       	mov	r22, r11
    f8ee:	7f 2d       	mov	r23, r15
    f8f0:	0e 94 db 5c 	call	0xb9b6	; 0xb9b6 <f_write>
    if(res != FR_OK)
    f8f4:	00 97       	sbiw	r24, 0x00	; 0
    f8f6:	91 f0       	breq	.+36     	; 0xf91c <write+0xc4>
    f8f8:	84 31       	cpi	r24, 0x14	; 20
    f8fa:	91 05       	cpc	r25, r1
    f8fc:	40 f4       	brcc	.+16     	; 0xf90e <write+0xb6>
    f8fe:	fc 01       	movw	r30, r24
    f900:	ea 55       	subi	r30, 0x5A	; 90
    f902:	f4 4f       	sbci	r31, 0xF4	; 244
    f904:	80 81       	ld	r24, Z
    f906:	08 2e       	mov	r0, r24
    f908:	00 0c       	add	r0, r0
    f90a:	99 0b       	sbc	r25, r25
    f90c:	02 c0       	rjmp	.+4      	; 0xf912 <write+0xba>
    f90e:	83 e2       	ldi	r24, 0x23	; 35
    f910:	90 e0       	ldi	r25, 0x00	; 0
    {
        errno = fatfs_to_errno(res);
    f912:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
    f916:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
    f91a:	05 c0       	rjmp	.+10     	; 0xf926 <write+0xce>
        return(-1);
    }
    return ((ssize_t) size);
    f91c:	69 81       	ldd	r22, Y+1	; 0x01
    f91e:	7a 81       	ldd	r23, Y+2	; 0x02
    f920:	80 e0       	ldi	r24, 0x00	; 0
    f922:	90 e0       	ldi	r25, 0x00	; 0
    f924:	03 c0       	rjmp	.+6      	; 0xf92c <write+0xd4>
        }
        return(size);
    }
    if(stream == stdin)
    {
        return(-1);
    f926:	6f ef       	ldi	r22, 0xFF	; 255
    f928:	7f ef       	ldi	r23, 0xFF	; 255
    f92a:	cb 01       	movw	r24, r22
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return ((ssize_t) size);
}
    f92c:	22 96       	adiw	r28, 0x02	; 2
    f92e:	ec e0       	ldi	r30, 0x0C	; 12
    f930:	0c 94 21 e7 	jmp	0x1ce42	; 0x1ce42 <__epilogue_restores__+0xc>

0000f934 <fwrite>:
///
/// @return count written on sucess.
/// @return 0 or < size on error with errno set.
MEMSPACE
size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream)
{
    f934:	0f 93       	push	r16
    f936:	1f 93       	push	r17
    f938:	cf 93       	push	r28
    f93a:	df 93       	push	r29
    f93c:	ec 01       	movw	r28, r24
    f93e:	c9 01       	movw	r24, r18
    size_t count = size * nmemb;
    f940:	64 9f       	mul	r22, r20
    f942:	80 01       	movw	r16, r0
    f944:	65 9f       	mul	r22, r21
    f946:	10 0d       	add	r17, r0
    f948:	74 9f       	mul	r23, r20
    f94a:	10 0d       	add	r17, r0
    f94c:	11 24       	eor	r1, r1
    int fn = fileno(stream);
    f94e:	45 da       	rcall	.-2934   	; 0xedda <fileno>
    ssize_t ret;

// write () checks for fn out of bounds
    ret =  write(fn, ptr, count);
    f950:	a8 01       	movw	r20, r16
    f952:	be 01       	movw	r22, r28
    f954:	81 df       	rcall	.-254    	; 0xf858 <write>

    if(ret < 0)
    f956:	97 fd       	sbrc	r25, 7
    f958:	02 c0       	rjmp	.+4      	; 0xf95e <fwrite+0x2a>
        return(0);

    return((size_t) ret);
    f95a:	cb 01       	movw	r24, r22
    f95c:	02 c0       	rjmp	.+4      	; 0xf962 <fwrite+0x2e>

// write () checks for fn out of bounds
    ret =  write(fn, ptr, count);

    if(ret < 0)
        return(0);
    f95e:	80 e0       	ldi	r24, 0x00	; 0
    f960:	90 e0       	ldi	r25, 0x00	; 0

    return((size_t) ret);
}
    f962:	df 91       	pop	r29
    f964:	cf 91       	pop	r28
    f966:	1f 91       	pop	r17
    f968:	0f 91       	pop	r16
    f96a:	08 95       	ret

0000f96c <free_file_descriptor>:
///
/// @return fileno on success.
/// @return -1 on failure.
MEMSPACE
int free_file_descriptor(int fileno)
{
    f96c:	0f 93       	push	r16
    f96e:	1f 93       	push	r17
    f970:	cf 93       	push	r28
    f972:	df 93       	push	r29
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f974:	83 30       	cpi	r24, 0x03	; 3
    f976:	91 05       	cpc	r25, r1
    f978:	48 f4       	brcc	.+18     	; 0xf98c <free_file_descriptor+0x20>
    FILE *stream;
    FIL *fh;

    if(isatty( fileno ))
    {
        errno = EBADF;
    f97a:	89 e0       	ldi	r24, 0x09	; 9
    f97c:	90 e0       	ldi	r25, 0x00	; 0
    f97e:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
    f982:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
        return(-1);
    f986:	8f ef       	ldi	r24, 0xFF	; 255
    f988:	9f ef       	ldi	r25, 0xFF	; 255
    f98a:	20 c0       	rjmp	.+64     	; 0xf9cc <free_file_descriptor+0x60>
    f98c:	ec 01       	movw	r28, r24
    }

// checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    f98e:	41 da       	rcall	.-2942   	; 0xee12 <fileno_to_stream>
    f990:	8c 01       	movw	r16, r24
    if(stream == NULL)
    f992:	89 2b       	or	r24, r25
    f994:	c1 f3       	breq	.-16     	; 0xf986 <free_file_descriptor+0x1a>
    {
        return(-1);
    }

    fh = fdev_get_udata(stream);
    f996:	f8 01       	movw	r30, r16
    f998:	84 85       	ldd	r24, Z+12	; 0x0c
    f99a:	95 85       	ldd	r25, Z+13	; 0x0d

    if(fh != NULL)
    f99c:	00 97       	sbiw	r24, 0x00	; 0
    f99e:	11 f0       	breq	.+4      	; 0xf9a4 <free_file_descriptor+0x38>
    {
        safefree(fh);
    f9a0:	0e 94 28 28 	call	0x5050	; 0x5050 <safefree>
    }

    if(stream->buf != NULL && stream->flags & __SMALLOC)
    f9a4:	f8 01       	movw	r30, r16
    f9a6:	80 81       	ld	r24, Z
    f9a8:	91 81       	ldd	r25, Z+1	; 0x01
    f9aa:	00 97       	sbiw	r24, 0x00	; 0
    f9ac:	21 f0       	breq	.+8      	; 0xf9b6 <free_file_descriptor+0x4a>
    f9ae:	23 81       	ldd	r18, Z+3	; 0x03
    f9b0:	27 fd       	sbrc	r18, 7
    {
        safefree(stream->buf);
    f9b2:	0e 94 28 28 	call	0x5050	; 0x5050 <safefree>
    }

    __iob[fileno]  = NULL;
    f9b6:	fe 01       	movw	r30, r28
    f9b8:	ee 0f       	add	r30, r30
    f9ba:	ff 1f       	adc	r31, r31
    f9bc:	e9 53       	subi	r30, 0x39	; 57
    f9be:	f3 4e       	sbci	r31, 0xE3	; 227
    f9c0:	11 82       	std	Z+1, r1	; 0x01
    f9c2:	10 82       	st	Z, r1
    safefree(stream);
    f9c4:	c8 01       	movw	r24, r16
    f9c6:	0e 94 28 28 	call	0x5050	; 0x5050 <safefree>
    return(fileno);
    f9ca:	ce 01       	movw	r24, r28
}
    f9cc:	df 91       	pop	r29
    f9ce:	cf 91       	pop	r28
    f9d0:	1f 91       	pop	r17
    f9d2:	0f 91       	pop	r16
    f9d4:	08 95       	ret

0000f9d6 <close>:
///
/// @return 0 on sucess.
/// @return -1 on error with errno set.
MEMSPACE
int close(int fileno)
{
    f9d6:	0f 93       	push	r16
    f9d8:	1f 93       	push	r17
    f9da:	cf 93       	push	r28
    f9dc:	df 93       	push	r29
    f9de:	8c 01       	movw	r16, r24
    FILE *stream;
    FIL *fh;
    int res;

    errno = 0;
    f9e0:	10 92 c6 1c 	sts	0x1CC6, r1	; 0x801cc6 <errno+0x1>
    f9e4:	10 92 c5 1c 	sts	0x1CC5, r1	; 0x801cc5 <errno>

// checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    f9e8:	14 da       	rcall	.-3032   	; 0xee12 <fileno_to_stream>
    if(stream == NULL)
    f9ea:	89 2b       	or	r24, r25
    f9ec:	d9 f0       	breq	.+54     	; 0xfa24 <close+0x4e>
    {
        return(-1);
    }

// fileno_to_fatfs checks for fileno out of bounds
    fh = fileno_to_fatfs(fileno);
    f9ee:	c8 01       	movw	r24, r16
    f9f0:	a3 dd       	rcall	.-1210   	; 0xf538 <fileno_to_fatfs>
    if(fh == NULL)
    f9f2:	00 97       	sbiw	r24, 0x00	; 0
    f9f4:	b9 f0       	breq	.+46     	; 0xfa24 <close+0x4e>
    {
        return(-1);
    }
    res = f_close(fh);
    f9f6:	0e 94 f2 5e 	call	0xbde4	; 0xbde4 <f_close>
    free_file_descriptor(fileno);
    f9fa:	ec 01       	movw	r28, r24
    f9fc:	c8 01       	movw	r24, r16
    f9fe:	b6 df       	rcall	.-148    	; 0xf96c <free_file_descriptor>
    if (res != FR_OK)
    fa00:	20 97       	sbiw	r28, 0x00	; 0
    fa02:	99 f0       	breq	.+38     	; 0xfa2a <close+0x54>
    fa04:	c4 31       	cpi	r28, 0x14	; 20
    fa06:	d1 05       	cpc	r29, r1
    fa08:	38 f4       	brcc	.+14     	; 0xfa18 <close+0x42>
    fa0a:	ca 55       	subi	r28, 0x5A	; 90
    fa0c:	d4 4f       	sbci	r29, 0xF4	; 244
    fa0e:	88 81       	ld	r24, Y
    fa10:	08 2e       	mov	r0, r24
    fa12:	00 0c       	add	r0, r0
    fa14:	99 0b       	sbc	r25, r25
    fa16:	02 c0       	rjmp	.+4      	; 0xfa1c <close+0x46>
    fa18:	83 e2       	ldi	r24, 0x23	; 35
    fa1a:	90 e0       	ldi	r25, 0x00	; 0
    {
        errno = fatfs_to_errno(res);
    fa1c:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
    fa20:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
        return(-1);
    fa24:	8f ef       	ldi	r24, 0xFF	; 255
    fa26:	9f ef       	ldi	r25, 0xFF	; 255
    fa28:	02 c0       	rjmp	.+4      	; 0xfa2e <close+0x58>
    }
    return(0);
    fa2a:	80 e0       	ldi	r24, 0x00	; 0
    fa2c:	90 e0       	ldi	r25, 0x00	; 0
}
    fa2e:	df 91       	pop	r29
    fa30:	cf 91       	pop	r28
    fa32:	1f 91       	pop	r17
    fa34:	0f 91       	pop	r16
    fa36:	08 95       	ret

0000fa38 <fclose>:
/// @return  0 on sucess.
/// @return  -1 on error witrh errno set.
MEMSPACE
int fclose(FILE *stream)
{
    int fn = fileno(stream);
    fa38:	d0 d9       	rcall	.-3168   	; 0xedda <fileno>
    if(fn < 0)
    fa3a:	97 fd       	sbrc	r25, 7
        return(EOF);

    return( close(fn) );
    fa3c:	02 c0       	rjmp	.+4      	; 0xfa42 <fclose+0xa>
    fa3e:	cb cf       	rjmp	.-106    	; 0xf9d6 <close>
    fa40:	08 95       	ret
MEMSPACE
int fclose(FILE *stream)
{
    int fn = fileno(stream);
    if(fn < 0)
        return(EOF);
    fa42:	8f ef       	ldi	r24, 0xFF	; 255
    fa44:	9f ef       	ldi	r25, 0xFF	; 255

    return( close(fn) );
}
    fa46:	08 95       	ret

0000fa48 <new_file_descriptor>:
///
/// @return fileno on success.
/// @return -1 on failure with errno set.
MEMSPACE
int new_file_descriptor( void )
{
    fa48:	0f 93       	push	r16
    fa4a:	1f 93       	push	r17
    fa4c:	cf 93       	push	r28
    fa4e:	df 93       	push	r29
    fa50:	e7 ec       	ldi	r30, 0xC7	; 199
    fa52:	fc e1       	ldi	r31, 0x1C	; 28
    int i;
    FILE *stream;
    FIL *fh;

    for(i=0;i<MAX_FILES;++i)
    fa54:	c0 e0       	ldi	r28, 0x00	; 0
    fa56:	d0 e0       	ldi	r29, 0x00	; 0
    fa58:	21 96       	adiw	r28, 0x01	; 1
    fa5a:	c0 31       	cpi	r28, 0x10	; 16
    fa5c:	d1 05       	cpc	r29, r1
    fa5e:	49 f0       	breq	.+18     	; 0xfa72 <new_file_descriptor+0x2a>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    fa60:	c3 30       	cpi	r28, 0x03	; 3
    fa62:	d1 05       	cpc	r29, r1
    fa64:	24 f0       	brlt	.+8      	; 0xfa6e <new_file_descriptor+0x26>

    for(i=0;i<MAX_FILES;++i)
    {
        if(isatty(i))
            continue;
        if( __iob[i] == NULL)
    fa66:	82 81       	ldd	r24, Z+2	; 0x02
    fa68:	93 81       	ldd	r25, Z+3	; 0x03
    fa6a:	89 2b       	or	r24, r25
    fa6c:	59 f0       	breq	.+22     	; 0xfa84 <new_file_descriptor+0x3c>
    fa6e:	32 96       	adiw	r30, 0x02	; 2
    fa70:	f3 cf       	rjmp	.-26     	; 0xfa58 <new_file_descriptor+0x10>
            __iob[i]  = stream;
            fdev_set_udata(stream, (void *) fh);
            return(i);
        }
    }
    errno = ENFILE;
    fa72:	87 e1       	ldi	r24, 0x17	; 23
    fa74:	90 e0       	ldi	r25, 0x00	; 0
    fa76:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
    fa7a:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
    return(-1);
    fa7e:	8f ef       	ldi	r24, 0xFF	; 255
    fa80:	9f ef       	ldi	r25, 0xFF	; 255
    fa82:	22 c0       	rjmp	.+68     	; 0xfac8 <new_file_descriptor+0x80>
    {
        if(isatty(i))
            continue;
        if( __iob[i] == NULL)
        {
            stream = (FILE *) safecalloc(sizeof(FILE),1);
    fa84:	61 e0       	ldi	r22, 0x01	; 1
    fa86:	70 e0       	ldi	r23, 0x00	; 0
    fa88:	8e e0       	ldi	r24, 0x0E	; 14
    fa8a:	90 e0       	ldi	r25, 0x00	; 0
    fa8c:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <safecalloc>
    fa90:	8c 01       	movw	r16, r24
            if(stream == NULL)
    fa92:	89 2b       	or	r24, r25
    fa94:	59 f0       	breq	.+22     	; 0xfaac <new_file_descriptor+0x64>
            {
                errno = ENOMEM;
                return(-1);
            }
            fh = (FIL *) safecalloc(sizeof(FIL),1);
    fa96:	61 e0       	ldi	r22, 0x01	; 1
    fa98:	70 e0       	ldi	r23, 0x00	; 0
    fa9a:	84 e2       	ldi	r24, 0x24	; 36
    fa9c:	92 e0       	ldi	r25, 0x02	; 2
    fa9e:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <safecalloc>
            if(fh == NULL)
    faa2:	00 97       	sbiw	r24, 0x00	; 0
    faa4:	31 f4       	brne	.+12     	; 0xfab2 <new_file_descriptor+0x6a>
            {
                safefree(stream);
    faa6:	c8 01       	movw	r24, r16
    faa8:	0e 94 28 28 	call	0x5050	; 0x5050 <safefree>
                errno = ENOMEM;
    faac:	8c e0       	ldi	r24, 0x0C	; 12
    faae:	90 e0       	ldi	r25, 0x00	; 0
    fab0:	e2 cf       	rjmp	.-60     	; 0xfa76 <new_file_descriptor+0x2e>
                return(-1);
            }

            __iob[i]  = stream;
    fab2:	fe 01       	movw	r30, r28
    fab4:	ee 0f       	add	r30, r30
    fab6:	ff 1f       	adc	r31, r31
    fab8:	e9 53       	subi	r30, 0x39	; 57
    faba:	f3 4e       	sbci	r31, 0xE3	; 227
    fabc:	11 83       	std	Z+1, r17	; 0x01
    fabe:	00 83       	st	Z, r16
            fdev_set_udata(stream, (void *) fh);
    fac0:	f8 01       	movw	r30, r16
    fac2:	95 87       	std	Z+13, r25	; 0x0d
    fac4:	84 87       	std	Z+12, r24	; 0x0c
{
    int i;
    FILE *stream;
    FIL *fh;

    for(i=0;i<MAX_FILES;++i)
    fac6:	ce 01       	movw	r24, r28
            return(i);
        }
    }
    errno = ENFILE;
    return(-1);
}
    fac8:	df 91       	pop	r29
    faca:	cf 91       	pop	r28
    facc:	1f 91       	pop	r17
    face:	0f 91       	pop	r16
    fad0:	08 95       	ret

0000fad2 <open>:
///
/// @return fileno on success.
/// @return -1 on error with errno set.
MEMSPACE
int open(const char *pathname, int flags)
{
    fad2:	a0 e0       	ldi	r26, 0x00	; 0
    fad4:	b0 e0       	ldi	r27, 0x00	; 0
    fad6:	ef e6       	ldi	r30, 0x6F	; 111
    fad8:	fd e7       	ldi	r31, 0x7D	; 125
    fada:	0c 94 03 e7 	jmp	0x1ce06	; 0x1ce06 <__prologue_saves__+0x8>
    fade:	5c 01       	movw	r10, r24
    fae0:	6b 01       	movw	r12, r22
    int fatfs_modes;
    FILE *stream;
    FIL *fh;
    int res;

    errno = 0;
    fae2:	10 92 c6 1c 	sts	0x1CC6, r1	; 0x801cc6 <errno+0x1>
    fae6:	10 92 c5 1c 	sts	0x1CC5, r1	; 0x801cc5 <errno>
        errno = fatfs_to_errno(res);
        return(-1);
    }
#endif

    if((flags & O_ACCMODE) == O_RDWR)
    faea:	7b 01       	movw	r14, r22
    faec:	83 e0       	ldi	r24, 0x03	; 3
    faee:	e8 22       	and	r14, r24
    faf0:	ff 24       	eor	r15, r15
    faf2:	e2 e0       	ldi	r30, 0x02	; 2
    faf4:	ee 16       	cp	r14, r30
    faf6:	f1 04       	cpc	r15, r1
    faf8:	31 f0       	breq	.+12     	; 0xfb06 <open+0x34>
        fatfs_modes = FA_READ | FA_WRITE;
    else if((flags & O_ACCMODE) == O_RDONLY)
    fafa:	e1 14       	cp	r14, r1
    fafc:	f1 04       	cpc	r15, r1
    fafe:	31 f0       	breq	.+12     	; 0xfb0c <open+0x3a>
        fatfs_modes = FA_READ;
    else
        fatfs_modes = FA_WRITE;
    fb00:	02 e0       	ldi	r16, 0x02	; 2
    fb02:	10 e0       	ldi	r17, 0x00	; 0
    fb04:	05 c0       	rjmp	.+10     	; 0xfb10 <open+0x3e>
        return(-1);
    }
#endif

    if((flags & O_ACCMODE) == O_RDWR)
        fatfs_modes = FA_READ | FA_WRITE;
    fb06:	03 e0       	ldi	r16, 0x03	; 3
    fb08:	10 e0       	ldi	r17, 0x00	; 0
    fb0a:	02 c0       	rjmp	.+4      	; 0xfb10 <open+0x3e>
    else if((flags & O_ACCMODE) == O_RDONLY)
        fatfs_modes = FA_READ;
    fb0c:	01 e0       	ldi	r16, 0x01	; 1
    fb0e:	10 e0       	ldi	r17, 0x00	; 0
    else
        fatfs_modes = FA_WRITE;

    if(flags & O_CREAT)
    fb10:	c6 fe       	sbrs	r12, 6
    fb12:	05 c0       	rjmp	.+10     	; 0xfb1e <open+0x4c>
    {
        if(flags & O_TRUNC)
    fb14:	d1 fe       	sbrs	r13, 1
    fb16:	02 c0       	rjmp	.+4      	; 0xfb1c <open+0x4a>
            fatfs_modes |= FA_CREATE_ALWAYS;
    fb18:	08 60       	ori	r16, 0x08	; 8
    fb1a:	01 c0       	rjmp	.+2      	; 0xfb1e <open+0x4c>
        else
            fatfs_modes |= FA_OPEN_ALWAYS;
    fb1c:	00 61       	ori	r16, 0x10	; 16
    }

    fileno = new_file_descriptor();
    fb1e:	94 df       	rcall	.-216    	; 0xfa48 <new_file_descriptor>
    fb20:	3c 01       	movw	r6, r24

// checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    fb22:	77 d9       	rcall	.-3346   	; 0xee12 <fileno_to_stream>
    fb24:	ec 01       	movw	r28, r24
    fb26:	c3 01       	movw	r24, r6
    if(stream == NULL)
    {
        free_file_descriptor(fileno);
    fb28:	20 97       	sbiw	r28, 0x00	; 0

    fileno = new_file_descriptor();

// checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    if(stream == NULL)
    fb2a:	09 f4       	brne	.+2      	; 0xfb2e <open+0x5c>
    fb2c:	48 c0       	rjmp	.+144    	; 0xfbbe <open+0xec>
        free_file_descriptor(fileno);
        return(-1);
    }

// fileno_to_fatfs checks for fileno out of bounds
    fh = fileno_to_fatfs(fileno);
    fb2e:	04 dd       	rcall	.-1528   	; 0xf538 <fileno_to_fatfs>
    fb30:	4c 01       	movw	r8, r24
    fb32:	00 97       	sbiw	r24, 0x00	; 0
    if(fh == NULL)
    fb34:	59 f4       	brne	.+22     	; 0xfb4c <open+0x7a>
    {
        free_file_descriptor(fileno);
    fb36:	c3 01       	movw	r24, r6
    fb38:	19 df       	rcall	.-462    	; 0xf96c <free_file_descriptor>
    fb3a:	89 e0       	ldi	r24, 0x09	; 9
        errno = EBADF;
    fb3c:	90 e0       	ldi	r25, 0x00	; 0
    fb3e:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
    fb42:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
    fb46:	8f ef       	ldi	r24, 0xFF	; 255
        return(-1);
    fb48:	9f ef       	ldi	r25, 0xFF	; 255
    fb4a:	5d c0       	rjmp	.+186    	; 0xfc06 <open+0x134>
    fb4c:	40 2f       	mov	r20, r16
    }
    res = f_open(fh, pathname, (BYTE) (fatfs_modes & 0xff));
    fb4e:	b5 01       	movw	r22, r10
    fb50:	0e 94 d8 59 	call	0xb3b0	; 0xb3b0 <f_open>
    fb54:	00 97       	sbiw	r24, 0x00	; 0
    if(res != FR_OK)
    fb56:	91 f0       	breq	.+36     	; 0xfb7c <open+0xaa>
    fb58:	84 31       	cpi	r24, 0x14	; 20
    fb5a:	91 05       	cpc	r25, r1
    fb5c:	40 f4       	brcc	.+16     	; 0xfb6e <open+0x9c>
    fb5e:	fc 01       	movw	r30, r24
    fb60:	ea 55       	subi	r30, 0x5A	; 90
    fb62:	f4 4f       	sbci	r31, 0xF4	; 244
    fb64:	80 81       	ld	r24, Z
    fb66:	08 2e       	mov	r0, r24
    fb68:	00 0c       	add	r0, r0
    fb6a:	99 0b       	sbc	r25, r25
    fb6c:	02 c0       	rjmp	.+4      	; 0xfb72 <open+0xa0>
    fb6e:	83 e2       	ldi	r24, 0x23	; 35
    fb70:	90 e0       	ldi	r25, 0x00	; 0
    fb72:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
    {
        errno = fatfs_to_errno(res);
    fb76:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
    fb7a:	20 c0       	rjmp	.+64     	; 0xfbbc <open+0xea>
    fb7c:	d2 fe       	sbrs	r13, 2
        free_file_descriptor(fileno);
        return(-1);
    }
    if(flags & O_APPEND)
    fb7e:	21 c0       	rjmp	.+66     	; 0xfbc2 <open+0xf0>
    fb80:	f4 01       	movw	r30, r8
    {
///  Seek to end of the file
        res = f_lseek(fh, f_size(fh));
    fb82:	42 85       	ldd	r20, Z+10	; 0x0a
    fb84:	53 85       	ldd	r21, Z+11	; 0x0b
    fb86:	64 85       	ldd	r22, Z+12	; 0x0c
    fb88:	75 85       	ldd	r23, Z+13	; 0x0d
    fb8a:	c4 01       	movw	r24, r8
    fb8c:	0e 94 9c 60 	call	0xc138	; 0xc138 <f_lseek>
    fb90:	00 97       	sbiw	r24, 0x00	; 0
        if (res != FR_OK)
    fb92:	b9 f0       	breq	.+46     	; 0xfbc2 <open+0xf0>
    fb94:	84 31       	cpi	r24, 0x14	; 20
    fb96:	91 05       	cpc	r25, r1
    fb98:	40 f4       	brcc	.+16     	; 0xfbaa <open+0xd8>
    fb9a:	fc 01       	movw	r30, r24
    fb9c:	ea 55       	subi	r30, 0x5A	; 90
    fb9e:	f4 4f       	sbci	r31, 0xF4	; 244
    fba0:	80 81       	ld	r24, Z
    fba2:	08 2e       	mov	r0, r24
    fba4:	00 0c       	add	r0, r0
    fba6:	99 0b       	sbc	r25, r25
    fba8:	02 c0       	rjmp	.+4      	; 0xfbae <open+0xdc>
    fbaa:	83 e2       	ldi	r24, 0x23	; 35
    fbac:	90 e0       	ldi	r25, 0x00	; 0
    fbae:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
        {
            errno = fatfs_to_errno(res);
    fbb2:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
    fbb6:	c4 01       	movw	r24, r8
            f_close(fh);
    fbb8:	0e 94 f2 5e 	call	0xbde4	; 0xbde4 <f_close>
            free_file_descriptor(fileno);
    fbbc:	c3 01       	movw	r24, r6
    fbbe:	d6 de       	rcall	.-596    	; 0xf96c <free_file_descriptor>
    fbc0:	c2 cf       	rjmp	.-124    	; 0xfb46 <open+0x74>
    fbc2:	f2 e0       	ldi	r31, 0x02	; 2
            return(-1);
        }
    }

    if((flags & O_ACCMODE) == O_RDWR)
    fbc4:	ef 16       	cp	r14, r31
    fbc6:	f1 04       	cpc	r15, r1
    fbc8:	51 f4       	brne	.+20     	; 0xfbde <open+0x10c>
    fbca:	8e e7       	ldi	r24, 0x7E	; 126
    {
// FIXME fdevopen should do this
        stream->put = fatfs_putc;
    fbcc:	95 e7       	ldi	r25, 0x75	; 117
    fbce:	99 87       	std	Y+9, r25	; 0x09
    fbd0:	88 87       	std	Y+8, r24	; 0x08
    fbd2:	8b ef       	ldi	r24, 0xFB	; 251
        stream->get = fatfs_getc;
    fbd4:	94 e7       	ldi	r25, 0x74	; 116
    fbd6:	9b 87       	std	Y+11, r25	; 0x0b
    fbd8:	8a 87       	std	Y+10, r24	; 0x0a
    fbda:	83 e0       	ldi	r24, 0x03	; 3
        stream->flags = _FDEV_SETUP_RW;
    fbdc:	12 c0       	rjmp	.+36     	; 0xfc02 <open+0x130>
    fbde:	e1 14       	cp	r14, r1
    }
    else if((flags & O_ACCMODE) == O_RDONLY)
    fbe0:	f1 04       	cpc	r15, r1
    fbe2:	41 f4       	brne	.+16     	; 0xfbf4 <open+0x122>
    fbe4:	19 86       	std	Y+9, r1	; 0x09
    {
// FIXME fdevopen should do this
        stream->put = NULL;
    fbe6:	18 86       	std	Y+8, r1	; 0x08
    fbe8:	8b ef       	ldi	r24, 0xFB	; 251
        stream->get = fatfs_getc;
    fbea:	94 e7       	ldi	r25, 0x74	; 116
    fbec:	9b 87       	std	Y+11, r25	; 0x0b
    fbee:	8a 87       	std	Y+10, r24	; 0x0a
    fbf0:	81 e0       	ldi	r24, 0x01	; 1
        stream->flags = _FDEV_SETUP_READ;
    fbf2:	07 c0       	rjmp	.+14     	; 0xfc02 <open+0x130>
    fbf4:	8e e7       	ldi	r24, 0x7E	; 126
    }
    else
    {
// FIXME fdevopen should do this
        stream->put = fatfs_putc;
    fbf6:	95 e7       	ldi	r25, 0x75	; 117
    fbf8:	99 87       	std	Y+9, r25	; 0x09
    fbfa:	88 87       	std	Y+8, r24	; 0x08
    fbfc:	1b 86       	std	Y+11, r1	; 0x0b
        stream->get = NULL;
    fbfe:	1a 86       	std	Y+10, r1	; 0x0a
    fc00:	82 e0       	ldi	r24, 0x02	; 2
        stream->flags = _FDEV_SETUP_WRITE;
    fc02:	8b 83       	std	Y+3, r24	; 0x03
    fc04:	c3 01       	movw	r24, r6
    }

    return(fileno);
    fc06:	cd b7       	in	r28, 0x3d	; 61
}
    fc08:	de b7       	in	r29, 0x3e	; 62
    fc0a:	ee e0       	ldi	r30, 0x0E	; 14
    fc0c:	0c 94 1f e7 	jmp	0x1ce3e	; 0x1ce3e <__epilogue_restores__+0x8>

0000fc10 <posix_fopen_modes_to_open>:
    fc10:	cf 93       	push	r28
/// @return open mode flags.
/// @return -1 on error.
/// @warning read and write BOTH share the same stream buffer and buffer index pointers.
MEMSPACE
int posix_fopen_modes_to_open(const char *mode)
{
    fc12:	df 93       	push	r29
    fc14:	ec 01       	movw	r28, r24
    int flag = 0;

    if(modecmp(mode,"r") || modecmp(mode,"rb"))
    fc16:	62 e4       	ldi	r22, 0x42	; 66
    fc18:	73 e0       	ldi	r23, 0x03	; 3
    fc1a:	0e 94 cb 31 	call	0x6396	; 0x6396 <strcmp>
    fc1e:	00 97       	sbiw	r24, 0x00	; 0
    fc20:	09 f4       	brne	.+2      	; 0xfc24 <posix_fopen_modes_to_open+0x14>
    fc22:	5d c0       	rjmp	.+186    	; 0xfcde <posix_fopen_modes_to_open+0xce>
    fc24:	6e ef       	ldi	r22, 0xFE	; 254
    fc26:	78 e0       	ldi	r23, 0x08	; 8
    fc28:	ce 01       	movw	r24, r28
    fc2a:	0e 94 cb 31 	call	0x6396	; 0x6396 <strcmp>
    fc2e:	00 97       	sbiw	r24, 0x00	; 0
    fc30:	09 f4       	brne	.+2      	; 0xfc34 <posix_fopen_modes_to_open+0x24>
    fc32:	55 c0       	rjmp	.+170    	; 0xfcde <posix_fopen_modes_to_open+0xce>
    {
        flag = O_RDONLY;
        return(flag);
    }
    if(modecmp(mode,"r+") || modecmp(mode, "r+b" ) || modecmp(mode, "rb+" ))
    fc34:	61 e0       	ldi	r22, 0x01	; 1
    fc36:	79 e0       	ldi	r23, 0x09	; 9
    fc38:	ce 01       	movw	r24, r28
    fc3a:	0e 94 cb 31 	call	0x6396	; 0x6396 <strcmp>
    fc3e:	89 2b       	or	r24, r25
    fc40:	09 f4       	brne	.+2      	; 0xfc44 <posix_fopen_modes_to_open+0x34>
    fc42:	42 c0       	rjmp	.+132    	; 0xfcc8 <posix_fopen_modes_to_open+0xb8>
    fc44:	64 e0       	ldi	r22, 0x04	; 4
    fc46:	79 e0       	ldi	r23, 0x09	; 9
    fc48:	ce 01       	movw	r24, r28
    fc4a:	0e 94 cb 31 	call	0x6396	; 0x6396 <strcmp>
    fc4e:	89 2b       	or	r24, r25
    fc50:	d9 f1       	breq	.+118    	; 0xfcc8 <posix_fopen_modes_to_open+0xb8>
    fc52:	68 e0       	ldi	r22, 0x08	; 8
    fc54:	79 e0       	ldi	r23, 0x09	; 9
    fc56:	ce 01       	movw	r24, r28
    fc58:	0e 94 cb 31 	call	0x6396	; 0x6396 <strcmp>
    fc5c:	89 2b       	or	r24, r25
    fc5e:	a1 f1       	breq	.+104    	; 0xfcc8 <posix_fopen_modes_to_open+0xb8>
    {
        flag = O_RDWR | O_TRUNC;
        return(flag);
    }
    if(modecmp(mode,"w") || modecmp(mode,"wb"))
    fc60:	6d eb       	ldi	r22, 0xBD	; 189
    fc62:	7a e0       	ldi	r23, 0x0A	; 10
    fc64:	ce 01       	movw	r24, r28
    fc66:	0e 94 cb 31 	call	0x6396	; 0x6396 <strcmp>
    fc6a:	89 2b       	or	r24, r25
    fc6c:	81 f1       	breq	.+96     	; 0xfcce <posix_fopen_modes_to_open+0xbe>
    fc6e:	6c e0       	ldi	r22, 0x0C	; 12
    fc70:	79 e0       	ldi	r23, 0x09	; 9
    fc72:	ce 01       	movw	r24, r28
    fc74:	0e 94 cb 31 	call	0x6396	; 0x6396 <strcmp>
    fc78:	89 2b       	or	r24, r25
    fc7a:	49 f1       	breq	.+82     	; 0xfcce <posix_fopen_modes_to_open+0xbe>
    {
        flag = O_WRONLY | O_CREAT | O_TRUNC;
        return(flag);
    }
    if(modecmp(mode,"w+") || modecmp(mode, "w+b" ) || modecmp(mode, "wb+" ))
    fc7c:	6f e0       	ldi	r22, 0x0F	; 15
    fc7e:	79 e0       	ldi	r23, 0x09	; 9
    fc80:	ce 01       	movw	r24, r28
    fc82:	0e 94 cb 31 	call	0x6396	; 0x6396 <strcmp>
    fc86:	89 2b       	or	r24, r25
    fc88:	29 f1       	breq	.+74     	; 0xfcd4 <posix_fopen_modes_to_open+0xc4>
    fc8a:	62 e1       	ldi	r22, 0x12	; 18
    fc8c:	79 e0       	ldi	r23, 0x09	; 9
    fc8e:	ce 01       	movw	r24, r28
    fc90:	0e 94 cb 31 	call	0x6396	; 0x6396 <strcmp>
    fc94:	89 2b       	or	r24, r25
    fc96:	f1 f0       	breq	.+60     	; 0xfcd4 <posix_fopen_modes_to_open+0xc4>
    fc98:	66 e1       	ldi	r22, 0x16	; 22
    fc9a:	79 e0       	ldi	r23, 0x09	; 9
    fc9c:	ce 01       	movw	r24, r28
    fc9e:	0e 94 cb 31 	call	0x6396	; 0x6396 <strcmp>
    fca2:	89 2b       	or	r24, r25
    fca4:	b9 f0       	breq	.+46     	; 0xfcd4 <posix_fopen_modes_to_open+0xc4>
    {
        flag = O_RDWR | O_CREAT | O_TRUNC;
        return(flag);
    }
    if(modecmp(mode,"a") || modecmp(mode,"ab"))
    fca6:	69 e2       	ldi	r22, 0x29	; 41
    fca8:	73 e1       	ldi	r23, 0x13	; 19
    fcaa:	ce 01       	movw	r24, r28
    fcac:	0e 94 cb 31 	call	0x6396	; 0x6396 <strcmp>
    fcb0:	89 2b       	or	r24, r25
    fcb2:	99 f0       	breq	.+38     	; 0xfcda <posix_fopen_modes_to_open+0xca>
    fcb4:	6a e1       	ldi	r22, 0x1A	; 26
    fcb6:	79 e0       	ldi	r23, 0x09	; 9
    fcb8:	ce 01       	movw	r24, r28
    fcba:	0e 94 cb 31 	call	0x6396	; 0x6396 <strcmp>
    fcbe:	89 2b       	or	r24, r25
    fcc0:	61 f0       	breq	.+24     	; 0xfcda <posix_fopen_modes_to_open+0xca>
        return(flag);
    }
    if(modecmp(mode,"a+") || modecmp(mode, "a+b" ) || modecmp(mode, "ab+" ))
    {
        flag = O_RDWR | O_CREAT | O_APPEND;
        return(-1);
    fcc2:	8f ef       	ldi	r24, 0xFF	; 255
    fcc4:	9f ef       	ldi	r25, 0xFF	; 255
    fcc6:	0b c0       	rjmp	.+22     	; 0xfcde <posix_fopen_modes_to_open+0xce>
        return(flag);
    }
    if(modecmp(mode,"r+") || modecmp(mode, "r+b" ) || modecmp(mode, "rb+" ))
    {
        flag = O_RDWR | O_TRUNC;
        return(flag);
    fcc8:	82 e0       	ldi	r24, 0x02	; 2
    fcca:	92 e0       	ldi	r25, 0x02	; 2
    fccc:	08 c0       	rjmp	.+16     	; 0xfcde <posix_fopen_modes_to_open+0xce>
    }
    if(modecmp(mode,"w") || modecmp(mode,"wb"))
    {
        flag = O_WRONLY | O_CREAT | O_TRUNC;
        return(flag);
    fcce:	81 e4       	ldi	r24, 0x41	; 65
    fcd0:	92 e0       	ldi	r25, 0x02	; 2
    fcd2:	05 c0       	rjmp	.+10     	; 0xfcde <posix_fopen_modes_to_open+0xce>
    }
    if(modecmp(mode,"w+") || modecmp(mode, "w+b" ) || modecmp(mode, "wb+" ))
    {
        flag = O_RDWR | O_CREAT | O_TRUNC;
        return(flag);
    fcd4:	82 e4       	ldi	r24, 0x42	; 66
    fcd6:	92 e0       	ldi	r25, 0x02	; 2
    fcd8:	02 c0       	rjmp	.+4      	; 0xfcde <posix_fopen_modes_to_open+0xce>
    }
    if(modecmp(mode,"a") || modecmp(mode,"ab"))
    {
        flag = O_WRONLY | O_CREAT | O_APPEND;
        return(flag);
    fcda:	81 e4       	ldi	r24, 0x41	; 65
    fcdc:	94 e0       	ldi	r25, 0x04	; 4
    {
        flag = O_RDWR | O_CREAT | O_APPEND;
        return(-1);
    }
    return(-1);                                   // nvalid mode
}
    fcde:	df 91       	pop	r29
    fce0:	cf 91       	pop	r28
    fce2:	08 95       	ret

0000fce4 <fopen>:
///
/// @return stream * on success.
/// @return NULL on error with errno set.
MEMSPACE
FILE *fopen(const char *path, const char *mode)
{
    fce4:	cf 93       	push	r28
    fce6:	df 93       	push	r29
    fce8:	ec 01       	movw	r28, r24
    fcea:	cb 01       	movw	r24, r22
    int flags = posix_fopen_modes_to_open(mode);
    fcec:	91 df       	rcall	.-222    	; 0xfc10 <posix_fopen_modes_to_open>
    int fileno = open(path, flags);
    fcee:	bc 01       	movw	r22, r24
    fcf0:	ce 01       	movw	r24, r28

// checks if fileno out of bounds
    return( fileno_to_stream(fileno) );
    fcf2:	ef de       	rcall	.-546    	; 0xfad2 <open>
    fcf4:	8e d8       	rcall	.-3812   	; 0xee12 <fileno_to_stream>
}
    fcf6:	df 91       	pop	r29
    fcf8:	cf 91       	pop	r28
    fcfa:	08 95       	ret

0000fcfc <fprintf>:
/// @param[in] ...: vararg list or arguments
/// @return size of printed result
MEMSPACE
int
fprintf(FILE *fp, const char *format, ...)
{
    fcfc:	a8 e0       	ldi	r26, 0x08	; 8
    fcfe:	b0 e0       	ldi	r27, 0x00	; 0
    fd00:	e4 e8       	ldi	r30, 0x84	; 132
    fd02:	fe e7       	ldi	r31, 0x7E	; 126
    fd04:	0c 94 0f e7 	jmp	0x1ce1e	; 0x1ce1e <__prologue_saves__+0x20>
    printf_t fn;
    va_list va;

    fn.put = _fprintf_putc;
    fd08:	81 e7       	ldi	r24, 0x71	; 113
    fd0a:	96 e7       	ldi	r25, 0x76	; 118
    fd0c:	9a 83       	std	Y+2, r25	; 0x02
    fd0e:	89 83       	std	Y+1, r24	; 0x01
    fn.sent = 0;
    fd10:	18 86       	std	Y+8, r1	; 0x08
    fd12:	1f 82       	std	Y+7, r1	; 0x07
    fn.buffer = (void *) fp;
    fd14:	8d 85       	ldd	r24, Y+13	; 0x0d
    fd16:	9e 85       	ldd	r25, Y+14	; 0x0e
    fd18:	9c 83       	std	Y+4, r25	; 0x04
    fd1a:	8b 83       	std	Y+3, r24	; 0x03

    va_start(va, format);
    _printf_fn(&fn, format, va);
    fd1c:	4f 85       	ldd	r20, Y+15	; 0x0f
    fd1e:	58 89       	ldd	r21, Y+16	; 0x10
    fd20:	60 e8       	ldi	r22, 0x80	; 128
    fd22:	9e 01       	movw	r18, r28
    fd24:	2f 5e       	subi	r18, 0xEF	; 239
    fd26:	3f 4f       	sbci	r19, 0xFF	; 255
    fd28:	ce 01       	movw	r24, r28
    fd2a:	01 96       	adiw	r24, 0x01	; 1
    fd2c:	0e 94 8b 42 	call	0x8516	; 0x8516 <_printf_fn>
    va_end(va);

    return ((int)fn.sent);
}
    fd30:	8f 81       	ldd	r24, Y+7	; 0x07
    fd32:	98 85       	ldd	r25, Y+8	; 0x08
    fd34:	28 96       	adiw	r28, 0x08	; 8
    fd36:	e2 e0       	ldi	r30, 0x02	; 2
    fd38:	0c 94 2b e7 	jmp	0x1ce56	; 0x1ce56 <__epilogue_restores__+0x20>

0000fd3c <posix_help>:
MEMSPACE
int setpage(int count)
{
    _pagesize = count;
    return(_pagesize);
}
    fd3c:	cf 93       	push	r28
    fd3e:	df 93       	push	r29
    fd40:	00 d0       	rcall	.+0      	; 0xfd42 <posix_help+0x6>
    fd42:	1f 92       	push	r1
    fd44:	ec 01       	movw	r28, r24
    fd46:	84 e8       	ldi	r24, 0x84	; 132
    fd48:	9e e0       	ldi	r25, 0x0E	; 14
    fd4a:	a0 e0       	ldi	r26, 0x00	; 0
    fd4c:	ed b7       	in	r30, 0x3d	; 61
    fd4e:	fe b7       	in	r31, 0x3e	; 62
    fd50:	81 83       	std	Z+1, r24	; 0x01
    fd52:	92 83       	std	Z+2, r25	; 0x02
    fd54:	a3 83       	std	Z+3, r26	; 0x03
    fd56:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    fd5a:	cd 2b       	or	r28, r29
    fd5c:	51 f0       	breq	.+20     	; 0xfd72 <posix_help+0x36>
    fd5e:	8e eb       	ldi	r24, 0xBE	; 190
    fd60:	9d e0       	ldi	r25, 0x0D	; 13
    fd62:	a0 e0       	ldi	r26, 0x00	; 0
    fd64:	ed b7       	in	r30, 0x3d	; 61
    fd66:	fe b7       	in	r31, 0x3e	; 62
    fd68:	81 83       	std	Z+1, r24	; 0x01
    fd6a:	92 83       	std	Z+2, r25	; 0x02
    fd6c:	a3 83       	std	Z+3, r26	; 0x03
    fd6e:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    fd72:	cd b7       	in	r28, 0x3d	; 61
    fd74:	de b7       	in	r29, 0x3e	; 62
    fd76:	23 96       	adiw	r28, 0x03	; 3
    fd78:	e2 e0       	ldi	r30, 0x02	; 2
    fd7a:	0c 94 2b e7 	jmp	0x1ce56	; 0x1ce56 <__epilogue_restores__+0x20>

0000fd7e <copy>:
    fd7e:	4f 92       	push	r4
    fd80:	5f 92       	push	r5
    fd82:	6f 92       	push	r6
    fd84:	8f 92       	push	r8
    fd86:	9f 92       	push	r9
    fd88:	af 92       	push	r10
    fd8a:	bf 92       	push	r11
    fd8c:	cf 92       	push	r12
    fd8e:	df 92       	push	r13
    fd90:	ef 92       	push	r14
    fd92:	ff 92       	push	r15
    fd94:	0f 93       	push	r16
    fd96:	1f 93       	push	r17
    fd98:	cf 93       	push	r28
    fd9a:	df 93       	push	r29
    fd9c:	ad b7       	in	r26, 0x3d	; 61
    fd9e:	be b7       	in	r27, 0x3e	; 62
    fda0:	17 97       	sbiw	r26, 0x07	; 7
    fda2:	0f b6       	in	r0, 0x3f	; 63
    fda4:	f8 94       	cli
    fda6:	be bf       	out	0x3e, r27	; 62
    fda8:	0f be       	out	0x3f, r0	; 63
    fdaa:	ad bf       	out	0x3d, r26	; 61
    fdac:	8c 01       	movw	r16, r24
    fdae:	eb 01       	movw	r28, r22
    fdb0:	ed b7       	in	r30, 0x3d	; 61
    fdb2:	fe b7       	in	r31, 0x3e	; 62
    fdb4:	95 83       	std	Z+5, r25	; 0x05
    fdb6:	84 83       	std	Z+4, r24	; 0x04
    fdb8:	8b e1       	ldi	r24, 0x1B	; 27
    fdba:	9d e0       	ldi	r25, 0x0D	; 13
    fdbc:	a0 e0       	ldi	r26, 0x00	; 0
    fdbe:	81 83       	std	Z+1, r24	; 0x01
    fdc0:	92 83       	std	Z+2, r25	; 0x02
    fdc2:	a3 83       	std	Z+3, r26	; 0x03
    fdc4:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    fdc8:	6e ef       	ldi	r22, 0xFE	; 254
    fdca:	78 e0       	ldi	r23, 0x08	; 8
    fdcc:	c8 01       	movw	r24, r16
    fdce:	8a df       	rcall	.-236    	; 0xfce4 <fopen>
    fdd0:	7c 01       	movw	r14, r24
    fdd2:	ed b7       	in	r30, 0x3d	; 61
    fdd4:	fe b7       	in	r31, 0x3e	; 62
    fdd6:	89 2b       	or	r24, r25
    fdd8:	59 f4       	brne	.+22     	; 0xfdf0 <copy+0x72>
    fdda:	15 83       	std	Z+5, r17	; 0x05
    fddc:	04 83       	std	Z+4, r16	; 0x04
    fdde:	8b e0       	ldi	r24, 0x0B	; 11
    fde0:	9d e0       	ldi	r25, 0x0D	; 13
    fde2:	a0 e0       	ldi	r26, 0x00	; 0
    fde4:	81 83       	std	Z+1, r24	; 0x01
    fde6:	92 83       	std	Z+2, r25	; 0x02
    fde8:	a3 83       	std	Z+3, r26	; 0x03
    fdea:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    fdee:	20 c0       	rjmp	.+64     	; 0xfe30 <copy+0xb2>
    fdf0:	d5 83       	std	Z+5, r29	; 0x05
    fdf2:	c4 83       	std	Z+4, r28	; 0x04
    fdf4:	8e ef       	ldi	r24, 0xFE	; 254
    fdf6:	9c e0       	ldi	r25, 0x0C	; 12
    fdf8:	a0 e0       	ldi	r26, 0x00	; 0
    fdfa:	81 83       	std	Z+1, r24	; 0x01
    fdfc:	92 83       	std	Z+2, r25	; 0x02
    fdfe:	a3 83       	std	Z+3, r26	; 0x03
    fe00:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    fe04:	6c e0       	ldi	r22, 0x0C	; 12
    fe06:	79 e0       	ldi	r23, 0x09	; 9
    fe08:	ce 01       	movw	r24, r28
    fe0a:	6c df       	rcall	.-296    	; 0xfce4 <fopen>
    fe0c:	8c 01       	movw	r16, r24
    fe0e:	89 2b       	or	r24, r25
    fe10:	a1 f4       	brne	.+40     	; 0xfe3a <copy+0xbc>
    fe12:	ed b7       	in	r30, 0x3d	; 61
    fe14:	fe b7       	in	r31, 0x3e	; 62
    fe16:	d5 83       	std	Z+5, r29	; 0x05
    fe18:	c4 83       	std	Z+4, r28	; 0x04
    fe1a:	8e ee       	ldi	r24, 0xEE	; 238
    fe1c:	9c e0       	ldi	r25, 0x0C	; 12
    fe1e:	a0 e0       	ldi	r26, 0x00	; 0
    fe20:	81 83       	std	Z+1, r24	; 0x01
    fe22:	92 83       	std	Z+2, r25	; 0x02
    fe24:	a3 83       	std	Z+3, r26	; 0x03
    fe26:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    fe2a:	80 e0       	ldi	r24, 0x00	; 0
    fe2c:	90 e0       	ldi	r25, 0x00	; 0
    fe2e:	04 de       	rcall	.-1016   	; 0xfa38 <fclose>
    fe30:	6f ef       	ldi	r22, 0xFF	; 255
    fe32:	7f ef       	ldi	r23, 0xFF	; 255
    fe34:	8f ef       	ldi	r24, 0xFF	; 255
    fe36:	9f ef       	ldi	r25, 0xFF	; 255
    fe38:	68 c0       	rjmp	.+208    	; 0xff0a <__DATA_REGION_LENGTH__+0xa>
    fe3a:	61 e0       	ldi	r22, 0x01	; 1
    fe3c:	70 e0       	ldi	r23, 0x00	; 0
    fe3e:	80 e0       	ldi	r24, 0x00	; 0
    fe40:	92 e0       	ldi	r25, 0x02	; 2
    fe42:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <safecalloc>
    fe46:	6c 01       	movw	r12, r24
    fe48:	89 2b       	or	r24, r25
    fe4a:	21 f4       	brne	.+8      	; 0xfe54 <copy+0xd6>
    fe4c:	c7 01       	movw	r24, r14
    fe4e:	f4 dd       	rcall	.-1048   	; 0xfa38 <fclose>
    fe50:	c8 01       	movw	r24, r16
    fe52:	ed cf       	rjmp	.-38     	; 0xfe2e <copy+0xb0>
    fe54:	81 ee       	ldi	r24, 0xE1	; 225
    fe56:	9c e0       	ldi	r25, 0x0C	; 12
    fe58:	a0 e0       	ldi	r26, 0x00	; 0
    fe5a:	ed b7       	in	r30, 0x3d	; 61
    fe5c:	fe b7       	in	r31, 0x3e	; 62
    fe5e:	81 83       	std	Z+1, r24	; 0x01
    fe60:	92 83       	std	Z+2, r25	; 0x02
    fe62:	a3 83       	std	Z+3, r26	; 0x03
    fe64:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    fe68:	81 2c       	mov	r8, r1
    fe6a:	91 2c       	mov	r9, r1
    fe6c:	54 01       	movw	r10, r8
    fe6e:	85 ec       	ldi	r24, 0xC5	; 197
    fe70:	9c e0       	ldi	r25, 0x0C	; 12
    fe72:	2c 01       	movw	r4, r24
    fe74:	61 2c       	mov	r6, r1
    fe76:	97 01       	movw	r18, r14
    fe78:	40 e0       	ldi	r20, 0x00	; 0
    fe7a:	52 e0       	ldi	r21, 0x02	; 2
    fe7c:	61 e0       	ldi	r22, 0x01	; 1
    fe7e:	70 e0       	ldi	r23, 0x00	; 0
    fe80:	c6 01       	movw	r24, r12
    fe82:	86 dc       	rcall	.-1780   	; 0xf790 <fread>
    fe84:	ec 01       	movw	r28, r24
    fe86:	18 16       	cp	r1, r24
    fe88:	19 06       	cpc	r1, r25
    fe8a:	44 f5       	brge	.+80     	; 0xfedc <copy+0x15e>
    fe8c:	98 01       	movw	r18, r16
    fe8e:	ae 01       	movw	r20, r28
    fe90:	61 e0       	ldi	r22, 0x01	; 1
    fe92:	70 e0       	ldi	r23, 0x00	; 0
    fe94:	c6 01       	movw	r24, r12
    fe96:	4e dd       	rcall	.-1380   	; 0xf934 <fwrite>
    fe98:	8c 17       	cp	r24, r28
    fe9a:	9d 07       	cpc	r25, r29
    fe9c:	5c f4       	brge	.+22     	; 0xfeb4 <copy+0x136>
    fe9e:	84 ed       	ldi	r24, 0xD4	; 212
    fea0:	9c e0       	ldi	r25, 0x0C	; 12
    fea2:	a0 e0       	ldi	r26, 0x00	; 0
    fea4:	ed b7       	in	r30, 0x3d	; 61
    fea6:	fe b7       	in	r31, 0x3e	; 62
    fea8:	81 83       	std	Z+1, r24	; 0x01
    feaa:	92 83       	std	Z+2, r25	; 0x02
    feac:	a3 83       	std	Z+3, r26	; 0x03
    feae:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    feb2:	14 c0       	rjmp	.+40     	; 0xfedc <copy+0x15e>
    feb4:	ce 01       	movw	r24, r28
    feb6:	dd 0f       	add	r29, r29
    feb8:	aa 0b       	sbc	r26, r26
    feba:	bb 0b       	sbc	r27, r27
    febc:	88 0e       	add	r8, r24
    febe:	99 1e       	adc	r9, r25
    fec0:	aa 1e       	adc	r10, r26
    fec2:	bb 1e       	adc	r11, r27
    fec4:	ed b7       	in	r30, 0x3d	; 61
    fec6:	fe b7       	in	r31, 0x3e	; 62
    fec8:	84 82       	std	Z+4, r8	; 0x04
    feca:	95 82       	std	Z+5, r9	; 0x05
    fecc:	a6 82       	std	Z+6, r10	; 0x06
    fece:	b7 82       	std	Z+7, r11	; 0x07
    fed0:	41 82       	std	Z+1, r4	; 0x01
    fed2:	52 82       	std	Z+2, r5	; 0x02
    fed4:	63 82       	std	Z+3, r6	; 0x03
    fed6:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    feda:	cd cf       	rjmp	.-102    	; 0xfe76 <copy+0xf8>
    fedc:	ed b7       	in	r30, 0x3d	; 61
    fede:	fe b7       	in	r31, 0x3e	; 62
    fee0:	84 82       	std	Z+4, r8	; 0x04
    fee2:	95 82       	std	Z+5, r9	; 0x05
    fee4:	a6 82       	std	Z+6, r10	; 0x06
    fee6:	b7 82       	std	Z+7, r11	; 0x07
    fee8:	82 eb       	ldi	r24, 0xB2	; 178
    feea:	9c e0       	ldi	r25, 0x0C	; 12
    feec:	a0 e0       	ldi	r26, 0x00	; 0
    feee:	81 83       	std	Z+1, r24	; 0x01
    fef0:	92 83       	std	Z+2, r25	; 0x02
    fef2:	a3 83       	std	Z+3, r26	; 0x03
    fef4:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    fef8:	c6 01       	movw	r24, r12
    fefa:	0e 94 28 28 	call	0x5050	; 0x5050 <safefree>
    fefe:	c7 01       	movw	r24, r14
    ff00:	9b dd       	rcall	.-1226   	; 0xfa38 <fclose>
    ff02:	c8 01       	movw	r24, r16
    ff04:	99 dd       	rcall	.-1230   	; 0xfa38 <fclose>
    ff06:	b4 01       	movw	r22, r8
    ff08:	c5 01       	movw	r24, r10
    ff0a:	ad b7       	in	r26, 0x3d	; 61
    ff0c:	be b7       	in	r27, 0x3e	; 62
    ff0e:	17 96       	adiw	r26, 0x07	; 7
    ff10:	0f b6       	in	r0, 0x3f	; 63
    ff12:	f8 94       	cli
    ff14:	be bf       	out	0x3e, r27	; 62
    ff16:	0f be       	out	0x3f, r0	; 63
    ff18:	ad bf       	out	0x3d, r26	; 61
    ff1a:	df 91       	pop	r29
    ff1c:	cf 91       	pop	r28
    ff1e:	1f 91       	pop	r17
    ff20:	0f 91       	pop	r16
    ff22:	ff 90       	pop	r15
    ff24:	ef 90       	pop	r14
    ff26:	df 90       	pop	r13
    ff28:	cf 90       	pop	r12
    ff2a:	bf 90       	pop	r11
    ff2c:	af 90       	pop	r10
    ff2e:	9f 90       	pop	r9
    ff30:	8f 90       	pop	r8
    ff32:	6f 90       	pop	r6
    ff34:	5f 90       	pop	r5
    ff36:	4f 90       	pop	r4
    ff38:	08 95       	ret

0000ff3a <testpage>:
/// @brief Used to page output of functions like cat, hexdump, etc
/// @param[in] *name: file to hexdump
/// @retrun -1 = quit, return count or 0 at new page
MEMSPACE
int testpage(int count)
{
    ff3a:	cf 93       	push	r28
    ff3c:	df 93       	push	r29
    ff3e:	00 d0       	rcall	.+0      	; 0xff40 <testpage+0x6>
    ff40:	1f 92       	push	r1
    int c;
    if(count >= _pagesize)
    ff42:	20 91 80 01 	lds	r18, 0x0180	; 0x800180 <_pagesize>
    ff46:	30 91 81 01 	lds	r19, 0x0181	; 0x800181 <_pagesize+0x1>
    ff4a:	82 17       	cp	r24, r18
    ff4c:	93 07       	cpc	r25, r19
    ff4e:	3c f1       	brlt	.+78     	; 0xff9e <testpage+0x64>
    {
        printf("More..");
    ff50:	8b ea       	ldi	r24, 0xAB	; 171
    ff52:	9c e0       	ldi	r25, 0x0C	; 12
    ff54:	a0 e0       	ldi	r26, 0x00	; 0
    ff56:	ed b7       	in	r30, 0x3d	; 61
    ff58:	fe b7       	in	r31, 0x3e	; 62
    ff5a:	81 83       	std	Z+1, r24	; 0x01
    ff5c:	92 83       	std	Z+2, r25	; 0x02
    ff5e:	a3 83       	std	Z+3, r26	; 0x03
    ff60:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
        {
            optimistic_yield(1000);
            wdt_reset();
        }
#endif
        c = getchar();
    ff64:	0e 94 7e 76 	call	0xecfc	; 0xecfc <getchar>
    ff68:	ec 01       	movw	r28, r24
        printf("\r");
    ff6a:	89 ea       	ldi	r24, 0xA9	; 169
    ff6c:	9c e0       	ldi	r25, 0x0C	; 12
    ff6e:	a0 e0       	ldi	r26, 0x00	; 0
    ff70:	ed b7       	in	r30, 0x3d	; 61
    ff72:	fe b7       	in	r31, 0x3e	; 62
    ff74:	81 83       	std	Z+1, r24	; 0x01
    ff76:	92 83       	std	Z+2, r25	; 0x02
    ff78:	a3 83       	std	Z+3, r26	; 0x03
    ff7a:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
        if(c == 'q')
    ff7e:	c1 37       	cpi	r28, 0x71	; 113
    ff80:	d1 05       	cpc	r29, r1
    ff82:	41 f0       	breq	.+16     	; 0xff94 <testpage+0x5a>
            return(-1);                           // quit
        if(c == '\n')
    ff84:	2a 97       	sbiw	r28, 0x0a	; 10
    ff86:	49 f4       	brne	.+18     	; 0xff9a <testpage+0x60>
            return(_pagesize-1);                  // single line
    ff88:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <_pagesize>
    ff8c:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <_pagesize+0x1>
    ff90:	01 97       	sbiw	r24, 0x01	; 1
    ff92:	05 c0       	rjmp	.+10     	; 0xff9e <testpage+0x64>
        }
#endif
        c = getchar();
        printf("\r");
        if(c == 'q')
            return(-1);                           // quit
    ff94:	8f ef       	ldi	r24, 0xFF	; 255
    ff96:	9f ef       	ldi	r25, 0xFF	; 255
    ff98:	02 c0       	rjmp	.+4      	; 0xff9e <testpage+0x64>
        if(c == '\n')
            return(_pagesize-1);                  // single line
        return(0);                                // new page
    ff9a:	80 e0       	ldi	r24, 0x00	; 0
    ff9c:	90 e0       	ldi	r25, 0x00	; 0
    }
    return (count);
}
    ff9e:	cd b7       	in	r28, 0x3d	; 61
    ffa0:	de b7       	in	r29, 0x3e	; 62
    ffa2:	23 96       	adiw	r28, 0x03	; 3
    ffa4:	e2 e0       	ldi	r30, 0x02	; 2
    ffa6:	0c 94 2b e7 	jmp	0x1ce56	; 0x1ce56 <__epilogue_restores__+0x20>

0000ffaa <cat>:
/// @param[in] name: file name.
/// @param[in] option: --p page display
/// @return  number of characters in file or -1 on error
MEMSPACE
long cat(char *name, int dopage)
{
    ffaa:	a7 e0       	ldi	r26, 0x07	; 7
    ffac:	b1 e0       	ldi	r27, 0x01	; 1
    ffae:	eb ed       	ldi	r30, 0xDB	; 219
    ffb0:	ff e7       	ldi	r31, 0x7F	; 127
    ffb2:	0c 94 05 e7 	jmp	0x1ce0a	; 0x1ce0a <__prologue_saves__+0xc>
    ffb6:	8c 01       	movw	r16, r24
    ffb8:	4b 01       	movw	r8, r22
    FILE *fp;
    int count = 0;
    int size = 0;
    char line[256];

    fp = fopen(name,"rb");
    ffba:	6e ef       	ldi	r22, 0xFE	; 254
    ffbc:	78 e0       	ldi	r23, 0x08	; 8
    ffbe:	92 de       	rcall	.-732    	; 0xfce4 <fopen>
    ffc0:	7c 01       	movw	r14, r24
    if (!fp)
    ffc2:	89 2b       	or	r24, r25
    ffc4:	41 f0       	breq	.+16     	; 0xffd6 <cat+0x2c>
    ffc6:	c1 2c       	mov	r12, r1
    ffc8:	d1 2c       	mov	r13, r1
    ffca:	a1 2c       	mov	r10, r1
    ffcc:	b1 2c       	mov	r11, r1
    {
        printf("Can't open: %s\n", name);
        return(-1);
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
    ffce:	8e 01       	movw	r16, r28
    ffd0:	08 5f       	subi	r16, 0xF8	; 248
    ffd2:	1f 4f       	sbci	r17, 0xFF	; 255
    ffd4:	23 c0       	rjmp	.+70     	; 0x1001c <__EEPROM_REGION_LENGTH__+0x1c>
    char line[256];

    fp = fopen(name,"rb");
    if (!fp)
    {
        printf("Can't open: %s\n", name);
    ffd6:	ed b7       	in	r30, 0x3d	; 61
    ffd8:	fe b7       	in	r31, 0x3e	; 62
    ffda:	15 83       	std	Z+5, r17	; 0x05
    ffdc:	04 83       	std	Z+4, r16	; 0x04
    ffde:	84 e3       	ldi	r24, 0x34	; 52
    ffe0:	9d e0       	ldi	r25, 0x0D	; 13
    ffe2:	a0 e0       	ldi	r26, 0x00	; 0
    ffe4:	81 83       	std	Z+1, r24	; 0x01
    ffe6:	92 83       	std	Z+2, r25	; 0x02
    ffe8:	a3 83       	std	Z+3, r26	; 0x03
    ffea:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
        return(-1);
    ffee:	cc 24       	eor	r12, r12
    fff0:	ca 94       	dec	r12
    fff2:	dc 2c       	mov	r13, r12
    fff4:	76 01       	movw	r14, r12
    fff6:	3f c0       	rjmp	.+126    	; 0x10076 <__EEPROM_REGION_LENGTH__+0x76>
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
    {
        trim_tail(line);
    fff8:	c8 01       	movw	r24, r16
    fffa:	0e 94 4f 32 	call	0x649e	; 0x649e <trim_tail>
        size += strlen(line);
    fffe:	f8 01       	movw	r30, r16
   10000:	01 90       	ld	r0, Z+
   10002:	00 20       	and	r0, r0
   10004:	e9 f7       	brne	.-6      	; 0x10000 <__EEPROM_REGION_LENGTH__>
   10006:	31 97       	sbiw	r30, 0x01	; 1
   10008:	e0 1b       	sub	r30, r16
   1000a:	f1 0b       	sbc	r31, r17
   1000c:	ce 0e       	add	r12, r30
   1000e:	df 1e       	adc	r13, r31
        puts(line);
   10010:	c8 01       	movw	r24, r16
   10012:	0e 94 d6 76 	call	0xedac	; 0xedac <puts>
        if(dopage)
   10016:	81 14       	cp	r8, r1
   10018:	91 04       	cpc	r9, r1
   1001a:	49 f4       	brne	.+18     	; 0x1002e <__EEPROM_REGION_LENGTH__+0x2e>
    if (!fp)
    {
        printf("Can't open: %s\n", name);
        return(-1);
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
   1001c:	a7 01       	movw	r20, r14
   1001e:	6e ef       	ldi	r22, 0xFE	; 254
   10020:	70 e0       	ldi	r23, 0x00	; 0
   10022:	c8 01       	movw	r24, r16
   10024:	0e 94 8a 76 	call	0xed14	; 0xed14 <fgets>
   10028:	89 2b       	or	r24, r25
   1002a:	31 f7       	brne	.-52     	; 0xfff8 <cat+0x4e>
   1002c:	06 c0       	rjmp	.+12     	; 0x1003a <__EEPROM_REGION_LENGTH__+0x3a>
        trim_tail(line);
        size += strlen(line);
        puts(line);
        if(dopage)
        {
            count = testpage(++count);
   1002e:	c5 01       	movw	r24, r10
   10030:	01 96       	adiw	r24, 0x01	; 1
   10032:	83 df       	rcall	.-250    	; 0xff3a <testpage>
   10034:	5c 01       	movw	r10, r24
            if(count < 0)
   10036:	97 ff       	sbrs	r25, 7
   10038:	f1 cf       	rjmp	.-30     	; 0x1001c <__EEPROM_REGION_LENGTH__+0x1c>
#ifdef ESP8266
        optimistic_yield(1000);
        wdt_reset();
#endif
    }
    printf("\n");
   1003a:	82 e3       	ldi	r24, 0x32	; 50
   1003c:	9d e0       	ldi	r25, 0x0D	; 13
   1003e:	a0 e0       	ldi	r26, 0x00	; 0
   10040:	ed b7       	in	r30, 0x3d	; 61
   10042:	fe b7       	in	r31, 0x3e	; 62
   10044:	81 83       	std	Z+1, r24	; 0x01
   10046:	92 83       	std	Z+2, r25	; 0x02
   10048:	a3 83       	std	Z+3, r26	; 0x03
   1004a:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    fclose(fp);
   1004e:	c7 01       	movw	r24, r14
   10050:	f3 dc       	rcall	.-1562   	; 0xfa38 <fclose>
    printf("%ld bytes\n", (long)size);
   10052:	0d 2c       	mov	r0, r13
   10054:	00 0c       	add	r0, r0
   10056:	ee 08       	sbc	r14, r14
   10058:	ff 08       	sbc	r15, r15
   1005a:	ed b7       	in	r30, 0x3d	; 61
   1005c:	fe b7       	in	r31, 0x3e	; 62
   1005e:	c4 82       	std	Z+4, r12	; 0x04
   10060:	d5 82       	std	Z+5, r13	; 0x05
   10062:	e6 82       	std	Z+6, r14	; 0x06
   10064:	f7 82       	std	Z+7, r15	; 0x07
   10066:	87 e2       	ldi	r24, 0x27	; 39
   10068:	9d e0       	ldi	r25, 0x0D	; 13
   1006a:	a0 e0       	ldi	r26, 0x00	; 0
   1006c:	81 83       	std	Z+1, r24	; 0x01
   1006e:	92 83       	std	Z+2, r25	; 0x02
   10070:	a3 83       	std	Z+3, r26	; 0x03
   10072:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    return(size);
}
   10076:	c7 01       	movw	r24, r14
   10078:	b6 01       	movw	r22, r12
   1007a:	c9 5f       	subi	r28, 0xF9	; 249
   1007c:	de 4f       	sbci	r29, 0xFE	; 254
   1007e:	ec e0       	ldi	r30, 0x0C	; 12
   10080:	0c 94 21 e7 	jmp	0x1ce42	; 0x1ce42 <__epilogue_restores__+0xc>

00010084 <ls_info>:
/// @param[in] path: file name or directory
/// @param[in] verbose: 1 = detail, 0 = name only
/// @return  1 on success 0 on fail
MEMSPACE
int ls_info(char *name, int verbose)
{
   10084:	4f 92       	push	r4
   10086:	5f 92       	push	r5
   10088:	6f 92       	push	r6
   1008a:	7f 92       	push	r7
   1008c:	af 92       	push	r10
   1008e:	bf 92       	push	r11
   10090:	cf 92       	push	r12
   10092:	df 92       	push	r13
   10094:	ef 92       	push	r14
   10096:	ff 92       	push	r15
   10098:	0f 93       	push	r16
   1009a:	1f 93       	push	r17
   1009c:	cf 93       	push	r28
   1009e:	df 93       	push	r29
   100a0:	cd b7       	in	r28, 0x3d	; 61
   100a2:	de b7       	in	r29, 0x3e	; 62
   100a4:	c9 54       	subi	r28, 0x49	; 73
   100a6:	d1 09       	sbc	r29, r1
   100a8:	0f b6       	in	r0, 0x3f	; 63
   100aa:	f8 94       	cli
   100ac:	de bf       	out	0x3e, r29	; 62
   100ae:	0f be       	out	0x3f, r0	; 63
   100b0:	cd bf       	out	0x3d, r28	; 61
   100b2:	8c 01       	movw	r16, r24
   100b4:	7b 01       	movw	r14, r22
    struct stat sp;
    uint16_t mask;
    char *cm = "rwx";
    char attr[12], *p;

    if(stat(name, &sp) == -1)
   100b6:	be 01       	movw	r22, r28
   100b8:	62 5f       	subi	r22, 0xF2	; 242
   100ba:	7f 4f       	sbci	r23, 0xFF	; 255
   100bc:	18 d9       	rcall	.-3536   	; 0xf2ee <stat>
   100be:	01 96       	adiw	r24, 0x01	; 1
   100c0:	79 f4       	brne	.+30     	; 0x100e0 <ls_info+0x5c>
    {
        printf("can not stat: %s\n", name);
   100c2:	ed b7       	in	r30, 0x3d	; 61
   100c4:	fe b7       	in	r31, 0x3e	; 62
   100c6:	15 83       	std	Z+5, r17	; 0x05
   100c8:	04 83       	std	Z+4, r16	; 0x04
   100ca:	87 e9       	ldi	r24, 0x97	; 151
   100cc:	9c e0       	ldi	r25, 0x0C	; 12
   100ce:	a0 e0       	ldi	r26, 0x00	; 0
   100d0:	81 83       	std	Z+1, r24	; 0x01
   100d2:	92 83       	std	Z+2, r25	; 0x02
   100d4:	a3 83       	std	Z+3, r26	; 0x03
   100d6:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
        return(0);
   100da:	80 e0       	ldi	r24, 0x00	; 0
   100dc:	90 e0       	ldi	r25, 0x00	; 0
   100de:	77 c0       	rjmp	.+238    	; 0x101ce <ls_info+0x14a>
    }

    if(!verbose)
   100e0:	ef 28       	or	r14, r15
   100e2:	81 f4       	brne	.+32     	; 0x10104 <ls_info+0x80>
    {
        printf("%s\n",basename(name));
   100e4:	c8 01       	movw	r24, r16
   100e6:	0e 94 43 77 	call	0xee86	; 0xee86 <basename>
   100ea:	ed b7       	in	r30, 0x3d	; 61
   100ec:	fe b7       	in	r31, 0x3e	; 62
   100ee:	95 83       	std	Z+5, r25	; 0x05
   100f0:	84 83       	std	Z+4, r24	; 0x04
   100f2:	83 e9       	ldi	r24, 0x93	; 147
   100f4:	9c e0       	ldi	r25, 0x0C	; 12
   100f6:	a0 e0       	ldi	r26, 0x00	; 0
   100f8:	81 83       	std	Z+1, r24	; 0x01
   100fa:	92 83       	std	Z+2, r25	; 0x02
   100fc:	a3 83       	std	Z+3, r26	; 0x03
   100fe:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   10102:	63 c0       	rjmp	.+198    	; 0x101ca <ls_info+0x146>
        return(1);
    }

    p = attr;
    if(S_ISDIR(sp.st_mode))
   10104:	4e 88       	ldd	r4, Y+22	; 0x16
   10106:	5f 88       	ldd	r5, Y+23	; 0x17
   10108:	68 8c       	ldd	r6, Y+24	; 0x18
   1010a:	79 8c       	ldd	r7, Y+25	; 0x19
   1010c:	d3 01       	movw	r26, r6
   1010e:	c2 01       	movw	r24, r4
   10110:	88 27       	eor	r24, r24
   10112:	90 7f       	andi	r25, 0xF0	; 240
   10114:	aa 27       	eor	r26, r26
   10116:	bb 27       	eor	r27, r27
   10118:	81 15       	cp	r24, r1
   1011a:	90 44       	sbci	r25, 0x40	; 64
   1011c:	a1 05       	cpc	r26, r1
   1011e:	b1 05       	cpc	r27, r1
   10120:	11 f4       	brne	.+4      	; 0x10126 <ls_info+0xa2>
        *p++ = 'd';
   10122:	84 e6       	ldi	r24, 0x64	; 100
   10124:	01 c0       	rjmp	.+2      	; 0x10128 <ls_info+0xa4>
    else
        *p++ = '-';
   10126:	8d e2       	ldi	r24, 0x2D	; 45
   10128:	8e af       	std	Y+62, r24	; 0x3e
   1012a:	fe 01       	movw	r30, r28
   1012c:	fe 96       	adiw	r30, 0x3e	; 62
/// @param[in] path: file name or directory
/// @param[in] verbose: 1 = detail, 0 = name only
/// @return  1 on success 0 on fail
MEMSPACE
int ls_info(char *name, int verbose)
{
   1012e:	e1 2c       	mov	r14, r1
   10130:	ff 24       	eor	r15, r15
   10132:	f3 94       	inc	r15
   10134:	20 e0       	ldi	r18, 0x00	; 0
   10136:	30 e0       	ldi	r19, 0x00	; 0
   10138:	be 2e       	mov	r11, r30
   1013a:	af 2e       	mov	r10, r31
    {
// User
        if( sp.st_mode & mask)
            *p++ = cm[ i % 3];
        else
            *p++ = '-';
   1013c:	4d e2       	ldi	r20, 0x2D	; 45
    mask = 4 << 6;
    for(i=0;i<9;++i)
    {
// User
        if( sp.st_mode & mask)
            *p++ = cm[ i % 3];
   1013e:	53 e0       	ldi	r21, 0x03	; 3
   10140:	c5 2e       	mov	r12, r21
   10142:	d1 2c       	mov	r13, r1

    mask = 4 << 6;
    for(i=0;i<9;++i)
    {
// User
        if( sp.st_mode & mask)
   10144:	c7 01       	movw	r24, r14
   10146:	a0 e0       	ldi	r26, 0x00	; 0
   10148:	b0 e0       	ldi	r27, 0x00	; 0
   1014a:	84 21       	and	r24, r4
   1014c:	95 21       	and	r25, r5
   1014e:	a6 21       	and	r26, r6
   10150:	b7 21       	and	r27, r7
   10152:	89 2b       	or	r24, r25
   10154:	8a 2b       	or	r24, r26
   10156:	8b 2b       	or	r24, r27
   10158:	51 f0       	breq	.+20     	; 0x1016e <ls_info+0xea>
            *p++ = cm[ i % 3];
   1015a:	c9 01       	movw	r24, r18
   1015c:	b6 01       	movw	r22, r12
   1015e:	0e 94 7f e6 	call	0x1ccfe	; 0x1ccfe <__divmodhi4>
   10162:	dc 01       	movw	r26, r24
   10164:	a6 54       	subi	r26, 0x46	; 70
   10166:	b4 4f       	sbci	r27, 0xF4	; 244
   10168:	8c 91       	ld	r24, X
   1016a:	81 83       	std	Z+1, r24	; 0x01
   1016c:	01 c0       	rjmp	.+2      	; 0x10170 <ls_info+0xec>
        else
            *p++ = '-';
   1016e:	41 83       	std	Z+1, r20	; 0x01
        mask >>= 1;
   10170:	f6 94       	lsr	r15
   10172:	e7 94       	ror	r14
        *p++ = 'd';
    else
        *p++ = '-';

    mask = 4 << 6;
    for(i=0;i<9;++i)
   10174:	2f 5f       	subi	r18, 0xFF	; 255
   10176:	3f 4f       	sbci	r19, 0xFF	; 255
   10178:	31 96       	adiw	r30, 0x01	; 1
   1017a:	29 30       	cpi	r18, 0x09	; 9
   1017c:	31 05       	cpc	r19, r1
   1017e:	11 f7       	brne	.-60     	; 0x10144 <ls_info+0xc0>
            *p++ = cm[ i % 3];
        else
            *p++ = '-';
        mask >>= 1;
    }
    *p = 0;
   10180:	29 96       	adiw	r28, 0x09	; 9
   10182:	1f ae       	std	Y+63, r1	; 0x3f
   10184:	29 97       	sbiw	r28, 0x09	; 9

    printf("%s none none %12ld %s %s\n",
   10186:	4e a0       	ldd	r4, Y+38	; 0x26
   10188:	5f a0       	ldd	r5, Y+39	; 0x27
   1018a:	68 a4       	ldd	r6, Y+40	; 0x28
   1018c:	79 a4       	ldd	r7, Y+41	; 0x29
   1018e:	6e a9       	ldd	r22, Y+54	; 0x36
   10190:	7f a9       	ldd	r23, Y+55	; 0x37
   10192:	88 ad       	ldd	r24, Y+56	; 0x38
   10194:	99 ad       	ldd	r25, Y+57	; 0x39
   10196:	0e 94 1e 77 	call	0xee3c	; 0xee3c <mctime>
   1019a:	7c 01       	movw	r14, r24
   1019c:	c8 01       	movw	r24, r16
   1019e:	0e 94 43 77 	call	0xee86	; 0xee86 <basename>
   101a2:	ed b7       	in	r30, 0x3d	; 61
   101a4:	fe b7       	in	r31, 0x3e	; 62
   101a6:	95 87       	std	Z+13, r25	; 0x0d
   101a8:	84 87       	std	Z+12, r24	; 0x0c
   101aa:	f3 86       	std	Z+11, r15	; 0x0b
   101ac:	e2 86       	std	Z+10, r14	; 0x0a
   101ae:	46 82       	std	Z+6, r4	; 0x06
   101b0:	57 82       	std	Z+7, r5	; 0x07
   101b2:	60 86       	std	Z+8, r6	; 0x08
   101b4:	71 86       	std	Z+9, r7	; 0x09
   101b6:	b4 82       	std	Z+4, r11	; 0x04
   101b8:	a5 82       	std	Z+5, r10	; 0x05
   101ba:	89 e7       	ldi	r24, 0x79	; 121
   101bc:	9c e0       	ldi	r25, 0x0C	; 12
   101be:	a0 e0       	ldi	r26, 0x00	; 0
   101c0:	81 83       	std	Z+1, r24	; 0x01
   101c2:	92 83       	std	Z+2, r25	; 0x02
   101c4:	a3 83       	std	Z+3, r26	; 0x03
   101c6:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
        attr,
        (long) sp.st_size,
        mctime((time_t)sp.st_mtime),
        basename(name));
    return(1);
   101ca:	81 e0       	ldi	r24, 0x01	; 1
   101cc:	90 e0       	ldi	r25, 0x00	; 0
}
   101ce:	c7 5b       	subi	r28, 0xB7	; 183
   101d0:	df 4f       	sbci	r29, 0xFF	; 255
   101d2:	0f b6       	in	r0, 0x3f	; 63
   101d4:	f8 94       	cli
   101d6:	de bf       	out	0x3e, r29	; 62
   101d8:	0f be       	out	0x3f, r0	; 63
   101da:	cd bf       	out	0x3d, r28	; 61
   101dc:	df 91       	pop	r29
   101de:	cf 91       	pop	r28
   101e0:	1f 91       	pop	r17
   101e2:	0f 91       	pop	r16
   101e4:	ff 90       	pop	r15
   101e6:	ef 90       	pop	r14
   101e8:	df 90       	pop	r13
   101ea:	cf 90       	pop	r12
   101ec:	bf 90       	pop	r11
   101ee:	af 90       	pop	r10
   101f0:	7f 90       	pop	r7
   101f2:	6f 90       	pop	r6
   101f4:	5f 90       	pop	r5
   101f6:	4f 90       	pop	r4
   101f8:	08 95       	ret

000101fa <ls>:
/// @param[in] path: file name or directory
/// @param[in] option: -l for detail
/// @return  number of files or -1 on error
MEMSPACE
int ls(char *name, int verbose)
{
   101fa:	2f 92       	push	r2
   101fc:	3f 92       	push	r3
   101fe:	4f 92       	push	r4
   10200:	5f 92       	push	r5
   10202:	6f 92       	push	r6
   10204:	8f 92       	push	r8
   10206:	9f 92       	push	r9
   10208:	af 92       	push	r10
   1020a:	bf 92       	push	r11
   1020c:	cf 92       	push	r12
   1020e:	df 92       	push	r13
   10210:	ef 92       	push	r14
   10212:	ff 92       	push	r15
   10214:	0f 93       	push	r16
   10216:	1f 93       	push	r17
   10218:	cf 93       	push	r28
   1021a:	df 93       	push	r29
   1021c:	cd b7       	in	r28, 0x3d	; 61
   1021e:	de b7       	in	r29, 0x3e	; 62
   10220:	c8 53       	subi	r28, 0x38	; 56
   10222:	d1 40       	sbci	r29, 0x01	; 1
   10224:	0f b6       	in	r0, 0x3f	; 63
   10226:	f8 94       	cli
   10228:	de bf       	out	0x3e, r29	; 62
   1022a:	0f be       	out	0x3f, r0	; 63
   1022c:	cd bf       	out	0x3d, r28	; 61
   1022e:	7c 01       	movw	r14, r24
   10230:	4b 01       	movw	r8, r22
    int files = 0;
    int len,len2;
    dirent_t *de;
    char fullpath[MAX_NAME_LEN+1];

    fullpath[0] = 0;
   10232:	1e 82       	std	Y+6, r1	; 0x06
   10234:	8e 01       	movw	r16, r28
   10236:	0a 5f       	subi	r16, 0xFA	; 250
   10238:	1f 4f       	sbci	r17, 0xFF	; 255
    if(!name || !*name || MATCH(name,".") )
   1023a:	00 97       	sbiw	r24, 0x00	; 0
   1023c:	51 f4       	brne	.+20     	; 0x10252 <ls+0x58>
    {
        if( !getcwd(fullpath, sizeof(fullpath)-2) )
   1023e:	6f ef       	ldi	r22, 0xFF	; 255
   10240:	70 e0       	ldi	r23, 0x00	; 0
   10242:	c8 01       	movw	r24, r16
   10244:	0e 94 99 77 	call	0xef32	; 0xef32 <getcwd>
   10248:	89 2b       	or	r24, r25
   1024a:	91 f4       	brne	.+36     	; 0x10270 <ls+0x76>
        {
            printf("ls: Can't get current directory\n");
   1024c:	88 e5       	ldi	r24, 0x58	; 88
   1024e:	9c e0       	ldi	r25, 0x0C	; 12
   10250:	6a c0       	rjmp	.+212    	; 0x10326 <ls+0x12c>
    int len,len2;
    dirent_t *de;
    char fullpath[MAX_NAME_LEN+1];

    fullpath[0] = 0;
    if(!name || !*name || MATCH(name,".") )
   10252:	fc 01       	movw	r30, r24
   10254:	80 81       	ld	r24, Z
   10256:	88 23       	and	r24, r24
   10258:	91 f3       	breq	.-28     	; 0x1023e <ls+0x44>
   1025a:	68 ef       	ldi	r22, 0xF8	; 248
   1025c:	72 e1       	ldi	r23, 0x12	; 18
   1025e:	c7 01       	movw	r24, r14
   10260:	0e 94 69 32 	call	0x64d2	; 0x64d2 <MATCH>
   10264:	89 2b       	or	r24, r25
   10266:	59 f7       	brne	.-42     	; 0x1023e <ls+0x44>

        }
    }
    else
    {
        strcpy(fullpath,name);
   10268:	b7 01       	movw	r22, r14
   1026a:	c8 01       	movw	r24, r16
   1026c:	0e 94 71 31 	call	0x62e2	; 0x62e2 <strcpy>
    }
    len = strlen(fullpath);
   10270:	f8 01       	movw	r30, r16
   10272:	01 90       	ld	r0, Z+
   10274:	00 20       	and	r0, r0
   10276:	e9 f7       	brne	.-6      	; 0x10272 <ls+0x78>
   10278:	31 97       	sbiw	r30, 0x01	; 1
   1027a:	1f 01       	movw	r2, r30
   1027c:	20 1a       	sub	r2, r16
   1027e:	31 0a       	sbc	r3, r17


    if (stat(fullpath, &st))
   10280:	be 01       	movw	r22, r28
   10282:	69 5f       	subi	r22, 0xF9	; 249
   10284:	7e 4f       	sbci	r23, 0xFE	; 254
   10286:	c8 01       	movw	r24, r16
   10288:	32 d8       	rcall	.-3996   	; 0xf2ee <stat>
    {
        printf("ls: cannot stat [%s]\n", fullpath);
   1028a:	ed b7       	in	r30, 0x3d	; 61
   1028c:	fe b7       	in	r31, 0x3e	; 62
   1028e:	15 83       	std	Z+5, r17	; 0x05
   10290:	04 83       	std	Z+4, r16	; 0x04
        strcpy(fullpath,name);
    }
    len = strlen(fullpath);


    if (stat(fullpath, &st))
   10292:	89 2b       	or	r24, r25
   10294:	59 f0       	breq	.+22     	; 0x102ac <ls+0xb2>
    {
        printf("ls: cannot stat [%s]\n", fullpath);
   10296:	82 e4       	ldi	r24, 0x42	; 66
   10298:	9c e0       	ldi	r25, 0x0C	; 12
   1029a:	a0 e0       	ldi	r26, 0x00	; 0
   1029c:	81 83       	std	Z+1, r24	; 0x01
   1029e:	92 83       	std	Z+2, r25	; 0x02
   102a0:	a3 83       	std	Z+3, r26	; 0x03
   102a2:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
        return(-1);
   102a6:	8f ef       	ldi	r24, 0xFF	; 255
   102a8:	9f ef       	ldi	r25, 0xFF	; 255
   102aa:	96 c0       	rjmp	.+300    	; 0x103d8 <ls+0x1de>
    }
    printf("Listing:[%s]\n",fullpath);
   102ac:	84 e3       	ldi	r24, 0x34	; 52
   102ae:	9c e0       	ldi	r25, 0x0C	; 12
   102b0:	a0 e0       	ldi	r26, 0x00	; 0
   102b2:	81 83       	std	Z+1, r24	; 0x01
   102b4:	92 83       	std	Z+2, r25	; 0x02
   102b6:	a3 83       	std	Z+3, r26	; 0x03
   102b8:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>

    switch (st.st_mode & S_IFMT)
   102bc:	c1 5f       	subi	r28, 0xF1	; 241
   102be:	de 4f       	sbci	r29, 0xFE	; 254
   102c0:	88 81       	ld	r24, Y
   102c2:	99 81       	ldd	r25, Y+1	; 0x01
   102c4:	aa 81       	ldd	r26, Y+2	; 0x02
   102c6:	bb 81       	ldd	r27, Y+3	; 0x03
   102c8:	cf 50       	subi	r28, 0x0F	; 15
   102ca:	d1 40       	sbci	r29, 0x01	; 1
   102cc:	88 27       	eor	r24, r24
   102ce:	90 7f       	andi	r25, 0xF0	; 240
   102d0:	aa 27       	eor	r26, r26
   102d2:	bb 27       	eor	r27, r27
   102d4:	81 15       	cp	r24, r1
   102d6:	f0 e4       	ldi	r31, 0x40	; 64
   102d8:	9f 07       	cpc	r25, r31
   102da:	a1 05       	cpc	r26, r1
   102dc:	b1 05       	cpc	r27, r1
   102de:	59 f0       	breq	.+22     	; 0x102f6 <ls+0xfc>
   102e0:	81 15       	cp	r24, r1
   102e2:	90 48       	sbci	r25, 0x80	; 128
   102e4:	a1 05       	cpc	r26, r1
   102e6:	b1 05       	cpc	r27, r1
   102e8:	09 f0       	breq	.+2      	; 0x102ec <ls+0xf2>
   102ea:	67 c0       	rjmp	.+206    	; 0x103ba <ls+0x1c0>
    {
        case S_IFREG:
            files = ls_info(fullpath,verbose);
   102ec:	b4 01       	movw	r22, r8
   102ee:	c8 01       	movw	r24, r16
   102f0:	c9 de       	rcall	.-622    	; 0x10084 <ls_info>
   102f2:	7c 01       	movw	r14, r24
            break;
   102f4:	64 c0       	rjmp	.+200    	; 0x103be <ls+0x1c4>
        case S_IFDIR:
            dirp = opendir(fullpath);
   102f6:	c8 01       	movw	r24, r16
   102f8:	0e 94 47 78 	call	0xf08e	; 0xf08e <opendir>
   102fc:	5c 01       	movw	r10, r24
            if(!dirp)
   102fe:	89 2b       	or	r24, r25
   10300:	81 f0       	breq	.+32     	; 0x10322 <ls+0x128>
    }
    else
    {
        strcpy(fullpath,name);
    }
    len = strlen(fullpath);
   10302:	e1 2c       	mov	r14, r1
   10304:	f1 2c       	mov	r15, r1
                    strcat(fullpath,"/");
                }
                strcat(fullpath,de->d_name);
                files +=ls_info(fullpath,verbose);
// restore path
                fullpath[len] = 0;
   10306:	c8 01       	movw	r24, r16
   10308:	82 0d       	add	r24, r2
   1030a:	93 1d       	adc	r25, r3
   1030c:	c9 5c       	subi	r28, 0xC9	; 201
   1030e:	de 4f       	sbci	r29, 0xFE	; 254
   10310:	99 83       	std	Y+1, r25	; 0x01
   10312:	88 83       	st	Y, r24
   10314:	c7 53       	subi	r28, 0x37	; 55
   10316:	d1 40       	sbci	r29, 0x01	; 1
                    break;
// FIXME neeed beetter string length tests here
                len2 = strlen(de->d_name);
                if(len + len2 >= MAX_NAME_LEN)
                {
                    printf("name:[%s] too long with full path\n",de->d_name);
   10318:	81 e0       	ldi	r24, 0x01	; 1
   1031a:	9c e0       	ldi	r25, 0x0C	; 12
   1031c:	2c 01       	movw	r4, r24
   1031e:	61 2c       	mov	r6, r1
   10320:	25 c0       	rjmp	.+74     	; 0x1036c <ls+0x172>
            break;
        case S_IFDIR:
            dirp = opendir(fullpath);
            if(!dirp)
            {
                printf("opendir failed\n");
   10322:	84 e2       	ldi	r24, 0x24	; 36
   10324:	9c e0       	ldi	r25, 0x0C	; 12
   10326:	a0 e0       	ldi	r26, 0x00	; 0
   10328:	ed b7       	in	r30, 0x3d	; 61
   1032a:	fe b7       	in	r31, 0x3e	; 62
   1032c:	81 83       	std	Z+1, r24	; 0x01
   1032e:	92 83       	std	Z+2, r25	; 0x02
   10330:	a3 83       	std	Z+3, r26	; 0x03
   10332:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   10336:	b7 cf       	rjmp	.-146    	; 0x102a6 <ls+0xac>
                return(-1);
            }
            while ( (de = readdir(dirp)) )
            {
                if(de->d_name[0] == 0)
   10338:	f6 01       	movw	r30, r12
   1033a:	80 81       	ld	r24, Z
   1033c:	88 23       	and	r24, r24
   1033e:	e1 f0       	breq	.+56     	; 0x10378 <ls+0x17e>
                    break;
// FIXME neeed beetter string length tests here
                len2 = strlen(de->d_name);
   10340:	f6 01       	movw	r30, r12
   10342:	01 90       	ld	r0, Z+
   10344:	00 20       	and	r0, r0
   10346:	e9 f7       	brne	.-6      	; 0x10342 <ls+0x148>
   10348:	31 97       	sbiw	r30, 0x01	; 1
   1034a:	ec 19       	sub	r30, r12
   1034c:	fd 09       	sbc	r31, r13
                if(len + len2 >= MAX_NAME_LEN)
   1034e:	e2 0d       	add	r30, r2
   10350:	f3 1d       	adc	r31, r3
   10352:	ef 3f       	cpi	r30, 0xFF	; 255
   10354:	f1 05       	cpc	r31, r1
   10356:	a1 f0       	breq	.+40     	; 0x10380 <ls+0x186>
   10358:	9c f0       	brlt	.+38     	; 0x10380 <ls+0x186>
                {
                    printf("name:[%s] too long with full path\n",de->d_name);
   1035a:	ed b7       	in	r30, 0x3d	; 61
   1035c:	fe b7       	in	r31, 0x3e	; 62
   1035e:	d5 82       	std	Z+5, r13	; 0x05
   10360:	c4 82       	std	Z+4, r12	; 0x04
   10362:	41 82       	std	Z+1, r4	; 0x01
   10364:	52 82       	std	Z+2, r5	; 0x02
   10366:	63 82       	std	Z+3, r6	; 0x03
   10368:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
            if(!dirp)
            {
                printf("opendir failed\n");
                return(-1);
            }
            while ( (de = readdir(dirp)) )
   1036c:	c5 01       	movw	r24, r10
   1036e:	0e 94 65 78 	call	0xf0ca	; 0xf0ca <readdir>
   10372:	6c 01       	movw	r12, r24
   10374:	89 2b       	or	r24, r25
   10376:	01 f7       	brne	.-64     	; 0x10338 <ls+0x13e>
#ifdef ESP8266
                optimistic_yield(1000);
                wdt_reset();
#endif
            }
            closedir(dirp);
   10378:	c5 01       	movw	r24, r10
   1037a:	0e 94 2c 78 	call	0xf058	; 0xf058 <closedir>
            break;
   1037e:	1f c0       	rjmp	.+62     	; 0x103be <ls+0x1c4>
                if(len + len2 >= MAX_NAME_LEN)
                {
                    printf("name:[%s] too long with full path\n",de->d_name);
                    continue;
                }
                if(!MATCH(fullpath,"/") )
   10380:	66 ea       	ldi	r22, 0xA6	; 166
   10382:	78 e0       	ldi	r23, 0x08	; 8
   10384:	c8 01       	movw	r24, r16
   10386:	0e 94 69 32 	call	0x64d2	; 0x64d2 <MATCH>
   1038a:	89 2b       	or	r24, r25
   1038c:	29 f4       	brne	.+10     	; 0x10398 <ls+0x19e>
                {
                    strcat(fullpath,"/");
   1038e:	66 ea       	ldi	r22, 0xA6	; 166
   10390:	78 e0       	ldi	r23, 0x08	; 8
   10392:	c8 01       	movw	r24, r16
   10394:	0e 94 92 31 	call	0x6324	; 0x6324 <strcat>
                }
                strcat(fullpath,de->d_name);
   10398:	b6 01       	movw	r22, r12
   1039a:	c8 01       	movw	r24, r16
   1039c:	0e 94 92 31 	call	0x6324	; 0x6324 <strcat>
                files +=ls_info(fullpath,verbose);
   103a0:	b4 01       	movw	r22, r8
   103a2:	c8 01       	movw	r24, r16
   103a4:	6f de       	rcall	.-802    	; 0x10084 <ls_info>
   103a6:	e8 0e       	add	r14, r24
   103a8:	f9 1e       	adc	r15, r25
// restore path
                fullpath[len] = 0;
   103aa:	c9 5c       	subi	r28, 0xC9	; 201
   103ac:	de 4f       	sbci	r29, 0xFE	; 254
   103ae:	e8 81       	ld	r30, Y
   103b0:	f9 81       	ldd	r31, Y+1	; 0x01
   103b2:	c7 53       	subi	r28, 0x37	; 55
   103b4:	d1 40       	sbci	r29, 0x01	; 1
   103b6:	10 82       	st	Z, r1
   103b8:	d9 cf       	rjmp	.-78     	; 0x1036c <ls+0x172>
MEMSPACE
int ls(char *name, int verbose)
{
    struct stat st;
    DIR *dirp;
    int files = 0;
   103ba:	e1 2c       	mov	r14, r1
   103bc:	f1 2c       	mov	r15, r1
#endif
            }
            closedir(dirp);
            break;
    }
    printf("Files: %d\n", (int)files);
   103be:	ed b7       	in	r30, 0x3d	; 61
   103c0:	fe b7       	in	r31, 0x3e	; 62
   103c2:	f5 82       	std	Z+5, r15	; 0x05
   103c4:	e4 82       	std	Z+4, r14	; 0x04
   103c6:	86 ef       	ldi	r24, 0xF6	; 246
   103c8:	9b e0       	ldi	r25, 0x0B	; 11
   103ca:	a0 e0       	ldi	r26, 0x00	; 0
   103cc:	81 83       	std	Z+1, r24	; 0x01
   103ce:	92 83       	std	Z+2, r25	; 0x02
   103d0:	a3 83       	std	Z+3, r26	; 0x03
   103d2:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    return(files);
   103d6:	c7 01       	movw	r24, r14
}
   103d8:	c8 5c       	subi	r28, 0xC8	; 200
   103da:	de 4f       	sbci	r29, 0xFE	; 254
   103dc:	0f b6       	in	r0, 0x3f	; 63
   103de:	f8 94       	cli
   103e0:	de bf       	out	0x3e, r29	; 62
   103e2:	0f be       	out	0x3f, r0	; 63
   103e4:	cd bf       	out	0x3d, r28	; 61
   103e6:	df 91       	pop	r29
   103e8:	cf 91       	pop	r28
   103ea:	1f 91       	pop	r17
   103ec:	0f 91       	pop	r16
   103ee:	ff 90       	pop	r15
   103f0:	ef 90       	pop	r14
   103f2:	df 90       	pop	r13
   103f4:	cf 90       	pop	r12
   103f6:	bf 90       	pop	r11
   103f8:	af 90       	pop	r10
   103fa:	9f 90       	pop	r9
   103fc:	8f 90       	pop	r8
   103fe:	6f 90       	pop	r6
   10400:	5f 90       	pop	r5
   10402:	4f 90       	pop	r4
   10404:	3f 90       	pop	r3
   10406:	2f 90       	pop	r2
   10408:	08 95       	ret

0001040a <posix_tests>:
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int posix_tests(int argc,char *argv[])
{
   1040a:	a7 e0       	ldi	r26, 0x07	; 7
   1040c:	b1 e0       	ldi	r27, 0x01	; 1
   1040e:	eb e0       	ldi	r30, 0x0B	; 11
   10410:	f2 e8       	ldi	r31, 0x82	; 130
   10412:	0c 94 01 e7 	jmp	0x1ce02	; 0x1ce02 <__prologue_saves__+0x4>
    char *ptr;
    int ind = 0;

	if(argc < 1)
   10416:	18 16       	cp	r1, r24
   10418:	19 06       	cpc	r1, r25
   1041a:	1c f0       	brlt	.+6      	; 0x10422 <posix_tests+0x18>
		return(0);
   1041c:	80 e0       	ldi	r24, 0x00	; 0
   1041e:	90 e0       	ldi	r25, 0x00	; 0
   10420:	dd c1       	rjmp	.+954    	; 0x107dc <posix_tests+0x3d2>

    ptr = argv[ind++];
   10422:	fb 01       	movw	r30, r22
   10424:	c0 80       	ld	r12, Z
   10426:	d1 80       	ldd	r13, Z+1	; 0x01
	printf("argv[%d]=%s\n",(int)i, argv[i]);
}
#endif


    if(!ptr)
   10428:	c1 14       	cp	r12, r1
   1042a:	d1 04       	cpc	r13, r1
   1042c:	b9 f3       	breq	.-18     	; 0x1041c <posix_tests+0x12>
   1042e:	4b 01       	movw	r8, r22
   10430:	3c 01       	movw	r6, r24
        return(0);	// nothing no match

    if( MATCH(ptr,"posix") )
   10432:	6e eb       	ldi	r22, 0xBE	; 190
   10434:	7b e0       	ldi	r23, 0x0B	; 11
   10436:	c6 01       	movw	r24, r12
   10438:	0e 94 69 32 	call	0x64d2	; 0x64d2 <MATCH>
   1043c:	89 2b       	or	r24, r25
   1043e:	a1 f0       	breq	.+40     	; 0x10468 <posix_tests+0x5e>
    {
        ptr = argv[ind++];
   10440:	f4 01       	movw	r30, r8
   10442:	c2 80       	ldd	r12, Z+2	; 0x02
   10444:	d3 80       	ldd	r13, Z+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
   10446:	c1 14       	cp	r12, r1
   10448:	d1 04       	cpc	r13, r1
   1044a:	21 f4       	brne	.+8      	; 0x10454 <posix_tests+0x4a>
        {
            posix_help(1);
   1044c:	81 e0       	ldi	r24, 0x01	; 1
   1044e:	90 e0       	ldi	r25, 0x00	; 0
   10450:	75 dc       	rcall	.-1814   	; 0xfd3c <posix_help>
   10452:	45 c1       	rjmp	.+650    	; 0x106de <posix_tests+0x2d4>
        return(0);	// nothing no match

    if( MATCH(ptr,"posix") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
   10454:	64 e7       	ldi	r22, 0x74	; 116
   10456:	76 e1       	ldi	r23, 0x16	; 22
   10458:	c6 01       	movw	r24, r12
   1045a:	0e 94 69 32 	call	0x64d2	; 0x64d2 <MATCH>
   1045e:	89 2b       	or	r24, r25
   10460:	a9 f7       	brne	.-22     	; 0x1044c <posix_tests+0x42>
    if(!ptr)
        return(0);	// nothing no match

    if( MATCH(ptr,"posix") )
    {
        ptr = argv[ind++];
   10462:	02 e0       	ldi	r16, 0x02	; 2
   10464:	10 e0       	ldi	r17, 0x00	; 0
   10466:	02 c0       	rjmp	.+4      	; 0x1046c <posix_tests+0x62>
    int ind = 0;

	if(argc < 1)
		return(0);

    ptr = argv[ind++];
   10468:	01 e0       	ldi	r16, 0x01	; 1
   1046a:	10 e0       	ldi	r17, 0x00	; 0
            posix_help(1);
            return(1);
        }
    }

    if (MATCHARGS(ptr,"cat", (ind + 1), argc))
   1046c:	78 01       	movw	r14, r16
   1046e:	ff ef       	ldi	r31, 0xFF	; 255
   10470:	ef 1a       	sub	r14, r31
   10472:	ff 0a       	sbc	r15, r31
   10474:	93 01       	movw	r18, r6
   10476:	a7 01       	movw	r20, r14
   10478:	64 ec       	ldi	r22, 0xC4	; 196
   1047a:	7b e0       	ldi	r23, 0x0B	; 11
   1047c:	c6 01       	movw	r24, r12
   1047e:	0e 94 91 32 	call	0x6522	; 0x6522 <MATCHARGS>
   10482:	89 2b       	or	r24, r25
   10484:	99 f1       	breq	.+102    	; 0x104ec <posix_tests+0xe2>
   10486:	78 01       	movw	r14, r16
   10488:	ee 0c       	add	r14, r14
   1048a:	ff 1c       	adc	r15, r15
   1048c:	e8 0c       	add	r14, r8
   1048e:	f9 1c       	adc	r15, r9
   10490:	57 01       	movw	r10, r14
   10492:	47 01       	movw	r8, r14
   10494:	68 01       	movw	r12, r16
   10496:	41 2c       	mov	r4, r1
   10498:	51 2c       	mov	r5, r1
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   1049a:	c6 14       	cp	r12, r6
   1049c:	d7 04       	cpc	r13, r7
   1049e:	14 f5       	brge	.+68     	; 0x104e4 <posix_tests+0xda>
        {
            if(MATCH(argv[i],"-p"))
   104a0:	68 ec       	ldi	r22, 0xC8	; 200
   104a2:	7b e0       	ldi	r23, 0x0B	; 11
   104a4:	f4 01       	movw	r30, r8
   104a6:	81 91       	ld	r24, Z+
   104a8:	91 91       	ld	r25, Z+
   104aa:	4f 01       	movw	r8, r30
   104ac:	0e 94 69 32 	call	0x64d2	; 0x64d2 <MATCH>
   104b0:	89 2b       	or	r24, r25
   104b2:	19 f0       	breq	.+6      	; 0x104ba <posix_tests+0xb0>
                page = 1;
   104b4:	44 24       	eor	r4, r4
   104b6:	43 94       	inc	r4
   104b8:	51 2c       	mov	r5, r1

    if (MATCHARGS(ptr,"cat", (ind + 1), argc))
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   104ba:	ff ef       	ldi	r31, 0xFF	; 255
   104bc:	cf 1a       	sub	r12, r31
   104be:	df 0a       	sbc	r13, r31
   104c0:	ec cf       	rjmp	.-40     	; 0x1049a <posix_tests+0x90>
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
        {
            if(!MATCH(argv[i],"-p"))
   104c2:	68 ec       	ldi	r22, 0xC8	; 200
   104c4:	7b e0       	ldi	r23, 0x0B	; 11
   104c6:	f5 01       	movw	r30, r10
   104c8:	81 91       	ld	r24, Z+
   104ca:	91 91       	ld	r25, Z+
   104cc:	5f 01       	movw	r10, r30
   104ce:	0e 94 69 32 	call	0x64d2	; 0x64d2 <MATCH>
   104d2:	89 2b       	or	r24, r25
   104d4:	29 f4       	brne	.+10     	; 0x104e0 <posix_tests+0xd6>
			{
				// displays its own errors
                cat(argv[ind], page);
   104d6:	b2 01       	movw	r22, r4
   104d8:	f7 01       	movw	r30, r14
   104da:	80 81       	ld	r24, Z
   104dc:	91 81       	ldd	r25, Z+1	; 0x01
   104de:	65 dd       	rcall	.-1334   	; 0xffaa <cat>
        for(i=ind;i<argc;++i)
        {
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
   104e0:	0f 5f       	subi	r16, 0xFF	; 255
   104e2:	1f 4f       	sbci	r17, 0xFF	; 255
   104e4:	06 15       	cp	r16, r6
   104e6:	17 05       	cpc	r17, r7
   104e8:	64 f3       	brlt	.-40     	; 0x104c2 <posix_tests+0xb8>
   104ea:	f9 c0       	rjmp	.+498    	; 0x106de <posix_tests+0x2d4>
		}
        return(1);
    }
#endif

    else if (MATCHARGS(ptr,"copy", (ind + 2), argc))
   104ec:	58 01       	movw	r10, r16
   104ee:	f2 e0       	ldi	r31, 0x02	; 2
   104f0:	af 0e       	add	r10, r31
   104f2:	b1 1c       	adc	r11, r1
   104f4:	93 01       	movw	r18, r6
   104f6:	a5 01       	movw	r20, r10
   104f8:	6b ec       	ldi	r22, 0xCB	; 203
   104fa:	7b e0       	ldi	r23, 0x0B	; 11
   104fc:	c6 01       	movw	r24, r12
   104fe:	0e 94 91 32 	call	0x6522	; 0x6522 <MATCHARGS>
   10502:	89 2b       	or	r24, r25
   10504:	69 f0       	breq	.+26     	; 0x10520 <posix_tests+0x116>
    {
		if( copy(argv[ind],argv[ind+1]) < 0)
   10506:	f8 01       	movw	r30, r16
   10508:	ee 0f       	add	r30, r30
   1050a:	ff 1f       	adc	r31, r31
   1050c:	e8 0d       	add	r30, r8
   1050e:	f9 1d       	adc	r31, r9
   10510:	62 81       	ldd	r22, Z+2	; 0x02
   10512:	73 81       	ldd	r23, Z+3	; 0x03
   10514:	80 81       	ld	r24, Z
   10516:	91 81       	ldd	r25, Z+1	; 0x01
   10518:	32 dc       	rcall	.-1948   	; 0xfd7e <copy>
   1051a:	97 ff       	sbrs	r25, 7
   1051c:	e0 c0       	rjmp	.+448    	; 0x106de <posix_tests+0x2d4>
   1051e:	5c c1       	rjmp	.+696    	; 0x107d8 <posix_tests+0x3ce>
			return(-1);
        return(1);
    }

    else if (MATCHARGS(ptr,"cd", (ind + 1), argc))
   10520:	93 01       	movw	r18, r6
   10522:	a7 01       	movw	r20, r14
   10524:	60 ed       	ldi	r22, 0xD0	; 208
   10526:	7b e0       	ldi	r23, 0x0B	; 11
   10528:	c6 01       	movw	r24, r12
   1052a:	0e 94 91 32 	call	0x6522	; 0x6522 <MATCHARGS>
   1052e:	89 2b       	or	r24, r25
   10530:	b9 f0       	breq	.+46     	; 0x10560 <posix_tests+0x156>
    {
        if ( chdir(argv[ind]) != 0)
   10532:	78 01       	movw	r14, r16
   10534:	ee 0c       	add	r14, r14
   10536:	ff 1c       	adc	r15, r15
   10538:	e8 0c       	add	r14, r8
   1053a:	f9 1c       	adc	r15, r9
   1053c:	f7 01       	movw	r30, r14
   1053e:	80 81       	ld	r24, Z
   10540:	91 81       	ldd	r25, Z+1	; 0x01
   10542:	0e 94 51 77 	call	0xeea2	; 0xeea2 <chdir>
   10546:	89 2b       	or	r24, r25
   10548:	09 f4       	brne	.+2      	; 0x1054c <posix_tests+0x142>
   1054a:	c9 c0       	rjmp	.+402    	; 0x106de <posix_tests+0x2d4>
		{
            printf("chdir %s failed\n", argv[ind]);
   1054c:	f7 01       	movw	r30, r14
   1054e:	80 81       	ld	r24, Z
   10550:	91 81       	ldd	r25, Z+1	; 0x01
   10552:	ed b7       	in	r30, 0x3d	; 61
   10554:	fe b7       	in	r31, 0x3e	; 62
   10556:	95 83       	std	Z+5, r25	; 0x05
   10558:	84 83       	std	Z+4, r24	; 0x04
   1055a:	8d ea       	ldi	r24, 0xAD	; 173
   1055c:	9d e0       	ldi	r25, 0x0D	; 13
   1055e:	36 c1       	rjmp	.+620    	; 0x107cc <posix_tests+0x3c2>
			return(-1);
        return(1);
    }
#endif

    else if (MATCHI(ptr,"ls") )
   10560:	68 ed       	ldi	r22, 0xD8	; 216
   10562:	78 e0       	ldi	r23, 0x08	; 8
   10564:	c6 01       	movw	r24, r12
   10566:	0e 94 7d 32 	call	0x64fa	; 0x64fa <MATCHI>
   1056a:	89 2b       	or	r24, r25
   1056c:	09 f4       	brne	.+2      	; 0x10570 <posix_tests+0x166>
   1056e:	40 c0       	rjmp	.+128    	; 0x105f0 <posix_tests+0x1e6>
   10570:	78 01       	movw	r14, r16
   10572:	ee 0c       	add	r14, r14
   10574:	ff 1c       	adc	r15, r15
   10576:	e8 0c       	add	r14, r8
   10578:	f9 1c       	adc	r15, r9
   1057a:	c1 2c       	mov	r12, r1
   1057c:	d1 2c       	mov	r13, r1
        int args = 0;
        for(i=ind;i<argc;++i)
        {
			if(!argv[i])
			{
				printf("ls: null argument # %d\n", i);
   1057e:	85 e9       	ldi	r24, 0x95	; 149
   10580:	9d e0       	ldi	r25, 0x0D	; 13
   10582:	4c 01       	movw	r8, r24
   10584:	a1 2c       	mov	r10, r1

    else if (MATCHI(ptr,"ls") )
    {
        int i;
        int args = 0;
        for(i=ind;i<argc;++i)
   10586:	06 15       	cp	r16, r6
   10588:	17 05       	cpc	r17, r7
   1058a:	34 f5       	brge	.+76     	; 0x105d8 <posix_tests+0x1ce>
        {
			if(!argv[i])
   1058c:	f7 01       	movw	r30, r14
   1058e:	80 81       	ld	r24, Z
   10590:	91 81       	ldd	r25, Z+1	; 0x01
   10592:	00 97       	sbiw	r24, 0x00	; 0
   10594:	51 f4       	brne	.+20     	; 0x105aa <posix_tests+0x1a0>
			{
				printf("ls: null argument # %d\n", i);
   10596:	ed b7       	in	r30, 0x3d	; 61
   10598:	fe b7       	in	r31, 0x3e	; 62
   1059a:	15 83       	std	Z+5, r17	; 0x05
   1059c:	04 83       	std	Z+4, r16	; 0x04
   1059e:	81 82       	std	Z+1, r8	; 0x01
   105a0:	92 82       	std	Z+2, r9	; 0x02
   105a2:	a3 82       	std	Z+3, r10	; 0x03
   105a4:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
				continue;
   105a8:	11 c0       	rjmp	.+34     	; 0x105cc <posix_tests+0x1c2>
			}
            if(MATCH(argv[i],"-l"))	// skip long format test - we always use long format
   105aa:	63 ed       	ldi	r22, 0xD3	; 211
   105ac:	7b e0       	ldi	r23, 0x0B	; 11
   105ae:	0e 94 69 32 	call	0x64d2	; 0x64d2 <MATCH>
   105b2:	89 2b       	or	r24, r25
   105b4:	59 f4       	brne	.+22     	; 0x105cc <posix_tests+0x1c2>
				continue;
			if( ls(argv[i],1) < 0)
   105b6:	61 e0       	ldi	r22, 0x01	; 1
   105b8:	70 e0       	ldi	r23, 0x00	; 0
   105ba:	f7 01       	movw	r30, r14
   105bc:	80 81       	ld	r24, Z
   105be:	91 81       	ldd	r25, Z+1	; 0x01
   105c0:	1c de       	rcall	.-968    	; 0x101fa <ls>
   105c2:	97 fd       	sbrc	r25, 7
   105c4:	09 c1       	rjmp	.+530    	; 0x107d8 <posix_tests+0x3ce>
			{
				return(-1);
			};
            ++args;
   105c6:	ff ef       	ldi	r31, 0xFF	; 255
   105c8:	cf 1a       	sub	r12, r31
   105ca:	df 0a       	sbc	r13, r31

    else if (MATCHI(ptr,"ls") )
    {
        int i;
        int args = 0;
        for(i=ind;i<argc;++i)
   105cc:	0f 5f       	subi	r16, 0xFF	; 255
   105ce:	1f 4f       	sbci	r17, 0xFF	; 255
   105d0:	82 e0       	ldi	r24, 0x02	; 2
   105d2:	e8 0e       	add	r14, r24
   105d4:	f1 1c       	adc	r15, r1
   105d6:	d7 cf       	rjmp	.-82     	; 0x10586 <posix_tests+0x17c>
			{
				return(-1);
			};
            ++args;
        }
        if(!args)
   105d8:	c1 14       	cp	r12, r1
   105da:	d1 04       	cpc	r13, r1
   105dc:	09 f0       	breq	.+2      	; 0x105e0 <posix_tests+0x1d6>
   105de:	7f c0       	rjmp	.+254    	; 0x106de <posix_tests+0x2d4>
        {
            if( ls("",1) < 0)
   105e0:	61 e0       	ldi	r22, 0x01	; 1
   105e2:	70 e0       	ldi	r23, 0x00	; 0
   105e4:	80 e2       	ldi	r24, 0x20	; 32
   105e6:	9c e0       	ldi	r25, 0x0C	; 12
   105e8:	08 de       	rcall	.-1008   	; 0x101fa <ls>
   105ea:	97 ff       	sbrs	r25, 7
   105ec:	78 c0       	rjmp	.+240    	; 0x106de <posix_tests+0x2d4>
   105ee:	f4 c0       	rjmp	.+488    	; 0x107d8 <posix_tests+0x3ce>
		}
        return(1);
    }
#endif

    else if (MATCHARGS(ptr,"mkdir", (ind + 1), argc))
   105f0:	93 01       	movw	r18, r6
   105f2:	a7 01       	movw	r20, r14
   105f4:	66 ed       	ldi	r22, 0xD6	; 214
   105f6:	7b e0       	ldi	r23, 0x0B	; 11
   105f8:	c6 01       	movw	r24, r12
   105fa:	0e 94 91 32 	call	0x6522	; 0x6522 <MATCHARGS>
   105fe:	89 2b       	or	r24, r25
   10600:	79 f1       	breq	.+94     	; 0x10660 <posix_tests+0x256>
    {
        int mode = 0777;
        if((ind+2) <= argc)
   10602:	e6 14       	cp	r14, r6
   10604:	f7 04       	cpc	r15, r7
   10606:	7c f4       	brge	.+30     	; 0x10626 <posix_tests+0x21c>
        {
            mode = strtol(argv[ind+1],NULL,8);
   10608:	ee 0c       	add	r14, r14
   1060a:	ff 1c       	adc	r15, r15
   1060c:	f4 01       	movw	r30, r8
   1060e:	ee 0d       	add	r30, r14
   10610:	ff 1d       	adc	r31, r15
   10612:	48 e0       	ldi	r20, 0x08	; 8
   10614:	50 e0       	ldi	r21, 0x00	; 0
   10616:	60 e0       	ldi	r22, 0x00	; 0
   10618:	70 e0       	ldi	r23, 0x00	; 0
   1061a:	80 81       	ld	r24, Z
   1061c:	91 81       	ldd	r25, Z+1	; 0x01
   1061e:	0e 94 6b 47 	call	0x8ed6	; 0x8ed6 <strtol>
   10622:	ab 01       	movw	r20, r22
   10624:	02 c0       	rjmp	.+4      	; 0x1062a <posix_tests+0x220>
    }
#endif

    else if (MATCHARGS(ptr,"mkdir", (ind + 1), argc))
    {
        int mode = 0777;
   10626:	4f ef       	ldi	r20, 0xFF	; 255
   10628:	51 e0       	ldi	r21, 0x01	; 1
        if((ind+2) <= argc)
        {
            mode = strtol(argv[ind+1],NULL,8);
        }
        if ( mkdir(argv[ind],mode) != 0 )
   1062a:	78 01       	movw	r14, r16
   1062c:	ee 0c       	add	r14, r14
   1062e:	ff 1c       	adc	r15, r15
   10630:	e8 0c       	add	r14, r8
   10632:	f9 1c       	adc	r15, r9
   10634:	05 2e       	mov	r0, r21
   10636:	00 0c       	add	r0, r0
   10638:	66 0b       	sbc	r22, r22
   1063a:	77 0b       	sbc	r23, r23
   1063c:	f7 01       	movw	r30, r14
   1063e:	80 81       	ld	r24, Z
   10640:	91 81       	ldd	r25, Z+1	; 0x01
   10642:	0e 94 be 77 	call	0xef7c	; 0xef7c <mkdir>
   10646:	89 2b       	or	r24, r25
   10648:	09 f4       	brne	.+2      	; 0x1064c <posix_tests+0x242>
   1064a:	49 c0       	rjmp	.+146    	; 0x106de <posix_tests+0x2d4>
        {
            printf("mkdir %s failed\n", argv[ind]);
   1064c:	f7 01       	movw	r30, r14
   1064e:	80 81       	ld	r24, Z
   10650:	91 81       	ldd	r25, Z+1	; 0x01
   10652:	ed b7       	in	r30, 0x3d	; 61
   10654:	fe b7       	in	r31, 0x3e	; 62
   10656:	95 83       	std	Z+5, r25	; 0x05
   10658:	84 83       	std	Z+4, r24	; 0x04
   1065a:	84 e8       	ldi	r24, 0x84	; 132
   1065c:	9d e0       	ldi	r25, 0x0D	; 13
   1065e:	b6 c0       	rjmp	.+364    	; 0x107cc <posix_tests+0x3c2>
            return(-1);
        }
        return(1);
    }

    else if (MATCHARGS(ptr,"page", (ind + 1), argc))
   10660:	93 01       	movw	r18, r6
   10662:	a7 01       	movw	r20, r14
   10664:	6c ed       	ldi	r22, 0xDC	; 220
   10666:	7b e0       	ldi	r23, 0x0B	; 11
   10668:	c6 01       	movw	r24, r12
   1066a:	0e 94 91 32 	call	0x6522	; 0x6522 <MATCHARGS>
   1066e:	89 2b       	or	r24, r25
   10670:	71 f0       	breq	.+28     	; 0x1068e <posix_tests+0x284>
    {
        setpage(atoi(argv[ind]));
   10672:	00 0f       	add	r16, r16
   10674:	11 1f       	adc	r17, r17
   10676:	f4 01       	movw	r30, r8
   10678:	e0 0f       	add	r30, r16
   1067a:	f1 1f       	adc	r31, r17
   1067c:	80 81       	ld	r24, Z
   1067e:	91 81       	ldd	r25, Z+1	; 0x01
   10680:	0e 94 c9 47 	call	0x8f92	; 0x8f92 <atoi>
/// @retrun void
static int _pagesize = 25;
MEMSPACE
int setpage(int count)
{
    _pagesize = count;
   10684:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <_pagesize+0x1>
   10688:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <_pagesize>
   1068c:	28 c0       	rjmp	.+80     	; 0x106de <posix_tests+0x2d4>
    {
        setpage(atoi(argv[ind]));
        return(1);
    }

    else if (MATCHARGS(ptr,"pwd", (ind + 0), argc))
   1068e:	93 01       	movw	r18, r6
   10690:	a8 01       	movw	r20, r16
   10692:	61 ee       	ldi	r22, 0xE1	; 225
   10694:	7b e0       	ldi	r23, 0x0B	; 11
   10696:	c6 01       	movw	r24, r12
   10698:	0e 94 91 32 	call	0x6522	; 0x6522 <MATCHARGS>
   1069c:	89 2b       	or	r24, r25
   1069e:	11 f1       	breq	.+68     	; 0x106e4 <posix_tests+0x2da>
    {
        char path[256];
		char *ptr = getcwd(path, sizeof(path)-2);
   106a0:	6e ef       	ldi	r22, 0xFE	; 254
   106a2:	70 e0       	ldi	r23, 0x00	; 0
   106a4:	ce 01       	movw	r24, r28
   106a6:	08 96       	adiw	r24, 0x08	; 8
   106a8:	0e 94 99 77 	call	0xef32	; 0xef32 <getcwd>
		if(ptr == NULL)
   106ac:	00 97       	sbiw	r24, 0x00	; 0
   106ae:	59 f4       	brne	.+22     	; 0x106c6 <posix_tests+0x2bc>
		{
			printf("pwd FAILED\n");
   106b0:	88 e7       	ldi	r24, 0x78	; 120
   106b2:	9d e0       	ldi	r25, 0x0D	; 13
   106b4:	a0 e0       	ldi	r26, 0x00	; 0
   106b6:	ed b7       	in	r30, 0x3d	; 61
   106b8:	fe b7       	in	r31, 0x3e	; 62
   106ba:	81 83       	std	Z+1, r24	; 0x01
   106bc:	92 83       	std	Z+2, r25	; 0x02
   106be:	a3 83       	std	Z+3, r26	; 0x03
   106c0:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   106c4:	89 c0       	rjmp	.+274    	; 0x107d8 <posix_tests+0x3ce>
			return(-1);
		}
        printf("%s\n", ptr);
   106c6:	ed b7       	in	r30, 0x3d	; 61
   106c8:	fe b7       	in	r31, 0x3e	; 62
   106ca:	95 83       	std	Z+5, r25	; 0x05
   106cc:	84 83       	std	Z+4, r24	; 0x04
   106ce:	84 e7       	ldi	r24, 0x74	; 116
   106d0:	9d e0       	ldi	r25, 0x0D	; 13
   106d2:	a0 e0       	ldi	r26, 0x00	; 0
   106d4:	81 83       	std	Z+1, r24	; 0x01
   106d6:	92 83       	std	Z+2, r25	; 0x02
   106d8:	a3 83       	std	Z+3, r26	; 0x03
   106da:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
        return(1);
   106de:	81 e0       	ldi	r24, 0x01	; 1
   106e0:	90 e0       	ldi	r25, 0x00	; 0
   106e2:	7c c0       	rjmp	.+248    	; 0x107dc <posix_tests+0x3d2>
    }

    else if (MATCHARGS(ptr,"rename", (ind + 2), argc))
   106e4:	93 01       	movw	r18, r6
   106e6:	a5 01       	movw	r20, r10
   106e8:	65 ee       	ldi	r22, 0xE5	; 229
   106ea:	7b e0       	ldi	r23, 0x0B	; 11
   106ec:	c6 01       	movw	r24, r12
   106ee:	0e 94 91 32 	call	0x6522	; 0x6522 <MATCHARGS>
   106f2:	89 2b       	or	r24, r25
   106f4:	59 f1       	breq	.+86     	; 0x1074c <posix_tests+0x342>
    {
        if( rename(argv[ind],argv[ind+1]) != 0)
   106f6:	00 0f       	add	r16, r16
   106f8:	11 1f       	adc	r17, r17
   106fa:	64 01       	movw	r12, r8
   106fc:	c0 0e       	add	r12, r16
   106fe:	d1 1e       	adc	r13, r17
   10700:	0e 5f       	subi	r16, 0xFE	; 254
   10702:	1f 4f       	sbci	r17, 0xFF	; 255
   10704:	74 01       	movw	r14, r8
   10706:	e0 0e       	add	r14, r16
   10708:	f1 1e       	adc	r15, r17
   1070a:	f7 01       	movw	r30, r14
   1070c:	60 81       	ld	r22, Z
   1070e:	71 81       	ldd	r23, Z+1	; 0x01
   10710:	f6 01       	movw	r30, r12
   10712:	80 81       	ld	r24, Z
   10714:	91 81       	ldd	r25, Z+1	; 0x01
   10716:	0e 94 ec 77 	call	0xefd8	; 0xefd8 <rename>
   1071a:	89 2b       	or	r24, r25
   1071c:	01 f3       	breq	.-64     	; 0x106de <posix_tests+0x2d4>
        {
            printf("rename %s to %s\n", argv[ind], argv[ind+1]);
   1071e:	f7 01       	movw	r30, r14
   10720:	80 81       	ld	r24, Z
   10722:	91 81       	ldd	r25, Z+1	; 0x01
   10724:	ed b7       	in	r30, 0x3d	; 61
   10726:	fe b7       	in	r31, 0x3e	; 62
   10728:	97 83       	std	Z+7, r25	; 0x07
   1072a:	86 83       	std	Z+6, r24	; 0x06
   1072c:	f6 01       	movw	r30, r12
   1072e:	80 81       	ld	r24, Z
   10730:	91 81       	ldd	r25, Z+1	; 0x01
   10732:	ed b7       	in	r30, 0x3d	; 61
   10734:	fe b7       	in	r31, 0x3e	; 62
   10736:	95 83       	std	Z+5, r25	; 0x05
   10738:	84 83       	std	Z+4, r24	; 0x04
   1073a:	83 e6       	ldi	r24, 0x63	; 99
   1073c:	9d e0       	ldi	r25, 0x0D	; 13
   1073e:	a0 e0       	ldi	r26, 0x00	; 0
   10740:	81 83       	std	Z+1, r24	; 0x01
   10742:	92 83       	std	Z+2, r25	; 0x02
   10744:	a3 83       	std	Z+3, r26	; 0x03
   10746:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   1074a:	46 c0       	rjmp	.+140    	; 0x107d8 <posix_tests+0x3ce>
            return(-1);
        }
        return(1);
    }

    else if (MATCHARGS(ptr,"rm", (ind + 1), argc))
   1074c:	93 01       	movw	r18, r6
   1074e:	a7 01       	movw	r20, r14
   10750:	6c ee       	ldi	r22, 0xEC	; 236
   10752:	7b e0       	ldi	r23, 0x0B	; 11
   10754:	c6 01       	movw	r24, r12
   10756:	0e 94 91 32 	call	0x6522	; 0x6522 <MATCHARGS>
   1075a:	89 2b       	or	r24, r25
   1075c:	b9 f0       	breq	.+46     	; 0x1078c <posix_tests+0x382>
    {
        if ( unlink(argv[ind]) != 0)
   1075e:	78 01       	movw	r14, r16
   10760:	ee 0c       	add	r14, r14
   10762:	ff 1c       	adc	r15, r15
   10764:	e8 0c       	add	r14, r8
   10766:	f9 1c       	adc	r15, r9
   10768:	f7 01       	movw	r30, r14
   1076a:	80 81       	ld	r24, Z
   1076c:	91 81       	ldd	r25, Z+1	; 0x01
   1076e:	0e 94 0b 78 	call	0xf016	; 0xf016 <unlink>
   10772:	89 2b       	or	r24, r25
   10774:	09 f4       	brne	.+2      	; 0x10778 <posix_tests+0x36e>
   10776:	b3 cf       	rjmp	.-154    	; 0x106de <posix_tests+0x2d4>
        {
            printf("rm %s failed\n", argv[ind]);
   10778:	f7 01       	movw	r30, r14
   1077a:	80 81       	ld	r24, Z
   1077c:	91 81       	ldd	r25, Z+1	; 0x01
   1077e:	ed b7       	in	r30, 0x3d	; 61
   10780:	fe b7       	in	r31, 0x3e	; 62
   10782:	95 83       	std	Z+5, r25	; 0x05
   10784:	84 83       	std	Z+4, r24	; 0x04
   10786:	85 e5       	ldi	r24, 0x55	; 85
   10788:	9d e0       	ldi	r25, 0x0D	; 13
   1078a:	20 c0       	rjmp	.+64     	; 0x107cc <posix_tests+0x3c2>
        dump_stat(&p);
        return(1);
    }
#endif

    else if (MATCHARGS(ptr,"rmdir", (ind + 1), argc))
   1078c:	93 01       	movw	r18, r6
   1078e:	a7 01       	movw	r20, r14
   10790:	6f ee       	ldi	r22, 0xEF	; 239
   10792:	7b e0       	ldi	r23, 0x0B	; 11
   10794:	c6 01       	movw	r24, r12
   10796:	0e 94 91 32 	call	0x6522	; 0x6522 <MATCHARGS>
   1079a:	89 2b       	or	r24, r25
   1079c:	09 f4       	brne	.+2      	; 0x107a0 <posix_tests+0x396>
   1079e:	3e ce       	rjmp	.-900    	; 0x1041c <posix_tests+0x12>
    {
        if ( rmdir(argv[ind]) != 0)
   107a0:	78 01       	movw	r14, r16
   107a2:	ee 0c       	add	r14, r14
   107a4:	ff 1c       	adc	r15, r15
   107a6:	e8 0c       	add	r14, r8
   107a8:	f9 1c       	adc	r15, r9
   107aa:	f7 01       	movw	r30, r14
   107ac:	80 81       	ld	r24, Z
   107ae:	91 81       	ldd	r25, Z+1	; 0x01
   107b0:	0e 94 2a 78 	call	0xf054	; 0xf054 <rmdir>
   107b4:	89 2b       	or	r24, r25
   107b6:	09 f4       	brne	.+2      	; 0x107ba <posix_tests+0x3b0>
   107b8:	92 cf       	rjmp	.-220    	; 0x106de <posix_tests+0x2d4>
        {
            printf("rmdir %s failed\n", argv[ind]);
   107ba:	f7 01       	movw	r30, r14
   107bc:	80 81       	ld	r24, Z
   107be:	91 81       	ldd	r25, Z+1	; 0x01
   107c0:	ed b7       	in	r30, 0x3d	; 61
   107c2:	fe b7       	in	r31, 0x3e	; 62
   107c4:	95 83       	std	Z+5, r25	; 0x05
   107c6:	84 83       	std	Z+4, r24	; 0x04
   107c8:	84 e4       	ldi	r24, 0x44	; 68
   107ca:	9d e0       	ldi	r25, 0x0D	; 13
   107cc:	a0 e0       	ldi	r26, 0x00	; 0
   107ce:	81 83       	std	Z+1, r24	; 0x01
   107d0:	92 83       	std	Z+2, r25	; 0x02
   107d2:	a3 83       	std	Z+3, r26	; 0x03
   107d4:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
            return(-1);
   107d8:	8f ef       	ldi	r24, 0xFF	; 255
   107da:	9f ef       	ldi	r25, 0xFF	; 255
        return(1);
    }
#endif

    return(0);
}
   107dc:	c9 5f       	subi	r28, 0xF9	; 249
   107de:	de 4f       	sbci	r29, 0xFE	; 254
   107e0:	e0 e1       	ldi	r30, 0x10	; 16
   107e2:	0c 94 1d e7 	jmp	0x1ce3a	; 0x1ce3a <__epilogue_restores__+0x4>

000107e6 <gpib_timer_init>:
///
/// - Has some platform dependent code.
/// @return  void

void gpib_timer_init()
{
   107e6:	00 d0       	rcall	.+0      	; 0x107e8 <gpib_timer_init+0x2>
   107e8:	1f 92       	push	r1
    if(set_timers(gpib_timer_task,1) == -1)       // Install Clock Task
   107ea:	61 e0       	ldi	r22, 0x01	; 1
   107ec:	70 e0       	ldi	r23, 0x00	; 0
   107ee:	8f ea       	ldi	r24, 0xAF	; 175
   107f0:	95 e8       	ldi	r25, 0x85	; 133
   107f2:	0e 94 de 34 	call	0x69bc	; 0x69bc <set_timers>
   107f6:	01 96       	adiw	r24, 0x01	; 1
   107f8:	51 f4       	brne	.+20     	; 0x1080e <gpib_timer_init+0x28>
        printf("GPIB Clock task init failed\n");
   107fa:	8e ee       	ldi	r24, 0xEE	; 238
   107fc:	9e e0       	ldi	r25, 0x0E	; 14
   107fe:	a0 e0       	ldi	r26, 0x00	; 0
   10800:	ed b7       	in	r30, 0x3d	; 61
   10802:	fe b7       	in	r31, 0x3e	; 62
   10804:	81 83       	std	Z+1, r24	; 0x01
   10806:	92 83       	std	Z+2, r25	; 0x02
   10808:	a3 83       	std	Z+3, r26	; 0x03
   1080a:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>

    gpib_timer_reset();
   1080e:	95 d1       	rcall	.+810    	; 0x10b3a <gpib_timer_reset>
}
   10810:	0f 90       	pop	r0
   10812:	0f 90       	pop	r0
   10814:	0f 90       	pop	r0
   10816:	08 95       	ret

00010818 <reverse_8bits>:
/// - GPIB D1 controls last device.
///
/// @param [in] mask: bit mask to reverse.
/// @return  reversed bits
uint8_t reverse_8bits(uint8_t mask)
{
   10818:	28 2f       	mov	r18, r24
   1081a:	98 e0       	ldi	r25, 0x08	; 8
    int8_t i;
    uint8_t rmask = 0;
   1081c:	80 e0       	ldi	r24, 0x00	; 0
    for(i=0;i<8;++i)
    {
        rmask <<= 1;
   1081e:	88 0f       	add	r24, r24
        if(mask & 1)
   10820:	20 fd       	sbrc	r18, 0
            rmask |= 1;
   10822:	81 60       	ori	r24, 0x01	; 1
        mask >>= 1;
   10824:	26 95       	lsr	r18
   10826:	91 50       	subi	r25, 0x01	; 1
/// @return  reversed bits
uint8_t reverse_8bits(uint8_t mask)
{
    int8_t i;
    uint8_t rmask = 0;
    for(i=0;i<8;++i)
   10828:	d1 f7       	brne	.-12     	; 0x1081e <reverse_8bits+0x6>
        if(mask & 1)
            rmask |= 1;
        mask >>= 1;
    }
    return(rmask & 0xff);
}
   1082a:	08 95       	ret

0001082c <ppr_set>:
void ppr_set(uint8_t mask)
{
///@brief optionally reverse bit order in PPR mask
/// Used only of PPR circuit board PPR bits are not reversed in hardware
#if PPR_REVERSE_BITS == 1
    _ppr_reg = reverse_8bits(mask);
   1082c:	f5 df       	rcall	.-22     	; 0x10818 <reverse_8bits>
   1082e:	80 93 66 19 	sts	0x1966, r24	; 0x801966 <_ppr_reg>
#else
    _ppr_reg = mask;
#endif
    SPI0_TXRX_Byte(_ppr_reg);
   10832:	0e 94 38 2b 	call	0x5670	; 0x5670 <SPI0_TXRX_Byte>

    GPIB_IO_HI(PPE);
   10836:	2a 9a       	sbi	0x05, 2	; 5
   10838:	22 9a       	sbi	0x04, 2	; 4
    GPIB_IO_LOW(PPE);
   1083a:	2a 98       	cbi	0x05, 2	; 5
   1083c:	22 9a       	sbi	0x04, 2	; 4
   1083e:	08 95       	ret

00010840 <ppr_reg>:
uint8_t ppr_reg()
{
///@brief optionally reverse bit order in PPR mask
/// Used only of PPR circuit board PPR bits are not reversed in hardware
#if PPR_REVERSE_BITS == 1
    return(reverse_8bits(_ppr_reg));
   10840:	80 91 66 19 	lds	r24, 0x1966	; 0x801966 <_ppr_reg>
   10844:	e9 cf       	rjmp	.-46     	; 0x10818 <reverse_8bits>
#else
    return(_ppr_reg);
#endif
}
   10846:	08 95       	ret

00010848 <ppr_init>:
///
/// - Hides the register access implimentation from the upper level.
/// @return  void

void ppr_init()
{
   10848:	00 d0       	rcall	.+0      	; 0x1084a <ppr_init+0x2>
   1084a:	1f 92       	push	r1
#if SDEBUG
    if(debuglevel & GPIB_PPR)
   1084c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10850:	81 ff       	sbrs	r24, 1
   10852:	0a c0       	rjmp	.+20     	; 0x10868 <ppr_init+0x20>
        printf("[PPR DISABLE ALL]\n");
   10854:	8b ed       	ldi	r24, 0xDB	; 219
   10856:	9e e0       	ldi	r25, 0x0E	; 14
   10858:	a0 e0       	ldi	r26, 0x00	; 0
   1085a:	ed b7       	in	r30, 0x3d	; 61
   1085c:	fe b7       	in	r31, 0x3e	; 62
   1085e:	81 83       	std	Z+1, r24	; 0x01
   10860:	92 83       	std	Z+2, r25	; 0x02
   10862:	a3 83       	std	Z+3, r26	; 0x03
   10864:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
#endif
    ppr_set(0);
   10868:	80 e0       	ldi	r24, 0x00	; 0
   1086a:	e0 df       	rcall	.-64     	; 0x1082c <ppr_set>
}
   1086c:	0f 90       	pop	r0
   1086e:	0f 90       	pop	r0
   10870:	0f 90       	pop	r0
   10872:	08 95       	ret

00010874 <ppr_bit_set>:
/// @return  void

void ppr_bit_set(uint8_t bit)
{
///FIXME _ppr_reg = 0;
    BIT_SET(_ppr_reg,bit);
   10874:	21 e0       	ldi	r18, 0x01	; 1
   10876:	30 e0       	ldi	r19, 0x00	; 0
   10878:	01 c0       	rjmp	.+2      	; 0x1087c <ppr_bit_set+0x8>
   1087a:	22 0f       	add	r18, r18
   1087c:	8a 95       	dec	r24
   1087e:	ea f7       	brpl	.-6      	; 0x1087a <ppr_bit_set+0x6>
   10880:	80 91 66 19 	lds	r24, 0x1966	; 0x801966 <_ppr_reg>
   10884:	82 2b       	or	r24, r18
   10886:	80 93 66 19 	sts	0x1966, r24	; 0x801966 <_ppr_reg>
    ppr_set(_ppr_reg);
   1088a:	d0 cf       	rjmp	.-96     	; 0x1082c <ppr_set>
   1088c:	08 95       	ret

0001088e <ppr_bit_clr>:
/// @return  void

void ppr_bit_clr(uint8_t bit)
{
///FIXME _ppr_reg = 0;
    BIT_CLR(_ppr_reg,bit);
   1088e:	21 e0       	ldi	r18, 0x01	; 1
   10890:	30 e0       	ldi	r19, 0x00	; 0
   10892:	01 c0       	rjmp	.+2      	; 0x10896 <ppr_bit_clr+0x8>
   10894:	22 0f       	add	r18, r18
   10896:	8a 95       	dec	r24
   10898:	ea f7       	brpl	.-6      	; 0x10894 <ppr_bit_clr+0x6>
   1089a:	20 95       	com	r18
   1089c:	80 91 66 19 	lds	r24, 0x1966	; 0x801966 <_ppr_reg>
   108a0:	82 23       	and	r24, r18
   108a2:	80 93 66 19 	sts	0x1966, r24	; 0x801966 <_ppr_reg>
    ppr_set(_ppr_reg);
   108a6:	c2 cf       	rjmp	.-124    	; 0x1082c <ppr_set>
   108a8:	08 95       	ret

000108aa <dbf_open>:
/// @see ff.h
///
/// @return  FRESULT f_open(fp,path, mode);

FRESULT dbf_open (FIL* fp, const TCHAR* path, BYTE mode)
{
   108aa:	0f 93       	push	r16
   108ac:	1f 93       	push	r17
   108ae:	cf 93       	push	r28
   108b0:	df 93       	push	r29
   108b2:	00 d0       	rcall	.+0      	; 0x108b4 <dbf_open+0xa>
   108b4:	00 d0       	rcall	.+0      	; 0x108b6 <dbf_open+0xc>
   108b6:	1f 92       	push	r1
   108b8:	8b 01       	movw	r16, r22
    int rc;
    rc = f_open(fp,path, mode);
   108ba:	0e 94 d8 59 	call	0xb3b0	; 0xb3b0 <f_open>
   108be:	ec 01       	movw	r28, r24
    if(rc)
   108c0:	89 2b       	or	r24, r25
   108c2:	79 f0       	breq	.+30     	; 0x108e2 <dbf_open+0x38>
    {
        printf("Open error:[%s] ", path);
   108c4:	ed b7       	in	r30, 0x3d	; 61
   108c6:	fe b7       	in	r31, 0x3e	; 62
   108c8:	15 83       	std	Z+5, r17	; 0x05
   108ca:	04 83       	std	Z+4, r16	; 0x04
   108cc:	8a ec       	ldi	r24, 0xCA	; 202
   108ce:	9e e0       	ldi	r25, 0x0E	; 14
   108d0:	a0 e0       	ldi	r26, 0x00	; 0
   108d2:	81 83       	std	Z+1, r24	; 0x01
   108d4:	92 83       	std	Z+2, r25	; 0x02
   108d6:	a3 83       	std	Z+3, r26	; 0x03
   108d8:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
        put_rc(rc);
   108dc:	ce 01       	movw	r24, r28
   108de:	0e 94 a2 70 	call	0xe144	; 0xe144 <put_rc>
        return (rc);
    }
    return(0);
}
   108e2:	ce 01       	movw	r24, r28
   108e4:	cd b7       	in	r28, 0x3d	; 61
   108e6:	de b7       	in	r29, 0x3e	; 62
   108e8:	25 96       	adiw	r28, 0x05	; 5
   108ea:	e4 e0       	ldi	r30, 0x04	; 4
   108ec:	0c 94 29 e7 	jmp	0x1ce52	; 0x1ce52 <__epilogue_restores__+0x1c>

000108f0 <dbf_read>:
/// @see ff.h
///
/// @return  FRESULT f_read (FIL* fp, void* buff, UINT btr, UINT* br)

FRESULT dbf_read (FIL* fp, void* buff, UINT btr, UINT* br)
{
   108f0:	cf 93       	push	r28
   108f2:	df 93       	push	r29
   108f4:	00 d0       	rcall	.+0      	; 0x108f6 <dbf_read+0x6>
   108f6:	1f 92       	push	r1
    int rc;
    rc = f_read(fp, buff, btr, br);
   108f8:	0e 94 90 5b 	call	0xb720	; 0xb720 <f_read>
   108fc:	ec 01       	movw	r28, r24
    if(rc)
   108fe:	89 2b       	or	r24, r25
   10900:	69 f0       	breq	.+26     	; 0x1091c <dbf_read+0x2c>
    {
        printf("Read error: ");
   10902:	8d eb       	ldi	r24, 0xBD	; 189
   10904:	9e e0       	ldi	r25, 0x0E	; 14
   10906:	a0 e0       	ldi	r26, 0x00	; 0
   10908:	ed b7       	in	r30, 0x3d	; 61
   1090a:	fe b7       	in	r31, 0x3e	; 62
   1090c:	81 83       	std	Z+1, r24	; 0x01
   1090e:	92 83       	std	Z+2, r25	; 0x02
   10910:	a3 83       	std	Z+3, r26	; 0x03
   10912:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
        put_rc(rc);
   10916:	ce 01       	movw	r24, r28
   10918:	0e 94 a2 70 	call	0xe144	; 0xe144 <put_rc>
        return (rc);
    }
    return(0);
}
   1091c:	ce 01       	movw	r24, r28
   1091e:	cd b7       	in	r28, 0x3d	; 61
   10920:	de b7       	in	r29, 0x3e	; 62
   10922:	23 96       	adiw	r28, 0x03	; 3
   10924:	e2 e0       	ldi	r30, 0x02	; 2
   10926:	0c 94 2b e7 	jmp	0x1ce56	; 0x1ce56 <__epilogue_restores__+0x20>

0001092a <dbf_write>:
///
/// @see ff.h
/// @return  FRESULT f_write (FIL* fp, void* buff, UINT btw, UINT* bw)

FRESULT dbf_write (FIL* fp, const void* buff, UINT btw, UINT* bw)
{
   1092a:	cf 93       	push	r28
   1092c:	df 93       	push	r29
   1092e:	00 d0       	rcall	.+0      	; 0x10930 <dbf_write+0x6>
   10930:	1f 92       	push	r1
    int rc;
    rc = f_write(fp, buff, btw, bw);
   10932:	0e 94 db 5c 	call	0xb9b6	; 0xb9b6 <f_write>
   10936:	ec 01       	movw	r28, r24
    if(rc)
   10938:	89 2b       	or	r24, r25
   1093a:	69 f0       	breq	.+26     	; 0x10956 <dbf_write+0x2c>
    {
        printf("Write error: ");
   1093c:	8f ea       	ldi	r24, 0xAF	; 175
   1093e:	9e e0       	ldi	r25, 0x0E	; 14
   10940:	a0 e0       	ldi	r26, 0x00	; 0
   10942:	ed b7       	in	r30, 0x3d	; 61
   10944:	fe b7       	in	r31, 0x3e	; 62
   10946:	81 83       	std	Z+1, r24	; 0x01
   10948:	92 83       	std	Z+2, r25	; 0x02
   1094a:	a3 83       	std	Z+3, r26	; 0x03
   1094c:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
        put_rc(rc);
   10950:	ce 01       	movw	r24, r28
   10952:	0e 94 a2 70 	call	0xe144	; 0xe144 <put_rc>
        return (rc);
    }
    return(0);
}
   10956:	ce 01       	movw	r24, r28
   10958:	cd b7       	in	r28, 0x3d	; 61
   1095a:	de b7       	in	r29, 0x3e	; 62
   1095c:	23 96       	adiw	r28, 0x03	; 3
   1095e:	e2 e0       	ldi	r30, 0x02	; 2
   10960:	0c 94 2b e7 	jmp	0x1ce56	; 0x1ce56 <__epilogue_restores__+0x20>

00010964 <dbf_lseek>:
///
/// @see ff.h.
/// @return  FRESULT

FRESULT dbf_lseek (FIL* fp, DWORD ofs)
{
   10964:	cf 93       	push	r28
   10966:	df 93       	push	r29
   10968:	00 d0       	rcall	.+0      	; 0x1096a <dbf_lseek+0x6>
   1096a:	1f 92       	push	r1
    int rc;
    rc = f_lseek(fp, ofs);
   1096c:	0e 94 9c 60 	call	0xc138	; 0xc138 <f_lseek>
   10970:	ec 01       	movw	r28, r24
    if(rc)
   10972:	89 2b       	or	r24, r25
   10974:	69 f0       	breq	.+26     	; 0x10990 <dbf_lseek+0x2c>
    {
        printf("Seek error: ");
   10976:	82 ea       	ldi	r24, 0xA2	; 162
   10978:	9e e0       	ldi	r25, 0x0E	; 14
   1097a:	a0 e0       	ldi	r26, 0x00	; 0
   1097c:	ed b7       	in	r30, 0x3d	; 61
   1097e:	fe b7       	in	r31, 0x3e	; 62
   10980:	81 83       	std	Z+1, r24	; 0x01
   10982:	92 83       	std	Z+2, r25	; 0x02
   10984:	a3 83       	std	Z+3, r26	; 0x03
   10986:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
        put_rc(rc);
   1098a:	ce 01       	movw	r24, r28
   1098c:	0e 94 a2 70 	call	0xe144	; 0xe144 <put_rc>
        return (rc);
    }
    return(0);
}
   10990:	ce 01       	movw	r24, r28
   10992:	cd b7       	in	r28, 0x3d	; 61
   10994:	de b7       	in	r29, 0x3e	; 62
   10996:	23 96       	adiw	r28, 0x03	; 3
   10998:	e2 e0       	ldi	r30, 0x02	; 2
   1099a:	0c 94 2b e7 	jmp	0x1ce56	; 0x1ce56 <__epilogue_restores__+0x20>

0001099e <dbf_close>:
///
/// @see ff.h.
/// @return  FRESULT dbf_close (FIL* fp)

FRESULT dbf_close (FIL* fp)
{
   1099e:	cf 93       	push	r28
   109a0:	df 93       	push	r29
   109a2:	00 d0       	rcall	.+0      	; 0x109a4 <dbf_close+0x6>
   109a4:	1f 92       	push	r1
    int rc;
    rc = f_close(fp);
   109a6:	0e 94 f2 5e 	call	0xbde4	; 0xbde4 <f_close>
   109aa:	ec 01       	movw	r28, r24
    if(rc != FR_OK)
   109ac:	89 2b       	or	r24, r25
   109ae:	69 f0       	breq	.+26     	; 0x109ca <dbf_close+0x2c>
    {
        printf("Close error: ");
   109b0:	84 e9       	ldi	r24, 0x94	; 148
   109b2:	9e e0       	ldi	r25, 0x0E	; 14
   109b4:	a0 e0       	ldi	r26, 0x00	; 0
   109b6:	ed b7       	in	r30, 0x3d	; 61
   109b8:	fe b7       	in	r31, 0x3e	; 62
   109ba:	81 83       	std	Z+1, r24	; 0x01
   109bc:	92 83       	std	Z+2, r25	; 0x02
   109be:	a3 83       	std	Z+3, r26	; 0x03
   109c0:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
        put_rc(rc);
   109c4:	ce 01       	movw	r24, r28
   109c6:	0e 94 a2 70 	call	0xe144	; 0xe144 <put_rc>
        return (rc);
    }
    return(0);
}
   109ca:	ce 01       	movw	r24, r28
   109cc:	cd b7       	in	r28, 0x3d	; 61
   109ce:	de b7       	in	r29, 0x3e	; 62
   109d0:	23 96       	adiw	r28, 0x03	; 3
   109d2:	e2 e0       	ldi	r30, 0x02	; 2
   109d4:	0c 94 2b e7 	jmp	0x1ce56	; 0x1ce56 <__epilogue_restores__+0x20>

000109d8 <dbf_open_read>:
/// @return -1 on error.
/// @see: ff.h.
/// @return  FRESULT

int dbf_open_read(char *name, uint32_t pos, void *buff, int size, int *errors)
{
   109d8:	a6 e2       	ldi	r26, 0x26	; 38
   109da:	b2 e0       	ldi	r27, 0x02	; 2
   109dc:	e2 ef       	ldi	r30, 0xF2	; 242
   109de:	f4 e8       	ldi	r31, 0x84	; 132
   109e0:	0c 94 05 e7 	jmp	0x1ce0a	; 0x1ce0a <__prologue_saves__+0xc>
   109e4:	4a 01       	movw	r8, r20
   109e6:	5b 01       	movw	r10, r22
   109e8:	69 01       	movw	r12, r18
    int rc;
    FIL fp;
    int flags = 0;
    UINT bytes = 0;
   109ea:	cb 5d       	subi	r28, 0xDB	; 219
   109ec:	dd 4f       	sbci	r29, 0xFD	; 253
   109ee:	19 82       	std	Y+1, r1	; 0x01
   109f0:	18 82       	st	Y, r1
   109f2:	c5 52       	subi	r28, 0x25	; 37
   109f4:	d2 40       	sbci	r29, 0x02	; 2

    rc = dbf_open(&fp, name, FA_OPEN_EXISTING | FA_READ | FA_WRITE);
   109f6:	43 e0       	ldi	r20, 0x03	; 3
   109f8:	bc 01       	movw	r22, r24
   109fa:	ce 01       	movw	r24, r28
   109fc:	01 96       	adiw	r24, 0x01	; 1
   109fe:	55 df       	rcall	.-342    	; 0x108aa <dbf_open>
    if( rc != FR_OK)
   10a00:	89 2b       	or	r24, r25
   10a02:	19 f0       	breq	.+6      	; 0x10a0a <dbf_open_read+0x32>
    {
        flags |= ERR_DISK;
        flags |= ERR_READ;
        *errors = flags;
   10a04:	81 e1       	ldi	r24, 0x11	; 17
   10a06:	90 e0       	ldi	r25, 0x00	; 0
   10a08:	2f c0       	rjmp	.+94     	; 0x10a68 <dbf_open_read+0x90>
        return( -1 );
    }

///  SEEK
    rc = dbf_lseek(&fp, pos);
   10a0a:	b5 01       	movw	r22, r10
   10a0c:	a4 01       	movw	r20, r8
   10a0e:	ce 01       	movw	r24, r28
   10a10:	01 96       	adiw	r24, 0x01	; 1
   10a12:	a8 df       	rcall	.-176    	; 0x10964 <dbf_lseek>
    if( rc != FR_OK)
   10a14:	89 2b       	or	r24, r25
   10a16:	59 f0       	breq	.+22     	; 0x10a2e <dbf_open_read+0x56>
    {
        flags |= ERR_SEEK;
        flags |= ERR_READ;
        *errors = flags;
   10a18:	85 e0       	ldi	r24, 0x05	; 5
   10a1a:	90 e0       	ldi	r25, 0x00	; 0
   10a1c:	f7 01       	movw	r30, r14
   10a1e:	91 83       	std	Z+1, r25	; 0x01
   10a20:	80 83       	st	Z, r24
        dbf_close(&fp);
   10a22:	ce 01       	movw	r24, r28
   10a24:	01 96       	adiw	r24, 0x01	; 1
   10a26:	bb df       	rcall	.-138    	; 0x1099e <dbf_close>
        return( -1 );
   10a28:	8f ef       	ldi	r24, 0xFF	; 255
   10a2a:	9f ef       	ldi	r25, 0xFF	; 255
   10a2c:	27 c0       	rjmp	.+78     	; 0x10a7c <dbf_open_read+0xa4>
    }

    rc = dbf_read(&fp, buff,size,&bytes);
   10a2e:	9e 01       	movw	r18, r28
   10a30:	2b 5d       	subi	r18, 0xDB	; 219
   10a32:	3d 4f       	sbci	r19, 0xFD	; 253
   10a34:	a8 01       	movw	r20, r16
   10a36:	b6 01       	movw	r22, r12
   10a38:	ce 01       	movw	r24, r28
   10a3a:	01 96       	adiw	r24, 0x01	; 1
   10a3c:	59 df       	rcall	.-334    	; 0x108f0 <dbf_read>
    if( rc != FR_OK || (UINT) size != bytes)
   10a3e:	89 2b       	or	r24, r25
   10a40:	49 f4       	brne	.+18     	; 0x10a54 <dbf_open_read+0x7c>
   10a42:	cb 5d       	subi	r28, 0xDB	; 219
   10a44:	dd 4f       	sbci	r29, 0xFD	; 253
   10a46:	88 81       	ld	r24, Y
   10a48:	99 81       	ldd	r25, Y+1	; 0x01
   10a4a:	c5 52       	subi	r28, 0x25	; 37
   10a4c:	d2 40       	sbci	r29, 0x02	; 2
   10a4e:	08 17       	cp	r16, r24
   10a50:	19 07       	cpc	r17, r25
   10a52:	19 f0       	breq	.+6      	; 0x10a5a <dbf_open_read+0x82>
    {
        flags |= ERR_READ;
        *errors = flags;
   10a54:	81 e0       	ldi	r24, 0x01	; 1
   10a56:	90 e0       	ldi	r25, 0x00	; 0
        dbf_close(&fp);
        return( -1 );
    }
    rc = dbf_close(&fp);
   10a58:	e1 cf       	rjmp	.-62     	; 0x10a1c <dbf_open_read+0x44>
   10a5a:	ce 01       	movw	r24, r28
   10a5c:	01 96       	adiw	r24, 0x01	; 1
   10a5e:	9f df       	rcall	.-194    	; 0x1099e <dbf_close>
    if( rc != FR_OK)
   10a60:	89 2b       	or	r24, r25
   10a62:	31 f0       	breq	.+12     	; 0x10a70 <dbf_open_read+0x98>
    {
        flags |= ERR_DISK;
        *errors = flags;
   10a64:	80 e1       	ldi	r24, 0x10	; 16
   10a66:	90 e0       	ldi	r25, 0x00	; 0
   10a68:	f7 01       	movw	r30, r14
   10a6a:	91 83       	std	Z+1, r25	; 0x01
   10a6c:	80 83       	st	Z, r24
   10a6e:	dc cf       	rjmp	.-72     	; 0x10a28 <dbf_open_read+0x50>
#if 0
// test timeout - this works ok
	delayms(500); 
#endif

    return(bytes);
   10a70:	cb 5d       	subi	r28, 0xDB	; 219
   10a72:	dd 4f       	sbci	r29, 0xFD	; 253
   10a74:	88 81       	ld	r24, Y
   10a76:	99 81       	ldd	r25, Y+1	; 0x01
   10a78:	c5 52       	subi	r28, 0x25	; 37
   10a7a:	d2 40       	sbci	r29, 0x02	; 2
}
   10a7c:	ca 5d       	subi	r28, 0xDA	; 218
   10a7e:	dd 4f       	sbci	r29, 0xFD	; 253
   10a80:	ec e0       	ldi	r30, 0x0C	; 12
   10a82:	0c 94 21 e7 	jmp	0x1ce42	; 0x1ce42 <__epilogue_restores__+0xc>

00010a86 <dbf_open_write>:
/// @return  bytes actually written.
/// @return -1 on error.
/// @see: ff.h.
/// @return  FRESULT
int dbf_open_write(char *name, uint32_t pos, void *buff, int size, int *errors)
{
   10a86:	a6 e2       	ldi	r26, 0x26	; 38
   10a88:	b2 e0       	ldi	r27, 0x02	; 2
   10a8a:	e9 e4       	ldi	r30, 0x49	; 73
   10a8c:	f5 e8       	ldi	r31, 0x85	; 133
   10a8e:	0c 94 05 e7 	jmp	0x1ce0a	; 0x1ce0a <__prologue_saves__+0xc>
   10a92:	4a 01       	movw	r8, r20
   10a94:	5b 01       	movw	r10, r22
   10a96:	69 01       	movw	r12, r18
    int rc;
    FIL fp;
    int flags = 0;
    UINT bytes = 0;
   10a98:	cb 5d       	subi	r28, 0xDB	; 219
   10a9a:	dd 4f       	sbci	r29, 0xFD	; 253
   10a9c:	19 82       	std	Y+1, r1	; 0x01
   10a9e:	18 82       	st	Y, r1
   10aa0:	c5 52       	subi	r28, 0x25	; 37
   10aa2:	d2 40       	sbci	r29, 0x02	; 2

    rc = dbf_open(&fp, name, FA_OPEN_EXISTING | FA_READ | FA_WRITE);
   10aa4:	43 e0       	ldi	r20, 0x03	; 3
   10aa6:	bc 01       	movw	r22, r24
   10aa8:	ce 01       	movw	r24, r28
   10aaa:	01 96       	adiw	r24, 0x01	; 1
   10aac:	fe de       	rcall	.-516    	; 0x108aa <dbf_open>
    if( rc != FR_OK)
   10aae:	89 2b       	or	r24, r25
   10ab0:	19 f0       	breq	.+6      	; 0x10ab8 <dbf_open_write+0x32>
    {
        flags |= ERR_DISK;
        flags |= ERR_WRITE;
        *errors = flags;
   10ab2:	82 e1       	ldi	r24, 0x12	; 18
   10ab4:	90 e0       	ldi	r25, 0x00	; 0
   10ab6:	2f c0       	rjmp	.+94     	; 0x10b16 <dbf_open_write+0x90>
        return( -1 );
    }

///  SEEK
    rc = dbf_lseek(&fp, pos);
   10ab8:	b5 01       	movw	r22, r10
   10aba:	a4 01       	movw	r20, r8
   10abc:	ce 01       	movw	r24, r28
   10abe:	01 96       	adiw	r24, 0x01	; 1
   10ac0:	51 df       	rcall	.-350    	; 0x10964 <dbf_lseek>
    if( rc != FR_OK)
   10ac2:	89 2b       	or	r24, r25
   10ac4:	59 f0       	breq	.+22     	; 0x10adc <dbf_open_write+0x56>
    {
        flags |= ERR_SEEK;
        flags |= ERR_WRITE;
        *errors = flags;
   10ac6:	86 e0       	ldi	r24, 0x06	; 6
   10ac8:	90 e0       	ldi	r25, 0x00	; 0
   10aca:	f7 01       	movw	r30, r14
   10acc:	91 83       	std	Z+1, r25	; 0x01
   10ace:	80 83       	st	Z, r24
        dbf_close(&fp);
   10ad0:	ce 01       	movw	r24, r28
   10ad2:	01 96       	adiw	r24, 0x01	; 1
   10ad4:	64 df       	rcall	.-312    	; 0x1099e <dbf_close>
        return( -1 );
   10ad6:	8f ef       	ldi	r24, 0xFF	; 255
   10ad8:	9f ef       	ldi	r25, 0xFF	; 255
   10ada:	27 c0       	rjmp	.+78     	; 0x10b2a <dbf_open_write+0xa4>
    }

    rc = dbf_write(&fp, buff,size,&bytes);
   10adc:	9e 01       	movw	r18, r28
   10ade:	2b 5d       	subi	r18, 0xDB	; 219
   10ae0:	3d 4f       	sbci	r19, 0xFD	; 253
   10ae2:	a8 01       	movw	r20, r16
   10ae4:	b6 01       	movw	r22, r12
   10ae6:	ce 01       	movw	r24, r28
   10ae8:	01 96       	adiw	r24, 0x01	; 1
   10aea:	1f df       	rcall	.-450    	; 0x1092a <dbf_write>
    if( rc != FR_OK || (UINT) size != bytes)
   10aec:	89 2b       	or	r24, r25
   10aee:	49 f4       	brne	.+18     	; 0x10b02 <dbf_open_write+0x7c>
   10af0:	cb 5d       	subi	r28, 0xDB	; 219
   10af2:	dd 4f       	sbci	r29, 0xFD	; 253
   10af4:	88 81       	ld	r24, Y
   10af6:	99 81       	ldd	r25, Y+1	; 0x01
   10af8:	c5 52       	subi	r28, 0x25	; 37
   10afa:	d2 40       	sbci	r29, 0x02	; 2
   10afc:	08 17       	cp	r16, r24
   10afe:	19 07       	cpc	r17, r25
   10b00:	19 f0       	breq	.+6      	; 0x10b08 <dbf_open_write+0x82>
    {
        flags |= ERR_WRITE;
        *errors = flags;
   10b02:	82 e0       	ldi	r24, 0x02	; 2
   10b04:	90 e0       	ldi	r25, 0x00	; 0
        dbf_close(&fp);
        return( -1 );
    }
    rc = dbf_close(&fp);
   10b06:	e1 cf       	rjmp	.-62     	; 0x10aca <dbf_open_write+0x44>
   10b08:	ce 01       	movw	r24, r28
   10b0a:	01 96       	adiw	r24, 0x01	; 1
   10b0c:	48 df       	rcall	.-368    	; 0x1099e <dbf_close>
    if( rc != FR_OK)
   10b0e:	89 2b       	or	r24, r25
   10b10:	31 f0       	breq	.+12     	; 0x10b1e <dbf_open_write+0x98>
    {
        flags |= ERR_DISK;
        *errors = flags;
   10b12:	80 e1       	ldi	r24, 0x10	; 16
   10b14:	90 e0       	ldi	r25, 0x00	; 0
   10b16:	f7 01       	movw	r30, r14
   10b18:	91 83       	std	Z+1, r25	; 0x01
   10b1a:	80 83       	st	Z, r24
   10b1c:	dc cf       	rjmp	.-72     	; 0x10ad6 <dbf_open_write+0x50>
#if 0
// test timeout - this causes timeout
	delayms(200); 
#endif

    return(bytes);
   10b1e:	cb 5d       	subi	r28, 0xDB	; 219
   10b20:	dd 4f       	sbci	r29, 0xFD	; 253
   10b22:	88 81       	ld	r24, Y
   10b24:	99 81       	ldd	r25, Y+1	; 0x01
   10b26:	c5 52       	subi	r28, 0x25	; 37
   10b28:	d2 40       	sbci	r29, 0x02	; 2
}
   10b2a:	ca 5d       	subi	r28, 0xDA	; 218
   10b2c:	dd 4f       	sbci	r29, 0xFD	; 253
   10b2e:	ec e0       	ldi	r30, 0x0C	; 12
   10b30:	0c 94 21 e7 	jmp	0x1ce42	; 0x1ce42 <__epilogue_restores__+0xc>

00010b34 <gpib_timer_elapsed_begin>:
            gpib_timer_elapsed_end("PP released");
#endif
        return(1);
    }
    return(0);
}
   10b34:	0c 94 9e 35 	jmp	0x6b3c	; 0x6b3c <clock_elapsed_begin>
   10b38:	08 95       	ret

00010b3a <gpib_timer_reset>:
   10b3a:	f8 94       	cli
   10b3c:	e7 ee       	ldi	r30, 0xE7	; 231
   10b3e:	fc e1       	ldi	r31, 0x1C	; 28
   10b40:	10 82       	st	Z, r1
   10b42:	11 82       	std	Z+1, r1	; 0x01
   10b44:	12 82       	std	Z+2, r1	; 0x02
   10b46:	13 82       	std	Z+3, r1	; 0x03
   10b48:	14 82       	std	Z+4, r1	; 0x04
   10b4a:	15 82       	std	Z+5, r1	; 0x05
   10b4c:	16 82       	std	Z+6, r1	; 0x06
   10b4e:	17 82       	std	Z+7, r1	; 0x07
   10b50:	81 e0       	ldi	r24, 0x01	; 1
   10b52:	80 87       	std	Z+8, r24	; 0x08
   10b54:	78 94       	sei
   10b56:	08 95       	ret

00010b58 <gpib_timer_elapsed_end>:
   10b58:	0c 94 a4 35 	jmp	0x6b48	; 0x6b48 <clock_elapsed_end>
   10b5c:	08 95       	ret

00010b5e <gpib_timer_task>:
   10b5e:	f8 94       	cli
   10b60:	80 91 eb 1c 	lds	r24, 0x1CEB	; 0x801ceb <gpib_timer+0x4>
   10b64:	90 91 ec 1c 	lds	r25, 0x1CEC	; 0x801cec <gpib_timer+0x5>
   10b68:	a0 91 ed 1c 	lds	r26, 0x1CED	; 0x801ced <gpib_timer+0x6>
   10b6c:	b0 91 ee 1c 	lds	r27, 0x1CEE	; 0x801cee <gpib_timer+0x7>
   10b70:	89 2b       	or	r24, r25
   10b72:	8a 2b       	or	r24, r26
   10b74:	8b 2b       	or	r24, r27
   10b76:	a1 f0       	breq	.+40     	; 0x10ba0 <gpib_timer_task+0x42>
   10b78:	80 91 eb 1c 	lds	r24, 0x1CEB	; 0x801ceb <gpib_timer+0x4>
   10b7c:	90 91 ec 1c 	lds	r25, 0x1CEC	; 0x801cec <gpib_timer+0x5>
   10b80:	a0 91 ed 1c 	lds	r26, 0x1CED	; 0x801ced <gpib_timer+0x6>
   10b84:	b0 91 ee 1c 	lds	r27, 0x1CEE	; 0x801cee <gpib_timer+0x7>
   10b88:	01 97       	sbiw	r24, 0x01	; 1
   10b8a:	a1 09       	sbc	r26, r1
   10b8c:	b1 09       	sbc	r27, r1
   10b8e:	80 93 eb 1c 	sts	0x1CEB, r24	; 0x801ceb <gpib_timer+0x4>
   10b92:	90 93 ec 1c 	sts	0x1CEC, r25	; 0x801cec <gpib_timer+0x5>
   10b96:	a0 93 ed 1c 	sts	0x1CED, r26	; 0x801ced <gpib_timer+0x6>
   10b9a:	b0 93 ee 1c 	sts	0x1CEE, r27	; 0x801cee <gpib_timer+0x7>
   10b9e:	03 c0       	rjmp	.+6      	; 0x10ba6 <gpib_timer_task+0x48>
   10ba0:	81 e0       	ldi	r24, 0x01	; 1
   10ba2:	80 93 ef 1c 	sts	0x1CEF, r24	; 0x801cef <gpib_timer+0x8>
   10ba6:	78 94       	sei
   10ba8:	08 95       	ret

00010baa <gpib_timeout_set>:
   10baa:	f8 94       	cli
   10bac:	e7 ee       	ldi	r30, 0xE7	; 231
   10bae:	fc e1       	ldi	r31, 0x1C	; 28
   10bb0:	64 83       	std	Z+4, r22	; 0x04
   10bb2:	75 83       	std	Z+5, r23	; 0x05
   10bb4:	86 83       	std	Z+6, r24	; 0x06
   10bb6:	97 83       	std	Z+7, r25	; 0x07
   10bb8:	10 86       	std	Z+8, r1	; 0x08
   10bba:	78 94       	sei
   10bbc:	08 95       	ret

00010bbe <gpib_bus_init>:
   10bbe:	00 d0       	rcall	.+0      	; 0x10bc0 <gpib_bus_init+0x2>
   10bc0:	1f 92       	push	r1
   10bc2:	8f b7       	in	r24, 0x3f	; 63
   10bc4:	f8 94       	cli
   10bc6:	10 92 67 19 	sts	0x1967, r1	; 0x801967 <gpib_unread_f>
   10bca:	11 b8       	out	0x01, r1	; 1
   10bcc:	9f ef       	ldi	r25, 0xFF	; 255
   10bce:	92 b9       	out	0x02, r25	; 2
   10bd0:	21 98       	cbi	0x04, 1	; 4
   10bd2:	29 9a       	sbi	0x05, 1	; 5
   10bd4:	52 98       	cbi	0x0a, 2	; 10
   10bd6:	5a 9a       	sbi	0x0b, 2	; 11
   10bd8:	53 98       	cbi	0x0a, 3	; 10
   10bda:	5b 9a       	sbi	0x0b, 3	; 11
   10bdc:	56 98       	cbi	0x0a, 6	; 10
   10bde:	5e 9a       	sbi	0x0b, 6	; 11
   10be0:	54 98       	cbi	0x0a, 4	; 10
   10be2:	5c 9a       	sbi	0x0b, 4	; 11
   10be4:	57 98       	cbi	0x0a, 7	; 10
   10be6:	5f 9a       	sbi	0x0b, 7	; 11
   10be8:	55 98       	cbi	0x0a, 5	; 10
   10bea:	5d 9a       	sbi	0x0b, 5	; 11
   10bec:	20 98       	cbi	0x04, 0	; 4
   10bee:	28 9a       	sbi	0x05, 0	; 5
   10bf0:	45 98       	cbi	0x08, 5	; 8
   10bf2:	3d 9a       	sbi	0x07, 5	; 7
   10bf4:	44 9a       	sbi	0x08, 4	; 8
   10bf6:	3c 9a       	sbi	0x07, 4	; 7
   10bf8:	43 98       	cbi	0x08, 3	; 8
   10bfa:	3b 9a       	sbi	0x07, 3	; 7
   10bfc:	42 98       	cbi	0x08, 2	; 8
   10bfe:	3a 9a       	sbi	0x07, 2	; 7
   10c00:	9d e0       	ldi	r25, 0x0D	; 13
   10c02:	9a 95       	dec	r25
   10c04:	f1 f7       	brne	.-4      	; 0x10c02 <gpib_bus_init+0x44>
   10c06:	00 00       	nop
   10c08:	8f bf       	out	0x3f, r24	; 63
   10c0a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10c0e:	82 ff       	sbrs	r24, 2
   10c10:	0a c0       	rjmp	.+20     	; 0x10c26 <gpib_bus_init+0x68>
   10c12:	8c e2       	ldi	r24, 0x2C	; 44
   10c14:	92 e1       	ldi	r25, 0x12	; 18
   10c16:	a0 e0       	ldi	r26, 0x00	; 0
   10c18:	ed b7       	in	r30, 0x3d	; 61
   10c1a:	fe b7       	in	r31, 0x3e	; 62
   10c1c:	81 83       	std	Z+1, r24	; 0x01
   10c1e:	92 83       	std	Z+2, r25	; 0x02
   10c20:	a3 83       	std	Z+3, r26	; 0x03
   10c22:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   10c26:	0f 90       	pop	r0
   10c28:	0f 90       	pop	r0
   10c2a:	0f 90       	pop	r0
   10c2c:	08 95       	ret

00010c2e <gpib_rx_init>:
   10c2e:	9f b7       	in	r25, 0x3f	; 63
   10c30:	f8 94       	cli
   10c32:	11 b8       	out	0x01, r1	; 1
   10c34:	2f ef       	ldi	r18, 0xFF	; 255
   10c36:	22 b9       	out	0x02, r18	; 2
   10c38:	21 98       	cbi	0x04, 1	; 4
   10c3a:	29 9a       	sbi	0x05, 1	; 5
   10c3c:	20 98       	cbi	0x04, 0	; 4
   10c3e:	28 9a       	sbi	0x05, 0	; 5
   10c40:	4e 9b       	sbis	0x09, 6	; 9
   10c42:	09 c0       	rjmp	.+18     	; 0x10c56 <gpib_rx_init+0x28>
   10c44:	81 11       	cpse	r24, r1
   10c46:	07 c0       	rjmp	.+14     	; 0x10c56 <gpib_rx_init+0x28>
   10c48:	52 98       	cbi	0x0a, 2	; 10
   10c4a:	5a 9a       	sbi	0x0b, 2	; 11
   10c4c:	53 98       	cbi	0x0a, 3	; 10
   10c4e:	5b 9a       	sbi	0x0b, 3	; 11
   10c50:	42 98       	cbi	0x08, 2	; 8
   10c52:	3a 9a       	sbi	0x07, 2	; 7
   10c54:	08 c0       	rjmp	.+16     	; 0x10c66 <gpib_rx_init+0x38>
   10c56:	42 98       	cbi	0x08, 2	; 8
   10c58:	3a 9a       	sbi	0x07, 2	; 7
   10c5a:	5b 98       	cbi	0x0b, 3	; 11
   10c5c:	53 9a       	sbi	0x0a, 3	; 10
   10c5e:	5a 98       	cbi	0x0b, 2	; 11
   10c60:	52 9a       	sbi	0x0a, 2	; 10
   10c62:	88 23       	and	r24, r24
   10c64:	89 f3       	breq	.-30     	; 0x10c48 <gpib_rx_init+0x1a>
   10c66:	9f bf       	out	0x3f, r25	; 63
   10c68:	08 95       	ret

00010c6a <gpib_tx_init>:
   10c6a:	9f b7       	in	r25, 0x3f	; 63
   10c6c:	f8 94       	cli
   10c6e:	11 b8       	out	0x01, r1	; 1
   10c70:	8f ef       	ldi	r24, 0xFF	; 255
   10c72:	82 b9       	out	0x02, r24	; 2
   10c74:	21 98       	cbi	0x04, 1	; 4
   10c76:	29 9a       	sbi	0x05, 1	; 5
   10c78:	52 98       	cbi	0x0a, 2	; 10
   10c7a:	5a 9a       	sbi	0x0b, 2	; 11
   10c7c:	53 98       	cbi	0x0a, 3	; 10
   10c7e:	5b 9a       	sbi	0x0b, 3	; 11
   10c80:	20 98       	cbi	0x04, 0	; 4
   10c82:	28 9a       	sbi	0x05, 0	; 5
   10c84:	42 9a       	sbi	0x08, 2	; 8
   10c86:	3a 9a       	sbi	0x07, 2	; 7
   10c88:	81 b9       	out	0x01, r24	; 1
   10c8a:	9f bf       	out	0x3f, r25	; 63
   10c8c:	08 95       	ret

00010c8e <gpib_state_init>:
   10c8e:	00 d0       	rcall	.+0      	; 0x10c90 <gpib_state_init+0x2>
   10c90:	1f 92       	push	r1
   10c92:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10c96:	82 ff       	sbrs	r24, 2
   10c98:	0a c0       	rjmp	.+20     	; 0x10cae <gpib_state_init+0x20>
   10c9a:	89 e1       	ldi	r24, 0x19	; 25
   10c9c:	92 e1       	ldi	r25, 0x12	; 18
   10c9e:	a0 e0       	ldi	r26, 0x00	; 0
   10ca0:	ed b7       	in	r30, 0x3d	; 61
   10ca2:	fe b7       	in	r31, 0x3e	; 62
   10ca4:	81 83       	std	Z+1, r24	; 0x01
   10ca6:	92 83       	std	Z+2, r25	; 0x02
   10ca8:	a3 83       	std	Z+3, r26	; 0x03
   10caa:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   10cae:	cc dd       	rcall	.-1128   	; 0x10848 <ppr_init>
   10cb0:	0e 94 e8 90 	call	0x121d0	; 0x121d0 <listen_cleanup>
   10cb4:	0e 94 fe 91 	call	0x123fc	; 0x123fc <talk_cleanup>
   10cb8:	10 92 f3 1e 	sts	0x1EF3, r1	; 0x801ef3 <spoll>
   10cbc:	10 92 f6 1e 	sts	0x1EF6, r1	; 0x801ef6 <talking>
   10cc0:	10 92 f9 1e 	sts	0x1EF9, r1	; 0x801ef9 <talking_last>
   10cc4:	10 92 f8 1e 	sts	0x1EF8, r1	; 0x801ef8 <listening>
   10cc8:	10 92 f2 1e 	sts	0x1EF2, r1	; 0x801ef2 <listening_last>
   10ccc:	10 92 f1 1c 	sts	0x1CF1, r1	; 0x801cf1 <lastcmd+0x1>
   10cd0:	10 92 f0 1c 	sts	0x1CF0, r1	; 0x801cf0 <lastcmd>
   10cd4:	10 92 f5 1e 	sts	0x1EF5, r1	; 0x801ef5 <current+0x1>
   10cd8:	10 92 f4 1e 	sts	0x1EF4, r1	; 0x801ef4 <current>
   10cdc:	10 92 f7 1e 	sts	0x1EF7, r1	; 0x801ef7 <secondary>
   10ce0:	0f 90       	pop	r0
   10ce2:	0f 90       	pop	r0
   10ce4:	0f 90       	pop	r0
   10ce6:	08 95       	ret

00010ce8 <gpib_enable_PPR>:
   10ce8:	cf 93       	push	r28
   10cea:	df 93       	push	r29
   10cec:	ad b7       	in	r26, 0x3d	; 61
   10cee:	be b7       	in	r27, 0x3e	; 62
   10cf0:	17 97       	sbiw	r26, 0x07	; 7
   10cf2:	0f b6       	in	r0, 0x3f	; 63
   10cf4:	f8 94       	cli
   10cf6:	be bf       	out	0x3e, r27	; 62
   10cf8:	0f be       	out	0x3f, r0	; 63
   10cfa:	ad bf       	out	0x3d, r26	; 61
   10cfc:	ec 01       	movw	r28, r24
   10cfe:	88 30       	cpi	r24, 0x08	; 8
   10d00:	91 05       	cpc	r25, r1
   10d02:	68 f0       	brcs	.+26     	; 0x10d1e <gpib_enable_PPR+0x36>
   10d04:	ed b7       	in	r30, 0x3d	; 61
   10d06:	fe b7       	in	r31, 0x3e	; 62
   10d08:	95 83       	std	Z+5, r25	; 0x05
   10d0a:	84 83       	std	Z+4, r24	; 0x04
   10d0c:	83 ef       	ldi	r24, 0xF3	; 243
   10d0e:	91 e1       	ldi	r25, 0x11	; 17
   10d10:	a0 e0       	ldi	r26, 0x00	; 0
   10d12:	81 83       	std	Z+1, r24	; 0x01
   10d14:	92 83       	std	Z+2, r25	; 0x02
   10d16:	a3 83       	std	Z+3, r26	; 0x03
   10d18:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   10d1c:	15 c0       	rjmp	.+42     	; 0x10d48 <gpib_enable_PPR+0x60>
   10d1e:	aa dd       	rcall	.-1196   	; 0x10874 <ppr_bit_set>
   10d20:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10d24:	81 ff       	sbrs	r24, 1
   10d26:	10 c0       	rjmp	.+32     	; 0x10d48 <gpib_enable_PPR+0x60>
   10d28:	8b dd       	rcall	.-1258   	; 0x10840 <ppr_reg>
   10d2a:	90 e0       	ldi	r25, 0x00	; 0
   10d2c:	ed b7       	in	r30, 0x3d	; 61
   10d2e:	fe b7       	in	r31, 0x3e	; 62
   10d30:	97 83       	std	Z+7, r25	; 0x07
   10d32:	86 83       	std	Z+6, r24	; 0x06
   10d34:	d5 83       	std	Z+5, r29	; 0x05
   10d36:	c4 83       	std	Z+4, r28	; 0x04
   10d38:	88 ed       	ldi	r24, 0xD8	; 216
   10d3a:	91 e1       	ldi	r25, 0x11	; 17
   10d3c:	a0 e0       	ldi	r26, 0x00	; 0
   10d3e:	81 83       	std	Z+1, r24	; 0x01
   10d40:	92 83       	std	Z+2, r25	; 0x02
   10d42:	a3 83       	std	Z+3, r26	; 0x03
   10d44:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   10d48:	cd b7       	in	r28, 0x3d	; 61
   10d4a:	de b7       	in	r29, 0x3e	; 62
   10d4c:	27 96       	adiw	r28, 0x07	; 7
   10d4e:	e2 e0       	ldi	r30, 0x02	; 2
   10d50:	0c 94 2b e7 	jmp	0x1ce56	; 0x1ce56 <__epilogue_restores__+0x20>

00010d54 <gpib_disable_PPR>:
   10d54:	cf 93       	push	r28
   10d56:	df 93       	push	r29
   10d58:	ad b7       	in	r26, 0x3d	; 61
   10d5a:	be b7       	in	r27, 0x3e	; 62
   10d5c:	17 97       	sbiw	r26, 0x07	; 7
   10d5e:	0f b6       	in	r0, 0x3f	; 63
   10d60:	f8 94       	cli
   10d62:	be bf       	out	0x3e, r27	; 62
   10d64:	0f be       	out	0x3f, r0	; 63
   10d66:	ad bf       	out	0x3d, r26	; 61
   10d68:	ec 01       	movw	r28, r24
   10d6a:	88 30       	cpi	r24, 0x08	; 8
   10d6c:	91 05       	cpc	r25, r1
   10d6e:	68 f0       	brcs	.+26     	; 0x10d8a <gpib_disable_PPR+0x36>
   10d70:	ed b7       	in	r30, 0x3d	; 61
   10d72:	fe b7       	in	r31, 0x3e	; 62
   10d74:	95 83       	std	Z+5, r25	; 0x05
   10d76:	84 83       	std	Z+4, r24	; 0x04
   10d78:	81 eb       	ldi	r24, 0xB1	; 177
   10d7a:	91 e1       	ldi	r25, 0x11	; 17
   10d7c:	a0 e0       	ldi	r26, 0x00	; 0
   10d7e:	81 83       	std	Z+1, r24	; 0x01
   10d80:	92 83       	std	Z+2, r25	; 0x02
   10d82:	a3 83       	std	Z+3, r26	; 0x03
   10d84:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   10d88:	15 c0       	rjmp	.+42     	; 0x10db4 <gpib_disable_PPR+0x60>
   10d8a:	81 dd       	rcall	.-1278   	; 0x1088e <ppr_bit_clr>
   10d8c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10d90:	81 ff       	sbrs	r24, 1
   10d92:	10 c0       	rjmp	.+32     	; 0x10db4 <gpib_disable_PPR+0x60>
   10d94:	55 dd       	rcall	.-1366   	; 0x10840 <ppr_reg>
   10d96:	90 e0       	ldi	r25, 0x00	; 0
   10d98:	ed b7       	in	r30, 0x3d	; 61
   10d9a:	fe b7       	in	r31, 0x3e	; 62
   10d9c:	97 83       	std	Z+7, r25	; 0x07
   10d9e:	86 83       	std	Z+6, r24	; 0x06
   10da0:	d5 83       	std	Z+5, r29	; 0x05
   10da2:	c4 83       	std	Z+4, r28	; 0x04
   10da4:	86 e9       	ldi	r24, 0x96	; 150
   10da6:	91 e1       	ldi	r25, 0x11	; 17
   10da8:	a0 e0       	ldi	r26, 0x00	; 0
   10daa:	81 83       	std	Z+1, r24	; 0x01
   10dac:	92 83       	std	Z+2, r25	; 0x02
   10dae:	a3 83       	std	Z+3, r26	; 0x03
   10db0:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   10db4:	cd b7       	in	r28, 0x3d	; 61
   10db6:	de b7       	in	r29, 0x3e	; 62
   10db8:	27 96       	adiw	r28, 0x07	; 7
   10dba:	e2 e0       	ldi	r30, 0x02	; 2
   10dbc:	0c 94 2b e7 	jmp	0x1ce56	; 0x1ce56 <__epilogue_restores__+0x20>

00010dc0 <gpib_unread>:
///     - If ATN is LOW then we strip parity from the byte.
///   - Upper 8 bits: Status and Errors present.
///     - @see gpib.h _FLAGS defines for a full list.
/// @return ch
uint16_t gpib_unread(uint16_t ch)
{
   10dc0:	cf 93       	push	r28
   10dc2:	df 93       	push	r29
   10dc4:	00 d0       	rcall	.+0      	; 0x10dc6 <gpib_unread+0x6>
   10dc6:	1f 92       	push	r1
   10dc8:	ec 01       	movw	r28, r24
    if(!gpib_unread_f)
   10dca:	80 91 67 19 	lds	r24, 0x1967	; 0x801967 <gpib_unread_f>
   10dce:	81 11       	cpse	r24, r1
   10dd0:	08 c0       	rjmp	.+16     	; 0x10de2 <gpib_unread+0x22>
    {
        gpib_unread_data = ch;
   10dd2:	d0 93 fb 1e 	sts	0x1EFB, r29	; 0x801efb <gpib_unread_data+0x1>
   10dd6:	c0 93 fa 1e 	sts	0x1EFA, r28	; 0x801efa <gpib_unread_data>
        gpib_unread_f = 1;
   10dda:	81 e0       	ldi	r24, 0x01	; 1
   10ddc:	80 93 67 19 	sts	0x1967, r24	; 0x801967 <gpib_unread_f>
   10de0:	12 c0       	rjmp	.+36     	; 0x10e06 <gpib_unread+0x46>
    }
    else
    {
        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10de2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10de6:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   10dea:	85 70       	andi	r24, 0x05	; 5
   10dec:	99 27       	eor	r25, r25
   10dee:	89 2b       	or	r24, r25
   10df0:	51 f0       	breq	.+20     	; 0x10e06 <gpib_unread+0x46>
            printf("gpib_unread: error, can only be called once!\n");
   10df2:	88 e6       	ldi	r24, 0x68	; 104
   10df4:	91 e1       	ldi	r25, 0x11	; 17
   10df6:	a0 e0       	ldi	r26, 0x00	; 0
   10df8:	ed b7       	in	r30, 0x3d	; 61
   10dfa:	fe b7       	in	r31, 0x3e	; 62
   10dfc:	81 83       	std	Z+1, r24	; 0x01
   10dfe:	92 83       	std	Z+2, r25	; 0x02
   10e00:	a3 83       	std	Z+3, r26	; 0x03
   10e02:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    }
    return(ch);
}
   10e06:	ce 01       	movw	r24, r28
   10e08:	cd b7       	in	r28, 0x3d	; 61
   10e0a:	de b7       	in	r29, 0x3e	; 62
   10e0c:	23 96       	adiw	r28, 0x03	; 3
   10e0e:	e2 e0       	ldi	r30, 0x02	; 2
   10e10:	0c 94 2b e7 	jmp	0x1ce56	; 0x1ce56 <__epilogue_restores__+0x20>

00010e14 <gpib_bus_read>:

/// @brief Read GPIB data BUS only
/// @return  bus (lower 8 bits)
uint8_t gpib_bus_read()
{
    uint8_t bus = ~(GPIB_BUS_RD());
   10e14:	11 b8       	out	0x01, r1	; 1
   10e16:	80 b1       	in	r24, 0x00	; 0
   10e18:	80 95       	com	r24

///@brief if a command byte (ATN low) then strip partity
    if(!GPIB_PIN_TST(ATN))
   10e1a:	4e 9b       	sbis	0x09, 6	; 9
        bus &= 0x7f;
   10e1c:	8f 77       	andi	r24, 0x7F	; 127
    else
        bus &= 0xff;
    return(bus);
}
   10e1e:	08 95       	ret

00010e20 <gpib_control_pin_read>:
/// @return  control lines (upper 8 bits)
/// @see gpib_rx_init()
uint16_t gpib_control_pin_read()
{
    uint16_t control = 0;
    if(GPIB_PIN_TST(ATN) == 0 )
   10e20:	4e 99       	sbic	0x09, 6	; 9
   10e22:	03 c0       	rjmp	.+6      	; 0x10e2a <gpib_control_pin_read+0xa>
        control |= ATN_FLAG;
   10e24:	80 e0       	ldi	r24, 0x00	; 0
   10e26:	94 e0       	ldi	r25, 0x04	; 4
   10e28:	02 c0       	rjmp	.+4      	; 0x10e2e <gpib_control_pin_read+0xe>
///   FIXME We could add a test for read/write state ??
/// @return  control lines (upper 8 bits)
/// @see gpib_rx_init()
uint16_t gpib_control_pin_read()
{
    uint16_t control = 0;
   10e2a:	80 e0       	ldi	r24, 0x00	; 0
   10e2c:	90 e0       	ldi	r25, 0x00	; 0
    if(GPIB_PIN_TST(ATN) == 0 )
        control |= ATN_FLAG;
    if(GPIB_PIN_TST(EOI) == 0 )
   10e2e:	18 9b       	sbis	0x03, 0	; 3
        control |= EOI_FLAG;
   10e30:	91 60       	ori	r25, 0x01	; 1
    if(GPIB_PIN_TST(SRQ) == 0 )
   10e32:	4d 9b       	sbis	0x09, 5	; 9
        control |= SRQ_FLAG;
   10e34:	92 60       	ori	r25, 0x02	; 2
    if(GPIB_PIN_TST(REN) == 0 )
   10e36:	4f 9b       	sbis	0x09, 7	; 9
        control |= REN_FLAG;
   10e38:	98 60       	ori	r25, 0x08	; 8
    if(GPIB_PIN_TST(IFC) == 0 )
   10e3a:	4c 9b       	sbis	0x09, 4	; 9
        control |= IFC_FLAG;
   10e3c:	90 61       	ori	r25, 0x10	; 16
    return(control);
}
   10e3e:	08 95       	ret

00010e40 <gpib_handshake_pin_read>:
uint16_t gpib_handshake_pin_read()
{
    uint16_t control = 0;
///@brief for tracing we can reuse the error flag bit values for DAV,NRFD and NDAC
/// FYI: This has no impact on the gpib_read_byte() functions and return values
    if(GPIB_PIN_TST(DAV) == 0 )
   10e40:	19 99       	sbic	0x03, 1	; 3
   10e42:	03 c0       	rjmp	.+6      	; 0x10e4a <gpib_handshake_pin_read+0xa>
        control |= DAV_FLAG;
   10e44:	80 e0       	ldi	r24, 0x00	; 0
   10e46:	90 e2       	ldi	r25, 0x20	; 32
   10e48:	02 c0       	rjmp	.+4      	; 0x10e4e <gpib_handshake_pin_read+0xe>
/// FIXME: V2 boards can only read pins enabled for read by the SN75162
///   FIXME We could add a test for read/write state ??
/// @return  handshake lines (upper 8 bits)
uint16_t gpib_handshake_pin_read()
{
    uint16_t control = 0;
   10e4a:	80 e0       	ldi	r24, 0x00	; 0
   10e4c:	90 e0       	ldi	r25, 0x00	; 0
///@brief for tracing we can reuse the error flag bit values for DAV,NRFD and NDAC
/// FYI: This has no impact on the gpib_read_byte() functions and return values
    if(GPIB_PIN_TST(DAV) == 0 )
        control |= DAV_FLAG;
    if(GPIB_PIN_TST(NRFD) == 0 )
   10e4e:	4a 9b       	sbis	0x09, 2	; 9
        control |= NRFD_FLAG;
   10e50:	90 64       	ori	r25, 0x40	; 64
    if(GPIB_PIN_TST(NDAC) == 0 )
   10e52:	4b 9b       	sbis	0x09, 3	; 9
        control |= NDAC_FLAG;
   10e54:	90 68       	ori	r25, 0x80	; 128
    return(control);
}
   10e56:	08 95       	ret

00010e58 <gpib_write_byte>:
///       - REN_FLAG
///       - PP_FLAG
///     - Error Flags:
///       - IFC_FLAG
uint16_t gpib_write_byte(uint16_t ch)
{
   10e58:	2f 92       	push	r2
   10e5a:	3f 92       	push	r3
   10e5c:	4f 92       	push	r4
   10e5e:	6f 92       	push	r6
   10e60:	7f 92       	push	r7
   10e62:	8f 92       	push	r8
   10e64:	af 92       	push	r10
   10e66:	bf 92       	push	r11
   10e68:	cf 92       	push	r12
   10e6a:	df 92       	push	r13
   10e6c:	ef 92       	push	r14
   10e6e:	1f 93       	push	r17
   10e70:	cf 93       	push	r28
   10e72:	df 93       	push	r29
   10e74:	cd b7       	in	r28, 0x3d	; 61
   10e76:	de b7       	in	r29, 0x3e	; 62
   10e78:	2a 97       	sbiw	r28, 0x0a	; 10
   10e7a:	0f b6       	in	r0, 0x3f	; 63
   10e7c:	f8 94       	cli
   10e7e:	de bf       	out	0x3e, r29	; 62
   10e80:	0f be       	out	0x3f, r0	; 63
   10e82:	cd bf       	out	0x3d, r28	; 61
   10e84:	9a 87       	std	Y+10, r25	; 0x0a
   10e86:	89 87       	std	Y+9, r24	; 0x09
#if 0
	gpib_rx_init(0);	// NOT busy, NRFD and NDAC OC
#endif

    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);
   10e88:	64 ef       	ldi	r22, 0xF4	; 244
   10e8a:	71 e0       	ldi	r23, 0x01	; 1
   10e8c:	80 e0       	ldi	r24, 0x00	; 0
   10e8e:	90 e0       	ldi	r25, 0x00	; 0
   10e90:	8c de       	rcall	.-744    	; 0x10baa <gpib_timeout_set>
// Now Done in write_str
#if 0
	gpib_rx_init(0);	// NOT busy, NRFD and NDAC OC
#endif

    tx_state = GPIB_TX_START;
   10e92:	10 e0       	ldi	r17, 0x00	; 0
                if (gpib_timeout_test())
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
                        printf("<gpib_write_byte timeout waiting for NDAC==1>\n");
   10e94:	83 e6       	ldi	r24, 0x63	; 99
   10e96:	90 e1       	ldi	r25, 0x10	; 16
   10e98:	6c 01       	movw	r12, r24
   10e9a:	e1 2c       	mov	r14, r1
                    tx_state = GPIB_TX_SET_DAV_LOW;
                }
                if (gpib_timeout_test())
                {
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
                        printf("<gpib_write_byte timeout waiting for NRFD==1 && NDAC == 0>\n");
   10e9c:	82 e9       	ldi	r24, 0x92	; 146
   10e9e:	90 e1       	ldi	r25, 0x10	; 16
   10ea0:	3c 01       	movw	r6, r24
   10ea2:	81 2c       	mov	r8, r1
					}
					else
					{
#ifdef SDEBUG
						if(debuglevel & GPIB_ERR)
							printf("gpib_write_byte: ATN = 0 while waiting for NRFD LOW state =%d\n",tx_state);
   10ea4:	aa 24       	eor	r10, r10
   10ea6:	a3 94       	inc	r10
   10ea8:	b1 2c       	mov	r11, r1
   10eaa:	8a e0       	ldi	r24, 0x0A	; 10
   10eac:	91 e1       	ldi	r25, 0x11	; 17
   10eae:	1c 01       	movw	r2, r24
   10eb0:	41 2c       	mov	r4, r1
					break;
                }
                if (gpib_timeout_test())
                {
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
                        printf("<gpib_write_byte timeout waiting for NRFD==1 && NDAC == 0>\n");
   10eb2:	8e ec       	ldi	r24, 0xCE	; 206
   10eb4:	90 e1       	ldi	r25, 0x10	; 16
   10eb6:	9c 01       	movw	r18, r24
   10eb8:	40 e0       	ldi	r20, 0x00	; 0
   10eba:	2e 83       	std	Y+6, r18	; 0x06
   10ebc:	3f 83       	std	Y+7, r19	; 0x07
   10ebe:	48 87       	std	Y+8, r20	; 0x08
	// Not called for writting
#if 0
        gpib_user_task();
#endif

		if(uart_keyhit(0))
   10ec0:	80 e0       	ldi	r24, 0x00	; 0
   10ec2:	0e 94 95 2a 	call	0x552a	; 0x552a <uart_keyhit>
   10ec6:	89 2b       	or	r24, r25
   10ec8:	09 f0       	breq	.+2      	; 0x10ecc <gpib_write_byte+0x74>
   10eca:	e7 c0       	rjmp	.+462    	; 0x1109a <gpib_write_byte+0x242>
        if(gpib_detect_PP())
            ch |= PP_FLAG;
#endif

// IFC is always in for a device
        if(GPIB_PIN_TST(IFC) == 0)
   10ecc:	4c 99       	sbic	0x09, 4	; 9
   10ece:	19 c0       	rjmp	.+50     	; 0x10f02 <gpib_write_byte+0xaa>
        {
            ch |= IFC_FLAG;
   10ed0:	89 85       	ldd	r24, Y+9	; 0x09
   10ed2:	9a 85       	ldd	r25, Y+10	; 0x0a
   10ed4:	90 61       	ori	r25, 0x10	; 16
   10ed6:	9a 87       	std	Y+10, r25	; 0x0a
            gpib_bus_init();
   10ed8:	89 87       	std	Y+9, r24	; 0x09
   10eda:	71 de       	rcall	.-798    	; 0x10bbe <gpib_bus_init>
			if(debuglevel & GPIB_ERR)
   10edc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10ee0:	80 ff       	sbrs	r24, 0
   10ee2:	db c0       	rjmp	.+438    	; 0x1109a <gpib_write_byte+0x242>
				printf("gpib_write_byte: IFC state=%d\n", tx_state);
   10ee4:	81 2f       	mov	r24, r17
   10ee6:	90 e0       	ldi	r25, 0x00	; 0
   10ee8:	ed b7       	in	r30, 0x3d	; 61
   10eea:	fe b7       	in	r31, 0x3e	; 62
   10eec:	95 83       	std	Z+5, r25	; 0x05
   10eee:	84 83       	std	Z+4, r24	; 0x04
   10ef0:	89 e4       	ldi	r24, 0x49	; 73
   10ef2:	91 e1       	ldi	r25, 0x11	; 17
   10ef4:	a0 e0       	ldi	r26, 0x00	; 0
   10ef6:	81 83       	std	Z+1, r24	; 0x01
   10ef8:	92 83       	std	Z+2, r25	; 0x02
   10efa:	a3 83       	std	Z+3, r26	; 0x03
   10efc:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   10f00:	cc c0       	rjmp	.+408    	; 0x1109a <gpib_write_byte+0x242>
            break;
        }

        switch(tx_state)
   10f02:	81 2f       	mov	r24, r17
   10f04:	90 e0       	ldi	r25, 0x00	; 0
   10f06:	89 30       	cpi	r24, 0x09	; 9
   10f08:	91 05       	cpc	r25, r1
   10f0a:	08 f0       	brcs	.+2      	; 0x10f0e <gpib_write_byte+0xb6>
   10f0c:	be c0       	rjmp	.+380    	; 0x1108a <gpib_write_byte+0x232>
   10f0e:	fc 01       	movw	r30, r24
   10f10:	e3 54       	subi	r30, 0x43	; 67
   10f12:	ff 4f       	sbci	r31, 0xFF	; 255
   10f14:	0c 94 d0 e6 	jmp	0x1cda0	; 0x1cda0 <__tablejump2__>
        {
			// DAV == 1 the bus is ready
            case GPIB_TX_START:
				gpib_tx_init();
   10f18:	a8 de       	rcall	.-688    	; 0x10c6a <gpib_tx_init>
				GPIB_PIN_FLOAT_UP(DAV);
   10f1a:	21 98       	cbi	0x04, 1	; 4
   10f1c:	29 9a       	sbi	0x05, 1	; 5
   10f1e:	fd e0       	ldi	r31, 0x0D	; 13
   10f20:	fa 95       	dec	r31
   10f22:	f1 f7       	brne	.-4      	; 0x10f20 <gpib_write_byte+0xc8>
   10f24:	00 00       	nop
   10f26:	06 c0       	rjmp	.+12     	; 0x10f34 <gpib_write_byte+0xdc>
                tx_state = GPIB_TX_PUT_DATA;
                break;

// Wait for NRFD or NDAC LOW
            case GPIB_TX_WAIT_FOR_NRFD_OR_NDAC_LOW:
                if(GPIB_PIN_TST(NRFD) == 0 || GPIB_PIN_TST(NDAC) == 0)
   10f28:	4a 9b       	sbis	0x09, 2	; 9
   10f2a:	02 c0       	rjmp	.+4      	; 0x10f30 <gpib_write_byte+0xd8>
   10f2c:	4b 99       	sbic	0x09, 3	; 9
   10f2e:	17 c0       	rjmp	.+46     	; 0x10f5e <gpib_write_byte+0x106>
                {
					if(GPIB_PIN_TST(ATN) == 1)
   10f30:	4e 9b       	sbis	0x09, 6	; 9
   10f32:	07 c0       	rjmp	.+14     	; 0x10f42 <gpib_write_byte+0xea>
					{
						gpib_timeout_set(HTIMEOUT);
   10f34:	64 ef       	ldi	r22, 0xF4	; 244
   10f36:	71 e0       	ldi	r23, 0x01	; 1
   10f38:	80 e0       	ldi	r24, 0x00	; 0
   10f3a:	90 e0       	ldi	r25, 0x00	; 0
   10f3c:	36 de       	rcall	.-916    	; 0x10baa <gpib_timeout_set>
						tx_state = GPIB_TX_PUT_DATA;
   10f3e:	12 e0       	ldi	r17, 0x02	; 2
   10f40:	bf cf       	rjmp	.-130    	; 0x10ec0 <gpib_write_byte+0x68>
					}
					else
					{
#ifdef SDEBUG
						if(debuglevel & GPIB_ERR)
   10f42:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10f46:	80 ff       	sbrs	r24, 0
   10f48:	bb cf       	rjmp	.-138    	; 0x10ec0 <gpib_write_byte+0x68>
							printf("gpib_write_byte: ATN = 0 while waiting for NRFD LOW state =%d\n",tx_state);
   10f4a:	ed b7       	in	r30, 0x3d	; 61
   10f4c:	fe b7       	in	r31, 0x3e	; 62
   10f4e:	b5 82       	std	Z+5, r11	; 0x05
   10f50:	a4 82       	std	Z+4, r10	; 0x04
   10f52:	21 82       	std	Z+1, r2	; 0x01
   10f54:	32 82       	std	Z+2, r3	; 0x02
   10f56:	43 82       	std	Z+3, r4	; 0x03
   10f58:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   10f5c:	b1 cf       	rjmp	.-158    	; 0x10ec0 <gpib_write_byte+0x68>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   10f5e:	80 91 ef 1c 	lds	r24, 0x1CEF	; 0x801cef <gpib_timer+0x8>
							printf("gpib_write_byte: ATN = 0 while waiting for NRFD LOW state =%d\n",tx_state);
#endif
					}
					break;
                }
                if (gpib_timeout_test())
   10f62:	88 23       	and	r24, r24
   10f64:	09 f4       	brne	.+2      	; 0x10f68 <gpib_write_byte+0x110>
   10f66:	ac cf       	rjmp	.-168    	; 0x10ec0 <gpib_write_byte+0x68>
                {
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10f68:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10f6c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   10f70:	85 70       	andi	r24, 0x05	; 5
   10f72:	99 27       	eor	r25, r25
   10f74:	89 2b       	or	r24, r25
   10f76:	c1 f1       	breq	.+112    	; 0x10fe8 <gpib_write_byte+0x190>
                        printf("<gpib_write_byte timeout waiting for NRFD==1 && NDAC == 0>\n");
   10f78:	2e 81       	ldd	r18, Y+6	; 0x06
   10f7a:	3f 81       	ldd	r19, Y+7	; 0x07
   10f7c:	48 85       	ldd	r20, Y+8	; 0x08
   10f7e:	ed b7       	in	r30, 0x3d	; 61
   10f80:	fe b7       	in	r31, 0x3e	; 62
   10f82:	21 83       	std	Z+1, r18	; 0x01
   10f84:	32 83       	std	Z+2, r19	; 0x02
   10f86:	43 83       	std	Z+3, r20	; 0x03
   10f88:	2d c0       	rjmp	.+90     	; 0x10fe4 <gpib_write_byte+0x18c>
                }
                break;

// Write Data
            case GPIB_TX_PUT_DATA:
                if(ch & EOI_FLAG)
   10f8a:	89 85       	ldd	r24, Y+9	; 0x09
   10f8c:	9a 85       	ldd	r25, Y+10	; 0x0a
   10f8e:	90 ff       	sbrs	r25, 0
   10f90:	03 c0       	rjmp	.+6      	; 0x10f98 <gpib_write_byte+0x140>
                    GPIB_IO_LOW(EOI);
   10f92:	28 98       	cbi	0x05, 0	; 5
   10f94:	20 9a       	sbi	0x04, 0	; 4
   10f96:	02 c0       	rjmp	.+4      	; 0x10f9c <gpib_write_byte+0x144>
                else
                    GPIB_PIN_FLOAT_UP(EOI);
   10f98:	20 98       	cbi	0x04, 0	; 4
   10f9a:	28 9a       	sbi	0x05, 0	; 5
                GPIB_BUS_WR((ch & 0xff) ^ 0xff);  // Write Data inverted
   10f9c:	8f ef       	ldi	r24, 0xFF	; 255
   10f9e:	81 b9       	out	0x01, r24	; 1
   10fa0:	89 85       	ldd	r24, Y+9	; 0x09
   10fa2:	80 95       	com	r24
   10fa4:	82 b9       	out	0x02, r24	; 2
   10fa6:	9d e0       	ldi	r25, 0x0D	; 13
   10fa8:	9a 95       	dec	r25
   10faa:	f1 f7       	brne	.-4      	; 0x10fa8 <gpib_write_byte+0x150>
   10fac:	00 00       	nop
                GPIB_BUS_SETTLE();                // Let Data BUS settle

                gpib_timeout_set(HTIMEOUT);
   10fae:	64 ef       	ldi	r22, 0xF4	; 244
   10fb0:	71 e0       	ldi	r23, 0x01	; 1
   10fb2:	80 e0       	ldi	r24, 0x00	; 0
   10fb4:	90 e0       	ldi	r25, 0x00	; 0
   10fb6:	f9 dd       	rcall	.-1038   	; 0x10baa <gpib_timeout_set>
                tx_state = GPIB_TX_WAIT_FOR_NRFD_HI;
   10fb8:	13 e0       	ldi	r17, 0x03	; 3
                break;
   10fba:	82 cf       	rjmp	.-252    	; 0x10ec0 <gpib_write_byte+0x68>
// Wait for BOTH NRFD HI and NDAC LOW
            case GPIB_TX_WAIT_FOR_NRFD_HI:
#if 0
                if(GPIB_PIN_TST(NRFD) == 1 && GPIB_PIN_TST(NDAC) == 0)
#else
                if(GPIB_PIN_TST(NRFD))
   10fbc:	4a 99       	sbic	0x09, 2	; 9
#endif
                {
                    tx_state = GPIB_TX_SET_DAV_LOW;
   10fbe:	14 e0       	ldi	r17, 0x04	; 4
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   10fc0:	80 91 ef 1c 	lds	r24, 0x1CEF	; 0x801cef <gpib_timer+0x8>
                if(GPIB_PIN_TST(NRFD))
#endif
                {
                    tx_state = GPIB_TX_SET_DAV_LOW;
                }
                if (gpib_timeout_test())
   10fc4:	88 23       	and	r24, r24
   10fc6:	09 f4       	brne	.+2      	; 0x10fca <gpib_write_byte+0x172>
   10fc8:	7b cf       	rjmp	.-266    	; 0x10ec0 <gpib_write_byte+0x68>
                {
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10fca:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10fce:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   10fd2:	85 70       	andi	r24, 0x05	; 5
   10fd4:	99 27       	eor	r25, r25
   10fd6:	89 2b       	or	r24, r25
   10fd8:	39 f0       	breq	.+14     	; 0x10fe8 <gpib_write_byte+0x190>
                        printf("<gpib_write_byte timeout waiting for NRFD==1 && NDAC == 0>\n");
   10fda:	ed b7       	in	r30, 0x3d	; 61
   10fdc:	fe b7       	in	r31, 0x3e	; 62
   10fde:	61 82       	std	Z+1, r6	; 0x01
   10fe0:	72 82       	std	Z+2, r7	; 0x02
   10fe2:	83 82       	std	Z+3, r8	; 0x03
   10fe4:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
                    ch |= TIMEOUT_FLAG;
   10fe8:	29 85       	ldd	r18, Y+9	; 0x09
   10fea:	3a 85       	ldd	r19, Y+10	; 0x0a
   10fec:	30 64       	ori	r19, 0x40	; 64
   10fee:	3a 87       	std	Y+10, r19	; 0x0a
   10ff0:	29 87       	std	Y+9, r18	; 0x09
   10ff2:	51 c0       	rjmp	.+162    	; 0x11096 <gpib_write_byte+0x23e>
                    break;
                }
                break;

            case GPIB_TX_SET_DAV_LOW:
                GPIB_IO_LOW(DAV);
   10ff4:	29 98       	cbi	0x05, 1	; 5
   10ff6:	21 9a       	sbi	0x04, 1	; 4
   10ff8:	3d e0       	ldi	r19, 0x0D	; 13
   10ffa:	3a 95       	dec	r19
   10ffc:	f1 f7       	brne	.-4      	; 0x10ffa <gpib_write_byte+0x1a2>
                GPIB_BUS_SETTLE();                
                gpib_timeout_set(HTIMEOUT);
   10ffe:	00 00       	nop
   11000:	64 ef       	ldi	r22, 0xF4	; 244
   11002:	71 e0       	ldi	r23, 0x01	; 1
   11004:	80 e0       	ldi	r24, 0x00	; 0
   11006:	90 e0       	ldi	r25, 0x00	; 0
   11008:	d0 dd       	rcall	.-1120   	; 0x10baa <gpib_timeout_set>
                tx_state = GPIB_TX_WAIT_FOR_NDAC_HI;
   1100a:	15 e0       	ldi	r17, 0x05	; 5
                break;
   1100c:	59 cf       	rjmp	.-334    	; 0x10ec0 <gpib_write_byte+0x68>

///@brief ALL devices are ready
            case GPIB_TX_WAIT_FOR_NDAC_HI:
                if(GPIB_PIN_TST(NDAC) == 1)       // Byte byte accepted
   1100e:	4b 99       	sbic	0x09, 3	; 9
   11010:	40 c0       	rjmp	.+128    	; 0x11092 <gpib_write_byte+0x23a>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   11012:	80 91 ef 1c 	lds	r24, 0x1CEF	; 0x801cef <gpib_timer+0x8>
                if(GPIB_PIN_TST(NDAC) == 1)       // Byte byte accepted
                {
                    tx_state = GPIB_TX_SET_DAV_HI;
                    break;
                }
                if (gpib_timeout_test())
   11016:	88 23       	and	r24, r24
   11018:	09 f4       	brne	.+2      	; 0x1101c <gpib_write_byte+0x1c4>
   1101a:	52 cf       	rjmp	.-348    	; 0x10ec0 <gpib_write_byte+0x68>
                {
                    ch |= TIMEOUT_FLAG;
   1101c:	89 85       	ldd	r24, Y+9	; 0x09
   1101e:	9a 85       	ldd	r25, Y+10	; 0x0a
   11020:	90 64       	ori	r25, 0x40	; 64
   11022:	9a 87       	std	Y+10, r25	; 0x0a
   11024:	89 87       	std	Y+9, r24	; 0x09
                    tx_state = GPIB_TX_ERROR;
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   11026:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1102a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1102e:	85 70       	andi	r24, 0x05	; 5
   11030:	99 27       	eor	r25, r25
   11032:	89 2b       	or	r24, r25
   11034:	81 f1       	breq	.+96     	; 0x11096 <gpib_write_byte+0x23e>
                        printf("<gpib_write_byte timeout waiting for NDAC==1>\n");
   11036:	ed b7       	in	r30, 0x3d	; 61
   11038:	fe b7       	in	r31, 0x3e	; 62
   1103a:	c1 82       	std	Z+1, r12	; 0x01
   1103c:	d2 82       	std	Z+2, r13	; 0x02
   1103e:	e3 82       	std	Z+3, r14	; 0x03
   11040:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   11044:	28 c0       	rjmp	.+80     	; 0x11096 <gpib_write_byte+0x23e>
                }
                break;

///@release BUS
            case GPIB_TX_SET_DAV_HI:
                GPIB_PIN_FLOAT_UP(DAV);
   11046:	21 98       	cbi	0x04, 1	; 4
   11048:	29 9a       	sbi	0x05, 1	; 5
   1104a:	fd e0       	ldi	r31, 0x0D	; 13
   1104c:	fa 95       	dec	r31
   1104e:	f1 f7       	brne	.-4      	; 0x1104c <gpib_write_byte+0x1f4>
                GPIB_BUS_SETTLE();
                tx_state = GPIB_TX_FINISH;
                gpib_timeout_set(HTIMEOUT);
   11050:	00 00       	nop
   11052:	64 ef       	ldi	r22, 0xF4	; 244
   11054:	71 e0       	ldi	r23, 0x01	; 1
   11056:	80 e0       	ldi	r24, 0x00	; 0
   11058:	90 e0       	ldi	r25, 0x00	; 0

///@release BUS
            case GPIB_TX_SET_DAV_HI:
                GPIB_PIN_FLOAT_UP(DAV);
                GPIB_BUS_SETTLE();
                tx_state = GPIB_TX_FINISH;
   1105a:	a7 dd       	rcall	.-1202   	; 0x10baa <gpib_timeout_set>
                gpib_timeout_set(HTIMEOUT);
                break;
   1105c:	17 e0       	ldi	r17, 0x07	; 7
                tx_state = GPIB_TX_DONE;
                break;

            case GPIB_TX_ERROR:
				// Free BUS, BUSY on error
                gpib_rx_init(1);
   1105e:	30 cf       	rjmp	.-416    	; 0x10ec0 <gpib_write_byte+0x68>
   11060:	81 e0       	ldi	r24, 0x01	; 1
   11062:	e5 dd       	rcall	.-1078   	; 0x10c2e <gpib_rx_init>
                if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   11064:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11068:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1106c:	85 70       	andi	r24, 0x05	; 5
   1106e:	99 27       	eor	r25, r25
   11070:	89 2b       	or	r24, r25
   11072:	99 f0       	breq	.+38     	; 0x1109a <gpib_write_byte+0x242>
                    printf("<GPIB TX TIMEOUT>\n");
   11074:	80 e5       	ldi	r24, 0x50	; 80
   11076:	90 e1       	ldi	r25, 0x10	; 16
   11078:	a0 e0       	ldi	r26, 0x00	; 0
   1107a:	ed b7       	in	r30, 0x3d	; 61
   1107c:	fe b7       	in	r31, 0x3e	; 62
   1107e:	81 83       	std	Z+1, r24	; 0x01
   11080:	92 83       	std	Z+2, r25	; 0x02
   11082:	a3 83       	std	Z+3, r26	; 0x03
   11084:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   11088:	08 c0       	rjmp	.+16     	; 0x1109a <gpib_write_byte+0x242>
	gpib_rx_init(0);	// NOT busy, NRFD and NDAC OC
#endif

    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);
    while(tx_state != GPIB_TX_DONE )
   1108a:	19 30       	cpi	r17, 0x09	; 9
   1108c:	09 f0       	breq	.+2      	; 0x11090 <gpib_write_byte+0x238>
   1108e:	18 cf       	rjmp	.-464    	; 0x10ec0 <gpib_write_byte+0x68>
   11090:	04 c0       	rjmp	.+8      	; 0x1109a <gpib_write_byte+0x242>

///@brief ALL devices are ready
            case GPIB_TX_WAIT_FOR_NDAC_HI:
                if(GPIB_PIN_TST(NDAC) == 1)       // Byte byte accepted
                {
                    tx_state = GPIB_TX_SET_DAV_HI;
   11092:	16 e0       	ldi	r17, 0x06	; 6
   11094:	15 cf       	rjmp	.-470    	; 0x10ec0 <gpib_write_byte+0x68>
                    break;
                }
                if (gpib_timeout_test())
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
   11096:	18 e0       	ldi	r17, 0x08	; 8
   11098:	13 cf       	rjmp	.-474    	; 0x10ec0 <gpib_write_byte+0x68>
            case GPIB_TX_DONE:
                break;
        }
    }
    return(ch);
}
   1109a:	89 85       	ldd	r24, Y+9	; 0x09
   1109c:	9a 85       	ldd	r25, Y+10	; 0x0a
   1109e:	2a 96       	adiw	r28, 0x0a	; 10
   110a0:	0f b6       	in	r0, 0x3f	; 63
   110a2:	f8 94       	cli
   110a4:	de bf       	out	0x3e, r29	; 62
   110a6:	0f be       	out	0x3f, r0	; 63
   110a8:	cd bf       	out	0x3d, r28	; 61
   110aa:	df 91       	pop	r29
   110ac:	cf 91       	pop	r28
   110ae:	1f 91       	pop	r17
   110b0:	ef 90       	pop	r14
   110b2:	df 90       	pop	r13
   110b4:	cf 90       	pop	r12
   110b6:	bf 90       	pop	r11
   110b8:	af 90       	pop	r10
   110ba:	8f 90       	pop	r8
   110bc:	7f 90       	pop	r7
   110be:	6f 90       	pop	r6
   110c0:	4f 90       	pop	r4
   110c2:	3f 90       	pop	r3
   110c4:	2f 90       	pop	r2
   110c6:	08 95       	ret

000110c8 <gpib_decode_header>:
/// @see: gpib.h _FLAGS defines for a full list is control lines we track
/// @see: gpib_trace()
/// @return void
///@param[in] fo: FILE pointer or "stdout"
void gpib_decode_header( FILE *fo)
{
   110c8:	cf 93       	push	r28
   110ca:	df 93       	push	r29
   110cc:	ec 01       	movw	r28, r24
    if(fo == NULL)
   110ce:	89 2b       	or	r24, r25
   110d0:	21 f4       	brne	.+8      	; 0x110da <gpib_decode_header+0x12>
        fo = stdout;
   110d2:	c0 91 c9 1c 	lds	r28, 0x1CC9	; 0x801cc9 <__iob+0x2>
   110d6:	d0 91 ca 1c 	lds	r29, 0x1CCA	; 0x801cca <__iob+0x3>

    fprintf(fo,"==============================\n");
   110da:	be 01       	movw	r22, r28
   110dc:	81 e0       	ldi	r24, 0x01	; 1
   110de:	9c e0       	ldi	r25, 0x0C	; 12
   110e0:	0e 94 be 76 	call	0xed7c	; 0xed7c <fputs>
    fprintf(fo,"GPIB bus state\n");
   110e4:	be 01       	movw	r22, r28
   110e6:	81 e2       	ldi	r24, 0x21	; 33
   110e8:	9c e0       	ldi	r25, 0x0C	; 12
   110ea:	0e 94 be 76 	call	0xed7c	; 0xed7c <fputs>
    fprintf(fo,"HH . AESRPITB gpib\n");
   110ee:	be 01       	movw	r22, r28
   110f0:	81 e3       	ldi	r24, 0x31	; 49
   110f2:	9c e0       	ldi	r25, 0x0C	; 12
   110f4:	0e 94 be 76 	call	0xed7c	; 0xed7c <fputs>
    fprintf(fo,"HH = Hex value of Command or Data\n");
   110f8:	be 01       	movw	r22, r28
   110fa:	85 e4       	ldi	r24, 0x45	; 69
   110fc:	9c e0       	ldi	r25, 0x0C	; 12
   110fe:	0e 94 be 76 	call	0xed7c	; 0xed7c <fputs>
    fprintf(fo,"   . = ASCII of XX only for 0x20 .. 0x7e\n");
   11102:	be 01       	movw	r22, r28
   11104:	88 e6       	ldi	r24, 0x68	; 104
   11106:	9c e0       	ldi	r25, 0x0C	; 12
   11108:	0e 94 be 76 	call	0xed7c	; 0xed7c <fputs>
    fprintf(fo,"     A = ATN\n");
   1110c:	be 01       	movw	r22, r28
   1110e:	82 e9       	ldi	r24, 0x92	; 146
   11110:	9c e0       	ldi	r25, 0x0C	; 12
   11112:	0e 94 be 76 	call	0xed7c	; 0xed7c <fputs>
    fprintf(fo,"      E = EOI\n");
   11116:	be 01       	movw	r22, r28
   11118:	80 ea       	ldi	r24, 0xA0	; 160
   1111a:	9c e0       	ldi	r25, 0x0C	; 12
   1111c:	0e 94 be 76 	call	0xed7c	; 0xed7c <fputs>
    fprintf(fo,"       S = SRQ\n");
   11120:	be 01       	movw	r22, r28
   11122:	8f ea       	ldi	r24, 0xAF	; 175
   11124:	9c e0       	ldi	r25, 0x0C	; 12
   11126:	0e 94 be 76 	call	0xed7c	; 0xed7c <fputs>
    fprintf(fo,"        R = REN\n");
   1112a:	be 01       	movw	r22, r28
   1112c:	8f eb       	ldi	r24, 0xBF	; 191
   1112e:	9c e0       	ldi	r25, 0x0C	; 12
   11130:	0e 94 be 76 	call	0xed7c	; 0xed7c <fputs>
    fprintf(fo,"         I = IFC\n");
   11134:	be 01       	movw	r22, r28
   11136:	80 ed       	ldi	r24, 0xD0	; 208
   11138:	9c e0       	ldi	r25, 0x0C	; 12
   1113a:	0e 94 be 76 	call	0xed7c	; 0xed7c <fputs>
    fprintf(fo,"          P = Parallel Poll seen\n");
   1113e:	be 01       	movw	r22, r28
   11140:	82 ee       	ldi	r24, 0xE2	; 226
   11142:	9c e0       	ldi	r25, 0x0C	; 12
   11144:	0e 94 be 76 	call	0xed7c	; 0xed7c <fputs>
    fprintf(fo,"           T = TIMEOUT\n");
   11148:	be 01       	movw	r22, r28
   1114a:	84 e0       	ldi	r24, 0x04	; 4
   1114c:	9d e0       	ldi	r25, 0x0D	; 13
   1114e:	0e 94 be 76 	call	0xed7c	; 0xed7c <fputs>
    fprintf(fo,"            B = BUS_ERROR\n");
   11152:	be 01       	movw	r22, r28
   11154:	8c e1       	ldi	r24, 0x1C	; 28
   11156:	9d e0       	ldi	r25, 0x0D	; 13
   11158:	0e 94 be 76 	call	0xed7c	; 0xed7c <fputs>
    fprintf(fo,"              GPIB commands\n");
   1115c:	be 01       	movw	r22, r28
   1115e:	87 e3       	ldi	r24, 0x37	; 55
   11160:	9d e0       	ldi	r25, 0x0D	; 13
   11162:	0e 94 be 76 	call	0xed7c	; 0xed7c <fputs>
}
   11166:	df 91       	pop	r29
   11168:	cf 91       	pop	r28
   1116a:	08 95       	ret

0001116c <gpib_trace_display>:
/// @return  void
/// Note the bits we can read depends on what hardware verions we have
/// V2 hardware can only read status bits based on GPIB control buffer direction
///   FIXME We could add a test for read/write state ??
void gpib_trace_display(uint16_t status,int trace_state)
{
   1116c:	a9 e8       	ldi	r26, 0x89	; 137
   1116e:	b0 e0       	ldi	r27, 0x00	; 0
   11170:	ec eb       	ldi	r30, 0xBC	; 188
   11172:	f8 e8       	ldi	r31, 0x88	; 136
   11174:	0c 94 05 e7 	jmp	0x1ce0a	; 0x1ce0a <__prologue_saves__+0xc>
   11178:	8c 01       	movw	r16, r24
   1117a:	5b 01       	movw	r10, r22
    char str[128];
    char *tmp= str;
    uint8_t bus = status & 0xff;
    extern FILE *gpib_log_fp;

    str[0] = 0;
   1117c:	1a 86       	std	Y+10, r1	; 0x0a
   1117e:	4c 01       	movw	r8, r24
   11180:	88 24       	eor	r8, r8
   11182:	44 e0       	ldi	r20, 0x04	; 4
   11184:	94 22       	and	r9, r20
   11186:	ce 01       	movw	r24, r28
   11188:	0a 96       	adiw	r24, 0x0a	; 10
   1118a:	7c 01       	movw	r14, r24

// Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
   1118c:	62 30       	cpi	r22, 0x02	; 2
   1118e:	71 05       	cpc	r23, r1
   11190:	e8 f4       	brcc	.+58     	; 0x111cc <gpib_trace_display+0x60>
    {
        uint8_t printable = ' ';                  // Data
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
   11192:	81 14       	cp	r8, r1
   11194:	91 04       	cpc	r9, r1
   11196:	29 f4       	brne	.+10     	; 0x111a2 <gpib_trace_display+0x36>
///   FIXME We could add a test for read/write state ??
void gpib_trace_display(uint16_t status,int trace_state)
{
    char str[128];
    char *tmp= str;
    uint8_t bus = status & 0xff;
   11198:	80 2f       	mov	r24, r16

// Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
    {
        uint8_t printable = ' ';                  // Data
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
   1119a:	90 ee       	ldi	r25, 0xE0	; 224
   1119c:	90 0f       	add	r25, r16
   1119e:	9f 35       	cpi	r25, 0x5F	; 95
   111a0:	08 f0       	brcs	.+2      	; 0x111a4 <gpib_trace_display+0x38>
    str[0] = 0;

// Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
    {
        uint8_t printable = ' ';                  // Data
   111a2:	80 e2       	ldi	r24, 0x20	; 32
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
            printable = bus;
        sprintf(str, "%02X %c ", (int)bus & 0xff, (int)printable);
   111a4:	90 e0       	ldi	r25, 0x00	; 0
   111a6:	ed b7       	in	r30, 0x3d	; 61
   111a8:	fe b7       	in	r31, 0x3e	; 62
   111aa:	91 87       	std	Z+9, r25	; 0x09
   111ac:	80 87       	std	Z+8, r24	; 0x08
   111ae:	c8 01       	movw	r24, r16
   111b0:	99 27       	eor	r25, r25
   111b2:	97 83       	std	Z+7, r25	; 0x07
   111b4:	86 83       	std	Z+6, r24	; 0x06
   111b6:	89 e2       	ldi	r24, 0x29	; 41
   111b8:	90 e1       	ldi	r25, 0x10	; 16
   111ba:	a0 e0       	ldi	r26, 0x00	; 0
   111bc:	83 83       	std	Z+3, r24	; 0x03
   111be:	94 83       	std	Z+4, r25	; 0x04
   111c0:	a5 83       	std	Z+5, r26	; 0x05
   111c2:	f2 82       	std	Z+2, r15	; 0x02
   111c4:	e1 82       	std	Z+1, r14	; 0x01
   111c6:	0e 94 1c 47 	call	0x8e38	; 0x8e38 <sprintf_P>
   111ca:	0c c0       	rjmp	.+24     	; 0x111e4 <gpib_trace_display+0x78>
    }
    else
    {
        sprintf(str, "     ");
   111cc:	83 e2       	ldi	r24, 0x23	; 35
   111ce:	90 e1       	ldi	r25, 0x10	; 16
   111d0:	a0 e0       	ldi	r26, 0x00	; 0
   111d2:	ed b7       	in	r30, 0x3d	; 61
   111d4:	fe b7       	in	r31, 0x3e	; 62
   111d6:	83 83       	std	Z+3, r24	; 0x03
   111d8:	94 83       	std	Z+4, r25	; 0x04
   111da:	a5 83       	std	Z+5, r26	; 0x05
   111dc:	f2 82       	std	Z+2, r15	; 0x02
   111de:	e1 82       	std	Z+1, r14	; 0x01
   111e0:	0e 94 1c 47 	call	0x8e38	; 0x8e38 <sprintf_P>
    }

    tmp = str + strlen(str);
   111e4:	f7 01       	movw	r30, r14
   111e6:	01 90       	ld	r0, Z+
   111e8:	00 20       	and	r0, r0
   111ea:	e9 f7       	brne	.-6      	; 0x111e6 <gpib_trace_display+0x7a>
   111ec:	31 97       	sbiw	r30, 0x01	; 1
   111ee:	cf 01       	movw	r24, r30
   111f0:	01 96       	adiw	r24, 0x01	; 1

    if(status & ATN_FLAG)
   111f2:	81 14       	cp	r8, r1
   111f4:	91 04       	cpc	r9, r1
   111f6:	11 f0       	breq	.+4      	; 0x111fc <gpib_trace_display+0x90>
        *tmp++ = 'A';
   111f8:	21 e4       	ldi	r18, 0x41	; 65
   111fa:	01 c0       	rjmp	.+2      	; 0x111fe <gpib_trace_display+0x92>
    else
        *tmp++ = '-';
   111fc:	2d e2       	ldi	r18, 0x2D	; 45
   111fe:	20 83       	st	Z, r18
   11200:	dc 01       	movw	r26, r24
   11202:	11 96       	adiw	r26, 0x01	; 1

    if(status & EOI_FLAG)
   11204:	10 ff       	sbrs	r17, 0
   11206:	02 c0       	rjmp	.+4      	; 0x1120c <gpib_trace_display+0xa0>
        *tmp++ = 'E';
   11208:	25 e4       	ldi	r18, 0x45	; 69
   1120a:	01 c0       	rjmp	.+2      	; 0x1120e <gpib_trace_display+0xa2>
    else
        *tmp++ = '-';
   1120c:	2d e2       	ldi	r18, 0x2D	; 45
   1120e:	fc 01       	movw	r30, r24
   11210:	20 83       	st	Z, r18
   11212:	fd 01       	movw	r30, r26
   11214:	31 96       	adiw	r30, 0x01	; 1

    if(status & SRQ_FLAG)
   11216:	11 ff       	sbrs	r17, 1
   11218:	02 c0       	rjmp	.+4      	; 0x1121e <gpib_trace_display+0xb2>
        *tmp++ = 'S';
   1121a:	83 e5       	ldi	r24, 0x53	; 83
   1121c:	01 c0       	rjmp	.+2      	; 0x11220 <gpib_trace_display+0xb4>
    else
        *tmp++ = '-';
   1121e:	8d e2       	ldi	r24, 0x2D	; 45
   11220:	8c 93       	st	X, r24
   11222:	df 01       	movw	r26, r30
   11224:	11 96       	adiw	r26, 0x01	; 1

    if(status & REN_FLAG)
   11226:	13 ff       	sbrs	r17, 3
   11228:	02 c0       	rjmp	.+4      	; 0x1122e <gpib_trace_display+0xc2>
        *tmp++ = 'R';
   1122a:	82 e5       	ldi	r24, 0x52	; 82
   1122c:	01 c0       	rjmp	.+2      	; 0x11230 <gpib_trace_display+0xc4>
    else
        *tmp++ = '-';
   1122e:	8d e2       	ldi	r24, 0x2D	; 45
   11230:	80 83       	st	Z, r24
   11232:	fd 01       	movw	r30, r26
   11234:	31 96       	adiw	r30, 0x01	; 1

    if(status & IFC_FLAG)
   11236:	14 ff       	sbrs	r17, 4
   11238:	02 c0       	rjmp	.+4      	; 0x1123e <gpib_trace_display+0xd2>
        *tmp++ = 'I';
   1123a:	89 e4       	ldi	r24, 0x49	; 73
   1123c:	01 c0       	rjmp	.+2      	; 0x11240 <gpib_trace_display+0xd4>
    else
        *tmp++ = '-';
   1123e:	8d e2       	ldi	r24, 0x2D	; 45
   11240:	8c 93       	st	X, r24

    if(trace_state == TRACE_DISABLE)
   11242:	a1 14       	cp	r10, r1
   11244:	b1 04       	cpc	r11, r1
   11246:	d1 f4       	brne	.+52     	; 0x1127c <gpib_trace_display+0x110>
   11248:	df 01       	movw	r26, r30
   1124a:	11 96       	adiw	r26, 0x01	; 1
    {
        if(status & PP_FLAG)
   1124c:	15 ff       	sbrs	r17, 5
   1124e:	02 c0       	rjmp	.+4      	; 0x11254 <gpib_trace_display+0xe8>
            *tmp++ = 'P';
   11250:	80 e5       	ldi	r24, 0x50	; 80
   11252:	01 c0       	rjmp	.+2      	; 0x11256 <gpib_trace_display+0xea>
        else
            *tmp++ = '-';
   11254:	8d e2       	ldi	r24, 0x2D	; 45
   11256:	80 83       	st	Z, r24
   11258:	fd 01       	movw	r30, r26
   1125a:	31 96       	adiw	r30, 0x01	; 1
        if(status & TIMEOUT_FLAG)
   1125c:	16 ff       	sbrs	r17, 6
   1125e:	02 c0       	rjmp	.+4      	; 0x11264 <gpib_trace_display+0xf8>
            *tmp++ = 'T';
   11260:	84 e5       	ldi	r24, 0x54	; 84
   11262:	01 c0       	rjmp	.+2      	; 0x11266 <gpib_trace_display+0xfa>
        else
            *tmp++ = '-';
   11264:	8d e2       	ldi	r24, 0x2D	; 45
   11266:	8c 93       	st	X, r24
   11268:	cf 01       	movw	r24, r30
   1126a:	01 96       	adiw	r24, 0x01	; 1
        if(status & BUS_ERROR_FLAG)
            *tmp++ = 'B';
   1126c:	6c 01       	movw	r12, r24
            *tmp++ = '-';
        if(status & TIMEOUT_FLAG)
            *tmp++ = 'T';
        else
            *tmp++ = '-';
        if(status & BUS_ERROR_FLAG)
   1126e:	17 ff       	sbrs	r17, 7
   11270:	02 c0       	rjmp	.+4      	; 0x11276 <gpib_trace_display+0x10a>
            *tmp++ = 'B';
   11272:	82 e4       	ldi	r24, 0x42	; 66
   11274:	01 c0       	rjmp	.+2      	; 0x11278 <gpib_trace_display+0x10c>
        else
            *tmp++ = '-';
   11276:	8d e2       	ldi	r24, 0x2D	; 45
   11278:	80 83       	st	Z, r24
   1127a:	08 c0       	rjmp	.+16     	; 0x1128c <gpib_trace_display+0x120>
    }
    else
    {
// not used when tracing
        *tmp++ = '-';
   1127c:	8d e2       	ldi	r24, 0x2D	; 45
   1127e:	80 83       	st	Z, r24
        *tmp++ = '-';
   11280:	81 83       	std	Z+1, r24	; 0x01
        *tmp++ = '-';
   11282:	6f 01       	movw	r12, r30
   11284:	43 e0       	ldi	r20, 0x03	; 3
   11286:	c4 0e       	add	r12, r20
   11288:	d1 1c       	adc	r13, r1
   1128a:	82 83       	std	Z+2, r24	; 0x02
    }
    *tmp = 0;
   1128c:	f6 01       	movw	r30, r12
   1128e:	10 82       	st	Z, r1

    if(trace_state == TRACE_READ || trace_state == TRACE_BUS)
   11290:	f1 e0       	ldi	r31, 0x01	; 1
   11292:	af 1a       	sub	r10, r31
   11294:	b1 08       	sbc	r11, r1
   11296:	42 e0       	ldi	r20, 0x02	; 2
   11298:	a4 16       	cp	r10, r20
   1129a:	b1 04       	cpc	r11, r1
   1129c:	f0 f4       	brcc	.+60     	; 0x112da <gpib_trace_display+0x16e>
    {
        if(status & DAV_FLAG)
   1129e:	15 ff       	sbrs	r17, 5
   112a0:	03 c0       	rjmp	.+6      	; 0x112a8 <gpib_trace_display+0x13c>
            strcat(str,"  DAV");
   112a2:	64 e5       	ldi	r22, 0x54	; 84
   112a4:	7d e0       	ldi	r23, 0x0D	; 13
   112a6:	02 c0       	rjmp	.+4      	; 0x112ac <gpib_trace_display+0x140>
        else
            strcat(str,"     ");
   112a8:	65 e6       	ldi	r22, 0x65	; 101
   112aa:	74 e0       	ldi	r23, 0x04	; 4
   112ac:	c7 01       	movw	r24, r14
   112ae:	0e 94 92 31 	call	0x6324	; 0x6324 <strcat>
        if(status & NRFD_FLAG)
   112b2:	16 ff       	sbrs	r17, 6
   112b4:	03 c0       	rjmp	.+6      	; 0x112bc <gpib_trace_display+0x150>
            strcat(str," NRFD");
   112b6:	6a e5       	ldi	r22, 0x5A	; 90
   112b8:	7d e0       	ldi	r23, 0x0D	; 13
   112ba:	02 c0       	rjmp	.+4      	; 0x112c0 <gpib_trace_display+0x154>
        else
            strcat(str,"     ");
   112bc:	65 e6       	ldi	r22, 0x65	; 101
   112be:	74 e0       	ldi	r23, 0x04	; 4
   112c0:	c7 01       	movw	r24, r14
   112c2:	0e 94 92 31 	call	0x6324	; 0x6324 <strcat>
        if(status & NDAC_FLAG)
   112c6:	17 ff       	sbrs	r17, 7
   112c8:	03 c0       	rjmp	.+6      	; 0x112d0 <gpib_trace_display+0x164>
            strcat(str," NDAC");
   112ca:	60 e6       	ldi	r22, 0x60	; 96
   112cc:	7d e0       	ldi	r23, 0x0D	; 13
   112ce:	02 c0       	rjmp	.+4      	; 0x112d4 <gpib_trace_display+0x168>
        else
            strcat(str,"     ");
   112d0:	65 e6       	ldi	r22, 0x65	; 101
   112d2:	74 e0       	ldi	r23, 0x04	; 4
   112d4:	c7 01       	movw	r24, r14
   112d6:	0e 94 92 31 	call	0x6324	; 0x6324 <strcat>
    }

    if( (status & ATN_FLAG) )
   112da:	81 14       	cp	r8, r1
   112dc:	91 04       	cpc	r9, r1
   112de:	09 f4       	brne	.+2      	; 0x112e2 <gpib_trace_display+0x176>
   112e0:	5a c0       	rjmp	.+180    	; 0x11396 <gpib_trace_display+0x22a>
    {
        int i;
        int cmd = status & CMD_MASK;
   112e2:	c8 01       	movw	r24, r16
   112e4:	8f 77       	andi	r24, 0x7F	; 127
   112e6:	99 27       	eor	r25, r25
        if(cmd >= 0x020 && cmd <= 0x3e)
   112e8:	9c 01       	movw	r18, r24
   112ea:	20 52       	subi	r18, 0x20	; 32
   112ec:	31 09       	sbc	r19, r1
   112ee:	2f 31       	cpi	r18, 0x1F	; 31
   112f0:	31 05       	cpc	r19, r1
   112f2:	48 f4       	brcc	.+18     	; 0x11306 <gpib_trace_display+0x19a>
            sprintf(tmp," MLA %02Xh", cmd & 0x1f);
   112f4:	0f 71       	andi	r16, 0x1F	; 31
   112f6:	11 27       	eor	r17, r17
   112f8:	ed b7       	in	r30, 0x3d	; 61
   112fa:	fe b7       	in	r31, 0x3e	; 62
   112fc:	17 83       	std	Z+7, r17	; 0x07
   112fe:	06 83       	std	Z+6, r16	; 0x06
   11300:	88 e1       	ldi	r24, 0x18	; 24
   11302:	90 e1       	ldi	r25, 0x10	; 16
   11304:	0e c0       	rjmp	.+28     	; 0x11322 <gpib_trace_display+0x1b6>
        else if(cmd >= 0x040 && cmd <= 0x4e)
   11306:	9c 01       	movw	r18, r24
   11308:	20 54       	subi	r18, 0x40	; 64
   1130a:	31 09       	sbc	r19, r1
   1130c:	2f 30       	cpi	r18, 0x0F	; 15
   1130e:	31 05       	cpc	r19, r1
   11310:	88 f4       	brcc	.+34     	; 0x11334 <gpib_trace_display+0x1c8>
            sprintf(tmp," MTA %02Xh", cmd & 0x1f);
   11312:	0f 71       	andi	r16, 0x1F	; 31
   11314:	11 27       	eor	r17, r17
   11316:	ed b7       	in	r30, 0x3d	; 61
   11318:	fe b7       	in	r31, 0x3e	; 62
   1131a:	17 83       	std	Z+7, r17	; 0x07
   1131c:	06 83       	std	Z+6, r16	; 0x06
   1131e:	8d e0       	ldi	r24, 0x0D	; 13
   11320:	90 e1       	ldi	r25, 0x10	; 16
   11322:	a0 e0       	ldi	r26, 0x00	; 0
   11324:	83 83       	std	Z+3, r24	; 0x03
   11326:	94 83       	std	Z+4, r25	; 0x04
   11328:	a5 83       	std	Z+5, r26	; 0x05
   1132a:	d2 82       	std	Z+2, r13	; 0x02
   1132c:	c1 82       	std	Z+1, r12	; 0x01
   1132e:	0e 94 1c 47 	call	0x8e38	; 0x8e38 <sprintf_P>
   11332:	31 c0       	rjmp	.+98     	; 0x11396 <gpib_trace_display+0x22a>
        else if(cmd >= 0x060 && cmd <= 0x6f)
   11334:	9c 01       	movw	r18, r24
   11336:	20 56       	subi	r18, 0x60	; 96
   11338:	31 09       	sbc	r19, r1
   1133a:	20 31       	cpi	r18, 0x10	; 16
   1133c:	31 05       	cpc	r19, r1
   1133e:	28 f0       	brcs	.+10     	; 0x1134a <gpib_trace_display+0x1de>
   11340:	e2 e8       	ldi	r30, 0x82	; 130
   11342:	f1 e0       	ldi	r31, 0x01	; 1
   11344:	00 e0       	ldi	r16, 0x00	; 0
   11346:	10 e0       	ldi	r17, 0x00	; 0
   11348:	0b c0       	rjmp	.+22     	; 0x11360 <gpib_trace_display+0x1f4>
            sprintf(tmp," MSA %02Xh", cmd & 0x1f);
   1134a:	0f 71       	andi	r16, 0x1F	; 31
   1134c:	11 27       	eor	r17, r17
   1134e:	ed b7       	in	r30, 0x3d	; 61
   11350:	fe b7       	in	r31, 0x3e	; 62
   11352:	17 83       	std	Z+7, r17	; 0x07
   11354:	06 83       	std	Z+6, r16	; 0x06
   11356:	82 e0       	ldi	r24, 0x02	; 2
   11358:	90 e1       	ldi	r25, 0x10	; 16
   1135a:	e3 cf       	rjmp	.-58     	; 0x11322 <gpib_trace_display+0x1b6>
        else
        {
            for(i=0;gpib_tokens[i].cmd != -1;++i)
   1135c:	0f 5f       	subi	r16, 0xFF	; 255
   1135e:	1f 4f       	sbci	r17, 0xFF	; 255
   11360:	20 81       	ld	r18, Z
   11362:	31 81       	ldd	r19, Z+1	; 0x01
   11364:	2f 3f       	cpi	r18, 0xFF	; 255
   11366:	4f ef       	ldi	r20, 0xFF	; 255
   11368:	34 07       	cpc	r19, r20
   1136a:	a9 f0       	breq	.+42     	; 0x11396 <gpib_trace_display+0x22a>
   1136c:	34 96       	adiw	r30, 0x04	; 4
            {
                if(cmd == gpib_tokens[i].cmd)
   1136e:	82 17       	cp	r24, r18
   11370:	93 07       	cpc	r25, r19
   11372:	a1 f7       	brne	.-24     	; 0x1135c <gpib_trace_display+0x1f0>
                {
                    strcat(tmp," ");
   11374:	69 e6       	ldi	r22, 0x69	; 105
   11376:	74 e0       	ldi	r23, 0x04	; 4
   11378:	c6 01       	movw	r24, r12
   1137a:	0e 94 92 31 	call	0x6324	; 0x6324 <strcat>
                    strcat(tmp,gpib_tokens[i].name);
   1137e:	f8 01       	movw	r30, r16
   11380:	ee 0f       	add	r30, r30
   11382:	ff 1f       	adc	r31, r31
   11384:	ee 0f       	add	r30, r30
   11386:	ff 1f       	adc	r31, r31
   11388:	ee 57       	subi	r30, 0x7E	; 126
   1138a:	fe 4f       	sbci	r31, 0xFE	; 254
   1138c:	62 81       	ldd	r22, Z+2	; 0x02
   1138e:	73 81       	ldd	r23, Z+3	; 0x03
   11390:	c6 01       	movw	r24, r12
   11392:	0e 94 92 31 	call	0x6324	; 0x6324 <strcat>
                }
            }
        }
    }

    if(gpib_log_fp == NULL)
   11396:	20 91 68 19 	lds	r18, 0x1968	; 0x801968 <gpib_log_fp>
   1139a:	30 91 69 19 	lds	r19, 0x1969	; 0x801969 <gpib_log_fp+0x1>
   1139e:	80 91 c9 1c 	lds	r24, 0x1CC9	; 0x801cc9 <__iob+0x2>
   113a2:	90 91 ca 1c 	lds	r25, 0x1CCA	; 0x801cca <__iob+0x3>
   113a6:	23 2b       	or	r18, r19
   113a8:	21 f4       	brne	.+8      	; 0x113b2 <gpib_trace_display+0x246>
        gpib_log_fp = stdout;
   113aa:	90 93 69 19 	sts	0x1969, r25	; 0x801969 <gpib_log_fp+0x1>
   113ae:	80 93 68 19 	sts	0x1968, r24	; 0x801968 <gpib_log_fp>

// Echo to console unless file is the console
    if(gpib_log_fp != stdout)
   113b2:	20 91 68 19 	lds	r18, 0x1968	; 0x801968 <gpib_log_fp>
   113b6:	30 91 69 19 	lds	r19, 0x1969	; 0x801969 <gpib_log_fp+0x1>
   113ba:	82 17       	cp	r24, r18
   113bc:	93 07       	cpc	r25, r19
   113be:	19 f0       	breq	.+6      	; 0x113c6 <gpib_trace_display+0x25a>
        puts(str);
   113c0:	c7 01       	movw	r24, r14
   113c2:	0e 94 d6 76 	call	0xedac	; 0xedac <puts>

// Save to file
    fprintf(gpib_log_fp,"%s\n",str);
   113c6:	ed b7       	in	r30, 0x3d	; 61
   113c8:	fe b7       	in	r31, 0x3e	; 62
   113ca:	f6 82       	std	Z+6, r15	; 0x06
   113cc:	e5 82       	std	Z+5, r14	; 0x05
   113ce:	86 e6       	ldi	r24, 0x66	; 102
   113d0:	9d e0       	ldi	r25, 0x0D	; 13
   113d2:	94 83       	std	Z+4, r25	; 0x04
   113d4:	83 83       	std	Z+3, r24	; 0x03
   113d6:	80 91 68 19 	lds	r24, 0x1968	; 0x801968 <gpib_log_fp>
   113da:	90 91 69 19 	lds	r25, 0x1969	; 0x801969 <gpib_log_fp+0x1>
   113de:	92 83       	std	Z+2, r25	; 0x02
   113e0:	81 83       	std	Z+1, r24	; 0x01
   113e2:	0e 94 7e 7e 	call	0xfcfc	; 0xfcfc <fprintf>
}
   113e6:	c7 57       	subi	r28, 0x77	; 119
   113e8:	df 4f       	sbci	r29, 0xFF	; 255
   113ea:	ec e0       	ldi	r30, 0x0C	; 12
   113ec:	0c 94 21 e7 	jmp	0x1ce42	; 0x1ce42 <__epilogue_restores__+0xc>

000113f0 <gpib_read_byte>:
///     - Error Flags:
///       - IFC_FLAG
///
/// @return (data bus, control and error status)
uint16_t gpib_read_byte(int trace)
{
   113f0:	af 92       	push	r10
   113f2:	bf 92       	push	r11
   113f4:	cf 92       	push	r12
   113f6:	df 92       	push	r13
   113f8:	ef 92       	push	r14
   113fa:	ff 92       	push	r15
   113fc:	0f 93       	push	r16
   113fe:	1f 93       	push	r17
   11400:	cf 93       	push	r28
   11402:	00 d0       	rcall	.+0      	; 0x11404 <gpib_read_byte+0x14>
   11404:	00 d0       	rcall	.+0      	; 0x11406 <gpib_read_byte+0x16>
   11406:	1f 92       	push	r1

    ch = 0;
    control_last = 0;

	// Return unread - last read - data and control lines
    if(gpib_unread_f)
   11408:	20 91 67 19 	lds	r18, 0x1967	; 0x801967 <gpib_unread_f>
   1140c:	22 23       	and	r18, r18
   1140e:	39 f0       	breq	.+14     	; 0x1141e <gpib_read_byte+0x2e>
    {
		// FYI any unread data has been traced
        gpib_unread_f = 0;
   11410:	10 92 67 19 	sts	0x1967, r1	; 0x801967 <gpib_unread_f>
        return(gpib_unread_data);
   11414:	80 91 fa 1e 	lds	r24, 0x1EFA	; 0x801efa <gpib_unread_data>
   11418:	90 91 fb 1e 	lds	r25, 0x1EFB	; 0x801efb <gpib_unread_data+0x1>
   1141c:	e0 c0       	rjmp	.+448    	; 0x115de <gpib_read_byte+0x1ee>
   1141e:	6c 01       	movw	r12, r24
	// We start and end gpib_read_byte() with NRFD and NDAC LOW 
	// When ATN goes LOW all devices must pull NRFD and NDAC lines LOW
	// within 200 nanoseconds to permit three-wire handshake 
	// ATN requirements are met because we are always reading in command mode
	// ATN = 0 = COmmand Mode
    gpib_rx_init(1);
   11420:	81 e0       	ldi	r24, 0x01	; 1
   11422:	05 dc       	rcall	.-2038   	; 0x10c2e <gpib_rx_init>
	// GPIB_IO_LOW(TE);			// BUS IN
	// BUS IN, DAV IN, NDAC OUT , NRFD OUT 
	// ATN IN, EOI IN, SRQ OUT OC

	///@brief V2 boards can NOT read ALL bits on the control bus at once
    if(trace)
   11424:	c1 14       	cp	r12, r1
   11426:	d1 04       	cpc	r13, r1
    {
        control_last = gpib_control_pin_read();
   11428:	51 f0       	breq	.+20     	; 0x1143e <gpib_read_byte+0x4e>
   1142a:	fa dc       	rcall	.-1548   	; 0x10e20 <gpib_control_pin_read>
        control_last |= gpib_handshake_pin_read();
   1142c:	7c 01       	movw	r14, r24
   1142e:	08 dd       	rcall	.-1520   	; 0x10e40 <gpib_handshake_pin_read>
   11430:	e8 2a       	or	r14, r24
   11432:	f9 2a       	or	r15, r25
        gpib_trace_display(control_last, TRACE_BUS);
   11434:	62 e0       	ldi	r22, 0x02	; 2
   11436:	70 e0       	ldi	r23, 0x00	; 0
   11438:	c7 01       	movw	r24, r14
   1143a:	98 de       	rcall	.-720    	; 0x1116c <gpib_trace_display>
   1143c:	02 c0       	rjmp	.+4      	; 0x11442 <gpib_read_byte+0x52>
    uint16_t bus, control, control_last;
    extern uint8_t gpib_unread_f;
    extern uint16_t gpib_unread_data;

    ch = 0;
    control_last = 0;
   1143e:	e1 2c       	mov	r14, r1
   11440:	f1 2c       	mov	r15, r1
        control_last = gpib_control_pin_read();
        control_last |= gpib_handshake_pin_read();
        gpib_trace_display(control_last, TRACE_BUS);
    }

	gpib_timeout_set(HTIMEOUT);
   11442:	64 ef       	ldi	r22, 0xF4	; 244
   11444:	71 e0       	ldi	r23, 0x01	; 1
   11446:	80 e0       	ldi	r24, 0x00	; 0
   11448:	90 e0       	ldi	r25, 0x00	; 0
   1144a:	af db       	rcall	.-2210   	; 0x10baa <gpib_timeout_set>
    rx_state = GPIB_RX_START;
   1144c:	c0 e0       	ldi	r28, 0x00	; 0
    uint16_t ch;
    uint16_t bus, control, control_last;
    extern uint8_t gpib_unread_f;
    extern uint16_t gpib_unread_data;

    ch = 0;
   1144e:	00 e0       	ldi	r16, 0x00	; 0
   11450:	10 e0       	ldi	r17, 0x00	; 0
    rx_state = GPIB_RX_START;
    while(rx_state != GPIB_RX_DONE)
    {

        // User task that is called while waiting for commands
        gpib_user_task();
   11452:	0e 94 45 e2 	call	0x1c48a	; 0x1c48a <gpib_user_task>

        if(uart_keyhit(0))
   11456:	80 e0       	ldi	r24, 0x00	; 0
   11458:	0e 94 95 2a 	call	0x552a	; 0x552a <uart_keyhit>
   1145c:	89 2b       	or	r24, r25
   1145e:	09 f0       	breq	.+2      	; 0x11462 <gpib_read_byte+0x72>
   11460:	9c c0       	rjmp	.+312    	; 0x1159a <gpib_read_byte+0x1aa>
        if(gpib_detect_PP())
            ch |= PP_FLAG;
#endif

		// IFC is alwayon IN always in device mode
        if(GPIB_PIN_TST(IFC) == 0)
   11462:	4c 99       	sbic	0x09, 4	; 9
   11464:	15 c0       	rjmp	.+42     	; 0x11490 <gpib_read_byte+0xa0>
        {
            ch |= IFC_FLAG;
   11466:	10 61       	ori	r17, 0x10	; 16
			if(debuglevel & GPIB_ERR)
   11468:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1146c:	80 ff       	sbrs	r24, 0
   1146e:	0e c0       	rjmp	.+28     	; 0x1148c <gpib_read_byte+0x9c>
				printf("gpib_read_byte: IFC state=%d\n", rx_state);
   11470:	8c 2f       	mov	r24, r28
   11472:	90 e0       	ldi	r25, 0x00	; 0
   11474:	ed b7       	in	r30, 0x3d	; 61
   11476:	fe b7       	in	r31, 0x3e	; 62
   11478:	95 83       	std	Z+5, r25	; 0x05
   1147a:	84 83       	std	Z+4, r24	; 0x04
   1147c:	82 e3       	ldi	r24, 0x32	; 50
   1147e:	90 e1       	ldi	r25, 0x10	; 16
   11480:	a0 e0       	ldi	r26, 0x00	; 0
   11482:	81 83       	std	Z+1, r24	; 0x01
   11484:	92 83       	std	Z+2, r25	; 0x02
   11486:	a3 83       	std	Z+3, r26	; 0x03
   11488:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
            gpib_bus_init();
   1148c:	98 db       	rcall	.-2256   	; 0x10bbe <gpib_bus_init>
   1148e:	85 c0       	rjmp	.+266    	; 0x1159a <gpib_read_byte+0x1aa>
            break;
        }

        switch(rx_state)
   11490:	c2 30       	cpi	r28, 0x02	; 2
   11492:	31 f1       	breq	.+76     	; 0x114e0 <gpib_read_byte+0xf0>
   11494:	28 f4       	brcc	.+10     	; 0x114a0 <gpib_read_byte+0xb0>
   11496:	cc 23       	and	r28, r28
   11498:	69 f0       	breq	.+26     	; 0x114b4 <gpib_read_byte+0xc4>
   1149a:	c1 30       	cpi	r28, 0x01	; 1
   1149c:	c9 f0       	breq	.+50     	; 0x114d0 <gpib_read_byte+0xe0>
   1149e:	63 c0       	rjmp	.+198    	; 0x11566 <gpib_read_byte+0x176>
   114a0:	c5 30       	cpi	r28, 0x05	; 5
   114a2:	09 f4       	brne	.+2      	; 0x114a6 <gpib_read_byte+0xb6>
   114a4:	54 c0       	rjmp	.+168    	; 0x1154e <gpib_read_byte+0x15e>
   114a6:	c7 30       	cpi	r28, 0x07	; 7
   114a8:	09 f4       	brne	.+2      	; 0x114ac <gpib_read_byte+0xbc>
   114aa:	58 c0       	rjmp	.+176    	; 0x1155c <gpib_read_byte+0x16c>
   114ac:	c4 30       	cpi	r28, 0x04	; 4
   114ae:	09 f0       	breq	.+2      	; 0x114b2 <gpib_read_byte+0xc2>
   114b0:	5a c0       	rjmp	.+180    	; 0x11566 <gpib_read_byte+0x176>
   114b2:	3e c0       	rjmp	.+124    	; 0x11530 <gpib_read_byte+0x140>
        {

			///@brief DAV must be high
            case GPIB_RX_START:
				//DEBUG
				if (GPIB_PIN_TST(DAV) == 1)
   114b4:	19 9b       	sbis	0x03, 1	; 3
   114b6:	43 c0       	rjmp	.+134    	; 0x1153e <gpib_read_byte+0x14e>
   114b8:	fd e0       	ldi	r31, 0x0D	; 13
   114ba:	fa 95       	dec	r31
   114bc:	f1 f7       	brne	.-4      	; 0x114ba <gpib_read_byte+0xca>
   114be:	00 00       	nop
				{
					GPIB_BUS_SETTLE();                // Let Data BUS settle
					GPIB_PIN_FLOAT_UP(NRFD);
   114c0:	52 98       	cbi	0x0a, 2	; 10
   114c2:	5a 9a       	sbi	0x0b, 2	; 11
   114c4:	8d e0       	ldi	r24, 0x0D	; 13
   114c6:	8a 95       	dec	r24
   114c8:	f1 f7       	brne	.-4      	; 0x114c6 <gpib_read_byte+0xd6>
   114ca:	00 00       	nop
					GPIB_BUS_SETTLE();                // Let Data BUS settle
					rx_state = GPIB_RX_WAIT_FOR_DAV_LOW;
   114cc:	c1 e0       	ldi	r28, 0x01	; 1
   114ce:	37 c0       	rjmp	.+110    	; 0x1153e <gpib_read_byte+0x14e>
                }
                break;

			// Wait for Data Avalable without timeout
            case GPIB_RX_WAIT_FOR_DAV_LOW:
                if ( GPIB_PIN_TST(DAV) == 0 )
   114d0:	19 99       	sbic	0x03, 1	; 3
   114d2:	80 c0       	rjmp	.+256    	; 0x115d4 <gpib_read_byte+0x1e4>
   114d4:	ed e0       	ldi	r30, 0x0D	; 13
   114d6:	ea 95       	dec	r30
   114d8:	f1 f7       	brne	.-4      	; 0x114d6 <gpib_read_byte+0xe6>
   114da:	00 00       	nop
				{
					GPIB_BUS_SETTLE();                
                    rx_state = GPIB_RX_DAV_IS_LOW;
   114dc:	c2 e0       	ldi	r28, 0x02	; 2
   114de:	7a c0       	rjmp	.+244    	; 0x115d4 <gpib_read_byte+0x1e4>
				}
                break;

			// Data is Avaliable
            case GPIB_RX_DAV_IS_LOW:
				GPIB_IO_LOW(NRFD); // BUSY
   114e0:	5a 98       	cbi	0x0b, 2	; 11
   114e2:	52 9a       	sbi	0x0a, 2	; 10
   114e4:	fd e0       	ldi	r31, 0x0D	; 13
   114e6:	fa 95       	dec	r31
				GPIB_BUS_SETTLE();                

				// Read DATA and Control lines
				// gpib_bus_read() strips parity if ATN is low command state

                bus = gpib_bus_read();
   114e8:	f1 f7       	brne	.-4      	; 0x114e6 <gpib_read_byte+0xf6>
   114ea:	00 00       	nop
   114ec:	93 dc       	rcall	.-1754   	; 0x10e14 <gpib_bus_read>
   114ee:	a8 2e       	mov	r10, r24
                ch |= bus;

				///@brief V2 boards can NOT read all control bits at once
				///@brief NRFD,NDAC and SRQ are cirrently outputs

                control_last = gpib_control_pin_read();
   114f0:	b1 2c       	mov	r11, r1
   114f2:	96 dc       	rcall	.-1748   	; 0x10e20 <gpib_control_pin_read>
   114f4:	7c 01       	movw	r14, r24
   114f6:	08 2b       	or	r16, r24
                ch |= control_last;
   114f8:	19 2b       	or	r17, r25
   114fa:	0a 29       	or	r16, r10

				// In theory the control_last should not have changed
				// from the initial values. ONly the Data BUS
                if(trace)
   114fc:	1b 29       	or	r17, r11
   114fe:	c1 14       	cp	r12, r1
   11500:	d1 04       	cpc	r13, r1
                {
                    control_last |= gpib_handshake_pin_read();
   11502:	49 f0       	breq	.+18     	; 0x11516 <gpib_read_byte+0x126>
   11504:	9d dc       	rcall	.-1734   	; 0x10e40 <gpib_handshake_pin_read>
   11506:	e8 2a       	or	r14, r24
                    gpib_trace_display(bus | control_last, TRACE_READ);
   11508:	f9 2a       	or	r15, r25
   1150a:	61 e0       	ldi	r22, 0x01	; 1
   1150c:	70 e0       	ldi	r23, 0x00	; 0
   1150e:	c5 01       	movw	r24, r10
   11510:	8e 29       	or	r24, r14
   11512:	9f 29       	or	r25, r15
   11514:	2b de       	rcall	.-938    	; 0x1116c <gpib_trace_display>
                }

				// Release NDAC to say we read the byte
                GPIB_PIN_FLOAT_UP(NDAC);
   11516:	53 98       	cbi	0x0a, 3	; 10
   11518:	5b 9a       	sbi	0x0b, 3	; 11
   1151a:	8d e0       	ldi	r24, 0x0D	; 13
   1151c:	8a 95       	dec	r24
   1151e:	f1 f7       	brne	.-4      	; 0x1151c <gpib_read_byte+0x12c>
                GPIB_BUS_SETTLE();                // NDAC bus settle time
                gpib_timeout_set(HTIMEOUT);
   11520:	00 00       	nop
   11522:	64 ef       	ldi	r22, 0xF4	; 244
   11524:	71 e0       	ldi	r23, 0x01	; 1
   11526:	80 e0       	ldi	r24, 0x00	; 0
   11528:	90 e0       	ldi	r25, 0x00	; 0
   1152a:	3f db       	rcall	.-2434   	; 0x10baa <gpib_timeout_set>
                rx_state = GPIB_RX_WAIT_FOR_DAV_HI;
   1152c:	c4 e0       	ldi	r28, 0x04	; 4
   1152e:	52 c0       	rjmp	.+164    	; 0x115d4 <gpib_read_byte+0x1e4>
                break;

			///@brief Wait for DAV HI
            case GPIB_RX_WAIT_FOR_DAV_HI:
                if (GPIB_PIN_TST(DAV) == 1)
   11530:	19 9b       	sbis	0x03, 1	; 3
   11532:	05 c0       	rjmp	.+10     	; 0x1153e <gpib_read_byte+0x14e>
   11534:	ed e0       	ldi	r30, 0x0D	; 13
   11536:	ea 95       	dec	r30
   11538:	f1 f7       	brne	.-4      	; 0x11536 <gpib_read_byte+0x146>
   1153a:	00 00       	nop
                {
					GPIB_BUS_SETTLE();
                    rx_state = GPIB_RX_DAV_IS_HI;
   1153c:	c5 e0       	ldi	r28, 0x05	; 5
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   1153e:	80 91 ef 1c 	lds	r24, 0x1CEF	; 0x801cef <gpib_timer+0x8>
                if (GPIB_PIN_TST(DAV) == 1)
                {
					GPIB_BUS_SETTLE();
                    rx_state = GPIB_RX_DAV_IS_HI;
                }
                if (gpib_timeout_test())
   11542:	88 23       	and	r24, r24
   11544:	09 f4       	brne	.+2      	; 0x11548 <gpib_read_byte+0x158>
   11546:	46 c0       	rjmp	.+140    	; 0x115d4 <gpib_read_byte+0x1e4>
                {
                    ch |= TIMEOUT_FLAG;
   11548:	10 64       	ori	r17, 0x40	; 64
                    rx_state = GPIB_RX_ERROR;
   1154a:	c7 e0       	ldi	r28, 0x07	; 7
   1154c:	43 c0       	rjmp	.+134    	; 0x115d4 <gpib_read_byte+0x1e4>
                }
                break;

			///@brief Ready for next byte
            case GPIB_RX_DAV_IS_HI:
				GPIB_IO_LOW(NDAC);
   1154e:	5b 98       	cbi	0x0b, 3	; 11
   11550:	53 9a       	sbi	0x0a, 3	; 10
   11552:	fd e0       	ldi	r31, 0x0D	; 13
   11554:	fa 95       	dec	r31
   11556:	f1 f7       	brne	.-4      	; 0x11554 <gpib_read_byte+0x164>
   11558:	00 00       	nop
   1155a:	09 c0       	rjmp	.+18     	; 0x1156e <gpib_read_byte+0x17e>
				// Now BOTH NDAC and NRFD are LOW
                rx_state = GPIB_RX_DONE;
                break;

            case GPIB_RX_ERROR:
				GPIB_IO_LOW(NRFD);
   1155c:	5a 98       	cbi	0x0b, 2	; 11
   1155e:	52 9a       	sbi	0x0a, 2	; 10
				GPIB_IO_LOW(NDAC);
   11560:	5b 98       	cbi	0x0b, 3	; 11
   11562:	53 9a       	sbi	0x0a, 3	; 10

            case GPIB_RX_DONE:
                break;
        }

        if(trace)
   11564:	04 c0       	rjmp	.+8      	; 0x1156e <gpib_read_byte+0x17e>
   11566:	c1 14       	cp	r12, r1
   11568:	d1 04       	cpc	r13, r1
   1156a:	91 f0       	breq	.+36     	; 0x11590 <gpib_read_byte+0x1a0>
   1156c:	04 c0       	rjmp	.+8      	; 0x11576 <gpib_read_byte+0x186>
   1156e:	c1 14       	cp	r12, r1
   11570:	d1 04       	cpc	r13, r1
   11572:	99 f0       	breq	.+38     	; 0x1159a <gpib_read_byte+0x1aa>
        {
/// V2 boards can not read all control and handshake bits at once
/// FIXME We could add a test for read/write state ??
/// NRFD,NDAC SRQ are outputs durring write phase, but not at very start
            control = gpib_control_pin_read();
   11574:	c8 e0       	ldi	r28, 0x08	; 8
   11576:	54 dc       	rcall	.-1880   	; 0x10e20 <gpib_control_pin_read>
            control |= gpib_handshake_pin_read();
   11578:	5c 01       	movw	r10, r24
   1157a:	62 dc       	rcall	.-1852   	; 0x10e40 <gpib_handshake_pin_read>
   1157c:	a8 2a       	or	r10, r24
   1157e:	b9 2a       	or	r11, r25
            if(control_last != control)
   11580:	ae 14       	cp	r10, r14
   11582:	bf 04       	cpc	r11, r15
   11584:	31 f0       	breq	.+12     	; 0x11592 <gpib_read_byte+0x1a2>
            {
                gpib_trace_display(control, TRACE_BUS);
   11586:	62 e0       	ldi	r22, 0x02	; 2
   11588:	70 e0       	ldi	r23, 0x00	; 0
   1158a:	c5 01       	movw	r24, r10
   1158c:	ef dd       	rcall	.-1058   	; 0x1116c <gpib_trace_display>
   1158e:	01 c0       	rjmp	.+2      	; 0x11592 <gpib_read_byte+0x1a2>
   11590:	57 01       	movw	r10, r14

            case GPIB_RX_DONE:
                break;
        }

        if(trace)
   11592:	c8 30       	cpi	r28, 0x08	; 8
        gpib_trace_display(control_last, TRACE_BUS);
    }

	gpib_timeout_set(HTIMEOUT);
    rx_state = GPIB_RX_START;
    while(rx_state != GPIB_RX_DONE)
   11594:	11 f0       	breq	.+4      	; 0x1159a <gpib_read_byte+0x1aa>
   11596:	75 01       	movw	r14, r10
   11598:	5c cf       	rjmp	.-328    	; 0x11452 <gpib_read_byte+0x62>
   1159a:	80 91 f4 1e 	lds	r24, 0x1EF4	; 0x801ef4 <current>
///  - Remember that NDAC and NRFD are now both LOW!
///  - The spec says to KEEP BOTH LOW when NOT ready to read otherwise
///    we may miss a transfer and cause a controller timeout!
///  - GPIB TX state expects NRFD LOW on entry or it is an ERROR!

    lastcmd = current;
   1159e:	90 91 f5 1e 	lds	r25, 0x1EF5	; 0x801ef5 <current+0x1>
   115a2:	90 93 f1 1c 	sts	0x1CF1, r25	; 0x801cf1 <lastcmd+0x1>
   115a6:	80 93 f0 1c 	sts	0x1CF0, r24	; 0x801cf0 <lastcmd>
   115aa:	c8 01       	movw	r24, r16

    if(ch & ERROR_MASK || (ch & ATN_FLAG) == 0)
   115ac:	88 27       	eor	r24, r24
   115ae:	90 7d       	andi	r25, 0xD0	; 208
   115b0:	89 2b       	or	r24, r25
   115b2:	11 f4       	brne	.+4      	; 0x115b8 <gpib_read_byte+0x1c8>
   115b4:	12 fd       	sbrc	r17, 2
   115b6:	05 c0       	rjmp	.+10     	; 0x115c2 <gpib_read_byte+0x1d2>
   115b8:	10 92 f5 1e 	sts	0x1EF5, r1	; 0x801ef5 <current+0x1>
        current = 0;
   115bc:	10 92 f4 1e 	sts	0x1EF4, r1	; 0x801ef4 <current>
   115c0:	07 c0       	rjmp	.+14     	; 0x115d0 <gpib_read_byte+0x1e0>
   115c2:	c8 01       	movw	r24, r16
    else
        current = ch & CMD_MASK;
   115c4:	8f 77       	andi	r24, 0x7F	; 127
   115c6:	99 27       	eor	r25, r25
   115c8:	90 93 f5 1e 	sts	0x1EF5, r25	; 0x801ef5 <current+0x1>
   115cc:	80 93 f4 1e 	sts	0x1EF4, r24	; 0x801ef4 <current>
   115d0:	c8 01       	movw	r24, r16
   115d2:	05 c0       	rjmp	.+10     	; 0x115de <gpib_read_byte+0x1ee>
   115d4:	c1 14       	cp	r12, r1

            case GPIB_RX_DONE:
                break;
        }

        if(trace)
   115d6:	d1 04       	cpc	r13, r1
   115d8:	09 f4       	brne	.+2      	; 0x115dc <gpib_read_byte+0x1ec>
   115da:	3b cf       	rjmp	.-394    	; 0x11452 <gpib_read_byte+0x62>
   115dc:	cc cf       	rjmp	.-104    	; 0x11576 <gpib_read_byte+0x186>
   115de:	0f 90       	pop	r0
        current = 0;
    else
        current = ch & CMD_MASK;

    return (ch);
}
   115e0:	0f 90       	pop	r0
   115e2:	0f 90       	pop	r0
   115e4:	0f 90       	pop	r0
   115e6:	0f 90       	pop	r0
   115e8:	cf 91       	pop	r28
   115ea:	1f 91       	pop	r17
   115ec:	0f 91       	pop	r16
   115ee:	ff 90       	pop	r15
   115f0:	ef 90       	pop	r14
   115f2:	df 90       	pop	r13
   115f4:	cf 90       	pop	r12
   115f6:	bf 90       	pop	r11
   115f8:	af 90       	pop	r10
   115fa:	08 95       	ret

000115fc <gpib_decode>:
   115fc:	60 e0       	ldi	r22, 0x00	; 0
/// @see gpib_decode_str()
/// @return  void

void gpib_decode(uint16_t ch)
{
    gpib_trace_display(ch,0);
   115fe:	70 e0       	ldi	r23, 0x00	; 0
   11600:	b5 cd       	rjmp	.-1174   	; 0x1116c <gpib_trace_display>
   11602:	08 95       	ret

00011604 <gpib_read_str>:
///       - REN_FLAG
///       - PP_FLAG
///     - Error Flags:
///       - IFC_FLAG
int gpib_read_str(uint8_t *buf, int size, uint16_t *status)
{
   11604:	a7 e0       	ldi	r26, 0x07	; 7
   11606:	b0 e0       	ldi	r27, 0x00	; 0
   11608:	e8 e0       	ldi	r30, 0x08	; 8
   1160a:	fb e8       	ldi	r31, 0x8B	; 139
   1160c:	0c 94 07 e7 	jmp	0x1ce0e	; 0x1ce0e <__prologue_saves__+0x10>
   11610:	5b 01       	movw	r10, r22
   11612:	6a 01       	movw	r12, r20
    uint16_t val;
    int ind = 0;

    *status &= STATUS_MASK;
   11614:	fa 01       	movw	r30, r20
   11616:	20 81       	ld	r18, Z
   11618:	31 81       	ldd	r19, Z+1	; 0x01
   1161a:	22 27       	eor	r18, r18
   1161c:	31 83       	std	Z+1, r19	; 0x01
   1161e:	20 83       	st	Z, r18

    if(!size)
   11620:	67 2b       	or	r22, r23
   11622:	21 f0       	breq	.+8      	; 0x1162c <gpib_read_str+0x28>
   11624:	7c 01       	movw	r14, r24
   11626:	00 e0       	ldi	r16, 0x00	; 0
   11628:	10 e0       	ldi	r17, 0x00	; 0
   1162a:	28 c0       	rjmp	.+80     	; 0x1167c <gpib_read_str+0x78>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   1162c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11630:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11634:	81 72       	andi	r24, 0x21	; 33
   11636:	91 70       	andi	r25, 0x01	; 1
   11638:	89 2b       	or	r24, r25
   1163a:	09 f4       	brne	.+2      	; 0x1163e <gpib_read_str+0x3a>
   1163c:	7c c0       	rjmp	.+248    	; 0x11736 <gpib_read_str+0x132>
            printf("gpib_read_str: size = 0\n");
   1163e:	89 ee       	ldi	r24, 0xE9	; 233
   11640:	9f e0       	ldi	r25, 0x0F	; 15
   11642:	a0 e0       	ldi	r26, 0x00	; 0
   11644:	ed b7       	in	r30, 0x3d	; 61
   11646:	fe b7       	in	r31, 0x3e	; 62
   11648:	81 83       	std	Z+1, r24	; 0x01
   1164a:	92 83       	std	Z+2, r25	; 0x02
   1164c:	a3 83       	std	Z+3, r26	; 0x03
   1164e:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   11652:	71 c0       	rjmp	.+226    	; 0x11736 <gpib_read_str+0x132>
        {
            *status |= (val & ERROR_MASK);
            break;
        }

        if((*status & ATN_FLAG) != (val & ATN_FLAG))
   11654:	8c 27       	eor	r24, r28
   11656:	9d 27       	eor	r25, r29
   11658:	92 fd       	sbrc	r25, 2
   1165a:	2e c0       	rjmp	.+92     	; 0x116b8 <gpib_read_str+0xb4>
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
            gpib_unread(val);
            break;
        }

        if(val & ATN_FLAG)
   1165c:	ce 01       	movw	r24, r28
   1165e:	88 27       	eor	r24, r24
   11660:	94 70       	andi	r25, 0x04	; 4
            buf[ind] = (val & CMD_MASK);
   11662:	2c 2f       	mov	r18, r28
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
            gpib_unread(val);
            break;
        }

        if(val & ATN_FLAG)
   11664:	d2 fd       	sbrc	r29, 2
            buf[ind] = (val & CMD_MASK);
   11666:	2f 77       	andi	r18, 0x7F	; 127
        else
            buf[ind] = (val & DATA_MASK);
   11668:	f7 01       	movw	r30, r14
   1166a:	20 83       	st	Z, r18
        ++ind;
   1166c:	0f 5f       	subi	r16, 0xFF	; 255
   1166e:	1f 4f       	sbci	r17, 0xFF	; 255

        if(!(val & ATN_FLAG) && (val & EOI_FLAG) )
   11670:	89 2b       	or	r24, r25
   11672:	09 f4       	brne	.+2      	; 0x11676 <gpib_read_str+0x72>
   11674:	3c c0       	rjmp	.+120    	; 0x116ee <gpib_read_str+0xea>
   11676:	ff ef       	ldi	r31, 0xFF	; 255
   11678:	ef 1a       	sub	r14, r31
   1167a:	ff 0a       	sbc	r15, r31
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
            printf("gpib_read_str: size = 0\n");
    }

    while(ind < size)
   1167c:	0a 15       	cp	r16, r10
   1167e:	1b 05       	cpc	r17, r11
   11680:	0c f0       	brlt	.+2      	; 0x11684 <gpib_read_str+0x80>
   11682:	3f c0       	rjmp	.+126    	; 0x11702 <gpib_read_str+0xfe>
    {
        val = gpib_read_byte(NO_TRACE);
   11684:	80 e0       	ldi	r24, 0x00	; 0
   11686:	90 e0       	ldi	r25, 0x00	; 0
   11688:	b3 de       	rcall	.-666    	; 0x113f0 <gpib_read_byte>
   1168a:	ec 01       	movw	r28, r24
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_BUS_DECODE)
   1168c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11690:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11694:	90 ff       	sbrs	r25, 0
   11696:	02 c0       	rjmp	.+4      	; 0x1169c <gpib_read_str+0x98>
            gpib_decode(val);
   11698:	ce 01       	movw	r24, r28
   1169a:	b0 df       	rcall	.-160    	; 0x115fc <gpib_decode>
#endif
        if(val & ERROR_MASK)
   1169c:	9e 01       	movw	r18, r28
   1169e:	22 27       	eor	r18, r18
   116a0:	30 7d       	andi	r19, 0xD0	; 208
   116a2:	f6 01       	movw	r30, r12
   116a4:	80 81       	ld	r24, Z
   116a6:	91 81       	ldd	r25, Z+1	; 0x01
   116a8:	21 15       	cp	r18, r1
   116aa:	31 05       	cpc	r19, r1
   116ac:	99 f2       	breq	.-90     	; 0x11654 <gpib_read_str+0x50>
        {
            *status |= (val & ERROR_MASK);
   116ae:	82 2b       	or	r24, r18
   116b0:	93 2b       	or	r25, r19
   116b2:	91 83       	std	Z+1, r25	; 0x01
   116b4:	80 83       	st	Z, r24
            break;
   116b6:	28 c0       	rjmp	.+80     	; 0x11708 <gpib_read_str+0x104>
        }

        if((*status & ATN_FLAG) != (val & ATN_FLAG))
        {
            if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   116b8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   116bc:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   116c0:	81 72       	andi	r24, 0x21	; 33
   116c2:	91 70       	andi	r25, 0x01	; 1
   116c4:	89 2b       	or	r24, r25
   116c6:	81 f0       	breq	.+32     	; 0x116e8 <gpib_read_str+0xe4>
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
   116c8:	ce 01       	movw	r24, r28
   116ca:	99 27       	eor	r25, r25
   116cc:	ed b7       	in	r30, 0x3d	; 61
   116ce:	fe b7       	in	r31, 0x3e	; 62
   116d0:	97 83       	std	Z+7, r25	; 0x07
   116d2:	86 83       	std	Z+6, r24	; 0x06
   116d4:	15 83       	std	Z+5, r17	; 0x05
   116d6:	04 83       	std	Z+4, r16	; 0x04
   116d8:	8c eb       	ldi	r24, 0xBC	; 188
   116da:	9f e0       	ldi	r25, 0x0F	; 15
   116dc:	a0 e0       	ldi	r26, 0x00	; 0
   116de:	81 83       	std	Z+1, r24	; 0x01
   116e0:	92 83       	std	Z+2, r25	; 0x02
   116e2:	a3 83       	std	Z+3, r26	; 0x03
   116e4:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
            gpib_unread(val);
   116e8:	ce 01       	movw	r24, r28
   116ea:	6a db       	rcall	.-2348   	; 0x10dc0 <gpib_unread>
            break;
   116ec:	0d c0       	rjmp	.+26     	; 0x11708 <gpib_read_str+0x104>
            buf[ind] = (val & CMD_MASK);
        else
            buf[ind] = (val & DATA_MASK);
        ++ind;

        if(!(val & ATN_FLAG) && (val & EOI_FLAG) )
   116ee:	d0 ff       	sbrs	r29, 0
   116f0:	c2 cf       	rjmp	.-124    	; 0x11676 <gpib_read_str+0x72>
        {

            if(*status & EOI_FLAG)
   116f2:	f6 01       	movw	r30, r12
   116f4:	80 81       	ld	r24, Z
   116f6:	91 81       	ldd	r25, Z+1	; 0x01
   116f8:	90 fd       	sbrc	r25, 0
   116fa:	1f c0       	rjmp	.+62     	; 0x1173a <gpib_read_str+0x136>
                return(ind);
/// @todo TODO
///  decode this state - for now I just set the EOI_FLAG
            *status |= EOI_FLAG;
   116fc:	91 60       	ori	r25, 0x01	; 1
   116fe:	91 83       	std	Z+1, r25	; 0x01
   11700:	80 83       	st	Z, r24
            break;
        }
    }
    if ( ind != size ) 
   11702:	0a 15       	cp	r16, r10
   11704:	1b 05       	cpc	r17, r11
   11706:	c9 f0       	breq	.+50     	; 0x1173a <gpib_read_str+0x136>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   11708:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1170c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11710:	81 72       	andi	r24, 0x21	; 33
   11712:	99 27       	eor	r25, r25
   11714:	89 2b       	or	r24, r25
   11716:	89 f0       	breq	.+34     	; 0x1173a <gpib_read_str+0x136>
            printf("[gpib_read_str read(%d) expected(%d)]\n", ind , size);
   11718:	ed b7       	in	r30, 0x3d	; 61
   1171a:	fe b7       	in	r31, 0x3e	; 62
   1171c:	b7 82       	std	Z+7, r11	; 0x07
   1171e:	a6 82       	std	Z+6, r10	; 0x06
   11720:	15 83       	std	Z+5, r17	; 0x05
   11722:	04 83       	std	Z+4, r16	; 0x04
   11724:	85 e9       	ldi	r24, 0x95	; 149
   11726:	9f e0       	ldi	r25, 0x0F	; 15
   11728:	a0 e0       	ldi	r26, 0x00	; 0
   1172a:	81 83       	std	Z+1, r24	; 0x01
   1172c:	92 83       	std	Z+2, r25	; 0x02
   1172e:	a3 83       	std	Z+3, r26	; 0x03
   11730:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   11734:	02 c0       	rjmp	.+4      	; 0x1173a <gpib_read_str+0x136>
   11736:	00 e0       	ldi	r16, 0x00	; 0
   11738:	10 e0       	ldi	r17, 0x00	; 0
    }
    return(ind);
}
   1173a:	c8 01       	movw	r24, r16
   1173c:	cd b7       	in	r28, 0x3d	; 61
   1173e:	de b7       	in	r29, 0x3e	; 62
   11740:	27 96       	adiw	r28, 0x07	; 7
   11742:	ea e0       	ldi	r30, 0x0A	; 10
   11744:	0c 94 23 e7 	jmp	0x1ce46	; 0x1ce46 <__epilogue_restores__+0x10>

00011748 <gpib_write_str>:
///     - Error Flags:
///       - IFC_FLAG
/// @see: gpib_write_byte()
/// @see: gpib.h _FLAGS defines for a full list)
int gpib_write_str(uint8_t *buf, int size, uint16_t *status)
{
   11748:	a7 e0       	ldi	r26, 0x07	; 7
   1174a:	b0 e0       	ldi	r27, 0x00	; 0
   1174c:	ea ea       	ldi	r30, 0xAA	; 170
   1174e:	fb e8       	ldi	r31, 0x8B	; 139
   11750:	0c 94 07 e7 	jmp	0x1ce0e	; 0x1ce0e <__prologue_saves__+0x10>
   11754:	d8 2f       	mov	r29, r24
   11756:	c9 2f       	mov	r28, r25
   11758:	7b 01       	movw	r14, r22
   1175a:	8a 01       	movw	r16, r20
    uint16_t val, ch;
    int ind = 0;

    *status &= STATUS_MASK;
   1175c:	fa 01       	movw	r30, r20
   1175e:	80 81       	ld	r24, Z
   11760:	91 81       	ldd	r25, Z+1	; 0x01
   11762:	88 27       	eor	r24, r24
   11764:	91 83       	std	Z+1, r25	; 0x01
   11766:	80 83       	st	Z, r24

    if(!size)
   11768:	67 2b       	or	r22, r23
   1176a:	91 f4       	brne	.+36     	; 0x11790 <gpib_write_str+0x48>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   1176c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11770:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11774:	81 72       	andi	r24, 0x21	; 33
   11776:	91 70       	andi	r25, 0x01	; 1
   11778:	89 2b       	or	r24, r25
   1177a:	51 f0       	breq	.+20     	; 0x11790 <gpib_write_str+0x48>
            printf("gpib_write_str: size = 0\n");
   1177c:	8b e7       	ldi	r24, 0x7B	; 123
   1177e:	9f e0       	ldi	r25, 0x0F	; 15
   11780:	a0 e0       	ldi	r26, 0x00	; 0
   11782:	ed b7       	in	r30, 0x3d	; 61
   11784:	fe b7       	in	r31, 0x3e	; 62
   11786:	81 83       	std	Z+1, r24	; 0x01
   11788:	92 83       	std	Z+2, r25	; 0x02
   1178a:	a3 83       	std	Z+3, r26	; 0x03
   1178c:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    }

	// Start with NRFD and NDAC = 1 - ie off the OC BUS
	gpib_rx_init(0);
   11790:	80 e0       	ldi	r24, 0x00	; 0
   11792:	4d da       	rcall	.-2918   	; 0x10c2e <gpib_rx_init>

// Wait until ATN is released!
#if 1
    if (GPIB_PIN_TST(ATN) == 0)
   11794:	4e 9b       	sbis	0x09, 6	; 9
   11796:	06 c0       	rjmp	.+12     	; 0x117a4 <gpib_write_str+0x5c>
#endif

// Wait until DAV is released!
#if 1
	// Wait if DAV = 0 as the bus is busy
    gpib_timeout_set(HTIMEOUT);
   11798:	64 ef       	ldi	r22, 0xF4	; 244
   1179a:	71 e0       	ldi	r23, 0x01	; 1
   1179c:	80 e0       	ldi	r24, 0x00	; 0
   1179e:	90 e0       	ldi	r25, 0x00	; 0
   117a0:	04 da       	rcall	.-3064   	; 0x10baa <gpib_timeout_set>
	while ( GPIB_PIN_TST(DAV) == 0)
   117a2:	18 c0       	rjmp	.+48     	; 0x117d4 <gpib_write_str+0x8c>
#endif
		// Wait for ATN free
		// Keep in mind that we have been addressed to talk already
		// So waiting is ok - they won't be expecting a reply until
		// They are ready
		gpib_timeout_set(HTIMEOUT);
   117a4:	64 ef       	ldi	r22, 0xF4	; 244
   117a6:	71 e0       	ldi	r23, 0x01	; 1
   117a8:	80 e0       	ldi	r24, 0x00	; 0
   117aa:	90 e0       	ldi	r25, 0x00	; 0
   117ac:	fe d9       	rcall	.-3076   	; 0x10baa <gpib_timeout_set>
		while(GPIB_PIN_TST(ATN) == 0)
   117ae:	4e 99       	sbic	0x09, 6	; 9
   117b0:	f3 cf       	rjmp	.-26     	; 0x11798 <gpib_write_str+0x50>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   117b2:	80 91 ef 1c 	lds	r24, 0x1CEF	; 0x801cef <gpib_timer+0x8>
		// So waiting is ok - they won't be expecting a reply until
		// They are ready
		gpib_timeout_set(HTIMEOUT);
		while(GPIB_PIN_TST(ATN) == 0)
		{
			if(gpib_timeout_test())
   117b6:	88 23       	and	r24, r24
			{
				gpib_rx_init(1);
   117b8:	d1 f3       	breq	.-12     	; 0x117ae <gpib_write_str+0x66>
   117ba:	81 e0       	ldi	r24, 0x01	; 1
   117bc:	38 da       	rcall	.-2960   	; 0x10c2e <gpib_rx_init>
				if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   117be:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   117c2:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   117c6:	85 70       	andi	r24, 0x05	; 5
   117c8:	99 27       	eor	r25, r25
   117ca:	89 2b       	or	r24, r25
   117cc:	d9 f0       	breq	.+54     	; 0x11804 <gpib_write_str+0xbc>
					printf("<gpib_write_str timeout waiting for ATN = 1>\n");
   117ce:	8d e4       	ldi	r24, 0x4D	; 77
   117d0:	9f e0       	ldi	r25, 0x0F	; 15
   117d2:	10 c0       	rjmp	.+32     	; 0x117f4 <gpib_write_str+0xac>

// Wait until DAV is released!
#if 1
	// Wait if DAV = 0 as the bus is busy
    gpib_timeout_set(HTIMEOUT);
	while ( GPIB_PIN_TST(DAV) == 0)
   117d4:	19 99       	sbic	0x03, 1	; 3
   117d6:	1f c0       	rjmp	.+62     	; 0x11816 <gpib_write_str+0xce>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   117d8:	80 91 ef 1c 	lds	r24, 0x1CEF	; 0x801cef <gpib_timer+0x8>
#if 1
	// Wait if DAV = 0 as the bus is busy
    gpib_timeout_set(HTIMEOUT);
	while ( GPIB_PIN_TST(DAV) == 0)
	{
		if(gpib_timeout_test())
   117dc:	88 23       	and	r24, r24
   117de:	d1 f3       	breq	.-12     	; 0x117d4 <gpib_write_str+0x8c>
		{
			if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   117e0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   117e4:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   117e8:	85 70       	andi	r24, 0x05	; 5
   117ea:	99 27       	eor	r25, r25
   117ec:	89 2b       	or	r24, r25
   117ee:	51 f0       	breq	.+20     	; 0x11804 <gpib_write_str+0xbc>
				printf("<BUS waiting for DAV==1>\n");
   117f0:	83 e3       	ldi	r24, 0x33	; 51
   117f2:	9f e0       	ldi	r25, 0x0F	; 15
   117f4:	a0 e0       	ldi	r26, 0x00	; 0
   117f6:	ed b7       	in	r30, 0x3d	; 61
   117f8:	fe b7       	in	r31, 0x3e	; 62
   117fa:	81 83       	std	Z+1, r24	; 0x01
   117fc:	92 83       	std	Z+2, r25	; 0x02
   117fe:	a3 83       	std	Z+3, r26	; 0x03
   11800:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
			*status |= (TIMEOUT_FLAG | BUS_ERROR_FLAG);
   11804:	f8 01       	movw	r30, r16
   11806:	80 81       	ld	r24, Z
   11808:	91 81       	ldd	r25, Z+1	; 0x01
   1180a:	90 6c       	ori	r25, 0xC0	; 192
   1180c:	91 83       	std	Z+1, r25	; 0x01
   1180e:	80 83       	st	Z, r24
			return(ind);
   11810:	c0 e0       	ldi	r28, 0x00	; 0
   11812:	d0 e0       	ldi	r29, 0x00	; 0
   11814:	45 c0       	rjmp	.+138    	; 0x118a0 <gpib_write_str+0x158>
   11816:	cd 2e       	mov	r12, r29
   11818:	dc 2e       	mov	r13, r28

// Wait until DAV is released!
#if 1
	// Wait if DAV = 0 as the bus is busy
    gpib_timeout_set(HTIMEOUT);
	while ( GPIB_PIN_TST(DAV) == 0)
   1181a:	c0 e0       	ldi	r28, 0x00	; 0
   1181c:	d0 e0       	ldi	r29, 0x00	; 0
			return(ind);
		}
	}
#endif

    while(ind < size)
   1181e:	ce 15       	cp	r28, r14
   11820:	df 05       	cpc	r29, r15
   11822:	1c f5       	brge	.+70     	; 0x1186a <gpib_write_str+0x122>
    {
        ch = buf[ind++] & 0xff;                   // unsigned
   11824:	21 96       	adiw	r28, 0x01	; 1
   11826:	f6 01       	movw	r30, r12
   11828:	81 91       	ld	r24, Z+
   1182a:	6f 01       	movw	r12, r30
   1182c:	90 e0       	ldi	r25, 0x00	; 0

        if( (*status & EOI_FLAG) && (ind == size ) )
   1182e:	f8 01       	movw	r30, r16
   11830:	20 81       	ld	r18, Z
   11832:	31 81       	ldd	r19, Z+1	; 0x01
   11834:	30 ff       	sbrs	r19, 0
   11836:	04 c0       	rjmp	.+8      	; 0x11840 <gpib_write_str+0xf8>
   11838:	ec 16       	cp	r14, r28
   1183a:	fd 06       	cpc	r15, r29
            ch |= EOI_FLAG;
   1183c:	09 f4       	brne	.+2      	; 0x11840 <gpib_write_str+0xf8>

/// @return Returns

        val = gpib_write_byte(ch);
   1183e:	91 60       	ori	r25, 0x01	; 1
   11840:	0b db       	rcall	.-2538   	; 0x10e58 <gpib_write_byte>
        *status |= (val & ERROR_MASK);
   11842:	5c 01       	movw	r10, r24
   11844:	aa 24       	eor	r10, r10
   11846:	f0 ed       	ldi	r31, 0xD0	; 208
   11848:	bf 22       	and	r11, r31
   1184a:	f8 01       	movw	r30, r16
   1184c:	20 81       	ld	r18, Z
   1184e:	31 81       	ldd	r19, Z+1	; 0x01
   11850:	2a 29       	or	r18, r10
   11852:	3b 29       	or	r19, r11
   11854:	31 83       	std	Z+1, r19	; 0x01
   11856:	20 83       	st	Z, r18

#if SDEBUG
        if(debuglevel & GPIB_RW_STR_BUS_DECODE)
   11858:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1185c:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
            gpib_decode(val);
   11860:	30 fd       	sbrc	r19, 0
#endif
        if(val & ERROR_MASK)
   11862:	cc de       	rcall	.-616    	; 0x115fc <gpib_decode>
   11864:	a1 14       	cp	r10, r1
   11866:	b1 04       	cpc	r11, r1

    }                                             // while(ind < size)

// End by setting receive mode and set NRFD and NDAC busy until
// we get back to the main loop (this happens very quickly
	gpib_rx_init(1);	// BUSY
   11868:	d1 f2       	breq	.-76     	; 0x1181e <gpib_write_str+0xd6>
   1186a:	81 e0       	ldi	r24, 0x01	; 1
   1186c:	e0 d9       	rcall	.-3136   	; 0x10c2e <gpib_rx_init>

    if ( ind != size )
   1186e:	ce 15       	cp	r28, r14
   11870:	df 05       	cpc	r29, r15
   11872:	b1 f0       	breq	.+44     	; 0x118a0 <gpib_write_str+0x158>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   11874:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11878:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1187c:	81 72       	andi	r24, 0x21	; 33
   1187e:	91 70       	andi	r25, 0x01	; 1
   11880:	89 2b       	or	r24, r25
   11882:	71 f0       	breq	.+28     	; 0x118a0 <gpib_write_str+0x158>
            printf("[gpib_write_str sent(%d) expected(%d)]\n", ind,size);
   11884:	ed b7       	in	r30, 0x3d	; 61
   11886:	fe b7       	in	r31, 0x3e	; 62
   11888:	f7 82       	std	Z+7, r15	; 0x07
   1188a:	e6 82       	std	Z+6, r14	; 0x06
   1188c:	d5 83       	std	Z+5, r29	; 0x05
   1188e:	c4 83       	std	Z+4, r28	; 0x04
   11890:	8b e0       	ldi	r24, 0x0B	; 11
   11892:	9f e0       	ldi	r25, 0x0F	; 15
   11894:	a0 e0       	ldi	r26, 0x00	; 0
   11896:	81 83       	std	Z+1, r24	; 0x01
   11898:	92 83       	std	Z+2, r25	; 0x02
   1189a:	a3 83       	std	Z+3, r26	; 0x03
   1189c:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    }
    return(ind);
}
   118a0:	ce 01       	movw	r24, r28
   118a2:	cd b7       	in	r28, 0x3d	; 61
   118a4:	de b7       	in	r29, 0x3e	; 62
   118a6:	27 96       	adiw	r28, 0x07	; 7
   118a8:	ea e0       	ldi	r30, 0x0A	; 10
   118aa:	0c 94 23 e7 	jmp	0x1ce46	; 0x1ce46 <__epilogue_restores__+0x10>

000118ae <gpib_file_init>:
{
    int index = find_device(PRINTER_TYPE, address, BASE_MSA);
    if(index == -1)
        return(0);
    return(set_active_device(index));
}
   118ae:	ad b7       	in	r26, 0x3d	; 61
   118b0:	be b7       	in	r27, 0x3e	; 62
   118b2:	17 97       	sbiw	r26, 0x07	; 7
   118b4:	0f b6       	in	r0, 0x3f	; 63
   118b6:	f8 94       	cli
   118b8:	be bf       	out	0x3e, r27	; 62
   118ba:	0f be       	out	0x3f, r0	; 63
   118bc:	ad bf       	out	0x3d, r26	; 61
   118be:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <debuglevel+0x1>
   118c2:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <debuglevel>
   118c6:	88 eb       	ldi	r24, 0xB8	; 184
   118c8:	91 e0       	ldi	r25, 0x01	; 1
   118ca:	0e 94 f9 9d 	call	0x13bf2	; 0x13bf2 <Read_Config>
   118ce:	18 16       	cp	r1, r24
   118d0:	19 06       	cpc	r1, r25
   118d2:	8c f4       	brge	.+34     	; 0x118f6 <gpib_file_init+0x48>
   118d4:	ed b7       	in	r30, 0x3d	; 61
   118d6:	fe b7       	in	r31, 0x3e	; 62
   118d8:	97 83       	std	Z+7, r25	; 0x07
   118da:	86 83       	std	Z+6, r24	; 0x06
   118dc:	88 eb       	ldi	r24, 0xB8	; 184
   118de:	91 e0       	ldi	r25, 0x01	; 1
   118e0:	95 83       	std	Z+5, r25	; 0x05
   118e2:	84 83       	std	Z+4, r24	; 0x04
   118e4:	8f ed       	ldi	r24, 0xDF	; 223
   118e6:	94 e1       	ldi	r25, 0x14	; 20
   118e8:	a0 e0       	ldi	r26, 0x00	; 0
   118ea:	81 83       	std	Z+1, r24	; 0x01
   118ec:	92 83       	std	Z+2, r25	; 0x02
   118ee:	a3 83       	std	Z+3, r26	; 0x03
   118f0:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   118f4:	10 c0       	rjmp	.+32     	; 0x11916 <gpib_file_init+0x68>
   118f6:	89 2b       	or	r24, r25
   118f8:	71 f0       	breq	.+28     	; 0x11916 <gpib_file_init+0x68>
   118fa:	88 eb       	ldi	r24, 0xB8	; 184
   118fc:	91 e0       	ldi	r25, 0x01	; 1
   118fe:	ed b7       	in	r30, 0x3d	; 61
   11900:	fe b7       	in	r31, 0x3e	; 62
   11902:	95 83       	std	Z+5, r25	; 0x05
   11904:	84 83       	std	Z+4, r24	; 0x04
   11906:	8e ec       	ldi	r24, 0xCE	; 206
   11908:	94 e1       	ldi	r25, 0x14	; 20
   1190a:	a0 e0       	ldi	r26, 0x00	; 0
   1190c:	81 83       	std	Z+1, r24	; 0x01
   1190e:	92 83       	std	Z+2, r25	; 0x02
   11910:	a3 83       	std	Z+3, r26	; 0x03
   11912:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   11916:	0e 94 01 9a 	call	0x13402	; 0x13402 <set_Config_Defaults>
   1191a:	0e 94 20 70 	call	0xe040	; 0xe040 <mmc_wp_status>
   1191e:	89 2b       	or	r24, r25
   11920:	51 f0       	breq	.+20     	; 0x11936 <gpib_file_init+0x88>
   11922:	85 eb       	ldi	r24, 0xB5	; 181
   11924:	94 e1       	ldi	r25, 0x14	; 20
   11926:	a0 e0       	ldi	r26, 0x00	; 0
   11928:	ed b7       	in	r30, 0x3d	; 61
   1192a:	fe b7       	in	r31, 0x3e	; 62
   1192c:	81 83       	std	Z+1, r24	; 0x01
   1192e:	92 83       	std	Z+2, r25	; 0x02
   11930:	a3 83       	std	Z+3, r26	; 0x03
   11932:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   11936:	ad b7       	in	r26, 0x3d	; 61
   11938:	be b7       	in	r27, 0x3e	; 62
   1193a:	17 96       	adiw	r26, 0x07	; 7
   1193c:	0f b6       	in	r0, 0x3f	; 63
   1193e:	f8 94       	cli
   11940:	be bf       	out	0x3e, r27	; 62
   11942:	0f be       	out	0x3f, r0	; 63
   11944:	ad bf       	out	0x3d, r26	; 61
   11946:	08 95       	ret

00011948 <SS80_is_MLA>:
   11948:	40 e2       	ldi	r20, 0x20	; 32
   1194a:	50 e0       	ldi	r21, 0x00	; 0
   1194c:	bc 01       	movw	r22, r24
   1194e:	83 e0       	ldi	r24, 0x03	; 3
   11950:	90 e0       	ldi	r25, 0x00	; 0
   11952:	0e 94 39 97 	call	0x12e72	; 0x12e72 <find_device>
   11956:	8f 3f       	cpi	r24, 0xFF	; 255
   11958:	31 f0       	breq	.+12     	; 0x11966 <SS80_is_MLA+0x1e>
   1195a:	0e 94 62 97 	call	0x12ec4	; 0x12ec4 <set_active_device>
   1195e:	08 2e       	mov	r0, r24
   11960:	00 0c       	add	r0, r0
   11962:	99 0b       	sbc	r25, r25
   11964:	08 95       	ret
   11966:	80 e0       	ldi	r24, 0x00	; 0
   11968:	90 e0       	ldi	r25, 0x00	; 0
   1196a:	08 95       	ret

0001196c <SS80_is_MTA>:
   1196c:	40 e4       	ldi	r20, 0x40	; 64
   1196e:	50 e0       	ldi	r21, 0x00	; 0
   11970:	bc 01       	movw	r22, r24
   11972:	83 e0       	ldi	r24, 0x03	; 3
   11974:	90 e0       	ldi	r25, 0x00	; 0
   11976:	0e 94 39 97 	call	0x12e72	; 0x12e72 <find_device>
   1197a:	8f 3f       	cpi	r24, 0xFF	; 255
   1197c:	31 f0       	breq	.+12     	; 0x1198a <SS80_is_MTA+0x1e>
   1197e:	0e 94 62 97 	call	0x12ec4	; 0x12ec4 <set_active_device>
   11982:	08 2e       	mov	r0, r24
   11984:	00 0c       	add	r0, r0
   11986:	99 0b       	sbc	r25, r25
   11988:	08 95       	ret
   1198a:	80 e0       	ldi	r24, 0x00	; 0
   1198c:	90 e0       	ldi	r25, 0x00	; 0
   1198e:	08 95       	ret

00011990 <SS80_is_MSA>:
   11990:	40 e6       	ldi	r20, 0x60	; 96
   11992:	50 e0       	ldi	r21, 0x00	; 0
   11994:	bc 01       	movw	r22, r24
   11996:	83 e0       	ldi	r24, 0x03	; 3
   11998:	90 e0       	ldi	r25, 0x00	; 0
   1199a:	0e 94 39 97 	call	0x12e72	; 0x12e72 <find_device>
   1199e:	8f 3f       	cpi	r24, 0xFF	; 255
   119a0:	31 f0       	breq	.+12     	; 0x119ae <SS80_is_MSA+0x1e>
   119a2:	0e 94 62 97 	call	0x12ec4	; 0x12ec4 <set_active_device>
   119a6:	08 2e       	mov	r0, r24
   119a8:	00 0c       	add	r0, r0
   119aa:	99 0b       	sbc	r25, r25
   119ac:	08 95       	ret
   119ae:	80 e0       	ldi	r24, 0x00	; 0
   119b0:	90 e0       	ldi	r25, 0x00	; 0
   119b2:	08 95       	ret

000119b4 <AMIGO_is_MLA>:
   119b4:	40 e2       	ldi	r20, 0x20	; 32
   119b6:	50 e0       	ldi	r21, 0x00	; 0
   119b8:	bc 01       	movw	r22, r24
   119ba:	81 e0       	ldi	r24, 0x01	; 1
   119bc:	90 e0       	ldi	r25, 0x00	; 0
   119be:	0e 94 39 97 	call	0x12e72	; 0x12e72 <find_device>
   119c2:	8f 3f       	cpi	r24, 0xFF	; 255
   119c4:	31 f0       	breq	.+12     	; 0x119d2 <AMIGO_is_MLA+0x1e>
   119c6:	0e 94 62 97 	call	0x12ec4	; 0x12ec4 <set_active_device>
   119ca:	08 2e       	mov	r0, r24
   119cc:	00 0c       	add	r0, r0
   119ce:	99 0b       	sbc	r25, r25
   119d0:	08 95       	ret
   119d2:	80 e0       	ldi	r24, 0x00	; 0
   119d4:	90 e0       	ldi	r25, 0x00	; 0
   119d6:	08 95       	ret

000119d8 <AMIGO_is_MTA>:
   119d8:	40 e4       	ldi	r20, 0x40	; 64
   119da:	50 e0       	ldi	r21, 0x00	; 0
   119dc:	bc 01       	movw	r22, r24
   119de:	81 e0       	ldi	r24, 0x01	; 1
   119e0:	90 e0       	ldi	r25, 0x00	; 0
   119e2:	0e 94 39 97 	call	0x12e72	; 0x12e72 <find_device>
   119e6:	8f 3f       	cpi	r24, 0xFF	; 255
   119e8:	31 f0       	breq	.+12     	; 0x119f6 <AMIGO_is_MTA+0x1e>
   119ea:	0e 94 62 97 	call	0x12ec4	; 0x12ec4 <set_active_device>
   119ee:	08 2e       	mov	r0, r24
   119f0:	00 0c       	add	r0, r0
   119f2:	99 0b       	sbc	r25, r25
   119f4:	08 95       	ret
   119f6:	80 e0       	ldi	r24, 0x00	; 0
   119f8:	90 e0       	ldi	r25, 0x00	; 0
   119fa:	08 95       	ret

000119fc <AMIGO_is_MSA>:
   119fc:	40 e6       	ldi	r20, 0x60	; 96
   119fe:	50 e0       	ldi	r21, 0x00	; 0
   11a00:	bc 01       	movw	r22, r24
   11a02:	81 e0       	ldi	r24, 0x01	; 1
   11a04:	90 e0       	ldi	r25, 0x00	; 0
   11a06:	0e 94 39 97 	call	0x12e72	; 0x12e72 <find_device>
   11a0a:	8f 3f       	cpi	r24, 0xFF	; 255
   11a0c:	31 f0       	breq	.+12     	; 0x11a1a <AMIGO_is_MSA+0x1e>
   11a0e:	0e 94 62 97 	call	0x12ec4	; 0x12ec4 <set_active_device>
   11a12:	08 2e       	mov	r0, r24
   11a14:	00 0c       	add	r0, r0
   11a16:	99 0b       	sbc	r25, r25
   11a18:	08 95       	ret
   11a1a:	80 e0       	ldi	r24, 0x00	; 0
   11a1c:	90 e0       	ldi	r25, 0x00	; 0
   11a1e:	08 95       	ret

00011a20 <PRINTER_is_MLA>:
   11a20:	40 e2       	ldi	r20, 0x20	; 32
   11a22:	50 e0       	ldi	r21, 0x00	; 0
   11a24:	bc 01       	movw	r22, r24
   11a26:	84 e0       	ldi	r24, 0x04	; 4
   11a28:	90 e0       	ldi	r25, 0x00	; 0
   11a2a:	0e 94 39 97 	call	0x12e72	; 0x12e72 <find_device>
   11a2e:	8f 3f       	cpi	r24, 0xFF	; 255
   11a30:	31 f0       	breq	.+12     	; 0x11a3e <PRINTER_is_MLA+0x1e>
   11a32:	0e 94 62 97 	call	0x12ec4	; 0x12ec4 <set_active_device>
   11a36:	08 2e       	mov	r0, r24
   11a38:	00 0c       	add	r0, r0
   11a3a:	99 0b       	sbc	r25, r25
   11a3c:	08 95       	ret
   11a3e:	80 e0       	ldi	r24, 0x00	; 0
   11a40:	90 e0       	ldi	r25, 0x00	; 0
   11a42:	08 95       	ret

00011a44 <PRINTER_is_MTA>:
   11a44:	40 e4       	ldi	r20, 0x40	; 64
   11a46:	50 e0       	ldi	r21, 0x00	; 0
   11a48:	bc 01       	movw	r22, r24
   11a4a:	84 e0       	ldi	r24, 0x04	; 4
   11a4c:	90 e0       	ldi	r25, 0x00	; 0
   11a4e:	0e 94 39 97 	call	0x12e72	; 0x12e72 <find_device>
   11a52:	8f 3f       	cpi	r24, 0xFF	; 255
   11a54:	31 f0       	breq	.+12     	; 0x11a62 <PRINTER_is_MTA+0x1e>
   11a56:	0e 94 62 97 	call	0x12ec4	; 0x12ec4 <set_active_device>
   11a5a:	08 2e       	mov	r0, r24
   11a5c:	00 0c       	add	r0, r0
   11a5e:	99 0b       	sbc	r25, r25
   11a60:	08 95       	ret
   11a62:	80 e0       	ldi	r24, 0x00	; 0
   11a64:	90 e0       	ldi	r25, 0x00	; 0
   11a66:	08 95       	ret

00011a68 <gpib_init_devices>:
///
/// - Used at power up, Bus IFC or user aborts
/// @return  void
void gpib_init_devices(void)
{
    gpib_bus_init();                              // Not busy - we have to free all pins on the BUS
   11a68:	aa d8       	rcall	.-3756   	; 0x10bbe <gpib_bus_init>

// Init PPR talking and listening states
// Enable this 14 April 2020 - testing MIke Gore
    gpib_state_init();
   11a6a:	11 d9       	rcall	.-3550   	; 0x10c8e <gpib_state_init>
   11a6c:	0e 94 f4 ad 	call	0x15be8	; 0x15be8 <SS80_init>

    SS80_init();                                  // SS80 state init
   11a70:	0e 94 89 b3 	call	0x16712	; 0x16712 <amigo_init>

#ifdef AMIGO
    amigo_init();                                 // AMIGO state init
   11a74:	0c 94 b4 be 	jmp	0x17d68	; 0x17d68 <printer_close>
#endif

    printer_close();                              // Close any open fprinter files
   11a78:	08 95       	ret

00011a7a <gpib_trace_task>:
   11a7a:	0f 93       	push	r16
/// @param name: File name to save log file to.
/// @return  void
///   Exit on Key Press

void gpib_trace_task( char *name , int detail)
{
   11a7c:	1f 93       	push	r17
   11a7e:	cf 93       	push	r28
   11a80:	df 93       	push	r29
   11a82:	00 d0       	rcall	.+0      	; 0x11a84 <gpib_trace_task+0xa>
   11a84:	00 d0       	rcall	.+0      	; 0x11a86 <gpib_trace_task+0xc>
   11a86:	1f 92       	push	r1
   11a88:	eb 01       	movw	r28, r22
    int ch;

    if(name && *name)
   11a8a:	00 97       	sbiw	r24, 0x00	; 0
   11a8c:	09 f4       	brne	.+2      	; 0x11a90 <gpib_trace_task+0x16>
   11a8e:	44 c0       	rjmp	.+136    	; 0x11b18 <gpib_trace_task+0x9e>
   11a90:	fc 01       	movw	r30, r24
   11a92:	20 81       	ld	r18, Z
   11a94:	22 23       	and	r18, r18
   11a96:	09 f4       	brne	.+2      	; 0x11a9a <gpib_trace_task+0x20>
   11a98:	3f c0       	rjmp	.+126    	; 0x11b18 <gpib_trace_task+0x9e>
    {
        name = skipspaces(name);
   11a9a:	0e 94 5f 32 	call	0x64be	; 0x64be <skipspaces>
   11a9e:	8c 01       	movw	r16, r24
        printf("Capturing GPIB BUS to:%s\n", name);
   11aa0:	ed b7       	in	r30, 0x3d	; 61
   11aa2:	fe b7       	in	r31, 0x3e	; 62
   11aa4:	95 83       	std	Z+5, r25	; 0x05
   11aa6:	84 83       	std	Z+4, r24	; 0x04
   11aa8:	8b e9       	ldi	r24, 0x9B	; 155
   11aaa:	94 e1       	ldi	r25, 0x14	; 20
   11aac:	a0 e0       	ldi	r26, 0x00	; 0
   11aae:	81 83       	std	Z+1, r24	; 0x01
   11ab0:	92 83       	std	Z+2, r25	; 0x02
   11ab2:	a3 83       	std	Z+3, r26	; 0x03
   11ab4:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
        if(detail)
   11ab8:	20 97       	sbiw	r28, 0x00	; 0
   11aba:	51 f0       	breq	.+20     	; 0x11ad0 <gpib_trace_task+0x56>
            printf("FULL GPIB BUS handshake logging requested\n");
   11abc:	80 e7       	ldi	r24, 0x70	; 112
   11abe:	94 e1       	ldi	r25, 0x14	; 20
   11ac0:	a0 e0       	ldi	r26, 0x00	; 0
   11ac2:	ed b7       	in	r30, 0x3d	; 61
   11ac4:	fe b7       	in	r31, 0x3e	; 62
   11ac6:	81 83       	std	Z+1, r24	; 0x01
   11ac8:	92 83       	std	Z+2, r25	; 0x02
   11aca:	a3 83       	std	Z+3, r26	; 0x03
   11acc:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
        printf("Press ANY key to exit\n");
   11ad0:	89 e5       	ldi	r24, 0x59	; 89
   11ad2:	94 e1       	ldi	r25, 0x14	; 20
   11ad4:	a0 e0       	ldi	r26, 0x00	; 0
   11ad6:	ed b7       	in	r30, 0x3d	; 61
   11ad8:	fe b7       	in	r31, 0x3e	; 62
   11ada:	81 83       	std	Z+1, r24	; 0x01
   11adc:	92 83       	std	Z+2, r25	; 0x02
   11ade:	a3 83       	std	Z+3, r26	; 0x03
   11ae0:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>

        gpib_log_fp = fopen(name,"wb");
   11ae4:	6c e0       	ldi	r22, 0x0C	; 12
   11ae6:	79 e0       	ldi	r23, 0x09	; 9
   11ae8:	c8 01       	movw	r24, r16
   11aea:	0e 94 72 7e 	call	0xfce4	; 0xfce4 <fopen>
   11aee:	90 93 69 19 	sts	0x1969, r25	; 0x801969 <gpib_log_fp+0x1>
   11af2:	80 93 68 19 	sts	0x1968, r24	; 0x801968 <gpib_log_fp>
        if(gpib_log_fp == NULL)
   11af6:	89 2b       	or	r24, r25
   11af8:	b9 f4       	brne	.+46     	; 0x11b28 <gpib_trace_task+0xae>
        {
            perror("open failed");
   11afa:	8a e9       	ldi	r24, 0x9A	; 154
   11afc:	9d e0       	ldi	r25, 0x0D	; 13
   11afe:	0e 94 a3 78 	call	0xf146	; 0xf146 <perror>
            printf("exiting...\n");
   11b02:	8d e4       	ldi	r24, 0x4D	; 77
   11b04:	94 e1       	ldi	r25, 0x14	; 20
   11b06:	a0 e0       	ldi	r26, 0x00	; 0
   11b08:	ed b7       	in	r30, 0x3d	; 61
   11b0a:	fe b7       	in	r31, 0x3e	; 62
   11b0c:	81 83       	std	Z+1, r24	; 0x01
   11b0e:	92 83       	std	Z+2, r25	; 0x02
   11b10:	a3 83       	std	Z+3, r26	; 0x03
   11b12:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
            return;
   11b16:	3d c0       	rjmp	.+122    	; 0x11b92 <gpib_trace_task+0x118>
        }
    }
    else
    {
        gpib_log_fp = stdout;
   11b18:	80 91 c9 1c 	lds	r24, 0x1CC9	; 0x801cc9 <__iob+0x2>
   11b1c:	90 91 ca 1c 	lds	r25, 0x1CCA	; 0x801cca <__iob+0x3>
   11b20:	90 93 69 19 	sts	0x1969, r25	; 0x801969 <gpib_log_fp+0x1>
   11b24:	80 93 68 19 	sts	0x1968, r24	; 0x801968 <gpib_log_fp>
    }

    // gpib_state_init();                            // Init PPR talking and listening states
	// gpib_state_init is in gpib_init_devices()
    gpib_init_devices();
   11b28:	9f df       	rcall	.-194    	; 0x11a68 <gpib_init_devices>

    gpib_decode_header(gpib_log_fp);
   11b2a:	80 91 68 19 	lds	r24, 0x1968	; 0x801968 <gpib_log_fp>
   11b2e:	90 91 69 19 	lds	r25, 0x1969	; 0x801969 <gpib_log_fp+0x1>
   11b32:	ca da       	rcall	.-2668   	; 0x110c8 <gpib_decode_header>
    while(1)                                      // Main loop, forever
    {
        if(uart_keyhit(0))
   11b34:	80 e0       	ldi	r24, 0x00	; 0
   11b36:	0e 94 95 2a 	call	0x552a	; 0x552a <uart_keyhit>
   11b3a:	89 2b       	or	r24, r25
            break;

        ch = gpib_read_byte(detail);
   11b3c:	31 f4       	brne	.+12     	; 0x11b4a <gpib_trace_task+0xd0>
   11b3e:	ce 01       	movw	r24, r28
        if(!detail)
   11b40:	57 dc       	rcall	.-1874   	; 0x113f0 <gpib_read_byte>
   11b42:	20 97       	sbiw	r28, 0x00	; 0
            gpib_decode(ch);
   11b44:	b9 f7       	brne	.-18     	; 0x11b34 <gpib_trace_task+0xba>
   11b46:	5a dd       	rcall	.-1356   	; 0x115fc <gpib_decode>
   11b48:	f5 cf       	rjmp	.-22     	; 0x11b34 <gpib_trace_task+0xba>
    }

    printf("Done\n");
   11b4a:	87 e4       	ldi	r24, 0x47	; 71
   11b4c:	94 e1       	ldi	r25, 0x14	; 20
   11b4e:	a0 e0       	ldi	r26, 0x00	; 0
   11b50:	ed b7       	in	r30, 0x3d	; 61
   11b52:	fe b7       	in	r31, 0x3e	; 62
   11b54:	81 83       	std	Z+1, r24	; 0x01
   11b56:	92 83       	std	Z+2, r25	; 0x02
   11b58:	a3 83       	std	Z+3, r26	; 0x03
   11b5a:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    if(gpib_log_fp)
   11b5e:	80 91 68 19 	lds	r24, 0x1968	; 0x801968 <gpib_log_fp>
   11b62:	90 91 69 19 	lds	r25, 0x1969	; 0x801969 <gpib_log_fp+0x1>
   11b66:	00 97       	sbiw	r24, 0x00	; 0
   11b68:	a1 f0       	breq	.+40     	; 0x11b92 <gpib_trace_task+0x118>
    {
        fclose(gpib_log_fp);
   11b6a:	0e 94 1c 7d 	call	0xfa38	; 0xfa38 <fclose>
        printf("Capturing Closed\n");
   11b6e:	85 e3       	ldi	r24, 0x35	; 53
   11b70:	94 e1       	ldi	r25, 0x14	; 20
   11b72:	a0 e0       	ldi	r26, 0x00	; 0
   11b74:	ed b7       	in	r30, 0x3d	; 61
   11b76:	fe b7       	in	r31, 0x3e	; 62
   11b78:	81 83       	std	Z+1, r24	; 0x01
   11b7a:	92 83       	std	Z+2, r25	; 0x02
   11b7c:	a3 83       	std	Z+3, r26	; 0x03
   11b7e:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
        gpib_log_fp = stdout;
   11b82:	80 91 c9 1c 	lds	r24, 0x1CC9	; 0x801cc9 <__iob+0x2>
   11b86:	90 91 ca 1c 	lds	r25, 0x1CCA	; 0x801cca <__iob+0x3>
   11b8a:	90 93 69 19 	sts	0x1969, r25	; 0x801969 <gpib_log_fp+0x1>
   11b8e:	80 93 68 19 	sts	0x1968, r24	; 0x801968 <gpib_log_fp>
    }
}
   11b92:	cd b7       	in	r28, 0x3d	; 61
   11b94:	de b7       	in	r29, 0x3e	; 62
   11b96:	25 96       	adiw	r28, 0x05	; 5
   11b98:	e4 e0       	ldi	r30, 0x04	; 4
   11b9a:	0c 94 29 e7 	jmp	0x1ce52	; 0x1ce52 <__epilogue_restores__+0x1c>

00011b9e <gpib_error_test>:
///
/// @return  val
/// @return ABORT flag on user keypress

uint16_t gpib_error_test(uint16_t val)
{
   11b9e:	ef 92       	push	r14
   11ba0:	ff 92       	push	r15
   11ba2:	0f 93       	push	r16
   11ba4:	1f 93       	push	r17
   11ba6:	cf 93       	push	r28
   11ba8:	df 93       	push	r29
   11baa:	00 d0       	rcall	.+0      	; 0x11bac <gpib_error_test+0xe>
   11bac:	1f 92       	push	r1
   11bae:	7c 01       	movw	r14, r24

    if(val & ERROR_MASK || uart_keyhit(0) || mmc_ins_status() != 1 )
   11bb0:	ec 01       	movw	r28, r24
   11bb2:	cc 27       	eor	r28, r28
   11bb4:	d0 7d       	andi	r29, 0xD0	; 208
   11bb6:	20 97       	sbiw	r28, 0x00	; 0
   11bb8:	61 f0       	breq	.+24     	; 0x11bd2 <gpib_error_test+0x34>
    {
        val &= ERROR_MASK;

///@brief IFC is and important state so display it for most messages
        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TOP_LEVEL_BUS_DECODE + GPIB_DEVICE_STATE_MESSAGES))
   11bba:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11bbe:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11bc2:	8d 72       	andi	r24, 0x2D	; 45
   11bc4:	99 27       	eor	r25, r25
   11bc6:	87 01       	movw	r16, r14
   11bc8:	00 27       	eor	r16, r16
   11bca:	10 71       	andi	r17, 0x10	; 16
   11bcc:	89 2b       	or	r24, r25
   11bce:	59 f4       	brne	.+22     	; 0x11be6 <gpib_error_test+0x48>
   11bd0:	17 c0       	rjmp	.+46     	; 0x11c00 <gpib_error_test+0x62>
/// @return ABORT flag on user keypress

uint16_t gpib_error_test(uint16_t val)
{

    if(val & ERROR_MASK || uart_keyhit(0) || mmc_ins_status() != 1 )
   11bd2:	80 e0       	ldi	r24, 0x00	; 0
   11bd4:	0e 94 95 2a 	call	0x552a	; 0x552a <uart_keyhit>
   11bd8:	89 2b       	or	r24, r25
   11bda:	79 f7       	brne	.-34     	; 0x11bba <gpib_error_test+0x1c>
   11bdc:	0e 94 1e 6f 	call	0xde3c	; 0xde3c <mmc_ins_status>
   11be0:	01 97       	sbiw	r24, 0x01	; 1
   11be2:	59 f7       	brne	.-42     	; 0x11bba <gpib_error_test+0x1c>
   11be4:	62 c0       	rjmp	.+196    	; 0x11caa <gpib_error_test+0x10c>

///@brief IFC is and important state so display it for most messages
        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TOP_LEVEL_BUS_DECODE + GPIB_DEVICE_STATE_MESSAGES))
        {
/// Bus Clear, reseat all states, etc
            if(val & IFC_FLAG)
   11be6:	01 15       	cp	r16, r1
   11be8:	11 05       	cpc	r17, r1
   11bea:	51 f0       	breq	.+20     	; 0x11c00 <gpib_error_test+0x62>
                printf("<IFC>\n");
   11bec:	8e e2       	ldi	r24, 0x2E	; 46
   11bee:	94 e1       	ldi	r25, 0x14	; 20
   11bf0:	a0 e0       	ldi	r26, 0x00	; 0
   11bf2:	ed b7       	in	r30, 0x3d	; 61
   11bf4:	fe b7       	in	r31, 0x3e	; 62
   11bf6:	81 83       	std	Z+1, r24	; 0x01
   11bf8:	92 83       	std	Z+2, r25	; 0x02
   11bfa:	a3 83       	std	Z+3, r26	; 0x03
   11bfc:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
        }

        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TOP_LEVEL_BUS_DECODE + GPIB_DEVICE_STATE_MESSAGES))
   11c00:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11c04:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11c08:	8d 72       	andi	r24, 0x2D	; 45
   11c0a:	99 27       	eor	r25, r25
   11c0c:	89 2b       	or	r24, r25
   11c0e:	c1 f0       	breq	.+48     	; 0x11c40 <gpib_error_test+0xa2>
        {
            if(val & TIMEOUT_FLAG)
   11c10:	f6 fe       	sbrs	r15, 6
   11c12:	0a c0       	rjmp	.+20     	; 0x11c28 <gpib_error_test+0x8a>
                printf("<TIMEOUT>\n");
   11c14:	83 e2       	ldi	r24, 0x23	; 35
   11c16:	94 e1       	ldi	r25, 0x14	; 20
   11c18:	a0 e0       	ldi	r26, 0x00	; 0
   11c1a:	ed b7       	in	r30, 0x3d	; 61
   11c1c:	fe b7       	in	r31, 0x3e	; 62
   11c1e:	81 83       	std	Z+1, r24	; 0x01
   11c20:	92 83       	std	Z+2, r25	; 0x02
   11c22:	a3 83       	std	Z+3, r26	; 0x03
   11c24:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
            if(val & BUS_ERROR_FLAG)
   11c28:	d7 ff       	sbrs	r29, 7
   11c2a:	0a c0       	rjmp	.+20     	; 0x11c40 <gpib_error_test+0xa2>
                printf("<BUS>\n");
   11c2c:	8c e1       	ldi	r24, 0x1C	; 28
   11c2e:	94 e1       	ldi	r25, 0x14	; 20
   11c30:	a0 e0       	ldi	r26, 0x00	; 0
   11c32:	ed b7       	in	r30, 0x3d	; 61
   11c34:	fe b7       	in	r31, 0x3e	; 62
   11c36:	81 83       	std	Z+1, r24	; 0x01
   11c38:	92 83       	std	Z+2, r25	; 0x02
   11c3a:	a3 83       	std	Z+3, r26	; 0x03
   11c3c:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
        }

        if(uart_keyhit(0))
   11c40:	80 e0       	ldi	r24, 0x00	; 0
   11c42:	0e 94 95 2a 	call	0x552a	; 0x552a <uart_keyhit>
   11c46:	89 2b       	or	r24, r25
   11c48:	51 f0       	breq	.+20     	; 0x11c5e <gpib_error_test+0xc0>
            printf("<INTERRUPT>\n");
   11c4a:	8f e0       	ldi	r24, 0x0F	; 15
   11c4c:	94 e1       	ldi	r25, 0x14	; 20
   11c4e:	a0 e0       	ldi	r26, 0x00	; 0
   11c50:	ed b7       	in	r30, 0x3d	; 61
   11c52:	fe b7       	in	r31, 0x3e	; 62
   11c54:	81 83       	std	Z+1, r24	; 0x01
   11c56:	92 83       	std	Z+2, r25	; 0x02
   11c58:	a3 83       	std	Z+3, r26	; 0x03
   11c5a:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>

        if( mmc_ins_status() != 1 )
   11c5e:	0e 94 1e 6f 	call	0xde3c	; 0xde3c <mmc_ins_status>
   11c62:	01 97       	sbiw	r24, 0x01	; 1
   11c64:	51 f0       	breq	.+20     	; 0x11c7a <gpib_error_test+0xdc>
            printf("<MEDIA MISSING>\n");
   11c66:	8e ef       	ldi	r24, 0xFE	; 254
   11c68:	93 e1       	ldi	r25, 0x13	; 19
   11c6a:	a0 e0       	ldi	r26, 0x00	; 0
   11c6c:	ed b7       	in	r30, 0x3d	; 61
   11c6e:	fe b7       	in	r31, 0x3e	; 62
   11c70:	81 83       	std	Z+1, r24	; 0x01
   11c72:	92 83       	std	Z+2, r25	; 0x02
   11c74:	a3 83       	std	Z+3, r26	; 0x03
   11c76:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>

        if(val & IFC_FLAG)
   11c7a:	01 15       	cp	r16, r1
   11c7c:	11 05       	cpc	r17, r1
   11c7e:	09 f0       	breq	.+2      	; 0x11c82 <gpib_error_test+0xe4>
        {
            gpib_init_devices();
   11c80:	f3 de       	rcall	.-538    	; 0x11a68 <gpib_init_devices>
        }

        if(uart_keyhit(0))
   11c82:	80 e0       	ldi	r24, 0x00	; 0
   11c84:	0e 94 95 2a 	call	0x552a	; 0x552a <uart_keyhit>
   11c88:	89 2b       	or	r24, r25
        {
            gpib_init_devices();
   11c8a:	11 f0       	breq	.+4      	; 0x11c90 <gpib_error_test+0xf2>
   11c8c:	ed de       	rcall	.-550    	; 0x11a68 <gpib_init_devices>
   11c8e:	0b c0       	rjmp	.+22     	; 0x11ca6 <gpib_error_test+0x108>
            return(ABORT_FLAG);
        }

/// @todo  do we want to always exit here ?
///  low level GPIB functions are still useful even without a DISK
        if( mmc_ins_status() != 1 )
   11c90:	0e 94 1e 6f 	call	0xde3c	; 0xde3c <mmc_ins_status>
   11c94:	01 97       	sbiw	r24, 0x01	; 1
   11c96:	39 f4       	brne	.+14     	; 0x11ca6 <gpib_error_test+0x108>
        {
            return(ABORT_FLAG);
        }

// Wait for IFC free
        if(val & IFC_FLAG )
   11c98:	01 15       	cp	r16, r1
   11c9a:	11 05       	cpc	r17, r1
   11c9c:	31 f0       	breq	.+12     	; 0x11caa <gpib_error_test+0x10c>
        {
            while(GPIB_IO_RD(IFC) == 0)
   11c9e:	54 98       	cbi	0x0a, 4	; 10
   11ca0:	4c 9b       	sbis	0x09, 4	; 9
   11ca2:	fd cf       	rjmp	.-6      	; 0x11c9e <gpib_error_test+0x100>
   11ca4:	02 c0       	rjmp	.+4      	; 0x11caa <gpib_error_test+0x10c>

/// @todo  do we want to always exit here ?
///  low level GPIB functions are still useful even without a DISK
        if( mmc_ins_status() != 1 )
        {
            return(ABORT_FLAG);
   11ca6:	c1 e0       	ldi	r28, 0x01	; 1
   11ca8:	d0 e0       	ldi	r29, 0x00	; 0
                ;
        }
        return(val);
    }
    return(0);
}
   11caa:	ce 01       	movw	r24, r28
   11cac:	cd b7       	in	r28, 0x3d	; 61
   11cae:	de b7       	in	r29, 0x3e	; 62
   11cb0:	23 96       	adiw	r28, 0x03	; 3
   11cb2:	e6 e0       	ldi	r30, 0x06	; 6
   11cb4:	0c 94 27 e7 	jmp	0x1ce4e	; 0x1ce4e <__epilogue_restores__+0x18>

00011cb8 <GPIB_COMMANDS>:
///
/// @return GPIB status from emulator command.
/// @return 0 if no emulator command processed.

uint16_t GPIB_COMMANDS(uint16_t val, uint8_t unread)
{
   11cb8:	1f 93       	push	r17
   11cba:	cf 93       	push	r28
   11cbc:	df 93       	push	r29
   11cbe:	ec 01       	movw	r28, r24
   11cc0:	16 2f       	mov	r17, r22
    uint16_t status;

///@brief talking ?
    if(talking != UNT)
   11cc2:	80 91 f6 1e 	lds	r24, 0x1EF6	; 0x801ef6 <talking>
   11cc6:	8f 35       	cpi	r24, 0x5F	; 95
   11cc8:	91 f0       	breq	.+36     	; 0x11cee <GPIB_COMMANDS+0x36>
    {

#ifdef AMIGO
        if ( AMIGO_is_MLA(listening) )
   11cca:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   11cce:	90 e0       	ldi	r25, 0x00	; 0
   11cd0:	71 de       	rcall	.-798    	; 0x119b4 <AMIGO_is_MLA>
   11cd2:	89 2b       	or	r24, r25
   11cd4:	c9 f4       	brne	.+50     	; 0x11d08 <GPIB_COMMANDS+0x50>
            secondary = 0;
            return(status);
        }
#endif                                    // ifdef AMIGO

        if ( SS80_is_MLA(listening) )
   11cd6:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   11cda:	90 e0       	ldi	r25, 0x00	; 0
   11cdc:	35 de       	rcall	.-918    	; 0x11948 <SS80_is_MLA>
   11cde:	89 2b       	or	r24, r25
   11ce0:	11 f5       	brne	.+68     	; 0x11d26 <GPIB_COMMANDS+0x6e>
            status = SS80_COMMANDS(secondary);
            secondary = 0;
            return(status);
        }

        if ( PRINTER_is_MLA(listening) )
   11ce2:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   11ce6:	90 e0       	ldi	r25, 0x00	; 0
   11ce8:	9b de       	rcall	.-714    	; 0x11a20 <PRINTER_is_MLA>
   11cea:	89 2b       	or	r24, r25
   11cec:	59 f5       	brne	.+86     	; 0x11d44 <GPIB_COMMANDS+0x8c>
            return(status);
        }
    }

///@brief listening ?
    if(listening != UNL)
   11cee:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   11cf2:	8f 33       	cpi	r24, 0x3F	; 63
   11cf4:	19 f4       	brne	.+6      	; 0x11cfc <GPIB_COMMANDS+0x44>
            status = PRINTER_COMMANDS(secondary);
            secondary = 0;
            return(status);
        }
    }
    return(0);
   11cf6:	80 e0       	ldi	r24, 0x00	; 0
   11cf8:	90 e0       	ldi	r25, 0x00	; 0
   11cfa:	2e c0       	rjmp	.+92     	; 0x11d58 <GPIB_COMMANDS+0xa0>

///@brief listening ?
    if(listening != UNL)
    {
#ifdef AMIGO
        if ( AMIGO_is_MTA(talking) )
   11cfc:	80 91 f6 1e 	lds	r24, 0x1EF6	; 0x801ef6 <talking>
   11d00:	90 e0       	ldi	r25, 0x00	; 0
   11d02:	6a de       	rcall	.-812    	; 0x119d8 <AMIGO_is_MTA>
   11d04:	89 2b       	or	r24, r25
   11d06:	49 f0       	breq	.+18     	; 0x11d1a <GPIB_COMMANDS+0x62>
        {
            if(unread)
   11d08:	11 23       	and	r17, r17
   11d0a:	11 f0       	breq	.+4      	; 0x11d10 <GPIB_COMMANDS+0x58>
                gpib_unread(val);
   11d0c:	ce 01       	movw	r24, r28
   11d0e:	58 d8       	rcall	.-3920   	; 0x10dc0 <gpib_unread>
   11d10:	80 91 f7 1e 	lds	r24, 0x1EF7	; 0x801ef7 <secondary>
            status = AMIGO_COMMANDS(secondary);
   11d14:	0e 94 af bd 	call	0x17b5e	; 0x17b5e <AMIGO_COMMANDS>
   11d18:	1d c0       	rjmp	.+58     	; 0x11d54 <GPIB_COMMANDS+0x9c>
            secondary = 0;
            return(status);
        }
#endif

        if ( SS80_is_MTA(talking) )
   11d1a:	80 91 f6 1e 	lds	r24, 0x1EF6	; 0x801ef6 <talking>
   11d1e:	90 e0       	ldi	r25, 0x00	; 0
   11d20:	25 de       	rcall	.-950    	; 0x1196c <SS80_is_MTA>
   11d22:	89 2b       	or	r24, r25
   11d24:	49 f0       	breq	.+18     	; 0x11d38 <GPIB_COMMANDS+0x80>
        {
            if(unread)
   11d26:	11 23       	and	r17, r17
   11d28:	11 f0       	breq	.+4      	; 0x11d2e <GPIB_COMMANDS+0x76>
                gpib_unread(val);
   11d2a:	ce 01       	movw	r24, r28
   11d2c:	49 d8       	rcall	.-3950   	; 0x10dc0 <gpib_unread>
   11d2e:	80 91 f7 1e 	lds	r24, 0x1EF7	; 0x801ef7 <secondary>
            status = SS80_COMMANDS(secondary);
   11d32:	0e 94 d5 b1 	call	0x163aa	; 0x163aa <SS80_COMMANDS>
   11d36:	0e c0       	rjmp	.+28     	; 0x11d54 <GPIB_COMMANDS+0x9c>
            secondary = 0;
            return(status);
        }

        if ( PRINTER_is_MTA(talking) )
   11d38:	80 91 f6 1e 	lds	r24, 0x1EF6	; 0x801ef6 <talking>
   11d3c:	90 e0       	ldi	r25, 0x00	; 0
   11d3e:	82 de       	rcall	.-764    	; 0x11a44 <PRINTER_is_MTA>
   11d40:	89 2b       	or	r24, r25
   11d42:	c9 f2       	breq	.-78     	; 0x11cf6 <GPIB_COMMANDS+0x3e>
        {
            if(unread)
   11d44:	11 23       	and	r17, r17
   11d46:	11 f0       	breq	.+4      	; 0x11d4c <GPIB_COMMANDS+0x94>
                gpib_unread(val);
   11d48:	ce 01       	movw	r24, r28
   11d4a:	3a d8       	rcall	.-3980   	; 0x10dc0 <gpib_unread>
   11d4c:	80 91 f7 1e 	lds	r24, 0x1EF7	; 0x801ef7 <secondary>
            status = PRINTER_COMMANDS(secondary);
   11d50:	0e 94 28 c0 	call	0x18050	; 0x18050 <PRINTER_COMMANDS>
   11d54:	10 92 f7 1e 	sts	0x1EF7, r1	; 0x801ef7 <secondary>
            secondary = 0;
   11d58:	df 91       	pop	r29
            return(status);
        }
    }
    return(0);
}
   11d5a:	cf 91       	pop	r28
   11d5c:	1f 91       	pop	r17
   11d5e:	08 95       	ret

00011d60 <Send_Identify>:
   11d60:	cf 92       	push	r12
///
/// @return  0 on GPIB error returns error flags
/// @see gpib.h ERROR_MASK for a full list.

int Send_Identify(uint8_t ch, uint16_t ID)
{
   11d62:	df 92       	push	r13
   11d64:	ff 92       	push	r15
   11d66:	0f 93       	push	r16
   11d68:	1f 93       	push	r17
   11d6a:	cf 93       	push	r28
   11d6c:	df 93       	push	r29
   11d6e:	cd b7       	in	r28, 0x3d	; 61
   11d70:	de b7       	in	r29, 0x3e	; 62
   11d72:	2b 97       	sbiw	r28, 0x0b	; 11
   11d74:	0f b6       	in	r0, 0x3f	; 63
   11d76:	f8 94       	cli
   11d78:	de bf       	out	0x3e, r29	; 62
   11d7a:	0f be       	out	0x3f, r0	; 63
   11d7c:	cd bf       	out	0x3d, r28	; 61
   11d7e:	f8 2e       	mov	r15, r24
   11d80:	6b 01       	movw	r12, r22
    uint16_t status = EOI_FLAG;
   11d82:	80 e0       	ldi	r24, 0x00	; 0
   11d84:	91 e0       	ldi	r25, 0x01	; 1
   11d86:	9b 87       	std	Y+11, r25	; 0x0b
   11d88:	8a 87       	std	Y+10, r24	; 0x0a
    uint8_t tmp[2];

    V2B_MSB(tmp,0,2,ID);
   11d8a:	8b 01       	movw	r16, r22
   11d8c:	20 e0       	ldi	r18, 0x00	; 0
   11d8e:	30 e0       	ldi	r19, 0x00	; 0
   11d90:	42 e0       	ldi	r20, 0x02	; 2
   11d92:	50 e0       	ldi	r21, 0x00	; 0
   11d94:	60 e0       	ldi	r22, 0x00	; 0
   11d96:	70 e0       	ldi	r23, 0x00	; 0
   11d98:	ce 01       	movw	r24, r28
   11d9a:	08 96       	adiw	r24, 0x08	; 8
   11d9c:	0e 94 63 c0 	call	0x180c6	; 0x180c6 <V2B_MSB>
    if(gpib_write_str(tmp,2, &status) != 2)
   11da0:	ae 01       	movw	r20, r28
   11da2:	46 5f       	subi	r20, 0xF6	; 246
   11da4:	5f 4f       	sbci	r21, 0xFF	; 255
   11da6:	62 e0       	ldi	r22, 0x02	; 2
   11da8:	70 e0       	ldi	r23, 0x00	; 0
   11daa:	ce 01       	movw	r24, r28
   11dac:	08 96       	adiw	r24, 0x08	; 8
   11dae:	cc dc       	rcall	.-1640   	; 0x11748 <gpib_write_str>
   11db0:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   11db4:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11db8:	02 97       	sbiw	r24, 0x02	; 2
   11dba:	79 f0       	breq	.+30     	; 0x11dda <Send_Identify+0x7a>
    {
        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11dbc:	25 72       	andi	r18, 0x25	; 37
   11dbe:	33 27       	eor	r19, r19
   11dc0:	23 2b       	or	r18, r19
   11dc2:	f9 f0       	breq	.+62     	; 0x11e02 <Send_Identify+0xa2>
            printf("[IDENT Unit:%02XH=%04XH FAILED]\n",
   11dc4:	ed b7       	in	r30, 0x3d	; 61
   11dc6:	fe b7       	in	r31, 0x3e	; 62
   11dc8:	d7 82       	std	Z+7, r13	; 0x07
   11dca:	c6 82       	std	Z+6, r12	; 0x06
   11dcc:	8f 2d       	mov	r24, r15
   11dce:	90 e0       	ldi	r25, 0x00	; 0
   11dd0:	95 83       	std	Z+5, r25	; 0x05
   11dd2:	84 83       	std	Z+4, r24	; 0x04
   11dd4:	8d ed       	ldi	r24, 0xDD	; 221
   11dd6:	93 e1       	ldi	r25, 0x13	; 19
   11dd8:	0e c0       	rjmp	.+28     	; 0x11df6 <Send_Identify+0x96>
                (int)ch,(int)ID);
        return(status & ERROR_MASK);
    }
#if SDEBUG
    if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11dda:	24 72       	andi	r18, 0x24	; 36
   11ddc:	33 27       	eor	r19, r19
   11dde:	23 2b       	or	r18, r19
   11de0:	81 f0       	breq	.+32     	; 0x11e02 <Send_Identify+0xa2>
        printf("[IDENT Unit:%02XH=%04XH]\n", (int)ch,(int)ID);
   11de2:	ed b7       	in	r30, 0x3d	; 61
   11de4:	fe b7       	in	r31, 0x3e	; 62
   11de6:	d7 82       	std	Z+7, r13	; 0x07
   11de8:	c6 82       	std	Z+6, r12	; 0x06
   11dea:	8f 2d       	mov	r24, r15
   11dec:	90 e0       	ldi	r25, 0x00	; 0
   11dee:	95 83       	std	Z+5, r25	; 0x05
   11df0:	84 83       	std	Z+4, r24	; 0x04
   11df2:	83 ec       	ldi	r24, 0xC3	; 195
   11df4:	93 e1       	ldi	r25, 0x13	; 19
   11df6:	a0 e0       	ldi	r26, 0x00	; 0
   11df8:	81 83       	std	Z+1, r24	; 0x01
   11dfa:	92 83       	std	Z+2, r25	; 0x02
   11dfc:	a3 83       	std	Z+3, r26	; 0x03
   11dfe:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
#endif
    return (status & ERROR_MASK);
   11e02:	8a 85       	ldd	r24, Y+10	; 0x0a
   11e04:	9b 85       	ldd	r25, Y+11	; 0x0b
   11e06:	88 27       	eor	r24, r24
   11e08:	90 7d       	andi	r25, 0xD0	; 208
}
   11e0a:	2b 96       	adiw	r28, 0x0b	; 11
   11e0c:	0f b6       	in	r0, 0x3f	; 63
   11e0e:	f8 94       	cli
   11e10:	de bf       	out	0x3e, r29	; 62
   11e12:	0f be       	out	0x3f, r0	; 63
   11e14:	cd bf       	out	0x3d, r28	; 61
   11e16:	df 91       	pop	r29
   11e18:	cf 91       	pop	r28
   11e1a:	1f 91       	pop	r17
   11e1c:	0f 91       	pop	r16
   11e1e:	ff 90       	pop	r15
   11e20:	df 90       	pop	r13
   11e22:	cf 90       	pop	r12
   11e24:	08 95       	ret

00011e26 <GPIB>:
/// @return  0 on sucess
/// @return GPIB error flags on fail
/// @see gpib.h ERROR_MASK defines for a full list.

int GPIB(uint8_t ch)
{
   11e26:	00 d0       	rcall	.+0      	; 0x11e28 <GPIB+0x2>
   11e28:	00 d0       	rcall	.+0      	; 0x11e2a <GPIB+0x4>
   11e2a:	1f 92       	push	r1
   11e2c:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   11e30:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
///@brief Parallel Poll Configure
///TODO
    if(ch == PPC)
   11e34:	85 30       	cpi	r24, 0x05	; 5
   11e36:	89 f4       	brne	.+34     	; 0x11e5a <GPIB+0x34>
    {
        if(debuglevel & (GPIB_ERR + GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TODO))
   11e38:	27 71       	andi	r18, 0x17	; 23
   11e3a:	33 27       	eor	r19, r19
   11e3c:	23 2b       	or	r18, r19
   11e3e:	51 f0       	breq	.+20     	; 0x11e54 <GPIB+0x2e>
            printf("[PPC unsupported TODO]\n");
   11e40:	8b ea       	ldi	r24, 0xAB	; 171
   11e42:	93 e1       	ldi	r25, 0x13	; 19
   11e44:	a0 e0       	ldi	r26, 0x00	; 0
   11e46:	ed b7       	in	r30, 0x3d	; 61
   11e48:	fe b7       	in	r31, 0x3e	; 62
   11e4a:	81 83       	std	Z+1, r24	; 0x01
   11e4c:	92 83       	std	Z+2, r25	; 0x02
   11e4e:	a3 83       	std	Z+3, r26	; 0x03
   11e50:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
        spoll = 0;
   11e54:	10 92 f3 1e 	sts	0x1EF3, r1	; 0x801ef3 <spoll>
   11e58:	a0 c0       	rjmp	.+320    	; 0x11f9a <GPIB+0x174>
        return 0;
    }
///@brief Parallel Poll Unconfigure
///TODO
    if(ch == PPU)
   11e5a:	85 31       	cpi	r24, 0x15	; 21
   11e5c:	39 f4       	brne	.+14     	; 0x11e6c <GPIB+0x46>
    {
        if(debuglevel & (GPIB_ERR + GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TODO))
   11e5e:	27 71       	andi	r18, 0x17	; 23
   11e60:	33 27       	eor	r19, r19
   11e62:	23 2b       	or	r18, r19
   11e64:	b9 f3       	breq	.-18     	; 0x11e54 <GPIB+0x2e>
            printf("[PPU unsupported TODO]\n");
   11e66:	83 e9       	ldi	r24, 0x93	; 147
   11e68:	93 e1       	ldi	r25, 0x13	; 19
   11e6a:	ec cf       	rjmp	.-40     	; 0x11e44 <GPIB+0x1e>
    }

/// @todo FIXME
#if defined(SPOLL)
///@brief Serial Poll Enable
    if(ch == SPE)
   11e6c:	88 31       	cpi	r24, 0x18	; 24
   11e6e:	d9 f4       	brne	.+54     	; 0x11ea6 <GPIB+0x80>
    {
#if SDEBUG
        if(debuglevel & (GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   11e70:	26 70       	andi	r18, 0x06	; 6
   11e72:	33 27       	eor	r19, r19
   11e74:	23 2b       	or	r18, r19
   11e76:	51 f0       	breq	.+20     	; 0x11e8c <GPIB+0x66>
            printf("[SPE]\n");
   11e78:	8c e8       	ldi	r24, 0x8C	; 140
   11e7a:	93 e1       	ldi	r25, 0x13	; 19
   11e7c:	a0 e0       	ldi	r26, 0x00	; 0
   11e7e:	ed b7       	in	r30, 0x3d	; 61
   11e80:	fe b7       	in	r31, 0x3e	; 62
   11e82:	81 83       	std	Z+1, r24	; 0x01
   11e84:	92 83       	std	Z+2, r25	; 0x02
   11e86:	a3 83       	std	Z+3, r26	; 0x03
   11e88:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
#endif
        spoll = 1;
   11e8c:	81 e0       	ldi	r24, 0x01	; 1
   11e8e:	80 93 f3 1e 	sts	0x1EF3, r24	; 0x801ef3 <spoll>
        if(SS80_is_MTA(talking))
   11e92:	80 91 f6 1e 	lds	r24, 0x1EF6	; 0x801ef6 <talking>
   11e96:	90 e0       	ldi	r25, 0x00	; 0
   11e98:	69 dd       	rcall	.-1326   	; 0x1196c <SS80_is_MTA>
   11e9a:	89 2b       	or	r24, r25
   11e9c:	09 f4       	brne	.+2      	; 0x11ea0 <GPIB+0x7a>
   11e9e:	7d c0       	rjmp	.+250    	; 0x11f9a <GPIB+0x174>
        {
            return( SS80_Report() );
   11ea0:	0e 94 88 ad 	call	0x15b10	; 0x15b10 <SS80_Report>
   11ea4:	7c c0       	rjmp	.+248    	; 0x11f9e <GPIB+0x178>
        }
        return 0;
    }

///@brief Serial Poll Disable
    if(ch == SPD)
   11ea6:	89 31       	cpi	r24, 0x19	; 25
   11ea8:	39 f4       	brne	.+14     	; 0x11eb8 <GPIB+0x92>
    {
#if SDEBUG
        if(debuglevel & (GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   11eaa:	26 70       	andi	r18, 0x06	; 6
   11eac:	33 27       	eor	r19, r19
   11eae:	23 2b       	or	r18, r19
   11eb0:	89 f2       	breq	.-94     	; 0x11e54 <GPIB+0x2e>
            printf("[SPD]\n");
   11eb2:	85 e8       	ldi	r24, 0x85	; 133
   11eb4:	93 e1       	ldi	r25, 0x13	; 19
   11eb6:	c6 cf       	rjmp	.-116    	; 0x11e44 <GPIB+0x1e>
        return 0;
    }
#endif                                        // #if defined(SPOLL)

///@brief Selected Device Clear
    if(ch == SDC )
   11eb8:	84 30       	cpi	r24, 0x04	; 4
   11eba:	09 f0       	breq	.+2      	; 0x11ebe <GPIB+0x98>
   11ebc:	48 c0       	rjmp	.+144    	; 0x11f4e <GPIB+0x128>
    {
#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11ebe:	22 ff       	sbrs	r18, 2
   11ec0:	0a c0       	rjmp	.+20     	; 0x11ed6 <GPIB+0xb0>
            printf("[SDC]\n");
   11ec2:	8e e7       	ldi	r24, 0x7E	; 126
   11ec4:	93 e1       	ldi	r25, 0x13	; 19
   11ec6:	a0 e0       	ldi	r26, 0x00	; 0
   11ec8:	ed b7       	in	r30, 0x3d	; 61
   11eca:	fe b7       	in	r31, 0x3e	; 62
   11ecc:	81 83       	std	Z+1, r24	; 0x01
   11ece:	92 83       	std	Z+2, r25	; 0x02
   11ed0:	a3 83       	std	Z+3, r26	; 0x03
   11ed2:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
#endif
        if(SS80_is_MLA(listening))
   11ed6:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   11eda:	90 e0       	ldi	r25, 0x00	; 0
   11edc:	35 dd       	rcall	.-1430   	; 0x11948 <SS80_is_MLA>
   11ede:	89 2b       	or	r24, r25
   11ee0:	d9 f0       	breq	.+54     	; 0x11f18 <GPIB+0xf2>
        {
///  Note: Suposed to be unsupported in SS80 - pg 4-2
///  CS80 3-4
#if SDEBUG
            if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11ee2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11ee6:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11eea:	84 72       	andi	r24, 0x24	; 36
   11eec:	99 27       	eor	r25, r25
   11eee:	89 2b       	or	r24, r25
   11ef0:	51 f0       	breq	.+20     	; 0x11f06 <GPIB+0xe0>
                printf("[SDC SS80]\n");
   11ef2:	82 e7       	ldi	r24, 0x72	; 114
   11ef4:	93 e1       	ldi	r25, 0x13	; 19
   11ef6:	a0 e0       	ldi	r26, 0x00	; 0
   11ef8:	ed b7       	in	r30, 0x3d	; 61
   11efa:	fe b7       	in	r31, 0x3e	; 62
   11efc:	81 83       	std	Z+1, r24	; 0x01
   11efe:	92 83       	std	Z+2, r25	; 0x02
   11f00:	a3 83       	std	Z+3, r26	; 0x03
   11f02:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
#endif
            return(SS80_Selected_Device_Clear(SS80s->unitNO) );
   11f06:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   11f0a:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   11f0e:	85 81       	ldd	r24, Z+5	; 0x05
   11f10:	90 e0       	ldi	r25, 0x00	; 0
   11f12:	0e 94 5a ae 	call	0x15cb4	; 0x15cb4 <SS80_Selected_Device_Clear>
   11f16:	43 c0       	rjmp	.+134    	; 0x11f9e <GPIB+0x178>
        }

#ifdef AMIGO
        if(AMIGO_is_MLA(listening))
   11f18:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   11f1c:	90 e0       	ldi	r25, 0x00	; 0
   11f1e:	4a dd       	rcall	.-1388   	; 0x119b4 <AMIGO_is_MLA>
   11f20:	89 2b       	or	r24, r25
   11f22:	d9 f1       	breq	.+118    	; 0x11f9a <GPIB+0x174>
        {
///  Note: Suposed to be unsupported in SS80 - pg 4-2
#if SDEBUG
            if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11f24:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11f28:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11f2c:	84 72       	andi	r24, 0x24	; 36
   11f2e:	99 27       	eor	r25, r25
   11f30:	89 2b       	or	r24, r25
   11f32:	51 f0       	breq	.+20     	; 0x11f48 <GPIB+0x122>
                printf("[SDC AMIGO]\n");
   11f34:	85 e6       	ldi	r24, 0x65	; 101
   11f36:	93 e1       	ldi	r25, 0x13	; 19
   11f38:	a0 e0       	ldi	r26, 0x00	; 0
   11f3a:	ed b7       	in	r30, 0x3d	; 61
   11f3c:	fe b7       	in	r31, 0x3e	; 62
   11f3e:	81 83       	std	Z+1, r24	; 0x01
   11f40:	92 83       	std	Z+2, r25	; 0x02
   11f42:	a3 83       	std	Z+3, r26	; 0x03
   11f44:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
#endif
            return( amigo_cmd_clear() );
   11f48:	0e 94 95 b8 	call	0x1712a	; 0x1712a <amigo_cmd_clear>
   11f4c:	28 c0       	rjmp	.+80     	; 0x11f9e <GPIB+0x178>
/// @todo FIXME
        return( 0 );
    }

///@brief   (Universal) Device Clear
    if(ch == DCL )
   11f4e:	84 31       	cpi	r24, 0x14	; 20
   11f50:	99 f4       	brne	.+38     	; 0x11f78 <GPIB+0x152>
    {
#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11f52:	22 ff       	sbrs	r18, 2
   11f54:	0a c0       	rjmp	.+20     	; 0x11f6a <GPIB+0x144>
            printf("[DCL]\n");
   11f56:	8e e5       	ldi	r24, 0x5E	; 94
   11f58:	93 e1       	ldi	r25, 0x13	; 19
   11f5a:	a0 e0       	ldi	r26, 0x00	; 0
   11f5c:	ed b7       	in	r30, 0x3d	; 61
   11f5e:	fe b7       	in	r31, 0x3e	; 62
   11f60:	81 83       	std	Z+1, r24	; 0x01
   11f62:	92 83       	std	Z+2, r25	; 0x02
   11f64:	a3 83       	std	Z+3, r26	; 0x03
   11f66:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
#endif
        SS80_Universal_Device_Clear();
   11f6a:	0e 94 4c ae 	call	0x15c98	; 0x15c98 <SS80_Universal_Device_Clear>

#ifdef AMIGO
        amigo_cmd_clear();
   11f6e:	0e 94 95 b8 	call	0x1712a	; 0x1712a <amigo_cmd_clear>
#endif

/// @todo Fixme
        printer_close();
   11f72:	0e 94 b4 be 	call	0x17d68	; 0x17d68 <printer_close>
   11f76:	11 c0       	rjmp	.+34     	; 0x11f9a <GPIB+0x174>
        return( 0 );
    }

    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TODO))
   11f78:	25 71       	andi	r18, 0x15	; 21
   11f7a:	33 27       	eor	r19, r19
   11f7c:	23 2b       	or	r18, r19
   11f7e:	69 f0       	breq	.+26     	; 0x11f9a <GPIB+0x174>
        printf("[GPIB (%02XH) not defined TODO]\n", 0xff & ch);
   11f80:	90 e0       	ldi	r25, 0x00	; 0
   11f82:	ed b7       	in	r30, 0x3d	; 61
   11f84:	fe b7       	in	r31, 0x3e	; 62
   11f86:	95 83       	std	Z+5, r25	; 0x05
   11f88:	84 83       	std	Z+4, r24	; 0x04
   11f8a:	8d e3       	ldi	r24, 0x3D	; 61
   11f8c:	93 e1       	ldi	r25, 0x13	; 19
   11f8e:	a0 e0       	ldi	r26, 0x00	; 0
   11f90:	81 83       	std	Z+1, r24	; 0x01
   11f92:	92 83       	std	Z+2, r25	; 0x02
   11f94:	a3 83       	std	Z+3, r26	; 0x03
   11f96:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    return(0);
   11f9a:	80 e0       	ldi	r24, 0x00	; 0
   11f9c:	90 e0       	ldi	r25, 0x00	; 0
}
   11f9e:	0f 90       	pop	r0
   11fa0:	0f 90       	pop	r0
   11fa2:	0f 90       	pop	r0
   11fa4:	0f 90       	pop	r0
   11fa6:	0f 90       	pop	r0
   11fa8:	08 95       	ret

00011faa <GPIB_TALK>:
/// @param[in] ch 8 bit talk command
///
/// @return  0

int GPIB_TALK(uint8_t ch)
{
   11faa:	cf 93       	push	r28
   11fac:	df 93       	push	r29
   11fae:	00 d0       	rcall	.+0      	; 0x11fb0 <GPIB_TALK+0x6>
   11fb0:	00 d0       	rcall	.+0      	; 0x11fb2 <GPIB_TALK+0x8>
   11fb2:	1f 92       	push	r1

///  NOTE: we must track the "addressed state" of each device
///  so we can determine its state - ie: command vs Secondary states
///  save talking state
    talking_last = talking;
   11fb4:	90 91 f6 1e 	lds	r25, 0x1EF6	; 0x801ef6 <talking>
   11fb8:	90 93 f9 1e 	sts	0x1EF9, r25	; 0x801ef9 <talking_last>
    talking = ch;
   11fbc:	80 93 f6 1e 	sts	0x1EF6, r24	; 0x801ef6 <talking>

    talk_cleanup();

///@brief  Universal Untalk
    if(ch == UNT)
   11fc0:	8f 35       	cpi	r24, 0x5F	; 95
   11fc2:	79 f4       	brne	.+30     	; 0x11fe2 <GPIB_TALK+0x38>
    {
//FIXME talking = 0 ????
#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11fc4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11fc8:	82 ff       	sbrs	r24, 2
   11fca:	7f c0       	rjmp	.+254    	; 0x120ca <GPIB_TALK+0x120>
            printf("[UNT]\n");
   11fcc:	8a ee       	ldi	r24, 0xEA	; 234
   11fce:	92 e1       	ldi	r25, 0x12	; 18
   11fd0:	a0 e0       	ldi	r26, 0x00	; 0
   11fd2:	ed b7       	in	r30, 0x3d	; 61
   11fd4:	fe b7       	in	r31, 0x3e	; 62
   11fd6:	81 83       	std	Z+1, r24	; 0x01
   11fd8:	92 83       	std	Z+2, r25	; 0x02
   11fda:	a3 83       	std	Z+3, r26	; 0x03
   11fdc:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   11fe0:	74 c0       	rjmp	.+232    	; 0x120ca <GPIB_TALK+0x120>
#endif
        return(0);
    }

    if(SS80_is_MTA(ch))
   11fe2:	c8 2f       	mov	r28, r24
   11fe4:	d0 e0       	ldi	r29, 0x00	; 0
   11fe6:	ce 01       	movw	r24, r28
   11fe8:	c1 dc       	rcall	.-1662   	; 0x1196c <SS80_is_MTA>
   11fea:	89 2b       	or	r24, r25
   11fec:	e1 f0       	breq	.+56     	; 0x12026 <GPIB_TALK+0x7c>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11fee:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11ff2:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11ff6:	84 72       	andi	r24, 0x24	; 36
   11ff8:	99 27       	eor	r25, r25
   11ffa:	89 2b       	or	r24, r25
   11ffc:	61 f0       	breq	.+24     	; 0x12016 <GPIB_TALK+0x6c>
            printf("[TA %02XH SS80]\n", 0xff & ch);
   11ffe:	ed b7       	in	r30, 0x3d	; 61
   12000:	fe b7       	in	r31, 0x3e	; 62
   12002:	d5 83       	std	Z+5, r29	; 0x05
   12004:	c4 83       	std	Z+4, r28	; 0x04
   12006:	89 ed       	ldi	r24, 0xD9	; 217
   12008:	92 e1       	ldi	r25, 0x12	; 18
   1200a:	a0 e0       	ldi	r26, 0x00	; 0
   1200c:	81 83       	std	Z+1, r24	; 0x01
   1200e:	92 83       	std	Z+2, r25	; 0x02
   12010:	a3 83       	std	Z+3, r26	; 0x03
   12012:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
#endif

        if (spoll)
   12016:	80 91 f3 1e 	lds	r24, 0x1EF3	; 0x801ef3 <spoll>
   1201a:	88 23       	and	r24, r24
   1201c:	09 f4       	brne	.+2      	; 0x12020 <GPIB_TALK+0x76>
   1201e:	55 c0       	rjmp	.+170    	; 0x120ca <GPIB_TALK+0x120>
        {
            SS80_Report();
   12020:	0e 94 88 ad 	call	0x15b10	; 0x15b10 <SS80_Report>
   12024:	52 c0       	rjmp	.+164    	; 0x120ca <GPIB_TALK+0x120>
        }
        return(0);
    }

#ifdef AMIGO
    if(AMIGO_is_MTA(ch))
   12026:	ce 01       	movw	r24, r28
   12028:	d7 dc       	rcall	.-1618   	; 0x119d8 <AMIGO_is_MTA>
   1202a:	89 2b       	or	r24, r25
   1202c:	81 f0       	breq	.+32     	; 0x1204e <GPIB_TALK+0xa4>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   1202e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   12032:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12036:	84 72       	andi	r24, 0x24	; 36
   12038:	99 27       	eor	r25, r25
   1203a:	89 2b       	or	r24, r25
   1203c:	09 f4       	brne	.+2      	; 0x12040 <GPIB_TALK+0x96>
   1203e:	45 c0       	rjmp	.+138    	; 0x120ca <GPIB_TALK+0x120>
            printf("[TA %02XH AMIGO]\n", 0xff & ch);
   12040:	ed b7       	in	r30, 0x3d	; 61
   12042:	fe b7       	in	r31, 0x3e	; 62
   12044:	d5 83       	std	Z+5, r29	; 0x05
   12046:	c4 83       	std	Z+4, r28	; 0x04
   12048:	87 ec       	ldi	r24, 0xC7	; 199
   1204a:	92 e1       	ldi	r25, 0x12	; 18
#endif
        return(0);
    }
#endif                                        // #ifdef AMIGO

    if(PRINTER_is_MTA(ch))
   1204c:	38 c0       	rjmp	.+112    	; 0x120be <GPIB_TALK+0x114>
   1204e:	ce 01       	movw	r24, r28
   12050:	f9 dc       	rcall	.-1550   	; 0x11a44 <PRINTER_is_MTA>
   12052:	89 2b       	or	r24, r25
   12054:	79 f0       	breq	.+30     	; 0x12074 <GPIB_TALK+0xca>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   12056:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1205a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1205e:	84 72       	andi	r24, 0x24	; 36
   12060:	99 27       	eor	r25, r25
   12062:	89 2b       	or	r24, r25
   12064:	91 f1       	breq	.+100    	; 0x120ca <GPIB_TALK+0x120>
            printf("[TA %02XH PRINTER]\n", 0xff & ch);
   12066:	ed b7       	in	r30, 0x3d	; 61
   12068:	fe b7       	in	r31, 0x3e	; 62
   1206a:	d5 83       	std	Z+5, r29	; 0x05
   1206c:	c4 83       	std	Z+4, r28	; 0x04
   1206e:	83 eb       	ldi	r24, 0xB3	; 179
   12070:	92 e1       	ldi	r25, 0x12	; 18
   12072:	25 c0       	rjmp	.+74     	; 0x120be <GPIB_TALK+0x114>
#endif
        return(0);
    }

    if(PRINTER_is_MLA(listening))
   12074:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   12078:	90 e0       	ldi	r25, 0x00	; 0
   1207a:	d2 dc       	rcall	.-1628   	; 0x11a20 <PRINTER_is_MLA>
   1207c:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   12080:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12084:	89 2b       	or	r24, r25
   12086:	99 f0       	breq	.+38     	; 0x120ae <GPIB_TALK+0x104>
    {
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   12088:	24 72       	andi	r18, 0x24	; 36
   1208a:	33 27       	eor	r19, r19
   1208c:	23 2b       	or	r18, r19
   1208e:	51 f0       	breq	.+20     	; 0x120a4 <GPIB_TALK+0xfa>
            printf("[PRINTER OPEN]\n");
   12090:	83 ea       	ldi	r24, 0xA3	; 163
   12092:	92 e1       	ldi	r25, 0x12	; 18
   12094:	a0 e0       	ldi	r26, 0x00	; 0
   12096:	ed b7       	in	r30, 0x3d	; 61
   12098:	fe b7       	in	r31, 0x3e	; 62
   1209a:	81 83       	std	Z+1, r24	; 0x01
   1209c:	92 83       	std	Z+2, r25	; 0x02
   1209e:	a3 83       	std	Z+3, r26	; 0x03
   120a0:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
        printer_open(NULL);
   120a4:	80 e0       	ldi	r24, 0x00	; 0
   120a6:	90 e0       	ldi	r25, 0x00	; 0
   120a8:	0e 94 0c bf 	call	0x17e18	; 0x17e18 <printer_open>
   120ac:	0e c0       	rjmp	.+28     	; 0x120ca <GPIB_TALK+0x120>
        return(0);
    }

#if SDEBUG
    if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   120ae:	22 ff       	sbrs	r18, 2
   120b0:	0c c0       	rjmp	.+24     	; 0x120ca <GPIB_TALK+0x120>
        printf("[TA %02XH]\n", 0xff & ch);
   120b2:	ed b7       	in	r30, 0x3d	; 61
   120b4:	fe b7       	in	r31, 0x3e	; 62
   120b6:	d5 83       	std	Z+5, r29	; 0x05
   120b8:	c4 83       	std	Z+4, r28	; 0x04
   120ba:	87 e9       	ldi	r24, 0x97	; 151
   120bc:	92 e1       	ldi	r25, 0x12	; 18
   120be:	a0 e0       	ldi	r26, 0x00	; 0
   120c0:	81 83       	std	Z+1, r24	; 0x01
   120c2:	92 83       	std	Z+2, r25	; 0x02
   120c4:	a3 83       	std	Z+3, r26	; 0x03
   120c6:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
#endif
    return(0);
}                                                 // Talk Address primary address group
   120ca:	80 e0       	ldi	r24, 0x00	; 0
   120cc:	90 e0       	ldi	r25, 0x00	; 0
   120ce:	cd b7       	in	r28, 0x3d	; 61
   120d0:	de b7       	in	r29, 0x3e	; 62
   120d2:	25 96       	adiw	r28, 0x05	; 5
   120d4:	e2 e0       	ldi	r30, 0x02	; 2
   120d6:	0c 94 2b e7 	jmp	0x1ce56	; 0x1ce56 <__epilogue_restores__+0x20>

000120da <GPIB_SECONDARY_ADDRESS>:
///
/// @param[in] ch 8 bit secondary address.
///
/// @return  0
int GPIB_SECONDARY_ADDRESS(uint8_t ch)
{
   120da:	a9 e0       	ldi	r26, 0x09	; 9
   120dc:	b0 e0       	ldi	r27, 0x00	; 0
   120de:	e3 e7       	ldi	r30, 0x73	; 115
   120e0:	f0 e9       	ldi	r31, 0x90	; 144
   120e2:	0c 94 0e e7 	jmp	0x1ce1c	; 0x1ce1c <__prologue_saves__+0x1e>
   120e6:	18 2f       	mov	r17, r24
///  note: any errors will reset lastcmd
///  Universal Talk mode
///  Treat this as a Secondary Address ?
///  SS80 Ident 4-31
///  If we have our secondary address then send IDENT
    if(SS80_is_MSA(ch) )
   120e8:	c8 2f       	mov	r28, r24
   120ea:	d0 e0       	ldi	r29, 0x00	; 0
   120ec:	ce 01       	movw	r24, r28
   120ee:	50 dc       	rcall	.-1888   	; 0x11990 <SS80_is_MSA>
   120f0:	89 2b       	or	r24, r25
   120f2:	09 f1       	breq	.+66     	; 0x12136 <GPIB_SECONDARY_ADDRESS+0x5c>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   120f4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   120f8:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   120fc:	84 72       	andi	r24, 0x24	; 36
   120fe:	99 27       	eor	r25, r25
   12100:	89 2b       	or	r24, r25
   12102:	61 f0       	breq	.+24     	; 0x1211c <GPIB_SECONDARY_ADDRESS+0x42>
            printf("[SA %02XH SS80]\n", 0xff & ch);
   12104:	ed b7       	in	r30, 0x3d	; 61
   12106:	fe b7       	in	r31, 0x3e	; 62
   12108:	d5 83       	std	Z+5, r29	; 0x05
   1210a:	c4 83       	std	Z+4, r28	; 0x04
   1210c:	86 e8       	ldi	r24, 0x86	; 134
   1210e:	92 e1       	ldi	r25, 0x12	; 18
   12110:	a0 e0       	ldi	r26, 0x00	; 0
   12112:	81 83       	std	Z+1, r24	; 0x01
   12114:	92 83       	std	Z+2, r25	; 0x02
   12116:	a3 83       	std	Z+3, r26	; 0x03
   12118:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
#endif
///@brief ch = secondary address
        gpib_disable_PPR(SS80p->HEADER.PPR);
   1211c:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   12120:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   12124:	81 81       	ldd	r24, Z+1	; 0x01
   12126:	90 e0       	ldi	r25, 0x00	; 0
   12128:	0e 94 aa 86 	call	0x10d54	; 0x10d54 <gpib_disable_PPR>
        return(Send_Identify( ch, SS80p->CONFIG.ID) );
   1212c:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   12130:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   12134:	25 c0       	rjmp	.+74     	; 0x12180 <GPIB_SECONDARY_ADDRESS+0xa6>

    }

#ifdef AMIGO
    if(AMIGO_is_MSA(ch) )
   12136:	ce 01       	movw	r24, r28
   12138:	61 dc       	rcall	.-1854   	; 0x119fc <AMIGO_is_MSA>
   1213a:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1213e:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12142:	89 2b       	or	r24, r25
   12144:	11 f1       	breq	.+68     	; 0x1218a <GPIB_SECONDARY_ADDRESS+0xb0>
    {
/// @todo
///     Two identify bytes should be repeated until untalked
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   12146:	c9 01       	movw	r24, r18
   12148:	84 72       	andi	r24, 0x24	; 36
   1214a:	99 27       	eor	r25, r25
   1214c:	89 2b       	or	r24, r25
   1214e:	61 f0       	breq	.+24     	; 0x12168 <GPIB_SECONDARY_ADDRESS+0x8e>
            printf("[SA %02XH AMIGO]\n", 0xff & ch);
   12150:	ed b7       	in	r30, 0x3d	; 61
   12152:	fe b7       	in	r31, 0x3e	; 62
   12154:	d5 83       	std	Z+5, r29	; 0x05
   12156:	c4 83       	std	Z+4, r28	; 0x04
   12158:	84 e7       	ldi	r24, 0x74	; 116
   1215a:	92 e1       	ldi	r25, 0x12	; 18
   1215c:	a0 e0       	ldi	r26, 0x00	; 0
   1215e:	81 83       	std	Z+1, r24	; 0x01
   12160:	92 83       	std	Z+2, r25	; 0x02
   12162:	a3 83       	std	Z+3, r26	; 0x03
   12164:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
#endif
///@brief ch = secondary address
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   12168:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   1216c:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   12170:	81 81       	ldd	r24, Z+1	; 0x01
   12172:	90 e0       	ldi	r25, 0x00	; 0
   12174:	0e 94 aa 86 	call	0x10d54	; 0x10d54 <gpib_disable_PPR>
        return( Send_Identify( ch, AMIGOp->CONFIG.ID) );
   12178:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   1217c:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   12180:	66 81       	ldd	r22, Z+6	; 0x06
   12182:	77 81       	ldd	r23, Z+7	; 0x07
   12184:	81 2f       	mov	r24, r17
   12186:	ec dd       	rcall	.-1064   	; 0x11d60 <Send_Identify>
   12188:	1d c0       	rjmp	.+58     	; 0x121c4 <GPIB_SECONDARY_ADDRESS+0xea>
    }
#endif                                        // #ifdef AMIGO

#if SDEBUG
    if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   1218a:	c9 01       	movw	r24, r18
   1218c:	84 72       	andi	r24, 0x24	; 36
   1218e:	99 27       	eor	r25, r25
   12190:	00 97       	sbiw	r24, 0x00	; 0
   12192:	c1 f0       	breq	.+48     	; 0x121c4 <GPIB_SECONDARY_ADDRESS+0xea>
        printf("[SA %02XH, listen:%02XH, talk:%02XH]\n",
   12194:	80 91 f6 1e 	lds	r24, 0x1EF6	; 0x801ef6 <talking>
   12198:	90 e0       	ldi	r25, 0x00	; 0
   1219a:	ed b7       	in	r30, 0x3d	; 61
   1219c:	fe b7       	in	r31, 0x3e	; 62
   1219e:	91 87       	std	Z+9, r25	; 0x09
   121a0:	80 87       	std	Z+8, r24	; 0x08
   121a2:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   121a6:	90 e0       	ldi	r25, 0x00	; 0
   121a8:	97 83       	std	Z+7, r25	; 0x07
   121aa:	86 83       	std	Z+6, r24	; 0x06
   121ac:	d5 83       	std	Z+5, r29	; 0x05
   121ae:	c4 83       	std	Z+4, r28	; 0x04
   121b0:	8e e4       	ldi	r24, 0x4E	; 78
   121b2:	92 e1       	ldi	r25, 0x12	; 18
   121b4:	a0 e0       	ldi	r26, 0x00	; 0
   121b6:	81 83       	std	Z+1, r24	; 0x01
   121b8:	92 83       	std	Z+2, r25	; 0x02
   121ba:	a3 83       	std	Z+3, r26	; 0x03
   121bc:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
            0xff & ch, 0xff & listening, 0xff & talking);
#endif
    return(0);
   121c0:	80 e0       	ldi	r24, 0x00	; 0
   121c2:	90 e0       	ldi	r25, 0x00	; 0
}
   121c4:	cd b7       	in	r28, 0x3d	; 61
   121c6:	de b7       	in	r29, 0x3e	; 62
   121c8:	29 96       	adiw	r28, 0x09	; 9
   121ca:	e3 e0       	ldi	r30, 0x03	; 3
   121cc:	0c 94 2a e7 	jmp	0x1ce54	; 0x1ce54 <__epilogue_restores__+0x1e>

000121d0 <listen_cleanup>:
/// - Used to cleanup or close at the end of any listen address transition.
/// - Also called when GPIB bus reset or unlisten.
/// For now we just use this to close printer capture
/// @return  void
void listen_cleanup()
{
   121d0:	00 d0       	rcall	.+0      	; 0x121d2 <listen_cleanup+0x2>
   121d2:	1f 92       	push	r1
    if(listening_last)
   121d4:	60 91 f2 1e 	lds	r22, 0x1EF2	; 0x801ef2 <listening_last>
   121d8:	66 23       	and	r22, r22
   121da:	e1 f0       	breq	.+56     	; 0x12214 <listen_cleanup+0x44>
    {
        int index = find_device(PRINTER_TYPE, listening_last, BASE_MLA);
   121dc:	70 e0       	ldi	r23, 0x00	; 0
   121de:	40 e2       	ldi	r20, 0x20	; 32
   121e0:	50 e0       	ldi	r21, 0x00	; 0
   121e2:	84 e0       	ldi	r24, 0x04	; 4
   121e4:	90 e0       	ldi	r25, 0x00	; 0
   121e6:	45 d6       	rcall	.+3210   	; 0x12e72 <find_device>
        if(index == -1)
   121e8:	8f 3f       	cpi	r24, 0xFF	; 255
   121ea:	a1 f0       	breq	.+40     	; 0x12214 <listen_cleanup+0x44>
            return;

//We should not set the active device globally
//FIXME if we have to then printer close should temprarily do so
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   121ec:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   121f0:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   121f4:	84 72       	andi	r24, 0x24	; 36
   121f6:	99 27       	eor	r25, r25
   121f8:	89 2b       	or	r24, r25
   121fa:	51 f0       	breq	.+20     	; 0x12210 <listen_cleanup+0x40>
            printf("[PRINTER close]\n");
   121fc:	8d e3       	ldi	r24, 0x3D	; 61
   121fe:	92 e1       	ldi	r25, 0x12	; 18
   12200:	a0 e0       	ldi	r26, 0x00	; 0
   12202:	ed b7       	in	r30, 0x3d	; 61
   12204:	fe b7       	in	r31, 0x3e	; 62
   12206:	81 83       	std	Z+1, r24	; 0x01
   12208:	92 83       	std	Z+2, r25	; 0x02
   1220a:	a3 83       	std	Z+3, r26	; 0x03
   1220c:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
        printer_close();
   12210:	0e 94 b4 be 	call	0x17d68	; 0x17d68 <printer_close>
    }
}
   12214:	0f 90       	pop	r0
   12216:	0f 90       	pop	r0
   12218:	0f 90       	pop	r0
   1221a:	08 95       	ret

0001221c <GPIB_LISTEN>:
/// @param[in] ch 8 bit listen command
///
/// @return  0

int GPIB_LISTEN(uint8_t ch)
{
   1221c:	cf 93       	push	r28
   1221e:	df 93       	push	r29
   12220:	00 d0       	rcall	.+0      	; 0x12222 <GPIB_LISTEN+0x6>
   12222:	00 d0       	rcall	.+0      	; 0x12224 <GPIB_LISTEN+0x8>
   12224:	1f 92       	push	r1
   12226:	c8 2f       	mov	r28, r24
    listening_last = listening;
   12228:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   1222c:	80 93 f2 1e 	sts	0x1EF2, r24	; 0x801ef2 <listening_last>
    listening = ch;
   12230:	c0 93 f8 1e 	sts	0x1EF8, r28	; 0x801ef8 <listening>

    listen_cleanup();
   12234:	cd df       	rcall	.-102    	; 0x121d0 <listen_cleanup>

///  NOTE: we must track the "addressed state" of each device
///  so we can determine its state - ie: command vs Secondary states
///@brief  Universal Unlisten
    if(ch == UNL)
   12236:	cf 33       	cpi	r28, 0x3F	; 63
   12238:	19 f5       	brne	.+70     	; 0x12280 <GPIB_LISTEN+0x64>
    {
        listening = 0;
   1223a:	10 92 f8 1e 	sts	0x1EF8, r1	; 0x801ef8 <listening>

#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   1223e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   12242:	82 ff       	sbrs	r24, 2
   12244:	74 c0       	rjmp	.+232    	; 0x1232e <GPIB_LISTEN+0x112>
        {
            printf("[UNL]\n");
   12246:	86 e3       	ldi	r24, 0x36	; 54
   12248:	93 e1       	ldi	r25, 0x13	; 19
   1224a:	a0 e0       	ldi	r26, 0x00	; 0
   1224c:	ed b7       	in	r30, 0x3d	; 61
   1224e:	fe b7       	in	r31, 0x3e	; 62
   12250:	81 83       	std	Z+1, r24	; 0x01
   12252:	92 83       	std	Z+2, r25	; 0x02
   12254:	a3 83       	std	Z+3, r26	; 0x03
   12256:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
///@brief add a line break if we both Untalk and Unlisten
            if(lastcmd == UNT)
   1225a:	80 91 f0 1c 	lds	r24, 0x1CF0	; 0x801cf0 <lastcmd>
   1225e:	90 91 f1 1c 	lds	r25, 0x1CF1	; 0x801cf1 <lastcmd+0x1>
   12262:	8f 35       	cpi	r24, 0x5F	; 95
   12264:	91 05       	cpc	r25, r1
   12266:	09 f0       	breq	.+2      	; 0x1226a <GPIB_LISTEN+0x4e>
   12268:	62 c0       	rjmp	.+196    	; 0x1232e <GPIB_LISTEN+0x112>
                printf("\n");
   1226a:	84 e3       	ldi	r24, 0x34	; 52
   1226c:	93 e1       	ldi	r25, 0x13	; 19
   1226e:	a0 e0       	ldi	r26, 0x00	; 0
   12270:	ed b7       	in	r30, 0x3d	; 61
   12272:	fe b7       	in	r31, 0x3e	; 62
   12274:	81 83       	std	Z+1, r24	; 0x01
   12276:	92 83       	std	Z+2, r25	; 0x02
   12278:	a3 83       	std	Z+3, r26	; 0x03
   1227a:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   1227e:	57 c0       	rjmp	.+174    	; 0x1232e <GPIB_LISTEN+0x112>
#endif
        return(0);
    }

#ifdef AMIGO
    if(AMIGO_is_MLA(ch))
   12280:	d0 e0       	ldi	r29, 0x00	; 0
   12282:	ce 01       	movw	r24, r28
   12284:	97 db       	rcall	.-2258   	; 0x119b4 <AMIGO_is_MLA>
   12286:	89 2b       	or	r24, r25
   12288:	81 f0       	breq	.+32     	; 0x122aa <GPIB_LISTEN+0x8e>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   1228a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1228e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12292:	84 72       	andi	r24, 0x24	; 36
   12294:	99 27       	eor	r25, r25
   12296:	89 2b       	or	r24, r25
   12298:	09 f4       	brne	.+2      	; 0x1229c <GPIB_LISTEN+0x80>
   1229a:	49 c0       	rjmp	.+146    	; 0x1232e <GPIB_LISTEN+0x112>
            printf("[LA %02XH AMIGO]\n", 0xff & ch);
   1229c:	ed b7       	in	r30, 0x3d	; 61
   1229e:	fe b7       	in	r31, 0x3e	; 62
   122a0:	d5 83       	std	Z+5, r29	; 0x05
   122a2:	c4 83       	std	Z+4, r28	; 0x04
   122a4:	82 e2       	ldi	r24, 0x22	; 34
   122a6:	93 e1       	ldi	r25, 0x13	; 19
#endif
        return(0);
    }
#endif                                        // #ifdef AMIGO

    if(SS80_is_MLA(ch))
   122a8:	3c c0       	rjmp	.+120    	; 0x12322 <GPIB_LISTEN+0x106>
   122aa:	ce 01       	movw	r24, r28
   122ac:	4d db       	rcall	.-2406   	; 0x11948 <SS80_is_MLA>
   122ae:	89 2b       	or	r24, r25
   122b0:	79 f0       	breq	.+30     	; 0x122d0 <GPIB_LISTEN+0xb4>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   122b2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   122b6:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   122ba:	84 72       	andi	r24, 0x24	; 36
   122bc:	99 27       	eor	r25, r25
   122be:	89 2b       	or	r24, r25
   122c0:	b1 f1       	breq	.+108    	; 0x1232e <GPIB_LISTEN+0x112>
            printf("[LA %02XH SS80]\n", 0xff & ch);
   122c2:	ed b7       	in	r30, 0x3d	; 61
   122c4:	fe b7       	in	r31, 0x3e	; 62
   122c6:	d5 83       	std	Z+5, r29	; 0x05
   122c8:	c4 83       	std	Z+4, r28	; 0x04
   122ca:	81 e1       	ldi	r24, 0x11	; 17
   122cc:	93 e1       	ldi	r25, 0x13	; 19
#endif
        return(0);
    }

    if(PRINTER_is_MLA(ch))
   122ce:	29 c0       	rjmp	.+82     	; 0x12322 <GPIB_LISTEN+0x106>
   122d0:	ce 01       	movw	r24, r28
   122d2:	a6 db       	rcall	.-2228   	; 0x11a20 <PRINTER_is_MLA>
   122d4:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   122d8:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   122dc:	89 2b       	or	r24, r25
   122de:	c9 f0       	breq	.+50     	; 0x12312 <GPIB_LISTEN+0xf6>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   122e0:	24 72       	andi	r18, 0x24	; 36
   122e2:	33 27       	eor	r19, r19
   122e4:	23 2b       	or	r18, r19
   122e6:	61 f0       	breq	.+24     	; 0x12300 <GPIB_LISTEN+0xe4>
            printf("[LA %02XH PRINTER]\n", 0xff & ch);
   122e8:	ed b7       	in	r30, 0x3d	; 61
   122ea:	fe b7       	in	r31, 0x3e	; 62
   122ec:	d5 83       	std	Z+5, r29	; 0x05
   122ee:	c4 83       	std	Z+4, r28	; 0x04
   122f0:	8d ef       	ldi	r24, 0xFD	; 253
   122f2:	92 e1       	ldi	r25, 0x12	; 18
   122f4:	a0 e0       	ldi	r26, 0x00	; 0
   122f6:	81 83       	std	Z+1, r24	; 0x01
   122f8:	92 83       	std	Z+2, r25	; 0x02
   122fa:	a3 83       	std	Z+3, r26	; 0x03
   122fc:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
#endif
        if(talking != UNT)
   12300:	80 91 f6 1e 	lds	r24, 0x1EF6	; 0x801ef6 <talking>
   12304:	8f 35       	cpi	r24, 0x5F	; 95
   12306:	99 f0       	breq	.+38     	; 0x1232e <GPIB_LISTEN+0x112>
        {
///@brief NULL creates a file named based on date and time
// FIXME use printer structure to permit multiple printers
            printer_open(NULL);
   12308:	80 e0       	ldi	r24, 0x00	; 0
   1230a:	90 e0       	ldi	r25, 0x00	; 0
   1230c:	0e 94 0c bf 	call	0x17e18	; 0x17e18 <printer_open>
   12310:	0e c0       	rjmp	.+28     	; 0x1232e <GPIB_LISTEN+0x112>
        }
        return(0);
    }
#if SDEBUG
    if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   12312:	22 ff       	sbrs	r18, 2
   12314:	0c c0       	rjmp	.+24     	; 0x1232e <GPIB_LISTEN+0x112>
        printf("[LA %02XH]\n", 0xff & ch);
   12316:	ed b7       	in	r30, 0x3d	; 61
   12318:	fe b7       	in	r31, 0x3e	; 62
   1231a:	d5 83       	std	Z+5, r29	; 0x05
   1231c:	c4 83       	std	Z+4, r28	; 0x04
   1231e:	81 ef       	ldi	r24, 0xF1	; 241
   12320:	92 e1       	ldi	r25, 0x12	; 18
   12322:	a0 e0       	ldi	r26, 0x00	; 0
   12324:	81 83       	std	Z+1, r24	; 0x01
   12326:	92 83       	std	Z+2, r25	; 0x02
   12328:	a3 83       	std	Z+3, r26	; 0x03
   1232a:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
#endif
    return(0);
}                                                 // Listen Primary Address group
   1232e:	80 e0       	ldi	r24, 0x00	; 0
   12330:	90 e0       	ldi	r25, 0x00	; 0
   12332:	cd b7       	in	r28, 0x3d	; 61
   12334:	de b7       	in	r29, 0x3e	; 62
   12336:	25 96       	adiw	r28, 0x05	; 5
   12338:	e2 e0       	ldi	r30, 0x02	; 2
   1233a:	0c 94 2b e7 	jmp	0x1ce56	; 0x1ce56 <__epilogue_restores__+0x20>

0001233e <gpib_task>:
/// - Reads and processes GPIB control or data bytes
/// and calls emulator task.
/// @return  void

void gpib_task(void)
{
   1233e:	cf 93       	push	r28
   12340:	df 93       	push	r29
    uint16_t val;
    uint8_t ch;
    uint16_t status;

    gpib_init_devices();                          // Init devices
   12342:	92 db       	rcall	.-2268   	; 0x11a68 <gpib_init_devices>
	// gpib_state_init() is now done in gpib_init_devices
    // gpib_state_init();                            // Init PPR talking and listening states

    gpib_log_fp = NULL;
   12344:	10 92 69 19 	sts	0x1969, r1	; 0x801969 <gpib_log_fp+0x1>
   12348:	10 92 68 19 	sts	0x1968, r1	; 0x801968 <gpib_log_fp>

    while(1)
    {


        val = gpib_read_byte(NO_TRACE);
   1234c:	80 e0       	ldi	r24, 0x00	; 0
   1234e:	90 e0       	ldi	r25, 0x00	; 0
   12350:	4f d8       	rcall	.-3938   	; 0x113f0 <gpib_read_byte>
   12352:	ec 01       	movw	r28, r24

#if SDEBUG
        if(debuglevel & GPIB_TOP_LEVEL_BUS_DECODE)
   12354:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   12358:	83 ff       	sbrs	r24, 3
            gpib_decode(val);
   1235a:	02 c0       	rjmp	.+4      	; 0x12360 <gpib_task+0x22>
   1235c:	ce 01       	movw	r24, r28
   1235e:	4e d9       	rcall	.-3428   	; 0x115fc <gpib_decode>
#endif
        status = gpib_error_test(val);
   12360:	ce 01       	movw	r24, r28
   12362:	1d dc       	rcall	.-1990   	; 0x11b9e <gpib_error_test>
        if(status & ABORT_FLAG)
        {
            return;
        }
        else if(status & MEDIA_FLAG)
   12364:	9c 01       	movw	r18, r24
   12366:	23 70       	andi	r18, 0x03	; 3
   12368:	33 27       	eor	r19, r19
   1236a:	23 2b       	or	r18, r19
   1236c:	09 f0       	breq	.+2      	; 0x12370 <gpib_task+0x32>
   1236e:	43 c0       	rjmp	.+134    	; 0x123f6 <gpib_task+0xb8>
        {
            return;
        }
        else if(status)
   12370:	89 2b       	or	r24, r25
   12372:	61 f7       	brne	.-40     	; 0x1234c <gpib_task+0xe>
        {
            continue;
        }
///@brief GPIB commands with ATN set (COMMANDS)
        if(val & ATN_FLAG)
   12374:	d2 ff       	sbrs	r29, 2
   12376:	26 c0       	rjmp	.+76     	; 0x123c4 <gpib_task+0x86>
        {
            ch = val & CMD_MASK;
   12378:	8c 2f       	mov	r24, r28
   1237a:	8f 77       	andi	r24, 0x7F	; 127
            if(ch <= 0x1f)
   1237c:	80 32       	cpi	r24, 0x20	; 32
            {
                GPIB(ch);
   1237e:	10 f4       	brcc	.+4      	; 0x12384 <gpib_task+0x46>
   12380:	52 dd       	rcall	.-1372   	; 0x11e26 <GPIB>
                continue;
   12382:	e4 cf       	rjmp	.-56     	; 0x1234c <gpib_task+0xe>
            }
///@brief GPIB listen
            if(ch >= 0x20 && ch <= 0x3f)
   12384:	90 ee       	ldi	r25, 0xE0	; 224
   12386:	98 0f       	add	r25, r24
   12388:	90 32       	cpi	r25, 0x20	; 32
            {
                GPIB_LISTEN(ch);
   1238a:	10 f4       	brcc	.+4      	; 0x12390 <gpib_task+0x52>
   1238c:	47 df       	rcall	.-370    	; 0x1221c <GPIB_LISTEN>
                continue;
   1238e:	de cf       	rjmp	.-68     	; 0x1234c <gpib_task+0xe>
            }
///@brief GPIB talk
            if(ch >= 0x40 && ch <= 0x5f)
   12390:	90 ec       	ldi	r25, 0xC0	; 192
   12392:	98 0f       	add	r25, r24
   12394:	90 32       	cpi	r25, 0x20	; 32
            {
                GPIB_TALK(ch);
   12396:	10 f4       	brcc	.+4      	; 0x1239c <gpib_task+0x5e>
   12398:	08 de       	rcall	.-1008   	; 0x11faa <GPIB_TALK>
                continue;
   1239a:	d8 cf       	rjmp	.-80     	; 0x1234c <gpib_task+0xe>
            }

///@brief GPIB secondary
/// Note: We know ch >= 0x60 && ch <= 0x7f because of previous tests

            if( listening && lastcmd == UNT)
   1239c:	90 91 f8 1e 	lds	r25, 0x1EF8	; 0x801ef8 <listening>
   123a0:	99 23       	and	r25, r25
   123a2:	59 f0       	breq	.+22     	; 0x123ba <gpib_task+0x7c>
   123a4:	20 91 f0 1c 	lds	r18, 0x1CF0	; 0x801cf0 <lastcmd>
   123a8:	30 91 f1 1c 	lds	r19, 0x1CF1	; 0x801cf1 <lastcmd+0x1>
   123ac:	2f 35       	cpi	r18, 0x5F	; 95
   123ae:	31 05       	cpc	r19, r1
            {
                secondary = 0;
   123b0:	21 f4       	brne	.+8      	; 0x123ba <gpib_task+0x7c>
   123b2:	10 92 f7 1e 	sts	0x1EF7, r1	; 0x801ef7 <secondary>
                GPIB_SECONDARY_ADDRESS(ch);
   123b6:	91 de       	rcall	.-734    	; 0x120da <GPIB_SECONDARY_ADDRESS>
                continue;
   123b8:	c9 cf       	rjmp	.-110    	; 0x1234c <gpib_task+0xe>
            }

///@brief We have to keep track of secondary address that may happen out of order with older AMIGO protocol
/// this method works for SS80 as well
            secondary = ch;
   123ba:	80 93 f7 1e 	sts	0x1EF7, r24	; 0x801ef7 <secondary>
///@brief GPIB_COMMANDS does most of the work
            status = GPIB_COMMANDS(secondary,0);
   123be:	60 e0       	ldi	r22, 0x00	; 0
   123c0:	90 e0       	ldi	r25, 0x00	; 0
        }                                         // GPIB ATN

///@brief GPIB commands without ATN set (DATA)
        else                                      // GPIB Data
        {
            if ( PRINTER_is_MLA(listening) )
   123c2:	12 c0       	rjmp	.+36     	; 0x123e8 <gpib_task+0xaa>
   123c4:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   123c8:	90 e0       	ldi	r25, 0x00	; 0
   123ca:	2a db       	rcall	.-2476   	; 0x11a20 <PRINTER_is_MLA>
   123cc:	89 2b       	or	r24, r25
   123ce:	29 f0       	breq	.+10     	; 0x123da <gpib_task+0x9c>
            {
                printer_buffer( 0xff & val );
   123d0:	ce 01       	movw	r24, r28
   123d2:	99 27       	eor	r25, r25
   123d4:	0e 94 af bf 	call	0x17f5e	; 0x17f5e <printer_buffer>
                continue;
   123d8:	b9 cf       	rjmp	.-142    	; 0x1234c <gpib_task+0xe>
            }

            if(!secondary)
   123da:	80 91 f7 1e 	lds	r24, 0x1EF7	; 0x801ef7 <secondary>
   123de:	88 23       	and	r24, r24
                continue;

// ONLY secondar commands at this point
///@brief GPIB_COMMANDS does most of the work
            status = GPIB_COMMANDS(val,1);
   123e0:	09 f4       	brne	.+2      	; 0x123e4 <gpib_task+0xa6>
   123e2:	b4 cf       	rjmp	.-152    	; 0x1234c <gpib_task+0xe>
   123e4:	61 e0       	ldi	r22, 0x01	; 1
   123e6:	ce 01       	movw	r24, r28
            status = gpib_error_test(status);
   123e8:	67 dc       	rcall	.-1842   	; 0x11cb8 <GPIB_COMMANDS>
   123ea:	d9 db       	rcall	.-2126   	; 0x11b9e <gpib_error_test>

            if(status & ( ABORT_FLAG | MEDIA_FLAG ))
   123ec:	83 70       	andi	r24, 0x03	; 3
   123ee:	99 27       	eor	r25, r25
   123f0:	89 2b       	or	r24, r25
   123f2:	09 f4       	brne	.+2      	; 0x123f6 <gpib_task+0xb8>
   123f4:	ab cf       	rjmp	.-170    	; 0x1234c <gpib_task+0xe>
            }
            continue;
        }
    }                                             // while(1)
    return;
}
   123f6:	df 91       	pop	r29
   123f8:	cf 91       	pop	r28
   123fa:	08 95       	ret

000123fc <talk_cleanup>:
/// - Not used in this emulator.
///
/// @return  void

void talk_cleanup()
{
   123fc:	08 95       	ret

000123fe <gpib_help>:
/// @brief
///  Help Menu for User invoked GPIB functions and tasks
///  See: int gpib_tests(char *str)
/// @return  void
void gpib_help(int full)
{
   123fe:	cf 93       	push	r28
   12400:	df 93       	push	r29
   12402:	00 d0       	rcall	.+0      	; 0x12404 <gpib_help+0x6>
   12404:	1f 92       	push	r1
   12406:	ec 01       	movw	r28, r24
    printf("gpib     help\n");
   12408:	86 ec       	ldi	r24, 0xC6	; 198
   1240a:	96 e1       	ldi	r25, 0x16	; 22
   1240c:	a0 e0       	ldi	r26, 0x00	; 0
   1240e:	ed b7       	in	r30, 0x3d	; 61
   12410:	fe b7       	in	r31, 0x3e	; 62
   12412:	81 83       	std	Z+1, r24	; 0x01
   12414:	92 83       	std	Z+2, r25	; 0x02
   12416:	a3 83       	std	Z+3, r26	; 0x03
   12418:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    if(full)
   1241c:	cd 2b       	or	r28, r29
   1241e:	51 f0       	breq	.+20     	; 0x12434 <gpib_help+0x36>
    {
        printf("Note: gpib prefix is optional\n"
   12420:	8e ef       	ldi	r24, 0xFE	; 254
   12422:	94 e1       	ldi	r25, 0x14	; 20
   12424:	a0 e0       	ldi	r26, 0x00	; 0
   12426:	ed b7       	in	r30, 0x3d	; 61
   12428:	fe b7       	in	r31, 0x3e	; 62
   1242a:	81 83       	std	Z+1, r24	; 0x01
   1242c:	92 83       	std	Z+2, r25	; 0x02
   1242e:	a3 83       	std	Z+3, r26	; 0x03
   12430:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
            "gpib ppr_set XX\n"
            "\n"
#endif
            );
	}
}
   12434:	cd b7       	in	r28, 0x3d	; 61
   12436:	de b7       	in	r29, 0x3e	; 62
   12438:	23 96       	adiw	r28, 0x03	; 3
   1243a:	e2 e0       	ldi	r30, 0x02	; 2
   1243c:	0c 94 2b e7 	jmp	0x1ce56	; 0x1ce56 <__epilogue_restores__+0x20>

00012440 <gpib_tests>:

/// @brief GPIB user tests
///  User invoked GPIB functions and tasks
/// @return  1 matched token, 0 if not
int gpib_tests(int argc, char * argv[])
{
   12440:	a5 e0       	ldi	r26, 0x05	; 5
   12442:	b0 e0       	ldi	r27, 0x00	; 0
   12444:	e6 e2       	ldi	r30, 0x26	; 38
   12446:	f2 e9       	ldi	r31, 0x92	; 146
   12448:	0c 94 09 e7 	jmp	0x1ce12	; 0x1ce12 <__prologue_saves__+0x14>

    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   1244c:	fb 01       	movw	r30, r22
   1244e:	00 81       	ld	r16, Z
   12450:	11 81       	ldd	r17, Z+1	; 0x01

    if(!ptr)
   12452:	01 15       	cp	r16, r1
   12454:	11 05       	cpc	r17, r1
   12456:	19 f4       	brne	.+6      	; 0x1245e <gpib_tests+0x1e>
        return(0);
   12458:	80 e0       	ldi	r24, 0x00	; 0
   1245a:	90 e0       	ldi	r25, 0x00	; 0
   1245c:	8f c0       	rjmp	.+286    	; 0x1257c <gpib_tests+0x13c>
   1245e:	7b 01       	movw	r14, r22
   12460:	6c 01       	movw	r12, r24

    if( MATCH(ptr,"gpib") )
   12462:	66 ea       	ldi	r22, 0xA6	; 166
   12464:	7d e0       	ldi	r23, 0x0D	; 13
   12466:	c8 01       	movw	r24, r16
   12468:	0e 94 69 32 	call	0x64d2	; 0x64d2 <MATCH>
   1246c:	89 2b       	or	r24, r25
   1246e:	a1 f0       	breq	.+40     	; 0x12498 <gpib_tests+0x58>
    {
        ptr = argv[ind++];
   12470:	f7 01       	movw	r30, r14
   12472:	02 81       	ldd	r16, Z+2	; 0x02
   12474:	13 81       	ldd	r17, Z+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
   12476:	01 15       	cp	r16, r1
   12478:	11 05       	cpc	r17, r1
   1247a:	21 f4       	brne	.+8      	; 0x12484 <gpib_tests+0x44>
        {
            gpib_help(1);
   1247c:	81 e0       	ldi	r24, 0x01	; 1
   1247e:	90 e0       	ldi	r25, 0x00	; 0
   12480:	be df       	rcall	.-132    	; 0x123fe <gpib_help>
   12482:	7a c0       	rjmp	.+244    	; 0x12578 <gpib_tests+0x138>
        return(0);

    if( MATCH(ptr,"gpib") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
   12484:	64 e7       	ldi	r22, 0x74	; 116
   12486:	76 e1       	ldi	r23, 0x16	; 22
   12488:	c8 01       	movw	r24, r16
   1248a:	0e 94 69 32 	call	0x64d2	; 0x64d2 <MATCH>
   1248e:	89 2b       	or	r24, r25
   12490:	a9 f7       	brne	.-22     	; 0x1247c <gpib_tests+0x3c>
    if(!ptr)
        return(0);

    if( MATCH(ptr,"gpib") )
    {
        ptr = argv[ind++];
   12492:	c2 e0       	ldi	r28, 0x02	; 2
   12494:	d0 e0       	ldi	r29, 0x00	; 0
   12496:	02 c0       	rjmp	.+4      	; 0x1249c <gpib_tests+0x5c>

    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   12498:	c1 e0       	ldi	r28, 0x01	; 1
   1249a:	d0 e0       	ldi	r29, 0x00	; 0
            gpib_help(1);
            return(1);
        }
    }

    if (MATCHI(ptr,"debug") )
   1249c:	6b ea       	ldi	r22, 0xAB	; 171
   1249e:	7d e0       	ldi	r23, 0x0D	; 13
   124a0:	c8 01       	movw	r24, r16
   124a2:	0e 94 7d 32 	call	0x64fa	; 0x64fa <MATCHI>
   124a6:	89 2b       	or	r24, r25
   124a8:	29 f1       	breq	.+74     	; 0x124f4 <gpib_tests+0xb4>
    {
        ptr = argv[ind];
   124aa:	fe 01       	movw	r30, r28
   124ac:	ee 0f       	add	r30, r30
   124ae:	ff 1f       	adc	r31, r31
   124b0:	ee 0d       	add	r30, r14
   124b2:	ff 1d       	adc	r31, r15
        if(*ptr == '=')
   124b4:	01 90       	ld	r0, Z+
   124b6:	f0 81       	ld	r31, Z
   124b8:	e0 2d       	mov	r30, r0
   124ba:	80 81       	ld	r24, Z
   124bc:	8d 33       	cpi	r24, 0x3D	; 61
   124be:	09 f4       	brne	.+2      	; 0x124c2 <gpib_tests+0x82>
            ++ind;
   124c0:	21 96       	adiw	r28, 0x01	; 1
        debuglevel = get_value(argv[ind]);
   124c2:	cc 0f       	add	r28, r28
   124c4:	dd 1f       	adc	r29, r29
   124c6:	ce 0d       	add	r28, r14
   124c8:	df 1d       	adc	r29, r15
   124ca:	88 81       	ld	r24, Y
   124cc:	99 81       	ldd	r25, Y+1	; 0x01
   124ce:	0e 94 74 33 	call	0x66e8	; 0x66e8 <get_value>
   124d2:	70 93 b7 01 	sts	0x01B7, r23	; 0x8001b7 <debuglevel+0x1>
   124d6:	60 93 b6 01 	sts	0x01B6, r22	; 0x8001b6 <debuglevel>
        printf("debug=%04XH\n", debuglevel);
   124da:	ed b7       	in	r30, 0x3d	; 61
   124dc:	fe b7       	in	r31, 0x3e	; 62
   124de:	75 83       	std	Z+5, r23	; 0x05
   124e0:	64 83       	std	Z+4, r22	; 0x04
   124e2:	81 ef       	ldi	r24, 0xF1	; 241
   124e4:	94 e1       	ldi	r25, 0x14	; 20
   124e6:	a0 e0       	ldi	r26, 0x00	; 0
   124e8:	81 83       	std	Z+1, r24	; 0x01
   124ea:	92 83       	std	Z+2, r25	; 0x02
   124ec:	a3 83       	std	Z+3, r26	; 0x03
   124ee:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   124f2:	42 c0       	rjmp	.+132    	; 0x12578 <gpib_tests+0x138>
        return(1);
    }

    if (MATCHI(ptr,"elapsed_reset") )
   124f4:	61 eb       	ldi	r22, 0xB1	; 177
   124f6:	7d e0       	ldi	r23, 0x0D	; 13
   124f8:	c8 01       	movw	r24, r16
   124fa:	0e 94 7d 32 	call	0x64fa	; 0x64fa <MATCHI>
   124fe:	89 2b       	or	r24, r25
   12500:	19 f0       	breq	.+6      	; 0x12508 <gpib_tests+0xc8>
    {
        gpib_timer_elapsed_begin();
   12502:	0e 94 9a 85 	call	0x10b34	; 0x10b34 <gpib_timer_elapsed_begin>
   12506:	38 c0       	rjmp	.+112    	; 0x12578 <gpib_tests+0x138>
        return(1);
    }

    if (MATCHI(ptr,"elapsed") )
   12508:	6f eb       	ldi	r22, 0xBF	; 191
   1250a:	7d e0       	ldi	r23, 0x0D	; 13
   1250c:	c8 01       	movw	r24, r16
   1250e:	0e 94 7d 32 	call	0x64fa	; 0x64fa <MATCHI>
   12512:	89 2b       	or	r24, r25
   12514:	29 f0       	breq	.+10     	; 0x12520 <gpib_tests+0xe0>
    {
        gpib_timer_elapsed_end("gpib elapsed:");
   12516:	87 ec       	ldi	r24, 0xC7	; 199
   12518:	9d e0       	ldi	r25, 0x0D	; 13
   1251a:	0e 94 ac 85 	call	0x10b58	; 0x10b58 <gpib_timer_elapsed_end>
   1251e:	2c c0       	rjmp	.+88     	; 0x12578 <gpib_tests+0x138>
        return(1);
    }

    if (MATCHI(ptr,"task") )
   12520:	65 ed       	ldi	r22, 0xD5	; 213
   12522:	7d e0       	ldi	r23, 0x0D	; 13
   12524:	c8 01       	movw	r24, r16
   12526:	0e 94 7d 32 	call	0x64fa	; 0x64fa <MATCHI>
   1252a:	89 2b       	or	r24, r25
    {
        gpib_task();
   1252c:	11 f0       	breq	.+4      	; 0x12532 <gpib_tests+0xf2>
   1252e:	07 df       	rcall	.-498    	; 0x1233e <gpib_task>
   12530:	23 c0       	rjmp	.+70     	; 0x12578 <gpib_tests+0x138>
        return(1);
    }

    if (MATCHARGS(ptr,"trace", (ind+1) ,argc))
   12532:	21 96       	adiw	r28, 0x01	; 1
   12534:	96 01       	movw	r18, r12
   12536:	ae 01       	movw	r20, r28
   12538:	6a ed       	ldi	r22, 0xDA	; 218
   1253a:	7d e0       	ldi	r23, 0x0D	; 13
   1253c:	c8 01       	movw	r24, r16
   1253e:	0e 94 91 32 	call	0x6522	; 0x6522 <MATCHARGS>
   12542:	89 2b       	or	r24, r25
   12544:	09 f4       	brne	.+2      	; 0x12548 <gpib_tests+0x108>
   12546:	88 cf       	rjmp	.-240    	; 0x12458 <gpib_tests+0x18>
    {
        int detail = 0;
        if(argv[ind+1] && MATCH(argv[ind+1],"BUS"))
   12548:	cc 0f       	add	r28, r28
   1254a:	dd 1f       	adc	r29, r29
   1254c:	ce 0d       	add	r28, r14
   1254e:	df 1d       	adc	r29, r15
   12550:	88 81       	ld	r24, Y
   12552:	99 81       	ldd	r25, Y+1	; 0x01
   12554:	00 97       	sbiw	r24, 0x00	; 0
   12556:	51 f0       	breq	.+20     	; 0x1256c <gpib_tests+0x12c>
   12558:	60 ee       	ldi	r22, 0xE0	; 224
   1255a:	7d e0       	ldi	r23, 0x0D	; 13
   1255c:	0e 94 69 32 	call	0x64d2	; 0x64d2 <MATCH>
        return(1);
    }

    if (MATCHARGS(ptr,"trace", (ind+1) ,argc))
    {
        int detail = 0;
   12560:	61 e0       	ldi	r22, 0x01	; 1
   12562:	70 e0       	ldi	r23, 0x00	; 0
   12564:	89 2b       	or	r24, r25
   12566:	21 f4       	brne	.+8      	; 0x12570 <gpib_tests+0x130>
   12568:	60 e0       	ldi	r22, 0x00	; 0
   1256a:	02 c0       	rjmp	.+4      	; 0x12570 <gpib_tests+0x130>
   1256c:	60 e0       	ldi	r22, 0x00	; 0
   1256e:	70 e0       	ldi	r23, 0x00	; 0
        if(argv[ind+1] && MATCH(argv[ind+1],"BUS"))
            detail = 1;
        gpib_trace_task(argv[ind], detail);
   12570:	22 97       	sbiw	r28, 0x02	; 2
   12572:	88 81       	ld	r24, Y
   12574:	99 81       	ldd	r25, Y+1	; 0x01
   12576:	81 da       	rcall	.-2814   	; 0x11a7a <gpib_trace_task>
        return(1);
   12578:	81 e0       	ldi	r24, 0x01	; 1
   1257a:	90 e0       	ldi	r25, 0x00	; 0

    }                                             // port write
#endif                                        // #ifdef GPIB_EXTENDED_TESTS

    return(0);
}
   1257c:	cd b7       	in	r28, 0x3d	; 61
   1257e:	de b7       	in	r29, 0x3e	; 62
   12580:	25 96       	adiw	r28, 0x05	; 5
   12582:	e8 e0       	ldi	r30, 0x08	; 8
   12584:	0c 94 25 e7 	jmp	0x1ce4a	; 0x1ce4a <__epilogue_restores__+0x14>

00012588 <tok_index>:

	if(index_ppr(ppr) == -1)
		return(1);
	printf("WARNING PPR (%d) already in use\n", (int)ppr);
	return(0);
}
   12588:	0f 93       	push	r16
   1258a:	1f 93       	push	r17
   1258c:	cf 93       	push	r28
   1258e:	8c 01       	movw	r16, r24
   12590:	c0 e0       	ldi	r28, 0x00	; 0
   12592:	24 e0       	ldi	r18, 0x04	; 4
   12594:	c2 02       	muls	r28, r18
   12596:	f0 01       	movw	r30, r0
   12598:	11 24       	eor	r1, r1
   1259a:	ec 53       	subi	r30, 0x3C	; 60
   1259c:	fe 4f       	sbci	r31, 0xFE	; 254
   1259e:	82 81       	ldd	r24, Z+2	; 0x02
   125a0:	93 81       	ldd	r25, Z+3	; 0x03
   125a2:	01 96       	adiw	r24, 0x01	; 1
   125a4:	49 f0       	breq	.+18     	; 0x125b8 <tok_index+0x30>
   125a6:	60 81       	ld	r22, Z
   125a8:	71 81       	ldd	r23, Z+1	; 0x01
   125aa:	c8 01       	movw	r24, r16
   125ac:	0e 94 7d 32 	call	0x64fa	; 0x64fa <MATCHI>
   125b0:	89 2b       	or	r24, r25
   125b2:	21 f4       	brne	.+8      	; 0x125bc <tok_index+0x34>
   125b4:	cf 5f       	subi	r28, 0xFF	; 255
   125b6:	ed cf       	rjmp	.-38     	; 0x12592 <tok_index+0xa>
   125b8:	8f ef       	ldi	r24, 0xFF	; 255
   125ba:	01 c0       	rjmp	.+2      	; 0x125be <tok_index+0x36>
   125bc:	8c 2f       	mov	r24, r28
   125be:	cf 91       	pop	r28
   125c0:	1f 91       	pop	r17
   125c2:	0f 91       	pop	r16
   125c4:	08 95       	ret

000125c6 <tok_name>:
   125c6:	e4 ec       	ldi	r30, 0xC4	; 196
   125c8:	f1 e0       	ldi	r31, 0x01	; 1
   125ca:	20 e0       	ldi	r18, 0x00	; 0
   125cc:	30 e0       	ldi	r19, 0x00	; 0
   125ce:	90 e0       	ldi	r25, 0x00	; 0
   125d0:	42 81       	ldd	r20, Z+2	; 0x02
   125d2:	53 81       	ldd	r21, Z+3	; 0x03
   125d4:	4f 3f       	cpi	r20, 0xFF	; 255
   125d6:	6f ef       	ldi	r22, 0xFF	; 255
   125d8:	56 07       	cpc	r21, r22
   125da:	89 f0       	breq	.+34     	; 0x125fe <tok_name+0x38>
   125dc:	34 96       	adiw	r30, 0x04	; 4
   125de:	48 17       	cp	r20, r24
   125e0:	59 07       	cpc	r21, r25
   125e2:	51 f4       	brne	.+20     	; 0x125f8 <tok_name+0x32>
   125e4:	22 0f       	add	r18, r18
   125e6:	33 1f       	adc	r19, r19
   125e8:	22 0f       	add	r18, r18
   125ea:	33 1f       	adc	r19, r19
   125ec:	f9 01       	movw	r30, r18
   125ee:	ec 53       	subi	r30, 0x3C	; 60
   125f0:	fe 4f       	sbci	r31, 0xFE	; 254
   125f2:	80 81       	ld	r24, Z
   125f4:	91 81       	ldd	r25, Z+1	; 0x01
   125f6:	08 95       	ret
   125f8:	2f 5f       	subi	r18, 0xFF	; 255
   125fa:	3f 4f       	sbci	r19, 0xFF	; 255
   125fc:	e9 cf       	rjmp	.-46     	; 0x125d0 <tok_name+0xa>
   125fe:	80 e2       	ldi	r24, 0x20	; 32
   12600:	9c e0       	ldi	r25, 0x0C	; 12
   12602:	08 95       	ret

00012604 <print_tok_val>:
   12604:	cf 92       	push	r12
   12606:	df 92       	push	r13
   12608:	ef 92       	push	r14
   1260a:	ff 92       	push	r15
   1260c:	0f 93       	push	r16
   1260e:	1f 93       	push	r17
   12610:	cf 93       	push	r28
   12612:	ad b7       	in	r26, 0x3d	; 61
   12614:	be b7       	in	r27, 0x3e	; 62
   12616:	1d 97       	sbiw	r26, 0x0d	; 13
   12618:	0f b6       	in	r0, 0x3f	; 63
   1261a:	f8 94       	cli
   1261c:	be bf       	out	0x3e, r27	; 62
   1261e:	0f be       	out	0x3f, r0	; 63
   12620:	ad bf       	out	0x3d, r26	; 61
   12622:	c6 2f       	mov	r28, r22
   12624:	69 01       	movw	r12, r18
   12626:	7a 01       	movw	r14, r20
   12628:	ce df       	rcall	.-100    	; 0x125c6 <tok_name>
   1262a:	8c 01       	movw	r16, r24
   1262c:	cc 23       	and	r28, r28
   1262e:	31 f0       	breq	.+12     	; 0x1263c <print_tok_val+0x38>
   12630:	80 e2       	ldi	r24, 0x20	; 32
   12632:	90 e0       	ldi	r25, 0x00	; 0
   12634:	0e 94 84 76 	call	0xed08	; 0xed08 <putchar>
   12638:	c1 50       	subi	r28, 0x01	; 1
   1263a:	f8 cf       	rjmp	.-16     	; 0x1262c <print_tok_val+0x28>
   1263c:	ed b7       	in	r30, 0x3d	; 61
   1263e:	fe b7       	in	r31, 0x3e	; 62
   12640:	c2 86       	std	Z+10, r12	; 0x0a
   12642:	d3 86       	std	Z+11, r13	; 0x0b
   12644:	e4 86       	std	Z+12, r14	; 0x0c
   12646:	f5 86       	std	Z+13, r15	; 0x0d
   12648:	c6 82       	std	Z+6, r12	; 0x06
   1264a:	d7 82       	std	Z+7, r13	; 0x07
   1264c:	e0 86       	std	Z+8, r14	; 0x08
   1264e:	f1 86       	std	Z+9, r15	; 0x09
   12650:	15 83       	std	Z+5, r17	; 0x05
   12652:	04 83       	std	Z+4, r16	; 0x04
   12654:	88 e3       	ldi	r24, 0x38	; 56
   12656:	91 e2       	ldi	r25, 0x21	; 33
   12658:	a0 e0       	ldi	r26, 0x00	; 0
   1265a:	81 83       	std	Z+1, r24	; 0x01
   1265c:	92 83       	std	Z+2, r25	; 0x02
   1265e:	a3 83       	std	Z+3, r26	; 0x03
   12660:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   12664:	ad b7       	in	r26, 0x3d	; 61
   12666:	be b7       	in	r27, 0x3e	; 62
   12668:	1d 96       	adiw	r26, 0x0d	; 13
   1266a:	0f b6       	in	r0, 0x3f	; 63
   1266c:	f8 94       	cli
   1266e:	be bf       	out	0x3e, r27	; 62
   12670:	0f be       	out	0x3f, r0	; 63
   12672:	ad bf       	out	0x3d, r26	; 61
   12674:	cf 91       	pop	r28
   12676:	1f 91       	pop	r17
   12678:	0f 91       	pop	r16
   1267a:	ff 90       	pop	r15
   1267c:	ef 90       	pop	r14
   1267e:	df 90       	pop	r13
   12680:	cf 90       	pop	r12
   12682:	08 95       	ret

00012684 <print_tok_str>:
   12684:	ef 92       	push	r14
   12686:	ff 92       	push	r15
   12688:	0f 93       	push	r16
   1268a:	1f 93       	push	r17
   1268c:	cf 93       	push	r28
   1268e:	ad b7       	in	r26, 0x3d	; 61
   12690:	be b7       	in	r27, 0x3e	; 62
   12692:	17 97       	sbiw	r26, 0x07	; 7
   12694:	0f b6       	in	r0, 0x3f	; 63
   12696:	f8 94       	cli
   12698:	be bf       	out	0x3e, r27	; 62
   1269a:	0f be       	out	0x3f, r0	; 63
   1269c:	ad bf       	out	0x3d, r26	; 61
   1269e:	c6 2f       	mov	r28, r22
   126a0:	7a 01       	movw	r14, r20
   126a2:	91 df       	rcall	.-222    	; 0x125c6 <tok_name>
   126a4:	8c 01       	movw	r16, r24
   126a6:	cc 23       	and	r28, r28
   126a8:	31 f0       	breq	.+12     	; 0x126b6 <print_tok_str+0x32>
   126aa:	80 e2       	ldi	r24, 0x20	; 32
   126ac:	90 e0       	ldi	r25, 0x00	; 0
   126ae:	0e 94 84 76 	call	0xed08	; 0xed08 <putchar>
   126b2:	c1 50       	subi	r28, 0x01	; 1
   126b4:	f8 cf       	rjmp	.-16     	; 0x126a6 <print_tok_str+0x22>
   126b6:	ed b7       	in	r30, 0x3d	; 61
   126b8:	fe b7       	in	r31, 0x3e	; 62
   126ba:	f7 82       	std	Z+7, r15	; 0x07
   126bc:	e6 82       	std	Z+6, r14	; 0x06
   126be:	15 83       	std	Z+5, r17	; 0x05
   126c0:	04 83       	std	Z+4, r16	; 0x04
   126c2:	8c e2       	ldi	r24, 0x2C	; 44
   126c4:	91 e2       	ldi	r25, 0x21	; 33
   126c6:	a0 e0       	ldi	r26, 0x00	; 0
   126c8:	81 83       	std	Z+1, r24	; 0x01
   126ca:	92 83       	std	Z+2, r25	; 0x02
   126cc:	a3 83       	std	Z+3, r26	; 0x03
   126ce:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   126d2:	ad b7       	in	r26, 0x3d	; 61
   126d4:	be b7       	in	r27, 0x3e	; 62
   126d6:	17 96       	adiw	r26, 0x07	; 7
   126d8:	0f b6       	in	r0, 0x3f	; 63
   126da:	f8 94       	cli
   126dc:	be bf       	out	0x3e, r27	; 62
   126de:	0f be       	out	0x3f, r0	; 63
   126e0:	ad bf       	out	0x3d, r26	; 61
   126e2:	cf 91       	pop	r28
   126e4:	1f 91       	pop	r17
   126e6:	0f 91       	pop	r16
   126e8:	ff 90       	pop	r15
   126ea:	ef 90       	pop	r14
   126ec:	08 95       	ret

000126ee <print_tok>:
   126ee:	0f 93       	push	r16
   126f0:	1f 93       	push	r17
   126f2:	cf 93       	push	r28
   126f4:	00 d0       	rcall	.+0      	; 0x126f6 <print_tok+0x8>
   126f6:	00 d0       	rcall	.+0      	; 0x126f8 <print_tok+0xa>
   126f8:	1f 92       	push	r1
   126fa:	c6 2f       	mov	r28, r22
   126fc:	64 df       	rcall	.-312    	; 0x125c6 <tok_name>
   126fe:	8c 01       	movw	r16, r24
   12700:	cc 23       	and	r28, r28
   12702:	31 f0       	breq	.+12     	; 0x12710 <print_tok+0x22>
   12704:	80 e2       	ldi	r24, 0x20	; 32
   12706:	90 e0       	ldi	r25, 0x00	; 0
   12708:	0e 94 84 76 	call	0xed08	; 0xed08 <putchar>
   1270c:	c1 50       	subi	r28, 0x01	; 1
   1270e:	f8 cf       	rjmp	.-16     	; 0x12700 <print_tok+0x12>
   12710:	ed b7       	in	r30, 0x3d	; 61
   12712:	fe b7       	in	r31, 0x3e	; 62
   12714:	15 83       	std	Z+5, r17	; 0x05
   12716:	04 83       	std	Z+4, r16	; 0x04
   12718:	88 e2       	ldi	r24, 0x28	; 40
   1271a:	91 e2       	ldi	r25, 0x21	; 33
   1271c:	a0 e0       	ldi	r26, 0x00	; 0
   1271e:	81 83       	std	Z+1, r24	; 0x01
   12720:	92 83       	std	Z+2, r25	; 0x02
   12722:	a3 83       	std	Z+3, r26	; 0x03
   12724:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   12728:	0f 90       	pop	r0
   1272a:	0f 90       	pop	r0
   1272c:	0f 90       	pop	r0
   1272e:	0f 90       	pop	r0
   12730:	0f 90       	pop	r0
   12732:	cf 91       	pop	r28
   12734:	1f 91       	pop	r17
   12736:	0f 91       	pop	r16
   12738:	08 95       	ret

0001273a <display_Addresses>:
   1273a:	2f 92       	push	r2
   1273c:	3f 92       	push	r3
   1273e:	4f 92       	push	r4
   12740:	6f 92       	push	r6
   12742:	7f 92       	push	r7
   12744:	8f 92       	push	r8
   12746:	cf 92       	push	r12
   12748:	df 92       	push	r13
   1274a:	ef 92       	push	r14
   1274c:	0f 93       	push	r16
   1274e:	1f 93       	push	r17
   12750:	cf 93       	push	r28
   12752:	df 93       	push	r29
   12754:	cd b7       	in	r28, 0x3d	; 61
   12756:	de b7       	in	r29, 0x3e	; 62
   12758:	2a 97       	sbiw	r28, 0x0a	; 10
   1275a:	0f b6       	in	r0, 0x3f	; 63
   1275c:	f8 94       	cli
   1275e:	de bf       	out	0x3e, r29	; 62
   12760:	0f be       	out	0x3f, r0	; 63
   12762:	cd bf       	out	0x3d, r28	; 61
   12764:	82 ef       	ldi	r24, 0xF2	; 242
   12766:	9d e1       	ldi	r25, 0x1D	; 29
   12768:	a0 e0       	ldi	r26, 0x00	; 0
   1276a:	ed b7       	in	r30, 0x3d	; 61
   1276c:	fe b7       	in	r31, 0x3e	; 62
   1276e:	81 83       	std	Z+1, r24	; 0x01
   12770:	92 83       	std	Z+2, r25	; 0x02
   12772:	a3 83       	std	Z+3, r26	; 0x03
   12774:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   12778:	0c ef       	ldi	r16, 0xFC	; 252
   1277a:	1e e1       	ldi	r17, 0x1E	; 30
   1277c:	84 ed       	ldi	r24, 0xD4	; 212
   1277e:	9d e1       	ldi	r25, 0x1D	; 29
   12780:	6c 01       	movw	r12, r24
   12782:	e1 2c       	mov	r14, r1
   12784:	86 ed       	ldi	r24, 0xD6	; 214
   12786:	9d e1       	ldi	r25, 0x1D	; 29
   12788:	3c 01       	movw	r6, r24
   1278a:	81 2c       	mov	r8, r1
   1278c:	8f ed       	ldi	r24, 0xDF	; 223
   1278e:	9d e1       	ldi	r25, 0x1D	; 29
   12790:	1c 01       	movw	r2, r24
   12792:	41 2c       	mov	r4, r1
   12794:	89 ee       	ldi	r24, 0xE9	; 233
   12796:	9d e1       	ldi	r25, 0x1D	; 29
   12798:	9c 01       	movw	r18, r24
   1279a:	40 e0       	ldi	r20, 0x00	; 0
   1279c:	2e 83       	std	Y+6, r18	; 0x06
   1279e:	3f 83       	std	Y+7, r19	; 0x07
   127a0:	48 87       	std	Y+8, r20	; 0x08
   127a2:	f8 01       	movw	r30, r16
   127a4:	80 81       	ld	r24, Z
   127a6:	88 23       	and	r24, r24
   127a8:	09 f4       	brne	.+2      	; 0x127ac <display_Addresses+0x72>
   127aa:	76 c0       	rjmp	.+236    	; 0x12898 <display_Addresses+0x15e>
   127ac:	83 30       	cpi	r24, 0x03	; 3
   127ae:	21 f0       	breq	.+8      	; 0x127b8 <display_Addresses+0x7e>
   127b0:	81 30       	cpi	r24, 0x01	; 1
   127b2:	09 f0       	breq	.+2      	; 0x127b6 <display_Addresses+0x7c>
   127b4:	57 c0       	rjmp	.+174    	; 0x12864 <display_Addresses+0x12a>
   127b6:	1f c0       	rjmp	.+62     	; 0x127f6 <display_Addresses+0xbc>
   127b8:	f8 01       	movw	r30, r16
   127ba:	87 81       	ldd	r24, Z+7	; 0x07
   127bc:	90 85       	ldd	r25, Z+8	; 0x08
   127be:	90 93 71 19 	sts	0x1971, r25	; 0x801971 <SS80p+0x1>
   127c2:	80 93 70 19 	sts	0x1970, r24	; 0x801970 <SS80p>
   127c6:	fc 01       	movw	r30, r24
   127c8:	84 81       	ldd	r24, Z+4	; 0x04
   127ca:	95 81       	ldd	r25, Z+5	; 0x05
   127cc:	ed b7       	in	r30, 0x3d	; 61
   127ce:	fe b7       	in	r31, 0x3e	; 62
   127d0:	95 83       	std	Z+5, r25	; 0x05
   127d2:	84 83       	std	Z+4, r24	; 0x04
   127d4:	2e 81       	ldd	r18, Y+6	; 0x06
   127d6:	3f 81       	ldd	r19, Y+7	; 0x07
   127d8:	48 85       	ldd	r20, Y+8	; 0x08
   127da:	21 83       	std	Z+1, r18	; 0x01
   127dc:	32 83       	std	Z+2, r19	; 0x02
   127de:	43 83       	std	Z+3, r20	; 0x03
   127e0:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   127e4:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   127e8:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   127ec:	42 81       	ldd	r20, Z+2	; 0x02
   127ee:	53 81       	ldd	r21, Z+3	; 0x03
   127f0:	64 e0       	ldi	r22, 0x04	; 4
   127f2:	82 e1       	ldi	r24, 0x12	; 18
   127f4:	47 df       	rcall	.-370    	; 0x12684 <print_tok_str>
   127f6:	f8 01       	movw	r30, r16
   127f8:	80 81       	ld	r24, Z
   127fa:	81 30       	cpi	r24, 0x01	; 1
   127fc:	d9 f4       	brne	.+54     	; 0x12834 <display_Addresses+0xfa>
   127fe:	87 81       	ldd	r24, Z+7	; 0x07
   12800:	90 85       	ldd	r25, Z+8	; 0x08
   12802:	90 93 6d 19 	sts	0x196D, r25	; 0x80196d <AMIGOp+0x1>
   12806:	80 93 6c 19 	sts	0x196C, r24	; 0x80196c <AMIGOp>
   1280a:	fc 01       	movw	r30, r24
   1280c:	84 81       	ldd	r24, Z+4	; 0x04
   1280e:	95 81       	ldd	r25, Z+5	; 0x05
   12810:	ed b7       	in	r30, 0x3d	; 61
   12812:	fe b7       	in	r31, 0x3e	; 62
   12814:	95 83       	std	Z+5, r25	; 0x05
   12816:	84 83       	std	Z+4, r24	; 0x04
   12818:	21 82       	std	Z+1, r2	; 0x01
   1281a:	32 82       	std	Z+2, r3	; 0x02
   1281c:	43 82       	std	Z+3, r4	; 0x03
   1281e:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   12822:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   12826:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   1282a:	42 81       	ldd	r20, Z+2	; 0x02
   1282c:	53 81       	ldd	r21, Z+3	; 0x03
   1282e:	64 e0       	ldi	r22, 0x04	; 4
   12830:	82 e1       	ldi	r24, 0x12	; 18
   12832:	28 df       	rcall	.-432    	; 0x12684 <print_tok_str>
   12834:	f8 01       	movw	r30, r16
   12836:	21 81       	ldd	r18, Z+1	; 0x01
   12838:	30 e0       	ldi	r19, 0x00	; 0
   1283a:	40 e0       	ldi	r20, 0x00	; 0
   1283c:	50 e0       	ldi	r21, 0x00	; 0
   1283e:	64 e0       	ldi	r22, 0x04	; 4
   12840:	81 e0       	ldi	r24, 0x01	; 1
   12842:	e0 de       	rcall	.-576    	; 0x12604 <print_tok_val>
   12844:	f8 01       	movw	r30, r16
   12846:	22 81       	ldd	r18, Z+2	; 0x02
   12848:	30 e0       	ldi	r19, 0x00	; 0
   1284a:	40 e0       	ldi	r20, 0x00	; 0
   1284c:	50 e0       	ldi	r21, 0x00	; 0
   1284e:	64 e0       	ldi	r22, 0x04	; 4
   12850:	8f e1       	ldi	r24, 0x1F	; 31
   12852:	d8 de       	rcall	.-592    	; 0x12604 <print_tok_val>
   12854:	f8 01       	movw	r30, r16
   12856:	23 81       	ldd	r18, Z+3	; 0x03
   12858:	34 81       	ldd	r19, Z+4	; 0x04
   1285a:	45 81       	ldd	r20, Z+5	; 0x05
   1285c:	56 81       	ldd	r21, Z+6	; 0x06
   1285e:	64 e0       	ldi	r22, 0x04	; 4
   12860:	83 e0       	ldi	r24, 0x03	; 3
   12862:	d0 de       	rcall	.-608    	; 0x12604 <print_tok_val>
   12864:	f8 01       	movw	r30, r16
   12866:	80 81       	ld	r24, Z
   12868:	84 30       	cpi	r24, 0x04	; 4
   1286a:	79 f4       	brne	.+30     	; 0x1288a <display_Addresses+0x150>
   1286c:	ed b7       	in	r30, 0x3d	; 61
   1286e:	fe b7       	in	r31, 0x3e	; 62
   12870:	61 82       	std	Z+1, r6	; 0x01
   12872:	72 82       	std	Z+2, r7	; 0x02
   12874:	83 82       	std	Z+3, r8	; 0x03
   12876:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   1287a:	f8 01       	movw	r30, r16
   1287c:	21 81       	ldd	r18, Z+1	; 0x01
   1287e:	30 e0       	ldi	r19, 0x00	; 0
   12880:	40 e0       	ldi	r20, 0x00	; 0
   12882:	50 e0       	ldi	r21, 0x00	; 0
   12884:	64 e0       	ldi	r22, 0x04	; 4
   12886:	81 e0       	ldi	r24, 0x01	; 1
   12888:	bd de       	rcall	.-646    	; 0x12604 <print_tok_val>
   1288a:	ed b7       	in	r30, 0x3d	; 61
   1288c:	fe b7       	in	r31, 0x3e	; 62
   1288e:	c1 82       	std	Z+1, r12	; 0x01
   12890:	d2 82       	std	Z+2, r13	; 0x02
   12892:	e3 82       	std	Z+3, r14	; 0x03
   12894:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   12898:	05 5f       	subi	r16, 0xF5	; 245
   1289a:	1f 4f       	sbci	r17, 0xFF	; 255
   1289c:	ff e1       	ldi	r31, 0x1F	; 31
   1289e:	00 38       	cpi	r16, 0x80	; 128
   128a0:	1f 07       	cpc	r17, r31
   128a2:	09 f0       	breq	.+2      	; 0x128a6 <display_Addresses+0x16c>
   128a4:	7e cf       	rjmp	.-260    	; 0x127a2 <display_Addresses+0x68>
   128a6:	82 ed       	ldi	r24, 0xD2	; 210
   128a8:	9d e1       	ldi	r25, 0x1D	; 29
   128aa:	a0 e0       	ldi	r26, 0x00	; 0
   128ac:	ed b7       	in	r30, 0x3d	; 61
   128ae:	fe b7       	in	r31, 0x3e	; 62
   128b0:	81 83       	std	Z+1, r24	; 0x01
   128b2:	92 83       	std	Z+2, r25	; 0x02
   128b4:	a3 83       	std	Z+3, r26	; 0x03
   128b6:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   128ba:	2a 96       	adiw	r28, 0x0a	; 10
   128bc:	0f b6       	in	r0, 0x3f	; 63
   128be:	f8 94       	cli
   128c0:	de bf       	out	0x3e, r29	; 62
   128c2:	0f be       	out	0x3f, r0	; 63
   128c4:	cd bf       	out	0x3d, r28	; 61
   128c6:	df 91       	pop	r29
   128c8:	cf 91       	pop	r28
   128ca:	1f 91       	pop	r17
   128cc:	0f 91       	pop	r16
   128ce:	ef 90       	pop	r14
   128d0:	df 90       	pop	r13
   128d2:	cf 90       	pop	r12
   128d4:	8f 90       	pop	r8
   128d6:	7f 90       	pop	r7
   128d8:	6f 90       	pop	r6
   128da:	4f 90       	pop	r4
   128dc:	3f 90       	pop	r3
   128de:	2f 90       	pop	r2
   128e0:	08 95       	ret

000128e2 <display_Config>:
   128e2:	2f 92       	push	r2
   128e4:	3f 92       	push	r3
   128e6:	4f 92       	push	r4
   128e8:	6f 92       	push	r6
   128ea:	7f 92       	push	r7
   128ec:	8f 92       	push	r8
   128ee:	af 92       	push	r10
   128f0:	bf 92       	push	r11
   128f2:	cf 92       	push	r12
   128f4:	df 92       	push	r13
   128f6:	ef 92       	push	r14
   128f8:	0f 93       	push	r16
   128fa:	1f 93       	push	r17
   128fc:	cf 93       	push	r28
   128fe:	df 93       	push	r29
   12900:	cd b7       	in	r28, 0x3d	; 61
   12902:	de b7       	in	r29, 0x3e	; 62
   12904:	62 97       	sbiw	r28, 0x12	; 18
   12906:	0f b6       	in	r0, 0x3f	; 63
   12908:	f8 94       	cli
   1290a:	de bf       	out	0x3e, r29	; 62
   1290c:	0f be       	out	0x3f, r0	; 63
   1290e:	cd bf       	out	0x3d, r28	; 61
   12910:	5c 01       	movw	r10, r24
   12912:	82 eb       	ldi	r24, 0xB2	; 178
   12914:	9d e1       	ldi	r25, 0x1D	; 29
   12916:	a0 e0       	ldi	r26, 0x00	; 0
   12918:	ed b7       	in	r30, 0x3d	; 61
   1291a:	fe b7       	in	r31, 0x3e	; 62
   1291c:	81 83       	std	Z+1, r24	; 0x01
   1291e:	92 83       	std	Z+2, r25	; 0x02
   12920:	a3 83       	std	Z+3, r26	; 0x03
   12922:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   12926:	0c ef       	ldi	r16, 0xFC	; 252
   12928:	1e e1       	ldi	r17, 0x1E	; 30
   1292a:	87 e3       	ldi	r24, 0x37	; 55
   1292c:	9d e1       	ldi	r25, 0x1D	; 29
   1292e:	9c 01       	movw	r18, r24
   12930:	40 e0       	ldi	r20, 0x00	; 0
   12932:	28 87       	std	Y+8, r18	; 0x08
   12934:	39 87       	std	Y+9, r19	; 0x09
   12936:	4a 87       	std	Y+10, r20	; 0x0a
   12938:	8c e6       	ldi	r24, 0x6C	; 108
   1293a:	9d e1       	ldi	r25, 0x1D	; 29
   1293c:	6c 01       	movw	r12, r24
   1293e:	e1 2c       	mov	r14, r1
   12940:	8d e4       	ldi	r24, 0x4D	; 77
   12942:	9d e1       	ldi	r25, 0x1D	; 29
   12944:	3c 01       	movw	r6, r24
   12946:	81 2c       	mov	r8, r1
   12948:	89 e3       	ldi	r24, 0x39	; 57
   1294a:	9d e1       	ldi	r25, 0x1D	; 29
   1294c:	1c 01       	movw	r2, r24
   1294e:	41 2c       	mov	r4, r1
   12950:	89 ea       	ldi	r24, 0xA9	; 169
   12952:	9d e1       	ldi	r25, 0x1D	; 29
   12954:	9c 01       	movw	r18, r24
   12956:	40 e0       	ldi	r20, 0x00	; 0
   12958:	2b 87       	std	Y+11, r18	; 0x0b
   1295a:	3c 87       	std	Y+12, r19	; 0x0c
   1295c:	4d 87       	std	Y+13, r20	; 0x0d
   1295e:	8a e8       	ldi	r24, 0x8A	; 138
   12960:	9d e1       	ldi	r25, 0x1D	; 29
   12962:	9c 01       	movw	r18, r24
   12964:	40 e0       	ldi	r20, 0x00	; 0
   12966:	2e 87       	std	Y+14, r18	; 0x0e
   12968:	3f 87       	std	Y+15, r19	; 0x0f
   1296a:	48 8b       	std	Y+16, r20	; 0x10
   1296c:	f8 01       	movw	r30, r16
   1296e:	80 81       	ld	r24, Z
   12970:	88 23       	and	r24, r24
   12972:	09 f4       	brne	.+2      	; 0x12976 <display_Config+0x94>
   12974:	16 c2       	rjmp	.+1068   	; 0x12da2 <display_Config+0x4c0>
   12976:	83 30       	cpi	r24, 0x03	; 3
   12978:	09 f0       	breq	.+2      	; 0x1297c <display_Config+0x9a>
   1297a:	3f c1       	rjmp	.+638    	; 0x12bfa <display_Config+0x318>
   1297c:	27 81       	ldd	r18, Z+7	; 0x07
   1297e:	30 85       	ldd	r19, Z+8	; 0x08
   12980:	3a 8b       	std	Y+18, r19	; 0x12
   12982:	29 8b       	std	Y+17, r18	; 0x11
   12984:	f9 01       	movw	r30, r18
   12986:	84 81       	ldd	r24, Z+4	; 0x04
   12988:	95 81       	ldd	r25, Z+5	; 0x05
   1298a:	ed b7       	in	r30, 0x3d	; 61
   1298c:	fe b7       	in	r31, 0x3e	; 62
   1298e:	95 83       	std	Z+5, r25	; 0x05
   12990:	84 83       	std	Z+4, r24	; 0x04
   12992:	2b 85       	ldd	r18, Y+11	; 0x0b
   12994:	3c 85       	ldd	r19, Y+12	; 0x0c
   12996:	4d 85       	ldd	r20, Y+13	; 0x0d
   12998:	21 83       	std	Z+1, r18	; 0x01
   1299a:	32 83       	std	Z+2, r19	; 0x02
   1299c:	43 83       	std	Z+3, r20	; 0x03
   1299e:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   129a2:	e9 89       	ldd	r30, Y+17	; 0x11
   129a4:	fa 89       	ldd	r31, Y+18	; 0x12
   129a6:	80 81       	ld	r24, Z
   129a8:	90 e0       	ldi	r25, 0x00	; 0
   129aa:	ed b7       	in	r30, 0x3d	; 61
   129ac:	fe b7       	in	r31, 0x3e	; 62
   129ae:	95 83       	std	Z+5, r25	; 0x05
   129b0:	84 83       	std	Z+4, r24	; 0x04
   129b2:	2e 85       	ldd	r18, Y+14	; 0x0e
   129b4:	3f 85       	ldd	r19, Y+15	; 0x0f
   129b6:	48 89       	ldd	r20, Y+16	; 0x10
   129b8:	21 83       	std	Z+1, r18	; 0x01
   129ba:	32 83       	std	Z+2, r19	; 0x02
   129bc:	43 83       	std	Z+3, r20	; 0x03
   129be:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   129c2:	64 e0       	ldi	r22, 0x04	; 4
   129c4:	89 e0       	ldi	r24, 0x09	; 9
   129c6:	93 de       	rcall	.-730    	; 0x126ee <print_tok>
   129c8:	e9 89       	ldd	r30, Y+17	; 0x11
   129ca:	fa 89       	ldd	r31, Y+18	; 0x12
   129cc:	20 81       	ld	r18, Z
   129ce:	30 e0       	ldi	r19, 0x00	; 0
   129d0:	40 e0       	ldi	r20, 0x00	; 0
   129d2:	50 e0       	ldi	r21, 0x00	; 0
   129d4:	68 e0       	ldi	r22, 0x08	; 8
   129d6:	81 e0       	ldi	r24, 0x01	; 1
   129d8:	15 de       	rcall	.-982    	; 0x12604 <print_tok_val>
   129da:	e9 89       	ldd	r30, Y+17	; 0x11
   129dc:	fa 89       	ldd	r31, Y+18	; 0x12
   129de:	21 81       	ldd	r18, Z+1	; 0x01
   129e0:	30 e0       	ldi	r19, 0x00	; 0
   129e2:	40 e0       	ldi	r20, 0x00	; 0
   129e4:	50 e0       	ldi	r21, 0x00	; 0
   129e6:	68 e0       	ldi	r22, 0x08	; 8
   129e8:	8f e1       	ldi	r24, 0x1F	; 31
   129ea:	0c de       	rcall	.-1000   	; 0x12604 <print_tok_val>
   129ec:	e9 89       	ldd	r30, Y+17	; 0x11
   129ee:	fa 89       	ldd	r31, Y+18	; 0x12
   129f0:	42 81       	ldd	r20, Z+2	; 0x02
   129f2:	53 81       	ldd	r21, Z+3	; 0x03
   129f4:	68 e0       	ldi	r22, 0x08	; 8
   129f6:	82 e1       	ldi	r24, 0x12	; 18
   129f8:	45 de       	rcall	.-886    	; 0x12684 <print_tok_str>
   129fa:	64 e0       	ldi	r22, 0x04	; 4
   129fc:	81 e1       	ldi	r24, 0x11	; 17
   129fe:	77 de       	rcall	.-786    	; 0x126ee <print_tok>
   12a00:	64 e0       	ldi	r22, 0x04	; 4
   12a02:	85 e1       	ldi	r24, 0x15	; 21
   12a04:	74 de       	rcall	.-792    	; 0x126ee <print_tok>
   12a06:	e9 89       	ldd	r30, Y+17	; 0x11
   12a08:	fa 89       	ldd	r31, Y+18	; 0x12
   12a0a:	26 81       	ldd	r18, Z+6	; 0x06
   12a0c:	37 81       	ldd	r19, Z+7	; 0x07
   12a0e:	40 e0       	ldi	r20, 0x00	; 0
   12a10:	50 e0       	ldi	r21, 0x00	; 0
   12a12:	68 e0       	ldi	r22, 0x08	; 8
   12a14:	87 e1       	ldi	r24, 0x17	; 23
   12a16:	f6 dd       	rcall	.-1044   	; 0x12604 <print_tok_val>
   12a18:	64 e0       	ldi	r22, 0x04	; 4
   12a1a:	81 e1       	ldi	r24, 0x11	; 17
   12a1c:	68 de       	rcall	.-816    	; 0x126ee <print_tok>
   12a1e:	a1 14       	cp	r10, r1
   12a20:	b1 04       	cpc	r11, r1
   12a22:	09 f1       	breq	.+66     	; 0x12a66 <display_Config+0x184>
   12a24:	64 e0       	ldi	r22, 0x04	; 4
   12a26:	8b e0       	ldi	r24, 0x0B	; 11
   12a28:	62 de       	rcall	.-828    	; 0x126ee <print_tok>
   12a2a:	e9 89       	ldd	r30, Y+17	; 0x11
   12a2c:	fa 89       	ldd	r31, Y+18	; 0x12
   12a2e:	20 85       	ldd	r18, Z+8	; 0x08
   12a30:	31 85       	ldd	r19, Z+9	; 0x09
   12a32:	40 e0       	ldi	r20, 0x00	; 0
   12a34:	50 e0       	ldi	r21, 0x00	; 0
   12a36:	68 e0       	ldi	r22, 0x08	; 8
   12a38:	88 e2       	ldi	r24, 0x28	; 40
   12a3a:	e4 dd       	rcall	.-1080   	; 0x12604 <print_tok_val>
   12a3c:	e9 89       	ldd	r30, Y+17	; 0x11
   12a3e:	fa 89       	ldd	r31, Y+18	; 0x12
   12a40:	22 85       	ldd	r18, Z+10	; 0x0a
   12a42:	33 85       	ldd	r19, Z+11	; 0x0b
   12a44:	40 e0       	ldi	r20, 0x00	; 0
   12a46:	50 e0       	ldi	r21, 0x00	; 0
   12a48:	68 e0       	ldi	r22, 0x08	; 8
   12a4a:	85 e2       	ldi	r24, 0x25	; 37
   12a4c:	db dd       	rcall	.-1098   	; 0x12604 <print_tok_val>
   12a4e:	e9 89       	ldd	r30, Y+17	; 0x11
   12a50:	fa 89       	ldd	r31, Y+18	; 0x12
   12a52:	24 85       	ldd	r18, Z+12	; 0x0c
   12a54:	30 e0       	ldi	r19, 0x00	; 0
   12a56:	40 e0       	ldi	r20, 0x00	; 0
   12a58:	50 e0       	ldi	r21, 0x00	; 0
   12a5a:	68 e0       	ldi	r22, 0x08	; 8
   12a5c:	86 e2       	ldi	r24, 0x26	; 38
   12a5e:	d2 dd       	rcall	.-1116   	; 0x12604 <print_tok_val>
   12a60:	64 e0       	ldi	r22, 0x04	; 4
   12a62:	81 e1       	ldi	r24, 0x11	; 17
   12a64:	44 de       	rcall	.-888    	; 0x126ee <print_tok>
   12a66:	64 e0       	ldi	r22, 0x04	; 4
   12a68:	87 e2       	ldi	r24, 0x27	; 39
   12a6a:	41 de       	rcall	.-894    	; 0x126ee <print_tok>
   12a6c:	a1 14       	cp	r10, r1
   12a6e:	b1 04       	cpc	r11, r1
   12a70:	49 f0       	breq	.+18     	; 0x12a84 <display_Config+0x1a2>
   12a72:	e9 89       	ldd	r30, Y+17	; 0x11
   12a74:	fa 89       	ldd	r31, Y+18	; 0x12
   12a76:	25 85       	ldd	r18, Z+13	; 0x0d
   12a78:	30 e0       	ldi	r19, 0x00	; 0
   12a7a:	40 e0       	ldi	r20, 0x00	; 0
   12a7c:	50 e0       	ldi	r21, 0x00	; 0
   12a7e:	68 e0       	ldi	r22, 0x08	; 8
   12a80:	89 e2       	ldi	r24, 0x29	; 41
   12a82:	c0 dd       	rcall	.-1152   	; 0x12604 <print_tok_val>
   12a84:	e9 89       	ldd	r30, Y+17	; 0x11
   12a86:	fa 89       	ldd	r31, Y+18	; 0x12
   12a88:	26 85       	ldd	r18, Z+14	; 0x0e
   12a8a:	37 85       	ldd	r19, Z+15	; 0x0f
   12a8c:	40 89       	ldd	r20, Z+16	; 0x10
   12a8e:	51 89       	ldd	r21, Z+17	; 0x11
   12a90:	68 e0       	ldi	r22, 0x08	; 8
   12a92:	8f e0       	ldi	r24, 0x0F	; 15
   12a94:	b7 dd       	rcall	.-1170   	; 0x12604 <print_tok_val>
   12a96:	a1 14       	cp	r10, r1
   12a98:	b1 04       	cpc	r11, r1
   12a9a:	09 f4       	brne	.+2      	; 0x12a9e <display_Config+0x1bc>
   12a9c:	5a c0       	rjmp	.+180    	; 0x12b52 <display_Config+0x270>
   12a9e:	e9 89       	ldd	r30, Y+17	; 0x11
   12aa0:	fa 89       	ldd	r31, Y+18	; 0x12
   12aa2:	22 89       	ldd	r18, Z+18	; 0x12
   12aa4:	33 89       	ldd	r19, Z+19	; 0x13
   12aa6:	40 e0       	ldi	r20, 0x00	; 0
   12aa8:	50 e0       	ldi	r21, 0x00	; 0
   12aaa:	68 e0       	ldi	r22, 0x08	; 8
   12aac:	87 e0       	ldi	r24, 0x07	; 7
   12aae:	aa dd       	rcall	.-1196   	; 0x12604 <print_tok_val>
   12ab0:	e9 89       	ldd	r30, Y+17	; 0x11
   12ab2:	fa 89       	ldd	r31, Y+18	; 0x12
   12ab4:	24 89       	ldd	r18, Z+20	; 0x14
   12ab6:	30 e0       	ldi	r19, 0x00	; 0
   12ab8:	40 e0       	ldi	r20, 0x00	; 0
   12aba:	50 e0       	ldi	r21, 0x00	; 0
   12abc:	68 e0       	ldi	r22, 0x08	; 8
   12abe:	85 e0       	ldi	r24, 0x05	; 5
   12ac0:	a1 dd       	rcall	.-1214   	; 0x12604 <print_tok_val>
   12ac2:	e9 89       	ldd	r30, Y+17	; 0x11
   12ac4:	fa 89       	ldd	r31, Y+18	; 0x12
   12ac6:	25 89       	ldd	r18, Z+21	; 0x15
   12ac8:	30 e0       	ldi	r19, 0x00	; 0
   12aca:	40 e0       	ldi	r20, 0x00	; 0
   12acc:	50 e0       	ldi	r21, 0x00	; 0
   12ace:	68 e0       	ldi	r22, 0x08	; 8
   12ad0:	86 e0       	ldi	r24, 0x06	; 6
   12ad2:	98 dd       	rcall	.-1232   	; 0x12604 <print_tok_val>
   12ad4:	e9 89       	ldd	r30, Y+17	; 0x11
   12ad6:	fa 89       	ldd	r31, Y+18	; 0x12
   12ad8:	26 89       	ldd	r18, Z+22	; 0x16
   12ada:	37 89       	ldd	r19, Z+23	; 0x17
   12adc:	40 e0       	ldi	r20, 0x00	; 0
   12ade:	50 e0       	ldi	r21, 0x00	; 0
   12ae0:	68 e0       	ldi	r22, 0x08	; 8
   12ae2:	84 e0       	ldi	r24, 0x04	; 4
   12ae4:	8f dd       	rcall	.-1250   	; 0x12604 <print_tok_val>
   12ae6:	e9 89       	ldd	r30, Y+17	; 0x11
   12ae8:	fa 89       	ldd	r31, Y+18	; 0x12
   12aea:	20 8d       	ldd	r18, Z+24	; 0x18
   12aec:	31 8d       	ldd	r19, Z+25	; 0x19
   12aee:	40 e0       	ldi	r20, 0x00	; 0
   12af0:	50 e0       	ldi	r21, 0x00	; 0
   12af2:	68 e0       	ldi	r22, 0x08	; 8
   12af4:	8a e0       	ldi	r24, 0x0A	; 10
   12af6:	86 dd       	rcall	.-1268   	; 0x12604 <print_tok_val>
   12af8:	e9 89       	ldd	r30, Y+17	; 0x11
   12afa:	fa 89       	ldd	r31, Y+18	; 0x12
   12afc:	22 8d       	ldd	r18, Z+26	; 0x1a
   12afe:	33 8d       	ldd	r19, Z+27	; 0x1b
   12b00:	40 e0       	ldi	r20, 0x00	; 0
   12b02:	50 e0       	ldi	r21, 0x00	; 0
   12b04:	68 e0       	ldi	r22, 0x08	; 8
   12b06:	8e e1       	ldi	r24, 0x1E	; 30
   12b08:	7d dd       	rcall	.-1286   	; 0x12604 <print_tok_val>
   12b0a:	e9 89       	ldd	r30, Y+17	; 0x11
   12b0c:	fa 89       	ldd	r31, Y+18	; 0x12
   12b0e:	24 8d       	ldd	r18, Z+28	; 0x1c
   12b10:	35 8d       	ldd	r19, Z+29	; 0x1d
   12b12:	40 e0       	ldi	r20, 0x00	; 0
   12b14:	50 e0       	ldi	r21, 0x00	; 0
   12b16:	68 e0       	ldi	r22, 0x08	; 8
   12b18:	80 e0       	ldi	r24, 0x00	; 0
   12b1a:	74 dd       	rcall	.-1304   	; 0x12604 <print_tok_val>
   12b1c:	e9 89       	ldd	r30, Y+17	; 0x11
   12b1e:	fa 89       	ldd	r31, Y+18	; 0x12
   12b20:	26 8d       	ldd	r18, Z+30	; 0x1e
   12b22:	30 e0       	ldi	r19, 0x00	; 0
   12b24:	40 e0       	ldi	r20, 0x00	; 0
   12b26:	50 e0       	ldi	r21, 0x00	; 0
   12b28:	68 e0       	ldi	r22, 0x08	; 8
   12b2a:	8c e1       	ldi	r24, 0x1C	; 28
   12b2c:	6b dd       	rcall	.-1322   	; 0x12604 <print_tok_val>
   12b2e:	e9 89       	ldd	r30, Y+17	; 0x11
   12b30:	fa 89       	ldd	r31, Y+18	; 0x12
   12b32:	27 8d       	ldd	r18, Z+31	; 0x1f
   12b34:	30 e0       	ldi	r19, 0x00	; 0
   12b36:	40 e0       	ldi	r20, 0x00	; 0
   12b38:	50 e0       	ldi	r21, 0x00	; 0
   12b3a:	68 e0       	ldi	r22, 0x08	; 8
   12b3c:	83 e1       	ldi	r24, 0x13	; 19
   12b3e:	62 dd       	rcall	.-1340   	; 0x12604 <print_tok_val>
   12b40:	e9 89       	ldd	r30, Y+17	; 0x11
   12b42:	fa 89       	ldd	r31, Y+18	; 0x12
   12b44:	20 a1       	ldd	r18, Z+32	; 0x20
   12b46:	30 e0       	ldi	r19, 0x00	; 0
   12b48:	40 e0       	ldi	r20, 0x00	; 0
   12b4a:	50 e0       	ldi	r21, 0x00	; 0
   12b4c:	68 e0       	ldi	r22, 0x08	; 8
   12b4e:	81 e2       	ldi	r24, 0x21	; 33
   12b50:	59 dd       	rcall	.-1358   	; 0x12604 <print_tok_val>
   12b52:	64 e0       	ldi	r22, 0x04	; 4
   12b54:	81 e1       	ldi	r24, 0x11	; 17
   12b56:	cb dd       	rcall	.-1130   	; 0x126ee <print_tok>
   12b58:	a1 14       	cp	r10, r1
   12b5a:	b1 04       	cpc	r11, r1
   12b5c:	99 f1       	breq	.+102    	; 0x12bc4 <display_Config+0x2e2>
   12b5e:	64 e0       	ldi	r22, 0x04	; 4
   12b60:	8a e2       	ldi	r24, 0x2A	; 42
   12b62:	c5 dd       	rcall	.-1142   	; 0x126ee <print_tok>
   12b64:	e9 89       	ldd	r30, Y+17	; 0x11
   12b66:	fa 89       	ldd	r31, Y+18	; 0x12
   12b68:	21 a1       	ldd	r18, Z+33	; 0x21
   12b6a:	32 a1       	ldd	r19, Z+34	; 0x22
   12b6c:	43 a1       	ldd	r20, Z+35	; 0x23
   12b6e:	54 a1       	ldd	r21, Z+36	; 0x24
   12b70:	68 e0       	ldi	r22, 0x08	; 8
   12b72:	8a e1       	ldi	r24, 0x1A	; 26
   12b74:	47 dd       	rcall	.-1394   	; 0x12604 <print_tok_val>
   12b76:	e9 89       	ldd	r30, Y+17	; 0x11
   12b78:	fa 89       	ldd	r31, Y+18	; 0x12
   12b7a:	25 a1       	ldd	r18, Z+37	; 0x25
   12b7c:	30 e0       	ldi	r19, 0x00	; 0
   12b7e:	40 e0       	ldi	r20, 0x00	; 0
   12b80:	50 e0       	ldi	r21, 0x00	; 0
   12b82:	68 e0       	ldi	r22, 0x08	; 8
   12b84:	8b e1       	ldi	r24, 0x1B	; 27
   12b86:	3e dd       	rcall	.-1412   	; 0x12604 <print_tok_val>
   12b88:	e9 89       	ldd	r30, Y+17	; 0x11
   12b8a:	fa 89       	ldd	r31, Y+18	; 0x12
   12b8c:	26 a1       	ldd	r18, Z+38	; 0x26
   12b8e:	37 a1       	ldd	r19, Z+39	; 0x27
   12b90:	40 e0       	ldi	r20, 0x00	; 0
   12b92:	50 e0       	ldi	r21, 0x00	; 0
   12b94:	68 e0       	ldi	r22, 0x08	; 8
   12b96:	8d e1       	ldi	r24, 0x1D	; 29
   12b98:	35 dd       	rcall	.-1430   	; 0x12604 <print_tok_val>
   12b9a:	e9 89       	ldd	r30, Y+17	; 0x11
   12b9c:	fa 89       	ldd	r31, Y+18	; 0x12
   12b9e:	20 a5       	ldd	r18, Z+40	; 0x28
   12ba0:	31 a5       	ldd	r19, Z+41	; 0x29
   12ba2:	42 a5       	ldd	r20, Z+42	; 0x2a
   12ba4:	53 a5       	ldd	r21, Z+43	; 0x2b
   12ba6:	68 e0       	ldi	r22, 0x08	; 8
   12ba8:	89 e1       	ldi	r24, 0x19	; 25
   12baa:	2c dd       	rcall	.-1448   	; 0x12604 <print_tok_val>
   12bac:	e9 89       	ldd	r30, Y+17	; 0x11
   12bae:	fa 89       	ldd	r31, Y+18	; 0x12
   12bb0:	24 a5       	ldd	r18, Z+44	; 0x2c
   12bb2:	30 e0       	ldi	r19, 0x00	; 0
   12bb4:	40 e0       	ldi	r20, 0x00	; 0
   12bb6:	50 e0       	ldi	r21, 0x00	; 0
   12bb8:	68 e0       	ldi	r22, 0x08	; 8
   12bba:	88 e1       	ldi	r24, 0x18	; 24
   12bbc:	23 dd       	rcall	.-1466   	; 0x12604 <print_tok_val>
   12bbe:	64 e0       	ldi	r22, 0x04	; 4
   12bc0:	81 e1       	ldi	r24, 0x11	; 17
   12bc2:	95 dd       	rcall	.-1238   	; 0x126ee <print_tok>
   12bc4:	e9 89       	ldd	r30, Y+17	; 0x11
   12bc6:	fa 89       	ldd	r31, Y+18	; 0x12
   12bc8:	80 a5       	ldd	r24, Z+40	; 0x28
   12bca:	91 a5       	ldd	r25, Z+41	; 0x29
   12bcc:	a2 a5       	ldd	r26, Z+42	; 0x2a
   12bce:	b3 a5       	ldd	r27, Z+43	; 0x2b
   12bd0:	01 96       	adiw	r24, 0x01	; 1
   12bd2:	a1 1d       	adc	r26, r1
   12bd4:	b1 1d       	adc	r27, r1
   12bd6:	ed b7       	in	r30, 0x3d	; 61
   12bd8:	fe b7       	in	r31, 0x3e	; 62
   12bda:	84 83       	std	Z+4, r24	; 0x04
   12bdc:	95 83       	std	Z+5, r25	; 0x05
   12bde:	a6 83       	std	Z+6, r26	; 0x06
   12be0:	b7 83       	std	Z+7, r27	; 0x07
   12be2:	26 e7       	ldi	r18, 0x76	; 118
   12be4:	3d e1       	ldi	r19, 0x1D	; 29
   12be6:	c9 01       	movw	r24, r18
   12be8:	a0 e0       	ldi	r26, 0x00	; 0
   12bea:	81 83       	std	Z+1, r24	; 0x01
   12bec:	92 83       	std	Z+2, r25	; 0x02
   12bee:	a3 83       	std	Z+3, r26	; 0x03
   12bf0:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   12bf4:	60 e0       	ldi	r22, 0x00	; 0
   12bf6:	81 e1       	ldi	r24, 0x11	; 17
   12bf8:	7a dd       	rcall	.-1292   	; 0x126ee <print_tok>
   12bfa:	f8 01       	movw	r30, r16
   12bfc:	80 81       	ld	r24, Z
   12bfe:	81 30       	cpi	r24, 0x01	; 1
   12c00:	09 f0       	breq	.+2      	; 0x12c04 <display_Config+0x322>
   12c02:	a8 c0       	rjmp	.+336    	; 0x12d54 <display_Config+0x472>
   12c04:	27 81       	ldd	r18, Z+7	; 0x07
   12c06:	30 85       	ldd	r19, Z+8	; 0x08
   12c08:	3a 8b       	std	Y+18, r19	; 0x12
   12c0a:	29 8b       	std	Y+17, r18	; 0x11
   12c0c:	f9 01       	movw	r30, r18
   12c0e:	84 81       	ldd	r24, Z+4	; 0x04
   12c10:	95 81       	ldd	r25, Z+5	; 0x05
   12c12:	ed b7       	in	r30, 0x3d	; 61
   12c14:	fe b7       	in	r31, 0x3e	; 62
   12c16:	95 83       	std	Z+5, r25	; 0x05
   12c18:	84 83       	std	Z+4, r24	; 0x04
   12c1a:	c1 82       	std	Z+1, r12	; 0x01
   12c1c:	d2 82       	std	Z+2, r13	; 0x02
   12c1e:	e3 82       	std	Z+3, r14	; 0x03
   12c20:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   12c24:	e9 89       	ldd	r30, Y+17	; 0x11
   12c26:	fa 89       	ldd	r31, Y+18	; 0x12
   12c28:	80 81       	ld	r24, Z
   12c2a:	90 e0       	ldi	r25, 0x00	; 0
   12c2c:	ed b7       	in	r30, 0x3d	; 61
   12c2e:	fe b7       	in	r31, 0x3e	; 62
   12c30:	95 83       	std	Z+5, r25	; 0x05
   12c32:	84 83       	std	Z+4, r24	; 0x04
   12c34:	61 82       	std	Z+1, r6	; 0x01
   12c36:	72 82       	std	Z+2, r7	; 0x02
   12c38:	83 82       	std	Z+3, r8	; 0x03
   12c3a:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   12c3e:	64 e0       	ldi	r22, 0x04	; 4
   12c40:	85 e1       	ldi	r24, 0x15	; 21
   12c42:	55 dd       	rcall	.-1366   	; 0x126ee <print_tok>
   12c44:	e9 89       	ldd	r30, Y+17	; 0x11
   12c46:	fa 89       	ldd	r31, Y+18	; 0x12
   12c48:	20 81       	ld	r18, Z
   12c4a:	30 e0       	ldi	r19, 0x00	; 0
   12c4c:	40 e0       	ldi	r20, 0x00	; 0
   12c4e:	50 e0       	ldi	r21, 0x00	; 0
   12c50:	68 e0       	ldi	r22, 0x08	; 8
   12c52:	81 e0       	ldi	r24, 0x01	; 1
   12c54:	d7 dc       	rcall	.-1618   	; 0x12604 <print_tok_val>
   12c56:	e9 89       	ldd	r30, Y+17	; 0x11
   12c58:	fa 89       	ldd	r31, Y+18	; 0x12
   12c5a:	21 81       	ldd	r18, Z+1	; 0x01
   12c5c:	30 e0       	ldi	r19, 0x00	; 0
   12c5e:	40 e0       	ldi	r20, 0x00	; 0
   12c60:	50 e0       	ldi	r21, 0x00	; 0
   12c62:	68 e0       	ldi	r22, 0x08	; 8
   12c64:	8f e1       	ldi	r24, 0x1F	; 31
   12c66:	ce dc       	rcall	.-1636   	; 0x12604 <print_tok_val>
   12c68:	e9 89       	ldd	r30, Y+17	; 0x11
   12c6a:	fa 89       	ldd	r31, Y+18	; 0x12
   12c6c:	42 81       	ldd	r20, Z+2	; 0x02
   12c6e:	53 81       	ldd	r21, Z+3	; 0x03
   12c70:	68 e0       	ldi	r22, 0x08	; 8
   12c72:	82 e1       	ldi	r24, 0x12	; 18
   12c74:	07 dd       	rcall	.-1522   	; 0x12684 <print_tok_str>
   12c76:	64 e0       	ldi	r22, 0x04	; 4
   12c78:	81 e1       	ldi	r24, 0x11	; 17
   12c7a:	39 dd       	rcall	.-1422   	; 0x126ee <print_tok>
   12c7c:	64 e0       	ldi	r22, 0x04	; 4
   12c7e:	89 e0       	ldi	r24, 0x09	; 9
   12c80:	36 dd       	rcall	.-1428   	; 0x126ee <print_tok>
   12c82:	e9 89       	ldd	r30, Y+17	; 0x11
   12c84:	fa 89       	ldd	r31, Y+18	; 0x12
   12c86:	26 81       	ldd	r18, Z+6	; 0x06
   12c88:	37 81       	ldd	r19, Z+7	; 0x07
   12c8a:	40 e0       	ldi	r20, 0x00	; 0
   12c8c:	50 e0       	ldi	r21, 0x00	; 0
   12c8e:	68 e0       	ldi	r22, 0x08	; 8
   12c90:	87 e1       	ldi	r24, 0x17	; 23
   12c92:	b8 dc       	rcall	.-1680   	; 0x12604 <print_tok_val>
   12c94:	64 e0       	ldi	r22, 0x04	; 4
   12c96:	81 e1       	ldi	r24, 0x11	; 17
   12c98:	2a dd       	rcall	.-1452   	; 0x126ee <print_tok>
   12c9a:	a1 14       	cp	r10, r1
   12c9c:	b1 04       	cpc	r11, r1
   12c9e:	91 f1       	breq	.+100    	; 0x12d04 <display_Config+0x422>
   12ca0:	64 e0       	ldi	r22, 0x04	; 4
   12ca2:	84 e1       	ldi	r24, 0x14	; 20
   12ca4:	24 dd       	rcall	.-1464   	; 0x126ee <print_tok>
   12ca6:	e9 89       	ldd	r30, Y+17	; 0x11
   12ca8:	fa 89       	ldd	r31, Y+18	; 0x12
   12caa:	20 85       	ldd	r18, Z+8	; 0x08
   12cac:	31 85       	ldd	r19, Z+9	; 0x09
   12cae:	03 2e       	mov	r0, r19
   12cb0:	00 0c       	add	r0, r0
   12cb2:	44 0b       	sbc	r20, r20
   12cb4:	55 0b       	sbc	r21, r21
   12cb6:	68 e0       	ldi	r22, 0x08	; 8
   12cb8:	88 e0       	ldi	r24, 0x08	; 8
   12cba:	a4 dc       	rcall	.-1720   	; 0x12604 <print_tok_val>
   12cbc:	e9 89       	ldd	r30, Y+17	; 0x11
   12cbe:	fa 89       	ldd	r31, Y+18	; 0x12
   12cc0:	22 85       	ldd	r18, Z+10	; 0x0a
   12cc2:	33 85       	ldd	r19, Z+11	; 0x0b
   12cc4:	03 2e       	mov	r0, r19
   12cc6:	00 0c       	add	r0, r0
   12cc8:	44 0b       	sbc	r20, r20
   12cca:	55 0b       	sbc	r21, r21
   12ccc:	68 e0       	ldi	r22, 0x08	; 8
   12cce:	82 e2       	ldi	r24, 0x22	; 34
   12cd0:	99 dc       	rcall	.-1742   	; 0x12604 <print_tok_val>
   12cd2:	e9 89       	ldd	r30, Y+17	; 0x11
   12cd4:	fa 89       	ldd	r31, Y+18	; 0x12
   12cd6:	24 85       	ldd	r18, Z+12	; 0x0c
   12cd8:	35 85       	ldd	r19, Z+13	; 0x0d
   12cda:	03 2e       	mov	r0, r19
   12cdc:	00 0c       	add	r0, r0
   12cde:	44 0b       	sbc	r20, r20
   12ce0:	55 0b       	sbc	r21, r21
   12ce2:	68 e0       	ldi	r22, 0x08	; 8
   12ce4:	86 e1       	ldi	r24, 0x16	; 22
   12ce6:	8e dc       	rcall	.-1764   	; 0x12604 <print_tok_val>
   12ce8:	e9 89       	ldd	r30, Y+17	; 0x11
   12cea:	fa 89       	ldd	r31, Y+18	; 0x12
   12cec:	26 85       	ldd	r18, Z+14	; 0x0e
   12cee:	37 85       	ldd	r19, Z+15	; 0x0f
   12cf0:	03 2e       	mov	r0, r19
   12cf2:	00 0c       	add	r0, r0
   12cf4:	44 0b       	sbc	r20, r20
   12cf6:	55 0b       	sbc	r21, r21
   12cf8:	68 e0       	ldi	r22, 0x08	; 8
   12cfa:	8d e0       	ldi	r24, 0x0D	; 13
   12cfc:	83 dc       	rcall	.-1786   	; 0x12604 <print_tok_val>
   12cfe:	64 e0       	ldi	r22, 0x04	; 4
   12d00:	81 e1       	ldi	r24, 0x11	; 17
   12d02:	f5 dc       	rcall	.-1558   	; 0x126ee <print_tok>
   12d04:	e9 89       	ldd	r30, Y+17	; 0x11
   12d06:	fa 89       	ldd	r31, Y+18	; 0x12
   12d08:	46 85       	ldd	r20, Z+14	; 0x0e
   12d0a:	57 85       	ldd	r21, Z+15	; 0x0f
   12d0c:	22 85       	ldd	r18, Z+10	; 0x0a
   12d0e:	33 85       	ldd	r19, Z+11	; 0x0b
   12d10:	42 9f       	mul	r20, r18
   12d12:	c0 01       	movw	r24, r0
   12d14:	43 9f       	mul	r20, r19
   12d16:	90 0d       	add	r25, r0
   12d18:	52 9f       	mul	r21, r18
   12d1a:	90 0d       	add	r25, r0
   12d1c:	11 24       	eor	r1, r1
   12d1e:	44 85       	ldd	r20, Z+12	; 0x0c
   12d20:	55 85       	ldd	r21, Z+13	; 0x0d
   12d22:	84 9f       	mul	r24, r20
   12d24:	90 01       	movw	r18, r0
   12d26:	85 9f       	mul	r24, r21
   12d28:	30 0d       	add	r19, r0
   12d2a:	94 9f       	mul	r25, r20
   12d2c:	30 0d       	add	r19, r0
   12d2e:	11 24       	eor	r1, r1
   12d30:	c9 01       	movw	r24, r18
   12d32:	33 0f       	add	r19, r19
   12d34:	aa 0b       	sbc	r26, r26
   12d36:	bb 0b       	sbc	r27, r27
   12d38:	ed b7       	in	r30, 0x3d	; 61
   12d3a:	fe b7       	in	r31, 0x3e	; 62
   12d3c:	84 83       	std	Z+4, r24	; 0x04
   12d3e:	95 83       	std	Z+5, r25	; 0x05
   12d40:	a6 83       	std	Z+6, r26	; 0x06
   12d42:	b7 83       	std	Z+7, r27	; 0x07
   12d44:	21 82       	std	Z+1, r2	; 0x01
   12d46:	32 82       	std	Z+2, r3	; 0x02
   12d48:	43 82       	std	Z+3, r4	; 0x03
   12d4a:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   12d4e:	60 e0       	ldi	r22, 0x00	; 0
   12d50:	81 e1       	ldi	r24, 0x11	; 17
   12d52:	cd dc       	rcall	.-1638   	; 0x126ee <print_tok>
   12d54:	f8 01       	movw	r30, r16
   12d56:	80 81       	ld	r24, Z
   12d58:	84 30       	cpi	r24, 0x04	; 4
   12d5a:	c9 f4       	brne	.+50     	; 0x12d8e <display_Config+0x4ac>
   12d5c:	27 81       	ldd	r18, Z+7	; 0x07
   12d5e:	30 85       	ldd	r19, Z+8	; 0x08
   12d60:	3a 8b       	std	Y+18, r19	; 0x12
   12d62:	29 8b       	std	Y+17, r18	; 0x11
   12d64:	60 e0       	ldi	r22, 0x00	; 0
   12d66:	80 e2       	ldi	r24, 0x20	; 32
   12d68:	c2 dc       	rcall	.-1660   	; 0x126ee <print_tok>
   12d6a:	64 e0       	ldi	r22, 0x04	; 4
   12d6c:	89 e0       	ldi	r24, 0x09	; 9
   12d6e:	bf dc       	rcall	.-1666   	; 0x126ee <print_tok>
   12d70:	e9 89       	ldd	r30, Y+17	; 0x11
   12d72:	fa 89       	ldd	r31, Y+18	; 0x12
   12d74:	20 81       	ld	r18, Z
   12d76:	30 e0       	ldi	r19, 0x00	; 0
   12d78:	40 e0       	ldi	r20, 0x00	; 0
   12d7a:	50 e0       	ldi	r21, 0x00	; 0
   12d7c:	68 e0       	ldi	r22, 0x08	; 8
   12d7e:	81 e0       	ldi	r24, 0x01	; 1
   12d80:	41 dc       	rcall	.-1918   	; 0x12604 <print_tok_val>
   12d82:	64 e0       	ldi	r22, 0x04	; 4
   12d84:	81 e1       	ldi	r24, 0x11	; 17
   12d86:	b3 dc       	rcall	.-1690   	; 0x126ee <print_tok>
   12d88:	60 e0       	ldi	r22, 0x00	; 0
   12d8a:	81 e1       	ldi	r24, 0x11	; 17
   12d8c:	b0 dc       	rcall	.-1696   	; 0x126ee <print_tok>
   12d8e:	28 85       	ldd	r18, Y+8	; 0x08
   12d90:	39 85       	ldd	r19, Y+9	; 0x09
   12d92:	4a 85       	ldd	r20, Y+10	; 0x0a
   12d94:	ed b7       	in	r30, 0x3d	; 61
   12d96:	fe b7       	in	r31, 0x3e	; 62
   12d98:	21 83       	std	Z+1, r18	; 0x01
   12d9a:	32 83       	std	Z+2, r19	; 0x02
   12d9c:	43 83       	std	Z+3, r20	; 0x03
   12d9e:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   12da2:	05 5f       	subi	r16, 0xF5	; 245
   12da4:	1f 4f       	sbci	r17, 0xFF	; 255
   12da6:	20 e8       	ldi	r18, 0x80	; 128
   12da8:	3f e1       	ldi	r19, 0x1F	; 31
   12daa:	20 17       	cp	r18, r16
   12dac:	31 07       	cpc	r19, r17
   12dae:	09 f0       	breq	.+2      	; 0x12db2 <display_Config+0x4d0>
   12db0:	dd cd       	rjmp	.-1094   	; 0x1296c <display_Config+0x8a>
   12db2:	85 e3       	ldi	r24, 0x35	; 53
   12db4:	9d e1       	ldi	r25, 0x1D	; 29
   12db6:	a0 e0       	ldi	r26, 0x00	; 0
   12db8:	ed b7       	in	r30, 0x3d	; 61
   12dba:	fe b7       	in	r31, 0x3e	; 62
   12dbc:	81 83       	std	Z+1, r24	; 0x01
   12dbe:	92 83       	std	Z+2, r25	; 0x02
   12dc0:	a3 83       	std	Z+3, r26	; 0x03
   12dc2:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   12dc6:	62 96       	adiw	r28, 0x12	; 18
   12dc8:	0f b6       	in	r0, 0x3f	; 63
   12dca:	f8 94       	cli
   12dcc:	de bf       	out	0x3e, r29	; 62
   12dce:	0f be       	out	0x3f, r0	; 63
   12dd0:	cd bf       	out	0x3d, r28	; 61
   12dd2:	df 91       	pop	r29
   12dd4:	cf 91       	pop	r28
   12dd6:	1f 91       	pop	r17
   12dd8:	0f 91       	pop	r16
   12dda:	ef 90       	pop	r14
   12ddc:	df 90       	pop	r13
   12dde:	cf 90       	pop	r12
   12de0:	bf 90       	pop	r11
   12de2:	af 90       	pop	r10
   12de4:	8f 90       	pop	r8
   12de6:	7f 90       	pop	r7
   12de8:	6f 90       	pop	r6
   12dea:	4f 90       	pop	r4
   12dec:	3f 90       	pop	r3
   12dee:	2f 90       	pop	r2
   12df0:	08 95       	ret

00012df2 <find_type>:
   12df2:	ec ef       	ldi	r30, 0xFC	; 252
   12df4:	fe e1       	ldi	r31, 0x1E	; 30
   12df6:	20 e0       	ldi	r18, 0x00	; 0
   12df8:	30 e0       	ldi	r19, 0x00	; 0
   12dfa:	40 81       	ld	r20, Z
   12dfc:	50 e0       	ldi	r21, 0x00	; 0
   12dfe:	48 17       	cp	r20, r24
   12e00:	59 07       	cpc	r21, r25
   12e02:	11 f4       	brne	.+4      	; 0x12e08 <find_type+0x16>
   12e04:	82 2f       	mov	r24, r18
   12e06:	08 95       	ret
   12e08:	2f 5f       	subi	r18, 0xFF	; 255
   12e0a:	3f 4f       	sbci	r19, 0xFF	; 255
   12e0c:	3b 96       	adiw	r30, 0x0b	; 11
   12e0e:	2c 30       	cpi	r18, 0x0C	; 12
   12e10:	31 05       	cpc	r19, r1
   12e12:	99 f7       	brne	.-26     	; 0x12dfa <find_type+0x8>
   12e14:	8f ef       	ldi	r24, 0xFF	; 255
   12e16:	08 95       	ret

00012e18 <count_drive_types>:
   12e18:	ec ef       	ldi	r30, 0xFC	; 252
   12e1a:	fe e1       	ldi	r31, 0x1E	; 30
   12e1c:	20 e0       	ldi	r18, 0x00	; 0
   12e1e:	30 e0       	ldi	r19, 0x00	; 0
   12e20:	90 81       	ld	r25, Z
   12e22:	98 13       	cpse	r25, r24
   12e24:	02 c0       	rjmp	.+4      	; 0x12e2a <count_drive_types+0x12>
   12e26:	2f 5f       	subi	r18, 0xFF	; 255
   12e28:	3f 4f       	sbci	r19, 0xFF	; 255
   12e2a:	3b 96       	adiw	r30, 0x0b	; 11
   12e2c:	9f e1       	ldi	r25, 0x1F	; 31
   12e2e:	e0 38       	cpi	r30, 0x80	; 128
   12e30:	f9 07       	cpc	r31, r25
   12e32:	b1 f7       	brne	.-20     	; 0x12e20 <count_drive_types+0x8>
   12e34:	82 2f       	mov	r24, r18
   12e36:	08 95       	ret

00012e38 <type_to_str>:
   12e38:	00 97       	sbiw	r24, 0x00	; 0
   12e3a:	59 f0       	breq	.+22     	; 0x12e52 <type_to_str+0x1a>
   12e3c:	81 30       	cpi	r24, 0x01	; 1
   12e3e:	91 05       	cpc	r25, r1
   12e40:	59 f0       	breq	.+22     	; 0x12e58 <type_to_str+0x20>
   12e42:	83 30       	cpi	r24, 0x03	; 3
   12e44:	91 05       	cpc	r25, r1
   12e46:	59 f0       	breq	.+22     	; 0x12e5e <type_to_str+0x26>
   12e48:	04 97       	sbiw	r24, 0x04	; 4
   12e4a:	61 f0       	breq	.+24     	; 0x12e64 <type_to_str+0x2c>
   12e4c:	8e e0       	ldi	r24, 0x0E	; 14
   12e4e:	9e e0       	ldi	r25, 0x0E	; 14
   12e50:	08 95       	ret
   12e52:	84 ee       	ldi	r24, 0xE4	; 228
   12e54:	9d e0       	ldi	r25, 0x0D	; 13
   12e56:	08 95       	ret
   12e58:	8c ee       	ldi	r24, 0xEC	; 236
   12e5a:	9d e0       	ldi	r25, 0x0D	; 13
   12e5c:	08 95       	ret
   12e5e:	84 e0       	ldi	r24, 0x04	; 4
   12e60:	9e e0       	ldi	r25, 0x0E	; 14
   12e62:	08 95       	ret
   12e64:	87 ef       	ldi	r24, 0xF7	; 247
   12e66:	9d e0       	ldi	r25, 0x0D	; 13
   12e68:	08 95       	ret

00012e6a <find_free>:
   12e6a:	80 e0       	ldi	r24, 0x00	; 0
   12e6c:	90 e0       	ldi	r25, 0x00	; 0
   12e6e:	c1 cf       	rjmp	.-126    	; 0x12df2 <find_type>
   12e70:	08 95       	ret

00012e72 <find_device>:
   12e72:	9b 01       	movw	r18, r22
   12e74:	20 52       	subi	r18, 0x20	; 32
   12e76:	31 09       	sbc	r19, r1
   12e78:	2f 35       	cpi	r18, 0x5F	; 95
   12e7a:	31 05       	cpc	r19, r1
   12e7c:	08 f5       	brcc	.+66     	; 0x12ec0 <find_device+0x4e>
   12e7e:	64 17       	cp	r22, r20
   12e80:	75 07       	cpc	r23, r21
   12e82:	f4 f0       	brlt	.+60     	; 0x12ec0 <find_device+0x4e>
   12e84:	9a 01       	movw	r18, r20
   12e86:	22 5e       	subi	r18, 0xE2	; 226
   12e88:	3f 4f       	sbci	r19, 0xFF	; 255
   12e8a:	26 17       	cp	r18, r22
   12e8c:	37 07       	cpc	r19, r23
   12e8e:	c4 f0       	brlt	.+48     	; 0x12ec0 <find_device+0x4e>
   12e90:	64 1b       	sub	r22, r20
   12e92:	75 0b       	sbc	r23, r21
   12e94:	ec ef       	ldi	r30, 0xFC	; 252
   12e96:	fe e1       	ldi	r31, 0x1E	; 30
   12e98:	20 e0       	ldi	r18, 0x00	; 0
   12e9a:	30 e0       	ldi	r19, 0x00	; 0
   12e9c:	40 81       	ld	r20, Z
   12e9e:	50 e0       	ldi	r21, 0x00	; 0
   12ea0:	48 17       	cp	r20, r24
   12ea2:	59 07       	cpc	r21, r25
   12ea4:	39 f4       	brne	.+14     	; 0x12eb4 <find_device+0x42>
   12ea6:	41 81       	ldd	r20, Z+1	; 0x01
   12ea8:	50 e0       	ldi	r21, 0x00	; 0
   12eaa:	64 17       	cp	r22, r20
   12eac:	75 07       	cpc	r23, r21
   12eae:	11 f4       	brne	.+4      	; 0x12eb4 <find_device+0x42>
   12eb0:	82 2f       	mov	r24, r18
   12eb2:	08 95       	ret
   12eb4:	2f 5f       	subi	r18, 0xFF	; 255
   12eb6:	3f 4f       	sbci	r19, 0xFF	; 255
   12eb8:	3b 96       	adiw	r30, 0x0b	; 11
   12eba:	2c 30       	cpi	r18, 0x0C	; 12
   12ebc:	31 05       	cpc	r19, r1
   12ebe:	71 f7       	brne	.-36     	; 0x12e9c <find_device+0x2a>
   12ec0:	8f ef       	ldi	r24, 0xFF	; 255
   12ec2:	08 95       	ret

00012ec4 <set_active_device>:
   12ec4:	a9 e0       	ldi	r26, 0x09	; 9
   12ec6:	b0 e0       	ldi	r27, 0x00	; 0
   12ec8:	e8 e6       	ldi	r30, 0x68	; 104
   12eca:	f7 e9       	ldi	r31, 0x97	; 151
   12ecc:	0c 94 0d e7 	jmp	0x1ce1a	; 0x1ce1a <__prologue_saves__+0x1c>
   12ed0:	8f 3f       	cpi	r24, 0xFF	; 255
   12ed2:	09 f4       	brne	.+2      	; 0x12ed6 <set_active_device+0x12>
   12ed4:	b5 c0       	rjmp	.+362    	; 0x13040 <set_active_device+0x17c>
   12ed6:	e8 2f       	mov	r30, r24
   12ed8:	8c 30       	cpi	r24, 0x0C	; 12
   12eda:	a0 f0       	brcs	.+40     	; 0x12f04 <set_active_device+0x40>
   12edc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   12ee0:	80 ff       	sbrs	r24, 0
   12ee2:	ae c0       	rjmp	.+348    	; 0x13040 <set_active_device+0x17c>
   12ee4:	0e 2e       	mov	r0, r30
   12ee6:	00 0c       	add	r0, r0
   12ee8:	ff 0b       	sbc	r31, r31
   12eea:	cd b7       	in	r28, 0x3d	; 61
   12eec:	de b7       	in	r29, 0x3e	; 62
   12eee:	fd 83       	std	Y+5, r31	; 0x05
   12ef0:	ec 83       	std	Y+4, r30	; 0x04
   12ef2:	80 e1       	ldi	r24, 0x10	; 16
   12ef4:	9d e1       	ldi	r25, 0x1D	; 29
   12ef6:	a0 e0       	ldi	r26, 0x00	; 0
   12ef8:	89 83       	std	Y+1, r24	; 0x01
   12efa:	9a 83       	std	Y+2, r25	; 0x02
   12efc:	ab 83       	std	Y+3, r26	; 0x03
   12efe:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   12f02:	9e c0       	rjmp	.+316    	; 0x13040 <set_active_device+0x17c>
   12f04:	08 2f       	mov	r16, r24
   12f06:	88 0f       	add	r24, r24
   12f08:	11 0b       	sbc	r17, r17
   12f0a:	8b e0       	ldi	r24, 0x0B	; 11
   12f0c:	e8 02       	muls	r30, r24
   12f0e:	f0 01       	movw	r30, r0
   12f10:	11 24       	eor	r1, r1
   12f12:	e4 50       	subi	r30, 0x04	; 4
   12f14:	f1 4e       	sbci	r31, 0xE1	; 225
   12f16:	81 81       	ldd	r24, Z+1	; 0x01
   12f18:	8f 31       	cpi	r24, 0x1F	; 31
   12f1a:	a0 f0       	brcs	.+40     	; 0x12f44 <set_active_device+0x80>
   12f1c:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <debuglevel>
   12f20:	90 ff       	sbrs	r25, 0
   12f22:	8e c0       	rjmp	.+284    	; 0x13040 <set_active_device+0x17c>
   12f24:	90 e0       	ldi	r25, 0x00	; 0
   12f26:	cd b7       	in	r28, 0x3d	; 61
   12f28:	de b7       	in	r29, 0x3e	; 62
   12f2a:	9f 83       	std	Y+7, r25	; 0x07
   12f2c:	8e 83       	std	Y+6, r24	; 0x06
   12f2e:	1d 83       	std	Y+5, r17	; 0x05
   12f30:	0c 83       	std	Y+4, r16	; 0x04
   12f32:	87 ed       	ldi	r24, 0xD7	; 215
   12f34:	9c e1       	ldi	r25, 0x1C	; 28
   12f36:	a0 e0       	ldi	r26, 0x00	; 0
   12f38:	89 83       	std	Y+1, r24	; 0x01
   12f3a:	9a 83       	std	Y+2, r25	; 0x02
   12f3c:	ab 83       	std	Y+3, r26	; 0x03
   12f3e:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   12f42:	7e c0       	rjmp	.+252    	; 0x13040 <set_active_device+0x17c>
   12f44:	20 81       	ld	r18, Z
   12f46:	c2 2f       	mov	r28, r18
   12f48:	d0 e0       	ldi	r29, 0x00	; 0
   12f4a:	87 81       	ldd	r24, Z+7	; 0x07
   12f4c:	90 85       	ldd	r25, Z+8	; 0x08
   12f4e:	00 97       	sbiw	r24, 0x00	; 0
   12f50:	89 f4       	brne	.+34     	; 0x12f74 <set_active_device+0xb0>
   12f52:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   12f56:	80 ff       	sbrs	r24, 0
   12f58:	73 c0       	rjmp	.+230    	; 0x13040 <set_active_device+0x17c>
   12f5a:	ce 01       	movw	r24, r28
   12f5c:	6d df       	rcall	.-294    	; 0x12e38 <type_to_str>
   12f5e:	ed b7       	in	r30, 0x3d	; 61
   12f60:	fe b7       	in	r31, 0x3e	; 62
   12f62:	91 87       	std	Z+9, r25	; 0x09
   12f64:	80 87       	std	Z+8, r24	; 0x08
   12f66:	d7 83       	std	Z+7, r29	; 0x07
   12f68:	c6 83       	std	Z+6, r28	; 0x06
   12f6a:	15 83       	std	Z+5, r17	; 0x05
   12f6c:	04 83       	std	Z+4, r16	; 0x04
   12f6e:	82 ea       	ldi	r24, 0xA2	; 162
   12f70:	9c e1       	ldi	r25, 0x1C	; 28
   12f72:	5e c0       	rjmp	.+188    	; 0x13030 <set_active_device+0x16c>
   12f74:	20 97       	sbiw	r28, 0x00	; 0
   12f76:	91 f4       	brne	.+36     	; 0x12f9c <set_active_device+0xd8>
   12f78:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   12f7c:	80 ff       	sbrs	r24, 0
   12f7e:	60 c0       	rjmp	.+192    	; 0x13040 <set_active_device+0x17c>
   12f80:	80 e0       	ldi	r24, 0x00	; 0
   12f82:	90 e0       	ldi	r25, 0x00	; 0
   12f84:	59 df       	rcall	.-334    	; 0x12e38 <type_to_str>
   12f86:	ed b7       	in	r30, 0x3d	; 61
   12f88:	fe b7       	in	r31, 0x3e	; 62
   12f8a:	91 87       	std	Z+9, r25	; 0x09
   12f8c:	80 87       	std	Z+8, r24	; 0x08
   12f8e:	17 82       	std	Z+7, r1	; 0x07
   12f90:	16 82       	std	Z+6, r1	; 0x06
   12f92:	15 83       	std	Z+5, r17	; 0x05
   12f94:	04 83       	std	Z+4, r16	; 0x04
   12f96:	8d e6       	ldi	r24, 0x6D	; 109
   12f98:	9c e1       	ldi	r25, 0x1C	; 28
   12f9a:	4a c0       	rjmp	.+148    	; 0x13030 <set_active_device+0x16c>
   12f9c:	c4 30       	cpi	r28, 0x04	; 4
   12f9e:	d1 05       	cpc	r29, r1
   12fa0:	29 f4       	brne	.+10     	; 0x12fac <set_active_device+0xe8>
   12fa2:	90 93 73 19 	sts	0x1973, r25	; 0x801973 <PRINTERp+0x1>
   12fa6:	80 93 72 19 	sts	0x1972, r24	; 0x801972 <PRINTERp>
   12faa:	30 c0       	rjmp	.+96     	; 0x1300c <set_active_device+0x148>
   12fac:	2d 7f       	andi	r18, 0xFD	; 253
   12fae:	21 30       	cpi	r18, 0x01	; 1
   12fb0:	79 f5       	brne	.+94     	; 0x13010 <set_active_device+0x14c>
   12fb2:	21 85       	ldd	r18, Z+9	; 0x09
   12fb4:	32 85       	ldd	r19, Z+10	; 0x0a
   12fb6:	21 15       	cp	r18, r1
   12fb8:	31 05       	cpc	r19, r1
   12fba:	89 f4       	brne	.+34     	; 0x12fde <set_active_device+0x11a>
   12fbc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   12fc0:	80 ff       	sbrs	r24, 0
   12fc2:	3e c0       	rjmp	.+124    	; 0x13040 <set_active_device+0x17c>
   12fc4:	ce 01       	movw	r24, r28
   12fc6:	38 df       	rcall	.-400    	; 0x12e38 <type_to_str>
   12fc8:	ed b7       	in	r30, 0x3d	; 61
   12fca:	fe b7       	in	r31, 0x3e	; 62
   12fcc:	91 87       	std	Z+9, r25	; 0x09
   12fce:	80 87       	std	Z+8, r24	; 0x08
   12fd0:	d7 83       	std	Z+7, r29	; 0x07
   12fd2:	c6 83       	std	Z+6, r28	; 0x06
   12fd4:	15 83       	std	Z+5, r17	; 0x05
   12fd6:	04 83       	std	Z+4, r16	; 0x04
   12fd8:	85 e3       	ldi	r24, 0x35	; 53
   12fda:	9c e1       	ldi	r25, 0x1C	; 28
   12fdc:	29 c0       	rjmp	.+82     	; 0x13030 <set_active_device+0x16c>
   12fde:	c1 30       	cpi	r28, 0x01	; 1
   12fe0:	d1 05       	cpc	r29, r1
   12fe2:	49 f4       	brne	.+18     	; 0x12ff6 <set_active_device+0x132>
   12fe4:	90 93 6d 19 	sts	0x196D, r25	; 0x80196d <AMIGOp+0x1>
   12fe8:	80 93 6c 19 	sts	0x196C, r24	; 0x80196c <AMIGOp>
   12fec:	30 93 6b 19 	sts	0x196B, r19	; 0x80196b <AMIGOs+0x1>
   12ff0:	20 93 6a 19 	sts	0x196A, r18	; 0x80196a <AMIGOs>
   12ff4:	0b c0       	rjmp	.+22     	; 0x1300c <set_active_device+0x148>
   12ff6:	c3 30       	cpi	r28, 0x03	; 3
   12ff8:	d1 05       	cpc	r29, r1
   12ffa:	51 f4       	brne	.+20     	; 0x13010 <set_active_device+0x14c>
   12ffc:	90 93 71 19 	sts	0x1971, r25	; 0x801971 <SS80p+0x1>
   13000:	80 93 70 19 	sts	0x1970, r24	; 0x801970 <SS80p>
   13004:	30 93 6f 19 	sts	0x196F, r19	; 0x80196f <SS80s+0x1>
   13008:	20 93 6e 19 	sts	0x196E, r18	; 0x80196e <SS80s>
   1300c:	81 e0       	ldi	r24, 0x01	; 1
   1300e:	19 c0       	rjmp	.+50     	; 0x13042 <set_active_device+0x17e>
   13010:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   13014:	80 ff       	sbrs	r24, 0
   13016:	14 c0       	rjmp	.+40     	; 0x13040 <set_active_device+0x17c>
   13018:	ce 01       	movw	r24, r28
   1301a:	0e df       	rcall	.-484    	; 0x12e38 <type_to_str>
   1301c:	ed b7       	in	r30, 0x3d	; 61
   1301e:	fe b7       	in	r31, 0x3e	; 62
   13020:	91 87       	std	Z+9, r25	; 0x09
   13022:	80 87       	std	Z+8, r24	; 0x08
   13024:	d7 83       	std	Z+7, r29	; 0x07
   13026:	c6 83       	std	Z+6, r28	; 0x06
   13028:	15 83       	std	Z+5, r17	; 0x05
   1302a:	04 83       	std	Z+4, r16	; 0x04
   1302c:	8a e0       	ldi	r24, 0x0A	; 10
   1302e:	9c e1       	ldi	r25, 0x1C	; 28
   13030:	a0 e0       	ldi	r26, 0x00	; 0
   13032:	cd b7       	in	r28, 0x3d	; 61
   13034:	de b7       	in	r29, 0x3e	; 62
   13036:	89 83       	std	Y+1, r24	; 0x01
   13038:	9a 83       	std	Y+2, r25	; 0x02
   1303a:	ab 83       	std	Y+3, r26	; 0x03
   1303c:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   13040:	80 e0       	ldi	r24, 0x00	; 0
   13042:	cd b7       	in	r28, 0x3d	; 61
   13044:	de b7       	in	r29, 0x3e	; 62
   13046:	29 96       	adiw	r28, 0x09	; 9
   13048:	e4 e0       	ldi	r30, 0x04	; 4
   1304a:	0c 94 29 e7 	jmp	0x1ce52	; 0x1ce52 <__epilogue_restores__+0x1c>

0001304e <SS80_Set_Defaults>:
   1304e:	0f 93       	push	r16
   13050:	1f 93       	push	r17
   13052:	cf 93       	push	r28
   13054:	df 93       	push	r29
   13056:	18 2f       	mov	r17, r24
   13058:	82 e0       	ldi	r24, 0x02	; 2
   1305a:	90 e0       	ldi	r25, 0x00	; 0
   1305c:	ca de       	rcall	.-620    	; 0x12df2 <find_type>
   1305e:	87 fd       	sbrc	r24, 7
   13060:	69 c0       	rjmp	.+210    	; 0x13134 <SS80_Set_Defaults+0xe6>
   13062:	2b e0       	ldi	r18, 0x0B	; 11
   13064:	12 03       	mulsu	r17, r18
   13066:	e0 01       	movw	r28, r0
   13068:	11 24       	eor	r1, r1
   1306a:	c4 50       	subi	r28, 0x04	; 4
   1306c:	d1 4e       	sbci	r29, 0xE1	; 225
   1306e:	0f 80       	ldd	r0, Y+7	; 0x07
   13070:	d8 85       	ldd	r29, Y+8	; 0x08
   13072:	c0 2d       	mov	r28, r0
   13074:	38 2f       	mov	r19, r24
   13076:	32 03       	mulsu	r19, r18
   13078:	f0 01       	movw	r30, r0
   1307a:	11 24       	eor	r1, r1
   1307c:	e4 50       	subi	r30, 0x04	; 4
   1307e:	f1 4e       	sbci	r31, 0xE1	; 225
   13080:	07 81       	ldd	r16, Z+7	; 0x07
   13082:	10 85       	ldd	r17, Z+8	; 0x08
   13084:	f8 01       	movw	r30, r16
   13086:	80 81       	ld	r24, Z
   13088:	88 83       	st	Y, r24
   1308a:	81 81       	ldd	r24, Z+1	; 0x01
   1308c:	89 83       	std	Y+1, r24	; 0x01
   1308e:	82 81       	ldd	r24, Z+2	; 0x02
   13090:	93 81       	ldd	r25, Z+3	; 0x03
   13092:	0e 94 1f 32 	call	0x643e	; 0x643e <stralloc>
   13096:	9b 83       	std	Y+3, r25	; 0x03
   13098:	8a 83       	std	Y+2, r24	; 0x02
   1309a:	f8 01       	movw	r30, r16
   1309c:	86 81       	ldd	r24, Z+6	; 0x06
   1309e:	97 81       	ldd	r25, Z+7	; 0x07
   130a0:	9f 83       	std	Y+7, r25	; 0x07
   130a2:	8e 83       	std	Y+6, r24	; 0x06
   130a4:	80 85       	ldd	r24, Z+8	; 0x08
   130a6:	91 85       	ldd	r25, Z+9	; 0x09
   130a8:	99 87       	std	Y+9, r25	; 0x09
   130aa:	88 87       	std	Y+8, r24	; 0x08
   130ac:	82 85       	ldd	r24, Z+10	; 0x0a
   130ae:	93 85       	ldd	r25, Z+11	; 0x0b
   130b0:	9b 87       	std	Y+11, r25	; 0x0b
   130b2:	8a 87       	std	Y+10, r24	; 0x0a
   130b4:	84 85       	ldd	r24, Z+12	; 0x0c
   130b6:	8c 87       	std	Y+12, r24	; 0x0c
   130b8:	85 85       	ldd	r24, Z+13	; 0x0d
   130ba:	8d 87       	std	Y+13, r24	; 0x0d
   130bc:	86 85       	ldd	r24, Z+14	; 0x0e
   130be:	97 85       	ldd	r25, Z+15	; 0x0f
   130c0:	a0 89       	ldd	r26, Z+16	; 0x10
   130c2:	b1 89       	ldd	r27, Z+17	; 0x11
   130c4:	8e 87       	std	Y+14, r24	; 0x0e
   130c6:	9f 87       	std	Y+15, r25	; 0x0f
   130c8:	a8 8b       	std	Y+16, r26	; 0x10
   130ca:	b9 8b       	std	Y+17, r27	; 0x11
   130cc:	82 89       	ldd	r24, Z+18	; 0x12
   130ce:	93 89       	ldd	r25, Z+19	; 0x13
   130d0:	9b 8b       	std	Y+19, r25	; 0x13
   130d2:	8a 8b       	std	Y+18, r24	; 0x12
   130d4:	84 89       	ldd	r24, Z+20	; 0x14
   130d6:	8c 8b       	std	Y+20, r24	; 0x14
   130d8:	85 89       	ldd	r24, Z+21	; 0x15
   130da:	8d 8b       	std	Y+21, r24	; 0x15
   130dc:	86 89       	ldd	r24, Z+22	; 0x16
   130de:	97 89       	ldd	r25, Z+23	; 0x17
   130e0:	9f 8b       	std	Y+23, r25	; 0x17
   130e2:	8e 8b       	std	Y+22, r24	; 0x16
   130e4:	80 8d       	ldd	r24, Z+24	; 0x18
   130e6:	91 8d       	ldd	r25, Z+25	; 0x19
   130e8:	99 8f       	std	Y+25, r25	; 0x19
   130ea:	88 8f       	std	Y+24, r24	; 0x18
   130ec:	82 8d       	ldd	r24, Z+26	; 0x1a
   130ee:	93 8d       	ldd	r25, Z+27	; 0x1b
   130f0:	9b 8f       	std	Y+27, r25	; 0x1b
   130f2:	8a 8f       	std	Y+26, r24	; 0x1a
   130f4:	84 8d       	ldd	r24, Z+28	; 0x1c
   130f6:	95 8d       	ldd	r25, Z+29	; 0x1d
   130f8:	9d 8f       	std	Y+29, r25	; 0x1d
   130fa:	8c 8f       	std	Y+28, r24	; 0x1c
   130fc:	86 8d       	ldd	r24, Z+30	; 0x1e
   130fe:	8e 8f       	std	Y+30, r24	; 0x1e
   13100:	87 8d       	ldd	r24, Z+31	; 0x1f
   13102:	8f 8f       	std	Y+31, r24	; 0x1f
   13104:	81 a1       	ldd	r24, Z+33	; 0x21
   13106:	92 a1       	ldd	r25, Z+34	; 0x22
   13108:	a3 a1       	ldd	r26, Z+35	; 0x23
   1310a:	b4 a1       	ldd	r27, Z+36	; 0x24
   1310c:	89 a3       	std	Y+33, r24	; 0x21
   1310e:	9a a3       	std	Y+34, r25	; 0x22
   13110:	ab a3       	std	Y+35, r26	; 0x23
   13112:	bc a3       	std	Y+36, r27	; 0x24
   13114:	85 a1       	ldd	r24, Z+37	; 0x25
   13116:	8d a3       	std	Y+37, r24	; 0x25
   13118:	86 a1       	ldd	r24, Z+38	; 0x26
   1311a:	97 a1       	ldd	r25, Z+39	; 0x27
   1311c:	9f a3       	std	Y+39, r25	; 0x27
   1311e:	8e a3       	std	Y+38, r24	; 0x26
   13120:	80 a5       	ldd	r24, Z+40	; 0x28
   13122:	91 a5       	ldd	r25, Z+41	; 0x29
   13124:	a2 a5       	ldd	r26, Z+42	; 0x2a
   13126:	b3 a5       	ldd	r27, Z+43	; 0x2b
   13128:	88 a7       	std	Y+40, r24	; 0x28
   1312a:	99 a7       	std	Y+41, r25	; 0x29
   1312c:	aa a7       	std	Y+42, r26	; 0x2a
   1312e:	bb a7       	std	Y+43, r27	; 0x2b
   13130:	84 a5       	ldd	r24, Z+44	; 0x2c
   13132:	8c a7       	std	Y+44, r24	; 0x2c
   13134:	df 91       	pop	r29
   13136:	cf 91       	pop	r28
   13138:	1f 91       	pop	r17
   1313a:	0f 91       	pop	r16
   1313c:	08 95       	ret

0001313e <free_device>:
   1313e:	0f 93       	push	r16
   13140:	1f 93       	push	r17
   13142:	cf 93       	push	r28
   13144:	df 93       	push	r29
   13146:	8c 30       	cpi	r24, 0x0C	; 12
   13148:	08 f0       	brcs	.+2      	; 0x1314c <free_device+0xe>
   1314a:	55 c0       	rjmp	.+170    	; 0x131f6 <free_device+0xb8>
   1314c:	08 2f       	mov	r16, r24
   1314e:	08 2e       	mov	r0, r24
   13150:	00 0c       	add	r0, r0
   13152:	11 0b       	sbc	r17, r17
   13154:	9b e0       	ldi	r25, 0x0B	; 11
   13156:	89 02       	muls	r24, r25
   13158:	f0 01       	movw	r30, r0
   1315a:	11 24       	eor	r1, r1
   1315c:	e4 50       	subi	r30, 0x04	; 4
   1315e:	f1 4e       	sbci	r31, 0xE1	; 225
   13160:	80 81       	ld	r24, Z
   13162:	83 30       	cpi	r24, 0x03	; 3
   13164:	51 f4       	brne	.+20     	; 0x1317a <free_device+0x3c>
   13166:	c7 81       	ldd	r28, Z+7	; 0x07
   13168:	d0 85       	ldd	r29, Z+8	; 0x08
   1316a:	8a 81       	ldd	r24, Y+2	; 0x02
   1316c:	9b 81       	ldd	r25, Y+3	; 0x03
   1316e:	0e 94 28 28 	call	0x5050	; 0x5050 <safefree>
   13172:	8c 81       	ldd	r24, Y+4	; 0x04
   13174:	9d 81       	ldd	r25, Y+5	; 0x05
   13176:	0e 94 28 28 	call	0x5050	; 0x5050 <safefree>
   1317a:	8b e0       	ldi	r24, 0x0B	; 11
   1317c:	80 9f       	mul	r24, r16
   1317e:	f0 01       	movw	r30, r0
   13180:	81 9f       	mul	r24, r17
   13182:	f0 0d       	add	r31, r0
   13184:	11 24       	eor	r1, r1
   13186:	e4 50       	subi	r30, 0x04	; 4
   13188:	f1 4e       	sbci	r31, 0xE1	; 225
   1318a:	80 81       	ld	r24, Z
   1318c:	81 30       	cpi	r24, 0x01	; 1
   1318e:	51 f4       	brne	.+20     	; 0x131a4 <free_device+0x66>
   13190:	c7 81       	ldd	r28, Z+7	; 0x07
   13192:	d0 85       	ldd	r29, Z+8	; 0x08
   13194:	8a 81       	ldd	r24, Y+2	; 0x02
   13196:	9b 81       	ldd	r25, Y+3	; 0x03
   13198:	0e 94 28 28 	call	0x5050	; 0x5050 <safefree>
   1319c:	8c 81       	ldd	r24, Y+4	; 0x04
   1319e:	9d 81       	ldd	r25, Y+5	; 0x05
   131a0:	0e 94 28 28 	call	0x5050	; 0x5050 <safefree>
   131a4:	8b e0       	ldi	r24, 0x0B	; 11
   131a6:	80 9f       	mul	r24, r16
   131a8:	f0 01       	movw	r30, r0
   131aa:	81 9f       	mul	r24, r17
   131ac:	f0 0d       	add	r31, r0
   131ae:	11 24       	eor	r1, r1
   131b0:	e4 50       	subi	r30, 0x04	; 4
   131b2:	f1 4e       	sbci	r31, 0xE1	; 225
   131b4:	80 81       	ld	r24, Z
   131b6:	84 30       	cpi	r24, 0x04	; 4
   131b8:	11 f4       	brne	.+4      	; 0x131be <free_device+0x80>
   131ba:	0e 94 b4 be 	call	0x17d68	; 0x17d68 <printer_close>
   131be:	8b e0       	ldi	r24, 0x0B	; 11
   131c0:	80 9f       	mul	r24, r16
   131c2:	e0 01       	movw	r28, r0
   131c4:	81 9f       	mul	r24, r17
   131c6:	d0 0d       	add	r29, r0
   131c8:	11 24       	eor	r1, r1
   131ca:	c4 50       	subi	r28, 0x04	; 4
   131cc:	d1 4e       	sbci	r29, 0xE1	; 225
   131ce:	8f 81       	ldd	r24, Y+7	; 0x07
   131d0:	98 85       	ldd	r25, Y+8	; 0x08
   131d2:	0e 94 28 28 	call	0x5050	; 0x5050 <safefree>
   131d6:	89 85       	ldd	r24, Y+9	; 0x09
   131d8:	9a 85       	ldd	r25, Y+10	; 0x0a
   131da:	0e 94 28 28 	call	0x5050	; 0x5050 <safefree>
   131de:	18 82       	st	Y, r1
   131e0:	19 82       	std	Y+1, r1	; 0x01
   131e2:	8f ef       	ldi	r24, 0xFF	; 255
   131e4:	8a 83       	std	Y+2, r24	; 0x02
   131e6:	1b 82       	std	Y+3, r1	; 0x03
   131e8:	1c 82       	std	Y+4, r1	; 0x04
   131ea:	1d 82       	std	Y+5, r1	; 0x05
   131ec:	1e 82       	std	Y+6, r1	; 0x06
   131ee:	18 86       	std	Y+8, r1	; 0x08
   131f0:	1f 82       	std	Y+7, r1	; 0x07
   131f2:	1a 86       	std	Y+10, r1	; 0x0a
   131f4:	19 86       	std	Y+9, r1	; 0x09
   131f6:	df 91       	pop	r29
   131f8:	cf 91       	pop	r28
   131fa:	1f 91       	pop	r17
   131fc:	0f 91       	pop	r16
   131fe:	08 95       	ret

00013200 <alloc_device>:
   13200:	0f 93       	push	r16
   13202:	1f 93       	push	r17
   13204:	cf 93       	push	r28
   13206:	ad b7       	in	r26, 0x3d	; 61
   13208:	be b7       	in	r27, 0x3e	; 62
   1320a:	17 97       	sbiw	r26, 0x07	; 7
   1320c:	0f b6       	in	r0, 0x3f	; 63
   1320e:	f8 94       	cli
   13210:	be bf       	out	0x3e, r27	; 62
   13212:	0f be       	out	0x3f, r0	; 63
   13214:	ad bf       	out	0x3d, r26	; 61
   13216:	8c 01       	movw	r16, r24
   13218:	28 de       	rcall	.-944    	; 0x12e6a <find_free>
   1321a:	c8 2f       	mov	r28, r24
   1321c:	8f 3f       	cpi	r24, 0xFF	; 255
   1321e:	89 f4       	brne	.+34     	; 0x13242 <alloc_device+0x42>
   13220:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   13224:	80 ff       	sbrs	r24, 0
   13226:	98 c0       	rjmp	.+304    	; 0x13358 <alloc_device+0x158>
   13228:	ed b7       	in	r30, 0x3d	; 61
   1322a:	fe b7       	in	r31, 0x3e	; 62
   1322c:	15 83       	std	Z+5, r17	; 0x05
   1322e:	04 83       	std	Z+4, r16	; 0x04
   13230:	86 ee       	ldi	r24, 0xE6	; 230
   13232:	9b e1       	ldi	r25, 0x1B	; 27
   13234:	a0 e0       	ldi	r26, 0x00	; 0
   13236:	81 83       	std	Z+1, r24	; 0x01
   13238:	92 83       	std	Z+2, r25	; 0x02
   1323a:	a3 83       	std	Z+3, r26	; 0x03
   1323c:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   13240:	8b c0       	rjmp	.+278    	; 0x13358 <alloc_device+0x158>
   13242:	02 30       	cpi	r16, 0x02	; 2
   13244:	11 05       	cpc	r17, r1
   13246:	c1 f1       	breq	.+112    	; 0x132b8 <alloc_device+0xb8>
   13248:	dc f4       	brge	.+54     	; 0x13280 <alloc_device+0x80>
   1324a:	01 30       	cpi	r16, 0x01	; 1
   1324c:	11 05       	cpc	r17, r1
   1324e:	09 f0       	breq	.+2      	; 0x13252 <alloc_device+0x52>
   13250:	6e c0       	rjmp	.+220    	; 0x1332e <alloc_device+0x12e>
   13252:	fb e0       	ldi	r31, 0x0B	; 11
   13254:	8f 02       	muls	r24, r31
   13256:	80 01       	movw	r16, r0
   13258:	11 24       	eor	r1, r1
   1325a:	04 50       	subi	r16, 0x04	; 4
   1325c:	11 4e       	sbci	r17, 0xE1	; 225
   1325e:	81 e0       	ldi	r24, 0x01	; 1
   13260:	f8 01       	movw	r30, r16
   13262:	80 83       	st	Z, r24
   13264:	61 e0       	ldi	r22, 0x01	; 1
   13266:	70 e0       	ldi	r23, 0x00	; 0
   13268:	87 e1       	ldi	r24, 0x17	; 23
   1326a:	90 e0       	ldi	r25, 0x00	; 0
   1326c:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <safecalloc>
   13270:	f8 01       	movw	r30, r16
   13272:	90 87       	std	Z+8, r25	; 0x08
   13274:	87 83       	std	Z+7, r24	; 0x07
   13276:	61 e0       	ldi	r22, 0x01	; 1
   13278:	70 e0       	ldi	r23, 0x00	; 0
   1327a:	88 e1       	ldi	r24, 0x18	; 24
   1327c:	90 e0       	ldi	r25, 0x00	; 0
   1327e:	51 c0       	rjmp	.+162    	; 0x13322 <alloc_device+0x122>
   13280:	03 30       	cpi	r16, 0x03	; 3
   13282:	11 05       	cpc	r17, r1
   13284:	81 f1       	breq	.+96     	; 0x132e6 <alloc_device+0xe6>
   13286:	04 30       	cpi	r16, 0x04	; 4
   13288:	11 05       	cpc	r17, r1
   1328a:	09 f0       	breq	.+2      	; 0x1328e <alloc_device+0x8e>
   1328c:	50 c0       	rjmp	.+160    	; 0x1332e <alloc_device+0x12e>
   1328e:	fb e0       	ldi	r31, 0x0B	; 11
   13290:	8f 02       	muls	r24, r31
   13292:	80 01       	movw	r16, r0
   13294:	11 24       	eor	r1, r1
   13296:	04 50       	subi	r16, 0x04	; 4
   13298:	11 4e       	sbci	r17, 0xE1	; 225
   1329a:	84 e0       	ldi	r24, 0x04	; 4
   1329c:	f8 01       	movw	r30, r16
   1329e:	80 83       	st	Z, r24
   132a0:	61 e0       	ldi	r22, 0x01	; 1
   132a2:	70 e0       	ldi	r23, 0x00	; 0
   132a4:	8d e0       	ldi	r24, 0x0D	; 13
   132a6:	90 e0       	ldi	r25, 0x00	; 0
   132a8:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <safecalloc>
   132ac:	f8 01       	movw	r30, r16
   132ae:	90 87       	std	Z+8, r25	; 0x08
   132b0:	87 83       	std	Z+7, r24	; 0x07
   132b2:	12 86       	std	Z+10, r1	; 0x0a
   132b4:	11 86       	std	Z+9, r1	; 0x09
   132b6:	50 c0       	rjmp	.+160    	; 0x13358 <alloc_device+0x158>
   132b8:	fb e0       	ldi	r31, 0x0B	; 11
   132ba:	8f 02       	muls	r24, r31
   132bc:	80 01       	movw	r16, r0
   132be:	11 24       	eor	r1, r1
   132c0:	04 50       	subi	r16, 0x04	; 4
   132c2:	11 4e       	sbci	r17, 0xE1	; 225
   132c4:	82 e0       	ldi	r24, 0x02	; 2
   132c6:	f8 01       	movw	r30, r16
   132c8:	80 83       	st	Z, r24
   132ca:	61 e0       	ldi	r22, 0x01	; 1
   132cc:	70 e0       	ldi	r23, 0x00	; 0
   132ce:	84 e3       	ldi	r24, 0x34	; 52
   132d0:	90 e0       	ldi	r25, 0x00	; 0
   132d2:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <safecalloc>
   132d6:	f8 01       	movw	r30, r16
   132d8:	90 87       	std	Z+8, r25	; 0x08
   132da:	87 83       	std	Z+7, r24	; 0x07
   132dc:	61 e0       	ldi	r22, 0x01	; 1
   132de:	70 e0       	ldi	r23, 0x00	; 0
   132e0:	86 e1       	ldi	r24, 0x16	; 22
   132e2:	90 e0       	ldi	r25, 0x00	; 0
   132e4:	1e c0       	rjmp	.+60     	; 0x13322 <alloc_device+0x122>
   132e6:	fb e0       	ldi	r31, 0x0B	; 11
   132e8:	8f 02       	muls	r24, r31
   132ea:	80 01       	movw	r16, r0
   132ec:	11 24       	eor	r1, r1
   132ee:	04 50       	subi	r16, 0x04	; 4
   132f0:	11 4e       	sbci	r17, 0xE1	; 225
   132f2:	83 e0       	ldi	r24, 0x03	; 3
   132f4:	f8 01       	movw	r30, r16
   132f6:	80 83       	st	Z, r24
   132f8:	61 e0       	ldi	r22, 0x01	; 1
   132fa:	70 e0       	ldi	r23, 0x00	; 0
   132fc:	84 e3       	ldi	r24, 0x34	; 52
   132fe:	90 e0       	ldi	r25, 0x00	; 0
   13300:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <safecalloc>
   13304:	f8 01       	movw	r30, r16
   13306:	90 87       	std	Z+8, r25	; 0x08
   13308:	87 83       	std	Z+7, r24	; 0x07
   1330a:	61 e0       	ldi	r22, 0x01	; 1
   1330c:	70 e0       	ldi	r23, 0x00	; 0
   1330e:	86 e1       	ldi	r24, 0x16	; 22
   13310:	90 e0       	ldi	r25, 0x00	; 0
   13312:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <safecalloc>
   13316:	f8 01       	movw	r30, r16
   13318:	92 87       	std	Z+10, r25	; 0x0a
   1331a:	81 87       	std	Z+9, r24	; 0x09
   1331c:	8c 2f       	mov	r24, r28
   1331e:	97 de       	rcall	.-722    	; 0x1304e <SS80_Set_Defaults>
   13320:	1b c0       	rjmp	.+54     	; 0x13358 <alloc_device+0x158>
   13322:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <safecalloc>
   13326:	f8 01       	movw	r30, r16
   13328:	92 87       	std	Z+10, r25	; 0x0a
   1332a:	81 87       	std	Z+9, r24	; 0x09
   1332c:	15 c0       	rjmp	.+42     	; 0x13358 <alloc_device+0x158>
   1332e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   13332:	80 ff       	sbrs	r24, 0
   13334:	10 c0       	rjmp	.+32     	; 0x13356 <alloc_device+0x156>
   13336:	c8 01       	movw	r24, r16
   13338:	7f dd       	rcall	.-1282   	; 0x12e38 <type_to_str>
   1333a:	ed b7       	in	r30, 0x3d	; 61
   1333c:	fe b7       	in	r31, 0x3e	; 62
   1333e:	97 83       	std	Z+7, r25	; 0x07
   13340:	86 83       	std	Z+6, r24	; 0x06
   13342:	15 83       	std	Z+5, r17	; 0x05
   13344:	04 83       	std	Z+4, r16	; 0x04
   13346:	84 ec       	ldi	r24, 0xC4	; 196
   13348:	9b e1       	ldi	r25, 0x1B	; 27
   1334a:	a0 e0       	ldi	r26, 0x00	; 0
   1334c:	81 83       	std	Z+1, r24	; 0x01
   1334e:	92 83       	std	Z+2, r25	; 0x02
   13350:	a3 83       	std	Z+3, r26	; 0x03
   13352:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   13356:	cf ef       	ldi	r28, 0xFF	; 255
   13358:	8c 2f       	mov	r24, r28
   1335a:	ad b7       	in	r26, 0x3d	; 61
   1335c:	be b7       	in	r27, 0x3e	; 62
   1335e:	17 96       	adiw	r26, 0x07	; 7
   13360:	0f b6       	in	r0, 0x3f	; 63
   13362:	f8 94       	cli
   13364:	be bf       	out	0x3e, r27	; 62
   13366:	0f be       	out	0x3f, r0	; 63
   13368:	ad bf       	out	0x3d, r26	; 61
   1336a:	cf 91       	pop	r28
   1336c:	1f 91       	pop	r17
   1336e:	0f 91       	pop	r16
   13370:	08 95       	ret

00013372 <init_Devices>:
   13372:	10 92 7f 19 	sts	0x197F, r1	; 0x80197f <stack_ind+0x1>
   13376:	10 92 7e 19 	sts	0x197E, r1	; 0x80197e <stack_ind>
   1337a:	ec ef       	ldi	r30, 0xFC	; 252
   1337c:	fe e1       	ldi	r31, 0x1E	; 30
   1337e:	8f ef       	ldi	r24, 0xFF	; 255
   13380:	10 82       	st	Z, r1
   13382:	11 82       	std	Z+1, r1	; 0x01
   13384:	82 83       	std	Z+2, r24	; 0x02
   13386:	13 82       	std	Z+3, r1	; 0x03
   13388:	14 82       	std	Z+4, r1	; 0x04
   1338a:	15 82       	std	Z+5, r1	; 0x05
   1338c:	16 82       	std	Z+6, r1	; 0x06
   1338e:	10 86       	std	Z+8, r1	; 0x08
   13390:	17 82       	std	Z+7, r1	; 0x07
   13392:	12 86       	std	Z+10, r1	; 0x0a
   13394:	11 86       	std	Z+9, r1	; 0x09
   13396:	3b 96       	adiw	r30, 0x0b	; 11
   13398:	9f e1       	ldi	r25, 0x1F	; 31
   1339a:	e0 38       	cpi	r30, 0x80	; 128
   1339c:	f9 07       	cpc	r31, r25
   1339e:	81 f7       	brne	.-32     	; 0x13380 <init_Devices+0xe>
   133a0:	08 95       	ret

000133a2 <push_state>:
   133a2:	20 91 7e 19 	lds	r18, 0x197E	; 0x80197e <stack_ind>
   133a6:	30 91 7f 19 	lds	r19, 0x197F	; 0x80197f <stack_ind+0x1>
   133aa:	25 30       	cpi	r18, 0x05	; 5
   133ac:	31 05       	cpc	r19, r1
   133ae:	7c f4       	brge	.+30     	; 0x133ce <push_state+0x2c>
   133b0:	a9 01       	movw	r20, r18
   133b2:	4f 5f       	subi	r20, 0xFF	; 255
   133b4:	5f 4f       	sbci	r21, 0xFF	; 255
   133b6:	50 93 7f 19 	sts	0x197F, r21	; 0x80197f <stack_ind+0x1>
   133ba:	40 93 7e 19 	sts	0x197E, r20	; 0x80197e <stack_ind>
   133be:	22 0f       	add	r18, r18
   133c0:	33 1f       	adc	r19, r19
   133c2:	f9 01       	movw	r30, r18
   133c4:	ec 58       	subi	r30, 0x8C	; 140
   133c6:	f6 4e       	sbci	r31, 0xE6	; 230
   133c8:	80 83       	st	Z, r24
   133ca:	91 83       	std	Z+1, r25	; 0x01
   133cc:	08 95       	ret
   133ce:	80 e0       	ldi	r24, 0x00	; 0
   133d0:	90 e0       	ldi	r25, 0x00	; 0
   133d2:	08 95       	ret

000133d4 <pop_state>:
   133d4:	80 91 7e 19 	lds	r24, 0x197E	; 0x80197e <stack_ind>
   133d8:	90 91 7f 19 	lds	r25, 0x197F	; 0x80197f <stack_ind+0x1>
   133dc:	18 16       	cp	r1, r24
   133de:	19 06       	cpc	r1, r25
   133e0:	6c f4       	brge	.+26     	; 0x133fc <pop_state+0x28>
   133e2:	01 97       	sbiw	r24, 0x01	; 1
   133e4:	90 93 7f 19 	sts	0x197F, r25	; 0x80197f <stack_ind+0x1>
   133e8:	80 93 7e 19 	sts	0x197E, r24	; 0x80197e <stack_ind>
   133ec:	88 0f       	add	r24, r24
   133ee:	99 1f       	adc	r25, r25
   133f0:	fc 01       	movw	r30, r24
   133f2:	ec 58       	subi	r30, 0x8C	; 140
   133f4:	f6 4e       	sbci	r31, 0xE6	; 230
   133f6:	80 81       	ld	r24, Z
   133f8:	91 81       	ldd	r25, Z+1	; 0x01
   133fa:	08 95       	ret
   133fc:	80 e0       	ldi	r24, 0x00	; 0
   133fe:	90 e0       	ldi	r25, 0x00	; 0
   13400:	08 95       	ret

00013402 <set_Config_Defaults>:
   13402:	08 95       	ret

00013404 <hpdir_set_device>:
   13404:	cf 93       	push	r28
   13406:	df 93       	push	r29
   13408:	00 d0       	rcall	.+0      	; 0x1340a <hpdir_set_device+0x6>
   1340a:	1f 92       	push	r1
   1340c:	2b e0       	ldi	r18, 0x0B	; 11
   1340e:	82 02       	muls	r24, r18
   13410:	c0 01       	movw	r24, r0
   13412:	11 24       	eor	r1, r1
   13414:	fc 01       	movw	r30, r24
   13416:	e4 50       	subi	r30, 0x04	; 4
   13418:	f1 4e       	sbci	r31, 0xE1	; 225
   1341a:	80 81       	ld	r24, Z
   1341c:	83 30       	cpi	r24, 0x03	; 3
   1341e:	a1 f5       	brne	.+104    	; 0x13488 <hpdir_set_device+0x84>
   13420:	c7 81       	ldd	r28, Z+7	; 0x07
   13422:	d0 85       	ldd	r29, Z+8	; 0x08
   13424:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <hpdir+0x80>
   13428:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <hpdir+0x81>
   1342c:	9f 83       	std	Y+7, r25	; 0x07
   1342e:	8e 83       	std	Y+6, r24	; 0x06
   13430:	80 91 0c 20 	lds	r24, 0x200C	; 0x80200c <hpdir+0x8c>
   13434:	90 91 0d 20 	lds	r25, 0x200D	; 0x80200d <hpdir+0x8d>
   13438:	a0 91 0e 20 	lds	r26, 0x200E	; 0x80200e <hpdir+0x8e>
   1343c:	b0 91 0f 20 	lds	r27, 0x200F	; 0x80200f <hpdir+0x8f>
   13440:	8e 87       	std	Y+14, r24	; 0x0e
   13442:	9f 87       	std	Y+15, r25	; 0x0f
   13444:	a8 8b       	std	Y+16, r26	; 0x10
   13446:	b9 8b       	std	Y+17, r27	; 0x11
   13448:	80 91 20 20 	lds	r24, 0x2020	; 0x802020 <hpdir+0xa0>
   1344c:	90 91 21 20 	lds	r25, 0x2021	; 0x802021 <hpdir+0xa1>
   13450:	9b 8b       	std	Y+19, r25	; 0x13
   13452:	8a 8b       	std	Y+18, r24	; 0x12
   13454:	19 a2       	std	Y+33, r1	; 0x21
   13456:	1a a2       	std	Y+34, r1	; 0x22
   13458:	1b a2       	std	Y+35, r1	; 0x23
   1345a:	1c a2       	std	Y+36, r1	; 0x24
   1345c:	1d a2       	std	Y+37, r1	; 0x25
   1345e:	1f a2       	std	Y+39, r1	; 0x27
   13460:	1e a2       	std	Y+38, r1	; 0x26
   13462:	80 91 2c 20 	lds	r24, 0x202C	; 0x80202c <hpdir+0xac>
   13466:	90 91 2d 20 	lds	r25, 0x202D	; 0x80202d <hpdir+0xad>
   1346a:	a0 91 2e 20 	lds	r26, 0x202E	; 0x80202e <hpdir+0xae>
   1346e:	b0 91 2f 20 	lds	r27, 0x202F	; 0x80202f <hpdir+0xaf>
   13472:	ac 01       	movw	r20, r24
   13474:	bd 01       	movw	r22, r26
   13476:	41 50       	subi	r20, 0x01	; 1
   13478:	51 09       	sbc	r21, r1
   1347a:	61 09       	sbc	r22, r1
   1347c:	71 09       	sbc	r23, r1
   1347e:	48 a7       	std	Y+40, r20	; 0x28
   13480:	59 a7       	std	Y+41, r21	; 0x29
   13482:	6a a7       	std	Y+42, r22	; 0x2a
   13484:	7b a7       	std	Y+43, r23	; 0x2b
   13486:	2a c0       	rjmp	.+84     	; 0x134dc <hpdir_set_device+0xd8>
   13488:	81 30       	cpi	r24, 0x01	; 1
   1348a:	a1 f5       	brne	.+104    	; 0x134f4 <hpdir_set_device+0xf0>
   1348c:	c7 81       	ldd	r28, Z+7	; 0x07
   1348e:	d0 85       	ldd	r29, Z+8	; 0x08
   13490:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <hpdir+0x80>
   13494:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <hpdir+0x81>
   13498:	9f 83       	std	Y+7, r25	; 0x07
   1349a:	8e 83       	std	Y+6, r24	; 0x06
   1349c:	80 91 20 20 	lds	r24, 0x2020	; 0x802020 <hpdir+0xa0>
   134a0:	90 91 21 20 	lds	r25, 0x2021	; 0x802021 <hpdir+0xa1>
   134a4:	99 87       	std	Y+9, r25	; 0x09
   134a6:	88 87       	std	Y+8, r24	; 0x08
   134a8:	80 91 1c 20 	lds	r24, 0x201C	; 0x80201c <hpdir+0x9c>
   134ac:	90 91 1d 20 	lds	r25, 0x201D	; 0x80201d <hpdir+0x9d>
   134b0:	9b 87       	std	Y+11, r25	; 0x0b
   134b2:	8a 87       	std	Y+10, r24	; 0x0a
   134b4:	80 91 18 20 	lds	r24, 0x2018	; 0x802018 <hpdir+0x98>
   134b8:	90 91 19 20 	lds	r25, 0x2019	; 0x802019 <hpdir+0x99>
   134bc:	9d 87       	std	Y+13, r25	; 0x0d
   134be:	8c 87       	std	Y+12, r24	; 0x0c
   134c0:	80 91 14 20 	lds	r24, 0x2014	; 0x802014 <hpdir+0x94>
   134c4:	90 91 15 20 	lds	r25, 0x2015	; 0x802015 <hpdir+0x95>
   134c8:	9f 87       	std	Y+15, r25	; 0x0f
   134ca:	8e 87       	std	Y+14, r24	; 0x0e
   134cc:	80 91 2c 20 	lds	r24, 0x202C	; 0x80202c <hpdir+0xac>
   134d0:	90 91 2d 20 	lds	r25, 0x202D	; 0x80202d <hpdir+0xad>
   134d4:	a0 91 2e 20 	lds	r26, 0x202E	; 0x80202e <hpdir+0xae>
   134d8:	b0 91 2f 20 	lds	r27, 0x202F	; 0x80202f <hpdir+0xaf>
   134dc:	83 83       	std	Z+3, r24	; 0x03
   134de:	94 83       	std	Z+4, r25	; 0x04
   134e0:	a5 83       	std	Z+5, r26	; 0x05
   134e2:	b6 83       	std	Z+6, r27	; 0x06
   134e4:	80 e8       	ldi	r24, 0x80	; 128
   134e6:	9f e1       	ldi	r25, 0x1F	; 31
   134e8:	0e 94 1f 32 	call	0x643e	; 0x643e <stralloc>
   134ec:	9d 83       	std	Y+5, r25	; 0x05
   134ee:	8c 83       	std	Y+4, r24	; 0x04
   134f0:	81 e0       	ldi	r24, 0x01	; 1
   134f2:	0b c0       	rjmp	.+22     	; 0x1350a <hpdir_set_device+0x106>
   134f4:	8c e9       	ldi	r24, 0x9C	; 156
   134f6:	9b e1       	ldi	r25, 0x1B	; 27
   134f8:	a0 e0       	ldi	r26, 0x00	; 0
   134fa:	ed b7       	in	r30, 0x3d	; 61
   134fc:	fe b7       	in	r31, 0x3e	; 62
   134fe:	81 83       	std	Z+1, r24	; 0x01
   13500:	92 83       	std	Z+2, r25	; 0x02
   13502:	a3 83       	std	Z+3, r26	; 0x03
   13504:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   13508:	80 e0       	ldi	r24, 0x00	; 0
   1350a:	cd b7       	in	r28, 0x3d	; 61
   1350c:	de b7       	in	r29, 0x3e	; 62
   1350e:	23 96       	adiw	r28, 0x03	; 3
   13510:	e2 e0       	ldi	r30, 0x02	; 2
   13512:	0c 94 2b e7 	jmp	0x1ce56	; 0x1ce56 <__epilogue_restores__+0x20>

00013516 <hpdir_set_parameters>:
   13516:	cf 93       	push	r28
   13518:	00 d0       	rcall	.+0      	; 0x1351a <hpdir_set_parameters+0x4>
   1351a:	1f 92       	push	r1
   1351c:	c8 2f       	mov	r28, r24
   1351e:	cb 01       	movw	r24, r22
   13520:	41 e0       	ldi	r20, 0x01	; 1
   13522:	50 e0       	ldi	r21, 0x00	; 0
   13524:	60 e0       	ldi	r22, 0x00	; 0
   13526:	70 e0       	ldi	r23, 0x00	; 0
   13528:	0e 94 0e a4 	call	0x1481c	; 0x1481c <hpdir_find_drive>
   1352c:	89 2b       	or	r24, r25
   1352e:	19 f0       	breq	.+6      	; 0x13536 <hpdir_set_parameters+0x20>
   13530:	8c 2f       	mov	r24, r28
   13532:	68 df       	rcall	.-304    	; 0x13404 <hpdir_set_device>
   13534:	0b c0       	rjmp	.+22     	; 0x1354c <hpdir_set_parameters+0x36>
   13536:	84 e7       	ldi	r24, 0x74	; 116
   13538:	9b e1       	ldi	r25, 0x1B	; 27
   1353a:	a0 e0       	ldi	r26, 0x00	; 0
   1353c:	ed b7       	in	r30, 0x3d	; 61
   1353e:	fe b7       	in	r31, 0x3e	; 62
   13540:	81 83       	std	Z+1, r24	; 0x01
   13542:	92 83       	std	Z+2, r25	; 0x02
   13544:	a3 83       	std	Z+3, r26	; 0x03
   13546:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   1354a:	80 e0       	ldi	r24, 0x00	; 0
   1354c:	0f 90       	pop	r0
   1354e:	0f 90       	pop	r0
   13550:	0f 90       	pop	r0
   13552:	cf 91       	pop	r28
   13554:	08 95       	ret

00013556 <format_drives>:
   13556:	2f 92       	push	r2
   13558:	3f 92       	push	r3
   1355a:	4f 92       	push	r4
   1355c:	5f 92       	push	r5
   1355e:	6f 92       	push	r6
   13560:	7f 92       	push	r7
   13562:	8f 92       	push	r8
   13564:	af 92       	push	r10
   13566:	bf 92       	push	r11
   13568:	cf 92       	push	r12
   1356a:	df 92       	push	r13
   1356c:	ef 92       	push	r14
   1356e:	ff 92       	push	r15
   13570:	0f 93       	push	r16
   13572:	1f 93       	push	r17
   13574:	cf 93       	push	r28
   13576:	df 93       	push	r29
   13578:	cd b7       	in	r28, 0x3d	; 61
   1357a:	de b7       	in	r29, 0x3e	; 62
   1357c:	ce 56       	subi	r28, 0x6E	; 110
   1357e:	d1 09       	sbc	r29, r1
   13580:	0f b6       	in	r0, 0x3f	; 63
   13582:	f8 94       	cli
   13584:	de bf       	out	0x3e, r29	; 62
   13586:	0f be       	out	0x3f, r0	; 63
   13588:	cd bf       	out	0x3d, r28	; 61
   1358a:	8c ef       	ldi	r24, 0xFC	; 252
   1358c:	c8 2e       	mov	r12, r24
   1358e:	8e e1       	ldi	r24, 0x1E	; 30
   13590:	d8 2e       	mov	r13, r24
   13592:	a0 96       	adiw	r28, 0x20	; 32
   13594:	1f ae       	std	Y+63, r1	; 0x3f
   13596:	1e ae       	std	Y+62, r1	; 0x3e
   13598:	a0 97       	sbiw	r28, 0x20	; 32
   1359a:	6e 96       	adiw	r28, 0x1e	; 30
   1359c:	1f ae       	std	Y+63, r1	; 0x3f
   1359e:	1e ae       	std	Y+62, r1	; 0x3e
   135a0:	6e 97       	sbiw	r28, 0x1e	; 30
   135a2:	6c 96       	adiw	r28, 0x1c	; 28
   135a4:	1f ae       	std	Y+63, r1	; 0x3f
   135a6:	1e ae       	std	Y+62, r1	; 0x3e
   135a8:	6c 97       	sbiw	r28, 0x1c	; 28
   135aa:	81 e5       	ldi	r24, 0x51	; 81
   135ac:	9a e1       	ldi	r25, 0x1A	; 26
   135ae:	9c 01       	movw	r18, r24
   135b0:	40 e0       	ldi	r20, 0x00	; 0
   135b2:	a3 96       	adiw	r28, 0x23	; 35
   135b4:	2d af       	std	Y+61, r18	; 0x3d
   135b6:	3e af       	std	Y+62, r19	; 0x3e
   135b8:	4f af       	std	Y+63, r20	; 0x3f
   135ba:	a3 97       	sbiw	r28, 0x23	; 35
   135bc:	89 e4       	ldi	r24, 0x49	; 73
   135be:	9a e1       	ldi	r25, 0x1A	; 26
   135c0:	9c 01       	movw	r18, r24
   135c2:	40 e0       	ldi	r20, 0x00	; 0
   135c4:	a6 96       	adiw	r28, 0x26	; 38
   135c6:	2d af       	std	Y+61, r18	; 0x3d
   135c8:	3e af       	std	Y+62, r19	; 0x3e
   135ca:	4f af       	std	Y+63, r20	; 0x3f
   135cc:	a6 97       	sbiw	r28, 0x26	; 38
   135ce:	8b e6       	ldi	r24, 0x6B	; 107
   135d0:	9a e1       	ldi	r25, 0x1A	; 26
   135d2:	9c 01       	movw	r18, r24
   135d4:	40 e0       	ldi	r20, 0x00	; 0
   135d6:	a9 96       	adiw	r28, 0x29	; 41
   135d8:	2d af       	std	Y+61, r18	; 0x3d
   135da:	3e af       	std	Y+62, r19	; 0x3e
   135dc:	4f af       	std	Y+63, r20	; 0x3f
   135de:	a9 97       	sbiw	r28, 0x29	; 41
   135e0:	85 e9       	ldi	r24, 0x95	; 149
   135e2:	9a e1       	ldi	r25, 0x1A	; 26
   135e4:	9c 01       	movw	r18, r24
   135e6:	40 e0       	ldi	r20, 0x00	; 0
   135e8:	ac 96       	adiw	r28, 0x2c	; 44
   135ea:	2d af       	std	Y+61, r18	; 0x3d
   135ec:	3e af       	std	Y+62, r19	; 0x3e
   135ee:	4f af       	std	Y+63, r20	; 0x3f
   135f0:	ac 97       	sbiw	r28, 0x2c	; 44
   135f2:	8d e8       	ldi	r24, 0x8D	; 141
   135f4:	9a e1       	ldi	r25, 0x1A	; 26
   135f6:	9c 01       	movw	r18, r24
   135f8:	40 e0       	ldi	r20, 0x00	; 0
   135fa:	af 96       	adiw	r28, 0x2f	; 47
   135fc:	2d af       	std	Y+61, r18	; 0x3d
   135fe:	3e af       	std	Y+62, r19	; 0x3e
   13600:	4f af       	std	Y+63, r20	; 0x3f
   13602:	af 97       	sbiw	r28, 0x2f	; 47
   13604:	8f ea       	ldi	r24, 0xAF	; 175
   13606:	9a e1       	ldi	r25, 0x1A	; 26
   13608:	3c 01       	movw	r6, r24
   1360a:	81 2c       	mov	r8, r1
   1360c:	f6 01       	movw	r30, r12
   1360e:	80 81       	ld	r24, Z
   13610:	88 23       	and	r24, r24
   13612:	09 f4       	brne	.+2      	; 0x13616 <format_drives+0xc0>
   13614:	f1 c0       	rjmp	.+482    	; 0x137f8 <format_drives+0x2a2>
   13616:	83 30       	cpi	r24, 0x03	; 3
   13618:	09 f0       	breq	.+2      	; 0x1361c <format_drives+0xc6>
   1361a:	71 c0       	rjmp	.+226    	; 0x136fe <format_drives+0x1a8>
   1361c:	a7 80       	ldd	r10, Z+7	; 0x07
   1361e:	b0 84       	ldd	r11, Z+8	; 0x08
   13620:	be 01       	movw	r22, r28
   13622:	66 5f       	subi	r22, 0xF6	; 246
   13624:	7f 4f       	sbci	r23, 0xFF	; 255
   13626:	f5 01       	movw	r30, r10
   13628:	82 81       	ldd	r24, Z+2	; 0x02
   1362a:	93 81       	ldd	r25, Z+3	; 0x03
   1362c:	0e 94 77 79 	call	0xf2ee	; 0xf2ee <stat>
   13630:	01 96       	adiw	r24, 0x01	; 1
   13632:	09 f0       	breq	.+2      	; 0x13636 <format_drives+0xe0>
   13634:	64 c0       	rjmp	.+200    	; 0x136fe <format_drives+0x1a8>
   13636:	f5 01       	movw	r30, r10
   13638:	82 89       	ldd	r24, Z+18	; 0x12
   1363a:	93 89       	ldd	r25, Z+19	; 0x13
   1363c:	81 15       	cp	r24, r1
   1363e:	91 40       	sbci	r25, 0x01	; 1
   13640:	31 f0       	breq	.+12     	; 0x1364e <format_drives+0xf8>
   13642:	ed b7       	in	r30, 0x3d	; 61
   13644:	fe b7       	in	r31, 0x3e	; 62
   13646:	61 82       	std	Z+1, r6	; 0x01
   13648:	72 82       	std	Z+2, r7	; 0x02
   1364a:	83 82       	std	Z+3, r8	; 0x03
   1364c:	7a c0       	rjmp	.+244    	; 0x13742 <format_drives+0x1ec>
   1364e:	f6 01       	movw	r30, r12
   13650:	23 80       	ldd	r2, Z+3	; 0x03
   13652:	34 80       	ldd	r3, Z+4	; 0x04
   13654:	45 80       	ldd	r4, Z+5	; 0x05
   13656:	56 80       	ldd	r5, Z+6	; 0x06
   13658:	ed b7       	in	r30, 0x3d	; 61
   1365a:	fe b7       	in	r31, 0x3e	; 62
   1365c:	26 82       	std	Z+6, r2	; 0x06
   1365e:	37 82       	std	Z+7, r3	; 0x07
   13660:	40 86       	std	Z+8, r4	; 0x08
   13662:	51 86       	std	Z+9, r5	; 0x09
   13664:	f5 01       	movw	r30, r10
   13666:	82 81       	ldd	r24, Z+2	; 0x02
   13668:	93 81       	ldd	r25, Z+3	; 0x03
   1366a:	ed b7       	in	r30, 0x3d	; 61
   1366c:	fe b7       	in	r31, 0x3e	; 62
   1366e:	95 83       	std	Z+5, r25	; 0x05
   13670:	84 83       	std	Z+4, r24	; 0x04
   13672:	ac 96       	adiw	r28, 0x2c	; 44
   13674:	2d ad       	ldd	r18, Y+61	; 0x3d
   13676:	3e ad       	ldd	r19, Y+62	; 0x3e
   13678:	4f ad       	ldd	r20, Y+63	; 0x3f
   1367a:	ac 97       	sbiw	r28, 0x2c	; 44
   1367c:	21 83       	std	Z+1, r18	; 0x01
   1367e:	32 83       	std	Z+2, r19	; 0x02
   13680:	43 83       	std	Z+3, r20	; 0x03
   13682:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   13686:	6e 96       	adiw	r28, 0x1e	; 30
   13688:	2e ad       	ldd	r18, Y+62	; 0x3e
   1368a:	3f ad       	ldd	r19, Y+63	; 0x3f
   1368c:	6e 97       	sbiw	r28, 0x1e	; 30
   1368e:	ed b7       	in	r30, 0x3d	; 61
   13690:	fe b7       	in	r31, 0x3e	; 62
   13692:	37 83       	std	Z+7, r19	; 0x07
   13694:	26 83       	std	Z+6, r18	; 0x06
   13696:	af 96       	adiw	r28, 0x2f	; 47
   13698:	8d ad       	ldd	r24, Y+61	; 0x3d
   1369a:	9e ad       	ldd	r25, Y+62	; 0x3e
   1369c:	af ad       	ldd	r26, Y+63	; 0x3f
   1369e:	af 97       	sbiw	r28, 0x2f	; 47
   136a0:	83 83       	std	Z+3, r24	; 0x03
   136a2:	94 83       	std	Z+4, r25	; 0x04
   136a4:	a5 83       	std	Z+5, r26	; 0x05
   136a6:	2a e3       	ldi	r18, 0x3A	; 58
   136a8:	30 e0       	ldi	r19, 0x00	; 0
   136aa:	2c 0f       	add	r18, r28
   136ac:	3d 1f       	adc	r19, r29
   136ae:	32 83       	std	Z+2, r19	; 0x02
   136b0:	21 83       	std	Z+1, r18	; 0x01
   136b2:	0e 94 1c 47 	call	0x8e38	; 0x8e38 <sprintf_P>
   136b6:	f5 01       	movw	r30, r10
   136b8:	a2 80       	ldd	r10, Z+2	; 0x02
   136ba:	b3 80       	ldd	r11, Z+3	; 0x03
   136bc:	c2 01       	movw	r24, r4
   136be:	b1 01       	movw	r22, r2
   136c0:	0e 94 f1 a3 	call	0x147e2	; 0x147e2 <lif_dir_count>
   136c4:	9b 01       	movw	r18, r22
   136c6:	ac 01       	movw	r20, r24
   136c8:	82 01       	movw	r16, r4
   136ca:	71 01       	movw	r14, r2
   136cc:	be 01       	movw	r22, r28
   136ce:	66 5c       	subi	r22, 0xC6	; 198
   136d0:	7f 4f       	sbci	r23, 0xFF	; 255
   136d2:	c5 01       	movw	r24, r10
   136d4:	0e 94 7a de 	call	0x1bcf4	; 0x1bcf4 <lif_create_image>
   136d8:	6c 96       	adiw	r28, 0x1c	; 28
   136da:	2e ad       	ldd	r18, Y+62	; 0x3e
   136dc:	3f ad       	ldd	r19, Y+63	; 0x3f
   136de:	6c 97       	sbiw	r28, 0x1c	; 28
   136e0:	2f 5f       	subi	r18, 0xFF	; 255
   136e2:	3f 4f       	sbci	r19, 0xFF	; 255
   136e4:	6c 96       	adiw	r28, 0x1c	; 28
   136e6:	3f af       	std	Y+63, r19	; 0x3f
   136e8:	2e af       	std	Y+62, r18	; 0x3e
   136ea:	6c 97       	sbiw	r28, 0x1c	; 28
   136ec:	6e 96       	adiw	r28, 0x1e	; 30
   136ee:	8e ad       	ldd	r24, Y+62	; 0x3e
   136f0:	9f ad       	ldd	r25, Y+63	; 0x3f
   136f2:	6e 97       	sbiw	r28, 0x1e	; 30
   136f4:	01 96       	adiw	r24, 0x01	; 1
   136f6:	6e 96       	adiw	r28, 0x1e	; 30
   136f8:	9f af       	std	Y+63, r25	; 0x3f
   136fa:	8e af       	std	Y+62, r24	; 0x3e
   136fc:	6e 97       	sbiw	r28, 0x1e	; 30
   136fe:	f6 01       	movw	r30, r12
   13700:	80 81       	ld	r24, Z
   13702:	81 30       	cpi	r24, 0x01	; 1
   13704:	09 f0       	breq	.+2      	; 0x13708 <format_drives+0x1b2>
   13706:	78 c0       	rjmp	.+240    	; 0x137f8 <format_drives+0x2a2>
   13708:	a7 80       	ldd	r10, Z+7	; 0x07
   1370a:	b0 84       	ldd	r11, Z+8	; 0x08
   1370c:	be 01       	movw	r22, r28
   1370e:	66 5f       	subi	r22, 0xF6	; 246
   13710:	7f 4f       	sbci	r23, 0xFF	; 255
   13712:	f5 01       	movw	r30, r10
   13714:	82 81       	ldd	r24, Z+2	; 0x02
   13716:	93 81       	ldd	r25, Z+3	; 0x03
   13718:	0e 94 77 79 	call	0xf2ee	; 0xf2ee <stat>
   1371c:	01 96       	adiw	r24, 0x01	; 1
   1371e:	09 f0       	breq	.+2      	; 0x13722 <format_drives+0x1cc>
   13720:	6b c0       	rjmp	.+214    	; 0x137f8 <format_drives+0x2a2>
   13722:	f5 01       	movw	r30, r10
   13724:	80 85       	ldd	r24, Z+8	; 0x08
   13726:	91 85       	ldd	r25, Z+9	; 0x09
   13728:	81 15       	cp	r24, r1
   1372a:	91 40       	sbci	r25, 0x01	; 1
   1372c:	69 f0       	breq	.+26     	; 0x13748 <format_drives+0x1f2>
   1372e:	a9 96       	adiw	r28, 0x29	; 41
   13730:	2d ad       	ldd	r18, Y+61	; 0x3d
   13732:	3e ad       	ldd	r19, Y+62	; 0x3e
   13734:	4f ad       	ldd	r20, Y+63	; 0x3f
   13736:	a9 97       	sbiw	r28, 0x29	; 41
   13738:	ed b7       	in	r30, 0x3d	; 61
   1373a:	fe b7       	in	r31, 0x3e	; 62
   1373c:	21 83       	std	Z+1, r18	; 0x01
   1373e:	32 83       	std	Z+2, r19	; 0x02
   13740:	43 83       	std	Z+3, r20	; 0x03
   13742:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   13746:	58 c0       	rjmp	.+176    	; 0x137f8 <format_drives+0x2a2>
   13748:	f6 01       	movw	r30, r12
   1374a:	23 80       	ldd	r2, Z+3	; 0x03
   1374c:	34 80       	ldd	r3, Z+4	; 0x04
   1374e:	45 80       	ldd	r4, Z+5	; 0x05
   13750:	56 80       	ldd	r5, Z+6	; 0x06
   13752:	ed b7       	in	r30, 0x3d	; 61
   13754:	fe b7       	in	r31, 0x3e	; 62
   13756:	26 82       	std	Z+6, r2	; 0x06
   13758:	37 82       	std	Z+7, r3	; 0x07
   1375a:	40 86       	std	Z+8, r4	; 0x08
   1375c:	51 86       	std	Z+9, r5	; 0x09
   1375e:	f5 01       	movw	r30, r10
   13760:	82 81       	ldd	r24, Z+2	; 0x02
   13762:	93 81       	ldd	r25, Z+3	; 0x03
   13764:	ed b7       	in	r30, 0x3d	; 61
   13766:	fe b7       	in	r31, 0x3e	; 62
   13768:	95 83       	std	Z+5, r25	; 0x05
   1376a:	84 83       	std	Z+4, r24	; 0x04
   1376c:	a3 96       	adiw	r28, 0x23	; 35
   1376e:	2d ad       	ldd	r18, Y+61	; 0x3d
   13770:	3e ad       	ldd	r19, Y+62	; 0x3e
   13772:	4f ad       	ldd	r20, Y+63	; 0x3f
   13774:	a3 97       	sbiw	r28, 0x23	; 35
   13776:	21 83       	std	Z+1, r18	; 0x01
   13778:	32 83       	std	Z+2, r19	; 0x02
   1377a:	43 83       	std	Z+3, r20	; 0x03
   1377c:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   13780:	a0 96       	adiw	r28, 0x20	; 32
   13782:	2e ad       	ldd	r18, Y+62	; 0x3e
   13784:	3f ad       	ldd	r19, Y+63	; 0x3f
   13786:	a0 97       	sbiw	r28, 0x20	; 32
   13788:	ed b7       	in	r30, 0x3d	; 61
   1378a:	fe b7       	in	r31, 0x3e	; 62
   1378c:	37 83       	std	Z+7, r19	; 0x07
   1378e:	26 83       	std	Z+6, r18	; 0x06
   13790:	a6 96       	adiw	r28, 0x26	; 38
   13792:	8d ad       	ldd	r24, Y+61	; 0x3d
   13794:	9e ad       	ldd	r25, Y+62	; 0x3e
   13796:	af ad       	ldd	r26, Y+63	; 0x3f
   13798:	a6 97       	sbiw	r28, 0x26	; 38
   1379a:	83 83       	std	Z+3, r24	; 0x03
   1379c:	94 83       	std	Z+4, r25	; 0x04
   1379e:	a5 83       	std	Z+5, r26	; 0x05
   137a0:	2a e3       	ldi	r18, 0x3A	; 58
   137a2:	30 e0       	ldi	r19, 0x00	; 0
   137a4:	2c 0f       	add	r18, r28
   137a6:	3d 1f       	adc	r19, r29
   137a8:	32 83       	std	Z+2, r19	; 0x02
   137aa:	21 83       	std	Z+1, r18	; 0x01
   137ac:	0e 94 1c 47 	call	0x8e38	; 0x8e38 <sprintf_P>
   137b0:	f5 01       	movw	r30, r10
   137b2:	a2 80       	ldd	r10, Z+2	; 0x02
   137b4:	b3 80       	ldd	r11, Z+3	; 0x03
   137b6:	c2 01       	movw	r24, r4
   137b8:	b1 01       	movw	r22, r2
   137ba:	0e 94 f1 a3 	call	0x147e2	; 0x147e2 <lif_dir_count>
   137be:	9b 01       	movw	r18, r22
   137c0:	ac 01       	movw	r20, r24
   137c2:	82 01       	movw	r16, r4
   137c4:	71 01       	movw	r14, r2
   137c6:	be 01       	movw	r22, r28
   137c8:	66 5c       	subi	r22, 0xC6	; 198
   137ca:	7f 4f       	sbci	r23, 0xFF	; 255
   137cc:	c5 01       	movw	r24, r10
   137ce:	0e 94 7a de 	call	0x1bcf4	; 0x1bcf4 <lif_create_image>
   137d2:	6c 96       	adiw	r28, 0x1c	; 28
   137d4:	2e ad       	ldd	r18, Y+62	; 0x3e
   137d6:	3f ad       	ldd	r19, Y+63	; 0x3f
   137d8:	6c 97       	sbiw	r28, 0x1c	; 28
   137da:	2f 5f       	subi	r18, 0xFF	; 255
   137dc:	3f 4f       	sbci	r19, 0xFF	; 255
   137de:	6c 96       	adiw	r28, 0x1c	; 28
   137e0:	3f af       	std	Y+63, r19	; 0x3f
   137e2:	2e af       	std	Y+62, r18	; 0x3e
   137e4:	6c 97       	sbiw	r28, 0x1c	; 28
   137e6:	a0 96       	adiw	r28, 0x20	; 32
   137e8:	8e ad       	ldd	r24, Y+62	; 0x3e
   137ea:	9f ad       	ldd	r25, Y+63	; 0x3f
   137ec:	a0 97       	sbiw	r28, 0x20	; 32
   137ee:	01 96       	adiw	r24, 0x01	; 1
   137f0:	a0 96       	adiw	r28, 0x20	; 32
   137f2:	9f af       	std	Y+63, r25	; 0x3f
   137f4:	8e af       	std	Y+62, r24	; 0x3e
   137f6:	a0 97       	sbiw	r28, 0x20	; 32
   137f8:	9b e0       	ldi	r25, 0x0B	; 11
   137fa:	c9 0e       	add	r12, r25
   137fc:	d1 1c       	adc	r13, r1
   137fe:	a0 e8       	ldi	r26, 0x80	; 128
   13800:	ca 16       	cp	r12, r26
   13802:	af e1       	ldi	r26, 0x1F	; 31
   13804:	da 06       	cpc	r13, r26
   13806:	09 f0       	breq	.+2      	; 0x1380a <format_drives+0x2b4>
   13808:	01 cf       	rjmp	.-510    	; 0x1360c <format_drives+0xb6>
   1380a:	6c 96       	adiw	r28, 0x1c	; 28
   1380c:	ee ad       	ldd	r30, Y+62	; 0x3e
   1380e:	ff ad       	ldd	r31, Y+63	; 0x3f
   13810:	6c 97       	sbiw	r28, 0x1c	; 28
   13812:	ef 2b       	or	r30, r31
   13814:	11 f0       	breq	.+4      	; 0x1381a <format_drives+0x2c4>
   13816:	0e 94 3f 32 	call	0x647e	; 0x647e <sep>
   1381a:	c2 59       	subi	r28, 0x92	; 146
   1381c:	df 4f       	sbci	r29, 0xFF	; 255
   1381e:	0f b6       	in	r0, 0x3f	; 63
   13820:	f8 94       	cli
   13822:	de bf       	out	0x3e, r29	; 62
   13824:	0f be       	out	0x3f, r0	; 63
   13826:	cd bf       	out	0x3d, r28	; 61
   13828:	df 91       	pop	r29
   1382a:	cf 91       	pop	r28
   1382c:	1f 91       	pop	r17
   1382e:	0f 91       	pop	r16
   13830:	ff 90       	pop	r15
   13832:	ef 90       	pop	r14
   13834:	df 90       	pop	r13
   13836:	cf 90       	pop	r12
   13838:	bf 90       	pop	r11
   1383a:	af 90       	pop	r10
   1383c:	8f 90       	pop	r8
   1383e:	7f 90       	pop	r7
   13840:	6f 90       	pop	r6
   13842:	5f 90       	pop	r5
   13844:	4f 90       	pop	r4
   13846:	3f 90       	pop	r3
   13848:	2f 90       	pop	r2
   1384a:	08 95       	ret

0001384c <drives_help>:
   1384c:	00 d0       	rcall	.+0      	; 0x1384e <drives_help+0x2>
   1384e:	1f 92       	push	r1
   13850:	81 11       	cpse	r24, r1
   13852:	03 c0       	rjmp	.+6      	; 0x1385a <drives_help+0xe>
   13854:	89 e3       	ldi	r24, 0x39	; 57
   13856:	9a e1       	ldi	r25, 0x1A	; 26
   13858:	02 c0       	rjmp	.+4      	; 0x1385e <drives_help+0x12>
   1385a:	84 e5       	ldi	r24, 0x54	; 84
   1385c:	98 e1       	ldi	r25, 0x18	; 24
   1385e:	a0 e0       	ldi	r26, 0x00	; 0
   13860:	ed b7       	in	r30, 0x3d	; 61
   13862:	fe b7       	in	r31, 0x3e	; 62
   13864:	81 83       	std	Z+1, r24	; 0x01
   13866:	92 83       	std	Z+2, r25	; 0x02
   13868:	a3 83       	std	Z+3, r26	; 0x03
   1386a:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   1386e:	0f 90       	pop	r0
   13870:	0f 90       	pop	r0
   13872:	0f 90       	pop	r0
   13874:	08 95       	ret

00013876 <mount_usage>:
   13876:	00 d0       	rcall	.+0      	; 0x13878 <mount_usage+0x2>
   13878:	1f 92       	push	r1
   1387a:	8b e4       	ldi	r24, 0x4B	; 75
   1387c:	98 e1       	ldi	r25, 0x18	; 24
   1387e:	a0 e0       	ldi	r26, 0x00	; 0
   13880:	ed b7       	in	r30, 0x3d	; 61
   13882:	fe b7       	in	r31, 0x3e	; 62
   13884:	81 83       	std	Z+1, r24	; 0x01
   13886:	92 83       	std	Z+2, r25	; 0x02
   13888:	a3 83       	std	Z+3, r26	; 0x03
   1388a:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   1388e:	81 e0       	ldi	r24, 0x01	; 1
   13890:	dd df       	rcall	.-70     	; 0x1384c <drives_help>
   13892:	0f 90       	pop	r0
   13894:	0f 90       	pop	r0
   13896:	0f 90       	pop	r0
   13898:	08 95       	ret

0001389a <index_address>:
   1389a:	ec ef       	ldi	r30, 0xFC	; 252
   1389c:	fe e1       	ldi	r31, 0x1E	; 30
   1389e:	90 e0       	ldi	r25, 0x00	; 0
   138a0:	28 2f       	mov	r18, r24
   138a2:	88 0f       	add	r24, r24
   138a4:	33 0b       	sbc	r19, r19
   138a6:	80 81       	ld	r24, Z
   138a8:	88 23       	and	r24, r24
   138aa:	29 f0       	breq	.+10     	; 0x138b6 <index_address+0x1c>
   138ac:	41 81       	ldd	r20, Z+1	; 0x01
   138ae:	50 e0       	ldi	r21, 0x00	; 0
   138b0:	42 17       	cp	r20, r18
   138b2:	53 07       	cpc	r21, r19
   138b4:	31 f0       	breq	.+12     	; 0x138c2 <index_address+0x28>
   138b6:	9f 5f       	subi	r25, 0xFF	; 255
   138b8:	3b 96       	adiw	r30, 0x0b	; 11
   138ba:	9c 30       	cpi	r25, 0x0C	; 12
   138bc:	a1 f7       	brne	.-24     	; 0x138a6 <index_address+0xc>
   138be:	8f ef       	ldi	r24, 0xFF	; 255
   138c0:	08 95       	ret
   138c2:	89 2f       	mov	r24, r25
   138c4:	08 95       	ret

000138c6 <umount>:

/// ===============================================
/// @brief umount disks - testing
/// @return Devices[] index on success, -1 on error
int8_t umount(int argc, char *argv[])
{
   138c6:	cf 93       	push	r28
   138c8:	df 93       	push	r29
   138ca:	00 d0       	rcall	.+0      	; 0x138cc <umount+0x6>
   138cc:	00 d0       	rcall	.+0      	; 0x138ce <umount+0x8>
   138ce:	1f 92       	push	r1
   138d0:	eb 01       	movw	r28, r22

	int8_t address;
	int8_t index;

	if(argc != 2)
   138d2:	02 97       	sbiw	r24, 0x02	; 2
   138d4:	f1 f0       	breq	.+60     	; 0x13912 <umount+0x4c>
	{
		printf("Usage:\n");
   138d6:	83 e4       	ldi	r24, 0x43	; 67
   138d8:	98 e1       	ldi	r25, 0x18	; 24
   138da:	a0 e0       	ldi	r26, 0x00	; 0
   138dc:	ed b7       	in	r30, 0x3d	; 61
   138de:	fe b7       	in	r31, 0x3e	; 62
   138e0:	81 83       	std	Z+1, r24	; 0x01
   138e2:	92 83       	std	Z+2, r25	; 0x02
   138e4:	a3 83       	std	Z+3, r26	; 0x03
   138e6:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
		printf("  umount address\n");
   138ea:	81 e3       	ldi	r24, 0x31	; 49
   138ec:	98 e1       	ldi	r25, 0x18	; 24
   138ee:	a0 e0       	ldi	r26, 0x00	; 0
   138f0:	ed b7       	in	r30, 0x3d	; 61
   138f2:	fe b7       	in	r31, 0x3e	; 62
   138f4:	81 83       	std	Z+1, r24	; 0x01
   138f6:	92 83       	std	Z+2, r25	; 0x02
   138f8:	a3 83       	std	Z+3, r26	; 0x03
   138fa:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
		printf("  - address is the device address\n");
   138fe:	8e e0       	ldi	r24, 0x0E	; 14
   13900:	98 e1       	ldi	r25, 0x18	; 24
   13902:	a0 e0       	ldi	r26, 0x00	; 0
   13904:	ed b7       	in	r30, 0x3d	; 61
   13906:	fe b7       	in	r31, 0x3e	; 62
   13908:	81 83       	std	Z+1, r24	; 0x01
   1390a:	92 83       	std	Z+2, r25	; 0x02
   1390c:	a3 83       	std	Z+3, r26	; 0x03
   1390e:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
	}
	address = atoi(argv[1]);
   13912:	8a 81       	ldd	r24, Y+2	; 0x02
   13914:	9b 81       	ldd	r25, Y+3	; 0x03
   13916:	0e 94 c9 47 	call	0x8f92	; 0x8f92 <atoi>
   1391a:	d8 2f       	mov	r29, r24
	index = index_address(address);
   1391c:	be df       	rcall	.-132    	; 0x1389a <index_address>
   1391e:	c8 2f       	mov	r28, r24
	if(index == -1)
   13920:	8f 3f       	cpi	r24, 0xFF	; 255
   13922:	89 f4       	brne	.+34     	; 0x13946 <umount+0x80>
	{
		printf("umount address:[%d] NOT found\n", address);
   13924:	8d 2f       	mov	r24, r29
   13926:	dd 0f       	add	r29, r29
   13928:	99 0b       	sbc	r25, r25
   1392a:	ed b7       	in	r30, 0x3d	; 61
   1392c:	fe b7       	in	r31, 0x3e	; 62
   1392e:	95 83       	std	Z+5, r25	; 0x05
   13930:	84 83       	std	Z+4, r24	; 0x04
   13932:	8f ee       	ldi	r24, 0xEF	; 239
   13934:	97 e1       	ldi	r25, 0x17	; 23
   13936:	a0 e0       	ldi	r26, 0x00	; 0
   13938:	81 83       	std	Z+1, r24	; 0x01
   1393a:	92 83       	std	Z+2, r25	; 0x02
   1393c:	a3 83       	std	Z+3, r26	; 0x03
   1393e:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
		return(-1);
   13942:	8f ef       	ldi	r24, 0xFF	; 255
	}
	free_device(index);
   13944:	02 c0       	rjmp	.+4      	; 0x1394a <umount+0x84>
   13946:	fb db       	rcall	.-2058   	; 0x1313e <free_device>
	return(index);
   13948:	8c 2f       	mov	r24, r28
}
   1394a:	cd b7       	in	r28, 0x3d	; 61
   1394c:	de b7       	in	r29, 0x3e	; 62
   1394e:	25 96       	adiw	r28, 0x05	; 5
   13950:	e2 e0       	ldi	r30, 0x02	; 2
   13952:	0c 94 2b e7 	jmp	0x1ce56	; 0x1ce56 <__epilogue_restores__+0x20>

00013956 <display_mount>:
	return(1);
}


void display_mount(int8_t index )
{
   13956:	a9 e0       	ldi	r26, 0x09	; 9
   13958:	b0 e0       	ldi	r27, 0x00	; 0
   1395a:	e1 eb       	ldi	r30, 0xB1	; 177
   1395c:	fc e9       	ldi	r31, 0x9C	; 156
   1395e:	0c 94 0d e7 	jmp	0x1ce1a	; 0x1ce1a <__prologue_saves__+0x1c>
#ifdef AMIGO
///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

	if(Devices[index].TYPE == NO_TYPE)
   13962:	08 2f       	mov	r16, r24
   13964:	08 2e       	mov	r0, r24
   13966:	00 0c       	add	r0, r0
   13968:	11 0b       	sbc	r17, r17
   1396a:	9b e0       	ldi	r25, 0x0B	; 11
   1396c:	89 02       	muls	r24, r25
   1396e:	f0 01       	movw	r30, r0
   13970:	11 24       	eor	r1, r1
   13972:	e4 50       	subi	r30, 0x04	; 4
   13974:	f1 4e       	sbci	r31, 0xE1	; 225
   13976:	80 81       	ld	r24, Z
   13978:	88 23       	and	r24, r24
   1397a:	09 f4       	brne	.+2      	; 0x1397e <display_mount+0x28>
   1397c:	5f c0       	rjmp	.+190    	; 0x13a3c <display_mount+0xe6>
		return;

	if(Devices[index].TYPE == SS80_TYPE)
   1397e:	83 30       	cpi	r24, 0x03	; 3
   13980:	c9 f4       	brne	.+50     	; 0x139b4 <display_mount+0x5e>
	{
		SS80p= (SS80DiskType *)Devices[index].dev;
   13982:	07 80       	ldd	r0, Z+7	; 0x07
   13984:	f0 85       	ldd	r31, Z+8	; 0x08
   13986:	e0 2d       	mov	r30, r0

		printf("SS80    %-8s %2d %s\n", SS80p->HEADER.model, (int) SS80p->HEADER.ADDRESS, SS80p->HEADER.NAME);
   13988:	82 81       	ldd	r24, Z+2	; 0x02
   1398a:	93 81       	ldd	r25, Z+3	; 0x03
   1398c:	cd b7       	in	r28, 0x3d	; 61
   1398e:	de b7       	in	r29, 0x3e	; 62
   13990:	99 87       	std	Y+9, r25	; 0x09
   13992:	88 87       	std	Y+8, r24	; 0x08
   13994:	80 81       	ld	r24, Z
   13996:	90 e0       	ldi	r25, 0x00	; 0
   13998:	9f 83       	std	Y+7, r25	; 0x07
   1399a:	8e 83       	std	Y+6, r24	; 0x06
   1399c:	84 81       	ldd	r24, Z+4	; 0x04
   1399e:	95 81       	ldd	r25, Z+5	; 0x05
   139a0:	9d 83       	std	Y+5, r25	; 0x05
   139a2:	8c 83       	std	Y+4, r24	; 0x04
   139a4:	8e e0       	ldi	r24, 0x0E	; 14
   139a6:	97 e1       	ldi	r25, 0x17	; 23
   139a8:	a0 e0       	ldi	r26, 0x00	; 0
   139aa:	89 83       	std	Y+1, r24	; 0x01
   139ac:	9a 83       	std	Y+2, r25	; 0x02
   139ae:	ab 83       	std	Y+3, r26	; 0x03
   139b0:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
	}

#ifdef AMIGO
	if(Devices[index].TYPE == AMIGO_TYPE )
   139b4:	8b e0       	ldi	r24, 0x0B	; 11
   139b6:	80 9f       	mul	r24, r16
   139b8:	f0 01       	movw	r30, r0
   139ba:	81 9f       	mul	r24, r17
   139bc:	f0 0d       	add	r31, r0
   139be:	11 24       	eor	r1, r1
   139c0:	e4 50       	subi	r30, 0x04	; 4
   139c2:	f1 4e       	sbci	r31, 0xE1	; 225
   139c4:	80 81       	ld	r24, Z
   139c6:	81 30       	cpi	r24, 0x01	; 1
   139c8:	c9 f4       	brne	.+50     	; 0x139fc <display_mount+0xa6>
	{
		AMIGOp = (AMIGODiskType *)Devices[index].dev;
   139ca:	07 80       	ldd	r0, Z+7	; 0x07
   139cc:	f0 85       	ldd	r31, Z+8	; 0x08
   139ce:	e0 2d       	mov	r30, r0
		printf("AMIGO   %-8s %2d %s\n", AMIGOp->HEADER.model, (int) AMIGOp->HEADER.ADDRESS, AMIGOp->HEADER.NAME);
   139d0:	82 81       	ldd	r24, Z+2	; 0x02
   139d2:	93 81       	ldd	r25, Z+3	; 0x03
   139d4:	cd b7       	in	r28, 0x3d	; 61
   139d6:	de b7       	in	r29, 0x3e	; 62
   139d8:	99 87       	std	Y+9, r25	; 0x09
   139da:	88 87       	std	Y+8, r24	; 0x08
   139dc:	80 81       	ld	r24, Z
   139de:	90 e0       	ldi	r25, 0x00	; 0
   139e0:	9f 83       	std	Y+7, r25	; 0x07
   139e2:	8e 83       	std	Y+6, r24	; 0x06
   139e4:	84 81       	ldd	r24, Z+4	; 0x04
   139e6:	95 81       	ldd	r25, Z+5	; 0x05
   139e8:	9d 83       	std	Y+5, r25	; 0x05
   139ea:	8c 83       	std	Y+4, r24	; 0x04
   139ec:	89 ef       	ldi	r24, 0xF9	; 249
   139ee:	96 e1       	ldi	r25, 0x16	; 22
   139f0:	a0 e0       	ldi	r26, 0x00	; 0
   139f2:	89 83       	std	Y+1, r24	; 0x01
   139f4:	9a 83       	std	Y+2, r25	; 0x02
   139f6:	ab 83       	std	Y+3, r26	; 0x03
   139f8:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
	}
#endif                                    // #ifdef AMIGO

	if(Devices[index].TYPE == PRINTER_TYPE )
   139fc:	8b e0       	ldi	r24, 0x0B	; 11
   139fe:	80 9f       	mul	r24, r16
   13a00:	f0 01       	movw	r30, r0
   13a02:	81 9f       	mul	r24, r17
   13a04:	f0 0d       	add	r31, r0
   13a06:	11 24       	eor	r1, r1
   13a08:	e4 50       	subi	r30, 0x04	; 4
   13a0a:	f1 4e       	sbci	r31, 0xE1	; 225
   13a0c:	80 81       	ld	r24, Z
   13a0e:	84 30       	cpi	r24, 0x04	; 4
   13a10:	a9 f4       	brne	.+42     	; 0x13a3c <display_mount+0xe6>
	{
            PRINTERp= (PRINTERDeviceType *)Devices[index].dev;
            printf("PRINTER %-8s %2d\n", " ", (int) PRINTERp->HEADER.ADDRESS);
   13a12:	07 80       	ldd	r0, Z+7	; 0x07
   13a14:	f0 85       	ldd	r31, Z+8	; 0x08
   13a16:	e0 2d       	mov	r30, r0
   13a18:	80 81       	ld	r24, Z
   13a1a:	90 e0       	ldi	r25, 0x00	; 0
   13a1c:	cd b7       	in	r28, 0x3d	; 61
   13a1e:	de b7       	in	r29, 0x3e	; 62
   13a20:	9f 83       	std	Y+7, r25	; 0x07
   13a22:	8e 83       	std	Y+6, r24	; 0x06
   13a24:	89 e6       	ldi	r24, 0x69	; 105
   13a26:	94 e0       	ldi	r25, 0x04	; 4
   13a28:	9d 83       	std	Y+5, r25	; 0x05
   13a2a:	8c 83       	std	Y+4, r24	; 0x04
   13a2c:	87 ee       	ldi	r24, 0xE7	; 231
   13a2e:	96 e1       	ldi	r25, 0x16	; 22
   13a30:	a0 e0       	ldi	r26, 0x00	; 0
   13a32:	89 83       	std	Y+1, r24	; 0x01
   13a34:	9a 83       	std	Y+2, r25	; 0x02
   13a36:	ab 83       	std	Y+3, r26	; 0x03
   13a38:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
	}
}
   13a3c:	cd b7       	in	r28, 0x3d	; 61
   13a3e:	de b7       	in	r29, 0x3e	; 62
   13a40:	29 96       	adiw	r28, 0x09	; 9
   13a42:	e4 e0       	ldi	r30, 0x04	; 4
   13a44:	0c 94 29 e7 	jmp	0x1ce52	; 0x1ce52 <__epilogue_restores__+0x1c>

00013a48 <verify_device>:

/// ===============================================
/// @brief Verify a device and delete it is there are any errors
/// @return  1 = OK 0 = ERROR
int8_t verify_device(int8_t index)
{
   13a48:	a5 e0       	ldi	r26, 0x05	; 5
   13a4a:	b0 e0       	ldi	r27, 0x00	; 0
   13a4c:	ea e2       	ldi	r30, 0x2A	; 42
   13a4e:	fd e9       	ldi	r31, 0x9D	; 157
   13a50:	0c 94 0a e7 	jmp	0x1ce14	; 0x1ce14 <__prologue_saves__+0x16>
#ifdef AMIGO
///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    if(Devices[index].TYPE == NO_TYPE)
   13a54:	e8 2e       	mov	r14, r24
   13a56:	08 2e       	mov	r0, r24
   13a58:	00 0c       	add	r0, r0
   13a5a:	ff 08       	sbc	r15, r15
   13a5c:	9b e0       	ldi	r25, 0x0B	; 11
   13a5e:	89 02       	muls	r24, r25
   13a60:	f0 01       	movw	r30, r0
   13a62:	11 24       	eor	r1, r1
   13a64:	e4 50       	subi	r30, 0x04	; 4
   13a66:	f1 4e       	sbci	r31, 0xE1	; 225
   13a68:	10 81       	ld	r17, Z
   13a6a:	11 23       	and	r17, r17
   13a6c:	09 f1       	breq	.+66     	; 0x13ab0 <verify_device+0x68>
   13a6e:	d8 2e       	mov	r13, r24
        return(ret);

	address = Devices[index].ADDRESS;
   13a70:	81 81       	ldd	r24, Z+1	; 0x01
    type = Devices[index].TYPE;
	ppr = Devices[index].PPR;
   13a72:	02 81       	ldd	r16, Z+2	; 0x02

	if(address < 0 || address > 31)
   13a74:	80 32       	cpi	r24, 0x20	; 32
   13a76:	78 f0       	brcs	.+30     	; 0x13a96 <verify_device+0x4e>
	{
		printf("Address (%d) out of range\n", (int) address);
   13a78:	90 e0       	ldi	r25, 0x00	; 0
   13a7a:	ed b7       	in	r30, 0x3d	; 61
   13a7c:	fe b7       	in	r31, 0x3e	; 62
   13a7e:	95 83       	std	Z+5, r25	; 0x05
   13a80:	84 83       	std	Z+4, r24	; 0x04
   13a82:	89 e5       	ldi	r24, 0x59	; 89
   13a84:	9b e1       	ldi	r25, 0x1B	; 27
   13a86:	a0 e0       	ldi	r26, 0x00	; 0
   13a88:	81 83       	std	Z+1, r24	; 0x01
   13a8a:	92 83       	std	Z+2, r25	; 0x02
   13a8c:	a3 83       	std	Z+3, r26	; 0x03
   13a8e:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
		ret = 0;
   13a92:	80 e0       	ldi	r24, 0x00	; 0
   13a94:	01 c0       	rjmp	.+2      	; 0x13a98 <verify_device+0x50>
int8_t verify_device(int8_t index)
{
    long sectors;
	int8_t type;
	int address,ppr;
	int8_t ret = 1;	
   13a96:	81 e0       	ldi	r24, 0x01	; 1
	}
	addr_bits |= addr_mask;

	
	// Printers do not use PPR
	if(type == PRINTER_TYPE)
   13a98:	14 30       	cpi	r17, 0x04	; 4
   13a9a:	61 f4       	brne	.+24     	; 0x13ab4 <verify_device+0x6c>
	{
		Devices[index].PPR = 0xff;
   13a9c:	8b e0       	ldi	r24, 0x0B	; 11
   13a9e:	8e 9d       	mul	r24, r14
   13aa0:	f0 01       	movw	r30, r0
   13aa2:	8f 9d       	mul	r24, r15
   13aa4:	f0 0d       	add	r31, r0
   13aa6:	11 24       	eor	r1, r1
   13aa8:	e4 50       	subi	r30, 0x04	; 4
   13aaa:	f1 4e       	sbci	r31, 0xE1	; 225
   13aac:	8f ef       	ldi	r24, 0xFF	; 255
   13aae:	82 83       	std	Z+2, r24	; 0x02
		return(1);
   13ab0:	81 e0       	ldi	r24, 0x01	; 1
   13ab2:	90 c0       	rjmp	.+288    	; 0x13bd4 <verify_device+0x18c>
	}
	if(type == SS80_TYPE || AMIGO_TYPE)
	{
		if(ppr < 0 || ppr > 7)
   13ab4:	08 30       	cpi	r16, 0x08	; 8
   13ab6:	08 f0       	brcs	.+2      	; 0x13aba <verify_device+0x72>
		{
			ret = 0;
   13ab8:	80 e0       	ldi	r24, 0x00	; 0
			printf("PPR (%d) duplicated\n", (int) ppr);
			ret = 0;
		}
		ppr_bits |= ppr_mask;
	}
    if(type == SS80_TYPE)
   13aba:	13 30       	cpi	r17, 0x03	; 3
   13abc:	79 f5       	brne	.+94     	; 0x13b1c <verify_device+0xd4>
    {
        SS80p= (SS80DiskType *)Devices[index].dev;
   13abe:	9b e0       	ldi	r25, 0x0B	; 11
   13ac0:	9e 9d       	mul	r25, r14
   13ac2:	f0 01       	movw	r30, r0
   13ac4:	9f 9d       	mul	r25, r15
   13ac6:	f0 0d       	add	r31, r0
   13ac8:	11 24       	eor	r1, r1
   13aca:	e4 50       	subi	r30, 0x04	; 4
   13acc:	f1 4e       	sbci	r31, 0xE1	; 225
   13ace:	c7 81       	ldd	r28, Z+7	; 0x07
   13ad0:	d0 85       	ldd	r29, Z+8	; 0x08
        if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
   13ad2:	2a 89       	ldd	r18, Y+18	; 0x12
   13ad4:	3b 89       	ldd	r19, Y+19	; 0x13
   13ad6:	21 15       	cp	r18, r1
   13ad8:	31 40       	sbci	r19, 0x01	; 1
   13ada:	79 f0       	breq	.+30     	; 0x13afa <verify_device+0xb2>
        {
// SS80p->UNIT.BYTES_PER_BLOCK = 256;
            printf("Warning: %s BYTES_PER_BLOCK != 256, Adjusting to 256\n", SS80p->HEADER.model);
   13adc:	8c 81       	ldd	r24, Y+4	; 0x04
   13ade:	9d 81       	ldd	r25, Y+5	; 0x05
   13ae0:	ed b7       	in	r30, 0x3d	; 61
   13ae2:	fe b7       	in	r31, 0x3e	; 62
   13ae4:	95 83       	std	Z+5, r25	; 0x05
   13ae6:	84 83       	std	Z+4, r24	; 0x04
   13ae8:	83 e2       	ldi	r24, 0x23	; 35
   13aea:	9b e1       	ldi	r25, 0x1B	; 27
   13aec:	a0 e0       	ldi	r26, 0x00	; 0
   13aee:	81 83       	std	Z+1, r24	; 0x01
   13af0:	92 83       	std	Z+2, r25	; 0x02
   13af2:	a3 83       	std	Z+3, r26	; 0x03
   13af4:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
			ret = 0;
   13af8:	80 e0       	ldi	r24, 0x00	; 0
        }
        sectors = SS80p->VOLUME.MAX_BLOCK_NUMBER+1;
        Devices[index].BLOCKS = sectors;
   13afa:	9b e0       	ldi	r25, 0x0B	; 11
   13afc:	9e 9d       	mul	r25, r14
   13afe:	f0 01       	movw	r30, r0
   13b00:	9f 9d       	mul	r25, r15
   13b02:	f0 0d       	add	r31, r0
   13b04:	11 24       	eor	r1, r1
   13b06:	e4 50       	subi	r30, 0x04	; 4
   13b08:	f1 4e       	sbci	r31, 0xE1	; 225
   13b0a:	48 a5       	ldd	r20, Y+40	; 0x28
   13b0c:	59 a5       	ldd	r21, Y+41	; 0x29
   13b0e:	6a a5       	ldd	r22, Y+42	; 0x2a
   13b10:	7b a5       	ldd	r23, Y+43	; 0x2b
   13b12:	4f 5f       	subi	r20, 0xFF	; 255
   13b14:	5f 4f       	sbci	r21, 0xFF	; 255
   13b16:	6f 4f       	sbci	r22, 0xFF	; 255
   13b18:	7f 4f       	sbci	r23, 0xFF	; 255
   13b1a:	47 c0       	rjmp	.+142    	; 0x13baa <verify_device+0x162>
    }                                         // SS80_TYPE

#ifdef AMIGO
    if(type == AMIGO_TYPE )
   13b1c:	11 30       	cpi	r17, 0x01	; 1
   13b1e:	09 f0       	breq	.+2      	; 0x13b22 <verify_device+0xda>
   13b20:	48 c0       	rjmp	.+144    	; 0x13bb2 <verify_device+0x16a>
    {
        AMIGOp = (AMIGODiskType *)Devices[index].dev;
   13b22:	9b e0       	ldi	r25, 0x0B	; 11
   13b24:	9e 9d       	mul	r25, r14
   13b26:	f0 01       	movw	r30, r0
   13b28:	9f 9d       	mul	r25, r15
   13b2a:	f0 0d       	add	r31, r0
   13b2c:	11 24       	eor	r1, r1
   13b2e:	e4 50       	subi	r30, 0x04	; 4
   13b30:	f1 4e       	sbci	r31, 0xE1	; 225
   13b32:	c7 81       	ldd	r28, Z+7	; 0x07
   13b34:	d0 85       	ldd	r29, Z+8	; 0x08
        if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
   13b36:	28 85       	ldd	r18, Y+8	; 0x08
   13b38:	39 85       	ldd	r19, Y+9	; 0x09
   13b3a:	21 15       	cp	r18, r1
   13b3c:	31 40       	sbci	r19, 0x01	; 1
   13b3e:	a9 f0       	breq	.+42     	; 0x13b6a <verify_device+0x122>
        {
            AMIGOp->GEOMETRY.BYTES_PER_SECTOR = 256;
   13b40:	80 e0       	ldi	r24, 0x00	; 0
   13b42:	91 e0       	ldi	r25, 0x01	; 1
   13b44:	99 87       	std	Y+9, r25	; 0x09
   13b46:	88 87       	std	Y+8, r24	; 0x08
            printf("Warning: %s BYTES_PER_SECTOR != 256, Adjusting to 256\n", SS80p->HEADER.model);
   13b48:	80 91 04 00 	lds	r24, 0x0004	; 0x800004 <__TEXT_REGION_LENGTH__+0x7e0004>
   13b4c:	90 91 05 00 	lds	r25, 0x0005	; 0x800005 <__TEXT_REGION_LENGTH__+0x7e0005>
   13b50:	ed b7       	in	r30, 0x3d	; 61
   13b52:	fe b7       	in	r31, 0x3e	; 62
   13b54:	95 83       	std	Z+5, r25	; 0x05
   13b56:	84 83       	std	Z+4, r24	; 0x04
   13b58:	8c ee       	ldi	r24, 0xEC	; 236
   13b5a:	9a e1       	ldi	r25, 0x1A	; 26
   13b5c:	a0 e0       	ldi	r26, 0x00	; 0
   13b5e:	81 83       	std	Z+1, r24	; 0x01
   13b60:	92 83       	std	Z+2, r25	; 0x02
   13b62:	a3 83       	std	Z+3, r26	; 0x03
   13b64:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
			ret = 0;
   13b68:	80 e0       	ldi	r24, 0x00	; 0
        }
        sectors = AMIGOp->GEOMETRY.SECTORS_PER_TRACK
            * AMIGOp->GEOMETRY.HEADS
            * AMIGOp->GEOMETRY.CYLINDERS;
        Devices[index].BLOCKS = sectors;
   13b6a:	9b e0       	ldi	r25, 0x0B	; 11
   13b6c:	9e 9d       	mul	r25, r14
   13b6e:	f0 01       	movw	r30, r0
   13b70:	9f 9d       	mul	r25, r15
   13b72:	f0 0d       	add	r31, r0
   13b74:	11 24       	eor	r1, r1
   13b76:	e4 50       	subi	r30, 0x04	; 4
   13b78:	f1 4e       	sbci	r31, 0xE1	; 225
   13b7a:	4a 85       	ldd	r20, Y+10	; 0x0a
   13b7c:	5b 85       	ldd	r21, Y+11	; 0x0b
   13b7e:	2c 85       	ldd	r18, Y+12	; 0x0c
   13b80:	3d 85       	ldd	r19, Y+13	; 0x0d
   13b82:	42 9f       	mul	r20, r18
   13b84:	b0 01       	movw	r22, r0
   13b86:	43 9f       	mul	r20, r19
   13b88:	70 0d       	add	r23, r0
   13b8a:	52 9f       	mul	r21, r18
   13b8c:	70 0d       	add	r23, r0
   13b8e:	11 24       	eor	r1, r1
   13b90:	2e 85       	ldd	r18, Y+14	; 0x0e
   13b92:	3f 85       	ldd	r19, Y+15	; 0x0f
   13b94:	62 9f       	mul	r22, r18
   13b96:	a0 01       	movw	r20, r0
   13b98:	63 9f       	mul	r22, r19
   13b9a:	50 0d       	add	r21, r0
   13b9c:	72 9f       	mul	r23, r18
   13b9e:	50 0d       	add	r21, r0
   13ba0:	11 24       	eor	r1, r1
   13ba2:	05 2e       	mov	r0, r21
   13ba4:	00 0c       	add	r0, r0
   13ba6:	66 0b       	sbc	r22, r22
   13ba8:	77 0b       	sbc	r23, r23
   13baa:	43 83       	std	Z+3, r20	; 0x03
   13bac:	54 83       	std	Z+4, r21	; 0x04
   13bae:	65 83       	std	Z+5, r22	; 0x05
   13bb0:	76 83       	std	Z+6, r23	; 0x06
    }
#endif                                    // #ifdef AMIGO
	if(!ret)
   13bb2:	81 11       	cpse	r24, r1
   13bb4:	7d cf       	rjmp	.-262    	; 0x13ab0 <verify_device+0x68>
	{
		printf("Device errors - removing: ");
   13bb6:	81 ed       	ldi	r24, 0xD1	; 209
   13bb8:	9a e1       	ldi	r25, 0x1A	; 26
   13bba:	a0 e0       	ldi	r26, 0x00	; 0
   13bbc:	ed b7       	in	r30, 0x3d	; 61
   13bbe:	fe b7       	in	r31, 0x3e	; 62
   13bc0:	81 83       	std	Z+1, r24	; 0x01
   13bc2:	92 83       	std	Z+2, r25	; 0x02
   13bc4:	a3 83       	std	Z+3, r26	; 0x03
   13bc6:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
		display_mount(index);	
   13bca:	8d 2d       	mov	r24, r13
   13bcc:	c4 de       	rcall	.-632    	; 0x13956 <display_mount>
		free_device(index);
   13bce:	8d 2d       	mov	r24, r13
   13bd0:	b6 da       	rcall	.-2708   	; 0x1313e <free_device>
   13bd2:	80 e0       	ldi	r24, 0x00	; 0
	}
	return(ret);
}
   13bd4:	cd b7       	in	r28, 0x3d	; 61
   13bd6:	de b7       	in	r29, 0x3e	; 62
   13bd8:	25 96       	adiw	r28, 0x05	; 5
   13bda:	e7 e0       	ldi	r30, 0x07	; 7
   13bdc:	0c 94 26 e7 	jmp	0x1ce4c	; 0x1ce4c <__epilogue_restores__+0x16>

00013be0 <verify_devices>:

/// ===============================================
/// @brief Post process and Verify all devices
/// @return  1 = OK 0 = ERROR
void verify_devices()
{
   13be0:	cf 93       	push	r28
	int8_t i;

	for(i=0;i<MAX_DEVICES;++i)
   13be2:	c0 e0       	ldi	r28, 0x00	; 0
		verify_device(i);
   13be4:	8c 2f       	mov	r24, r28
   13be6:	30 df       	rcall	.-416    	; 0x13a48 <verify_device>
   13be8:	cf 5f       	subi	r28, 0xFF	; 255
/// @return  1 = OK 0 = ERROR
void verify_devices()
{
	int8_t i;

	for(i=0;i<MAX_DEVICES;++i)
   13bea:	cc 30       	cpi	r28, 0x0C	; 12
   13bec:	d9 f7       	brne	.-10     	; 0x13be4 <verify_devices+0x4>
		verify_device(i);

}
   13bee:	cf 91       	pop	r28
   13bf0:	08 95       	ret

00013bf2 <Read_Config>:
/// Set all drive parameters and debuglevel
///
/// @param name: config file name to process
/// @return  number of parse errors
int Read_Config(char *name)
{
   13bf2:	ae e1       	ldi	r26, 0x1E	; 30
   13bf4:	b1 e0       	ldi	r27, 0x01	; 1
   13bf6:	ef ef       	ldi	r30, 0xFF	; 255
   13bf8:	fd e9       	ldi	r31, 0x9D	; 157
   13bfa:	0c 94 ff e6 	jmp	0x1cdfe	; 0x1cdfe <__prologue_saves__>
   13bfe:	8c 01       	movw	r16, r24
	int8_t address;

    char str[128];
    char token[128];

    init_Devices();
   13c00:	b8 db       	rcall	.-2192   	; 0x13372 <init_Devices>

    printf("Reading: %s\n", name);
   13c02:	ed b7       	in	r30, 0x3d	; 61
   13c04:	fe b7       	in	r31, 0x3e	; 62
   13c06:	15 83       	std	Z+5, r17	; 0x05
   13c08:	04 83       	std	Z+4, r16	; 0x04
   13c0a:	8b e1       	ldi	r24, 0x1B	; 27
   13c0c:	91 e2       	ldi	r25, 0x21	; 33
   13c0e:	a0 e0       	ldi	r26, 0x00	; 0
   13c10:	81 83       	std	Z+1, r24	; 0x01
   13c12:	92 83       	std	Z+2, r25	; 0x02
   13c14:	a3 83       	std	Z+3, r26	; 0x03
   13c16:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    cfg = fopen(name, "rb");
   13c1a:	6e ef       	ldi	r22, 0xFE	; 254
   13c1c:	78 e0       	ldi	r23, 0x08	; 8
   13c1e:	c8 01       	movw	r24, r16
   13c20:	0e 94 72 7e 	call	0xfce4	; 0xfce4 <fopen>
   13c24:	c5 5f       	subi	r28, 0xF5	; 245
   13c26:	de 4f       	sbci	r29, 0xFE	; 254
   13c28:	99 83       	std	Y+1, r25	; 0x01
   13c2a:	88 83       	st	Y, r24
   13c2c:	cb 50       	subi	r28, 0x0B	; 11
   13c2e:	d1 40       	sbci	r29, 0x01	; 1
    if(cfg == NULL)
   13c30:	89 2b       	or	r24, r25
   13c32:	09 f4       	brne	.+2      	; 0x13c36 <Read_Config+0x44>
   13c34:	58 c0       	rjmp	.+176    	; 0x13ce6 <Read_Config+0xf4>
   13c36:	21 2c       	mov	r2, r1
   13c38:	31 2c       	mov	r3, r1
   13c3a:	c8 5f       	subi	r28, 0xF8	; 248
   13c3c:	de 4f       	sbci	r29, 0xFE	; 254
   13c3e:	18 82       	st	Y, r1
   13c40:	c8 50       	subi	r28, 0x08	; 8
   13c42:	d1 40       	sbci	r29, 0x01	; 1
   13c44:	41 2c       	mov	r4, r1
   13c46:	51 2c       	mov	r5, r1
   13c48:	e1 2c       	mov	r14, r1
   13c4a:	f1 2c       	mov	r15, r1
   13c4c:	c7 5f       	subi	r28, 0xF7	; 247
   13c4e:	de 4f       	sbci	r29, 0xFE	; 254
   13c50:	19 82       	std	Y+1, r1	; 0x01
   13c52:	18 82       	st	Y, r1
   13c54:	c9 50       	subi	r28, 0x09	; 9
   13c56:	d1 40       	sbci	r29, 0x01	; 1
   13c58:	c1 2c       	mov	r12, r1
   13c5a:	d1 2c       	mov	r13, r1
   13c5c:	61 2c       	mov	r6, r1
   13c5e:	71 2c       	mov	r7, r1
                        break;
                }
                break;
#endif                                // #ifdef AMIGO
            default:
                printf("Unexpected STATE: %s, at line:%d\n", ptr,lines);
   13c60:	8a e6       	ldi	r24, 0x6A	; 106
   13c62:	9e e1       	ldi	r25, 0x1E	; 30
   13c64:	9c 01       	movw	r18, r24
   13c66:	40 e0       	ldi	r20, 0x00	; 0
   13c68:	c3 5f       	subi	r28, 0xF3	; 243
   13c6a:	de 4f       	sbci	r29, 0xFE	; 254
   13c6c:	28 83       	st	Y, r18
   13c6e:	39 83       	std	Y+1, r19	; 0x01
   13c70:	4a 83       	std	Y+2, r20	; 0x02
   13c72:	cd 50       	subi	r28, 0x0D	; 13
   13c74:	d1 40       	sbci	r29, 0x01	; 1
                        break;
                    case TOK_CYLINDERS:
                        AMIGOp->GEOMETRY.CYLINDERS = val.w;
                        break;
                    default:
                        printf("Unexpected AMIGO GEMETRY token: %s, at line:%d\n", ptr,lines);
   13c76:	8c e8       	ldi	r24, 0x8C	; 140
   13c78:	9e e1       	ldi	r25, 0x1E	; 30
   13c7a:	9c 01       	movw	r18, r24
   13c7c:	40 e0       	ldi	r20, 0x00	; 0
   13c7e:	c0 5f       	subi	r28, 0xF0	; 240
   13c80:	de 4f       	sbci	r29, 0xFE	; 254
   13c82:	28 83       	st	Y, r18
   13c84:	39 83       	std	Y+1, r19	; 0x01
   13c86:	4a 83       	std	Y+2, r20	; 0x02
   13c88:	c0 51       	subi	r28, 0x10	; 16
   13c8a:	d1 40       	sbci	r29, 0x01	; 1
                {
                    AMIGOp->CONFIG.ID = val.w;
                }
                else
                {
                    printf("Unexpected AMIGO CONFIG token: %s, at line:%d\n", ptr,lines);
   13c8c:	8c eb       	ldi	r24, 0xBC	; 188
   13c8e:	9e e1       	ldi	r25, 0x1E	; 30
   13c90:	9c 01       	movw	r18, r24
   13c92:	40 e0       	ldi	r20, 0x00	; 0
   13c94:	cd 5e       	subi	r28, 0xED	; 237
   13c96:	de 4f       	sbci	r29, 0xFE	; 254
   13c98:	28 83       	st	Y, r18
   13c9a:	39 83       	std	Y+1, r19	; 0x01
   13c9c:	4a 83       	std	Y+2, r20	; 0x02
   13c9e:	c3 51       	subi	r28, 0x13	; 19
   13ca0:	d1 40       	sbci	r29, 0x01	; 1
                        break;
                    case TOK_FILE:
                        AMIGOp->HEADER.NAME = stralloc(token);
                        break;
                    default:
                        printf("Unexpected HEADER CONFIG token: %s, at line:%d\n", ptr,lines);
   13ca2:	8b ee       	ldi	r24, 0xEB	; 235
   13ca4:	9e e1       	ldi	r25, 0x1E	; 30
   13ca6:	9c 01       	movw	r18, r24
   13ca8:	40 e0       	ldi	r20, 0x00	; 0
   13caa:	ca 5e       	subi	r28, 0xEA	; 234
   13cac:	de 4f       	sbci	r29, 0xFE	; 254
   13cae:	28 83       	st	Y, r18
   13cb0:	39 83       	std	Y+1, r19	; 0x01
   13cb2:	4a 83       	std	Y+2, r20	; 0x02
   13cb4:	c6 51       	subi	r28, 0x16	; 22
   13cb6:	d1 40       	sbci	r29, 0x01	; 1
                    case TOK_GEOMETRY:
                        push_state(state);
                        state = AMIGO_GEOMETRY;
                        break;
                    default:
                        printf("Unexpected AMIGO START token: %s, at line:%d\n", ptr,lines);
   13cb8:	8b e1       	ldi	r24, 0x1B	; 27
   13cba:	9f e1       	ldi	r25, 0x1F	; 31
   13cbc:	9c 01       	movw	r18, r24
   13cbe:	40 e0       	ldi	r20, 0x00	; 0
   13cc0:	c7 5e       	subi	r28, 0xE7	; 231
   13cc2:	de 4f       	sbci	r29, 0xFE	; 254
   13cc4:	28 83       	st	Y, r18
   13cc6:	39 83       	std	Y+1, r19	; 0x01
   13cc8:	4a 83       	std	Y+2, r20	; 0x02
   13cca:	c9 51       	subi	r28, 0x19	; 25
   13ccc:	d1 40       	sbci	r29, 0x01	; 1
                        break;
                    case TOK_INTERLEAVE:
                        SS80p->VOLUME.INTERLEAVE = val.b;
                        break;
                    default:
                        printf("Unexpected SS80 VOLUME token: %s, at line:%d\n", ptr,lines);
   13cce:	89 e4       	ldi	r24, 0x49	; 73
   13cd0:	9f e1       	ldi	r25, 0x1F	; 31
   13cd2:	9c 01       	movw	r18, r24
   13cd4:	40 e0       	ldi	r20, 0x00	; 0
   13cd6:	c4 5e       	subi	r28, 0xE4	; 228
   13cd8:	de 4f       	sbci	r29, 0xFE	; 254
   13cda:	28 83       	st	Y, r18
   13cdc:	39 83       	std	Y+1, r19	; 0x01
   13cde:	4a 83       	std	Y+2, r20	; 0x02
   13ce0:	cc 51       	subi	r28, 0x1C	; 28
   13ce2:	d1 40       	sbci	r29, 0x01	; 1
   13ce4:	26 c0       	rjmp	.+76     	; 0x13d32 <Read_Config+0x140>
    cfg = fopen(name, "rb");
    if(cfg == NULL)
    {
        ++errors;
//FIXME
        perror("Read_Config - open");
   13ce6:	86 e3       	ldi	r24, 0x36	; 54
   13ce8:	9e e0       	ldi	r25, 0x0E	; 14
   13cea:	0e 94 a3 78 	call	0xf146	; 0xf146 <perror>
        printf("Read_Config: open(%s) failed\n", name);
   13cee:	ed b7       	in	r30, 0x3d	; 61
   13cf0:	fe b7       	in	r31, 0x3e	; 62
   13cf2:	15 83       	std	Z+5, r17	; 0x05
   13cf4:	04 83       	std	Z+4, r16	; 0x04
   13cf6:	8d ef       	ldi	r24, 0xFD	; 253
   13cf8:	90 e2       	ldi	r25, 0x20	; 32
   13cfa:	a0 e0       	ldi	r26, 0x00	; 0
   13cfc:	81 83       	std	Z+1, r24	; 0x01
   13cfe:	92 83       	std	Z+2, r25	; 0x02
   13d00:	a3 83       	std	Z+3, r26	; 0x03
   13d02:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
        set_Config_Defaults();
        return(errors);
   13d06:	81 e0       	ldi	r24, 0x01	; 1
   13d08:	90 e0       	ldi	r25, 0x00	; 0
   13d0a:	70 c3       	rjmp	.+1760   	; 0x143ec <Read_Config+0x7fa>
    }

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
    {
        ++lines;
   13d0c:	ff ef       	ldi	r31, 0xFF	; 255
   13d0e:	2f 1a       	sub	r2, r31
   13d10:	3f 0a       	sbc	r3, r31

        ptr = get_token(str, token, sizeof(token)-2);
   13d12:	4e e7       	ldi	r20, 0x7E	; 126
   13d14:	50 e0       	ldi	r21, 0x00	; 0
   13d16:	9e 01       	movw	r18, r28
   13d18:	28 5f       	subi	r18, 0xF8	; 248
   13d1a:	3f 4f       	sbci	r19, 0xFF	; 255
   13d1c:	49 01       	movw	r8, r18
   13d1e:	b9 01       	movw	r22, r18
   13d20:	ce 01       	movw	r24, r28
   13d22:	88 57       	subi	r24, 0x78	; 120
   13d24:	9f 4f       	sbci	r25, 0xFF	; 255
   13d26:	0e 94 31 33 	call	0x6662	; 0x6662 <get_token>
   13d2a:	5c 01       	movw	r10, r24

// Skip comments
        if(token[0] == 0 || token[0]  == '#')
   13d2c:	88 85       	ldd	r24, Y+8	; 0x08
   13d2e:	81 11       	cpse	r24, r1
   13d30:	10 c0       	rjmp	.+32     	; 0x13d52 <Read_Config+0x160>
        printf("Read_Config: open(%s) failed\n", name);
        set_Config_Defaults();
        return(errors);
    }

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
   13d32:	c5 5f       	subi	r28, 0xF5	; 245
   13d34:	de 4f       	sbci	r29, 0xFE	; 254
   13d36:	48 81       	ld	r20, Y
   13d38:	59 81       	ldd	r21, Y+1	; 0x01
   13d3a:	cb 50       	subi	r28, 0x0B	; 11
   13d3c:	d1 40       	sbci	r29, 0x01	; 1
   13d3e:	6e e7       	ldi	r22, 0x7E	; 126
   13d40:	70 e0       	ldi	r23, 0x00	; 0
   13d42:	ce 01       	movw	r24, r28
   13d44:	88 57       	subi	r24, 0x78	; 120
   13d46:	9f 4f       	sbci	r25, 0xFF	; 255
   13d48:	0e 94 8a 76 	call	0xed14	; 0xed14 <fgets>
   13d4c:	89 2b       	or	r24, r25
   13d4e:	f1 f6       	brne	.-68     	; 0x13d0c <Read_Config+0x11a>
   13d50:	0d c3       	rjmp	.+1562   	; 0x1436c <Read_Config+0x77a>
        ++lines;

        ptr = get_token(str, token, sizeof(token)-2);

// Skip comments
        if(token[0] == 0 || token[0]  == '#')
   13d52:	83 32       	cpi	r24, 0x23	; 35
   13d54:	71 f3       	breq	.-36     	; 0x13d32 <Read_Config+0x140>
            continue;

        val.l = 0;
        tok = TOK_INVALID;

        if( ( ind = tok_index(token) )  == -1)
   13d56:	c4 01       	movw	r24, r8
   13d58:	0e 94 c4 92 	call	0x12588	; 0x12588 <tok_index>
   13d5c:	8f 3f       	cpi	r24, 0xFF	; 255
   13d5e:	49 f4       	brne	.+18     	; 0x13d72 <Read_Config+0x180>
        {
            printf("Unexpected token: %s, at line:%d\n", token,lines);
   13d60:	ed b7       	in	r30, 0x3d	; 61
   13d62:	fe b7       	in	r31, 0x3e	; 62
   13d64:	37 82       	std	Z+7, r3	; 0x07
   13d66:	26 82       	std	Z+6, r2	; 0x06
   13d68:	95 82       	std	Z+5, r9	; 0x05
   13d6a:	84 82       	std	Z+4, r8	; 0x04
   13d6c:	8b ed       	ldi	r24, 0xDB	; 219
   13d6e:	90 e2       	ldi	r25, 0x20	; 32
   13d70:	c4 c0       	rjmp	.+392    	; 0x13efa <Read_Config+0x308>
            ++errors;
            continue;
        }
        tok = tokens[ind].tok;
   13d72:	24 e0       	ldi	r18, 0x04	; 4
   13d74:	82 02       	muls	r24, r18
   13d76:	f0 01       	movw	r30, r0
   13d78:	11 24       	eor	r1, r1
   13d7a:	ec 53       	subi	r30, 0x3C	; 60
   13d7c:	fe 4f       	sbci	r31, 0xFE	; 254
   13d7e:	02 81       	ldd	r16, Z+2	; 0x02
   13d80:	13 81       	ldd	r17, Z+3	; 0x03

// get optional argument
        ptr = get_token(ptr, token, sizeof(token)-2);
   13d82:	4e e7       	ldi	r20, 0x7E	; 126
   13d84:	50 e0       	ldi	r21, 0x00	; 0
   13d86:	b4 01       	movw	r22, r8
   13d88:	c5 01       	movw	r24, r10
   13d8a:	0e 94 31 33 	call	0x6662	; 0x6662 <get_token>
   13d8e:	5c 01       	movw	r10, r24
        if(MATCH(token,"="))
   13d90:	69 e4       	ldi	r22, 0x49	; 73
   13d92:	7e e0       	ldi	r23, 0x0E	; 14
   13d94:	c4 01       	movw	r24, r8
   13d96:	0e 94 69 32 	call	0x64d2	; 0x64d2 <MATCH>
   13d9a:	89 2b       	or	r24, r25
   13d9c:	39 f0       	breq	.+14     	; 0x13dac <Read_Config+0x1ba>
            ptr = get_token(ptr, token, sizeof(token)-2);
   13d9e:	4e e7       	ldi	r20, 0x7E	; 126
   13da0:	50 e0       	ldi	r21, 0x00	; 0
   13da2:	b4 01       	movw	r22, r8
   13da4:	c5 01       	movw	r24, r10
   13da6:	0e 94 31 33 	call	0x6662	; 0x6662 <get_token>
   13daa:	5c 01       	movw	r10, r24
        val.l = get_value(token);
   13dac:	c4 01       	movw	r24, r8
   13dae:	0e 94 74 33 	call	0x66e8	; 0x66e8 <get_value>
        val.w = (uint16_t) 0xFFFF & val.l;
        val.b = (uint8_t) 0xFF & val.l;

//FIXME check for state and last state
        if(tok == TOK_END )
   13db2:	01 31       	cpi	r16, 0x11	; 17
   13db4:	11 05       	cpc	r17, r1
        {
            state = pop_state();
   13db6:	19 f4       	brne	.+6      	; 0x13dbe <Read_Config+0x1cc>
   13db8:	0d db       	rcall	.-2534   	; 0x133d4 <pop_state>
   13dba:	3c 01       	movw	r6, r24
            continue;
   13dbc:	ba cf       	rjmp	.-140    	; 0x13d32 <Read_Config+0x140>
        }

        switch(state)
   13dbe:	30 e1       	ldi	r19, 0x10	; 16
   13dc0:	63 16       	cp	r6, r19
   13dc2:	71 04       	cpc	r7, r1
   13dc4:	08 f0       	brcs	.+2      	; 0x13dc8 <Read_Config+0x1d6>
   13dc6:	bc c2       	rjmp	.+1400   	; 0x14340 <Read_Config+0x74e>
   13dc8:	f3 01       	movw	r30, r6
   13dca:	ea 53       	subi	r30, 0x3A	; 58
   13dcc:	ff 4f       	sbci	r31, 0xFF	; 255
   13dce:	0c 94 d0 e6 	jmp	0x1cda0	; 0x1cda0 <__tablejump2__>
        {
            case START_STATE:
                switch(tok)
   13dd2:	0e 30       	cpi	r16, 0x0E	; 14
   13dd4:	11 05       	cpc	r17, r1
   13dd6:	09 f4       	brne	.+2      	; 0x13dda <Read_Config+0x1e8>
   13dd8:	83 c0       	rjmp	.+262    	; 0x13ee0 <Read_Config+0x2ee>
   13dda:	44 f4       	brge	.+16     	; 0x13dec <Read_Config+0x1fa>
   13ddc:	02 30       	cpi	r16, 0x02	; 2
   13dde:	11 05       	cpc	r17, r1
   13de0:	09 f4       	brne	.+2      	; 0x13de4 <Read_Config+0x1f2>
   13de2:	42 c0       	rjmp	.+132    	; 0x13e68 <Read_Config+0x276>
   13de4:	0c 30       	cpi	r16, 0x0C	; 12
   13de6:	11 05       	cpc	r17, r1
   13de8:	19 f1       	breq	.+70     	; 0x13e30 <Read_Config+0x23e>
   13dea:	7f c0       	rjmp	.+254    	; 0x13eea <Read_Config+0x2f8>
   13dec:	03 32       	cpi	r16, 0x23	; 35
   13dee:	11 05       	cpc	r17, r1
   13df0:	f9 f0       	breq	.+62     	; 0x13e30 <Read_Config+0x23e>
   13df2:	04 32       	cpi	r16, 0x24	; 36
   13df4:	11 05       	cpc	r17, r1
   13df6:	29 f0       	breq	.+10     	; 0x13e02 <Read_Config+0x210>
   13df8:	00 32       	cpi	r16, 0x20	; 32
   13dfa:	11 05       	cpc	r17, r1
   13dfc:	09 f0       	breq	.+2      	; 0x13e00 <Read_Config+0x20e>
   13dfe:	75 c0       	rjmp	.+234    	; 0x13eea <Read_Config+0x2f8>
   13e00:	4f c0       	rjmp	.+158    	; 0x13ea0 <Read_Config+0x2ae>
                {
                    case TOK_SS80_DEFAULT:
                        push_state(state);
   13e02:	80 e0       	ldi	r24, 0x00	; 0
   13e04:	90 e0       	ldi	r25, 0x00	; 0
   13e06:	cd da       	rcall	.-2662   	; 0x133a2 <push_state>
                        state = SS80_STATE;
                        index = alloc_device(SS80_DEFAULT_TYPE);
   13e08:	82 e0       	ldi	r24, 0x02	; 2
   13e0a:	90 e0       	ldi	r25, 0x00	; 0
   13e0c:	f9 d9       	rcall	.-3086   	; 0x13200 <alloc_device>
   13e0e:	c8 5f       	subi	r28, 0xF8	; 248
   13e10:	de 4f       	sbci	r29, 0xFE	; 254
   13e12:	88 83       	st	Y, r24
   13e14:	c8 50       	subi	r28, 0x08	; 8
   13e16:	d1 40       	sbci	r29, 0x01	; 1
   13e18:	8f 3f       	cpi	r24, 0xFF	; 255
                        if(index == -1)
   13e1a:	09 f4       	brne	.+2      	; 0x13e1e <Read_Config+0x22c>
   13e1c:	8a cf       	rjmp	.-236    	; 0x13d32 <Read_Config+0x140>
   13e1e:	4b e0       	ldi	r20, 0x0B	; 11
                            state = START_STATE;
                        else
                            SS80p = (SS80DiskType *) Devices[index].dev;
   13e20:	84 02       	muls	r24, r20
   13e22:	f0 01       	movw	r30, r0
   13e24:	11 24       	eor	r1, r1
   13e26:	e4 50       	subi	r30, 0x04	; 4
   13e28:	f1 4e       	sbci	r31, 0xE1	; 225
   13e2a:	e7 80       	ldd	r14, Z+7	; 0x07
   13e2c:	f0 84       	ldd	r15, Z+8	; 0x08
   13e2e:	18 c0       	rjmp	.+48     	; 0x13e60 <Read_Config+0x26e>
                        break;
                    case TOK_SS80:
                    case TOK_CS80:
                        push_state(state);
   13e30:	80 e0       	ldi	r24, 0x00	; 0
   13e32:	90 e0       	ldi	r25, 0x00	; 0
   13e34:	b6 da       	rcall	.-2708   	; 0x133a2 <push_state>
                        state = SS80_STATE;
                        index = alloc_device(SS80_TYPE);
   13e36:	83 e0       	ldi	r24, 0x03	; 3
   13e38:	90 e0       	ldi	r25, 0x00	; 0
   13e3a:	e2 d9       	rcall	.-3132   	; 0x13200 <alloc_device>
   13e3c:	c8 5f       	subi	r28, 0xF8	; 248
   13e3e:	de 4f       	sbci	r29, 0xFE	; 254
   13e40:	88 83       	st	Y, r24
   13e42:	c8 50       	subi	r28, 0x08	; 8
   13e44:	d1 40       	sbci	r29, 0x01	; 1
   13e46:	8f 3f       	cpi	r24, 0xFF	; 255
                        if(index == -1)
   13e48:	09 f4       	brne	.+2      	; 0x13e4c <Read_Config+0x25a>
   13e4a:	73 cf       	rjmp	.-282    	; 0x13d32 <Read_Config+0x140>
   13e4c:	9b e0       	ldi	r25, 0x0B	; 11
                        {
                            state = START_STATE;
                        }
                        else
                        {
                            SS80p = (SS80DiskType *) Devices[index].dev;
   13e4e:	89 02       	muls	r24, r25
   13e50:	f0 01       	movw	r30, r0
   13e52:	11 24       	eor	r1, r1
   13e54:	e4 50       	subi	r30, 0x04	; 4
   13e56:	f1 4e       	sbci	r31, 0xE1	; 225
   13e58:	e7 80       	ldd	r14, Z+7	; 0x07
   13e5a:	f0 84       	ldd	r15, Z+8	; 0x08
                            hpdir_set_parameters(index,token); // also SS80p->HEADER.model
   13e5c:	b4 01       	movw	r22, r8
   13e5e:	5b db       	rcall	.-2378   	; 0x13516 <hpdir_set_parameters>
   13e60:	66 24       	eor	r6, r6
                            SS80p = (SS80DiskType *) Devices[index].dev;
                        break;
                    case TOK_SS80:
                    case TOK_CS80:
                        push_state(state);
                        state = SS80_STATE;
   13e62:	63 94       	inc	r6
   13e64:	71 2c       	mov	r7, r1
                            hpdir_set_parameters(index,token); // also SS80p->HEADER.model
                        }
                        break;
#ifdef AMIGO
                    case TOK_AMIGO:
                        push_state(state);
   13e66:	65 cf       	rjmp	.-310    	; 0x13d32 <Read_Config+0x140>
   13e68:	80 e0       	ldi	r24, 0x00	; 0
   13e6a:	90 e0       	ldi	r25, 0x00	; 0
   13e6c:	9a da       	rcall	.-2764   	; 0x133a2 <push_state>
                        state = AMIGO_STATE;
                        index = alloc_device(AMIGO_TYPE);
   13e6e:	81 e0       	ldi	r24, 0x01	; 1
   13e70:	90 e0       	ldi	r25, 0x00	; 0
   13e72:	c6 d9       	rcall	.-3188   	; 0x13200 <alloc_device>
   13e74:	c8 5f       	subi	r28, 0xF8	; 248
   13e76:	de 4f       	sbci	r29, 0xFE	; 254
   13e78:	88 83       	st	Y, r24
   13e7a:	c8 50       	subi	r28, 0x08	; 8
   13e7c:	d1 40       	sbci	r29, 0x01	; 1
   13e7e:	8f 3f       	cpi	r24, 0xFF	; 255
                        if(index == -1)
   13e80:	09 f4       	brne	.+2      	; 0x13e84 <Read_Config+0x292>
   13e82:	57 cf       	rjmp	.-338    	; 0x13d32 <Read_Config+0x140>
   13e84:	ab e0       	ldi	r26, 0x0B	; 11
                        {
                            state = START_STATE;
                        }
                        else
                        {
                            AMIGOp = (AMIGODiskType *) Devices[index].dev;
   13e86:	8a 02       	muls	r24, r26
   13e88:	f0 01       	movw	r30, r0
   13e8a:	11 24       	eor	r1, r1
   13e8c:	e4 50       	subi	r30, 0x04	; 4
   13e8e:	f1 4e       	sbci	r31, 0xE1	; 225
   13e90:	47 80       	ldd	r4, Z+7	; 0x07
   13e92:	50 84       	ldd	r5, Z+8	; 0x08
                            hpdir_set_parameters(index,token); // also sets AMIGOp->HEADER.model
   13e94:	b4 01       	movw	r22, r8
   13e96:	3f db       	rcall	.-2434   	; 0x13516 <hpdir_set_parameters>
                        }
                        break;
#ifdef AMIGO
                    case TOK_AMIGO:
                        push_state(state);
                        state = AMIGO_STATE;
   13e98:	aa e0       	ldi	r26, 0x0A	; 10
   13e9a:	6a 2e       	mov	r6, r26
   13e9c:	71 2c       	mov	r7, r1
   13e9e:	49 cf       	rjmp	.-366    	; 0x13d32 <Read_Config+0x140>
                            hpdir_set_parameters(index,token); // also sets AMIGOp->HEADER.model
                        }
                        break;
#endif
                    case TOK_PRINTER:
                        push_state(state);
   13ea0:	80 e0       	ldi	r24, 0x00	; 0
   13ea2:	90 e0       	ldi	r25, 0x00	; 0
   13ea4:	7e da       	rcall	.-2820   	; 0x133a2 <push_state>
   13ea6:	84 e0       	ldi	r24, 0x04	; 4
                        state = PRINTER_STATE;
                        index = alloc_device(PRINTER_TYPE);
   13ea8:	90 e0       	ldi	r25, 0x00	; 0
   13eaa:	aa d9       	rcall	.-3244   	; 0x13200 <alloc_device>
   13eac:	c8 5f       	subi	r28, 0xF8	; 248
   13eae:	de 4f       	sbci	r29, 0xFE	; 254
   13eb0:	88 83       	st	Y, r24
   13eb2:	c8 50       	subi	r28, 0x08	; 8
   13eb4:	d1 40       	sbci	r29, 0x01	; 1
   13eb6:	8f 3f       	cpi	r24, 0xFF	; 255
   13eb8:	09 f4       	brne	.+2      	; 0x13ebc <Read_Config+0x2ca>
                        if(index == -1)
   13eba:	3b cf       	rjmp	.-394    	; 0x13d32 <Read_Config+0x140>
   13ebc:	bb e0       	ldi	r27, 0x0B	; 11
   13ebe:	8b 02       	muls	r24, r27
                            state = START_STATE;
                        else
                            PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
   13ec0:	f0 01       	movw	r30, r0
   13ec2:	11 24       	eor	r1, r1
   13ec4:	e4 50       	subi	r30, 0x04	; 4
   13ec6:	f1 4e       	sbci	r31, 0xE1	; 225
   13ec8:	27 81       	ldd	r18, Z+7	; 0x07
   13eca:	30 85       	ldd	r19, Z+8	; 0x08
   13ecc:	c7 5f       	subi	r28, 0xF7	; 247
   13ece:	de 4f       	sbci	r29, 0xFE	; 254
   13ed0:	39 83       	std	Y+1, r19	; 0x01
   13ed2:	28 83       	st	Y, r18
   13ed4:	c9 50       	subi	r28, 0x09	; 9
   13ed6:	d1 40       	sbci	r29, 0x01	; 1
   13ed8:	fe e0       	ldi	r31, 0x0E	; 14
   13eda:	6f 2e       	mov	r6, r31
                        }
                        break;
#endif
                    case TOK_PRINTER:
                        push_state(state);
                        state = PRINTER_STATE;
   13edc:	71 2c       	mov	r7, r1
   13ede:	29 cf       	rjmp	.-430    	; 0x13d32 <Read_Config+0x140>
   13ee0:	60 93 b6 01 	sts	0x01B6, r22	; 0x8001b6 <debuglevel>
                            state = START_STATE;
                        else
                            PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
                        break;
                    case TOK_DEBUG:
                        debuglevel = val.w;
   13ee4:	70 93 b7 01 	sts	0x01B7, r23	; 0x8001b7 <debuglevel+0x1>
   13ee8:	24 cf       	rjmp	.-440    	; 0x13d32 <Read_Config+0x140>
   13eea:	ed b7       	in	r30, 0x3d	; 61
                        break;
   13eec:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected token: %s, at line:%d\n", ptr,lines);
   13eee:	37 82       	std	Z+7, r3	; 0x07
   13ef0:	26 82       	std	Z+6, r2	; 0x06
   13ef2:	b5 82       	std	Z+5, r11	; 0x05
   13ef4:	a4 82       	std	Z+4, r10	; 0x04
   13ef6:	89 eb       	ldi	r24, 0xB9	; 185
   13ef8:	90 e2       	ldi	r25, 0x20	; 32
   13efa:	a0 e0       	ldi	r26, 0x00	; 0
   13efc:	81 83       	std	Z+1, r24	; 0x01
   13efe:	92 83       	std	Z+2, r25	; 0x02
   13f00:	a3 83       	std	Z+3, r26	; 0x03
   13f02:	2e c2       	rjmp	.+1116   	; 0x14360 <Read_Config+0x76e>
   13f04:	09 30       	cpi	r16, 0x09	; 9
                        break;
                }
                break;

            case PRINTER_STATE:
                if(tok == TOK_CONFIG)
   13f06:	11 05       	cpc	r17, r1
   13f08:	39 f4       	brne	.+14     	; 0x13f18 <Read_Config+0x326>
   13f0a:	8e e0       	ldi	r24, 0x0E	; 14
                {
                    push_state(state);
   13f0c:	90 e0       	ldi	r25, 0x00	; 0
   13f0e:	49 da       	rcall	.-2926   	; 0x133a2 <push_state>
   13f10:	ef e0       	ldi	r30, 0x0F	; 15
   13f12:	6e 2e       	mov	r6, r30
                    state = PRINTER_CONFIG;
   13f14:	71 2c       	mov	r7, r1
   13f16:	0d cf       	rjmp	.-486    	; 0x13d32 <Read_Config+0x140>
   13f18:	ed b7       	in	r30, 0x3d	; 61
                {
                    printf("Unexpected PRINTER token: %s, at line:%d\n", ptr,lines);
                    ++errors;
                    break;
                }
                break;
   13f1a:	fe b7       	in	r31, 0x3e	; 62
                    push_state(state);
                    state = PRINTER_CONFIG;
                }
                else
                {
                    printf("Unexpected PRINTER token: %s, at line:%d\n", ptr,lines);
   13f1c:	37 82       	std	Z+7, r3	; 0x07
   13f1e:	26 82       	std	Z+6, r2	; 0x06
   13f20:	b5 82       	std	Z+5, r11	; 0x05
   13f22:	a4 82       	std	Z+4, r10	; 0x04
   13f24:	8f e8       	ldi	r24, 0x8F	; 143
   13f26:	90 e2       	ldi	r25, 0x20	; 32
   13f28:	e8 cf       	rjmp	.-48     	; 0x13efa <Read_Config+0x308>
   13f2a:	01 30       	cpi	r16, 0x01	; 1
   13f2c:	11 05       	cpc	r17, r1
                    break;
                }
                break;

            case PRINTER_CONFIG:
                if(tok == TOK_ADDRESS)
   13f2e:	c1 f4       	brne	.+48     	; 0x13f60 <Read_Config+0x36e>
   13f30:	c8 5f       	subi	r28, 0xF8	; 248
   13f32:	de 4f       	sbci	r29, 0xFE	; 254
                {
					address = val.b;
                    Devices[index].ADDRESS = address;
   13f34:	28 81       	ld	r18, Y
   13f36:	c8 50       	subi	r28, 0x08	; 8
   13f38:	d1 40       	sbci	r29, 0x01	; 1
   13f3a:	3b e0       	ldi	r19, 0x0B	; 11
   13f3c:	23 02       	muls	r18, r19
   13f3e:	f0 01       	movw	r30, r0
   13f40:	11 24       	eor	r1, r1
   13f42:	e4 50       	subi	r30, 0x04	; 4
   13f44:	f1 4e       	sbci	r31, 0xE1	; 225
   13f46:	61 83       	std	Z+1, r22	; 0x01
   13f48:	c7 5f       	subi	r28, 0xF7	; 247
   13f4a:	de 4f       	sbci	r29, 0xFE	; 254
                    PRINTERp->HEADER.ADDRESS  = address;
   13f4c:	a8 81       	ld	r26, Y
   13f4e:	b9 81       	ldd	r27, Y+1	; 0x01
   13f50:	c9 50       	subi	r28, 0x09	; 9
   13f52:	d1 40       	sbci	r29, 0x01	; 1
   13f54:	6c 93       	st	X, r22
   13f56:	8f ef       	ldi	r24, 0xFF	; 255
   13f58:	82 83       	std	Z+2, r24	; 0x02
// NO PPR
                    Devices[index].PPR = 0xff;
   13f5a:	fd 01       	movw	r30, r26
   13f5c:	81 83       	std	Z+1, r24	; 0x01
                    PRINTERp->HEADER.PPR = 0xff;
   13f5e:	e9 ce       	rjmp	.-558    	; 0x13d32 <Read_Config+0x140>
   13f60:	ed b7       	in	r30, 0x3d	; 61
   13f62:	fe b7       	in	r31, 0x3e	; 62
                }
                else
                {
                    printf("Unexpected PRINTER CONFIG token: %s, at line:%d\n", ptr,lines);
   13f64:	37 82       	std	Z+7, r3	; 0x07
   13f66:	26 82       	std	Z+6, r2	; 0x06
   13f68:	b5 82       	std	Z+5, r11	; 0x05
   13f6a:	a4 82       	std	Z+4, r10	; 0x04
   13f6c:	8e e5       	ldi	r24, 0x5E	; 94
   13f6e:	90 e2       	ldi	r25, 0x20	; 32
   13f70:	c4 cf       	rjmp	.-120    	; 0x13efa <Read_Config+0x308>
   13f72:	05 31       	cpi	r16, 0x15	; 21
                    ++errors;
                }
                break;

            case SS80_STATE:
                switch(tok)
   13f74:	11 05       	cpc	r17, r1
   13f76:	d9 f0       	breq	.+54     	; 0x13fae <Read_Config+0x3bc>
   13f78:	6c f4       	brge	.+26     	; 0x13f94 <Read_Config+0x3a2>
   13f7a:	09 30       	cpi	r16, 0x09	; 9
   13f7c:	11 05       	cpc	r17, r1
   13f7e:	f1 f0       	breq	.+60     	; 0x13fbc <Read_Config+0x3ca>
   13f80:	0b 30       	cpi	r16, 0x0B	; 11
   13f82:	11 05       	cpc	r17, r1
   13f84:	49 f5       	brne	.+82     	; 0x13fd8 <Read_Config+0x3e6>
   13f86:	81 e0       	ldi	r24, 0x01	; 1
                    case TOK_CONFIG:
                        push_state(state);
                        state = SS80_CONFIG;
                        break;
                    case TOK_CONTROLLER:
                        push_state(state);
   13f88:	90 e0       	ldi	r25, 0x00	; 0
   13f8a:	0b da       	rcall	.-3050   	; 0x133a2 <push_state>
   13f8c:	54 e0       	ldi	r21, 0x04	; 4
                        state = SS80_CONTROLLER;
   13f8e:	65 2e       	mov	r6, r21
   13f90:	71 2c       	mov	r7, r1
   13f92:	cf ce       	rjmp	.-610    	; 0x13d32 <Read_Config+0x140>
                        break;
   13f94:	07 32       	cpi	r16, 0x27	; 39
                    ++errors;
                }
                break;

            case SS80_STATE:
                switch(tok)
   13f96:	11 05       	cpc	r17, r1
   13f98:	c1 f0       	breq	.+48     	; 0x13fca <Read_Config+0x3d8>
   13f9a:	0a 32       	cpi	r16, 0x2A	; 42
   13f9c:	11 05       	cpc	r17, r1
   13f9e:	e1 f4       	brne	.+56     	; 0x13fd8 <Read_Config+0x3e6>
                    case TOK_UNIT:
                        push_state(state);
                        state = SS80_UNIT;
                        break;
                    case TOK_VOLUME:
                        push_state(state);
   13fa0:	81 e0       	ldi	r24, 0x01	; 1
   13fa2:	90 e0       	ldi	r25, 0x00	; 0
   13fa4:	fe d9       	rcall	.-3076   	; 0x133a2 <push_state>
                        state = SS80_VOLUME;
   13fa6:	36 e0       	ldi	r19, 0x06	; 6
   13fa8:	63 2e       	mov	r6, r19
   13faa:	71 2c       	mov	r7, r1
                        break;
   13fac:	c2 ce       	rjmp	.-636    	; 0x13d32 <Read_Config+0x140>

            case SS80_STATE:
                switch(tok)
                {
                    case TOK_HEADER:
                        push_state(state);
   13fae:	81 e0       	ldi	r24, 0x01	; 1
   13fb0:	90 e0       	ldi	r25, 0x00	; 0
   13fb2:	f7 d9       	rcall	.-3090   	; 0x133a2 <push_state>
                        state = SS80_HEADER;
   13fb4:	72 e0       	ldi	r23, 0x02	; 2
   13fb6:	67 2e       	mov	r6, r23
   13fb8:	71 2c       	mov	r7, r1
                        break;
   13fba:	bb ce       	rjmp	.-650    	; 0x13d32 <Read_Config+0x140>
                    case TOK_CONFIG:
                        push_state(state);
   13fbc:	81 e0       	ldi	r24, 0x01	; 1
   13fbe:	90 e0       	ldi	r25, 0x00	; 0
   13fc0:	f0 d9       	rcall	.-3104   	; 0x133a2 <push_state>
   13fc2:	63 e0       	ldi	r22, 0x03	; 3
                        state = SS80_CONFIG;
   13fc4:	66 2e       	mov	r6, r22
   13fc6:	71 2c       	mov	r7, r1
   13fc8:	b4 ce       	rjmp	.-664    	; 0x13d32 <Read_Config+0x140>
                        break;
   13fca:	81 e0       	ldi	r24, 0x01	; 1
                    case TOK_CONTROLLER:
                        push_state(state);
                        state = SS80_CONTROLLER;
                        break;
                    case TOK_UNIT:
                        push_state(state);
   13fcc:	90 e0       	ldi	r25, 0x00	; 0
   13fce:	e9 d9       	rcall	.-3118   	; 0x133a2 <push_state>
   13fd0:	45 e0       	ldi	r20, 0x05	; 5
   13fd2:	64 2e       	mov	r6, r20
                        state = SS80_UNIT;
   13fd4:	71 2c       	mov	r7, r1
   13fd6:	ad ce       	rjmp	.-678    	; 0x13d32 <Read_Config+0x140>
   13fd8:	ed b7       	in	r30, 0x3d	; 61
                        break;
   13fda:	fe b7       	in	r31, 0x3e	; 62
                    case TOK_VOLUME:
                        push_state(state);
                        state = SS80_VOLUME;
                        break;
                    default:
                        printf("Unexpected SS80 START token: %s, at line:%d\n", ptr,lines);
   13fdc:	37 82       	std	Z+7, r3	; 0x07
   13fde:	26 82       	std	Z+6, r2	; 0x06
   13fe0:	b5 82       	std	Z+5, r11	; 0x05
   13fe2:	a4 82       	std	Z+4, r10	; 0x04
   13fe4:	81 e3       	ldi	r24, 0x31	; 49
   13fe6:	90 e2       	ldi	r25, 0x20	; 32
   13fe8:	88 cf       	rjmp	.-240    	; 0x13efa <Read_Config+0x308>
   13fea:	02 31       	cpi	r16, 0x12	; 18
   13fec:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_HEADER:
                switch(tok)
   13fee:	11 f1       	breq	.+68     	; 0x14034 <Read_Config+0x442>
   13ff0:	0f 31       	cpi	r16, 0x1F	; 31
   13ff2:	11 05       	cpc	r17, r1
   13ff4:	89 f0       	breq	.+34     	; 0x14018 <Read_Config+0x426>
   13ff6:	01 30       	cpi	r16, 0x01	; 1
   13ff8:	11 05       	cpc	r17, r1
   13ffa:	09 f5       	brne	.+66     	; 0x1403e <Read_Config+0x44c>
   13ffc:	c8 5f       	subi	r28, 0xF8	; 248
   13ffe:	de 4f       	sbci	r29, 0xFE	; 254
                {
                    case TOK_ADDRESS:
						address = val.b;
                        Devices[index].ADDRESS = address;
   14000:	28 81       	ld	r18, Y
   14002:	c8 50       	subi	r28, 0x08	; 8
   14004:	d1 40       	sbci	r29, 0x01	; 1
   14006:	3b e0       	ldi	r19, 0x0B	; 11
   14008:	23 02       	muls	r18, r19
   1400a:	f0 01       	movw	r30, r0
   1400c:	11 24       	eor	r1, r1
   1400e:	e4 50       	subi	r30, 0x04	; 4
   14010:	f1 4e       	sbci	r31, 0xE1	; 225
   14012:	61 83       	std	Z+1, r22	; 0x01
   14014:	d7 01       	movw	r26, r14
   14016:	33 c1       	rjmp	.+614    	; 0x1427e <Read_Config+0x68c>
                        SS80p->HEADER.ADDRESS  = address;
   14018:	c8 5f       	subi	r28, 0xF8	; 248
   1401a:	de 4f       	sbci	r29, 0xFE	; 254
                        break;
                    case TOK_PPR:
						ppr = val.b;
                        Devices[index].PPR = ppr;
   1401c:	b8 81       	ld	r27, Y
   1401e:	c8 50       	subi	r28, 0x08	; 8
   14020:	d1 40       	sbci	r29, 0x01	; 1
   14022:	2b e0       	ldi	r18, 0x0B	; 11
   14024:	b2 02       	muls	r27, r18
   14026:	f0 01       	movw	r30, r0
   14028:	11 24       	eor	r1, r1
   1402a:	e4 50       	subi	r30, 0x04	; 4
   1402c:	f1 4e       	sbci	r31, 0xE1	; 225
   1402e:	62 83       	std	Z+2, r22	; 0x02
   14030:	f7 01       	movw	r30, r14
   14032:	27 c1       	rjmp	.+590    	; 0x14282 <Read_Config+0x690>
                        SS80p->HEADER.PPR = ppr;
   14034:	c4 01       	movw	r24, r8
   14036:	0e 94 1f 32 	call	0x643e	; 0x643e <stralloc>
                        break;
                    case TOK_FILE:
                        SS80p->HEADER.NAME = stralloc(token);
   1403a:	f7 01       	movw	r30, r14
   1403c:	28 c1       	rjmp	.+592    	; 0x1428e <Read_Config+0x69c>
   1403e:	ed b7       	in	r30, 0x3d	; 61
   14040:	fe b7       	in	r31, 0x3e	; 62
                        break;
                    default:
                        printf("Unexpected SS80 CONFIG token: %s, at line:%d\n", ptr,lines);
   14042:	37 82       	std	Z+7, r3	; 0x07
   14044:	26 82       	std	Z+6, r2	; 0x06
   14046:	b5 82       	std	Z+5, r11	; 0x05
   14048:	a4 82       	std	Z+4, r10	; 0x04
   1404a:	83 e0       	ldi	r24, 0x03	; 3
   1404c:	90 e2       	ldi	r25, 0x20	; 32
   1404e:	55 cf       	rjmp	.-342    	; 0x13efa <Read_Config+0x308>
   14050:	07 31       	cpi	r16, 0x17	; 23
   14052:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_CONFIG:
                if(tok == TOK_ID )
   14054:	21 f4       	brne	.+8      	; 0x1405e <Read_Config+0x46c>
   14056:	96 2f       	mov	r25, r22
   14058:	87 2f       	mov	r24, r23
                {
                    SS80p->CONFIG.ID = val.w;
   1405a:	f7 01       	movw	r30, r14
   1405c:	2f c1       	rjmp	.+606    	; 0x142bc <Read_Config+0x6ca>
   1405e:	ed b7       	in	r30, 0x3d	; 61
   14060:	fe b7       	in	r31, 0x3e	; 62
                }
                else
                {
                    printf("Unexpected SS80 CONFIG token: %s, at line:%d\n", ptr,lines);
   14062:	37 82       	std	Z+7, r3	; 0x07
   14064:	26 82       	std	Z+6, r2	; 0x06
   14066:	b5 82       	std	Z+5, r11	; 0x05
   14068:	a4 82       	std	Z+4, r10	; 0x04
   1406a:	85 ed       	ldi	r24, 0xD5	; 213
   1406c:	9f e1       	ldi	r25, 0x1F	; 31
   1406e:	45 cf       	rjmp	.-374    	; 0x13efa <Read_Config+0x308>
   14070:	06 32       	cpi	r16, 0x26	; 38
   14072:	11 05       	cpc	r17, r1
                    ++errors;
                }
                break;

            case SS80_CONTROLLER:
                switch(tok)
   14074:	71 f0       	breq	.+28     	; 0x14092 <Read_Config+0x4a0>
   14076:	08 32       	cpi	r16, 0x28	; 40
   14078:	11 05       	cpc	r17, r1
   1407a:	39 f0       	breq	.+14     	; 0x1408a <Read_Config+0x498>
   1407c:	05 32       	cpi	r16, 0x25	; 37
   1407e:	11 05       	cpc	r17, r1
   14080:	59 f4       	brne	.+22     	; 0x14098 <Read_Config+0x4a6>
   14082:	96 2f       	mov	r25, r22
   14084:	87 2f       	mov	r24, r23
                {
                    case TOK_UNITS_INSTALLED:
                        SS80p->CONTROLLER.UNITS_INSTALLED = val.w;
                        break;
                    case TOK_TRANSFER_RATE:
                        SS80p->CONTROLLER.TRANSFER_RATE = val.w;
   14086:	f7 01       	movw	r30, r14
   14088:	42 c1       	rjmp	.+644    	; 0x1430e <Read_Config+0x71c>
   1408a:	96 2f       	mov	r25, r22
   1408c:	87 2f       	mov	r24, r23

            case SS80_CONTROLLER:
                switch(tok)
                {
                    case TOK_UNITS_INSTALLED:
                        SS80p->CONTROLLER.UNITS_INSTALLED = val.w;
   1408e:	f7 01       	movw	r30, r14
   14090:	3b c1       	rjmp	.+630    	; 0x14308 <Read_Config+0x716>
   14092:	f7 01       	movw	r30, r14
   14094:	64 87       	std	Z+12, r22	; 0x0c
                        break;
                    case TOK_TRANSFER_RATE:
                        SS80p->CONTROLLER.TRANSFER_RATE = val.w;
                        break;
                    case TOK_TYPE:
                        SS80p->CONTROLLER.TYPE = val.b;
   14096:	4d ce       	rjmp	.-870    	; 0x13d32 <Read_Config+0x140>
   14098:	ed b7       	in	r30, 0x3d	; 61
                        break;
   1409a:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected SS80 CONTROLLER token: %s, at line:%d\n", ptr,lines);
   1409c:	37 82       	std	Z+7, r3	; 0x07
   1409e:	26 82       	std	Z+6, r2	; 0x06
   140a0:	b5 82       	std	Z+5, r11	; 0x05
   140a2:	a4 82       	std	Z+4, r10	; 0x04
   140a4:	83 ea       	ldi	r24, 0xA3	; 163
   140a6:	9f e1       	ldi	r25, 0x1F	; 31
   140a8:	28 cf       	rjmp	.-432    	; 0x13efa <Read_Config+0x308>
   140aa:	0a 30       	cpi	r16, 0x0A	; 10
   140ac:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   140ae:	09 f4       	brne	.+2      	; 0x140b2 <Read_Config+0x4c0>
   140b0:	45 c0       	rjmp	.+138    	; 0x1413c <Read_Config+0x54a>
   140b2:	d4 f4       	brge	.+52     	; 0x140e8 <Read_Config+0x4f6>
   140b4:	05 30       	cpi	r16, 0x05	; 5
   140b6:	11 05       	cpc	r17, r1
   140b8:	d1 f1       	breq	.+116    	; 0x1412e <Read_Config+0x53c>
   140ba:	64 f4       	brge	.+24     	; 0x140d4 <Read_Config+0x4e2>
   140bc:	01 15       	cp	r16, r1
   140be:	11 05       	cpc	r17, r1
   140c0:	09 f4       	brne	.+2      	; 0x140c4 <Read_Config+0x4d2>
   140c2:	40 c0       	rjmp	.+128    	; 0x14144 <Read_Config+0x552>
   140c4:	04 30       	cpi	r16, 0x04	; 4
   140c6:	11 05       	cpc	r17, r1
   140c8:	09 f0       	breq	.+2      	; 0x140cc <Read_Config+0x4da>
   140ca:	46 c0       	rjmp	.+140    	; 0x14158 <Read_Config+0x566>
   140cc:	f7 01       	movw	r30, r14
   140ce:	66 8b       	std	Z+22, r22	; 0x16
                        break;
                    case TOK_BURST_SIZE:
                        SS80p->UNIT.BURST_SIZE = val.b;
                        break;
                    case TOK_BLOCK_TIME:
                        SS80p->UNIT.BLOCK_TIME = val.w;
   140d0:	77 8b       	std	Z+23, r23	; 0x17
   140d2:	2f ce       	rjmp	.-930    	; 0x13d32 <Read_Config+0x140>
   140d4:	06 30       	cpi	r16, 0x06	; 6
                        break;
   140d6:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   140d8:	71 f1       	breq	.+92     	; 0x14136 <Read_Config+0x544>
   140da:	07 30       	cpi	r16, 0x07	; 7
   140dc:	11 05       	cpc	r17, r1
   140de:	e1 f5       	brne	.+120    	; 0x14158 <Read_Config+0x566>
   140e0:	f7 01       	movw	r30, r14
   140e2:	62 8b       	std	Z+18, r22	; 0x12
                        break;
                    case TOK_DEVICE_NUMBER:
                        SS80p->UNIT.DEVICE_NUMBER = val.l;
                        break;
                    case TOK_BYTES_PER_BLOCK:
                        SS80p->UNIT.BYTES_PER_BLOCK = val.w;
   140e4:	73 8b       	std	Z+19, r23	; 0x13
   140e6:	25 ce       	rjmp	.-950    	; 0x13d32 <Read_Config+0x140>
   140e8:	0c 31       	cpi	r16, 0x1C	; 28
                        break;
   140ea:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   140ec:	79 f1       	breq	.+94     	; 0x1414c <Read_Config+0x55a>
   140ee:	4c f4       	brge	.+18     	; 0x14102 <Read_Config+0x510>
   140f0:	0f 30       	cpi	r16, 0x0F	; 15
   140f2:	11 05       	cpc	r17, r1
   140f4:	b1 f0       	breq	.+44     	; 0x14122 <Read_Config+0x530>
   140f6:	03 31       	cpi	r16, 0x13	; 19
   140f8:	11 05       	cpc	r17, r1
   140fa:	71 f5       	brne	.+92     	; 0x14158 <Read_Config+0x566>
   140fc:	f7 01       	movw	r30, r14
   140fe:	67 8f       	std	Z+31, r22	; 0x1f
                        break;
                    case TOK_MAXIMUM_INTERLEAVE:
                        SS80p->UNIT.MAXIMUM_INTERLEAVE = val.b;
                        break;
                    case TOK_FIXED_VOLUMES:
                        SS80p->UNIT.FIXED_VOLUMES = val.b;
   14100:	18 ce       	rjmp	.-976    	; 0x13d32 <Read_Config+0x140>
   14102:	01 32       	cpi	r16, 0x21	; 33
                        break;
   14104:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   14106:	29 f1       	breq	.+74     	; 0x14152 <Read_Config+0x560>
   14108:	09 32       	cpi	r16, 0x29	; 41
   1410a:	11 05       	cpc	r17, r1
   1410c:	39 f0       	breq	.+14     	; 0x1411c <Read_Config+0x52a>
   1410e:	0e 31       	cpi	r16, 0x1E	; 30
   14110:	11 05       	cpc	r17, r1
   14112:	11 f5       	brne	.+68     	; 0x14158 <Read_Config+0x566>
   14114:	f7 01       	movw	r30, r14
   14116:	62 8f       	std	Z+26, r22	; 0x1a
                        break;
                    case TOK_CONTINUOUS_TRANSFER_RATE:
                        SS80p->UNIT.CONTINUOUS_TRANSFER_RATE = val.w;
                        break;
                    case TOK_OPTIMAL_RETRY_TIME:
                        SS80p->UNIT.OPTIMAL_RETRY_TIME = val.w;
   14118:	73 8f       	std	Z+27, r23	; 0x1b
   1411a:	0b ce       	rjmp	.-1002   	; 0x13d32 <Read_Config+0x140>
   1411c:	f7 01       	movw	r30, r14
                        break;
   1411e:	65 87       	std	Z+13, r22	; 0x0d

            case SS80_UNIT:
                switch(tok)
                {
                    case TOK_UNIT_TYPE:
                        SS80p->UNIT.UNIT_TYPE = val.b;
   14120:	08 ce       	rjmp	.-1008   	; 0x13d32 <Read_Config+0x140>
   14122:	f7 01       	movw	r30, r14
                        break;
   14124:	66 87       	std	Z+14, r22	; 0x0e
                    case TOK_DEVICE_NUMBER:
                        SS80p->UNIT.DEVICE_NUMBER = val.l;
   14126:	77 87       	std	Z+15, r23	; 0x0f
   14128:	80 8b       	std	Z+16, r24	; 0x10
   1412a:	91 8b       	std	Z+17, r25	; 0x11
   1412c:	02 ce       	rjmp	.-1020   	; 0x13d32 <Read_Config+0x140>
   1412e:	61 70       	andi	r22, 0x01	; 1
                        break;
   14130:	f7 01       	movw	r30, r14
                    case TOK_BYTES_PER_BLOCK:
                        SS80p->UNIT.BYTES_PER_BLOCK = val.w;
                        break;
                    case TOK_BUFFERED_BLOCKS:
                        SS80p->UNIT.BUFFERED_BLOCKS = 1 & val.b;
   14132:	64 8b       	std	Z+20, r22	; 0x14
   14134:	fe cd       	rjmp	.-1028   	; 0x13d32 <Read_Config+0x140>
   14136:	f7 01       	movw	r30, r14
                        break;
   14138:	65 8b       	std	Z+21, r22	; 0x15
                    case TOK_BURST_SIZE:
                        SS80p->UNIT.BURST_SIZE = val.b;
   1413a:	fb cd       	rjmp	.-1034   	; 0x13d32 <Read_Config+0x140>
   1413c:	f7 01       	movw	r30, r14
                        break;
   1413e:	60 8f       	std	Z+24, r22	; 0x18
                    case TOK_BLOCK_TIME:
                        SS80p->UNIT.BLOCK_TIME = val.w;
                        break;
                    case TOK_CONTINUOUS_TRANSFER_RATE:
                        SS80p->UNIT.CONTINUOUS_TRANSFER_RATE = val.w;
   14140:	71 8f       	std	Z+25, r23	; 0x19
   14142:	f7 cd       	rjmp	.-1042   	; 0x13d32 <Read_Config+0x140>
   14144:	f7 01       	movw	r30, r14
                        break;
   14146:	64 8f       	std	Z+28, r22	; 0x1c
                    case TOK_OPTIMAL_RETRY_TIME:
                        SS80p->UNIT.OPTIMAL_RETRY_TIME = val.w;
                        break;
                    case TOK_ACCESS_TIME:
                        SS80p->UNIT.ACCESS_TIME = val.w;
   14148:	75 8f       	std	Z+29, r23	; 0x1d
   1414a:	f3 cd       	rjmp	.-1050   	; 0x13d32 <Read_Config+0x140>
   1414c:	f7 01       	movw	r30, r14
                        break;
   1414e:	66 8f       	std	Z+30, r22	; 0x1e
                    case TOK_MAXIMUM_INTERLEAVE:
                        SS80p->UNIT.MAXIMUM_INTERLEAVE = val.b;
   14150:	f0 cd       	rjmp	.-1056   	; 0x13d32 <Read_Config+0x140>
   14152:	f7 01       	movw	r30, r14
                        break;
   14154:	60 a3       	std	Z+32, r22	; 0x20
                    case TOK_FIXED_VOLUMES:
                        SS80p->UNIT.FIXED_VOLUMES = val.b;
                        break;
                    case TOK_REMOVABLE_VOLUMES:
                        SS80p->UNIT.REMOVABLE_VOLUMES = val.b;
   14156:	ed cd       	rjmp	.-1062   	; 0x13d32 <Read_Config+0x140>
   14158:	ed b7       	in	r30, 0x3d	; 61
                        break;
   1415a:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected SS80 UNIT token: %s, at line:%d\n", ptr,lines);
   1415c:	37 82       	std	Z+7, r3	; 0x07
   1415e:	26 82       	std	Z+6, r2	; 0x06
   14160:	b5 82       	std	Z+5, r11	; 0x05
   14162:	a4 82       	std	Z+4, r10	; 0x04
   14164:	87 e7       	ldi	r24, 0x77	; 119
   14166:	9f e1       	ldi	r25, 0x1F	; 31
   14168:	c8 ce       	rjmp	.-624    	; 0x13efa <Read_Config+0x308>
   1416a:	0a 31       	cpi	r16, 0x1A	; 26
   1416c:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_VOLUME:
                switch(tok)
   1416e:	b9 f0       	breq	.+46     	; 0x1419e <Read_Config+0x5ac>
   14170:	64 f4       	brge	.+24     	; 0x1418a <Read_Config+0x598>
   14172:	08 31       	cpi	r16, 0x18	; 24
   14174:	11 05       	cpc	r17, r1
   14176:	e1 f0       	breq	.+56     	; 0x141b0 <Read_Config+0x5be>
   14178:	09 31       	cpi	r16, 0x19	; 25
   1417a:	11 05       	cpc	r17, r1
   1417c:	e1 f4       	brne	.+56     	; 0x141b6 <Read_Config+0x5c4>
   1417e:	f7 01       	movw	r30, r14
   14180:	60 a7       	std	Z+40, r22	; 0x28
                        break;
                    case TOK_MAX_SECTOR:
                        SS80p->VOLUME.MAX_SECTOR = val.w;
                        break;
                    case TOK_MAX_BLOCK_NUMBER:
                        SS80p->VOLUME.MAX_BLOCK_NUMBER = val.l;
   14182:	71 a7       	std	Z+41, r23	; 0x29
   14184:	82 a7       	std	Z+42, r24	; 0x2a
   14186:	93 a7       	std	Z+43, r25	; 0x2b
   14188:	d4 cd       	rjmp	.-1112   	; 0x13d32 <Read_Config+0x140>
   1418a:	0b 31       	cpi	r16, 0x1B	; 27
                        break;
   1418c:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_VOLUME:
                switch(tok)
   1418e:	69 f0       	breq	.+26     	; 0x141aa <Read_Config+0x5b8>
   14190:	0d 31       	cpi	r16, 0x1D	; 29
   14192:	11 05       	cpc	r17, r1
   14194:	81 f4       	brne	.+32     	; 0x141b6 <Read_Config+0x5c4>
   14196:	f7 01       	movw	r30, r14
   14198:	66 a3       	std	Z+38, r22	; 0x26
                        break;
                    case TOK_MAX_HEAD:
                        SS80p->VOLUME.MAX_HEAD = val.b;
                        break;
                    case TOK_MAX_SECTOR:
                        SS80p->VOLUME.MAX_SECTOR = val.w;
   1419a:	77 a3       	std	Z+39, r23	; 0x27
   1419c:	ca cd       	rjmp	.-1132   	; 0x13d32 <Read_Config+0x140>
   1419e:	f7 01       	movw	r30, r14
                        break;
   141a0:	61 a3       	std	Z+33, r22	; 0x21

            case SS80_VOLUME:
                switch(tok)
                {
                    case TOK_MAX_CYLINDER:
                        SS80p->VOLUME.MAX_CYLINDER = val.l;
   141a2:	72 a3       	std	Z+34, r23	; 0x22
   141a4:	83 a3       	std	Z+35, r24	; 0x23
   141a6:	94 a3       	std	Z+36, r25	; 0x24
   141a8:	c4 cd       	rjmp	.-1144   	; 0x13d32 <Read_Config+0x140>
   141aa:	f7 01       	movw	r30, r14
                        break;
   141ac:	65 a3       	std	Z+37, r22	; 0x25
                    case TOK_MAX_HEAD:
                        SS80p->VOLUME.MAX_HEAD = val.b;
   141ae:	c1 cd       	rjmp	.-1150   	; 0x13d32 <Read_Config+0x140>
   141b0:	f7 01       	movw	r30, r14
                        break;
   141b2:	64 a7       	std	Z+44, r22	; 0x2c
                        break;
                    case TOK_MAX_BLOCK_NUMBER:
                        SS80p->VOLUME.MAX_BLOCK_NUMBER = val.l;
                        break;
                    case TOK_INTERLEAVE:
                        SS80p->VOLUME.INTERLEAVE = val.b;
   141b4:	be cd       	rjmp	.-1156   	; 0x13d32 <Read_Config+0x140>
   141b6:	ed b7       	in	r30, 0x3d	; 61
                        break;
   141b8:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected SS80 VOLUME token: %s, at line:%d\n", ptr,lines);
   141ba:	37 82       	std	Z+7, r3	; 0x07
   141bc:	26 82       	std	Z+6, r2	; 0x06
   141be:	b5 82       	std	Z+5, r11	; 0x05
   141c0:	a4 82       	std	Z+4, r10	; 0x04
   141c2:	c4 5e       	subi	r28, 0xE4	; 228
   141c4:	de 4f       	sbci	r29, 0xFE	; 254
   141c6:	28 81       	ld	r18, Y
   141c8:	39 81       	ldd	r19, Y+1	; 0x01
   141ca:	4a 81       	ldd	r20, Y+2	; 0x02
   141cc:	cc 51       	subi	r28, 0x1C	; 28
   141ce:	d1 40       	sbci	r29, 0x01	; 1
   141d0:	c4 c0       	rjmp	.+392    	; 0x1435a <Read_Config+0x768>
   141d2:	04 31       	cpi	r16, 0x14	; 20
                }
                break;

#ifdef AMIGO
            case AMIGO_STATE:
                switch(tok)
   141d4:	11 05       	cpc	r17, r1
   141d6:	a1 f0       	breq	.+40     	; 0x14200 <Read_Config+0x60e>
   141d8:	05 31       	cpi	r16, 0x15	; 21
   141da:	11 05       	cpc	r17, r1
   141dc:	51 f0       	breq	.+20     	; 0x141f2 <Read_Config+0x600>
   141de:	09 30       	cpi	r16, 0x09	; 9
   141e0:	11 05       	cpc	r17, r1
                    case TOK_HEADER:
                        push_state(state);
                        state = AMIGO_HEADER;
                        break;
                    case TOK_CONFIG:
                        push_state(state);
   141e2:	a9 f4       	brne	.+42     	; 0x1420e <Read_Config+0x61c>
   141e4:	8a e0       	ldi	r24, 0x0A	; 10
   141e6:	90 e0       	ldi	r25, 0x00	; 0
   141e8:	dc d8       	rcall	.-3656   	; 0x133a2 <push_state>
                        state = AMIGO_CONFIG;
   141ea:	9c e0       	ldi	r25, 0x0C	; 12
   141ec:	69 2e       	mov	r6, r25
   141ee:	71 2c       	mov	r7, r1
                        break;
   141f0:	a0 cd       	rjmp	.-1216   	; 0x13d32 <Read_Config+0x140>
#ifdef AMIGO
            case AMIGO_STATE:
                switch(tok)
                {
                    case TOK_HEADER:
                        push_state(state);
   141f2:	8a e0       	ldi	r24, 0x0A	; 10
   141f4:	90 e0       	ldi	r25, 0x00	; 0
   141f6:	d5 d8       	rcall	.-3670   	; 0x133a2 <push_state>
   141f8:	2b e0       	ldi	r18, 0x0B	; 11
                        state = AMIGO_HEADER;
   141fa:	62 2e       	mov	r6, r18
   141fc:	71 2c       	mov	r7, r1
   141fe:	99 cd       	rjmp	.-1230   	; 0x13d32 <Read_Config+0x140>
                        break;
   14200:	8a e0       	ldi	r24, 0x0A	; 10
                    case TOK_CONFIG:
                        push_state(state);
                        state = AMIGO_CONFIG;
                        break;
                    case TOK_GEOMETRY:
                        push_state(state);
   14202:	90 e0       	ldi	r25, 0x00	; 0
   14204:	ce d8       	rcall	.-3684   	; 0x133a2 <push_state>
   14206:	8d e0       	ldi	r24, 0x0D	; 13
   14208:	68 2e       	mov	r6, r24
                        state = AMIGO_GEOMETRY;
   1420a:	71 2c       	mov	r7, r1
   1420c:	92 cd       	rjmp	.-1244   	; 0x13d32 <Read_Config+0x140>
   1420e:	ed b7       	in	r30, 0x3d	; 61
                        break;
   14210:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected AMIGO START token: %s, at line:%d\n", ptr,lines);
   14212:	37 82       	std	Z+7, r3	; 0x07
   14214:	26 82       	std	Z+6, r2	; 0x06
   14216:	b5 82       	std	Z+5, r11	; 0x05
   14218:	a4 82       	std	Z+4, r10	; 0x04
   1421a:	c7 5e       	subi	r28, 0xE7	; 231
   1421c:	de 4f       	sbci	r29, 0xFE	; 254
   1421e:	28 81       	ld	r18, Y
   14220:	39 81       	ldd	r19, Y+1	; 0x01
   14222:	4a 81       	ldd	r20, Y+2	; 0x02
   14224:	c9 51       	subi	r28, 0x19	; 25
   14226:	d1 40       	sbci	r29, 0x01	; 1
   14228:	98 c0       	rjmp	.+304    	; 0x1435a <Read_Config+0x768>
   1422a:	00 31       	cpi	r16, 0x10	; 16
   1422c:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case AMIGO_HEADER:
                switch(tok)
   1422e:	09 f4       	brne	.+2      	; 0x14232 <Read_Config+0x640>
   14230:	80 cd       	rjmp	.-1280   	; 0x13d32 <Read_Config+0x140>
   14232:	8c f4       	brge	.+34     	; 0x14256 <Read_Config+0x664>
   14234:	01 30       	cpi	r16, 0x01	; 1
   14236:	11 05       	cpc	r17, r1
   14238:	69 f5       	brne	.+90     	; 0x14294 <Read_Config+0x6a2>
   1423a:	c8 5f       	subi	r28, 0xF8	; 248
   1423c:	de 4f       	sbci	r29, 0xFE	; 254
                {
                    case TOK_DRIVE:
                        break;
                    case TOK_ADDRESS:
						address =  val.b;
                        Devices[index].ADDRESS = address;
   1423e:	28 81       	ld	r18, Y
   14240:	c8 50       	subi	r28, 0x08	; 8
   14242:	d1 40       	sbci	r29, 0x01	; 1
   14244:	3b e0       	ldi	r19, 0x0B	; 11
   14246:	23 02       	muls	r18, r19
   14248:	f0 01       	movw	r30, r0
   1424a:	11 24       	eor	r1, r1
   1424c:	e4 50       	subi	r30, 0x04	; 4
   1424e:	f1 4e       	sbci	r31, 0xE1	; 225
   14250:	61 83       	std	Z+1, r22	; 0x01
   14252:	d2 01       	movw	r26, r4
   14254:	14 c0       	rjmp	.+40     	; 0x1427e <Read_Config+0x68c>
                        AMIGOp->HEADER.ADDRESS = address;
   14256:	02 31       	cpi	r16, 0x12	; 18
   14258:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case AMIGO_HEADER:
                switch(tok)
   1425a:	a9 f0       	breq	.+42     	; 0x14286 <Read_Config+0x694>
   1425c:	0f 31       	cpi	r16, 0x1F	; 31
   1425e:	11 05       	cpc	r17, r1
   14260:	c9 f4       	brne	.+50     	; 0x14294 <Read_Config+0x6a2>
   14262:	c8 5f       	subi	r28, 0xF8	; 248
   14264:	de 4f       	sbci	r29, 0xFE	; 254
                        Devices[index].ADDRESS = address;
                        AMIGOp->HEADER.ADDRESS = address;
                        break;
                    case TOK_PPR:
						ppr = val.b;
                        Devices[index].PPR = ppr;
   14266:	b8 81       	ld	r27, Y
   14268:	c8 50       	subi	r28, 0x08	; 8
   1426a:	d1 40       	sbci	r29, 0x01	; 1
   1426c:	2b e0       	ldi	r18, 0x0B	; 11
   1426e:	b2 02       	muls	r27, r18
   14270:	f0 01       	movw	r30, r0
   14272:	11 24       	eor	r1, r1
   14274:	e4 50       	subi	r30, 0x04	; 4
   14276:	f1 4e       	sbci	r31, 0xE1	; 225
   14278:	62 83       	std	Z+2, r22	; 0x02
   1427a:	f2 01       	movw	r30, r4
   1427c:	02 c0       	rjmp	.+4      	; 0x14282 <Read_Config+0x690>
                        AMIGOp->HEADER.PPR = ppr;
   1427e:	6c 93       	st	X, r22
   14280:	58 cd       	rjmp	.-1360   	; 0x13d32 <Read_Config+0x140>
                    case TOK_DRIVE:
                        break;
                    case TOK_ADDRESS:
						address =  val.b;
                        Devices[index].ADDRESS = address;
                        AMIGOp->HEADER.ADDRESS = address;
   14282:	61 83       	std	Z+1, r22	; 0x01
                        break;
   14284:	56 cd       	rjmp	.-1364   	; 0x13d32 <Read_Config+0x140>
                    case TOK_PPR:
						ppr = val.b;
                        Devices[index].PPR = ppr;
                        AMIGOp->HEADER.PPR = ppr;
   14286:	c4 01       	movw	r24, r8
                        break;
   14288:	0e 94 1f 32 	call	0x643e	; 0x643e <stralloc>
                    case TOK_FILE:
                        AMIGOp->HEADER.NAME = stralloc(token);
   1428c:	f2 01       	movw	r30, r4
   1428e:	93 83       	std	Z+3, r25	; 0x03
   14290:	82 83       	std	Z+2, r24	; 0x02
   14292:	4f cd       	rjmp	.-1378   	; 0x13d32 <Read_Config+0x140>
   14294:	ed b7       	in	r30, 0x3d	; 61
                        break;
   14296:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected HEADER CONFIG token: %s, at line:%d\n", ptr,lines);
   14298:	37 82       	std	Z+7, r3	; 0x07
   1429a:	26 82       	std	Z+6, r2	; 0x06
   1429c:	b5 82       	std	Z+5, r11	; 0x05
   1429e:	a4 82       	std	Z+4, r10	; 0x04
   142a0:	ca 5e       	subi	r28, 0xEA	; 234
   142a2:	de 4f       	sbci	r29, 0xFE	; 254
   142a4:	28 81       	ld	r18, Y
   142a6:	39 81       	ldd	r19, Y+1	; 0x01
   142a8:	4a 81       	ldd	r20, Y+2	; 0x02
   142aa:	c6 51       	subi	r28, 0x16	; 22
   142ac:	d1 40       	sbci	r29, 0x01	; 1
   142ae:	55 c0       	rjmp	.+170    	; 0x1435a <Read_Config+0x768>
   142b0:	07 31       	cpi	r16, 0x17	; 23
   142b2:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case AMIGO_CONFIG:
                if(tok == TOK_ID )
   142b4:	31 f4       	brne	.+12     	; 0x142c2 <Read_Config+0x6d0>
   142b6:	96 2f       	mov	r25, r22
   142b8:	87 2f       	mov	r24, r23
                {
                    AMIGOp->CONFIG.ID = val.w;
   142ba:	f2 01       	movw	r30, r4
   142bc:	96 83       	std	Z+6, r25	; 0x06
   142be:	87 83       	std	Z+7, r24	; 0x07
   142c0:	38 cd       	rjmp	.-1424   	; 0x13d32 <Read_Config+0x140>
   142c2:	ed b7       	in	r30, 0x3d	; 61
   142c4:	fe b7       	in	r31, 0x3e	; 62
                }
                else
                {
                    printf("Unexpected AMIGO CONFIG token: %s, at line:%d\n", ptr,lines);
   142c6:	37 82       	std	Z+7, r3	; 0x07
   142c8:	26 82       	std	Z+6, r2	; 0x06
   142ca:	b5 82       	std	Z+5, r11	; 0x05
   142cc:	a4 82       	std	Z+4, r10	; 0x04
   142ce:	cd 5e       	subi	r28, 0xED	; 237
   142d0:	de 4f       	sbci	r29, 0xFE	; 254
   142d2:	28 81       	ld	r18, Y
   142d4:	39 81       	ldd	r19, Y+1	; 0x01
   142d6:	4a 81       	ldd	r20, Y+2	; 0x02
   142d8:	c3 51       	subi	r28, 0x13	; 19
   142da:	d1 40       	sbci	r29, 0x01	; 1
   142dc:	3e c0       	rjmp	.+124    	; 0x1435a <Read_Config+0x768>
   142de:	0d 30       	cpi	r16, 0x0D	; 13
   142e0:	11 05       	cpc	r17, r1
                    ++errors;
                }
                break;

            case AMIGO_GEOMETRY:
                switch(tok)
   142e2:	e1 f0       	breq	.+56     	; 0x1431c <Read_Config+0x72a>
   142e4:	3c f4       	brge	.+14     	; 0x142f4 <Read_Config+0x702>
   142e6:	08 30       	cpi	r16, 0x08	; 8
   142e8:	11 05       	cpc	r17, r1
   142ea:	e1 f4       	brne	.+56     	; 0x14324 <Read_Config+0x732>
   142ec:	96 2f       	mov	r25, r22
   142ee:	87 2f       	mov	r24, r23
                {
                    case TOK_BYTES_PER_SECTOR:
                        AMIGOp->GEOMETRY.BYTES_PER_SECTOR = val.w;
   142f0:	f2 01       	movw	r30, r4
   142f2:	0a c0       	rjmp	.+20     	; 0x14308 <Read_Config+0x716>
   142f4:	06 31       	cpi	r16, 0x16	; 22
   142f6:	11 05       	cpc	r17, r1
                    ++errors;
                }
                break;

            case AMIGO_GEOMETRY:
                switch(tok)
   142f8:	69 f0       	breq	.+26     	; 0x14314 <Read_Config+0x722>
   142fa:	02 32       	cpi	r16, 0x22	; 34
   142fc:	11 05       	cpc	r17, r1
   142fe:	91 f4       	brne	.+36     	; 0x14324 <Read_Config+0x732>
   14300:	96 2f       	mov	r25, r22
   14302:	87 2f       	mov	r24, r23
                {
                    case TOK_BYTES_PER_SECTOR:
                        AMIGOp->GEOMETRY.BYTES_PER_SECTOR = val.w;
                        break;
                    case TOK_SECTORS_PER_TRACK:
                        AMIGOp->GEOMETRY.SECTORS_PER_TRACK = val.w;
   14304:	f2 01       	movw	r30, r4
   14306:	03 c0       	rjmp	.+6      	; 0x1430e <Read_Config+0x71c>
   14308:	90 87       	std	Z+8, r25	; 0x08
   1430a:	81 87       	std	Z+9, r24	; 0x09

            case AMIGO_GEOMETRY:
                switch(tok)
                {
                    case TOK_BYTES_PER_SECTOR:
                        AMIGOp->GEOMETRY.BYTES_PER_SECTOR = val.w;
   1430c:	12 cd       	rjmp	.-1500   	; 0x13d32 <Read_Config+0x140>
   1430e:	92 87       	std	Z+10, r25	; 0x0a
                        break;
   14310:	83 87       	std	Z+11, r24	; 0x0b
                    case TOK_SECTORS_PER_TRACK:
                        AMIGOp->GEOMETRY.SECTORS_PER_TRACK = val.w;
   14312:	0f cd       	rjmp	.-1506   	; 0x13d32 <Read_Config+0x140>
   14314:	f2 01       	movw	r30, r4
                        break;
   14316:	64 87       	std	Z+12, r22	; 0x0c
                    case TOK_HEADS:
                        AMIGOp->GEOMETRY.HEADS = val.w;
   14318:	75 87       	std	Z+13, r23	; 0x0d
   1431a:	0b cd       	rjmp	.-1514   	; 0x13d32 <Read_Config+0x140>
   1431c:	f2 01       	movw	r30, r4
                        break;
   1431e:	66 87       	std	Z+14, r22	; 0x0e
                    case TOK_CYLINDERS:
                        AMIGOp->GEOMETRY.CYLINDERS = val.w;
   14320:	77 87       	std	Z+15, r23	; 0x0f
   14322:	07 cd       	rjmp	.-1522   	; 0x13d32 <Read_Config+0x140>
   14324:	ed b7       	in	r30, 0x3d	; 61
                        break;
   14326:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected AMIGO GEMETRY token: %s, at line:%d\n", ptr,lines);
   14328:	37 82       	std	Z+7, r3	; 0x07
   1432a:	26 82       	std	Z+6, r2	; 0x06
   1432c:	b5 82       	std	Z+5, r11	; 0x05
   1432e:	a4 82       	std	Z+4, r10	; 0x04
   14330:	c0 5f       	subi	r28, 0xF0	; 240
   14332:	de 4f       	sbci	r29, 0xFE	; 254
   14334:	28 81       	ld	r18, Y
   14336:	39 81       	ldd	r19, Y+1	; 0x01
   14338:	4a 81       	ldd	r20, Y+2	; 0x02
   1433a:	c0 51       	subi	r28, 0x10	; 16
   1433c:	d1 40       	sbci	r29, 0x01	; 1
   1433e:	0d c0       	rjmp	.+26     	; 0x1435a <Read_Config+0x768>
   14340:	ed b7       	in	r30, 0x3d	; 61
   14342:	fe b7       	in	r31, 0x3e	; 62
                        break;
                }
                break;
#endif                                // #ifdef AMIGO
            default:
                printf("Unexpected STATE: %s, at line:%d\n", ptr,lines);
   14344:	37 82       	std	Z+7, r3	; 0x07
   14346:	26 82       	std	Z+6, r2	; 0x06
   14348:	b5 82       	std	Z+5, r11	; 0x05
   1434a:	a4 82       	std	Z+4, r10	; 0x04
   1434c:	c3 5f       	subi	r28, 0xF3	; 243
   1434e:	de 4f       	sbci	r29, 0xFE	; 254
   14350:	28 81       	ld	r18, Y
   14352:	39 81       	ldd	r19, Y+1	; 0x01
   14354:	4a 81       	ldd	r20, Y+2	; 0x02
   14356:	cd 50       	subi	r28, 0x0D	; 13
   14358:	d1 40       	sbci	r29, 0x01	; 1
   1435a:	21 83       	std	Z+1, r18	; 0x01
   1435c:	32 83       	std	Z+2, r19	; 0x02
   1435e:	43 83       	std	Z+3, r20	; 0x03
   14360:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   14364:	ff ef       	ldi	r31, 0xFF	; 255
   14366:	cf 1a       	sub	r12, r31
                ++errors;
   14368:	df 0a       	sbc	r13, r31
   1436a:	e3 cc       	rjmp	.-1594   	; 0x13d32 <Read_Config+0x140>
   1436c:	61 14       	cp	r6, r1
                break;
   1436e:	71 04       	cpc	r7, r1

        }                                         // switch
    }                                             //while
    if(state != START_STATE)
   14370:	79 f0       	breq	.+30     	; 0x14390 <Read_Config+0x79e>
   14372:	ed b7       	in	r30, 0x3d	; 61
   14374:	fe b7       	in	r31, 0x3e	; 62
    {
        printf("Missing END statement at line:%d\n", lines);
   14376:	35 82       	std	Z+5, r3	; 0x05
   14378:	24 82       	std	Z+4, r2	; 0x04
   1437a:	88 e4       	ldi	r24, 0x48	; 72
   1437c:	9e e1       	ldi	r25, 0x1E	; 30
   1437e:	a0 e0       	ldi	r26, 0x00	; 0
   14380:	81 83       	std	Z+1, r24	; 0x01
   14382:	92 83       	std	Z+2, r25	; 0x02
   14384:	a3 83       	std	Z+3, r26	; 0x03
   14386:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   1438a:	ff ef       	ldi	r31, 0xFF	; 255
   1438c:	cf 1a       	sub	r12, r31
        ++errors;
   1438e:	df 0a       	sbc	r13, r31
   14390:	ed b7       	in	r30, 0x3d	; 61
   14392:	fe b7       	in	r31, 0x3e	; 62
    }
    printf("Read_Config: read(%d) lines\n", lines);
   14394:	35 82       	std	Z+5, r3	; 0x05
   14396:	24 82       	std	Z+4, r2	; 0x04
   14398:	8b e2       	ldi	r24, 0x2B	; 43
   1439a:	9e e1       	ldi	r25, 0x1E	; 30
   1439c:	a0 e0       	ldi	r26, 0x00	; 0
   1439e:	81 83       	std	Z+1, r24	; 0x01
   143a0:	92 83       	std	Z+2, r25	; 0x02
   143a2:	a3 83       	std	Z+3, r26	; 0x03
   143a4:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   143a8:	c1 14       	cp	r12, r1
   143aa:	d1 04       	cpc	r13, r1
    if(errors)
   143ac:	61 f0       	breq	.+24     	; 0x143c6 <Read_Config+0x7d4>
   143ae:	ed b7       	in	r30, 0x3d	; 61
   143b0:	fe b7       	in	r31, 0x3e	; 62
        printf("Read_Config: ****** errors(%d) ******\n", errors);
   143b2:	d5 82       	std	Z+5, r13	; 0x05
   143b4:	c4 82       	std	Z+4, r12	; 0x04
   143b6:	84 e0       	ldi	r24, 0x04	; 4
   143b8:	9e e1       	ldi	r25, 0x1E	; 30
   143ba:	a0 e0       	ldi	r26, 0x00	; 0
   143bc:	81 83       	std	Z+1, r24	; 0x01
   143be:	92 83       	std	Z+2, r25	; 0x02
   143c0:	a3 83       	std	Z+3, r26	; 0x03
   143c2:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   143c6:	c5 5f       	subi	r28, 0xF5	; 245
   143c8:	de 4f       	sbci	r29, 0xFE	; 254

    if(fclose(cfg) == EOF)
   143ca:	88 81       	ld	r24, Y
   143cc:	99 81       	ldd	r25, Y+1	; 0x01
   143ce:	cb 50       	subi	r28, 0x0B	; 11
   143d0:	d1 40       	sbci	r29, 0x01	; 1
   143d2:	0e 94 1c 7d 	call	0xfa38	; 0xfa38 <fclose>
   143d6:	01 96       	adiw	r24, 0x01	; 1
   143d8:	39 f4       	brne	.+14     	; 0x143e8 <Read_Config+0x7f6>
   143da:	8b e4       	ldi	r24, 0x4B	; 75
    {
        perror("Read_Config - close error");
   143dc:	9e e0       	ldi	r25, 0x0E	; 14
   143de:	0e 94 a3 78 	call	0xf146	; 0xf146 <perror>
   143e2:	2f ef       	ldi	r18, 0xFF	; 255
        ++errors;
   143e4:	c2 1a       	sub	r12, r18
   143e6:	d2 0a       	sbc	r13, r18
   143e8:	fb db       	rcall	.-2058   	; 0x13be0 <verify_devices>
    }

// Post process and fixup any devices
    verify_devices();
   143ea:	c6 01       	movw	r24, r12
   143ec:	c2 5e       	subi	r28, 0xE2	; 226

    return(errors);
   143ee:	de 4f       	sbci	r29, 0xFE	; 254
}
   143f0:	e2 e1       	ldi	r30, 0x12	; 18
   143f2:	0c 94 1b e7 	jmp	0x1ce36	; 0x1ce36 <__epilogue_restores__>

000143f6 <display_mounts>:
   143f6:	cf 93       	push	r28
   143f8:	00 d0       	rcall	.+0      	; 0x143fa <display_mounts+0x4>
            printf("PRINTER %-8s %2d\n", " ", (int) PRINTERp->HEADER.ADDRESS);
	}
}

void display_mounts()
{
   143fa:	1f 92       	push	r1
	int8_t i;
	printf("Mounted drives\n");
   143fc:	87 ed       	ldi	r24, 0xD7	; 215
   143fe:	96 e1       	ldi	r25, 0x16	; 22
   14400:	a0 e0       	ldi	r26, 0x00	; 0
   14402:	ed b7       	in	r30, 0x3d	; 61
   14404:	fe b7       	in	r31, 0x3e	; 62
   14406:	81 83       	std	Z+1, r24	; 0x01
   14408:	92 83       	std	Z+2, r25	; 0x02
   1440a:	a3 83       	std	Z+3, r26	; 0x03
   1440c:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
	for(i=0;i<MAX_DEVICES;++i)
   14410:	c0 e0       	ldi	r28, 0x00	; 0
		display_mount(i);
   14412:	8c 2f       	mov	r24, r28
   14414:	a0 da       	rcall	.-2752   	; 0x13956 <display_mount>
   14416:	cf 5f       	subi	r28, 0xFF	; 255

void display_mounts()
{
	int8_t i;
	printf("Mounted drives\n");
	for(i=0;i<MAX_DEVICES;++i)
   14418:	cc 30       	cpi	r28, 0x0C	; 12
   1441a:	d9 f7       	brne	.-10     	; 0x14412 <display_mounts+0x1c>
		display_mount(i);
    printf("\n");
   1441c:	85 ed       	ldi	r24, 0xD5	; 213
   1441e:	96 e1       	ldi	r25, 0x16	; 22
   14420:	a0 e0       	ldi	r26, 0x00	; 0
   14422:	ed b7       	in	r30, 0x3d	; 61
   14424:	fe b7       	in	r31, 0x3e	; 62
   14426:	81 83       	std	Z+1, r24	; 0x01
   14428:	92 83       	std	Z+2, r25	; 0x02
   1442a:	a3 83       	std	Z+3, r26	; 0x03
   1442c:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
}
   14430:	0f 90       	pop	r0
   14432:	0f 90       	pop	r0
   14434:	0f 90       	pop	r0
   14436:	cf 91       	pop	r28
   14438:	08 95       	ret

0001443a <mount>:

/// ===============================================
/// @brief mount disks - testing
/// @return Devices[] index on success, -1 on error
int8_t mount(int argc, char *argv[])
{
   1443a:	a5 e0       	ldi	r26, 0x05	; 5
   1443c:	b0 e0       	ldi	r27, 0x00	; 0
   1443e:	e3 e2       	ldi	r30, 0x23	; 35
   14440:	f2 ea       	ldi	r31, 0xA2	; 162
   14442:	0c 94 09 e7 	jmp	0x1ce12	; 0x1ce12 <__prologue_saves__+0x14>
   14446:	eb 01       	movw	r28, r22
	{
		printf("argv[%d] = %s\n", (int) i, argv[i]);

	}
#endif
	if(argc == 1)
   14448:	81 30       	cpi	r24, 0x01	; 1
   1444a:	91 05       	cpc	r25, r1
   1444c:	11 f4       	brne	.+4      	; 0x14452 <mount+0x18>
	{
		display_mounts();
   1444e:	d3 df       	rcall	.-90     	; 0x143f6 <display_mounts>
   14450:	c2 c0       	rjmp	.+388    	; 0x145d6 <mount+0x19c>
		return(1);
	}
	else if(argc == 3)
   14452:	83 30       	cpi	r24, 0x03	; 3
   14454:	91 05       	cpc	r25, r1
   14456:	61 f5       	brne	.+88     	; 0x144b0 <mount+0x76>
	{
			if(MATCHI(argv[1], "PRINTER"))
   14458:	65 e6       	ldi	r22, 0x65	; 101
   1445a:	7e e0       	ldi	r23, 0x0E	; 14
   1445c:	8a 81       	ldd	r24, Y+2	; 0x02
   1445e:	9b 81       	ldd	r25, Y+3	; 0x03
   14460:	0e 94 7d 32 	call	0x64fa	; 0x64fa <MATCHI>
   14464:	89 2b       	or	r24, r25
   14466:	09 f4       	brne	.+2      	; 0x1446a <mount+0x30>
   14468:	b6 c0       	rjmp	.+364    	; 0x145d6 <mount+0x19c>
			{
				// FIXME - do we want to have separtate address and ppr ?
				int8_t address = atoi(argv[2]) & 0xff;
   1446a:	8c 81       	ldd	r24, Y+4	; 0x04
   1446c:	9d 81       	ldd	r25, Y+5	; 0x05
   1446e:	0e 94 c9 47 	call	0x8f92	; 0x8f92 <atoi>
   14472:	c8 2f       	mov	r28, r24
				index = alloc_device(PRINTER_TYPE);
   14474:	84 e0       	ldi	r24, 0x04	; 4
   14476:	90 e0       	ldi	r25, 0x00	; 0
   14478:	0e 94 00 99 	call	0x13200	; 0x13200 <alloc_device>
				if(index < 0)
   1447c:	87 ff       	sbrs	r24, 7
   1447e:	0b c0       	rjmp	.+22     	; 0x14496 <mount+0x5c>
				{
					printf("Could not allocate PRINTER structure\n");
   14480:	89 ec       	ldi	r24, 0xC9	; 201
   14482:	97 e1       	ldi	r25, 0x17	; 23
   14484:	a0 e0       	ldi	r26, 0x00	; 0
   14486:	ed b7       	in	r30, 0x3d	; 61
   14488:	fe b7       	in	r31, 0x3e	; 62
   1448a:	81 83       	std	Z+1, r24	; 0x01
   1448c:	92 83       	std	Z+2, r25	; 0x02
   1448e:	a3 83       	std	Z+3, r26	; 0x03
   14490:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   14494:	9e c0       	rjmp	.+316    	; 0x145d2 <mount+0x198>
					return(0);
				}
				PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
   14496:	9b e0       	ldi	r25, 0x0B	; 11
   14498:	89 02       	muls	r24, r25
   1449a:	f0 01       	movw	r30, r0
   1449c:	11 24       	eor	r1, r1
   1449e:	e4 50       	subi	r30, 0x04	; 4
   144a0:	f1 4e       	sbci	r31, 0xE1	; 225
				PRINTERp->HEADER.ADDRESS  = address;
   144a2:	a7 81       	ldd	r26, Z+7	; 0x07
   144a4:	b0 85       	ldd	r27, Z+8	; 0x08
   144a6:	cc 93       	st	X, r28
				Devices[index].ADDRESS = address;
   144a8:	c1 83       	std	Z+1, r28	; 0x01
				Devices[index].PPR = 0xff;
   144aa:	9f ef       	ldi	r25, 0xFF	; 255
   144ac:	92 83       	std	Z+2, r25	; 0x02
   144ae:	80 c0       	rjmp	.+256    	; 0x145b0 <mount+0x176>
				return( verify_device(index) );
			}
	}
	else if(argc == 4)
   144b0:	04 97       	sbiw	r24, 0x04	; 4
   144b2:	09 f0       	breq	.+2      	; 0x144b6 <mount+0x7c>
   144b4:	8d c0       	rjmp	.+282    	; 0x145d0 <mount+0x196>
		/*
		argv[1] = 9121
		argv[2] = 2
		argv[3] = amigo2.lif
		*/
		if(!hpdir_find_drive(argv[1],0,0) )
   144b6:	40 e0       	ldi	r20, 0x00	; 0
   144b8:	50 e0       	ldi	r21, 0x00	; 0
   144ba:	60 e0       	ldi	r22, 0x00	; 0
   144bc:	70 e0       	ldi	r23, 0x00	; 0
   144be:	8a 81       	ldd	r24, Y+2	; 0x02
   144c0:	9b 81       	ldd	r25, Y+3	; 0x03
   144c2:	ac d1       	rcall	.+856    	; 0x1481c <hpdir_find_drive>
   144c4:	89 2b       	or	r24, r25
   144c6:	59 f4       	brne	.+22     	; 0x144de <mount+0xa4>
		{
			printf("WARNING: model NOT found in hpdir.ini!\n");
   144c8:	81 ea       	ldi	r24, 0xA1	; 161
   144ca:	97 e1       	ldi	r25, 0x17	; 23
   144cc:	a0 e0       	ldi	r26, 0x00	; 0
   144ce:	ed b7       	in	r30, 0x3d	; 61
   144d0:	fe b7       	in	r31, 0x3e	; 62
   144d2:	81 83       	std	Z+1, r24	; 0x01
   144d4:	92 83       	std	Z+2, r25	; 0x02
   144d6:	a3 83       	std	Z+3, r26	; 0x03
   144d8:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   144dc:	37 c0       	rjmp	.+110    	; 0x1454c <mount+0x112>
			return(-1);
		}
		if(MATCHI(hpdir.TYPE, "SS80") || MATCHI(hpdir.TYPE,"CS80") )
   144de:	6d e6       	ldi	r22, 0x6D	; 109
   144e0:	7e e0       	ldi	r23, 0x0E	; 14
   144e2:	80 ee       	ldi	r24, 0xE0	; 224
   144e4:	9f e1       	ldi	r25, 0x1F	; 31
   144e6:	0e 94 7d 32 	call	0x64fa	; 0x64fa <MATCHI>
   144ea:	89 2b       	or	r24, r25
   144ec:	a9 f0       	breq	.+42     	; 0x14518 <mount+0xde>
		{
			// FIXME - do we want to have separtate address and ppr ?
			int8_t address = atoi(argv[2]) & 0xff;
   144ee:	8c 81       	ldd	r24, Y+4	; 0x04
   144f0:	9d 81       	ldd	r25, Y+5	; 0x05
   144f2:	0e 94 c9 47 	call	0x8f92	; 0x8f92 <atoi>
   144f6:	e8 2e       	mov	r14, r24
			int8_t ppr = address;
			index = alloc_device(SS80_TYPE);
   144f8:	83 e0       	ldi	r24, 0x03	; 3
   144fa:	90 e0       	ldi	r25, 0x00	; 0
   144fc:	0e 94 00 99 	call	0x13200	; 0x13200 <alloc_device>
   14500:	f8 2e       	mov	r15, r24
			if(index < 0)
   14502:	87 ff       	sbrs	r24, 7
   14504:	12 c0       	rjmp	.+36     	; 0x1452a <mount+0xf0>
			{
				printf("Could not allocate SS80 structure for %s\n",argv[2]);
   14506:	8c 81       	ldd	r24, Y+4	; 0x04
   14508:	9d 81       	ldd	r25, Y+5	; 0x05
   1450a:	ed b7       	in	r30, 0x3d	; 61
   1450c:	fe b7       	in	r31, 0x3e	; 62
   1450e:	95 83       	std	Z+5, r25	; 0x05
   14510:	84 83       	std	Z+4, r24	; 0x04
   14512:	87 e7       	ldi	r24, 0x77	; 119
   14514:	97 e1       	ldi	r25, 0x17	; 23
   14516:	38 c0       	rjmp	.+112    	; 0x14588 <mount+0x14e>
		if(!hpdir_find_drive(argv[1],0,0) )
		{
			printf("WARNING: model NOT found in hpdir.ini!\n");
			return(-1);
		}
		if(MATCHI(hpdir.TYPE, "SS80") || MATCHI(hpdir.TYPE,"CS80") )
   14518:	62 e7       	ldi	r22, 0x72	; 114
   1451a:	7e e0       	ldi	r23, 0x0E	; 14
   1451c:	80 ee       	ldi	r24, 0xE0	; 224
   1451e:	9f e1       	ldi	r25, 0x1F	; 31
   14520:	0e 94 7d 32 	call	0x64fa	; 0x64fa <MATCHI>
   14524:	89 2b       	or	r24, r25
   14526:	19 f7       	brne	.-58     	; 0x144ee <mount+0xb4>
   14528:	13 c0       	rjmp	.+38     	; 0x14550 <mount+0x116>
			if(index < 0)
			{
				printf("Could not allocate SS80 structure for %s\n",argv[2]);
				return(0);
			}
			SS80p = (SS80DiskType *) Devices[index].dev;
   1452a:	ff 2d       	mov	r31, r15
   1452c:	8b e0       	ldi	r24, 0x0B	; 11
   1452e:	f8 02       	muls	r31, r24
   14530:	80 01       	movw	r16, r0
   14532:	11 24       	eor	r1, r1
   14534:	04 50       	subi	r16, 0x04	; 4
   14536:	11 4e       	sbci	r17, 0xE1	; 225
   14538:	f8 01       	movw	r30, r16
   1453a:	c7 80       	ldd	r12, Z+7	; 0x07
   1453c:	d0 84       	ldd	r13, Z+8	; 0x08
			if( !hpdir_set_parameters(index, argv[1] ) )
   1453e:	6a 81       	ldd	r22, Y+2	; 0x02
   14540:	7b 81       	ldd	r23, Y+3	; 0x03
   14542:	8f 2d       	mov	r24, r15
   14544:	0e 94 8b 9a 	call	0x13516	; 0x13516 <hpdir_set_parameters>
   14548:	81 11       	cpse	r24, r1
   1454a:	25 c0       	rjmp	.+74     	; 0x14596 <mount+0x15c>
				return(-1);
   1454c:	8f ef       	ldi	r24, 0xFF	; 255
   1454e:	44 c0       	rjmp	.+136    	; 0x145d8 <mount+0x19e>
			Devices[index].ADDRESS = address;
			Devices[index].PPR = ppr;
			return( verify_device(index) );
		}
#ifdef AMIGO
		else if(MATCH(hpdir.TYPE, "AMIGO"))
   14550:	67 e7       	ldi	r22, 0x77	; 119
   14552:	7e e0       	ldi	r23, 0x0E	; 14
   14554:	80 ee       	ldi	r24, 0xE0	; 224
   14556:	9f e1       	ldi	r25, 0x1F	; 31
   14558:	0e 94 69 32 	call	0x64d2	; 0x64d2 <MATCH>
   1455c:	89 2b       	or	r24, r25
   1455e:	51 f1       	breq	.+84     	; 0x145b4 <mount+0x17a>
		{
			// FIXME - do we want to have separtate address and ppr ?
			int8_t address = atoi(argv[2]) & 0xff;
   14560:	8c 81       	ldd	r24, Y+4	; 0x04
   14562:	9d 81       	ldd	r25, Y+5	; 0x05
   14564:	0e 94 c9 47 	call	0x8f92	; 0x8f92 <atoi>
   14568:	e8 2e       	mov	r14, r24
			int8_t ppr = address;
			index = alloc_device(AMIGO_TYPE);
   1456a:	81 e0       	ldi	r24, 0x01	; 1
   1456c:	90 e0       	ldi	r25, 0x00	; 0
   1456e:	0e 94 00 99 	call	0x13200	; 0x13200 <alloc_device>
   14572:	f8 2e       	mov	r15, r24
			if(index < 0)
   14574:	87 ff       	sbrs	r24, 7
   14576:	d9 cf       	rjmp	.-78     	; 0x1452a <mount+0xf0>
			{
				printf("Could not allocate AMIGO structure for %s\n",argv[2]);
   14578:	8c 81       	ldd	r24, Y+4	; 0x04
   1457a:	9d 81       	ldd	r25, Y+5	; 0x05
   1457c:	ed b7       	in	r30, 0x3d	; 61
   1457e:	fe b7       	in	r31, 0x3e	; 62
   14580:	95 83       	std	Z+5, r25	; 0x05
   14582:	84 83       	std	Z+4, r24	; 0x04
   14584:	8c e4       	ldi	r24, 0x4C	; 76
   14586:	97 e1       	ldi	r25, 0x17	; 23
   14588:	a0 e0       	ldi	r26, 0x00	; 0
   1458a:	81 83       	std	Z+1, r24	; 0x01
   1458c:	92 83       	std	Z+2, r25	; 0x02
   1458e:	a3 83       	std	Z+3, r26	; 0x03
   14590:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   14594:	1e c0       	rjmp	.+60     	; 0x145d2 <mount+0x198>
				return(0);
			}
			AMIGOp = (AMIGODiskType *) Devices[index].dev;
			if( !hpdir_set_parameters(index, argv[1] ) )
				return(-1);
			AMIGOp->HEADER.NAME = stralloc(argv[3]);
   14596:	8e 81       	ldd	r24, Y+6	; 0x06
   14598:	9f 81       	ldd	r25, Y+7	; 0x07
   1459a:	0e 94 1f 32 	call	0x643e	; 0x643e <stralloc>
   1459e:	f6 01       	movw	r30, r12
   145a0:	93 83       	std	Z+3, r25	; 0x03
   145a2:	82 83       	std	Z+2, r24	; 0x02
			AMIGOp->HEADER.ADDRESS  = address;
   145a4:	e0 82       	st	Z, r14
			AMIGOp->HEADER.PPR = ppr;
   145a6:	e1 82       	std	Z+1, r14	; 0x01
			Devices[index].ADDRESS = address;
   145a8:	f8 01       	movw	r30, r16
   145aa:	e1 82       	std	Z+1, r14	; 0x01
			Devices[index].PPR = ppr;
			return( verify_device(index) );
   145ac:	e2 82       	std	Z+2, r14	; 0x02
   145ae:	8f 2d       	mov	r24, r15
   145b0:	4b da       	rcall	.-2922   	; 0x13a48 <verify_device>
   145b2:	12 c0       	rjmp	.+36     	; 0x145d8 <mount+0x19e>
		}
#endif
		else
		{
			printf("Expected AMIGO or SS80 or CS80 for [%s]\n",argv[1]);
   145b4:	8a 81       	ldd	r24, Y+2	; 0x02
   145b6:	9b 81       	ldd	r25, Y+3	; 0x03
   145b8:	ed b7       	in	r30, 0x3d	; 61
   145ba:	fe b7       	in	r31, 0x3e	; 62
   145bc:	95 83       	std	Z+5, r25	; 0x05
   145be:	84 83       	std	Z+4, r24	; 0x04
   145c0:	83 e2       	ldi	r24, 0x23	; 35
   145c2:	97 e1       	ldi	r25, 0x17	; 23
   145c4:	a0 e0       	ldi	r26, 0x00	; 0
   145c6:	81 83       	std	Z+1, r24	; 0x01
   145c8:	92 83       	std	Z+2, r25	; 0x02
   145ca:	a3 83       	std	Z+3, r26	; 0x03
   145cc:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
			return(0);
		}
	}
	else 
	{
		mount_usage();
   145d0:	52 d9       	rcall	.-3420   	; 0x13876 <mount_usage>
		return(0);
   145d2:	80 e0       	ldi	r24, 0x00	; 0
   145d4:	01 c0       	rjmp	.+2      	; 0x145d8 <mount+0x19e>
	}
	return(1);
   145d6:	81 e0       	ldi	r24, 0x01	; 1
}
   145d8:	cd b7       	in	r28, 0x3d	; 61
   145da:	de b7       	in	r29, 0x3e	; 62
   145dc:	25 96       	adiw	r28, 0x05	; 5
   145de:	e8 e0       	ldi	r30, 0x08	; 8
   145e0:	0c 94 25 e7 	jmp	0x1ce4a	; 0x1ce4a <__epilogue_restores__+0x14>

000145e4 <drives_tests>:

/// @brief GPIB user tests
///  User invoked GPIB functions and tasks
/// @return  1 matched token, 0 if not
int drives_tests(int argc, char * argv[])
{
   145e4:	ef 92       	push	r14
   145e6:	ff 92       	push	r15
   145e8:	0f 93       	push	r16
   145ea:	1f 93       	push	r17
   145ec:	cf 93       	push	r28
   145ee:	df 93       	push	r29
    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   145f0:	fb 01       	movw	r30, r22
   145f2:	00 81       	ld	r16, Z
   145f4:	11 81       	ldd	r17, Z+1	; 0x01

    if(!ptr)
   145f6:	01 15       	cp	r16, r1
   145f8:	11 05       	cpc	r17, r1
   145fa:	19 f4       	brne	.+6      	; 0x14602 <drives_tests+0x1e>
        return(0);
   145fc:	80 e0       	ldi	r24, 0x00	; 0
   145fe:	90 e0       	ldi	r25, 0x00	; 0
   14600:	6d c0       	rjmp	.+218    	; 0x146dc <drives_tests+0xf8>
   14602:	eb 01       	movw	r28, r22
   14604:	7c 01       	movw	r14, r24

    if (MATCHI(ptr,"drives") && MATCHI(argv[ind], "help"))
   14606:	6d e7       	ldi	r22, 0x7D	; 125
   14608:	7e e0       	ldi	r23, 0x0E	; 14
   1460a:	c8 01       	movw	r24, r16
   1460c:	0e 94 7d 32 	call	0x64fa	; 0x64fa <MATCHI>
   14610:	89 2b       	or	r24, r25
   14612:	59 f0       	breq	.+22     	; 0x1462a <drives_tests+0x46>
   14614:	64 e7       	ldi	r22, 0x74	; 116
   14616:	76 e1       	ldi	r23, 0x16	; 22
   14618:	8a 81       	ldd	r24, Y+2	; 0x02
   1461a:	9b 81       	ldd	r25, Y+3	; 0x03
   1461c:	0e 94 7d 32 	call	0x64fa	; 0x64fa <MATCHI>
   14620:	89 2b       	or	r24, r25
   14622:	19 f0       	breq	.+6      	; 0x1462a <drives_tests+0x46>
	{
		drives_help(1);
   14624:	81 e0       	ldi	r24, 0x01	; 1
   14626:	12 d9       	rcall	.-3548   	; 0x1384c <drives_help>
   14628:	57 c0       	rjmp	.+174    	; 0x146d8 <drives_tests+0xf4>
		return(1);
	}

    if (MATCHI(ptr,"mount") )
   1462a:	65 e8       	ldi	r22, 0x85	; 133
   1462c:	7e e0       	ldi	r23, 0x0E	; 14
   1462e:	c8 01       	movw	r24, r16
   14630:	0e 94 7d 32 	call	0x64fa	; 0x64fa <MATCHI>
   14634:	89 2b       	or	r24, r25
   14636:	59 f0       	breq	.+22     	; 0x1464e <drives_tests+0x6a>
    {
		if(!mount(argc, argv))
   14638:	be 01       	movw	r22, r28
   1463a:	c7 01       	movw	r24, r14
   1463c:	fe de       	rcall	.-516    	; 0x1443a <mount>
   1463e:	81 11       	cpse	r24, r1
   14640:	03 c0       	rjmp	.+6      	; 0x14648 <drives_tests+0x64>
			return(-1);
   14642:	8f ef       	ldi	r24, 0xFF	; 255
   14644:	9f ef       	ldi	r25, 0xFF	; 255
   14646:	4a c0       	rjmp	.+148    	; 0x146dc <drives_tests+0xf8>
#ifdef LCD_SUPPORT
    extern void update_drive_counts();
    update_drive_counts();
   14648:	0e 94 61 e4 	call	0x1c8c2	; 0x1c8c2 <update_drive_counts>
   1464c:	45 c0       	rjmp	.+138    	; 0x146d8 <drives_tests+0xf4>
#endif

		return(1);
    }
    if (MATCHI(ptr,"umount") )
   1464e:	64 e8       	ldi	r22, 0x84	; 132
   14650:	7e e0       	ldi	r23, 0x0E	; 14
   14652:	c8 01       	movw	r24, r16
   14654:	0e 94 7d 32 	call	0x64fa	; 0x64fa <MATCHI>
   14658:	89 2b       	or	r24, r25
   1465a:	21 f0       	breq	.+8      	; 0x14664 <drives_tests+0x80>
    {
		if(!umount(argc, argv))
   1465c:	be 01       	movw	r22, r28
   1465e:	c7 01       	movw	r24, r14
   14660:	32 d9       	rcall	.-3484   	; 0x138c6 <umount>
   14662:	ed cf       	rjmp	.-38     	; 0x1463e <drives_tests+0x5a>
    update_drive_counts();
#endif
		return(1);
	}

    if (MATCHI(ptr,"addresses") )
   14664:	6b e8       	ldi	r22, 0x8B	; 139
   14666:	7e e0       	ldi	r23, 0x0E	; 14
   14668:	c8 01       	movw	r24, r16
   1466a:	0e 94 7d 32 	call	0x64fa	; 0x64fa <MATCHI>
   1466e:	89 2b       	or	r24, r25
   14670:	b1 f0       	breq	.+44     	; 0x1469e <drives_tests+0xba>
    {
        ptr = argv[ind];
   14672:	8a 81       	ldd	r24, Y+2	; 0x02
   14674:	9b 81       	ldd	r25, Y+3	; 0x03
        if(ptr && *ptr && MATCH(ptr,"-v"))
   14676:	00 97       	sbiw	r24, 0x00	; 0
   14678:	69 f0       	breq	.+26     	; 0x14694 <drives_tests+0xb0>
   1467a:	fc 01       	movw	r30, r24
   1467c:	20 81       	ld	r18, Z
   1467e:	22 23       	and	r18, r18
   14680:	49 f0       	breq	.+18     	; 0x14694 <drives_tests+0xb0>
   14682:	65 e9       	ldi	r22, 0x95	; 149
   14684:	7e e0       	ldi	r23, 0x0E	; 14
   14686:	0e 94 69 32 	call	0x64d2	; 0x64d2 <MATCH>
   1468a:	89 2b       	or	r24, r25
   1468c:	19 f0       	breq	.+6      	; 0x14694 <drives_tests+0xb0>
            display_Addresses(1);
   1468e:	81 e0       	ldi	r24, 0x01	; 1
   14690:	90 e0       	ldi	r25, 0x00	; 0
   14692:	02 c0       	rjmp	.+4      	; 0x14698 <drives_tests+0xb4>
        else
            display_Addresses(0);
   14694:	80 e0       	ldi	r24, 0x00	; 0
   14696:	90 e0       	ldi	r25, 0x00	; 0
   14698:	0e 94 9d 93 	call	0x1273a	; 0x1273a <display_Addresses>
   1469c:	1d c0       	rjmp	.+58     	; 0x146d8 <drives_tests+0xf4>
        return(1);
    }

    if (MATCHI(ptr,"config") )
   1469e:	68 e9       	ldi	r22, 0x98	; 152
   146a0:	7e e0       	ldi	r23, 0x0E	; 14
   146a2:	c8 01       	movw	r24, r16
   146a4:	0e 94 7d 32 	call	0x64fa	; 0x64fa <MATCHI>
   146a8:	89 2b       	or	r24, r25
   146aa:	09 f4       	brne	.+2      	; 0x146ae <drives_tests+0xca>
   146ac:	a7 cf       	rjmp	.-178    	; 0x145fc <drives_tests+0x18>
    {
        ptr = argv[ind];
   146ae:	8a 81       	ldd	r24, Y+2	; 0x02
   146b0:	9b 81       	ldd	r25, Y+3	; 0x03
        if(ptr && *ptr && MATCH(ptr,"-v"))
   146b2:	00 97       	sbiw	r24, 0x00	; 0
   146b4:	69 f0       	breq	.+26     	; 0x146d0 <drives_tests+0xec>
   146b6:	fc 01       	movw	r30, r24
   146b8:	20 81       	ld	r18, Z
   146ba:	22 23       	and	r18, r18
   146bc:	49 f0       	breq	.+18     	; 0x146d0 <drives_tests+0xec>
   146be:	65 e9       	ldi	r22, 0x95	; 149
   146c0:	7e e0       	ldi	r23, 0x0E	; 14
   146c2:	0e 94 69 32 	call	0x64d2	; 0x64d2 <MATCH>
   146c6:	89 2b       	or	r24, r25
   146c8:	19 f0       	breq	.+6      	; 0x146d0 <drives_tests+0xec>
            display_Config(1);
   146ca:	81 e0       	ldi	r24, 0x01	; 1
   146cc:	90 e0       	ldi	r25, 0x00	; 0
   146ce:	02 c0       	rjmp	.+4      	; 0x146d4 <drives_tests+0xf0>
        else
            display_Config(0);
   146d0:	80 e0       	ldi	r24, 0x00	; 0
   146d2:	90 e0       	ldi	r25, 0x00	; 0
   146d4:	0e 94 71 94 	call	0x128e2	; 0x128e2 <display_Config>
        return(1);
   146d8:	81 e0       	ldi	r24, 0x01	; 1
   146da:	90 e0       	ldi	r25, 0x00	; 0
    }
	return(0);
}
   146dc:	cd b7       	in	r28, 0x3d	; 61
   146de:	de b7       	in	r29, 0x3e	; 62
   146e0:	e6 e0       	ldi	r30, 0x06	; 6
   146e2:	0c 94 27 e7 	jmp	0x1ce4e	; 0x1ce4e <__epilogue_restores__+0x18>

000146e6 <hpdir_init>:
/// disk parameters from a single hpdir disk entry
///
///@return void
void hpdir_init()
{
    memset(hpdir.model,0,sizeof(hpdir.model) -1); // 1
   146e6:	8f e1       	ldi	r24, 0x1F	; 31
   146e8:	e0 e8       	ldi	r30, 0x80	; 128
   146ea:	ff e1       	ldi	r31, 0x1F	; 31
   146ec:	df 01       	movw	r26, r30
   146ee:	98 2f       	mov	r25, r24
   146f0:	1d 92       	st	X+, r1
   146f2:	9a 95       	dec	r25
   146f4:	e9 f7       	brne	.-6      	; 0x146f0 <hpdir_init+0xa>
// 2
    memset(hpdir.comment,0,sizeof(hpdir.comment) -1);
   146f6:	9f e3       	ldi	r25, 0x3F	; 63
   146f8:	e0 ea       	ldi	r30, 0xA0	; 160
   146fa:	ff e1       	ldi	r31, 0x1F	; 31
   146fc:	df 01       	movw	r26, r30
   146fe:	1d 92       	st	X+, r1
   14700:	9a 95       	dec	r25
   14702:	e9 f7       	brne	.-6      	; 0x146fe <hpdir_init+0x18>
    memset(hpdir.TYPE,0,sizeof(hpdir.TYPE) -1);   // 3
   14704:	e0 ee       	ldi	r30, 0xE0	; 224
   14706:	ff e1       	ldi	r31, 0x1F	; 31
   14708:	df 01       	movw	r26, r30
   1470a:	1d 92       	st	X+, r1
   1470c:	8a 95       	dec	r24
   1470e:	e9 f7       	brne	.-6      	; 0x1470a <hpdir_init+0x24>
    hpdir.ID = 0;                                 // 4
   14710:	10 92 00 20 	sts	0x2000, r1	; 0x802000 <hpdir+0x80>
   14714:	10 92 01 20 	sts	0x2001, r1	; 0x802001 <hpdir+0x81>
   14718:	10 92 02 20 	sts	0x2002, r1	; 0x802002 <hpdir+0x82>
   1471c:	10 92 03 20 	sts	0x2003, r1	; 0x802003 <hpdir+0x83>
    hpdir.mask_stat2 = 0;                         // 5
   14720:	10 92 04 20 	sts	0x2004, r1	; 0x802004 <hpdir+0x84>
   14724:	10 92 05 20 	sts	0x2005, r1	; 0x802005 <hpdir+0x85>
   14728:	10 92 06 20 	sts	0x2006, r1	; 0x802006 <hpdir+0x86>
   1472c:	10 92 07 20 	sts	0x2007, r1	; 0x802007 <hpdir+0x87>
    hpdir.id_stat2 = 0;                           // 6
   14730:	10 92 08 20 	sts	0x2008, r1	; 0x802008 <hpdir+0x88>
   14734:	10 92 09 20 	sts	0x2009, r1	; 0x802009 <hpdir+0x89>
   14738:	10 92 0a 20 	sts	0x200A, r1	; 0x80200a <hpdir+0x8a>
   1473c:	10 92 0b 20 	sts	0x200B, r1	; 0x80200b <hpdir+0x8b>
    hpdir.DEVICE_NUMBER = 0;                      // 7
   14740:	10 92 0c 20 	sts	0x200C, r1	; 0x80200c <hpdir+0x8c>
   14744:	10 92 0d 20 	sts	0x200D, r1	; 0x80200d <hpdir+0x8d>
   14748:	10 92 0e 20 	sts	0x200E, r1	; 0x80200e <hpdir+0x8e>
   1474c:	10 92 0f 20 	sts	0x200F, r1	; 0x80200f <hpdir+0x8f>
    hpdir.UNITS_INSTALLED = 0x8001;               // 8
   14750:	81 e0       	ldi	r24, 0x01	; 1
   14752:	90 e8       	ldi	r25, 0x80	; 128
   14754:	a0 e0       	ldi	r26, 0x00	; 0
   14756:	b0 e0       	ldi	r27, 0x00	; 0
   14758:	80 93 10 20 	sts	0x2010, r24	; 0x802010 <hpdir+0x90>
   1475c:	90 93 11 20 	sts	0x2011, r25	; 0x802011 <hpdir+0x91>
   14760:	a0 93 12 20 	sts	0x2012, r26	; 0x802012 <hpdir+0x92>
   14764:	b0 93 13 20 	sts	0x2013, r27	; 0x802013 <hpdir+0x93>
    hpdir.CYLINDERS = 0;                          // 9
   14768:	10 92 14 20 	sts	0x2014, r1	; 0x802014 <hpdir+0x94>
   1476c:	10 92 15 20 	sts	0x2015, r1	; 0x802015 <hpdir+0x95>
   14770:	10 92 16 20 	sts	0x2016, r1	; 0x802016 <hpdir+0x96>
   14774:	10 92 17 20 	sts	0x2017, r1	; 0x802017 <hpdir+0x97>
    hpdir.HEADS= 0;                               // 10
   14778:	10 92 18 20 	sts	0x2018, r1	; 0x802018 <hpdir+0x98>
   1477c:	10 92 19 20 	sts	0x2019, r1	; 0x802019 <hpdir+0x99>
   14780:	10 92 1a 20 	sts	0x201A, r1	; 0x80201a <hpdir+0x9a>
   14784:	10 92 1b 20 	sts	0x201B, r1	; 0x80201b <hpdir+0x9b>
    hpdir.SECTORS= 0;                             // 11
   14788:	10 92 1c 20 	sts	0x201C, r1	; 0x80201c <hpdir+0x9c>
   1478c:	10 92 1d 20 	sts	0x201D, r1	; 0x80201d <hpdir+0x9d>
   14790:	10 92 1e 20 	sts	0x201E, r1	; 0x80201e <hpdir+0x9e>
   14794:	10 92 1f 20 	sts	0x201F, r1	; 0x80201f <hpdir+0x9f>
    hpdir.BYTES_PER_SECTOR = 0;                   // 12
   14798:	10 92 20 20 	sts	0x2020, r1	; 0x802020 <hpdir+0xa0>
   1479c:	10 92 21 20 	sts	0x2021, r1	; 0x802021 <hpdir+0xa1>
   147a0:	10 92 22 20 	sts	0x2022, r1	; 0x802022 <hpdir+0xa2>
   147a4:	10 92 23 20 	sts	0x2023, r1	; 0x802023 <hpdir+0xa3>
    hpdir.INTERLEAVE = 0;                         // 13
   147a8:	10 92 24 20 	sts	0x2024, r1	; 0x802024 <hpdir+0xa4>
   147ac:	10 92 25 20 	sts	0x2025, r1	; 0x802025 <hpdir+0xa5>
   147b0:	10 92 26 20 	sts	0x2026, r1	; 0x802026 <hpdir+0xa6>
   147b4:	10 92 27 20 	sts	0x2027, r1	; 0x802027 <hpdir+0xa7>
    hpdir.FIXED = 1;                              // 14 ALWAYS 1
   147b8:	81 e0       	ldi	r24, 0x01	; 1
   147ba:	90 e0       	ldi	r25, 0x00	; 0
   147bc:	a0 e0       	ldi	r26, 0x00	; 0
   147be:	b0 e0       	ldi	r27, 0x00	; 0
   147c0:	80 93 28 20 	sts	0x2028, r24	; 0x802028 <hpdir+0xa8>
   147c4:	90 93 29 20 	sts	0x2029, r25	; 0x802029 <hpdir+0xa9>
   147c8:	a0 93 2a 20 	sts	0x202A, r26	; 0x80202a <hpdir+0xaa>
   147cc:	b0 93 2b 20 	sts	0x202B, r27	; 0x80202b <hpdir+0xab>

// Computed values
    hpdir.BLOCKS = 0;
   147d0:	10 92 2c 20 	sts	0x202C, r1	; 0x80202c <hpdir+0xac>
   147d4:	10 92 2d 20 	sts	0x202D, r1	; 0x80202d <hpdir+0xad>
   147d8:	10 92 2e 20 	sts	0x202E, r1	; 0x80202e <hpdir+0xae>
   147dc:	10 92 2f 20 	sts	0x202F, r1	; 0x80202f <hpdir+0xaf>
   147e0:	08 95       	ret

000147e2 <lif_dir_count>:
///@param[in] blocks: size of LIF image in total
///
///@return Size of LIF directory in blocks
long lif_dir_count(long blocks)
{
    int scale = 0;
   147e2:	20 e0       	ldi	r18, 0x00	; 0
   147e4:	30 e0       	ldi	r19, 0x00	; 0
    long num = 1;
    while(blocks)
   147e6:	61 15       	cp	r22, r1
   147e8:	71 05       	cpc	r23, r1
   147ea:	81 05       	cpc	r24, r1
   147ec:	91 05       	cpc	r25, r1
   147ee:	39 f0       	breq	.+14     	; 0x147fe <lif_dir_count+0x1c>
    {
        scale++;
   147f0:	2f 5f       	subi	r18, 0xFF	; 255
   147f2:	3f 4f       	sbci	r19, 0xFF	; 255
        blocks >>= 1;
   147f4:	95 95       	asr	r25
   147f6:	87 95       	ror	r24
   147f8:	77 95       	ror	r23
   147fa:	67 95       	ror	r22
   147fc:	f4 cf       	rjmp	.-24     	; 0x147e6 <lif_dir_count+0x4>
    }
    scale>>=1;
   147fe:	35 95       	asr	r19
   14800:	27 95       	ror	r18
///
///@return Size of LIF directory in blocks
long lif_dir_count(long blocks)
{
    int scale = 0;
    long num = 1;
   14802:	61 e0       	ldi	r22, 0x01	; 1
   14804:	70 e0       	ldi	r23, 0x00	; 0
   14806:	80 e0       	ldi	r24, 0x00	; 0
   14808:	90 e0       	ldi	r25, 0x00	; 0
    {
        scale++;
        blocks >>= 1;
    }
    scale>>=1;
    while(scale--)
   1480a:	21 50       	subi	r18, 0x01	; 1
   1480c:	31 09       	sbc	r19, r1
   1480e:	28 f0       	brcs	.+10     	; 0x1481a <lif_dir_count+0x38>
        num <<=1;
   14810:	66 0f       	add	r22, r22
   14812:	77 1f       	adc	r23, r23
   14814:	88 1f       	adc	r24, r24
   14816:	99 1f       	adc	r25, r25
   14818:	f8 cf       	rjmp	.-16     	; 0x1480a <lif_dir_count+0x28>
    return(num);
}
   1481a:	08 95       	ret

0001481c <hpdir_find_drive>:
///
///@param[in] model: model string
///
///@return 1 on sucess or 0 on fail
int hpdir_find_drive(char *model, int list, int verbose)
{
   1481c:	2f 92       	push	r2
   1481e:	3f 92       	push	r3
   14820:	4f 92       	push	r4
   14822:	5f 92       	push	r5
   14824:	6f 92       	push	r6
   14826:	8f 92       	push	r8
   14828:	9f 92       	push	r9
   1482a:	af 92       	push	r10
   1482c:	bf 92       	push	r11
   1482e:	cf 92       	push	r12
   14830:	df 92       	push	r13
   14832:	ef 92       	push	r14
   14834:	ff 92       	push	r15
   14836:	0f 93       	push	r16
   14838:	1f 93       	push	r17
   1483a:	cf 93       	push	r28
   1483c:	df 93       	push	r29
   1483e:	cd b7       	in	r28, 0x3d	; 61
   14840:	de b7       	in	r29, 0x3e	; 62
   14842:	c9 58       	subi	r28, 0x89	; 137
   14844:	d1 40       	sbci	r29, 0x01	; 1
   14846:	0f b6       	in	r0, 0x3f	; 63
   14848:	f8 94       	cli
   1484a:	de bf       	out	0x3e, r29	; 62
   1484c:	0f be       	out	0x3f, r0	; 63
   1484e:	cd bf       	out	0x3d, r28	; 61
   14850:	6c 01       	movw	r12, r24
   14852:	c8 57       	subi	r28, 0x78	; 120
   14854:	de 4f       	sbci	r29, 0xFE	; 254
   14856:	79 83       	std	Y+1, r23	; 0x01
   14858:	68 83       	st	Y, r22
   1485a:	c8 58       	subi	r28, 0x88	; 136
   1485c:	d1 40       	sbci	r29, 0x01	; 1
   1485e:	5a 01       	movw	r10, r20
    FILE *cfg;
    char *ptr;
    char str[256];
    char token[128];

    hpdir_init();
   14860:	42 df       	rcall	.-380    	; 0x146e6 <hpdir_init>

    cfg = fopen("hpdir.ini","rb");
   14862:	6e ef       	ldi	r22, 0xFE	; 254
   14864:	78 e0       	ldi	r23, 0x08	; 8
   14866:	8e e5       	ldi	r24, 0x5E	; 94
   14868:	90 e1       	ldi	r25, 0x10	; 16
   1486a:	0e 94 72 7e 	call	0xfce4	; 0xfce4 <fopen>
   1486e:	7c 01       	movw	r14, r24

#ifndef LIF_STAND_ALONE
    if(cfg == NULL)
   14870:	89 2b       	or	r24, r25
   14872:	49 f4       	brne	.+18     	; 0x14886 <hpdir_find_drive+0x6a>
        cfg = fopen("/hpdir.ini","rb");
   14874:	6e ef       	ldi	r22, 0xFE	; 254
   14876:	78 e0       	ldi	r23, 0x08	; 8
   14878:	8d e5       	ldi	r24, 0x5D	; 93
   1487a:	90 e1       	ldi	r25, 0x10	; 16
   1487c:	0e 94 72 7e 	call	0xfce4	; 0xfce4 <fopen>
   14880:	7c 01       	movw	r14, r24
        strcat  (name, "/hpdir.ini");
        cfg = fopen(name, "rb");
    }
#endif

    if(cfg == NULL)
   14882:	89 2b       	or	r24, r25
   14884:	51 f0       	breq	.+20     	; 0x1489a <hpdir_find_drive+0x7e>
// MODEL something else
        ptr = get_token(ptr, token,     sizeof(token)-2);

        if(MATCHI(token,"[driveinfo]"))
        {
            driveinfo = 1;
   14886:	21 2c       	mov	r2, r1
   14888:	31 2c       	mov	r3, r1

        if(*ptr == '[' && driveinfo == 1 )
            break;

// MODEL something else
        ptr = get_token(ptr, token,     sizeof(token)-2);
   1488a:	8e 01       	movw	r16, r28
   1488c:	08 5f       	subi	r16, 0xF8	; 248
   1488e:	1e 4f       	sbci	r17, 0xFE	; 254
        if( driveinfo != 1)
            continue;

        if(list)
        {
            printf("%s %s\n", token, ptr);
   14890:	8d e8       	ldi	r24, 0x8D	; 141
   14892:	91 e2       	ldi	r25, 0x21	; 33
   14894:	2c 01       	movw	r4, r24
   14896:	61 2c       	mov	r6, r1
   14898:	1e c0       	rjmp	.+60     	; 0x148d6 <hpdir_find_drive+0xba>
    }
#endif

    if(cfg == NULL)
    {
        if(verbose)
   1489a:	ab 28       	or	r10, r11
   1489c:	09 f4       	brne	.+2      	; 0x148a0 <hpdir_find_drive+0x84>
   1489e:	79 c1       	rjmp	.+754    	; 0x14b92 <hpdir_find_drive+0x376>
            printf("Error: hpdir.ini not found!\n");
   148a0:	84 e9       	ldi	r24, 0x94	; 148
   148a2:	91 e2       	ldi	r25, 0x21	; 33
   148a4:	a0 e0       	ldi	r26, 0x00	; 0
   148a6:	ed b7       	in	r30, 0x3d	; 61
   148a8:	fe b7       	in	r31, 0x3e	; 62
   148aa:	81 83       	std	Z+1, r24	; 0x01
   148ac:	92 83       	std	Z+2, r25	; 0x02
   148ae:	a3 83       	std	Z+3, r26	; 0x03
   148b0:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   148b4:	6e c1       	rjmp	.+732    	; 0x14b92 <hpdir_find_drive+0x376>
    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
    {
        errors = 0;
        ptr = str;

        trim_tail(ptr);
   148b6:	ce 01       	movw	r24, r28
   148b8:	08 96       	adiw	r24, 0x08	; 8
   148ba:	0e 94 4f 32 	call	0x649e	; 0x649e <trim_tail>
        ptr = skipspaces(ptr);
   148be:	ce 01       	movw	r24, r28
   148c0:	08 96       	adiw	r24, 0x08	; 8
   148c2:	0e 94 5f 32 	call	0x64be	; 0x64be <skipspaces>

        len = strlen(ptr);
   148c6:	fc 01       	movw	r30, r24
   148c8:	01 90       	ld	r0, Z+
   148ca:	00 20       	and	r0, r0
   148cc:	e9 f7       	brne	.-6      	; 0x148c8 <hpdir_find_drive+0xac>
   148ce:	31 97       	sbiw	r30, 0x01	; 1
        if(!len)
   148d0:	8e 17       	cp	r24, r30
   148d2:	9f 07       	cpc	r25, r31
   148d4:	51 f4       	brne	.+20     	; 0x148ea <hpdir_find_drive+0xce>
        return(0);
    }

// printf("Searching /hpdir.ini for model:%s\n", model);

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
   148d6:	a7 01       	movw	r20, r14
   148d8:	6e ef       	ldi	r22, 0xFE	; 254
   148da:	70 e0       	ldi	r23, 0x00	; 0
   148dc:	ce 01       	movw	r24, r28
   148de:	08 96       	adiw	r24, 0x08	; 8
   148e0:	0e 94 8a 76 	call	0xed14	; 0xed14 <fgets>
   148e4:	89 2b       	or	r24, r25
   148e6:	39 f7       	brne	.-50     	; 0x148b6 <hpdir_find_drive+0x9a>
   148e8:	0c c0       	rjmp	.+24     	; 0x14902 <hpdir_find_drive+0xe6>
        len = strlen(ptr);
        if(!len)
            continue;

// Skip comments
        if(*ptr == ';' || *ptr == '#' )
   148ea:	fc 01       	movw	r30, r24
   148ec:	20 81       	ld	r18, Z
   148ee:	2b 33       	cpi	r18, 0x3B	; 59
   148f0:	91 f3       	breq	.-28     	; 0x148d6 <hpdir_find_drive+0xba>
   148f2:	23 32       	cpi	r18, 0x23	; 35
   148f4:	81 f3       	breq	.-32     	; 0x148d6 <hpdir_find_drive+0xba>
            continue;

        if(*ptr == '[' && driveinfo == 1 )
   148f6:	2b 35       	cpi	r18, 0x5B	; 91
   148f8:	39 f4       	brne	.+14     	; 0x14908 <hpdir_find_drive+0xec>
   148fa:	f1 e0       	ldi	r31, 0x01	; 1
   148fc:	2f 16       	cp	r2, r31
   148fe:	31 04       	cpc	r3, r1
   14900:	19 f4       	brne	.+6      	; 0x14908 <hpdir_find_drive+0xec>
int hpdir_find_drive(char *model, int list, int verbose)
{
    int len;
    int errors = 0;
    int driveinfo=0;
    int found = 0;
   14902:	00 e0       	ldi	r16, 0x00	; 0
   14904:	10 e0       	ldi	r17, 0x00	; 0
   14906:	32 c1       	rjmp	.+612    	; 0x14b6c <hpdir_find_drive+0x350>

        if(*ptr == '[' && driveinfo == 1 )
            break;

// MODEL something else
        ptr = get_token(ptr, token,     sizeof(token)-2);
   14908:	4e e7       	ldi	r20, 0x7E	; 126
   1490a:	50 e0       	ldi	r21, 0x00	; 0
   1490c:	b8 01       	movw	r22, r16
   1490e:	0e 94 31 33 	call	0x6662	; 0x6662 <get_token>
   14912:	4c 01       	movw	r8, r24

        if(MATCHI(token,"[driveinfo]"))
   14914:	68 e6       	ldi	r22, 0x68	; 104
   14916:	70 e1       	ldi	r23, 0x10	; 16
   14918:	c8 01       	movw	r24, r16
   1491a:	0e 94 7d 32 	call	0x64fa	; 0x64fa <MATCHI>
   1491e:	89 2b       	or	r24, r25
   14920:	21 f0       	breq	.+8      	; 0x1492a <hpdir_find_drive+0x10e>
        {
            driveinfo = 1;
   14922:	22 24       	eor	r2, r2
   14924:	23 94       	inc	r2
   14926:	31 2c       	mov	r3, r1
   14928:	d6 cf       	rjmp	.-84     	; 0x148d6 <hpdir_find_drive+0xba>
            continue;
        }

        if( driveinfo != 1)
   1492a:	21 e0       	ldi	r18, 0x01	; 1
   1492c:	22 16       	cp	r2, r18
   1492e:	31 04       	cpc	r3, r1
   14930:	91 f6       	brne	.-92     	; 0x148d6 <hpdir_find_drive+0xba>
            continue;

        if(list)
   14932:	c8 57       	subi	r28, 0x78	; 120
   14934:	de 4f       	sbci	r29, 0xFE	; 254
   14936:	88 81       	ld	r24, Y
   14938:	99 81       	ldd	r25, Y+1	; 0x01
   1493a:	c8 58       	subi	r28, 0x88	; 136
   1493c:	d1 40       	sbci	r29, 0x01	; 1
   1493e:	89 2b       	or	r24, r25
   14940:	61 f0       	breq	.+24     	; 0x1495a <hpdir_find_drive+0x13e>
        {
            printf("%s %s\n", token, ptr);
   14942:	ed b7       	in	r30, 0x3d	; 61
   14944:	fe b7       	in	r31, 0x3e	; 62
   14946:	97 82       	std	Z+7, r9	; 0x07
   14948:	86 82       	std	Z+6, r8	; 0x06
   1494a:	15 83       	std	Z+5, r17	; 0x05
   1494c:	04 83       	std	Z+4, r16	; 0x04
   1494e:	41 82       	std	Z+1, r4	; 0x01
   14950:	52 82       	std	Z+2, r5	; 0x02
   14952:	63 82       	std	Z+3, r6	; 0x03
   14954:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
            continue;
   14958:	be cf       	rjmp	.-132    	; 0x148d6 <hpdir_find_drive+0xba>
        }

        if ( ! MATCHI(model,token) )
   1495a:	b8 01       	movw	r22, r16
   1495c:	c6 01       	movw	r24, r12
   1495e:	0e 94 7d 32 	call	0x64fa	; 0x64fa <MATCHI>
   14962:	89 2b       	or	r24, r25
            continue;

        hpdir_init();
   14964:	f1 f2       	breq	.-68     	; 0x14922 <hpdir_find_drive+0x106>
   14966:	bf de       	rcall	.-642    	; 0x146e6 <hpdir_init>

        if(verbose)
   14968:	a1 14       	cp	r10, r1
   1496a:	b1 04       	cpc	r11, r1
   1496c:	61 f0       	breq	.+24     	; 0x14986 <hpdir_find_drive+0x16a>
            printf("Model: %s found in hpdir.ini\n", model);
   1496e:	ed b7       	in	r30, 0x3d	; 61
   14970:	fe b7       	in	r31, 0x3e	; 62
   14972:	d5 82       	std	Z+5, r13	; 0x05
   14974:	c4 82       	std	Z+4, r12	; 0x04
   14976:	8f e6       	ldi	r24, 0x6F	; 111
   14978:	91 e2       	ldi	r25, 0x21	; 33
   1497a:	a0 e0       	ldi	r26, 0x00	; 0
   1497c:	81 83       	std	Z+1, r24	; 0x01
   1497e:	92 83       	std	Z+2, r25	; 0x02
   14980:	a3 83       	std	Z+3, r26	; 0x03
   14982:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>

// 1 Model
        strncpy(hpdir.model,token,sizeof(hpdir.model)-2);
   14986:	4e e1       	ldi	r20, 0x1E	; 30
   14988:	50 e0       	ldi	r21, 0x00	; 0
   1498a:	b8 01       	movw	r22, r16
   1498c:	80 e8       	ldi	r24, 0x80	; 128
   1498e:	9f e1       	ldi	r25, 0x1F	; 31
   14990:	0e 94 7c 31 	call	0x62f8	; 0x62f8 <strncpy>

// =
        ptr = get_token(ptr, token,     sizeof(token)-2);
   14994:	4e e7       	ldi	r20, 0x7E	; 126
   14996:	50 e0       	ldi	r21, 0x00	; 0
   14998:	b8 01       	movw	r22, r16
   1499a:	c4 01       	movw	r24, r8
   1499c:	0e 94 31 33 	call	0x6662	; 0x6662 <get_token>

// 2 Comment
        ptr = get_token(ptr, hpdir.comment, sizeof(hpdir.comment)-2);
   149a0:	4e e3       	ldi	r20, 0x3E	; 62
   149a2:	50 e0       	ldi	r21, 0x00	; 0
   149a4:	60 ea       	ldi	r22, 0xA0	; 160
   149a6:	7f e1       	ldi	r23, 0x1F	; 31
   149a8:	0e 94 31 33 	call	0x6662	; 0x6662 <get_token>

// 3 AMIGO/SS80/CS80
        ptr = get_token(ptr, hpdir.TYPE,  sizeof(hpdir.TYPE)-2);
   149ac:	4e e1       	ldi	r20, 0x1E	; 30
   149ae:	50 e0       	ldi	r21, 0x00	; 0
   149b0:	60 ee       	ldi	r22, 0xE0	; 224
   149b2:	7f e1       	ldi	r23, 0x1F	; 31
   149b4:	0e 94 31 33 	call	0x6662	; 0x6662 <get_token>

// 4 Identify ID
        ptr = get_token(ptr, token,         sizeof(token)-2);
   149b8:	4e e7       	ldi	r20, 0x7E	; 126
   149ba:	50 e0       	ldi	r21, 0x00	; 0
   149bc:	b8 01       	movw	r22, r16
   149be:	0e 94 31 33 	call	0x6662	; 0x6662 <get_token>
   149c2:	4c 01       	movw	r8, r24
        hpdir.ID = get_value(token);
   149c4:	c8 01       	movw	r24, r16
   149c6:	0e 94 74 33 	call	0x66e8	; 0x66e8 <get_value>
   149ca:	60 93 00 20 	sts	0x2000, r22	; 0x802000 <hpdir+0x80>
   149ce:	70 93 01 20 	sts	0x2001, r23	; 0x802001 <hpdir+0x81>
   149d2:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <hpdir+0x82>
   149d6:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <hpdir+0x83>

// 5 MASK STAT 2
        ptr = get_token(ptr, token,         sizeof(token)-2);
   149da:	4e e7       	ldi	r20, 0x7E	; 126
   149dc:	50 e0       	ldi	r21, 0x00	; 0
   149de:	b8 01       	movw	r22, r16
   149e0:	c4 01       	movw	r24, r8
   149e2:	0e 94 31 33 	call	0x6662	; 0x6662 <get_token>
   149e6:	4c 01       	movw	r8, r24
        hpdir.mask_stat2 = get_value(token);
   149e8:	c8 01       	movw	r24, r16
   149ea:	0e 94 74 33 	call	0x66e8	; 0x66e8 <get_value>
   149ee:	60 93 04 20 	sts	0x2004, r22	; 0x802004 <hpdir+0x84>
   149f2:	70 93 05 20 	sts	0x2005, r23	; 0x802005 <hpdir+0x85>
   149f6:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <hpdir+0x86>
   149fa:	90 93 07 20 	sts	0x2007, r25	; 0x802007 <hpdir+0x87>

// 6 STAT2
        ptr = get_token(ptr, token,         sizeof(token)-2);
   149fe:	4e e7       	ldi	r20, 0x7E	; 126
   14a00:	50 e0       	ldi	r21, 0x00	; 0
   14a02:	b8 01       	movw	r22, r16
   14a04:	c4 01       	movw	r24, r8
   14a06:	0e 94 31 33 	call	0x6662	; 0x6662 <get_token>
   14a0a:	4c 01       	movw	r8, r24
        hpdir.id_stat2 = get_value(token);
   14a0c:	c8 01       	movw	r24, r16
   14a0e:	0e 94 74 33 	call	0x66e8	; 0x66e8 <get_value>
   14a12:	60 93 08 20 	sts	0x2008, r22	; 0x802008 <hpdir+0x88>
   14a16:	70 93 09 20 	sts	0x2009, r23	; 0x802009 <hpdir+0x89>
   14a1a:	80 93 0a 20 	sts	0x200A, r24	; 0x80200a <hpdir+0x8a>
   14a1e:	90 93 0b 20 	sts	0x200B, r25	; 0x80200b <hpdir+0x8b>

// 7 BCD include model number
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14a22:	4e e7       	ldi	r20, 0x7E	; 126
   14a24:	50 e0       	ldi	r21, 0x00	; 0
   14a26:	b8 01       	movw	r22, r16
   14a28:	c4 01       	movw	r24, r8
   14a2a:	0e 94 31 33 	call	0x6662	; 0x6662 <get_token>
   14a2e:	4c 01       	movw	r8, r24
        hpdir.DEVICE_NUMBER = get_value(token);
   14a30:	c8 01       	movw	r24, r16
   14a32:	0e 94 74 33 	call	0x66e8	; 0x66e8 <get_value>
   14a36:	60 93 0c 20 	sts	0x200C, r22	; 0x80200c <hpdir+0x8c>
   14a3a:	70 93 0d 20 	sts	0x200D, r23	; 0x80200d <hpdir+0x8d>
   14a3e:	80 93 0e 20 	sts	0x200E, r24	; 0x80200e <hpdir+0x8e>
   14a42:	90 93 0f 20 	sts	0x200F, r25	; 0x80200f <hpdir+0x8f>

// 8 Units installed
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14a46:	4e e7       	ldi	r20, 0x7E	; 126
   14a48:	50 e0       	ldi	r21, 0x00	; 0
   14a4a:	b8 01       	movw	r22, r16
   14a4c:	c4 01       	movw	r24, r8
   14a4e:	0e 94 31 33 	call	0x6662	; 0x6662 <get_token>
   14a52:	4c 01       	movw	r8, r24
        hpdir.UNITS_INSTALLED = get_value(token);
   14a54:	c8 01       	movw	r24, r16
   14a56:	0e 94 74 33 	call	0x66e8	; 0x66e8 <get_value>
   14a5a:	60 93 10 20 	sts	0x2010, r22	; 0x802010 <hpdir+0x90>
   14a5e:	70 93 11 20 	sts	0x2011, r23	; 0x802011 <hpdir+0x91>
   14a62:	80 93 12 20 	sts	0x2012, r24	; 0x802012 <hpdir+0x92>
   14a66:	90 93 13 20 	sts	0x2013, r25	; 0x802013 <hpdir+0x93>

// 9 Cylinders
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14a6a:	4e e7       	ldi	r20, 0x7E	; 126
   14a6c:	50 e0       	ldi	r21, 0x00	; 0
   14a6e:	b8 01       	movw	r22, r16
   14a70:	c4 01       	movw	r24, r8
   14a72:	0e 94 31 33 	call	0x6662	; 0x6662 <get_token>
   14a76:	4c 01       	movw	r8, r24
        hpdir.CYLINDERS = get_value(token);
   14a78:	c8 01       	movw	r24, r16
   14a7a:	0e 94 74 33 	call	0x66e8	; 0x66e8 <get_value>
   14a7e:	60 93 14 20 	sts	0x2014, r22	; 0x802014 <hpdir+0x94>
   14a82:	70 93 15 20 	sts	0x2015, r23	; 0x802015 <hpdir+0x95>
   14a86:	80 93 16 20 	sts	0x2016, r24	; 0x802016 <hpdir+0x96>
   14a8a:	90 93 17 20 	sts	0x2017, r25	; 0x802017 <hpdir+0x97>

// 10 Heads
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14a8e:	4e e7       	ldi	r20, 0x7E	; 126
   14a90:	50 e0       	ldi	r21, 0x00	; 0
   14a92:	b8 01       	movw	r22, r16
   14a94:	c4 01       	movw	r24, r8
   14a96:	0e 94 31 33 	call	0x6662	; 0x6662 <get_token>
   14a9a:	4c 01       	movw	r8, r24
        hpdir.HEADS = get_value(token);
   14a9c:	c8 01       	movw	r24, r16
   14a9e:	0e 94 74 33 	call	0x66e8	; 0x66e8 <get_value>
   14aa2:	60 93 18 20 	sts	0x2018, r22	; 0x802018 <hpdir+0x98>
   14aa6:	70 93 19 20 	sts	0x2019, r23	; 0x802019 <hpdir+0x99>
   14aaa:	80 93 1a 20 	sts	0x201A, r24	; 0x80201a <hpdir+0x9a>
   14aae:	90 93 1b 20 	sts	0x201B, r25	; 0x80201b <hpdir+0x9b>

// 11 Sectors
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14ab2:	4e e7       	ldi	r20, 0x7E	; 126
   14ab4:	50 e0       	ldi	r21, 0x00	; 0
   14ab6:	b8 01       	movw	r22, r16
   14ab8:	c4 01       	movw	r24, r8
   14aba:	0e 94 31 33 	call	0x6662	; 0x6662 <get_token>
   14abe:	4c 01       	movw	r8, r24
        hpdir.SECTORS = get_value(token);
   14ac0:	c8 01       	movw	r24, r16
   14ac2:	0e 94 74 33 	call	0x66e8	; 0x66e8 <get_value>
   14ac6:	60 93 1c 20 	sts	0x201C, r22	; 0x80201c <hpdir+0x9c>
   14aca:	70 93 1d 20 	sts	0x201D, r23	; 0x80201d <hpdir+0x9d>
   14ace:	80 93 1e 20 	sts	0x201E, r24	; 0x80201e <hpdir+0x9e>
   14ad2:	90 93 1f 20 	sts	0x201F, r25	; 0x80201f <hpdir+0x9f>

// 12 Bytes Per Block/Sector
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14ad6:	4e e7       	ldi	r20, 0x7E	; 126
   14ad8:	50 e0       	ldi	r21, 0x00	; 0
   14ada:	b8 01       	movw	r22, r16
   14adc:	c4 01       	movw	r24, r8
   14ade:	0e 94 31 33 	call	0x6662	; 0x6662 <get_token>
   14ae2:	4c 01       	movw	r8, r24
        hpdir.BYTES_PER_SECTOR = get_value(token);
   14ae4:	c8 01       	movw	r24, r16
   14ae6:	0e 94 74 33 	call	0x66e8	; 0x66e8 <get_value>
   14aea:	60 93 20 20 	sts	0x2020, r22	; 0x802020 <hpdir+0xa0>
   14aee:	70 93 21 20 	sts	0x2021, r23	; 0x802021 <hpdir+0xa1>
   14af2:	80 93 22 20 	sts	0x2022, r24	; 0x802022 <hpdir+0xa2>
   14af6:	90 93 23 20 	sts	0x2023, r25	; 0x802023 <hpdir+0xa3>

// 13 Interleave
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14afa:	4e e7       	ldi	r20, 0x7E	; 126
   14afc:	50 e0       	ldi	r21, 0x00	; 0
   14afe:	b8 01       	movw	r22, r16
   14b00:	c4 01       	movw	r24, r8
   14b02:	0e 94 31 33 	call	0x6662	; 0x6662 <get_token>
        hpdir.INTERLEAVE = get_value(token);
   14b06:	c8 01       	movw	r24, r16
   14b08:	0e 94 74 33 	call	0x66e8	; 0x66e8 <get_value>
   14b0c:	60 93 24 20 	sts	0x2024, r22	; 0x802024 <hpdir+0xa4>
   14b10:	70 93 25 20 	sts	0x2025, r23	; 0x802025 <hpdir+0xa5>
   14b14:	80 93 26 20 	sts	0x2026, r24	; 0x802026 <hpdir+0xa6>
   14b18:	90 93 27 20 	sts	0x2027, r25	; 0x802027 <hpdir+0xa7>

// Computed values
        hpdir.BLOCKS = ( hpdir.CYLINDERS * hpdir.HEADS * hpdir.SECTORS );
   14b1c:	20 91 14 20 	lds	r18, 0x2014	; 0x802014 <hpdir+0x94>
   14b20:	30 91 15 20 	lds	r19, 0x2015	; 0x802015 <hpdir+0x95>
   14b24:	40 91 16 20 	lds	r20, 0x2016	; 0x802016 <hpdir+0x96>
   14b28:	50 91 17 20 	lds	r21, 0x2017	; 0x802017 <hpdir+0x97>
   14b2c:	60 91 18 20 	lds	r22, 0x2018	; 0x802018 <hpdir+0x98>
   14b30:	70 91 19 20 	lds	r23, 0x2019	; 0x802019 <hpdir+0x99>
   14b34:	80 91 1a 20 	lds	r24, 0x201A	; 0x80201a <hpdir+0x9a>
   14b38:	90 91 1b 20 	lds	r25, 0x201B	; 0x80201b <hpdir+0x9b>
   14b3c:	0e 94 50 e6 	call	0x1cca0	; 0x1cca0 <__mulsi3>
   14b40:	9b 01       	movw	r18, r22
   14b42:	ac 01       	movw	r20, r24
   14b44:	60 91 1c 20 	lds	r22, 0x201C	; 0x80201c <hpdir+0x9c>
   14b48:	70 91 1d 20 	lds	r23, 0x201D	; 0x80201d <hpdir+0x9d>
   14b4c:	80 91 1e 20 	lds	r24, 0x201E	; 0x80201e <hpdir+0x9e>
   14b50:	90 91 1f 20 	lds	r25, 0x201F	; 0x80201f <hpdir+0x9f>
   14b54:	0e 94 50 e6 	call	0x1cca0	; 0x1cca0 <__mulsi3>
   14b58:	60 93 2c 20 	sts	0x202C, r22	; 0x80202c <hpdir+0xac>
   14b5c:	70 93 2d 20 	sts	0x202D, r23	; 0x80202d <hpdir+0xad>
   14b60:	80 93 2e 20 	sts	0x202E, r24	; 0x80202e <hpdir+0xae>
   14b64:	90 93 2f 20 	sts	0x202F, r25	; 0x80202f <hpdir+0xaf>
        {
            if(verbose)
                printf("Error /hpdir.ini parsing\n");
            break;
        }
        found = 1;
   14b68:	01 e0       	ldi	r16, 0x01	; 1
   14b6a:	10 e0       	ldi	r17, 0x00	; 0
        break;

    }                                             // while
    fclose(cfg);
   14b6c:	c7 01       	movw	r24, r14
   14b6e:	0e 94 1c 7d 	call	0xfa38	; 0xfa38 <fclose>
	if(verbose && !found)
   14b72:	ab 28       	or	r10, r11
   14b74:	81 f0       	breq	.+32     	; 0x14b96 <hpdir_find_drive+0x37a>
   14b76:	01 2b       	or	r16, r17
   14b78:	81 f4       	brne	.+32     	; 0x14b9a <hpdir_find_drive+0x37e>
		printf("Model: %s NOT found in hpdir.ini\n", model);
   14b7a:	ed b7       	in	r30, 0x3d	; 61
   14b7c:	fe b7       	in	r31, 0x3e	; 62
   14b7e:	d5 82       	std	Z+5, r13	; 0x05
   14b80:	c4 82       	std	Z+4, r12	; 0x04
   14b82:	8d e4       	ldi	r24, 0x4D	; 77
   14b84:	91 e2       	ldi	r25, 0x21	; 33
   14b86:	a0 e0       	ldi	r26, 0x00	; 0
   14b88:	81 83       	std	Z+1, r24	; 0x01
   14b8a:	92 83       	std	Z+2, r25	; 0x02
   14b8c:	a3 83       	std	Z+3, r26	; 0x03
   14b8e:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>

    if(cfg == NULL)
    {
        if(verbose)
            printf("Error: hpdir.ini not found!\n");
        return(0);
   14b92:	80 e0       	ldi	r24, 0x00	; 0
   14b94:	03 c0       	rjmp	.+6      	; 0x14b9c <hpdir_find_drive+0x380>
   14b96:	c8 01       	movw	r24, r16
   14b98:	02 c0       	rjmp	.+4      	; 0x14b9e <hpdir_find_drive+0x382>
   14b9a:	81 e0       	ldi	r24, 0x01	; 1
   14b9c:	90 e0       	ldi	r25, 0x00	; 0
    }                                             // while
    fclose(cfg);
	if(verbose && !found)
		printf("Model: %s NOT found in hpdir.ini\n", model);
    return(found);
}
   14b9e:	c7 57       	subi	r28, 0x77	; 119
   14ba0:	de 4f       	sbci	r29, 0xFE	; 254
   14ba2:	0f b6       	in	r0, 0x3f	; 63
   14ba4:	f8 94       	cli
   14ba6:	de bf       	out	0x3e, r29	; 62
   14ba8:	0f be       	out	0x3f, r0	; 63
   14baa:	cd bf       	out	0x3d, r28	; 61
   14bac:	df 91       	pop	r29
   14bae:	cf 91       	pop	r28
   14bb0:	1f 91       	pop	r17
   14bb2:	0f 91       	pop	r16
   14bb4:	ff 90       	pop	r15
   14bb6:	ef 90       	pop	r14
   14bb8:	df 90       	pop	r13
   14bba:	cf 90       	pop	r12
   14bbc:	bf 90       	pop	r11
   14bbe:	af 90       	pop	r10
   14bc0:	9f 90       	pop	r9
   14bc2:	8f 90       	pop	r8
   14bc4:	6f 90       	pop	r6
   14bc6:	5f 90       	pop	r5
   14bc8:	4f 90       	pop	r4
   14bca:	3f 90       	pop	r3
   14bcc:	2f 90       	pop	r2
   14bce:	08 95       	ret

00014bd0 <SS80ControllerPack>:
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
        printf("[SS80 Increment to (%lXH)]\n",
            (long) SS80_Blocks_to_Bytes(SS80s->AddressBlocks));
#endif
    return(0);
}
   14bd0:	0f 93       	push	r16
   14bd2:	1f 93       	push	r17
   14bd4:	25 e0       	ldi	r18, 0x05	; 5
   14bd6:	30 e0       	ldi	r19, 0x00	; 0
   14bd8:	fc 01       	movw	r30, r24
   14bda:	31 83       	std	Z+1, r19	; 0x01
   14bdc:	20 83       	st	Z, r18
   14bde:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   14be2:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   14be6:	00 85       	ldd	r16, Z+8	; 0x08
   14be8:	11 85       	ldd	r17, Z+9	; 0x09
   14bea:	20 e0       	ldi	r18, 0x00	; 0
   14bec:	30 e0       	ldi	r19, 0x00	; 0
   14bee:	42 e0       	ldi	r20, 0x02	; 2
   14bf0:	50 e0       	ldi	r21, 0x00	; 0
   14bf2:	60 e0       	ldi	r22, 0x00	; 0
   14bf4:	70 e0       	ldi	r23, 0x00	; 0
   14bf6:	80 ea       	ldi	r24, 0xA0	; 160
   14bf8:	99 e1       	ldi	r25, 0x19	; 25
   14bfa:	0e 94 63 c0 	call	0x180c6	; 0x180c6 <V2B_MSB>
   14bfe:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   14c02:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   14c06:	02 85       	ldd	r16, Z+10	; 0x0a
   14c08:	13 85       	ldd	r17, Z+11	; 0x0b
   14c0a:	20 e0       	ldi	r18, 0x00	; 0
   14c0c:	30 e0       	ldi	r19, 0x00	; 0
   14c0e:	42 e0       	ldi	r20, 0x02	; 2
   14c10:	50 e0       	ldi	r21, 0x00	; 0
   14c12:	61 e0       	ldi	r22, 0x01	; 1
   14c14:	70 e0       	ldi	r23, 0x00	; 0
   14c16:	80 ea       	ldi	r24, 0xA0	; 160
   14c18:	99 e1       	ldi	r25, 0x19	; 25
   14c1a:	0e 94 63 c0 	call	0x180c6	; 0x180c6 <V2B_MSB>
   14c1e:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   14c22:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   14c26:	04 85       	ldd	r16, Z+12	; 0x0c
   14c28:	10 e0       	ldi	r17, 0x00	; 0
   14c2a:	20 e0       	ldi	r18, 0x00	; 0
   14c2c:	30 e0       	ldi	r19, 0x00	; 0
   14c2e:	41 e0       	ldi	r20, 0x01	; 1
   14c30:	50 e0       	ldi	r21, 0x00	; 0
   14c32:	64 e0       	ldi	r22, 0x04	; 4
   14c34:	70 e0       	ldi	r23, 0x00	; 0
   14c36:	80 ea       	ldi	r24, 0xA0	; 160
   14c38:	99 e1       	ldi	r25, 0x19	; 25
   14c3a:	0e 94 63 c0 	call	0x180c6	; 0x180c6 <V2B_MSB>
   14c3e:	80 ea       	ldi	r24, 0xA0	; 160
   14c40:	99 e1       	ldi	r25, 0x19	; 25
   14c42:	1f 91       	pop	r17
   14c44:	0f 91       	pop	r16
   14c46:	08 95       	ret

00014c48 <SS80UnitPack>:
   14c48:	0f 93       	push	r16
   14c4a:	1f 93       	push	r17
   14c4c:	23 e1       	ldi	r18, 0x13	; 19
   14c4e:	30 e0       	ldi	r19, 0x00	; 0
   14c50:	fc 01       	movw	r30, r24
   14c52:	31 83       	std	Z+1, r19	; 0x01
   14c54:	20 83       	st	Z, r18
   14c56:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   14c5a:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   14c5e:	05 85       	ldd	r16, Z+13	; 0x0d
   14c60:	10 e0       	ldi	r17, 0x00	; 0
   14c62:	20 e0       	ldi	r18, 0x00	; 0
   14c64:	30 e0       	ldi	r19, 0x00	; 0
   14c66:	41 e0       	ldi	r20, 0x01	; 1
   14c68:	50 e0       	ldi	r21, 0x00	; 0
   14c6a:	60 e0       	ldi	r22, 0x00	; 0
   14c6c:	70 e0       	ldi	r23, 0x00	; 0
   14c6e:	8d e8       	ldi	r24, 0x8D	; 141
   14c70:	99 e1       	ldi	r25, 0x19	; 25
   14c72:	0e 94 63 c0 	call	0x180c6	; 0x180c6 <V2B_MSB>
   14c76:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   14c7a:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   14c7e:	06 85       	ldd	r16, Z+14	; 0x0e
   14c80:	17 85       	ldd	r17, Z+15	; 0x0f
   14c82:	20 89       	ldd	r18, Z+16	; 0x10
   14c84:	31 89       	ldd	r19, Z+17	; 0x11
   14c86:	43 e0       	ldi	r20, 0x03	; 3
   14c88:	50 e0       	ldi	r21, 0x00	; 0
   14c8a:	61 e0       	ldi	r22, 0x01	; 1
   14c8c:	70 e0       	ldi	r23, 0x00	; 0
   14c8e:	8d e8       	ldi	r24, 0x8D	; 141
   14c90:	99 e1       	ldi	r25, 0x19	; 25
   14c92:	0e 94 63 c0 	call	0x180c6	; 0x180c6 <V2B_MSB>
   14c96:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   14c9a:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   14c9e:	02 89       	ldd	r16, Z+18	; 0x12
   14ca0:	13 89       	ldd	r17, Z+19	; 0x13
   14ca2:	20 e0       	ldi	r18, 0x00	; 0
   14ca4:	30 e0       	ldi	r19, 0x00	; 0
   14ca6:	42 e0       	ldi	r20, 0x02	; 2
   14ca8:	50 e0       	ldi	r21, 0x00	; 0
   14caa:	64 e0       	ldi	r22, 0x04	; 4
   14cac:	70 e0       	ldi	r23, 0x00	; 0
   14cae:	8d e8       	ldi	r24, 0x8D	; 141
   14cb0:	99 e1       	ldi	r25, 0x19	; 25
   14cb2:	0e 94 63 c0 	call	0x180c6	; 0x180c6 <V2B_MSB>
   14cb6:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   14cba:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   14cbe:	04 89       	ldd	r16, Z+20	; 0x14
   14cc0:	10 e0       	ldi	r17, 0x00	; 0
   14cc2:	20 e0       	ldi	r18, 0x00	; 0
   14cc4:	30 e0       	ldi	r19, 0x00	; 0
   14cc6:	41 e0       	ldi	r20, 0x01	; 1
   14cc8:	50 e0       	ldi	r21, 0x00	; 0
   14cca:	66 e0       	ldi	r22, 0x06	; 6
   14ccc:	70 e0       	ldi	r23, 0x00	; 0
   14cce:	8d e8       	ldi	r24, 0x8D	; 141
   14cd0:	99 e1       	ldi	r25, 0x19	; 25
   14cd2:	0e 94 63 c0 	call	0x180c6	; 0x180c6 <V2B_MSB>
   14cd6:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   14cda:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   14cde:	05 89       	ldd	r16, Z+21	; 0x15
   14ce0:	10 e0       	ldi	r17, 0x00	; 0
   14ce2:	20 e0       	ldi	r18, 0x00	; 0
   14ce4:	30 e0       	ldi	r19, 0x00	; 0
   14ce6:	41 e0       	ldi	r20, 0x01	; 1
   14ce8:	50 e0       	ldi	r21, 0x00	; 0
   14cea:	67 e0       	ldi	r22, 0x07	; 7
   14cec:	70 e0       	ldi	r23, 0x00	; 0
   14cee:	8d e8       	ldi	r24, 0x8D	; 141
   14cf0:	99 e1       	ldi	r25, 0x19	; 25
   14cf2:	0e 94 63 c0 	call	0x180c6	; 0x180c6 <V2B_MSB>
   14cf6:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   14cfa:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   14cfe:	06 89       	ldd	r16, Z+22	; 0x16
   14d00:	17 89       	ldd	r17, Z+23	; 0x17
   14d02:	20 e0       	ldi	r18, 0x00	; 0
   14d04:	30 e0       	ldi	r19, 0x00	; 0
   14d06:	42 e0       	ldi	r20, 0x02	; 2
   14d08:	50 e0       	ldi	r21, 0x00	; 0
   14d0a:	68 e0       	ldi	r22, 0x08	; 8
   14d0c:	70 e0       	ldi	r23, 0x00	; 0
   14d0e:	8d e8       	ldi	r24, 0x8D	; 141
   14d10:	99 e1       	ldi	r25, 0x19	; 25
   14d12:	0e 94 63 c0 	call	0x180c6	; 0x180c6 <V2B_MSB>
   14d16:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   14d1a:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   14d1e:	00 8d       	ldd	r16, Z+24	; 0x18
   14d20:	11 8d       	ldd	r17, Z+25	; 0x19
   14d22:	20 e0       	ldi	r18, 0x00	; 0
   14d24:	30 e0       	ldi	r19, 0x00	; 0
   14d26:	42 e0       	ldi	r20, 0x02	; 2
   14d28:	50 e0       	ldi	r21, 0x00	; 0
   14d2a:	6a e0       	ldi	r22, 0x0A	; 10
   14d2c:	70 e0       	ldi	r23, 0x00	; 0
   14d2e:	8d e8       	ldi	r24, 0x8D	; 141
   14d30:	99 e1       	ldi	r25, 0x19	; 25
   14d32:	0e 94 63 c0 	call	0x180c6	; 0x180c6 <V2B_MSB>
   14d36:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   14d3a:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   14d3e:	02 8d       	ldd	r16, Z+26	; 0x1a
   14d40:	13 8d       	ldd	r17, Z+27	; 0x1b
   14d42:	20 e0       	ldi	r18, 0x00	; 0
   14d44:	30 e0       	ldi	r19, 0x00	; 0
   14d46:	42 e0       	ldi	r20, 0x02	; 2
   14d48:	50 e0       	ldi	r21, 0x00	; 0
   14d4a:	6c e0       	ldi	r22, 0x0C	; 12
   14d4c:	70 e0       	ldi	r23, 0x00	; 0
   14d4e:	8d e8       	ldi	r24, 0x8D	; 141
   14d50:	99 e1       	ldi	r25, 0x19	; 25
   14d52:	0e 94 63 c0 	call	0x180c6	; 0x180c6 <V2B_MSB>
   14d56:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   14d5a:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   14d5e:	04 8d       	ldd	r16, Z+28	; 0x1c
   14d60:	15 8d       	ldd	r17, Z+29	; 0x1d
   14d62:	20 e0       	ldi	r18, 0x00	; 0
   14d64:	30 e0       	ldi	r19, 0x00	; 0
   14d66:	42 e0       	ldi	r20, 0x02	; 2
   14d68:	50 e0       	ldi	r21, 0x00	; 0
   14d6a:	6e e0       	ldi	r22, 0x0E	; 14
   14d6c:	70 e0       	ldi	r23, 0x00	; 0
   14d6e:	8d e8       	ldi	r24, 0x8D	; 141
   14d70:	99 e1       	ldi	r25, 0x19	; 25
   14d72:	0e 94 63 c0 	call	0x180c6	; 0x180c6 <V2B_MSB>
   14d76:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   14d7a:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   14d7e:	06 8d       	ldd	r16, Z+30	; 0x1e
   14d80:	10 e0       	ldi	r17, 0x00	; 0
   14d82:	20 e0       	ldi	r18, 0x00	; 0
   14d84:	30 e0       	ldi	r19, 0x00	; 0
   14d86:	41 e0       	ldi	r20, 0x01	; 1
   14d88:	50 e0       	ldi	r21, 0x00	; 0
   14d8a:	60 e1       	ldi	r22, 0x10	; 16
   14d8c:	70 e0       	ldi	r23, 0x00	; 0
   14d8e:	8d e8       	ldi	r24, 0x8D	; 141
   14d90:	99 e1       	ldi	r25, 0x19	; 25
   14d92:	0e 94 63 c0 	call	0x180c6	; 0x180c6 <V2B_MSB>
   14d96:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   14d9a:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   14d9e:	07 8d       	ldd	r16, Z+31	; 0x1f
   14da0:	10 e0       	ldi	r17, 0x00	; 0
   14da2:	20 e0       	ldi	r18, 0x00	; 0
   14da4:	30 e0       	ldi	r19, 0x00	; 0
   14da6:	41 e0       	ldi	r20, 0x01	; 1
   14da8:	50 e0       	ldi	r21, 0x00	; 0
   14daa:	61 e1       	ldi	r22, 0x11	; 17
   14dac:	70 e0       	ldi	r23, 0x00	; 0
   14dae:	8d e8       	ldi	r24, 0x8D	; 141
   14db0:	99 e1       	ldi	r25, 0x19	; 25
   14db2:	0e 94 63 c0 	call	0x180c6	; 0x180c6 <V2B_MSB>
   14db6:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   14dba:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   14dbe:	00 a1       	ldd	r16, Z+32	; 0x20
   14dc0:	10 e0       	ldi	r17, 0x00	; 0
   14dc2:	20 e0       	ldi	r18, 0x00	; 0
   14dc4:	30 e0       	ldi	r19, 0x00	; 0
   14dc6:	41 e0       	ldi	r20, 0x01	; 1
   14dc8:	50 e0       	ldi	r21, 0x00	; 0
   14dca:	62 e1       	ldi	r22, 0x12	; 18
   14dcc:	70 e0       	ldi	r23, 0x00	; 0
   14dce:	8d e8       	ldi	r24, 0x8D	; 141
   14dd0:	99 e1       	ldi	r25, 0x19	; 25
   14dd2:	0e 94 63 c0 	call	0x180c6	; 0x180c6 <V2B_MSB>
   14dd6:	8d e8       	ldi	r24, 0x8D	; 141
   14dd8:	99 e1       	ldi	r25, 0x19	; 25
   14dda:	1f 91       	pop	r17
   14ddc:	0f 91       	pop	r16
   14dde:	08 95       	ret

00014de0 <SS80VolumePack>:
   14de0:	0f 93       	push	r16
   14de2:	1f 93       	push	r17
   14de4:	2d e0       	ldi	r18, 0x0D	; 13
   14de6:	30 e0       	ldi	r19, 0x00	; 0
   14de8:	fc 01       	movw	r30, r24
   14dea:	31 83       	std	Z+1, r19	; 0x01
   14dec:	20 83       	st	Z, r18
   14dee:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   14df2:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   14df6:	01 a1       	ldd	r16, Z+33	; 0x21
   14df8:	12 a1       	ldd	r17, Z+34	; 0x22
   14dfa:	23 a1       	ldd	r18, Z+35	; 0x23
   14dfc:	34 a1       	ldd	r19, Z+36	; 0x24
   14dfe:	43 e0       	ldi	r20, 0x03	; 3
   14e00:	50 e0       	ldi	r21, 0x00	; 0
   14e02:	60 e0       	ldi	r22, 0x00	; 0
   14e04:	70 e0       	ldi	r23, 0x00	; 0
   14e06:	80 e8       	ldi	r24, 0x80	; 128
   14e08:	99 e1       	ldi	r25, 0x19	; 25
   14e0a:	0e 94 63 c0 	call	0x180c6	; 0x180c6 <V2B_MSB>
   14e0e:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   14e12:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   14e16:	05 a1       	ldd	r16, Z+37	; 0x25
   14e18:	10 e0       	ldi	r17, 0x00	; 0
   14e1a:	20 e0       	ldi	r18, 0x00	; 0
   14e1c:	30 e0       	ldi	r19, 0x00	; 0
   14e1e:	41 e0       	ldi	r20, 0x01	; 1
   14e20:	50 e0       	ldi	r21, 0x00	; 0
   14e22:	63 e0       	ldi	r22, 0x03	; 3
   14e24:	70 e0       	ldi	r23, 0x00	; 0
   14e26:	80 e8       	ldi	r24, 0x80	; 128
   14e28:	99 e1       	ldi	r25, 0x19	; 25
   14e2a:	0e 94 63 c0 	call	0x180c6	; 0x180c6 <V2B_MSB>
   14e2e:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   14e32:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   14e36:	06 a1       	ldd	r16, Z+38	; 0x26
   14e38:	17 a1       	ldd	r17, Z+39	; 0x27
   14e3a:	20 e0       	ldi	r18, 0x00	; 0
   14e3c:	30 e0       	ldi	r19, 0x00	; 0
   14e3e:	42 e0       	ldi	r20, 0x02	; 2
   14e40:	50 e0       	ldi	r21, 0x00	; 0
   14e42:	64 e0       	ldi	r22, 0x04	; 4
   14e44:	70 e0       	ldi	r23, 0x00	; 0
   14e46:	80 e8       	ldi	r24, 0x80	; 128
   14e48:	99 e1       	ldi	r25, 0x19	; 25
   14e4a:	0e 94 63 c0 	call	0x180c6	; 0x180c6 <V2B_MSB>
   14e4e:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   14e52:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   14e56:	00 a5       	ldd	r16, Z+40	; 0x28
   14e58:	11 a5       	ldd	r17, Z+41	; 0x29
   14e5a:	22 a5       	ldd	r18, Z+42	; 0x2a
   14e5c:	33 a5       	ldd	r19, Z+43	; 0x2b
   14e5e:	46 e0       	ldi	r20, 0x06	; 6
   14e60:	50 e0       	ldi	r21, 0x00	; 0
   14e62:	66 e0       	ldi	r22, 0x06	; 6
   14e64:	70 e0       	ldi	r23, 0x00	; 0
   14e66:	80 e8       	ldi	r24, 0x80	; 128
   14e68:	99 e1       	ldi	r25, 0x19	; 25
   14e6a:	0e 94 63 c0 	call	0x180c6	; 0x180c6 <V2B_MSB>
   14e6e:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   14e72:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   14e76:	04 a5       	ldd	r16, Z+44	; 0x2c
   14e78:	10 e0       	ldi	r17, 0x00	; 0
   14e7a:	20 e0       	ldi	r18, 0x00	; 0
   14e7c:	30 e0       	ldi	r19, 0x00	; 0
   14e7e:	41 e0       	ldi	r20, 0x01	; 1
   14e80:	50 e0       	ldi	r21, 0x00	; 0
   14e82:	6c e0       	ldi	r22, 0x0C	; 12
   14e84:	70 e0       	ldi	r23, 0x00	; 0
   14e86:	80 e8       	ldi	r24, 0x80	; 128
   14e88:	99 e1       	ldi	r25, 0x19	; 25
   14e8a:	0e 94 63 c0 	call	0x180c6	; 0x180c6 <V2B_MSB>
   14e8e:	80 e8       	ldi	r24, 0x80	; 128
   14e90:	99 e1       	ldi	r25, 0x19	; 25
   14e92:	1f 91       	pop	r17
   14e94:	0f 91       	pop	r16
   14e96:	08 95       	ret

00014e98 <SS80_test_extended_status>:
   14e98:	9b 01       	movw	r18, r22
   14e9a:	43 e0       	ldi	r20, 0x03	; 3
   14e9c:	35 95       	asr	r19
   14e9e:	27 95       	ror	r18
   14ea0:	4a 95       	dec	r20
   14ea2:	e1 f7       	brne	.-8      	; 0x14e9c <SS80_test_extended_status+0x4>
   14ea4:	82 0f       	add	r24, r18
   14ea6:	93 1f       	adc	r25, r19
   14ea8:	67 70       	andi	r22, 0x07	; 7
   14eaa:	77 27       	eor	r23, r23
   14eac:	20 e8       	ldi	r18, 0x80	; 128
   14eae:	30 e0       	ldi	r19, 0x00	; 0
   14eb0:	02 c0       	rjmp	.+4      	; 0x14eb6 <SS80_test_extended_status+0x1e>
   14eb2:	35 95       	asr	r19
   14eb4:	27 95       	ror	r18
   14eb6:	6a 95       	dec	r22
   14eb8:	e2 f7       	brpl	.-8      	; 0x14eb2 <SS80_test_extended_status+0x1a>
   14eba:	fc 01       	movw	r30, r24
   14ebc:	80 81       	ld	r24, Z
   14ebe:	28 23       	and	r18, r24
   14ec0:	81 e0       	ldi	r24, 0x01	; 1
   14ec2:	90 e0       	ldi	r25, 0x00	; 0
   14ec4:	11 f4       	brne	.+4      	; 0x14eca <SS80_test_extended_status+0x32>
   14ec6:	80 e0       	ldi	r24, 0x00	; 0
   14ec8:	90 e0       	ldi	r25, 0x00	; 0
   14eca:	08 95       	ret

00014ecc <SS80_display_extended_status>:
   14ecc:	6f 92       	push	r6
   14ece:	7f 92       	push	r7
   14ed0:	8f 92       	push	r8
   14ed2:	ef 92       	push	r14
   14ed4:	ff 92       	push	r15
   14ed6:	0f 93       	push	r16
   14ed8:	1f 93       	push	r17
   14eda:	cf 93       	push	r28
   14edc:	df 93       	push	r29
   14ede:	ad b7       	in	r26, 0x3d	; 61
   14ee0:	be b7       	in	r27, 0x3e	; 62
   14ee2:	17 97       	sbiw	r26, 0x07	; 7
   14ee4:	0f b6       	in	r0, 0x3f	; 63
   14ee6:	f8 94       	cli
   14ee8:	be bf       	out	0x3e, r27	; 62
   14eea:	0f be       	out	0x3f, r0	; 63
   14eec:	ad bf       	out	0x3d, r26	; 61
   14eee:	fc 01       	movw	r30, r24
   14ef0:	ac 01       	movw	r20, r24
   14ef2:	48 5f       	subi	r20, 0xF8	; 248
   14ef4:	5f 4f       	sbci	r21, 0xFF	; 255
   14ef6:	20 e0       	ldi	r18, 0x00	; 0
   14ef8:	30 e0       	ldi	r19, 0x00	; 0
   14efa:	a1 91       	ld	r26, Z+
   14efc:	aa 23       	and	r26, r26
   14efe:	11 f0       	breq	.+4      	; 0x14f04 <SS80_display_extended_status+0x38>
   14f00:	21 e0       	ldi	r18, 0x01	; 1
   14f02:	30 e0       	ldi	r19, 0x00	; 0
   14f04:	e4 17       	cp	r30, r20
   14f06:	f5 07       	cpc	r31, r21
   14f08:	c1 f7       	brne	.-16     	; 0x14efa <SS80_display_extended_status+0x2e>
   14f0a:	23 2b       	or	r18, r19
   14f0c:	81 f1       	breq	.+96     	; 0x14f6e <SS80_display_extended_status+0xa2>
   14f0e:	ec 01       	movw	r28, r24
   14f10:	ed b7       	in	r30, 0x3d	; 61
   14f12:	fe b7       	in	r31, 0x3e	; 62
   14f14:	75 83       	std	Z+5, r23	; 0x05
   14f16:	64 83       	std	Z+4, r22	; 0x04
   14f18:	8d ee       	ldi	r24, 0xED	; 237
   14f1a:	97 e2       	ldi	r25, 0x27	; 39
   14f1c:	a0 e0       	ldi	r26, 0x00	; 0
   14f1e:	81 83       	std	Z+1, r24	; 0x01
   14f20:	92 83       	std	Z+2, r25	; 0x02
   14f22:	a3 83       	std	Z+3, r26	; 0x03
   14f24:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   14f28:	0c e7       	ldi	r16, 0x7C	; 124
   14f2a:	12 e0       	ldi	r17, 0x02	; 2
   14f2c:	82 ee       	ldi	r24, 0xE2	; 226
   14f2e:	97 e2       	ldi	r25, 0x27	; 39
   14f30:	3c 01       	movw	r6, r24
   14f32:	81 2c       	mov	r8, r1
   14f34:	f8 01       	movw	r30, r16
   14f36:	e0 80       	ld	r14, Z
   14f38:	f1 80       	ldd	r15, Z+1	; 0x01
   14f3a:	ff ef       	ldi	r31, 0xFF	; 255
   14f3c:	ef 16       	cp	r14, r31
   14f3e:	ff 06       	cpc	r15, r31
   14f40:	b1 f0       	breq	.+44     	; 0x14f6e <SS80_display_extended_status+0xa2>
   14f42:	b7 01       	movw	r22, r14
   14f44:	ce 01       	movw	r24, r28
   14f46:	a8 df       	rcall	.-176    	; 0x14e98 <SS80_test_extended_status>
   14f48:	89 2b       	or	r24, r25
   14f4a:	71 f0       	breq	.+28     	; 0x14f68 <SS80_display_extended_status+0x9c>
   14f4c:	f8 01       	movw	r30, r16
   14f4e:	82 81       	ldd	r24, Z+2	; 0x02
   14f50:	93 81       	ldd	r25, Z+3	; 0x03
   14f52:	ed b7       	in	r30, 0x3d	; 61
   14f54:	fe b7       	in	r31, 0x3e	; 62
   14f56:	97 83       	std	Z+7, r25	; 0x07
   14f58:	86 83       	std	Z+6, r24	; 0x06
   14f5a:	f5 82       	std	Z+5, r15	; 0x05
   14f5c:	e4 82       	std	Z+4, r14	; 0x04
   14f5e:	61 82       	std	Z+1, r6	; 0x01
   14f60:	72 82       	std	Z+2, r7	; 0x02
   14f62:	83 82       	std	Z+3, r8	; 0x03
   14f64:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   14f68:	0c 5f       	subi	r16, 0xFC	; 252
   14f6a:	1f 4f       	sbci	r17, 0xFF	; 255
   14f6c:	e3 cf       	rjmp	.-58     	; 0x14f34 <SS80_display_extended_status+0x68>
   14f6e:	ad b7       	in	r26, 0x3d	; 61
   14f70:	be b7       	in	r27, 0x3e	; 62
   14f72:	17 96       	adiw	r26, 0x07	; 7
   14f74:	0f b6       	in	r0, 0x3f	; 63
   14f76:	f8 94       	cli
   14f78:	be bf       	out	0x3e, r27	; 62
   14f7a:	0f be       	out	0x3f, r0	; 63
   14f7c:	ad bf       	out	0x3d, r26	; 61
   14f7e:	df 91       	pop	r29
   14f80:	cf 91       	pop	r28
   14f82:	1f 91       	pop	r17
   14f84:	0f 91       	pop	r16
   14f86:	ff 90       	pop	r15
   14f88:	ef 90       	pop	r14
   14f8a:	8f 90       	pop	r8
   14f8c:	7f 90       	pop	r7
   14f8e:	6f 90       	pop	r6
   14f90:	08 95       	ret

00014f92 <SS80_send_status>:
   14f92:	a9 e1       	ldi	r26, 0x19	; 25
   14f94:	b0 e0       	ldi	r27, 0x00	; 0
   14f96:	ef ec       	ldi	r30, 0xCF	; 207
   14f98:	f7 ea       	ldi	r31, 0xA7	; 167
   14f9a:	0c 94 0b e7 	jmp	0x1ce16	; 0x1ce16 <__prologue_saves__+0x18>
   14f9e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14fa2:	85 ff       	sbrs	r24, 5
   14fa4:	0a c0       	rjmp	.+20     	; 0x14fba <SS80_send_status+0x28>
   14fa6:	8e ec       	ldi	r24, 0xCE	; 206
   14fa8:	97 e2       	ldi	r25, 0x27	; 39
   14faa:	a0 e0       	ldi	r26, 0x00	; 0
   14fac:	ed b7       	in	r30, 0x3d	; 61
   14fae:	fe b7       	in	r31, 0x3e	; 62
   14fb0:	81 83       	std	Z+1, r24	; 0x01
   14fb2:	92 83       	std	Z+2, r25	; 0x02
   14fb4:	a3 83       	std	Z+3, r26	; 0x03
   14fb6:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   14fba:	ce 01       	movw	r24, r28
   14fbc:	04 96       	adiw	r24, 0x04	; 4
   14fbe:	7c 01       	movw	r14, r24
   14fc0:	84 e1       	ldi	r24, 0x14	; 20
   14fc2:	f7 01       	movw	r30, r14
   14fc4:	11 92       	st	Z+, r1
   14fc6:	8a 95       	dec	r24
   14fc8:	e9 f7       	brne	.-6      	; 0x14fc4 <SS80_send_status+0x32>
   14fca:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   14fce:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   14fd2:	86 81       	ldd	r24, Z+6	; 0x06
   14fd4:	20 e1       	ldi	r18, 0x10	; 16
   14fd6:	82 9f       	mul	r24, r18
   14fd8:	c0 01       	movw	r24, r0
   14fda:	11 24       	eor	r1, r1
   14fdc:	95 81       	ldd	r25, Z+5	; 0x05
   14fde:	9f 70       	andi	r25, 0x0F	; 15
   14fe0:	89 2b       	or	r24, r25
   14fe2:	8c 83       	std	Y+4, r24	; 0x04
   14fe4:	8f ef       	ldi	r24, 0xFF	; 255
   14fe6:	8d 83       	std	Y+5, r24	; 0x05
   14fe8:	83 81       	ldd	r24, Z+3	; 0x03
   14fea:	86 ff       	sbrs	r24, 6
   14fec:	02 c0       	rjmp	.+4      	; 0x14ff2 <SS80_send_status+0x60>
   14fee:	92 e0       	ldi	r25, 0x02	; 2
   14ff0:	9e 83       	std	Y+6, r25	; 0x06
   14ff2:	82 ff       	sbrs	r24, 2
   14ff4:	03 c0       	rjmp	.+6      	; 0x14ffc <SS80_send_status+0x6a>
   14ff6:	9e 81       	ldd	r25, Y+6	; 0x06
   14ff8:	91 60       	ori	r25, 0x01	; 1
   14ffa:	9e 83       	std	Y+6, r25	; 0x06
   14ffc:	80 ff       	sbrs	r24, 0
   14ffe:	02 c0       	rjmp	.+4      	; 0x15004 <SS80_send_status+0x72>
   15000:	82 e0       	ldi	r24, 0x02	; 2
   15002:	88 87       	std	Y+8, r24	; 0x08
   15004:	83 81       	ldd	r24, Z+3	; 0x03
   15006:	81 ff       	sbrs	r24, 1
   15008:	03 c0       	rjmp	.+6      	; 0x15010 <SS80_send_status+0x7e>
   1500a:	88 85       	ldd	r24, Y+8	; 0x08
   1500c:	82 60       	ori	r24, 0x02	; 2
   1500e:	88 87       	std	Y+8, r24	; 0x08
   15010:	83 81       	ldd	r24, Z+3	; 0x03
   15012:	83 ff       	sbrs	r24, 3
   15014:	02 c0       	rjmp	.+4      	; 0x1501a <SS80_send_status+0x88>
   15016:	88 e0       	ldi	r24, 0x08	; 8
   15018:	8a 87       	std	Y+10, r24	; 0x0a
   1501a:	83 81       	ldd	r24, Z+3	; 0x03
   1501c:	94 81       	ldd	r25, Z+4	; 0x04
   1501e:	89 2b       	or	r24, r25
   15020:	59 f4       	brne	.+22     	; 0x15038 <SS80_send_status+0xa6>
   15022:	07 81       	ldd	r16, Z+7	; 0x07
   15024:	10 85       	ldd	r17, Z+8	; 0x08
   15026:	21 85       	ldd	r18, Z+9	; 0x09
   15028:	32 85       	ldd	r19, Z+10	; 0x0a
   1502a:	46 e0       	ldi	r20, 0x06	; 6
   1502c:	50 e0       	ldi	r21, 0x00	; 0
   1502e:	6a e0       	ldi	r22, 0x0A	; 10
   15030:	70 e0       	ldi	r23, 0x00	; 0
   15032:	c7 01       	movw	r24, r14
   15034:	0e 94 63 c0 	call	0x180c6	; 0x180c6 <V2B_MSB>
   15038:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   1503c:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   15040:	83 81       	ldd	r24, Z+3	; 0x03
   15042:	94 81       	ldd	r25, Z+4	; 0x04
   15044:	89 2b       	or	r24, r25
   15046:	11 f0       	breq	.+4      	; 0x1504c <SS80_send_status+0xba>
   15048:	81 e0       	ldi	r24, 0x01	; 1
   1504a:	82 83       	std	Z+2, r24	; 0x02
   1504c:	80 e0       	ldi	r24, 0x00	; 0
   1504e:	91 e0       	ldi	r25, 0x01	; 1
   15050:	99 8f       	std	Y+25, r25	; 0x19
   15052:	88 8f       	std	Y+24, r24	; 0x18
   15054:	ae 01       	movw	r20, r28
   15056:	48 5e       	subi	r20, 0xE8	; 232
   15058:	5f 4f       	sbci	r21, 0xFF	; 255
   1505a:	64 e1       	ldi	r22, 0x14	; 20
   1505c:	70 e0       	ldi	r23, 0x00	; 0
   1505e:	c7 01       	movw	r24, r14
   15060:	0e 94 a4 8b 	call	0x11748	; 0x11748 <gpib_write_str>
   15064:	44 97       	sbiw	r24, 0x14	; 20
   15066:	71 f0       	breq	.+28     	; 0x15084 <SS80_send_status+0xf2>
   15068:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1506c:	80 ff       	sbrs	r24, 0
   1506e:	0a c0       	rjmp	.+20     	; 0x15084 <SS80_send_status+0xf2>
   15070:	83 eb       	ldi	r24, 0xB3	; 179
   15072:	97 e2       	ldi	r25, 0x27	; 39
   15074:	a0 e0       	ldi	r26, 0x00	; 0
   15076:	ed b7       	in	r30, 0x3d	; 61
   15078:	fe b7       	in	r31, 0x3e	; 62
   1507a:	81 83       	std	Z+1, r24	; 0x01
   1507c:	92 83       	std	Z+2, r25	; 0x02
   1507e:	a3 83       	std	Z+3, r26	; 0x03
   15080:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   15084:	88 8d       	ldd	r24, Y+24	; 0x18
   15086:	99 8d       	ldd	r25, Y+25	; 0x19
   15088:	88 27       	eor	r24, r24
   1508a:	90 7d       	andi	r25, 0xD0	; 208
   1508c:	69 96       	adiw	r28, 0x19	; 25
   1508e:	e6 e0       	ldi	r30, 0x06	; 6
   15090:	0c 94 27 e7 	jmp	0x1ce4e	; 0x1ce4e <__epilogue_restores__+0x18>

00015094 <SS80_describe>:
   15094:	a7 e0       	ldi	r26, 0x07	; 7
   15096:	b0 e0       	ldi	r27, 0x00	; 0
   15098:	e0 e5       	ldi	r30, 0x50	; 80
   1509a:	f8 ea       	ldi	r31, 0xA8	; 168
   1509c:	0c 94 0f e7 	jmp	0x1ce1e	; 0x1ce1e <__prologue_saves__+0x20>
   150a0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   150a4:	85 ff       	sbrs	r24, 5
   150a6:	0a c0       	rjmp	.+20     	; 0x150bc <SS80_describe+0x28>
   150a8:	82 ea       	ldi	r24, 0xA2	; 162
   150aa:	97 e2       	ldi	r25, 0x27	; 39
   150ac:	a0 e0       	ldi	r26, 0x00	; 0
   150ae:	ed b7       	in	r30, 0x3d	; 61
   150b0:	fe b7       	in	r31, 0x3e	; 62
   150b2:	81 83       	std	Z+1, r24	; 0x01
   150b4:	92 83       	std	Z+2, r25	; 0x02
   150b6:	a3 83       	std	Z+3, r26	; 0x03
   150b8:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   150bc:	1f 82       	std	Y+7, r1	; 0x07
   150be:	1e 82       	std	Y+6, r1	; 0x06
   150c0:	ce 01       	movw	r24, r28
   150c2:	04 96       	adiw	r24, 0x04	; 4
   150c4:	85 dd       	rcall	.-1270   	; 0x14bd0 <SS80ControllerPack>
   150c6:	6c 81       	ldd	r22, Y+4	; 0x04
   150c8:	7d 81       	ldd	r23, Y+5	; 0x05
   150ca:	ae 01       	movw	r20, r28
   150cc:	4a 5f       	subi	r20, 0xFA	; 250
   150ce:	5f 4f       	sbci	r21, 0xFF	; 255
   150d0:	0e 94 a4 8b 	call	0x11748	; 0x11748 <gpib_write_str>
   150d4:	2c 81       	ldd	r18, Y+4	; 0x04
   150d6:	3d 81       	ldd	r19, Y+5	; 0x05
   150d8:	82 17       	cp	r24, r18
   150da:	93 07       	cpc	r25, r19
   150dc:	39 f0       	breq	.+14     	; 0x150ec <SS80_describe+0x58>
   150de:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   150e2:	80 ff       	sbrs	r24, 0
   150e4:	3c c0       	rjmp	.+120    	; 0x1515e <SS80_describe+0xca>
   150e6:	8f e7       	ldi	r24, 0x7F	; 127
   150e8:	97 e2       	ldi	r25, 0x27	; 39
   150ea:	31 c0       	rjmp	.+98     	; 0x1514e <SS80_describe+0xba>
   150ec:	1f 82       	std	Y+7, r1	; 0x07
   150ee:	1e 82       	std	Y+6, r1	; 0x06
   150f0:	ce 01       	movw	r24, r28
   150f2:	04 96       	adiw	r24, 0x04	; 4
   150f4:	a9 dd       	rcall	.-1198   	; 0x14c48 <SS80UnitPack>
   150f6:	6c 81       	ldd	r22, Y+4	; 0x04
   150f8:	7d 81       	ldd	r23, Y+5	; 0x05
   150fa:	ae 01       	movw	r20, r28
   150fc:	4a 5f       	subi	r20, 0xFA	; 250
   150fe:	5f 4f       	sbci	r21, 0xFF	; 255
   15100:	0e 94 a4 8b 	call	0x11748	; 0x11748 <gpib_write_str>
   15104:	2c 81       	ldd	r18, Y+4	; 0x04
   15106:	3d 81       	ldd	r19, Y+5	; 0x05
   15108:	82 17       	cp	r24, r18
   1510a:	93 07       	cpc	r25, r19
   1510c:	39 f0       	breq	.+14     	; 0x1511c <SS80_describe+0x88>
   1510e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15112:	80 ff       	sbrs	r24, 0
   15114:	24 c0       	rjmp	.+72     	; 0x1515e <SS80_describe+0xca>
   15116:	82 e6       	ldi	r24, 0x62	; 98
   15118:	97 e2       	ldi	r25, 0x27	; 39
   1511a:	19 c0       	rjmp	.+50     	; 0x1514e <SS80_describe+0xba>
   1511c:	80 e0       	ldi	r24, 0x00	; 0
   1511e:	91 e0       	ldi	r25, 0x01	; 1
   15120:	9f 83       	std	Y+7, r25	; 0x07
   15122:	8e 83       	std	Y+6, r24	; 0x06
   15124:	ce 01       	movw	r24, r28
   15126:	04 96       	adiw	r24, 0x04	; 4
   15128:	5b de       	rcall	.-842    	; 0x14de0 <SS80VolumePack>
   1512a:	6c 81       	ldd	r22, Y+4	; 0x04
   1512c:	7d 81       	ldd	r23, Y+5	; 0x05
   1512e:	ae 01       	movw	r20, r28
   15130:	4a 5f       	subi	r20, 0xFA	; 250
   15132:	5f 4f       	sbci	r21, 0xFF	; 255
   15134:	0e 94 a4 8b 	call	0x11748	; 0x11748 <gpib_write_str>
   15138:	2c 81       	ldd	r18, Y+4	; 0x04
   1513a:	3d 81       	ldd	r19, Y+5	; 0x05
   1513c:	82 17       	cp	r24, r18
   1513e:	93 07       	cpc	r25, r19
   15140:	99 f0       	breq	.+38     	; 0x15168 <SS80_describe+0xd4>
   15142:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15146:	80 ff       	sbrs	r24, 0
   15148:	0a c0       	rjmp	.+20     	; 0x1515e <SS80_describe+0xca>
   1514a:	83 e4       	ldi	r24, 0x43	; 67
   1514c:	97 e2       	ldi	r25, 0x27	; 39
   1514e:	a0 e0       	ldi	r26, 0x00	; 0
   15150:	ed b7       	in	r30, 0x3d	; 61
   15152:	fe b7       	in	r31, 0x3e	; 62
   15154:	81 83       	std	Z+1, r24	; 0x01
   15156:	92 83       	std	Z+2, r25	; 0x02
   15158:	a3 83       	std	Z+3, r26	; 0x03
   1515a:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   1515e:	8e 81       	ldd	r24, Y+6	; 0x06
   15160:	9f 81       	ldd	r25, Y+7	; 0x07
   15162:	88 27       	eor	r24, r24
   15164:	90 7d       	andi	r25, 0xD0	; 208
   15166:	02 c0       	rjmp	.+4      	; 0x1516c <SS80_describe+0xd8>
   15168:	80 e0       	ldi	r24, 0x00	; 0
   1516a:	90 e0       	ldi	r25, 0x00	; 0
   1516c:	27 96       	adiw	r28, 0x07	; 7
   1516e:	e2 e0       	ldi	r30, 0x02	; 2
   15170:	0c 94 2b e7 	jmp	0x1ce56	; 0x1ce56 <__epilogue_restores__+0x20>

00015174 <SS80_Check_Unit>:
   15174:	00 d0       	rcall	.+0      	; 0x15176 <SS80_Check_Unit+0x2>
   15176:	00 d0       	rcall	.+0      	; 0x15178 <SS80_Check_Unit+0x4>
   15178:	1f 92       	push	r1
   1517a:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   1517e:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   15182:	88 23       	and	r24, r24
   15184:	c9 f0       	breq	.+50     	; 0x151b8 <SS80_Check_Unit+0x44>
   15186:	8f 30       	cpi	r24, 0x0F	; 15
   15188:	b9 f0       	breq	.+46     	; 0x151b8 <SS80_Check_Unit+0x44>
   1518a:	23 81       	ldd	r18, Z+3	; 0x03
   1518c:	34 81       	ldd	r19, Z+4	; 0x04
   1518e:	20 64       	ori	r18, 0x40	; 64
   15190:	34 83       	std	Z+4, r19	; 0x04
   15192:	23 83       	std	Z+3, r18	; 0x03
   15194:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <debuglevel>
   15198:	90 ff       	sbrs	r25, 0
   1519a:	0f c0       	rjmp	.+30     	; 0x151ba <SS80_Check_Unit+0x46>
   1519c:	90 e0       	ldi	r25, 0x00	; 0
   1519e:	ed b7       	in	r30, 0x3d	; 61
   151a0:	fe b7       	in	r31, 0x3e	; 62
   151a2:	95 83       	std	Z+5, r25	; 0x05
   151a4:	84 83       	std	Z+4, r24	; 0x04
   151a6:	8b e2       	ldi	r24, 0x2B	; 43
   151a8:	97 e2       	ldi	r25, 0x27	; 39
   151aa:	a0 e0       	ldi	r26, 0x00	; 0
   151ac:	81 83       	std	Z+1, r24	; 0x01
   151ae:	92 83       	std	Z+2, r25	; 0x02
   151b0:	a3 83       	std	Z+3, r26	; 0x03
   151b2:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   151b6:	01 c0       	rjmp	.+2      	; 0x151ba <SS80_Check_Unit+0x46>
   151b8:	85 83       	std	Z+5, r24	; 0x05
   151ba:	0f 90       	pop	r0
   151bc:	0f 90       	pop	r0
   151be:	0f 90       	pop	r0
   151c0:	0f 90       	pop	r0
   151c2:	0f 90       	pop	r0
   151c4:	08 95       	ret

000151c6 <SS80_Check_Volume>:
   151c6:	00 d0       	rcall	.+0      	; 0x151c8 <SS80_Check_Volume+0x2>
   151c8:	00 d0       	rcall	.+0      	; 0x151ca <SS80_Check_Volume+0x4>
   151ca:	1f 92       	push	r1
   151cc:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   151d0:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   151d4:	88 23       	and	r24, r24
   151d6:	b9 f0       	breq	.+46     	; 0x15206 <SS80_Check_Volume+0x40>
   151d8:	23 81       	ldd	r18, Z+3	; 0x03
   151da:	34 81       	ldd	r19, Z+4	; 0x04
   151dc:	20 64       	ori	r18, 0x40	; 64
   151de:	34 83       	std	Z+4, r19	; 0x04
   151e0:	23 83       	std	Z+3, r18	; 0x03
   151e2:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <debuglevel>
   151e6:	90 ff       	sbrs	r25, 0
   151e8:	0f c0       	rjmp	.+30     	; 0x15208 <SS80_Check_Volume+0x42>
   151ea:	90 e0       	ldi	r25, 0x00	; 0
   151ec:	ed b7       	in	r30, 0x3d	; 61
   151ee:	fe b7       	in	r31, 0x3e	; 62
   151f0:	95 83       	std	Z+5, r25	; 0x05
   151f2:	84 83       	std	Z+4, r24	; 0x04
   151f4:	81 e1       	ldi	r24, 0x11	; 17
   151f6:	97 e2       	ldi	r25, 0x27	; 39
   151f8:	a0 e0       	ldi	r26, 0x00	; 0
   151fa:	81 83       	std	Z+1, r24	; 0x01
   151fc:	92 83       	std	Z+2, r25	; 0x02
   151fe:	a3 83       	std	Z+3, r26	; 0x03
   15200:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   15204:	01 c0       	rjmp	.+2      	; 0x15208 <SS80_Check_Volume+0x42>
   15206:	16 82       	std	Z+6, r1	; 0x06
   15208:	0f 90       	pop	r0
   1520a:	0f 90       	pop	r0
   1520c:	0f 90       	pop	r0
   1520e:	0f 90       	pop	r0
   15210:	0f 90       	pop	r0
   15212:	08 95       	ret

00015214 <SS80_Command_State>:
   15214:	2f 92       	push	r2
   15216:	3f 92       	push	r3
   15218:	4f 92       	push	r4
   1521a:	6f 92       	push	r6
   1521c:	7f 92       	push	r7
   1521e:	8f 92       	push	r8
   15220:	af 92       	push	r10
   15222:	bf 92       	push	r11
   15224:	cf 92       	push	r12
   15226:	ef 92       	push	r14
   15228:	ff 92       	push	r15
   1522a:	0f 93       	push	r16
   1522c:	1f 93       	push	r17
   1522e:	cf 93       	push	r28
   15230:	df 93       	push	r29
   15232:	cd b7       	in	r28, 0x3d	; 61
   15234:	de b7       	in	r29, 0x3e	; 62
   15236:	66 97       	sbiw	r28, 0x16	; 22
   15238:	0f b6       	in	r0, 0x3f	; 63
   1523a:	f8 94       	cli
   1523c:	de bf       	out	0x3e, r29	; 62
   1523e:	0f be       	out	0x3f, r0	; 63
   15240:	cd bf       	out	0x3d, r28	; 61
   15242:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   15246:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   1524a:	81 81       	ldd	r24, Z+1	; 0x01
   1524c:	90 e0       	ldi	r25, 0x00	; 0
   1524e:	0e 94 aa 86 	call	0x10d54	; 0x10d54 <gpib_disable_PPR>
   15252:	80 e0       	ldi	r24, 0x00	; 0
   15254:	91 e0       	ldi	r25, 0x01	; 1
   15256:	99 87       	std	Y+9, r25	; 0x09
   15258:	88 87       	std	Y+8, r24	; 0x08
   1525a:	ae 01       	movw	r20, r28
   1525c:	48 5f       	subi	r20, 0xF8	; 248
   1525e:	5f 4f       	sbci	r21, 0xFF	; 255
   15260:	60 e0       	ldi	r22, 0x00	; 0
   15262:	72 e0       	ldi	r23, 0x02	; 2
   15264:	82 ef       	ldi	r24, 0xF2	; 242
   15266:	9c e1       	ldi	r25, 0x1C	; 28
   15268:	0e 94 02 8b 	call	0x11604	; 0x11604 <gpib_read_str>
   1526c:	9b 87       	std	Y+11, r25	; 0x0b
   1526e:	8a 87       	std	Y+10, r24	; 0x0a
   15270:	88 85       	ldd	r24, Y+8	; 0x08
   15272:	99 85       	ldd	r25, Y+9	; 0x09
   15274:	9c 01       	movw	r18, r24
   15276:	22 27       	eor	r18, r18
   15278:	30 7d       	andi	r19, 0xD0	; 208
   1527a:	23 2b       	or	r18, r19
   1527c:	79 f0       	breq	.+30     	; 0x1529c <SS80_Command_State+0x88>
   1527e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15282:	80 ff       	sbrs	r24, 0
   15284:	21 c2       	rjmp	.+1090   	; 0x156c8 <SS80_Command_State+0x4b4>
   15286:	8b ee       	ldi	r24, 0xEB	; 235
   15288:	96 e2       	ldi	r25, 0x26	; 38
   1528a:	a0 e0       	ldi	r26, 0x00	; 0
   1528c:	ed b7       	in	r30, 0x3d	; 61
   1528e:	fe b7       	in	r31, 0x3e	; 62
   15290:	81 83       	std	Z+1, r24	; 0x01
   15292:	92 83       	std	Z+2, r25	; 0x02
   15294:	a3 83       	std	Z+3, r26	; 0x03
   15296:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   1529a:	16 c2       	rjmp	.+1068   	; 0x156c8 <SS80_Command_State+0x4b4>
   1529c:	2a 85       	ldd	r18, Y+10	; 0x0a
   1529e:	3b 85       	ldd	r19, Y+11	; 0x0b
   152a0:	23 2b       	or	r18, r19
   152a2:	09 f4       	brne	.+2      	; 0x152a6 <SS80_Command_State+0x92>
   152a4:	16 c2       	rjmp	.+1068   	; 0x156d2 <SS80_Command_State+0x4be>
   152a6:	90 fd       	sbrc	r25, 0
   152a8:	0e c0       	rjmp	.+28     	; 0x152c6 <SS80_Command_State+0xb2>
   152aa:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   152ae:	80 ff       	sbrs	r24, 0
   152b0:	0a c0       	rjmp	.+20     	; 0x152c6 <SS80_Command_State+0xb2>
   152b2:	82 ed       	ldi	r24, 0xD2	; 210
   152b4:	96 e2       	ldi	r25, 0x26	; 38
   152b6:	a0 e0       	ldi	r26, 0x00	; 0
   152b8:	ed b7       	in	r30, 0x3d	; 61
   152ba:	fe b7       	in	r31, 0x3e	; 62
   152bc:	81 83       	std	Z+1, r24	; 0x01
   152be:	92 83       	std	Z+2, r25	; 0x02
   152c0:	a3 83       	std	Z+3, r26	; 0x03
   152c2:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   152c6:	e1 2c       	mov	r14, r1
   152c8:	f1 2c       	mov	r15, r1
   152ca:	86 ed       	ldi	r24, 0xD6	; 214
   152cc:	95 e2       	ldi	r25, 0x25	; 37
   152ce:	9c 01       	movw	r18, r24
   152d0:	40 e0       	ldi	r20, 0x00	; 0
   152d2:	2e 87       	std	Y+14, r18	; 0x0e
   152d4:	3f 87       	std	Y+15, r19	; 0x0f
   152d6:	48 8b       	std	Y+16, r20	; 0x10
   152d8:	8b ef       	ldi	r24, 0xFB	; 251
   152da:	95 e2       	ldi	r25, 0x25	; 37
   152dc:	9c 01       	movw	r18, r24
   152de:	40 e0       	ldi	r20, 0x00	; 0
   152e0:	29 8b       	std	Y+17, r18	; 0x11
   152e2:	3a 8b       	std	Y+18, r19	; 0x12
   152e4:	4b 8b       	std	Y+19, r20	; 0x13
   152e6:	85 e1       	ldi	r24, 0x15	; 21
   152e8:	96 e2       	ldi	r25, 0x26	; 38
   152ea:	9c 01       	movw	r18, r24
   152ec:	40 e0       	ldi	r20, 0x00	; 0
   152ee:	2c 8b       	std	Y+20, r18	; 0x14
   152f0:	3d 8b       	std	Y+21, r19	; 0x15
   152f2:	4e 8b       	std	Y+22, r20	; 0x16
   152f4:	8b e2       	ldi	r24, 0x2B	; 43
   152f6:	96 e2       	ldi	r25, 0x26	; 38
   152f8:	3c 01       	movw	r6, r24
   152fa:	81 2c       	mov	r8, r1
   152fc:	89 e3       	ldi	r24, 0x39	; 57
   152fe:	96 e2       	ldi	r25, 0x26	; 38
   15300:	5c 01       	movw	r10, r24
   15302:	c1 2c       	mov	r12, r1
   15304:	85 e5       	ldi	r24, 0x55	; 85
   15306:	96 e2       	ldi	r25, 0x26	; 38
   15308:	1c 01       	movw	r2, r24
   1530a:	41 2c       	mov	r4, r1
   1530c:	2a 85       	ldd	r18, Y+10	; 0x0a
   1530e:	3b 85       	ldd	r19, Y+11	; 0x0b
   15310:	87 01       	movw	r16, r14
   15312:	e2 16       	cp	r14, r18
   15314:	f3 06       	cpc	r15, r19
   15316:	0c f0       	brlt	.+2      	; 0x1531a <SS80_Command_State+0x106>
   15318:	b6 c1       	rjmp	.+876    	; 0x15686 <SS80_Command_State+0x472>
   1531a:	0f 5f       	subi	r16, 0xFF	; 255
   1531c:	1f 4f       	sbci	r17, 0xFF	; 255
   1531e:	f7 01       	movw	r30, r14
   15320:	ee 50       	subi	r30, 0x0E	; 14
   15322:	f3 4e       	sbci	r31, 0xE3	; 227
   15324:	80 81       	ld	r24, Z
   15326:	28 2f       	mov	r18, r24
   15328:	30 e0       	ldi	r19, 0x00	; 0
   1532a:	a9 01       	movw	r20, r18
   1532c:	40 52       	subi	r20, 0x20	; 32
   1532e:	51 09       	sbc	r21, r1
   15330:	40 31       	cpi	r20, 0x10	; 16
   15332:	51 05       	cpc	r21, r1
   15334:	98 f4       	brcc	.+38     	; 0x1535c <SS80_Command_State+0x148>
   15336:	80 52       	subi	r24, 0x20	; 32
   15338:	1d df       	rcall	.-454    	; 0x15174 <SS80_Check_Unit>
   1533a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1533e:	85 ff       	sbrs	r24, 5
   15340:	a0 c1       	rjmp	.+832    	; 0x15682 <SS80_Command_State+0x46e>
   15342:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   15346:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   1534a:	85 81       	ldd	r24, Z+5	; 0x05
   1534c:	90 e0       	ldi	r25, 0x00	; 0
   1534e:	ed b7       	in	r30, 0x3d	; 61
   15350:	fe b7       	in	r31, 0x3e	; 62
   15352:	95 83       	std	Z+5, r25	; 0x05
   15354:	84 83       	std	Z+4, r24	; 0x04
   15356:	8c eb       	ldi	r24, 0xBC	; 188
   15358:	96 e2       	ldi	r25, 0x26	; 38
   1535a:	19 c0       	rjmp	.+50     	; 0x1538e <SS80_Command_State+0x17a>
   1535c:	a9 01       	movw	r20, r18
   1535e:	40 54       	subi	r20, 0x40	; 64
   15360:	51 09       	sbc	r21, r1
   15362:	40 31       	cpi	r20, 0x10	; 16
   15364:	51 05       	cpc	r21, r1
   15366:	d0 f4       	brcc	.+52     	; 0x1539c <SS80_Command_State+0x188>
   15368:	80 54       	subi	r24, 0x40	; 64
   1536a:	2d df       	rcall	.-422    	; 0x151c6 <SS80_Check_Volume>
   1536c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15370:	85 ff       	sbrs	r24, 5
   15372:	87 c1       	rjmp	.+782    	; 0x15682 <SS80_Command_State+0x46e>
   15374:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   15378:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   1537c:	86 81       	ldd	r24, Z+6	; 0x06
   1537e:	90 e0       	ldi	r25, 0x00	; 0
   15380:	ed b7       	in	r30, 0x3d	; 61
   15382:	fe b7       	in	r31, 0x3e	; 62
   15384:	95 83       	std	Z+5, r25	; 0x05
   15386:	84 83       	std	Z+4, r24	; 0x04
   15388:	23 ea       	ldi	r18, 0xA3	; 163
   1538a:	36 e2       	ldi	r19, 0x26	; 38
   1538c:	c9 01       	movw	r24, r18
   1538e:	a0 e0       	ldi	r26, 0x00	; 0
   15390:	81 83       	std	Z+1, r24	; 0x01
   15392:	92 83       	std	Z+2, r25	; 0x02
   15394:	a3 83       	std	Z+3, r26	; 0x03
   15396:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   1539a:	73 c1       	rjmp	.+742    	; 0x15682 <SS80_Command_State+0x46e>
   1539c:	21 15       	cp	r18, r1
   1539e:	31 05       	cpc	r19, r1
   153a0:	79 f4       	brne	.+30     	; 0x153c0 <SS80_Command_State+0x1ac>
   153a2:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   153a6:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   153aa:	81 e0       	ldi	r24, 0x01	; 1
   153ac:	90 e0       	ldi	r25, 0x00	; 0
   153ae:	91 83       	std	Z+1, r25	; 0x01
   153b0:	80 83       	st	Z, r24
   153b2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   153b6:	85 ff       	sbrs	r24, 5
   153b8:	66 c1       	rjmp	.+716    	; 0x15686 <SS80_Command_State+0x472>
   153ba:	8b e8       	ldi	r24, 0x8B	; 139
   153bc:	96 e2       	ldi	r25, 0x26	; 38
   153be:	0f c0       	rjmp	.+30     	; 0x153de <SS80_Command_State+0x1ca>
   153c0:	22 30       	cpi	r18, 0x02	; 2
   153c2:	31 05       	cpc	r19, r1
   153c4:	a9 f4       	brne	.+42     	; 0x153f0 <SS80_Command_State+0x1dc>
   153c6:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   153ca:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   153ce:	31 83       	std	Z+1, r19	; 0x01
   153d0:	20 83       	st	Z, r18
   153d2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   153d6:	85 ff       	sbrs	r24, 5
   153d8:	56 c1       	rjmp	.+684    	; 0x15686 <SS80_Command_State+0x472>
   153da:	82 e7       	ldi	r24, 0x72	; 114
   153dc:	96 e2       	ldi	r25, 0x26	; 38
   153de:	a0 e0       	ldi	r26, 0x00	; 0
   153e0:	ed b7       	in	r30, 0x3d	; 61
   153e2:	fe b7       	in	r31, 0x3e	; 62
   153e4:	81 83       	std	Z+1, r24	; 0x01
   153e6:	92 83       	std	Z+2, r25	; 0x02
   153e8:	a3 83       	std	Z+3, r26	; 0x03
   153ea:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   153ee:	4b c1       	rjmp	.+662    	; 0x15686 <SS80_Command_State+0x472>
   153f0:	20 31       	cpi	r18, 0x10	; 16
   153f2:	31 05       	cpc	r19, r1
   153f4:	b1 f5       	brne	.+108    	; 0x15462 <SS80_Command_State+0x24e>
   153f6:	20 91 6e 19 	lds	r18, 0x196E	; 0x80196e <SS80s>
   153fa:	30 91 6f 19 	lds	r19, 0x196F	; 0x80196f <SS80s+0x1>
   153fe:	3d 87       	std	Y+13, r19	; 0x0d
   15400:	2c 87       	std	Y+12, r18	; 0x0c
   15402:	46 e0       	ldi	r20, 0x06	; 6
   15404:	50 e0       	ldi	r21, 0x00	; 0
   15406:	b8 01       	movw	r22, r16
   15408:	82 ef       	ldi	r24, 0xF2	; 242
   1540a:	9c e1       	ldi	r25, 0x1C	; 28
   1540c:	0e 94 8c c0 	call	0x18118	; 0x18118 <B2V_MSB>
   15410:	ec 85       	ldd	r30, Y+12	; 0x0c
   15412:	fd 85       	ldd	r31, Y+13	; 0x0d
   15414:	67 83       	std	Z+7, r22	; 0x07
   15416:	70 87       	std	Z+8, r23	; 0x08
   15418:	81 87       	std	Z+9, r24	; 0x09
   1541a:	92 87       	std	Z+10, r25	; 0x0a
   1541c:	87 01       	movw	r16, r14
   1541e:	09 5f       	subi	r16, 0xF9	; 249
   15420:	1f 4f       	sbci	r17, 0xFF	; 255
   15422:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15426:	85 ff       	sbrs	r24, 5
   15428:	2c c1       	rjmp	.+600    	; 0x15682 <SS80_Command_State+0x46e>
   1542a:	20 91 6e 19 	lds	r18, 0x196E	; 0x80196e <SS80s>
   1542e:	30 91 6f 19 	lds	r19, 0x196F	; 0x80196f <SS80s+0x1>
   15432:	80 91 70 19 	lds	r24, 0x1970	; 0x801970 <SS80p>
   15436:	90 91 71 19 	lds	r25, 0x1971	; 0x801971 <SS80p+0x1>
   1543a:	fc 01       	movw	r30, r24
   1543c:	a2 89       	ldd	r26, Z+18	; 0x12
   1543e:	b3 89       	ldd	r27, Z+19	; 0x13
   15440:	f9 01       	movw	r30, r18
   15442:	27 81       	ldd	r18, Z+7	; 0x07
   15444:	30 85       	ldd	r19, Z+8	; 0x08
   15446:	41 85       	ldd	r20, Z+9	; 0x09
   15448:	52 85       	ldd	r21, Z+10	; 0x0a
   1544a:	0e 94 df e6 	call	0x1cdbe	; 0x1cdbe <__muluhisi3>
   1544e:	ed b7       	in	r30, 0x3d	; 61
   15450:	fe b7       	in	r31, 0x3e	; 62
   15452:	64 83       	std	Z+4, r22	; 0x04
   15454:	75 83       	std	Z+5, r23	; 0x05
   15456:	86 83       	std	Z+6, r24	; 0x06
   15458:	97 83       	std	Z+7, r25	; 0x07
   1545a:	21 82       	std	Z+1, r2	; 0x01
   1545c:	32 82       	std	Z+2, r3	; 0x02
   1545e:	43 82       	std	Z+3, r4	; 0x03
   15460:	2e c0       	rjmp	.+92     	; 0x154be <SS80_Command_State+0x2aa>
   15462:	28 31       	cpi	r18, 0x18	; 24
   15464:	31 05       	cpc	r19, r1
   15466:	71 f5       	brne	.+92     	; 0x154c4 <SS80_Command_State+0x2b0>
   15468:	20 91 6e 19 	lds	r18, 0x196E	; 0x80196e <SS80s>
   1546c:	30 91 6f 19 	lds	r19, 0x196F	; 0x80196f <SS80s+0x1>
   15470:	3d 87       	std	Y+13, r19	; 0x0d
   15472:	2c 87       	std	Y+12, r18	; 0x0c
   15474:	44 e0       	ldi	r20, 0x04	; 4
   15476:	50 e0       	ldi	r21, 0x00	; 0
   15478:	b8 01       	movw	r22, r16
   1547a:	82 ef       	ldi	r24, 0xF2	; 242
   1547c:	9c e1       	ldi	r25, 0x1C	; 28
   1547e:	0e 94 8c c0 	call	0x18118	; 0x18118 <B2V_MSB>
   15482:	ec 85       	ldd	r30, Y+12	; 0x0c
   15484:	fd 85       	ldd	r31, Y+13	; 0x0d
   15486:	63 87       	std	Z+11, r22	; 0x0b
   15488:	74 87       	std	Z+12, r23	; 0x0c
   1548a:	85 87       	std	Z+13, r24	; 0x0d
   1548c:	96 87       	std	Z+14, r25	; 0x0e
   1548e:	87 01       	movw	r16, r14
   15490:	0b 5f       	subi	r16, 0xFB	; 251
   15492:	1f 4f       	sbci	r17, 0xFF	; 255
   15494:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15498:	85 ff       	sbrs	r24, 5
   1549a:	f3 c0       	rjmp	.+486    	; 0x15682 <SS80_Command_State+0x46e>
   1549c:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   154a0:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   154a4:	83 85       	ldd	r24, Z+11	; 0x0b
   154a6:	94 85       	ldd	r25, Z+12	; 0x0c
   154a8:	a5 85       	ldd	r26, Z+13	; 0x0d
   154aa:	b6 85       	ldd	r27, Z+14	; 0x0e
   154ac:	ed b7       	in	r30, 0x3d	; 61
   154ae:	fe b7       	in	r31, 0x3e	; 62
   154b0:	84 83       	std	Z+4, r24	; 0x04
   154b2:	95 83       	std	Z+5, r25	; 0x05
   154b4:	a6 83       	std	Z+6, r26	; 0x06
   154b6:	b7 83       	std	Z+7, r27	; 0x07
   154b8:	a1 82       	std	Z+1, r10	; 0x01
   154ba:	b2 82       	std	Z+2, r11	; 0x02
   154bc:	c3 82       	std	Z+3, r12	; 0x03
   154be:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   154c2:	df c0       	rjmp	.+446    	; 0x15682 <SS80_Command_State+0x46e>
   154c4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   154c8:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   154cc:	24 33       	cpi	r18, 0x34	; 52
   154ce:	31 05       	cpc	r19, r1
   154d0:	41 f4       	brne	.+16     	; 0x154e2 <SS80_Command_State+0x2ce>
   154d2:	85 ff       	sbrs	r24, 5
   154d4:	d6 c0       	rjmp	.+428    	; 0x15682 <SS80_Command_State+0x46e>
   154d6:	ed b7       	in	r30, 0x3d	; 61
   154d8:	fe b7       	in	r31, 0x3e	; 62
   154da:	61 82       	std	Z+1, r6	; 0x01
   154dc:	72 82       	std	Z+2, r7	; 0x02
   154de:	83 82       	std	Z+3, r8	; 0x03
   154e0:	2b c0       	rjmp	.+86     	; 0x15538 <SS80_Command_State+0x324>
   154e2:	29 33       	cpi	r18, 0x39	; 57
   154e4:	31 05       	cpc	r19, r1
   154e6:	49 f4       	brne	.+18     	; 0x154fa <SS80_Command_State+0x2e6>
   154e8:	87 01       	movw	r16, r14
   154ea:	0d 5f       	subi	r16, 0xFD	; 253
   154ec:	1f 4f       	sbci	r17, 0xFF	; 255
   154ee:	85 ff       	sbrs	r24, 5
   154f0:	c8 c0       	rjmp	.+400    	; 0x15682 <SS80_Command_State+0x46e>
   154f2:	2c 89       	ldd	r18, Y+20	; 0x14
   154f4:	3d 89       	ldd	r19, Y+21	; 0x15
   154f6:	4e 89       	ldd	r20, Y+22	; 0x16
   154f8:	1a c0       	rjmp	.+52     	; 0x1552e <SS80_Command_State+0x31a>
   154fa:	2b 33       	cpi	r18, 0x3B	; 59
   154fc:	31 05       	cpc	r19, r1
   154fe:	49 f4       	brne	.+18     	; 0x15512 <SS80_Command_State+0x2fe>
   15500:	87 01       	movw	r16, r14
   15502:	0e 5f       	subi	r16, 0xFE	; 254
   15504:	1f 4f       	sbci	r17, 0xFF	; 255
   15506:	85 ff       	sbrs	r24, 5
   15508:	bc c0       	rjmp	.+376    	; 0x15682 <SS80_Command_State+0x46e>
   1550a:	29 89       	ldd	r18, Y+17	; 0x11
   1550c:	3a 89       	ldd	r19, Y+18	; 0x12
   1550e:	4b 89       	ldd	r20, Y+19	; 0x13
   15510:	0e c0       	rjmp	.+28     	; 0x1552e <SS80_Command_State+0x31a>
   15512:	28 34       	cpi	r18, 0x48	; 72
   15514:	31 05       	cpc	r19, r1
   15516:	99 f4       	brne	.+38     	; 0x1553e <SS80_Command_State+0x32a>
   15518:	87 01       	movw	r16, r14
   1551a:	0e 5f       	subi	r16, 0xFE	; 254
   1551c:	1f 4f       	sbci	r17, 0xFF	; 255
   1551e:	80 73       	andi	r24, 0x30	; 48
   15520:	99 27       	eor	r25, r25
   15522:	89 2b       	or	r24, r25
   15524:	09 f4       	brne	.+2      	; 0x15528 <SS80_Command_State+0x314>
   15526:	ad c0       	rjmp	.+346    	; 0x15682 <SS80_Command_State+0x46e>
   15528:	2e 85       	ldd	r18, Y+14	; 0x0e
   1552a:	3f 85       	ldd	r19, Y+15	; 0x0f
   1552c:	48 89       	ldd	r20, Y+16	; 0x10
   1552e:	ed b7       	in	r30, 0x3d	; 61
   15530:	fe b7       	in	r31, 0x3e	; 62
   15532:	21 83       	std	Z+1, r18	; 0x01
   15534:	32 83       	std	Z+2, r19	; 0x02
   15536:	43 83       	std	Z+3, r20	; 0x03
   15538:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   1553c:	a2 c0       	rjmp	.+324    	; 0x15682 <SS80_Command_State+0x46e>
   1553e:	24 30       	cpi	r18, 0x04	; 4
   15540:	31 05       	cpc	r19, r1
   15542:	41 f4       	brne	.+16     	; 0x15554 <SS80_Command_State+0x340>
   15544:	80 73       	andi	r24, 0x30	; 48
   15546:	99 27       	eor	r25, r25
   15548:	89 2b       	or	r24, r25
   1554a:	09 f4       	brne	.+2      	; 0x1554e <SS80_Command_State+0x33a>
   1554c:	9c c0       	rjmp	.+312    	; 0x15686 <SS80_Command_State+0x472>
   1554e:	85 eb       	ldi	r24, 0xB5	; 181
   15550:	95 e2       	ldi	r25, 0x25	; 37
   15552:	45 cf       	rjmp	.-374    	; 0x153de <SS80_Command_State+0x1ca>
   15554:	2e 30       	cpi	r18, 0x0E	; 14
   15556:	31 05       	cpc	r19, r1
   15558:	29 f4       	brne	.+10     	; 0x15564 <SS80_Command_State+0x350>
   1555a:	85 ff       	sbrs	r24, 5
   1555c:	94 c0       	rjmp	.+296    	; 0x15686 <SS80_Command_State+0x472>
   1555e:	8f e9       	ldi	r24, 0x9F	; 159
   15560:	95 e2       	ldi	r25, 0x25	; 37
   15562:	3d cf       	rjmp	.-390    	; 0x153de <SS80_Command_State+0x1ca>
   15564:	2f 30       	cpi	r18, 0x0F	; 15
   15566:	31 05       	cpc	r19, r1
   15568:	29 f4       	brne	.+10     	; 0x15574 <SS80_Command_State+0x360>
   1556a:	85 ff       	sbrs	r24, 5
   1556c:	8c c0       	rjmp	.+280    	; 0x15686 <SS80_Command_State+0x472>
   1556e:	82 e8       	ldi	r24, 0x82	; 130
   15570:	95 e2       	ldi	r25, 0x25	; 37
   15572:	35 cf       	rjmp	.-406    	; 0x153de <SS80_Command_State+0x1ca>
   15574:	21 33       	cpi	r18, 0x31	; 49
   15576:	31 05       	cpc	r19, r1
   15578:	59 f4       	brne	.+22     	; 0x15590 <SS80_Command_State+0x37c>
   1557a:	87 01       	movw	r16, r14
   1557c:	0d 5f       	subi	r16, 0xFD	; 253
   1557e:	1f 4f       	sbci	r17, 0xFF	; 255
   15580:	80 73       	andi	r24, 0x30	; 48
   15582:	99 27       	eor	r25, r25
   15584:	89 2b       	or	r24, r25
   15586:	09 f4       	brne	.+2      	; 0x1558a <SS80_Command_State+0x376>
   15588:	7e c0       	rjmp	.+252    	; 0x15686 <SS80_Command_State+0x472>
   1558a:	86 e6       	ldi	r24, 0x66	; 102
   1558c:	95 e2       	ldi	r25, 0x25	; 37
   1558e:	27 cf       	rjmp	.-434    	; 0x153de <SS80_Command_State+0x1ca>
   15590:	25 33       	cpi	r18, 0x35	; 53
   15592:	31 05       	cpc	r19, r1
   15594:	69 f4       	brne	.+26     	; 0x155b0 <SS80_Command_State+0x39c>
   15596:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   1559a:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   1559e:	24 e0       	ldi	r18, 0x04	; 4
   155a0:	30 e0       	ldi	r19, 0x00	; 0
   155a2:	31 83       	std	Z+1, r19	; 0x01
   155a4:	20 83       	st	Z, r18
   155a6:	85 ff       	sbrs	r24, 5
   155a8:	6e c0       	rjmp	.+220    	; 0x15686 <SS80_Command_State+0x472>
   155aa:	85 e5       	ldi	r24, 0x55	; 85
   155ac:	95 e2       	ldi	r25, 0x25	; 37
   155ae:	17 cf       	rjmp	.-466    	; 0x153de <SS80_Command_State+0x1ca>
   155b0:	27 33       	cpi	r18, 0x37	; 55
   155b2:	31 05       	cpc	r19, r1
   155b4:	59 f4       	brne	.+22     	; 0x155cc <SS80_Command_State+0x3b8>
   155b6:	87 01       	movw	r16, r14
   155b8:	0d 5f       	subi	r16, 0xFD	; 253
   155ba:	1f 4f       	sbci	r17, 0xFF	; 255
   155bc:	80 73       	andi	r24, 0x30	; 48
   155be:	99 27       	eor	r25, r25
   155c0:	89 2b       	or	r24, r25
   155c2:	09 f4       	brne	.+2      	; 0x155c6 <SS80_Command_State+0x3b2>
   155c4:	60 c0       	rjmp	.+192    	; 0x15686 <SS80_Command_State+0x472>
   155c6:	87 e3       	ldi	r24, 0x37	; 55
   155c8:	95 e2       	ldi	r25, 0x25	; 37
   155ca:	09 cf       	rjmp	.-494    	; 0x153de <SS80_Command_State+0x1ca>
   155cc:	2e 33       	cpi	r18, 0x3E	; 62
   155ce:	31 05       	cpc	r19, r1
   155d0:	c1 f4       	brne	.+48     	; 0x15602 <SS80_Command_State+0x3ee>
   155d2:	80 73       	andi	r24, 0x30	; 48
   155d4:	99 27       	eor	r25, r25
   155d6:	89 2b       	or	r24, r25
   155d8:	81 f0       	breq	.+32     	; 0x155fa <SS80_Command_State+0x3e6>
   155da:	88 e1       	ldi	r24, 0x18	; 24
   155dc:	95 e2       	ldi	r25, 0x25	; 37
   155de:	a0 e0       	ldi	r26, 0x00	; 0
   155e0:	ed b7       	in	r30, 0x3d	; 61
   155e2:	fe b7       	in	r31, 0x3e	; 62
   155e4:	81 83       	std	Z+1, r24	; 0x01
   155e6:	92 83       	std	Z+2, r25	; 0x02
   155e8:	a3 83       	std	Z+3, r26	; 0x03
   155ea:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   155ee:	64 e7       	ldi	r22, 0x74	; 116
   155f0:	70 e1       	ldi	r23, 0x10	; 16
   155f2:	c8 01       	movw	r24, r16
   155f4:	8e 50       	subi	r24, 0x0E	; 14
   155f6:	93 4e       	sbci	r25, 0xE3	; 227
   155f8:	69 dc       	rcall	.-1838   	; 0x14ecc <SS80_display_extended_status>
   155fa:	87 01       	movw	r16, r14
   155fc:	07 5f       	subi	r16, 0xF7	; 247
   155fe:	1f 4f       	sbci	r17, 0xFF	; 255
   15600:	42 c0       	rjmp	.+132    	; 0x15686 <SS80_Command_State+0x472>
   15602:	2c 34       	cpi	r18, 0x4C	; 76
   15604:	31 05       	cpc	r19, r1
   15606:	39 f4       	brne	.+14     	; 0x15616 <SS80_Command_State+0x402>
   15608:	80 73       	andi	r24, 0x30	; 48
   1560a:	99 27       	eor	r25, r25
   1560c:	89 2b       	or	r24, r25
   1560e:	d9 f1       	breq	.+118    	; 0x15686 <SS80_Command_State+0x472>
   15610:	8d ef       	ldi	r24, 0xFD	; 253
   15612:	94 e2       	ldi	r25, 0x24	; 36
   15614:	e4 ce       	rjmp	.-568    	; 0x153de <SS80_Command_State+0x1ca>
   15616:	2d 34       	cpi	r18, 0x4D	; 77
   15618:	31 05       	cpc	r19, r1
   1561a:	39 f4       	brne	.+14     	; 0x1562a <SS80_Command_State+0x416>
   1561c:	80 73       	andi	r24, 0x30	; 48
   1561e:	99 27       	eor	r25, r25
   15620:	89 2b       	or	r24, r25
   15622:	89 f1       	breq	.+98     	; 0x15686 <SS80_Command_State+0x472>
   15624:	84 ee       	ldi	r24, 0xE4	; 228
   15626:	94 e2       	ldi	r25, 0x24	; 36
   15628:	da ce       	rjmp	.-588    	; 0x153de <SS80_Command_State+0x1ca>
   1562a:	2d 30       	cpi	r18, 0x0D	; 13
   1562c:	31 05       	cpc	r19, r1
   1562e:	69 f4       	brne	.+26     	; 0x1564a <SS80_Command_State+0x436>
   15630:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   15634:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   15638:	23 e0       	ldi	r18, 0x03	; 3
   1563a:	30 e0       	ldi	r19, 0x00	; 0
   1563c:	31 83       	std	Z+1, r19	; 0x01
   1563e:	20 83       	st	Z, r18
   15640:	85 ff       	sbrs	r24, 5
   15642:	21 c0       	rjmp	.+66     	; 0x15686 <SS80_Command_State+0x472>
   15644:	8d ec       	ldi	r24, 0xCD	; 205
   15646:	94 e2       	ldi	r25, 0x24	; 36
   15648:	ca ce       	rjmp	.-620    	; 0x153de <SS80_Command_State+0x1ca>
   1564a:	23 33       	cpi	r18, 0x33	; 51
   1564c:	31 05       	cpc	r19, r1
   1564e:	51 f4       	brne	.+20     	; 0x15664 <SS80_Command_State+0x450>
   15650:	87 01       	movw	r16, r14
   15652:	0c 5f       	subi	r16, 0xFC	; 252
   15654:	1f 4f       	sbci	r17, 0xFF	; 255
   15656:	80 73       	andi	r24, 0x30	; 48
   15658:	99 27       	eor	r25, r25
   1565a:	89 2b       	or	r24, r25
   1565c:	a1 f0       	breq	.+40     	; 0x15686 <SS80_Command_State+0x472>
   1565e:	8a ea       	ldi	r24, 0xAA	; 170
   15660:	94 e2       	ldi	r25, 0x24	; 36
   15662:	bd ce       	rjmp	.-646    	; 0x153de <SS80_Command_State+0x1ca>
   15664:	80 ff       	sbrs	r24, 0
   15666:	28 c0       	rjmp	.+80     	; 0x156b8 <SS80_Command_State+0x4a4>
   15668:	ed b7       	in	r30, 0x3d	; 61
   1566a:	fe b7       	in	r31, 0x3e	; 62
   1566c:	35 83       	std	Z+5, r19	; 0x05
   1566e:	24 83       	std	Z+4, r18	; 0x04
   15670:	8a e8       	ldi	r24, 0x8A	; 138
   15672:	94 e2       	ldi	r25, 0x24	; 36
   15674:	a0 e0       	ldi	r26, 0x00	; 0
   15676:	81 83       	std	Z+1, r24	; 0x01
   15678:	92 83       	std	Z+2, r25	; 0x02
   1567a:	a3 83       	std	Z+3, r26	; 0x03
   1567c:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   15680:	02 c0       	rjmp	.+4      	; 0x15686 <SS80_Command_State+0x472>
   15682:	78 01       	movw	r14, r16
   15684:	43 ce       	rjmp	.-890    	; 0x1530c <SS80_Command_State+0xf8>
   15686:	8a 85       	ldd	r24, Y+10	; 0x0a
   15688:	9b 85       	ldd	r25, Y+11	; 0x0b
   1568a:	08 17       	cp	r16, r24
   1568c:	19 07       	cpc	r17, r25
   1568e:	a1 f0       	breq	.+40     	; 0x156b8 <SS80_Command_State+0x4a4>
   15690:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15694:	80 ff       	sbrs	r24, 0
   15696:	10 c0       	rjmp	.+32     	; 0x156b8 <SS80_Command_State+0x4a4>
   15698:	2a 85       	ldd	r18, Y+10	; 0x0a
   1569a:	3b 85       	ldd	r19, Y+11	; 0x0b
   1569c:	ed b7       	in	r30, 0x3d	; 61
   1569e:	fe b7       	in	r31, 0x3e	; 62
   156a0:	37 83       	std	Z+7, r19	; 0x07
   156a2:	26 83       	std	Z+6, r18	; 0x06
   156a4:	15 83       	std	Z+5, r17	; 0x05
   156a6:	04 83       	std	Z+4, r16	; 0x04
   156a8:	82 e5       	ldi	r24, 0x52	; 82
   156aa:	94 e2       	ldi	r25, 0x24	; 36
   156ac:	a0 e0       	ldi	r26, 0x00	; 0
   156ae:	81 83       	std	Z+1, r24	; 0x01
   156b0:	92 83       	std	Z+2, r25	; 0x02
   156b2:	a3 83       	std	Z+3, r26	; 0x03
   156b4:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   156b8:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   156bc:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   156c0:	81 81       	ldd	r24, Z+1	; 0x01
   156c2:	90 e0       	ldi	r25, 0x00	; 0
   156c4:	0e 94 74 86 	call	0x10ce8	; 0x10ce8 <gpib_enable_PPR>
   156c8:	88 85       	ldd	r24, Y+8	; 0x08
   156ca:	99 85       	ldd	r25, Y+9	; 0x09
   156cc:	88 27       	eor	r24, r24
   156ce:	90 7d       	andi	r25, 0xD0	; 208
   156d0:	02 c0       	rjmp	.+4      	; 0x156d6 <SS80_Command_State+0x4c2>
   156d2:	80 e0       	ldi	r24, 0x00	; 0
   156d4:	90 e0       	ldi	r25, 0x00	; 0
   156d6:	66 96       	adiw	r28, 0x16	; 22
   156d8:	0f b6       	in	r0, 0x3f	; 63
   156da:	f8 94       	cli
   156dc:	de bf       	out	0x3e, r29	; 62
   156de:	0f be       	out	0x3f, r0	; 63
   156e0:	cd bf       	out	0x3d, r28	; 61
   156e2:	df 91       	pop	r29
   156e4:	cf 91       	pop	r28
   156e6:	1f 91       	pop	r17
   156e8:	0f 91       	pop	r16
   156ea:	ff 90       	pop	r15
   156ec:	ef 90       	pop	r14
   156ee:	cf 90       	pop	r12
   156f0:	bf 90       	pop	r11
   156f2:	af 90       	pop	r10
   156f4:	8f 90       	pop	r8
   156f6:	7f 90       	pop	r7
   156f8:	6f 90       	pop	r6
   156fa:	4f 90       	pop	r4
   156fc:	3f 90       	pop	r3
   156fe:	2f 90       	pop	r2
   15700:	08 95       	ret

00015702 <SS80_cmd_seek>:
   15702:	a7 e0       	ldi	r26, 0x07	; 7
   15704:	b0 e0       	ldi	r27, 0x00	; 0
   15706:	e7 e8       	ldi	r30, 0x87	; 135
   15708:	fb ea       	ldi	r31, 0xAB	; 171
   1570a:	0c 94 01 e7 	jmp	0x1ce02	; 0x1ce02 <__prologue_saves__+0x4>
   1570e:	c0 91 6e 19 	lds	r28, 0x196E	; 0x80196e <SS80s>
   15712:	d0 91 6f 19 	lds	r29, 0x196F	; 0x80196f <SS80s+0x1>
   15716:	8f 80       	ldd	r8, Y+7	; 0x07
   15718:	98 84       	ldd	r9, Y+8	; 0x08
   1571a:	a9 84       	ldd	r10, Y+9	; 0x09
   1571c:	ba 84       	ldd	r11, Y+10	; 0x0a
   1571e:	00 91 70 19 	lds	r16, 0x1970	; 0x801970 <SS80p>
   15722:	10 91 71 19 	lds	r17, 0x1971	; 0x801971 <SS80p+0x1>
   15726:	f8 01       	movw	r30, r16
   15728:	c2 88       	ldd	r12, Z+18	; 0x12
   1572a:	d3 88       	ldd	r13, Z+19	; 0x13
   1572c:	e1 2c       	mov	r14, r1
   1572e:	f1 2c       	mov	r15, r1
   15730:	6b 85       	ldd	r22, Y+11	; 0x0b
   15732:	7c 85       	ldd	r23, Y+12	; 0x0c
   15734:	8d 85       	ldd	r24, Y+13	; 0x0d
   15736:	9e 85       	ldd	r25, Y+14	; 0x0e
   15738:	a7 01       	movw	r20, r14
   1573a:	96 01       	movw	r18, r12
   1573c:	0e 94 92 e6 	call	0x1cd24	; 0x1cd24 <__udivmodsi4>
   15740:	da 01       	movw	r26, r20
   15742:	c9 01       	movw	r24, r18
   15744:	88 0d       	add	r24, r8
   15746:	99 1d       	adc	r25, r9
   15748:	aa 1d       	adc	r26, r10
   1574a:	bb 1d       	adc	r27, r11
   1574c:	f8 01       	movw	r30, r16
   1574e:	40 a4       	ldd	r4, Z+40	; 0x28
   15750:	51 a4       	ldd	r5, Z+41	; 0x29
   15752:	62 a4       	ldd	r6, Z+42	; 0x2a
   15754:	73 a4       	ldd	r7, Z+43	; 0x2b
   15756:	40 91 b6 01 	lds	r20, 0x01B6	; 0x8001b6 <debuglevel>
   1575a:	50 91 b7 01 	lds	r21, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1575e:	48 16       	cp	r4, r24
   15760:	59 06       	cpc	r5, r25
   15762:	6a 06       	cpc	r6, r26
   15764:	7b 06       	cpc	r7, r27
   15766:	f0 f4       	brcc	.+60     	; 0x157a4 <SS80_cmd_seek+0xa2>
   15768:	81 e0       	ldi	r24, 0x01	; 1
   1576a:	8a 83       	std	Y+2, r24	; 0x02
   1576c:	8b 81       	ldd	r24, Y+3	; 0x03
   1576e:	9c 81       	ldd	r25, Y+4	; 0x04
   15770:	84 60       	ori	r24, 0x04	; 4
   15772:	9c 83       	std	Y+4, r25	; 0x04
   15774:	8b 83       	std	Y+3, r24	; 0x03
   15776:	40 ff       	sbrs	r20, 0
   15778:	31 c0       	rjmp	.+98     	; 0x157dc <SS80_cmd_seek+0xda>
   1577a:	a2 89       	ldd	r26, Z+18	; 0x12
   1577c:	b3 89       	ldd	r27, Z+19	; 0x13
   1577e:	a5 01       	movw	r20, r10
   15780:	94 01       	movw	r18, r8
   15782:	0e 94 df e6 	call	0x1cdbe	; 0x1cdbe <__muluhisi3>
   15786:	ed b7       	in	r30, 0x3d	; 61
   15788:	fe b7       	in	r31, 0x3e	; 62
   1578a:	64 83       	std	Z+4, r22	; 0x04
   1578c:	75 83       	std	Z+5, r23	; 0x05
   1578e:	86 83       	std	Z+6, r24	; 0x06
   15790:	97 83       	std	Z+7, r25	; 0x07
   15792:	8f e0       	ldi	r24, 0x0F	; 15
   15794:	93 e2       	ldi	r25, 0x23	; 35
   15796:	a0 e0       	ldi	r26, 0x00	; 0
   15798:	81 83       	std	Z+1, r24	; 0x01
   1579a:	92 83       	std	Z+2, r25	; 0x02
   1579c:	a3 83       	std	Z+3, r26	; 0x03
   1579e:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   157a2:	1c c0       	rjmp	.+56     	; 0x157dc <SS80_cmd_seek+0xda>
   157a4:	ca 01       	movw	r24, r20
   157a6:	80 72       	andi	r24, 0x20	; 32
   157a8:	99 27       	eor	r25, r25
   157aa:	45 ff       	sbrs	r20, 5
   157ac:	19 c0       	rjmp	.+50     	; 0x157e0 <SS80_cmd_seek+0xde>
   157ae:	a5 01       	movw	r20, r10
   157b0:	94 01       	movw	r18, r8
   157b2:	c7 01       	movw	r24, r14
   157b4:	b6 01       	movw	r22, r12
   157b6:	0e 94 50 e6 	call	0x1cca0	; 0x1cca0 <__mulsi3>
   157ba:	ed b7       	in	r30, 0x3d	; 61
   157bc:	fe b7       	in	r31, 0x3e	; 62
   157be:	64 83       	std	Z+4, r22	; 0x04
   157c0:	75 83       	std	Z+5, r23	; 0x05
   157c2:	86 83       	std	Z+6, r24	; 0x06
   157c4:	97 83       	std	Z+7, r25	; 0x07
   157c6:	8b ef       	ldi	r24, 0xFB	; 251
   157c8:	92 e2       	ldi	r25, 0x22	; 34
   157ca:	a0 e0       	ldi	r26, 0x00	; 0
   157cc:	81 83       	std	Z+1, r24	; 0x01
   157ce:	92 83       	std	Z+2, r25	; 0x02
   157d0:	a3 83       	std	Z+3, r26	; 0x03
   157d2:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   157d6:	80 e0       	ldi	r24, 0x00	; 0
   157d8:	90 e0       	ldi	r25, 0x00	; 0
   157da:	02 c0       	rjmp	.+4      	; 0x157e0 <SS80_cmd_seek+0xde>
   157dc:	81 e0       	ldi	r24, 0x01	; 1
   157de:	90 e0       	ldi	r25, 0x00	; 0
   157e0:	cd b7       	in	r28, 0x3d	; 61
   157e2:	de b7       	in	r29, 0x3e	; 62
   157e4:	27 96       	adiw	r28, 0x07	; 7
   157e6:	e0 e1       	ldi	r30, 0x10	; 16
   157e8:	0c 94 1d e7 	jmp	0x1ce3a	; 0x1ce3a <__epilogue_restores__+0x4>

000157ec <SS80_locate_and_write>:
   157ec:	a3 e1       	ldi	r26, 0x13	; 19
   157ee:	b0 e0       	ldi	r27, 0x00	; 0
   157f0:	ec ef       	ldi	r30, 0xFC	; 252
   157f2:	fb ea       	ldi	r31, 0xAB	; 171
   157f4:	0c 94 ff e6 	jmp	0x1cdfe	; 0x1cdfe <__prologue_saves__>
   157f8:	00 91 6e 19 	lds	r16, 0x196E	; 0x80196e <SS80s>
   157fc:	10 91 6f 19 	lds	r17, 0x196F	; 0x80196f <SS80s+0x1>
   15800:	80 91 70 19 	lds	r24, 0x1970	; 0x801970 <SS80p>
   15804:	90 91 71 19 	lds	r25, 0x1971	; 0x801971 <SS80p+0x1>
   15808:	fc 01       	movw	r30, r24
   1580a:	a2 89       	ldd	r26, Z+18	; 0x12
   1580c:	b3 89       	ldd	r27, Z+19	; 0x13
   1580e:	f8 01       	movw	r30, r16
   15810:	27 81       	ldd	r18, Z+7	; 0x07
   15812:	30 85       	ldd	r19, Z+8	; 0x08
   15814:	41 85       	ldd	r20, Z+9	; 0x09
   15816:	52 85       	ldd	r21, Z+10	; 0x0a
   15818:	0e 94 df e6 	call	0x1cdbe	; 0x1cdbe <__muluhisi3>
   1581c:	4b 01       	movw	r8, r22
   1581e:	5c 01       	movw	r10, r24
   15820:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15824:	85 ff       	sbrs	r24, 5
   15826:	16 c0       	rjmp	.+44     	; 0x15854 <SS80_locate_and_write+0x68>
   15828:	83 85       	ldd	r24, Z+11	; 0x0b
   1582a:	94 85       	ldd	r25, Z+12	; 0x0c
   1582c:	a5 85       	ldd	r26, Z+13	; 0x0d
   1582e:	b6 85       	ldd	r27, Z+14	; 0x0e
   15830:	ed b7       	in	r30, 0x3d	; 61
   15832:	fe b7       	in	r31, 0x3e	; 62
   15834:	80 87       	std	Z+8, r24	; 0x08
   15836:	91 87       	std	Z+9, r25	; 0x09
   15838:	a2 87       	std	Z+10, r26	; 0x0a
   1583a:	b3 87       	std	Z+11, r27	; 0x0b
   1583c:	84 82       	std	Z+4, r8	; 0x04
   1583e:	95 82       	std	Z+5, r9	; 0x05
   15840:	a6 82       	std	Z+6, r10	; 0x06
   15842:	b7 82       	std	Z+7, r11	; 0x07
   15844:	82 e9       	ldi	r24, 0x92	; 146
   15846:	98 e2       	ldi	r25, 0x28	; 40
   15848:	a0 e0       	ldi	r26, 0x00	; 0
   1584a:	81 83       	std	Z+1, r24	; 0x01
   1584c:	92 83       	std	Z+2, r25	; 0x02
   1584e:	a3 83       	std	Z+3, r26	; 0x03
   15850:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   15854:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   15858:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   1585c:	12 82       	std	Z+2, r1	; 0x02
   1585e:	54 98       	cbi	0x0a, 4	; 10
   15860:	4c 99       	sbic	0x09, 4	; 9
   15862:	03 c0       	rjmp	.+6      	; 0x1586a <SS80_locate_and_write+0x7e>
   15864:	80 e0       	ldi	r24, 0x00	; 0
   15866:	90 e1       	ldi	r25, 0x10	; 16
   15868:	4f c1       	rjmp	.+670    	; 0x15b08 <SS80_locate_and_write+0x31c>
   1586a:	4b df       	rcall	.-362    	; 0x15702 <SS80_cmd_seek>
   1586c:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   15870:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   15874:	89 2b       	or	r24, r25
   15876:	41 f0       	breq	.+16     	; 0x15888 <SS80_locate_and_write+0x9c>
   15878:	83 81       	ldd	r24, Z+3	; 0x03
   1587a:	94 81       	ldd	r25, Z+4	; 0x04
   1587c:	82 60       	ori	r24, 0x02	; 2
   1587e:	94 83       	std	Z+4, r25	; 0x04
   15880:	83 83       	std	Z+3, r24	; 0x03
   15882:	01 e0       	ldi	r16, 0x01	; 1
   15884:	10 e0       	ldi	r17, 0x00	; 0
   15886:	02 c0       	rjmp	.+4      	; 0x1588c <SS80_locate_and_write+0xa0>
   15888:	00 e0       	ldi	r16, 0x00	; 0
   1588a:	10 e0       	ldi	r17, 0x00	; 0
   1588c:	23 84       	ldd	r2, Z+11	; 0x0b
   1588e:	34 84       	ldd	r3, Z+12	; 0x0c
   15890:	1d 86       	std	Y+13, r1	; 0x0d
   15892:	1c 86       	std	Y+12, r1	; 0x0c
   15894:	41 2c       	mov	r4, r1
   15896:	51 2c       	mov	r5, r1
   15898:	32 01       	movw	r6, r4
   1589a:	85 e4       	ldi	r24, 0x45	; 69
   1589c:	98 e2       	ldi	r25, 0x28	; 40
   1589e:	9c 01       	movw	r18, r24
   158a0:	40 e0       	ldi	r20, 0x00	; 0
   158a2:	2e 87       	std	Y+14, r18	; 0x0e
   158a4:	3f 87       	std	Y+15, r19	; 0x0f
   158a6:	48 8b       	std	Y+16, r20	; 0x10
   158a8:	8b e6       	ldi	r24, 0x6B	; 107
   158aa:	98 e2       	ldi	r25, 0x28	; 40
   158ac:	9c 01       	movw	r18, r24
   158ae:	40 e0       	ldi	r20, 0x00	; 0
   158b0:	29 8b       	std	Y+17, r18	; 0x11
   158b2:	3a 8b       	std	Y+18, r19	; 0x12
   158b4:	4b 8b       	std	Y+19, r20	; 0x13
   158b6:	12 14       	cp	r1, r2
   158b8:	13 04       	cpc	r1, r3
   158ba:	0c f0       	brlt	.+2      	; 0x158be <SS80_locate_and_write+0xd2>
   158bc:	f5 c0       	rjmp	.+490    	; 0x15aa8 <SS80_locate_and_write+0x2bc>
   158be:	54 98       	cbi	0x0a, 4	; 10
   158c0:	4c 9b       	sbis	0x09, 4	; 9
   158c2:	d0 cf       	rjmp	.-96     	; 0x15864 <SS80_locate_and_write+0x78>
   158c4:	71 01       	movw	r14, r2
   158c6:	31 e0       	ldi	r19, 0x01	; 1
   158c8:	23 16       	cp	r2, r19
   158ca:	33 06       	cpc	r3, r19
   158cc:	1c f0       	brlt	.+6      	; 0x158d4 <SS80_locate_and_write+0xe8>
   158ce:	e1 2c       	mov	r14, r1
   158d0:	ff 24       	eor	r15, r15
   158d2:	f3 94       	inc	r15
   158d4:	e2 ef       	ldi	r30, 0xF2	; 242
   158d6:	fc e1       	ldi	r31, 0x1C	; 28
   158d8:	20 e0       	ldi	r18, 0x00	; 0
   158da:	32 e0       	ldi	r19, 0x02	; 2
   158dc:	11 92       	st	Z+, r1
   158de:	21 50       	subi	r18, 0x01	; 1
   158e0:	30 40       	sbci	r19, 0x00	; 0
   158e2:	e1 f7       	brne	.-8      	; 0x158dc <SS80_locate_and_write+0xf0>
   158e4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   158e8:	87 fd       	sbrc	r24, 7
   158ea:	0e 94 9a 85 	call	0x10b34	; 0x10b34 <gpib_timer_elapsed_begin>
   158ee:	ae 01       	movw	r20, r28
   158f0:	44 5f       	subi	r20, 0xF4	; 244
   158f2:	5f 4f       	sbci	r21, 0xFF	; 255
   158f4:	b7 01       	movw	r22, r14
   158f6:	82 ef       	ldi	r24, 0xF2	; 242
   158f8:	9c e1       	ldi	r25, 0x1C	; 28
   158fa:	0e 94 02 8b 	call	0x11604	; 0x11604 <gpib_read_str>
   158fe:	6c 01       	movw	r12, r24
   15900:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15904:	87 ff       	sbrs	r24, 7
   15906:	04 c0       	rjmp	.+8      	; 0x15910 <SS80_locate_and_write+0x124>
   15908:	80 e9       	ldi	r24, 0x90	; 144
   1590a:	90 e1       	ldi	r25, 0x10	; 16
   1590c:	0e 94 ac 85 	call	0x10b58	; 0x10b58 <gpib_timer_elapsed_end>
   15910:	ce 14       	cp	r12, r14
   15912:	df 04       	cpc	r13, r15
   15914:	39 f1       	breq	.+78     	; 0x15964 <SS80_locate_and_write+0x178>
   15916:	8c 85       	ldd	r24, Y+12	; 0x0c
   15918:	9d 85       	ldd	r25, Y+13	; 0x0d
   1591a:	9c 01       	movw	r18, r24
   1591c:	22 27       	eor	r18, r18
   1591e:	30 7d       	andi	r19, 0xD0	; 208
   15920:	23 2b       	or	r18, r19
   15922:	d1 f0       	breq	.+52     	; 0x15958 <SS80_locate_and_write+0x16c>
   15924:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15928:	80 ff       	sbrs	r24, 0
   1592a:	0a c0       	rjmp	.+20     	; 0x15940 <SS80_locate_and_write+0x154>
   1592c:	8f e7       	ldi	r24, 0x7F	; 127
   1592e:	98 e2       	ldi	r25, 0x28	; 40
   15930:	a0 e0       	ldi	r26, 0x00	; 0
   15932:	ed b7       	in	r30, 0x3d	; 61
   15934:	fe b7       	in	r31, 0x3e	; 62
   15936:	81 83       	std	Z+1, r24	; 0x01
   15938:	92 83       	std	Z+2, r25	; 0x02
   1593a:	a3 83       	std	Z+3, r26	; 0x03
   1593c:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   15940:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   15944:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   15948:	83 81       	ldd	r24, Z+3	; 0x03
   1594a:	94 81       	ldd	r25, Z+4	; 0x04
   1594c:	82 60       	ori	r24, 0x02	; 2
   1594e:	94 83       	std	Z+4, r25	; 0x04
   15950:	83 83       	std	Z+3, r24	; 0x03
   15952:	81 e0       	ldi	r24, 0x01	; 1
   15954:	82 83       	std	Z+2, r24	; 0x02
   15956:	99 c0       	rjmp	.+306    	; 0x15a8a <SS80_locate_and_write+0x29e>
   15958:	c1 14       	cp	r12, r1
   1595a:	d1 04       	cpc	r13, r1
   1595c:	09 f0       	breq	.+2      	; 0x15960 <SS80_locate_and_write+0x174>
   1595e:	d0 c0       	rjmp	.+416    	; 0x15b00 <SS80_locate_and_write+0x314>
   15960:	90 fd       	sbrc	r25, 0
   15962:	93 c0       	rjmp	.+294    	; 0x15a8a <SS80_locate_and_write+0x29e>
   15964:	01 15       	cp	r16, r1
   15966:	11 05       	cpc	r17, r1
   15968:	09 f0       	breq	.+2      	; 0x1596c <SS80_locate_and_write+0x180>
   1596a:	84 c0       	rjmp	.+264    	; 0x15a74 <SS80_locate_and_write+0x288>
   1596c:	c1 14       	cp	r12, r1
   1596e:	d1 04       	cpc	r13, r1
   15970:	09 f4       	brne	.+2      	; 0x15974 <SS80_locate_and_write+0x188>
   15972:	82 c0       	rjmp	.+260    	; 0x15a78 <SS80_locate_and_write+0x28c>
   15974:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15978:	86 fd       	sbrc	r24, 6
   1597a:	0e 94 9a 85 	call	0x10b34	; 0x10b34 <gpib_timer_elapsed_begin>
   1597e:	e0 90 6e 19 	lds	r14, 0x196E	; 0x80196e <SS80s>
   15982:	f0 90 6f 19 	lds	r15, 0x196F	; 0x80196f <SS80s+0x1>
   15986:	f3 e0       	ldi	r31, 0x03	; 3
   15988:	ef 0e       	add	r14, r31
   1598a:	f1 1c       	adc	r15, r1
   1598c:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   15990:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   15994:	86 01       	movw	r16, r12
   15996:	22 ef       	ldi	r18, 0xF2	; 242
   15998:	3c e1       	ldi	r19, 0x1C	; 28
   1599a:	b5 01       	movw	r22, r10
   1599c:	a4 01       	movw	r20, r8
   1599e:	82 81       	ldd	r24, Z+2	; 0x02
   159a0:	93 81       	ldd	r25, Z+3	; 0x03
   159a2:	0e 94 43 85 	call	0x10a86	; 0x10a86 <dbf_open_write>
   159a6:	7c 01       	movw	r14, r24
   159a8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   159ac:	86 ff       	sbrs	r24, 6
   159ae:	04 c0       	rjmp	.+8      	; 0x159b8 <SS80_locate_and_write+0x1cc>
   159b0:	8b e9       	ldi	r24, 0x9B	; 155
   159b2:	90 e1       	ldi	r25, 0x10	; 16
   159b4:	0e 94 ac 85 	call	0x10b58	; 0x10b58 <gpib_timer_elapsed_end>
   159b8:	ce 14       	cp	r12, r14
   159ba:	df 04       	cpc	r13, r15
   159bc:	39 f1       	breq	.+78     	; 0x15a0c <SS80_locate_and_write+0x220>
   159be:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   159c2:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   159c6:	83 81       	ldd	r24, Z+3	; 0x03
   159c8:	94 81       	ldd	r25, Z+4	; 0x04
   159ca:	82 60       	ori	r24, 0x02	; 2
   159cc:	94 83       	std	Z+4, r25	; 0x04
   159ce:	83 83       	std	Z+3, r24	; 0x03
   159d0:	0e 94 20 70 	call	0xe040	; 0xe040 <mmc_wp_status>
   159d4:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   159d8:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   159dc:	89 2b       	or	r24, r25
   159de:	29 f0       	breq	.+10     	; 0x159ea <SS80_locate_and_write+0x1fe>
   159e0:	83 81       	ldd	r24, Z+3	; 0x03
   159e2:	94 81       	ldd	r25, Z+4	; 0x04
   159e4:	88 60       	ori	r24, 0x08	; 8
   159e6:	94 83       	std	Z+4, r25	; 0x04
   159e8:	83 83       	std	Z+3, r24	; 0x03
   159ea:	21 e0       	ldi	r18, 0x01	; 1
   159ec:	22 83       	std	Z+2, r18	; 0x02
   159ee:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   159f2:	80 ff       	sbrs	r24, 0
   159f4:	27 c0       	rjmp	.+78     	; 0x15a44 <SS80_locate_and_write+0x258>
   159f6:	89 89       	ldd	r24, Y+17	; 0x11
   159f8:	9a 89       	ldd	r25, Y+18	; 0x12
   159fa:	ab 89       	ldd	r26, Y+19	; 0x13
   159fc:	ed b7       	in	r30, 0x3d	; 61
   159fe:	fe b7       	in	r31, 0x3e	; 62
   15a00:	81 83       	std	Z+1, r24	; 0x01
   15a02:	92 83       	std	Z+2, r25	; 0x02
   15a04:	a3 83       	std	Z+3, r26	; 0x03
   15a06:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   15a0a:	1c c0       	rjmp	.+56     	; 0x15a44 <SS80_locate_and_write+0x258>
   15a0c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15a10:	85 ff       	sbrs	r24, 5
   15a12:	0c c0       	rjmp	.+24     	; 0x15a2c <SS80_locate_and_write+0x240>
   15a14:	ed b7       	in	r30, 0x3d	; 61
   15a16:	fe b7       	in	r31, 0x3e	; 62
   15a18:	d5 82       	std	Z+5, r13	; 0x05
   15a1a:	c4 82       	std	Z+4, r12	; 0x04
   15a1c:	2e 85       	ldd	r18, Y+14	; 0x0e
   15a1e:	3f 85       	ldd	r19, Y+15	; 0x0f
   15a20:	48 89       	ldd	r20, Y+16	; 0x10
   15a22:	21 83       	std	Z+1, r18	; 0x01
   15a24:	32 83       	std	Z+2, r19	; 0x02
   15a26:	43 83       	std	Z+3, r20	; 0x03
   15a28:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   15a2c:	c6 01       	movw	r24, r12
   15a2e:	0d 2c       	mov	r0, r13
   15a30:	00 0c       	add	r0, r0
   15a32:	aa 0b       	sbc	r26, r26
   15a34:	bb 0b       	sbc	r27, r27
   15a36:	88 0e       	add	r8, r24
   15a38:	99 1e       	adc	r9, r25
   15a3a:	aa 1e       	adc	r10, r26
   15a3c:	bb 1e       	adc	r11, r27
   15a3e:	00 e0       	ldi	r16, 0x00	; 0
   15a40:	10 e0       	ldi	r17, 0x00	; 0
   15a42:	05 c0       	rjmp	.+10     	; 0x15a4e <SS80_locate_and_write+0x262>
   15a44:	ec 14       	cp	r14, r12
   15a46:	fd 04       	cpc	r15, r13
   15a48:	64 f0       	brlt	.+24     	; 0x15a62 <SS80_locate_and_write+0x276>
   15a4a:	01 e0       	ldi	r16, 0x01	; 1
   15a4c:	10 e0       	ldi	r17, 0x00	; 0
   15a4e:	c7 01       	movw	r24, r14
   15a50:	0f 2c       	mov	r0, r15
   15a52:	00 0c       	add	r0, r0
   15a54:	aa 0b       	sbc	r26, r26
   15a56:	bb 0b       	sbc	r27, r27
   15a58:	48 0e       	add	r4, r24
   15a5a:	59 1e       	adc	r5, r25
   15a5c:	6a 1e       	adc	r6, r26
   15a5e:	7b 1e       	adc	r7, r27
   15a60:	0b c0       	rjmp	.+22     	; 0x15a78 <SS80_locate_and_write+0x28c>
   15a62:	c6 01       	movw	r24, r12
   15a64:	0d 2c       	mov	r0, r13
   15a66:	00 0c       	add	r0, r0
   15a68:	aa 0b       	sbc	r26, r26
   15a6a:	bb 0b       	sbc	r27, r27
   15a6c:	48 0e       	add	r4, r24
   15a6e:	59 1e       	adc	r5, r25
   15a70:	6a 1e       	adc	r6, r26
   15a72:	7b 1e       	adc	r7, r27
   15a74:	01 e0       	ldi	r16, 0x01	; 1
   15a76:	10 e0       	ldi	r17, 0x00	; 0
   15a78:	2c 18       	sub	r2, r12
   15a7a:	3d 08       	sbc	r3, r13
   15a7c:	8c 85       	ldd	r24, Y+12	; 0x0c
   15a7e:	9d 85       	ldd	r25, Y+13	; 0x0d
   15a80:	90 ff       	sbrs	r25, 0
   15a82:	19 cf       	rjmp	.-462    	; 0x158b6 <SS80_locate_and_write+0xca>
   15a84:	12 14       	cp	r1, r2
   15a86:	13 04       	cpc	r1, r3
   15a88:	7c f4       	brge	.+30     	; 0x15aa8 <SS80_locate_and_write+0x2bc>
   15a8a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15a8e:	80 ff       	sbrs	r24, 0
   15a90:	1d c0       	rjmp	.+58     	; 0x15acc <SS80_locate_and_write+0x2e0>
   15a92:	8d e1       	ldi	r24, 0x1D	; 29
   15a94:	98 e2       	ldi	r25, 0x28	; 40
   15a96:	a0 e0       	ldi	r26, 0x00	; 0
   15a98:	ed b7       	in	r30, 0x3d	; 61
   15a9a:	fe b7       	in	r31, 0x3e	; 62
   15a9c:	81 83       	std	Z+1, r24	; 0x01
   15a9e:	92 83       	std	Z+2, r25	; 0x02
   15aa0:	a3 83       	std	Z+3, r26	; 0x03
   15aa2:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   15aa6:	12 c0       	rjmp	.+36     	; 0x15acc <SS80_locate_and_write+0x2e0>
   15aa8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15aac:	85 ff       	sbrs	r24, 5
   15aae:	0e c0       	rjmp	.+28     	; 0x15acc <SS80_locate_and_write+0x2e0>
   15ab0:	ed b7       	in	r30, 0x3d	; 61
   15ab2:	fe b7       	in	r31, 0x3e	; 62
   15ab4:	44 82       	std	Z+4, r4	; 0x04
   15ab6:	55 82       	std	Z+5, r5	; 0x05
   15ab8:	66 82       	std	Z+6, r6	; 0x06
   15aba:	77 82       	std	Z+7, r7	; 0x07
   15abc:	82 ef       	ldi	r24, 0xF2	; 242
   15abe:	97 e2       	ldi	r25, 0x27	; 39
   15ac0:	a0 e0       	ldi	r26, 0x00	; 0
   15ac2:	81 83       	std	Z+1, r24	; 0x01
   15ac4:	92 83       	std	Z+2, r25	; 0x02
   15ac6:	a3 83       	std	Z+3, r26	; 0x03
   15ac8:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   15acc:	00 91 6e 19 	lds	r16, 0x196E	; 0x80196e <SS80s>
   15ad0:	10 91 6f 19 	lds	r17, 0x196F	; 0x80196f <SS80s+0x1>
   15ad4:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   15ad8:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   15adc:	22 89       	ldd	r18, Z+18	; 0x12
   15ade:	33 89       	ldd	r19, Z+19	; 0x13
   15ae0:	40 e0       	ldi	r20, 0x00	; 0
   15ae2:	50 e0       	ldi	r21, 0x00	; 0
   15ae4:	c5 01       	movw	r24, r10
   15ae6:	b4 01       	movw	r22, r8
   15ae8:	0e 94 92 e6 	call	0x1cd24	; 0x1cd24 <__udivmodsi4>
   15aec:	f8 01       	movw	r30, r16
   15aee:	27 83       	std	Z+7, r18	; 0x07
   15af0:	30 87       	std	Z+8, r19	; 0x08
   15af2:	41 87       	std	Z+9, r20	; 0x09
   15af4:	52 87       	std	Z+10, r21	; 0x0a
   15af6:	8c 85       	ldd	r24, Y+12	; 0x0c
   15af8:	9d 85       	ldd	r25, Y+13	; 0x0d
   15afa:	88 27       	eor	r24, r24
   15afc:	90 7d       	andi	r25, 0xD0	; 208
   15afe:	04 c0       	rjmp	.+8      	; 0x15b08 <SS80_locate_and_write+0x31c>
   15b00:	01 2b       	or	r16, r17
   15b02:	09 f4       	brne	.+2      	; 0x15b06 <SS80_locate_and_write+0x31a>
   15b04:	37 cf       	rjmp	.-402    	; 0x15974 <SS80_locate_and_write+0x188>
   15b06:	b6 cf       	rjmp	.-148    	; 0x15a74 <SS80_locate_and_write+0x288>
   15b08:	63 96       	adiw	r28, 0x13	; 19
   15b0a:	e2 e1       	ldi	r30, 0x12	; 18
   15b0c:	0c 94 1b e7 	jmp	0x1ce36	; 0x1ce36 <__epilogue_restores__>

00015b10 <SS80_Report>:
   15b10:	a8 e0       	ldi	r26, 0x08	; 8
   15b12:	b0 e0       	ldi	r27, 0x00	; 0
   15b14:	ee e8       	ldi	r30, 0x8E	; 142
   15b16:	fd ea       	ldi	r31, 0xAD	; 173
   15b18:	0c 94 0f e7 	jmp	0x1ce1e	; 0x1ce1e <__prologue_saves__+0x20>
   15b1c:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   15b20:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   15b24:	82 81       	ldd	r24, Z+2	; 0x02
   15b26:	88 87       	std	Y+8, r24	; 0x08
   15b28:	80 e0       	ldi	r24, 0x00	; 0
   15b2a:	91 e0       	ldi	r25, 0x01	; 1
   15b2c:	9f 83       	std	Y+7, r25	; 0x07
   15b2e:	8e 83       	std	Y+6, r24	; 0x06
   15b30:	ae 01       	movw	r20, r28
   15b32:	4a 5f       	subi	r20, 0xFA	; 250
   15b34:	5f 4f       	sbci	r21, 0xFF	; 255
   15b36:	61 e0       	ldi	r22, 0x01	; 1
   15b38:	70 e0       	ldi	r23, 0x00	; 0
   15b3a:	ce 01       	movw	r24, r28
   15b3c:	08 96       	adiw	r24, 0x08	; 8
   15b3e:	0e 94 a4 8b 	call	0x11748	; 0x11748 <gpib_write_str>
   15b42:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   15b46:	01 97       	sbiw	r24, 0x01	; 1
   15b48:	89 f0       	breq	.+34     	; 0x15b6c <SS80_Report+0x5c>
   15b4a:	20 ff       	sbrs	r18, 0
   15b4c:	0a c0       	rjmp	.+20     	; 0x15b62 <SS80_Report+0x52>
   15b4e:	81 ee       	ldi	r24, 0xE1	; 225
   15b50:	92 e2       	ldi	r25, 0x22	; 34
   15b52:	a0 e0       	ldi	r26, 0x00	; 0
   15b54:	ed b7       	in	r30, 0x3d	; 61
   15b56:	fe b7       	in	r31, 0x3e	; 62
   15b58:	81 83       	std	Z+1, r24	; 0x01
   15b5a:	92 83       	std	Z+2, r25	; 0x02
   15b5c:	a3 83       	std	Z+3, r26	; 0x03
   15b5e:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   15b62:	8e 81       	ldd	r24, Y+6	; 0x06
   15b64:	9f 81       	ldd	r25, Y+7	; 0x07
   15b66:	88 27       	eor	r24, r24
   15b68:	90 7d       	andi	r25, 0xD0	; 208
   15b6a:	1b c0       	rjmp	.+54     	; 0x15ba2 <SS80_Report+0x92>
   15b6c:	25 ff       	sbrs	r18, 5
   15b6e:	12 c0       	rjmp	.+36     	; 0x15b94 <SS80_Report+0x84>
   15b70:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   15b74:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   15b78:	82 81       	ldd	r24, Z+2	; 0x02
   15b7a:	90 e0       	ldi	r25, 0x00	; 0
   15b7c:	ed b7       	in	r30, 0x3d	; 61
   15b7e:	fe b7       	in	r31, 0x3e	; 62
   15b80:	95 83       	std	Z+5, r25	; 0x05
   15b82:	84 83       	std	Z+4, r24	; 0x04
   15b84:	8e ec       	ldi	r24, 0xCE	; 206
   15b86:	92 e2       	ldi	r25, 0x22	; 34
   15b88:	a0 e0       	ldi	r26, 0x00	; 0
   15b8a:	81 83       	std	Z+1, r24	; 0x01
   15b8c:	92 83       	std	Z+2, r25	; 0x02
   15b8e:	a3 83       	std	Z+3, r26	; 0x03
   15b90:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   15b94:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   15b98:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   15b9c:	12 82       	std	Z+2, r1	; 0x02
   15b9e:	80 e0       	ldi	r24, 0x00	; 0
   15ba0:	90 e0       	ldi	r25, 0x00	; 0
   15ba2:	28 96       	adiw	r28, 0x08	; 8
   15ba4:	e2 e0       	ldi	r30, 0x02	; 2
   15ba6:	0c 94 2b e7 	jmp	0x1ce56	; 0x1ce56 <__epilogue_restores__+0x20>

00015baa <Clear_Common>:
   15baa:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   15bae:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   15bb2:	25 81       	ldd	r18, Z+5	; 0x05
   15bb4:	30 e0       	ldi	r19, 0x00	; 0
   15bb6:	28 17       	cp	r18, r24
   15bb8:	39 07       	cpc	r19, r25
   15bba:	19 f0       	breq	.+6      	; 0x15bc2 <Clear_Common+0x18>
   15bbc:	0f 97       	sbiw	r24, 0x0f	; 15
   15bbe:	99 f4       	brne	.+38     	; 0x15be6 <Clear_Common+0x3c>
   15bc0:	03 c0       	rjmp	.+6      	; 0x15bc8 <Clear_Common+0x1e>
   15bc2:	2f 30       	cpi	r18, 0x0F	; 15
   15bc4:	31 05       	cpc	r19, r1
   15bc6:	09 f4       	brne	.+2      	; 0x15bca <Clear_Common+0x20>
   15bc8:	15 82       	std	Z+5, r1	; 0x05
   15bca:	16 82       	std	Z+6, r1	; 0x06
   15bcc:	17 82       	std	Z+7, r1	; 0x07
   15bce:	10 86       	std	Z+8, r1	; 0x08
   15bd0:	11 86       	std	Z+9, r1	; 0x09
   15bd2:	12 86       	std	Z+10, r1	; 0x0a
   15bd4:	13 86       	std	Z+11, r1	; 0x0b
   15bd6:	14 86       	std	Z+12, r1	; 0x0c
   15bd8:	15 86       	std	Z+13, r1	; 0x0d
   15bda:	16 86       	std	Z+14, r1	; 0x0e
   15bdc:	11 82       	std	Z+1, r1	; 0x01
   15bde:	10 82       	st	Z, r1
   15be0:	14 82       	std	Z+4, r1	; 0x04
   15be2:	13 82       	std	Z+3, r1	; 0x03
   15be4:	12 82       	std	Z+2, r1	; 0x02
   15be6:	08 95       	ret

00015be8 <SS80_init>:
   15be8:	cf 92       	push	r12
   15bea:	df 92       	push	r13
   15bec:	ef 92       	push	r14
   15bee:	0f 93       	push	r16
   15bf0:	1f 93       	push	r17
   15bf2:	cf 93       	push	r28
   15bf4:	df 93       	push	r29
   15bf6:	00 d0       	rcall	.+0      	; 0x15bf8 <SS80_init+0x10>
   15bf8:	00 d0       	rcall	.+0      	; 0x15bfa <SS80_init+0x12>
   15bfa:	1f 92       	push	r1
   15bfc:	05 e7       	ldi	r16, 0x75	; 117
   15bfe:	1f e1       	ldi	r17, 0x1F	; 31
   15c00:	cb e0       	ldi	r28, 0x0B	; 11
   15c02:	d2 e0       	ldi	r29, 0x02	; 2
   15c04:	8b e9       	ldi	r24, 0x9B	; 155
   15c06:	99 e2       	ldi	r25, 0x29	; 41
   15c08:	6c 01       	movw	r12, r24
   15c0a:	e1 2c       	mov	r14, r1
   15c0c:	f8 01       	movw	r30, r16
   15c0e:	80 81       	ld	r24, Z
   15c10:	83 30       	cpi	r24, 0x03	; 3
   15c12:	29 f5       	brne	.+74     	; 0x15c5e <SS80_init+0x76>
   15c14:	8c 2f       	mov	r24, r28
   15c16:	0e 94 62 97 	call	0x12ec4	; 0x12ec4 <set_active_device>
   15c1a:	88 23       	and	r24, r24
   15c1c:	01 f1       	breq	.+64     	; 0x15c5e <SS80_init+0x76>
   15c1e:	8f e0       	ldi	r24, 0x0F	; 15
   15c20:	90 e0       	ldi	r25, 0x00	; 0
   15c22:	c3 df       	rcall	.-122    	; 0x15baa <Clear_Common>
   15c24:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   15c28:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   15c2c:	d2 83       	std	Z+2, r29	; 0x02
   15c2e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15c32:	85 ff       	sbrs	r24, 5
   15c34:	0c c0       	rjmp	.+24     	; 0x15c4e <SS80_init+0x66>
   15c36:	f8 01       	movw	r30, r16
   15c38:	81 81       	ldd	r24, Z+1	; 0x01
   15c3a:	90 e0       	ldi	r25, 0x00	; 0
   15c3c:	ed b7       	in	r30, 0x3d	; 61
   15c3e:	fe b7       	in	r31, 0x3e	; 62
   15c40:	95 83       	std	Z+5, r25	; 0x05
   15c42:	84 83       	std	Z+4, r24	; 0x04
   15c44:	c1 82       	std	Z+1, r12	; 0x01
   15c46:	d2 82       	std	Z+2, r13	; 0x02
   15c48:	e3 82       	std	Z+3, r14	; 0x03
   15c4a:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   15c4e:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   15c52:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   15c56:	81 81       	ldd	r24, Z+1	; 0x01
   15c58:	90 e0       	ldi	r25, 0x00	; 0
   15c5a:	0e 94 aa 86 	call	0x10d54	; 0x10d54 <gpib_disable_PPR>
   15c5e:	0b 50       	subi	r16, 0x0B	; 11
   15c60:	11 09       	sbc	r17, r1
   15c62:	c1 50       	subi	r28, 0x01	; 1
   15c64:	98 f6       	brcc	.-90     	; 0x15c0c <SS80_init+0x24>
   15c66:	0f 90       	pop	r0
   15c68:	0f 90       	pop	r0
   15c6a:	0f 90       	pop	r0
   15c6c:	0f 90       	pop	r0
   15c6e:	0f 90       	pop	r0
   15c70:	df 91       	pop	r29
   15c72:	cf 91       	pop	r28
   15c74:	1f 91       	pop	r17
   15c76:	0f 91       	pop	r16
   15c78:	ef 90       	pop	r14
   15c7a:	df 90       	pop	r13
   15c7c:	cf 90       	pop	r12
   15c7e:	08 95       	ret

00015c80 <SS80_Channel_Independent_Clear>:
   15c80:	94 df       	rcall	.-216    	; 0x15baa <Clear_Common>
   15c82:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   15c86:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   15c8a:	81 81       	ldd	r24, Z+1	; 0x01
   15c8c:	90 e0       	ldi	r25, 0x00	; 0
   15c8e:	0e 94 74 86 	call	0x10ce8	; 0x10ce8 <gpib_enable_PPR>
   15c92:	80 e0       	ldi	r24, 0x00	; 0
   15c94:	90 e0       	ldi	r25, 0x00	; 0
   15c96:	08 95       	ret

00015c98 <SS80_Universal_Device_Clear>:
   15c98:	8f e0       	ldi	r24, 0x0F	; 15
   15c9a:	90 e0       	ldi	r25, 0x00	; 0
   15c9c:	86 df       	rcall	.-244    	; 0x15baa <Clear_Common>
   15c9e:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   15ca2:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   15ca6:	81 81       	ldd	r24, Z+1	; 0x01
   15ca8:	90 e0       	ldi	r25, 0x00	; 0
   15caa:	0e 94 74 86 	call	0x10ce8	; 0x10ce8 <gpib_enable_PPR>
   15cae:	80 e0       	ldi	r24, 0x00	; 0
   15cb0:	90 e0       	ldi	r25, 0x00	; 0
   15cb2:	08 95       	ret

00015cb4 <SS80_Selected_Device_Clear>:
   15cb4:	cf 93       	push	r28
   15cb6:	df 93       	push	r29
   15cb8:	00 d0       	rcall	.+0      	; 0x15cba <SS80_Selected_Device_Clear+0x6>
   15cba:	1f 92       	push	r1
   15cbc:	ec 01       	movw	r28, r24
   15cbe:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15cc2:	85 ff       	sbrs	r24, 5
   15cc4:	0a c0       	rjmp	.+20     	; 0x15cda <SS80_Selected_Device_Clear+0x26>
   15cc6:	82 ec       	ldi	r24, 0xC2	; 194
   15cc8:	92 e2       	ldi	r25, 0x22	; 34
   15cca:	a0 e0       	ldi	r26, 0x00	; 0
   15ccc:	ed b7       	in	r30, 0x3d	; 61
   15cce:	fe b7       	in	r31, 0x3e	; 62
   15cd0:	81 83       	std	Z+1, r24	; 0x01
   15cd2:	92 83       	std	Z+2, r25	; 0x02
   15cd4:	a3 83       	std	Z+3, r26	; 0x03
   15cd6:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   15cda:	ce 01       	movw	r24, r28
   15cdc:	66 df       	rcall	.-308    	; 0x15baa <Clear_Common>
   15cde:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   15ce2:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   15ce6:	81 81       	ldd	r24, Z+1	; 0x01
   15ce8:	90 e0       	ldi	r25, 0x00	; 0
   15cea:	0e 94 74 86 	call	0x10ce8	; 0x10ce8 <gpib_enable_PPR>
   15cee:	80 e0       	ldi	r24, 0x00	; 0
   15cf0:	90 e0       	ldi	r25, 0x00	; 0
   15cf2:	cd b7       	in	r28, 0x3d	; 61
   15cf4:	de b7       	in	r29, 0x3e	; 62
   15cf6:	23 96       	adiw	r28, 0x03	; 3
   15cf8:	e2 e0       	ldi	r30, 0x02	; 2
   15cfa:	0c 94 2b e7 	jmp	0x1ce56	; 0x1ce56 <__epilogue_restores__+0x20>

00015cfe <SS80_Amigo_Clear>:
   15cfe:	a6 e0       	ldi	r26, 0x06	; 6
   15d00:	b0 e0       	ldi	r27, 0x00	; 0
   15d02:	e5 e8       	ldi	r30, 0x85	; 133
   15d04:	fe ea       	ldi	r31, 0xAE	; 174
   15d06:	0c 94 0f e7 	jmp	0x1ce1e	; 0x1ce1e <__prologue_saves__+0x20>
   15d0a:	1d 82       	std	Y+5, r1	; 0x05
   15d0c:	1c 82       	std	Y+4, r1	; 0x04
   15d0e:	ae 01       	movw	r20, r28
   15d10:	4c 5f       	subi	r20, 0xFC	; 252
   15d12:	5f 4f       	sbci	r21, 0xFF	; 255
   15d14:	61 e0       	ldi	r22, 0x01	; 1
   15d16:	70 e0       	ldi	r23, 0x00	; 0
   15d18:	ce 01       	movw	r24, r28
   15d1a:	06 96       	adiw	r24, 0x06	; 6
   15d1c:	0e 94 02 8b 	call	0x11604	; 0x11604 <gpib_read_str>
   15d20:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   15d24:	01 97       	sbiw	r24, 0x01	; 1
   15d26:	89 f0       	breq	.+34     	; 0x15d4a <SS80_Amigo_Clear+0x4c>
   15d28:	20 ff       	sbrs	r18, 0
   15d2a:	0a c0       	rjmp	.+20     	; 0x15d40 <SS80_Amigo_Clear+0x42>
   15d2c:	8f ea       	ldi	r24, 0xAF	; 175
   15d2e:	92 e2       	ldi	r25, 0x22	; 34
   15d30:	a0 e0       	ldi	r26, 0x00	; 0
   15d32:	ed b7       	in	r30, 0x3d	; 61
   15d34:	fe b7       	in	r31, 0x3e	; 62
   15d36:	81 83       	std	Z+1, r24	; 0x01
   15d38:	92 83       	std	Z+2, r25	; 0x02
   15d3a:	a3 83       	std	Z+3, r26	; 0x03
   15d3c:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   15d40:	8c 81       	ldd	r24, Y+4	; 0x04
   15d42:	9d 81       	ldd	r25, Y+5	; 0x05
   15d44:	88 27       	eor	r24, r24
   15d46:	90 7d       	andi	r25, 0xD0	; 208
   15d48:	19 c0       	rjmp	.+50     	; 0x15d7c <SS80_Amigo_Clear+0x7e>
   15d4a:	25 ff       	sbrs	r18, 5
   15d4c:	0a c0       	rjmp	.+20     	; 0x15d62 <SS80_Amigo_Clear+0x64>
   15d4e:	80 ea       	ldi	r24, 0xA0	; 160
   15d50:	92 e2       	ldi	r25, 0x22	; 34
   15d52:	a0 e0       	ldi	r26, 0x00	; 0
   15d54:	ed b7       	in	r30, 0x3d	; 61
   15d56:	fe b7       	in	r31, 0x3e	; 62
   15d58:	81 83       	std	Z+1, r24	; 0x01
   15d5a:	92 83       	std	Z+2, r25	; 0x02
   15d5c:	a3 83       	std	Z+3, r26	; 0x03
   15d5e:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   15d62:	8f e0       	ldi	r24, 0x0F	; 15
   15d64:	90 e0       	ldi	r25, 0x00	; 0
   15d66:	21 df       	rcall	.-446    	; 0x15baa <Clear_Common>
   15d68:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   15d6c:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   15d70:	81 81       	ldd	r24, Z+1	; 0x01
   15d72:	90 e0       	ldi	r25, 0x00	; 0
   15d74:	0e 94 74 86 	call	0x10ce8	; 0x10ce8 <gpib_enable_PPR>
   15d78:	80 e0       	ldi	r24, 0x00	; 0
   15d7a:	90 e0       	ldi	r25, 0x00	; 0
   15d7c:	26 96       	adiw	r28, 0x06	; 6
   15d7e:	e2 e0       	ldi	r30, 0x02	; 2
   15d80:	0c 94 2b e7 	jmp	0x1ce56	; 0x1ce56 <__epilogue_restores__+0x20>

00015d84 <SS80_Cancel>:
   15d84:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   15d88:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   15d8c:	11 82       	std	Z+1, r1	; 0x01
   15d8e:	10 82       	st	Z, r1
   15d90:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   15d94:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   15d98:	81 81       	ldd	r24, Z+1	; 0x01
   15d9a:	90 e0       	ldi	r25, 0x00	; 0
   15d9c:	0e 94 74 86 	call	0x10ce8	; 0x10ce8 <gpib_enable_PPR>
   15da0:	80 e0       	ldi	r24, 0x00	; 0
   15da2:	90 e0       	ldi	r25, 0x00	; 0
   15da4:	08 95       	ret

00015da6 <SS80_Transparent_State>:
   15da6:	a9 e0       	ldi	r26, 0x09	; 9
   15da8:	b0 e0       	ldi	r27, 0x00	; 0
   15daa:	e9 ed       	ldi	r30, 0xD9	; 217
   15dac:	fe ea       	ldi	r31, 0xAE	; 174
   15dae:	0c 94 07 e7 	jmp	0x1ce0e	; 0x1ce0e <__prologue_saves__+0x10>
   15db2:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   15db6:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   15dba:	81 81       	ldd	r24, Z+1	; 0x01
   15dbc:	90 e0       	ldi	r25, 0x00	; 0
   15dbe:	0e 94 aa 86 	call	0x10d54	; 0x10d54 <gpib_disable_PPR>
   15dc2:	80 e0       	ldi	r24, 0x00	; 0
   15dc4:	91 e0       	ldi	r25, 0x01	; 1
   15dc6:	99 87       	std	Y+9, r25	; 0x09
   15dc8:	88 87       	std	Y+8, r24	; 0x08
   15dca:	ae 01       	movw	r20, r28
   15dcc:	48 5f       	subi	r20, 0xF8	; 248
   15dce:	5f 4f       	sbci	r21, 0xFF	; 255
   15dd0:	60 e0       	ldi	r22, 0x00	; 0
   15dd2:	72 e0       	ldi	r23, 0x02	; 2
   15dd4:	82 ef       	ldi	r24, 0xF2	; 242
   15dd6:	9c e1       	ldi	r25, 0x1C	; 28
   15dd8:	0e 94 02 8b 	call	0x11604	; 0x11604 <gpib_read_str>
   15ddc:	7c 01       	movw	r14, r24
   15dde:	88 85       	ldd	r24, Y+8	; 0x08
   15de0:	99 85       	ldd	r25, Y+9	; 0x09
   15de2:	9c 01       	movw	r18, r24
   15de4:	22 27       	eor	r18, r18
   15de6:	30 7d       	andi	r19, 0xD0	; 208
   15de8:	23 2b       	or	r18, r19
   15dea:	79 f0       	breq	.+30     	; 0x15e0a <SS80_Transparent_State+0x64>
   15dec:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15df0:	80 ff       	sbrs	r24, 0
   15df2:	da c0       	rjmp	.+436    	; 0x15fa8 <SS80_Transparent_State+0x202>
   15df4:	8f e3       	ldi	r24, 0x3F	; 63
   15df6:	94 e2       	ldi	r25, 0x24	; 36
   15df8:	a0 e0       	ldi	r26, 0x00	; 0
   15dfa:	ed b7       	in	r30, 0x3d	; 61
   15dfc:	fe b7       	in	r31, 0x3e	; 62
   15dfe:	81 83       	std	Z+1, r24	; 0x01
   15e00:	92 83       	std	Z+2, r25	; 0x02
   15e02:	a3 83       	std	Z+3, r26	; 0x03
   15e04:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   15e08:	cf c0       	rjmp	.+414    	; 0x15fa8 <SS80_Transparent_State+0x202>
   15e0a:	e1 14       	cp	r14, r1
   15e0c:	f1 04       	cpc	r15, r1
   15e0e:	09 f4       	brne	.+2      	; 0x15e12 <SS80_Transparent_State+0x6c>
   15e10:	d0 c0       	rjmp	.+416    	; 0x15fb2 <SS80_Transparent_State+0x20c>
   15e12:	90 fd       	sbrc	r25, 0
   15e14:	0e c0       	rjmp	.+28     	; 0x15e32 <SS80_Transparent_State+0x8c>
   15e16:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15e1a:	80 ff       	sbrs	r24, 0
   15e1c:	0a c0       	rjmp	.+20     	; 0x15e32 <SS80_Transparent_State+0x8c>
   15e1e:	86 e2       	ldi	r24, 0x26	; 38
   15e20:	94 e2       	ldi	r25, 0x24	; 36
   15e22:	a0 e0       	ldi	r26, 0x00	; 0
   15e24:	ed b7       	in	r30, 0x3d	; 61
   15e26:	fe b7       	in	r31, 0x3e	; 62
   15e28:	81 83       	std	Z+1, r24	; 0x01
   15e2a:	92 83       	std	Z+2, r25	; 0x02
   15e2c:	a3 83       	std	Z+3, r26	; 0x03
   15e2e:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   15e32:	82 ef       	ldi	r24, 0xF2	; 242
   15e34:	a8 2e       	mov	r10, r24
   15e36:	8c e1       	ldi	r24, 0x1C	; 28
   15e38:	b8 2e       	mov	r11, r24
   15e3a:	00 e0       	ldi	r16, 0x00	; 0
   15e3c:	10 e0       	ldi	r17, 0x00	; 0
   15e3e:	0e 15       	cp	r16, r14
   15e40:	1f 05       	cpc	r17, r15
   15e42:	0c f0       	brlt	.+2      	; 0x15e46 <SS80_Transparent_State+0xa0>
   15e44:	9c c0       	rjmp	.+312    	; 0x15f7e <SS80_Transparent_State+0x1d8>
   15e46:	68 01       	movw	r12, r16
   15e48:	ff ef       	ldi	r31, 0xFF	; 255
   15e4a:	cf 1a       	sub	r12, r31
   15e4c:	df 0a       	sbc	r13, r31
   15e4e:	f5 01       	movw	r30, r10
   15e50:	81 91       	ld	r24, Z+
   15e52:	5f 01       	movw	r10, r30
   15e54:	28 2f       	mov	r18, r24
   15e56:	30 e0       	ldi	r19, 0x00	; 0
   15e58:	a9 01       	movw	r20, r18
   15e5a:	40 52       	subi	r20, 0x20	; 32
   15e5c:	51 09       	sbc	r21, r1
   15e5e:	40 31       	cpi	r20, 0x10	; 16
   15e60:	51 05       	cpc	r21, r1
   15e62:	20 f4       	brcc	.+8      	; 0x15e6c <SS80_Transparent_State+0xc6>
   15e64:	80 52       	subi	r24, 0x20	; 32
   15e66:	86 d9       	rcall	.-3316   	; 0x15174 <SS80_Check_Unit>
   15e68:	86 01       	movw	r16, r12
   15e6a:	e9 cf       	rjmp	.-46     	; 0x15e3e <SS80_Transparent_State+0x98>
   15e6c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15e70:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   15e74:	21 30       	cpi	r18, 0x01	; 1
   15e76:	31 05       	cpc	r19, r1
   15e78:	c9 f4       	brne	.+50     	; 0x15eac <SS80_Transparent_State+0x106>
   15e7a:	0e 5f       	subi	r16, 0xFE	; 254
   15e7c:	1f 4f       	sbci	r17, 0xFF	; 255
   15e7e:	80 73       	andi	r24, 0x30	; 48
   15e80:	99 27       	eor	r25, r25
   15e82:	89 2b       	or	r24, r25
   15e84:	51 f0       	breq	.+20     	; 0x15e9a <SS80_Transparent_State+0xf4>
   15e86:	81 e0       	ldi	r24, 0x01	; 1
   15e88:	94 e2       	ldi	r25, 0x24	; 36
   15e8a:	a0 e0       	ldi	r26, 0x00	; 0
   15e8c:	ed b7       	in	r30, 0x3d	; 61
   15e8e:	fe b7       	in	r31, 0x3e	; 62
   15e90:	81 83       	std	Z+1, r24	; 0x01
   15e92:	92 83       	std	Z+2, r25	; 0x02
   15e94:	a3 83       	std	Z+3, r26	; 0x03
   15e96:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   15e9a:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   15e9e:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   15ea2:	81 81       	ldd	r24, Z+1	; 0x01
   15ea4:	90 e0       	ldi	r25, 0x00	; 0
   15ea6:	0e 94 74 86 	call	0x10ce8	; 0x10ce8 <gpib_enable_PPR>
   15eaa:	69 c0       	rjmp	.+210    	; 0x15f7e <SS80_Transparent_State+0x1d8>
   15eac:	22 30       	cpi	r18, 0x02	; 2
   15eae:	31 05       	cpc	r19, r1
   15eb0:	51 f4       	brne	.+20     	; 0x15ec6 <SS80_Transparent_State+0x120>
   15eb2:	0b 5f       	subi	r16, 0xFB	; 251
   15eb4:	1f 4f       	sbci	r17, 0xFF	; 255
   15eb6:	80 73       	andi	r24, 0x30	; 48
   15eb8:	99 27       	eor	r25, r25
   15eba:	89 2b       	or	r24, r25
   15ebc:	09 f4       	brne	.+2      	; 0x15ec0 <SS80_Transparent_State+0x11a>
   15ebe:	5f c0       	rjmp	.+190    	; 0x15f7e <SS80_Transparent_State+0x1d8>
   15ec0:	84 ee       	ldi	r24, 0xE4	; 228
   15ec2:	93 e2       	ldi	r25, 0x23	; 35
   15ec4:	0c c0       	rjmp	.+24     	; 0x15ede <SS80_Transparent_State+0x138>
   15ec6:	23 30       	cpi	r18, 0x03	; 3
   15ec8:	31 05       	cpc	r19, r1
   15eca:	91 f4       	brne	.+36     	; 0x15ef0 <SS80_Transparent_State+0x14a>
   15ecc:	0b 5f       	subi	r16, 0xFB	; 251
   15ece:	1f 4f       	sbci	r17, 0xFF	; 255
   15ed0:	80 73       	andi	r24, 0x30	; 48
   15ed2:	99 27       	eor	r25, r25
   15ed4:	89 2b       	or	r24, r25
   15ed6:	09 f4       	brne	.+2      	; 0x15eda <SS80_Transparent_State+0x134>
   15ed8:	52 c0       	rjmp	.+164    	; 0x15f7e <SS80_Transparent_State+0x1d8>
   15eda:	86 ec       	ldi	r24, 0xC6	; 198
   15edc:	93 e2       	ldi	r25, 0x23	; 35
   15ede:	a0 e0       	ldi	r26, 0x00	; 0
   15ee0:	ed b7       	in	r30, 0x3d	; 61
   15ee2:	fe b7       	in	r31, 0x3e	; 62
   15ee4:	81 83       	std	Z+1, r24	; 0x01
   15ee6:	92 83       	std	Z+2, r25	; 0x02
   15ee8:	a3 83       	std	Z+3, r26	; 0x03
   15eea:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   15eee:	47 c0       	rjmp	.+142    	; 0x15f7e <SS80_Transparent_State+0x1d8>
   15ef0:	28 30       	cpi	r18, 0x08	; 8
   15ef2:	31 05       	cpc	r19, r1
   15ef4:	e1 f4       	brne	.+56     	; 0x15f2e <SS80_Transparent_State+0x188>
   15ef6:	85 ff       	sbrs	r24, 5
   15ef8:	12 c0       	rjmp	.+36     	; 0x15f1e <SS80_Transparent_State+0x178>
   15efa:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   15efe:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   15f02:	85 81       	ldd	r24, Z+5	; 0x05
   15f04:	90 e0       	ldi	r25, 0x00	; 0
   15f06:	ed b7       	in	r30, 0x3d	; 61
   15f08:	fe b7       	in	r31, 0x3e	; 62
   15f0a:	95 83       	std	Z+5, r25	; 0x05
   15f0c:	84 83       	std	Z+4, r24	; 0x04
   15f0e:	8f e9       	ldi	r24, 0x9F	; 159
   15f10:	93 e2       	ldi	r25, 0x23	; 35
   15f12:	a0 e0       	ldi	r26, 0x00	; 0
   15f14:	81 83       	std	Z+1, r24	; 0x01
   15f16:	92 83       	std	Z+2, r25	; 0x02
   15f18:	a3 83       	std	Z+3, r26	; 0x03
   15f1a:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   15f1e:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   15f22:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   15f26:	85 81       	ldd	r24, Z+5	; 0x05
   15f28:	90 e0       	ldi	r25, 0x00	; 0
   15f2a:	aa de       	rcall	.-684    	; 0x15c80 <SS80_Channel_Independent_Clear>
   15f2c:	44 c0       	rjmp	.+136    	; 0x15fb6 <SS80_Transparent_State+0x210>
   15f2e:	29 30       	cpi	r18, 0x09	; 9
   15f30:	31 05       	cpc	r19, r1
   15f32:	b1 f4       	brne	.+44     	; 0x15f60 <SS80_Transparent_State+0x1ba>
   15f34:	85 ff       	sbrs	r24, 5
   15f36:	12 c0       	rjmp	.+36     	; 0x15f5c <SS80_Transparent_State+0x1b6>
   15f38:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   15f3c:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   15f40:	85 81       	ldd	r24, Z+5	; 0x05
   15f42:	90 e0       	ldi	r25, 0x00	; 0
   15f44:	ed b7       	in	r30, 0x3d	; 61
   15f46:	fe b7       	in	r31, 0x3e	; 62
   15f48:	95 83       	std	Z+5, r25	; 0x05
   15f4a:	84 83       	std	Z+4, r24	; 0x04
   15f4c:	8b e8       	ldi	r24, 0x8B	; 139
   15f4e:	93 e2       	ldi	r25, 0x23	; 35
   15f50:	a0 e0       	ldi	r26, 0x00	; 0
   15f52:	81 83       	std	Z+1, r24	; 0x01
   15f54:	92 83       	std	Z+2, r25	; 0x02
   15f56:	a3 83       	std	Z+3, r26	; 0x03
   15f58:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   15f5c:	13 df       	rcall	.-474    	; 0x15d84 <SS80_Cancel>
   15f5e:	2b c0       	rjmp	.+86     	; 0x15fb6 <SS80_Transparent_State+0x210>
   15f60:	80 ff       	sbrs	r24, 0
   15f62:	22 c0       	rjmp	.+68     	; 0x15fa8 <SS80_Transparent_State+0x202>
   15f64:	ed b7       	in	r30, 0x3d	; 61
   15f66:	fe b7       	in	r31, 0x3e	; 62
   15f68:	35 83       	std	Z+5, r19	; 0x05
   15f6a:	24 83       	std	Z+4, r18	; 0x04
   15f6c:	8b e6       	ldi	r24, 0x6B	; 107
   15f6e:	93 e2       	ldi	r25, 0x23	; 35
   15f70:	a0 e0       	ldi	r26, 0x00	; 0
   15f72:	81 83       	std	Z+1, r24	; 0x01
   15f74:	92 83       	std	Z+2, r25	; 0x02
   15f76:	a3 83       	std	Z+3, r26	; 0x03
   15f78:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   15f7c:	86 01       	movw	r16, r12
   15f7e:	0e 15       	cp	r16, r14
   15f80:	1f 05       	cpc	r17, r15
   15f82:	91 f0       	breq	.+36     	; 0x15fa8 <SS80_Transparent_State+0x202>
   15f84:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15f88:	80 ff       	sbrs	r24, 0
   15f8a:	0e c0       	rjmp	.+28     	; 0x15fa8 <SS80_Transparent_State+0x202>
   15f8c:	ed b7       	in	r30, 0x3d	; 61
   15f8e:	fe b7       	in	r31, 0x3e	; 62
   15f90:	f7 82       	std	Z+7, r15	; 0x07
   15f92:	e6 82       	std	Z+6, r14	; 0x06
   15f94:	15 83       	std	Z+5, r17	; 0x05
   15f96:	04 83       	std	Z+4, r16	; 0x04
   15f98:	8f e2       	ldi	r24, 0x2F	; 47
   15f9a:	93 e2       	ldi	r25, 0x23	; 35
   15f9c:	a0 e0       	ldi	r26, 0x00	; 0
   15f9e:	81 83       	std	Z+1, r24	; 0x01
   15fa0:	92 83       	std	Z+2, r25	; 0x02
   15fa2:	a3 83       	std	Z+3, r26	; 0x03
   15fa4:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   15fa8:	88 85       	ldd	r24, Y+8	; 0x08
   15faa:	99 85       	ldd	r25, Y+9	; 0x09
   15fac:	88 27       	eor	r24, r24
   15fae:	90 7d       	andi	r25, 0xD0	; 208
   15fb0:	02 c0       	rjmp	.+4      	; 0x15fb6 <SS80_Transparent_State+0x210>
   15fb2:	80 e0       	ldi	r24, 0x00	; 0
   15fb4:	90 e0       	ldi	r25, 0x00	; 0
   15fb6:	29 96       	adiw	r28, 0x09	; 9
   15fb8:	ea e0       	ldi	r30, 0x0A	; 10
   15fba:	0c 94 23 e7 	jmp	0x1ce46	; 0x1ce46 <__epilogue_restores__+0x10>

00015fbe <SS80_error_return>:
/// @return  0 on send
/// @return GPIB flags on send error
/// @see gpib.h _FLAGS defines for a full list.

int SS80_error_return( void )
{
   15fbe:	a6 e0       	ldi	r26, 0x06	; 6
   15fc0:	b0 e0       	ldi	r27, 0x00	; 0
   15fc2:	e5 ee       	ldi	r30, 0xE5	; 229
   15fc4:	ff ea       	ldi	r31, 0xAF	; 175
   15fc6:	0c 94 0f e7 	jmp	0x1ce1e	; 0x1ce1e <__prologue_saves__+0x20>
    uint8_t tmp[1];
    uint16_t status = EOI_FLAG;
   15fca:	80 e0       	ldi	r24, 0x00	; 0
   15fcc:	91 e0       	ldi	r25, 0x01	; 1
   15fce:	9d 83       	std	Y+5, r25	; 0x05
   15fd0:	8c 83       	std	Y+4, r24	; 0x04

    SS80s->qstat = 1;
   15fd2:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   15fd6:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   15fda:	81 e0       	ldi	r24, 0x01	; 1
   15fdc:	82 83       	std	Z+2, r24	; 0x02
    tmp[0] = SS80s->qstat;
   15fde:	8e 83       	std	Y+6, r24	; 0x06

    status = EOI_FLAG;
    if( gpib_write_str(tmp,sizeof(tmp), &status) != sizeof(tmp))
   15fe0:	ae 01       	movw	r20, r28
   15fe2:	4c 5f       	subi	r20, 0xFC	; 252
   15fe4:	5f 4f       	sbci	r21, 0xFF	; 255
   15fe6:	61 e0       	ldi	r22, 0x01	; 1
   15fe8:	70 e0       	ldi	r23, 0x00	; 0
   15fea:	ce 01       	movw	r24, r28
   15fec:	06 96       	adiw	r24, 0x06	; 6
   15fee:	0e 94 a4 8b 	call	0x11748	; 0x11748 <gpib_write_str>
   15ff2:	01 97       	sbiw	r24, 0x01	; 1
   15ff4:	99 f0       	breq	.+38     	; 0x1601c <SS80_error_return+0x5e>
    {
        if(debuglevel & GPIB_ERR)
   15ff6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15ffa:	80 ff       	sbrs	r24, 0
   15ffc:	0a c0       	rjmp	.+20     	; 0x16012 <SS80_error_return+0x54>
            printf("[GPIB Error Return - Write ERROR]\n");
   15ffe:	8d e7       	ldi	r24, 0x7D	; 125
   16000:	92 e2       	ldi	r25, 0x22	; 34
   16002:	a0 e0       	ldi	r26, 0x00	; 0
   16004:	ed b7       	in	r30, 0x3d	; 61
   16006:	fe b7       	in	r31, 0x3e	; 62
   16008:	81 83       	std	Z+1, r24	; 0x01
   1600a:	92 83       	std	Z+2, r25	; 0x02
   1600c:	a3 83       	std	Z+3, r26	; 0x03
   1600e:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
        return(status & ERROR_MASK);
   16012:	8c 81       	ldd	r24, Y+4	; 0x04
   16014:	9d 81       	ldd	r25, Y+5	; 0x05
   16016:	88 27       	eor	r24, r24
   16018:	90 7d       	andi	r25, 0xD0	; 208
   1601a:	07 c0       	rjmp	.+14     	; 0x1602a <SS80_error_return+0x6c>
    }
    SS80s->qstat = 0;
   1601c:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   16020:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   16024:	12 82       	std	Z+2, r1	; 0x02
    return(0);
   16026:	80 e0       	ldi	r24, 0x00	; 0
   16028:	90 e0       	ldi	r25, 0x00	; 0
}
   1602a:	26 96       	adiw	r28, 0x06	; 6
   1602c:	e2 e0       	ldi	r30, 0x02	; 2
   1602e:	0c 94 2b e7 	jmp	0x1ce56	; 0x1ce56 <__epilogue_restores__+0x20>

00016032 <SS80_locate_and_read>:
///  - Currenly we will only process 2 ** 31 bytes Max in one transfer.
///  - If an seek or I/O error happens then we MUST continue to
/// read and discard the GPIB data until we get an EOI or GPIB error...

int SS80_locate_and_read( void )
{
   16032:	a7 e1       	ldi	r26, 0x17	; 23
   16034:	b0 e0       	ldi	r27, 0x00	; 0
   16036:	ef e1       	ldi	r30, 0x1F	; 31
   16038:	f0 eb       	ldi	r31, 0xB0	; 176
   1603a:	0c 94 00 e7 	jmp	0x1ce00	; 0x1ce00 <__prologue_saves__+0x2>
    DWORD total_bytes;
    DWORD count;
    int chunk;
    int len;
    uint16_t status;
    uint32_t Address = SS80_Blocks_to_Bytes(SS80s->AddressBlocks);
   1603e:	60 91 6e 19 	lds	r22, 0x196E	; 0x80196e <SS80s>
   16042:	70 91 6f 19 	lds	r23, 0x196F	; 0x80196f <SS80s+0x1>
   16046:	fb 01       	movw	r30, r22
   16048:	27 81       	ldd	r18, Z+7	; 0x07
   1604a:	30 85       	ldd	r19, Z+8	; 0x08
   1604c:	41 85       	ldd	r20, Z+9	; 0x09
   1604e:	52 85       	ldd	r21, Z+10	; 0x0a

/// @brief  SS80 Return current address in bytes
/// @return Byte Address
uint32_t SS80_Blocks_to_Bytes(uint32_t block)
{
    return(block * SS80p->UNIT.BYTES_PER_BLOCK);
   16050:	80 91 70 19 	lds	r24, 0x1970	; 0x801970 <SS80p>
   16054:	90 91 71 19 	lds	r25, 0x1971	; 0x801971 <SS80p+0x1>
   16058:	fc 01       	movw	r30, r24
   1605a:	a2 89       	ldd	r26, Z+18	; 0x12
   1605c:	b3 89       	ldd	r27, Z+19	; 0x13
    int chunk;
    int len;
    uint16_t status;
    uint32_t Address = SS80_Blocks_to_Bytes(SS80s->AddressBlocks);

    SS80s->qstat = 0;
   1605e:	fb 01       	movw	r30, r22
   16060:	12 82       	std	Z+2, r1	; 0x02

    status = 0;
   16062:	1d 86       	std	Y+13, r1	; 0x0d
   16064:	1c 86       	std	Y+12, r1	; 0x0c

    if( GPIB_IO_RD(IFC) == 0)
   16066:	54 98       	cbi	0x0a, 4	; 10
   16068:	4c 99       	sbic	0x09, 4	; 9
   1606a:	03 c0       	rjmp	.+6      	; 0x16072 <SS80_locate_and_read+0x40>
        return(IFC_FLAG);
   1606c:	80 e0       	ldi	r24, 0x00	; 0
   1606e:	90 e1       	ldi	r25, 0x10	; 16
   16070:	3e c1       	rjmp	.+636    	; 0x162ee <SS80_locate_and_read+0x2bc>

/// @brief  SS80 Return current address in bytes
/// @return Byte Address
uint32_t SS80_Blocks_to_Bytes(uint32_t block)
{
    return(block * SS80p->UNIT.BYTES_PER_BLOCK);
   16072:	0e 94 df e6 	call	0x1cdbe	; 0x1cdbe <__muluhisi3>
   16076:	4b 01       	movw	r8, r22
   16078:	5c 01       	movw	r10, r24
/// @todo FIXME
///  SS80 4-39
///  For now we will assume the controller will never do this

#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1607a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1607e:	85 ff       	sbrs	r24, 5
   16080:	1a c0       	rjmp	.+52     	; 0x160b6 <SS80_locate_and_read+0x84>
        printf("[SS80 Locate and Read at %08lXH(%lXH)]\n",
   16082:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   16086:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   1608a:	83 85       	ldd	r24, Z+11	; 0x0b
   1608c:	94 85       	ldd	r25, Z+12	; 0x0c
   1608e:	a5 85       	ldd	r26, Z+13	; 0x0d
   16090:	b6 85       	ldd	r27, Z+14	; 0x0e
   16092:	ed b7       	in	r30, 0x3d	; 61
   16094:	fe b7       	in	r31, 0x3e	; 62
   16096:	80 87       	std	Z+8, r24	; 0x08
   16098:	91 87       	std	Z+9, r25	; 0x09
   1609a:	a2 87       	std	Z+10, r26	; 0x0a
   1609c:	b3 87       	std	Z+11, r27	; 0x0b
   1609e:	84 82       	std	Z+4, r8	; 0x04
   160a0:	95 82       	std	Z+5, r9	; 0x05
   160a2:	a6 82       	std	Z+6, r10	; 0x06
   160a4:	b7 82       	std	Z+7, r11	; 0x07
   160a6:	87 e5       	ldi	r24, 0x57	; 87
   160a8:	99 e2       	ldi	r25, 0x29	; 41
   160aa:	a0 e0       	ldi	r26, 0x00	; 0
   160ac:	81 83       	std	Z+1, r24	; 0x01
   160ae:	92 83       	std	Z+2, r25	; 0x02
   160b0:	a3 83       	std	Z+3, r26	; 0x03
   160b2:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
            (long) Address, (long) SS80s->Length);
#endif

    if( SS80_cmd_seek() )
   160b6:	25 db       	rcall	.-2486   	; 0x15702 <SS80_cmd_seek>
   160b8:	89 2b       	or	r24, r25
   160ba:	09 f0       	breq	.+2      	; 0x160be <SS80_locate_and_read+0x8c>
   160bc:	ae c0       	rjmp	.+348    	; 0x1621a <SS80_locate_and_read+0x1e8>
    {
        return(SS80_error_return());
    }

    count = SS80s->Length;
   160be:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   160c2:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   160c6:	43 84       	ldd	r4, Z+11	; 0x0b
   160c8:	54 84       	ldd	r5, Z+12	; 0x0c
   160ca:	65 84       	ldd	r6, Z+13	; 0x0d
   160cc:	76 84       	ldd	r7, Z+14	; 0x0e
    total_bytes = 0;
   160ce:	1e 86       	std	Y+14, r1	; 0x0e
   160d0:	1f 86       	std	Y+15, r1	; 0x0f
   160d2:	18 8a       	std	Y+16, r1	; 0x10
   160d4:	19 8a       	std	Y+17, r1	; 0x11

#if SDEBUG
        if(debuglevel & GPIB_DISK_IO_TIMING)
            gpib_timer_elapsed_end("disk READ ");
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
            printf("[SS80 Disk Read %02XH bytes]\n", len);
   160d6:	89 e3       	ldi	r24, 0x39	; 57
   160d8:	99 e2       	ldi	r25, 0x29	; 41
   160da:	9c 01       	movw	r18, r24
   160dc:	40 e0       	ldi	r20, 0x00	; 0
   160de:	2a 8b       	std	Y+18, r18	; 0x12
   160e0:	3b 8b       	std	Y+19, r19	; 0x13
   160e2:	4c 8b       	std	Y+20, r20	; 0x14
        if(debuglevel & GPIB_RW_STR_TIMING)
            gpib_timer_elapsed_end("GPIB write");
#endif
        if( len != chunk)
        {
            SS80s->qstat = 1;
   160e4:	33 24       	eor	r3, r3
   160e6:	33 94       	inc	r3
            if(debuglevel & GPIB_ERR)
                printf("[SS80 GPIB Write Error]\n");
   160e8:	88 e0       	ldi	r24, 0x08	; 8
   160ea:	99 e2       	ldi	r25, 0x29	; 41
   160ec:	9c 01       	movw	r18, r24
   160ee:	40 e0       	ldi	r20, 0x00	; 0
   160f0:	2d 8b       	std	Y+21, r18	; 0x15
   160f2:	3e 8b       	std	Y+22, r19	; 0x16
   160f4:	4f 8b       	std	Y+23, r20	; 0x17
        return(SS80_error_return());
    }

    count = SS80s->Length;
    total_bytes = 0;
    while(count > 0 )
   160f6:	34 c0       	rjmp	.+104    	; 0x16160 <SS80_locate_and_read+0x12e>
                printf("[SS80 Disk Read Error]\n");
            return( SS80_error_return() );
        }

#if SDEBUG
        if(debuglevel & GPIB_RW_STR_TIMING)
   160f8:	87 fd       	sbrc	r24, 7
            gpib_timer_elapsed_begin();
   160fa:	0e 94 9a 85 	call	0x10b34	; 0x10b34 <gpib_timer_elapsed_begin>
#endif
        len = gpib_write_str(gpib_iobuff, chunk, &status);
   160fe:	ae 01       	movw	r20, r28
   16100:	44 5f       	subi	r20, 0xF4	; 244
   16102:	5f 4f       	sbci	r21, 0xFF	; 255
   16104:	b6 01       	movw	r22, r12
   16106:	82 ef       	ldi	r24, 0xF2	; 242
   16108:	9c e1       	ldi	r25, 0x1C	; 28
   1610a:	0e 94 a4 8b 	call	0x11748	; 0x11748 <gpib_write_str>
   1610e:	8c 01       	movw	r16, r24
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_TIMING)
   16110:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16114:	87 ff       	sbrs	r24, 7
   16116:	04 c0       	rjmp	.+8      	; 0x16120 <SS80_locate_and_read+0xee>
            gpib_timer_elapsed_end("GPIB write");
   16118:	81 eb       	ldi	r24, 0xB1	; 177
   1611a:	90 e1       	ldi	r25, 0x10	; 16
   1611c:	0e 94 ac 85 	call	0x10b58	; 0x10b58 <gpib_timer_elapsed_end>
#endif
        if( len != chunk)
   16120:	c0 16       	cp	r12, r16
   16122:	d1 06       	cpc	r13, r17
   16124:	09 f0       	breq	.+2      	; 0x16128 <SS80_locate_and_read+0xf6>
   16126:	82 c0       	rjmp	.+260    	; 0x1622c <SS80_locate_and_read+0x1fa>
                SS80s->Errors |= ERR_GPIB;
                break;
            }
        }

        Address += chunk;
   16128:	0d 2c       	mov	r0, r13
   1612a:	00 0c       	add	r0, r0
   1612c:	ee 08       	sbc	r14, r14
   1612e:	ff 08       	sbc	r15, r15
   16130:	8c 0c       	add	r8, r12
   16132:	9d 1c       	adc	r9, r13
   16134:	ae 1c       	adc	r10, r14
   16136:	bf 1c       	adc	r11, r15
        total_bytes = total_bytes + len;
   16138:	01 2e       	mov	r0, r17
   1613a:	00 0c       	add	r0, r0
   1613c:	22 0b       	sbc	r18, r18
   1613e:	33 0b       	sbc	r19, r19
   16140:	8e 85       	ldd	r24, Y+14	; 0x0e
   16142:	9f 85       	ldd	r25, Y+15	; 0x0f
   16144:	a8 89       	ldd	r26, Y+16	; 0x10
   16146:	b9 89       	ldd	r27, Y+17	; 0x11
   16148:	80 0f       	add	r24, r16
   1614a:	91 1f       	adc	r25, r17
   1614c:	a2 1f       	adc	r26, r18
   1614e:	b3 1f       	adc	r27, r19
   16150:	8e 87       	std	Y+14, r24	; 0x0e
   16152:	9f 87       	std	Y+15, r25	; 0x0f
   16154:	a8 8b       	std	Y+16, r26	; 0x10
   16156:	b9 8b       	std	Y+17, r27	; 0x11
        count -= len;
   16158:	40 1a       	sub	r4, r16
   1615a:	51 0a       	sbc	r5, r17
   1615c:	62 0a       	sbc	r6, r18
   1615e:	73 0a       	sbc	r7, r19
        return(SS80_error_return());
    }

    count = SS80s->Length;
    total_bytes = 0;
    while(count > 0 )
   16160:	41 14       	cp	r4, r1
   16162:	51 04       	cpc	r5, r1
   16164:	61 04       	cpc	r6, r1
   16166:	71 04       	cpc	r7, r1
   16168:	09 f4       	brne	.+2      	; 0x1616c <SS80_locate_and_read+0x13a>
   1616a:	92 c0       	rjmp	.+292    	; 0x16290 <SS80_locate_and_read+0x25e>
    {
        if( GPIB_IO_RD(IFC) == 0)
   1616c:	54 98       	cbi	0x0a, 4	; 10
   1616e:	4c 9b       	sbis	0x09, 4	; 9
   16170:	7d cf       	rjmp	.-262    	; 0x1606c <SS80_locate_and_read+0x3a>
        {
            return(IFC_FLAG);
        }

        if(count > 256)
   16172:	31 e0       	ldi	r19, 0x01	; 1
   16174:	43 16       	cp	r4, r19
   16176:	53 06       	cpc	r5, r19
   16178:	61 04       	cpc	r6, r1
   1617a:	71 04       	cpc	r7, r1
   1617c:	08 f4       	brcc	.+2      	; 0x16180 <SS80_locate_and_read+0x14e>
   1617e:	4f c0       	rjmp	.+158    	; 0x1621e <SS80_locate_and_read+0x1ec>
        {
            chunk = 256;
            status = 0;                           // GPIB status
   16180:	1d 86       	std	Y+13, r1	; 0x0d
   16182:	1c 86       	std	Y+12, r1	; 0x0c
            return(IFC_FLAG);
        }

        if(count > 256)
        {
            chunk = 256;
   16184:	c1 2c       	mov	r12, r1
   16186:	dd 24       	eor	r13, r13
   16188:	d3 94       	inc	r13
            chunk = count;
            status |= EOI_FLAG;                   // GPIB EOI on final charater
        }

#if SDEBUG
        if(debuglevel & GPIB_DISK_IO_TIMING)
   1618a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1618e:	86 fd       	sbrc	r24, 6
            gpib_timer_elapsed_begin();
   16190:	0e 94 9a 85 	call	0x10b34	; 0x10b34 <gpib_timer_elapsed_begin>
#endif

// FIXME len != chunk
        len = dbf_open_read(SS80p->HEADER.NAME, Address, gpib_iobuff, chunk, &SS80s->Errors);
   16194:	e0 90 6e 19 	lds	r14, 0x196E	; 0x80196e <SS80s>
   16198:	f0 90 6f 19 	lds	r15, 0x196F	; 0x80196f <SS80s+0x1>
   1619c:	43 e0       	ldi	r20, 0x03	; 3
   1619e:	e4 0e       	add	r14, r20
   161a0:	f1 1c       	adc	r15, r1
   161a2:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   161a6:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   161aa:	86 01       	movw	r16, r12
   161ac:	22 ef       	ldi	r18, 0xF2	; 242
   161ae:	3c e1       	ldi	r19, 0x1C	; 28
   161b0:	b5 01       	movw	r22, r10
   161b2:	a4 01       	movw	r20, r8
   161b4:	82 81       	ldd	r24, Z+2	; 0x02
   161b6:	93 81       	ldd	r25, Z+3	; 0x03
   161b8:	0e 94 ec 84 	call	0x109d8	; 0x109d8 <dbf_open_read>
   161bc:	8c 01       	movw	r16, r24

#if SDEBUG
        if(debuglevel & GPIB_DISK_IO_TIMING)
   161be:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   161c2:	86 ff       	sbrs	r24, 6
   161c4:	04 c0       	rjmp	.+8      	; 0x161ce <SS80_locate_and_read+0x19c>
            gpib_timer_elapsed_end("disk READ ");
   161c6:	86 ea       	ldi	r24, 0xA6	; 166
   161c8:	90 e1       	ldi	r25, 0x10	; 16
   161ca:	0e 94 ac 85 	call	0x10b58	; 0x10b58 <gpib_timer_elapsed_end>
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   161ce:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   161d2:	85 ff       	sbrs	r24, 5
   161d4:	0c c0       	rjmp	.+24     	; 0x161ee <SS80_locate_and_read+0x1bc>
            printf("[SS80 Disk Read %02XH bytes]\n", len);
   161d6:	ed b7       	in	r30, 0x3d	; 61
   161d8:	fe b7       	in	r31, 0x3e	; 62
   161da:	15 83       	std	Z+5, r17	; 0x05
   161dc:	04 83       	std	Z+4, r16	; 0x04
   161de:	2a 89       	ldd	r18, Y+18	; 0x12
   161e0:	3b 89       	ldd	r19, Y+19	; 0x13
   161e2:	4c 89       	ldd	r20, Y+20	; 0x14
   161e4:	21 83       	std	Z+1, r18	; 0x01
   161e6:	32 83       	std	Z+2, r19	; 0x02
   161e8:	43 83       	std	Z+3, r20	; 0x03
   161ea:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   161ee:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
#endif
        if(len < 0)
   161f2:	17 ff       	sbrs	r17, 7
   161f4:	81 cf       	rjmp	.-254    	; 0x160f8 <SS80_locate_and_read+0xc6>
        {
            SS80s->qstat = 1;
   161f6:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   161fa:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   161fe:	91 e0       	ldi	r25, 0x01	; 1
   16200:	92 83       	std	Z+2, r25	; 0x02
/// @return Return
            if(debuglevel & GPIB_ERR)
   16202:	80 ff       	sbrs	r24, 0
   16204:	0a c0       	rjmp	.+20     	; 0x1621a <SS80_locate_and_read+0x1e8>
                printf("[SS80 Disk Read Error]\n");
   16206:	81 e2       	ldi	r24, 0x21	; 33
   16208:	99 e2       	ldi	r25, 0x29	; 41
   1620a:	a0 e0       	ldi	r26, 0x00	; 0
   1620c:	ed b7       	in	r30, 0x3d	; 61
   1620e:	fe b7       	in	r31, 0x3e	; 62
   16210:	81 83       	std	Z+1, r24	; 0x01
   16212:	92 83       	std	Z+2, r25	; 0x02
   16214:	a3 83       	std	Z+3, r26	; 0x03
   16216:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
            return( SS80_error_return() );
   1621a:	d1 de       	rcall	.-606    	; 0x15fbe <SS80_error_return>
   1621c:	68 c0       	rjmp	.+208    	; 0x162ee <SS80_locate_and_read+0x2bc>
            chunk = 256;
            status = 0;                           // GPIB status
        }
        else
        {
            chunk = count;
   1621e:	62 01       	movw	r12, r4
            status |= EOI_FLAG;                   // GPIB EOI on final charater
   16220:	8c 85       	ldd	r24, Y+12	; 0x0c
   16222:	9d 85       	ldd	r25, Y+13	; 0x0d
   16224:	91 60       	ori	r25, 0x01	; 1
   16226:	9d 87       	std	Y+13, r25	; 0x0d
   16228:	8c 87       	std	Y+12, r24	; 0x0c
   1622a:	af cf       	rjmp	.-162    	; 0x1618a <SS80_locate_and_read+0x158>
        if(debuglevel & GPIB_RW_STR_TIMING)
            gpib_timer_elapsed_end("GPIB write");
#endif
        if( len != chunk)
        {
            SS80s->qstat = 1;
   1622c:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   16230:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   16234:	32 82       	std	Z+2, r3	; 0x02
            if(debuglevel & GPIB_ERR)
   16236:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1623a:	80 ff       	sbrs	r24, 0
   1623c:	0a c0       	rjmp	.+20     	; 0x16252 <SS80_locate_and_read+0x220>
                printf("[SS80 GPIB Write Error]\n");
   1623e:	2d 89       	ldd	r18, Y+21	; 0x15
   16240:	3e 89       	ldd	r19, Y+22	; 0x16
   16242:	4f 89       	ldd	r20, Y+23	; 0x17
   16244:	ed b7       	in	r30, 0x3d	; 61
   16246:	fe b7       	in	r31, 0x3e	; 62
   16248:	21 83       	std	Z+1, r18	; 0x01
   1624a:	32 83       	std	Z+2, r19	; 0x02
   1624c:	43 83       	std	Z+3, r20	; 0x03
   1624e:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
            if(status & ERROR_MASK)
   16252:	8c 85       	ldd	r24, Y+12	; 0x0c
   16254:	9d 85       	ldd	r25, Y+13	; 0x0d
   16256:	88 27       	eor	r24, r24
   16258:	90 7d       	andi	r25, 0xD0	; 208
   1625a:	89 2b       	or	r24, r25
   1625c:	09 f4       	brne	.+2      	; 0x16260 <SS80_locate_and_read+0x22e>
   1625e:	64 cf       	rjmp	.-312    	; 0x16128 <SS80_locate_and_read+0xf6>
            {
                SS80s->Errors |= ERR_GPIB;
   16260:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   16264:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   16268:	83 81       	ldd	r24, Z+3	; 0x03
   1626a:	94 81       	ldd	r25, Z+4	; 0x04
   1626c:	80 62       	ori	r24, 0x20	; 32
   1626e:	94 83       	std	Z+4, r25	; 0x04
   16270:	83 83       	std	Z+3, r24	; 0x03
        count -= len;
    }
///  Note: this should not happen unless we exit on errors above
    if(count > 0)
    {
        if(debuglevel & GPIB_ERR)
   16272:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16276:	80 ff       	sbrs	r24, 0
   16278:	21 c0       	rjmp	.+66     	; 0x162bc <SS80_locate_and_read+0x28a>
            printf("[SS80 Buffered Read DID NOT FINISH]\n");
   1627a:	83 ee       	ldi	r24, 0xE3	; 227
   1627c:	98 e2       	ldi	r25, 0x28	; 40
   1627e:	a0 e0       	ldi	r26, 0x00	; 0
   16280:	ed b7       	in	r30, 0x3d	; 61
   16282:	fe b7       	in	r31, 0x3e	; 62
   16284:	81 83       	std	Z+1, r24	; 0x01
   16286:	92 83       	std	Z+2, r25	; 0x02
   16288:	a3 83       	std	Z+3, r26	; 0x03
   1628a:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   1628e:	16 c0       	rjmp	.+44     	; 0x162bc <SS80_locate_and_read+0x28a>
    }
    else
    {
#if SDEBUG
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16290:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16294:	85 ff       	sbrs	r24, 5
   16296:	12 c0       	rjmp	.+36     	; 0x162bc <SS80_locate_and_read+0x28a>
            printf("[SS80 Buffered Read Total(%lXH) bytes]\n", (long) total_bytes);
   16298:	8e 85       	ldd	r24, Y+14	; 0x0e
   1629a:	9f 85       	ldd	r25, Y+15	; 0x0f
   1629c:	a8 89       	ldd	r26, Y+16	; 0x10
   1629e:	b9 89       	ldd	r27, Y+17	; 0x11
   162a0:	ed b7       	in	r30, 0x3d	; 61
   162a2:	fe b7       	in	r31, 0x3e	; 62
   162a4:	84 83       	std	Z+4, r24	; 0x04
   162a6:	95 83       	std	Z+5, r25	; 0x05
   162a8:	a6 83       	std	Z+6, r26	; 0x06
   162aa:	b7 83       	std	Z+7, r27	; 0x07
   162ac:	8b eb       	ldi	r24, 0xBB	; 187
   162ae:	98 e2       	ldi	r25, 0x28	; 40
   162b0:	a0 e0       	ldi	r26, 0x00	; 0
   162b2:	81 83       	std	Z+1, r24	; 0x01
   162b4:	92 83       	std	Z+2, r25	; 0x02
   162b6:	a3 83       	std	Z+3, r26	; 0x03
   162b8:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
#endif
    }

    SS80s->AddressBlocks = SS80_Bytes_to_Blocks(Address);
   162bc:	00 91 6e 19 	lds	r16, 0x196E	; 0x80196e <SS80s>
   162c0:	10 91 6f 19 	lds	r17, 0x196F	; 0x80196f <SS80s+0x1>

/// @brief  SS80 Return current block addresss from bytes
/// @return Block Address
uint32_t SS80_Bytes_to_Blocks(uint32_t bytes)
{
    return(bytes / SS80p->UNIT.BYTES_PER_BLOCK);
   162c4:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   162c8:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
            printf("[SS80 Buffered Read Total(%lXH) bytes]\n", (long) total_bytes);
#endif
    }

    SS80s->AddressBlocks = SS80_Bytes_to_Blocks(Address);
   162cc:	22 89       	ldd	r18, Z+18	; 0x12
   162ce:	33 89       	ldd	r19, Z+19	; 0x13
   162d0:	40 e0       	ldi	r20, 0x00	; 0
   162d2:	50 e0       	ldi	r21, 0x00	; 0
   162d4:	c5 01       	movw	r24, r10
   162d6:	b4 01       	movw	r22, r8
   162d8:	0e 94 92 e6 	call	0x1cd24	; 0x1cd24 <__udivmodsi4>
   162dc:	f8 01       	movw	r30, r16
   162de:	27 83       	std	Z+7, r18	; 0x07
   162e0:	30 87       	std	Z+8, r19	; 0x08
   162e2:	41 87       	std	Z+9, r20	; 0x09
   162e4:	52 87       	std	Z+10, r21	; 0x0a
    return (status & ERROR_MASK);
   162e6:	8c 85       	ldd	r24, Y+12	; 0x0c
   162e8:	9d 85       	ldd	r25, Y+13	; 0x0d
   162ea:	88 27       	eor	r24, r24
   162ec:	90 7d       	andi	r25, 0xD0	; 208
}
   162ee:	67 96       	adiw	r28, 0x17	; 23
   162f0:	e1 e1       	ldi	r30, 0x11	; 17
   162f2:	0c 94 1c e7 	jmp	0x1ce38	; 0x1ce38 <__epilogue_restores__+0x2>

000162f6 <SS80_Execute_State>:
/// - State: EXEC STATE COMMAND
/// @return 0 on sucess
/// @return GPIB error flags on fail
/// @see gpib.h ERROR_MASK defines for a full list of error flags.
int SS80_Execute_State(void)
{
   162f6:	cf 93       	push	r28
   162f8:	df 93       	push	r29
   162fa:	00 d0       	rcall	.+0      	; 0x162fc <SS80_Execute_State+0x6>
   162fc:	00 d0       	rcall	.+0      	; 0x162fe <SS80_Execute_State+0x8>
   162fe:	1f 92       	push	r1
    int ret = 0;

    gpib_disable_PPR(SS80p->HEADER.PPR);
   16300:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   16304:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   16308:	81 81       	ldd	r24, Z+1	; 0x01
   1630a:	90 e0       	ldi	r25, 0x00	; 0
   1630c:	0e 94 aa 86 	call	0x10d54	; 0x10d54 <gpib_disable_PPR>
    switch(SS80s->estate)
   16310:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   16314:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   16318:	80 81       	ld	r24, Z
   1631a:	91 81       	ldd	r25, Z+1	; 0x01
   1631c:	82 30       	cpi	r24, 0x02	; 2
   1631e:	91 05       	cpc	r25, r1
   16320:	89 f0       	breq	.+34     	; 0x16344 <SS80_Execute_State+0x4e>
   16322:	3c f4       	brge	.+14     	; 0x16332 <SS80_Execute_State+0x3c>
   16324:	00 97       	sbiw	r24, 0x00	; 0
   16326:	81 f1       	breq	.+96     	; 0x16388 <SS80_Execute_State+0x92>
   16328:	81 30       	cpi	r24, 0x01	; 1
   1632a:	91 05       	cpc	r25, r1
   1632c:	b9 f4       	brne	.+46     	; 0x1635c <SS80_Execute_State+0x66>
    {
        case EXEC_IDLE:
            break;
        case EXEC_LOCATE_AND_READ:
            ret = SS80_locate_and_read();
   1632e:	81 de       	rcall	.-766    	; 0x16032 <SS80_locate_and_read>
   16330:	0d c0       	rjmp	.+26     	; 0x1634c <SS80_Execute_State+0x56>
int SS80_Execute_State(void)
{
    int ret = 0;

    gpib_disable_PPR(SS80p->HEADER.PPR);
    switch(SS80s->estate)
   16332:	83 30       	cpi	r24, 0x03	; 3
   16334:	91 05       	cpc	r25, r1
   16336:	41 f0       	breq	.+16     	; 0x16348 <SS80_Execute_State+0x52>
   16338:	84 30       	cpi	r24, 0x04	; 4
   1633a:	91 05       	cpc	r25, r1
   1633c:	79 f4       	brne	.+30     	; 0x1635c <SS80_Execute_State+0x66>
        case EXEC_SEND_STATUS:
            ret = SS80_send_status();
            SS80s->estate = EXEC_IDLE;
            break;
        case EXEC_DESCRIBE:
            ret = SS80_describe();
   1633e:	0e 94 4a a8 	call	0x15094	; 0x15094 <SS80_describe>
        case EXEC_LOCATE_AND_READ:
            ret = SS80_locate_and_read();
            SS80s->estate = EXEC_IDLE;
            break;
        case EXEC_LOCATE_AND_WRITE:
            ret = SS80_locate_and_write();
   16342:	04 c0       	rjmp	.+8      	; 0x1634c <SS80_Execute_State+0x56>
   16344:	53 da       	rcall	.-2906   	; 0x157ec <SS80_locate_and_write>
   16346:	02 c0       	rjmp	.+4      	; 0x1634c <SS80_Execute_State+0x56>
            SS80s->estate = EXEC_IDLE;
            break;
        case EXEC_SEND_STATUS:
            ret = SS80_send_status();
   16348:	0e 94 c9 a7 	call	0x14f92	; 0x14f92 <SS80_send_status>
            SS80s->estate = EXEC_IDLE;
            break;
        case EXEC_DESCRIBE:
            ret = SS80_describe();
   1634c:	ec 01       	movw	r28, r24
            SS80s->estate = EXEC_IDLE;
   1634e:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   16352:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   16356:	11 82       	std	Z+1, r1	; 0x01
   16358:	10 82       	st	Z, r1
            break;
   1635a:	18 c0       	rjmp	.+48     	; 0x1638c <SS80_Execute_State+0x96>
        default:
            if(debuglevel & GPIB_ERR)
   1635c:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   16360:	20 ff       	sbrs	r18, 0
   16362:	0c c0       	rjmp	.+24     	; 0x1637c <SS80_Execute_State+0x86>
                printf("[SS80 EXEC state:%d error]\n", SS80s->estate);
   16364:	ed b7       	in	r30, 0x3d	; 61
   16366:	fe b7       	in	r31, 0x3e	; 62
   16368:	95 83       	std	Z+5, r25	; 0x05
   1636a:	84 83       	std	Z+4, r24	; 0x04
   1636c:	8f e7       	ldi	r24, 0x7F	; 127
   1636e:	99 e2       	ldi	r25, 0x29	; 41
   16370:	a0 e0       	ldi	r26, 0x00	; 0
   16372:	81 83       	std	Z+1, r24	; 0x01
   16374:	92 83       	std	Z+2, r25	; 0x02
   16376:	a3 83       	std	Z+3, r26	; 0x03
   16378:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
            SS80s->estate = EXEC_IDLE;
   1637c:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   16380:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   16384:	11 82       	std	Z+1, r1	; 0x01
   16386:	10 82       	st	Z, r1
/// @return 0 on sucess
/// @return GPIB error flags on fail
/// @see gpib.h ERROR_MASK defines for a full list of error flags.
int SS80_Execute_State(void)
{
    int ret = 0;
   16388:	c0 e0       	ldi	r28, 0x00	; 0
   1638a:	d0 e0       	ldi	r29, 0x00	; 0
            if(debuglevel & GPIB_ERR)
                printf("[SS80 EXEC state:%d error]\n", SS80s->estate);
            SS80s->estate = EXEC_IDLE;
            break;
    }
    gpib_enable_PPR(SS80p->HEADER.PPR);
   1638c:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   16390:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   16394:	81 81       	ldd	r24, Z+1	; 0x01
   16396:	90 e0       	ldi	r25, 0x00	; 0
   16398:	0e 94 74 86 	call	0x10ce8	; 0x10ce8 <gpib_enable_PPR>
    return(ret);
}
   1639c:	ce 01       	movw	r24, r28
   1639e:	cd b7       	in	r28, 0x3d	; 61
   163a0:	de b7       	in	r29, 0x3e	; 62
   163a2:	25 96       	adiw	r28, 0x05	; 5
   163a4:	e2 e0       	ldi	r30, 0x02	; 2
   163a6:	0c 94 2b e7 	jmp	0x1ce56	; 0x1ce56 <__epilogue_restores__+0x20>

000163aa <SS80_COMMANDS>:
/// @param[in] ch command.
/// @return  0 on send
/// @see GPIB error status
/// @see gpib.h _FLAGS defines for a full list.
int SS80_COMMANDS(uint8_t ch)
{
   163aa:	a9 e0       	ldi	r26, 0x09	; 9
   163ac:	b0 e0       	ldi	r27, 0x00	; 0
   163ae:	eb ed       	ldi	r30, 0xDB	; 219
   163b0:	f1 eb       	ldi	r31, 0xB1	; 177
   163b2:	0c 94 0e e7 	jmp	0x1ce1c	; 0x1ce1c <__prologue_saves__+0x1e>
   163b6:	18 2f       	mov	r17, r24
    if(SS80_is_MTA(talking) || SS80_is_MLA(listening))
   163b8:	80 91 f6 1e 	lds	r24, 0x1EF6	; 0x801ef6 <talking>
   163bc:	90 e0       	ldi	r25, 0x00	; 0
   163be:	0e 94 b6 8c 	call	0x1196c	; 0x1196c <SS80_is_MTA>
   163c2:	89 2b       	or	r24, r25
   163c4:	19 f0       	breq	.+6      	; 0x163cc <SS80_COMMANDS+0x22>
    {
        if(ch == 0x65 )
   163c6:	15 36       	cpi	r17, 0x65	; 101
   163c8:	19 f5       	brne	.+70     	; 0x16410 <SS80_COMMANDS+0x66>
   163ca:	09 c0       	rjmp	.+18     	; 0x163de <SS80_COMMANDS+0x34>
/// @return  0 on send
/// @see GPIB error status
/// @see gpib.h _FLAGS defines for a full list.
int SS80_COMMANDS(uint8_t ch)
{
    if(SS80_is_MTA(talking) || SS80_is_MLA(listening))
   163cc:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   163d0:	90 e0       	ldi	r25, 0x00	; 0
   163d2:	0e 94 a4 8c 	call	0x11948	; 0x11948 <SS80_is_MLA>
   163d6:	ec 01       	movw	r28, r24
   163d8:	89 2b       	or	r24, r25
   163da:	a9 f7       	brne	.-22     	; 0x163c6 <SS80_COMMANDS+0x1c>
   163dc:	ad c0       	rjmp	.+346    	; 0x16538 <SS80_COMMANDS+0x18e>
    {
        if(ch == 0x65 )
        {
            if(SS80_is_MLA(listening))
   163de:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   163e2:	90 e0       	ldi	r25, 0x00	; 0
   163e4:	0e 94 a4 8c 	call	0x11948	; 0x11948 <SS80_is_MLA>
   163e8:	89 2b       	or	r24, r25
   163ea:	09 f4       	brne	.+2      	; 0x163ee <SS80_COMMANDS+0x44>
   163ec:	a2 c0       	rjmp	.+324    	; 0x16532 <SS80_COMMANDS+0x188>
            {
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   163ee:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   163f2:	85 ff       	sbrs	r24, 5
   163f4:	0a c0       	rjmp	.+20     	; 0x1640a <SS80_COMMANDS+0x60>
                    printf("[SS80 Command State]\n");
   163f6:	87 e6       	ldi	r24, 0x67	; 103
   163f8:	92 e2       	ldi	r25, 0x22	; 34
   163fa:	a0 e0       	ldi	r26, 0x00	; 0
   163fc:	ed b7       	in	r30, 0x3d	; 61
   163fe:	fe b7       	in	r31, 0x3e	; 62
   16400:	81 83       	std	Z+1, r24	; 0x01
   16402:	92 83       	std	Z+2, r25	; 0x02
   16404:	a3 83       	std	Z+3, r26	; 0x03
   16406:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
#endif
                return ( SS80_Command_State() );
   1640a:	0e 94 0a a9 	call	0x15214	; 0x15214 <SS80_Command_State>
   1640e:	73 c0       	rjmp	.+230    	; 0x164f6 <SS80_COMMANDS+0x14c>
            }
            return(0);
        }

        if(ch == 0x6e )
   16410:	1e 36       	cpi	r17, 0x6E	; 110
   16412:	01 f5       	brne	.+64     	; 0x16454 <SS80_COMMANDS+0xaa>
        {
            if(SS80_is_MLA(listening)  || SS80_is_MTA(talking))
   16414:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   16418:	90 e0       	ldi	r25, 0x00	; 0
   1641a:	0e 94 a4 8c 	call	0x11948	; 0x11948 <SS80_is_MLA>
   1641e:	89 2b       	or	r24, r25
   16420:	79 f0       	breq	.+30     	; 0x16440 <SS80_COMMANDS+0x96>
            {
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16422:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16426:	85 ff       	sbrs	r24, 5
   16428:	13 c0       	rjmp	.+38     	; 0x16450 <SS80_COMMANDS+0xa6>
                    printf("[SS00 Execute State]\n");
   1642a:	81 e5       	ldi	r24, 0x51	; 81
   1642c:	92 e2       	ldi	r25, 0x22	; 34
   1642e:	a0 e0       	ldi	r26, 0x00	; 0
   16430:	ed b7       	in	r30, 0x3d	; 61
   16432:	fe b7       	in	r31, 0x3e	; 62
   16434:	81 83       	std	Z+1, r24	; 0x01
   16436:	92 83       	std	Z+2, r25	; 0x02
   16438:	a3 83       	std	Z+3, r26	; 0x03
   1643a:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   1643e:	08 c0       	rjmp	.+16     	; 0x16450 <SS80_COMMANDS+0xa6>
            return(0);
        }

        if(ch == 0x6e )
        {
            if(SS80_is_MLA(listening)  || SS80_is_MTA(talking))
   16440:	80 91 f6 1e 	lds	r24, 0x1EF6	; 0x801ef6 <talking>
   16444:	90 e0       	ldi	r25, 0x00	; 0
   16446:	0e 94 b6 8c 	call	0x1196c	; 0x1196c <SS80_is_MTA>
   1644a:	89 2b       	or	r24, r25
   1644c:	51 f7       	brne	.-44     	; 0x16422 <SS80_COMMANDS+0x78>
   1644e:	71 c0       	rjmp	.+226    	; 0x16532 <SS80_COMMANDS+0x188>
            {
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
                    printf("[SS00 Execute State]\n");
                return ( SS80_Execute_State() );
   16450:	52 df       	rcall	.-348    	; 0x162f6 <SS80_Execute_State>
   16452:	51 c0       	rjmp	.+162    	; 0x164f6 <SS80_COMMANDS+0x14c>

            }
            return(0);
        }

        if(ch == 0x70 )
   16454:	10 37       	cpi	r17, 0x70	; 112
   16456:	b9 f5       	brne	.+110    	; 0x164c6 <SS80_COMMANDS+0x11c>
        {
            if(SS80_is_MTA(talking) )
   16458:	80 91 f6 1e 	lds	r24, 0x1EF6	; 0x801ef6 <talking>
   1645c:	90 e0       	ldi	r25, 0x00	; 0
   1645e:	0e 94 b6 8c 	call	0x1196c	; 0x1196c <SS80_is_MTA>
   16462:	89 2b       	or	r24, r25
   16464:	81 f0       	breq	.+32     	; 0x16486 <SS80_COMMANDS+0xdc>
            {
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16466:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1646a:	85 ff       	sbrs	r24, 5
   1646c:	0a c0       	rjmp	.+20     	; 0x16482 <SS80_COMMANDS+0xd8>
                    printf("[SS80 Report State]\n");
   1646e:	8c e3       	ldi	r24, 0x3C	; 60
   16470:	92 e2       	ldi	r25, 0x22	; 34
   16472:	a0 e0       	ldi	r26, 0x00	; 0
   16474:	ed b7       	in	r30, 0x3d	; 61
   16476:	fe b7       	in	r31, 0x3e	; 62
   16478:	81 83       	std	Z+1, r24	; 0x01
   1647a:	92 83       	std	Z+2, r25	; 0x02
   1647c:	a3 83       	std	Z+3, r26	; 0x03
   1647e:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
#endif
                return( SS80_Report() );
   16482:	46 db       	rcall	.-2420   	; 0x15b10 <SS80_Report>
   16484:	38 c0       	rjmp	.+112    	; 0x164f6 <SS80_COMMANDS+0x14c>
            }

            if(SS80_is_MLA(listening))
   16486:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   1648a:	90 e0       	ldi	r25, 0x00	; 0
   1648c:	0e 94 a4 8c 	call	0x11948	; 0x11948 <SS80_is_MLA>
   16490:	89 2b       	or	r24, r25
   16492:	09 f4       	brne	.+2      	; 0x16496 <SS80_COMMANDS+0xec>
   16494:	4e c0       	rjmp	.+156    	; 0x16532 <SS80_COMMANDS+0x188>
            {
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16496:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1649a:	85 ff       	sbrs	r24, 5
   1649c:	0a c0       	rjmp	.+20     	; 0x164b2 <SS80_COMMANDS+0x108>
                    printf("[Amigo Clear]\n");
   1649e:	8d e2       	ldi	r24, 0x2D	; 45
   164a0:	92 e2       	ldi	r25, 0x22	; 34
   164a2:	a0 e0       	ldi	r26, 0x00	; 0
   164a4:	ed b7       	in	r30, 0x3d	; 61
   164a6:	fe b7       	in	r31, 0x3e	; 62
   164a8:	81 83       	std	Z+1, r24	; 0x01
   164aa:	92 83       	std	Z+2, r25	; 0x02
   164ac:	a3 83       	std	Z+3, r26	; 0x03
   164ae:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
#endif
                gpib_disable_PPR(SS80p->HEADER.PPR);
   164b2:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   164b6:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   164ba:	81 81       	ldd	r24, Z+1	; 0x01
   164bc:	90 e0       	ldi	r25, 0x00	; 0
   164be:	0e 94 aa 86 	call	0x10d54	; 0x10d54 <gpib_disable_PPR>
                return( SS80_Amigo_Clear() );
   164c2:	1d dc       	rcall	.-1990   	; 0x15cfe <SS80_Amigo_Clear>
   164c4:	18 c0       	rjmp	.+48     	; 0x164f6 <SS80_COMMANDS+0x14c>
            }
            return (0);
        }
        if(ch == 0x72 )
   164c6:	12 37       	cpi	r17, 0x72	; 114
   164c8:	c1 f4       	brne	.+48     	; 0x164fa <SS80_COMMANDS+0x150>
        {
            if(SS80_is_MLA(listening) )
   164ca:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   164ce:	90 e0       	ldi	r25, 0x00	; 0
   164d0:	0e 94 a4 8c 	call	0x11948	; 0x11948 <SS80_is_MLA>
   164d4:	89 2b       	or	r24, r25
   164d6:	89 f0       	breq	.+34     	; 0x164fa <SS80_COMMANDS+0x150>
            {
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   164d8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   164dc:	85 ff       	sbrs	r24, 5
   164de:	0a c0       	rjmp	.+20     	; 0x164f4 <SS80_COMMANDS+0x14a>
                    printf("[SS80 Transparent]\n");
   164e0:	89 e1       	ldi	r24, 0x19	; 25
   164e2:	92 e2       	ldi	r25, 0x22	; 34
   164e4:	a0 e0       	ldi	r26, 0x00	; 0
   164e6:	ed b7       	in	r30, 0x3d	; 61
   164e8:	fe b7       	in	r31, 0x3e	; 62
   164ea:	81 83       	std	Z+1, r24	; 0x01
   164ec:	92 83       	std	Z+2, r25	; 0x02
   164ee:	a3 83       	std	Z+3, r26	; 0x03
   164f0:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
#endif
                return( SS80_Transparent_State() );
   164f4:	58 dc       	rcall	.-1872   	; 0x15da6 <SS80_Transparent_State>
   164f6:	ec 01       	movw	r28, r24
   164f8:	3b c0       	rjmp	.+118    	; 0x16570 <SS80_COMMANDS+0x1c6>
            }
        }
        if(debuglevel & GPIB_ERR)
   164fa:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   164fe:	80 ff       	sbrs	r24, 0
   16500:	18 c0       	rjmp	.+48     	; 0x16532 <SS80_COMMANDS+0x188>
            printf("[SS80 SC Unknown: %02XH, listen:%02XH, talk:%02XH]\n",
   16502:	80 91 f6 1e 	lds	r24, 0x1EF6	; 0x801ef6 <talking>
   16506:	90 e0       	ldi	r25, 0x00	; 0
   16508:	ed b7       	in	r30, 0x3d	; 61
   1650a:	fe b7       	in	r31, 0x3e	; 62
   1650c:	91 87       	std	Z+9, r25	; 0x09
   1650e:	80 87       	std	Z+8, r24	; 0x08
   16510:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   16514:	90 e0       	ldi	r25, 0x00	; 0
   16516:	97 83       	std	Z+7, r25	; 0x07
   16518:	86 83       	std	Z+6, r24	; 0x06
   1651a:	81 2f       	mov	r24, r17
   1651c:	90 e0       	ldi	r25, 0x00	; 0
   1651e:	95 83       	std	Z+5, r25	; 0x05
   16520:	84 83       	std	Z+4, r24	; 0x04
   16522:	85 ee       	ldi	r24, 0xE5	; 229
   16524:	91 e2       	ldi	r25, 0x21	; 33
   16526:	a0 e0       	ldi	r26, 0x00	; 0
   16528:	81 83       	std	Z+1, r24	; 0x01
   1652a:	92 83       	std	Z+2, r25	; 0x02
   1652c:	a3 83       	std	Z+3, r26	; 0x03
   1652e:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
                0xff & ch, 0xff & listening, 0xff & talking);
        return(0);
   16532:	c0 e0       	ldi	r28, 0x00	; 0
   16534:	d0 e0       	ldi	r29, 0x00	; 0
   16536:	1c c0       	rjmp	.+56     	; 0x16570 <SS80_COMMANDS+0x1c6>
    }

    if(debuglevel & GPIB_ERR)
   16538:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1653c:	80 ff       	sbrs	r24, 0
   1653e:	f9 cf       	rjmp	.-14     	; 0x16532 <SS80_COMMANDS+0x188>
        printf("[SS80 Unknown SC: %02XH, listen:%02XH, talk:%02XH]\n",
   16540:	80 91 f6 1e 	lds	r24, 0x1EF6	; 0x801ef6 <talking>
   16544:	90 e0       	ldi	r25, 0x00	; 0
   16546:	ed b7       	in	r30, 0x3d	; 61
   16548:	fe b7       	in	r31, 0x3e	; 62
   1654a:	91 87       	std	Z+9, r25	; 0x09
   1654c:	80 87       	std	Z+8, r24	; 0x08
   1654e:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   16552:	90 e0       	ldi	r25, 0x00	; 0
   16554:	97 83       	std	Z+7, r25	; 0x07
   16556:	86 83       	std	Z+6, r24	; 0x06
   16558:	81 2f       	mov	r24, r17
   1655a:	90 e0       	ldi	r25, 0x00	; 0
   1655c:	95 83       	std	Z+5, r25	; 0x05
   1655e:	84 83       	std	Z+4, r24	; 0x04
   16560:	81 eb       	ldi	r24, 0xB1	; 177
   16562:	91 e2       	ldi	r25, 0x21	; 33
   16564:	a0 e0       	ldi	r26, 0x00	; 0
   16566:	81 83       	std	Z+1, r24	; 0x01
   16568:	92 83       	std	Z+2, r25	; 0x02
   1656a:	a3 83       	std	Z+3, r26	; 0x03
   1656c:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
            0xff & ch, 0xff & listening, 0xff & talking);
    return(0);
}
   16570:	ce 01       	movw	r24, r28
   16572:	cd b7       	in	r28, 0x3d	; 61
   16574:	de b7       	in	r29, 0x3e	; 62
   16576:	29 96       	adiw	r28, 0x09	; 9
   16578:	e3 e0       	ldi	r30, 0x03	; 3
   1657a:	0c 94 2a e7 	jmp	0x1ce54	; 0x1ce54 <__epilogue_restores__+0x1e>

0001657e <amigo_overflow_check>:
    }
/// @todo FIXME
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
    AMIGOs->dsj = 0;
    return(status & ERROR_MASK);
}
   1657e:	cf 92       	push	r12
   16580:	df 92       	push	r13
   16582:	ef 92       	push	r14
   16584:	0f 93       	push	r16
   16586:	1f 93       	push	r17
   16588:	cf 93       	push	r28
   1658a:	df 93       	push	r29
   1658c:	00 d0       	rcall	.+0      	; 0x1658e <amigo_overflow_check+0x10>
   1658e:	00 d0       	rcall	.+0      	; 0x16590 <amigo_overflow_check+0x12>
   16590:	1f 92       	push	r1
   16592:	ec 01       	movw	r28, r24
   16594:	8b 01       	movw	r16, r22
   16596:	80 e0       	ldi	r24, 0x00	; 0
   16598:	90 e0       	ldi	r25, 0x00	; 0
   1659a:	29 e6       	ldi	r18, 0x69	; 105
   1659c:	31 e3       	ldi	r19, 0x31	; 49
   1659e:	69 01       	movw	r12, r18
   165a0:	e1 2c       	mov	r14, r1
   165a2:	2d 81       	ldd	r18, Y+5	; 0x05
   165a4:	30 e0       	ldi	r19, 0x00	; 0
   165a6:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   165aa:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   165ae:	42 85       	ldd	r20, Z+10	; 0x0a
   165b0:	53 85       	ldd	r21, Z+11	; 0x0b
   165b2:	24 17       	cp	r18, r20
   165b4:	35 07       	cpc	r19, r21
   165b6:	64 f1       	brlt	.+88     	; 0x16610 <amigo_overflow_check+0x92>
   165b8:	1d 82       	std	Y+5, r1	; 0x05
   165ba:	2c 81       	ldd	r18, Y+4	; 0x04
   165bc:	2f 5f       	subi	r18, 0xFF	; 255
   165be:	2c 83       	std	Y+4, r18	; 0x04
   165c0:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   165c4:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   165c8:	2c 81       	ldd	r18, Y+4	; 0x04
   165ca:	30 e0       	ldi	r19, 0x00	; 0
   165cc:	44 85       	ldd	r20, Z+12	; 0x0c
   165ce:	55 85       	ldd	r21, Z+13	; 0x0d
   165d0:	24 17       	cp	r18, r20
   165d2:	35 07       	cpc	r19, r21
   165d4:	34 f3       	brlt	.-52     	; 0x165a2 <amigo_overflow_check+0x24>
   165d6:	1c 82       	std	Y+4, r1	; 0x04
   165d8:	2b 81       	ldd	r18, Y+3	; 0x03
   165da:	2f 5f       	subi	r18, 0xFF	; 255
   165dc:	2b 83       	std	Y+3, r18	; 0x03
   165de:	30 e0       	ldi	r19, 0x00	; 0
   165e0:	46 85       	ldd	r20, Z+14	; 0x0e
   165e2:	57 85       	ldd	r21, Z+15	; 0x0f
   165e4:	24 17       	cp	r18, r20
   165e6:	35 07       	cpc	r19, r21
   165e8:	5c f3       	brlt	.-42     	; 0x165c0 <amigo_overflow_check+0x42>
   165ea:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   165ee:	80 ff       	sbrs	r24, 0
   165f0:	0c c0       	rjmp	.+24     	; 0x1660a <amigo_overflow_check+0x8c>
   165f2:	01 15       	cp	r16, r1
   165f4:	11 05       	cpc	r17, r1
   165f6:	49 f0       	breq	.+18     	; 0x1660a <amigo_overflow_check+0x8c>
   165f8:	ed b7       	in	r30, 0x3d	; 61
   165fa:	fe b7       	in	r31, 0x3e	; 62
   165fc:	15 83       	std	Z+5, r17	; 0x05
   165fe:	04 83       	std	Z+4, r16	; 0x04
   16600:	c1 82       	std	Z+1, r12	; 0x01
   16602:	d2 82       	std	Z+2, r13	; 0x02
   16604:	e3 82       	std	Z+3, r14	; 0x03
   16606:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   1660a:	81 e0       	ldi	r24, 0x01	; 1
   1660c:	90 e0       	ldi	r25, 0x00	; 0
   1660e:	d8 cf       	rjmp	.-80     	; 0x165c0 <amigo_overflow_check+0x42>
   16610:	0f 90       	pop	r0
   16612:	0f 90       	pop	r0
   16614:	0f 90       	pop	r0
   16616:	0f 90       	pop	r0
   16618:	0f 90       	pop	r0
   1661a:	df 91       	pop	r29
   1661c:	cf 91       	pop	r28
   1661e:	1f 91       	pop	r17
   16620:	0f 91       	pop	r16
   16622:	ef 90       	pop	r14
   16624:	df 90       	pop	r13
   16626:	cf 90       	pop	r12
   16628:	08 95       	ret

0001662a <amigo_chs_to_logical>:
   1662a:	a1 e1       	ldi	r26, 0x11	; 17
   1662c:	b0 e0       	ldi	r27, 0x00	; 0
   1662e:	eb e1       	ldi	r30, 0x1B	; 27
   16630:	f3 eb       	ldi	r31, 0xB3	; 179
   16632:	0c 94 03 e7 	jmp	0x1ce06	; 0x1ce06 <__prologue_saves__+0x8>
   16636:	8b 01       	movw	r16, r22
   16638:	60 91 6c 19 	lds	r22, 0x196C	; 0x80196c <AMIGOp>
   1663c:	70 91 6d 19 	lds	r23, 0x196D	; 0x80196d <AMIGOp+0x1>
   16640:	fb 01       	movw	r30, r22
   16642:	42 85       	ldd	r20, Z+10	; 0x0a
   16644:	53 85       	ldd	r21, Z+11	; 0x0b
   16646:	fc 01       	movw	r30, r24
   16648:	c4 81       	ldd	r28, Z+4	; 0x04
   1664a:	d0 e0       	ldi	r29, 0x00	; 0
   1664c:	4c 9f       	mul	r20, r28
   1664e:	90 01       	movw	r18, r0
   16650:	4d 9f       	mul	r20, r29
   16652:	30 0d       	add	r19, r0
   16654:	5c 9f       	mul	r21, r28
   16656:	30 0d       	add	r19, r0
   16658:	11 24       	eor	r1, r1
   1665a:	49 01       	movw	r8, r18
   1665c:	33 0f       	add	r19, r19
   1665e:	aa 08       	sbc	r10, r10
   16660:	bb 08       	sbc	r11, r11
   16662:	63 80       	ldd	r6, Z+3	; 0x03
   16664:	71 2c       	mov	r7, r1
   16666:	fb 01       	movw	r30, r22
   16668:	e4 84       	ldd	r14, Z+12	; 0x0c
   1666a:	f5 84       	ldd	r15, Z+13	; 0x0d
   1666c:	4e 9d       	mul	r20, r14
   1666e:	d0 01       	movw	r26, r0
   16670:	4f 9d       	mul	r20, r15
   16672:	b0 0d       	add	r27, r0
   16674:	5e 9d       	mul	r21, r14
   16676:	b0 0d       	add	r27, r0
   16678:	11 24       	eor	r1, r1
   1667a:	a6 9d       	mul	r26, r6
   1667c:	90 01       	movw	r18, r0
   1667e:	a7 9d       	mul	r26, r7
   16680:	30 0d       	add	r19, r0
   16682:	b6 9d       	mul	r27, r6
   16684:	30 0d       	add	r19, r0
   16686:	11 24       	eor	r1, r1
   16688:	69 01       	movw	r12, r18
   1668a:	33 0f       	add	r19, r19
   1668c:	ee 08       	sbc	r14, r14
   1668e:	ff 08       	sbc	r15, r15
   16690:	8c 0c       	add	r8, r12
   16692:	9d 1c       	adc	r9, r13
   16694:	ae 1c       	adc	r10, r14
   16696:	bf 1c       	adc	r11, r15
   16698:	fc 01       	movw	r30, r24
   1669a:	f5 80       	ldd	r15, Z+5	; 0x05
   1669c:	a5 01       	movw	r20, r10
   1669e:	94 01       	movw	r18, r8
   166a0:	2f 0d       	add	r18, r15
   166a2:	31 1d       	adc	r19, r1
   166a4:	41 1d       	adc	r20, r1
   166a6:	51 1d       	adc	r21, r1
   166a8:	fb 01       	movw	r30, r22
   166aa:	a0 85       	ldd	r26, Z+8	; 0x08
   166ac:	b1 85       	ldd	r27, Z+9	; 0x09
   166ae:	0e 94 e9 e6 	call	0x1cdd2	; 0x1cdd2 <__mulshisi3>
   166b2:	4b 01       	movw	r8, r22
   166b4:	5c 01       	movw	r10, r24
   166b6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   166ba:	85 ff       	sbrs	r24, 5
   166bc:	22 c0       	rjmp	.+68     	; 0x16702 <amigo_chs_to_logical+0xd8>
   166be:	8f 2d       	mov	r24, r15
   166c0:	90 e0       	ldi	r25, 0x00	; 0
   166c2:	ed b7       	in	r30, 0x3d	; 61
   166c4:	fe b7       	in	r31, 0x3e	; 62
   166c6:	91 8b       	std	Z+17, r25	; 0x11
   166c8:	80 8b       	std	Z+16, r24	; 0x10
   166ca:	d7 87       	std	Z+15, r29	; 0x0f
   166cc:	c6 87       	std	Z+14, r28	; 0x0e
   166ce:	75 86       	std	Z+13, r7	; 0x0d
   166d0:	64 86       	std	Z+12, r6	; 0x0c
   166d2:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   166d6:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   166da:	81 81       	ldd	r24, Z+1	; 0x01
   166dc:	90 e0       	ldi	r25, 0x00	; 0
   166de:	ed b7       	in	r30, 0x3d	; 61
   166e0:	fe b7       	in	r31, 0x3e	; 62
   166e2:	93 87       	std	Z+11, r25	; 0x0b
   166e4:	82 87       	std	Z+10, r24	; 0x0a
   166e6:	86 82       	std	Z+6, r8	; 0x06
   166e8:	97 82       	std	Z+7, r9	; 0x07
   166ea:	a0 86       	std	Z+8, r10	; 0x08
   166ec:	b1 86       	std	Z+9, r11	; 0x09
   166ee:	15 83       	std	Z+5, r17	; 0x05
   166f0:	04 83       	std	Z+4, r16	; 0x04
   166f2:	86 e1       	ldi	r24, 0x16	; 22
   166f4:	91 e3       	ldi	r25, 0x31	; 49
   166f6:	a0 e0       	ldi	r26, 0x00	; 0
   166f8:	81 83       	std	Z+1, r24	; 0x01
   166fa:	92 83       	std	Z+2, r25	; 0x02
   166fc:	a3 83       	std	Z+3, r26	; 0x03
   166fe:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   16702:	c5 01       	movw	r24, r10
   16704:	b4 01       	movw	r22, r8
   16706:	cd b7       	in	r28, 0x3d	; 61
   16708:	de b7       	in	r29, 0x3e	; 62
   1670a:	61 96       	adiw	r28, 0x11	; 17
   1670c:	ee e0       	ldi	r30, 0x0E	; 14
   1670e:	0c 94 1f e7 	jmp	0x1ce3e	; 0x1ce3e <__epilogue_restores__+0x8>

00016712 <amigo_init>:
   16712:	ff 92       	push	r15
   16714:	0f 93       	push	r16
   16716:	1f 93       	push	r17
   16718:	cf 93       	push	r28
   1671a:	df 93       	push	r29
   1671c:	05 e7       	ldi	r16, 0x75	; 117
   1671e:	1f e1       	ldi	r17, 0x1F	; 31
   16720:	cb e0       	ldi	r28, 0x0B	; 11
   16722:	d4 e0       	ldi	r29, 0x04	; 4
   16724:	82 e0       	ldi	r24, 0x02	; 2
   16726:	f8 2e       	mov	r15, r24
   16728:	d8 01       	movw	r26, r16
   1672a:	8c 91       	ld	r24, X
   1672c:	81 30       	cpi	r24, 0x01	; 1
   1672e:	31 f5       	brne	.+76     	; 0x1677c <amigo_init+0x6a>
   16730:	8c 2f       	mov	r24, r28
   16732:	0e 94 62 97 	call	0x12ec4	; 0x12ec4 <set_active_device>
   16736:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   1673a:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   1673e:	10 82       	st	Z, r1
   16740:	9f 01       	movw	r18, r30
   16742:	27 5f       	subi	r18, 0xF7	; 247
   16744:	3f 4f       	sbci	r19, 0xFF	; 255
   16746:	d9 01       	movw	r26, r18
   16748:	8d 2f       	mov	r24, r29
   1674a:	1d 92       	st	X+, r1
   1674c:	8a 95       	dec	r24
   1674e:	e9 f7       	brne	.-6      	; 0x1674a <amigo_init+0x38>
   16750:	2c 5f       	subi	r18, 0xFC	; 252
   16752:	3f 4f       	sbci	r19, 0xFF	; 255
   16754:	d9 01       	movw	r26, r18
   16756:	8d 2f       	mov	r24, r29
   16758:	1d 92       	st	X+, r1
   1675a:	8a 95       	dec	r24
   1675c:	e9 f7       	brne	.-6      	; 0x16758 <amigo_init+0x46>
   1675e:	11 82       	std	Z+1, r1	; 0x01
   16760:	15 82       	std	Z+5, r1	; 0x05
   16762:	14 82       	std	Z+4, r1	; 0x04
   16764:	13 82       	std	Z+3, r1	; 0x03
   16766:	f6 82       	std	Z+6, r15	; 0x06
   16768:	10 86       	std	Z+8, r1	; 0x08
   1676a:	17 82       	std	Z+7, r1	; 0x07
   1676c:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   16770:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   16774:	81 81       	ldd	r24, Z+1	; 0x01
   16776:	90 e0       	ldi	r25, 0x00	; 0
   16778:	0e 94 aa 86 	call	0x10d54	; 0x10d54 <gpib_disable_PPR>
   1677c:	0b 50       	subi	r16, 0x0B	; 11
   1677e:	11 09       	sbc	r17, r1
   16780:	c1 50       	subi	r28, 0x01	; 1
   16782:	90 f6       	brcc	.-92     	; 0x16728 <amigo_init+0x16>
   16784:	cd b7       	in	r28, 0x3d	; 61
   16786:	de b7       	in	r29, 0x3e	; 62
   16788:	e5 e0       	ldi	r30, 0x05	; 5
   1678a:	0c 94 28 e7 	jmp	0x1ce50	; 0x1ce50 <__epilogue_restores__+0x1a>

0001678e <amigo_request_logical_address>:
   1678e:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   16792:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   16796:	15 86       	std	Z+13, r1	; 0x0d
   16798:	83 81       	ldd	r24, Z+3	; 0x03
   1679a:	86 87       	std	Z+14, r24	; 0x0e
   1679c:	84 81       	ldd	r24, Z+4	; 0x04
   1679e:	87 87       	std	Z+15, r24	; 0x0f
   167a0:	85 81       	ldd	r24, Z+5	; 0x05
   167a2:	80 8b       	std	Z+16, r24	; 0x10
   167a4:	80 e0       	ldi	r24, 0x00	; 0
   167a6:	90 e0       	ldi	r25, 0x00	; 0
   167a8:	08 95       	ret

000167aa <amigo_request_status>:
   167aa:	00 d0       	rcall	.+0      	; 0x167ac <amigo_request_status+0x2>
   167ac:	1f 92       	push	r1
   167ae:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   167b2:	85 ff       	sbrs	r24, 5
   167b4:	0a c0       	rjmp	.+20     	; 0x167ca <amigo_request_status+0x20>
   167b6:	89 ee       	ldi	r24, 0xE9	; 233
   167b8:	91 e3       	ldi	r25, 0x31	; 49
   167ba:	a0 e0       	ldi	r26, 0x00	; 0
   167bc:	ed b7       	in	r30, 0x3d	; 61
   167be:	fe b7       	in	r31, 0x3e	; 62
   167c0:	81 83       	std	Z+1, r24	; 0x01
   167c2:	92 83       	std	Z+2, r25	; 0x02
   167c4:	a3 83       	std	Z+3, r26	; 0x03
   167c6:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   167ca:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   167ce:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   167d2:	11 86       	std	Z+9, r1	; 0x09
   167d4:	81 81       	ldd	r24, Z+1	; 0x01
   167d6:	82 87       	std	Z+10, r24	; 0x0a
   167d8:	8d e0       	ldi	r24, 0x0D	; 13
   167da:	83 87       	std	Z+11, r24	; 0x0b
   167dc:	14 86       	std	Z+12, r1	; 0x0c
   167de:	0e 94 20 70 	call	0xe040	; 0xe040 <mmc_wp_status>
   167e2:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   167e6:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   167ea:	89 2b       	or	r24, r25
   167ec:	19 f0       	breq	.+6      	; 0x167f4 <amigo_request_status+0x4a>
   167ee:	84 85       	ldd	r24, Z+12	; 0x0c
   167f0:	80 66       	ori	r24, 0x60	; 96
   167f2:	84 87       	std	Z+12, r24	; 0x0c
   167f4:	86 81       	ldd	r24, Z+6	; 0x06
   167f6:	82 30       	cpi	r24, 0x02	; 2
   167f8:	31 f4       	brne	.+12     	; 0x16806 <amigo_request_status+0x5c>
   167fa:	83 e1       	ldi	r24, 0x13	; 19
   167fc:	81 87       	std	Z+9, r24	; 0x09
   167fe:	84 85       	ldd	r24, Z+12	; 0x0c
   16800:	88 60       	ori	r24, 0x08	; 8
   16802:	84 87       	std	Z+12, r24	; 0x0c
   16804:	21 c0       	rjmp	.+66     	; 0x16848 <amigo_request_status+0x9e>
   16806:	27 81       	ldd	r18, Z+7	; 0x07
   16808:	30 85       	ldd	r19, Z+8	; 0x08
   1680a:	21 15       	cp	r18, r1
   1680c:	31 05       	cpc	r19, r1
   1680e:	11 f4       	brne	.+4      	; 0x16814 <amigo_request_status+0x6a>
   16810:	81 30       	cpi	r24, 0x01	; 1
   16812:	d1 f4       	brne	.+52     	; 0x16848 <amigo_request_status+0x9e>
   16814:	26 fd       	sbrc	r18, 6
   16816:	0c c0       	rjmp	.+24     	; 0x16830 <amigo_request_status+0x86>
   16818:	25 ff       	sbrs	r18, 5
   1681a:	03 c0       	rjmp	.+6      	; 0x16822 <amigo_request_status+0x78>
   1681c:	8a e0       	ldi	r24, 0x0A	; 10
   1681e:	81 87       	std	Z+9, r24	; 0x09
   16820:	0d c0       	rjmp	.+26     	; 0x1683c <amigo_request_status+0x92>
   16822:	84 85       	ldd	r24, Z+12	; 0x0c
   16824:	24 ff       	sbrs	r18, 4
   16826:	02 c0       	rjmp	.+4      	; 0x1682c <amigo_request_status+0x82>
   16828:	83 60       	ori	r24, 0x03	; 3
   1682a:	07 c0       	rjmp	.+14     	; 0x1683a <amigo_request_status+0x90>
   1682c:	21 ff       	sbrs	r18, 1
   1682e:	02 c0       	rjmp	.+4      	; 0x16834 <amigo_request_status+0x8a>
   16830:	83 e1       	ldi	r24, 0x13	; 19
   16832:	f5 cf       	rjmp	.-22     	; 0x1681e <amigo_request_status+0x74>
   16834:	22 ff       	sbrs	r18, 2
   16836:	02 c0       	rjmp	.+4      	; 0x1683c <amigo_request_status+0x92>
   16838:	84 60       	ori	r24, 0x04	; 4
   1683a:	84 87       	std	Z+12, r24	; 0x0c
   1683c:	84 85       	ldd	r24, Z+12	; 0x0c
   1683e:	80 61       	ori	r24, 0x10	; 16
   16840:	84 87       	std	Z+12, r24	; 0x0c
   16842:	83 85       	ldd	r24, Z+11	; 0x0b
   16844:	80 68       	ori	r24, 0x80	; 128
   16846:	83 87       	std	Z+11, r24	; 0x0b
   16848:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   1684c:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   16850:	81 81       	ldd	r24, Z+1	; 0x01
   16852:	90 e0       	ldi	r25, 0x00	; 0
   16854:	0e 94 74 86 	call	0x10ce8	; 0x10ce8 <gpib_enable_PPR>
   16858:	80 e0       	ldi	r24, 0x00	; 0
   1685a:	90 e0       	ldi	r25, 0x00	; 0
   1685c:	0f 90       	pop	r0
   1685e:	0f 90       	pop	r0
   16860:	0f 90       	pop	r0
   16862:	08 95       	ret

00016864 <amigo_send_logical_address>:
   16864:	a5 e0       	ldi	r26, 0x05	; 5
   16866:	b0 e0       	ldi	r27, 0x00	; 0
   16868:	e8 e3       	ldi	r30, 0x38	; 56
   1686a:	f4 eb       	ldi	r31, 0xB4	; 180
   1686c:	0c 94 0f e7 	jmp	0x1ce1e	; 0x1ce1e <__prologue_saves__+0x20>
   16870:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16874:	85 ff       	sbrs	r24, 5
   16876:	0a c0       	rjmp	.+20     	; 0x1688c <amigo_send_logical_address+0x28>
   16878:	8b ec       	ldi	r24, 0xCB	; 203
   1687a:	91 e3       	ldi	r25, 0x31	; 49
   1687c:	a0 e0       	ldi	r26, 0x00	; 0
   1687e:	ed b7       	in	r30, 0x3d	; 61
   16880:	fe b7       	in	r31, 0x3e	; 62
   16882:	81 83       	std	Z+1, r24	; 0x01
   16884:	92 83       	std	Z+2, r25	; 0x02
   16886:	a3 83       	std	Z+3, r26	; 0x03
   16888:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   1688c:	80 e0       	ldi	r24, 0x00	; 0
   1688e:	91 e0       	ldi	r25, 0x01	; 1
   16890:	9d 83       	std	Y+5, r25	; 0x05
   16892:	8c 83       	std	Y+4, r24	; 0x04
   16894:	80 91 6a 19 	lds	r24, 0x196A	; 0x80196a <AMIGOs>
   16898:	90 91 6b 19 	lds	r25, 0x196B	; 0x80196b <AMIGOs+0x1>
   1689c:	ae 01       	movw	r20, r28
   1689e:	4c 5f       	subi	r20, 0xFC	; 252
   168a0:	5f 4f       	sbci	r21, 0xFF	; 255
   168a2:	64 e0       	ldi	r22, 0x04	; 4
   168a4:	70 e0       	ldi	r23, 0x00	; 0
   168a6:	0d 96       	adiw	r24, 0x0d	; 13
   168a8:	0e 94 a4 8b 	call	0x11748	; 0x11748 <gpib_write_str>
   168ac:	2c 81       	ldd	r18, Y+4	; 0x04
   168ae:	3d 81       	ldd	r19, Y+5	; 0x05
   168b0:	22 27       	eor	r18, r18
   168b2:	30 7d       	andi	r19, 0xD0	; 208
   168b4:	23 2b       	or	r18, r19
   168b6:	11 f4       	brne	.+4      	; 0x168bc <amigo_send_logical_address+0x58>
   168b8:	04 97       	sbiw	r24, 0x04	; 4
   168ba:	c9 f0       	breq	.+50     	; 0x168ee <amigo_send_logical_address+0x8a>
   168bc:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   168c0:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   168c4:	87 81       	ldd	r24, Z+7	; 0x07
   168c6:	90 85       	ldd	r25, Z+8	; 0x08
   168c8:	80 62       	ori	r24, 0x20	; 32
   168ca:	90 87       	std	Z+8, r25	; 0x08
   168cc:	87 83       	std	Z+7, r24	; 0x07
   168ce:	81 e0       	ldi	r24, 0x01	; 1
   168d0:	86 83       	std	Z+6, r24	; 0x06
   168d2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   168d6:	80 ff       	sbrs	r24, 0
   168d8:	0a c0       	rjmp	.+20     	; 0x168ee <amigo_send_logical_address+0x8a>
   168da:	81 eb       	ldi	r24, 0xB1	; 177
   168dc:	91 e3       	ldi	r25, 0x31	; 49
   168de:	a0 e0       	ldi	r26, 0x00	; 0
   168e0:	ed b7       	in	r30, 0x3d	; 61
   168e2:	fe b7       	in	r31, 0x3e	; 62
   168e4:	81 83       	std	Z+1, r24	; 0x01
   168e6:	92 83       	std	Z+2, r25	; 0x02
   168e8:	a3 83       	std	Z+3, r26	; 0x03
   168ea:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   168ee:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   168f2:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   168f6:	81 81       	ldd	r24, Z+1	; 0x01
   168f8:	90 e0       	ldi	r25, 0x00	; 0
   168fa:	0e 94 74 86 	call	0x10ce8	; 0x10ce8 <gpib_enable_PPR>
   168fe:	8c 81       	ldd	r24, Y+4	; 0x04
   16900:	9d 81       	ldd	r25, Y+5	; 0x05
   16902:	88 27       	eor	r24, r24
   16904:	90 7d       	andi	r25, 0xD0	; 208
   16906:	25 96       	adiw	r28, 0x05	; 5
   16908:	e2 e0       	ldi	r30, 0x02	; 2
   1690a:	0c 94 2b e7 	jmp	0x1ce56	; 0x1ce56 <__epilogue_restores__+0x20>

0001690e <amigo_send_status>:
   1690e:	a5 e0       	ldi	r26, 0x05	; 5
   16910:	b0 e0       	ldi	r27, 0x00	; 0
   16912:	ed e8       	ldi	r30, 0x8D	; 141
   16914:	f4 eb       	ldi	r31, 0xB4	; 180
   16916:	0c 94 0f e7 	jmp	0x1ce1e	; 0x1ce1e <__prologue_saves__+0x20>
   1691a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1691e:	85 ff       	sbrs	r24, 5
   16920:	0a c0       	rjmp	.+20     	; 0x16936 <amigo_send_status+0x28>
   16922:	8c e9       	ldi	r24, 0x9C	; 156
   16924:	91 e3       	ldi	r25, 0x31	; 49
   16926:	a0 e0       	ldi	r26, 0x00	; 0
   16928:	ed b7       	in	r30, 0x3d	; 61
   1692a:	fe b7       	in	r31, 0x3e	; 62
   1692c:	81 83       	std	Z+1, r24	; 0x01
   1692e:	92 83       	std	Z+2, r25	; 0x02
   16930:	a3 83       	std	Z+3, r26	; 0x03
   16932:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   16936:	80 e0       	ldi	r24, 0x00	; 0
   16938:	91 e0       	ldi	r25, 0x01	; 1
   1693a:	9d 83       	std	Y+5, r25	; 0x05
   1693c:	8c 83       	std	Y+4, r24	; 0x04
   1693e:	80 91 6a 19 	lds	r24, 0x196A	; 0x80196a <AMIGOs>
   16942:	90 91 6b 19 	lds	r25, 0x196B	; 0x80196b <AMIGOs+0x1>
   16946:	ae 01       	movw	r20, r28
   16948:	4c 5f       	subi	r20, 0xFC	; 252
   1694a:	5f 4f       	sbci	r21, 0xFF	; 255
   1694c:	64 e0       	ldi	r22, 0x04	; 4
   1694e:	70 e0       	ldi	r23, 0x00	; 0
   16950:	09 96       	adiw	r24, 0x09	; 9
   16952:	0e 94 a4 8b 	call	0x11748	; 0x11748 <gpib_write_str>
   16956:	2c 81       	ldd	r18, Y+4	; 0x04
   16958:	3d 81       	ldd	r19, Y+5	; 0x05
   1695a:	22 27       	eor	r18, r18
   1695c:	30 7d       	andi	r19, 0xD0	; 208
   1695e:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   16962:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   16966:	23 2b       	or	r18, r19
   16968:	11 f4       	brne	.+4      	; 0x1696e <amigo_send_status+0x60>
   1696a:	04 97       	sbiw	r24, 0x04	; 4
   1696c:	b1 f0       	breq	.+44     	; 0x1699a <amigo_send_status+0x8c>
   1696e:	87 81       	ldd	r24, Z+7	; 0x07
   16970:	90 85       	ldd	r25, Z+8	; 0x08
   16972:	80 62       	ori	r24, 0x20	; 32
   16974:	90 87       	std	Z+8, r25	; 0x08
   16976:	87 83       	std	Z+7, r24	; 0x07
   16978:	81 e0       	ldi	r24, 0x01	; 1
   1697a:	86 83       	std	Z+6, r24	; 0x06
   1697c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16980:	80 ff       	sbrs	r24, 0
   16982:	0e c0       	rjmp	.+28     	; 0x169a0 <amigo_send_status+0x92>
   16984:	82 e8       	ldi	r24, 0x82	; 130
   16986:	91 e3       	ldi	r25, 0x31	; 49
   16988:	a0 e0       	ldi	r26, 0x00	; 0
   1698a:	ed b7       	in	r30, 0x3d	; 61
   1698c:	fe b7       	in	r31, 0x3e	; 62
   1698e:	81 83       	std	Z+1, r24	; 0x01
   16990:	92 83       	std	Z+2, r25	; 0x02
   16992:	a3 83       	std	Z+3, r26	; 0x03
   16994:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   16998:	03 c0       	rjmp	.+6      	; 0x169a0 <amigo_send_status+0x92>
   1699a:	10 86       	std	Z+8, r1	; 0x08
   1699c:	17 82       	std	Z+7, r1	; 0x07
   1699e:	16 82       	std	Z+6, r1	; 0x06
   169a0:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   169a4:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   169a8:	81 81       	ldd	r24, Z+1	; 0x01
   169aa:	90 e0       	ldi	r25, 0x00	; 0
   169ac:	0e 94 74 86 	call	0x10ce8	; 0x10ce8 <gpib_enable_PPR>
   169b0:	8c 81       	ldd	r24, Y+4	; 0x04
   169b2:	9d 81       	ldd	r25, Y+5	; 0x05
   169b4:	88 27       	eor	r24, r24
   169b6:	90 7d       	andi	r25, 0xD0	; 208
   169b8:	25 96       	adiw	r28, 0x05	; 5
   169ba:	e2 e0       	ldi	r30, 0x02	; 2
   169bc:	0c 94 2b e7 	jmp	0x1ce56	; 0x1ce56 <__epilogue_restores__+0x20>

000169c0 <amigo_increment>:
   169c0:	a1 e1       	ldi	r26, 0x11	; 17
   169c2:	b0 e0       	ldi	r27, 0x00	; 0
   169c4:	e6 ee       	ldi	r30, 0xE6	; 230
   169c6:	f4 eb       	ldi	r31, 0xB4	; 180
   169c8:	0c 94 0f e7 	jmp	0x1ce1e	; 0x1ce1e <__prologue_saves__+0x20>
   169cc:	bc 01       	movw	r22, r24
   169ce:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   169d2:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   169d6:	91 e1       	ldi	r25, 0x11	; 17
   169d8:	de 01       	movw	r26, r28
   169da:	11 96       	adiw	r26, 0x01	; 1
   169dc:	01 90       	ld	r0, Z+
   169de:	0d 92       	st	X+, r0
   169e0:	9a 95       	dec	r25
   169e2:	e1 f7       	brne	.-8      	; 0x169dc <amigo_increment+0x1c>
   169e4:	9e 81       	ldd	r25, Y+6	; 0x06
   169e6:	9f 5f       	subi	r25, 0xFF	; 255
   169e8:	9e 83       	std	Y+6, r25	; 0x06
   169ea:	ce 01       	movw	r24, r28
   169ec:	01 96       	adiw	r24, 0x01	; 1
   169ee:	c7 dd       	rcall	.-1138   	; 0x1657e <amigo_overflow_check>
   169f0:	00 97       	sbiw	r24, 0x00	; 0
   169f2:	59 f4       	brne	.+22     	; 0x16a0a <amigo_increment+0x4a>
   169f4:	a0 91 6a 19 	lds	r26, 0x196A	; 0x80196a <AMIGOs>
   169f8:	b0 91 6b 19 	lds	r27, 0x196B	; 0x80196b <AMIGOs+0x1>
   169fc:	21 e1       	ldi	r18, 0x11	; 17
   169fe:	fe 01       	movw	r30, r28
   16a00:	31 96       	adiw	r30, 0x01	; 1
   16a02:	01 90       	ld	r0, Z+
   16a04:	0d 92       	st	X+, r0
   16a06:	2a 95       	dec	r18
   16a08:	e1 f7       	brne	.-8      	; 0x16a02 <amigo_increment+0x42>
   16a0a:	61 96       	adiw	r28, 0x11	; 17
   16a0c:	e2 e0       	ldi	r30, 0x02	; 2
   16a0e:	0c 94 2b e7 	jmp	0x1ce56	; 0x1ce56 <__epilogue_restores__+0x20>

00016a12 <amigo_seek>:
   16a12:	0f 93       	push	r16
   16a14:	1f 93       	push	r17
   16a16:	cf 93       	push	r28
   16a18:	df 93       	push	r29
   16a1a:	ec 01       	movw	r28, r24
   16a1c:	6d e8       	ldi	r22, 0x8D	; 141
   16a1e:	75 e1       	ldi	r23, 0x15	; 21
   16a20:	ae dd       	rcall	.-1188   	; 0x1657e <amigo_overflow_check>
   16a22:	8c 01       	movw	r16, r24
   16a24:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   16a28:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   16a2c:	89 2b       	or	r24, r25
   16a2e:	41 f0       	breq	.+16     	; 0x16a40 <amigo_seek+0x2e>
   16a30:	81 e0       	ldi	r24, 0x01	; 1
   16a32:	86 83       	std	Z+6, r24	; 0x06
   16a34:	87 81       	ldd	r24, Z+7	; 0x07
   16a36:	90 85       	ldd	r25, Z+8	; 0x08
   16a38:	84 60       	ori	r24, 0x04	; 4
   16a3a:	90 87       	std	Z+8, r25	; 0x08
   16a3c:	87 83       	std	Z+7, r24	; 0x07
   16a3e:	06 c0       	rjmp	.+12     	; 0x16a4c <amigo_seek+0x3a>
   16a40:	8d 81       	ldd	r24, Y+5	; 0x05
   16a42:	85 83       	std	Z+5, r24	; 0x05
   16a44:	8c 81       	ldd	r24, Y+4	; 0x04
   16a46:	84 83       	std	Z+4, r24	; 0x04
   16a48:	8b 81       	ldd	r24, Y+3	; 0x03
   16a4a:	83 83       	std	Z+3, r24	; 0x03
   16a4c:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   16a50:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   16a54:	81 81       	ldd	r24, Z+1	; 0x01
   16a56:	90 e0       	ldi	r25, 0x00	; 0
   16a58:	0e 94 74 86 	call	0x10ce8	; 0x10ce8 <gpib_enable_PPR>
   16a5c:	c8 01       	movw	r24, r16
   16a5e:	df 91       	pop	r29
   16a60:	cf 91       	pop	r28
   16a62:	1f 91       	pop	r17
   16a64:	0f 91       	pop	r16
   16a66:	08 95       	ret

00016a68 <amigo_verify>:
   16a68:	8f 92       	push	r8
   16a6a:	9f 92       	push	r9
   16a6c:	af 92       	push	r10
   16a6e:	bf 92       	push	r11
   16a70:	ef 92       	push	r14
   16a72:	ff 92       	push	r15
   16a74:	0f 93       	push	r16
   16a76:	1f 93       	push	r17
   16a78:	cf 93       	push	r28
   16a7a:	df 93       	push	r29
   16a7c:	ad b7       	in	r26, 0x3d	; 61
   16a7e:	be b7       	in	r27, 0x3e	; 62
   16a80:	19 97       	sbiw	r26, 0x09	; 9
   16a82:	0f b6       	in	r0, 0x3f	; 63
   16a84:	f8 94       	cli
   16a86:	be bf       	out	0x3e, r27	; 62
   16a88:	0f be       	out	0x3f, r0	; 63
   16a8a:	ad bf       	out	0x3d, r26	; 61
   16a8c:	7c 01       	movw	r14, r24
   16a8e:	62 e9       	ldi	r22, 0x92	; 146
   16a90:	75 e1       	ldi	r23, 0x15	; 21
   16a92:	80 91 6a 19 	lds	r24, 0x196A	; 0x80196a <AMIGOs>
   16a96:	90 91 6b 19 	lds	r25, 0x196B	; 0x80196b <AMIGOs+0x1>
   16a9a:	c7 dd       	rcall	.-1138   	; 0x1662a <amigo_chs_to_logical>
   16a9c:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   16aa0:	25 ff       	sbrs	r18, 5
   16aa2:	10 c0       	rjmp	.+32     	; 0x16ac4 <amigo_verify+0x5c>
   16aa4:	ed b7       	in	r30, 0x3d	; 61
   16aa6:	fe b7       	in	r31, 0x3e	; 62
   16aa8:	e0 86       	std	Z+8, r14	; 0x08
   16aaa:	f1 86       	std	Z+9, r15	; 0x09
   16aac:	64 83       	std	Z+4, r22	; 0x04
   16aae:	75 83       	std	Z+5, r23	; 0x05
   16ab0:	86 83       	std	Z+6, r24	; 0x06
   16ab2:	97 83       	std	Z+7, r25	; 0x07
   16ab4:	81 e4       	ldi	r24, 0x41	; 65
   16ab6:	91 e3       	ldi	r25, 0x31	; 49
   16ab8:	a0 e0       	ldi	r26, 0x00	; 0
   16aba:	81 83       	std	Z+1, r24	; 0x01
   16abc:	92 83       	std	Z+2, r25	; 0x02
   16abe:	a3 83       	std	Z+3, r26	; 0x03
   16ac0:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   16ac4:	e7 01       	movw	r28, r14
   16ac6:	20 97       	sbiw	r28, 0x00	; 0
   16ac8:	09 f4       	brne	.+2      	; 0x16acc <amigo_verify+0x64>
   16aca:	4b c0       	rjmp	.+150    	; 0x16b62 <amigo_verify+0xfa>
   16acc:	6f e9       	ldi	r22, 0x9F	; 159
   16ace:	75 e1       	ldi	r23, 0x15	; 21
   16ad0:	80 91 6a 19 	lds	r24, 0x196A	; 0x80196a <AMIGOs>
   16ad4:	90 91 6b 19 	lds	r25, 0x196B	; 0x80196b <AMIGOs+0x1>
   16ad8:	a8 dd       	rcall	.-1200   	; 0x1662a <amigo_chs_to_logical>
   16ada:	4b 01       	movw	r8, r22
   16adc:	5c 01       	movw	r10, r24
   16ade:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16ae2:	86 fd       	sbrc	r24, 6
   16ae4:	0e 94 9a 85 	call	0x10b34	; 0x10b34 <gpib_timer_elapsed_begin>
   16ae8:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   16aec:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   16af0:	e0 90 6a 19 	lds	r14, 0x196A	; 0x80196a <AMIGOs>
   16af4:	f0 90 6b 19 	lds	r15, 0x196B	; 0x80196b <AMIGOs+0x1>
   16af8:	87 e0       	ldi	r24, 0x07	; 7
   16afa:	e8 0e       	add	r14, r24
   16afc:	f1 1c       	adc	r15, r1
   16afe:	00 85       	ldd	r16, Z+8	; 0x08
   16b00:	11 85       	ldd	r17, Z+9	; 0x09
   16b02:	22 ef       	ldi	r18, 0xF2	; 242
   16b04:	3c e1       	ldi	r19, 0x1C	; 28
   16b06:	b5 01       	movw	r22, r10
   16b08:	a4 01       	movw	r20, r8
   16b0a:	82 81       	ldd	r24, Z+2	; 0x02
   16b0c:	93 81       	ldd	r25, Z+3	; 0x03
   16b0e:	0e 94 ec 84 	call	0x109d8	; 0x109d8 <dbf_open_read>
   16b12:	7c 01       	movw	r14, r24
   16b14:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16b18:	86 ff       	sbrs	r24, 6
   16b1a:	04 c0       	rjmp	.+8      	; 0x16b24 <amigo_verify+0xbc>
   16b1c:	86 ea       	ldi	r24, 0xA6	; 166
   16b1e:	90 e1       	ldi	r25, 0x10	; 16
   16b20:	0e 94 ac 85 	call	0x10b58	; 0x10b58 <gpib_timer_elapsed_end>
   16b24:	20 91 6a 19 	lds	r18, 0x196A	; 0x80196a <AMIGOs>
   16b28:	30 91 6b 19 	lds	r19, 0x196B	; 0x80196b <AMIGOs+0x1>
   16b2c:	f9 01       	movw	r30, r18
   16b2e:	87 81       	ldd	r24, Z+7	; 0x07
   16b30:	90 85       	ldd	r25, Z+8	; 0x08
   16b32:	89 2b       	or	r24, r25
   16b34:	21 f0       	breq	.+8      	; 0x16b3e <amigo_verify+0xd6>
   16b36:	81 e0       	ldi	r24, 0x01	; 1
   16b38:	f9 01       	movw	r30, r18
   16b3a:	86 83       	std	Z+6, r24	; 0x06
   16b3c:	15 c0       	rjmp	.+42     	; 0x16b68 <amigo_verify+0x100>
   16b3e:	80 91 6c 19 	lds	r24, 0x196C	; 0x80196c <AMIGOp>
   16b42:	90 91 6d 19 	lds	r25, 0x196D	; 0x80196d <AMIGOp+0x1>
   16b46:	fc 01       	movw	r30, r24
   16b48:	80 85       	ldd	r24, Z+8	; 0x08
   16b4a:	91 85       	ldd	r25, Z+9	; 0x09
   16b4c:	e8 16       	cp	r14, r24
   16b4e:	f9 06       	cpc	r15, r25
   16b50:	91 f7       	brne	.-28     	; 0x16b36 <amigo_verify+0xce>
   16b52:	87 ea       	ldi	r24, 0xA7	; 167
   16b54:	95 e1       	ldi	r25, 0x15	; 21
   16b56:	34 df       	rcall	.-408    	; 0x169c0 <amigo_increment>
   16b58:	21 97       	sbiw	r28, 0x01	; 1
   16b5a:	89 2b       	or	r24, r25
   16b5c:	09 f4       	brne	.+2      	; 0x16b60 <amigo_verify+0xf8>
   16b5e:	b3 cf       	rjmp	.-154    	; 0x16ac6 <amigo_verify+0x5e>
   16b60:	03 c0       	rjmp	.+6      	; 0x16b68 <amigo_verify+0x100>
   16b62:	c0 e0       	ldi	r28, 0x00	; 0
   16b64:	d0 e0       	ldi	r29, 0x00	; 0
   16b66:	02 c0       	rjmp	.+4      	; 0x16b6c <amigo_verify+0x104>
   16b68:	c1 e0       	ldi	r28, 0x01	; 1
   16b6a:	d0 e0       	ldi	r29, 0x00	; 0
   16b6c:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   16b70:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   16b74:	81 81       	ldd	r24, Z+1	; 0x01
   16b76:	90 e0       	ldi	r25, 0x00	; 0
   16b78:	0e 94 74 86 	call	0x10ce8	; 0x10ce8 <gpib_enable_PPR>
   16b7c:	ce 01       	movw	r24, r28
   16b7e:	ad b7       	in	r26, 0x3d	; 61
   16b80:	be b7       	in	r27, 0x3e	; 62
   16b82:	19 96       	adiw	r26, 0x09	; 9
   16b84:	0f b6       	in	r0, 0x3f	; 63
   16b86:	f8 94       	cli
   16b88:	be bf       	out	0x3e, r27	; 62
   16b8a:	0f be       	out	0x3f, r0	; 63
   16b8c:	ad bf       	out	0x3d, r26	; 61
   16b8e:	df 91       	pop	r29
   16b90:	cf 91       	pop	r28
   16b92:	1f 91       	pop	r17
   16b94:	0f 91       	pop	r16
   16b96:	ff 90       	pop	r15
   16b98:	ef 90       	pop	r14
   16b9a:	bf 90       	pop	r11
   16b9c:	af 90       	pop	r10
   16b9e:	9f 90       	pop	r9
   16ba0:	8f 90       	pop	r8
   16ba2:	08 95       	ret

00016ba4 <amigo_format>:
   16ba4:	ef 92       	push	r14
   16ba6:	ff 92       	push	r15
   16ba8:	0f 93       	push	r16
   16baa:	1f 93       	push	r17
   16bac:	cf 93       	push	r28
   16bae:	df 93       	push	r29
   16bb0:	00 d0       	rcall	.+0      	; 0x16bb2 <amigo_format+0xe>
   16bb2:	1f 92       	push	r1
   16bb4:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   16bb8:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   16bbc:	15 82       	std	Z+5, r1	; 0x05
   16bbe:	14 82       	std	Z+4, r1	; 0x04
   16bc0:	13 82       	std	Z+3, r1	; 0x03
   16bc2:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   16bc6:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   16bca:	40 85       	ldd	r20, Z+8	; 0x08
   16bcc:	51 85       	ldd	r21, Z+9	; 0x09
   16bce:	68 2f       	mov	r22, r24
   16bd0:	70 e0       	ldi	r23, 0x00	; 0
   16bd2:	82 ef       	ldi	r24, 0xF2	; 242
   16bd4:	9c e1       	ldi	r25, 0x1C	; 28
   16bd6:	0e 94 f7 ea 	call	0x1d5ee	; 0x1d5ee <memset>
   16bda:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16bde:	85 ff       	sbrs	r24, 5
   16be0:	0a c0       	rjmp	.+20     	; 0x16bf6 <amigo_format+0x52>
   16be2:	86 e0       	ldi	r24, 0x06	; 6
   16be4:	91 e3       	ldi	r25, 0x31	; 49
   16be6:	a0 e0       	ldi	r26, 0x00	; 0
   16be8:	ed b7       	in	r30, 0x3d	; 61
   16bea:	fe b7       	in	r31, 0x3e	; 62
   16bec:	81 83       	std	Z+1, r24	; 0x01
   16bee:	92 83       	std	Z+2, r25	; 0x02
   16bf0:	a3 83       	std	Z+3, r26	; 0x03
   16bf2:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   16bf6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16bfa:	86 fd       	sbrc	r24, 6
   16bfc:	0e 94 9a 85 	call	0x10b34	; 0x10b34 <gpib_timer_elapsed_begin>
   16c00:	6e ea       	ldi	r22, 0xAE	; 174
   16c02:	75 e1       	ldi	r23, 0x15	; 21
   16c04:	80 91 6a 19 	lds	r24, 0x196A	; 0x80196a <AMIGOs>
   16c08:	90 91 6b 19 	lds	r25, 0x196B	; 0x80196b <AMIGOs+0x1>
   16c0c:	0e dd       	rcall	.-1508   	; 0x1662a <amigo_chs_to_logical>
   16c0e:	ab 01       	movw	r20, r22
   16c10:	bc 01       	movw	r22, r24
   16c12:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   16c16:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   16c1a:	e0 90 6a 19 	lds	r14, 0x196A	; 0x80196a <AMIGOs>
   16c1e:	f0 90 6b 19 	lds	r15, 0x196B	; 0x80196b <AMIGOs+0x1>
   16c22:	87 e0       	ldi	r24, 0x07	; 7
   16c24:	e8 0e       	add	r14, r24
   16c26:	f1 1c       	adc	r15, r1
   16c28:	00 85       	ldd	r16, Z+8	; 0x08
   16c2a:	11 85       	ldd	r17, Z+9	; 0x09
   16c2c:	22 ef       	ldi	r18, 0xF2	; 242
   16c2e:	3c e1       	ldi	r19, 0x1C	; 28
   16c30:	82 81       	ldd	r24, Z+2	; 0x02
   16c32:	93 81       	ldd	r25, Z+3	; 0x03
   16c34:	0e 94 43 85 	call	0x10a86	; 0x10a86 <dbf_open_write>
   16c38:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   16c3c:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   16c40:	27 81       	ldd	r18, Z+7	; 0x07
   16c42:	30 85       	ldd	r19, Z+8	; 0x08
   16c44:	21 15       	cp	r18, r1
   16c46:	31 05       	cpc	r19, r1
   16c48:	49 f4       	brne	.+18     	; 0x16c5c <amigo_format+0xb8>
   16c4a:	c0 91 6c 19 	lds	r28, 0x196C	; 0x80196c <AMIGOp>
   16c4e:	d0 91 6d 19 	lds	r29, 0x196D	; 0x80196d <AMIGOp+0x1>
   16c52:	48 85       	ldd	r20, Y+8	; 0x08
   16c54:	59 85       	ldd	r21, Y+9	; 0x09
   16c56:	84 17       	cp	r24, r20
   16c58:	95 07       	cpc	r25, r21
   16c5a:	41 f0       	breq	.+16     	; 0x16c6c <amigo_format+0xc8>
   16c5c:	22 60       	ori	r18, 0x02	; 2
   16c5e:	30 87       	std	Z+8, r19	; 0x08
   16c60:	27 83       	std	Z+7, r18	; 0x07
   16c62:	81 e0       	ldi	r24, 0x01	; 1
   16c64:	86 83       	std	Z+6, r24	; 0x06
   16c66:	c1 e0       	ldi	r28, 0x01	; 1
   16c68:	d0 e0       	ldi	r29, 0x00	; 0
   16c6a:	0f c0       	rjmp	.+30     	; 0x16c8a <amigo_format+0xe6>
   16c6c:	80 e0       	ldi	r24, 0x00	; 0
   16c6e:	90 e0       	ldi	r25, 0x00	; 0
   16c70:	a7 de       	rcall	.-690    	; 0x169c0 <amigo_increment>
   16c72:	89 2b       	or	r24, r25
   16c74:	29 f2       	breq	.-118    	; 0x16c00 <amigo_format+0x5c>
   16c76:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   16c7a:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   16c7e:	15 82       	std	Z+5, r1	; 0x05
   16c80:	14 82       	std	Z+4, r1	; 0x04
   16c82:	13 82       	std	Z+3, r1	; 0x03
   16c84:	16 82       	std	Z+6, r1	; 0x06
   16c86:	c0 e0       	ldi	r28, 0x00	; 0
   16c88:	d0 e0       	ldi	r29, 0x00	; 0
   16c8a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16c8e:	86 ff       	sbrs	r24, 6
   16c90:	04 c0       	rjmp	.+8      	; 0x16c9a <amigo_format+0xf6>
   16c92:	8e ea       	ldi	r24, 0xAE	; 174
   16c94:	95 e1       	ldi	r25, 0x15	; 21
   16c96:	0e 94 ac 85 	call	0x10b58	; 0x10b58 <gpib_timer_elapsed_end>
   16c9a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16c9e:	85 ff       	sbrs	r24, 5
   16ca0:	0a c0       	rjmp	.+20     	; 0x16cb6 <amigo_format+0x112>
   16ca2:	81 ef       	ldi	r24, 0xF1	; 241
   16ca4:	90 e3       	ldi	r25, 0x30	; 48
   16ca6:	a0 e0       	ldi	r26, 0x00	; 0
   16ca8:	ed b7       	in	r30, 0x3d	; 61
   16caa:	fe b7       	in	r31, 0x3e	; 62
   16cac:	81 83       	std	Z+1, r24	; 0x01
   16cae:	92 83       	std	Z+2, r25	; 0x02
   16cb0:	a3 83       	std	Z+3, r26	; 0x03
   16cb2:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   16cb6:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   16cba:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   16cbe:	81 81       	ldd	r24, Z+1	; 0x01
   16cc0:	90 e0       	ldi	r25, 0x00	; 0
   16cc2:	0e 94 74 86 	call	0x10ce8	; 0x10ce8 <gpib_enable_PPR>
   16cc6:	ce 01       	movw	r24, r28
   16cc8:	cd b7       	in	r28, 0x3d	; 61
   16cca:	de b7       	in	r29, 0x3e	; 62
   16ccc:	23 96       	adiw	r28, 0x03	; 3
   16cce:	e6 e0       	ldi	r30, 0x06	; 6
   16cd0:	0c 94 27 e7 	jmp	0x1ce4e	; 0x1ce4e <__epilogue_restores__+0x18>

00016cd4 <amigo_buffered_read_command>:
   16cd4:	8f 92       	push	r8
   16cd6:	9f 92       	push	r9
   16cd8:	af 92       	push	r10
   16cda:	bf 92       	push	r11
   16cdc:	ef 92       	push	r14
   16cde:	ff 92       	push	r15
   16ce0:	0f 93       	push	r16
   16ce2:	1f 93       	push	r17
   16ce4:	cf 93       	push	r28
   16ce6:	df 93       	push	r29
   16ce8:	00 d0       	rcall	.+0      	; 0x16cea <amigo_buffered_read_command+0x16>
   16cea:	00 d0       	rcall	.+0      	; 0x16cec <amigo_buffered_read_command+0x18>
   16cec:	1f 92       	push	r1
   16cee:	65 eb       	ldi	r22, 0xB5	; 181
   16cf0:	75 e1       	ldi	r23, 0x15	; 21
   16cf2:	80 91 6a 19 	lds	r24, 0x196A	; 0x80196a <AMIGOs>
   16cf6:	90 91 6b 19 	lds	r25, 0x196B	; 0x80196b <AMIGOs+0x1>
   16cfa:	97 dc       	rcall	.-1746   	; 0x1662a <amigo_chs_to_logical>
   16cfc:	4b 01       	movw	r8, r22
   16cfe:	5c 01       	movw	r10, r24
   16d00:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16d04:	85 ff       	sbrs	r24, 5
   16d06:	12 c0       	rjmp	.+36     	; 0x16d2c <amigo_buffered_read_command+0x58>
   16d08:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   16d0c:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   16d10:	80 81       	ld	r24, Z
   16d12:	90 e0       	ldi	r25, 0x00	; 0
   16d14:	ed b7       	in	r30, 0x3d	; 61
   16d16:	fe b7       	in	r31, 0x3e	; 62
   16d18:	95 83       	std	Z+5, r25	; 0x05
   16d1a:	84 83       	std	Z+4, r24	; 0x04
   16d1c:	8f ed       	ldi	r24, 0xDF	; 223
   16d1e:	90 e3       	ldi	r25, 0x30	; 48
   16d20:	a0 e0       	ldi	r26, 0x00	; 0
   16d22:	81 83       	std	Z+1, r24	; 0x01
   16d24:	92 83       	std	Z+2, r25	; 0x02
   16d26:	a3 83       	std	Z+3, r26	; 0x03
   16d28:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   16d2c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16d30:	86 fd       	sbrc	r24, 6
   16d32:	0e 94 9a 85 	call	0x10b34	; 0x10b34 <gpib_timer_elapsed_begin>
   16d36:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   16d3a:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   16d3e:	e0 90 6a 19 	lds	r14, 0x196A	; 0x80196a <AMIGOs>
   16d42:	f0 90 6b 19 	lds	r15, 0x196B	; 0x80196b <AMIGOs+0x1>
   16d46:	87 e0       	ldi	r24, 0x07	; 7
   16d48:	e8 0e       	add	r14, r24
   16d4a:	f1 1c       	adc	r15, r1
   16d4c:	00 85       	ldd	r16, Z+8	; 0x08
   16d4e:	11 85       	ldd	r17, Z+9	; 0x09
   16d50:	22 ef       	ldi	r18, 0xF2	; 242
   16d52:	3c e1       	ldi	r19, 0x1C	; 28
   16d54:	b5 01       	movw	r22, r10
   16d56:	a4 01       	movw	r20, r8
   16d58:	82 81       	ldd	r24, Z+2	; 0x02
   16d5a:	93 81       	ldd	r25, Z+3	; 0x03
   16d5c:	0e 94 ec 84 	call	0x109d8	; 0x109d8 <dbf_open_read>
   16d60:	7c 01       	movw	r14, r24
   16d62:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16d66:	86 ff       	sbrs	r24, 6
   16d68:	04 c0       	rjmp	.+8      	; 0x16d72 <amigo_buffered_read_command+0x9e>
   16d6a:	86 ea       	ldi	r24, 0xA6	; 166
   16d6c:	90 e1       	ldi	r25, 0x10	; 16
   16d6e:	0e 94 ac 85 	call	0x10b58	; 0x10b58 <gpib_timer_elapsed_end>
   16d72:	c0 91 6a 19 	lds	r28, 0x196A	; 0x80196a <AMIGOs>
   16d76:	d0 91 6b 19 	lds	r29, 0x196B	; 0x80196b <AMIGOs+0x1>
   16d7a:	8f 81       	ldd	r24, Y+7	; 0x07
   16d7c:	98 85       	ldd	r25, Y+8	; 0x08
   16d7e:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   16d82:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   16d86:	89 2b       	or	r24, r25
   16d88:	29 f4       	brne	.+10     	; 0x16d94 <amigo_buffered_read_command+0xc0>
   16d8a:	80 85       	ldd	r24, Z+8	; 0x08
   16d8c:	91 85       	ldd	r25, Z+9	; 0x09
   16d8e:	e8 16       	cp	r14, r24
   16d90:	f9 06       	cpc	r15, r25
   16d92:	19 f0       	breq	.+6      	; 0x16d9a <amigo_buffered_read_command+0xc6>
   16d94:	81 e0       	ldi	r24, 0x01	; 1
   16d96:	8e 83       	std	Y+6, r24	; 0x06
   16d98:	14 c0       	rjmp	.+40     	; 0x16dc2 <amigo_buffered_read_command+0xee>
   16d9a:	85 eb       	ldi	r24, 0xB5	; 181
   16d9c:	95 e1       	ldi	r25, 0x15	; 21
   16d9e:	10 de       	rcall	.-992    	; 0x169c0 <amigo_increment>
   16da0:	89 2b       	or	r24, r25
   16da2:	59 f0       	breq	.+22     	; 0x16dba <amigo_buffered_read_command+0xe6>
   16da4:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   16da8:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   16dac:	81 e0       	ldi	r24, 0x01	; 1
   16dae:	86 83       	std	Z+6, r24	; 0x06
   16db0:	87 81       	ldd	r24, Z+7	; 0x07
   16db2:	90 85       	ldd	r25, Z+8	; 0x08
   16db4:	84 60       	ori	r24, 0x04	; 4
   16db6:	90 87       	std	Z+8, r25	; 0x08
   16db8:	87 83       	std	Z+7, r24	; 0x07
   16dba:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   16dbe:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   16dc2:	81 81       	ldd	r24, Z+1	; 0x01
   16dc4:	90 e0       	ldi	r25, 0x00	; 0
   16dc6:	0e 94 74 86 	call	0x10ce8	; 0x10ce8 <gpib_enable_PPR>
   16dca:	80 e0       	ldi	r24, 0x00	; 0
   16dcc:	90 e0       	ldi	r25, 0x00	; 0
   16dce:	0f 90       	pop	r0
   16dd0:	0f 90       	pop	r0
   16dd2:	0f 90       	pop	r0
   16dd4:	0f 90       	pop	r0
   16dd6:	0f 90       	pop	r0
   16dd8:	df 91       	pop	r29
   16dda:	cf 91       	pop	r28
   16ddc:	1f 91       	pop	r17
   16dde:	0f 91       	pop	r16
   16de0:	ff 90       	pop	r15
   16de2:	ef 90       	pop	r14
   16de4:	bf 90       	pop	r11
   16de6:	af 90       	pop	r10
   16de8:	9f 90       	pop	r9
   16dea:	8f 90       	pop	r8
   16dec:	08 95       	ret

00016dee <amigo_buffered_read_execute>:
   16dee:	a5 e0       	ldi	r26, 0x05	; 5
   16df0:	b0 e0       	ldi	r27, 0x00	; 0
   16df2:	ed ef       	ldi	r30, 0xFD	; 253
   16df4:	f6 eb       	ldi	r31, 0xB6	; 182
   16df6:	0c 94 0d e7 	jmp	0x1ce1a	; 0x1ce1a <__prologue_saves__+0x1c>
   16dfa:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16dfe:	87 fd       	sbrc	r24, 7
   16e00:	0e 94 9a 85 	call	0x10b34	; 0x10b34 <gpib_timer_elapsed_begin>
   16e04:	80 e0       	ldi	r24, 0x00	; 0
   16e06:	91 e0       	ldi	r25, 0x01	; 1
   16e08:	9d 83       	std	Y+5, r25	; 0x05
   16e0a:	8c 83       	std	Y+4, r24	; 0x04
   16e0c:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   16e10:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   16e14:	60 85       	ldd	r22, Z+8	; 0x08
   16e16:	71 85       	ldd	r23, Z+9	; 0x09
   16e18:	ae 01       	movw	r20, r28
   16e1a:	4c 5f       	subi	r20, 0xFC	; 252
   16e1c:	5f 4f       	sbci	r21, 0xFF	; 255
   16e1e:	82 ef       	ldi	r24, 0xF2	; 242
   16e20:	9c e1       	ldi	r25, 0x1C	; 28
   16e22:	0e 94 a4 8b 	call	0x11748	; 0x11748 <gpib_write_str>
   16e26:	8c 01       	movw	r16, r24
   16e28:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16e2c:	87 ff       	sbrs	r24, 7
   16e2e:	04 c0       	rjmp	.+8      	; 0x16e38 <amigo_buffered_read_execute+0x4a>
   16e30:	81 eb       	ldi	r24, 0xB1	; 177
   16e32:	90 e1       	ldi	r25, 0x10	; 16
   16e34:	0e 94 ac 85 	call	0x10b58	; 0x10b58 <gpib_timer_elapsed_end>
   16e38:	8c 81       	ldd	r24, Y+4	; 0x04
   16e3a:	9d 81       	ldd	r25, Y+5	; 0x05
   16e3c:	88 27       	eor	r24, r24
   16e3e:	90 7d       	andi	r25, 0xD0	; 208
   16e40:	89 2b       	or	r24, r25
   16e42:	49 f4       	brne	.+18     	; 0x16e56 <amigo_buffered_read_execute+0x68>
   16e44:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   16e48:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   16e4c:	80 85       	ldd	r24, Z+8	; 0x08
   16e4e:	91 85       	ldd	r25, Z+9	; 0x09
   16e50:	08 17       	cp	r16, r24
   16e52:	19 07       	cpc	r17, r25
   16e54:	c9 f0       	breq	.+50     	; 0x16e88 <amigo_buffered_read_execute+0x9a>
   16e56:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   16e5a:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   16e5e:	81 e0       	ldi	r24, 0x01	; 1
   16e60:	86 83       	std	Z+6, r24	; 0x06
   16e62:	87 81       	ldd	r24, Z+7	; 0x07
   16e64:	90 85       	ldd	r25, Z+8	; 0x08
   16e66:	80 62       	ori	r24, 0x20	; 32
   16e68:	90 87       	std	Z+8, r25	; 0x08
   16e6a:	87 83       	std	Z+7, r24	; 0x07
   16e6c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16e70:	80 ff       	sbrs	r24, 0
   16e72:	0a c0       	rjmp	.+20     	; 0x16e88 <amigo_buffered_read_execute+0x9a>
   16e74:	85 ec       	ldi	r24, 0xC5	; 197
   16e76:	90 e3       	ldi	r25, 0x30	; 48
   16e78:	a0 e0       	ldi	r26, 0x00	; 0
   16e7a:	ed b7       	in	r30, 0x3d	; 61
   16e7c:	fe b7       	in	r31, 0x3e	; 62
   16e7e:	81 83       	std	Z+1, r24	; 0x01
   16e80:	92 83       	std	Z+2, r25	; 0x02
   16e82:	a3 83       	std	Z+3, r26	; 0x03
   16e84:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   16e88:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   16e8c:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   16e90:	81 81       	ldd	r24, Z+1	; 0x01
   16e92:	90 e0       	ldi	r25, 0x00	; 0
   16e94:	0e 94 74 86 	call	0x10ce8	; 0x10ce8 <gpib_enable_PPR>
   16e98:	8c 81       	ldd	r24, Y+4	; 0x04
   16e9a:	9d 81       	ldd	r25, Y+5	; 0x05
   16e9c:	25 96       	adiw	r28, 0x05	; 5
   16e9e:	e4 e0       	ldi	r30, 0x04	; 4
   16ea0:	0c 94 29 e7 	jmp	0x1ce52	; 0x1ce52 <__epilogue_restores__+0x1c>

00016ea4 <amigo_buffered_write>:
   16ea4:	8f 92       	push	r8
   16ea6:	9f 92       	push	r9
   16ea8:	af 92       	push	r10
   16eaa:	bf 92       	push	r11
   16eac:	ef 92       	push	r14
   16eae:	ff 92       	push	r15
   16eb0:	0f 93       	push	r16
   16eb2:	1f 93       	push	r17
   16eb4:	cf 93       	push	r28
   16eb6:	df 93       	push	r29
   16eb8:	cd b7       	in	r28, 0x3d	; 61
   16eba:	de b7       	in	r29, 0x3e	; 62
   16ebc:	27 97       	sbiw	r28, 0x07	; 7
   16ebe:	0f b6       	in	r0, 0x3f	; 63
   16ec0:	f8 94       	cli
   16ec2:	de bf       	out	0x3e, r29	; 62
   16ec4:	0f be       	out	0x3f, r0	; 63
   16ec6:	cd bf       	out	0x3d, r28	; 61
   16ec8:	63 ec       	ldi	r22, 0xC3	; 195
   16eca:	75 e1       	ldi	r23, 0x15	; 21
   16ecc:	80 91 6a 19 	lds	r24, 0x196A	; 0x80196a <AMIGOs>
   16ed0:	90 91 6b 19 	lds	r25, 0x196B	; 0x80196b <AMIGOs+0x1>
   16ed4:	aa db       	rcall	.-2220   	; 0x1662a <amigo_chs_to_logical>
   16ed6:	4b 01       	movw	r8, r22
   16ed8:	5c 01       	movw	r10, r24
   16eda:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16ede:	87 fd       	sbrc	r24, 7
   16ee0:	0e 94 9a 85 	call	0x10b34	; 0x10b34 <gpib_timer_elapsed_begin>
   16ee4:	1f 82       	std	Y+7, r1	; 0x07
   16ee6:	1e 82       	std	Y+6, r1	; 0x06
   16ee8:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   16eec:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   16ef0:	60 85       	ldd	r22, Z+8	; 0x08
   16ef2:	71 85       	ldd	r23, Z+9	; 0x09
   16ef4:	ae 01       	movw	r20, r28
   16ef6:	4a 5f       	subi	r20, 0xFA	; 250
   16ef8:	5f 4f       	sbci	r21, 0xFF	; 255
   16efa:	82 ef       	ldi	r24, 0xF2	; 242
   16efc:	9c e1       	ldi	r25, 0x1C	; 28
   16efe:	0e 94 02 8b 	call	0x11604	; 0x11604 <gpib_read_str>
   16f02:	7c 01       	movw	r14, r24
   16f04:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16f08:	85 ff       	sbrs	r24, 5
   16f0a:	12 c0       	rjmp	.+36     	; 0x16f30 <amigo_buffered_write+0x8c>
   16f0c:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   16f10:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   16f14:	80 81       	ld	r24, Z
   16f16:	90 e0       	ldi	r25, 0x00	; 0
   16f18:	ed b7       	in	r30, 0x3d	; 61
   16f1a:	fe b7       	in	r31, 0x3e	; 62
   16f1c:	95 83       	std	Z+5, r25	; 0x05
   16f1e:	84 83       	std	Z+4, r24	; 0x04
   16f20:	83 eb       	ldi	r24, 0xB3	; 179
   16f22:	90 e3       	ldi	r25, 0x30	; 48
   16f24:	a0 e0       	ldi	r26, 0x00	; 0
   16f26:	81 83       	std	Z+1, r24	; 0x01
   16f28:	92 83       	std	Z+2, r25	; 0x02
   16f2a:	a3 83       	std	Z+3, r26	; 0x03
   16f2c:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   16f30:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16f34:	87 ff       	sbrs	r24, 7
   16f36:	04 c0       	rjmp	.+8      	; 0x16f40 <amigo_buffered_write+0x9c>
   16f38:	82 ed       	ldi	r24, 0xD2	; 210
   16f3a:	95 e1       	ldi	r25, 0x15	; 21
   16f3c:	0e 94 ac 85 	call	0x10b58	; 0x10b58 <gpib_timer_elapsed_end>
   16f40:	8e 81       	ldd	r24, Y+6	; 0x06
   16f42:	9f 81       	ldd	r25, Y+7	; 0x07
   16f44:	88 27       	eor	r24, r24
   16f46:	90 7d       	andi	r25, 0xD0	; 208
   16f48:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   16f4c:	89 2b       	or	r24, r25
   16f4e:	49 f4       	brne	.+18     	; 0x16f62 <amigo_buffered_write+0xbe>
   16f50:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   16f54:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   16f58:	80 85       	ldd	r24, Z+8	; 0x08
   16f5a:	91 85       	ldd	r25, Z+9	; 0x09
   16f5c:	e8 16       	cp	r14, r24
   16f5e:	f9 06       	cpc	r15, r25
   16f60:	c1 f0       	breq	.+48     	; 0x16f92 <amigo_buffered_write+0xee>
   16f62:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   16f66:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   16f6a:	81 e0       	ldi	r24, 0x01	; 1
   16f6c:	86 83       	std	Z+6, r24	; 0x06
   16f6e:	87 81       	ldd	r24, Z+7	; 0x07
   16f70:	90 85       	ldd	r25, Z+8	; 0x08
   16f72:	80 62       	ori	r24, 0x20	; 32
   16f74:	90 87       	std	Z+8, r25	; 0x08
   16f76:	87 83       	std	Z+7, r24	; 0x07
   16f78:	20 ff       	sbrs	r18, 0
   16f7a:	5e c0       	rjmp	.+188    	; 0x17038 <amigo_buffered_write+0x194>
   16f7c:	84 e9       	ldi	r24, 0x94	; 148
   16f7e:	90 e3       	ldi	r25, 0x30	; 48
   16f80:	a0 e0       	ldi	r26, 0x00	; 0
   16f82:	ed b7       	in	r30, 0x3d	; 61
   16f84:	fe b7       	in	r31, 0x3e	; 62
   16f86:	81 83       	std	Z+1, r24	; 0x01
   16f88:	92 83       	std	Z+2, r25	; 0x02
   16f8a:	a3 83       	std	Z+3, r26	; 0x03
   16f8c:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   16f90:	53 c0       	rjmp	.+166    	; 0x17038 <amigo_buffered_write+0x194>
   16f92:	26 fd       	sbrc	r18, 6
   16f94:	0e 94 9a 85 	call	0x10b34	; 0x10b34 <gpib_timer_elapsed_begin>
   16f98:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   16f9c:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   16fa0:	e0 90 6a 19 	lds	r14, 0x196A	; 0x80196a <AMIGOs>
   16fa4:	f0 90 6b 19 	lds	r15, 0x196B	; 0x80196b <AMIGOs+0x1>
   16fa8:	87 e0       	ldi	r24, 0x07	; 7
   16faa:	e8 0e       	add	r14, r24
   16fac:	f1 1c       	adc	r15, r1
   16fae:	00 85       	ldd	r16, Z+8	; 0x08
   16fb0:	11 85       	ldd	r17, Z+9	; 0x09
   16fb2:	22 ef       	ldi	r18, 0xF2	; 242
   16fb4:	3c e1       	ldi	r19, 0x1C	; 28
   16fb6:	b5 01       	movw	r22, r10
   16fb8:	a4 01       	movw	r20, r8
   16fba:	82 81       	ldd	r24, Z+2	; 0x02
   16fbc:	93 81       	ldd	r25, Z+3	; 0x03
   16fbe:	0e 94 43 85 	call	0x10a86	; 0x10a86 <dbf_open_write>
   16fc2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16fc6:	86 ff       	sbrs	r24, 6
   16fc8:	04 c0       	rjmp	.+8      	; 0x16fd2 <amigo_buffered_write+0x12e>
   16fca:	8b e9       	ldi	r24, 0x9B	; 155
   16fcc:	90 e1       	ldi	r25, 0x10	; 16
   16fce:	0e 94 ac 85 	call	0x10b58	; 0x10b58 <gpib_timer_elapsed_end>
   16fd2:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   16fd6:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   16fda:	87 81       	ldd	r24, Z+7	; 0x07
   16fdc:	90 85       	ldd	r25, Z+8	; 0x08
   16fde:	89 2b       	or	r24, r25
   16fe0:	d9 f0       	breq	.+54     	; 0x17018 <amigo_buffered_write+0x174>
   16fe2:	81 e0       	ldi	r24, 0x01	; 1
   16fe4:	86 83       	std	Z+6, r24	; 0x06
   16fe6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16fea:	80 ff       	sbrs	r24, 0
   16fec:	0a c0       	rjmp	.+20     	; 0x17002 <amigo_buffered_write+0x15e>
   16fee:	84 e7       	ldi	r24, 0x74	; 116
   16ff0:	90 e3       	ldi	r25, 0x30	; 48
   16ff2:	a0 e0       	ldi	r26, 0x00	; 0
   16ff4:	ed b7       	in	r30, 0x3d	; 61
   16ff6:	fe b7       	in	r31, 0x3e	; 62
   16ff8:	81 83       	std	Z+1, r24	; 0x01
   16ffa:	92 83       	std	Z+2, r25	; 0x02
   16ffc:	a3 83       	std	Z+3, r26	; 0x03
   16ffe:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   17002:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   17006:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   1700a:	81 81       	ldd	r24, Z+1	; 0x01
   1700c:	90 e0       	ldi	r25, 0x00	; 0
   1700e:	0e 94 74 86 	call	0x10ce8	; 0x10ce8 <gpib_enable_PPR>
   17012:	80 e0       	ldi	r24, 0x00	; 0
   17014:	90 e0       	ldi	r25, 0x00	; 0
   17016:	1c c0       	rjmp	.+56     	; 0x17050 <amigo_buffered_write+0x1ac>
   17018:	83 ec       	ldi	r24, 0xC3	; 195
   1701a:	95 e1       	ldi	r25, 0x15	; 21
   1701c:	d1 dc       	rcall	.-1630   	; 0x169c0 <amigo_increment>
   1701e:	89 2b       	or	r24, r25
   17020:	59 f0       	breq	.+22     	; 0x17038 <amigo_buffered_write+0x194>
   17022:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   17026:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   1702a:	81 e0       	ldi	r24, 0x01	; 1
   1702c:	86 83       	std	Z+6, r24	; 0x06
   1702e:	87 81       	ldd	r24, Z+7	; 0x07
   17030:	90 85       	ldd	r25, Z+8	; 0x08
   17032:	84 60       	ori	r24, 0x04	; 4
   17034:	90 87       	std	Z+8, r25	; 0x08
   17036:	87 83       	std	Z+7, r24	; 0x07
   17038:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   1703c:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   17040:	81 81       	ldd	r24, Z+1	; 0x01
   17042:	90 e0       	ldi	r25, 0x00	; 0
   17044:	0e 94 74 86 	call	0x10ce8	; 0x10ce8 <gpib_enable_PPR>
   17048:	8e 81       	ldd	r24, Y+6	; 0x06
   1704a:	9f 81       	ldd	r25, Y+7	; 0x07
   1704c:	88 27       	eor	r24, r24
   1704e:	90 7d       	andi	r25, 0xD0	; 208
   17050:	27 96       	adiw	r28, 0x07	; 7
   17052:	0f b6       	in	r0, 0x3f	; 63
   17054:	f8 94       	cli
   17056:	de bf       	out	0x3e, r29	; 62
   17058:	0f be       	out	0x3f, r0	; 63
   1705a:	cd bf       	out	0x3d, r28	; 61
   1705c:	df 91       	pop	r29
   1705e:	cf 91       	pop	r28
   17060:	1f 91       	pop	r17
   17062:	0f 91       	pop	r16
   17064:	ff 90       	pop	r15
   17066:	ef 90       	pop	r14
   17068:	bf 90       	pop	r11
   1706a:	af 90       	pop	r10
   1706c:	9f 90       	pop	r9
   1706e:	8f 90       	pop	r8
   17070:	08 95       	ret

00017072 <amigo_cmd_dsj>:
   17072:	a8 e0       	ldi	r26, 0x08	; 8
   17074:	b0 e0       	ldi	r27, 0x00	; 0
   17076:	ef e3       	ldi	r30, 0x3F	; 63
   17078:	f8 eb       	ldi	r31, 0xB8	; 184
   1707a:	0c 94 0f e7 	jmp	0x1ce1e	; 0x1ce1e <__prologue_saves__+0x20>
   1707e:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   17082:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   17086:	86 81       	ldd	r24, Z+6	; 0x06
   17088:	88 87       	std	Y+8, r24	; 0x08
   1708a:	80 e0       	ldi	r24, 0x00	; 0
   1708c:	91 e0       	ldi	r25, 0x01	; 1
   1708e:	9f 83       	std	Y+7, r25	; 0x07
   17090:	8e 83       	std	Y+6, r24	; 0x06
   17092:	ae 01       	movw	r20, r28
   17094:	4a 5f       	subi	r20, 0xFA	; 250
   17096:	5f 4f       	sbci	r21, 0xFF	; 255
   17098:	61 e0       	ldi	r22, 0x01	; 1
   1709a:	70 e0       	ldi	r23, 0x00	; 0
   1709c:	ce 01       	movw	r24, r28
   1709e:	08 96       	adiw	r24, 0x08	; 8
   170a0:	0e 94 a4 8b 	call	0x11748	; 0x11748 <gpib_write_str>
   170a4:	2e 81       	ldd	r18, Y+6	; 0x06
   170a6:	3f 81       	ldd	r19, Y+7	; 0x07
   170a8:	22 27       	eor	r18, r18
   170aa:	30 7d       	andi	r19, 0xD0	; 208
   170ac:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   170b0:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   170b4:	40 91 b6 01 	lds	r20, 0x01B6	; 0x8001b6 <debuglevel>
   170b8:	23 2b       	or	r18, r19
   170ba:	11 f4       	brne	.+4      	; 0x170c0 <amigo_cmd_dsj+0x4e>
   170bc:	01 97       	sbiw	r24, 0x01	; 1
   170be:	c1 f0       	breq	.+48     	; 0x170f0 <amigo_cmd_dsj+0x7e>
   170c0:	81 e0       	ldi	r24, 0x01	; 1
   170c2:	86 83       	std	Z+6, r24	; 0x06
   170c4:	87 81       	ldd	r24, Z+7	; 0x07
   170c6:	90 85       	ldd	r25, Z+8	; 0x08
   170c8:	80 62       	ori	r24, 0x20	; 32
   170ca:	90 87       	std	Z+8, r25	; 0x08
   170cc:	87 83       	std	Z+7, r24	; 0x07
   170ce:	40 ff       	sbrs	r20, 0
   170d0:	0a c0       	rjmp	.+20     	; 0x170e6 <amigo_cmd_dsj+0x74>
   170d2:	8a e5       	ldi	r24, 0x5A	; 90
   170d4:	90 e3       	ldi	r25, 0x30	; 48
   170d6:	a0 e0       	ldi	r26, 0x00	; 0
   170d8:	ed b7       	in	r30, 0x3d	; 61
   170da:	fe b7       	in	r31, 0x3e	; 62
   170dc:	81 83       	std	Z+1, r24	; 0x01
   170de:	92 83       	std	Z+2, r25	; 0x02
   170e0:	a3 83       	std	Z+3, r26	; 0x03
   170e2:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   170e6:	8e 81       	ldd	r24, Y+6	; 0x06
   170e8:	9f 81       	ldd	r25, Y+7	; 0x07
   170ea:	88 27       	eor	r24, r24
   170ec:	90 7d       	andi	r25, 0xD0	; 208
   170ee:	19 c0       	rjmp	.+50     	; 0x17122 <amigo_cmd_dsj+0xb0>
   170f0:	45 ff       	sbrs	r20, 5
   170f2:	0e c0       	rjmp	.+28     	; 0x17110 <amigo_cmd_dsj+0x9e>
   170f4:	86 81       	ldd	r24, Z+6	; 0x06
   170f6:	90 e0       	ldi	r25, 0x00	; 0
   170f8:	ed b7       	in	r30, 0x3d	; 61
   170fa:	fe b7       	in	r31, 0x3e	; 62
   170fc:	95 83       	std	Z+5, r25	; 0x05
   170fe:	84 83       	std	Z+4, r24	; 0x04
   17100:	8d e4       	ldi	r24, 0x4D	; 77
   17102:	90 e3       	ldi	r25, 0x30	; 48
   17104:	a0 e0       	ldi	r26, 0x00	; 0
   17106:	81 83       	std	Z+1, r24	; 0x01
   17108:	92 83       	std	Z+2, r25	; 0x02
   1710a:	a3 83       	std	Z+3, r26	; 0x03
   1710c:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   17110:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   17114:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   17118:	16 82       	std	Z+6, r1	; 0x06
   1711a:	10 86       	std	Z+8, r1	; 0x08
   1711c:	17 82       	std	Z+7, r1	; 0x07
   1711e:	80 e0       	ldi	r24, 0x00	; 0
   17120:	90 e0       	ldi	r25, 0x00	; 0
   17122:	28 96       	adiw	r28, 0x08	; 8
   17124:	e2 e0       	ldi	r30, 0x02	; 2
   17126:	0c 94 2b e7 	jmp	0x1ce56	; 0x1ce56 <__epilogue_restores__+0x20>

0001712a <amigo_cmd_clear>:
/// - Reference: A23.
/// - Select sector 0.
/// @return  0

int amigo_cmd_clear()
{
   1712a:	00 d0       	rcall	.+0      	; 0x1712c <amigo_cmd_clear+0x2>
   1712c:	1f 92       	push	r1
#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1712e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17132:	85 ff       	sbrs	r24, 5
   17134:	0a c0       	rjmp	.+20     	; 0x1714a <amigo_cmd_clear+0x20>
        printf("[AMIGO Clear]\n");
   17136:	8e e3       	ldi	r24, 0x3E	; 62
   17138:	90 e3       	ldi	r25, 0x30	; 48
   1713a:	a0 e0       	ldi	r26, 0x00	; 0
   1713c:	ed b7       	in	r30, 0x3d	; 61
   1713e:	fe b7       	in	r31, 0x3e	; 62
   17140:	81 83       	std	Z+1, r24	; 0x01
   17142:	92 83       	std	Z+2, r25	; 0x02
   17144:	a3 83       	std	Z+3, r26	; 0x03
   17146:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
#endif
    AMIGOs->sector = 0;
   1714a:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   1714e:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   17152:	15 82       	std	Z+5, r1	; 0x05
    AMIGOs->head = 0;
   17154:	14 82       	std	Z+4, r1	; 0x04
    AMIGOs->cyl = 0;
   17156:	13 82       	std	Z+3, r1	; 0x03
/// @todo FIXME
///
///  Clear the DSJ byte that might be 2 after powerup
///
    AMIGOs->dsj = 0;
   17158:	16 82       	std	Z+6, r1	; 0x06
    AMIGOs->Errors =0;
   1715a:	10 86       	std	Z+8, r1	; 0x08
   1715c:	17 82       	std	Z+7, r1	; 0x07

    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   1715e:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   17162:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   17166:	81 81       	ldd	r24, Z+1	; 0x01
   17168:	90 e0       	ldi	r25, 0x00	; 0
   1716a:	0e 94 74 86 	call	0x10ce8	; 0x10ce8 <gpib_enable_PPR>
    return(0);
}
   1716e:	80 e0       	ldi	r24, 0x00	; 0
   17170:	90 e0       	ldi	r25, 0x00	; 0
   17172:	0f 90       	pop	r0
   17174:	0f 90       	pop	r0
   17176:	0f 90       	pop	r0
   17178:	08 95       	ret

0001717a <amigo_todo_op>:
/// @param[in] opcode: GPIB data byte OP Code
/// @param[in] len: Length of GOIB data returned
/// @return  0

int amigo_todo_op(uint8_t secondary, uint8_t opcode, int len)
{
   1717a:	af e0       	ldi	r26, 0x0F	; 15
   1717c:	b0 e0       	ldi	r27, 0x00	; 0
   1717e:	e3 ec       	ldi	r30, 0xC3	; 195
   17180:	f8 eb       	ldi	r31, 0xB8	; 184
   17182:	0c 94 0b e7 	jmp	0x1ce16	; 0x1ce16 <__prologue_saves__+0x18>
   17186:	c8 2f       	mov	r28, r24
   17188:	e6 2e       	mov	r14, r22
   1718a:	8a 01       	movw	r16, r20
    if(AMIGO_is_MLA(listening))
   1718c:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   17190:	90 e0       	ldi	r25, 0x00	; 0
   17192:	0e 94 da 8c 	call	0x119b4	; 0x119b4 <AMIGO_is_MLA>
   17196:	20 91 f6 1e 	lds	r18, 0x1EF6	; 0x801ef6 <talking>
   1719a:	f1 2c       	mov	r15, r1
   1719c:	d0 e0       	ldi	r29, 0x00	; 0
   1719e:	89 2b       	or	r24, r25
   171a0:	f1 f0       	breq	.+60     	; 0x171de <amigo_todo_op+0x64>
        printf("[L   Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   171a2:	82 2f       	mov	r24, r18
   171a4:	90 e0       	ldi	r25, 0x00	; 0
   171a6:	ed b7       	in	r30, 0x3d	; 61
   171a8:	fe b7       	in	r31, 0x3e	; 62
   171aa:	97 87       	std	Z+15, r25	; 0x0f
   171ac:	86 87       	std	Z+14, r24	; 0x0e
   171ae:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   171b2:	90 e0       	ldi	r25, 0x00	; 0
   171b4:	95 87       	std	Z+13, r25	; 0x0d
   171b6:	84 87       	std	Z+12, r24	; 0x0c
   171b8:	13 87       	std	Z+11, r17	; 0x0b
   171ba:	02 87       	std	Z+10, r16	; 0x0a
   171bc:	f1 86       	std	Z+9, r15	; 0x09
   171be:	e0 86       	std	Z+8, r14	; 0x08
   171c0:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   171c4:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   171c8:	80 81       	ld	r24, Z
   171ca:	90 e0       	ldi	r25, 0x00	; 0
   171cc:	ed b7       	in	r30, 0x3d	; 61
   171ce:	fe b7       	in	r31, 0x3e	; 62
   171d0:	97 83       	std	Z+7, r25	; 0x07
   171d2:	86 83       	std	Z+6, r24	; 0x06
   171d4:	d5 83       	std	Z+5, r29	; 0x05
   171d6:	c4 83       	std	Z+4, r28	; 0x04
   171d8:	87 ed       	ldi	r24, 0xD7	; 215
   171da:	9f e2       	ldi	r25, 0x2F	; 47
   171dc:	51 c0       	rjmp	.+162    	; 0x17280 <amigo_todo_op+0x106>
            secondary, AMIGOs->state, opcode, len, listening, talking);
    else if(AMIGO_is_MTA(talking))
   171de:	82 2f       	mov	r24, r18
   171e0:	90 e0       	ldi	r25, 0x00	; 0
   171e2:	0e 94 ec 8c 	call	0x119d8	; 0x119d8 <AMIGO_is_MTA>
   171e6:	20 91 f8 1e 	lds	r18, 0x1EF8	; 0x801ef8 <listening>
   171ea:	30 91 f6 1e 	lds	r19, 0x1EF6	; 0x801ef6 <talking>
   171ee:	a0 91 6a 19 	lds	r26, 0x196A	; 0x80196a <AMIGOs>
   171f2:	b0 91 6b 19 	lds	r27, 0x196B	; 0x80196b <AMIGOs+0x1>
   171f6:	89 2b       	or	r24, r25
   171f8:	b1 f0       	breq	.+44     	; 0x17226 <amigo_todo_op+0xac>
        printf("[T   Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   171fa:	83 2f       	mov	r24, r19
   171fc:	90 e0       	ldi	r25, 0x00	; 0
   171fe:	ed b7       	in	r30, 0x3d	; 61
   17200:	fe b7       	in	r31, 0x3e	; 62
   17202:	97 87       	std	Z+15, r25	; 0x0f
   17204:	86 87       	std	Z+14, r24	; 0x0e
   17206:	30 e0       	ldi	r19, 0x00	; 0
   17208:	35 87       	std	Z+13, r19	; 0x0d
   1720a:	24 87       	std	Z+12, r18	; 0x0c
   1720c:	13 87       	std	Z+11, r17	; 0x0b
   1720e:	02 87       	std	Z+10, r16	; 0x0a
   17210:	f1 86       	std	Z+9, r15	; 0x09
   17212:	e0 86       	std	Z+8, r14	; 0x08
   17214:	8c 91       	ld	r24, X
   17216:	90 e0       	ldi	r25, 0x00	; 0
   17218:	97 83       	std	Z+7, r25	; 0x07
   1721a:	86 83       	std	Z+6, r24	; 0x06
   1721c:	d5 83       	std	Z+5, r29	; 0x05
   1721e:	c4 83       	std	Z+4, r28	; 0x04
   17220:	80 e7       	ldi	r24, 0x70	; 112
   17222:	9f e2       	ldi	r25, 0x2F	; 47
   17224:	2d c0       	rjmp	.+90     	; 0x17280 <amigo_todo_op+0x106>
                secondary, AMIGOs->state, opcode, len, listening, talking);
    else if(talking == UNT)
   17226:	3f 35       	cpi	r19, 0x5F	; 95
   17228:	b1 f4       	brne	.+44     	; 0x17256 <amigo_todo_op+0xdc>
        printf("[UNT Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   1722a:	8f e5       	ldi	r24, 0x5F	; 95
   1722c:	90 e0       	ldi	r25, 0x00	; 0
   1722e:	ed b7       	in	r30, 0x3d	; 61
   17230:	fe b7       	in	r31, 0x3e	; 62
   17232:	97 87       	std	Z+15, r25	; 0x0f
   17234:	86 87       	std	Z+14, r24	; 0x0e
   17236:	30 e0       	ldi	r19, 0x00	; 0
   17238:	35 87       	std	Z+13, r19	; 0x0d
   1723a:	24 87       	std	Z+12, r18	; 0x0c
   1723c:	13 87       	std	Z+11, r17	; 0x0b
   1723e:	02 87       	std	Z+10, r16	; 0x0a
   17240:	f1 86       	std	Z+9, r15	; 0x09
   17242:	e0 86       	std	Z+8, r14	; 0x08
   17244:	8c 91       	ld	r24, X
   17246:	90 e0       	ldi	r25, 0x00	; 0
   17248:	97 83       	std	Z+7, r25	; 0x07
   1724a:	86 83       	std	Z+6, r24	; 0x06
   1724c:	d5 83       	std	Z+5, r29	; 0x05
   1724e:	c4 83       	std	Z+4, r28	; 0x04
   17250:	89 e0       	ldi	r24, 0x09	; 9
   17252:	9f e2       	ldi	r25, 0x2F	; 47
   17254:	15 c0       	rjmp	.+42     	; 0x17280 <amigo_todo_op+0x106>
                secondary, AMIGOs->state, opcode, len, listening, talking);
    else
        printf("[U Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   17256:	83 2f       	mov	r24, r19
   17258:	90 e0       	ldi	r25, 0x00	; 0
   1725a:	ed b7       	in	r30, 0x3d	; 61
   1725c:	fe b7       	in	r31, 0x3e	; 62
   1725e:	97 87       	std	Z+15, r25	; 0x0f
   17260:	86 87       	std	Z+14, r24	; 0x0e
   17262:	30 e0       	ldi	r19, 0x00	; 0
   17264:	35 87       	std	Z+13, r19	; 0x0d
   17266:	24 87       	std	Z+12, r18	; 0x0c
   17268:	13 87       	std	Z+11, r17	; 0x0b
   1726a:	02 87       	std	Z+10, r16	; 0x0a
   1726c:	f1 86       	std	Z+9, r15	; 0x09
   1726e:	e0 86       	std	Z+8, r14	; 0x08
   17270:	8c 91       	ld	r24, X
   17272:	90 e0       	ldi	r25, 0x00	; 0
   17274:	97 83       	std	Z+7, r25	; 0x07
   17276:	86 83       	std	Z+6, r24	; 0x06
   17278:	d5 83       	std	Z+5, r29	; 0x05
   1727a:	c4 83       	std	Z+4, r28	; 0x04
   1727c:	84 ea       	ldi	r24, 0xA4	; 164
   1727e:	9e e2       	ldi	r25, 0x2E	; 46
   17280:	a0 e0       	ldi	r26, 0x00	; 0
   17282:	81 83       	std	Z+1, r24	; 0x01
   17284:	92 83       	std	Z+2, r25	; 0x02
   17286:	a3 83       	std	Z+3, r26	; 0x03
   17288:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
            secondary, AMIGOs->state, opcode, len, listening, talking);
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   1728c:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   17290:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   17294:	81 81       	ldd	r24, Z+1	; 0x01
   17296:	90 e0       	ldi	r25, 0x00	; 0
   17298:	0e 94 74 86 	call	0x10ce8	; 0x10ce8 <gpib_enable_PPR>
    return(0);
}
   1729c:	80 e0       	ldi	r24, 0x00	; 0
   1729e:	90 e0       	ldi	r25, 0x00	; 0
   172a0:	cd b7       	in	r28, 0x3d	; 61
   172a2:	de b7       	in	r29, 0x3e	; 62
   172a4:	2f 96       	adiw	r28, 0x0f	; 15
   172a6:	e6 e0       	ldi	r30, 0x06	; 6
   172a8:	0c 94 27 e7 	jmp	0x1ce4e	; 0x1ce4e <__epilogue_restores__+0x18>

000172ac <amigo_todo>:
/// @param[in] secondary: GPIB seconday command
///
/// @return  0

int amigo_todo(uint8_t secondary)
{
   172ac:	ab e0       	ldi	r26, 0x0B	; 11
   172ae:	b0 e0       	ldi	r27, 0x00	; 0
   172b0:	ec e5       	ldi	r30, 0x5C	; 92
   172b2:	f9 eb       	ldi	r31, 0xB9	; 185
   172b4:	0c 94 0f e7 	jmp	0x1ce1e	; 0x1ce1e <__prologue_saves__+0x20>
   172b8:	c8 2f       	mov	r28, r24
    if(AMIGO_is_MLA(listening))
   172ba:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   172be:	90 e0       	ldi	r25, 0x00	; 0
   172c0:	0e 94 da 8c 	call	0x119b4	; 0x119b4 <AMIGO_is_MLA>
   172c4:	20 91 f6 1e 	lds	r18, 0x1EF6	; 0x801ef6 <talking>
   172c8:	d0 e0       	ldi	r29, 0x00	; 0
   172ca:	89 2b       	or	r24, r25
   172cc:	d1 f0       	breq	.+52     	; 0x17302 <amigo_todo+0x56>
        printf("[L   Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   172ce:	82 2f       	mov	r24, r18
   172d0:	90 e0       	ldi	r25, 0x00	; 0
   172d2:	ed b7       	in	r30, 0x3d	; 61
   172d4:	fe b7       	in	r31, 0x3e	; 62
   172d6:	93 87       	std	Z+11, r25	; 0x0b
   172d8:	82 87       	std	Z+10, r24	; 0x0a
   172da:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   172de:	90 e0       	ldi	r25, 0x00	; 0
   172e0:	91 87       	std	Z+9, r25	; 0x09
   172e2:	80 87       	std	Z+8, r24	; 0x08
   172e4:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   172e8:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   172ec:	80 81       	ld	r24, Z
   172ee:	90 e0       	ldi	r25, 0x00	; 0
   172f0:	ed b7       	in	r30, 0x3d	; 61
   172f2:	fe b7       	in	r31, 0x3e	; 62
   172f4:	97 83       	std	Z+7, r25	; 0x07
   172f6:	86 83       	std	Z+6, r24	; 0x06
   172f8:	d5 83       	std	Z+5, r29	; 0x05
   172fa:	c4 83       	std	Z+4, r28	; 0x04
   172fc:	84 e5       	ldi	r24, 0x54	; 84
   172fe:	9e e2       	ldi	r25, 0x2E	; 46
   17300:	43 c0       	rjmp	.+134    	; 0x17388 <amigo_todo+0xdc>
            secondary,AMIGOs->state,listening,talking);
    else if(AMIGO_is_MTA(talking))
   17302:	82 2f       	mov	r24, r18
   17304:	90 e0       	ldi	r25, 0x00	; 0
   17306:	0e 94 ec 8c 	call	0x119d8	; 0x119d8 <AMIGO_is_MTA>
   1730a:	20 91 f8 1e 	lds	r18, 0x1EF8	; 0x801ef8 <listening>
   1730e:	40 91 f6 1e 	lds	r20, 0x1EF6	; 0x801ef6 <talking>
   17312:	a0 91 6a 19 	lds	r26, 0x196A	; 0x80196a <AMIGOs>
   17316:	b0 91 6b 19 	lds	r27, 0x196B	; 0x80196b <AMIGOs+0x1>
   1731a:	89 2b       	or	r24, r25
   1731c:	89 f0       	breq	.+34     	; 0x17340 <amigo_todo+0x94>
        printf("[T   Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   1731e:	50 e0       	ldi	r21, 0x00	; 0
   17320:	ed b7       	in	r30, 0x3d	; 61
   17322:	fe b7       	in	r31, 0x3e	; 62
   17324:	53 87       	std	Z+11, r21	; 0x0b
   17326:	42 87       	std	Z+10, r20	; 0x0a
   17328:	30 e0       	ldi	r19, 0x00	; 0
   1732a:	31 87       	std	Z+9, r19	; 0x09
   1732c:	20 87       	std	Z+8, r18	; 0x08
   1732e:	8c 91       	ld	r24, X
   17330:	90 e0       	ldi	r25, 0x00	; 0
   17332:	97 83       	std	Z+7, r25	; 0x07
   17334:	86 83       	std	Z+6, r24	; 0x06
   17336:	d5 83       	std	Z+5, r29	; 0x05
   17338:	c4 83       	std	Z+4, r28	; 0x04
   1733a:	84 e0       	ldi	r24, 0x04	; 4
   1733c:	9e e2       	ldi	r25, 0x2E	; 46
   1733e:	24 c0       	rjmp	.+72     	; 0x17388 <amigo_todo+0xdc>
                secondary,AMIGOs->state,listening,talking);
    else if(talking == UNT)
   17340:	4f 35       	cpi	r20, 0x5F	; 95
   17342:	91 f4       	brne	.+36     	; 0x17368 <amigo_todo+0xbc>
        printf("[UNT Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   17344:	8f e5       	ldi	r24, 0x5F	; 95
   17346:	90 e0       	ldi	r25, 0x00	; 0
   17348:	ed b7       	in	r30, 0x3d	; 61
   1734a:	fe b7       	in	r31, 0x3e	; 62
   1734c:	93 87       	std	Z+11, r25	; 0x0b
   1734e:	82 87       	std	Z+10, r24	; 0x0a
   17350:	30 e0       	ldi	r19, 0x00	; 0
   17352:	31 87       	std	Z+9, r19	; 0x09
   17354:	20 87       	std	Z+8, r18	; 0x08
   17356:	8c 91       	ld	r24, X
   17358:	90 e0       	ldi	r25, 0x00	; 0
   1735a:	97 83       	std	Z+7, r25	; 0x07
   1735c:	86 83       	std	Z+6, r24	; 0x06
   1735e:	d5 83       	std	Z+5, r29	; 0x05
   17360:	c4 83       	std	Z+4, r28	; 0x04
   17362:	84 eb       	ldi	r24, 0xB4	; 180
   17364:	9d e2       	ldi	r25, 0x2D	; 45
   17366:	10 c0       	rjmp	.+32     	; 0x17388 <amigo_todo+0xdc>
                secondary,AMIGOs->state,listening,talking);
    else
        printf("[E   Amigo ERROR secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   17368:	50 e0       	ldi	r21, 0x00	; 0
   1736a:	ed b7       	in	r30, 0x3d	; 61
   1736c:	fe b7       	in	r31, 0x3e	; 62
   1736e:	53 87       	std	Z+11, r21	; 0x0b
   17370:	42 87       	std	Z+10, r20	; 0x0a
   17372:	30 e0       	ldi	r19, 0x00	; 0
   17374:	31 87       	std	Z+9, r19	; 0x09
   17376:	20 87       	std	Z+8, r18	; 0x08
   17378:	8c 91       	ld	r24, X
   1737a:	90 e0       	ldi	r25, 0x00	; 0
   1737c:	97 83       	std	Z+7, r25	; 0x07
   1737e:	86 83       	std	Z+6, r24	; 0x06
   17380:	d5 83       	std	Z+5, r29	; 0x05
   17382:	c4 83       	std	Z+4, r28	; 0x04
   17384:	83 e6       	ldi	r24, 0x63	; 99
   17386:	9d e2       	ldi	r25, 0x2D	; 45
   17388:	a0 e0       	ldi	r26, 0x00	; 0
   1738a:	81 83       	std	Z+1, r24	; 0x01
   1738c:	92 83       	std	Z+2, r25	; 0x02
   1738e:	a3 83       	std	Z+3, r26	; 0x03
   17390:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
            secondary,AMIGOs->state,listening,talking);
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   17394:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   17398:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   1739c:	81 81       	ldd	r24, Z+1	; 0x01
   1739e:	90 e0       	ldi	r25, 0x00	; 0
   173a0:	0e 94 74 86 	call	0x10ce8	; 0x10ce8 <gpib_enable_PPR>
    return(0);
}
   173a4:	80 e0       	ldi	r24, 0x00	; 0
   173a6:	90 e0       	ldi	r25, 0x00	; 0
   173a8:	cd b7       	in	r28, 0x3d	; 61
   173aa:	de b7       	in	r29, 0x3e	; 62
   173ac:	2b 96       	adiw	r28, 0x0b	; 11
   173ae:	e2 e0       	ldi	r30, 0x02	; 2
   173b0:	0c 94 2b e7 	jmp	0x1ce56	; 0x1ce56 <__epilogue_restores__+0x20>

000173b4 <amigo_check_unit>:
/// @brief  Amigo Check Valid unit
/// @param[in] unit: unit to set
/// @return void
void amigo_check_unit(uint8_t unit)
{
    if(unit != 15)
   173b4:	8f 30       	cpi	r24, 0x0F	; 15
   173b6:	29 f0       	breq	.+10     	; 0x173c2 <amigo_check_unit+0xe>
        AMIGOs->unitNO = unit;
   173b8:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   173bc:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   173c0:	81 83       	std	Z+1, r24	; 0x01
    if(AMIGOs->unitNO != 0)
   173c2:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   173c6:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   173ca:	81 81       	ldd	r24, Z+1	; 0x01
   173cc:	88 23       	and	r24, r24
   173ce:	29 f0       	breq	.+10     	; 0x173da <amigo_check_unit+0x26>
        AMIGOs->Errors |= ERR_UNIT;
   173d0:	87 81       	ldd	r24, Z+7	; 0x07
   173d2:	90 85       	ldd	r25, Z+8	; 0x08
   173d4:	80 64       	ori	r24, 0x40	; 64
   173d6:	90 87       	std	Z+8, r25	; 0x08
   173d8:	87 83       	std	Z+7, r24	; 0x07
   173da:	08 95       	ret

000173dc <Amigo_Command>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list)

int Amigo_Command( int secondary )
{
   173dc:	ac e1       	ldi	r26, 0x1C	; 28
   173de:	b0 e0       	ldi	r27, 0x00	; 0
   173e0:	e4 ef       	ldi	r30, 0xF4	; 244
   173e2:	f9 eb       	ldi	r31, 0xB9	; 185
   173e4:	0c 94 0b e7 	jmp	0x1ce16	; 0x1ce16 <__prologue_saves__+0x18>
   173e8:	7c 01       	movw	r14, r24
    uint8_t *ptr;
    uint16_t status;                              // Current status
    UINT len;                                     // Size of Data/Op Codes/Parameters read in bytes

#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   173ea:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   173ee:	85 ff       	sbrs	r24, 5
   173f0:	16 c0       	rjmp	.+44     	; 0x1741e <Amigo_Command+0x42>
        printf("[AMIGO Command(%02XH): listen:%02XH, talk:%02XH]\n",
   173f2:	80 91 f6 1e 	lds	r24, 0x1EF6	; 0x801ef6 <talking>
   173f6:	90 e0       	ldi	r25, 0x00	; 0
   173f8:	ed b7       	in	r30, 0x3d	; 61
   173fa:	fe b7       	in	r31, 0x3e	; 62
   173fc:	91 87       	std	Z+9, r25	; 0x09
   173fe:	80 87       	std	Z+8, r24	; 0x08
   17400:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   17404:	90 e0       	ldi	r25, 0x00	; 0
   17406:	97 83       	std	Z+7, r25	; 0x07
   17408:	86 83       	std	Z+6, r24	; 0x06
   1740a:	f5 82       	std	Z+5, r15	; 0x05
   1740c:	e4 82       	std	Z+4, r14	; 0x04
   1740e:	81 e3       	ldi	r24, 0x31	; 49
   17410:	9d e2       	ldi	r25, 0x2D	; 45
   17412:	a0 e0       	ldi	r26, 0x00	; 0
   17414:	81 83       	std	Z+1, r24	; 0x01
   17416:	92 83       	std	Z+2, r25	; 0x02
   17418:	a3 83       	std	Z+3, r26	; 0x03
   1741a:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
            secondary, listening, talking);
#endif

///  Reference: A14
    if (secondary == 0x7e && AMIGO_is_MTA(talking))
   1741e:	fe e7       	ldi	r31, 0x7E	; 126
   17420:	ef 16       	cp	r14, r31
   17422:	f1 04       	cpc	r15, r1
   17424:	f1 f5       	brne	.+124    	; 0x174a2 <Amigo_Command+0xc6>
   17426:	80 91 f6 1e 	lds	r24, 0x1EF6	; 0x801ef6 <talking>
   1742a:	90 e0       	ldi	r25, 0x00	; 0
   1742c:	0e 94 ec 8c 	call	0x119d8	; 0x119d8 <AMIGO_is_MTA>
   17430:	89 2b       	or	r24, r25
   17432:	09 f4       	brne	.+2      	; 0x17436 <Amigo_Command+0x5a>
   17434:	86 c0       	rjmp	.+268    	; 0x17542 <Amigo_Command+0x166>
    {
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   17436:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   1743a:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   1743e:	81 81       	ldd	r24, Z+1	; 0x01
   17440:	90 e0       	ldi	r25, 0x00	; 0
   17442:	0e 94 aa 86 	call	0x10d54	; 0x10d54 <gpib_disable_PPR>
        status = EOI_FLAG;
   17446:	80 e0       	ldi	r24, 0x00	; 0
   17448:	91 e0       	ldi	r25, 0x01	; 1
   1744a:	9c 8f       	std	Y+28, r25	; 0x1c
   1744c:	8b 8f       	std	Y+27, r24	; 0x1b
        len = gpib_write_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   1744e:	ae 01       	movw	r20, r28
   17450:	45 5e       	subi	r20, 0xE5	; 229
   17452:	5f 4f       	sbci	r21, 0xFF	; 255
   17454:	60 e0       	ldi	r22, 0x00	; 0
   17456:	72 e0       	ldi	r23, 0x02	; 2
   17458:	82 ef       	ldi	r24, 0xF2	; 242
   1745a:	9c e1       	ldi	r25, 0x1C	; 28
   1745c:	0e 94 a4 8b 	call	0x11748	; 0x11748 <gpib_write_str>
        gpib_enable_PPR(AMIGOp->HEADER.PPR);
   17460:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   17464:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   17468:	81 81       	ldd	r24, Z+1	; 0x01
   1746a:	90 e0       	ldi	r25, 0x00	; 0
   1746c:	0e 94 74 86 	call	0x10ce8	; 0x10ce8 <gpib_enable_PPR>
        if(status & ERROR_MASK)
   17470:	8b 8d       	ldd	r24, Y+27	; 0x1b
   17472:	9c 8d       	ldd	r25, Y+28	; 0x1c
   17474:	88 27       	eor	r24, r24
   17476:	90 7d       	andi	r25, 0xD0	; 208
   17478:	89 2b       	or	r24, r25
   1747a:	09 f4       	brne	.+2      	; 0x1747e <Amigo_Command+0xa2>
   1747c:	89 c2       	rjmp	.+1298   	; 0x17990 <Amigo_Command+0x5b4>
        {
            AMIGOs->dsj = 1;
   1747e:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   17482:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   17486:	81 e0       	ldi	r24, 0x01	; 1
   17488:	86 83       	std	Z+6, r24	; 0x06
            AMIGOs->Errors |= ERR_GPIB;
   1748a:	87 81       	ldd	r24, Z+7	; 0x07
   1748c:	90 85       	ldd	r25, Z+8	; 0x08
   1748e:	80 62       	ori	r24, 0x20	; 32
   17490:	90 87       	std	Z+8, r25	; 0x08
   17492:	87 83       	std	Z+7, r24	; 0x07
            if(debuglevel & GPIB_ERR)
   17494:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17498:	80 ff       	sbrs	r24, 0
   1749a:	7a c2       	rjmp	.+1268   	; 0x17990 <Amigo_Command+0x5b4>
                printf("[AMIGO_Command:GPIB write error]\n");
   1749c:	8f e0       	ldi	r24, 0x0F	; 15
   1749e:	9d e2       	ldi	r25, 0x2D	; 45
   174a0:	8e c0       	rjmp	.+284    	; 0x175be <Amigo_Command+0x1e2>
        }
        return(status & ERROR_MASK);
    }

///  Reference: A25
    if (secondary == 0x7f && AMIGO_is_MLA(listening))
   174a2:	ff e7       	ldi	r31, 0x7F	; 127
   174a4:	ef 16       	cp	r14, r31
   174a6:	f1 04       	cpc	r15, r1
   174a8:	09 f0       	breq	.+2      	; 0x174ac <Amigo_Command+0xd0>
   174aa:	4b c0       	rjmp	.+150    	; 0x17542 <Amigo_Command+0x166>
   174ac:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   174b0:	90 e0       	ldi	r25, 0x00	; 0
   174b2:	0e 94 da 8c 	call	0x119b4	; 0x119b4 <AMIGO_is_MLA>
   174b6:	89 2b       	or	r24, r25
   174b8:	09 f4       	brne	.+2      	; 0x174bc <Amigo_Command+0xe0>
   174ba:	43 c0       	rjmp	.+134    	; 0x17542 <Amigo_Command+0x166>
    {
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   174bc:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   174c0:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   174c4:	81 81       	ldd	r24, Z+1	; 0x01
   174c6:	90 e0       	ldi	r25, 0x00	; 0
   174c8:	0e 94 aa 86 	call	0x10d54	; 0x10d54 <gpib_disable_PPR>
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_TIMING)
   174cc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   174d0:	87 fd       	sbrc	r24, 7
            gpib_timer_elapsed_begin();
   174d2:	0e 94 9a 85 	call	0x10b34	; 0x10b34 <gpib_timer_elapsed_begin>
#endif
        status = EOI_FLAG;
   174d6:	80 e0       	ldi	r24, 0x00	; 0
   174d8:	91 e0       	ldi	r25, 0x01	; 1
   174da:	9c 8f       	std	Y+28, r25	; 0x1c
   174dc:	8b 8f       	std	Y+27, r24	; 0x1b
        len = gpib_read_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   174de:	ae 01       	movw	r20, r28
   174e0:	45 5e       	subi	r20, 0xE5	; 229
   174e2:	5f 4f       	sbci	r21, 0xFF	; 255
   174e4:	60 e0       	ldi	r22, 0x00	; 0
   174e6:	72 e0       	ldi	r23, 0x02	; 2
   174e8:	82 ef       	ldi	r24, 0xF2	; 242
   174ea:	9c e1       	ldi	r25, 0x1C	; 28
   174ec:	0e 94 02 8b 	call	0x11604	; 0x11604 <gpib_read_str>
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_TIMING)
   174f0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   174f4:	87 ff       	sbrs	r24, 7
   174f6:	04 c0       	rjmp	.+8      	; 0x17500 <Amigo_Command+0x124>
            gpib_timer_elapsed_end("GPIB read");
   174f8:	82 ed       	ldi	r24, 0xD2	; 210
   174fa:	95 e1       	ldi	r25, 0x15	; 21
   174fc:	0e 94 ac 85 	call	0x10b58	; 0x10b58 <gpib_timer_elapsed_end>
#endif
        gpib_enable_PPR(AMIGOp->HEADER.PPR);
   17500:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   17504:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   17508:	81 81       	ldd	r24, Z+1	; 0x01
   1750a:	90 e0       	ldi	r25, 0x00	; 0
   1750c:	0e 94 74 86 	call	0x10ce8	; 0x10ce8 <gpib_enable_PPR>
        if(status & ERROR_MASK)
   17510:	8b 8d       	ldd	r24, Y+27	; 0x1b
   17512:	9c 8d       	ldd	r25, Y+28	; 0x1c
   17514:	88 27       	eor	r24, r24
   17516:	90 7d       	andi	r25, 0xD0	; 208
   17518:	89 2b       	or	r24, r25
   1751a:	09 f4       	brne	.+2      	; 0x1751e <Amigo_Command+0x142>
   1751c:	39 c2       	rjmp	.+1138   	; 0x17990 <Amigo_Command+0x5b4>
        {
            AMIGOs->dsj = 1;
   1751e:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   17522:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   17526:	81 e0       	ldi	r24, 0x01	; 1
   17528:	86 83       	std	Z+6, r24	; 0x06
            AMIGOs->Errors |= ERR_GPIB;
   1752a:	87 81       	ldd	r24, Z+7	; 0x07
   1752c:	90 85       	ldd	r25, Z+8	; 0x08
   1752e:	80 62       	ori	r24, 0x20	; 32
   17530:	90 87       	std	Z+8, r25	; 0x08
   17532:	87 83       	std	Z+7, r24	; 0x07
            if(debuglevel & GPIB_ERR)
   17534:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17538:	80 ff       	sbrs	r24, 0
   1753a:	2a c2       	rjmp	.+1108   	; 0x17990 <Amigo_Command+0x5b4>
                printf("[AMIGO Command:GPIB read error]\n");
   1753c:	8e ee       	ldi	r24, 0xEE	; 238
   1753e:	9c e2       	ldi	r25, 0x2C	; 44
   17540:	3e c0       	rjmp	.+124    	; 0x175be <Amigo_Command+0x1e2>
        }
        return(status & ERROR_MASK);
    }

    if( !AMIGO_is_MLA(listening) || AMIGO_is_MTA(talking))
   17542:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   17546:	90 e0       	ldi	r25, 0x00	; 0
   17548:	0e 94 da 8c 	call	0x119b4	; 0x119b4 <AMIGO_is_MLA>
   1754c:	89 2b       	or	r24, r25
   1754e:	19 f4       	brne	.+6      	; 0x17556 <Amigo_Command+0x17a>
        return(0);
   17550:	80 e0       	ldi	r24, 0x00	; 0
   17552:	90 e0       	ldi	r25, 0x00	; 0
   17554:	25 c2       	rjmp	.+1098   	; 0x179a0 <Amigo_Command+0x5c4>
                printf("[AMIGO Command:GPIB read error]\n");
        }
        return(status & ERROR_MASK);
    }

    if( !AMIGO_is_MLA(listening) || AMIGO_is_MTA(talking))
   17556:	80 91 f6 1e 	lds	r24, 0x1EF6	; 0x801ef6 <talking>
   1755a:	90 e0       	ldi	r25, 0x00	; 0
   1755c:	0e 94 ec 8c 	call	0x119d8	; 0x119d8 <AMIGO_is_MTA>
   17560:	89 2b       	or	r24, r25
   17562:	b1 f7       	brne	.-20     	; 0x17550 <Amigo_Command+0x174>
        return(0);

    gpib_disable_PPR(AMIGOp->HEADER.PPR);
   17564:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   17568:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   1756c:	81 81       	ldd	r24, Z+1	; 0x01
   1756e:	90 e0       	ldi	r25, 0x00	; 0
   17570:	0e 94 aa 86 	call	0x10d54	; 0x10d54 <gpib_disable_PPR>

///  Note: the function will "unread" any commands and return
///  All Data MUST have EOI

    status = EOI_FLAG;
   17574:	80 e0       	ldi	r24, 0x00	; 0
   17576:	91 e0       	ldi	r25, 0x01	; 1
   17578:	9c 8f       	std	Y+28, r25	; 0x1c
   1757a:	8b 8f       	std	Y+27, r24	; 0x1b
    len = gpib_read_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   1757c:	ae 01       	movw	r20, r28
   1757e:	45 5e       	subi	r20, 0xE5	; 229
   17580:	5f 4f       	sbci	r21, 0xFF	; 255
   17582:	60 e0       	ldi	r22, 0x00	; 0
   17584:	72 e0       	ldi	r23, 0x02	; 2
   17586:	82 ef       	ldi	r24, 0xF2	; 242
   17588:	9c e1       	ldi	r25, 0x1C	; 28
   1758a:	0e 94 02 8b 	call	0x11604	; 0x11604 <gpib_read_str>
   1758e:	8c 01       	movw	r16, r24
    if(status & ERROR_MASK)
   17590:	8b 8d       	ldd	r24, Y+27	; 0x1b
   17592:	9c 8d       	ldd	r25, Y+28	; 0x1c
   17594:	88 27       	eor	r24, r24
   17596:	90 7d       	andi	r25, 0xD0	; 208
   17598:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1759c:	89 2b       	or	r24, r25
   1759e:	c1 f0       	breq	.+48     	; 0x175d0 <Amigo_Command+0x1f4>
    {
        AMIGOs->dsj = 1;
   175a0:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   175a4:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   175a8:	81 e0       	ldi	r24, 0x01	; 1
   175aa:	86 83       	std	Z+6, r24	; 0x06
        AMIGOs->Errors |= ERR_GPIB;
   175ac:	87 81       	ldd	r24, Z+7	; 0x07
   175ae:	90 85       	ldd	r25, Z+8	; 0x08
   175b0:	80 62       	ori	r24, 0x20	; 32
   175b2:	90 87       	std	Z+8, r25	; 0x08
   175b4:	87 83       	std	Z+7, r24	; 0x07
        if(debuglevel & GPIB_ERR)
   175b6:	20 ff       	sbrs	r18, 0
   175b8:	eb c1       	rjmp	.+982    	; 0x17990 <Amigo_Command+0x5b4>
            printf("[AMIGO Command:GPIB read error]\n");
   175ba:	8d ec       	ldi	r24, 0xCD	; 205
   175bc:	9c e2       	ldi	r25, 0x2C	; 44
   175be:	a0 e0       	ldi	r26, 0x00	; 0
   175c0:	ed b7       	in	r30, 0x3d	; 61
   175c2:	fe b7       	in	r31, 0x3e	; 62
   175c4:	81 83       	std	Z+1, r24	; 0x01
   175c6:	92 83       	std	Z+2, r25	; 0x02
   175c8:	a3 83       	std	Z+3, r26	; 0x03
   175ca:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   175ce:	e0 c1       	rjmp	.+960    	; 0x17990 <Amigo_Command+0x5b4>
        return(status & ERROR_MASK);
    }
#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   175d0:	25 ff       	sbrs	r18, 5
   175d2:	0e c0       	rjmp	.+28     	; 0x175f0 <Amigo_Command+0x214>
        printf("[AMIGO Command(%02XH): GPIB read bytes:%02XH]\n",
   175d4:	ed b7       	in	r30, 0x3d	; 61
   175d6:	fe b7       	in	r31, 0x3e	; 62
   175d8:	17 83       	std	Z+7, r17	; 0x07
   175da:	06 83       	std	Z+6, r16	; 0x06
   175dc:	f5 82       	std	Z+5, r15	; 0x05
   175de:	e4 82       	std	Z+4, r14	; 0x04
   175e0:	8e e9       	ldi	r24, 0x9E	; 158
   175e2:	9c e2       	ldi	r25, 0x2C	; 44
   175e4:	a0 e0       	ldi	r26, 0x00	; 0
   175e6:	81 83       	std	Z+1, r24	; 0x01
   175e8:	92 83       	std	Z+2, r25	; 0x02
   175ea:	a3 83       	std	Z+3, r26	; 0x03
   175ec:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
            secondary, len);
#endif
    if(!len)
   175f0:	01 15       	cp	r16, r1
   175f2:	11 05       	cpc	r17, r1
   175f4:	61 f4       	brne	.+24     	; 0x1760e <Amigo_Command+0x232>
    {
        AMIGOs->dsj = 1;
   175f6:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   175fa:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   175fe:	81 e0       	ldi	r24, 0x01	; 1
   17600:	86 83       	std	Z+6, r24	; 0x06
        AMIGOs->Errors |= ERR_GPIB;
   17602:	87 81       	ldd	r24, Z+7	; 0x07
   17604:	90 85       	ldd	r25, Z+8	; 0x08
   17606:	80 62       	ori	r24, 0x20	; 32
   17608:	90 87       	std	Z+8, r25	; 0x08
   1760a:	87 83       	std	Z+7, r24	; 0x07
   1760c:	c1 c1       	rjmp	.+898    	; 0x17990 <Amigo_Command+0x5b4>
        return(status & ERROR_MASK);
    }

    ptr = gpib_iobuff;
    op = *ptr++;
   1760e:	60 91 f2 1c 	lds	r22, 0x1CF2	; 0x801cf2 <gpib_iobuff>

    if (secondary == 0x68)
   17612:	f8 e6       	ldi	r31, 0x68	; 104
   17614:	ef 16       	cp	r14, r31
   17616:	f1 04       	cpc	r15, r1
   17618:	09 f0       	breq	.+2      	; 0x1761c <Amigo_Command+0x240>
   1761a:	28 c1       	rjmp	.+592    	; 0x1786c <Amigo_Command+0x490>
    {
        if(op == 0x00 && len == 2)
   1761c:	61 11       	cpse	r22, r1
   1761e:	2e c0       	rjmp	.+92     	; 0x1767c <Amigo_Command+0x2a0>
   17620:	02 30       	cpi	r16, 0x02	; 2
   17622:	11 05       	cpc	r17, r1
   17624:	09 f0       	breq	.+2      	; 0x17628 <Amigo_Command+0x24c>
   17626:	b9 c1       	rjmp	.+882    	; 0x1799a <Amigo_Command+0x5be>
        {
///  Reference: A40

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17628:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1762c:	85 ff       	sbrs	r24, 5
   1762e:	0a c0       	rjmp	.+20     	; 0x17644 <Amigo_Command+0x268>
                printf("[AMIGO Cold Load Read Command]\n");
   17630:	8e e7       	ldi	r24, 0x7E	; 126
   17632:	9c e2       	ldi	r25, 0x2C	; 44
   17634:	a0 e0       	ldi	r26, 0x00	; 0
   17636:	ed b7       	in	r30, 0x3d	; 61
   17638:	fe b7       	in	r31, 0x3e	; 62
   1763a:	81 83       	std	Z+1, r24	; 0x01
   1763c:	92 83       	std	Z+2, r25	; 0x02
   1763e:	a3 83       	std	Z+3, r26	; 0x03
   17640:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
#endif
///TODO we do NOT support multiple units yet
            AMIGOs->unitNO = 0;
   17644:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   17648:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   1764c:	11 82       	std	Z+1, r1	; 0x01
            AMIGOs->dsj = 0;
   1764e:	16 82       	std	Z+6, r1	; 0x06
            AMIGOs->Errors = 0;
   17650:	10 86       	std	Z+8, r1	; 0x08
   17652:	17 82       	std	Z+7, r1	; 0x07
/// Fill in temparary address
            tmp.cyl = 0;
   17654:	1d 86       	std	Y+13, r1	; 0x0d
            tmp.head = ( (0xff & *ptr) >> 6) & 0x03;
   17656:	80 91 f3 1c 	lds	r24, 0x1CF3	; 0x801cf3 <gpib_iobuff+0x1>
   1765a:	98 2f       	mov	r25, r24
   1765c:	92 95       	swap	r25
   1765e:	96 95       	lsr	r25
   17660:	96 95       	lsr	r25
   17662:	93 70       	andi	r25, 0x03	; 3
   17664:	9e 87       	std	Y+14, r25	; 0x0e
            tmp.sector = 0x3f & *ptr;
   17666:	8f 73       	andi	r24, 0x3F	; 63
   17668:	8f 87       	std	Y+15, r24	; 0x0f
            ++ptr;
//update to real address on sucess
            amigo_seek((AMIGOStateType *) &tmp);
   1766a:	ce 01       	movw	r24, r28
   1766c:	0a 96       	adiw	r24, 0x0a	; 10
   1766e:	d1 d9       	rcall	.-3166   	; 0x16a12 <amigo_seek>
            AMIGOs->state = AMIGO_COLD_LOAD_READ;
   17670:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   17674:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   17678:	85 e0       	ldi	r24, 0x05	; 5
   1767a:	19 c1       	rjmp	.+562    	; 0x178ae <Amigo_Command+0x4d2>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x02 && len == 5)
   1767c:	62 30       	cpi	r22, 0x02	; 2
   1767e:	09 f0       	breq	.+2      	; 0x17682 <Amigo_Command+0x2a6>
   17680:	3f c0       	rjmp	.+126    	; 0x17700 <Amigo_Command+0x324>
   17682:	05 30       	cpi	r16, 0x05	; 5
   17684:	11 05       	cpc	r17, r1
   17686:	d1 f4       	brne	.+52     	; 0x176bc <Amigo_Command+0x2e0>
/// @brief
///  Seek 1 byte cylinder

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17688:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1768c:	85 ff       	sbrs	r24, 5
   1768e:	0a c0       	rjmp	.+20     	; 0x176a4 <Amigo_Command+0x2c8>
                printf("[AMIGO Seek len=5]\n");
   17690:	8a e6       	ldi	r24, 0x6A	; 106
   17692:	9c e2       	ldi	r25, 0x2C	; 44
   17694:	a0 e0       	ldi	r26, 0x00	; 0
   17696:	ed b7       	in	r30, 0x3d	; 61
   17698:	fe b7       	in	r31, 0x3e	; 62
   1769a:	81 83       	std	Z+1, r24	; 0x01
   1769c:	92 83       	std	Z+2, r25	; 0x02
   1769e:	a3 83       	std	Z+3, r26	; 0x03
   176a0:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   176a4:	80 91 f3 1c 	lds	r24, 0x1CF3	; 0x801cf3 <gpib_iobuff+0x1>
   176a8:	85 de       	rcall	.-758    	; 0x173b4 <amigo_check_unit>

/// Fill in temparary address
            tmp.cyl = 0xff & *ptr++;
   176aa:	80 91 f4 1c 	lds	r24, 0x1CF4	; 0x801cf4 <gpib_iobuff+0x2>
   176ae:	8d 87       	std	Y+13, r24	; 0x0d
            tmp.head = 0xff & *ptr++;
   176b0:	80 91 f5 1c 	lds	r24, 0x1CF5	; 0x801cf5 <gpib_iobuff+0x3>
   176b4:	8e 87       	std	Y+14, r24	; 0x0e
            tmp.sector = 0xff & *ptr++;
   176b6:	80 91 f6 1c 	lds	r24, 0x1CF6	; 0x801cf6 <gpib_iobuff+0x4>
   176ba:	1d c0       	rjmp	.+58     	; 0x176f6 <Amigo_Command+0x31a>
//update to real address on sucess
            amigo_seek((AMIGOStateType *)&tmp);
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x02 && len == 6)
   176bc:	06 30       	cpi	r16, 0x06	; 6
   176be:	11 05       	cpc	r17, r1
   176c0:	09 f0       	breq	.+2      	; 0x176c4 <Amigo_Command+0x2e8>
   176c2:	6b c1       	rjmp	.+726    	; 0x1799a <Amigo_Command+0x5be>
/// @brief
///  Seek 2 byte cylinder

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   176c4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   176c8:	85 ff       	sbrs	r24, 5
   176ca:	0a c0       	rjmp	.+20     	; 0x176e0 <Amigo_Command+0x304>
                printf("[AMIGO Seek len=6]\n");
   176cc:	86 e5       	ldi	r24, 0x56	; 86
   176ce:	9c e2       	ldi	r25, 0x2C	; 44
   176d0:	a0 e0       	ldi	r26, 0x00	; 0
   176d2:	ed b7       	in	r30, 0x3d	; 61
   176d4:	fe b7       	in	r31, 0x3e	; 62
   176d6:	81 83       	std	Z+1, r24	; 0x01
   176d8:	92 83       	std	Z+2, r25	; 0x02
   176da:	a3 83       	std	Z+3, r26	; 0x03
   176dc:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   176e0:	80 91 f3 1c 	lds	r24, 0x1CF3	; 0x801cf3 <gpib_iobuff+0x1>
   176e4:	67 de       	rcall	.-818    	; 0x173b4 <amigo_check_unit>
/// Fill in temparary address
            tmp.cyl = (0xff & *ptr++) << 8;       // MSB
            tmp.cyl |= (0xff & *ptr++);           // LSB
   176e6:	80 91 f5 1c 	lds	r24, 0x1CF5	; 0x801cf5 <gpib_iobuff+0x3>
   176ea:	8d 87       	std	Y+13, r24	; 0x0d
            tmp.head = 0xff & *ptr++;
   176ec:	80 91 f6 1c 	lds	r24, 0x1CF6	; 0x801cf6 <gpib_iobuff+0x4>
   176f0:	8e 87       	std	Y+14, r24	; 0x0e
            tmp.sector = 0xff & *ptr++;
   176f2:	80 91 f7 1c 	lds	r24, 0x1CF7	; 0x801cf7 <gpib_iobuff+0x5>
//update to real address on sucess
            amigo_seek((AMIGOStateType *)&tmp);
   176f6:	8f 87       	std	Y+15, r24	; 0x0f
   176f8:	ce 01       	movw	r24, r28
   176fa:	0a 96       	adiw	r24, 0x0a	; 10
   176fc:	8a d9       	rcall	.-3308   	; 0x16a12 <amigo_seek>
   176fe:	d8 c0       	rjmp	.+432    	; 0x178b0 <Amigo_Command+0x4d4>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x03 && len == 2)
   17700:	63 30       	cpi	r22, 0x03	; 3
   17702:	e9 f4       	brne	.+58     	; 0x1773e <Amigo_Command+0x362>
   17704:	02 30       	cpi	r16, 0x02	; 2
   17706:	11 05       	cpc	r17, r1
   17708:	09 f0       	breq	.+2      	; 0x1770c <Amigo_Command+0x330>
   1770a:	47 c1       	rjmp	.+654    	; 0x1799a <Amigo_Command+0x5be>
        {
///  Reference: A15
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1770c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17710:	85 ff       	sbrs	r24, 5
   17712:	0a c0       	rjmp	.+20     	; 0x17728 <Amigo_Command+0x34c>
                printf("[AMIGO Request Status Buffered Command]\n");
   17714:	8d e2       	ldi	r24, 0x2D	; 45
   17716:	9c e2       	ldi	r25, 0x2C	; 44
   17718:	a0 e0       	ldi	r26, 0x00	; 0
   1771a:	ed b7       	in	r30, 0x3d	; 61
   1771c:	fe b7       	in	r31, 0x3e	; 62
   1771e:	81 83       	std	Z+1, r24	; 0x01
   17720:	92 83       	std	Z+2, r25	; 0x02
   17722:	a3 83       	std	Z+3, r26	; 0x03
   17724:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17728:	80 91 f3 1c 	lds	r24, 0x1CF3	; 0x801cf3 <gpib_iobuff+0x1>
            amigo_request_status();
   1772c:	43 de       	rcall	.-890    	; 0x173b4 <amigo_check_unit>
   1772e:	3d d8       	rcall	.-3974   	; 0x167aa <amigo_request_status>
            AMIGOs->state = AMIGO_REQUEST_STATUS_BUFFERED;
   17730:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   17734:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   17738:	83 e0       	ldi	r24, 0x03	; 3
   1773a:	80 83       	st	Z, r24
   1773c:	29 c1       	rjmp	.+594    	; 0x17990 <Amigo_Command+0x5b4>
            return(status & ERROR_MASK);
        }
        else if(op == 0x05 && len == 2)
   1773e:	65 30       	cpi	r22, 0x05	; 5
   17740:	d9 f4       	brne	.+54     	; 0x17778 <Amigo_Command+0x39c>
   17742:	02 30       	cpi	r16, 0x02	; 2
   17744:	11 05       	cpc	r17, r1
   17746:	09 f0       	breq	.+2      	; 0x1774a <Amigo_Command+0x36e>
   17748:	28 c1       	rjmp	.+592    	; 0x1799a <Amigo_Command+0x5be>
        {
///  Reference: A35
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1774a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1774e:	85 ff       	sbrs	r24, 5
   17750:	0a c0       	rjmp	.+20     	; 0x17766 <Amigo_Command+0x38a>
                printf("[AMIGO Read Unbuffered Command]\n");
   17752:	8c e0       	ldi	r24, 0x0C	; 12
   17754:	9c e2       	ldi	r25, 0x2C	; 44
   17756:	a0 e0       	ldi	r26, 0x00	; 0
   17758:	ed b7       	in	r30, 0x3d	; 61
   1775a:	fe b7       	in	r31, 0x3e	; 62
   1775c:	81 83       	std	Z+1, r24	; 0x01
   1775e:	92 83       	std	Z+2, r25	; 0x02
   17760:	a3 83       	std	Z+3, r26	; 0x03
   17762:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17766:	80 91 f3 1c 	lds	r24, 0x1CF3	; 0x801cf3 <gpib_iobuff+0x1>
   1776a:	24 de       	rcall	.-952    	; 0x173b4 <amigo_check_unit>
            AMIGOs->state = AMIGO_READ_UNBUFFERED;
   1776c:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   17770:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   17774:	86 e0       	ldi	r24, 0x06	; 6
   17776:	e7 c0       	rjmp	.+462    	; 0x17946 <Amigo_Command+0x56a>
            return(status & ERROR_MASK);
#else
			return( amigo_buffered_read_command() );
#endif
        }
        else if(op == 0x07 && len == 4)
   17778:	67 30       	cpi	r22, 0x07	; 7
   1777a:	f9 f4       	brne	.+62     	; 0x177ba <Amigo_Command+0x3de>
   1777c:	04 30       	cpi	r16, 0x04	; 4
   1777e:	11 05       	cpc	r17, r1
   17780:	09 f0       	breq	.+2      	; 0x17784 <Amigo_Command+0x3a8>
   17782:	0b c1       	rjmp	.+534    	; 0x1799a <Amigo_Command+0x5be>
        {
            uint16_t sectors;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17784:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17788:	85 ff       	sbrs	r24, 5
   1778a:	0a c0       	rjmp	.+20     	; 0x177a0 <Amigo_Command+0x3c4>
                printf("[AMIGO Verify]\n");
   1778c:	8c ef       	ldi	r24, 0xFC	; 252
   1778e:	9b e2       	ldi	r25, 0x2B	; 43
   17790:	a0 e0       	ldi	r26, 0x00	; 0
   17792:	ed b7       	in	r30, 0x3d	; 61
   17794:	fe b7       	in	r31, 0x3e	; 62
   17796:	81 83       	std	Z+1, r24	; 0x01
   17798:	92 83       	std	Z+2, r25	; 0x02
   1779a:	a3 83       	std	Z+3, r26	; 0x03
   1779c:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   177a0:	80 91 f3 1c 	lds	r24, 0x1CF3	; 0x801cf3 <gpib_iobuff+0x1>
   177a4:	07 de       	rcall	.-1010   	; 0x173b4 <amigo_check_unit>
            sectors = (0xff & *ptr++) << 8;
   177a6:	80 91 f4 1c 	lds	r24, 0x1CF4	; 0x801cf4 <gpib_iobuff+0x2>
   177aa:	90 e0       	ldi	r25, 0x00	; 0
   177ac:	98 2f       	mov	r25, r24
            sectors |= (0xff & *ptr++);
            return ( amigo_verify( sectors) );
   177ae:	88 27       	eor	r24, r24
   177b0:	20 91 f5 1c 	lds	r18, 0x1CF5	; 0x801cf5 <gpib_iobuff+0x3>
   177b4:	82 2b       	or	r24, r18
   177b6:	58 d9       	rcall	.-3408   	; 0x16a68 <amigo_verify>
   177b8:	f3 c0       	rjmp	.+486    	; 0x179a0 <Amigo_Command+0x5c4>
        }
        else if(op == 0x08 && len == 2)
   177ba:	68 30       	cpi	r22, 0x08	; 8
   177bc:	d9 f4       	brne	.+54     	; 0x177f4 <Amigo_Command+0x418>
   177be:	02 30       	cpi	r16, 0x02	; 2
   177c0:	11 05       	cpc	r17, r1
   177c2:	09 f0       	breq	.+2      	; 0x177c6 <Amigo_Command+0x3ea>
   177c4:	ea c0       	rjmp	.+468    	; 0x1799a <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   177c6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   177ca:	85 ff       	sbrs	r24, 5
   177cc:	0a c0       	rjmp	.+20     	; 0x177e2 <Amigo_Command+0x406>
                printf("[AMIGO Write Unbuffered Command]\n");
   177ce:	8a ed       	ldi	r24, 0xDA	; 218
   177d0:	9b e2       	ldi	r25, 0x2B	; 43
   177d2:	a0 e0       	ldi	r26, 0x00	; 0
   177d4:	ed b7       	in	r30, 0x3d	; 61
   177d6:	fe b7       	in	r31, 0x3e	; 62
   177d8:	81 83       	std	Z+1, r24	; 0x01
   177da:	92 83       	std	Z+2, r25	; 0x02
   177dc:	a3 83       	std	Z+3, r26	; 0x03
   177de:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   177e2:	80 91 f3 1c 	lds	r24, 0x1CF3	; 0x801cf3 <gpib_iobuff+0x1>
   177e6:	e6 dd       	rcall	.-1076   	; 0x173b4 <amigo_check_unit>
            AMIGOs->state = AMIGO_WRITE_UNBUFFERED;
   177e8:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   177ec:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   177f0:	88 e0       	ldi	r24, 0x08	; 8
   177f2:	5d c0       	rjmp	.+186    	; 0x178ae <Amigo_Command+0x4d2>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if((op == 0x0B || op == 0x2b) && len == 2)
   177f4:	86 2f       	mov	r24, r22
   177f6:	8f 7d       	andi	r24, 0xDF	; 223
   177f8:	8b 30       	cpi	r24, 0x0B	; 11
   177fa:	d9 f4       	brne	.+54     	; 0x17832 <Amigo_Command+0x456>
   177fc:	02 30       	cpi	r16, 0x02	; 2
   177fe:	11 05       	cpc	r17, r1
   17800:	09 f0       	breq	.+2      	; 0x17804 <Amigo_Command+0x428>
   17802:	cb c0       	rjmp	.+406    	; 0x1799a <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17804:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17808:	85 ff       	sbrs	r24, 5
   1780a:	0a c0       	rjmp	.+20     	; 0x17820 <Amigo_Command+0x444>
                printf("[AMIGO Initialize Command]\n");
   1780c:	8e eb       	ldi	r24, 0xBE	; 190
   1780e:	9b e2       	ldi	r25, 0x2B	; 43
   17810:	a0 e0       	ldi	r26, 0x00	; 0
   17812:	ed b7       	in	r30, 0x3d	; 61
   17814:	fe b7       	in	r31, 0x3e	; 62
   17816:	81 83       	std	Z+1, r24	; 0x01
   17818:	92 83       	std	Z+2, r25	; 0x02
   1781a:	a3 83       	std	Z+3, r26	; 0x03
   1781c:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17820:	80 91 f3 1c 	lds	r24, 0x1CF3	; 0x801cf3 <gpib_iobuff+0x1>
   17824:	c7 dd       	rcall	.-1138   	; 0x173b4 <amigo_check_unit>
            AMIGOs->state = AMIGO_INITIALIZE;
   17826:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   1782a:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   1782e:	8a e0       	ldi	r24, 0x0A	; 10
   17830:	3e c0       	rjmp	.+124    	; 0x178ae <Amigo_Command+0x4d2>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x14 && len == 2)
   17832:	64 31       	cpi	r22, 0x14	; 20
   17834:	09 f0       	breq	.+2      	; 0x17838 <Amigo_Command+0x45c>
   17836:	b1 c0       	rjmp	.+354    	; 0x1799a <Amigo_Command+0x5be>
   17838:	02 30       	cpi	r16, 0x02	; 2
   1783a:	11 05       	cpc	r17, r1
   1783c:	09 f0       	breq	.+2      	; 0x17840 <Amigo_Command+0x464>
   1783e:	ad c0       	rjmp	.+346    	; 0x1799a <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17840:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17844:	85 ff       	sbrs	r24, 5
   17846:	0a c0       	rjmp	.+20     	; 0x1785c <Amigo_Command+0x480>
                printf("[AMIGO Request Logical Address Command]\n");
   17848:	85 e9       	ldi	r24, 0x95	; 149
   1784a:	9b e2       	ldi	r25, 0x2B	; 43
   1784c:	a0 e0       	ldi	r26, 0x00	; 0
   1784e:	ed b7       	in	r30, 0x3d	; 61
   17850:	fe b7       	in	r31, 0x3e	; 62
   17852:	81 83       	std	Z+1, r24	; 0x01
   17854:	92 83       	std	Z+2, r25	; 0x02
   17856:	a3 83       	std	Z+3, r26	; 0x03
   17858:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
#endif
            amigo_request_logical_address();
   1785c:	0e 94 c7 b3 	call	0x1678e	; 0x1678e <amigo_request_logical_address>
            AMIGOs->state = AMIGO_REQUEST_LOGICAL_ADDRESS;
   17860:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   17864:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   17868:	84 e0       	ldi	r24, 0x04	; 4
   1786a:	21 c0       	rjmp	.+66     	; 0x178ae <Amigo_Command+0x4d2>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x69)
   1786c:	f9 e6       	ldi	r31, 0x69	; 105
   1786e:	ef 16       	cp	r14, r31
   17870:	f1 04       	cpc	r15, r1
   17872:	39 f5       	brne	.+78     	; 0x178c2 <Amigo_Command+0x4e6>
    {
        if(op == 0x08 && len == 2)
   17874:	68 30       	cpi	r22, 0x08	; 8
   17876:	09 f0       	breq	.+2      	; 0x1787a <Amigo_Command+0x49e>
   17878:	90 c0       	rjmp	.+288    	; 0x1799a <Amigo_Command+0x5be>
   1787a:	02 30       	cpi	r16, 0x02	; 2
   1787c:	11 05       	cpc	r17, r1
   1787e:	09 f0       	breq	.+2      	; 0x17882 <Amigo_Command+0x4a6>
   17880:	8c c0       	rjmp	.+280    	; 0x1799a <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17882:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17886:	85 ff       	sbrs	r24, 5
   17888:	0a c0       	rjmp	.+20     	; 0x1789e <Amigo_Command+0x4c2>
                printf("[AMIGO Write Buffered Command]\n");
   1788a:	85 e7       	ldi	r24, 0x75	; 117
   1788c:	9b e2       	ldi	r25, 0x2B	; 43
   1788e:	a0 e0       	ldi	r26, 0x00	; 0
   17890:	ed b7       	in	r30, 0x3d	; 61
   17892:	fe b7       	in	r31, 0x3e	; 62
   17894:	81 83       	std	Z+1, r24	; 0x01
   17896:	92 83       	std	Z+2, r25	; 0x02
   17898:	a3 83       	std	Z+3, r26	; 0x03
   1789a:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   1789e:	80 91 f3 1c 	lds	r24, 0x1CF3	; 0x801cf3 <gpib_iobuff+0x1>
   178a2:	88 dd       	rcall	.-1264   	; 0x173b4 <amigo_check_unit>
            AMIGOs->state = AMIGO_WRITE_BUFFERED;
   178a4:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   178a8:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   178ac:	89 e0       	ldi	r24, 0x09	; 9
   178ae:	80 83       	st	Z, r24
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
   178b0:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   178b4:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   178b8:	81 81       	ldd	r24, Z+1	; 0x01
   178ba:	90 e0       	ldi	r25, 0x00	; 0
   178bc:	0e 94 74 86 	call	0x10ce8	; 0x10ce8 <gpib_enable_PPR>
   178c0:	67 c0       	rjmp	.+206    	; 0x17990 <Amigo_Command+0x5b4>
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x6A)
   178c2:	fa e6       	ldi	r31, 0x6A	; 106
   178c4:	ef 16       	cp	r14, r31
   178c6:	f1 04       	cpc	r15, r1
   178c8:	09 f0       	breq	.+2      	; 0x178cc <Amigo_Command+0x4f0>
   178ca:	40 c0       	rjmp	.+128    	; 0x1794c <Amigo_Command+0x570>
    {
        if(op == 0x08 && len == 2)
   178cc:	68 30       	cpi	r22, 0x08	; 8
   178ce:	f1 f4       	brne	.+60     	; 0x1790c <Amigo_Command+0x530>
   178d0:	02 30       	cpi	r16, 0x02	; 2
   178d2:	11 05       	cpc	r17, r1
   178d4:	09 f0       	breq	.+2      	; 0x178d8 <Amigo_Command+0x4fc>
   178d6:	61 c0       	rjmp	.+194    	; 0x1799a <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   178d8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   178dc:	85 ff       	sbrs	r24, 5
   178de:	0a c0       	rjmp	.+20     	; 0x178f4 <Amigo_Command+0x518>
                printf("[AMIGO Request Status Unbuffered Command]\n");
   178e0:	8a e4       	ldi	r24, 0x4A	; 74
   178e2:	9b e2       	ldi	r25, 0x2B	; 43
   178e4:	a0 e0       	ldi	r26, 0x00	; 0
   178e6:	ed b7       	in	r30, 0x3d	; 61
   178e8:	fe b7       	in	r31, 0x3e	; 62
   178ea:	81 83       	std	Z+1, r24	; 0x01
   178ec:	92 83       	std	Z+2, r25	; 0x02
   178ee:	a3 83       	std	Z+3, r26	; 0x03
   178f0:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   178f4:	80 91 f3 1c 	lds	r24, 0x1CF3	; 0x801cf3 <gpib_iobuff+0x1>
   178f8:	5d dd       	rcall	.-1350   	; 0x173b4 <amigo_check_unit>
            AMIGOs->state = AMIGO_REQUEST_STATUS_UNBUFFERED;
   178fa:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   178fe:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   17902:	82 e0       	ldi	r24, 0x02	; 2
   17904:	80 83       	st	Z, r24
            amigo_request_status();
   17906:	0e 94 d5 b3 	call	0x167aa	; 0x167aa <amigo_request_status>
   1790a:	42 c0       	rjmp	.+132    	; 0x17990 <Amigo_Command+0x5b4>
            return(status & ERROR_MASK);
        }
        if(op == 0x05 && len == 2)
   1790c:	65 30       	cpi	r22, 0x05	; 5
   1790e:	09 f0       	breq	.+2      	; 0x17912 <Amigo_Command+0x536>
   17910:	44 c0       	rjmp	.+136    	; 0x1799a <Amigo_Command+0x5be>
   17912:	02 30       	cpi	r16, 0x02	; 2
   17914:	11 05       	cpc	r17, r1
   17916:	09 f0       	breq	.+2      	; 0x1791a <Amigo_Command+0x53e>
   17918:	40 c0       	rjmp	.+128    	; 0x1799a <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1791a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1791e:	85 ff       	sbrs	r24, 5
   17920:	0a c0       	rjmp	.+20     	; 0x17936 <Amigo_Command+0x55a>
                printf("[AMIGO Read Buffered Command]\n");
   17922:	8b e2       	ldi	r24, 0x2B	; 43
   17924:	9b e2       	ldi	r25, 0x2B	; 43
   17926:	a0 e0       	ldi	r26, 0x00	; 0
   17928:	ed b7       	in	r30, 0x3d	; 61
   1792a:	fe b7       	in	r31, 0x3e	; 62
   1792c:	81 83       	std	Z+1, r24	; 0x01
   1792e:	92 83       	std	Z+2, r25	; 0x02
   17930:	a3 83       	std	Z+3, r26	; 0x03
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17932:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   17936:	80 91 f3 1c 	lds	r24, 0x1CF3	; 0x801cf3 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_READ_BUFFERED;
   1793a:	3c dd       	rcall	.-1416   	; 0x173b4 <amigo_check_unit>
   1793c:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   17940:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   17944:	87 e0       	ldi	r24, 0x07	; 7

#if 0
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
#else
			return( amigo_buffered_read_command() );
   17946:	80 83       	st	Z, r24
   17948:	c5 d9       	rcall	.-3190   	; 0x16cd4 <amigo_buffered_read_command>
   1794a:	2a c0       	rjmp	.+84     	; 0x179a0 <Amigo_Command+0x5c4>
#endif
        }
    }
    else if (secondary == 0x6C)
   1794c:	fc e6       	ldi	r31, 0x6C	; 108
   1794e:	ef 16       	cp	r14, r31
   17950:	f1 04       	cpc	r15, r1
   17952:	d1 f4       	brne	.+52     	; 0x17988 <Amigo_Command+0x5ac>
    {
        if(op == 0x18 && len == 5)
   17954:	68 31       	cpi	r22, 0x18	; 24
   17956:	09 f5       	brne	.+66     	; 0x1799a <Amigo_Command+0x5be>
   17958:	05 30       	cpi	r16, 0x05	; 5
   1795a:	11 05       	cpc	r17, r1
   1795c:	f1 f4       	brne	.+60     	; 0x1799a <Amigo_Command+0x5be>
        {
///  Reference: A48 ..  A50

            uint8_t db;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1795e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17962:	85 ff       	sbrs	r24, 5
   17964:	0a c0       	rjmp	.+20     	; 0x1797a <Amigo_Command+0x59e>
                printf("[AMIGO Format]\n");
   17966:	8b e1       	ldi	r24, 0x1B	; 27
   17968:	9b e2       	ldi	r25, 0x2B	; 43
   1796a:	a0 e0       	ldi	r26, 0x00	; 0
   1796c:	ed b7       	in	r30, 0x3d	; 61
   1796e:	fe b7       	in	r31, 0x3e	; 62
   17970:	81 83       	std	Z+1, r24	; 0x01
   17972:	92 83       	std	Z+2, r25	; 0x02
   17974:	a3 83       	std	Z+3, r26	; 0x03
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17976:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   1797a:	80 91 f3 1c 	lds	r24, 0x1CF3	; 0x801cf3 <gpib_iobuff+0x1>
            ++ptr;                                // override not used
            ++ptr;                                // interleave not used
            db = 0xff & *ptr++;
            amigo_format(db);
   1797e:	1a dd       	rcall	.-1484   	; 0x173b4 <amigo_check_unit>
   17980:	80 91 f6 1c 	lds	r24, 0x1CF6	; 0x801cf6 <gpib_iobuff+0x4>
   17984:	0f d9       	rcall	.-3554   	; 0x16ba4 <amigo_format>
   17986:	04 c0       	rjmp	.+8      	; 0x17990 <Amigo_Command+0x5b4>
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x70)                   // HP-300 Clear
   17988:	f0 e7       	ldi	r31, 0x70	; 112
   1798a:	ef 16       	cp	r14, r31
   1798c:	f1 04       	cpc	r15, r1
    {
///  Reference: A23
        ++ptr;                                    // Dummy byte
        return(status & ERROR_MASK);
   1798e:	29 f4       	brne	.+10     	; 0x1799a <Amigo_Command+0x5be>
   17990:	8b 8d       	ldd	r24, Y+27	; 0x1b
   17992:	9c 8d       	ldd	r25, Y+28	; 0x1c
   17994:	88 27       	eor	r24, r24
   17996:	90 7d       	andi	r25, 0xD0	; 208
    }
    return ( amigo_todo_op(secondary, op, len) );
   17998:	03 c0       	rjmp	.+6      	; 0x179a0 <Amigo_Command+0x5c4>
   1799a:	a8 01       	movw	r20, r16
   1799c:	8e 2d       	mov	r24, r14
   1799e:	ed db       	rcall	.-2086   	; 0x1717a <amigo_todo_op>
}
   179a0:	6c 96       	adiw	r28, 0x1c	; 28
   179a2:	e6 e0       	ldi	r30, 0x06	; 6
   179a4:	0c 94 27 e7 	jmp	0x1ce4e	; 0x1ce4e <__epilogue_restores__+0x18>

000179a8 <Amigo_Execute>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list)

int Amigo_Execute( int secondary )
{
   179a8:	a9 e0       	ldi	r26, 0x09	; 9
   179aa:	b0 e0       	ldi	r27, 0x00	; 0
   179ac:	ea ed       	ldi	r30, 0xDA	; 218
   179ae:	fc eb       	ldi	r31, 0xBC	; 188
   179b0:	0c 94 0f e7 	jmp	0x1ce1e	; 0x1ce1e <__prologue_saves__+0x20>
   179b4:	ec 01       	movw	r28, r24
#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   179b6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   179ba:	85 ff       	sbrs	r24, 5
   179bc:	16 c0       	rjmp	.+44     	; 0x179ea <Amigo_Execute+0x42>
        printf("[AMIGO Execute(%02XH): listen:%02XH, talk:%02XH]\n",
   179be:	80 91 f6 1e 	lds	r24, 0x1EF6	; 0x801ef6 <talking>
   179c2:	90 e0       	ldi	r25, 0x00	; 0
   179c4:	ed b7       	in	r30, 0x3d	; 61
   179c6:	fe b7       	in	r31, 0x3e	; 62
   179c8:	91 87       	std	Z+9, r25	; 0x09
   179ca:	80 87       	std	Z+8, r24	; 0x08
   179cc:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   179d0:	90 e0       	ldi	r25, 0x00	; 0
   179d2:	97 83       	std	Z+7, r25	; 0x07
   179d4:	86 83       	std	Z+6, r24	; 0x06
   179d6:	d5 83       	std	Z+5, r29	; 0x05
   179d8:	c4 83       	std	Z+4, r28	; 0x04
   179da:	89 ee       	ldi	r24, 0xE9	; 233
   179dc:	9a e2       	ldi	r25, 0x2A	; 42
   179de:	a0 e0       	ldi	r26, 0x00	; 0
   179e0:	81 83       	std	Z+1, r24	; 0x01
   179e2:	92 83       	std	Z+2, r25	; 0x02
   179e4:	a3 83       	std	Z+3, r26	; 0x03
   179e6:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
            secondary, listening, talking);
#endif

    if(talking == UNT)
   179ea:	80 91 f6 1e 	lds	r24, 0x1EF6	; 0x801ef6 <talking>
   179ee:	8f 35       	cpi	r24, 0x5F	; 95
   179f0:	09 f4       	brne	.+2      	; 0x179f4 <Amigo_Execute+0x4c>
   179f2:	ad c0       	rjmp	.+346    	; 0x17b4e <Amigo_Execute+0x1a6>
        return(0);

    if(!AMIGO_is_MTA(talking) && !AMIGO_is_MLA(listening))
   179f4:	90 e0       	ldi	r25, 0x00	; 0
   179f6:	0e 94 ec 8c 	call	0x119d8	; 0x119d8 <AMIGO_is_MTA>
   179fa:	89 2b       	or	r24, r25
   179fc:	39 f0       	breq	.+14     	; 0x17a0c <Amigo_Execute+0x64>
        return(0);

    if(secondary != 0x60 && secondary != 0x68)
   179fe:	ce 01       	movw	r24, r28
   17a00:	87 7f       	andi	r24, 0xF7	; 247
   17a02:	80 36       	cpi	r24, 0x60	; 96
   17a04:	91 05       	cpc	r25, r1
   17a06:	09 f0       	breq	.+2      	; 0x17a0a <Amigo_Execute+0x62>
   17a08:	a2 c0       	rjmp	.+324    	; 0x17b4e <Amigo_Execute+0x1a6>
   17a0a:	08 c0       	rjmp	.+16     	; 0x17a1c <Amigo_Execute+0x74>
#endif

    if(talking == UNT)
        return(0);

    if(!AMIGO_is_MTA(talking) && !AMIGO_is_MLA(listening))
   17a0c:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   17a10:	90 e0       	ldi	r25, 0x00	; 0
   17a12:	0e 94 da 8c 	call	0x119b4	; 0x119b4 <AMIGO_is_MLA>
   17a16:	89 2b       	or	r24, r25
   17a18:	91 f7       	brne	.-28     	; 0x179fe <Amigo_Execute+0x56>
   17a1a:	99 c0       	rjmp	.+306    	; 0x17b4e <Amigo_Execute+0x1a6>
        return(0);

    if(secondary != 0x60 && secondary != 0x68)
        return(0);

    gpib_disable_PPR(AMIGOp->HEADER.PPR);
   17a1c:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   17a20:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   17a24:	81 81       	ldd	r24, Z+1	; 0x01
   17a26:	90 e0       	ldi	r25, 0x00	; 0
   17a28:	0e 94 aa 86 	call	0x10d54	; 0x10d54 <gpib_disable_PPR>

    if(secondary == 0x60)
   17a2c:	c0 36       	cpi	r28, 0x60	; 96
   17a2e:	d1 05       	cpc	r29, r1
   17a30:	09 f0       	breq	.+2      	; 0x17a34 <Amigo_Execute+0x8c>
   17a32:	4e c0       	rjmp	.+156    	; 0x17ad0 <Amigo_Execute+0x128>
    {
        switch(AMIGOs->state)
   17a34:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   17a38:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   17a3c:	e0 81       	ld	r30, Z
   17a3e:	8e 2f       	mov	r24, r30
   17a40:	90 e0       	ldi	r25, 0x00	; 0
   17a42:	8b 30       	cpi	r24, 0x0B	; 11
   17a44:	91 05       	cpc	r25, r1
   17a46:	08 f0       	brcs	.+2      	; 0x17a4a <Amigo_Execute+0xa2>
   17a48:	41 c0       	rjmp	.+130    	; 0x17acc <Amigo_Execute+0x124>
   17a4a:	fc 01       	movw	r30, r24
   17a4c:	ea 52       	subi	r30, 0x2A	; 42
   17a4e:	ff 4f       	sbci	r31, 0xFF	; 255
   17a50:	0c 94 d0 e6 	jmp	0x1cda0	; 0x1cda0 <__tablejump2__>
        {
            case AMIGO_IDLE:
                return(0);
            case AMIGO_COLD_LOAD_READ:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17a54:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17a58:	85 ff       	sbrs	r24, 5
   17a5a:	18 c0       	rjmp	.+48     	; 0x17a8c <Amigo_Execute+0xe4>
                    printf("[AMIGO Execute Cold Load Read]\n");
   17a5c:	89 ec       	ldi	r24, 0xC9	; 201
   17a5e:	9a e2       	ldi	r25, 0x2A	; 42
   17a60:	0d c0       	rjmp	.+26     	; 0x17a7c <Amigo_Execute+0xd4>
#endif
                return ( amigo_buffered_read_execute() );
            case AMIGO_READ_UNBUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17a62:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17a66:	85 ff       	sbrs	r24, 5
   17a68:	11 c0       	rjmp	.+34     	; 0x17a8c <Amigo_Execute+0xe4>
                    printf("[AMIGO Execute Read Unbuffered]\n");
   17a6a:	88 ea       	ldi	r24, 0xA8	; 168
   17a6c:	9a e2       	ldi	r25, 0x2A	; 42
   17a6e:	06 c0       	rjmp	.+12     	; 0x17a7c <Amigo_Execute+0xd4>
#endif
                return ( amigo_buffered_read_execute() );
            case AMIGO_READ_BUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17a70:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17a74:	85 ff       	sbrs	r24, 5
   17a76:	0a c0       	rjmp	.+20     	; 0x17a8c <Amigo_Execute+0xe4>
                    printf("[AMIGO Execute Read Buffered]\n");
   17a78:	89 e8       	ldi	r24, 0x89	; 137
   17a7a:	9a e2       	ldi	r25, 0x2A	; 42
   17a7c:	a0 e0       	ldi	r26, 0x00	; 0
   17a7e:	ed b7       	in	r30, 0x3d	; 61
   17a80:	fe b7       	in	r31, 0x3e	; 62
   17a82:	81 83       	std	Z+1, r24	; 0x01
   17a84:	92 83       	std	Z+2, r25	; 0x02
   17a86:	a3 83       	std	Z+3, r26	; 0x03
   17a88:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
#endif
                return ( amigo_buffered_read_execute() );
   17a8c:	b0 d9       	rcall	.-3232   	; 0x16dee <amigo_buffered_read_execute>
   17a8e:	61 c0       	rjmp	.+194    	; 0x17b52 <Amigo_Execute+0x1aa>
            case AMIGO_WRITE_UNBUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17a90:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17a94:	85 ff       	sbrs	r24, 5
   17a96:	18 c0       	rjmp	.+48     	; 0x17ac8 <Amigo_Execute+0x120>
                    printf("[AMIGO Execute Write Unbuffered]\n");
   17a98:	87 e6       	ldi	r24, 0x67	; 103
   17a9a:	9a e2       	ldi	r25, 0x2A	; 42
   17a9c:	0d c0       	rjmp	.+26     	; 0x17ab8 <Amigo_Execute+0x110>
#endif
                return ( amigo_buffered_write() );
            case AMIGO_INITIALIZE:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17a9e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17aa2:	85 ff       	sbrs	r24, 5
   17aa4:	11 c0       	rjmp	.+34     	; 0x17ac8 <Amigo_Execute+0x120>
                    printf("[AMIGO Execute Initialize]\n");
   17aa6:	8b e4       	ldi	r24, 0x4B	; 75
   17aa8:	9a e2       	ldi	r25, 0x2A	; 42
   17aaa:	06 c0       	rjmp	.+12     	; 0x17ab8 <Amigo_Execute+0x110>
#endif
                return ( amigo_buffered_write() );
            case AMIGO_WRITE_BUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17aac:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17ab0:	85 ff       	sbrs	r24, 5
   17ab2:	0a c0       	rjmp	.+20     	; 0x17ac8 <Amigo_Execute+0x120>
                    printf("[AMIGO Execute Write Buffered]\n");
   17ab4:	8b e2       	ldi	r24, 0x2B	; 43
   17ab6:	9a e2       	ldi	r25, 0x2A	; 42
   17ab8:	a0 e0       	ldi	r26, 0x00	; 0
   17aba:	ed b7       	in	r30, 0x3d	; 61
   17abc:	fe b7       	in	r31, 0x3e	; 62
   17abe:	81 83       	std	Z+1, r24	; 0x01
   17ac0:	92 83       	std	Z+2, r25	; 0x02
   17ac2:	a3 83       	std	Z+3, r26	; 0x03
   17ac4:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
#endif
                return ( amigo_buffered_write() );
   17ac8:	ed d9       	rcall	.-3110   	; 0x16ea4 <amigo_buffered_write>
   17aca:	43 c0       	rjmp	.+134    	; 0x17b52 <Amigo_Execute+0x1aa>
            default:
                return ( amigo_todo(secondary) );
   17acc:	80 e6       	ldi	r24, 0x60	; 96
   17ace:	3d c0       	rjmp	.+122    	; 0x17b4a <Amigo_Execute+0x1a2>
        }
        AMIGOs->state = AMIGO_IDLE;
    }
    if(secondary == 0x68)
   17ad0:	c8 36       	cpi	r28, 0x68	; 104
   17ad2:	d1 05       	cpc	r29, r1
   17ad4:	e1 f5       	brne	.+120    	; 0x17b4e <Amigo_Execute+0x1a6>
    {
        switch(AMIGOs->state)
   17ad6:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   17ada:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   17ade:	80 81       	ld	r24, Z
   17ae0:	82 30       	cpi	r24, 0x02	; 2
   17ae2:	81 f0       	breq	.+32     	; 0x17b04 <Amigo_Execute+0x15c>
   17ae4:	18 f4       	brcc	.+6      	; 0x17aec <Amigo_Execute+0x144>
   17ae6:	88 23       	and	r24, r24
   17ae8:	91 f1       	breq	.+100    	; 0x17b4e <Amigo_Execute+0x1a6>
   17aea:	2e c0       	rjmp	.+92     	; 0x17b48 <Amigo_Execute+0x1a0>
   17aec:	83 30       	cpi	r24, 0x03	; 3
   17aee:	19 f0       	breq	.+6      	; 0x17af6 <Amigo_Execute+0x14e>
   17af0:	84 30       	cpi	r24, 0x04	; 4
   17af2:	c9 f0       	breq	.+50     	; 0x17b26 <Amigo_Execute+0x17e>
   17af4:	29 c0       	rjmp	.+82     	; 0x17b48 <Amigo_Execute+0x1a0>
        {
            case AMIGO_IDLE:
                return(0);
            case AMIGO_REQUEST_STATUS_BUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17af6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17afa:	85 ff       	sbrs	r24, 5
   17afc:	11 c0       	rjmp	.+34     	; 0x17b20 <Amigo_Execute+0x178>
                    printf("[AMIGO Execute Request Status Buffered]\n");
   17afe:	82 e0       	ldi	r24, 0x02	; 2
   17b00:	9a e2       	ldi	r25, 0x2A	; 42
   17b02:	06 c0       	rjmp	.+12     	; 0x17b10 <Amigo_Execute+0x168>
#endif
                return ( amigo_send_status() );
            case AMIGO_REQUEST_STATUS_UNBUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17b04:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17b08:	85 ff       	sbrs	r24, 5
   17b0a:	0a c0       	rjmp	.+20     	; 0x17b20 <Amigo_Execute+0x178>
                    printf("[AMIGO Exicute Request Status Unbuffered]\n");
   17b0c:	87 ed       	ldi	r24, 0xD7	; 215
   17b0e:	99 e2       	ldi	r25, 0x29	; 41
   17b10:	a0 e0       	ldi	r26, 0x00	; 0
   17b12:	ed b7       	in	r30, 0x3d	; 61
   17b14:	fe b7       	in	r31, 0x3e	; 62
   17b16:	81 83       	std	Z+1, r24	; 0x01
   17b18:	92 83       	std	Z+2, r25	; 0x02
   17b1a:	a3 83       	std	Z+3, r26	; 0x03
   17b1c:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
#endif
                return ( amigo_send_status() );
   17b20:	0e 94 87 b4 	call	0x1690e	; 0x1690e <amigo_send_status>
   17b24:	16 c0       	rjmp	.+44     	; 0x17b52 <Amigo_Execute+0x1aa>
            case AMIGO_REQUEST_LOGICAL_ADDRESS:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17b26:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17b2a:	85 ff       	sbrs	r24, 5
   17b2c:	0a c0       	rjmp	.+20     	; 0x17b42 <Amigo_Execute+0x19a>
                    printf("[AMIGO Execute Request Logical Address]\n");
   17b2e:	8e ea       	ldi	r24, 0xAE	; 174
   17b30:	99 e2       	ldi	r25, 0x29	; 41
   17b32:	a0 e0       	ldi	r26, 0x00	; 0
   17b34:	ed b7       	in	r30, 0x3d	; 61
   17b36:	fe b7       	in	r31, 0x3e	; 62
   17b38:	81 83       	std	Z+1, r24	; 0x01
   17b3a:	92 83       	std	Z+2, r25	; 0x02
   17b3c:	a3 83       	std	Z+3, r26	; 0x03
   17b3e:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
#endif
                return ( amigo_send_logical_address() );
   17b42:	0e 94 32 b4 	call	0x16864	; 0x16864 <amigo_send_logical_address>
   17b46:	05 c0       	rjmp	.+10     	; 0x17b52 <Amigo_Execute+0x1aa>
            default:
                return ( amigo_todo(secondary) );
   17b48:	88 e6       	ldi	r24, 0x68	; 104
   17b4a:	b0 db       	rcall	.-2208   	; 0x172ac <amigo_todo>
   17b4c:	02 c0       	rjmp	.+4      	; 0x17b52 <Amigo_Execute+0x1aa>
    if(secondary == 0x68)
    {
        switch(AMIGOs->state)
        {
            case AMIGO_IDLE:
                return(0);
   17b4e:	80 e0       	ldi	r24, 0x00	; 0
   17b50:	90 e0       	ldi	r25, 0x00	; 0
                return ( amigo_todo(secondary) );
        }
        AMIGOs->state = AMIGO_IDLE;
    }
    return(0);
}
   17b52:	cd b7       	in	r28, 0x3d	; 61
   17b54:	de b7       	in	r29, 0x3e	; 62
   17b56:	29 96       	adiw	r28, 0x09	; 9
   17b58:	e2 e0       	ldi	r30, 0x02	; 2
   17b5a:	0c 94 2b e7 	jmp	0x1ce56	; 0x1ce56 <__epilogue_restores__+0x20>

00017b5e <AMIGO_COMMANDS>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list.

int AMIGO_COMMANDS(uint8_t ch)
{
   17b5e:	cf 93       	push	r28
   17b60:	df 93       	push	r29
   17b62:	c8 2f       	mov	r28, r24

    if(AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening))
   17b64:	80 91 f6 1e 	lds	r24, 0x1EF6	; 0x801ef6 <talking>
   17b68:	90 e0       	ldi	r25, 0x00	; 0
   17b6a:	0e 94 ec 8c 	call	0x119d8	; 0x119d8 <AMIGO_is_MTA>
   17b6e:	89 2b       	or	r24, r25
   17b70:	51 f0       	breq	.+20     	; 0x17b86 <AMIGO_COMMANDS+0x28>
    {

        if(talking == UNT && AMIGO_is_MLA(listening))
   17b72:	80 91 f6 1e 	lds	r24, 0x1EF6	; 0x801ef6 <talking>
   17b76:	8f 35       	cpi	r24, 0x5F	; 95
   17b78:	71 f4       	brne	.+28     	; 0x17b96 <AMIGO_COMMANDS+0x38>
   17b7a:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   17b7e:	90 e0       	ldi	r25, 0x00	; 0
   17b80:	0e 94 da 8c 	call	0x119b4	; 0x119b4 <AMIGO_is_MLA>
   17b84:	08 c0       	rjmp	.+16     	; 0x17b96 <AMIGO_COMMANDS+0x38>
/// @see  gpib.h ERROR_MASK defines for a full list.

int AMIGO_COMMANDS(uint8_t ch)
{

    if(AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening))
   17b86:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   17b8a:	90 e0       	ldi	r25, 0x00	; 0
   17b8c:	0e 94 da 8c 	call	0x119b4	; 0x119b4 <AMIGO_is_MLA>
   17b90:	89 2b       	or	r24, r25
   17b92:	79 f7       	brne	.-34     	; 0x17b72 <AMIGO_COMMANDS+0x14>
   17b94:	76 c0       	rjmp	.+236    	; 0x17c82 <AMIGO_COMMANDS+0x124>

        if(talking == UNT && AMIGO_is_MLA(listening))
        {
// printf("AMIGO COMMANDS %02XH NO TALK ADDRESS!\n", ch);
        }
        if(listening == 0 && AMIGO_is_MTA(talking))
   17b96:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   17b9a:	81 11       	cpse	r24, r1
   17b9c:	05 c0       	rjmp	.+10     	; 0x17ba8 <AMIGO_COMMANDS+0x4a>
   17b9e:	80 91 f6 1e 	lds	r24, 0x1EF6	; 0x801ef6 <talking>
   17ba2:	90 e0       	ldi	r25, 0x00	; 0
   17ba4:	0e 94 ec 8c 	call	0x119d8	; 0x119d8 <AMIGO_is_MTA>
        {
// printf("AMIGO COMMANDS %02XH NO LISTEN ADDRESS!\n", ch);
        }

        if(ch == 0x60 && (AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening)) )
   17ba8:	c0 36       	cpi	r28, 0x60	; 96
   17baa:	99 f4       	brne	.+38     	; 0x17bd2 <AMIGO_COMMANDS+0x74>
   17bac:	80 91 f6 1e 	lds	r24, 0x1EF6	; 0x801ef6 <talking>
   17bb0:	90 e0       	ldi	r25, 0x00	; 0
   17bb2:	0e 94 ec 8c 	call	0x119d8	; 0x119d8 <AMIGO_is_MTA>
   17bb6:	89 2b       	or	r24, r25
   17bb8:	19 f0       	breq	.+6      	; 0x17bc0 <AMIGO_COMMANDS+0x62>
        {
            return (Amigo_Execute(ch) );
   17bba:	80 e6       	ldi	r24, 0x60	; 96
   17bbc:	90 e0       	ldi	r25, 0x00	; 0
   17bbe:	14 c0       	rjmp	.+40     	; 0x17be8 <AMIGO_COMMANDS+0x8a>
        if(listening == 0 && AMIGO_is_MTA(talking))
        {
// printf("AMIGO COMMANDS %02XH NO LISTEN ADDRESS!\n", ch);
        }

        if(ch == 0x60 && (AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening)) )
   17bc0:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   17bc4:	90 e0       	ldi	r25, 0x00	; 0
   17bc6:	0e 94 da 8c 	call	0x119b4	; 0x119b4 <AMIGO_is_MLA>
   17bca:	89 2b       	or	r24, r25
   17bcc:	09 f4       	brne	.+2      	; 0x17bd0 <AMIGO_COMMANDS+0x72>
   17bce:	59 c0       	rjmp	.+178    	; 0x17c82 <AMIGO_COMMANDS+0x124>
   17bd0:	f4 cf       	rjmp	.-24     	; 0x17bba <AMIGO_COMMANDS+0x5c>
        {
            return (Amigo_Execute(ch) );
        }

        if(ch == 0x68 && AMIGO_is_MTA(talking) )
   17bd2:	c8 36       	cpi	r28, 0x68	; 104
   17bd4:	c1 f4       	brne	.+48     	; 0x17c06 <AMIGO_COMMANDS+0xa8>
   17bd6:	80 91 f6 1e 	lds	r24, 0x1EF6	; 0x801ef6 <talking>
   17bda:	90 e0       	ldi	r25, 0x00	; 0
   17bdc:	0e 94 ec 8c 	call	0x119d8	; 0x119d8 <AMIGO_is_MTA>
   17be0:	89 2b       	or	r24, r25
   17be2:	21 f0       	breq	.+8      	; 0x17bec <AMIGO_COMMANDS+0x8e>
        {
            return (Amigo_Execute(ch) );
   17be4:	88 e6       	ldi	r24, 0x68	; 104
   17be6:	90 e0       	ldi	r25, 0x00	; 0
   17be8:	df de       	rcall	.-578    	; 0x179a8 <Amigo_Execute>
   17bea:	0b c0       	rjmp	.+22     	; 0x17c02 <AMIGO_COMMANDS+0xa4>
        }

        if(ch == 0x68 && AMIGO_is_MLA(listening) )// Single byte command
   17bec:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   17bf0:	90 e0       	ldi	r25, 0x00	; 0
   17bf2:	0e 94 da 8c 	call	0x119b4	; 0x119b4 <AMIGO_is_MLA>
   17bf6:	89 2b       	or	r24, r25
   17bf8:	09 f4       	brne	.+2      	; 0x17bfc <AMIGO_COMMANDS+0x9e>
   17bfa:	43 c0       	rjmp	.+134    	; 0x17c82 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17bfc:	88 e6       	ldi	r24, 0x68	; 104
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x6c && AMIGO_is_MLA(listening) )// Single byte command
        {
            return (Amigo_Command(ch) );
   17bfe:	90 e0       	ldi	r25, 0x00	; 0
   17c00:	ed db       	rcall	.-2086   	; 0x173dc <Amigo_Command>
        }
        if(ch == 0x70 && AMIGO_is_MTA(talking))
        {
            gpib_disable_PPR(AMIGOp->HEADER.PPR);
            return( amigo_cmd_dsj() );
   17c02:	ec 01       	movw	r28, r24
   17c04:	40 c0       	rjmp	.+128    	; 0x17c86 <AMIGO_COMMANDS+0x128>

        if(ch == 0x68 && AMIGO_is_MLA(listening) )// Single byte command
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x69 && AMIGO_is_MLA(listening) )// Single byte command
   17c06:	c9 36       	cpi	r28, 0x69	; 105
   17c08:	51 f4       	brne	.+20     	; 0x17c1e <AMIGO_COMMANDS+0xc0>
   17c0a:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   17c0e:	90 e0       	ldi	r25, 0x00	; 0
   17c10:	0e 94 da 8c 	call	0x119b4	; 0x119b4 <AMIGO_is_MLA>
   17c14:	89 2b       	or	r24, r25
   17c16:	a9 f1       	breq	.+106    	; 0x17c82 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17c18:	89 e6       	ldi	r24, 0x69	; 105
   17c1a:	90 e0       	ldi	r25, 0x00	; 0
   17c1c:	f1 cf       	rjmp	.-30     	; 0x17c00 <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x6a && AMIGO_is_MLA(listening) )// Single byte command
   17c1e:	ca 36       	cpi	r28, 0x6A	; 106
   17c20:	51 f4       	brne	.+20     	; 0x17c36 <AMIGO_COMMANDS+0xd8>
   17c22:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   17c26:	90 e0       	ldi	r25, 0x00	; 0
   17c28:	0e 94 da 8c 	call	0x119b4	; 0x119b4 <AMIGO_is_MLA>
   17c2c:	89 2b       	or	r24, r25
   17c2e:	49 f1       	breq	.+82     	; 0x17c82 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17c30:	8a e6       	ldi	r24, 0x6A	; 106
   17c32:	90 e0       	ldi	r25, 0x00	; 0
   17c34:	e5 cf       	rjmp	.-54     	; 0x17c00 <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x6c && AMIGO_is_MLA(listening) )// Single byte command
   17c36:	cc 36       	cpi	r28, 0x6C	; 108
   17c38:	51 f4       	brne	.+20     	; 0x17c4e <AMIGO_COMMANDS+0xf0>
   17c3a:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   17c3e:	90 e0       	ldi	r25, 0x00	; 0
   17c40:	0e 94 da 8c 	call	0x119b4	; 0x119b4 <AMIGO_is_MLA>
   17c44:	89 2b       	or	r24, r25
   17c46:	e9 f0       	breq	.+58     	; 0x17c82 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17c48:	8c e6       	ldi	r24, 0x6C	; 108
   17c4a:	90 e0       	ldi	r25, 0x00	; 0
   17c4c:	d9 cf       	rjmp	.-78     	; 0x17c00 <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x70 && AMIGO_is_MTA(talking))
   17c4e:	c0 37       	cpi	r28, 0x70	; 112
   17c50:	c1 f4       	brne	.+48     	; 0x17c82 <AMIGO_COMMANDS+0x124>
   17c52:	80 91 f6 1e 	lds	r24, 0x1EF6	; 0x801ef6 <talking>
   17c56:	90 e0       	ldi	r25, 0x00	; 0
   17c58:	0e 94 ec 8c 	call	0x119d8	; 0x119d8 <AMIGO_is_MTA>
   17c5c:	ec 01       	movw	r28, r24
   17c5e:	89 2b       	or	r24, r25
   17c60:	51 f0       	breq	.+20     	; 0x17c76 <AMIGO_COMMANDS+0x118>
        {
            gpib_disable_PPR(AMIGOp->HEADER.PPR);
   17c62:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   17c66:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   17c6a:	81 81       	ldd	r24, Z+1	; 0x01
   17c6c:	90 e0       	ldi	r25, 0x00	; 0
   17c6e:	0e 94 aa 86 	call	0x10d54	; 0x10d54 <gpib_disable_PPR>
            return( amigo_cmd_dsj() );
   17c72:	ff d9       	rcall	.-3074   	; 0x17072 <amigo_cmd_dsj>
   17c74:	c6 cf       	rjmp	.-116    	; 0x17c02 <AMIGO_COMMANDS+0xa4>
        }
        if(ch == 0x7e && ch == 0x7f)
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x70 && AMIGO_is_MLA(listening))
   17c76:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   17c7a:	90 e0       	ldi	r25, 0x00	; 0
   17c7c:	0e 94 da 8c 	call	0x119b4	; 0x119b4 <AMIGO_is_MLA>
   17c80:	02 c0       	rjmp	.+4      	; 0x17c86 <AMIGO_COMMANDS+0x128>
        {
// NOP
        }
    }
    return(0);
   17c82:	c0 e0       	ldi	r28, 0x00	; 0
   17c84:	d0 e0       	ldi	r29, 0x00	; 0
}
   17c86:	ce 01       	movw	r24, r28
   17c88:	df 91       	pop	r29
   17c8a:	cf 91       	pop	r28
   17c8c:	08 95       	ret

00017c8e <printer_init>:
/// - Only called once after power on by main().
/// @return  void

void printer_init()
{
    plot.error = 0;
   17c8e:	e5 ea       	ldi	r30, 0xA5	; 165
   17c90:	f9 e1       	ldi	r31, 0x19	; 25
   17c92:	10 86       	std	Z+8, r1	; 0x08
    plot.count = 0;
   17c94:	10 82       	st	Z, r1
   17c96:	11 82       	std	Z+1, r1	; 0x01
   17c98:	12 82       	std	Z+2, r1	; 0x02
   17c9a:	13 82       	std	Z+3, r1	; 0x03
    plot.ind = 0;
   17c9c:	15 82       	std	Z+5, r1	; 0x05
   17c9e:	14 82       	std	Z+4, r1	; 0x04
    plot.fp = NULL;
   17ca0:	12 86       	std	Z+10, r1	; 0x0a
   17ca2:	11 86       	std	Z+9, r1	; 0x09
    plot.buf = NULL;
   17ca4:	14 86       	std	Z+12, r1	; 0x0c
   17ca6:	13 86       	std	Z+11, r1	; 0x0b
   17ca8:	08 95       	ret

00017caa <receive_plot_flush>:
/// @see posix.h
/// @see printer_buffer()
/// @return  file handle

int receive_plot_flush()
{
   17caa:	cf 93       	push	r28
   17cac:	df 93       	push	r29
   17cae:	ad b7       	in	r26, 0x3d	; 61
   17cb0:	be b7       	in	r27, 0x3e	; 62
   17cb2:	17 97       	sbiw	r26, 0x07	; 7
   17cb4:	0f b6       	in	r0, 0x3f	; 63
   17cb6:	f8 94       	cli
   17cb8:	be bf       	out	0x3e, r27	; 62
   17cba:	0f be       	out	0x3f, r0	; 63
   17cbc:	ad bf       	out	0x3d, r26	; 61
    int ret;
    int fno;

    if(plot.fp == NULL || plot.ind == 0)
   17cbe:	20 91 ae 19 	lds	r18, 0x19AE	; 0x8019ae <plot+0x9>
   17cc2:	30 91 af 19 	lds	r19, 0x19AF	; 0x8019af <plot+0xa>
   17cc6:	21 15       	cp	r18, r1
   17cc8:	31 05       	cpc	r19, r1
   17cca:	09 f4       	brne	.+2      	; 0x17cce <receive_plot_flush+0x24>
   17ccc:	45 c0       	rjmp	.+138    	; 0x17d58 <receive_plot_flush+0xae>
   17cce:	80 91 a9 19 	lds	r24, 0x19A9	; 0x8019a9 <plot+0x4>
   17cd2:	90 91 aa 19 	lds	r25, 0x19AA	; 0x8019aa <plot+0x5>
   17cd6:	00 97       	sbiw	r24, 0x00	; 0
   17cd8:	09 f4       	brne	.+2      	; 0x17cdc <receive_plot_flush+0x32>
   17cda:	40 c0       	rjmp	.+128    	; 0x17d5c <receive_plot_flush+0xb2>
        return(0);

    ret  = fwrite(plot.buf, 1, plot.ind , plot.fp);
   17cdc:	ac 01       	movw	r20, r24
   17cde:	61 e0       	ldi	r22, 0x01	; 1
   17ce0:	70 e0       	ldi	r23, 0x00	; 0
   17ce2:	80 91 b0 19 	lds	r24, 0x19B0	; 0x8019b0 <plot+0xb>
   17ce6:	90 91 b1 19 	lds	r25, 0x19B1	; 0x8019b1 <plot+0xc>
   17cea:	0e 94 9a 7c 	call	0xf934	; 0xf934 <fwrite>
   17cee:	ec 01       	movw	r28, r24
    if(ret != plot.ind)
   17cf0:	80 91 a9 19 	lds	r24, 0x19A9	; 0x8019a9 <plot+0x4>
   17cf4:	90 91 aa 19 	lds	r25, 0x19AA	; 0x8019aa <plot+0x5>
   17cf8:	c8 17       	cp	r28, r24
   17cfa:	d9 07       	cpc	r29, r25
   17cfc:	09 f1       	breq	.+66     	; 0x17d40 <receive_plot_flush+0x96>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   17cfe:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17d02:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   17d06:	81 72       	andi	r24, 0x21	; 33
   17d08:	99 27       	eor	r25, r25
   17d0a:	89 2b       	or	r24, r25
   17d0c:	b1 f0       	breq	.+44     	; 0x17d3a <receive_plot_flush+0x90>
        {
            perror("receive_plot_flush");
   17d0e:	8c ed       	ldi	r24, 0xDC	; 220
   17d10:	95 e1       	ldi	r25, 0x15	; 21
   17d12:	0e 94 a3 78 	call	0xf146	; 0xf146 <perror>
            printf("write failed: wanted %d, got:%d\n", plot.ind, ret);
   17d16:	ed b7       	in	r30, 0x3d	; 61
   17d18:	fe b7       	in	r31, 0x3e	; 62
   17d1a:	d7 83       	std	Z+7, r29	; 0x07
   17d1c:	c6 83       	std	Z+6, r28	; 0x06
   17d1e:	80 91 a9 19 	lds	r24, 0x19A9	; 0x8019a9 <plot+0x4>
   17d22:	90 91 aa 19 	lds	r25, 0x19AA	; 0x8019aa <plot+0x5>
   17d26:	95 83       	std	Z+5, r25	; 0x05
   17d28:	84 83       	std	Z+4, r24	; 0x04
   17d2a:	8e e3       	ldi	r24, 0x3E	; 62
   17d2c:	92 e3       	ldi	r25, 0x32	; 50
   17d2e:	a0 e0       	ldi	r26, 0x00	; 0
   17d30:	81 83       	std	Z+1, r24	; 0x01
   17d32:	92 83       	std	Z+2, r25	; 0x02
   17d34:	a3 83       	std	Z+3, r26	; 0x03
   17d36:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
        }
        return(-1);
   17d3a:	8f ef       	ldi	r24, 0xFF	; 255
   17d3c:	9f ef       	ldi	r25, 0xFF	; 255
   17d3e:	0e c0       	rjmp	.+28     	; 0x17d5c <receive_plot_flush+0xb2>
    }

    fno = fileno( plot.fp );
   17d40:	80 91 ae 19 	lds	r24, 0x19AE	; 0x8019ae <plot+0x9>
   17d44:	90 91 af 19 	lds	r25, 0x19AF	; 0x8019af <plot+0xa>
   17d48:	0e 94 ed 76 	call	0xedda	; 0xedda <fileno>
    if(fno < 0)
   17d4c:	97 fd       	sbrc	r25, 7
   17d4e:	f5 cf       	rjmp	.-22     	; 0x17d3a <receive_plot_flush+0x90>
        return(-1);
///@brief sync filesystem after every write
    syncfs( fno );
   17d50:	0e 94 e4 7b 	call	0xf7c8	; 0xf7c8 <syncfs>
    return (ret);
   17d54:	ce 01       	movw	r24, r28
   17d56:	02 c0       	rjmp	.+4      	; 0x17d5c <receive_plot_flush+0xb2>
{
    int ret;
    int fno;

    if(plot.fp == NULL || plot.ind == 0)
        return(0);
   17d58:	80 e0       	ldi	r24, 0x00	; 0
   17d5a:	90 e0       	ldi	r25, 0x00	; 0
    if(fno < 0)
        return(-1);
///@brief sync filesystem after every write
    syncfs( fno );
    return (ret);
}
   17d5c:	cd b7       	in	r28, 0x3d	; 61
   17d5e:	de b7       	in	r29, 0x3e	; 62
   17d60:	27 96       	adiw	r28, 0x07	; 7
   17d62:	e2 e0       	ldi	r30, 0x02	; 2
   17d64:	0c 94 2b e7 	jmp	0x1ce56	; 0x1ce56 <__epilogue_restores__+0x20>

00017d68 <printer_close>:
/// @see posix.h
/// @return  void
/// FYI: for the HP54645D plots end with: pd;pu;pu;sp0;
/// This gets called
void printer_close()
{
   17d68:	ad b7       	in	r26, 0x3d	; 61
   17d6a:	be b7       	in	r27, 0x3e	; 62
   17d6c:	17 97       	sbiw	r26, 0x07	; 7
   17d6e:	0f b6       	in	r0, 0x3f	; 63
   17d70:	f8 94       	cli
   17d72:	be bf       	out	0x3e, r27	; 62
   17d74:	0f be       	out	0x3f, r0	; 63
   17d76:	ad bf       	out	0x3d, r26	; 61
    if( receive_plot_flush() < 0 )
   17d78:	98 df       	rcall	.-208    	; 0x17caa <receive_plot_flush>
   17d7a:	97 ff       	sbrs	r25, 7
   17d7c:	03 c0       	rjmp	.+6      	; 0x17d84 <printer_close+0x1c>
        plot.error = 1;
   17d7e:	81 e0       	ldi	r24, 0x01	; 1
   17d80:	80 93 ad 19 	sts	0x19AD, r24	; 0x8019ad <plot+0x8>

    if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   17d84:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17d88:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   17d8c:	81 72       	andi	r24, 0x21	; 33
   17d8e:	99 27       	eor	r25, r25
   17d90:	89 2b       	or	r24, r25
   17d92:	71 f0       	breq	.+28     	; 0x17db0 <printer_close+0x48>
    {
        if(plot.error)
   17d94:	80 91 ad 19 	lds	r24, 0x19AD	; 0x8019ad <plot+0x8>
   17d98:	88 23       	and	r24, r24
   17d9a:	51 f0       	breq	.+20     	; 0x17db0 <printer_close+0x48>
            printf("ERROR durring write\n");
   17d9c:	8d e6       	ldi	r24, 0x6D	; 109
   17d9e:	92 e3       	ldi	r25, 0x32	; 50
   17da0:	a0 e0       	ldi	r26, 0x00	; 0
   17da2:	ed b7       	in	r30, 0x3d	; 61
   17da4:	fe b7       	in	r31, 0x3e	; 62
   17da6:	81 83       	std	Z+1, r24	; 0x01
   17da8:	92 83       	std	Z+2, r25	; 0x02
   17daa:	a3 83       	std	Z+3, r26	; 0x03
   17dac:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    }

    if(plot.fp)
   17db0:	80 91 ae 19 	lds	r24, 0x19AE	; 0x8019ae <plot+0x9>
   17db4:	90 91 af 19 	lds	r25, 0x19AF	; 0x8019af <plot+0xa>
   17db8:	00 97       	sbiw	r24, 0x00	; 0
   17dba:	e1 f0       	breq	.+56     	; 0x17df4 <printer_close+0x8c>
    {
        fclose(plot.fp);
   17dbc:	0e 94 1c 7d 	call	0xfa38	; 0xfa38 <fclose>
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17dc0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17dc4:	85 ff       	sbrs	r24, 5
   17dc6:	16 c0       	rjmp	.+44     	; 0x17df4 <printer_close+0x8c>
            printf("\nDONE: %08ld\n",plot.count);
   17dc8:	80 91 a5 19 	lds	r24, 0x19A5	; 0x8019a5 <plot>
   17dcc:	90 91 a6 19 	lds	r25, 0x19A6	; 0x8019a6 <plot+0x1>
   17dd0:	a0 91 a7 19 	lds	r26, 0x19A7	; 0x8019a7 <plot+0x2>
   17dd4:	b0 91 a8 19 	lds	r27, 0x19A8	; 0x8019a8 <plot+0x3>
   17dd8:	ed b7       	in	r30, 0x3d	; 61
   17dda:	fe b7       	in	r31, 0x3e	; 62
   17ddc:	84 83       	std	Z+4, r24	; 0x04
   17dde:	95 83       	std	Z+5, r25	; 0x05
   17de0:	a6 83       	std	Z+6, r26	; 0x06
   17de2:	b7 83       	std	Z+7, r27	; 0x07
   17de4:	8f e5       	ldi	r24, 0x5F	; 95
   17de6:	92 e3       	ldi	r25, 0x32	; 50
   17de8:	a0 e0       	ldi	r26, 0x00	; 0
   17dea:	81 83       	std	Z+1, r24	; 0x01
   17dec:	92 83       	std	Z+2, r25	; 0x02
   17dee:	a3 83       	std	Z+3, r26	; 0x03
   17df0:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    }

    if(plot.buf)
   17df4:	80 91 b0 19 	lds	r24, 0x19B0	; 0x8019b0 <plot+0xb>
   17df8:	90 91 b1 19 	lds	r25, 0x19B1	; 0x8019b1 <plot+0xc>
   17dfc:	00 97       	sbiw	r24, 0x00	; 0
   17dfe:	11 f0       	breq	.+4      	; 0x17e04 <printer_close+0x9c>
        safefree(plot.buf);
   17e00:	0e 94 28 28 	call	0x5050	; 0x5050 <safefree>
    printer_init();
   17e04:	44 df       	rcall	.-376    	; 0x17c8e <printer_init>
}
   17e06:	ad b7       	in	r26, 0x3d	; 61
   17e08:	be b7       	in	r27, 0x3e	; 62
   17e0a:	17 96       	adiw	r26, 0x07	; 7
   17e0c:	0f b6       	in	r0, 0x3f	; 63
   17e0e:	f8 94       	cli
   17e10:	be bf       	out	0x3e, r27	; 62
   17e12:	0f be       	out	0x3f, r0	; 63
   17e14:	ad bf       	out	0x3d, r26	; 61
   17e16:	08 95       	ret

00017e18 <printer_open>:
/// @see posix.c
/// @see posix.h
/// @return  void

void printer_open(char *name)
{
   17e18:	ad e5       	ldi	r26, 0x5D	; 93
   17e1a:	b0 e0       	ldi	r27, 0x00	; 0
   17e1c:	e2 e1       	ldi	r30, 0x12	; 18
   17e1e:	ff eb       	ldi	r31, 0xBF	; 191
   17e20:	0c 94 0b e7 	jmp	0x1ce16	; 0x1ce16 <__prologue_saves__+0x18>
   17e24:	8c 01       	movw	r16, r24

    char *ptr;

    if(!name)
   17e26:	89 2b       	or	r24, r25
   17e28:	09 f0       	breq	.+2      	; 0x17e2c <printer_open+0x14>
   17e2a:	4f c0       	rjmp	.+158    	; 0x17eca <printer_open+0xb2>
        time_t seconds;
        tm_t *tc;
        ts_t ts;
        char fname[64];

        clock_gettime(0, (ts_t *) &ts);
   17e2c:	be 01       	movw	r22, r28
   17e2e:	6e 5a       	subi	r22, 0xAE	; 174
   17e30:	7f 4f       	sbci	r23, 0xFF	; 255
   17e32:	80 e0       	ldi	r24, 0x00	; 0
   17e34:	90 e0       	ldi	r25, 0x00	; 0
   17e36:	0e 94 ee 33 	call	0x67dc	; 0x67dc <clock_gettime>
        seconds = ts.tv_sec;
   17e3a:	66 96       	adiw	r28, 0x16	; 22
   17e3c:	8c ad       	ldd	r24, Y+60	; 0x3c
   17e3e:	9d ad       	ldd	r25, Y+61	; 0x3d
   17e40:	ae ad       	ldd	r26, Y+62	; 0x3e
   17e42:	bf ad       	ldd	r27, Y+63	; 0x3f
   17e44:	66 97       	sbiw	r28, 0x16	; 22
   17e46:	6e 96       	adiw	r28, 0x1e	; 30
   17e48:	8c af       	std	Y+60, r24	; 0x3c
   17e4a:	9d af       	std	Y+61, r25	; 0x3d
   17e4c:	ae af       	std	Y+62, r26	; 0x3e
   17e4e:	bf af       	std	Y+63, r27	; 0x3f
   17e50:	6e 97       	sbiw	r28, 0x1e	; 30
        tc = gmtime(&seconds);
   17e52:	ce 01       	movw	r24, r28
   17e54:	86 5a       	subi	r24, 0xA6	; 166
   17e56:	9f 4f       	sbci	r25, 0xFF	; 255
   17e58:	0e 94 d8 37 	call	0x6fb0	; 0x6fb0 <gmtime>
   17e5c:	8c 01       	movw	r16, r24
        sprintf(fname,"/plot-%02d%s%04d-%02d%02d%02d.plt",
   17e5e:	fc 01       	movw	r30, r24
   17e60:	e6 80       	ldd	r14, Z+6	; 0x06
   17e62:	f7 80       	ldd	r15, Z+7	; 0x07
   17e64:	80 85       	ldd	r24, Z+8	; 0x08
   17e66:	91 85       	ldd	r25, Z+9	; 0x09
   17e68:	0e 94 b4 36 	call	0x6d68	; 0x6d68 <tm_mon_to_ascii>
   17e6c:	f8 01       	movw	r30, r16
   17e6e:	20 81       	ld	r18, Z
   17e70:	31 81       	ldd	r19, Z+1	; 0x01
   17e72:	ed b7       	in	r30, 0x3d	; 61
   17e74:	fe b7       	in	r31, 0x3e	; 62
   17e76:	31 8b       	std	Z+17, r19	; 0x11
   17e78:	20 8b       	std	Z+16, r18	; 0x10
   17e7a:	f8 01       	movw	r30, r16
   17e7c:	22 81       	ldd	r18, Z+2	; 0x02
   17e7e:	33 81       	ldd	r19, Z+3	; 0x03
   17e80:	ed b7       	in	r30, 0x3d	; 61
   17e82:	fe b7       	in	r31, 0x3e	; 62
   17e84:	37 87       	std	Z+15, r19	; 0x0f
   17e86:	26 87       	std	Z+14, r18	; 0x0e
   17e88:	f8 01       	movw	r30, r16
   17e8a:	24 81       	ldd	r18, Z+4	; 0x04
   17e8c:	35 81       	ldd	r19, Z+5	; 0x05
   17e8e:	ed b7       	in	r30, 0x3d	; 61
   17e90:	fe b7       	in	r31, 0x3e	; 62
   17e92:	35 87       	std	Z+13, r19	; 0x0d
   17e94:	24 87       	std	Z+12, r18	; 0x0c
   17e96:	f8 01       	movw	r30, r16
   17e98:	22 85       	ldd	r18, Z+10	; 0x0a
   17e9a:	33 85       	ldd	r19, Z+11	; 0x0b
   17e9c:	24 59       	subi	r18, 0x94	; 148
   17e9e:	38 4f       	sbci	r19, 0xF8	; 248
   17ea0:	ed b7       	in	r30, 0x3d	; 61
   17ea2:	fe b7       	in	r31, 0x3e	; 62
   17ea4:	33 87       	std	Z+11, r19	; 0x0b
   17ea6:	22 87       	std	Z+10, r18	; 0x0a
   17ea8:	91 87       	std	Z+9, r25	; 0x09
   17eaa:	80 87       	std	Z+8, r24	; 0x08
   17eac:	f7 82       	std	Z+7, r15	; 0x07
   17eae:	e6 82       	std	Z+6, r14	; 0x06
   17eb0:	84 ea       	ldi	r24, 0xA4	; 164
   17eb2:	92 e3       	ldi	r25, 0x32	; 50
   17eb4:	a0 e0       	ldi	r26, 0x00	; 0
   17eb6:	83 83       	std	Z+3, r24	; 0x03
   17eb8:	94 83       	std	Z+4, r25	; 0x04
   17eba:	a5 83       	std	Z+5, r26	; 0x05
   17ebc:	8e 01       	movw	r16, r28
   17ebe:	0e 5e       	subi	r16, 0xEE	; 238
   17ec0:	1f 4f       	sbci	r17, 0xFF	; 255
   17ec2:	12 83       	std	Z+2, r17	; 0x02
   17ec4:	01 83       	std	Z+1, r16	; 0x01
   17ec6:	0e 94 1c 47 	call	0x8e38	; 0x8e38 <sprintf_P>
    else
    {
        ptr = name;
    }

    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17eca:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17ece:	85 ff       	sbrs	r24, 5
   17ed0:	0c c0       	rjmp	.+24     	; 0x17eea <printer_open+0xd2>
        printf("Capturing plot to:%s\n", ptr);
   17ed2:	ed b7       	in	r30, 0x3d	; 61
   17ed4:	fe b7       	in	r31, 0x3e	; 62
   17ed6:	15 83       	std	Z+5, r17	; 0x05
   17ed8:	04 83       	std	Z+4, r16	; 0x04
   17eda:	8e e8       	ldi	r24, 0x8E	; 142
   17edc:	92 e3       	ldi	r25, 0x32	; 50
   17ede:	a0 e0       	ldi	r26, 0x00	; 0
   17ee0:	81 83       	std	Z+1, r24	; 0x01
   17ee2:	92 83       	std	Z+2, r25	; 0x02
   17ee4:	a3 83       	std	Z+3, r26	; 0x03
   17ee6:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>

    plot.fp = fopen(ptr,"wb");
   17eea:	6c e0       	ldi	r22, 0x0C	; 12
   17eec:	79 e0       	ldi	r23, 0x09	; 9
   17eee:	c8 01       	movw	r24, r16
   17ef0:	0e 94 72 7e 	call	0xfce4	; 0xfce4 <fopen>
   17ef4:	90 93 af 19 	sts	0x19AF, r25	; 0x8019af <plot+0xa>
   17ef8:	80 93 ae 19 	sts	0x19AE, r24	; 0x8019ae <plot+0x9>
    if(plot.fp == NULL)
   17efc:	89 2b       	or	r24, r25
   17efe:	b9 f4       	brne	.+46     	; 0x17f2e <printer_open+0x116>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   17f00:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17f04:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   17f08:	81 72       	andi	r24, 0x21	; 33
   17f0a:	99 27       	eor	r25, r25
   17f0c:	89 2b       	or	r24, r25
   17f0e:	11 f1       	breq	.+68     	; 0x17f54 <printer_open+0x13c>
        {
            perror("open failed");
   17f10:	8a e9       	ldi	r24, 0x9A	; 154
   17f12:	9d e0       	ldi	r25, 0x0D	; 13
   17f14:	0e 94 a3 78 	call	0xf146	; 0xf146 <perror>
            printf("exiting...\n");
   17f18:	82 e8       	ldi	r24, 0x82	; 130
   17f1a:	92 e3       	ldi	r25, 0x32	; 50
   17f1c:	a0 e0       	ldi	r26, 0x00	; 0
   17f1e:	ed b7       	in	r30, 0x3d	; 61
   17f20:	fe b7       	in	r31, 0x3e	; 62
   17f22:	81 83       	std	Z+1, r24	; 0x01
   17f24:	92 83       	std	Z+2, r25	; 0x02
   17f26:	a3 83       	std	Z+3, r26	; 0x03
   17f28:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   17f2c:	13 c0       	rjmp	.+38     	; 0x17f54 <printer_open+0x13c>
        }
        return;
    }

    plot.buf = calloc(512+1,1);
   17f2e:	61 e0       	ldi	r22, 0x01	; 1
   17f30:	70 e0       	ldi	r23, 0x00	; 0
   17f32:	81 e0       	ldi	r24, 0x01	; 1
   17f34:	92 e0       	ldi	r25, 0x02	; 2
   17f36:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <safecalloc>
   17f3a:	90 93 b1 19 	sts	0x19B1, r25	; 0x8019b1 <plot+0xc>
   17f3e:	80 93 b0 19 	sts	0x19B0, r24	; 0x8019b0 <plot+0xb>
    if(plot.buf == NULL)
   17f42:	89 2b       	or	r24, r25
   17f44:	09 f4       	brne	.+2      	; 0x17f48 <printer_open+0x130>
        printer_close();
   17f46:	10 df       	rcall	.-480    	; 0x17d68 <printer_close>
    plot.size = 512;
   17f48:	80 e0       	ldi	r24, 0x00	; 0
   17f4a:	92 e0       	ldi	r25, 0x02	; 2
   17f4c:	90 93 ac 19 	sts	0x19AC, r25	; 0x8019ac <plot+0x7>
   17f50:	80 93 ab 19 	sts	0x19AB, r24	; 0x8019ab <plot+0x6>
}
   17f54:	c3 5a       	subi	r28, 0xA3	; 163
   17f56:	df 4f       	sbci	r29, 0xFF	; 255
   17f58:	e6 e0       	ldi	r30, 0x06	; 6
   17f5a:	0c 94 27 e7 	jmp	0x1ce4e	; 0x1ce4e <__epilogue_restores__+0x18>

00017f5e <printer_buffer>:
///
/// @see posix.c
/// @see posix.h
/// @return  void
void printer_buffer( uint16_t val )
{
   17f5e:	cf 93       	push	r28
   17f60:	df 93       	push	r29
   17f62:	ad b7       	in	r26, 0x3d	; 61
   17f64:	be b7       	in	r27, 0x3e	; 62
   17f66:	17 97       	sbiw	r26, 0x07	; 7
   17f68:	0f b6       	in	r0, 0x3f	; 63
   17f6a:	f8 94       	cli
   17f6c:	be bf       	out	0x3e, r27	; 62
   17f6e:	0f be       	out	0x3f, r0	; 63
   17f70:	ad bf       	out	0x3d, r26	; 61
   17f72:	ec 01       	movw	r28, r24

    uint16_t ch;

    if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   17f74:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17f78:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   17f7c:	81 72       	andi	r24, 0x21	; 33
   17f7e:	99 27       	eor	r25, r25
   17f80:	89 2b       	or	r24, r25
   17f82:	c1 f0       	breq	.+48     	; 0x17fb4 <printer_buffer+0x56>
    {
        if( ( plot.count & 255L ) == 0)
   17f84:	80 91 a5 19 	lds	r24, 0x19A5	; 0x8019a5 <plot>
   17f88:	30 91 a6 19 	lds	r19, 0x19A6	; 0x8019a6 <plot+0x1>
   17f8c:	20 91 a7 19 	lds	r18, 0x19A7	; 0x8019a7 <plot+0x2>
   17f90:	90 91 a8 19 	lds	r25, 0x19A8	; 0x8019a8 <plot+0x3>
   17f94:	81 11       	cpse	r24, r1
   17f96:	0e c0       	rjmp	.+28     	; 0x17fb4 <printer_buffer+0x56>
            printf("%08ld\r",plot.count);
   17f98:	ed b7       	in	r30, 0x3d	; 61
   17f9a:	fe b7       	in	r31, 0x3e	; 62
   17f9c:	84 83       	std	Z+4, r24	; 0x04
   17f9e:	35 83       	std	Z+5, r19	; 0x05
   17fa0:	26 83       	std	Z+6, r18	; 0x06
   17fa2:	97 83       	std	Z+7, r25	; 0x07
   17fa4:	87 e3       	ldi	r24, 0x37	; 55
   17fa6:	92 e3       	ldi	r25, 0x32	; 50
   17fa8:	a0 e0       	ldi	r26, 0x00	; 0
   17faa:	81 83       	std	Z+1, r24	; 0x01
   17fac:	92 83       	std	Z+2, r25	; 0x02
   17fae:	a3 83       	std	Z+3, r26	; 0x03
   17fb0:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    }

    ch = val & 0xff;
    if(val & (0xff00 & ~REN_FLAG))
   17fb4:	ce 01       	movw	r24, r28
   17fb6:	88 27       	eor	r24, r24
   17fb8:	97 7f       	andi	r25, 0xF7	; 247
   17fba:	89 2b       	or	r24, r25
   17fbc:	41 f0       	breq	.+16     	; 0x17fce <printer_buffer+0x70>
    {
        if( receive_plot_flush() )
   17fbe:	75 de       	rcall	.-790    	; 0x17caa <receive_plot_flush>
   17fc0:	89 2b       	or	r24, r25
   17fc2:	09 f4       	brne	.+2      	; 0x17fc6 <printer_buffer+0x68>
   17fc4:	3f c0       	rjmp	.+126    	; 0x18044 <printer_buffer+0xe6>
            plot.error = 1;
   17fc6:	81 e0       	ldi	r24, 0x01	; 1
   17fc8:	80 93 ad 19 	sts	0x19AD, r24	; 0x8019ad <plot+0x8>
   17fcc:	3b c0       	rjmp	.+118    	; 0x18044 <printer_buffer+0xe6>
//plot.count += strlen(ptr);
    }
    else
    {
        ch  = val & 0xff;
        plot.buf[plot.ind++] = ch;
   17fce:	20 91 b0 19 	lds	r18, 0x19B0	; 0x8019b0 <plot+0xb>
   17fd2:	30 91 b1 19 	lds	r19, 0x19B1	; 0x8019b1 <plot+0xc>
   17fd6:	80 91 a9 19 	lds	r24, 0x19A9	; 0x8019a9 <plot+0x4>
   17fda:	90 91 aa 19 	lds	r25, 0x19AA	; 0x8019aa <plot+0x5>
   17fde:	ac 01       	movw	r20, r24
   17fe0:	4f 5f       	subi	r20, 0xFF	; 255
   17fe2:	5f 4f       	sbci	r21, 0xFF	; 255
   17fe4:	50 93 aa 19 	sts	0x19AA, r21	; 0x8019aa <plot+0x5>
   17fe8:	40 93 a9 19 	sts	0x19A9, r20	; 0x8019a9 <plot+0x4>
   17fec:	f9 01       	movw	r30, r18
   17fee:	e8 0f       	add	r30, r24
   17ff0:	f9 1f       	adc	r31, r25
   17ff2:	c0 83       	st	Z, r28
        plot.count++;
   17ff4:	80 91 a5 19 	lds	r24, 0x19A5	; 0x8019a5 <plot>
   17ff8:	90 91 a6 19 	lds	r25, 0x19A6	; 0x8019a6 <plot+0x1>
   17ffc:	a0 91 a7 19 	lds	r26, 0x19A7	; 0x8019a7 <plot+0x2>
   18000:	b0 91 a8 19 	lds	r27, 0x19A8	; 0x8019a8 <plot+0x3>
   18004:	01 96       	adiw	r24, 0x01	; 1
   18006:	a1 1d       	adc	r26, r1
   18008:	b1 1d       	adc	r27, r1
   1800a:	80 93 a5 19 	sts	0x19A5, r24	; 0x8019a5 <plot>
   1800e:	90 93 a6 19 	sts	0x19A6, r25	; 0x8019a6 <plot+0x1>
   18012:	a0 93 a7 19 	sts	0x19A7, r26	; 0x8019a7 <plot+0x2>
   18016:	b0 93 a8 19 	sts	0x19A8, r27	; 0x8019a8 <plot+0x3>

        if(plot.ind >= plot.size)
   1801a:	20 91 a9 19 	lds	r18, 0x19A9	; 0x8019a9 <plot+0x4>
   1801e:	30 91 aa 19 	lds	r19, 0x19AA	; 0x8019aa <plot+0x5>
   18022:	80 91 ab 19 	lds	r24, 0x19AB	; 0x8019ab <plot+0x6>
   18026:	90 91 ac 19 	lds	r25, 0x19AC	; 0x8019ac <plot+0x7>
   1802a:	28 17       	cp	r18, r24
   1802c:	39 07       	cpc	r19, r25
        {
            if( receive_plot_flush() < 0 )
   1802e:	54 f0       	brlt	.+20     	; 0x18044 <printer_buffer+0xe6>
   18030:	3c de       	rcall	.-904    	; 0x17caa <receive_plot_flush>
   18032:	97 ff       	sbrs	r25, 7
   18034:	03 c0       	rjmp	.+6      	; 0x1803c <printer_buffer+0xde>
                plot.error = 1;
   18036:	81 e0       	ldi	r24, 0x01	; 1
   18038:	80 93 ad 19 	sts	0x19AD, r24	; 0x8019ad <plot+0x8>
            plot.ind  = 0;
   1803c:	10 92 aa 19 	sts	0x19AA, r1	; 0x8019aa <plot+0x5>
   18040:	10 92 a9 19 	sts	0x19A9, r1	; 0x8019a9 <plot+0x4>
        }
    }
}
   18044:	cd b7       	in	r28, 0x3d	; 61
   18046:	de b7       	in	r29, 0x3e	; 62
   18048:	27 96       	adiw	r28, 0x07	; 7
   1804a:	e2 e0       	ldi	r30, 0x02	; 2
   1804c:	0c 94 2b e7 	jmp	0x1ce56	; 0x1ce56 <__epilogue_restores__+0x20>

00018050 <PRINTER_COMMANDS>:
///
/// @todo  Fully emulated plotter response.
/// @return  0

int PRINTER_COMMANDS(uint8_t ch)
{
   18050:	cf 93       	push	r28
   18052:	00 d0       	rcall	.+0      	; 0x18054 <PRINTER_COMMANDS+0x4>
   18054:	00 d0       	rcall	.+0      	; 0x18056 <PRINTER_COMMANDS+0x6>
   18056:	1f 92       	push	r1
   18058:	c8 2f       	mov	r28, r24

// We could, for example, use secondaries to set file names, etc
// We don not use them yet
    if(PRINTER_is_MLA(listening))
   1805a:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   1805e:	90 e0       	ldi	r25, 0x00	; 0
   18060:	0e 94 10 8d 	call	0x11a20	; 0x11a20 <PRINTER_is_MLA>
   18064:	89 2b       	or	r24, r25
   18066:	69 f0       	breq	.+26     	; 0x18082 <PRINTER_COMMANDS+0x32>
    {
#if SDEBUG
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   18068:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1806c:	85 ff       	sbrs	r24, 5
   1806e:	22 c0       	rjmp	.+68     	; 0x180b4 <PRINTER_COMMANDS+0x64>
            printf("[SC PRINTER Listen: %02XH]\n",  0xff & ch );
   18070:	8c 2f       	mov	r24, r28
   18072:	90 e0       	ldi	r25, 0x00	; 0
   18074:	ed b7       	in	r30, 0x3d	; 61
   18076:	fe b7       	in	r31, 0x3e	; 62
   18078:	95 83       	std	Z+5, r25	; 0x05
   1807a:	84 83       	std	Z+4, r24	; 0x04
   1807c:	8b e1       	ldi	r24, 0x1B	; 27
   1807e:	92 e3       	ldi	r25, 0x32	; 50
   18080:	13 c0       	rjmp	.+38     	; 0x180a8 <PRINTER_COMMANDS+0x58>
#endif
        return(0);
    }

    if(PRINTER_is_MTA(talking))
   18082:	80 91 f6 1e 	lds	r24, 0x1EF6	; 0x801ef6 <talking>
   18086:	90 e0       	ldi	r25, 0x00	; 0
   18088:	0e 94 22 8d 	call	0x11a44	; 0x11a44 <PRINTER_is_MTA>
   1808c:	89 2b       	or	r24, r25
   1808e:	91 f0       	breq	.+36     	; 0x180b4 <PRINTER_COMMANDS+0x64>
    {
#if SDEBUG
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   18090:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18094:	85 ff       	sbrs	r24, 5
   18096:	0e c0       	rjmp	.+28     	; 0x180b4 <PRINTER_COMMANDS+0x64>
            printf("[SC PRINTER Talk: %02XH]\n",  0xff & ch );
   18098:	8c 2f       	mov	r24, r28
   1809a:	90 e0       	ldi	r25, 0x00	; 0
   1809c:	ed b7       	in	r30, 0x3d	; 61
   1809e:	fe b7       	in	r31, 0x3e	; 62
   180a0:	95 83       	std	Z+5, r25	; 0x05
   180a2:	84 83       	std	Z+4, r24	; 0x04
   180a4:	81 e0       	ldi	r24, 0x01	; 1
   180a6:	92 e3       	ldi	r25, 0x32	; 50
   180a8:	a0 e0       	ldi	r26, 0x00	; 0
   180aa:	81 83       	std	Z+1, r24	; 0x01
   180ac:	92 83       	std	Z+2, r25	; 0x02
   180ae:	a3 83       	std	Z+3, r26	; 0x03
   180b0:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
#endif
        return(0);
    }
    return(0);
}
   180b4:	80 e0       	ldi	r24, 0x00	; 0
   180b6:	90 e0       	ldi	r25, 0x00	; 0
   180b8:	0f 90       	pop	r0
   180ba:	0f 90       	pop	r0
   180bc:	0f 90       	pop	r0
   180be:	0f 90       	pop	r0
   180c0:	0f 90       	pop	r0
   180c2:	cf 91       	pop	r28
   180c4:	08 95       	ret

000180c6 <V2B_MSB>:
///@param index: offset into byte array
///@param size: number of bytes to process
///@param val: Value to convert
///@return void
void V2B_MSB(uint8_t *B, int index, int size, uint32_t val)
{
   180c6:	0f 93       	push	r16
   180c8:	1f 93       	push	r17
   180ca:	da 01       	movw	r26, r20
   180cc:	11 97       	sbiw	r26, 0x01	; 1
    int i;
    for(i=size-1;i>=0;--i)
   180ce:	b7 fd       	sbrc	r27, 7
   180d0:	0b c0       	rjmp	.+22     	; 0x180e8 <V2B_MSB+0x22>
    {
        B[index+i] = val & 0xff;
   180d2:	fd 01       	movw	r30, r26
   180d4:	e6 0f       	add	r30, r22
   180d6:	f7 1f       	adc	r31, r23
   180d8:	e8 0f       	add	r30, r24
   180da:	f9 1f       	adc	r31, r25
   180dc:	00 83       	st	Z, r16
        val >>= 8;
   180de:	01 2f       	mov	r16, r17
   180e0:	12 2f       	mov	r17, r18
   180e2:	23 2f       	mov	r18, r19
   180e4:	33 27       	eor	r19, r19
   180e6:	f2 cf       	rjmp	.-28     	; 0x180cc <V2B_MSB+0x6>
    }
}
   180e8:	1f 91       	pop	r17
   180ea:	0f 91       	pop	r16
   180ec:	08 95       	ret

000180ee <V2B_LSB>:
///@param index: offset into byte array
///@param size: number of bytes to process
///@param val: Value to convert
///@return void
void V2B_LSB(uint8_t *B, int index, int size, uint32_t val)
{
   180ee:	0f 93       	push	r16
   180f0:	1f 93       	push	r17
   180f2:	fc 01       	movw	r30, r24
   180f4:	e6 0f       	add	r30, r22
   180f6:	f7 1f       	adc	r31, r23
   180f8:	bf 01       	movw	r22, r30
    int i;
    for(i=0;i<size;++i)
   180fa:	cf 01       	movw	r24, r30
   180fc:	86 1b       	sub	r24, r22
   180fe:	97 0b       	sbc	r25, r23
   18100:	84 17       	cp	r24, r20
   18102:	95 07       	cpc	r25, r21
   18104:	34 f4       	brge	.+12     	; 0x18112 <V2B_LSB+0x24>
    {
        B[index+i] = val & 0xff;
   18106:	01 93       	st	Z+, r16
        val >>= 8;
   18108:	01 2f       	mov	r16, r17
   1810a:	12 2f       	mov	r17, r18
   1810c:	23 2f       	mov	r18, r19
   1810e:	33 27       	eor	r19, r19
   18110:	f4 cf       	rjmp	.-24     	; 0x180fa <V2B_LSB+0xc>
    }
}
   18112:	1f 91       	pop	r17
   18114:	0f 91       	pop	r16
   18116:	08 95       	ret

00018118 <B2V_MSB>:
///@param B: byte array
///@param index: offset into byte array
///@param size: number of bytes to process
///@return value
uint32_t B2V_MSB(uint8_t *B, int index, int size)
{
   18118:	cf 92       	push	r12
   1811a:	df 92       	push	r13
   1811c:	ef 92       	push	r14
   1811e:	ff 92       	push	r15
   18120:	fc 01       	movw	r30, r24
   18122:	e6 0f       	add	r30, r22
   18124:	f7 1f       	adc	r31, r23
    int i;
    uint32_t val = 0;
   18126:	60 e0       	ldi	r22, 0x00	; 0
   18128:	70 e0       	ldi	r23, 0x00	; 0
   1812a:	cb 01       	movw	r24, r22
   1812c:	df 01       	movw	r26, r30

    for(i=0;i<size;++i)
   1812e:	9f 01       	movw	r18, r30
   18130:	2a 1b       	sub	r18, r26
   18132:	3b 0b       	sbc	r19, r27
   18134:	24 17       	cp	r18, r20
   18136:	35 07       	cpc	r19, r21
   18138:	4c f4       	brge	.+18     	; 0x1814c <B2V_MSB+0x34>
    {
        val <<= 8;
   1813a:	cc 24       	eor	r12, r12
   1813c:	d6 2e       	mov	r13, r22
   1813e:	e7 2e       	mov	r14, r23
   18140:	f8 2e       	mov	r15, r24
        val |= (uint8_t) (B[i+index] & 0xff);
   18142:	21 91       	ld	r18, Z+
   18144:	c7 01       	movw	r24, r14
   18146:	b6 01       	movw	r22, r12
   18148:	62 2b       	or	r22, r18
   1814a:	f1 cf       	rjmp	.-30     	; 0x1812e <B2V_MSB+0x16>
    }
    return(val);
}
   1814c:	ff 90       	pop	r15
   1814e:	ef 90       	pop	r14
   18150:	df 90       	pop	r13
   18152:	cf 90       	pop	r12
   18154:	08 95       	ret

00018156 <B2V_LSB>:
///@param B: byte array
///@param index: offset into byte array
///@param size: number of bytes to process
///@return value
uint32_t B2V_LSB(uint8_t *B, int index, int size)
{
   18156:	cf 92       	push	r12
   18158:	df 92       	push	r13
   1815a:	ef 92       	push	r14
   1815c:	ff 92       	push	r15
   1815e:	9c 01       	movw	r18, r24
   18160:	db 01       	movw	r26, r22
    int i;
    uint32_t val = 0;
   18162:	60 e0       	ldi	r22, 0x00	; 0
   18164:	70 e0       	ldi	r23, 0x00	; 0
   18166:	cb 01       	movw	r24, r22
   18168:	41 50       	subi	r20, 0x01	; 1
   1816a:	51 09       	sbc	r21, r1

    for(i=size-1;i>=0;--i)
   1816c:	57 fd       	sbrc	r21, 7
   1816e:	0e c0       	rjmp	.+28     	; 0x1818c <B2V_LSB+0x36>
    {
        val <<= 8;
   18170:	cc 24       	eor	r12, r12
   18172:	d6 2e       	mov	r13, r22
   18174:	e7 2e       	mov	r14, r23
   18176:	f8 2e       	mov	r15, r24
        val |= (uint8_t) (B[i+index] & 0xff);
   18178:	fa 01       	movw	r30, r20
   1817a:	ea 0f       	add	r30, r26
   1817c:	fb 1f       	adc	r31, r27
   1817e:	e2 0f       	add	r30, r18
   18180:	f3 1f       	adc	r31, r19
   18182:	e0 81       	ld	r30, Z
   18184:	c7 01       	movw	r24, r14
   18186:	b6 01       	movw	r22, r12
   18188:	6e 2b       	or	r22, r30
   1818a:	ee cf       	rjmp	.-36     	; 0x18168 <B2V_LSB+0x12>
    }
    return(val);
}
   1818c:	ff 90       	pop	r15
   1818e:	ef 90       	pop	r14
   18190:	df 90       	pop	r13
   18192:	cf 90       	pop	r12
   18194:	08 95       	ret

00018196 <lif_help>:
            return( (lifdir_t *) &LIF->DIR );

// Skip purged records
    }
    return( NULL );
}
   18196:	cf 93       	push	r28
   18198:	df 93       	push	r29
   1819a:	00 d0       	rcall	.+0      	; 0x1819c <lif_help+0x6>
   1819c:	1f 92       	push	r1
   1819e:	ec 01       	movw	r28, r24
   181a0:	8c ef       	ldi	r24, 0xFC	; 252
   181a2:	96 e4       	ldi	r25, 0x46	; 70
   181a4:	a0 e0       	ldi	r26, 0x00	; 0
   181a6:	ed b7       	in	r30, 0x3d	; 61
   181a8:	fe b7       	in	r31, 0x3e	; 62
   181aa:	81 83       	std	Z+1, r24	; 0x01
   181ac:	92 83       	std	Z+2, r25	; 0x02
   181ae:	a3 83       	std	Z+3, r26	; 0x03
   181b0:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   181b4:	cd 2b       	or	r28, r29
   181b6:	51 f0       	breq	.+20     	; 0x181cc <lif_help+0x36>
   181b8:	88 e3       	ldi	r24, 0x38	; 56
   181ba:	95 e4       	ldi	r25, 0x45	; 69
   181bc:	a0 e0       	ldi	r26, 0x00	; 0
   181be:	ed b7       	in	r30, 0x3d	; 61
   181c0:	fe b7       	in	r31, 0x3e	; 62
   181c2:	81 83       	std	Z+1, r24	; 0x01
   181c4:	92 83       	std	Z+2, r25	; 0x02
   181c6:	a3 83       	std	Z+3, r26	; 0x03
   181c8:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   181cc:	cd b7       	in	r28, 0x3d	; 61
   181ce:	de b7       	in	r29, 0x3e	; 62
   181d0:	23 96       	adiw	r28, 0x03	; 3
   181d2:	e2 e0       	ldi	r30, 0x02	; 2
   181d4:	0c 94 2b e7 	jmp	0x1ce56	; 0x1ce56 <__epilogue_restores__+0x20>

000181d8 <lif_calloc>:
   181d8:	cf 92       	push	r12
   181da:	df 92       	push	r13
   181dc:	ef 92       	push	r14
   181de:	ff 92       	push	r15
   181e0:	cf 93       	push	r28
   181e2:	df 93       	push	r29
   181e4:	ad b7       	in	r26, 0x3d	; 61
   181e6:	be b7       	in	r27, 0x3e	; 62
   181e8:	17 97       	sbiw	r26, 0x07	; 7
   181ea:	0f b6       	in	r0, 0x3f	; 63
   181ec:	f8 94       	cli
   181ee:	be bf       	out	0x3e, r27	; 62
   181f0:	0f be       	out	0x3f, r0	; 63
   181f2:	ad bf       	out	0x3d, r26	; 61
   181f4:	6b 01       	movw	r12, r22
   181f6:	7c 01       	movw	r14, r24
   181f8:	61 e0       	ldi	r22, 0x01	; 1
   181fa:	70 e0       	ldi	r23, 0x00	; 0
   181fc:	c6 01       	movw	r24, r12
   181fe:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <safecalloc>
   18202:	ec 01       	movw	r28, r24
   18204:	89 2b       	or	r24, r25
   18206:	71 f4       	brne	.+28     	; 0x18224 <lif_calloc+0x4c>
   18208:	ed b7       	in	r30, 0x3d	; 61
   1820a:	fe b7       	in	r31, 0x3e	; 62
   1820c:	c4 82       	std	Z+4, r12	; 0x04
   1820e:	d5 82       	std	Z+5, r13	; 0x05
   18210:	e6 82       	std	Z+6, r14	; 0x06
   18212:	f7 82       	std	Z+7, r15	; 0x07
   18214:	81 ed       	ldi	r24, 0xD1	; 209
   18216:	94 e4       	ldi	r25, 0x44	; 68
   18218:	a0 e0       	ldi	r26, 0x00	; 0
   1821a:	81 83       	std	Z+1, r24	; 0x01
   1821c:	92 83       	std	Z+2, r25	; 0x02
   1821e:	a3 83       	std	Z+3, r26	; 0x03
   18220:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   18224:	ce 01       	movw	r24, r28
   18226:	ad b7       	in	r26, 0x3d	; 61
   18228:	be b7       	in	r27, 0x3e	; 62
   1822a:	17 96       	adiw	r26, 0x07	; 7
   1822c:	0f b6       	in	r0, 0x3f	; 63
   1822e:	f8 94       	cli
   18230:	be bf       	out	0x3e, r27	; 62
   18232:	0f be       	out	0x3f, r0	; 63
   18234:	ad bf       	out	0x3d, r26	; 61
   18236:	df 91       	pop	r29
   18238:	cf 91       	pop	r28
   1823a:	ff 90       	pop	r15
   1823c:	ef 90       	pop	r14
   1823e:	df 90       	pop	r13
   18240:	cf 90       	pop	r12
   18242:	08 95       	ret

00018244 <lif_free>:
   18244:	00 d0       	rcall	.+0      	; 0x18246 <lif_free+0x2>
   18246:	1f 92       	push	r1
   18248:	00 97       	sbiw	r24, 0x00	; 0
   1824a:	59 f4       	brne	.+22     	; 0x18262 <lif_free+0x1e>
   1824c:	89 eb       	ldi	r24, 0xB9	; 185
   1824e:	94 e4       	ldi	r25, 0x44	; 68
   18250:	a0 e0       	ldi	r26, 0x00	; 0
   18252:	ed b7       	in	r30, 0x3d	; 61
   18254:	fe b7       	in	r31, 0x3e	; 62
   18256:	81 83       	std	Z+1, r24	; 0x01
   18258:	92 83       	std	Z+2, r25	; 0x02
   1825a:	a3 83       	std	Z+3, r26	; 0x03
   1825c:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   18260:	02 c0       	rjmp	.+4      	; 0x18266 <lif_free+0x22>
   18262:	0e 94 28 28 	call	0x5050	; 0x5050 <safefree>
   18266:	0f 90       	pop	r0
   18268:	0f 90       	pop	r0
   1826a:	0f 90       	pop	r0
   1826c:	08 95       	ret

0001826e <lif_stralloc>:
   1826e:	0f 93       	push	r16
   18270:	1f 93       	push	r17
   18272:	cf 93       	push	r28
   18274:	df 93       	push	r29
   18276:	ec 01       	movw	r28, r24
   18278:	fc 01       	movw	r30, r24
   1827a:	01 90       	ld	r0, Z+
   1827c:	00 20       	and	r0, r0
   1827e:	e9 f7       	brne	.-6      	; 0x1827a <lif_stralloc+0xc>
   18280:	bf 01       	movw	r22, r30
   18282:	68 1b       	sub	r22, r24
   18284:	79 0b       	sbc	r23, r25
   18286:	6d 5f       	subi	r22, 0xFD	; 253
   18288:	7f 4f       	sbci	r23, 0xFF	; 255
   1828a:	07 2e       	mov	r0, r23
   1828c:	00 0c       	add	r0, r0
   1828e:	88 0b       	sbc	r24, r24
   18290:	99 0b       	sbc	r25, r25
   18292:	a2 df       	rcall	.-188    	; 0x181d8 <lif_calloc>
   18294:	8c 01       	movw	r16, r24
   18296:	00 97       	sbiw	r24, 0x00	; 0
   18298:	19 f0       	breq	.+6      	; 0x182a0 <lif_stralloc+0x32>
   1829a:	be 01       	movw	r22, r28
   1829c:	0e 94 71 31 	call	0x62e2	; 0x62e2 <strcpy>
   182a0:	c8 01       	movw	r24, r16
   182a2:	df 91       	pop	r29
   182a4:	cf 91       	pop	r28
   182a6:	1f 91       	pop	r17
   182a8:	0f 91       	pop	r16
   182aa:	08 95       	ret

000182ac <lif_open>:
   182ac:	ef 92       	push	r14
   182ae:	ff 92       	push	r15
   182b0:	0f 93       	push	r16
   182b2:	1f 93       	push	r17
   182b4:	cf 93       	push	r28
   182b6:	df 93       	push	r29
   182b8:	ad b7       	in	r26, 0x3d	; 61
   182ba:	be b7       	in	r27, 0x3e	; 62
   182bc:	17 97       	sbiw	r26, 0x07	; 7
   182be:	0f b6       	in	r0, 0x3f	; 63
   182c0:	f8 94       	cli
   182c2:	be bf       	out	0x3e, r27	; 62
   182c4:	0f be       	out	0x3f, r0	; 63
   182c6:	ad bf       	out	0x3d, r26	; 61
   182c8:	8c 01       	movw	r16, r24
   182ca:	7b 01       	movw	r14, r22
   182cc:	0e 94 72 7e 	call	0xfce4	; 0xfce4 <fopen>
   182d0:	ec 01       	movw	r28, r24
   182d2:	89 2b       	or	r24, r25
   182d4:	71 f4       	brne	.+28     	; 0x182f2 <lif_open+0x46>
   182d6:	ed b7       	in	r30, 0x3d	; 61
   182d8:	fe b7       	in	r31, 0x3e	; 62
   182da:	f7 82       	std	Z+7, r15	; 0x07
   182dc:	e6 82       	std	Z+6, r14	; 0x06
   182de:	15 83       	std	Z+5, r17	; 0x05
   182e0:	04 83       	std	Z+4, r16	; 0x04
   182e2:	84 e9       	ldi	r24, 0x94	; 148
   182e4:	94 e4       	ldi	r25, 0x44	; 68
   182e6:	a0 e0       	ldi	r26, 0x00	; 0
   182e8:	81 83       	std	Z+1, r24	; 0x01
   182ea:	92 83       	std	Z+2, r25	; 0x02
   182ec:	a3 83       	std	Z+3, r26	; 0x03
   182ee:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   182f2:	ce 01       	movw	r24, r28
   182f4:	cd b7       	in	r28, 0x3d	; 61
   182f6:	de b7       	in	r29, 0x3e	; 62
   182f8:	27 96       	adiw	r28, 0x07	; 7
   182fa:	e6 e0       	ldi	r30, 0x06	; 6
   182fc:	0c 94 27 e7 	jmp	0x1ce4e	; 0x1ce4e <__epilogue_restores__+0x18>

00018300 <lif_stat>:
   18300:	0f 93       	push	r16
   18302:	1f 93       	push	r17
   18304:	cf 93       	push	r28
   18306:	df 93       	push	r29
   18308:	00 d0       	rcall	.+0      	; 0x1830a <lif_stat+0xa>
   1830a:	00 d0       	rcall	.+0      	; 0x1830c <lif_stat+0xc>
   1830c:	1f 92       	push	r1
   1830e:	8c 01       	movw	r16, r24
   18310:	d6 2f       	mov	r29, r22
   18312:	c7 2f       	mov	r28, r23
   18314:	0e 94 77 79 	call	0xf2ee	; 0xf2ee <stat>
   18318:	97 ff       	sbrs	r25, 7
   1831a:	0f c0       	rjmp	.+30     	; 0x1833a <lif_stat+0x3a>
   1831c:	ed b7       	in	r30, 0x3d	; 61
   1831e:	fe b7       	in	r31, 0x3e	; 62
   18320:	15 83       	std	Z+5, r17	; 0x05
   18322:	04 83       	std	Z+4, r16	; 0x04
   18324:	8b e7       	ldi	r24, 0x7B	; 123
   18326:	94 e4       	ldi	r25, 0x44	; 68
   18328:	a0 e0       	ldi	r26, 0x00	; 0
   1832a:	81 83       	std	Z+1, r24	; 0x01
   1832c:	92 83       	std	Z+2, r25	; 0x02
   1832e:	a3 83       	std	Z+3, r26	; 0x03
   18330:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   18334:	80 e0       	ldi	r24, 0x00	; 0
   18336:	90 e0       	ldi	r25, 0x00	; 0
   18338:	02 c0       	rjmp	.+4      	; 0x1833e <lif_stat+0x3e>
   1833a:	8d 2f       	mov	r24, r29
   1833c:	9c 2f       	mov	r25, r28
   1833e:	cd b7       	in	r28, 0x3d	; 61
   18340:	de b7       	in	r29, 0x3e	; 62
   18342:	25 96       	adiw	r28, 0x05	; 5
   18344:	e4 e0       	ldi	r30, 0x04	; 4
   18346:	0c 94 29 e7 	jmp	0x1ce52	; 0x1ce52 <__epilogue_restores__+0x1c>

0001834a <lif_seek_msg>:
   1834a:	a9 e0       	ldi	r26, 0x09	; 9
   1834c:	b0 e0       	ldi	r27, 0x00	; 0
   1834e:	eb ea       	ldi	r30, 0xAB	; 171
   18350:	f1 ec       	ldi	r31, 0xC1	; 193
   18352:	0c 94 09 e7 	jmp	0x1ce12	; 0x1ce12 <__prologue_saves__+0x14>
   18356:	ec 01       	movw	r28, r24
   18358:	6a 01       	movw	r12, r20
   1835a:	7b 01       	movw	r14, r22
   1835c:	89 01       	movw	r16, r18
   1835e:	0e 94 b1 7a 	call	0xf562	; 0xf562 <ftell>
   18362:	6c 15       	cp	r22, r12
   18364:	7d 05       	cpc	r23, r13
   18366:	8e 05       	cpc	r24, r14
   18368:	9f 05       	cpc	r25, r15
   1836a:	19 f4       	brne	.+6      	; 0x18372 <lif_seek_msg+0x28>
   1836c:	81 e0       	ldi	r24, 0x01	; 1
   1836e:	90 e0       	ldi	r25, 0x00	; 0
   18370:	1b c0       	rjmp	.+54     	; 0x183a8 <lif_seek_msg+0x5e>
   18372:	20 e0       	ldi	r18, 0x00	; 0
   18374:	30 e0       	ldi	r19, 0x00	; 0
   18376:	b7 01       	movw	r22, r14
   18378:	a6 01       	movw	r20, r12
   1837a:	ce 01       	movw	r24, r28
   1837c:	0e 94 34 7b 	call	0xf668	; 0xf668 <fseek>
   18380:	97 ff       	sbrs	r25, 7
   18382:	f4 cf       	rjmp	.-24     	; 0x1836c <lif_seek_msg+0x22>
   18384:	ed b7       	in	r30, 0x3d	; 61
   18386:	fe b7       	in	r31, 0x3e	; 62
   18388:	c6 82       	std	Z+6, r12	; 0x06
   1838a:	d7 82       	std	Z+7, r13	; 0x07
   1838c:	e0 86       	std	Z+8, r14	; 0x08
   1838e:	f1 86       	std	Z+9, r15	; 0x09
   18390:	15 83       	std	Z+5, r17	; 0x05
   18392:	04 83       	std	Z+4, r16	; 0x04
   18394:	8a e5       	ldi	r24, 0x5A	; 90
   18396:	94 e4       	ldi	r25, 0x44	; 68
   18398:	a0 e0       	ldi	r26, 0x00	; 0
   1839a:	81 83       	std	Z+1, r24	; 0x01
   1839c:	92 83       	std	Z+2, r25	; 0x02
   1839e:	a3 83       	std	Z+3, r26	; 0x03
   183a0:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   183a4:	80 e0       	ldi	r24, 0x00	; 0
   183a6:	90 e0       	ldi	r25, 0x00	; 0
   183a8:	cd b7       	in	r28, 0x3d	; 61
   183aa:	de b7       	in	r29, 0x3e	; 62
   183ac:	29 96       	adiw	r28, 0x09	; 9
   183ae:	e8 e0       	ldi	r30, 0x08	; 8
   183b0:	0c 94 25 e7 	jmp	0x1ce4a	; 0x1ce4a <__epilogue_restores__+0x14>

000183b4 <lif_read>:
   183b4:	af e0       	ldi	r26, 0x0F	; 15
   183b6:	b0 e0       	ldi	r27, 0x00	; 0
   183b8:	e0 ee       	ldi	r30, 0xE0	; 224
   183ba:	f1 ec       	ldi	r31, 0xC1	; 193
   183bc:	0c 94 05 e7 	jmp	0x1ce0a	; 0x1ce0a <__prologue_saves__+0xc>
   183c0:	ec 01       	movw	r28, r24
   183c2:	7b 01       	movw	r14, r22
   183c4:	49 01       	movw	r8, r18
   183c6:	5a 01       	movw	r10, r20
   183c8:	28 81       	ld	r18, Y
   183ca:	39 81       	ldd	r19, Y+1	; 0x01
   183cc:	b5 01       	movw	r22, r10
   183ce:	a4 01       	movw	r20, r8
   183d0:	8a 81       	ldd	r24, Y+2	; 0x02
   183d2:	9b 81       	ldd	r25, Y+3	; 0x03
   183d4:	ba df       	rcall	.-140    	; 0x1834a <lif_seek_msg>
   183d6:	89 2b       	or	r24, r25
   183d8:	a1 f1       	breq	.+104    	; 0x18442 <lif_read+0x8e>
   183da:	2a 81       	ldd	r18, Y+2	; 0x02
   183dc:	3b 81       	ldd	r19, Y+3	; 0x03
   183de:	a8 01       	movw	r20, r16
   183e0:	61 e0       	ldi	r22, 0x01	; 1
   183e2:	70 e0       	ldi	r23, 0x00	; 0
   183e4:	c7 01       	movw	r24, r14
   183e6:	0e 94 c8 7b 	call	0xf790	; 0xf790 <fread>
   183ea:	6c 01       	movw	r12, r24
   183ec:	e1 2c       	mov	r14, r1
   183ee:	f1 2c       	mov	r15, r1
   183f0:	b8 01       	movw	r22, r16
   183f2:	01 2e       	mov	r0, r17
   183f4:	00 0c       	add	r0, r0
   183f6:	88 0b       	sbc	r24, r24
   183f8:	99 0b       	sbc	r25, r25
   183fa:	c6 16       	cp	r12, r22
   183fc:	d7 06       	cpc	r13, r23
   183fe:	e8 06       	cpc	r14, r24
   18400:	f9 06       	cpc	r15, r25
   18402:	29 f1       	breq	.+74     	; 0x1844e <lif_read+0x9a>
   18404:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18408:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1840c:	92 ff       	sbrs	r25, 2
   1840e:	1d c0       	rjmp	.+58     	; 0x1844a <lif_read+0x96>
   18410:	ed b7       	in	r30, 0x3d	; 61
   18412:	fe b7       	in	r31, 0x3e	; 62
   18414:	17 87       	std	Z+15, r17	; 0x0f
   18416:	06 87       	std	Z+14, r16	; 0x0e
   18418:	c2 86       	std	Z+10, r12	; 0x0a
   1841a:	d3 86       	std	Z+11, r13	; 0x0b
   1841c:	e4 86       	std	Z+12, r14	; 0x0c
   1841e:	f5 86       	std	Z+13, r15	; 0x0d
   18420:	86 82       	std	Z+6, r8	; 0x06
   18422:	97 82       	std	Z+7, r9	; 0x07
   18424:	a0 86       	std	Z+8, r10	; 0x08
   18426:	b1 86       	std	Z+9, r11	; 0x09
   18428:	88 81       	ld	r24, Y
   1842a:	99 81       	ldd	r25, Y+1	; 0x01
   1842c:	95 83       	std	Z+5, r25	; 0x05
   1842e:	84 83       	std	Z+4, r24	; 0x04
   18430:	8e e1       	ldi	r24, 0x1E	; 30
   18432:	94 e4       	ldi	r25, 0x44	; 68
   18434:	a0 e0       	ldi	r26, 0x00	; 0
   18436:	81 83       	std	Z+1, r24	; 0x01
   18438:	92 83       	std	Z+2, r25	; 0x02
   1843a:	a3 83       	std	Z+3, r26	; 0x03
   1843c:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   18440:	04 c0       	rjmp	.+8      	; 0x1844a <lif_read+0x96>
   18442:	60 e0       	ldi	r22, 0x00	; 0
   18444:	70 e0       	ldi	r23, 0x00	; 0
   18446:	cb 01       	movw	r24, r22
   18448:	02 c0       	rjmp	.+4      	; 0x1844e <lif_read+0x9a>
   1844a:	c7 01       	movw	r24, r14
   1844c:	b6 01       	movw	r22, r12
   1844e:	cd b7       	in	r28, 0x3d	; 61
   18450:	de b7       	in	r29, 0x3e	; 62
   18452:	2f 96       	adiw	r28, 0x0f	; 15
   18454:	ec e0       	ldi	r30, 0x0C	; 12
   18456:	0c 94 21 e7 	jmp	0x1ce42	; 0x1ce42 <__epilogue_restores__+0xc>

0001845a <lif_write>:
   1845a:	8f 92       	push	r8
   1845c:	9f 92       	push	r9
   1845e:	af 92       	push	r10
   18460:	bf 92       	push	r11
   18462:	ef 92       	push	r14
   18464:	ff 92       	push	r15
   18466:	0f 93       	push	r16
   18468:	1f 93       	push	r17
   1846a:	cf 93       	push	r28
   1846c:	df 93       	push	r29
   1846e:	ad b7       	in	r26, 0x3d	; 61
   18470:	be b7       	in	r27, 0x3e	; 62
   18472:	1d 97       	sbiw	r26, 0x0d	; 13
   18474:	0f b6       	in	r0, 0x3f	; 63
   18476:	f8 94       	cli
   18478:	be bf       	out	0x3e, r27	; 62
   1847a:	0f be       	out	0x3f, r0	; 63
   1847c:	ad bf       	out	0x3d, r26	; 61
   1847e:	7c 01       	movw	r14, r24
   18480:	eb 01       	movw	r28, r22
   18482:	49 01       	movw	r8, r18
   18484:	5a 01       	movw	r10, r20
   18486:	fc 01       	movw	r30, r24
   18488:	20 81       	ld	r18, Z
   1848a:	31 81       	ldd	r19, Z+1	; 0x01
   1848c:	b5 01       	movw	r22, r10
   1848e:	a4 01       	movw	r20, r8
   18490:	82 81       	ldd	r24, Z+2	; 0x02
   18492:	93 81       	ldd	r25, Z+3	; 0x03
   18494:	5a df       	rcall	.-332    	; 0x1834a <lif_seek_msg>
   18496:	00 97       	sbiw	r24, 0x00	; 0
   18498:	81 f1       	breq	.+96     	; 0x184fa <lif_write+0xa0>
   1849a:	f7 01       	movw	r30, r14
   1849c:	22 81       	ldd	r18, Z+2	; 0x02
   1849e:	33 81       	ldd	r19, Z+3	; 0x03
   184a0:	a8 01       	movw	r20, r16
   184a2:	61 e0       	ldi	r22, 0x01	; 1
   184a4:	70 e0       	ldi	r23, 0x00	; 0
   184a6:	ce 01       	movw	r24, r28
   184a8:	0e 94 9a 7c 	call	0xf934	; 0xf934 <fwrite>
   184ac:	ec 01       	movw	r28, r24
   184ae:	08 17       	cp	r16, r24
   184b0:	19 07       	cpc	r17, r25
   184b2:	01 f1       	breq	.+64     	; 0x184f4 <lif_write+0x9a>
   184b4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   184b8:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   184bc:	92 ff       	sbrs	r25, 2
   184be:	1c c0       	rjmp	.+56     	; 0x184f8 <lif_write+0x9e>
   184c0:	ed b7       	in	r30, 0x3d	; 61
   184c2:	fe b7       	in	r31, 0x3e	; 62
   184c4:	15 87       	std	Z+13, r17	; 0x0d
   184c6:	04 87       	std	Z+12, r16	; 0x0c
   184c8:	d3 87       	std	Z+11, r29	; 0x0b
   184ca:	c2 87       	std	Z+10, r28	; 0x0a
   184cc:	86 82       	std	Z+6, r8	; 0x06
   184ce:	97 82       	std	Z+7, r9	; 0x07
   184d0:	a0 86       	std	Z+8, r10	; 0x08
   184d2:	b1 86       	std	Z+9, r11	; 0x09
   184d4:	f7 01       	movw	r30, r14
   184d6:	80 81       	ld	r24, Z
   184d8:	91 81       	ldd	r25, Z+1	; 0x01
   184da:	ed b7       	in	r30, 0x3d	; 61
   184dc:	fe b7       	in	r31, 0x3e	; 62
   184de:	95 83       	std	Z+5, r25	; 0x05
   184e0:	84 83       	std	Z+4, r24	; 0x04
   184e2:	81 ee       	ldi	r24, 0xE1	; 225
   184e4:	93 e4       	ldi	r25, 0x43	; 67
   184e6:	a0 e0       	ldi	r26, 0x00	; 0
   184e8:	81 83       	std	Z+1, r24	; 0x01
   184ea:	92 83       	std	Z+2, r25	; 0x02
   184ec:	a3 83       	std	Z+3, r26	; 0x03
   184ee:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   184f2:	02 c0       	rjmp	.+4      	; 0x184f8 <lif_write+0x9e>
   184f4:	c8 01       	movw	r24, r16
   184f6:	01 c0       	rjmp	.+2      	; 0x184fa <lif_write+0xa0>
   184f8:	ce 01       	movw	r24, r28
   184fa:	ad b7       	in	r26, 0x3d	; 61
   184fc:	be b7       	in	r27, 0x3e	; 62
   184fe:	1d 96       	adiw	r26, 0x0d	; 13
   18500:	0f b6       	in	r0, 0x3f	; 63
   18502:	f8 94       	cli
   18504:	be bf       	out	0x3e, r27	; 62
   18506:	0f be       	out	0x3f, r0	; 63
   18508:	ad bf       	out	0x3d, r26	; 61
   1850a:	df 91       	pop	r29
   1850c:	cf 91       	pop	r28
   1850e:	1f 91       	pop	r17
   18510:	0f 91       	pop	r16
   18512:	ff 90       	pop	r15
   18514:	ef 90       	pop	r14
   18516:	bf 90       	pop	r11
   18518:	af 90       	pop	r10
   1851a:	9f 90       	pop	r9
   1851c:	8f 90       	pop	r8
   1851e:	08 95       	ret

00018520 <lif_chars>:
   18520:	80 32       	cpi	r24, 0x20	; 32
   18522:	91 05       	cpc	r25, r1
   18524:	e1 f0       	breq	.+56     	; 0x1855e <lif_chars+0x3e>
   18526:	9c 01       	movw	r18, r24
   18528:	21 56       	subi	r18, 0x61	; 97
   1852a:	31 09       	sbc	r19, r1
   1852c:	2a 31       	cpi	r18, 0x1A	; 26
   1852e:	31 05       	cpc	r19, r1
   18530:	10 f4       	brcc	.+4      	; 0x18536 <lif_chars+0x16>
   18532:	80 97       	sbiw	r24, 0x20	; 32
   18534:	08 95       	ret
   18536:	9c 01       	movw	r18, r24
   18538:	21 54       	subi	r18, 0x41	; 65
   1853a:	31 09       	sbc	r19, r1
   1853c:	2a 31       	cpi	r18, 0x1A	; 26
   1853e:	31 05       	cpc	r19, r1
   18540:	c8 f0       	brcs	.+50     	; 0x18574 <lif_chars+0x54>
   18542:	16 16       	cp	r1, r22
   18544:	17 06       	cpc	r1, r23
   18546:	74 f4       	brge	.+28     	; 0x18564 <lif_chars+0x44>
   18548:	2f 5e       	subi	r18, 0xEF	; 239
   1854a:	3f 4f       	sbci	r19, 0xFF	; 255
   1854c:	2a 30       	cpi	r18, 0x0A	; 10
   1854e:	31 05       	cpc	r19, r1
   18550:	88 f0       	brcs	.+34     	; 0x18574 <lif_chars+0x54>
   18552:	8f 35       	cpi	r24, 0x5F	; 95
   18554:	91 05       	cpc	r25, r1
   18556:	49 f0       	breq	.+18     	; 0x1856a <lif_chars+0x4a>
   18558:	8d 97       	sbiw	r24, 0x2d	; 45
   1855a:	21 f4       	brne	.+8      	; 0x18564 <lif_chars+0x44>
   1855c:	09 c0       	rjmp	.+18     	; 0x18570 <lif_chars+0x50>
   1855e:	80 e2       	ldi	r24, 0x20	; 32
   18560:	90 e0       	ldi	r25, 0x00	; 0
   18562:	08 95       	ret
   18564:	80 e0       	ldi	r24, 0x00	; 0
   18566:	90 e0       	ldi	r25, 0x00	; 0
   18568:	08 95       	ret
   1856a:	8f e5       	ldi	r24, 0x5F	; 95
   1856c:	90 e0       	ldi	r25, 0x00	; 0
   1856e:	08 95       	ret
   18570:	8d e2       	ldi	r24, 0x2D	; 45
   18572:	90 e0       	ldi	r25, 0x00	; 0
   18574:	08 95       	ret

00018576 <lif_B2S>:
   18576:	a0 e0       	ldi	r26, 0x00	; 0
   18578:	b0 e0       	ldi	r27, 0x00	; 0
   1857a:	e1 ec       	ldi	r30, 0xC1	; 193
   1857c:	f2 ec       	ldi	r31, 0xC2	; 194
   1857e:	0c 94 05 e7 	jmp	0x1ce0a	; 0x1ce0a <__prologue_saves__+0xc>
   18582:	5c 01       	movw	r10, r24
   18584:	6b 01       	movw	r12, r22
   18586:	ea 01       	movw	r28, r20
   18588:	4c 01       	movw	r8, r24
   1858a:	ee 24       	eor	r14, r14
   1858c:	e3 94       	inc	r14
   1858e:	f1 2c       	mov	r15, r1
   18590:	00 e0       	ldi	r16, 0x00	; 0
   18592:	10 e0       	ldi	r17, 0x00	; 0
   18594:	0c 17       	cp	r16, r28
   18596:	1d 07       	cpc	r17, r29
   18598:	6c f4       	brge	.+26     	; 0x185b4 <lif_B2S+0x3e>
   1859a:	f4 01       	movw	r30, r8
   1859c:	81 91       	ld	r24, Z+
   1859e:	4f 01       	movw	r8, r30
   185a0:	b8 01       	movw	r22, r16
   185a2:	90 e0       	ldi	r25, 0x00	; 0
   185a4:	bd df       	rcall	.-134    	; 0x18520 <lif_chars>
   185a6:	89 2b       	or	r24, r25
   185a8:	11 f4       	brne	.+4      	; 0x185ae <lif_B2S+0x38>
   185aa:	e1 2c       	mov	r14, r1
   185ac:	f1 2c       	mov	r15, r1
   185ae:	0f 5f       	subi	r16, 0xFF	; 255
   185b0:	1f 4f       	sbci	r17, 0xFF	; 255
   185b2:	f0 cf       	rjmp	.-32     	; 0x18594 <lif_B2S+0x1e>
   185b4:	d6 01       	movw	r26, r12
   185b6:	f5 01       	movw	r30, r10
   185b8:	cf 01       	movw	r24, r30
   185ba:	8a 19       	sub	r24, r10
   185bc:	9b 09       	sbc	r25, r11
   185be:	8c 17       	cp	r24, r28
   185c0:	9d 07       	cpc	r25, r29
   185c2:	1c f4       	brge	.+6      	; 0x185ca <lif_B2S+0x54>
   185c4:	81 91       	ld	r24, Z+
   185c6:	8d 93       	st	X+, r24
   185c8:	f7 cf       	rjmp	.-18     	; 0x185b8 <lif_B2S+0x42>
   185ca:	d7 ff       	sbrs	r29, 7
   185cc:	02 c0       	rjmp	.+4      	; 0x185d2 <lif_B2S+0x5c>
   185ce:	c0 e0       	ldi	r28, 0x00	; 0
   185d0:	d0 e0       	ldi	r29, 0x00	; 0
   185d2:	cc 0d       	add	r28, r12
   185d4:	dd 1d       	adc	r29, r13
   185d6:	18 82       	st	Y, r1
   185d8:	c6 01       	movw	r24, r12
   185da:	0e 94 4f 32 	call	0x649e	; 0x649e <trim_tail>
   185de:	c7 01       	movw	r24, r14
   185e0:	cd b7       	in	r28, 0x3d	; 61
   185e2:	de b7       	in	r29, 0x3e	; 62
   185e4:	ec e0       	ldi	r30, 0x0C	; 12
   185e6:	0c 94 21 e7 	jmp	0x1ce42	; 0x1ce42 <__epilogue_restores__+0xc>

000185ea <lif_checkname>:
   185ea:	ef 92       	push	r14
   185ec:	ff 92       	push	r15
   185ee:	0f 93       	push	r16
   185f0:	1f 93       	push	r17
   185f2:	cf 93       	push	r28
   185f4:	df 93       	push	r29
   185f6:	7c 01       	movw	r14, r24
   185f8:	ec 01       	movw	r28, r24
   185fa:	01 e0       	ldi	r16, 0x01	; 1
   185fc:	10 e0       	ldi	r17, 0x00	; 0
   185fe:	be 01       	movw	r22, r28
   18600:	6e 19       	sub	r22, r14
   18602:	7f 09       	sbc	r23, r15
   18604:	89 91       	ld	r24, Y+
   18606:	88 23       	and	r24, r24
   18608:	39 f0       	breq	.+14     	; 0x18618 <lif_checkname+0x2e>
   1860a:	90 e0       	ldi	r25, 0x00	; 0
   1860c:	89 df       	rcall	.-238    	; 0x18520 <lif_chars>
   1860e:	89 2b       	or	r24, r25
   18610:	b1 f7       	brne	.-20     	; 0x185fe <lif_checkname+0x14>
   18612:	00 e0       	ldi	r16, 0x00	; 0
   18614:	10 e0       	ldi	r17, 0x00	; 0
   18616:	f3 cf       	rjmp	.-26     	; 0x185fe <lif_checkname+0x14>
   18618:	c8 01       	movw	r24, r16
   1861a:	cd b7       	in	r28, 0x3d	; 61
   1861c:	de b7       	in	r29, 0x3e	; 62
   1861e:	e6 e0       	ldi	r30, 0x06	; 6
   18620:	0c 94 27 e7 	jmp	0x1ce4e	; 0x1ce4e <__epilogue_restores__+0x18>

00018624 <lif_S2B>:
   18624:	fb 01       	movw	r30, r22
   18626:	dc 01       	movw	r26, r24
   18628:	20 e0       	ldi	r18, 0x00	; 0
   1862a:	30 e0       	ldi	r19, 0x00	; 0
   1862c:	61 91       	ld	r22, Z+
   1862e:	61 11       	cpse	r22, r1
   18630:	05 c0       	rjmp	.+10     	; 0x1863c <lif_S2B+0x18>
   18632:	fc 01       	movw	r30, r24
   18634:	e2 0f       	add	r30, r18
   18636:	f3 1f       	adc	r31, r19
   18638:	60 e2       	ldi	r22, 0x20	; 32
   1863a:	08 c0       	rjmp	.+16     	; 0x1864c <lif_S2B+0x28>
   1863c:	24 17       	cp	r18, r20
   1863e:	35 07       	cpc	r19, r21
   18640:	24 f4       	brge	.+8      	; 0x1864a <lif_S2B+0x26>
   18642:	6d 93       	st	X+, r22
   18644:	2f 5f       	subi	r18, 0xFF	; 255
   18646:	3f 4f       	sbci	r19, 0xFF	; 255
   18648:	f1 cf       	rjmp	.-30     	; 0x1862c <lif_S2B+0x8>
   1864a:	08 95       	ret
   1864c:	9f 01       	movw	r18, r30
   1864e:	28 1b       	sub	r18, r24
   18650:	39 0b       	sbc	r19, r25
   18652:	24 17       	cp	r18, r20
   18654:	35 07       	cpc	r19, r21
   18656:	14 f4       	brge	.+4      	; 0x1865c <lif_S2B+0x38>
   18658:	61 93       	st	Z+, r22
   1865a:	f8 cf       	rjmp	.-16     	; 0x1864c <lif_S2B+0x28>
   1865c:	08 95       	ret

0001865e <lif_fixname>:
   1865e:	a0 e0       	ldi	r26, 0x00	; 0
   18660:	b0 e0       	ldi	r27, 0x00	; 0
   18662:	e5 e3       	ldi	r30, 0x35	; 53
   18664:	f3 ec       	ldi	r31, 0xC3	; 195
   18666:	0c 94 08 e7 	jmp	0x1ce10	; 0x1ce10 <__prologue_saves__+0x12>
   1866a:	8c 01       	movw	r16, r24
   1866c:	cb 01       	movw	r24, r22
   1866e:	7a 01       	movw	r14, r20
   18670:	0e 94 43 77 	call	0xee86	; 0xee86 <basename>
   18674:	6c 01       	movw	r12, r24
   18676:	e8 01       	movw	r28, r16
   18678:	80 e2       	ldi	r24, 0x20	; 32
   1867a:	b8 2e       	mov	r11, r24
   1867c:	be 01       	movw	r22, r28
   1867e:	60 1b       	sub	r22, r16
   18680:	71 0b       	sbc	r23, r17
   18682:	f6 01       	movw	r30, r12
   18684:	81 91       	ld	r24, Z+
   18686:	6f 01       	movw	r12, r30
   18688:	81 11       	cpse	r24, r1
   1868a:	02 c0       	rjmp	.+4      	; 0x18690 <lif_fixname+0x32>
   1868c:	20 e2       	ldi	r18, 0x20	; 32
   1868e:	0e c0       	rjmp	.+28     	; 0x186ac <lif_fixname+0x4e>
   18690:	1e 14       	cp	r1, r14
   18692:	1f 04       	cpc	r1, r15
   18694:	dc f7       	brge	.-10     	; 0x1868c <lif_fixname+0x2e>
   18696:	8e 32       	cpi	r24, 0x2E	; 46
   18698:	c9 f3       	breq	.-14     	; 0x1868c <lif_fixname+0x2e>
   1869a:	90 e0       	ldi	r25, 0x00	; 0
   1869c:	41 df       	rcall	.-382    	; 0x18520 <lif_chars>
   1869e:	88 23       	and	r24, r24
   186a0:	11 f0       	breq	.+4      	; 0x186a6 <lif_fixname+0x48>
   186a2:	88 83       	st	Y, r24
   186a4:	01 c0       	rjmp	.+2      	; 0x186a8 <lif_fixname+0x4a>
   186a6:	b8 82       	st	Y, r11
   186a8:	21 96       	adiw	r28, 0x01	; 1
   186aa:	e8 cf       	rjmp	.-48     	; 0x1867c <lif_fixname+0x1e>
   186ac:	ce 01       	movw	r24, r28
   186ae:	80 1b       	sub	r24, r16
   186b0:	91 0b       	sbc	r25, r17
   186b2:	8e 15       	cp	r24, r14
   186b4:	9f 05       	cpc	r25, r15
   186b6:	14 f4       	brge	.+4      	; 0x186bc <lif_fixname+0x5e>
   186b8:	29 93       	st	Y+, r18
   186ba:	f8 cf       	rjmp	.-16     	; 0x186ac <lif_fixname+0x4e>
   186bc:	18 82       	st	Y, r1
   186be:	f8 01       	movw	r30, r16
   186c0:	01 90       	ld	r0, Z+
   186c2:	00 20       	and	r0, r0
   186c4:	e9 f7       	brne	.-6      	; 0x186c0 <lif_fixname+0x62>
   186c6:	cf 01       	movw	r24, r30
   186c8:	01 97       	sbiw	r24, 0x01	; 1
   186ca:	80 1b       	sub	r24, r16
   186cc:	91 0b       	sbc	r25, r17
   186ce:	cd b7       	in	r28, 0x3d	; 61
   186d0:	de b7       	in	r29, 0x3e	; 62
   186d2:	e9 e0       	ldi	r30, 0x09	; 9
   186d4:	0c 94 24 e7 	jmp	0x1ce48	; 0x1ce48 <__epilogue_restores__+0x12>

000186d8 <lif_vol2str>:
   186d8:	ef 92       	push	r14
   186da:	ff 92       	push	r15
   186dc:	0f 93       	push	r16
   186de:	1f 93       	push	r17
   186e0:	cf 93       	push	r28
   186e2:	df 93       	push	r29
   186e4:	7c 01       	movw	r14, r24
   186e6:	eb 01       	movw	r28, r22
   186e8:	fc 01       	movw	r30, r24
   186ea:	04 a1       	ldd	r16, Z+36	; 0x24
   186ec:	15 a1       	ldd	r17, Z+37	; 0x25
   186ee:	20 e0       	ldi	r18, 0x00	; 0
   186f0:	30 e0       	ldi	r19, 0x00	; 0
   186f2:	42 e0       	ldi	r20, 0x02	; 2
   186f4:	50 e0       	ldi	r21, 0x00	; 0
   186f6:	60 e0       	ldi	r22, 0x00	; 0
   186f8:	70 e0       	ldi	r23, 0x00	; 0
   186fa:	ce 01       	movw	r24, r28
   186fc:	e4 dc       	rcall	.-1592   	; 0x180c6 <V2B_MSB>
   186fe:	b7 01       	movw	r22, r14
   18700:	6a 5d       	subi	r22, 0xDA	; 218
   18702:	7f 4f       	sbci	r23, 0xFF	; 255
   18704:	46 e0       	ldi	r20, 0x06	; 6
   18706:	50 e0       	ldi	r21, 0x00	; 0
   18708:	ce 01       	movw	r24, r28
   1870a:	02 96       	adiw	r24, 0x02	; 2
   1870c:	8b df       	rcall	.-234    	; 0x18624 <lif_S2B>
   1870e:	f7 01       	movw	r30, r14
   18710:	05 a5       	ldd	r16, Z+45	; 0x2d
   18712:	16 a5       	ldd	r17, Z+46	; 0x2e
   18714:	27 a5       	ldd	r18, Z+47	; 0x2f
   18716:	30 a9       	ldd	r19, Z+48	; 0x30
   18718:	44 e0       	ldi	r20, 0x04	; 4
   1871a:	50 e0       	ldi	r21, 0x00	; 0
   1871c:	68 e0       	ldi	r22, 0x08	; 8
   1871e:	70 e0       	ldi	r23, 0x00	; 0
   18720:	ce 01       	movw	r24, r28
   18722:	d1 dc       	rcall	.-1630   	; 0x180c6 <V2B_MSB>
   18724:	f7 01       	movw	r30, r14
   18726:	01 a9       	ldd	r16, Z+49	; 0x31
   18728:	12 a9       	ldd	r17, Z+50	; 0x32
   1872a:	20 e0       	ldi	r18, 0x00	; 0
   1872c:	30 e0       	ldi	r19, 0x00	; 0
   1872e:	42 e0       	ldi	r20, 0x02	; 2
   18730:	50 e0       	ldi	r21, 0x00	; 0
   18732:	6c e0       	ldi	r22, 0x0C	; 12
   18734:	70 e0       	ldi	r23, 0x00	; 0
   18736:	ce 01       	movw	r24, r28
   18738:	c6 dc       	rcall	.-1652   	; 0x180c6 <V2B_MSB>
   1873a:	00 e0       	ldi	r16, 0x00	; 0
   1873c:	10 e0       	ldi	r17, 0x00	; 0
   1873e:	98 01       	movw	r18, r16
   18740:	42 e0       	ldi	r20, 0x02	; 2
   18742:	50 e0       	ldi	r21, 0x00	; 0
   18744:	6e e0       	ldi	r22, 0x0E	; 14
   18746:	70 e0       	ldi	r23, 0x00	; 0
   18748:	ce 01       	movw	r24, r28
   1874a:	bd dc       	rcall	.-1670   	; 0x180c6 <V2B_MSB>
   1874c:	f7 01       	movw	r30, r14
   1874e:	05 a9       	ldd	r16, Z+53	; 0x35
   18750:	16 a9       	ldd	r17, Z+54	; 0x36
   18752:	27 a9       	ldd	r18, Z+55	; 0x37
   18754:	30 ad       	ldd	r19, Z+56	; 0x38
   18756:	44 e0       	ldi	r20, 0x04	; 4
   18758:	50 e0       	ldi	r21, 0x00	; 0
   1875a:	60 e1       	ldi	r22, 0x10	; 16
   1875c:	70 e0       	ldi	r23, 0x00	; 0
   1875e:	ce 01       	movw	r24, r28
   18760:	b2 dc       	rcall	.-1692   	; 0x180c6 <V2B_MSB>
   18762:	f7 01       	movw	r30, r14
   18764:	01 ad       	ldd	r16, Z+57	; 0x39
   18766:	12 ad       	ldd	r17, Z+58	; 0x3a
   18768:	20 e0       	ldi	r18, 0x00	; 0
   1876a:	30 e0       	ldi	r19, 0x00	; 0
   1876c:	42 e0       	ldi	r20, 0x02	; 2
   1876e:	50 e0       	ldi	r21, 0x00	; 0
   18770:	64 e1       	ldi	r22, 0x14	; 20
   18772:	70 e0       	ldi	r23, 0x00	; 0
   18774:	ce 01       	movw	r24, r28
   18776:	a7 dc       	rcall	.-1714   	; 0x180c6 <V2B_MSB>
   18778:	00 e0       	ldi	r16, 0x00	; 0
   1877a:	10 e0       	ldi	r17, 0x00	; 0
   1877c:	98 01       	movw	r18, r16
   1877e:	42 e0       	ldi	r20, 0x02	; 2
   18780:	50 e0       	ldi	r21, 0x00	; 0
   18782:	66 e1       	ldi	r22, 0x16	; 22
   18784:	70 e0       	ldi	r23, 0x00	; 0
   18786:	ce 01       	movw	r24, r28
   18788:	9e dc       	rcall	.-1732   	; 0x180c6 <V2B_MSB>
   1878a:	f7 01       	movw	r30, r14
   1878c:	fd 96       	adiw	r30, 0x3d	; 61
   1878e:	00 81       	ld	r16, Z
   18790:	11 81       	ldd	r17, Z+1	; 0x01
   18792:	22 81       	ldd	r18, Z+2	; 0x02
   18794:	33 81       	ldd	r19, Z+3	; 0x03
   18796:	44 e0       	ldi	r20, 0x04	; 4
   18798:	50 e0       	ldi	r21, 0x00	; 0
   1879a:	68 e1       	ldi	r22, 0x18	; 24
   1879c:	70 e0       	ldi	r23, 0x00	; 0
   1879e:	ce 01       	movw	r24, r28
   187a0:	92 dc       	rcall	.-1756   	; 0x180c6 <V2B_MSB>
   187a2:	f7 01       	movw	r30, r14
   187a4:	ef 5b       	subi	r30, 0xBF	; 191
   187a6:	ff 4f       	sbci	r31, 0xFF	; 255
   187a8:	00 81       	ld	r16, Z
   187aa:	11 81       	ldd	r17, Z+1	; 0x01
   187ac:	22 81       	ldd	r18, Z+2	; 0x02
   187ae:	33 81       	ldd	r19, Z+3	; 0x03
   187b0:	44 e0       	ldi	r20, 0x04	; 4
   187b2:	50 e0       	ldi	r21, 0x00	; 0
   187b4:	6c e1       	ldi	r22, 0x1C	; 28
   187b6:	70 e0       	ldi	r23, 0x00	; 0
   187b8:	ce 01       	movw	r24, r28
   187ba:	85 dc       	rcall	.-1782   	; 0x180c6 <V2B_MSB>
   187bc:	f7 01       	movw	r30, r14
   187be:	eb 5b       	subi	r30, 0xBB	; 187
   187c0:	ff 4f       	sbci	r31, 0xFF	; 255
   187c2:	00 81       	ld	r16, Z
   187c4:	11 81       	ldd	r17, Z+1	; 0x01
   187c6:	22 81       	ldd	r18, Z+2	; 0x02
   187c8:	33 81       	ldd	r19, Z+3	; 0x03
   187ca:	44 e0       	ldi	r20, 0x04	; 4
   187cc:	50 e0       	ldi	r21, 0x00	; 0
   187ce:	60 e2       	ldi	r22, 0x20	; 32
   187d0:	70 e0       	ldi	r23, 0x00	; 0
   187d2:	ce 01       	movw	r24, r28
   187d4:	78 dc       	rcall	.-1808   	; 0x180c6 <V2B_MSB>
   187d6:	de 01       	movw	r26, r28
   187d8:	94 96       	adiw	r26, 0x24	; 36
   187da:	f7 01       	movw	r30, r14
   187dc:	e7 5b       	subi	r30, 0xB7	; 183
   187de:	ff 4f       	sbci	r31, 0xFF	; 255
   187e0:	86 e0       	ldi	r24, 0x06	; 6
   187e2:	01 90       	ld	r0, Z+
   187e4:	0d 92       	st	X+, r0
   187e6:	8a 95       	dec	r24
   187e8:	e1 f7       	brne	.-8      	; 0x187e2 <lif_vol2str+0x10a>
   187ea:	cd b7       	in	r28, 0x3d	; 61
   187ec:	de b7       	in	r29, 0x3e	; 62
   187ee:	e6 e0       	ldi	r30, 0x06	; 6
   187f0:	0c 94 27 e7 	jmp	0x1ce4e	; 0x1ce4e <__epilogue_restores__+0x18>

000187f4 <lif_str2vol>:
   187f4:	0f 93       	push	r16
   187f6:	1f 93       	push	r17
   187f8:	cf 93       	push	r28
   187fa:	df 93       	push	r29
   187fc:	8c 01       	movw	r16, r24
   187fe:	eb 01       	movw	r28, r22
   18800:	42 e0       	ldi	r20, 0x02	; 2
   18802:	50 e0       	ldi	r21, 0x00	; 0
   18804:	60 e0       	ldi	r22, 0x00	; 0
   18806:	70 e0       	ldi	r23, 0x00	; 0
   18808:	87 dc       	rcall	.-1778   	; 0x18118 <B2V_MSB>
   1880a:	7d a3       	std	Y+37, r23	; 0x25
   1880c:	6c a3       	std	Y+36, r22	; 0x24
   1880e:	be 01       	movw	r22, r28
   18810:	6a 5d       	subi	r22, 0xDA	; 218
   18812:	7f 4f       	sbci	r23, 0xFF	; 255
   18814:	46 e0       	ldi	r20, 0x06	; 6
   18816:	50 e0       	ldi	r21, 0x00	; 0
   18818:	c8 01       	movw	r24, r16
   1881a:	02 96       	adiw	r24, 0x02	; 2
   1881c:	ac de       	rcall	.-680    	; 0x18576 <lif_B2S>
   1881e:	44 e0       	ldi	r20, 0x04	; 4
   18820:	50 e0       	ldi	r21, 0x00	; 0
   18822:	68 e0       	ldi	r22, 0x08	; 8
   18824:	70 e0       	ldi	r23, 0x00	; 0
   18826:	c8 01       	movw	r24, r16
   18828:	77 dc       	rcall	.-1810   	; 0x18118 <B2V_MSB>
   1882a:	6d a7       	std	Y+45, r22	; 0x2d
   1882c:	7e a7       	std	Y+46, r23	; 0x2e
   1882e:	8f a7       	std	Y+47, r24	; 0x2f
   18830:	98 ab       	std	Y+48, r25	; 0x30
   18832:	42 e0       	ldi	r20, 0x02	; 2
   18834:	50 e0       	ldi	r21, 0x00	; 0
   18836:	6c e0       	ldi	r22, 0x0C	; 12
   18838:	70 e0       	ldi	r23, 0x00	; 0
   1883a:	c8 01       	movw	r24, r16
   1883c:	6d dc       	rcall	.-1830   	; 0x18118 <B2V_MSB>
   1883e:	7a ab       	std	Y+50, r23	; 0x32
   18840:	69 ab       	std	Y+49, r22	; 0x31
   18842:	42 e0       	ldi	r20, 0x02	; 2
   18844:	50 e0       	ldi	r21, 0x00	; 0
   18846:	6e e0       	ldi	r22, 0x0E	; 14
   18848:	70 e0       	ldi	r23, 0x00	; 0
   1884a:	c8 01       	movw	r24, r16
   1884c:	65 dc       	rcall	.-1846   	; 0x18118 <B2V_MSB>
   1884e:	7c ab       	std	Y+52, r23	; 0x34
   18850:	6b ab       	std	Y+51, r22	; 0x33
   18852:	44 e0       	ldi	r20, 0x04	; 4
   18854:	50 e0       	ldi	r21, 0x00	; 0
   18856:	60 e1       	ldi	r22, 0x10	; 16
   18858:	70 e0       	ldi	r23, 0x00	; 0
   1885a:	c8 01       	movw	r24, r16
   1885c:	5d dc       	rcall	.-1862   	; 0x18118 <B2V_MSB>
   1885e:	6d ab       	std	Y+53, r22	; 0x35
   18860:	7e ab       	std	Y+54, r23	; 0x36
   18862:	8f ab       	std	Y+55, r24	; 0x37
   18864:	98 af       	std	Y+56, r25	; 0x38
   18866:	42 e0       	ldi	r20, 0x02	; 2
   18868:	50 e0       	ldi	r21, 0x00	; 0
   1886a:	64 e1       	ldi	r22, 0x14	; 20
   1886c:	70 e0       	ldi	r23, 0x00	; 0
   1886e:	c8 01       	movw	r24, r16
   18870:	53 dc       	rcall	.-1882   	; 0x18118 <B2V_MSB>
   18872:	7a af       	std	Y+58, r23	; 0x3a
   18874:	69 af       	std	Y+57, r22	; 0x39
   18876:	42 e0       	ldi	r20, 0x02	; 2
   18878:	50 e0       	ldi	r21, 0x00	; 0
   1887a:	66 e1       	ldi	r22, 0x16	; 22
   1887c:	70 e0       	ldi	r23, 0x00	; 0
   1887e:	c8 01       	movw	r24, r16
   18880:	4b dc       	rcall	.-1898   	; 0x18118 <B2V_MSB>
   18882:	7c af       	std	Y+60, r23	; 0x3c
   18884:	6b af       	std	Y+59, r22	; 0x3b
   18886:	44 e0       	ldi	r20, 0x04	; 4
   18888:	50 e0       	ldi	r21, 0x00	; 0
   1888a:	68 e1       	ldi	r22, 0x18	; 24
   1888c:	70 e0       	ldi	r23, 0x00	; 0
   1888e:	c8 01       	movw	r24, r16
   18890:	43 dc       	rcall	.-1914   	; 0x18118 <B2V_MSB>
   18892:	fe 01       	movw	r30, r28
   18894:	fd 96       	adiw	r30, 0x3d	; 61
   18896:	60 83       	st	Z, r22
   18898:	71 83       	std	Z+1, r23	; 0x01
   1889a:	82 83       	std	Z+2, r24	; 0x02
   1889c:	93 83       	std	Z+3, r25	; 0x03
   1889e:	44 e0       	ldi	r20, 0x04	; 4
   188a0:	50 e0       	ldi	r21, 0x00	; 0
   188a2:	6c e1       	ldi	r22, 0x1C	; 28
   188a4:	70 e0       	ldi	r23, 0x00	; 0
   188a6:	c8 01       	movw	r24, r16
   188a8:	37 dc       	rcall	.-1938   	; 0x18118 <B2V_MSB>
   188aa:	fe 01       	movw	r30, r28
   188ac:	ef 5b       	subi	r30, 0xBF	; 191
   188ae:	ff 4f       	sbci	r31, 0xFF	; 255
   188b0:	60 83       	st	Z, r22
   188b2:	71 83       	std	Z+1, r23	; 0x01
   188b4:	82 83       	std	Z+2, r24	; 0x02
   188b6:	93 83       	std	Z+3, r25	; 0x03
   188b8:	44 e0       	ldi	r20, 0x04	; 4
   188ba:	50 e0       	ldi	r21, 0x00	; 0
   188bc:	60 e2       	ldi	r22, 0x20	; 32
   188be:	70 e0       	ldi	r23, 0x00	; 0
   188c0:	c8 01       	movw	r24, r16
   188c2:	2a dc       	rcall	.-1964   	; 0x18118 <B2V_MSB>
   188c4:	fe 01       	movw	r30, r28
   188c6:	eb 5b       	subi	r30, 0xBB	; 187
   188c8:	ff 4f       	sbci	r31, 0xFF	; 255
   188ca:	60 83       	st	Z, r22
   188cc:	71 83       	std	Z+1, r23	; 0x01
   188ce:	82 83       	std	Z+2, r24	; 0x02
   188d0:	93 83       	std	Z+3, r25	; 0x03
   188d2:	de 01       	movw	r26, r28
   188d4:	a7 5b       	subi	r26, 0xB7	; 183
   188d6:	bf 4f       	sbci	r27, 0xFF	; 255
   188d8:	f8 01       	movw	r30, r16
   188da:	b4 96       	adiw	r30, 0x24	; 36
   188dc:	86 e0       	ldi	r24, 0x06	; 6
   188de:	01 90       	ld	r0, Z+
   188e0:	0d 92       	st	X+, r0
   188e2:	8a 95       	dec	r24
   188e4:	e1 f7       	brne	.-8      	; 0x188de <lif_str2vol+0xea>
   188e6:	df 91       	pop	r29
   188e8:	cf 91       	pop	r28
   188ea:	1f 91       	pop	r17
   188ec:	0f 91       	pop	r16
   188ee:	08 95       	ret

000188f0 <lif_dir2str>:
   188f0:	ef 92       	push	r14
   188f2:	ff 92       	push	r15
   188f4:	0f 93       	push	r16
   188f6:	1f 93       	push	r17
   188f8:	cf 93       	push	r28
   188fa:	df 93       	push	r29
   188fc:	ec 01       	movw	r28, r24
   188fe:	7b 01       	movw	r14, r22
   18900:	bc 01       	movw	r22, r24
   18902:	61 5b       	subi	r22, 0xB1	; 177
   18904:	7f 4f       	sbci	r23, 0xFF	; 255
   18906:	4a e0       	ldi	r20, 0x0A	; 10
   18908:	50 e0       	ldi	r21, 0x00	; 0
   1890a:	c7 01       	movw	r24, r14
   1890c:	8b de       	rcall	.-746    	; 0x18624 <lif_S2B>
   1890e:	fe 01       	movw	r30, r28
   18910:	e6 5a       	subi	r30, 0xA6	; 166
   18912:	ff 4f       	sbci	r31, 0xFF	; 255
   18914:	00 81       	ld	r16, Z
   18916:	11 81       	ldd	r17, Z+1	; 0x01
   18918:	20 e0       	ldi	r18, 0x00	; 0
   1891a:	30 e0       	ldi	r19, 0x00	; 0
   1891c:	42 e0       	ldi	r20, 0x02	; 2
   1891e:	50 e0       	ldi	r21, 0x00	; 0
   18920:	6a e0       	ldi	r22, 0x0A	; 10
   18922:	70 e0       	ldi	r23, 0x00	; 0
   18924:	c7 01       	movw	r24, r14
   18926:	cf db       	rcall	.-2146   	; 0x180c6 <V2B_MSB>
   18928:	fe 01       	movw	r30, r28
   1892a:	e4 5a       	subi	r30, 0xA4	; 164
   1892c:	ff 4f       	sbci	r31, 0xFF	; 255
   1892e:	00 81       	ld	r16, Z
   18930:	11 81       	ldd	r17, Z+1	; 0x01
   18932:	22 81       	ldd	r18, Z+2	; 0x02
   18934:	33 81       	ldd	r19, Z+3	; 0x03
   18936:	44 e0       	ldi	r20, 0x04	; 4
   18938:	50 e0       	ldi	r21, 0x00	; 0
   1893a:	6c e0       	ldi	r22, 0x0C	; 12
   1893c:	70 e0       	ldi	r23, 0x00	; 0
   1893e:	c7 01       	movw	r24, r14
   18940:	c2 db       	rcall	.-2172   	; 0x180c6 <V2B_MSB>
   18942:	fe 01       	movw	r30, r28
   18944:	e0 5a       	subi	r30, 0xA0	; 160
   18946:	ff 4f       	sbci	r31, 0xFF	; 255
   18948:	00 81       	ld	r16, Z
   1894a:	11 81       	ldd	r17, Z+1	; 0x01
   1894c:	22 81       	ldd	r18, Z+2	; 0x02
   1894e:	33 81       	ldd	r19, Z+3	; 0x03
   18950:	44 e0       	ldi	r20, 0x04	; 4
   18952:	50 e0       	ldi	r21, 0x00	; 0
   18954:	60 e1       	ldi	r22, 0x10	; 16
   18956:	70 e0       	ldi	r23, 0x00	; 0
   18958:	c7 01       	movw	r24, r14
   1895a:	b5 db       	rcall	.-2198   	; 0x180c6 <V2B_MSB>
   1895c:	d7 01       	movw	r26, r14
   1895e:	54 96       	adiw	r26, 0x14	; 20
   18960:	fe 01       	movw	r30, r28
   18962:	ec 59       	subi	r30, 0x9C	; 156
   18964:	ff 4f       	sbci	r31, 0xFF	; 255
   18966:	86 e0       	ldi	r24, 0x06	; 6
   18968:	01 90       	ld	r0, Z+
   1896a:	0d 92       	st	X+, r0
   1896c:	8a 95       	dec	r24
   1896e:	e1 f7       	brne	.-8      	; 0x18968 <lif_dir2str+0x78>
   18970:	fe 01       	movw	r30, r28
   18972:	e6 59       	subi	r30, 0x96	; 150
   18974:	ff 4f       	sbci	r31, 0xFF	; 255
   18976:	00 81       	ld	r16, Z
   18978:	11 81       	ldd	r17, Z+1	; 0x01
   1897a:	20 e0       	ldi	r18, 0x00	; 0
   1897c:	30 e0       	ldi	r19, 0x00	; 0
   1897e:	42 e0       	ldi	r20, 0x02	; 2
   18980:	50 e0       	ldi	r21, 0x00	; 0
   18982:	6a e1       	ldi	r22, 0x1A	; 26
   18984:	70 e0       	ldi	r23, 0x00	; 0
   18986:	c7 01       	movw	r24, r14
   18988:	9e db       	rcall	.-2244   	; 0x180c6 <V2B_MSB>
   1898a:	fe 01       	movw	r30, r28
   1898c:	e4 59       	subi	r30, 0x94	; 148
   1898e:	ff 4f       	sbci	r31, 0xFF	; 255
   18990:	00 81       	ld	r16, Z
   18992:	11 81       	ldd	r17, Z+1	; 0x01
   18994:	20 e0       	ldi	r18, 0x00	; 0
   18996:	30 e0       	ldi	r19, 0x00	; 0
   18998:	42 e0       	ldi	r20, 0x02	; 2
   1899a:	50 e0       	ldi	r21, 0x00	; 0
   1899c:	6c e1       	ldi	r22, 0x1C	; 28
   1899e:	70 e0       	ldi	r23, 0x00	; 0
   189a0:	c7 01       	movw	r24, r14
   189a2:	a5 db       	rcall	.-2230   	; 0x180ee <V2B_LSB>
   189a4:	c2 59       	subi	r28, 0x92	; 146
   189a6:	df 4f       	sbci	r29, 0xFF	; 255
   189a8:	08 81       	ld	r16, Y
   189aa:	19 81       	ldd	r17, Y+1	; 0x01
   189ac:	20 e0       	ldi	r18, 0x00	; 0
   189ae:	30 e0       	ldi	r19, 0x00	; 0
   189b0:	42 e0       	ldi	r20, 0x02	; 2
   189b2:	50 e0       	ldi	r21, 0x00	; 0
   189b4:	6e e1       	ldi	r22, 0x1E	; 30
   189b6:	70 e0       	ldi	r23, 0x00	; 0
   189b8:	c7 01       	movw	r24, r14
   189ba:	99 db       	rcall	.-2254   	; 0x180ee <V2B_LSB>
   189bc:	cd b7       	in	r28, 0x3d	; 61
   189be:	de b7       	in	r29, 0x3e	; 62
   189c0:	e6 e0       	ldi	r30, 0x06	; 6
   189c2:	0c 94 27 e7 	jmp	0x1ce4e	; 0x1ce4e <__epilogue_restores__+0x18>

000189c6 <lif_str2dir>:
   189c6:	0f 93       	push	r16
   189c8:	1f 93       	push	r17
   189ca:	cf 93       	push	r28
   189cc:	df 93       	push	r29
   189ce:	8c 01       	movw	r16, r24
   189d0:	eb 01       	movw	r28, r22
   189d2:	61 5b       	subi	r22, 0xB1	; 177
   189d4:	7f 4f       	sbci	r23, 0xFF	; 255
   189d6:	4a e0       	ldi	r20, 0x0A	; 10
   189d8:	50 e0       	ldi	r21, 0x00	; 0
   189da:	cd dd       	rcall	.-1126   	; 0x18576 <lif_B2S>
   189dc:	42 e0       	ldi	r20, 0x02	; 2
   189de:	50 e0       	ldi	r21, 0x00	; 0
   189e0:	6a e0       	ldi	r22, 0x0A	; 10
   189e2:	70 e0       	ldi	r23, 0x00	; 0
   189e4:	c8 01       	movw	r24, r16
   189e6:	98 db       	rcall	.-2256   	; 0x18118 <B2V_MSB>
   189e8:	fe 01       	movw	r30, r28
   189ea:	e6 5a       	subi	r30, 0xA6	; 166
   189ec:	ff 4f       	sbci	r31, 0xFF	; 255
   189ee:	71 83       	std	Z+1, r23	; 0x01
   189f0:	60 83       	st	Z, r22
   189f2:	44 e0       	ldi	r20, 0x04	; 4
   189f4:	50 e0       	ldi	r21, 0x00	; 0
   189f6:	6c e0       	ldi	r22, 0x0C	; 12
   189f8:	70 e0       	ldi	r23, 0x00	; 0
   189fa:	c8 01       	movw	r24, r16
   189fc:	8d db       	rcall	.-2278   	; 0x18118 <B2V_MSB>
   189fe:	fe 01       	movw	r30, r28
   18a00:	e4 5a       	subi	r30, 0xA4	; 164
   18a02:	ff 4f       	sbci	r31, 0xFF	; 255
   18a04:	60 83       	st	Z, r22
   18a06:	71 83       	std	Z+1, r23	; 0x01
   18a08:	82 83       	std	Z+2, r24	; 0x02
   18a0a:	93 83       	std	Z+3, r25	; 0x03
   18a0c:	44 e0       	ldi	r20, 0x04	; 4
   18a0e:	50 e0       	ldi	r21, 0x00	; 0
   18a10:	60 e1       	ldi	r22, 0x10	; 16
   18a12:	70 e0       	ldi	r23, 0x00	; 0
   18a14:	c8 01       	movw	r24, r16
   18a16:	80 db       	rcall	.-2304   	; 0x18118 <B2V_MSB>
   18a18:	fe 01       	movw	r30, r28
   18a1a:	e0 5a       	subi	r30, 0xA0	; 160
   18a1c:	ff 4f       	sbci	r31, 0xFF	; 255
   18a1e:	60 83       	st	Z, r22
   18a20:	71 83       	std	Z+1, r23	; 0x01
   18a22:	82 83       	std	Z+2, r24	; 0x02
   18a24:	93 83       	std	Z+3, r25	; 0x03
   18a26:	de 01       	movw	r26, r28
   18a28:	ac 59       	subi	r26, 0x9C	; 156
   18a2a:	bf 4f       	sbci	r27, 0xFF	; 255
   18a2c:	f8 01       	movw	r30, r16
   18a2e:	74 96       	adiw	r30, 0x14	; 20
   18a30:	86 e0       	ldi	r24, 0x06	; 6
   18a32:	01 90       	ld	r0, Z+
   18a34:	0d 92       	st	X+, r0
   18a36:	8a 95       	dec	r24
   18a38:	e1 f7       	brne	.-8      	; 0x18a32 <lif_str2dir+0x6c>
   18a3a:	42 e0       	ldi	r20, 0x02	; 2
   18a3c:	50 e0       	ldi	r21, 0x00	; 0
   18a3e:	6a e1       	ldi	r22, 0x1A	; 26
   18a40:	70 e0       	ldi	r23, 0x00	; 0
   18a42:	c8 01       	movw	r24, r16
   18a44:	69 db       	rcall	.-2350   	; 0x18118 <B2V_MSB>
   18a46:	fe 01       	movw	r30, r28
   18a48:	e6 59       	subi	r30, 0x96	; 150
   18a4a:	ff 4f       	sbci	r31, 0xFF	; 255
   18a4c:	71 83       	std	Z+1, r23	; 0x01
   18a4e:	60 83       	st	Z, r22
   18a50:	42 e0       	ldi	r20, 0x02	; 2
   18a52:	50 e0       	ldi	r21, 0x00	; 0
   18a54:	6c e1       	ldi	r22, 0x1C	; 28
   18a56:	70 e0       	ldi	r23, 0x00	; 0
   18a58:	c8 01       	movw	r24, r16
   18a5a:	7d db       	rcall	.-2310   	; 0x18156 <B2V_LSB>
   18a5c:	fe 01       	movw	r30, r28
   18a5e:	e4 59       	subi	r30, 0x94	; 148
   18a60:	ff 4f       	sbci	r31, 0xFF	; 255
   18a62:	71 83       	std	Z+1, r23	; 0x01
   18a64:	60 83       	st	Z, r22
   18a66:	42 e0       	ldi	r20, 0x02	; 2
   18a68:	50 e0       	ldi	r21, 0x00	; 0
   18a6a:	6e e1       	ldi	r22, 0x1E	; 30
   18a6c:	70 e0       	ldi	r23, 0x00	; 0
   18a6e:	c8 01       	movw	r24, r16
   18a70:	72 db       	rcall	.-2332   	; 0x18156 <B2V_LSB>
   18a72:	c2 59       	subi	r28, 0x92	; 146
   18a74:	df 4f       	sbci	r29, 0xFF	; 255
   18a76:	79 83       	std	Y+1, r23	; 0x01
   18a78:	68 83       	st	Y, r22
   18a7a:	df 91       	pop	r29
   18a7c:	cf 91       	pop	r28
   18a7e:	1f 91       	pop	r17
   18a80:	0f 91       	pop	r16
   18a82:	08 95       	ret

00018a84 <lif_BIN2BCD>:
   18a84:	6a e0       	ldi	r22, 0x0A	; 10
   18a86:	0e 94 5f e6 	call	0x1ccbe	; 0x1ccbe <__udivmodqi4>
   18a8a:	82 95       	swap	r24
   18a8c:	80 7f       	andi	r24, 0xF0	; 240
   18a8e:	89 2b       	or	r24, r25
   18a90:	08 95       	ret

00018a92 <lif_BCD2BIN>:
   18a92:	28 2f       	mov	r18, r24
   18a94:	22 95       	swap	r18
   18a96:	2f 70       	andi	r18, 0x0F	; 15
   18a98:	8f 70       	andi	r24, 0x0F	; 15
   18a9a:	90 e0       	ldi	r25, 0x00	; 0
   18a9c:	3a e0       	ldi	r19, 0x0A	; 10
   18a9e:	23 9f       	mul	r18, r19
   18aa0:	80 0d       	add	r24, r0
   18aa2:	91 1d       	adc	r25, r1
   18aa4:	11 24       	eor	r1, r1
   18aa6:	08 95       	ret

00018aa8 <lif_time2lifbcd>:
   18aa8:	aa e1       	ldi	r26, 0x1A	; 26
   18aaa:	b0 e0       	ldi	r27, 0x00	; 0
   18aac:	ea e5       	ldi	r30, 0x5A	; 90
   18aae:	f5 ec       	ldi	r31, 0xC5	; 197
   18ab0:	0c 94 0d e7 	jmp	0x1ce1a	; 0x1ce1a <__prologue_saves__+0x1c>
   18ab4:	8b 01       	movw	r16, r22
   18ab6:	9c 01       	movw	r18, r24
   18ab8:	6f 8b       	std	Y+23, r22	; 0x17
   18aba:	78 8f       	std	Y+24, r23	; 0x18
   18abc:	89 8f       	std	Y+25, r24	; 0x19
   18abe:	9a 8f       	std	Y+26, r25	; 0x1a
   18ac0:	67 2b       	or	r22, r23
   18ac2:	68 2b       	or	r22, r24
   18ac4:	69 2b       	or	r22, r25
   18ac6:	41 f4       	brne	.+16     	; 0x18ad8 <lif_time2lifbcd+0x30>
   18ac8:	fa 01       	movw	r30, r20
   18aca:	ca 01       	movw	r24, r20
   18acc:	06 96       	adiw	r24, 0x06	; 6
   18ace:	11 92       	st	Z+, r1
   18ad0:	e8 17       	cp	r30, r24
   18ad2:	f9 07       	cpc	r31, r25
   18ad4:	e1 f7       	brne	.-8      	; 0x18ace <lif_time2lifbcd+0x26>
   18ad6:	26 c0       	rjmp	.+76     	; 0x18b24 <lif_time2lifbcd+0x7c>
   18ad8:	8a 01       	movw	r16, r20
   18ada:	be 01       	movw	r22, r28
   18adc:	6f 5f       	subi	r22, 0xFF	; 255
   18ade:	7f 4f       	sbci	r23, 0xFF	; 255
   18ae0:	ce 01       	movw	r24, r28
   18ae2:	47 96       	adiw	r24, 0x17	; 23
   18ae4:	0e 94 c3 37 	call	0x6f86	; 0x6f86 <gmtime_r>
   18ae8:	8b 85       	ldd	r24, Y+11	; 0x0b
   18aea:	9c 85       	ldd	r25, Y+12	; 0x0c
   18aec:	64 e6       	ldi	r22, 0x64	; 100
   18aee:	70 e0       	ldi	r23, 0x00	; 0
   18af0:	0e 94 7f e6 	call	0x1ccfe	; 0x1ccfe <__divmodhi4>
   18af4:	c7 df       	rcall	.-114    	; 0x18a84 <lif_BIN2BCD>
   18af6:	f8 01       	movw	r30, r16
   18af8:	80 83       	st	Z, r24
   18afa:	89 85       	ldd	r24, Y+9	; 0x09
   18afc:	8f 5f       	subi	r24, 0xFF	; 255
   18afe:	c2 df       	rcall	.-124    	; 0x18a84 <lif_BIN2BCD>
   18b00:	f8 01       	movw	r30, r16
   18b02:	81 83       	std	Z+1, r24	; 0x01
   18b04:	8f 81       	ldd	r24, Y+7	; 0x07
   18b06:	be df       	rcall	.-132    	; 0x18a84 <lif_BIN2BCD>
   18b08:	f8 01       	movw	r30, r16
   18b0a:	82 83       	std	Z+2, r24	; 0x02
   18b0c:	8d 81       	ldd	r24, Y+5	; 0x05
   18b0e:	ba df       	rcall	.-140    	; 0x18a84 <lif_BIN2BCD>
   18b10:	f8 01       	movw	r30, r16
   18b12:	83 83       	std	Z+3, r24	; 0x03
   18b14:	8b 81       	ldd	r24, Y+3	; 0x03
   18b16:	b6 df       	rcall	.-148    	; 0x18a84 <lif_BIN2BCD>
   18b18:	f8 01       	movw	r30, r16
   18b1a:	84 83       	std	Z+4, r24	; 0x04
   18b1c:	89 81       	ldd	r24, Y+1	; 0x01
   18b1e:	b2 df       	rcall	.-156    	; 0x18a84 <lif_BIN2BCD>
   18b20:	f8 01       	movw	r30, r16
   18b22:	85 83       	std	Z+5, r24	; 0x05
   18b24:	6a 96       	adiw	r28, 0x1a	; 26
   18b26:	e4 e0       	ldi	r30, 0x04	; 4
   18b28:	0c 94 29 e7 	jmp	0x1ce52	; 0x1ce52 <__epilogue_restores__+0x1c>

00018b2c <lif_lifbcd2time>:
   18b2c:	a6 e1       	ldi	r26, 0x16	; 22
   18b2e:	b0 e0       	ldi	r27, 0x00	; 0
   18b30:	ec e9       	ldi	r30, 0x9C	; 156
   18b32:	f5 ec       	ldi	r31, 0xC5	; 197
   18b34:	0c 94 07 e7 	jmp	0x1ce0e	; 0x1ce0e <__prologue_saves__+0x10>
   18b38:	8c 01       	movw	r16, r24
   18b3a:	7c 01       	movw	r14, r24
   18b3c:	5c 01       	movw	r10, r24
   18b3e:	26 e0       	ldi	r18, 0x06	; 6
   18b40:	a2 0e       	add	r10, r18
   18b42:	b1 1c       	adc	r11, r1
   18b44:	cc 24       	eor	r12, r12
   18b46:	c3 94       	inc	r12
   18b48:	d1 2c       	mov	r13, r1
   18b4a:	f7 01       	movw	r30, r14
   18b4c:	81 91       	ld	r24, Z+
   18b4e:	7f 01       	movw	r14, r30
   18b50:	a0 df       	rcall	.-192    	; 0x18a92 <lif_BCD2BIN>
   18b52:	89 2b       	or	r24, r25
   18b54:	11 f0       	breq	.+4      	; 0x18b5a <lif_lifbcd2time+0x2e>
   18b56:	c1 2c       	mov	r12, r1
   18b58:	d1 2c       	mov	r13, r1
   18b5a:	ea 14       	cp	r14, r10
   18b5c:	fb 04       	cpc	r15, r11
   18b5e:	a9 f7       	brne	.-22     	; 0x18b4a <lif_lifbcd2time+0x1e>
   18b60:	c1 14       	cp	r12, r1
   18b62:	d1 04       	cpc	r13, r1
   18b64:	61 f5       	brne	.+88     	; 0x18bbe <lif_lifbcd2time+0x92>
   18b66:	f8 01       	movw	r30, r16
   18b68:	80 81       	ld	r24, Z
   18b6a:	93 df       	rcall	.-218    	; 0x18a92 <lif_BCD2BIN>
   18b6c:	7c 01       	movw	r14, r24
   18b6e:	f8 01       	movw	r30, r16
   18b70:	81 81       	ldd	r24, Z+1	; 0x01
   18b72:	8f df       	rcall	.-226    	; 0x18a92 <lif_BCD2BIN>
   18b74:	01 97       	sbiw	r24, 0x01	; 1
   18b76:	f6 e4       	ldi	r31, 0x46	; 70
   18b78:	ef 16       	cp	r14, r31
   18b7a:	f1 04       	cpc	r15, r1
   18b7c:	1c f4       	brge	.+6      	; 0x18b84 <lif_lifbcd2time+0x58>
   18b7e:	24 e6       	ldi	r18, 0x64	; 100
   18b80:	e2 0e       	add	r14, r18
   18b82:	f1 1c       	adc	r15, r1
   18b84:	fc 86       	std	Y+12, r15	; 0x0c
   18b86:	eb 86       	std	Y+11, r14	; 0x0b
   18b88:	9a 87       	std	Y+10, r25	; 0x0a
   18b8a:	89 87       	std	Y+9, r24	; 0x09
   18b8c:	f8 01       	movw	r30, r16
   18b8e:	82 81       	ldd	r24, Z+2	; 0x02
   18b90:	80 df       	rcall	.-256    	; 0x18a92 <lif_BCD2BIN>
   18b92:	98 87       	std	Y+8, r25	; 0x08
   18b94:	8f 83       	std	Y+7, r24	; 0x07
   18b96:	f8 01       	movw	r30, r16
   18b98:	83 81       	ldd	r24, Z+3	; 0x03
   18b9a:	7b df       	rcall	.-266    	; 0x18a92 <lif_BCD2BIN>
   18b9c:	9e 83       	std	Y+6, r25	; 0x06
   18b9e:	8d 83       	std	Y+5, r24	; 0x05
   18ba0:	f8 01       	movw	r30, r16
   18ba2:	84 81       	ldd	r24, Z+4	; 0x04
   18ba4:	76 df       	rcall	.-276    	; 0x18a92 <lif_BCD2BIN>
   18ba6:	9c 83       	std	Y+4, r25	; 0x04
   18ba8:	8b 83       	std	Y+3, r24	; 0x03
   18baa:	f8 01       	movw	r30, r16
   18bac:	85 81       	ldd	r24, Z+5	; 0x05
   18bae:	71 df       	rcall	.-286    	; 0x18a92 <lif_BCD2BIN>
   18bb0:	9a 83       	std	Y+2, r25	; 0x02
   18bb2:	89 83       	std	Y+1, r24	; 0x01
   18bb4:	ce 01       	movw	r24, r28
   18bb6:	01 96       	adiw	r24, 0x01	; 1
   18bb8:	0e 94 97 3a 	call	0x752e	; 0x752e <timegm>
   18bbc:	03 c0       	rjmp	.+6      	; 0x18bc4 <lif_lifbcd2time+0x98>
   18bbe:	60 e0       	ldi	r22, 0x00	; 0
   18bc0:	70 e0       	ldi	r23, 0x00	; 0
   18bc2:	cb 01       	movw	r24, r22
   18bc4:	66 96       	adiw	r28, 0x16	; 22
   18bc6:	ea e0       	ldi	r30, 0x0A	; 10
   18bc8:	0c 94 23 e7 	jmp	0x1ce46	; 0x1ce46 <__epilogue_restores__+0x10>

00018bcc <lif_ctime_gmt>:
   18bcc:	a6 e1       	ldi	r26, 0x16	; 22
   18bce:	b0 e0       	ldi	r27, 0x00	; 0
   18bd0:	ec ee       	ldi	r30, 0xEC	; 236
   18bd2:	f5 ec       	ldi	r31, 0xC5	; 197
   18bd4:	0c 94 0d e7 	jmp	0x1ce1a	; 0x1ce1a <__prologue_saves__+0x1c>
   18bd8:	20 e2       	ldi	r18, 0x20	; 32
   18bda:	e2 ed       	ldi	r30, 0xD2	; 210
   18bdc:	f9 e1       	ldi	r31, 0x19	; 25
   18bde:	df 01       	movw	r26, r30
   18be0:	1d 92       	st	X+, r1
   18be2:	2a 95       	dec	r18
   18be4:	e9 f7       	brne	.-6      	; 0x18be0 <lif_ctime_gmt+0x14>
   18be6:	be 01       	movw	r22, r28
   18be8:	6f 5f       	subi	r22, 0xFF	; 255
   18bea:	7f 4f       	sbci	r23, 0xFF	; 255
   18bec:	0e 94 c3 37 	call	0x6f86	; 0x6f86 <gmtime_r>
   18bf0:	62 ed       	ldi	r22, 0xD2	; 210
   18bf2:	79 e1       	ldi	r23, 0x19	; 25
   18bf4:	0e 94 f3 3c 	call	0x79e6	; 0x79e6 <asctime_r>
   18bf8:	8c 01       	movw	r16, r24
   18bfa:	0e 94 4f 32 	call	0x649e	; 0x649e <trim_tail>
   18bfe:	c8 01       	movw	r24, r16
   18c00:	66 96       	adiw	r28, 0x16	; 22
   18c02:	e4 e0       	ldi	r30, 0x04	; 4
   18c04:	0c 94 29 e7 	jmp	0x1ce52	; 0x1ce52 <__epilogue_restores__+0x1c>

00018c08 <lif_lifbcd2timestr>:
   18c08:	a4 e0       	ldi	r26, 0x04	; 4
   18c0a:	b0 e0       	ldi	r27, 0x00	; 0
   18c0c:	ea e0       	ldi	r30, 0x0A	; 10
   18c0e:	f6 ec       	ldi	r31, 0xC6	; 198
   18c10:	0c 94 0f e7 	jmp	0x1ce1e	; 0x1ce1e <__prologue_saves__+0x20>
   18c14:	20 e2       	ldi	r18, 0x20	; 32
   18c16:	e2 eb       	ldi	r30, 0xB2	; 178
   18c18:	f9 e1       	ldi	r31, 0x19	; 25
   18c1a:	df 01       	movw	r26, r30
   18c1c:	1d 92       	st	X+, r1
   18c1e:	2a 95       	dec	r18
   18c20:	e9 f7       	brne	.-6      	; 0x18c1c <lif_lifbcd2timestr+0x14>
   18c22:	84 df       	rcall	.-248    	; 0x18b2c <lif_lifbcd2time>
   18c24:	69 83       	std	Y+1, r22	; 0x01
   18c26:	7a 83       	std	Y+2, r23	; 0x02
   18c28:	8b 83       	std	Y+3, r24	; 0x03
   18c2a:	9c 83       	std	Y+4, r25	; 0x04
   18c2c:	67 2b       	or	r22, r23
   18c2e:	68 2b       	or	r22, r24
   18c30:	69 2b       	or	r22, r25
   18c32:	29 f0       	breq	.+10     	; 0x18c3e <lif_lifbcd2timestr+0x36>
   18c34:	ce 01       	movw	r24, r28
   18c36:	01 96       	adiw	r24, 0x01	; 1
   18c38:	c9 df       	rcall	.-110    	; 0x18bcc <lif_ctime_gmt>
   18c3a:	bc 01       	movw	r22, r24
   18c3c:	02 c0       	rjmp	.+4      	; 0x18c42 <lif_lifbcd2timestr+0x3a>
   18c3e:	6f ee       	ldi	r22, 0xEF	; 239
   18c40:	75 e1       	ldi	r23, 0x15	; 21
   18c42:	82 eb       	ldi	r24, 0xB2	; 178
   18c44:	99 e1       	ldi	r25, 0x19	; 25
   18c46:	0e 94 71 31 	call	0x62e2	; 0x62e2 <strcpy>
   18c4a:	82 eb       	ldi	r24, 0xB2	; 178
   18c4c:	99 e1       	ldi	r25, 0x19	; 25
   18c4e:	24 96       	adiw	r28, 0x04	; 4
   18c50:	e2 e0       	ldi	r30, 0x02	; 2
   18c52:	0c 94 2b e7 	jmp	0x1ce56	; 0x1ce56 <__epilogue_restores__+0x20>

00018c56 <lif_image_clear>:
   18c56:	20 e7       	ldi	r18, 0x70	; 112
   18c58:	fc 01       	movw	r30, r24
   18c5a:	11 92       	st	Z+, r1
   18c5c:	2a 95       	dec	r18
   18c5e:	e9 f7       	brne	.-6      	; 0x18c5a <lif_image_clear+0x4>
   18c60:	08 95       	ret

00018c62 <lif_dir_clear>:
   18c62:	81 5b       	subi	r24, 0xB1	; 177
   18c64:	9f 4f       	sbci	r25, 0xFF	; 255
   18c66:	21 e2       	ldi	r18, 0x21	; 33
   18c68:	fc 01       	movw	r30, r24
   18c6a:	11 92       	st	Z+, r1
   18c6c:	2a 95       	dec	r18
   18c6e:	e9 f7       	brne	.-6      	; 0x18c6a <lif_dir_clear+0x8>
   18c70:	08 95       	ret

00018c72 <lif_vol_clear>:
   18c72:	84 96       	adiw	r24, 0x24	; 36
   18c74:	2b e2       	ldi	r18, 0x2B	; 43
   18c76:	fc 01       	movw	r30, r24
   18c78:	11 92       	st	Z+, r1
   18c7a:	2a 95       	dec	r18
   18c7c:	e9 f7       	brne	.-6      	; 0x18c78 <lif_vol_clear+0x6>
   18c7e:	08 95       	ret

00018c80 <lif_dump_vol>:
   18c80:	cf 93       	push	r28
   18c82:	df 93       	push	r29
   18c84:	ad b7       	in	r26, 0x3d	; 61
   18c86:	be b7       	in	r27, 0x3e	; 62
   18c88:	17 97       	sbiw	r26, 0x07	; 7
   18c8a:	0f b6       	in	r0, 0x3f	; 63
   18c8c:	f8 94       	cli
   18c8e:	be bf       	out	0x3e, r27	; 62
   18c90:	0f be       	out	0x3f, r0	; 63
   18c92:	ad bf       	out	0x3d, r26	; 61
   18c94:	ec 01       	movw	r28, r24
   18c96:	ed b7       	in	r30, 0x3d	; 61
   18c98:	fe b7       	in	r31, 0x3e	; 62
   18c9a:	75 83       	std	Z+5, r23	; 0x05
   18c9c:	64 83       	std	Z+4, r22	; 0x04
   18c9e:	8c ed       	ldi	r24, 0xDC	; 220
   18ca0:	93 e4       	ldi	r25, 0x43	; 67
   18ca2:	a0 e0       	ldi	r26, 0x00	; 0
   18ca4:	81 83       	std	Z+1, r24	; 0x01
   18ca6:	92 83       	std	Z+2, r25	; 0x02
   18ca8:	a3 83       	std	Z+3, r26	; 0x03
   18caa:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   18cae:	88 81       	ld	r24, Y
   18cb0:	99 81       	ldd	r25, Y+1	; 0x01
   18cb2:	ed b7       	in	r30, 0x3d	; 61
   18cb4:	fe b7       	in	r31, 0x3e	; 62
   18cb6:	95 83       	std	Z+5, r25	; 0x05
   18cb8:	84 83       	std	Z+4, r24	; 0x04
   18cba:	82 ec       	ldi	r24, 0xC2	; 194
   18cbc:	93 e4       	ldi	r25, 0x43	; 67
   18cbe:	a0 e0       	ldi	r26, 0x00	; 0
   18cc0:	81 83       	std	Z+1, r24	; 0x01
   18cc2:	92 83       	std	Z+2, r25	; 0x02
   18cc4:	a3 83       	std	Z+3, r26	; 0x03
   18cc6:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   18cca:	8c 81       	ldd	r24, Y+4	; 0x04
   18ccc:	9d 81       	ldd	r25, Y+5	; 0x05
   18cce:	ae 81       	ldd	r26, Y+6	; 0x06
   18cd0:	bf 81       	ldd	r27, Y+7	; 0x07
   18cd2:	ed b7       	in	r30, 0x3d	; 61
   18cd4:	fe b7       	in	r31, 0x3e	; 62
   18cd6:	84 83       	std	Z+4, r24	; 0x04
   18cd8:	95 83       	std	Z+5, r25	; 0x05
   18cda:	a6 83       	std	Z+6, r26	; 0x06
   18cdc:	b7 83       	std	Z+7, r27	; 0x07
   18cde:	85 ea       	ldi	r24, 0xA5	; 165
   18ce0:	93 e4       	ldi	r25, 0x43	; 67
   18ce2:	a0 e0       	ldi	r26, 0x00	; 0
   18ce4:	81 83       	std	Z+1, r24	; 0x01
   18ce6:	92 83       	std	Z+2, r25	; 0x02
   18ce8:	a3 83       	std	Z+3, r26	; 0x03
   18cea:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   18cee:	88 85       	ldd	r24, Y+8	; 0x08
   18cf0:	99 85       	ldd	r25, Y+9	; 0x09
   18cf2:	aa 85       	ldd	r26, Y+10	; 0x0a
   18cf4:	bb 85       	ldd	r27, Y+11	; 0x0b
   18cf6:	ed b7       	in	r30, 0x3d	; 61
   18cf8:	fe b7       	in	r31, 0x3e	; 62
   18cfa:	84 83       	std	Z+4, r24	; 0x04
   18cfc:	95 83       	std	Z+5, r25	; 0x05
   18cfe:	a6 83       	std	Z+6, r26	; 0x06
   18d00:	b7 83       	std	Z+7, r27	; 0x07
   18d02:	88 e8       	ldi	r24, 0x88	; 136
   18d04:	93 e4       	ldi	r25, 0x43	; 67
   18d06:	a0 e0       	ldi	r26, 0x00	; 0
   18d08:	81 83       	std	Z+1, r24	; 0x01
   18d0a:	92 83       	std	Z+2, r25	; 0x02
   18d0c:	a3 83       	std	Z+3, r26	; 0x03
   18d0e:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   18d12:	8c 85       	ldd	r24, Y+12	; 0x0c
   18d14:	9d 85       	ldd	r25, Y+13	; 0x0d
   18d16:	ae 85       	ldd	r26, Y+14	; 0x0e
   18d18:	bf 85       	ldd	r27, Y+15	; 0x0f
   18d1a:	ed b7       	in	r30, 0x3d	; 61
   18d1c:	fe b7       	in	r31, 0x3e	; 62
   18d1e:	84 83       	std	Z+4, r24	; 0x04
   18d20:	95 83       	std	Z+5, r25	; 0x05
   18d22:	a6 83       	std	Z+6, r26	; 0x06
   18d24:	b7 83       	std	Z+7, r27	; 0x07
   18d26:	8b e6       	ldi	r24, 0x6B	; 107
   18d28:	93 e4       	ldi	r25, 0x43	; 67
   18d2a:	a0 e0       	ldi	r26, 0x00	; 0
   18d2c:	81 83       	std	Z+1, r24	; 0x01
   18d2e:	92 83       	std	Z+2, r25	; 0x02
   18d30:	a3 83       	std	Z+3, r26	; 0x03
   18d32:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   18d36:	88 89       	ldd	r24, Y+16	; 0x10
   18d38:	99 89       	ldd	r25, Y+17	; 0x11
   18d3a:	aa 89       	ldd	r26, Y+18	; 0x12
   18d3c:	bb 89       	ldd	r27, Y+19	; 0x13
   18d3e:	ed b7       	in	r30, 0x3d	; 61
   18d40:	fe b7       	in	r31, 0x3e	; 62
   18d42:	84 83       	std	Z+4, r24	; 0x04
   18d44:	95 83       	std	Z+5, r25	; 0x05
   18d46:	a6 83       	std	Z+6, r26	; 0x06
   18d48:	b7 83       	std	Z+7, r27	; 0x07
   18d4a:	8e e4       	ldi	r24, 0x4E	; 78
   18d4c:	93 e4       	ldi	r25, 0x43	; 67
   18d4e:	a0 e0       	ldi	r26, 0x00	; 0
   18d50:	81 83       	std	Z+1, r24	; 0x01
   18d52:	92 83       	std	Z+2, r25	; 0x02
   18d54:	a3 83       	std	Z+3, r26	; 0x03
   18d56:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   18d5a:	8c 89       	ldd	r24, Y+20	; 0x14
   18d5c:	9d 89       	ldd	r25, Y+21	; 0x15
   18d5e:	ae 89       	ldd	r26, Y+22	; 0x16
   18d60:	bf 89       	ldd	r27, Y+23	; 0x17
   18d62:	ed b7       	in	r30, 0x3d	; 61
   18d64:	fe b7       	in	r31, 0x3e	; 62
   18d66:	84 83       	std	Z+4, r24	; 0x04
   18d68:	95 83       	std	Z+5, r25	; 0x05
   18d6a:	a6 83       	std	Z+6, r26	; 0x06
   18d6c:	b7 83       	std	Z+7, r27	; 0x07
   18d6e:	81 e3       	ldi	r24, 0x31	; 49
   18d70:	93 e4       	ldi	r25, 0x43	; 67
   18d72:	a0 e0       	ldi	r26, 0x00	; 0
   18d74:	81 83       	std	Z+1, r24	; 0x01
   18d76:	92 83       	std	Z+2, r25	; 0x02
   18d78:	a3 83       	std	Z+3, r26	; 0x03
   18d7a:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   18d7e:	88 8d       	ldd	r24, Y+24	; 0x18
   18d80:	99 8d       	ldd	r25, Y+25	; 0x19
   18d82:	aa 8d       	ldd	r26, Y+26	; 0x1a
   18d84:	bb 8d       	ldd	r27, Y+27	; 0x1b
   18d86:	ed b7       	in	r30, 0x3d	; 61
   18d88:	fe b7       	in	r31, 0x3e	; 62
   18d8a:	84 83       	std	Z+4, r24	; 0x04
   18d8c:	95 83       	std	Z+5, r25	; 0x05
   18d8e:	a6 83       	std	Z+6, r26	; 0x06
   18d90:	b7 83       	std	Z+7, r27	; 0x07
   18d92:	84 e1       	ldi	r24, 0x14	; 20
   18d94:	93 e4       	ldi	r25, 0x43	; 67
   18d96:	a0 e0       	ldi	r26, 0x00	; 0
   18d98:	81 83       	std	Z+1, r24	; 0x01
   18d9a:	92 83       	std	Z+2, r25	; 0x02
   18d9c:	a3 83       	std	Z+3, r26	; 0x03
   18d9e:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   18da2:	8c 8d       	ldd	r24, Y+28	; 0x1c
   18da4:	9d 8d       	ldd	r25, Y+29	; 0x1d
   18da6:	09 2e       	mov	r0, r25
   18da8:	00 0c       	add	r0, r0
   18daa:	aa 0b       	sbc	r26, r26
   18dac:	bb 0b       	sbc	r27, r27
   18dae:	ed b7       	in	r30, 0x3d	; 61
   18db0:	fe b7       	in	r31, 0x3e	; 62
   18db2:	84 83       	std	Z+4, r24	; 0x04
   18db4:	95 83       	std	Z+5, r25	; 0x05
   18db6:	a6 83       	std	Z+6, r26	; 0x06
   18db8:	b7 83       	std	Z+7, r27	; 0x07
   18dba:	87 ef       	ldi	r24, 0xF7	; 247
   18dbc:	92 e4       	ldi	r25, 0x42	; 66
   18dbe:	a0 e0       	ldi	r26, 0x00	; 0
   18dc0:	81 83       	std	Z+1, r24	; 0x01
   18dc2:	92 83       	std	Z+2, r25	; 0x02
   18dc4:	a3 83       	std	Z+3, r26	; 0x03
   18dc6:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   18dca:	8e 8d       	ldd	r24, Y+30	; 0x1e
   18dcc:	9f 8d       	ldd	r25, Y+31	; 0x1f
   18dce:	09 2e       	mov	r0, r25
   18dd0:	00 0c       	add	r0, r0
   18dd2:	aa 0b       	sbc	r26, r26
   18dd4:	bb 0b       	sbc	r27, r27
   18dd6:	ed b7       	in	r30, 0x3d	; 61
   18dd8:	fe b7       	in	r31, 0x3e	; 62
   18dda:	84 83       	std	Z+4, r24	; 0x04
   18ddc:	95 83       	std	Z+5, r25	; 0x05
   18dde:	a6 83       	std	Z+6, r26	; 0x06
   18de0:	b7 83       	std	Z+7, r27	; 0x07
   18de2:	8a ed       	ldi	r24, 0xDA	; 218
   18de4:	92 e4       	ldi	r25, 0x42	; 66
   18de6:	a0 e0       	ldi	r26, 0x00	; 0
   18de8:	81 83       	std	Z+1, r24	; 0x01
   18dea:	92 83       	std	Z+2, r25	; 0x02
   18dec:	a3 83       	std	Z+3, r26	; 0x03
   18dee:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   18df2:	ce 01       	movw	r24, r28
   18df4:	86 96       	adiw	r24, 0x26	; 38
   18df6:	ed b7       	in	r30, 0x3d	; 61
   18df8:	fe b7       	in	r31, 0x3e	; 62
   18dfa:	95 83       	std	Z+5, r25	; 0x05
   18dfc:	84 83       	std	Z+4, r24	; 0x04
   18dfe:	80 ec       	ldi	r24, 0xC0	; 192
   18e00:	92 e4       	ldi	r25, 0x42	; 66
   18e02:	a0 e0       	ldi	r26, 0x00	; 0
   18e04:	81 83       	std	Z+1, r24	; 0x01
   18e06:	92 83       	std	Z+2, r25	; 0x02
   18e08:	a3 83       	std	Z+3, r26	; 0x03
   18e0a:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   18e0e:	8c a1       	ldd	r24, Y+36	; 0x24
   18e10:	9d a1       	ldd	r25, Y+37	; 0x25
   18e12:	ed b7       	in	r30, 0x3d	; 61
   18e14:	fe b7       	in	r31, 0x3e	; 62
   18e16:	95 83       	std	Z+5, r25	; 0x05
   18e18:	84 83       	std	Z+4, r24	; 0x04
   18e1a:	84 ea       	ldi	r24, 0xA4	; 164
   18e1c:	92 e4       	ldi	r25, 0x42	; 66
   18e1e:	a0 e0       	ldi	r26, 0x00	; 0
   18e20:	81 83       	std	Z+1, r24	; 0x01
   18e22:	92 83       	std	Z+2, r25	; 0x02
   18e24:	a3 83       	std	Z+3, r26	; 0x03
   18e26:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   18e2a:	8d a5       	ldd	r24, Y+45	; 0x2d
   18e2c:	9e a5       	ldd	r25, Y+46	; 0x2e
   18e2e:	af a5       	ldd	r26, Y+47	; 0x2f
   18e30:	b8 a9       	ldd	r27, Y+48	; 0x30
   18e32:	ed b7       	in	r30, 0x3d	; 61
   18e34:	fe b7       	in	r31, 0x3e	; 62
   18e36:	84 83       	std	Z+4, r24	; 0x04
   18e38:	95 83       	std	Z+5, r25	; 0x05
   18e3a:	a6 83       	std	Z+6, r26	; 0x06
   18e3c:	b7 83       	std	Z+7, r27	; 0x07
   18e3e:	87 e8       	ldi	r24, 0x87	; 135
   18e40:	92 e4       	ldi	r25, 0x42	; 66
   18e42:	a0 e0       	ldi	r26, 0x00	; 0
   18e44:	81 83       	std	Z+1, r24	; 0x01
   18e46:	92 83       	std	Z+2, r25	; 0x02
   18e48:	a3 83       	std	Z+3, r26	; 0x03
   18e4a:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   18e4e:	8d a9       	ldd	r24, Y+53	; 0x35
   18e50:	9e a9       	ldd	r25, Y+54	; 0x36
   18e52:	af a9       	ldd	r26, Y+55	; 0x37
   18e54:	b8 ad       	ldd	r27, Y+56	; 0x38
   18e56:	ed b7       	in	r30, 0x3d	; 61
   18e58:	fe b7       	in	r31, 0x3e	; 62
   18e5a:	84 83       	std	Z+4, r24	; 0x04
   18e5c:	95 83       	std	Z+5, r25	; 0x05
   18e5e:	a6 83       	std	Z+6, r26	; 0x06
   18e60:	b7 83       	std	Z+7, r27	; 0x07
   18e62:	8a e6       	ldi	r24, 0x6A	; 106
   18e64:	92 e4       	ldi	r25, 0x42	; 66
   18e66:	a0 e0       	ldi	r26, 0x00	; 0
   18e68:	81 83       	std	Z+1, r24	; 0x01
   18e6a:	92 83       	std	Z+2, r25	; 0x02
   18e6c:	a3 83       	std	Z+3, r26	; 0x03
   18e6e:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   18e72:	89 a9       	ldd	r24, Y+49	; 0x31
   18e74:	9a a9       	ldd	r25, Y+50	; 0x32
   18e76:	ed b7       	in	r30, 0x3d	; 61
   18e78:	fe b7       	in	r31, 0x3e	; 62
   18e7a:	95 83       	std	Z+5, r25	; 0x05
   18e7c:	84 83       	std	Z+4, r24	; 0x04
   18e7e:	8e e4       	ldi	r24, 0x4E	; 78
   18e80:	92 e4       	ldi	r25, 0x42	; 66
   18e82:	a0 e0       	ldi	r26, 0x00	; 0
   18e84:	81 83       	std	Z+1, r24	; 0x01
   18e86:	92 83       	std	Z+2, r25	; 0x02
   18e88:	a3 83       	std	Z+3, r26	; 0x03
   18e8a:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   18e8e:	89 ad       	ldd	r24, Y+57	; 0x39
   18e90:	9a ad       	ldd	r25, Y+58	; 0x3a
   18e92:	ed b7       	in	r30, 0x3d	; 61
   18e94:	fe b7       	in	r31, 0x3e	; 62
   18e96:	95 83       	std	Z+5, r25	; 0x05
   18e98:	84 83       	std	Z+4, r24	; 0x04
   18e9a:	82 e3       	ldi	r24, 0x32	; 50
   18e9c:	92 e4       	ldi	r25, 0x42	; 66
   18e9e:	a0 e0       	ldi	r26, 0x00	; 0
   18ea0:	81 83       	std	Z+1, r24	; 0x01
   18ea2:	92 83       	std	Z+2, r25	; 0x02
   18ea4:	a3 83       	std	Z+3, r26	; 0x03
   18ea6:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   18eaa:	ce 01       	movw	r24, r28
   18eac:	87 5b       	subi	r24, 0xB7	; 183
   18eae:	9f 4f       	sbci	r25, 0xFF	; 255
   18eb0:	ab de       	rcall	.-682    	; 0x18c08 <lif_lifbcd2timestr>
   18eb2:	ed b7       	in	r30, 0x3d	; 61
   18eb4:	fe b7       	in	r31, 0x3e	; 62
   18eb6:	95 83       	std	Z+5, r25	; 0x05
   18eb8:	84 83       	std	Z+4, r24	; 0x04
   18eba:	88 e1       	ldi	r24, 0x18	; 24
   18ebc:	92 e4       	ldi	r25, 0x42	; 66
   18ebe:	a0 e0       	ldi	r26, 0x00	; 0
   18ec0:	81 83       	std	Z+1, r24	; 0x01
   18ec2:	92 83       	std	Z+2, r25	; 0x02
   18ec4:	a3 83       	std	Z+3, r26	; 0x03
   18ec6:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   18eca:	ce 01       	movw	r24, r28
   18ecc:	81 5b       	subi	r24, 0xB1	; 177
   18ece:	9f 4f       	sbci	r25, 0xFF	; 255
   18ed0:	ed b7       	in	r30, 0x3d	; 61
   18ed2:	fe b7       	in	r31, 0x3e	; 62
   18ed4:	95 83       	std	Z+5, r25	; 0x05
   18ed6:	84 83       	std	Z+4, r24	; 0x04
   18ed8:	8e ef       	ldi	r24, 0xFE	; 254
   18eda:	91 e4       	ldi	r25, 0x41	; 65
   18edc:	a0 e0       	ldi	r26, 0x00	; 0
   18ede:	81 83       	std	Z+1, r24	; 0x01
   18ee0:	92 83       	std	Z+2, r25	; 0x02
   18ee2:	a3 83       	std	Z+3, r26	; 0x03
   18ee4:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   18ee8:	fe 01       	movw	r30, r28
   18eea:	e6 5a       	subi	r30, 0xA6	; 166
   18eec:	ff 4f       	sbci	r31, 0xFF	; 255
   18eee:	80 81       	ld	r24, Z
   18ef0:	91 81       	ldd	r25, Z+1	; 0x01
   18ef2:	ed b7       	in	r30, 0x3d	; 61
   18ef4:	fe b7       	in	r31, 0x3e	; 62
   18ef6:	95 83       	std	Z+5, r25	; 0x05
   18ef8:	84 83       	std	Z+4, r24	; 0x04
   18efa:	82 ee       	ldi	r24, 0xE2	; 226
   18efc:	91 e4       	ldi	r25, 0x41	; 65
   18efe:	a0 e0       	ldi	r26, 0x00	; 0
   18f00:	81 83       	std	Z+1, r24	; 0x01
   18f02:	92 83       	std	Z+2, r25	; 0x02
   18f04:	a3 83       	std	Z+3, r26	; 0x03
   18f06:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   18f0a:	fe 01       	movw	r30, r28
   18f0c:	e6 59       	subi	r30, 0x96	; 150
   18f0e:	ff 4f       	sbci	r31, 0xFF	; 255
   18f10:	80 81       	ld	r24, Z
   18f12:	91 81       	ldd	r25, Z+1	; 0x01
   18f14:	ed b7       	in	r30, 0x3d	; 61
   18f16:	fe b7       	in	r31, 0x3e	; 62
   18f18:	95 83       	std	Z+5, r25	; 0x05
   18f1a:	84 83       	std	Z+4, r24	; 0x04
   18f1c:	86 ec       	ldi	r24, 0xC6	; 198
   18f1e:	91 e4       	ldi	r25, 0x41	; 65
   18f20:	a0 e0       	ldi	r26, 0x00	; 0
   18f22:	81 83       	std	Z+1, r24	; 0x01
   18f24:	92 83       	std	Z+2, r25	; 0x02
   18f26:	a3 83       	std	Z+3, r26	; 0x03
   18f28:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   18f2c:	fe 01       	movw	r30, r28
   18f2e:	e4 5a       	subi	r30, 0xA4	; 164
   18f30:	ff 4f       	sbci	r31, 0xFF	; 255
   18f32:	80 81       	ld	r24, Z
   18f34:	91 81       	ldd	r25, Z+1	; 0x01
   18f36:	a2 81       	ldd	r26, Z+2	; 0x02
   18f38:	b3 81       	ldd	r27, Z+3	; 0x03
   18f3a:	ed b7       	in	r30, 0x3d	; 61
   18f3c:	fe b7       	in	r31, 0x3e	; 62
   18f3e:	84 83       	std	Z+4, r24	; 0x04
   18f40:	95 83       	std	Z+5, r25	; 0x05
   18f42:	a6 83       	std	Z+6, r26	; 0x06
   18f44:	b7 83       	std	Z+7, r27	; 0x07
   18f46:	89 ea       	ldi	r24, 0xA9	; 169
   18f48:	91 e4       	ldi	r25, 0x41	; 65
   18f4a:	a0 e0       	ldi	r26, 0x00	; 0
   18f4c:	81 83       	std	Z+1, r24	; 0x01
   18f4e:	92 83       	std	Z+2, r25	; 0x02
   18f50:	a3 83       	std	Z+3, r26	; 0x03
   18f52:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   18f56:	fe 01       	movw	r30, r28
   18f58:	e0 5a       	subi	r30, 0xA0	; 160
   18f5a:	ff 4f       	sbci	r31, 0xFF	; 255
   18f5c:	80 81       	ld	r24, Z
   18f5e:	91 81       	ldd	r25, Z+1	; 0x01
   18f60:	a2 81       	ldd	r26, Z+2	; 0x02
   18f62:	b3 81       	ldd	r27, Z+3	; 0x03
   18f64:	ed b7       	in	r30, 0x3d	; 61
   18f66:	fe b7       	in	r31, 0x3e	; 62
   18f68:	84 83       	std	Z+4, r24	; 0x04
   18f6a:	95 83       	std	Z+5, r25	; 0x05
   18f6c:	a6 83       	std	Z+6, r26	; 0x06
   18f6e:	b7 83       	std	Z+7, r27	; 0x07
   18f70:	8c e8       	ldi	r24, 0x8C	; 140
   18f72:	91 e4       	ldi	r25, 0x41	; 65
   18f74:	a0 e0       	ldi	r26, 0x00	; 0
   18f76:	81 83       	std	Z+1, r24	; 0x01
   18f78:	92 83       	std	Z+2, r25	; 0x02
   18f7a:	a3 83       	std	Z+3, r26	; 0x03
   18f7c:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   18f80:	fe 01       	movw	r30, r28
   18f82:	e4 59       	subi	r30, 0x94	; 148
   18f84:	ff 4f       	sbci	r31, 0xFF	; 255
   18f86:	80 81       	ld	r24, Z
   18f88:	91 81       	ldd	r25, Z+1	; 0x01
   18f8a:	a0 e0       	ldi	r26, 0x00	; 0
   18f8c:	b0 e0       	ldi	r27, 0x00	; 0
   18f8e:	ed b7       	in	r30, 0x3d	; 61
   18f90:	fe b7       	in	r31, 0x3e	; 62
   18f92:	84 83       	std	Z+4, r24	; 0x04
   18f94:	95 83       	std	Z+5, r25	; 0x05
   18f96:	a6 83       	std	Z+6, r26	; 0x06
   18f98:	b7 83       	std	Z+7, r27	; 0x07
   18f9a:	8f e6       	ldi	r24, 0x6F	; 111
   18f9c:	91 e4       	ldi	r25, 0x41	; 65
   18f9e:	a0 e0       	ldi	r26, 0x00	; 0
   18fa0:	81 83       	std	Z+1, r24	; 0x01
   18fa2:	92 83       	std	Z+2, r25	; 0x02
   18fa4:	a3 83       	std	Z+3, r26	; 0x03
   18fa6:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   18faa:	fe 01       	movw	r30, r28
   18fac:	e2 59       	subi	r30, 0x92	; 146
   18fae:	ff 4f       	sbci	r31, 0xFF	; 255
   18fb0:	80 81       	ld	r24, Z
   18fb2:	91 81       	ldd	r25, Z+1	; 0x01
   18fb4:	ed b7       	in	r30, 0x3d	; 61
   18fb6:	fe b7       	in	r31, 0x3e	; 62
   18fb8:	95 83       	std	Z+5, r25	; 0x05
   18fba:	84 83       	std	Z+4, r24	; 0x04
   18fbc:	83 e5       	ldi	r24, 0x53	; 83
   18fbe:	91 e4       	ldi	r25, 0x41	; 65
   18fc0:	a0 e0       	ldi	r26, 0x00	; 0
   18fc2:	81 83       	std	Z+1, r24	; 0x01
   18fc4:	92 83       	std	Z+2, r25	; 0x02
   18fc6:	a3 83       	std	Z+3, r26	; 0x03
   18fc8:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   18fcc:	ce 01       	movw	r24, r28
   18fce:	8c 59       	subi	r24, 0x9C	; 156
   18fd0:	9f 4f       	sbci	r25, 0xFF	; 255
   18fd2:	1a de       	rcall	.-972    	; 0x18c08 <lif_lifbcd2timestr>
   18fd4:	ed b7       	in	r30, 0x3d	; 61
   18fd6:	fe b7       	in	r31, 0x3e	; 62
   18fd8:	95 83       	std	Z+5, r25	; 0x05
   18fda:	84 83       	std	Z+4, r24	; 0x04
   18fdc:	89 e3       	ldi	r24, 0x39	; 57
   18fde:	91 e4       	ldi	r25, 0x41	; 65
   18fe0:	a0 e0       	ldi	r26, 0x00	; 0
   18fe2:	81 83       	std	Z+1, r24	; 0x01
   18fe4:	92 83       	std	Z+2, r25	; 0x02
   18fe6:	a3 83       	std	Z+3, r26	; 0x03
   18fe8:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   18fec:	87 e3       	ldi	r24, 0x37	; 55
   18fee:	91 e4       	ldi	r25, 0x41	; 65
   18ff0:	a0 e0       	ldi	r26, 0x00	; 0
   18ff2:	ed b7       	in	r30, 0x3d	; 61
   18ff4:	fe b7       	in	r31, 0x3e	; 62
   18ff6:	81 83       	std	Z+1, r24	; 0x01
   18ff8:	92 83       	std	Z+2, r25	; 0x02
   18ffa:	a3 83       	std	Z+3, r26	; 0x03
   18ffc:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   19000:	cd b7       	in	r28, 0x3d	; 61
   19002:	de b7       	in	r29, 0x3e	; 62
   19004:	27 96       	adiw	r28, 0x07	; 7
   19006:	e2 e0       	ldi	r30, 0x02	; 2
   19008:	0c 94 2b e7 	jmp	0x1ce56	; 0x1ce56 <__epilogue_restores__+0x20>

0001900c <lif_check_volume>:
   1900c:	0f 93       	push	r16
   1900e:	1f 93       	push	r17
   19010:	cf 93       	push	r28
   19012:	df 93       	push	r29
   19014:	ad b7       	in	r26, 0x3d	; 61
   19016:	be b7       	in	r27, 0x3e	; 62
   19018:	17 97       	sbiw	r26, 0x07	; 7
   1901a:	0f b6       	in	r0, 0x3f	; 63
   1901c:	f8 94       	cli
   1901e:	be bf       	out	0x3e, r27	; 62
   19020:	0f be       	out	0x3f, r0	; 63
   19022:	ad bf       	out	0x3d, r26	; 61
   19024:	ec 01       	movw	r28, r24
   19026:	86 96       	adiw	r24, 0x26	; 38
   19028:	e0 da       	rcall	.-2624   	; 0x185ea <lif_checkname>
   1902a:	89 2b       	or	r24, r25
   1902c:	89 f4       	brne	.+34     	; 0x19050 <lif_check_volume+0x44>
   1902e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19032:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19036:	92 ff       	sbrs	r25, 2
   19038:	0e c0       	rjmp	.+28     	; 0x19056 <lif_check_volume+0x4a>
   1903a:	88 e1       	ldi	r24, 0x18	; 24
   1903c:	91 e4       	ldi	r25, 0x41	; 65
   1903e:	a0 e0       	ldi	r26, 0x00	; 0
   19040:	ed b7       	in	r30, 0x3d	; 61
   19042:	fe b7       	in	r31, 0x3e	; 62
   19044:	81 83       	std	Z+1, r24	; 0x01
   19046:	92 83       	std	Z+2, r25	; 0x02
   19048:	a3 83       	std	Z+3, r26	; 0x03
   1904a:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   1904e:	03 c0       	rjmp	.+6      	; 0x19056 <lif_check_volume+0x4a>
   19050:	81 e0       	ldi	r24, 0x01	; 1
   19052:	90 e0       	ldi	r25, 0x00	; 0
   19054:	02 c0       	rjmp	.+4      	; 0x1905a <lif_check_volume+0x4e>
   19056:	80 e0       	ldi	r24, 0x00	; 0
   19058:	90 e0       	ldi	r25, 0x00	; 0
   1905a:	29 a9       	ldd	r18, Y+49	; 0x31
   1905c:	3a a9       	ldd	r19, Y+50	; 0x32
   1905e:	21 15       	cp	r18, r1
   19060:	f0 e1       	ldi	r31, 0x10	; 16
   19062:	3f 07       	cpc	r19, r31
   19064:	a1 f0       	breq	.+40     	; 0x1908e <lif_check_volume+0x82>
   19066:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1906a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1906e:	92 ff       	sbrs	r25, 2
   19070:	0c c0       	rjmp	.+24     	; 0x1908a <lif_check_volume+0x7e>
   19072:	ed b7       	in	r30, 0x3d	; 61
   19074:	fe b7       	in	r31, 0x3e	; 62
   19076:	35 83       	std	Z+5, r19	; 0x05
   19078:	24 83       	std	Z+4, r18	; 0x04
   1907a:	8f ed       	ldi	r24, 0xDF	; 223
   1907c:	90 e4       	ldi	r25, 0x40	; 64
   1907e:	a0 e0       	ldi	r26, 0x00	; 0
   19080:	81 83       	std	Z+1, r24	; 0x01
   19082:	92 83       	std	Z+2, r25	; 0x02
   19084:	a3 83       	std	Z+3, r26	; 0x03
   19086:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   1908a:	80 e0       	ldi	r24, 0x00	; 0
   1908c:	90 e0       	ldi	r25, 0x00	; 0
   1908e:	29 ad       	ldd	r18, Y+57	; 0x39
   19090:	3a ad       	ldd	r19, Y+58	; 0x3a
   19092:	22 30       	cpi	r18, 0x02	; 2
   19094:	31 05       	cpc	r19, r1
   19096:	a0 f0       	brcs	.+40     	; 0x190c0 <lif_check_volume+0xb4>
   19098:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1909c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   190a0:	92 ff       	sbrs	r25, 2
   190a2:	0c c0       	rjmp	.+24     	; 0x190bc <lif_check_volume+0xb0>
   190a4:	ed b7       	in	r30, 0x3d	; 61
   190a6:	fe b7       	in	r31, 0x3e	; 62
   190a8:	35 83       	std	Z+5, r19	; 0x05
   190aa:	24 83       	std	Z+4, r18	; 0x04
   190ac:	87 ec       	ldi	r24, 0xC7	; 199
   190ae:	90 e4       	ldi	r25, 0x40	; 64
   190b0:	a0 e0       	ldi	r26, 0x00	; 0
   190b2:	81 83       	std	Z+1, r24	; 0x01
   190b4:	92 83       	std	Z+2, r25	; 0x02
   190b6:	a3 83       	std	Z+3, r26	; 0x03
   190b8:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   190bc:	80 e0       	ldi	r24, 0x00	; 0
   190be:	90 e0       	ldi	r25, 0x00	; 0
   190c0:	2b a9       	ldd	r18, Y+51	; 0x33
   190c2:	3c a9       	ldd	r19, Y+52	; 0x34
   190c4:	23 2b       	or	r18, r19
   190c6:	91 f0       	breq	.+36     	; 0x190ec <lif_check_volume+0xe0>
   190c8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   190cc:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   190d0:	92 ff       	sbrs	r25, 2
   190d2:	0a c0       	rjmp	.+20     	; 0x190e8 <lif_check_volume+0xdc>
   190d4:	8e e8       	ldi	r24, 0x8E	; 142
   190d6:	90 e4       	ldi	r25, 0x40	; 64
   190d8:	a0 e0       	ldi	r26, 0x00	; 0
   190da:	ed b7       	in	r30, 0x3d	; 61
   190dc:	fe b7       	in	r31, 0x3e	; 62
   190de:	81 83       	std	Z+1, r24	; 0x01
   190e0:	92 83       	std	Z+2, r25	; 0x02
   190e2:	a3 83       	std	Z+3, r26	; 0x03
   190e4:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   190e8:	80 e0       	ldi	r24, 0x00	; 0
   190ea:	90 e0       	ldi	r25, 0x00	; 0
   190ec:	2b ad       	ldd	r18, Y+59	; 0x3b
   190ee:	3c ad       	ldd	r19, Y+60	; 0x3c
   190f0:	23 2b       	or	r18, r19
   190f2:	91 f0       	breq	.+36     	; 0x19118 <lif_check_volume+0x10c>
   190f4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   190f8:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   190fc:	92 ff       	sbrs	r25, 2
   190fe:	0a c0       	rjmp	.+20     	; 0x19114 <lif_check_volume+0x108>
   19100:	85 e5       	ldi	r24, 0x55	; 85
   19102:	90 e4       	ldi	r25, 0x40	; 64
   19104:	a0 e0       	ldi	r26, 0x00	; 0
   19106:	ed b7       	in	r30, 0x3d	; 61
   19108:	fe b7       	in	r31, 0x3e	; 62
   1910a:	81 83       	std	Z+1, r24	; 0x01
   1910c:	92 83       	std	Z+2, r25	; 0x02
   1910e:	a3 83       	std	Z+3, r26	; 0x03
   19110:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   19114:	80 e0       	ldi	r24, 0x00	; 0
   19116:	90 e0       	ldi	r25, 0x00	; 0
   19118:	4d a5       	ldd	r20, Y+45	; 0x2d
   1911a:	5e a5       	ldd	r21, Y+46	; 0x2e
   1911c:	6f a5       	ldd	r22, Y+47	; 0x2f
   1911e:	78 a9       	ldd	r23, Y+48	; 0x30
   19120:	45 2b       	or	r20, r21
   19122:	46 2b       	or	r20, r22
   19124:	47 2b       	or	r20, r23
   19126:	b1 f4       	brne	.+44     	; 0x19154 <lif_check_volume+0x148>
   19128:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1912c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19130:	92 ff       	sbrs	r25, 2
   19132:	0e c0       	rjmp	.+28     	; 0x19150 <lif_check_volume+0x144>
   19134:	ed b7       	in	r30, 0x3d	; 61
   19136:	fe b7       	in	r31, 0x3e	; 62
   19138:	14 82       	std	Z+4, r1	; 0x04
   1913a:	15 82       	std	Z+5, r1	; 0x05
   1913c:	16 82       	std	Z+6, r1	; 0x06
   1913e:	17 82       	std	Z+7, r1	; 0x07
   19140:	80 e3       	ldi	r24, 0x30	; 48
   19142:	90 e4       	ldi	r25, 0x40	; 64
   19144:	a0 e0       	ldi	r26, 0x00	; 0
   19146:	81 83       	std	Z+1, r24	; 0x01
   19148:	92 83       	std	Z+2, r25	; 0x02
   1914a:	a3 83       	std	Z+3, r26	; 0x03
   1914c:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   19150:	80 e0       	ldi	r24, 0x00	; 0
   19152:	90 e0       	ldi	r25, 0x00	; 0
   19154:	4d a9       	ldd	r20, Y+53	; 0x35
   19156:	5e a9       	ldd	r21, Y+54	; 0x36
   19158:	6f a9       	ldd	r22, Y+55	; 0x37
   1915a:	78 ad       	ldd	r23, Y+56	; 0x38
   1915c:	45 2b       	or	r20, r21
   1915e:	46 2b       	or	r20, r22
   19160:	47 2b       	or	r20, r23
   19162:	91 f4       	brne	.+36     	; 0x19188 <lif_check_volume+0x17c>
   19164:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19168:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1916c:	92 ff       	sbrs	r25, 2
   1916e:	0a c0       	rjmp	.+20     	; 0x19184 <lif_check_volume+0x178>
   19170:	81 e0       	ldi	r24, 0x01	; 1
   19172:	90 e4       	ldi	r25, 0x40	; 64
   19174:	a0 e0       	ldi	r26, 0x00	; 0
   19176:	ed b7       	in	r30, 0x3d	; 61
   19178:	fe b7       	in	r31, 0x3e	; 62
   1917a:	81 83       	std	Z+1, r24	; 0x01
   1917c:	92 83       	std	Z+2, r25	; 0x02
   1917e:	a3 83       	std	Z+3, r26	; 0x03
   19180:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   19184:	80 e0       	ldi	r24, 0x00	; 0
   19186:	90 e0       	ldi	r25, 0x00	; 0
   19188:	0d a5       	ldd	r16, Y+45	; 0x2d
   1918a:	1e a5       	ldd	r17, Y+46	; 0x2e
   1918c:	2f a5       	ldd	r18, Y+47	; 0x2f
   1918e:	38 a9       	ldd	r19, Y+48	; 0x30
   19190:	4d a9       	ldd	r20, Y+53	; 0x35
   19192:	5e a9       	ldd	r21, Y+54	; 0x36
   19194:	6f a9       	ldd	r22, Y+55	; 0x37
   19196:	78 ad       	ldd	r23, Y+56	; 0x38
   19198:	40 0f       	add	r20, r16
   1919a:	51 1f       	adc	r21, r17
   1919c:	62 1f       	adc	r22, r18
   1919e:	73 1f       	adc	r23, r19
   191a0:	0c 81       	ldd	r16, Y+4	; 0x04
   191a2:	1d 81       	ldd	r17, Y+5	; 0x05
   191a4:	2e 81       	ldd	r18, Y+6	; 0x06
   191a6:	3f 81       	ldd	r19, Y+7	; 0x07
   191a8:	04 17       	cp	r16, r20
   191aa:	15 07       	cpc	r17, r21
   191ac:	26 07       	cpc	r18, r22
   191ae:	37 07       	cpc	r19, r23
   191b0:	90 f4       	brcc	.+36     	; 0x191d6 <lif_check_volume+0x1ca>
   191b2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   191b6:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   191ba:	92 ff       	sbrs	r25, 2
   191bc:	0a c0       	rjmp	.+20     	; 0x191d2 <lif_check_volume+0x1c6>
   191be:	85 ed       	ldi	r24, 0xD5	; 213
   191c0:	9f e3       	ldi	r25, 0x3F	; 63
   191c2:	a0 e0       	ldi	r26, 0x00	; 0
   191c4:	ed b7       	in	r30, 0x3d	; 61
   191c6:	fe b7       	in	r31, 0x3e	; 62
   191c8:	81 83       	std	Z+1, r24	; 0x01
   191ca:	92 83       	std	Z+2, r25	; 0x02
   191cc:	a3 83       	std	Z+3, r26	; 0x03
   191ce:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   191d2:	80 e0       	ldi	r24, 0x00	; 0
   191d4:	90 e0       	ldi	r25, 0x00	; 0
   191d6:	cd b7       	in	r28, 0x3d	; 61
   191d8:	de b7       	in	r29, 0x3e	; 62
   191da:	27 96       	adiw	r28, 0x07	; 7
   191dc:	e4 e0       	ldi	r30, 0x04	; 4
   191de:	0c 94 29 e7 	jmp	0x1ce52	; 0x1ce52 <__epilogue_restores__+0x1c>

000191e2 <lif_check_dir>:
   191e2:	a5 e1       	ldi	r26, 0x15	; 21
   191e4:	b0 e0       	ldi	r27, 0x00	; 0
   191e6:	e7 ef       	ldi	r30, 0xF7	; 247
   191e8:	f8 ec       	ldi	r31, 0xC8	; 200
   191ea:	0c 94 ff e6 	jmp	0x1cdfe	; 0x1cdfe <__prologue_saves__>
   191ee:	6c 01       	movw	r12, r24
   191f0:	2a e5       	ldi	r18, 0x5A	; 90
   191f2:	c2 0e       	add	r12, r18
   191f4:	d1 1c       	adc	r13, r1
   191f6:	f6 01       	movw	r30, r12
   191f8:	20 81       	ld	r18, Z
   191fa:	31 81       	ldd	r19, Z+1	; 0x01
   191fc:	21 50       	subi	r18, 0x01	; 1
   191fe:	31 09       	sbc	r19, r1
   19200:	2e 3f       	cpi	r18, 0xFE	; 254
   19202:	3f 4f       	sbci	r19, 0xFF	; 255
   19204:	08 f0       	brcs	.+2      	; 0x19208 <lif_check_dir+0x26>
   19206:	9a c1       	rjmp	.+820    	; 0x1953c <lif_check_dir+0x35a>
   19208:	9d 8b       	std	Y+21, r25	; 0x15
   1920a:	8c 8b       	std	Y+20, r24	; 0x14
   1920c:	7c 01       	movw	r14, r24
   1920e:	2f e4       	ldi	r18, 0x4F	; 79
   19210:	e2 0e       	add	r14, r18
   19212:	f1 1c       	adc	r15, r1
   19214:	c7 01       	movw	r24, r14
   19216:	e9 d9       	rcall	.-3118   	; 0x185ea <lif_checkname>
   19218:	89 2b       	or	r24, r25
   1921a:	99 f4       	brne	.+38     	; 0x19242 <lif_check_dir+0x60>
   1921c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19220:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19224:	92 ff       	sbrs	r25, 2
   19226:	0f c0       	rjmp	.+30     	; 0x19246 <lif_check_dir+0x64>
   19228:	ed b7       	in	r30, 0x3d	; 61
   1922a:	fe b7       	in	r31, 0x3e	; 62
   1922c:	f5 82       	std	Z+5, r15	; 0x05
   1922e:	e4 82       	std	Z+4, r14	; 0x04
   19230:	84 eb       	ldi	r24, 0xB4	; 180
   19232:	9f e3       	ldi	r25, 0x3F	; 63
   19234:	a0 e0       	ldi	r26, 0x00	; 0
   19236:	81 83       	std	Z+1, r24	; 0x01
   19238:	92 83       	std	Z+2, r25	; 0x02
   1923a:	a3 83       	std	Z+3, r26	; 0x03
   1923c:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   19240:	02 c0       	rjmp	.+4      	; 0x19246 <lif_check_dir+0x64>
   19242:	01 e0       	ldi	r16, 0x01	; 1
   19244:	01 c0       	rjmp	.+2      	; 0x19248 <lif_check_dir+0x66>
   19246:	00 e0       	ldi	r16, 0x00	; 0
   19248:	10 e0       	ldi	r17, 0x00	; 0
   1924a:	ec 89       	ldd	r30, Y+20	; 0x14
   1924c:	fd 89       	ldd	r31, Y+21	; 0x15
   1924e:	84 85       	ldd	r24, Z+12	; 0x0c
   19250:	95 85       	ldd	r25, Z+13	; 0x0d
   19252:	a6 85       	ldd	r26, Z+14	; 0x0e
   19254:	b7 85       	ldd	r27, Z+15	; 0x0f
   19256:	00 97       	sbiw	r24, 0x00	; 0
   19258:	a1 05       	cpc	r26, r1
   1925a:	b1 05       	cpc	r27, r1
   1925c:	39 f1       	breq	.+78     	; 0x192ac <lif_check_dir+0xca>
   1925e:	e4 5a       	subi	r30, 0xA4	; 164
   19260:	ff 4f       	sbci	r31, 0xFF	; 255
   19262:	40 81       	ld	r20, Z
   19264:	51 81       	ldd	r21, Z+1	; 0x01
   19266:	62 81       	ldd	r22, Z+2	; 0x02
   19268:	73 81       	ldd	r23, Z+3	; 0x03
   1926a:	48 17       	cp	r20, r24
   1926c:	59 07       	cpc	r21, r25
   1926e:	6a 07       	cpc	r22, r26
   19270:	7b 07       	cpc	r23, r27
   19272:	e0 f4       	brcc	.+56     	; 0x192ac <lif_check_dir+0xca>
   19274:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   19278:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1927c:	32 ff       	sbrs	r19, 2
   1927e:	14 c0       	rjmp	.+40     	; 0x192a8 <lif_check_dir+0xc6>
   19280:	ed b7       	in	r30, 0x3d	; 61
   19282:	fe b7       	in	r31, 0x3e	; 62
   19284:	82 87       	std	Z+10, r24	; 0x0a
   19286:	93 87       	std	Z+11, r25	; 0x0b
   19288:	a4 87       	std	Z+12, r26	; 0x0c
   1928a:	b5 87       	std	Z+13, r27	; 0x0d
   1928c:	46 83       	std	Z+6, r20	; 0x06
   1928e:	57 83       	std	Z+7, r21	; 0x07
   19290:	60 87       	std	Z+8, r22	; 0x08
   19292:	71 87       	std	Z+9, r23	; 0x09
   19294:	f5 82       	std	Z+5, r15	; 0x05
   19296:	e4 82       	std	Z+4, r14	; 0x04
   19298:	80 e7       	ldi	r24, 0x70	; 112
   1929a:	9f e3       	ldi	r25, 0x3F	; 63
   1929c:	a0 e0       	ldi	r26, 0x00	; 0
   1929e:	81 83       	std	Z+1, r24	; 0x01
   192a0:	92 83       	std	Z+2, r25	; 0x02
   192a2:	a3 83       	std	Z+3, r26	; 0x03
   192a4:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   192a8:	00 e0       	ldi	r16, 0x00	; 0
   192aa:	10 e0       	ldi	r17, 0x00	; 0
   192ac:	ec 89       	ldd	r30, Y+20	; 0x14
   192ae:	fd 89       	ldd	r31, Y+21	; 0x15
   192b0:	44 81       	ldd	r20, Z+4	; 0x04
   192b2:	55 81       	ldd	r21, Z+5	; 0x05
   192b4:	66 81       	ldd	r22, Z+6	; 0x06
   192b6:	77 81       	ldd	r23, Z+7	; 0x07
   192b8:	41 15       	cp	r20, r1
   192ba:	51 05       	cpc	r21, r1
   192bc:	61 05       	cpc	r22, r1
   192be:	71 05       	cpc	r23, r1
   192c0:	99 f1       	breq	.+102    	; 0x19328 <lif_check_dir+0x146>
   192c2:	e4 5a       	subi	r30, 0xA4	; 164
   192c4:	ff 4f       	sbci	r31, 0xFF	; 255
   192c6:	80 80       	ld	r8, Z
   192c8:	91 80       	ldd	r9, Z+1	; 0x01
   192ca:	a2 80       	ldd	r10, Z+2	; 0x02
   192cc:	b3 80       	ldd	r11, Z+3	; 0x03
   192ce:	ec 89       	ldd	r30, Y+20	; 0x14
   192d0:	fd 89       	ldd	r31, Y+21	; 0x15
   192d2:	e0 5a       	subi	r30, 0xA0	; 160
   192d4:	ff 4f       	sbci	r31, 0xFF	; 255
   192d6:	80 81       	ld	r24, Z
   192d8:	91 81       	ldd	r25, Z+1	; 0x01
   192da:	a2 81       	ldd	r26, Z+2	; 0x02
   192dc:	b3 81       	ldd	r27, Z+3	; 0x03
   192de:	88 0d       	add	r24, r8
   192e0:	99 1d       	adc	r25, r9
   192e2:	aa 1d       	adc	r26, r10
   192e4:	bb 1d       	adc	r27, r11
   192e6:	48 17       	cp	r20, r24
   192e8:	59 07       	cpc	r21, r25
   192ea:	6a 07       	cpc	r22, r26
   192ec:	7b 07       	cpc	r23, r27
   192ee:	e0 f4       	brcc	.+56     	; 0x19328 <lif_check_dir+0x146>
   192f0:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   192f4:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   192f8:	32 ff       	sbrs	r19, 2
   192fa:	14 c0       	rjmp	.+40     	; 0x19324 <lif_check_dir+0x142>
   192fc:	ed b7       	in	r30, 0x3d	; 61
   192fe:	fe b7       	in	r31, 0x3e	; 62
   19300:	42 87       	std	Z+10, r20	; 0x0a
   19302:	53 87       	std	Z+11, r21	; 0x0b
   19304:	64 87       	std	Z+12, r22	; 0x0c
   19306:	75 87       	std	Z+13, r23	; 0x0d
   19308:	86 83       	std	Z+6, r24	; 0x06
   1930a:	97 83       	std	Z+7, r25	; 0x07
   1930c:	a0 87       	std	Z+8, r26	; 0x08
   1930e:	b1 87       	std	Z+9, r27	; 0x09
   19310:	f5 82       	std	Z+5, r15	; 0x05
   19312:	e4 82       	std	Z+4, r14	; 0x04
   19314:	8f e2       	ldi	r24, 0x2F	; 47
   19316:	9f e3       	ldi	r25, 0x3F	; 63
   19318:	a0 e0       	ldi	r26, 0x00	; 0
   1931a:	81 83       	std	Z+1, r24	; 0x01
   1931c:	92 83       	std	Z+2, r25	; 0x02
   1931e:	a3 83       	std	Z+3, r26	; 0x03
   19320:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   19324:	00 e0       	ldi	r16, 0x00	; 0
   19326:	10 e0       	ldi	r17, 0x00	; 0
   19328:	ec 89       	ldd	r30, Y+20	; 0x14
   1932a:	fd 89       	ldd	r31, Y+21	; 0x15
   1932c:	e6 59       	subi	r30, 0x96	; 150
   1932e:	ff 4f       	sbci	r31, 0xFF	; 255
   19330:	80 81       	ld	r24, Z
   19332:	91 81       	ldd	r25, Z+1	; 0x01
   19334:	81 30       	cpi	r24, 0x01	; 1
   19336:	f0 e8       	ldi	r31, 0x80	; 128
   19338:	9f 07       	cpc	r25, r31
   1933a:	b1 f0       	breq	.+44     	; 0x19368 <lif_check_dir+0x186>
   1933c:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   19340:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19344:	32 ff       	sbrs	r19, 2
   19346:	0e c0       	rjmp	.+28     	; 0x19364 <lif_check_dir+0x182>
   19348:	ed b7       	in	r30, 0x3d	; 61
   1934a:	fe b7       	in	r31, 0x3e	; 62
   1934c:	97 83       	std	Z+7, r25	; 0x07
   1934e:	86 83       	std	Z+6, r24	; 0x06
   19350:	f5 82       	std	Z+5, r15	; 0x05
   19352:	e4 82       	std	Z+4, r14	; 0x04
   19354:	81 e0       	ldi	r24, 0x01	; 1
   19356:	9f e3       	ldi	r25, 0x3F	; 63
   19358:	a0 e0       	ldi	r26, 0x00	; 0
   1935a:	81 83       	std	Z+1, r24	; 0x01
   1935c:	92 83       	std	Z+2, r25	; 0x02
   1935e:	a3 83       	std	Z+3, r26	; 0x03
   19360:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   19364:	00 e0       	ldi	r16, 0x00	; 0
   19366:	10 e0       	ldi	r17, 0x00	; 0
   19368:	f6 01       	movw	r30, r12
   1936a:	80 81       	ld	r24, Z
   1936c:	91 81       	ldd	r25, Z+1	; 0x01
   1936e:	8c 7f       	andi	r24, 0xFC	; 252
   19370:	80 31       	cpi	r24, 0x10	; 16
   19372:	90 4e       	sbci	r25, 0xE0	; 224
   19374:	09 f0       	breq	.+2      	; 0x19378 <lif_check_dir+0x196>
   19376:	b3 c0       	rjmp	.+358    	; 0x194de <lif_check_dir+0x2fc>
   19378:	cc 88       	ldd	r12, Y+20	; 0x14
   1937a:	dd 88       	ldd	r13, Y+21	; 0x15
   1937c:	2c e6       	ldi	r18, 0x6C	; 108
   1937e:	c2 0e       	add	r12, r18
   19380:	d1 1c       	adc	r13, r1
   19382:	f6 01       	movw	r30, r12
   19384:	80 81       	ld	r24, Z
   19386:	91 81       	ldd	r25, Z+1	; 0x01
   19388:	00 97       	sbiw	r24, 0x00	; 0
   1938a:	09 f4       	brne	.+2      	; 0x1938e <lif_check_dir+0x1ac>
   1938c:	a8 c0       	rjmp	.+336    	; 0x194de <lif_check_dir+0x2fc>
   1938e:	4c 01       	movw	r8, r24
   19390:	a1 2c       	mov	r10, r1
   19392:	b1 2c       	mov	r11, r1
   19394:	77 27       	eor	r23, r23
   19396:	6b 2d       	mov	r22, r11
   19398:	5a 2d       	mov	r21, r10
   1939a:	49 2d       	mov	r20, r9
   1939c:	9c 01       	movw	r18, r24
   1939e:	33 27       	eor	r19, r19
   193a0:	3b 8b       	std	Y+19, r19	; 0x13
   193a2:	2a 8b       	std	Y+18, r18	; 0x12
   193a4:	db 01       	movw	r26, r22
   193a6:	ca 01       	movw	r24, r20
   193a8:	23 2b       	or	r18, r19
   193aa:	19 f0       	breq	.+6      	; 0x193b2 <lif_check_dir+0x1d0>
   193ac:	01 96       	adiw	r24, 0x01	; 1
   193ae:	a1 1d       	adc	r26, r1
   193b0:	b1 1d       	adc	r27, r1
   193b2:	2c 88       	ldd	r2, Y+20	; 0x14
   193b4:	3d 88       	ldd	r3, Y+21	; 0x15
   193b6:	30 e6       	ldi	r19, 0x60	; 96
   193b8:	23 0e       	add	r2, r19
   193ba:	31 1c       	adc	r3, r1
   193bc:	f1 01       	movw	r30, r2
   193be:	40 80       	ld	r4, Z
   193c0:	51 80       	ldd	r5, Z+1	; 0x01
   193c2:	62 80       	ldd	r6, Z+2	; 0x02
   193c4:	73 80       	ldd	r7, Z+3	; 0x03
   193c6:	48 16       	cp	r4, r24
   193c8:	59 06       	cpc	r5, r25
   193ca:	6a 06       	cpc	r6, r26
   193cc:	7b 06       	cpc	r7, r27
   193ce:	40 f5       	brcc	.+80     	; 0x19420 <lif_check_dir+0x23e>
   193d0:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   193d4:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   193d8:	32 ff       	sbrs	r19, 2
   193da:	20 c0       	rjmp	.+64     	; 0x1941c <lif_check_dir+0x23a>
   193dc:	2a 89       	ldd	r18, Y+18	; 0x12
   193de:	3b 89       	ldd	r19, Y+19	; 0x13
   193e0:	23 2b       	or	r18, r19
   193e2:	21 f0       	breq	.+8      	; 0x193ec <lif_check_dir+0x20a>
   193e4:	4f 5f       	subi	r20, 0xFF	; 255
   193e6:	5f 4f       	sbci	r21, 0xFF	; 255
   193e8:	6f 4f       	sbci	r22, 0xFF	; 255
   193ea:	7f 4f       	sbci	r23, 0xFF	; 255
   193ec:	ed b7       	in	r30, 0x3d	; 61
   193ee:	fe b7       	in	r31, 0x3e	; 62
   193f0:	46 86       	std	Z+14, r4	; 0x0e
   193f2:	57 86       	std	Z+15, r5	; 0x0f
   193f4:	60 8a       	std	Z+16, r6	; 0x10
   193f6:	71 8a       	std	Z+17, r7	; 0x11
   193f8:	42 87       	std	Z+10, r20	; 0x0a
   193fa:	53 87       	std	Z+11, r21	; 0x0b
   193fc:	64 87       	std	Z+12, r22	; 0x0c
   193fe:	75 87       	std	Z+13, r23	; 0x0d
   19400:	86 82       	std	Z+6, r8	; 0x06
   19402:	97 82       	std	Z+7, r9	; 0x07
   19404:	a0 86       	std	Z+8, r10	; 0x08
   19406:	b1 86       	std	Z+9, r11	; 0x09
   19408:	f5 82       	std	Z+5, r15	; 0x05
   1940a:	e4 82       	std	Z+4, r14	; 0x04
   1940c:	86 eb       	ldi	r24, 0xB6	; 182
   1940e:	9e e3       	ldi	r25, 0x3E	; 62
   19410:	a0 e0       	ldi	r26, 0x00	; 0
   19412:	81 83       	std	Z+1, r24	; 0x01
   19414:	92 83       	std	Z+2, r25	; 0x02
   19416:	a3 83       	std	Z+3, r26	; 0x03
   19418:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   1941c:	00 e0       	ldi	r16, 0x00	; 0
   1941e:	10 e0       	ldi	r17, 0x00	; 0
   19420:	f6 01       	movw	r30, r12
   19422:	20 81       	ld	r18, Z
   19424:	31 81       	ldd	r19, Z+1	; 0x01
   19426:	a9 01       	movw	r20, r18
   19428:	60 e0       	ldi	r22, 0x00	; 0
   1942a:	70 e0       	ldi	r23, 0x00	; 0
   1942c:	bb 27       	eor	r27, r27
   1942e:	a7 2f       	mov	r26, r23
   19430:	96 2f       	mov	r25, r22
   19432:	85 2f       	mov	r24, r21
   19434:	f9 01       	movw	r30, r18
   19436:	ff 27       	eor	r31, r31
   19438:	fb 8b       	std	Y+19, r31	; 0x13
   1943a:	ea 8b       	std	Y+18, r30	; 0x12
   1943c:	2c 01       	movw	r4, r24
   1943e:	3d 01       	movw	r6, r26
   19440:	ef 2b       	or	r30, r31
   19442:	29 f0       	breq	.+10     	; 0x1944e <lif_check_dir+0x26c>
   19444:	ff ef       	ldi	r31, 0xFF	; 255
   19446:	4f 1a       	sub	r4, r31
   19448:	5f 0a       	sbc	r5, r31
   1944a:	6f 0a       	sbc	r6, r31
   1944c:	7f 0a       	sbc	r7, r31
   1944e:	f1 01       	movw	r30, r2
   19450:	80 80       	ld	r8, Z
   19452:	91 80       	ldd	r9, Z+1	; 0x01
   19454:	a2 80       	ldd	r10, Z+2	; 0x02
   19456:	b3 80       	ldd	r11, Z+3	; 0x03
   19458:	48 14       	cp	r4, r8
   1945a:	59 04       	cpc	r5, r9
   1945c:	6a 04       	cpc	r6, r10
   1945e:	7b 04       	cpc	r7, r11
   19460:	28 f5       	brcc	.+74     	; 0x194ac <lif_check_dir+0x2ca>
   19462:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   19466:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1946a:	32 ff       	sbrs	r19, 2
   1946c:	1f c0       	rjmp	.+62     	; 0x194ac <lif_check_dir+0x2ca>
   1946e:	2a 89       	ldd	r18, Y+18	; 0x12
   19470:	3b 89       	ldd	r19, Y+19	; 0x13
   19472:	23 2b       	or	r18, r19
   19474:	19 f0       	breq	.+6      	; 0x1947c <lif_check_dir+0x29a>
   19476:	01 96       	adiw	r24, 0x01	; 1
   19478:	a1 1d       	adc	r26, r1
   1947a:	b1 1d       	adc	r27, r1
   1947c:	ed b7       	in	r30, 0x3d	; 61
   1947e:	fe b7       	in	r31, 0x3e	; 62
   19480:	86 86       	std	Z+14, r8	; 0x0e
   19482:	97 86       	std	Z+15, r9	; 0x0f
   19484:	a0 8a       	std	Z+16, r10	; 0x10
   19486:	b1 8a       	std	Z+17, r11	; 0x11
   19488:	82 87       	std	Z+10, r24	; 0x0a
   1948a:	93 87       	std	Z+11, r25	; 0x0b
   1948c:	a4 87       	std	Z+12, r26	; 0x0c
   1948e:	b5 87       	std	Z+13, r27	; 0x0d
   19490:	46 83       	std	Z+6, r20	; 0x06
   19492:	57 83       	std	Z+7, r21	; 0x07
   19494:	60 87       	std	Z+8, r22	; 0x08
   19496:	71 87       	std	Z+9, r23	; 0x09
   19498:	f5 82       	std	Z+5, r15	; 0x05
   1949a:	e4 82       	std	Z+4, r14	; 0x04
   1949c:	8b e6       	ldi	r24, 0x6B	; 107
   1949e:	9e e3       	ldi	r25, 0x3E	; 62
   194a0:	a0 e0       	ldi	r26, 0x00	; 0
   194a2:	81 83       	std	Z+1, r24	; 0x01
   194a4:	92 83       	std	Z+2, r25	; 0x02
   194a6:	a3 83       	std	Z+3, r26	; 0x03
   194a8:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   194ac:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   194b0:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   194b4:	92 ff       	sbrs	r25, 2
   194b6:	13 c0       	rjmp	.+38     	; 0x194de <lif_check_dir+0x2fc>
   194b8:	f6 01       	movw	r30, r12
   194ba:	80 81       	ld	r24, Z
   194bc:	91 81       	ldd	r25, Z+1	; 0x01
   194be:	89 2b       	or	r24, r25
   194c0:	71 f4       	brne	.+28     	; 0x194de <lif_check_dir+0x2fc>
   194c2:	ed b7       	in	r30, 0x3d	; 61
   194c4:	fe b7       	in	r31, 0x3e	; 62
   194c6:	f5 82       	std	Z+5, r15	; 0x05
   194c8:	e4 82       	std	Z+4, r14	; 0x04
   194ca:	80 e4       	ldi	r24, 0x40	; 64
   194cc:	9e e3       	ldi	r25, 0x3E	; 62
   194ce:	a0 e0       	ldi	r26, 0x00	; 0
   194d0:	81 83       	std	Z+1, r24	; 0x01
   194d2:	92 83       	std	Z+2, r25	; 0x02
   194d4:	a3 83       	std	Z+3, r26	; 0x03
   194d6:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   194da:	00 e0       	ldi	r16, 0x00	; 0
   194dc:	10 e0       	ldi	r17, 0x00	; 0
   194de:	ec 89       	ldd	r30, Y+20	; 0x14
   194e0:	fd 89       	ldd	r31, Y+21	; 0x15
   194e2:	e2 59       	subi	r30, 0x92	; 146
   194e4:	ff 4f       	sbci	r31, 0xFF	; 255
   194e6:	20 81       	ld	r18, Z
   194e8:	31 81       	ldd	r19, Z+1	; 0x01
   194ea:	21 15       	cp	r18, r1
   194ec:	f1 e0       	ldi	r31, 0x01	; 1
   194ee:	3f 07       	cpc	r19, r31
   194f0:	41 f1       	breq	.+80     	; 0x19542 <lif_check_dir+0x360>
   194f2:	40 91 b6 01 	lds	r20, 0x01B6	; 0x8001b6 <debuglevel>
   194f6:	50 91 b7 01 	lds	r21, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   194fa:	ca 01       	movw	r24, r20
   194fc:	88 27       	eor	r24, r24
   194fe:	94 70       	andi	r25, 0x04	; 4
   19500:	52 ff       	sbrs	r21, 2
   19502:	20 c0       	rjmp	.+64     	; 0x19544 <lif_check_dir+0x362>
   19504:	c9 01       	movw	r24, r18
   19506:	a0 e0       	ldi	r26, 0x00	; 0
   19508:	b0 e0       	ldi	r27, 0x00	; 0
   1950a:	ed b7       	in	r30, 0x3d	; 61
   1950c:	fe b7       	in	r31, 0x3e	; 62
   1950e:	86 83       	std	Z+6, r24	; 0x06
   19510:	97 83       	std	Z+7, r25	; 0x07
   19512:	a0 87       	std	Z+8, r26	; 0x08
   19514:	b1 87       	std	Z+9, r27	; 0x09
   19516:	ec 89       	ldd	r30, Y+20	; 0x14
   19518:	fd 89       	ldd	r31, Y+21	; 0x15
   1951a:	80 81       	ld	r24, Z
   1951c:	91 81       	ldd	r25, Z+1	; 0x01
   1951e:	ed b7       	in	r30, 0x3d	; 61
   19520:	fe b7       	in	r31, 0x3e	; 62
   19522:	95 83       	std	Z+5, r25	; 0x05
   19524:	84 83       	std	Z+4, r24	; 0x04
   19526:	84 e1       	ldi	r24, 0x14	; 20
   19528:	9e e3       	ldi	r25, 0x3E	; 62
   1952a:	a0 e0       	ldi	r26, 0x00	; 0
   1952c:	81 83       	std	Z+1, r24	; 0x01
   1952e:	92 83       	std	Z+2, r25	; 0x02
   19530:	a3 83       	std	Z+3, r26	; 0x03
   19532:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   19536:	80 e0       	ldi	r24, 0x00	; 0
   19538:	90 e0       	ldi	r25, 0x00	; 0
   1953a:	04 c0       	rjmp	.+8      	; 0x19544 <lif_check_dir+0x362>
   1953c:	81 e0       	ldi	r24, 0x01	; 1
   1953e:	90 e0       	ldi	r25, 0x00	; 0
   19540:	01 c0       	rjmp	.+2      	; 0x19544 <lif_check_dir+0x362>
   19542:	c8 01       	movw	r24, r16
   19544:	65 96       	adiw	r28, 0x15	; 21
   19546:	e2 e1       	ldi	r30, 0x12	; 18
   19548:	0c 94 1b e7 	jmp	0x1ce36	; 0x1ce36 <__epilogue_restores__>

0001954c <lif_close_volume>:
   1954c:	cf 93       	push	r28
   1954e:	df 93       	push	r29
   19550:	00 97       	sbiw	r24, 0x00	; 0
   19552:	f9 f0       	breq	.+62     	; 0x19592 <lif_close_volume+0x46>
   19554:	ec 01       	movw	r28, r24
   19556:	8a 81       	ldd	r24, Y+2	; 0x02
   19558:	9b 81       	ldd	r25, Y+3	; 0x03
   1955a:	00 97       	sbiw	r24, 0x00	; 0
   1955c:	79 f0       	breq	.+30     	; 0x1957c <lif_close_volume+0x30>
   1955e:	22 e0       	ldi	r18, 0x02	; 2
   19560:	30 e0       	ldi	r19, 0x00	; 0
   19562:	40 e0       	ldi	r20, 0x00	; 0
   19564:	50 e0       	ldi	r21, 0x00	; 0
   19566:	ba 01       	movw	r22, r20
   19568:	0e 94 34 7b 	call	0xf668	; 0xf668 <fseek>
   1956c:	8a 81       	ldd	r24, Y+2	; 0x02
   1956e:	9b 81       	ldd	r25, Y+3	; 0x03
   19570:	0e 94 1c 7d 	call	0xfa38	; 0xfa38 <fclose>
   19574:	1b 82       	std	Y+3, r1	; 0x03
   19576:	1a 82       	std	Y+2, r1	; 0x02
   19578:	0e 94 17 7c 	call	0xf82e	; 0xf82e <sync>
   1957c:	88 81       	ld	r24, Y
   1957e:	99 81       	ldd	r25, Y+1	; 0x01
   19580:	00 97       	sbiw	r24, 0x00	; 0
   19582:	11 f0       	breq	.+4      	; 0x19588 <lif_close_volume+0x3c>
   19584:	0e 94 22 c1 	call	0x18244	; 0x18244 <lif_free>
   19588:	ce 01       	movw	r24, r28
   1958a:	73 db       	rcall	.-2330   	; 0x18c72 <lif_vol_clear>
   1958c:	ce 01       	movw	r24, r28
   1958e:	0e 94 22 c1 	call	0x18244	; 0x18244 <lif_free>
   19592:	df 91       	pop	r29
   19594:	cf 91       	pop	r28
   19596:	08 95       	ret

00019598 <lif_checkdirindex>:
   19598:	cf 92       	push	r12
   1959a:	df 92       	push	r13
   1959c:	ef 92       	push	r14
   1959e:	ff 92       	push	r15
   195a0:	cf 93       	push	r28
   195a2:	df 93       	push	r29
   195a4:	ad b7       	in	r26, 0x3d	; 61
   195a6:	be b7       	in	r27, 0x3e	; 62
   195a8:	17 97       	sbiw	r26, 0x07	; 7
   195aa:	0f b6       	in	r0, 0x3f	; 63
   195ac:	f8 94       	cli
   195ae:	be bf       	out	0x3e, r27	; 62
   195b0:	0f be       	out	0x3f, r0	; 63
   195b2:	ad bf       	out	0x3d, r26	; 61
   195b4:	9b 01       	movw	r18, r22
   195b6:	77 fd       	sbrc	r23, 7
   195b8:	25 c0       	rjmp	.+74     	; 0x19604 <lif_checkdirindex+0x6c>
   195ba:	ab 01       	movw	r20, r22
   195bc:	77 0f       	add	r23, r23
   195be:	66 0b       	sbc	r22, r22
   195c0:	77 0b       	sbc	r23, r23
   195c2:	e5 e0       	ldi	r30, 0x05	; 5
   195c4:	44 0f       	add	r20, r20
   195c6:	55 1f       	adc	r21, r21
   195c8:	66 1f       	adc	r22, r22
   195ca:	77 1f       	adc	r23, r23
   195cc:	ea 95       	dec	r30
   195ce:	d1 f7       	brne	.-12     	; 0x195c4 <lif_checkdirindex+0x2c>
   195d0:	c5 2e       	mov	r12, r21
   195d2:	d6 2e       	mov	r13, r22
   195d4:	e7 2e       	mov	r14, r23
   195d6:	ff 24       	eor	r15, r15
   195d8:	55 27       	eor	r21, r21
   195da:	66 27       	eor	r22, r22
   195dc:	77 27       	eor	r23, r23
   195de:	45 2b       	or	r20, r21
   195e0:	46 2b       	or	r20, r22
   195e2:	47 2b       	or	r20, r23
   195e4:	29 f0       	breq	.+10     	; 0x195f0 <lif_checkdirindex+0x58>
   195e6:	4f ef       	ldi	r20, 0xFF	; 255
   195e8:	c4 1a       	sub	r12, r20
   195ea:	d4 0a       	sbc	r13, r20
   195ec:	e4 0a       	sbc	r14, r20
   195ee:	f4 0a       	sbc	r15, r20
   195f0:	fc 01       	movw	r30, r24
   195f2:	45 a9       	ldd	r20, Z+53	; 0x35
   195f4:	56 a9       	ldd	r21, Z+54	; 0x36
   195f6:	67 a9       	ldd	r22, Z+55	; 0x37
   195f8:	70 ad       	ldd	r23, Z+56	; 0x38
   195fa:	4c 15       	cp	r20, r12
   195fc:	5d 05       	cpc	r21, r13
   195fe:	6e 05       	cpc	r22, r14
   19600:	7f 05       	cpc	r23, r15
   19602:	08 f5       	brcc	.+66     	; 0x19646 <lif_checkdirindex+0xae>
   19604:	ec 01       	movw	r28, r24
   19606:	ed b7       	in	r30, 0x3d	; 61
   19608:	fe b7       	in	r31, 0x3e	; 62
   1960a:	37 83       	std	Z+7, r19	; 0x07
   1960c:	26 83       	std	Z+6, r18	; 0x06
   1960e:	88 81       	ld	r24, Y
   19610:	99 81       	ldd	r25, Y+1	; 0x01
   19612:	95 83       	std	Z+5, r25	; 0x05
   19614:	84 83       	std	Z+4, r24	; 0x04
   19616:	81 e5       	ldi	r24, 0x51	; 81
   19618:	9d e3       	ldi	r25, 0x3D	; 61
   1961a:	a0 e0       	ldi	r26, 0x00	; 0
   1961c:	81 83       	std	Z+1, r24	; 0x01
   1961e:	92 83       	std	Z+2, r25	; 0x02
   19620:	a3 83       	std	Z+3, r26	; 0x03
   19622:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   19626:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1962a:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1962e:	c9 01       	movw	r24, r18
   19630:	88 27       	eor	r24, r24
   19632:	94 70       	andi	r25, 0x04	; 4
   19634:	32 ff       	sbrs	r19, 2
   19636:	09 c0       	rjmp	.+18     	; 0x1964a <lif_checkdirindex+0xb2>
   19638:	67 ef       	ldi	r22, 0xF7	; 247
   1963a:	75 e1       	ldi	r23, 0x15	; 21
   1963c:	ce 01       	movw	r24, r28
   1963e:	20 db       	rcall	.-2496   	; 0x18c80 <lif_dump_vol>
   19640:	80 e0       	ldi	r24, 0x00	; 0
   19642:	90 e0       	ldi	r25, 0x00	; 0
   19644:	02 c0       	rjmp	.+4      	; 0x1964a <lif_checkdirindex+0xb2>
   19646:	81 e0       	ldi	r24, 0x01	; 1
   19648:	90 e0       	ldi	r25, 0x00	; 0
   1964a:	ad b7       	in	r26, 0x3d	; 61
   1964c:	be b7       	in	r27, 0x3e	; 62
   1964e:	17 96       	adiw	r26, 0x07	; 7
   19650:	0f b6       	in	r0, 0x3f	; 63
   19652:	f8 94       	cli
   19654:	be bf       	out	0x3e, r27	; 62
   19656:	0f be       	out	0x3f, r0	; 63
   19658:	ad bf       	out	0x3d, r26	; 61
   1965a:	df 91       	pop	r29
   1965c:	cf 91       	pop	r28
   1965e:	ff 90       	pop	r15
   19660:	ef 90       	pop	r14
   19662:	df 90       	pop	r13
   19664:	cf 90       	pop	r12
   19666:	08 95       	ret

00019668 <lif_readdirindex>:
   19668:	a5 e2       	ldi	r26, 0x25	; 37
   1966a:	b0 e0       	ldi	r27, 0x00	; 0
   1966c:	ea e3       	ldi	r30, 0x3A	; 58
   1966e:	fb ec       	ldi	r31, 0xCB	; 203
   19670:	0c 94 09 e7 	jmp	0x1ce12	; 0x1ce12 <__prologue_saves__+0x14>
   19674:	7c 01       	movw	r14, r24
   19676:	6b 01       	movw	r12, r22
   19678:	8f df       	rcall	.-226    	; 0x19598 <lif_checkdirindex>
   1967a:	89 2b       	or	r24, r25
   1967c:	19 f4       	brne	.+6      	; 0x19684 <lif_readdirindex+0x1c>
   1967e:	00 e0       	ldi	r16, 0x00	; 0
   19680:	10 e0       	ldi	r17, 0x00	; 0
   19682:	54 c0       	rjmp	.+168    	; 0x1972c <lif_readdirindex+0xc4>
   19684:	f7 01       	movw	r30, r14
   19686:	85 a5       	ldd	r24, Z+45	; 0x2d
   19688:	96 a5       	ldd	r25, Z+46	; 0x2e
   1968a:	a7 a5       	ldd	r26, Z+47	; 0x2f
   1968c:	b0 a9       	ldd	r27, Z+48	; 0x30
   1968e:	44 27       	eor	r20, r20
   19690:	58 2f       	mov	r21, r24
   19692:	69 2f       	mov	r22, r25
   19694:	7a 2f       	mov	r23, r26
   19696:	c6 01       	movw	r24, r12
   19698:	0d 2c       	mov	r0, r13
   1969a:	00 0c       	add	r0, r0
   1969c:	aa 0b       	sbc	r26, r26
   1969e:	bb 0b       	sbc	r27, r27
   196a0:	35 e0       	ldi	r19, 0x05	; 5
   196a2:	88 0f       	add	r24, r24
   196a4:	99 1f       	adc	r25, r25
   196a6:	aa 1f       	adc	r26, r26
   196a8:	bb 1f       	adc	r27, r27
   196aa:	3a 95       	dec	r19
   196ac:	d1 f7       	brne	.-12     	; 0x196a2 <lif_readdirindex+0x3a>
   196ae:	9a 01       	movw	r18, r20
   196b0:	ab 01       	movw	r20, r22
   196b2:	28 0f       	add	r18, r24
   196b4:	39 1f       	adc	r19, r25
   196b6:	4a 1f       	adc	r20, r26
   196b8:	5b 1f       	adc	r21, r27
   196ba:	00 e2       	ldi	r16, 0x20	; 32
   196bc:	10 e0       	ldi	r17, 0x00	; 0
   196be:	be 01       	movw	r22, r28
   196c0:	6a 5f       	subi	r22, 0xFA	; 250
   196c2:	7f 4f       	sbci	r23, 0xFF	; 255
   196c4:	c7 01       	movw	r24, r14
   196c6:	0e 94 da c1 	call	0x183b4	; 0x183b4 <lif_read>
   196ca:	60 32       	cpi	r22, 0x20	; 32
   196cc:	71 05       	cpc	r23, r1
   196ce:	81 05       	cpc	r24, r1
   196d0:	91 05       	cpc	r25, r1
   196d2:	a8 f2       	brcs	.-86     	; 0x1967e <lif_readdirindex+0x16>
   196d4:	b7 01       	movw	r22, r14
   196d6:	ce 01       	movw	r24, r28
   196d8:	06 96       	adiw	r24, 0x06	; 6
   196da:	75 d9       	rcall	.-3350   	; 0x189c6 <lif_str2dir>
   196dc:	f7 01       	movw	r30, r14
   196de:	e6 5a       	subi	r30, 0xA6	; 166
   196e0:	ff 4f       	sbci	r31, 0xFF	; 255
   196e2:	80 81       	ld	r24, Z
   196e4:	91 81       	ldd	r25, Z+1	; 0x01
   196e6:	01 96       	adiw	r24, 0x01	; 1
   196e8:	19 f4       	brne	.+6      	; 0x196f0 <lif_readdirindex+0x88>
   196ea:	f7 01       	movw	r30, r14
   196ec:	d3 a2       	std	Z+35, r13	; 0x23
   196ee:	c2 a2       	std	Z+34, r12	; 0x22
   196f0:	c7 01       	movw	r24, r14
   196f2:	77 dd       	rcall	.-1298   	; 0x191e2 <lif_check_dir>
   196f4:	8c 01       	movw	r16, r24
   196f6:	89 2b       	or	r24, r25
   196f8:	b9 f4       	brne	.+46     	; 0x19728 <lif_readdirindex+0xc0>
   196fa:	ed b7       	in	r30, 0x3d	; 61
   196fc:	fe b7       	in	r31, 0x3e	; 62
   196fe:	d5 82       	std	Z+5, r13	; 0x05
   19700:	c4 82       	std	Z+4, r12	; 0x04
   19702:	81 e3       	ldi	r24, 0x31	; 49
   19704:	9d e3       	ldi	r25, 0x3D	; 61
   19706:	a0 e0       	ldi	r26, 0x00	; 0
   19708:	81 83       	std	Z+1, r24	; 0x01
   1970a:	92 83       	std	Z+2, r25	; 0x02
   1970c:	a3 83       	std	Z+3, r26	; 0x03
   1970e:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   19712:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19716:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1971a:	92 ff       	sbrs	r25, 2
   1971c:	b0 cf       	rjmp	.-160    	; 0x1967e <lif_readdirindex+0x16>
   1971e:	68 e0       	ldi	r22, 0x08	; 8
   19720:	76 e1       	ldi	r23, 0x16	; 22
   19722:	c7 01       	movw	r24, r14
   19724:	ad da       	rcall	.-2726   	; 0x18c80 <lif_dump_vol>
   19726:	02 c0       	rjmp	.+4      	; 0x1972c <lif_readdirindex+0xc4>
   19728:	01 e0       	ldi	r16, 0x01	; 1
   1972a:	10 e0       	ldi	r17, 0x00	; 0
   1972c:	c8 01       	movw	r24, r16
   1972e:	a5 96       	adiw	r28, 0x25	; 37
   19730:	e8 e0       	ldi	r30, 0x08	; 8
   19732:	0c 94 25 e7 	jmp	0x1ce4a	; 0x1ce4a <__epilogue_restores__+0x14>

00019736 <lif_writedirindex>:
   19736:	a0 e2       	ldi	r26, 0x20	; 32
   19738:	b0 e0       	ldi	r27, 0x00	; 0
   1973a:	e1 ea       	ldi	r30, 0xA1	; 161
   1973c:	fb ec       	ldi	r31, 0xCB	; 203
   1973e:	0c 94 07 e7 	jmp	0x1ce0e	; 0x1ce0e <__prologue_saves__+0x10>
   19742:	5c 01       	movw	r10, r24
   19744:	6b 01       	movw	r12, r22
   19746:	4d dd       	rcall	.-1382   	; 0x191e2 <lif_check_dir>
   19748:	7c 01       	movw	r14, r24
   1974a:	89 2b       	or	r24, r25
   1974c:	71 f4       	brne	.+28     	; 0x1976a <lif_writedirindex+0x34>
   1974e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19752:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19756:	92 fd       	sbrc	r25, 2
   19758:	03 c0       	rjmp	.+6      	; 0x19760 <lif_writedirindex+0x2a>
   1975a:	e1 2c       	mov	r14, r1
   1975c:	f1 2c       	mov	r15, r1
   1975e:	42 c0       	rjmp	.+132    	; 0x197e4 <lif_writedirindex+0xae>
   19760:	69 e1       	ldi	r22, 0x19	; 25
   19762:	76 e1       	ldi	r23, 0x16	; 22
   19764:	c5 01       	movw	r24, r10
   19766:	8c da       	rcall	.-2792   	; 0x18c80 <lif_dump_vol>
   19768:	3d c0       	rjmp	.+122    	; 0x197e4 <lif_writedirindex+0xae>
   1976a:	b6 01       	movw	r22, r12
   1976c:	c5 01       	movw	r24, r10
   1976e:	14 df       	rcall	.-472    	; 0x19598 <lif_checkdirindex>
   19770:	89 2b       	or	r24, r25
   19772:	99 f3       	breq	.-26     	; 0x1975a <lif_writedirindex+0x24>
   19774:	f5 01       	movw	r30, r10
   19776:	e6 5a       	subi	r30, 0xA6	; 166
   19778:	ff 4f       	sbci	r31, 0xFF	; 255
   1977a:	80 81       	ld	r24, Z
   1977c:	91 81       	ldd	r25, Z+1	; 0x01
   1977e:	01 96       	adiw	r24, 0x01	; 1
   19780:	19 f4       	brne	.+6      	; 0x19788 <lif_writedirindex+0x52>
   19782:	f5 01       	movw	r30, r10
   19784:	d3 a2       	std	Z+35, r13	; 0x23
   19786:	c2 a2       	std	Z+34, r12	; 0x22
   19788:	f5 01       	movw	r30, r10
   1978a:	85 a5       	ldd	r24, Z+45	; 0x2d
   1978c:	96 a5       	ldd	r25, Z+46	; 0x2e
   1978e:	a7 a5       	ldd	r26, Z+47	; 0x2f
   19790:	b0 a9       	ldd	r27, Z+48	; 0x30
   19792:	ba 2f       	mov	r27, r26
   19794:	a9 2f       	mov	r26, r25
   19796:	98 2f       	mov	r25, r24
   19798:	88 27       	eor	r24, r24
   1979a:	0d 2c       	mov	r0, r13
   1979c:	00 0c       	add	r0, r0
   1979e:	ee 08       	sbc	r14, r14
   197a0:	ff 08       	sbc	r15, r15
   197a2:	35 e0       	ldi	r19, 0x05	; 5
   197a4:	cc 0c       	add	r12, r12
   197a6:	dd 1c       	adc	r13, r13
   197a8:	ee 1c       	adc	r14, r14
   197aa:	ff 1c       	adc	r15, r15
   197ac:	3a 95       	dec	r19
   197ae:	d1 f7       	brne	.-12     	; 0x197a4 <lif_writedirindex+0x6e>
   197b0:	c8 0e       	add	r12, r24
   197b2:	d9 1e       	adc	r13, r25
   197b4:	ea 1e       	adc	r14, r26
   197b6:	fb 1e       	adc	r15, r27
   197b8:	be 01       	movw	r22, r28
   197ba:	6f 5f       	subi	r22, 0xFF	; 255
   197bc:	7f 4f       	sbci	r23, 0xFF	; 255
   197be:	c5 01       	movw	r24, r10
   197c0:	97 d8       	rcall	.-3794   	; 0x188f0 <lif_dir2str>
   197c2:	00 e2       	ldi	r16, 0x20	; 32
   197c4:	10 e0       	ldi	r17, 0x00	; 0
   197c6:	a7 01       	movw	r20, r14
   197c8:	96 01       	movw	r18, r12
   197ca:	be 01       	movw	r22, r28
   197cc:	6f 5f       	subi	r22, 0xFF	; 255
   197ce:	7f 4f       	sbci	r23, 0xFF	; 255
   197d0:	c5 01       	movw	r24, r10
   197d2:	0e 94 2d c2 	call	0x1845a	; 0x1845a <lif_write>
   197d6:	31 e0       	ldi	r19, 0x01	; 1
   197d8:	20 e0       	ldi	r18, 0x00	; 0
   197da:	80 97       	sbiw	r24, 0x20	; 32
   197dc:	0c f4       	brge	.+2      	; 0x197e0 <lif_writedirindex+0xaa>
   197de:	30 e0       	ldi	r19, 0x00	; 0
   197e0:	e3 2e       	mov	r14, r19
   197e2:	f2 2e       	mov	r15, r18
   197e4:	c7 01       	movw	r24, r14
   197e6:	a0 96       	adiw	r28, 0x20	; 32
   197e8:	ea e0       	ldi	r30, 0x0A	; 10
   197ea:	0c 94 23 e7 	jmp	0x1ce46	; 0x1ce46 <__epilogue_restores__+0x10>

000197ee <lif_writedirEOF>:
   197ee:	0f 93       	push	r16
   197f0:	1f 93       	push	r17
   197f2:	cf 93       	push	r28
   197f4:	df 93       	push	r29
   197f6:	ec 01       	movw	r28, r24
   197f8:	8b 01       	movw	r16, r22
   197fa:	33 da       	rcall	.-2970   	; 0x18c62 <lif_dir_clear>
   197fc:	fe 01       	movw	r30, r28
   197fe:	e6 5a       	subi	r30, 0xA6	; 166
   19800:	ff 4f       	sbci	r31, 0xFF	; 255
   19802:	8f ef       	ldi	r24, 0xFF	; 255
   19804:	9f ef       	ldi	r25, 0xFF	; 255
   19806:	91 83       	std	Z+1, r25	; 0x01
   19808:	80 83       	st	Z, r24
   1980a:	1b a3       	std	Y+35, r17	; 0x23
   1980c:	0a a3       	std	Y+34, r16	; 0x22
   1980e:	b8 01       	movw	r22, r16
   19810:	ce 01       	movw	r24, r28
   19812:	91 df       	rcall	.-222    	; 0x19736 <lif_writedirindex>
   19814:	df 91       	pop	r29
   19816:	cf 91       	pop	r28
   19818:	1f 91       	pop	r17
   1981a:	0f 91       	pop	r16
   1981c:	08 95       	ret

0001981e <lif_updatefree>:
/// @brief Update free space
/// @parameter[in] *LIF: LIF structure
/// @return: LIF or NULL on error
MEMSPACE
lif_t *lif_updatefree(lif_t *LIF)
{
   1981e:	2f 92       	push	r2
   19820:	3f 92       	push	r3
   19822:	4f 92       	push	r4
   19824:	5f 92       	push	r5
   19826:	6f 92       	push	r6
   19828:	7f 92       	push	r7
   1982a:	8f 92       	push	r8
   1982c:	af 92       	push	r10
   1982e:	bf 92       	push	r11
   19830:	cf 92       	push	r12
   19832:	df 92       	push	r13
   19834:	ef 92       	push	r14
   19836:	ff 92       	push	r15
   19838:	0f 93       	push	r16
   1983a:	1f 93       	push	r17
   1983c:	cf 93       	push	r28
   1983e:	df 93       	push	r29
   19840:	cd b7       	in	r28, 0x3d	; 61
   19842:	de b7       	in	r29, 0x3e	; 62
   19844:	2f 97       	sbiw	r28, 0x0f	; 15
   19846:	0f b6       	in	r0, 0x3f	; 63
   19848:	f8 94       	cli
   1984a:	de bf       	out	0x3e, r29	; 62
   1984c:	0f be       	out	0x3f, r0	; 63
   1984e:	cd bf       	out	0x3d, r28	; 61
   19850:	9f 87       	std	Y+15, r25	; 0x0f
   19852:	8e 87       	std	Y+14, r24	; 0x0e
    int index = 0;
    int purgeindex = -1;

// Start of free space
    uint32_t start = LIF->filestart;
   19854:	fc 01       	movw	r30, r24
   19856:	24 84       	ldd	r2, Z+12	; 0x0c
   19858:	35 84       	ldd	r3, Z+13	; 0x0d
   1985a:	46 84       	ldd	r4, Z+14	; 0x0e
   1985c:	57 84       	ldd	r5, Z+15	; 0x0f
// Free sectors
    LIF->freesectors = LIF->filesectors;
   1985e:	80 89       	ldd	r24, Z+16	; 0x10
   19860:	91 89       	ldd	r25, Z+17	; 0x11
   19862:	a2 89       	ldd	r26, Z+18	; 0x12
   19864:	b3 89       	ldd	r27, Z+19	; 0x13
   19866:	80 8f       	std	Z+24, r24	; 0x18
   19868:	91 8f       	std	Z+25, r25	; 0x19
   1986a:	a2 8f       	std	Z+26, r26	; 0x1a
   1986c:	b3 8f       	std	Z+27, r27	; 0x1b
// Used sectors
    LIF->usedsectors = 0;
   1986e:	14 8a       	std	Z+20, r1	; 0x14
   19870:	15 8a       	std	Z+21, r1	; 0x15
   19872:	16 8a       	std	Z+22, r1	; 0x16
   19874:	17 8a       	std	Z+23, r1	; 0x17
// Purged files
    LIF->purged= 0;
   19876:	17 8e       	std	Z+31, r1	; 0x1f
   19878:	16 8e       	std	Z+30, r1	; 0x1e
// Files
    LIF->files = 0;
   1987a:	15 8e       	std	Z+29, r1	; 0x1d
   1987c:	14 8e       	std	Z+28, r1	; 0x1c
// Director pointer
    LIF->dirindex = 0;
   1987e:	11 a2       	std	Z+33, r1	; 0x21
   19880:	10 a2       	std	Z+32, r1	; 0x20
// Directory EOF record
    LIF->EOFindex = 0;
   19882:	13 a2       	std	Z+35, r1	; 0x23
   19884:	12 a2       	std	Z+34, r1	; 0x22
   19886:	cc 24       	eor	r12, r12
   19888:	c3 94       	inc	r12
   1988a:	d1 2c       	mov	r13, r1
/// @return: LIF or NULL on error
MEMSPACE
lif_t *lif_updatefree(lif_t *LIF)
{
    int index = 0;
    int purgeindex = -1;
   1988c:	0f ef       	ldi	r16, 0xFF	; 255
   1988e:	1f ef       	ldi	r17, 0xFF	; 255
        if( !lif_readdirindex(LIF,index) )
        {
            return(NULL);
        }

        if(LIF->DIR.FileType == 0xffff)
   19890:	e6 5a       	subi	r30, 0xA6	; 166
   19892:	ff 4f       	sbci	r31, 0xFF	; 255
   19894:	f9 87       	std	Y+9, r31	; 0x09
   19896:	e8 87       	std	Y+8, r30	; 0x08
            LIF->purged++;
            ++index;
            continue;
        }
        purgeindex = -1;
        if(start > LIF->DIR.FileStartSector)
   19898:	ae 84       	ldd	r10, Y+14	; 0x0e
   1989a:	bf 84       	ldd	r11, Y+15	; 0x0f
   1989c:	fc e5       	ldi	r31, 0x5C	; 92
   1989e:	af 0e       	add	r10, r31
   198a0:	b1 1c       	adc	r11, r1
        {
            if(debuglevel & LIF_DEBUG)
                printf("lif_update_free:[%s] error previous record file area overlaps this one:[%s]\n", LIF->name, LIF->DIR.filename);

        }
        LIF->usedsectors += LIF->DIR.FileSectors;
   198a2:	8e 85       	ldd	r24, Y+14	; 0x0e
   198a4:	9f 85       	ldd	r25, Y+15	; 0x0f
   198a6:	80 5a       	subi	r24, 0xA0	; 160
   198a8:	9f 4f       	sbci	r25, 0xFF	; 255
   198aa:	9b 87       	std	Y+11, r25	; 0x0b
   198ac:	8a 87       	std	Y+10, r24	; 0x0a
        }
        purgeindex = -1;
        if(start > LIF->DIR.FileStartSector)
        {
            if(debuglevel & LIF_DEBUG)
                printf("lif_update_free:[%s] error previous record file area overlaps this one:[%s]\n", LIF->name, LIF->DIR.filename);
   198ae:	ee 85       	ldd	r30, Y+14	; 0x0e
   198b0:	ff 85       	ldd	r31, Y+15	; 0x0f
   198b2:	e1 5b       	subi	r30, 0xB1	; 177
   198b4:	ff 4f       	sbci	r31, 0xFF	; 255
   198b6:	fd 87       	std	Y+13, r31	; 0x0d
   198b8:	ec 87       	std	Y+12, r30	; 0x0c
   198ba:	84 ee       	ldi	r24, 0xE4	; 228
   198bc:	9c e3       	ldi	r25, 0x3C	; 60
   198be:	3c 01       	movw	r6, r24
   198c0:	81 2c       	mov	r8, r1
   198c2:	76 01       	movw	r14, r12
   198c4:	21 e0       	ldi	r18, 0x01	; 1
   198c6:	e2 1a       	sub	r14, r18
   198c8:	f1 08       	sbc	r15, r1
    LIF->EOFindex = 0;

/// Update free
    while(1)
    {
        if( !lif_readdirindex(LIF,index) )
   198ca:	b7 01       	movw	r22, r14
   198cc:	8e 85       	ldd	r24, Y+14	; 0x0e
   198ce:	9f 85       	ldd	r25, Y+15	; 0x0f
   198d0:	cb de       	rcall	.-618    	; 0x19668 <lif_readdirindex>
   198d2:	89 2b       	or	r24, r25
   198d4:	19 f4       	brne	.+6      	; 0x198dc <lif_updatefree+0xbe>
        {
            return(NULL);
   198d6:	80 e0       	ldi	r24, 0x00	; 0
   198d8:	90 e0       	ldi	r25, 0x00	; 0
   198da:	93 c0       	rjmp	.+294    	; 0x19a02 <lif_updatefree+0x1e4>
        }

        if(LIF->DIR.FileType == 0xffff)
   198dc:	e8 85       	ldd	r30, Y+8	; 0x08
   198de:	f9 85       	ldd	r31, Y+9	; 0x09
   198e0:	80 81       	ld	r24, Z
   198e2:	91 81       	ldd	r25, Z+1	; 0x01
   198e4:	8f 3f       	cpi	r24, 0xFF	; 255
   198e6:	ff ef       	ldi	r31, 0xFF	; 255
   198e8:	9f 07       	cpc	r25, r31
   198ea:	c1 f4       	brne	.+48     	; 0x1991c <lif_updatefree+0xfe>
        {
            LIF->EOFindex = index;
            if(purgeindex != -1)
            {
                LIF->EOFindex = purgeindex;
   198ec:	ee 85       	ldd	r30, Y+14	; 0x0e
   198ee:	ff 85       	ldd	r31, Y+15	; 0x0f
        }

        if(LIF->DIR.FileType == 0xffff)
        {
            LIF->EOFindex = index;
            if(purgeindex != -1)
   198f0:	0f 3f       	cpi	r16, 0xFF	; 255
   198f2:	2f ef       	ldi	r18, 0xFF	; 255
   198f4:	12 07       	cpc	r17, r18
   198f6:	09 f4       	brne	.+2      	; 0x198fa <lif_updatefree+0xdc>
   198f8:	7a c0       	rjmp	.+244    	; 0x199ee <lif_updatefree+0x1d0>
            {
                LIF->EOFindex = purgeindex;
   198fa:	13 a3       	std	Z+35, r17	; 0x23
   198fc:	02 a3       	std	Z+34, r16	; 0x22

// Adjust purged file count
                LIF->purged -= (index - purgeindex);
   198fe:	e0 1a       	sub	r14, r16
   19900:	f1 0a       	sbc	r15, r17
   19902:	86 8d       	ldd	r24, Z+30	; 0x1e
   19904:	97 8d       	ldd	r25, Z+31	; 0x1f
   19906:	8e 19       	sub	r24, r14
   19908:	9f 09       	sbc	r25, r15
   1990a:	97 8f       	std	Z+31, r25	; 0x1f
   1990c:	86 8f       	std	Z+30, r24	; 0x1e
// update EOF
                if(!lif_writedirEOF(LIF,purgeindex))
   1990e:	b8 01       	movw	r22, r16
   19910:	cf 01       	movw	r24, r30
   19912:	6d df       	rcall	.-294    	; 0x197ee <lif_writedirEOF>
   19914:	89 2b       	or	r24, r25
   19916:	09 f0       	breq	.+2      	; 0x1991a <lif_updatefree+0xfc>
   19918:	6c c0       	rjmp	.+216    	; 0x199f2 <lif_updatefree+0x1d4>
   1991a:	dd cf       	rjmp	.-70     	; 0x198d6 <lif_updatefree+0xb8>
                    return(NULL);
                }
            }
            break;
        }
        if(LIF->DIR.FileType == 0)
   1991c:	89 2b       	or	r24, r25
   1991e:	81 f4       	brne	.+32     	; 0x19940 <lif_updatefree+0x122>
        {
            if(purgeindex == -1)
   19920:	0f 3f       	cpi	r16, 0xFF	; 255
   19922:	ff ef       	ldi	r31, 0xFF	; 255
   19924:	1f 07       	cpc	r17, r31
   19926:	09 f4       	brne	.+2      	; 0x1992a <lif_updatefree+0x10c>
   19928:	87 01       	movw	r16, r14
                purgeindex = index;
            LIF->purged++;
   1992a:	ee 85       	ldd	r30, Y+14	; 0x0e
   1992c:	ff 85       	ldd	r31, Y+15	; 0x0f
   1992e:	86 8d       	ldd	r24, Z+30	; 0x1e
   19930:	97 8d       	ldd	r25, Z+31	; 0x1f
   19932:	01 96       	adiw	r24, 0x01	; 1
   19934:	97 8f       	std	Z+31, r25	; 0x1f
   19936:	86 8f       	std	Z+30, r24	; 0x1e
   19938:	ff ef       	ldi	r31, 0xFF	; 255
   1993a:	cf 1a       	sub	r12, r31
   1993c:	df 0a       	sbc	r13, r31
   1993e:	c1 cf       	rjmp	.-126    	; 0x198c2 <lif_updatefree+0xa4>
            ++index;
            continue;
        }
        purgeindex = -1;
        if(start > LIF->DIR.FileStartSector)
   19940:	f5 01       	movw	r30, r10
   19942:	80 81       	ld	r24, Z
   19944:	91 81       	ldd	r25, Z+1	; 0x01
   19946:	a2 81       	ldd	r26, Z+2	; 0x02
   19948:	b3 81       	ldd	r27, Z+3	; 0x03
   1994a:	82 15       	cp	r24, r2
   1994c:	93 05       	cpc	r25, r3
   1994e:	a4 05       	cpc	r26, r4
   19950:	b5 05       	cpc	r27, r5
   19952:	c8 f4       	brcc	.+50     	; 0x19986 <lif_updatefree+0x168>
        {
            if(debuglevel & LIF_DEBUG)
   19954:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19958:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1995c:	92 ff       	sbrs	r25, 2
   1995e:	13 c0       	rjmp	.+38     	; 0x19986 <lif_updatefree+0x168>
                printf("lif_update_free:[%s] error previous record file area overlaps this one:[%s]\n", LIF->name, LIF->DIR.filename);
   19960:	8c 85       	ldd	r24, Y+12	; 0x0c
   19962:	9d 85       	ldd	r25, Y+13	; 0x0d
   19964:	ed b7       	in	r30, 0x3d	; 61
   19966:	fe b7       	in	r31, 0x3e	; 62
   19968:	97 83       	std	Z+7, r25	; 0x07
   1996a:	86 83       	std	Z+6, r24	; 0x06
   1996c:	ee 85       	ldd	r30, Y+14	; 0x0e
   1996e:	ff 85       	ldd	r31, Y+15	; 0x0f
   19970:	80 81       	ld	r24, Z
   19972:	91 81       	ldd	r25, Z+1	; 0x01
   19974:	ed b7       	in	r30, 0x3d	; 61
   19976:	fe b7       	in	r31, 0x3e	; 62
   19978:	95 83       	std	Z+5, r25	; 0x05
   1997a:	84 83       	std	Z+4, r24	; 0x04
   1997c:	61 82       	std	Z+1, r6	; 0x01
   1997e:	72 82       	std	Z+2, r7	; 0x02
   19980:	83 82       	std	Z+3, r8	; 0x03
   19982:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>

        }
        LIF->usedsectors += LIF->DIR.FileSectors;
   19986:	ea 85       	ldd	r30, Y+10	; 0x0a
   19988:	fb 85       	ldd	r31, Y+11	; 0x0b
   1998a:	80 81       	ld	r24, Z
   1998c:	91 81       	ldd	r25, Z+1	; 0x01
   1998e:	a2 81       	ldd	r26, Z+2	; 0x02
   19990:	b3 81       	ldd	r27, Z+3	; 0x03
   19992:	ee 85       	ldd	r30, Y+14	; 0x0e
   19994:	ff 85       	ldd	r31, Y+15	; 0x0f
   19996:	44 89       	ldd	r20, Z+20	; 0x14
   19998:	55 89       	ldd	r21, Z+21	; 0x15
   1999a:	66 89       	ldd	r22, Z+22	; 0x16
   1999c:	77 89       	ldd	r23, Z+23	; 0x17
   1999e:	48 0f       	add	r20, r24
   199a0:	59 1f       	adc	r21, r25
   199a2:	6a 1f       	adc	r22, r26
   199a4:	7b 1f       	adc	r23, r27
   199a6:	44 8b       	std	Z+20, r20	; 0x14
   199a8:	55 8b       	std	Z+21, r21	; 0x15
   199aa:	66 8b       	std	Z+22, r22	; 0x16
   199ac:	77 8b       	std	Z+23, r23	; 0x17
        LIF->freesectors -= LIF->DIR.FileSectors;
   199ae:	40 8d       	ldd	r20, Z+24	; 0x18
   199b0:	51 8d       	ldd	r21, Z+25	; 0x19
   199b2:	62 8d       	ldd	r22, Z+26	; 0x1a
   199b4:	73 8d       	ldd	r23, Z+27	; 0x1b
   199b6:	48 1b       	sub	r20, r24
   199b8:	59 0b       	sbc	r21, r25
   199ba:	6a 0b       	sbc	r22, r26
   199bc:	7b 0b       	sbc	r23, r27
   199be:	40 8f       	std	Z+24, r20	; 0x18
   199c0:	51 8f       	std	Z+25, r21	; 0x19
   199c2:	62 8f       	std	Z+26, r22	; 0x1a
   199c4:	73 8f       	std	Z+27, r23	; 0x1b
        LIF->files++;
   199c6:	24 8d       	ldd	r18, Z+28	; 0x1c
   199c8:	35 8d       	ldd	r19, Z+29	; 0x1d
   199ca:	2f 5f       	subi	r18, 0xFF	; 255
   199cc:	3f 4f       	sbci	r19, 0xFF	; 255
   199ce:	35 8f       	std	Z+29, r19	; 0x1d
   199d0:	24 8f       	std	Z+28, r18	; 0x1c
        ++index;
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   199d2:	f5 01       	movw	r30, r10
   199d4:	40 81       	ld	r20, Z
   199d6:	51 81       	ldd	r21, Z+1	; 0x01
   199d8:	62 81       	ldd	r22, Z+2	; 0x02
   199da:	73 81       	ldd	r23, Z+3	; 0x03
   199dc:	1c 01       	movw	r2, r24
   199de:	2d 01       	movw	r4, r26
   199e0:	24 0e       	add	r2, r20
   199e2:	35 1e       	adc	r3, r21
   199e4:	46 1e       	adc	r4, r22
   199e6:	57 1e       	adc	r5, r23
                purgeindex = index;
            LIF->purged++;
            ++index;
            continue;
        }
        purgeindex = -1;
   199e8:	0f ef       	ldi	r16, 0xFF	; 255
   199ea:	1f ef       	ldi	r17, 0xFF	; 255
   199ec:	a5 cf       	rjmp	.-182    	; 0x19938 <lif_updatefree+0x11a>
            return(NULL);
        }

        if(LIF->DIR.FileType == 0xffff)
        {
            LIF->EOFindex = index;
   199ee:	f3 a2       	std	Z+35, r15	; 0x23
   199f0:	e2 a2       	std	Z+34, r14	; 0x22
/// @return void
MEMSPACE
void lif_rewinddir(lif_t *LIF)
{
// Directory index
    LIF->dirindex = -1;
   199f2:	8f ef       	ldi	r24, 0xFF	; 255
   199f4:	9f ef       	ldi	r25, 0xFF	; 255
   199f6:	ee 85       	ldd	r30, Y+14	; 0x0e
   199f8:	ff 85       	ldd	r31, Y+15	; 0x0f
   199fa:	91 a3       	std	Z+33, r25	; 0x21
   199fc:	80 a3       	std	Z+32, r24	; 0x20
        ++index;
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
    }
// rewind
    lif_rewinddir(LIF);
    return(LIF);
   199fe:	8e 85       	ldd	r24, Y+14	; 0x0e
   19a00:	9f 85       	ldd	r25, Y+15	; 0x0f
}
   19a02:	2f 96       	adiw	r28, 0x0f	; 15
   19a04:	0f b6       	in	r0, 0x3f	; 63
   19a06:	f8 94       	cli
   19a08:	de bf       	out	0x3e, r29	; 62
   19a0a:	0f be       	out	0x3f, r0	; 63
   19a0c:	cd bf       	out	0x3d, r28	; 61
   19a0e:	df 91       	pop	r29
   19a10:	cf 91       	pop	r28
   19a12:	1f 91       	pop	r17
   19a14:	0f 91       	pop	r16
   19a16:	ff 90       	pop	r15
   19a18:	ef 90       	pop	r14
   19a1a:	df 90       	pop	r13
   19a1c:	cf 90       	pop	r12
   19a1e:	bf 90       	pop	r11
   19a20:	af 90       	pop	r10
   19a22:	8f 90       	pop	r8
   19a24:	7f 90       	pop	r7
   19a26:	6f 90       	pop	r6
   19a28:	5f 90       	pop	r5
   19a2a:	4f 90       	pop	r4
   19a2c:	3f 90       	pop	r3
   19a2e:	2f 90       	pop	r2
   19a30:	08 95       	ret

00019a32 <lif_create_volume>:
/// @param[in] dirstart:   Directory start sector
/// @param[in] dirsectors: Directory sectors
/// @return pointer to LIF structure
MEMSPACE
lif_t *lif_create_volume(char *imagename, char *liflabel, long dirstart, long dirsectors, long filesectors)
{
   19a32:	a9 e2       	ldi	r26, 0x29	; 41
   19a34:	b1 e0       	ldi	r27, 0x01	; 1
   19a36:	ef e1       	ldi	r30, 0x1F	; 31
   19a38:	fd ec       	ldi	r31, 0xCD	; 205
   19a3a:	0c 94 ff e6 	jmp	0x1cdfe	; 0x1cdfe <__prologue_saves__>
   19a3e:	4c 01       	movw	r8, r24
   19a40:	3b 01       	movw	r6, r22
   19a42:	19 01       	movw	r2, r18
   19a44:	2a 01       	movw	r4, r20
   19a46:	ca 5d       	subi	r28, 0xDA	; 218
   19a48:	de 4f       	sbci	r29, 0xFE	; 254
   19a4a:	e8 82       	st	Y, r14
   19a4c:	f9 82       	std	Y+1, r15	; 0x01
   19a4e:	0a 83       	std	Y+2, r16	; 0x02
   19a50:	1b 83       	std	Y+3, r17	; 0x03
   19a52:	c6 52       	subi	r28, 0x26	; 38
   19a54:	d1 40       	sbci	r29, 0x01	; 1
   19a56:	c2 5e       	subi	r28, 0xE2	; 226
   19a58:	de 4f       	sbci	r29, 0xFE	; 254
   19a5a:	a8 82       	st	Y, r10
   19a5c:	b9 82       	std	Y+1, r11	; 0x01
   19a5e:	ca 82       	std	Y+2, r12	; 0x02
   19a60:	db 82       	std	Y+3, r13	; 0x03
   19a62:	ce 51       	subi	r28, 0x1E	; 30
   19a64:	d1 40       	sbci	r29, 0x01	; 1
    long i;
    long offset;
    long count;
    uint8_t buffer[LIF_SECTOR_SIZE];

    time_t t = time(NULL);
   19a66:	80 e0       	ldi	r24, 0x00	; 0
   19a68:	90 e0       	ldi	r25, 0x00	; 0
   19a6a:	0e 94 32 38 	call	0x7064	; 0x7064 <time>
   19a6e:	5b 01       	movw	r10, r22
   19a70:	6c 01       	movw	r12, r24

    lif_t *LIF = lif_calloc(sizeof(lif_t)+4);
   19a72:	64 e7       	ldi	r22, 0x74	; 116
   19a74:	70 e0       	ldi	r23, 0x00	; 0
   19a76:	80 e0       	ldi	r24, 0x00	; 0
   19a78:	90 e0       	ldi	r25, 0x00	; 0
   19a7a:	0e 94 ec c0 	call	0x181d8	; 0x181d8 <lif_calloc>
   19a7e:	7c 01       	movw	r14, r24
    if(LIF == NULL)
   19a80:	89 2b       	or	r24, r25
   19a82:	09 f4       	brne	.+2      	; 0x19a86 <lif_create_volume+0x54>
   19a84:	b6 c2       	rjmp	.+1388   	; 0x19ff2 <lif_create_volume+0x5c0>
        return(NULL);

    printf("Creating:%s, Label:[%s], Directory Start %ld, Directory Size: %ld, File Sectors:%ld\n",
   19a86:	c2 5e       	subi	r28, 0xE2	; 226
   19a88:	de 4f       	sbci	r29, 0xFE	; 254
   19a8a:	28 81       	ld	r18, Y
   19a8c:	39 81       	ldd	r19, Y+1	; 0x01
   19a8e:	4a 81       	ldd	r20, Y+2	; 0x02
   19a90:	5b 81       	ldd	r21, Y+3	; 0x03
   19a92:	ce 51       	subi	r28, 0x1E	; 30
   19a94:	d1 40       	sbci	r29, 0x01	; 1
   19a96:	ed b7       	in	r30, 0x3d	; 61
   19a98:	fe b7       	in	r31, 0x3e	; 62
   19a9a:	20 8b       	std	Z+16, r18	; 0x10
   19a9c:	31 8b       	std	Z+17, r19	; 0x11
   19a9e:	42 8b       	std	Z+18, r20	; 0x12
   19aa0:	53 8b       	std	Z+19, r21	; 0x13
   19aa2:	ca 5d       	subi	r28, 0xDA	; 218
   19aa4:	de 4f       	sbci	r29, 0xFE	; 254
   19aa6:	28 81       	ld	r18, Y
   19aa8:	39 81       	ldd	r19, Y+1	; 0x01
   19aaa:	4a 81       	ldd	r20, Y+2	; 0x02
   19aac:	5b 81       	ldd	r21, Y+3	; 0x03
   19aae:	c6 52       	subi	r28, 0x26	; 38
   19ab0:	d1 40       	sbci	r29, 0x01	; 1
   19ab2:	24 87       	std	Z+12, r18	; 0x0c
   19ab4:	35 87       	std	Z+13, r19	; 0x0d
   19ab6:	46 87       	std	Z+14, r20	; 0x0e
   19ab8:	57 87       	std	Z+15, r21	; 0x0f
   19aba:	20 86       	std	Z+8, r2	; 0x08
   19abc:	31 86       	std	Z+9, r3	; 0x09
   19abe:	42 86       	std	Z+10, r4	; 0x0a
   19ac0:	53 86       	std	Z+11, r5	; 0x0b
   19ac2:	77 82       	std	Z+7, r7	; 0x07
   19ac4:	66 82       	std	Z+6, r6	; 0x06
   19ac6:	95 82       	std	Z+5, r9	; 0x05
   19ac8:	84 82       	std	Z+4, r8	; 0x04
   19aca:	8f eb       	ldi	r24, 0xBF	; 191
   19acc:	9d e3       	ldi	r25, 0x3D	; 61
   19ace:	a0 e0       	ldi	r26, 0x00	; 0
   19ad0:	81 83       	std	Z+1, r24	; 0x01
   19ad2:	92 83       	std	Z+2, r25	; 0x02
   19ad4:	a3 83       	std	Z+3, r26	; 0x03
   19ad6:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
        imagename, liflabel, dirstart, dirsectors, filesectors );

    if(debuglevel & LIF_DEBUG)
   19ada:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19ade:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19ae2:	92 ff       	sbrs	r25, 2
   19ae4:	04 c0       	rjmp	.+8      	; 0x19aee <lif_create_volume+0xbc>
        lif_dump_vol(LIF,"lif_create_volume");
   19ae6:	6b e2       	ldi	r22, 0x2B	; 43
   19ae8:	76 e1       	ldi	r23, 0x16	; 22
   19aea:	c7 01       	movw	r24, r14
   19aec:	c9 d8       	rcall	.-3694   	; 0x18c80 <lif_dump_vol>

    lif_image_clear(LIF);
   19aee:	c7 01       	movw	r24, r14
   19af0:	b2 d8       	rcall	.-3740   	; 0x18c56 <lif_image_clear>

// Initialize volume header
    LIF->VOL.LIFid = 0x8000;
   19af2:	80 e0       	ldi	r24, 0x00	; 0
   19af4:	90 e8       	ldi	r25, 0x80	; 128
   19af6:	f7 01       	movw	r30, r14
   19af8:	95 a3       	std	Z+37, r25	; 0x25
   19afa:	84 a3       	std	Z+36, r24	; 0x24
    lif_fixname(LIF->VOL.Label, liflabel, 6);
   19afc:	46 e0       	ldi	r20, 0x06	; 6
   19afe:	50 e0       	ldi	r21, 0x00	; 0
   19b00:	b3 01       	movw	r22, r6
   19b02:	c7 01       	movw	r24, r14
   19b04:	86 96       	adiw	r24, 0x26	; 38
   19b06:	0e 94 2f c3 	call	0x1865e	; 0x1865e <lif_fixname>
    LIF->VOL.DirStartSector = dirstart;
   19b0a:	f7 01       	movw	r30, r14
   19b0c:	25 a6       	std	Z+45, r2	; 0x2d
   19b0e:	36 a6       	std	Z+46, r3	; 0x2e
   19b10:	47 a6       	std	Z+47, r4	; 0x2f
   19b12:	50 aa       	std	Z+48, r5	; 0x30
    LIF->VOL.DirSectors = dirsectors;
   19b14:	ca 5d       	subi	r28, 0xDA	; 218
   19b16:	de 4f       	sbci	r29, 0xFE	; 254
   19b18:	28 81       	ld	r18, Y
   19b1a:	39 81       	ldd	r19, Y+1	; 0x01
   19b1c:	4a 81       	ldd	r20, Y+2	; 0x02
   19b1e:	5b 81       	ldd	r21, Y+3	; 0x03
   19b20:	c6 52       	subi	r28, 0x26	; 38
   19b22:	d1 40       	sbci	r29, 0x01	; 1
   19b24:	25 ab       	std	Z+53, r18	; 0x35
   19b26:	36 ab       	std	Z+54, r19	; 0x36
   19b28:	47 ab       	std	Z+55, r20	; 0x37
   19b2a:	50 af       	std	Z+56, r21	; 0x38
    LIF->VOL.System3000LIFid = 0x1000;
   19b2c:	80 e0       	ldi	r24, 0x00	; 0
   19b2e:	90 e1       	ldi	r25, 0x10	; 16
   19b30:	92 ab       	std	Z+50, r25	; 0x32
   19b32:	81 ab       	std	Z+49, r24	; 0x31
    LIF->VOL.tracks_per_side = 0;
   19b34:	fd 96       	adiw	r30, 0x3d	; 61
   19b36:	10 82       	st	Z, r1
   19b38:	11 82       	std	Z+1, r1	; 0x01
   19b3a:	12 82       	std	Z+2, r1	; 0x02
   19b3c:	13 82       	std	Z+3, r1	; 0x03
    LIF->VOL.sides = 0;
   19b3e:	34 96       	adiw	r30, 0x04	; 4
   19b40:	10 82       	st	Z, r1
   19b42:	11 82       	std	Z+1, r1	; 0x01
   19b44:	12 82       	std	Z+2, r1	; 0x02
   19b46:	13 82       	std	Z+3, r1	; 0x03
    LIF->VOL.sectors_per_track = 0;
   19b48:	34 96       	adiw	r30, 0x04	; 4
   19b4a:	10 82       	st	Z, r1
   19b4c:	11 82       	std	Z+1, r1	; 0x01
   19b4e:	12 82       	std	Z+2, r1	; 0x02
   19b50:	13 82       	std	Z+3, r1	; 0x03
///@brief 0 causes time to return the current date

    lif_time2lifbcd(t, LIF->VOL.date);
   19b52:	a7 01       	movw	r20, r14
   19b54:	47 5b       	subi	r20, 0xB7	; 183
   19b56:	5f 4f       	sbci	r21, 0xFF	; 255
   19b58:	c6 01       	movw	r24, r12
   19b5a:	b5 01       	movw	r22, r10
   19b5c:	0e 94 54 c5 	call	0x18aa8	; 0x18aa8 <lif_time2lifbcd>

// update LIF headers
    LIF->name = lif_stralloc(imagename);
   19b60:	c4 01       	movw	r24, r8
   19b62:	0e 94 37 c1 	call	0x1826e	; 0x1826e <lif_stralloc>
   19b66:	d7 01       	movw	r26, r14
   19b68:	8d 93       	st	X+, r24
   19b6a:	9c 93       	st	X, r25
    if(LIF->name == NULL)
   19b6c:	89 2b       	or	r24, r25
   19b6e:	09 f4       	brne	.+2      	; 0x19b72 <lif_create_volume+0x140>
   19b70:	35 c2       	rjmp	.+1130   	; 0x19fdc <lif_create_volume+0x5aa>
        lif_close_volume(LIF);
        return(NULL);
    }

// Initilize all LIF headers
    LIF->filesectors = filesectors;
   19b72:	c2 5e       	subi	r28, 0xE2	; 226
   19b74:	de 4f       	sbci	r29, 0xFE	; 254
   19b76:	28 81       	ld	r18, Y
   19b78:	39 81       	ldd	r19, Y+1	; 0x01
   19b7a:	4a 81       	ldd	r20, Y+2	; 0x02
   19b7c:	5b 81       	ldd	r21, Y+3	; 0x03
   19b7e:	ce 51       	subi	r28, 0x1E	; 30
   19b80:	d1 40       	sbci	r29, 0x01	; 1
   19b82:	f7 01       	movw	r30, r14
   19b84:	20 8b       	std	Z+16, r18	; 0x10
   19b86:	31 8b       	std	Z+17, r19	; 0x11
   19b88:	42 8b       	std	Z+18, r20	; 0x12
   19b8a:	53 8b       	std	Z+19, r21	; 0x13
    LIF->filestart = dirstart + dirsectors;
   19b8c:	ca 5d       	subi	r28, 0xDA	; 218
   19b8e:	de 4f       	sbci	r29, 0xFE	; 254
   19b90:	88 81       	ld	r24, Y
   19b92:	99 81       	ldd	r25, Y+1	; 0x01
   19b94:	aa 81       	ldd	r26, Y+2	; 0x02
   19b96:	bb 81       	ldd	r27, Y+3	; 0x03
   19b98:	c6 52       	subi	r28, 0x26	; 38
   19b9a:	d1 40       	sbci	r29, 0x01	; 1
   19b9c:	82 0d       	add	r24, r2
   19b9e:	93 1d       	adc	r25, r3
   19ba0:	a4 1d       	adc	r26, r4
   19ba2:	b5 1d       	adc	r27, r5
   19ba4:	84 87       	std	Z+12, r24	; 0x0c
   19ba6:	95 87       	std	Z+13, r25	; 0x0d
   19ba8:	a6 87       	std	Z+14, r26	; 0x0e
   19baa:	b7 87       	std	Z+15, r27	; 0x0f
    LIF->sectors = (LIF->filestart+LIF->filesectors);
   19bac:	82 0f       	add	r24, r18
   19bae:	93 1f       	adc	r25, r19
   19bb0:	a4 1f       	adc	r26, r20
   19bb2:	b5 1f       	adc	r27, r21
   19bb4:	84 83       	std	Z+4, r24	; 0x04
   19bb6:	95 83       	std	Z+5, r25	; 0x05
   19bb8:	a6 83       	std	Z+6, r26	; 0x06
   19bba:	b7 83       	std	Z+7, r27	; 0x07
    LIF->imagebytes = LIF->sectors * (long)LIF_SECTOR_SIZE;
   19bbc:	ba 2f       	mov	r27, r26
   19bbe:	a9 2f       	mov	r26, r25
   19bc0:	98 2f       	mov	r25, r24
   19bc2:	88 27       	eor	r24, r24
   19bc4:	80 87       	std	Z+8, r24	; 0x08
   19bc6:	91 87       	std	Z+9, r25	; 0x09
   19bc8:	a2 87       	std	Z+10, r26	; 0x0a
   19bca:	b3 87       	std	Z+11, r27	; 0x0b
    LIF->freesectors = LIF->filesectors;
   19bcc:	20 8f       	std	Z+24, r18	; 0x18
   19bce:	31 8f       	std	Z+25, r19	; 0x19
   19bd0:	42 8f       	std	Z+26, r20	; 0x1a
   19bd2:	53 8f       	std	Z+27, r21	; 0x1b
    LIF->usedsectors = 0;
   19bd4:	14 8a       	std	Z+20, r1	; 0x14
   19bd6:	15 8a       	std	Z+21, r1	; 0x15
   19bd8:	16 8a       	std	Z+22, r1	; 0x16
   19bda:	17 8a       	std	Z+23, r1	; 0x17
    LIF->files = 0;
   19bdc:	15 8e       	std	Z+29, r1	; 0x1d
   19bde:	14 8e       	std	Z+28, r1	; 0x1c
    LIF->purged = 0;
   19be0:	17 8e       	std	Z+31, r1	; 0x1f
   19be2:	16 8e       	std	Z+30, r1	; 0x1e
    LIF->dirindex = 0;
   19be4:	11 a2       	std	Z+33, r1	; 0x21
   19be6:	10 a2       	std	Z+32, r1	; 0x20
    LIF->EOFindex = 0;
   19be8:	13 a2       	std	Z+35, r1	; 0x23
   19bea:	12 a2       	std	Z+34, r1	; 0x22

    memset(buffer,0,LIF_SECTOR_SIZE);
   19bec:	61 2c       	mov	r6, r1
   19bee:	77 24       	eor	r7, r7
   19bf0:	73 94       	inc	r7
   19bf2:	9e 01       	movw	r18, r28
   19bf4:	2c 5e       	subi	r18, 0xEC	; 236
   19bf6:	3f 4f       	sbci	r19, 0xFF	; 255
   19bf8:	49 01       	movw	r8, r18
   19bfa:	d9 01       	movw	r26, r18
   19bfc:	f3 01       	movw	r30, r6
   19bfe:	1d 92       	st	X+, r1
   19c00:	31 97       	sbiw	r30, 0x01	; 1
   19c02:	e9 f7       	brne	.-6      	; 0x19bfe <lif_create_volume+0x1cc>

    lif_vol2str(LIF,buffer);
   19c04:	b9 01       	movw	r22, r18
   19c06:	c7 01       	movw	r24, r14
   19c08:	0e 94 6c c3 	call	0x186d8	; 0x186d8 <lif_vol2str>

// Write Volume header
    LIF->fp = lif_open(LIF->name,"wb+");
   19c0c:	66 e1       	ldi	r22, 0x16	; 22
   19c0e:	79 e0       	ldi	r23, 0x09	; 9
   19c10:	d7 01       	movw	r26, r14
   19c12:	8d 91       	ld	r24, X+
   19c14:	9c 91       	ld	r25, X
   19c16:	0e 94 56 c1 	call	0x182ac	; 0x182ac <lif_open>
   19c1a:	f7 01       	movw	r30, r14
   19c1c:	93 83       	std	Z+3, r25	; 0x03
   19c1e:	82 83       	std	Z+2, r24	; 0x02
    if(LIF->fp == NULL)
   19c20:	89 2b       	or	r24, r25
   19c22:	09 f4       	brne	.+2      	; 0x19c26 <lif_create_volume+0x1f4>
   19c24:	db c1       	rjmp	.+950    	; 0x19fdc <lif_create_volume+0x5aa>
    }

    offset = 0;
    count = 0;

    size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   19c26:	00 e0       	ldi	r16, 0x00	; 0
   19c28:	11 e0       	ldi	r17, 0x01	; 1
   19c2a:	20 e0       	ldi	r18, 0x00	; 0
   19c2c:	30 e0       	ldi	r19, 0x00	; 0
   19c2e:	a9 01       	movw	r20, r18
   19c30:	b4 01       	movw	r22, r8
   19c32:	c7 01       	movw	r24, r14
   19c34:	0e 94 2d c2 	call	0x1845a	; 0x1845a <lif_write>
   19c38:	9c 01       	movw	r18, r24
   19c3a:	99 0f       	add	r25, r25
   19c3c:	44 0b       	sbc	r20, r20
   19c3e:	55 0b       	sbc	r21, r21
   19c40:	ca 5e       	subi	r28, 0xEA	; 234
   19c42:	de 4f       	sbci	r29, 0xFE	; 254
   19c44:	28 83       	st	Y, r18
   19c46:	39 83       	std	Y+1, r19	; 0x01
   19c48:	4a 83       	std	Y+2, r20	; 0x02
   19c4a:	5b 83       	std	Y+3, r21	; 0x03
   19c4c:	c6 51       	subi	r28, 0x16	; 22
   19c4e:	d1 40       	sbci	r29, 0x01	; 1

    if(size < LIF_SECTOR_SIZE)
   19c50:	2f 3f       	cpi	r18, 0xFF	; 255
   19c52:	31 05       	cpc	r19, r1
   19c54:	41 05       	cpc	r20, r1
   19c56:	51 05       	cpc	r21, r1
   19c58:	09 f0       	breq	.+2      	; 0x19c5c <lif_create_volume+0x22a>
   19c5a:	0c f4       	brge	.+2      	; 0x19c5e <lif_create_volume+0x22c>
   19c5c:	bf c1       	rjmp	.+894    	; 0x19fdc <lif_create_volume+0x5aa>
        return(NULL);
    }
    offset += size;
    ++count;

    memset(buffer,0,LIF_SECTOR_SIZE);
   19c5e:	d4 01       	movw	r26, r8
   19c60:	f3 01       	movw	r30, r6
   19c62:	1d 92       	st	X+, r1
   19c64:	31 97       	sbiw	r30, 0x01	; 1
   19c66:	e9 f7       	brne	.-6      	; 0x19c62 <lif_create_volume+0x230>

// Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   19c68:	21 e0       	ldi	r18, 0x01	; 1
   19c6a:	30 e0       	ldi	r19, 0x00	; 0
   19c6c:	40 e0       	ldi	r20, 0x00	; 0
   19c6e:	50 e0       	ldi	r21, 0x00	; 0
   19c70:	c6 5e       	subi	r28, 0xE6	; 230
   19c72:	de 4f       	sbci	r29, 0xFE	; 254
   19c74:	28 83       	st	Y, r18
   19c76:	39 83       	std	Y+1, r19	; 0x01
   19c78:	4a 83       	std	Y+2, r20	; 0x02
   19c7a:	5b 83       	std	Y+3, r21	; 0x03
   19c7c:	ca 51       	subi	r28, 0x1A	; 26
   19c7e:	d1 40       	sbci	r29, 0x01	; 1
   19c80:	64 01       	movw	r12, r8
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        printf("\tWrote: %ld\r", count);
   19c82:	82 eb       	ldi	r24, 0xB2	; 178
   19c84:	9d e3       	ldi	r25, 0x3D	; 61
   19c86:	3c 01       	movw	r6, r24
   19c88:	81 2c       	mov	r8, r1
    ++count;

    memset(buffer,0,LIF_SECTOR_SIZE);

// Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   19c8a:	c6 5e       	subi	r28, 0xE6	; 230
   19c8c:	de 4f       	sbci	r29, 0xFE	; 254
   19c8e:	88 81       	ld	r24, Y
   19c90:	99 81       	ldd	r25, Y+1	; 0x01
   19c92:	aa 81       	ldd	r26, Y+2	; 0x02
   19c94:	bb 81       	ldd	r27, Y+3	; 0x03
   19c96:	ca 51       	subi	r28, 0x1A	; 26
   19c98:	d1 40       	sbci	r29, 0x01	; 1
   19c9a:	82 15       	cp	r24, r2
   19c9c:	93 05       	cpc	r25, r3
   19c9e:	a4 05       	cpc	r26, r4
   19ca0:	b5 05       	cpc	r27, r5
   19ca2:	0c f0       	brlt	.+2      	; 0x19ca6 <lif_create_volume+0x274>
   19ca4:	55 c0       	rjmp	.+170    	; 0x19d50 <lif_create_volume+0x31e>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   19ca6:	00 e0       	ldi	r16, 0x00	; 0
   19ca8:	11 e0       	ldi	r17, 0x01	; 1
   19caa:	ca 5e       	subi	r28, 0xEA	; 234
   19cac:	de 4f       	sbci	r29, 0xFE	; 254
   19cae:	28 81       	ld	r18, Y
   19cb0:	39 81       	ldd	r19, Y+1	; 0x01
   19cb2:	4a 81       	ldd	r20, Y+2	; 0x02
   19cb4:	5b 81       	ldd	r21, Y+3	; 0x03
   19cb6:	c6 51       	subi	r28, 0x16	; 22
   19cb8:	d1 40       	sbci	r29, 0x01	; 1
   19cba:	b6 01       	movw	r22, r12
   19cbc:	c7 01       	movw	r24, r14
   19cbe:	0e 94 2d c2 	call	0x1845a	; 0x1845a <lif_write>
   19cc2:	09 2e       	mov	r0, r25
   19cc4:	00 0c       	add	r0, r0
   19cc6:	aa 0b       	sbc	r26, r26
   19cc8:	bb 0b       	sbc	r27, r27
        if(size < LIF_SECTOR_SIZE)
   19cca:	8f 3f       	cpi	r24, 0xFF	; 255
   19ccc:	91 05       	cpc	r25, r1
   19cce:	a1 05       	cpc	r26, r1
   19cd0:	b1 05       	cpc	r27, r1
   19cd2:	09 f0       	breq	.+2      	; 0x19cd6 <lif_create_volume+0x2a4>
   19cd4:	0c f4       	brge	.+2      	; 0x19cd8 <lif_create_volume+0x2a6>
   19cd6:	82 c1       	rjmp	.+772    	; 0x19fdc <lif_create_volume+0x5aa>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   19cd8:	ca 5e       	subi	r28, 0xEA	; 234
   19cda:	de 4f       	sbci	r29, 0xFE	; 254
   19cdc:	28 81       	ld	r18, Y
   19cde:	39 81       	ldd	r19, Y+1	; 0x01
   19ce0:	4a 81       	ldd	r20, Y+2	; 0x02
   19ce2:	5b 81       	ldd	r21, Y+3	; 0x03
   19ce4:	c6 51       	subi	r28, 0x16	; 22
   19ce6:	d1 40       	sbci	r29, 0x01	; 1
   19ce8:	28 0f       	add	r18, r24
   19cea:	39 1f       	adc	r19, r25
   19cec:	4a 1f       	adc	r20, r26
   19cee:	5b 1f       	adc	r21, r27
   19cf0:	ca 5e       	subi	r28, 0xEA	; 234
   19cf2:	de 4f       	sbci	r29, 0xFE	; 254
   19cf4:	28 83       	st	Y, r18
   19cf6:	39 83       	std	Y+1, r19	; 0x01
   19cf8:	4a 83       	std	Y+2, r20	; 0x02
   19cfa:	5b 83       	std	Y+3, r21	; 0x03
   19cfc:	c6 51       	subi	r28, 0x16	; 22
   19cfe:	d1 40       	sbci	r29, 0x01	; 1
        printf("\tWrote: %ld\r", count);
   19d00:	c6 5e       	subi	r28, 0xE6	; 230
   19d02:	de 4f       	sbci	r29, 0xFE	; 254
   19d04:	88 81       	ld	r24, Y
   19d06:	99 81       	ldd	r25, Y+1	; 0x01
   19d08:	aa 81       	ldd	r26, Y+2	; 0x02
   19d0a:	bb 81       	ldd	r27, Y+3	; 0x03
   19d0c:	ca 51       	subi	r28, 0x1A	; 26
   19d0e:	d1 40       	sbci	r29, 0x01	; 1
   19d10:	ed b7       	in	r30, 0x3d	; 61
   19d12:	fe b7       	in	r31, 0x3e	; 62
   19d14:	84 83       	std	Z+4, r24	; 0x04
   19d16:	95 83       	std	Z+5, r25	; 0x05
   19d18:	a6 83       	std	Z+6, r26	; 0x06
   19d1a:	b7 83       	std	Z+7, r27	; 0x07
   19d1c:	61 82       	std	Z+1, r6	; 0x01
   19d1e:	72 82       	std	Z+2, r7	; 0x02
   19d20:	83 82       	std	Z+3, r8	; 0x03
   19d22:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    ++count;

    memset(buffer,0,LIF_SECTOR_SIZE);

// Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   19d26:	c6 5e       	subi	r28, 0xE6	; 230
   19d28:	de 4f       	sbci	r29, 0xFE	; 254
   19d2a:	28 81       	ld	r18, Y
   19d2c:	39 81       	ldd	r19, Y+1	; 0x01
   19d2e:	4a 81       	ldd	r20, Y+2	; 0x02
   19d30:	5b 81       	ldd	r21, Y+3	; 0x03
   19d32:	ca 51       	subi	r28, 0x1A	; 26
   19d34:	d1 40       	sbci	r29, 0x01	; 1
   19d36:	2f 5f       	subi	r18, 0xFF	; 255
   19d38:	3f 4f       	sbci	r19, 0xFF	; 255
   19d3a:	4f 4f       	sbci	r20, 0xFF	; 255
   19d3c:	5f 4f       	sbci	r21, 0xFF	; 255
   19d3e:	c6 5e       	subi	r28, 0xE6	; 230
   19d40:	de 4f       	sbci	r29, 0xFE	; 254
   19d42:	28 83       	st	Y, r18
   19d44:	39 83       	std	Y+1, r19	; 0x01
   19d46:	4a 83       	std	Y+2, r20	; 0x02
   19d48:	5b 83       	std	Y+3, r21	; 0x03
   19d4a:	ca 51       	subi	r28, 0x1A	; 26
   19d4c:	d1 40       	sbci	r29, 0x01	; 1
   19d4e:	9d cf       	rjmp	.-198    	; 0x19c8a <lif_create_volume+0x258>
        printf("\tWrote: %ld\r", count);
        ++count;
    }

// Write Directory sectors
    lif_dir_clear(LIF);
   19d50:	c7 01       	movw	r24, r14
   19d52:	0e 94 31 c6 	call	0x18c62	; 0x18c62 <lif_dir_clear>
    LIF->DIR.FileType = 0xffff;
   19d56:	8f ef       	ldi	r24, 0xFF	; 255
   19d58:	9f ef       	ldi	r25, 0xFF	; 255
   19d5a:	f7 01       	movw	r30, r14
   19d5c:	e6 5a       	subi	r30, 0xA6	; 166
   19d5e:	ff 4f       	sbci	r31, 0xFF	; 255
   19d60:	91 83       	std	Z+1, r25	; 0x01
   19d62:	80 83       	st	Z, r24
   19d64:	46 01       	movw	r8, r12
   19d66:	6e 01       	movw	r12, r28
   19d68:	9c ee       	ldi	r25, 0xEC	; 236
   19d6a:	c9 1a       	sub	r12, r25
   19d6c:	9e ef       	ldi	r25, 0xFE	; 254
   19d6e:	d9 0a       	sbc	r13, r25

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);
   19d70:	b4 01       	movw	r22, r8
   19d72:	c7 01       	movw	r24, r14
   19d74:	0e 94 78 c4 	call	0x188f0	; 0x188f0 <lif_dir2str>
   19d78:	a0 e2       	ldi	r26, 0x20	; 32
   19d7a:	8a 0e       	add	r8, r26
   19d7c:	91 1c       	adc	r9, r1

// Write Directory sectors
    lif_dir_clear(LIF);
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
   19d7e:	c8 14       	cp	r12, r8
   19d80:	d9 04       	cpc	r13, r9
   19d82:	b1 f7       	brne	.-20     	; 0x19d70 <lif_create_volume+0x33e>
   19d84:	a1 2c       	mov	r10, r1
   19d86:	b1 2c       	mov	r11, r1
   19d88:	65 01       	movw	r12, r10
   19d8a:	fe 01       	movw	r30, r28
   19d8c:	74 96       	adiw	r30, 0x14	; 20
   19d8e:	cc 5e       	subi	r28, 0xEC	; 236
   19d90:	de 4f       	sbci	r29, 0xFE	; 254
   19d92:	f9 83       	std	Y+1, r31	; 0x01
   19d94:	e8 83       	st	Y, r30
   19d96:	c4 51       	subi	r28, 0x14	; 20
   19d98:	d1 40       	sbci	r29, 0x01	; 1
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        if((count % 100) == 0)
   19d9a:	84 e6       	ldi	r24, 0x64	; 100
   19d9c:	28 2e       	mov	r2, r24
   19d9e:	31 2c       	mov	r3, r1
   19da0:	41 2c       	mov	r4, r1
   19da2:	51 2c       	mov	r5, r1
            printf("\tWrote: %ld\r", count);
   19da4:	85 ea       	ldi	r24, 0xA5	; 165
   19da6:	9d e3       	ldi	r25, 0x3D	; 61
   19da8:	3c 01       	movw	r6, r24
   19daa:	81 2c       	mov	r8, r1
   19dac:	c6 5e       	subi	r28, 0xE6	; 230
   19dae:	de 4f       	sbci	r29, 0xFE	; 254
   19db0:	28 81       	ld	r18, Y
   19db2:	39 81       	ldd	r19, Y+1	; 0x01
   19db4:	4a 81       	ldd	r20, Y+2	; 0x02
   19db6:	5b 81       	ldd	r21, Y+3	; 0x03
   19db8:	ca 51       	subi	r28, 0x1A	; 26
   19dba:	d1 40       	sbci	r29, 0x01	; 1
   19dbc:	2a 0d       	add	r18, r10
   19dbe:	3b 1d       	adc	r19, r11
   19dc0:	4c 1d       	adc	r20, r12
   19dc2:	5d 1d       	adc	r21, r13
   19dc4:	ce 5d       	subi	r28, 0xDE	; 222
   19dc6:	de 4f       	sbci	r29, 0xFE	; 254
   19dc8:	28 83       	st	Y, r18
   19dca:	39 83       	std	Y+1, r19	; 0x01
   19dcc:	4a 83       	std	Y+2, r20	; 0x02
   19dce:	5b 83       	std	Y+3, r21	; 0x03
   19dd0:	c2 52       	subi	r28, 0x22	; 34
   19dd2:	d1 40       	sbci	r29, 0x01	; 1
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);

    for(i=0;i<dirsectors;++i)
   19dd4:	ca 5d       	subi	r28, 0xDA	; 218
   19dd6:	de 4f       	sbci	r29, 0xFE	; 254
   19dd8:	88 81       	ld	r24, Y
   19dda:	99 81       	ldd	r25, Y+1	; 0x01
   19ddc:	aa 81       	ldd	r26, Y+2	; 0x02
   19dde:	bb 81       	ldd	r27, Y+3	; 0x03
   19de0:	c6 52       	subi	r28, 0x26	; 38
   19de2:	d1 40       	sbci	r29, 0x01	; 1
   19de4:	a8 16       	cp	r10, r24
   19de6:	b9 06       	cpc	r11, r25
   19de8:	ca 06       	cpc	r12, r26
   19dea:	db 06       	cpc	r13, r27
   19dec:	0c f0       	brlt	.+2      	; 0x19df0 <lif_create_volume+0x3be>
   19dee:	58 c0       	rjmp	.+176    	; 0x19ea0 <lif_create_volume+0x46e>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   19df0:	00 e0       	ldi	r16, 0x00	; 0
   19df2:	11 e0       	ldi	r17, 0x01	; 1
   19df4:	ca 5e       	subi	r28, 0xEA	; 234
   19df6:	de 4f       	sbci	r29, 0xFE	; 254
   19df8:	28 81       	ld	r18, Y
   19dfa:	39 81       	ldd	r19, Y+1	; 0x01
   19dfc:	4a 81       	ldd	r20, Y+2	; 0x02
   19dfe:	5b 81       	ldd	r21, Y+3	; 0x03
   19e00:	c6 51       	subi	r28, 0x16	; 22
   19e02:	d1 40       	sbci	r29, 0x01	; 1
   19e04:	be 01       	movw	r22, r28
   19e06:	6c 5e       	subi	r22, 0xEC	; 236
   19e08:	7f 4f       	sbci	r23, 0xFF	; 255
   19e0a:	c7 01       	movw	r24, r14
   19e0c:	0e 94 2d c2 	call	0x1845a	; 0x1845a <lif_write>
   19e10:	09 2e       	mov	r0, r25
   19e12:	00 0c       	add	r0, r0
   19e14:	aa 0b       	sbc	r26, r26
   19e16:	bb 0b       	sbc	r27, r27
        if(size < LIF_SECTOR_SIZE)
   19e18:	8f 3f       	cpi	r24, 0xFF	; 255
   19e1a:	91 05       	cpc	r25, r1
   19e1c:	a1 05       	cpc	r26, r1
   19e1e:	b1 05       	cpc	r27, r1
   19e20:	09 f0       	breq	.+2      	; 0x19e24 <lif_create_volume+0x3f2>
   19e22:	0c f4       	brge	.+2      	; 0x19e26 <lif_create_volume+0x3f4>
   19e24:	db c0       	rjmp	.+438    	; 0x19fdc <lif_create_volume+0x5aa>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   19e26:	ca 5e       	subi	r28, 0xEA	; 234
   19e28:	de 4f       	sbci	r29, 0xFE	; 254
   19e2a:	28 81       	ld	r18, Y
   19e2c:	39 81       	ldd	r19, Y+1	; 0x01
   19e2e:	4a 81       	ldd	r20, Y+2	; 0x02
   19e30:	5b 81       	ldd	r21, Y+3	; 0x03
   19e32:	c6 51       	subi	r28, 0x16	; 22
   19e34:	d1 40       	sbci	r29, 0x01	; 1
   19e36:	28 0f       	add	r18, r24
   19e38:	39 1f       	adc	r19, r25
   19e3a:	4a 1f       	adc	r20, r26
   19e3c:	5b 1f       	adc	r21, r27
   19e3e:	ca 5e       	subi	r28, 0xEA	; 234
   19e40:	de 4f       	sbci	r29, 0xFE	; 254
   19e42:	28 83       	st	Y, r18
   19e44:	39 83       	std	Y+1, r19	; 0x01
   19e46:	4a 83       	std	Y+2, r20	; 0x02
   19e48:	5b 83       	std	Y+3, r21	; 0x03
   19e4a:	c6 51       	subi	r28, 0x16	; 22
   19e4c:	d1 40       	sbci	r29, 0x01	; 1
        if((count % 100) == 0)
   19e4e:	ce 5d       	subi	r28, 0xDE	; 222
   19e50:	de 4f       	sbci	r29, 0xFE	; 254
   19e52:	68 81       	ld	r22, Y
   19e54:	79 81       	ldd	r23, Y+1	; 0x01
   19e56:	8a 81       	ldd	r24, Y+2	; 0x02
   19e58:	9b 81       	ldd	r25, Y+3	; 0x03
   19e5a:	c2 52       	subi	r28, 0x22	; 34
   19e5c:	d1 40       	sbci	r29, 0x01	; 1
   19e5e:	a2 01       	movw	r20, r4
   19e60:	91 01       	movw	r18, r2
   19e62:	0e 94 b4 e6 	call	0x1cd68	; 0x1cd68 <__divmodsi4>
   19e66:	67 2b       	or	r22, r23
   19e68:	68 2b       	or	r22, r24
   19e6a:	69 2b       	or	r22, r25
   19e6c:	99 f4       	brne	.+38     	; 0x19e94 <lif_create_volume+0x462>
            printf("\tWrote: %ld\r", count);
   19e6e:	ce 5d       	subi	r28, 0xDE	; 222
   19e70:	de 4f       	sbci	r29, 0xFE	; 254
   19e72:	88 81       	ld	r24, Y
   19e74:	99 81       	ldd	r25, Y+1	; 0x01
   19e76:	aa 81       	ldd	r26, Y+2	; 0x02
   19e78:	bb 81       	ldd	r27, Y+3	; 0x03
   19e7a:	c2 52       	subi	r28, 0x22	; 34
   19e7c:	d1 40       	sbci	r29, 0x01	; 1
   19e7e:	ed b7       	in	r30, 0x3d	; 61
   19e80:	fe b7       	in	r31, 0x3e	; 62
   19e82:	84 83       	std	Z+4, r24	; 0x04
   19e84:	95 83       	std	Z+5, r25	; 0x05
   19e86:	a6 83       	std	Z+6, r26	; 0x06
   19e88:	b7 83       	std	Z+7, r27	; 0x07
   19e8a:	61 82       	std	Z+1, r6	; 0x01
   19e8c:	72 82       	std	Z+2, r7	; 0x02
   19e8e:	83 82       	std	Z+3, r8	; 0x03
   19e90:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);

    for(i=0;i<dirsectors;++i)
   19e94:	ff ef       	ldi	r31, 0xFF	; 255
   19e96:	af 1a       	sub	r10, r31
   19e98:	bf 0a       	sbc	r11, r31
   19e9a:	cf 0a       	sbc	r12, r31
   19e9c:	df 0a       	sbc	r13, r31
   19e9e:	86 cf       	rjmp	.-244    	; 0x19dac <lif_create_volume+0x37a>
            printf("\tWrote: %ld\r", count);
        ++count;
    }

// File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
   19ea0:	80 e0       	ldi	r24, 0x00	; 0
   19ea2:	91 e0       	ldi	r25, 0x01	; 1
   19ea4:	cc 5e       	subi	r28, 0xEC	; 236
   19ea6:	de 4f       	sbci	r29, 0xFE	; 254
   19ea8:	a8 81       	ld	r26, Y
   19eaa:	b9 81       	ldd	r27, Y+1	; 0x01
   19eac:	c4 51       	subi	r28, 0x14	; 20
   19eae:	d1 40       	sbci	r29, 0x01	; 1
   19eb0:	fc 01       	movw	r30, r24
   19eb2:	1d 92       	st	X+, r1
   19eb4:	31 97       	sbiw	r30, 0x01	; 1
   19eb6:	e9 f7       	brne	.-6      	; 0x19eb2 <lif_create_volume+0x480>
    for(i=0;i<filesectors;++i)
   19eb8:	81 2c       	mov	r8, r1
   19eba:	91 2c       	mov	r9, r1
   19ebc:	54 01       	movw	r10, r8
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        if((count % 100) == 0)
            printf("\tWrote: %ld\r", count);
   19ebe:	88 e9       	ldi	r24, 0x98	; 152
   19ec0:	9d e3       	ldi	r25, 0x3D	; 61
   19ec2:	9c 01       	movw	r18, r24
   19ec4:	40 e0       	ldi	r20, 0x00	; 0
   19ec6:	c6 5e       	subi	r28, 0xE6	; 230
   19ec8:	de 4f       	sbci	r29, 0xFE	; 254
   19eca:	28 83       	st	Y, r18
   19ecc:	39 83       	std	Y+1, r19	; 0x01
   19ece:	4a 83       	std	Y+2, r20	; 0x02
   19ed0:	ca 51       	subi	r28, 0x1A	; 26
   19ed2:	d1 40       	sbci	r29, 0x01	; 1
   19ed4:	ce 5d       	subi	r28, 0xDE	; 222
   19ed6:	de 4f       	sbci	r29, 0xFE	; 254
   19ed8:	48 80       	ld	r4, Y
   19eda:	59 80       	ldd	r5, Y+1	; 0x01
   19edc:	6a 80       	ldd	r6, Y+2	; 0x02
   19ede:	7b 80       	ldd	r7, Y+3	; 0x03
   19ee0:	c2 52       	subi	r28, 0x22	; 34
   19ee2:	d1 40       	sbci	r29, 0x01	; 1
   19ee4:	48 0c       	add	r4, r8
   19ee6:	59 1c       	adc	r5, r9
   19ee8:	6a 1c       	adc	r6, r10
   19eea:	7b 1c       	adc	r7, r11
        ++count;
    }

// File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
    for(i=0;i<filesectors;++i)
   19eec:	c2 5e       	subi	r28, 0xE2	; 226
   19eee:	de 4f       	sbci	r29, 0xFE	; 254
   19ef0:	28 81       	ld	r18, Y
   19ef2:	39 81       	ldd	r19, Y+1	; 0x01
   19ef4:	4a 81       	ldd	r20, Y+2	; 0x02
   19ef6:	5b 81       	ldd	r21, Y+3	; 0x03
   19ef8:	ce 51       	subi	r28, 0x1E	; 30
   19efa:	d1 40       	sbci	r29, 0x01	; 1
   19efc:	82 16       	cp	r8, r18
   19efe:	93 06       	cpc	r9, r19
   19f00:	a4 06       	cpc	r10, r20
   19f02:	b5 06       	cpc	r11, r21
   19f04:	0c f0       	brlt	.+2      	; 0x19f08 <lif_create_volume+0x4d6>
   19f06:	53 c0       	rjmp	.+166    	; 0x19fae <lif_create_volume+0x57c>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   19f08:	00 e0       	ldi	r16, 0x00	; 0
   19f0a:	11 e0       	ldi	r17, 0x01	; 1
   19f0c:	ca 5e       	subi	r28, 0xEA	; 234
   19f0e:	de 4f       	sbci	r29, 0xFE	; 254
   19f10:	28 81       	ld	r18, Y
   19f12:	39 81       	ldd	r19, Y+1	; 0x01
   19f14:	4a 81       	ldd	r20, Y+2	; 0x02
   19f16:	5b 81       	ldd	r21, Y+3	; 0x03
   19f18:	c6 51       	subi	r28, 0x16	; 22
   19f1a:	d1 40       	sbci	r29, 0x01	; 1
   19f1c:	be 01       	movw	r22, r28
   19f1e:	6c 5e       	subi	r22, 0xEC	; 236
   19f20:	7f 4f       	sbci	r23, 0xFF	; 255
   19f22:	c7 01       	movw	r24, r14
   19f24:	0e 94 2d c2 	call	0x1845a	; 0x1845a <lif_write>
   19f28:	09 2e       	mov	r0, r25
   19f2a:	00 0c       	add	r0, r0
   19f2c:	aa 0b       	sbc	r26, r26
   19f2e:	bb 0b       	sbc	r27, r27
        if(size < LIF_SECTOR_SIZE)
   19f30:	8f 3f       	cpi	r24, 0xFF	; 255
   19f32:	91 05       	cpc	r25, r1
   19f34:	a1 05       	cpc	r26, r1
   19f36:	b1 05       	cpc	r27, r1
   19f38:	09 f0       	breq	.+2      	; 0x19f3c <lif_create_volume+0x50a>
   19f3a:	0c f4       	brge	.+2      	; 0x19f3e <lif_create_volume+0x50c>
   19f3c:	4f c0       	rjmp	.+158    	; 0x19fdc <lif_create_volume+0x5aa>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   19f3e:	ca 5e       	subi	r28, 0xEA	; 234
   19f40:	de 4f       	sbci	r29, 0xFE	; 254
   19f42:	28 81       	ld	r18, Y
   19f44:	39 81       	ldd	r19, Y+1	; 0x01
   19f46:	4a 81       	ldd	r20, Y+2	; 0x02
   19f48:	5b 81       	ldd	r21, Y+3	; 0x03
   19f4a:	c6 51       	subi	r28, 0x16	; 22
   19f4c:	d1 40       	sbci	r29, 0x01	; 1
   19f4e:	28 0f       	add	r18, r24
   19f50:	39 1f       	adc	r19, r25
   19f52:	4a 1f       	adc	r20, r26
   19f54:	5b 1f       	adc	r21, r27
   19f56:	ca 5e       	subi	r28, 0xEA	; 234
   19f58:	de 4f       	sbci	r29, 0xFE	; 254
   19f5a:	28 83       	st	Y, r18
   19f5c:	39 83       	std	Y+1, r19	; 0x01
   19f5e:	4a 83       	std	Y+2, r20	; 0x02
   19f60:	5b 83       	std	Y+3, r21	; 0x03
   19f62:	c6 51       	subi	r28, 0x16	; 22
   19f64:	d1 40       	sbci	r29, 0x01	; 1
        if((count % 100) == 0)
   19f66:	c3 01       	movw	r24, r6
   19f68:	b2 01       	movw	r22, r4
   19f6a:	24 e6       	ldi	r18, 0x64	; 100
   19f6c:	30 e0       	ldi	r19, 0x00	; 0
   19f6e:	40 e0       	ldi	r20, 0x00	; 0
   19f70:	50 e0       	ldi	r21, 0x00	; 0
   19f72:	0e 94 b4 e6 	call	0x1cd68	; 0x1cd68 <__divmodsi4>
   19f76:	67 2b       	or	r22, r23
   19f78:	68 2b       	or	r22, r24
   19f7a:	69 2b       	or	r22, r25
   19f7c:	91 f4       	brne	.+36     	; 0x19fa2 <lif_create_volume+0x570>
            printf("\tWrote: %ld\r", count);
   19f7e:	ed b7       	in	r30, 0x3d	; 61
   19f80:	fe b7       	in	r31, 0x3e	; 62
   19f82:	44 82       	std	Z+4, r4	; 0x04
   19f84:	55 82       	std	Z+5, r5	; 0x05
   19f86:	66 82       	std	Z+6, r6	; 0x06
   19f88:	77 82       	std	Z+7, r7	; 0x07
   19f8a:	c6 5e       	subi	r28, 0xE6	; 230
   19f8c:	de 4f       	sbci	r29, 0xFE	; 254
   19f8e:	28 81       	ld	r18, Y
   19f90:	39 81       	ldd	r19, Y+1	; 0x01
   19f92:	4a 81       	ldd	r20, Y+2	; 0x02
   19f94:	ca 51       	subi	r28, 0x1A	; 26
   19f96:	d1 40       	sbci	r29, 0x01	; 1
   19f98:	21 83       	std	Z+1, r18	; 0x01
   19f9a:	32 83       	std	Z+2, r19	; 0x02
   19f9c:	43 83       	std	Z+3, r20	; 0x03
   19f9e:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
        ++count;
    }

// File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
    for(i=0;i<filesectors;++i)
   19fa2:	ff ef       	ldi	r31, 0xFF	; 255
   19fa4:	8f 1a       	sub	r8, r31
   19fa6:	9f 0a       	sbc	r9, r31
   19fa8:	af 0a       	sbc	r10, r31
   19faa:	bf 0a       	sbc	r11, r31
   19fac:	93 cf       	rjmp	.-218    	; 0x19ed4 <lif_create_volume+0x4a2>
        offset += size;
        if((count % 100) == 0)
            printf("\tWrote: %ld\r", count);
        ++count;
    }
    printf("\tWrote: %ld\n", count);
   19fae:	ed b7       	in	r30, 0x3d	; 61
   19fb0:	fe b7       	in	r31, 0x3e	; 62
   19fb2:	44 82       	std	Z+4, r4	; 0x04
   19fb4:	55 82       	std	Z+5, r5	; 0x05
   19fb6:	66 82       	std	Z+6, r6	; 0x06
   19fb8:	77 82       	std	Z+7, r7	; 0x07
   19fba:	8b e8       	ldi	r24, 0x8B	; 139
   19fbc:	9d e3       	ldi	r25, 0x3D	; 61
   19fbe:	a0 e0       	ldi	r26, 0x00	; 0
   19fc0:	81 83       	std	Z+1, r24	; 0x01
   19fc2:	92 83       	std	Z+2, r25	; 0x02
   19fc4:	a3 83       	std	Z+3, r26	; 0x03
   19fc6:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
/// @return void
MEMSPACE
void lif_rewinddir(lif_t *LIF)
{
// Directory index
    LIF->dirindex = -1;
   19fca:	8f ef       	ldi	r24, 0xFF	; 255
   19fcc:	9f ef       	ldi	r25, 0xFF	; 255
   19fce:	f7 01       	movw	r30, r14
   19fd0:	91 a3       	std	Z+33, r25	; 0x21
    printf("\tWrote: %ld\n", count);

    lif_rewinddir(LIF);

// As a sanity check verify basic values
    if( !lif_check_volume(LIF) )
   19fd2:	80 a3       	std	Z+32, r24	; 0x20
   19fd4:	c7 01       	movw	r24, r14
   19fd6:	1a d8       	rcall	.-4044   	; 0x1900c <lif_check_volume>
   19fd8:	89 2b       	or	r24, r25
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   19fda:	19 f4       	brne	.+6      	; 0x19fe2 <lif_create_volume+0x5b0>
   19fdc:	c7 01       	movw	r24, r14
   19fde:	b6 da       	rcall	.-2708   	; 0x1954c <lif_close_volume>
   19fe0:	08 c0       	rjmp	.+16     	; 0x19ff2 <lif_create_volume+0x5c0>
        lif_closedir(LIF);
        return(NULL);
    }

// Scan directory and verify values
    if( !lif_updatefree(LIF))
   19fe2:	c7 01       	movw	r24, r14
   19fe4:	1c dc       	rcall	.-1992   	; 0x1981e <lif_updatefree>
   19fe6:	6c 01       	movw	r12, r24
   19fe8:	89 2b       	or	r24, r25
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   19fea:	31 f4       	brne	.+12     	; 0x19ff8 <lif_create_volume+0x5c6>
   19fec:	c7 01       	movw	r24, r14
   19fee:	ae da       	rcall	.-2724   	; 0x1954c <lif_close_volume>

// Scan directory and verify values
    if( !lif_updatefree(LIF))
    {
        lif_closedir(LIF);
        return(NULL);
   19ff0:	04 c0       	rjmp	.+8      	; 0x19ffa <lif_create_volume+0x5c8>

    time_t t = time(NULL);

    lif_t *LIF = lif_calloc(sizeof(lif_t)+4);
    if(LIF == NULL)
        return(NULL);
   19ff2:	c1 2c       	mov	r12, r1
   19ff4:	d1 2c       	mov	r13, r1
   19ff6:	01 c0       	rjmp	.+2      	; 0x19ffa <lif_create_volume+0x5c8>
   19ff8:	67 01       	movw	r12, r14
        lif_closedir(LIF);
        return(NULL);
    }

    return(LIF);
}
   19ffa:	c6 01       	movw	r24, r12
   19ffc:	c7 5d       	subi	r28, 0xD7	; 215
   19ffe:	de 4f       	sbci	r29, 0xFE	; 254
   1a000:	e2 e1       	ldi	r30, 0x12	; 18
   1a002:	0c 94 1b e7 	jmp	0x1ce36	; 0x1ce36 <__epilogue_restores__>

0001a006 <lif_newdir>:
/// @param[in] *LIF: LIF pointer
/// @param[in] sectors: try to find specified free space
/// @return index or free record or -1 on error
MEMSPACE
int lif_newdir(lif_t *LIF, long sectors)
{
   1a006:	ad e1       	ldi	r26, 0x1D	; 29
   1a008:	b0 e0       	ldi	r27, 0x00	; 0
   1a00a:	e9 e0       	ldi	r30, 0x09	; 9
   1a00c:	f0 ed       	ldi	r31, 0xD0	; 208
   1a00e:	0c 94 ff e6 	jmp	0x1cdfe	; 0x1cdfe <__prologue_saves__>
   1a012:	9d 8f       	std	Y+29, r25	; 0x1d
   1a014:	8c 8f       	std	Y+28, r24	; 0x1c
   1a016:	4a 01       	movw	r8, r20
   1a018:	5b 01       	movw	r10, r22

// Directory index
    index = 0;

// Start of free space
    start = LIF->filestart;
   1a01a:	fc 01       	movw	r30, r24
   1a01c:	c4 84       	ldd	r12, Z+12	; 0x0c
   1a01e:	d5 84       	ldd	r13, Z+13	; 0x0d
   1a020:	e6 84       	ldd	r14, Z+14	; 0x0e
   1a022:	f7 84       	ldd	r15, Z+15	; 0x0f

// Update all file information
    if(lif_updatefree(LIF) == NULL)
   1a024:	fc db       	rcall	.-2056   	; 0x1981e <lif_updatefree>
   1a026:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a028:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a02a:	40 8d       	ldd	r20, Z+24	; 0x18
   1a02c:	51 8d       	ldd	r21, Z+25	; 0x19
   1a02e:	62 8d       	ldd	r22, Z+26	; 0x1a
   1a030:	73 8d       	ldd	r23, Z+27	; 0x1b
   1a032:	89 2b       	or	r24, r25
   1a034:	99 f4       	brne	.+38     	; 0x1a05c <lif_newdir+0x56>
    {
        printf("lif_newdir: not enough free space:[%ld] for size:[%ld]\n", (long)LIF->freesectors, (long) sectors);
   1a036:	ed b7       	in	r30, 0x3d	; 61
   1a038:	fe b7       	in	r31, 0x3e	; 62
   1a03a:	80 86       	std	Z+8, r8	; 0x08
   1a03c:	91 86       	std	Z+9, r9	; 0x09
   1a03e:	a2 86       	std	Z+10, r10	; 0x0a
   1a040:	b3 86       	std	Z+11, r11	; 0x0b
   1a042:	44 83       	std	Z+4, r20	; 0x04
   1a044:	55 83       	std	Z+5, r21	; 0x05
   1a046:	66 83       	std	Z+6, r22	; 0x06
   1a048:	77 83       	std	Z+7, r23	; 0x07
   1a04a:	8c ea       	ldi	r24, 0xAC	; 172
   1a04c:	9c e3       	ldi	r25, 0x3C	; 60
   1a04e:	a0 e0       	ldi	r26, 0x00	; 0
   1a050:	81 83       	std	Z+1, r24	; 0x01
   1a052:	92 83       	std	Z+2, r25	; 0x02
   1a054:	a3 83       	std	Z+3, r26	; 0x03
   1a056:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   1a05a:	2f c1       	rjmp	.+606    	; 0x1a2ba <lif_newdir+0x2b4>
        return(-1);
    }

// Not enough room ?
    if(sectors > (long)LIF->freesectors)
   1a05c:	48 15       	cp	r20, r8
   1a05e:	59 05       	cpc	r21, r9
   1a060:	6a 05       	cpc	r22, r10
   1a062:	7b 05       	cpc	r23, r11
   1a064:	c4 f0       	brlt	.+48     	; 0x1a096 <lif_newdir+0x90>
   1a066:	44 24       	eor	r4, r4
   1a068:	43 94       	inc	r4
   1a06a:	51 2c       	mov	r5, r1
   1a06c:	61 2c       	mov	r6, r1
   1a06e:	71 2c       	mov	r7, r1
#endif
            break;
        }

// We hit the EOF record
        if(LIF->DIR.FileType == 0xffff)
   1a070:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1a072:	9d 8d       	ldd	r25, Y+29	; 0x1d
   1a074:	86 5a       	subi	r24, 0xA6	; 166
   1a076:	9f 4f       	sbci	r25, 0xFF	; 255
   1a078:	9d 8b       	std	Y+21, r25	; 0x15
   1a07a:	8c 8b       	std	Y+20, r24	; 0x14
   1a07c:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a07e:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a080:	e4 5a       	subi	r30, 0xA4	; 164
   1a082:	ff 4f       	sbci	r31, 0xFF	; 255
   1a084:	fb 8b       	std	Y+19, r31	; 0x13
   1a086:	ea 8b       	std	Y+18, r30	; 0x12
                freestate = 0;                    // Try again
        }

// Computed start of next record
// Note: MUST be <= actual start of next VALID record or we have overlapping records!
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   1a088:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1a08a:	9d 8d       	ldd	r25, Y+29	; 0x1d
   1a08c:	80 5a       	subi	r24, 0xA0	; 160
   1a08e:	9f 4f       	sbci	r25, 0xFF	; 255
   1a090:	9f 8b       	std	Y+23, r25	; 0x17
   1a092:	8e 8b       	std	Y+22, r24	; 0x16
   1a094:	21 c0       	rjmp	.+66     	; 0x1a0d8 <lif_newdir+0xd2>
    }

// Not enough room ?
    if(sectors > (long)LIF->freesectors)
    {
        printf("lif_newdir: not enough free space:[%ld]\n", (long)LIF->freesectors);
   1a096:	ed b7       	in	r30, 0x3d	; 61
   1a098:	fe b7       	in	r31, 0x3e	; 62
   1a09a:	44 83       	std	Z+4, r20	; 0x04
   1a09c:	55 83       	std	Z+5, r21	; 0x05
   1a09e:	66 83       	std	Z+6, r22	; 0x06
   1a0a0:	77 83       	std	Z+7, r23	; 0x07
   1a0a2:	83 e8       	ldi	r24, 0x83	; 131
   1a0a4:	9c e3       	ldi	r25, 0x3C	; 60
   1a0a6:	a0 e0       	ldi	r26, 0x00	; 0
   1a0a8:	81 83       	std	Z+1, r24	; 0x01
   1a0aa:	92 83       	std	Z+2, r25	; 0x02
   1a0ac:	a3 83       	std	Z+3, r26	; 0x03
   1a0ae:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   1a0b2:	03 c1       	rjmp	.+518    	; 0x1a2ba <lif_newdir+0x2b4>
#endif
            break;
        }

// We hit the EOF record
        if(LIF->DIR.FileType == 0xffff)
   1a0b4:	ec 89       	ldd	r30, Y+20	; 0x14
   1a0b6:	fd 89       	ldd	r31, Y+21	; 0x15
   1a0b8:	80 81       	ld	r24, Z
   1a0ba:	91 81       	ldd	r25, Z+1	; 0x01
   1a0bc:	8f 3f       	cpi	r24, 0xFF	; 255
   1a0be:	ff ef       	ldi	r31, 0xFF	; 255
   1a0c0:	9f 07       	cpc	r25, r31
   1a0c2:	a1 f0       	breq	.+40     	; 0x1a0ec <lif_newdir+0xe6>
            }
            return(index);
        }

// PURGED records
        if(LIF->DIR.FileType == 0)
   1a0c4:	89 2b       	or	r24, r25
   1a0c6:	09 f0       	breq	.+2      	; 0x1a0ca <lif_newdir+0xc4>
   1a0c8:	ce c0       	rjmp	.+412    	; 0x1a266 <lif_newdir+0x260>
        {
            if(freestate == 0)
   1a0ca:	61 14       	cp	r6, r1
   1a0cc:	71 04       	cpc	r7, r1
   1a0ce:	09 f4       	brne	.+2      	; 0x1a0d2 <lif_newdir+0xcc>
   1a0d0:	c1 c0       	rjmp	.+386    	; 0x1a254 <lif_newdir+0x24e>
   1a0d2:	ff ef       	ldi	r31, 0xFF	; 255
   1a0d4:	4f 1a       	sub	r4, r31
   1a0d6:	5f 0a       	sbc	r5, r31
   1a0d8:	82 01       	movw	r16, r4
   1a0da:	01 50       	subi	r16, 0x01	; 1
   1a0dc:	11 09       	sbc	r17, r1

// Update free space and EOF pointers
    while(1)
    {
// Write new EOF after current one
        if( !lif_readdirindex(LIF,index) )
   1a0de:	b8 01       	movw	r22, r16
   1a0e0:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1a0e2:	9d 8d       	ldd	r25, Y+29	; 0x1d
   1a0e4:	c1 da       	rcall	.-2686   	; 0x19668 <lif_readdirindex>
   1a0e6:	89 2b       	or	r24, r25
   1a0e8:	29 f7       	brne	.-54     	; 0x1a0b4 <lif_newdir+0xae>
   1a0ea:	e7 c0       	rjmp	.+462    	; 0x1a2ba <lif_newdir+0x2b4>
        if(LIF->DIR.FileType == 0xffff)
        {

// Was enough free space found in purged area ?
// Do NOT need to update EOF!
            if(freestate == 2)
   1a0ec:	22 e0       	ldi	r18, 0x02	; 2
   1a0ee:	62 16       	cp	r6, r18
   1a0f0:	71 04       	cpc	r7, r1
   1a0f2:	09 f0       	breq	.+2      	; 0x1a0f6 <lif_newdir+0xf0>
   1a0f4:	46 c0       	rjmp	.+140    	; 0x1a182 <lif_newdir+0x17c>
            {
// Update free pace for new file
                lif_dir_clear(LIF);
   1a0f6:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1a0f8:	9d 8d       	ldd	r25, Y+29	; 0x1d
   1a0fa:	0e 94 31 c6 	call	0x18c62	; 0x18c62 <lif_dir_clear>
                LIF->DIR.FileStartSector = freestart;
   1a0fe:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a100:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a102:	e4 5a       	subi	r30, 0xA4	; 164
   1a104:	ff 4f       	sbci	r31, 0xFF	; 255
   1a106:	88 8d       	ldd	r24, Y+24	; 0x18
   1a108:	80 83       	st	Z, r24
   1a10a:	99 8d       	ldd	r25, Y+25	; 0x19
   1a10c:	91 83       	std	Z+1, r25	; 0x01
   1a10e:	2a 8d       	ldd	r18, Y+26	; 0x1a
   1a110:	22 83       	std	Z+2, r18	; 0x02
   1a112:	8b 8d       	ldd	r24, Y+27	; 0x1b
   1a114:	83 83       	std	Z+3, r24	; 0x03
                LIF->DIR.FileSectors = sectors;
   1a116:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a118:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a11a:	e0 5a       	subi	r30, 0xA0	; 160
   1a11c:	ff 4f       	sbci	r31, 0xFF	; 255
   1a11e:	80 82       	st	Z, r8
   1a120:	91 82       	std	Z+1, r9	; 0x01
   1a122:	a2 82       	std	Z+2, r10	; 0x02
   1a124:	b3 82       	std	Z+3, r11	; 0x03
                LIF->usedsectors += sectors;
   1a126:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a128:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a12a:	84 89       	ldd	r24, Z+20	; 0x14
   1a12c:	95 89       	ldd	r25, Z+21	; 0x15
   1a12e:	a6 89       	ldd	r26, Z+22	; 0x16
   1a130:	b7 89       	ldd	r27, Z+23	; 0x17
   1a132:	88 0d       	add	r24, r8
   1a134:	99 1d       	adc	r25, r9
   1a136:	aa 1d       	adc	r26, r10
   1a138:	bb 1d       	adc	r27, r11
   1a13a:	84 8b       	std	Z+20, r24	; 0x14
   1a13c:	95 8b       	std	Z+21, r25	; 0x15
   1a13e:	a6 8b       	std	Z+22, r26	; 0x16
   1a140:	b7 8b       	std	Z+23, r27	; 0x17
                LIF->freesectors -= sectors;
   1a142:	80 8d       	ldd	r24, Z+24	; 0x18
   1a144:	91 8d       	ldd	r25, Z+25	; 0x19
   1a146:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a148:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a14a:	88 19       	sub	r24, r8
   1a14c:	99 09       	sbc	r25, r9
   1a14e:	aa 09       	sbc	r26, r10
   1a150:	bb 09       	sbc	r27, r11
   1a152:	80 8f       	std	Z+24, r24	; 0x18
   1a154:	91 8f       	std	Z+25, r25	; 0x19
   1a156:	a2 8f       	std	Z+26, r26	; 0x1a
   1a158:	b3 8f       	std	Z+27, r27	; 0x1b
                LIF->files++;
   1a15a:	84 8d       	ldd	r24, Z+28	; 0x1c
   1a15c:	95 8d       	ldd	r25, Z+29	; 0x1d
   1a15e:	01 96       	adiw	r24, 0x01	; 1
   1a160:	95 8f       	std	Z+29, r25	; 0x1d
   1a162:	84 8f       	std	Z+28, r24	; 0x1c
                LIF->purged--;
   1a164:	86 8d       	ldd	r24, Z+30	; 0x1e
   1a166:	97 8d       	ldd	r25, Z+31	; 0x1f
   1a168:	01 97       	sbiw	r24, 0x01	; 1
   1a16a:	97 8f       	std	Z+31, r25	; 0x1f
   1a16c:	86 8f       	std	Z+30, r24	; 0x1e
                LIF->dirindex = freeindex;
   1a16e:	20 a2       	std	Z+32, r2	; 0x20
   1a170:	31 a2       	std	Z+33, r3	; 0x21
// Write new record (FileType is still EOF until data is updated by user)
                if( !lif_writedirindex(LIF,freeindex))
   1a172:	b1 01       	movw	r22, r2
   1a174:	cf 01       	movw	r24, r30
   1a176:	df da       	rcall	.-2626   	; 0x19736 <lif_writedirindex>
   1a178:	89 2b       	or	r24, r25
   1a17a:	09 f4       	brne	.+2      	; 0x1a17e <lif_newdir+0x178>
   1a17c:	9e c0       	rjmp	.+316    	; 0x1a2ba <lif_newdir+0x2b4>
   1a17e:	c1 01       	movw	r24, r2
   1a180:	9e c0       	rjmp	.+316    	; 0x1a2be <lif_newdir+0x2b8>
                    break;
                }
                return(freeindex);
            }

            if(debuglevel & LIF_DEBUG)
   1a182:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a186:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a18a:	92 ff       	sbrs	r25, 2
   1a18c:	1e c0       	rjmp	.+60     	; 0x1a1ca <lif_newdir+0x1c4>
                printf("lif_newdir: index:[%d] adding at:[%ld]to purged space:[%ld] sectors, free:[%ld]\n",
   1a18e:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a190:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a192:	80 8d       	ldd	r24, Z+24	; 0x18
   1a194:	91 8d       	ldd	r25, Z+25	; 0x19
   1a196:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a198:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a19a:	ed b7       	in	r30, 0x3d	; 61
   1a19c:	fe b7       	in	r31, 0x3e	; 62
   1a19e:	86 87       	std	Z+14, r24	; 0x0e
   1a1a0:	97 87       	std	Z+15, r25	; 0x0f
   1a1a2:	a0 8b       	std	Z+16, r26	; 0x10
   1a1a4:	b1 8b       	std	Z+17, r27	; 0x11
   1a1a6:	82 86       	std	Z+10, r8	; 0x0a
   1a1a8:	93 86       	std	Z+11, r9	; 0x0b
   1a1aa:	a4 86       	std	Z+12, r10	; 0x0c
   1a1ac:	b5 86       	std	Z+13, r11	; 0x0d
   1a1ae:	c6 82       	std	Z+6, r12	; 0x06
   1a1b0:	d7 82       	std	Z+7, r13	; 0x07
   1a1b2:	e0 86       	std	Z+8, r14	; 0x08
   1a1b4:	f1 86       	std	Z+9, r15	; 0x09
   1a1b6:	15 83       	std	Z+5, r17	; 0x05
   1a1b8:	04 83       	std	Z+4, r16	; 0x04
   1a1ba:	82 e3       	ldi	r24, 0x32	; 50
   1a1bc:	9c e3       	ldi	r25, 0x3C	; 60
   1a1be:	a0 e0       	ldi	r26, 0x00	; 0
   1a1c0:	81 83       	std	Z+1, r24	; 0x01
   1a1c2:	92 83       	std	Z+2, r25	; 0x02
   1a1c4:	a3 83       	std	Z+3, r26	; 0x03
   1a1c6:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
                    (int) index,(long)start,(long) sectors, (long)LIF->freesectors);

// Write new EOF after current one
            if( !lif_writedirEOF(LIF,index+1) )
   1a1ca:	b8 01       	movw	r22, r16
   1a1cc:	6f 5f       	subi	r22, 0xFF	; 255
   1a1ce:	7f 4f       	sbci	r23, 0xFF	; 255
   1a1d0:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1a1d2:	9d 8d       	ldd	r25, Y+29	; 0x1d
   1a1d4:	0c db       	rcall	.-2536   	; 0x197ee <lif_writedirEOF>
   1a1d6:	89 2b       	or	r24, r25
   1a1d8:	09 f4       	brne	.+2      	; 0x1a1dc <lif_newdir+0x1d6>
   1a1da:	6f c0       	rjmp	.+222    	; 0x1a2ba <lif_newdir+0x2b4>
            {
                break;
            }

            lif_dir_clear(LIF);
   1a1dc:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1a1de:	9d 8d       	ldd	r25, Y+29	; 0x1d
   1a1e0:	0e 94 31 c6 	call	0x18c62	; 0x18c62 <lif_dir_clear>
            LIF->DIR.FileStartSector = start;
   1a1e4:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a1e6:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a1e8:	e4 5a       	subi	r30, 0xA4	; 164
   1a1ea:	ff 4f       	sbci	r31, 0xFF	; 255
   1a1ec:	c0 82       	st	Z, r12
   1a1ee:	d1 82       	std	Z+1, r13	; 0x01
   1a1f0:	e2 82       	std	Z+2, r14	; 0x02
   1a1f2:	f3 82       	std	Z+3, r15	; 0x03
            LIF->DIR.FileSectors = sectors;
   1a1f4:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a1f6:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a1f8:	e0 5a       	subi	r30, 0xA0	; 160
   1a1fa:	ff 4f       	sbci	r31, 0xFF	; 255
   1a1fc:	80 82       	st	Z, r8
   1a1fe:	91 82       	std	Z+1, r9	; 0x01
   1a200:	a2 82       	std	Z+2, r10	; 0x02
   1a202:	b3 82       	std	Z+3, r11	; 0x03
            LIF->usedsectors += sectors;
   1a204:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a206:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a208:	84 89       	ldd	r24, Z+20	; 0x14
   1a20a:	95 89       	ldd	r25, Z+21	; 0x15
   1a20c:	a6 89       	ldd	r26, Z+22	; 0x16
   1a20e:	b7 89       	ldd	r27, Z+23	; 0x17
   1a210:	88 0d       	add	r24, r8
   1a212:	99 1d       	adc	r25, r9
   1a214:	aa 1d       	adc	r26, r10
   1a216:	bb 1d       	adc	r27, r11
   1a218:	84 8b       	std	Z+20, r24	; 0x14
   1a21a:	95 8b       	std	Z+21, r25	; 0x15
   1a21c:	a6 8b       	std	Z+22, r26	; 0x16
   1a21e:	b7 8b       	std	Z+23, r27	; 0x17
            LIF->freesectors -= sectors;
   1a220:	80 8d       	ldd	r24, Z+24	; 0x18
   1a222:	91 8d       	ldd	r25, Z+25	; 0x19
   1a224:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a226:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a228:	88 19       	sub	r24, r8
   1a22a:	99 09       	sbc	r25, r9
   1a22c:	aa 09       	sbc	r26, r10
   1a22e:	bb 09       	sbc	r27, r11
   1a230:	80 8f       	std	Z+24, r24	; 0x18
   1a232:	91 8f       	std	Z+25, r25	; 0x19
   1a234:	a2 8f       	std	Z+26, r26	; 0x1a
   1a236:	b3 8f       	std	Z+27, r27	; 0x1b
            LIF->files++;
   1a238:	84 8d       	ldd	r24, Z+28	; 0x1c
   1a23a:	95 8d       	ldd	r25, Z+29	; 0x1d
   1a23c:	01 96       	adiw	r24, 0x01	; 1
   1a23e:	95 8f       	std	Z+29, r25	; 0x1d
   1a240:	84 8f       	std	Z+28, r24	; 0x1c
            LIF->dirindex = index;
   1a242:	11 a3       	std	Z+33, r17	; 0x21
// Write new record (FileType is still EOF until data is updated by user )
            if( !lif_writedirindex(LIF,index))
   1a244:	00 a3       	std	Z+32, r16	; 0x20
   1a246:	b8 01       	movw	r22, r16
   1a248:	cf 01       	movw	r24, r30
   1a24a:	75 da       	rcall	.-2838   	; 0x19736 <lif_writedirindex>
   1a24c:	89 2b       	or	r24, r25
   1a24e:	a9 f1       	breq	.+106    	; 0x1a2ba <lif_newdir+0x2b4>
   1a250:	c8 01       	movw	r24, r16
   1a252:	35 c0       	rjmp	.+106    	; 0x1a2be <lif_newdir+0x2b8>
        }

// PURGED records
        if(LIF->DIR.FileType == 0)
        {
            if(freestate == 0)
   1a254:	c8 8e       	std	Y+24, r12	; 0x18
   1a256:	d9 8e       	std	Y+25, r13	; 0x19
   1a258:	ea 8e       	std	Y+26, r14	; 0x1a
   1a25a:	fb 8e       	std	Y+27, r15	; 0x1b
   1a25c:	18 01       	movw	r2, r16
            {
                freeindex = index;
                freestart = start;
                freestate = 1;
   1a25e:	66 24       	eor	r6, r6
   1a260:	63 94       	inc	r6
   1a262:	71 2c       	mov	r7, r1
            }
            ++index;
            continue;
   1a264:	36 cf       	rjmp	.-404    	; 0x1a0d2 <lif_newdir+0xcc>
        }

// VALID record
        if(freestate == 1)
   1a266:	f1 e0       	ldi	r31, 0x01	; 1
   1a268:	6f 16       	cp	r6, r31
   1a26a:	71 04       	cpc	r7, r1
   1a26c:	a9 f4       	brne	.+42     	; 0x1a298 <lif_newdir+0x292>
        {
            long freesectors;
// Compute sectors of purged space between valid records
// Note: LIF specs prohibit using old purged file start and sectors!
            freesectors = LIF->DIR.FileStartSector - start;
            if(freesectors >= sectors )
   1a26e:	ea 89       	ldd	r30, Y+18	; 0x12
   1a270:	fb 89       	ldd	r31, Y+19	; 0x13
   1a272:	80 81       	ld	r24, Z
   1a274:	91 81       	ldd	r25, Z+1	; 0x01
   1a276:	a2 81       	ldd	r26, Z+2	; 0x02
   1a278:	b3 81       	ldd	r27, Z+3	; 0x03
   1a27a:	8c 19       	sub	r24, r12
   1a27c:	9d 09       	sbc	r25, r13
   1a27e:	ae 09       	sbc	r26, r14
   1a280:	bf 09       	sbc	r27, r15
   1a282:	88 15       	cp	r24, r8
   1a284:	99 05       	cpc	r25, r9
   1a286:	aa 05       	cpc	r26, r10
   1a288:	bb 05       	cpc	r27, r11
   1a28a:	1c f4       	brge	.+6      	; 0x1a292 <lif_newdir+0x28c>
                freestate = 2;                    // Found free space in purged record
            else
                freestate = 0;                    // Try again
   1a28c:	61 2c       	mov	r6, r1
   1a28e:	71 2c       	mov	r7, r1
   1a290:	03 c0       	rjmp	.+6      	; 0x1a298 <lif_newdir+0x292>
            long freesectors;
// Compute sectors of purged space between valid records
// Note: LIF specs prohibit using old purged file start and sectors!
            freesectors = LIF->DIR.FileStartSector - start;
            if(freesectors >= sectors )
                freestate = 2;                    // Found free space in purged record
   1a292:	82 e0       	ldi	r24, 0x02	; 2
   1a294:	68 2e       	mov	r6, r24
   1a296:	71 2c       	mov	r7, r1
                freestate = 0;                    // Try again
        }

// Computed start of next record
// Note: MUST be <= actual start of next VALID record or we have overlapping records!
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   1a298:	ea 89       	ldd	r30, Y+18	; 0x12
   1a29a:	fb 89       	ldd	r31, Y+19	; 0x13
   1a29c:	c0 80       	ld	r12, Z
   1a29e:	d1 80       	ldd	r13, Z+1	; 0x01
   1a2a0:	e2 80       	ldd	r14, Z+2	; 0x02
   1a2a2:	f3 80       	ldd	r15, Z+3	; 0x03
   1a2a4:	ee 89       	ldd	r30, Y+22	; 0x16
   1a2a6:	ff 89       	ldd	r31, Y+23	; 0x17
   1a2a8:	80 81       	ld	r24, Z
   1a2aa:	91 81       	ldd	r25, Z+1	; 0x01
   1a2ac:	a2 81       	ldd	r26, Z+2	; 0x02
   1a2ae:	b3 81       	ldd	r27, Z+3	; 0x03
   1a2b0:	c8 0e       	add	r12, r24
   1a2b2:	d9 1e       	adc	r13, r25
   1a2b4:	ea 1e       	adc	r14, r26
   1a2b6:	fb 1e       	adc	r15, r27
   1a2b8:	0c cf       	rjmp	.-488    	; 0x1a0d2 <lif_newdir+0xcc>
        ++index;
    }
// ERROR
    return(-1);
   1a2ba:	8f ef       	ldi	r24, 0xFF	; 255
   1a2bc:	9f ef       	ldi	r25, 0xFF	; 255
}
   1a2be:	6d 96       	adiw	r28, 0x1d	; 29
   1a2c0:	e2 e1       	ldi	r30, 0x12	; 18
   1a2c2:	0c 94 1b e7 	jmp	0x1ce36	; 0x1ce36 <__epilogue_restores__>

0001a2c6 <lif_open_volume>:
/// @param[in] *name: file name of LIF image
/// @param[in] *mode: "rb" = read, "rb+" = read/write
/// @return LIF pointer on sucesses or NULL on error
MEMSPACE
lif_t *lif_open_volume(char *name, char *mode)
{
   1a2c6:	a9 e3       	ldi	r26, 0x39	; 57
   1a2c8:	b1 e0       	ldi	r27, 0x01	; 1
   1a2ca:	e9 e6       	ldi	r30, 0x69	; 105
   1a2cc:	f1 ed       	ldi	r31, 0xD1	; 209
   1a2ce:	0c 94 05 e7 	jmp	0x1ce0a	; 0x1ce0a <__prologue_saves__+0xc>
   1a2d2:	6c 01       	movw	r12, r24
   1a2d4:	8b 01       	movw	r16, r22
    lif_t *LIF;
    stat_t sb, *sp;
    uint8_t buffer[LIF_SECTOR_SIZE];

    sp = lif_stat(name, (stat_t *)&sb);
   1a2d6:	be 01       	movw	r22, r28
   1a2d8:	66 5f       	subi	r22, 0xF6	; 246
   1a2da:	7e 4f       	sbci	r23, 0xFE	; 254
   1a2dc:	0e 94 80 c1 	call	0x18300	; 0x18300 <lif_stat>
   1a2e0:	5c 01       	movw	r10, r24
    if(sp == NULL)
   1a2e2:	00 97       	sbiw	r24, 0x00	; 0
   1a2e4:	09 f1       	breq	.+66     	; 0x1a328 <lif_open_volume+0x62>
        return(NULL);

// To read LIF volume we must have at minimum two sectors
// volume header a directory entry
    if(sp->st_size < (long)LIF_SECTOR_SIZE*2)
   1a2e6:	fc 01       	movw	r30, r24
   1a2e8:	80 8d       	ldd	r24, Z+24	; 0x18
   1a2ea:	91 8d       	ldd	r25, Z+25	; 0x19
   1a2ec:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a2ee:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a2f0:	81 15       	cp	r24, r1
   1a2f2:	f2 e0       	ldi	r31, 0x02	; 2
   1a2f4:	9f 07       	cpc	r25, r31
   1a2f6:	a1 05       	cpc	r26, r1
   1a2f8:	b1 05       	cpc	r27, r1
   1a2fa:	c8 f4       	brcc	.+50     	; 0x1a32e <lif_open_volume+0x68>
    {
        if(debuglevel & LIF_DEBUG)
   1a2fc:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1a300:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a304:	32 ff       	sbrs	r19, 2
   1a306:	10 c0       	rjmp	.+32     	; 0x1a328 <lif_open_volume+0x62>
            printf("lif_open_volume:[%s] error volume header area too small:[%ld]\n", name, (long)sp->st_size);
   1a308:	ed b7       	in	r30, 0x3d	; 61
   1a30a:	fe b7       	in	r31, 0x3e	; 62
   1a30c:	86 83       	std	Z+6, r24	; 0x06
   1a30e:	97 83       	std	Z+7, r25	; 0x07
   1a310:	a0 87       	std	Z+8, r26	; 0x08
   1a312:	b1 87       	std	Z+9, r27	; 0x09
   1a314:	d5 82       	std	Z+5, r13	; 0x05
   1a316:	c4 82       	std	Z+4, r12	; 0x04
   1a318:	83 ef       	ldi	r24, 0xF3	; 243
   1a31a:	9b e3       	ldi	r25, 0x3B	; 59
   1a31c:	a0 e0       	ldi	r26, 0x00	; 0
   1a31e:	81 83       	std	Z+1, r24	; 0x01
   1a320:	92 83       	std	Z+2, r25	; 0x02
   1a322:	a3 83       	std	Z+3, r26	; 0x03
   1a324:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
        return(NULL);
   1a328:	00 e0       	ldi	r16, 0x00	; 0
   1a32a:	10 e0       	ldi	r17, 0x00	; 0
   1a32c:	c6 c0       	rjmp	.+396    	; 0x1a4ba <lif_open_volume+0x1f4>
    }

// Allocate LIF structure
    LIF = lif_calloc(sizeof(lif_t)+4);
   1a32e:	64 e7       	ldi	r22, 0x74	; 116
   1a330:	70 e0       	ldi	r23, 0x00	; 0
   1a332:	80 e0       	ldi	r24, 0x00	; 0
   1a334:	90 e0       	ldi	r25, 0x00	; 0
   1a336:	0e 94 ec c0 	call	0x181d8	; 0x181d8 <lif_calloc>
   1a33a:	7c 01       	movw	r14, r24
    if(!LIF)
   1a33c:	89 2b       	or	r24, r25
   1a33e:	a1 f3       	breq	.-24     	; 0x1a328 <lif_open_volume+0x62>
        return(NULL);

    LIF->name = lif_stralloc(name);
   1a340:	c6 01       	movw	r24, r12
   1a342:	0e 94 37 c1 	call	0x1826e	; 0x1826e <lif_stralloc>
   1a346:	f7 01       	movw	r30, r14
   1a348:	91 83       	std	Z+1, r25	; 0x01
   1a34a:	80 83       	st	Z, r24
    if(!LIF->name)
   1a34c:	00 97       	sbiw	r24, 0x00	; 0
   1a34e:	09 f4       	brne	.+2      	; 0x1a352 <lif_open_volume+0x8c>
   1a350:	5e c0       	rjmp	.+188    	; 0x1a40e <lif_open_volume+0x148>
    {
        lif_closedir(LIF);
        return(NULL);
    }

    LIF->imagebytes = sp->st_size;
   1a352:	f5 01       	movw	r30, r10
   1a354:	80 8c       	ldd	r8, Z+24	; 0x18
   1a356:	91 8c       	ldd	r9, Z+25	; 0x19
   1a358:	a2 8c       	ldd	r10, Z+26	; 0x1a
   1a35a:	b3 8c       	ldd	r11, Z+27	; 0x1b
   1a35c:	f7 01       	movw	r30, r14
   1a35e:	80 86       	std	Z+8, r8	; 0x08
   1a360:	91 86       	std	Z+9, r9	; 0x09
   1a362:	a2 86       	std	Z+10, r10	; 0x0a
   1a364:	b3 86       	std	Z+11, r11	; 0x0b
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1a366:	77 27       	eor	r23, r23
   1a368:	6b 2d       	mov	r22, r11
   1a36a:	5a 2d       	mov	r21, r10
   1a36c:	49 2d       	mov	r20, r9
    if(bytes % (long)LIF_SECTOR_SIZE)
   1a36e:	88 20       	and	r8, r8
   1a370:	21 f0       	breq	.+8      	; 0x1a37a <lif_open_volume+0xb4>
        ++sectors;
   1a372:	4f 5f       	subi	r20, 0xFF	; 255
   1a374:	5f 4f       	sbci	r21, 0xFF	; 255
   1a376:	6f 4f       	sbci	r22, 0xFF	; 255
   1a378:	7f 4f       	sbci	r23, 0xFF	; 255
        lif_closedir(LIF);
        return(NULL);
    }

    LIF->imagebytes = sp->st_size;
    LIF->sectors = lif_bytes2sectors(sp->st_size);
   1a37a:	f7 01       	movw	r30, r14
   1a37c:	44 83       	std	Z+4, r20	; 0x04
   1a37e:	55 83       	std	Z+5, r21	; 0x05
   1a380:	66 83       	std	Z+6, r22	; 0x06
   1a382:	77 83       	std	Z+7, r23	; 0x07

    LIF->fp = lif_open(LIF->name,mode);
   1a384:	b8 01       	movw	r22, r16
   1a386:	0e 94 56 c1 	call	0x182ac	; 0x182ac <lif_open>
   1a38a:	f7 01       	movw	r30, r14
   1a38c:	93 83       	std	Z+3, r25	; 0x03
   1a38e:	82 83       	std	Z+2, r24	; 0x02
    if(!LIF->fp)
   1a390:	89 2b       	or	r24, r25
   1a392:	e9 f1       	breq	.+122    	; 0x1a40e <lif_open_volume+0x148>
        lif_closedir(LIF);
        return(NULL);
    }

// Volume header must be it least one sector
    if( lif_read(LIF, buffer, 0, LIF_SECTOR_SIZE) < LIF_SECTOR_SIZE)
   1a394:	00 e0       	ldi	r16, 0x00	; 0
   1a396:	11 e0       	ldi	r17, 0x01	; 1
   1a398:	20 e0       	ldi	r18, 0x00	; 0
   1a39a:	30 e0       	ldi	r19, 0x00	; 0
   1a39c:	a9 01       	movw	r20, r18
   1a39e:	be 01       	movw	r22, r28
   1a3a0:	66 5f       	subi	r22, 0xF6	; 246
   1a3a2:	7f 4f       	sbci	r23, 0xFF	; 255
   1a3a4:	c7 01       	movw	r24, r14
   1a3a6:	0e 94 da c1 	call	0x183b4	; 0x183b4 <lif_read>
   1a3aa:	6f 3f       	cpi	r22, 0xFF	; 255
   1a3ac:	71 05       	cpc	r23, r1
   1a3ae:	81 05       	cpc	r24, r1
   1a3b0:	91 05       	cpc	r25, r1
   1a3b2:	09 f0       	breq	.+2      	; 0x1a3b6 <lif_open_volume+0xf0>
   1a3b4:	6c f4       	brge	.+26     	; 0x1a3d0 <lif_open_volume+0x10a>
    {
        if(debuglevel & LIF_DEBUG)
   1a3b6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a3ba:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a3be:	92 ff       	sbrs	r25, 2
   1a3c0:	26 c0       	rjmp	.+76     	; 0x1a40e <lif_open_volume+0x148>
            printf("lif_open_volume:[%s] error read volume header failed\n", name);
   1a3c2:	ed b7       	in	r30, 0x3d	; 61
   1a3c4:	fe b7       	in	r31, 0x3e	; 62
   1a3c6:	d5 82       	std	Z+5, r13	; 0x05
   1a3c8:	c4 82       	std	Z+4, r12	; 0x04
   1a3ca:	8d eb       	ldi	r24, 0xBD	; 189
   1a3cc:	9b e3       	ldi	r25, 0x3B	; 59
   1a3ce:	19 c0       	rjmp	.+50     	; 0x1a402 <lif_open_volume+0x13c>
        lif_closedir(LIF);
        return(NULL);
    }

// Unpack Volumes has the Directory start sector
    lif_str2vol(buffer, LIF);
   1a3d0:	b7 01       	movw	r22, r14
   1a3d2:	ce 01       	movw	r24, r28
   1a3d4:	0a 96       	adiw	r24, 0x0a	; 10
   1a3d6:	0e 94 fa c3 	call	0x187f4	; 0x187f4 <lif_str2vol>

// Validate basic Volume headers
    if( !lif_check_volume(LIF) )
   1a3da:	c7 01       	movw	r24, r14
   1a3dc:	0e 94 06 c8 	call	0x1900c	; 0x1900c <lif_check_volume>
   1a3e0:	89 2b       	or	r24, r25
   1a3e2:	c1 f4       	brne	.+48     	; 0x1a414 <lif_open_volume+0x14e>
    {
        if(debuglevel & LIF_DEBUG)
   1a3e4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a3e8:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a3ec:	92 ff       	sbrs	r25, 2
   1a3ee:	0f c0       	rjmp	.+30     	; 0x1a40e <lif_open_volume+0x148>
            printf("lif_open_volume:[%s] error volume validate failed\n", LIF->name);
   1a3f0:	f7 01       	movw	r30, r14
   1a3f2:	80 81       	ld	r24, Z
   1a3f4:	91 81       	ldd	r25, Z+1	; 0x01
   1a3f6:	ed b7       	in	r30, 0x3d	; 61
   1a3f8:	fe b7       	in	r31, 0x3e	; 62
   1a3fa:	95 83       	std	Z+5, r25	; 0x05
   1a3fc:	84 83       	std	Z+4, r24	; 0x04
   1a3fe:	8a e8       	ldi	r24, 0x8A	; 138
   1a400:	9b e3       	ldi	r25, 0x3B	; 59
   1a402:	a0 e0       	ldi	r26, 0x00	; 0
   1a404:	81 83       	std	Z+1, r24	; 0x01
   1a406:	92 83       	std	Z+2, r25	; 0x02
   1a408:	a3 83       	std	Z+3, r26	; 0x03
   1a40a:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a40e:	c7 01       	movw	r24, r14
   1a410:	9d d8       	rcall	.-3782   	; 0x1954c <lif_close_volume>
   1a412:	8a cf       	rjmp	.-236    	; 0x1a328 <lif_open_volume+0x62>
        lif_closedir(LIF);
        return(NULL);
    }

// Initialize remaining LIF headers
    LIF->filestart = LIF->VOL.DirStartSector + LIF->VOL.DirSectors;
   1a414:	f7 01       	movw	r30, r14
   1a416:	45 a5       	ldd	r20, Z+45	; 0x2d
   1a418:	56 a5       	ldd	r21, Z+46	; 0x2e
   1a41a:	67 a5       	ldd	r22, Z+47	; 0x2f
   1a41c:	70 a9       	ldd	r23, Z+48	; 0x30
   1a41e:	85 a9       	ldd	r24, Z+53	; 0x35
   1a420:	96 a9       	ldd	r25, Z+54	; 0x36
   1a422:	a7 a9       	ldd	r26, Z+55	; 0x37
   1a424:	b0 ad       	ldd	r27, Z+56	; 0x38
   1a426:	48 0f       	add	r20, r24
   1a428:	59 1f       	adc	r21, r25
   1a42a:	6a 1f       	adc	r22, r26
   1a42c:	7b 1f       	adc	r23, r27
   1a42e:	44 87       	std	Z+12, r20	; 0x0c
   1a430:	55 87       	std	Z+13, r21	; 0x0d
   1a432:	66 87       	std	Z+14, r22	; 0x0e
   1a434:	77 87       	std	Z+15, r23	; 0x0f
    LIF->filesectors = LIF->sectors - LIF->filestart;
   1a436:	84 81       	ldd	r24, Z+4	; 0x04
   1a438:	95 81       	ldd	r25, Z+5	; 0x05
   1a43a:	a6 81       	ldd	r26, Z+6	; 0x06
   1a43c:	b7 81       	ldd	r27, Z+7	; 0x07
   1a43e:	84 1b       	sub	r24, r20
   1a440:	95 0b       	sbc	r25, r21
   1a442:	a6 0b       	sbc	r26, r22
   1a444:	b7 0b       	sbc	r27, r23
   1a446:	80 8b       	std	Z+16, r24	; 0x10
   1a448:	91 8b       	std	Z+17, r25	; 0x11
   1a44a:	a2 8b       	std	Z+18, r26	; 0x12
   1a44c:	b3 8b       	std	Z+19, r27	; 0x13
    LIF->freesectors = LIF->filesectors;
   1a44e:	80 8f       	std	Z+24, r24	; 0x18
   1a450:	91 8f       	std	Z+25, r25	; 0x19
   1a452:	a2 8f       	std	Z+26, r26	; 0x1a
   1a454:	b3 8f       	std	Z+27, r27	; 0x1b
    LIF->usedsectors = 0;
   1a456:	14 8a       	std	Z+20, r1	; 0x14
   1a458:	15 8a       	std	Z+21, r1	; 0x15
   1a45a:	16 8a       	std	Z+22, r1	; 0x16
   1a45c:	17 8a       	std	Z+23, r1	; 0x17
    LIF->purged = 0;
   1a45e:	17 8e       	std	Z+31, r1	; 0x1f
   1a460:	16 8e       	std	Z+30, r1	; 0x1e
    LIF->files = 0;
   1a462:	15 8e       	std	Z+29, r1	; 0x1d
   1a464:	14 8e       	std	Z+28, r1	; 0x1c
    LIF->dirindex = 0;
   1a466:	11 a2       	std	Z+33, r1	; 0x21
   1a468:	10 a2       	std	Z+32, r1	; 0x20
    LIF->EOFindex = 0;
   1a46a:	13 a2       	std	Z+35, r1	; 0x23
   1a46c:	12 a2       	std	Z+34, r1	; 0x22

    if( lif_updatefree(LIF) == NULL)
   1a46e:	c7 01       	movw	r24, r14
   1a470:	d6 d9       	rcall	.-3156   	; 0x1981e <lif_updatefree>
   1a472:	8c 01       	movw	r16, r24
   1a474:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a478:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a47c:	01 15       	cp	r16, r1
   1a47e:	11 05       	cpc	r17, r1
   1a480:	a1 f4       	brne	.+40     	; 0x1a4aa <lif_open_volume+0x1e4>
    {
        if(debuglevel & LIF_DEBUG)
   1a482:	92 ff       	sbrs	r25, 2
   1a484:	0f c0       	rjmp	.+30     	; 0x1a4a4 <lif_open_volume+0x1de>
            printf("lif_open_volume:[%s] error directory check failed\n", LIF->name);
   1a486:	f7 01       	movw	r30, r14
   1a488:	80 81       	ld	r24, Z
   1a48a:	91 81       	ldd	r25, Z+1	; 0x01
   1a48c:	ed b7       	in	r30, 0x3d	; 61
   1a48e:	fe b7       	in	r31, 0x3e	; 62
   1a490:	95 83       	std	Z+5, r25	; 0x05
   1a492:	84 83       	std	Z+4, r24	; 0x04
   1a494:	87 e5       	ldi	r24, 0x57	; 87
   1a496:	9b e3       	ldi	r25, 0x3B	; 59
   1a498:	a0 e0       	ldi	r26, 0x00	; 0
   1a49a:	81 83       	std	Z+1, r24	; 0x01
   1a49c:	92 83       	std	Z+2, r25	; 0x02
   1a49e:	a3 83       	std	Z+3, r26	; 0x03
   1a4a0:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a4a4:	c7 01       	movw	r24, r14
   1a4a6:	52 d8       	rcall	.-3932   	; 0x1954c <lif_close_volume>
    if( lif_updatefree(LIF) == NULL)
    {
        if(debuglevel & LIF_DEBUG)
            printf("lif_open_volume:[%s] error directory check failed\n", LIF->name);
        lif_closedir(LIF);
        return(NULL);
   1a4a8:	08 c0       	rjmp	.+16     	; 0x1a4ba <lif_open_volume+0x1f4>
    }

    if(debuglevel &LIF_DEBUG)
   1a4aa:	92 ff       	sbrs	r25, 2
   1a4ac:	05 c0       	rjmp	.+10     	; 0x1a4b8 <lif_open_volume+0x1f2>
        lif_dump_vol(LIF, "Volume Listing");
   1a4ae:	6d e3       	ldi	r22, 0x3D	; 61
   1a4b0:	76 e1       	ldi	r23, 0x16	; 22
   1a4b2:	c7 01       	movw	r24, r14
   1a4b4:	0e 94 40 c6 	call	0x18c80	; 0x18c80 <lif_dump_vol>
   1a4b8:	87 01       	movw	r16, r14
    return( LIF );
}
   1a4ba:	c8 01       	movw	r24, r16
   1a4bc:	c7 5c       	subi	r28, 0xC7	; 199
   1a4be:	de 4f       	sbci	r29, 0xFE	; 254
   1a4c0:	ec e0       	ldi	r30, 0x0C	; 12
   1a4c2:	0c 94 21 e7 	jmp	0x1ce42	; 0x1ce42 <__epilogue_restores__+0xc>

0001a4c6 <lif_dir>:
/// @brief Display a LIF image file directory
/// @param[in] lifimagename: LIF disk image name
/// @return -1 on error or number of files found
MEMSPACE
void lif_dir(char *lifimagename)
{
   1a4c6:	2f 92       	push	r2
   1a4c8:	3f 92       	push	r3
   1a4ca:	4f 92       	push	r4
   1a4cc:	5f 92       	push	r5
   1a4ce:	6f 92       	push	r6
   1a4d0:	8f 92       	push	r8
   1a4d2:	9f 92       	push	r9
   1a4d4:	af 92       	push	r10
   1a4d6:	bf 92       	push	r11
   1a4d8:	cf 92       	push	r12
   1a4da:	df 92       	push	r13
   1a4dc:	ef 92       	push	r14
   1a4de:	0f 93       	push	r16
   1a4e0:	1f 93       	push	r17
   1a4e2:	cf 93       	push	r28
   1a4e4:	df 93       	push	r29
   1a4e6:	cd b7       	in	r28, 0x3d	; 61
   1a4e8:	de b7       	in	r29, 0x3e	; 62
   1a4ea:	af 97       	sbiw	r28, 0x2f	; 47
   1a4ec:	0f b6       	in	r0, 0x3f	; 63
   1a4ee:	f8 94       	cli
   1a4f0:	de bf       	out	0x3e, r29	; 62
   1a4f2:	0f be       	out	0x3f, r0	; 63
   1a4f4:	cd bf       	out	0x3d, r28	; 61
    int index = 0;
    char *vol;

    int warn = ' ';

    LIF = lif_open_volume(lifimagename,"rb+");
   1a4f6:	68 e0       	ldi	r22, 0x08	; 8
   1a4f8:	79 e0       	ldi	r23, 0x09	; 9
   1a4fa:	e5 de       	rcall	.-566    	; 0x1a2c6 <lif_open_volume>
   1a4fc:	9f a7       	std	Y+47, r25	; 0x2f
   1a4fe:	8e a7       	std	Y+46, r24	; 0x2e
    if(LIF == NULL)
   1a500:	00 97       	sbiw	r24, 0x00	; 0
   1a502:	09 f4       	brne	.+2      	; 0x1a506 <lif_dir+0x40>
   1a504:	9e c1       	rjmp	.+828    	; 0x1a842 <lif_dir+0x37c>
        return;

    vol = (char *)LIF->VOL.Label;
    if(!vol[0])
   1a506:	fc 01       	movw	r30, r24
   1a508:	86 a1       	ldd	r24, Z+38	; 0x26
   1a50a:	88 23       	and	r24, r24
   1a50c:	21 f0       	breq	.+8      	; 0x1a516 <lif_dir+0x50>

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return;

    vol = (char *)LIF->VOL.Label;
   1a50e:	8f 01       	movw	r16, r30
   1a510:	0a 5d       	subi	r16, 0xDA	; 218
   1a512:	1f 4f       	sbci	r17, 0xFF	; 255
   1a514:	02 c0       	rjmp	.+4      	; 0x1a51a <lif_dir+0x54>
    if(!vol[0])
        vol = "<EMPTY>";
   1a516:	0f ee       	ldi	r16, 0xEF	; 239
   1a518:	15 e1       	ldi	r17, 0x15	; 21

    printf("Volume:[%s] Date:[%s]\n", vol, lif_lifbcd2timestr(LIF->VOL.date));
   1a51a:	8e a5       	ldd	r24, Y+46	; 0x2e
   1a51c:	9f a5       	ldd	r25, Y+47	; 0x2f
   1a51e:	87 5b       	subi	r24, 0xB7	; 183
   1a520:	9f 4f       	sbci	r25, 0xFF	; 255
   1a522:	0e 94 04 c6 	call	0x18c08	; 0x18c08 <lif_lifbcd2timestr>
   1a526:	ed b7       	in	r30, 0x3d	; 61
   1a528:	fe b7       	in	r31, 0x3e	; 62
   1a52a:	97 83       	std	Z+7, r25	; 0x07
   1a52c:	86 83       	std	Z+6, r24	; 0x06
   1a52e:	15 83       	std	Z+5, r17	; 0x05
   1a530:	04 83       	std	Z+4, r16	; 0x04
   1a532:	80 e4       	ldi	r24, 0x40	; 64
   1a534:	9b e3       	ldi	r25, 0x3B	; 59
   1a536:	a0 e0       	ldi	r26, 0x00	; 0
   1a538:	81 83       	std	Z+1, r24	; 0x01
   1a53a:	92 83       	std	Z+2, r25	; 0x02
   1a53c:	a3 83       	std	Z+3, r26	; 0x03
   1a53e:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>

    printf("NAME         TYPE   START SECTOR        SIZE    RECSIZE   DATE\n");
   1a542:	80 e0       	ldi	r24, 0x00	; 0
   1a544:	9b e3       	ldi	r25, 0x3B	; 59
   1a546:	a0 e0       	ldi	r26, 0x00	; 0
   1a548:	ed b7       	in	r30, 0x3d	; 61
   1a54a:	fe b7       	in	r31, 0x3e	; 62
   1a54c:	81 83       	std	Z+1, r24	; 0x01
   1a54e:	92 83       	std	Z+2, r25	; 0x02
   1a550:	a3 83       	std	Z+3, r26	; 0x03
   1a552:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    long bytes;
    lif_t *LIF;
    int index = 0;
    char *vol;

    int warn = ' ';
   1a556:	00 e2       	ldi	r16, 0x20	; 32
   1a558:	10 e0       	ldi	r17, 0x00	; 0
   1a55a:	1f 8b       	std	Y+23, r17	; 0x17
   1a55c:	0e 8b       	std	Y+22, r16	; 0x16
MEMSPACE
void lif_dir(char *lifimagename)
{
    long bytes;
    lif_t *LIF;
    int index = 0;
   1a55e:	21 2c       	mov	r2, r1
   1a560:	31 2c       	mov	r3, r1
    {

        if(!lif_readdirindex(LIF,index))
            break;

        if(LIF->DIR.FileType == 0xffff)
   1a562:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a564:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a566:	06 5a       	subi	r16, 0xA6	; 166
   1a568:	1f 4f       	sbci	r17, 0xFF	; 255
   1a56a:	1d 8f       	std	Y+29, r17	; 0x1d
   1a56c:	0c 8f       	std	Y+28, r16	; 0x1c
            break;

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);
   1a56e:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a570:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a572:	00 5a       	subi	r16, 0xA0	; 160
   1a574:	1f 4f       	sbci	r17, 0xFF	; 255
   1a576:	1d a3       	std	Y+37, r17	; 0x25
   1a578:	0c a3       	std	Y+36, r16	; 0x24

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   1a57a:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a57c:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a57e:	04 59       	subi	r16, 0x94	; 148
   1a580:	1f 4f       	sbci	r17, 0xFF	; 255
   1a582:	1f a3       	std	Y+39, r17	; 0x27
   1a584:	0e a3       	std	Y+38, r16	; 0x26
            else
            {
                warn = '!';
                if(debuglevel & LIF_DEBUG)
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n",
   1a586:	84 eb       	ldi	r24, 0xB4	; 180
   1a588:	9a e3       	ldi	r25, 0x3A	; 58
   1a58a:	6c 01       	movw	r12, r24
   1a58c:	e1 2c       	mov	r14, r1
   1a58e:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a590:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a592:	01 5b       	subi	r16, 0xB1	; 177
   1a594:	1f 4f       	sbci	r17, 0xFF	; 255
   1a596:	1f 8f       	std	Y+31, r17	; 0x1f
   1a598:	0e 8f       	std	Y+30, r16	; 0x1e
                }
            }
        }

// name type start size
        printf("%-10s  %04Xh      %8lXh   %9ld%c      %4d   %s\n",
   1a59a:	84 e8       	ldi	r24, 0x84	; 132
   1a59c:	9a e3       	ldi	r25, 0x3A	; 58
   1a59e:	2c 01       	movw	r4, r24
   1a5a0:	61 2c       	mov	r6, r1
   1a5a2:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a5a4:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a5a6:	04 5a       	subi	r16, 0xA4	; 164
   1a5a8:	1f 4f       	sbci	r17, 0xFF	; 255
   1a5aa:	19 a7       	std	Y+41, r17	; 0x29
   1a5ac:	08 a7       	std	Y+40, r16	; 0x28
   1a5ae:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a5b0:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a5b2:	02 59       	subi	r16, 0x92	; 146
   1a5b4:	1f 4f       	sbci	r17, 0xFF	; 255
   1a5b6:	1b a7       	std	Y+43, r17	; 0x2b
   1a5b8:	0a a7       	std	Y+42, r16	; 0x2a
   1a5ba:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a5bc:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a5be:	0c 59       	subi	r16, 0x9C	; 156
   1a5c0:	1f 4f       	sbci	r17, 0xFF	; 255
   1a5c2:	1d a7       	std	Y+45, r17	; 0x2d
   1a5c4:	0c a7       	std	Y+44, r16	; 0x2c

    printf("NAME         TYPE   START SECTOR        SIZE    RECSIZE   DATE\n");
    while(1)
    {

        if(!lif_readdirindex(LIF,index))
   1a5c6:	b1 01       	movw	r22, r2
   1a5c8:	8e a5       	ldd	r24, Y+46	; 0x2e
   1a5ca:	9f a5       	ldd	r25, Y+47	; 0x2f
   1a5cc:	4d d8       	rcall	.-3942   	; 0x19668 <lif_readdirindex>
   1a5ce:	89 2b       	or	r24, r25
   1a5d0:	09 f4       	brne	.+2      	; 0x1a5d4 <lif_dir+0x10e>
   1a5d2:	ad c0       	rjmp	.+346    	; 0x1a72e <lif_dir+0x268>
            break;

        if(LIF->DIR.FileType == 0xffff)
   1a5d4:	ac 8d       	ldd	r26, Y+28	; 0x1c
   1a5d6:	bd 8d       	ldd	r27, Y+29	; 0x1d
   1a5d8:	8d 91       	ld	r24, X+
   1a5da:	9c 91       	ld	r25, X
   1a5dc:	8f 3f       	cpi	r24, 0xFF	; 255
   1a5de:	bf ef       	ldi	r27, 0xFF	; 255
   1a5e0:	9b 07       	cpc	r25, r27
   1a5e2:	09 f4       	brne	.+2      	; 0x1a5e6 <lif_dir+0x120>
   1a5e4:	a4 c0       	rjmp	.+328    	; 0x1a72e <lif_dir+0x268>
            break;

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);
   1a5e6:	ec a1       	ldd	r30, Y+36	; 0x24
   1a5e8:	fd a1       	ldd	r31, Y+37	; 0x25
   1a5ea:	40 81       	ld	r20, Z
   1a5ec:	51 81       	ldd	r21, Z+1	; 0x01
   1a5ee:	62 81       	ldd	r22, Z+2	; 0x02
   1a5f0:	73 81       	ldd	r23, Z+3	; 0x03
   1a5f2:	00 27       	eor	r16, r16
   1a5f4:	14 2f       	mov	r17, r20
   1a5f6:	25 2f       	mov	r18, r21
   1a5f8:	36 2f       	mov	r19, r22
   1a5fa:	08 8f       	std	Y+24, r16	; 0x18
   1a5fc:	19 8f       	std	Y+25, r17	; 0x19
   1a5fe:	2a 8f       	std	Y+26, r18	; 0x1a
   1a600:	3b 8f       	std	Y+27, r19	; 0x1b

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
   1a602:	8c 7f       	andi	r24, 0xFC	; 252
   1a604:	80 31       	cpi	r24, 0x10	; 16
   1a606:	90 4e       	sbci	r25, 0xE0	; 224
   1a608:	09 f0       	breq	.+2      	; 0x1a60c <lif_dir+0x146>
   1a60a:	4b c0       	rjmp	.+150    	; 0x1a6a2 <lif_dir+0x1dc>
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   1a60c:	ae a1       	ldd	r26, Y+38	; 0x26
   1a60e:	bf a1       	ldd	r27, Y+39	; 0x27
   1a610:	8d 91       	ld	r24, X+
   1a612:	9c 91       	ld	r25, X
   1a614:	00 97       	sbiw	r24, 0x00	; 0
   1a616:	b9 f0       	breq	.+46     	; 0x1a646 <lif_dir+0x180>
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1a618:	4c 01       	movw	r8, r24
   1a61a:	a1 2c       	mov	r10, r1
   1a61c:	b1 2c       	mov	r11, r1
   1a61e:	33 27       	eor	r19, r19
   1a620:	2b 2d       	mov	r18, r11
   1a622:	1a 2d       	mov	r17, r10
   1a624:	09 2d       	mov	r16, r9
    if(bytes % (long)LIF_SECTOR_SIZE)
   1a626:	88 23       	and	r24, r24
   1a628:	21 f0       	breq	.+8      	; 0x1a632 <lif_dir+0x16c>
        ++sectors;
   1a62a:	0f 5f       	subi	r16, 0xFF	; 255
   1a62c:	1f 4f       	sbci	r17, 0xFF	; 255
   1a62e:	2f 4f       	sbci	r18, 0xFF	; 255
   1a630:	3f 4f       	sbci	r19, 0xFF	; 255

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   1a632:	40 17       	cp	r20, r16
   1a634:	51 07       	cpc	r21, r17
   1a636:	62 07       	cpc	r22, r18
   1a638:	73 07       	cpc	r23, r19
   1a63a:	29 f4       	brne	.+10     	; 0x1a646 <lif_dir+0x180>
            {
                bytes = LIF->DIR.FileBytes;
   1a63c:	88 8e       	std	Y+24, r8	; 0x18
   1a63e:	99 8e       	std	Y+25, r9	; 0x19
   1a640:	aa 8e       	std	Y+26, r10	; 0x1a
   1a642:	bb 8e       	std	Y+27, r11	; 0x1b
   1a644:	2e c0       	rjmp	.+92     	; 0x1a6a2 <lif_dir+0x1dc>
            }
            else
            {
                warn = '!';
                if(debuglevel & LIF_DEBUG)
   1a646:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1a64a:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a64e:	32 ff       	sbrs	r19, 2
   1a650:	24 c0       	rjmp	.+72     	; 0x1a69a <lif_dir+0x1d4>
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n",
   1a652:	4c 01       	movw	r8, r24
   1a654:	a1 2c       	mov	r10, r1
   1a656:	b1 2c       	mov	r11, r1
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1a658:	33 27       	eor	r19, r19
   1a65a:	2b 2d       	mov	r18, r11
   1a65c:	1a 2d       	mov	r17, r10
   1a65e:	09 2d       	mov	r16, r9
    if(bytes % (long)LIF_SECTOR_SIZE)
   1a660:	88 23       	and	r24, r24
   1a662:	21 f0       	breq	.+8      	; 0x1a66c <lif_dir+0x1a6>
        ++sectors;
   1a664:	0f 5f       	subi	r16, 0xFF	; 255
   1a666:	1f 4f       	sbci	r17, 0xFF	; 255
   1a668:	2f 4f       	sbci	r18, 0xFF	; 255
   1a66a:	3f 4f       	sbci	r19, 0xFF	; 255
            else
            {
                warn = '!';
                if(debuglevel & LIF_DEBUG)
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n",
   1a66c:	ed b7       	in	r30, 0x3d	; 61
   1a66e:	fe b7       	in	r31, 0x3e	; 62
   1a670:	46 87       	std	Z+14, r20	; 0x0e
   1a672:	57 87       	std	Z+15, r21	; 0x0f
   1a674:	60 8b       	std	Z+16, r22	; 0x10
   1a676:	71 8b       	std	Z+17, r23	; 0x11
   1a678:	02 87       	std	Z+10, r16	; 0x0a
   1a67a:	13 87       	std	Z+11, r17	; 0x0b
   1a67c:	24 87       	std	Z+12, r18	; 0x0c
   1a67e:	35 87       	std	Z+13, r19	; 0x0d
   1a680:	86 82       	std	Z+6, r8	; 0x06
   1a682:	97 82       	std	Z+7, r9	; 0x07
   1a684:	a0 86       	std	Z+8, r10	; 0x08
   1a686:	b1 86       	std	Z+9, r11	; 0x09
   1a688:	0e 8d       	ldd	r16, Y+30	; 0x1e
   1a68a:	1f 8d       	ldd	r17, Y+31	; 0x1f
   1a68c:	15 83       	std	Z+5, r17	; 0x05
   1a68e:	04 83       	std	Z+4, r16	; 0x04
   1a690:	c1 82       	std	Z+1, r12	; 0x01
   1a692:	d2 82       	std	Z+2, r13	; 0x02
   1a694:	e3 82       	std	Z+3, r14	; 0x03
   1a696:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
            {
                bytes = LIF->DIR.FileBytes;
            }
            else
            {
                warn = '!';
   1a69a:	01 e2       	ldi	r16, 0x21	; 33
   1a69c:	10 e0       	ldi	r17, 0x00	; 0
   1a69e:	1f 8b       	std	Y+23, r17	; 0x17
   1a6a0:	0e 8b       	std	Y+22, r16	; 0x16
                }
            }
        }

// name type start size
        printf("%-10s  %04Xh      %8lXh   %9ld%c      %4d   %s\n",
   1a6a2:	ac 8d       	ldd	r26, Y+28	; 0x1c
   1a6a4:	bd 8d       	ldd	r27, Y+29	; 0x1d
   1a6a6:	8d 90       	ld	r8, X+
   1a6a8:	9c 90       	ld	r9, X
   1a6aa:	81 14       	cp	r8, r1
   1a6ac:	91 04       	cpc	r9, r1
   1a6ae:	19 f0       	breq	.+6      	; 0x1a6b6 <lif_dir+0x1f0>
   1a6b0:	0e 8d       	ldd	r16, Y+30	; 0x1e
   1a6b2:	1f 8d       	ldd	r17, Y+31	; 0x1f
   1a6b4:	02 c0       	rjmp	.+4      	; 0x1a6ba <lif_dir+0x1f4>
   1a6b6:	0c e4       	ldi	r16, 0x4C	; 76
   1a6b8:	16 e1       	ldi	r17, 0x16	; 22
   1a6ba:	a8 a5       	ldd	r26, Y+40	; 0x28
   1a6bc:	b9 a5       	ldd	r27, Y+41	; 0x29
   1a6be:	8d 91       	ld	r24, X+
   1a6c0:	9d 91       	ld	r25, X+
   1a6c2:	0d 90       	ld	r0, X+
   1a6c4:	bc 91       	ld	r27, X
   1a6c6:	a0 2d       	mov	r26, r0
   1a6c8:	88 a3       	std	Y+32, r24	; 0x20
   1a6ca:	99 a3       	std	Y+33, r25	; 0x21
   1a6cc:	aa a3       	std	Y+34, r26	; 0x22
   1a6ce:	bb a3       	std	Y+35, r27	; 0x23
   1a6d0:	ea a5       	ldd	r30, Y+42	; 0x2a
   1a6d2:	fb a5       	ldd	r31, Y+43	; 0x2b
   1a6d4:	a0 80       	ld	r10, Z
   1a6d6:	b1 80       	ldd	r11, Z+1	; 0x01
   1a6d8:	8c a5       	ldd	r24, Y+44	; 0x2c
   1a6da:	9d a5       	ldd	r25, Y+45	; 0x2d
   1a6dc:	0e 94 04 c6 	call	0x18c08	; 0x18c08 <lif_lifbcd2timestr>
   1a6e0:	ed b7       	in	r30, 0x3d	; 61
   1a6e2:	fe b7       	in	r31, 0x3e	; 62
   1a6e4:	95 8b       	std	Z+21, r25	; 0x15
   1a6e6:	84 8b       	std	Z+20, r24	; 0x14
   1a6e8:	b3 8a       	std	Z+19, r11	; 0x13
   1a6ea:	a2 8a       	std	Z+18, r10	; 0x12
   1a6ec:	2e 89       	ldd	r18, Y+22	; 0x16
   1a6ee:	3f 89       	ldd	r19, Y+23	; 0x17
   1a6f0:	31 8b       	std	Z+17, r19	; 0x11
   1a6f2:	20 8b       	std	Z+16, r18	; 0x10
   1a6f4:	88 8d       	ldd	r24, Y+24	; 0x18
   1a6f6:	99 8d       	ldd	r25, Y+25	; 0x19
   1a6f8:	aa 8d       	ldd	r26, Y+26	; 0x1a
   1a6fa:	bb 8d       	ldd	r27, Y+27	; 0x1b
   1a6fc:	84 87       	std	Z+12, r24	; 0x0c
   1a6fe:	95 87       	std	Z+13, r25	; 0x0d
   1a700:	a6 87       	std	Z+14, r26	; 0x0e
   1a702:	b7 87       	std	Z+15, r27	; 0x0f
   1a704:	88 a1       	ldd	r24, Y+32	; 0x20
   1a706:	99 a1       	ldd	r25, Y+33	; 0x21
   1a708:	aa a1       	ldd	r26, Y+34	; 0x22
   1a70a:	bb a1       	ldd	r27, Y+35	; 0x23
   1a70c:	80 87       	std	Z+8, r24	; 0x08
   1a70e:	91 87       	std	Z+9, r25	; 0x09
   1a710:	a2 87       	std	Z+10, r26	; 0x0a
   1a712:	b3 87       	std	Z+11, r27	; 0x0b
   1a714:	97 82       	std	Z+7, r9	; 0x07
   1a716:	86 82       	std	Z+6, r8	; 0x06
   1a718:	15 83       	std	Z+5, r17	; 0x05
   1a71a:	04 83       	std	Z+4, r16	; 0x04
   1a71c:	41 82       	std	Z+1, r4	; 0x01
   1a71e:	52 82       	std	Z+2, r5	; 0x02
   1a720:	63 82       	std	Z+3, r6	; 0x03
   1a722:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
            (long)bytes,
            warn,
            (int)LIF->DIR.SectorSize,
            lif_lifbcd2timestr(LIF->DIR.date));

        ++index;
   1a726:	ff ef       	ldi	r31, 0xFF	; 255
   1a728:	2f 1a       	sub	r2, r31
   1a72a:	3f 0a       	sbc	r3, r31
    }
   1a72c:	4c cf       	rjmp	.-360    	; 0x1a5c6 <lif_dir+0x100>

    printf("\n");
   1a72e:	82 e8       	ldi	r24, 0x82	; 130
   1a730:	9a e3       	ldi	r25, 0x3A	; 58
   1a732:	a0 e0       	ldi	r26, 0x00	; 0
   1a734:	ed b7       	in	r30, 0x3d	; 61
   1a736:	fe b7       	in	r31, 0x3e	; 62
   1a738:	81 83       	std	Z+1, r24	; 0x01
   1a73a:	92 83       	std	Z+2, r25	; 0x02
   1a73c:	a3 83       	std	Z+3, r26	; 0x03
   1a73e:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    printf("%8ld Files\n", (long)LIF->files);
   1a742:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a744:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a746:	84 8d       	ldd	r24, Z+28	; 0x1c
   1a748:	95 8d       	ldd	r25, Z+29	; 0x1d
   1a74a:	09 2e       	mov	r0, r25
   1a74c:	00 0c       	add	r0, r0
   1a74e:	aa 0b       	sbc	r26, r26
   1a750:	bb 0b       	sbc	r27, r27
   1a752:	ed b7       	in	r30, 0x3d	; 61
   1a754:	fe b7       	in	r31, 0x3e	; 62
   1a756:	84 83       	std	Z+4, r24	; 0x04
   1a758:	95 83       	std	Z+5, r25	; 0x05
   1a75a:	a6 83       	std	Z+6, r26	; 0x06
   1a75c:	b7 83       	std	Z+7, r27	; 0x07
   1a75e:	86 e7       	ldi	r24, 0x76	; 118
   1a760:	9a e3       	ldi	r25, 0x3A	; 58
   1a762:	a0 e0       	ldi	r26, 0x00	; 0
   1a764:	81 83       	std	Z+1, r24	; 0x01
   1a766:	92 83       	std	Z+2, r25	; 0x02
   1a768:	a3 83       	std	Z+3, r26	; 0x03
   1a76a:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    printf("%8ld Purged\n", (long)LIF->purged);
   1a76e:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a770:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a772:	86 8d       	ldd	r24, Z+30	; 0x1e
   1a774:	97 8d       	ldd	r25, Z+31	; 0x1f
   1a776:	09 2e       	mov	r0, r25
   1a778:	00 0c       	add	r0, r0
   1a77a:	aa 0b       	sbc	r26, r26
   1a77c:	bb 0b       	sbc	r27, r27
   1a77e:	ed b7       	in	r30, 0x3d	; 61
   1a780:	fe b7       	in	r31, 0x3e	; 62
   1a782:	84 83       	std	Z+4, r24	; 0x04
   1a784:	95 83       	std	Z+5, r25	; 0x05
   1a786:	a6 83       	std	Z+6, r26	; 0x06
   1a788:	b7 83       	std	Z+7, r27	; 0x07
   1a78a:	89 e6       	ldi	r24, 0x69	; 105
   1a78c:	9a e3       	ldi	r25, 0x3A	; 58
   1a78e:	a0 e0       	ldi	r26, 0x00	; 0
   1a790:	81 83       	std	Z+1, r24	; 0x01
   1a792:	92 83       	std	Z+2, r25	; 0x02
   1a794:	a3 83       	std	Z+3, r26	; 0x03
   1a796:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    printf("%8ld Dir  start\n",   (long)LIF->VOL.DirStartSector);
   1a79a:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a79c:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a79e:	85 a5       	ldd	r24, Z+45	; 0x2d
   1a7a0:	96 a5       	ldd	r25, Z+46	; 0x2e
   1a7a2:	a7 a5       	ldd	r26, Z+47	; 0x2f
   1a7a4:	b0 a9       	ldd	r27, Z+48	; 0x30
   1a7a6:	ed b7       	in	r30, 0x3d	; 61
   1a7a8:	fe b7       	in	r31, 0x3e	; 62
   1a7aa:	84 83       	std	Z+4, r24	; 0x04
   1a7ac:	95 83       	std	Z+5, r25	; 0x05
   1a7ae:	a6 83       	std	Z+6, r26	; 0x06
   1a7b0:	b7 83       	std	Z+7, r27	; 0x07
   1a7b2:	88 e5       	ldi	r24, 0x58	; 88
   1a7b4:	9a e3       	ldi	r25, 0x3A	; 58
   1a7b6:	a0 e0       	ldi	r26, 0x00	; 0
   1a7b8:	81 83       	std	Z+1, r24	; 0x01
   1a7ba:	92 83       	std	Z+2, r25	; 0x02
   1a7bc:	a3 83       	std	Z+3, r26	; 0x03
   1a7be:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    printf("%8ld Dir  sectors\n", (long)LIF->VOL.DirSectors);
   1a7c2:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a7c4:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a7c6:	85 a9       	ldd	r24, Z+53	; 0x35
   1a7c8:	96 a9       	ldd	r25, Z+54	; 0x36
   1a7ca:	a7 a9       	ldd	r26, Z+55	; 0x37
   1a7cc:	b0 ad       	ldd	r27, Z+56	; 0x38
   1a7ce:	ed b7       	in	r30, 0x3d	; 61
   1a7d0:	fe b7       	in	r31, 0x3e	; 62
   1a7d2:	84 83       	std	Z+4, r24	; 0x04
   1a7d4:	95 83       	std	Z+5, r25	; 0x05
   1a7d6:	a6 83       	std	Z+6, r26	; 0x06
   1a7d8:	b7 83       	std	Z+7, r27	; 0x07
   1a7da:	85 e4       	ldi	r24, 0x45	; 69
   1a7dc:	9a e3       	ldi	r25, 0x3A	; 58
   1a7de:	a0 e0       	ldi	r26, 0x00	; 0
   1a7e0:	81 83       	std	Z+1, r24	; 0x01
   1a7e2:	92 83       	std	Z+2, r25	; 0x02
   1a7e4:	a3 83       	std	Z+3, r26	; 0x03
   1a7e6:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    printf("%8ld Used sectors\n", (long)LIF->usedsectors);
   1a7ea:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a7ec:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a7ee:	84 89       	ldd	r24, Z+20	; 0x14
   1a7f0:	95 89       	ldd	r25, Z+21	; 0x15
   1a7f2:	a6 89       	ldd	r26, Z+22	; 0x16
   1a7f4:	b7 89       	ldd	r27, Z+23	; 0x17
   1a7f6:	ed b7       	in	r30, 0x3d	; 61
   1a7f8:	fe b7       	in	r31, 0x3e	; 62
   1a7fa:	84 83       	std	Z+4, r24	; 0x04
   1a7fc:	95 83       	std	Z+5, r25	; 0x05
   1a7fe:	a6 83       	std	Z+6, r26	; 0x06
   1a800:	b7 83       	std	Z+7, r27	; 0x07
   1a802:	82 e3       	ldi	r24, 0x32	; 50
   1a804:	9a e3       	ldi	r25, 0x3A	; 58
   1a806:	a0 e0       	ldi	r26, 0x00	; 0
   1a808:	81 83       	std	Z+1, r24	; 0x01
   1a80a:	92 83       	std	Z+2, r25	; 0x02
   1a80c:	a3 83       	std	Z+3, r26	; 0x03
   1a80e:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    printf("%8ld Free sectors\n", (long)LIF->freesectors);
   1a812:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a814:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a816:	80 8d       	ldd	r24, Z+24	; 0x18
   1a818:	91 8d       	ldd	r25, Z+25	; 0x19
   1a81a:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a81c:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a81e:	ed b7       	in	r30, 0x3d	; 61
   1a820:	fe b7       	in	r31, 0x3e	; 62
   1a822:	84 83       	std	Z+4, r24	; 0x04
   1a824:	95 83       	std	Z+5, r25	; 0x05
   1a826:	a6 83       	std	Z+6, r26	; 0x06
   1a828:	b7 83       	std	Z+7, r27	; 0x07
   1a82a:	8f e1       	ldi	r24, 0x1F	; 31
   1a82c:	9a e3       	ldi	r25, 0x3A	; 58
   1a82e:	a0 e0       	ldi	r26, 0x00	; 0
   1a830:	81 83       	std	Z+1, r24	; 0x01
   1a832:	92 83       	std	Z+2, r25	; 0x02
   1a834:	a3 83       	std	Z+3, r26	; 0x03
   1a836:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a83a:	8e a5       	ldd	r24, Y+46	; 0x2e
   1a83c:	9f a5       	ldd	r25, Y+47	; 0x2f
   1a83e:	0e 94 a6 ca 	call	0x1954c	; 0x1954c <lif_close_volume>
    printf("%8ld Dir  sectors\n", (long)LIF->VOL.DirSectors);
    printf("%8ld Used sectors\n", (long)LIF->usedsectors);
    printf("%8ld Free sectors\n", (long)LIF->freesectors);

    lif_closedir(LIF);
}
   1a842:	af 96       	adiw	r28, 0x2f	; 47
   1a844:	0f b6       	in	r0, 0x3f	; 63
   1a846:	f8 94       	cli
   1a848:	de bf       	out	0x3e, r29	; 62
   1a84a:	0f be       	out	0x3f, r0	; 63
   1a84c:	cd bf       	out	0x3d, r28	; 61
   1a84e:	df 91       	pop	r29
   1a850:	cf 91       	pop	r28
   1a852:	1f 91       	pop	r17
   1a854:	0f 91       	pop	r16
   1a856:	ef 90       	pop	r14
   1a858:	df 90       	pop	r13
   1a85a:	cf 90       	pop	r12
   1a85c:	bf 90       	pop	r11
   1a85e:	af 90       	pop	r10
   1a860:	9f 90       	pop	r9
   1a862:	8f 90       	pop	r8
   1a864:	6f 90       	pop	r6
   1a866:	5f 90       	pop	r5
   1a868:	4f 90       	pop	r4
   1a86a:	3f 90       	pop	r3
   1a86c:	2f 90       	pop	r2
   1a86e:	08 95       	ret

0001a870 <lif_find_file>:
/// @param[in] *LIF: directory pointer
/// @param[in] liflabel: File name in LIF image
/// @return Directory index of record
MEMSPACE
int lif_find_file(lif_t *LIF, char *liflabel)
{
   1a870:	a5 e0       	ldi	r26, 0x05	; 5
   1a872:	b0 e0       	ldi	r27, 0x00	; 0
   1a874:	ee e3       	ldi	r30, 0x3E	; 62
   1a876:	f4 ed       	ldi	r31, 0xD4	; 212
   1a878:	0c 94 07 e7 	jmp	0x1ce0e	; 0x1ce0e <__prologue_saves__+0x10>
   1a87c:	7c 01       	movw	r14, r24
   1a87e:	eb 01       	movw	r28, r22
    int index;

    if( !lif_checkname(liflabel) )
   1a880:	cb 01       	movw	r24, r22
   1a882:	0e 94 f5 c2 	call	0x185ea	; 0x185ea <lif_checkname>
   1a886:	89 2b       	or	r24, r25
   1a888:	69 f4       	brne	.+26     	; 0x1a8a4 <lif_find_file+0x34>
    {
        if(debuglevel & LIF_DEBUG)
   1a88a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a88e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a892:	92 ff       	sbrs	r25, 2
   1a894:	48 c0       	rjmp	.+144    	; 0x1a926 <lif_find_file+0xb6>
            printf("lif_find_file:[%s] invalid characters\n", liflabel);
   1a896:	ed b7       	in	r30, 0x3d	; 61
   1a898:	fe b7       	in	r31, 0x3e	; 62
   1a89a:	d5 83       	std	Z+5, r29	; 0x05
   1a89c:	c4 83       	std	Z+4, r28	; 0x04
   1a89e:	88 ef       	ldi	r24, 0xF8	; 248
   1a8a0:	99 e3       	ldi	r25, 0x39	; 57
   1a8a2:	15 c0       	rjmp	.+42     	; 0x1a8ce <lif_find_file+0x5e>
        return(-1);
    }
    if(strlen(liflabel) > 10)
   1a8a4:	fe 01       	movw	r30, r28
   1a8a6:	01 90       	ld	r0, Z+
   1a8a8:	00 20       	and	r0, r0
   1a8aa:	e9 f7       	brne	.-6      	; 0x1a8a6 <lif_find_file+0x36>
   1a8ac:	31 97       	sbiw	r30, 0x01	; 1
   1a8ae:	ec 1b       	sub	r30, r28
   1a8b0:	fd 0b       	sbc	r31, r29
   1a8b2:	3b 97       	sbiw	r30, 0x0b	; 11
   1a8b4:	98 f0       	brcs	.+38     	; 0x1a8dc <lif_find_file+0x6c>
    {
        if(debuglevel & LIF_DEBUG)
   1a8b6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a8ba:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a8be:	92 ff       	sbrs	r25, 2
   1a8c0:	32 c0       	rjmp	.+100    	; 0x1a926 <lif_find_file+0xb6>
            printf("lif_find_file:[%s] liflabel too big\n", liflabel);
   1a8c2:	ed b7       	in	r30, 0x3d	; 61
   1a8c4:	fe b7       	in	r31, 0x3e	; 62
   1a8c6:	d5 83       	std	Z+5, r29	; 0x05
   1a8c8:	c4 83       	std	Z+4, r28	; 0x04
   1a8ca:	83 ed       	ldi	r24, 0xD3	; 211
   1a8cc:	99 e3       	ldi	r25, 0x39	; 57
   1a8ce:	a0 e0       	ldi	r26, 0x00	; 0
   1a8d0:	81 83       	std	Z+1, r24	; 0x01
   1a8d2:	92 83       	std	Z+2, r25	; 0x02
   1a8d4:	a3 83       	std	Z+3, r26	; 0x03
   1a8d6:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   1a8da:	25 c0       	rjmp	.+74     	; 0x1a926 <lif_find_file+0xb6>
        return(-1);
    }

    if(LIF == NULL)
   1a8dc:	e1 14       	cp	r14, r1
   1a8de:	f1 04       	cpc	r15, r1
   1a8e0:	11 f1       	breq	.+68     	; 0x1a926 <lif_find_file+0xb6>
   1a8e2:	00 e0       	ldi	r16, 0x00	; 0
   1a8e4:	10 e0       	ldi	r17, 0x00	; 0
    while(1)
    {
        if(!lif_readdirindex(LIF,index))
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
   1a8e6:	67 01       	movw	r12, r14
   1a8e8:	fa e5       	ldi	r31, 0x5A	; 90
   1a8ea:	cf 0e       	add	r12, r31
   1a8ec:	d1 1c       	adc	r13, r1
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1a8ee:	57 01       	movw	r10, r14
   1a8f0:	2f e4       	ldi	r18, 0x4F	; 79
   1a8f2:	a2 0e       	add	r10, r18
   1a8f4:	b1 1c       	adc	r11, r1
        return(-1);

    index = 0;
    while(1)
    {
        if(!lif_readdirindex(LIF,index))
   1a8f6:	b8 01       	movw	r22, r16
   1a8f8:	c7 01       	movw	r24, r14
   1a8fa:	0e 94 34 cb 	call	0x19668	; 0x19668 <lif_readdirindex>
   1a8fe:	89 2b       	or	r24, r25
   1a900:	91 f0       	breq	.+36     	; 0x1a926 <lif_find_file+0xb6>
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
   1a902:	f6 01       	movw	r30, r12
   1a904:	80 81       	ld	r24, Z
   1a906:	91 81       	ldd	r25, Z+1	; 0x01
   1a908:	8f 3f       	cpi	r24, 0xFF	; 255
   1a90a:	ff ef       	ldi	r31, 0xFF	; 255
   1a90c:	9f 07       	cpc	r25, r31
   1a90e:	59 f0       	breq	.+22     	; 0x1a926 <lif_find_file+0xb6>
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1a910:	89 2b       	or	r24, r25
   1a912:	31 f0       	breq	.+12     	; 0x1a920 <lif_find_file+0xb0>
   1a914:	be 01       	movw	r22, r28
   1a916:	c5 01       	movw	r24, r10
   1a918:	0e 94 d8 31 	call	0x63b0	; 0x63b0 <strcasecmp>
   1a91c:	89 2b       	or	r24, r25
   1a91e:	31 f0       	breq	.+12     	; 0x1a92c <lif_find_file+0xbc>
            break;
        ++index;
   1a920:	0f 5f       	subi	r16, 0xFF	; 255
   1a922:	1f 4f       	sbci	r17, 0xFF	; 255
   1a924:	e8 cf       	rjmp	.-48     	; 0x1a8f6 <lif_find_file+0x86>

    if( !lif_checkname(liflabel) )
    {
        if(debuglevel & LIF_DEBUG)
            printf("lif_find_file:[%s] invalid characters\n", liflabel);
        return(-1);
   1a926:	8f ef       	ldi	r24, 0xFF	; 255
   1a928:	9f ef       	ldi	r25, 0xFF	; 255
   1a92a:	01 c0       	rjmp	.+2      	; 0x1a92e <lif_find_file+0xbe>
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1a92c:	c8 01       	movw	r24, r16
            break;
        ++index;
    }
    return(index);
}
   1a92e:	cd b7       	in	r28, 0x3d	; 61
   1a930:	de b7       	in	r29, 0x3e	; 62
   1a932:	25 96       	adiw	r28, 0x05	; 5
   1a934:	ea e0       	ldi	r30, 0x0A	; 10
   1a936:	0c 94 23 e7 	jmp	0x1ce46	; 0x1ce46 <__epilogue_restores__+0x10>

0001a93a <lif_e010_pad_sector>:
/// @param[in] offset: sector offset
/// @param[in] wbuf: E010 PAD data
/// @return size of E010 PAD data
MEMSPACE
int lif_e010_pad_sector(long offset, uint8_t *wbuf)
{
   1a93a:	a5 e0       	ldi	r26, 0x05	; 5
   1a93c:	b0 e0       	ldi	r27, 0x00	; 0
   1a93e:	e3 ea       	ldi	r30, 0xA3	; 163
   1a940:	f4 ed       	ldi	r31, 0xD4	; 212
   1a942:	0c 94 09 e7 	jmp	0x1ce12	; 0x1ce12 <__prologue_saves__+0x14>
   1a946:	6b 01       	movw	r12, r22
   1a948:	7c 01       	movw	r14, r24
   1a94a:	8a 01       	movw	r16, r20
    int ind;
    int pos,rem;

// Compute the current offset in this sector
    pos = (offset % (long)LIF_SECTOR_SIZE);
   1a94c:	20 e0       	ldi	r18, 0x00	; 0
   1a94e:	31 e0       	ldi	r19, 0x01	; 1
   1a950:	40 e0       	ldi	r20, 0x00	; 0
   1a952:	50 e0       	ldi	r21, 0x00	; 0
   1a954:	0e 94 b4 e6 	call	0x1cd68	; 0x1cd68 <__divmodsi4>
    if(!pos)
   1a958:	61 15       	cp	r22, r1
   1a95a:	71 05       	cpc	r23, r1
   1a95c:	e1 f1       	breq	.+120    	; 0x1a9d6 <lif_e010_pad_sector+0x9c>
        return(0);

// Number of bytes free in this sector
    rem = (long)LIF_SECTOR_SIZE - (long)pos;
   1a95e:	c0 e0       	ldi	r28, 0x00	; 0
   1a960:	d1 e0       	ldi	r29, 0x01	; 1
   1a962:	c6 1b       	sub	r28, r22
   1a964:	d7 0b       	sbc	r29, r23

// Bytes written to wbuf
    ind = 0;
// PAD
    wbuf[ind++] = 0xEF;
   1a966:	f8 01       	movw	r30, r16
   1a968:	8f ee       	ldi	r24, 0xEF	; 239
   1a96a:	81 93       	st	Z+, r24
    while(ind<rem)
        wbuf[ind++] = 0xff;
   1a96c:	2f ef       	ldi	r18, 0xFF	; 255

// Bytes written to wbuf
    ind = 0;
// PAD
    wbuf[ind++] = 0xEF;
    while(ind<rem)
   1a96e:	cf 01       	movw	r24, r30
   1a970:	80 1b       	sub	r24, r16
   1a972:	91 0b       	sbc	r25, r17
   1a974:	8c 17       	cp	r24, r28
   1a976:	9d 07       	cpc	r25, r29
   1a978:	14 f4       	brge	.+4      	; 0x1a97e <lif_e010_pad_sector+0x44>
        wbuf[ind++] = 0xff;
   1a97a:	21 93       	st	Z+, r18
   1a97c:	f8 cf       	rjmp	.-16     	; 0x1a96e <lif_e010_pad_sector+0x34>
   1a97e:	1c 16       	cp	r1, r28
   1a980:	1d 06       	cpc	r1, r29
   1a982:	14 f0       	brlt	.+4      	; 0x1a988 <lif_e010_pad_sector+0x4e>
   1a984:	c1 e0       	ldi	r28, 0x01	; 1
   1a986:	d0 e0       	ldi	r29, 0x00	; 0

    pos = (offset + (long) ind)  % (long) LIF_SECTOR_SIZE;
   1a988:	ce 01       	movw	r24, r28
   1a98a:	0d 2e       	mov	r0, r29
   1a98c:	00 0c       	add	r0, r0
   1a98e:	aa 0b       	sbc	r26, r26
   1a990:	bb 0b       	sbc	r27, r27
   1a992:	bc 01       	movw	r22, r24
   1a994:	cd 01       	movw	r24, r26
   1a996:	6c 0d       	add	r22, r12
   1a998:	7d 1d       	adc	r23, r13
   1a99a:	8e 1d       	adc	r24, r14
   1a99c:	9f 1d       	adc	r25, r15
   1a99e:	20 e0       	ldi	r18, 0x00	; 0
   1a9a0:	31 e0       	ldi	r19, 0x01	; 1
   1a9a2:	40 e0       	ldi	r20, 0x00	; 0
   1a9a4:	50 e0       	ldi	r21, 0x00	; 0
   1a9a6:	0e 94 b4 e6 	call	0x1cd68	; 0x1cd68 <__divmodsi4>
// NEW SECTOR
// Debugging make sure we are at sector boundry
    if(pos)
   1a9aa:	61 15       	cp	r22, r1
   1a9ac:	71 05       	cpc	r23, r1
   1a9ae:	b1 f0       	breq	.+44     	; 0x1a9dc <lif_e010_pad_sector+0xa2>
    {
        if(debuglevel & LIF_DEBUG)
   1a9b0:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1a9b4:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a9b8:	32 ff       	sbrs	r19, 2
   1a9ba:	12 c0       	rjmp	.+36     	; 0x1a9e0 <lif_e010_pad_sector+0xa6>
            printf("lif_e010_dap_sector: expected sector boundry: offset:%d\n", (int) pos);
   1a9bc:	ed b7       	in	r30, 0x3d	; 61
   1a9be:	fe b7       	in	r31, 0x3e	; 62
   1a9c0:	75 83       	std	Z+5, r23	; 0x05
   1a9c2:	64 83       	std	Z+4, r22	; 0x04
   1a9c4:	8a e9       	ldi	r24, 0x9A	; 154
   1a9c6:	99 e3       	ldi	r25, 0x39	; 57
   1a9c8:	a0 e0       	ldi	r26, 0x00	; 0
   1a9ca:	81 83       	std	Z+1, r24	; 0x01
   1a9cc:	92 83       	std	Z+2, r25	; 0x02
   1a9ce:	a3 83       	std	Z+3, r26	; 0x03
   1a9d0:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   1a9d4:	05 c0       	rjmp	.+10     	; 0x1a9e0 <lif_e010_pad_sector+0xa6>
    int pos,rem;

// Compute the current offset in this sector
    pos = (offset % (long)LIF_SECTOR_SIZE);
    if(!pos)
        return(0);
   1a9d6:	80 e0       	ldi	r24, 0x00	; 0
   1a9d8:	90 e0       	ldi	r25, 0x00	; 0
   1a9da:	04 c0       	rjmp	.+8      	; 0x1a9e4 <lif_e010_pad_sector+0xaa>
   1a9dc:	ce 01       	movw	r24, r28
   1a9de:	02 c0       	rjmp	.+4      	; 0x1a9e4 <lif_e010_pad_sector+0xaa>
// Debugging make sure we are at sector boundry
    if(pos)
    {
        if(debuglevel & LIF_DEBUG)
            printf("lif_e010_dap_sector: expected sector boundry: offset:%d\n", (int) pos);
        return(-1);
   1a9e0:	8f ef       	ldi	r24, 0xFF	; 255
   1a9e2:	9f ef       	ldi	r25, 0xFF	; 255
    }
    return(ind);
}
   1a9e4:	cd b7       	in	r28, 0x3d	; 61
   1a9e6:	de b7       	in	r29, 0x3e	; 62
   1a9e8:	25 96       	adiw	r28, 0x05	; 5
   1a9ea:	e8 e0       	ldi	r30, 0x08	; 8
   1a9ec:	0c 94 25 e7 	jmp	0x1ce4a	; 0x1ce4a <__epilogue_restores__+0x14>

0001a9f0 <lif_ascii_string_to_e010>:
/// @param[in] offset: E010 data sector offset, only used in formatting wbuf with headers
/// @param[in] wbuf: E010 data result
/// @return size of E010 data
MEMSPACE
int lif_ascii_string_to_e010(char *str, long offset, uint8_t *wbuf)
{
   1a9f0:	a5 e0       	ldi	r26, 0x05	; 5
   1a9f2:	b0 e0       	ldi	r27, 0x00	; 0
   1a9f4:	ee ef       	ldi	r30, 0xFE	; 254
   1a9f6:	f4 ed       	ldi	r31, 0xD4	; 212
   1a9f8:	0c 94 ff e6 	jmp	0x1cdfe	; 0x1cdfe <__prologue_saves__>
   1a9fc:	ec 01       	movw	r28, r24
   1a9fe:	4a 01       	movw	r8, r20
   1aa00:	5b 01       	movw	r10, r22
   1aa02:	79 01       	movw	r14, r18
    int ind;
    int len;
    int pos,rem;

// String size
    len = strlen(str);
   1aa04:	fc 01       	movw	r30, r24
   1aa06:	01 90       	ld	r0, Z+
   1aa08:	00 20       	and	r0, r0
   1aa0a:	e9 f7       	brne	.-6      	; 0x1aa06 <lif_ascii_string_to_e010+0x16>
   1aa0c:	31 97       	sbiw	r30, 0x01	; 1
   1aa0e:	6f 01       	movw	r12, r30
   1aa10:	c8 1a       	sub	r12, r24
   1aa12:	d9 0a       	sbc	r13, r25
    ind = 0;

// Compute the current offset in this sector
    pos = (offset % (long) LIF_SECTOR_SIZE);
// Number of bytes free in this sector
    rem = (long) LIF_SECTOR_SIZE - (long) pos;
   1aa14:	41 2c       	mov	r4, r1
   1aa16:	51 2c       	mov	r5, r1
   1aa18:	32 01       	movw	r6, r4
   1aa1a:	53 94       	inc	r5
   1aa1c:	cb 01       	movw	r24, r22
   1aa1e:	ba 01       	movw	r22, r20
   1aa20:	a3 01       	movw	r20, r6
   1aa22:	92 01       	movw	r18, r4
   1aa24:	0e 94 b4 e6 	call	0x1cd68	; 0x1cd68 <__divmodsi4>
   1aa28:	21 2c       	mov	r2, r1
   1aa2a:	33 24       	eor	r3, r3
   1aa2c:	33 94       	inc	r3
   1aa2e:	c1 01       	movw	r24, r2
   1aa30:	86 1b       	sub	r24, r22
   1aa32:	97 0b       	sbc	r25, r23

/// We ALWAYS pad a sector if:
///   There is no room for a 0xdf single header
///   - OR -
///   Spliting a string takes more space then padding here (extra header)
    if(rem < 6)
   1aa34:	86 30       	cpi	r24, 0x06	; 6
   1aa36:	91 05       	cpc	r25, r1
   1aa38:	20 f0       	brcs	.+8      	; 0x1aa42 <lif_ascii_string_to_e010+0x52>
    ind = 0;

// Compute the current offset in this sector
    pos = (offset % (long) LIF_SECTOR_SIZE);
// Number of bytes free in this sector
    rem = (long) LIF_SECTOR_SIZE - (long) pos;
   1aa3a:	1c 01       	movw	r2, r24

// String size
    len = strlen(str);

// Output buffer index
    ind = 0;
   1aa3c:	00 e0       	ldi	r16, 0x00	; 0
   1aa3e:	10 e0       	ldi	r17, 0x00	; 0
   1aa40:	17 c0       	rjmp	.+46     	; 0x1aa70 <lif_ascii_string_to_e010+0x80>
///   There is no room for a 0xdf single header
///   - OR -
///   Spliting a string takes more space then padding here (extra header)
    if(rem < 6)
    {
        ind = lif_e010_pad_sector(offset, wbuf);
   1aa42:	a7 01       	movw	r20, r14
   1aa44:	c5 01       	movw	r24, r10
   1aa46:	b4 01       	movw	r22, r8
   1aa48:	78 df       	rcall	.-272    	; 0x1a93a <lif_e010_pad_sector>
   1aa4a:	8c 01       	movw	r16, r24
        if(ind < 0)
   1aa4c:	97 fd       	sbrc	r25, 7
   1aa4e:	83 c0       	rjmp	.+262    	; 0x1ab56 <lif_ascii_string_to_e010+0x166>
            return(ind);

// Compute the current offset in this sector
        pos = ((offset + ind) % (long) LIF_SECTOR_SIZE);
// Number of bytes free in this sector
        rem = (long) LIF_SECTOR_SIZE - pos;
   1aa50:	09 2e       	mov	r0, r25
   1aa52:	00 0c       	add	r0, r0
   1aa54:	aa 0b       	sbc	r26, r26
   1aa56:	bb 0b       	sbc	r27, r27
   1aa58:	bc 01       	movw	r22, r24
   1aa5a:	cd 01       	movw	r24, r26
   1aa5c:	68 0d       	add	r22, r8
   1aa5e:	79 1d       	adc	r23, r9
   1aa60:	8a 1d       	adc	r24, r10
   1aa62:	9b 1d       	adc	r25, r11
   1aa64:	a3 01       	movw	r20, r6
   1aa66:	92 01       	movw	r18, r4
   1aa68:	0e 94 b4 e6 	call	0x1cd68	; 0x1cd68 <__divmodsi4>
   1aa6c:	26 1a       	sub	r2, r22
   1aa6e:	37 0a       	sbc	r3, r23
   1aa70:	f7 01       	movw	r30, r14
   1aa72:	e0 0f       	add	r30, r16
   1aa74:	f1 1f       	adc	r31, r17
   1aa76:	0d 5f       	subi	r16, 0xFD	; 253
   1aa78:	1f 4f       	sbci	r17, 0xFF	; 255
    }

// Note: IMPORTANT we have >= 6 bytes!!!

// Do not have to split, there is enough room
    if(rem >= (3 + len))
   1aa7a:	c6 01       	movw	r24, r12
   1aa7c:	02 96       	adiw	r24, 0x02	; 2
   1aa7e:	82 15       	cp	r24, r2
   1aa80:	93 05       	cpc	r25, r3
   1aa82:	84 f4       	brge	.+32     	; 0x1aaa4 <lif_ascii_string_to_e010+0xb4>
    {

// Write string in new sector
// The full string + header will fit
        wbuf[ind++] = 0xDF;
   1aa84:	8f ed       	ldi	r24, 0xDF	; 223
   1aa86:	80 83       	st	Z, r24
        wbuf[ind++] = len & 0xff;
   1aa88:	c1 82       	std	Z+1, r12	; 0x01
        wbuf[ind++] = (len >> 8) & 0xff;
   1aa8a:	d2 82       	std	Z+2, r13	; 0x02
   1aa8c:	f7 01       	movw	r30, r14
   1aa8e:	e0 0f       	add	r30, r16
   1aa90:	f1 1f       	adc	r31, r17
   1aa92:	cf 01       	movw	r24, r30
   1aa94:	8e 19       	sub	r24, r14
   1aa96:	9f 09       	sbc	r25, r15
// Write string
        while(*str)
   1aa98:	29 91       	ld	r18, Y+
   1aa9a:	22 23       	and	r18, r18
   1aa9c:	09 f4       	brne	.+2      	; 0x1aaa0 <lif_ascii_string_to_e010+0xb0>
   1aa9e:	5b c0       	rjmp	.+182    	; 0x1ab56 <lif_ascii_string_to_e010+0x166>
            wbuf[ind++] = *str++;
   1aaa0:	21 93       	st	Z+, r18
   1aaa2:	f7 cf       	rjmp	.-18     	; 0x1aa92 <lif_ascii_string_to_e010+0xa2>

// CURRENT SECTOR
// String spans a sector , so split the string

// 1st Split string header
        wbuf[ind++] = 0xCF;
   1aaa4:	8f ec       	ldi	r24, 0xCF	; 207
   1aaa6:	80 83       	st	Z, r24
        wbuf[ind++] = len & 0xff;
   1aaa8:	c1 82       	std	Z+1, r12	; 0x01
        wbuf[ind++] = (len >>8) & 0xff;
   1aaaa:	d2 82       	std	Z+2, r13	; 0x02
   1aaac:	d7 01       	movw	r26, r14
   1aaae:	a0 0f       	add	r26, r16
   1aab0:	b1 1f       	adc	r27, r17
// Write as much of the string as we can in this sector
        while(*str && ind<rem)
   1aab2:	fe 01       	movw	r30, r28
   1aab4:	81 91       	ld	r24, Z+
   1aab6:	81 11       	cpse	r24, r1
   1aab8:	0e c0       	rjmp	.+28     	; 0x1aad6 <lif_ascii_string_to_e010+0xe6>
            wbuf[ind++] = *str++;

// NEW SECTOR
// Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
   1aaba:	c8 01       	movw	r24, r16
   1aabc:	01 2e       	mov	r0, r17
   1aabe:	00 0c       	add	r0, r0
   1aac0:	aa 0b       	sbc	r26, r26
   1aac2:	bb 0b       	sbc	r27, r27
   1aac4:	bc 01       	movw	r22, r24
   1aac6:	cd 01       	movw	r24, r26
   1aac8:	68 0d       	add	r22, r8
   1aaca:	79 1d       	adc	r23, r9
   1aacc:	8a 1d       	adc	r24, r10
   1aace:	9b 1d       	adc	r25, r11
   1aad0:	61 11       	cpse	r22, r1
   1aad2:	09 c0       	rjmp	.+18     	; 0x1aae6 <lif_ascii_string_to_e010+0xf6>
   1aad4:	21 c0       	rjmp	.+66     	; 0x1ab18 <lif_ascii_string_to_e010+0x128>
// 1st Split string header
        wbuf[ind++] = 0xCF;
        wbuf[ind++] = len & 0xff;
        wbuf[ind++] = (len >>8) & 0xff;
// Write as much of the string as we can in this sector
        while(*str && ind<rem)
   1aad6:	02 15       	cp	r16, r2
   1aad8:	13 05       	cpc	r17, r3
   1aada:	7c f7       	brge	.-34     	; 0x1aaba <lif_ascii_string_to_e010+0xca>
            wbuf[ind++] = *str++;
   1aadc:	0f 5f       	subi	r16, 0xFF	; 255
   1aade:	1f 4f       	sbci	r17, 0xFF	; 255
   1aae0:	8d 93       	st	X+, r24
   1aae2:	ef 01       	movw	r28, r30
   1aae4:	e6 cf       	rjmp	.-52     	; 0x1aab2 <lif_ascii_string_to_e010+0xc2>

// NEW SECTOR
// Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
        {
            if(debuglevel & LIF_DEBUG)
   1aae6:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1aaea:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1aaee:	32 ff       	sbrs	r19, 2
   1aaf0:	30 c0       	rjmp	.+96     	; 0x1ab52 <lif_ascii_string_to_e010+0x162>
                printf("Expected sector boundry, offset:%d\n", (int) ((offset + ind) % LIF_SECTOR_SIZE) );
   1aaf2:	20 e0       	ldi	r18, 0x00	; 0
   1aaf4:	31 e0       	ldi	r19, 0x01	; 1
   1aaf6:	40 e0       	ldi	r20, 0x00	; 0
   1aaf8:	50 e0       	ldi	r21, 0x00	; 0
   1aafa:	0e 94 b4 e6 	call	0x1cd68	; 0x1cd68 <__divmodsi4>
   1aafe:	ed b7       	in	r30, 0x3d	; 61
   1ab00:	fe b7       	in	r31, 0x3e	; 62
   1ab02:	75 83       	std	Z+5, r23	; 0x05
   1ab04:	64 83       	std	Z+4, r22	; 0x04
   1ab06:	86 e7       	ldi	r24, 0x76	; 118
   1ab08:	99 e3       	ldi	r25, 0x39	; 57
   1ab0a:	a0 e0       	ldi	r26, 0x00	; 0
   1ab0c:	81 83       	std	Z+1, r24	; 0x01
   1ab0e:	92 83       	std	Z+2, r25	; 0x02
   1ab10:	a3 83       	std	Z+3, r26	; 0x03
   1ab12:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   1ab16:	1d c0       	rjmp	.+58     	; 0x1ab52 <lif_ascii_string_to_e010+0x162>
            return(-1);
        }

// Update remining string length
        len = strlen(str);
   1ab18:	fe 01       	movw	r30, r28
   1ab1a:	01 90       	ld	r0, Z+
   1ab1c:	00 20       	and	r0, r0
   1ab1e:	e9 f7       	brne	.-6      	; 0x1ab1a <lif_ascii_string_to_e010+0x12a>
   1ab20:	31 97       	sbiw	r30, 0x01	; 1
   1ab22:	9f 01       	movw	r18, r30
   1ab24:	2c 1b       	sub	r18, r28
   1ab26:	3d 0b       	sbc	r19, r29
// 2nd Split string header
        wbuf[ind++] = 0x6F;
   1ab28:	d7 01       	movw	r26, r14
   1ab2a:	a0 0f       	add	r26, r16
   1ab2c:	b1 1f       	adc	r27, r17
   1ab2e:	8f e6       	ldi	r24, 0x6F	; 111
   1ab30:	8c 93       	st	X, r24
        wbuf[ind++] = (len & 0xff);
   1ab32:	fd 01       	movw	r30, r26
   1ab34:	21 83       	std	Z+1, r18	; 0x01
        wbuf[ind++] = (len>>8) & 0xff;
   1ab36:	32 83       	std	Z+2, r19	; 0x02
   1ab38:	0d 5f       	subi	r16, 0xFD	; 253
   1ab3a:	1f 4f       	sbci	r17, 0xFF	; 255
   1ab3c:	f7 01       	movw	r30, r14
   1ab3e:	e0 0f       	add	r30, r16
   1ab40:	f1 1f       	adc	r31, r17
   1ab42:	cf 01       	movw	r24, r30
   1ab44:	8e 19       	sub	r24, r14
   1ab46:	9f 09       	sbc	r25, r15
// Write string
        while(*str)
   1ab48:	29 91       	ld	r18, Y+
   1ab4a:	22 23       	and	r18, r18
   1ab4c:	21 f0       	breq	.+8      	; 0x1ab56 <lif_ascii_string_to_e010+0x166>
            wbuf[ind++] = *str++;
   1ab4e:	21 93       	st	Z+, r18
   1ab50:	f8 cf       	rjmp	.-16     	; 0x1ab42 <lif_ascii_string_to_e010+0x152>
// Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
        {
            if(debuglevel & LIF_DEBUG)
                printf("Expected sector boundry, offset:%d\n", (int) ((offset + ind) % LIF_SECTOR_SIZE) );
            return(-1);
   1ab52:	8f ef       	ldi	r24, 0xFF	; 255
   1ab54:	9f ef       	ldi	r25, 0xFF	; 255
        while(*str)
            wbuf[ind++] = *str++;
    }

    return(ind);
}
   1ab56:	cd b7       	in	r28, 0x3d	; 61
   1ab58:	de b7       	in	r29, 0x3e	; 62
   1ab5a:	25 96       	adiw	r28, 0x05	; 5
   1ab5c:	e2 e1       	ldi	r30, 0x12	; 18
   1ab5e:	0c 94 1b e7 	jmp	0x1ce36	; 0x1ce36 <__epilogue_restores__>

0001ab62 <lif_add_ascii_file_as_e010_wrapper>:
/// @param[in] userfile: User ASCII file source
/// @param[in] *LIF: Where to write file if set (not NULL)
/// @return size of formatted result
MEMSPACE
long lif_add_ascii_file_as_e010_wrapper(lif_t *LIF, uint32_t offset, char *username)
{
   1ab62:	ad e0       	ldi	r26, 0x0D	; 13
   1ab64:	b3 e0       	ldi	r27, 0x03	; 3
   1ab66:	e7 eb       	ldi	r30, 0xB7	; 183
   1ab68:	f5 ed       	ldi	r31, 0xD5	; 213
   1ab6a:	0c 94 ff e6 	jmp	0x1cdfe	; 0x1cdfe <__prologue_saves__>
   1ab6e:	5c 01       	movw	r10, r24
   1ab70:	2a 01       	movw	r4, r20
   1ab72:	3b 01       	movw	r6, r22
   1ab74:	c9 01       	movw	r24, r18
// strings are limited to less then this
    char str[LIF_SECTOR_SIZE+1];
// output buffer must be larger then a single sectors because of either headers or padding
    uint8_t obuf[LIF_SECTOR_SIZE*2];

    fi = lif_open(username, "rb");
   1ab76:	6e ef       	ldi	r22, 0xFE	; 254
   1ab78:	78 e0       	ldi	r23, 0x08	; 8
   1ab7a:	0e 94 56 c1 	call	0x182ac	; 0x182ac <lif_open>
   1ab7e:	c7 5f       	subi	r28, 0xF7	; 247
   1ab80:	dc 4f       	sbci	r29, 0xFC	; 252
   1ab82:	99 83       	std	Y+1, r25	; 0x01
   1ab84:	88 83       	st	Y, r24
   1ab86:	c9 50       	subi	r28, 0x09	; 9
   1ab88:	d3 40       	sbci	r29, 0x03	; 3
    if(fi == NULL)
   1ab8a:	89 2b       	or	r24, r25
   1ab8c:	09 f4       	brne	.+2      	; 0x1ab90 <lif_add_ascii_file_as_e010_wrapper+0x2e>
   1ab8e:	63 c0       	rjmp	.+198    	; 0x1ac56 <lif_add_ascii_file_as_e010_wrapper+0xf4>
   1ab90:	81 2c       	mov	r8, r1
   1ab92:	91 2c       	mov	r9, r1
   1ab94:	c1 2c       	mov	r12, r1
   1ab96:	d1 2c       	mov	r13, r1
   1ab98:	76 01       	movw	r14, r12

        if(count > 256)
        {
            count = 0;
            if(LIF)
                printf("\tWrote: %8ld\r", (long)bytes);
   1ab9a:	88 e6       	ldi	r24, 0x68	; 104
   1ab9c:	99 e3       	ldi	r25, 0x39	; 57
   1ab9e:	9c 01       	movw	r18, r24
   1aba0:	40 e0       	ldi	r20, 0x00	; 0
   1aba2:	c5 5f       	subi	r28, 0xF5	; 245
   1aba4:	dc 4f       	sbci	r29, 0xFC	; 252
   1aba6:	28 83       	st	Y, r18
   1aba8:	39 83       	std	Y+1, r19	; 0x01
   1abaa:	4a 83       	std	Y+2, r20	; 0x02
   1abac:	cb 50       	subi	r28, 0x0B	; 11
   1abae:	d3 40       	sbci	r29, 0x03	; 3
   1abb0:	14 c0       	rjmp	.+40     	; 0x1abda <lif_add_ascii_file_as_e010_wrapper+0x78>
                fclose(fi);
                return(-1);
            }
        }

        offset += size;
   1abb2:	c1 01       	movw	r24, r2
   1abb4:	03 2c       	mov	r0, r3
   1abb6:	00 0c       	add	r0, r0
   1abb8:	aa 0b       	sbc	r26, r26
   1abba:	bb 0b       	sbc	r27, r27
   1abbc:	48 0e       	add	r4, r24
   1abbe:	59 1e       	adc	r5, r25
   1abc0:	6a 1e       	adc	r6, r26
   1abc2:	7b 1e       	adc	r7, r27
        bytes += size;
   1abc4:	c8 0e       	add	r12, r24
   1abc6:	d9 1e       	adc	r13, r25
   1abc8:	ea 1e       	adc	r14, r26
   1abca:	fb 1e       	adc	r15, r27
        count += size;
   1abcc:	82 0c       	add	r8, r2
   1abce:	93 1c       	adc	r9, r3

        if(count > 256)
   1abd0:	31 e0       	ldi	r19, 0x01	; 1
   1abd2:	83 16       	cp	r8, r19
   1abd4:	93 06       	cpc	r9, r19
   1abd6:	0c f0       	brlt	.+2      	; 0x1abda <lif_add_ascii_file_as_e010_wrapper+0x78>
   1abd8:	43 c0       	rjmp	.+134    	; 0x1ac60 <lif_add_ascii_file_as_e010_wrapper+0xfe>
    bytes = 0;
    count = 0;

// Read user file and write LIF records
// reserve 3 + LIF header bytes + 1 (EOS)
    while( fgets((char *)str,(int)sizeof(str) - 4, fi) != NULL )
   1abda:	c7 5f       	subi	r28, 0xF7	; 247
   1abdc:	dc 4f       	sbci	r29, 0xFC	; 252
   1abde:	48 81       	ld	r20, Y
   1abe0:	59 81       	ldd	r21, Y+1	; 0x01
   1abe2:	c9 50       	subi	r28, 0x09	; 9
   1abe4:	d3 40       	sbci	r29, 0x03	; 3
   1abe6:	6d ef       	ldi	r22, 0xFD	; 253
   1abe8:	70 e0       	ldi	r23, 0x00	; 0
   1abea:	ce 01       	movw	r24, r28
   1abec:	88 5f       	subi	r24, 0xF8	; 248
   1abee:	9d 4f       	sbci	r25, 0xFD	; 253
   1abf0:	0e 94 8a 76 	call	0xed14	; 0xed14 <fgets>
   1abf4:	89 2b       	or	r24, r25
   1abf6:	09 f4       	brne	.+2      	; 0x1abfa <lif_add_ascii_file_as_e010_wrapper+0x98>
   1abf8:	4b c0       	rjmp	.+150    	; 0x1ac90 <lif_add_ascii_file_as_e010_wrapper+0x12e>
    {
        trim_tail((char *)str);
   1abfa:	ce 01       	movw	r24, r28
   1abfc:	88 5f       	subi	r24, 0xF8	; 248
   1abfe:	9d 4f       	sbci	r25, 0xFD	; 253
   1ac00:	0e 94 4f 32 	call	0x649e	; 0x649e <trim_tail>

        strcat((char *)str,"\r");                 // HP85 lines end with "\r"
   1ac04:	65 e5       	ldi	r22, 0x55	; 85
   1ac06:	76 e1       	ldi	r23, 0x16	; 22
   1ac08:	ce 01       	movw	r24, r28
   1ac0a:	88 5f       	subi	r24, 0xF8	; 248
   1ac0c:	9d 4f       	sbci	r25, 0xFD	; 253
   1ac0e:	0e 94 92 31 	call	0x6324	; 0x6324 <strcat>

        size = lif_ascii_string_to_e010(str, offset, obuf);
   1ac12:	9e 01       	movw	r18, r28
   1ac14:	28 5f       	subi	r18, 0xF8	; 248
   1ac16:	3f 4f       	sbci	r19, 0xFF	; 255
   1ac18:	b3 01       	movw	r22, r6
   1ac1a:	a2 01       	movw	r20, r4
   1ac1c:	ce 01       	movw	r24, r28
   1ac1e:	88 5f       	subi	r24, 0xF8	; 248
   1ac20:	9d 4f       	sbci	r25, 0xFD	; 253
   1ac22:	e6 de       	rcall	.-564    	; 0x1a9f0 <lif_ascii_string_to_e010>
   1ac24:	1c 01       	movw	r2, r24
// Write string
// Now Write string
        if(LIF)
   1ac26:	a1 14       	cp	r10, r1
   1ac28:	b1 04       	cpc	r11, r1
   1ac2a:	19 f2       	breq	.-122    	; 0x1abb2 <lif_add_ascii_file_as_e010_wrapper+0x50>
        {
            len = lif_write(LIF, obuf, offset, size);
   1ac2c:	8c 01       	movw	r16, r24
   1ac2e:	a3 01       	movw	r20, r6
   1ac30:	92 01       	movw	r18, r4
   1ac32:	be 01       	movw	r22, r28
   1ac34:	68 5f       	subi	r22, 0xF8	; 248
   1ac36:	7f 4f       	sbci	r23, 0xFF	; 255
   1ac38:	c5 01       	movw	r24, r10
   1ac3a:	0e 94 2d c2 	call	0x1845a	; 0x1845a <lif_write>
            if(len < size)
   1ac3e:	82 15       	cp	r24, r2
   1ac40:	93 05       	cpc	r25, r3
   1ac42:	0c f0       	brlt	.+2      	; 0x1ac46 <lif_add_ascii_file_as_e010_wrapper+0xe4>
   1ac44:	b6 cf       	rjmp	.-148    	; 0x1abb2 <lif_add_ascii_file_as_e010_wrapper+0x50>
            {
                fclose(fi);
   1ac46:	c7 5f       	subi	r28, 0xF7	; 247
   1ac48:	dc 4f       	sbci	r29, 0xFC	; 252
   1ac4a:	88 81       	ld	r24, Y
   1ac4c:	99 81       	ldd	r25, Y+1	; 0x01
   1ac4e:	c9 50       	subi	r28, 0x09	; 9
   1ac50:	d3 40       	sbci	r29, 0x03	; 3
   1ac52:	0e 94 1c 7d 	call	0xfa38	; 0xfa38 <fclose>
                return(-1);
   1ac56:	6f ef       	ldi	r22, 0xFF	; 255
   1ac58:	7f ef       	ldi	r23, 0xFF	; 255
   1ac5a:	8f ef       	ldi	r24, 0xFF	; 255
   1ac5c:	9f ef       	ldi	r25, 0xFF	; 255
   1ac5e:	84 c0       	rjmp	.+264    	; 0x1ad68 <lif_add_ascii_file_as_e010_wrapper+0x206>
        count += size;

        if(count > 256)
        {
            count = 0;
            if(LIF)
   1ac60:	a1 14       	cp	r10, r1
   1ac62:	b1 04       	cpc	r11, r1
   1ac64:	91 f0       	breq	.+36     	; 0x1ac8a <lif_add_ascii_file_as_e010_wrapper+0x128>
                printf("\tWrote: %8ld\r", (long)bytes);
   1ac66:	ed b7       	in	r30, 0x3d	; 61
   1ac68:	fe b7       	in	r31, 0x3e	; 62
   1ac6a:	c4 82       	std	Z+4, r12	; 0x04
   1ac6c:	d5 82       	std	Z+5, r13	; 0x05
   1ac6e:	e6 82       	std	Z+6, r14	; 0x06
   1ac70:	f7 82       	std	Z+7, r15	; 0x07
   1ac72:	c5 5f       	subi	r28, 0xF5	; 245
   1ac74:	dc 4f       	sbci	r29, 0xFC	; 252
   1ac76:	28 81       	ld	r18, Y
   1ac78:	39 81       	ldd	r19, Y+1	; 0x01
   1ac7a:	4a 81       	ldd	r20, Y+2	; 0x02
   1ac7c:	cb 50       	subi	r28, 0x0B	; 11
   1ac7e:	d3 40       	sbci	r29, 0x03	; 3
   1ac80:	21 83       	std	Z+1, r18	; 0x01
   1ac82:	32 83       	std	Z+2, r19	; 0x02
   1ac84:	43 83       	std	Z+3, r20	; 0x03
   1ac86:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
        bytes += size;
        count += size;

        if(count > 256)
        {
            count = 0;
   1ac8a:	81 2c       	mov	r8, r1
   1ac8c:	91 2c       	mov	r9, r1
   1ac8e:	a5 cf       	rjmp	.-182    	; 0x1abda <lif_add_ascii_file_as_e010_wrapper+0x78>
            if(LIF)
                printf("\tWrote: %8ld\r", (long)bytes);
        }
    }

    fclose(fi);
   1ac90:	c7 5f       	subi	r28, 0xF7	; 247
   1ac92:	dc 4f       	sbci	r29, 0xFC	; 252
   1ac94:	88 81       	ld	r24, Y
   1ac96:	99 81       	ldd	r25, Y+1	; 0x01
   1ac98:	c9 50       	subi	r28, 0x09	; 9
   1ac9a:	d3 40       	sbci	r29, 0x03	; 3
   1ac9c:	0e 94 1c 7d 	call	0xfa38	; 0xfa38 <fclose>

// Write EOF
    str[0] = 0;
   1aca0:	c8 5f       	subi	r28, 0xF8	; 248
   1aca2:	dd 4f       	sbci	r29, 0xFD	; 253
   1aca4:	18 82       	st	Y, r1
   1aca6:	c8 50       	subi	r28, 0x08	; 8
   1aca8:	d2 40       	sbci	r29, 0x02	; 2
// We only want to return the count of bytes in the file NOT the padding at the end
// Write EOF string with padding
    size = lif_ascii_string_to_e010(str, offset,obuf);
   1acaa:	9e 01       	movw	r18, r28
   1acac:	28 5f       	subi	r18, 0xF8	; 248
   1acae:	3f 4f       	sbci	r19, 0xFF	; 255
   1acb0:	b3 01       	movw	r22, r6
   1acb2:	a2 01       	movw	r20, r4
   1acb4:	ce 01       	movw	r24, r28
   1acb6:	88 5f       	subi	r24, 0xF8	; 248
   1acb8:	9d 4f       	sbci	r25, 0xFD	; 253
   1acba:	9a de       	rcall	.-716    	; 0x1a9f0 <lif_ascii_string_to_e010>
   1acbc:	4c 01       	movw	r8, r24

    if(LIF)
   1acbe:	a1 14       	cp	r10, r1
   1acc0:	b1 04       	cpc	r11, r1
   1acc2:	d1 f4       	brne	.+52     	; 0x1acf8 <lif_add_ascii_file_as_e010_wrapper+0x196>
            return(-1);

    }

    offset += size;
    bytes += size;
   1acc4:	c4 01       	movw	r24, r8
   1acc6:	09 2c       	mov	r0, r9
   1acc8:	00 0c       	add	r0, r0
   1acca:	aa 0b       	sbc	r26, r26
   1accc:	bb 0b       	sbc	r27, r27
   1acce:	c8 0e       	add	r12, r24
   1acd0:	d9 1e       	adc	r13, r25
   1acd2:	ea 1e       	adc	r14, r26
   1acd4:	fb 1e       	adc	r15, r27

// PAD
    size = lif_e010_pad_sector(offset, obuf);
   1acd6:	12 01       	movw	r2, r4
   1acd8:	23 01       	movw	r4, r6
   1acda:	28 0e       	add	r2, r24
   1acdc:	39 1e       	adc	r3, r25
   1acde:	4a 1e       	adc	r4, r26
   1ace0:	5b 1e       	adc	r5, r27
   1ace2:	ae 01       	movw	r20, r28
   1ace4:	48 5f       	subi	r20, 0xF8	; 248
   1ace6:	5f 4f       	sbci	r21, 0xFF	; 255
   1ace8:	c2 01       	movw	r24, r4
   1acea:	b1 01       	movw	r22, r2
   1acec:	26 de       	rcall	.-948    	; 0x1a93a <lif_e010_pad_sector>
   1acee:	3c 01       	movw	r6, r24
    if(LIF)
   1acf0:	a1 14       	cp	r10, r1
   1acf2:	b1 04       	cpc	r11, r1
   1acf4:	e1 f4       	brne	.+56     	; 0x1ad2e <lif_add_ascii_file_as_e010_wrapper+0x1cc>
   1acf6:	36 c0       	rjmp	.+108    	; 0x1ad64 <lif_add_ascii_file_as_e010_wrapper+0x202>
// Write EOF string with padding
    size = lif_ascii_string_to_e010(str, offset,obuf);

    if(LIF)
    {
        printf("\tWrote: %8ld\r", (long)bytes);
   1acf8:	ed b7       	in	r30, 0x3d	; 61
   1acfa:	fe b7       	in	r31, 0x3e	; 62
   1acfc:	c4 82       	std	Z+4, r12	; 0x04
   1acfe:	d5 82       	std	Z+5, r13	; 0x05
   1ad00:	e6 82       	std	Z+6, r14	; 0x06
   1ad02:	f7 82       	std	Z+7, r15	; 0x07
   1ad04:	8a e5       	ldi	r24, 0x5A	; 90
   1ad06:	99 e3       	ldi	r25, 0x39	; 57
   1ad08:	a0 e0       	ldi	r26, 0x00	; 0
   1ad0a:	81 83       	std	Z+1, r24	; 0x01
   1ad0c:	92 83       	std	Z+2, r25	; 0x02
   1ad0e:	a3 83       	std	Z+3, r26	; 0x03
   1ad10:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
        len = lif_write(LIF, obuf, offset, size);
   1ad14:	84 01       	movw	r16, r8
   1ad16:	a3 01       	movw	r20, r6
   1ad18:	92 01       	movw	r18, r4
   1ad1a:	be 01       	movw	r22, r28
   1ad1c:	68 5f       	subi	r22, 0xF8	; 248
   1ad1e:	7f 4f       	sbci	r23, 0xFF	; 255
   1ad20:	c5 01       	movw	r24, r10
   1ad22:	0e 94 2d c2 	call	0x1845a	; 0x1845a <lif_write>
        if(len < size)
   1ad26:	88 15       	cp	r24, r8
   1ad28:	99 05       	cpc	r25, r9
   1ad2a:	64 f6       	brge	.-104    	; 0x1acc4 <lif_add_ascii_file_as_e010_wrapper+0x162>
   1ad2c:	94 cf       	rjmp	.-216    	; 0x1ac56 <lif_add_ascii_file_as_e010_wrapper+0xf4>

// PAD
    size = lif_e010_pad_sector(offset, obuf);
    if(LIF)
    {
        len = lif_write(LIF, obuf, offset, size);
   1ad2e:	8c 01       	movw	r16, r24
   1ad30:	a2 01       	movw	r20, r4
   1ad32:	91 01       	movw	r18, r2
   1ad34:	be 01       	movw	r22, r28
   1ad36:	68 5f       	subi	r22, 0xF8	; 248
   1ad38:	7f 4f       	sbci	r23, 0xFF	; 255
   1ad3a:	c5 01       	movw	r24, r10
   1ad3c:	0e 94 2d c2 	call	0x1845a	; 0x1845a <lif_write>
        if(len < size)
   1ad40:	86 15       	cp	r24, r6
   1ad42:	97 05       	cpc	r25, r7
   1ad44:	0c f4       	brge	.+2      	; 0x1ad48 <lif_add_ascii_file_as_e010_wrapper+0x1e6>
   1ad46:	87 cf       	rjmp	.-242    	; 0x1ac56 <lif_add_ascii_file_as_e010_wrapper+0xf4>
            return(-1);
    }

    if(LIF)
        printf("\tWrote: %8ld\r",(long)bytes);
   1ad48:	ed b7       	in	r30, 0x3d	; 61
   1ad4a:	fe b7       	in	r31, 0x3e	; 62
   1ad4c:	c4 82       	std	Z+4, r12	; 0x04
   1ad4e:	d5 82       	std	Z+5, r13	; 0x05
   1ad50:	e6 82       	std	Z+6, r14	; 0x06
   1ad52:	f7 82       	std	Z+7, r15	; 0x07
   1ad54:	8c e4       	ldi	r24, 0x4C	; 76
   1ad56:	99 e3       	ldi	r25, 0x39	; 57
   1ad58:	a0 e0       	ldi	r26, 0x00	; 0
   1ad5a:	81 83       	std	Z+1, r24	; 0x01
   1ad5c:	92 83       	std	Z+2, r25	; 0x02
   1ad5e:	a3 83       	std	Z+3, r26	; 0x03
   1ad60:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>

    return(bytes);
   1ad64:	b6 01       	movw	r22, r12
   1ad66:	c7 01       	movw	r24, r14
}
   1ad68:	c3 5f       	subi	r28, 0xF3	; 243
   1ad6a:	dc 4f       	sbci	r29, 0xFC	; 252
   1ad6c:	e2 e1       	ldi	r30, 0x12	; 18
   1ad6e:	0c 94 1b e7 	jmp	0x1ce36	; 0x1ce36 <__epilogue_restores__>

0001ad72 <lif_add_ascii_file_as_e010>:
/// @param[in] lifname: LIF file name
/// @param[in] userfile: userfile name
/// @return size of data written into to LIF image, or -1 on error
MEMSPACE
long lif_add_ascii_file_as_e010(char *lifimagename, char *lifname, char *userfile)
{
   1ad72:	ab e3       	ldi	r26, 0x3B	; 59
   1ad74:	b0 e0       	ldi	r27, 0x00	; 0
   1ad76:	ef eb       	ldi	r30, 0xBF	; 191
   1ad78:	f6 ed       	ldi	r31, 0xD6	; 214
   1ad7a:	0c 94 ff e6 	jmp	0x1cdfe	; 0x1cdfe <__prologue_saves__>
   1ad7e:	6c 01       	movw	r12, r24
   1ad80:	1b 01       	movw	r2, r22
   1ad82:	7a 01       	movw	r14, r20
    long offset;
    int index;
    lif_t *LIF;
    stat_t st, *sp;

    if(!*lifimagename)
   1ad84:	fc 01       	movw	r30, r24
   1ad86:	80 81       	ld	r24, Z
   1ad88:	81 11       	cpse	r24, r1
   1ad8a:	03 c0       	rjmp	.+6      	; 0x1ad92 <lif_add_ascii_file_as_e010+0x20>
    {
        printf("lif_add_ascii_file_as_e010: lifimagename is empty\n");
   1ad8c:	89 e1       	ldi	r24, 0x19	; 25
   1ad8e:	99 e3       	ldi	r25, 0x39	; 57
   1ad90:	1a c0       	rjmp	.+52     	; 0x1adc6 <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }
    if(!*lifname)
   1ad92:	fb 01       	movw	r30, r22
   1ad94:	80 81       	ld	r24, Z
   1ad96:	81 11       	cpse	r24, r1
   1ad98:	03 c0       	rjmp	.+6      	; 0x1ada0 <lif_add_ascii_file_as_e010+0x2e>
    {
        printf("lif_add_ascii_file_as_e010: lifname is empty\n");
   1ad9a:	8b ee       	ldi	r24, 0xEB	; 235
   1ad9c:	98 e3       	ldi	r25, 0x38	; 56
   1ad9e:	13 c0       	rjmp	.+38     	; 0x1adc6 <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }
    if(!*userfile)
   1ada0:	fa 01       	movw	r30, r20
   1ada2:	80 81       	ld	r24, Z
   1ada4:	81 11       	cpse	r24, r1
   1ada6:	03 c0       	rjmp	.+6      	; 0x1adae <lif_add_ascii_file_as_e010+0x3c>
    {
        printf("lif_add_ascii_file_as_e010: userfile is empty\n");
   1ada8:	8c eb       	ldi	r24, 0xBC	; 188
   1adaa:	98 e3       	ldi	r25, 0x38	; 56
   1adac:	0c c0       	rjmp	.+24     	; 0x1adc6 <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }

//Get size and date info
    sp = lif_stat(userfile, (stat_t *)&st);
   1adae:	be 01       	movw	r22, r28
   1adb0:	66 5f       	subi	r22, 0xF6	; 246
   1adb2:	7f 4f       	sbci	r23, 0xFF	; 255
   1adb4:	ca 01       	movw	r24, r20
   1adb6:	0e 94 80 c1 	call	0x18300	; 0x18300 <lif_stat>
   1adba:	9b af       	std	Y+59, r25	; 0x3b
   1adbc:	8a af       	std	Y+58, r24	; 0x3a
    if(!sp)
   1adbe:	89 2b       	or	r24, r25
   1adc0:	59 f4       	brne	.+22     	; 0x1add8 <lif_add_ascii_file_as_e010+0x66>
    {
        printf("lif_add_ascii_file_as_e010: userfile not found\n");
   1adc2:	8c e8       	ldi	r24, 0x8C	; 140
   1adc4:	98 e3       	ldi	r25, 0x38	; 56
   1adc6:	a0 e0       	ldi	r26, 0x00	; 0
   1adc8:	ed b7       	in	r30, 0x3d	; 61
   1adca:	fe b7       	in	r31, 0x3e	; 62
   1adcc:	81 83       	std	Z+1, r24	; 0x01
   1adce:	92 83       	std	Z+2, r25	; 0x02
   1add0:	a3 83       	std	Z+3, r26	; 0x03
   1add2:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   1add6:	01 c1       	rjmp	.+514    	; 0x1afda <lif_add_ascii_file_as_e010+0x268>
        return(-1);
    }

    if(debuglevel & LIF_DEBUG)
   1add8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1addc:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1ade0:	92 ff       	sbrs	r25, 2
   1ade2:	10 c0       	rjmp	.+32     	; 0x1ae04 <lif_add_ascii_file_as_e010+0x92>
        printf("LIF image:[%s], LIF name:[%s], user file:[%s]\n",
   1ade4:	ed b7       	in	r30, 0x3d	; 61
   1ade6:	fe b7       	in	r31, 0x3e	; 62
   1ade8:	f1 86       	std	Z+9, r15	; 0x09
   1adea:	e0 86       	std	Z+8, r14	; 0x08
   1adec:	37 82       	std	Z+7, r3	; 0x07
   1adee:	26 82       	std	Z+6, r2	; 0x06
   1adf0:	d5 82       	std	Z+5, r13	; 0x05
   1adf2:	c4 82       	std	Z+4, r12	; 0x04
   1adf4:	8d e5       	ldi	r24, 0x5D	; 93
   1adf6:	98 e3       	ldi	r25, 0x38	; 56
   1adf8:	a0 e0       	ldi	r26, 0x00	; 0
   1adfa:	81 83       	std	Z+1, r24	; 0x01
   1adfc:	92 83       	std	Z+2, r25	; 0x02
   1adfe:	a3 83       	std	Z+3, r26	; 0x03
   1ae00:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
            lifimagename, lifname, userfile);

// Find out how big converted file will be
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
   1ae04:	97 01       	movw	r18, r14
   1ae06:	40 e0       	ldi	r20, 0x00	; 0
   1ae08:	50 e0       	ldi	r21, 0x00	; 0
   1ae0a:	ba 01       	movw	r22, r20
   1ae0c:	80 e0       	ldi	r24, 0x00	; 0
   1ae0e:	90 e0       	ldi	r25, 0x00	; 0
   1ae10:	a8 de       	rcall	.-688    	; 0x1ab62 <lif_add_ascii_file_as_e010_wrapper>
   1ae12:	4b 01       	movw	r8, r22
   1ae14:	5c 01       	movw	r10, r24
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1ae16:	47 2e       	mov	r4, r23
   1ae18:	58 2e       	mov	r5, r24
   1ae1a:	69 2e       	mov	r6, r25
   1ae1c:	77 24       	eor	r7, r7
    if(bytes % (long)LIF_SECTOR_SIZE)
   1ae1e:	66 23       	and	r22, r22
   1ae20:	29 f0       	breq	.+10     	; 0x1ae2c <lif_add_ascii_file_as_e010+0xba>
        ++sectors;
   1ae22:	ff ef       	ldi	r31, 0xFF	; 255
   1ae24:	4f 1a       	sub	r4, r31
   1ae26:	5f 0a       	sbc	r5, r31
   1ae28:	6f 0a       	sbc	r6, r31
   1ae2a:	7f 0a       	sbc	r7, r31

// Find out how big converted file will be
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
    sectors = lif_bytes2sectors(bytes);

    LIF = lif_open_volume(lifimagename,"r+");
   1ae2c:	61 e0       	ldi	r22, 0x01	; 1
   1ae2e:	79 e0       	ldi	r23, 0x09	; 9
   1ae30:	c6 01       	movw	r24, r12
   1ae32:	49 da       	rcall	.-2926   	; 0x1a2c6 <lif_open_volume>
   1ae34:	8c 01       	movw	r16, r24
    if(LIF == NULL)
   1ae36:	00 97       	sbiw	r24, 0x00	; 0
   1ae38:	09 f4       	brne	.+2      	; 0x1ae3c <lif_add_ascii_file_as_e010+0xca>
   1ae3a:	cf c0       	rjmp	.+414    	; 0x1afda <lif_add_ascii_file_as_e010+0x268>
        return(-1);

// Now find free record
    index = lif_newdir(LIF, sectors);
   1ae3c:	b3 01       	movw	r22, r6
   1ae3e:	a2 01       	movw	r20, r4
   1ae40:	e2 d8       	rcall	.-3644   	; 0x1a006 <lif_newdir>
   1ae42:	3c 01       	movw	r6, r24
    if(index == -1)
   1ae44:	8f ef       	ldi	r24, 0xFF	; 255
   1ae46:	68 16       	cp	r6, r24
   1ae48:	78 06       	cpc	r7, r24
   1ae4a:	79 f4       	brne	.+30     	; 0x1ae6a <lif_add_ascii_file_as_e010+0xf8>
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n",
   1ae4c:	ed b7       	in	r30, 0x3d	; 61
   1ae4e:	fe b7       	in	r31, 0x3e	; 62
   1ae50:	f7 82       	std	Z+7, r15	; 0x07
   1ae52:	e6 82       	std	Z+6, r14	; 0x06
   1ae54:	d5 82       	std	Z+5, r13	; 0x05
   1ae56:	c4 82       	std	Z+4, r12	; 0x04
   1ae58:	8d e2       	ldi	r24, 0x2D	; 45
   1ae5a:	98 e3       	ldi	r25, 0x38	; 56
   1ae5c:	a0 e0       	ldi	r26, 0x00	; 0
   1ae5e:	81 83       	std	Z+1, r24	; 0x01
   1ae60:	92 83       	std	Z+2, r25	; 0x02
   1ae62:	a3 83       	std	Z+3, r26	; 0x03
   1ae64:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   1ae68:	a0 c0       	rjmp	.+320    	; 0x1afaa <lif_add_ascii_file_as_e010+0x238>
        lif_closedir(LIF);
        return(-1);
    }

// Initialize the free directory entry
    lif_fixname(LIF->DIR.filename, lifname,10);
   1ae6a:	68 01       	movw	r12, r16
   1ae6c:	ff e4       	ldi	r31, 0x4F	; 79
   1ae6e:	cf 0e       	add	r12, r31
   1ae70:	d1 1c       	adc	r13, r1
   1ae72:	4a e0       	ldi	r20, 0x0A	; 10
   1ae74:	50 e0       	ldi	r21, 0x00	; 0
   1ae76:	b1 01       	movw	r22, r2
   1ae78:	c6 01       	movw	r24, r12
   1ae7a:	0e 94 2f c3 	call	0x1865e	; 0x1865e <lif_fixname>
    LIF->DIR.FileType = 0xe010;                   // 10
   1ae7e:	80 e1       	ldi	r24, 0x10	; 16
   1ae80:	90 ee       	ldi	r25, 0xE0	; 224
   1ae82:	f8 01       	movw	r30, r16
   1ae84:	e6 5a       	subi	r30, 0xA6	; 166
   1ae86:	ff 4f       	sbci	r31, 0xFF	; 255
   1ae88:	91 83       	std	Z+1, r25	; 0x01
   1ae8a:	80 83       	st	Z, r24
    lif_time2lifbcd(sp->st_mtime, LIF->DIR.date);
   1ae8c:	ea ad       	ldd	r30, Y+58	; 0x3a
   1ae8e:	fb ad       	ldd	r31, Y+59	; 0x3b
   1ae90:	60 a5       	ldd	r22, Z+40	; 0x28
   1ae92:	71 a5       	ldd	r23, Z+41	; 0x29
   1ae94:	82 a5       	ldd	r24, Z+42	; 0x2a
   1ae96:	93 a5       	ldd	r25, Z+43	; 0x2b
   1ae98:	a8 01       	movw	r20, r16
   1ae9a:	4c 59       	subi	r20, 0x9C	; 156
   1ae9c:	5f 4f       	sbci	r21, 0xFF	; 255
   1ae9e:	0e 94 54 c5 	call	0x18aa8	; 0x18aa8 <lif_time2lifbcd>

    LIF->DIR.VolNumber = 0x8001;                  // 26
   1aea2:	81 e0       	ldi	r24, 0x01	; 1
   1aea4:	90 e8       	ldi	r25, 0x80	; 128
   1aea6:	f8 01       	movw	r30, r16
   1aea8:	e6 59       	subi	r30, 0x96	; 150
   1aeaa:	ff 4f       	sbci	r31, 0xFF	; 255
   1aeac:	91 83       	std	Z+1, r25	; 0x01
   1aeae:	80 83       	st	Z, r24
    LIF->DIR.FileBytes = bytes;                   // 28
   1aeb0:	32 96       	adiw	r30, 0x02	; 2
   1aeb2:	91 82       	std	Z+1, r9	; 0x01
   1aeb4:	80 82       	st	Z, r8
    LIF->DIR.SectorSize  = 0x100;                 // 30
   1aeb6:	80 e0       	ldi	r24, 0x00	; 0
   1aeb8:	91 e0       	ldi	r25, 0x01	; 1
   1aeba:	32 96       	adiw	r30, 0x02	; 2
   1aebc:	91 83       	std	Z+1, r25	; 0x01
   1aebe:	80 83       	st	Z, r24
    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1aec0:	58 01       	movw	r10, r16
   1aec2:	fc e5       	ldi	r31, 0x5C	; 92
   1aec4:	af 0e       	add	r10, r31
   1aec6:	b1 1c       	adc	r11, r1
   1aec8:	f5 01       	movw	r30, r10
   1aeca:	80 81       	ld	r24, Z
   1aecc:	91 81       	ldd	r25, Z+1	; 0x01
   1aece:	a2 81       	ldd	r26, Z+2	; 0x02
   1aed0:	b3 81       	ldd	r27, Z+3	; 0x03
   1aed2:	22 24       	eor	r2, r2
   1aed4:	38 2e       	mov	r3, r24
   1aed6:	49 2e       	mov	r4, r25
   1aed8:	5a 2e       	mov	r5, r26

    if(debuglevel & LIF_DEBUG)
   1aeda:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1aede:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1aee2:	92 ff       	sbrs	r25, 2
   1aee4:	05 c0       	rjmp	.+10     	; 0x1aef0 <lif_add_ascii_file_as_e010+0x17e>
        lif_dump_vol(LIF,"lif_after lif_newdir");
   1aee6:	67 e5       	ldi	r22, 0x57	; 87
   1aee8:	76 e1       	ldi	r23, 0x16	; 22
   1aeea:	c8 01       	movw	r24, r16
   1aeec:	0e 94 40 c6 	call	0x18c80	; 0x18c80 <lif_dump_vol>

// Write converted file into free space first
    bytes = lif_add_ascii_file_as_e010_wrapper(LIF,offset,userfile);
   1aef0:	97 01       	movw	r18, r14
   1aef2:	b2 01       	movw	r22, r4
   1aef4:	a1 01       	movw	r20, r2
   1aef6:	c8 01       	movw	r24, r16
   1aef8:	34 de       	rcall	.-920    	; 0x1ab62 <lif_add_ascii_file_as_e010_wrapper>
   1aefa:	4b 01       	movw	r8, r22
   1aefc:	7c 01       	movw	r14, r24

    if(debuglevel & LIF_DEBUG)
   1aefe:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1af02:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1af06:	92 ff       	sbrs	r25, 2
   1af08:	4a c0       	rjmp	.+148    	; 0x1af9e <lif_add_ascii_file_as_e010+0x22c>
    {
        printf("New Directory Information AFTER write\n");
   1af0a:	86 e0       	ldi	r24, 0x06	; 6
   1af0c:	98 e3       	ldi	r25, 0x38	; 56
   1af0e:	a0 e0       	ldi	r26, 0x00	; 0
   1af10:	ed b7       	in	r30, 0x3d	; 61
   1af12:	fe b7       	in	r31, 0x3e	; 62
   1af14:	81 83       	std	Z+1, r24	; 0x01
   1af16:	92 83       	std	Z+2, r25	; 0x02
   1af18:	a3 83       	std	Z+3, r26	; 0x03
   1af1a:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
        printf("Name:              %s\n", LIF->DIR.filename);
   1af1e:	ed b7       	in	r30, 0x3d	; 61
   1af20:	fe b7       	in	r31, 0x3e	; 62
   1af22:	d5 82       	std	Z+5, r13	; 0x05
   1af24:	c4 82       	std	Z+4, r12	; 0x04
   1af26:	8f ee       	ldi	r24, 0xEF	; 239
   1af28:	97 e3       	ldi	r25, 0x37	; 55
   1af2a:	a0 e0       	ldi	r26, 0x00	; 0
   1af2c:	81 83       	std	Z+1, r24	; 0x01
   1af2e:	92 83       	std	Z+2, r25	; 0x02
   1af30:	a3 83       	std	Z+3, r26	; 0x03
   1af32:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
        printf("Index:            %4d\n", (int)index);
   1af36:	ed b7       	in	r30, 0x3d	; 61
   1af38:	fe b7       	in	r31, 0x3e	; 62
   1af3a:	75 82       	std	Z+5, r7	; 0x05
   1af3c:	64 82       	std	Z+4, r6	; 0x04
   1af3e:	88 ed       	ldi	r24, 0xD8	; 216
   1af40:	97 e3       	ldi	r25, 0x37	; 55
   1af42:	a0 e0       	ldi	r26, 0x00	; 0
   1af44:	81 83       	std	Z+1, r24	; 0x01
   1af46:	92 83       	std	Z+2, r25	; 0x02
   1af48:	a3 83       	std	Z+3, r26	; 0x03
   1af4a:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
        printf("First Sector:     %4lxH\n", (long) LIF->DIR.FileStartSector);
   1af4e:	f5 01       	movw	r30, r10
   1af50:	80 81       	ld	r24, Z
   1af52:	91 81       	ldd	r25, Z+1	; 0x01
   1af54:	a2 81       	ldd	r26, Z+2	; 0x02
   1af56:	b3 81       	ldd	r27, Z+3	; 0x03
   1af58:	ed b7       	in	r30, 0x3d	; 61
   1af5a:	fe b7       	in	r31, 0x3e	; 62
   1af5c:	84 83       	std	Z+4, r24	; 0x04
   1af5e:	95 83       	std	Z+5, r25	; 0x05
   1af60:	a6 83       	std	Z+6, r26	; 0x06
   1af62:	b7 83       	std	Z+7, r27	; 0x07
   1af64:	8f eb       	ldi	r24, 0xBF	; 191
   1af66:	97 e3       	ldi	r25, 0x37	; 55
   1af68:	a0 e0       	ldi	r26, 0x00	; 0
   1af6a:	81 83       	std	Z+1, r24	; 0x01
   1af6c:	92 83       	std	Z+2, r25	; 0x02
   1af6e:	a3 83       	std	Z+3, r26	; 0x03
   1af70:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
        printf("File Sectors:     %4lxH\n", (long)LIF->DIR.FileSectors);
   1af74:	f8 01       	movw	r30, r16
   1af76:	e0 5a       	subi	r30, 0xA0	; 160
   1af78:	ff 4f       	sbci	r31, 0xFF	; 255
   1af7a:	80 81       	ld	r24, Z
   1af7c:	91 81       	ldd	r25, Z+1	; 0x01
   1af7e:	a2 81       	ldd	r26, Z+2	; 0x02
   1af80:	b3 81       	ldd	r27, Z+3	; 0x03
   1af82:	ed b7       	in	r30, 0x3d	; 61
   1af84:	fe b7       	in	r31, 0x3e	; 62
   1af86:	84 83       	std	Z+4, r24	; 0x04
   1af88:	95 83       	std	Z+5, r25	; 0x05
   1af8a:	a6 83       	std	Z+6, r26	; 0x06
   1af8c:	b7 83       	std	Z+7, r27	; 0x07
   1af8e:	86 ea       	ldi	r24, 0xA6	; 166
   1af90:	97 e3       	ldi	r25, 0x37	; 55
   1af92:	a0 e0       	ldi	r26, 0x00	; 0
   1af94:	81 83       	std	Z+1, r24	; 0x01
   1af96:	92 83       	std	Z+2, r25	; 0x02
   1af98:	a3 83       	std	Z+3, r26	; 0x03
   1af9a:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    }

// Write directory record
// Note: lif_newdir alrwady did the new EOF
    if( !lif_writedirindex(LIF,index))
   1af9e:	b3 01       	movw	r22, r6
   1afa0:	c8 01       	movw	r24, r16
   1afa2:	0e 94 9b cb 	call	0x19736	; 0x19736 <lif_writedirindex>
   1afa6:	89 2b       	or	r24, r25
   1afa8:	21 f4       	brne	.+8      	; 0x1afb2 <lif_add_ascii_file_as_e010+0x240>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1afaa:	c8 01       	movw	r24, r16
   1afac:	0e 94 a6 ca 	call	0x1954c	; 0x1954c <lif_close_volume>
   1afb0:	14 c0       	rjmp	.+40     	; 0x1afda <lif_add_ascii_file_as_e010+0x268>
   1afb2:	c8 01       	movw	r24, r16
   1afb4:	0e 94 a6 ca 	call	0x1954c	; 0x1954c <lif_close_volume>
        return(-1);
    }

    lif_closedir(LIF);

    printf("\tWrote: %8ld\n", bytes);
   1afb8:	ed b7       	in	r30, 0x3d	; 61
   1afba:	fe b7       	in	r31, 0x3e	; 62
   1afbc:	84 82       	std	Z+4, r8	; 0x04
   1afbe:	95 82       	std	Z+5, r9	; 0x05
   1afc0:	e6 82       	std	Z+6, r14	; 0x06
   1afc2:	f7 82       	std	Z+7, r15	; 0x07
   1afc4:	88 e9       	ldi	r24, 0x98	; 152
   1afc6:	97 e3       	ldi	r25, 0x37	; 55
   1afc8:	a0 e0       	ldi	r26, 0x00	; 0
   1afca:	81 83       	std	Z+1, r24	; 0x01
   1afcc:	92 83       	std	Z+2, r25	; 0x02
   1afce:	a3 83       	std	Z+3, r26	; 0x03
   1afd0:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>

// Return file size
    return(bytes);
   1afd4:	b4 01       	movw	r22, r8
   1afd6:	c7 01       	movw	r24, r14
   1afd8:	04 c0       	rjmp	.+8      	; 0x1afe2 <lif_add_ascii_file_as_e010+0x270>
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
    sectors = lif_bytes2sectors(bytes);

    LIF = lif_open_volume(lifimagename,"r+");
    if(LIF == NULL)
        return(-1);
   1afda:	6f ef       	ldi	r22, 0xFF	; 255
   1afdc:	7f ef       	ldi	r23, 0xFF	; 255
   1afde:	8f ef       	ldi	r24, 0xFF	; 255
   1afe0:	9f ef       	ldi	r25, 0xFF	; 255

    printf("\tWrote: %8ld\n", bytes);

// Return file size
    return(bytes);
}
   1afe2:	eb 96       	adiw	r28, 0x3b	; 59
   1afe4:	e2 e1       	ldi	r30, 0x12	; 18
   1afe6:	0c 94 1b e7 	jmp	0x1ce36	; 0x1ce36 <__epilogue_restores__>

0001afea <lif_extract_e010_as_ascii>:
/// @param[in] lifname:  name of file in LIF image
/// @param[in] username: name to call the extracted image
/// @return 1 on sucess or 0 on error
MEMSPACE
int lif_extract_e010_as_ascii(char *lifimagename, char *lifname, char *username)
{
   1afea:	a7 e3       	ldi	r26, 0x37	; 55
   1afec:	b2 e0       	ldi	r27, 0x02	; 2
   1afee:	eb ef       	ldi	r30, 0xFB	; 251
   1aff0:	f7 ed       	ldi	r31, 0xD7	; 215
   1aff2:	0c 94 ff e6 	jmp	0x1cdfe	; 0x1cdfe <__prologue_saves__>
   1aff6:	7c 01       	movw	r14, r24
   1aff8:	8b 01       	movw	r16, r22
   1affa:	ca 5d       	subi	r28, 0xDA	; 218
   1affc:	dd 4f       	sbci	r29, 0xFD	; 253
   1affe:	59 83       	std	Y+1, r21	; 0x01
   1b000:	48 83       	st	Y, r20
   1b002:	c6 52       	subi	r28, 0x26	; 38
   1b004:	d2 40       	sbci	r29, 0x02	; 2
// read buffer
    uint8_t buf[LIF_SECTOR_SIZE+4];
// Write buffer, FYI: will ALWAYS be smaller then the read data buffer
    uint8_t wbuf[LIF_SECTOR_SIZE+4];

    LIF = lif_open_volume(lifimagename,"r");
   1b006:	62 e4       	ldi	r22, 0x42	; 66
   1b008:	73 e0       	ldi	r23, 0x03	; 3
   1b00a:	5d d9       	rcall	.-3398   	; 0x1a2c6 <lif_open_volume>
   1b00c:	6c 01       	movw	r12, r24
    if(LIF == NULL)
   1b00e:	00 97       	sbiw	r24, 0x00	; 0
   1b010:	69 f4       	brne	.+26     	; 0x1b02c <lif_extract_e010_as_ascii+0x42>
    {
        printf("LIF image not found:%s\n", lifimagename);
   1b012:	ed b7       	in	r30, 0x3d	; 61
   1b014:	fe b7       	in	r31, 0x3e	; 62
   1b016:	f5 82       	std	Z+5, r15	; 0x05
   1b018:	e4 82       	std	Z+4, r14	; 0x04
   1b01a:	80 e8       	ldi	r24, 0x80	; 128
   1b01c:	97 e3       	ldi	r25, 0x37	; 55
   1b01e:	a0 e0       	ldi	r26, 0x00	; 0
   1b020:	81 83       	std	Z+1, r24	; 0x01
   1b022:	92 83       	std	Z+2, r25	; 0x02
   1b024:	a3 83       	std	Z+3, r26	; 0x03
   1b026:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   1b02a:	13 c0       	rjmp	.+38     	; 0x1b052 <lif_extract_e010_as_ascii+0x68>
        return(0);
    }

    index = lif_find_file(LIF, lifname);
   1b02c:	b8 01       	movw	r22, r16
   1b02e:	20 dc       	rcall	.-1984   	; 0x1a870 <lif_find_file>
    if(index == -1)
   1b030:	01 96       	adiw	r24, 0x01	; 1
   1b032:	91 f4       	brne	.+36     	; 0x1b058 <lif_extract_e010_as_ascii+0x6e>
    {
        printf("LIF File not found:%s\n", lifname);
   1b034:	ed b7       	in	r30, 0x3d	; 61
   1b036:	fe b7       	in	r31, 0x3e	; 62
   1b038:	15 83       	std	Z+5, r17	; 0x05
   1b03a:	04 83       	std	Z+4, r16	; 0x04
   1b03c:	89 e6       	ldi	r24, 0x69	; 105
   1b03e:	97 e3       	ldi	r25, 0x37	; 55
   1b040:	a0 e0       	ldi	r26, 0x00	; 0
   1b042:	81 83       	std	Z+1, r24	; 0x01
   1b044:	92 83       	std	Z+2, r25	; 0x02
   1b046:	a3 83       	std	Z+3, r26	; 0x03
   1b048:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b04c:	c6 01       	movw	r24, r12
   1b04e:	0e 94 a6 ca 	call	0x1954c	; 0x1954c <lif_close_volume>
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        printf("LIF File not found:%s\n", lifname);
        lif_closedir(LIF);
        return(0);
   1b052:	80 e0       	ldi	r24, 0x00	; 0
   1b054:	90 e0       	ldi	r25, 0x00	; 0
   1b056:	73 c2       	rjmp	.+1254   	; 0x1b53e <lif_extract_e010_as_ascii+0x554>
    }

    if((LIF->DIR.FileType & 0xFFFC) != 0xE010)
   1b058:	f6 01       	movw	r30, r12
   1b05a:	e6 5a       	subi	r30, 0xA6	; 166
   1b05c:	ff 4f       	sbci	r31, 0xFF	; 255
   1b05e:	80 81       	ld	r24, Z
   1b060:	91 81       	ldd	r25, Z+1	; 0x01
   1b062:	9c 01       	movw	r18, r24
   1b064:	2c 7f       	andi	r18, 0xFC	; 252
   1b066:	20 31       	cpi	r18, 0x10	; 16
   1b068:	30 4e       	sbci	r19, 0xE0	; 224
   1b06a:	a9 f0       	breq	.+42     	; 0x1b096 <lif_extract_e010_as_ascii+0xac>
    {
        printf("File %s has wrong type:[%04XH] expected 0xE010..0xE013\n", username, (int) LIF->DIR.FileType);
   1b06c:	ed b7       	in	r30, 0x3d	; 61
   1b06e:	fe b7       	in	r31, 0x3e	; 62
   1b070:	97 83       	std	Z+7, r25	; 0x07
   1b072:	86 83       	std	Z+6, r24	; 0x06
   1b074:	ca 5d       	subi	r28, 0xDA	; 218
   1b076:	dd 4f       	sbci	r29, 0xFD	; 253
   1b078:	28 81       	ld	r18, Y
   1b07a:	39 81       	ldd	r19, Y+1	; 0x01
   1b07c:	c6 52       	subi	r28, 0x26	; 38
   1b07e:	d2 40       	sbci	r29, 0x02	; 2
   1b080:	35 83       	std	Z+5, r19	; 0x05
   1b082:	24 83       	std	Z+4, r18	; 0x04
   1b084:	81 e3       	ldi	r24, 0x31	; 49
   1b086:	97 e3       	ldi	r25, 0x37	; 55
   1b088:	a0 e0       	ldi	r26, 0x00	; 0
   1b08a:	81 83       	std	Z+1, r24	; 0x01
   1b08c:	92 83       	std	Z+2, r25	; 0x02
   1b08e:	a3 83       	std	Z+3, r26	; 0x03
   1b090:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   1b094:	db cf       	rjmp	.-74     	; 0x1b04c <lif_extract_e010_as_ascii+0x62>
        lif_closedir(LIF);
        return(0);
    }

    start = LIF->DIR.FileStartSector;
   1b096:	f6 01       	movw	r30, r12
   1b098:	e4 5a       	subi	r30, 0xA4	; 164
   1b09a:	ff 4f       	sbci	r31, 0xFF	; 255
   1b09c:	80 80       	ld	r8, Z
   1b09e:	91 80       	ldd	r9, Z+1	; 0x01
   1b0a0:	a2 80       	ldd	r10, Z+2	; 0x02
   1b0a2:	b3 80       	ldd	r11, Z+3	; 0x03
    end = start + LIF->DIR.FileSectors;
   1b0a4:	34 96       	adiw	r30, 0x04	; 4
   1b0a6:	80 81       	ld	r24, Z
   1b0a8:	91 81       	ldd	r25, Z+1	; 0x01
   1b0aa:	a2 81       	ldd	r26, Z+2	; 0x02
   1b0ac:	b3 81       	ldd	r27, Z+3	; 0x03
   1b0ae:	a5 01       	movw	r20, r10
   1b0b0:	94 01       	movw	r18, r8
   1b0b2:	28 0f       	add	r18, r24
   1b0b4:	39 1f       	adc	r19, r25
   1b0b6:	4a 1f       	adc	r20, r26
   1b0b8:	5b 1f       	adc	r21, r27
   1b0ba:	c4 5d       	subi	r28, 0xD4	; 212
   1b0bc:	dd 4f       	sbci	r29, 0xFD	; 253
   1b0be:	28 83       	st	Y, r18
   1b0c0:	39 83       	std	Y+1, r19	; 0x01
   1b0c2:	4a 83       	std	Y+2, r20	; 0x02
   1b0c4:	5b 83       	std	Y+3, r21	; 0x03
   1b0c6:	cc 52       	subi	r28, 0x2C	; 44
   1b0c8:	d2 40       	sbci	r29, 0x02	; 2

    t = lif_lifbcd2time(LIF->DIR.date);
   1b0ca:	c6 01       	movw	r24, r12
   1b0cc:	8c 59       	subi	r24, 0x9C	; 156
   1b0ce:	9f 4f       	sbci	r25, 0xFF	; 255
   1b0d0:	0e 94 96 c5 	call	0x18b2c	; 0x18b2c <lif_lifbcd2time>
   1b0d4:	c8 5d       	subi	r28, 0xD8	; 216
   1b0d6:	dd 4f       	sbci	r29, 0xFD	; 253
   1b0d8:	68 83       	st	Y, r22
   1b0da:	79 83       	std	Y+1, r23	; 0x01
   1b0dc:	8a 83       	std	Y+2, r24	; 0x02
   1b0de:	9b 83       	std	Y+3, r25	; 0x03
   1b0e0:	c8 52       	subi	r28, 0x28	; 40
   1b0e2:	d2 40       	sbci	r29, 0x02	; 2

    offset = start * (long) LIF_SECTOR_SIZE;
   1b0e4:	ba 2d       	mov	r27, r10
   1b0e6:	a9 2d       	mov	r26, r9
   1b0e8:	98 2d       	mov	r25, r8
   1b0ea:	88 27       	eor	r24, r24
   1b0ec:	c2 5e       	subi	r28, 0xE2	; 226
   1b0ee:	dd 4f       	sbci	r29, 0xFD	; 253
   1b0f0:	88 83       	st	Y, r24
   1b0f2:	99 83       	std	Y+1, r25	; 0x01
   1b0f4:	aa 83       	std	Y+2, r26	; 0x02
   1b0f6:	bb 83       	std	Y+3, r27	; 0x03
   1b0f8:	ce 51       	subi	r28, 0x1E	; 30
   1b0fa:	d2 40       	sbci	r29, 0x02	; 2

    fo = lif_open(username,"wb");
   1b0fc:	6c e0       	ldi	r22, 0x0C	; 12
   1b0fe:	79 e0       	ldi	r23, 0x09	; 9
   1b100:	ca 5d       	subi	r28, 0xDA	; 218
   1b102:	dd 4f       	sbci	r29, 0xFD	; 253
   1b104:	88 81       	ld	r24, Y
   1b106:	99 81       	ldd	r25, Y+1	; 0x01
   1b108:	c6 52       	subi	r28, 0x26	; 38
   1b10a:	d2 40       	sbci	r29, 0x02	; 2
   1b10c:	0e 94 56 c1 	call	0x182ac	; 0x182ac <lif_open>
   1b110:	cc 5d       	subi	r28, 0xDC	; 220
   1b112:	dd 4f       	sbci	r29, 0xFD	; 253
   1b114:	99 83       	std	Y+1, r25	; 0x01
   1b116:	88 83       	st	Y, r24
   1b118:	c4 52       	subi	r28, 0x24	; 36
   1b11a:	d2 40       	sbci	r29, 0x02	; 2
    if(fo == NULL)
   1b11c:	89 2b       	or	r24, r25
   1b11e:	09 f4       	brne	.+2      	; 0x1b122 <lif_extract_e010_as_ascii+0x138>
   1b120:	95 cf       	rjmp	.-214    	; 0x1b04c <lif_extract_e010_as_ascii+0x62>
    {
        lif_closedir(LIF);
        return(0);
    }

    printf("Extracting: %s\n", username);
   1b122:	ca 5d       	subi	r28, 0xDA	; 218
   1b124:	dd 4f       	sbci	r29, 0xFD	; 253
   1b126:	28 81       	ld	r18, Y
   1b128:	39 81       	ldd	r19, Y+1	; 0x01
   1b12a:	c6 52       	subi	r28, 0x26	; 38
   1b12c:	d2 40       	sbci	r29, 0x02	; 2
   1b12e:	ed b7       	in	r30, 0x3d	; 61
   1b130:	fe b7       	in	r31, 0x3e	; 62
   1b132:	35 83       	std	Z+5, r19	; 0x05
   1b134:	24 83       	std	Z+4, r18	; 0x04
   1b136:	81 e2       	ldi	r24, 0x21	; 33
   1b138:	97 e3       	ldi	r25, 0x37	; 55
   1b13a:	a0 e0       	ldi	r26, 0x00	; 0
   1b13c:	81 83       	std	Z+1, r24	; 0x01
   1b13e:	92 83       	std	Z+2, r25	; 0x02
   1b140:	a3 83       	std	Z+3, r26	; 0x03
   1b142:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>

    bytes = 0;
    wind = 0;
   1b146:	21 2c       	mov	r2, r1
   1b148:	31 2c       	mov	r3, r1
    uint32_t start, end;                          // sectors
    long offset, bytes;                           // bytes
    int index;
    int i, len,size;
    int status = 1;
    int done = 0;
   1b14a:	ce 5d       	subi	r28, 0xDE	; 222
   1b14c:	dd 4f       	sbci	r29, 0xFD	; 253
   1b14e:	19 82       	std	Y+1, r1	; 0x01
   1b150:	18 82       	st	Y, r1
   1b152:	c2 52       	subi	r28, 0x22	; 34
   1b154:	d2 40       	sbci	r29, 0x02	; 2
    lif_t *LIF;
    uint32_t start, end;                          // sectors
    long offset, bytes;                           // bytes
    int index;
    int i, len,size;
    int status = 1;
   1b156:	ee 24       	eor	r14, r14
   1b158:	e3 94       	inc	r14
   1b15a:	f1 2c       	mov	r15, r1
        return(0);
    }

    printf("Extracting: %s\n", username);

    bytes = 0;
   1b15c:	41 2c       	mov	r4, r1
   1b15e:	51 2c       	mov	r5, r1
   1b160:	32 01       	movw	r6, r4
                        status = 0;
                        done = 1;
                        break;
                    }
                    bytes += size;
                    printf("\tWrote: %8ld\r", bytes);
   1b162:	80 e6       	ldi	r24, 0x60	; 96
   1b164:	96 e3       	ldi	r25, 0x36	; 54
   1b166:	9c 01       	movw	r18, r24
   1b168:	40 e0       	ldi	r20, 0x00	; 0
   1b16a:	ce 5c       	subi	r28, 0xCE	; 206
   1b16c:	dd 4f       	sbci	r29, 0xFD	; 253
   1b16e:	28 83       	st	Y, r18
   1b170:	39 83       	std	Y+1, r19	; 0x01
   1b172:	4a 83       	std	Y+2, r20	; 0x02
   1b174:	c2 53       	subi	r28, 0x32	; 50
   1b176:	d2 40       	sbci	r29, 0x02	; 2
                if(wind >= LIF_SECTOR_SIZE)
                {
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
   1b178:	8e e6       	ldi	r24, 0x6E	; 110
   1b17a:	96 e3       	ldi	r25, 0x36	; 54
   1b17c:	9c 01       	movw	r18, r24
   1b17e:	40 e0       	ldi	r20, 0x00	; 0
   1b180:	cb 5c       	subi	r28, 0xCB	; 203
   1b182:	dd 4f       	sbci	r29, 0xFD	; 253
   1b184:	28 83       	st	Y, r18
   1b186:	39 83       	std	Y+1, r19	; 0x01
   1b188:	4a 83       	std	Y+2, r20	; 0x02
   1b18a:	c5 53       	subi	r28, 0x35	; 53
   1b18c:	d2 40       	sbci	r29, 0x02	; 2

    bytes = 0;
    wind = 0;
    ind = 0;

    while(lif_bytes2sectors(offset) <= end)
   1b18e:	c2 5e       	subi	r28, 0xE2	; 226
   1b190:	dd 4f       	sbci	r29, 0xFD	; 253
   1b192:	28 81       	ld	r18, Y
   1b194:	39 81       	ldd	r19, Y+1	; 0x01
   1b196:	4a 81       	ldd	r20, Y+2	; 0x02
   1b198:	5b 81       	ldd	r21, Y+3	; 0x03
   1b19a:	ce 51       	subi	r28, 0x1E	; 30
   1b19c:	d2 40       	sbci	r29, 0x02	; 2
   1b19e:	bb 27       	eor	r27, r27
   1b1a0:	a5 2f       	mov	r26, r21
   1b1a2:	94 2f       	mov	r25, r20
   1b1a4:	83 2f       	mov	r24, r19
   1b1a6:	c4 5d       	subi	r28, 0xD4	; 212
   1b1a8:	dd 4f       	sbci	r29, 0xFD	; 253
   1b1aa:	28 81       	ld	r18, Y
   1b1ac:	39 81       	ldd	r19, Y+1	; 0x01
   1b1ae:	4a 81       	ldd	r20, Y+2	; 0x02
   1b1b0:	5b 81       	ldd	r21, Y+3	; 0x03
   1b1b2:	cc 52       	subi	r28, 0x2C	; 44
   1b1b4:	d2 40       	sbci	r29, 0x02	; 2
   1b1b6:	28 17       	cp	r18, r24
   1b1b8:	39 07       	cpc	r19, r25
   1b1ba:	4a 07       	cpc	r20, r26
   1b1bc:	5b 07       	cpc	r21, r27
   1b1be:	08 f4       	brcc	.+2      	; 0x1b1c2 <lif_extract_e010_as_ascii+0x1d8>
   1b1c0:	51 c1       	rjmp	.+674    	; 0x1b464 <lif_extract_e010_as_ascii+0x47a>
    {
// LIF images are always multiples of LIF_SECTOR_SIZE
        size = lif_read(LIF, buf, offset, LIF_SECTOR_SIZE);
   1b1c2:	00 e0       	ldi	r16, 0x00	; 0
   1b1c4:	11 e0       	ldi	r17, 0x01	; 1
   1b1c6:	c2 5e       	subi	r28, 0xE2	; 226
   1b1c8:	dd 4f       	sbci	r29, 0xFD	; 253
   1b1ca:	28 81       	ld	r18, Y
   1b1cc:	39 81       	ldd	r19, Y+1	; 0x01
   1b1ce:	4a 81       	ldd	r20, Y+2	; 0x02
   1b1d0:	5b 81       	ldd	r21, Y+3	; 0x03
   1b1d2:	ce 51       	subi	r28, 0x1E	; 30
   1b1d4:	d2 40       	sbci	r29, 0x02	; 2
   1b1d6:	be 01       	movw	r22, r28
   1b1d8:	60 5f       	subi	r22, 0xF0	; 240
   1b1da:	7e 4f       	sbci	r23, 0xFE	; 254
   1b1dc:	c6 01       	movw	r24, r12
   1b1de:	0e 94 da c1 	call	0x183b4	; 0x183b4 <lif_read>
        if(size < LIF_SECTOR_SIZE)
   1b1e2:	6f 3f       	cpi	r22, 0xFF	; 255
   1b1e4:	71 05       	cpc	r23, r1
   1b1e6:	09 f0       	breq	.+2      	; 0x1b1ea <lif_extract_e010_as_ascii+0x200>
   1b1e8:	0c f4       	brge	.+2      	; 0x1b1ec <lif_extract_e010_as_ascii+0x202>
   1b1ea:	3a c1       	rjmp	.+628    	; 0x1b460 <lif_extract_e010_as_ascii+0x476>
   1b1ec:	00 e0       	ldi	r16, 0x00	; 0
   1b1ee:	10 e0       	ldi	r17, 0x00	; 0
            status = 0;
            break;
        }

        ind = 0;
        while(ind < LIF_SECTOR_SIZE && !done)
   1b1f0:	ce 5d       	subi	r28, 0xDE	; 222
   1b1f2:	dd 4f       	sbci	r29, 0xFD	; 253
   1b1f4:	88 81       	ld	r24, Y
   1b1f6:	99 81       	ldd	r25, Y+1	; 0x01
   1b1f8:	c2 52       	subi	r28, 0x22	; 34
   1b1fa:	d2 40       	sbci	r29, 0x02	; 2
   1b1fc:	89 2b       	or	r24, r25
   1b1fe:	09 f0       	breq	.+2      	; 0x1b202 <lif_extract_e010_as_ascii+0x218>
   1b200:	1b c1       	rjmp	.+566    	; 0x1b438 <lif_extract_e010_as_ascii+0x44e>
        {
            if(buf[ind] == 0xDF || buf[ind] == 0xCF || buf[ind] == 0x6F)
   1b202:	e0 e1       	ldi	r30, 0x10	; 16
   1b204:	f1 e0       	ldi	r31, 0x01	; 1
   1b206:	ec 0f       	add	r30, r28
   1b208:	fd 1f       	adc	r31, r29
   1b20a:	e0 0f       	add	r30, r16
   1b20c:	f1 1f       	adc	r31, r17
   1b20e:	80 81       	ld	r24, Z
   1b210:	98 2f       	mov	r25, r24
   1b212:	9f 7e       	andi	r25, 0xEF	; 239
   1b214:	9f 3c       	cpi	r25, 0xCF	; 207
   1b216:	11 f0       	breq	.+4      	; 0x1b21c <lif_extract_e010_as_ascii+0x232>
   1b218:	8f 36       	cpi	r24, 0x6F	; 111
   1b21a:	c9 f5       	brne	.+114    	; 0x1b28e <lif_extract_e010_as_ascii+0x2a4>
            {
                ++ind;
                len = buf[ind++] & 0xff;
   1b21c:	e0 e1       	ldi	r30, 0x10	; 16
   1b21e:	f1 e0       	ldi	r31, 0x01	; 1
   1b220:	ec 0f       	add	r30, r28
   1b222:	fd 1f       	adc	r31, r29
   1b224:	e0 0f       	add	r30, r16
   1b226:	f1 1f       	adc	r31, r17
   1b228:	a1 80       	ldd	r10, Z+1	; 0x01
                len |= ((buf[ind++] & 0xff) <<8);
   1b22a:	f8 01       	movw	r30, r16
   1b22c:	32 96       	adiw	r30, 0x02	; 2
   1b22e:	40 e1       	ldi	r20, 0x10	; 16
   1b230:	51 e0       	ldi	r21, 0x01	; 1
   1b232:	4c 0f       	add	r20, r28
   1b234:	5d 1f       	adc	r21, r29
   1b236:	e4 0f       	add	r30, r20
   1b238:	f5 1f       	adc	r31, r21
   1b23a:	0d 5f       	subi	r16, 0xFD	; 253
   1b23c:	1f 4f       	sbci	r17, 0xFF	; 255
   1b23e:	80 81       	ld	r24, Z
   1b240:	b1 2c       	mov	r11, r1
   1b242:	b8 2a       	or	r11, r24
// EOF ?
                if(len == 0)
   1b244:	a1 14       	cp	r10, r1
   1b246:	b1 04       	cpc	r11, r1
   1b248:	09 f4       	brne	.+2      	; 0x1b24c <lif_extract_e010_as_ascii+0x262>
   1b24a:	ee c0       	rjmp	.+476    	; 0x1b428 <lif_extract_e010_as_ascii+0x43e>
                {
                    done = 1;
                    break;
                }
                if(len >= LIF_SECTOR_SIZE)
   1b24c:	5f ef       	ldi	r21, 0xFF	; 255
   1b24e:	a5 16       	cp	r10, r21
   1b250:	b1 04       	cpc	r11, r1
   1b252:	09 f0       	breq	.+2      	; 0x1b256 <lif_extract_e010_as_ascii+0x26c>
   1b254:	7c f4       	brge	.+30     	; 0x1b274 <lif_extract_e010_as_ascii+0x28a>
   1b256:	c4 5e       	subi	r28, 0xE4	; 228
   1b258:	dd 4f       	sbci	r29, 0xFD	; 253
   1b25a:	19 82       	std	Y+1, r1	; 0x01
   1b25c:	18 82       	st	Y, r1
   1b25e:	cc 51       	subi	r28, 0x1C	; 28
   1b260:	d2 40       	sbci	r29, 0x02	; 2
                break;
            }
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
            {
                if(buf[ind] == '\r' && i == len-1)
   1b262:	c5 01       	movw	r24, r10
   1b264:	01 97       	sbiw	r24, 0x01	; 1
   1b266:	c0 5d       	subi	r28, 0xD0	; 208
   1b268:	dd 4f       	sbci	r29, 0xFD	; 253
   1b26a:	99 83       	std	Y+1, r25	; 0x01
   1b26c:	88 83       	st	Y, r24
   1b26e:	c0 53       	subi	r28, 0x30	; 48
   1b270:	d2 40       	sbci	r29, 0x02	; 2
   1b272:	68 c0       	rjmp	.+208    	; 0x1b344 <lif_extract_e010_as_ascii+0x35a>
                    done = 1;
                    break;
                }
                if(len >= LIF_SECTOR_SIZE)
                {
                    printf("lif_extract_e010_as_ascii: string too big size = %d\n", (int)len);
   1b274:	ed b7       	in	r30, 0x3d	; 61
   1b276:	fe b7       	in	r31, 0x3e	; 62
   1b278:	b5 82       	std	Z+5, r11	; 0x05
   1b27a:	a4 82       	std	Z+4, r10	; 0x04
   1b27c:	8c ee       	ldi	r24, 0xEC	; 236
   1b27e:	96 e3       	ldi	r25, 0x36	; 54
   1b280:	a0 e0       	ldi	r26, 0x00	; 0
   1b282:	81 83       	std	Z+1, r24	; 0x01
   1b284:	92 83       	std	Z+2, r25	; 0x02
   1b286:	a3 83       	std	Z+3, r26	; 0x03
   1b288:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   1b28c:	1e c0       	rjmp	.+60     	; 0x1b2ca <lif_extract_e010_as_ascii+0x2e0>
                    status = 0;
                    done = 1;
                    break;
                }
            }
            else if(buf[ind] == 0xEF)
   1b28e:	8f 3e       	cpi	r24, 0xEF	; 239
   1b290:	09 f4       	brne	.+2      	; 0x1b294 <lif_extract_e010_as_ascii+0x2aa>
   1b292:	d2 c0       	rjmp	.+420    	; 0x1b438 <lif_extract_e010_as_ascii+0x44e>
                ind = 0;
                break;
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
   1b294:	ed b7       	in	r30, 0x3d	; 61
   1b296:	fe b7       	in	r31, 0x3e	; 62
   1b298:	13 87       	std	Z+11, r17	; 0x0b
   1b29a:	02 87       	std	Z+10, r16	; 0x0a
   1b29c:	c2 5e       	subi	r28, 0xE2	; 226
   1b29e:	dd 4f       	sbci	r29, 0xFD	; 253
   1b2a0:	28 81       	ld	r18, Y
   1b2a2:	39 81       	ldd	r19, Y+1	; 0x01
   1b2a4:	4a 81       	ldd	r20, Y+2	; 0x02
   1b2a6:	5b 81       	ldd	r21, Y+3	; 0x03
   1b2a8:	ce 51       	subi	r28, 0x1E	; 30
   1b2aa:	d2 40       	sbci	r29, 0x02	; 2
   1b2ac:	26 83       	std	Z+6, r18	; 0x06
   1b2ae:	37 83       	std	Z+7, r19	; 0x07
   1b2b0:	40 87       	std	Z+8, r20	; 0x08
   1b2b2:	51 87       	std	Z+9, r21	; 0x09
   1b2b4:	90 e0       	ldi	r25, 0x00	; 0
   1b2b6:	95 83       	std	Z+5, r25	; 0x05
   1b2b8:	84 83       	std	Z+4, r24	; 0x04
   1b2ba:	86 e9       	ldi	r24, 0x96	; 150
   1b2bc:	96 e3       	ldi	r25, 0x36	; 54
   1b2be:	a0 e0       	ldi	r26, 0x00	; 0
   1b2c0:	81 83       	std	Z+1, r24	; 0x01
   1b2c2:	92 83       	std	Z+2, r25	; 0x02
   1b2c4:	a3 83       	std	Z+3, r26	; 0x03
   1b2c6:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
                status = 0;
                done = 1;
   1b2ca:	21 e0       	ldi	r18, 0x01	; 1
   1b2cc:	30 e0       	ldi	r19, 0x00	; 0
   1b2ce:	ce 5d       	subi	r28, 0xDE	; 222
   1b2d0:	dd 4f       	sbci	r29, 0xFD	; 253
   1b2d2:	39 83       	std	Y+1, r19	; 0x01
   1b2d4:	28 83       	st	Y, r18
   1b2d6:	c2 52       	subi	r28, 0x22	; 34
   1b2d8:	d2 40       	sbci	r29, 0x02	; 2
                break;
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
                status = 0;
   1b2da:	e1 2c       	mov	r14, r1
   1b2dc:	f1 2c       	mov	r15, r1
                done = 1;
                break;
   1b2de:	ac c0       	rjmp	.+344    	; 0x1b438 <lif_extract_e010_as_ascii+0x44e>
            }
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
   1b2e0:	0f 3f       	cpi	r16, 0xFF	; 255
   1b2e2:	11 05       	cpc	r17, r1
   1b2e4:	11 f0       	breq	.+4      	; 0x1b2ea <lif_extract_e010_as_ascii+0x300>
   1b2e6:	0c f0       	brlt	.+2      	; 0x1b2ea <lif_extract_e010_as_ascii+0x300>
   1b2e8:	a7 c0       	rjmp	.+334    	; 0x1b438 <lif_extract_e010_as_ascii+0x44e>
            {
                if(buf[ind] == '\r' && i == len-1)
   1b2ea:	e0 e1       	ldi	r30, 0x10	; 16
   1b2ec:	f1 e0       	ldi	r31, 0x01	; 1
   1b2ee:	ec 0f       	add	r30, r28
   1b2f0:	fd 1f       	adc	r31, r29
   1b2f2:	e0 0f       	add	r30, r16
   1b2f4:	f1 1f       	adc	r31, r17
   1b2f6:	20 81       	ld	r18, Z
   1b2f8:	a1 01       	movw	r20, r2
   1b2fa:	4f 5f       	subi	r20, 0xFF	; 255
   1b2fc:	5f 4f       	sbci	r21, 0xFF	; 255
   1b2fe:	4a 01       	movw	r8, r20
   1b300:	2d 30       	cpi	r18, 0x0D	; 13
   1b302:	51 f1       	breq	.+84     	; 0x1b358 <lif_extract_e010_as_ascii+0x36e>
                    ++ind;
                    break;
                }
                else
                {
                    wbuf[wind++] = buf[ind++];
   1b304:	98 2d       	mov	r25, r8
   1b306:	89 2d       	mov	r24, r9
   1b308:	0f 5f       	subi	r16, 0xFF	; 255
   1b30a:	1f 4f       	sbci	r17, 0xFF	; 255
   1b30c:	ec e0       	ldi	r30, 0x0C	; 12
   1b30e:	f0 e0       	ldi	r31, 0x00	; 0
   1b310:	ec 0f       	add	r30, r28
   1b312:	fd 1f       	adc	r31, r29
   1b314:	e2 0d       	add	r30, r2
   1b316:	f3 1d       	adc	r31, r3
   1b318:	20 83       	st	Z, r18
                }

                if(wind >= LIF_SECTOR_SIZE)
   1b31a:	ef ef       	ldi	r30, 0xFF	; 255
   1b31c:	8e 16       	cp	r8, r30
   1b31e:	91 04       	cpc	r9, r1
   1b320:	09 f0       	breq	.+2      	; 0x1b324 <lif_extract_e010_as_ascii+0x33a>
   1b322:	ac f5       	brge	.+106    	; 0x1b38e <lif_extract_e010_as_ascii+0x3a4>
                status = 0;
                done = 1;
                break;
            }
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
   1b324:	c4 5e       	subi	r28, 0xE4	; 228
   1b326:	dd 4f       	sbci	r29, 0xFD	; 253
   1b328:	28 81       	ld	r18, Y
   1b32a:	39 81       	ldd	r19, Y+1	; 0x01
   1b32c:	cc 51       	subi	r28, 0x1C	; 28
   1b32e:	d2 40       	sbci	r29, 0x02	; 2
   1b330:	2f 5f       	subi	r18, 0xFF	; 255
   1b332:	3f 4f       	sbci	r19, 0xFF	; 255
   1b334:	c4 5e       	subi	r28, 0xE4	; 228
   1b336:	dd 4f       	sbci	r29, 0xFD	; 253
   1b338:	39 83       	std	Y+1, r19	; 0x01
   1b33a:	28 83       	st	Y, r18
   1b33c:	cc 51       	subi	r28, 0x1C	; 28
   1b33e:	d2 40       	sbci	r29, 0x02	; 2
   1b340:	29 2e       	mov	r2, r25
   1b342:	38 2e       	mov	r3, r24
   1b344:	c4 5e       	subi	r28, 0xE4	; 228
   1b346:	dd 4f       	sbci	r29, 0xFD	; 253
   1b348:	48 81       	ld	r20, Y
   1b34a:	59 81       	ldd	r21, Y+1	; 0x01
   1b34c:	cc 51       	subi	r28, 0x1C	; 28
   1b34e:	d2 40       	sbci	r29, 0x02	; 2
   1b350:	4a 15       	cp	r20, r10
   1b352:	5b 05       	cpc	r21, r11
   1b354:	2c f2       	brlt	.-118    	; 0x1b2e0 <lif_extract_e010_as_ascii+0x2f6>
   1b356:	62 c0       	rjmp	.+196    	; 0x1b41c <lif_extract_e010_as_ascii+0x432>
            {
                if(buf[ind] == '\r' && i == len-1)
   1b358:	c4 5e       	subi	r28, 0xE4	; 228
   1b35a:	dd 4f       	sbci	r29, 0xFD	; 253
   1b35c:	88 81       	ld	r24, Y
   1b35e:	99 81       	ldd	r25, Y+1	; 0x01
   1b360:	cc 51       	subi	r28, 0x1C	; 28
   1b362:	d2 40       	sbci	r29, 0x02	; 2
   1b364:	c0 5d       	subi	r28, 0xD0	; 208
   1b366:	dd 4f       	sbci	r29, 0xFD	; 253
   1b368:	a8 81       	ld	r26, Y
   1b36a:	b9 81       	ldd	r27, Y+1	; 0x01
   1b36c:	c0 53       	subi	r28, 0x30	; 48
   1b36e:	d2 40       	sbci	r29, 0x02	; 2
   1b370:	8a 17       	cp	r24, r26
   1b372:	9b 07       	cpc	r25, r27
   1b374:	39 f6       	brne	.-114    	; 0x1b304 <lif_extract_e010_as_ascii+0x31a>
                {
                    wbuf[wind++] = '\n';
   1b376:	ec e0       	ldi	r30, 0x0C	; 12
   1b378:	f0 e0       	ldi	r31, 0x00	; 0
   1b37a:	ec 0f       	add	r30, r28
   1b37c:	fd 1f       	adc	r31, r29
   1b37e:	e2 0d       	add	r30, r2
   1b380:	f3 1d       	adc	r31, r3
   1b382:	ba e0       	ldi	r27, 0x0A	; 10
   1b384:	b0 83       	st	Z, r27
                    ++ind;
   1b386:	0f 5f       	subi	r16, 0xFF	; 255
   1b388:	1f 4f       	sbci	r17, 0xFF	; 255
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
            {
                if(buf[ind] == '\r' && i == len-1)
                {
                    wbuf[wind++] = '\n';
   1b38a:	1a 01       	movw	r2, r20
                    ++ind;
                    break;
   1b38c:	47 c0       	rjmp	.+142    	; 0x1b41c <lif_extract_e010_as_ascii+0x432>
                    wbuf[wind++] = buf[ind++];
                }

                if(wind >= LIF_SECTOR_SIZE)
                {
                    size = fwrite(wbuf,1,wind,fo);
   1b38e:	cc 5d       	subi	r28, 0xDC	; 220
   1b390:	dd 4f       	sbci	r29, 0xFD	; 253
   1b392:	28 81       	ld	r18, Y
   1b394:	39 81       	ldd	r19, Y+1	; 0x01
   1b396:	c4 52       	subi	r28, 0x24	; 36
   1b398:	d2 40       	sbci	r29, 0x02	; 2
   1b39a:	a4 01       	movw	r20, r8
   1b39c:	61 e0       	ldi	r22, 0x01	; 1
   1b39e:	70 e0       	ldi	r23, 0x00	; 0
   1b3a0:	ce 01       	movw	r24, r28
   1b3a2:	0c 96       	adiw	r24, 0x0c	; 12
   1b3a4:	0e 94 9a 7c 	call	0xf934	; 0xf934 <fwrite>
                    if(size < wind)
   1b3a8:	88 15       	cp	r24, r8
   1b3aa:	99 05       	cpc	r25, r9
   1b3ac:	d4 f4       	brge	.+52     	; 0x1b3e2 <lif_extract_e010_as_ascii+0x3f8>
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
   1b3ae:	cb 5c       	subi	r28, 0xCB	; 203
   1b3b0:	dd 4f       	sbci	r29, 0xFD	; 253
   1b3b2:	28 81       	ld	r18, Y
   1b3b4:	39 81       	ldd	r19, Y+1	; 0x01
   1b3b6:	4a 81       	ldd	r20, Y+2	; 0x02
   1b3b8:	c5 53       	subi	r28, 0x35	; 53
   1b3ba:	d2 40       	sbci	r29, 0x02	; 2
   1b3bc:	ed b7       	in	r30, 0x3d	; 61
   1b3be:	fe b7       	in	r31, 0x3e	; 62
   1b3c0:	21 83       	std	Z+1, r18	; 0x01
   1b3c2:	32 83       	std	Z+2, r19	; 0x02
   1b3c4:	43 83       	std	Z+3, r20	; 0x03
   1b3c6:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
                    ++ind;
                    break;
                }
                else
                {
                    wbuf[wind++] = buf[ind++];
   1b3ca:	14 01       	movw	r2, r8
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
                        status = 0;
                        done = 1;
   1b3cc:	21 e0       	ldi	r18, 0x01	; 1
   1b3ce:	30 e0       	ldi	r19, 0x00	; 0
   1b3d0:	ce 5d       	subi	r28, 0xDE	; 222
   1b3d2:	dd 4f       	sbci	r29, 0xFD	; 253
   1b3d4:	39 83       	std	Y+1, r19	; 0x01
   1b3d6:	28 83       	st	Y, r18
   1b3d8:	c2 52       	subi	r28, 0x22	; 34
   1b3da:	d2 40       	sbci	r29, 0x02	; 2
                {
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
                        status = 0;
   1b3dc:	e1 2c       	mov	r14, r1
   1b3de:	f1 2c       	mov	r15, r1
                        done = 1;
                        break;
   1b3e0:	1d c0       	rjmp	.+58     	; 0x1b41c <lif_extract_e010_as_ascii+0x432>
                    }
                    bytes += size;
   1b3e2:	09 2e       	mov	r0, r25
   1b3e4:	00 0c       	add	r0, r0
   1b3e6:	aa 0b       	sbc	r26, r26
   1b3e8:	bb 0b       	sbc	r27, r27
   1b3ea:	48 0e       	add	r4, r24
   1b3ec:	59 1e       	adc	r5, r25
   1b3ee:	6a 1e       	adc	r6, r26
   1b3f0:	7b 1e       	adc	r7, r27
                    printf("\tWrote: %8ld\r", bytes);
   1b3f2:	ed b7       	in	r30, 0x3d	; 61
   1b3f4:	fe b7       	in	r31, 0x3e	; 62
   1b3f6:	44 82       	std	Z+4, r4	; 0x04
   1b3f8:	55 82       	std	Z+5, r5	; 0x05
   1b3fa:	66 82       	std	Z+6, r6	; 0x06
   1b3fc:	77 82       	std	Z+7, r7	; 0x07
   1b3fe:	ce 5c       	subi	r28, 0xCE	; 206
   1b400:	dd 4f       	sbci	r29, 0xFD	; 253
   1b402:	28 81       	ld	r18, Y
   1b404:	39 81       	ldd	r19, Y+1	; 0x01
   1b406:	4a 81       	ldd	r20, Y+2	; 0x02
   1b408:	c2 53       	subi	r28, 0x32	; 50
   1b40a:	d2 40       	sbci	r29, 0x02	; 2
   1b40c:	21 83       	std	Z+1, r18	; 0x01
   1b40e:	32 83       	std	Z+2, r19	; 0x02
   1b410:	43 83       	std	Z+3, r20	; 0x03
   1b412:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
                    wind = 0;
   1b416:	90 e0       	ldi	r25, 0x00	; 0
   1b418:	80 e0       	ldi	r24, 0x00	; 0
   1b41a:	84 cf       	rjmp	.-248    	; 0x1b324 <lif_extract_e010_as_ascii+0x33a>
            status = 0;
            break;
        }

        ind = 0;
        while(ind < LIF_SECTOR_SIZE && !done)
   1b41c:	0f 3f       	cpi	r16, 0xFF	; 255
   1b41e:	11 05       	cpc	r17, r1
   1b420:	09 f0       	breq	.+2      	; 0x1b424 <lif_extract_e010_as_ascii+0x43a>
   1b422:	0c f4       	brge	.+2      	; 0x1b426 <lif_extract_e010_as_ascii+0x43c>
   1b424:	e5 ce       	rjmp	.-566    	; 0x1b1f0 <lif_extract_e010_as_ascii+0x206>
   1b426:	08 c0       	rjmp	.+16     	; 0x1b438 <lif_extract_e010_as_ascii+0x44e>
                len = buf[ind++] & 0xff;
                len |= ((buf[ind++] & 0xff) <<8);
// EOF ?
                if(len == 0)
                {
                    done = 1;
   1b428:	a1 e0       	ldi	r26, 0x01	; 1
   1b42a:	b0 e0       	ldi	r27, 0x00	; 0
   1b42c:	ce 5d       	subi	r28, 0xDE	; 222
   1b42e:	dd 4f       	sbci	r29, 0xFD	; 253
   1b430:	b9 83       	std	Y+1, r27	; 0x01
   1b432:	a8 83       	st	Y, r26
   1b434:	c2 52       	subi	r28, 0x22	; 34
   1b436:	d2 40       	sbci	r29, 0x02	; 2

            }                                     // for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)

        }                                         // while(ind < LIF_SECTOR_SIZE && status)

        offset += (long) LIF_SECTOR_SIZE;
   1b438:	c2 5e       	subi	r28, 0xE2	; 226
   1b43a:	dd 4f       	sbci	r29, 0xFD	; 253
   1b43c:	28 81       	ld	r18, Y
   1b43e:	39 81       	ldd	r19, Y+1	; 0x01
   1b440:	4a 81       	ldd	r20, Y+2	; 0x02
   1b442:	5b 81       	ldd	r21, Y+3	; 0x03
   1b444:	ce 51       	subi	r28, 0x1E	; 30
   1b446:	d2 40       	sbci	r29, 0x02	; 2
   1b448:	3f 5f       	subi	r19, 0xFF	; 255
   1b44a:	4f 4f       	sbci	r20, 0xFF	; 255
   1b44c:	5f 4f       	sbci	r21, 0xFF	; 255
   1b44e:	c2 5e       	subi	r28, 0xE2	; 226
   1b450:	dd 4f       	sbci	r29, 0xFD	; 253
   1b452:	28 83       	st	Y, r18
   1b454:	39 83       	std	Y+1, r19	; 0x01
   1b456:	4a 83       	std	Y+2, r20	; 0x02
   1b458:	5b 83       	std	Y+3, r21	; 0x03
   1b45a:	ce 51       	subi	r28, 0x1E	; 30
   1b45c:	d2 40       	sbci	r29, 0x02	; 2
   1b45e:	97 ce       	rjmp	.-722    	; 0x1b18e <lif_extract_e010_as_ascii+0x1a4>
    {
// LIF images are always multiples of LIF_SECTOR_SIZE
        size = lif_read(LIF, buf, offset, LIF_SECTOR_SIZE);
        if(size < LIF_SECTOR_SIZE)
        {
            status = 0;
   1b460:	e1 2c       	mov	r14, r1
   1b462:	f1 2c       	mov	r15, r1
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b464:	c6 01       	movw	r24, r12
   1b466:	0e 94 a6 ca 	call	0x1954c	; 0x1954c <lif_close_volume>

    }                                             // while(offset <= end)

    lif_closedir(LIF);
// Flush any remaining bytes
    if(wind)
   1b46a:	21 14       	cp	r2, r1
   1b46c:	31 04       	cpc	r3, r1
   1b46e:	31 f1       	breq	.+76     	; 0x1b4bc <lif_extract_e010_as_ascii+0x4d2>
    {
        size = fwrite(wbuf,1,wind,fo);
   1b470:	cc 5d       	subi	r28, 0xDC	; 220
   1b472:	dd 4f       	sbci	r29, 0xFD	; 253
   1b474:	28 81       	ld	r18, Y
   1b476:	39 81       	ldd	r19, Y+1	; 0x01
   1b478:	c4 52       	subi	r28, 0x24	; 36
   1b47a:	d2 40       	sbci	r29, 0x02	; 2
   1b47c:	a1 01       	movw	r20, r2
   1b47e:	61 e0       	ldi	r22, 0x01	; 1
   1b480:	70 e0       	ldi	r23, 0x00	; 0
   1b482:	ce 01       	movw	r24, r28
   1b484:	0c 96       	adiw	r24, 0x0c	; 12
   1b486:	0e 94 9a 7c 	call	0xf934	; 0xf934 <fwrite>
   1b48a:	8c 01       	movw	r16, r24
        if(size < wind)
   1b48c:	82 15       	cp	r24, r2
   1b48e:	93 05       	cpc	r25, r3
   1b490:	64 f4       	brge	.+24     	; 0x1b4aa <lif_extract_e010_as_ascii+0x4c0>
        {
            printf("lif_extract_e010_as_ascii: write error\n");
   1b492:	88 e3       	ldi	r24, 0x38	; 56
   1b494:	96 e3       	ldi	r25, 0x36	; 54
   1b496:	a0 e0       	ldi	r26, 0x00	; 0
   1b498:	ed b7       	in	r30, 0x3d	; 61
   1b49a:	fe b7       	in	r31, 0x3e	; 62
   1b49c:	81 83       	std	Z+1, r24	; 0x01
   1b49e:	92 83       	std	Z+2, r25	; 0x02
   1b4a0:	a3 83       	std	Z+3, r26	; 0x03
   1b4a2:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
            status = 0;
   1b4a6:	e1 2c       	mov	r14, r1
   1b4a8:	f1 2c       	mov	r15, r1
        }
        bytes += size;
   1b4aa:	c8 01       	movw	r24, r16
   1b4ac:	01 2e       	mov	r0, r17
   1b4ae:	00 0c       	add	r0, r0
   1b4b0:	aa 0b       	sbc	r26, r26
   1b4b2:	bb 0b       	sbc	r27, r27
   1b4b4:	48 0e       	add	r4, r24
   1b4b6:	59 1e       	adc	r5, r25
   1b4b8:	6a 1e       	adc	r6, r26
   1b4ba:	7b 1e       	adc	r7, r27
    }
    fclose(fo);
   1b4bc:	cc 5d       	subi	r28, 0xDC	; 220
   1b4be:	dd 4f       	sbci	r29, 0xFD	; 253
   1b4c0:	88 81       	ld	r24, Y
   1b4c2:	99 81       	ldd	r25, Y+1	; 0x01
   1b4c4:	c4 52       	subi	r28, 0x24	; 36
   1b4c6:	d2 40       	sbci	r29, 0x02	; 2
   1b4c8:	0e 94 1c 7d 	call	0xfa38	; 0xfa38 <fclose>
    if(t)
   1b4cc:	c8 5d       	subi	r28, 0xD8	; 216
   1b4ce:	dd 4f       	sbci	r29, 0xFD	; 253
   1b4d0:	28 81       	ld	r18, Y
   1b4d2:	39 81       	ldd	r19, Y+1	; 0x01
   1b4d4:	4a 81       	ldd	r20, Y+2	; 0x02
   1b4d6:	5b 81       	ldd	r21, Y+3	; 0x03
   1b4d8:	c8 52       	subi	r28, 0x28	; 40
   1b4da:	d2 40       	sbci	r29, 0x02	; 2
   1b4dc:	21 15       	cp	r18, r1
   1b4de:	31 05       	cpc	r19, r1
   1b4e0:	41 05       	cpc	r20, r1
   1b4e2:	51 05       	cpc	r21, r1
   1b4e4:	d9 f0       	breq	.+54     	; 0x1b51c <lif_extract_e010_as_ascii+0x532>
    {
        struct utimbuf times;
        times.modtime = t;
   1b4e6:	c8 5e       	subi	r28, 0xE8	; 232
   1b4e8:	dd 4f       	sbci	r29, 0xFD	; 253
   1b4ea:	28 83       	st	Y, r18
   1b4ec:	39 83       	std	Y+1, r19	; 0x01
   1b4ee:	4a 83       	std	Y+2, r20	; 0x02
   1b4f0:	5b 83       	std	Y+3, r21	; 0x03
   1b4f2:	c8 51       	subi	r28, 0x18	; 24
   1b4f4:	d2 40       	sbci	r29, 0x02	; 2
        times.actime = t;
   1b4f6:	cc 5e       	subi	r28, 0xEC	; 236
   1b4f8:	dd 4f       	sbci	r29, 0xFD	; 253
   1b4fa:	28 83       	st	Y, r18
   1b4fc:	39 83       	std	Y+1, r19	; 0x01
   1b4fe:	4a 83       	std	Y+2, r20	; 0x02
   1b500:	5b 83       	std	Y+3, r21	; 0x03
   1b502:	c4 51       	subi	r28, 0x14	; 20
   1b504:	d2 40       	sbci	r29, 0x02	; 2
        utime(username, (struct utimbuf *) &times);
   1b506:	be 01       	movw	r22, r28
   1b508:	6c 5e       	subi	r22, 0xEC	; 236
   1b50a:	7d 4f       	sbci	r23, 0xFD	; 253
   1b50c:	ca 5d       	subi	r28, 0xDA	; 218
   1b50e:	dd 4f       	sbci	r29, 0xFD	; 253
   1b510:	88 81       	ld	r24, Y
   1b512:	99 81       	ldd	r25, Y+1	; 0x01
   1b514:	c6 52       	subi	r28, 0x26	; 38
   1b516:	d2 40       	sbci	r29, 0x02	; 2
   1b518:	0e 94 59 7a 	call	0xf4b2	; 0xf4b2 <utime>
    }
    sync();
   1b51c:	0e 94 17 7c 	call	0xf82e	; 0xf82e <sync>
    printf("\tWrote: %8ld\n", bytes);
   1b520:	ed b7       	in	r30, 0x3d	; 61
   1b522:	fe b7       	in	r31, 0x3e	; 62
   1b524:	44 82       	std	Z+4, r4	; 0x04
   1b526:	55 82       	std	Z+5, r5	; 0x05
   1b528:	66 82       	std	Z+6, r6	; 0x06
   1b52a:	77 82       	std	Z+7, r7	; 0x07
   1b52c:	8a e2       	ldi	r24, 0x2A	; 42
   1b52e:	96 e3       	ldi	r25, 0x36	; 54
   1b530:	a0 e0       	ldi	r26, 0x00	; 0
   1b532:	81 83       	std	Z+1, r24	; 0x01
   1b534:	92 83       	std	Z+2, r25	; 0x02
   1b536:	a3 83       	std	Z+3, r26	; 0x03
   1b538:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    return(status);
   1b53c:	c7 01       	movw	r24, r14
}
   1b53e:	c9 5c       	subi	r28, 0xC9	; 201
   1b540:	dd 4f       	sbci	r29, 0xFD	; 253
   1b542:	e2 e1       	ldi	r30, 0x12	; 18
   1b544:	0c 94 1b e7 	jmp	0x1ce36	; 0x1ce36 <__epilogue_restores__>

0001b548 <lif_extract_lif_as_lif>:
/// @param[in] lifname:  name of file in LIF image we want to extract
/// @param[in] username: new LIF file to create
/// @return 1 on sucess or 0 on error
MEMSPACE
int lif_extract_lif_as_lif(char *lifimagename, char *lifname, char *username)
{
   1b548:	a4 e1       	ldi	r26, 0x14	; 20
   1b54a:	b1 e0       	ldi	r27, 0x01	; 1
   1b54c:	ea ea       	ldi	r30, 0xAA	; 170
   1b54e:	fa ed       	ldi	r31, 0xDA	; 218
   1b550:	0c 94 ff e6 	jmp	0x1cdfe	; 0x1cdfe <__prologue_saves__>
   1b554:	7c 01       	movw	r14, r24
   1b556:	8b 01       	movw	r16, r22
   1b558:	3a 01       	movw	r6, r20
    int i, size;
    int sectors;

    uint8_t buf[LIF_SECTOR_SIZE+4];

    LIF = lif_open_volume(lifimagename,"r");
   1b55a:	62 e4       	ldi	r22, 0x42	; 66
   1b55c:	73 e0       	ldi	r23, 0x03	; 3
   1b55e:	0e 94 63 d1 	call	0x1a2c6	; 0x1a2c6 <lif_open_volume>
   1b562:	4c 01       	movw	r8, r24
    if(LIF == NULL)
   1b564:	00 97       	sbiw	r24, 0x00	; 0
   1b566:	69 f4       	brne	.+26     	; 0x1b582 <lif_extract_lif_as_lif+0x3a>
    {
        printf("LIF image not found:%s\n", lifimagename);
   1b568:	ed b7       	in	r30, 0x3d	; 61
   1b56a:	fe b7       	in	r31, 0x3e	; 62
   1b56c:	f5 82       	std	Z+5, r15	; 0x05
   1b56e:	e4 82       	std	Z+4, r14	; 0x04
   1b570:	82 e1       	ldi	r24, 0x12	; 18
   1b572:	96 e3       	ldi	r25, 0x36	; 54
   1b574:	a0 e0       	ldi	r26, 0x00	; 0
   1b576:	81 83       	std	Z+1, r24	; 0x01
   1b578:	92 83       	std	Z+2, r25	; 0x02
   1b57a:	a3 83       	std	Z+3, r26	; 0x03
   1b57c:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   1b580:	13 c0       	rjmp	.+38     	; 0x1b5a8 <lif_extract_lif_as_lif+0x60>
        return(0);
    }

    index = lif_find_file(LIF, lifname);
   1b582:	b8 01       	movw	r22, r16
   1b584:	75 d9       	rcall	.-3350   	; 0x1a870 <lif_find_file>
    if(index == -1)
   1b586:	01 96       	adiw	r24, 0x01	; 1
   1b588:	91 f4       	brne	.+36     	; 0x1b5ae <lif_extract_lif_as_lif+0x66>
    {
        printf("File not found:%s\n", lifname);
   1b58a:	ed b7       	in	r30, 0x3d	; 61
   1b58c:	fe b7       	in	r31, 0x3e	; 62
   1b58e:	15 83       	std	Z+5, r17	; 0x05
   1b590:	04 83       	std	Z+4, r16	; 0x04
   1b592:	8f ef       	ldi	r24, 0xFF	; 255
   1b594:	95 e3       	ldi	r25, 0x35	; 53
   1b596:	a0 e0       	ldi	r26, 0x00	; 0
   1b598:	81 83       	std	Z+1, r24	; 0x01
   1b59a:	92 83       	std	Z+2, r25	; 0x02
   1b59c:	a3 83       	std	Z+3, r26	; 0x03
   1b59e:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b5a2:	c4 01       	movw	r24, r8
   1b5a4:	0e 94 a6 ca 	call	0x1954c	; 0x1954c <lif_close_volume>
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        printf("File not found:%s\n", lifname);
        lif_closedir(LIF);
        return(0);
   1b5a8:	00 e0       	ldi	r16, 0x00	; 0
   1b5aa:	10 e0       	ldi	r17, 0x00	; 0
   1b5ac:	ff c0       	rjmp	.+510    	; 0x1b7ac <lif_extract_lif_as_lif+0x264>
    }

    sectors = LIF->DIR.FileSectors;
   1b5ae:	94 01       	movw	r18, r8
   1b5b0:	20 5a       	subi	r18, 0xA0	; 160
   1b5b2:	3f 4f       	sbci	r19, 0xFF	; 255
   1b5b4:	c0 5f       	subi	r28, 0xF0	; 240
   1b5b6:	de 4f       	sbci	r29, 0xFE	; 254
   1b5b8:	39 83       	std	Y+1, r19	; 0x01
   1b5ba:	28 83       	st	Y, r18
   1b5bc:	c0 51       	subi	r28, 0x10	; 16
   1b5be:	d1 40       	sbci	r29, 0x01	; 1

//Initialize the user file lif_t structure
    ULIF = lif_create_volume(username, "HFSLIF",1,1,sectors);
   1b5c0:	f9 01       	movw	r30, r18
   1b5c2:	a0 80       	ld	r10, Z
   1b5c4:	b1 80       	ldd	r11, Z+1	; 0x01
   1b5c6:	0b 2c       	mov	r0, r11
   1b5c8:	00 0c       	add	r0, r0
   1b5ca:	cc 08       	sbc	r12, r12
   1b5cc:	dd 08       	sbc	r13, r13
   1b5ce:	e1 2c       	mov	r14, r1
   1b5d0:	f1 2c       	mov	r15, r1
   1b5d2:	87 01       	movw	r16, r14
   1b5d4:	e3 94       	inc	r14
   1b5d6:	21 e0       	ldi	r18, 0x01	; 1
   1b5d8:	30 e0       	ldi	r19, 0x00	; 0
   1b5da:	40 e0       	ldi	r20, 0x00	; 0
   1b5dc:	50 e0       	ldi	r21, 0x00	; 0
   1b5de:	6c e6       	ldi	r22, 0x6C	; 108
   1b5e0:	76 e1       	ldi	r23, 0x16	; 22
   1b5e2:	c3 01       	movw	r24, r6
   1b5e4:	0e 94 19 cd 	call	0x19a32	; 0x19a32 <lif_create_volume>
   1b5e8:	7c 01       	movw	r14, r24
    if(ULIF == NULL)
   1b5ea:	89 2b       	or	r24, r25
   1b5ec:	d1 f2       	breq	.-76     	; 0x1b5a2 <lif_extract_lif_as_lif+0x5a>
    }

// Only the start sector changes

// Copy directory record
    ULIF->DIR = LIF->DIR;
   1b5ee:	81 e2       	ldi	r24, 0x21	; 33
   1b5f0:	f4 01       	movw	r30, r8
   1b5f2:	e1 5b       	subi	r30, 0xB1	; 177
   1b5f4:	ff 4f       	sbci	r31, 0xFF	; 255
   1b5f6:	d7 01       	movw	r26, r14
   1b5f8:	a1 5b       	subi	r26, 0xB1	; 177
   1b5fa:	bf 4f       	sbci	r27, 0xFF	; 255
   1b5fc:	01 90       	ld	r0, Z+
   1b5fe:	0d 92       	st	X+, r0
   1b600:	8a 95       	dec	r24
   1b602:	e1 f7       	brne	.-8      	; 0x1b5fc <lif_extract_lif_as_lif+0xb4>

    ULIF->DIR.FileStartSector = 2;
   1b604:	82 e0       	ldi	r24, 0x02	; 2
   1b606:	90 e0       	ldi	r25, 0x00	; 0
   1b608:	a0 e0       	ldi	r26, 0x00	; 0
   1b60a:	b0 e0       	ldi	r27, 0x00	; 0
   1b60c:	f7 01       	movw	r30, r14
   1b60e:	e4 5a       	subi	r30, 0xA4	; 164
   1b610:	ff 4f       	sbci	r31, 0xFF	; 255
   1b612:	80 83       	st	Z, r24
   1b614:	91 83       	std	Z+1, r25	; 0x01
   1b616:	a2 83       	std	Z+2, r26	; 0x02
   1b618:	b3 83       	std	Z+3, r27	; 0x03
    ULIF->filesectors = LIF->DIR.FileSectors;
   1b61a:	c0 5f       	subi	r28, 0xF0	; 240
   1b61c:	de 4f       	sbci	r29, 0xFE	; 254
   1b61e:	e8 81       	ld	r30, Y
   1b620:	f9 81       	ldd	r31, Y+1	; 0x01
   1b622:	c0 51       	subi	r28, 0x10	; 16
   1b624:	d1 40       	sbci	r29, 0x01	; 1
   1b626:	80 81       	ld	r24, Z
   1b628:	91 81       	ldd	r25, Z+1	; 0x01
   1b62a:	a2 81       	ldd	r26, Z+2	; 0x02
   1b62c:	b3 81       	ldd	r27, Z+3	; 0x03
   1b62e:	f7 01       	movw	r30, r14
   1b630:	80 8b       	std	Z+16, r24	; 0x10
   1b632:	91 8b       	std	Z+17, r25	; 0x11
   1b634:	a2 8b       	std	Z+18, r26	; 0x12
   1b636:	b3 8b       	std	Z+19, r27	; 0x13

    if( !lif_writedirindex(ULIF,0))
   1b638:	60 e0       	ldi	r22, 0x00	; 0
   1b63a:	70 e0       	ldi	r23, 0x00	; 0
   1b63c:	c7 01       	movw	r24, r14
   1b63e:	0e 94 9b cb 	call	0x19736	; 0x19736 <lif_writedirindex>
   1b642:	8c 01       	movw	r16, r24
   1b644:	89 2b       	or	r24, r25
   1b646:	41 f0       	breq	.+16     	; 0x1b658 <lif_extract_lif_as_lif+0x110>
    {
        lif_closedir(LIF);
        lif_closedir(ULIF);
        return(0);
    }
    if( !lif_writedirEOF(ULIF,1) )
   1b648:	61 e0       	ldi	r22, 0x01	; 1
   1b64a:	70 e0       	ldi	r23, 0x00	; 0
   1b64c:	c7 01       	movw	r24, r14
   1b64e:	0e 94 f7 cb 	call	0x197ee	; 0x197ee <lif_writedirEOF>
   1b652:	8c 01       	movw	r16, r24
   1b654:	89 2b       	or	r24, r25
   1b656:	39 f4       	brne	.+14     	; 0x1b666 <lif_extract_lif_as_lif+0x11e>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b658:	c4 01       	movw	r24, r8
   1b65a:	0e 94 a6 ca 	call	0x1954c	; 0x1954c <lif_close_volume>
   1b65e:	c7 01       	movw	r24, r14
   1b660:	0e 94 a6 ca 	call	0x1954c	; 0x1954c <lif_close_volume>
    }
    if( !lif_writedirEOF(ULIF,1) )
    {
        lif_closedir(LIF);
        lif_closedir(ULIF);
        return(0);
   1b664:	a3 c0       	rjmp	.+326    	; 0x1b7ac <lif_extract_lif_as_lif+0x264>
    }

    uoffset =  ULIF->filestart * (long) LIF_SECTOR_SIZE;
   1b666:	f7 01       	movw	r30, r14
   1b668:	44 84       	ldd	r4, Z+12	; 0x0c
   1b66a:	55 84       	ldd	r5, Z+13	; 0x0d
   1b66c:	66 84       	ldd	r6, Z+14	; 0x0e
   1b66e:	77 84       	ldd	r7, Z+15	; 0x0f
   1b670:	76 2c       	mov	r7, r6
   1b672:	65 2c       	mov	r6, r5
   1b674:	54 2c       	mov	r5, r4
   1b676:	44 24       	eor	r4, r4

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1b678:	f4 01       	movw	r30, r8
   1b67a:	e4 5a       	subi	r30, 0xA4	; 164
   1b67c:	ff 4f       	sbci	r31, 0xFF	; 255
   1b67e:	80 81       	ld	r24, Z
   1b680:	91 81       	ldd	r25, Z+1	; 0x01
   1b682:	a2 81       	ldd	r26, Z+2	; 0x02
   1b684:	b3 81       	ldd	r27, Z+3	; 0x03
   1b686:	22 27       	eor	r18, r18
   1b688:	38 2f       	mov	r19, r24
   1b68a:	49 2f       	mov	r20, r25
   1b68c:	5a 2f       	mov	r21, r26
   1b68e:	c4 5f       	subi	r28, 0xF4	; 244
   1b690:	de 4f       	sbci	r29, 0xFE	; 254
   1b692:	28 83       	st	Y, r18
   1b694:	39 83       	std	Y+1, r19	; 0x01
   1b696:	4a 83       	std	Y+2, r20	; 0x02
   1b698:	5b 83       	std	Y+3, r21	; 0x03
   1b69a:	cc 50       	subi	r28, 0x0C	; 12
   1b69c:	d1 40       	sbci	r29, 0x01	; 1

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b69e:	21 2c       	mov	r2, r1
   1b6a0:	31 2c       	mov	r3, r1
            return(0);
        }
        bytes += size;
        offset += size;
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
   1b6a2:	81 ef       	ldi	r24, 0xF1	; 241
   1b6a4:	95 e3       	ldi	r25, 0x35	; 53
   1b6a6:	9c 01       	movw	r18, r24
   1b6a8:	40 e0       	ldi	r20, 0x00	; 0
   1b6aa:	ce 5e       	subi	r28, 0xEE	; 238
   1b6ac:	de 4f       	sbci	r29, 0xFE	; 254
   1b6ae:	28 83       	st	Y, r18
   1b6b0:	39 83       	std	Y+1, r19	; 0x01
   1b6b2:	4a 83       	std	Y+2, r20	; 0x02
   1b6b4:	c2 51       	subi	r28, 0x12	; 18
   1b6b6:	d1 40       	sbci	r29, 0x01	; 1

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b6b8:	c0 5f       	subi	r28, 0xF0	; 240
   1b6ba:	de 4f       	sbci	r29, 0xFE	; 254
   1b6bc:	e8 81       	ld	r30, Y
   1b6be:	f9 81       	ldd	r31, Y+1	; 0x01
   1b6c0:	c0 51       	subi	r28, 0x10	; 16
   1b6c2:	d1 40       	sbci	r29, 0x01	; 1
   1b6c4:	80 81       	ld	r24, Z
   1b6c6:	91 81       	ldd	r25, Z+1	; 0x01
   1b6c8:	28 16       	cp	r2, r24
   1b6ca:	39 06       	cpc	r3, r25
   1b6cc:	0c f0       	brlt	.+2      	; 0x1b6d0 <lif_extract_lif_as_lif+0x188>
   1b6ce:	58 c0       	rjmp	.+176    	; 0x1b780 <lif_extract_lif_as_lif+0x238>
    {
        size = lif_read(LIF, buf, offset,LIF_SECTOR_SIZE);
   1b6d0:	00 e0       	ldi	r16, 0x00	; 0
   1b6d2:	11 e0       	ldi	r17, 0x01	; 1
   1b6d4:	c4 5f       	subi	r28, 0xF4	; 244
   1b6d6:	de 4f       	sbci	r29, 0xFE	; 254
   1b6d8:	28 81       	ld	r18, Y
   1b6da:	39 81       	ldd	r19, Y+1	; 0x01
   1b6dc:	4a 81       	ldd	r20, Y+2	; 0x02
   1b6de:	5b 81       	ldd	r21, Y+3	; 0x03
   1b6e0:	cc 50       	subi	r28, 0x0C	; 12
   1b6e2:	d1 40       	sbci	r29, 0x01	; 1
   1b6e4:	be 01       	movw	r22, r28
   1b6e6:	68 5f       	subi	r22, 0xF8	; 248
   1b6e8:	7f 4f       	sbci	r23, 0xFF	; 255
   1b6ea:	c4 01       	movw	r24, r8
   1b6ec:	0e 94 da c1 	call	0x183b4	; 0x183b4 <lif_read>
   1b6f0:	5b 01       	movw	r10, r22
   1b6f2:	6c 01       	movw	r12, r24
        if(size < LIF_SECTOR_SIZE)
   1b6f4:	6f 3f       	cpi	r22, 0xFF	; 255
   1b6f6:	71 05       	cpc	r23, r1
   1b6f8:	09 f0       	breq	.+2      	; 0x1b6fc <lif_extract_lif_as_lif+0x1b4>
   1b6fa:	2c f4       	brge	.+10     	; 0x1b706 <lif_extract_lif_as_lif+0x1be>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b6fc:	c4 01       	movw	r24, r8
   1b6fe:	0e 94 a6 ca 	call	0x1954c	; 0x1954c <lif_close_volume>
   1b702:	c7 01       	movw	r24, r14
   1b704:	4f cf       	rjmp	.-354    	; 0x1b5a4 <lif_extract_lif_as_lif+0x5c>
            lif_closedir(LIF);
            lif_closedir(ULIF);
            return(0);
        }

        lif_write(ULIF,buf,uoffset,LIF_SECTOR_SIZE);
   1b706:	00 e0       	ldi	r16, 0x00	; 0
   1b708:	11 e0       	ldi	r17, 0x01	; 1
   1b70a:	a3 01       	movw	r20, r6
   1b70c:	92 01       	movw	r18, r4
   1b70e:	be 01       	movw	r22, r28
   1b710:	68 5f       	subi	r22, 0xF8	; 248
   1b712:	7f 4f       	sbci	r23, 0xFF	; 255
   1b714:	c7 01       	movw	r24, r14
   1b716:	0e 94 2d c2 	call	0x1845a	; 0x1845a <lif_write>
        {
            lif_closedir(LIF);
            lif_closedir(ULIF);
            return(0);
        }
        bytes += size;
   1b71a:	c5 01       	movw	r24, r10
   1b71c:	0b 2c       	mov	r0, r11
   1b71e:	00 0c       	add	r0, r0
   1b720:	aa 0b       	sbc	r26, r26
   1b722:	bb 0b       	sbc	r27, r27
   1b724:	48 0e       	add	r4, r24
   1b726:	59 1e       	adc	r5, r25
   1b728:	6a 1e       	adc	r6, r26
   1b72a:	7b 1e       	adc	r7, r27
        offset += size;
   1b72c:	c4 5f       	subi	r28, 0xF4	; 244
   1b72e:	de 4f       	sbci	r29, 0xFE	; 254
   1b730:	28 81       	ld	r18, Y
   1b732:	39 81       	ldd	r19, Y+1	; 0x01
   1b734:	4a 81       	ldd	r20, Y+2	; 0x02
   1b736:	5b 81       	ldd	r21, Y+3	; 0x03
   1b738:	cc 50       	subi	r28, 0x0C	; 12
   1b73a:	d1 40       	sbci	r29, 0x01	; 1
   1b73c:	28 0f       	add	r18, r24
   1b73e:	39 1f       	adc	r19, r25
   1b740:	4a 1f       	adc	r20, r26
   1b742:	5b 1f       	adc	r21, r27
   1b744:	c4 5f       	subi	r28, 0xF4	; 244
   1b746:	de 4f       	sbci	r29, 0xFE	; 254
   1b748:	28 83       	st	Y, r18
   1b74a:	39 83       	std	Y+1, r19	; 0x01
   1b74c:	4a 83       	std	Y+2, r20	; 0x02
   1b74e:	5b 83       	std	Y+3, r21	; 0x03
   1b750:	cc 50       	subi	r28, 0x0C	; 12
   1b752:	d1 40       	sbci	r29, 0x01	; 1
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
   1b754:	ed b7       	in	r30, 0x3d	; 61
   1b756:	fe b7       	in	r31, 0x3e	; 62
   1b758:	44 82       	std	Z+4, r4	; 0x04
   1b75a:	55 82       	std	Z+5, r5	; 0x05
   1b75c:	66 82       	std	Z+6, r6	; 0x06
   1b75e:	77 82       	std	Z+7, r7	; 0x07
   1b760:	ce 5e       	subi	r28, 0xEE	; 238
   1b762:	de 4f       	sbci	r29, 0xFE	; 254
   1b764:	28 81       	ld	r18, Y
   1b766:	39 81       	ldd	r19, Y+1	; 0x01
   1b768:	4a 81       	ldd	r20, Y+2	; 0x02
   1b76a:	c2 51       	subi	r28, 0x12	; 18
   1b76c:	d1 40       	sbci	r29, 0x01	; 1
   1b76e:	21 83       	std	Z+1, r18	; 0x01
   1b770:	32 83       	std	Z+2, r19	; 0x02
   1b772:	43 83       	std	Z+3, r20	; 0x03
   1b774:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b778:	ff ef       	ldi	r31, 0xFF	; 255
   1b77a:	2f 1a       	sub	r2, r31
   1b77c:	3f 0a       	sbc	r3, r31
   1b77e:	9c cf       	rjmp	.-200    	; 0x1b6b8 <lif_extract_lif_as_lif+0x170>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b780:	c4 01       	movw	r24, r8
   1b782:	0e 94 a6 ca 	call	0x1954c	; 0x1954c <lif_close_volume>
   1b786:	c7 01       	movw	r24, r14
   1b788:	0e 94 a6 ca 	call	0x1954c	; 0x1954c <lif_close_volume>
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
    }
    lif_closedir(LIF);
    lif_closedir(ULIF);
    printf("\tWrote: %8ld\n", bytes);
   1b78c:	ed b7       	in	r30, 0x3d	; 61
   1b78e:	fe b7       	in	r31, 0x3e	; 62
   1b790:	44 82       	std	Z+4, r4	; 0x04
   1b792:	55 82       	std	Z+5, r5	; 0x05
   1b794:	66 82       	std	Z+6, r6	; 0x06
   1b796:	77 82       	std	Z+7, r7	; 0x07
   1b798:	83 ee       	ldi	r24, 0xE3	; 227
   1b79a:	95 e3       	ldi	r25, 0x35	; 53
   1b79c:	a0 e0       	ldi	r26, 0x00	; 0
   1b79e:	81 83       	std	Z+1, r24	; 0x01
   1b7a0:	92 83       	std	Z+2, r25	; 0x02
   1b7a2:	a3 83       	std	Z+3, r26	; 0x03
   1b7a4:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    return(1);
   1b7a8:	01 e0       	ldi	r16, 0x01	; 1
   1b7aa:	10 e0       	ldi	r17, 0x00	; 0
}
   1b7ac:	c8 01       	movw	r24, r16
   1b7ae:	cc 5e       	subi	r28, 0xEC	; 236
   1b7b0:	de 4f       	sbci	r29, 0xFE	; 254
   1b7b2:	e2 e1       	ldi	r30, 0x12	; 18
   1b7b4:	0c 94 1b e7 	jmp	0x1ce36	; 0x1ce36 <__epilogue_restores__>

0001b7b8 <lif_add_lif_file>:
/// @param[in] lifname: LIF file name to copy file to
/// @param[in] userfile: LIF mage name copy file from
/// @return size of data written into to LIF image, or -1 on error
MEMSPACE
long lif_add_lif_file(char *lifimagename, char *lifname, char *userfile)
{
   1b7b8:	2f 92       	push	r2
   1b7ba:	3f 92       	push	r3
   1b7bc:	4f 92       	push	r4
   1b7be:	5f 92       	push	r5
   1b7c0:	6f 92       	push	r6
   1b7c2:	8f 92       	push	r8
   1b7c4:	9f 92       	push	r9
   1b7c6:	af 92       	push	r10
   1b7c8:	bf 92       	push	r11
   1b7ca:	cf 92       	push	r12
   1b7cc:	df 92       	push	r13
   1b7ce:	ef 92       	push	r14
   1b7d0:	ff 92       	push	r15
   1b7d2:	0f 93       	push	r16
   1b7d4:	1f 93       	push	r17
   1b7d6:	cf 93       	push	r28
   1b7d8:	df 93       	push	r29
   1b7da:	cd b7       	in	r28, 0x3d	; 61
   1b7dc:	de b7       	in	r29, 0x3e	; 62
   1b7de:	cd 51       	subi	r28, 0x1D	; 29
   1b7e0:	d1 40       	sbci	r29, 0x01	; 1
   1b7e2:	0f b6       	in	r0, 0x3f	; 63
   1b7e4:	f8 94       	cli
   1b7e6:	de bf       	out	0x3e, r29	; 62
   1b7e8:	0f be       	out	0x3f, r0	; 63
   1b7ea:	cd bf       	out	0x3d, r28	; 61
   1b7ec:	5c 01       	movw	r10, r24
   1b7ee:	7b 01       	movw	r14, r22
   1b7f0:	4a 01       	movw	r8, r20
    long offset, uoffset, start, bytes;
    int i, size;

    uint8_t buf[LIF_SECTOR_SIZE+4];

    if(!*lifimagename)
   1b7f2:	dc 01       	movw	r26, r24
   1b7f4:	8c 91       	ld	r24, X
   1b7f6:	81 11       	cpse	r24, r1
   1b7f8:	03 c0       	rjmp	.+6      	; 0x1b800 <lif_add_lif_file+0x48>
    {
        printf("lif_add: lifimagename is empty\n");
   1b7fa:	83 ec       	ldi	r24, 0xC3	; 195
   1b7fc:	95 e3       	ldi	r25, 0x35	; 53
   1b7fe:	06 c0       	rjmp	.+12     	; 0x1b80c <lif_add_lif_file+0x54>
        return(-1);
    }
    if(!*lifname)
   1b800:	db 01       	movw	r26, r22
   1b802:	8c 91       	ld	r24, X
   1b804:	81 11       	cpse	r24, r1
   1b806:	0b c0       	rjmp	.+22     	; 0x1b81e <lif_add_lif_file+0x66>
    {
        printf("lif_add: lifname is empty\n");
   1b808:	88 ea       	ldi	r24, 0xA8	; 168
   1b80a:	95 e3       	ldi	r25, 0x35	; 53
   1b80c:	a0 e0       	ldi	r26, 0x00	; 0
   1b80e:	ed b7       	in	r30, 0x3d	; 61
   1b810:	fe b7       	in	r31, 0x3e	; 62
   1b812:	81 83       	std	Z+1, r24	; 0x01
   1b814:	92 83       	std	Z+2, r25	; 0x02
   1b816:	a3 83       	std	Z+3, r26	; 0x03
   1b818:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   1b81c:	25 c1       	rjmp	.+586    	; 0x1ba68 <lif_add_lif_file+0x2b0>
        return(-1);
    }
    if(!*userfile)
   1b81e:	da 01       	movw	r26, r20
   1b820:	8c 91       	ld	r24, X
   1b822:	81 11       	cpse	r24, r1
   1b824:	03 c0       	rjmp	.+6      	; 0x1b82c <lif_add_lif_file+0x74>
    {
        printf("lif_add: userfile is empty\n");
   1b826:	8c e8       	ldi	r24, 0x8C	; 140
   1b828:	95 e3       	ldi	r25, 0x35	; 53
   1b82a:	f0 cf       	rjmp	.-32     	; 0x1b80c <lif_add_lif_file+0x54>
        return(-1);
    }

    if(debuglevel & LIF_DEBUG)
   1b82c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1b830:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1b834:	92 ff       	sbrs	r25, 2
   1b836:	10 c0       	rjmp	.+32     	; 0x1b858 <lif_add_lif_file+0xa0>
        printf("LIF image:[%s], LIF name:[%s], user file:[%s]\n",
   1b838:	ed b7       	in	r30, 0x3d	; 61
   1b83a:	fe b7       	in	r31, 0x3e	; 62
   1b83c:	51 87       	std	Z+9, r21	; 0x09
   1b83e:	40 87       	std	Z+8, r20	; 0x08
   1b840:	77 83       	std	Z+7, r23	; 0x07
   1b842:	66 83       	std	Z+6, r22	; 0x06
   1b844:	b5 82       	std	Z+5, r11	; 0x05
   1b846:	a4 82       	std	Z+4, r10	; 0x04
   1b848:	8d e5       	ldi	r24, 0x5D	; 93
   1b84a:	95 e3       	ldi	r25, 0x35	; 53
   1b84c:	a0 e0       	ldi	r26, 0x00	; 0
   1b84e:	81 83       	std	Z+1, r24	; 0x01
   1b850:	92 83       	std	Z+2, r25	; 0x02
   1b852:	a3 83       	std	Z+3, r26	; 0x03
   1b854:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
            lifimagename, lifname, userfile);

// open  userfile as LIF image
    ULIF = lif_open_volume(userfile,"rb+");
   1b858:	68 e0       	ldi	r22, 0x08	; 8
   1b85a:	79 e0       	ldi	r23, 0x09	; 9
   1b85c:	c4 01       	movw	r24, r8
   1b85e:	0e 94 63 d1 	call	0x1a2c6	; 0x1a2c6 <lif_open_volume>
   1b862:	6c 01       	movw	r12, r24
    if(ULIF == NULL)
   1b864:	00 97       	sbiw	r24, 0x00	; 0
   1b866:	09 f4       	brne	.+2      	; 0x1b86a <lif_add_lif_file+0xb2>
   1b868:	ff c0       	rjmp	.+510    	; 0x1ba68 <lif_add_lif_file+0x2b0>
        return(-1);

// find lif file in user image
    index = lif_find_file(ULIF, lifname);
   1b86a:	b7 01       	movw	r22, r14
   1b86c:	01 d8       	rcall	.-4094   	; 0x1a870 <lif_find_file>
    if(index == -1)
   1b86e:	01 96       	adiw	r24, 0x01	; 1
   1b870:	a1 f4       	brne	.+40     	; 0x1b89a <lif_add_lif_file+0xe2>
    {
        printf("File not found:%s\n", lifname);
   1b872:	ed b7       	in	r30, 0x3d	; 61
   1b874:	fe b7       	in	r31, 0x3e	; 62
   1b876:	f5 82       	std	Z+5, r15	; 0x05
   1b878:	e4 82       	std	Z+4, r14	; 0x04
   1b87a:	8a e4       	ldi	r24, 0x4A	; 74
   1b87c:	95 e3       	ldi	r25, 0x35	; 53
   1b87e:	a0 e0       	ldi	r26, 0x00	; 0
   1b880:	81 83       	std	Z+1, r24	; 0x01
   1b882:	92 83       	std	Z+2, r25	; 0x02
   1b884:	a3 83       	std	Z+3, r26	; 0x03
   1b886:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b88a:	c6 01       	movw	r24, r12
   1b88c:	0e 94 a6 ca 	call	0x1954c	; 0x1954c <lif_close_volume>
    index = lif_find_file(ULIF, lifname);
    if(index == -1)
    {
        printf("File not found:%s\n", lifname);
        lif_closedir(ULIF);
        return(0);
   1b890:	60 e0       	ldi	r22, 0x00	; 0
   1b892:	70 e0       	ldi	r23, 0x00	; 0
   1b894:	80 e0       	ldi	r24, 0x00	; 0
   1b896:	90 e0       	ldi	r25, 0x00	; 0
   1b898:	ff c0       	rjmp	.+510    	; 0x1ba98 <lif_add_lif_file+0x2e0>
    }

    LIF = lif_open_volume(lifimagename,"rb+");
   1b89a:	68 e0       	ldi	r22, 0x08	; 8
   1b89c:	79 e0       	ldi	r23, 0x09	; 9
   1b89e:	c5 01       	movw	r24, r10
   1b8a0:	0e 94 63 d1 	call	0x1a2c6	; 0x1a2c6 <lif_open_volume>
   1b8a4:	7c 01       	movw	r14, r24
    if(LIF == NULL)
   1b8a6:	00 97       	sbiw	r24, 0x00	; 0
   1b8a8:	09 f4       	brne	.+2      	; 0x1b8ac <lif_add_lif_file+0xf4>
   1b8aa:	de c0       	rjmp	.+444    	; 0x1ba68 <lif_add_lif_file+0x2b0>
        return(-1);

// Now find a new free record that is big enough
    index = lif_newdir(LIF, ULIF->DIR.FileSectors);
   1b8ac:	f6 01       	movw	r30, r12
   1b8ae:	e0 5a       	subi	r30, 0xA0	; 160
   1b8b0:	ff 4f       	sbci	r31, 0xFF	; 255
   1b8b2:	40 81       	ld	r20, Z
   1b8b4:	51 81       	ldd	r21, Z+1	; 0x01
   1b8b6:	62 81       	ldd	r22, Z+2	; 0x02
   1b8b8:	73 81       	ldd	r23, Z+3	; 0x03
   1b8ba:	0e 94 03 d0 	call	0x1a006	; 0x1a006 <lif_newdir>
   1b8be:	ca 5e       	subi	r28, 0xEA	; 234
   1b8c0:	de 4f       	sbci	r29, 0xFE	; 254
   1b8c2:	99 83       	std	Y+1, r25	; 0x01
   1b8c4:	88 83       	st	Y, r24
   1b8c6:	c6 51       	subi	r28, 0x16	; 22
   1b8c8:	d1 40       	sbci	r29, 0x01	; 1
    if(index == -1)
   1b8ca:	01 96       	adiw	r24, 0x01	; 1
   1b8cc:	79 f4       	brne	.+30     	; 0x1b8ec <lif_add_lif_file+0x134>
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n",
   1b8ce:	ed b7       	in	r30, 0x3d	; 61
   1b8d0:	fe b7       	in	r31, 0x3e	; 62
   1b8d2:	97 82       	std	Z+7, r9	; 0x07
   1b8d4:	86 82       	std	Z+6, r8	; 0x06
   1b8d6:	b5 82       	std	Z+5, r11	; 0x05
   1b8d8:	a4 82       	std	Z+4, r10	; 0x04
   1b8da:	8a e1       	ldi	r24, 0x1A	; 26
   1b8dc:	95 e3       	ldi	r25, 0x35	; 53
   1b8de:	a0 e0       	ldi	r26, 0x00	; 0
   1b8e0:	81 83       	std	Z+1, r24	; 0x01
   1b8e2:	92 83       	std	Z+2, r25	; 0x02
   1b8e4:	a3 83       	std	Z+3, r26	; 0x03
   1b8e6:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   1b8ea:	a8 c0       	rjmp	.+336    	; 0x1ba3c <lif_add_lif_file+0x284>
        lif_closedir(ULIF);
        return(-1);
    }

// Save start sector
    start = LIF->DIR.FileStartSector;
   1b8ec:	c7 01       	movw	r24, r14
   1b8ee:	84 5a       	subi	r24, 0xA4	; 164
   1b8f0:	9f 4f       	sbci	r25, 0xFF	; 255
   1b8f2:	dc 01       	movw	r26, r24
   1b8f4:	4d 91       	ld	r20, X+
   1b8f6:	5d 91       	ld	r21, X+
   1b8f8:	6d 91       	ld	r22, X+
   1b8fa:	7c 91       	ld	r23, X
   1b8fc:	13 97       	sbiw	r26, 0x03	; 3

// Copy user image directory record to master image directory record
    LIF->DIR = ULIF->DIR;
   1b8fe:	21 e2       	ldi	r18, 0x21	; 33
   1b900:	f6 01       	movw	r30, r12
   1b902:	e1 5b       	subi	r30, 0xB1	; 177
   1b904:	ff 4f       	sbci	r31, 0xFF	; 255
   1b906:	1d 97       	sbiw	r26, 0x0d	; 13
   1b908:	01 90       	ld	r0, Z+
   1b90a:	0d 92       	st	X+, r0
   1b90c:	2a 95       	dec	r18
   1b90e:	e1 f7       	brne	.-8      	; 0x1b908 <lif_add_lif_file+0x150>

// Restore FileStartSector
    LIF->DIR.FileStartSector = start;
   1b910:	fc 01       	movw	r30, r24
   1b912:	40 83       	st	Z, r20
   1b914:	51 83       	std	Z+1, r21	; 0x01
   1b916:	62 83       	std	Z+2, r22	; 0x02
   1b918:	73 83       	std	Z+3, r23	; 0x03

// Master lif image file start in bytes
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1b91a:	b6 2f       	mov	r27, r22
   1b91c:	a5 2f       	mov	r26, r21
   1b91e:	94 2f       	mov	r25, r20
   1b920:	88 27       	eor	r24, r24
   1b922:	c2 5f       	subi	r28, 0xF2	; 242
   1b924:	de 4f       	sbci	r29, 0xFE	; 254
   1b926:	88 83       	st	Y, r24
   1b928:	99 83       	std	Y+1, r25	; 0x01
   1b92a:	aa 83       	std	Y+2, r26	; 0x02
   1b92c:	bb 83       	std	Y+3, r27	; 0x03
   1b92e:	ce 50       	subi	r28, 0x0E	; 14
   1b930:	d1 40       	sbci	r29, 0x01	; 1
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1b932:	f6 01       	movw	r30, r12
   1b934:	e4 5a       	subi	r30, 0xA4	; 164
   1b936:	ff 4f       	sbci	r31, 0xFF	; 255
   1b938:	80 81       	ld	r24, Z
   1b93a:	91 81       	ldd	r25, Z+1	; 0x01
   1b93c:	a2 81       	ldd	r26, Z+2	; 0x02
   1b93e:	b3 81       	ldd	r27, Z+3	; 0x03
   1b940:	22 27       	eor	r18, r18
   1b942:	38 2f       	mov	r19, r24
   1b944:	49 2f       	mov	r20, r25
   1b946:	5a 2f       	mov	r21, r26
   1b948:	ce 5e       	subi	r28, 0xEE	; 238
   1b94a:	de 4f       	sbci	r29, 0xFE	; 254
   1b94c:	28 83       	st	Y, r18
   1b94e:	39 83       	std	Y+1, r19	; 0x01
   1b950:	4a 83       	std	Y+2, r20	; 0x02
   1b952:	5b 83       	std	Y+3, r21	; 0x03
   1b954:	c2 51       	subi	r28, 0x12	; 18
   1b956:	d1 40       	sbci	r29, 0x01	; 1
    bytes = 0;
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b958:	21 2c       	mov	r2, r1
   1b95a:	31 2c       	mov	r3, r1

// Master lif image file start in bytes
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
   1b95c:	81 2c       	mov	r8, r1
   1b95e:	91 2c       	mov	r9, r1
   1b960:	54 01       	movw	r10, r8
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b962:	a7 01       	movw	r20, r14
   1b964:	40 5a       	subi	r20, 0xA0	; 160
   1b966:	5f 4f       	sbci	r21, 0xFF	; 255
   1b968:	c4 5e       	subi	r28, 0xE4	; 228
   1b96a:	de 4f       	sbci	r29, 0xFE	; 254
   1b96c:	59 83       	std	Y+1, r21	; 0x01
   1b96e:	48 83       	st	Y, r20
   1b970:	cc 51       	subi	r28, 0x1C	; 28
   1b972:	d1 40       	sbci	r29, 0x01	; 1
            return(-1);
        }
        offset += (long) LIF_SECTOR_SIZE;
        uoffset += (long) LIF_SECTOR_SIZE;
        bytes += (long) LIF_SECTOR_SIZE;
        printf("\tWrote: %8ld\r", bytes);
   1b974:	8c e0       	ldi	r24, 0x0C	; 12
   1b976:	95 e3       	ldi	r25, 0x35	; 53
   1b978:	2c 01       	movw	r4, r24
   1b97a:	61 2c       	mov	r6, r1
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b97c:	27 c0       	rjmp	.+78     	; 0x1b9cc <lif_add_lif_file+0x214>
            lif_closedir(ULIF);
            return(-1);
        }

// Write
        size = lif_write(LIF, buf, offset, LIF_SECTOR_SIZE);
   1b97e:	00 e0       	ldi	r16, 0x00	; 0
   1b980:	11 e0       	ldi	r17, 0x01	; 1
   1b982:	c8 5e       	subi	r28, 0xE8	; 232
   1b984:	de 4f       	sbci	r29, 0xFE	; 254
   1b986:	28 81       	ld	r18, Y
   1b988:	39 81       	ldd	r19, Y+1	; 0x01
   1b98a:	4a 81       	ldd	r20, Y+2	; 0x02
   1b98c:	5b 81       	ldd	r21, Y+3	; 0x03
   1b98e:	c8 51       	subi	r28, 0x18	; 24
   1b990:	d1 40       	sbci	r29, 0x01	; 1
   1b992:	be 01       	movw	r22, r28
   1b994:	66 5f       	subi	r22, 0xF6	; 246
   1b996:	7f 4f       	sbci	r23, 0xFF	; 255
   1b998:	c7 01       	movw	r24, r14
   1b99a:	0e 94 2d c2 	call	0x1845a	; 0x1845a <lif_write>
        if(size < LIF_SECTOR_SIZE)
   1b99e:	8f 3f       	cpi	r24, 0xFF	; 255
   1b9a0:	91 05       	cpc	r25, r1
   1b9a2:	09 f0       	breq	.+2      	; 0x1b9a6 <lif_add_lif_file+0x1ee>
   1b9a4:	0c f4       	brge	.+2      	; 0x1b9a8 <lif_add_lif_file+0x1f0>
   1b9a6:	4a c0       	rjmp	.+148    	; 0x1ba3c <lif_add_lif_file+0x284>
            lif_closedir(ULIF);
            return(-1);
        }
        offset += (long) LIF_SECTOR_SIZE;
        uoffset += (long) LIF_SECTOR_SIZE;
        bytes += (long) LIF_SECTOR_SIZE;
   1b9a8:	5f ef       	ldi	r21, 0xFF	; 255
   1b9aa:	95 1a       	sub	r9, r21
   1b9ac:	a5 0a       	sbc	r10, r21
   1b9ae:	b5 0a       	sbc	r11, r21
        printf("\tWrote: %8ld\r", bytes);
   1b9b0:	ed b7       	in	r30, 0x3d	; 61
   1b9b2:	fe b7       	in	r31, 0x3e	; 62
   1b9b4:	84 82       	std	Z+4, r8	; 0x04
   1b9b6:	95 82       	std	Z+5, r9	; 0x05
   1b9b8:	a6 82       	std	Z+6, r10	; 0x06
   1b9ba:	b7 82       	std	Z+7, r11	; 0x07
   1b9bc:	41 82       	std	Z+1, r4	; 0x01
   1b9be:	52 82       	std	Z+2, r5	; 0x02
   1b9c0:	63 82       	std	Z+3, r6	; 0x03
   1b9c2:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b9c6:	ff ef       	ldi	r31, 0xFF	; 255
   1b9c8:	2f 1a       	sub	r2, r31
   1b9ca:	3f 0a       	sbc	r3, r31
   1b9cc:	ce 5e       	subi	r28, 0xEE	; 238
   1b9ce:	de 4f       	sbci	r29, 0xFE	; 254
   1b9d0:	28 81       	ld	r18, Y
   1b9d2:	39 81       	ldd	r19, Y+1	; 0x01
   1b9d4:	4a 81       	ldd	r20, Y+2	; 0x02
   1b9d6:	5b 81       	ldd	r21, Y+3	; 0x03
   1b9d8:	c2 51       	subi	r28, 0x12	; 18
   1b9da:	d1 40       	sbci	r29, 0x01	; 1
   1b9dc:	28 0d       	add	r18, r8
   1b9de:	39 1d       	adc	r19, r9
   1b9e0:	4a 1d       	adc	r20, r10
   1b9e2:	5b 1d       	adc	r21, r11
   1b9e4:	c2 5f       	subi	r28, 0xF2	; 242
   1b9e6:	de 4f       	sbci	r29, 0xFE	; 254
   1b9e8:	88 81       	ld	r24, Y
   1b9ea:	99 81       	ldd	r25, Y+1	; 0x01
   1b9ec:	aa 81       	ldd	r26, Y+2	; 0x02
   1b9ee:	bb 81       	ldd	r27, Y+3	; 0x03
   1b9f0:	ce 50       	subi	r28, 0x0E	; 14
   1b9f2:	d1 40       	sbci	r29, 0x01	; 1
   1b9f4:	88 0d       	add	r24, r8
   1b9f6:	99 1d       	adc	r25, r9
   1b9f8:	aa 1d       	adc	r26, r10
   1b9fa:	bb 1d       	adc	r27, r11
   1b9fc:	c8 5e       	subi	r28, 0xE8	; 232
   1b9fe:	de 4f       	sbci	r29, 0xFE	; 254
   1ba00:	88 83       	st	Y, r24
   1ba02:	99 83       	std	Y+1, r25	; 0x01
   1ba04:	aa 83       	std	Y+2, r26	; 0x02
   1ba06:	bb 83       	std	Y+3, r27	; 0x03
   1ba08:	c8 51       	subi	r28, 0x18	; 24
   1ba0a:	d1 40       	sbci	r29, 0x01	; 1
   1ba0c:	c4 5e       	subi	r28, 0xE4	; 228
   1ba0e:	de 4f       	sbci	r29, 0xFE	; 254
   1ba10:	a8 81       	ld	r26, Y
   1ba12:	b9 81       	ldd	r27, Y+1	; 0x01
   1ba14:	cc 51       	subi	r28, 0x1C	; 28
   1ba16:	d1 40       	sbci	r29, 0x01	; 1
   1ba18:	8d 91       	ld	r24, X+
   1ba1a:	9c 91       	ld	r25, X
   1ba1c:	28 16       	cp	r2, r24
   1ba1e:	39 06       	cpc	r3, r25
   1ba20:	94 f4       	brge	.+36     	; 0x1ba46 <lif_add_lif_file+0x28e>
    {
// Read
        size = lif_read(ULIF, buf, uoffset, LIF_SECTOR_SIZE);
   1ba22:	00 e0       	ldi	r16, 0x00	; 0
   1ba24:	11 e0       	ldi	r17, 0x01	; 1
   1ba26:	be 01       	movw	r22, r28
   1ba28:	66 5f       	subi	r22, 0xF6	; 246
   1ba2a:	7f 4f       	sbci	r23, 0xFF	; 255
   1ba2c:	c6 01       	movw	r24, r12
   1ba2e:	0e 94 da c1 	call	0x183b4	; 0x183b4 <lif_read>
        if(size < LIF_SECTOR_SIZE)
   1ba32:	6f 3f       	cpi	r22, 0xFF	; 255
   1ba34:	71 05       	cpc	r23, r1
   1ba36:	11 f0       	breq	.+4      	; 0x1ba3c <lif_add_lif_file+0x284>
   1ba38:	0c f0       	brlt	.+2      	; 0x1ba3c <lif_add_lif_file+0x284>
   1ba3a:	a1 cf       	rjmp	.-190    	; 0x1b97e <lif_add_lif_file+0x1c6>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1ba3c:	c7 01       	movw	r24, r14
   1ba3e:	0e 94 a6 ca 	call	0x1954c	; 0x1954c <lif_close_volume>
   1ba42:	c6 01       	movw	r24, r12
   1ba44:	0f c0       	rjmp	.+30     	; 0x1ba64 <lif_add_lif_file+0x2ac>
   1ba46:	c6 01       	movw	r24, r12
   1ba48:	0e 94 a6 ca 	call	0x1954c	; 0x1954c <lif_close_volume>
        printf("\tWrote: %8ld\r", bytes);
    }
    lif_closedir(ULIF);

// Write directory record
    if( !lif_writedirindex(LIF,index))
   1ba4c:	ca 5e       	subi	r28, 0xEA	; 234
   1ba4e:	de 4f       	sbci	r29, 0xFE	; 254
   1ba50:	68 81       	ld	r22, Y
   1ba52:	79 81       	ldd	r23, Y+1	; 0x01
   1ba54:	c6 51       	subi	r28, 0x16	; 22
   1ba56:	d1 40       	sbci	r29, 0x01	; 1
   1ba58:	c7 01       	movw	r24, r14
   1ba5a:	0e 94 9b cb 	call	0x19736	; 0x19736 <lif_writedirindex>
   1ba5e:	89 2b       	or	r24, r25
   1ba60:	41 f4       	brne	.+16     	; 0x1ba72 <lif_add_lif_file+0x2ba>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1ba62:	c7 01       	movw	r24, r14
   1ba64:	0e 94 a6 ca 	call	0x1954c	; 0x1954c <lif_close_volume>

// Write directory record
    if( !lif_writedirindex(LIF,index))
    {
        lif_closedir(LIF);
        return(-1);
   1ba68:	6f ef       	ldi	r22, 0xFF	; 255
   1ba6a:	7f ef       	ldi	r23, 0xFF	; 255
   1ba6c:	8f ef       	ldi	r24, 0xFF	; 255
   1ba6e:	9f ef       	ldi	r25, 0xFF	; 255
   1ba70:	13 c0       	rjmp	.+38     	; 0x1ba98 <lif_add_lif_file+0x2e0>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1ba72:	c7 01       	movw	r24, r14
   1ba74:	0e 94 a6 ca 	call	0x1954c	; 0x1954c <lif_close_volume>
    {
        lif_closedir(LIF);
        return(-1);
    }
    lif_closedir(LIF);
    printf("\tWrote: %8ld\n", bytes);
   1ba78:	ed b7       	in	r30, 0x3d	; 61
   1ba7a:	fe b7       	in	r31, 0x3e	; 62
   1ba7c:	84 82       	std	Z+4, r8	; 0x04
   1ba7e:	95 82       	std	Z+5, r9	; 0x05
   1ba80:	a6 82       	std	Z+6, r10	; 0x06
   1ba82:	b7 82       	std	Z+7, r11	; 0x07
   1ba84:	8e ef       	ldi	r24, 0xFE	; 254
   1ba86:	94 e3       	ldi	r25, 0x34	; 52
   1ba88:	a0 e0       	ldi	r26, 0x00	; 0
   1ba8a:	81 83       	std	Z+1, r24	; 0x01
   1ba8c:	92 83       	std	Z+2, r25	; 0x02
   1ba8e:	a3 83       	std	Z+3, r26	; 0x03
   1ba90:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    return(bytes);
   1ba94:	b4 01       	movw	r22, r8
   1ba96:	c5 01       	movw	r24, r10
}
   1ba98:	c3 5e       	subi	r28, 0xE3	; 227
   1ba9a:	de 4f       	sbci	r29, 0xFE	; 254
   1ba9c:	0f b6       	in	r0, 0x3f	; 63
   1ba9e:	f8 94       	cli
   1baa0:	de bf       	out	0x3e, r29	; 62
   1baa2:	0f be       	out	0x3f, r0	; 63
   1baa4:	cd bf       	out	0x3d, r28	; 61
   1baa6:	df 91       	pop	r29
   1baa8:	cf 91       	pop	r28
   1baaa:	1f 91       	pop	r17
   1baac:	0f 91       	pop	r16
   1baae:	ff 90       	pop	r15
   1bab0:	ef 90       	pop	r14
   1bab2:	df 90       	pop	r13
   1bab4:	cf 90       	pop	r12
   1bab6:	bf 90       	pop	r11
   1bab8:	af 90       	pop	r10
   1baba:	9f 90       	pop	r9
   1babc:	8f 90       	pop	r8
   1babe:	6f 90       	pop	r6
   1bac0:	5f 90       	pop	r5
   1bac2:	4f 90       	pop	r4
   1bac4:	3f 90       	pop	r3
   1bac6:	2f 90       	pop	r2
   1bac8:	08 95       	ret

0001baca <lif_del_file>:
/// @param[in] lifimagename: LIF image name
/// @param[in] lifname: LIF file name
/// @return 1 if deleted, 0 if not found, -1 error
MEMSPACE
int lif_del_file(char *lifimagename, char *lifname)
{
   1baca:	ef 92       	push	r14
   1bacc:	ff 92       	push	r15
   1bace:	0f 93       	push	r16
   1bad0:	1f 93       	push	r17
   1bad2:	cf 93       	push	r28
   1bad4:	df 93       	push	r29
   1bad6:	ad b7       	in	r26, 0x3d	; 61
   1bad8:	be b7       	in	r27, 0x3e	; 62
   1bada:	17 97       	sbiw	r26, 0x07	; 7
   1badc:	0f b6       	in	r0, 0x3f	; 63
   1bade:	f8 94       	cli
   1bae0:	be bf       	out	0x3e, r27	; 62
   1bae2:	0f be       	out	0x3f, r0	; 63
   1bae4:	ad bf       	out	0x3d, r26	; 61
   1bae6:	7c 01       	movw	r14, r24
   1bae8:	8b 01       	movw	r16, r22
    lif_t *LIF;
    int index;

    if(!*lifimagename)
   1baea:	fc 01       	movw	r30, r24
   1baec:	80 81       	ld	r24, Z
   1baee:	81 11       	cpse	r24, r1
   1baf0:	03 c0       	rjmp	.+6      	; 0x1baf8 <lif_del_file+0x2e>
    {
        printf("lif_del_file: lifimagename is empty\n");
   1baf2:	89 ed       	ldi	r24, 0xD9	; 217
   1baf4:	94 e3       	ldi	r25, 0x34	; 52
   1baf6:	06 c0       	rjmp	.+12     	; 0x1bb04 <lif_del_file+0x3a>
        return(-1);
    }
    if(!*lifname)
   1baf8:	fb 01       	movw	r30, r22
   1bafa:	80 81       	ld	r24, Z
   1bafc:	81 11       	cpse	r24, r1
   1bafe:	0b c0       	rjmp	.+22     	; 0x1bb16 <lif_del_file+0x4c>
    {
        printf("lif_del_file: lifname is empty\n");
   1bb00:	89 eb       	ldi	r24, 0xB9	; 185
   1bb02:	94 e3       	ldi	r25, 0x34	; 52
   1bb04:	a0 e0       	ldi	r26, 0x00	; 0
   1bb06:	ed b7       	in	r30, 0x3d	; 61
   1bb08:	fe b7       	in	r31, 0x3e	; 62
   1bb0a:	81 83       	std	Z+1, r24	; 0x01
   1bb0c:	92 83       	std	Z+2, r25	; 0x02
   1bb0e:	a3 83       	std	Z+3, r26	; 0x03
   1bb10:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   1bb14:	68 c0       	rjmp	.+208    	; 0x1bbe6 <lif_del_file+0x11c>
        return(-1);
    }
    if(debuglevel & LIF_DEBUG)
   1bb16:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1bb1a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1bb1e:	92 ff       	sbrs	r25, 2
   1bb20:	0e c0       	rjmp	.+28     	; 0x1bb3e <lif_del_file+0x74>
        printf("LIF image:[%s], LIF name:[%s]\n",
   1bb22:	ed b7       	in	r30, 0x3d	; 61
   1bb24:	fe b7       	in	r31, 0x3e	; 62
   1bb26:	77 83       	std	Z+7, r23	; 0x07
   1bb28:	66 83       	std	Z+6, r22	; 0x06
   1bb2a:	f5 82       	std	Z+5, r15	; 0x05
   1bb2c:	e4 82       	std	Z+4, r14	; 0x04
   1bb2e:	8a e9       	ldi	r24, 0x9A	; 154
   1bb30:	94 e3       	ldi	r25, 0x34	; 52
   1bb32:	a0 e0       	ldi	r26, 0x00	; 0
   1bb34:	81 83       	std	Z+1, r24	; 0x01
   1bb36:	92 83       	std	Z+2, r25	; 0x02
   1bb38:	a3 83       	std	Z+3, r26	; 0x03
   1bb3a:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
            lifimagename, lifname);

    LIF = lif_open_volume(lifimagename,"rb+");
   1bb3e:	68 e0       	ldi	r22, 0x08	; 8
   1bb40:	79 e0       	ldi	r23, 0x09	; 9
   1bb42:	c7 01       	movw	r24, r14
   1bb44:	0e 94 63 d1 	call	0x1a2c6	; 0x1a2c6 <lif_open_volume>
   1bb48:	ec 01       	movw	r28, r24
    if(LIF == NULL)
   1bb4a:	00 97       	sbiw	r24, 0x00	; 0
   1bb4c:	09 f4       	brne	.+2      	; 0x1bb50 <lif_del_file+0x86>
   1bb4e:	4b c0       	rjmp	.+150    	; 0x1bbe6 <lif_del_file+0x11c>
        return(-1);

// Now find file record
    index = lif_find_file(LIF, lifname);
   1bb50:	b8 01       	movw	r22, r16
   1bb52:	0e 94 38 d4 	call	0x1a870	; 0x1a870 <lif_find_file>
    if(index == -1)
   1bb56:	8f 3f       	cpi	r24, 0xFF	; 255
   1bb58:	ff ef       	ldi	r31, 0xFF	; 255
   1bb5a:	9f 07       	cpc	r25, r31
   1bb5c:	a1 f4       	brne	.+40     	; 0x1bb86 <lif_del_file+0xbc>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bb5e:	ce 01       	movw	r24, r28
   1bb60:	0e 94 a6 ca 	call	0x1954c	; 0x1954c <lif_close_volume>
// Now find file record
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        lif_closedir(LIF);
        printf("LIF image:[%s] lif name:[%s] not found\n", lifimagename, lifname);
   1bb64:	ed b7       	in	r30, 0x3d	; 61
   1bb66:	fe b7       	in	r31, 0x3e	; 62
   1bb68:	17 83       	std	Z+7, r17	; 0x07
   1bb6a:	06 83       	std	Z+6, r16	; 0x06
   1bb6c:	f5 82       	std	Z+5, r15	; 0x05
   1bb6e:	e4 82       	std	Z+4, r14	; 0x04
   1bb70:	82 e7       	ldi	r24, 0x72	; 114
   1bb72:	94 e3       	ldi	r25, 0x34	; 52
   1bb74:	a0 e0       	ldi	r26, 0x00	; 0
   1bb76:	81 83       	std	Z+1, r24	; 0x01
   1bb78:	92 83       	std	Z+2, r25	; 0x02
   1bb7a:	a3 83       	std	Z+3, r26	; 0x03
   1bb7c:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
        return(0);
   1bb80:	80 e0       	ldi	r24, 0x00	; 0
   1bb82:	90 e0       	ldi	r25, 0x00	; 0
   1bb84:	32 c0       	rjmp	.+100    	; 0x1bbea <lif_del_file+0x120>
    }

// IF the next record is EOF then update EOF
    if(index >= LIF->EOFindex-1)
   1bb86:	2a a1       	ldd	r18, Y+34	; 0x22
   1bb88:	3b a1       	ldd	r19, Y+35	; 0x23
   1bb8a:	21 50       	subi	r18, 0x01	; 1
   1bb8c:	31 09       	sbc	r19, r1
   1bb8e:	fe 01       	movw	r30, r28
   1bb90:	e6 5a       	subi	r30, 0xA6	; 166
   1bb92:	ff 4f       	sbci	r31, 0xFF	; 255
   1bb94:	82 17       	cp	r24, r18
   1bb96:	93 07       	cpc	r25, r19
   1bb98:	2c f0       	brlt	.+10     	; 0x1bba4 <lif_del_file+0xda>
        LIF->DIR.FileType = 0xffff;
   1bb9a:	2f ef       	ldi	r18, 0xFF	; 255
   1bb9c:	3f ef       	ldi	r19, 0xFF	; 255
   1bb9e:	31 83       	std	Z+1, r19	; 0x01
   1bba0:	20 83       	st	Z, r18
   1bba2:	02 c0       	rjmp	.+4      	; 0x1bba8 <lif_del_file+0xde>
    else
        LIF->DIR.FileType = 0;
   1bba4:	11 82       	std	Z+1, r1	; 0x01
   1bba6:	10 82       	st	Z, r1

// re-Write directory record
    if( !lif_writedirindex(LIF,index) )
   1bba8:	bc 01       	movw	r22, r24
   1bbaa:	ce 01       	movw	r24, r28
   1bbac:	0e 94 9b cb 	call	0x19736	; 0x19736 <lif_writedirindex>
   1bbb0:	89 2b       	or	r24, r25
   1bbb2:	21 f4       	brne	.+8      	; 0x1bbbc <lif_del_file+0xf2>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bbb4:	ce 01       	movw	r24, r28
   1bbb6:	0e 94 a6 ca 	call	0x1954c	; 0x1954c <lif_close_volume>
   1bbba:	15 c0       	rjmp	.+42     	; 0x1bbe6 <lif_del_file+0x11c>
    {
        lif_closedir(LIF);
        return(-1);
    }

    lif_updatefree(LIF);
   1bbbc:	ce 01       	movw	r24, r28
   1bbbe:	0e 94 0f cc 	call	0x1981e	; 0x1981e <lif_updatefree>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bbc2:	ce 01       	movw	r24, r28
   1bbc4:	0e 94 a6 ca 	call	0x1954c	; 0x1954c <lif_close_volume>
    }

    lif_updatefree(LIF);

    lif_closedir(LIF);
    printf("Deleted: %10s\n", lifname);
   1bbc8:	ed b7       	in	r30, 0x3d	; 61
   1bbca:	fe b7       	in	r31, 0x3e	; 62
   1bbcc:	15 83       	std	Z+5, r17	; 0x05
   1bbce:	04 83       	std	Z+4, r16	; 0x04
   1bbd0:	83 e6       	ldi	r24, 0x63	; 99
   1bbd2:	94 e3       	ldi	r25, 0x34	; 52
   1bbd4:	a0 e0       	ldi	r26, 0x00	; 0
   1bbd6:	81 83       	std	Z+1, r24	; 0x01
   1bbd8:	92 83       	std	Z+2, r25	; 0x02
   1bbda:	a3 83       	std	Z+3, r26	; 0x03
   1bbdc:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>

    return(1);
   1bbe0:	81 e0       	ldi	r24, 0x01	; 1
   1bbe2:	90 e0       	ldi	r25, 0x00	; 0
   1bbe4:	02 c0       	rjmp	.+4      	; 0x1bbea <lif_del_file+0x120>
        printf("LIF image:[%s], LIF name:[%s]\n",
            lifimagename, lifname);

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return(-1);
   1bbe6:	8f ef       	ldi	r24, 0xFF	; 255
   1bbe8:	9f ef       	ldi	r25, 0xFF	; 255

    lif_closedir(LIF);
    printf("Deleted: %10s\n", lifname);

    return(1);
}
   1bbea:	cd b7       	in	r28, 0x3d	; 61
   1bbec:	de b7       	in	r29, 0x3e	; 62
   1bbee:	27 96       	adiw	r28, 0x07	; 7
   1bbf0:	e6 e0       	ldi	r30, 0x06	; 6
   1bbf2:	0c 94 27 e7 	jmp	0x1ce4e	; 0x1ce4e <__epilogue_restores__+0x18>

0001bbf6 <lif_rename_file>:
/// @param[in] oldlifname: old LIF file name
/// @param[in] newlifname: new LIF file name
/// @return 1 if renamed, 0 if not found, -1 error
MEMSPACE
int lif_rename_file(char *lifimagename, char *oldlifname, char *newlifname)
{
   1bbf6:	a7 e0       	ldi	r26, 0x07	; 7
   1bbf8:	b0 e0       	ldi	r27, 0x00	; 0
   1bbfa:	e1 e0       	ldi	r30, 0x01	; 1
   1bbfc:	fe ed       	ldi	r31, 0xDE	; 222
   1bbfe:	0c 94 07 e7 	jmp	0x1ce0e	; 0x1ce0e <__prologue_saves__+0x10>
   1bc02:	6c 01       	movw	r12, r24
   1bc04:	8b 01       	movw	r16, r22
   1bc06:	7a 01       	movw	r14, r20
    int index;
    lif_t *LIF;

    if(!*lifimagename)
   1bc08:	fc 01       	movw	r30, r24
   1bc0a:	80 81       	ld	r24, Z
   1bc0c:	81 11       	cpse	r24, r1
   1bc0e:	03 c0       	rjmp	.+6      	; 0x1bc16 <lif_rename_file+0x20>
    {
        printf("lif_rename_file: lifimagename is empty\n");
   1bc10:	8b e3       	ldi	r24, 0x3B	; 59
   1bc12:	94 e3       	ldi	r25, 0x34	; 52
   1bc14:	06 c0       	rjmp	.+12     	; 0x1bc22 <lif_rename_file+0x2c>
        return(-1);
    }
    if(!*oldlifname)
   1bc16:	fb 01       	movw	r30, r22
   1bc18:	80 81       	ld	r24, Z
   1bc1a:	81 11       	cpse	r24, r1
   1bc1c:	0b c0       	rjmp	.+22     	; 0x1bc34 <lif_rename_file+0x3e>
    {
        printf("lif_rename_file: old lifname is empty\n");
   1bc1e:	84 e1       	ldi	r24, 0x14	; 20
   1bc20:	94 e3       	ldi	r25, 0x34	; 52
   1bc22:	a0 e0       	ldi	r26, 0x00	; 0
   1bc24:	ed b7       	in	r30, 0x3d	; 61
   1bc26:	fe b7       	in	r31, 0x3e	; 62
   1bc28:	81 83       	std	Z+1, r24	; 0x01
   1bc2a:	92 83       	std	Z+2, r25	; 0x02
   1bc2c:	a3 83       	std	Z+3, r26	; 0x03
   1bc2e:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   1bc32:	58 c0       	rjmp	.+176    	; 0x1bce4 <lif_rename_file+0xee>
        return(-1);
    }
    if(!*newlifname)
   1bc34:	fa 01       	movw	r30, r20
   1bc36:	80 81       	ld	r24, Z
   1bc38:	81 11       	cpse	r24, r1
   1bc3a:	03 c0       	rjmp	.+6      	; 0x1bc42 <lif_rename_file+0x4c>
    {
        printf("lif_rename_file: new lifname is empty\n");
   1bc3c:	8d ee       	ldi	r24, 0xED	; 237
   1bc3e:	93 e3       	ldi	r25, 0x33	; 51
   1bc40:	f0 cf       	rjmp	.-32     	; 0x1bc22 <lif_rename_file+0x2c>
        return(-1);
    }

    if(!lif_checkname(newlifname))
   1bc42:	ca 01       	movw	r24, r20
   1bc44:	0e 94 f5 c2 	call	0x185ea	; 0x185ea <lif_checkname>
   1bc48:	89 2b       	or	r24, r25
   1bc4a:	19 f4       	brne	.+6      	; 0x1bc52 <lif_rename_file+0x5c>
    {
        printf("lif_rename_file: new lifname contains bad characters\n");
   1bc4c:	87 eb       	ldi	r24, 0xB7	; 183
   1bc4e:	93 e3       	ldi	r25, 0x33	; 51
   1bc50:	e8 cf       	rjmp	.-48     	; 0x1bc22 <lif_rename_file+0x2c>
        return(-1);

    }

    LIF = lif_open_volume(lifimagename,"rb+");
   1bc52:	68 e0       	ldi	r22, 0x08	; 8
   1bc54:	79 e0       	ldi	r23, 0x09	; 9
   1bc56:	c6 01       	movw	r24, r12
   1bc58:	0e 94 63 d1 	call	0x1a2c6	; 0x1a2c6 <lif_open_volume>
   1bc5c:	ec 01       	movw	r28, r24
    if(LIF == NULL)
   1bc5e:	00 97       	sbiw	r24, 0x00	; 0
   1bc60:	09 f4       	brne	.+2      	; 0x1bc64 <lif_rename_file+0x6e>
   1bc62:	40 c0       	rjmp	.+128    	; 0x1bce4 <lif_rename_file+0xee>
        return(-1);

// Now find file record
    index = lif_find_file(LIF, oldlifname);
   1bc64:	b8 01       	movw	r22, r16
   1bc66:	0e 94 38 d4 	call	0x1a870	; 0x1a870 <lif_find_file>
   1bc6a:	5c 01       	movw	r10, r24
    if(index == -1)
   1bc6c:	01 96       	adiw	r24, 0x01	; 1
   1bc6e:	a1 f4       	brne	.+40     	; 0x1bc98 <lif_rename_file+0xa2>
    {
        printf("lif_rename:[%s] lif name:[%s] not found\n", lifimagename, oldlifname);
   1bc70:	ed b7       	in	r30, 0x3d	; 61
   1bc72:	fe b7       	in	r31, 0x3e	; 62
   1bc74:	17 83       	std	Z+7, r17	; 0x07
   1bc76:	06 83       	std	Z+6, r16	; 0x06
   1bc78:	d5 82       	std	Z+5, r13	; 0x05
   1bc7a:	c4 82       	std	Z+4, r12	; 0x04
   1bc7c:	8e e8       	ldi	r24, 0x8E	; 142
   1bc7e:	93 e3       	ldi	r25, 0x33	; 51
   1bc80:	a0 e0       	ldi	r26, 0x00	; 0
   1bc82:	81 83       	std	Z+1, r24	; 0x01
   1bc84:	92 83       	std	Z+2, r25	; 0x02
   1bc86:	a3 83       	std	Z+3, r26	; 0x03
   1bc88:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bc8c:	ce 01       	movw	r24, r28
   1bc8e:	0e 94 a6 ca 	call	0x1954c	; 0x1954c <lif_close_volume>
    index = lif_find_file(LIF, oldlifname);
    if(index == -1)
    {
        printf("lif_rename:[%s] lif name:[%s] not found\n", lifimagename, oldlifname);
        lif_closedir(LIF);
        return(0);
   1bc92:	80 e0       	ldi	r24, 0x00	; 0
   1bc94:	90 e0       	ldi	r25, 0x00	; 0
   1bc96:	28 c0       	rjmp	.+80     	; 0x1bce8 <lif_rename_file+0xf2>
    }
    lif_fixname(LIF->DIR.filename, newlifname, 10);
   1bc98:	4a e0       	ldi	r20, 0x0A	; 10
   1bc9a:	50 e0       	ldi	r21, 0x00	; 0
   1bc9c:	b7 01       	movw	r22, r14
   1bc9e:	ce 01       	movw	r24, r28
   1bca0:	81 5b       	subi	r24, 0xB1	; 177
   1bca2:	9f 4f       	sbci	r25, 0xFF	; 255
   1bca4:	0e 94 2f c3 	call	0x1865e	; 0x1865e <lif_fixname>

// re-Write directory record
    if( !lif_writedirindex(LIF,index))
   1bca8:	b5 01       	movw	r22, r10
   1bcaa:	ce 01       	movw	r24, r28
   1bcac:	0e 94 9b cb 	call	0x19736	; 0x19736 <lif_writedirindex>
   1bcb0:	89 2b       	or	r24, r25
   1bcb2:	21 f4       	brne	.+8      	; 0x1bcbc <lif_rename_file+0xc6>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bcb4:	ce 01       	movw	r24, r28
   1bcb6:	0e 94 a6 ca 	call	0x1954c	; 0x1954c <lif_close_volume>
   1bcba:	14 c0       	rjmp	.+40     	; 0x1bce4 <lif_rename_file+0xee>
    if( !lif_writedirindex(LIF,index))
    {
        lif_closedir(LIF);
        return(-1);
    }
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);
   1bcbc:	ed b7       	in	r30, 0x3d	; 61
   1bcbe:	fe b7       	in	r31, 0x3e	; 62
   1bcc0:	f7 82       	std	Z+7, r15	; 0x07
   1bcc2:	e6 82       	std	Z+6, r14	; 0x06
   1bcc4:	15 83       	std	Z+5, r17	; 0x05
   1bcc6:	04 83       	std	Z+4, r16	; 0x04
   1bcc8:	87 e7       	ldi	r24, 0x77	; 119
   1bcca:	93 e3       	ldi	r25, 0x33	; 51
   1bccc:	a0 e0       	ldi	r26, 0x00	; 0
   1bcce:	81 83       	std	Z+1, r24	; 0x01
   1bcd0:	92 83       	std	Z+2, r25	; 0x02
   1bcd2:	a3 83       	std	Z+3, r26	; 0x03
   1bcd4:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bcd8:	ce 01       	movw	r24, r28
   1bcda:	0e 94 a6 ca 	call	0x1954c	; 0x1954c <lif_close_volume>
    }
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);

    lif_closedir(LIF);

    return(1);
   1bcde:	81 e0       	ldi	r24, 0x01	; 1
   1bce0:	90 e0       	ldi	r25, 0x00	; 0
   1bce2:	02 c0       	rjmp	.+4      	; 0x1bce8 <lif_rename_file+0xf2>

    }

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return(-1);
   1bce4:	8f ef       	ldi	r24, 0xFF	; 255
   1bce6:	9f ef       	ldi	r25, 0xFF	; 255
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);

    lif_closedir(LIF);

    return(1);
}
   1bce8:	cd b7       	in	r28, 0x3d	; 61
   1bcea:	de b7       	in	r29, 0x3e	; 62
   1bcec:	27 96       	adiw	r28, 0x07	; 7
   1bcee:	ea e0       	ldi	r30, 0x0A	; 10
   1bcf0:	0c 94 23 e7 	jmp	0x1ce46	; 0x1ce46 <__epilogue_restores__+0x10>

0001bcf4 <lif_create_image>:
/// @param[in] dirsectors: Number of LIF directory sectors
/// @param[in] sectors: total disk image size in sectors
///@return bytes writting to disk image
MEMSPACE
long lif_create_image(char *lifimagename, char *liflabel, uint32_t dirsectors, uint32_t sectors)
{
   1bcf4:	4f 92       	push	r4
   1bcf6:	5f 92       	push	r5
   1bcf8:	6f 92       	push	r6
   1bcfa:	7f 92       	push	r7
   1bcfc:	af 92       	push	r10
   1bcfe:	bf 92       	push	r11
   1bd00:	cf 92       	push	r12
   1bd02:	df 92       	push	r13
   1bd04:	ef 92       	push	r14
   1bd06:	ff 92       	push	r15
   1bd08:	0f 93       	push	r16
   1bd0a:	1f 93       	push	r17
   1bd0c:	cf 93       	push	r28
   1bd0e:	df 93       	push	r29
   1bd10:	ad b7       	in	r26, 0x3d	; 61
   1bd12:	be b7       	in	r27, 0x3e	; 62
   1bd14:	17 97       	sbiw	r26, 0x07	; 7
   1bd16:	0f b6       	in	r0, 0x3f	; 63
   1bd18:	f8 94       	cli
   1bd1a:	be bf       	out	0x3e, r27	; 62
   1bd1c:	0f be       	out	0x3f, r0	; 63
   1bd1e:	ad bf       	out	0x3d, r26	; 61
   1bd20:	27 01       	movw	r4, r14
   1bd22:	38 01       	movw	r6, r16
    uint32_t dirstart,filestart,filesectors,end;
    lif_t *LIF;

    if(!*lifimagename)
   1bd24:	dc 01       	movw	r26, r24
   1bd26:	ec 91       	ld	r30, X
   1bd28:	e1 11       	cpse	r30, r1
   1bd2a:	03 c0       	rjmp	.+6      	; 0x1bd32 <lif_create_image+0x3e>
    {
        printf("lif_create_image: lifimagename is empty\n");
   1bd2c:	8e e4       	ldi	r24, 0x4E	; 78
   1bd2e:	93 e3       	ldi	r25, 0x33	; 51
   1bd30:	16 c0       	rjmp	.+44     	; 0x1bd5e <lif_create_image+0x6a>
        return(-1);
    }
    if(!*liflabel)
   1bd32:	db 01       	movw	r26, r22
   1bd34:	ec 91       	ld	r30, X
   1bd36:	e1 11       	cpse	r30, r1
   1bd38:	03 c0       	rjmp	.+6      	; 0x1bd40 <lif_create_image+0x4c>
    {
        printf("lif_create_image: liflabel is empty\n");
   1bd3a:	89 e2       	ldi	r24, 0x29	; 41
   1bd3c:	93 e3       	ldi	r25, 0x33	; 51
   1bd3e:	0f c0       	rjmp	.+30     	; 0x1bd5e <lif_create_image+0x6a>
        return(-1);
    }
    if(!dirsectors)
   1bd40:	21 15       	cp	r18, r1
   1bd42:	31 05       	cpc	r19, r1
   1bd44:	41 05       	cpc	r20, r1
   1bd46:	51 05       	cpc	r21, r1
   1bd48:	19 f4       	brne	.+6      	; 0x1bd50 <lif_create_image+0x5c>
    {
        printf("lif_create_image: dirsectors is 0\n");
   1bd4a:	86 e0       	ldi	r24, 0x06	; 6
   1bd4c:	93 e3       	ldi	r25, 0x33	; 51
   1bd4e:	07 c0       	rjmp	.+14     	; 0x1bd5e <lif_create_image+0x6a>
        return(-1);
    }
    if(!sectors)
   1bd50:	e1 14       	cp	r14, r1
   1bd52:	f1 04       	cpc	r15, r1
   1bd54:	01 05       	cpc	r16, r1
   1bd56:	11 05       	cpc	r17, r1
   1bd58:	59 f4       	brne	.+22     	; 0x1bd70 <lif_create_image+0x7c>
    {
        printf("lif_create_image: sectors is 0\n");
   1bd5a:	86 ee       	ldi	r24, 0xE6	; 230
   1bd5c:	92 e3       	ldi	r25, 0x32	; 50
   1bd5e:	a0 e0       	ldi	r26, 0x00	; 0
   1bd60:	ed b7       	in	r30, 0x3d	; 61
   1bd62:	fe b7       	in	r31, 0x3e	; 62
   1bd64:	81 83       	std	Z+1, r24	; 0x01
   1bd66:	92 83       	std	Z+2, r25	; 0x02
   1bd68:	a3 83       	std	Z+3, r26	; 0x03
   1bd6a:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   1bd6e:	2b c0       	rjmp	.+86     	; 0x1bdc6 <lif_create_image+0xd2>
    dirstart = 2;
    filestart = dirstart + dirsectors;
    filesectors = sectors - filestart;
    end = filestart + filesectors;

    LIF = lif_create_volume(lifimagename, liflabel, dirstart, dirsectors, filesectors);
   1bd70:	67 01       	movw	r12, r14
   1bd72:	78 01       	movw	r14, r16
   1bd74:	f2 e0       	ldi	r31, 0x02	; 2
   1bd76:	cf 1a       	sub	r12, r31
   1bd78:	d1 08       	sbc	r13, r1
   1bd7a:	e1 08       	sbc	r14, r1
   1bd7c:	f1 08       	sbc	r15, r1
   1bd7e:	56 01       	movw	r10, r12
   1bd80:	67 01       	movw	r12, r14
   1bd82:	a2 1a       	sub	r10, r18
   1bd84:	b3 0a       	sbc	r11, r19
   1bd86:	c4 0a       	sbc	r12, r20
   1bd88:	d5 0a       	sbc	r13, r21
   1bd8a:	79 01       	movw	r14, r18
   1bd8c:	8a 01       	movw	r16, r20
   1bd8e:	22 e0       	ldi	r18, 0x02	; 2
   1bd90:	30 e0       	ldi	r19, 0x00	; 0
   1bd92:	40 e0       	ldi	r20, 0x00	; 0
   1bd94:	50 e0       	ldi	r21, 0x00	; 0
   1bd96:	0e 94 19 cd 	call	0x19a32	; 0x19a32 <lif_create_volume>
    if(LIF == NULL)
   1bd9a:	00 97       	sbiw	r24, 0x00	; 0
   1bd9c:	a1 f0       	breq	.+40     	; 0x1bdc6 <lif_create_image+0xd2>
        return(-1);
    lif_close_volume(LIF);
   1bd9e:	0e 94 a6 ca 	call	0x1954c	; 0x1954c <lif_close_volume>

    printf("\tFormatting: wrote %ld sectors\n", (long)end);
   1bda2:	82 01       	movw	r16, r4
   1bda4:	d6 2d       	mov	r29, r6
   1bda6:	c7 2d       	mov	r28, r7
   1bda8:	ed b7       	in	r30, 0x3d	; 61
   1bdaa:	fe b7       	in	r31, 0x3e	; 62
   1bdac:	44 82       	std	Z+4, r4	; 0x04
   1bdae:	15 83       	std	Z+5, r17	; 0x05
   1bdb0:	66 82       	std	Z+6, r6	; 0x06
   1bdb2:	77 82       	std	Z+7, r7	; 0x07
   1bdb4:	86 ec       	ldi	r24, 0xC6	; 198
   1bdb6:	92 e3       	ldi	r25, 0x32	; 50
   1bdb8:	a0 e0       	ldi	r26, 0x00	; 0
   1bdba:	81 83       	std	Z+1, r24	; 0x01
   1bdbc:	92 83       	std	Z+2, r25	; 0x02
   1bdbe:	a3 83       	std	Z+3, r26	; 0x03
   1bdc0:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    return(end);
   1bdc4:	04 c0       	rjmp	.+8      	; 0x1bdce <lif_create_image+0xda>
    filesectors = sectors - filestart;
    end = filestart + filesectors;

    LIF = lif_create_volume(lifimagename, liflabel, dirstart, dirsectors, filesectors);
    if(LIF == NULL)
        return(-1);
   1bdc6:	0f ef       	ldi	r16, 0xFF	; 255
   1bdc8:	1f ef       	ldi	r17, 0xFF	; 255
   1bdca:	df ef       	ldi	r29, 0xFF	; 255
   1bdcc:	cf ef       	ldi	r28, 0xFF	; 255
    lif_close_volume(LIF);

    printf("\tFormatting: wrote %ld sectors\n", (long)end);
    return(end);
}
   1bdce:	b8 01       	movw	r22, r16
   1bdd0:	8d 2f       	mov	r24, r29
   1bdd2:	9c 2f       	mov	r25, r28
   1bdd4:	ad b7       	in	r26, 0x3d	; 61
   1bdd6:	be b7       	in	r27, 0x3e	; 62
   1bdd8:	17 96       	adiw	r26, 0x07	; 7
   1bdda:	0f b6       	in	r0, 0x3f	; 63
   1bddc:	f8 94       	cli
   1bdde:	be bf       	out	0x3e, r27	; 62
   1bde0:	0f be       	out	0x3f, r0	; 63
   1bde2:	ad bf       	out	0x3d, r26	; 61
   1bde4:	df 91       	pop	r29
   1bde6:	cf 91       	pop	r28
   1bde8:	1f 91       	pop	r17
   1bdea:	0f 91       	pop	r16
   1bdec:	ff 90       	pop	r15
   1bdee:	ef 90       	pop	r14
   1bdf0:	df 90       	pop	r13
   1bdf2:	cf 90       	pop	r12
   1bdf4:	bf 90       	pop	r11
   1bdf6:	af 90       	pop	r10
   1bdf8:	7f 90       	pop	r7
   1bdfa:	6f 90       	pop	r6
   1bdfc:	5f 90       	pop	r5
   1bdfe:	4f 90       	pop	r4
   1be00:	08 95       	ret

0001be02 <lif_tests>:

/// @brief LIF user tests
/// @return  1 matched token, 0 if not
MEMSPACE
int lif_tests(int argc, char *argv[])
{
   1be02:	a5 e0       	ldi	r26, 0x05	; 5
   1be04:	b0 e0       	ldi	r27, 0x00	; 0
   1be06:	e6 e0       	ldi	r30, 0x06	; 6
   1be08:	ff ed       	ldi	r31, 0xDF	; 223
   1be0a:	ff c7       	rjmp	.+4094   	; 0x1ce0a <__prologue_saves__+0xc>
        printf("%d:%s\n", i, argv[i]);
    printf("\n");
#endif

// Nothing to do ?
    if(argc < 2)
   1be0c:	82 30       	cpi	r24, 0x02	; 2
   1be0e:	91 05       	cpc	r25, r1
   1be10:	1c f4       	brge	.+6      	; 0x1be18 <lif_tests+0x16>
        return (0);
   1be12:	80 e0       	ldi	r24, 0x00	; 0
   1be14:	90 e0       	ldi	r25, 0x00	; 0
   1be16:	8f c1       	rjmp	.+798    	; 0x1c136 <lif_tests+0x334>

// Argument 1
    ind = 1;
    ptr = argv[ind++];
   1be18:	fb 01       	movw	r30, r22
   1be1a:	e2 80       	ldd	r14, Z+2	; 0x02
   1be1c:	f3 80       	ldd	r15, Z+3	; 0x03

// Argument 1 missing ?
//        Nothing to do
// argc should really get this
    if(!ptr || !*ptr)
   1be1e:	e1 14       	cp	r14, r1
   1be20:	f1 04       	cpc	r15, r1
   1be22:	09 f4       	brne	.+2      	; 0x1be26 <lif_tests+0x24>
   1be24:	86 c1       	rjmp	.+780    	; 0x1c132 <lif_tests+0x330>
   1be26:	f7 01       	movw	r30, r14
   1be28:	20 81       	ld	r18, Z
   1be2a:	22 23       	and	r18, r18
   1be2c:	09 f4       	brne	.+2      	; 0x1be30 <lif_tests+0x2e>
   1be2e:	81 c1       	rjmp	.+770    	; 0x1c132 <lif_tests+0x330>
   1be30:	8b 01       	movw	r16, r22
   1be32:	6c 01       	movw	r12, r24
        return(1);


	if(MATCHI_LEN(argv[0],"lif"))
   1be34:	6a eb       	ldi	r22, 0xBA	; 186
   1be36:	76 e1       	ldi	r23, 0x16	; 22
   1be38:	f8 01       	movw	r30, r16
   1be3a:	80 81       	ld	r24, Z
   1be3c:	91 81       	ldd	r25, Z+1	; 0x01
   1be3e:	0e 94 bb 32 	call	0x6576	; 0x6576 <MATCHI_LEN>
   1be42:	89 2b       	or	r24, r25
   1be44:	d1 f0       	breq	.+52     	; 0x1be7a <lif_tests+0x78>
	{
		if(MATCHI(ptr,"help") || MATCHI(ptr,"-help") || MATCHI(ptr,"-?") )
   1be46:	64 e7       	ldi	r22, 0x74	; 116
   1be48:	76 e1       	ldi	r23, 0x16	; 22
   1be4a:	c7 01       	movw	r24, r14
   1be4c:	0e 94 7d 32 	call	0x64fa	; 0x64fa <MATCHI>
   1be50:	89 2b       	or	r24, r25
   1be52:	29 f0       	breq	.+10     	; 0x1be5e <lif_tests+0x5c>
		{
			lif_help(1);
   1be54:	81 e0       	ldi	r24, 0x01	; 1
   1be56:	90 e0       	ldi	r25, 0x00	; 0
   1be58:	0e 94 cb c0 	call	0x18196	; 0x18196 <lif_help>
   1be5c:	6a c1       	rjmp	.+724    	; 0x1c132 <lif_tests+0x330>
        return(1);


	if(MATCHI_LEN(argv[0],"lif"))
	{
		if(MATCHI(ptr,"help") || MATCHI(ptr,"-help") || MATCHI(ptr,"-?") )
   1be5e:	63 e7       	ldi	r22, 0x73	; 115
   1be60:	76 e1       	ldi	r23, 0x16	; 22
   1be62:	c7 01       	movw	r24, r14
   1be64:	0e 94 7d 32 	call	0x64fa	; 0x64fa <MATCHI>
   1be68:	89 2b       	or	r24, r25
   1be6a:	a1 f7       	brne	.-24     	; 0x1be54 <lif_tests+0x52>
   1be6c:	69 e7       	ldi	r22, 0x79	; 121
   1be6e:	76 e1       	ldi	r23, 0x16	; 22
   1be70:	c7 01       	movw	r24, r14
   1be72:	0e 94 7d 32 	call	0x64fa	; 0x64fa <MATCHI>
   1be76:	89 2b       	or	r24, r25
   1be78:	69 f7       	brne	.-38     	; 0x1be54 <lif_tests+0x52>
		}
	}

// Turn one debugging
// in the future we can add tests for specific messages
	debuglevel &= ~0x400;
   1be7a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1be7e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1be82:	9b 7f       	andi	r25, 0xFB	; 251
   1be84:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <debuglevel+0x1>
   1be88:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <debuglevel>
    if (MATCHARGS(ptr,"-d", (ind + 0) ,argc))
   1be8c:	96 01       	movw	r18, r12
   1be8e:	42 e0       	ldi	r20, 0x02	; 2
   1be90:	50 e0       	ldi	r21, 0x00	; 0
   1be92:	6c e7       	ldi	r22, 0x7C	; 124
   1be94:	76 e1       	ldi	r23, 0x16	; 22
   1be96:	c7 01       	movw	r24, r14
   1be98:	0e 94 91 32 	call	0x6522	; 0x6522 <MATCHARGS>
   1be9c:	89 2b       	or	r24, r25
   1be9e:	79 f0       	breq	.+30     	; 0x1bebe <lif_tests+0xbc>
    {
        debuglevel |= 0x400;
   1bea0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1bea4:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1bea8:	94 60       	ori	r25, 0x04	; 4
   1beaa:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <debuglevel+0x1>
   1beae:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <debuglevel>
        ptr = argv[ind++];
   1beb2:	f8 01       	movw	r30, r16
   1beb4:	e4 80       	ldd	r14, Z+4	; 0x04
   1beb6:	f5 80       	ldd	r15, Z+5	; 0x05
   1beb8:	c3 e0       	ldi	r28, 0x03	; 3
   1beba:	d0 e0       	ldi	r29, 0x00	; 0
   1bebc:	02 c0       	rjmp	.+4      	; 0x1bec2 <lif_tests+0xc0>
    if(argc < 2)
        return (0);

// Argument 1
    ind = 1;
    ptr = argv[ind++];
   1bebe:	c2 e0       	ldi	r28, 0x02	; 2
   1bec0:	d0 e0       	ldi	r29, 0x00	; 0
    {
        debuglevel |= 0x400;
        ptr = argv[ind++];
    }

    if (MATCHARGS(ptr,"addbin", (ind + 3) ,argc))
   1bec2:	5e 01       	movw	r10, r28
   1bec4:	f3 e0       	ldi	r31, 0x03	; 3
   1bec6:	af 0e       	add	r10, r31
   1bec8:	b1 1c       	adc	r11, r1
   1beca:	96 01       	movw	r18, r12
   1becc:	a5 01       	movw	r20, r10
   1bece:	6f e7       	ldi	r22, 0x7F	; 127
   1bed0:	76 e1       	ldi	r23, 0x16	; 22
   1bed2:	c7 01       	movw	r24, r14
   1bed4:	0e 94 91 32 	call	0x6522	; 0x6522 <MATCHARGS>
   1bed8:	89 2b       	or	r24, r25
   1beda:	61 f0       	breq	.+24     	; 0x1bef4 <lif_tests+0xf2>
    {
        lif_add_lif_file(argv[ind],argv[ind+1],argv[ind+2]);
   1bedc:	cc 0f       	add	r28, r28
   1bede:	dd 1f       	adc	r29, r29
   1bee0:	c0 0f       	add	r28, r16
   1bee2:	d1 1f       	adc	r29, r17
   1bee4:	4c 81       	ldd	r20, Y+4	; 0x04
   1bee6:	5d 81       	ldd	r21, Y+5	; 0x05
   1bee8:	6a 81       	ldd	r22, Y+2	; 0x02
   1beea:	7b 81       	ldd	r23, Y+3	; 0x03
   1beec:	88 81       	ld	r24, Y
   1beee:	99 81       	ldd	r25, Y+1	; 0x01
   1bef0:	63 dc       	rcall	.-1850   	; 0x1b7b8 <lif_add_lif_file>
   1bef2:	1f c1       	rjmp	.+574    	; 0x1c132 <lif_tests+0x330>

        return(1);
    }

    if (MATCHARGS(ptr,"add", (ind + 3) ,argc))
   1bef4:	96 01       	movw	r18, r12
   1bef6:	a5 01       	movw	r20, r10
   1bef8:	66 e8       	ldi	r22, 0x86	; 134
   1befa:	76 e1       	ldi	r23, 0x16	; 22
   1befc:	c7 01       	movw	r24, r14
   1befe:	0e 94 91 32 	call	0x6522	; 0x6522 <MATCHARGS>
   1bf02:	89 2b       	or	r24, r25
   1bf04:	69 f0       	breq	.+26     	; 0x1bf20 <lif_tests+0x11e>
    {
        lif_add_ascii_file_as_e010(argv[ind],argv[ind+1],argv[ind+2]);
   1bf06:	cc 0f       	add	r28, r28
   1bf08:	dd 1f       	adc	r29, r29
   1bf0a:	c0 0f       	add	r28, r16
   1bf0c:	d1 1f       	adc	r29, r17
   1bf0e:	4c 81       	ldd	r20, Y+4	; 0x04
   1bf10:	5d 81       	ldd	r21, Y+5	; 0x05
   1bf12:	6a 81       	ldd	r22, Y+2	; 0x02
   1bf14:	7b 81       	ldd	r23, Y+3	; 0x03
   1bf16:	88 81       	ld	r24, Y
   1bf18:	99 81       	ldd	r25, Y+1	; 0x01
   1bf1a:	0e 94 b9 d6 	call	0x1ad72	; 0x1ad72 <lif_add_ascii_file_as_e010>
   1bf1e:	09 c1       	rjmp	.+530    	; 0x1c132 <lif_tests+0x330>
        return(1);
    }
    if (MATCHARGS(ptr,"createdisk", (ind + 3) ,argc))
   1bf20:	96 01       	movw	r18, r12
   1bf22:	a5 01       	movw	r20, r10
   1bf24:	6a e8       	ldi	r22, 0x8A	; 138
   1bf26:	76 e1       	ldi	r23, 0x16	; 22
   1bf28:	c7 01       	movw	r24, r14
   1bf2a:	0e 94 91 32 	call	0x6522	; 0x6522 <MATCHARGS>
   1bf2e:	89 2b       	or	r24, r25
   1bf30:	09 f4       	brne	.+2      	; 0x1bf34 <lif_tests+0x132>
   1bf32:	42 c0       	rjmp	.+132    	; 0x1bfb8 <lif_tests+0x1b6>
    {
///@brief format LIF image
        long dir,sectors;
        char *name = argv[ind];
   1bf34:	ce 01       	movw	r24, r28
   1bf36:	88 0f       	add	r24, r24
   1bf38:	99 1f       	adc	r25, r25
   1bf3a:	e8 01       	movw	r28, r16
   1bf3c:	c8 0f       	add	r28, r24
   1bf3e:	d9 1f       	adc	r29, r25
   1bf40:	c8 80       	ld	r12, Y
   1bf42:	d9 80       	ldd	r13, Y+1	; 0x01
        char *label = argv[ind+1];
   1bf44:	aa 80       	ldd	r10, Y+2	; 0x02
   1bf46:	bb 80       	ldd	r11, Y+3	; 0x03
        char *model = argv[ind+2];
   1bf48:	0c 80       	ldd	r0, Y+4	; 0x04
   1bf4a:	dd 81       	ldd	r29, Y+5	; 0x05
   1bf4c:	c0 2d       	mov	r28, r0
        if( MATCHI_LEN(model,"hp"))
   1bf4e:	65 e9       	ldi	r22, 0x95	; 149
   1bf50:	76 e1       	ldi	r23, 0x16	; 22
   1bf52:	ce 01       	movw	r24, r28
   1bf54:	0e 94 bb 32 	call	0x6576	; 0x6576 <MATCHI_LEN>
   1bf58:	89 2b       	or	r24, r25
   1bf5a:	09 f0       	breq	.+2      	; 0x1bf5e <lif_tests+0x15c>
            model +=2;
   1bf5c:	22 96       	adiw	r28, 0x02	; 2
        if(hpdir_find_drive(model,0, 0))
   1bf5e:	40 e0       	ldi	r20, 0x00	; 0
   1bf60:	50 e0       	ldi	r21, 0x00	; 0
   1bf62:	60 e0       	ldi	r22, 0x00	; 0
   1bf64:	70 e0       	ldi	r23, 0x00	; 0
   1bf66:	ce 01       	movw	r24, r28
   1bf68:	0e 94 0e a4 	call	0x1481c	; 0x1481c <hpdir_find_drive>
   1bf6c:	89 2b       	or	r24, r25
   1bf6e:	b9 f0       	breq	.+46     	; 0x1bf9e <lif_tests+0x19c>
        {
            dir = lif_dir_count(hpdir.BLOCKS);
   1bf70:	60 91 2c 20 	lds	r22, 0x202C	; 0x80202c <hpdir+0xac>
   1bf74:	70 91 2d 20 	lds	r23, 0x202D	; 0x80202d <hpdir+0xad>
   1bf78:	80 91 2e 20 	lds	r24, 0x202E	; 0x80202e <hpdir+0xae>
   1bf7c:	90 91 2f 20 	lds	r25, 0x202F	; 0x80202f <hpdir+0xaf>
   1bf80:	0e 94 f1 a3 	call	0x147e2	; 0x147e2 <lif_dir_count>
   1bf84:	9b 01       	movw	r18, r22
   1bf86:	ac 01       	movw	r20, r24
            sectors = hpdir.BLOCKS;
			// NOTE: we could grab the directory size for non 0 entries in the hpdir.ini file - I use a computed value which is also fine
            lif_create_image(name, label, dir, sectors);
   1bf88:	e0 90 2c 20 	lds	r14, 0x202C	; 0x80202c <hpdir+0xac>
   1bf8c:	f0 90 2d 20 	lds	r15, 0x202D	; 0x80202d <hpdir+0xad>
   1bf90:	00 91 2e 20 	lds	r16, 0x202E	; 0x80202e <hpdir+0xae>
   1bf94:	10 91 2f 20 	lds	r17, 0x202F	; 0x80202f <hpdir+0xaf>
   1bf98:	b5 01       	movw	r22, r10
   1bf9a:	c6 01       	movw	r24, r12
   1bf9c:	2e c0       	rjmp	.+92     	; 0x1bffa <lif_tests+0x1f8>
            return(1);
        }
        printf("Disk: %s not found in hpdir.ini\n", model);
   1bf9e:	ed b7       	in	r30, 0x3d	; 61
   1bfa0:	fe b7       	in	r31, 0x3e	; 62
   1bfa2:	d5 83       	std	Z+5, r29	; 0x05
   1bfa4:	c4 83       	std	Z+4, r28	; 0x04
   1bfa6:	87 e1       	ldi	r24, 0x17	; 23
   1bfa8:	95 e4       	ldi	r25, 0x45	; 69
   1bfaa:	a0 e0       	ldi	r26, 0x00	; 0
   1bfac:	81 83       	std	Z+1, r24	; 0x01
   1bfae:	92 83       	std	Z+2, r25	; 0x02
   1bfb0:	a3 83       	std	Z+3, r26	; 0x03
   1bfb2:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   1bfb6:	bd c0       	rjmp	.+378    	; 0x1c132 <lif_tests+0x330>
        return(1);
    }
    if (MATCHARGS(ptr,"create", (ind + 4) ,argc))
   1bfb8:	96 01       	movw	r18, r12
   1bfba:	ae 01       	movw	r20, r28
   1bfbc:	4c 5f       	subi	r20, 0xFC	; 252
   1bfbe:	5f 4f       	sbci	r21, 0xFF	; 255
   1bfc0:	68 e9       	ldi	r22, 0x98	; 152
   1bfc2:	76 e1       	ldi	r23, 0x16	; 22
   1bfc4:	c7 01       	movw	r24, r14
   1bfc6:	0e 94 91 32 	call	0x6522	; 0x6522 <MATCHARGS>
   1bfca:	89 2b       	or	r24, r25
   1bfcc:	c1 f0       	breq	.+48     	; 0x1bffe <lif_tests+0x1fc>
    {
///@brief format LIF image
        lif_create_image(argv[ind],argv[ind+1], atol(argv[ind+2]), atol(argv[ind+3]) );
   1bfce:	cc 0f       	add	r28, r28
   1bfd0:	dd 1f       	adc	r29, r29
   1bfd2:	c0 0f       	add	r28, r16
   1bfd4:	d1 1f       	adc	r29, r17
   1bfd6:	8c 81       	ldd	r24, Y+4	; 0x04
   1bfd8:	9d 81       	ldd	r25, Y+5	; 0x05
   1bfda:	0e 94 d0 47 	call	0x8fa0	; 0x8fa0 <atol>
   1bfde:	4b 01       	movw	r8, r22
   1bfe0:	5c 01       	movw	r10, r24
   1bfe2:	8e 81       	ldd	r24, Y+6	; 0x06
   1bfe4:	9f 81       	ldd	r25, Y+7	; 0x07
   1bfe6:	0e 94 d0 47 	call	0x8fa0	; 0x8fa0 <atol>
   1bfea:	7b 01       	movw	r14, r22
   1bfec:	8c 01       	movw	r16, r24
   1bfee:	6a 81       	ldd	r22, Y+2	; 0x02
   1bff0:	7b 81       	ldd	r23, Y+3	; 0x03
   1bff2:	a5 01       	movw	r20, r10
   1bff4:	94 01       	movw	r18, r8
   1bff6:	88 81       	ld	r24, Y
   1bff8:	99 81       	ldd	r25, Y+1	; 0x01
   1bffa:	7c de       	rcall	.-776    	; 0x1bcf4 <lif_create_image>
   1bffc:	9a c0       	rjmp	.+308    	; 0x1c132 <lif_tests+0x330>
        return(1);
    }
    if (MATCHARGS(ptr,"del", (ind + 2) ,argc))
   1bffe:	96 01       	movw	r18, r12
   1c000:	ae 01       	movw	r20, r28
   1c002:	4e 5f       	subi	r20, 0xFE	; 254
   1c004:	5f 4f       	sbci	r21, 0xFF	; 255
   1c006:	6f e9       	ldi	r22, 0x9F	; 159
   1c008:	76 e1       	ldi	r23, 0x16	; 22
   1c00a:	c7 01       	movw	r24, r14
   1c00c:	0e 94 91 32 	call	0x6522	; 0x6522 <MATCHARGS>
   1c010:	89 2b       	or	r24, r25
   1c012:	51 f0       	breq	.+20     	; 0x1c028 <lif_tests+0x226>
    {
        lif_del_file(argv[ind],argv[ind+1]);
   1c014:	cc 0f       	add	r28, r28
   1c016:	dd 1f       	adc	r29, r29
   1c018:	c0 0f       	add	r28, r16
   1c01a:	d1 1f       	adc	r29, r17
   1c01c:	6a 81       	ldd	r22, Y+2	; 0x02
   1c01e:	7b 81       	ldd	r23, Y+3	; 0x03
   1c020:	88 81       	ld	r24, Y
   1c022:	99 81       	ldd	r25, Y+1	; 0x01
   1c024:	52 dd       	rcall	.-1372   	; 0x1baca <lif_del_file>
   1c026:	85 c0       	rjmp	.+266    	; 0x1c132 <lif_tests+0x330>
        return(1);
    }
    if (MATCHARGS(ptr,"dir", (ind + 1) ,argc))
   1c028:	96 01       	movw	r18, r12
   1c02a:	ae 01       	movw	r20, r28
   1c02c:	4f 5f       	subi	r20, 0xFF	; 255
   1c02e:	5f 4f       	sbci	r21, 0xFF	; 255
   1c030:	68 ed       	ldi	r22, 0xD8	; 216
   1c032:	7b e0       	ldi	r23, 0x0B	; 11
   1c034:	c7 01       	movw	r24, r14
   1c036:	0e 94 91 32 	call	0x6522	; 0x6522 <MATCHARGS>
   1c03a:	89 2b       	or	r24, r25
   1c03c:	49 f0       	breq	.+18     	; 0x1c050 <lif_tests+0x24e>
    {
        lif_dir(argv[ind]);
   1c03e:	cc 0f       	add	r28, r28
   1c040:	dd 1f       	adc	r29, r29
   1c042:	c0 0f       	add	r28, r16
   1c044:	d1 1f       	adc	r29, r17
   1c046:	88 81       	ld	r24, Y
   1c048:	99 81       	ldd	r25, Y+1	; 0x01
   1c04a:	0e 94 63 d2 	call	0x1a4c6	; 0x1a4c6 <lif_dir>
   1c04e:	71 c0       	rjmp	.+226    	; 0x1c132 <lif_tests+0x330>
        return(1);
    }
    if (MATCHARGS(ptr,"extractbin", (ind + 3) ,argc))
   1c050:	96 01       	movw	r18, r12
   1c052:	a5 01       	movw	r20, r10
   1c054:	63 ea       	ldi	r22, 0xA3	; 163
   1c056:	76 e1       	ldi	r23, 0x16	; 22
   1c058:	c7 01       	movw	r24, r14
   1c05a:	0e 94 91 32 	call	0x6522	; 0x6522 <MATCHARGS>
   1c05e:	89 2b       	or	r24, r25
   1c060:	71 f0       	breq	.+28     	; 0x1c07e <lif_tests+0x27c>
    {

        lif_extract_lif_as_lif(argv[ind],argv[ind+1],argv[ind+2]);
   1c062:	ce 01       	movw	r24, r28
   1c064:	88 0f       	add	r24, r24
   1c066:	99 1f       	adc	r25, r25
   1c068:	e8 01       	movw	r28, r16
   1c06a:	c8 0f       	add	r28, r24
   1c06c:	d9 1f       	adc	r29, r25
   1c06e:	4c 81       	ldd	r20, Y+4	; 0x04
   1c070:	5d 81       	ldd	r21, Y+5	; 0x05
   1c072:	6a 81       	ldd	r22, Y+2	; 0x02
   1c074:	7b 81       	ldd	r23, Y+3	; 0x03
   1c076:	88 81       	ld	r24, Y
   1c078:	99 81       	ldd	r25, Y+1	; 0x01
   1c07a:	66 da       	rcall	.-2868   	; 0x1b548 <lif_extract_lif_as_lif>
   1c07c:	5a c0       	rjmp	.+180    	; 0x1c132 <lif_tests+0x330>
        return(1);
    }
    if (MATCHARGS(ptr,"extract", (ind + 3) ,argc))
   1c07e:	96 01       	movw	r18, r12
   1c080:	a5 01       	movw	r20, r10
   1c082:	6e ea       	ldi	r22, 0xAE	; 174
   1c084:	76 e1       	ldi	r23, 0x16	; 22
   1c086:	c7 01       	movw	r24, r14
   1c088:	0e 94 91 32 	call	0x6522	; 0x6522 <MATCHARGS>
   1c08c:	89 2b       	or	r24, r25
   1c08e:	79 f0       	breq	.+30     	; 0x1c0ae <lif_tests+0x2ac>
    {

        lif_extract_e010_as_ascii(argv[ind],argv[ind+1],argv[ind+2]);
   1c090:	ce 01       	movw	r24, r28
   1c092:	88 0f       	add	r24, r24
   1c094:	99 1f       	adc	r25, r25
   1c096:	e8 01       	movw	r28, r16
   1c098:	c8 0f       	add	r28, r24
   1c09a:	d9 1f       	adc	r29, r25
   1c09c:	4c 81       	ldd	r20, Y+4	; 0x04
   1c09e:	5d 81       	ldd	r21, Y+5	; 0x05
   1c0a0:	6a 81       	ldd	r22, Y+2	; 0x02
   1c0a2:	7b 81       	ldd	r23, Y+3	; 0x03
   1c0a4:	88 81       	ld	r24, Y
   1c0a6:	99 81       	ldd	r25, Y+1	; 0x01
   1c0a8:	0e 94 f5 d7 	call	0x1afea	; 0x1afea <lif_extract_e010_as_ascii>
   1c0ac:	42 c0       	rjmp	.+132    	; 0x1c132 <lif_tests+0x330>
        return(1);
    }
    if (MATCHARGS(ptr,"rename", (ind + 3) ,argc))
   1c0ae:	96 01       	movw	r18, r12
   1c0b0:	a5 01       	movw	r20, r10
   1c0b2:	65 ee       	ldi	r22, 0xE5	; 229
   1c0b4:	7b e0       	ldi	r23, 0x0B	; 11
   1c0b6:	c7 01       	movw	r24, r14
   1c0b8:	0e 94 91 32 	call	0x6522	; 0x6522 <MATCHARGS>
   1c0bc:	89 2b       	or	r24, r25
   1c0be:	71 f0       	breq	.+28     	; 0x1c0dc <lif_tests+0x2da>
    {
        lif_rename_file(argv[ind],argv[ind+1],argv[ind+2]);
   1c0c0:	ce 01       	movw	r24, r28
   1c0c2:	88 0f       	add	r24, r24
   1c0c4:	99 1f       	adc	r25, r25
   1c0c6:	e8 01       	movw	r28, r16
   1c0c8:	c8 0f       	add	r28, r24
   1c0ca:	d9 1f       	adc	r29, r25
   1c0cc:	4c 81       	ldd	r20, Y+4	; 0x04
   1c0ce:	5d 81       	ldd	r21, Y+5	; 0x05
   1c0d0:	6a 81       	ldd	r22, Y+2	; 0x02
   1c0d2:	7b 81       	ldd	r23, Y+3	; 0x03
   1c0d4:	88 81       	ld	r24, Y
   1c0d6:	99 81       	ldd	r25, Y+1	; 0x01
   1c0d8:	8e dd       	rcall	.-1252   	; 0x1bbf6 <lif_rename_file>
   1c0da:	2b c0       	rjmp	.+86     	; 0x1c132 <lif_tests+0x330>
        return(1);
    }

	if(MATCHI_LEN(argv[0],"td02lif"))
   1c0dc:	66 eb       	ldi	r22, 0xB6	; 182
   1c0de:	76 e1       	ldi	r23, 0x16	; 22
   1c0e0:	f8 01       	movw	r30, r16
   1c0e2:	80 81       	ld	r24, Z
   1c0e4:	91 81       	ldd	r25, Z+1	; 0x01
   1c0e6:	0e 94 bb 32 	call	0x6576	; 0x6576 <MATCHI_LEN>
   1c0ea:	89 2b       	or	r24, r25
   1c0ec:	09 f4       	brne	.+2      	; 0x1c0f0 <lif_tests+0x2ee>
   1c0ee:	91 ce       	rjmp	.-734    	; 0x1be12 <lif_tests+0x10>
	{
		if(MATCHI(ptr,"help") || MATCHI(ptr,"-help") || MATCHI(ptr,"-?") )
   1c0f0:	64 e7       	ldi	r22, 0x74	; 116
   1c0f2:	76 e1       	ldi	r23, 0x16	; 22
   1c0f4:	c7 01       	movw	r24, r14
   1c0f6:	0e 94 7d 32 	call	0x64fa	; 0x64fa <MATCHI>
   1c0fa:	89 2b       	or	r24, r25
   1c0fc:	59 f0       	breq	.+22     	; 0x1c114 <lif_tests+0x312>
		{
#ifdef TELEDISK
			td0_help(1);
			return(1);
#else
		    printf("td02lif support not enabled\n");
   1c0fe:	8a ef       	ldi	r24, 0xFA	; 250
   1c100:	94 e4       	ldi	r25, 0x44	; 68
   1c102:	a0 e0       	ldi	r26, 0x00	; 0
   1c104:	ed b7       	in	r30, 0x3d	; 61
   1c106:	fe b7       	in	r31, 0x3e	; 62
   1c108:	81 83       	std	Z+1, r24	; 0x01
   1c10a:	92 83       	std	Z+2, r25	; 0x02
   1c10c:	a3 83       	std	Z+3, r26	; 0x03
   1c10e:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   1c112:	0f c0       	rjmp	.+30     	; 0x1c132 <lif_tests+0x330>
        return(1);
    }

	if(MATCHI_LEN(argv[0],"td02lif"))
	{
		if(MATCHI(ptr,"help") || MATCHI(ptr,"-help") || MATCHI(ptr,"-?") )
   1c114:	63 e7       	ldi	r22, 0x73	; 115
   1c116:	76 e1       	ldi	r23, 0x16	; 22
   1c118:	c7 01       	movw	r24, r14
   1c11a:	0e 94 7d 32 	call	0x64fa	; 0x64fa <MATCHI>
   1c11e:	89 2b       	or	r24, r25
   1c120:	71 f7       	brne	.-36     	; 0x1c0fe <lif_tests+0x2fc>
   1c122:	69 e7       	ldi	r22, 0x79	; 121
   1c124:	76 e1       	ldi	r23, 0x16	; 22
   1c126:	c7 01       	movw	r24, r14
   1c128:	0e 94 7d 32 	call	0x64fa	; 0x64fa <MATCHI>
   1c12c:	89 2b       	or	r24, r25
   1c12e:	39 f7       	brne	.-50     	; 0x1c0fe <lif_tests+0x2fc>
   1c130:	70 ce       	rjmp	.-800    	; 0x1be12 <lif_tests+0x10>

// Argument 1 missing ?
//        Nothing to do
// argc should really get this
    if(!ptr || !*ptr)
        return(1);
   1c132:	81 e0       	ldi	r24, 0x01	; 1
   1c134:	90 e0       	ldi	r25, 0x00	; 0
        td02lif(argc,argv);
        return(1);
#endif
    }
    return(0);
}
   1c136:	cd b7       	in	r28, 0x3d	; 61
   1c138:	de b7       	in	r29, 0x3e	; 62
   1c13a:	25 96       	adiw	r28, 0x05	; 5
   1c13c:	ec e0       	ldi	r30, 0x0C	; 12
   1c13e:	81 c6       	rjmp	.+3330   	; 0x1ce42 <__epilogue_restores__+0xc>

0001c140 <lcd_task>:
static int16_t lcd_display_time = 0;

///@brief LCD timer function called at 1000HZ
void lcd_task()
{
	++lcd_display_time;
   1c140:	80 91 f2 19 	lds	r24, 0x19F2	; 0x8019f2 <lcd_display_time>
   1c144:	90 91 f3 19 	lds	r25, 0x19F3	; 0x8019f3 <lcd_display_time+0x1>
   1c148:	01 96       	adiw	r24, 0x01	; 1
   1c14a:	90 93 f3 19 	sts	0x19F3, r25	; 0x8019f3 <lcd_display_time+0x1>
   1c14e:	80 93 f2 19 	sts	0x19F2, r24	; 0x8019f2 <lcd_display_time>
   1c152:	08 95       	ret

0001c154 <copyright>:
int8_t debug_input = 0;

///@brief Display Copyright
///@return void
void copyright()
{
   1c154:	00 d0       	rcall	.+0      	; 0x1c156 <copyright+0x2>
   1c156:	00 d0       	rcall	.+0      	; 0x1c158 <copyright+0x4>
   1c158:	1f 92       	push	r1
    printf("HP85 Disk and Device Emulator with built in LIF utilities\n");
   1c15a:	86 ef       	ldi	r24, 0xF6	; 246
   1c15c:	9b e4       	ldi	r25, 0x4B	; 75
   1c15e:	a0 e0       	ldi	r26, 0x00	; 0
   1c160:	ed b7       	in	r30, 0x3d	; 61
   1c162:	fe b7       	in	r31, 0x3e	; 62
   1c164:	81 83       	std	Z+1, r24	; 0x01
   1c166:	92 83       	std	Z+2, r25	; 0x02
   1c168:	a3 83       	std	Z+3, r26	; 0x03
   1c16a:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    printf(" (c) 2014-2020 by Mike Gore\n");
   1c16e:	89 ed       	ldi	r24, 0xD9	; 217
   1c170:	9b e4       	ldi	r25, 0x4B	; 75
   1c172:	a0 e0       	ldi	r26, 0x00	; 0
   1c174:	ed b7       	in	r30, 0x3d	; 61
   1c176:	fe b7       	in	r31, 0x3e	; 62
   1c178:	81 83       	std	Z+1, r24	; 0x01
   1c17a:	92 83       	std	Z+2, r25	; 0x02
   1c17c:	a3 83       	std	Z+3, r26	; 0x03
   1c17e:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    printf(" GNU version 3\n");
   1c182:	89 ec       	ldi	r24, 0xC9	; 201
   1c184:	9b e4       	ldi	r25, 0x4B	; 75
   1c186:	a0 e0       	ldi	r26, 0x00	; 0
   1c188:	ed b7       	in	r30, 0x3d	; 61
   1c18a:	fe b7       	in	r31, 0x3e	; 62
   1c18c:	81 83       	std	Z+1, r24	; 0x01
   1c18e:	92 83       	std	Z+2, r25	; 0x02
   1c190:	a3 83       	std	Z+3, r26	; 0x03
   1c192:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    printf("-> https://github.com/magore/hp85disk\n");
   1c196:	82 ea       	ldi	r24, 0xA2	; 162
   1c198:	9b e4       	ldi	r25, 0x4B	; 75
   1c19a:	a0 e0       	ldi	r26, 0x00	; 0
   1c19c:	ed b7       	in	r30, 0x3d	; 61
   1c19e:	fe b7       	in	r31, 0x3e	; 62
   1c1a0:	81 83       	std	Z+1, r24	; 0x01
   1c1a2:	92 83       	std	Z+2, r25	; 0x02
   1c1a4:	a3 83       	std	Z+3, r26	; 0x03
   1c1a6:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    printf("   GIT last pushed:   %s\n", GIT_VERSION);
   1c1aa:	8e eb       	ldi	r24, 0xBE	; 190
   1c1ac:	96 e1       	ldi	r25, 0x16	; 22
   1c1ae:	ed b7       	in	r30, 0x3d	; 61
   1c1b0:	fe b7       	in	r31, 0x3e	; 62
   1c1b2:	95 83       	std	Z+5, r25	; 0x05
   1c1b4:	84 83       	std	Z+4, r24	; 0x04
   1c1b6:	88 e8       	ldi	r24, 0x88	; 136
   1c1b8:	9b e4       	ldi	r25, 0x4B	; 75
   1c1ba:	a0 e0       	ldi	r26, 0x00	; 0
   1c1bc:	81 83       	std	Z+1, r24	; 0x01
   1c1be:	92 83       	std	Z+2, r25	; 0x02
   1c1c0:	a3 83       	std	Z+3, r26	; 0x03
   1c1c2:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    printf("   Last updated file: %s\n", LOCAL_MOD);
   1c1c6:	82 ee       	ldi	r24, 0xE2	; 226
   1c1c8:	96 e1       	ldi	r25, 0x16	; 22
   1c1ca:	ed b7       	in	r30, 0x3d	; 61
   1c1cc:	fe b7       	in	r31, 0x3e	; 62
   1c1ce:	95 83       	std	Z+5, r25	; 0x05
   1c1d0:	84 83       	std	Z+4, r24	; 0x04
   1c1d2:	8e e6       	ldi	r24, 0x6E	; 110
   1c1d4:	9b e4       	ldi	r25, 0x4B	; 75
   1c1d6:	a0 e0       	ldi	r26, 0x00	; 0
   1c1d8:	81 83       	std	Z+1, r24	; 0x01
   1c1da:	92 83       	std	Z+2, r25	; 0x02
   1c1dc:	a3 83       	std	Z+3, r26	; 0x03
   1c1de:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    printf("\n");
   1c1e2:	8c e6       	ldi	r24, 0x6C	; 108
   1c1e4:	9b e4       	ldi	r25, 0x4B	; 75
   1c1e6:	a0 e0       	ldi	r26, 0x00	; 0
   1c1e8:	ed b7       	in	r30, 0x3d	; 61
   1c1ea:	fe b7       	in	r31, 0x3e	; 62
   1c1ec:	81 83       	std	Z+1, r24	; 0x01
   1c1ee:	92 83       	std	Z+2, r25	; 0x02
   1c1f0:	a3 83       	std	Z+3, r26	; 0x03
   1c1f2:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
}
   1c1f6:	0f 90       	pop	r0
   1c1f8:	0f 90       	pop	r0
   1c1fa:	0f 90       	pop	r0
   1c1fc:	0f 90       	pop	r0
   1c1fe:	0f 90       	pop	r0
   1c200:	08 95       	ret

0001c202 <lcd_time>:
/// - Example output: "Thu Dec  8 21:45:05 EST 2011".
///
/// @return buf string pointer.
MEMSPACE
char *lcd_time(tm_t *t, char *buf, int max)
{
   1c202:	a1 e1       	ldi	r26, 0x11	; 17
   1c204:	b0 e0       	ldi	r27, 0x00	; 0
   1c206:	e6 e0       	ldi	r30, 0x06	; 6
   1c208:	f1 ee       	ldi	r31, 0xE1	; 225
   1c20a:	05 c6       	rjmp	.+3082   	; 0x1ce16 <__prologue_saves__+0x18>
   1c20c:	ec 01       	movw	r28, r24
   1c20e:	7b 01       	movw	r14, r22
   1c210:	8a 01       	movw	r16, r20
// normaize tm_t before output
    (void) normalize(t,0);
   1c212:	60 e0       	ldi	r22, 0x00	; 0
   1c214:	70 e0       	ldi	r23, 0x00	; 0
   1c216:	0e 94 cf 38 	call	0x719e	; 0x719e <normalize>
    memset(buf,0,max);
   1c21a:	a8 01       	movw	r20, r16
   1c21c:	60 e0       	ldi	r22, 0x00	; 0
   1c21e:	70 e0       	ldi	r23, 0x00	; 0
   1c220:	c7 01       	movw	r24, r14
   1c222:	0e 94 f7 ea 	call	0x1d5ee	; 0x1d5ee <memset>
    snprintf(buf,max-1,"%s %2d %02d:%02d:%02d",
   1c226:	88 85       	ldd	r24, Y+8	; 0x08
   1c228:	99 85       	ldd	r25, Y+9	; 0x09
   1c22a:	0e 94 b4 36 	call	0x6d68	; 0x6d68 <tm_mon_to_ascii>
   1c22e:	28 81       	ld	r18, Y
   1c230:	39 81       	ldd	r19, Y+1	; 0x01
   1c232:	ed b7       	in	r30, 0x3d	; 61
   1c234:	fe b7       	in	r31, 0x3e	; 62
   1c236:	31 8b       	std	Z+17, r19	; 0x11
   1c238:	20 8b       	std	Z+16, r18	; 0x10
   1c23a:	2a 81       	ldd	r18, Y+2	; 0x02
   1c23c:	3b 81       	ldd	r19, Y+3	; 0x03
   1c23e:	37 87       	std	Z+15, r19	; 0x0f
   1c240:	26 87       	std	Z+14, r18	; 0x0e
   1c242:	2c 81       	ldd	r18, Y+4	; 0x04
   1c244:	3d 81       	ldd	r19, Y+5	; 0x05
   1c246:	35 87       	std	Z+13, r19	; 0x0d
   1c248:	24 87       	std	Z+12, r18	; 0x0c
   1c24a:	2e 81       	ldd	r18, Y+6	; 0x06
   1c24c:	3f 81       	ldd	r19, Y+7	; 0x07
   1c24e:	33 87       	std	Z+11, r19	; 0x0b
   1c250:	22 87       	std	Z+10, r18	; 0x0a
   1c252:	91 87       	std	Z+9, r25	; 0x09
   1c254:	80 87       	std	Z+8, r24	; 0x08
   1c256:	86 e5       	ldi	r24, 0x56	; 86
   1c258:	9b e4       	ldi	r25, 0x4B	; 75
   1c25a:	a0 e0       	ldi	r26, 0x00	; 0
   1c25c:	85 83       	std	Z+5, r24	; 0x05
   1c25e:	96 83       	std	Z+6, r25	; 0x06
   1c260:	a7 83       	std	Z+7, r26	; 0x07
   1c262:	01 50       	subi	r16, 0x01	; 1
   1c264:	11 09       	sbc	r17, r1
   1c266:	14 83       	std	Z+4, r17	; 0x04
   1c268:	03 83       	std	Z+3, r16	; 0x03
   1c26a:	f2 82       	std	Z+2, r15	; 0x02
   1c26c:	e1 82       	std	Z+1, r14	; 0x01
   1c26e:	0e 94 08 47 	call	0x8e10	; 0x8e10 <snprintf_P>
        (int)t->tm_mday,
        (int)t->tm_hour,
        (int)t->tm_min,
        (int)t->tm_sec);
    return(buf);
}
   1c272:	c7 01       	movw	r24, r14
   1c274:	cd b7       	in	r28, 0x3d	; 61
   1c276:	de b7       	in	r29, 0x3e	; 62
   1c278:	61 96       	adiw	r28, 0x11	; 17
   1c27a:	e6 e0       	ldi	r30, 0x06	; 6
   1c27c:	e8 c5       	rjmp	.+3024   	; 0x1ce4e <__epilogue_restores__+0x18>

0001c27e <lcd_backlight>:

///@brief lcd_backlight LCD Backlight settings
/// @param[in] rgb: hex value 0xRRGGBB, RR,GG,BB values are 0 to 255
uint8_t  _backlight[5] = { 0x7c, '+', 0x80, 0x80, 0x80 };	/* Backlight half bright */
uint8_t lcd_backlight(uint32_t rgb)
{
   1c27e:	cf 93       	push	r28
   1c280:	00 d0       	rcall	.+0      	; 0x1c282 <lcd_backlight+0x4>
   1c282:	1f 92       	push	r1

	_backlight[2] = 0xff & (rgb >> 16);
   1c284:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <_backlight+0x2>
	_backlight[3] = 0xff & (rgb >> 8);
   1c288:	70 93 f3 02 	sts	0x02F3, r23	; 0x8002f3 <_backlight+0x3>
	_backlight[4] = 0xff & (rgb );
   1c28c:	60 93 f4 02 	sts	0x02F4, r22	; 0x8002f4 <_backlight+0x4>

	if(! i2c_fn(0x72, TW_WRITE, _backlight, sizeof(_backlight)) )
   1c290:	25 e0       	ldi	r18, 0x05	; 5
   1c292:	40 ef       	ldi	r20, 0xF0	; 240
   1c294:	52 e0       	ldi	r21, 0x02	; 2
   1c296:	60 e0       	ldi	r22, 0x00	; 0
   1c298:	82 e7       	ldi	r24, 0x72	; 114
   1c29a:	0e 94 47 2d 	call	0x5a8e	; 0x5a8e <i2c_fn>
   1c29e:	c8 2f       	mov	r28, r24
   1c2a0:	81 11       	cpse	r24, r1
   1c2a2:	0d c0       	rjmp	.+26     	; 0x1c2be <lcd_backlight+0x40>
	{
		i2c_display_task_errors();
   1c2a4:	0e 94 4b 2f 	call	0x5e96	; 0x5e96 <i2c_display_task_errors>
        printf("I2C LCD is NOT attached!\n");
   1c2a8:	8c e3       	ldi	r24, 0x3C	; 60
   1c2aa:	9b e4       	ldi	r25, 0x4B	; 75
   1c2ac:	a0 e0       	ldi	r26, 0x00	; 0
   1c2ae:	ed b7       	in	r30, 0x3d	; 61
   1c2b0:	fe b7       	in	r31, 0x3e	; 62
   1c2b2:	81 83       	std	Z+1, r24	; 0x01
   1c2b4:	92 83       	std	Z+2, r25	; 0x02
   1c2b6:	a3 83       	std	Z+3, r26	; 0x03
   1c2b8:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   1c2bc:	01 c0       	rjmp	.+2      	; 0x1c2c0 <lcd_backlight+0x42>
		return(0);
	}
	return(1);
   1c2be:	c1 e0       	ldi	r28, 0x01	; 1
}
   1c2c0:	8c 2f       	mov	r24, r28
   1c2c2:	0f 90       	pop	r0
   1c2c4:	0f 90       	pop	r0
   1c2c6:	0f 90       	pop	r0
   1c2c8:	cf 91       	pop	r28
   1c2ca:	08 95       	ret

0001c2cc <lcd_setup>:
///@brief LCD setup code
/// For a SparkFun SERLCD 2x16 display
/// Initializes the I2C deiplay update task structure 
/// Passes the structures to the interrupt handler
void lcd_setup()
{
   1c2cc:	cf 93       	push	r28
   1c2ce:	ad b7       	in	r26, 0x3d	; 61
   1c2d0:	be b7       	in	r27, 0x3e	; 62
   1c2d2:	17 97       	sbiw	r26, 0x07	; 7
   1c2d4:	0f b6       	in	r0, 0x3f	; 63
   1c2d6:	f8 94       	cli
   1c2d8:	be bf       	out	0x3e, r27	; 62
   1c2da:	0f be       	out	0x3f, r0	; 63
   1c2dc:	ad bf       	out	0x3d, r26	; 61
	int ind = 0;
    uint8_t sreg = SREG;
   1c2de:	cf b7       	in	r28, 0x3f	; 63

    printf("I2C LCD initialization start\n");
   1c2e0:	8e e1       	ldi	r24, 0x1E	; 30
   1c2e2:	9b e4       	ldi	r25, 0x4B	; 75
   1c2e4:	a0 e0       	ldi	r26, 0x00	; 0
   1c2e6:	ed b7       	in	r30, 0x3d	; 61
   1c2e8:	fe b7       	in	r31, 0x3e	; 62
   1c2ea:	81 83       	std	Z+1, r24	; 0x01
   1c2ec:	92 83       	std	Z+2, r25	; 0x02
   1c2ee:	a3 83       	std	Z+3, r26	; 0x03
   1c2f0:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>

	if(set_timers(lcd_task,1) == -1)
   1c2f4:	61 e0       	ldi	r22, 0x01	; 1
   1c2f6:	70 e0       	ldi	r23, 0x00	; 0
   1c2f8:	80 ea       	ldi	r24, 0xA0	; 160
   1c2fa:	90 ee       	ldi	r25, 0xE0	; 224
   1c2fc:	0e 94 de 34 	call	0x69bc	; 0x69bc <set_timers>
   1c300:	01 96       	adiw	r24, 0x01	; 1
   1c302:	51 f4       	brne	.+20     	; 0x1c318 <lcd_setup+0x4c>
        printf("lcd_task init failed\n");
   1c304:	88 e0       	ldi	r24, 0x08	; 8
   1c306:	9b e4       	ldi	r25, 0x4B	; 75
   1c308:	a0 e0       	ldi	r26, 0x00	; 0
   1c30a:	ed b7       	in	r30, 0x3d	; 61
   1c30c:	fe b7       	in	r31, 0x3e	; 62
   1c30e:	81 83       	std	Z+1, r24	; 0x01
   1c310:	92 83       	std	Z+2, r25	; 0x02
   1c312:	a3 83       	std	Z+3, r26	; 0x03
   1c314:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>

	i2c_init(100000);
   1c318:	60 ea       	ldi	r22, 0xA0	; 160
   1c31a:	76 e8       	ldi	r23, 0x86	; 134
   1c31c:	81 e0       	ldi	r24, 0x01	; 1
   1c31e:	90 e0       	ldi	r25, 0x00	; 0
   1c320:	0e 94 4e 2c 	call	0x589c	; 0x589c <i2c_init>

	i2c_task_init();
   1c324:	0e 94 0f 2c 	call	0x581e	; 0x581e <i2c_task_init>

	cli();
   1c328:	f8 94       	cli

	// Default startup message
    sprintf((char *) _line1, "%-16s", "HP85Disk V2");
   1c32a:	86 e0       	ldi	r24, 0x06	; 6
   1c32c:	97 e1       	ldi	r25, 0x17	; 23
   1c32e:	ed b7       	in	r30, 0x3d	; 61
   1c330:	fe b7       	in	r31, 0x3e	; 62
   1c332:	97 83       	std	Z+7, r25	; 0x07
   1c334:	86 83       	std	Z+6, r24	; 0x06
   1c336:	82 e0       	ldi	r24, 0x02	; 2
   1c338:	9b e4       	ldi	r25, 0x4B	; 75
   1c33a:	a0 e0       	ldi	r26, 0x00	; 0
   1c33c:	83 83       	std	Z+3, r24	; 0x03
   1c33e:	94 83       	std	Z+4, r25	; 0x04
   1c340:	a5 83       	std	Z+5, r26	; 0x05
   1c342:	8c e0       	ldi	r24, 0x0C	; 12
   1c344:	93 e0       	ldi	r25, 0x03	; 3
   1c346:	92 83       	std	Z+2, r25	; 0x02
   1c348:	81 83       	std	Z+1, r24	; 0x01
   1c34a:	0e 94 1c 47 	call	0x8e38	; 0x8e38 <sprintf_P>
    sprintf((char *) _line2, "%-16s", "(C)Mike Gore");
   1c34e:	82 e1       	ldi	r24, 0x12	; 18
   1c350:	97 e1       	ldi	r25, 0x17	; 23
   1c352:	ed b7       	in	r30, 0x3d	; 61
   1c354:	fe b7       	in	r31, 0x3e	; 62
   1c356:	97 83       	std	Z+7, r25	; 0x07
   1c358:	86 83       	std	Z+6, r24	; 0x06
   1c35a:	8c ef       	ldi	r24, 0xFC	; 252
   1c35c:	9a e4       	ldi	r25, 0x4A	; 74
   1c35e:	a0 e0       	ldi	r26, 0x00	; 0
   1c360:	83 83       	std	Z+3, r24	; 0x03
   1c362:	94 83       	std	Z+4, r25	; 0x04
   1c364:	a5 83       	std	Z+5, r26	; 0x05
   1c366:	85 ef       	ldi	r24, 0xF5	; 245
   1c368:	92 e0       	ldi	r25, 0x02	; 2
   1c36a:	92 83       	std	Z+2, r25	; 0x02
   1c36c:	81 83       	std	Z+1, r24	; 0x01
   1c36e:	0e 94 1c 47 	call	0x8e38	; 0x8e38 <sprintf_P>

	i2c_task_op[ind++] = i2c_task_op_add(0x72, TW_WRITE, _cmd1, sizeof(_cmd1));
   1c372:	22 e0       	ldi	r18, 0x02	; 2
   1c374:	41 e2       	ldi	r20, 0x21	; 33
   1c376:	53 e0       	ldi	r21, 0x03	; 3
   1c378:	60 e0       	ldi	r22, 0x00	; 0
   1c37a:	82 e7       	ldi	r24, 0x72	; 114
   1c37c:	0e 94 24 2c 	call	0x5848	; 0x5848 <i2c_task_op_add>
   1c380:	90 93 5f 17 	sts	0x175F, r25	; 0x80175f <i2c_task_op+0x1>
   1c384:	80 93 5e 17 	sts	0x175E, r24	; 0x80175e <i2c_task_op>
	i2c_task_op[ind++] = i2c_task_op_add(0x72, TW_WRITE, _line1, 16);
   1c388:	20 e1       	ldi	r18, 0x10	; 16
   1c38a:	4c e0       	ldi	r20, 0x0C	; 12
   1c38c:	53 e0       	ldi	r21, 0x03	; 3
   1c38e:	60 e0       	ldi	r22, 0x00	; 0
   1c390:	82 e7       	ldi	r24, 0x72	; 114
   1c392:	0e 94 24 2c 	call	0x5848	; 0x5848 <i2c_task_op_add>
   1c396:	90 93 61 17 	sts	0x1761, r25	; 0x801761 <i2c_task_op+0x3>
   1c39a:	80 93 60 17 	sts	0x1760, r24	; 0x801760 <i2c_task_op+0x2>
	i2c_task_op[ind++] = i2c_task_op_add(0x72, TW_WRITE, _cmd2, sizeof(_cmd2));
   1c39e:	22 e0       	ldi	r18, 0x02	; 2
   1c3a0:	4a e0       	ldi	r20, 0x0A	; 10
   1c3a2:	53 e0       	ldi	r21, 0x03	; 3
   1c3a4:	60 e0       	ldi	r22, 0x00	; 0
   1c3a6:	82 e7       	ldi	r24, 0x72	; 114
   1c3a8:	0e 94 24 2c 	call	0x5848	; 0x5848 <i2c_task_op_add>
   1c3ac:	90 93 63 17 	sts	0x1763, r25	; 0x801763 <i2c_task_op+0x5>
   1c3b0:	80 93 62 17 	sts	0x1762, r24	; 0x801762 <i2c_task_op+0x4>
	i2c_task_op[ind++] = i2c_task_op_add(0x72, TW_WRITE, _line2, 16);
   1c3b4:	20 e1       	ldi	r18, 0x10	; 16
   1c3b6:	45 ef       	ldi	r20, 0xF5	; 245
   1c3b8:	52 e0       	ldi	r21, 0x02	; 2
   1c3ba:	60 e0       	ldi	r22, 0x00	; 0
   1c3bc:	82 e7       	ldi	r24, 0x72	; 114
   1c3be:	0e 94 24 2c 	call	0x5848	; 0x5848 <i2c_task_op_add>
   1c3c2:	90 93 65 17 	sts	0x1765, r25	; 0x801765 <i2c_task_op+0x7>
   1c3c6:	80 93 64 17 	sts	0x1764, r24	; 0x801764 <i2c_task_op+0x6>

	SREG = sreg;
   1c3ca:	cf bf       	out	0x3f, r28	; 63

    i2c_task_run();
   1c3cc:	0e 94 e4 2c 	call	0x59c8	; 0x59c8 <i2c_task_run>
	// wait long enough for us to see the startup message
    delayms(1000);
   1c3d0:	68 ee       	ldi	r22, 0xE8	; 232
   1c3d2:	73 e0       	ldi	r23, 0x03	; 3
   1c3d4:	80 e0       	ldi	r24, 0x00	; 0
   1c3d6:	90 e0       	ldi	r25, 0x00	; 0
   1c3d8:	0e 94 8a 28 	call	0x5114	; 0x5114 <delayms>
	
	// Verify the task finished - it normally takes < 30mS
    if(!i2c_task_done())
   1c3dc:	0e 94 c5 2c 	call	0x598a	; 0x598a <i2c_task_done>
   1c3e0:	81 11       	cpse	r24, r1
   1c3e2:	0c c0       	rjmp	.+24     	; 0x1c3fc <lcd_setup+0x130>
	{
		i2c_display_task_errors();
   1c3e4:	0e 94 4b 2f 	call	0x5e96	; 0x5e96 <i2c_display_task_errors>
        printf("I2C LCD is NOT attached!\n");
   1c3e8:	82 ee       	ldi	r24, 0xE2	; 226
   1c3ea:	9a e4       	ldi	r25, 0x4A	; 74
   1c3ec:	a0 e0       	ldi	r26, 0x00	; 0
   1c3ee:	ed b7       	in	r30, 0x3d	; 61
   1c3f0:	fe b7       	in	r31, 0x3e	; 62
   1c3f2:	81 83       	std	Z+1, r24	; 0x01
   1c3f4:	92 83       	std	Z+2, r25	; 0x02
   1c3f6:	a3 83       	std	Z+3, r26	; 0x03
   1c3f8:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
	}

    sep();
   1c3fc:	0e 94 3f 32 	call	0x647e	; 0x647e <sep>
}
   1c400:	ad b7       	in	r26, 0x3d	; 61
   1c402:	be b7       	in	r27, 0x3e	; 62
   1c404:	17 96       	adiw	r26, 0x07	; 7
   1c406:	0f b6       	in	r0, 0x3f	; 63
   1c408:	f8 94       	cli
   1c40a:	be bf       	out	0x3e, r27	; 62
   1c40c:	0f be       	out	0x3f, r0	; 63
   1c40e:	ad bf       	out	0x3d, r26	; 61
   1c410:	cf 91       	pop	r28
   1c412:	08 95       	ret

0001c414 <i2c_lcd_task>:


///@brief Update the LCD wile the system is running
/// Display SD card fault status and the current time
void i2c_lcd_task()
{
   1c414:	af e2       	ldi	r26, 0x2F	; 47
   1c416:	b0 e0       	ldi	r27, 0x00	; 0
   1c418:	ef e0       	ldi	r30, 0x0F	; 15
   1c41a:	f2 ee       	ldi	r31, 0xE2	; 226
   1c41c:	ff c4       	rjmp	.+2558   	; 0x1ce1c <__prologue_saves__+0x1e>
	char buf[32];
	uint8_t sreg=SREG;
   1c41e:	1f b7       	in	r17, 0x3f	; 63
    ts_t ts;

	cli();
   1c420:	f8 94       	cli
	if(!mmc_ins_status())
   1c422:	0e 94 1e 6f 	call	0xde3c	; 0xde3c <mmc_ins_status>
   1c426:	89 2b       	or	r24, r25
   1c428:	49 f4       	brne	.+18     	; 0x1c43c <i2c_lcd_task+0x28>
	{
		sprintf((char *) _line2,"%-16s", "SD Card Fault");
   1c42a:	8f e1       	ldi	r24, 0x1F	; 31
   1c42c:	97 e1       	ldi	r25, 0x17	; 23
   1c42e:	ed b7       	in	r30, 0x3d	; 61
   1c430:	fe b7       	in	r31, 0x3e	; 62
   1c432:	97 83       	std	Z+7, r25	; 0x07
   1c434:	86 83       	std	Z+6, r24	; 0x06
   1c436:	8c ed       	ldi	r24, 0xDC	; 220
   1c438:	9a e4       	ldi	r25, 0x4A	; 74
   1c43a:	17 c0       	rjmp	.+46     	; 0x1c46a <i2c_lcd_task+0x56>
	}
	else
	{
		clock_gettime(0, (ts_t *) &ts);
   1c43c:	be 01       	movw	r22, r28
   1c43e:	68 5d       	subi	r22, 0xD8	; 216
   1c440:	7f 4f       	sbci	r23, 0xFF	; 255
   1c442:	80 e0       	ldi	r24, 0x00	; 0
   1c444:	90 e0       	ldi	r25, 0x00	; 0
   1c446:	0e 94 ee 33 	call	0x67dc	; 0x67dc <clock_gettime>
		sprintf((char *) _line2, "%-16s", lcd_time(gmtime(&(ts.tv_sec)),buf,sizeof(buf)-1) );
   1c44a:	ce 01       	movw	r24, r28
   1c44c:	88 96       	adiw	r24, 0x28	; 40
   1c44e:	0e 94 d8 37 	call	0x6fb0	; 0x6fb0 <gmtime>
   1c452:	4f e1       	ldi	r20, 0x1F	; 31
   1c454:	50 e0       	ldi	r21, 0x00	; 0
   1c456:	be 01       	movw	r22, r28
   1c458:	68 5f       	subi	r22, 0xF8	; 248
   1c45a:	7f 4f       	sbci	r23, 0xFF	; 255
   1c45c:	d2 de       	rcall	.-604    	; 0x1c202 <lcd_time>
   1c45e:	ed b7       	in	r30, 0x3d	; 61
   1c460:	fe b7       	in	r31, 0x3e	; 62
   1c462:	97 83       	std	Z+7, r25	; 0x07
   1c464:	86 83       	std	Z+6, r24	; 0x06
   1c466:	86 ed       	ldi	r24, 0xD6	; 214
   1c468:	9a e4       	ldi	r25, 0x4A	; 74
   1c46a:	a0 e0       	ldi	r26, 0x00	; 0
   1c46c:	83 83       	std	Z+3, r24	; 0x03
   1c46e:	94 83       	std	Z+4, r25	; 0x04
   1c470:	a5 83       	std	Z+5, r26	; 0x05
   1c472:	85 ef       	ldi	r24, 0xF5	; 245
   1c474:	92 e0       	ldi	r25, 0x02	; 2
   1c476:	92 83       	std	Z+2, r25	; 0x02
   1c478:	81 83       	std	Z+1, r24	; 0x01
   1c47a:	0e 94 1c 47 	call	0x8e38	; 0x8e38 <sprintf_P>
		// sprintf((char *) _line2,"%16ld.%03ld", (long) ts.tv_sec, (long) ts.tv_nsec / 1000000UL);
	}
	SREG=sreg;
   1c47e:	1f bf       	out	0x3f, r17	; 63

    i2c_task_run();
   1c480:	0e 94 e4 2c 	call	0x59c8	; 0x59c8 <i2c_task_run>
}
   1c484:	af 96       	adiw	r28, 0x2f	; 47
   1c486:	e3 e0       	ldi	r30, 0x03	; 3
   1c488:	e5 c4       	rjmp	.+2506   	; 0x1ce54 <__epilogue_restores__+0x1e>

0001c48a <gpib_user_task>:
///@brief GPIB callback from gpib_read_byte()
/// This function gets called evry time trough the read loop
/// This task run in the forground - is not an interrupt task
void gpib_user_task()
{
	uint8_t sreg = SREG;
   1c48a:	8f b7       	in	r24, 0x3f	; 63

	cli();
   1c48c:	f8 94       	cli
	if(lcd_display_time > 100) // increments at 1000HZ
   1c48e:	20 91 f2 19 	lds	r18, 0x19F2	; 0x8019f2 <lcd_display_time>
   1c492:	30 91 f3 19 	lds	r19, 0x19F3	; 0x8019f3 <lcd_display_time+0x1>
   1c496:	25 36       	cpi	r18, 0x65	; 101
   1c498:	31 05       	cpc	r19, r1
   1c49a:	3c f0       	brlt	.+14     	; 0x1c4aa <gpib_user_task+0x20>
	{
		lcd_display_time = 0;
   1c49c:	10 92 f3 19 	sts	0x19F3, r1	; 0x8019f3 <lcd_display_time+0x1>
   1c4a0:	10 92 f2 19 	sts	0x19F2, r1	; 0x8019f2 <lcd_display_time>
		SREG = sreg;
   1c4a4:	8f bf       	out	0x3f, r24	; 63
		i2c_lcd_task();
   1c4a6:	b6 cf       	rjmp	.-148    	; 0x1c414 <i2c_lcd_task>
		return;
   1c4a8:	08 95       	ret
	}
	SREG = sreg;
   1c4aa:	8f bf       	out	0x3f, r24	; 63
   1c4ac:	08 95       	ret

0001c4ae <help>:
/// @brief  Display the main help menu - calls all other help menus
/// @return  void
/// @see gpib_help()
/// @see fatfs_help()
void help()
{
   1c4ae:	00 d0       	rcall	.+0      	; 0x1c4b0 <help+0x2>
   1c4b0:	1f 92       	push	r1

    copyright();
   1c4b2:	50 de       	rcall	.-864    	; 0x1c154 <copyright>

	printf("help     - displays this help menu\n");
   1c4b4:	82 eb       	ldi	r24, 0xB2	; 178
   1c4b6:	9a e4       	ldi	r25, 0x4A	; 74
   1c4b8:	a0 e0       	ldi	r26, 0x00	; 0
   1c4ba:	ed b7       	in	r30, 0x3d	; 61
   1c4bc:	fe b7       	in	r31, 0x3e	; 62
   1c4be:	81 83       	std	Z+1, r24	; 0x01
   1c4c0:	92 83       	std	Z+2, r25	; 0x02
   1c4c2:	a3 83       	std	Z+3, r26	; 0x03
   1c4c4:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>

#ifdef FATFS_TESTS
    fatfs_help(0);
   1c4c8:	80 e0       	ldi	r24, 0x00	; 0
   1c4ca:	90 e0       	ldi	r25, 0x00	; 0
   1c4cc:	0e 94 45 73 	call	0xe68a	; 0xe68a <fatfs_help>
#endif

#ifdef POSIX_TESTS
    posix_help(0);
   1c4d0:	80 e0       	ldi	r24, 0x00	; 0
   1c4d2:	90 e0       	ldi	r25, 0x00	; 0
   1c4d4:	0e 94 9e 7e 	call	0xfd3c	; 0xfd3c <posix_help>
#endif

#ifdef LIF_SUPPORT
    lif_help(0);
   1c4d8:	80 e0       	ldi	r24, 0x00	; 0
   1c4da:	90 e0       	ldi	r25, 0x00	; 0
   1c4dc:	0e 94 cb c0 	call	0x18196	; 0x18196 <lif_help>

#ifdef TELEDISK
    td0_help(0);
#endif

	drives_help(0);
   1c4e0:	80 e0       	ldi	r24, 0x00	; 0
   1c4e2:	0e 94 26 9c 	call	0x1384c	; 0x1384c <drives_help>

    printf(
   1c4e6:	88 ef       	ldi	r24, 0xF8	; 248
   1c4e8:	99 e4       	ldi	r25, 0x49	; 73
   1c4ea:	a0 e0       	ldi	r26, 0x00	; 0
   1c4ec:	ed b7       	in	r30, 0x3d	; 61
   1c4ee:	fe b7       	in	r31, 0x3e	; 62
   1c4f0:	81 83       	std	Z+1, r24	; 0x01
   1c4f2:	92 83       	std	Z+2, r25	; 0x02
   1c4f4:	a3 83       	std	Z+3, r26	; 0x03
   1c4f6:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
        "reset   - reset emulator\n"
        "setdate - set date\n"
        "time    - display current time\n"
        "\n"
        );
}
   1c4fa:	0f 90       	pop	r0
   1c4fc:	0f 90       	pop	r0
   1c4fe:	0f 90       	pop	r0
   1c500:	08 95       	ret

0001c502 <user_task.part.1>:
/// If a keypress is detected read a line from the uart
/// parse the result and call various user functions.
/// ? will return a list of fuctions and paramters permitted
/// @param[in] gpib - if non-zero run gpib while there are no user commands
/// @return  void
void user_task(uint8_t gpib)
   1c502:	6f 92       	push	r6
   1c504:	7f 92       	push	r7
   1c506:	8f 92       	push	r8
   1c508:	cf 92       	push	r12
   1c50a:	df 92       	push	r13
   1c50c:	ef 92       	push	r14
   1c50e:	ff 92       	push	r15
   1c510:	0f 93       	push	r16
   1c512:	1f 93       	push	r17
   1c514:	cf 93       	push	r28
   1c516:	df 93       	push	r29
   1c518:	cd b7       	in	r28, 0x3d	; 61
   1c51a:	de b7       	in	r29, 0x3e	; 62
   1c51c:	cb 56       	subi	r28, 0x6B	; 107
   1c51e:	d1 40       	sbci	r29, 0x01	; 1
   1c520:	0f b6       	in	r0, 0x3f	; 63
   1c522:	f8 94       	cli
   1c524:	de bf       	out	0x3e, r29	; 62
   1c526:	0f be       	out	0x3f, r0	; 63
   1c528:	cd bf       	out	0x3d, r28	; 61
        gpib_task();

    if(!kbhit(0))
        return;

    printf("\n>");
   1c52a:	85 ef       	ldi	r24, 0xF5	; 245
   1c52c:	99 e4       	ldi	r25, 0x49	; 73
   1c52e:	a0 e0       	ldi	r26, 0x00	; 0
   1c530:	ed b7       	in	r30, 0x3d	; 61
   1c532:	fe b7       	in	r31, 0x3e	; 62
   1c534:	81 83       	std	Z+1, r24	; 0x01
   1c536:	92 83       	std	Z+2, r25	; 0x02
   1c538:	a3 83       	std	Z+3, r26	; 0x03
   1c53a:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>

	memset(line,0,sizeof(line)-1);
   1c53e:	8e 01       	movw	r16, r28
   1c540:	0a 5f       	subi	r16, 0xFA	; 250
   1c542:	1f 4f       	sbci	r17, 0xFF	; 255
   1c544:	8f ef       	ldi	r24, 0xFF	; 255
   1c546:	f8 01       	movw	r30, r16
   1c548:	11 92       	st	Z+, r1
   1c54a:	8a 95       	dec	r24
   1c54c:	e9 f7       	brne	.-6      	; 0x1c548 <user_task.part.1+0x46>

    fgets(line,sizeof(line)-2,stdin);
   1c54e:	40 91 c7 1c 	lds	r20, 0x1CC7	; 0x801cc7 <__iob>
   1c552:	50 91 c8 1c 	lds	r21, 0x1CC8	; 0x801cc8 <__iob+0x1>
   1c556:	6e ef       	ldi	r22, 0xFE	; 254
   1c558:	70 e0       	ldi	r23, 0x00	; 0
   1c55a:	c8 01       	movw	r24, r16
   1c55c:	0e 94 8a 76 	call	0xed14	; 0xed14 <fgets>
    trim_tail(line);
   1c560:	c8 01       	movw	r24, r16
   1c562:	0e 94 4f 32 	call	0x649e	; 0x649e <trim_tail>
    argc = split_args(line,argv,50);
   1c566:	42 e3       	ldi	r20, 0x32	; 50
   1c568:	50 e0       	ldi	r21, 0x00	; 0
   1c56a:	be 01       	movw	r22, r28
   1c56c:	6a 5f       	subi	r22, 0xFA	; 250
   1c56e:	7e 4f       	sbci	r23, 0xFE	; 254
   1c570:	c8 01       	movw	r24, r16
   1c572:	0e 94 d5 32 	call	0x65aa	; 0x65aa <split_args>
   1c576:	6c 01       	movw	r12, r24

	if(debug_input)
   1c578:	80 91 f4 19 	lds	r24, 0x19F4	; 0x8019f4 <debug_input>
   1c57c:	81 11       	cpse	r24, r1
   1c57e:	0a c0       	rjmp	.+20     	; 0x1c594 <user_task.part.1+0x92>
			printf("   [%s]\n", argv[i]);
	}

    ind = 0;
	result = 0;
    ptr = argv[ind++];
   1c580:	ca 5f       	subi	r28, 0xFA	; 250
   1c582:	de 4f       	sbci	r29, 0xFE	; 254
   1c584:	e8 80       	ld	r14, Y
   1c586:	f9 80       	ldd	r15, Y+1	; 0x01
   1c588:	c6 50       	subi	r28, 0x06	; 6
   1c58a:	d1 40       	sbci	r29, 0x01	; 1

    if(!ptr || argc < 1)
   1c58c:	e1 14       	cp	r14, r1
   1c58e:	f1 04       	cpc	r15, r1
   1c590:	51 f5       	brne	.+84     	; 0x1c5e6 <user_task.part.1+0xe4>
   1c592:	b7 c0       	rjmp	.+366    	; 0x1c702 <user_task.part.1+0x200>
    trim_tail(line);
    argc = split_args(line,argv,50);

	if(debug_input)
	{
        printf("Argument count = %d\n", argc);
   1c594:	ed b7       	in	r30, 0x3d	; 61
   1c596:	fe b7       	in	r31, 0x3e	; 62
   1c598:	d5 82       	std	Z+5, r13	; 0x05
   1c59a:	c4 82       	std	Z+4, r12	; 0x04
   1c59c:	80 ee       	ldi	r24, 0xE0	; 224
   1c59e:	99 e4       	ldi	r25, 0x49	; 73
   1c5a0:	a0 e0       	ldi	r26, 0x00	; 0
   1c5a2:	81 83       	std	Z+1, r24	; 0x01
   1c5a4:	92 83       	std	Z+2, r25	; 0x02
   1c5a6:	a3 83       	std	Z+3, r26	; 0x03
   1c5a8:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   1c5ac:	ce 01       	movw	r24, r28
   1c5ae:	8a 5f       	subi	r24, 0xFA	; 250
   1c5b0:	9e 4f       	sbci	r25, 0xFE	; 254
   1c5b2:	7c 01       	movw	r14, r24
		for(i=0;i<argc;++i)
   1c5b4:	00 e0       	ldi	r16, 0x00	; 0
   1c5b6:	10 e0       	ldi	r17, 0x00	; 0
			printf("   [%s]\n", argv[i]);
   1c5b8:	87 ed       	ldi	r24, 0xD7	; 215
   1c5ba:	99 e4       	ldi	r25, 0x49	; 73
   1c5bc:	3c 01       	movw	r6, r24
   1c5be:	81 2c       	mov	r8, r1
    argc = split_args(line,argv,50);

	if(debug_input)
	{
        printf("Argument count = %d\n", argc);
		for(i=0;i<argc;++i)
   1c5c0:	0c 15       	cp	r16, r12
   1c5c2:	1d 05       	cpc	r17, r13
   1c5c4:	ec f6       	brge	.-70     	; 0x1c580 <user_task.part.1+0x7e>
			printf("   [%s]\n", argv[i]);
   1c5c6:	f7 01       	movw	r30, r14
   1c5c8:	81 91       	ld	r24, Z+
   1c5ca:	91 91       	ld	r25, Z+
   1c5cc:	7f 01       	movw	r14, r30
   1c5ce:	ed b7       	in	r30, 0x3d	; 61
   1c5d0:	fe b7       	in	r31, 0x3e	; 62
   1c5d2:	95 83       	std	Z+5, r25	; 0x05
   1c5d4:	84 83       	std	Z+4, r24	; 0x04
   1c5d6:	61 82       	std	Z+1, r6	; 0x01
   1c5d8:	72 82       	std	Z+2, r7	; 0x02
   1c5da:	83 82       	std	Z+3, r8	; 0x03
   1c5dc:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    argc = split_args(line,argv,50);

	if(debug_input)
	{
        printf("Argument count = %d\n", argc);
		for(i=0;i<argc;++i)
   1c5e0:	0f 5f       	subi	r16, 0xFF	; 255
   1c5e2:	1f 4f       	sbci	r17, 0xFF	; 255
   1c5e4:	ed cf       	rjmp	.-38     	; 0x1c5c0 <user_task.part.1+0xbe>

    ind = 0;
	result = 0;
    ptr = argv[ind++];

    if(!ptr || argc < 1)
   1c5e6:	1c 14       	cp	r1, r12
   1c5e8:	1d 04       	cpc	r1, r13
   1c5ea:	0c f0       	brlt	.+2      	; 0x1c5ee <user_task.part.1+0xec>
   1c5ec:	8a c0       	rjmp	.+276    	; 0x1c702 <user_task.part.1+0x200>
    {
        result = 1;
    }
    else if (MATCHI(ptr,"input") )
   1c5ee:	64 e3       	ldi	r22, 0x34	; 52
   1c5f0:	77 e1       	ldi	r23, 0x17	; 23
   1c5f2:	c7 01       	movw	r24, r14
   1c5f4:	0e 94 7d 32 	call	0x64fa	; 0x64fa <MATCHI>
   1c5f8:	89 2b       	or	r24, r25
   1c5fa:	d9 f0       	breq	.+54     	; 0x1c632 <user_task.part.1+0x130>
    {
        debug_input = !debug_input;
   1c5fc:	80 91 f4 19 	lds	r24, 0x19F4	; 0x8019f4 <debug_input>
   1c600:	91 e0       	ldi	r25, 0x01	; 1
   1c602:	81 11       	cpse	r24, r1
   1c604:	90 e0       	ldi	r25, 0x00	; 0
   1c606:	90 93 f4 19 	sts	0x19F4, r25	; 0x8019f4 <debug_input>
		printf("Input debugging: %s\n", debug_input ? "ON" : "OFF");
   1c60a:	88 23       	and	r24, r24
   1c60c:	19 f0       	breq	.+6      	; 0x1c614 <user_task.part.1+0x112>
   1c60e:	80 e3       	ldi	r24, 0x30	; 48
   1c610:	97 e1       	ldi	r25, 0x17	; 23
   1c612:	02 c0       	rjmp	.+4      	; 0x1c618 <user_task.part.1+0x116>
   1c614:	8d e2       	ldi	r24, 0x2D	; 45
   1c616:	97 e1       	ldi	r25, 0x17	; 23
   1c618:	ed b7       	in	r30, 0x3d	; 61
   1c61a:	fe b7       	in	r31, 0x3e	; 62
   1c61c:	95 83       	std	Z+5, r25	; 0x05
   1c61e:	84 83       	std	Z+4, r24	; 0x04
   1c620:	82 ec       	ldi	r24, 0xC2	; 194
   1c622:	99 e4       	ldi	r25, 0x49	; 73
   1c624:	a0 e0       	ldi	r26, 0x00	; 0
   1c626:	81 83       	std	Z+1, r24	; 0x01
   1c628:	92 83       	std	Z+2, r25	; 0x02
   1c62a:	a3 83       	std	Z+3, r26	; 0x03
   1c62c:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   1c630:	68 c0       	rjmp	.+208    	; 0x1c702 <user_task.part.1+0x200>

    }
#endif

#ifdef LCD_SUPPORT
    else if (MATCHI(ptr,"backlight") )
   1c632:	6a e3       	ldi	r22, 0x3A	; 58
   1c634:	77 e1       	ldi	r23, 0x17	; 23
   1c636:	c7 01       	movw	r24, r14
   1c638:	0e 94 7d 32 	call	0x64fa	; 0x64fa <MATCHI>
   1c63c:	89 2b       	or	r24, r25
   1c63e:	f9 f0       	breq	.+62     	; 0x1c67e <user_task.part.1+0x17c>
    {
		uint32_t rgb;
        ptr = argv[ind];
   1c640:	c8 5f       	subi	r28, 0xF8	; 248
   1c642:	de 4f       	sbci	r29, 0xFE	; 254
   1c644:	e8 80       	ld	r14, Y
   1c646:	f9 80       	ldd	r15, Y+1	; 0x01
   1c648:	c8 50       	subi	r28, 0x08	; 8
   1c64a:	d1 40       	sbci	r29, 0x01	; 1
        if(*ptr == '=')
   1c64c:	f7 01       	movw	r30, r14
   1c64e:	80 81       	ld	r24, Z
   1c650:	8d 33       	cpi	r24, 0x3D	; 61
   1c652:	19 f4       	brne	.+6      	; 0x1c65a <user_task.part.1+0x158>
            ++ind;
   1c654:	82 e0       	ldi	r24, 0x02	; 2
   1c656:	90 e0       	ldi	r25, 0x00	; 0
   1c658:	02 c0       	rjmp	.+4      	; 0x1c65e <user_task.part.1+0x15c>
			printf("   [%s]\n", argv[i]);
	}

    ind = 0;
	result = 0;
    ptr = argv[ind++];
   1c65a:	81 e0       	ldi	r24, 0x01	; 1
   1c65c:	90 e0       	ldi	r25, 0x00	; 0
    {
		uint32_t rgb;
        ptr = argv[ind];
        if(*ptr == '=')
            ++ind;
        rgb = get_value(argv[ind]);
   1c65e:	88 0f       	add	r24, r24
   1c660:	99 1f       	adc	r25, r25
   1c662:	e6 e0       	ldi	r30, 0x06	; 6
   1c664:	f1 e0       	ldi	r31, 0x01	; 1
   1c666:	ec 0f       	add	r30, r28
   1c668:	fd 1f       	adc	r31, r29
   1c66a:	e8 0f       	add	r30, r24
   1c66c:	f9 1f       	adc	r31, r25
   1c66e:	80 81       	ld	r24, Z
   1c670:	91 81       	ldd	r25, Z+1	; 0x01
   1c672:	0e 94 74 33 	call	0x66e8	; 0x66e8 <get_value>
		result = lcd_backlight(rgb);
   1c676:	03 de       	rcall	.-1018   	; 0x1c27e <lcd_backlight>
   1c678:	08 2f       	mov	r16, r24
   1c67a:	10 e0       	ldi	r17, 0x00	; 0
   1c67c:	44 c0       	rjmp	.+136    	; 0x1c706 <user_task.part.1+0x204>
    }
#endif

    else if ( MATCH(ptr,"mem") )
   1c67e:	64 e4       	ldi	r22, 0x44	; 68
   1c680:	77 e1       	ldi	r23, 0x17	; 23
   1c682:	c7 01       	movw	r24, r14
   1c684:	0e 94 69 32 	call	0x64d2	; 0x64d2 <MATCH>
   1c688:	89 2b       	or	r24, r25
   1c68a:	19 f0       	breq	.+6      	; 0x1c692 <user_task.part.1+0x190>
    {
        PrintFree();
   1c68c:	0e 94 4b 27 	call	0x4e96	; 0x4e96 <PrintFree>
   1c690:	38 c0       	rjmp	.+112    	; 0x1c702 <user_task.part.1+0x200>
        result = 1;

    }
    else if ( MATCHI(ptr,"reset") )
   1c692:	69 eb       	ldi	r22, 0xB9	; 185
   1c694:	7d e0       	ldi	r23, 0x0D	; 13
   1c696:	c7 01       	movw	r24, r14
   1c698:	0e 94 7d 32 	call	0x64fa	; 0x64fa <MATCHI>
   1c69c:	89 2b       	or	r24, r25
   1c69e:	51 f0       	breq	.+20     	; 0x1c6b4 <user_task.part.1+0x1b2>
    {
        cli();
   1c6a0:	f8 94       	cli
        uart_rx_flush(0);
   1c6a2:	80 e0       	ldi	r24, 0x00	; 0
   1c6a4:	0e 94 d2 28 	call	0x51a4	; 0x51a4 <uart_rx_flush>
        cli();
   1c6a8:	f8 94       	cli
        MCUSR = (1 << EXTRF);
   1c6aa:	82 e0       	ldi	r24, 0x02	; 2
   1c6ac:	84 bf       	out	0x34, r24	; 52
        RESET();
   1c6ae:	e0 e0       	ldi	r30, 0x00	; 0
   1c6b0:	fc ef       	ldi	r31, 0xFC	; 252
   1c6b2:	09 95       	icall
		// should not return!
        result = 1;
    }
    else if ( MATCHI(ptr,"setdate" ) )
   1c6b4:	68 e4       	ldi	r22, 0x48	; 72
   1c6b6:	77 e1       	ldi	r23, 0x17	; 23
   1c6b8:	c7 01       	movw	r24, r14
   1c6ba:	0e 94 7d 32 	call	0x64fa	; 0x64fa <MATCHI>
   1c6be:	89 2b       	or	r24, r25
   1c6c0:	19 f0       	breq	.+6      	; 0x1c6c8 <user_task.part.1+0x1c6>
    {
        setdate();
   1c6c2:	0e 94 b8 3b 	call	0x7770	; 0x7770 <setdate>
   1c6c6:	07 c0       	rjmp	.+14     	; 0x1c6d6 <user_task.part.1+0x1d4>
        display_clock();
        result = 1;
    }
    else if ( MATCHI(ptr,"time") )
   1c6c8:	60 e5       	ldi	r22, 0x50	; 80
   1c6ca:	77 e1       	ldi	r23, 0x17	; 23
   1c6cc:	c7 01       	movw	r24, r14
   1c6ce:	0e 94 7d 32 	call	0x64fa	; 0x64fa <MATCHI>
   1c6d2:	89 2b       	or	r24, r25
   1c6d4:	19 f0       	breq	.+6      	; 0x1c6dc <user_task.part.1+0x1da>
    {
        display_clock();
   1c6d6:	0e 94 d4 3d 	call	0x7ba8	; 0x7ba8 <display_clock>
   1c6da:	13 c0       	rjmp	.+38     	; 0x1c702 <user_task.part.1+0x200>
        result = 1;
    }
    else if ( MATCHI(ptr,"help") || MATCHI(ptr,"?") )
   1c6dc:	64 e7       	ldi	r22, 0x74	; 116
   1c6de:	76 e1       	ldi	r23, 0x16	; 22
   1c6e0:	c7 01       	movw	r24, r14
   1c6e2:	0e 94 7d 32 	call	0x64fa	; 0x64fa <MATCHI>
   1c6e6:	89 2b       	or	r24, r25
    {
        help();
   1c6e8:	11 f0       	breq	.+4      	; 0x1c6ee <user_task.part.1+0x1ec>
   1c6ea:	e1 de       	rcall	.-574    	; 0x1c4ae <help>
   1c6ec:	0a c0       	rjmp	.+20     	; 0x1c702 <user_task.part.1+0x200>
    else if ( MATCHI(ptr,"time") )
    {
        display_clock();
        result = 1;
    }
    else if ( MATCHI(ptr,"help") || MATCHI(ptr,"?") )
   1c6ee:	6a e7       	ldi	r22, 0x7A	; 122
   1c6f0:	76 e1       	ldi	r23, 0x16	; 22
   1c6f2:	c7 01       	movw	r24, r14
   1c6f4:	0e 94 7d 32 	call	0x64fa	; 0x64fa <MATCHI>
   1c6f8:	89 2b       	or	r24, r25
   1c6fa:	b9 f7       	brne	.-18     	; 0x1c6ea <user_task.part.1+0x1e8>
		for(i=0;i<argc;++i)
			printf("   [%s]\n", argv[i]);
	}

    ind = 0;
	result = 0;
   1c6fc:	00 e0       	ldi	r16, 0x00	; 0
   1c6fe:	10 e0       	ldi	r17, 0x00	; 0
   1c700:	02 c0       	rjmp	.+4      	; 0x1c706 <user_task.part.1+0x204>
    ptr = argv[ind++];

    if(!ptr || argc < 1)
    {
        result = 1;
   1c702:	01 e0       	ldi	r16, 0x01	; 1
   1c704:	10 e0       	ldi	r17, 0x00	; 0
    {
        help();
        result = 1;
    }

    if (MATCHI(ptr,"dir") )
   1c706:	68 ed       	ldi	r22, 0xD8	; 216
   1c708:	7b e0       	ldi	r23, 0x0B	; 11
   1c70a:	c7 01       	movw	r24, r14
   1c70c:	0e 94 7d 32 	call	0x64fa	; 0x64fa <MATCHI>
   1c710:	89 2b       	or	r24, r25
   1c712:	51 f1       	breq	.+84     	; 0x1c768 <user_task.part.1+0x266>
   1c714:	86 e0       	ldi	r24, 0x06	; 6
   1c716:	68 2e       	mov	r6, r24
   1c718:	77 24       	eor	r7, r7
   1c71a:	73 94       	inc	r7
   1c71c:	6c 0e       	add	r6, r28
   1c71e:	7d 1e       	adc	r7, r29
   1c720:	f2 e0       	ldi	r31, 0x02	; 2
   1c722:	6f 0e       	add	r6, r31
   1c724:	71 1c       	adc	r7, r1
   1c726:	ee 24       	eor	r14, r14
   1c728:	e3 94       	inc	r14
   1c72a:	f1 2c       	mov	r15, r1
   1c72c:	01 e0       	ldi	r16, 0x01	; 1
   1c72e:	10 e0       	ldi	r17, 0x00	; 0
    {
        int i;
        int args = 0;
        result = 1;
        for(i=1;i<argc;++i)
   1c730:	ec 14       	cp	r14, r12
   1c732:	fd 04       	cpc	r15, r13
   1c734:	74 f4       	brge	.+28     	; 0x1c752 <user_task.part.1+0x250>
        {
            if(fatfs_ls(argv[i]) == 0)
   1c736:	f3 01       	movw	r30, r6
   1c738:	81 91       	ld	r24, Z+
   1c73a:	91 91       	ld	r25, Z+
   1c73c:	3f 01       	movw	r6, r30
   1c73e:	0e 94 5a 73 	call	0xe6b4	; 0xe6b4 <fatfs_ls>
   1c742:	89 2b       	or	r24, r25
   1c744:	11 f4       	brne	.+4      	; 0x1c74a <user_task.part.1+0x248>
				result = -1;
   1c746:	0f ef       	ldi	r16, 0xFF	; 255
   1c748:	1f ef       	ldi	r17, 0xFF	; 255
    if (MATCHI(ptr,"dir") )
    {
        int i;
        int args = 0;
        result = 1;
        for(i=1;i<argc;++i)
   1c74a:	ff ef       	ldi	r31, 0xFF	; 255
   1c74c:	ef 1a       	sub	r14, r31
   1c74e:	ff 0a       	sbc	r15, r31
   1c750:	ef cf       	rjmp	.-34     	; 0x1c730 <user_task.part.1+0x22e>
        {
            if(fatfs_ls(argv[i]) == 0)
				result = -1;
            ++args;
        }
        if(!args)
   1c752:	ea 94       	dec	r14
   1c754:	ef 28       	or	r14, r15
   1c756:	41 f4       	brne	.+16     	; 0x1c768 <user_task.part.1+0x266>
        {
            if(fatfs_ls("") == 0)
   1c758:	80 e2       	ldi	r24, 0x20	; 32
   1c75a:	9c e0       	ldi	r25, 0x0C	; 12
   1c75c:	0e 94 5a 73 	call	0xe6b4	; 0xe6b4 <fatfs_ls>
   1c760:	89 2b       	or	r24, r25
   1c762:	11 f4       	brne	.+4      	; 0x1c768 <user_task.part.1+0x266>
				result = -1;
   1c764:	0f ef       	ldi	r16, 0xFF	; 255
   1c766:	1f ef       	ldi	r17, 0xFF	; 255
        }
    }

	if( (ret = gpib_tests(argc,argv)) )
   1c768:	be 01       	movw	r22, r28
   1c76a:	6a 5f       	subi	r22, 0xFA	; 250
   1c76c:	7e 4f       	sbci	r23, 0xFE	; 254
   1c76e:	c6 01       	movw	r24, r12
   1c770:	0e 94 20 92 	call	0x12440	; 0x12440 <gpib_tests>
   1c774:	00 97       	sbiw	r24, 0x00	; 0
   1c776:	51 f0       	breq	.+20     	; 0x1c78c <user_task.part.1+0x28a>
    {
		if(ret < 0)
   1c778:	97 fd       	sbrc	r25, 7
   1c77a:	03 c0       	rjmp	.+6      	; 0x1c782 <user_task.part.1+0x280>
			result = -1;
		else
			result = 1;
   1c77c:	01 e0       	ldi	r16, 0x01	; 1
   1c77e:	10 e0       	ldi	r17, 0x00	; 0
   1c780:	02 c0       	rjmp	.+4      	; 0x1c786 <user_task.part.1+0x284>
    }

	if( (ret = gpib_tests(argc,argv)) )
    {
		if(ret < 0)
			result = -1;
   1c782:	0f ef       	ldi	r16, 0xFF	; 255
   1c784:	1f ef       	ldi	r17, 0xFF	; 255
		else
			result = 1;
// Restore GPIB BUS states
        gpib_init_devices();
   1c786:	0e 94 34 8d 	call	0x11a68	; 0x11a68 <gpib_init_devices>
   1c78a:	0f c0       	rjmp	.+30     	; 0x1c7aa <user_task.part.1+0x2a8>
    }

#ifdef POSIX_TESTS
    else if( (ret = posix_tests(argc,argv)) )
   1c78c:	be 01       	movw	r22, r28
   1c78e:	6a 5f       	subi	r22, 0xFA	; 250
   1c790:	7e 4f       	sbci	r23, 0xFE	; 254
   1c792:	c6 01       	movw	r24, r12
   1c794:	0e 94 05 82 	call	0x1040a	; 0x1040a <posix_tests>
   1c798:	00 97       	sbiw	r24, 0x00	; 0
   1c79a:	39 f0       	breq	.+14     	; 0x1c7aa <user_task.part.1+0x2a8>
	{
		if(ret < 0)
   1c79c:	97 fd       	sbrc	r25, 7
   1c79e:	03 c0       	rjmp	.+6      	; 0x1c7a6 <user_task.part.1+0x2a4>
			result = -1;
		else
			result = 1;
   1c7a0:	01 e0       	ldi	r16, 0x01	; 1
   1c7a2:	10 e0       	ldi	r17, 0x00	; 0
   1c7a4:	02 c0       	rjmp	.+4      	; 0x1c7aa <user_task.part.1+0x2a8>

#ifdef POSIX_TESTS
    else if( (ret = posix_tests(argc,argv)) )
	{
		if(ret < 0)
			result = -1;
   1c7a6:	0f ef       	ldi	r16, 0xFF	; 255
   1c7a8:	1f ef       	ldi	r17, 0xFF	; 255
			result = 1;
	}
#endif

#ifdef FATFS_TESTS
    if( (ret = fatfs_tests(argc,argv) ))
   1c7aa:	be 01       	movw	r22, r28
   1c7ac:	6a 5f       	subi	r22, 0xFA	; 250
   1c7ae:	7e 4f       	sbci	r23, 0xFE	; 254
   1c7b0:	c6 01       	movw	r24, r12
   1c7b2:	0e 94 66 74 	call	0xe8cc	; 0xe8cc <fatfs_tests>
   1c7b6:	00 97       	sbiw	r24, 0x00	; 0
   1c7b8:	39 f0       	breq	.+14     	; 0x1c7c8 <user_task.part.1+0x2c6>
	{
		if(ret < 0)
   1c7ba:	97 fd       	sbrc	r25, 7
   1c7bc:	03 c0       	rjmp	.+6      	; 0x1c7c4 <user_task.part.1+0x2c2>
			result = -1;
		else
			result = 1;
   1c7be:	01 e0       	ldi	r16, 0x01	; 1
   1c7c0:	10 e0       	ldi	r17, 0x00	; 0
   1c7c2:	02 c0       	rjmp	.+4      	; 0x1c7c8 <user_task.part.1+0x2c6>

#ifdef FATFS_TESTS
    if( (ret = fatfs_tests(argc,argv) ))
	{
		if(ret < 0)
			result = -1;
   1c7c4:	0f ef       	ldi	r16, 0xFF	; 255
   1c7c6:	1f ef       	ldi	r17, 0xFF	; 255
			result = 1;
	}
#endif

#ifdef LIF_SUPPORT
    if( (ret = lif_tests(argc,argv)) )
   1c7c8:	be 01       	movw	r22, r28
   1c7ca:	6a 5f       	subi	r22, 0xFA	; 250
   1c7cc:	7e 4f       	sbci	r23, 0xFE	; 254
   1c7ce:	c6 01       	movw	r24, r12
   1c7d0:	18 db       	rcall	.-2512   	; 0x1be02 <lif_tests>
   1c7d2:	00 97       	sbiw	r24, 0x00	; 0
   1c7d4:	39 f0       	breq	.+14     	; 0x1c7e4 <user_task.part.1+0x2e2>
	{
		if(ret < 0)
   1c7d6:	97 fd       	sbrc	r25, 7
   1c7d8:	03 c0       	rjmp	.+6      	; 0x1c7e0 <user_task.part.1+0x2de>
			result = -1;
		else
			result = 1;
   1c7da:	01 e0       	ldi	r16, 0x01	; 1
   1c7dc:	10 e0       	ldi	r17, 0x00	; 0
   1c7de:	02 c0       	rjmp	.+4      	; 0x1c7e4 <user_task.part.1+0x2e2>

#ifdef LIF_SUPPORT
    if( (ret = lif_tests(argc,argv)) )
	{
		if(ret < 0)
			result = -1;
   1c7e0:	0f ef       	ldi	r16, 0xFF	; 255
   1c7e2:	1f ef       	ldi	r17, 0xFF	; 255
		else
			result = 1;
	}
#endif
    if( (ret = drives_tests(argc,argv)) )
   1c7e4:	be 01       	movw	r22, r28
   1c7e6:	6a 5f       	subi	r22, 0xFA	; 250
   1c7e8:	7e 4f       	sbci	r23, 0xFE	; 254
   1c7ea:	c6 01       	movw	r24, r12
   1c7ec:	0e 94 f2 a2 	call	0x145e4	; 0x145e4 <drives_tests>
   1c7f0:	00 97       	sbiw	r24, 0x00	; 0
   1c7f2:	19 f0       	breq	.+6      	; 0x1c7fa <user_task.part.1+0x2f8>
	{
		if(ret < 0)
   1c7f4:	97 ff       	sbrs	r25, 7
   1c7f6:	04 c0       	rjmp	.+8      	; 0x1c800 <user_task.part.1+0x2fe>
   1c7f8:	09 c0       	rjmp	.+18     	; 0x1c80c <user_task.part.1+0x30a>
			result = -1;
		else
			result = 1;
	}

    if(result == 1)
   1c7fa:	01 30       	cpi	r16, 0x01	; 1
   1c7fc:	11 05       	cpc	r17, r1
   1c7fe:	19 f4       	brne	.+6      	; 0x1c806 <user_task.part.1+0x304>
        printf("OK\n");
   1c800:	8e eb       	ldi	r24, 0xBE	; 190
   1c802:	99 e4       	ldi	r25, 0x49	; 73
   1c804:	05 c0       	rjmp	.+10     	; 0x1c810 <user_task.part.1+0x30e>
	else if(result == -1)
   1c806:	0f 3f       	cpi	r16, 0xFF	; 255
   1c808:	1f 4f       	sbci	r17, 0xFF	; 255
   1c80a:	59 f4       	brne	.+22     	; 0x1c822 <user_task.part.1+0x320>
        printf("Command FAILED\n");
   1c80c:	8e ea       	ldi	r24, 0xAE	; 174
   1c80e:	99 e4       	ldi	r25, 0x49	; 73
   1c810:	a0 e0       	ldi	r26, 0x00	; 0
   1c812:	ed b7       	in	r30, 0x3d	; 61
   1c814:	fe b7       	in	r31, 0x3e	; 62
   1c816:	81 83       	std	Z+1, r24	; 0x01
   1c818:	92 83       	std	Z+2, r25	; 0x02
   1c81a:	a3 83       	std	Z+3, r26	; 0x03
   1c81c:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   1c820:	33 c0       	rjmp	.+102    	; 0x1c888 <user_task.part.1+0x386>
    else
	{
        printf("Invalid Command\n");
   1c822:	8d e9       	ldi	r24, 0x9D	; 157
   1c824:	99 e4       	ldi	r25, 0x49	; 73
   1c826:	a0 e0       	ldi	r26, 0x00	; 0
   1c828:	ed b7       	in	r30, 0x3d	; 61
   1c82a:	fe b7       	in	r31, 0x3e	; 62
   1c82c:	81 83       	std	Z+1, r24	; 0x01
   1c82e:	92 83       	std	Z+2, r25	; 0x02
   1c830:	a3 83       	std	Z+3, r26	; 0x03
   1c832:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
        printf("    Argument count = %d\n", argc);
   1c836:	ed b7       	in	r30, 0x3d	; 61
   1c838:	fe b7       	in	r31, 0x3e	; 62
   1c83a:	d5 82       	std	Z+5, r13	; 0x05
   1c83c:	c4 82       	std	Z+4, r12	; 0x04
   1c83e:	84 e8       	ldi	r24, 0x84	; 132
   1c840:	99 e4       	ldi	r25, 0x49	; 73
   1c842:	a0 e0       	ldi	r26, 0x00	; 0
   1c844:	81 83       	std	Z+1, r24	; 0x01
   1c846:	92 83       	std	Z+2, r25	; 0x02
   1c848:	a3 83       	std	Z+3, r26	; 0x03
   1c84a:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
   1c84e:	8e 01       	movw	r16, r28
   1c850:	0a 5f       	subi	r16, 0xFA	; 250
   1c852:	1e 4f       	sbci	r17, 0xFE	; 254
		for(i=0;i<argc;++i)
   1c854:	e1 2c       	mov	r14, r1
   1c856:	f1 2c       	mov	r15, r1
			printf("       [%s]\n", argv[i]);
   1c858:	87 e7       	ldi	r24, 0x77	; 119
   1c85a:	99 e4       	ldi	r25, 0x49	; 73
   1c85c:	3c 01       	movw	r6, r24
   1c85e:	81 2c       	mov	r8, r1
        printf("Command FAILED\n");
    else
	{
        printf("Invalid Command\n");
        printf("    Argument count = %d\n", argc);
		for(i=0;i<argc;++i)
   1c860:	ec 14       	cp	r14, r12
   1c862:	fd 04       	cpc	r15, r13
   1c864:	8c f4       	brge	.+34     	; 0x1c888 <user_task.part.1+0x386>
			printf("       [%s]\n", argv[i]);
   1c866:	f8 01       	movw	r30, r16
   1c868:	81 91       	ld	r24, Z+
   1c86a:	91 91       	ld	r25, Z+
   1c86c:	8f 01       	movw	r16, r30
   1c86e:	ed b7       	in	r30, 0x3d	; 61
   1c870:	fe b7       	in	r31, 0x3e	; 62
   1c872:	95 83       	std	Z+5, r25	; 0x05
   1c874:	84 83       	std	Z+4, r24	; 0x04
   1c876:	61 82       	std	Z+1, r6	; 0x01
   1c878:	72 82       	std	Z+2, r7	; 0x02
   1c87a:	83 82       	std	Z+3, r8	; 0x03
   1c87c:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
        printf("Command FAILED\n");
    else
	{
        printf("Invalid Command\n");
        printf("    Argument count = %d\n", argc);
		for(i=0;i<argc;++i)
   1c880:	ff ef       	ldi	r31, 0xFF	; 255
   1c882:	ef 1a       	sub	r14, r31
   1c884:	ff 0a       	sbc	r15, r31
   1c886:	ec cf       	rjmp	.-40     	; 0x1c860 <user_task.part.1+0x35e>
			printf("       [%s]\n", argv[i]);
	}
}
   1c888:	c5 59       	subi	r28, 0x95	; 149
   1c88a:	de 4f       	sbci	r29, 0xFE	; 254
   1c88c:	0f b6       	in	r0, 0x3f	; 63
   1c88e:	f8 94       	cli
   1c890:	de bf       	out	0x3e, r29	; 62
   1c892:	0f be       	out	0x3f, r0	; 63
   1c894:	cd bf       	out	0x3d, r28	; 61
   1c896:	df 91       	pop	r29
   1c898:	cf 91       	pop	r28
   1c89a:	1f 91       	pop	r17
   1c89c:	0f 91       	pop	r16
   1c89e:	ff 90       	pop	r15
   1c8a0:	ef 90       	pop	r14
   1c8a2:	df 90       	pop	r13
   1c8a4:	cf 90       	pop	r12
   1c8a6:	8f 90       	pop	r8
   1c8a8:	7f 90       	pop	r7
   1c8aa:	6f 90       	pop	r6
   1c8ac:	08 95       	ret

0001c8ae <user_task>:
	int ret;
    char *argv[51];
    char line[256];


    if(gpib)
   1c8ae:	81 11       	cpse	r24, r1
        gpib_task();
   1c8b0:	0e 94 9f 91 	call	0x1233e	; 0x1233e <gpib_task>

    if(!kbhit(0))
   1c8b4:	80 e0       	ldi	r24, 0x00	; 0
   1c8b6:	0e 94 12 2a 	call	0x5424	; 0x5424 <uart_rx_count>
   1c8ba:	89 2b       	or	r24, r25
   1c8bc:	09 f0       	breq	.+2      	; 0x1c8c0 <user_task+0x12>
   1c8be:	21 ce       	rjmp	.-958    	; 0x1c502 <user_task.part.1>
   1c8c0:	08 95       	ret

0001c8c2 <update_drive_counts>:
	}
}

#ifdef LCD_SUPPORT
void update_drive_counts()
{
   1c8c2:	a9 e2       	ldi	r26, 0x29	; 41
   1c8c4:	b0 e0       	ldi	r27, 0x00	; 0
   1c8c6:	e6 e6       	ldi	r30, 0x66	; 102
   1c8c8:	f4 ee       	ldi	r31, 0xE4	; 228
   1c8ca:	a7 c2       	rjmp	.+1358   	; 0x1ce1a <__prologue_saves__+0x1c>
	char tmp[32];

    sprintf((char *) tmp, "SS80=%d AMIGO=%d",
   1c8cc:	83 e0       	ldi	r24, 0x03	; 3
   1c8ce:	0e 94 0c 97 	call	0x12e18	; 0x12e18 <count_drive_types>
   1c8d2:	18 2f       	mov	r17, r24
   1c8d4:	81 e0       	ldi	r24, 0x01	; 1
   1c8d6:	0e 94 0c 97 	call	0x12e18	; 0x12e18 <count_drive_types>
   1c8da:	08 2e       	mov	r0, r24
   1c8dc:	00 0c       	add	r0, r0
   1c8de:	99 0b       	sbc	r25, r25
   1c8e0:	ed b7       	in	r30, 0x3d	; 61
   1c8e2:	fe b7       	in	r31, 0x3e	; 62
   1c8e4:	91 87       	std	Z+9, r25	; 0x09
   1c8e6:	80 87       	std	Z+8, r24	; 0x08
   1c8e8:	81 2f       	mov	r24, r17
   1c8ea:	11 0f       	add	r17, r17
   1c8ec:	99 0b       	sbc	r25, r25
   1c8ee:	97 83       	std	Z+7, r25	; 0x07
   1c8f0:	86 83       	std	Z+6, r24	; 0x06
   1c8f2:	86 e6       	ldi	r24, 0x66	; 102
   1c8f4:	99 e4       	ldi	r25, 0x49	; 73
   1c8f6:	a0 e0       	ldi	r26, 0x00	; 0
   1c8f8:	83 83       	std	Z+3, r24	; 0x03
   1c8fa:	94 83       	std	Z+4, r25	; 0x04
   1c8fc:	a5 83       	std	Z+5, r26	; 0x05
   1c8fe:	8e 01       	movw	r16, r28
   1c900:	06 5f       	subi	r16, 0xF6	; 246
   1c902:	1f 4f       	sbci	r17, 0xFF	; 255
   1c904:	12 83       	std	Z+2, r17	; 0x02
   1c906:	01 83       	std	Z+1, r16	; 0x01
   1c908:	0e 94 1c 47 	call	0x8e38	; 0x8e38 <sprintf_P>
        (int) count_drive_types(SS80_TYPE),
        (int) count_drive_types(AMIGO_TYPE) );
	sprintf((char *) _line1, "%-16s", tmp);
   1c90c:	ed b7       	in	r30, 0x3d	; 61
   1c90e:	fe b7       	in	r31, 0x3e	; 62
   1c910:	17 83       	std	Z+7, r17	; 0x07
   1c912:	06 83       	std	Z+6, r16	; 0x06
   1c914:	80 e6       	ldi	r24, 0x60	; 96
   1c916:	99 e4       	ldi	r25, 0x49	; 73
   1c918:	a0 e0       	ldi	r26, 0x00	; 0
   1c91a:	83 83       	std	Z+3, r24	; 0x03
   1c91c:	94 83       	std	Z+4, r25	; 0x04
   1c91e:	a5 83       	std	Z+5, r26	; 0x05
   1c920:	8c e0       	ldi	r24, 0x0C	; 12
   1c922:	93 e0       	ldi	r25, 0x03	; 3
   1c924:	92 83       	std	Z+2, r25	; 0x02
   1c926:	81 83       	std	Z+1, r24	; 0x01
   1c928:	0e 94 1c 47 	call	0x8e38	; 0x8e38 <sprintf_P>
}
   1c92c:	a9 96       	adiw	r28, 0x29	; 41
   1c92e:	e4 e0       	ldi	r30, 0x04	; 4
   1c930:	90 c2       	rjmp	.+1312   	; 0x1ce52 <__epilogue_restores__+0x1c>

0001c932 <main>:
#endif

/// @brief  main() for gpib project
/// @return  should never return!
int main(void)
{
   1c932:	cf 93       	push	r28
   1c934:	df 93       	push	r29
   1c936:	cd b7       	in	r28, 0x3d	; 61
   1c938:	de b7       	in	r29, 0x3e	; 62
   1c93a:	63 97       	sbiw	r28, 0x13	; 19
   1c93c:	0f b6       	in	r0, 0x3f	; 63
   1c93e:	f8 94       	cli
   1c940:	de bf       	out	0x3e, r29	; 62
   1c942:	0f be       	out	0x3f, r0	; 63
   1c944:	cd bf       	out	0x3d, r28	; 61
    ts_t ts;
    uint32_t actual,baud;

	clear_error();		// Clear error state
   1c946:	0e 94 2f 27 	call	0x4e5e	; 0x4e5e <clear_error>

	GPIO_PIN_LOW(LED1);	// Activity status
   1c94a:	46 98       	cbi	0x08, 6	; 8
   1c94c:	3e 9a       	sbi	0x07, 6	; 7

///@ initialize bus state as soon as practical
    gpib_bus_init();
   1c94e:	0e 94 df 85 	call	0x10bbe	; 0x10bbe <gpib_bus_init>
// BAUD setting moved to Makefile
    baud = BAUD;

///@ Initialize UART early
/// Returns actual BAUD rate - possible with hardware - may differ slightly
    actual = uart_init(0, baud);                  // Serial Port Initialize
   1c952:	40 e0       	ldi	r20, 0x00	; 0
   1c954:	52 ec       	ldi	r21, 0xC2	; 194
   1c956:	61 e0       	ldi	r22, 0x01	; 1
   1c958:	70 e0       	ldi	r23, 0x00	; 0
   1c95a:	80 e0       	ldi	r24, 0x00	; 0
   1c95c:	0e 94 7d 29 	call	0x52fa	; 0x52fa <uart_init>
   1c960:	6b 01       	movw	r12, r22
   1c962:	7c 01       	movw	r14, r24

///@brief Power up delay
    delayms(200);
   1c964:	68 ec       	ldi	r22, 0xC8	; 200
   1c966:	70 e0       	ldi	r23, 0x00	; 0
   1c968:	80 e0       	ldi	r24, 0x00	; 0
   1c96a:	90 e0       	ldi	r25, 0x00	; 0
   1c96c:	0e 94 8a 28 	call	0x5114	; 0x5114 <delayms>

    sep();
   1c970:	0e 94 3f 32 	call	0x647e	; 0x647e <sep>
    printf("Start\n");
   1c974:	89 e5       	ldi	r24, 0x59	; 89
   1c976:	99 e4       	ldi	r25, 0x49	; 73
   1c978:	a0 e0       	ldi	r26, 0x00	; 0
   1c97a:	ed b7       	in	r30, 0x3d	; 61
   1c97c:	fe b7       	in	r31, 0x3e	; 62
   1c97e:	81 83       	std	Z+1, r24	; 0x01
   1c980:	92 83       	std	Z+2, r25	; 0x02
   1c982:	a3 83       	std	Z+3, r26	; 0x03
   1c984:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    printf("CPU Clock = %lu\n", F_CPU);
   1c988:	80 e0       	ldi	r24, 0x00	; 0
   1c98a:	9d e2       	ldi	r25, 0x2D	; 45
   1c98c:	a1 e3       	ldi	r26, 0x31	; 49
   1c98e:	b1 e0       	ldi	r27, 0x01	; 1
   1c990:	ed b7       	in	r30, 0x3d	; 61
   1c992:	fe b7       	in	r31, 0x3e	; 62
   1c994:	84 83       	std	Z+4, r24	; 0x04
   1c996:	95 83       	std	Z+5, r25	; 0x05
   1c998:	a6 83       	std	Z+6, r26	; 0x06
   1c99a:	b7 83       	std	Z+7, r27	; 0x07
   1c99c:	88 e4       	ldi	r24, 0x48	; 72
   1c99e:	99 e4       	ldi	r25, 0x49	; 73
   1c9a0:	a0 e0       	ldi	r26, 0x00	; 0
   1c9a2:	81 83       	std	Z+1, r24	; 0x01
   1c9a4:	92 83       	std	Z+2, r25	; 0x02
   1c9a6:	a3 83       	std	Z+3, r26	; 0x03
   1c9a8:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    printf("Requested Baud Rate: %ld, Actual: %ld\n", (long)baud, (long)actual);
   1c9ac:	ed b7       	in	r30, 0x3d	; 61
   1c9ae:	fe b7       	in	r31, 0x3e	; 62
   1c9b0:	c0 86       	std	Z+8, r12	; 0x08
   1c9b2:	d1 86       	std	Z+9, r13	; 0x09
   1c9b4:	e2 86       	std	Z+10, r14	; 0x0a
   1c9b6:	f3 86       	std	Z+11, r15	; 0x0b
   1c9b8:	80 e0       	ldi	r24, 0x00	; 0
   1c9ba:	92 ec       	ldi	r25, 0xC2	; 194
   1c9bc:	a1 e0       	ldi	r26, 0x01	; 1
   1c9be:	b0 e0       	ldi	r27, 0x00	; 0
   1c9c0:	84 83       	std	Z+4, r24	; 0x04
   1c9c2:	95 83       	std	Z+5, r25	; 0x05
   1c9c4:	a6 83       	std	Z+6, r26	; 0x06
   1c9c6:	b7 83       	std	Z+7, r27	; 0x07
   1c9c8:	81 e2       	ldi	r24, 0x21	; 33
   1c9ca:	99 e4       	ldi	r25, 0x49	; 73
   1c9cc:	a0 e0       	ldi	r26, 0x00	; 0
   1c9ce:	81 83       	std	Z+1, r24	; 0x01
   1c9d0:	92 83       	std	Z+2, r25	; 0x02
   1c9d2:	a3 83       	std	Z+3, r26	; 0x03
   1c9d4:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>

    init_timers();
   1c9d8:	0e 94 25 36 	call	0x6c4a	; 0x6c4a <init_timers>

    sep();
   1c9dc:	0e 94 3f 32 	call	0x647e	; 0x647e <sep>
    printf("HP85 Disk and Device Emulator\n");
   1c9e0:	82 e0       	ldi	r24, 0x02	; 2
   1c9e2:	99 e4       	ldi	r25, 0x49	; 73
   1c9e4:	a0 e0       	ldi	r26, 0x00	; 0
   1c9e6:	ed b7       	in	r30, 0x3d	; 61
   1c9e8:	fe b7       	in	r31, 0x3e	; 62
   1c9ea:	81 83       	std	Z+1, r24	; 0x01
   1c9ec:	92 83       	std	Z+2, r25	; 0x02
   1c9ee:	a3 83       	std	Z+3, r26	; 0x03
   1c9f0:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    printf(" (C) 2014-2020 by Mike Gore\n");
   1c9f4:	85 ee       	ldi	r24, 0xE5	; 229
   1c9f6:	98 e4       	ldi	r25, 0x48	; 72
   1c9f8:	a0 e0       	ldi	r26, 0x00	; 0
   1c9fa:	ed b7       	in	r30, 0x3d	; 61
   1c9fc:	fe b7       	in	r31, 0x3e	; 62
   1c9fe:	81 83       	std	Z+1, r24	; 0x01
   1ca00:	92 83       	std	Z+2, r25	; 0x02
   1ca02:	a3 83       	std	Z+3, r26	; 0x03
   1ca04:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    printf(" GNU version 3\n");
   1ca08:	85 ed       	ldi	r24, 0xD5	; 213
   1ca0a:	98 e4       	ldi	r25, 0x48	; 72
   1ca0c:	a0 e0       	ldi	r26, 0x00	; 0
   1ca0e:	ed b7       	in	r30, 0x3d	; 61
   1ca10:	fe b7       	in	r31, 0x3e	; 62
   1ca12:	81 83       	std	Z+1, r24	; 0x01
   1ca14:	92 83       	std	Z+2, r25	; 0x02
   1ca16:	a3 83       	std	Z+3, r26	; 0x03
   1ca18:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    printf("-> https://github.com/magore/hp85disk\n");
   1ca1c:	8e ea       	ldi	r24, 0xAE	; 174
   1ca1e:	98 e4       	ldi	r25, 0x48	; 72
   1ca20:	a0 e0       	ldi	r26, 0x00	; 0
   1ca22:	ed b7       	in	r30, 0x3d	; 61
   1ca24:	fe b7       	in	r31, 0x3e	; 62
   1ca26:	81 83       	std	Z+1, r24	; 0x01
   1ca28:	92 83       	std	Z+2, r25	; 0x02
   1ca2a:	a3 83       	std	Z+3, r26	; 0x03
   1ca2c:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    printf("   GIT last pushed:   %s\n", GIT_VERSION);
   1ca30:	8e eb       	ldi	r24, 0xBE	; 190
   1ca32:	96 e1       	ldi	r25, 0x16	; 22
   1ca34:	ed b7       	in	r30, 0x3d	; 61
   1ca36:	fe b7       	in	r31, 0x3e	; 62
   1ca38:	95 83       	std	Z+5, r25	; 0x05
   1ca3a:	84 83       	std	Z+4, r24	; 0x04
   1ca3c:	84 e9       	ldi	r24, 0x94	; 148
   1ca3e:	98 e4       	ldi	r25, 0x48	; 72
   1ca40:	a0 e0       	ldi	r26, 0x00	; 0
   1ca42:	81 83       	std	Z+1, r24	; 0x01
   1ca44:	92 83       	std	Z+2, r25	; 0x02
   1ca46:	a3 83       	std	Z+3, r26	; 0x03
   1ca48:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    printf("   Last updated file: %s\n", LOCAL_MOD);
   1ca4c:	82 ee       	ldi	r24, 0xE2	; 226
   1ca4e:	96 e1       	ldi	r25, 0x16	; 22
   1ca50:	ed b7       	in	r30, 0x3d	; 61
   1ca52:	fe b7       	in	r31, 0x3e	; 62
   1ca54:	95 83       	std	Z+5, r25	; 0x05
   1ca56:	84 83       	std	Z+4, r24	; 0x04
   1ca58:	8a e7       	ldi	r24, 0x7A	; 122
   1ca5a:	98 e4       	ldi	r25, 0x48	; 72
   1ca5c:	a0 e0       	ldi	r26, 0x00	; 0
   1ca5e:	81 83       	std	Z+1, r24	; 0x01
   1ca60:	92 83       	std	Z+2, r25	; 0x02
   1ca62:	a3 83       	std	Z+3, r26	; 0x03
   1ca64:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>

    sep();
   1ca68:	0e 94 3f 32 	call	0x647e	; 0x647e <sep>
    PrintFree();
   1ca6c:	0e 94 4b 27 	call	0x4e96	; 0x4e96 <PrintFree>

    sep();
   1ca70:	0e 94 3f 32 	call	0x647e	; 0x647e <sep>
    // delayms(200);                                 ///@brief Power up delay

///@ initialize SPI bus
    printf("Initializing SPI bus\n");
   1ca74:	84 e6       	ldi	r24, 0x64	; 100
   1ca76:	98 e4       	ldi	r25, 0x48	; 72
   1ca78:	a0 e0       	ldi	r26, 0x00	; 0
   1ca7a:	ed b7       	in	r30, 0x3d	; 61
   1ca7c:	fe b7       	in	r31, 0x3e	; 62
   1ca7e:	81 83       	std	Z+1, r24	; 0x01
   1ca80:	92 83       	std	Z+2, r25	; 0x02
   1ca82:	a3 83       	std	Z+3, r26	; 0x03
   1ca84:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    spi_init(MMC_SLOW,GPIO_B3);
   1ca88:	4b e0       	ldi	r20, 0x0B	; 11
   1ca8a:	50 e0       	ldi	r21, 0x00	; 0
   1ca8c:	60 e2       	ldi	r22, 0x20	; 32
   1ca8e:	71 ea       	ldi	r23, 0xA1	; 161
   1ca90:	87 e0       	ldi	r24, 0x07	; 7
   1ca92:	90 e0       	ldi	r25, 0x00	; 0
   1ca94:	0e 94 b1 26 	call	0x4d62	; 0x4d62 <spi_init>

///@ initialize I2C bus
    printf("Initializing I2C bus\n");
   1ca98:	8e e4       	ldi	r24, 0x4E	; 78
   1ca9a:	98 e4       	ldi	r25, 0x48	; 72
   1ca9c:	a0 e0       	ldi	r26, 0x00	; 0
   1ca9e:	ed b7       	in	r30, 0x3d	; 61
   1caa0:	fe b7       	in	r31, 0x3e	; 62
   1caa2:	81 83       	std	Z+1, r24	; 0x01
   1caa4:	92 83       	std	Z+2, r25	; 0x02
   1caa6:	a3 83       	std	Z+3, r26	; 0x03
   1caa8:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
	i2c_init(100000);
   1caac:	60 ea       	ldi	r22, 0xA0	; 160
   1caae:	76 e8       	ldi	r23, 0x86	; 134
   1cab0:	81 e0       	ldi	r24, 0x01	; 1
   1cab2:	90 e0       	ldi	r25, 0x00	; 0
   1cab4:	0e 94 4e 2c 	call	0x589c	; 0x589c <i2c_init>
    sep();
   1cab8:	0e 94 3f 32 	call	0x647e	; 0x647e <sep>

///@ initialize clock by RTC if we have it
    printf("Initializing RTC\n");
   1cabc:	8c e3       	ldi	r24, 0x3C	; 60
   1cabe:	98 e4       	ldi	r25, 0x48	; 72
   1cac0:	a0 e0       	ldi	r26, 0x00	; 0
   1cac2:	ed b7       	in	r30, 0x3d	; 61
   1cac4:	fe b7       	in	r31, 0x3e	; 62
   1cac6:	81 83       	std	Z+1, r24	; 0x01
   1cac8:	92 83       	std	Z+2, r25	; 0x02
   1caca:	a3 83       	std	Z+3, r26	; 0x03
   1cacc:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    clock_clear();
   1cad0:	0e 94 e2 35 	call	0x6bc4	; 0x6bc4 <clock_clear>
    printf("Clock cleared\n");
   1cad4:	8d e2       	ldi	r24, 0x2D	; 45
   1cad6:	98 e4       	ldi	r25, 0x48	; 72
   1cad8:	a0 e0       	ldi	r26, 0x00	; 0
   1cada:	ed b7       	in	r30, 0x3d	; 61
   1cadc:	fe b7       	in	r31, 0x3e	; 62
   1cade:	81 83       	std	Z+1, r24	; 0x01
   1cae0:	92 83       	std	Z+2, r25	; 0x02
   1cae2:	a3 83       	std	Z+3, r26	; 0x03
   1cae4:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    clock_getres(0, (ts_t *) &ts);
   1cae8:	be 01       	movw	r22, r28
   1caea:	64 5f       	subi	r22, 0xF4	; 244
   1caec:	7f 4f       	sbci	r23, 0xFF	; 255
   1caee:	80 e0       	ldi	r24, 0x00	; 0
   1caf0:	90 e0       	ldi	r25, 0x00	; 0
   1caf2:	0e 94 82 36 	call	0x6d04	; 0x6d04 <clock_getres>
    printf("System Task Interrupt Rate: %ld Nano Seconds\n", (long) ts.tv_nsec);
   1caf6:	88 89       	ldd	r24, Y+16	; 0x10
   1caf8:	99 89       	ldd	r25, Y+17	; 0x11
   1cafa:	aa 89       	ldd	r26, Y+18	; 0x12
   1cafc:	bb 89       	ldd	r27, Y+19	; 0x13
   1cafe:	ed b7       	in	r30, 0x3d	; 61
   1cb00:	fe b7       	in	r31, 0x3e	; 62
   1cb02:	84 83       	std	Z+4, r24	; 0x04
   1cb04:	95 83       	std	Z+5, r25	; 0x05
   1cb06:	a6 83       	std	Z+6, r26	; 0x06
   1cb08:	b7 83       	std	Z+7, r27	; 0x07
   1cb0a:	8f ef       	ldi	r24, 0xFF	; 255
   1cb0c:	97 e4       	ldi	r25, 0x47	; 71
   1cb0e:	a0 e0       	ldi	r26, 0x00	; 0
   1cb10:	81 83       	std	Z+1, r24	; 0x01
   1cb12:	92 83       	std	Z+2, r25	; 0x02
   1cb14:	a3 83       	std	Z+3, r26	; 0x03
   1cb16:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>

// Timezone offset we just use local time
    initialize_clock(0);
   1cb1a:	80 e0       	ldi	r24, 0x00	; 0
   1cb1c:	90 e0       	ldi	r25, 0x00	; 0
   1cb1e:	0e 94 5d 3d 	call	0x7aba	; 0x7aba <initialize_clock>
    display_clock();
   1cb22:	0e 94 d4 3d 	call	0x7ba8	; 0x7ba8 <display_clock>
    sep();
   1cb26:	0e 94 3f 32 	call	0x647e	; 0x647e <sep>

///@ initialize Optional I2C LCD
#ifdef LCD_SUPPORT
	lcd_setup();
   1cb2a:	d0 db       	rcall	.-2144   	; 0x1c2cc <lcd_setup>
#endif

///@ initialize MMC bus
    printf("MMC initializing start\n");
   1cb2c:	87 ee       	ldi	r24, 0xE7	; 231
   1cb2e:	97 e4       	ldi	r25, 0x47	; 71
   1cb30:	a0 e0       	ldi	r26, 0x00	; 0
   1cb32:	ed b7       	in	r30, 0x3d	; 61
   1cb34:	fe b7       	in	r31, 0x3e	; 62
   1cb36:	81 83       	std	Z+1, r24	; 0x01
   1cb38:	92 83       	std	Z+2, r25	; 0x02
   1cb3a:	a3 83       	std	Z+3, r26	; 0x03
   1cb3c:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    if ( !mmc_init(1) )
   1cb40:	81 e0       	ldi	r24, 0x01	; 1
   1cb42:	90 e0       	ldi	r25, 0x00	; 0
   1cb44:	0e 94 4f 6f 	call	0xde9e	; 0xde9e <mmc_init>
   1cb48:	89 2b       	or	r24, r25
   1cb4a:	51 f4       	brne	.+20     	; 0x1cb60 <main+0x22e>
		printf("MMC initialized\n");
   1cb4c:	86 ed       	ldi	r24, 0xD6	; 214
   1cb4e:	97 e4       	ldi	r25, 0x47	; 71
   1cb50:	a0 e0       	ldi	r26, 0x00	; 0
   1cb52:	ed b7       	in	r30, 0x3d	; 61
   1cb54:	fe b7       	in	r31, 0x3e	; 62
   1cb56:	81 83       	std	Z+1, r24	; 0x01
   1cb58:	92 83       	std	Z+2, r25	; 0x02
   1cb5a:	a3 83       	std	Z+3, r26	; 0x03
   1cb5c:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    sep();
   1cb60:	0e 94 3f 32 	call	0x647e	; 0x647e <sep>

///@ initialize bus state as soon as practical
    gpib_bus_init();
   1cb64:	0e 94 df 85 	call	0x10bbe	; 0x10bbe <gpib_bus_init>
    printf("GPIB bus initialized\n");
   1cb68:	80 ec       	ldi	r24, 0xC0	; 192
   1cb6a:	97 e4       	ldi	r25, 0x47	; 71
   1cb6c:	a0 e0       	ldi	r26, 0x00	; 0
   1cb6e:	ed b7       	in	r30, 0x3d	; 61
   1cb70:	fe b7       	in	r31, 0x3e	; 62
   1cb72:	81 83       	std	Z+1, r24	; 0x01
   1cb74:	92 83       	std	Z+2, r25	; 0x02
   1cb76:	a3 83       	std	Z+3, r26	; 0x03
   1cb78:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>

///@ initialize Printer Capture
    printer_init();
   1cb7c:	0e 94 47 be 	call	0x17c8e	; 0x17c8e <printer_init>
    printf("Printer initialized\n");
   1cb80:	8b ea       	ldi	r24, 0xAB	; 171
   1cb82:	97 e4       	ldi	r25, 0x47	; 71
   1cb84:	a0 e0       	ldi	r26, 0x00	; 0
   1cb86:	ed b7       	in	r30, 0x3d	; 61
   1cb88:	fe b7       	in	r31, 0x3e	; 62
   1cb8a:	81 83       	std	Z+1, r24	; 0x01
   1cb8c:	92 83       	std	Z+2, r25	; 0x02
   1cb8e:	a3 83       	std	Z+3, r26	; 0x03
   1cb90:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>

///@ initialize GPIB timer tasks
    printf("GPIB Timer Setup\n");
   1cb94:	89 e9       	ldi	r24, 0x99	; 153
   1cb96:	97 e4       	ldi	r25, 0x47	; 71
   1cb98:	a0 e0       	ldi	r26, 0x00	; 0
   1cb9a:	ed b7       	in	r30, 0x3d	; 61
   1cb9c:	fe b7       	in	r31, 0x3e	; 62
   1cb9e:	81 83       	std	Z+1, r24	; 0x01
   1cba0:	92 83       	std	Z+2, r25	; 0x02
   1cba2:	a3 83       	std	Z+3, r26	; 0x03
   1cba4:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    gpib_timer_init();
   1cba8:	0e 94 f3 83 	call	0x107e6	; 0x107e6 <gpib_timer_init>
    printf("GPIB Timer initialized\n");
   1cbac:	81 e8       	ldi	r24, 0x81	; 129
   1cbae:	97 e4       	ldi	r25, 0x47	; 71
   1cbb0:	a0 e0       	ldi	r26, 0x00	; 0
   1cbb2:	ed b7       	in	r30, 0x3d	; 61
   1cbb4:	fe b7       	in	r31, 0x3e	; 62
   1cbb6:	81 83       	std	Z+1, r24	; 0x01
   1cbb8:	92 83       	std	Z+2, r25	; 0x02
   1cbba:	a3 83       	std	Z+3, r26	; 0x03
   1cbbc:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>

///@brief Process hp85disk emulator config file
    gpib_file_init();
   1cbc0:	0e 94 57 8c 	call	0x118ae	; 0x118ae <gpib_file_init>
    printf("GPIB File init done\n");
   1cbc4:	8c e6       	ldi	r24, 0x6C	; 108
   1cbc6:	97 e4       	ldi	r25, 0x47	; 71
   1cbc8:	a0 e0       	ldi	r26, 0x00	; 0
   1cbca:	ed b7       	in	r30, 0x3d	; 61
   1cbcc:	fe b7       	in	r31, 0x3e	; 62
   1cbce:	81 83       	std	Z+1, r24	; 0x01
   1cbd0:	92 83       	std	Z+2, r25	; 0x02
   1cbd2:	a3 83       	std	Z+3, r26	; 0x03
   1cbd4:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>

///@brief GPIB talking/listening state variables
///Must be done AFTER gpib_file_init() so we have a valid configuration
    gpib_state_init();
   1cbd8:	0e 94 47 86 	call	0x10c8e	; 0x10c8e <gpib_state_init>
    printf("GPIB State init done\n");
   1cbdc:	86 e5       	ldi	r24, 0x56	; 86
   1cbde:	97 e4       	ldi	r25, 0x47	; 71
   1cbe0:	a0 e0       	ldi	r26, 0x00	; 0
   1cbe2:	ed b7       	in	r30, 0x3d	; 61
   1cbe4:	fe b7       	in	r31, 0x3e	; 62
   1cbe6:	81 83       	std	Z+1, r24	; 0x01
   1cbe8:	92 83       	std	Z+2, r25	; 0x02
   1cbea:	a3 83       	std	Z+3, r26	; 0x03
   1cbec:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    sep();
   1cbf0:	0e 94 3f 32 	call	0x647e	; 0x647e <sep>

///@brief Display Address Summary
    display_Addresses(0);
   1cbf4:	80 e0       	ldi	r24, 0x00	; 0
   1cbf6:	90 e0       	ldi	r25, 0x00	; 0
   1cbf8:	0e 94 9d 93 	call	0x1273a	; 0x1273a <display_Addresses>
    sep();
   1cbfc:	0e 94 3f 32 	call	0x647e	; 0x647e <sep>

///@brief Display debug level
    printf("debuglevel   = %04xH\n",(int)debuglevel);
   1cc00:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1cc04:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1cc08:	ed b7       	in	r30, 0x3d	; 61
   1cc0a:	fe b7       	in	r31, 0x3e	; 62
   1cc0c:	95 83       	std	Z+5, r25	; 0x05
   1cc0e:	84 83       	std	Z+4, r24	; 0x04
   1cc10:	80 e4       	ldi	r24, 0x40	; 64
   1cc12:	97 e4       	ldi	r25, 0x47	; 71
   1cc14:	a0 e0       	ldi	r26, 0x00	; 0
   1cc16:	81 83       	std	Z+1, r24	; 0x01
   1cc18:	92 83       	std	Z+2, r25	; 0x02
   1cc1a:	a3 83       	std	Z+3, r26	; 0x03
   1cc1c:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
    sep();
   1cc20:	0e 94 3f 32 	call	0x647e	; 0x647e <sep>

///@brief Format any drives that do not yet exist
    format_drives();
   1cc24:	0e 94 ab 9a 	call	0x13556	; 0x13556 <format_drives>

#ifdef LCD_SUPPORT
	update_drive_counts();
   1cc28:	4c de       	rcall	.-872    	; 0x1c8c2 <update_drive_counts>
	sprintf((char *) _line2, "%-16s", "(C)Mike Gore");
   1cc2a:	82 e1       	ldi	r24, 0x12	; 18
   1cc2c:	97 e1       	ldi	r25, 0x17	; 23
   1cc2e:	ed b7       	in	r30, 0x3d	; 61
   1cc30:	fe b7       	in	r31, 0x3e	; 62
   1cc32:	97 83       	std	Z+7, r25	; 0x07
   1cc34:	86 83       	std	Z+6, r24	; 0x06
   1cc36:	8a e3       	ldi	r24, 0x3A	; 58
   1cc38:	97 e4       	ldi	r25, 0x47	; 71
   1cc3a:	a0 e0       	ldi	r26, 0x00	; 0
   1cc3c:	83 83       	std	Z+3, r24	; 0x03
   1cc3e:	94 83       	std	Z+4, r25	; 0x04
   1cc40:	a5 83       	std	Z+5, r26	; 0x05
   1cc42:	85 ef       	ldi	r24, 0xF5	; 245
   1cc44:	92 e0       	ldi	r25, 0x02	; 2
   1cc46:	92 83       	std	Z+2, r25	; 0x02
   1cc48:	81 83       	std	Z+1, r24	; 0x01
   1cc4a:	0e 94 1c 47 	call	0x8e38	; 0x8e38 <sprintf_P>

	i2c_task_run();
   1cc4e:	0e 94 e4 2c 	call	0x59c8	; 0x59c8 <i2c_task_run>
	delayms(1000);
   1cc52:	68 ee       	ldi	r22, 0xE8	; 232
   1cc54:	73 e0       	ldi	r23, 0x03	; 3
   1cc56:	80 e0       	ldi	r24, 0x00	; 0
   1cc58:	90 e0       	ldi	r25, 0x00	; 0
   1cc5a:	0e 94 8a 28 	call	0x5114	; 0x5114 <delayms>
    if(!i2c_task.done || i2c_task.error )
   1cc5e:	80 91 80 17 	lds	r24, 0x1780	; 0x801780 <i2c_task+0x2>
   1cc62:	88 23       	and	r24, r24
   1cc64:	21 f0       	breq	.+8      	; 0x1cc6e <main+0x33c>
   1cc66:	80 91 81 17 	lds	r24, 0x1781	; 0x801781 <i2c_task+0x3>
   1cc6a:	88 23       	and	r24, r24
   1cc6c:	61 f0       	breq	.+24     	; 0x1cc86 <main+0x354>
	{
		i2c_display_task_errors();
   1cc6e:	0e 94 4b 2f 	call	0x5e96	; 0x5e96 <i2c_display_task_errors>
		printf("I2C LCD is NOT attached!\n");
   1cc72:	80 e2       	ldi	r24, 0x20	; 32
   1cc74:	97 e4       	ldi	r25, 0x47	; 71
   1cc76:	a0 e0       	ldi	r26, 0x00	; 0
   1cc78:	ed b7       	in	r30, 0x3d	; 61
   1cc7a:	fe b7       	in	r31, 0x3e	; 62
   1cc7c:	81 83       	std	Z+1, r24	; 0x01
   1cc7e:	92 83       	std	Z+2, r25	; 0x02
   1cc80:	a3 83       	std	Z+3, r26	; 0x03
   1cc82:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
	}
#endif

///@brief Start main GPIB state machine
    printf("Starting GPIB TASK\n");
   1cc86:	8c e0       	ldi	r24, 0x0C	; 12
   1cc88:	97 e4       	ldi	r25, 0x47	; 71
   1cc8a:	a0 e0       	ldi	r26, 0x00	; 0
   1cc8c:	ed b7       	in	r30, 0x3d	; 61
   1cc8e:	fe b7       	in	r31, 0x3e	; 62
   1cc90:	81 83       	std	Z+1, r24	; 0x01
   1cc92:	92 83       	std	Z+2, r25	; 0x02
   1cc94:	a3 83       	std	Z+3, r26	; 0x03
   1cc96:	0e 94 30 47 	call	0x8e60	; 0x8e60 <printf_P>
///@brief Keep the task running 
/// task does not exit unless a keypress occurs
/// When it restarts ALL GPIB states are reset 
    while ( 1)
    {
        user_task(1);
   1cc9a:	81 e0       	ldi	r24, 0x01	; 1
   1cc9c:	08 de       	rcall	.-1008   	; 0x1c8ae <user_task>
   1cc9e:	fd cf       	rjmp	.-6      	; 0x1cc9a <main+0x368>

0001cca0 <__mulsi3>:
   1cca0:	db 01       	movw	r26, r22
   1cca2:	8f 93       	push	r24
   1cca4:	9f 93       	push	r25
   1cca6:	8b d0       	rcall	.+278    	; 0x1cdbe <__muluhisi3>
   1cca8:	bf 91       	pop	r27
   1ccaa:	af 91       	pop	r26
   1ccac:	a2 9f       	mul	r26, r18
   1ccae:	80 0d       	add	r24, r0
   1ccb0:	91 1d       	adc	r25, r1
   1ccb2:	a3 9f       	mul	r26, r19
   1ccb4:	90 0d       	add	r25, r0
   1ccb6:	b2 9f       	mul	r27, r18
   1ccb8:	90 0d       	add	r25, r0
   1ccba:	11 24       	eor	r1, r1
   1ccbc:	08 95       	ret

0001ccbe <__udivmodqi4>:
   1ccbe:	99 1b       	sub	r25, r25
   1ccc0:	79 e0       	ldi	r23, 0x09	; 9
   1ccc2:	04 c0       	rjmp	.+8      	; 0x1cccc <__udivmodqi4_ep>

0001ccc4 <__udivmodqi4_loop>:
   1ccc4:	99 1f       	adc	r25, r25
   1ccc6:	96 17       	cp	r25, r22
   1ccc8:	08 f0       	brcs	.+2      	; 0x1cccc <__udivmodqi4_ep>
   1ccca:	96 1b       	sub	r25, r22

0001cccc <__udivmodqi4_ep>:
   1cccc:	88 1f       	adc	r24, r24
   1ccce:	7a 95       	dec	r23
   1ccd0:	c9 f7       	brne	.-14     	; 0x1ccc4 <__udivmodqi4_loop>
   1ccd2:	80 95       	com	r24
   1ccd4:	08 95       	ret

0001ccd6 <__udivmodhi4>:
   1ccd6:	aa 1b       	sub	r26, r26
   1ccd8:	bb 1b       	sub	r27, r27
   1ccda:	51 e1       	ldi	r21, 0x11	; 17
   1ccdc:	07 c0       	rjmp	.+14     	; 0x1ccec <__udivmodhi4_ep>

0001ccde <__udivmodhi4_loop>:
   1ccde:	aa 1f       	adc	r26, r26
   1cce0:	bb 1f       	adc	r27, r27
   1cce2:	a6 17       	cp	r26, r22
   1cce4:	b7 07       	cpc	r27, r23
   1cce6:	10 f0       	brcs	.+4      	; 0x1ccec <__udivmodhi4_ep>
   1cce8:	a6 1b       	sub	r26, r22
   1ccea:	b7 0b       	sbc	r27, r23

0001ccec <__udivmodhi4_ep>:
   1ccec:	88 1f       	adc	r24, r24
   1ccee:	99 1f       	adc	r25, r25
   1ccf0:	5a 95       	dec	r21
   1ccf2:	a9 f7       	brne	.-22     	; 0x1ccde <__udivmodhi4_loop>
   1ccf4:	80 95       	com	r24
   1ccf6:	90 95       	com	r25
   1ccf8:	bc 01       	movw	r22, r24
   1ccfa:	cd 01       	movw	r24, r26
   1ccfc:	08 95       	ret

0001ccfe <__divmodhi4>:
   1ccfe:	97 fb       	bst	r25, 7
   1cd00:	07 2e       	mov	r0, r23
   1cd02:	16 f4       	brtc	.+4      	; 0x1cd08 <__divmodhi4+0xa>
   1cd04:	00 94       	com	r0
   1cd06:	06 d0       	rcall	.+12     	; 0x1cd14 <__divmodhi4_neg1>
   1cd08:	77 fd       	sbrc	r23, 7
   1cd0a:	08 d0       	rcall	.+16     	; 0x1cd1c <__divmodhi4_neg2>
   1cd0c:	e4 df       	rcall	.-56     	; 0x1ccd6 <__udivmodhi4>
   1cd0e:	07 fc       	sbrc	r0, 7
   1cd10:	05 d0       	rcall	.+10     	; 0x1cd1c <__divmodhi4_neg2>
   1cd12:	3e f4       	brtc	.+14     	; 0x1cd22 <__divmodhi4_exit>

0001cd14 <__divmodhi4_neg1>:
   1cd14:	90 95       	com	r25
   1cd16:	81 95       	neg	r24
   1cd18:	9f 4f       	sbci	r25, 0xFF	; 255
   1cd1a:	08 95       	ret

0001cd1c <__divmodhi4_neg2>:
   1cd1c:	70 95       	com	r23
   1cd1e:	61 95       	neg	r22
   1cd20:	7f 4f       	sbci	r23, 0xFF	; 255

0001cd22 <__divmodhi4_exit>:
   1cd22:	08 95       	ret

0001cd24 <__udivmodsi4>:
   1cd24:	a1 e2       	ldi	r26, 0x21	; 33
   1cd26:	1a 2e       	mov	r1, r26
   1cd28:	aa 1b       	sub	r26, r26
   1cd2a:	bb 1b       	sub	r27, r27
   1cd2c:	fd 01       	movw	r30, r26
   1cd2e:	0d c0       	rjmp	.+26     	; 0x1cd4a <__udivmodsi4_ep>

0001cd30 <__udivmodsi4_loop>:
   1cd30:	aa 1f       	adc	r26, r26
   1cd32:	bb 1f       	adc	r27, r27
   1cd34:	ee 1f       	adc	r30, r30
   1cd36:	ff 1f       	adc	r31, r31
   1cd38:	a2 17       	cp	r26, r18
   1cd3a:	b3 07       	cpc	r27, r19
   1cd3c:	e4 07       	cpc	r30, r20
   1cd3e:	f5 07       	cpc	r31, r21
   1cd40:	20 f0       	brcs	.+8      	; 0x1cd4a <__udivmodsi4_ep>
   1cd42:	a2 1b       	sub	r26, r18
   1cd44:	b3 0b       	sbc	r27, r19
   1cd46:	e4 0b       	sbc	r30, r20
   1cd48:	f5 0b       	sbc	r31, r21

0001cd4a <__udivmodsi4_ep>:
   1cd4a:	66 1f       	adc	r22, r22
   1cd4c:	77 1f       	adc	r23, r23
   1cd4e:	88 1f       	adc	r24, r24
   1cd50:	99 1f       	adc	r25, r25
   1cd52:	1a 94       	dec	r1
   1cd54:	69 f7       	brne	.-38     	; 0x1cd30 <__udivmodsi4_loop>
   1cd56:	60 95       	com	r22
   1cd58:	70 95       	com	r23
   1cd5a:	80 95       	com	r24
   1cd5c:	90 95       	com	r25
   1cd5e:	9b 01       	movw	r18, r22
   1cd60:	ac 01       	movw	r20, r24
   1cd62:	bd 01       	movw	r22, r26
   1cd64:	cf 01       	movw	r24, r30
   1cd66:	08 95       	ret

0001cd68 <__divmodsi4>:
   1cd68:	05 2e       	mov	r0, r21
   1cd6a:	97 fb       	bst	r25, 7
   1cd6c:	16 f4       	brtc	.+4      	; 0x1cd72 <__divmodsi4+0xa>
   1cd6e:	00 94       	com	r0
   1cd70:	0f d0       	rcall	.+30     	; 0x1cd90 <__negsi2>
   1cd72:	57 fd       	sbrc	r21, 7
   1cd74:	05 d0       	rcall	.+10     	; 0x1cd80 <__divmodsi4_neg2>
   1cd76:	d6 df       	rcall	.-84     	; 0x1cd24 <__udivmodsi4>
   1cd78:	07 fc       	sbrc	r0, 7
   1cd7a:	02 d0       	rcall	.+4      	; 0x1cd80 <__divmodsi4_neg2>
   1cd7c:	46 f4       	brtc	.+16     	; 0x1cd8e <__divmodsi4_exit>
   1cd7e:	08 c0       	rjmp	.+16     	; 0x1cd90 <__negsi2>

0001cd80 <__divmodsi4_neg2>:
   1cd80:	50 95       	com	r21
   1cd82:	40 95       	com	r20
   1cd84:	30 95       	com	r19
   1cd86:	21 95       	neg	r18
   1cd88:	3f 4f       	sbci	r19, 0xFF	; 255
   1cd8a:	4f 4f       	sbci	r20, 0xFF	; 255
   1cd8c:	5f 4f       	sbci	r21, 0xFF	; 255

0001cd8e <__divmodsi4_exit>:
   1cd8e:	08 95       	ret

0001cd90 <__negsi2>:
   1cd90:	90 95       	com	r25
   1cd92:	80 95       	com	r24
   1cd94:	70 95       	com	r23
   1cd96:	61 95       	neg	r22
   1cd98:	7f 4f       	sbci	r23, 0xFF	; 255
   1cd9a:	8f 4f       	sbci	r24, 0xFF	; 255
   1cd9c:	9f 4f       	sbci	r25, 0xFF	; 255
   1cd9e:	08 95       	ret

0001cda0 <__tablejump2__>:
   1cda0:	ee 0f       	add	r30, r30
   1cda2:	ff 1f       	adc	r31, r31
   1cda4:	00 24       	eor	r0, r0
   1cda6:	00 1c       	adc	r0, r0
   1cda8:	0b be       	out	0x3b, r0	; 59
   1cdaa:	07 90       	elpm	r0, Z+
   1cdac:	f6 91       	elpm	r31, Z
   1cdae:	e0 2d       	mov	r30, r0
   1cdb0:	09 94       	ijmp

0001cdb2 <__usmulhisi3>:
   1cdb2:	6f d0       	rcall	.+222    	; 0x1ce92 <__umulhisi3>

0001cdb4 <__usmulhisi3_tail>:
   1cdb4:	b7 ff       	sbrs	r27, 7
   1cdb6:	08 95       	ret
   1cdb8:	82 1b       	sub	r24, r18
   1cdba:	93 0b       	sbc	r25, r19
   1cdbc:	08 95       	ret

0001cdbe <__muluhisi3>:
   1cdbe:	69 d0       	rcall	.+210    	; 0x1ce92 <__umulhisi3>
   1cdc0:	a5 9f       	mul	r26, r21
   1cdc2:	90 0d       	add	r25, r0
   1cdc4:	b4 9f       	mul	r27, r20
   1cdc6:	90 0d       	add	r25, r0
   1cdc8:	a4 9f       	mul	r26, r20
   1cdca:	80 0d       	add	r24, r0
   1cdcc:	91 1d       	adc	r25, r1
   1cdce:	11 24       	eor	r1, r1
   1cdd0:	08 95       	ret

0001cdd2 <__mulshisi3>:
   1cdd2:	b7 ff       	sbrs	r27, 7
   1cdd4:	f4 cf       	rjmp	.-24     	; 0x1cdbe <__muluhisi3>

0001cdd6 <__mulohisi3>:
   1cdd6:	f3 df       	rcall	.-26     	; 0x1cdbe <__muluhisi3>
   1cdd8:	82 1b       	sub	r24, r18
   1cdda:	93 0b       	sbc	r25, r19
   1cddc:	08 95       	ret

0001cdde <__negdi2>:
   1cdde:	60 95       	com	r22
   1cde0:	70 95       	com	r23
   1cde2:	80 95       	com	r24
   1cde4:	90 95       	com	r25
   1cde6:	30 95       	com	r19
   1cde8:	40 95       	com	r20
   1cdea:	50 95       	com	r21
   1cdec:	21 95       	neg	r18
   1cdee:	3f 4f       	sbci	r19, 0xFF	; 255
   1cdf0:	4f 4f       	sbci	r20, 0xFF	; 255
   1cdf2:	5f 4f       	sbci	r21, 0xFF	; 255
   1cdf4:	6f 4f       	sbci	r22, 0xFF	; 255
   1cdf6:	7f 4f       	sbci	r23, 0xFF	; 255
   1cdf8:	8f 4f       	sbci	r24, 0xFF	; 255
   1cdfa:	9f 4f       	sbci	r25, 0xFF	; 255
   1cdfc:	08 95       	ret

0001cdfe <__prologue_saves__>:
   1cdfe:	2f 92       	push	r2
   1ce00:	3f 92       	push	r3
   1ce02:	4f 92       	push	r4
   1ce04:	5f 92       	push	r5
   1ce06:	6f 92       	push	r6
   1ce08:	7f 92       	push	r7
   1ce0a:	8f 92       	push	r8
   1ce0c:	9f 92       	push	r9
   1ce0e:	af 92       	push	r10
   1ce10:	bf 92       	push	r11
   1ce12:	cf 92       	push	r12
   1ce14:	df 92       	push	r13
   1ce16:	ef 92       	push	r14
   1ce18:	ff 92       	push	r15
   1ce1a:	0f 93       	push	r16
   1ce1c:	1f 93       	push	r17
   1ce1e:	cf 93       	push	r28
   1ce20:	df 93       	push	r29
   1ce22:	cd b7       	in	r28, 0x3d	; 61
   1ce24:	de b7       	in	r29, 0x3e	; 62
   1ce26:	ca 1b       	sub	r28, r26
   1ce28:	db 0b       	sbc	r29, r27
   1ce2a:	0f b6       	in	r0, 0x3f	; 63
   1ce2c:	f8 94       	cli
   1ce2e:	de bf       	out	0x3e, r29	; 62
   1ce30:	0f be       	out	0x3f, r0	; 63
   1ce32:	cd bf       	out	0x3d, r28	; 61
   1ce34:	09 94       	ijmp

0001ce36 <__epilogue_restores__>:
   1ce36:	2a 88       	ldd	r2, Y+18	; 0x12
   1ce38:	39 88       	ldd	r3, Y+17	; 0x11
   1ce3a:	48 88       	ldd	r4, Y+16	; 0x10
   1ce3c:	5f 84       	ldd	r5, Y+15	; 0x0f
   1ce3e:	6e 84       	ldd	r6, Y+14	; 0x0e
   1ce40:	7d 84       	ldd	r7, Y+13	; 0x0d
   1ce42:	8c 84       	ldd	r8, Y+12	; 0x0c
   1ce44:	9b 84       	ldd	r9, Y+11	; 0x0b
   1ce46:	aa 84       	ldd	r10, Y+10	; 0x0a
   1ce48:	b9 84       	ldd	r11, Y+9	; 0x09
   1ce4a:	c8 84       	ldd	r12, Y+8	; 0x08
   1ce4c:	df 80       	ldd	r13, Y+7	; 0x07
   1ce4e:	ee 80       	ldd	r14, Y+6	; 0x06
   1ce50:	fd 80       	ldd	r15, Y+5	; 0x05
   1ce52:	0c 81       	ldd	r16, Y+4	; 0x04
   1ce54:	1b 81       	ldd	r17, Y+3	; 0x03
   1ce56:	aa 81       	ldd	r26, Y+2	; 0x02
   1ce58:	b9 81       	ldd	r27, Y+1	; 0x01
   1ce5a:	ce 0f       	add	r28, r30
   1ce5c:	d1 1d       	adc	r29, r1
   1ce5e:	0f b6       	in	r0, 0x3f	; 63
   1ce60:	f8 94       	cli
   1ce62:	de bf       	out	0x3e, r29	; 62
   1ce64:	0f be       	out	0x3f, r0	; 63
   1ce66:	cd bf       	out	0x3d, r28	; 61
   1ce68:	ed 01       	movw	r28, r26
   1ce6a:	08 95       	ret

0001ce6c <__xload_1>:
   1ce6c:	57 fd       	sbrc	r21, 7
   1ce6e:	03 c0       	rjmp	.+6      	; 0x1ce76 <__xload_1+0xa>
   1ce70:	5b bf       	out	0x3b, r21	; 59
   1ce72:	67 91       	elpm	r22, Z+
   1ce74:	08 95       	ret
   1ce76:	60 81       	ld	r22, Z
   1ce78:	08 95       	ret

0001ce7a <__cmpdi2_s8>:
   1ce7a:	00 24       	eor	r0, r0
   1ce7c:	a7 fd       	sbrc	r26, 7
   1ce7e:	00 94       	com	r0
   1ce80:	2a 17       	cp	r18, r26
   1ce82:	30 05       	cpc	r19, r0
   1ce84:	40 05       	cpc	r20, r0
   1ce86:	50 05       	cpc	r21, r0
   1ce88:	60 05       	cpc	r22, r0
   1ce8a:	70 05       	cpc	r23, r0
   1ce8c:	80 05       	cpc	r24, r0
   1ce8e:	90 05       	cpc	r25, r0
   1ce90:	08 95       	ret

0001ce92 <__umulhisi3>:
   1ce92:	a2 9f       	mul	r26, r18
   1ce94:	b0 01       	movw	r22, r0
   1ce96:	b3 9f       	mul	r27, r19
   1ce98:	c0 01       	movw	r24, r0
   1ce9a:	a3 9f       	mul	r26, r19
   1ce9c:	70 0d       	add	r23, r0
   1ce9e:	81 1d       	adc	r24, r1
   1cea0:	11 24       	eor	r1, r1
   1cea2:	91 1d       	adc	r25, r1
   1cea4:	b2 9f       	mul	r27, r18
   1cea6:	70 0d       	add	r23, r0
   1cea8:	81 1d       	adc	r24, r1
   1ceaa:	11 24       	eor	r1, r1
   1ceac:	91 1d       	adc	r25, r1
   1ceae:	08 95       	ret

0001ceb0 <__subsf3>:
   1ceb0:	50 58       	subi	r21, 0x80	; 128

0001ceb2 <__addsf3>:
   1ceb2:	bb 27       	eor	r27, r27
   1ceb4:	aa 27       	eor	r26, r26
   1ceb6:	0e d0       	rcall	.+28     	; 0x1ced4 <__addsf3x>
   1ceb8:	75 c1       	rjmp	.+746    	; 0x1d1a4 <__fp_round>
   1ceba:	66 d1       	rcall	.+716    	; 0x1d188 <__fp_pscA>
   1cebc:	30 f0       	brcs	.+12     	; 0x1ceca <__addsf3+0x18>
   1cebe:	6b d1       	rcall	.+726    	; 0x1d196 <__fp_pscB>
   1cec0:	20 f0       	brcs	.+8      	; 0x1ceca <__addsf3+0x18>
   1cec2:	31 f4       	brne	.+12     	; 0x1ced0 <__addsf3+0x1e>
   1cec4:	9f 3f       	cpi	r25, 0xFF	; 255
   1cec6:	11 f4       	brne	.+4      	; 0x1cecc <__addsf3+0x1a>
   1cec8:	1e f4       	brtc	.+6      	; 0x1ced0 <__addsf3+0x1e>
   1ceca:	5b c1       	rjmp	.+694    	; 0x1d182 <__fp_nan>
   1cecc:	0e f4       	brtc	.+2      	; 0x1ced0 <__addsf3+0x1e>
   1cece:	e0 95       	com	r30
   1ced0:	e7 fb       	bst	r30, 7
   1ced2:	51 c1       	rjmp	.+674    	; 0x1d176 <__fp_inf>

0001ced4 <__addsf3x>:
   1ced4:	e9 2f       	mov	r30, r25
   1ced6:	77 d1       	rcall	.+750    	; 0x1d1c6 <__fp_split3>
   1ced8:	80 f3       	brcs	.-32     	; 0x1ceba <__addsf3+0x8>
   1ceda:	ba 17       	cp	r27, r26
   1cedc:	62 07       	cpc	r22, r18
   1cede:	73 07       	cpc	r23, r19
   1cee0:	84 07       	cpc	r24, r20
   1cee2:	95 07       	cpc	r25, r21
   1cee4:	18 f0       	brcs	.+6      	; 0x1ceec <__addsf3x+0x18>
   1cee6:	71 f4       	brne	.+28     	; 0x1cf04 <__addsf3x+0x30>
   1cee8:	9e f5       	brtc	.+102    	; 0x1cf50 <__addsf3x+0x7c>
   1ceea:	8f c1       	rjmp	.+798    	; 0x1d20a <__fp_zero>
   1ceec:	0e f4       	brtc	.+2      	; 0x1cef0 <__addsf3x+0x1c>
   1ceee:	e0 95       	com	r30
   1cef0:	0b 2e       	mov	r0, r27
   1cef2:	ba 2f       	mov	r27, r26
   1cef4:	a0 2d       	mov	r26, r0
   1cef6:	0b 01       	movw	r0, r22
   1cef8:	b9 01       	movw	r22, r18
   1cefa:	90 01       	movw	r18, r0
   1cefc:	0c 01       	movw	r0, r24
   1cefe:	ca 01       	movw	r24, r20
   1cf00:	a0 01       	movw	r20, r0
   1cf02:	11 24       	eor	r1, r1
   1cf04:	ff 27       	eor	r31, r31
   1cf06:	59 1b       	sub	r21, r25
   1cf08:	99 f0       	breq	.+38     	; 0x1cf30 <__addsf3x+0x5c>
   1cf0a:	59 3f       	cpi	r21, 0xF9	; 249
   1cf0c:	50 f4       	brcc	.+20     	; 0x1cf22 <__addsf3x+0x4e>
   1cf0e:	50 3e       	cpi	r21, 0xE0	; 224
   1cf10:	68 f1       	brcs	.+90     	; 0x1cf6c <__addsf3x+0x98>
   1cf12:	1a 16       	cp	r1, r26
   1cf14:	f0 40       	sbci	r31, 0x00	; 0
   1cf16:	a2 2f       	mov	r26, r18
   1cf18:	23 2f       	mov	r18, r19
   1cf1a:	34 2f       	mov	r19, r20
   1cf1c:	44 27       	eor	r20, r20
   1cf1e:	58 5f       	subi	r21, 0xF8	; 248
   1cf20:	f3 cf       	rjmp	.-26     	; 0x1cf08 <__addsf3x+0x34>
   1cf22:	46 95       	lsr	r20
   1cf24:	37 95       	ror	r19
   1cf26:	27 95       	ror	r18
   1cf28:	a7 95       	ror	r26
   1cf2a:	f0 40       	sbci	r31, 0x00	; 0
   1cf2c:	53 95       	inc	r21
   1cf2e:	c9 f7       	brne	.-14     	; 0x1cf22 <__addsf3x+0x4e>
   1cf30:	7e f4       	brtc	.+30     	; 0x1cf50 <__addsf3x+0x7c>
   1cf32:	1f 16       	cp	r1, r31
   1cf34:	ba 0b       	sbc	r27, r26
   1cf36:	62 0b       	sbc	r22, r18
   1cf38:	73 0b       	sbc	r23, r19
   1cf3a:	84 0b       	sbc	r24, r20
   1cf3c:	ba f0       	brmi	.+46     	; 0x1cf6c <__addsf3x+0x98>
   1cf3e:	91 50       	subi	r25, 0x01	; 1
   1cf40:	a1 f0       	breq	.+40     	; 0x1cf6a <__addsf3x+0x96>
   1cf42:	ff 0f       	add	r31, r31
   1cf44:	bb 1f       	adc	r27, r27
   1cf46:	66 1f       	adc	r22, r22
   1cf48:	77 1f       	adc	r23, r23
   1cf4a:	88 1f       	adc	r24, r24
   1cf4c:	c2 f7       	brpl	.-16     	; 0x1cf3e <__addsf3x+0x6a>
   1cf4e:	0e c0       	rjmp	.+28     	; 0x1cf6c <__addsf3x+0x98>
   1cf50:	ba 0f       	add	r27, r26
   1cf52:	62 1f       	adc	r22, r18
   1cf54:	73 1f       	adc	r23, r19
   1cf56:	84 1f       	adc	r24, r20
   1cf58:	48 f4       	brcc	.+18     	; 0x1cf6c <__addsf3x+0x98>
   1cf5a:	87 95       	ror	r24
   1cf5c:	77 95       	ror	r23
   1cf5e:	67 95       	ror	r22
   1cf60:	b7 95       	ror	r27
   1cf62:	f7 95       	ror	r31
   1cf64:	9e 3f       	cpi	r25, 0xFE	; 254
   1cf66:	08 f0       	brcs	.+2      	; 0x1cf6a <__addsf3x+0x96>
   1cf68:	b3 cf       	rjmp	.-154    	; 0x1ced0 <__addsf3+0x1e>
   1cf6a:	93 95       	inc	r25
   1cf6c:	88 0f       	add	r24, r24
   1cf6e:	08 f0       	brcs	.+2      	; 0x1cf72 <__addsf3x+0x9e>
   1cf70:	99 27       	eor	r25, r25
   1cf72:	ee 0f       	add	r30, r30
   1cf74:	97 95       	ror	r25
   1cf76:	87 95       	ror	r24
   1cf78:	08 95       	ret

0001cf7a <__cmpsf2>:
   1cf7a:	d9 d0       	rcall	.+434    	; 0x1d12e <__fp_cmp>
   1cf7c:	08 f4       	brcc	.+2      	; 0x1cf80 <__cmpsf2+0x6>
   1cf7e:	81 e0       	ldi	r24, 0x01	; 1
   1cf80:	08 95       	ret

0001cf82 <__divsf3>:
   1cf82:	0c d0       	rcall	.+24     	; 0x1cf9c <__divsf3x>
   1cf84:	0f c1       	rjmp	.+542    	; 0x1d1a4 <__fp_round>
   1cf86:	07 d1       	rcall	.+526    	; 0x1d196 <__fp_pscB>
   1cf88:	40 f0       	brcs	.+16     	; 0x1cf9a <__divsf3+0x18>
   1cf8a:	fe d0       	rcall	.+508    	; 0x1d188 <__fp_pscA>
   1cf8c:	30 f0       	brcs	.+12     	; 0x1cf9a <__divsf3+0x18>
   1cf8e:	21 f4       	brne	.+8      	; 0x1cf98 <__divsf3+0x16>
   1cf90:	5f 3f       	cpi	r21, 0xFF	; 255
   1cf92:	19 f0       	breq	.+6      	; 0x1cf9a <__divsf3+0x18>
   1cf94:	f0 c0       	rjmp	.+480    	; 0x1d176 <__fp_inf>
   1cf96:	51 11       	cpse	r21, r1
   1cf98:	39 c1       	rjmp	.+626    	; 0x1d20c <__fp_szero>
   1cf9a:	f3 c0       	rjmp	.+486    	; 0x1d182 <__fp_nan>

0001cf9c <__divsf3x>:
   1cf9c:	14 d1       	rcall	.+552    	; 0x1d1c6 <__fp_split3>
   1cf9e:	98 f3       	brcs	.-26     	; 0x1cf86 <__divsf3+0x4>

0001cfa0 <__divsf3_pse>:
   1cfa0:	99 23       	and	r25, r25
   1cfa2:	c9 f3       	breq	.-14     	; 0x1cf96 <__divsf3+0x14>
   1cfa4:	55 23       	and	r21, r21
   1cfa6:	b1 f3       	breq	.-20     	; 0x1cf94 <__divsf3+0x12>
   1cfa8:	95 1b       	sub	r25, r21
   1cfaa:	55 0b       	sbc	r21, r21
   1cfac:	bb 27       	eor	r27, r27
   1cfae:	aa 27       	eor	r26, r26
   1cfb0:	62 17       	cp	r22, r18
   1cfb2:	73 07       	cpc	r23, r19
   1cfb4:	84 07       	cpc	r24, r20
   1cfb6:	38 f0       	brcs	.+14     	; 0x1cfc6 <__divsf3_pse+0x26>
   1cfb8:	9f 5f       	subi	r25, 0xFF	; 255
   1cfba:	5f 4f       	sbci	r21, 0xFF	; 255
   1cfbc:	22 0f       	add	r18, r18
   1cfbe:	33 1f       	adc	r19, r19
   1cfc0:	44 1f       	adc	r20, r20
   1cfc2:	aa 1f       	adc	r26, r26
   1cfc4:	a9 f3       	breq	.-22     	; 0x1cfb0 <__divsf3_pse+0x10>
   1cfc6:	33 d0       	rcall	.+102    	; 0x1d02e <__divsf3_pse+0x8e>
   1cfc8:	0e 2e       	mov	r0, r30
   1cfca:	3a f0       	brmi	.+14     	; 0x1cfda <__divsf3_pse+0x3a>
   1cfcc:	e0 e8       	ldi	r30, 0x80	; 128
   1cfce:	30 d0       	rcall	.+96     	; 0x1d030 <__divsf3_pse+0x90>
   1cfd0:	91 50       	subi	r25, 0x01	; 1
   1cfd2:	50 40       	sbci	r21, 0x00	; 0
   1cfd4:	e6 95       	lsr	r30
   1cfd6:	00 1c       	adc	r0, r0
   1cfd8:	ca f7       	brpl	.-14     	; 0x1cfcc <__divsf3_pse+0x2c>
   1cfda:	29 d0       	rcall	.+82     	; 0x1d02e <__divsf3_pse+0x8e>
   1cfdc:	fe 2f       	mov	r31, r30
   1cfde:	27 d0       	rcall	.+78     	; 0x1d02e <__divsf3_pse+0x8e>
   1cfe0:	66 0f       	add	r22, r22
   1cfe2:	77 1f       	adc	r23, r23
   1cfe4:	88 1f       	adc	r24, r24
   1cfe6:	bb 1f       	adc	r27, r27
   1cfe8:	26 17       	cp	r18, r22
   1cfea:	37 07       	cpc	r19, r23
   1cfec:	48 07       	cpc	r20, r24
   1cfee:	ab 07       	cpc	r26, r27
   1cff0:	b0 e8       	ldi	r27, 0x80	; 128
   1cff2:	09 f0       	breq	.+2      	; 0x1cff6 <__divsf3_pse+0x56>
   1cff4:	bb 0b       	sbc	r27, r27
   1cff6:	80 2d       	mov	r24, r0
   1cff8:	bf 01       	movw	r22, r30
   1cffa:	ff 27       	eor	r31, r31
   1cffc:	93 58       	subi	r25, 0x83	; 131
   1cffe:	5f 4f       	sbci	r21, 0xFF	; 255
   1d000:	2a f0       	brmi	.+10     	; 0x1d00c <__divsf3_pse+0x6c>
   1d002:	9e 3f       	cpi	r25, 0xFE	; 254
   1d004:	51 05       	cpc	r21, r1
   1d006:	68 f0       	brcs	.+26     	; 0x1d022 <__divsf3_pse+0x82>
   1d008:	b6 c0       	rjmp	.+364    	; 0x1d176 <__fp_inf>
   1d00a:	00 c1       	rjmp	.+512    	; 0x1d20c <__fp_szero>
   1d00c:	5f 3f       	cpi	r21, 0xFF	; 255
   1d00e:	ec f3       	brlt	.-6      	; 0x1d00a <__divsf3_pse+0x6a>
   1d010:	98 3e       	cpi	r25, 0xE8	; 232
   1d012:	dc f3       	brlt	.-10     	; 0x1d00a <__divsf3_pse+0x6a>
   1d014:	86 95       	lsr	r24
   1d016:	77 95       	ror	r23
   1d018:	67 95       	ror	r22
   1d01a:	b7 95       	ror	r27
   1d01c:	f7 95       	ror	r31
   1d01e:	9f 5f       	subi	r25, 0xFF	; 255
   1d020:	c9 f7       	brne	.-14     	; 0x1d014 <__divsf3_pse+0x74>
   1d022:	88 0f       	add	r24, r24
   1d024:	91 1d       	adc	r25, r1
   1d026:	96 95       	lsr	r25
   1d028:	87 95       	ror	r24
   1d02a:	97 f9       	bld	r25, 7
   1d02c:	08 95       	ret
   1d02e:	e1 e0       	ldi	r30, 0x01	; 1
   1d030:	66 0f       	add	r22, r22
   1d032:	77 1f       	adc	r23, r23
   1d034:	88 1f       	adc	r24, r24
   1d036:	bb 1f       	adc	r27, r27
   1d038:	62 17       	cp	r22, r18
   1d03a:	73 07       	cpc	r23, r19
   1d03c:	84 07       	cpc	r24, r20
   1d03e:	ba 07       	cpc	r27, r26
   1d040:	20 f0       	brcs	.+8      	; 0x1d04a <__divsf3_pse+0xaa>
   1d042:	62 1b       	sub	r22, r18
   1d044:	73 0b       	sbc	r23, r19
   1d046:	84 0b       	sbc	r24, r20
   1d048:	ba 0b       	sbc	r27, r26
   1d04a:	ee 1f       	adc	r30, r30
   1d04c:	88 f7       	brcc	.-30     	; 0x1d030 <__divsf3_pse+0x90>
   1d04e:	e0 95       	com	r30
   1d050:	08 95       	ret

0001d052 <__fixsfsi>:
   1d052:	04 d0       	rcall	.+8      	; 0x1d05c <__fixunssfsi>
   1d054:	68 94       	set
   1d056:	b1 11       	cpse	r27, r1
   1d058:	d9 c0       	rjmp	.+434    	; 0x1d20c <__fp_szero>
   1d05a:	08 95       	ret

0001d05c <__fixunssfsi>:
   1d05c:	bc d0       	rcall	.+376    	; 0x1d1d6 <__fp_splitA>
   1d05e:	88 f0       	brcs	.+34     	; 0x1d082 <__fixunssfsi+0x26>
   1d060:	9f 57       	subi	r25, 0x7F	; 127
   1d062:	90 f0       	brcs	.+36     	; 0x1d088 <__fixunssfsi+0x2c>
   1d064:	b9 2f       	mov	r27, r25
   1d066:	99 27       	eor	r25, r25
   1d068:	b7 51       	subi	r27, 0x17	; 23
   1d06a:	a0 f0       	brcs	.+40     	; 0x1d094 <__fixunssfsi+0x38>
   1d06c:	d1 f0       	breq	.+52     	; 0x1d0a2 <__fixunssfsi+0x46>
   1d06e:	66 0f       	add	r22, r22
   1d070:	77 1f       	adc	r23, r23
   1d072:	88 1f       	adc	r24, r24
   1d074:	99 1f       	adc	r25, r25
   1d076:	1a f0       	brmi	.+6      	; 0x1d07e <__fixunssfsi+0x22>
   1d078:	ba 95       	dec	r27
   1d07a:	c9 f7       	brne	.-14     	; 0x1d06e <__fixunssfsi+0x12>
   1d07c:	12 c0       	rjmp	.+36     	; 0x1d0a2 <__fixunssfsi+0x46>
   1d07e:	b1 30       	cpi	r27, 0x01	; 1
   1d080:	81 f0       	breq	.+32     	; 0x1d0a2 <__fixunssfsi+0x46>
   1d082:	c3 d0       	rcall	.+390    	; 0x1d20a <__fp_zero>
   1d084:	b1 e0       	ldi	r27, 0x01	; 1
   1d086:	08 95       	ret
   1d088:	c0 c0       	rjmp	.+384    	; 0x1d20a <__fp_zero>
   1d08a:	67 2f       	mov	r22, r23
   1d08c:	78 2f       	mov	r23, r24
   1d08e:	88 27       	eor	r24, r24
   1d090:	b8 5f       	subi	r27, 0xF8	; 248
   1d092:	39 f0       	breq	.+14     	; 0x1d0a2 <__fixunssfsi+0x46>
   1d094:	b9 3f       	cpi	r27, 0xF9	; 249
   1d096:	cc f3       	brlt	.-14     	; 0x1d08a <__fixunssfsi+0x2e>
   1d098:	86 95       	lsr	r24
   1d09a:	77 95       	ror	r23
   1d09c:	67 95       	ror	r22
   1d09e:	b3 95       	inc	r27
   1d0a0:	d9 f7       	brne	.-10     	; 0x1d098 <__fixunssfsi+0x3c>
   1d0a2:	3e f4       	brtc	.+14     	; 0x1d0b2 <__fixunssfsi+0x56>
   1d0a4:	90 95       	com	r25
   1d0a6:	80 95       	com	r24
   1d0a8:	70 95       	com	r23
   1d0aa:	61 95       	neg	r22
   1d0ac:	7f 4f       	sbci	r23, 0xFF	; 255
   1d0ae:	8f 4f       	sbci	r24, 0xFF	; 255
   1d0b0:	9f 4f       	sbci	r25, 0xFF	; 255
   1d0b2:	08 95       	ret

0001d0b4 <__floatunsisf>:
   1d0b4:	e8 94       	clt
   1d0b6:	09 c0       	rjmp	.+18     	; 0x1d0ca <__floatsisf+0x12>

0001d0b8 <__floatsisf>:
   1d0b8:	97 fb       	bst	r25, 7
   1d0ba:	3e f4       	brtc	.+14     	; 0x1d0ca <__floatsisf+0x12>
   1d0bc:	90 95       	com	r25
   1d0be:	80 95       	com	r24
   1d0c0:	70 95       	com	r23
   1d0c2:	61 95       	neg	r22
   1d0c4:	7f 4f       	sbci	r23, 0xFF	; 255
   1d0c6:	8f 4f       	sbci	r24, 0xFF	; 255
   1d0c8:	9f 4f       	sbci	r25, 0xFF	; 255
   1d0ca:	99 23       	and	r25, r25
   1d0cc:	a9 f0       	breq	.+42     	; 0x1d0f8 <__floatsisf+0x40>
   1d0ce:	f9 2f       	mov	r31, r25
   1d0d0:	96 e9       	ldi	r25, 0x96	; 150
   1d0d2:	bb 27       	eor	r27, r27
   1d0d4:	93 95       	inc	r25
   1d0d6:	f6 95       	lsr	r31
   1d0d8:	87 95       	ror	r24
   1d0da:	77 95       	ror	r23
   1d0dc:	67 95       	ror	r22
   1d0de:	b7 95       	ror	r27
   1d0e0:	f1 11       	cpse	r31, r1
   1d0e2:	f8 cf       	rjmp	.-16     	; 0x1d0d4 <__floatsisf+0x1c>
   1d0e4:	fa f4       	brpl	.+62     	; 0x1d124 <__floatsisf+0x6c>
   1d0e6:	bb 0f       	add	r27, r27
   1d0e8:	11 f4       	brne	.+4      	; 0x1d0ee <__floatsisf+0x36>
   1d0ea:	60 ff       	sbrs	r22, 0
   1d0ec:	1b c0       	rjmp	.+54     	; 0x1d124 <__floatsisf+0x6c>
   1d0ee:	6f 5f       	subi	r22, 0xFF	; 255
   1d0f0:	7f 4f       	sbci	r23, 0xFF	; 255
   1d0f2:	8f 4f       	sbci	r24, 0xFF	; 255
   1d0f4:	9f 4f       	sbci	r25, 0xFF	; 255
   1d0f6:	16 c0       	rjmp	.+44     	; 0x1d124 <__floatsisf+0x6c>
   1d0f8:	88 23       	and	r24, r24
   1d0fa:	11 f0       	breq	.+4      	; 0x1d100 <__floatsisf+0x48>
   1d0fc:	96 e9       	ldi	r25, 0x96	; 150
   1d0fe:	11 c0       	rjmp	.+34     	; 0x1d122 <__floatsisf+0x6a>
   1d100:	77 23       	and	r23, r23
   1d102:	21 f0       	breq	.+8      	; 0x1d10c <__floatsisf+0x54>
   1d104:	9e e8       	ldi	r25, 0x8E	; 142
   1d106:	87 2f       	mov	r24, r23
   1d108:	76 2f       	mov	r23, r22
   1d10a:	05 c0       	rjmp	.+10     	; 0x1d116 <__floatsisf+0x5e>
   1d10c:	66 23       	and	r22, r22
   1d10e:	71 f0       	breq	.+28     	; 0x1d12c <__floatsisf+0x74>
   1d110:	96 e8       	ldi	r25, 0x86	; 134
   1d112:	86 2f       	mov	r24, r22
   1d114:	70 e0       	ldi	r23, 0x00	; 0
   1d116:	60 e0       	ldi	r22, 0x00	; 0
   1d118:	2a f0       	brmi	.+10     	; 0x1d124 <__floatsisf+0x6c>
   1d11a:	9a 95       	dec	r25
   1d11c:	66 0f       	add	r22, r22
   1d11e:	77 1f       	adc	r23, r23
   1d120:	88 1f       	adc	r24, r24
   1d122:	da f7       	brpl	.-10     	; 0x1d11a <__floatsisf+0x62>
   1d124:	88 0f       	add	r24, r24
   1d126:	96 95       	lsr	r25
   1d128:	87 95       	ror	r24
   1d12a:	97 f9       	bld	r25, 7
   1d12c:	08 95       	ret

0001d12e <__fp_cmp>:
   1d12e:	99 0f       	add	r25, r25
   1d130:	00 08       	sbc	r0, r0
   1d132:	55 0f       	add	r21, r21
   1d134:	aa 0b       	sbc	r26, r26
   1d136:	e0 e8       	ldi	r30, 0x80	; 128
   1d138:	fe ef       	ldi	r31, 0xFE	; 254
   1d13a:	16 16       	cp	r1, r22
   1d13c:	17 06       	cpc	r1, r23
   1d13e:	e8 07       	cpc	r30, r24
   1d140:	f9 07       	cpc	r31, r25
   1d142:	c0 f0       	brcs	.+48     	; 0x1d174 <__fp_cmp+0x46>
   1d144:	12 16       	cp	r1, r18
   1d146:	13 06       	cpc	r1, r19
   1d148:	e4 07       	cpc	r30, r20
   1d14a:	f5 07       	cpc	r31, r21
   1d14c:	98 f0       	brcs	.+38     	; 0x1d174 <__fp_cmp+0x46>
   1d14e:	62 1b       	sub	r22, r18
   1d150:	73 0b       	sbc	r23, r19
   1d152:	84 0b       	sbc	r24, r20
   1d154:	95 0b       	sbc	r25, r21
   1d156:	39 f4       	brne	.+14     	; 0x1d166 <__fp_cmp+0x38>
   1d158:	0a 26       	eor	r0, r26
   1d15a:	61 f0       	breq	.+24     	; 0x1d174 <__fp_cmp+0x46>
   1d15c:	23 2b       	or	r18, r19
   1d15e:	24 2b       	or	r18, r20
   1d160:	25 2b       	or	r18, r21
   1d162:	21 f4       	brne	.+8      	; 0x1d16c <__fp_cmp+0x3e>
   1d164:	08 95       	ret
   1d166:	0a 26       	eor	r0, r26
   1d168:	09 f4       	brne	.+2      	; 0x1d16c <__fp_cmp+0x3e>
   1d16a:	a1 40       	sbci	r26, 0x01	; 1
   1d16c:	a6 95       	lsr	r26
   1d16e:	8f ef       	ldi	r24, 0xFF	; 255
   1d170:	81 1d       	adc	r24, r1
   1d172:	81 1d       	adc	r24, r1
   1d174:	08 95       	ret

0001d176 <__fp_inf>:
   1d176:	97 f9       	bld	r25, 7
   1d178:	9f 67       	ori	r25, 0x7F	; 127
   1d17a:	80 e8       	ldi	r24, 0x80	; 128
   1d17c:	70 e0       	ldi	r23, 0x00	; 0
   1d17e:	60 e0       	ldi	r22, 0x00	; 0
   1d180:	08 95       	ret

0001d182 <__fp_nan>:
   1d182:	9f ef       	ldi	r25, 0xFF	; 255
   1d184:	80 ec       	ldi	r24, 0xC0	; 192
   1d186:	08 95       	ret

0001d188 <__fp_pscA>:
   1d188:	00 24       	eor	r0, r0
   1d18a:	0a 94       	dec	r0
   1d18c:	16 16       	cp	r1, r22
   1d18e:	17 06       	cpc	r1, r23
   1d190:	18 06       	cpc	r1, r24
   1d192:	09 06       	cpc	r0, r25
   1d194:	08 95       	ret

0001d196 <__fp_pscB>:
   1d196:	00 24       	eor	r0, r0
   1d198:	0a 94       	dec	r0
   1d19a:	12 16       	cp	r1, r18
   1d19c:	13 06       	cpc	r1, r19
   1d19e:	14 06       	cpc	r1, r20
   1d1a0:	05 06       	cpc	r0, r21
   1d1a2:	08 95       	ret

0001d1a4 <__fp_round>:
   1d1a4:	09 2e       	mov	r0, r25
   1d1a6:	03 94       	inc	r0
   1d1a8:	00 0c       	add	r0, r0
   1d1aa:	11 f4       	brne	.+4      	; 0x1d1b0 <__fp_round+0xc>
   1d1ac:	88 23       	and	r24, r24
   1d1ae:	52 f0       	brmi	.+20     	; 0x1d1c4 <__fp_round+0x20>
   1d1b0:	bb 0f       	add	r27, r27
   1d1b2:	40 f4       	brcc	.+16     	; 0x1d1c4 <__fp_round+0x20>
   1d1b4:	bf 2b       	or	r27, r31
   1d1b6:	11 f4       	brne	.+4      	; 0x1d1bc <__fp_round+0x18>
   1d1b8:	60 ff       	sbrs	r22, 0
   1d1ba:	04 c0       	rjmp	.+8      	; 0x1d1c4 <__fp_round+0x20>
   1d1bc:	6f 5f       	subi	r22, 0xFF	; 255
   1d1be:	7f 4f       	sbci	r23, 0xFF	; 255
   1d1c0:	8f 4f       	sbci	r24, 0xFF	; 255
   1d1c2:	9f 4f       	sbci	r25, 0xFF	; 255
   1d1c4:	08 95       	ret

0001d1c6 <__fp_split3>:
   1d1c6:	57 fd       	sbrc	r21, 7
   1d1c8:	90 58       	subi	r25, 0x80	; 128
   1d1ca:	44 0f       	add	r20, r20
   1d1cc:	55 1f       	adc	r21, r21
   1d1ce:	59 f0       	breq	.+22     	; 0x1d1e6 <__fp_splitA+0x10>
   1d1d0:	5f 3f       	cpi	r21, 0xFF	; 255
   1d1d2:	71 f0       	breq	.+28     	; 0x1d1f0 <__fp_splitA+0x1a>
   1d1d4:	47 95       	ror	r20

0001d1d6 <__fp_splitA>:
   1d1d6:	88 0f       	add	r24, r24
   1d1d8:	97 fb       	bst	r25, 7
   1d1da:	99 1f       	adc	r25, r25
   1d1dc:	61 f0       	breq	.+24     	; 0x1d1f6 <__fp_splitA+0x20>
   1d1de:	9f 3f       	cpi	r25, 0xFF	; 255
   1d1e0:	79 f0       	breq	.+30     	; 0x1d200 <__fp_splitA+0x2a>
   1d1e2:	87 95       	ror	r24
   1d1e4:	08 95       	ret
   1d1e6:	12 16       	cp	r1, r18
   1d1e8:	13 06       	cpc	r1, r19
   1d1ea:	14 06       	cpc	r1, r20
   1d1ec:	55 1f       	adc	r21, r21
   1d1ee:	f2 cf       	rjmp	.-28     	; 0x1d1d4 <__fp_split3+0xe>
   1d1f0:	46 95       	lsr	r20
   1d1f2:	f1 df       	rcall	.-30     	; 0x1d1d6 <__fp_splitA>
   1d1f4:	08 c0       	rjmp	.+16     	; 0x1d206 <__fp_splitA+0x30>
   1d1f6:	16 16       	cp	r1, r22
   1d1f8:	17 06       	cpc	r1, r23
   1d1fa:	18 06       	cpc	r1, r24
   1d1fc:	99 1f       	adc	r25, r25
   1d1fe:	f1 cf       	rjmp	.-30     	; 0x1d1e2 <__fp_splitA+0xc>
   1d200:	86 95       	lsr	r24
   1d202:	71 05       	cpc	r23, r1
   1d204:	61 05       	cpc	r22, r1
   1d206:	08 94       	sec
   1d208:	08 95       	ret

0001d20a <__fp_zero>:
   1d20a:	e8 94       	clt

0001d20c <__fp_szero>:
   1d20c:	bb 27       	eor	r27, r27
   1d20e:	66 27       	eor	r22, r22
   1d210:	77 27       	eor	r23, r23
   1d212:	cb 01       	movw	r24, r22
   1d214:	97 f9       	bld	r25, 7
   1d216:	08 95       	ret

0001d218 <__gesf2>:
   1d218:	8a df       	rcall	.-236    	; 0x1d12e <__fp_cmp>
   1d21a:	08 f4       	brcc	.+2      	; 0x1d21e <__gesf2+0x6>
   1d21c:	8f ef       	ldi	r24, 0xFF	; 255
   1d21e:	08 95       	ret

0001d220 <__mulsf3>:
   1d220:	0b d0       	rcall	.+22     	; 0x1d238 <__mulsf3x>
   1d222:	c0 cf       	rjmp	.-128    	; 0x1d1a4 <__fp_round>
   1d224:	b1 df       	rcall	.-158    	; 0x1d188 <__fp_pscA>
   1d226:	28 f0       	brcs	.+10     	; 0x1d232 <__mulsf3+0x12>
   1d228:	b6 df       	rcall	.-148    	; 0x1d196 <__fp_pscB>
   1d22a:	18 f0       	brcs	.+6      	; 0x1d232 <__mulsf3+0x12>
   1d22c:	95 23       	and	r25, r21
   1d22e:	09 f0       	breq	.+2      	; 0x1d232 <__mulsf3+0x12>
   1d230:	a2 cf       	rjmp	.-188    	; 0x1d176 <__fp_inf>
   1d232:	a7 cf       	rjmp	.-178    	; 0x1d182 <__fp_nan>
   1d234:	11 24       	eor	r1, r1
   1d236:	ea cf       	rjmp	.-44     	; 0x1d20c <__fp_szero>

0001d238 <__mulsf3x>:
   1d238:	c6 df       	rcall	.-116    	; 0x1d1c6 <__fp_split3>
   1d23a:	a0 f3       	brcs	.-24     	; 0x1d224 <__mulsf3+0x4>

0001d23c <__mulsf3_pse>:
   1d23c:	95 9f       	mul	r25, r21
   1d23e:	d1 f3       	breq	.-12     	; 0x1d234 <__mulsf3+0x14>
   1d240:	95 0f       	add	r25, r21
   1d242:	50 e0       	ldi	r21, 0x00	; 0
   1d244:	55 1f       	adc	r21, r21
   1d246:	62 9f       	mul	r22, r18
   1d248:	f0 01       	movw	r30, r0
   1d24a:	72 9f       	mul	r23, r18
   1d24c:	bb 27       	eor	r27, r27
   1d24e:	f0 0d       	add	r31, r0
   1d250:	b1 1d       	adc	r27, r1
   1d252:	63 9f       	mul	r22, r19
   1d254:	aa 27       	eor	r26, r26
   1d256:	f0 0d       	add	r31, r0
   1d258:	b1 1d       	adc	r27, r1
   1d25a:	aa 1f       	adc	r26, r26
   1d25c:	64 9f       	mul	r22, r20
   1d25e:	66 27       	eor	r22, r22
   1d260:	b0 0d       	add	r27, r0
   1d262:	a1 1d       	adc	r26, r1
   1d264:	66 1f       	adc	r22, r22
   1d266:	82 9f       	mul	r24, r18
   1d268:	22 27       	eor	r18, r18
   1d26a:	b0 0d       	add	r27, r0
   1d26c:	a1 1d       	adc	r26, r1
   1d26e:	62 1f       	adc	r22, r18
   1d270:	73 9f       	mul	r23, r19
   1d272:	b0 0d       	add	r27, r0
   1d274:	a1 1d       	adc	r26, r1
   1d276:	62 1f       	adc	r22, r18
   1d278:	83 9f       	mul	r24, r19
   1d27a:	a0 0d       	add	r26, r0
   1d27c:	61 1d       	adc	r22, r1
   1d27e:	22 1f       	adc	r18, r18
   1d280:	74 9f       	mul	r23, r20
   1d282:	33 27       	eor	r19, r19
   1d284:	a0 0d       	add	r26, r0
   1d286:	61 1d       	adc	r22, r1
   1d288:	23 1f       	adc	r18, r19
   1d28a:	84 9f       	mul	r24, r20
   1d28c:	60 0d       	add	r22, r0
   1d28e:	21 1d       	adc	r18, r1
   1d290:	82 2f       	mov	r24, r18
   1d292:	76 2f       	mov	r23, r22
   1d294:	6a 2f       	mov	r22, r26
   1d296:	11 24       	eor	r1, r1
   1d298:	9f 57       	subi	r25, 0x7F	; 127
   1d29a:	50 40       	sbci	r21, 0x00	; 0
   1d29c:	8a f0       	brmi	.+34     	; 0x1d2c0 <__mulsf3_pse+0x84>
   1d29e:	e1 f0       	breq	.+56     	; 0x1d2d8 <__mulsf3_pse+0x9c>
   1d2a0:	88 23       	and	r24, r24
   1d2a2:	4a f0       	brmi	.+18     	; 0x1d2b6 <__mulsf3_pse+0x7a>
   1d2a4:	ee 0f       	add	r30, r30
   1d2a6:	ff 1f       	adc	r31, r31
   1d2a8:	bb 1f       	adc	r27, r27
   1d2aa:	66 1f       	adc	r22, r22
   1d2ac:	77 1f       	adc	r23, r23
   1d2ae:	88 1f       	adc	r24, r24
   1d2b0:	91 50       	subi	r25, 0x01	; 1
   1d2b2:	50 40       	sbci	r21, 0x00	; 0
   1d2b4:	a9 f7       	brne	.-22     	; 0x1d2a0 <__mulsf3_pse+0x64>
   1d2b6:	9e 3f       	cpi	r25, 0xFE	; 254
   1d2b8:	51 05       	cpc	r21, r1
   1d2ba:	70 f0       	brcs	.+28     	; 0x1d2d8 <__mulsf3_pse+0x9c>
   1d2bc:	5c cf       	rjmp	.-328    	; 0x1d176 <__fp_inf>
   1d2be:	a6 cf       	rjmp	.-180    	; 0x1d20c <__fp_szero>
   1d2c0:	5f 3f       	cpi	r21, 0xFF	; 255
   1d2c2:	ec f3       	brlt	.-6      	; 0x1d2be <__mulsf3_pse+0x82>
   1d2c4:	98 3e       	cpi	r25, 0xE8	; 232
   1d2c6:	dc f3       	brlt	.-10     	; 0x1d2be <__mulsf3_pse+0x82>
   1d2c8:	86 95       	lsr	r24
   1d2ca:	77 95       	ror	r23
   1d2cc:	67 95       	ror	r22
   1d2ce:	b7 95       	ror	r27
   1d2d0:	f7 95       	ror	r31
   1d2d2:	e7 95       	ror	r30
   1d2d4:	9f 5f       	subi	r25, 0xFF	; 255
   1d2d6:	c1 f7       	brne	.-16     	; 0x1d2c8 <__mulsf3_pse+0x8c>
   1d2d8:	fe 2b       	or	r31, r30
   1d2da:	88 0f       	add	r24, r24
   1d2dc:	91 1d       	adc	r25, r1
   1d2de:	96 95       	lsr	r25
   1d2e0:	87 95       	ror	r24
   1d2e2:	97 f9       	bld	r25, 7
   1d2e4:	08 95       	ret

0001d2e6 <round>:
   1d2e6:	77 df       	rcall	.-274    	; 0x1d1d6 <__fp_splitA>
   1d2e8:	e0 f0       	brcs	.+56     	; 0x1d322 <round+0x3c>
   1d2ea:	9e 37       	cpi	r25, 0x7E	; 126
   1d2ec:	d8 f0       	brcs	.+54     	; 0x1d324 <round+0x3e>
   1d2ee:	96 39       	cpi	r25, 0x96	; 150
   1d2f0:	b8 f4       	brcc	.+46     	; 0x1d320 <round+0x3a>
   1d2f2:	9e 38       	cpi	r25, 0x8E	; 142
   1d2f4:	48 f4       	brcc	.+18     	; 0x1d308 <round+0x22>
   1d2f6:	67 2f       	mov	r22, r23
   1d2f8:	78 2f       	mov	r23, r24
   1d2fa:	88 27       	eor	r24, r24
   1d2fc:	98 5f       	subi	r25, 0xF8	; 248
   1d2fe:	f9 cf       	rjmp	.-14     	; 0x1d2f2 <round+0xc>
   1d300:	86 95       	lsr	r24
   1d302:	77 95       	ror	r23
   1d304:	67 95       	ror	r22
   1d306:	93 95       	inc	r25
   1d308:	95 39       	cpi	r25, 0x95	; 149
   1d30a:	d0 f3       	brcs	.-12     	; 0x1d300 <round+0x1a>
   1d30c:	b6 2f       	mov	r27, r22
   1d30e:	b1 70       	andi	r27, 0x01	; 1
   1d310:	6b 0f       	add	r22, r27
   1d312:	71 1d       	adc	r23, r1
   1d314:	81 1d       	adc	r24, r1
   1d316:	20 f4       	brcc	.+8      	; 0x1d320 <round+0x3a>
   1d318:	87 95       	ror	r24
   1d31a:	77 95       	ror	r23
   1d31c:	67 95       	ror	r22
   1d31e:	93 95       	inc	r25
   1d320:	02 c0       	rjmp	.+4      	; 0x1d326 <__fp_mintl>
   1d322:	1c c0       	rjmp	.+56     	; 0x1d35c <__fp_mpack>
   1d324:	73 cf       	rjmp	.-282    	; 0x1d20c <__fp_szero>

0001d326 <__fp_mintl>:
   1d326:	88 23       	and	r24, r24
   1d328:	71 f4       	brne	.+28     	; 0x1d346 <__fp_mintl+0x20>
   1d32a:	77 23       	and	r23, r23
   1d32c:	21 f0       	breq	.+8      	; 0x1d336 <__fp_mintl+0x10>
   1d32e:	98 50       	subi	r25, 0x08	; 8
   1d330:	87 2b       	or	r24, r23
   1d332:	76 2f       	mov	r23, r22
   1d334:	07 c0       	rjmp	.+14     	; 0x1d344 <__fp_mintl+0x1e>
   1d336:	66 23       	and	r22, r22
   1d338:	11 f4       	brne	.+4      	; 0x1d33e <__fp_mintl+0x18>
   1d33a:	99 27       	eor	r25, r25
   1d33c:	0d c0       	rjmp	.+26     	; 0x1d358 <__fp_mintl+0x32>
   1d33e:	90 51       	subi	r25, 0x10	; 16
   1d340:	86 2b       	or	r24, r22
   1d342:	70 e0       	ldi	r23, 0x00	; 0
   1d344:	60 e0       	ldi	r22, 0x00	; 0
   1d346:	2a f0       	brmi	.+10     	; 0x1d352 <__fp_mintl+0x2c>
   1d348:	9a 95       	dec	r25
   1d34a:	66 0f       	add	r22, r22
   1d34c:	77 1f       	adc	r23, r23
   1d34e:	88 1f       	adc	r24, r24
   1d350:	da f7       	brpl	.-10     	; 0x1d348 <__fp_mintl+0x22>
   1d352:	88 0f       	add	r24, r24
   1d354:	96 95       	lsr	r25
   1d356:	87 95       	ror	r24
   1d358:	97 f9       	bld	r25, 7
   1d35a:	08 95       	ret

0001d35c <__fp_mpack>:
   1d35c:	9f 3f       	cpi	r25, 0xFF	; 255
   1d35e:	31 f0       	breq	.+12     	; 0x1d36c <__fp_mpack_finite+0xc>

0001d360 <__fp_mpack_finite>:
   1d360:	91 50       	subi	r25, 0x01	; 1
   1d362:	20 f4       	brcc	.+8      	; 0x1d36c <__fp_mpack_finite+0xc>
   1d364:	87 95       	ror	r24
   1d366:	77 95       	ror	r23
   1d368:	67 95       	ror	r22
   1d36a:	b7 95       	ror	r27
   1d36c:	88 0f       	add	r24, r24
   1d36e:	91 1d       	adc	r25, r1
   1d370:	96 95       	lsr	r25
   1d372:	87 95       	ror	r24
   1d374:	97 f9       	bld	r25, 7
   1d376:	08 95       	ret

0001d378 <calloc>:
   1d378:	0f 93       	push	r16
   1d37a:	1f 93       	push	r17
   1d37c:	cf 93       	push	r28
   1d37e:	df 93       	push	r29
   1d380:	86 9f       	mul	r24, r22
   1d382:	80 01       	movw	r16, r0
   1d384:	87 9f       	mul	r24, r23
   1d386:	10 0d       	add	r17, r0
   1d388:	96 9f       	mul	r25, r22
   1d38a:	10 0d       	add	r17, r0
   1d38c:	11 24       	eor	r1, r1
   1d38e:	c8 01       	movw	r24, r16
   1d390:	0d d0       	rcall	.+26     	; 0x1d3ac <malloc>
   1d392:	ec 01       	movw	r28, r24
   1d394:	00 97       	sbiw	r24, 0x00	; 0
   1d396:	21 f0       	breq	.+8      	; 0x1d3a0 <calloc+0x28>
   1d398:	a8 01       	movw	r20, r16
   1d39a:	60 e0       	ldi	r22, 0x00	; 0
   1d39c:	70 e0       	ldi	r23, 0x00	; 0
   1d39e:	27 d1       	rcall	.+590    	; 0x1d5ee <memset>
   1d3a0:	ce 01       	movw	r24, r28
   1d3a2:	df 91       	pop	r29
   1d3a4:	cf 91       	pop	r28
   1d3a6:	1f 91       	pop	r17
   1d3a8:	0f 91       	pop	r16
   1d3aa:	08 95       	ret

0001d3ac <malloc>:
   1d3ac:	0f 93       	push	r16
   1d3ae:	1f 93       	push	r17
   1d3b0:	cf 93       	push	r28
   1d3b2:	df 93       	push	r29
   1d3b4:	82 30       	cpi	r24, 0x02	; 2
   1d3b6:	91 05       	cpc	r25, r1
   1d3b8:	10 f4       	brcc	.+4      	; 0x1d3be <malloc+0x12>
   1d3ba:	82 e0       	ldi	r24, 0x02	; 2
   1d3bc:	90 e0       	ldi	r25, 0x00	; 0
   1d3be:	e0 91 36 20 	lds	r30, 0x2036	; 0x802036 <__flp>
   1d3c2:	f0 91 37 20 	lds	r31, 0x2037	; 0x802037 <__flp+0x1>
   1d3c6:	20 e0       	ldi	r18, 0x00	; 0
   1d3c8:	30 e0       	ldi	r19, 0x00	; 0
   1d3ca:	a0 e0       	ldi	r26, 0x00	; 0
   1d3cc:	b0 e0       	ldi	r27, 0x00	; 0
   1d3ce:	30 97       	sbiw	r30, 0x00	; 0
   1d3d0:	19 f1       	breq	.+70     	; 0x1d418 <malloc+0x6c>
   1d3d2:	40 81       	ld	r20, Z
   1d3d4:	51 81       	ldd	r21, Z+1	; 0x01
   1d3d6:	02 81       	ldd	r16, Z+2	; 0x02
   1d3d8:	13 81       	ldd	r17, Z+3	; 0x03
   1d3da:	48 17       	cp	r20, r24
   1d3dc:	59 07       	cpc	r21, r25
   1d3de:	c8 f0       	brcs	.+50     	; 0x1d412 <malloc+0x66>
   1d3e0:	84 17       	cp	r24, r20
   1d3e2:	95 07       	cpc	r25, r21
   1d3e4:	69 f4       	brne	.+26     	; 0x1d400 <malloc+0x54>
   1d3e6:	10 97       	sbiw	r26, 0x00	; 0
   1d3e8:	31 f0       	breq	.+12     	; 0x1d3f6 <malloc+0x4a>
   1d3ea:	12 96       	adiw	r26, 0x02	; 2
   1d3ec:	0c 93       	st	X, r16
   1d3ee:	12 97       	sbiw	r26, 0x02	; 2
   1d3f0:	13 96       	adiw	r26, 0x03	; 3
   1d3f2:	1c 93       	st	X, r17
   1d3f4:	27 c0       	rjmp	.+78     	; 0x1d444 <malloc+0x98>
   1d3f6:	00 93 36 20 	sts	0x2036, r16	; 0x802036 <__flp>
   1d3fa:	10 93 37 20 	sts	0x2037, r17	; 0x802037 <__flp+0x1>
   1d3fe:	22 c0       	rjmp	.+68     	; 0x1d444 <malloc+0x98>
   1d400:	21 15       	cp	r18, r1
   1d402:	31 05       	cpc	r19, r1
   1d404:	19 f0       	breq	.+6      	; 0x1d40c <malloc+0x60>
   1d406:	42 17       	cp	r20, r18
   1d408:	53 07       	cpc	r21, r19
   1d40a:	18 f4       	brcc	.+6      	; 0x1d412 <malloc+0x66>
   1d40c:	9a 01       	movw	r18, r20
   1d40e:	bd 01       	movw	r22, r26
   1d410:	ef 01       	movw	r28, r30
   1d412:	df 01       	movw	r26, r30
   1d414:	f8 01       	movw	r30, r16
   1d416:	db cf       	rjmp	.-74     	; 0x1d3ce <malloc+0x22>
   1d418:	21 15       	cp	r18, r1
   1d41a:	31 05       	cpc	r19, r1
   1d41c:	f9 f0       	breq	.+62     	; 0x1d45c <malloc+0xb0>
   1d41e:	28 1b       	sub	r18, r24
   1d420:	39 0b       	sbc	r19, r25
   1d422:	24 30       	cpi	r18, 0x04	; 4
   1d424:	31 05       	cpc	r19, r1
   1d426:	80 f4       	brcc	.+32     	; 0x1d448 <malloc+0x9c>
   1d428:	8a 81       	ldd	r24, Y+2	; 0x02
   1d42a:	9b 81       	ldd	r25, Y+3	; 0x03
   1d42c:	61 15       	cp	r22, r1
   1d42e:	71 05       	cpc	r23, r1
   1d430:	21 f0       	breq	.+8      	; 0x1d43a <malloc+0x8e>
   1d432:	fb 01       	movw	r30, r22
   1d434:	93 83       	std	Z+3, r25	; 0x03
   1d436:	82 83       	std	Z+2, r24	; 0x02
   1d438:	04 c0       	rjmp	.+8      	; 0x1d442 <malloc+0x96>
   1d43a:	90 93 37 20 	sts	0x2037, r25	; 0x802037 <__flp+0x1>
   1d43e:	80 93 36 20 	sts	0x2036, r24	; 0x802036 <__flp>
   1d442:	fe 01       	movw	r30, r28
   1d444:	32 96       	adiw	r30, 0x02	; 2
   1d446:	44 c0       	rjmp	.+136    	; 0x1d4d0 <malloc+0x124>
   1d448:	fe 01       	movw	r30, r28
   1d44a:	e2 0f       	add	r30, r18
   1d44c:	f3 1f       	adc	r31, r19
   1d44e:	81 93       	st	Z+, r24
   1d450:	91 93       	st	Z+, r25
   1d452:	22 50       	subi	r18, 0x02	; 2
   1d454:	31 09       	sbc	r19, r1
   1d456:	39 83       	std	Y+1, r19	; 0x01
   1d458:	28 83       	st	Y, r18
   1d45a:	3a c0       	rjmp	.+116    	; 0x1d4d0 <malloc+0x124>
   1d45c:	20 91 34 20 	lds	r18, 0x2034	; 0x802034 <__brkval>
   1d460:	30 91 35 20 	lds	r19, 0x2035	; 0x802035 <__brkval+0x1>
   1d464:	23 2b       	or	r18, r19
   1d466:	41 f4       	brne	.+16     	; 0x1d478 <malloc+0xcc>
   1d468:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
   1d46c:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
   1d470:	30 93 35 20 	sts	0x2035, r19	; 0x802035 <__brkval+0x1>
   1d474:	20 93 34 20 	sts	0x2034, r18	; 0x802034 <__brkval>
   1d478:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
   1d47c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
   1d480:	21 15       	cp	r18, r1
   1d482:	31 05       	cpc	r19, r1
   1d484:	41 f4       	brne	.+16     	; 0x1d496 <malloc+0xea>
   1d486:	2d b7       	in	r18, 0x3d	; 61
   1d488:	3e b7       	in	r19, 0x3e	; 62
   1d48a:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
   1d48e:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
   1d492:	24 1b       	sub	r18, r20
   1d494:	35 0b       	sbc	r19, r21
   1d496:	e0 91 34 20 	lds	r30, 0x2034	; 0x802034 <__brkval>
   1d49a:	f0 91 35 20 	lds	r31, 0x2035	; 0x802035 <__brkval+0x1>
   1d49e:	e2 17       	cp	r30, r18
   1d4a0:	f3 07       	cpc	r31, r19
   1d4a2:	a0 f4       	brcc	.+40     	; 0x1d4cc <malloc+0x120>
   1d4a4:	2e 1b       	sub	r18, r30
   1d4a6:	3f 0b       	sbc	r19, r31
   1d4a8:	28 17       	cp	r18, r24
   1d4aa:	39 07       	cpc	r19, r25
   1d4ac:	78 f0       	brcs	.+30     	; 0x1d4cc <malloc+0x120>
   1d4ae:	ac 01       	movw	r20, r24
   1d4b0:	4e 5f       	subi	r20, 0xFE	; 254
   1d4b2:	5f 4f       	sbci	r21, 0xFF	; 255
   1d4b4:	24 17       	cp	r18, r20
   1d4b6:	35 07       	cpc	r19, r21
   1d4b8:	48 f0       	brcs	.+18     	; 0x1d4cc <malloc+0x120>
   1d4ba:	4e 0f       	add	r20, r30
   1d4bc:	5f 1f       	adc	r21, r31
   1d4be:	50 93 35 20 	sts	0x2035, r21	; 0x802035 <__brkval+0x1>
   1d4c2:	40 93 34 20 	sts	0x2034, r20	; 0x802034 <__brkval>
   1d4c6:	81 93       	st	Z+, r24
   1d4c8:	91 93       	st	Z+, r25
   1d4ca:	02 c0       	rjmp	.+4      	; 0x1d4d0 <malloc+0x124>
   1d4cc:	e0 e0       	ldi	r30, 0x00	; 0
   1d4ce:	f0 e0       	ldi	r31, 0x00	; 0
   1d4d0:	cf 01       	movw	r24, r30
   1d4d2:	df 91       	pop	r29
   1d4d4:	cf 91       	pop	r28
   1d4d6:	1f 91       	pop	r17
   1d4d8:	0f 91       	pop	r16
   1d4da:	08 95       	ret

0001d4dc <free>:
   1d4dc:	cf 93       	push	r28
   1d4de:	df 93       	push	r29
   1d4e0:	00 97       	sbiw	r24, 0x00	; 0
   1d4e2:	09 f4       	brne	.+2      	; 0x1d4e6 <free+0xa>
   1d4e4:	81 c0       	rjmp	.+258    	; 0x1d5e8 <free+0x10c>
   1d4e6:	fc 01       	movw	r30, r24
   1d4e8:	32 97       	sbiw	r30, 0x02	; 2
   1d4ea:	13 82       	std	Z+3, r1	; 0x03
   1d4ec:	12 82       	std	Z+2, r1	; 0x02
   1d4ee:	a0 91 36 20 	lds	r26, 0x2036	; 0x802036 <__flp>
   1d4f2:	b0 91 37 20 	lds	r27, 0x2037	; 0x802037 <__flp+0x1>
   1d4f6:	10 97       	sbiw	r26, 0x00	; 0
   1d4f8:	81 f4       	brne	.+32     	; 0x1d51a <free+0x3e>
   1d4fa:	20 81       	ld	r18, Z
   1d4fc:	31 81       	ldd	r19, Z+1	; 0x01
   1d4fe:	82 0f       	add	r24, r18
   1d500:	93 1f       	adc	r25, r19
   1d502:	20 91 34 20 	lds	r18, 0x2034	; 0x802034 <__brkval>
   1d506:	30 91 35 20 	lds	r19, 0x2035	; 0x802035 <__brkval+0x1>
   1d50a:	28 17       	cp	r18, r24
   1d50c:	39 07       	cpc	r19, r25
   1d50e:	51 f5       	brne	.+84     	; 0x1d564 <free+0x88>
   1d510:	f0 93 35 20 	sts	0x2035, r31	; 0x802035 <__brkval+0x1>
   1d514:	e0 93 34 20 	sts	0x2034, r30	; 0x802034 <__brkval>
   1d518:	67 c0       	rjmp	.+206    	; 0x1d5e8 <free+0x10c>
   1d51a:	ed 01       	movw	r28, r26
   1d51c:	20 e0       	ldi	r18, 0x00	; 0
   1d51e:	30 e0       	ldi	r19, 0x00	; 0
   1d520:	ce 17       	cp	r28, r30
   1d522:	df 07       	cpc	r29, r31
   1d524:	40 f4       	brcc	.+16     	; 0x1d536 <free+0x5a>
   1d526:	4a 81       	ldd	r20, Y+2	; 0x02
   1d528:	5b 81       	ldd	r21, Y+3	; 0x03
   1d52a:	9e 01       	movw	r18, r28
   1d52c:	41 15       	cp	r20, r1
   1d52e:	51 05       	cpc	r21, r1
   1d530:	f1 f0       	breq	.+60     	; 0x1d56e <free+0x92>
   1d532:	ea 01       	movw	r28, r20
   1d534:	f5 cf       	rjmp	.-22     	; 0x1d520 <free+0x44>
   1d536:	d3 83       	std	Z+3, r29	; 0x03
   1d538:	c2 83       	std	Z+2, r28	; 0x02
   1d53a:	40 81       	ld	r20, Z
   1d53c:	51 81       	ldd	r21, Z+1	; 0x01
   1d53e:	84 0f       	add	r24, r20
   1d540:	95 1f       	adc	r25, r21
   1d542:	c8 17       	cp	r28, r24
   1d544:	d9 07       	cpc	r29, r25
   1d546:	59 f4       	brne	.+22     	; 0x1d55e <free+0x82>
   1d548:	88 81       	ld	r24, Y
   1d54a:	99 81       	ldd	r25, Y+1	; 0x01
   1d54c:	84 0f       	add	r24, r20
   1d54e:	95 1f       	adc	r25, r21
   1d550:	02 96       	adiw	r24, 0x02	; 2
   1d552:	91 83       	std	Z+1, r25	; 0x01
   1d554:	80 83       	st	Z, r24
   1d556:	8a 81       	ldd	r24, Y+2	; 0x02
   1d558:	9b 81       	ldd	r25, Y+3	; 0x03
   1d55a:	93 83       	std	Z+3, r25	; 0x03
   1d55c:	82 83       	std	Z+2, r24	; 0x02
   1d55e:	21 15       	cp	r18, r1
   1d560:	31 05       	cpc	r19, r1
   1d562:	29 f4       	brne	.+10     	; 0x1d56e <free+0x92>
   1d564:	f0 93 37 20 	sts	0x2037, r31	; 0x802037 <__flp+0x1>
   1d568:	e0 93 36 20 	sts	0x2036, r30	; 0x802036 <__flp>
   1d56c:	3d c0       	rjmp	.+122    	; 0x1d5e8 <free+0x10c>
   1d56e:	e9 01       	movw	r28, r18
   1d570:	fb 83       	std	Y+3, r31	; 0x03
   1d572:	ea 83       	std	Y+2, r30	; 0x02
   1d574:	49 91       	ld	r20, Y+
   1d576:	59 91       	ld	r21, Y+
   1d578:	c4 0f       	add	r28, r20
   1d57a:	d5 1f       	adc	r29, r21
   1d57c:	ec 17       	cp	r30, r28
   1d57e:	fd 07       	cpc	r31, r29
   1d580:	61 f4       	brne	.+24     	; 0x1d59a <free+0xbe>
   1d582:	80 81       	ld	r24, Z
   1d584:	91 81       	ldd	r25, Z+1	; 0x01
   1d586:	84 0f       	add	r24, r20
   1d588:	95 1f       	adc	r25, r21
   1d58a:	02 96       	adiw	r24, 0x02	; 2
   1d58c:	e9 01       	movw	r28, r18
   1d58e:	99 83       	std	Y+1, r25	; 0x01
   1d590:	88 83       	st	Y, r24
   1d592:	82 81       	ldd	r24, Z+2	; 0x02
   1d594:	93 81       	ldd	r25, Z+3	; 0x03
   1d596:	9b 83       	std	Y+3, r25	; 0x03
   1d598:	8a 83       	std	Y+2, r24	; 0x02
   1d59a:	e0 e0       	ldi	r30, 0x00	; 0
   1d59c:	f0 e0       	ldi	r31, 0x00	; 0
   1d59e:	12 96       	adiw	r26, 0x02	; 2
   1d5a0:	8d 91       	ld	r24, X+
   1d5a2:	9c 91       	ld	r25, X
   1d5a4:	13 97       	sbiw	r26, 0x03	; 3
   1d5a6:	00 97       	sbiw	r24, 0x00	; 0
   1d5a8:	19 f0       	breq	.+6      	; 0x1d5b0 <free+0xd4>
   1d5aa:	fd 01       	movw	r30, r26
   1d5ac:	dc 01       	movw	r26, r24
   1d5ae:	f7 cf       	rjmp	.-18     	; 0x1d59e <free+0xc2>
   1d5b0:	8d 91       	ld	r24, X+
   1d5b2:	9c 91       	ld	r25, X
   1d5b4:	11 97       	sbiw	r26, 0x01	; 1
   1d5b6:	9d 01       	movw	r18, r26
   1d5b8:	2e 5f       	subi	r18, 0xFE	; 254
   1d5ba:	3f 4f       	sbci	r19, 0xFF	; 255
   1d5bc:	82 0f       	add	r24, r18
   1d5be:	93 1f       	adc	r25, r19
   1d5c0:	20 91 34 20 	lds	r18, 0x2034	; 0x802034 <__brkval>
   1d5c4:	30 91 35 20 	lds	r19, 0x2035	; 0x802035 <__brkval+0x1>
   1d5c8:	28 17       	cp	r18, r24
   1d5ca:	39 07       	cpc	r19, r25
   1d5cc:	69 f4       	brne	.+26     	; 0x1d5e8 <free+0x10c>
   1d5ce:	30 97       	sbiw	r30, 0x00	; 0
   1d5d0:	29 f4       	brne	.+10     	; 0x1d5dc <free+0x100>
   1d5d2:	10 92 37 20 	sts	0x2037, r1	; 0x802037 <__flp+0x1>
   1d5d6:	10 92 36 20 	sts	0x2036, r1	; 0x802036 <__flp>
   1d5da:	02 c0       	rjmp	.+4      	; 0x1d5e0 <free+0x104>
   1d5dc:	13 82       	std	Z+3, r1	; 0x03
   1d5de:	12 82       	std	Z+2, r1	; 0x02
   1d5e0:	b0 93 35 20 	sts	0x2035, r27	; 0x802035 <__brkval+0x1>
   1d5e4:	a0 93 34 20 	sts	0x2034, r26	; 0x802034 <__brkval>
   1d5e8:	df 91       	pop	r29
   1d5ea:	cf 91       	pop	r28
   1d5ec:	08 95       	ret

0001d5ee <memset>:
   1d5ee:	dc 01       	movw	r26, r24
   1d5f0:	01 c0       	rjmp	.+2      	; 0x1d5f4 <memset+0x6>
   1d5f2:	6d 93       	st	X+, r22
   1d5f4:	41 50       	subi	r20, 0x01	; 1
   1d5f6:	50 40       	sbci	r21, 0x00	; 0
   1d5f8:	e0 f7       	brcc	.-8      	; 0x1d5f2 <memset+0x4>
   1d5fa:	08 95       	ret

0001d5fc <_exit>:
   1d5fc:	f8 94       	cli

0001d5fe <__stop_program>:
   1d5fe:	ff cf       	rjmp	.-2      	; 0x1d5fe <__stop_program>
