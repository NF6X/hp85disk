
gpib.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000163e  00800100  0001ca5e  0001caf2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0001ca5e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000a36  0080173e  0080173e  0001e130  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0001e130  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0001e144  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000017f8  00000000  00000000  0001e184  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00028db0  00000000  00000000  0001f97c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006432  00000000  00000000  0004872c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000122ba  00000000  00000000  0004eb5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000052c0  00000000  00000000  00060e18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004aff  00000000  00000000  000660d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00023fda  00000000  00000000  0006abd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000017c8  00000000  00000000  0008ebb1  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00800100 l    d  .data	00000000 .data
00000000 l    d  .text	00000000 .text
0080173e l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .note.gnu.avr.deviceinfo	00000000 .note.gnu.avr.deviceinfo
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 malloc.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 hal.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000002d8 l     O .text	0000001e __c.3741
000002f6 l     O .text	0000001d __c.3736
00000000 l    df *ABS*	00000000 LCD.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0080010d l     O .data	00000001 lcd_address
0080010f l     O .data	00000001 _displayControl
0080010e l     O .data	00000001 _displayMode
00000000 l    df *ABS*	00000000 lcd_printf.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000060b8 l     F .text	00000016 _putc_win
00000000 l    df *ABS*	00000000 time.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00006b96 l     F .text	0000002a IS_Leap
0080035a l     O .data	00000018 __days
00801792 l     O .bss	00000016 t.3795
008017a8 l     O .bss	00000002 p.3796
00801774 l     O .bss	00000008 ts.3874
0080177c l     O .bss	00000016 t.3807
00800372 l     O .data	0000001a __days_sum
000006e0 l     O .text	00000012 __c.3914
000006cf l     O .text	00000011 __c.3916
000006be l     O .text	00000011 __c.3918
000006ac l     O .text	00000012 __c.3920
0000069b l     O .text	00000011 __c.3922
00000684 l     O .text	00000017 __c.3924
000006f2 l     O .text	00000021 __c.3893
00000713 l     O .text	0000001d __c.3768
008017ca l     O .bss	00000020 buf.3773
008017aa l     O .bss	00000020 buf.3785
00000672 l     O .text	00000012 __c.3970
0000065d l     O .text	00000015 __c.3972
00000646 l     O .text	00000017 __c.3974
0000062c l     O .text	0000001a __c.3976
00000608 l     O .text	00000024 __c.3978
000005f6 l     O .text	00000012 __c.3985
000005e5 l     O .text	00000011 __c.3987
000005d4 l     O .text	00000011 __c.3989
000005c2 l     O .text	00000012 __c.3991
000005b1 l     O .text	00000011 __c.3993
00000000 l    df *ABS*	00000000 mmc.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000d332 l     F .text	00000004 xchg_spi
0000d336 l     F .text	0000000c deselect
0000d342 l     F .text	0000004e rcvr_datablock
0000d3b4 l     F .text	00000044 select
00000730 l     O .text	00000010 __c.3736
0000d3f8 l     F .text	00000086 send_cmd
0000d47e l     F .text	00000054 xmit_datablock
008017ef l     O .bss	00000001 CardType
008017f1 l     O .bss	00000001 Timer1
008017f0 l     O .bss	00000001 Timer2
00000000 l    df *ABS*	00000000 posix.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00800b78 l     O .data	00000014 CSWTCH.97
00000b58 l     O .text	00000018 __c.3713
00000b40 l     O .text	00000018 __c.3720
0000eaf6 l     F .text	0000001a _fprintf_putc
008018fb l     O .bss	0000002e _dp
008017fc l     O .bss	000000ff _de
00000b2c l     O .text	00000008 __c.4036
00000b28 l     O .text	00000004 __c.4038
00000b34 l     O .text	0000000c __c.3791
00000000 l    df *ABS*	00000000 posix_tests.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000dda l     O .text	0000000c __c.3737
00000d14 l     O .text	000000c6 __c.3739
00000c95 l     O .text	0000000c __c.3800
00000c85 l     O .text	00000010 __c.3802
00000c78 l     O .text	0000000d __c.3804
00000c68 l     O .text	00000010 __c.3806
00000c5b l     O .text	0000000d __c.3808
00000c3f l     O .text	0000000f __c.3813
00000c4e l     O .text	0000000d __c.3810
00000c2c l     O .text	00000013 __c.3817
0080018d l     O .data	00000002 _pagesize
00000c25 l     O .text	00000007 __c.3827
00000c23 l     O .text	00000002 __c.3829
00000cae l     O .text	00000010 __c.3782
00000cac l     O .text	00000002 __c.3787
00000ca1 l     O .text	0000000b __c.3789
00000c11 l     O .text	00000012 __c.3841
00000c0d l     O .text	00000004 __c.3843
00000bf3 l     O .text	0000001a __c.3848
00000bd2 l     O .text	00000021 __c.3861
00000bc4 l     O .text	0000000e __c.3863
00000bae l     O .text	00000016 __c.3865
00000b7b l     O .text	00000023 __c.3873
00000b9e l     O .text	00000010 __c.3870
00000b70 l     O .text	0000000b __c.3877
00000d03 l     O .text	00000011 __c.3755
00000cf2 l     O .text	00000011 __c.3763
00000cee l     O .text	00000004 __c.3766
00000cdd l     O .text	00000011 __c.3768
00000ccf l     O .text	0000000e __c.3770
00000cbe l     O .text	00000011 __c.3772
00000000 l    df *ABS*	00000000 gpib.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000010b1 l     O .text	00000011 __c.4335
0000109e l     O .text	00000013 __c.4340
00001078 l     O .text	00000026 __c.4345
0000105d l     O .text	0000001b __c.4347
00001036 l     O .text	00000027 __c.4352
0000101b l     O .text	0000001b __c.4354
0000100f l     O .text	0000000c __c.4368
00000fe1 l     O .text	0000002e __c.4380
00000f4f l     O .text	0000001a __c.4413
00000f69 l     O .text	0000001b __c.4409
00000f84 l     O .text	0000001b __c.4406
00000f9f l     O .text	00000028 __c.4401
00000fc7 l     O .text	0000001a __c.4397
00000f3c l     O .text	00000013 __c.4417
00000f33 l     O .text	00000009 __c.4459
00000f2d l     O .text	00000006 __c.4461
00000f22 l     O .text	0000000b __c.4465
00000f17 l     O .text	0000000b __c.4467
00000f0c l     O .text	0000000b __c.4469
00000ef3 l     O .text	00000019 __c.4485
00000ec6 l     O .text	0000002d __c.4488
00000e9f l     O .text	00000027 __c.4492
00000e85 l     O .text	0000001a __c.4502
00000e5d l     O .text	00000028 __c.4507
00000000 l    df *ABS*	00000000 gpib_task.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00001364 l     O .text	00000012 __c.4342
00001353 l     O .text	00000011 __c.4344
0000133a l     O .text	00000019 __c.4346
00001320 l     O .text	0000001a __c.4392
000012f5 l     O .text	0000002b __c.4394
000012de l     O .text	00000017 __c.4396
000012d2 l     O .text	0000000c __c.4398
000012cc l     O .text	00000006 __c.4402
000012ba l     O .text	00000012 __c.4404
000012b3 l     O .text	00000007 __c.4409
000012a8 l     O .text	0000000b __c.4411
000012a1 l     O .text	00000007 __c.4413
00001294 l     O .text	0000000d __c.4415
00001283 l     O .text	00000011 __c.4417
00001262 l     O .text	00000021 __c.4444
00001248 l     O .text	0000001a __c.4446
00001230 l     O .text	00000018 __c.4451
00001218 l     O .text	00000018 __c.4453
00001211 l     O .text	00000007 __c.4455
0000120a l     O .text	00000007 __c.4457
00001203 l     O .text	00000007 __c.4459
000011f7 l     O .text	0000000c __c.4461
000011ea l     O .text	0000000d __c.4463
000011e3 l     O .text	00000007 __c.4465
000011c2 l     O .text	00000021 __c.4467
0000116f l     O .text	00000007 __c.4487
0000115e l     O .text	00000011 __c.4489
0000114c l     O .text	00000012 __c.4491
00001138 l     O .text	00000014 __c.4493
00001128 l     O .text	00000010 __c.4495
0000111c l     O .text	0000000c __c.4497
0000110b l     O .text	00000011 __c.4502
000010f9 l     O .text	00000012 __c.4504
000010d3 l     O .text	00000026 __c.4506
000010c2 l     O .text	00000011 __c.4511
000011bb l     O .text	00000007 __c.4472
000011b9 l     O .text	00000002 __c.4474
000011a7 l     O .text	00000012 __c.4476
00001196 l     O .text	00000011 __c.4478
00001182 l     O .text	00000014 __c.4480
00001176 l     O .text	0000000c __c.4482
00000000 l    df *ABS*	00000000 drives.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00001bdf l     O .text	00000015 __c.4561
00001bd3 l     O .text	0000000c __c.4572
00001bcf l     O .text	00000004 __c.4582
00001899 l     O .text	00000012 __c.4726
0000187b l     O .text	00000002 __c.4735
0000187d l     O .text	00000009 __c.4733
00001886 l     O .text	0000000a __c.4731
00001890 l     O .text	00000009 __c.4729
00001879 l     O .text	00000002 __c.4740
00001859 l     O .text	00000020 __c.4749
000017de l     O .text	00000002 __c.4764
00001813 l     O .text	0000000a __c.4758
000017f4 l     O .text	0000001f __c.4760
000017e0 l     O .text	00000014 __c.4762
00001850 l     O .text	00000009 __c.4752
00001831 l     O .text	0000001f __c.4754
0000181d l     O .text	00000014 __c.4756
000017dc l     O .text	00000002 __c.4769
000017b7 l     O .text	00000025 __c.4808
0000177e l     O .text	00000039 __c.4810
00001749 l     O .text	00000035 __c.4812
00001714 l     O .text	00000035 __c.4814
000016dc l     O .text	00000038 __c.4816
000016b1 l     O .text	0000002b __c.4818
0000168d l     O .text	00000024 __c.4831
0000166b l     O .text	00000022 __c.4839
00801941 l     O .bss	00000002 stack_ind
00801937 l     O .bss	0000000a stack_p
0000164c l     O .text	0000001f __c.4875
000015df l     O .text	00000037 __c.4890
00001616 l     O .text	00000036 __c.4888
00001bc2 l     O .text	0000000d __c.4601
00001911 l     O .text	00000022 __c.4712
00001933 l     O .text	00000030 __c.4709
00001963 l     O .text	0000002f __c.4700
00001992 l     O .text	00000030 __c.4697
000019c2 l     O .text	0000002e __c.4688
000019f0 l     O .text	0000002e __c.4680
00001ba4 l     O .text	0000001e __c.4603
00001b82 l     O .text	00000022 __c.4606
00001b60 l     O .text	00000022 __c.4617
00001b36 l     O .text	0000002a __c.4621
00001b05 l     O .text	00000031 __c.4624
00001ad8 l     O .text	0000002d __c.4634
00001aaa l     O .text	0000002e __c.4642
00001a7c l     O .text	0000002e __c.4645
00001a4a l     O .text	00000032 __c.4653
00001a1e l     O .text	0000002c __c.4670
000018ef l     O .text	00000022 __c.4716
000018d2 l     O .text	0000001d __c.4718
000018ab l     O .text	00000027 __c.4720
0000155f l     O .text	0000001a __c.4915
00001557 l     O .text	00000008 __c.4917
00001579 l     O .text	00000022 __c.4913
000015a3 l     O .text	0000001a __c.4909
0000159b l     O .text	00000008 __c.4911
000015bd l     O .text	00000022 __c.4907
00000000 l    df *ABS*	00000000 ss80.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00801963 l     O .bss	00000005 B.4347
00801950 l     O .bss	00000013 B.4351
00801943 l     O .bss	0000000d B.4355
00002265 l     O .text	00000005 __c.4458
0000225a l     O .text	0000000b __c.4460
00002246 l     O .text	00000014 __c.4470
0000222b l     O .text	0000001b __c.4472
0000221a l     O .text	00000011 __c.4480
000021f7 l     O .text	00000023 __c.4482
000021da l     O .text	0000001d __c.4484
000021bb l     O .text	0000001f __c.4486
000021a3 l     O .text	00000018 __c.4491
00002189 l     O .text	0000001a __c.4496
00002163 l     O .text	00000026 __c.4505
0000214a l     O .text	00000019 __c.4507
0000204e l     O .text	00000025 __c.4529
00002073 l     O .text	0000001a __c.4527
0000208d l     O .text	00000016 __c.4525
000020a3 l     O .text	0000000e __c.4523
000020b1 l     O .text	0000001c __c.4521
000020cd l     O .text	0000001d __c.4519
00002134 l     O .text	00000016 __c.4509
0000211b l     O .text	00000019 __c.4512
00002103 l     O .text	00000018 __c.4514
000020ea l     O .text	00000019 __c.4517
0000202d l     O .text	00000021 __c.4531
00002017 l     O .text	00000016 __c.4533
00001ffa l     O .text	0000001d __c.4535
00001fde l     O .text	0000001c __c.4537
00001fcd l     O .text	00000011 __c.4539
00001faf l     O .text	0000001e __c.4541
00001f90 l     O .text	0000001f __c.4543
00001f75 l     O .text	0000001b __c.4545
00001f5c l     O .text	00000019 __c.4547
00001f45 l     O .text	00000017 __c.4549
00001f22 l     O .text	00000023 __c.4551
00001f02 l     O .text	00000020 __c.4553
00001eca l     O .text	00000038 __c.4556
00001d87 l     O .text	00000020 __c.4589
00001d73 l     O .text	00000014 __c.4591
0000230a l     O .text	00000029 __c.4419
000022bd l     O .text	00000026 __c.4427
000022e3 l     O .text	00000014 __c.4425
000022f7 l     O .text	00000013 __c.4421
00002295 l     O .text	00000028 __c.4431
0000226a l     O .text	0000002b __c.4433
00001d59 l     O .text	0000001a __c.4598
00001d46 l     O .text	00000013 __c.4600
00002413 l     O .text	00000013 __c.4361
00001d3a l     O .text	0000000c __c.4614
00001d27 l     O .text	00000013 __c.4621
00001d18 l     O .text	0000000f __c.4623
00001eb7 l     O .text	00000013 __c.4565
00001e9e l     O .text	00000019 __c.4567
00001e79 l     O .text	00000025 __c.4570
00001e5c l     O .text	0000001d __c.4573
00001e3e l     O .text	0000001e __c.4575
00001e17 l     O .text	00000027 __c.4577
00001e03 l     O .text	00000014 __c.4579
00001de3 l     O .text	00000020 __c.4581
00001da7 l     O .text	0000003c __c.4584
00001cf5 l     O .text	00000023 __c.4637
000023cf l     O .text	00000028 __c.4394
000023b1 l     O .text	0000001e __c.4396
00002380 l     O .text	00000019 __c.4400
00002399 l     O .text	00000018 __c.4398
0000235b l     O .text	00000025 __c.4405
00002333 l     O .text	00000028 __c.4407
000023f7 l     O .text	0000001c __c.4377
00001cdf l     O .text	00000016 __c.4642
00001cc9 l     O .text	00000016 __c.4644
00001cb4 l     O .text	00000015 __c.4646
00001ca5 l     O .text	0000000f __c.4648
00001c91 l     O .text	00000014 __c.4650
00001c5d l     O .text	00000034 __c.4652
00001c29 l     O .text	00000034 __c.4654
00000000 l    df *ABS*	00000000 parsing.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000004e5 l     O .text	00000020 __c.3705
000004bf l     O .text	00000026 __c.3748
00000000 l    df *ABS*	00000000 printf.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00007b0a l     F .text	00000018 _putc_fn
00000000 l    df *ABS*	00000000 ff.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00008c96 l     F .text	0000002a ld_dword
00008cc0 l     F .text	0000000c st_dword
00008ccc l     F .text	00000012 mem_set
00008cde l     F .text	0000001e mem_cmp
00008cfc l     F .text	0000010c tchar2uni
00008e08 l     F .text	00000050 clst2sect
00008e58 l     F .text	00000078 clmt_clust
00008ed0 l     F .text	0000001e sum_sfn
00008eee l     F .text	00000058 get_ldnumber
008017ea l     O .bss	00000001 CurrVol
00008f46 l     F .text	00000058 validate
00008f9e l     F .text	00000016 mem_cpy.part.0
00008fb4 l     F .text	0000015a put_utf
0000910e l     F .text	00000220 get_fileinfo
0000932e l     F .text	0000002a ld_clust.isra.4
00009358 l     F .text	0000001a st_clust.isra.5
00009372 l     F .text	000000a6 sync_window.part.6
00009418 l     F .text	000000e4 sync_fs
000094fc l     F .text	00000150 dir_clear
0000964c l     F .text	00000076 move_window
000096c2 l     F .text	00000080 check_fs
00009742 l     F .text	000004b4 mount_volume
008017ed l     O .bss	00000002 FatFs
008017eb l     O .bss	00000002 Fsid
00009bf6 l     F .text	000001f6 put_fat
00009dec l     F .text	00000168 get_fat.isra.10
00009f54 l     F .text	00000182 dir_sdi
0000a0d6 l     F .text	0000024c create_chain
0000a322 l     F .text	00000122 remove_chain
0000a444 l     F .text	000001d0 dir_next
0000a614 l     F .text	00000072 dir_alloc
0000a686 l     F .text	00000192 dir_read
008004bd l     O .data	0000000d LfnOfs
0000a818 l     F .text	00000090 dir_remove
0000a8a8 l     F .text	0000021c dir_find
0000aac4 l     F .text	0000031c dir_register
0000ade0 l     F .text	00000462 follow_path
0080043d l     O .data	00000080 ExCvt
00000000 l    df *ABS*	00000000 ffunicode.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00800778 l     O .data	00000100 uc437
008004ca l     O .data	000000bc cvt2.1843
00800586 l     O .data	000001f2 cvt1.1842
00000000 l    df *ABS*	00000000 mmc_hal.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000dc12 l     F .text	0000003c mmc_task
000007bb l     O .text	0000001c __c.3713
000007ae l     O .text	0000000d __c.3741
0000079e l     O .text	00000010 __c.3754
008017f2 l     O .bss	00000002 mmc_init_flag
00000792 l     O .text	0000000c __c.3756
00000781 l     O .text	00000011 __c.3758
00000763 l     O .text	0000001e __c.3761
0000074e l     O .text	00000015 __c.3763
00000740 l     O .text	0000000e __c.3765
00000000 l    df *ABS*	00000000 fatfs_sup.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000009cb l     O .text	00000007 __c.3715
0080089c l     O .data	00000008 CSWTCH.25
000009ba l     O .text	00000011 __c.3751
0000099c l     O .text	0000001e __c.3753
0000097d l     O .text	0000001f __c.3755
0000095f l     O .text	0000001e __c.3757
00000941 l     O .text	0000001e __c.3759
00000922 l     O .text	0000001f __c.3761
00000903 l     O .text	0000001f __c.3763
000008e4 l     O .text	0000001f __c.3765
000008c5 l     O .text	0000001f __c.3767
000008a6 l     O .text	0000001f __c.3769
00000888 l     O .text	0000001e __c.3771
00000863 l     O .text	00000025 __c.3773
00000816 l     O .text	0000004d __c.3775
000007fb l     O .text	0000001b __c.3781
000007d9 l     O .text	00000022 __c.3783
000007d7 l     O .text	00000002 __c.3785
00000000 l    df *ABS*	00000000 fatfs_tests.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000b1c l     O .text	0000000c __c.3706
00000aa0 l     O .text	0000007c __c.3708
00000a10 l     O .text	0000000e __c.3747
000009e7 l     O .text	00000029 __c.3751
000009d2 l     O .text	00000015 __c.3753
00000a70 l     O .text	00000020 __c.3726
00000a60 l     O .text	00000010 __c.3728
00000a4c l     O .text	00000014 __c.3730
00000a3e l     O .text	0000000e __c.3732
00000a1e l     O .text	00000020 __c.3734
00000a90 l     O .text	00000010 __c.3718
00000000 l    df *ABS*	00000000 gpib_tests.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000154c l     O .text	0000000b __c.4527
00001383 l     O .text	000001c9 __c.4529
00001376 l     O .text	0000000d __c.4537
00000000 l    df *ABS*	00000000 drives_sup.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00001c05 l     O .text	00000007 __c.3760
00001c0c l     O .text	0000001d __c.3756
00001bf4 l     O .text	00000011 __c.3762
00000000 l    df *ABS*	00000000 amigo.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00015df6 l     F .text	000000ac amigo_overflow_check
00002b9d l     O .text	00000019 __c.4284
00015ea2 l     F .text	000000e8 amigo_chs_to_logical
00002b4a l     O .text	0000002b __c.4277
00002c1d l     O .text	00000018 __c.4254
00002bff l     O .text	0000001e __c.4260
00002be5 l     O .text	0000001a __c.4262
00002bd0 l     O .text	00000015 __c.4268
00002bb6 l     O .text	0000001a __c.4270
00002b75 l     O .text	00000028 __c.4307
00002b3a l     O .text	00000010 __c.4318
00002b25 l     O .text	00000015 __c.4322
00002b0b l     O .text	0000001a __c.4329
00002aec l     O .text	0000001f __c.4336
00002ad2 l     O .text	0000001a __c.4343
00002ac5 l     O .text	0000000d __c.4345
00002ab6 l     O .text	0000000f __c.4358
00002a4f l     O .text	00000067 __c.4365
000029e8 l     O .text	00000067 __c.4367
00002981 l     O .text	00000067 __c.4369
0000291c l     O .text	00000065 __c.4371
000028cc l     O .text	00000050 __c.4376
0000287c l     O .text	00000050 __c.4378
0000282c l     O .text	00000050 __c.4380
000027db l     O .text	00000051 __c.4382
000027a9 l     O .text	00000032 __c.4394
00002787 l     O .text	00000022 __c.4396
00002766 l     O .text	00000021 __c.4398
00002745 l     O .text	00000021 __c.4400
00002716 l     O .text	0000002f __c.4402
000026f6 l     O .text	00000020 __c.4405
000026e2 l     O .text	00000014 __c.4408
000026ce l     O .text	00000014 __c.4411
000026a5 l     O .text	00000029 __c.4413
00002684 l     O .text	00000021 __c.4415
00002674 l     O .text	00000010 __c.4418
00002652 l     O .text	00000022 __c.4420
00002636 l     O .text	0000001c __c.4422
0000260d l     O .text	00000029 __c.4424
000025ed l     O .text	00000020 __c.4426
000025c2 l     O .text	0000002b __c.4428
000025a3 l     O .text	0000001f __c.4430
00002593 l     O .text	00000010 __c.4433
00002561 l     O .text	00000032 __c.4438
00002541 l     O .text	00000020 __c.4442
00002520 l     O .text	00000021 __c.4445
00002501 l     O .text	0000001f __c.4448
000024df l     O .text	00000022 __c.4451
000024c3 l     O .text	0000001c __c.4454
000024a3 l     O .text	00000020 __c.4457
0000247a l     O .text	00000029 __c.4462
0000244f l     O .text	0000002b __c.4465
00002426 l     O .text	00000029 __c.4468
00000000 l    df *ABS*	00000000 printer.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00002c72 l     O .text	00000021 __c.4245
00002ca1 l     O .text	00000015 __c.4237
00002c93 l     O .text	0000000e __c.4239
00002cd8 l     O .text	00000022 __c.4227
00002cc2 l     O .text	00000016 __c.4229
00002cb6 l     O .text	0000000c __c.4231
00002c6b l     O .text	00000007 __c.4251
00002c4f l     O .text	0000001c __c.4256
00002c35 l     O .text	0000001a __c.4258
00000000 l    df *ABS*	00000000 lifutils.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00004118 l     O .text	0000000a __c.3964
00003f4f l     O .text	000001c9 __c.3966
00003f05 l     O .text	00000029 __c.3985
00003eed l     O .text	00000018 __c.3990
00003ec8 l     O .text	00000025 __c.4002
00003eaf l     O .text	00000019 __c.4008
00003e8e l     O .text	00000021 __c.4015
00003e52 l     O .text	0000003c __c.4024
00003e15 l     O .text	0000003d __c.4033
00801995 l     O .bss	00000020 _lif_ctime_buf.4136
00801975 l     O .bss	00000020 _timestr.4141
00003e10 l     O .text	00000005 __c.4156
00003df6 l     O .text	0000001a __c.4158
00003dd9 l     O .text	0000001d __c.4160
00003dbc l     O .text	0000001d __c.4162
00003d9f l     O .text	0000001d __c.4164
00003d82 l     O .text	0000001d __c.4166
00003d65 l     O .text	0000001d __c.4168
00003d48 l     O .text	0000001d __c.4170
00003d2b l     O .text	0000001d __c.4172
00003d0e l     O .text	0000001d __c.4174
00003cf4 l     O .text	0000001a __c.4176
00003cd8 l     O .text	0000001c __c.4178
00003cbb l     O .text	0000001d __c.4180
00003c9e l     O .text	0000001d __c.4182
00003c82 l     O .text	0000001c __c.4184
00003c66 l     O .text	0000001c __c.4186
00003c4c l     O .text	0000001a __c.4188
00003c32 l     O .text	0000001a __c.4190
00003c16 l     O .text	0000001c __c.4192
00003bfa l     O .text	0000001c __c.4194
00003bdd l     O .text	0000001d __c.4196
00003bc0 l     O .text	0000001d __c.4198
00003ba3 l     O .text	0000001d __c.4200
00003b87 l     O .text	0000001c __c.4202
00003b6d l     O .text	0000001a __c.4204
00003b6b l     O .text	00000002 __c.4206
00003b4c l     O .text	0000001f __c.4213
00003b13 l     O .text	00000039 __c.4215
00003afb l     O .text	00000018 __c.4217
00003ac2 l     O .text	00000039 __c.4219
00003a89 l     O .text	00000039 __c.4221
00003a64 l     O .text	00000025 __c.4223
00003a35 l     O .text	0000002f __c.4225
00003a09 l     O .text	0000002c __c.4227
000039e8 l     O .text	00000021 __c.4233
000039a4 l     O .text	00000044 __c.4235
00003963 l     O .text	00000041 __c.4237
00003935 l     O .text	0000002e __c.4239
000038ea l     O .text	0000004b __c.4241
0000389f l     O .text	0000004b __c.4243
00003874 l     O .text	0000002b __c.4245
00003848 l     O .text	0000002c __c.4247
00003785 l     O .text	0000003a __c.4302
00003765 l     O .text	00000020 __c.4311
00003718 l     O .text	0000004d __c.4336
000037f3 l     O .text	00000055 __c.4263
000037e6 l     O .text	0000000d __c.4265
000037d9 l     O .text	0000000d __c.4273
000037cc l     O .text	0000000d __c.4278
000037bf l     O .text	0000000d __c.4283
000036e0 l     O .text	00000038 __c.4348
000036b7 l     O .text	00000029 __c.4350
00003666 l     O .text	00000051 __c.4353
00003627 l     O .text	0000003f __c.4366
000035f1 l     O .text	00000036 __c.4368
000035be l     O .text	00000033 __c.4370
0000358b l     O .text	00000033 __c.4372
00003574 l     O .text	00000017 __c.4382
00003534 l     O .text	00000040 __c.4384
000034e8 l     O .text	0000004c __c.4387
000034b8 l     O .text	00000030 __c.4389
000034b6 l     O .text	00000002 __c.4392
000034aa l     O .text	0000000c __c.4394
0000349d l     O .text	0000000d __c.4396
0000348c l     O .text	00000011 __c.4398
00003479 l     O .text	00000013 __c.4400
00003466 l     O .text	00000013 __c.4402
00003453 l     O .text	00000013 __c.4404
0000342c l     O .text	00000027 __c.4411
00003407 l     O .text	00000025 __c.4413
000033ce l     O .text	00000039 __c.4427
000033aa l     O .text	00000024 __c.4444
0000339c l     O .text	0000000e __c.4461
0000338e l     O .text	0000000e __c.4466
00003380 l     O .text	0000000e __c.4468
0000334d l     O .text	00000033 __c.4482
0000331f l     O .text	0000002e __c.4484
000032f0 l     O .text	0000002f __c.4486
000032c0 l     O .text	00000030 __c.4488
00003291 l     O .text	0000002f __c.4490
00003261 l     O .text	00000030 __c.4492
0000323a l     O .text	00000027 __c.4494
00003223 l     O .text	00000017 __c.4496
0000320c l     O .text	00000017 __c.4498
000031f3 l     O .text	00000019 __c.4500
000031da l     O .text	00000019 __c.4502
000031cc l     O .text	0000000e __c.4504
000031b4 l     O .text	00000018 __c.4528
0000319d l     O .text	00000017 __c.4530
00003165 l     O .text	00000038 __c.4532
00003155 l     O .text	00000010 __c.4534
00003094 l     O .text	0000000e __c.4545
000030a2 l     O .text	00000028 __c.4543
00003120 l     O .text	00000035 __c.4538
000030ca l     O .text	00000056 __c.4540
0000306c l     O .text	00000028 __c.4553
0000305e l     O .text	0000000e __c.4556
00003046 l     O .text	00000018 __c.4573
00003033 l     O .text	00000013 __c.4575
00003025 l     O .text	0000000e __c.4577
00003017 l     O .text	0000000e __c.4582
00002ff7 l     O .text	00000020 __c.4599
00002fdc l     O .text	0000001b __c.4601
00002fc0 l     O .text	0000001c __c.4603
00002f91 l     O .text	0000002f __c.4605
00002f7e l     O .text	00000013 __c.4607
00002f4e l     O .text	00000030 __c.4609
00002f40 l     O .text	0000000e __c.4611
00002f32 l     O .text	0000000e __c.4616
00002f0d l     O .text	00000025 __c.4624
00002eed l     O .text	00000020 __c.4626
00002ece l     O .text	0000001f __c.4628
00002ea6 l     O .text	00000028 __c.4630
00002e97 l     O .text	0000000f __c.4632
00002e6f l     O .text	00000028 __c.4641
00002e48 l     O .text	00000027 __c.4643
00002e21 l     O .text	00000027 __c.4645
00002deb l     O .text	00000036 __c.4647
00002dc2 l     O .text	00000029 __c.4649
00002dab l     O .text	00000017 __c.4651
00002d82 l     O .text	00000029 __c.4664
00002d5d l     O .text	00000025 __c.4666
00002d3a l     O .text	00000023 __c.4668
00002d1a l     O .text	00000020 __c.4670
00002cfa l     O .text	00000020 __c.4672
00003f2e l     O .text	00000021 __c.3979
00000000 l    df *ABS*	00000000 main.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00004474 l     O .text	00000030 __c.4556
00004455 l     O .text	0000001f __c.4558
00004438 l     O .text	0000001d __c.4560
00004428 l     O .text	00000010 __c.4562
00004401 l     O .text	00000027 __c.4564
000043e7 l     O .text	0000001a __c.4566
000043cd l     O .text	0000001a __c.4568
000043cb l     O .text	00000002 __c.4570
000043ad l     O .text	0000001e __c.4577
0001b91e l     F .text	00000182 task.part.0
000043aa l     O .text	00000003 __c.4588
000043a6 l     O .text	00000004 __c.4590
0000439a l     O .text	0000000c __c.4592
00004393 l     O .text	00000007 __c.4600
00004382 l     O .text	00000011 __c.4602
0000435b l     O .text	00000027 __c.4604
0000433c l     O .text	0000001f __c.4606
0000431f l     O .text	0000001d __c.4608
0000430f l     O .text	00000010 __c.4610
000042e8 l     O .text	00000027 __c.4612
000042ce l     O .text	0000001a __c.4614
000042b4 l     O .text	0000001a __c.4616
0000429e l     O .text	00000016 __c.4618
00004288 l     O .text	00000016 __c.4620
00004276 l     O .text	00000012 __c.4622
00004267 l     O .text	0000000f __c.4624
0000424a l     O .text	0000001d __c.4626
0000422c l     O .text	0000001e __c.4628
0000420f l     O .text	0000001d __c.4630
000041f5 l     O .text	0000001a __c.4632
000041dd l     O .text	00000018 __c.4634
000041cc l     O .text	00000011 __c.4636
000041b6 l     O .text	00000016 __c.4638
000041a1 l     O .text	00000015 __c.4640
0000418f l     O .text	00000012 __c.4642
00004177 l     O .text	00000018 __c.4644
00004162 l     O .text	00000015 __c.4646
0000414c l     O .text	00000016 __c.4648
00004136 l     O .text	00000016 __c.4650
00004122 l     O .text	00000014 __c.4652
00000000 l    df *ABS*	00000000 vfprintf.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000001d6 l     O .text	00000004 __c.2334
000001da l     O .text	00000004 __c.2332
00000000 l    df *ABS*	00000000 ram.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000041d l     O .text	0000000d __c.3723
0000040a l     O .text	00000013 __c.3725
000003f7 l     O .text	00000013 __c.3727
000003d9 l     O .text	0000001e __c.3729
000003bb l     O .text	0000001e __c.3731
0000039d l     O .text	0000001e __c.3733
0000037f l     O .text	0000001e __c.3735
0000036b l     O .text	00000014 __c.3737
00000350 l     O .text	0000001b __c.3752
00000338 l     O .text	00000018 __c.3758
00000313 l     O .text	00000025 __c.3767
00000000 l    df *ABS*	00000000 spi.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00801740 l     O .bss	00000004 SPI0_Speed_value
0000042a l     O .text	0000001d __c.3721
0080173e l     O .bss	00000002 SPI0_Mode_value
00000000 l    df *ABS*	00000000 rtc.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000004a4 l     O .text	0000001b __c.3721
00000486 l     O .text	0000001e __c.3723
00000457 l     O .text	00000011 __c.3738
00000468 l     O .text	0000001e __c.3731
00000447 l     O .text	00000010 __c.3745
00000000 l    df *ABS*	00000000 timer.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00006798 l     F .text	0000007c clock_settime.part.2
00000594 l     O .text	0000001d __c.3718
0000058a l     O .text	0000000a __c.3738
00801750 l     O .bss	00000020 _ts_to_str
00801748 l     O .bss	00000008 __clock_elapsed
0000057c l     O .text	0000000e __c.3752
00000571 l     O .text	0000000b __c.3754
00801770 l     O .bss	00000002 timers_configured
00801772 l     O .bss	00000002 timers_enabled
0000055d l     O .text	00000014 __c.3774
0000054a l     O .text	00000013 __c.3776
0000053e l     O .text	0000000c __c.3778
00000526 l     O .text	00000018 __c.3780
00000515 l     O .text	00000011 __c.3782
00000505 l     O .text	00000010 __c.3784
00000000 l    df *ABS*	00000000 gpib_hal.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000e40 l     O .text	0000001d __c.3866
00801929 l     O .bss	00000001 _ppr_reg
00000e2d l     O .text	00000013 __c.3884
00000e1c l     O .text	00000011 __c.3898
00000e0f l     O .text	0000000d __c.3907
00000e01 l     O .text	0000000e __c.3916
00000df4 l     O .text	0000000d __c.3923
00000de6 l     O .text	0000000e __c.3929
00000000 l    df *ABS*	00000000 _clear_bss.o
000044d4 l       .text	00000000 .do_clear_bss_start
000044d2 l       .text	00000000 .do_clear_bss_loop
00000000 l    df *ABS*	00000000 delay.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 rs232.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 TWI_AVR8.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 i2c.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00801746 l     O .bss	00000002 txn
00801744 l     O .bss	00000002 op
00000000 l    df *ABS*	00000000 stringsup.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 timer_hal.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 mathio.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 ffsystem.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 diskio.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 vector.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 _udivmodqi4.o
0001be8a l       .text	00000000 __udivmodqi4_ep
0001be82 l       .text	00000000 __udivmodqi4_loop
00000000 l    df *ABS*	00000000 _udivmodhi4.o
0001beaa l       .text	00000000 __udivmodhi4_ep
0001be9c l       .text	00000000 __udivmodhi4_loop
00000000 l    df *ABS*	00000000 _divmodhi4.o
0001bed2 l       .text	00000000 __divmodhi4_neg1
0001beda l       .text	00000000 __divmodhi4_neg2
0001bee0 l       .text	00000000 __divmodhi4_exit
00000000 l    df *ABS*	00000000 _udivmodsi4.o
0001bf08 l       .text	00000000 __udivmodsi4_ep
0001beee l       .text	00000000 __udivmodsi4_loop
00000000 l    df *ABS*	00000000 _divmodsi4.o
0001bf3e l       .text	00000000 __divmodsi4_neg2
0001bf4c l       .text	00000000 __divmodsi4_exit
00000000 l    df *ABS*	00000000 calloc.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 _exit.o
0001ca5c l       .text	00000000 __stop_program
0001552c g     F .text	0000004a SS80_Selected_Device_Clear
0001bf70 g       .text	00000002 .hidden __usmulhisi3
0000eb1c g     F .text	0000000c putchar
0001170a g     F .text	00000022 SS80_is_MTA
00006634 g     F .text	000000ea clock_gettime
00005c76 g     F .text	00000098 rtc_init
00011a4a g     F .text	000000a8 GPIB_COMMANDS
000044e2  w      .text	00000000 __vector_22
00010bce g     F .text	00000054 gpib_unread
0001471c g     F .text	00000034 SS80_test_extended_status
0000613a  w    F .text	00000016 strcpy
000078e8 g     F .text	00000008 asctime
00006bc0 g     F .text	00000020 tm_mon_to_ascii
00801a44 g     O .bss	00000235 Fatfs
0000ec50 g     F .text	0000004a mctime
000044e2  w      .text	00000000 __vector_28
0000dccc g     F .text	0000001a mmc_fast
00005bc0 g     F .text	000000b6 rtc_write
0001561e g     F .text	00000218 SS80_Transparent_State
0080192a g     O .bss	00000001 gpib_unread_f
00004cfc g     F .text	00000004 spi_RX_buffer
00012194 g     F .text	00000042 gpib_help
00015394 g     F .text	0000009a SS80_Report
0000f780 g     F .text	0000006a free_file_descriptor
0000e910 g     F .text	00000096 fatfs_putc
0001c050 g       .text	0000001e .hidden __umulhisi3
008001c5 g     O .data	0000000c cfgfile
000044e2  w      .text	00000000 __vector_1
00011bb8 g     F .text	00000184 GPIB
0000e4b6 g     F .text	00000042 fatfs_help
0000688a g     F .text	00000016 delete_all_timers
00005f08 g     F .text	00000016 LCD_clear
00005618 g     F .text	0000000c SPI0_TXRX_Byte
0001c51e g       .text	00000000 __fp_mpack_finite
0001656a g     F .text	00000192 amigo_buffered_read
0000f2c6 g     F .text	00000086 utime
00801a0e g     O .bss	00000008 __clock
00012cb2 g     F .text	00000054 find_device
00800110 g     O .data	00000008 lcd
00007716 g     F .text	00000128 set_dst
0000efe4 g     F .text	00000096 fdevopen
0001172c g     F .text	00000022 SS80_is_MSA
00004c98 g     F .text	00000060 spi_end
000180f2 g     F .text	000000d6 lif_dir2str
0001c4a4 g     F .text	00000040 round
00012fc0 g     F .text	0000017e alloc_device
00004ffa g     F .text	0000006a safefree
00011d3c g     F .text	00000130 GPIB_TALK
000044e2  w      .text	00000000 __vector_32
0000ff00 g       *ABS*	00000000 __DATA_REGION_LENGTH__
0001c140 g     F .text	00000004 __divsf3
0001bff4 g       .text	00000036 .hidden __epilogue_restores__
000053cc g     F .text	00000018 uart_rx_count
0001408e g     F .text	0000003a lif_dir_count
00801ca3 g     O .bss	00000009 gpib_timer
00011e6c g     F .text	000000f6 GPIB_SECONDARY_ADDRESS
00018474 g     F .text	0000000e lif_vol_clear
0000671e g     F .text	0000007a clock_task
00010fe8 g     F .text	00000284 gpib_trace_display
0001b39e g     F .text	000000fa lif_rename_file
00013450 g     F .text	00000850 Read_Config
00012c32 g     F .text	00000028 find_type
0001c362 g     F .text	00000022 __fp_round
00012c5a g     F .text	0000001e count_drive_types
00006be0 g     F .text	00000042 Days_Per_Month
00006a7a g     F .text	00000028 execute_timers
0000fe96 g     F .text	00000176 ls_info
000044e2  w      .text	00000000 __vector_34
0000dc86 g     F .text	0000001a mmc_spi_begin
0001c210 g     F .text	0000000a __fixsfsi
00006994 g     F .text	0000000c clock_elapsed_begin
000061a2  w    F .text	00000032 reverse
000060ce g     F .text	0000003c lcd_printf
0000d61c g     F .text	00000006 mmc_disk_status
0001c384 g     F .text	00000044 __fp_split3
000109a2 g     F .text	00000014 gpib_timeout_set
0001be94 g       .text	00000028 .hidden __udivmodhi4
00004c94 g     F .text	00000004 chip_select_init
00006922 g     F .text	00000072 ts_to_str
00008c8a g     F .text	0000000c atol
00007c96 g     F .text	000000aa p_ntoa
0000de96 g     F .text	000000d8 tm_to_fat
00004e40 g     F .text	00000122 PrintFree
00016876 g     F .text	000000c2 amigo_cmd_dsj
0000d390 g     F .text	00000024 wait_ready
000001d6 g       .text	00000000 __trampolines_start
000131e8 g     F .text	0000011c hpdir_set_device
0001c2ec g     F .text	00000048 __fp_cmp
00011564 g     F .text	000000ea gpib_write_str
00801c81 g     O .bss	00000002 errno
000155fc g     F .text	00000022 SS80_Cancel
0001ca5e g       .text	00000000 _etext
00005714 g     F .text	00000008 TWI_StopTransmission
0000d778 g     F .text	0000047c mmc_disk_ioctl
0000632a g     F .text	00000028 MATCH
00800132 g     O .data	00000010 __WDay
00018f00 g     F .text	000000b8 lif_writedirindex
00005eb0 g     F .text	00000040 LCD_setCursor
000054d6 g     F .text	000000ce SPI0_Speed
000069a0 g     F .text	0000007c clock_elapsed_end
0000d202 g     F .text	000000c4 ff_wtoupper
0001c06e g     F .text	0000000a __subsf3
0001af62 g     F .text	00000312 lif_add_lif_file
00801cac g     O .bss	00000002 lastcmd
000044e2  w      .text	00000000 __vector_24
000131e6 g     F .text	00000002 set_Config_Defaults
00006316 g     F .text	00000014 skipspaces
0000bdd6 g     F .text	0000026c f_getcwd
000044e2  w      .text	00000000 __vector_12
000105de g     F .text	00000032 gpib_timer_init
00010640 g     F .text	0000002c ppr_init
0000eb28 g     F .text	00000068 fgets
0001c99e g     F .text	000000bc __ultoa_invert
000053e4 g     F .text	0000004c uart_get_tail
00004fb6 g     F .text	00000044 safemalloc
0001b274 g     F .text	0000012a lif_del_file
00007ad8 g     F .text	00000032 _putc_buffer_fn
0001a19e g     F .text	0000016e lif_ascii_string_to_e010
0000de8a g     F .text	00000006 mmc_ins_status
0001840a g     F .text	0000004e lif_lifbcd2timestr
00801cae g     O .bss	00000200 gpib_iobuff
000178d0 g     F .text	00000028 V2B_MSB
000182aa g     F .text	00000084 lif_time2lifbcd
00012caa g     F .text	00000008 find_free
000189c4 g     F .text	00000352 lif_check_dir
000044e2 g       .text	00000000 __bad_interrupt
000050be g     F .text	00000090 delayms
000154f8 g     F .text	00000018 SS80_Channel_Independent_Clear
0000fdbe g     F .text	000000d8 cat
00008afa g     F .text	00000028 snprintf_P
00016988 g     F .text	00000132 amigo_todo_op
00015576 g     F .text	00000086 SS80_Amigo_Clear
0000ef5a g     F .text	0000008a perror
0001e09c g       *ABS*	00000000 __data_load_end
0000d2d2 g     F .text	0000000c disk_initialize
00801968 g     O .bss	0000000d plot
00010950 g     F .text	00000006 gpib_timer_elapsed_end
00017a4e g     F .text	0000002a lif_free
0000ebc0 g     F .text	0000002e puts
0000fb92 g     F .text	000001bc copy
00006b86 g     F .text	00000010 clock_settime
00017a78 g     F .text	0000003e lif_stralloc
0000610a  w    F .text	00000016 islower
00004e12 g     F .text	0000002e freeRam
00016012 g     F .text	0000001c amigo_request_logical_address
00005ef0 g     F .text	00000018 LCD_pos
0000ccb8 g     F .text	0000022a f_rename
000044e2  w      .text	00000000 __vector_6
00010932 g     F .text	0000001e gpib_timer_reset
000191f8 g     F .text	000005d4 lif_create_volume
0001c56a g     F .text	00000130 malloc
00004d20 g     F .text	00000040 spi_init
0000fb50 g     F .text	00000042 posix_help
000044e2  w      .text	00000000 __vector_31
000106a2 g     F .text	00000046 dbf_open
0001b81a g     F .text	000000c2 copyright
0000bd20 g     F .text	000000b6 f_chdir
0001c138 g       .text	00000000 __lesf2
00004c64 g     F .text	00000030 chip_deselect
0001785a g     F .text	00000076 PRINTER_COMMANDS
00006a1c g     F .text	00000036 clock_clear
00007912 g     F .text	000000ee initialize_clock
0000de88 g     F .text	00000002 mmc_power_off
0000de90 g     F .text	00000006 mmc_wp_status
0000e80a g     F .text	00000106 fatfs_getc
00801eae g     O .bss	00000001 listening_last
0000d2c6 g     F .text	0000000c disk_status
00005e8a g     F .text	00000026 LCD_specialCommand
00800102 g     O .data	00000002 __malloc_heap_start
000001d6 g       .text	00000000 __trampolines_end
00006b5c g     F .text	0000002a clock_getres
0001a30c g     F .text	00000210 lif_add_ascii_file_as_e010_wrapper
00010b88 g     F .text	00000046 gpib_assert_ifc
00018294 g     F .text	00000016 lif_BCD2BIN
000057dc g     F .text	00000028 TWI_SendByte
00017ab6 g     F .text	00000054 lif_open
00007a00 g     F .text	000000d8 display_clock
0001066c g     F .text	0000001a ppr_bit_set
000044e2  w      .text	00000000 __vector_3
00010638 g     F .text	00000008 ppr_reg
00011418 g     F .text	00000008 gpib_decode
0000514e g     F .text	00000022 uart_rx_flush
0000ee68 g     F .text	00000004 rmdir
00006814 g     F .text	00000076 set_timers
00801a32 g     O .bss	0000000c dst
0000eede g     F .text	0000007c readdir
0001c3c8 g     F .text	0000000e __fp_zero
0000c69c g     F .text	0000002a f_closedir
0000d31e g     F .text	00000014 disk_ioctl
0001b5a6 g     F .text	00000274 lif_tests
00008206 g     F .text	00000084 _puts_pad
00004d00 g     F .text	00000020 spi_TX
00018482 g     F .text	0000038c lif_dump_vol
00011f62 g     F .text	0000004c listen_cleanup
0001832e g     F .text	000000a0 lif_lifbcd2time
000181c8 g     F .text	000000be lif_str2dir
000056a6 g     F .text	0000002c SPI0_TXRX
00005f5c g     F .text	00000064 LCD_init
0001c138 g       .text	00000000 __nesf2
00013304 g     F .text	00000020 hpdir_set_parameters
00005ad8 g     F .text	0000000e BINtoBCD
0000f3ac g     F .text	000000d0 lseek
000044e2  w      .text	00000000 __vector_23
0001ca5e g       *ABS*	00000000 __data_load_start
008017f6 g     O .bss	00000004 _mmc_clock
000044a4 g       .text	00000000 __dtors_end
00005e40 g     F .text	00000024 LCD_putb
000117f8 g     F .text	00000012 gpib_init_devices
00006246  w    F .text	00000050 strncasecmp
00802174 g       .bss	00000000 __bss_end
00017d22 g     F .text	00000056 lif_chars
0001bf7c g       .text	00000014 .hidden __muluhisi3
000124ba g     F .text	0000006a print_tok_str
000044e2  w      .text	00000000 __vector_30
00000400 g       *ABS*	00000000 __LOCK_REGION_LENGTH__
0001c7ac g     F .text	00000008 abort
00013ca0 g     F .text	000002f2 format_drives
000044e2  w      .text	00000000 __vector_25
00802170 g     O .bss	00000002 __brkval
00006dde g     F .text	0000002a gmtime_r
0000ecf4 g     F .text	00000052 chmod
00006aa2 g     F .text	000000ba init_timers
00011792 g     F .text	00000022 AMIGO_is_MSA
00018d62 g     F .text	000000d0 lif_checkdirindex
0000c98a g     F .text	0000014e f_unlink
00010c2e g     F .text	00000020 gpib_control_pin_read
000107d0 g     F .text	000000ae dbf_open_read
0000de86 g     F .text	00000002 mmc_power_on
00008bc0 g     F .text	000000bc strtol
0001092c g     F .text	00000006 gpib_timer_elapsed_begin
0001c988 g     F .text	00000016 strnlen
00005170 g     F .text	00000134 uart_ubr
0000d172 g     F .text	00000066 ff_uni2oem
0001a0ec g     F .text	000000b2 lif_e010_pad_sector
000179a0 g     F .text	00000042 lif_help
00006402 g     F .text	000000b8 split_args
0000edec g     F .text	0000003e rename
00010796 g     F .text	0000003a dbf_close
000174b4 g     F .text	000000be receive_plot_flush
0001c15a g     F .text	000000d4 __divsf3x
000044e2  w      .text	00000000 __vector_11
00801eaf g     O .bss	00000001 spoll
0000ec9a g     F .text	0000001c basename
00014750 g     F .text	000000c6 SS80_display_extended_status
00017368 g     F .text	00000130 AMIGO_COMMANDS
0001c7b4 g     F .text	000001b0 __ftoa_engine
00017e60 g     F .text	0000007a lif_fixname
0000d6ae g     F .text	000000ca mmc_disk_write
000044a4  w      .text	00000000 __init
0001c536 g     F .text	00000034 calloc
0001acf2 g     F .text	00000270 lif_extract_lif_as_lif
000065c0 g     F .text	00000026 install_timers_isr
00013324 g     F .text	0000012c Post_Config
00010610 g     F .text	00000014 reverse_8bits
00014918 g     F .text	000000e0 SS80_describe
00005468 g     F .text	0000002c uart_getchar
00007d40 g     F .text	0000020e p_ftoa
0000f66c g     F .text	000000dc write
00005fc0 g     F .text	00000046 lcd_cleareol
00017d78 g     F .text	00000074 lif_B2S
0001c3d6 g       .text	00000000 __gtsf2
0000fb10 g     F .text	00000040 fprintf
00010f44 g     F .text	000000a4 gpib_decode_header
0001126c g     F .text	000001ac gpib_read_byte
000123b8 g     F .text	00000044 tok_index
00015510 g     F .text	0000001c SS80_Universal_Device_Clear
0001a51c g     F .text	00000278 lif_add_ascii_file_as_e010
000065e6 g     F .text	0000004e __vector_13
0000617c  w    F .text	00000026 strcat
008019b7 g     O .bss	00000057 uarts
0001c3fa g       .text	00000000 __mulsf3_pse
000044e2  w      .text	00000000 __vector_17
00004df0 g     F .text	00000022 spi_TXRX
0001c340 g     F .text	00000006 __fp_nan
00012d06 g     F .text	000001c6 set_active_device
000044e2  w      .text	00000000 __vector_19
00006540 g     F .text	0000007c get_value
0000567e g     F .text	00000028 SPI0_TX
00017dec g     F .text	0000003a lif_checkname
0000ecb6 g     F .text	0000003e chdir
000044e2  w      .text	00000000 __vector_7
0000dd4e g     F .text	00000138 mmc_init
0000e4f8 g     F .text	00000176 fatfs_ls
0001c334 g     F .text	0000000c __fp_inf
00008b22 g     F .text	00000028 sprintf_P
0001c038 g       .text	00000018 .hidden __cmpdi2_s8
0000f07a g     F .text	00000088 fat_time_to_unix
0000f47c g     F .text	0000004e fseek
00801c79 g     O .bss	00000004 AccSize
00018458 g     F .text	0000000c lif_image_clear
0000dcf8 g     F .text	0000000e mmc_set_ms_timeout
000065bc g     F .text	00000004 enable_system_task
0000dcec g     F .text	00000006 mmc_spi_RX_buffer
00006efe g     F .text	00000058 is_dst
000052a4 g     F .text	0000008e uart_init
00014454 g     F .text	00000078 SS80ControllerPack
00801eb8 g     O .bss	00000204 Devices
000044ca g       .text	00000010 .hidden __do_clear_bss
0001c964 g     F .text	00000016 strnlen_P
00801a3e g     O .bss	00000006 _pch
000055a4 g     F .text	00000074 SPI0_Mode
00810000 g       .comment	00000000 __eeprom_end
00019a8c g     F .text	000001f4 lif_open_volume
0000fd4e g     F .text	00000070 testpage
00017768 g     F .text	000000f2 printer_buffer
000058c2 g     F .text	0000005c TWI_WritePacket
0000bcee g     F .text	00000032 f_close
0001c3f6 g     F .text	000000ca __mulsf3x
00017498 g     F .text	0000001c printer_init
0000dca8 g     F .text	0000001a mmc_slow
000062d6 g     F .text	00000020 sep
00800100 g     O .data	00000002 __malloc_heap_end
00010624 g     F .text	00000014 ppr_set
00016440 g     F .text	0000012a amigo_format
0000f4ca g     F .text	000000da read
00018fb8 g     F .text	00000030 lif_writedirEOF
0000dca0 g     F .text	00000008 mmc_spi_end
0001c276 g       .text	00000000 __floatsisf
00016938 g     F .text	00000050 amigo_cmd_clear
00000000 g       .text	00000000 __vectors
00018fe8 g     F .text	00000210 lif_updatefree
000056d2 g     F .text	0000002a SPI0_RX
0000b62a g     F .text	00000296 f_read
008019b5 g     O .bss	00000002 rtc_ok
000116e8 g     F .text	00000022 SS80_is_MLA
00005332 g     F .text	00000046 uart_rx_interrupt
00005494 g     F .text	00000006 uart0_getchar
000044e2  w      .text	00000000 __vector_27
00010b1c g     F .text	0000006c gpib_disable_PPR
0000dfbe g     F .text	000000e0 fatfs_scan_files
00004c32 g     F .text	00000032 chip_select
0080173e g       .data	00000000 __data_end
0001075c g     F .text	0000003a dbf_lseek
00015c22 g     F .text	000001d4 SS80_COMMANDS
00006296 g     F .text	00000040 stralloc
0000c6c6 g     F .text	00000088 f_readdir
00801eb0 g     O .bss	00000002 current
00014a4a g     F .text	0000004e SS80_Check_Volume
0000dc4e g     F .text	00000038 mmc_install_timer
00007c4e g     F .text	00000048 pch
00008b84 g     F .text	0000003c atodigit
0001be5e g       .text	0000001e .hidden __mulsi3
00006150  w    F .text	0000002c strncpy
0000ee2a g     F .text	0000003e unlink
0000f642 g     F .text	0000002a sync
0001546c g     F .text	0000008c SS80_init
0001c138 g       .text	00000000 __eqsf2
0000f85c g     F .text	0000008a new_file_descriptor
00006208  w    F .text	0000003e strcasecmp
0001bf9c g       .text	00000020 .hidden __negdi2
00017960 g     F .text	00000040 B2V_LSB
0000e3b0 g     F .text	00000106 fatfs_filinfo_list
0000cee2 g     F .text	0000009a f_chmod
00801a16 g     O .bss	00000018 timer_irq
00012c78 g     F .text	00000032 type_to_str
00000000  w      .text	00000000 __vector_default
0001bebc g       .text	00000026 .hidden __divmodhi4
000144cc g     F .text	00000198 SS80UnitPack
0001087e g     F .text	000000ae dbf_open_write
000044e2  w      .text	00000000 __vector_5
0000dbf4 g     F .text	0000001e mmc_disk_timerproc
0000760a g     F .text	0000010c find_dst
0080018f g     O .data	00000034 gpib_tokens
000044e2  w      .text	00000000 __vector_33
000123fc g     F .text	0000003e tok_name
00011420 g     F .text	00000144 gpib_read_str
00019c80 g     F .text	000003aa lif_dir
000166fc g     F .text	0000017a amigo_buffered_write
0001baa0 g     F .text	00000014 task
00000400 g       *ABS*	00000000 __SIGNATURE_REGION_LENGTH__
00014816 g     F .text	00000102 SS80_send_status
00006006 g     F .text	000000b2 lcd_putch
0001bf5e g       .text	00000012 .hidden __tablejump2__
0001180a g     F .text	00000126 gpib_trace_task
00800142 g     O .data	00000001 Stat
0000f236 g     F .text	00000090 unix_time_to_fat
000044a4 g       .text	00000000 __ctors_start
00005f1e g     F .text	0000003e LCD_setFastBacklightRGB
0000d4d2 g     F .text	0000014a mmc_disk_initialize
00801a2e g     O .bss	00000004 __tzone
0000df6e g     F .text	00000026 get_fattime
0000f5a4 g     F .text	00000038 fread
00018464 g     F .text	00000010 lif_dir_clear
00016260 g     F .text	00000052 amigo_increment
00011fae g     F .text	00000122 GPIB_LISTEN
008001c3 g     O .data	00000002 debuglevel
008017fa g     O .bss	00000002 _mmc_timeout
000044b0 g       .text	0000001a .hidden __do_copy_data
00800285 g     O .data	00000074 faults
0000fa24 g     F .text	000000d4 posix_fopen_modes_to_open
00017922 g     F .text	0000003e B2V_MSB
00018286 g     F .text	0000000e lif_BIN2BCD
0001c4e4 g     F .text	00000036 __fp_mintl
0001c138 g     F .text	00000008 __cmpsf2
0001c02a g       .text	0000000e .hidden __xload_1
00006e60 g     F .text	0000005c gettimeofday
0001c354 g     F .text	0000000e __fp_pscB
0001c394 g       .text	00000000 __fp_splitA
000183ce g     F .text	0000003c lif_ctime_gmt
00017bbe g     F .text	000000a2 lif_read
0000faf8 g     F .text	00000018 fopen
0080173e g       .bss	00000000 __bss_start
0000783e g     F .text	000000aa asctime_r
00006fee g     F .text	00000008 localtime
0001c97a g     F .text	0000000e memset
00016aba g     F .text	00000108 amigo_todo
00013186 g     F .text	00000032 push_state
000075c8 g     F .text	00000042 setdate
0001bab4 g     F .text	000003aa main
000056fc g     F .text	00000018 TWI_Init
00012192 g     F .text	00000002 talk_cleanup
00005af8 g     F .text	000000c8 rtc_run
0000f376 g     F .text	00000036 ftell
00801eb2 g     O .bss	00000001 talking
0000bbee g     F .text	00000100 f_sync
0080192d g     O .bss	00000002 AMIGOs
0001c138 g       .text	00000000 __ltsf2
000054d2 g     F .text	00000004 uart_keyhit
0001313e g     F .text	00000048 init_Devices
000044e2  w      .text	00000000 __vector_4
00018d16 g     F .text	0000004c lif_close_volume
0000dcc2 g     F .text	0000000a mmc_spi_init
00018e32 g     F .text	000000ce lif_readdirindex
0000571c g     F .text	000000c0 TWI_StartTransmission
00016bea g     F .text	000005c8 Amigo_Command
0000f84c g     F .text	00000010 fclose
0000eb10 g     F .text	0000000c getchar
000161a4 g     F .text	000000bc amigo_send_status
00015f8a g     F .text	00000088 amigo_init
00800143 g     O .data	0000004a sys_errlist
00006ebc g     F .text	00000042 time
0000eea2 g     F .text	0000003c opendir
0001c51a g     F .text	0000001c __fp_mpack
00012ecc g     F .text	000000f4 SS80_Set_Defaults
00006e3c g     F .text	00000024 settimezone
0000b242 g     F .text	00000078 f_mount
0000e0bc g     F .text	000002f4 fatfs_status
00007c34 g     F .text	0000001a pch_init
00011770 g     F .text	00000022 AMIGO_is_MTA
0001bf4e g       .text	00000010 .hidden __negsi2
0000c5ba g     F .text	000000e2 f_opendir
0001542e g     F .text	0000003e Clear_Common
0001b8dc g     F .text	00000042 help
00010ab0 g     F .text	0000006c gpib_enable_PPR
00016308 g     F .text	00000138 amigo_verify
0001c3de g     F .text	00000004 __mulsf3
000064ba g     F .text	00000086 get_token
0001602e g     F .text	000000ba amigo_request_status
00012570 g     F .text	000001b6 display_Addresses
0000f34c g     F .text	0000002a fileno_to_fatfs
0000d1d8 g     F .text	0000002a ff_oem2uni
000061ee  w    F .text	0000001a strcmp
00010a56 g     F .text	0000005a gpib_state_init
00000000  w      *ABS*	00000000 __heap_end
00010956 g     F .text	0000004c gpib_timer_task
00005064 g     F .text	0000005a delayus
000131b8 g     F .text	0000002e pop_state
000044e2  w      .text	00000000 __vector_9
0000ed46 g     F .text	0000004a getcwd
000044e2  w      .text	00000000 __vector_2
00006352 g     F .text	00000028 MATCHI
00016bc2 g     F .text	00000028 amigo_check_unit
0001c092 g     F .text	000000c6 __addsf3x
00000400 g       *ABS*	00000000 __USER_SIGNATURE_REGION_LENGTH__
0000c042 g     F .text	00000578 f_lseek
0000e9a6 g     F .text	000000ac fgetc
00801eb3 g     O .bss	00000001 secondary
00008aae g     F .text	0000004c vsnprintf_P
000078f0 g     F .text	00000022 ctime_gm
0001c3d6 g     F .text	00000008 __gesf2
00013f92 g     F .text	000000fc hpdir_init
000160e8 g     F .text	000000bc amigo_send_logical_address
000149f8 g     F .text	00000052 SS80_Check_Unit
0001164e g     F .text	0000009a gpib_file_init
0080010a g     O .data	00000001 _cs_pin
00005de6 g     F .text	00000028 I2C_Start
0080192b g     O .bss	00000002 gpib_log_fp
000044e2  w      .text	00000000 __vector_21
000044e2  w      .text	00000000 __vector_15
00005e1e g     F .text	00000022 I2C_Send
00007f4e g     F .text	000002b8 p_etoa
00012524 g     F .text	0000004c print_tok
000158aa g     F .text	000002c4 SS80_locate_and_read
000121d6 g     F .text	000001e2 gpib_tests
00801c7d g     O .bss	00000002 AccDirs
0000d16c g     F .text	00000006 ff_memfree
00801935 g     O .bss	00000002 PRINTERp
0001c346 g     F .text	0000000e __fp_pscA
0001be7c g       .text	00000018 .hidden __udivmodqi4
00801eb4 g     O .bss	00000001 listening
00011930 g     F .text	0000011a gpib_error_test
00801931 g     O .bss	00000002 SS80s
0000c74e g     F .text	0000007c f_stat
000109fc g     F .text	0000005a gpib_bus_init
0000ea52 g     F .text	000000a4 fputc
000044e2  w      .text	00000000 __vector_29
000054be g     F .text	00000014 uart0_putchar
00008b4a g     F .text	0000003a printf_P
0001bf94 g       .text	00000006 .hidden __mulohisi3
00015b6e g     F .text	000000b4 SS80_Execute_State
00007386 g     F .text	00000008 timegm
00014a98 g     F .text	000004ee SS80_Command_State
00006e1e g     F .text	0000001e gettimezone
00802174 g       .comment	00000000 __heap_start
000062f6 g     F .text	00000020 trim_tail
00010c66 g     F .text	000002de gpib_write_byte
00017572 g     F .text	000000b0 printer_close
0001880e g     F .text	000001b6 lif_check_volume
00006f56 g     F .text	00000098 localtime_r
008001d1 g     O .data	000000b4 tokens
00801c7f g     O .bss	00000002 AccFiles
00005d0e g     F .text	000000d8 rtc_read
000044a4 g       .text	00000000 __dtors_start
000109b6 g     F .text	00000046 gpib_bus_read_init
000044a4 g       .text	00000000 __ctors_end
0001bf26 g       .text	00000028 .hidden __divmodsi4
00010c22 g     F .text	0000000c gpib_bus_read
0000f102 g     F .text	00000134 stat
000040ff  w      *ABS*	00000000 __stack
0000f5dc g     F .text	00000066 syncfs
000179e2 g     F .text	0000006c lif_calloc
0000f748 g     F .text	00000038 fwrite
00011af2 g     F .text	000000c6 Send_Identify
008017f4 g     O .bss	00000002 _mmc_pre
0000dcf2 g     F .text	00000006 mmc_spi_TXRX
0080173e g       .data	00000000 _edata
00005840 g     F .text	00000082 TWI_ReadPacket
0000cf7c g     F .text	000000b2 f_utime
00012726 g     F .text	0000050c display_Config
0001bf72 g       .text	00000008 .hidden __usmulhisi3_tail
00802174 g       .comment	00000000 _end
00005804 g     F .text	0000003c TWI_ReceiveByte
00017b54 g     F .text	0000006a lif_seek_msg
00004d60 g     F .text	00000090 spi_begin
00017622 g     F .text	00000146 printer_open
0000b8c0 g     F .text	0000032e f_write
000044e2  w      .text	00000000 __vector_8
0001a02a g     F .text	000000c2 lif_find_file
0000591e g     F .text	000001ba __vector_26
00007b22 g     F .text	00000112 bin2num
0001c15e g       .text	00000000 __divsf3_pse
00800106 g     O .data	00000004 _spi_clock
0080192f g     O .bss	00000002 AMIGOp
0000dce6 g     F .text	00000006 mmc_spi_TX_buffer
0000b2ba g     F .text	00000370 f_open
00017eda g     F .text	0000011c lif_vol2str
0000d2fe g     F .text	00000020 disk_write
0001000c g     F .text	00000228 ls
0001ca5a  w      .text	00000000 .hidden exit
000120d0 g     F .text	000000c2 gpib_task
0001c272 g     F .text	0000007a __floatunsisf
000068a0 g     F .text	00000082 subtract_timespec
0001bebc g       .text	00000000 .hidden _div
000171b2 g     F .text	000001b6 Amigo_Execute
000061d4  w    F .text	0000001a strupper
00802172 g     O .bss	00000002 __flp
0001243a g     F .text	00000080 print_tok_val
0001bee2 g       .text	00000044 .hidden __udivmodsi4
000117d6 g     F .text	00000022 PRINTER_is_MTA
000197cc g     F .text	000002c0 lif_newdir
000140c8 g     F .text	0000038c hpdir_find_drive
000117b4 g     F .text	00000022 PRINTER_is_MLA
00008c7c g     F .text	0000000e atoi
00006c22 g     F .text	000001bc time_to_tm
0000df94 g     F .text	0000002a put_rc
0080010b g     O .data	00000002 LCD_ok
0000ebee g     F .text	00000038 fileno
00800118 g     O .data	0000001a __Month
00005624 g     F .text	0000005a SPI0_Init
0000cad8 g     F .text	000001e0 f_mkdir
0001c21a g     F .text	00000058 __fixunssfsi
008020bc g     O .bss	000000b4 hpdir
0000738e g     F .text	0000023a setdate_r
0000637a g     F .text	00000054 MATCHARGS
00004cf8 g     F .text	00000004 spi_TX_buffer
00005e0e g     F .text	00000010 I2C_Stop
00010000 g       *ABS*	00000000 __EEPROM_REGION_LENGTH__
0001ca5a g       .text	00000000 .hidden _exit
00017c60 g     F .text	000000c2 lif_write
00017e26 g     F .text	0000003a lif_S2B
00801eb5 g     O .bss	00000001 talking_last
000106e8 g     F .text	0000003a dbf_read
00005ae6 g     F .text	00000012 BCDtoBIN
00006ff6 g     F .text	00000390 normalize
00006e08 g     F .text	00000016 gmtime
000044e2  w      .text	00000000 __vector_14
0000e6ea g     F .text	00000120 fatfs_tests
0001b498 g     F .text	0000010e lif_create_image
0000d2de g     F .text	00000020 disk_read
0000f8e6 g     F .text	0000013e open
00006120  w    F .text	0000001a toupper
00015070 g     F .text	00000324 SS80_locate_and_write
0000828a g     F .text	00000824 _printf_fn
000044e2  w      .text	00000000 __vector_10
00010686 g     F .text	0000001c ppr_bit_clr
00801c83 g     O .bss	00000020 __iob
0000d02e g     F .text	00000138 f_getlabel
00017ff6 g     F .text	000000fc lif_str2vol
00005e64 g     F .text	00000026 LCD_command
0000c7ca g     F .text	000001c0 f_getfree
0000eb90 g     F .text	00000030 fputs
000044e2  w      .text	00000000 __vector_16
000063ce g     F .text	00000034 MATCHI_LEN
00800100 g       .data	00000000 __data_start
00004f62 g     F .text	00000054 safecalloc
0000ec26 g     F .text	0000002a fileno_to_stream
00014f86 g     F .text	000000ea SS80_cmd_seek
0000ee6c g     F .text	00000036 closedir
000044e2  w      .text	00000000 __vector_18
00000003 g       *ABS*	00000000 __FUSE_REGION_LENGTH__
00014664 g     F .text	000000b8 SS80VolumePack
0000d622 g     F .text	0000008c mmc_disk_read
0000e66e g     F .text	0000007c mmc_test
00020000 g       *ABS*	00000000 __TEXT_REGION_LENGTH__
00017b0a g     F .text	0000004a lif_stat
00005430 g     F .text	00000006 uart_rx_byte
00015836 g     F .text	00000074 SS80_error_return
00800104 g     O .data	00000002 __malloc_margin
00005378 g     F .text	00000054 __vector_20
0000ed90 g     F .text	0000005c mkdir
0000549a g     F .text	00000024 uart_putchar
00010234 g     F .text	000003aa posix_tests
00801eb6 g     O .bss	00000002 gpib_unread_data
0000f7ea g     F .text	00000062 close
0001c070 g       .text	00000000 __addsf3
0001bfbc g       .text	00000038 .hidden __prologue_saves__
0001174e g     F .text	00000022 AMIGO_is_MLA
0000dd06 g     F .text	00000048 mmc_test_timeout
0001a794 g     F .text	0000055e lif_extract_e010_as_ascii
000044e6 g     F .text	0000074c vfprintf
000162b2 g     F .text	00000056 amigo_seek
00010c4e g     F .text	00000018 gpib_handshake_pin_read
00006a52 g     F .text	00000028 enable_timers
0000e09e g     F .text	0000001e fatfs_fstype
000178f8 g     F .text	0000002a V2B_LSB
00010722 g     F .text	0000003a dbf_write
00801933 g     O .bss	00000002 SS80p
0000d166 g     F .text	00000006 ff_memalloc
0001c69a g     F .text	00000112 free
0001c3ca g       .text	00000000 __fp_szero
00005436 g     F .text	00000032 uart_tx_byte
0001bf90 g       .text	00000004 .hidden __mulshisi3



Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 52 22 	jmp	0x44a4	; 0x44a4 <__ctors_end>
       4:	0c 94 71 22 	jmp	0x44e2	; 0x44e2 <__bad_interrupt>
       8:	0c 94 71 22 	jmp	0x44e2	; 0x44e2 <__bad_interrupt>
       c:	0c 94 71 22 	jmp	0x44e2	; 0x44e2 <__bad_interrupt>
      10:	0c 94 71 22 	jmp	0x44e2	; 0x44e2 <__bad_interrupt>
      14:	0c 94 71 22 	jmp	0x44e2	; 0x44e2 <__bad_interrupt>
      18:	0c 94 71 22 	jmp	0x44e2	; 0x44e2 <__bad_interrupt>
      1c:	0c 94 71 22 	jmp	0x44e2	; 0x44e2 <__bad_interrupt>
      20:	0c 94 71 22 	jmp	0x44e2	; 0x44e2 <__bad_interrupt>
      24:	0c 94 71 22 	jmp	0x44e2	; 0x44e2 <__bad_interrupt>
      28:	0c 94 71 22 	jmp	0x44e2	; 0x44e2 <__bad_interrupt>
      2c:	0c 94 71 22 	jmp	0x44e2	; 0x44e2 <__bad_interrupt>
      30:	0c 94 71 22 	jmp	0x44e2	; 0x44e2 <__bad_interrupt>
      34:	0c 94 f3 32 	jmp	0x65e6	; 0x65e6 <__vector_13>
      38:	0c 94 71 22 	jmp	0x44e2	; 0x44e2 <__bad_interrupt>
      3c:	0c 94 71 22 	jmp	0x44e2	; 0x44e2 <__bad_interrupt>
      40:	0c 94 71 22 	jmp	0x44e2	; 0x44e2 <__bad_interrupt>
      44:	0c 94 71 22 	jmp	0x44e2	; 0x44e2 <__bad_interrupt>
      48:	0c 94 71 22 	jmp	0x44e2	; 0x44e2 <__bad_interrupt>
      4c:	0c 94 71 22 	jmp	0x44e2	; 0x44e2 <__bad_interrupt>
      50:	0c 94 bc 29 	jmp	0x5378	; 0x5378 <__vector_20>
      54:	0c 94 71 22 	jmp	0x44e2	; 0x44e2 <__bad_interrupt>
      58:	0c 94 71 22 	jmp	0x44e2	; 0x44e2 <__bad_interrupt>
      5c:	0c 94 71 22 	jmp	0x44e2	; 0x44e2 <__bad_interrupt>
      60:	0c 94 71 22 	jmp	0x44e2	; 0x44e2 <__bad_interrupt>
      64:	0c 94 71 22 	jmp	0x44e2	; 0x44e2 <__bad_interrupt>
      68:	0c 94 8f 2c 	jmp	0x591e	; 0x591e <__vector_26>
      6c:	0c 94 71 22 	jmp	0x44e2	; 0x44e2 <__bad_interrupt>
      70:	0c 94 71 22 	jmp	0x44e2	; 0x44e2 <__bad_interrupt>
      74:	0c 94 71 22 	jmp	0x44e2	; 0x44e2 <__bad_interrupt>
      78:	0c 94 71 22 	jmp	0x44e2	; 0x44e2 <__bad_interrupt>
      7c:	0c 94 71 22 	jmp	0x44e2	; 0x44e2 <__bad_interrupt>
      80:	0c 94 71 22 	jmp	0x44e2	; 0x44e2 <__bad_interrupt>
      84:	0c 94 71 22 	jmp	0x44e2	; 0x44e2 <__bad_interrupt>
      88:	0c 94 71 22 	jmp	0x44e2	; 0x44e2 <__bad_interrupt>
      8c:	be 42       	sbci	r27, 0x2E	; 46
      8e:	11 44       	sbci	r17, 0x41	; 65
      90:	ee 42       	sbci	r30, 0x2E	; 46
      92:	ea 43       	sbci	r30, 0x3A	; 58
      94:	ea 43       	sbci	r30, 0x3A	; 58
      96:	11 44       	sbci	r17, 0x41	; 65
      98:	11 44       	sbci	r17, 0x41	; 65
      9a:	11 44       	sbci	r17, 0x41	; 65
      9c:	11 44       	sbci	r17, 0x41	; 65
      9e:	11 44       	sbci	r17, 0x41	; 65
      a0:	11 44       	sbci	r17, 0x41	; 65
      a2:	11 44       	sbci	r17, 0x41	; 65
      a4:	11 44       	sbci	r17, 0x41	; 65
      a6:	be 42       	sbci	r27, 0x2E	; 46
      a8:	b8 42       	sbci	r27, 0x28	; 40
      aa:	11 44       	sbci	r17, 0x41	; 65
      ac:	11 44       	sbci	r17, 0x41	; 65
      ae:	11 44       	sbci	r17, 0x41	; 65
      b0:	11 44       	sbci	r17, 0x41	; 65
      b2:	e8 42       	sbci	r30, 0x28	; 40
      b4:	11 44       	sbci	r17, 0x41	; 65
      b6:	11 44       	sbci	r17, 0x41	; 65
      b8:	be 42       	sbci	r27, 0x2E	; 46
      ba:	11 44       	sbci	r17, 0x41	; 65
      bc:	11 44       	sbci	r17, 0x41	; 65
      be:	11 44       	sbci	r17, 0x41	; 65
      c0:	11 44       	sbci	r17, 0x41	; 65
      c2:	11 44       	sbci	r17, 0x41	; 65
      c4:	11 44       	sbci	r17, 0x41	; 65
      c6:	11 44       	sbci	r17, 0x41	; 65
      c8:	11 44       	sbci	r17, 0x41	; 65
      ca:	11 44       	sbci	r17, 0x41	; 65
      cc:	be 42       	sbci	r27, 0x2E	; 46
      ce:	0c 44       	sbci	r16, 0x4C	; 76
      d0:	ee 42       	sbci	r30, 0x2E	; 46
      d2:	ea 43       	sbci	r30, 0x3A	; 58
      d4:	ea 43       	sbci	r30, 0x3A	; 58
      d6:	11 44       	sbci	r17, 0x41	; 65
      d8:	11 44       	sbci	r17, 0x41	; 65
      da:	11 44       	sbci	r17, 0x41	; 65
      dc:	11 44       	sbci	r17, 0x41	; 65
      de:	11 44       	sbci	r17, 0x41	; 65
      e0:	11 44       	sbci	r17, 0x41	; 65
      e2:	11 44       	sbci	r17, 0x41	; 65
      e4:	11 44       	sbci	r17, 0x41	; 65
      e6:	be 42       	sbci	r27, 0x2E	; 46
      e8:	b8 42       	sbci	r27, 0x28	; 40
      ea:	11 44       	sbci	r17, 0x41	; 65
      ec:	11 44       	sbci	r17, 0x41	; 65
      ee:	07 44       	sbci	r16, 0x47	; 71
      f0:	11 44       	sbci	r17, 0x41	; 65
      f2:	e8 42       	sbci	r30, 0x28	; 40
      f4:	11 44       	sbci	r17, 0x41	; 65
      f6:	11 44       	sbci	r17, 0x41	; 65
      f8:	be 42       	sbci	r27, 0x2E	; 46
      fa:	33 44       	sbci	r19, 0x43	; 67
      fc:	1a 45       	sbci	r17, 0x5A	; 90
      fe:	29 44       	sbci	r18, 0x49	; 73
     100:	87 44       	sbci	r24, 0x47	; 71
     102:	6e 44       	sbci	r22, 0x4E	; 78
     104:	1a 45       	sbci	r17, 0x5A	; 90
     106:	1a 45       	sbci	r17, 0x5A	; 90
     108:	1a 45       	sbci	r17, 0x5A	; 90
     10a:	1a 45       	sbci	r17, 0x5A	; 90
     10c:	1a 45       	sbci	r17, 0x5A	; 90
     10e:	1a 45       	sbci	r17, 0x5A	; 90
     110:	1a 45       	sbci	r17, 0x5A	; 90
     112:	1a 45       	sbci	r17, 0x5A	; 90
     114:	3d 44       	sbci	r19, 0x4D	; 77
     116:	51 44       	sbci	r21, 0x41	; 65
     118:	1a 45       	sbci	r17, 0x5A	; 90
     11a:	1a 45       	sbci	r17, 0x5A	; 90
     11c:	1a 45       	sbci	r17, 0x5A	; 90
     11e:	1a 45       	sbci	r17, 0x5A	; 90
     120:	25 44       	sbci	r18, 0x45	; 69
     122:	1a 45       	sbci	r17, 0x5A	; 90
     124:	1a 45       	sbci	r17, 0x5A	; 90
     126:	51 44       	sbci	r21, 0x41	; 65
     128:	1a 45       	sbci	r17, 0x5A	; 90
     12a:	1a 45       	sbci	r17, 0x5A	; 90
     12c:	1a 45       	sbci	r17, 0x5A	; 90
     12e:	1a 45       	sbci	r17, 0x5A	; 90
     130:	1a 45       	sbci	r17, 0x5A	; 90
     132:	1a 45       	sbci	r17, 0x5A	; 90
     134:	1a 45       	sbci	r17, 0x5A	; 90
     136:	1a 45       	sbci	r17, 0x5A	; 90
     138:	1a 45       	sbci	r17, 0x5A	; 90
     13a:	33 44       	sbci	r19, 0x43	; 67
     13c:	b5 44       	sbci	r27, 0x45	; 69
     13e:	29 44       	sbci	r18, 0x49	; 73
     140:	87 44       	sbci	r24, 0x47	; 71
     142:	6e 44       	sbci	r22, 0x4E	; 78
     144:	1a 45       	sbci	r17, 0x5A	; 90
     146:	1a 45       	sbci	r17, 0x5A	; 90
     148:	1a 45       	sbci	r17, 0x5A	; 90
     14a:	1a 45       	sbci	r17, 0x5A	; 90
     14c:	1a 45       	sbci	r17, 0x5A	; 90
     14e:	1a 45       	sbci	r17, 0x5A	; 90
     150:	1a 45       	sbci	r17, 0x5A	; 90
     152:	1a 45       	sbci	r17, 0x5A	; 90
     154:	3d 44       	sbci	r19, 0x4D	; 77
     156:	51 44       	sbci	r21, 0x41	; 65
     158:	1a 45       	sbci	r17, 0x5A	; 90
     15a:	1a 45       	sbci	r17, 0x5A	; 90
     15c:	b5 44       	sbci	r27, 0x45	; 69
     15e:	1a 45       	sbci	r17, 0x5A	; 90
     160:	25 44       	sbci	r18, 0x45	; 69
     162:	1a 45       	sbci	r17, 0x5A	; 90
     164:	1a 45       	sbci	r17, 0x5A	; 90
     166:	51 44       	sbci	r21, 0x41	; 65
     168:	31 69       	ori	r19, 0x91	; 145
     16a:	3b 69       	ori	r19, 0x9B	; 155
     16c:	43 69       	ori	r20, 0x93	; 147
     16e:	46 69       	ori	r20, 0x96	; 150
     170:	49 69       	ori	r20, 0x99	; 153
     172:	4c 69       	ori	r20, 0x9C	; 156
     174:	4f 69       	ori	r20, 0x9F	; 159
     176:	52 69       	ori	r21, 0x92	; 146
     178:	55 69       	ori	r21, 0x95	; 149
     17a:	86 86       	std	Z+14, r8	; 0x0e
     17c:	af 86       	std	Y+15, r10	; 0x0f
     17e:	d6 86       	std	Z+14, r13	; 0x0e
     180:	f0 86       	std	Z+8, r15	; 0x08
     182:	f9 86       	std	Y+9, r15	; 0x09
     184:	1b 87       	std	Y+11, r17	; 0x0b
     186:	36 87       	std	Z+14, r19	; 0x0e
     188:	45 87       	std	Z+13, r20	; 0x0d
     18a:	8d 87       	std	Y+13, r24	; 0x0d
     18c:	61 87       	std	Z+9, r22	; 0x09
     18e:	76 89       	ldd	r23, Z+22	; 0x16
     190:	7e 89       	ldd	r23, Y+22	; 0x16
     192:	83 89       	ldd	r24, Z+19	; 0x13
     194:	a7 89       	ldd	r26, Z+23	; 0x17
     196:	b1 89       	ldd	r27, Z+17	; 0x11
     198:	fb 89       	ldd	r31, Y+19	; 0x13
     19a:	c6 89       	ldd	r28, Z+22	; 0x16
     19c:	c6 89       	ldd	r28, Z+22	; 0x16
     19e:	be 89       	ldd	r27, Y+22	; 0x16
     1a0:	1c 9b       	sbis	0x03, 4	; 3
     1a2:	ee 9b       	sbis	0x1d, 6	; 29
     1a4:	2a 9c       	mul	r2, r10
     1a6:	59 9c       	mul	r5, r9
     1a8:	69 9c       	mul	r6, r9
     1aa:	86 9c       	mul	r8, r6
     1ac:	e6 9c       	mul	r14, r6
     1ae:	f5 9d       	mul	r31, r5
     1b0:	f5 9d       	mul	r31, r5
     1b2:	f5 9d       	mul	r31, r5
     1b4:	1a 9d       	mul	r17, r10
     1b6:	46 9d       	mul	r20, r6
     1b8:	94 9d       	mul	r25, r4
     1ba:	b0 9d       	mul	r27, r0
     1bc:	b9 9b       	sbis	0x17, 1	; 23
     1be:	cc 9b       	sbis	0x19, 4	; 25
     1c0:	ac b9       	out	0x0c, r26	; 12
     1c2:	6b b9       	out	0x0b, r22	; 11
     1c4:	6b b9       	out	0x0b, r22	; 11
     1c6:	6b b9       	out	0x0b, r22	; 11
     1c8:	6b b9       	out	0x0b, r22	; 11
     1ca:	2f b9       	out	0x0f, r18	; 15
     1cc:	36 b9       	out	0x06, r19	; 6
     1ce:	3d b9       	out	0x0d, r19	; 13
     1d0:	4d b9       	out	0x0d, r20	; 13
     1d2:	5b b9       	out	0x0b, r21	; 11
     1d4:	54 b9       	out	0x04, r21	; 4

000001d6 <__trampolines_end>:
     1d6:	6e 61       	ori	r22, 0x1E	; 30
     1d8:	6e 00       	.word	0x006e	; ????

000001da <__c.2332>:
     1da:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     1ea:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1fa:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     20a:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     21a:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     22a:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     23a:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     24a:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     25a:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     26a:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     27a:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     28a:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     29a:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     2aa:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     2ba:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     2ca:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000002d8 <__c.3741>:
     2d8:	63 73 5f 64 69 73 61 62 6c 65 20 77 61 73 3a 20     cs_disable was: 
     2e8:	25 64 2c 20 77 61 6e 74 3a 20 25 64 0a 00           %d, want: %d..

000002f6 <__c.3736>:
     2f6:	63 73 5f 65 6e 61 62 6c 65 20 77 61 73 3a 20 25     cs_enable was: %
     306:	64 2c 20 77 61 6e 74 3a 20 25 64 0a 00              d, want: %d..

00000313 <__c.3767>:
     313:	73 61 66 65 66 72 65 65 3a 20 46 52 45 45 20 45     safefree: FREE E
     323:	52 52 4f 52 20 28 25 75 29 2c 20 74 6f 70 3a 28     RROR (%u), top:(
     333:	25 75 29 0a 00                                      %u)..

00000338 <__c.3758>:
     338:	73 61 66 65 6d 61 6c 6c 6f 63 28 25 64 29 20 66     safemalloc(%d) f
     348:	61 69 6c 65 64 21 0a 00                             ailed!..

00000350 <__c.3752>:
     350:	73 61 66 65 63 61 6c 6c 6f 63 28 25 64 2c 25 64     safecalloc(%d,%d
     360:	29 20 66 61 69 6c 65 64 21 0a 00                    ) failed!..

0000036b <__c.3737>:
     36b:	20 20 5f 5f 62 72 6b 76 61 6c 3a 20 20 20 20 25       __brkval:    %
     37b:	35 75 0a 00                                         5u..

0000037f <__c.3735>:
     37f:	20 20 4d 61 6c 6c 6f 63 20 73 74 61 72 74 20 25       Malloc start %
     38f:	35 75 20 20 65 6e 64 3a 20 25 35 75 0a 00           5u  end: %5u..

0000039d <__c.3733>:
     39d:	20 20 48 65 61 70 3a 20 73 74 61 72 74 3a 20 25       Heap: start: %
     3ad:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000003bb <__c.3731>:
     3bb:	20 20 44 61 74 61 20 20 73 74 61 72 74 3a 20 25       Data  start: %
     3cb:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000003d9 <__c.3729>:
     3d9:	20 20 42 53 53 20 20 20 73 74 61 72 74 3a 20 25       BSS   start: %
     3e9:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000003f7 <__c.3727>:
     3f7:	20 20 53 74 61 63 6b 20 46 72 65 65 3a 20 20 25       Stack Free:  %
     407:	75 0a 00                                            u..

0000040a <__c.3725>:
     40a:	20 20 53 74 61 63 6b 20 54 6f 70 3a 20 20 20 25       Stack Top:   %
     41a:	75 0a 00                                            u..

0000041d <__c.3723>:
     41d:	46 72 65 65 20 52 61 6d 3a 25 75 0a 00              Free Ram:%u..

0000042a <__c.3721>:
     42a:	53 50 49 30 5f 4d 6f 64 65 3a 20 49 6e 76 61 6c     SPI0_Mode: Inval
     43a:	69 64 20 6d 6f 64 65 28 25 64 29 0a 00              id mode(%d)..

00000447 <__c.3745>:
     447:	72 74 63 5f 72 65 61 64 20 65 72 72 6f 72 0a 00     rtc_read error..

00000457 <__c.3738>:
     457:	72 74 63 5f 77 72 69 74 65 20 65 72 72 6f 72 0a     rtc_write error.
	...

00000468 <__c.3731>:
     468:	72 74 63 5f 69 6e 69 74 20 20 77 72 69 74 65 20     rtc_init  write 
     478:	65 70 6f 63 68 20 66 61 69 6c 65 64 0a 00           epoch failed..

00000486 <__c.3723>:
     486:	72 74 63 5f 72 75 6e 20 2d 20 77 72 69 74 65 20     rtc_run - write 
     496:	73 74 61 74 75 73 20 65 72 72 6f 72 0a 00           status error..

000004a4 <__c.3721>:
     4a4:	72 74 63 5f 72 75 6e 20 72 65 61 64 20 73 74 61     rtc_run read sta
     4b4:	74 75 73 20 65 72 72 6f 72 0a 00                    tus error..

000004bf <__c.3748>:
     4bf:	25 73 20 65 78 70 65 63 74 65 64 20 25 64 20 61     %s expected %d a
     4cf:	72 67 75 6d 65 6e 74 73 20 6f 6e 6c 79 20 67 6f     rguments only go
     4df:	74 20 25 64 0a 00                                   t %d..

000004e5 <__c.3705>:
     4e5:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     4f5:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

00000505 <__c.3784>:
     505:	54 69 6d 65 72 73 20 65 6e 61 62 6c 65 64 0a 00     Timers enabled..

00000515 <__c.3782>:
     515:	43 6c 6f 63 6b 20 49 6e 73 74 61 6c 6c 65 64 0a     Clock Installed.
	...

00000526 <__c.3780>:
     526:	43 6c 6f 63 6b 20 74 61 73 6b 20 69 6e 69 74 20     Clock task init 
     536:	66 61 69 6c 65 64 0a 00                             failed..

0000053e <__c.3778>:
     53e:	43 6c 6f 63 6b 20 49 6e 69 74 0a 00                 Clock Init..

0000054a <__c.3776>:
     54a:	54 69 6d 65 72 73 20 63 6f 6e 66 69 67 75 72 65     Timers configure
     55a:	64 0a 00                                            d..

0000055d <__c.3774>:
     55d:	54 69 6d 65 72 73 20 69 6e 69 74 20 63 61 6c 6c     Timers init call
     56d:	65 64 0a 00                                         ed..

00000571 <__c.3754>:
     571:	5b 54 69 6d 65 3a 25 73 5d 0a 00                    [Time:%s]..

0000057c <__c.3752>:
     57c:	5b 25 73 20 54 69 6d 65 3a 25 73 5d 0a 00           [%s Time:%s]..

0000058a <__c.3738>:
     58a:	25 6c 64 2e 25 30 39 6c 64 00                       %ld.%09ld.

00000594 <__c.3718>:
     594:	73 65 74 5f 74 69 6d 65 72 73 3a 20 4e 6f 20 6d     set_timers: No m
     5a4:	6f 72 65 20 74 69 6d 65 72 73 21 0a 00              ore timers!..

000005b1 <__c.3993>:
     5b1:	63 6c 6b 20 74 69 6d 65 3a 20 20 20 20 25 73 0a     clk time:    %s.
	...

000005c2 <__c.3991>:
     5c2:	63 6c 6b 20 73 65 63 6f 6e 64 73 3a 20 25 6c 75     clk seconds: %lu
     5d2:	0a 00                                               ..

000005d4 <__c.3989>:
     5d4:	52 54 43 20 72 65 61 64 20 66 61 69 6c 65 64 0a     RTC read failed.
	...

000005e5 <__c.3987>:
     5e5:	72 74 63 20 74 69 6d 65 3a 20 20 20 20 25 73 0a     rtc time:    %s.
	...

000005f6 <__c.3985>:
     5f6:	72 74 63 20 73 65 63 6f 6e 64 73 3a 20 25 6c 75     rtc seconds: %lu
     606:	0a 00                                               ..

00000608 <__c.3978>:
     608:	75 73 65 20 73 65 74 64 61 74 65 20 63 6f 6d 6d     use setdate comm
     618:	61 6e 64 20 74 6f 20 63 68 61 6e 67 65 20 74 69     and to change ti
     628:	6d 65 0a 00                                         me..

0000062c <__c.3976>:
     62c:	72 74 63 20 72 65 61 64 20 65 72 72 6f 72 61 66     rtc read erroraf
     63c:	74 65 72 20 69 6e 69 74 0a 00                       ter init..

00000646 <__c.3974>:
     646:	72 74 63 20 66 6f 72 63 65 20 69 6e 69 74 20 66     rtc force init f
     656:	61 69 6c 65 64 0a 00                                ailed..

0000065d <__c.3972>:
     65d:	61 74 74 65 6d 70 74 69 6e 67 20 72 74 63 20 69     attempting rtc i
     66d:	6e 69 74 0a 00                                      nit..

00000672 <__c.3970>:
     672:	72 74 63 20 75 6e 69 6e 69 74 69 6c 69 7a 65 64     rtc uninitilized
     682:	0a 00                                               ..

00000684 <__c.3924>:
     684:	72 74 63 20 66 6f 72 63 65 20 69 6e 69 74 20 66     rtc force init f
     694:	61 69 6c 65 64 0a 00                                ailed..

0000069b <__c.3922>:
     69b:	69 6e 76 61 6c 69 64 20 6d 69 6e 3a 20 25 64 0a     invalid min: %d.
	...

000006ac <__c.3920>:
     6ac:	69 6e 76 61 6c 69 64 20 68 6f 75 72 3a 20 25 64     invalid hour: %d
     6bc:	0a 00                                               ..

000006be <__c.3918>:
     6be:	69 6e 76 61 6c 69 64 20 64 61 79 3a 20 25 64 0a     invalid day: %d.
	...

000006cf <__c.3916>:
     6cf:	69 6e 76 61 6c 69 64 20 6d 6f 6e 3a 20 25 64 0a     invalid mon: %d.
	...

000006e0 <__c.3914>:
     6e0:	69 6e 76 61 6c 69 64 20 79 65 61 72 3a 20 25 64     invalid year: %d
     6f0:	0a 00                                               ..

000006f2 <__c.3893>:
     6f2:	45 6e 74 65 72 20 64 61 74 65 20 59 59 59 59 20     Enter date YYYY 
     702:	4d 4d 20 44 44 20 48 48 3a 4d 4d 3a 53 53 20 3e     MM DD HH:MM:SS >
	...

00000713 <__c.3768>:
     713:	25 73 20 25 73 20 25 32 64 20 25 30 32 64 3a 25     %s %s %2d %02d:%
     723:	30 32 64 3a 25 30 32 64 20 25 34 64 00              02d:%02d %4d.

00000730 <__c.3736>:
     730:	73 65 6c 65 63 74 20 66 61 69 6c 65 64 21 0a 00     select failed!..

00000740 <__c.3765>:
     740:	45 4e 44 20 4d 4d 43 20 49 4e 49 54 0a 00           END MMC INIT..

0000074e <__c.3763>:
     74e:	4d 4d 43 20 42 6c 6f 63 6b 20 53 69 7a 65 3a 20     MMC Block Size: 
     75e:	25 6c 64 0a 00                                      %ld..

00000763 <__c.3761>:
     763:	4d 4d 43 20 42 6c 6f 63 6b 20 53 69 7a 65 20 2d     MMC Block Size -
     773:	20 72 65 61 64 20 66 61 69 6c 65 64 0a 00            read failed..

00000781 <__c.3758>:
     781:	2c 20 43 6f 64 65 20 70 61 67 65 3a 20 25 75 0a     , Code page: %u.
	...

00000792 <__c.3756>:
     792:	4c 46 4e 20 45 6e 61 62 6c 65 64 00                 LFN Enabled.

0000079e <__c.3754>:
     79e:	53 54 41 52 54 20 4d 4d 43 20 49 4e 49 54 0a 00     START MMC INIT..

000007ae <__c.3741>:
     7ae:	4d 4d 43 20 54 49 4d 45 4f 55 54 0a 00              MMC TIMEOUT..

000007bb <__c.3713>:
     7bb:	4d 4d 43 20 43 6c 6f 63 6b 20 74 61 73 6b 20 69     MMC Clock task i
     7cb:	6e 69 74 20 66 61 69 6c 65 64 0a 00                 nit failed..

000007d7 <__c.3785>:
     7d7:	0a 00                                               ..

000007d9 <__c.3783>:
     7d9:	25 73 20 25 75 2f 25 30 32 75 2f 25 30 32 75 20     %s %u/%02u/%02u 
     7e9:	25 30 32 75 3a 25 30 32 75 20 25 39 6c 75 20 25     %02u:%02u %9lu %
     7f9:	73 00                                               s.

000007fb <__c.3781>:
     7fb:	66 61 74 66 73 5f 66 69 6c 69 6e 66 6f 5f 6c 69     fatfs_filinfo_li
     80b:	73 74 3a 20 65 6d 70 74 79 0a 00                    st: empty..

00000816 <__c.3775>:
     816:	25 75 20 66 69 6c 65 73 2c 20 25 6c 75 20 62 79     %u files, %lu by
     826:	74 65 73 2e 0a 25 75 20 66 6f 6c 64 65 72 73 2e     tes..%u folders.
     836:	0a 25 6c 75 20 4b 42 20 74 6f 74 61 6c 20 64 69     .%lu KB total di
     846:	73 6b 20 73 70 61 63 65 2e 0a 25 6c 75 20 4b 42     sk space..%lu KB
     856:	20 61 76 61 69 6c 61 62 6c 65 2e 0a 00               available...

00000863 <__c.3773>:
     863:	56 6f 6c 75 6d 65 20 53 2f 4e 20 20 20 20 20 20     Volume S/N      
     873:	20 20 20 20 20 20 20 20 3d 20 25 30 34 58 2d 25             = %04X-%
     883:	30 34 58 0a 00                                      04X..

00000888 <__c.3771>:
     888:	56 6f 6c 75 6d 65 20 6e 61 6d 65 20 20 20 20 20     Volume name     
     898:	20 20 20 20 20 20 20 20 3d 20 25 73 0a 00                   = %s..

000008a6 <__c.3769>:
     8a6:	44 61 74 61 20 73 74 61 72 74 20 28 6c 62 61 29     Data start (lba)
     8b6:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

000008c5 <__c.3767>:
     8c5:	44 49 52 20 73 74 61 72 74 20 28 6c 62 61 2c 63     DIR start (lba,c
     8d5:	6c 75 73 74 6f 72 29 20 3d 20 25 6c 75 0a 00        lustor) = %lu..

000008e4 <__c.3765>:
     8e4:	46 41 54 20 73 74 61 72 74 20 28 6c 62 61 29 20     FAT start (lba) 
     8f4:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

00000903 <__c.3763>:
     903:	4e 75 6d 62 65 72 20 6f 66 20 63 6c 75 73 74 65     Number of cluste
     913:	72 73 20 20 20 20 20 20 3d 20 25 6c 75 0a 00        rs      = %lu..

00000922 <__c.3761>:
     922:	53 65 63 74 6f 72 73 2f 46 41 54 20 20 20 20 20     Sectors/FAT     
     932:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

00000941 <__c.3759>:
     941:	52 6f 6f 74 20 44 49 52 20 65 6e 74 72 69 65 73     Root DIR entries
     951:	20 20 20 20 20 20 20 20 3d 20 25 75 0a 00                   = %u..

0000095f <__c.3757>:
     95f:	4e 75 6d 62 65 72 20 6f 66 20 46 41 54 73 20 20     Number of FATs  
     96f:	20 20 20 20 20 20 20 20 3d 20 25 75 0a 00                   = %u..

0000097d <__c.3755>:
     97d:	42 79 74 65 73 2f 43 6c 75 73 74 65 72 20 20 20     Bytes/Cluster   
     98d:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

0000099c <__c.3753>:
     99c:	46 41 54 20 74 79 70 65 20 20 20 20 20 20 20 20     FAT type        
     9ac:	20 20 20 20 20 20 20 20 3d 20 25 73 0a 00                   = %s..

000009ba <__c.3751>:
     9ba:	66 61 74 66 73 20 73 74 61 74 75 73 3a 25 73 0a     fatfs status:%s.
	...

000009cb <__c.3715>:
     9cb:	72 63 3d 25 75 0a 00                                rc=%u..

000009d2 <__c.3753>:
     9d2:	2c 20 25 31 30 6c 75 4b 20 62 79 74 65 73 20 66     , %10luK bytes f
     9e2:	72 65 65 0a 00                                      ree..

000009e7 <__c.3751>:
     9e7:	25 34 75 20 46 69 6c 65 28 73 29 2c 25 31 30 6c     %4u File(s),%10l
     9f7:	75 20 62 79 74 65 73 20 74 6f 74 61 6c 0a 25 34     u bytes total.%4
     a07:	75 20 44 69 72 28 73 29 00                          u Dir(s).

00000a10 <__c.3747>:
     a10:	4c 69 73 74 69 6e 67 3a 5b 25 73 5d 0a 00           Listing:[%s]..

00000a1e <__c.3734>:
     a1e:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     a2e:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

00000a3e <__c.3732>:
     a3e:	45 4e 44 20 4d 4d 43 20 54 45 53 54 0a 00           END MMC TEST..

00000a4c <__c.3730>:
     a4c:	4d 4d 43 20 44 69 72 65 63 74 6f 72 79 20 4c 69     MMC Directory Li
     a5c:	73 74 0a 00                                         st..

00000a60 <__c.3728>:
     a60:	53 54 41 52 54 20 4d 4d 43 20 54 45 53 54 0a 00     START MMC TEST..

00000a70 <__c.3726>:
     a70:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     a80:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

00000a90 <__c.3718>:
     a90:	69 6e 64 3a 25 64 2c 61 72 67 63 3a 25 64 0a 00     ind:%d,argc:%d..

00000aa0 <__c.3708>:
     aa0:	4e 6f 74 65 3a 20 66 61 74 66 73 20 74 65 73 74     Note: fatfs test
     ab0:	73 20 4d 55 53 54 20 73 74 61 72 74 20 77 69 74     s MUST start wit
     ac0:	68 20 22 66 61 74 66 73 22 20 6b 65 79 77 6f 72     h "fatfs" keywor
     ad0:	64 0a 66 61 74 66 73 20 68 65 6c 70 0a 66 61 74     d.fatfs help.fat
     ae0:	66 73 20 6d 6d 63 5f 74 65 73 74 0a 66 61 74 66     fs mmc_test.fatf
     af0:	73 20 6d 6d 63 5f 69 6e 69 74 0a 66 61 74 66 73     s mmc_init.fatfs
     b00:	20 6c 73 20 64 69 72 0a 66 61 74 66 73 20 73 74      ls dir.fatfs st
     b10:	61 74 75 73 20 66 69 6c 65 0a 0a 00                 atus file...

00000b1c <__c.3706>:
     b1c:	66 61 74 66 73 20 68 65 6c 70 0a 00                 fatfs help..

00000b28 <__c.4038>:
     b28:	25 73 0a 00                                         %s..

00000b2c <__c.4036>:
     b2c:	25 73 3a 20 25 73 0a 00                             %s: %s..

00000b34 <__c.3791>:
     b34:	53 65 65 6b 20 66 61 69 6c 65 64 00                 Seek failed.

00000b40 <__c.3720>:
     b40:	66 70 75 74 63 20 73 74 72 65 61 6d 2d 3e 70 75     fputc stream->pu
     b50:	74 20 4e 55 4c 4c 0a 00                             t NULL..

00000b58 <__c.3713>:
     b58:	66 67 65 74 63 20 73 74 72 65 61 6d 2d 3e 67 65     fgetc stream->ge
     b68:	74 20 4e 55 4c 4c 0a 00                             t NULL..

00000b70 <__c.3877>:
     b70:	46 69 6c 65 73 3a 20 25 64 0a 00                    Files: %d..

00000b7b <__c.3873>:
     b7b:	6e 61 6d 65 3a 5b 25 73 5d 20 74 6f 6f 20 6c 6f     name:[%s] too lo
     b8b:	6e 67 20 77 69 74 68 20 66 75 6c 6c 20 70 61 74     ng with full pat
     b9b:	68 0a 00                                            h..

00000b9e <__c.3870>:
     b9e:	6f 70 65 6e 64 69 72 20 66 61 69 6c 65 64 0a 00     opendir failed..

00000bae <__c.3865>:
     bae:	6c 73 3a 20 63 61 6e 6e 6f 74 20 73 74 61 74 20     ls: cannot stat 
     bbe:	5b 25 73 5d 0a 00                                   [%s]..

00000bc4 <__c.3863>:
     bc4:	4c 69 73 74 69 6e 67 3a 5b 25 73 5d 0a 00           Listing:[%s]..

00000bd2 <__c.3861>:
     bd2:	6c 73 3a 20 43 61 6e 27 74 20 67 65 74 20 63 75     ls: Can't get cu
     be2:	72 72 65 6e 74 20 64 69 72 65 63 74 6f 72 79 0a     rrent directory.
	...

00000bf3 <__c.3848>:
     bf3:	25 73 20 6e 6f 6e 65 20 6e 6f 6e 65 20 25 31 32     %s none none %12
     c03:	6c 64 20 25 73 20 25 73 0a 00                       ld %s %s..

00000c0d <__c.3843>:
     c0d:	25 73 0a 00                                         %s..

00000c11 <__c.3841>:
     c11:	63 61 6e 20 6e 6f 74 20 73 74 61 74 3a 20 25 73     can not stat: %s
     c21:	0a 00                                               ..

00000c23 <__c.3829>:
     c23:	0d 00                                               ..

00000c25 <__c.3827>:
     c25:	4d 6f 72 65 2e 2e 00                                More...

00000c2c <__c.3817>:
     c2c:	25 6c 75 20 62 79 74 65 73 20 63 6f 70 69 65 64     %lu bytes copied
     c3c:	2e 0a 00                                            ...

00000c3f <__c.3813>:
     c3f:	43 6f 70 69 65 64 3a 20 25 30 38 6c 64 0d 00        Copied: %08ld..

00000c4e <__c.3810>:
     c4e:	57 72 69 74 65 20 65 72 72 6f 72 0a 00              Write error..

00000c5b <__c.3808>:
     c5b:	0a 43 6f 70 79 69 6e 67 2e 2e 2e 0a 00              .Copying.....

00000c68 <__c.3806>:
     c68:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000c78 <__c.3804>:
     c78:	43 72 65 61 74 69 6e 67 20 25 73 0a 00              Creating %s..

00000c85 <__c.3802>:
     c85:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000c95 <__c.3800>:
     c95:	4f 70 65 6e 69 6e 67 20 25 73 0a 00                 Opening %s..

00000ca1 <__c.3789>:
     ca1:	25 6c 64 20 62 79 74 65 73 0a 00                    %ld bytes..

00000cac <__c.3787>:
     cac:	0a 00                                               ..

00000cae <__c.3782>:
     cae:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000cbe <__c.3772>:
     cbe:	72 6d 64 69 72 20 25 73 20 66 61 69 6c 65 64 0a     rmdir %s failed.
	...

00000ccf <__c.3770>:
     ccf:	72 6d 20 25 73 20 66 61 69 6c 65 64 0a 00           rm %s failed..

00000cdd <__c.3768>:
     cdd:	72 65 6e 61 6d 65 20 25 73 20 74 6f 20 25 73 0a     rename %s to %s.
	...

00000cee <__c.3766>:
     cee:	25 73 0a 00                                         %s..

00000cf2 <__c.3763>:
     cf2:	6d 6b 64 69 72 20 25 73 20 66 61 69 6c 65 64 0a     mkdir %s failed.
	...

00000d03 <__c.3755>:
     d03:	63 68 64 69 72 20 25 73 20 66 61 69 6c 65 64 0a     chdir %s failed.
	...

00000d14 <__c.3739>:
     d14:	4e 6f 74 65 3a 20 70 6f 73 69 78 20 70 72 65 66     Note: posix pref
     d24:	69 78 20 69 73 20 6f 70 74 69 6f 6e 61 6c 0a 70     ix is optional.p
     d34:	6f 73 69 78 20 63 61 74 20 66 69 6c 65 20 5b 2d     osix cat file [-
     d44:	70 5d 0a 70 6f 73 69 78 20 63 64 20 64 69 72 0a     p].posix cd dir.
     d54:	70 6f 73 69 78 20 63 6f 70 79 20 66 69 6c 65 31     posix copy file1
     d64:	20 66 69 6c 65 32 0a 70 6f 73 69 78 20 6c 73 20      file2.posix ls 
     d74:	64 69 72 20 5b 2d 6c 5d 0a 70 6f 73 69 78 20 6d     dir [-l].posix m
     d84:	6b 64 69 72 20 64 69 72 0a 70 6f 73 69 78 20 70     kdir dir.posix p
     d94:	61 67 65 20 4e 4e 0a 70 6f 73 69 78 20 70 77 64     age NN.posix pwd
     da4:	0a 70 6f 73 69 78 20 72 6d 20 66 69 6c 65 0a 70     .posix rm file.p
     db4:	6f 73 69 78 20 72 6d 64 69 72 20 64 69 72 0a 70     osix rmdir dir.p
     dc4:	6f 73 69 78 20 72 65 6e 61 6d 65 20 6f 6c 64 20     osix rename old 
     dd4:	6e 65 77 0a 0a 00                                   new...

00000dda <__c.3737>:
     dda:	70 6f 73 69 78 20 68 65 6c 70 0a 00                 posix help..

00000de6 <__c.3929>:
     de6:	43 6c 6f 73 65 20 65 72 72 6f 72 3a 20 00           Close error: .

00000df4 <__c.3923>:
     df4:	53 65 65 6b 20 65 72 72 6f 72 3a 20 00              Seek error: .

00000e01 <__c.3916>:
     e01:	57 72 69 74 65 20 65 72 72 6f 72 3a 20 00           Write error: .

00000e0f <__c.3907>:
     e0f:	52 65 61 64 20 65 72 72 6f 72 3a 20 00              Read error: .

00000e1c <__c.3898>:
     e1c:	4f 70 65 6e 20 65 72 72 6f 72 3a 5b 25 73 5d 20     Open error:[%s] 
	...

00000e2d <__c.3884>:
     e2d:	5b 50 50 52 20 44 49 53 41 42 4c 45 20 41 4c 4c     [PPR DISABLE ALL
     e3d:	5d 0a 00                                            ]..

00000e40 <__c.3866>:
     e40:	47 50 49 42 20 43 6c 6f 63 6b 20 74 61 73 6b 20     GPIB Clock task 
     e50:	69 6e 69 74 20 66 61 69 6c 65 64 0a 00              init failed..

00000e5d <__c.4507>:
     e5d:	5b 67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 20     [gpib_write_str 
     e6d:	73 65 6e 74 28 25 64 29 20 65 78 70 65 63 74 65     sent(%d) expecte
     e7d:	64 28 25 64 29 5d 0a 00                             d(%d)]..

00000e85 <__c.4502>:
     e85:	67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 3a 20     gpib_write_str: 
     e95:	73 69 7a 65 20 3d 20 30 0a 00                       size = 0..

00000e9f <__c.4492>:
     e9f:	5b 67 70 69 62 5f 72 65 61 64 5f 73 74 72 20 72     [gpib_read_str r
     eaf:	65 61 64 28 25 64 29 20 65 78 70 65 63 74 65 64     ead(%d) expected
     ebf:	28 25 64 29 5d 0a 00                                (%d)]..

00000ec6 <__c.4488>:
     ec6:	67 70 69 62 5f 72 65 61 64 5f 73 74 72 28 69 6e     gpib_read_str(in
     ed6:	64 3a 25 64 29 3a 20 41 54 4e 20 25 30 32 58 48     d:%d): ATN %02XH
     ee6:	20 75 6e 65 78 70 65 63 74 65 64 0a 00               unexpected..

00000ef3 <__c.4485>:
     ef3:	67 70 69 62 5f 72 65 61 64 5f 73 74 72 3a 20 73     gpib_read_str: s
     f03:	69 7a 65 20 3d 20 30 0a 00                          ize = 0..

00000f0c <__c.4469>:
     f0c:	20 4d 53 41 20 25 30 32 58 68 00                     MSA %02Xh.

00000f17 <__c.4467>:
     f17:	20 4d 54 41 20 25 30 32 58 68 00                     MTA %02Xh.

00000f22 <__c.4465>:
     f22:	20 4d 4c 41 20 25 30 32 58 68 00                     MLA %02Xh.

00000f2d <__c.4461>:
     f2d:	20 20 20 20 20 00                                        .

00000f33 <__c.4459>:
     f33:	25 30 32 58 20 25 63 20 00                          %02X %c .

00000f3c <__c.4417>:
     f3c:	3c 4e 52 46 44 3d 25 64 2c 4e 44 41 56 3d 25 64     <NRFD=%d,NDAV=%d
     f4c:	3e 0a 00                                            >..

00000f4f <__c.4413>:
     f4f:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
     f5f:	20 44 41 56 3d 3d 31 3e 0a 00                        DAV==1>..

00000f69 <__c.4409>:
     f69:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
     f79:	20 4e 44 41 43 3d 3d 31 3e 0a 00                     NDAC==1>..

00000f84 <__c.4406>:
     f84:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
     f94:	20 4e 52 46 44 3d 3d 30 3e 0a 00                     NRFD==0>..

00000f9f <__c.4401>:
     f9f:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
     faf:	20 4e 52 46 44 3d 3d 31 20 26 26 20 4e 44 41 43      NRFD==1 && NDAC
     fbf:	20 3d 3d 20 30 3e 0a 00                              == 0>..

00000fc7 <__c.4397>:
     fc7:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
     fd7:	20 44 41 56 3d 3d 31 3e 0a 00                        DAV==1>..

00000fe1 <__c.4380>:
     fe1:	67 70 69 62 5f 75 6e 72 65 61 64 3a 20 65 72 72     gpib_unread: err
     ff1:	6f 72 2c 20 63 61 6e 20 6f 6e 6c 79 20 62 65 20     or, can only be 
    1001:	63 61 6c 6c 65 64 20 6f 6e 63 65 21 0a 00           called once!..

0000100f <__c.4368>:
    100f:	5b 49 46 43 20 53 45 4e 54 5d 0a 00                 [IFC SENT]..

0000101b <__c.4354>:
    101b:	5b 44 50 50 52 20 62 69 74 3a 25 64 2c 20 6d 61     [DPPR bit:%d, ma
    102b:	73 6b 3a 25 30 32 58 48 5d 0a 00                    sk:%02XH]..

00001036 <__c.4352>:
    1036:	67 70 69 62 5f 64 69 73 61 62 6c 65 5f 50 50 52     gpib_disable_PPR
    1046:	3a 20 62 69 74 20 25 64 20 6f 75 74 20 6f 66 20     : bit %d out of 
    1056:	72 61 6e 67 65 0a 00                                range..

0000105d <__c.4347>:
    105d:	5b 45 50 50 52 20 62 69 74 3a 25 64 2c 20 6d 61     [EPPR bit:%d, ma
    106d:	73 6b 3a 25 30 32 58 48 5d 0a 00                    sk:%02XH]..

00001078 <__c.4345>:
    1078:	67 70 69 62 5f 65 6e 61 62 6c 65 5f 50 50 52 3a     gpib_enable_PPR:
    1088:	20 62 69 74 20 25 64 20 6f 75 74 20 6f 66 20 72      bit %d out of r
    1098:	61 6e 67 65 0a 00                                   ange..

0000109e <__c.4340>:
    109e:	5b 47 50 49 42 20 53 54 41 54 45 20 49 4e 49 54     [GPIB STATE INIT
    10ae:	5d 0a 00                                            ]..

000010b1 <__c.4335>:
    10b1:	5b 47 50 49 42 20 42 55 53 5f 49 4e 49 54 5d 0a     [GPIB BUS_INIT].
	...

000010c2 <__c.4511>:
    10c2:	5b 50 52 49 4e 54 45 52 20 63 6c 6f 73 65 5d 0a     [PRINTER close].
	...

000010d3 <__c.4506>:
    10d3:	5b 53 41 20 25 30 32 58 48 2c 20 6c 69 73 74 65     [SA %02XH, liste
    10e3:	6e 3a 25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30     n:%02XH, talk:%0
    10f3:	32 58 48 5d 0a 00                                   2XH]..

000010f9 <__c.4504>:
    10f9:	5b 53 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [SA %02XH AMIGO]
    1109:	0a 00                                               ..

0000110b <__c.4502>:
    110b:	5b 53 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [SA %02XH SS80].
	...

0000111c <__c.4497>:
    111c:	5b 54 41 20 25 30 32 58 48 5d 0a 00                 [TA %02XH]..

00001128 <__c.4495>:
    1128:	5b 50 52 49 4e 54 45 52 20 4f 50 45 4e 5d 0a 00     [PRINTER OPEN]..

00001138 <__c.4493>:
    1138:	5b 54 41 20 25 30 32 58 48 20 50 52 49 4e 54 45     [TA %02XH PRINTE
    1148:	52 5d 0a 00                                         R]..

0000114c <__c.4491>:
    114c:	5b 54 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [TA %02XH AMIGO]
    115c:	0a 00                                               ..

0000115e <__c.4489>:
    115e:	5b 54 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [TA %02XH SS80].
	...

0000116f <__c.4487>:
    116f:	5b 55 4e 54 5d 0a 00                                [UNT]..

00001176 <__c.4482>:
    1176:	5b 4c 41 20 25 30 32 58 48 5d 0a 00                 [LA %02XH]..

00001182 <__c.4480>:
    1182:	5b 4c 41 20 25 30 32 58 48 20 50 52 49 4e 54 45     [LA %02XH PRINTE
    1192:	52 5d 0a 00                                         R]..

00001196 <__c.4478>:
    1196:	5b 4c 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [LA %02XH SS80].
	...

000011a7 <__c.4476>:
    11a7:	5b 4c 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [LA %02XH AMIGO]
    11b7:	0a 00                                               ..

000011b9 <__c.4474>:
    11b9:	0a 00                                               ..

000011bb <__c.4472>:
    11bb:	5b 55 4e 4c 5d 0a 00                                [UNL]..

000011c2 <__c.4467>:
    11c2:	5b 47 50 49 42 20 28 25 30 32 58 48 29 20 6e 6f     [GPIB (%02XH) no
    11d2:	74 20 64 65 66 69 6e 65 64 20 54 4f 44 4f 5d 0a     t defined TODO].
	...

000011e3 <__c.4465>:
    11e3:	5b 44 43 4c 5d 0a 00                                [DCL]..

000011ea <__c.4463>:
    11ea:	5b 53 44 43 20 41 4d 49 47 4f 5d 0a 00              [SDC AMIGO]..

000011f7 <__c.4461>:
    11f7:	5b 53 44 43 20 53 53 38 30 5d 0a 00                 [SDC SS80]..

00001203 <__c.4459>:
    1203:	5b 53 44 43 5d 0a 00                                [SDC]..

0000120a <__c.4457>:
    120a:	5b 53 50 44 5d 0a 00                                [SPD]..

00001211 <__c.4455>:
    1211:	5b 53 50 45 5d 0a 00                                [SPE]..

00001218 <__c.4453>:
    1218:	5b 50 50 55 20 75 6e 73 75 70 70 6f 72 74 65 64     [PPU unsupported
    1228:	20 54 4f 44 4f 5d 0a 00                              TODO]..

00001230 <__c.4451>:
    1230:	5b 50 50 43 20 75 6e 73 75 70 70 6f 72 74 65 64     [PPC unsupported
    1240:	20 54 4f 44 4f 5d 0a 00                              TODO]..

00001248 <__c.4446>:
    1248:	5b 49 44 45 4e 54 20 55 6e 69 74 3a 25 30 32 58     [IDENT Unit:%02X
    1258:	48 3d 25 30 34 58 48 5d 0a 00                       H=%04XH]..

00001262 <__c.4444>:
    1262:	5b 49 44 45 4e 54 20 55 6e 69 74 3a 25 30 32 58     [IDENT Unit:%02X
    1272:	48 3d 25 30 34 58 48 20 46 41 49 4c 45 44 5d 0a     H=%04XH FAILED].
	...

00001283 <__c.4417>:
    1283:	3c 4d 45 44 49 41 20 4d 49 53 53 49 4e 47 3e 0a     <MEDIA MISSING>.
	...

00001294 <__c.4415>:
    1294:	3c 49 4e 54 45 52 52 55 50 54 3e 0a 00              <INTERRUPT>..

000012a1 <__c.4413>:
    12a1:	3c 42 55 53 3e 0a 00                                <BUS>..

000012a8 <__c.4411>:
    12a8:	3c 54 49 4d 45 4f 55 54 3e 0a 00                    <TIMEOUT>..

000012b3 <__c.4409>:
    12b3:	3c 49 46 43 3e 0a 00                                <IFC>..

000012ba <__c.4404>:
    12ba:	43 61 70 74 75 72 69 6e 67 20 43 6c 6f 73 65 64     Capturing Closed
    12ca:	0a 00                                               ..

000012cc <__c.4402>:
    12cc:	44 6f 6e 65 0a 00                                   Done..

000012d2 <__c.4398>:
    12d2:	65 78 69 74 69 6e 67 2e 2e 2e 0a 00                 exiting.....

000012de <__c.4396>:
    12de:	50 72 65 73 73 20 41 4e 59 20 6b 65 79 20 74 6f     Press ANY key to
    12ee:	20 65 78 69 74 0a 00                                 exit..

000012f5 <__c.4394>:
    12f5:	46 55 4c 4c 20 47 50 49 42 20 42 55 53 20 68 61     FULL GPIB BUS ha
    1305:	6e 64 73 68 61 6b 65 20 6c 6f 67 67 69 6e 67 20     ndshake logging 
    1315:	72 65 71 75 65 73 74 65 64 0a 00                    requested..

00001320 <__c.4392>:
    1320:	43 61 70 74 75 72 69 6e 67 20 47 50 49 42 20 42     Capturing GPIB B
    1330:	55 53 20 74 6f 3a 25 73 0a 00                       US to:%s..

0000133a <__c.4346>:
    133a:	43 61 72 64 20 69 73 20 77 72 69 74 65 20 70 72     Card is write pr
    134a:	6f 74 65 63 74 65 64 0a 00                          otected..

00001353 <__c.4344>:
    1353:	25 73 20 6f 70 65 6e 20 66 61 69 6c 75 72 65 0a     %s open failure.
	...

00001364 <__c.4342>:
    1364:	25 73 20 68 61 64 20 25 64 20 65 72 72 6f 72 73     %s had %d errors
    1374:	0a 00                                               ..

00001376 <__c.4537>:
    1376:	64 65 62 75 67 3d 25 30 34 58 48 0a 00              debug=%04XH..

00001383 <__c.4529>:
    1383:	4e 6f 74 65 3a 20 67 70 69 62 20 70 72 65 66 69     Note: gpib prefi
    1393:	78 20 69 73 20 6f 70 74 69 6f 6e 61 6c 0a 67 70     x is optional.gp
    13a3:	69 62 20 61 64 64 72 65 73 73 65 73 0a 20 20 20     ib addresses.   
    13b3:	44 69 73 70 6c 61 79 20 61 6c 6c 20 64 65 76 69     Display all devi
    13c3:	63 65 20 47 50 49 42 20 62 75 73 20 61 64 64 72     ce GPIB bus addr
    13d3:	65 73 73 65 73 20 61 6e 64 20 50 50 52 20 76 61     esses and PPR va
    13e3:	6c 75 65 73 0a 67 70 69 62 20 63 6f 6e 66 69 67     lues.gpib config
    13f3:	20 5b 2d 76 5d 0a 20 20 20 44 69 73 70 6c 61 79      [-v].   Display
    1403:	20 63 75 72 72 65 6e 74 20 64 72 69 76 65 73 20      current drives 
    1413:	63 6f 6e 66 69 67 75 72 61 74 69 6f 6e 0a 20 20     configuration.  
    1423:	20 2d 76 20 56 65 72 62 6f 73 65 20 2d 20 73 68      -v Verbose - sh
    1433:	6f 77 20 66 75 6c 6c 20 64 65 74 61 69 6c 0a 67     ow full detail.g
    1443:	70 69 62 20 64 65 62 75 67 20 4e 0a 20 20 20 64     pib debug N.   d
    1453:	65 62 75 67 20 6d 65 73 73 61 67 65 20 72 65 70     ebug message rep
    1463:	6f 72 74 69 6e 67 20 73 65 65 20 68 70 64 69 73     orting see hpdis
    1473:	6b 2e 63 66 67 20 66 6f 72 20 64 65 74 61 69 6c     k.cfg for detail
    1483:	73 0a 67 70 69 62 20 65 6c 61 70 73 65 64 0a 67     s.gpib elapsed.g
    1493:	70 69 62 20 65 6c 61 70 73 65 64 5f 72 65 73 65     pib elapsed_rese
    14a3:	74 0a 67 70 69 62 20 69 66 63 0a 67 70 69 62 20     t.gpib ifc.gpib 
    14b3:	70 6c 6f 74 20 66 69 6c 65 6e 61 6d 65 2e 74 78     plot filename.tx
    14c3:	74 0a 67 70 69 62 20 70 6c 6f 74 5f 65 63 68 6f     t.gpib plot_echo
    14d3:	0a 67 70 69 62 20 74 61 73 6b 0a 67 70 69 62 20     .gpib task.gpib 
    14e3:	74 72 61 63 65 20 66 69 6c 65 6e 61 6d 65 2e 74     trace filename.t
    14f3:	78 74 20 5b 42 55 53 5d 0a 20 20 20 44 69 73 70     xt [BUS].   Disp
    1503:	6c 61 79 20 61 63 74 69 76 69 74 79 20 6f 66 20     lay activity of 
    1513:	47 50 49 42 20 62 75 73 20 61 6e 64 20 6c 6f 67     GPIB bus and log
    1523:	20 69 74 0a 20 20 20 42 55 53 20 2d 20 69 6e 63      it.   BUS - inc
    1533:	6c 75 64 65 20 68 61 6e 64 73 68 61 6b 65 20 73     lude handshake s
    1543:	74 61 74 65 73 0a 0a 0a 00                          tates....

0000154c <__c.4527>:
    154c:	67 70 69 62 20 68 65 6c 70 0a 00                    gpib help..

00001557 <__c.4917>:
    1557:	41 4d 49 47 4f 25 64 00                             AMIGO%d.

0000155f <__c.4915>:
    155f:	66 6f 72 6d 61 74 69 6e 67 20 25 73 20 25 6c 64     formating %s %ld
    156f:	20 73 65 63 74 6f 72 73 0a 00                        sectors..

00001579 <__c.4913>:
    1579:	43 61 6e 20 6e 6f 74 20 75 73 65 20 6e 6f 6e 20     Can not use non 
    1589:	32 35 36 20 62 79 74 65 20 73 65 63 74 6f 72 73     256 byte sectors
    1599:	0a 00                                               ..

0000159b <__c.4911>:
    159b:	53 53 38 30 2d 25 64 00                             SS80-%d.

000015a3 <__c.4909>:
    15a3:	66 6f 72 6d 61 74 69 6e 67 20 25 73 20 25 6c 64     formating %s %ld
    15b3:	20 73 65 63 74 6f 72 73 0a 00                        sectors..

000015bd <__c.4907>:
    15bd:	43 61 6e 20 6e 6f 74 20 75 73 65 20 6e 6f 6e 20     Can not use non 
    15cd:	32 35 36 20 62 79 74 65 20 73 65 63 74 6f 72 73     256 byte sectors
    15dd:	0a 00                                               ..

000015df <__c.4890>:
    15df:	57 61 72 6e 69 6e 67 3a 20 25 73 20 42 59 54 45     Warning: %s BYTE
    15ef:	53 5f 50 45 52 5f 53 45 43 54 4f 52 20 21 3d 20     S_PER_SECTOR != 
    15ff:	32 35 36 2c 20 41 64 6a 75 73 74 69 6e 67 20 74     256, Adjusting t
    160f:	6f 20 32 35 36 0a 00                                o 256..

00001616 <__c.4888>:
    1616:	57 61 72 6e 69 6e 67 3a 20 25 73 20 42 59 54 45     Warning: %s BYTE
    1626:	53 5f 50 45 52 5f 42 4c 4f 43 4b 20 21 3d 20 32     S_PER_BLOCK != 2
    1636:	35 36 2c 20 41 64 6a 75 73 74 69 6e 67 20 74 6f     56, Adjusting to
    1646:	20 32 35 36 0a 00                                    256..

0000164c <__c.4875>:
    164c:	68 70 64 69 72 5f 70 61 72 61 6d 65 74 65 72 73     hpdir_parameters
    165c:	20 69 6e 76 61 6c 69 64 20 54 59 50 45 0a 00         invalid TYPE..

0000166b <__c.4839>:
    166b:	61 6c 6c 6f 63 5f 64 65 76 69 63 65 3a 20 69 6e     alloc_device: in
    167b:	76 61 6c 69 64 20 74 79 70 65 3a 25 64 3a 25 73     valid type:%d:%s
    168b:	0a 00                                               ..

0000168d <__c.4831>:
    168d:	61 6c 6c 6f 63 5f 64 65 76 69 63 65 3a 20 44 65     alloc_device: De
    169d:	76 69 63 65 20 74 61 62 6c 65 20 69 73 20 66 75     vice table is fu
    16ad:	6c 6c 0a 00                                         ll..

000016b1 <__c.4818>:
    16b1:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    16c1:	65 3a 28 25 64 29 20 69 6e 76 61 6c 69 64 20 74     e:(%d) invalid t
    16d1:	79 70 65 3a 25 64 3a 25 73 0a 00                    ype:%d:%s..

000016dc <__c.4816>:
    16dc:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    16ec:	65 3a 20 69 6e 64 65 78 3a 20 25 64 20 74 79 70     e: index: %d typ
    16fc:	65 3a 25 64 3a 25 73 2c 20 73 74 61 74 65 20 3d     e:%d:%s, state =
    170c:	3d 20 4e 55 4c 4c 0a 00                             = NULL..

00001714 <__c.4814>:
    1714:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1724:	65 3a 20 69 6e 64 65 78 20 25 64 20 75 6e 69 6e     e: index %d unin
    1734:	69 74 61 6c 69 7a 65 64 20 74 79 70 65 3a 25 64     italized type:%d
    1744:	3a 25 73 0a 00                                      :%s..

00001749 <__c.4812>:
    1749:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1759:	65 3a 20 69 6e 64 65 78 3a 25 64 20 74 79 70 65     e: index:%d type
    1769:	3a 25 64 3a 25 73 2c 20 64 65 76 20 3d 3d 20 4e     :%d:%s, dev == N
    1779:	55 4c 4c 0a 00                                      ULL..

0000177e <__c.4810>:
    177e:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    178e:	65 3a 20 69 6e 64 65 78 3a 25 64 20 61 64 64 72     e: index:%d addr
    179e:	65 73 73 3a 20 25 30 32 58 48 20 6f 75 74 20 6f     ess: %02XH out o
    17ae:	66 20 72 61 6e 67 65 0a 00                          f range..

000017b7 <__c.4808>:
    17b7:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    17c7:	65 3a 28 25 64 29 20 6f 75 74 20 6f 66 20 72 61     e:(%d) out of ra
    17d7:	6e 67 65 0a 00                                      nge..

000017dc <__c.4769>:
    17dc:	0a 00                                               ..

000017de <__c.4764>:
    17de:	0a 00                                               ..

000017e0 <__c.4762>:
    17e0:	20 20 20 20 23 20 42 4c 4f 43 4b 53 20 3d 20 25         # BLOCKS = %
    17f0:	6c 64 0a 00                                         ld..

000017f4 <__c.4760>:
    17f4:	20 20 23 20 48 50 38 35 20 42 41 53 49 43 20 41       # HP85 BASIC A
    1804:	44 44 52 45 53 53 20 3a 44 37 25 64 30 0a 00        DDRESS :D7%d0..

00001813 <__c.4758>:
    1813:	41 4d 49 47 4f 20 25 73 0a 00                       AMIGO %s..

0000181d <__c.4756>:
    181d:	20 20 20 20 23 20 42 4c 4f 43 4b 53 20 3d 20 25         # BLOCKS = %
    182d:	6c 64 0a 00                                         ld..

00001831 <__c.4754>:
    1831:	20 20 23 20 48 50 38 35 20 42 41 53 49 43 20 41       # HP85 BASIC A
    1841:	44 44 52 45 53 53 20 3a 44 37 25 64 30 0a 00        DDRESS :D7%d0..

00001850 <__c.4752>:
    1850:	53 53 38 30 20 25 73 0a 00                          SS80 %s..

00001859 <__c.4749>:
    1859:	43 75 72 72 65 6e 74 20 43 6f 6e 66 69 67 75 72     Current Configur
    1869:	61 74 69 6f 6e 20 53 65 74 74 69 6e 67 73 0a 00     ation Settings..

00001879 <__c.4740>:
    1879:	0a 00                                               ..

0000187b <__c.4735>:
    187b:	0a 00                                               ..

0000187d <__c.4733>:
    187d:	50 52 49 4e 54 45 52 0a 00                          PRINTER..

00001886 <__c.4731>:
    1886:	41 4d 49 47 4f 20 25 73 0a 00                       AMIGO %s..

00001890 <__c.4729>:
    1890:	53 53 38 30 20 25 73 0a 00                          SS80 %s..

00001899 <__c.4726>:
    1899:	44 65 76 69 63 65 20 41 64 64 72 65 73 73 65 73     Device Addresses
    18a9:	0a 00                                               ..

000018ab <__c.4720>:
    18ab:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 2a 2a 2a     Read_Config: ***
    18bb:	2a 2a 2a 20 65 72 72 6f 72 73 28 25 64 29 20 2a     *** errors(%d) *
    18cb:	2a 2a 2a 2a 2a 0a 00                                *****..

000018d2 <__c.4718>:
    18d2:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 72 65 61     Read_Config: rea
    18e2:	64 28 25 64 29 20 6c 69 6e 65 73 0a 00              d(%d) lines..

000018ef <__c.4716>:
    18ef:	4d 69 73 73 69 6e 67 20 45 4e 44 20 73 74 61 74     Missing END stat
    18ff:	65 6d 65 6e 74 20 61 74 20 6c 69 6e 65 3a 25 64     ement at line:%d
    190f:	0a 00                                               ..

00001911 <__c.4712>:
    1911:	55 6e 65 78 70 65 63 74 65 64 20 53 54 41 54 45     Unexpected STATE
    1921:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1931:	0a 00                                               ..

00001933 <__c.4709>:
    1933:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1943:	20 47 45 4d 45 54 52 59 20 74 6f 6b 65 6e 3a 20      GEMETRY token: 
    1953:	25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00     %s, at line:%d..

00001963 <__c.4700>:
    1963:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1973:	20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25      CONFIG token: %
    1983:	73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00        s, at line:%d..

00001992 <__c.4697>:
    1992:	55 6e 65 78 70 65 63 74 65 64 20 48 45 41 44 45     Unexpected HEADE
    19a2:	52 20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20     R CONFIG token: 
    19b2:	25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00     %s, at line:%d..

000019c2 <__c.4688>:
    19c2:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    19d2:	20 53 54 41 52 54 20 74 6f 6b 65 6e 3a 20 25 73      START token: %s
    19e2:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

000019f0 <__c.4680>:
    19f0:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1a00:	56 4f 4c 55 4d 45 20 74 6f 6b 65 6e 3a 20 25 73     VOLUME token: %s
    1a10:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001a1e <__c.4670>:
    1a1e:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1a2e:	55 4e 49 54 20 74 6f 6b 65 6e 3a 20 25 73 2c 20     UNIT token: %s, 
    1a3e:	61 74 20 6c 69 6e 65 3a 25 64 0a 00                 at line:%d..

00001a4a <__c.4653>:
    1a4a:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1a5a:	43 4f 4e 54 52 4f 4c 4c 45 52 20 74 6f 6b 65 6e     CONTROLLER token
    1a6a:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1a7a:	0a 00                                               ..

00001a7c <__c.4645>:
    1a7c:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1a8c:	43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25 73     CONFIG token: %s
    1a9c:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001aaa <__c.4642>:
    1aaa:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1aba:	43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25 73     CONFIG token: %s
    1aca:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001ad8 <__c.4634>:
    1ad8:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1ae8:	53 54 41 52 54 20 74 6f 6b 65 6e 3a 20 25 73 2c     START token: %s,
    1af8:	20 61 74 20 6c 69 6e 65 3a 25 64 0a 00               at line:%d..

00001b05 <__c.4624>:
    1b05:	55 6e 65 78 70 65 63 74 65 64 20 50 52 49 4e 54     Unexpected PRINT
    1b15:	45 52 20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a     ER CONFIG token:
    1b25:	20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a      %s, at line:%d.
	...

00001b36 <__c.4621>:
    1b36:	55 6e 65 78 70 65 63 74 65 64 20 50 52 49 4e 54     Unexpected PRINT
    1b46:	45 52 20 74 6f 6b 65 6e 3a 20 25 73 2c 20 61 74     ER token: %s, at
    1b56:	20 6c 69 6e 65 3a 25 64 0a 00                        line:%d..

00001b60 <__c.4617>:
    1b60:	55 6e 65 78 70 65 63 74 65 64 20 74 6f 6b 65 6e     Unexpected token
    1b70:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1b80:	0a 00                                               ..

00001b82 <__c.4606>:
    1b82:	55 6e 65 78 70 65 63 74 65 64 20 74 6f 6b 65 6e     Unexpected token
    1b92:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1ba2:	0a 00                                               ..

00001ba4 <__c.4603>:
    1ba4:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 6f 70 65     Read_Config: ope
    1bb4:	6e 28 25 73 29 20 66 61 69 6c 65 64 0a 00           n(%s) failed..

00001bc2 <__c.4601>:
    1bc2:	52 65 61 64 69 6e 67 3a 20 25 73 0a 00              Reading: %s..

00001bcf <__c.4582>:
    1bcf:	25 73 0a 00                                         %s..

00001bd3 <__c.4572>:
    1bd3:	25 2d 32 35 73 20 3d 20 25 73 0a 00                 %-25s = %s..

00001bdf <__c.4561>:
    1bdf:	25 2d 32 35 73 20 3d 20 25 38 6c 78 48 20 28 25     %-25s = %8lxH (%
    1bef:	6c 64 29 0a 00                                      ld)..

00001bf4 <__c.3762>:
    1bf4:	46 6f 75 6e 64 20 4d 6f 64 65 6c 3a 20 25 73 0a     Found Model: %s.
	...

00001c05 <__c.3760>:
    1c05:	25 73 20 25 73 0a 00                                %s %s..

00001c0c <__c.3756>:
    1c0c:	45 72 72 6f 72 3a 20 68 70 64 69 72 2e 69 6e 69     Error: hpdir.ini
    1c1c:	20 6e 6f 74 20 66 6f 75 6e 64 21 0a 00               not found!..

00001c29 <__c.4654>:
    1c29:	5b 53 53 38 30 20 55 6e 6b 6e 6f 77 6e 20 53 43     [SS80 Unknown SC
    1c39:	3a 20 25 30 32 58 48 2c 20 6c 69 73 74 65 6e 3a     : %02XH, listen:
    1c49:	25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58     %02XH, talk:%02X
    1c59:	48 5d 0a 00                                         H]..

00001c5d <__c.4652>:
    1c5d:	5b 53 53 38 30 20 53 43 20 55 6e 6b 6e 6f 77 6e     [SS80 SC Unknown
    1c6d:	3a 20 25 30 32 58 48 2c 20 6c 69 73 74 65 6e 3a     : %02XH, listen:
    1c7d:	25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58     %02XH, talk:%02X
    1c8d:	48 5d 0a 00                                         H]..

00001c91 <__c.4650>:
    1c91:	5b 53 53 38 30 20 54 72 61 6e 73 70 61 72 65 6e     [SS80 Transparen
    1ca1:	74 5d 0a 00                                         t]..

00001ca5 <__c.4648>:
    1ca5:	5b 41 6d 69 67 6f 20 43 6c 65 61 72 5d 0a 00        [Amigo Clear]..

00001cb4 <__c.4646>:
    1cb4:	5b 53 53 38 30 20 52 65 70 6f 72 74 20 53 74 61     [SS80 Report Sta
    1cc4:	74 65 5d 0a 00                                      te]..

00001cc9 <__c.4644>:
    1cc9:	5b 53 53 30 30 20 45 78 65 63 75 74 65 20 53 74     [SS00 Execute St
    1cd9:	61 74 65 5d 0a 00                                   ate]..

00001cdf <__c.4642>:
    1cdf:	5b 53 53 38 30 20 43 6f 6d 6d 61 6e 64 20 53 74     [SS80 Command St
    1cef:	61 74 65 5d 0a 00                                   ate]..

00001cf5 <__c.4637>:
    1cf5:	5b 47 50 49 42 20 45 72 72 6f 72 20 52 65 74 75     [GPIB Error Retu
    1d05:	72 6e 20 2d 20 57 72 69 74 65 20 45 52 52 4f 52     rn - Write ERROR
    1d15:	5d 0a 00                                            ]..

00001d18 <__c.4623>:
    1d18:	5b 41 6d 69 67 6f 20 43 6c 65 61 72 5d 0a 00        [Amigo Clear]..

00001d27 <__c.4621>:
    1d27:	5b 47 50 49 42 20 52 65 61 64 20 45 72 72 6f 72     [GPIB Read Error
    1d37:	5d 0a 00                                            ]..

00001d3a <__c.4614>:
    1d3a:	5b 53 53 38 30 20 53 44 43 5d 0a 00                 [SS80 SDC]..

00001d46 <__c.4600>:
    1d46:	5b 53 53 38 30 20 71 73 74 61 74 20 25 30 32 58     [SS80 qstat %02X
    1d56:	5d 0a 00                                            ]..

00001d59 <__c.4598>:
    1d59:	5b 53 53 38 30 20 71 73 74 61 74 20 73 65 6e 64     [SS80 qstat send
    1d69:	20 46 41 49 4c 45 44 5d 0a 00                        FAILED]..

00001d73 <__c.4591>:
    1d73:	5b 53 53 38 30 20 53 65 65 6b 3a 25 30 38 6c 58     [SS80 Seek:%08lX
    1d83:	48 5d 0a 00                                         H]..

00001d87 <__c.4589>:
    1d87:	5b 53 53 38 30 20 53 65 65 6b 20 4f 56 45 52 46     [SS80 Seek OVERF
    1d97:	4c 4f 57 20 61 74 20 25 30 38 6c 58 48 5d 0a 00     LOW at %08lXH]..

00001da7 <__c.4584>:
    1da7:	5b 53 53 38 30 20 54 72 61 6e 73 70 61 72 65 6e     [SS80 Transparen
    1db7:	74 20 43 6f 6d 6d 61 6e 64 2c 20 45 72 72 6f 72     t Command, Error
    1dc7:	20 61 74 20 28 25 64 29 20 6f 66 20 28 25 64 29      at (%d) of (%d)
    1dd7:	20 4f 50 20 43 6f 64 65 73 5d 0a 00                  OP Codes]..

00001de3 <__c.4581>:
    1de3:	5b 53 53 38 30 20 49 6e 76 61 6c 69 64 20 4f 50     [SS80 Invalid OP
    1df3:	20 43 6f 64 65 20 28 25 30 32 58 48 29 5d 0a 00      Code (%02XH)]..

00001e03 <__c.4579>:
    1e03:	5b 53 53 38 30 20 43 61 6e 63 65 6c 20 28 25 64     [SS80 Cancel (%d
    1e13:	29 5d 0a 00                                         )]..

00001e17 <__c.4577>:
    1e17:	5b 53 53 38 30 20 43 68 61 6e 6e 65 6c 20 49 6e     [SS80 Channel In
    1e27:	64 65 70 65 6e 64 65 6e 74 20 43 6c 65 61 72 20     dependent Clear 
    1e37:	28 25 64 29 5d 0a 00                                (%d)]..

00001e3e <__c.4575>:
    1e3e:	5b 53 53 38 30 20 57 72 69 74 65 20 4c 6f 6f 70     [SS80 Write Loop
    1e4e:	62 61 63 6b 20 2d 20 54 4f 44 4f 5d 0a 00           back - TODO]..

00001e5c <__c.4573>:
    1e5c:	5b 53 53 38 30 20 52 65 61 64 20 4c 6f 6f 70 62     [SS80 Read Loopb
    1e6c:	61 63 6b 20 2d 20 54 4f 44 4f 5d 0a 00              ack - TODO]..

00001e79 <__c.4570>:
    1e79:	5b 53 53 38 30 20 48 50 2d 49 42 20 50 61 72 69     [SS80 HP-IB Pari
    1e89:	74 79 20 43 68 65 63 6b 69 6e 67 20 2d 20 54 4f     ty Checking - TO
    1e99:	44 4f 5d 0a 00                                      DO]..

00001e9e <__c.4567>:
    1e9e:	5b 47 50 49 42 20 62 75 66 66 65 72 20 4f 56 45     [GPIB buffer OVE
    1eae:	52 46 4c 4f 57 21 5d 0a 00                          RFLOW!]..

00001eb7 <__c.4565>:
    1eb7:	5b 47 50 49 42 20 52 65 61 64 20 45 52 52 4f 52     [GPIB Read ERROR
    1ec7:	5d 0a 00                                            ]..

00001eca <__c.4556>:
    1eca:	5b 53 53 38 30 20 45 78 65 63 75 74 65 20 43 6f     [SS80 Execute Co
    1eda:	6d 6d 61 6e 64 2c 20 45 72 72 6f 72 20 61 74 20     mmand, Error at 
    1eea:	28 25 64 29 20 6f 66 20 28 25 64 29 20 4f 50 20     (%d) of (%d) OP 
    1efa:	43 6f 64 65 73 5d 0a 00                             Codes]..

00001f02 <__c.4553>:
    1f02:	5b 53 53 38 30 20 49 6e 76 61 6c 69 64 20 4f 50     [SS80 Invalid OP
    1f12:	20 43 6f 64 65 20 28 25 30 32 58 48 29 5d 0a 00      Code (%02XH)]..

00001f22 <__c.4551>:
    1f22:	5b 53 53 38 30 20 49 6e 69 74 69 61 74 65 20 44     [SS80 Initiate D
    1f32:	69 61 67 6e 6f 73 74 69 63 20 2d 20 54 4f 44 4f     iagnostic - TODO
    1f42:	5d 0a 00                                            ]..

00001f45 <__c.4549>:
    1f45:	5b 53 53 38 30 20 52 65 71 75 65 73 74 20 53 74     [SS80 Request St
    1f55:	61 74 75 73 5d 0a 00                                atus]..

00001f5c <__c.4547>:
    1f5c:	5b 53 53 38 30 20 44 6f 6f 72 20 4c 6f 63 6b 20     [SS80 Door Lock 
    1f6c:	2d 20 54 4f 44 4f 5d 0a 00                          - TODO]..

00001f75 <__c.4545>:
    1f75:	5b 53 53 38 30 20 44 6f 6f 72 20 55 6e 4c 6f 63     [SS80 Door UnLoc
    1f85:	6b 20 2d 20 54 4f 44 4f 5d 0a 00                    k - TODO]..

00001f90 <__c.4543>:
    1f90:	5b 53 53 38 30 20 53 65 74 20 53 74 61 74 75 73     [SS80 Set Status
    1fa0:	20 4d 61 73 6b 20 2d 20 54 4f 44 4f 5d 0a 00         Mask - TODO]..

00001faf <__c.4541>:
    1faf:	5b 53 53 38 30 20 49 6e 69 74 69 61 6c 69 7a 65     [SS80 Initialize
    1fbf:	20 4d 65 64 69 61 20 54 4f 44 4f 5d 0a 00            Media TODO]..

00001fcd <__c.4539>:
    1fcd:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 5d 0a     [SS80 Describe].
	...

00001fde <__c.4537>:
    1fde:	5b 53 53 38 30 20 56 61 6c 69 64 61 74 65 20 4b     [SS80 Validate K
    1fee:	65 79 20 2d 20 54 4f 44 4f 5d 0a 00                 ey - TODO]..

00001ffa <__c.4535>:
    1ffa:	5b 53 53 38 30 20 52 65 6c 65 61 73 65 20 44 65     [SS80 Release De
    200a:	6e 69 65 64 20 4e 4f 2d 4f 50 5d 0a 00              nied NO-OP]..

00002017 <__c.4533>:
    2017:	5b 53 53 38 30 20 52 65 6c 65 61 73 65 20 4e 4f     [SS80 Release NO
    2027:	2d 4f 50 5d 0a 00                                   -OP]..

0000202d <__c.4531>:
    202d:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    203d:	20 56 65 72 69 66 79 20 2d 20 54 4f 44 4f 5d 0a      Verify - TODO].
	...

0000204e <__c.4529>:
    204e:	5b 53 53 38 30 20 53 65 74 20 52 65 74 75 72 6e     [SS80 Set Return
    205e:	20 41 64 64 72 65 73 73 69 6e 67 20 2d 20 54 4f      Addressing - TO
    206e:	44 4f 5d 0a 00                                      DO]..

00002073 <__c.4527>:
    2073:	5b 53 53 38 30 20 53 65 74 20 52 65 6c 65 61 73     [SS80 Set Releas
    2083:	65 20 4e 4f 2d 4f 50 5d 0a 00                       e NO-OP]..

0000208d <__c.4525>:
    208d:	5b 53 53 38 30 20 53 65 74 20 52 50 53 20 4e 4f     [SS80 Set RPS NO
    209d:	2d 4f 50 5d 0a 00                                   -OP]..

000020a3 <__c.4523>:
    20a3:	5b 53 53 38 30 20 4e 4f 2d 4f 50 5d 0a 00           [SS80 NO-OP]..

000020b1 <__c.4521>:
    20b1:	5b 53 53 38 30 20 53 65 74 20 4c 65 6e 67 74 68     [SS80 Set Length
    20c1:	3a 28 25 30 38 6c 58 48 29 5d 0a 00                 :(%08lXH)]..

000020cd <__c.4519>:
    20cd:	5b 53 53 38 30 20 53 65 74 20 41 64 64 72 65 73     [SS80 Set Addres
    20dd:	73 3a 28 25 30 38 6c 58 48 29 5d 0a 00              s:(%08lXH)]..

000020ea <__c.4517>:
    20ea:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    20fa:	20 57 72 69 74 65 5d 0a 00                           Write]..

00002103 <__c.4514>:
    2103:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2113:	20 52 65 61 64 5d 0a 00                              Read]..

0000211b <__c.4512>:
    211b:	5b 53 53 38 30 20 53 65 74 20 56 6f 6c 75 6d 65     [SS80 Set Volume
    212b:	3a 20 28 25 64 29 5d 0a 00                          : (%d)]..

00002134 <__c.4509>:
    2134:	5b 53 53 38 30 20 53 65 74 20 55 6e 69 74 3a 28     [SS80 Set Unit:(
    2144:	25 64 29 5d 0a 00                                   %d)]..

0000214a <__c.4507>:
    214a:	5b 47 50 49 42 20 62 75 66 66 65 72 20 4f 56 45     [GPIB buffer OVE
    215a:	52 46 4c 4f 57 21 5d 0a 00                          RFLOW!]..

00002163 <__c.4505>:
    2163:	5b 53 53 38 30 20 43 6f 6d 6d 61 6e 64 20 53 74     [SS80 Command St
    2173:	61 74 65 20 47 50 49 42 20 52 65 61 64 20 45 52     ate GPIB Read ER
    2183:	52 4f 52 5d 0a 00                                   ROR]..

00002189 <__c.4496>:
    2189:	5b 53 53 38 30 20 56 6f 6c 75 6d 65 3a 25 64 20     [SS80 Volume:%d 
    2199:	69 6e 76 61 6c 69 64 5d 0a 00                       invalid]..

000021a3 <__c.4491>:
    21a3:	5b 53 53 38 30 20 55 4e 49 54 3a 25 64 20 69 6e     [SS80 UNIT:%d in
    21b3:	76 61 6c 69 64 5d 0a 00                             valid]..

000021bb <__c.4486>:
    21bb:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 56     [SS80 Describe V
    21cb:	6f 6c 75 6d 65 20 46 41 49 4c 45 44 5d 0a 00        olume FAILED]..

000021da <__c.4484>:
    21da:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 55     [SS80 Describe U
    21ea:	6e 69 74 20 46 41 49 4c 45 44 5d 0a 00              nit FAILED]..

000021f7 <__c.4482>:
    21f7:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 43     [SS80 Describe C
    2207:	6f 6e 74 72 6f 6c 6c 65 72 20 46 41 49 4c 45 44     ontroller FAILED
    2217:	5d 0a 00                                            ]..

0000221a <__c.4480>:
    221a:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 5d 0a     [SS80 Describe].
	...

0000222b <__c.4472>:
    222b:	5b 53 53 38 30 20 53 65 6e 64 20 53 74 61 74 75     [SS80 Send Statu
    223b:	73 20 46 41 49 4c 45 44 5d 0a 00                    s FAILED]..

00002246 <__c.4470>:
    2246:	5b 53 53 38 30 20 53 65 6e 64 20 53 74 61 74 75     [SS80 Send Statu
    2256:	73 5d 0a 00                                         s]..

0000225a <__c.4460>:
    225a:	20 20 20 20 25 64 3a 25 73 0a 00                        %d:%s..

00002265 <__c.4458>:
    2265:	25 73 3a 0a 00                                      %s:..

0000226a <__c.4433>:
    226a:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    227a:	20 57 72 69 74 65 20 57 72 6f 74 65 20 54 6f 74      Write Wrote Tot
    228a:	61 6c 28 25 6c 78 48 29 5d 0a 00                    al(%lxH)]..

00002295 <__c.4431>:
    2295:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    22a5:	20 57 72 69 74 65 20 44 49 44 20 4e 4f 54 20 46      Write DID NOT F
    22b5:	49 4e 49 53 48 5d 0a 00                             INISH]..

000022bd <__c.4427>:
    22bd:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    22cd:	20 57 72 69 74 65 20 77 72 6f 74 65 28 25 30 32      Write wrote(%02
    22dd:	58 48 29 5d 0a 00                                   XH)]..

000022e3 <__c.4425>:
    22e3:	5b 44 69 73 6b 20 57 72 69 74 65 20 45 72 72 6f     [Disk Write Erro
    22f3:	72 5d 0a 00                                         r]..

000022f7 <__c.4421>:
    22f7:	5b 47 50 49 42 20 52 65 61 64 20 45 72 72 6f 72     [GPIB Read Error
    2307:	5d 0a 00                                            ]..

0000230a <__c.4419>:
    230a:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    231a:	20 57 72 69 74 65 20 61 74 20 25 30 38 6c 58 48      Write at %08lXH
    232a:	28 25 6c 58 48 29 5d 0a 00                          (%lXH)]..

00002333 <__c.4407>:
    2333:	5b 53 53 38 30 20 42 75 66 66 65 72 65 64 20 52     [SS80 Buffered R
    2343:	65 61 64 20 54 6f 74 61 6c 28 25 6c 58 48 29 20     ead Total(%lXH) 
    2353:	62 79 74 65 73 5d 0a 00                             bytes]..

0000235b <__c.4405>:
    235b:	5b 53 53 38 30 20 42 75 66 66 65 72 65 64 20 52     [SS80 Buffered R
    236b:	65 61 64 20 44 49 44 20 4e 4f 54 20 46 49 4e 49     ead DID NOT FINI
    237b:	53 48 5d 0a 00                                      SH]..

00002380 <__c.4400>:
    2380:	5b 53 53 38 30 20 47 50 49 42 20 57 72 69 74 65     [SS80 GPIB Write
    2390:	20 45 72 72 6f 72 5d 0a 00                           Error]..

00002399 <__c.4398>:
    2399:	5b 53 53 38 30 20 44 69 73 6b 20 52 65 61 64 20     [SS80 Disk Read 
    23a9:	45 72 72 6f 72 5d 0a 00                             Error]..

000023b1 <__c.4396>:
    23b1:	5b 53 53 38 30 20 44 69 73 6b 20 52 65 61 64 20     [SS80 Disk Read 
    23c1:	25 30 32 58 48 20 62 79 74 65 73 5d 0a 00           %02XH bytes]..

000023cf <__c.4394>:
    23cf:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    23df:	20 52 65 61 64 20 61 74 20 25 30 38 6c 58 48 28      Read at %08lXH(
    23ef:	25 6c 58 48 29 5d 0a 00                             %lXH)]..

000023f7 <__c.4377>:
    23f7:	5b 53 53 38 30 20 45 58 45 43 20 73 74 61 74 65     [SS80 EXEC state
    2407:	3a 25 64 20 65 72 72 6f 72 5d 0a 00                 :%d error]..

00002413 <__c.4361>:
    2413:	5b 53 53 38 30 20 25 30 32 58 48 20 49 4e 49 54     [SS80 %02XH INIT
    2423:	5d 0a 00                                            ]..

00002426 <__c.4468>:
    2426:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    2436:	65 71 75 65 73 74 20 4c 6f 67 69 63 61 6c 20 41     equest Logical A
    2446:	64 64 72 65 73 73 5d 0a 00                          ddress]..

0000244f <__c.4465>:
    244f:	5b 41 4d 49 47 4f 20 45 78 69 63 75 74 65 20 52     [AMIGO Exicute R
    245f:	65 71 75 65 73 74 20 53 74 61 74 75 73 20 55 6e     equest Status Un
    246f:	62 75 66 66 65 72 65 64 5d 0a 00                    buffered]..

0000247a <__c.4462>:
    247a:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    248a:	65 71 75 65 73 74 20 53 74 61 74 75 73 20 42 75     equest Status Bu
    249a:	66 66 65 72 65 64 5d 0a 00                          ffered]..

000024a3 <__c.4457>:
    24a3:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 57     [AMIGO Execute W
    24b3:	72 69 74 65 20 42 75 66 66 65 72 65 64 5d 0a 00     rite Buffered]..

000024c3 <__c.4454>:
    24c3:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 49     [AMIGO Execute I
    24d3:	6e 69 74 69 61 6c 69 7a 65 5d 0a 00                 nitialize]..

000024df <__c.4451>:
    24df:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 57     [AMIGO Execute W
    24ef:	72 69 74 65 20 55 6e 62 75 66 66 65 72 65 64 5d     rite Unbuffered]
    24ff:	0a 00                                               ..

00002501 <__c.4448>:
    2501:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    2511:	65 61 64 20 42 75 66 66 65 72 65 64 5d 0a 00        ead Buffered]..

00002520 <__c.4445>:
    2520:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    2530:	65 61 64 20 55 6e 62 75 66 66 65 72 65 64 5d 0a     ead Unbuffered].
	...

00002541 <__c.4442>:
    2541:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 43     [AMIGO Execute C
    2551:	6f 6c 64 20 4c 6f 61 64 20 52 65 61 64 5d 0a 00     old Load Read]..

00002561 <__c.4438>:
    2561:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 28 25     [AMIGO Execute(%
    2571:	30 32 58 48 29 3a 20 6c 69 73 74 65 6e 3a 25 30     02XH): listen:%0
    2581:	32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58 48 5d     2XH, talk:%02XH]
    2591:	0a 00                                               ..

00002593 <__c.4433>:
    2593:	5b 41 4d 49 47 4f 20 46 6f 72 6d 61 74 5d 0a 00     [AMIGO Format]..

000025a3 <__c.4430>:
    25a3:	5b 41 4d 49 47 4f 20 52 65 61 64 20 42 75 66 66     [AMIGO Read Buff
    25b3:	65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00        ered Command]..

000025c2 <__c.4428>:
    25c2:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 53     [AMIGO Request S
    25d2:	74 61 74 75 73 20 55 6e 62 75 66 66 65 72 65 64     tatus Unbuffered
    25e2:	20 43 6f 6d 6d 61 6e 64 5d 0a 00                     Command]..

000025ed <__c.4426>:
    25ed:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 42 75 66     [AMIGO Write Buf
    25fd:	66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00     fered Command]..

0000260d <__c.4424>:
    260d:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 4c     [AMIGO Request L
    261d:	6f 67 69 63 61 6c 20 41 64 64 72 65 73 73 20 43     ogical Address C
    262d:	6f 6d 6d 61 6e 64 5d 0a 00                          ommand]..

00002636 <__c.4422>:
    2636:	5b 41 4d 49 47 4f 20 49 6e 69 74 69 61 6c 69 7a     [AMIGO Initializ
    2646:	65 20 43 6f 6d 6d 61 6e 64 5d 0a 00                 e Command]..

00002652 <__c.4420>:
    2652:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 55 6e 62     [AMIGO Write Unb
    2662:	75 66 66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d     uffered Command]
    2672:	0a 00                                               ..

00002674 <__c.4418>:
    2674:	5b 41 4d 49 47 4f 20 56 65 72 69 66 79 5d 0a 00     [AMIGO Verify]..

00002684 <__c.4415>:
    2684:	5b 41 4d 49 47 4f 20 52 65 61 64 20 55 6e 62 75     [AMIGO Read Unbu
    2694:	66 66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a     ffered Command].
	...

000026a5 <__c.4413>:
    26a5:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 53     [AMIGO Request S
    26b5:	74 61 74 75 73 20 42 75 66 66 65 72 65 64 20 43     tatus Buffered C
    26c5:	6f 6d 6d 61 6e 64 5d 0a 00                          ommand]..

000026ce <__c.4411>:
    26ce:	5b 41 4d 49 47 4f 20 53 65 65 6b 20 6c 65 6e 3d     [AMIGO Seek len=
    26de:	36 5d 0a 00                                         6]..

000026e2 <__c.4408>:
    26e2:	5b 41 4d 49 47 4f 20 53 65 65 6b 20 6c 65 6e 3d     [AMIGO Seek len=
    26f2:	35 5d 0a 00                                         5]..

000026f6 <__c.4405>:
    26f6:	5b 41 4d 49 47 4f 20 43 6f 6c 64 20 4c 6f 61 64     [AMIGO Cold Load
    2706:	20 52 65 61 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00      Read Command]..

00002716 <__c.4402>:
    2716:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 28 25     [AMIGO Command(%
    2726:	30 32 58 48 29 3a 20 47 50 49 42 20 72 65 61 64     02XH): GPIB read
    2736:	20 62 79 74 65 73 3a 25 30 32 58 48 5d 0a 00         bytes:%02XH]..

00002745 <__c.4400>:
    2745:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO Command:G
    2755:	50 49 42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a     PIB read error].
	...

00002766 <__c.4398>:
    2766:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO Command:G
    2776:	50 49 42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a     PIB read error].
	...

00002787 <__c.4396>:
    2787:	5b 41 4d 49 47 4f 5f 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO_Command:G
    2797:	50 49 42 20 77 72 69 74 65 20 65 72 72 6f 72 5d     PIB write error]
    27a7:	0a 00                                               ..

000027a9 <__c.4394>:
    27a9:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 28 25     [AMIGO Command(%
    27b9:	30 32 58 48 29 3a 20 6c 69 73 74 65 6e 3a 25 30     02XH): listen:%0
    27c9:	32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58 48 5d     2XH, talk:%02XH]
    27d9:	0a 00                                               ..

000027db <__c.4382>:
    27db:	5b 45 20 20 20 41 6d 69 67 6f 20 45 52 52 4f 52     [E   Amigo ERROR
    27eb:	20 73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58      secondary: %02X
    27fb:	48 2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20     H, state:%02XH, 
    280b:	6c 69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c     listening:%02XH,
    281b:	20 74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a      talking:%02XH].
	...

0000282c <__c.4380>:
    282c:	5b 55 4e 54 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [UNT Amigo TODO 
    283c:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    284c:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    285c:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    286c:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

0000287c <__c.4378>:
    287c:	5b 54 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [T   Amigo TODO 
    288c:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    289c:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    28ac:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    28bc:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

000028cc <__c.4376>:
    28cc:	5b 4c 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [L   Amigo TODO 
    28dc:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    28ec:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    28fc:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    290c:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

0000291c <__c.4371>:
    291c:	5b 55 20 41 6d 69 67 6f 20 54 4f 44 4f 20 73 65     [U Amigo TODO se
    292c:	63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48 2c 20     condary: %02XH, 
    293c:	73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f 70 63     state:%02XH, opc
    294c:	6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e 3a 25     ode:%02XH, len:%
    295c:	33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a 25 30     3d, listening:%0
    296c:	32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25 30 32     2XH, talking:%02
    297c:	58 48 5d 0a 00                                      XH]..

00002981 <__c.4369>:
    2981:	5b 55 4e 54 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [UNT Amigo TODO 
    2991:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    29a1:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    29b1:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    29c1:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    29d1:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    29e1:	30 32 58 48 5d 0a 00                                02XH]..

000029e8 <__c.4367>:
    29e8:	5b 54 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [T   Amigo TODO 
    29f8:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2a08:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2a18:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2a28:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2a38:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2a48:	30 32 58 48 5d 0a 00                                02XH]..

00002a4f <__c.4365>:
    2a4f:	5b 4c 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [L   Amigo TODO 
    2a5f:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2a6f:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2a7f:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2a8f:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2a9f:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2aaf:	30 32 58 48 5d 0a 00                                02XH]..

00002ab6 <__c.4358>:
    2ab6:	5b 41 4d 49 47 4f 20 43 6c 65 61 72 5d 0a 00        [AMIGO Clear]..

00002ac5 <__c.4345>:
    2ac5:	5b 44 53 4a 20 25 30 32 58 48 5d 0a 00              [DSJ %02XH]..

00002ad2 <__c.4343>:
    2ad2:	5b 41 49 4d 47 4f 3a 20 44 53 4a 20 73 65 6e 64     [AIMGO: DSJ send
    2ae2:	20 66 61 69 6c 65 64 5d 0a 00                        failed]..

00002aec <__c.4336>:
    2aec:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 47 50 49     [AMIGO Write GPI
    2afc:	42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a 00        B read error]..

00002b0b <__c.4329>:
    2b0b:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    2b1b:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00002b25 <__c.4322>:
    2b25:	5b 41 4d 49 47 4f 20 46 6f 72 6d 61 74 20 44 6f     [AMIGO Format Do
    2b35:	6e 65 5d 0a 00                                      ne]..

00002b3a <__c.4318>:
    2b3a:	5b 41 4d 49 47 4f 20 66 6f 72 6d 61 74 5d 0a 00     [AMIGO format]..

00002b4a <__c.4277>:
    2b4a:	5b 41 4d 49 47 4f 20 25 73 2c 20 50 3a 25 30 38     [AMIGO %s, P:%08
    2b5a:	6c 78 48 2c 20 55 3a 25 64 20 43 3a 25 64 20 48     lxH, U:%d C:%d H
    2b6a:	3a 25 64 20 53 3a 25 64 5d 0a 00                    :%d S:%d]..

00002b75 <__c.4307>:
    2b75:	5b 41 4d 49 47 4f 20 76 65 72 69 66 79 20 50 3a     [AMIGO verify P:
    2b85:	25 30 38 6c 58 48 2c 20 73 65 63 74 6f 72 73 3a     %08lXH, sectors:
    2b95:	25 30 34 58 48 5d 0a 00                             %04XH]..

00002b9d <__c.4284>:
    2b9d:	5b 41 4d 49 47 4f 20 25 73 20 70 6f 73 20 4f 56     [AMIGO %s pos OV
    2bad:	45 52 46 4c 4f 57 5d 0a 00                          ERFLOW]..

00002bb6 <__c.4270>:
    2bb6:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    2bc6:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00002bd0 <__c.4268>:
    2bd0:	5b 41 4d 49 47 4f 20 73 65 6e 64 20 73 74 61 74     [AMIGO send stat
    2be0:	75 73 5d 0a 00                                      us]..

00002be5 <__c.4262>:
    2be5:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    2bf5:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00002bff <__c.4260>:
    2bff:	5b 41 4d 49 47 4f 20 73 65 6e 64 20 6c 6f 67 69     [AMIGO send logi
    2c0f:	63 61 6c 20 61 64 64 72 65 73 73 5d 0a 00           cal address]..

00002c1d <__c.4254>:
    2c1d:	5b 41 4d 49 47 4f 20 72 65 71 75 65 73 74 20 73     [AMIGO request s
    2c2d:	74 61 74 75 73 5d 0a 00                             tatus]..

00002c35 <__c.4258>:
    2c35:	5b 53 43 20 50 52 49 4e 54 45 52 20 54 61 6c 6b     [SC PRINTER Talk
    2c45:	3a 20 25 30 32 58 48 5d 0a 00                       : %02XH]..

00002c4f <__c.4256>:
    2c4f:	5b 53 43 20 50 52 49 4e 54 45 52 20 4c 69 73 74     [SC PRINTER List
    2c5f:	65 6e 3a 20 25 30 32 58 48 5d 0a 00                 en: %02XH]..

00002c6b <__c.4251>:
    2c6b:	25 30 38 6c 64 0d 00                                %08ld..

00002c72 <__c.4245>:
    2c72:	77 72 69 74 65 20 66 61 69 6c 65 64 3a 20 77 61     write failed: wa
    2c82:	6e 74 65 64 20 25 64 2c 20 67 6f 74 3a 25 64 0a     nted %d, got:%d.
	...

00002c93 <__c.4239>:
    2c93:	0a 44 4f 4e 45 3a 20 25 30 38 6c 64 0a 00           .DONE: %08ld..

00002ca1 <__c.4237>:
    2ca1:	45 52 52 4f 52 20 64 75 72 72 69 6e 67 20 77 72     ERROR durring wr
    2cb1:	69 74 65 0a 00                                      ite..

00002cb6 <__c.4231>:
    2cb6:	65 78 69 74 69 6e 67 2e 2e 2e 0a 00                 exiting.....

00002cc2 <__c.4229>:
    2cc2:	43 61 70 74 75 72 69 6e 67 20 70 6c 6f 74 20 74     Capturing plot t
    2cd2:	6f 3a 25 73 0a 00                                   o:%s..

00002cd8 <__c.4227>:
    2cd8:	2f 70 6c 6f 74 2d 25 30 32 64 25 73 25 30 34 64     /plot-%02d%s%04d
    2ce8:	2d 25 30 32 64 25 30 32 64 25 30 32 64 2e 70 6c     -%02d%02d%02d.pl
    2cf8:	74 00                                               t.

00002cfa <__c.4672>:
    2cfa:	09 46 6f 72 6d 61 74 74 69 6e 67 3a 20 77 72 6f     .Formatting: wro
    2d0a:	74 65 20 25 6c 64 20 73 65 63 74 6f 72 73 0a 00     te %ld sectors..

00002d1a <__c.4670>:
    2d1a:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    2d2a:	3a 20 73 65 63 74 6f 72 73 20 69 73 20 30 0a 00     : sectors is 0..

00002d3a <__c.4668>:
    2d3a:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    2d4a:	3a 20 64 69 72 73 65 63 74 6f 72 73 20 69 73 20     : dirsectors is 
    2d5a:	30 0a 00                                            0..

00002d5d <__c.4666>:
    2d5d:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    2d6d:	3a 20 6c 69 66 6c 61 62 65 6c 20 69 73 20 65 6d     : liflabel is em
    2d7d:	70 74 79 0a 00                                      pty..

00002d82 <__c.4664>:
    2d82:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    2d92:	3a 20 6c 69 66 69 6d 61 67 65 6e 61 6d 65 20 69     : lifimagename i
    2da2:	73 20 65 6d 70 74 79 0a 00                          s empty..

00002dab <__c.4651>:
    2dab:	72 65 6e 61 6d 65 64 3a 20 25 31 30 73 20 74 6f     renamed: %10s to
    2dbb:	20 25 31 30 73 0a 00                                 %10s..

00002dc2 <__c.4649>:
    2dc2:	6c 69 66 5f 72 65 6e 61 6d 65 3a 5b 25 73 5d 20     lif_rename:[%s] 
    2dd2:	6c 69 66 20 6e 61 6d 65 3a 5b 25 73 5d 20 6e 6f     lif name:[%s] no
    2de2:	74 20 66 6f 75 6e 64 0a 00                          t found..

00002deb <__c.4647>:
    2deb:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    2dfb:	20 6e 65 77 20 6c 69 66 6e 61 6d 65 20 63 6f 6e      new lifname con
    2e0b:	74 61 69 6e 73 20 62 61 64 20 63 68 61 72 61 63     tains bad charac
    2e1b:	74 65 72 73 0a 00                                   ters..

00002e21 <__c.4645>:
    2e21:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    2e31:	20 6e 65 77 20 6c 69 66 6e 61 6d 65 20 69 73 20      new lifname is 
    2e41:	65 6d 70 74 79 0a 00                                empty..

00002e48 <__c.4643>:
    2e48:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    2e58:	20 6f 6c 64 20 6c 69 66 6e 61 6d 65 20 69 73 20      old lifname is 
    2e68:	65 6d 70 74 79 0a 00                                empty..

00002e6f <__c.4641>:
    2e6f:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    2e7f:	20 6c 69 66 69 6d 61 67 65 6e 61 6d 65 20 69 73      lifimagename is
    2e8f:	20 65 6d 70 74 79 0a 00                              empty..

00002e97 <__c.4632>:
    2e97:	44 65 6c 65 74 65 64 3a 20 25 31 30 73 0a 00        Deleted: %10s..

00002ea6 <__c.4630>:
    2ea6:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 20 6c     LIF image:[%s] l
    2eb6:	69 66 20 6e 61 6d 65 3a 5b 25 73 5d 20 6e 6f 74     if name:[%s] not
    2ec6:	20 66 6f 75 6e 64 0a 00                              found..

00002ece <__c.4628>:
    2ece:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    2ede:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 0a 00        LIF name:[%s]..

00002eed <__c.4626>:
    2eed:	6c 69 66 5f 64 65 6c 5f 66 69 6c 65 3a 20 6c 69     lif_del_file: li
    2efd:	66 6e 61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00     fname is empty..

00002f0d <__c.4624>:
    2f0d:	6c 69 66 5f 64 65 6c 5f 66 69 6c 65 3a 20 6c 69     lif_del_file: li
    2f1d:	66 69 6d 61 67 65 6e 61 6d 65 20 69 73 20 65 6d     fimagename is em
    2f2d:	70 74 79 0a 00                                      pty..

00002f32 <__c.4616>:
    2f32:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

00002f40 <__c.4611>:
    2f40:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

00002f4e <__c.4609>:
    2f4e:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    2f5e:	6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65 20     not enough free 
    2f6e:	73 70 61 63 65 20 66 6f 72 3a 5b 25 73 5d 0a 00     space for:[%s]..

00002f7e <__c.4607>:
    2f7e:	46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 3a 25     File not found:%
    2f8e:	73 0a 00                                            s..

00002f91 <__c.4605>:
    2f91:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    2fa1:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 2c 20 75     LIF name:[%s], u
    2fb1:	73 65 72 20 66 69 6c 65 3a 5b 25 73 5d 0a 00        ser file:[%s]..

00002fc0 <__c.4603>:
    2fc0:	6c 69 66 5f 61 64 64 3a 20 75 73 65 72 66 69 6c     lif_add: userfil
    2fd0:	65 20 69 73 20 65 6d 70 74 79 0a 00                 e is empty..

00002fdc <__c.4601>:
    2fdc:	6c 69 66 5f 61 64 64 3a 20 6c 69 66 6e 61 6d 65     lif_add: lifname
    2fec:	20 69 73 20 65 6d 70 74 79 0a 00                     is empty..

00002ff7 <__c.4599>:
    2ff7:	6c 69 66 5f 61 64 64 3a 20 6c 69 66 69 6d 61 67     lif_add: lifimag
    3007:	65 6e 61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00     ename is empty..

00003017 <__c.4582>:
    3017:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

00003025 <__c.4577>:
    3025:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

00003033 <__c.4575>:
    3033:	46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 3a 25     File not found:%
    3043:	73 0a 00                                            s..

00003046 <__c.4573>:
    3046:	4c 49 46 20 69 6d 61 67 65 20 6e 6f 74 20 66 6f     LIF image not fo
    3056:	75 6e 64 3a 25 73 0a 00                             und:%s..

0000305e <__c.4556>:
    305e:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

0000306c <__c.4553>:
    306c:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    307c:	5f 61 73 5f 61 73 63 69 69 3a 20 77 72 69 74 65     _as_ascii: write
    308c:	20 65 72 72 6f 72 0a 00                              error..

00003094 <__c.4545>:
    3094:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

000030a2 <__c.4543>:
    30a2:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    30b2:	5f 61 73 5f 61 73 63 69 69 3a 20 77 72 69 74 65     _as_ascii: write
    30c2:	20 65 72 72 6f 72 0a 00                              error..

000030ca <__c.4540>:
    30ca:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    30da:	5f 61 73 5f 61 73 63 69 69 3a 20 75 6e 65 78 70     _as_ascii: unexp
    30ea:	65 63 74 65 64 20 63 6f 6e 74 72 6f 6c 20 62 79     ected control by
    30fa:	74 65 3a 5b 25 30 32 58 48 5d 20 40 20 6f 66 66     te:[%02XH] @ off
    310a:	73 65 74 3a 20 25 38 6c 78 2c 20 69 6e 64 3a 25     set: %8lx, ind:%
    311a:	30 32 58 48 0a 00                                   02XH..

00003120 <__c.4538>:
    3120:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    3130:	5f 61 73 5f 61 73 63 69 69 3a 20 73 74 72 69 6e     _as_ascii: strin
    3140:	67 20 74 6f 6f 20 62 69 67 20 73 69 7a 65 20 3d     g too big size =
    3150:	20 25 64 0a 00                                       %d..

00003155 <__c.4534>:
    3155:	45 78 74 72 61 63 74 69 6e 67 3a 20 25 73 0a 00     Extracting: %s..

00003165 <__c.4532>:
    3165:	46 69 6c 65 20 25 73 20 68 61 73 20 77 72 6f 6e     File %s has wron
    3175:	67 20 74 79 70 65 3a 5b 25 30 34 58 48 5d 20 65     g type:[%04XH] e
    3185:	78 70 65 63 74 65 64 20 30 78 45 30 31 30 2e 2e     xpected 0xE010..
    3195:	30 78 45 30 31 33 0a 00                             0xE013..

0000319d <__c.4530>:
    319d:	4c 49 46 20 46 69 6c 65 20 6e 6f 74 20 66 6f 75     LIF File not fou
    31ad:	6e 64 3a 25 73 0a 00                                nd:%s..

000031b4 <__c.4528>:
    31b4:	4c 49 46 20 69 6d 61 67 65 20 6e 6f 74 20 66 6f     LIF image not fo
    31c4:	75 6e 64 3a 25 73 0a 00                             und:%s..

000031cc <__c.4504>:
    31cc:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

000031da <__c.4502>:
    31da:	46 69 6c 65 20 53 65 63 74 6f 72 73 3a 20 20 20     File Sectors:   
    31ea:	20 20 25 34 6c 78 48 0a 00                            %4lxH..

000031f3 <__c.4500>:
    31f3:	46 69 72 73 74 20 53 65 63 74 6f 72 3a 20 20 20     First Sector:   
    3203:	20 20 25 34 6c 78 48 0a 00                            %4lxH..

0000320c <__c.4498>:
    320c:	49 6e 64 65 78 3a 20 20 20 20 20 20 20 20 20 20     Index:          
    321c:	20 20 25 34 64 0a 00                                  %4d..

00003223 <__c.4496>:
    3223:	4e 61 6d 65 3a 20 20 20 20 20 20 20 20 20 20 20     Name:           
    3233:	20 20 20 25 73 0a 00                                   %s..

0000323a <__c.4494>:
    323a:	4e 65 77 20 44 69 72 65 63 74 6f 72 79 20 49 6e     New Directory In
    324a:	66 6f 72 6d 61 74 69 6f 6e 20 41 46 54 45 52 20     formation AFTER 
    325a:	77 72 69 74 65 0a 00                                write..

00003261 <__c.4492>:
    3261:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    3271:	6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65 20     not enough free 
    3281:	73 70 61 63 65 20 66 6f 72 3a 5b 25 73 5d 0a 00     space for:[%s]..

00003291 <__c.4490>:
    3291:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    32a1:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 2c 20 75     LIF name:[%s], u
    32b1:	73 65 72 20 66 69 6c 65 3a 5b 25 73 5d 0a 00        ser file:[%s]..

000032c0 <__c.4488>:
    32c0:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    32d0:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 75 73 65 72     le_as_e010: user
    32e0:	66 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 0a 00     file not found..

000032f0 <__c.4486>:
    32f0:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    3300:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 75 73 65 72     le_as_e010: user
    3310:	66 69 6c 65 20 69 73 20 65 6d 70 74 79 0a 00        file is empty..

0000331f <__c.4484>:
    331f:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    332f:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 6c 69 66 6e     le_as_e010: lifn
    333f:	61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00           ame is empty..

0000334d <__c.4482>:
    334d:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    335d:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 6c 69 66 69     le_as_e010: lifi
    336d:	6d 61 67 65 6e 61 6d 65 20 69 73 20 65 6d 70 74     magename is empt
    337d:	79 0a 00                                            y..

00003380 <__c.4468>:
    3380:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

0000338e <__c.4466>:
    338e:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

0000339c <__c.4461>:
    339c:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

000033aa <__c.4444>:
    33aa:	45 78 70 65 63 74 65 64 20 73 65 63 74 6f 72 20     Expected sector 
    33ba:	62 6f 75 6e 64 72 79 2c 20 6f 66 66 73 65 74 3a     boundry, offset:
    33ca:	25 64 0a 00                                         %d..

000033ce <__c.4427>:
    33ce:	6c 69 66 5f 65 30 31 30 5f 64 61 70 5f 73 65 63     lif_e010_dap_sec
    33de:	74 6f 72 3a 20 65 78 70 65 63 74 65 64 20 73 65     tor: expected se
    33ee:	63 74 6f 72 20 62 6f 75 6e 64 72 79 3a 20 6f 66     ctor boundry: of
    33fe:	66 73 65 74 3a 25 64 0a 00                          fset:%d..

00003407 <__c.4413>:
    3407:	6c 69 66 5f 66 69 6e 64 5f 66 69 6c 65 3a 5b 25     lif_find_file:[%
    3417:	73 5d 20 6c 69 66 6c 61 62 65 6c 20 74 6f 6f 20     s] liflabel too 
    3427:	62 69 67 0a 00                                      big..

0000342c <__c.4411>:
    342c:	6c 69 66 5f 66 69 6e 64 5f 66 69 6c 65 3a 5b 25     lif_find_file:[%
    343c:	73 5d 20 69 6e 76 61 6c 69 64 20 63 68 61 72 61     s] invalid chara
    344c:	63 74 65 72 73 0a 00                                cters..

00003453 <__c.4404>:
    3453:	25 38 6c 64 20 46 72 65 65 20 73 65 63 74 6f 72     %8ld Free sector
    3463:	73 0a 00                                            s..

00003466 <__c.4402>:
    3466:	25 38 6c 64 20 55 73 65 64 20 73 65 63 74 6f 72     %8ld Used sector
    3476:	73 0a 00                                            s..

00003479 <__c.4400>:
    3479:	25 38 6c 64 20 44 69 72 20 20 73 65 63 74 6f 72     %8ld Dir  sector
    3489:	73 0a 00                                            s..

0000348c <__c.4398>:
    348c:	25 38 6c 64 20 44 69 72 20 20 73 74 61 72 74 0a     %8ld Dir  start.
	...

0000349d <__c.4396>:
    349d:	25 38 6c 64 20 50 75 72 67 65 64 0a 00              %8ld Purged..

000034aa <__c.4394>:
    34aa:	25 38 6c 64 20 46 69 6c 65 73 0a 00                 %8ld Files..

000034b6 <__c.4392>:
    34b6:	0a 00                                               ..

000034b8 <__c.4389>:
    34b8:	25 2d 31 30 73 20 20 25 30 34 58 68 20 20 20 20     %-10s  %04Xh    
    34c8:	20 20 25 38 6c 58 68 20 20 20 25 39 6c 64 25 63       %8lXh   %9ld%c
    34d8:	20 20 20 20 20 20 25 34 64 20 20 20 25 73 0a 00           %4d   %s..

000034e8 <__c.4387>:
    34e8:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    34f8:	73 5d 20 77 61 72 6e 69 6e 67 20 46 69 6c 65 42     s] warning FileB
    3508:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3518:	6f 72 73 3a 25 6c 64 20 21 3d 20 46 69 6c 65 53     ors:%ld != FileS
    3528:	65 63 74 6f 72 73 3a 25 6c 64 0a 00                 ectors:%ld..

00003534 <__c.4384>:
    3534:	4e 41 4d 45 20 20 20 20 20 20 20 20 20 54 59 50     NAME         TYP
    3544:	45 20 20 20 53 54 41 52 54 20 53 45 43 54 4f 52     E   START SECTOR
    3554:	20 20 20 20 20 20 20 20 53 49 5a 45 20 20 20 20             SIZE    
    3564:	52 45 43 53 49 5a 45 20 20 20 44 41 54 45 0a 00     RECSIZE   DATE..

00003574 <__c.4382>:
    3574:	56 6f 6c 75 6d 65 3a 5b 25 73 5d 20 44 61 74 65     Volume:[%s] Date
    3584:	3a 5b 25 73 5d 0a 00                                :[%s]..

0000358b <__c.4372>:
    358b:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    359b:	5b 25 73 5d 20 65 72 72 6f 72 20 64 69 72 65 63     [%s] error direc
    35ab:	74 6f 72 79 20 63 68 65 63 6b 20 66 61 69 6c 65     tory check faile
    35bb:	64 0a 00                                            d..

000035be <__c.4370>:
    35be:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    35ce:	5b 25 73 5d 20 65 72 72 6f 72 20 76 6f 6c 75 6d     [%s] error volum
    35de:	65 20 76 61 6c 69 64 61 74 65 20 66 61 69 6c 65     e validate faile
    35ee:	64 0a 00                                            d..

000035f1 <__c.4368>:
    35f1:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3601:	5b 25 73 5d 20 65 72 72 6f 72 20 72 65 61 64 20     [%s] error read 
    3611:	76 6f 6c 75 6d 65 20 68 65 61 64 65 72 20 66 61     volume header fa
    3621:	69 6c 65 64 0a 00                                   iled..

00003627 <__c.4366>:
    3627:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3637:	5b 25 73 5d 20 65 72 72 6f 72 20 76 6f 6c 75 6d     [%s] error volum
    3647:	65 20 68 65 61 64 65 72 20 61 72 65 61 20 74 6f     e header area to
    3657:	6f 20 73 6d 61 6c 6c 3a 5b 25 6c 64 5d 0a 00        o small:[%ld]..

00003666 <__c.4353>:
    3666:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 69 6e 64 65     lif_newdir: inde
    3676:	78 3a 5b 25 64 5d 20 61 64 64 69 6e 67 20 61 74     x:[%d] adding at
    3686:	3a 5b 25 6c 64 5d 74 6f 20 70 75 72 67 65 64 20     :[%ld]to purged 
    3696:	73 70 61 63 65 3a 5b 25 6c 64 5d 20 73 65 63 74     space:[%ld] sect
    36a6:	6f 72 73 2c 20 66 72 65 65 3a 5b 25 6c 64 5d 0a     ors, free:[%ld].
	...

000036b7 <__c.4350>:
    36b7:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 6e 6f 74 20     lif_newdir: not 
    36c7:	65 6e 6f 75 67 68 20 66 72 65 65 20 73 70 61 63     enough free spac
    36d7:	65 3a 5b 25 6c 64 5d 0a 00                          e:[%ld]..

000036e0 <__c.4348>:
    36e0:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 6e 6f 74 20     lif_newdir: not 
    36f0:	65 6e 6f 75 67 68 20 66 72 65 65 20 73 70 61 63     enough free spac
    3700:	65 3a 5b 25 6c 64 5d 20 66 6f 72 20 73 69 7a 65     e:[%ld] for size
    3710:	3a 5b 25 6c 64 5d 0a 00                             :[%ld]..

00003718 <__c.4336>:
    3718:	6c 69 66 5f 75 70 64 61 74 65 5f 66 72 65 65 3a     lif_update_free:
    3728:	5b 25 73 5d 20 65 72 72 6f 72 20 70 72 65 76 69     [%s] error previ
    3738:	6f 75 73 20 72 65 63 6f 72 64 20 66 69 6c 65 20     ous record file 
    3748:	61 72 65 61 20 6f 76 65 72 6c 61 70 73 20 74 68     area overlaps th
    3758:	69 73 20 6f 6e 65 3a 5b 25 73 5d 0a 00              is one:[%s]..

00003765 <__c.4311>:
    3765:	6c 69 66 5f 63 68 65 63 6b 5f 64 69 72 3a 20 65     lif_check_dir: e
    3775:	72 72 6f 72 2c 20 69 6e 64 65 78 3a 25 64 0a 00     rror, index:%d..

00003785 <__c.4302>:
    3785:	6c 69 66 5f 63 68 65 63 6b 64 69 72 69 6e 64 65     lif_checkdirinde
    3795:	78 3a 5b 25 73 5d 20 64 69 72 65 63 6f 72 79 20     x:[%s] direcory 
    37a5:	69 6e 64 65 78 3a 5b 25 64 5d 20 6f 75 74 20 6f     index:[%d] out o
    37b5:	66 20 62 6f 75 6e 64 73 0a 00                       f bounds..

000037bf <__c.4283>:
    37bf:	09 57 72 6f 74 65 3a 20 25 6c 64 0a 00              .Wrote: %ld..

000037cc <__c.4278>:
    37cc:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

000037d9 <__c.4273>:
    37d9:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

000037e6 <__c.4265>:
    37e6:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

000037f3 <__c.4263>:
    37f3:	43 72 65 61 74 69 6e 67 3a 25 73 2c 20 4c 61 62     Creating:%s, Lab
    3803:	65 6c 3a 5b 25 73 5d 2c 20 44 69 72 65 63 74 6f     el:[%s], Directo
    3813:	72 79 20 53 74 61 72 74 20 25 6c 64 2c 20 44 69     ry Start %ld, Di
    3823:	72 65 63 74 6f 72 79 20 53 69 7a 65 3a 20 25 6c     rectory Size: %l
    3833:	64 2c 20 46 69 6c 65 20 53 65 63 74 6f 72 73 3a     d, File Sectors:
    3843:	25 6c 64 0a 00                                      %ld..

00003848 <__c.4247>:
    3848:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3858:	73 5d 20 69 6e 76 61 6c 69 64 20 73 65 63 74 6f     s] invalid secto
    3868:	72 20 73 69 7a 65 3a 25 6c 64 0a 00                 r size:%ld..

00003874 <__c.4245>:
    3874:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3884:	73 5d 20 69 6e 76 61 6c 69 64 20 46 69 6c 65 42     s] invalid FileB
    3894:	79 74 65 73 20 3d 3d 20 30 0a 00                    ytes == 0..

0000389f <__c.4243>:
    389f:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    38af:	73 5d 20 77 61 72 6e 69 6e 67 20 46 69 6c 65 42     s] warning FileB
    38bf:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    38cf:	6f 72 73 3a 25 6c 64 20 3c 20 46 69 6c 65 53 65     ors:%ld < FileSe
    38df:	63 74 6f 72 73 3a 25 6c 64 0a 00                    ctors:%ld..

000038ea <__c.4241>:
    38ea:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    38fa:	73 5d 20 69 6e 76 61 6c 69 64 20 46 69 6c 65 42     s] invalid FileB
    390a:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    391a:	6f 72 73 3a 25 6c 64 20 3e 20 46 69 6c 65 53 65     ors:%ld > FileSe
    392a:	63 74 6f 72 73 3a 25 6c 64 0a 00                    ctors:%ld..

00003935 <__c.4239>:
    3935:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3945:	73 5d 20 69 6e 76 61 6c 69 64 20 56 6f 6c 75 6d     s] invalid Volum
    3955:	65 20 4e 75 6d 62 65 72 3a 25 58 68 0a 00           e Number:%Xh..

00003963 <__c.4237>:
    3963:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3973:	73 5d 20 69 6e 76 61 6c 69 64 20 65 6e 64 20 73     s] invalid end s
    3983:	65 63 74 6f 72 3a 25 6c 58 68 20 3e 20 74 6f 74     ector:%lXh > tot
    3993:	61 6c 20 73 65 63 74 6f 72 73 3a 25 6c 58 68 0a     al sectors:%lXh.
	...

000039a4 <__c.4235>:
    39a4:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    39b4:	73 5d 20 69 6e 76 61 6c 69 64 20 73 74 61 72 74     s] invalid start
    39c4:	20 73 65 63 74 6f 72 3a 25 6c 58 68 20 3c 20 66      sector:%lXh < f
    39d4:	69 65 20 61 72 65 61 20 73 74 61 72 74 3a 25 6c     ie area start:%l
    39e4:	58 68 0a 00                                         Xh..

000039e8 <__c.4233>:
    39e8:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    39f8:	73 5d 20 69 6e 76 61 6c 69 64 20 4e 61 6d 65 0a     s] invalid Name.
	...

00003a09 <__c.4227>:
    3a09:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3a19:	69 64 20 66 69 6c 65 20 73 74 61 72 74 20 3e 20     id file start > 
    3a29:	69 6d 61 67 65 20 73 69 7a 65 0a 00                 image size..

00003a35 <__c.4225>:
    3a35:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3a45:	69 64 20 44 69 72 65 63 74 6f 72 79 20 53 65 63     id Directory Sec
    3a55:	74 6f 72 20 43 6f 75 6e 74 20 3c 20 31 0a 00        tor Count < 1..

00003a64 <__c.4223>:
    3a64:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3a74:	69 64 20 73 74 61 72 74 20 73 65 63 74 6f 72 3a     id start sector:
    3a84:	25 6c 64 0a 00                                      %ld..

00003a89 <__c.4221>:
    3a89:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3a99:	69 64 20 62 79 74 65 73 20 61 74 20 6f 66 66 73     id bytes at offs
    3aa9:	65 74 20 32 32 26 32 33 20 73 68 6f 75 6c 64 20     et 22&23 should 
    3ab9:	62 65 20 7a 65 72 6f 0a 00                          be zero..

00003ac2 <__c.4219>:
    3ac2:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3ad2:	69 64 20 62 79 74 65 73 20 61 74 20 6f 66 66 73     id bytes at offs
    3ae2:	65 74 20 31 34 26 31 35 20 73 68 6f 75 6c 64 20     et 14&15 should 
    3af2:	62 65 20 7a 65 72 6f 0a 00                          be zero..

00003afb <__c.4217>:
    3afb:	4c 49 46 20 56 65 72 73 69 6f 6e 3a 20 25 30 34     LIF Version: %04
    3b0b:	58 48 20 3e 20 31 0a 00                             XH > 1..

00003b13 <__c.4215>:
    3b13:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3b23:	69 64 20 53 79 73 74 65 6d 33 30 30 30 20 49 44     id System3000 ID
    3b33:	20 28 25 30 34 58 48 29 20 65 78 70 65 63 74 65      (%04XH) expecte
    3b43:	64 20 31 30 30 30 48 0a 00                          d 1000H..

00003b4c <__c.4213>:
    3b4c:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3b5c:	69 64 20 56 6f 6c 75 6d 65 20 4e 61 6d 65 00        id Volume Name.

00003b6b <__c.4206>:
    3b6b:	0a 00                                               ..

00003b6d <__c.4204>:
    3b6d:	44 49 52 20 46 69 6c 65 20 44 61 74 65 3a 20 20     DIR File Date:  
    3b7d:	20 20 20 20 20 20 25 73 0a 00                             %s..

00003b87 <__c.4202>:
    3b87:	44 49 52 20 46 69 6c 65 20 73 65 63 74 6f 72 20     DIR File sector 
    3b97:	73 69 7a 65 3a 20 25 38 58 68 0a 00                 size: %8Xh..

00003ba3 <__c.4200>:
    3ba3:	44 49 52 20 46 69 6c 65 20 62 79 74 65 73 3a 20     DIR File bytes: 
    3bb3:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003bc0 <__c.4198>:
    3bc0:	44 49 52 20 46 69 6c 65 20 73 65 63 74 6f 72 73     DIR File sectors
    3bd0:	3a 20 20 20 20 20 25 38 6c 58 68 0a 00              :     %8lXh..

00003bdd <__c.4196>:
    3bdd:	44 49 52 20 46 69 6c 65 20 73 74 61 72 74 3a 20     DIR File start: 
    3bed:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003bfa <__c.4194>:
    3bfa:	44 49 52 20 46 69 6c 65 20 56 6f 6c 75 6d 65 23     DIR File Volume#
    3c0a:	3a 20 20 20 20 20 25 38 58 68 0a 00                 :     %8Xh..

00003c16 <__c.4192>:
    3c16:	44 49 52 20 46 69 6c 65 20 54 79 70 65 3a 20 20     DIR File Type:  
    3c26:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00003c32 <__c.4190>:
    3c32:	44 49 52 20 46 69 6c 65 20 4e 61 6d 65 3a 20 20     DIR File Name:  
    3c42:	20 20 20 20 20 20 25 73 0a 00                             %s..

00003c4c <__c.4188>:
    3c4c:	56 4f 4c 20 44 61 74 65 3a 20 20 20 20 20 20 20     VOL Date:       
    3c5c:	20 20 20 20 20 20 25 73 0a 00                             %s..

00003c66 <__c.4186>:
    3c66:	56 4f 4c 20 4c 49 46 56 65 72 73 69 6f 6e 3a 20     VOL LIFVersion: 
    3c76:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00003c82 <__c.4184>:
    3c82:	56 4f 4c 20 33 30 30 30 4c 49 46 69 64 3a 20 20     VOL 3000LIFid:  
    3c92:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00003c9e <__c.4182>:
    3c9e:	56 4f 4c 20 44 69 72 20 73 65 63 74 6f 72 73 3a     VOL Dir sectors:
    3cae:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003cbb <__c.4180>:
    3cbb:	56 4f 4c 20 44 69 72 20 73 74 61 72 74 3a 20 20     VOL Dir start:  
    3ccb:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003cd8 <__c.4178>:
    3cd8:	56 4f 4c 20 4c 49 46 69 64 3a 20 20 20 20 20 20     VOL LIFid:      
    3ce8:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00003cf4 <__c.4176>:
    3cf4:	56 4f 4c 20 4c 61 62 65 6c 3a 20 20 20 20 20 20     VOL Label:      
    3d04:	20 20 20 20 20 20 25 73 0a 00                             %s..

00003d0e <__c.4174>:
    3d0e:	4c 49 46 20 70 75 72 67 65 64 3a 20 20 20 20 20     LIF purged:     
    3d1e:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003d2b <__c.4172>:
    3d2b:	4c 49 46 20 66 69 6c 65 73 3a 20 20 20 20 20 20     LIF files:      
    3d3b:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003d48 <__c.4170>:
    3d48:	4c 49 46 20 66 72 65 65 3a 20 20 20 20 20 20 20     LIF free:       
    3d58:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003d65 <__c.4168>:
    3d65:	4c 49 46 20 75 73 65 64 3a 20 20 20 20 20 20 20     LIF used:       
    3d75:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003d82 <__c.4166>:
    3d82:	4c 49 46 20 66 69 6c 65 20 73 65 63 74 6f 72 73     LIF file sectors
    3d92:	3a 20 20 20 20 20 25 38 6c 58 68 0a 00              :     %8lXh..

00003d9f <__c.4164>:
    3d9f:	4c 49 46 20 66 69 6c 65 73 74 61 72 74 3a 20 20     LIF filestart:  
    3daf:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003dbc <__c.4162>:
    3dbc:	4c 49 46 20 62 79 74 65 73 3a 20 20 20 20 20 20     LIF bytes:      
    3dcc:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003dd9 <__c.4160>:
    3dd9:	4c 49 46 20 73 65 63 74 6f 72 73 3a 20 20 20 20     LIF sectors:    
    3de9:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003df6 <__c.4158>:
    3df6:	4c 49 46 20 6e 61 6d 65 3a 20 20 20 20 20 20 20     LIF name:       
    3e06:	20 20 20 20 20 20 25 73 0a 00                             %s..

00003e10 <__c.4156>:
    3e10:	0a 25 73 0a 00                                      .%s..

00003e15 <__c.4033>:
    3e15:	6c 69 66 5f 77 72 69 74 65 3a 20 57 72 69 74 65     lif_write: Write
    3e25:	3a 5b 25 73 5d 20 6f 66 66 73 65 74 3a 5b 25 6c     :[%s] offset:[%l
    3e35:	64 5d 20 77 72 69 74 65 3a 5b 25 64 5d 20 65 78     d] write:[%d] ex
    3e45:	70 65 63 74 65 64 3a 5b 25 64 5d 0a 00              pected:[%d]..

00003e52 <__c.4024>:
    3e52:	6c 69 66 5f 72 65 61 64 3a 20 72 65 61 64 3a 5b     lif_read: read:[
    3e62:	25 73 5d 20 6f 66 66 73 65 74 3a 5b 25 6c 64 5d     %s] offset:[%ld]
    3e72:	20 77 72 69 74 65 3a 5b 25 6c 64 5d 20 65 78 70      write:[%ld] exp
    3e82:	65 63 74 65 64 3a 5b 25 64 5d 0a 00                 ected:[%d]..

00003e8e <__c.4015>:
    3e8e:	6c 69 66 5f 72 65 61 64 5f 6d 73 67 3a 20 25 73     lif_read_msg: %s
    3e9e:	20 53 65 65 6b 20 65 72 72 6f 72 20 25 6c 64 0a      Seek error %ld.
	...

00003eaf <__c.4008>:
    3eaf:	6c 69 66 5f 73 74 61 74 3a 20 43 61 6e 27 74 20     lif_stat: Can't 
    3ebf:	73 74 61 74 3a 25 73 0a 00                          stat:%s..

00003ec8 <__c.4002>:
    3ec8:	6c 69 66 5f 6f 70 65 6e 3a 20 43 61 6e 27 74 20     lif_open: Can't 
    3ed8:	6f 70 65 6e 3a 5b 25 73 5d 20 6d 6f 64 65 3a 5b     open:[%s] mode:[
    3ee8:	25 73 5d 0a 00                                      %s]..

00003eed <__c.3990>:
    3eed:	6c 69 66 5f 66 72 65 65 3a 20 4e 55 4c 4c 20 70     lif_free: NULL p
    3efd:	6f 69 6e 74 65 72 0a 00                             ointer..

00003f05 <__c.3985>:
    3f05:	6c 69 66 5f 63 61 6c 6c 6f 63 3a 5b 25 6c 64 5d     lif_calloc:[%ld]
    3f15:	20 6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65      not enough free
    3f25:	20 6d 65 6d 6f 72 79 0a 00                           memory..

00003f2e <__c.3979>:
    3f2e:	44 69 73 6b 3a 20 25 73 20 6e 6f 74 20 66 6f 75     Disk: %s not fou
    3f3e:	6e 64 20 69 6e 20 68 70 64 69 72 2e 69 6e 69 0a     nd in hpdir.ini.
	...

00003f4f <__c.3966>:
    3f4f:	6c 69 66 20 61 64 64 20 6c 69 66 69 6d 61 67 65     lif add lifimage
    3f5f:	20 6c 69 66 6e 61 6d 65 20 66 72 6f 6d 5f 61 73      lifname from_as
    3f6f:	63 69 69 5f 66 69 6c 65 0a 6c 69 66 20 61 64 64     cii_file.lif add
    3f7f:	62 69 6e 20 6c 69 66 69 6d 61 67 65 20 6c 69 66     bin lifimage lif
    3f8f:	6e 61 6d 65 20 66 72 6f 6d 5f 6c 69 66 5f 66 69     name from_lif_fi
    3f9f:	6c 65 0a 6c 69 66 20 63 72 65 61 74 65 20 6c 69     le.lif create li
    3faf:	66 69 6d 61 67 65 20 6c 61 62 65 6c 20 64 69 72     fimage label dir
    3fbf:	65 63 74 6f 72 79 5f 73 65 63 74 6f 72 73 20 73     ectory_sectors s
    3fcf:	65 63 74 6f 72 73 0a 6c 69 66 20 63 72 65 61 74     ectors.lif creat
    3fdf:	65 64 69 73 6b 20 6c 69 66 69 6d 61 67 65 20 6c     edisk lifimage l
    3fef:	61 62 65 6c 20 6d 6f 64 65 6c 0a 6c 69 66 20 64     abel model.lif d
    3fff:	65 6c 20 6c 69 66 69 6d 61 67 65 20 6e 61 6d 65     el lifimage name
    400f:	0a 6c 69 66 20 64 69 72 20 6c 69 66 69 6d 61 67     .lif dir lifimag
    401f:	65 0a 6c 69 66 20 65 78 74 72 61 63 74 20 6c 69     e.lif extract li
    402f:	66 69 6d 61 67 65 20 6c 69 66 6e 61 6d 65 20 74     fimage lifname t
    403f:	6f 5f 61 73 63 69 69 5f 66 69 6c 65 0a 6c 69 66     o_ascii_file.lif
    404f:	20 65 78 74 72 61 63 74 62 69 6e 20 6c 69 66 69      extractbin lifi
    405f:	6d 61 67 65 20 6c 69 66 6e 61 6d 65 20 74 6f 5f     mage lifname to_
    406f:	6c 69 66 5f 66 69 6c 65 0a 20 20 20 20 65 78 74     lif_file.    ext
    407f:	72 61 63 74 73 20 61 20 66 69 6c 65 20 69 6e 74     racts a file int
    408f:	6f 20 61 20 73 69 67 6c 65 20 66 69 6c 65 20 4c     o a sigle file L
    409f:	49 46 20 69 6d 61 67 65 0a 6c 69 66 20 72 65 6e     IF image.lif ren
    40af:	61 6d 65 20 6c 69 66 69 6d 61 67 65 20 6f 6c 64     ame lifimage old
    40bf:	6c 69 66 6e 61 6d 65 20 6e 65 77 6c 69 66 6e 61     lifname newlifna
    40cf:	6d 65 0a 55 73 65 20 2d 64 20 61 66 74 65 72 20     me.Use -d after 
    40df:	66 69 72 73 74 20 6b 65 79 77 6f 72 64 20 27 6c     first keyword 'l
    40ef:	69 66 27 20 61 62 6f 76 65 20 66 6f 72 20 4c 49     if' above for LI
    40ff:	46 20 66 69 6c 65 73 79 73 74 65 6d 20 64 65 62     F filesystem deb
    410f:	75 67 67 69 6e 67 0a 0a 00                          ugging...

00004118 <__c.3964>:
    4118:	6c 69 66 20 68 65 6c 70 0a 00                       lif help..

00004122 <__c.4652>:
    4122:	53 74 61 72 74 69 6e 67 20 47 50 49 42 20 54 41     Starting GPIB TA
    4132:	53 4b 0a 00                                         SK..

00004136 <__c.4650>:
    4136:	64 65 62 75 67 6c 65 76 65 6c 20 20 20 3d 20 25     debuglevel   = %
    4146:	30 34 78 48 0a 00                                   04xH..

0000414c <__c.4648>:
    414c:	47 50 49 42 20 53 74 61 74 65 20 69 6e 69 74 20     GPIB State init 
    415c:	64 6f 6e 65 0a 00                                   done..

00004162 <__c.4646>:
    4162:	47 50 49 42 20 46 69 6c 65 20 69 6e 69 74 20 64     GPIB File init d
    4172:	6f 6e 65 0a 00                                      one..

00004177 <__c.4644>:
    4177:	47 50 49 42 20 54 69 6d 65 72 20 69 6e 69 74 69     GPIB Timer initi
    4187:	61 6c 69 7a 65 64 0a 00                             alized..

0000418f <__c.4642>:
    418f:	47 50 49 42 20 54 69 6d 65 72 20 53 65 74 75 70     GPIB Timer Setup
    419f:	0a 00                                               ..

000041a1 <__c.4640>:
    41a1:	50 72 69 6e 74 65 72 20 69 6e 69 74 69 61 6c 69     Printer initiali
    41b1:	7a 65 64 0a 00                                      zed..

000041b6 <__c.4638>:
    41b6:	47 50 49 42 20 62 75 73 20 69 6e 69 74 69 61 6c     GPIB bus initial
    41c6:	69 7a 65 64 0a 00                                   ized..

000041cc <__c.4636>:
    41cc:	4d 4d 43 20 69 6e 69 74 69 61 6c 69 7a 65 64 0a     MMC initialized.
	...

000041dd <__c.4634>:
    41dd:	4d 4d 43 20 69 6e 69 74 69 61 6c 69 7a 69 6e 67     MMC initializing
    41ed:	20 73 74 61 72 74 0a 00                              start..

000041f5 <__c.4632>:
    41f5:	49 32 43 20 4c 43 44 20 69 73 20 4e 4f 54 20 61     I2C LCD is NOT a
    4205:	74 74 61 63 68 65 64 21 0a 00                       ttached!..

0000420f <__c.4630>:
    420f:	49 32 43 20 4c 43 44 20 69 6e 69 74 69 61 6c 69     I2C LCD initiali
    421f:	7a 61 74 69 6f 6e 20 44 6f 6e 65 0a 00              zation Done..

0000422c <__c.4628>:
    422c:	49 32 43 20 4c 43 44 20 69 6e 69 74 69 61 6c 69     I2C LCD initiali
    423c:	7a 61 74 69 6f 6e 20 73 74 61 72 74 0a 00           zation start..

0000424a <__c.4626>:
    424a:	53 59 53 54 45 4d 5f 54 41 53 4b 5f 43 4f 55 4e     SYSTEM_TASK_COUN
    425a:	54 45 52 5f 52 45 53 3a 25 6c 64 0a 00              TER_RES:%ld..

00004267 <__c.4624>:
    4267:	43 6c 6f 63 6b 20 63 6c 65 61 72 65 64 0a 00        Clock cleared..

00004276 <__c.4622>:
    4276:	69 6e 69 74 69 61 6c 69 7a 69 6e 67 20 52 54 43     initializing RTC
    4286:	0a 00                                               ..

00004288 <__c.4620>:
    4288:	69 6e 69 74 69 61 6c 69 7a 69 6e 67 20 49 32 43     initializing I2C
    4298:	20 62 75 73 0a 00                                    bus..

0000429e <__c.4618>:
    429e:	69 6e 69 74 69 61 6c 69 7a 69 6e 67 20 53 50 49     initializing SPI
    42ae:	20 62 75 73 0a 00                                    bus..

000042b4 <__c.4616>:
    42b4:	20 20 20 4c 61 73 74 20 75 70 64 61 74 65 64 20        Last updated 
    42c4:	66 69 6c 65 3a 20 25 73 0a 00                       file: %s..

000042ce <__c.4614>:
    42ce:	20 20 20 47 49 54 20 6c 61 73 74 20 70 75 73 68        GIT last push
    42de:	65 64 3a 20 20 20 25 73 0a 00                       ed:   %s..

000042e8 <__c.4612>:
    42e8:	2d 3e 20 68 74 74 70 73 3a 2f 2f 67 69 74 68 75     -> https://githu
    42f8:	62 2e 63 6f 6d 2f 6d 61 67 6f 72 65 2f 68 70 38     b.com/magore/hp8
    4308:	35 64 69 73 6b 0a 00                                5disk..

0000430f <__c.4610>:
    430f:	20 47 4e 55 20 76 65 72 73 69 6f 6e 20 33 0a 00      GNU version 3..

0000431f <__c.4608>:
    431f:	20 28 43 29 20 32 30 31 34 2d 32 30 32 30 20 62      (C) 2014-2020 b
    432f:	79 20 4d 69 6b 65 20 47 6f 72 65 0a 00              y Mike Gore..

0000433c <__c.4606>:
    433c:	48 50 38 35 20 44 69 73 6b 20 61 6e 64 20 44 65     HP85 Disk and De
    434c:	76 69 63 65 20 45 6d 75 6c 61 74 6f 72 0a 00        vice Emulator..

0000435b <__c.4604>:
    435b:	52 65 71 75 65 73 74 65 64 20 42 61 75 64 20 52     Requested Baud R
    436b:	61 74 65 3a 20 25 6c 64 2c 20 41 63 74 75 61 6c     ate: %ld, Actual
    437b:	3a 20 25 6c 64 0a 00                                : %ld..

00004382 <__c.4602>:
    4382:	43 50 55 20 43 6c 6f 63 6b 20 3d 20 25 6c 75 0a     CPU Clock = %lu.
	...

00004393 <__c.4600>:
    4393:	53 74 61 72 74 0a 00                                Start..

0000439a <__c.4592>:
    439a:	45 72 72 6f 72 3a 5b 25 73 5d 0a 00                 Error:[%s]..

000043a6 <__c.4590>:
    43a6:	4f 4b 0a 00                                         OK..

000043aa <__c.4588>:
    43aa:	0a 3e 00                                            .>.

000043ad <__c.4577>:
    43ad:	68 65 6c 70 0a 6d 65 6d 0a 73 65 74 64 61 74 65     help.mem.setdate
    43bd:	0a 74 69 6d 65 0a 72 65 73 65 74 0a 0a 00           .time.reset...

000043cb <__c.4570>:
    43cb:	0a 00                                               ..

000043cd <__c.4568>:
    43cd:	20 20 20 4c 61 73 74 20 75 70 64 61 74 65 64 20        Last updated 
    43dd:	66 69 6c 65 3a 20 25 73 0a 00                       file: %s..

000043e7 <__c.4566>:
    43e7:	20 20 20 47 49 54 20 6c 61 73 74 20 70 75 73 68        GIT last push
    43f7:	65 64 3a 20 20 20 25 73 0a 00                       ed:   %s..

00004401 <__c.4564>:
    4401:	2d 3e 20 68 74 74 70 73 3a 2f 2f 67 69 74 68 75     -> https://githu
    4411:	62 2e 63 6f 6d 2f 6d 61 67 6f 72 65 2f 68 70 38     b.com/magore/hp8
    4421:	35 64 69 73 6b 0a 00                                5disk..

00004428 <__c.4562>:
    4428:	20 47 4e 55 20 76 65 72 73 69 6f 6e 20 33 0a 00      GNU version 3..

00004438 <__c.4560>:
    4438:	20 28 63 29 20 32 30 31 34 2d 32 30 32 30 20 62      (c) 2014-2020 b
    4448:	79 20 4d 69 6b 65 20 47 6f 72 65 0a 00              y Mike Gore..

00004455 <__c.4558>:
    4455:	48 50 38 35 20 44 69 73 6b 20 61 6e 64 20 44 65     HP85 Disk and De
    4465:	76 69 63 65 20 45 6d 75 6c 61 74 6f 72 0a 00        vice Emulator..

00004474 <__c.4556>:
    4474:	53 74 61 6e 64 20 61 6c 6f 6e 65 20 76 65 72 73     Stand alone vers
    4484:	69 6f 6e 20 6f 66 20 4c 49 46 20 75 74 69 6c 69     ion of LIF utili
    4494:	74 69 65 73 20 66 6f 72 20 6c 69 6e 75 78 0a 00     ties for linux..

000044a4 <__ctors_end>:
    44a4:	11 24       	eor	r1, r1
    44a6:	1f be       	out	0x3f, r1	; 63
    44a8:	cf ef       	ldi	r28, 0xFF	; 255
    44aa:	d0 e4       	ldi	r29, 0x40	; 64
    44ac:	de bf       	out	0x3e, r29	; 62
    44ae:	cd bf       	out	0x3d, r28	; 61

000044b0 <__do_copy_data>:
    44b0:	17 e1       	ldi	r17, 0x17	; 23
    44b2:	a0 e0       	ldi	r26, 0x00	; 0
    44b4:	b1 e0       	ldi	r27, 0x01	; 1
    44b6:	ee e5       	ldi	r30, 0x5E	; 94
    44b8:	fa ec       	ldi	r31, 0xCA	; 202
    44ba:	01 e0       	ldi	r16, 0x01	; 1
    44bc:	0b bf       	out	0x3b, r16	; 59
    44be:	02 c0       	rjmp	.+4      	; 0x44c4 <__do_copy_data+0x14>
    44c0:	07 90       	elpm	r0, Z+
    44c2:	0d 92       	st	X+, r0
    44c4:	ae 33       	cpi	r26, 0x3E	; 62
    44c6:	b1 07       	cpc	r27, r17
    44c8:	d9 f7       	brne	.-10     	; 0x44c0 <__do_copy_data+0x10>

000044ca <__do_clear_bss>:
    44ca:	21 e2       	ldi	r18, 0x21	; 33
    44cc:	ae e3       	ldi	r26, 0x3E	; 62
    44ce:	b7 e1       	ldi	r27, 0x17	; 23
    44d0:	01 c0       	rjmp	.+2      	; 0x44d4 <.do_clear_bss_start>

000044d2 <.do_clear_bss_loop>:
    44d2:	1d 92       	st	X+, r1

000044d4 <.do_clear_bss_start>:
    44d4:	a4 37       	cpi	r26, 0x74	; 116
    44d6:	b2 07       	cpc	r27, r18
    44d8:	e1 f7       	brne	.-8      	; 0x44d2 <.do_clear_bss_loop>
    44da:	0e 94 5a dd 	call	0x1bab4	; 0x1bab4 <main>
    44de:	0c 94 2d e5 	jmp	0x1ca5a	; 0x1ca5a <_exit>

000044e2 <__bad_interrupt>:
    44e2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000044e6 <vfprintf>:
    44e6:	2f 92       	push	r2
    44e8:	3f 92       	push	r3
    44ea:	4f 92       	push	r4
    44ec:	5f 92       	push	r5
    44ee:	6f 92       	push	r6
    44f0:	7f 92       	push	r7
    44f2:	8f 92       	push	r8
    44f4:	9f 92       	push	r9
    44f6:	af 92       	push	r10
    44f8:	bf 92       	push	r11
    44fa:	cf 92       	push	r12
    44fc:	df 92       	push	r13
    44fe:	ef 92       	push	r14
    4500:	ff 92       	push	r15
    4502:	0f 93       	push	r16
    4504:	1f 93       	push	r17
    4506:	cf 93       	push	r28
    4508:	df 93       	push	r29
    450a:	cd b7       	in	r28, 0x3d	; 61
    450c:	de b7       	in	r29, 0x3e	; 62
    450e:	60 97       	sbiw	r28, 0x10	; 16
    4510:	0f b6       	in	r0, 0x3f	; 63
    4512:	f8 94       	cli
    4514:	de bf       	out	0x3e, r29	; 62
    4516:	0f be       	out	0x3f, r0	; 63
    4518:	cd bf       	out	0x3d, r28	; 61
    451a:	7c 01       	movw	r14, r24
    451c:	1b 01       	movw	r2, r22
    451e:	6a 01       	movw	r12, r20
    4520:	fc 01       	movw	r30, r24
    4522:	17 82       	std	Z+7, r1	; 0x07
    4524:	16 82       	std	Z+6, r1	; 0x06
    4526:	83 81       	ldd	r24, Z+3	; 0x03
    4528:	81 ff       	sbrs	r24, 1
    452a:	44 c3       	rjmp	.+1672   	; 0x4bb4 <vfprintf+0x6ce>
    452c:	9e 01       	movw	r18, r28
    452e:	2f 5f       	subi	r18, 0xFF	; 255
    4530:	3f 4f       	sbci	r19, 0xFF	; 255
    4532:	39 01       	movw	r6, r18
    4534:	f7 01       	movw	r30, r14
    4536:	93 81       	ldd	r25, Z+3	; 0x03
    4538:	f1 01       	movw	r30, r2
    453a:	93 fd       	sbrc	r25, 3
    453c:	85 91       	lpm	r24, Z+
    453e:	93 ff       	sbrs	r25, 3
    4540:	81 91       	ld	r24, Z+
    4542:	1f 01       	movw	r2, r30
    4544:	88 23       	and	r24, r24
    4546:	09 f4       	brne	.+2      	; 0x454a <vfprintf+0x64>
    4548:	31 c3       	rjmp	.+1634   	; 0x4bac <vfprintf+0x6c6>
    454a:	85 32       	cpi	r24, 0x25	; 37
    454c:	39 f4       	brne	.+14     	; 0x455c <vfprintf+0x76>
    454e:	93 fd       	sbrc	r25, 3
    4550:	85 91       	lpm	r24, Z+
    4552:	93 ff       	sbrs	r25, 3
    4554:	81 91       	ld	r24, Z+
    4556:	1f 01       	movw	r2, r30
    4558:	85 32       	cpi	r24, 0x25	; 37
    455a:	39 f4       	brne	.+14     	; 0x456a <vfprintf+0x84>
    455c:	b7 01       	movw	r22, r14
    455e:	90 e0       	ldi	r25, 0x00	; 0
    4560:	0e 94 29 75 	call	0xea52	; 0xea52 <fputc>
    4564:	56 01       	movw	r10, r12
    4566:	65 01       	movw	r12, r10
    4568:	e5 cf       	rjmp	.-54     	; 0x4534 <vfprintf+0x4e>
    456a:	10 e0       	ldi	r17, 0x00	; 0
    456c:	51 2c       	mov	r5, r1
    456e:	91 2c       	mov	r9, r1
    4570:	ff e1       	ldi	r31, 0x1F	; 31
    4572:	f9 15       	cp	r31, r9
    4574:	d8 f0       	brcs	.+54     	; 0x45ac <vfprintf+0xc6>
    4576:	8b 32       	cpi	r24, 0x2B	; 43
    4578:	79 f0       	breq	.+30     	; 0x4598 <vfprintf+0xb2>
    457a:	38 f4       	brcc	.+14     	; 0x458a <vfprintf+0xa4>
    457c:	80 32       	cpi	r24, 0x20	; 32
    457e:	79 f0       	breq	.+30     	; 0x459e <vfprintf+0xb8>
    4580:	83 32       	cpi	r24, 0x23	; 35
    4582:	a1 f4       	brne	.+40     	; 0x45ac <vfprintf+0xc6>
    4584:	f9 2d       	mov	r31, r9
    4586:	f0 61       	ori	r31, 0x10	; 16
    4588:	2e c0       	rjmp	.+92     	; 0x45e6 <vfprintf+0x100>
    458a:	8d 32       	cpi	r24, 0x2D	; 45
    458c:	61 f0       	breq	.+24     	; 0x45a6 <vfprintf+0xc0>
    458e:	80 33       	cpi	r24, 0x30	; 48
    4590:	69 f4       	brne	.+26     	; 0x45ac <vfprintf+0xc6>
    4592:	29 2d       	mov	r18, r9
    4594:	21 60       	ori	r18, 0x01	; 1
    4596:	2d c0       	rjmp	.+90     	; 0x45f2 <vfprintf+0x10c>
    4598:	39 2d       	mov	r19, r9
    459a:	32 60       	ori	r19, 0x02	; 2
    459c:	93 2e       	mov	r9, r19
    459e:	89 2d       	mov	r24, r9
    45a0:	84 60       	ori	r24, 0x04	; 4
    45a2:	98 2e       	mov	r9, r24
    45a4:	2a c0       	rjmp	.+84     	; 0x45fa <vfprintf+0x114>
    45a6:	e9 2d       	mov	r30, r9
    45a8:	e8 60       	ori	r30, 0x08	; 8
    45aa:	15 c0       	rjmp	.+42     	; 0x45d6 <vfprintf+0xf0>
    45ac:	97 fc       	sbrc	r9, 7
    45ae:	2d c0       	rjmp	.+90     	; 0x460a <vfprintf+0x124>
    45b0:	20 ed       	ldi	r18, 0xD0	; 208
    45b2:	28 0f       	add	r18, r24
    45b4:	2a 30       	cpi	r18, 0x0A	; 10
    45b6:	88 f4       	brcc	.+34     	; 0x45da <vfprintf+0xf4>
    45b8:	96 fe       	sbrs	r9, 6
    45ba:	06 c0       	rjmp	.+12     	; 0x45c8 <vfprintf+0xe2>
    45bc:	3a e0       	ldi	r19, 0x0A	; 10
    45be:	13 9f       	mul	r17, r19
    45c0:	20 0d       	add	r18, r0
    45c2:	11 24       	eor	r1, r1
    45c4:	12 2f       	mov	r17, r18
    45c6:	19 c0       	rjmp	.+50     	; 0x45fa <vfprintf+0x114>
    45c8:	8a e0       	ldi	r24, 0x0A	; 10
    45ca:	58 9e       	mul	r5, r24
    45cc:	20 0d       	add	r18, r0
    45ce:	11 24       	eor	r1, r1
    45d0:	52 2e       	mov	r5, r18
    45d2:	e9 2d       	mov	r30, r9
    45d4:	e0 62       	ori	r30, 0x20	; 32
    45d6:	9e 2e       	mov	r9, r30
    45d8:	10 c0       	rjmp	.+32     	; 0x45fa <vfprintf+0x114>
    45da:	8e 32       	cpi	r24, 0x2E	; 46
    45dc:	31 f4       	brne	.+12     	; 0x45ea <vfprintf+0x104>
    45de:	96 fc       	sbrc	r9, 6
    45e0:	e5 c2       	rjmp	.+1482   	; 0x4bac <vfprintf+0x6c6>
    45e2:	f9 2d       	mov	r31, r9
    45e4:	f0 64       	ori	r31, 0x40	; 64
    45e6:	9f 2e       	mov	r9, r31
    45e8:	08 c0       	rjmp	.+16     	; 0x45fa <vfprintf+0x114>
    45ea:	8c 36       	cpi	r24, 0x6C	; 108
    45ec:	21 f4       	brne	.+8      	; 0x45f6 <vfprintf+0x110>
    45ee:	29 2d       	mov	r18, r9
    45f0:	20 68       	ori	r18, 0x80	; 128
    45f2:	92 2e       	mov	r9, r18
    45f4:	02 c0       	rjmp	.+4      	; 0x45fa <vfprintf+0x114>
    45f6:	88 36       	cpi	r24, 0x68	; 104
    45f8:	41 f4       	brne	.+16     	; 0x460a <vfprintf+0x124>
    45fa:	f1 01       	movw	r30, r2
    45fc:	93 fd       	sbrc	r25, 3
    45fe:	85 91       	lpm	r24, Z+
    4600:	93 ff       	sbrs	r25, 3
    4602:	81 91       	ld	r24, Z+
    4604:	1f 01       	movw	r2, r30
    4606:	81 11       	cpse	r24, r1
    4608:	b3 cf       	rjmp	.-154    	; 0x4570 <vfprintf+0x8a>
    460a:	9b eb       	ldi	r25, 0xBB	; 187
    460c:	98 0f       	add	r25, r24
    460e:	93 30       	cpi	r25, 0x03	; 3
    4610:	20 f4       	brcc	.+8      	; 0x461a <vfprintf+0x134>
    4612:	99 2d       	mov	r25, r9
    4614:	90 61       	ori	r25, 0x10	; 16
    4616:	80 5e       	subi	r24, 0xE0	; 224
    4618:	07 c0       	rjmp	.+14     	; 0x4628 <vfprintf+0x142>
    461a:	9b e9       	ldi	r25, 0x9B	; 155
    461c:	98 0f       	add	r25, r24
    461e:	93 30       	cpi	r25, 0x03	; 3
    4620:	08 f0       	brcs	.+2      	; 0x4624 <vfprintf+0x13e>
    4622:	66 c1       	rjmp	.+716    	; 0x48f0 <vfprintf+0x40a>
    4624:	99 2d       	mov	r25, r9
    4626:	9f 7e       	andi	r25, 0xEF	; 239
    4628:	96 ff       	sbrs	r25, 6
    462a:	16 e0       	ldi	r17, 0x06	; 6
    462c:	9f 73       	andi	r25, 0x3F	; 63
    462e:	99 2e       	mov	r9, r25
    4630:	85 36       	cpi	r24, 0x65	; 101
    4632:	19 f4       	brne	.+6      	; 0x463a <vfprintf+0x154>
    4634:	90 64       	ori	r25, 0x40	; 64
    4636:	99 2e       	mov	r9, r25
    4638:	08 c0       	rjmp	.+16     	; 0x464a <vfprintf+0x164>
    463a:	86 36       	cpi	r24, 0x66	; 102
    463c:	21 f4       	brne	.+8      	; 0x4646 <vfprintf+0x160>
    463e:	39 2f       	mov	r19, r25
    4640:	30 68       	ori	r19, 0x80	; 128
    4642:	93 2e       	mov	r9, r19
    4644:	02 c0       	rjmp	.+4      	; 0x464a <vfprintf+0x164>
    4646:	11 11       	cpse	r17, r1
    4648:	11 50       	subi	r17, 0x01	; 1
    464a:	97 fe       	sbrs	r9, 7
    464c:	07 c0       	rjmp	.+14     	; 0x465c <vfprintf+0x176>
    464e:	1c 33       	cpi	r17, 0x3C	; 60
    4650:	50 f4       	brcc	.+20     	; 0x4666 <vfprintf+0x180>
    4652:	44 24       	eor	r4, r4
    4654:	43 94       	inc	r4
    4656:	41 0e       	add	r4, r17
    4658:	27 e0       	ldi	r18, 0x07	; 7
    465a:	0b c0       	rjmp	.+22     	; 0x4672 <vfprintf+0x18c>
    465c:	18 30       	cpi	r17, 0x08	; 8
    465e:	38 f0       	brcs	.+14     	; 0x466e <vfprintf+0x188>
    4660:	27 e0       	ldi	r18, 0x07	; 7
    4662:	17 e0       	ldi	r17, 0x07	; 7
    4664:	05 c0       	rjmp	.+10     	; 0x4670 <vfprintf+0x18a>
    4666:	27 e0       	ldi	r18, 0x07	; 7
    4668:	9c e3       	ldi	r25, 0x3C	; 60
    466a:	49 2e       	mov	r4, r25
    466c:	02 c0       	rjmp	.+4      	; 0x4672 <vfprintf+0x18c>
    466e:	21 2f       	mov	r18, r17
    4670:	41 2c       	mov	r4, r1
    4672:	56 01       	movw	r10, r12
    4674:	84 e0       	ldi	r24, 0x04	; 4
    4676:	a8 0e       	add	r10, r24
    4678:	b1 1c       	adc	r11, r1
    467a:	f6 01       	movw	r30, r12
    467c:	60 81       	ld	r22, Z
    467e:	71 81       	ldd	r23, Z+1	; 0x01
    4680:	82 81       	ldd	r24, Z+2	; 0x02
    4682:	93 81       	ldd	r25, Z+3	; 0x03
    4684:	04 2d       	mov	r16, r4
    4686:	a3 01       	movw	r20, r6
    4688:	0e 94 da e3 	call	0x1c7b4	; 0x1c7b4 <__ftoa_engine>
    468c:	6c 01       	movw	r12, r24
    468e:	f9 81       	ldd	r31, Y+1	; 0x01
    4690:	fc 87       	std	Y+12, r31	; 0x0c
    4692:	f0 ff       	sbrs	r31, 0
    4694:	02 c0       	rjmp	.+4      	; 0x469a <vfprintf+0x1b4>
    4696:	f3 ff       	sbrs	r31, 3
    4698:	06 c0       	rjmp	.+12     	; 0x46a6 <vfprintf+0x1c0>
    469a:	91 fc       	sbrc	r9, 1
    469c:	06 c0       	rjmp	.+12     	; 0x46aa <vfprintf+0x1c4>
    469e:	92 fe       	sbrs	r9, 2
    46a0:	06 c0       	rjmp	.+12     	; 0x46ae <vfprintf+0x1c8>
    46a2:	00 e2       	ldi	r16, 0x20	; 32
    46a4:	05 c0       	rjmp	.+10     	; 0x46b0 <vfprintf+0x1ca>
    46a6:	0d e2       	ldi	r16, 0x2D	; 45
    46a8:	03 c0       	rjmp	.+6      	; 0x46b0 <vfprintf+0x1ca>
    46aa:	0b e2       	ldi	r16, 0x2B	; 43
    46ac:	01 c0       	rjmp	.+2      	; 0x46b0 <vfprintf+0x1ca>
    46ae:	00 e0       	ldi	r16, 0x00	; 0
    46b0:	8c 85       	ldd	r24, Y+12	; 0x0c
    46b2:	8c 70       	andi	r24, 0x0C	; 12
    46b4:	19 f0       	breq	.+6      	; 0x46bc <vfprintf+0x1d6>
    46b6:	01 11       	cpse	r16, r1
    46b8:	5a c2       	rjmp	.+1204   	; 0x4b6e <vfprintf+0x688>
    46ba:	9b c2       	rjmp	.+1334   	; 0x4bf2 <vfprintf+0x70c>
    46bc:	97 fe       	sbrs	r9, 7
    46be:	10 c0       	rjmp	.+32     	; 0x46e0 <vfprintf+0x1fa>
    46c0:	4c 0c       	add	r4, r12
    46c2:	fc 85       	ldd	r31, Y+12	; 0x0c
    46c4:	f4 ff       	sbrs	r31, 4
    46c6:	04 c0       	rjmp	.+8      	; 0x46d0 <vfprintf+0x1ea>
    46c8:	8a 81       	ldd	r24, Y+2	; 0x02
    46ca:	81 33       	cpi	r24, 0x31	; 49
    46cc:	09 f4       	brne	.+2      	; 0x46d0 <vfprintf+0x1ea>
    46ce:	4a 94       	dec	r4
    46d0:	14 14       	cp	r1, r4
    46d2:	74 f5       	brge	.+92     	; 0x4730 <vfprintf+0x24a>
    46d4:	28 e0       	ldi	r18, 0x08	; 8
    46d6:	24 15       	cp	r18, r4
    46d8:	78 f5       	brcc	.+94     	; 0x4738 <vfprintf+0x252>
    46da:	88 e0       	ldi	r24, 0x08	; 8
    46dc:	48 2e       	mov	r4, r24
    46de:	2c c0       	rjmp	.+88     	; 0x4738 <vfprintf+0x252>
    46e0:	96 fc       	sbrc	r9, 6
    46e2:	2a c0       	rjmp	.+84     	; 0x4738 <vfprintf+0x252>
    46e4:	81 2f       	mov	r24, r17
    46e6:	90 e0       	ldi	r25, 0x00	; 0
    46e8:	8c 15       	cp	r24, r12
    46ea:	9d 05       	cpc	r25, r13
    46ec:	9c f0       	brlt	.+38     	; 0x4714 <vfprintf+0x22e>
    46ee:	3c ef       	ldi	r19, 0xFC	; 252
    46f0:	c3 16       	cp	r12, r19
    46f2:	3f ef       	ldi	r19, 0xFF	; 255
    46f4:	d3 06       	cpc	r13, r19
    46f6:	74 f0       	brlt	.+28     	; 0x4714 <vfprintf+0x22e>
    46f8:	89 2d       	mov	r24, r9
    46fa:	80 68       	ori	r24, 0x80	; 128
    46fc:	98 2e       	mov	r9, r24
    46fe:	0a c0       	rjmp	.+20     	; 0x4714 <vfprintf+0x22e>
    4700:	e2 e0       	ldi	r30, 0x02	; 2
    4702:	f0 e0       	ldi	r31, 0x00	; 0
    4704:	ec 0f       	add	r30, r28
    4706:	fd 1f       	adc	r31, r29
    4708:	e1 0f       	add	r30, r17
    470a:	f1 1d       	adc	r31, r1
    470c:	80 81       	ld	r24, Z
    470e:	80 33       	cpi	r24, 0x30	; 48
    4710:	19 f4       	brne	.+6      	; 0x4718 <vfprintf+0x232>
    4712:	11 50       	subi	r17, 0x01	; 1
    4714:	11 11       	cpse	r17, r1
    4716:	f4 cf       	rjmp	.-24     	; 0x4700 <vfprintf+0x21a>
    4718:	97 fe       	sbrs	r9, 7
    471a:	0e c0       	rjmp	.+28     	; 0x4738 <vfprintf+0x252>
    471c:	44 24       	eor	r4, r4
    471e:	43 94       	inc	r4
    4720:	41 0e       	add	r4, r17
    4722:	81 2f       	mov	r24, r17
    4724:	90 e0       	ldi	r25, 0x00	; 0
    4726:	c8 16       	cp	r12, r24
    4728:	d9 06       	cpc	r13, r25
    472a:	2c f4       	brge	.+10     	; 0x4736 <vfprintf+0x250>
    472c:	1c 19       	sub	r17, r12
    472e:	04 c0       	rjmp	.+8      	; 0x4738 <vfprintf+0x252>
    4730:	44 24       	eor	r4, r4
    4732:	43 94       	inc	r4
    4734:	01 c0       	rjmp	.+2      	; 0x4738 <vfprintf+0x252>
    4736:	10 e0       	ldi	r17, 0x00	; 0
    4738:	97 fe       	sbrs	r9, 7
    473a:	06 c0       	rjmp	.+12     	; 0x4748 <vfprintf+0x262>
    473c:	1c 14       	cp	r1, r12
    473e:	1d 04       	cpc	r1, r13
    4740:	34 f4       	brge	.+12     	; 0x474e <vfprintf+0x268>
    4742:	c6 01       	movw	r24, r12
    4744:	01 96       	adiw	r24, 0x01	; 1
    4746:	05 c0       	rjmp	.+10     	; 0x4752 <vfprintf+0x26c>
    4748:	85 e0       	ldi	r24, 0x05	; 5
    474a:	90 e0       	ldi	r25, 0x00	; 0
    474c:	02 c0       	rjmp	.+4      	; 0x4752 <vfprintf+0x26c>
    474e:	81 e0       	ldi	r24, 0x01	; 1
    4750:	90 e0       	ldi	r25, 0x00	; 0
    4752:	01 11       	cpse	r16, r1
    4754:	01 96       	adiw	r24, 0x01	; 1
    4756:	11 23       	and	r17, r17
    4758:	31 f0       	breq	.+12     	; 0x4766 <vfprintf+0x280>
    475a:	21 2f       	mov	r18, r17
    475c:	30 e0       	ldi	r19, 0x00	; 0
    475e:	2f 5f       	subi	r18, 0xFF	; 255
    4760:	3f 4f       	sbci	r19, 0xFF	; 255
    4762:	82 0f       	add	r24, r18
    4764:	93 1f       	adc	r25, r19
    4766:	25 2d       	mov	r18, r5
    4768:	30 e0       	ldi	r19, 0x00	; 0
    476a:	82 17       	cp	r24, r18
    476c:	93 07       	cpc	r25, r19
    476e:	14 f4       	brge	.+4      	; 0x4774 <vfprintf+0x28e>
    4770:	58 1a       	sub	r5, r24
    4772:	01 c0       	rjmp	.+2      	; 0x4776 <vfprintf+0x290>
    4774:	51 2c       	mov	r5, r1
    4776:	89 2d       	mov	r24, r9
    4778:	89 70       	andi	r24, 0x09	; 9
    477a:	49 f4       	brne	.+18     	; 0x478e <vfprintf+0x2a8>
    477c:	55 20       	and	r5, r5
    477e:	39 f0       	breq	.+14     	; 0x478e <vfprintf+0x2a8>
    4780:	b7 01       	movw	r22, r14
    4782:	80 e2       	ldi	r24, 0x20	; 32
    4784:	90 e0       	ldi	r25, 0x00	; 0
    4786:	0e 94 29 75 	call	0xea52	; 0xea52 <fputc>
    478a:	5a 94       	dec	r5
    478c:	f7 cf       	rjmp	.-18     	; 0x477c <vfprintf+0x296>
    478e:	00 23       	and	r16, r16
    4790:	29 f0       	breq	.+10     	; 0x479c <vfprintf+0x2b6>
    4792:	b7 01       	movw	r22, r14
    4794:	80 2f       	mov	r24, r16
    4796:	90 e0       	ldi	r25, 0x00	; 0
    4798:	0e 94 29 75 	call	0xea52	; 0xea52 <fputc>
    479c:	93 fc       	sbrc	r9, 3
    479e:	09 c0       	rjmp	.+18     	; 0x47b2 <vfprintf+0x2cc>
    47a0:	55 20       	and	r5, r5
    47a2:	39 f0       	breq	.+14     	; 0x47b2 <vfprintf+0x2cc>
    47a4:	b7 01       	movw	r22, r14
    47a6:	80 e3       	ldi	r24, 0x30	; 48
    47a8:	90 e0       	ldi	r25, 0x00	; 0
    47aa:	0e 94 29 75 	call	0xea52	; 0xea52 <fputc>
    47ae:	5a 94       	dec	r5
    47b0:	f7 cf       	rjmp	.-18     	; 0x47a0 <vfprintf+0x2ba>
    47b2:	97 fe       	sbrs	r9, 7
    47b4:	4c c0       	rjmp	.+152    	; 0x484e <vfprintf+0x368>
    47b6:	46 01       	movw	r8, r12
    47b8:	d7 fe       	sbrs	r13, 7
    47ba:	02 c0       	rjmp	.+4      	; 0x47c0 <vfprintf+0x2da>
    47bc:	81 2c       	mov	r8, r1
    47be:	91 2c       	mov	r9, r1
    47c0:	c6 01       	movw	r24, r12
    47c2:	88 19       	sub	r24, r8
    47c4:	99 09       	sbc	r25, r9
    47c6:	f3 01       	movw	r30, r6
    47c8:	e8 0f       	add	r30, r24
    47ca:	f9 1f       	adc	r31, r25
    47cc:	fe 87       	std	Y+14, r31	; 0x0e
    47ce:	ed 87       	std	Y+13, r30	; 0x0d
    47d0:	96 01       	movw	r18, r12
    47d2:	24 19       	sub	r18, r4
    47d4:	31 09       	sbc	r19, r1
    47d6:	38 8b       	std	Y+16, r19	; 0x10
    47d8:	2f 87       	std	Y+15, r18	; 0x0f
    47da:	01 2f       	mov	r16, r17
    47dc:	10 e0       	ldi	r17, 0x00	; 0
    47de:	11 95       	neg	r17
    47e0:	01 95       	neg	r16
    47e2:	11 09       	sbc	r17, r1
    47e4:	3f ef       	ldi	r19, 0xFF	; 255
    47e6:	83 16       	cp	r8, r19
    47e8:	93 06       	cpc	r9, r19
    47ea:	29 f4       	brne	.+10     	; 0x47f6 <vfprintf+0x310>
    47ec:	b7 01       	movw	r22, r14
    47ee:	8e e2       	ldi	r24, 0x2E	; 46
    47f0:	90 e0       	ldi	r25, 0x00	; 0
    47f2:	0e 94 29 75 	call	0xea52	; 0xea52 <fputc>
    47f6:	c8 14       	cp	r12, r8
    47f8:	d9 04       	cpc	r13, r9
    47fa:	4c f0       	brlt	.+18     	; 0x480e <vfprintf+0x328>
    47fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    47fe:	98 89       	ldd	r25, Y+16	; 0x10
    4800:	88 15       	cp	r24, r8
    4802:	99 05       	cpc	r25, r9
    4804:	24 f4       	brge	.+8      	; 0x480e <vfprintf+0x328>
    4806:	ed 85       	ldd	r30, Y+13	; 0x0d
    4808:	fe 85       	ldd	r31, Y+14	; 0x0e
    480a:	81 81       	ldd	r24, Z+1	; 0x01
    480c:	01 c0       	rjmp	.+2      	; 0x4810 <vfprintf+0x32a>
    480e:	80 e3       	ldi	r24, 0x30	; 48
    4810:	f1 e0       	ldi	r31, 0x01	; 1
    4812:	8f 1a       	sub	r8, r31
    4814:	91 08       	sbc	r9, r1
    4816:	2d 85       	ldd	r18, Y+13	; 0x0d
    4818:	3e 85       	ldd	r19, Y+14	; 0x0e
    481a:	2f 5f       	subi	r18, 0xFF	; 255
    481c:	3f 4f       	sbci	r19, 0xFF	; 255
    481e:	3e 87       	std	Y+14, r19	; 0x0e
    4820:	2d 87       	std	Y+13, r18	; 0x0d
    4822:	80 16       	cp	r8, r16
    4824:	91 06       	cpc	r9, r17
    4826:	2c f0       	brlt	.+10     	; 0x4832 <vfprintf+0x34c>
    4828:	b7 01       	movw	r22, r14
    482a:	90 e0       	ldi	r25, 0x00	; 0
    482c:	0e 94 29 75 	call	0xea52	; 0xea52 <fputc>
    4830:	d9 cf       	rjmp	.-78     	; 0x47e4 <vfprintf+0x2fe>
    4832:	c8 14       	cp	r12, r8
    4834:	d9 04       	cpc	r13, r9
    4836:	41 f4       	brne	.+16     	; 0x4848 <vfprintf+0x362>
    4838:	9a 81       	ldd	r25, Y+2	; 0x02
    483a:	96 33       	cpi	r25, 0x36	; 54
    483c:	20 f4       	brcc	.+8      	; 0x4846 <vfprintf+0x360>
    483e:	95 33       	cpi	r25, 0x35	; 53
    4840:	19 f4       	brne	.+6      	; 0x4848 <vfprintf+0x362>
    4842:	3c 85       	ldd	r19, Y+12	; 0x0c
    4844:	34 ff       	sbrs	r19, 4
    4846:	81 e3       	ldi	r24, 0x31	; 49
    4848:	b7 01       	movw	r22, r14
    484a:	90 e0       	ldi	r25, 0x00	; 0
    484c:	4e c0       	rjmp	.+156    	; 0x48ea <vfprintf+0x404>
    484e:	8a 81       	ldd	r24, Y+2	; 0x02
    4850:	81 33       	cpi	r24, 0x31	; 49
    4852:	19 f0       	breq	.+6      	; 0x485a <vfprintf+0x374>
    4854:	9c 85       	ldd	r25, Y+12	; 0x0c
    4856:	9f 7e       	andi	r25, 0xEF	; 239
    4858:	9c 87       	std	Y+12, r25	; 0x0c
    485a:	b7 01       	movw	r22, r14
    485c:	90 e0       	ldi	r25, 0x00	; 0
    485e:	0e 94 29 75 	call	0xea52	; 0xea52 <fputc>
    4862:	11 11       	cpse	r17, r1
    4864:	05 c0       	rjmp	.+10     	; 0x4870 <vfprintf+0x38a>
    4866:	94 fc       	sbrc	r9, 4
    4868:	18 c0       	rjmp	.+48     	; 0x489a <vfprintf+0x3b4>
    486a:	85 e6       	ldi	r24, 0x65	; 101
    486c:	90 e0       	ldi	r25, 0x00	; 0
    486e:	17 c0       	rjmp	.+46     	; 0x489e <vfprintf+0x3b8>
    4870:	b7 01       	movw	r22, r14
    4872:	8e e2       	ldi	r24, 0x2E	; 46
    4874:	90 e0       	ldi	r25, 0x00	; 0
    4876:	0e 94 29 75 	call	0xea52	; 0xea52 <fputc>
    487a:	1e 5f       	subi	r17, 0xFE	; 254
    487c:	82 e0       	ldi	r24, 0x02	; 2
    487e:	01 e0       	ldi	r16, 0x01	; 1
    4880:	08 0f       	add	r16, r24
    4882:	f3 01       	movw	r30, r6
    4884:	e8 0f       	add	r30, r24
    4886:	f1 1d       	adc	r31, r1
    4888:	80 81       	ld	r24, Z
    488a:	b7 01       	movw	r22, r14
    488c:	90 e0       	ldi	r25, 0x00	; 0
    488e:	0e 94 29 75 	call	0xea52	; 0xea52 <fputc>
    4892:	80 2f       	mov	r24, r16
    4894:	01 13       	cpse	r16, r17
    4896:	f3 cf       	rjmp	.-26     	; 0x487e <vfprintf+0x398>
    4898:	e6 cf       	rjmp	.-52     	; 0x4866 <vfprintf+0x380>
    489a:	85 e4       	ldi	r24, 0x45	; 69
    489c:	90 e0       	ldi	r25, 0x00	; 0
    489e:	b7 01       	movw	r22, r14
    48a0:	0e 94 29 75 	call	0xea52	; 0xea52 <fputc>
    48a4:	d7 fc       	sbrc	r13, 7
    48a6:	06 c0       	rjmp	.+12     	; 0x48b4 <vfprintf+0x3ce>
    48a8:	c1 14       	cp	r12, r1
    48aa:	d1 04       	cpc	r13, r1
    48ac:	41 f4       	brne	.+16     	; 0x48be <vfprintf+0x3d8>
    48ae:	ec 85       	ldd	r30, Y+12	; 0x0c
    48b0:	e4 ff       	sbrs	r30, 4
    48b2:	05 c0       	rjmp	.+10     	; 0x48be <vfprintf+0x3d8>
    48b4:	d1 94       	neg	r13
    48b6:	c1 94       	neg	r12
    48b8:	d1 08       	sbc	r13, r1
    48ba:	8d e2       	ldi	r24, 0x2D	; 45
    48bc:	01 c0       	rjmp	.+2      	; 0x48c0 <vfprintf+0x3da>
    48be:	8b e2       	ldi	r24, 0x2B	; 43
    48c0:	b7 01       	movw	r22, r14
    48c2:	90 e0       	ldi	r25, 0x00	; 0
    48c4:	0e 94 29 75 	call	0xea52	; 0xea52 <fputc>
    48c8:	80 e3       	ldi	r24, 0x30	; 48
    48ca:	2a e0       	ldi	r18, 0x0A	; 10
    48cc:	c2 16       	cp	r12, r18
    48ce:	d1 04       	cpc	r13, r1
    48d0:	2c f0       	brlt	.+10     	; 0x48dc <vfprintf+0x3f6>
    48d2:	8f 5f       	subi	r24, 0xFF	; 255
    48d4:	fa e0       	ldi	r31, 0x0A	; 10
    48d6:	cf 1a       	sub	r12, r31
    48d8:	d1 08       	sbc	r13, r1
    48da:	f7 cf       	rjmp	.-18     	; 0x48ca <vfprintf+0x3e4>
    48dc:	b7 01       	movw	r22, r14
    48de:	90 e0       	ldi	r25, 0x00	; 0
    48e0:	0e 94 29 75 	call	0xea52	; 0xea52 <fputc>
    48e4:	b7 01       	movw	r22, r14
    48e6:	c6 01       	movw	r24, r12
    48e8:	c0 96       	adiw	r24, 0x30	; 48
    48ea:	0e 94 29 75 	call	0xea52	; 0xea52 <fputc>
    48ee:	54 c1       	rjmp	.+680    	; 0x4b98 <vfprintf+0x6b2>
    48f0:	83 36       	cpi	r24, 0x63	; 99
    48f2:	31 f0       	breq	.+12     	; 0x4900 <vfprintf+0x41a>
    48f4:	83 37       	cpi	r24, 0x73	; 115
    48f6:	79 f0       	breq	.+30     	; 0x4916 <vfprintf+0x430>
    48f8:	83 35       	cpi	r24, 0x53	; 83
    48fa:	09 f0       	breq	.+2      	; 0x48fe <vfprintf+0x418>
    48fc:	56 c0       	rjmp	.+172    	; 0x49aa <vfprintf+0x4c4>
    48fe:	20 c0       	rjmp	.+64     	; 0x4940 <vfprintf+0x45a>
    4900:	56 01       	movw	r10, r12
    4902:	32 e0       	ldi	r19, 0x02	; 2
    4904:	a3 0e       	add	r10, r19
    4906:	b1 1c       	adc	r11, r1
    4908:	f6 01       	movw	r30, r12
    490a:	80 81       	ld	r24, Z
    490c:	89 83       	std	Y+1, r24	; 0x01
    490e:	01 e0       	ldi	r16, 0x01	; 1
    4910:	10 e0       	ldi	r17, 0x00	; 0
    4912:	63 01       	movw	r12, r6
    4914:	12 c0       	rjmp	.+36     	; 0x493a <vfprintf+0x454>
    4916:	56 01       	movw	r10, r12
    4918:	f2 e0       	ldi	r31, 0x02	; 2
    491a:	af 0e       	add	r10, r31
    491c:	b1 1c       	adc	r11, r1
    491e:	f6 01       	movw	r30, r12
    4920:	c0 80       	ld	r12, Z
    4922:	d1 80       	ldd	r13, Z+1	; 0x01
    4924:	96 fe       	sbrs	r9, 6
    4926:	03 c0       	rjmp	.+6      	; 0x492e <vfprintf+0x448>
    4928:	61 2f       	mov	r22, r17
    492a:	70 e0       	ldi	r23, 0x00	; 0
    492c:	02 c0       	rjmp	.+4      	; 0x4932 <vfprintf+0x44c>
    492e:	6f ef       	ldi	r22, 0xFF	; 255
    4930:	7f ef       	ldi	r23, 0xFF	; 255
    4932:	c6 01       	movw	r24, r12
    4934:	0e 94 c4 e4 	call	0x1c988	; 0x1c988 <strnlen>
    4938:	8c 01       	movw	r16, r24
    493a:	f9 2d       	mov	r31, r9
    493c:	ff 77       	andi	r31, 0x7F	; 127
    493e:	14 c0       	rjmp	.+40     	; 0x4968 <vfprintf+0x482>
    4940:	56 01       	movw	r10, r12
    4942:	22 e0       	ldi	r18, 0x02	; 2
    4944:	a2 0e       	add	r10, r18
    4946:	b1 1c       	adc	r11, r1
    4948:	f6 01       	movw	r30, r12
    494a:	c0 80       	ld	r12, Z
    494c:	d1 80       	ldd	r13, Z+1	; 0x01
    494e:	96 fe       	sbrs	r9, 6
    4950:	03 c0       	rjmp	.+6      	; 0x4958 <vfprintf+0x472>
    4952:	61 2f       	mov	r22, r17
    4954:	70 e0       	ldi	r23, 0x00	; 0
    4956:	02 c0       	rjmp	.+4      	; 0x495c <vfprintf+0x476>
    4958:	6f ef       	ldi	r22, 0xFF	; 255
    495a:	7f ef       	ldi	r23, 0xFF	; 255
    495c:	c6 01       	movw	r24, r12
    495e:	0e 94 b2 e4 	call	0x1c964	; 0x1c964 <strnlen_P>
    4962:	8c 01       	movw	r16, r24
    4964:	f9 2d       	mov	r31, r9
    4966:	f0 68       	ori	r31, 0x80	; 128
    4968:	9f 2e       	mov	r9, r31
    496a:	f3 fd       	sbrc	r31, 3
    496c:	1a c0       	rjmp	.+52     	; 0x49a2 <vfprintf+0x4bc>
    496e:	85 2d       	mov	r24, r5
    4970:	90 e0       	ldi	r25, 0x00	; 0
    4972:	08 17       	cp	r16, r24
    4974:	19 07       	cpc	r17, r25
    4976:	a8 f4       	brcc	.+42     	; 0x49a2 <vfprintf+0x4bc>
    4978:	b7 01       	movw	r22, r14
    497a:	80 e2       	ldi	r24, 0x20	; 32
    497c:	90 e0       	ldi	r25, 0x00	; 0
    497e:	0e 94 29 75 	call	0xea52	; 0xea52 <fputc>
    4982:	5a 94       	dec	r5
    4984:	f4 cf       	rjmp	.-24     	; 0x496e <vfprintf+0x488>
    4986:	f6 01       	movw	r30, r12
    4988:	97 fc       	sbrc	r9, 7
    498a:	85 91       	lpm	r24, Z+
    498c:	97 fe       	sbrs	r9, 7
    498e:	81 91       	ld	r24, Z+
    4990:	6f 01       	movw	r12, r30
    4992:	b7 01       	movw	r22, r14
    4994:	90 e0       	ldi	r25, 0x00	; 0
    4996:	0e 94 29 75 	call	0xea52	; 0xea52 <fputc>
    499a:	51 10       	cpse	r5, r1
    499c:	5a 94       	dec	r5
    499e:	01 50       	subi	r16, 0x01	; 1
    49a0:	11 09       	sbc	r17, r1
    49a2:	01 15       	cp	r16, r1
    49a4:	11 05       	cpc	r17, r1
    49a6:	79 f7       	brne	.-34     	; 0x4986 <vfprintf+0x4a0>
    49a8:	f7 c0       	rjmp	.+494    	; 0x4b98 <vfprintf+0x6b2>
    49aa:	84 36       	cpi	r24, 0x64	; 100
    49ac:	11 f0       	breq	.+4      	; 0x49b2 <vfprintf+0x4cc>
    49ae:	89 36       	cpi	r24, 0x69	; 105
    49b0:	61 f5       	brne	.+88     	; 0x4a0a <vfprintf+0x524>
    49b2:	56 01       	movw	r10, r12
    49b4:	97 fe       	sbrs	r9, 7
    49b6:	09 c0       	rjmp	.+18     	; 0x49ca <vfprintf+0x4e4>
    49b8:	24 e0       	ldi	r18, 0x04	; 4
    49ba:	a2 0e       	add	r10, r18
    49bc:	b1 1c       	adc	r11, r1
    49be:	f6 01       	movw	r30, r12
    49c0:	60 81       	ld	r22, Z
    49c2:	71 81       	ldd	r23, Z+1	; 0x01
    49c4:	82 81       	ldd	r24, Z+2	; 0x02
    49c6:	93 81       	ldd	r25, Z+3	; 0x03
    49c8:	0a c0       	rjmp	.+20     	; 0x49de <vfprintf+0x4f8>
    49ca:	f2 e0       	ldi	r31, 0x02	; 2
    49cc:	af 0e       	add	r10, r31
    49ce:	b1 1c       	adc	r11, r1
    49d0:	f6 01       	movw	r30, r12
    49d2:	60 81       	ld	r22, Z
    49d4:	71 81       	ldd	r23, Z+1	; 0x01
    49d6:	07 2e       	mov	r0, r23
    49d8:	00 0c       	add	r0, r0
    49da:	88 0b       	sbc	r24, r24
    49dc:	99 0b       	sbc	r25, r25
    49de:	f9 2d       	mov	r31, r9
    49e0:	ff 76       	andi	r31, 0x6F	; 111
    49e2:	9f 2e       	mov	r9, r31
    49e4:	97 ff       	sbrs	r25, 7
    49e6:	09 c0       	rjmp	.+18     	; 0x49fa <vfprintf+0x514>
    49e8:	90 95       	com	r25
    49ea:	80 95       	com	r24
    49ec:	70 95       	com	r23
    49ee:	61 95       	neg	r22
    49f0:	7f 4f       	sbci	r23, 0xFF	; 255
    49f2:	8f 4f       	sbci	r24, 0xFF	; 255
    49f4:	9f 4f       	sbci	r25, 0xFF	; 255
    49f6:	f0 68       	ori	r31, 0x80	; 128
    49f8:	9f 2e       	mov	r9, r31
    49fa:	2a e0       	ldi	r18, 0x0A	; 10
    49fc:	30 e0       	ldi	r19, 0x00	; 0
    49fe:	a3 01       	movw	r20, r6
    4a00:	0e 94 cf e4 	call	0x1c99e	; 0x1c99e <__ultoa_invert>
    4a04:	c8 2e       	mov	r12, r24
    4a06:	c6 18       	sub	r12, r6
    4a08:	3f c0       	rjmp	.+126    	; 0x4a88 <vfprintf+0x5a2>
    4a0a:	09 2d       	mov	r16, r9
    4a0c:	85 37       	cpi	r24, 0x75	; 117
    4a0e:	21 f4       	brne	.+8      	; 0x4a18 <vfprintf+0x532>
    4a10:	0f 7e       	andi	r16, 0xEF	; 239
    4a12:	2a e0       	ldi	r18, 0x0A	; 10
    4a14:	30 e0       	ldi	r19, 0x00	; 0
    4a16:	1d c0       	rjmp	.+58     	; 0x4a52 <vfprintf+0x56c>
    4a18:	09 7f       	andi	r16, 0xF9	; 249
    4a1a:	8f 36       	cpi	r24, 0x6F	; 111
    4a1c:	91 f0       	breq	.+36     	; 0x4a42 <vfprintf+0x55c>
    4a1e:	18 f4       	brcc	.+6      	; 0x4a26 <vfprintf+0x540>
    4a20:	88 35       	cpi	r24, 0x58	; 88
    4a22:	59 f0       	breq	.+22     	; 0x4a3a <vfprintf+0x554>
    4a24:	c3 c0       	rjmp	.+390    	; 0x4bac <vfprintf+0x6c6>
    4a26:	80 37       	cpi	r24, 0x70	; 112
    4a28:	19 f0       	breq	.+6      	; 0x4a30 <vfprintf+0x54a>
    4a2a:	88 37       	cpi	r24, 0x78	; 120
    4a2c:	11 f0       	breq	.+4      	; 0x4a32 <vfprintf+0x54c>
    4a2e:	be c0       	rjmp	.+380    	; 0x4bac <vfprintf+0x6c6>
    4a30:	00 61       	ori	r16, 0x10	; 16
    4a32:	04 ff       	sbrs	r16, 4
    4a34:	09 c0       	rjmp	.+18     	; 0x4a48 <vfprintf+0x562>
    4a36:	04 60       	ori	r16, 0x04	; 4
    4a38:	07 c0       	rjmp	.+14     	; 0x4a48 <vfprintf+0x562>
    4a3a:	94 fe       	sbrs	r9, 4
    4a3c:	08 c0       	rjmp	.+16     	; 0x4a4e <vfprintf+0x568>
    4a3e:	06 60       	ori	r16, 0x06	; 6
    4a40:	06 c0       	rjmp	.+12     	; 0x4a4e <vfprintf+0x568>
    4a42:	28 e0       	ldi	r18, 0x08	; 8
    4a44:	30 e0       	ldi	r19, 0x00	; 0
    4a46:	05 c0       	rjmp	.+10     	; 0x4a52 <vfprintf+0x56c>
    4a48:	20 e1       	ldi	r18, 0x10	; 16
    4a4a:	30 e0       	ldi	r19, 0x00	; 0
    4a4c:	02 c0       	rjmp	.+4      	; 0x4a52 <vfprintf+0x56c>
    4a4e:	20 e1       	ldi	r18, 0x10	; 16
    4a50:	32 e0       	ldi	r19, 0x02	; 2
    4a52:	56 01       	movw	r10, r12
    4a54:	07 ff       	sbrs	r16, 7
    4a56:	09 c0       	rjmp	.+18     	; 0x4a6a <vfprintf+0x584>
    4a58:	84 e0       	ldi	r24, 0x04	; 4
    4a5a:	a8 0e       	add	r10, r24
    4a5c:	b1 1c       	adc	r11, r1
    4a5e:	f6 01       	movw	r30, r12
    4a60:	60 81       	ld	r22, Z
    4a62:	71 81       	ldd	r23, Z+1	; 0x01
    4a64:	82 81       	ldd	r24, Z+2	; 0x02
    4a66:	93 81       	ldd	r25, Z+3	; 0x03
    4a68:	08 c0       	rjmp	.+16     	; 0x4a7a <vfprintf+0x594>
    4a6a:	f2 e0       	ldi	r31, 0x02	; 2
    4a6c:	af 0e       	add	r10, r31
    4a6e:	b1 1c       	adc	r11, r1
    4a70:	f6 01       	movw	r30, r12
    4a72:	60 81       	ld	r22, Z
    4a74:	71 81       	ldd	r23, Z+1	; 0x01
    4a76:	80 e0       	ldi	r24, 0x00	; 0
    4a78:	90 e0       	ldi	r25, 0x00	; 0
    4a7a:	a3 01       	movw	r20, r6
    4a7c:	0e 94 cf e4 	call	0x1c99e	; 0x1c99e <__ultoa_invert>
    4a80:	c8 2e       	mov	r12, r24
    4a82:	c6 18       	sub	r12, r6
    4a84:	0f 77       	andi	r16, 0x7F	; 127
    4a86:	90 2e       	mov	r9, r16
    4a88:	96 fe       	sbrs	r9, 6
    4a8a:	0b c0       	rjmp	.+22     	; 0x4aa2 <vfprintf+0x5bc>
    4a8c:	09 2d       	mov	r16, r9
    4a8e:	0e 7f       	andi	r16, 0xFE	; 254
    4a90:	c1 16       	cp	r12, r17
    4a92:	50 f4       	brcc	.+20     	; 0x4aa8 <vfprintf+0x5c2>
    4a94:	94 fe       	sbrs	r9, 4
    4a96:	0a c0       	rjmp	.+20     	; 0x4aac <vfprintf+0x5c6>
    4a98:	92 fc       	sbrc	r9, 2
    4a9a:	08 c0       	rjmp	.+16     	; 0x4aac <vfprintf+0x5c6>
    4a9c:	09 2d       	mov	r16, r9
    4a9e:	0e 7e       	andi	r16, 0xEE	; 238
    4aa0:	05 c0       	rjmp	.+10     	; 0x4aac <vfprintf+0x5c6>
    4aa2:	dc 2c       	mov	r13, r12
    4aa4:	09 2d       	mov	r16, r9
    4aa6:	03 c0       	rjmp	.+6      	; 0x4aae <vfprintf+0x5c8>
    4aa8:	dc 2c       	mov	r13, r12
    4aaa:	01 c0       	rjmp	.+2      	; 0x4aae <vfprintf+0x5c8>
    4aac:	d1 2e       	mov	r13, r17
    4aae:	04 ff       	sbrs	r16, 4
    4ab0:	0d c0       	rjmp	.+26     	; 0x4acc <vfprintf+0x5e6>
    4ab2:	fe 01       	movw	r30, r28
    4ab4:	ec 0d       	add	r30, r12
    4ab6:	f1 1d       	adc	r31, r1
    4ab8:	80 81       	ld	r24, Z
    4aba:	80 33       	cpi	r24, 0x30	; 48
    4abc:	11 f4       	brne	.+4      	; 0x4ac2 <vfprintf+0x5dc>
    4abe:	09 7e       	andi	r16, 0xE9	; 233
    4ac0:	09 c0       	rjmp	.+18     	; 0x4ad4 <vfprintf+0x5ee>
    4ac2:	02 ff       	sbrs	r16, 2
    4ac4:	06 c0       	rjmp	.+12     	; 0x4ad2 <vfprintf+0x5ec>
    4ac6:	d3 94       	inc	r13
    4ac8:	d3 94       	inc	r13
    4aca:	04 c0       	rjmp	.+8      	; 0x4ad4 <vfprintf+0x5ee>
    4acc:	80 2f       	mov	r24, r16
    4ace:	86 78       	andi	r24, 0x86	; 134
    4ad0:	09 f0       	breq	.+2      	; 0x4ad4 <vfprintf+0x5ee>
    4ad2:	d3 94       	inc	r13
    4ad4:	03 fd       	sbrc	r16, 3
    4ad6:	11 c0       	rjmp	.+34     	; 0x4afa <vfprintf+0x614>
    4ad8:	00 ff       	sbrs	r16, 0
    4ada:	06 c0       	rjmp	.+12     	; 0x4ae8 <vfprintf+0x602>
    4adc:	1c 2d       	mov	r17, r12
    4ade:	d5 14       	cp	r13, r5
    4ae0:	80 f4       	brcc	.+32     	; 0x4b02 <vfprintf+0x61c>
    4ae2:	15 0d       	add	r17, r5
    4ae4:	1d 19       	sub	r17, r13
    4ae6:	0d c0       	rjmp	.+26     	; 0x4b02 <vfprintf+0x61c>
    4ae8:	d5 14       	cp	r13, r5
    4aea:	58 f4       	brcc	.+22     	; 0x4b02 <vfprintf+0x61c>
    4aec:	b7 01       	movw	r22, r14
    4aee:	80 e2       	ldi	r24, 0x20	; 32
    4af0:	90 e0       	ldi	r25, 0x00	; 0
    4af2:	0e 94 29 75 	call	0xea52	; 0xea52 <fputc>
    4af6:	d3 94       	inc	r13
    4af8:	f7 cf       	rjmp	.-18     	; 0x4ae8 <vfprintf+0x602>
    4afa:	d5 14       	cp	r13, r5
    4afc:	10 f4       	brcc	.+4      	; 0x4b02 <vfprintf+0x61c>
    4afe:	5d 18       	sub	r5, r13
    4b00:	01 c0       	rjmp	.+2      	; 0x4b04 <vfprintf+0x61e>
    4b02:	51 2c       	mov	r5, r1
    4b04:	04 ff       	sbrs	r16, 4
    4b06:	10 c0       	rjmp	.+32     	; 0x4b28 <vfprintf+0x642>
    4b08:	b7 01       	movw	r22, r14
    4b0a:	80 e3       	ldi	r24, 0x30	; 48
    4b0c:	90 e0       	ldi	r25, 0x00	; 0
    4b0e:	0e 94 29 75 	call	0xea52	; 0xea52 <fputc>
    4b12:	02 ff       	sbrs	r16, 2
    4b14:	17 c0       	rjmp	.+46     	; 0x4b44 <vfprintf+0x65e>
    4b16:	01 fd       	sbrc	r16, 1
    4b18:	03 c0       	rjmp	.+6      	; 0x4b20 <vfprintf+0x63a>
    4b1a:	88 e7       	ldi	r24, 0x78	; 120
    4b1c:	90 e0       	ldi	r25, 0x00	; 0
    4b1e:	02 c0       	rjmp	.+4      	; 0x4b24 <vfprintf+0x63e>
    4b20:	88 e5       	ldi	r24, 0x58	; 88
    4b22:	90 e0       	ldi	r25, 0x00	; 0
    4b24:	b7 01       	movw	r22, r14
    4b26:	0c c0       	rjmp	.+24     	; 0x4b40 <vfprintf+0x65a>
    4b28:	80 2f       	mov	r24, r16
    4b2a:	86 78       	andi	r24, 0x86	; 134
    4b2c:	59 f0       	breq	.+22     	; 0x4b44 <vfprintf+0x65e>
    4b2e:	01 ff       	sbrs	r16, 1
    4b30:	02 c0       	rjmp	.+4      	; 0x4b36 <vfprintf+0x650>
    4b32:	8b e2       	ldi	r24, 0x2B	; 43
    4b34:	01 c0       	rjmp	.+2      	; 0x4b38 <vfprintf+0x652>
    4b36:	80 e2       	ldi	r24, 0x20	; 32
    4b38:	07 fd       	sbrc	r16, 7
    4b3a:	8d e2       	ldi	r24, 0x2D	; 45
    4b3c:	b7 01       	movw	r22, r14
    4b3e:	90 e0       	ldi	r25, 0x00	; 0
    4b40:	0e 94 29 75 	call	0xea52	; 0xea52 <fputc>
    4b44:	c1 16       	cp	r12, r17
    4b46:	38 f4       	brcc	.+14     	; 0x4b56 <vfprintf+0x670>
    4b48:	b7 01       	movw	r22, r14
    4b4a:	80 e3       	ldi	r24, 0x30	; 48
    4b4c:	90 e0       	ldi	r25, 0x00	; 0
    4b4e:	0e 94 29 75 	call	0xea52	; 0xea52 <fputc>
    4b52:	11 50       	subi	r17, 0x01	; 1
    4b54:	f7 cf       	rjmp	.-18     	; 0x4b44 <vfprintf+0x65e>
    4b56:	ca 94       	dec	r12
    4b58:	f3 01       	movw	r30, r6
    4b5a:	ec 0d       	add	r30, r12
    4b5c:	f1 1d       	adc	r31, r1
    4b5e:	80 81       	ld	r24, Z
    4b60:	b7 01       	movw	r22, r14
    4b62:	90 e0       	ldi	r25, 0x00	; 0
    4b64:	0e 94 29 75 	call	0xea52	; 0xea52 <fputc>
    4b68:	c1 10       	cpse	r12, r1
    4b6a:	f5 cf       	rjmp	.-22     	; 0x4b56 <vfprintf+0x670>
    4b6c:	15 c0       	rjmp	.+42     	; 0x4b98 <vfprintf+0x6b2>
    4b6e:	f4 e0       	ldi	r31, 0x04	; 4
    4b70:	f5 15       	cp	r31, r5
    4b72:	60 f5       	brcc	.+88     	; 0x4bcc <vfprintf+0x6e6>
    4b74:	84 e0       	ldi	r24, 0x04	; 4
    4b76:	58 1a       	sub	r5, r24
    4b78:	93 fe       	sbrs	r9, 3
    4b7a:	1f c0       	rjmp	.+62     	; 0x4bba <vfprintf+0x6d4>
    4b7c:	01 11       	cpse	r16, r1
    4b7e:	27 c0       	rjmp	.+78     	; 0x4bce <vfprintf+0x6e8>
    4b80:	2c 85       	ldd	r18, Y+12	; 0x0c
    4b82:	23 ff       	sbrs	r18, 3
    4b84:	2a c0       	rjmp	.+84     	; 0x4bda <vfprintf+0x6f4>
    4b86:	06 ed       	ldi	r16, 0xD6	; 214
    4b88:	11 e0       	ldi	r17, 0x01	; 1
    4b8a:	39 2d       	mov	r19, r9
    4b8c:	30 71       	andi	r19, 0x10	; 16
    4b8e:	93 2e       	mov	r9, r19
    4b90:	f8 01       	movw	r30, r16
    4b92:	84 91       	lpm	r24, Z
    4b94:	81 11       	cpse	r24, r1
    4b96:	24 c0       	rjmp	.+72     	; 0x4be0 <vfprintf+0x6fa>
    4b98:	55 20       	and	r5, r5
    4b9a:	09 f4       	brne	.+2      	; 0x4b9e <vfprintf+0x6b8>
    4b9c:	e4 cc       	rjmp	.-1592   	; 0x4566 <vfprintf+0x80>
    4b9e:	b7 01       	movw	r22, r14
    4ba0:	80 e2       	ldi	r24, 0x20	; 32
    4ba2:	90 e0       	ldi	r25, 0x00	; 0
    4ba4:	0e 94 29 75 	call	0xea52	; 0xea52 <fputc>
    4ba8:	5a 94       	dec	r5
    4baa:	f6 cf       	rjmp	.-20     	; 0x4b98 <vfprintf+0x6b2>
    4bac:	f7 01       	movw	r30, r14
    4bae:	86 81       	ldd	r24, Z+6	; 0x06
    4bb0:	97 81       	ldd	r25, Z+7	; 0x07
    4bb2:	26 c0       	rjmp	.+76     	; 0x4c00 <vfprintf+0x71a>
    4bb4:	8f ef       	ldi	r24, 0xFF	; 255
    4bb6:	9f ef       	ldi	r25, 0xFF	; 255
    4bb8:	23 c0       	rjmp	.+70     	; 0x4c00 <vfprintf+0x71a>
    4bba:	b7 01       	movw	r22, r14
    4bbc:	80 e2       	ldi	r24, 0x20	; 32
    4bbe:	90 e0       	ldi	r25, 0x00	; 0
    4bc0:	0e 94 29 75 	call	0xea52	; 0xea52 <fputc>
    4bc4:	5a 94       	dec	r5
    4bc6:	51 10       	cpse	r5, r1
    4bc8:	f8 cf       	rjmp	.-16     	; 0x4bba <vfprintf+0x6d4>
    4bca:	d8 cf       	rjmp	.-80     	; 0x4b7c <vfprintf+0x696>
    4bcc:	51 2c       	mov	r5, r1
    4bce:	b7 01       	movw	r22, r14
    4bd0:	80 2f       	mov	r24, r16
    4bd2:	90 e0       	ldi	r25, 0x00	; 0
    4bd4:	0e 94 29 75 	call	0xea52	; 0xea52 <fputc>
    4bd8:	d3 cf       	rjmp	.-90     	; 0x4b80 <vfprintf+0x69a>
    4bda:	0a ed       	ldi	r16, 0xDA	; 218
    4bdc:	11 e0       	ldi	r17, 0x01	; 1
    4bde:	d5 cf       	rjmp	.-86     	; 0x4b8a <vfprintf+0x6a4>
    4be0:	91 10       	cpse	r9, r1
    4be2:	80 52       	subi	r24, 0x20	; 32
    4be4:	b7 01       	movw	r22, r14
    4be6:	90 e0       	ldi	r25, 0x00	; 0
    4be8:	0e 94 29 75 	call	0xea52	; 0xea52 <fputc>
    4bec:	0f 5f       	subi	r16, 0xFF	; 255
    4bee:	1f 4f       	sbci	r17, 0xFF	; 255
    4bf0:	cf cf       	rjmp	.-98     	; 0x4b90 <vfprintf+0x6aa>
    4bf2:	23 e0       	ldi	r18, 0x03	; 3
    4bf4:	25 15       	cp	r18, r5
    4bf6:	10 f4       	brcc	.+4      	; 0x4bfc <vfprintf+0x716>
    4bf8:	83 e0       	ldi	r24, 0x03	; 3
    4bfa:	bd cf       	rjmp	.-134    	; 0x4b76 <vfprintf+0x690>
    4bfc:	51 2c       	mov	r5, r1
    4bfe:	c0 cf       	rjmp	.-128    	; 0x4b80 <vfprintf+0x69a>
    4c00:	60 96       	adiw	r28, 0x10	; 16
    4c02:	0f b6       	in	r0, 0x3f	; 63
    4c04:	f8 94       	cli
    4c06:	de bf       	out	0x3e, r29	; 62
    4c08:	0f be       	out	0x3f, r0	; 63
    4c0a:	cd bf       	out	0x3d, r28	; 61
    4c0c:	df 91       	pop	r29
    4c0e:	cf 91       	pop	r28
    4c10:	1f 91       	pop	r17
    4c12:	0f 91       	pop	r16
    4c14:	ff 90       	pop	r15
    4c16:	ef 90       	pop	r14
    4c18:	df 90       	pop	r13
    4c1a:	cf 90       	pop	r12
    4c1c:	bf 90       	pop	r11
    4c1e:	af 90       	pop	r10
    4c20:	9f 90       	pop	r9
    4c22:	8f 90       	pop	r8
    4c24:	7f 90       	pop	r7
    4c26:	6f 90       	pop	r6
    4c28:	5f 90       	pop	r5
    4c2a:	4f 90       	pop	r4
    4c2c:	3f 90       	pop	r3
    4c2e:	2f 90       	pop	r2
    4c30:	08 95       	ret

00004c32 <chip_select>:
/// @brief SPI CS pin status
/// return CS GPIO pin number or 0xff
uint8_t spi_chip_select_status()
{
    return(_cs_pin);
}
    4c32:	e8 2f       	mov	r30, r24
    4c34:	e6 95       	lsr	r30
    4c36:	e6 95       	lsr	r30
    4c38:	e6 95       	lsr	r30
    4c3a:	93 e0       	ldi	r25, 0x03	; 3
    4c3c:	e9 9f       	mul	r30, r25
    4c3e:	f0 01       	movw	r30, r0
    4c40:	11 24       	eor	r1, r1
    4c42:	32 a1       	ldd	r19, Z+34	; 0x22
    4c44:	28 2f       	mov	r18, r24
    4c46:	27 70       	andi	r18, 0x07	; 7
    4c48:	81 e0       	ldi	r24, 0x01	; 1
    4c4a:	90 e0       	ldi	r25, 0x00	; 0
    4c4c:	01 c0       	rjmp	.+2      	; 0x4c50 <chip_select+0x1e>
    4c4e:	88 0f       	add	r24, r24
    4c50:	2a 95       	dec	r18
    4c52:	ea f7       	brpl	.-6      	; 0x4c4e <chip_select+0x1c>
    4c54:	98 2f       	mov	r25, r24
    4c56:	90 95       	com	r25
    4c58:	93 23       	and	r25, r19
    4c5a:	92 a3       	std	Z+34, r25	; 0x22
    4c5c:	91 a1       	ldd	r25, Z+33	; 0x21
    4c5e:	89 2b       	or	r24, r25
    4c60:	81 a3       	std	Z+33, r24	; 0x21
    4c62:	08 95       	ret

00004c64 <chip_deselect>:
    4c64:	e8 2f       	mov	r30, r24
    4c66:	e6 95       	lsr	r30
    4c68:	e6 95       	lsr	r30
    4c6a:	e6 95       	lsr	r30
    4c6c:	93 e0       	ldi	r25, 0x03	; 3
    4c6e:	e9 9f       	mul	r30, r25
    4c70:	f0 01       	movw	r30, r0
    4c72:	11 24       	eor	r1, r1
    4c74:	32 a1       	ldd	r19, Z+34	; 0x22
    4c76:	28 2f       	mov	r18, r24
    4c78:	27 70       	andi	r18, 0x07	; 7
    4c7a:	81 e0       	ldi	r24, 0x01	; 1
    4c7c:	90 e0       	ldi	r25, 0x00	; 0
    4c7e:	01 c0       	rjmp	.+2      	; 0x4c82 <chip_deselect+0x1e>
    4c80:	88 0f       	add	r24, r24
    4c82:	2a 95       	dec	r18
    4c84:	ea f7       	brpl	.-6      	; 0x4c80 <chip_deselect+0x1c>
    4c86:	93 2f       	mov	r25, r19
    4c88:	98 2b       	or	r25, r24
    4c8a:	92 a3       	std	Z+34, r25	; 0x22
    4c8c:	91 a1       	ldd	r25, Z+33	; 0x21
    4c8e:	89 2b       	or	r24, r25
    4c90:	81 a3       	std	Z+33, r24	; 0x21
    4c92:	08 95       	ret

00004c94 <chip_select_init>:
    4c94:	e7 cf       	rjmp	.-50     	; 0x4c64 <chip_deselect>
    4c96:	08 95       	ret

00004c98 <spi_end>:
    4c98:	cf 93       	push	r28
    4c9a:	ad b7       	in	r26, 0x3d	; 61
    4c9c:	be b7       	in	r27, 0x3e	; 62
    4c9e:	17 97       	sbiw	r26, 0x07	; 7
    4ca0:	0f b6       	in	r0, 0x3f	; 63
    4ca2:	f8 94       	cli
    4ca4:	be bf       	out	0x3e, r27	; 62
    4ca6:	0f be       	out	0x3f, r0	; 63
    4ca8:	ad bf       	out	0x3d, r26	; 61
    4caa:	c8 2f       	mov	r28, r24
    4cac:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_cs_pin>
    4cb0:	8c 17       	cp	r24, r28
    4cb2:	99 f0       	breq	.+38     	; 0x4cda <spi_end+0x42>
    4cb4:	8f 3f       	cpi	r24, 0xFF	; 255
    4cb6:	89 f0       	breq	.+34     	; 0x4cda <spi_end+0x42>
    4cb8:	2c 2f       	mov	r18, r28
    4cba:	30 e0       	ldi	r19, 0x00	; 0
    4cbc:	ed b7       	in	r30, 0x3d	; 61
    4cbe:	fe b7       	in	r31, 0x3e	; 62
    4cc0:	37 83       	std	Z+7, r19	; 0x07
    4cc2:	26 83       	std	Z+6, r18	; 0x06
    4cc4:	90 e0       	ldi	r25, 0x00	; 0
    4cc6:	95 83       	std	Z+5, r25	; 0x05
    4cc8:	84 83       	std	Z+4, r24	; 0x04
    4cca:	88 ed       	ldi	r24, 0xD8	; 216
    4ccc:	92 e0       	ldi	r25, 0x02	; 2
    4cce:	a0 e0       	ldi	r26, 0x00	; 0
    4cd0:	81 83       	std	Z+1, r24	; 0x01
    4cd2:	92 83       	std	Z+2, r25	; 0x02
    4cd4:	a3 83       	std	Z+3, r26	; 0x03
    4cd6:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    4cda:	8c 2f       	mov	r24, r28
    4cdc:	c3 df       	rcall	.-122    	; 0x4c64 <chip_deselect>
    4cde:	8f ef       	ldi	r24, 0xFF	; 255
    4ce0:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_cs_pin>
    4ce4:	ad b7       	in	r26, 0x3d	; 61
    4ce6:	be b7       	in	r27, 0x3e	; 62
    4ce8:	17 96       	adiw	r26, 0x07	; 7
    4cea:	0f b6       	in	r0, 0x3f	; 63
    4cec:	f8 94       	cli
    4cee:	be bf       	out	0x3e, r27	; 62
    4cf0:	0f be       	out	0x3f, r0	; 63
    4cf2:	ad bf       	out	0x3d, r26	; 61
    4cf4:	cf 91       	pop	r28
    4cf6:	08 95       	ret

00004cf8 <spi_TX_buffer>:
/// @brief SPI write buffer
/// @param[in] *data: transmit buffer
/// @param[in] count: number of bytes to write
/// @return  void
void spi_TX_buffer(const uint8_t *data, int count)
{
    4cf8:	c2 c4       	rjmp	.+2436   	; 0x567e <SPI0_TX>
    4cfa:	08 95       	ret

00004cfc <spi_RX_buffer>:
    4cfc:	ea c4       	rjmp	.+2516   	; 0x56d2 <SPI0_RX>
    4cfe:	08 95       	ret

00004d00 <spi_TX>:
    4d00:	a1 e0       	ldi	r26, 0x01	; 1
    4d02:	b0 e0       	ldi	r27, 0x00	; 0
    4d04:	e6 e8       	ldi	r30, 0x86	; 134
    4d06:	f6 e2       	ldi	r31, 0x26	; 38
    4d08:	0c 94 ee df 	jmp	0x1bfdc	; 0x1bfdc <__prologue_saves__+0x20>
    4d0c:	89 83       	std	Y+1, r24	; 0x01
    4d0e:	61 e0       	ldi	r22, 0x01	; 1
    4d10:	70 e0       	ldi	r23, 0x00	; 0
    4d12:	ce 01       	movw	r24, r28
    4d14:	01 96       	adiw	r24, 0x01	; 1
    4d16:	b3 d4       	rcall	.+2406   	; 0x567e <SPI0_TX>
    4d18:	21 96       	adiw	r28, 0x01	; 1
    4d1a:	e2 e0       	ldi	r30, 0x02	; 2
    4d1c:	0c 94 0a e0 	jmp	0x1c014	; 0x1c014 <__epilogue_restores__+0x20>

00004d20 <spi_init>:
    4d20:	cf 92       	push	r12
    4d22:	df 92       	push	r13
    4d24:	ef 92       	push	r14
    4d26:	ff 92       	push	r15
    4d28:	6b 01       	movw	r12, r22
    4d2a:	7c 01       	movw	r14, r24
    4d2c:	84 2f       	mov	r24, r20
    4d2e:	9a df       	rcall	.-204    	; 0x4c64 <chip_deselect>
    4d30:	8f ef       	ldi	r24, 0xFF	; 255
    4d32:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_cs_pin>
    4d36:	c7 01       	movw	r24, r14
    4d38:	b6 01       	movw	r22, r12
    4d3a:	74 d4       	rcall	.+2280   	; 0x5624 <SPI0_Init>
    4d3c:	80 e0       	ldi	r24, 0x00	; 0
    4d3e:	90 e0       	ldi	r25, 0x00	; 0
    4d40:	31 d4       	rcall	.+2146   	; 0x55a4 <SPI0_Mode>
    4d42:	8f ef       	ldi	r24, 0xFF	; 255
    4d44:	dd df       	rcall	.-70     	; 0x4d00 <spi_TX>
    4d46:	c0 92 06 01 	sts	0x0106, r12	; 0x800106 <_spi_clock>
    4d4a:	d0 92 07 01 	sts	0x0107, r13	; 0x800107 <_spi_clock+0x1>
    4d4e:	e0 92 08 01 	sts	0x0108, r14	; 0x800108 <_spi_clock+0x2>
    4d52:	f0 92 09 01 	sts	0x0109, r15	; 0x800109 <_spi_clock+0x3>
    4d56:	ff 90       	pop	r15
    4d58:	ef 90       	pop	r14
    4d5a:	df 90       	pop	r13
    4d5c:	cf 90       	pop	r12
    4d5e:	08 95       	ret

00004d60 <spi_begin>:
    4d60:	cf 92       	push	r12
    4d62:	df 92       	push	r13
    4d64:	ef 92       	push	r14
    4d66:	ff 92       	push	r15
    4d68:	cf 93       	push	r28
    4d6a:	df 93       	push	r29
    4d6c:	ad b7       	in	r26, 0x3d	; 61
    4d6e:	be b7       	in	r27, 0x3e	; 62
    4d70:	17 97       	sbiw	r26, 0x07	; 7
    4d72:	0f b6       	in	r0, 0x3f	; 63
    4d74:	f8 94       	cli
    4d76:	be bf       	out	0x3e, r27	; 62
    4d78:	0f be       	out	0x3f, r0	; 63
    4d7a:	ad bf       	out	0x3d, r26	; 61
    4d7c:	6b 01       	movw	r12, r22
    4d7e:	7c 01       	movw	r14, r24
    4d80:	ea 01       	movw	r28, r20
    4d82:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_cs_pin>
    4d86:	8f 3f       	cpi	r24, 0xFF	; 255
    4d88:	79 f0       	breq	.+30     	; 0x4da8 <spi_begin+0x48>
    4d8a:	ed b7       	in	r30, 0x3d	; 61
    4d8c:	fe b7       	in	r31, 0x3e	; 62
    4d8e:	46 83       	std	Z+6, r20	; 0x06
    4d90:	d7 83       	std	Z+7, r29	; 0x07
    4d92:	90 e0       	ldi	r25, 0x00	; 0
    4d94:	95 83       	std	Z+5, r25	; 0x05
    4d96:	84 83       	std	Z+4, r24	; 0x04
    4d98:	86 ef       	ldi	r24, 0xF6	; 246
    4d9a:	92 e0       	ldi	r25, 0x02	; 2
    4d9c:	a0 e0       	ldi	r26, 0x00	; 0
    4d9e:	81 83       	std	Z+1, r24	; 0x01
    4da0:	92 83       	std	Z+2, r25	; 0x02
    4da2:	a3 83       	std	Z+3, r26	; 0x03
    4da4:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    4da8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_spi_clock>
    4dac:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_spi_clock+0x1>
    4db0:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_spi_clock+0x2>
    4db4:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_spi_clock+0x3>
    4db8:	8c 15       	cp	r24, r12
    4dba:	9d 05       	cpc	r25, r13
    4dbc:	ae 05       	cpc	r26, r14
    4dbe:	bf 05       	cpc	r27, r15
    4dc0:	21 f0       	breq	.+8      	; 0x4dca <spi_begin+0x6a>
    4dc2:	ae 01       	movw	r20, r28
    4dc4:	c7 01       	movw	r24, r14
    4dc6:	b6 01       	movw	r22, r12
    4dc8:	ab df       	rcall	.-170    	; 0x4d20 <spi_init>
    4dca:	8c 2f       	mov	r24, r28
    4dcc:	32 df       	rcall	.-412    	; 0x4c32 <chip_select>
    4dce:	c0 93 0a 01 	sts	0x010A, r28	; 0x80010a <_cs_pin>
    4dd2:	ad b7       	in	r26, 0x3d	; 61
    4dd4:	be b7       	in	r27, 0x3e	; 62
    4dd6:	17 96       	adiw	r26, 0x07	; 7
    4dd8:	0f b6       	in	r0, 0x3f	; 63
    4dda:	f8 94       	cli
    4ddc:	be bf       	out	0x3e, r27	; 62
    4dde:	0f be       	out	0x3f, r0	; 63
    4de0:	ad bf       	out	0x3d, r26	; 61
    4de2:	df 91       	pop	r29
    4de4:	cf 91       	pop	r28
    4de6:	ff 90       	pop	r15
    4de8:	ef 90       	pop	r14
    4dea:	df 90       	pop	r13
    4dec:	cf 90       	pop	r12
    4dee:	08 95       	ret

00004df0 <spi_TXRX>:
    4df0:	a1 e0       	ldi	r26, 0x01	; 1
    4df2:	b0 e0       	ldi	r27, 0x00	; 0
    4df4:	ee ef       	ldi	r30, 0xFE	; 254
    4df6:	f6 e2       	ldi	r31, 0x26	; 38
    4df8:	0c 94 ee df 	jmp	0x1bfdc	; 0x1bfdc <__prologue_saves__+0x20>
    4dfc:	89 83       	std	Y+1, r24	; 0x01
    4dfe:	61 e0       	ldi	r22, 0x01	; 1
    4e00:	70 e0       	ldi	r23, 0x00	; 0
    4e02:	ce 01       	movw	r24, r28
    4e04:	01 96       	adiw	r24, 0x01	; 1
    4e06:	4f d4       	rcall	.+2206   	; 0x56a6 <SPI0_TXRX>
    4e08:	89 81       	ldd	r24, Y+1	; 0x01
    4e0a:	21 96       	adiw	r28, 0x01	; 1
    4e0c:	e2 e0       	ldi	r30, 0x02	; 2
    4e0e:	0c 94 0a e0 	jmp	0x1c014	; 0x1c014 <__epilogue_restores__+0x20>

00004e12 <freeRam>:
/// - avr-libc dependent code.
///
/// @return free memory in bytes.
/// @see malloc().
uint16_t freeRam ()
{
    4e12:	a2 e0       	ldi	r26, 0x02	; 2
    4e14:	b0 e0       	ldi	r27, 0x00	; 0
    4e16:	ef e0       	ldi	r30, 0x0F	; 15
    4e18:	f7 e2       	ldi	r31, 0x27	; 39
    4e1a:	0c 94 ee df 	jmp	0x1bfdc	; 0x1bfdc <__prologue_saves__+0x20>
    extern void * __heap_start;
    extern void * __brkval;
    int ret;
    uint16_t top;

    if(__brkval)
    4e1e:	20 91 70 21 	lds	r18, 0x2170	; 0x802170 <__brkval>
    4e22:	30 91 71 21 	lds	r19, 0x2171	; 0x802171 <__brkval+0x1>
    4e26:	21 15       	cp	r18, r1
    4e28:	31 05       	cpc	r19, r1
    4e2a:	11 f4       	brne	.+4      	; 0x4e30 <freeRam+0x1e>
        top = (uint16_t) __brkval;
    else
        top = (uint16_t) & __heap_start;
    4e2c:	24 e7       	ldi	r18, 0x74	; 116
    4e2e:	31 e2       	ldi	r19, 0x21	; 33

    ret = (uint16_t) &v - top;
    return ( ret );
}
    4e30:	ce 01       	movw	r24, r28
    4e32:	01 96       	adiw	r24, 0x01	; 1
    4e34:	82 1b       	sub	r24, r18
    4e36:	93 0b       	sbc	r25, r19
    4e38:	22 96       	adiw	r28, 0x02	; 2
    4e3a:	e2 e0       	ldi	r30, 0x02	; 2
    4e3c:	0c 94 0a e0 	jmp	0x1c014	; 0x1c014 <__epilogue_restores__+0x20>

00004e40 <PrintFree>:
/// - avr-libc dependent code.
/// - Stack, BSS, Data, Heap, Malloc.
///
/// @return  void
void PrintFree()
{
    4e40:	a9 e0       	ldi	r26, 0x09	; 9
    4e42:	b0 e0       	ldi	r27, 0x00	; 0
    4e44:	e6 e2       	ldi	r30, 0x26	; 38
    4e46:	f7 e2       	ldi	r31, 0x27	; 39
    4e48:	0c 94 ee df 	jmp	0x1bfdc	; 0x1bfdc <__prologue_saves__+0x20>
    extern void * __data_start;
    extern void * __data_end;
    extern void * __stack;
    uint16_t ram;

    ram = freeRam();
    4e4c:	e2 df       	rcall	.-60     	; 0x4e12 <freeRam>
    4e4e:	99 87       	std	Y+9, r25	; 0x09

    printf("Free Ram:%u\n", ram);
    4e50:	88 87       	std	Y+8, r24	; 0x08
    4e52:	ed b7       	in	r30, 0x3d	; 61
    4e54:	fe b7       	in	r31, 0x3e	; 62
    4e56:	95 83       	std	Z+5, r25	; 0x05
    4e58:	84 83       	std	Z+4, r24	; 0x04
    4e5a:	8d e1       	ldi	r24, 0x1D	; 29
    4e5c:	94 e0       	ldi	r25, 0x04	; 4
    4e5e:	a0 e0       	ldi	r26, 0x00	; 0
    4e60:	81 83       	std	Z+1, r24	; 0x01
    4e62:	92 83       	std	Z+2, r25	; 0x02
    4e64:	a3 83       	std	Z+3, r26	; 0x03
    4e66:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    printf("  Stack Top:   %u\n", (unsigned int) &__stack);
    4e6a:	8f ef       	ldi	r24, 0xFF	; 255
    4e6c:	90 e4       	ldi	r25, 0x40	; 64
    4e6e:	ed b7       	in	r30, 0x3d	; 61
    4e70:	fe b7       	in	r31, 0x3e	; 62
    4e72:	95 83       	std	Z+5, r25	; 0x05
    4e74:	84 83       	std	Z+4, r24	; 0x04
    4e76:	8a e0       	ldi	r24, 0x0A	; 10
    4e78:	94 e0       	ldi	r25, 0x04	; 4
    4e7a:	a0 e0       	ldi	r26, 0x00	; 0
    4e7c:	81 83       	std	Z+1, r24	; 0x01
    4e7e:	92 83       	std	Z+2, r25	; 0x02
    4e80:	a3 83       	std	Z+3, r26	; 0x03
    4e82:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    printf("  Stack Free:  %u\n", (unsigned int) &ram - 0);
    4e86:	ce 01       	movw	r24, r28
    4e88:	08 96       	adiw	r24, 0x08	; 8
    4e8a:	ed b7       	in	r30, 0x3d	; 61
    4e8c:	fe b7       	in	r31, 0x3e	; 62
    4e8e:	95 83       	std	Z+5, r25	; 0x05
    4e90:	84 83       	std	Z+4, r24	; 0x04
    4e92:	87 ef       	ldi	r24, 0xF7	; 247
    4e94:	93 e0       	ldi	r25, 0x03	; 3
    4e96:	a0 e0       	ldi	r26, 0x00	; 0
    4e98:	81 83       	std	Z+1, r24	; 0x01
    4e9a:	92 83       	std	Z+2, r25	; 0x02
    4e9c:	a3 83       	std	Z+3, r26	; 0x03
    4e9e:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>

    printf("  BSS   start: %5u, end: %5u\n",
    4ea2:	84 e7       	ldi	r24, 0x74	; 116
    4ea4:	91 e2       	ldi	r25, 0x21	; 33
    4ea6:	ed b7       	in	r30, 0x3d	; 61
    4ea8:	fe b7       	in	r31, 0x3e	; 62
    4eaa:	97 83       	std	Z+7, r25	; 0x07
    4eac:	86 83       	std	Z+6, r24	; 0x06
    4eae:	8e e3       	ldi	r24, 0x3E	; 62
    4eb0:	97 e1       	ldi	r25, 0x17	; 23
    4eb2:	95 83       	std	Z+5, r25	; 0x05
    4eb4:	84 83       	std	Z+4, r24	; 0x04
    4eb6:	89 ed       	ldi	r24, 0xD9	; 217
    4eb8:	93 e0       	ldi	r25, 0x03	; 3
    4eba:	a0 e0       	ldi	r26, 0x00	; 0
    4ebc:	81 83       	std	Z+1, r24	; 0x01
    4ebe:	92 83       	std	Z+2, r25	; 0x02
    4ec0:	a3 83       	std	Z+3, r26	; 0x03
    4ec2:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
        (unsigned int)&__bss_start, (unsigned int)&__bss_end);

    printf("  Data  start: %5u, end: %5u\n",
    4ec6:	8e e3       	ldi	r24, 0x3E	; 62
    4ec8:	97 e1       	ldi	r25, 0x17	; 23
    4eca:	ed b7       	in	r30, 0x3d	; 61
    4ecc:	fe b7       	in	r31, 0x3e	; 62
    4ece:	97 83       	std	Z+7, r25	; 0x07
    4ed0:	86 83       	std	Z+6, r24	; 0x06
    4ed2:	80 e0       	ldi	r24, 0x00	; 0
    4ed4:	91 e0       	ldi	r25, 0x01	; 1
    4ed6:	95 83       	std	Z+5, r25	; 0x05
    4ed8:	84 83       	std	Z+4, r24	; 0x04
    4eda:	8b eb       	ldi	r24, 0xBB	; 187
    4edc:	93 e0       	ldi	r25, 0x03	; 3
    4ede:	a0 e0       	ldi	r26, 0x00	; 0
    4ee0:	81 83       	std	Z+1, r24	; 0x01
    4ee2:	92 83       	std	Z+2, r25	; 0x02
    4ee4:	a3 83       	std	Z+3, r26	; 0x03
    4ee6:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
        (unsigned int)&__data_start, (unsigned int)&__data_end);

    printf("  Heap: start: %5u, end: %5u\n",
    4eea:	80 e0       	ldi	r24, 0x00	; 0
    4eec:	90 e0       	ldi	r25, 0x00	; 0
    4eee:	ed b7       	in	r30, 0x3d	; 61
    4ef0:	fe b7       	in	r31, 0x3e	; 62
    4ef2:	97 83       	std	Z+7, r25	; 0x07
    4ef4:	86 83       	std	Z+6, r24	; 0x06
    4ef6:	84 e7       	ldi	r24, 0x74	; 116
    4ef8:	91 e2       	ldi	r25, 0x21	; 33
    4efa:	95 83       	std	Z+5, r25	; 0x05
    4efc:	84 83       	std	Z+4, r24	; 0x04
    4efe:	8d e9       	ldi	r24, 0x9D	; 157
    4f00:	93 e0       	ldi	r25, 0x03	; 3
    4f02:	a0 e0       	ldi	r26, 0x00	; 0
    4f04:	81 83       	std	Z+1, r24	; 0x01
    4f06:	92 83       	std	Z+2, r25	; 0x02
    4f08:	a3 83       	std	Z+3, r26	; 0x03
    4f0a:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
        (unsigned int)&__heap_start, (unsigned int)&__heap_end);

    printf("  Malloc start %5u  end: %5u\n",
    4f0e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    4f12:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    4f16:	ed b7       	in	r30, 0x3d	; 61
    4f18:	fe b7       	in	r31, 0x3e	; 62
    4f1a:	97 83       	std	Z+7, r25	; 0x07
    4f1c:	86 83       	std	Z+6, r24	; 0x06
    4f1e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__malloc_heap_start>
    4f22:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    4f26:	95 83       	std	Z+5, r25	; 0x05
    4f28:	84 83       	std	Z+4, r24	; 0x04
    4f2a:	8f e7       	ldi	r24, 0x7F	; 127
    4f2c:	93 e0       	ldi	r25, 0x03	; 3
    4f2e:	a0 e0       	ldi	r26, 0x00	; 0
    4f30:	81 83       	std	Z+1, r24	; 0x01
    4f32:	92 83       	std	Z+2, r25	; 0x02
    4f34:	a3 83       	std	Z+3, r26	; 0x03
    4f36:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
        (unsigned int)__malloc_heap_start, (unsigned int) __malloc_heap_end );

    printf("  __brkval:    %5u\n", (unsigned int) __brkval);
    4f3a:	80 91 70 21 	lds	r24, 0x2170	; 0x802170 <__brkval>
    4f3e:	90 91 71 21 	lds	r25, 0x2171	; 0x802171 <__brkval+0x1>
    4f42:	ed b7       	in	r30, 0x3d	; 61
    4f44:	fe b7       	in	r31, 0x3e	; 62
    4f46:	95 83       	std	Z+5, r25	; 0x05
    4f48:	84 83       	std	Z+4, r24	; 0x04
    4f4a:	8b e6       	ldi	r24, 0x6B	; 107
    4f4c:	93 e0       	ldi	r25, 0x03	; 3
    4f4e:	a0 e0       	ldi	r26, 0x00	; 0
    4f50:	81 83       	std	Z+1, r24	; 0x01
    4f52:	92 83       	std	Z+2, r25	; 0x02
    4f54:	a3 83       	std	Z+3, r26	; 0x03
    4f56:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>

}
    4f5a:	29 96       	adiw	r28, 0x09	; 9
    4f5c:	e2 e0       	ldi	r30, 0x02	; 2
    4f5e:	0c 94 0a e0 	jmp	0x1c014	; 0x1c014 <__epilogue_restores__+0x20>

00004f62 <safecalloc>:
///  - We check if the pointer was in the heap.
///  - Otherwise it may have been statically defined - display error.
///
/// @return  void.
void *safecalloc(int size, int elements)
{
    4f62:	ef 92       	push	r14
    4f64:	ff 92       	push	r15
    4f66:	0f 93       	push	r16
    4f68:	1f 93       	push	r17
    4f6a:	cf 93       	push	r28
    4f6c:	df 93       	push	r29
    4f6e:	ad b7       	in	r26, 0x3d	; 61
    4f70:	be b7       	in	r27, 0x3e	; 62
    4f72:	17 97       	sbiw	r26, 0x07	; 7
    4f74:	0f b6       	in	r0, 0x3f	; 63
    4f76:	f8 94       	cli
    4f78:	be bf       	out	0x3e, r27	; 62
    4f7a:	0f be       	out	0x3f, r0	; 63
    4f7c:	ad bf       	out	0x3d, r26	; 61
    4f7e:	8c 01       	movw	r16, r24
    4f80:	7b 01       	movw	r14, r22
	void *p = calloc(size, elements);
    4f82:	0e 94 9b e2 	call	0x1c536	; 0x1c536 <calloc>
    4f86:	ec 01       	movw	r28, r24
	if(!p)
    4f88:	89 2b       	or	r24, r25
    4f8a:	71 f4       	brne	.+28     	; 0x4fa8 <safecalloc+0x46>
	{
		printf("safecalloc(%d,%d) failed!\n", size, elements);
    4f8c:	ed b7       	in	r30, 0x3d	; 61
    4f8e:	fe b7       	in	r31, 0x3e	; 62
    4f90:	f7 82       	std	Z+7, r15	; 0x07
    4f92:	e6 82       	std	Z+6, r14	; 0x06
    4f94:	15 83       	std	Z+5, r17	; 0x05
    4f96:	04 83       	std	Z+4, r16	; 0x04
    4f98:	80 e5       	ldi	r24, 0x50	; 80
    4f9a:	93 e0       	ldi	r25, 0x03	; 3
    4f9c:	a0 e0       	ldi	r26, 0x00	; 0
    4f9e:	81 83       	std	Z+1, r24	; 0x01
    4fa0:	92 83       	std	Z+2, r25	; 0x02
    4fa2:	a3 83       	std	Z+3, r26	; 0x03
    4fa4:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
	}
	return(p);
}
    4fa8:	ce 01       	movw	r24, r28
    4faa:	cd b7       	in	r28, 0x3d	; 61
    4fac:	de b7       	in	r29, 0x3e	; 62
    4fae:	27 96       	adiw	r28, 0x07	; 7
    4fb0:	e6 e0       	ldi	r30, 0x06	; 6
    4fb2:	0c 94 06 e0 	jmp	0x1c00c	; 0x1c00c <__epilogue_restores__+0x18>

00004fb6 <safemalloc>:
///  - We check if the pointer was in the heap.
///  - Otherwise it may have been statically defined - display error.
/// @param[in] size:  size
/// @return  void.
void *safemalloc(size_t size)
{
    4fb6:	0f 93       	push	r16
    4fb8:	1f 93       	push	r17
    4fba:	cf 93       	push	r28
    4fbc:	df 93       	push	r29
    4fbe:	00 d0       	rcall	.+0      	; 0x4fc0 <safemalloc+0xa>
    4fc0:	00 d0       	rcall	.+0      	; 0x4fc2 <safemalloc+0xc>
    4fc2:	1f 92       	push	r1
    4fc4:	8c 01       	movw	r16, r24
    void *p = calloc(size, 1);
    4fc6:	61 e0       	ldi	r22, 0x01	; 1
    4fc8:	70 e0       	ldi	r23, 0x00	; 0
    4fca:	0e 94 9b e2 	call	0x1c536	; 0x1c536 <calloc>
    4fce:	ec 01       	movw	r28, r24
    if(!p)
    4fd0:	89 2b       	or	r24, r25
    4fd2:	61 f4       	brne	.+24     	; 0x4fec <safemalloc+0x36>
    {
        printf("safemalloc(%d) failed!\n", size);
    4fd4:	ed b7       	in	r30, 0x3d	; 61
    4fd6:	fe b7       	in	r31, 0x3e	; 62
    4fd8:	15 83       	std	Z+5, r17	; 0x05
    4fda:	04 83       	std	Z+4, r16	; 0x04
    4fdc:	88 e3       	ldi	r24, 0x38	; 56
    4fde:	93 e0       	ldi	r25, 0x03	; 3
    4fe0:	a0 e0       	ldi	r26, 0x00	; 0
    4fe2:	81 83       	std	Z+1, r24	; 0x01
    4fe4:	92 83       	std	Z+2, r25	; 0x02
    4fe6:	a3 83       	std	Z+3, r26	; 0x03
    4fe8:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    }
    return(p);
}
    4fec:	ce 01       	movw	r24, r28
    4fee:	cd b7       	in	r28, 0x3d	; 61
    4ff0:	de b7       	in	r29, 0x3e	; 62
    4ff2:	25 96       	adiw	r28, 0x05	; 5
    4ff4:	e4 e0       	ldi	r30, 0x04	; 4
    4ff6:	0c 94 08 e0 	jmp	0x1c010	; 0x1c010 <__epilogue_restores__+0x1c>

00004ffa <safefree>:
///
/// @param[in] p: pointer to free.
///
/// @return  void.
void safefree(void *p)
{
    4ffa:	ad b7       	in	r26, 0x3d	; 61
    4ffc:	be b7       	in	r27, 0x3e	; 62
    4ffe:	17 97       	sbiw	r26, 0x07	; 7
    5000:	0f b6       	in	r0, 0x3f	; 63
    5002:	f8 94       	cli
    5004:	be bf       	out	0x3e, r27	; 62
    5006:	0f be       	out	0x3f, r0	; 63
    5008:	ad bf       	out	0x3d, r26	; 61
    extern void *__brkval;
    extern void * __heap_start;
    extern void * __heap_end;
    uint16_t top;

    if(p == NULL)
    500a:	00 97       	sbiw	r24, 0x00	; 0
    500c:	11 f1       	breq	.+68     	; 0x5052 <safefree+0x58>
        return;

    if(__brkval)
    500e:	20 91 70 21 	lds	r18, 0x2170	; 0x802170 <__brkval>
    5012:	30 91 71 21 	lds	r19, 0x2171	; 0x802171 <__brkval+0x1>
    5016:	21 15       	cp	r18, r1
    5018:	31 05       	cpc	r19, r1
    501a:	11 f4       	brne	.+4      	; 0x5020 <safefree+0x26>
        top = (uint16_t) __brkval;
    else
        top = (uint16_t) & __heap_start;
    501c:	24 e7       	ldi	r18, 0x74	; 116
    501e:	31 e2       	ldi	r19, 0x21	; 33

    if( ((uint16_t) p >= (uint16_t) &__heap_start) &&
    5020:	41 e2       	ldi	r20, 0x21	; 33
    5022:	84 37       	cpi	r24, 0x74	; 116
    5024:	94 07       	cpc	r25, r20
    5026:	30 f0       	brcs	.+12     	; 0x5034 <safefree+0x3a>
    5028:	28 17       	cp	r18, r24
    502a:	39 07       	cpc	r19, r25
    502c:	18 f0       	brcs	.+6      	; 0x5034 <safefree+0x3a>
        ((uint16_t) p <= top) )
    {
        free(p);
    502e:	0e 94 4d e3 	call	0x1c69a	; 0x1c69a <free>
        return;
    5032:	0f c0       	rjmp	.+30     	; 0x5052 <safefree+0x58>
    }
    printf("safefree: FREE ERROR (%u), top:(%u)\n", (uint16_t) p, (uint16_t) top);
    5034:	ed b7       	in	r30, 0x3d	; 61
    5036:	fe b7       	in	r31, 0x3e	; 62
    5038:	37 83       	std	Z+7, r19	; 0x07
    503a:	26 83       	std	Z+6, r18	; 0x06
    503c:	95 83       	std	Z+5, r25	; 0x05
    503e:	84 83       	std	Z+4, r24	; 0x04
    5040:	83 e1       	ldi	r24, 0x13	; 19
    5042:	93 e0       	ldi	r25, 0x03	; 3
    5044:	a0 e0       	ldi	r26, 0x00	; 0
    5046:	81 83       	std	Z+1, r24	; 0x01
    5048:	92 83       	std	Z+2, r25	; 0x02
    504a:	a3 83       	std	Z+3, r26	; 0x03
    504c:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    PrintFree();
}
    5050:	f7 de       	rcall	.-530    	; 0x4e40 <PrintFree>
    5052:	ad b7       	in	r26, 0x3d	; 61
    5054:	be b7       	in	r27, 0x3e	; 62
    5056:	17 96       	adiw	r26, 0x07	; 7
    5058:	0f b6       	in	r0, 0x3f	; 63
    505a:	f8 94       	cli
    505c:	be bf       	out	0x3e, r27	; 62
    505e:	0f be       	out	0x3f, r0	; 63
    5060:	ad bf       	out	0x3d, r26	; 61
    5062:	08 95       	ret

00005064 <delayus>:
/// @return  void
/// @see _delay_us() is part of avr-libc
void delayus(uint32_t us)
{

    while (us >= 100U)
    5064:	64 36       	cpi	r22, 0x64	; 100
    5066:	71 05       	cpc	r23, r1
    5068:	81 05       	cpc	r24, r1
    506a:	91 05       	cpc	r25, r1
    506c:	58 f0       	brcs	.+22     	; 0x5084 <delayus+0x20>
    {
        us -= 100U;
    506e:	64 56       	subi	r22, 0x64	; 100
    5070:	71 09       	sbc	r23, r1
    5072:	81 09       	sbc	r24, r1
    5074:	91 09       	sbc	r25, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    5076:	e3 ef       	ldi	r30, 0xF3	; 243
    5078:	f1 e0       	ldi	r31, 0x01	; 1
    507a:	31 97       	sbiw	r30, 0x01	; 1
    507c:	f1 f7       	brne	.-4      	; 0x507a <delayus+0x16>
    507e:	00 c0       	rjmp	.+0      	; 0x5080 <delayus+0x1c>
    5080:	00 00       	nop
    5082:	f0 cf       	rjmp	.-32     	; 0x5064 <delayus>
        _delay_us(100);
    }
    while (us >= 10U)
    5084:	6a 30       	cpi	r22, 0x0A	; 10
    5086:	71 05       	cpc	r23, r1
    5088:	81 05       	cpc	r24, r1
    508a:	91 05       	cpc	r25, r1
    508c:	48 f0       	brcs	.+18     	; 0x50a0 <delayus+0x3c>
    {
        us -= 10U;
    508e:	6a 50       	subi	r22, 0x0A	; 10
    5090:	71 09       	sbc	r23, r1
    5092:	81 09       	sbc	r24, r1
    5094:	91 09       	sbc	r25, r1
    5096:	f2 e4       	ldi	r31, 0x42	; 66
    5098:	fa 95       	dec	r31
    509a:	f1 f7       	brne	.-4      	; 0x5098 <delayus+0x34>
    509c:	00 c0       	rjmp	.+0      	; 0x509e <delayus+0x3a>
    509e:	f2 cf       	rjmp	.-28     	; 0x5084 <delayus+0x20>
        _delay_us(10);
    }
    while (us != 0U)
    50a0:	61 15       	cp	r22, r1
    50a2:	71 05       	cpc	r23, r1
    50a4:	81 05       	cpc	r24, r1
    50a6:	91 05       	cpc	r25, r1
    50a8:	49 f0       	breq	.+18     	; 0x50bc <delayus+0x58>
    {
        --us;
    50aa:	61 50       	subi	r22, 0x01	; 1
    50ac:	71 09       	sbc	r23, r1
    50ae:	81 09       	sbc	r24, r1
    50b0:	91 09       	sbc	r25, r1
    50b2:	26 e0       	ldi	r18, 0x06	; 6
    50b4:	2a 95       	dec	r18
    50b6:	f1 f7       	brne	.-4      	; 0x50b4 <delayus+0x50>
    50b8:	00 c0       	rjmp	.+0      	; 0x50ba <delayus+0x56>
    50ba:	f2 cf       	rjmp	.-28     	; 0x50a0 <delayus+0x3c>
        _delay_us(1);
    }
}
    50bc:	08 95       	ret

000050be <delayms>:
/// _delay_us() has limited range - this extends it.
/// @return  void
/// @see _delay_us() is part of avr-libc
void delayms(uint32_t ms)
{
    while (ms--)
    50be:	61 15       	cp	r22, r1
    50c0:	71 05       	cpc	r23, r1
    50c2:	81 05       	cpc	r24, r1
    50c4:	91 05       	cpc	r25, r1
    50c6:	09 f4       	brne	.+2      	; 0x50ca <delayms+0xc>
    50c8:	41 c0       	rjmp	.+130    	; 0x514c <delayms+0x8e>
    50ca:	e3 ef       	ldi	r30, 0xF3	; 243
    50cc:	f1 e0       	ldi	r31, 0x01	; 1
    50ce:	31 97       	sbiw	r30, 0x01	; 1
    50d0:	f1 f7       	brne	.-4      	; 0x50ce <delayms+0x10>
    50d2:	00 c0       	rjmp	.+0      	; 0x50d4 <delayms+0x16>
    50d4:	00 00       	nop
    50d6:	e3 ef       	ldi	r30, 0xF3	; 243
    50d8:	f1 e0       	ldi	r31, 0x01	; 1
    50da:	31 97       	sbiw	r30, 0x01	; 1
    50dc:	f1 f7       	brne	.-4      	; 0x50da <delayms+0x1c>
    50de:	00 c0       	rjmp	.+0      	; 0x50e0 <delayms+0x22>
    50e0:	00 00       	nop
    50e2:	e3 ef       	ldi	r30, 0xF3	; 243
    50e4:	f1 e0       	ldi	r31, 0x01	; 1
    50e6:	31 97       	sbiw	r30, 0x01	; 1
    50e8:	f1 f7       	brne	.-4      	; 0x50e6 <delayms+0x28>
    50ea:	00 c0       	rjmp	.+0      	; 0x50ec <delayms+0x2e>
    50ec:	00 00       	nop
    50ee:	e3 ef       	ldi	r30, 0xF3	; 243
    50f0:	f1 e0       	ldi	r31, 0x01	; 1
    50f2:	31 97       	sbiw	r30, 0x01	; 1
    50f4:	f1 f7       	brne	.-4      	; 0x50f2 <delayms+0x34>
    50f6:	00 c0       	rjmp	.+0      	; 0x50f8 <delayms+0x3a>
    50f8:	00 00       	nop
    50fa:	e3 ef       	ldi	r30, 0xF3	; 243
    50fc:	f1 e0       	ldi	r31, 0x01	; 1
    50fe:	31 97       	sbiw	r30, 0x01	; 1
    5100:	f1 f7       	brne	.-4      	; 0x50fe <delayms+0x40>
    5102:	00 c0       	rjmp	.+0      	; 0x5104 <delayms+0x46>
    5104:	00 00       	nop
    5106:	e3 ef       	ldi	r30, 0xF3	; 243
    5108:	f1 e0       	ldi	r31, 0x01	; 1
    510a:	31 97       	sbiw	r30, 0x01	; 1
    510c:	f1 f7       	brne	.-4      	; 0x510a <delayms+0x4c>
    510e:	00 c0       	rjmp	.+0      	; 0x5110 <delayms+0x52>
    5110:	00 00       	nop
    5112:	e3 ef       	ldi	r30, 0xF3	; 243
    5114:	f1 e0       	ldi	r31, 0x01	; 1
    5116:	31 97       	sbiw	r30, 0x01	; 1
    5118:	f1 f7       	brne	.-4      	; 0x5116 <delayms+0x58>
    511a:	00 c0       	rjmp	.+0      	; 0x511c <delayms+0x5e>
    511c:	00 00       	nop
    511e:	e3 ef       	ldi	r30, 0xF3	; 243
    5120:	f1 e0       	ldi	r31, 0x01	; 1
    5122:	31 97       	sbiw	r30, 0x01	; 1
    5124:	f1 f7       	brne	.-4      	; 0x5122 <delayms+0x64>
    5126:	00 c0       	rjmp	.+0      	; 0x5128 <delayms+0x6a>
    5128:	00 00       	nop
    512a:	e3 ef       	ldi	r30, 0xF3	; 243
    512c:	f1 e0       	ldi	r31, 0x01	; 1
    512e:	31 97       	sbiw	r30, 0x01	; 1
    5130:	f1 f7       	brne	.-4      	; 0x512e <delayms+0x70>
    5132:	00 c0       	rjmp	.+0      	; 0x5134 <delayms+0x76>
    5134:	00 00       	nop
    5136:	e3 ef       	ldi	r30, 0xF3	; 243
    5138:	f1 e0       	ldi	r31, 0x01	; 1
    513a:	31 97       	sbiw	r30, 0x01	; 1
    513c:	f1 f7       	brne	.-4      	; 0x513a <delayms+0x7c>
    513e:	00 c0       	rjmp	.+0      	; 0x5140 <delayms+0x82>
    5140:	00 00       	nop
    5142:	61 50       	subi	r22, 0x01	; 1
    5144:	71 09       	sbc	r23, r1
    5146:	81 09       	sbc	r24, r1
    5148:	91 09       	sbc	r25, r1
    514a:	b9 cf       	rjmp	.-142    	; 0x50be <delayms>
        _delay_us(100);                           // 700
        _delay_us(100);                           // 800
        _delay_us(100);                           // 900
        _delay_us(100);                           //1000
    }
}
    514c:	08 95       	ret

0000514e <uart_rx_flush>:

    cli();
    c = uarts[uart].rx_buf[uarts[uart].rx_tail];
    sei();
    return (c & 0xff);
}
    514e:	81 11       	cpse	r24, r1
    5150:	0e c0       	rjmp	.+28     	; 0x516e <uart_rx_flush+0x20>
    5152:	f8 94       	cli
    5154:	10 92 bb 19 	sts	0x19BB, r1	; 0x8019bb <uarts+0x4>
    5158:	10 92 ba 19 	sts	0x19BA, r1	; 0x8019ba <uarts+0x3>
    515c:	10 92 b7 19 	sts	0x19B7, r1	; 0x8019b7 <uarts>
    5160:	10 92 b8 19 	sts	0x19B8, r1	; 0x8019b8 <uarts+0x1>
    5164:	10 92 b9 19 	sts	0x19B9, r1	; 0x8019b9 <uarts+0x2>
    5168:	10 92 bc 19 	sts	0x19BC, r1	; 0x8019bc <uarts+0x5>
    516c:	78 94       	sei
    516e:	08 95       	ret

00005170 <uart_ubr>:
    5170:	4f 92       	push	r4
    5172:	5f 92       	push	r5
    5174:	6f 92       	push	r6
    5176:	7f 92       	push	r7
    5178:	8f 92       	push	r8
    517a:	9f 92       	push	r9
    517c:	af 92       	push	r10
    517e:	bf 92       	push	r11
    5180:	cf 92       	push	r12
    5182:	df 92       	push	r13
    5184:	ef 92       	push	r14
    5186:	ff 92       	push	r15
    5188:	cf 93       	push	r28
    518a:	df 93       	push	r29
    518c:	5a 01       	movw	r10, r20
    518e:	e9 01       	movw	r28, r18
    5190:	0e 94 39 e1 	call	0x1c272	; 0x1c272 <__floatunsisf>
    5194:	2b 01       	movw	r4, r22
    5196:	3c 01       	movw	r6, r24
    5198:	20 e0       	ldi	r18, 0x00	; 0
    519a:	30 e0       	ldi	r19, 0x00	; 0
    519c:	40 e0       	ldi	r20, 0x00	; 0
    519e:	51 e4       	ldi	r21, 0x41	; 65
    51a0:	0e 94 ef e1 	call	0x1c3de	; 0x1c3de <__mulsf3>
    51a4:	9b 01       	movw	r18, r22
    51a6:	ac 01       	movw	r20, r24
    51a8:	60 e8       	ldi	r22, 0x80	; 128
    51aa:	76 e9       	ldi	r23, 0x96	; 150
    51ac:	88 e9       	ldi	r24, 0x98	; 152
    51ae:	9b e4       	ldi	r25, 0x4B	; 75
    51b0:	0e 94 a0 e0 	call	0x1c140	; 0x1c140 <__divsf3>
    51b4:	20 e0       	ldi	r18, 0x00	; 0
    51b6:	30 e0       	ldi	r19, 0x00	; 0
    51b8:	40 e8       	ldi	r20, 0x80	; 128
    51ba:	5f e3       	ldi	r21, 0x3F	; 63
    51bc:	0e 94 37 e0 	call	0x1c06e	; 0x1c06e <__subsf3>
    51c0:	0e 94 52 e2 	call	0x1c4a4	; 0x1c4a4 <round>
    51c4:	0e 94 0d e1 	call	0x1c21a	; 0x1c21a <__fixunssfsi>
    51c8:	6b 01       	movw	r12, r22
    51ca:	7c 01       	movw	r14, r24
    51cc:	c1 14       	cp	r12, r1
    51ce:	80 e1       	ldi	r24, 0x10	; 16
    51d0:	d8 06       	cpc	r13, r24
    51d2:	e1 04       	cpc	r14, r1
    51d4:	f1 04       	cpc	r15, r1
    51d6:	58 f4       	brcc	.+22     	; 0x51ee <uart_ubr+0x7e>
    51d8:	81 e0       	ldi	r24, 0x01	; 1
    51da:	90 e0       	ldi	r25, 0x00	; 0
    51dc:	f5 01       	movw	r30, r10
    51de:	91 83       	std	Z+1, r25	; 0x01
    51e0:	80 83       	st	Z, r24
    51e2:	81 2c       	mov	r8, r1
    51e4:	91 2c       	mov	r9, r1
    51e6:	a1 2c       	mov	r10, r1
    51e8:	21 e4       	ldi	r18, 0x41	; 65
    51ea:	b2 2e       	mov	r11, r18
    51ec:	31 c0       	rjmp	.+98     	; 0x5250 <uart_ubr+0xe0>
    51ee:	f5 01       	movw	r30, r10
    51f0:	11 82       	std	Z+1, r1	; 0x01
    51f2:	10 82       	st	Z, r1
    51f4:	20 e0       	ldi	r18, 0x00	; 0
    51f6:	30 e0       	ldi	r19, 0x00	; 0
    51f8:	40 e8       	ldi	r20, 0x80	; 128
    51fa:	51 e4       	ldi	r21, 0x41	; 65
    51fc:	c3 01       	movw	r24, r6
    51fe:	b2 01       	movw	r22, r4
    5200:	0e 94 ef e1 	call	0x1c3de	; 0x1c3de <__mulsf3>
    5204:	9b 01       	movw	r18, r22
    5206:	ac 01       	movw	r20, r24
    5208:	60 e8       	ldi	r22, 0x80	; 128
    520a:	76 e9       	ldi	r23, 0x96	; 150
    520c:	88 e9       	ldi	r24, 0x98	; 152
    520e:	9b e4       	ldi	r25, 0x4B	; 75
    5210:	0e 94 a0 e0 	call	0x1c140	; 0x1c140 <__divsf3>
    5214:	20 e0       	ldi	r18, 0x00	; 0
    5216:	30 e0       	ldi	r19, 0x00	; 0
    5218:	40 e8       	ldi	r20, 0x80	; 128
    521a:	5f e3       	ldi	r21, 0x3F	; 63
    521c:	0e 94 37 e0 	call	0x1c06e	; 0x1c06e <__subsf3>
    5220:	0e 94 52 e2 	call	0x1c4a4	; 0x1c4a4 <round>
    5224:	0e 94 0d e1 	call	0x1c21a	; 0x1c21a <__fixunssfsi>
    5228:	6b 01       	movw	r12, r22
    522a:	7c 01       	movw	r14, r24
    522c:	81 2c       	mov	r8, r1
    522e:	91 2c       	mov	r9, r1
    5230:	90 e8       	ldi	r25, 0x80	; 128
    5232:	a9 2e       	mov	r10, r25
    5234:	91 e4       	ldi	r25, 0x41	; 65
    5236:	b9 2e       	mov	r11, r25
    5238:	c1 14       	cp	r12, r1
    523a:	f0 e1       	ldi	r31, 0x10	; 16
    523c:	df 06       	cpc	r13, r31
    523e:	e1 04       	cpc	r14, r1
    5240:	f1 04       	cpc	r15, r1
    5242:	30 f0       	brcs	.+12     	; 0x5250 <uart_ubr+0xe0>
    5244:	cc 24       	eor	r12, r12
    5246:	ca 94       	dec	r12
    5248:	8f e0       	ldi	r24, 0x0F	; 15
    524a:	d8 2e       	mov	r13, r24
    524c:	e1 2c       	mov	r14, r1
    524e:	f1 2c       	mov	r15, r1
    5250:	c7 01       	movw	r24, r14
    5252:	b6 01       	movw	r22, r12
    5254:	6f 5f       	subi	r22, 0xFF	; 255
    5256:	7f 4f       	sbci	r23, 0xFF	; 255
    5258:	8f 4f       	sbci	r24, 0xFF	; 255
    525a:	9f 4f       	sbci	r25, 0xFF	; 255
    525c:	0e 94 39 e1 	call	0x1c272	; 0x1c272 <__floatunsisf>
    5260:	a5 01       	movw	r20, r10
    5262:	94 01       	movw	r18, r8
    5264:	0e 94 ef e1 	call	0x1c3de	; 0x1c3de <__mulsf3>
    5268:	9b 01       	movw	r18, r22
    526a:	ac 01       	movw	r20, r24
    526c:	60 e8       	ldi	r22, 0x80	; 128
    526e:	76 e9       	ldi	r23, 0x96	; 150
    5270:	88 e9       	ldi	r24, 0x98	; 152
    5272:	9b e4       	ldi	r25, 0x4B	; 75
    5274:	0e 94 a0 e0 	call	0x1c140	; 0x1c140 <__divsf3>
    5278:	0e 94 0d e1 	call	0x1c21a	; 0x1c21a <__fixunssfsi>
    527c:	68 83       	st	Y, r22
    527e:	79 83       	std	Y+1, r23	; 0x01
    5280:	8a 83       	std	Y+2, r24	; 0x02
    5282:	9b 83       	std	Y+3, r25	; 0x03
    5284:	c6 01       	movw	r24, r12
    5286:	df 91       	pop	r29
    5288:	cf 91       	pop	r28
    528a:	ff 90       	pop	r15
    528c:	ef 90       	pop	r14
    528e:	df 90       	pop	r13
    5290:	cf 90       	pop	r12
    5292:	bf 90       	pop	r11
    5294:	af 90       	pop	r10
    5296:	9f 90       	pop	r9
    5298:	8f 90       	pop	r8
    529a:	7f 90       	pop	r7
    529c:	6f 90       	pop	r6
    529e:	5f 90       	pop	r5
    52a0:	4f 90       	pop	r4
    52a2:	08 95       	ret

000052a4 <uart_init>:
    52a4:	a6 e0       	ldi	r26, 0x06	; 6
    52a6:	b0 e0       	ldi	r27, 0x00	; 0
    52a8:	e8 e5       	ldi	r30, 0x58	; 88
    52aa:	f9 e2       	ldi	r31, 0x29	; 41
    52ac:	0c 94 ee df 	jmp	0x1bfdc	; 0x1bfdc <__prologue_saves__+0x20>
    52b0:	1e 82       	std	Y+6, r1	; 0x06
    52b2:	1d 82       	std	Y+5, r1	; 0x05
    52b4:	81 11       	cpse	r24, r1
    52b6:	36 c0       	rjmp	.+108    	; 0x5324 <uart_init+0x80>
    52b8:	cb 01       	movw	r24, r22
    52ba:	ba 01       	movw	r22, r20
    52bc:	9e 01       	movw	r18, r28
    52be:	2f 5f       	subi	r18, 0xFF	; 255
    52c0:	3f 4f       	sbci	r19, 0xFF	; 255
    52c2:	ae 01       	movw	r20, r28
    52c4:	4b 5f       	subi	r20, 0xFB	; 251
    52c6:	5f 4f       	sbci	r21, 0xFF	; 255
    52c8:	53 df       	rcall	.-346    	; 0x5170 <uart_ubr>
    52ca:	f8 94       	cli
    52cc:	10 92 bb 19 	sts	0x19BB, r1	; 0x8019bb <uarts+0x4>
    52d0:	10 92 ba 19 	sts	0x19BA, r1	; 0x8019ba <uarts+0x3>
    52d4:	10 92 b7 19 	sts	0x19B7, r1	; 0x8019b7 <uarts>
    52d8:	10 92 b8 19 	sts	0x19B8, r1	; 0x8019b8 <uarts+0x1>
    52dc:	10 92 b9 19 	sts	0x19B9, r1	; 0x8019b9 <uarts+0x2>
    52e0:	10 92 bc 19 	sts	0x19BC, r1	; 0x8019bc <uarts+0x5>
    52e4:	78 94       	sei
    52e6:	f8 94       	cli
    52e8:	58 9a       	sbi	0x0b, 0	; 11
    52ea:	59 9a       	sbi	0x0b, 1	; 11
    52ec:	50 98       	cbi	0x0a, 0	; 10
    52ee:	51 9a       	sbi	0x0a, 1	; 10
    52f0:	28 e9       	ldi	r18, 0x98	; 152
    52f2:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    52f6:	2d 81       	ldd	r18, Y+5	; 0x05
    52f8:	3e 81       	ldd	r19, Y+6	; 0x06
    52fa:	23 2b       	or	r18, r19
    52fc:	19 f0       	breq	.+6      	; 0x5304 <uart_init+0x60>
    52fe:	22 e0       	ldi	r18, 0x02	; 2
    5300:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    5304:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    5308:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    530c:	78 94       	sei
    530e:	6a e4       	ldi	r22, 0x4A	; 74
    5310:	7a e2       	ldi	r23, 0x2A	; 42
    5312:	8f e5       	ldi	r24, 0x5F	; 95
    5314:	9a e2       	ldi	r25, 0x2A	; 42
    5316:	0e 94 f2 77 	call	0xefe4	; 0xefe4 <fdevopen>
    531a:	69 81       	ldd	r22, Y+1	; 0x01
    531c:	7a 81       	ldd	r23, Y+2	; 0x02
    531e:	8b 81       	ldd	r24, Y+3	; 0x03
    5320:	9c 81       	ldd	r25, Y+4	; 0x04
    5322:	03 c0       	rjmp	.+6      	; 0x532a <uart_init+0x86>
    5324:	60 e0       	ldi	r22, 0x00	; 0
    5326:	70 e0       	ldi	r23, 0x00	; 0
    5328:	cb 01       	movw	r24, r22
    532a:	26 96       	adiw	r28, 0x06	; 6
    532c:	e2 e0       	ldi	r30, 0x02	; 2
    532e:	0c 94 0a e0 	jmp	0x1c014	; 0x1c014 <__epilogue_restores__+0x20>

00005332 <uart_rx_interrupt>:
    5332:	cf 93       	push	r28
    5334:	df 93       	push	r29
    5336:	27 e5       	ldi	r18, 0x57	; 87
    5338:	82 9f       	mul	r24, r18
    533a:	c0 01       	movw	r24, r0
    533c:	11 24       	eor	r1, r1
    533e:	fc 01       	movw	r30, r24
    5340:	e9 54       	subi	r30, 0x49	; 73
    5342:	f6 4e       	sbci	r31, 0xE6	; 230
    5344:	83 81       	ldd	r24, Z+3	; 0x03
    5346:	94 81       	ldd	r25, Z+4	; 0x04
    5348:	80 35       	cpi	r24, 0x50	; 80
    534a:	91 05       	cpc	r25, r1
    534c:	7c f4       	brge	.+30     	; 0x536c <uart_rx_interrupt+0x3a>
    534e:	30 81       	ld	r19, Z
    5350:	21 e0       	ldi	r18, 0x01	; 1
    5352:	23 0f       	add	r18, r19
    5354:	20 83       	st	Z, r18
    5356:	ef 01       	movw	r28, r30
    5358:	c3 0f       	add	r28, r19
    535a:	d1 1d       	adc	r29, r1
    535c:	6e 83       	std	Y+6, r22	; 0x06
    535e:	01 96       	adiw	r24, 0x01	; 1
    5360:	94 83       	std	Z+4, r25	; 0x04
    5362:	83 83       	std	Z+3, r24	; 0x03
    5364:	20 35       	cpi	r18, 0x50	; 80
    5366:	28 f0       	brcs	.+10     	; 0x5372 <uart_rx_interrupt+0x40>
    5368:	10 82       	st	Z, r1
    536a:	03 c0       	rjmp	.+6      	; 0x5372 <uart_rx_interrupt+0x40>
    536c:	85 81       	ldd	r24, Z+5	; 0x05
    536e:	81 60       	ori	r24, 0x01	; 1
    5370:	85 83       	std	Z+5, r24	; 0x05
    5372:	df 91       	pop	r29
    5374:	cf 91       	pop	r28
    5376:	08 95       	ret

00005378 <__vector_20>:
    5378:	1f 92       	push	r1
    537a:	0f 92       	push	r0
    537c:	0f b6       	in	r0, 0x3f	; 63
    537e:	0f 92       	push	r0
    5380:	11 24       	eor	r1, r1
    5382:	0b b6       	in	r0, 0x3b	; 59
    5384:	0f 92       	push	r0
    5386:	2f 93       	push	r18
    5388:	3f 93       	push	r19
    538a:	4f 93       	push	r20
    538c:	5f 93       	push	r21
    538e:	6f 93       	push	r22
    5390:	7f 93       	push	r23
    5392:	8f 93       	push	r24
    5394:	9f 93       	push	r25
    5396:	af 93       	push	r26
    5398:	bf 93       	push	r27
    539a:	ef 93       	push	r30
    539c:	ff 93       	push	r31
    539e:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    53a2:	80 e0       	ldi	r24, 0x00	; 0
    53a4:	c6 df       	rcall	.-116    	; 0x5332 <uart_rx_interrupt>
    53a6:	ff 91       	pop	r31
    53a8:	ef 91       	pop	r30
    53aa:	bf 91       	pop	r27
    53ac:	af 91       	pop	r26
    53ae:	9f 91       	pop	r25
    53b0:	8f 91       	pop	r24
    53b2:	7f 91       	pop	r23
    53b4:	6f 91       	pop	r22
    53b6:	5f 91       	pop	r21
    53b8:	4f 91       	pop	r20
    53ba:	3f 91       	pop	r19
    53bc:	2f 91       	pop	r18
    53be:	0f 90       	pop	r0
    53c0:	0b be       	out	0x3b, r0	; 59
    53c2:	0f 90       	pop	r0
    53c4:	0f be       	out	0x3f, r0	; 63
    53c6:	0f 90       	pop	r0
    53c8:	1f 90       	pop	r1
    53ca:	18 95       	reti

000053cc <uart_rx_count>:
/// @return  Character count in ring buffer.
int uart_rx_count(uint8_t uart)
{
    int count;

    if(uart >= UARTS)
    53cc:	81 11       	cpse	r24, r1
    53ce:	07 c0       	rjmp	.+14     	; 0x53de <uart_rx_count+0x12>
        return(EOF);

    cli();
    53d0:	f8 94       	cli

    count = uarts[uart].rx_count;
    53d2:	80 91 ba 19 	lds	r24, 0x19BA	; 0x8019ba <uarts+0x3>
    53d6:	90 91 bb 19 	lds	r25, 0x19BB	; 0x8019bb <uarts+0x4>

    sei();
    53da:	78 94       	sei

    return (count );
    53dc:	08 95       	ret
int uart_rx_count(uint8_t uart)
{
    int count;

    if(uart >= UARTS)
        return(EOF);
    53de:	8f ef       	ldi	r24, 0xFF	; 255
    53e0:	9f ef       	ldi	r25, 0xFF	; 255
    count = uarts[uart].rx_count;

    sei();

    return (count );
}
    53e2:	08 95       	ret

000053e4 <uart_get_tail>:
/// @see uart_rx_count().
int uart_get_tail(uint8_t uart)
{
    uint8_t c;

    if (uart >= UARTS)
    53e4:	81 11       	cpse	r24, r1
    53e6:	21 c0       	rjmp	.+66     	; 0x542a <uart_get_tail+0x46>
	{
        return(EOF);
	}

	while(uart_rx_count(uart) < 1)
    53e8:	80 e0       	ldi	r24, 0x00	; 0
    53ea:	f0 df       	rcall	.-32     	; 0x53cc <uart_rx_count>
    53ec:	18 16       	cp	r1, r24
    53ee:	19 06       	cpc	r1, r25
    53f0:	dc f7       	brge	.-10     	; 0x53e8 <uart_get_tail+0x4>
		;

    cli();
    53f2:	f8 94       	cli
    c = uarts[uart].rx_buf[uarts[uart].rx_tail++];
    53f4:	e0 91 b8 19 	lds	r30, 0x19B8	; 0x8019b8 <uarts+0x1>
    53f8:	91 e0       	ldi	r25, 0x01	; 1
    53fa:	9e 0f       	add	r25, r30
    53fc:	90 93 b8 19 	sts	0x19B8, r25	; 0x8019b8 <uarts+0x1>
    5400:	f0 e0       	ldi	r31, 0x00	; 0
    5402:	e9 54       	subi	r30, 0x49	; 73
    5404:	f6 4e       	sbci	r31, 0xE6	; 230
    5406:	86 81       	ldd	r24, Z+6	; 0x06
    if (uarts[uart].rx_tail >= RX_BUF_SIZE)
    5408:	90 35       	cpi	r25, 0x50	; 80
    540a:	10 f0       	brcs	.+4      	; 0x5410 <uart_get_tail+0x2c>
        uarts[uart].rx_tail = 0;
    540c:	10 92 b8 19 	sts	0x19B8, r1	; 0x8019b8 <uarts+0x1>
    uarts[uart].rx_count--;
    5410:	20 91 ba 19 	lds	r18, 0x19BA	; 0x8019ba <uarts+0x3>
    5414:	30 91 bb 19 	lds	r19, 0x19BB	; 0x8019bb <uarts+0x4>
    5418:	21 50       	subi	r18, 0x01	; 1
    541a:	31 09       	sbc	r19, r1
    541c:	30 93 bb 19 	sts	0x19BB, r19	; 0x8019bb <uarts+0x4>
    5420:	20 93 ba 19 	sts	0x19BA, r18	; 0x8019ba <uarts+0x3>
    sei();
    5424:	78 94       	sei

    return (c & 0xff);
    5426:	90 e0       	ldi	r25, 0x00	; 0
    5428:	08 95       	ret
{
    uint8_t c;

    if (uart >= UARTS)
	{
        return(EOF);
    542a:	8f ef       	ldi	r24, 0xFF	; 255
    542c:	9f ef       	ldi	r25, 0xFF	; 255
        uarts[uart].rx_tail = 0;
    uarts[uart].rx_count--;
    sei();

    return (c & 0xff);
}
    542e:	08 95       	ret

00005430 <uart_rx_byte>:
///
/// @param[in] uart: uart number.
///
/// @return  Character.
int uart_rx_byte(uint8_t uart)
{
    5430:	d9 df       	rcall	.-78     	; 0x53e4 <uart_get_tail>
    5432:	99 27       	eor	r25, r25
    5434:	08 95       	ret

00005436 <uart_tx_byte>:
    5436:	61 11       	cpse	r22, r1
    5438:	09 c0       	rjmp	.+18     	; 0x544c <uart_tx_byte+0x16>
    543a:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    543e:	25 ff       	sbrs	r18, 5
    5440:	fc cf       	rjmp	.-8      	; 0x543a <uart_tx_byte+0x4>
    5442:	28 2f       	mov	r18, r24
    5444:	2f 77       	andi	r18, 0x7F	; 127
    5446:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    544a:	08 95       	ret
    544c:	61 30       	cpi	r22, 0x01	; 1
    544e:	49 f4       	brne	.+18     	; 0x5462 <uart_tx_byte+0x2c>
    5450:	20 91 c8 00 	lds	r18, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    5454:	25 ff       	sbrs	r18, 5
    5456:	fc cf       	rjmp	.-8      	; 0x5450 <uart_tx_byte+0x1a>
    5458:	28 2f       	mov	r18, r24
    545a:	2f 77       	andi	r18, 0x7F	; 127
    545c:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    5460:	08 95       	ret
    5462:	8f ef       	ldi	r24, 0xFF	; 255
    5464:	9f ef       	ldi	r25, 0xFF	; 255
    5466:	08 95       	ret

00005468 <uart_getchar>:
    5468:	cf 93       	push	r28
    546a:	81 11       	cpse	r24, r1
    546c:	0f c0       	rjmp	.+30     	; 0x548c <uart_getchar+0x24>
    546e:	e0 df       	rcall	.-64     	; 0x5430 <uart_rx_byte>
    5470:	c8 2f       	mov	r28, r24
    5472:	60 e0       	ldi	r22, 0x00	; 0
    5474:	90 e0       	ldi	r25, 0x00	; 0
    5476:	df df       	rcall	.-66     	; 0x5436 <uart_tx_byte>
    5478:	cd 30       	cpi	r28, 0x0D	; 13
    547a:	29 f4       	brne	.+10     	; 0x5486 <uart_getchar+0x1e>
    547c:	60 e0       	ldi	r22, 0x00	; 0
    547e:	8a e0       	ldi	r24, 0x0A	; 10
    5480:	90 e0       	ldi	r25, 0x00	; 0
    5482:	d9 df       	rcall	.-78     	; 0x5436 <uart_tx_byte>
    5484:	ca e0       	ldi	r28, 0x0A	; 10
    5486:	8c 2f       	mov	r24, r28
    5488:	90 e0       	ldi	r25, 0x00	; 0
    548a:	02 c0       	rjmp	.+4      	; 0x5490 <uart_getchar+0x28>
    548c:	8f ef       	ldi	r24, 0xFF	; 255
    548e:	9f ef       	ldi	r25, 0xFF	; 255
    5490:	cf 91       	pop	r28
    5492:	08 95       	ret

00005494 <uart0_getchar>:
    5494:	80 e0       	ldi	r24, 0x00	; 0
    5496:	e8 cf       	rjmp	.-48     	; 0x5468 <uart_getchar>
    5498:	08 95       	ret

0000549a <uart_putchar>:
    549a:	1f 93       	push	r17
    549c:	cf 93       	push	r28
    549e:	df 93       	push	r29
    54a0:	ec 01       	movw	r28, r24
    54a2:	16 2f       	mov	r17, r22
    54a4:	c8 df       	rcall	.-112    	; 0x5436 <uart_tx_byte>
    54a6:	ca 30       	cpi	r28, 0x0A	; 10
    54a8:	d1 05       	cpc	r29, r1
    54aa:	21 f4       	brne	.+8      	; 0x54b4 <uart_putchar+0x1a>
    54ac:	61 2f       	mov	r22, r17
    54ae:	8d e0       	ldi	r24, 0x0D	; 13
    54b0:	90 e0       	ldi	r25, 0x00	; 0
    54b2:	c1 df       	rcall	.-126    	; 0x5436 <uart_tx_byte>
    54b4:	ce 01       	movw	r24, r28
    54b6:	df 91       	pop	r29
    54b8:	cf 91       	pop	r28
    54ba:	1f 91       	pop	r17
    54bc:	08 95       	ret

000054be <uart0_putchar>:
    54be:	cf 93       	push	r28
    54c0:	df 93       	push	r29
    54c2:	ec 01       	movw	r28, r24
    54c4:	60 e0       	ldi	r22, 0x00	; 0
    54c6:	70 e0       	ldi	r23, 0x00	; 0
    54c8:	e8 df       	rcall	.-48     	; 0x549a <uart_putchar>
    54ca:	ce 01       	movw	r24, r28
    54cc:	df 91       	pop	r29
    54ce:	cf 91       	pop	r28
    54d0:	08 95       	ret

000054d2 <uart_keyhit>:
    54d2:	7c cf       	rjmp	.-264    	; 0x53cc <uart_rx_count>
    54d4:	08 95       	ret

000054d6 <SPI0_Speed>:
/// @brief  Return saved SPI mode as set by SPI0_Mode().
/// @return  saved mode.
int SPI0_Get_Mode( void )
{
    return(SPI0_Mode_value);
}
    54d6:	cf 92       	push	r12
    54d8:	df 92       	push	r13
    54da:	ef 92       	push	r14
    54dc:	ff 92       	push	r15
    54de:	6b 01       	movw	r12, r22
    54e0:	7c 01       	movw	r14, r24
    54e2:	80 91 40 17 	lds	r24, 0x1740	; 0x801740 <SPI0_Speed_value>
    54e6:	90 91 41 17 	lds	r25, 0x1741	; 0x801741 <SPI0_Speed_value+0x1>
    54ea:	a0 91 42 17 	lds	r26, 0x1742	; 0x801742 <SPI0_Speed_value+0x2>
    54ee:	b0 91 43 17 	lds	r27, 0x1743	; 0x801743 <SPI0_Speed_value+0x3>
    54f2:	8c 15       	cp	r24, r12
    54f4:	9d 05       	cpc	r25, r13
    54f6:	ae 05       	cpc	r26, r14
    54f8:	bf 05       	cpc	r27, r15
    54fa:	09 f4       	brne	.+2      	; 0x54fe <SPI0_Speed+0x28>
    54fc:	4e c0       	rjmp	.+156    	; 0x559a <SPI0_Speed+0xc4>
    54fe:	60 e0       	ldi	r22, 0x00	; 0
    5500:	7d e2       	ldi	r23, 0x2D	; 45
    5502:	81 e3       	ldi	r24, 0x31	; 49
    5504:	91 e0       	ldi	r25, 0x01	; 1
    5506:	a7 01       	movw	r20, r14
    5508:	96 01       	movw	r18, r12
    550a:	0e 94 71 df 	call	0x1bee2	; 0x1bee2 <__udivmodsi4>
    550e:	20 38       	cpi	r18, 0x80	; 128
    5510:	31 05       	cpc	r19, r1
    5512:	41 05       	cpc	r20, r1
    5514:	51 05       	cpc	r21, r1
    5516:	28 f4       	brcc	.+10     	; 0x5522 <SPI0_Speed+0x4c>
    5518:	20 34       	cpi	r18, 0x40	; 64
    551a:	31 05       	cpc	r19, r1
    551c:	41 05       	cpc	r20, r1
    551e:	51 05       	cpc	r21, r1
    5520:	30 f0       	brcs	.+12     	; 0x552e <SPI0_Speed+0x58>
    5522:	8d b5       	in	r24, 0x2d	; 45
    5524:	8e 7f       	andi	r24, 0xFE	; 254
    5526:	8d bd       	out	0x2d, r24	; 45
    5528:	8c b5       	in	r24, 0x2c	; 44
    552a:	82 60       	ori	r24, 0x02	; 2
    552c:	1b c0       	rjmp	.+54     	; 0x5564 <SPI0_Speed+0x8e>
    552e:	8d b5       	in	r24, 0x2d	; 45
    5530:	20 32       	cpi	r18, 0x20	; 32
    5532:	31 05       	cpc	r19, r1
    5534:	41 05       	cpc	r20, r1
    5536:	51 05       	cpc	r21, r1
    5538:	28 f0       	brcs	.+10     	; 0x5544 <SPI0_Speed+0x6e>
    553a:	81 60       	ori	r24, 0x01	; 1
    553c:	8d bd       	out	0x2d, r24	; 45
    553e:	8c b5       	in	r24, 0x2c	; 44
    5540:	82 60       	ori	r24, 0x02	; 2
    5542:	1f c0       	rjmp	.+62     	; 0x5582 <SPI0_Speed+0xac>
    5544:	20 31       	cpi	r18, 0x10	; 16
    5546:	31 05       	cpc	r19, r1
    5548:	41 05       	cpc	r20, r1
    554a:	51 05       	cpc	r21, r1
    554c:	10 f0       	brcs	.+4      	; 0x5552 <SPI0_Speed+0x7c>
    554e:	8e 7f       	andi	r24, 0xFE	; 254
    5550:	06 c0       	rjmp	.+12     	; 0x555e <SPI0_Speed+0x88>
    5552:	28 30       	cpi	r18, 0x08	; 8
    5554:	31 05       	cpc	r19, r1
    5556:	41 05       	cpc	r20, r1
    5558:	51 05       	cpc	r21, r1
    555a:	40 f0       	brcs	.+16     	; 0x556c <SPI0_Speed+0x96>
    555c:	81 60       	ori	r24, 0x01	; 1
    555e:	8d bd       	out	0x2d, r24	; 45
    5560:	8c b5       	in	r24, 0x2c	; 44
    5562:	8d 7f       	andi	r24, 0xFD	; 253
    5564:	8c bd       	out	0x2c, r24	; 44
    5566:	8c b5       	in	r24, 0x2c	; 44
    5568:	81 60       	ori	r24, 0x01	; 1
    556a:	0e c0       	rjmp	.+28     	; 0x5588 <SPI0_Speed+0xb2>
    556c:	24 30       	cpi	r18, 0x04	; 4
    556e:	31 05       	cpc	r19, r1
    5570:	41 05       	cpc	r20, r1
    5572:	51 05       	cpc	r21, r1
    5574:	10 f0       	brcs	.+4      	; 0x557a <SPI0_Speed+0xa4>
    5576:	8e 7f       	andi	r24, 0xFE	; 254
    5578:	01 c0       	rjmp	.+2      	; 0x557c <SPI0_Speed+0xa6>
    557a:	81 60       	ori	r24, 0x01	; 1
    557c:	8d bd       	out	0x2d, r24	; 45
    557e:	8c b5       	in	r24, 0x2c	; 44
    5580:	8d 7f       	andi	r24, 0xFD	; 253
    5582:	8c bd       	out	0x2c, r24	; 44
    5584:	8c b5       	in	r24, 0x2c	; 44
    5586:	8e 7f       	andi	r24, 0xFE	; 254
    5588:	8c bd       	out	0x2c, r24	; 44
    558a:	c0 92 40 17 	sts	0x1740, r12	; 0x801740 <SPI0_Speed_value>
    558e:	d0 92 41 17 	sts	0x1741, r13	; 0x801741 <SPI0_Speed_value+0x1>
    5592:	e0 92 42 17 	sts	0x1742, r14	; 0x801742 <SPI0_Speed_value+0x2>
    5596:	f0 92 43 17 	sts	0x1743, r15	; 0x801743 <SPI0_Speed_value+0x3>
    559a:	ff 90       	pop	r15
    559c:	ef 90       	pop	r14
    559e:	df 90       	pop	r13
    55a0:	cf 90       	pop	r12
    55a2:	08 95       	ret

000055a4 <SPI0_Mode>:
    55a4:	cf 93       	push	r28
    55a6:	df 93       	push	r29
    55a8:	00 d0       	rcall	.+0      	; 0x55aa <SPI0_Mode+0x6>
    55aa:	00 d0       	rcall	.+0      	; 0x55ac <SPI0_Mode+0x8>
    55ac:	1f 92       	push	r1
    55ae:	ec 01       	movw	r28, r24
    55b0:	81 30       	cpi	r24, 0x01	; 1
    55b2:	91 05       	cpc	r25, r1
    55b4:	71 f0       	breq	.+28     	; 0x55d2 <SPI0_Mode+0x2e>
    55b6:	2c f4       	brge	.+10     	; 0x55c2 <SPI0_Mode+0x1e>
    55b8:	89 2b       	or	r24, r25
    55ba:	c1 f4       	brne	.+48     	; 0x55ec <SPI0_Mode+0x48>
    55bc:	8c b5       	in	r24, 0x2c	; 44
    55be:	87 7f       	andi	r24, 0xF7	; 247
    55c0:	11 c0       	rjmp	.+34     	; 0x55e4 <SPI0_Mode+0x40>
    55c2:	82 30       	cpi	r24, 0x02	; 2
    55c4:	91 05       	cpc	r25, r1
    55c6:	61 f0       	breq	.+24     	; 0x55e0 <SPI0_Mode+0x3c>
    55c8:	03 97       	sbiw	r24, 0x03	; 3
    55ca:	81 f4       	brne	.+32     	; 0x55ec <SPI0_Mode+0x48>
    55cc:	8c b5       	in	r24, 0x2c	; 44
    55ce:	88 60       	ori	r24, 0x08	; 8
    55d0:	02 c0       	rjmp	.+4      	; 0x55d6 <SPI0_Mode+0x32>
    55d2:	8c b5       	in	r24, 0x2c	; 44
    55d4:	87 7f       	andi	r24, 0xF7	; 247
    55d6:	8c bd       	out	0x2c, r24	; 44
    55d8:	8c b5       	in	r24, 0x2c	; 44
    55da:	84 60       	ori	r24, 0x04	; 4
    55dc:	8c bd       	out	0x2c, r24	; 44
    55de:	12 c0       	rjmp	.+36     	; 0x5604 <SPI0_Mode+0x60>
    55e0:	8c b5       	in	r24, 0x2c	; 44
    55e2:	88 60       	ori	r24, 0x08	; 8
    55e4:	8c bd       	out	0x2c, r24	; 44
    55e6:	8c b5       	in	r24, 0x2c	; 44
    55e8:	8b 7f       	andi	r24, 0xFB	; 251
    55ea:	f8 cf       	rjmp	.-16     	; 0x55dc <SPI0_Mode+0x38>
    55ec:	ed b7       	in	r30, 0x3d	; 61
    55ee:	fe b7       	in	r31, 0x3e	; 62
    55f0:	d5 83       	std	Z+5, r29	; 0x05
    55f2:	c4 83       	std	Z+4, r28	; 0x04
    55f4:	8a e2       	ldi	r24, 0x2A	; 42
    55f6:	94 e0       	ldi	r25, 0x04	; 4
    55f8:	a0 e0       	ldi	r26, 0x00	; 0
    55fa:	81 83       	std	Z+1, r24	; 0x01
    55fc:	92 83       	std	Z+2, r25	; 0x02
    55fe:	a3 83       	std	Z+3, r26	; 0x03
    5600:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    5604:	d0 93 3f 17 	sts	0x173F, r29	; 0x80173f <__data_end+0x1>
    5608:	c0 93 3e 17 	sts	0x173E, r28	; 0x80173e <__data_end>
    560c:	cd b7       	in	r28, 0x3d	; 61
    560e:	de b7       	in	r29, 0x3e	; 62
    5610:	25 96       	adiw	r28, 0x05	; 5
    5612:	e2 e0       	ldi	r30, 0x02	; 2
    5614:	0c 94 0a e0 	jmp	0x1c014	; 0x1c014 <__epilogue_restores__+0x20>

00005618 <SPI0_TXRX_Byte>:
/// @param[in] Data: Data to send.
///
/// @return  Data received.
uint8_t SPI0_TXRX_Byte(uint8_t Data)
{
    SPDR = Data;                                  // Transmit
    5618:	8e bd       	out	0x2e, r24	; 46

    while( !BIT_TST(SPSR,SPIF) )                  // Wait for send
    561a:	0d b4       	in	r0, 0x2d	; 45
    561c:	07 fe       	sbrs	r0, 7
    561e:	fd cf       	rjmp	.-6      	; 0x561a <SPI0_TXRX_Byte+0x2>
        ;

    return (SPDR);                                // Received Data
    5620:	8e b5       	in	r24, 0x2e	; 46
}
    5622:	08 95       	ret

00005624 <SPI0_Init>:

///@brief Initialize SPI0 device.
/// See Atmel App Note AVR151
/// Set default speed, IO pins and mode.
void SPI0_Init(uint32_t speed)
{
    5624:	cf 92       	push	r12
    5626:	df 92       	push	r13
    5628:	ef 92       	push	r14
    562a:	ff 92       	push	r15
    562c:	cf 93       	push	r28
    562e:	df 93       	push	r29
    5630:	1f 92       	push	r1
    5632:	cd b7       	in	r28, 0x3d	; 61
    5634:	de b7       	in	r29, 0x3e	; 62
    5636:	6b 01       	movw	r12, r22
    5638:	7c 01       	movw	r14, r24
	printf("Port B DDR:   0x%02x\n", (int) GPIO_PORT_DDR_RD(GPIO_B));
	printf("Port B LATCH: 0x%02x\n", (int) GPIO_PORT_LATCH_RD(GPIO_B));
	printf("Port B PINS:  0x%02x\n", (int) GPIO_PORT_LATCH_RD(GPIO_B));
#endif

	SPCR = 0;				// Clear SPCR in case we are not called after RESET
    563a:	1c bc       	out	0x2c, r1	; 44

    GPIO_PIN_HI(SCK);       // SCK Output
    563c:	2f 9a       	sbi	0x05, 7	; 5
    563e:	27 9a       	sbi	0x04, 7	; 4
    GPIO_PIN_HI(MOSI);                                  // MOSI Output
    5640:	2d 9a       	sbi	0x05, 5	; 5
    5642:	25 9a       	sbi	0x04, 5	; 4
    GPIO_PIN_FLOAT(MISO);   // MISO Input, no pull-up
    5644:	26 98       	cbi	0x04, 6	; 4

	// Warning *** MSTR MUST be set BEFORE SPE!!!! *** otherwise SS will NOT behave as an output
	GPIO_PIN_LOW(SS); 		// SS Output must be HI prevent slave mode from getting set while initializing
    5646:	2c 98       	cbi	0x05, 4	; 5
    5648:	24 9a       	sbi	0x04, 4	; 4
    BIT_SET(SPCR, MSTR);    // Master Mode
    564a:	8c b5       	in	r24, 0x2c	; 44
    564c:	80 61       	ori	r24, 0x10	; 16
    564e:	8c bd       	out	0x2c, r24	; 44
    BIT_SET(SPCR, SPE);     // Enable SPI
    5650:	8c b5       	in	r24, 0x2c	; 44
    5652:	80 64       	ori	r24, 0x40	; 64
    5654:	8c bd       	out	0x2c, r24	; 44

	// SPI Clear any pending interrupt flags
	D = SPSR;
    5656:	8d b5       	in	r24, 0x2d	; 45
    5658:	89 83       	std	Y+1, r24	; 0x01
	D = SPDR;
    565a:	8e b5       	in	r24, 0x2e	; 46
    565c:	89 83       	std	Y+1, r24	; 0x01

	/// Set SPI clock mode 0 
    ///  SPI Mode     CPOL    CPHA            Sample
    ///  0    0       0       Leading (Rising)   Edge
    SPI0_Mode(0);
    565e:	80 e0       	ldi	r24, 0x00	; 0
    5660:	90 e0       	ldi	r25, 0x00	; 0
    5662:	a0 df       	rcall	.-192    	; 0x55a4 <SPI0_Mode>

	// Set SPI clock speed
    SPI0_Speed(speed);
    5664:	c7 01       	movw	r24, r14
    5666:	b6 01       	movw	r22, r12

    SPI0_TXRX_Byte(0xff);	// Send dummy 0xFF
    5668:	36 df       	rcall	.-404    	; 0x54d6 <SPI0_Speed>
    566a:	8f ef       	ldi	r24, 0xFF	; 255
    566c:	d5 df       	rcall	.-86     	; 0x5618 <SPI0_TXRX_Byte>
	SPI0_Init_state = 1;

}
    566e:	0f 90       	pop	r0
    5670:	df 91       	pop	r29
    5672:	cf 91       	pop	r28
    5674:	ff 90       	pop	r15
    5676:	ef 90       	pop	r14
    5678:	df 90       	pop	r13
    567a:	cf 90       	pop	r12
    567c:	08 95       	ret

0000567e <SPI0_TX>:
/// @brief HSPI write using FIFO
/// @param[in] *data: transmit buffer
/// @param[in] count: number of bytes to write
/// @return  void
void SPI0_TX(uint8_t *data, int count)
{
    567e:	0f 93       	push	r16
    5680:	1f 93       	push	r17
    5682:	cf 93       	push	r28
    5684:	df 93       	push	r29
    5686:	8c 01       	movw	r16, r24
    5688:	eb 01       	movw	r28, r22

    while(count > 0)
    568a:	1c 16       	cp	r1, r28
    568c:	1d 06       	cpc	r1, r29
    568e:	34 f4       	brge	.+12     	; 0x569c <SPI0_TX+0x1e>
    {
		SPI0_TXRX_Byte(*data);
    5690:	f8 01       	movw	r30, r16
    5692:	81 91       	ld	r24, Z+
    5694:	8f 01       	movw	r16, r30
    5696:	c0 df       	rcall	.-128    	; 0x5618 <SPI0_TXRX_Byte>
		++data;
		--count;
    5698:	21 97       	sbiw	r28, 0x01	; 1
    569a:	f7 cf       	rjmp	.-18     	; 0x568a <SPI0_TX+0xc>
	}
}
    569c:	df 91       	pop	r29
    569e:	cf 91       	pop	r28
    56a0:	1f 91       	pop	r17
    56a2:	0f 91       	pop	r16
    56a4:	08 95       	ret

000056a6 <SPI0_TXRX>:
/// @param[in] *data: transmit / receive buffer
/// @param[in] count: number of bytes to write / read
/// @return  void

void SPI0_TXRX(uint8_t *data, int count)
{
    56a6:	0f 93       	push	r16
    56a8:	1f 93       	push	r17
    56aa:	cf 93       	push	r28
    56ac:	df 93       	push	r29
    56ae:	8c 01       	movw	r16, r24
    56b0:	eb 01       	movw	r28, r22

    while(count > 0)
    56b2:	1c 16       	cp	r1, r28
    56b4:	1d 06       	cpc	r1, r29
    56b6:	44 f4       	brge	.+16     	; 0x56c8 <SPI0_TXRX+0x22>
    {
		*data = SPI0_TXRX_Byte(*data);
    56b8:	f8 01       	movw	r30, r16
    56ba:	80 81       	ld	r24, Z
    56bc:	ad df       	rcall	.-166    	; 0x5618 <SPI0_TXRX_Byte>
    56be:	f8 01       	movw	r30, r16
    56c0:	81 93       	st	Z+, r24
    56c2:	8f 01       	movw	r16, r30
		++data;
		--count;
    56c4:	21 97       	sbiw	r28, 0x01	; 1
    56c6:	f5 cf       	rjmp	.-22     	; 0x56b2 <SPI0_TXRX+0xc>
	}
}
    56c8:	df 91       	pop	r29
    56ca:	cf 91       	pop	r28
    56cc:	1f 91       	pop	r17
    56ce:	0f 91       	pop	r16
    56d0:	08 95       	ret

000056d2 <SPI0_RX>:
/// @brief HSPI read using FIFO
/// @param[in] *data: receive buffer
/// @param[in] count: number of bytes to read
/// @return  void
void SPI0_RX(uint8_t *data, int count)
{
    56d2:	0f 93       	push	r16
    56d4:	1f 93       	push	r17
    56d6:	cf 93       	push	r28
    56d8:	df 93       	push	r29
    56da:	8c 01       	movw	r16, r24
    56dc:	eb 01       	movw	r28, r22

    while(count > 0)
    56de:	1c 16       	cp	r1, r28
    56e0:	1d 06       	cpc	r1, r29
    56e2:	3c f4       	brge	.+14     	; 0x56f2 <SPI0_RX+0x20>
    {
		*data = SPI0_TXRX_Byte(0xff);
    56e4:	8f ef       	ldi	r24, 0xFF	; 255
    56e6:	98 df       	rcall	.-208    	; 0x5618 <SPI0_TXRX_Byte>
    56e8:	f8 01       	movw	r30, r16
    56ea:	81 93       	st	Z+, r24
    56ec:	8f 01       	movw	r16, r30
		++data;
		--count;
    56ee:	21 97       	sbiw	r28, 0x01	; 1
    56f0:	f6 cf       	rjmp	.-20     	; 0x56de <SPI0_RX+0xc>
	}
}
    56f2:	df 91       	pop	r29
    56f4:	cf 91       	pop	r28
    56f6:	1f 91       	pop	r17
    56f8:	0f 91       	pop	r16
    56fa:	08 95       	ret

000056fc <TWI_Init>:
///
///@return void.
void TWI_Init(const uint8_t Prescale, const uint8_t BitLength)
{

    GPIO_PIN_LATCH_HI(SCL);                   // Pull Up on
    56fc:	40 9a       	sbi	0x08, 0	; 8
    GPIO_PIN_LATCH_HI(SDA);                   // Pull Up on
    56fe:	41 9a       	sbi	0x08, 1	; 8

    BIT_SET(TWCR,TWEN);
    5700:	ec eb       	ldi	r30, 0xBC	; 188
    5702:	f0 e0       	ldi	r31, 0x00	; 0
    5704:	90 81       	ld	r25, Z
    5706:	94 60       	ori	r25, 0x04	; 4
    5708:	90 83       	st	Z, r25

    TWSR  = Prescale;
    570a:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    TWBR  = BitLength;
    570e:	60 93 b8 00 	sts	0x00B8, r22	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    5712:	08 95       	ret

00005714 <TWI_StopTransmission>:


/** @brief Sends a TWI STOP onto the TWI bus, terminating communication with the currently addressed device. */
inline void TWI_StopTransmission(void)
{
    TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    5714:	84 e9       	ldi	r24, 0x94	; 148
    5716:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    571a:	08 95       	ret

0000571c <TWI_StartTransmission>:
    for (;;)
    {
        bool     BusCaptured = false;
        uint16_t TimeoutRemaining;

        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    571c:	94 ea       	ldi	r25, 0xA4	; 164
    571e:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5722:	24 e6       	ldi	r18, 0x64	; 100
    5724:	62 9f       	mul	r22, r18
    5726:	b0 01       	movw	r22, r0
    5728:	11 24       	eor	r1, r1
    572a:	61 50       	subi	r22, 0x01	; 1
    572c:	71 09       	sbc	r23, r1

        TimeoutRemaining = (TimeoutMS * 100);
        while (TimeoutRemaining-- && !(BusCaptured))
    572e:	9b 01       	movw	r18, r22
///@return TWI error value on fail.
uint8_t TWI_StartTransmission(const uint8_t SlaveAddress, const uint8_t TimeoutMS)
{
    for (;;)
    {
        bool     BusCaptured = false;
    5730:	40 e0       	ldi	r20, 0x00	; 0
    5732:	50 e0       	ldi	r21, 0x00	; 0
                    case TW_START:
                    case TW_REP_START:
                        BusCaptured = true;
                        break;
                    case TW_MT_ARB_LOST:
                        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    5734:	e4 ea       	ldi	r30, 0xA4	; 164
        uint16_t TimeoutRemaining;

        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));

        TimeoutRemaining = (TimeoutMS * 100);
        while (TimeoutRemaining-- && !(BusCaptured))
    5736:	2f 3f       	cpi	r18, 0xFF	; 255
    5738:	9f ef       	ldi	r25, 0xFF	; 255
    573a:	39 07       	cpc	r19, r25
    573c:	41 f1       	breq	.+80     	; 0x578e <TWI_StartTransmission+0x72>
    573e:	41 15       	cp	r20, r1
    5740:	51 05       	cpc	r21, r1
    5742:	f1 f4       	brne	.+60     	; 0x5780 <TWI_StartTransmission+0x64>
        {
            if (TWCR & (1 << TWINT))
    5744:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5748:	97 ff       	sbrs	r25, 7
    574a:	13 c0       	rjmp	.+38     	; 0x5772 <TWI_StartTransmission+0x56>
            {
                switch (TWSR & TW_STATUS_MASK)
    574c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5750:	98 7f       	andi	r25, 0xF8	; 248
    5752:	90 31       	cpi	r25, 0x10	; 16
    5754:	61 f0       	breq	.+24     	; 0x576e <TWI_StartTransmission+0x52>
    5756:	98 33       	cpi	r25, 0x38	; 56
    5758:	39 f0       	breq	.+14     	; 0x5768 <TWI_StartTransmission+0x4c>
    575a:	98 30       	cpi	r25, 0x08	; 8
    575c:	41 f0       	breq	.+16     	; 0x576e <TWI_StartTransmission+0x52>
                        break;
                    case TW_MT_ARB_LOST:
                        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
                        continue;
                    default:
                        TWCR = (1 << TWEN);
    575e:	84 e0       	ldi	r24, 0x04	; 4
    5760:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
                        return TWI_ERROR_BusFault;
    5764:	81 e0       	ldi	r24, 0x01	; 1
    5766:	08 95       	ret
                    case TW_START:
                    case TW_REP_START:
                        BusCaptured = true;
                        break;
                    case TW_MT_ARB_LOST:
                        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    5768:	e0 93 bc 00 	sts	0x00BC, r30	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
                        continue;
    576c:	06 c0       	rjmp	.+12     	; 0x577a <TWI_StartTransmission+0x5e>
            {
                switch (TWSR & TW_STATUS_MASK)
                {
                    case TW_START:
                    case TW_REP_START:
                        BusCaptured = true;
    576e:	41 e0       	ldi	r20, 0x01	; 1
    5770:	50 e0       	ldi	r21, 0x00	; 0
    5772:	92 e4       	ldi	r25, 0x42	; 66
    5774:	9a 95       	dec	r25
    5776:	f1 f7       	brne	.-4      	; 0x5774 <TWI_StartTransmission+0x58>
    5778:	00 c0       	rjmp	.+0      	; 0x577a <TWI_StartTransmission+0x5e>
    577a:	21 50       	subi	r18, 0x01	; 1
    577c:	31 09       	sbc	r19, r1
    577e:	db cf       	rjmp	.-74     	; 0x5736 <TWI_StartTransmission+0x1a>
            }

            _delay_us(10);
        }

        if (!(TimeoutRemaining))
    5780:	23 2b       	or	r18, r19
    5782:	29 f4       	brne	.+10     	; 0x578e <TWI_StartTransmission+0x72>
        {
            TWCR = (1 << TWEN);
    5784:	84 e0       	ldi	r24, 0x04	; 4
    5786:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
            return TWI_ERROR_BusCaptureTimeout;
    578a:	82 e0       	ldi	r24, 0x02	; 2
    578c:	08 95       	ret
        }

        TWDR = SlaveAddress;
    578e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
        TWCR = ((1 << TWINT) | (1 << TWEN));
    5792:	84 e8       	ldi	r24, 0x84	; 132
    5794:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

        TimeoutRemaining = (TimeoutMS * 100);
        while (TimeoutRemaining--)
    5798:	6f 3f       	cpi	r22, 0xFF	; 255
    579a:	8f ef       	ldi	r24, 0xFF	; 255
    579c:	78 07       	cpc	r23, r24
    579e:	71 f0       	breq	.+28     	; 0x57bc <TWI_StartTransmission+0xa0>
        {
            if (TWCR & (1 << TWINT))
    57a0:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    57a4:	cb 01       	movw	r24, r22
    57a6:	01 97       	sbiw	r24, 0x01	; 1
    57a8:	27 fd       	sbrc	r18, 7
    57aa:	06 c0       	rjmp	.+12     	; 0x57b8 <TWI_StartTransmission+0x9c>
    57ac:	22 e4       	ldi	r18, 0x42	; 66
    57ae:	2a 95       	dec	r18
    57b0:	f1 f7       	brne	.-4      	; 0x57ae <TWI_StartTransmission+0x92>
    57b2:	00 c0       	rjmp	.+0      	; 0x57b4 <TWI_StartTransmission+0x98>
    57b4:	bc 01       	movw	r22, r24
    57b6:	f0 cf       	rjmp	.-32     	; 0x5798 <TWI_StartTransmission+0x7c>
                break;

            _delay_us(10);
        }

        if (!(TimeoutRemaining))
    57b8:	67 2b       	or	r22, r23
    57ba:	61 f0       	breq	.+24     	; 0x57d4 <TWI_StartTransmission+0xb8>
            return TWI_ERROR_SlaveResponseTimeout;

        switch (TWSR & TW_STATUS_MASK)
    57bc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    57c0:	88 7f       	andi	r24, 0xF8	; 248
    57c2:	88 31       	cpi	r24, 0x18	; 24
    57c4:	49 f0       	breq	.+18     	; 0x57d8 <TWI_StartTransmission+0xbc>
    57c6:	80 34       	cpi	r24, 0x40	; 64
    57c8:	39 f0       	breq	.+14     	; 0x57d8 <TWI_StartTransmission+0xbc>
        {
            case TW_MT_SLA_ACK:
            case TW_MR_SLA_ACK:
                return TWI_ERROR_NoError;
            default:
                TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    57ca:	84 e9       	ldi	r24, 0x94	; 148
    57cc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
                return TWI_ERROR_SlaveNotReady;
    57d0:	84 e0       	ldi	r24, 0x04	; 4
    57d2:	08 95       	ret

            _delay_us(10);
        }

        if (!(TimeoutRemaining))
            return TWI_ERROR_SlaveResponseTimeout;
    57d4:	83 e0       	ldi	r24, 0x03	; 3
    57d6:	08 95       	ret

        switch (TWSR & TW_STATUS_MASK)
        {
            case TW_MT_SLA_ACK:
            case TW_MR_SLA_ACK:
                return TWI_ERROR_NoError;
    57d8:	80 e0       	ldi	r24, 0x00	; 0
            default:
                TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
                return TWI_ERROR_SlaveNotReady;
        }
    }
}
    57da:	08 95       	ret

000057dc <TWI_SendByte>:
///
///@return 1 if Acknowledge.
///@return 0 on fail.
bool TWI_SendByte(const uint8_t Byte)
{
    TWDR = Byte;
    57dc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    TWCR = ((1 << TWINT) | (1 << TWEN));
    57e0:	84 e8       	ldi	r24, 0x84	; 132
    57e2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    while (!(TWCR & (1 << TWINT)));
    57e6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    57ea:	87 ff       	sbrs	r24, 7
    57ec:	fc cf       	rjmp	.-8      	; 0x57e6 <TWI_SendByte+0xa>

    return ((TWSR & TW_STATUS_MASK) == TW_MT_DATA_ACK);
    57ee:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    57f2:	98 7f       	andi	r25, 0xF8	; 248
    57f4:	21 e0       	ldi	r18, 0x01	; 1
    57f6:	30 e0       	ldi	r19, 0x00	; 0
    57f8:	98 32       	cpi	r25, 0x28	; 40
    57fa:	11 f0       	breq	.+4      	; 0x5800 <TWI_SendByte+0x24>
    57fc:	20 e0       	ldi	r18, 0x00	; 0
    57fe:	30 e0       	ldi	r19, 0x00	; 0
}
    5800:	c9 01       	movw	r24, r18
    5802:	08 95       	ret

00005804 <TWI_ReceiveByte>:


bool TWI_ReceiveByte(uint8_t* const Byte,
const bool LastByte)
{
    5804:	fc 01       	movw	r30, r24
    uint8_t TWCRMask;

    if (LastByte)
    5806:	61 15       	cp	r22, r1
    5808:	71 05       	cpc	r23, r1
    580a:	11 f4       	brne	.+4      	; 0x5810 <TWI_ReceiveByte+0xc>
        TWCRMask = ((1 << TWINT) | (1 << TWEN));
    else
        TWCRMask = ((1 << TWINT) | (1 << TWEN) | (1 << TWEA));
    580c:	94 ec       	ldi	r25, 0xC4	; 196
    580e:	01 c0       	rjmp	.+2      	; 0x5812 <TWI_ReceiveByte+0xe>
const bool LastByte)
{
    uint8_t TWCRMask;

    if (LastByte)
        TWCRMask = ((1 << TWINT) | (1 << TWEN));
    5810:	94 e8       	ldi	r25, 0x84	; 132
    else
        TWCRMask = ((1 << TWINT) | (1 << TWEN) | (1 << TWEA));

    TWCR = TWCRMask;
    5812:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    while (!BIT_TST(TWCR, TWINT))
    5816:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    581a:	87 ff       	sbrs	r24, 7
    581c:	fc cf       	rjmp	.-8      	; 0x5816 <TWI_ReceiveByte+0x12>
        ;
    *Byte = TWDR;
    581e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5822:	80 83       	st	Z, r24

    uint8_t Status = (TWSR & TW_STATUS_MASK);
    5824:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5828:	28 7f       	andi	r18, 0xF8	; 248

    return ((LastByte) ? (Status == TW_MR_DATA_NACK) : (Status == TW_MR_DATA_ACK));
    582a:	81 e0       	ldi	r24, 0x01	; 1
    582c:	90 e0       	ldi	r25, 0x00	; 0
    582e:	67 2b       	or	r22, r23
    5830:	19 f0       	breq	.+6      	; 0x5838 <TWI_ReceiveByte+0x34>
    5832:	28 35       	cpi	r18, 0x58	; 88
    5834:	19 f4       	brne	.+6      	; 0x583c <TWI_ReceiveByte+0x38>
    5836:	03 c0       	rjmp	.+6      	; 0x583e <TWI_ReceiveByte+0x3a>
    5838:	20 35       	cpi	r18, 0x50	; 80
    583a:	09 f0       	breq	.+2      	; 0x583e <TWI_ReceiveByte+0x3a>
    583c:	80 e0       	ldi	r24, 0x00	; 0
}
    583e:	08 95       	ret

00005840 <TWI_ReadPacket>:
const uint8_t TimeoutMS,
const uint8_t* InternalAddress,
uint8_t InternalAddressLen,
uint8_t* Buffer,
uint8_t Length)
{
    5840:	a0 e0       	ldi	r26, 0x00	; 0
    5842:	b0 e0       	ldi	r27, 0x00	; 0
    5844:	e6 e2       	ldi	r30, 0x26	; 38
    5846:	fc e2       	ldi	r31, 0x2C	; 44
    5848:	0c 94 e5 df 	jmp	0x1bfca	; 0x1bfca <__prologue_saves__+0xe>
    584c:	f8 2e       	mov	r15, r24
    584e:	b6 2e       	mov	r11, r22
    5850:	94 2e       	mov	r9, r20
    5852:	a5 2e       	mov	r10, r21
    5854:	c2 2f       	mov	r28, r18
    uint8_t ErrorCode;

    if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_WRITE,
    5856:	8e 7f       	andi	r24, 0xFE	; 254
    5858:	61 df       	rcall	.-318    	; 0x571c <TWI_StartTransmission>
    585a:	d8 2f       	mov	r29, r24
    585c:	81 11       	cpse	r24, r1
    585e:	2b c0       	rjmp	.+86     	; 0x58b6 <TWI_ReadPacket+0x76>
    5860:	c9 2c       	mov	r12, r9
    5862:	da 2c       	mov	r13, r10
        TimeoutMS)) == TWI_ERROR_NoError)
    {
        while (InternalAddressLen--)
    5864:	cc 23       	and	r28, r28
    5866:	39 f0       	breq	.+14     	; 0x5876 <TWI_ReadPacket+0x36>
        {
            if (!(TWI_SendByte(*(InternalAddress++))))
    5868:	f6 01       	movw	r30, r12
    586a:	81 91       	ld	r24, Z+
    586c:	6f 01       	movw	r12, r30
    586e:	b6 df       	rcall	.-148    	; 0x57dc <TWI_SendByte>
    5870:	c1 50       	subi	r28, 0x01	; 1
    5872:	89 2b       	or	r24, r25
    5874:	b9 f7       	brne	.-18     	; 0x5864 <TWI_ReadPacket+0x24>
                ErrorCode = TWI_ERROR_SlaveNAK;
                break;
            }
        }

        if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_READ,
    5876:	6b 2d       	mov	r22, r11
    5878:	8f 2d       	mov	r24, r15
    587a:	81 60       	ori	r24, 0x01	; 1
    587c:	4f df       	rcall	.-354    	; 0x571c <TWI_StartTransmission>
    587e:	d8 2f       	mov	r29, r24
    5880:	81 11       	cpse	r24, r1
    5882:	19 c0       	rjmp	.+50     	; 0x58b6 <TWI_ReadPacket+0x76>
    5884:	cf ef       	ldi	r28, 0xFF	; 255
    5886:	ce 0d       	add	r28, r14
            TimeoutMS)) == TWI_ERROR_NoError)
        {
            while (Length--)
    5888:	cf 3f       	cpi	r28, 0xFF	; 255
    588a:	91 f0       	breq	.+36     	; 0x58b0 <TWI_ReadPacket+0x70>
            {
                if (!(TWI_ReceiveByte(Buffer++, (Length == 0))))
    588c:	78 01       	movw	r14, r16
    588e:	ff ef       	ldi	r31, 0xFF	; 255
    5890:	ef 1a       	sub	r14, r31
    5892:	ff 0a       	sbc	r15, r31
    5894:	61 e0       	ldi	r22, 0x01	; 1
    5896:	70 e0       	ldi	r23, 0x00	; 0
    5898:	cc 23       	and	r28, r28
    589a:	11 f0       	breq	.+4      	; 0x58a0 <TWI_ReadPacket+0x60>
    589c:	60 e0       	ldi	r22, 0x00	; 0
    589e:	70 e0       	ldi	r23, 0x00	; 0
    58a0:	c8 01       	movw	r24, r16
    58a2:	b0 df       	rcall	.-160    	; 0x5804 <TWI_ReceiveByte>
    58a4:	c1 50       	subi	r28, 0x01	; 1
    58a6:	89 2b       	or	r24, r25
    58a8:	11 f0       	breq	.+4      	; 0x58ae <TWI_ReadPacket+0x6e>
    58aa:	87 01       	movw	r16, r14
    58ac:	ed cf       	rjmp	.-38     	; 0x5888 <TWI_ReadPacket+0x48>
                {
                    ErrorCode = TWI_ERROR_SlaveNAK;
    58ae:	d5 e0       	ldi	r29, 0x05	; 5


/** @brief Sends a TWI STOP onto the TWI bus, terminating communication with the currently addressed device. */
inline void TWI_StopTransmission(void)
{
    TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    58b0:	84 e9       	ldi	r24, 0x94	; 148
    58b2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
            TWI_StopTransmission();
        }
    }

    return ErrorCode;
}
    58b6:	8d 2f       	mov	r24, r29
    58b8:	cd b7       	in	r28, 0x3d	; 61
    58ba:	de b7       	in	r29, 0x3e	; 62
    58bc:	eb e0       	ldi	r30, 0x0B	; 11
    58be:	0c 94 01 e0 	jmp	0x1c002	; 0x1c002 <__epilogue_restores__+0xe>

000058c2 <TWI_WritePacket>:
const uint8_t TimeoutMS,
const uint8_t* InternalAddress,
uint8_t InternalAddressLen,
const uint8_t* Buffer,
uint8_t Length)
{
    58c2:	a0 e0       	ldi	r26, 0x00	; 0
    58c4:	b0 e0       	ldi	r27, 0x00	; 0
    58c6:	e7 e6       	ldi	r30, 0x67	; 103
    58c8:	fc e2       	ldi	r31, 0x2C	; 44
    58ca:	0c 94 e7 df 	jmp	0x1bfce	; 0x1bfce <__prologue_saves__+0x12>
    58ce:	b4 2e       	mov	r11, r20
    58d0:	f5 2e       	mov	r15, r21
    58d2:	c2 2f       	mov	r28, r18
    uint8_t ErrorCode;

    if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_WRITE,
    58d4:	8e 7f       	andi	r24, 0xFE	; 254
    58d6:	22 df       	rcall	.-444    	; 0x571c <TWI_StartTransmission>
    58d8:	d8 2f       	mov	r29, r24
    58da:	81 11       	cpse	r24, r1
    58dc:	1a c0       	rjmp	.+52     	; 0x5912 <TWI_WritePacket+0x50>
    58de:	cb 2c       	mov	r12, r11
    58e0:	df 2c       	mov	r13, r15
        TimeoutMS)) == TWI_ERROR_NoError)
    {
        while (InternalAddressLen--)
    58e2:	cc 23       	and	r28, r28
    58e4:	41 f0       	breq	.+16     	; 0x58f6 <TWI_WritePacket+0x34>
        {
            if (!(TWI_SendByte(*(InternalAddress++))))
    58e6:	f6 01       	movw	r30, r12
    58e8:	81 91       	ld	r24, Z+
    58ea:	6f 01       	movw	r12, r30
    58ec:	77 df       	rcall	.-274    	; 0x57dc <TWI_SendByte>
    58ee:	c1 50       	subi	r28, 0x01	; 1
    58f0:	89 2b       	or	r24, r25
    58f2:	b9 f7       	brne	.-18     	; 0x58e2 <TWI_WritePacket+0x20>
            {
                ErrorCode = TWI_ERROR_SlaveNAK;
    58f4:	d5 e0       	ldi	r29, 0x05	; 5
    58f6:	68 01       	movw	r12, r16
                break;
            }
        }

        while (Length--)
    58f8:	ee 20       	and	r14, r14
    58fa:	41 f0       	breq	.+16     	; 0x590c <TWI_WritePacket+0x4a>
        {
            if (!(TWI_SendByte(*(Buffer++))))
    58fc:	f6 01       	movw	r30, r12
    58fe:	81 91       	ld	r24, Z+
    5900:	6f 01       	movw	r12, r30
    5902:	6c df       	rcall	.-296    	; 0x57dc <TWI_SendByte>
    5904:	ea 94       	dec	r14
    5906:	89 2b       	or	r24, r25
    5908:	b9 f7       	brne	.-18     	; 0x58f8 <TWI_WritePacket+0x36>
            {
                ErrorCode = TWI_ERROR_SlaveNAK;
    590a:	d5 e0       	ldi	r29, 0x05	; 5


/** @brief Sends a TWI STOP onto the TWI bus, terminating communication with the currently addressed device. */
inline void TWI_StopTransmission(void)
{
    TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    590c:	84 e9       	ldi	r24, 0x94	; 148
    590e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

        TWI_StopTransmission();
    }

    return ErrorCode;
}
    5912:	8d 2f       	mov	r24, r29
    5914:	cd b7       	in	r28, 0x3d	; 61
    5916:	de b7       	in	r29, 0x3e	; 62
    5918:	e9 e0       	ldi	r30, 0x09	; 9
    591a:	0c 94 03 e0 	jmp	0x1c006	; 0x1c006 <__epilogue_restores__+0x12>

0000591e <__vector_26>:
  }

  SREG = sreg;
}

ISR(TWI_vect, ISR_BLOCK) {
    591e:	1f 92       	push	r1
    5920:	0f 92       	push	r0
    5922:	0f b6       	in	r0, 0x3f	; 63
    5924:	0f 92       	push	r0
    5926:	11 24       	eor	r1, r1
    5928:	0b b6       	in	r0, 0x3b	; 59
    592a:	0f 92       	push	r0
    592c:	2f 93       	push	r18
    592e:	3f 93       	push	r19
    5930:	4f 93       	push	r20
    5932:	5f 93       	push	r21
    5934:	6f 93       	push	r22
    5936:	7f 93       	push	r23
    5938:	8f 93       	push	r24
    593a:	9f 93       	push	r25
    593c:	af 93       	push	r26
    593e:	bf 93       	push	r27
    5940:	ef 93       	push	r30
    5942:	ff 93       	push	r31

  uint8_t status = TW_STATUS;
    5944:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5948:	88 7f       	andi	r24, 0xF8	; 248

  /* This interrupt should only fire if there is something to do. */
  assert(op != NULL);
    594a:	e0 91 44 17 	lds	r30, 0x1744	; 0x801744 <op>
    594e:	f0 91 45 17 	lds	r31, 0x1745	; 0x801745 <op+0x1>
    5952:	30 97       	sbiw	r30, 0x00	; 0
    5954:	09 f4       	brne	.+2      	; 0x5958 <__vector_26+0x3a>
    5956:	6f c0       	rjmp	.+222    	; 0x5a36 <__vector_26+0x118>

  if ((op->address & _BV(0)) == TW_READ) {
    5958:	90 81       	ld	r25, Z
    595a:	90 ff       	sbrs	r25, 0
    595c:	39 c0       	rjmp	.+114    	; 0x59d0 <__vector_26+0xb2>
    /* Master Receiver mode. */
    switch (status) {
    595e:	80 34       	cpi	r24, 0x40	; 64
    5960:	81 f0       	breq	.+32     	; 0x5982 <__vector_26+0x64>
    5962:	38 f4       	brcc	.+14     	; 0x5972 <__vector_26+0x54>
    5964:	80 31       	cpi	r24, 0x10	; 16
    5966:	09 f4       	brne	.+2      	; 0x596a <__vector_26+0x4c>
    5968:	45 c0       	rjmp	.+138    	; 0x59f4 <__vector_26+0xd6>
    596a:	88 33       	cpi	r24, 0x38	; 56
    596c:	09 f4       	brne	.+2      	; 0x5970 <__vector_26+0x52>
    596e:	94 c0       	rjmp	.+296    	; 0x5a98 <__vector_26+0x17a>
    5970:	36 c0       	rjmp	.+108    	; 0x59de <__vector_26+0xc0>
    5972:	80 35       	cpi	r24, 0x50	; 80
    5974:	59 f0       	breq	.+22     	; 0x598c <__vector_26+0x6e>
    5976:	88 35       	cpi	r24, 0x58	; 88
    5978:	f1 f0       	breq	.+60     	; 0x59b6 <__vector_26+0x98>
    597a:	88 34       	cpi	r24, 0x48	; 72
    597c:	09 f0       	breq	.+2      	; 0x5980 <__vector_26+0x62>
    597e:	5b c0       	rjmp	.+182    	; 0x5a36 <__vector_26+0x118>
    5980:	54 c0       	rjmp	.+168    	; 0x5a2a <__vector_26+0x10c>
      TWCR = TWCR_DEFAULT | _BV(TWINT) | _BV(TWSTA);
      break;

    /* SLA+R has been transmitted; ACK has been received. */
    case TW_MR_SLA_ACK:
      if (op->buflen == 1) {
    5982:	81 81       	ldd	r24, Z+1	; 0x01
    5984:	81 30       	cpi	r24, 0x01	; 1
    5986:	09 f0       	breq	.+2      	; 0x598a <__vector_26+0x6c>
    5988:	4a c0       	rjmp	.+148    	; 0x5a1e <__vector_26+0x100>
    598a:	13 c0       	rjmp	.+38     	; 0x59b2 <__vector_26+0x94>
      txn->flags = I2C_TXN_DONE | I2C_TXN_ERR;
      goto next_txn;

    /* Data byte has been received; ACK has been returned. */
    case TW_MR_DATA_ACK:
      op->buf[op->bufpos++] = TWDR;
    598c:	a3 81       	ldd	r26, Z+3	; 0x03
    598e:	b4 81       	ldd	r27, Z+4	; 0x04
    5990:	82 81       	ldd	r24, Z+2	; 0x02
    5992:	91 e0       	ldi	r25, 0x01	; 1
    5994:	98 0f       	add	r25, r24
    5996:	92 83       	std	Z+2, r25	; 0x02
    5998:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    599c:	a8 0f       	add	r26, r24
    599e:	b1 1d       	adc	r27, r1
    59a0:	9c 93       	st	X, r25
      if (op->bufpos+1 == op->buflen) {
    59a2:	82 81       	ldd	r24, Z+2	; 0x02
    59a4:	21 81       	ldd	r18, Z+1	; 0x01
    59a6:	90 e0       	ldi	r25, 0x00	; 0
    59a8:	01 96       	adiw	r24, 0x01	; 1
    59aa:	30 e0       	ldi	r19, 0x00	; 0
    59ac:	82 17       	cp	r24, r18
    59ae:	93 07       	cpc	r25, r19
    59b0:	b1 f5       	brne	.+108    	; 0x5a1e <__vector_26+0x100>
        TWCR = TWCR_NOT_ACK;
    59b2:	85 e8       	ldi	r24, 0x85	; 133
    59b4:	7c c0       	rjmp	.+248    	; 0x5aae <__vector_26+0x190>
      }
      break;

    /* Data byte has been received; NOT ACK has been returned. */
    case TW_MR_DATA_NACK:
      op->buf[op->bufpos++] = TWDR;
    59b6:	83 81       	ldd	r24, Z+3	; 0x03
    59b8:	94 81       	ldd	r25, Z+4	; 0x04
    59ba:	22 81       	ldd	r18, Z+2	; 0x02
    59bc:	31 e0       	ldi	r19, 0x01	; 1
    59be:	32 0f       	add	r19, r18
    59c0:	32 83       	std	Z+2, r19	; 0x02
    59c2:	30 91 bb 00 	lds	r19, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    59c6:	fc 01       	movw	r30, r24
    59c8:	e2 0f       	add	r30, r18
    59ca:	f1 1d       	adc	r31, r1
    59cc:	30 83       	st	Z, r19
      goto next_op;
    59ce:	35 c0       	rjmp	.+106    	; 0x5a3a <__vector_26+0x11c>
    default:
      assert(0 && "unknown status in master receiver mode");
    }
  } else {
    /* Master Transmitter mode. */
    switch (status) {
    59d0:	80 32       	cpi	r24, 0x20	; 32
    59d2:	59 f1       	breq	.+86     	; 0x5a2a <__vector_26+0x10c>
    59d4:	38 f4       	brcc	.+14     	; 0x59e4 <__vector_26+0xc6>
    59d6:	80 31       	cpi	r24, 0x10	; 16
    59d8:	69 f0       	breq	.+26     	; 0x59f4 <__vector_26+0xd6>
    59da:	88 31       	cpi	r24, 0x18	; 24
    59dc:	a1 f0       	breq	.+40     	; 0x5a06 <__vector_26+0xe8>
    59de:	88 30       	cpi	r24, 0x08	; 8
    59e0:	51 f5       	brne	.+84     	; 0x5a36 <__vector_26+0x118>
    59e2:	08 c0       	rjmp	.+16     	; 0x59f4 <__vector_26+0xd6>
    59e4:	80 33       	cpi	r24, 0x30	; 48
    59e6:	e9 f0       	breq	.+58     	; 0x5a22 <__vector_26+0x104>
    59e8:	88 33       	cpi	r24, 0x38	; 56
    59ea:	09 f4       	brne	.+2      	; 0x59ee <__vector_26+0xd0>
    59ec:	55 c0       	rjmp	.+170    	; 0x5a98 <__vector_26+0x17a>
    59ee:	88 32       	cpi	r24, 0x28	; 40
    59f0:	11 f5       	brne	.+68     	; 0x5a36 <__vector_26+0x118>
    59f2:	05 c0       	rjmp	.+10     	; 0x59fe <__vector_26+0xe0>

    /* A START condition has been transmitted. */
    case TW_START:
    /* A repeated START condition has been transmitted. */
    case TW_REP_START:
      assert(op->buflen > 0);
    59f4:	81 81       	ldd	r24, Z+1	; 0x01
    59f6:	88 23       	and	r24, r24
    59f8:	f1 f0       	breq	.+60     	; 0x5a36 <__vector_26+0x118>
      op->bufpos = 0;
    59fa:	12 82       	std	Z+2, r1	; 0x02
    59fc:	0d c0       	rjmp	.+26     	; 0x5a18 <__vector_26+0xfa>
      txn->flags = I2C_TXN_DONE | I2C_TXN_ERR;
      goto next_txn;

    /* Data byte has been transmitted; ACK has been received. */
    case TW_MT_DATA_ACK:
      if (op->bufpos < op->buflen) {
    59fe:	92 81       	ldd	r25, Z+2	; 0x02
    5a00:	81 81       	ldd	r24, Z+1	; 0x01
    5a02:	98 17       	cp	r25, r24
    5a04:	d0 f4       	brcc	.+52     	; 0x5a3a <__vector_26+0x11c>
        TWDR = op->buf[op->bufpos++];
    5a06:	83 81       	ldd	r24, Z+3	; 0x03
    5a08:	94 81       	ldd	r25, Z+4	; 0x04
    5a0a:	22 81       	ldd	r18, Z+2	; 0x02
    5a0c:	31 e0       	ldi	r19, 0x01	; 1
    5a0e:	32 0f       	add	r19, r18
    5a10:	32 83       	std	Z+2, r19	; 0x02
    5a12:	fc 01       	movw	r30, r24
    5a14:	e2 0f       	add	r30, r18
    5a16:	f1 1d       	adc	r31, r1
    5a18:	80 81       	ld	r24, Z
    5a1a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
        TWCR = TWCR_DEFAULT | _BV(TWINT);
    5a1e:	85 ec       	ldi	r24, 0xC5	; 197
    5a20:	46 c0       	rjmp	.+140    	; 0x5aae <__vector_26+0x190>
      /* No more bytes left to transmit... */
      goto next_op;

    /* Data byte has been transmitted; NOT ACK has been received. */
    case TW_MT_DATA_NACK:
      if (op->bufpos < op->buflen) {
    5a22:	92 81       	ldd	r25, Z+2	; 0x02
    5a24:	81 81       	ldd	r24, Z+1	; 0x01
    5a26:	98 17       	cp	r25, r24
    5a28:	40 f4       	brcc	.+16     	; 0x5a3a <__vector_26+0x11c>
        /* There were more bytes left to transmit! */
        txn->flags = I2C_TXN_DONE | I2C_TXN_ERR;
    5a2a:	e0 91 46 17 	lds	r30, 0x1746	; 0x801746 <txn>
    5a2e:	f0 91 47 17 	lds	r31, 0x1747	; 0x801747 <txn+0x1>
    5a32:	83 e0       	ldi	r24, 0x03	; 3
    5a34:	1d c0       	rjmp	.+58     	; 0x5a70 <__vector_26+0x152>
      }

      goto next_op;

    default:
      assert(0 && "unknown status in master transmitter mode");
    5a36:	0e 94 d6 e3 	call	0x1c7ac	; 0x1c7ac <abort>

next_op:
  /*
   * Advance to next operation in transaction, if possible.
   */
  if (++(txn->opspos) < txn->opslen) {
    5a3a:	e0 91 46 17 	lds	r30, 0x1746	; 0x801746 <txn>
    5a3e:	f0 91 47 17 	lds	r31, 0x1747	; 0x801747 <txn+0x1>
    5a42:	84 81       	ldd	r24, Z+4	; 0x04
    5a44:	8f 5f       	subi	r24, 0xFF	; 255
    5a46:	84 83       	std	Z+4, r24	; 0x04
    5a48:	93 81       	ldd	r25, Z+3	; 0x03
    5a4a:	89 17       	cp	r24, r25
    5a4c:	80 f4       	brcc	.+32     	; 0x5a6e <__vector_26+0x150>
    op = &txn->ops[txn->opspos];
    5a4e:	84 81       	ldd	r24, Z+4	; 0x04
    5a50:	90 e0       	ldi	r25, 0x00	; 0
    5a52:	01 96       	adiw	r24, 0x01	; 1
    5a54:	45 e0       	ldi	r20, 0x05	; 5
    5a56:	48 9f       	mul	r20, r24
    5a58:	90 01       	movw	r18, r0
    5a5a:	49 9f       	mul	r20, r25
    5a5c:	30 0d       	add	r19, r0
    5a5e:	11 24       	eor	r1, r1
    5a60:	e2 0f       	add	r30, r18
    5a62:	f3 1f       	adc	r31, r19
    5a64:	f0 93 45 17 	sts	0x1745, r31	; 0x801745 <op+0x1>
    5a68:	e0 93 44 17 	sts	0x1744, r30	; 0x801744 <op>
    5a6c:	15 c0       	rjmp	.+42     	; 0x5a98 <__vector_26+0x17a>
    TWCR = TWCR_DEFAULT | _BV(TWINT) | _BV(TWSTA);
    return;
  }

  /* No more operations, mark transaction as done. */
  txn->flags = I2C_TXN_DONE;
    5a6e:	81 e0       	ldi	r24, 0x01	; 1
    5a70:	82 83       	std	Z+2, r24	; 0x02

next_txn:
  /*
   * Advance to next transaction, if possible.
   */
  if (txn->next != NULL) {
    5a72:	e0 91 46 17 	lds	r30, 0x1746	; 0x801746 <txn>
    5a76:	f0 91 47 17 	lds	r31, 0x1747	; 0x801747 <txn+0x1>
    5a7a:	80 81       	ld	r24, Z
    5a7c:	91 81       	ldd	r25, Z+1	; 0x01
    5a7e:	89 2b       	or	r24, r25
    5a80:	69 f0       	breq	.+26     	; 0x5a9c <__vector_26+0x17e>
    txn = txn->next;
    5a82:	80 81       	ld	r24, Z
    5a84:	91 81       	ldd	r25, Z+1	; 0x01
    5a86:	90 93 47 17 	sts	0x1747, r25	; 0x801747 <txn+0x1>
    5a8a:	80 93 46 17 	sts	0x1746, r24	; 0x801746 <txn>
    op = &txn->ops[0];
    5a8e:	05 96       	adiw	r24, 0x05	; 5
    5a90:	90 93 45 17 	sts	0x1745, r25	; 0x801745 <op+0x1>
    5a94:	80 93 44 17 	sts	0x1744, r24	; 0x801744 <op>

    /* Repeated start. */
    TWCR = TWCR_DEFAULT | _BV(TWINT) | _BV(TWSTA);
    5a98:	85 ee       	ldi	r24, 0xE5	; 229
    5a9a:	09 c0       	rjmp	.+18     	; 0x5aae <__vector_26+0x190>
    return;
  }

  txn = NULL;
    5a9c:	10 92 47 17 	sts	0x1747, r1	; 0x801747 <txn+0x1>
    5aa0:	10 92 46 17 	sts	0x1746, r1	; 0x801746 <txn>
  op = NULL;
    5aa4:	10 92 45 17 	sts	0x1745, r1	; 0x801745 <op+0x1>
    5aa8:	10 92 44 17 	sts	0x1744, r1	; 0x801744 <op>

  /* No more transaction, transmit STOP. */
  TWCR = TWCR_DEFAULT | _BV(TWINT) | _BV(TWSTO);
    5aac:	85 ed       	ldi	r24, 0xD5	; 213
    5aae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
}
    5ab2:	ff 91       	pop	r31
    5ab4:	ef 91       	pop	r30
    5ab6:	bf 91       	pop	r27
    5ab8:	af 91       	pop	r26
    5aba:	9f 91       	pop	r25
    5abc:	8f 91       	pop	r24
    5abe:	7f 91       	pop	r23
    5ac0:	6f 91       	pop	r22
    5ac2:	5f 91       	pop	r21
    5ac4:	4f 91       	pop	r20
    5ac6:	3f 91       	pop	r19
    5ac8:	2f 91       	pop	r18
    5aca:	0f 90       	pop	r0
    5acc:	0b be       	out	0x3b, r0	; 59
    5ace:	0f 90       	pop	r0
    5ad0:	0f be       	out	0x3f, r0	; 63
    5ad2:	0f 90       	pop	r0
    5ad4:	1f 90       	pop	r1
    5ad6:	18 95       	reti

00005ad8 <BINtoBCD>:
        return -1;
    }
    if(b & 8)
        return 0;
    return 1;
}
    5ad8:	6a e0       	ldi	r22, 0x0A	; 10
    5ada:	0e 94 3e df 	call	0x1be7c	; 0x1be7c <__udivmodqi4>
    5ade:	82 95       	swap	r24
    5ae0:	80 7f       	andi	r24, 0xF0	; 240
    5ae2:	89 2b       	or	r24, r25
    5ae4:	08 95       	ret

00005ae6 <BCDtoBIN>:
    5ae6:	98 2f       	mov	r25, r24
    5ae8:	92 95       	swap	r25
    5aea:	9f 70       	andi	r25, 0x0F	; 15
    5aec:	8f 70       	andi	r24, 0x0F	; 15
    5aee:	2a e0       	ldi	r18, 0x0A	; 10
    5af0:	92 9f       	mul	r25, r18
    5af2:	80 0d       	add	r24, r0
    5af4:	11 24       	eor	r1, r1
    5af6:	08 95       	ret

00005af8 <rtc_run>:
///  - -1 = check run state.
///
/// @return  run state 0/1 on success.
/// @return -1 on error.
int rtc_run(int run)
{
    5af8:	cf 92       	push	r12
    5afa:	df 92       	push	r13
    5afc:	ef 92       	push	r14
    5afe:	0f 93       	push	r16
    5b00:	1f 93       	push	r17
    5b02:	cf 93       	push	r28
    5b04:	df 93       	push	r29
    5b06:	00 d0       	rcall	.+0      	; 0x5b08 <rtc_run+0x10>
    5b08:	00 d0       	rcall	.+0      	; 0x5b0a <rtc_run+0x12>
    5b0a:	00 d0       	rcall	.+0      	; 0x5b0c <rtc_run+0x14>
    5b0c:	cd b7       	in	r28, 0x3d	; 61
    5b0e:	de b7       	in	r29, 0x3e	; 62
    5b10:	6c 01       	movw	r12, r24
    uint8_t  WriteAddress;
    uint8_t  ReadAddress;
    uint8_t b = 0;
    5b12:	1c 82       	std	Y+4, r1	; 0x04

    ReadAddress = 0;
    5b14:	1d 82       	std	Y+5, r1	; 0x05
    if (TWI_ReadPacket(DS1307_R, RTC_TIMEOUT, &ReadAddress, sizeof(ReadAddress),
    5b16:	ee 24       	eor	r14, r14
    5b18:	e3 94       	inc	r14
    5b1a:	8e 01       	movw	r16, r28
    5b1c:	0c 5f       	subi	r16, 0xFC	; 252
    5b1e:	1f 4f       	sbci	r17, 0xFF	; 255
    5b20:	21 e0       	ldi	r18, 0x01	; 1
    5b22:	ae 01       	movw	r20, r28
    5b24:	4b 5f       	subi	r20, 0xFB	; 251
    5b26:	5f 4f       	sbci	r21, 0xFF	; 255
    5b28:	62 e3       	ldi	r22, 0x32	; 50
    5b2a:	81 ed       	ldi	r24, 0xD1	; 209
    5b2c:	89 de       	rcall	.-750    	; 0x5840 <TWI_ReadPacket>
    5b2e:	88 23       	and	r24, r24
    5b30:	19 f0       	breq	.+6      	; 0x5b38 <rtc_run+0x40>
        (uint8_t*)&b, 1) != TWI_ERROR_NoError)
    {
        printf("rtc_run read status error\n");
    5b32:	84 ea       	ldi	r24, 0xA4	; 164
    5b34:	94 e0       	ldi	r25, 0x04	; 4
    5b36:	2a c0       	rjmp	.+84     	; 0x5b8c <rtc_run+0x94>
    5b38:	8c 81       	ldd	r24, Y+4	; 0x04
        return -1;
    }

    if(run == -1)
    5b3a:	ff ef       	ldi	r31, 0xFF	; 255
    5b3c:	cf 16       	cp	r12, r31
    5b3e:	df 06       	cpc	r13, r31
    5b40:	59 f4       	brne	.+22     	; 0x5b58 <rtc_run+0x60>
        return ((b & 0x80) ? 0 : 1);
    5b42:	08 2e       	mov	r0, r24
    5b44:	00 0c       	add	r0, r0
    5b46:	99 0b       	sbc	r25, r25
    5b48:	80 95       	com	r24
    5b4a:	90 95       	com	r25
    5b4c:	89 2f       	mov	r24, r25
    5b4e:	88 1f       	adc	r24, r24
    5b50:	88 27       	eor	r24, r24
    5b52:	88 1f       	adc	r24, r24
    5b54:	90 e0       	ldi	r25, 0x00	; 0
    5b56:	26 c0       	rjmp	.+76     	; 0x5ba4 <rtc_run+0xac>

    b = ( b  & 0x7f) | (run ? 0 : 0x80);
    5b58:	8f 77       	andi	r24, 0x7F	; 127
    5b5a:	c1 14       	cp	r12, r1
    5b5c:	d1 04       	cpc	r13, r1
    5b5e:	11 f4       	brne	.+4      	; 0x5b64 <rtc_run+0x6c>
    5b60:	90 e8       	ldi	r25, 0x80	; 128
    5b62:	01 c0       	rjmp	.+2      	; 0x5b66 <rtc_run+0x6e>
    5b64:	90 e0       	ldi	r25, 0x00	; 0
    5b66:	89 2b       	or	r24, r25
    5b68:	8c 83       	std	Y+4, r24	; 0x04

    WriteAddress = 0;
    5b6a:	1e 82       	std	Y+6, r1	; 0x06
    if (TWI_WritePacket(DS1307_W, RTC_TIMEOUT, &WriteAddress, sizeof(WriteAddress),
    5b6c:	ee 24       	eor	r14, r14
    5b6e:	e3 94       	inc	r14
    5b70:	8e 01       	movw	r16, r28
    5b72:	0c 5f       	subi	r16, 0xFC	; 252
    5b74:	1f 4f       	sbci	r17, 0xFF	; 255
    5b76:	21 e0       	ldi	r18, 0x01	; 1
    5b78:	ae 01       	movw	r20, r28
    5b7a:	4a 5f       	subi	r20, 0xFA	; 250
    5b7c:	5f 4f       	sbci	r21, 0xFF	; 255
    5b7e:	62 e3       	ldi	r22, 0x32	; 50
    5b80:	80 ed       	ldi	r24, 0xD0	; 208
    5b82:	9f de       	rcall	.-706    	; 0x58c2 <TWI_WritePacket>
    5b84:	88 23       	and	r24, r24
    5b86:	69 f0       	breq	.+26     	; 0x5ba2 <rtc_run+0xaa>
        (uint8_t*)&b, 1) != TWI_ERROR_NoError)
    {
        printf("rtc_run - write status error\n");
    5b88:	86 e8       	ldi	r24, 0x86	; 134
    5b8a:	94 e0       	ldi	r25, 0x04	; 4
    5b8c:	a0 e0       	ldi	r26, 0x00	; 0
    5b8e:	ed b7       	in	r30, 0x3d	; 61
    5b90:	fe b7       	in	r31, 0x3e	; 62
    5b92:	81 83       	std	Z+1, r24	; 0x01
    5b94:	92 83       	std	Z+2, r25	; 0x02
    5b96:	a3 83       	std	Z+3, r26	; 0x03
    5b98:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
        return(-1);
    5b9c:	8f ef       	ldi	r24, 0xFF	; 255
    5b9e:	9f ef       	ldi	r25, 0xFF	; 255
    5ba0:	01 c0       	rjmp	.+2      	; 0x5ba4 <rtc_run+0xac>
    5ba2:	c6 01       	movw	r24, r12
    }
    return(run);
}
    5ba4:	26 96       	adiw	r28, 0x06	; 6
    5ba6:	0f b6       	in	r0, 0x3f	; 63
    5ba8:	f8 94       	cli
    5baa:	de bf       	out	0x3e, r29	; 62
    5bac:	0f be       	out	0x3f, r0	; 63
    5bae:	cd bf       	out	0x3d, r28	; 61
    5bb0:	df 91       	pop	r29
    5bb2:	cf 91       	pop	r28
    5bb4:	1f 91       	pop	r17
    5bb6:	0f 91       	pop	r16
    5bb8:	ef 90       	pop	r14
    5bba:	df 90       	pop	r13
    5bbc:	cf 90       	pop	r12
    5bbe:	08 95       	ret

00005bc0 <rtc_write>:
/// @param[in] t: POSIX struct tm * time to set.
///
/// @return 1 on sucess.
/// @return 0 on fail.
uint8_t rtc_write(tm_t *t)
{
    5bc0:	ef 92       	push	r14
    5bc2:	0f 93       	push	r16
    5bc4:	1f 93       	push	r17
    5bc6:	cf 93       	push	r28
    5bc8:	df 93       	push	r29
    5bca:	cd b7       	in	r28, 0x3d	; 61
    5bcc:	de b7       	in	r29, 0x3e	; 62
    5bce:	2c 97       	sbiw	r28, 0x0c	; 12
    5bd0:	0f b6       	in	r0, 0x3f	; 63
    5bd2:	f8 94       	cli
    5bd4:	de bf       	out	0x3e, r29	; 62
    5bd6:	0f be       	out	0x3f, r0	; 63
    5bd8:	cd bf       	out	0x3d, r28	; 61
    5bda:	8c 01       	movw	r16, r24
    uint8_t buf[8];
    uint8_t WriteAddress;

    buf[0] =  BINtoBCD(t->tm_sec) & 0x7f;
    5bdc:	fc 01       	movw	r30, r24
    5bde:	80 81       	ld	r24, Z
    5be0:	7b df       	rcall	.-266    	; 0x5ad8 <BINtoBCD>
    5be2:	8f 77       	andi	r24, 0x7F	; 127
    5be4:	8c 83       	std	Y+4, r24	; 0x04
    buf[1] =  BINtoBCD(t->tm_min) & 0x7f;
    5be6:	f8 01       	movw	r30, r16
    5be8:	82 81       	ldd	r24, Z+2	; 0x02
    5bea:	76 df       	rcall	.-276    	; 0x5ad8 <BINtoBCD>
    5bec:	8f 77       	andi	r24, 0x7F	; 127
    buf[2] =  BINtoBCD(t->tm_hour) & 0x3f;
    5bee:	8d 83       	std	Y+5, r24	; 0x05
    5bf0:	f8 01       	movw	r30, r16
    5bf2:	84 81       	ldd	r24, Z+4	; 0x04
    5bf4:	71 df       	rcall	.-286    	; 0x5ad8 <BINtoBCD>
    5bf6:	8f 73       	andi	r24, 0x3F	; 63
    buf[3] =  ((t->tm_wday & 7) + 1) & 0x0f;
    5bf8:	8e 83       	std	Y+6, r24	; 0x06
    5bfa:	f8 01       	movw	r30, r16
    5bfc:	84 85       	ldd	r24, Z+12	; 0x0c
    5bfe:	87 70       	andi	r24, 0x07	; 7
    buf[4] =  BINtoBCD(t->tm_mday ) & 0x3f;
    5c00:	8f 5f       	subi	r24, 0xFF	; 255
    5c02:	8f 83       	std	Y+7, r24	; 0x07
    5c04:	86 81       	ldd	r24, Z+6	; 0x06
    5c06:	68 df       	rcall	.-304    	; 0x5ad8 <BINtoBCD>
    buf[5] =  BINtoBCD(t->tm_mon + 1) & 0x1f;
    5c08:	8f 73       	andi	r24, 0x3F	; 63
    5c0a:	88 87       	std	Y+8, r24	; 0x08
    5c0c:	f8 01       	movw	r30, r16
    5c0e:	80 85       	ldd	r24, Z+8	; 0x08
    5c10:	8f 5f       	subi	r24, 0xFF	; 255
    5c12:	62 df       	rcall	.-316    	; 0x5ad8 <BINtoBCD>
    buf[6] =  BINtoBCD(t->tm_year - 100) & 0xff;  // 2000 = 0
    5c14:	8f 71       	andi	r24, 0x1F	; 31
    5c16:	89 87       	std	Y+9, r24	; 0x09
    5c18:	f8 01       	movw	r30, r16
    5c1a:	82 85       	ldd	r24, Z+10	; 0x0a
    5c1c:	84 56       	subi	r24, 0x64	; 100
    5c1e:	5c df       	rcall	.-328    	; 0x5ad8 <BINtoBCD>
    buf[7] = 0x93;                                // 32khz, out square wave
    5c20:	8a 87       	std	Y+10, r24	; 0x0a
    5c22:	83 e9       	ldi	r24, 0x93	; 147
	for(i=0;i<7;++i)
		printf("%02x ", 0xff & buf[i]);
    printf("\n");
#endif

    WriteAddress = 0;
    5c24:	8b 87       	std	Y+11, r24	; 0x0b
    if (TWI_WritePacket(DS1307_W, RTC_TIMEOUT, &WriteAddress, sizeof(WriteAddress),
    5c26:	1c 86       	std	Y+12, r1	; 0x0c
    5c28:	88 e0       	ldi	r24, 0x08	; 8
    5c2a:	e8 2e       	mov	r14, r24
    5c2c:	8e 01       	movw	r16, r28
    5c2e:	0c 5f       	subi	r16, 0xFC	; 252
    5c30:	1f 4f       	sbci	r17, 0xFF	; 255
    5c32:	21 e0       	ldi	r18, 0x01	; 1
    5c34:	ae 01       	movw	r20, r28
    5c36:	44 5f       	subi	r20, 0xF4	; 244
    5c38:	5f 4f       	sbci	r21, 0xFF	; 255
    5c3a:	62 e3       	ldi	r22, 0x32	; 50
    5c3c:	80 ed       	ldi	r24, 0xD0	; 208
    5c3e:	41 de       	rcall	.-894    	; 0x58c2 <TWI_WritePacket>
    5c40:	88 23       	and	r24, r24
        (uint8_t*)buf, 8) != TWI_ERROR_NoError)
    {
        printf("rtc_write error\n");
    5c42:	61 f0       	breq	.+24     	; 0x5c5c <rtc_write+0x9c>
    5c44:	87 e5       	ldi	r24, 0x57	; 87
    5c46:	94 e0       	ldi	r25, 0x04	; 4
    5c48:	a0 e0       	ldi	r26, 0x00	; 0
    5c4a:	ed b7       	in	r30, 0x3d	; 61
    5c4c:	fe b7       	in	r31, 0x3e	; 62
    5c4e:	81 83       	std	Z+1, r24	; 0x01
    5c50:	92 83       	std	Z+2, r25	; 0x02
    5c52:	a3 83       	std	Z+3, r26	; 0x03
    5c54:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
        return(0);
    5c58:	80 e0       	ldi	r24, 0x00	; 0
    }

    return(1);
    5c5a:	01 c0       	rjmp	.+2      	; 0x5c5e <rtc_write+0x9e>
}
    5c5c:	81 e0       	ldi	r24, 0x01	; 1
    5c5e:	2c 96       	adiw	r28, 0x0c	; 12
    5c60:	0f b6       	in	r0, 0x3f	; 63
    5c62:	f8 94       	cli
    5c64:	de bf       	out	0x3e, r29	; 62
    5c66:	0f be       	out	0x3f, r0	; 63
    5c68:	cd bf       	out	0x3d, r28	; 61
    5c6a:	df 91       	pop	r29
    5c6c:	cf 91       	pop	r28
    5c6e:	1f 91       	pop	r17
    5c70:	0f 91       	pop	r16
    5c72:	ef 90       	pop	r14
    5c74:	08 95       	ret

00005c76 <rtc_init>:
/// @param[in] seconds: POSIX EPOCH time in seconds.
///
/// @return  1 on success.
/// @return 0 on fail.
uint8_t rtc_init (int force, time_t seconds)
{
    5c76:	a7 e0       	ldi	r26, 0x07	; 7
    5c78:	b0 e0       	ldi	r27, 0x00	; 0
    5c7a:	e1 e4       	ldi	r30, 0x41	; 65
    5c7c:	fe e2       	ldi	r31, 0x2E	; 46
    5c7e:	0c 94 ec df 	jmp	0x1bfd8	; 0x1bfd8 <__prologue_saves__+0x1c>
    5c82:	8c 01       	movw	r16, r24
    5c84:	4c 83       	std	Y+4, r20	; 0x04
    5c86:	5d 83       	std	Y+5, r21	; 0x05
    5c88:	6e 83       	std	Y+6, r22	; 0x06
    5c8a:	7f 83       	std	Y+7, r23	; 0x07
    int8_t    state;

    tm_t *tmp;

    TWI_Init(TWI_BIT_PRESCALE_4, TWI_BITLENGTH_FROM_FREQ(4, 100000));
    5c8c:	61 e1       	ldi	r22, 0x11	; 17
    5c8e:	81 e0       	ldi	r24, 0x01	; 1
    5c90:	35 dd       	rcall	.-1430   	; 0x56fc <TWI_Init>

    if(!force)
    5c92:	01 15       	cp	r16, r1
    5c94:	11 05       	cpc	r17, r1
    5c96:	d9 f4       	brne	.+54     	; 0x5cce <rtc_init+0x58>
    {
        state = rtc_run(-1);
    5c98:	8f ef       	ldi	r24, 0xFF	; 255
    5c9a:	9f ef       	ldi	r25, 0xFF	; 255
    5c9c:	2d df       	rcall	.-422    	; 0x5af8 <rtc_run>
        if(state < 0)
    5c9e:	87 ff       	sbrs	r24, 7
    5ca0:	06 c0       	rjmp	.+12     	; 0x5cae <rtc_init+0x38>
        {
            rtc_ok = 0;
    5ca2:	10 92 b6 19 	sts	0x19B6, r1	; 0x8019b6 <rtc_ok+0x1>
    5ca6:	10 92 b5 19 	sts	0x19B5, r1	; 0x8019b5 <rtc_ok>
            return 0;
    5caa:	10 e0       	ldi	r17, 0x00	; 0
    5cac:	2b c0       	rjmp	.+86     	; 0x5d04 <rtc_init+0x8e>
        }
        if(state == 0)                            // stopped
    5cae:	88 23       	and	r24, r24
    5cb0:	71 f0       	breq	.+28     	; 0x5cce <rtc_init+0x58>
                return(0);
            }
        }
#endif

        if(rtc_run(1) < 0)                        // START RTC
    5cb2:	05 c0       	rjmp	.+10     	; 0x5cbe <rtc_init+0x48>
    5cb4:	81 e0       	ldi	r24, 0x01	; 1
    5cb6:	90 e0       	ldi	r25, 0x00	; 0
    5cb8:	1f df       	rcall	.-450    	; 0x5af8 <rtc_run>
    5cba:	97 fd       	sbrc	r25, 7
        {
            rtc_ok = 0;                           // Fail
            return 0;
        }
    }
    rtc_ok = 1;
    5cbc:	f2 cf       	rjmp	.-28     	; 0x5ca2 <rtc_init+0x2c>
    5cbe:	81 e0       	ldi	r24, 0x01	; 1
    5cc0:	90 e0       	ldi	r25, 0x00	; 0
    5cc2:	90 93 b6 19 	sts	0x19B6, r25	; 0x8019b6 <rtc_ok+0x1>
    5cc6:	80 93 b5 19 	sts	0x19B5, r24	; 0x8019b5 <rtc_ok>
            force = 1;
    }

    if(force)                                     // INIT
    {
        if(rtc_run(0) < 0)                        // STOP RTC
    5cca:	11 e0       	ldi	r17, 0x01	; 1
    5ccc:	1b c0       	rjmp	.+54     	; 0x5d04 <rtc_init+0x8e>
    5cce:	80 e0       	ldi	r24, 0x00	; 0
    5cd0:	90 e0       	ldi	r25, 0x00	; 0
    5cd2:	12 df       	rcall	.-476    	; 0x5af8 <rtc_run>
        {
            rtc_ok = 0;                           // Fail
            return 0;
        }
        tmp = gmtime(&seconds);
    5cd4:	97 fd       	sbrc	r25, 7
    5cd6:	e5 cf       	rjmp	.-54     	; 0x5ca2 <rtc_init+0x2c>
    5cd8:	ce 01       	movw	r24, r28
        if(!rtc_write(tmp))
    5cda:	04 96       	adiw	r24, 0x04	; 4
    5cdc:	0e 94 04 37 	call	0x6e08	; 0x6e08 <gmtime>
    5ce0:	6f df       	rcall	.-290    	; 0x5bc0 <rtc_write>
    5ce2:	18 2f       	mov	r17, r24
        {
            printf("rtc_init  write epoch failed\n");
    5ce4:	81 11       	cpse	r24, r1
    5ce6:	e6 cf       	rjmp	.-52     	; 0x5cb4 <rtc_init+0x3e>
    5ce8:	88 e6       	ldi	r24, 0x68	; 104
    5cea:	94 e0       	ldi	r25, 0x04	; 4
    5cec:	a0 e0       	ldi	r26, 0x00	; 0
    5cee:	ed b7       	in	r30, 0x3d	; 61
    5cf0:	fe b7       	in	r31, 0x3e	; 62
    5cf2:	81 83       	std	Z+1, r24	; 0x01
    5cf4:	92 83       	std	Z+2, r25	; 0x02
    5cf6:	a3 83       	std	Z+3, r26	; 0x03
            rtc_ok = 0;
    5cf8:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    5cfc:	10 92 b6 19 	sts	0x19B6, r1	; 0x8019b6 <rtc_ok+0x1>
            return 0;
        }
    }
    rtc_ok = 1;
    return 1;
}
    5d00:	10 92 b5 19 	sts	0x19B5, r1	; 0x8019b5 <rtc_ok>
    5d04:	81 2f       	mov	r24, r17
    5d06:	27 96       	adiw	r28, 0x07	; 7
    5d08:	e4 e0       	ldi	r30, 0x04	; 4
    5d0a:	0c 94 08 e0 	jmp	0x1c010	; 0x1c010 <__epilogue_restores__+0x1c>

00005d0e <rtc_read>:
///
/// @param[out] t: struct tm * POSIX time returned.
/// @return  1 on sucess.
/// @return 0 on fail.
uint8_t rtc_read(tm_t *t)
{
    5d0e:	cf 92       	push	r12
    5d10:	df 92       	push	r13
    5d12:	ef 92       	push	r14
    5d14:	0f 93       	push	r16
    5d16:	1f 93       	push	r17
    5d18:	cf 93       	push	r28
    5d1a:	df 93       	push	r29
    5d1c:	cd b7       	in	r28, 0x3d	; 61
    5d1e:	de b7       	in	r29, 0x3e	; 62
    5d20:	2c 97       	sbiw	r28, 0x0c	; 12
    5d22:	0f b6       	in	r0, 0x3f	; 63
    5d24:	f8 94       	cli
    5d26:	de bf       	out	0x3e, r29	; 62
    5d28:	0f be       	out	0x3f, r0	; 63
    5d2a:	cd bf       	out	0x3d, r28	; 61
    5d2c:	6c 01       	movw	r12, r24
    uint8_t buf[8];

    uint8_t ReadAddress = 0;
    5d2e:	1c 86       	std	Y+12, r1	; 0x0c

    ReadAddress = 0;
    if (TWI_ReadPacket(DS1307_R, RTC_TIMEOUT, &ReadAddress, sizeof(ReadAddress),
    5d30:	88 e0       	ldi	r24, 0x08	; 8
    5d32:	e8 2e       	mov	r14, r24
    5d34:	8e 01       	movw	r16, r28
    5d36:	0c 5f       	subi	r16, 0xFC	; 252
    5d38:	1f 4f       	sbci	r17, 0xFF	; 255
    5d3a:	21 e0       	ldi	r18, 0x01	; 1
    5d3c:	ae 01       	movw	r20, r28
    5d3e:	44 5f       	subi	r20, 0xF4	; 244
    5d40:	5f 4f       	sbci	r21, 0xFF	; 255
    5d42:	62 e3       	ldi	r22, 0x32	; 50
    5d44:	81 ed       	ldi	r24, 0xD1	; 209
    5d46:	7c dd       	rcall	.-1288   	; 0x5840 <TWI_ReadPacket>
    5d48:	88 23       	and	r24, r24
    5d4a:	61 f0       	breq	.+24     	; 0x5d64 <rtc_read+0x56>
        (uint8_t*)buf, 8) != TWI_ERROR_NoError)
    {
        printf("rtc_read error\n");
    5d4c:	87 e4       	ldi	r24, 0x47	; 71
    5d4e:	94 e0       	ldi	r25, 0x04	; 4
    5d50:	a0 e0       	ldi	r26, 0x00	; 0
    5d52:	ed b7       	in	r30, 0x3d	; 61
    5d54:	fe b7       	in	r31, 0x3e	; 62
    5d56:	81 83       	std	Z+1, r24	; 0x01
    5d58:	92 83       	std	Z+2, r25	; 0x02
    5d5a:	a3 83       	std	Z+3, r26	; 0x03
    5d5c:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
        return 0;
    5d60:	80 e0       	ldi	r24, 0x00	; 0
    5d62:	33 c0       	rjmp	.+102    	; 0x5dca <rtc_read+0xbc>
    for(i=0;i<7;++i)
        printf("%02x ", 0xff & buf[i]);
    printf("\n");
#endif

    t->tm_sec =   BCDtoBIN( buf[0] & 0x7f);
    5d64:	8c 81       	ldd	r24, Y+4	; 0x04
    5d66:	8f 77       	andi	r24, 0x7F	; 127
    5d68:	be de       	rcall	.-644    	; 0x5ae6 <BCDtoBIN>
    5d6a:	90 e0       	ldi	r25, 0x00	; 0
    5d6c:	f6 01       	movw	r30, r12
    5d6e:	91 83       	std	Z+1, r25	; 0x01
    t->tm_min =   BCDtoBIN( buf[1] & 0x7f);
    5d70:	80 83       	st	Z, r24
    5d72:	8d 81       	ldd	r24, Y+5	; 0x05
    5d74:	8f 77       	andi	r24, 0x7F	; 127
    5d76:	b7 de       	rcall	.-658    	; 0x5ae6 <BCDtoBIN>
    5d78:	90 e0       	ldi	r25, 0x00	; 0
    5d7a:	f6 01       	movw	r30, r12
    t->tm_hour =  BCDtoBIN( buf[2] & 0x3f);
    5d7c:	93 83       	std	Z+3, r25	; 0x03
    5d7e:	82 83       	std	Z+2, r24	; 0x02
    5d80:	8e 81       	ldd	r24, Y+6	; 0x06
    5d82:	8f 73       	andi	r24, 0x3F	; 63
    5d84:	b0 de       	rcall	.-672    	; 0x5ae6 <BCDtoBIN>
    5d86:	90 e0       	ldi	r25, 0x00	; 0
    5d88:	f6 01       	movw	r30, r12
    5d8a:	95 83       	std	Z+5, r25	; 0x05
    t->tm_wday =  ( buf[3] & 0x07) - 1;
    5d8c:	84 83       	std	Z+4, r24	; 0x04
    5d8e:	8f 81       	ldd	r24, Y+7	; 0x07
    5d90:	87 70       	andi	r24, 0x07	; 7
    5d92:	90 e0       	ldi	r25, 0x00	; 0
    5d94:	01 97       	sbiw	r24, 0x01	; 1
    t->tm_mday =  BCDtoBIN( buf[4] & 0x3f) ;
    5d96:	95 87       	std	Z+13, r25	; 0x0d
    5d98:	84 87       	std	Z+12, r24	; 0x0c
    5d9a:	88 85       	ldd	r24, Y+8	; 0x08
    5d9c:	8f 73       	andi	r24, 0x3F	; 63
    5d9e:	a3 de       	rcall	.-698    	; 0x5ae6 <BCDtoBIN>
    5da0:	90 e0       	ldi	r25, 0x00	; 0
    5da2:	f6 01       	movw	r30, r12
    t->tm_mon=    BCDtoBIN( buf[5] & 0x1f) - 1;
    5da4:	97 83       	std	Z+7, r25	; 0x07
    5da6:	86 83       	std	Z+6, r24	; 0x06
    5da8:	89 85       	ldd	r24, Y+9	; 0x09
    5daa:	8f 71       	andi	r24, 0x1F	; 31
    5dac:	9c de       	rcall	.-712    	; 0x5ae6 <BCDtoBIN>
    5dae:	90 e0       	ldi	r25, 0x00	; 0
    5db0:	01 97       	sbiw	r24, 0x01	; 1
    5db2:	f6 01       	movw	r30, r12
    t->tm_year =  BCDtoBIN( buf[6] & 0xff) + 100;
    5db4:	91 87       	std	Z+9, r25	; 0x09
    5db6:	80 87       	std	Z+8, r24	; 0x08
    5db8:	8a 85       	ldd	r24, Y+10	; 0x0a
    5dba:	95 de       	rcall	.-726    	; 0x5ae6 <BCDtoBIN>
    5dbc:	90 e0       	ldi	r25, 0x00	; 0
    5dbe:	8c 59       	subi	r24, 0x9C	; 156
    5dc0:	9f 4f       	sbci	r25, 0xFF	; 255
    5dc2:	f6 01       	movw	r30, r12
    5dc4:	93 87       	std	Z+11, r25	; 0x0b
        t->tm_min,
        t->tm_sec,
        t->tm_wday);
#endif

    return 1;
    5dc6:	82 87       	std	Z+10, r24	; 0x0a
}
    5dc8:	81 e0       	ldi	r24, 0x01	; 1
    5dca:	2c 96       	adiw	r28, 0x0c	; 12
    5dcc:	0f b6       	in	r0, 0x3f	; 63
    5dce:	f8 94       	cli
    5dd0:	de bf       	out	0x3e, r29	; 62
    5dd2:	0f be       	out	0x3f, r0	; 63
    5dd4:	cd bf       	out	0x3d, r28	; 61
    5dd6:	df 91       	pop	r29
    5dd8:	cf 91       	pop	r28
    5dda:	1f 91       	pop	r17
    5ddc:	0f 91       	pop	r16
    5dde:	ef 90       	pop	r14
    5de0:	df 90       	pop	r13
    5de2:	cf 90       	pop	r12
    5de4:	08 95       	ret

00005de6 <I2C_Start>:
/*
 *  Move the cursor one character to the right.
 */
void LCD_moveCursorRight()
{
	LCD_moveCursorRightCount(1);
    5de6:	64 e1       	ldi	r22, 0x14	; 20
    5de8:	99 dc       	rcall	.-1742   	; 0x571c <TWI_StartTransmission>
    5dea:	81 11       	cpse	r24, r1
    5dec:	07 c0       	rjmp	.+14     	; 0x5dfc <I2C_Start+0x16>
    5dee:	81 e0       	ldi	r24, 0x01	; 1
    5df0:	90 e0       	ldi	r25, 0x00	; 0
    5df2:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <LCD_ok+0x1>
    5df6:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <LCD_ok>
    5dfa:	04 c0       	rjmp	.+8      	; 0x5e04 <I2C_Start+0x1e>
    5dfc:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <LCD_ok+0x1>
    5e00:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <LCD_ok>
    5e04:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <LCD_ok>
    5e08:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <LCD_ok+0x1>
    5e0c:	08 95       	ret

00005e0e <I2C_Stop>:
    5e0e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <LCD_ok>
    5e12:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <LCD_ok+0x1>
    5e16:	89 2b       	or	r24, r25
    5e18:	09 f0       	breq	.+2      	; 0x5e1c <I2C_Stop+0xe>
    5e1a:	7c cc       	rjmp	.-1800   	; 0x5714 <TWI_StopTransmission>
    5e1c:	08 95       	ret

00005e1e <I2C_Send>:
    5e1e:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <LCD_ok>
    5e22:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <LCD_ok+0x1>
    5e26:	21 15       	cp	r18, r1
    5e28:	31 05       	cpc	r19, r1
    5e2a:	41 f0       	breq	.+16     	; 0x5e3c <I2C_Send+0x1e>
    5e2c:	d7 dc       	rcall	.-1618   	; 0x57dc <TWI_SendByte>
    5e2e:	51 e0       	ldi	r21, 0x01	; 1
    5e30:	40 e0       	ldi	r20, 0x00	; 0
    5e32:	89 2b       	or	r24, r25
    5e34:	09 f0       	breq	.+2      	; 0x5e38 <I2C_Send+0x1a>
    5e36:	50 e0       	ldi	r21, 0x00	; 0
    5e38:	25 2f       	mov	r18, r21
    5e3a:	34 2f       	mov	r19, r20
    5e3c:	c9 01       	movw	r24, r18
    5e3e:	08 95       	ret

00005e40 <LCD_putb>:
    5e40:	cf 93       	push	r28
    5e42:	c8 2f       	mov	r28, r24
    5e44:	84 ee       	ldi	r24, 0xE4	; 228
    5e46:	cf df       	rcall	.-98     	; 0x5de6 <I2C_Start>
    5e48:	89 2b       	or	r24, r25
    5e4a:	19 f4       	brne	.+6      	; 0x5e52 <LCD_putb+0x12>
    5e4c:	80 e0       	ldi	r24, 0x00	; 0
    5e4e:	90 e0       	ldi	r25, 0x00	; 0
    5e50:	07 c0       	rjmp	.+14     	; 0x5e60 <LCD_putb+0x20>
    5e52:	8c 2f       	mov	r24, r28
    5e54:	e4 df       	rcall	.-56     	; 0x5e1e <I2C_Send>
    5e56:	89 2b       	or	r24, r25
    5e58:	c9 f3       	breq	.-14     	; 0x5e4c <LCD_putb+0xc>
    5e5a:	d9 df       	rcall	.-78     	; 0x5e0e <I2C_Stop>
    5e5c:	81 e0       	ldi	r24, 0x01	; 1
    5e5e:	90 e0       	ldi	r25, 0x00	; 0
    5e60:	cf 91       	pop	r28
    5e62:	08 95       	ret

00005e64 <LCD_command>:
    5e64:	cf 93       	push	r28
    5e66:	c8 2f       	mov	r28, r24
    5e68:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <lcd_address>
    5e6c:	bc df       	rcall	.-136    	; 0x5de6 <I2C_Start>
    5e6e:	89 2b       	or	r24, r25
    5e70:	51 f0       	breq	.+20     	; 0x5e86 <LCD_command+0x22>
    5e72:	8c e7       	ldi	r24, 0x7C	; 124
    5e74:	d4 df       	rcall	.-88     	; 0x5e1e <I2C_Send>
    5e76:	8c 2f       	mov	r24, r28
    5e78:	d2 df       	rcall	.-92     	; 0x5e1e <I2C_Send>
    5e7a:	c9 df       	rcall	.-110    	; 0x5e0e <I2C_Stop>
    5e7c:	6a e0       	ldi	r22, 0x0A	; 10
    5e7e:	70 e0       	ldi	r23, 0x00	; 0
    5e80:	80 e0       	ldi	r24, 0x00	; 0
    5e82:	90 e0       	ldi	r25, 0x00	; 0
    5e84:	1c d9       	rcall	.-3528   	; 0x50be <delayms>
    5e86:	cf 91       	pop	r28
    5e88:	08 95       	ret

00005e8a <LCD_specialCommand>:
    5e8a:	cf 93       	push	r28
    5e8c:	c8 2f       	mov	r28, r24
    5e8e:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <lcd_address>
    5e92:	a9 df       	rcall	.-174    	; 0x5de6 <I2C_Start>
    5e94:	89 2b       	or	r24, r25
    5e96:	51 f0       	breq	.+20     	; 0x5eac <LCD_specialCommand+0x22>
    5e98:	8e ef       	ldi	r24, 0xFE	; 254
    5e9a:	c1 df       	rcall	.-126    	; 0x5e1e <I2C_Send>
    5e9c:	8c 2f       	mov	r24, r28
    5e9e:	bf df       	rcall	.-130    	; 0x5e1e <I2C_Send>
    5ea0:	b6 df       	rcall	.-148    	; 0x5e0e <I2C_Stop>
    5ea2:	62 e3       	ldi	r22, 0x32	; 50
    5ea4:	70 e0       	ldi	r23, 0x00	; 0
    5ea6:	80 e0       	ldi	r24, 0x00	; 0
    5ea8:	90 e0       	ldi	r25, 0x00	; 0
    5eaa:	09 d9       	rcall	.-3566   	; 0x50be <delayms>
    5eac:	cf 91       	pop	r28
    5eae:	08 95       	ret

00005eb0 <LCD_setCursor>:
    5eb0:	a8 e0       	ldi	r26, 0x08	; 8
    5eb2:	b0 e0       	ldi	r27, 0x00	; 0
    5eb4:	ee e5       	ldi	r30, 0x5E	; 94
    5eb6:	ff e2       	ldi	r31, 0x2F	; 47
    5eb8:	0c 94 ee df 	jmp	0x1bfdc	; 0x1bfdc <__prologue_saves__+0x20>
    5ebc:	98 e0       	ldi	r25, 0x08	; 8
    5ebe:	e9 ef       	ldi	r30, 0xF9	; 249
    5ec0:	f2 e0       	ldi	r31, 0x02	; 2
    5ec2:	de 01       	movw	r26, r28
    5ec4:	11 96       	adiw	r26, 0x01	; 1
    5ec6:	01 90       	ld	r0, Z+
    5ec8:	0d 92       	st	X+, r0
    5eca:	9a 95       	dec	r25
    5ecc:	e1 f7       	brne	.-8      	; 0x5ec6 <LCD_setCursor+0x16>
    5ece:	64 30       	cpi	r22, 0x04	; 4
    5ed0:	08 f0       	brcs	.+2      	; 0x5ed4 <LCD_setCursor+0x24>
    5ed2:	63 e0       	ldi	r22, 0x03	; 3
    5ed4:	fe 01       	movw	r30, r28
    5ed6:	31 96       	adiw	r30, 0x01	; 1
    5ed8:	e6 0f       	add	r30, r22
    5eda:	f1 1d       	adc	r31, r1
    5edc:	e6 0f       	add	r30, r22
    5ede:	f1 1d       	adc	r31, r1
    5ee0:	90 81       	ld	r25, Z
    5ee2:	89 0f       	add	r24, r25
    5ee4:	80 68       	ori	r24, 0x80	; 128
    5ee6:	d1 df       	rcall	.-94     	; 0x5e8a <LCD_specialCommand>
    5ee8:	28 96       	adiw	r28, 0x08	; 8
    5eea:	e2 e0       	ldi	r30, 0x02	; 2
    5eec:	0c 94 0a e0 	jmp	0x1c014	; 0x1c014 <__epilogue_restores__+0x20>

00005ef0 <LCD_pos>:
    5ef0:	e0 e1       	ldi	r30, 0x10	; 16
    5ef2:	f1 e0       	ldi	r31, 0x01	; 1
    5ef4:	28 2f       	mov	r18, r24
    5ef6:	30 e0       	ldi	r19, 0x00	; 0
    5ef8:	31 83       	std	Z+1, r19	; 0x01
    5efa:	20 83       	st	Z, r18
    5efc:	26 2f       	mov	r18, r22
    5efe:	30 e0       	ldi	r19, 0x00	; 0
    5f00:	33 83       	std	Z+3, r19	; 0x03
    5f02:	22 83       	std	Z+2, r18	; 0x02
    5f04:	d5 cf       	rjmp	.-86     	; 0x5eb0 <LCD_setCursor>
    5f06:	08 95       	ret

00005f08 <LCD_clear>:
    5f08:	8d e2       	ldi	r24, 0x2D	; 45
    5f0a:	ac df       	rcall	.-168    	; 0x5e64 <LCD_command>
    5f0c:	60 e0       	ldi	r22, 0x00	; 0
    5f0e:	80 e0       	ldi	r24, 0x00	; 0
    5f10:	ef df       	rcall	.-34     	; 0x5ef0 <LCD_pos>
    5f12:	6a e0       	ldi	r22, 0x0A	; 10
    5f14:	70 e0       	ldi	r23, 0x00	; 0
    5f16:	80 e0       	ldi	r24, 0x00	; 0
    5f18:	90 e0       	ldi	r25, 0x00	; 0
    5f1a:	d1 c8       	rjmp	.-3678   	; 0x50be <delayms>
    5f1c:	08 95       	ret

00005f1e <LCD_setFastBacklightRGB>:
} // moveCursorRight


//New command - set backlight with LCD messages or delaymss
void LCD_setFastBacklightRGB(byte r, byte g, byte b)
{
    5f1e:	1f 93       	push	r17
    5f20:	cf 93       	push	r28
    5f22:	df 93       	push	r29
    5f24:	18 2f       	mov	r17, r24
    5f26:	d6 2f       	mov	r29, r22
    5f28:	c4 2f       	mov	r28, r20
  //send commands to the display to set backlights
  if( !I2C_Start(lcd_address) )
    5f2a:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <lcd_address>
    5f2e:	5b df       	rcall	.-330    	; 0x5de6 <I2C_Start>
    5f30:	89 2b       	or	r24, r25
	return;
  I2C_Send(SETTING_COMMAND); //Send special command character
    5f32:	81 f0       	breq	.+32     	; 0x5f54 <LCD_setFastBacklightRGB+0x36>
  I2C_Send(SET_RGB_COMMAND); //Send the set RGB character '+' or plus
    5f34:	8c e7       	ldi	r24, 0x7C	; 124
  I2C_Send(r);               //Send the red value
  I2C_Send(g);               //Send the green value
    5f36:	73 df       	rcall	.-282    	; 0x5e1e <I2C_Send>
    5f38:	8b e2       	ldi	r24, 0x2B	; 43
  I2C_Send(b);               //Send the blue value
    5f3a:	71 df       	rcall	.-286    	; 0x5e1e <I2C_Send>
    5f3c:	81 2f       	mov	r24, r17
  I2C_Stop();         //Stop transmission
    5f3e:	6f df       	rcall	.-290    	; 0x5e1e <I2C_Send>
    5f40:	8d 2f       	mov	r24, r29
  delayms(10);
    5f42:	6d df       	rcall	.-294    	; 0x5e1e <I2C_Send>
    5f44:	8c 2f       	mov	r24, r28
    5f46:	6b df       	rcall	.-298    	; 0x5e1e <I2C_Send>
    5f48:	62 df       	rcall	.-316    	; 0x5e0e <I2C_Stop>
    5f4a:	6a e0       	ldi	r22, 0x0A	; 10
    5f4c:	70 e0       	ldi	r23, 0x00	; 0
} // setFastBacklight
    5f4e:	80 e0       	ldi	r24, 0x00	; 0
    5f50:	90 e0       	ldi	r25, 0x00	; 0
    5f52:	b5 d8       	rcall	.-3734   	; 0x50be <delayms>
    5f54:	df 91       	pop	r29
    5f56:	cf 91       	pop	r28
    5f58:	1f 91       	pop	r17
    5f5a:	08 95       	ret

00005f5c <LCD_init>:
 *
 */
bool LCD_init(uint8_t addr)
{
  
  if( !I2C_Start(lcd_address = addr) )
    5f5c:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <lcd_address>
    5f60:	42 df       	rcall	.-380    	; 0x5de6 <I2C_Start>
    5f62:	00 97       	sbiw	r24, 0x00	; 0
	return 0;

  I2C_Send(SPECIAL_COMMAND);                      //Send special command character
    5f64:	61 f1       	breq	.+88     	; 0x5fbe <LCD_init+0x62>
    5f66:	8e ef       	ldi	r24, 0xFE	; 254
  I2C_Send(LCD_DISPLAYCONTROL | _displayControl); //Send the display command
    5f68:	5a df       	rcall	.-332    	; 0x5e1e <I2C_Send>
    5f6a:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <_displayControl>

  I2C_Send(SPECIAL_COMMAND);                      //Send special command character
    5f6e:	88 60       	ori	r24, 0x08	; 8
    5f70:	56 df       	rcall	.-340    	; 0x5e1e <I2C_Send>
  I2C_Send(LCD_ENTRYMODESET | _displayMode);      //Send the entry mode command
    5f72:	8e ef       	ldi	r24, 0xFE	; 254
    5f74:	54 df       	rcall	.-344    	; 0x5e1e <I2C_Send>

  I2C_Send(SETTING_COMMAND);                      //Put LCD into setting mode
    5f76:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <_displayMode>
  I2C_Send(CLEAR_COMMAND);                        //Send clear display command

  I2C_Send(SETTING_COMMAND);                      //Send special command character
    5f7a:	84 60       	ori	r24, 0x04	; 4
  I2C_Send(DISABLE_SYSTEM_MESSAGE_DISPLAY);       //Send the set '.' character
    5f7c:	50 df       	rcall	.-352    	; 0x5e1e <I2C_Send>
    5f7e:	8c e7       	ldi	r24, 0x7C	; 124

  I2C_Send(SPECIAL_COMMAND);                      //Send special command character
    5f80:	4e df       	rcall	.-356    	; 0x5e1e <I2C_Send>
    5f82:	8d e2       	ldi	r24, 0x2D	; 45
  I2C_Send(LCD_SETDDRAMADDR | 0);				// HOME 0,0
    5f84:	4c df       	rcall	.-360    	; 0x5e1e <I2C_Send>
    5f86:	8c e7       	ldi	r24, 0x7C	; 124

  I2C_Stop();
    5f88:	4a df       	rcall	.-364    	; 0x5e1e <I2C_Send>
    5f8a:	8f e2       	ldi	r24, 0x2F	; 47
  delayms(50);                                      //let things settle a bit
    5f8c:	48 df       	rcall	.-368    	; 0x5e1e <I2C_Send>
    5f8e:	8e ef       	ldi	r24, 0xFE	; 254
    5f90:	46 df       	rcall	.-372    	; 0x5e1e <I2C_Send>
    5f92:	80 e8       	ldi	r24, 0x80	; 128
    5f94:	44 df       	rcall	.-376    	; 0x5e1e <I2C_Send>
    5f96:	3b df       	rcall	.-394    	; 0x5e0e <I2C_Stop>

  LCD_setFastBacklightRGB ( 0xC0, 0xC0, 0xC0 );
    5f98:	62 e3       	ldi	r22, 0x32	; 50
    5f9a:	70 e0       	ldi	r23, 0x00	; 0
    5f9c:	80 e0       	ldi	r24, 0x00	; 0
    5f9e:	90 e0       	ldi	r25, 0x00	; 0
    5fa0:	8e d8       	rcall	.-3812   	; 0x50be <delayms>

  lcd.xpos = 0;
    5fa2:	40 ec       	ldi	r20, 0xC0	; 192
    5fa4:	60 ec       	ldi	r22, 0xC0	; 192
    5fa6:	80 ec       	ldi	r24, 0xC0	; 192
    5fa8:	ba df       	rcall	.-140    	; 0x5f1e <LCD_setFastBacklightRGB>
  lcd.ypos = 0;
    5faa:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <lcd+0x1>
    5fae:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <lcd>

  return(1);
    5fb2:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <lcd+0x3>
} //init
    5fb6:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <lcd+0x2>
    5fba:	81 e0       	ldi	r24, 0x01	; 1
    5fbc:	90 e0       	ldi	r25, 0x00	; 0
    5fbe:	08 95       	ret

00005fc0 <lcd_cleareol>:
	{
		LCD_putb(' ');
		rem--;
	}
	LCD_pos(lcd.xpos = 0,lcd.ypos);
}
    5fc0:	cf 93       	push	r28
    5fc2:	df 93       	push	r29
    5fc4:	c0 91 14 01 	lds	r28, 0x0114	; 0x800114 <lcd+0x4>
    5fc8:	d0 91 15 01 	lds	r29, 0x0115	; 0x800115 <lcd+0x5>
    5fcc:	21 97       	sbiw	r28, 0x01	; 1
    5fce:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <lcd>
    5fd2:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <lcd+0x1>
    5fd6:	c8 1b       	sub	r28, r24
    5fd8:	d9 0b       	sbc	r29, r25
    5fda:	1c 16       	cp	r1, r28
    5fdc:	1d 06       	cpc	r1, r29
    5fde:	24 f4       	brge	.+8      	; 0x5fe8 <lcd_cleareol+0x28>
    5fe0:	80 e2       	ldi	r24, 0x20	; 32
    5fe2:	2e df       	rcall	.-420    	; 0x5e40 <LCD_putb>
    5fe4:	21 97       	sbiw	r28, 0x01	; 1
    5fe6:	f9 cf       	rjmp	.-14     	; 0x5fda <lcd_cleareol+0x1a>
    5fe8:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <lcd+0x4>
    5fec:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <lcd+0x5>
    5ff0:	01 97       	sbiw	r24, 0x01	; 1
    5ff2:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <lcd+0x1>
    5ff6:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <lcd>
    5ffa:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <lcd+0x2>
    5ffe:	78 df       	rcall	.-272    	; 0x5ef0 <LCD_pos>
    6000:	df 91       	pop	r29
    6002:	cf 91       	pop	r28
    6004:	08 95       	ret

00006006 <lcd_putch>:

/// @brief  put character 
/// @param[in] c: character
/// return: void
void lcd_putch(int c)
{
    6006:	cf 93       	push	r28
    6008:	df 93       	push	r29
	int rem;

	if(c < 0 || c > 0x7e)
    600a:	8f 37       	cpi	r24, 0x7F	; 127
    600c:	91 05       	cpc	r25, r1
    600e:	08 f0       	brcs	.+2      	; 0x6012 <lcd_putch+0xc>
    6010:	50 c0       	rjmp	.+160    	; 0x60b2 <lcd_putch+0xac>
    6012:	ec 01       	movw	r28, r24
		return;

	// Normal visible characters
	if(c >= ' ')
    6014:	80 32       	cpi	r24, 0x20	; 32
    6016:	91 05       	cpc	r25, r1
    6018:	4c f1       	brlt	.+82     	; 0x606c <lcd_putch+0x66>
	{
		rem = (lcd.w - 1 - lcd.xpos);
		if( rem <= 0 )
    601a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <lcd+0x4>
    601e:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <lcd+0x5>
    6022:	01 97       	sbiw	r24, 0x01	; 1
    6024:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <lcd>
    6028:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <lcd+0x1>
    602c:	82 1b       	sub	r24, r18
    602e:	93 0b       	sbc	r25, r19
    6030:	18 16       	cp	r1, r24
    6032:	19 06       	cpc	r1, r25
    6034:	7c f0       	brlt	.+30     	; 0x6054 <lcd_putch+0x4e>
		{
			LCD_pos(++lcd.ypos,lcd.xpos=0);
    6036:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <lcd+0x2>
    603a:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <lcd+0x3>
    603e:	01 96       	adiw	r24, 0x01	; 1
    6040:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <lcd+0x3>
    6044:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <lcd+0x2>
    6048:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <lcd+0x1>
    604c:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <lcd>
    6050:	60 e0       	ldi	r22, 0x00	; 0
		}
		(void) LCD_putb(c);
    6052:	4e df       	rcall	.-356    	; 0x5ef0 <LCD_pos>
    6054:	8c 2f       	mov	r24, r28
		// uart_putchar(c,0);
		lcd.xpos++;
    6056:	f4 de       	rcall	.-536    	; 0x5e40 <LCD_putb>
    6058:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <lcd>
    605c:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <lcd+0x1>
    6060:	01 96       	adiw	r24, 0x01	; 1
    6062:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <lcd+0x1>
    6066:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <lcd>
		return;
	}

	// Control characters
	if(c == '\n')
    606a:	23 c0       	rjmp	.+70     	; 0x60b2 <lcd_putch+0xac>
    606c:	8a 30       	cpi	r24, 0x0A	; 10
	{
		// uart_putchar(c,0);
		lcd_cleareol();
    606e:	91 05       	cpc	r25, r1
    6070:	91 f4       	brne	.+36     	; 0x6096 <lcd_putch+0x90>
		++lcd.ypos;
		lcd.ypos &= 3;
    6072:	a6 df       	rcall	.-180    	; 0x5fc0 <lcd_cleareol>
    6074:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <lcd+0x2>
    6078:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <lcd+0x3>
    607c:	6f 5f       	subi	r22, 0xFF	; 255
    607e:	7f 4f       	sbci	r23, 0xFF	; 255
    6080:	63 70       	andi	r22, 0x03	; 3
    6082:	77 27       	eor	r23, r23
    6084:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <lcd+0x3>
    6088:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <lcd+0x2>
		LCD_pos(lcd.xpos=0,lcd.ypos);
    608c:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <lcd+0x1>
    6090:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <lcd>
	}

	if(c == '\f')
    6094:	0c c0       	rjmp	.+24     	; 0x60ae <lcd_putch+0xa8>
	{
		LCD_clear();
    6096:	0c 97       	sbiw	r24, 0x0c	; 12
    6098:	61 f4       	brne	.+24     	; 0x60b2 <lcd_putch+0xac>
		LCD_pos(lcd.xpos=0,lcd.ypos=0);
    609a:	36 df       	rcall	.-404    	; 0x5f08 <LCD_clear>
    609c:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <lcd+0x1>
    60a0:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <lcd>
    60a4:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <lcd+0x3>
    60a8:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <lcd+0x2>
    60ac:	60 e0       	ldi	r22, 0x00	; 0
    60ae:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    60b0:	1f df       	rcall	.-450    	; 0x5ef0 <LCD_pos>
    60b2:	df 91       	pop	r29
    60b4:	cf 91       	pop	r28
    60b6:	08 95       	ret

000060b8 <_putc_win>:


// We do not use the printf structure
static void _putc_win(struct _printf_t *p, char ch)
{
    60b8:	fc 01       	movw	r30, r24
	p->sent++;
    60ba:	26 81       	ldd	r18, Z+6	; 0x06
    60bc:	37 81       	ldd	r19, Z+7	; 0x07
    60be:	2f 5f       	subi	r18, 0xFF	; 255
    60c0:	3f 4f       	sbci	r19, 0xFF	; 255
    60c2:	37 83       	std	Z+7, r19	; 0x07
    60c4:	26 83       	std	Z+6, r18	; 0x06
	lcd_putch(ch);
    60c6:	86 2f       	mov	r24, r22
    60c8:	90 e0       	ldi	r25, 0x00	; 0
    60ca:	9d cf       	rjmp	.-198    	; 0x6006 <lcd_putch>
    60cc:	08 95       	ret

000060ce <lcd_printf>:
/// @param[in] fmt: printf forat string
/// @param[in] ...: vararg list or arguments
/// @return size of string
MEMSPACE
int lcd_printf(const char *fmt, ... )
{
    60ce:	a8 e0       	ldi	r26, 0x08	; 8
    60d0:	b0 e0       	ldi	r27, 0x00	; 0
    60d2:	ed e6       	ldi	r30, 0x6D	; 109
    60d4:	f0 e3       	ldi	r31, 0x30	; 48
    60d6:	0c 94 ee df 	jmp	0x1bfdc	; 0x1bfdc <__prologue_saves__+0x20>
    60da:	9e 01       	movw	r18, r28
    60dc:	23 5f       	subi	r18, 0xF3	; 243
    60de:	3f 4f       	sbci	r19, 0xFF	; 255
    60e0:	f9 01       	movw	r30, r18
    60e2:	41 91       	ld	r20, Z+
    60e4:	51 91       	ld	r21, Z+
    60e6:	9f 01       	movw	r18, r30
    printf_t fn;

    fn.put = _putc_win;
    60e8:	8c e5       	ldi	r24, 0x5C	; 92
    60ea:	90 e3       	ldi	r25, 0x30	; 48
    60ec:	9a 83       	std	Y+2, r25	; 0x02
    60ee:	89 83       	std	Y+1, r24	; 0x01
    fn.sent = 0;
    60f0:	18 86       	std	Y+8, r1	; 0x08
    60f2:	1f 82       	std	Y+7, r1	; 0x07

    va_list va;
    va_start(va, fmt);

    _printf_fn(&fn, fmt, va);
    60f4:	60 e8       	ldi	r22, 0x80	; 128
    60f6:	ce 01       	movw	r24, r28
    60f8:	01 96       	adiw	r24, 0x01	; 1
    60fa:	0e 94 45 41 	call	0x828a	; 0x828a <_printf_fn>

    va_end(va);

	return(fn.sent);

}
    60fe:	8f 81       	ldd	r24, Y+7	; 0x07
    6100:	98 85       	ldd	r25, Y+8	; 0x08
    6102:	28 96       	adiw	r28, 0x08	; 8
    6104:	e2 e0       	ldi	r30, 0x02	; 2
    6106:	0c 94 0a e0 	jmp	0x1c014	; 0x1c014 <__epilogue_restores__+0x20>

0000610a <islower>:
    if(!ptr)
        return(ptr);
    strncpy(ptr,str,len);
    return(ptr);

}
    610a:	9c 01       	movw	r18, r24
    610c:	21 56       	subi	r18, 0x61	; 97
    610e:	31 09       	sbc	r19, r1
    6110:	81 e0       	ldi	r24, 0x01	; 1
    6112:	90 e0       	ldi	r25, 0x00	; 0
    6114:	2a 31       	cpi	r18, 0x1A	; 26
    6116:	31 05       	cpc	r19, r1
    6118:	10 f0       	brcs	.+4      	; 0x611e <islower+0x14>
    611a:	80 e0       	ldi	r24, 0x00	; 0
    611c:	90 e0       	ldi	r25, 0x00	; 0
    611e:	08 95       	ret

00006120 <toupper>:
    6120:	cf 93       	push	r28
    6122:	df 93       	push	r29
    6124:	ec 01       	movw	r28, r24
    6126:	f1 df       	rcall	.-30     	; 0x610a <islower>
    6128:	89 2b       	or	r24, r25
    612a:	19 f0       	breq	.+6      	; 0x6132 <toupper+0x12>
    612c:	ce 01       	movw	r24, r28
    612e:	80 97       	sbiw	r24, 0x20	; 32
    6130:	01 c0       	rjmp	.+2      	; 0x6134 <toupper+0x14>
    6132:	ce 01       	movw	r24, r28
    6134:	df 91       	pop	r29
    6136:	cf 91       	pop	r28
    6138:	08 95       	ret

0000613a <strcpy>:
    613a:	fc 01       	movw	r30, r24
    613c:	db 01       	movw	r26, r22
    613e:	2d 91       	ld	r18, X+
    6140:	bd 01       	movw	r22, r26
    6142:	01 96       	adiw	r24, 0x01	; 1
    6144:	22 23       	and	r18, r18
    6146:	11 f0       	breq	.+4      	; 0x614c <strcpy+0x12>
    6148:	20 83       	st	Z, r18
    614a:	f7 cf       	rjmp	.-18     	; 0x613a <strcpy>
    614c:	10 82       	st	Z, r1
    614e:	08 95       	ret

00006150 <strncpy>:
    6150:	db 01       	movw	r26, r22
    6152:	fc 01       	movw	r30, r24
    6154:	2d 91       	ld	r18, X+
    6156:	21 11       	cpse	r18, r1
    6158:	03 c0       	rjmp	.+6      	; 0x6160 <strncpy+0x10>
    615a:	4e 0f       	add	r20, r30
    615c:	5f 1f       	adc	r21, r31
    615e:	08 c0       	rjmp	.+16     	; 0x6170 <strncpy+0x20>
    6160:	41 15       	cp	r20, r1
    6162:	51 05       	cpc	r21, r1
    6164:	21 f0       	breq	.+8      	; 0x616e <strncpy+0x1e>
    6166:	21 93       	st	Z+, r18
    6168:	41 50       	subi	r20, 0x01	; 1
    616a:	51 09       	sbc	r21, r1
    616c:	f3 cf       	rjmp	.-26     	; 0x6154 <strncpy+0x4>
    616e:	08 95       	ret
    6170:	4e 17       	cp	r20, r30
    6172:	5f 07       	cpc	r21, r31
    6174:	11 f0       	breq	.+4      	; 0x617a <strncpy+0x2a>
    6176:	11 92       	st	Z+, r1
    6178:	fb cf       	rjmp	.-10     	; 0x6170 <strncpy+0x20>
    617a:	08 95       	ret

0000617c <strcat>:
    617c:	cf 93       	push	r28
    617e:	df 93       	push	r29
    6180:	d8 2f       	mov	r29, r24
    6182:	c9 2f       	mov	r28, r25
    6184:	28 2f       	mov	r18, r24
    6186:	39 2f       	mov	r19, r25
    6188:	c9 01       	movw	r24, r18
    618a:	2f 5f       	subi	r18, 0xFF	; 255
    618c:	3f 4f       	sbci	r19, 0xFF	; 255
    618e:	fc 01       	movw	r30, r24
    6190:	40 81       	ld	r20, Z
    6192:	41 11       	cpse	r20, r1
    6194:	f9 cf       	rjmp	.-14     	; 0x6188 <strcat+0xc>
    6196:	d1 df       	rcall	.-94     	; 0x613a <strcpy>
    6198:	8d 2f       	mov	r24, r29
    619a:	9c 2f       	mov	r25, r28
    619c:	df 91       	pop	r29
    619e:	cf 91       	pop	r28
    61a0:	08 95       	ret

000061a2 <reverse>:
    61a2:	fc 01       	movw	r30, r24
    61a4:	01 90       	ld	r0, Z+
    61a6:	00 20       	and	r0, r0
    61a8:	e9 f7       	brne	.-6      	; 0x61a4 <reverse+0x2>
    61aa:	31 97       	sbiw	r30, 0x01	; 1
    61ac:	e8 1b       	sub	r30, r24
    61ae:	f9 0b       	sbc	r31, r25
    61b0:	af 01       	movw	r20, r30
    61b2:	55 95       	asr	r21
    61b4:	47 95       	ror	r20
    61b6:	e8 0f       	add	r30, r24
    61b8:	f9 1f       	adc	r31, r25
    61ba:	dc 01       	movw	r26, r24
    61bc:	9d 01       	movw	r18, r26
    61be:	28 1b       	sub	r18, r24
    61c0:	39 0b       	sbc	r19, r25
    61c2:	24 17       	cp	r18, r20
    61c4:	35 07       	cpc	r19, r21
    61c6:	2c f4       	brge	.+10     	; 0x61d2 <reverse+0x30>
    61c8:	22 91       	ld	r18, -Z
    61ca:	3c 91       	ld	r19, X
    61cc:	30 83       	st	Z, r19
    61ce:	2d 93       	st	X+, r18
    61d0:	f5 cf       	rjmp	.-22     	; 0x61bc <reverse+0x1a>
    61d2:	08 95       	ret

000061d4 <strupper>:
    61d4:	cf 93       	push	r28
    61d6:	df 93       	push	r29
    61d8:	ec 01       	movw	r28, r24
    61da:	88 81       	ld	r24, Y
    61dc:	88 23       	and	r24, r24
    61de:	21 f0       	breq	.+8      	; 0x61e8 <strupper+0x14>
    61e0:	90 e0       	ldi	r25, 0x00	; 0
    61e2:	9e df       	rcall	.-196    	; 0x6120 <toupper>
    61e4:	89 93       	st	Y+, r24
    61e6:	f9 cf       	rjmp	.-14     	; 0x61da <strupper+0x6>
    61e8:	df 91       	pop	r29
    61ea:	cf 91       	pop	r28
    61ec:	08 95       	ret

000061ee <strcmp>:
    61ee:	dc 01       	movw	r26, r24
    61f0:	fb 01       	movw	r30, r22
    61f2:	2d 91       	ld	r18, X+
    61f4:	41 91       	ld	r20, Z+
    61f6:	50 e0       	ldi	r21, 0x00	; 0
    61f8:	30 e0       	ldi	r19, 0x00	; 0
    61fa:	c9 01       	movw	r24, r18
    61fc:	84 1b       	sub	r24, r20
    61fe:	95 0b       	sbc	r25, r21
    6200:	11 f4       	brne	.+4      	; 0x6206 <strcmp+0x18>
    6202:	45 2b       	or	r20, r21
    6204:	b1 f7       	brne	.-20     	; 0x61f2 <strcmp+0x4>
    6206:	08 95       	ret

00006208 <strcasecmp>:
    6208:	ef 92       	push	r14
    620a:	ff 92       	push	r15
    620c:	0f 93       	push	r16
    620e:	1f 93       	push	r17
    6210:	cf 93       	push	r28
    6212:	df 93       	push	r29
    6214:	7c 01       	movw	r14, r24
    6216:	8b 01       	movw	r16, r22
    6218:	f7 01       	movw	r30, r14
    621a:	81 91       	ld	r24, Z+
    621c:	7f 01       	movw	r14, r30
    621e:	90 e0       	ldi	r25, 0x00	; 0
    6220:	7f df       	rcall	.-258    	; 0x6120 <toupper>
    6222:	ec 01       	movw	r28, r24
    6224:	f8 01       	movw	r30, r16
    6226:	81 91       	ld	r24, Z+
    6228:	8f 01       	movw	r16, r30
    622a:	90 e0       	ldi	r25, 0x00	; 0
    622c:	79 df       	rcall	.-270    	; 0x6120 <toupper>
    622e:	9c 01       	movw	r18, r24
    6230:	ce 01       	movw	r24, r28
    6232:	82 1b       	sub	r24, r18
    6234:	93 0b       	sbc	r25, r19
    6236:	11 f4       	brne	.+4      	; 0x623c <strcasecmp+0x34>
    6238:	23 2b       	or	r18, r19
    623a:	71 f7       	brne	.-36     	; 0x6218 <strcasecmp+0x10>
    623c:	cd b7       	in	r28, 0x3d	; 61
    623e:	de b7       	in	r29, 0x3e	; 62
    6240:	e6 e0       	ldi	r30, 0x06	; 6
    6242:	0c 94 06 e0 	jmp	0x1c00c	; 0x1c00c <__epilogue_restores__+0x18>

00006246 <strncasecmp>:
    6246:	a0 e0       	ldi	r26, 0x00	; 0
    6248:	b0 e0       	ldi	r27, 0x00	; 0
    624a:	e9 e2       	ldi	r30, 0x29	; 41
    624c:	f1 e3       	ldi	r31, 0x31	; 49
    624e:	0c 94 e8 df 	jmp	0x1bfd0	; 0x1bfd0 <__prologue_saves__+0x14>
    6252:	8c 01       	movw	r16, r24
    6254:	7b 01       	movw	r14, r22
    6256:	6c 01       	movw	r12, r24
    6258:	c4 0e       	add	r12, r20
    625a:	d5 1e       	adc	r13, r21
    625c:	0c 15       	cp	r16, r12
    625e:	1d 05       	cpc	r17, r13
    6260:	99 f0       	breq	.+38     	; 0x6288 <strncasecmp+0x42>
    6262:	f8 01       	movw	r30, r16
    6264:	81 91       	ld	r24, Z+
    6266:	8f 01       	movw	r16, r30
    6268:	90 e0       	ldi	r25, 0x00	; 0
    626a:	5a df       	rcall	.-332    	; 0x6120 <toupper>
    626c:	ec 01       	movw	r28, r24
    626e:	f7 01       	movw	r30, r14
    6270:	81 91       	ld	r24, Z+
    6272:	7f 01       	movw	r14, r30
    6274:	90 e0       	ldi	r25, 0x00	; 0
    6276:	54 df       	rcall	.-344    	; 0x6120 <toupper>
    6278:	9c 01       	movw	r18, r24
    627a:	ce 01       	movw	r24, r28
    627c:	82 1b       	sub	r24, r18
    627e:	93 0b       	sbc	r25, r19
    6280:	29 f4       	brne	.+10     	; 0x628c <strncasecmp+0x46>
    6282:	23 2b       	or	r18, r19
    6284:	59 f7       	brne	.-42     	; 0x625c <strncasecmp+0x16>
    6286:	02 c0       	rjmp	.+4      	; 0x628c <strncasecmp+0x46>
    6288:	80 e0       	ldi	r24, 0x00	; 0
    628a:	90 e0       	ldi	r25, 0x00	; 0
    628c:	cd b7       	in	r28, 0x3d	; 61
    628e:	de b7       	in	r29, 0x3e	; 62
    6290:	e8 e0       	ldi	r30, 0x08	; 8
    6292:	0c 94 04 e0 	jmp	0x1c008	; 0x1c008 <__epilogue_restores__+0x14>

00006296 <stralloc>:
///
///@return pointer to alocated string.
///@return NULL on out of memory.
MEMSPACE
char *stralloc(char *str)
{
    6296:	0f 93       	push	r16
    6298:	1f 93       	push	r17
    629a:	cf 93       	push	r28
    629c:	df 93       	push	r29
    char *ptr;
    int len;

    if(!str)
    629e:	00 97       	sbiw	r24, 0x00	; 0
    62a0:	99 f0       	breq	.+38     	; 0x62c8 <stralloc+0x32>
    62a2:	ec 01       	movw	r28, r24
        return(str);;
    len  = strlen(str);
    62a4:	fc 01       	movw	r30, r24
    62a6:	01 90       	ld	r0, Z+
    62a8:	00 20       	and	r0, r0
    62aa:	e9 f7       	brne	.-6      	; 0x62a6 <stralloc+0x10>
    62ac:	cf 01       	movw	r24, r30
    ptr = safecalloc(len+1,1);
    62ae:	61 e0       	ldi	r22, 0x01	; 1
    62b0:	70 e0       	ldi	r23, 0x00	; 0
    62b2:	8c 1b       	sub	r24, r28
    62b4:	9d 0b       	sbc	r25, r29
    62b6:	0e 94 b1 27 	call	0x4f62	; 0x4f62 <safecalloc>
    62ba:	8c 01       	movw	r16, r24
    if(!ptr)
    62bc:	00 97       	sbiw	r24, 0x00	; 0
    62be:	21 f0       	breq	.+8      	; 0x62c8 <stralloc+0x32>
        return(ptr);
    strcpy(ptr,str);
    62c0:	be 01       	movw	r22, r28
    62c2:	3b df       	rcall	.-394    	; 0x613a <strcpy>
    return(ptr);
    62c4:	c8 01       	movw	r24, r16
    62c6:	02 c0       	rjmp	.+4      	; 0x62cc <stralloc+0x36>
    62c8:	80 e0       	ldi	r24, 0x00	; 0
    62ca:	90 e0       	ldi	r25, 0x00	; 0
}
    62cc:	df 91       	pop	r29
    62ce:	cf 91       	pop	r28
    62d0:	1f 91       	pop	r17
    62d2:	0f 91       	pop	r16
    62d4:	08 95       	ret

000062d6 <sep>:
        return(0);

    if(strncmp(str,pat,patlen) == 0)
        return(len);
    return(0);
}
    62d6:	00 d0       	rcall	.+0      	; 0x62d8 <sep+0x2>
    62d8:	1f 92       	push	r1
    62da:	85 ee       	ldi	r24, 0xE5	; 229
    62dc:	94 e0       	ldi	r25, 0x04	; 4
    62de:	a0 e0       	ldi	r26, 0x00	; 0
    62e0:	ed b7       	in	r30, 0x3d	; 61
    62e2:	fe b7       	in	r31, 0x3e	; 62
    62e4:	81 83       	std	Z+1, r24	; 0x01
    62e6:	92 83       	std	Z+2, r25	; 0x02
    62e8:	a3 83       	std	Z+3, r26	; 0x03
    62ea:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    62ee:	0f 90       	pop	r0
    62f0:	0f 90       	pop	r0
    62f2:	0f 90       	pop	r0
    62f4:	08 95       	ret

000062f6 <trim_tail>:
    62f6:	00 97       	sbiw	r24, 0x00	; 0
    62f8:	69 f0       	breq	.+26     	; 0x6314 <trim_tail+0x1e>
    62fa:	fc 01       	movw	r30, r24
    62fc:	01 90       	ld	r0, Z+
    62fe:	00 20       	and	r0, r0
    6300:	e9 f7       	brne	.-6      	; 0x62fc <trim_tail+0x6>
    6302:	31 97       	sbiw	r30, 0x01	; 1
    6304:	e8 17       	cp	r30, r24
    6306:	f9 07       	cpc	r31, r25
    6308:	29 f0       	breq	.+10     	; 0x6314 <trim_tail+0x1e>
    630a:	22 91       	ld	r18, -Z
    630c:	21 32       	cpi	r18, 0x21	; 33
    630e:	10 f4       	brcc	.+4      	; 0x6314 <trim_tail+0x1e>
    6310:	10 82       	st	Z, r1
    6312:	f8 cf       	rjmp	.-16     	; 0x6304 <trim_tail+0xe>
    6314:	08 95       	ret

00006316 <skipspaces>:
    6316:	00 97       	sbiw	r24, 0x00	; 0
    6318:	39 f0       	breq	.+14     	; 0x6328 <skipspaces+0x12>
    631a:	fc 01       	movw	r30, r24
    631c:	cf 01       	movw	r24, r30
    631e:	21 91       	ld	r18, Z+
    6320:	20 32       	cpi	r18, 0x20	; 32
    6322:	e1 f3       	breq	.-8      	; 0x631c <skipspaces+0x6>
    6324:	29 30       	cpi	r18, 0x09	; 9
    6326:	d1 f3       	breq	.-12     	; 0x631c <skipspaces+0x6>
    6328:	08 95       	ret

0000632a <MATCH>:
    632a:	cf 93       	push	r28
    632c:	df 93       	push	r29
    632e:	fb 01       	movw	r30, r22
    6330:	01 90       	ld	r0, Z+
    6332:	00 20       	and	r0, r0
    6334:	e9 f7       	brne	.-6      	; 0x6330 <MATCH+0x6>
    6336:	31 97       	sbiw	r30, 0x01	; 1
    6338:	ef 01       	movw	r28, r30
    633a:	c6 1b       	sub	r28, r22
    633c:	d7 0b       	sbc	r29, r23
    633e:	57 df       	rcall	.-338    	; 0x61ee <strcmp>
    6340:	89 2b       	or	r24, r25
    6342:	11 f4       	brne	.+4      	; 0x6348 <MATCH+0x1e>
    6344:	ce 01       	movw	r24, r28
    6346:	02 c0       	rjmp	.+4      	; 0x634c <MATCH+0x22>
    6348:	80 e0       	ldi	r24, 0x00	; 0
    634a:	90 e0       	ldi	r25, 0x00	; 0
    634c:	df 91       	pop	r29
    634e:	cf 91       	pop	r28
    6350:	08 95       	ret

00006352 <MATCHI>:
    6352:	cf 93       	push	r28
    6354:	df 93       	push	r29
    6356:	fb 01       	movw	r30, r22
    6358:	01 90       	ld	r0, Z+
    635a:	00 20       	and	r0, r0
    635c:	e9 f7       	brne	.-6      	; 0x6358 <MATCHI+0x6>
    635e:	31 97       	sbiw	r30, 0x01	; 1
    6360:	ef 01       	movw	r28, r30
    6362:	c6 1b       	sub	r28, r22
    6364:	d7 0b       	sbc	r29, r23
    6366:	50 df       	rcall	.-352    	; 0x6208 <strcasecmp>
    6368:	89 2b       	or	r24, r25
    636a:	11 f4       	brne	.+4      	; 0x6370 <MATCHI+0x1e>
    636c:	ce 01       	movw	r24, r28
    636e:	02 c0       	rjmp	.+4      	; 0x6374 <MATCHI+0x22>
    6370:	80 e0       	ldi	r24, 0x00	; 0
    6372:	90 e0       	ldi	r25, 0x00	; 0
    6374:	df 91       	pop	r29
    6376:	cf 91       	pop	r28
    6378:	08 95       	ret

0000637a <MATCHARGS>:
    637a:	a9 e0       	ldi	r26, 0x09	; 9
    637c:	b0 e0       	ldi	r27, 0x00	; 0
    637e:	e3 ec       	ldi	r30, 0xC3	; 195
    6380:	f1 e3       	ldi	r31, 0x31	; 49
    6382:	0c 94 ea df 	jmp	0x1bfd4	; 0x1bfd4 <__prologue_saves__+0x18>
    6386:	eb 01       	movw	r28, r22
    6388:	8a 01       	movw	r16, r20
    638a:	79 01       	movw	r14, r18
    638c:	e2 df       	rcall	.-60     	; 0x6352 <MATCHI>
    638e:	00 97       	sbiw	r24, 0x00	; 0
    6390:	c1 f0       	breq	.+48     	; 0x63c2 <MATCHARGS+0x48>
    6392:	e0 16       	cp	r14, r16
    6394:	f1 06       	cpc	r15, r17
    6396:	9c f4       	brge	.+38     	; 0x63be <MATCHARGS+0x44>
    6398:	ed b7       	in	r30, 0x3d	; 61
    639a:	fe b7       	in	r31, 0x3e	; 62
    639c:	f1 86       	std	Z+9, r15	; 0x09
    639e:	e0 86       	std	Z+8, r14	; 0x08
    63a0:	17 83       	std	Z+7, r17	; 0x07
    63a2:	06 83       	std	Z+6, r16	; 0x06
    63a4:	d5 83       	std	Z+5, r29	; 0x05
    63a6:	c4 83       	std	Z+4, r28	; 0x04
    63a8:	8f eb       	ldi	r24, 0xBF	; 191
    63aa:	94 e0       	ldi	r25, 0x04	; 4
    63ac:	a0 e0       	ldi	r26, 0x00	; 0
    63ae:	81 83       	std	Z+1, r24	; 0x01
    63b0:	92 83       	std	Z+2, r25	; 0x02
    63b2:	a3 83       	std	Z+3, r26	; 0x03
    63b4:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    63b8:	80 e0       	ldi	r24, 0x00	; 0
    63ba:	90 e0       	ldi	r25, 0x00	; 0
    63bc:	02 c0       	rjmp	.+4      	; 0x63c2 <MATCHARGS+0x48>
    63be:	81 e0       	ldi	r24, 0x01	; 1
    63c0:	90 e0       	ldi	r25, 0x00	; 0
    63c2:	cd b7       	in	r28, 0x3d	; 61
    63c4:	de b7       	in	r29, 0x3e	; 62
    63c6:	29 96       	adiw	r28, 0x09	; 9
    63c8:	e6 e0       	ldi	r30, 0x06	; 6
    63ca:	0c 94 06 e0 	jmp	0x1c00c	; 0x1c00c <__epilogue_restores__+0x18>

000063ce <MATCHI_LEN>:
    63ce:	cf 93       	push	r28
    63d0:	df 93       	push	r29
    63d2:	00 97       	sbiw	r24, 0x00	; 0
    63d4:	89 f0       	breq	.+34     	; 0x63f8 <MATCHI_LEN+0x2a>
    63d6:	61 15       	cp	r22, r1
    63d8:	71 05       	cpc	r23, r1
    63da:	71 f0       	breq	.+28     	; 0x63f8 <MATCHI_LEN+0x2a>
    63dc:	eb 01       	movw	r28, r22
    63de:	09 90       	ld	r0, Y+
    63e0:	00 20       	and	r0, r0
    63e2:	e9 f7       	brne	.-6      	; 0x63de <MATCHI_LEN+0x10>
    63e4:	21 97       	sbiw	r28, 0x01	; 1
    63e6:	c6 1b       	sub	r28, r22
    63e8:	d7 0b       	sbc	r29, r23
    63ea:	31 f0       	breq	.+12     	; 0x63f8 <MATCHI_LEN+0x2a>
    63ec:	ae 01       	movw	r20, r28
    63ee:	2b df       	rcall	.-426    	; 0x6246 <strncasecmp>
    63f0:	89 2b       	or	r24, r25
    63f2:	11 f4       	brne	.+4      	; 0x63f8 <MATCHI_LEN+0x2a>
    63f4:	ce 01       	movw	r24, r28
    63f6:	02 c0       	rjmp	.+4      	; 0x63fc <MATCHI_LEN+0x2e>
    63f8:	80 e0       	ldi	r24, 0x00	; 0
    63fa:	90 e0       	ldi	r25, 0x00	; 0
    63fc:	df 91       	pop	r29
    63fe:	cf 91       	pop	r28
    6400:	08 95       	ret

00006402 <split_args>:
    6402:	a0 e0       	ldi	r26, 0x00	; 0
    6404:	b0 e0       	ldi	r27, 0x00	; 0
    6406:	e7 e0       	ldi	r30, 0x07	; 7
    6408:	f2 e3       	ldi	r31, 0x32	; 50
    640a:	0c 94 e8 df 	jmp	0x1bfd0	; 0x1bfd0 <__prologue_saves__+0x14>
    640e:	dc 01       	movw	r26, r24
    6410:	6a 01       	movw	r12, r20
    6412:	8b 01       	movw	r16, r22
    6414:	fb 01       	movw	r30, r22
    6416:	80 e0       	ldi	r24, 0x00	; 0
    6418:	90 e0       	ldi	r25, 0x00	; 0
    641a:	8c 15       	cp	r24, r12
    641c:	9d 05       	cpc	r25, r13
    641e:	24 f4       	brge	.+8      	; 0x6428 <split_args+0x26>
    6420:	11 92       	st	Z+, r1
    6422:	11 92       	st	Z+, r1
    6424:	01 96       	adiw	r24, 0x01	; 1
    6426:	f9 cf       	rjmp	.-14     	; 0x641a <split_args+0x18>
    6428:	c1 14       	cp	r12, r1
    642a:	d1 04       	cpc	r13, r1
    642c:	d9 f1       	breq	.+118    	; 0x64a4 <split_args+0xa2>
    642e:	10 97       	sbiw	r26, 0x00	; 0
    6430:	c9 f1       	breq	.+114    	; 0x64a4 <split_args+0xa2>
    6432:	ee 24       	eor	r14, r14
    6434:	e3 94       	inc	r14
    6436:	f1 2c       	mov	r15, r1
    6438:	c0 e0       	ldi	r28, 0x00	; 0
    643a:	d0 e0       	ldi	r29, 0x00	; 0
    643c:	8c 91       	ld	r24, X
    643e:	88 23       	and	r24, r24
    6440:	b1 f1       	breq	.+108    	; 0x64ae <split_args+0xac>
    6442:	cc 15       	cp	r28, r12
    6444:	dd 05       	cpc	r29, r13
    6446:	9c f5       	brge	.+102    	; 0x64ae <split_args+0xac>
    6448:	cd 01       	movw	r24, r26
    644a:	65 df       	rcall	.-310    	; 0x6316 <skipspaces>
    644c:	dc 01       	movw	r26, r24
    644e:	2c 91       	ld	r18, X
    6450:	22 23       	and	r18, r18
    6452:	69 f1       	breq	.+90     	; 0x64ae <split_args+0xac>
    6454:	22 32       	cpi	r18, 0x22	; 34
    6456:	79 f4       	brne	.+30     	; 0x6476 <split_args+0x74>
    6458:	fc 01       	movw	r30, r24
    645a:	31 96       	adiw	r30, 0x01	; 1
    645c:	d8 01       	movw	r26, r16
    645e:	ed 93       	st	X+, r30
    6460:	fc 93       	st	X, r31
    6462:	df 01       	movw	r26, r30
    6464:	80 81       	ld	r24, Z
    6466:	31 96       	adiw	r30, 0x01	; 1
    6468:	88 23       	and	r24, r24
    646a:	a9 f0       	breq	.+42     	; 0x6496 <split_args+0x94>
    646c:	82 32       	cpi	r24, 0x22	; 34
    646e:	c9 f7       	brne	.-14     	; 0x6462 <split_args+0x60>
    6470:	1c 92       	st	X, r1
    6472:	df 01       	movw	r26, r30
    6474:	10 c0       	rjmp	.+32     	; 0x6496 <split_args+0x94>
    6476:	f8 01       	movw	r30, r16
    6478:	91 83       	std	Z+1, r25	; 0x01
    647a:	80 83       	st	Z, r24
    647c:	fc 01       	movw	r30, r24
    647e:	2e 2f       	mov	r18, r30
    6480:	9f 2f       	mov	r25, r31
    6482:	81 91       	ld	r24, Z+
    6484:	3f ed       	ldi	r19, 0xDF	; 223
    6486:	38 0f       	add	r19, r24
    6488:	3e 35       	cpi	r19, 0x5E	; 94
    648a:	c8 f3       	brcs	.-14     	; 0x647e <split_args+0x7c>
    648c:	88 23       	and	r24, r24
    648e:	69 f0       	breq	.+26     	; 0x64aa <split_args+0xa8>
    6490:	a2 2f       	mov	r26, r18
    6492:	b9 2f       	mov	r27, r25
    6494:	1d 92       	st	X+, r1
    6496:	21 96       	adiw	r28, 0x01	; 1
    6498:	ff ef       	ldi	r31, 0xFF	; 255
    649a:	ef 1a       	sub	r14, r31
    649c:	ff 0a       	sbc	r15, r31
    649e:	0e 5f       	subi	r16, 0xFE	; 254
    64a0:	1f 4f       	sbci	r17, 0xFF	; 255
    64a2:	cc cf       	rjmp	.-104    	; 0x643c <split_args+0x3a>
    64a4:	80 e0       	ldi	r24, 0x00	; 0
    64a6:	90 e0       	ldi	r25, 0x00	; 0
    64a8:	03 c0       	rjmp	.+6      	; 0x64b0 <split_args+0xae>
    64aa:	c7 01       	movw	r24, r14
    64ac:	01 c0       	rjmp	.+2      	; 0x64b0 <split_args+0xae>
    64ae:	ce 01       	movw	r24, r28
    64b0:	cd b7       	in	r28, 0x3d	; 61
    64b2:	de b7       	in	r29, 0x3e	; 62
    64b4:	e8 e0       	ldi	r30, 0x08	; 8
    64b6:	0c 94 04 e0 	jmp	0x1c008	; 0x1c008 <__epilogue_restores__+0x14>

000064ba <get_token>:
    64ba:	ef 92       	push	r14
    64bc:	ff 92       	push	r15
    64be:	0f 93       	push	r16
    64c0:	1f 93       	push	r17
    64c2:	cf 93       	push	r28
    64c4:	df 93       	push	r29
    64c6:	eb 01       	movw	r28, r22
    64c8:	8a 01       	movw	r16, r20
    64ca:	18 82       	st	Y, r1
    64cc:	00 97       	sbiw	r24, 0x00	; 0
    64ce:	89 f1       	breq	.+98     	; 0x6532 <get_token+0x78>
    64d0:	fc 01       	movw	r30, r24
    64d2:	20 81       	ld	r18, Z
    64d4:	22 23       	and	r18, r18
    64d6:	79 f1       	breq	.+94     	; 0x6536 <get_token+0x7c>
    64d8:	1e df       	rcall	.-452    	; 0x6316 <skipspaces>
    64da:	7c 01       	movw	r14, r24
    64dc:	0c df       	rcall	.-488    	; 0x62f6 <trim_tail>
    64de:	f7 01       	movw	r30, r14
    64e0:	cf 01       	movw	r24, r30
    64e2:	21 91       	ld	r18, Z+
    64e4:	21 32       	cpi	r18, 0x21	; 33
    64e6:	e0 f0       	brcs	.+56     	; 0x6520 <get_token+0x66>
    64e8:	10 16       	cp	r1, r16
    64ea:	11 06       	cpc	r1, r17
    64ec:	cc f4       	brge	.+50     	; 0x6520 <get_token+0x66>
    64ee:	22 32       	cpi	r18, 0x22	; 34
    64f0:	79 f4       	brne	.+30     	; 0x6510 <get_token+0x56>
    64f2:	fc 01       	movw	r30, r24
    64f4:	31 96       	adiw	r30, 0x01	; 1
    64f6:	0c 0f       	add	r16, r28
    64f8:	1d 1f       	adc	r17, r29
    64fa:	cf 01       	movw	r24, r30
    64fc:	21 91       	ld	r18, Z+
    64fe:	22 23       	and	r18, r18
    6500:	79 f0       	breq	.+30     	; 0x6520 <get_token+0x66>
    6502:	22 32       	cpi	r18, 0x22	; 34
    6504:	59 f0       	breq	.+22     	; 0x651c <get_token+0x62>
    6506:	c0 17       	cp	r28, r16
    6508:	d1 07       	cpc	r29, r17
    650a:	51 f0       	breq	.+20     	; 0x6520 <get_token+0x66>
    650c:	29 93       	st	Y+, r18
    650e:	f5 cf       	rjmp	.-22     	; 0x64fa <get_token+0x40>
    6510:	2c 32       	cpi	r18, 0x2C	; 44
    6512:	31 f0       	breq	.+12     	; 0x6520 <get_token+0x66>
    6514:	29 93       	st	Y+, r18
    6516:	01 50       	subi	r16, 0x01	; 1
    6518:	11 09       	sbc	r17, r1
    651a:	e2 cf       	rjmp	.-60     	; 0x64e0 <get_token+0x26>
    651c:	cf 01       	movw	r24, r30
    651e:	18 82       	st	Y, r1
    6520:	fa de       	rcall	.-524    	; 0x6316 <skipspaces>
    6522:	fc 01       	movw	r30, r24
    6524:	80 81       	ld	r24, Z
    6526:	8c 32       	cpi	r24, 0x2C	; 44
    6528:	09 f4       	brne	.+2      	; 0x652c <get_token+0x72>
    652a:	31 96       	adiw	r30, 0x01	; 1
    652c:	18 82       	st	Y, r1
    652e:	cf 01       	movw	r24, r30
    6530:	02 c0       	rjmp	.+4      	; 0x6536 <get_token+0x7c>
    6532:	80 e0       	ldi	r24, 0x00	; 0
    6534:	90 e0       	ldi	r25, 0x00	; 0
    6536:	cd b7       	in	r28, 0x3d	; 61
    6538:	de b7       	in	r29, 0x3e	; 62
    653a:	e6 e0       	ldi	r30, 0x06	; 6
    653c:	0c 94 06 e0 	jmp	0x1c00c	; 0x1c00c <__epilogue_restores__+0x18>

00006540 <get_value>:
/// @param[in] str: string to examine
///
/// @return  value
MEMSPACE
int32_t get_value(char *str)
{ 
    6540:	a2 e0       	ldi	r26, 0x02	; 2
    6542:	b0 e0       	ldi	r27, 0x00	; 0
    6544:	e6 ea       	ldi	r30, 0xA6	; 166
    6546:	f2 e3       	ldi	r31, 0x32	; 50
    6548:	0c 94 ec df 	jmp	0x1bfd8	; 0x1bfd8 <__prologue_saves__+0x1c>
    int base;
    int ret;
    char *ptr;
    char *endptr;

    if(!str || *str == 0)
    654c:	00 97       	sbiw	r24, 0x00	; 0
    654e:	79 f1       	breq	.+94     	; 0x65ae <get_value+0x6e>
    6550:	fc 01       	movw	r30, r24
    6552:	20 81       	ld	r18, Z
    6554:	22 23       	and	r18, r18
        return(0);

    ptr = skipspaces(str);
    6556:	59 f1       	breq	.+86     	; 0x65ae <get_value+0x6e>
    6558:	de de       	rcall	.-580    	; 0x6316 <skipspaces>
    base = 10;

    // convert number base 10, 16, 8 and 2
    if( (ret = MATCHI_LEN(ptr,"0x")) )
    655a:	8c 01       	movw	r16, r24
    655c:	61 e0       	ldi	r22, 0x01	; 1
    655e:	73 e0       	ldi	r23, 0x03	; 3
    6560:	36 df       	rcall	.-404    	; 0x63ce <MATCHI_LEN>
    6562:	00 97       	sbiw	r24, 0x00	; 0
    {
        base = 16;
        ptr += ret;
    6564:	29 f0       	breq	.+10     	; 0x6570 <get_value+0x30>
    6566:	08 0f       	add	r16, r24
    base = 10;

    // convert number base 10, 16, 8 and 2
    if( (ret = MATCHI_LEN(ptr,"0x")) )
    {
        base = 16;
    6568:	19 1f       	adc	r17, r25
    656a:	40 e1       	ldi	r20, 0x10	; 16
    656c:	50 e0       	ldi	r21, 0x00	; 0
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0o")) )
    656e:	18 c0       	rjmp	.+48     	; 0x65a0 <get_value+0x60>
    6570:	64 e0       	ldi	r22, 0x04	; 4
    6572:	73 e0       	ldi	r23, 0x03	; 3
    6574:	c8 01       	movw	r24, r16
    6576:	2b df       	rcall	.-426    	; 0x63ce <MATCHI_LEN>
    6578:	00 97       	sbiw	r24, 0x00	; 0
    {
        base = 8;
        ptr += ret;
    657a:	29 f0       	breq	.+10     	; 0x6586 <get_value+0x46>
    657c:	08 0f       	add	r16, r24
        base = 16;
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0o")) )
    {
        base = 8;
    657e:	19 1f       	adc	r17, r25
    6580:	48 e0       	ldi	r20, 0x08	; 8
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    6582:	50 e0       	ldi	r21, 0x00	; 0
    6584:	0d c0       	rjmp	.+26     	; 0x65a0 <get_value+0x60>
    6586:	67 e0       	ldi	r22, 0x07	; 7
    6588:	73 e0       	ldi	r23, 0x03	; 3
    658a:	c8 01       	movw	r24, r16
    658c:	20 df       	rcall	.-448    	; 0x63ce <MATCHI_LEN>
    {
        base = 2;
        ptr += ret;
    658e:	00 97       	sbiw	r24, 0x00	; 0
    6590:	29 f0       	breq	.+10     	; 0x659c <get_value+0x5c>
        base = 8;
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    {
        base = 2;
    6592:	08 0f       	add	r16, r24
    6594:	19 1f       	adc	r17, r25
    6596:	42 e0       	ldi	r20, 0x02	; 2

    if(!str || *str == 0)
        return(0);

    ptr = skipspaces(str);
    base = 10;
    6598:	50 e0       	ldi	r21, 0x00	; 0
    659a:	02 c0       	rjmp	.+4      	; 0x65a0 <get_value+0x60>
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    {
        base = 2;
        ptr += ret;
    }
    return(strtol(ptr, (char **)&endptr, base));
    659c:	4a e0       	ldi	r20, 0x0A	; 10
    659e:	50 e0       	ldi	r21, 0x00	; 0
    65a0:	be 01       	movw	r22, r28
    65a2:	6f 5f       	subi	r22, 0xFF	; 255
    65a4:	7f 4f       	sbci	r23, 0xFF	; 255
    65a6:	c8 01       	movw	r24, r16
    65a8:	0e 94 e0 45 	call	0x8bc0	; 0x8bc0 <strtol>
    int ret;
    char *ptr;
    char *endptr;

    if(!str || *str == 0)
        return(0);
    65ac:	03 c0       	rjmp	.+6      	; 0x65b4 <get_value+0x74>
    65ae:	60 e0       	ldi	r22, 0x00	; 0
    {
        base = 2;
        ptr += ret;
    }
    return(strtol(ptr, (char **)&endptr, base));
}
    65b0:	70 e0       	ldi	r23, 0x00	; 0
    65b2:	cb 01       	movw	r24, r22
    65b4:	22 96       	adiw	r28, 0x02	; 2
    65b6:	e4 e0       	ldi	r30, 0x04	; 4
    65b8:	0c 94 08 e0 	jmp	0x1c010	; 0x1c010 <__epilogue_restores__+0x1c>

000065bc <enable_system_task>:
/// @brief Enable interrupts
/// @return void.
MEMSPACE
void enable_system_task()
{
    sei();
    65bc:	78 94       	sei
    65be:	08 95       	ret

000065c0 <install_timers_isr>:
///
/// @see ISR().
/// @return void.
MEMSPACE void install_timers_isr()
{
    cli();
    65c0:	f8 94       	cli
    TCCR1B=(1<<WGM12) | TIMER1_PRE_1;   // No Prescale
    65c2:	89 e0       	ldi	r24, 0x09	; 9
    65c4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    TCCR1A=0;
    65c8:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    OCR1A=(TIMER1_COUNTS_PER_TIC-1);    // 0 .. count
    65cc:	8f e1       	ldi	r24, 0x1F	; 31
    65ce:	9e e4       	ldi	r25, 0x4E	; 78
    65d0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    65d4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    TIMSK1 |= (1<<OCIE1A);              //Enable the Output Compare A interrupt
    65d8:	ef e6       	ldi	r30, 0x6F	; 111
    65da:	f0 e0       	ldi	r31, 0x00	; 0
    65dc:	80 81       	ld	r24, Z
    65de:	82 60       	ori	r24, 0x02	; 2
    65e0:	80 83       	st	Z, r24
    sei();
    65e2:	78 94       	sei
    65e4:	08 95       	ret

000065e6 <__vector_13>:
/// @brief AVR Timer Interrupt Vector
///
/// - calls execute_timers() - we call this the System task.
///
ISR(TIMER1_COMPA_vect)
{
    65e6:	1f 92       	push	r1
    65e8:	0f 92       	push	r0
    65ea:	0f b6       	in	r0, 0x3f	; 63
    65ec:	0f 92       	push	r0
    65ee:	11 24       	eor	r1, r1
    65f0:	0b b6       	in	r0, 0x3b	; 59
    65f2:	0f 92       	push	r0
    65f4:	2f 93       	push	r18
    65f6:	3f 93       	push	r19
    65f8:	4f 93       	push	r20
    65fa:	5f 93       	push	r21
    65fc:	6f 93       	push	r22
    65fe:	7f 93       	push	r23
    6600:	8f 93       	push	r24
    6602:	9f 93       	push	r25
    6604:	af 93       	push	r26
    6606:	bf 93       	push	r27
    6608:	ef 93       	push	r30
    execute_timers();
    660a:	ff 93       	push	r31
}
    660c:	36 d2       	rcall	.+1132   	; 0x6a7a <execute_timers>
    660e:	ff 91       	pop	r31
    6610:	ef 91       	pop	r30
    6612:	bf 91       	pop	r27
    6614:	af 91       	pop	r26
    6616:	9f 91       	pop	r25
    6618:	8f 91       	pop	r24
    661a:	7f 91       	pop	r23
    661c:	6f 91       	pop	r22
    661e:	5f 91       	pop	r21
    6620:	4f 91       	pop	r20
    6622:	3f 91       	pop	r19
    6624:	2f 91       	pop	r18
    6626:	0f 90       	pop	r0
    6628:	0b be       	out	0x3b, r0	; 59
    662a:	0f 90       	pop	r0
    662c:	0f be       	out	0x3f, r0	; 63
    662e:	0f 90       	pop	r0
    6630:	1f 90       	pop	r1
    6632:	18 95       	reti

00006634 <clock_gettime>:
///
/// @return 0 on success.
/// @return -1 on error.
MEMSPACE
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    6634:	0f 93       	push	r16
    6636:	1f 93       	push	r17
    6638:	cf 93       	push	r28
    663a:	df 93       	push	r29
    663c:	fb 01       	movw	r30, r22
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;

    // disable interrupts
    cli();
    663e:	f8 94       	cli

    count1 = TCNT1;
    6640:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    6644:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>

    ts->tv_sec = __clock.tv_sec;
    6648:	80 91 0e 1a 	lds	r24, 0x1A0E	; 0x801a0e <__clock>
    664c:	90 91 0f 1a 	lds	r25, 0x1A0F	; 0x801a0f <__clock+0x1>
    6650:	a0 91 10 1a 	lds	r26, 0x1A10	; 0x801a10 <__clock+0x2>
    6654:	b0 91 11 1a 	lds	r27, 0x1A11	; 0x801a11 <__clock+0x3>
    6658:	80 83       	st	Z, r24
    665a:	91 83       	std	Z+1, r25	; 0x01
    665c:	a2 83       	std	Z+2, r26	; 0x02
    665e:	b3 83       	std	Z+3, r27	; 0x03
    ts->tv_nsec = __clock.tv_nsec;
    6660:	80 91 12 1a 	lds	r24, 0x1A12	; 0x801a12 <__clock+0x4>
    6664:	90 91 13 1a 	lds	r25, 0x1A13	; 0x801a13 <__clock+0x5>
    6668:	a0 91 14 1a 	lds	r26, 0x1A14	; 0x801a14 <__clock+0x6>
    666c:	b0 91 15 1a 	lds	r27, 0x1A15	; 0x801a15 <__clock+0x7>
    6670:	84 83       	std	Z+4, r24	; 0x04
    6672:	95 83       	std	Z+5, r25	; 0x05
    6674:	a6 83       	std	Z+6, r26	; 0x06
    6676:	b7 83       	std	Z+7, r27	; 0x07

    count2 = TCNT1;
    6678:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    667c:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>

    if( TIFR1 & (1<<OCF1A) )
    6680:	b1 9b       	sbis	0x16, 1	; 22
    6682:	03 c0       	rjmp	.+6      	; 0x668a <clock_gettime+0x56>
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;
    6684:	c0 e0       	ldi	r28, 0x00	; 0
    6686:	d0 e0       	ldi	r29, 0x00	; 0
    6688:	3f c0       	rjmp	.+126    	; 0x6708 <clock_gettime+0xd4>
    count2 = TCNT1;

    if( TIFR1 & (1<<OCF1A) )
        pendingf = 1;

    if (count2 < count1)
    668a:	82 17       	cp	r24, r18
    668c:	93 07       	cpc	r25, r19
    668e:	d0 f1       	brcs	.+116    	; 0x6704 <clock_gettime+0xd0>
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;
    6690:	c0 e0       	ldi	r28, 0x00	; 0
    6692:	d0 e0       	ldi	r29, 0x00	; 0
/// @return -1 on error.
MEMSPACE
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    6694:	40 e0       	ldi	r20, 0x00	; 0
    6696:	50 e0       	ldi	r21, 0x00	; 0
    6698:	ba 01       	movw	r22, r20
    else
    {
        if( pendingf )
            offset = TIMER1_COUNTS_PER_TIC;       // overflow
    }
    offset += count2;
    669a:	9a 01       	movw	r18, r20
    669c:	ab 01       	movw	r20, r22
    669e:	28 0f       	add	r18, r24
    66a0:	39 1f       	adc	r19, r25
    66a2:	41 1d       	adc	r20, r1
    66a4:	51 1d       	adc	r21, r1

    // enable interrupts
    sei();
    66a6:	78 94       	sei

    offset *= TIMER1_COUNTER_RES;

    ts->tv_nsec += offset;
    66a8:	a2 e3       	ldi	r26, 0x32	; 50
    66aa:	b0 e0       	ldi	r27, 0x00	; 0
    66ac:	0e 94 be df 	call	0x1bf7c	; 0x1bf7c <__muluhisi3>
    66b0:	04 81       	ldd	r16, Z+4	; 0x04
    66b2:	15 81       	ldd	r17, Z+5	; 0x05
    66b4:	26 81       	ldd	r18, Z+6	; 0x06
    66b6:	37 81       	ldd	r19, Z+7	; 0x07
    66b8:	dc 01       	movw	r26, r24
    66ba:	cb 01       	movw	r24, r22
    66bc:	80 0f       	add	r24, r16
    66be:	91 1f       	adc	r25, r17
    66c0:	a2 1f       	adc	r26, r18
    66c2:	b3 1f       	adc	r27, r19

    if (ts->tv_nsec >= 1000000000L)
    66c4:	81 15       	cp	r24, r1
    66c6:	2a ec       	ldi	r18, 0xCA	; 202
    66c8:	92 07       	cpc	r25, r18
    66ca:	2a e9       	ldi	r18, 0x9A	; 154
    66cc:	a2 07       	cpc	r26, r18
    66ce:	2b e3       	ldi	r18, 0x3B	; 59
    66d0:	b2 07       	cpc	r27, r18
    66d2:	2c f4       	brge	.+10     	; 0x66de <clock_gettime+0xaa>
    // enable interrupts
    sei();

    offset *= TIMER1_COUNTER_RES;

    ts->tv_nsec += offset;
    66d4:	84 83       	std	Z+4, r24	; 0x04
    66d6:	95 83       	std	Z+5, r25	; 0x05
    66d8:	a6 83       	std	Z+6, r26	; 0x06
    66da:	b7 83       	std	Z+7, r27	; 0x07
    66dc:	1a c0       	rjmp	.+52     	; 0x6712 <clock_gettime+0xde>

    if (ts->tv_nsec >= 1000000000L)
    {
        ts->tv_nsec -= 1000000000L;
    66de:	9a 5c       	subi	r25, 0xCA	; 202
    66e0:	aa 49       	sbci	r26, 0x9A	; 154
    66e2:	bb 43       	sbci	r27, 0x3B	; 59
    66e4:	84 83       	std	Z+4, r24	; 0x04
    66e6:	95 83       	std	Z+5, r25	; 0x05
    66e8:	a6 83       	std	Z+6, r26	; 0x06
    66ea:	b7 83       	std	Z+7, r27	; 0x07
        ts->tv_sec++;
    66ec:	80 81       	ld	r24, Z
    66ee:	91 81       	ldd	r25, Z+1	; 0x01
    66f0:	a2 81       	ldd	r26, Z+2	; 0x02
    66f2:	b3 81       	ldd	r27, Z+3	; 0x03
    66f4:	01 96       	adiw	r24, 0x01	; 1
    66f6:	a1 1d       	adc	r26, r1
    66f8:	b1 1d       	adc	r27, r1
    66fa:	80 83       	st	Z, r24
    66fc:	91 83       	std	Z+1, r25	; 0x01
    66fe:	a2 83       	std	Z+2, r26	; 0x02
    6700:	b3 83       	std	Z+3, r27	; 0x03
    }
    return(errorf);
    6702:	07 c0       	rjmp	.+14     	; 0x6712 <clock_gettime+0xde>

    if (count2 < count1)
    {
///  note: counter2 < count1 implies ISR flag must be set
        if( !pendingf )
            errorf = -1;    // counter overflow and NO pending is an error!
    6704:	cf ef       	ldi	r28, 0xFF	; 255
    6706:	df ef       	ldi	r29, 0xFF	; 255
        offset = TIMER1_COUNTS_PER_TIC;           // overflow
    6708:	40 e2       	ldi	r20, 0x20	; 32
    670a:	5e e4       	ldi	r21, 0x4E	; 78
    670c:	60 e0       	ldi	r22, 0x00	; 0
    670e:	70 e0       	ldi	r23, 0x00	; 0
    6710:	c4 cf       	rjmp	.-120    	; 0x669a <clock_gettime+0x66>
    {
        ts->tv_nsec -= 1000000000L;
        ts->tv_sec++;
    }
    return(errorf);
}
    6712:	ce 01       	movw	r24, r28
    6714:	df 91       	pop	r29
    6716:	cf 91       	pop	r28
    6718:	1f 91       	pop	r17
    671a:	0f 91       	pop	r16
    671c:	08 95       	ret

0000671e <clock_task>:
void disable_timers()
{
    if(timers_configured && timers_enabled)
    {
        disable_system_task();
        timers_enabled = 0;
    671e:	80 91 12 1a 	lds	r24, 0x1A12	; 0x801a12 <__clock+0x4>
    6722:	90 91 13 1a 	lds	r25, 0x1A13	; 0x801a13 <__clock+0x5>
    6726:	a0 91 14 1a 	lds	r26, 0x1A14	; 0x801a14 <__clock+0x6>
    672a:	b0 91 15 1a 	lds	r27, 0x1A15	; 0x801a15 <__clock+0x7>
    672e:	80 5c       	subi	r24, 0xC0	; 192
    6730:	9d 4b       	sbci	r25, 0xBD	; 189
    6732:	a0 4f       	sbci	r26, 0xF0	; 240
    6734:	bf 4f       	sbci	r27, 0xFF	; 255
    6736:	80 93 12 1a 	sts	0x1A12, r24	; 0x801a12 <__clock+0x4>
    673a:	90 93 13 1a 	sts	0x1A13, r25	; 0x801a13 <__clock+0x5>
    673e:	a0 93 14 1a 	sts	0x1A14, r26	; 0x801a14 <__clock+0x6>
    6742:	b0 93 15 1a 	sts	0x1A15, r27	; 0x801a15 <__clock+0x7>
    6746:	80 91 12 1a 	lds	r24, 0x1A12	; 0x801a12 <__clock+0x4>
    674a:	90 91 13 1a 	lds	r25, 0x1A13	; 0x801a13 <__clock+0x5>
    674e:	a0 91 14 1a 	lds	r26, 0x1A14	; 0x801a14 <__clock+0x6>
    6752:	b0 91 15 1a 	lds	r27, 0x1A15	; 0x801a15 <__clock+0x7>
    6756:	81 15       	cp	r24, r1
    6758:	9a 4c       	sbci	r25, 0xCA	; 202
    675a:	aa 49       	sbci	r26, 0x9A	; 154
    675c:	bb 43       	sbci	r27, 0x3B	; 59
    675e:	dc f0       	brlt	.+54     	; 0x6796 <clock_task+0x78>
    6760:	80 91 0e 1a 	lds	r24, 0x1A0E	; 0x801a0e <__clock>
    6764:	90 91 0f 1a 	lds	r25, 0x1A0F	; 0x801a0f <__clock+0x1>
    6768:	a0 91 10 1a 	lds	r26, 0x1A10	; 0x801a10 <__clock+0x2>
    676c:	b0 91 11 1a 	lds	r27, 0x1A11	; 0x801a11 <__clock+0x3>
    6770:	01 96       	adiw	r24, 0x01	; 1
    6772:	a1 1d       	adc	r26, r1
    6774:	b1 1d       	adc	r27, r1
    6776:	80 93 0e 1a 	sts	0x1A0E, r24	; 0x801a0e <__clock>
    677a:	90 93 0f 1a 	sts	0x1A0F, r25	; 0x801a0f <__clock+0x1>
    677e:	a0 93 10 1a 	sts	0x1A10, r26	; 0x801a10 <__clock+0x2>
    6782:	b0 93 11 1a 	sts	0x1A11, r27	; 0x801a11 <__clock+0x3>
    6786:	10 92 12 1a 	sts	0x1A12, r1	; 0x801a12 <__clock+0x4>
    678a:	10 92 13 1a 	sts	0x1A13, r1	; 0x801a13 <__clock+0x5>
    678e:	10 92 14 1a 	sts	0x1A14, r1	; 0x801a14 <__clock+0x6>
    6792:	10 92 15 1a 	sts	0x1A15, r1	; 0x801a15 <__clock+0x7>
    6796:	08 95       	ret

00006798 <clock_settime.part.2>:
    6798:	fc 01       	movw	r30, r24
    679a:	84 81       	ldd	r24, Z+4	; 0x04
    679c:	95 81       	ldd	r25, Z+5	; 0x05
    679e:	a6 81       	ldd	r26, Z+6	; 0x06
    67a0:	b7 81       	ldd	r27, Z+7	; 0x07
    67a2:	80 93 12 1a 	sts	0x1A12, r24	; 0x801a12 <__clock+0x4>
    67a6:	90 93 13 1a 	sts	0x1A13, r25	; 0x801a13 <__clock+0x5>
    67aa:	a0 93 14 1a 	sts	0x1A14, r26	; 0x801a14 <__clock+0x6>
    67ae:	b0 93 15 1a 	sts	0x1A15, r27	; 0x801a15 <__clock+0x7>
    67b2:	80 81       	ld	r24, Z
    67b4:	91 81       	ldd	r25, Z+1	; 0x01
    67b6:	a2 81       	ldd	r26, Z+2	; 0x02
    67b8:	b3 81       	ldd	r27, Z+3	; 0x03
    67ba:	80 93 0e 1a 	sts	0x1A0E, r24	; 0x801a0e <__clock>
    67be:	90 93 0f 1a 	sts	0x1A0F, r25	; 0x801a0f <__clock+0x1>
    67c2:	a0 93 10 1a 	sts	0x1A10, r26	; 0x801a10 <__clock+0x2>
    67c6:	b0 93 11 1a 	sts	0x1A11, r27	; 0x801a11 <__clock+0x3>
    67ca:	80 91 12 1a 	lds	r24, 0x1A12	; 0x801a12 <__clock+0x4>
    67ce:	90 91 13 1a 	lds	r25, 0x1A13	; 0x801a13 <__clock+0x5>
    67d2:	a0 91 14 1a 	lds	r26, 0x1A14	; 0x801a14 <__clock+0x6>
    67d6:	b0 91 15 1a 	lds	r27, 0x1A15	; 0x801a15 <__clock+0x7>
    67da:	44 81       	ldd	r20, Z+4	; 0x04
    67dc:	55 81       	ldd	r21, Z+5	; 0x05
    67de:	66 81       	ldd	r22, Z+6	; 0x06
    67e0:	77 81       	ldd	r23, Z+7	; 0x07
    67e2:	48 17       	cp	r20, r24
    67e4:	59 07       	cpc	r21, r25
    67e6:	6a 07       	cpc	r22, r26
    67e8:	7b 07       	cpc	r23, r27
    67ea:	b9 f6       	brne	.-82     	; 0x679a <clock_settime.part.2+0x2>
    67ec:	80 91 0e 1a 	lds	r24, 0x1A0E	; 0x801a0e <__clock>
    67f0:	90 91 0f 1a 	lds	r25, 0x1A0F	; 0x801a0f <__clock+0x1>
    67f4:	a0 91 10 1a 	lds	r26, 0x1A10	; 0x801a10 <__clock+0x2>
    67f8:	b0 91 11 1a 	lds	r27, 0x1A11	; 0x801a11 <__clock+0x3>
    67fc:	40 81       	ld	r20, Z
    67fe:	51 81       	ldd	r21, Z+1	; 0x01
    6800:	62 81       	ldd	r22, Z+2	; 0x02
    6802:	73 81       	ldd	r23, Z+3	; 0x03
    6804:	48 17       	cp	r20, r24
    6806:	59 07       	cpc	r21, r25
    6808:	6a 07       	cpc	r22, r26
    680a:	7b 07       	cpc	r23, r27
    680c:	31 f6       	brne	.-116    	; 0x679a <clock_settime.part.2+0x2>
    680e:	80 e0       	ldi	r24, 0x00	; 0
    6810:	90 e0       	ldi	r25, 0x00	; 0
    6812:	08 95       	ret

00006814 <set_timers>:
    6814:	00 d0       	rcall	.+0      	; 0x6816 <set_timers+0x2>
    6816:	1f 92       	push	r1
    6818:	00 97       	sbiw	r24, 0x00	; 0
    681a:	79 f1       	breq	.+94     	; 0x687a <set_timers+0x66>
    681c:	e6 e1       	ldi	r30, 0x16	; 22
    681e:	fa e1       	ldi	r31, 0x1A	; 26
    6820:	4f ef       	ldi	r20, 0xFF	; 255
    6822:	5f ef       	ldi	r21, 0xFF	; 255
    6824:	20 e0       	ldi	r18, 0x00	; 0
    6826:	30 e0       	ldi	r19, 0x00	; 0
    6828:	60 81       	ld	r22, Z
    682a:	71 81       	ldd	r23, Z+1	; 0x01
    682c:	86 17       	cp	r24, r22
    682e:	97 07       	cpc	r25, r23
    6830:	79 f0       	breq	.+30     	; 0x6850 <set_timers+0x3c>
    6832:	67 2b       	or	r22, r23
    6834:	71 f4       	brne	.+28     	; 0x6852 <set_timers+0x3e>
    6836:	f9 01       	movw	r30, r18
    6838:	ee 0f       	add	r30, r30
    683a:	ff 1f       	adc	r31, r31
    683c:	e2 0f       	add	r30, r18
    683e:	f3 1f       	adc	r31, r19
    6840:	ea 5e       	subi	r30, 0xEA	; 234
    6842:	f5 4e       	sbci	r31, 0xE5	; 229
    6844:	91 83       	std	Z+1, r25	; 0x01
    6846:	80 83       	st	Z, r24
    6848:	81 e0       	ldi	r24, 0x01	; 1
    684a:	82 83       	std	Z+2, r24	; 0x02
    684c:	c9 01       	movw	r24, r18
    684e:	19 c0       	rjmp	.+50     	; 0x6882 <set_timers+0x6e>
    6850:	a9 01       	movw	r20, r18
    6852:	2f 5f       	subi	r18, 0xFF	; 255
    6854:	3f 4f       	sbci	r19, 0xFF	; 255
    6856:	33 96       	adiw	r30, 0x03	; 3
    6858:	28 30       	cpi	r18, 0x08	; 8
    685a:	31 05       	cpc	r19, r1
    685c:	29 f7       	brne	.-54     	; 0x6828 <set_timers+0x14>
    685e:	4f 3f       	cpi	r20, 0xFF	; 255
    6860:	8f ef       	ldi	r24, 0xFF	; 255
    6862:	58 07       	cpc	r21, r24
    6864:	69 f4       	brne	.+26     	; 0x6880 <set_timers+0x6c>
    6866:	84 e9       	ldi	r24, 0x94	; 148
    6868:	95 e0       	ldi	r25, 0x05	; 5
    686a:	a0 e0       	ldi	r26, 0x00	; 0
    686c:	ed b7       	in	r30, 0x3d	; 61
    686e:	fe b7       	in	r31, 0x3e	; 62
    6870:	81 83       	std	Z+1, r24	; 0x01
    6872:	92 83       	std	Z+2, r25	; 0x02
    6874:	a3 83       	std	Z+3, r26	; 0x03
    6876:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    687a:	8f ef       	ldi	r24, 0xFF	; 255
    687c:	9f ef       	ldi	r25, 0xFF	; 255
    687e:	01 c0       	rjmp	.+2      	; 0x6882 <set_timers+0x6e>
    6880:	ca 01       	movw	r24, r20
    6882:	0f 90       	pop	r0
    6884:	0f 90       	pop	r0
    6886:	0f 90       	pop	r0
    6888:	08 95       	ret

0000688a <delete_all_timers>:
    688a:	e6 e1       	ldi	r30, 0x16	; 22
    688c:	fa e1       	ldi	r31, 0x1A	; 26
    688e:	12 82       	std	Z+2, r1	; 0x02
    6890:	11 82       	std	Z+1, r1	; 0x01
    6892:	10 82       	st	Z, r1
    6894:	33 96       	adiw	r30, 0x03	; 3
    6896:	8a e1       	ldi	r24, 0x1A	; 26
    6898:	ee 32       	cpi	r30, 0x2E	; 46
    689a:	f8 07       	cpc	r31, r24
    689c:	c1 f7       	brne	.-16     	; 0x688e <delete_all_timers+0x4>
    689e:	08 95       	ret

000068a0 <subtract_timespec>:
    68a0:	0f 93       	push	r16
    68a2:	1f 93       	push	r17
    68a4:	cf 93       	push	r28
    68a6:	df 93       	push	r29
    68a8:	fc 01       	movw	r30, r24
    68aa:	84 81       	ldd	r24, Z+4	; 0x04
    68ac:	95 81       	ldd	r25, Z+5	; 0x05
    68ae:	a6 81       	ldd	r26, Z+6	; 0x06
    68b0:	b7 81       	ldd	r27, Z+7	; 0x07
    68b2:	eb 01       	movw	r28, r22
    68b4:	0c 81       	ldd	r16, Y+4	; 0x04
    68b6:	1d 81       	ldd	r17, Y+5	; 0x05
    68b8:	2e 81       	ldd	r18, Y+6	; 0x06
    68ba:	3f 81       	ldd	r19, Y+7	; 0x07
    68bc:	80 1b       	sub	r24, r16
    68be:	91 0b       	sbc	r25, r17
    68c0:	a2 0b       	sbc	r26, r18
    68c2:	b3 0b       	sbc	r27, r19
    68c4:	b7 fd       	sbrc	r27, 7
    68c6:	05 c0       	rjmp	.+10     	; 0x68d2 <subtract_timespec+0x32>
    68c8:	84 83       	std	Z+4, r24	; 0x04
    68ca:	95 83       	std	Z+5, r25	; 0x05
    68cc:	a6 83       	std	Z+6, r26	; 0x06
    68ce:	b7 83       	std	Z+7, r27	; 0x07
    68d0:	12 c0       	rjmp	.+36     	; 0x68f6 <subtract_timespec+0x56>
    68d2:	96 53       	subi	r25, 0x36	; 54
    68d4:	a5 46       	sbci	r26, 0x65	; 101
    68d6:	b4 4c       	sbci	r27, 0xC4	; 196
    68d8:	84 83       	std	Z+4, r24	; 0x04
    68da:	95 83       	std	Z+5, r25	; 0x05
    68dc:	a6 83       	std	Z+6, r26	; 0x06
    68de:	b7 83       	std	Z+7, r27	; 0x07
    68e0:	80 81       	ld	r24, Z
    68e2:	91 81       	ldd	r25, Z+1	; 0x01
    68e4:	a2 81       	ldd	r26, Z+2	; 0x02
    68e6:	b3 81       	ldd	r27, Z+3	; 0x03
    68e8:	01 97       	sbiw	r24, 0x01	; 1
    68ea:	a1 09       	sbc	r26, r1
    68ec:	b1 09       	sbc	r27, r1
    68ee:	80 83       	st	Z, r24
    68f0:	91 83       	std	Z+1, r25	; 0x01
    68f2:	a2 83       	std	Z+2, r26	; 0x02
    68f4:	b3 83       	std	Z+3, r27	; 0x03
    68f6:	80 81       	ld	r24, Z
    68f8:	91 81       	ldd	r25, Z+1	; 0x01
    68fa:	a2 81       	ldd	r26, Z+2	; 0x02
    68fc:	b3 81       	ldd	r27, Z+3	; 0x03
    68fe:	eb 01       	movw	r28, r22
    6900:	48 81       	ld	r20, Y
    6902:	59 81       	ldd	r21, Y+1	; 0x01
    6904:	6a 81       	ldd	r22, Y+2	; 0x02
    6906:	7b 81       	ldd	r23, Y+3	; 0x03
    6908:	84 1b       	sub	r24, r20
    690a:	95 0b       	sbc	r25, r21
    690c:	a6 0b       	sbc	r26, r22
    690e:	b7 0b       	sbc	r27, r23
    6910:	80 83       	st	Z, r24
    6912:	91 83       	std	Z+1, r25	; 0x01
    6914:	a2 83       	std	Z+2, r26	; 0x02
    6916:	b3 83       	std	Z+3, r27	; 0x03
    6918:	df 91       	pop	r29
    691a:	cf 91       	pop	r28
    691c:	1f 91       	pop	r17
    691e:	0f 91       	pop	r16
    6920:	08 95       	ret

00006922 <ts_to_str>:
    6922:	ad b7       	in	r26, 0x3d	; 61
    6924:	be b7       	in	r27, 0x3e	; 62
    6926:	1f 97       	sbiw	r26, 0x0f	; 15
    6928:	0f b6       	in	r0, 0x3f	; 63
    692a:	f8 94       	cli
    692c:	be bf       	out	0x3e, r27	; 62
    692e:	0f be       	out	0x3f, r0	; 63
    6930:	ad bf       	out	0x3d, r26	; 61
    6932:	fc 01       	movw	r30, r24
    6934:	44 81       	ldd	r20, Z+4	; 0x04
    6936:	55 81       	ldd	r21, Z+5	; 0x05
    6938:	66 81       	ldd	r22, Z+6	; 0x06
    693a:	77 81       	ldd	r23, Z+7	; 0x07
    693c:	ed b7       	in	r30, 0x3d	; 61
    693e:	fe b7       	in	r31, 0x3e	; 62
    6940:	44 87       	std	Z+12, r20	; 0x0c
    6942:	55 87       	std	Z+13, r21	; 0x0d
    6944:	66 87       	std	Z+14, r22	; 0x0e
    6946:	77 87       	std	Z+15, r23	; 0x0f
    6948:	fc 01       	movw	r30, r24
    694a:	80 81       	ld	r24, Z
    694c:	91 81       	ldd	r25, Z+1	; 0x01
    694e:	a2 81       	ldd	r26, Z+2	; 0x02
    6950:	b3 81       	ldd	r27, Z+3	; 0x03
    6952:	ed b7       	in	r30, 0x3d	; 61
    6954:	fe b7       	in	r31, 0x3e	; 62
    6956:	80 87       	std	Z+8, r24	; 0x08
    6958:	91 87       	std	Z+9, r25	; 0x09
    695a:	a2 87       	std	Z+10, r26	; 0x0a
    695c:	b3 87       	std	Z+11, r27	; 0x0b
    695e:	8a e8       	ldi	r24, 0x8A	; 138
    6960:	95 e0       	ldi	r25, 0x05	; 5
    6962:	a0 e0       	ldi	r26, 0x00	; 0
    6964:	85 83       	std	Z+5, r24	; 0x05
    6966:	96 83       	std	Z+6, r25	; 0x06
    6968:	a7 83       	std	Z+7, r26	; 0x07
    696a:	8f e1       	ldi	r24, 0x1F	; 31
    696c:	90 e0       	ldi	r25, 0x00	; 0
    696e:	94 83       	std	Z+4, r25	; 0x04
    6970:	83 83       	std	Z+3, r24	; 0x03
    6972:	80 e5       	ldi	r24, 0x50	; 80
    6974:	97 e1       	ldi	r25, 0x17	; 23
    6976:	92 83       	std	Z+2, r25	; 0x02
    6978:	81 83       	std	Z+1, r24	; 0x01
    697a:	0e 94 7d 45 	call	0x8afa	; 0x8afa <snprintf_P>
    697e:	80 e5       	ldi	r24, 0x50	; 80
    6980:	97 e1       	ldi	r25, 0x17	; 23
    6982:	ad b7       	in	r26, 0x3d	; 61
    6984:	be b7       	in	r27, 0x3e	; 62
    6986:	1f 96       	adiw	r26, 0x0f	; 15
    6988:	0f b6       	in	r0, 0x3f	; 63
    698a:	f8 94       	cli
    698c:	be bf       	out	0x3e, r27	; 62
    698e:	0f be       	out	0x3f, r0	; 63
    6990:	ad bf       	out	0x3d, r26	; 61
    6992:	08 95       	ret

00006994 <clock_elapsed_begin>:
    6994:	68 e4       	ldi	r22, 0x48	; 72
    6996:	77 e1       	ldi	r23, 0x17	; 23
    6998:	80 e0       	ldi	r24, 0x00	; 0
    699a:	90 e0       	ldi	r25, 0x00	; 0
    699c:	4b ce       	rjmp	.-874    	; 0x6634 <clock_gettime>
    699e:	08 95       	ret

000069a0 <clock_elapsed_end>:
    69a0:	af e0       	ldi	r26, 0x0F	; 15
    69a2:	b0 e0       	ldi	r27, 0x00	; 0
    69a4:	e6 ed       	ldi	r30, 0xD6	; 214
    69a6:	f4 e3       	ldi	r31, 0x34	; 52
    69a8:	0c 94 ec df 	jmp	0x1bfd8	; 0x1bfd8 <__prologue_saves__+0x1c>
    69ac:	8c 01       	movw	r16, r24
    69ae:	be 01       	movw	r22, r28
    69b0:	68 5f       	subi	r22, 0xF8	; 248
    69b2:	7f 4f       	sbci	r23, 0xFF	; 255
    69b4:	80 e0       	ldi	r24, 0x00	; 0
    69b6:	90 e0       	ldi	r25, 0x00	; 0
    69b8:	3d de       	rcall	.-902    	; 0x6634 <clock_gettime>
    69ba:	68 e4       	ldi	r22, 0x48	; 72
    69bc:	77 e1       	ldi	r23, 0x17	; 23
    69be:	ce 01       	movw	r24, r28
    69c0:	08 96       	adiw	r24, 0x08	; 8
    69c2:	6e df       	rcall	.-292    	; 0x68a0 <subtract_timespec>
    69c4:	01 15       	cp	r16, r1
    69c6:	11 05       	cpc	r17, r1
    69c8:	b1 f0       	breq	.+44     	; 0x69f6 <clock_elapsed_end+0x56>
    69ca:	f8 01       	movw	r30, r16
    69cc:	80 81       	ld	r24, Z
    69ce:	88 23       	and	r24, r24
    69d0:	91 f0       	breq	.+36     	; 0x69f6 <clock_elapsed_end+0x56>
    69d2:	ce 01       	movw	r24, r28
    69d4:	08 96       	adiw	r24, 0x08	; 8
    69d6:	a5 df       	rcall	.-182    	; 0x6922 <ts_to_str>
    69d8:	ed b7       	in	r30, 0x3d	; 61
    69da:	fe b7       	in	r31, 0x3e	; 62
    69dc:	97 83       	std	Z+7, r25	; 0x07
    69de:	86 83       	std	Z+6, r24	; 0x06
    69e0:	15 83       	std	Z+5, r17	; 0x05
    69e2:	04 83       	std	Z+4, r16	; 0x04
    69e4:	8c e7       	ldi	r24, 0x7C	; 124
    69e6:	95 e0       	ldi	r25, 0x05	; 5
    69e8:	a0 e0       	ldi	r26, 0x00	; 0
    69ea:	81 83       	std	Z+1, r24	; 0x01
    69ec:	92 83       	std	Z+2, r25	; 0x02
    69ee:	a3 83       	std	Z+3, r26	; 0x03
    69f0:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    69f4:	0f c0       	rjmp	.+30     	; 0x6a14 <clock_elapsed_end+0x74>
    69f6:	ce 01       	movw	r24, r28
    69f8:	08 96       	adiw	r24, 0x08	; 8
    69fa:	93 df       	rcall	.-218    	; 0x6922 <ts_to_str>
    69fc:	ed b7       	in	r30, 0x3d	; 61
    69fe:	fe b7       	in	r31, 0x3e	; 62
    6a00:	95 83       	std	Z+5, r25	; 0x05
    6a02:	84 83       	std	Z+4, r24	; 0x04
    6a04:	81 e7       	ldi	r24, 0x71	; 113
    6a06:	95 e0       	ldi	r25, 0x05	; 5
    6a08:	a0 e0       	ldi	r26, 0x00	; 0
    6a0a:	81 83       	std	Z+1, r24	; 0x01
    6a0c:	92 83       	std	Z+2, r25	; 0x02
    6a0e:	a3 83       	std	Z+3, r26	; 0x03
    6a10:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    6a14:	2f 96       	adiw	r28, 0x0f	; 15
    6a16:	e4 e0       	ldi	r30, 0x04	; 4
    6a18:	0c 94 08 e0 	jmp	0x1c010	; 0x1c010 <__epilogue_restores__+0x1c>

00006a1c <clock_clear>:
    6a1c:	a8 e0       	ldi	r26, 0x08	; 8
    6a1e:	b0 e0       	ldi	r27, 0x00	; 0
    6a20:	e4 e1       	ldi	r30, 0x14	; 20
    6a22:	f5 e3       	ldi	r31, 0x35	; 53
    6a24:	0c 94 ee df 	jmp	0x1bfdc	; 0x1bfdc <__prologue_saves__+0x20>
    6a28:	1d 82       	std	Y+5, r1	; 0x05
    6a2a:	1e 82       	std	Y+6, r1	; 0x06
    6a2c:	1f 82       	std	Y+7, r1	; 0x07
    6a2e:	18 86       	std	Y+8, r1	; 0x08
    6a30:	19 82       	std	Y+1, r1	; 0x01
    6a32:	1a 82       	std	Y+2, r1	; 0x02
    6a34:	1b 82       	std	Y+3, r1	; 0x03
    6a36:	1c 82       	std	Y+4, r1	; 0x04
    6a38:	ce 01       	movw	r24, r28
    6a3a:	01 96       	adiw	r24, 0x01	; 1
    6a3c:	ad de       	rcall	.-678    	; 0x6798 <clock_settime.part.2>
    6a3e:	ee e2       	ldi	r30, 0x2E	; 46
    6a40:	fa e1       	ldi	r31, 0x1A	; 26
    6a42:	11 82       	std	Z+1, r1	; 0x01
    6a44:	10 82       	st	Z, r1
    6a46:	13 82       	std	Z+3, r1	; 0x03
    6a48:	12 82       	std	Z+2, r1	; 0x02
    6a4a:	28 96       	adiw	r28, 0x08	; 8
    6a4c:	e2 e0       	ldi	r30, 0x02	; 2
    6a4e:	0c 94 0a e0 	jmp	0x1c014	; 0x1c014 <__epilogue_restores__+0x20>

00006a52 <enable_timers>:
///
/// @return  void
MEMSPACE
void enable_timers()
{
    if(timers_configured && !timers_enabled)
    6a52:	80 91 70 17 	lds	r24, 0x1770	; 0x801770 <timers_configured>
    6a56:	90 91 71 17 	lds	r25, 0x1771	; 0x801771 <timers_configured+0x1>
    6a5a:	89 2b       	or	r24, r25
    6a5c:	69 f0       	breq	.+26     	; 0x6a78 <enable_timers+0x26>
    6a5e:	80 91 72 17 	lds	r24, 0x1772	; 0x801772 <timers_enabled>
    6a62:	90 91 73 17 	lds	r25, 0x1773	; 0x801773 <timers_enabled+0x1>
    6a66:	89 2b       	or	r24, r25
    {
        enable_system_task();
    6a68:	39 f4       	brne	.+14     	; 0x6a78 <enable_timers+0x26>
        timers_enabled = 1;
    6a6a:	a8 dd       	rcall	.-1200   	; 0x65bc <enable_system_task>
    6a6c:	81 e0       	ldi	r24, 0x01	; 1
    6a6e:	90 e0       	ldi	r25, 0x00	; 0
    6a70:	90 93 73 17 	sts	0x1773, r25	; 0x801773 <timers_enabled+0x1>
    6a74:	80 93 72 17 	sts	0x1772, r24	; 0x801772 <timers_enabled>
    6a78:	08 95       	ret

00006a7a <execute_timers>:
/// @brief  Execute all user timers at SYSTEM_HZ rate.
///  Called by system task
///
/// @return  void
void execute_timers()
{
    6a7a:	cf 93       	push	r28
    6a7c:	df 93       	push	r29
    6a7e:	c6 e1       	ldi	r28, 0x16	; 22
    6a80:	da e1       	ldi	r29, 0x1A	; 26
    int i;

    for(i=0; i < MAX_TIMER_CNT; i++)
    {
        if(timer_irq[i].timer && timer_irq[i].user_timer_handler != NULL)
    6a82:	8a 81       	ldd	r24, Y+2	; 0x02
    6a84:	88 23       	and	r24, r24
    6a86:	29 f0       	breq	.+10     	; 0x6a92 <execute_timers+0x18>
    6a88:	e8 81       	ld	r30, Y
    6a8a:	f9 81       	ldd	r31, Y+1	; 0x01
    6a8c:	30 97       	sbiw	r30, 0x00	; 0
    6a8e:	09 f0       	breq	.+2      	; 0x6a92 <execute_timers+0x18>
            (*timer_irq[i].user_timer_handler)();
    6a90:	09 95       	icall
    6a92:	23 96       	adiw	r28, 0x03	; 3
/// @return  void
void execute_timers()
{
    int i;

    for(i=0; i < MAX_TIMER_CNT; i++)
    6a94:	8a e1       	ldi	r24, 0x1A	; 26
    6a96:	ce 32       	cpi	r28, 0x2E	; 46
    6a98:	d8 07       	cpc	r29, r24
    6a9a:	99 f7       	brne	.-26     	; 0x6a82 <execute_timers+0x8>
    {
        if(timer_irq[i].timer && timer_irq[i].user_timer_handler != NULL)
            (*timer_irq[i].user_timer_handler)();
    }
}
    6a9c:	df 91       	pop	r29
    6a9e:	cf 91       	pop	r28
    6aa0:	08 95       	ret

00006aa2 <init_timers>:
/// @see: timer_hal.c for hardware dependent interface
//
/// @return  void
MEMSPACE
void init_timers()
{
    6aa2:	00 d0       	rcall	.+0      	; 0x6aa4 <init_timers+0x2>
    6aa4:	1f 92       	push	r1
    printf("Timers init called\n");
    6aa6:	8d e5       	ldi	r24, 0x5D	; 93
    6aa8:	95 e0       	ldi	r25, 0x05	; 5
    6aaa:	a0 e0       	ldi	r26, 0x00	; 0
    6aac:	ed b7       	in	r30, 0x3d	; 61
    6aae:	fe b7       	in	r31, 0x3e	; 62
    6ab0:	81 83       	std	Z+1, r24	; 0x01
    6ab2:	92 83       	std	Z+2, r25	; 0x02
    6ab4:	a3 83       	std	Z+3, r26	; 0x03
    6ab6:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>

    if(!timers_configured)
    6aba:	80 91 70 17 	lds	r24, 0x1770	; 0x801770 <timers_configured>
    6abe:	90 91 71 17 	lds	r25, 0x1771	; 0x801771 <timers_configured+0x1>
    6ac2:	89 2b       	or	r24, r25
    {
        install_timers_isr();
    6ac4:	a9 f4       	brne	.+42     	; 0x6af0 <init_timers+0x4e>
        timers_configured = 1;
    6ac6:	7c dd       	rcall	.-1288   	; 0x65c0 <install_timers_isr>
    6ac8:	81 e0       	ldi	r24, 0x01	; 1
    6aca:	90 e0       	ldi	r25, 0x00	; 0
    6acc:	90 93 71 17 	sts	0x1771, r25	; 0x801771 <timers_configured+0x1>
    6ad0:	80 93 70 17 	sts	0x1770, r24	; 0x801770 <timers_configured>
        timers_enabled = 0;
    6ad4:	10 92 73 17 	sts	0x1773, r1	; 0x801773 <timers_enabled+0x1>
    6ad8:	10 92 72 17 	sts	0x1772, r1	; 0x801772 <timers_enabled>
        printf("Timers configured\n");
    6adc:	8a e4       	ldi	r24, 0x4A	; 74
    6ade:	95 e0       	ldi	r25, 0x05	; 5
    6ae0:	a0 e0       	ldi	r26, 0x00	; 0
    6ae2:	ed b7       	in	r30, 0x3d	; 61
    6ae4:	fe b7       	in	r31, 0x3e	; 62
    6ae6:	81 83       	std	Z+1, r24	; 0x01
    6ae8:	92 83       	std	Z+2, r25	; 0x02
    }

    delete_all_timers();
    6aea:	a3 83       	std	Z+3, r26	; 0x03

    clock_clear();
    6aec:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    printf("Clock Init\n");
    6af0:	cc de       	rcall	.-616    	; 0x688a <delete_all_timers>
    6af2:	94 df       	rcall	.-216    	; 0x6a1c <clock_clear>
    6af4:	8e e3       	ldi	r24, 0x3E	; 62
    6af6:	95 e0       	ldi	r25, 0x05	; 5
    6af8:	a0 e0       	ldi	r26, 0x00	; 0
    6afa:	ed b7       	in	r30, 0x3d	; 61
    6afc:	fe b7       	in	r31, 0x3e	; 62
    6afe:	81 83       	std	Z+1, r24	; 0x01
    6b00:	92 83       	std	Z+2, r25	; 0x02
    6b02:	a3 83       	std	Z+3, r26	; 0x03

///  See time.c
    if(set_timers(clock_task,1) == -1)
    6b04:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    6b08:	61 e0       	ldi	r22, 0x01	; 1
    6b0a:	70 e0       	ldi	r23, 0x00	; 0
    6b0c:	8f e8       	ldi	r24, 0x8F	; 143
    6b0e:	93 e3       	ldi	r25, 0x33	; 51
    6b10:	81 de       	rcall	.-766    	; 0x6814 <set_timers>
        printf("Clock task init failed\n");
    6b12:	01 96       	adiw	r24, 0x01	; 1
    6b14:	51 f4       	brne	.+20     	; 0x6b2a <init_timers+0x88>
    6b16:	86 e2       	ldi	r24, 0x26	; 38
    6b18:	95 e0       	ldi	r25, 0x05	; 5
    6b1a:	a0 e0       	ldi	r26, 0x00	; 0
    6b1c:	ed b7       	in	r30, 0x3d	; 61
    6b1e:	fe b7       	in	r31, 0x3e	; 62
    6b20:	81 83       	std	Z+1, r24	; 0x01
    6b22:	92 83       	std	Z+2, r25	; 0x02
    6b24:	a3 83       	std	Z+3, r26	; 0x03
    printf("Clock Installed\n");
    6b26:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    6b2a:	85 e1       	ldi	r24, 0x15	; 21
    6b2c:	95 e0       	ldi	r25, 0x05	; 5
    6b2e:	a0 e0       	ldi	r26, 0x00	; 0
    6b30:	ed b7       	in	r30, 0x3d	; 61
    6b32:	fe b7       	in	r31, 0x3e	; 62
    6b34:	81 83       	std	Z+1, r24	; 0x01
    6b36:	92 83       	std	Z+2, r25	; 0x02

    enable_timers();
    6b38:	a3 83       	std	Z+3, r26	; 0x03
    6b3a:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>

    printf("Timers enabled\n");
    6b3e:	89 df       	rcall	.-238    	; 0x6a52 <enable_timers>
    6b40:	85 e0       	ldi	r24, 0x05	; 5
    6b42:	95 e0       	ldi	r25, 0x05	; 5
    6b44:	a0 e0       	ldi	r26, 0x00	; 0
    6b46:	ed b7       	in	r30, 0x3d	; 61
    6b48:	fe b7       	in	r31, 0x3e	; 62
    6b4a:	81 83       	std	Z+1, r24	; 0x01
    6b4c:	92 83       	std	Z+2, r25	; 0x02
    6b4e:	a3 83       	std	Z+3, r26	; 0x03
}
    6b50:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    6b54:	0f 90       	pop	r0
    6b56:	0f 90       	pop	r0
    6b58:	0f 90       	pop	r0
    6b5a:	08 95       	ret

00006b5c <clock_getres>:
/// @return 0 on success.
/// @return -1 on error.
MEMSPACE
int clock_getres(clockid_t clk_id  __attribute__((unused)), struct timespec *res)
{
    if(clk_id)
    6b5c:	89 2b       	or	r24, r25
    6b5e:	81 f4       	brne	.+32     	; 0x6b80 <clock_getres+0x24>
        return(-1);
    res->tv_sec = 0;
    6b60:	fb 01       	movw	r30, r22
    6b62:	10 82       	st	Z, r1
    6b64:	11 82       	std	Z+1, r1	; 0x01
    6b66:	12 82       	std	Z+2, r1	; 0x02
    6b68:	13 82       	std	Z+3, r1	; 0x03
    res->tv_nsec = SYSTEM_TASK_TIC_NS;
    6b6a:	80 e4       	ldi	r24, 0x40	; 64
    6b6c:	92 e4       	ldi	r25, 0x42	; 66
    6b6e:	af e0       	ldi	r26, 0x0F	; 15
    6b70:	b0 e0       	ldi	r27, 0x00	; 0
    6b72:	84 83       	std	Z+4, r24	; 0x04
    6b74:	95 83       	std	Z+5, r25	; 0x05
    6b76:	a6 83       	std	Z+6, r26	; 0x06
    6b78:	b7 83       	std	Z+7, r27	; 0x07
    return(0);
    6b7a:	80 e0       	ldi	r24, 0x00	; 0
    6b7c:	90 e0       	ldi	r25, 0x00	; 0
    6b7e:	08 95       	ret
/// @return -1 on error.
MEMSPACE
int clock_getres(clockid_t clk_id  __attribute__((unused)), struct timespec *res)
{
    if(clk_id)
        return(-1);
    6b80:	8f ef       	ldi	r24, 0xFF	; 255
    6b82:	9f ef       	ldi	r25, 0xFF	; 255
    res->tv_sec = 0;
    res->tv_nsec = SYSTEM_TASK_TIC_NS;
    return(0);
}
    6b84:	08 95       	ret

00006b86 <clock_settime>:
///
/// @return 0.
MEMSPACE
int clock_settime(clockid_t clk_id  __attribute__((unused)), const struct timespec *ts)
{
    if(clk_id)
    6b86:	89 2b       	or	r24, r25
    6b88:	19 f4       	brne	.+6      	; 0x6b90 <clock_settime+0xa>
    6b8a:	cb 01       	movw	r24, r22
    6b8c:	05 ce       	rjmp	.-1014   	; 0x6798 <clock_settime.part.2>
    6b8e:	08 95       	ret
        return(-1);
    6b90:	8f ef       	ldi	r24, 0xFF	; 255
    6b92:	9f ef       	ldi	r25, 0xFF	; 255
            continue;
        break;
    }

    return(0);
}
    6b94:	08 95       	ret

00006b96 <IS_Leap>:
void print_dst_gmt()
{
    printf("DST START       GMT: %s\n", ctime_gm(&dst.start));
    printf("DST END         GMT: %s\n", ctime_gm(&dst.end));

}
    6b96:	9c 01       	movw	r18, r24
    6b98:	83 70       	andi	r24, 0x03	; 3
    6b9a:	99 27       	eor	r25, r25
    6b9c:	00 97       	sbiw	r24, 0x00	; 0
    6b9e:	69 f4       	brne	.+26     	; 0x6bba <IS_Leap+0x24>
    6ba0:	2c 36       	cpi	r18, 0x6C	; 108
    6ba2:	47 e0       	ldi	r20, 0x07	; 7
    6ba4:	34 07       	cpc	r19, r20
    6ba6:	59 f0       	breq	.+22     	; 0x6bbe <IS_Leap+0x28>
    6ba8:	51 e0       	ldi	r21, 0x01	; 1
    6baa:	40 e0       	ldi	r20, 0x00	; 0
    6bac:	24 33       	cpi	r18, 0x34	; 52
    6bae:	38 40       	sbci	r19, 0x08	; 8
    6bb0:	09 f4       	brne	.+2      	; 0x6bb4 <IS_Leap+0x1e>
    6bb2:	50 e0       	ldi	r21, 0x00	; 0
    6bb4:	85 2f       	mov	r24, r21
    6bb6:	94 2f       	mov	r25, r20
    6bb8:	08 95       	ret
    6bba:	80 e0       	ldi	r24, 0x00	; 0
    6bbc:	90 e0       	ldi	r25, 0x00	; 0
    6bbe:	08 95       	ret

00006bc0 <tm_mon_to_ascii>:
    6bc0:	8c 30       	cpi	r24, 0x0C	; 12
    6bc2:	91 05       	cpc	r25, r1
    6bc4:	40 f4       	brcc	.+16     	; 0x6bd6 <tm_mon_to_ascii+0x16>
    6bc6:	88 0f       	add	r24, r24
    6bc8:	99 1f       	adc	r25, r25
    6bca:	fc 01       	movw	r30, r24
    6bcc:	e8 5e       	subi	r30, 0xE8	; 232
    6bce:	fe 4f       	sbci	r31, 0xFE	; 254
    6bd0:	80 81       	ld	r24, Z
    6bd2:	91 81       	ldd	r25, Z+1	; 0x01
    6bd4:	08 95       	ret
    6bd6:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__Month+0x18>
    6bda:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <__Month+0x19>
    6bde:	08 95       	ret

00006be0 <Days_Per_Month>:
    6be0:	cf 93       	push	r28
    6be2:	df 93       	push	r29
    6be4:	8c 30       	cpi	r24, 0x0C	; 12
    6be6:	91 05       	cpc	r25, r1
    6be8:	24 f0       	brlt	.+8      	; 0x6bf2 <Days_Per_Month+0x12>
    6bea:	6f 5f       	subi	r22, 0xFF	; 255
    6bec:	7f 4f       	sbci	r23, 0xFF	; 255
    6bee:	0c 97       	sbiw	r24, 0x0c	; 12
    6bf0:	f9 cf       	rjmp	.-14     	; 0x6be4 <Days_Per_Month+0x4>
    6bf2:	97 ff       	sbrs	r25, 7
    6bf4:	04 c0       	rjmp	.+8      	; 0x6bfe <Days_Per_Month+0x1e>
    6bf6:	61 50       	subi	r22, 0x01	; 1
    6bf8:	71 09       	sbc	r23, r1
    6bfa:	0c 96       	adiw	r24, 0x0c	; 12
    6bfc:	fa cf       	rjmp	.-12     	; 0x6bf2 <Days_Per_Month+0x12>
    6bfe:	fc 01       	movw	r30, r24
    6c00:	ee 0f       	add	r30, r30
    6c02:	ff 1f       	adc	r31, r31
    6c04:	e6 5a       	subi	r30, 0xA6	; 166
    6c06:	fc 4f       	sbci	r31, 0xFC	; 252
    6c08:	c0 81       	ld	r28, Z
    6c0a:	d1 81       	ldd	r29, Z+1	; 0x01
    6c0c:	01 97       	sbiw	r24, 0x01	; 1
    6c0e:	29 f4       	brne	.+10     	; 0x6c1a <Days_Per_Month+0x3a>
    6c10:	cb 01       	movw	r24, r22
    6c12:	c1 df       	rcall	.-126    	; 0x6b96 <IS_Leap>
    6c14:	89 2b       	or	r24, r25
    6c16:	09 f0       	breq	.+2      	; 0x6c1a <Days_Per_Month+0x3a>
    6c18:	21 96       	adiw	r28, 0x01	; 1
    6c1a:	ce 01       	movw	r24, r28
    6c1c:	df 91       	pop	r29
    6c1e:	cf 91       	pop	r28
    6c20:	08 95       	ret

00006c22 <time_to_tm>:
    6c22:	a0 e0       	ldi	r26, 0x00	; 0
    6c24:	b0 e0       	ldi	r27, 0x00	; 0
    6c26:	e7 e1       	ldi	r30, 0x17	; 23
    6c28:	f6 e3       	ldi	r31, 0x36	; 54
    6c2a:	0c 94 e0 df 	jmp	0x1bfc0	; 0x1bfc0 <__prologue_saves__+0x4>
    6c2e:	e8 01       	movw	r28, r16
    6c30:	e6 e1       	ldi	r30, 0x16	; 22
    6c32:	d8 01       	movw	r26, r16
    6c34:	1d 92       	st	X+, r1
    6c36:	ea 95       	dec	r30
    6c38:	e9 f7       	brne	.-6      	; 0x6c34 <time_to_tm+0x12>
    6c3a:	61 15       	cp	r22, r1
    6c3c:	bd e5       	ldi	r27, 0x5D	; 93
    6c3e:	7b 07       	cpc	r23, r27
    6c40:	bd ef       	ldi	r27, 0xFD	; 253
    6c42:	8b 07       	cpc	r24, r27
    6c44:	bf ef       	ldi	r27, 0xFF	; 255
    6c46:	9b 07       	cpc	r25, r27
    6c48:	08 f0       	brcs	.+2      	; 0x6c4c <time_to_tm+0x2a>
    6c4a:	c0 c0       	rjmp	.+384    	; 0x6dcc <time_to_tm+0x1aa>
    6c4c:	6b 01       	movw	r12, r22
    6c4e:	7c 01       	movw	r14, r24
    6c50:	c2 1a       	sub	r12, r18
    6c52:	d3 0a       	sbc	r13, r19
    6c54:	e4 0a       	sbc	r14, r20
    6c56:	f5 0a       	sbc	r15, r21
    6c58:	46 01       	movw	r8, r12
    6c5a:	57 01       	movw	r10, r14
    6c5c:	e0 e8       	ldi	r30, 0x80	; 128
    6c5e:	ce 16       	cp	r12, r30
    6c60:	ee ea       	ldi	r30, 0xAE	; 174
    6c62:	de 06       	cpc	r13, r30
    6c64:	ee ef       	ldi	r30, 0xFE	; 254
    6c66:	ee 06       	cpc	r14, r30
    6c68:	ef ef       	ldi	r30, 0xFF	; 255
    6c6a:	fe 06       	cpc	r15, r30
    6c6c:	50 f0       	brcs	.+20     	; 0x6c82 <time_to_tm+0x60>
    6c6e:	80 e8       	ldi	r24, 0x80	; 128
    6c70:	88 0e       	add	r8, r24
    6c72:	81 e5       	ldi	r24, 0x51	; 81
    6c74:	98 1e       	adc	r9, r24
    6c76:	81 e0       	ldi	r24, 0x01	; 1
    6c78:	a8 1e       	adc	r10, r24
    6c7a:	b1 1c       	adc	r11, r1
    6c7c:	01 e0       	ldi	r16, 0x01	; 1
    6c7e:	10 e0       	ldi	r17, 0x00	; 0
    6c80:	02 c0       	rjmp	.+4      	; 0x6c86 <time_to_tm+0x64>
    6c82:	00 e0       	ldi	r16, 0x00	; 0
    6c84:	10 e0       	ldi	r17, 0x00	; 0
    6c86:	8c e3       	ldi	r24, 0x3C	; 60
    6c88:	48 2e       	mov	r4, r24
    6c8a:	51 2c       	mov	r5, r1
    6c8c:	61 2c       	mov	r6, r1
    6c8e:	71 2c       	mov	r7, r1
    6c90:	c5 01       	movw	r24, r10
    6c92:	b4 01       	movw	r22, r8
    6c94:	a3 01       	movw	r20, r6
    6c96:	92 01       	movw	r18, r4
    6c98:	0e 94 71 df 	call	0x1bee2	; 0x1bee2 <__udivmodsi4>
    6c9c:	79 83       	std	Y+1, r23	; 0x01
    6c9e:	68 83       	st	Y, r22
    6ca0:	ca 01       	movw	r24, r20
    6ca2:	b9 01       	movw	r22, r18
    6ca4:	a3 01       	movw	r20, r6
    6ca6:	92 01       	movw	r18, r4
    6ca8:	0e 94 71 df 	call	0x1bee2	; 0x1bee2 <__udivmodsi4>
    6cac:	7b 83       	std	Y+3, r23	; 0x03
    6cae:	6a 83       	std	Y+2, r22	; 0x02
    6cb0:	c5 01       	movw	r24, r10
    6cb2:	b4 01       	movw	r22, r8
    6cb4:	20 e1       	ldi	r18, 0x10	; 16
    6cb6:	3e e0       	ldi	r19, 0x0E	; 14
    6cb8:	40 e0       	ldi	r20, 0x00	; 0
    6cba:	50 e0       	ldi	r21, 0x00	; 0
    6cbc:	0e 94 71 df 	call	0x1bee2	; 0x1bee2 <__udivmodsi4>
    6cc0:	ca 01       	movw	r24, r20
    6cc2:	b9 01       	movw	r22, r18
    6cc4:	28 e1       	ldi	r18, 0x18	; 24
    6cc6:	30 e0       	ldi	r19, 0x00	; 0
    6cc8:	40 e0       	ldi	r20, 0x00	; 0
    6cca:	50 e0       	ldi	r21, 0x00	; 0
    6ccc:	0e 94 71 df 	call	0x1bee2	; 0x1bee2 <__udivmodsi4>
    6cd0:	7d 83       	std	Y+5, r23	; 0x05
    6cd2:	6c 83       	std	Y+4, r22	; 0x04
    6cd4:	01 15       	cp	r16, r1
    6cd6:	11 05       	cpc	r17, r1
    6cd8:	89 f0       	breq	.+34     	; 0x6cfc <time_to_tm+0xda>
    6cda:	85 e4       	ldi	r24, 0x45	; 69
    6cdc:	90 e0       	ldi	r25, 0x00	; 0
    6cde:	9b 87       	std	Y+11, r25	; 0x0b
    6ce0:	8a 87       	std	Y+10, r24	; 0x0a
    6ce2:	8b e0       	ldi	r24, 0x0B	; 11
    6ce4:	90 e0       	ldi	r25, 0x00	; 0
    6ce6:	99 87       	std	Y+9, r25	; 0x09
    6ce8:	88 87       	std	Y+8, r24	; 0x08
    6cea:	8f e1       	ldi	r24, 0x1F	; 31
    6cec:	90 e0       	ldi	r25, 0x00	; 0
    6cee:	9f 83       	std	Y+7, r25	; 0x07
    6cf0:	8e 83       	std	Y+6, r24	; 0x06
    6cf2:	83 e0       	ldi	r24, 0x03	; 3
    6cf4:	90 e0       	ldi	r25, 0x00	; 0
    6cf6:	9d 87       	std	Y+13, r25	; 0x0d
    6cf8:	8c 87       	std	Y+12, r24	; 0x0c
    6cfa:	65 c0       	rjmp	.+202    	; 0x6dc6 <time_to_tm+0x1a4>
    6cfc:	c5 01       	movw	r24, r10
    6cfe:	b4 01       	movw	r22, r8
    6d00:	20 e8       	ldi	r18, 0x80	; 128
    6d02:	31 e5       	ldi	r19, 0x51	; 81
    6d04:	41 e0       	ldi	r20, 0x01	; 1
    6d06:	50 e0       	ldi	r21, 0x00	; 0
    6d08:	0e 94 71 df 	call	0x1bee2	; 0x1bee2 <__udivmodsi4>
    6d0c:	49 01       	movw	r8, r18
    6d0e:	5a 01       	movw	r10, r20
    6d10:	ca 01       	movw	r24, r20
    6d12:	b9 01       	movw	r22, r18
    6d14:	6c 5f       	subi	r22, 0xFC	; 252
    6d16:	7f 4f       	sbci	r23, 0xFF	; 255
    6d18:	8f 4f       	sbci	r24, 0xFF	; 255
    6d1a:	9f 4f       	sbci	r25, 0xFF	; 255
    6d1c:	27 e0       	ldi	r18, 0x07	; 7
    6d1e:	30 e0       	ldi	r19, 0x00	; 0
    6d20:	40 e0       	ldi	r20, 0x00	; 0
    6d22:	50 e0       	ldi	r21, 0x00	; 0
    6d24:	0e 94 93 df 	call	0x1bf26	; 0x1bf26 <__divmodsi4>
    6d28:	7d 87       	std	Y+13, r23	; 0x0d
    6d2a:	6c 87       	std	Y+12, r22	; 0x0c
    6d2c:	02 eb       	ldi	r16, 0xB2	; 178
    6d2e:	17 e0       	ldi	r17, 0x07	; 7
    6d30:	c8 01       	movw	r24, r16
    6d32:	31 df       	rcall	.-414    	; 0x6b96 <IS_Leap>
    6d34:	00 97       	sbiw	r24, 0x00	; 0
    6d36:	19 f4       	brne	.+6      	; 0x6d3e <time_to_tm+0x11c>
    6d38:	4d e6       	ldi	r20, 0x6D	; 109
    6d3a:	51 e0       	ldi	r21, 0x01	; 1
    6d3c:	02 c0       	rjmp	.+4      	; 0x6d42 <time_to_tm+0x120>
    6d3e:	4e e6       	ldi	r20, 0x6E	; 110
    6d40:	51 e0       	ldi	r21, 0x01	; 1
    6d42:	05 2e       	mov	r0, r21
    6d44:	00 0c       	add	r0, r0
    6d46:	66 0b       	sbc	r22, r22
    6d48:	77 0b       	sbc	r23, r23
    6d4a:	84 16       	cp	r8, r20
    6d4c:	95 06       	cpc	r9, r21
    6d4e:	a6 06       	cpc	r10, r22
    6d50:	b7 06       	cpc	r11, r23
    6d52:	3c f0       	brlt	.+14     	; 0x6d62 <time_to_tm+0x140>
    6d54:	0f 5f       	subi	r16, 0xFF	; 255
    6d56:	1f 4f       	sbci	r17, 0xFF	; 255
    6d58:	84 1a       	sub	r8, r20
    6d5a:	95 0a       	sbc	r9, r21
    6d5c:	a6 0a       	sbc	r10, r22
    6d5e:	b7 0a       	sbc	r11, r23
    6d60:	e7 cf       	rjmp	.-50     	; 0x6d30 <time_to_tm+0x10e>
    6d62:	0c 56       	subi	r16, 0x6C	; 108
    6d64:	17 40       	sbci	r17, 0x07	; 7
    6d66:	1b 87       	std	Y+11, r17	; 0x0b
    6d68:	0a 87       	std	Y+10, r16	; 0x0a
    6d6a:	9f 86       	std	Y+15, r9	; 0x0f
    6d6c:	8e 86       	std	Y+14, r8	; 0x0e
    6d6e:	ea e5       	ldi	r30, 0x5A	; 90
    6d70:	f3 e0       	ldi	r31, 0x03	; 3
    6d72:	20 e0       	ldi	r18, 0x00	; 0
    6d74:	30 e0       	ldi	r19, 0x00	; 0
    6d76:	18 14       	cp	r1, r8
    6d78:	19 04       	cpc	r1, r9
    6d7a:	1a 04       	cpc	r1, r10
    6d7c:	1b 04       	cpc	r1, r11
    6d7e:	e4 f4       	brge	.+56     	; 0x6db8 <time_to_tm+0x196>
    6d80:	2c 30       	cpi	r18, 0x0C	; 12
    6d82:	31 05       	cpc	r19, r1
    6d84:	c9 f0       	breq	.+50     	; 0x6db8 <time_to_tm+0x196>
    6d86:	41 91       	ld	r20, Z+
    6d88:	51 91       	ld	r21, Z+
    6d8a:	21 30       	cpi	r18, 0x01	; 1
    6d8c:	31 05       	cpc	r19, r1
    6d8e:	21 f4       	brne	.+8      	; 0x6d98 <time_to_tm+0x176>
    6d90:	00 97       	sbiw	r24, 0x00	; 0
    6d92:	11 f0       	breq	.+4      	; 0x6d98 <time_to_tm+0x176>
    6d94:	4f 5f       	subi	r20, 0xFF	; 255
    6d96:	5f 4f       	sbci	r21, 0xFF	; 255
    6d98:	05 2e       	mov	r0, r21
    6d9a:	00 0c       	add	r0, r0
    6d9c:	66 0b       	sbc	r22, r22
    6d9e:	77 0b       	sbc	r23, r23
    6da0:	84 16       	cp	r8, r20
    6da2:	95 06       	cpc	r9, r21
    6da4:	a6 06       	cpc	r10, r22
    6da6:	b7 06       	cpc	r11, r23
    6da8:	3c f0       	brlt	.+14     	; 0x6db8 <time_to_tm+0x196>
    6daa:	84 1a       	sub	r8, r20
    6dac:	95 0a       	sbc	r9, r21
    6dae:	a6 0a       	sbc	r10, r22
    6db0:	b7 0a       	sbc	r11, r23
    6db2:	2f 5f       	subi	r18, 0xFF	; 255
    6db4:	3f 4f       	sbci	r19, 0xFF	; 255
    6db6:	df cf       	rjmp	.-66     	; 0x6d76 <time_to_tm+0x154>
    6db8:	39 87       	std	Y+9, r19	; 0x09
    6dba:	28 87       	std	Y+8, r18	; 0x08
    6dbc:	af ef       	ldi	r26, 0xFF	; 255
    6dbe:	8a 1a       	sub	r8, r26
    6dc0:	9a 0a       	sbc	r9, r26
    6dc2:	9f 82       	std	Y+7, r9	; 0x07
    6dc4:	8e 82       	std	Y+6, r8	; 0x06
    6dc6:	b6 01       	movw	r22, r12
    6dc8:	c7 01       	movw	r24, r14
    6dca:	04 c0       	rjmp	.+8      	; 0x6dd4 <time_to_tm+0x1b2>
    6dcc:	6f ef       	ldi	r22, 0xFF	; 255
    6dce:	7f ef       	ldi	r23, 0xFF	; 255
    6dd0:	8f ef       	ldi	r24, 0xFF	; 255
    6dd2:	9f ef       	ldi	r25, 0xFF	; 255
    6dd4:	cd b7       	in	r28, 0x3d	; 61
    6dd6:	de b7       	in	r29, 0x3e	; 62
    6dd8:	e0 e1       	ldi	r30, 0x10	; 16
    6dda:	0c 94 fc df 	jmp	0x1bff8	; 0x1bff8 <__epilogue_restores__+0x4>

00006dde <gmtime_r>:
    6dde:	0f 93       	push	r16
    6de0:	1f 93       	push	r17
    6de2:	cf 93       	push	r28
    6de4:	df 93       	push	r29
    6de6:	eb 01       	movw	r28, r22
    6de8:	fc 01       	movw	r30, r24
    6dea:	60 81       	ld	r22, Z
    6dec:	71 81       	ldd	r23, Z+1	; 0x01
    6dee:	82 81       	ldd	r24, Z+2	; 0x02
    6df0:	93 81       	ldd	r25, Z+3	; 0x03
    6df2:	8e 01       	movw	r16, r28
    6df4:	20 e0       	ldi	r18, 0x00	; 0
    6df6:	30 e0       	ldi	r19, 0x00	; 0
    6df8:	a9 01       	movw	r20, r18
    6dfa:	13 df       	rcall	.-474    	; 0x6c22 <time_to_tm>
    6dfc:	ce 01       	movw	r24, r28
    6dfe:	df 91       	pop	r29
    6e00:	cf 91       	pop	r28
    6e02:	1f 91       	pop	r17
    6e04:	0f 91       	pop	r16
    6e06:	08 95       	ret

00006e08 <gmtime>:
    6e08:	22 e9       	ldi	r18, 0x92	; 146
    6e0a:	37 e1       	ldi	r19, 0x17	; 23
    6e0c:	30 93 a9 17 	sts	0x17A9, r19	; 0x8017a9 <p.3796+0x1>
    6e10:	20 93 a8 17 	sts	0x17A8, r18	; 0x8017a8 <p.3796>
    6e14:	b9 01       	movw	r22, r18
    6e16:	e3 df       	rcall	.-58     	; 0x6dde <gmtime_r>
    6e18:	82 e9       	ldi	r24, 0x92	; 146
    6e1a:	97 e1       	ldi	r25, 0x17	; 23
    6e1c:	08 95       	ret

00006e1e <gettimezone>:
    6e1e:	ee e2       	ldi	r30, 0x2E	; 46
    6e20:	fa e1       	ldi	r31, 0x1A	; 26
    6e22:	20 81       	ld	r18, Z
    6e24:	31 81       	ldd	r19, Z+1	; 0x01
    6e26:	dc 01       	movw	r26, r24
    6e28:	2d 93       	st	X+, r18
    6e2a:	3c 93       	st	X, r19
    6e2c:	22 81       	ldd	r18, Z+2	; 0x02
    6e2e:	33 81       	ldd	r19, Z+3	; 0x03
    6e30:	fc 01       	movw	r30, r24
    6e32:	33 83       	std	Z+3, r19	; 0x03
    6e34:	22 83       	std	Z+2, r18	; 0x02
    6e36:	80 e0       	ldi	r24, 0x00	; 0
    6e38:	90 e0       	ldi	r25, 0x00	; 0
    6e3a:	08 95       	ret

00006e3c <settimezone>:
    6e3c:	cf 93       	push	r28
    6e3e:	df 93       	push	r29
    6e40:	ec 01       	movw	r28, r24
    6e42:	28 81       	ld	r18, Y
    6e44:	39 81       	ldd	r19, Y+1	; 0x01
    6e46:	ee e2       	ldi	r30, 0x2E	; 46
    6e48:	fa e1       	ldi	r31, 0x1A	; 26
    6e4a:	31 83       	std	Z+1, r19	; 0x01
    6e4c:	20 83       	st	Z, r18
    6e4e:	8a 81       	ldd	r24, Y+2	; 0x02
    6e50:	9b 81       	ldd	r25, Y+3	; 0x03
    6e52:	93 83       	std	Z+3, r25	; 0x03
    6e54:	82 83       	std	Z+2, r24	; 0x02
    6e56:	80 e0       	ldi	r24, 0x00	; 0
    6e58:	90 e0       	ldi	r25, 0x00	; 0
    6e5a:	df 91       	pop	r29
    6e5c:	cf 91       	pop	r28
    6e5e:	08 95       	ret

00006e60 <gettimeofday>:
    6e60:	a8 e0       	ldi	r26, 0x08	; 8
    6e62:	b0 e0       	ldi	r27, 0x00	; 0
    6e64:	e6 e3       	ldi	r30, 0x36	; 54
    6e66:	f7 e3       	ldi	r31, 0x37	; 55
    6e68:	0c 94 ea df 	jmp	0x1bfd4	; 0x1bfd4 <__prologue_saves__+0x18>
    6e6c:	8c 01       	movw	r16, r24
    6e6e:	7b 01       	movw	r14, r22
    6e70:	be 01       	movw	r22, r28
    6e72:	6f 5f       	subi	r22, 0xFF	; 255
    6e74:	7f 4f       	sbci	r23, 0xFF	; 255
    6e76:	80 e0       	ldi	r24, 0x00	; 0
    6e78:	90 e0       	ldi	r25, 0x00	; 0
    6e7a:	dc db       	rcall	.-2120   	; 0x6634 <clock_gettime>
    6e7c:	89 81       	ldd	r24, Y+1	; 0x01
    6e7e:	9a 81       	ldd	r25, Y+2	; 0x02
    6e80:	ab 81       	ldd	r26, Y+3	; 0x03
    6e82:	bc 81       	ldd	r27, Y+4	; 0x04
    6e84:	f8 01       	movw	r30, r16
    6e86:	80 83       	st	Z, r24
    6e88:	91 83       	std	Z+1, r25	; 0x01
    6e8a:	a2 83       	std	Z+2, r26	; 0x02
    6e8c:	b3 83       	std	Z+3, r27	; 0x03
    6e8e:	6d 81       	ldd	r22, Y+5	; 0x05
    6e90:	7e 81       	ldd	r23, Y+6	; 0x06
    6e92:	8f 81       	ldd	r24, Y+7	; 0x07
    6e94:	98 85       	ldd	r25, Y+8	; 0x08
    6e96:	28 ee       	ldi	r18, 0xE8	; 232
    6e98:	33 e0       	ldi	r19, 0x03	; 3
    6e9a:	40 e0       	ldi	r20, 0x00	; 0
    6e9c:	50 e0       	ldi	r21, 0x00	; 0
    6e9e:	0e 94 93 df 	call	0x1bf26	; 0x1bf26 <__divmodsi4>
    6ea2:	f8 01       	movw	r30, r16
    6ea4:	24 83       	std	Z+4, r18	; 0x04
    6ea6:	35 83       	std	Z+5, r19	; 0x05
    6ea8:	46 83       	std	Z+6, r20	; 0x06
    6eaa:	57 83       	std	Z+7, r21	; 0x07
    6eac:	c7 01       	movw	r24, r14
    6eae:	b7 df       	rcall	.-146    	; 0x6e1e <gettimezone>
    6eb0:	80 e0       	ldi	r24, 0x00	; 0
    6eb2:	90 e0       	ldi	r25, 0x00	; 0
    6eb4:	28 96       	adiw	r28, 0x08	; 8
    6eb6:	e6 e0       	ldi	r30, 0x06	; 6
    6eb8:	0c 94 06 e0 	jmp	0x1c00c	; 0x1c00c <__epilogue_restores__+0x18>

00006ebc <time>:
    6ebc:	cf 93       	push	r28
    6ebe:	df 93       	push	r29
    6ec0:	ec 01       	movw	r28, r24
    6ec2:	64 e7       	ldi	r22, 0x74	; 116
    6ec4:	77 e1       	ldi	r23, 0x17	; 23
    6ec6:	80 e0       	ldi	r24, 0x00	; 0
    6ec8:	90 e0       	ldi	r25, 0x00	; 0
    6eca:	b4 db       	rcall	.-2200   	; 0x6634 <clock_gettime>
    6ecc:	20 97       	sbiw	r28, 0x00	; 0
    6ece:	61 f0       	breq	.+24     	; 0x6ee8 <time+0x2c>
    6ed0:	80 91 74 17 	lds	r24, 0x1774	; 0x801774 <ts.3874>
    6ed4:	90 91 75 17 	lds	r25, 0x1775	; 0x801775 <ts.3874+0x1>
    6ed8:	a0 91 76 17 	lds	r26, 0x1776	; 0x801776 <ts.3874+0x2>
    6edc:	b0 91 77 17 	lds	r27, 0x1777	; 0x801777 <ts.3874+0x3>
    6ee0:	88 83       	st	Y, r24
    6ee2:	99 83       	std	Y+1, r25	; 0x01
    6ee4:	aa 83       	std	Y+2, r26	; 0x02
    6ee6:	bb 83       	std	Y+3, r27	; 0x03
    6ee8:	60 91 74 17 	lds	r22, 0x1774	; 0x801774 <ts.3874>
    6eec:	70 91 75 17 	lds	r23, 0x1775	; 0x801775 <ts.3874+0x1>
    6ef0:	80 91 76 17 	lds	r24, 0x1776	; 0x801776 <ts.3874+0x2>
    6ef4:	90 91 77 17 	lds	r25, 0x1777	; 0x801777 <ts.3874+0x3>
    6ef8:	df 91       	pop	r29
    6efa:	cf 91       	pop	r28
    6efc:	08 95       	ret

00006efe <is_dst>:
    6efe:	cf 92       	push	r12
    6f00:	df 92       	push	r13
    6f02:	ef 92       	push	r14
    6f04:	ff 92       	push	r15
    6f06:	6b 01       	movw	r12, r22
    6f08:	7c 01       	movw	r14, r24
    6f0a:	05 d4       	rcall	.+2058   	; 0x7716 <set_dst>
    6f0c:	80 91 32 1a 	lds	r24, 0x1A32	; 0x801a32 <dst>
    6f10:	90 91 33 1a 	lds	r25, 0x1A33	; 0x801a33 <dst+0x1>
    6f14:	a0 91 34 1a 	lds	r26, 0x1A34	; 0x801a34 <dst+0x2>
    6f18:	b0 91 35 1a 	lds	r27, 0x1A35	; 0x801a35 <dst+0x3>
    6f1c:	c8 16       	cp	r12, r24
    6f1e:	d9 06       	cpc	r13, r25
    6f20:	ea 06       	cpc	r14, r26
    6f22:	fb 06       	cpc	r15, r27
    6f24:	88 f0       	brcs	.+34     	; 0x6f48 <is_dst+0x4a>
    6f26:	81 e0       	ldi	r24, 0x01	; 1
    6f28:	90 e0       	ldi	r25, 0x00	; 0
    6f2a:	40 91 36 1a 	lds	r20, 0x1A36	; 0x801a36 <dst+0x4>
    6f2e:	50 91 37 1a 	lds	r21, 0x1A37	; 0x801a37 <dst+0x5>
    6f32:	60 91 38 1a 	lds	r22, 0x1A38	; 0x801a38 <dst+0x6>
    6f36:	70 91 39 1a 	lds	r23, 0x1A39	; 0x801a39 <dst+0x7>
    6f3a:	4c 15       	cp	r20, r12
    6f3c:	5d 05       	cpc	r21, r13
    6f3e:	6e 05       	cpc	r22, r14
    6f40:	7f 05       	cpc	r23, r15
    6f42:	20 f4       	brcc	.+8      	; 0x6f4c <is_dst+0x4e>
    6f44:	80 e0       	ldi	r24, 0x00	; 0
    6f46:	02 c0       	rjmp	.+4      	; 0x6f4c <is_dst+0x4e>
    6f48:	80 e0       	ldi	r24, 0x00	; 0
    6f4a:	90 e0       	ldi	r25, 0x00	; 0
    6f4c:	ff 90       	pop	r15
    6f4e:	ef 90       	pop	r14
    6f50:	df 90       	pop	r13
    6f52:	cf 90       	pop	r12
    6f54:	08 95       	ret

00006f56 <localtime_r>:
    6f56:	4f 92       	push	r4
    6f58:	5f 92       	push	r5
    6f5a:	6f 92       	push	r6
    6f5c:	7f 92       	push	r7
    6f5e:	af 92       	push	r10
    6f60:	bf 92       	push	r11
    6f62:	cf 92       	push	r12
    6f64:	df 92       	push	r13
    6f66:	ef 92       	push	r14
    6f68:	ff 92       	push	r15
    6f6a:	0f 93       	push	r16
    6f6c:	1f 93       	push	r17
    6f6e:	cf 93       	push	r28
    6f70:	df 93       	push	r29
    6f72:	00 d0       	rcall	.+0      	; 0x6f74 <localtime_r+0x1e>
    6f74:	00 d0       	rcall	.+0      	; 0x6f76 <localtime_r+0x20>
    6f76:	cd b7       	in	r28, 0x3d	; 61
    6f78:	de b7       	in	r29, 0x3e	; 62
    6f7a:	5b 01       	movw	r10, r22
    6f7c:	fc 01       	movw	r30, r24
    6f7e:	40 80       	ld	r4, Z
    6f80:	51 80       	ldd	r5, Z+1	; 0x01
    6f82:	62 80       	ldd	r6, Z+2	; 0x02
    6f84:	73 80       	ldd	r7, Z+3	; 0x03
    6f86:	ce 01       	movw	r24, r28
    6f88:	01 96       	adiw	r24, 0x01	; 1
    6f8a:	49 df       	rcall	.-366    	; 0x6e1e <gettimezone>
    6f8c:	a9 81       	ldd	r26, Y+1	; 0x01
    6f8e:	ba 81       	ldd	r27, Y+2	; 0x02
    6f90:	2c e3       	ldi	r18, 0x3C	; 60
    6f92:	30 e0       	ldi	r19, 0x00	; 0
    6f94:	0e 94 b8 df 	call	0x1bf70	; 0x1bf70 <__usmulhisi3>
    6f98:	6b 01       	movw	r12, r22
    6f9a:	7c 01       	movw	r14, r24
    6f9c:	c3 01       	movw	r24, r6
    6f9e:	b2 01       	movw	r22, r4
    6fa0:	6c 19       	sub	r22, r12
    6fa2:	7d 09       	sbc	r23, r13
    6fa4:	8e 09       	sbc	r24, r14
    6fa6:	9f 09       	sbc	r25, r15
    6fa8:	aa df       	rcall	.-172    	; 0x6efe <is_dst>
    6faa:	89 2b       	or	r24, r25
    6fac:	31 f0       	breq	.+12     	; 0x6fba <localtime_r+0x64>
    6fae:	f0 e1       	ldi	r31, 0x10	; 16
    6fb0:	cf 1a       	sub	r12, r31
    6fb2:	fe e0       	ldi	r31, 0x0E	; 14
    6fb4:	df 0a       	sbc	r13, r31
    6fb6:	e1 08       	sbc	r14, r1
    6fb8:	f1 08       	sbc	r15, r1
    6fba:	85 01       	movw	r16, r10
    6fbc:	a7 01       	movw	r20, r14
    6fbe:	96 01       	movw	r18, r12
    6fc0:	c3 01       	movw	r24, r6
    6fc2:	b2 01       	movw	r22, r4
    6fc4:	2e de       	rcall	.-932    	; 0x6c22 <time_to_tm>
    6fc6:	c5 01       	movw	r24, r10
    6fc8:	0f 90       	pop	r0
    6fca:	0f 90       	pop	r0
    6fcc:	0f 90       	pop	r0
    6fce:	0f 90       	pop	r0
    6fd0:	df 91       	pop	r29
    6fd2:	cf 91       	pop	r28
    6fd4:	1f 91       	pop	r17
    6fd6:	0f 91       	pop	r16
    6fd8:	ff 90       	pop	r15
    6fda:	ef 90       	pop	r14
    6fdc:	df 90       	pop	r13
    6fde:	cf 90       	pop	r12
    6fe0:	bf 90       	pop	r11
    6fe2:	af 90       	pop	r10
    6fe4:	7f 90       	pop	r7
    6fe6:	6f 90       	pop	r6
    6fe8:	5f 90       	pop	r5
    6fea:	4f 90       	pop	r4
    6fec:	08 95       	ret

00006fee <localtime>:
    6fee:	6c e7       	ldi	r22, 0x7C	; 124
    6ff0:	77 e1       	ldi	r23, 0x17	; 23
    6ff2:	b1 cf       	rjmp	.-158    	; 0x6f56 <localtime_r>
    6ff4:	08 95       	ret

00006ff6 <normalize>:
    6ff6:	aa e0       	ldi	r26, 0x0A	; 10
    6ff8:	b0 e0       	ldi	r27, 0x00	; 0
    6ffa:	e1 e0       	ldi	r30, 0x01	; 1
    6ffc:	f8 e3       	ldi	r31, 0x38	; 56
    6ffe:	0c 94 de df 	jmp	0x1bfbc	; 0x1bfbc <__prologue_saves__>
    7002:	7c 01       	movw	r14, r24
    7004:	7a 87       	std	Y+10, r23	; 0x0a
    7006:	69 87       	std	Y+9, r22	; 0x09
    7008:	f7 01       	movw	r30, r14
    700a:	80 81       	ld	r24, Z
    700c:	91 81       	ldd	r25, Z+1	; 0x01
    700e:	8c 33       	cpi	r24, 0x3C	; 60
    7010:	91 05       	cpc	r25, r1
    7012:	5c f0       	brlt	.+22     	; 0x702a <normalize+0x34>
    7014:	f7 01       	movw	r30, r14
    7016:	22 81       	ldd	r18, Z+2	; 0x02
    7018:	33 81       	ldd	r19, Z+3	; 0x03
    701a:	2f 5f       	subi	r18, 0xFF	; 255
    701c:	3f 4f       	sbci	r19, 0xFF	; 255
    701e:	33 83       	std	Z+3, r19	; 0x03
    7020:	22 83       	std	Z+2, r18	; 0x02
    7022:	cc 97       	sbiw	r24, 0x3c	; 60
    7024:	91 83       	std	Z+1, r25	; 0x01
    7026:	80 83       	st	Z, r24
    7028:	ef cf       	rjmp	.-34     	; 0x7008 <normalize+0x12>
    702a:	f7 01       	movw	r30, r14
    702c:	01 90       	ld	r0, Z+
    702e:	f0 81       	ld	r31, Z
    7030:	e0 2d       	mov	r30, r0
    7032:	fe 83       	std	Y+6, r31	; 0x06
    7034:	ed 83       	std	Y+5, r30	; 0x05
    7036:	f7 ff       	sbrs	r31, 7
    7038:	0d c0       	rjmp	.+26     	; 0x7054 <normalize+0x5e>
    703a:	f7 01       	movw	r30, r14
    703c:	82 81       	ldd	r24, Z+2	; 0x02
    703e:	93 81       	ldd	r25, Z+3	; 0x03
    7040:	01 97       	sbiw	r24, 0x01	; 1
    7042:	93 83       	std	Z+3, r25	; 0x03
    7044:	82 83       	std	Z+2, r24	; 0x02
    7046:	6d 81       	ldd	r22, Y+5	; 0x05
    7048:	7e 81       	ldd	r23, Y+6	; 0x06
    704a:	64 5c       	subi	r22, 0xC4	; 196
    704c:	7f 4f       	sbci	r23, 0xFF	; 255
    704e:	71 83       	std	Z+1, r23	; 0x01
    7050:	60 83       	st	Z, r22
    7052:	eb cf       	rjmp	.-42     	; 0x702a <normalize+0x34>
    7054:	f7 01       	movw	r30, r14
    7056:	82 81       	ldd	r24, Z+2	; 0x02
    7058:	93 81       	ldd	r25, Z+3	; 0x03
    705a:	8c 33       	cpi	r24, 0x3C	; 60
    705c:	91 05       	cpc	r25, r1
    705e:	5c f0       	brlt	.+22     	; 0x7076 <normalize+0x80>
    7060:	f7 01       	movw	r30, r14
    7062:	24 81       	ldd	r18, Z+4	; 0x04
    7064:	35 81       	ldd	r19, Z+5	; 0x05
    7066:	2f 5f       	subi	r18, 0xFF	; 255
    7068:	3f 4f       	sbci	r19, 0xFF	; 255
    706a:	35 83       	std	Z+5, r19	; 0x05
    706c:	24 83       	std	Z+4, r18	; 0x04
    706e:	cc 97       	sbiw	r24, 0x3c	; 60
    7070:	93 83       	std	Z+3, r25	; 0x03
    7072:	82 83       	std	Z+2, r24	; 0x02
    7074:	ef cf       	rjmp	.-34     	; 0x7054 <normalize+0x5e>
    7076:	f7 01       	movw	r30, r14
    7078:	22 80       	ldd	r2, Z+2	; 0x02
    707a:	33 80       	ldd	r3, Z+3	; 0x03
    707c:	37 fe       	sbrs	r3, 7
    707e:	0d c0       	rjmp	.+26     	; 0x709a <normalize+0xa4>
    7080:	f7 01       	movw	r30, r14
    7082:	84 81       	ldd	r24, Z+4	; 0x04
    7084:	95 81       	ldd	r25, Z+5	; 0x05
    7086:	01 97       	sbiw	r24, 0x01	; 1
    7088:	95 83       	std	Z+5, r25	; 0x05
    708a:	84 83       	std	Z+4, r24	; 0x04
    708c:	fc e3       	ldi	r31, 0x3C	; 60
    708e:	2f 0e       	add	r2, r31
    7090:	31 1c       	adc	r3, r1
    7092:	f7 01       	movw	r30, r14
    7094:	33 82       	std	Z+3, r3	; 0x03
    7096:	22 82       	std	Z+2, r2	; 0x02
    7098:	ee cf       	rjmp	.-36     	; 0x7076 <normalize+0x80>
    709a:	f7 01       	movw	r30, r14
    709c:	84 81       	ldd	r24, Z+4	; 0x04
    709e:	95 81       	ldd	r25, Z+5	; 0x05
    70a0:	88 31       	cpi	r24, 0x18	; 24
    70a2:	91 05       	cpc	r25, r1
    70a4:	5c f0       	brlt	.+22     	; 0x70bc <normalize+0xc6>
    70a6:	f7 01       	movw	r30, r14
    70a8:	26 81       	ldd	r18, Z+6	; 0x06
    70aa:	37 81       	ldd	r19, Z+7	; 0x07
    70ac:	2f 5f       	subi	r18, 0xFF	; 255
    70ae:	3f 4f       	sbci	r19, 0xFF	; 255
    70b0:	37 83       	std	Z+7, r19	; 0x07
    70b2:	26 83       	std	Z+6, r18	; 0x06
    70b4:	48 97       	sbiw	r24, 0x18	; 24
    70b6:	95 83       	std	Z+5, r25	; 0x05
    70b8:	84 83       	std	Z+4, r24	; 0x04
    70ba:	ef cf       	rjmp	.-34     	; 0x709a <normalize+0xa4>
    70bc:	f7 01       	movw	r30, r14
    70be:	04 81       	ldd	r16, Z+4	; 0x04
    70c0:	15 81       	ldd	r17, Z+5	; 0x05
    70c2:	17 ff       	sbrs	r17, 7
    70c4:	0b c0       	rjmp	.+22     	; 0x70dc <normalize+0xe6>
    70c6:	f7 01       	movw	r30, r14
    70c8:	86 81       	ldd	r24, Z+6	; 0x06
    70ca:	97 81       	ldd	r25, Z+7	; 0x07
    70cc:	01 97       	sbiw	r24, 0x01	; 1
    70ce:	97 83       	std	Z+7, r25	; 0x07
    70d0:	86 83       	std	Z+6, r24	; 0x06
    70d2:	08 5e       	subi	r16, 0xE8	; 232
    70d4:	1f 4f       	sbci	r17, 0xFF	; 255
    70d6:	15 83       	std	Z+5, r17	; 0x05
    70d8:	04 83       	std	Z+4, r16	; 0x04
    70da:	f0 cf       	rjmp	.-32     	; 0x70bc <normalize+0xc6>
    70dc:	f7 01       	movw	r30, r14
    70de:	80 85       	ldd	r24, Z+8	; 0x08
    70e0:	91 85       	ldd	r25, Z+9	; 0x09
    70e2:	8c 30       	cpi	r24, 0x0C	; 12
    70e4:	91 05       	cpc	r25, r1
    70e6:	5c f0       	brlt	.+22     	; 0x70fe <normalize+0x108>
    70e8:	f7 01       	movw	r30, r14
    70ea:	22 85       	ldd	r18, Z+10	; 0x0a
    70ec:	33 85       	ldd	r19, Z+11	; 0x0b
    70ee:	2f 5f       	subi	r18, 0xFF	; 255
    70f0:	3f 4f       	sbci	r19, 0xFF	; 255
    70f2:	33 87       	std	Z+11, r19	; 0x0b
    70f4:	22 87       	std	Z+10, r18	; 0x0a
    70f6:	0c 97       	sbiw	r24, 0x0c	; 12
    70f8:	91 87       	std	Z+9, r25	; 0x09
    70fa:	80 87       	std	Z+8, r24	; 0x08
    70fc:	ef cf       	rjmp	.-34     	; 0x70dc <normalize+0xe6>
    70fe:	f7 01       	movw	r30, r14
    7100:	80 85       	ldd	r24, Z+8	; 0x08
    7102:	91 85       	ldd	r25, Z+9	; 0x09
    7104:	97 ff       	sbrs	r25, 7
    7106:	2d c0       	rjmp	.+90     	; 0x7162 <normalize+0x16c>
    7108:	f7 01       	movw	r30, r14
    710a:	22 85       	ldd	r18, Z+10	; 0x0a
    710c:	33 85       	ldd	r19, Z+11	; 0x0b
    710e:	21 50       	subi	r18, 0x01	; 1
    7110:	31 09       	sbc	r19, r1
    7112:	33 87       	std	Z+11, r19	; 0x0b
    7114:	22 87       	std	Z+10, r18	; 0x0a
    7116:	0c 96       	adiw	r24, 0x0c	; 12
    7118:	91 87       	std	Z+9, r25	; 0x09
    711a:	80 87       	std	Z+8, r24	; 0x08
    711c:	f0 cf       	rjmp	.-32     	; 0x70fe <normalize+0x108>
    711e:	f7 01       	movw	r30, r14
    7120:	c6 80       	ldd	r12, Z+6	; 0x06
    7122:	d7 80       	ldd	r13, Z+7	; 0x07
    7124:	a0 84       	ldd	r10, Z+8	; 0x08
    7126:	b1 84       	ldd	r11, Z+9	; 0x09
    7128:	b4 01       	movw	r22, r8
    712a:	c5 01       	movw	r24, r10
    712c:	59 dd       	rcall	.-1358   	; 0x6be0 <Days_Per_Month>
    712e:	8c 15       	cp	r24, r12
    7130:	9d 05       	cpc	r25, r13
    7132:	84 f5       	brge	.+96     	; 0x7194 <normalize+0x19e>
    7134:	c8 1a       	sub	r12, r24
    7136:	d9 0a       	sbc	r13, r25
    7138:	f7 01       	movw	r30, r14
    713a:	d7 82       	std	Z+7, r13	; 0x07
    713c:	c6 82       	std	Z+6, r12	; 0x06
    713e:	c5 01       	movw	r24, r10
    7140:	01 96       	adiw	r24, 0x01	; 1
    7142:	91 87       	std	Z+9, r25	; 0x09
    7144:	80 87       	std	Z+8, r24	; 0x08
    7146:	0c 97       	sbiw	r24, 0x0c	; 12
    7148:	54 f3       	brlt	.-44     	; 0x711e <normalize+0x128>
    714a:	fb e0       	ldi	r31, 0x0B	; 11
    714c:	af 1a       	sub	r10, r31
    714e:	b1 08       	sbc	r11, r1
    7150:	f7 01       	movw	r30, r14
    7152:	b1 86       	std	Z+9, r11	; 0x09
    7154:	a0 86       	std	Z+8, r10	; 0x08
    7156:	ff ef       	ldi	r31, 0xFF	; 255
    7158:	8f 1a       	sub	r8, r31
    715a:	9f 0a       	sbc	r9, r31
    715c:	f7 01       	movw	r30, r14
    715e:	93 86       	std	Z+11, r9	; 0x0b
    7160:	82 86       	std	Z+10, r8	; 0x0a
    7162:	f7 01       	movw	r30, r14
    7164:	82 84       	ldd	r8, Z+10	; 0x0a
    7166:	93 84       	ldd	r9, Z+11	; 0x0b
    7168:	da cf       	rjmp	.-76     	; 0x711e <normalize+0x128>
    716a:	f7 01       	movw	r30, r14
    716c:	80 85       	ldd	r24, Z+8	; 0x08
    716e:	91 85       	ldd	r25, Z+9	; 0x09
    7170:	9c 01       	movw	r18, r24
    7172:	21 50       	subi	r18, 0x01	; 1
    7174:	31 09       	sbc	r19, r1
    7176:	37 fd       	sbrc	r19, 7
    7178:	16 c0       	rjmp	.+44     	; 0x71a6 <normalize+0x1b0>
    717a:	31 87       	std	Z+9, r19	; 0x09
    717c:	20 87       	std	Z+8, r18	; 0x08
    717e:	f7 01       	movw	r30, r14
    7180:	62 85       	ldd	r22, Z+10	; 0x0a
    7182:	73 85       	ldd	r23, Z+11	; 0x0b
    7184:	80 85       	ldd	r24, Z+8	; 0x08
    7186:	91 85       	ldd	r25, Z+9	; 0x09
    7188:	2b dd       	rcall	.-1450   	; 0x6be0 <Days_Per_Month>
    718a:	88 0d       	add	r24, r8
    718c:	99 1d       	adc	r25, r9
    718e:	f7 01       	movw	r30, r14
    7190:	97 83       	std	Z+7, r25	; 0x07
    7192:	86 83       	std	Z+6, r24	; 0x06
    7194:	f7 01       	movw	r30, r14
    7196:	86 80       	ldd	r8, Z+6	; 0x06
    7198:	97 80       	ldd	r9, Z+7	; 0x07
    719a:	a2 84       	ldd	r10, Z+10	; 0x0a
    719c:	b3 84       	ldd	r11, Z+11	; 0x0b
    719e:	18 14       	cp	r1, r8
    71a0:	19 04       	cpc	r1, r9
    71a2:	1c f7       	brge	.-58     	; 0x716a <normalize+0x174>
    71a4:	0b c0       	rjmp	.+22     	; 0x71bc <normalize+0x1c6>
    71a6:	0b 96       	adiw	r24, 0x0b	; 11
    71a8:	f7 01       	movw	r30, r14
    71aa:	91 87       	std	Z+9, r25	; 0x09
    71ac:	80 87       	std	Z+8, r24	; 0x08
    71ae:	f1 e0       	ldi	r31, 0x01	; 1
    71b0:	af 1a       	sub	r10, r31
    71b2:	b1 08       	sbc	r11, r1
    71b4:	f7 01       	movw	r30, r14
    71b6:	b3 86       	std	Z+11, r11	; 0x0b
    71b8:	a2 86       	std	Z+10, r10	; 0x0a
    71ba:	e1 cf       	rjmp	.-62     	; 0x717e <normalize+0x188>
    71bc:	a5 01       	movw	r20, r10
    71be:	44 59       	subi	r20, 0x94	; 148
    71c0:	58 4f       	sbci	r21, 0xF8	; 248
    71c2:	58 87       	std	Y+8, r21	; 0x08
    71c4:	4f 83       	std	Y+7, r20	; 0x07
    71c6:	35 01       	movw	r6, r10
    71c8:	56 e4       	ldi	r21, 0x46	; 70
    71ca:	65 1a       	sub	r6, r21
    71cc:	71 08       	sbc	r7, r1
    71ce:	89 e8       	ldi	r24, 0x89	; 137
    71d0:	68 16       	cp	r6, r24
    71d2:	71 04       	cpc	r7, r1
    71d4:	08 f0       	brcs	.+2      	; 0x71d8 <normalize+0x1e2>
    71d6:	9b c0       	rjmp	.+310    	; 0x730e <normalize+0x318>
    71d8:	c0 84       	ldd	r12, Z+8	; 0x08
    71da:	d1 84       	ldd	r13, Z+9	; 0x09
    71dc:	9c e0       	ldi	r25, 0x0C	; 12
    71de:	c9 16       	cp	r12, r25
    71e0:	d1 04       	cpc	r13, r1
    71e2:	08 f0       	brcs	.+2      	; 0x71e6 <normalize+0x1f0>
    71e4:	94 c0       	rjmp	.+296    	; 0x730e <normalize+0x318>
    71e6:	24 01       	movw	r4, r8
    71e8:	e1 e0       	ldi	r30, 0x01	; 1
    71ea:	4e 1a       	sub	r4, r30
    71ec:	51 08       	sbc	r5, r1
    71ee:	6f 81       	ldd	r22, Y+7	; 0x07
    71f0:	78 85       	ldd	r23, Y+8	; 0x08
    71f2:	c6 01       	movw	r24, r12
    71f4:	f5 dc       	rcall	.-1558   	; 0x6be0 <Days_Per_Month>
    71f6:	48 16       	cp	r4, r24
    71f8:	59 06       	cpc	r5, r25
    71fa:	0c f0       	brlt	.+2      	; 0x71fe <normalize+0x208>
    71fc:	88 c0       	rjmp	.+272    	; 0x730e <normalize+0x318>
    71fe:	08 31       	cpi	r16, 0x18	; 24
    7200:	11 05       	cpc	r17, r1
    7202:	0c f0       	brlt	.+2      	; 0x7206 <normalize+0x210>
    7204:	84 c0       	rjmp	.+264    	; 0x730e <normalize+0x318>
    7206:	fc e3       	ldi	r31, 0x3C	; 60
    7208:	2f 16       	cp	r2, r31
    720a:	31 04       	cpc	r3, r1
    720c:	0c f0       	brlt	.+2      	; 0x7210 <normalize+0x21a>
    720e:	7f c0       	rjmp	.+254    	; 0x730e <normalize+0x318>
    7210:	4d 81       	ldd	r20, Y+5	; 0x05
    7212:	5e 81       	ldd	r21, Y+6	; 0x06
    7214:	4c 33       	cpi	r20, 0x3C	; 60
    7216:	51 05       	cpc	r21, r1
    7218:	0c f0       	brlt	.+2      	; 0x721c <normalize+0x226>
    721a:	79 c0       	rjmp	.+242    	; 0x730e <normalize+0x318>
    721c:	2d e6       	ldi	r18, 0x6D	; 109
    721e:	31 e0       	ldi	r19, 0x01	; 1
    7220:	d3 01       	movw	r26, r6
    7222:	0e 94 b8 df 	call	0x1bf70	; 0x1bf70 <__usmulhisi3>
    7226:	f6 01       	movw	r30, r12
    7228:	ee 0f       	add	r30, r30
    722a:	ff 1f       	adc	r31, r31
    722c:	ee 58       	subi	r30, 0x8E	; 142
    722e:	fc 4f       	sbci	r31, 0xFC	; 252
    7230:	20 81       	ld	r18, Z
    7232:	31 81       	ldd	r19, Z+1	; 0x01
    7234:	dc 01       	movw	r26, r24
    7236:	cb 01       	movw	r24, r22
    7238:	82 0f       	add	r24, r18
    723a:	93 1f       	adc	r25, r19
    723c:	a1 1d       	adc	r26, r1
    723e:	b1 1d       	adc	r27, r1
    7240:	05 2c       	mov	r0, r5
    7242:	00 0c       	add	r0, r0
    7244:	66 08       	sbc	r6, r6
    7246:	77 08       	sbc	r7, r7
    7248:	48 0e       	add	r4, r24
    724a:	59 1e       	adc	r5, r25
    724c:	6a 1e       	adc	r6, r26
    724e:	7b 1e       	adc	r7, r27
    7250:	1a 14       	cp	r1, r10
    7252:	1b 04       	cpc	r1, r11
    7254:	1c f4       	brge	.+6      	; 0x725c <normalize+0x266>
    7256:	51 e0       	ldi	r21, 0x01	; 1
    7258:	a5 1a       	sub	r10, r21
    725a:	b1 08       	sbc	r11, r1
    725c:	45 01       	movw	r8, r10
    725e:	95 94       	asr	r9
    7260:	87 94       	ror	r8
    7262:	95 94       	asr	r9
    7264:	87 94       	ror	r8
    7266:	88 ec       	ldi	r24, 0xC8	; 200
    7268:	a8 16       	cp	r10, r24
    726a:	b1 04       	cpc	r11, r1
    726c:	1c f0       	brlt	.+6      	; 0x7274 <normalize+0x27e>
    726e:	91 e0       	ldi	r25, 0x01	; 1
    7270:	89 1a       	sub	r8, r25
    7272:	91 08       	sbc	r9, r1
    7274:	09 2c       	mov	r0, r9
    7276:	00 0c       	add	r0, r0
    7278:	aa 08       	sbc	r10, r10
    727a:	bb 08       	sbc	r11, r11
    727c:	84 0c       	add	r8, r4
    727e:	95 1c       	adc	r9, r5
    7280:	a6 1c       	adc	r10, r6
    7282:	b7 1c       	adc	r11, r7
    7284:	24 01       	movw	r4, r8
    7286:	35 01       	movw	r6, r10
    7288:	e1 e1       	ldi	r30, 0x11	; 17
    728a:	4e 1a       	sub	r4, r30
    728c:	51 08       	sbc	r5, r1
    728e:	61 08       	sbc	r6, r1
    7290:	71 08       	sbc	r7, r1
    7292:	f2 e0       	ldi	r31, 0x02	; 2
    7294:	cf 16       	cp	r12, r31
    7296:	d1 04       	cpc	r13, r1
    7298:	64 f0       	brlt	.+24     	; 0x72b2 <normalize+0x2bc>
    729a:	8f 81       	ldd	r24, Y+7	; 0x07
    729c:	98 85       	ldd	r25, Y+8	; 0x08
    729e:	7b dc       	rcall	.-1802   	; 0x6b96 <IS_Leap>
    72a0:	89 2b       	or	r24, r25
    72a2:	39 f0       	breq	.+14     	; 0x72b2 <normalize+0x2bc>
    72a4:	24 01       	movw	r4, r8
    72a6:	35 01       	movw	r6, r10
    72a8:	40 e1       	ldi	r20, 0x10	; 16
    72aa:	44 1a       	sub	r4, r20
    72ac:	51 08       	sbc	r5, r1
    72ae:	61 08       	sbc	r6, r1
    72b0:	71 08       	sbc	r7, r1
    72b2:	a8 e1       	ldi	r26, 0x18	; 24
    72b4:	b0 e0       	ldi	r27, 0x00	; 0
    72b6:	a3 01       	movw	r20, r6
    72b8:	92 01       	movw	r18, r4
    72ba:	0e 94 be df 	call	0x1bf7c	; 0x1bf7c <__muluhisi3>
    72be:	01 2e       	mov	r0, r17
    72c0:	00 0c       	add	r0, r0
    72c2:	22 0b       	sbc	r18, r18
    72c4:	33 0b       	sbc	r19, r19
    72c6:	a9 01       	movw	r20, r18
    72c8:	98 01       	movw	r18, r16
    72ca:	26 0f       	add	r18, r22
    72cc:	37 1f       	adc	r19, r23
    72ce:	48 1f       	adc	r20, r24
    72d0:	59 1f       	adc	r21, r25
    72d2:	ac e3       	ldi	r26, 0x3C	; 60
    72d4:	b0 e0       	ldi	r27, 0x00	; 0
    72d6:	0e 94 be df 	call	0x1bf7c	; 0x1bf7c <__muluhisi3>
    72da:	81 01       	movw	r16, r2
    72dc:	03 2c       	mov	r0, r3
    72de:	00 0c       	add	r0, r0
    72e0:	22 0b       	sbc	r18, r18
    72e2:	33 0b       	sbc	r19, r19
    72e4:	a9 01       	movw	r20, r18
    72e6:	98 01       	movw	r18, r16
    72e8:	26 0f       	add	r18, r22
    72ea:	37 1f       	adc	r19, r23
    72ec:	48 1f       	adc	r20, r24
    72ee:	59 1f       	adc	r21, r25
    72f0:	0e 94 be df 	call	0x1bf7c	; 0x1bf7c <__muluhisi3>
    72f4:	ed 81       	ldd	r30, Y+5	; 0x05
    72f6:	fe 81       	ldd	r31, Y+6	; 0x06
    72f8:	8f 01       	movw	r16, r30
    72fa:	ff 0f       	add	r31, r31
    72fc:	22 0b       	sbc	r18, r18
    72fe:	33 0b       	sbc	r19, r19
    7300:	48 01       	movw	r8, r16
    7302:	59 01       	movw	r10, r18
    7304:	86 0e       	add	r8, r22
    7306:	97 1e       	adc	r9, r23
    7308:	a8 1e       	adc	r10, r24
    730a:	b9 1e       	adc	r11, r25
    730c:	04 c0       	rjmp	.+8      	; 0x7316 <normalize+0x320>
    730e:	88 24       	eor	r8, r8
    7310:	8a 94       	dec	r8
    7312:	98 2c       	mov	r9, r8
    7314:	54 01       	movw	r10, r8
    7316:	49 85       	ldd	r20, Y+9	; 0x09
    7318:	5a 85       	ldd	r21, Y+10	; 0x0a
    731a:	45 2b       	or	r20, r21
    731c:	e9 f0       	breq	.+58     	; 0x7358 <normalize+0x362>
    731e:	ce 01       	movw	r24, r28
    7320:	01 96       	adiw	r24, 0x01	; 1
    7322:	7d dd       	rcall	.-1286   	; 0x6e1e <gettimezone>
    7324:	a9 81       	ldd	r26, Y+1	; 0x01
    7326:	ba 81       	ldd	r27, Y+2	; 0x02
    7328:	2c e3       	ldi	r18, 0x3C	; 60
    732a:	30 e0       	ldi	r19, 0x00	; 0
    732c:	0e 94 b8 df 	call	0x1bf70	; 0x1bf70 <__usmulhisi3>
    7330:	2b 01       	movw	r4, r22
    7332:	3c 01       	movw	r6, r24
    7334:	c5 01       	movw	r24, r10
    7336:	b4 01       	movw	r22, r8
    7338:	e2 dd       	rcall	.-1084   	; 0x6efe <is_dst>
    733a:	89 2b       	or	r24, r25
    733c:	51 f0       	breq	.+20     	; 0x7352 <normalize+0x35c>
    733e:	50 e1       	ldi	r21, 0x10	; 16
    7340:	45 1a       	sub	r4, r21
    7342:	5e e0       	ldi	r21, 0x0E	; 14
    7344:	55 0a       	sbc	r5, r21
    7346:	61 08       	sbc	r6, r1
    7348:	71 08       	sbc	r7, r1
    734a:	cc 24       	eor	r12, r12
    734c:	c3 94       	inc	r12
    734e:	d1 2c       	mov	r13, r1
    7350:	08 c0       	rjmp	.+16     	; 0x7362 <normalize+0x36c>
    7352:	c1 2c       	mov	r12, r1
    7354:	d1 2c       	mov	r13, r1
    7356:	05 c0       	rjmp	.+10     	; 0x7362 <normalize+0x36c>
    7358:	c1 2c       	mov	r12, r1
    735a:	d1 2c       	mov	r13, r1
    735c:	41 2c       	mov	r4, r1
    735e:	51 2c       	mov	r5, r1
    7360:	32 01       	movw	r6, r4
    7362:	87 01       	movw	r16, r14
    7364:	a3 01       	movw	r20, r6
    7366:	92 01       	movw	r18, r4
    7368:	c5 01       	movw	r24, r10
    736a:	b4 01       	movw	r22, r8
    736c:	5a dc       	rcall	.-1868   	; 0x6c22 <time_to_tm>
    736e:	c1 14       	cp	r12, r1
    7370:	d1 04       	cpc	r13, r1
    7372:	29 f0       	breq	.+10     	; 0x737e <normalize+0x388>
    7374:	21 e0       	ldi	r18, 0x01	; 1
    7376:	30 e0       	ldi	r19, 0x00	; 0
    7378:	f7 01       	movw	r30, r14
    737a:	31 8b       	std	Z+17, r19	; 0x11
    737c:	20 8b       	std	Z+16, r18	; 0x10
    737e:	2a 96       	adiw	r28, 0x0a	; 10
    7380:	e2 e1       	ldi	r30, 0x12	; 18
    7382:	0c 94 fa df 	jmp	0x1bff4	; 0x1bff4 <__epilogue_restores__>

00007386 <timegm>:
    7386:	60 e0       	ldi	r22, 0x00	; 0
    7388:	70 e0       	ldi	r23, 0x00	; 0
    738a:	35 ce       	rjmp	.-918    	; 0x6ff6 <normalize>
    738c:	08 95       	ret

0000738e <setdate_r>:
    738e:	cf 92       	push	r12
    7390:	df 92       	push	r13
    7392:	ef 92       	push	r14
    7394:	ff 92       	push	r15
    7396:	cf 93       	push	r28
    7398:	df 93       	push	r29
    739a:	cd b7       	in	r28, 0x3d	; 61
    739c:	de b7       	in	r29, 0x3e	; 62
    739e:	a5 97       	sbiw	r28, 0x25	; 37
    73a0:	0f b6       	in	r0, 0x3f	; 63
    73a2:	f8 94       	cli
    73a4:	de bf       	out	0x3e, r29	; 62
    73a6:	0f be       	out	0x3f, r0	; 63
    73a8:	cd bf       	out	0x3d, r28	; 61
    73aa:	9d a3       	std	Y+37, r25	; 0x25
    73ac:	8c a3       	std	Y+36, r24	; 0x24
    73ae:	1f 82       	std	Y+7, r1	; 0x07
    73b0:	1e 82       	std	Y+6, r1	; 0x06
    73b2:	19 86       	std	Y+9, r1	; 0x09
    73b4:	18 86       	std	Y+8, r1	; 0x08
    73b6:	1b 86       	std	Y+11, r1	; 0x0b
    73b8:	1a 86       	std	Y+10, r1	; 0x0a
    73ba:	1d 86       	std	Y+13, r1	; 0x0d
    73bc:	1c 86       	std	Y+12, r1	; 0x0c
    73be:	1f 86       	std	Y+15, r1	; 0x0f
    73c0:	1e 86       	std	Y+14, r1	; 0x0e
    73c2:	19 8a       	std	Y+17, r1	; 0x11
    73c4:	18 8a       	std	Y+16, r1	; 0x10
    73c6:	8c a1       	ldd	r24, Y+36	; 0x24
    73c8:	9d a1       	ldd	r25, Y+37	; 0x25
    73ca:	fc 01       	movw	r30, r24
    73cc:	20 81       	ld	r18, Z
    73ce:	20 32       	cpi	r18, 0x20	; 32
    73d0:	21 f4       	brne	.+8      	; 0x73da <setdate_r+0x4c>
    73d2:	01 96       	adiw	r24, 0x01	; 1
    73d4:	9d a3       	std	Y+37, r25	; 0x25
    73d6:	8c a3       	std	Y+36, r24	; 0x24
    73d8:	f6 cf       	rjmp	.-20     	; 0x73c6 <setdate_r+0x38>
    73da:	4a e0       	ldi	r20, 0x0A	; 10
    73dc:	50 e0       	ldi	r21, 0x00	; 0
    73de:	be 01       	movw	r22, r28
    73e0:	6c 5d       	subi	r22, 0xDC	; 220
    73e2:	7f 4f       	sbci	r23, 0xFF	; 255
    73e4:	0e 94 e0 45 	call	0x8bc0	; 0x8bc0 <strtol>
    73e8:	79 8b       	std	Y+17, r23	; 0x11
    73ea:	68 8b       	std	Y+16, r22	; 0x10
    73ec:	8c a1       	ldd	r24, Y+36	; 0x24
    73ee:	9d a1       	ldd	r25, Y+37	; 0x25
    73f0:	fc 01       	movw	r30, r24
    73f2:	20 81       	ld	r18, Z
    73f4:	20 32       	cpi	r18, 0x20	; 32
    73f6:	21 f4       	brne	.+8      	; 0x7400 <setdate_r+0x72>
    73f8:	01 96       	adiw	r24, 0x01	; 1
    73fa:	9d a3       	std	Y+37, r25	; 0x25
    73fc:	8c a3       	std	Y+36, r24	; 0x24
    73fe:	f6 cf       	rjmp	.-20     	; 0x73ec <setdate_r+0x5e>
    7400:	4a e0       	ldi	r20, 0x0A	; 10
    7402:	50 e0       	ldi	r21, 0x00	; 0
    7404:	be 01       	movw	r22, r28
    7406:	6c 5d       	subi	r22, 0xDC	; 220
    7408:	7f 4f       	sbci	r23, 0xFF	; 255
    740a:	0e 94 e0 45 	call	0x8bc0	; 0x8bc0 <strtol>
    740e:	7f 87       	std	Y+15, r23	; 0x0f
    7410:	6e 87       	std	Y+14, r22	; 0x0e
    7412:	8c a1       	ldd	r24, Y+36	; 0x24
    7414:	9d a1       	ldd	r25, Y+37	; 0x25
    7416:	fc 01       	movw	r30, r24
    7418:	20 81       	ld	r18, Z
    741a:	20 32       	cpi	r18, 0x20	; 32
    741c:	21 f4       	brne	.+8      	; 0x7426 <setdate_r+0x98>
    741e:	01 96       	adiw	r24, 0x01	; 1
    7420:	9d a3       	std	Y+37, r25	; 0x25
    7422:	8c a3       	std	Y+36, r24	; 0x24
    7424:	f6 cf       	rjmp	.-20     	; 0x7412 <setdate_r+0x84>
    7426:	4a e0       	ldi	r20, 0x0A	; 10
    7428:	50 e0       	ldi	r21, 0x00	; 0
    742a:	be 01       	movw	r22, r28
    742c:	6c 5d       	subi	r22, 0xDC	; 220
    742e:	7f 4f       	sbci	r23, 0xFF	; 255
    7430:	0e 94 e0 45 	call	0x8bc0	; 0x8bc0 <strtol>
    7434:	7d 87       	std	Y+13, r23	; 0x0d
    7436:	6c 87       	std	Y+12, r22	; 0x0c
    7438:	8c a1       	ldd	r24, Y+36	; 0x24
    743a:	9d a1       	ldd	r25, Y+37	; 0x25
    743c:	fc 01       	movw	r30, r24
    743e:	20 81       	ld	r18, Z
    7440:	20 32       	cpi	r18, 0x20	; 32
    7442:	21 f4       	brne	.+8      	; 0x744c <setdate_r+0xbe>
    7444:	01 96       	adiw	r24, 0x01	; 1
    7446:	9d a3       	std	Y+37, r25	; 0x25
    7448:	8c a3       	std	Y+36, r24	; 0x24
    744a:	f6 cf       	rjmp	.-20     	; 0x7438 <setdate_r+0xaa>
    744c:	4a e0       	ldi	r20, 0x0A	; 10
    744e:	50 e0       	ldi	r21, 0x00	; 0
    7450:	be 01       	movw	r22, r28
    7452:	6c 5d       	subi	r22, 0xDC	; 220
    7454:	7f 4f       	sbci	r23, 0xFF	; 255
    7456:	0e 94 e0 45 	call	0x8bc0	; 0x8bc0 <strtol>
    745a:	7b 87       	std	Y+11, r23	; 0x0b
    745c:	6a 87       	std	Y+10, r22	; 0x0a
    745e:	ec a1       	ldd	r30, Y+36	; 0x24
    7460:	fd a1       	ldd	r31, Y+37	; 0x25
    7462:	80 81       	ld	r24, Z
    7464:	88 23       	and	r24, r24
    7466:	39 f0       	breq	.+14     	; 0x7476 <setdate_r+0xe8>
    7468:	80 32       	cpi	r24, 0x20	; 32
    746a:	11 f0       	breq	.+4      	; 0x7470 <setdate_r+0xe2>
    746c:	8a 33       	cpi	r24, 0x3A	; 58
    746e:	19 f4       	brne	.+6      	; 0x7476 <setdate_r+0xe8>
    7470:	31 96       	adiw	r30, 0x01	; 1
    7472:	fd a3       	std	Y+37, r31	; 0x25
    7474:	ec a3       	std	Y+36, r30	; 0x24
    7476:	4a e0       	ldi	r20, 0x0A	; 10
    7478:	50 e0       	ldi	r21, 0x00	; 0
    747a:	be 01       	movw	r22, r28
    747c:	6c 5d       	subi	r22, 0xDC	; 220
    747e:	7f 4f       	sbci	r23, 0xFF	; 255
    7480:	8c a1       	ldd	r24, Y+36	; 0x24
    7482:	9d a1       	ldd	r25, Y+37	; 0x25
    7484:	0e 94 e0 45 	call	0x8bc0	; 0x8bc0 <strtol>
    7488:	79 87       	std	Y+9, r23	; 0x09
    748a:	68 87       	std	Y+8, r22	; 0x08
    748c:	ec a1       	ldd	r30, Y+36	; 0x24
    748e:	fd a1       	ldd	r31, Y+37	; 0x25
    7490:	80 81       	ld	r24, Z
    7492:	88 23       	and	r24, r24
    7494:	39 f0       	breq	.+14     	; 0x74a4 <setdate_r+0x116>
    7496:	80 32       	cpi	r24, 0x20	; 32
    7498:	11 f0       	breq	.+4      	; 0x749e <setdate_r+0x110>
    749a:	8a 33       	cpi	r24, 0x3A	; 58
    749c:	19 f4       	brne	.+6      	; 0x74a4 <setdate_r+0x116>
    749e:	31 96       	adiw	r30, 0x01	; 1
    74a0:	fd a3       	std	Y+37, r31	; 0x25
    74a2:	ec a3       	std	Y+36, r30	; 0x24
    74a4:	4a e0       	ldi	r20, 0x0A	; 10
    74a6:	50 e0       	ldi	r21, 0x00	; 0
    74a8:	be 01       	movw	r22, r28
    74aa:	6c 5d       	subi	r22, 0xDC	; 220
    74ac:	7f 4f       	sbci	r23, 0xFF	; 255
    74ae:	8c a1       	ldd	r24, Y+36	; 0x24
    74b0:	9d a1       	ldd	r25, Y+37	; 0x25
    74b2:	0e 94 e0 45 	call	0x8bc0	; 0x8bc0 <strtol>
    74b6:	7f 83       	std	Y+7, r23	; 0x07
    74b8:	6e 83       	std	Y+6, r22	; 0x06
    74ba:	2e 85       	ldd	r18, Y+14	; 0x0e
    74bc:	3f 85       	ldd	r19, Y+15	; 0x0f
    74be:	21 50       	subi	r18, 0x01	; 1
    74c0:	31 09       	sbc	r19, r1
    74c2:	3f 87       	std	Y+15, r19	; 0x0f
    74c4:	2e 87       	std	Y+14, r18	; 0x0e
    74c6:	88 89       	ldd	r24, Y+16	; 0x10
    74c8:	99 89       	ldd	r25, Y+17	; 0x11
    74ca:	ac 01       	movw	r20, r24
    74cc:	42 5b       	subi	r20, 0xB2	; 178
    74ce:	57 40       	sbci	r21, 0x07	; 7
    74d0:	45 34       	cpi	r20, 0x45	; 69
    74d2:	51 05       	cpc	r21, r1
    74d4:	38 f0       	brcs	.+14     	; 0x74e4 <setdate_r+0x156>
    74d6:	ed b7       	in	r30, 0x3d	; 61
    74d8:	fe b7       	in	r31, 0x3e	; 62
    74da:	95 83       	std	Z+5, r25	; 0x05
    74dc:	84 83       	std	Z+4, r24	; 0x04
    74de:	80 ee       	ldi	r24, 0xE0	; 224
    74e0:	96 e0       	ldi	r25, 0x06	; 6
    74e2:	34 c0       	rjmp	.+104    	; 0x754c <setdate_r+0x1be>
    74e4:	8c 56       	subi	r24, 0x6C	; 108
    74e6:	97 40       	sbci	r25, 0x07	; 7
    74e8:	99 8b       	std	Y+17, r25	; 0x11
    74ea:	88 8b       	std	Y+16, r24	; 0x10
    74ec:	2c 30       	cpi	r18, 0x0C	; 12
    74ee:	31 05       	cpc	r19, r1
    74f0:	38 f0       	brcs	.+14     	; 0x7500 <setdate_r+0x172>
    74f2:	ed b7       	in	r30, 0x3d	; 61
    74f4:	fe b7       	in	r31, 0x3e	; 62
    74f6:	95 83       	std	Z+5, r25	; 0x05
    74f8:	84 83       	std	Z+4, r24	; 0x04
    74fa:	8f ec       	ldi	r24, 0xCF	; 207
    74fc:	96 e0       	ldi	r25, 0x06	; 6
    74fe:	26 c0       	rjmp	.+76     	; 0x754c <setdate_r+0x1be>
    7500:	8c 85       	ldd	r24, Y+12	; 0x0c
    7502:	9d 85       	ldd	r25, Y+13	; 0x0d
    7504:	9c 01       	movw	r18, r24
    7506:	21 50       	subi	r18, 0x01	; 1
    7508:	31 09       	sbc	r19, r1
    750a:	2f 31       	cpi	r18, 0x1F	; 31
    750c:	31 05       	cpc	r19, r1
    750e:	38 f0       	brcs	.+14     	; 0x751e <setdate_r+0x190>
    7510:	ed b7       	in	r30, 0x3d	; 61
    7512:	fe b7       	in	r31, 0x3e	; 62
    7514:	95 83       	std	Z+5, r25	; 0x05
    7516:	84 83       	std	Z+4, r24	; 0x04
    7518:	8e eb       	ldi	r24, 0xBE	; 190
    751a:	96 e0       	ldi	r25, 0x06	; 6
    751c:	17 c0       	rjmp	.+46     	; 0x754c <setdate_r+0x1be>
    751e:	8a 85       	ldd	r24, Y+10	; 0x0a
    7520:	9b 85       	ldd	r25, Y+11	; 0x0b
    7522:	88 31       	cpi	r24, 0x18	; 24
    7524:	91 05       	cpc	r25, r1
    7526:	38 f0       	brcs	.+14     	; 0x7536 <setdate_r+0x1a8>
    7528:	ed b7       	in	r30, 0x3d	; 61
    752a:	fe b7       	in	r31, 0x3e	; 62
    752c:	95 83       	std	Z+5, r25	; 0x05
    752e:	84 83       	std	Z+4, r24	; 0x04
    7530:	8c ea       	ldi	r24, 0xAC	; 172
    7532:	96 e0       	ldi	r25, 0x06	; 6
    7534:	0b c0       	rjmp	.+22     	; 0x754c <setdate_r+0x1be>
    7536:	88 85       	ldd	r24, Y+8	; 0x08
    7538:	99 85       	ldd	r25, Y+9	; 0x09
    753a:	8c 33       	cpi	r24, 0x3C	; 60
    753c:	91 05       	cpc	r25, r1
    753e:	68 f0       	brcs	.+26     	; 0x755a <setdate_r+0x1cc>
    7540:	ed b7       	in	r30, 0x3d	; 61
    7542:	fe b7       	in	r31, 0x3e	; 62
    7544:	95 83       	std	Z+5, r25	; 0x05
    7546:	84 83       	std	Z+4, r24	; 0x04
    7548:	8b e9       	ldi	r24, 0x9B	; 155
    754a:	96 e0       	ldi	r25, 0x06	; 6
    754c:	a0 e0       	ldi	r26, 0x00	; 0
    754e:	81 83       	std	Z+1, r24	; 0x01
    7550:	92 83       	std	Z+2, r25	; 0x02
    7552:	a3 83       	std	Z+3, r26	; 0x03
    7554:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    7558:	25 c0       	rjmp	.+74     	; 0x75a4 <setdate_r+0x216>
    755a:	ce 01       	movw	r24, r28
    755c:	06 96       	adiw	r24, 0x06	; 6
    755e:	13 df       	rcall	.-474    	; 0x7386 <timegm>
    7560:	6b 01       	movw	r12, r22
    7562:	7c 01       	movw	r14, r24
    7564:	6c 8f       	std	Y+28, r22	; 0x1c
    7566:	7d 8f       	std	Y+29, r23	; 0x1d
    7568:	8e 8f       	std	Y+30, r24	; 0x1e
    756a:	9f 8f       	std	Y+31, r25	; 0x1f
    756c:	18 a2       	std	Y+32, r1	; 0x20
    756e:	19 a2       	std	Y+33, r1	; 0x21
    7570:	1a a2       	std	Y+34, r1	; 0x22
    7572:	1b a2       	std	Y+35, r1	; 0x23
    7574:	be 01       	movw	r22, r28
    7576:	64 5e       	subi	r22, 0xE4	; 228
    7578:	7f 4f       	sbci	r23, 0xFF	; 255
    757a:	80 e0       	ldi	r24, 0x00	; 0
    757c:	90 e0       	ldi	r25, 0x00	; 0
    757e:	03 db       	rcall	.-2554   	; 0x6b86 <clock_settime>
    7580:	b7 01       	movw	r22, r14
    7582:	a6 01       	movw	r20, r12
    7584:	81 e0       	ldi	r24, 0x01	; 1
    7586:	90 e0       	ldi	r25, 0x00	; 0
    7588:	0e 94 3b 2e 	call	0x5c76	; 0x5c76 <rtc_init>
    758c:	81 11       	cpse	r24, r1
    758e:	0d c0       	rjmp	.+26     	; 0x75aa <setdate_r+0x21c>
    7590:	84 e8       	ldi	r24, 0x84	; 132
    7592:	96 e0       	ldi	r25, 0x06	; 6
    7594:	a0 e0       	ldi	r26, 0x00	; 0
    7596:	ed b7       	in	r30, 0x3d	; 61
    7598:	fe b7       	in	r31, 0x3e	; 62
    759a:	81 83       	std	Z+1, r24	; 0x01
    759c:	92 83       	std	Z+2, r25	; 0x02
    759e:	a3 83       	std	Z+3, r26	; 0x03
    75a0:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    75a4:	8f ef       	ldi	r24, 0xFF	; 255
    75a6:	9f ef       	ldi	r25, 0xFF	; 255
    75a8:	02 c0       	rjmp	.+4      	; 0x75ae <setdate_r+0x220>
    75aa:	80 e0       	ldi	r24, 0x00	; 0
    75ac:	90 e0       	ldi	r25, 0x00	; 0
    75ae:	a5 96       	adiw	r28, 0x25	; 37
    75b0:	0f b6       	in	r0, 0x3f	; 63
    75b2:	f8 94       	cli
    75b4:	de bf       	out	0x3e, r29	; 62
    75b6:	0f be       	out	0x3f, r0	; 63
    75b8:	cd bf       	out	0x3d, r28	; 61
    75ba:	df 91       	pop	r29
    75bc:	cf 91       	pop	r28
    75be:	ff 90       	pop	r15
    75c0:	ef 90       	pop	r14
    75c2:	df 90       	pop	r13
    75c4:	cf 90       	pop	r12
    75c6:	08 95       	ret

000075c8 <setdate>:
    75c8:	ab e2       	ldi	r26, 0x2B	; 43
    75ca:	b0 e0       	ldi	r27, 0x00	; 0
    75cc:	ea ee       	ldi	r30, 0xEA	; 234
    75ce:	fa e3       	ldi	r31, 0x3A	; 58
    75d0:	0c 94 ee df 	jmp	0x1bfdc	; 0x1bfdc <__prologue_saves__+0x20>
    75d4:	82 ef       	ldi	r24, 0xF2	; 242
    75d6:	96 e0       	ldi	r25, 0x06	; 6
    75d8:	a0 e0       	ldi	r26, 0x00	; 0
    75da:	ed b7       	in	r30, 0x3d	; 61
    75dc:	fe b7       	in	r31, 0x3e	; 62
    75de:	81 83       	std	Z+1, r24	; 0x01
    75e0:	92 83       	std	Z+2, r25	; 0x02
    75e2:	a3 83       	std	Z+3, r26	; 0x03
    75e4:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    75e8:	40 91 83 1c 	lds	r20, 0x1C83	; 0x801c83 <__iob>
    75ec:	50 91 84 1c 	lds	r21, 0x1C84	; 0x801c84 <__iob+0x1>
    75f0:	67 e2       	ldi	r22, 0x27	; 39
    75f2:	70 e0       	ldi	r23, 0x00	; 0
    75f4:	ce 01       	movw	r24, r28
    75f6:	04 96       	adiw	r24, 0x04	; 4
    75f8:	0e 94 94 75 	call	0xeb28	; 0xeb28 <fgets>
    75fc:	ce 01       	movw	r24, r28
    75fe:	04 96       	adiw	r24, 0x04	; 4
    7600:	c6 de       	rcall	.-628    	; 0x738e <setdate_r>
    7602:	ab 96       	adiw	r28, 0x2b	; 43
    7604:	e2 e0       	ldi	r30, 0x02	; 2
    7606:	0c 94 0a e0 	jmp	0x1c014	; 0x1c014 <__epilogue_restores__+0x20>

0000760a <find_dst>:
    760a:	a8 e2       	ldi	r26, 0x28	; 40
    760c:	b0 e0       	ldi	r27, 0x00	; 0
    760e:	eb e0       	ldi	r30, 0x0B	; 11
    7610:	fb e3       	ldi	r31, 0x3B	; 59
    7612:	0c 94 de df 	jmp	0x1bfbc	; 0x1bfbc <__prologue_saves__>
    7616:	3c 01       	movw	r6, r24
    7618:	1a 01       	movw	r2, r20
    761a:	2b 01       	movw	r4, r22
    761c:	49 01       	movw	r8, r18
    761e:	1c a3       	std	Y+36, r17	; 0x24
    7620:	0b a3       	std	Y+35, r16	; 0x23
    7622:	de a2       	std	Y+38, r13	; 0x26
    7624:	cd a2       	std	Y+37, r12	; 0x25
    7626:	b8 a6       	std	Y+40, r11	; 0x28
    7628:	af a2       	std	Y+39, r10	; 0x27
    762a:	be 01       	movw	r22, r28
    762c:	61 5e       	subi	r22, 0xE1	; 225
    762e:	7f 4f       	sbci	r23, 0xFF	; 255
    7630:	ce 01       	movw	r24, r28
    7632:	47 96       	adiw	r24, 0x17	; 23
    7634:	15 dc       	rcall	.-2006   	; 0x6e60 <gettimeofday>
    7636:	af 8d       	ldd	r26, Y+31	; 0x1f
    7638:	b8 a1       	ldd	r27, Y+32	; 0x20
    763a:	2c e3       	ldi	r18, 0x3C	; 60
    763c:	30 e0       	ldi	r19, 0x00	; 0
    763e:	0e 94 b8 df 	call	0x1bf70	; 0x1bf70 <__usmulhisi3>
    7642:	5b 01       	movw	r10, r22
    7644:	6c 01       	movw	r12, r24
    7646:	61 14       	cp	r6, r1
    7648:	71 04       	cpc	r7, r1
    764a:	31 f0       	breq	.+12     	; 0x7658 <find_dst+0x4e>
    764c:	20 e1       	ldi	r18, 0x10	; 16
    764e:	a2 1a       	sub	r10, r18
    7650:	2e e0       	ldi	r18, 0x0E	; 14
    7652:	b2 0a       	sbc	r11, r18
    7654:	c1 08       	sbc	r12, r1
    7656:	d1 08       	sbc	r13, r1
    7658:	81 14       	cp	r8, r1
    765a:	91 04       	cpc	r9, r1
    765c:	39 f0       	breq	.+14     	; 0x766c <find_dst+0x62>
    765e:	4c e6       	ldi	r20, 0x6C	; 108
    7660:	84 1a       	sub	r8, r20
    7662:	47 e0       	ldi	r20, 0x07	; 7
    7664:	94 0a       	sbc	r9, r20
    7666:	9c 86       	std	Y+12, r9	; 0x0c
    7668:	8b 86       	std	Y+11, r8	; 0x0b
    766a:	11 c0       	rjmp	.+34     	; 0x768e <find_dst+0x84>
    766c:	21 14       	cp	r2, r1
    766e:	31 04       	cpc	r3, r1
    7670:	41 04       	cpc	r4, r1
    7672:	51 04       	cpc	r5, r1
    7674:	21 f4       	brne	.+8      	; 0x767e <find_dst+0x74>
    7676:	2f 88       	ldd	r2, Y+23	; 0x17
    7678:	38 8c       	ldd	r3, Y+24	; 0x18
    767a:	49 8c       	ldd	r4, Y+25	; 0x19
    767c:	5a 8c       	ldd	r5, Y+26	; 0x1a
    767e:	8e 01       	movw	r16, r28
    7680:	0f 5f       	subi	r16, 0xFF	; 255
    7682:	1f 4f       	sbci	r17, 0xFF	; 255
    7684:	a6 01       	movw	r20, r12
    7686:	95 01       	movw	r18, r10
    7688:	c2 01       	movw	r24, r4
    768a:	b1 01       	movw	r22, r2
    768c:	ca da       	rcall	.-2668   	; 0x6c22 <time_to_tm>
    768e:	8b a1       	ldd	r24, Y+35	; 0x23
    7690:	9c a1       	ldd	r25, Y+36	; 0x24
    7692:	01 97       	sbiw	r24, 0x01	; 1
    7694:	9a 87       	std	Y+10, r25	; 0x0a
    7696:	89 87       	std	Y+9, r24	; 0x09
    7698:	81 e0       	ldi	r24, 0x01	; 1
    769a:	90 e0       	ldi	r25, 0x00	; 0
    769c:	98 87       	std	Y+8, r25	; 0x08
    769e:	8f 83       	std	Y+7, r24	; 0x07
    76a0:	8f a1       	ldd	r24, Y+39	; 0x27
    76a2:	98 a5       	ldd	r25, Y+40	; 0x28
    76a4:	9e 83       	std	Y+6, r25	; 0x06
    76a6:	8d 83       	std	Y+5, r24	; 0x05
    76a8:	1c 82       	std	Y+4, r1	; 0x04
    76aa:	1b 82       	std	Y+3, r1	; 0x03
    76ac:	1a 82       	std	Y+2, r1	; 0x02
    76ae:	19 82       	std	Y+1, r1	; 0x01
    76b0:	ce 01       	movw	r24, r28
    76b2:	01 96       	adiw	r24, 0x01	; 1
    76b4:	68 de       	rcall	.-816    	; 0x7386 <timegm>
    76b6:	45 01       	movw	r8, r10
    76b8:	56 01       	movw	r10, r12
    76ba:	86 0e       	add	r8, r22
    76bc:	97 1e       	adc	r9, r23
    76be:	a8 1e       	adc	r10, r24
    76c0:	b9 1e       	adc	r11, r25
    76c2:	8e 01       	movw	r16, r28
    76c4:	0f 5f       	subi	r16, 0xFF	; 255
    76c6:	1f 4f       	sbci	r17, 0xFF	; 255
    76c8:	20 e0       	ldi	r18, 0x00	; 0
    76ca:	30 e0       	ldi	r19, 0x00	; 0
    76cc:	a9 01       	movw	r20, r18
    76ce:	c5 01       	movw	r24, r10
    76d0:	b4 01       	movw	r22, r8
    76d2:	a7 da       	rcall	.-2738   	; 0x6c22 <time_to_tm>
    76d4:	2d 85       	ldd	r18, Y+13	; 0x0d
    76d6:	3e 85       	ldd	r19, Y+14	; 0x0e
    76d8:	e7 e0       	ldi	r30, 0x07	; 7
    76da:	f0 e0       	ldi	r31, 0x00	; 0
    76dc:	c9 01       	movw	r24, r18
    76de:	bf 01       	movw	r22, r30
    76e0:	0e 94 5e df 	call	0x1bebc	; 0x1bebc <__divmodhi4>
    76e4:	4d a1       	ldd	r20, Y+37	; 0x25
    76e6:	5e a1       	ldd	r21, Y+38	; 0x26
    76e8:	48 17       	cp	r20, r24
    76ea:	59 07       	cpc	r21, r25
    76ec:	21 f4       	brne	.+8      	; 0x76f6 <find_dst+0xec>
    76ee:	51 e0       	ldi	r21, 0x01	; 1
    76f0:	e5 1a       	sub	r14, r21
    76f2:	f1 08       	sbc	r15, r1
    76f4:	51 f0       	breq	.+20     	; 0x770a <find_dst+0x100>
    76f6:	80 e8       	ldi	r24, 0x80	; 128
    76f8:	88 0e       	add	r8, r24
    76fa:	81 e5       	ldi	r24, 0x51	; 81
    76fc:	98 1e       	adc	r9, r24
    76fe:	81 e0       	ldi	r24, 0x01	; 1
    7700:	a8 1e       	adc	r10, r24
    7702:	b1 1c       	adc	r11, r1
    7704:	2f 5f       	subi	r18, 0xFF	; 255
    7706:	3f 4f       	sbci	r19, 0xFF	; 255
    7708:	e9 cf       	rjmp	.-46     	; 0x76dc <find_dst+0xd2>
    770a:	c5 01       	movw	r24, r10
    770c:	b4 01       	movw	r22, r8
    770e:	a8 96       	adiw	r28, 0x28	; 40
    7710:	e2 e1       	ldi	r30, 0x12	; 18
    7712:	0c 94 fa df 	jmp	0x1bff4	; 0x1bff4 <__epilogue_restores__>

00007716 <set_dst>:
    7716:	4f 92       	push	r4
    7718:	5f 92       	push	r5
    771a:	6f 92       	push	r6
    771c:	7f 92       	push	r7
    771e:	af 92       	push	r10
    7720:	bf 92       	push	r11
    7722:	cf 92       	push	r12
    7724:	df 92       	push	r13
    7726:	ef 92       	push	r14
    7728:	ff 92       	push	r15
    772a:	0f 93       	push	r16
    772c:	1f 93       	push	r17
    772e:	cf 93       	push	r28
    7730:	df 93       	push	r29
    7732:	cd b7       	in	r28, 0x3d	; 61
    7734:	de b7       	in	r29, 0x3e	; 62
    7736:	2c 97       	sbiw	r28, 0x0c	; 12
    7738:	0f b6       	in	r0, 0x3f	; 63
    773a:	f8 94       	cli
    773c:	de bf       	out	0x3e, r29	; 62
    773e:	0f be       	out	0x3f, r0	; 63
    7740:	cd bf       	out	0x3d, r28	; 61
    7742:	2b 01       	movw	r4, r22
    7744:	3c 01       	movw	r6, r24
    7746:	67 2b       	or	r22, r23
    7748:	68 2b       	or	r22, r24
    774a:	69 2b       	or	r22, r25
    774c:	51 f4       	brne	.+20     	; 0x7762 <set_dst+0x4c>
    774e:	be 01       	movw	r22, r28
    7750:	67 5f       	subi	r22, 0xF7	; 247
    7752:	7f 4f       	sbci	r23, 0xFF	; 255
    7754:	ce 01       	movw	r24, r28
    7756:	01 96       	adiw	r24, 0x01	; 1
    7758:	83 db       	rcall	.-2298   	; 0x6e60 <gettimeofday>
    775a:	49 80       	ldd	r4, Y+1	; 0x01
    775c:	5a 80       	ldd	r5, Y+2	; 0x02
    775e:	6b 80       	ldd	r6, Y+3	; 0x03
    7760:	7c 80       	ldd	r7, Y+4	; 0x04
    7762:	80 91 3a 1a 	lds	r24, 0x1A3A	; 0x801a3a <dst+0x8>
    7766:	90 91 3b 1a 	lds	r25, 0x1A3B	; 0x801a3b <dst+0x9>
    776a:	a0 91 3c 1a 	lds	r26, 0x1A3C	; 0x801a3c <dst+0xa>
    776e:	b0 91 3d 1a 	lds	r27, 0x1A3D	; 0x801a3d <dst+0xb>
    7772:	84 15       	cp	r24, r4
    7774:	95 05       	cpc	r25, r5
    7776:	a6 05       	cpc	r26, r6
    7778:	b7 05       	cpc	r27, r7
    777a:	50 f0       	brcs	.+20     	; 0x7790 <set_dst+0x7a>
    777c:	84 19       	sub	r24, r4
    777e:	95 09       	sbc	r25, r5
    7780:	a6 09       	sbc	r26, r6
    7782:	b7 09       	sbc	r27, r7
    7784:	80 38       	cpi	r24, 0x80	; 128
    7786:	91 45       	sbci	r25, 0x51	; 81
    7788:	a1 40       	sbci	r26, 0x01	; 1
    778a:	b1 05       	cpc	r27, r1
    778c:	70 f4       	brcc	.+28     	; 0x77aa <set_dst+0x94>
    778e:	42 c0       	rjmp	.+132    	; 0x7814 <set_dst+0xfe>
    7790:	a3 01       	movw	r20, r6
    7792:	92 01       	movw	r18, r4
    7794:	28 1b       	sub	r18, r24
    7796:	39 0b       	sbc	r19, r25
    7798:	4a 0b       	sbc	r20, r26
    779a:	5b 0b       	sbc	r21, r27
    779c:	da 01       	movw	r26, r20
    779e:	c9 01       	movw	r24, r18
    77a0:	80 38       	cpi	r24, 0x80	; 128
    77a2:	91 45       	sbci	r25, 0x51	; 81
    77a4:	a1 40       	sbci	r26, 0x01	; 1
    77a6:	b1 05       	cpc	r27, r1
    77a8:	a8 f1       	brcs	.+106    	; 0x7814 <set_dst+0xfe>
    77aa:	40 92 3a 1a 	sts	0x1A3A, r4	; 0x801a3a <dst+0x8>
    77ae:	50 92 3b 1a 	sts	0x1A3B, r5	; 0x801a3b <dst+0x9>
    77b2:	60 92 3c 1a 	sts	0x1A3C, r6	; 0x801a3c <dst+0xa>
    77b6:	70 92 3d 1a 	sts	0x1A3D, r7	; 0x801a3d <dst+0xb>
    77ba:	82 e0       	ldi	r24, 0x02	; 2
    77bc:	a8 2e       	mov	r10, r24
    77be:	b1 2c       	mov	r11, r1
    77c0:	c1 2c       	mov	r12, r1
    77c2:	d1 2c       	mov	r13, r1
    77c4:	92 e0       	ldi	r25, 0x02	; 2
    77c6:	e9 2e       	mov	r14, r25
    77c8:	f1 2c       	mov	r15, r1
    77ca:	03 e0       	ldi	r16, 0x03	; 3
    77cc:	10 e0       	ldi	r17, 0x00	; 0
    77ce:	20 e0       	ldi	r18, 0x00	; 0
    77d0:	30 e0       	ldi	r19, 0x00	; 0
    77d2:	b3 01       	movw	r22, r6
    77d4:	a2 01       	movw	r20, r4
    77d6:	80 e0       	ldi	r24, 0x00	; 0
    77d8:	90 e0       	ldi	r25, 0x00	; 0
    77da:	17 df       	rcall	.-466    	; 0x760a <find_dst>
    77dc:	60 93 32 1a 	sts	0x1A32, r22	; 0x801a32 <dst>
    77e0:	70 93 33 1a 	sts	0x1A33, r23	; 0x801a33 <dst+0x1>
    77e4:	80 93 34 1a 	sts	0x1A34, r24	; 0x801a34 <dst+0x2>
    77e8:	90 93 35 1a 	sts	0x1A35, r25	; 0x801a35 <dst+0x3>
    77ec:	ee 24       	eor	r14, r14
    77ee:	e3 94       	inc	r14
    77f0:	f1 2c       	mov	r15, r1
    77f2:	0b e0       	ldi	r16, 0x0B	; 11
    77f4:	10 e0       	ldi	r17, 0x00	; 0
    77f6:	20 e0       	ldi	r18, 0x00	; 0
    77f8:	30 e0       	ldi	r19, 0x00	; 0
    77fa:	b3 01       	movw	r22, r6
    77fc:	a2 01       	movw	r20, r4
    77fe:	81 e0       	ldi	r24, 0x01	; 1
    7800:	90 e0       	ldi	r25, 0x00	; 0
    7802:	03 df       	rcall	.-506    	; 0x760a <find_dst>
    7804:	60 93 36 1a 	sts	0x1A36, r22	; 0x801a36 <dst+0x4>
    7808:	70 93 37 1a 	sts	0x1A37, r23	; 0x801a37 <dst+0x5>
    780c:	80 93 38 1a 	sts	0x1A38, r24	; 0x801a38 <dst+0x6>
    7810:	90 93 39 1a 	sts	0x1A39, r25	; 0x801a39 <dst+0x7>
    7814:	2c 96       	adiw	r28, 0x0c	; 12
    7816:	0f b6       	in	r0, 0x3f	; 63
    7818:	f8 94       	cli
    781a:	de bf       	out	0x3e, r29	; 62
    781c:	0f be       	out	0x3f, r0	; 63
    781e:	cd bf       	out	0x3d, r28	; 61
    7820:	df 91       	pop	r29
    7822:	cf 91       	pop	r28
    7824:	1f 91       	pop	r17
    7826:	0f 91       	pop	r16
    7828:	ff 90       	pop	r15
    782a:	ef 90       	pop	r14
    782c:	df 90       	pop	r13
    782e:	cf 90       	pop	r12
    7830:	bf 90       	pop	r11
    7832:	af 90       	pop	r10
    7834:	7f 90       	pop	r7
    7836:	6f 90       	pop	r6
    7838:	5f 90       	pop	r5
    783a:	4f 90       	pop	r4
    783c:	08 95       	ret

0000783e <asctime_r>:
    783e:	a5 e1       	ldi	r26, 0x15	; 21
    7840:	b0 e0       	ldi	r27, 0x00	; 0
    7842:	e5 e2       	ldi	r30, 0x25	; 37
    7844:	fc e3       	ldi	r31, 0x3C	; 60
    7846:	0c 94 ec df 	jmp	0x1bfd8	; 0x1bfd8 <__prologue_saves__+0x1c>
    784a:	ec 01       	movw	r28, r24
    784c:	8b 01       	movw	r16, r22
    784e:	60 e0       	ldi	r22, 0x00	; 0
    7850:	70 e0       	ldi	r23, 0x00	; 0
    7852:	d1 db       	rcall	.-2142   	; 0x6ff6 <normalize>
    7854:	80 e2       	ldi	r24, 0x20	; 32
    7856:	f8 01       	movw	r30, r16
    7858:	11 92       	st	Z+, r1
    785a:	8a 95       	dec	r24
    785c:	e9 f7       	brne	.-6      	; 0x7858 <asctime_r+0x1a>
    785e:	8a 85       	ldd	r24, Y+10	; 0x0a
    7860:	9b 85       	ldd	r25, Y+11	; 0x0b
    7862:	84 59       	subi	r24, 0x94	; 148
    7864:	98 4f       	sbci	r25, 0xF8	; 248
    7866:	ed b7       	in	r30, 0x3d	; 61
    7868:	fe b7       	in	r31, 0x3e	; 62
    786a:	95 8b       	std	Z+21, r25	; 0x15
    786c:	84 8b       	std	Z+20, r24	; 0x14
    786e:	88 81       	ld	r24, Y
    7870:	99 81       	ldd	r25, Y+1	; 0x01
    7872:	93 8b       	std	Z+19, r25	; 0x13
    7874:	82 8b       	std	Z+18, r24	; 0x12
    7876:	8a 81       	ldd	r24, Y+2	; 0x02
    7878:	9b 81       	ldd	r25, Y+3	; 0x03
    787a:	91 8b       	std	Z+17, r25	; 0x11
    787c:	80 8b       	std	Z+16, r24	; 0x10
    787e:	8c 81       	ldd	r24, Y+4	; 0x04
    7880:	9d 81       	ldd	r25, Y+5	; 0x05
    7882:	97 87       	std	Z+15, r25	; 0x0f
    7884:	86 87       	std	Z+14, r24	; 0x0e
    7886:	8e 81       	ldd	r24, Y+6	; 0x06
    7888:	9f 81       	ldd	r25, Y+7	; 0x07
    788a:	95 87       	std	Z+13, r25	; 0x0d
    788c:	84 87       	std	Z+12, r24	; 0x0c
    788e:	e8 85       	ldd	r30, Y+8	; 0x08
    7890:	f9 85       	ldd	r31, Y+9	; 0x09
    7892:	ee 0f       	add	r30, r30
    7894:	ff 1f       	adc	r31, r31
    7896:	e8 5e       	subi	r30, 0xE8	; 232
    7898:	fe 4f       	sbci	r31, 0xFE	; 254
    789a:	80 81       	ld	r24, Z
    789c:	91 81       	ldd	r25, Z+1	; 0x01
    789e:	ed b7       	in	r30, 0x3d	; 61
    78a0:	fe b7       	in	r31, 0x3e	; 62
    78a2:	93 87       	std	Z+11, r25	; 0x0b
    78a4:	82 87       	std	Z+10, r24	; 0x0a
    78a6:	ec 85       	ldd	r30, Y+12	; 0x0c
    78a8:	fd 85       	ldd	r31, Y+13	; 0x0d
    78aa:	ee 0f       	add	r30, r30
    78ac:	ff 1f       	adc	r31, r31
    78ae:	ee 5c       	subi	r30, 0xCE	; 206
    78b0:	fe 4f       	sbci	r31, 0xFE	; 254
    78b2:	80 81       	ld	r24, Z
    78b4:	91 81       	ldd	r25, Z+1	; 0x01
    78b6:	ed b7       	in	r30, 0x3d	; 61
    78b8:	fe b7       	in	r31, 0x3e	; 62
    78ba:	91 87       	std	Z+9, r25	; 0x09
    78bc:	80 87       	std	Z+8, r24	; 0x08
    78be:	83 e1       	ldi	r24, 0x13	; 19
    78c0:	97 e0       	ldi	r25, 0x07	; 7
    78c2:	a0 e0       	ldi	r26, 0x00	; 0
    78c4:	85 83       	std	Z+5, r24	; 0x05
    78c6:	96 83       	std	Z+6, r25	; 0x06
    78c8:	a7 83       	std	Z+7, r26	; 0x07
    78ca:	80 e2       	ldi	r24, 0x20	; 32
    78cc:	90 e0       	ldi	r25, 0x00	; 0
    78ce:	94 83       	std	Z+4, r25	; 0x04
    78d0:	83 83       	std	Z+3, r24	; 0x03
    78d2:	12 83       	std	Z+2, r17	; 0x02
    78d4:	01 83       	std	Z+1, r16	; 0x01
    78d6:	0e 94 7d 45 	call	0x8afa	; 0x8afa <snprintf_P>
    78da:	c8 01       	movw	r24, r16
    78dc:	cd b7       	in	r28, 0x3d	; 61
    78de:	de b7       	in	r29, 0x3e	; 62
    78e0:	65 96       	adiw	r28, 0x15	; 21
    78e2:	e4 e0       	ldi	r30, 0x04	; 4
    78e4:	0c 94 08 e0 	jmp	0x1c010	; 0x1c010 <__epilogue_restores__+0x1c>

000078e8 <asctime>:
    78e8:	6a ec       	ldi	r22, 0xCA	; 202
    78ea:	77 e1       	ldi	r23, 0x17	; 23
    78ec:	a8 cf       	rjmp	.-176    	; 0x783e <asctime_r>
    78ee:	08 95       	ret

000078f0 <ctime_gm>:
    78f0:	a6 e1       	ldi	r26, 0x16	; 22
    78f2:	b0 e0       	ldi	r27, 0x00	; 0
    78f4:	ee e7       	ldi	r30, 0x7E	; 126
    78f6:	fc e3       	ldi	r31, 0x3C	; 60
    78f8:	0c 94 ee df 	jmp	0x1bfdc	; 0x1bfdc <__prologue_saves__+0x20>
    78fc:	be 01       	movw	r22, r28
    78fe:	6f 5f       	subi	r22, 0xFF	; 255
    7900:	7f 4f       	sbci	r23, 0xFF	; 255
    7902:	6d da       	rcall	.-2854   	; 0x6dde <gmtime_r>
    7904:	6a ea       	ldi	r22, 0xAA	; 170
    7906:	77 e1       	ldi	r23, 0x17	; 23
    7908:	9a df       	rcall	.-204    	; 0x783e <asctime_r>
    790a:	66 96       	adiw	r28, 0x16	; 22
    790c:	e2 e0       	ldi	r30, 0x02	; 2
    790e:	0c 94 0a e0 	jmp	0x1c014	; 0x1c014 <__epilogue_restores__+0x20>

00007912 <initialize_clock>:
/// @param[in] minwest: your time zone as minute west
///@return  void
///@see: clock_settime()
MEMSPACE
void initialize_clock(int minwest)
{
    7912:	a5 e2       	ldi	r26, 0x25	; 37
    7914:	b0 e0       	ldi	r27, 0x00	; 0
    7916:	ef e8       	ldi	r30, 0x8F	; 143
    7918:	fc e3       	ldi	r31, 0x3C	; 60
    791a:	0c 94 e8 df 	jmp	0x1bfd0	; 0x1bfd0 <__prologue_saves__+0x14>
    791e:	8c 01       	movw	r16, r24
    tm_t tc;
    ts_t ts;
    tz_t tz;

#ifdef RTC_SUPPORT
    if(!rtc_init(0,0L))
    7920:	40 e0       	ldi	r20, 0x00	; 0
    7922:	50 e0       	ldi	r21, 0x00	; 0
    7924:	ba 01       	movw	r22, r20
    7926:	80 e0       	ldi	r24, 0x00	; 0
    7928:	90 e0       	ldi	r25, 0x00	; 0
    792a:	0e 94 3b 2e 	call	0x5c76	; 0x5c76 <rtc_init>
    792e:	81 11       	cpse	r24, r1
    7930:	27 c0       	rjmp	.+78     	; 0x7980 <initialize_clock+0x6e>
    {
        printf("rtc uninitilized\n");
    7932:	82 e7       	ldi	r24, 0x72	; 114
    7934:	96 e0       	ldi	r25, 0x06	; 6
    7936:	a0 e0       	ldi	r26, 0x00	; 0
    7938:	ed b7       	in	r30, 0x3d	; 61
    793a:	fe b7       	in	r31, 0x3e	; 62
    793c:	81 83       	std	Z+1, r24	; 0x01
    793e:	92 83       	std	Z+2, r25	; 0x02
    7940:	a3 83       	std	Z+3, r26	; 0x03
    7942:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
        printf("attempting rtc init\n");
    7946:	8d e5       	ldi	r24, 0x5D	; 93
    7948:	96 e0       	ldi	r25, 0x06	; 6
    794a:	a0 e0       	ldi	r26, 0x00	; 0
    794c:	ed b7       	in	r30, 0x3d	; 61
    794e:	fe b7       	in	r31, 0x3e	; 62
    7950:	81 83       	std	Z+1, r24	; 0x01
    7952:	92 83       	std	Z+2, r25	; 0x02
    7954:	a3 83       	std	Z+3, r26	; 0x03
    7956:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
        if( !rtc_init(1, (time_t) 0) )
    795a:	40 e0       	ldi	r20, 0x00	; 0
    795c:	50 e0       	ldi	r21, 0x00	; 0
    795e:	ba 01       	movw	r22, r20
    7960:	81 e0       	ldi	r24, 0x01	; 1
    7962:	90 e0       	ldi	r25, 0x00	; 0
    7964:	0e 94 3b 2e 	call	0x5c76	; 0x5c76 <rtc_init>
    7968:	81 11       	cpse	r24, r1
    796a:	0a c0       	rjmp	.+20     	; 0x7980 <initialize_clock+0x6e>
        {
            printf("rtc force init failed\n");
    796c:	86 e4       	ldi	r24, 0x46	; 70
    796e:	96 e0       	ldi	r25, 0x06	; 6
    7970:	a0 e0       	ldi	r26, 0x00	; 0
    7972:	ed b7       	in	r30, 0x3d	; 61
    7974:	fe b7       	in	r31, 0x3e	; 62
    7976:	81 83       	std	Z+1, r24	; 0x01
    7978:	92 83       	std	Z+2, r25	; 0x02
    797a:	a3 83       	std	Z+3, r26	; 0x03
    797c:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
        }
    }

    if(rtc_read(&tc))
    7980:	ce 01       	movw	r24, r28
    7982:	04 96       	adiw	r24, 0x04	; 4
    7984:	0e 94 87 2e 	call	0x5d0e	; 0x5d0e <rtc_read>
    7988:	88 23       	and	r24, r24
    798a:	51 f0       	breq	.+20     	; 0x79a0 <initialize_clock+0x8e>
    {
        seconds = timegm(&tc);
    798c:	ce 01       	movw	r24, r28
    798e:	04 96       	adiw	r24, 0x04	; 4
    7990:	fa dc       	rcall	.-1548   	; 0x7386 <timegm>
    7992:	6b 01       	movw	r12, r22
    7994:	7c 01       	movw	r14, r24
    }
#else
    printf("NO RTC\n");
    seconds = 0;
#endif  // RTC_SUPPORT
    if(!seconds)
    7996:	67 2b       	or	r22, r23
    7998:	68 2b       	or	r22, r24
    799a:	69 2b       	or	r22, r25
    799c:	c1 f4       	brne	.+48     	; 0x79ce <initialize_clock+0xbc>
    799e:	0a c0       	rjmp	.+20     	; 0x79b4 <initialize_clock+0xa2>
        seconds = timegm(&tc);
    }
    else
    {
        seconds = 0;
        printf("rtc read errorafter init\n");
    79a0:	8c e2       	ldi	r24, 0x2C	; 44
    79a2:	96 e0       	ldi	r25, 0x06	; 6
    79a4:	a0 e0       	ldi	r26, 0x00	; 0
    79a6:	ed b7       	in	r30, 0x3d	; 61
    79a8:	fe b7       	in	r31, 0x3e	; 62
    79aa:	81 83       	std	Z+1, r24	; 0x01
    79ac:	92 83       	std	Z+2, r25	; 0x02
    79ae:	a3 83       	std	Z+3, r26	; 0x03
    79b0:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
#else
    printf("NO RTC\n");
    seconds = 0;
#endif  // RTC_SUPPORT
    if(!seconds)
        printf("use setdate command to change time\n");
    79b4:	88 e0       	ldi	r24, 0x08	; 8
    79b6:	96 e0       	ldi	r25, 0x06	; 6
    79b8:	a0 e0       	ldi	r26, 0x00	; 0
    79ba:	ed b7       	in	r30, 0x3d	; 61
    79bc:	fe b7       	in	r31, 0x3e	; 62
    79be:	81 83       	std	Z+1, r24	; 0x01
    79c0:	92 83       	std	Z+2, r25	; 0x02
    79c2:	a3 83       	std	Z+3, r26	; 0x03
    79c4:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    79c8:	c1 2c       	mov	r12, r1
    79ca:	d1 2c       	mov	r13, r1
    79cc:	76 01       	movw	r14, r12
    tz.tz_minuteswest = minwest;
    79ce:	1b a3       	std	Y+35, r17	; 0x23
    79d0:	0a a3       	std	Y+34, r16	; 0x22
    tz.tz_dsttime = 0;
    79d2:	1d a2       	std	Y+37, r1	; 0x25
    79d4:	1c a2       	std	Y+36, r1	; 0x24
    settimezone( &tz );
    79d6:	ce 01       	movw	r24, r28
    79d8:	82 96       	adiw	r24, 0x22	; 34
    79da:	30 da       	rcall	.-2976   	; 0x6e3c <settimezone>

    ts.tv_sec = seconds;
    79dc:	ca 8e       	std	Y+26, r12	; 0x1a
    79de:	db 8e       	std	Y+27, r13	; 0x1b
    79e0:	ec 8e       	std	Y+28, r14	; 0x1c
    79e2:	fd 8e       	std	Y+29, r15	; 0x1d
    ts.tv_nsec = 0L;
    79e4:	1e 8e       	std	Y+30, r1	; 0x1e
    79e6:	1f 8e       	std	Y+31, r1	; 0x1f
    79e8:	18 a2       	std	Y+32, r1	; 0x20
    79ea:	19 a2       	std	Y+33, r1	; 0x21
    clock_settime(0, (ts_t *) &ts);
    79ec:	be 01       	movw	r22, r28
    79ee:	66 5e       	subi	r22, 0xE6	; 230
    79f0:	7f 4f       	sbci	r23, 0xFF	; 255
    79f2:	80 e0       	ldi	r24, 0x00	; 0
    79f4:	90 e0       	ldi	r25, 0x00	; 0
    79f6:	c7 d8       	rcall	.-3698   	; 0x6b86 <clock_settime>
}
    79f8:	a5 96       	adiw	r28, 0x25	; 37
    79fa:	e8 e0       	ldi	r30, 0x08	; 8
    79fc:	0c 94 04 e0 	jmp	0x1c008	; 0x1c008 <__epilogue_restores__+0x14>

00007a00 <display_clock>:
/// @see: rtc_read
/// @see: timegm()
/// @see: ascitime()
MEMSPACE
void display_clock()
{
    7a00:	a9 e2       	ldi	r26, 0x29	; 41
    7a02:	b0 e0       	ldi	r27, 0x00	; 0
    7a04:	e6 e0       	ldi	r30, 0x06	; 6
    7a06:	fd e3       	ldi	r31, 0x3D	; 61
    7a08:	0c 94 ee df 	jmp	0x1bfdc	; 0x1bfdc <__prologue_saves__+0x20>
    time_t seconds;
    tm_t tc;
    ts_t ts;

#ifdef RTC_SUPPORT
    if(rtc_read(&tc))
    7a0c:	ce 01       	movw	r24, r28
    7a0e:	08 96       	adiw	r24, 0x08	; 8
    7a10:	0e 94 87 2e 	call	0x5d0e	; 0x5d0e <rtc_read>
    7a14:	88 23       	and	r24, r24
    7a16:	29 f1       	breq	.+74     	; 0x7a62 <display_clock+0x62>
    {
        seconds = timegm(&tc);
    7a18:	ce 01       	movw	r24, r28
    7a1a:	08 96       	adiw	r24, 0x08	; 8
    7a1c:	b4 dc       	rcall	.-1688   	; 0x7386 <timegm>
    7a1e:	6e a3       	std	Y+38, r22	; 0x26
    7a20:	7f a3       	std	Y+39, r23	; 0x27
    7a22:	88 a7       	std	Y+40, r24	; 0x28
    7a24:	99 a7       	std	Y+41, r25	; 0x29
        printf("rtc seconds: %lu\n",seconds);
    7a26:	ed b7       	in	r30, 0x3d	; 61
    7a28:	fe b7       	in	r31, 0x3e	; 62
    7a2a:	64 83       	std	Z+4, r22	; 0x04
    7a2c:	75 83       	std	Z+5, r23	; 0x05
    7a2e:	86 83       	std	Z+6, r24	; 0x06
    7a30:	97 83       	std	Z+7, r25	; 0x07
    7a32:	86 ef       	ldi	r24, 0xF6	; 246
    7a34:	95 e0       	ldi	r25, 0x05	; 5
    7a36:	a0 e0       	ldi	r26, 0x00	; 0
    7a38:	81 83       	std	Z+1, r24	; 0x01
    7a3a:	92 83       	std	Z+2, r25	; 0x02
    7a3c:	a3 83       	std	Z+3, r26	; 0x03
    7a3e:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
        printf("rtc time:    %s\n",asctime(&tc));
    7a42:	ce 01       	movw	r24, r28
    7a44:	08 96       	adiw	r24, 0x08	; 8
    7a46:	50 df       	rcall	.-352    	; 0x78e8 <asctime>
    7a48:	ed b7       	in	r30, 0x3d	; 61
    7a4a:	fe b7       	in	r31, 0x3e	; 62
    7a4c:	95 83       	std	Z+5, r25	; 0x05
    7a4e:	84 83       	std	Z+4, r24	; 0x04
    7a50:	85 ee       	ldi	r24, 0xE5	; 229
    7a52:	95 e0       	ldi	r25, 0x05	; 5
    7a54:	a0 e0       	ldi	r26, 0x00	; 0
    7a56:	81 83       	std	Z+1, r24	; 0x01
    7a58:	92 83       	std	Z+2, r25	; 0x02
    7a5a:	a3 83       	std	Z+3, r26	; 0x03
    7a5c:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    7a60:	0a c0       	rjmp	.+20     	; 0x7a76 <display_clock+0x76>
            (int) tc.tm_wday);
#endif
    }
    else
    {
        printf("RTC read failed\n");
    7a62:	84 ed       	ldi	r24, 0xD4	; 212
    7a64:	95 e0       	ldi	r25, 0x05	; 5
    7a66:	a0 e0       	ldi	r26, 0x00	; 0
    7a68:	ed b7       	in	r30, 0x3d	; 61
    7a6a:	fe b7       	in	r31, 0x3e	; 62
    7a6c:	81 83       	std	Z+1, r24	; 0x01
    7a6e:	92 83       	std	Z+2, r25	; 0x02
    7a70:	a3 83       	std	Z+3, r26	; 0x03
    7a72:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    }
#endif  // RTC_SUPPORT

    clock_gettime(0, (ts_t *) &ts);
    7a76:	be 01       	movw	r22, r28
    7a78:	62 5e       	subi	r22, 0xE2	; 226
    7a7a:	7f 4f       	sbci	r23, 0xFF	; 255
    7a7c:	80 e0       	ldi	r24, 0x00	; 0
    7a7e:	90 e0       	ldi	r25, 0x00	; 0
    7a80:	0e 94 1a 33 	call	0x6634	; 0x6634 <clock_gettime>
    seconds = ts.tv_sec;
    7a84:	8e 8d       	ldd	r24, Y+30	; 0x1e
    7a86:	9f 8d       	ldd	r25, Y+31	; 0x1f
    7a88:	a8 a1       	ldd	r26, Y+32	; 0x20
    7a8a:	b9 a1       	ldd	r27, Y+33	; 0x21
    7a8c:	8e a3       	std	Y+38, r24	; 0x26
    7a8e:	9f a3       	std	Y+39, r25	; 0x27
    7a90:	a8 a7       	std	Y+40, r26	; 0x28
    7a92:	b9 a7       	std	Y+41, r27	; 0x29
    printf("clk seconds: %lu\n",seconds);
    7a94:	ed b7       	in	r30, 0x3d	; 61
    7a96:	fe b7       	in	r31, 0x3e	; 62
    7a98:	84 83       	std	Z+4, r24	; 0x04
    7a9a:	95 83       	std	Z+5, r25	; 0x05
    7a9c:	a6 83       	std	Z+6, r26	; 0x06
    7a9e:	b7 83       	std	Z+7, r27	; 0x07
    7aa0:	82 ec       	ldi	r24, 0xC2	; 194
    7aa2:	95 e0       	ldi	r25, 0x05	; 5
    7aa4:	a0 e0       	ldi	r26, 0x00	; 0
    7aa6:	81 83       	std	Z+1, r24	; 0x01
    7aa8:	92 83       	std	Z+2, r25	; 0x02
    7aaa:	a3 83       	std	Z+3, r26	; 0x03
    7aac:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    printf("clk time:    %s\n", asctime(gmtime(&seconds)));
    7ab0:	ce 01       	movw	r24, r28
    7ab2:	86 96       	adiw	r24, 0x26	; 38
    7ab4:	a9 d9       	rcall	.-3246   	; 0x6e08 <gmtime>
    7ab6:	18 df       	rcall	.-464    	; 0x78e8 <asctime>
    7ab8:	ed b7       	in	r30, 0x3d	; 61
    7aba:	fe b7       	in	r31, 0x3e	; 62
    7abc:	95 83       	std	Z+5, r25	; 0x05
    7abe:	84 83       	std	Z+4, r24	; 0x04
    7ac0:	81 eb       	ldi	r24, 0xB1	; 177
    7ac2:	95 e0       	ldi	r25, 0x05	; 5
    7ac4:	a0 e0       	ldi	r26, 0x00	; 0
    7ac6:	81 83       	std	Z+1, r24	; 0x01
    7ac8:	92 83       	std	Z+2, r25	; 0x02
    7aca:	a3 83       	std	Z+3, r26	; 0x03
    7acc:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
}
    7ad0:	a9 96       	adiw	r28, 0x29	; 41
    7ad2:	e2 e0       	ldi	r30, 0x02	; 2
    7ad4:	0c 94 0a e0 	jmp	0x1c014	; 0x1c014 <__epilogue_restores__+0x20>

00007ad8 <_putc_buffer_fn>:
    va_start(va, format);
    _printf_fn(&fn, format, va);
    va_end(va);

    return ((int)fn.sent);
}
    7ad8:	fc 01       	movw	r30, r24
    7ada:	84 81       	ldd	r24, Z+4	; 0x04
    7adc:	95 81       	ldd	r25, Z+5	; 0x05
    7ade:	00 97       	sbiw	r24, 0x00	; 0
    7ae0:	79 f0       	breq	.+30     	; 0x7b00 <_putc_buffer_fn+0x28>
    7ae2:	66 23       	and	r22, r22
    7ae4:	69 f0       	breq	.+26     	; 0x7b00 <_putc_buffer_fn+0x28>
    7ae6:	01 97       	sbiw	r24, 0x01	; 1
    7ae8:	95 83       	std	Z+5, r25	; 0x05
    7aea:	84 83       	std	Z+4, r24	; 0x04
    7aec:	86 81       	ldd	r24, Z+6	; 0x06
    7aee:	97 81       	ldd	r25, Z+7	; 0x07
    7af0:	01 96       	adiw	r24, 0x01	; 1
    7af2:	97 83       	std	Z+7, r25	; 0x07
    7af4:	86 83       	std	Z+6, r24	; 0x06
    7af6:	a2 81       	ldd	r26, Z+2	; 0x02
    7af8:	b3 81       	ldd	r27, Z+3	; 0x03
    7afa:	6d 93       	st	X+, r22
    7afc:	b3 83       	std	Z+3, r27	; 0x03
    7afe:	a2 83       	std	Z+2, r26	; 0x02
    7b00:	02 80       	ldd	r0, Z+2	; 0x02
    7b02:	f3 81       	ldd	r31, Z+3	; 0x03
    7b04:	e0 2d       	mov	r30, r0
    7b06:	10 82       	st	Z, r1
    7b08:	08 95       	ret

00007b0a <_putc_fn>:
    7b0a:	fc 01       	movw	r30, r24
    7b0c:	26 81       	ldd	r18, Z+6	; 0x06
    7b0e:	37 81       	ldd	r19, Z+7	; 0x07
    7b10:	2f 5f       	subi	r18, 0xFF	; 255
    7b12:	3f 4f       	sbci	r19, 0xFF	; 255
    7b14:	37 83       	std	Z+7, r19	; 0x07
    7b16:	26 83       	std	Z+6, r18	; 0x06
    7b18:	86 2f       	mov	r24, r22
    7b1a:	90 e0       	ldi	r25, 0x00	; 0
    7b1c:	0c 94 8e 75 	jmp	0xeb1c	; 0xeb1c <putchar>
    7b20:	08 95       	ret

00007b22 <bin2num>:
    7b22:	a0 e0       	ldi	r26, 0x00	; 0
    7b24:	b0 e0       	ldi	r27, 0x00	; 0
    7b26:	e7 e9       	ldi	r30, 0x97	; 151
    7b28:	fd e3       	ldi	r31, 0x3D	; 61
    7b2a:	0c 94 e5 df 	jmp	0x1bfca	; 0x1bfca <__prologue_saves__+0xe>
    7b2e:	ea 01       	movw	r28, r20
    7b30:	53 e0       	ldi	r21, 0x03	; 3
    7b32:	ee 0c       	add	r14, r14
    7b34:	ff 1c       	adc	r15, r15
    7b36:	5a 95       	dec	r21
    7b38:	e1 f7       	brne	.-8      	; 0x7b32 <bin2num+0x10>
    7b3a:	fc 01       	movw	r30, r24
    7b3c:	af 01       	movw	r20, r30
    7b3e:	48 1b       	sub	r20, r24
    7b40:	59 0b       	sbc	r21, r25
    7b42:	c4 17       	cp	r28, r20
    7b44:	d5 07       	cpc	r29, r21
    7b46:	14 f0       	brlt	.+4      	; 0x7b4c <bin2num+0x2a>
    7b48:	11 92       	st	Z+, r1
    7b4a:	f8 cf       	rjmp	.-16     	; 0x7b3c <bin2num+0x1a>
    7b4c:	41 e0       	ldi	r20, 0x01	; 1
    7b4e:	e4 1a       	sub	r14, r20
    7b50:	f1 08       	sbc	r15, r1
    7b52:	5b 01       	movw	r10, r22
    7b54:	42 e0       	ldi	r20, 0x02	; 2
    7b56:	a4 1a       	sub	r10, r20
    7b58:	b1 08       	sbc	r11, r1
    7b5a:	f7 fc       	sbrc	r15, 7
    7b5c:	3b c0       	rjmp	.+118    	; 0x7bd4 <bin2num+0xb2>
    7b5e:	f7 01       	movw	r30, r14
    7b60:	43 e0       	ldi	r20, 0x03	; 3
    7b62:	f5 95       	asr	r31
    7b64:	e7 95       	ror	r30
    7b66:	4a 95       	dec	r20
    7b68:	e1 f7       	brne	.-8      	; 0x7b62 <bin2num+0x40>
    7b6a:	e0 0f       	add	r30, r16
    7b6c:	f1 1f       	adc	r31, r17
    7b6e:	40 81       	ld	r20, Z
    7b70:	50 e0       	ldi	r21, 0x00	; 0
    7b72:	f7 01       	movw	r30, r14
    7b74:	e7 70       	andi	r30, 0x07	; 7
    7b76:	ff 27       	eor	r31, r31
    7b78:	02 c0       	rjmp	.+4      	; 0x7b7e <bin2num+0x5c>
    7b7a:	55 95       	asr	r21
    7b7c:	47 95       	ror	r20
    7b7e:	ea 95       	dec	r30
    7b80:	e2 f7       	brpl	.-8      	; 0x7b7a <bin2num+0x58>
    7b82:	41 70       	andi	r20, 0x01	; 1
    7b84:	55 27       	eor	r21, r21
    7b86:	dc 01       	movw	r26, r24
    7b88:	e0 e0       	ldi	r30, 0x00	; 0
    7b8a:	f0 e0       	ldi	r31, 0x00	; 0
    7b8c:	ec 17       	cp	r30, r28
    7b8e:	fd 07       	cpc	r31, r29
    7b90:	ec f4       	brge	.+58     	; 0x7bcc <bin2num+0xaa>
    7b92:	ea 15       	cp	r30, r10
    7b94:	fb 05       	cpc	r31, r11
    7b96:	4c f0       	brlt	.+18     	; 0x7baa <bin2num+0x88>
    7b98:	dc 01       	movw	r26, r24
    7b9a:	ae 0f       	add	r26, r30
    7b9c:	bf 1f       	adc	r27, r31
    7b9e:	1c 92       	st	X, r1
    7ba0:	41 e0       	ldi	r20, 0x01	; 1
    7ba2:	e4 1a       	sub	r14, r20
    7ba4:	f1 08       	sbc	r15, r1
    7ba6:	ef 01       	movw	r28, r30
    7ba8:	d8 cf       	rjmp	.-80     	; 0x7b5a <bin2num+0x38>
    7baa:	9c 90       	ld	r9, X
    7bac:	99 0c       	add	r9, r9
    7bae:	94 2a       	or	r9, r20
    7bb0:	49 2d       	mov	r20, r9
    7bb2:	50 e0       	ldi	r21, 0x00	; 0
    7bb4:	42 17       	cp	r20, r18
    7bb6:	53 07       	cpc	r21, r19
    7bb8:	24 f0       	brlt	.+8      	; 0x7bc2 <bin2num+0xa0>
    7bba:	92 1a       	sub	r9, r18
    7bbc:	41 e0       	ldi	r20, 0x01	; 1
    7bbe:	50 e0       	ldi	r21, 0x00	; 0
    7bc0:	02 c0       	rjmp	.+4      	; 0x7bc6 <bin2num+0xa4>
    7bc2:	40 e0       	ldi	r20, 0x00	; 0
    7bc4:	50 e0       	ldi	r21, 0x00	; 0
    7bc6:	9d 92       	st	X+, r9
    7bc8:	31 96       	adiw	r30, 0x01	; 1
    7bca:	e0 cf       	rjmp	.-64     	; 0x7b8c <bin2num+0x6a>
    7bcc:	41 15       	cp	r20, r1
    7bce:	51 05       	cpc	r21, r1
    7bd0:	01 f7       	brne	.-64     	; 0x7b92 <bin2num+0x70>
    7bd2:	e2 cf       	rjmp	.-60     	; 0x7b98 <bin2num+0x76>
    7bd4:	fc 01       	movw	r30, r24
    7bd6:	9f 01       	movw	r18, r30
    7bd8:	28 1b       	sub	r18, r24
    7bda:	39 0b       	sbc	r19, r25
    7bdc:	2c 17       	cp	r18, r28
    7bde:	3d 07       	cpc	r19, r29
    7be0:	4c f4       	brge	.+18     	; 0x7bf4 <bin2num+0xd2>
    7be2:	20 81       	ld	r18, Z
    7be4:	2a 30       	cpi	r18, 0x0A	; 10
    7be6:	10 f4       	brcc	.+4      	; 0x7bec <bin2num+0xca>
    7be8:	20 5d       	subi	r18, 0xD0	; 208
    7bea:	01 c0       	rjmp	.+2      	; 0x7bee <bin2num+0xcc>
    7bec:	29 5a       	subi	r18, 0xA9	; 169
    7bee:	20 83       	st	Z, r18
    7bf0:	31 96       	adiw	r30, 0x01	; 1
    7bf2:	f1 cf       	rjmp	.-30     	; 0x7bd6 <bin2num+0xb4>
    7bf4:	9e 01       	movw	r18, r28
    7bf6:	d7 ff       	sbrs	r29, 7
    7bf8:	02 c0       	rjmp	.+4      	; 0x7bfe <bin2num+0xdc>
    7bfa:	20 e0       	ldi	r18, 0x00	; 0
    7bfc:	30 e0       	ldi	r19, 0x00	; 0
    7bfe:	c1 14       	cp	r12, r1
    7c00:	d1 04       	cpc	r13, r1
    7c02:	61 f0       	breq	.+24     	; 0x7c1c <bin2num+0xfa>
    7c04:	61 50       	subi	r22, 0x01	; 1
    7c06:	71 09       	sbc	r23, r1
    7c08:	26 17       	cp	r18, r22
    7c0a:	37 07       	cpc	r19, r23
    7c0c:	3c f4       	brge	.+14     	; 0x7c1c <bin2num+0xfa>
    7c0e:	fc 01       	movw	r30, r24
    7c10:	e2 0f       	add	r30, r18
    7c12:	f3 1f       	adc	r31, r19
    7c14:	c0 82       	st	Z, r12
    7c16:	21 96       	adiw	r28, 0x01	; 1
    7c18:	2f 5f       	subi	r18, 0xFF	; 255
    7c1a:	3f 4f       	sbci	r19, 0xFF	; 255
    7c1c:	fc 01       	movw	r30, r24
    7c1e:	e2 0f       	add	r30, r18
    7c20:	f3 1f       	adc	r31, r19
    7c22:	10 82       	st	Z, r1
    7c24:	0e 94 d1 30 	call	0x61a2	; 0x61a2 <reverse>
    7c28:	ce 01       	movw	r24, r28
    7c2a:	cd b7       	in	r28, 0x3d	; 61
    7c2c:	de b7       	in	r29, 0x3e	; 62
    7c2e:	eb e0       	ldi	r30, 0x0B	; 11
    7c30:	0c 94 01 e0 	jmp	0x1c002	; 0x1c002 <__epilogue_restores__+0xe>

00007c34 <pch_init>:
    7c34:	ee e3       	ldi	r30, 0x3E	; 62
    7c36:	fa e1       	ldi	r31, 0x1A	; 26
    7c38:	91 83       	std	Z+1, r25	; 0x01
    7c3a:	80 83       	st	Z, r24
    7c3c:	13 82       	std	Z+3, r1	; 0x03
    7c3e:	12 82       	std	Z+2, r1	; 0x02
    7c40:	61 50       	subi	r22, 0x01	; 1
    7c42:	71 09       	sbc	r23, r1
    7c44:	75 83       	std	Z+5, r23	; 0x05
    7c46:	64 83       	std	Z+4, r22	; 0x04
    7c48:	fc 01       	movw	r30, r24
    7c4a:	10 82       	st	Z, r1
    7c4c:	08 95       	ret

00007c4e <pch>:
    7c4e:	20 91 40 1a 	lds	r18, 0x1A40	; 0x801a40 <_pch+0x2>
    7c52:	30 91 41 1a 	lds	r19, 0x1A41	; 0x801a41 <_pch+0x3>
    7c56:	60 91 42 1a 	lds	r22, 0x1A42	; 0x801a42 <_pch+0x4>
    7c5a:	70 91 43 1a 	lds	r23, 0x1A43	; 0x801a43 <_pch+0x5>
    7c5e:	40 91 3e 1a 	lds	r20, 0x1A3E	; 0x801a3e <_pch>
    7c62:	50 91 3f 1a 	lds	r21, 0x1A3F	; 0x801a3f <_pch+0x1>
    7c66:	26 17       	cp	r18, r22
    7c68:	37 07       	cpc	r19, r23
    7c6a:	64 f4       	brge	.+24     	; 0x7c84 <pch+0x36>
    7c6c:	b9 01       	movw	r22, r18
    7c6e:	6f 5f       	subi	r22, 0xFF	; 255
    7c70:	7f 4f       	sbci	r23, 0xFF	; 255
    7c72:	70 93 41 1a 	sts	0x1A41, r23	; 0x801a41 <_pch+0x3>
    7c76:	60 93 40 1a 	sts	0x1A40, r22	; 0x801a40 <_pch+0x2>
    7c7a:	fa 01       	movw	r30, r20
    7c7c:	e2 0f       	add	r30, r18
    7c7e:	f3 1f       	adc	r31, r19
    7c80:	80 83       	st	Z, r24
    7c82:	04 c0       	rjmp	.+8      	; 0x7c8c <pch+0x3e>
    7c84:	fa 01       	movw	r30, r20
    7c86:	e2 0f       	add	r30, r18
    7c88:	f3 1f       	adc	r31, r19
    7c8a:	10 82       	st	Z, r1
    7c8c:	80 91 40 1a 	lds	r24, 0x1A40	; 0x801a40 <_pch+0x2>
    7c90:	90 91 41 1a 	lds	r25, 0x1A41	; 0x801a41 <_pch+0x3>
    7c94:	08 95       	ret

00007c96 <p_ntoa>:
    7c96:	af 92       	push	r10
    7c98:	cf 92       	push	r12
    7c9a:	df 92       	push	r13
    7c9c:	ef 92       	push	r14
    7c9e:	ff 92       	push	r15
    7ca0:	0f 93       	push	r16
    7ca2:	1f 93       	push	r17
    7ca4:	cf 93       	push	r28
    7ca6:	df 93       	push	r29
    7ca8:	dc 01       	movw	r26, r24
    7caa:	eb 01       	movw	r28, r22
    7cac:	fa 01       	movw	r30, r20
    7cae:	b9 01       	movw	r22, r18
    7cb0:	98 01       	movw	r18, r16
    7cb2:	a6 01       	movw	r20, r12
    7cb4:	9a 2d       	mov	r25, r10
    7cb6:	a5 fa       	bst	r10, 5
    7cb8:	cc 24       	eor	r12, r12
    7cba:	c0 f8       	bld	r12, 0
    7cbc:	a6 fc       	sbrc	r10, 6
    7cbe:	07 c0       	rjmp	.+14     	; 0x7cce <p_ntoa+0x38>
    7cc0:	a2 fc       	sbrc	r10, 2
    7cc2:	08 c0       	rjmp	.+16     	; 0x7cd4 <p_ntoa+0x3e>
    7cc4:	a4 fe       	sbrs	r10, 4
    7cc6:	09 c0       	rjmp	.+18     	; 0x7cda <p_ntoa+0x44>
    7cc8:	00 e2       	ldi	r16, 0x20	; 32
    7cca:	10 e0       	ldi	r17, 0x00	; 0
    7ccc:	08 c0       	rjmp	.+16     	; 0x7cde <p_ntoa+0x48>
    7cce:	0d e2       	ldi	r16, 0x2D	; 45
    7cd0:	10 e0       	ldi	r17, 0x00	; 0
    7cd2:	05 c0       	rjmp	.+10     	; 0x7cde <p_ntoa+0x48>
    7cd4:	0b e2       	ldi	r16, 0x2B	; 43
    7cd6:	10 e0       	ldi	r17, 0x00	; 0
    7cd8:	02 c0       	rjmp	.+4      	; 0x7cde <p_ntoa+0x48>
    7cda:	00 e0       	ldi	r16, 0x00	; 0
    7cdc:	10 e0       	ldi	r17, 0x00	; 0
    7cde:	95 ff       	sbrs	r25, 5
    7ce0:	04 c0       	rjmp	.+8      	; 0x7cea <p_ntoa+0x54>
    7ce2:	89 2f       	mov	r24, r25
    7ce4:	8a 70       	andi	r24, 0x0A	; 10
    7ce6:	09 f0       	breq	.+2      	; 0x7cea <p_ntoa+0x54>
    7ce8:	c1 2c       	mov	r12, r1
    7cea:	c0 fa       	bst	r12, 0
    7cec:	95 f9       	bld	r25, 5
    7cee:	89 2f       	mov	r24, r25
    7cf0:	82 70       	andi	r24, 0x02	; 2
    7cf2:	c8 2e       	mov	r12, r24
    7cf4:	91 fd       	sbrc	r25, 1
    7cf6:	02 c0       	rjmp	.+4      	; 0x7cfc <p_ntoa+0x66>
    7cf8:	40 e0       	ldi	r20, 0x00	; 0
    7cfa:	50 e0       	ldi	r21, 0x00	; 0
    7cfc:	89 2f       	mov	r24, r25
    7cfe:	83 70       	andi	r24, 0x03	; 3
    7d00:	11 f4       	brne	.+4      	; 0x7d06 <p_ntoa+0x70>
    7d02:	41 e0       	ldi	r20, 0x01	; 1
    7d04:	50 e0       	ldi	r21, 0x00	; 0
    7d06:	90 ff       	sbrs	r25, 0
    7d08:	0c c0       	rjmp	.+24     	; 0x7d22 <p_ntoa+0x8c>
    7d0a:	95 fd       	sbrc	r25, 5
    7d0c:	05 c0       	rjmp	.+10     	; 0x7d18 <p_ntoa+0x82>
    7d0e:	c1 10       	cpse	r12, r1
    7d10:	08 c0       	rjmp	.+16     	; 0x7d22 <p_ntoa+0x8c>
    7d12:	41 e0       	ldi	r20, 0x01	; 1
    7d14:	50 e0       	ldi	r21, 0x00	; 0
    7d16:	05 c0       	rjmp	.+10     	; 0x7d22 <p_ntoa+0x8c>
    7d18:	94 75       	andi	r25, 0x54	; 84
    7d1a:	a7 01       	movw	r20, r14
    7d1c:	11 f0       	breq	.+4      	; 0x7d22 <p_ntoa+0x8c>
    7d1e:	41 50       	subi	r20, 0x01	; 1
    7d20:	51 09       	sbc	r21, r1
    7d22:	68 01       	movw	r12, r16
    7d24:	7e 01       	movw	r14, r28
    7d26:	8d 01       	movw	r16, r26
    7d28:	cf 01       	movw	r24, r30
    7d2a:	fb de       	rcall	.-522    	; 0x7b22 <bin2num>
    7d2c:	df 91       	pop	r29
    7d2e:	cf 91       	pop	r28
    7d30:	1f 91       	pop	r17
    7d32:	0f 91       	pop	r16
    7d34:	ff 90       	pop	r15
    7d36:	ef 90       	pop	r14
    7d38:	df 90       	pop	r13
    7d3a:	cf 90       	pop	r12
    7d3c:	af 90       	pop	r10
    7d3e:	08 95       	ret

00007d40 <p_ftoa>:
    7d40:	2f 92       	push	r2
    7d42:	3f 92       	push	r3
    7d44:	4f 92       	push	r4
    7d46:	5f 92       	push	r5
    7d48:	6f 92       	push	r6
    7d4a:	7f 92       	push	r7
    7d4c:	8f 92       	push	r8
    7d4e:	9f 92       	push	r9
    7d50:	af 92       	push	r10
    7d52:	bf 92       	push	r11
    7d54:	cf 92       	push	r12
    7d56:	ef 92       	push	r14
    7d58:	ff 92       	push	r15
    7d5a:	0f 93       	push	r16
    7d5c:	1f 93       	push	r17
    7d5e:	cf 93       	push	r28
    7d60:	df 93       	push	r29
    7d62:	4b 01       	movw	r8, r22
    7d64:	5c 01       	movw	r10, r24
    7d66:	1a 01       	movw	r2, r20
    7d68:	38 01       	movw	r6, r16
    7d6a:	c6 fa       	bst	r12, 6
    7d6c:	cc 27       	eor	r28, r28
    7d6e:	c0 f9       	bld	r28, 0
    7d70:	b9 01       	movw	r22, r18
    7d72:	ca 01       	movw	r24, r20
    7d74:	5f df       	rcall	.-322    	; 0x7c34 <pch_init>
    7d76:	20 e0       	ldi	r18, 0x00	; 0
    7d78:	30 e0       	ldi	r19, 0x00	; 0
    7d7a:	a9 01       	movw	r20, r18
    7d7c:	c5 01       	movw	r24, r10
    7d7e:	b4 01       	movw	r22, r8
    7d80:	0e 94 9c e0 	call	0x1c138	; 0x1c138 <__cmpsf2>
    7d84:	87 ff       	sbrs	r24, 7
    7d86:	05 c0       	rjmp	.+10     	; 0x7d92 <p_ftoa+0x52>
    7d88:	b7 fa       	bst	r11, 7
    7d8a:	b0 94       	com	r11
    7d8c:	b7 f8       	bld	r11, 7
    7d8e:	b0 94       	com	r11
    7d90:	c1 e0       	ldi	r28, 0x01	; 1
    7d92:	c0 fb       	bst	r28, 0
    7d94:	c6 f8       	bld	r12, 6
    7d96:	c6 fe       	sbrs	r12, 6
    7d98:	02 c0       	rjmp	.+4      	; 0x7d9e <p_ftoa+0x5e>
    7d9a:	8d e2       	ldi	r24, 0x2D	; 45
    7d9c:	07 c0       	rjmp	.+14     	; 0x7dac <p_ftoa+0x6c>
    7d9e:	c2 fe       	sbrs	r12, 2
    7da0:	02 c0       	rjmp	.+4      	; 0x7da6 <p_ftoa+0x66>
    7da2:	8b e2       	ldi	r24, 0x2B	; 43
    7da4:	03 c0       	rjmp	.+6      	; 0x7dac <p_ftoa+0x6c>
    7da6:	c4 fe       	sbrs	r12, 4
    7da8:	02 c0       	rjmp	.+4      	; 0x7dae <p_ftoa+0x6e>
    7daa:	80 e2       	ldi	r24, 0x20	; 32
    7dac:	50 df       	rcall	.-352    	; 0x7c4e <pch>
    7dae:	e7 01       	movw	r28, r14
    7db0:	f7 fe       	sbrs	r15, 7
    7db2:	02 c0       	rjmp	.+4      	; 0x7db8 <p_ftoa+0x78>
    7db4:	c0 e0       	ldi	r28, 0x00	; 0
    7db6:	d0 e0       	ldi	r29, 0x00	; 0
    7db8:	20 e0       	ldi	r18, 0x00	; 0
    7dba:	30 e0       	ldi	r19, 0x00	; 0
    7dbc:	a9 01       	movw	r20, r18
    7dbe:	c5 01       	movw	r24, r10
    7dc0:	b4 01       	movw	r22, r8
    7dc2:	0e 94 9c e0 	call	0x1c138	; 0x1c138 <__cmpsf2>
    7dc6:	88 23       	and	r24, r24
    7dc8:	d1 f1       	breq	.+116    	; 0x7e3e <p_ftoa+0xfe>
    7dca:	c1 fe       	sbrs	r12, 1
    7dcc:	11 c0       	rjmp	.+34     	; 0x7df0 <p_ftoa+0xb0>
    7dce:	8e 01       	movw	r16, r28
    7dd0:	60 e0       	ldi	r22, 0x00	; 0
    7dd2:	70 e0       	ldi	r23, 0x00	; 0
    7dd4:	80 e0       	ldi	r24, 0x00	; 0
    7dd6:	9f e3       	ldi	r25, 0x3F	; 63
    7dd8:	01 15       	cp	r16, r1
    7dda:	11 05       	cpc	r17, r1
    7ddc:	69 f0       	breq	.+26     	; 0x7df8 <p_ftoa+0xb8>
    7dde:	20 e0       	ldi	r18, 0x00	; 0
    7de0:	30 e0       	ldi	r19, 0x00	; 0
    7de2:	40 e2       	ldi	r20, 0x20	; 32
    7de4:	51 e4       	ldi	r21, 0x41	; 65
    7de6:	0e 94 a0 e0 	call	0x1c140	; 0x1c140 <__divsf3>
    7dea:	01 50       	subi	r16, 0x01	; 1
    7dec:	11 09       	sbc	r17, r1
    7dee:	f4 cf       	rjmp	.-24     	; 0x7dd8 <p_ftoa+0x98>
    7df0:	60 e0       	ldi	r22, 0x00	; 0
    7df2:	70 e0       	ldi	r23, 0x00	; 0
    7df4:	80 e0       	ldi	r24, 0x00	; 0
    7df6:	9f e3       	ldi	r25, 0x3F	; 63
    7df8:	9b 01       	movw	r18, r22
    7dfa:	ac 01       	movw	r20, r24
    7dfc:	c5 01       	movw	r24, r10
    7dfe:	b4 01       	movw	r22, r8
    7e00:	0e 94 38 e0 	call	0x1c070	; 0x1c070 <__addsf3>
    7e04:	4b 01       	movw	r8, r22
    7e06:	5c 01       	movw	r10, r24
    7e08:	ee 24       	eor	r14, r14
    7e0a:	e3 94       	inc	r14
    7e0c:	f1 2c       	mov	r15, r1
    7e0e:	20 e0       	ldi	r18, 0x00	; 0
    7e10:	30 e0       	ldi	r19, 0x00	; 0
    7e12:	40 e2       	ldi	r20, 0x20	; 32
    7e14:	51 e4       	ldi	r21, 0x41	; 65
    7e16:	c5 01       	movw	r24, r10
    7e18:	b4 01       	movw	r22, r8
    7e1a:	0e 94 eb e1 	call	0x1c3d6	; 0x1c3d6 <__gesf2>
    7e1e:	87 fd       	sbrc	r24, 7
    7e20:	11 c0       	rjmp	.+34     	; 0x7e44 <p_ftoa+0x104>
    7e22:	2f ef       	ldi	r18, 0xFF	; 255
    7e24:	e2 1a       	sub	r14, r18
    7e26:	f2 0a       	sbc	r15, r18
    7e28:	20 e0       	ldi	r18, 0x00	; 0
    7e2a:	30 e0       	ldi	r19, 0x00	; 0
    7e2c:	40 e2       	ldi	r20, 0x20	; 32
    7e2e:	51 e4       	ldi	r21, 0x41	; 65
    7e30:	c5 01       	movw	r24, r10
    7e32:	b4 01       	movw	r22, r8
    7e34:	0e 94 a0 e0 	call	0x1c140	; 0x1c140 <__divsf3>
    7e38:	4b 01       	movw	r8, r22
    7e3a:	5c 01       	movw	r10, r24
    7e3c:	e8 cf       	rjmp	.-48     	; 0x7e0e <p_ftoa+0xce>
    7e3e:	ee 24       	eor	r14, r14
    7e40:	e3 94       	inc	r14
    7e42:	f1 2c       	mov	r15, r1
    7e44:	8c 2d       	mov	r24, r12
    7e46:	88 72       	andi	r24, 0x28	; 40
    7e48:	80 32       	cpi	r24, 0x20	; 32
    7e4a:	b9 f4       	brne	.+46     	; 0x7e7a <p_ftoa+0x13a>
    7e4c:	83 01       	movw	r16, r6
    7e4e:	0e 19       	sub	r16, r14
    7e50:	1f 09       	sbc	r17, r15
    7e52:	80 91 40 1a 	lds	r24, 0x1A40	; 0x801a40 <_pch+0x2>
    7e56:	90 91 41 1a 	lds	r25, 0x1A41	; 0x801a41 <_pch+0x3>
    7e5a:	08 1b       	sub	r16, r24
    7e5c:	19 0b       	sbc	r17, r25
    7e5e:	c1 fe       	sbrs	r12, 1
    7e60:	06 c0       	rjmp	.+12     	; 0x7e6e <p_ftoa+0x12e>
    7e62:	20 97       	sbiw	r28, 0x00	; 0
    7e64:	21 f0       	breq	.+8      	; 0x7e6e <p_ftoa+0x12e>
    7e66:	0c 1b       	sub	r16, r28
    7e68:	1d 0b       	sbc	r17, r29
    7e6a:	01 50       	subi	r16, 0x01	; 1
    7e6c:	11 09       	sbc	r17, r1
    7e6e:	10 16       	cp	r1, r16
    7e70:	11 06       	cpc	r1, r17
    7e72:	1c f4       	brge	.+6      	; 0x7e7a <p_ftoa+0x13a>
    7e74:	80 e3       	ldi	r24, 0x30	; 48
    7e76:	eb de       	rcall	.-554    	; 0x7c4e <pch>
    7e78:	f8 cf       	rjmp	.-16     	; 0x7e6a <p_ftoa+0x12a>
    7e7a:	c5 01       	movw	r24, r10
    7e7c:	b4 01       	movw	r22, r8
    7e7e:	0e 94 08 e1 	call	0x1c210	; 0x1c210 <__fixsfsi>
    7e82:	2b 01       	movw	r4, r22
    7e84:	3c 01       	movw	r6, r24
    7e86:	80 e3       	ldi	r24, 0x30	; 48
    7e88:	84 0d       	add	r24, r4
    7e8a:	e1 de       	rcall	.-574    	; 0x7c4e <pch>
    7e8c:	b2 01       	movw	r22, r4
    7e8e:	55 0c       	add	r5, r5
    7e90:	88 0b       	sbc	r24, r24
    7e92:	99 0b       	sbc	r25, r25
    7e94:	0e 94 3b e1 	call	0x1c276	; 0x1c276 <__floatsisf>
    7e98:	9b 01       	movw	r18, r22
    7e9a:	ac 01       	movw	r20, r24
    7e9c:	c5 01       	movw	r24, r10
    7e9e:	b4 01       	movw	r22, r8
    7ea0:	0e 94 37 e0 	call	0x1c06e	; 0x1c06e <__subsf3>
    7ea4:	21 e0       	ldi	r18, 0x01	; 1
    7ea6:	e2 1a       	sub	r14, r18
    7ea8:	f1 08       	sbc	r15, r1
    7eaa:	20 e0       	ldi	r18, 0x00	; 0
    7eac:	30 e0       	ldi	r19, 0x00	; 0
    7eae:	40 e2       	ldi	r20, 0x20	; 32
    7eb0:	51 e4       	ldi	r21, 0x41	; 65
    7eb2:	0e 94 ef e1 	call	0x1c3de	; 0x1c3de <__mulsf3>
    7eb6:	4b 01       	movw	r8, r22
    7eb8:	5c 01       	movw	r10, r24
    7eba:	e1 14       	cp	r14, r1
    7ebc:	f1 04       	cpc	r15, r1
    7ebe:	e9 f6       	brne	.-70     	; 0x7e7a <p_ftoa+0x13a>
    7ec0:	c1 fc       	sbrc	r12, 1
    7ec2:	1c c0       	rjmp	.+56     	; 0x7efc <p_ftoa+0x1bc>
    7ec4:	80 e0       	ldi	r24, 0x00	; 0
    7ec6:	c3 de       	rcall	.-634    	; 0x7c4e <pch>
    7ec8:	f1 01       	movw	r30, r2
    7eca:	01 90       	ld	r0, Z+
    7ecc:	00 20       	and	r0, r0
    7ece:	e9 f7       	brne	.-6      	; 0x7eca <p_ftoa+0x18a>
    7ed0:	31 97       	sbiw	r30, 0x01	; 1
    7ed2:	cf 01       	movw	r24, r30
    7ed4:	82 19       	sub	r24, r2
    7ed6:	93 09       	sbc	r25, r3
    7ed8:	df 91       	pop	r29
    7eda:	cf 91       	pop	r28
    7edc:	1f 91       	pop	r17
    7ede:	0f 91       	pop	r16
    7ee0:	ff 90       	pop	r15
    7ee2:	ef 90       	pop	r14
    7ee4:	cf 90       	pop	r12
    7ee6:	bf 90       	pop	r11
    7ee8:	af 90       	pop	r10
    7eea:	9f 90       	pop	r9
    7eec:	8f 90       	pop	r8
    7eee:	7f 90       	pop	r7
    7ef0:	6f 90       	pop	r6
    7ef2:	5f 90       	pop	r5
    7ef4:	4f 90       	pop	r4
    7ef6:	3f 90       	pop	r3
    7ef8:	2f 90       	pop	r2
    7efa:	08 95       	ret
    7efc:	20 97       	sbiw	r28, 0x00	; 0
    7efe:	11 f3       	breq	.-60     	; 0x7ec4 <p_ftoa+0x184>
    7f00:	8e e2       	ldi	r24, 0x2E	; 46
    7f02:	a5 de       	rcall	.-694    	; 0x7c4e <pch>
    7f04:	c5 01       	movw	r24, r10
    7f06:	b4 01       	movw	r22, r8
    7f08:	0e 94 08 e1 	call	0x1c210	; 0x1c210 <__fixsfsi>
    7f0c:	2b 01       	movw	r4, r22
    7f0e:	3c 01       	movw	r6, r24
    7f10:	07 2e       	mov	r0, r23
    7f12:	00 0c       	add	r0, r0
    7f14:	88 0b       	sbc	r24, r24
    7f16:	99 0b       	sbc	r25, r25
    7f18:	0e 94 3b e1 	call	0x1c276	; 0x1c276 <__floatsisf>
    7f1c:	9b 01       	movw	r18, r22
    7f1e:	ac 01       	movw	r20, r24
    7f20:	c5 01       	movw	r24, r10
    7f22:	b4 01       	movw	r22, r8
    7f24:	0e 94 37 e0 	call	0x1c06e	; 0x1c06e <__subsf3>
    7f28:	4b 01       	movw	r8, r22
    7f2a:	5c 01       	movw	r10, r24
    7f2c:	80 e3       	ldi	r24, 0x30	; 48
    7f2e:	84 0d       	add	r24, r4
    7f30:	8e de       	rcall	.-740    	; 0x7c4e <pch>
    7f32:	21 97       	sbiw	r28, 0x01	; 1
    7f34:	20 e0       	ldi	r18, 0x00	; 0
    7f36:	30 e0       	ldi	r19, 0x00	; 0
    7f38:	40 e2       	ldi	r20, 0x20	; 32
    7f3a:	51 e4       	ldi	r21, 0x41	; 65
    7f3c:	c5 01       	movw	r24, r10
    7f3e:	b4 01       	movw	r22, r8
    7f40:	0e 94 ef e1 	call	0x1c3de	; 0x1c3de <__mulsf3>
    7f44:	4b 01       	movw	r8, r22
    7f46:	5c 01       	movw	r10, r24
    7f48:	20 97       	sbiw	r28, 0x00	; 0
    7f4a:	e1 f6       	brne	.-72     	; 0x7f04 <p_ftoa+0x1c4>
    7f4c:	bb cf       	rjmp	.-138    	; 0x7ec4 <p_ftoa+0x184>

00007f4e <p_etoa>:
    7f4e:	ad e0       	ldi	r26, 0x0D	; 13
    7f50:	b0 e0       	ldi	r27, 0x00	; 0
    7f52:	ed ea       	ldi	r30, 0xAD	; 173
    7f54:	ff e3       	ldi	r31, 0x3F	; 63
    7f56:	0c 94 de df 	jmp	0x1bfbc	; 0x1bfbc <__prologue_saves__>
    7f5a:	4b 01       	movw	r8, r22
    7f5c:	5c 01       	movw	r10, r24
    7f5e:	5b 87       	std	Y+11, r21	; 0x0b
    7f60:	4a 87       	std	Y+10, r20	; 0x0a
    7f62:	1d 87       	std	Y+13, r17	; 0x0d
    7f64:	0c 87       	std	Y+12, r16	; 0x0c
    7f66:	3c 2c       	mov	r3, r12
    7f68:	c6 fa       	bst	r12, 6
    7f6a:	11 27       	eor	r17, r17
    7f6c:	10 f9       	bld	r17, 0
    7f6e:	b9 01       	movw	r22, r18
    7f70:	ca 01       	movw	r24, r20
    7f72:	60 de       	rcall	.-832    	; 0x7c34 <pch_init>
    7f74:	20 e0       	ldi	r18, 0x00	; 0
    7f76:	30 e0       	ldi	r19, 0x00	; 0
    7f78:	a9 01       	movw	r20, r18
    7f7a:	c5 01       	movw	r24, r10
    7f7c:	b4 01       	movw	r22, r8
    7f7e:	0e 94 9c e0 	call	0x1c138	; 0x1c138 <__cmpsf2>
    7f82:	87 ff       	sbrs	r24, 7
    7f84:	05 c0       	rjmp	.+10     	; 0x7f90 <p_etoa+0x42>
    7f86:	b7 fa       	bst	r11, 7
    7f88:	b0 94       	com	r11
    7f8a:	b7 f8       	bld	r11, 7
    7f8c:	b0 94       	com	r11
    7f8e:	11 e0       	ldi	r17, 0x01	; 1
    7f90:	10 fb       	bst	r17, 0
    7f92:	36 f8       	bld	r3, 6
    7f94:	36 fe       	sbrs	r3, 6
    7f96:	02 c0       	rjmp	.+4      	; 0x7f9c <p_etoa+0x4e>
    7f98:	8d e2       	ldi	r24, 0x2D	; 45
    7f9a:	07 c0       	rjmp	.+14     	; 0x7faa <p_etoa+0x5c>
    7f9c:	32 fe       	sbrs	r3, 2
    7f9e:	02 c0       	rjmp	.+4      	; 0x7fa4 <p_etoa+0x56>
    7fa0:	8b e2       	ldi	r24, 0x2B	; 43
    7fa2:	03 c0       	rjmp	.+6      	; 0x7faa <p_etoa+0x5c>
    7fa4:	34 fe       	sbrs	r3, 4
    7fa6:	02 c0       	rjmp	.+4      	; 0x7fac <p_etoa+0x5e>
    7fa8:	80 e2       	ldi	r24, 0x20	; 32
    7faa:	51 de       	rcall	.-862    	; 0x7c4e <pch>
    7fac:	37 01       	movw	r6, r14
    7fae:	f7 fe       	sbrs	r15, 7
    7fb0:	02 c0       	rjmp	.+4      	; 0x7fb6 <p_etoa+0x68>
    7fb2:	61 2c       	mov	r6, r1
    7fb4:	71 2c       	mov	r7, r1
    7fb6:	19 86       	std	Y+9, r1	; 0x09
    7fb8:	18 86       	std	Y+8, r1	; 0x08
    7fba:	20 e0       	ldi	r18, 0x00	; 0
    7fbc:	30 e0       	ldi	r19, 0x00	; 0
    7fbe:	a9 01       	movw	r20, r18
    7fc0:	c5 01       	movw	r24, r10
    7fc2:	b4 01       	movw	r22, r8
    7fc4:	0e 94 9c e0 	call	0x1c138	; 0x1c138 <__cmpsf2>
    7fc8:	23 2d       	mov	r18, r3
    7fca:	22 70       	andi	r18, 0x02	; 2
    7fcc:	22 2e       	mov	r2, r18
    7fce:	88 23       	and	r24, r24
    7fd0:	09 f4       	brne	.+2      	; 0x7fd4 <p_etoa+0x86>
    7fd2:	70 c0       	rjmp	.+224    	; 0x80b4 <p_etoa+0x166>
    7fd4:	22 23       	and	r18, r18
    7fd6:	b1 f0       	breq	.+44     	; 0x8004 <p_etoa+0xb6>
    7fd8:	83 01       	movw	r16, r6
    7fda:	c1 2c       	mov	r12, r1
    7fdc:	d1 2c       	mov	r13, r1
    7fde:	e1 2c       	mov	r14, r1
    7fe0:	2f e3       	ldi	r18, 0x3F	; 63
    7fe2:	f2 2e       	mov	r15, r18
    7fe4:	01 15       	cp	r16, r1
    7fe6:	11 05       	cpc	r17, r1
    7fe8:	91 f0       	breq	.+36     	; 0x800e <p_etoa+0xc0>
    7fea:	20 e0       	ldi	r18, 0x00	; 0
    7fec:	30 e0       	ldi	r19, 0x00	; 0
    7fee:	40 e2       	ldi	r20, 0x20	; 32
    7ff0:	51 e4       	ldi	r21, 0x41	; 65
    7ff2:	c7 01       	movw	r24, r14
    7ff4:	b6 01       	movw	r22, r12
    7ff6:	0e 94 a0 e0 	call	0x1c140	; 0x1c140 <__divsf3>
    7ffa:	6b 01       	movw	r12, r22
    7ffc:	7c 01       	movw	r14, r24
    7ffe:	01 50       	subi	r16, 0x01	; 1
    8000:	11 09       	sbc	r17, r1
    8002:	f0 cf       	rjmp	.-32     	; 0x7fe4 <p_etoa+0x96>
    8004:	c1 2c       	mov	r12, r1
    8006:	d1 2c       	mov	r13, r1
    8008:	e1 2c       	mov	r14, r1
    800a:	9f e3       	ldi	r25, 0x3F	; 63
    800c:	f9 2e       	mov	r15, r25
    800e:	41 2c       	mov	r4, r1
    8010:	51 2c       	mov	r5, r1
    8012:	82 01       	movw	r16, r4
    8014:	01 50       	subi	r16, 0x01	; 1
    8016:	11 09       	sbc	r17, r1
    8018:	20 e0       	ldi	r18, 0x00	; 0
    801a:	30 e0       	ldi	r19, 0x00	; 0
    801c:	40 e8       	ldi	r20, 0x80	; 128
    801e:	5f e3       	ldi	r21, 0x3F	; 63
    8020:	c5 01       	movw	r24, r10
    8022:	b4 01       	movw	r22, r8
    8024:	0e 94 9c e0 	call	0x1c138	; 0x1c138 <__cmpsf2>
    8028:	87 ff       	sbrs	r24, 7
    802a:	0c c0       	rjmp	.+24     	; 0x8044 <p_etoa+0xf6>
    802c:	20 e0       	ldi	r18, 0x00	; 0
    802e:	30 e0       	ldi	r19, 0x00	; 0
    8030:	40 e2       	ldi	r20, 0x20	; 32
    8032:	51 e4       	ldi	r21, 0x41	; 65
    8034:	c5 01       	movw	r24, r10
    8036:	b4 01       	movw	r22, r8
    8038:	0e 94 ef e1 	call	0x1c3de	; 0x1c3de <__mulsf3>
    803c:	4b 01       	movw	r8, r22
    803e:	5c 01       	movw	r10, r24
    8040:	28 01       	movw	r4, r16
    8042:	e7 cf       	rjmp	.-50     	; 0x8012 <p_etoa+0xc4>
    8044:	82 01       	movw	r16, r4
    8046:	0f 5f       	subi	r16, 0xFF	; 255
    8048:	1f 4f       	sbci	r17, 0xFF	; 255
    804a:	20 e0       	ldi	r18, 0x00	; 0
    804c:	30 e0       	ldi	r19, 0x00	; 0
    804e:	40 e2       	ldi	r20, 0x20	; 32
    8050:	51 e4       	ldi	r21, 0x41	; 65
    8052:	c5 01       	movw	r24, r10
    8054:	b4 01       	movw	r22, r8
    8056:	0e 94 eb e1 	call	0x1c3d6	; 0x1c3d6 <__gesf2>
    805a:	87 fd       	sbrc	r24, 7
    805c:	0c c0       	rjmp	.+24     	; 0x8076 <p_etoa+0x128>
    805e:	20 e0       	ldi	r18, 0x00	; 0
    8060:	30 e0       	ldi	r19, 0x00	; 0
    8062:	40 e2       	ldi	r20, 0x20	; 32
    8064:	51 e4       	ldi	r21, 0x41	; 65
    8066:	c5 01       	movw	r24, r10
    8068:	b4 01       	movw	r22, r8
    806a:	0e 94 a0 e0 	call	0x1c140	; 0x1c140 <__divsf3>
    806e:	4b 01       	movw	r8, r22
    8070:	5c 01       	movw	r10, r24
    8072:	28 01       	movw	r4, r16
    8074:	e7 cf       	rjmp	.-50     	; 0x8044 <p_etoa+0xf6>
    8076:	a7 01       	movw	r20, r14
    8078:	96 01       	movw	r18, r12
    807a:	c5 01       	movw	r24, r10
    807c:	b4 01       	movw	r22, r8
    807e:	0e 94 38 e0 	call	0x1c070	; 0x1c070 <__addsf3>
    8082:	4b 01       	movw	r8, r22
    8084:	5c 01       	movw	r10, r24
    8086:	82 01       	movw	r16, r4
    8088:	3f ef       	ldi	r19, 0xFF	; 255
    808a:	43 1a       	sub	r4, r19
    808c:	53 0a       	sbc	r5, r19
    808e:	20 e0       	ldi	r18, 0x00	; 0
    8090:	30 e0       	ldi	r19, 0x00	; 0
    8092:	40 e2       	ldi	r20, 0x20	; 32
    8094:	51 e4       	ldi	r21, 0x41	; 65
    8096:	0e 94 eb e1 	call	0x1c3d6	; 0x1c3d6 <__gesf2>
    809a:	87 fd       	sbrc	r24, 7
    809c:	09 c0       	rjmp	.+18     	; 0x80b0 <p_etoa+0x162>
    809e:	20 e0       	ldi	r18, 0x00	; 0
    80a0:	30 e0       	ldi	r19, 0x00	; 0
    80a2:	40 e2       	ldi	r20, 0x20	; 32
    80a4:	51 e4       	ldi	r21, 0x41	; 65
    80a6:	c5 01       	movw	r24, r10
    80a8:	b4 01       	movw	r22, r8
    80aa:	0e 94 a0 e0 	call	0x1c140	; 0x1c140 <__divsf3>
    80ae:	e9 cf       	rjmp	.-46     	; 0x8082 <p_etoa+0x134>
    80b0:	08 87       	std	Y+8, r16	; 0x08
    80b2:	19 87       	std	Y+9, r17	; 0x09
    80b4:	85 e6       	ldi	r24, 0x65	; 101
    80b6:	89 83       	std	Y+1, r24	; 0x01
    80b8:	88 85       	ldd	r24, Y+8	; 0x08
    80ba:	99 85       	ldd	r25, Y+9	; 0x09
    80bc:	97 ff       	sbrs	r25, 7
    80be:	08 c0       	rjmp	.+16     	; 0x80d0 <p_etoa+0x182>
    80c0:	91 95       	neg	r25
    80c2:	81 95       	neg	r24
    80c4:	91 09       	sbc	r25, r1
    80c6:	99 87       	std	Y+9, r25	; 0x09
    80c8:	88 87       	std	Y+8, r24	; 0x08
    80ca:	8d e2       	ldi	r24, 0x2D	; 45
    80cc:	90 e0       	ldi	r25, 0x00	; 0
    80ce:	02 c0       	rjmp	.+4      	; 0x80d4 <p_etoa+0x186>
    80d0:	8b e2       	ldi	r24, 0x2B	; 43
    80d2:	90 e0       	ldi	r25, 0x00	; 0
    80d4:	6c 01       	movw	r12, r24
    80d6:	82 e0       	ldi	r24, 0x02	; 2
    80d8:	e8 2e       	mov	r14, r24
    80da:	f1 2c       	mov	r15, r1
    80dc:	8e 01       	movw	r16, r28
    80de:	08 5f       	subi	r16, 0xF8	; 248
    80e0:	1f 4f       	sbci	r17, 0xFF	; 255
    80e2:	2a e0       	ldi	r18, 0x0A	; 10
    80e4:	30 e0       	ldi	r19, 0x00	; 0
    80e6:	42 e0       	ldi	r20, 0x02	; 2
    80e8:	50 e0       	ldi	r21, 0x00	; 0
    80ea:	65 e0       	ldi	r22, 0x05	; 5
    80ec:	70 e0       	ldi	r23, 0x00	; 0
    80ee:	ce 01       	movw	r24, r28
    80f0:	02 96       	adiw	r24, 0x02	; 2
    80f2:	17 dd       	rcall	.-1490   	; 0x7b22 <bin2num>
    80f4:	9c 01       	movw	r18, r24
    80f6:	93 2d       	mov	r25, r3
    80f8:	98 72       	andi	r25, 0x28	; 40
    80fa:	90 32       	cpi	r25, 0x20	; 32
    80fc:	61 f0       	breq	.+24     	; 0x8116 <p_etoa+0x1c8>
    80fe:	c5 01       	movw	r24, r10
    8100:	b4 01       	movw	r22, r8
    8102:	0e 94 08 e1 	call	0x1c210	; 0x1c210 <__fixsfsi>
    8106:	6b 01       	movw	r12, r22
    8108:	7c 01       	movw	r14, r24
    810a:	80 e3       	ldi	r24, 0x30	; 48
    810c:	8c 0d       	add	r24, r12
    810e:	9f dd       	rcall	.-1218   	; 0x7c4e <pch>
    8110:	21 10       	cpse	r2, r1
    8112:	20 c0       	rjmp	.+64     	; 0x8154 <p_etoa+0x206>
    8114:	5e c0       	rjmp	.+188    	; 0x81d2 <p_etoa+0x284>
    8116:	80 91 40 1a 	lds	r24, 0x1A40	; 0x801a40 <_pch+0x2>
    811a:	90 91 41 1a 	lds	r25, 0x1A41	; 0x801a41 <_pch+0x3>
    811e:	0c 85       	ldd	r16, Y+12	; 0x0c
    8120:	1d 85       	ldd	r17, Y+13	; 0x0d
    8122:	08 1b       	sub	r16, r24
    8124:	19 0b       	sbc	r17, r25
    8126:	22 20       	and	r2, r2
    8128:	41 f0       	breq	.+16     	; 0x813a <p_etoa+0x1ec>
    812a:	61 14       	cp	r6, r1
    812c:	71 04       	cpc	r7, r1
    812e:	29 f0       	breq	.+10     	; 0x813a <p_etoa+0x1ec>
    8130:	06 19       	sub	r16, r6
    8132:	17 09       	sbc	r17, r7
    8134:	06 50       	subi	r16, 0x06	; 6
    8136:	11 09       	sbc	r17, r1
    8138:	02 c0       	rjmp	.+4      	; 0x813e <p_etoa+0x1f0>
    813a:	05 50       	subi	r16, 0x05	; 5
    813c:	11 09       	sbc	r17, r1
    813e:	24 30       	cpi	r18, 0x04	; 4
    8140:	31 05       	cpc	r19, r1
    8142:	14 f0       	brlt	.+4      	; 0x8148 <p_etoa+0x1fa>
    8144:	01 50       	subi	r16, 0x01	; 1
    8146:	11 09       	sbc	r17, r1
    8148:	10 16       	cp	r1, r16
    814a:	11 06       	cpc	r1, r17
    814c:	c4 f6       	brge	.-80     	; 0x80fe <p_etoa+0x1b0>
    814e:	80 e3       	ldi	r24, 0x30	; 48
    8150:	7e dd       	rcall	.-1284   	; 0x7c4e <pch>
    8152:	f8 cf       	rjmp	.-16     	; 0x8144 <p_etoa+0x1f6>
    8154:	61 14       	cp	r6, r1
    8156:	71 04       	cpc	r7, r1
    8158:	09 f4       	brne	.+2      	; 0x815c <p_etoa+0x20e>
    815a:	3b c0       	rjmp	.+118    	; 0x81d2 <p_etoa+0x284>
    815c:	b6 01       	movw	r22, r12
    815e:	dd 0c       	add	r13, r13
    8160:	88 0b       	sbc	r24, r24
    8162:	99 0b       	sbc	r25, r25
    8164:	0e 94 3b e1 	call	0x1c276	; 0x1c276 <__floatsisf>
    8168:	9b 01       	movw	r18, r22
    816a:	ac 01       	movw	r20, r24
    816c:	c5 01       	movw	r24, r10
    816e:	b4 01       	movw	r22, r8
    8170:	0e 94 37 e0 	call	0x1c06e	; 0x1c06e <__subsf3>
    8174:	20 e0       	ldi	r18, 0x00	; 0
    8176:	30 e0       	ldi	r19, 0x00	; 0
    8178:	40 e2       	ldi	r20, 0x20	; 32
    817a:	51 e4       	ldi	r21, 0x41	; 65
    817c:	0e 94 ef e1 	call	0x1c3de	; 0x1c3de <__mulsf3>
    8180:	6b 01       	movw	r12, r22
    8182:	7c 01       	movw	r14, r24
    8184:	8e e2       	ldi	r24, 0x2E	; 46
    8186:	63 dd       	rcall	.-1338   	; 0x7c4e <pch>
    8188:	c7 01       	movw	r24, r14
    818a:	b6 01       	movw	r22, r12
    818c:	0e 94 08 e1 	call	0x1c210	; 0x1c210 <__fixsfsi>
    8190:	4b 01       	movw	r8, r22
    8192:	5c 01       	movw	r10, r24
    8194:	07 2e       	mov	r0, r23
    8196:	00 0c       	add	r0, r0
    8198:	88 0b       	sbc	r24, r24
    819a:	99 0b       	sbc	r25, r25
    819c:	0e 94 3b e1 	call	0x1c276	; 0x1c276 <__floatsisf>
    81a0:	9b 01       	movw	r18, r22
    81a2:	ac 01       	movw	r20, r24
    81a4:	c7 01       	movw	r24, r14
    81a6:	b6 01       	movw	r22, r12
    81a8:	0e 94 37 e0 	call	0x1c06e	; 0x1c06e <__subsf3>
    81ac:	6b 01       	movw	r12, r22
    81ae:	7c 01       	movw	r14, r24
    81b0:	80 e3       	ldi	r24, 0x30	; 48
    81b2:	88 0d       	add	r24, r8
    81b4:	4c dd       	rcall	.-1384   	; 0x7c4e <pch>
    81b6:	20 e0       	ldi	r18, 0x00	; 0
    81b8:	30 e0       	ldi	r19, 0x00	; 0
    81ba:	40 e2       	ldi	r20, 0x20	; 32
    81bc:	51 e4       	ldi	r21, 0x41	; 65
    81be:	c7 01       	movw	r24, r14
    81c0:	b6 01       	movw	r22, r12
    81c2:	0e 94 ef e1 	call	0x1c3de	; 0x1c3de <__mulsf3>
    81c6:	6b 01       	movw	r12, r22
    81c8:	7c 01       	movw	r14, r24
    81ca:	81 e0       	ldi	r24, 0x01	; 1
    81cc:	68 1a       	sub	r6, r24
    81ce:	71 08       	sbc	r7, r1
    81d0:	d9 f6       	brne	.-74     	; 0x8188 <p_etoa+0x23a>
    81d2:	8e 01       	movw	r16, r28
    81d4:	0f 5f       	subi	r16, 0xFF	; 255
    81d6:	1f 4f       	sbci	r17, 0xFF	; 255
    81d8:	f8 01       	movw	r30, r16
    81da:	81 91       	ld	r24, Z+
    81dc:	8f 01       	movw	r16, r30
    81de:	88 23       	and	r24, r24
    81e0:	11 f0       	breq	.+4      	; 0x81e6 <p_etoa+0x298>
    81e2:	35 dd       	rcall	.-1430   	; 0x7c4e <pch>
    81e4:	f9 cf       	rjmp	.-14     	; 0x81d8 <p_etoa+0x28a>
    81e6:	33 dd       	rcall	.-1434   	; 0x7c4e <pch>
    81e8:	ea 85       	ldd	r30, Y+10	; 0x0a
    81ea:	fb 85       	ldd	r31, Y+11	; 0x0b
    81ec:	01 90       	ld	r0, Z+
    81ee:	00 20       	and	r0, r0
    81f0:	e9 f7       	brne	.-6      	; 0x81ec <p_etoa+0x29e>
    81f2:	cf 01       	movw	r24, r30
    81f4:	01 97       	sbiw	r24, 0x01	; 1
    81f6:	2a 85       	ldd	r18, Y+10	; 0x0a
    81f8:	3b 85       	ldd	r19, Y+11	; 0x0b
    81fa:	82 1b       	sub	r24, r18
    81fc:	93 0b       	sbc	r25, r19
    81fe:	2d 96       	adiw	r28, 0x0d	; 13
    8200:	e2 e1       	ldi	r30, 0x12	; 18
    8202:	0c 94 fa df 	jmp	0x1bff4	; 0x1bff4 <__epilogue_restores__>

00008206 <_puts_pad>:
    8206:	a0 e0       	ldi	r26, 0x00	; 0
    8208:	b0 e0       	ldi	r27, 0x00	; 0
    820a:	e9 e0       	ldi	r30, 0x09	; 9
    820c:	f1 e4       	ldi	r31, 0x41	; 65
    820e:	0c 94 e4 df 	jmp	0x1bfc8	; 0x1bfc8 <__prologue_saves__+0xc>
    8212:	6c 01       	movw	r12, r24
    8214:	4b 01       	movw	r8, r22
    8216:	79 01       	movw	r14, r18
    8218:	24 17       	cp	r18, r20
    821a:	35 07       	cpc	r19, r21
    821c:	24 f4       	brge	.+8      	; 0x8226 <_puts_pad+0x20>
    821e:	ea 01       	movw	r28, r20
    8220:	c2 1b       	sub	r28, r18
    8222:	d3 0b       	sbc	r29, r19
    8224:	02 c0       	rjmp	.+4      	; 0x822a <_puts_pad+0x24>
    8226:	c0 e0       	ldi	r28, 0x00	; 0
    8228:	d0 e0       	ldi	r29, 0x00	; 0
    822a:	01 15       	cp	r16, r1
    822c:	11 05       	cpc	r17, r1
    822e:	49 f4       	brne	.+18     	; 0x8242 <_puts_pad+0x3c>
    8230:	21 97       	sbiw	r28, 0x01	; 1
    8232:	38 f0       	brcs	.+14     	; 0x8242 <_puts_pad+0x3c>
    8234:	d6 01       	movw	r26, r12
    8236:	ed 91       	ld	r30, X+
    8238:	fc 91       	ld	r31, X
    823a:	60 e2       	ldi	r22, 0x20	; 32
    823c:	c6 01       	movw	r24, r12
    823e:	09 95       	icall
    8240:	f7 cf       	rjmp	.-18     	; 0x8230 <_puts_pad+0x2a>
    8242:	54 01       	movw	r10, r8
    8244:	f5 01       	movw	r30, r10
    8246:	61 91       	ld	r22, Z+
    8248:	5f 01       	movw	r10, r30
    824a:	66 23       	and	r22, r22
    824c:	61 f0       	breq	.+24     	; 0x8266 <_puts_pad+0x60>
    824e:	e1 14       	cp	r14, r1
    8250:	f1 04       	cpc	r15, r1
    8252:	49 f0       	breq	.+18     	; 0x8266 <_puts_pad+0x60>
    8254:	d6 01       	movw	r26, r12
    8256:	ed 91       	ld	r30, X+
    8258:	fc 91       	ld	r31, X
    825a:	c6 01       	movw	r24, r12
    825c:	09 95       	icall
    825e:	b1 e0       	ldi	r27, 0x01	; 1
    8260:	eb 1a       	sub	r14, r27
    8262:	f1 08       	sbc	r15, r1
    8264:	ef cf       	rjmp	.-34     	; 0x8244 <_puts_pad+0x3e>
    8266:	01 15       	cp	r16, r1
    8268:	11 05       	cpc	r17, r1
    826a:	51 f0       	breq	.+20     	; 0x8280 <_puts_pad+0x7a>
    826c:	20 97       	sbiw	r28, 0x00	; 0
    826e:	41 f0       	breq	.+16     	; 0x8280 <_puts_pad+0x7a>
    8270:	d6 01       	movw	r26, r12
    8272:	ed 91       	ld	r30, X+
    8274:	fc 91       	ld	r31, X
    8276:	60 e2       	ldi	r22, 0x20	; 32
    8278:	c6 01       	movw	r24, r12
    827a:	09 95       	icall
    827c:	21 97       	sbiw	r28, 0x01	; 1
    827e:	f6 cf       	rjmp	.-20     	; 0x826c <_puts_pad+0x66>
    8280:	cd b7       	in	r28, 0x3d	; 61
    8282:	de b7       	in	r29, 0x3e	; 62
    8284:	ec e0       	ldi	r30, 0x0C	; 12
    8286:	0c 94 00 e0 	jmp	0x1c000	; 0x1c000 <__epilogue_restores__+0xc>

0000828a <_printf_fn>:
    828a:	ab e6       	ldi	r26, 0x6B	; 107
    828c:	b0 e0       	ldi	r27, 0x00	; 0
    828e:	eb e4       	ldi	r30, 0x4B	; 75
    8290:	f1 e4       	ldi	r31, 0x41	; 65
    8292:	0c 94 de df 	jmp	0x1bfbc	; 0x1bfbc <__prologue_saves__>
    8296:	a5 96       	adiw	r28, 0x25	; 37
    8298:	9f af       	std	Y+63, r25	; 0x3f
    829a:	8e af       	std	Y+62, r24	; 0x3e
    829c:	a5 97       	sbiw	r28, 0x25	; 37
    829e:	6a 01       	movw	r12, r20
    82a0:	e6 2e       	mov	r14, r22
    82a2:	19 01       	movw	r2, r18
    82a4:	a9 96       	adiw	r28, 0x29	; 41
    82a6:	1c ae       	std	Y+60, r1	; 0x3c
    82a8:	1d ae       	std	Y+61, r1	; 0x3d
    82aa:	1e ae       	std	Y+62, r1	; 0x3e
    82ac:	1f ae       	std	Y+63, r1	; 0x3f
    82ae:	a9 97       	sbiw	r28, 0x29	; 41
    82b0:	9e 01       	movw	r18, r28
    82b2:	2f 5a       	subi	r18, 0xAF	; 175
    82b4:	3f 4f       	sbci	r19, 0xFF	; 255
    82b6:	67 96       	adiw	r28, 0x17	; 23
    82b8:	3f af       	std	Y+63, r19	; 0x3f
    82ba:	2e af       	std	Y+62, r18	; 0x3e
    82bc:	67 97       	sbiw	r28, 0x17	; 23
    82be:	ae 01       	movw	r20, r28
    82c0:	4d 5b       	subi	r20, 0xBD	; 189
    82c2:	5f 4f       	sbci	r21, 0xFF	; 255
    82c4:	69 96       	adiw	r28, 0x19	; 25
    82c6:	5f af       	std	Y+63, r21	; 0x3f
    82c8:	4e af       	std	Y+62, r20	; 0x3e
    82ca:	69 97       	sbiw	r28, 0x19	; 25
    82cc:	ce 01       	movw	r24, r28
    82ce:	85 5b       	subi	r24, 0xB5	; 181
    82d0:	9f 4f       	sbci	r25, 0xFF	; 255
    82d2:	6b 96       	adiw	r28, 0x1b	; 27
    82d4:	9f af       	std	Y+63, r25	; 0x3f
    82d6:	8e af       	std	Y+62, r24	; 0x3e
    82d8:	6b 97       	sbiw	r28, 0x1b	; 27
    82da:	de 01       	movw	r26, r28
    82dc:	ad 5a       	subi	r26, 0xAD	; 173
    82de:	bf 4f       	sbci	r27, 0xFF	; 255
    82e0:	6d 96       	adiw	r28, 0x1d	; 29
    82e2:	bf af       	std	Y+63, r27	; 0x3f
    82e4:	ae af       	std	Y+62, r26	; 0x3e
    82e6:	6d 97       	sbiw	r28, 0x1d	; 29
    82e8:	f6 01       	movw	r30, r12
    82ea:	5e 2d       	mov	r21, r14
    82ec:	0e 94 15 e0 	call	0x1c02a	; 0x1c02a <__xload_1>
    82f0:	66 23       	and	r22, r22
    82f2:	09 f4       	brne	.+2      	; 0x82f6 <_printf_fn+0x6c>
    82f4:	d7 c3       	rjmp	.+1966   	; 0x8aa4 <_printf_fn+0x81a>
    82f6:	ae 2d       	mov	r26, r14
    82f8:	c6 01       	movw	r24, r12
    82fa:	01 96       	adiw	r24, 0x01	; 1
    82fc:	a1 1d       	adc	r26, r1
    82fe:	3c 01       	movw	r6, r24
    8300:	8a 2e       	mov	r8, r26
    8302:	65 32       	cpi	r22, 0x25	; 37
    8304:	51 f0       	breq	.+20     	; 0x831a <_printf_fn+0x90>
    8306:	a5 96       	adiw	r28, 0x25	; 37
    8308:	ae ad       	ldd	r26, Y+62	; 0x3e
    830a:	bf ad       	ldd	r27, Y+63	; 0x3f
    830c:	a5 97       	sbiw	r28, 0x25	; 37
    830e:	ed 91       	ld	r30, X+
    8310:	fc 91       	ld	r31, X
    8312:	11 97       	sbiw	r26, 0x01	; 1
    8314:	cd 01       	movw	r24, r26
    8316:	09 95       	icall
    8318:	91 c3       	rjmp	.+1826   	; 0x8a3c <_printf_fn+0x7b2>
    831a:	91 2c       	mov	r9, r1
    831c:	f3 01       	movw	r30, r6
    831e:	58 2d       	mov	r21, r8
    8320:	0e 94 15 e0 	call	0x1c02a	; 0x1c02a <__xload_1>
    8324:	63 32       	cpi	r22, 0x23	; 35
    8326:	19 f4       	brne	.+6      	; 0x832e <_printf_fn+0xa4>
    8328:	68 94       	set
    832a:	97 f8       	bld	r9, 7
    832c:	04 c0       	rjmp	.+8      	; 0x8336 <_printf_fn+0xac>
    832e:	6b 32       	cpi	r22, 0x2B	; 43
    8330:	39 f4       	brne	.+14     	; 0x8340 <_printf_fn+0xb6>
    8332:	68 94       	set
    8334:	92 f8       	bld	r9, 2
    8336:	bf ef       	ldi	r27, 0xFF	; 255
    8338:	6b 1a       	sub	r6, r27
    833a:	7b 0a       	sbc	r7, r27
    833c:	8b 0a       	sbc	r8, r27
    833e:	ee cf       	rjmp	.-36     	; 0x831c <_printf_fn+0x92>
    8340:	6d 32       	cpi	r22, 0x2D	; 45
    8342:	a9 f4       	brne	.+42     	; 0x836e <_printf_fn+0xe4>
    8344:	93 fc       	sbrc	r9, 3
    8346:	05 c0       	rjmp	.+10     	; 0x8352 <_printf_fn+0xc8>
    8348:	6d 32       	cpi	r22, 0x2D	; 45
    834a:	19 f4       	brne	.+6      	; 0x8352 <_printf_fn+0xc8>
    834c:	68 94       	set
    834e:	93 f8       	bld	r9, 3
    8350:	f2 cf       	rjmp	.-28     	; 0x8336 <_printf_fn+0xac>
    8352:	94 fc       	sbrc	r9, 4
    8354:	05 c0       	rjmp	.+10     	; 0x8360 <_printf_fn+0xd6>
    8356:	60 32       	cpi	r22, 0x20	; 32
    8358:	19 f4       	brne	.+6      	; 0x8360 <_printf_fn+0xd6>
    835a:	68 94       	set
    835c:	94 f8       	bld	r9, 4
    835e:	eb cf       	rjmp	.-42     	; 0x8336 <_printf_fn+0xac>
    8360:	95 fc       	sbrc	r9, 5
    8362:	e9 cf       	rjmp	.-46     	; 0x8336 <_printf_fn+0xac>
    8364:	60 33       	cpi	r22, 0x30	; 48
    8366:	39 f7       	brne	.-50     	; 0x8336 <_printf_fn+0xac>
    8368:	68 94       	set
    836a:	95 f8       	bld	r9, 5
    836c:	e4 cf       	rjmp	.-56     	; 0x8336 <_printf_fn+0xac>
    836e:	86 2f       	mov	r24, r22
    8370:	8f 7e       	andi	r24, 0xEF	; 239
    8372:	80 32       	cpi	r24, 0x20	; 32
    8374:	39 f3       	breq	.-50     	; 0x8344 <_printf_fn+0xba>
    8376:	70 e0       	ldi	r23, 0x00	; 0
    8378:	60 53       	subi	r22, 0x30	; 48
    837a:	71 09       	sbc	r23, r1
    837c:	41 2c       	mov	r4, r1
    837e:	51 2c       	mov	r5, r1
    8380:	6a 30       	cpi	r22, 0x0A	; 10
    8382:	71 05       	cpc	r23, r1
    8384:	e0 f4       	brcc	.+56     	; 0x83be <_printf_fn+0x134>
    8386:	2a e0       	ldi	r18, 0x0A	; 10
    8388:	f3 01       	movw	r30, r6
    838a:	58 2d       	mov	r21, r8
    838c:	0e 94 15 e0 	call	0x1c02a	; 0x1c02a <__xload_1>
    8390:	70 e0       	ldi	r23, 0x00	; 0
    8392:	cb 01       	movw	r24, r22
    8394:	c0 97       	sbiw	r24, 0x30	; 48
    8396:	0a 97       	sbiw	r24, 0x0a	; 10
    8398:	80 f4       	brcc	.+32     	; 0x83ba <_printf_fn+0x130>
    839a:	ef ef       	ldi	r30, 0xFF	; 255
    839c:	6e 1a       	sub	r6, r30
    839e:	7e 0a       	sbc	r7, r30
    83a0:	8e 0a       	sbc	r8, r30
    83a2:	24 9d       	mul	r18, r4
    83a4:	c0 01       	movw	r24, r0
    83a6:	25 9d       	mul	r18, r5
    83a8:	90 0d       	add	r25, r0
    83aa:	11 24       	eor	r1, r1
    83ac:	68 0f       	add	r22, r24
    83ae:	79 1f       	adc	r23, r25
    83b0:	2b 01       	movw	r4, r22
    83b2:	f0 e3       	ldi	r31, 0x30	; 48
    83b4:	4f 1a       	sub	r4, r31
    83b6:	51 08       	sbc	r5, r1
    83b8:	e7 cf       	rjmp	.-50     	; 0x8388 <_printf_fn+0xfe>
    83ba:	68 94       	set
    83bc:	90 f8       	bld	r9, 0
    83be:	f3 01       	movw	r30, r6
    83c0:	58 2d       	mov	r21, r8
    83c2:	0e 94 15 e0 	call	0x1c02a	; 0x1c02a <__xload_1>
    83c6:	6e 32       	cpi	r22, 0x2E	; 46
    83c8:	59 f5       	brne	.+86     	; 0x8420 <_printf_fn+0x196>
    83ca:	2f ef       	ldi	r18, 0xFF	; 255
    83cc:	62 1a       	sub	r6, r18
    83ce:	72 0a       	sbc	r7, r18
    83d0:	82 0a       	sbc	r8, r18
    83d2:	a1 96       	adiw	r28, 0x21	; 33
    83d4:	1f ae       	std	Y+63, r1	; 0x3f
    83d6:	1e ae       	std	Y+62, r1	; 0x3e
    83d8:	a1 97       	sbiw	r28, 0x21	; 33
    83da:	2a e0       	ldi	r18, 0x0A	; 10
    83dc:	f3 01       	movw	r30, r6
    83de:	58 2d       	mov	r21, r8
    83e0:	0e 94 15 e0 	call	0x1c02a	; 0x1c02a <__xload_1>
    83e4:	70 e0       	ldi	r23, 0x00	; 0
    83e6:	cb 01       	movw	r24, r22
    83e8:	c0 97       	sbiw	r24, 0x30	; 48
    83ea:	0a 97       	sbiw	r24, 0x0a	; 10
    83ec:	b0 f4       	brcc	.+44     	; 0x841a <_printf_fn+0x190>
    83ee:	3f ef       	ldi	r19, 0xFF	; 255
    83f0:	63 1a       	sub	r6, r19
    83f2:	73 0a       	sbc	r7, r19
    83f4:	83 0a       	sbc	r8, r19
    83f6:	a1 96       	adiw	r28, 0x21	; 33
    83f8:	4e ad       	ldd	r20, Y+62	; 0x3e
    83fa:	5f ad       	ldd	r21, Y+63	; 0x3f
    83fc:	a1 97       	sbiw	r28, 0x21	; 33
    83fe:	24 9f       	mul	r18, r20
    8400:	c0 01       	movw	r24, r0
    8402:	25 9f       	mul	r18, r21
    8404:	90 0d       	add	r25, r0
    8406:	11 24       	eor	r1, r1
    8408:	68 0f       	add	r22, r24
    840a:	79 1f       	adc	r23, r25
    840c:	cb 01       	movw	r24, r22
    840e:	c0 97       	sbiw	r24, 0x30	; 48
    8410:	a1 96       	adiw	r28, 0x21	; 33
    8412:	9f af       	std	Y+63, r25	; 0x3f
    8414:	8e af       	std	Y+62, r24	; 0x3e
    8416:	a1 97       	sbiw	r28, 0x21	; 33
    8418:	e1 cf       	rjmp	.-62     	; 0x83dc <_printf_fn+0x152>
    841a:	68 94       	set
    841c:	91 f8       	bld	r9, 1
    841e:	04 c0       	rjmp	.+8      	; 0x8428 <_printf_fn+0x19e>
    8420:	a1 96       	adiw	r28, 0x21	; 33
    8422:	1f ae       	std	Y+63, r1	; 0x3f
    8424:	1e ae       	std	Y+62, r1	; 0x3e
    8426:	a1 97       	sbiw	r28, 0x21	; 33
    8428:	f3 01       	movw	r30, r6
    842a:	58 2d       	mov	r21, r8
    842c:	0e 94 15 e0 	call	0x1c02a	; 0x1c02a <__xload_1>
    8430:	69 34       	cpi	r22, 0x49	; 73
    8432:	09 f0       	breq	.+2      	; 0x8436 <_printf_fn+0x1ac>
    8434:	45 c0       	rjmp	.+138    	; 0x84c0 <_printf_fn+0x236>
    8436:	9f ef       	ldi	r25, 0xFF	; 255
    8438:	69 1a       	sub	r6, r25
    843a:	79 0a       	sbc	r7, r25
    843c:	89 0a       	sbc	r8, r25
    843e:	6f 96       	adiw	r28, 0x1f	; 31
    8440:	1f ae       	std	Y+63, r1	; 0x3f
    8442:	1e ae       	std	Y+62, r1	; 0x3e
    8444:	6f 97       	sbiw	r28, 0x1f	; 31
    8446:	2a e0       	ldi	r18, 0x0A	; 10
    8448:	f3 01       	movw	r30, r6
    844a:	58 2d       	mov	r21, r8
    844c:	0e 94 15 e0 	call	0x1c02a	; 0x1c02a <__xload_1>
    8450:	70 e0       	ldi	r23, 0x00	; 0
    8452:	cb 01       	movw	r24, r22
    8454:	c0 97       	sbiw	r24, 0x30	; 48
    8456:	0a 97       	sbiw	r24, 0x0a	; 10
    8458:	b8 f4       	brcc	.+46     	; 0x8488 <_printf_fn+0x1fe>
    845a:	af ef       	ldi	r26, 0xFF	; 255
    845c:	6a 1a       	sub	r6, r26
    845e:	7a 0a       	sbc	r7, r26
    8460:	8a 0a       	sbc	r8, r26
    8462:	6f 96       	adiw	r28, 0x1f	; 31
    8464:	ee ad       	ldd	r30, Y+62	; 0x3e
    8466:	ff ad       	ldd	r31, Y+63	; 0x3f
    8468:	6f 97       	sbiw	r28, 0x1f	; 31
    846a:	2e 9f       	mul	r18, r30
    846c:	c0 01       	movw	r24, r0
    846e:	2f 9f       	mul	r18, r31
    8470:	90 0d       	add	r25, r0
    8472:	11 24       	eor	r1, r1
    8474:	68 0f       	add	r22, r24
    8476:	79 1f       	adc	r23, r25
    8478:	ab 01       	movw	r20, r22
    847a:	40 53       	subi	r20, 0x30	; 48
    847c:	51 09       	sbc	r21, r1
    847e:	6f 96       	adiw	r28, 0x1f	; 31
    8480:	5f af       	std	Y+63, r21	; 0x3f
    8482:	4e af       	std	Y+62, r20	; 0x3e
    8484:	6f 97       	sbiw	r28, 0x1f	; 31
    8486:	e0 cf       	rjmp	.-64     	; 0x8448 <_printf_fn+0x1be>
    8488:	6f 96       	adiw	r28, 0x1f	; 31
    848a:	8e ad       	ldd	r24, Y+62	; 0x3e
    848c:	9f ad       	ldd	r25, Y+63	; 0x3f
    848e:	6f 97       	sbiw	r28, 0x1f	; 31
    8490:	00 97       	sbiw	r24, 0x00	; 0
    8492:	09 f4       	brne	.+2      	; 0x8496 <_printf_fn+0x20c>
    8494:	4f c0       	rjmp	.+158    	; 0x8534 <_printf_fn+0x2aa>
    8496:	87 70       	andi	r24, 0x07	; 7
    8498:	99 27       	eor	r25, r25
    849a:	89 2b       	or	r24, r25
    849c:	09 f0       	breq	.+2      	; 0x84a0 <_printf_fn+0x216>
    849e:	46 c0       	rjmp	.+140    	; 0x852c <_printf_fn+0x2a2>
    84a0:	6f 96       	adiw	r28, 0x1f	; 31
    84a2:	ae ad       	ldd	r26, Y+62	; 0x3e
    84a4:	bf ad       	ldd	r27, Y+63	; 0x3f
    84a6:	6f 97       	sbiw	r28, 0x1f	; 31
    84a8:	83 e0       	ldi	r24, 0x03	; 3
    84aa:	b5 95       	asr	r27
    84ac:	a7 95       	ror	r26
    84ae:	8a 95       	dec	r24
    84b0:	e1 f7       	brne	.-8      	; 0x84aa <_printf_fn+0x220>
    84b2:	6f 96       	adiw	r28, 0x1f	; 31
    84b4:	bf af       	std	Y+63, r27	; 0x3f
    84b6:	ae af       	std	Y+62, r26	; 0x3e
    84b8:	6f 97       	sbiw	r28, 0x1f	; 31
    84ba:	ab 2b       	or	r26, r27
    84bc:	d9 f1       	breq	.+118    	; 0x8534 <_printf_fn+0x2aa>
    84be:	27 c0       	rjmp	.+78     	; 0x850e <_printf_fn+0x284>
    84c0:	68 36       	cpi	r22, 0x68	; 104
    84c2:	29 f4       	brne	.+10     	; 0x84ce <_printf_fn+0x244>
    84c4:	bf ef       	ldi	r27, 0xFF	; 255
    84c6:	6b 1a       	sub	r6, r27
    84c8:	7b 0a       	sbc	r7, r27
    84ca:	8b 0a       	sbc	r8, r27
    84cc:	ba c2       	rjmp	.+1396   	; 0x8a42 <_printf_fn+0x7b8>
    84ce:	6c 36       	cpi	r22, 0x6C	; 108
    84d0:	09 f0       	breq	.+2      	; 0x84d4 <_printf_fn+0x24a>
    84d2:	b7 c2       	rjmp	.+1390   	; 0x8a42 <_printf_fn+0x7b8>
    84d4:	a8 2d       	mov	r26, r8
    84d6:	c3 01       	movw	r24, r6
    84d8:	01 96       	adiw	r24, 0x01	; 1
    84da:	a1 1d       	adc	r26, r1
    84dc:	fc 01       	movw	r30, r24
    84de:	5a 2f       	mov	r21, r26
    84e0:	0e 94 15 e0 	call	0x1c02a	; 0x1c02a <__xload_1>
    84e4:	6c 36       	cpi	r22, 0x6C	; 108
    84e6:	49 f0       	breq	.+18     	; 0x84fa <_printf_fn+0x270>
    84e8:	3c 01       	movw	r6, r24
    84ea:	8a 2e       	mov	r8, r26
    84ec:	24 e0       	ldi	r18, 0x04	; 4
    84ee:	30 e0       	ldi	r19, 0x00	; 0
    84f0:	6f 96       	adiw	r28, 0x1f	; 31
    84f2:	3f af       	std	Y+63, r19	; 0x3f
    84f4:	2e af       	std	Y+62, r18	; 0x3e
    84f6:	6f 97       	sbiw	r28, 0x1f	; 31
    84f8:	0a c0       	rjmp	.+20     	; 0x850e <_printf_fn+0x284>
    84fa:	32 e0       	ldi	r19, 0x02	; 2
    84fc:	63 0e       	add	r6, r19
    84fe:	71 1c       	adc	r7, r1
    8500:	81 1c       	adc	r8, r1
    8502:	48 e0       	ldi	r20, 0x08	; 8
    8504:	50 e0       	ldi	r21, 0x00	; 0
    8506:	6f 96       	adiw	r28, 0x1f	; 31
    8508:	5f af       	std	Y+63, r21	; 0x3f
    850a:	4e af       	std	Y+62, r20	; 0x3e
    850c:	6f 97       	sbiw	r28, 0x1f	; 31
    850e:	f3 01       	movw	r30, r6
    8510:	58 2d       	mov	r21, r8
    8512:	0e 94 15 e0 	call	0x1c02a	; 0x1c02a <__xload_1>
    8516:	86 2f       	mov	r24, r22
    8518:	90 e0       	ldi	r25, 0x00	; 0
    851a:	a3 96       	adiw	r28, 0x23	; 35
    851c:	9f af       	std	Y+63, r25	; 0x3f
    851e:	8e af       	std	Y+62, r24	; 0x3e
    8520:	a3 97       	sbiw	r28, 0x23	; 35
    8522:	84 36       	cpi	r24, 0x64	; 100
    8524:	91 05       	cpc	r25, r1
    8526:	09 f4       	brne	.+2      	; 0x852a <_printf_fn+0x2a0>
    8528:	93 c2       	rjmp	.+1318   	; 0x8a50 <_printf_fn+0x7c6>
    852a:	08 c0       	rjmp	.+16     	; 0x853c <_printf_fn+0x2b2>
    852c:	6f 96       	adiw	r28, 0x1f	; 31
    852e:	1f ae       	std	Y+63, r1	; 0x3f
    8530:	1e ae       	std	Y+62, r1	; 0x3e
    8532:	6f 97       	sbiw	r28, 0x1f	; 31
    8534:	a3 96       	adiw	r28, 0x23	; 35
    8536:	1f ae       	std	Y+63, r1	; 0x3f
    8538:	1e ae       	std	Y+62, r1	; 0x3e
    853a:	a3 97       	sbiw	r28, 0x23	; 35
    853c:	31 e0       	ldi	r19, 0x01	; 1
    853e:	20 e0       	ldi	r18, 0x00	; 0
    8540:	a3 96       	adiw	r28, 0x23	; 35
    8542:	ae ad       	ldd	r26, Y+62	; 0x3e
    8544:	bf ad       	ldd	r27, Y+63	; 0x3f
    8546:	a3 97       	sbiw	r28, 0x23	; 35
    8548:	a4 34       	cpi	r26, 0x44	; 68
    854a:	b1 05       	cpc	r27, r1
    854c:	09 f0       	breq	.+2      	; 0x8550 <_printf_fn+0x2c6>
    854e:	30 e0       	ldi	r19, 0x00	; 0
    8550:	83 2f       	mov	r24, r19
    8552:	92 2f       	mov	r25, r18
    8554:	a3 96       	adiw	r28, 0x23	; 35
    8556:	ee ad       	ldd	r30, Y+62	; 0x3e
    8558:	ff ad       	ldd	r31, Y+63	; 0x3f
    855a:	a3 97       	sbiw	r28, 0x23	; 35
    855c:	e2 54       	subi	r30, 0x42	; 66
    855e:	f1 09       	sbc	r31, r1
    8560:	e7 33       	cpi	r30, 0x37	; 55
    8562:	f1 05       	cpc	r31, r1
    8564:	08 f0       	brcs	.+2      	; 0x8568 <_printf_fn+0x2de>
    8566:	5d c1       	rjmp	.+698    	; 0x8822 <_printf_fn+0x598>
    8568:	ea 5b       	subi	r30, 0xBA	; 186
    856a:	ff 4f       	sbci	r31, 0xFF	; 255
    856c:	0c 94 af df 	jmp	0x1bf5e	; 0x1bf5e <__tablejump2__>
    8570:	e2 e0       	ldi	r30, 0x02	; 2
    8572:	f0 e0       	ldi	r31, 0x00	; 0
    8574:	6f 96       	adiw	r28, 0x1f	; 31
    8576:	ff af       	std	Y+63, r31	; 0x3f
    8578:	ee af       	std	Y+62, r30	; 0x3e
    857a:	6f 97       	sbiw	r28, 0x1f	; 31
    857c:	29 2d       	mov	r18, r9
    857e:	28 72       	andi	r18, 0x28	; 40
    8580:	28 32       	cpi	r18, 0x28	; 40
    8582:	11 f4       	brne	.+4      	; 0x8588 <_printf_fn+0x2fe>
    8584:	e8 94       	clt
    8586:	95 f8       	bld	r9, 5
    8588:	29 2d       	mov	r18, r9
    858a:	22 72       	andi	r18, 0x22	; 34
    858c:	22 32       	cpi	r18, 0x22	; 34
    858e:	11 f4       	brne	.+4      	; 0x8594 <_printf_fn+0x30a>
    8590:	e8 94       	clt
    8592:	95 f8       	bld	r9, 5
    8594:	29 2d       	mov	r18, r9
    8596:	21 72       	andi	r18, 0x21	; 33
    8598:	21 32       	cpi	r18, 0x21	; 33
    859a:	59 f4       	brne	.+22     	; 0x85b2 <_printf_fn+0x328>
    859c:	a1 96       	adiw	r28, 0x21	; 33
    859e:	2e ad       	ldd	r18, Y+62	; 0x3e
    85a0:	3f ad       	ldd	r19, Y+63	; 0x3f
    85a2:	a1 97       	sbiw	r28, 0x21	; 33
    85a4:	24 15       	cp	r18, r4
    85a6:	35 05       	cpc	r19, r5
    85a8:	24 f4       	brge	.+8      	; 0x85b2 <_printf_fn+0x328>
    85aa:	a1 96       	adiw	r28, 0x21	; 33
    85ac:	5f ae       	std	Y+63, r5	; 0x3f
    85ae:	4e ae       	std	Y+62, r4	; 0x3e
    85b0:	a1 97       	sbiw	r28, 0x21	; 33
    85b2:	29 2d       	mov	r18, r9
    85b4:	23 72       	andi	r18, 0x23	; 35
    85b6:	23 32       	cpi	r18, 0x23	; 35
    85b8:	59 f4       	brne	.+22     	; 0x85d0 <_printf_fn+0x346>
    85ba:	a1 96       	adiw	r28, 0x21	; 33
    85bc:	4e ad       	ldd	r20, Y+62	; 0x3e
    85be:	5f ad       	ldd	r21, Y+63	; 0x3f
    85c0:	a1 97       	sbiw	r28, 0x21	; 33
    85c2:	44 15       	cp	r20, r4
    85c4:	55 05       	cpc	r21, r5
    85c6:	24 f4       	brge	.+8      	; 0x85d0 <_printf_fn+0x346>
    85c8:	a1 96       	adiw	r28, 0x21	; 33
    85ca:	5f ae       	std	Y+63, r5	; 0x3f
    85cc:	4e ae       	std	Y+62, r4	; 0x3e
    85ce:	a1 97       	sbiw	r28, 0x21	; 33
    85d0:	e8 94       	clt
    85d2:	94 f8       	bld	r9, 4
    85d4:	e8 94       	clt
    85d6:	92 f8       	bld	r9, 2
    85d8:	e8 94       	clt
    85da:	96 f8       	bld	r9, 6
    85dc:	6f 96       	adiw	r28, 0x1f	; 31
    85de:	ae ad       	ldd	r26, Y+62	; 0x3e
    85e0:	bf ad       	ldd	r27, Y+63	; 0x3f
    85e2:	6f 97       	sbiw	r28, 0x1f	; 31
    85e4:	12 97       	sbiw	r26, 0x02	; 2
    85e6:	29 f5       	brne	.+74     	; 0x8632 <_printf_fn+0x3a8>
    85e8:	51 01       	movw	r10, r2
    85ea:	b2 e0       	ldi	r27, 0x02	; 2
    85ec:	ab 0e       	add	r10, r27
    85ee:	b1 1c       	adc	r11, r1
    85f0:	f1 01       	movw	r30, r2
    85f2:	80 81       	ld	r24, Z
    85f4:	91 81       	ldd	r25, Z+1	; 0x01
    85f6:	65 96       	adiw	r28, 0x15	; 21
    85f8:	9f af       	std	Y+63, r25	; 0x3f
    85fa:	8e af       	std	Y+62, r24	; 0x3e
    85fc:	65 97       	sbiw	r28, 0x15	; 21
    85fe:	a3 96       	adiw	r28, 0x23	; 35
    8600:	2e ad       	ldd	r18, Y+62	; 0x3e
    8602:	3f ad       	ldd	r19, Y+63	; 0x3f
    8604:	a3 97       	sbiw	r28, 0x23	; 35
    8606:	24 34       	cpi	r18, 0x44	; 68
    8608:	31 05       	cpc	r19, r1
    860a:	09 f0       	breq	.+2      	; 0x860e <_printf_fn+0x384>
    860c:	b8 c0       	rjmp	.+368    	; 0x877e <_printf_fn+0x4f4>
    860e:	97 ff       	sbrs	r25, 7
    8610:	b0 c0       	rjmp	.+352    	; 0x8772 <_printf_fn+0x4e8>
    8612:	68 94       	set
    8614:	96 f8       	bld	r9, 6
    8616:	91 95       	neg	r25
    8618:	81 95       	neg	r24
    861a:	91 09       	sbc	r25, r1
    861c:	65 96       	adiw	r28, 0x15	; 21
    861e:	9f af       	std	Y+63, r25	; 0x3f
    8620:	8e af       	std	Y+62, r24	; 0x3e
    8622:	65 97       	sbiw	r28, 0x15	; 21
    8624:	42 e0       	ldi	r20, 0x02	; 2
    8626:	50 e0       	ldi	r21, 0x00	; 0
    8628:	6f 96       	adiw	r28, 0x1f	; 31
    862a:	5f af       	std	Y+63, r21	; 0x3f
    862c:	4e af       	std	Y+62, r20	; 0x3e
    862e:	6f 97       	sbiw	r28, 0x1f	; 31
    8630:	a6 c0       	rjmp	.+332    	; 0x877e <_printf_fn+0x4f4>
    8632:	6f 96       	adiw	r28, 0x1f	; 31
    8634:	ae ad       	ldd	r26, Y+62	; 0x3e
    8636:	bf ad       	ldd	r27, Y+63	; 0x3f
    8638:	6f 97       	sbiw	r28, 0x1f	; 31
    863a:	14 97       	sbiw	r26, 0x04	; 4
    863c:	59 f5       	brne	.+86     	; 0x8694 <_printf_fn+0x40a>
    863e:	51 01       	movw	r10, r2
    8640:	b4 e0       	ldi	r27, 0x04	; 4
    8642:	ab 0e       	add	r10, r27
    8644:	b1 1c       	adc	r11, r1
    8646:	f1 01       	movw	r30, r2
    8648:	80 81       	ld	r24, Z
    864a:	91 81       	ldd	r25, Z+1	; 0x01
    864c:	a2 81       	ldd	r26, Z+2	; 0x02
    864e:	b3 81       	ldd	r27, Z+3	; 0x03
    8650:	2f 96       	adiw	r28, 0x0f	; 15
    8652:	8c af       	std	Y+60, r24	; 0x3c
    8654:	9d af       	std	Y+61, r25	; 0x3d
    8656:	ae af       	std	Y+62, r26	; 0x3e
    8658:	bf af       	std	Y+63, r27	; 0x3f
    865a:	2f 97       	sbiw	r28, 0x0f	; 15
    865c:	a3 96       	adiw	r28, 0x23	; 35
    865e:	2e ad       	ldd	r18, Y+62	; 0x3e
    8660:	3f ad       	ldd	r19, Y+63	; 0x3f
    8662:	a3 97       	sbiw	r28, 0x23	; 35
    8664:	24 34       	cpi	r18, 0x44	; 68
    8666:	31 05       	cpc	r19, r1
    8668:	09 f0       	breq	.+2      	; 0x866c <_printf_fn+0x3e2>
    866a:	96 c0       	rjmp	.+300    	; 0x8798 <_printf_fn+0x50e>
    866c:	b7 ff       	sbrs	r27, 7
    866e:	8e c0       	rjmp	.+284    	; 0x878c <_printf_fn+0x502>
    8670:	68 94       	set
    8672:	96 f8       	bld	r9, 6
    8674:	b0 95       	com	r27
    8676:	a0 95       	com	r26
    8678:	90 95       	com	r25
    867a:	81 95       	neg	r24
    867c:	9f 4f       	sbci	r25, 0xFF	; 255
    867e:	af 4f       	sbci	r26, 0xFF	; 255
    8680:	bf 4f       	sbci	r27, 0xFF	; 255
    8682:	2f 96       	adiw	r28, 0x0f	; 15
    8684:	8c af       	std	Y+60, r24	; 0x3c
    8686:	9d af       	std	Y+61, r25	; 0x3d
    8688:	ae af       	std	Y+62, r26	; 0x3e
    868a:	bf af       	std	Y+63, r27	; 0x3f
    868c:	2f 97       	sbiw	r28, 0x0f	; 15
    868e:	7e c0       	rjmp	.+252    	; 0x878c <_printf_fn+0x502>
    8690:	81 e0       	ldi	r24, 0x01	; 1
    8692:	90 e0       	ldi	r25, 0x00	; 0
    8694:	6f 96       	adiw	r28, 0x1f	; 31
    8696:	ae ad       	ldd	r26, Y+62	; 0x3e
    8698:	bf ad       	ldd	r27, Y+63	; 0x3f
    869a:	6f 97       	sbiw	r28, 0x1f	; 31
    869c:	51 01       	movw	r10, r2
    869e:	18 97       	sbiw	r26, 0x08	; 8
    86a0:	09 f0       	breq	.+2      	; 0x86a4 <_printf_fn+0x41a>
    86a2:	81 c0       	rjmp	.+258    	; 0x87a6 <_printf_fn+0x51c>
    86a4:	b8 e0       	ldi	r27, 0x08	; 8
    86a6:	ab 0e       	add	r10, r27
    86a8:	b1 1c       	adc	r11, r1
    86aa:	f1 01       	movw	r30, r2
    86ac:	f0 81       	ld	r31, Z
    86ae:	aa 96       	adiw	r28, 0x2a	; 42
    86b0:	ff af       	std	Y+63, r31	; 0x3f
    86b2:	aa 97       	sbiw	r28, 0x2a	; 42
    86b4:	f1 01       	movw	r30, r2
    86b6:	f1 80       	ldd	r15, Z+1	; 0x01
    86b8:	02 81       	ldd	r16, Z+2	; 0x02
    86ba:	13 81       	ldd	r17, Z+3	; 0x03
    86bc:	b4 81       	ldd	r27, Z+4	; 0x04
    86be:	f5 81       	ldd	r31, Z+5	; 0x05
    86c0:	ab 96       	adiw	r28, 0x2b	; 43
    86c2:	ff af       	std	Y+63, r31	; 0x3f
    86c4:	ab 97       	sbiw	r28, 0x2b	; 43
    86c6:	f1 01       	movw	r30, r2
    86c8:	f6 81       	ldd	r31, Z+6	; 0x06
    86ca:	ac 96       	adiw	r28, 0x2c	; 44
    86cc:	ff af       	std	Y+63, r31	; 0x3f
    86ce:	ac 97       	sbiw	r28, 0x2c	; 44
    86d0:	f1 01       	movw	r30, r2
    86d2:	37 80       	ldd	r3, Z+7	; 0x07
    86d4:	aa 96       	adiw	r28, 0x2a	; 42
    86d6:	ff ad       	ldd	r31, Y+63	; 0x3f
    86d8:	aa 97       	sbiw	r28, 0x2a	; 42
    86da:	24 96       	adiw	r28, 0x04	; 4
    86dc:	ff af       	std	Y+63, r31	; 0x3f
    86de:	24 97       	sbiw	r28, 0x04	; 4
    86e0:	25 96       	adiw	r28, 0x05	; 5
    86e2:	ff ae       	std	Y+63, r15	; 0x3f
    86e4:	25 97       	sbiw	r28, 0x05	; 5
    86e6:	26 96       	adiw	r28, 0x06	; 6
    86e8:	0f af       	std	Y+63, r16	; 0x3f
    86ea:	26 97       	sbiw	r28, 0x06	; 6
    86ec:	27 96       	adiw	r28, 0x07	; 7
    86ee:	1f af       	std	Y+63, r17	; 0x3f
    86f0:	27 97       	sbiw	r28, 0x07	; 7
    86f2:	28 96       	adiw	r28, 0x08	; 8
    86f4:	bf af       	std	Y+63, r27	; 0x3f
    86f6:	28 97       	sbiw	r28, 0x08	; 8
    86f8:	ab 96       	adiw	r28, 0x2b	; 43
    86fa:	ef ad       	ldd	r30, Y+63	; 0x3f
    86fc:	ab 97       	sbiw	r28, 0x2b	; 43
    86fe:	29 96       	adiw	r28, 0x09	; 9
    8700:	ef af       	std	Y+63, r30	; 0x3f
    8702:	29 97       	sbiw	r28, 0x09	; 9
    8704:	ac 96       	adiw	r28, 0x2c	; 44
    8706:	ff ad       	ldd	r31, Y+63	; 0x3f
    8708:	ac 97       	sbiw	r28, 0x2c	; 44
    870a:	2a 96       	adiw	r28, 0x0a	; 10
    870c:	ff af       	std	Y+63, r31	; 0x3f
    870e:	2a 97       	sbiw	r28, 0x0a	; 10
    8710:	2b 96       	adiw	r28, 0x0b	; 11
    8712:	3f ae       	std	Y+63, r3	; 0x3f
    8714:	2b 97       	sbiw	r28, 0x0b	; 11
    8716:	89 2b       	or	r24, r25
    8718:	09 f4       	brne	.+2      	; 0x871c <_printf_fn+0x492>
    871a:	50 c0       	rjmp	.+160    	; 0x87bc <_printf_fn+0x532>
    871c:	aa 96       	adiw	r28, 0x2a	; 42
    871e:	2f ad       	ldd	r18, Y+63	; 0x3f
    8720:	aa 97       	sbiw	r28, 0x2a	; 42
    8722:	3f 2d       	mov	r19, r15
    8724:	a8 01       	movw	r20, r16
    8726:	6b 2f       	mov	r22, r27
    8728:	7e 2f       	mov	r23, r30
    872a:	8f 2f       	mov	r24, r31
    872c:	93 2d       	mov	r25, r3
    872e:	a0 e0       	ldi	r26, 0x00	; 0
    8730:	0e 94 1c e0 	call	0x1c038	; 0x1c038 <__cmpdi2_s8>
    8734:	0c f0       	brlt	.+2      	; 0x8738 <_printf_fn+0x4ae>
    8736:	42 c0       	rjmp	.+132    	; 0x87bc <_printf_fn+0x532>
    8738:	68 94       	set
    873a:	96 f8       	bld	r9, 6
    873c:	0e 94 ce df 	call	0x1bf9c	; 0x1bf9c <__negdi2>
    8740:	24 96       	adiw	r28, 0x04	; 4
    8742:	2f af       	std	Y+63, r18	; 0x3f
    8744:	24 97       	sbiw	r28, 0x04	; 4
    8746:	25 96       	adiw	r28, 0x05	; 5
    8748:	3f af       	std	Y+63, r19	; 0x3f
    874a:	25 97       	sbiw	r28, 0x05	; 5
    874c:	26 96       	adiw	r28, 0x06	; 6
    874e:	4f af       	std	Y+63, r20	; 0x3f
    8750:	26 97       	sbiw	r28, 0x06	; 6
    8752:	27 96       	adiw	r28, 0x07	; 7
    8754:	5f af       	std	Y+63, r21	; 0x3f
    8756:	27 97       	sbiw	r28, 0x07	; 7
    8758:	28 96       	adiw	r28, 0x08	; 8
    875a:	6f af       	std	Y+63, r22	; 0x3f
    875c:	28 97       	sbiw	r28, 0x08	; 8
    875e:	29 96       	adiw	r28, 0x09	; 9
    8760:	7f af       	std	Y+63, r23	; 0x3f
    8762:	29 97       	sbiw	r28, 0x09	; 9
    8764:	2a 96       	adiw	r28, 0x0a	; 10
    8766:	8f af       	std	Y+63, r24	; 0x3f
    8768:	2a 97       	sbiw	r28, 0x0a	; 10
    876a:	2b 96       	adiw	r28, 0x0b	; 11
    876c:	9f af       	std	Y+63, r25	; 0x3f
    876e:	2b 97       	sbiw	r28, 0x0b	; 11
    8770:	25 c0       	rjmp	.+74     	; 0x87bc <_printf_fn+0x532>
    8772:	22 e0       	ldi	r18, 0x02	; 2
    8774:	30 e0       	ldi	r19, 0x00	; 0
    8776:	6f 96       	adiw	r28, 0x1f	; 31
    8778:	3f af       	std	Y+63, r19	; 0x3f
    877a:	2e af       	std	Y+62, r18	; 0x3e
    877c:	6f 97       	sbiw	r28, 0x1f	; 31
    877e:	6c 96       	adiw	r28, 0x1c	; 28
    8780:	8f ad       	ldd	r24, Y+63	; 0x3f
    8782:	6c 97       	sbiw	r28, 0x1c	; 28
    8784:	6d 96       	adiw	r28, 0x1d	; 29
    8786:	9f ad       	ldd	r25, Y+63	; 0x3f
    8788:	6d 97       	sbiw	r28, 0x1d	; 29
    878a:	1e c0       	rjmp	.+60     	; 0x87c8 <_printf_fn+0x53e>
    878c:	44 e0       	ldi	r20, 0x04	; 4
    878e:	50 e0       	ldi	r21, 0x00	; 0
    8790:	6f 96       	adiw	r28, 0x1f	; 31
    8792:	5f af       	std	Y+63, r21	; 0x3f
    8794:	4e af       	std	Y+62, r20	; 0x3e
    8796:	6f 97       	sbiw	r28, 0x1f	; 31
    8798:	6a 96       	adiw	r28, 0x1a	; 26
    879a:	8f ad       	ldd	r24, Y+63	; 0x3f
    879c:	6a 97       	sbiw	r28, 0x1a	; 26
    879e:	6b 96       	adiw	r28, 0x1b	; 27
    87a0:	9f ad       	ldd	r25, Y+63	; 0x3f
    87a2:	6b 97       	sbiw	r28, 0x1b	; 27
    87a4:	11 c0       	rjmp	.+34     	; 0x87c8 <_printf_fn+0x53e>
    87a6:	66 96       	adiw	r28, 0x16	; 22
    87a8:	8f ad       	ldd	r24, Y+63	; 0x3f
    87aa:	66 97       	sbiw	r28, 0x16	; 22
    87ac:	67 96       	adiw	r28, 0x17	; 23
    87ae:	9f ad       	ldd	r25, Y+63	; 0x3f
    87b0:	67 97       	sbiw	r28, 0x17	; 23
    87b2:	a3 96       	adiw	r28, 0x23	; 35
    87b4:	1f ae       	std	Y+63, r1	; 0x3f
    87b6:	1e ae       	std	Y+62, r1	; 0x3e
    87b8:	a3 97       	sbiw	r28, 0x23	; 35
    87ba:	06 c0       	rjmp	.+12     	; 0x87c8 <_printf_fn+0x53e>
    87bc:	68 96       	adiw	r28, 0x18	; 24
    87be:	8f ad       	ldd	r24, Y+63	; 0x3f
    87c0:	68 97       	sbiw	r28, 0x18	; 24
    87c2:	69 96       	adiw	r28, 0x19	; 25
    87c4:	9f ad       	ldd	r25, Y+63	; 0x3f
    87c6:	69 97       	sbiw	r28, 0x19	; 25
    87c8:	5f ef       	ldi	r21, 0xFF	; 255
    87ca:	65 1a       	sub	r6, r21
    87cc:	75 0a       	sbc	r7, r21
    87ce:	85 0a       	sbc	r8, r21
    87d0:	15 01       	movw	r2, r10
    87d2:	2d c0       	rjmp	.+90     	; 0x882e <_printf_fn+0x5a4>
    87d4:	91 fc       	sbrc	r9, 1
    87d6:	08 c0       	rjmp	.+16     	; 0x87e8 <_printf_fn+0x55e>
    87d8:	68 94       	set
    87da:	91 f8       	bld	r9, 1
    87dc:	86 e0       	ldi	r24, 0x06	; 6
    87de:	90 e0       	ldi	r25, 0x00	; 0
    87e0:	a1 96       	adiw	r28, 0x21	; 33
    87e2:	9f af       	std	Y+63, r25	; 0x3f
    87e4:	8e af       	std	Y+62, r24	; 0x3e
    87e6:	a1 97       	sbiw	r28, 0x21	; 33
    87e8:	d1 01       	movw	r26, r2
    87ea:	2d 91       	ld	r18, X+
    87ec:	3d 91       	ld	r19, X+
    87ee:	4d 91       	ld	r20, X+
    87f0:	5c 91       	ld	r21, X
    87f2:	a9 96       	adiw	r28, 0x29	; 41
    87f4:	2c af       	std	Y+60, r18	; 0x3c
    87f6:	3d af       	std	Y+61, r19	; 0x3d
    87f8:	4e af       	std	Y+62, r20	; 0x3e
    87fa:	5f af       	std	Y+63, r21	; 0x3f
    87fc:	a9 97       	sbiw	r28, 0x29	; 41
    87fe:	bf ef       	ldi	r27, 0xFF	; 255
    8800:	6b 1a       	sub	r6, r27
    8802:	7b 0a       	sbc	r7, r27
    8804:	8b 0a       	sbc	r8, r27
    8806:	f1 01       	movw	r30, r2
    8808:	34 96       	adiw	r30, 0x04	; 4
    880a:	1f 01       	movw	r2, r30
    880c:	0a c0       	rjmp	.+20     	; 0x8822 <_printf_fn+0x598>
    880e:	ff ef       	ldi	r31, 0xFF	; 255
    8810:	6f 1a       	sub	r6, r31
    8812:	7f 0a       	sbc	r7, r31
    8814:	8f 0a       	sbc	r8, r31
    8816:	b0 c0       	rjmp	.+352    	; 0x8978 <_printf_fn+0x6ee>
    8818:	2f ef       	ldi	r18, 0xFF	; 255
    881a:	62 1a       	sub	r6, r18
    881c:	72 0a       	sbc	r7, r18
    881e:	82 0a       	sbc	r8, r18
    8820:	b8 c0       	rjmp	.+368    	; 0x8992 <_printf_fn+0x708>
    8822:	66 96       	adiw	r28, 0x16	; 22
    8824:	8f ad       	ldd	r24, Y+63	; 0x3f
    8826:	66 97       	sbiw	r28, 0x16	; 22
    8828:	67 96       	adiw	r28, 0x17	; 23
    882a:	9f ad       	ldd	r25, Y+63	; 0x3f
    882c:	67 97       	sbiw	r28, 0x17	; 23
    882e:	a3 96       	adiw	r28, 0x23	; 35
    8830:	ee ad       	ldd	r30, Y+62	; 0x3e
    8832:	ff ad       	ldd	r31, Y+63	; 0x3f
    8834:	a3 97       	sbiw	r28, 0x23	; 35
    8836:	e2 54       	subi	r30, 0x42	; 66
    8838:	f1 09       	sbc	r31, r1
    883a:	e7 33       	cpi	r30, 0x37	; 55
    883c:	f1 05       	cpc	r31, r1
    883e:	08 f0       	brcs	.+2      	; 0x8842 <_printf_fn+0x5b8>
    8840:	f9 c0       	rjmp	.+498    	; 0x8a34 <_printf_fn+0x7aa>
    8842:	e3 58       	subi	r30, 0x83	; 131
    8844:	ff 4f       	sbci	r31, 0xFF	; 255
    8846:	0c 94 af df 	jmp	0x1bf5e	; 0x1bf5e <__tablejump2__>
    884a:	e8 94       	clt
    884c:	94 f8       	bld	r9, 4
    884e:	e8 94       	clt
    8850:	92 f8       	bld	r9, 2
    8852:	a9 2c       	mov	r10, r9
    8854:	b1 2c       	mov	r11, r1
    8856:	a1 96       	adiw	r28, 0x21	; 33
    8858:	ce ac       	ldd	r12, Y+62	; 0x3e
    885a:	df ac       	ldd	r13, Y+63	; 0x3f
    885c:	a1 97       	sbiw	r28, 0x21	; 33
    885e:	72 01       	movw	r14, r4
    8860:	0a e0       	ldi	r16, 0x0A	; 10
    8862:	10 e0       	ldi	r17, 0x00	; 0
    8864:	13 c0       	rjmp	.+38     	; 0x888c <_printf_fn+0x602>
    8866:	a9 2c       	mov	r10, r9
    8868:	b1 2c       	mov	r11, r1
    886a:	a1 96       	adiw	r28, 0x21	; 33
    886c:	ce ac       	ldd	r12, Y+62	; 0x3e
    886e:	df ac       	ldd	r13, Y+63	; 0x3f
    8870:	a1 97       	sbiw	r28, 0x21	; 33
    8872:	72 01       	movw	r14, r4
    8874:	02 e0       	ldi	r16, 0x02	; 2
    8876:	10 e0       	ldi	r17, 0x00	; 0
    8878:	09 c0       	rjmp	.+18     	; 0x888c <_printf_fn+0x602>
    887a:	a9 2c       	mov	r10, r9
    887c:	b1 2c       	mov	r11, r1
    887e:	a1 96       	adiw	r28, 0x21	; 33
    8880:	ce ac       	ldd	r12, Y+62	; 0x3e
    8882:	df ac       	ldd	r13, Y+63	; 0x3f
    8884:	a1 97       	sbiw	r28, 0x21	; 33
    8886:	72 01       	movw	r14, r4
    8888:	08 e0       	ldi	r16, 0x08	; 8
    888a:	10 e0       	ldi	r17, 0x00	; 0
    888c:	22 e4       	ldi	r18, 0x42	; 66
    888e:	30 e0       	ldi	r19, 0x00	; 0
    8890:	ae 01       	movw	r20, r28
    8892:	4f 5f       	subi	r20, 0xFF	; 255
    8894:	5f 4f       	sbci	r21, 0xFF	; 255
    8896:	6f 96       	adiw	r28, 0x1f	; 31
    8898:	6e ad       	ldd	r22, Y+62	; 0x3e
    889a:	7f ad       	ldd	r23, Y+63	; 0x3f
    889c:	6f 97       	sbiw	r28, 0x1f	; 31
    889e:	fb d9       	rcall	.-3082   	; 0x7c96 <p_ntoa>
    88a0:	30 c0       	rjmp	.+96     	; 0x8902 <_printf_fn+0x678>
    88a2:	a9 2c       	mov	r10, r9
    88a4:	b1 2c       	mov	r11, r1
    88a6:	a1 96       	adiw	r28, 0x21	; 33
    88a8:	ce ac       	ldd	r12, Y+62	; 0x3e
    88aa:	df ac       	ldd	r13, Y+63	; 0x3f
    88ac:	a1 97       	sbiw	r28, 0x21	; 33
    88ae:	72 01       	movw	r14, r4
    88b0:	00 e1       	ldi	r16, 0x10	; 16
    88b2:	10 e0       	ldi	r17, 0x00	; 0
    88b4:	22 e4       	ldi	r18, 0x42	; 66
    88b6:	30 e0       	ldi	r19, 0x00	; 0
    88b8:	ae 01       	movw	r20, r28
    88ba:	4f 5f       	subi	r20, 0xFF	; 255
    88bc:	5f 4f       	sbci	r21, 0xFF	; 255
    88be:	6f 96       	adiw	r28, 0x1f	; 31
    88c0:	6e ad       	ldd	r22, Y+62	; 0x3e
    88c2:	7f ad       	ldd	r23, Y+63	; 0x3f
    88c4:	6f 97       	sbiw	r28, 0x1f	; 31
    88c6:	e7 d9       	rcall	.-3122   	; 0x7c96 <p_ntoa>
    88c8:	7c 01       	movw	r14, r24
    88ca:	a3 96       	adiw	r28, 0x23	; 35
    88cc:	6e ad       	ldd	r22, Y+62	; 0x3e
    88ce:	7f ad       	ldd	r23, Y+63	; 0x3f
    88d0:	a3 97       	sbiw	r28, 0x23	; 35
    88d2:	67 7f       	andi	r22, 0xF7	; 247
    88d4:	60 35       	cpi	r22, 0x50	; 80
    88d6:	71 05       	cpc	r23, r1
    88d8:	c9 f5       	brne	.+114    	; 0x894c <_printf_fn+0x6c2>
    88da:	34 c0       	rjmp	.+104    	; 0x8944 <_printf_fn+0x6ba>
    88dc:	c9 2c       	mov	r12, r9
    88de:	d1 2c       	mov	r13, r1
    88e0:	a1 96       	adiw	r28, 0x21	; 33
    88e2:	ee ac       	ldd	r14, Y+62	; 0x3e
    88e4:	ff ac       	ldd	r15, Y+63	; 0x3f
    88e6:	a1 97       	sbiw	r28, 0x21	; 33
    88e8:	82 01       	movw	r16, r4
    88ea:	22 e4       	ldi	r18, 0x42	; 66
    88ec:	30 e0       	ldi	r19, 0x00	; 0
    88ee:	ae 01       	movw	r20, r28
    88f0:	4f 5f       	subi	r20, 0xFF	; 255
    88f2:	5f 4f       	sbci	r21, 0xFF	; 255
    88f4:	a9 96       	adiw	r28, 0x29	; 41
    88f6:	6c ad       	ldd	r22, Y+60	; 0x3c
    88f8:	7d ad       	ldd	r23, Y+61	; 0x3d
    88fa:	8e ad       	ldd	r24, Y+62	; 0x3e
    88fc:	9f ad       	ldd	r25, Y+63	; 0x3f
    88fe:	a9 97       	sbiw	r28, 0x29	; 41
    8900:	1f da       	rcall	.-3010   	; 0x7d40 <p_ftoa>
    8902:	93 fa       	bst	r9, 3
    8904:	00 27       	eor	r16, r16
    8906:	00 f9       	bld	r16, 0
    8908:	10 e0       	ldi	r17, 0x00	; 0
    890a:	9c 01       	movw	r18, r24
    890c:	24 c0       	rjmp	.+72     	; 0x8956 <_printf_fn+0x6cc>
    890e:	c9 2c       	mov	r12, r9
    8910:	d1 2c       	mov	r13, r1
    8912:	a1 96       	adiw	r28, 0x21	; 33
    8914:	ee ac       	ldd	r14, Y+62	; 0x3e
    8916:	ff ac       	ldd	r15, Y+63	; 0x3f
    8918:	a1 97       	sbiw	r28, 0x21	; 33
    891a:	82 01       	movw	r16, r4
    891c:	22 e4       	ldi	r18, 0x42	; 66
    891e:	30 e0       	ldi	r19, 0x00	; 0
    8920:	ae 01       	movw	r20, r28
    8922:	4f 5f       	subi	r20, 0xFF	; 255
    8924:	5f 4f       	sbci	r21, 0xFF	; 255
    8926:	a9 96       	adiw	r28, 0x29	; 41
    8928:	6c ad       	ldd	r22, Y+60	; 0x3c
    892a:	7d ad       	ldd	r23, Y+61	; 0x3d
    892c:	8e ad       	ldd	r24, Y+62	; 0x3e
    892e:	9f ad       	ldd	r25, Y+63	; 0x3f
    8930:	a9 97       	sbiw	r28, 0x29	; 41
    8932:	0d db       	rcall	.-2534   	; 0x7f4e <p_etoa>
    8934:	7c 01       	movw	r14, r24
    8936:	a3 96       	adiw	r28, 0x23	; 35
    8938:	4e ad       	ldd	r20, Y+62	; 0x3e
    893a:	5f ad       	ldd	r21, Y+63	; 0x3f
    893c:	a3 97       	sbiw	r28, 0x23	; 35
    893e:	45 34       	cpi	r20, 0x45	; 69
    8940:	51 05       	cpc	r21, r1
    8942:	21 f4       	brne	.+8      	; 0x894c <_printf_fn+0x6c2>
    8944:	ce 01       	movw	r24, r28
    8946:	01 96       	adiw	r24, 0x01	; 1
    8948:	0e 94 ea 30 	call	0x61d4	; 0x61d4 <strupper>
    894c:	93 fa       	bst	r9, 3
    894e:	00 27       	eor	r16, r16
    8950:	00 f9       	bld	r16, 0
    8952:	10 e0       	ldi	r17, 0x00	; 0
    8954:	97 01       	movw	r18, r14
    8956:	a2 01       	movw	r20, r4
    8958:	be 01       	movw	r22, r28
    895a:	6f 5f       	subi	r22, 0xFF	; 255
    895c:	7f 4f       	sbci	r23, 0xFF	; 255
    895e:	a5 96       	adiw	r28, 0x25	; 37
    8960:	8e ad       	ldd	r24, Y+62	; 0x3e
    8962:	9f ad       	ldd	r25, Y+63	; 0x3f
    8964:	a5 97       	sbiw	r28, 0x25	; 37
    8966:	4f dc       	rcall	.-1890   	; 0x8206 <_puts_pad>
    8968:	69 c0       	rjmp	.+210    	; 0x8a3c <_printf_fn+0x7b2>
    896a:	a3 96       	adiw	r28, 0x23	; 35
    896c:	8e ad       	ldd	r24, Y+62	; 0x3e
    896e:	9f ad       	ldd	r25, Y+63	; 0x3f
    8970:	a3 97       	sbiw	r28, 0x23	; 35
    8972:	83 37       	cpi	r24, 0x73	; 115
    8974:	91 05       	cpc	r25, r1
    8976:	69 f4       	brne	.+26     	; 0x8992 <_printf_fn+0x708>
    8978:	71 01       	movw	r14, r2
    897a:	92 e0       	ldi	r25, 0x02	; 2
    897c:	e9 0e       	add	r14, r25
    897e:	f1 1c       	adc	r15, r1
    8980:	d1 01       	movw	r26, r2
    8982:	6d 91       	ld	r22, X+
    8984:	7c 91       	ld	r23, X
    8986:	61 15       	cp	r22, r1
    8988:	71 05       	cpc	r23, r1
    898a:	91 f4       	brne	.+36     	; 0x89b0 <_printf_fn+0x726>
    898c:	6c ee       	ldi	r22, 0xEC	; 236
    898e:	73 e0       	ldi	r23, 0x03	; 3
    8990:	0f c0       	rjmp	.+30     	; 0x89b0 <_printf_fn+0x726>
    8992:	71 01       	movw	r14, r2
    8994:	b2 e0       	ldi	r27, 0x02	; 2
    8996:	eb 0e       	add	r14, r27
    8998:	f1 1c       	adc	r15, r1
    899a:	f1 01       	movw	r30, r2
    899c:	80 81       	ld	r24, Z
    899e:	60 96       	adiw	r28, 0x10	; 16
    89a0:	8f af       	std	Y+63, r24	; 0x3f
    89a2:	60 97       	sbiw	r28, 0x10	; 16
    89a4:	61 96       	adiw	r28, 0x11	; 17
    89a6:	1f ae       	std	Y+63, r1	; 0x3f
    89a8:	61 97       	sbiw	r28, 0x11	; 17
    89aa:	be 01       	movw	r22, r28
    89ac:	61 5b       	subi	r22, 0xB1	; 177
    89ae:	7f 4f       	sbci	r23, 0xFF	; 255
    89b0:	fb 01       	movw	r30, r22
    89b2:	01 90       	ld	r0, Z+
    89b4:	00 20       	and	r0, r0
    89b6:	e9 f7       	brne	.-6      	; 0x89b2 <_printf_fn+0x728>
    89b8:	31 97       	sbiw	r30, 0x01	; 1
    89ba:	e6 1b       	sub	r30, r22
    89bc:	f7 0b       	sbc	r31, r23
    89be:	a1 96       	adiw	r28, 0x21	; 33
    89c0:	2e ad       	ldd	r18, Y+62	; 0x3e
    89c2:	3f ad       	ldd	r19, Y+63	; 0x3f
    89c4:	a1 97       	sbiw	r28, 0x21	; 33
    89c6:	23 2b       	or	r18, r19
    89c8:	21 f4       	brne	.+8      	; 0x89d2 <_printf_fn+0x748>
    89ca:	a1 96       	adiw	r28, 0x21	; 33
    89cc:	ff af       	std	Y+63, r31	; 0x3f
    89ce:	ee af       	std	Y+62, r30	; 0x3e
    89d0:	a1 97       	sbiw	r28, 0x21	; 33
    89d2:	a1 96       	adiw	r28, 0x21	; 33
    89d4:	4e ad       	ldd	r20, Y+62	; 0x3e
    89d6:	5f ad       	ldd	r21, Y+63	; 0x3f
    89d8:	a1 97       	sbiw	r28, 0x21	; 33
    89da:	44 16       	cp	r4, r20
    89dc:	55 06       	cpc	r5, r21
    89de:	3c f4       	brge	.+14     	; 0x89ee <_printf_fn+0x764>
    89e0:	41 14       	cp	r4, r1
    89e2:	51 04       	cpc	r5, r1
    89e4:	21 f0       	breq	.+8      	; 0x89ee <_printf_fn+0x764>
    89e6:	a1 96       	adiw	r28, 0x21	; 33
    89e8:	5f ae       	std	Y+63, r5	; 0x3f
    89ea:	4e ae       	std	Y+62, r4	; 0x3e
    89ec:	a1 97       	sbiw	r28, 0x21	; 33
    89ee:	93 fa       	bst	r9, 3
    89f0:	00 27       	eor	r16, r16
    89f2:	00 f9       	bld	r16, 0
    89f4:	10 e0       	ldi	r17, 0x00	; 0
    89f6:	a1 96       	adiw	r28, 0x21	; 33
    89f8:	2e ad       	ldd	r18, Y+62	; 0x3e
    89fa:	3f ad       	ldd	r19, Y+63	; 0x3f
    89fc:	a1 97       	sbiw	r28, 0x21	; 33
    89fe:	a2 01       	movw	r20, r4
    8a00:	a5 96       	adiw	r28, 0x25	; 37
    8a02:	8e ad       	ldd	r24, Y+62	; 0x3e
    8a04:	9f ad       	ldd	r25, Y+63	; 0x3f
    8a06:	a5 97       	sbiw	r28, 0x25	; 37
    8a08:	fe db       	rcall	.-2052   	; 0x8206 <_puts_pad>
    8a0a:	17 01       	movw	r2, r14
    8a0c:	17 c0       	rjmp	.+46     	; 0x8a3c <_printf_fn+0x7b2>
    8a0e:	f6 01       	movw	r30, r12
    8a10:	5e 2d       	mov	r21, r14
    8a12:	0e 94 15 e0 	call	0x1c02a	; 0x1c02a <__xload_1>
    8a16:	66 23       	and	r22, r22
    8a18:	89 f0       	breq	.+34     	; 0x8a3c <_printf_fn+0x7b2>
    8a1a:	5f ef       	ldi	r21, 0xFF	; 255
    8a1c:	c5 1a       	sub	r12, r21
    8a1e:	d5 0a       	sbc	r13, r21
    8a20:	e5 0a       	sbc	r14, r21
    8a22:	a5 96       	adiw	r28, 0x25	; 37
    8a24:	ae ad       	ldd	r26, Y+62	; 0x3e
    8a26:	bf ad       	ldd	r27, Y+63	; 0x3f
    8a28:	a5 97       	sbiw	r28, 0x25	; 37
    8a2a:	ed 91       	ld	r30, X+
    8a2c:	fc 91       	ld	r31, X
    8a2e:	11 97       	sbiw	r26, 0x01	; 1
    8a30:	cd 01       	movw	r24, r26
    8a32:	09 95       	icall
    8a34:	6c 14       	cp	r6, r12
    8a36:	7d 04       	cpc	r7, r13
    8a38:	8e 04       	cpc	r8, r14
    8a3a:	48 f7       	brcc	.-46     	; 0x8a0e <_printf_fn+0x784>
    8a3c:	e8 2c       	mov	r14, r8
    8a3e:	63 01       	movw	r12, r6
    8a40:	53 cc       	rjmp	.-1882   	; 0x82e8 <_printf_fn+0x5e>
    8a42:	e2 e0       	ldi	r30, 0x02	; 2
    8a44:	f0 e0       	ldi	r31, 0x00	; 0
    8a46:	6f 96       	adiw	r28, 0x1f	; 31
    8a48:	ff af       	std	Y+63, r31	; 0x3f
    8a4a:	ee af       	std	Y+62, r30	; 0x3e
    8a4c:	6f 97       	sbiw	r28, 0x1f	; 31
    8a4e:	5f cd       	rjmp	.-1346   	; 0x850e <_printf_fn+0x284>
    8a50:	6f 96       	adiw	r28, 0x1f	; 31
    8a52:	ee ad       	ldd	r30, Y+62	; 0x3e
    8a54:	ff ad       	ldd	r31, Y+63	; 0x3f
    8a56:	6f 97       	sbiw	r28, 0x1f	; 31
    8a58:	32 97       	sbiw	r30, 0x02	; 2
    8a5a:	61 f4       	brne	.+24     	; 0x8a74 <_printf_fn+0x7ea>
    8a5c:	51 01       	movw	r10, r2
    8a5e:	f2 e0       	ldi	r31, 0x02	; 2
    8a60:	af 0e       	add	r10, r31
    8a62:	b1 1c       	adc	r11, r1
    8a64:	d1 01       	movw	r26, r2
    8a66:	8d 91       	ld	r24, X+
    8a68:	9c 91       	ld	r25, X
    8a6a:	65 96       	adiw	r28, 0x15	; 21
    8a6c:	9f af       	std	Y+63, r25	; 0x3f
    8a6e:	8e af       	std	Y+62, r24	; 0x3e
    8a70:	65 97       	sbiw	r28, 0x15	; 21
    8a72:	cd cd       	rjmp	.-1126   	; 0x860e <_printf_fn+0x384>
    8a74:	6f 96       	adiw	r28, 0x1f	; 31
    8a76:	2e ad       	ldd	r18, Y+62	; 0x3e
    8a78:	3f ad       	ldd	r19, Y+63	; 0x3f
    8a7a:	6f 97       	sbiw	r28, 0x1f	; 31
    8a7c:	24 30       	cpi	r18, 0x04	; 4
    8a7e:	31 05       	cpc	r19, r1
    8a80:	09 f0       	breq	.+2      	; 0x8a84 <_printf_fn+0x7fa>
    8a82:	06 ce       	rjmp	.-1012   	; 0x8690 <_printf_fn+0x406>
    8a84:	51 01       	movw	r10, r2
    8a86:	f4 e0       	ldi	r31, 0x04	; 4
    8a88:	af 0e       	add	r10, r31
    8a8a:	b1 1c       	adc	r11, r1
    8a8c:	f1 01       	movw	r30, r2
    8a8e:	80 81       	ld	r24, Z
    8a90:	91 81       	ldd	r25, Z+1	; 0x01
    8a92:	a2 81       	ldd	r26, Z+2	; 0x02
    8a94:	b3 81       	ldd	r27, Z+3	; 0x03
    8a96:	2f 96       	adiw	r28, 0x0f	; 15
    8a98:	8c af       	std	Y+60, r24	; 0x3c
    8a9a:	9d af       	std	Y+61, r25	; 0x3d
    8a9c:	ae af       	std	Y+62, r26	; 0x3e
    8a9e:	bf af       	std	Y+63, r27	; 0x3f
    8aa0:	2f 97       	sbiw	r28, 0x0f	; 15
    8aa2:	e4 cd       	rjmp	.-1080   	; 0x866c <_printf_fn+0x3e2>
    8aa4:	c5 59       	subi	r28, 0x95	; 149
    8aa6:	df 4f       	sbci	r29, 0xFF	; 255
    8aa8:	e2 e1       	ldi	r30, 0x12	; 18
    8aaa:	0c 94 fa df 	jmp	0x1bff4	; 0x1bff4 <__epilogue_restores__>

00008aae <vsnprintf_P>:
    8aae:	a8 e0       	ldi	r26, 0x08	; 8
    8ab0:	b0 e0       	ldi	r27, 0x00	; 0
    8ab2:	ed e5       	ldi	r30, 0x5D	; 93
    8ab4:	f5 e4       	ldi	r31, 0x45	; 69
    8ab6:	0c 94 ea df 	jmp	0x1bfd4	; 0x1bfd4 <__prologue_saves__+0x18>
    8aba:	7c 01       	movw	r14, r24
    8abc:	cb 01       	movw	r24, r22
    8abe:	64 2f       	mov	r22, r20
    8ac0:	a9 01       	movw	r20, r18
    8ac2:	98 01       	movw	r18, r16
    8ac4:	f7 01       	movw	r30, r14
    8ac6:	10 82       	st	Z, r1
    8ac8:	ec e6       	ldi	r30, 0x6C	; 108
    8aca:	fd e3       	ldi	r31, 0x3D	; 61
    8acc:	fa 83       	std	Y+2, r31	; 0x02
    8ace:	e9 83       	std	Y+1, r30	; 0x01
    8ad0:	9e 83       	std	Y+6, r25	; 0x06
    8ad2:	8d 83       	std	Y+5, r24	; 0x05
    8ad4:	18 86       	std	Y+8, r1	; 0x08
    8ad6:	1f 82       	std	Y+7, r1	; 0x07
    8ad8:	fc 82       	std	Y+4, r15	; 0x04
    8ada:	eb 82       	std	Y+3, r14	; 0x03
    8adc:	ce 01       	movw	r24, r28
    8ade:	01 96       	adiw	r24, 0x01	; 1
    8ae0:	d4 db       	rcall	.-2136   	; 0x828a <_printf_fn>
    8ae2:	f7 01       	movw	r30, r14
    8ae4:	01 90       	ld	r0, Z+
    8ae6:	00 20       	and	r0, r0
    8ae8:	e9 f7       	brne	.-6      	; 0x8ae4 <vsnprintf_P+0x36>
    8aea:	cf 01       	movw	r24, r30
    8aec:	01 97       	sbiw	r24, 0x01	; 1
    8aee:	8e 19       	sub	r24, r14
    8af0:	9f 09       	sbc	r25, r15
    8af2:	28 96       	adiw	r28, 0x08	; 8
    8af4:	e6 e0       	ldi	r30, 0x06	; 6
    8af6:	0c 94 06 e0 	jmp	0x1c00c	; 0x1c00c <__epilogue_restores__+0x18>

00008afa <snprintf_P>:
    8afa:	a0 e0       	ldi	r26, 0x00	; 0
    8afc:	b0 e0       	ldi	r27, 0x00	; 0
    8afe:	e3 e8       	ldi	r30, 0x83	; 131
    8b00:	f5 e4       	ldi	r31, 0x45	; 69
    8b02:	0c 94 ec df 	jmp	0x1bfd8	; 0x1bfd8 <__prologue_saves__+0x1c>
    8b06:	8e 01       	movw	r16, r28
    8b08:	02 5f       	subi	r16, 0xF2	; 242
    8b0a:	1f 4f       	sbci	r17, 0xFF	; 255
    8b0c:	2b 85       	ldd	r18, Y+11	; 0x0b
    8b0e:	3c 85       	ldd	r19, Y+12	; 0x0c
    8b10:	4d 85       	ldd	r20, Y+13	; 0x0d
    8b12:	69 85       	ldd	r22, Y+9	; 0x09
    8b14:	7a 85       	ldd	r23, Y+10	; 0x0a
    8b16:	8f 81       	ldd	r24, Y+7	; 0x07
    8b18:	98 85       	ldd	r25, Y+8	; 0x08
    8b1a:	c9 df       	rcall	.-110    	; 0x8aae <vsnprintf_P>
    8b1c:	e4 e0       	ldi	r30, 0x04	; 4
    8b1e:	0c 94 08 e0 	jmp	0x1c010	; 0x1c010 <__epilogue_restores__+0x1c>

00008b22 <sprintf_P>:
    8b22:	a0 e0       	ldi	r26, 0x00	; 0
    8b24:	b0 e0       	ldi	r27, 0x00	; 0
    8b26:	e7 e9       	ldi	r30, 0x97	; 151
    8b28:	f5 e4       	ldi	r31, 0x45	; 69
    8b2a:	0c 94 ec df 	jmp	0x1bfd8	; 0x1bfd8 <__prologue_saves__+0x1c>
    8b2e:	8e 01       	movw	r16, r28
    8b30:	04 5f       	subi	r16, 0xF4	; 244
    8b32:	1f 4f       	sbci	r17, 0xFF	; 255
    8b34:	29 85       	ldd	r18, Y+9	; 0x09
    8b36:	3a 85       	ldd	r19, Y+10	; 0x0a
    8b38:	4b 85       	ldd	r20, Y+11	; 0x0b
    8b3a:	60 e0       	ldi	r22, 0x00	; 0
    8b3c:	74 e0       	ldi	r23, 0x04	; 4
    8b3e:	8f 81       	ldd	r24, Y+7	; 0x07
    8b40:	98 85       	ldd	r25, Y+8	; 0x08
    8b42:	b5 df       	rcall	.-150    	; 0x8aae <vsnprintf_P>
    8b44:	e4 e0       	ldi	r30, 0x04	; 4
    8b46:	0c 94 08 e0 	jmp	0x1c010	; 0x1c010 <__epilogue_restores__+0x1c>

00008b4a <printf_P>:
/// @return size of printed string
/// TODO create a devprintf using an array of function prointers ?
MEMSPACE 
int 
printf_P(__memx const char *format, ...)
{
    8b4a:	a8 e0       	ldi	r26, 0x08	; 8
    8b4c:	b0 e0       	ldi	r27, 0x00	; 0
    8b4e:	eb ea       	ldi	r30, 0xAB	; 171
    8b50:	f5 e4       	ldi	r31, 0x45	; 69
    8b52:	0c 94 ee df 	jmp	0x1bfdc	; 0x1bfdc <__prologue_saves__+0x20>
    8b56:	9e 01       	movw	r18, r28
    8b58:	23 5f       	subi	r18, 0xF3	; 243
    8b5a:	3f 4f       	sbci	r19, 0xFF	; 255
    8b5c:	f9 01       	movw	r30, r18
    8b5e:	41 91       	ld	r20, Z+
    8b60:	51 91       	ld	r21, Z+
    8b62:	61 91       	ld	r22, Z+
    8b64:	9f 01       	movw	r18, r30
    printf_t fn;
    va_list va;

    fn.put = _putc_fn;
    8b66:	85 e8       	ldi	r24, 0x85	; 133
    8b68:	9d e3       	ldi	r25, 0x3D	; 61
    8b6a:	9a 83       	std	Y+2, r25	; 0x02
    8b6c:	89 83       	std	Y+1, r24	; 0x01
    fn.sent = 0;
    8b6e:	18 86       	std	Y+8, r1	; 0x08
    8b70:	1f 82       	std	Y+7, r1	; 0x07

    va_start(va, format);
    _printf_fn(&fn, format, va);
    8b72:	ce 01       	movw	r24, r28
    8b74:	01 96       	adiw	r24, 0x01	; 1
    8b76:	89 db       	rcall	.-2286   	; 0x828a <_printf_fn>
    va_end(va);

    return ((int)fn.sent);
}
    8b78:	8f 81       	ldd	r24, Y+7	; 0x07
    8b7a:	98 85       	ldd	r25, Y+8	; 0x08
    8b7c:	28 96       	adiw	r28, 0x08	; 8
    8b7e:	e2 e0       	ldi	r30, 0x02	; 2
    8b80:	0c 94 0a e0 	jmp	0x1c014	; 0x1c014 <__epilogue_restores__+0x20>

00008b84 <atodigit>:
    if(sign)
        num = -num;
    if(endptr)
        *endptr = (char *) nptr;
    return(num);
}
    8b84:	9c 01       	movw	r18, r24
    8b86:	20 53       	subi	r18, 0x30	; 48
    8b88:	31 09       	sbc	r19, r1
    8b8a:	2a 30       	cpi	r18, 0x0A	; 10
    8b8c:	31 05       	cpc	r19, r1
    8b8e:	10 f4       	brcc	.+4      	; 0x8b94 <atodigit+0x10>
    8b90:	c9 01       	movw	r24, r18
    8b92:	10 c0       	rjmp	.+32     	; 0x8bb4 <atodigit+0x30>
    8b94:	9c 01       	movw	r18, r24
    8b96:	21 54       	subi	r18, 0x41	; 65
    8b98:	31 09       	sbc	r19, r1
    8b9a:	26 30       	cpi	r18, 0x06	; 6
    8b9c:	31 05       	cpc	r19, r1
    8b9e:	10 f4       	brcc	.+4      	; 0x8ba4 <atodigit+0x20>
    8ba0:	c7 97       	sbiw	r24, 0x37	; 55
    8ba2:	08 c0       	rjmp	.+16     	; 0x8bb4 <atodigit+0x30>
    8ba4:	9c 01       	movw	r18, r24
    8ba6:	21 56       	subi	r18, 0x61	; 97
    8ba8:	31 09       	sbc	r19, r1
    8baa:	26 30       	cpi	r18, 0x06	; 6
    8bac:	31 05       	cpc	r19, r1
    8bae:	28 f4       	brcc	.+10     	; 0x8bba <atodigit+0x36>
    8bb0:	87 55       	subi	r24, 0x57	; 87
    8bb2:	91 09       	sbc	r25, r1
    8bb4:	86 17       	cp	r24, r22
    8bb6:	97 07       	cpc	r25, r23
    8bb8:	14 f0       	brlt	.+4      	; 0x8bbe <atodigit+0x3a>
    8bba:	8f ef       	ldi	r24, 0xFF	; 255
    8bbc:	9f ef       	ldi	r25, 0xFF	; 255
    8bbe:	08 95       	ret

00008bc0 <strtol>:
    8bc0:	a0 e0       	ldi	r26, 0x00	; 0
    8bc2:	b0 e0       	ldi	r27, 0x00	; 0
    8bc4:	e6 ee       	ldi	r30, 0xE6	; 230
    8bc6:	f5 e4       	ldi	r31, 0x45	; 69
    8bc8:	0c 94 de df 	jmp	0x1bfbc	; 0x1bfbc <__prologue_saves__>
    8bcc:	2b 01       	movw	r4, r22
    8bce:	8a 01       	movw	r16, r20
    8bd0:	ec 01       	movw	r28, r24
    8bd2:	28 81       	ld	r18, Y
    8bd4:	01 96       	adiw	r24, 0x01	; 1
    8bd6:	20 32       	cpi	r18, 0x20	; 32
    8bd8:	d9 f3       	breq	.-10     	; 0x8bd0 <strtol+0x10>
    8bda:	29 30       	cpi	r18, 0x09	; 9
    8bdc:	c9 f3       	breq	.-14     	; 0x8bd0 <strtol+0x10>
    8bde:	2d 32       	cpi	r18, 0x2D	; 45
    8be0:	29 f4       	brne	.+10     	; 0x8bec <strtol+0x2c>
    8be2:	ec 01       	movw	r28, r24
    8be4:	66 24       	eor	r6, r6
    8be6:	63 94       	inc	r6
    8be8:	71 2c       	mov	r7, r1
    8bea:	05 c0       	rjmp	.+10     	; 0x8bf6 <strtol+0x36>
    8bec:	2b 32       	cpi	r18, 0x2B	; 43
    8bee:	09 f4       	brne	.+2      	; 0x8bf2 <strtol+0x32>
    8bf0:	ec 01       	movw	r28, r24
    8bf2:	61 2c       	mov	r6, r1
    8bf4:	71 2c       	mov	r7, r1
    8bf6:	9e 01       	movw	r18, r28
    8bf8:	2f 5f       	subi	r18, 0xFF	; 255
    8bfa:	3f 4f       	sbci	r19, 0xFF	; 255
    8bfc:	88 81       	ld	r24, Y
    8bfe:	80 33       	cpi	r24, 0x30	; 48
    8c00:	11 f4       	brne	.+4      	; 0x8c06 <strtol+0x46>
    8c02:	e9 01       	movw	r28, r18
    8c04:	f8 cf       	rjmp	.-16     	; 0x8bf6 <strtol+0x36>
    8c06:	c1 2c       	mov	r12, r1
    8c08:	d1 2c       	mov	r13, r1
    8c0a:	76 01       	movw	r14, r12
    8c0c:	48 01       	movw	r8, r16
    8c0e:	01 2e       	mov	r0, r17
    8c10:	00 0c       	add	r0, r0
    8c12:	aa 08       	sbc	r10, r10
    8c14:	bb 08       	sbc	r11, r11
    8c16:	3c 2e       	mov	r3, r28
    8c18:	2d 2e       	mov	r2, r29
    8c1a:	89 91       	ld	r24, Y+
    8c1c:	88 23       	and	r24, r24
    8c1e:	31 f0       	breq	.+12     	; 0x8c2c <strtol+0x6c>
    8c20:	b8 01       	movw	r22, r16
    8c22:	90 e0       	ldi	r25, 0x00	; 0
    8c24:	af df       	rcall	.-162    	; 0x8b84 <atodigit>
    8c26:	fc 01       	movw	r30, r24
    8c28:	97 ff       	sbrs	r25, 7
    8c2a:	0c c0       	rjmp	.+24     	; 0x8c44 <strtol+0x84>
    8c2c:	61 14       	cp	r6, r1
    8c2e:	71 04       	cpc	r7, r1
    8c30:	c1 f0       	breq	.+48     	; 0x8c62 <strtol+0xa2>
    8c32:	f0 94       	com	r15
    8c34:	e0 94       	com	r14
    8c36:	d0 94       	com	r13
    8c38:	c0 94       	com	r12
    8c3a:	c1 1c       	adc	r12, r1
    8c3c:	d1 1c       	adc	r13, r1
    8c3e:	e1 1c       	adc	r14, r1
    8c40:	f1 1c       	adc	r15, r1
    8c42:	0f c0       	rjmp	.+30     	; 0x8c62 <strtol+0xa2>
    8c44:	a5 01       	movw	r20, r10
    8c46:	94 01       	movw	r18, r8
    8c48:	c7 01       	movw	r24, r14
    8c4a:	b6 01       	movw	r22, r12
    8c4c:	0e 94 2f df 	call	0x1be5e	; 0x1be5e <__mulsi3>
    8c50:	6f 01       	movw	r12, r30
    8c52:	ff 0f       	add	r31, r31
    8c54:	ee 08       	sbc	r14, r14
    8c56:	ff 08       	sbc	r15, r15
    8c58:	c6 0e       	add	r12, r22
    8c5a:	d7 1e       	adc	r13, r23
    8c5c:	e8 1e       	adc	r14, r24
    8c5e:	f9 1e       	adc	r15, r25
    8c60:	da cf       	rjmp	.-76     	; 0x8c16 <strtol+0x56>
    8c62:	41 14       	cp	r4, r1
    8c64:	51 04       	cpc	r5, r1
    8c66:	19 f0       	breq	.+6      	; 0x8c6e <strtol+0xae>
    8c68:	f2 01       	movw	r30, r4
    8c6a:	30 82       	st	Z, r3
    8c6c:	21 82       	std	Z+1, r2	; 0x01
    8c6e:	c7 01       	movw	r24, r14
    8c70:	b6 01       	movw	r22, r12
    8c72:	cd b7       	in	r28, 0x3d	; 61
    8c74:	de b7       	in	r29, 0x3e	; 62
    8c76:	e2 e1       	ldi	r30, 0x12	; 18
    8c78:	0c 94 fa df 	jmp	0x1bff4	; 0x1bff4 <__epilogue_restores__>

00008c7c <atoi>:
MEMSPACE 
int
atoi(const char *str)
{
    unsigned long num;
    num = strtol(str, NULL, 10);
    8c7c:	4a e0       	ldi	r20, 0x0A	; 10
    8c7e:	50 e0       	ldi	r21, 0x00	; 0
    8c80:	60 e0       	ldi	r22, 0x00	; 0
    8c82:	70 e0       	ldi	r23, 0x00	; 0
    8c84:	9d df       	rcall	.-198    	; 0x8bc0 <strtol>
    return((int)num);
}
    8c86:	cb 01       	movw	r24, r22
    8c88:	08 95       	ret

00008c8a <atol>:
MEMSPACE 
long
atol(const char *str)
{
    unsigned long num;
    num = strtol(str, NULL, 10);
    8c8a:	4a e0       	ldi	r20, 0x0A	; 10
    8c8c:	50 e0       	ldi	r21, 0x00	; 0
    8c8e:	60 e0       	ldi	r22, 0x00	; 0
    8c90:	70 e0       	ldi	r23, 0x00	; 0
    8c92:	96 cf       	rjmp	.-212    	; 0x8bc0 <strtol>
    return(num);
}
    8c94:	08 95       	ret

00008c96 <ld_dword>:
#endif
		if (res != FR_OK) ABORT(fs, res);
	}

	LEAVE_FF(fs, res);
}
    8c96:	fc 01       	movw	r30, r24
    8c98:	62 81       	ldd	r22, Z+2	; 0x02
    8c9a:	73 81       	ldd	r23, Z+3	; 0x03
    8c9c:	cb 01       	movw	r24, r22
    8c9e:	a0 e0       	ldi	r26, 0x00	; 0
    8ca0:	b0 e0       	ldi	r27, 0x00	; 0
    8ca2:	ba 2f       	mov	r27, r26
    8ca4:	a9 2f       	mov	r26, r25
    8ca6:	98 2f       	mov	r25, r24
    8ca8:	88 27       	eor	r24, r24
    8caa:	21 81       	ldd	r18, Z+1	; 0x01
    8cac:	82 2b       	or	r24, r18
    8cae:	ba 2f       	mov	r27, r26
    8cb0:	a9 2f       	mov	r26, r25
    8cb2:	98 2f       	mov	r25, r24
    8cb4:	88 27       	eor	r24, r24
    8cb6:	20 81       	ld	r18, Z
    8cb8:	bc 01       	movw	r22, r24
    8cba:	cd 01       	movw	r24, r26
    8cbc:	62 2b       	or	r22, r18
    8cbe:	08 95       	ret

00008cc0 <st_dword>:
    8cc0:	fc 01       	movw	r30, r24
    8cc2:	40 83       	st	Z, r20
    8cc4:	51 83       	std	Z+1, r21	; 0x01
    8cc6:	62 83       	std	Z+2, r22	; 0x02
    8cc8:	73 83       	std	Z+3, r23	; 0x03
    8cca:	08 95       	ret

00008ccc <mem_set>:
    8ccc:	48 0f       	add	r20, r24
    8cce:	59 1f       	adc	r21, r25
    8cd0:	fc 01       	movw	r30, r24
    8cd2:	61 93       	st	Z+, r22
    8cd4:	cf 01       	movw	r24, r30
    8cd6:	e4 17       	cp	r30, r20
    8cd8:	f5 07       	cpc	r31, r21
    8cda:	d1 f7       	brne	.-12     	; 0x8cd0 <mem_set+0x4>
    8cdc:	08 95       	ret

00008cde <mem_cmp>:
    8cde:	dc 01       	movw	r26, r24
    8ce0:	fb 01       	movw	r30, r22
    8ce2:	2d 91       	ld	r18, X+
    8ce4:	81 91       	ld	r24, Z+
    8ce6:	30 e0       	ldi	r19, 0x00	; 0
    8ce8:	b9 01       	movw	r22, r18
    8cea:	68 1b       	sub	r22, r24
    8cec:	71 09       	sbc	r23, r1
    8cee:	cb 01       	movw	r24, r22
    8cf0:	41 50       	subi	r20, 0x01	; 1
    8cf2:	51 09       	sbc	r21, r1
    8cf4:	11 f0       	breq	.+4      	; 0x8cfa <mem_cmp+0x1c>
    8cf6:	00 97       	sbiw	r24, 0x00	; 0
    8cf8:	a1 f3       	breq	.-24     	; 0x8ce2 <mem_cmp+0x4>
    8cfa:	08 95       	ret

00008cfc <tchar2uni>:
    8cfc:	0f 93       	push	r16
    8cfe:	1f 93       	push	r17
    8d00:	fc 01       	movw	r30, r24
    8d02:	a0 81       	ld	r26, Z
    8d04:	b1 81       	ldd	r27, Z+1	; 0x01
    8d06:	fd 01       	movw	r30, r26
    8d08:	31 96       	adiw	r30, 0x01	; 1
    8d0a:	4c 91       	ld	r20, X
    8d0c:	47 fd       	sbrc	r20, 7
    8d0e:	04 c0       	rjmp	.+8      	; 0x8d18 <tchar2uni+0x1c>
    8d10:	50 e0       	ldi	r21, 0x00	; 0
    8d12:	60 e0       	ldi	r22, 0x00	; 0
    8d14:	70 e0       	ldi	r23, 0x00	; 0
    8d16:	68 c0       	rjmp	.+208    	; 0x8de8 <tchar2uni+0xec>
    8d18:	24 2f       	mov	r18, r20
    8d1a:	20 7e       	andi	r18, 0xE0	; 224
    8d1c:	20 3c       	cpi	r18, 0xC0	; 192
    8d1e:	39 f4       	brne	.+14     	; 0x8d2e <tchar2uni+0x32>
    8d20:	4f 71       	andi	r20, 0x1F	; 31
    8d22:	50 e0       	ldi	r21, 0x00	; 0
    8d24:	60 e0       	ldi	r22, 0x00	; 0
    8d26:	70 e0       	ldi	r23, 0x00	; 0
    8d28:	21 e0       	ldi	r18, 0x01	; 1
    8d2a:	30 e0       	ldi	r19, 0x00	; 0
    8d2c:	16 c0       	rjmp	.+44     	; 0x8d5a <tchar2uni+0x5e>
    8d2e:	24 2f       	mov	r18, r20
    8d30:	20 7f       	andi	r18, 0xF0	; 240
    8d32:	20 3e       	cpi	r18, 0xE0	; 224
    8d34:	39 f4       	brne	.+14     	; 0x8d44 <tchar2uni+0x48>
    8d36:	4f 70       	andi	r20, 0x0F	; 15
    8d38:	50 e0       	ldi	r21, 0x00	; 0
    8d3a:	60 e0       	ldi	r22, 0x00	; 0
    8d3c:	70 e0       	ldi	r23, 0x00	; 0
    8d3e:	22 e0       	ldi	r18, 0x02	; 2
    8d40:	30 e0       	ldi	r19, 0x00	; 0
    8d42:	0b c0       	rjmp	.+22     	; 0x8d5a <tchar2uni+0x5e>
    8d44:	24 2f       	mov	r18, r20
    8d46:	28 7f       	andi	r18, 0xF8	; 248
    8d48:	20 3f       	cpi	r18, 0xF0	; 240
    8d4a:	09 f0       	breq	.+2      	; 0x8d4e <tchar2uni+0x52>
    8d4c:	54 c0       	rjmp	.+168    	; 0x8df6 <tchar2uni+0xfa>
    8d4e:	47 70       	andi	r20, 0x07	; 7
    8d50:	50 e0       	ldi	r21, 0x00	; 0
    8d52:	60 e0       	ldi	r22, 0x00	; 0
    8d54:	70 e0       	ldi	r23, 0x00	; 0
    8d56:	23 e0       	ldi	r18, 0x03	; 3
    8d58:	30 e0       	ldi	r19, 0x00	; 0
    8d5a:	31 96       	adiw	r30, 0x01	; 1
    8d5c:	df 01       	movw	r26, r30
    8d5e:	11 97       	sbiw	r26, 0x01	; 1
    8d60:	ac 91       	ld	r26, X
    8d62:	ba 2f       	mov	r27, r26
    8d64:	b0 7c       	andi	r27, 0xC0	; 192
    8d66:	b0 38       	cpi	r27, 0x80	; 128
    8d68:	09 f0       	breq	.+2      	; 0x8d6c <tchar2uni+0x70>
    8d6a:	45 c0       	rjmp	.+138    	; 0x8df6 <tchar2uni+0xfa>
    8d6c:	b6 e0       	ldi	r27, 0x06	; 6
    8d6e:	44 0f       	add	r20, r20
    8d70:	55 1f       	adc	r21, r21
    8d72:	66 1f       	adc	r22, r22
    8d74:	77 1f       	adc	r23, r23
    8d76:	ba 95       	dec	r27
    8d78:	d1 f7       	brne	.-12     	; 0x8d6e <tchar2uni+0x72>
    8d7a:	af 73       	andi	r26, 0x3F	; 63
    8d7c:	4a 2b       	or	r20, r26
    8d7e:	21 50       	subi	r18, 0x01	; 1
    8d80:	31 09       	sbc	r19, r1
    8d82:	59 f7       	brne	.-42     	; 0x8d5a <tchar2uni+0x5e>
    8d84:	8a 01       	movw	r16, r20
    8d86:	9b 01       	movw	r18, r22
    8d88:	00 58       	subi	r16, 0x80	; 128
    8d8a:	11 09       	sbc	r17, r1
    8d8c:	21 09       	sbc	r18, r1
    8d8e:	31 09       	sbc	r19, r1
    8d90:	00 38       	cpi	r16, 0x80	; 128
    8d92:	1f 4f       	sbci	r17, 0xFF	; 255
    8d94:	20 41       	sbci	r18, 0x10	; 16
    8d96:	31 05       	cpc	r19, r1
    8d98:	70 f5       	brcc	.+92     	; 0x8df6 <tchar2uni+0xfa>
    8d9a:	8a 01       	movw	r16, r20
    8d9c:	9b 01       	movw	r18, r22
    8d9e:	18 5d       	subi	r17, 0xD8	; 216
    8da0:	21 09       	sbc	r18, r1
    8da2:	31 09       	sbc	r19, r1
    8da4:	01 15       	cp	r16, r1
    8da6:	18 40       	sbci	r17, 0x08	; 8
    8da8:	21 05       	cpc	r18, r1
    8daa:	31 05       	cpc	r19, r1
    8dac:	20 f1       	brcs	.+72     	; 0x8df6 <tchar2uni+0xfa>
    8dae:	41 15       	cp	r20, r1
    8db0:	51 05       	cpc	r21, r1
    8db2:	21 e0       	ldi	r18, 0x01	; 1
    8db4:	62 07       	cpc	r22, r18
    8db6:	71 05       	cpc	r23, r1
    8db8:	b8 f0       	brcs	.+46     	; 0x8de8 <tchar2uni+0xec>
    8dba:	8a 01       	movw	r16, r20
    8dbc:	9b 01       	movw	r18, r22
    8dbe:	21 50       	subi	r18, 0x01	; 1
    8dc0:	31 09       	sbc	r19, r1
    8dc2:	a6 e0       	ldi	r26, 0x06	; 6
    8dc4:	00 0f       	add	r16, r16
    8dc6:	11 1f       	adc	r17, r17
    8dc8:	22 1f       	adc	r18, r18
    8dca:	33 1f       	adc	r19, r19
    8dcc:	aa 95       	dec	r26
    8dce:	d1 f7       	brne	.-12     	; 0x8dc4 <tchar2uni+0xc8>
    8dd0:	00 27       	eor	r16, r16
    8dd2:	11 27       	eor	r17, r17
    8dd4:	33 70       	andi	r19, 0x03	; 3
    8dd6:	53 70       	andi	r21, 0x03	; 3
    8dd8:	66 27       	eor	r22, r22
    8dda:	77 27       	eor	r23, r23
    8ddc:	5c 6d       	ori	r21, 0xDC	; 220
    8dde:	78 6d       	ori	r23, 0xD8	; 216
    8de0:	40 2b       	or	r20, r16
    8de2:	51 2b       	or	r21, r17
    8de4:	62 2b       	or	r22, r18
    8de6:	73 2b       	or	r23, r19
    8de8:	dc 01       	movw	r26, r24
    8dea:	ed 93       	st	X+, r30
    8dec:	fc 93       	st	X, r31
    8dee:	34 2f       	mov	r19, r20
    8df0:	25 2f       	mov	r18, r21
    8df2:	cb 01       	movw	r24, r22
    8df4:	04 c0       	rjmp	.+8      	; 0x8dfe <tchar2uni+0x102>
    8df6:	3f ef       	ldi	r19, 0xFF	; 255
    8df8:	2f ef       	ldi	r18, 0xFF	; 255
    8dfa:	8f ef       	ldi	r24, 0xFF	; 255
    8dfc:	9f ef       	ldi	r25, 0xFF	; 255
    8dfe:	63 2f       	mov	r22, r19
    8e00:	72 2f       	mov	r23, r18
    8e02:	1f 91       	pop	r17
    8e04:	0f 91       	pop	r16
    8e06:	08 95       	ret

00008e08 <clst2sect>:
    8e08:	0f 93       	push	r16
    8e0a:	1f 93       	push	r17
    8e0c:	fc 01       	movw	r30, r24
    8e0e:	9a 01       	movw	r18, r20
    8e10:	ab 01       	movw	r20, r22
    8e12:	22 50       	subi	r18, 0x02	; 2
    8e14:	31 09       	sbc	r19, r1
    8e16:	41 09       	sbc	r20, r1
    8e18:	51 09       	sbc	r21, r1
    8e1a:	81 8d       	ldd	r24, Z+25	; 0x19
    8e1c:	92 8d       	ldd	r25, Z+26	; 0x1a
    8e1e:	a3 8d       	ldd	r26, Z+27	; 0x1b
    8e20:	b4 8d       	ldd	r27, Z+28	; 0x1c
    8e22:	02 97       	sbiw	r24, 0x02	; 2
    8e24:	a1 09       	sbc	r26, r1
    8e26:	b1 09       	sbc	r27, r1
    8e28:	28 17       	cp	r18, r24
    8e2a:	39 07       	cpc	r19, r25
    8e2c:	4a 07       	cpc	r20, r26
    8e2e:	5b 07       	cpc	r21, r27
    8e30:	68 f4       	brcc	.+26     	; 0x8e4c <clst2sect+0x44>
    8e32:	a1 85       	ldd	r26, Z+9	; 0x09
    8e34:	b2 85       	ldd	r27, Z+10	; 0x0a
    8e36:	0e 94 be df 	call	0x1bf7c	; 0x1bf7c <__muluhisi3>
    8e3a:	05 a5       	ldd	r16, Z+45	; 0x2d
    8e3c:	16 a5       	ldd	r17, Z+46	; 0x2e
    8e3e:	27 a5       	ldd	r18, Z+47	; 0x2f
    8e40:	30 a9       	ldd	r19, Z+48	; 0x30
    8e42:	60 0f       	add	r22, r16
    8e44:	71 1f       	adc	r23, r17
    8e46:	82 1f       	adc	r24, r18
    8e48:	93 1f       	adc	r25, r19
    8e4a:	03 c0       	rjmp	.+6      	; 0x8e52 <clst2sect+0x4a>
    8e4c:	60 e0       	ldi	r22, 0x00	; 0
    8e4e:	70 e0       	ldi	r23, 0x00	; 0
    8e50:	cb 01       	movw	r24, r22
    8e52:	1f 91       	pop	r17
    8e54:	0f 91       	pop	r16
    8e56:	08 95       	ret

00008e58 <clmt_clust>:
    8e58:	cf 93       	push	r28
    8e5a:	df 93       	push	r29
    8e5c:	fc 01       	movw	r30, r24
    8e5e:	c2 a1       	ldd	r28, Z+34	; 0x22
    8e60:	d3 a1       	ldd	r29, Z+35	; 0x23
    8e62:	24 96       	adiw	r28, 0x04	; 4
    8e64:	cb 01       	movw	r24, r22
    8e66:	ba 01       	movw	r22, r20
    8e68:	29 e0       	ldi	r18, 0x09	; 9
    8e6a:	96 95       	lsr	r25
    8e6c:	87 95       	ror	r24
    8e6e:	77 95       	ror	r23
    8e70:	67 95       	ror	r22
    8e72:	2a 95       	dec	r18
    8e74:	d1 f7       	brne	.-12     	; 0x8e6a <clmt_clust+0x12>
    8e76:	01 90       	ld	r0, Z+
    8e78:	f0 81       	ld	r31, Z
    8e7a:	e0 2d       	mov	r30, r0
    8e7c:	21 85       	ldd	r18, Z+9	; 0x09
    8e7e:	32 85       	ldd	r19, Z+10	; 0x0a
    8e80:	40 e0       	ldi	r20, 0x00	; 0
    8e82:	50 e0       	ldi	r21, 0x00	; 0
    8e84:	0e 94 71 df 	call	0x1bee2	; 0x1bee2 <__udivmodsi4>
    8e88:	88 81       	ld	r24, Y
    8e8a:	99 81       	ldd	r25, Y+1	; 0x01
    8e8c:	aa 81       	ldd	r26, Y+2	; 0x02
    8e8e:	bb 81       	ldd	r27, Y+3	; 0x03
    8e90:	00 97       	sbiw	r24, 0x00	; 0
    8e92:	a1 05       	cpc	r26, r1
    8e94:	b1 05       	cpc	r27, r1
    8e96:	b1 f0       	breq	.+44     	; 0x8ec4 <clmt_clust+0x6c>
    8e98:	28 17       	cp	r18, r24
    8e9a:	39 07       	cpc	r19, r25
    8e9c:	4a 07       	cpc	r20, r26
    8e9e:	5b 07       	cpc	r21, r27
    8ea0:	30 f0       	brcs	.+12     	; 0x8eae <clmt_clust+0x56>
    8ea2:	28 1b       	sub	r18, r24
    8ea4:	39 0b       	sbc	r19, r25
    8ea6:	4a 0b       	sbc	r20, r26
    8ea8:	5b 0b       	sbc	r21, r27
    8eaa:	28 96       	adiw	r28, 0x08	; 8
    8eac:	ed cf       	rjmp	.-38     	; 0x8e88 <clmt_clust+0x30>
    8eae:	8c 81       	ldd	r24, Y+4	; 0x04
    8eb0:	9d 81       	ldd	r25, Y+5	; 0x05
    8eb2:	ae 81       	ldd	r26, Y+6	; 0x06
    8eb4:	bf 81       	ldd	r27, Y+7	; 0x07
    8eb6:	bc 01       	movw	r22, r24
    8eb8:	cd 01       	movw	r24, r26
    8eba:	62 0f       	add	r22, r18
    8ebc:	73 1f       	adc	r23, r19
    8ebe:	84 1f       	adc	r24, r20
    8ec0:	95 1f       	adc	r25, r21
    8ec2:	03 c0       	rjmp	.+6      	; 0x8eca <clmt_clust+0x72>
    8ec4:	60 e0       	ldi	r22, 0x00	; 0
    8ec6:	70 e0       	ldi	r23, 0x00	; 0
    8ec8:	cb 01       	movw	r24, r22
    8eca:	df 91       	pop	r29
    8ecc:	cf 91       	pop	r28
    8ece:	08 95       	ret

00008ed0 <sum_sfn>:
    8ed0:	fc 01       	movw	r30, r24
    8ed2:	9c 01       	movw	r18, r24
    8ed4:	25 5f       	subi	r18, 0xF5	; 245
    8ed6:	3f 4f       	sbci	r19, 0xFF	; 255
    8ed8:	80 e0       	ldi	r24, 0x00	; 0
    8eda:	98 2f       	mov	r25, r24
    8edc:	90 fb       	bst	r25, 0
    8ede:	97 95       	ror	r25
    8ee0:	97 f9       	bld	r25, 7
    8ee2:	81 91       	ld	r24, Z+
    8ee4:	89 0f       	add	r24, r25
    8ee6:	e2 17       	cp	r30, r18
    8ee8:	f3 07       	cpc	r31, r19
    8eea:	b9 f7       	brne	.-18     	; 0x8eda <sum_sfn+0xa>
    8eec:	08 95       	ret

00008eee <get_ldnumber>:
    8eee:	cf 93       	push	r28
    8ef0:	df 93       	push	r29
    8ef2:	dc 01       	movw	r26, r24
    8ef4:	ed 91       	ld	r30, X+
    8ef6:	fc 91       	ld	r31, X
    8ef8:	11 97       	sbiw	r26, 0x01	; 1
    8efa:	30 97       	sbiw	r30, 0x00	; 0
    8efc:	f9 f0       	breq	.+62     	; 0x8f3c <get_ldnumber+0x4e>
    8efe:	9f 01       	movw	r18, r30
    8f00:	2f 5f       	subi	r18, 0xFF	; 255
    8f02:	3f 4f       	sbci	r19, 0xFF	; 255
    8f04:	e9 01       	movw	r28, r18
    8f06:	21 97       	sbiw	r28, 0x01	; 1
    8f08:	88 81       	ld	r24, Y
    8f0a:	80 32       	cpi	r24, 0x20	; 32
    8f0c:	18 f0       	brcs	.+6      	; 0x8f14 <get_ldnumber+0x26>
    8f0e:	8a 33       	cpi	r24, 0x3A	; 58
    8f10:	b9 f7       	brne	.-18     	; 0x8f00 <get_ldnumber+0x12>
    8f12:	04 c0       	rjmp	.+8      	; 0x8f1c <get_ldnumber+0x2e>
    8f14:	80 91 ea 17 	lds	r24, 0x17EA	; 0x8017ea <CurrVol>
    8f18:	90 e0       	ldi	r25, 0x00	; 0
    8f1a:	12 c0       	rjmp	.+36     	; 0x8f40 <get_ldnumber+0x52>
    8f1c:	90 81       	ld	r25, Z
    8f1e:	80 ed       	ldi	r24, 0xD0	; 208
    8f20:	89 0f       	add	r24, r25
    8f22:	8a 30       	cpi	r24, 0x0A	; 10
    8f24:	58 f4       	brcc	.+22     	; 0x8f3c <get_ldnumber+0x4e>
    8f26:	32 96       	adiw	r30, 0x02	; 2
    8f28:	2e 17       	cp	r18, r30
    8f2a:	3f 07       	cpc	r19, r31
    8f2c:	39 f4       	brne	.+14     	; 0x8f3c <get_ldnumber+0x4e>
    8f2e:	90 33       	cpi	r25, 0x30	; 48
    8f30:	29 f4       	brne	.+10     	; 0x8f3c <get_ldnumber+0x4e>
    8f32:	2d 93       	st	X+, r18
    8f34:	3c 93       	st	X, r19
    8f36:	80 e0       	ldi	r24, 0x00	; 0
    8f38:	90 e0       	ldi	r25, 0x00	; 0
    8f3a:	02 c0       	rjmp	.+4      	; 0x8f40 <get_ldnumber+0x52>
    8f3c:	8f ef       	ldi	r24, 0xFF	; 255
    8f3e:	9f ef       	ldi	r25, 0xFF	; 255
    8f40:	df 91       	pop	r29
    8f42:	cf 91       	pop	r28
    8f44:	08 95       	ret

00008f46 <validate>:
    8f46:	0f 93       	push	r16
    8f48:	1f 93       	push	r17
    8f4a:	cf 93       	push	r28
    8f4c:	df 93       	push	r29
    8f4e:	ec 01       	movw	r28, r24
    8f50:	8b 01       	movw	r16, r22
    8f52:	89 2b       	or	r24, r25
    8f54:	f9 f0       	breq	.+62     	; 0x8f94 <validate+0x4e>
    8f56:	e8 81       	ld	r30, Y
    8f58:	f9 81       	ldd	r31, Y+1	; 0x01
    8f5a:	30 97       	sbiw	r30, 0x00	; 0
    8f5c:	d9 f0       	breq	.+54     	; 0x8f94 <validate+0x4e>
    8f5e:	80 81       	ld	r24, Z
    8f60:	88 23       	and	r24, r24
    8f62:	c1 f0       	breq	.+48     	; 0x8f94 <validate+0x4e>
    8f64:	2a 81       	ldd	r18, Y+2	; 0x02
    8f66:	3b 81       	ldd	r19, Y+3	; 0x03
    8f68:	85 81       	ldd	r24, Z+5	; 0x05
    8f6a:	96 81       	ldd	r25, Z+6	; 0x06
    8f6c:	28 17       	cp	r18, r24
    8f6e:	39 07       	cpc	r19, r25
    8f70:	89 f4       	brne	.+34     	; 0x8f94 <validate+0x4e>
    8f72:	81 81       	ldd	r24, Z+1	; 0x01
    8f74:	0e 94 63 69 	call	0xd2c6	; 0xd2c6 <disk_status>
    8f78:	80 fd       	sbrc	r24, 0
    8f7a:	0c c0       	rjmp	.+24     	; 0x8f94 <validate+0x4e>
    8f7c:	28 81       	ld	r18, Y
    8f7e:	39 81       	ldd	r19, Y+1	; 0x01
    8f80:	80 e0       	ldi	r24, 0x00	; 0
    8f82:	90 e0       	ldi	r25, 0x00	; 0
    8f84:	f8 01       	movw	r30, r16
    8f86:	31 83       	std	Z+1, r19	; 0x01
    8f88:	20 83       	st	Z, r18
    8f8a:	df 91       	pop	r29
    8f8c:	cf 91       	pop	r28
    8f8e:	1f 91       	pop	r17
    8f90:	0f 91       	pop	r16
    8f92:	08 95       	ret
    8f94:	89 e0       	ldi	r24, 0x09	; 9
    8f96:	90 e0       	ldi	r25, 0x00	; 0
    8f98:	20 e0       	ldi	r18, 0x00	; 0
    8f9a:	30 e0       	ldi	r19, 0x00	; 0
    8f9c:	f3 cf       	rjmp	.-26     	; 0x8f84 <validate+0x3e>

00008f9e <mem_cpy.part.0>:
    8f9e:	fb 01       	movw	r30, r22
    8fa0:	48 0f       	add	r20, r24
    8fa2:	59 1f       	adc	r21, r25
    8fa4:	21 91       	ld	r18, Z+
    8fa6:	dc 01       	movw	r26, r24
    8fa8:	2d 93       	st	X+, r18
    8faa:	cd 01       	movw	r24, r26
    8fac:	a4 17       	cp	r26, r20
    8fae:	b5 07       	cpc	r27, r21
    8fb0:	c9 f7       	brne	.-14     	; 0x8fa4 <mem_cpy.part.0+0x6>
    8fb2:	08 95       	ret

00008fb4 <put_utf>:
    8fb4:	0f 93       	push	r16
    8fb6:	1f 93       	push	r17
    8fb8:	fa 01       	movw	r30, r20
    8fba:	60 38       	cpi	r22, 0x80	; 128
    8fbc:	71 05       	cpc	r23, r1
    8fbe:	81 05       	cpc	r24, r1
    8fc0:	91 05       	cpc	r25, r1
    8fc2:	30 f4       	brcc	.+12     	; 0x8fd0 <put_utf+0x1c>
    8fc4:	23 2b       	or	r18, r19
    8fc6:	09 f4       	brne	.+2      	; 0x8fca <put_utf+0x16>
    8fc8:	9e c0       	rjmp	.+316    	; 0x9106 <put_utf+0x152>
    8fca:	60 83       	st	Z, r22
    8fcc:	81 e0       	ldi	r24, 0x01	; 1
    8fce:	9c c0       	rjmp	.+312    	; 0x9108 <put_utf+0x154>
    8fd0:	61 15       	cp	r22, r1
    8fd2:	48 e0       	ldi	r20, 0x08	; 8
    8fd4:	74 07       	cpc	r23, r20
    8fd6:	81 05       	cpc	r24, r1
    8fd8:	91 05       	cpc	r25, r1
    8fda:	a0 f4       	brcc	.+40     	; 0x9004 <put_utf+0x50>
    8fdc:	22 30       	cpi	r18, 0x02	; 2
    8fde:	31 05       	cpc	r19, r1
    8fe0:	08 f4       	brcc	.+2      	; 0x8fe4 <put_utf+0x30>
    8fe2:	91 c0       	rjmp	.+290    	; 0x9106 <put_utf+0x152>
    8fe4:	8b 01       	movw	r16, r22
    8fe6:	9c 01       	movw	r18, r24
    8fe8:	76 e0       	ldi	r23, 0x06	; 6
    8fea:	36 95       	lsr	r19
    8fec:	27 95       	ror	r18
    8fee:	17 95       	ror	r17
    8ff0:	07 95       	ror	r16
    8ff2:	7a 95       	dec	r23
    8ff4:	d1 f7       	brne	.-12     	; 0x8fea <put_utf+0x36>
    8ff6:	00 6c       	ori	r16, 0xC0	; 192
    8ff8:	00 83       	st	Z, r16
    8ffa:	6f 73       	andi	r22, 0x3F	; 63
    8ffc:	60 68       	ori	r22, 0x80	; 128
    8ffe:	61 83       	std	Z+1, r22	; 0x01
    9000:	82 e0       	ldi	r24, 0x02	; 2
    9002:	82 c0       	rjmp	.+260    	; 0x9108 <put_utf+0x154>
    9004:	61 15       	cp	r22, r1
    9006:	71 05       	cpc	r23, r1
    9008:	41 e0       	ldi	r20, 0x01	; 1
    900a:	84 07       	cpc	r24, r20
    900c:	91 05       	cpc	r25, r1
    900e:	58 f5       	brcc	.+86     	; 0x9066 <put_utf+0xb2>
    9010:	23 30       	cpi	r18, 0x03	; 3
    9012:	31 05       	cpc	r19, r1
    9014:	08 f4       	brcc	.+2      	; 0x9018 <put_utf+0x64>
    9016:	77 c0       	rjmp	.+238    	; 0x9106 <put_utf+0x152>
    9018:	8b 01       	movw	r16, r22
    901a:	9c 01       	movw	r18, r24
    901c:	18 5d       	subi	r17, 0xD8	; 216
    901e:	21 09       	sbc	r18, r1
    9020:	31 09       	sbc	r19, r1
    9022:	01 15       	cp	r16, r1
    9024:	18 40       	sbci	r17, 0x08	; 8
    9026:	21 05       	cpc	r18, r1
    9028:	31 05       	cpc	r19, r1
    902a:	08 f4       	brcc	.+2      	; 0x902e <put_utf+0x7a>
    902c:	6c c0       	rjmp	.+216    	; 0x9106 <put_utf+0x152>
    902e:	8b 01       	movw	r16, r22
    9030:	9c 01       	movw	r18, r24
    9032:	4c e0       	ldi	r20, 0x0C	; 12
    9034:	36 95       	lsr	r19
    9036:	27 95       	ror	r18
    9038:	17 95       	ror	r17
    903a:	07 95       	ror	r16
    903c:	4a 95       	dec	r20
    903e:	d1 f7       	brne	.-12     	; 0x9034 <put_utf+0x80>
    9040:	00 6e       	ori	r16, 0xE0	; 224
    9042:	00 83       	st	Z, r16
    9044:	8b 01       	movw	r16, r22
    9046:	9c 01       	movw	r18, r24
    9048:	56 e0       	ldi	r21, 0x06	; 6
    904a:	36 95       	lsr	r19
    904c:	27 95       	ror	r18
    904e:	17 95       	ror	r17
    9050:	07 95       	ror	r16
    9052:	5a 95       	dec	r21
    9054:	d1 f7       	brne	.-12     	; 0x904a <put_utf+0x96>
    9056:	0f 73       	andi	r16, 0x3F	; 63
    9058:	00 68       	ori	r16, 0x80	; 128
    905a:	01 83       	std	Z+1, r16	; 0x01
    905c:	6f 73       	andi	r22, 0x3F	; 63
    905e:	60 68       	ori	r22, 0x80	; 128
    9060:	62 83       	std	Z+2, r22	; 0x02
    9062:	83 e0       	ldi	r24, 0x03	; 3
    9064:	51 c0       	rjmp	.+162    	; 0x9108 <put_utf+0x154>
    9066:	24 30       	cpi	r18, 0x04	; 4
    9068:	31 05       	cpc	r19, r1
    906a:	08 f4       	brcc	.+2      	; 0x906e <put_utf+0xba>
    906c:	4c c0       	rjmp	.+152    	; 0x9106 <put_utf+0x152>
    906e:	8b 01       	movw	r16, r22
    9070:	9c 01       	movw	r18, r24
    9072:	00 27       	eor	r16, r16
    9074:	11 27       	eor	r17, r17
    9076:	38 5d       	subi	r19, 0xD8	; 216
    9078:	b6 e0       	ldi	r27, 0x06	; 6
    907a:	36 95       	lsr	r19
    907c:	27 95       	ror	r18
    907e:	17 95       	ror	r17
    9080:	07 95       	ror	r16
    9082:	ba 95       	dec	r27
    9084:	d1 f7       	brne	.-12     	; 0x907a <put_utf+0xc6>
    9086:	01 15       	cp	r16, r1
    9088:	11 05       	cpc	r17, r1
    908a:	40 e1       	ldi	r20, 0x10	; 16
    908c:	24 07       	cpc	r18, r20
    908e:	31 05       	cpc	r19, r1
    9090:	d0 f5       	brcc	.+116    	; 0x9106 <put_utf+0x152>
    9092:	dc 01       	movw	r26, r24
    9094:	cb 01       	movw	r24, r22
    9096:	aa 27       	eor	r26, r26
    9098:	bb 27       	eor	r27, r27
    909a:	9c 5d       	subi	r25, 0xDC	; 220
    909c:	a1 09       	sbc	r26, r1
    909e:	b1 09       	sbc	r27, r1
    90a0:	81 15       	cp	r24, r1
    90a2:	44 e0       	ldi	r20, 0x04	; 4
    90a4:	94 07       	cpc	r25, r20
    90a6:	a1 05       	cpc	r26, r1
    90a8:	b1 05       	cpc	r27, r1
    90aa:	68 f5       	brcc	.+90     	; 0x9106 <put_utf+0x152>
    90ac:	80 2b       	or	r24, r16
    90ae:	91 2b       	or	r25, r17
    90b0:	a2 2b       	or	r26, r18
    90b2:	b3 2b       	or	r27, r19
    90b4:	11 96       	adiw	r26, 0x01	; 1
    90b6:	ac 01       	movw	r20, r24
    90b8:	bd 01       	movw	r22, r26
    90ba:	22 e1       	ldi	r18, 0x12	; 18
    90bc:	76 95       	lsr	r23
    90be:	67 95       	ror	r22
    90c0:	57 95       	ror	r21
    90c2:	47 95       	ror	r20
    90c4:	2a 95       	dec	r18
    90c6:	d1 f7       	brne	.-12     	; 0x90bc <put_utf+0x108>
    90c8:	40 6f       	ori	r20, 0xF0	; 240
    90ca:	40 83       	st	Z, r20
    90cc:	ac 01       	movw	r20, r24
    90ce:	bd 01       	movw	r22, r26
    90d0:	3c e0       	ldi	r19, 0x0C	; 12
    90d2:	76 95       	lsr	r23
    90d4:	67 95       	ror	r22
    90d6:	57 95       	ror	r21
    90d8:	47 95       	ror	r20
    90da:	3a 95       	dec	r19
    90dc:	d1 f7       	brne	.-12     	; 0x90d2 <put_utf+0x11e>
    90de:	4f 73       	andi	r20, 0x3F	; 63
    90e0:	40 68       	ori	r20, 0x80	; 128
    90e2:	41 83       	std	Z+1, r20	; 0x01
    90e4:	ac 01       	movw	r20, r24
    90e6:	bd 01       	movw	r22, r26
    90e8:	a6 e0       	ldi	r26, 0x06	; 6
    90ea:	76 95       	lsr	r23
    90ec:	67 95       	ror	r22
    90ee:	57 95       	ror	r21
    90f0:	47 95       	ror	r20
    90f2:	aa 95       	dec	r26
    90f4:	d1 f7       	brne	.-12     	; 0x90ea <put_utf+0x136>
    90f6:	4f 73       	andi	r20, 0x3F	; 63
    90f8:	40 68       	ori	r20, 0x80	; 128
    90fa:	42 83       	std	Z+2, r20	; 0x02
    90fc:	8f 73       	andi	r24, 0x3F	; 63
    90fe:	80 68       	ori	r24, 0x80	; 128
    9100:	83 83       	std	Z+3, r24	; 0x03
    9102:	84 e0       	ldi	r24, 0x04	; 4
    9104:	01 c0       	rjmp	.+2      	; 0x9108 <put_utf+0x154>
    9106:	80 e0       	ldi	r24, 0x00	; 0
    9108:	1f 91       	pop	r17
    910a:	0f 91       	pop	r16
    910c:	08 95       	ret

0000910e <get_fileinfo>:
    910e:	a0 e0       	ldi	r26, 0x00	; 0
    9110:	b0 e0       	ldi	r27, 0x00	; 0
    9112:	ed e8       	ldi	r30, 0x8D	; 141
    9114:	f8 e4       	ldi	r31, 0x48	; 72
    9116:	0c 94 de df 	jmp	0x1bfbc	; 0x1bfbc <__prologue_saves__>
    911a:	fc 01       	movw	r30, r24
    911c:	60 80       	ld	r6, Z
    911e:	71 80       	ldd	r7, Z+1	; 0x01
    9120:	fb 01       	movw	r30, r22
    9122:	16 8a       	std	Z+22, r1	; 0x16
    9124:	fc 01       	movw	r30, r24
    9126:	06 89       	ldd	r16, Z+22	; 0x16
    9128:	17 89       	ldd	r17, Z+23	; 0x17
    912a:	20 8d       	ldd	r18, Z+24	; 0x18
    912c:	31 8d       	ldd	r19, Z+25	; 0x19
    912e:	01 15       	cp	r16, r1
    9130:	11 05       	cpc	r17, r1
    9132:	21 05       	cpc	r18, r1
    9134:	31 05       	cpc	r19, r1
    9136:	09 f4       	brne	.+2      	; 0x913a <get_fileinfo+0x2c>
    9138:	f5 c0       	rjmp	.+490    	; 0x9324 <get_fileinfo+0x216>
    913a:	eb 01       	movw	r28, r22
    913c:	8c 01       	movw	r16, r24
    913e:	80 a5       	ldd	r24, Z+40	; 0x28
    9140:	91 a5       	ldd	r25, Z+41	; 0x29
    9142:	a2 a5       	ldd	r26, Z+42	; 0x2a
    9144:	b3 a5       	ldd	r27, Z+43	; 0x2b
    9146:	8f 3f       	cpi	r24, 0xFF	; 255
    9148:	9f 4f       	sbci	r25, 0xFF	; 255
    914a:	af 4f       	sbci	r26, 0xFF	; 255
    914c:	bf 4f       	sbci	r27, 0xFF	; 255
    914e:	09 f4       	brne	.+2      	; 0x9152 <get_fileinfo+0x44>
    9150:	48 c0       	rjmp	.+144    	; 0x91e2 <get_fileinfo+0xd4>
    9152:	a1 2c       	mov	r10, r1
    9154:	b1 2c       	mov	r11, r1
    9156:	c1 2c       	mov	r12, r1
    9158:	d1 2c       	mov	r13, r1
    915a:	e1 2c       	mov	r14, r1
    915c:	f1 2c       	mov	r15, r1
    915e:	88 24       	eor	r8, r8
    9160:	8a 94       	dec	r8
    9162:	91 2c       	mov	r9, r1
    9164:	f3 01       	movw	r30, r6
    9166:	83 85       	ldd	r24, Z+11	; 0x0b
    9168:	94 85       	ldd	r25, Z+12	; 0x0c
    916a:	fc 01       	movw	r30, r24
    916c:	ea 0d       	add	r30, r10
    916e:	fb 1d       	adc	r31, r11
    9170:	80 81       	ld	r24, Z
    9172:	91 81       	ldd	r25, Z+1	; 0x01
    9174:	00 97       	sbiw	r24, 0x00	; 0
    9176:	69 f1       	breq	.+90     	; 0x91d2 <get_fileinfo+0xc4>
    9178:	c1 14       	cp	r12, r1
    917a:	d1 04       	cpc	r13, r1
    917c:	29 f4       	brne	.+10     	; 0x9188 <get_fileinfo+0x7a>
    917e:	9c 01       	movw	r18, r24
    9180:	38 5d       	subi	r19, 0xD8	; 216
    9182:	21 15       	cp	r18, r1
    9184:	38 40       	sbci	r19, 0x08	; 8
    9186:	f0 f0       	brcs	.+60     	; 0x91c4 <get_fileinfo+0xb6>
    9188:	a7 01       	movw	r20, r14
    918a:	4a 5e       	subi	r20, 0xEA	; 234
    918c:	5f 4f       	sbci	r21, 0xFF	; 255
    918e:	4c 0f       	add	r20, r28
    9190:	5d 1f       	adc	r21, r29
    9192:	16 01       	movw	r2, r12
    9194:	41 2c       	mov	r4, r1
    9196:	51 2c       	mov	r5, r1
    9198:	21 01       	movw	r4, r2
    919a:	33 24       	eor	r3, r3
    919c:	22 24       	eor	r2, r2
    919e:	a0 e0       	ldi	r26, 0x00	; 0
    91a0:	b0 e0       	ldi	r27, 0x00	; 0
    91a2:	bc 01       	movw	r22, r24
    91a4:	cd 01       	movw	r24, r26
    91a6:	62 29       	or	r22, r2
    91a8:	73 29       	or	r23, r3
    91aa:	84 29       	or	r24, r4
    91ac:	95 29       	or	r25, r5
    91ae:	94 01       	movw	r18, r8
    91b0:	2e 19       	sub	r18, r14
    91b2:	3f 09       	sbc	r19, r15
    91b4:	ff de       	rcall	.-514    	; 0x8fb4 <put_utf>
    91b6:	90 e0       	ldi	r25, 0x00	; 0
    91b8:	00 97       	sbiw	r24, 0x00	; 0
    91ba:	49 f0       	breq	.+18     	; 0x91ce <get_fileinfo+0xc0>
    91bc:	e8 0e       	add	r14, r24
    91be:	f9 1e       	adc	r15, r25
    91c0:	80 e0       	ldi	r24, 0x00	; 0
    91c2:	90 e0       	ldi	r25, 0x00	; 0
    91c4:	e2 e0       	ldi	r30, 0x02	; 2
    91c6:	ae 0e       	add	r10, r30
    91c8:	b1 1c       	adc	r11, r1
    91ca:	6c 01       	movw	r12, r24
    91cc:	cb cf       	rjmp	.-106    	; 0x9164 <get_fileinfo+0x56>
    91ce:	e1 2c       	mov	r14, r1
    91d0:	f1 2c       	mov	r15, r1
    91d2:	cd 28       	or	r12, r13
    91d4:	11 f0       	breq	.+4      	; 0x91da <get_fileinfo+0xcc>
    91d6:	e1 2c       	mov	r14, r1
    91d8:	f1 2c       	mov	r15, r1
    91da:	fe 01       	movw	r30, r28
    91dc:	ee 0d       	add	r30, r14
    91de:	ff 1d       	adc	r31, r15
    91e0:	16 8a       	std	Z+22, r1	; 0x16
    91e2:	e1 2c       	mov	r14, r1
    91e4:	f1 2c       	mov	r15, r1
    91e6:	80 e0       	ldi	r24, 0x00	; 0
    91e8:	90 e0       	ldi	r25, 0x00	; 0
    91ea:	2c e0       	ldi	r18, 0x0C	; 12
    91ec:	a2 2e       	mov	r10, r18
    91ee:	b1 2c       	mov	r11, r1
    91f0:	3e e2       	ldi	r19, 0x2E	; 46
    91f2:	93 2e       	mov	r9, r19
    91f4:	6c 01       	movw	r12, r24
    91f6:	ff ef       	ldi	r31, 0xFF	; 255
    91f8:	cf 1a       	sub	r12, r31
    91fa:	df 0a       	sbc	r13, r31
    91fc:	f8 01       	movw	r30, r16
    91fe:	22 8d       	ldd	r18, Z+26	; 0x1a
    9200:	33 8d       	ldd	r19, Z+27	; 0x1b
    9202:	f9 01       	movw	r30, r18
    9204:	e8 0f       	add	r30, r24
    9206:	f9 1f       	adc	r31, r25
    9208:	80 81       	ld	r24, Z
    920a:	90 e0       	ldi	r25, 0x00	; 0
    920c:	80 32       	cpi	r24, 0x20	; 32
    920e:	91 05       	cpc	r25, r1
    9210:	71 f1       	breq	.+92     	; 0x926e <get_fileinfo+0x160>
    9212:	85 30       	cpi	r24, 0x05	; 5
    9214:	91 05       	cpc	r25, r1
    9216:	11 f4       	brne	.+4      	; 0x921c <get_fileinfo+0x10e>
    9218:	85 ee       	ldi	r24, 0xE5	; 229
    921a:	90 e0       	ldi	r25, 0x00	; 0
    921c:	f9 e0       	ldi	r31, 0x09	; 9
    921e:	cf 16       	cp	r12, r31
    9220:	d1 04       	cpc	r13, r1
    9222:	59 f4       	brne	.+22     	; 0x923a <get_fileinfo+0x12c>
    9224:	2c e0       	ldi	r18, 0x0C	; 12
    9226:	e2 16       	cp	r14, r18
    9228:	f1 04       	cpc	r15, r1
    922a:	38 f4       	brcc	.+14     	; 0x923a <get_fileinfo+0x12c>
    922c:	fe 01       	movw	r30, r28
    922e:	ee 0d       	add	r30, r14
    9230:	ff 1d       	adc	r31, r15
    9232:	91 86       	std	Z+9, r9	; 0x09
    9234:	f7 01       	movw	r30, r14
    9236:	31 96       	adiw	r30, 0x01	; 1
    9238:	7f 01       	movw	r14, r30
    923a:	65 eb       	ldi	r22, 0xB5	; 181
    923c:	71 e0       	ldi	r23, 0x01	; 1
    923e:	0e 94 ec 68 	call	0xd1d8	; 0xd1d8 <ff_oem2uni>
    9242:	00 97       	sbiw	r24, 0x00	; 0
    9244:	19 f4       	brne	.+6      	; 0x924c <get_fileinfo+0x13e>
    9246:	e1 2c       	mov	r14, r1
    9248:	f1 2c       	mov	r15, r1
    924a:	16 c0       	rjmp	.+44     	; 0x9278 <get_fileinfo+0x16a>
    924c:	a7 01       	movw	r20, r14
    924e:	47 5f       	subi	r20, 0xF7	; 247
    9250:	5f 4f       	sbci	r21, 0xFF	; 255
    9252:	4c 0f       	add	r20, r28
    9254:	5d 1f       	adc	r21, r29
    9256:	bc 01       	movw	r22, r24
    9258:	80 e0       	ldi	r24, 0x00	; 0
    925a:	90 e0       	ldi	r25, 0x00	; 0
    925c:	95 01       	movw	r18, r10
    925e:	2e 19       	sub	r18, r14
    9260:	3f 09       	sbc	r19, r15
    9262:	a8 de       	rcall	.-688    	; 0x8fb4 <put_utf>
    9264:	90 e0       	ldi	r25, 0x00	; 0
    9266:	00 97       	sbiw	r24, 0x00	; 0
    9268:	71 f3       	breq	.-36     	; 0x9246 <get_fileinfo+0x138>
    926a:	e8 0e       	add	r14, r24
    926c:	f9 1e       	adc	r15, r25
    926e:	c6 01       	movw	r24, r12
    9270:	8b 30       	cpi	r24, 0x0B	; 11
    9272:	91 05       	cpc	r25, r1
    9274:	09 f0       	breq	.+2      	; 0x9278 <get_fileinfo+0x16a>
    9276:	be cf       	rjmp	.-132    	; 0x91f4 <get_fileinfo+0xe6>
    9278:	fe 01       	movw	r30, r28
    927a:	ee 0d       	add	r30, r14
    927c:	ff 1d       	adc	r31, r15
    927e:	11 86       	std	Z+9, r1	; 0x09
    9280:	8e 89       	ldd	r24, Y+22	; 0x16
    9282:	81 11       	cpse	r24, r1
    9284:	36 c0       	rjmp	.+108    	; 0x92f2 <get_fileinfo+0x1e4>
    9286:	e1 14       	cp	r14, r1
    9288:	f1 04       	cpc	r15, r1
    928a:	31 f0       	breq	.+12     	; 0x9298 <get_fileinfo+0x18a>
    928c:	de 01       	movw	r26, r28
    928e:	19 96       	adiw	r26, 0x09	; 9
    9290:	58 e0       	ldi	r21, 0x08	; 8
    9292:	20 e0       	ldi	r18, 0x00	; 0
    9294:	30 e0       	ldi	r19, 0x00	; 0
    9296:	14 c0       	rjmp	.+40     	; 0x92c0 <get_fileinfo+0x1b2>
    9298:	8f e3       	ldi	r24, 0x3F	; 63
    929a:	8e 8b       	std	Y+22, r24	; 0x16
    929c:	21 e0       	ldi	r18, 0x01	; 1
    929e:	30 e0       	ldi	r19, 0x00	; 0
    92a0:	1c c0       	rjmp	.+56     	; 0x92da <get_fileinfo+0x1cc>
    92a2:	90 e0       	ldi	r25, 0x00	; 0
    92a4:	8e 32       	cpi	r24, 0x2E	; 46
    92a6:	91 05       	cpc	r25, r1
    92a8:	09 f4       	brne	.+2      	; 0x92ac <get_fileinfo+0x19e>
    92aa:	50 e1       	ldi	r21, 0x10	; 16
    92ac:	bc 01       	movw	r22, r24
    92ae:	61 54       	subi	r22, 0x41	; 65
    92b0:	71 09       	sbc	r23, r1
    92b2:	6a 31       	cpi	r22, 0x1A	; 26
    92b4:	71 05       	cpc	r23, r1
    92b6:	40 f0       	brcs	.+16     	; 0x92c8 <get_fileinfo+0x1ba>
    92b8:	fd 01       	movw	r30, r26
    92ba:	84 87       	std	Z+12, r24	; 0x0c
    92bc:	2f 5f       	subi	r18, 0xFF	; 255
    92be:	3f 4f       	sbci	r19, 0xFF	; 255
    92c0:	8d 91       	ld	r24, X+
    92c2:	81 11       	cpse	r24, r1
    92c4:	ee cf       	rjmp	.-36     	; 0x92a2 <get_fileinfo+0x194>
    92c6:	09 c0       	rjmp	.+18     	; 0x92da <get_fileinfo+0x1cc>
    92c8:	f8 01       	movw	r30, r16
    92ca:	62 8d       	ldd	r22, Z+26	; 0x1a
    92cc:	73 8d       	ldd	r23, Z+27	; 0x1b
    92ce:	fb 01       	movw	r30, r22
    92d0:	44 85       	ldd	r20, Z+12	; 0x0c
    92d2:	45 23       	and	r20, r21
    92d4:	89 f3       	breq	.-30     	; 0x92b8 <get_fileinfo+0x1aa>
    92d6:	80 96       	adiw	r24, 0x20	; 32
    92d8:	ef cf       	rjmp	.-34     	; 0x92b8 <get_fileinfo+0x1aa>
    92da:	fe 01       	movw	r30, r28
    92dc:	e2 0f       	add	r30, r18
    92de:	f3 1f       	adc	r31, r19
    92e0:	16 8a       	std	Z+22, r1	; 0x16
    92e2:	f8 01       	movw	r30, r16
    92e4:	82 8d       	ldd	r24, Z+26	; 0x1a
    92e6:	93 8d       	ldd	r25, Z+27	; 0x1b
    92e8:	fc 01       	movw	r30, r24
    92ea:	84 85       	ldd	r24, Z+12	; 0x0c
    92ec:	81 11       	cpse	r24, r1
    92ee:	01 c0       	rjmp	.+2      	; 0x92f2 <get_fileinfo+0x1e4>
    92f0:	19 86       	std	Y+9, r1	; 0x09
    92f2:	f8 01       	movw	r30, r16
    92f4:	82 8d       	ldd	r24, Z+26	; 0x1a
    92f6:	93 8d       	ldd	r25, Z+27	; 0x1b
    92f8:	fc 01       	movw	r30, r24
    92fa:	83 85       	ldd	r24, Z+11	; 0x0b
    92fc:	88 87       	std	Y+8, r24	; 0x08
    92fe:	f8 01       	movw	r30, r16
    9300:	02 8d       	ldd	r16, Z+26	; 0x1a
    9302:	13 8d       	ldd	r17, Z+27	; 0x1b
    9304:	c8 01       	movw	r24, r16
    9306:	4c 96       	adiw	r24, 0x1c	; 28
    9308:	c6 dc       	rcall	.-1652   	; 0x8c96 <ld_dword>
    930a:	68 83       	st	Y, r22
    930c:	79 83       	std	Y+1, r23	; 0x01
    930e:	8a 83       	std	Y+2, r24	; 0x02
    9310:	9b 83       	std	Y+3, r25	; 0x03
    9312:	f8 01       	movw	r30, r16
    9314:	86 89       	ldd	r24, Z+22	; 0x16
    9316:	97 89       	ldd	r25, Z+23	; 0x17
    9318:	9f 83       	std	Y+7, r25	; 0x07
    931a:	8e 83       	std	Y+6, r24	; 0x06
    931c:	80 8d       	ldd	r24, Z+24	; 0x18
    931e:	91 8d       	ldd	r25, Z+25	; 0x19
    9320:	9d 83       	std	Y+5, r25	; 0x05
    9322:	8c 83       	std	Y+4, r24	; 0x04
    9324:	cd b7       	in	r28, 0x3d	; 61
    9326:	de b7       	in	r29, 0x3e	; 62
    9328:	e2 e1       	ldi	r30, 0x12	; 18
    932a:	0c 94 fa df 	jmp	0x1bff4	; 0x1bff4 <__epilogue_restores__>

0000932e <ld_clust.isra.4>:
    932e:	fb 01       	movw	r30, r22
    9330:	42 8d       	ldd	r20, Z+26	; 0x1a
    9332:	53 8d       	ldd	r21, Z+27	; 0x1b
    9334:	60 e0       	ldi	r22, 0x00	; 0
    9336:	70 e0       	ldi	r23, 0x00	; 0
    9338:	83 30       	cpi	r24, 0x03	; 3
    933a:	59 f4       	brne	.+22     	; 0x9352 <ld_clust.isra.4+0x24>
    933c:	84 89       	ldd	r24, Z+20	; 0x14
    933e:	95 89       	ldd	r25, Z+21	; 0x15
    9340:	a0 e0       	ldi	r26, 0x00	; 0
    9342:	b0 e0       	ldi	r27, 0x00	; 0
    9344:	dc 01       	movw	r26, r24
    9346:	99 27       	eor	r25, r25
    9348:	88 27       	eor	r24, r24
    934a:	48 2b       	or	r20, r24
    934c:	59 2b       	or	r21, r25
    934e:	6a 2b       	or	r22, r26
    9350:	7b 2b       	or	r23, r27
    9352:	cb 01       	movw	r24, r22
    9354:	ba 01       	movw	r22, r20
    9356:	08 95       	ret

00009358 <st_clust.isra.5>:
    9358:	fb 01       	movw	r30, r22
    935a:	22 8f       	std	Z+26, r18	; 0x1a
    935c:	33 8f       	std	Z+27, r19	; 0x1b
    935e:	dc 01       	movw	r26, r24
    9360:	8c 91       	ld	r24, X
    9362:	83 30       	cpi	r24, 0x03	; 3
    9364:	29 f4       	brne	.+10     	; 0x9370 <st_clust.isra.5+0x18>
    9366:	ca 01       	movw	r24, r20
    9368:	aa 27       	eor	r26, r26
    936a:	bb 27       	eor	r27, r27
    936c:	84 8b       	std	Z+20, r24	; 0x14
    936e:	95 8b       	std	Z+21, r25	; 0x15
    9370:	08 95       	ret

00009372 <sync_window.part.6>:
    9372:	8f 92       	push	r8
    9374:	9f 92       	push	r9
    9376:	af 92       	push	r10
    9378:	bf 92       	push	r11
    937a:	ef 92       	push	r14
    937c:	ff 92       	push	r15
    937e:	0f 93       	push	r16
    9380:	1f 93       	push	r17
    9382:	cf 93       	push	r28
    9384:	df 93       	push	r29
    9386:	ec 01       	movw	r28, r24
    9388:	7c 01       	movw	r14, r24
    938a:	45 e3       	ldi	r20, 0x35	; 53
    938c:	e4 0e       	add	r14, r20
    938e:	f1 1c       	adc	r15, r1
    9390:	29 a9       	ldd	r18, Y+49	; 0x31
    9392:	3a a9       	ldd	r19, Y+50	; 0x32
    9394:	4b a9       	ldd	r20, Y+51	; 0x33
    9396:	5c a9       	ldd	r21, Y+52	; 0x34
    9398:	01 e0       	ldi	r16, 0x01	; 1
    939a:	10 e0       	ldi	r17, 0x00	; 0
    939c:	b7 01       	movw	r22, r14
    939e:	89 81       	ldd	r24, Y+1	; 0x01
    93a0:	0e 94 7f 69 	call	0xd2fe	; 0xd2fe <disk_write>
    93a4:	89 2b       	or	r24, r25
    93a6:	41 f5       	brne	.+80     	; 0x93f8 <sync_window.part.6+0x86>
    93a8:	1b 82       	std	Y+3, r1	; 0x03
    93aa:	09 a9       	ldd	r16, Y+49	; 0x31
    93ac:	1a a9       	ldd	r17, Y+50	; 0x32
    93ae:	2b a9       	ldd	r18, Y+51	; 0x33
    93b0:	3c a9       	ldd	r19, Y+52	; 0x34
    93b2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    93b4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    93b6:	af 8d       	ldd	r26, Y+31	; 0x1f
    93b8:	b8 a1       	ldd	r27, Y+32	; 0x20
    93ba:	8d a0       	ldd	r8, Y+37	; 0x25
    93bc:	9e a0       	ldd	r9, Y+38	; 0x26
    93be:	af a0       	ldd	r10, Y+39	; 0x27
    93c0:	b8 a4       	ldd	r11, Y+40	; 0x28
    93c2:	b9 01       	movw	r22, r18
    93c4:	a8 01       	movw	r20, r16
    93c6:	48 19       	sub	r20, r8
    93c8:	59 09       	sbc	r21, r9
    93ca:	6a 09       	sbc	r22, r10
    93cc:	7b 09       	sbc	r23, r11
    93ce:	48 17       	cp	r20, r24
    93d0:	59 07       	cpc	r21, r25
    93d2:	6a 07       	cpc	r22, r26
    93d4:	7b 07       	cpc	r23, r27
    93d6:	98 f4       	brcc	.+38     	; 0x93fe <sync_window.part.6+0x8c>
    93d8:	6a 81       	ldd	r22, Y+2	; 0x02
    93da:	62 30       	cpi	r22, 0x02	; 2
    93dc:	81 f4       	brne	.+32     	; 0x93fe <sync_window.part.6+0x8c>
    93de:	a9 01       	movw	r20, r18
    93e0:	98 01       	movw	r18, r16
    93e2:	28 0f       	add	r18, r24
    93e4:	39 1f       	adc	r19, r25
    93e6:	4a 1f       	adc	r20, r26
    93e8:	5b 1f       	adc	r21, r27
    93ea:	01 e0       	ldi	r16, 0x01	; 1
    93ec:	10 e0       	ldi	r17, 0x00	; 0
    93ee:	b7 01       	movw	r22, r14
    93f0:	89 81       	ldd	r24, Y+1	; 0x01
    93f2:	0e 94 7f 69 	call	0xd2fe	; 0xd2fe <disk_write>
    93f6:	03 c0       	rjmp	.+6      	; 0x93fe <sync_window.part.6+0x8c>
    93f8:	81 e0       	ldi	r24, 0x01	; 1
    93fa:	90 e0       	ldi	r25, 0x00	; 0
    93fc:	02 c0       	rjmp	.+4      	; 0x9402 <sync_window.part.6+0x90>
    93fe:	80 e0       	ldi	r24, 0x00	; 0
    9400:	90 e0       	ldi	r25, 0x00	; 0
    9402:	df 91       	pop	r29
    9404:	cf 91       	pop	r28
    9406:	1f 91       	pop	r17
    9408:	0f 91       	pop	r16
    940a:	ff 90       	pop	r15
    940c:	ef 90       	pop	r14
    940e:	bf 90       	pop	r11
    9410:	af 90       	pop	r10
    9412:	9f 90       	pop	r9
    9414:	8f 90       	pop	r8
    9416:	08 95       	ret

00009418 <sync_fs>:
    9418:	ef 92       	push	r14
    941a:	ff 92       	push	r15
    941c:	0f 93       	push	r16
    941e:	1f 93       	push	r17
    9420:	cf 93       	push	r28
    9422:	df 93       	push	r29
    9424:	ec 01       	movw	r28, r24
    9426:	8b 81       	ldd	r24, Y+3	; 0x03
    9428:	81 11       	cpse	r24, r1
    942a:	05 c0       	rjmp	.+10     	; 0x9436 <sync_fs+0x1e>
    942c:	88 81       	ld	r24, Y
    942e:	83 30       	cpi	r24, 0x03	; 3
    9430:	09 f0       	breq	.+2      	; 0x9434 <sync_fs+0x1c>
    9432:	52 c0       	rjmp	.+164    	; 0x94d8 <sync_fs+0xc0>
    9434:	06 c0       	rjmp	.+12     	; 0x9442 <sync_fs+0x2a>
    9436:	ce 01       	movw	r24, r28
    9438:	9c df       	rcall	.-200    	; 0x9372 <sync_window.part.6>
    943a:	00 97       	sbiw	r24, 0x00	; 0
    943c:	09 f0       	breq	.+2      	; 0x9440 <sync_fs+0x28>
    943e:	59 c0       	rjmp	.+178    	; 0x94f2 <sync_fs+0xda>
    9440:	f5 cf       	rjmp	.-22     	; 0x942c <sync_fs+0x14>
    9442:	8c 81       	ldd	r24, Y+4	; 0x04
    9444:	81 30       	cpi	r24, 0x01	; 1
    9446:	09 f0       	breq	.+2      	; 0x944a <sync_fs+0x32>
    9448:	47 c0       	rjmp	.+142    	; 0x94d8 <sync_fs+0xc0>
    944a:	40 e0       	ldi	r20, 0x00	; 0
    944c:	52 e0       	ldi	r21, 0x02	; 2
    944e:	60 e0       	ldi	r22, 0x00	; 0
    9450:	70 e0       	ldi	r23, 0x00	; 0
    9452:	7e 01       	movw	r14, r28
    9454:	85 e3       	ldi	r24, 0x35	; 53
    9456:	e8 0e       	add	r14, r24
    9458:	f1 1c       	adc	r15, r1
    945a:	c7 01       	movw	r24, r14
    945c:	37 dc       	rcall	.-1938   	; 0x8ccc <mem_set>
    945e:	85 e5       	ldi	r24, 0x55	; 85
    9460:	fe 01       	movw	r30, r28
    9462:	ed 5c       	subi	r30, 0xCD	; 205
    9464:	fd 4f       	sbci	r31, 0xFD	; 253
    9466:	80 83       	st	Z, r24
    9468:	8a ea       	ldi	r24, 0xAA	; 170
    946a:	31 96       	adiw	r30, 0x01	; 1
    946c:	80 83       	st	Z, r24
    946e:	82 e5       	ldi	r24, 0x52	; 82
    9470:	8d ab       	std	Y+53, r24	; 0x35
    9472:	8e ab       	std	Y+54, r24	; 0x36
    9474:	81 e6       	ldi	r24, 0x61	; 97
    9476:	8f ab       	std	Y+55, r24	; 0x37
    9478:	91 e4       	ldi	r25, 0x41	; 65
    947a:	98 af       	std	Y+56, r25	; 0x38
    947c:	22 e7       	ldi	r18, 0x72	; 114
    947e:	7b 97       	sbiw	r30, 0x1b	; 27
    9480:	20 83       	st	Z, r18
    9482:	31 96       	adiw	r30, 0x01	; 1
    9484:	20 83       	st	Z, r18
    9486:	31 96       	adiw	r30, 0x01	; 1
    9488:	90 83       	st	Z, r25
    948a:	31 96       	adiw	r30, 0x01	; 1
    948c:	80 83       	st	Z, r24
    948e:	49 89       	ldd	r20, Y+17	; 0x11
    9490:	5a 89       	ldd	r21, Y+18	; 0x12
    9492:	6b 89       	ldd	r22, Y+19	; 0x13
    9494:	7c 89       	ldd	r23, Y+20	; 0x14
    9496:	ce 01       	movw	r24, r28
    9498:	83 5e       	subi	r24, 0xE3	; 227
    949a:	9d 4f       	sbci	r25, 0xFD	; 253
    949c:	11 dc       	rcall	.-2014   	; 0x8cc0 <st_dword>
    949e:	4d 85       	ldd	r20, Y+13	; 0x0d
    94a0:	5e 85       	ldd	r21, Y+14	; 0x0e
    94a2:	6f 85       	ldd	r22, Y+15	; 0x0f
    94a4:	78 89       	ldd	r23, Y+16	; 0x10
    94a6:	ce 01       	movw	r24, r28
    94a8:	8f 5d       	subi	r24, 0xDF	; 223
    94aa:	9d 4f       	sbci	r25, 0xFD	; 253
    94ac:	09 dc       	rcall	.-2030   	; 0x8cc0 <st_dword>
    94ae:	89 a1       	ldd	r24, Y+33	; 0x21
    94b0:	9a a1       	ldd	r25, Y+34	; 0x22
    94b2:	ab a1       	ldd	r26, Y+35	; 0x23
    94b4:	bc a1       	ldd	r27, Y+36	; 0x24
    94b6:	9c 01       	movw	r18, r24
    94b8:	ad 01       	movw	r20, r26
    94ba:	2f 5f       	subi	r18, 0xFF	; 255
    94bc:	3f 4f       	sbci	r19, 0xFF	; 255
    94be:	4f 4f       	sbci	r20, 0xFF	; 255
    94c0:	5f 4f       	sbci	r21, 0xFF	; 255
    94c2:	29 ab       	std	Y+49, r18	; 0x31
    94c4:	3a ab       	std	Y+50, r19	; 0x32
    94c6:	4b ab       	std	Y+51, r20	; 0x33
    94c8:	5c ab       	std	Y+52, r21	; 0x34
    94ca:	01 e0       	ldi	r16, 0x01	; 1
    94cc:	10 e0       	ldi	r17, 0x00	; 0
    94ce:	b7 01       	movw	r22, r14
    94d0:	89 81       	ldd	r24, Y+1	; 0x01
    94d2:	0e 94 7f 69 	call	0xd2fe	; 0xd2fe <disk_write>
    94d6:	1c 82       	std	Y+4, r1	; 0x04
    94d8:	40 e0       	ldi	r20, 0x00	; 0
    94da:	50 e0       	ldi	r21, 0x00	; 0
    94dc:	60 e0       	ldi	r22, 0x00	; 0
    94de:	89 81       	ldd	r24, Y+1	; 0x01
    94e0:	0e 94 8f 69 	call	0xd31e	; 0xd31e <disk_ioctl>
    94e4:	31 e0       	ldi	r19, 0x01	; 1
    94e6:	20 e0       	ldi	r18, 0x00	; 0
    94e8:	89 2b       	or	r24, r25
    94ea:	09 f4       	brne	.+2      	; 0x94ee <sync_fs+0xd6>
    94ec:	30 e0       	ldi	r19, 0x00	; 0
    94ee:	83 2f       	mov	r24, r19
    94f0:	92 2f       	mov	r25, r18
    94f2:	cd b7       	in	r28, 0x3d	; 61
    94f4:	de b7       	in	r29, 0x3e	; 62
    94f6:	e6 e0       	ldi	r30, 0x06	; 6
    94f8:	0c 94 06 e0 	jmp	0x1c00c	; 0x1c00c <__epilogue_restores__+0x18>

000094fc <dir_clear>:
    94fc:	4f 92       	push	r4
    94fe:	5f 92       	push	r5
    9500:	6f 92       	push	r6
    9502:	7f 92       	push	r7
    9504:	af 92       	push	r10
    9506:	bf 92       	push	r11
    9508:	cf 92       	push	r12
    950a:	df 92       	push	r13
    950c:	ef 92       	push	r14
    950e:	ff 92       	push	r15
    9510:	0f 93       	push	r16
    9512:	1f 93       	push	r17
    9514:	cf 93       	push	r28
    9516:	df 93       	push	r29
    9518:	ec 01       	movw	r28, r24
    951a:	6a 01       	movw	r12, r20
    951c:	7b 01       	movw	r14, r22
    951e:	8b 81       	ldd	r24, Y+3	; 0x03
    9520:	81 11       	cpse	r24, r1
    9522:	28 c0       	rjmp	.+80     	; 0x9574 <dir_clear+0x78>
    9524:	b7 01       	movw	r22, r14
    9526:	a6 01       	movw	r20, r12
    9528:	ce 01       	movw	r24, r28
    952a:	6e dc       	rcall	.-1828   	; 0x8e08 <clst2sect>
    952c:	2b 01       	movw	r4, r22
    952e:	3c 01       	movw	r6, r24
    9530:	69 ab       	std	Y+49, r22	; 0x31
    9532:	7a ab       	std	Y+50, r23	; 0x32
    9534:	8b ab       	std	Y+51, r24	; 0x33
    9536:	9c ab       	std	Y+52, r25	; 0x34
    9538:	5e 01       	movw	r10, r28
    953a:	25 e3       	ldi	r18, 0x35	; 53
    953c:	a2 0e       	add	r10, r18
    953e:	b1 1c       	adc	r11, r1
    9540:	40 e0       	ldi	r20, 0x00	; 0
    9542:	52 e0       	ldi	r21, 0x02	; 2
    9544:	60 e0       	ldi	r22, 0x00	; 0
    9546:	70 e0       	ldi	r23, 0x00	; 0
    9548:	c5 01       	movw	r24, r10
    954a:	c0 db       	rcall	.-2176   	; 0x8ccc <mem_set>
    954c:	09 85       	ldd	r16, Y+9	; 0x09
    954e:	1a 85       	ldd	r17, Y+10	; 0x0a
    9550:	c8 01       	movw	r24, r16
    9552:	a0 e0       	ldi	r26, 0x00	; 0
    9554:	b0 e0       	ldi	r27, 0x00	; 0
    9556:	39 e0       	ldi	r19, 0x09	; 9
    9558:	88 0f       	add	r24, r24
    955a:	99 1f       	adc	r25, r25
    955c:	aa 1f       	adc	r26, r26
    955e:	bb 1f       	adc	r27, r27
    9560:	3a 95       	dec	r19
    9562:	d1 f7       	brne	.-12     	; 0x9558 <dir_clear+0x5c>
    9564:	81 15       	cp	r24, r1
    9566:	90 48       	sbci	r25, 0x80	; 128
    9568:	a1 05       	cpc	r26, r1
    956a:	b1 05       	cpc	r27, r1
    956c:	50 f0       	brcs	.+20     	; 0x9582 <dir_clear+0x86>
    956e:	00 e0       	ldi	r16, 0x00	; 0
    9570:	10 e8       	ldi	r17, 0x80	; 128
    9572:	14 c0       	rjmp	.+40     	; 0x959c <dir_clear+0xa0>
    9574:	ce 01       	movw	r24, r28
    9576:	fd de       	rcall	.-518    	; 0x9372 <sync_window.part.6>
    9578:	89 2b       	or	r24, r25
    957a:	a1 f2       	breq	.-88     	; 0x9524 <dir_clear+0x28>
    957c:	81 e0       	ldi	r24, 0x01	; 1
    957e:	90 e0       	ldi	r25, 0x00	; 0
    9580:	56 c0       	rjmp	.+172    	; 0x962e <dir_clear+0x132>
    9582:	10 2f       	mov	r17, r16
    9584:	00 27       	eor	r16, r16
    9586:	11 0f       	add	r17, r17
    9588:	09 c0       	rjmp	.+18     	; 0x959c <dir_clear+0xa0>
    958a:	c8 01       	movw	r24, r16
    958c:	0e 94 b3 68 	call	0xd166	; 0xd166 <ff_memalloc>
    9590:	6c 01       	movw	r12, r24
    9592:	00 97       	sbiw	r24, 0x00	; 0
    9594:	09 f0       	breq	.+2      	; 0x9598 <dir_clear+0x9c>
    9596:	40 c0       	rjmp	.+128    	; 0x9618 <dir_clear+0x11c>
    9598:	16 95       	lsr	r17
    959a:	07 95       	ror	r16
    959c:	01 30       	cpi	r16, 0x01	; 1
    959e:	82 e0       	ldi	r24, 0x02	; 2
    95a0:	18 07       	cpc	r17, r24
    95a2:	98 f7       	brcc	.-26     	; 0x958a <dir_clear+0x8e>
    95a4:	e1 2c       	mov	r14, r1
    95a6:	f1 2c       	mov	r15, r1
    95a8:	11 c0       	rjmp	.+34     	; 0x95cc <dir_clear+0xd0>
    95aa:	01 e0       	ldi	r16, 0x01	; 1
    95ac:	10 e0       	ldi	r17, 0x00	; 0
    95ae:	a3 01       	movw	r20, r6
    95b0:	92 01       	movw	r18, r4
    95b2:	2e 0d       	add	r18, r14
    95b4:	3f 1d       	adc	r19, r15
    95b6:	41 1d       	adc	r20, r1
    95b8:	51 1d       	adc	r21, r1
    95ba:	b5 01       	movw	r22, r10
    95bc:	89 81       	ldd	r24, Y+1	; 0x01
    95be:	0e 94 7f 69 	call	0xd2fe	; 0xd2fe <disk_write>
    95c2:	89 2b       	or	r24, r25
    95c4:	01 f5       	brne	.+64     	; 0x9606 <dir_clear+0x10a>
    95c6:	2f ef       	ldi	r18, 0xFF	; 255
    95c8:	e2 1a       	sub	r14, r18
    95ca:	f2 0a       	sbc	r15, r18
    95cc:	89 85       	ldd	r24, Y+9	; 0x09
    95ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    95d0:	e8 16       	cp	r14, r24
    95d2:	f9 06       	cpc	r15, r25
    95d4:	50 f3       	brcs	.-44     	; 0x95aa <dir_clear+0xae>
    95d6:	17 c0       	rjmp	.+46     	; 0x9606 <dir_clear+0x10a>
    95d8:	85 01       	movw	r16, r10
    95da:	a3 01       	movw	r20, r6
    95dc:	92 01       	movw	r18, r4
    95de:	2e 0d       	add	r18, r14
    95e0:	3f 1d       	adc	r19, r15
    95e2:	41 1d       	adc	r20, r1
    95e4:	51 1d       	adc	r21, r1
    95e6:	b6 01       	movw	r22, r12
    95e8:	89 81       	ldd	r24, Y+1	; 0x01
    95ea:	0e 94 7f 69 	call	0xd2fe	; 0xd2fe <disk_write>
    95ee:	89 2b       	or	r24, r25
    95f0:	39 f4       	brne	.+14     	; 0x9600 <dir_clear+0x104>
    95f2:	ea 0c       	add	r14, r10
    95f4:	fb 1c       	adc	r15, r11
    95f6:	89 85       	ldd	r24, Y+9	; 0x09
    95f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    95fa:	e8 16       	cp	r14, r24
    95fc:	f9 06       	cpc	r15, r25
    95fe:	60 f3       	brcs	.-40     	; 0x95d8 <dir_clear+0xdc>
    9600:	c6 01       	movw	r24, r12
    9602:	0e 94 b6 68 	call	0xd16c	; 0xd16c <ff_memfree>
    9606:	81 e0       	ldi	r24, 0x01	; 1
    9608:	90 e0       	ldi	r25, 0x00	; 0
    960a:	29 85       	ldd	r18, Y+9	; 0x09
    960c:	3a 85       	ldd	r19, Y+10	; 0x0a
    960e:	2e 15       	cp	r18, r14
    9610:	3f 05       	cpc	r19, r15
    9612:	69 f4       	brne	.+26     	; 0x962e <dir_clear+0x132>
    9614:	80 e0       	ldi	r24, 0x00	; 0
    9616:	0b c0       	rjmp	.+22     	; 0x962e <dir_clear+0x132>
    9618:	a8 01       	movw	r20, r16
    961a:	60 e0       	ldi	r22, 0x00	; 0
    961c:	70 e0       	ldi	r23, 0x00	; 0
    961e:	56 db       	rcall	.-2388   	; 0x8ccc <mem_set>
    9620:	58 01       	movw	r10, r16
    9622:	ab 2c       	mov	r10, r11
    9624:	bb 24       	eor	r11, r11
    9626:	a6 94       	lsr	r10
    9628:	e1 2c       	mov	r14, r1
    962a:	f1 2c       	mov	r15, r1
    962c:	e4 cf       	rjmp	.-56     	; 0x95f6 <dir_clear+0xfa>
    962e:	df 91       	pop	r29
    9630:	cf 91       	pop	r28
    9632:	1f 91       	pop	r17
    9634:	0f 91       	pop	r16
    9636:	ff 90       	pop	r15
    9638:	ef 90       	pop	r14
    963a:	df 90       	pop	r13
    963c:	cf 90       	pop	r12
    963e:	bf 90       	pop	r11
    9640:	af 90       	pop	r10
    9642:	7f 90       	pop	r7
    9644:	6f 90       	pop	r6
    9646:	5f 90       	pop	r5
    9648:	4f 90       	pop	r4
    964a:	08 95       	ret

0000964c <move_window>:
    964c:	a0 e0       	ldi	r26, 0x00	; 0
    964e:	b0 e0       	ldi	r27, 0x00	; 0
    9650:	ec e2       	ldi	r30, 0x2C	; 44
    9652:	fb e4       	ldi	r31, 0x4B	; 75
    9654:	0c 94 e8 df 	jmp	0x1bfd0	; 0x1bfd0 <__prologue_saves__+0x14>
    9658:	ec 01       	movw	r28, r24
    965a:	6a 01       	movw	r12, r20
    965c:	7b 01       	movw	r14, r22
    965e:	89 a9       	ldd	r24, Y+49	; 0x31
    9660:	9a a9       	ldd	r25, Y+50	; 0x32
    9662:	ab a9       	ldd	r26, Y+51	; 0x33
    9664:	bc a9       	ldd	r27, Y+52	; 0x34
    9666:	84 17       	cp	r24, r20
    9668:	95 07       	cpc	r25, r21
    966a:	a6 07       	cpc	r26, r22
    966c:	b7 07       	cpc	r27, r23
    966e:	11 f1       	breq	.+68     	; 0x96b4 <move_window+0x68>
    9670:	8b 81       	ldd	r24, Y+3	; 0x03
    9672:	81 11       	cpse	r24, r1
    9674:	13 c0       	rjmp	.+38     	; 0x969c <move_window+0x50>
    9676:	01 e0       	ldi	r16, 0x01	; 1
    9678:	10 e0       	ldi	r17, 0x00	; 0
    967a:	a7 01       	movw	r20, r14
    967c:	96 01       	movw	r18, r12
    967e:	be 01       	movw	r22, r28
    9680:	6b 5c       	subi	r22, 0xCB	; 203
    9682:	7f 4f       	sbci	r23, 0xFF	; 255
    9684:	89 81       	ldd	r24, Y+1	; 0x01
    9686:	0e 94 6f 69 	call	0xd2de	; 0xd2de <disk_read>
    968a:	89 2b       	or	r24, r25
    968c:	61 f0       	breq	.+24     	; 0x96a6 <move_window+0x5a>
    968e:	81 e0       	ldi	r24, 0x01	; 1
    9690:	90 e0       	ldi	r25, 0x00	; 0
    9692:	cc 24       	eor	r12, r12
    9694:	ca 94       	dec	r12
    9696:	dc 2c       	mov	r13, r12
    9698:	76 01       	movw	r14, r12
    969a:	07 c0       	rjmp	.+14     	; 0x96aa <move_window+0x5e>
    969c:	ce 01       	movw	r24, r28
    969e:	69 de       	rcall	.-814    	; 0x9372 <sync_window.part.6>
    96a0:	00 97       	sbiw	r24, 0x00	; 0
    96a2:	51 f4       	brne	.+20     	; 0x96b8 <move_window+0x6c>
    96a4:	e8 cf       	rjmp	.-48     	; 0x9676 <move_window+0x2a>
    96a6:	80 e0       	ldi	r24, 0x00	; 0
    96a8:	90 e0       	ldi	r25, 0x00	; 0
    96aa:	c9 aa       	std	Y+49, r12	; 0x31
    96ac:	da aa       	std	Y+50, r13	; 0x32
    96ae:	eb aa       	std	Y+51, r14	; 0x33
    96b0:	fc aa       	std	Y+52, r15	; 0x34
    96b2:	02 c0       	rjmp	.+4      	; 0x96b8 <move_window+0x6c>
    96b4:	80 e0       	ldi	r24, 0x00	; 0
    96b6:	90 e0       	ldi	r25, 0x00	; 0
    96b8:	cd b7       	in	r28, 0x3d	; 61
    96ba:	de b7       	in	r29, 0x3e	; 62
    96bc:	e8 e0       	ldi	r30, 0x08	; 8
    96be:	0c 94 04 e0 	jmp	0x1c008	; 0x1c008 <__epilogue_restores__+0x14>

000096c2 <check_fs>:
    96c2:	cf 93       	push	r28
    96c4:	df 93       	push	r29
    96c6:	ec 01       	movw	r28, r24
    96c8:	1b 82       	std	Y+3, r1	; 0x03
    96ca:	8f ef       	ldi	r24, 0xFF	; 255
    96cc:	9f ef       	ldi	r25, 0xFF	; 255
    96ce:	dc 01       	movw	r26, r24
    96d0:	89 ab       	std	Y+49, r24	; 0x31
    96d2:	9a ab       	std	Y+50, r25	; 0x32
    96d4:	ab ab       	std	Y+51, r26	; 0x33
    96d6:	bc ab       	std	Y+52, r27	; 0x34
    96d8:	ce 01       	movw	r24, r28
    96da:	b8 df       	rcall	.-144    	; 0x964c <move_window>
    96dc:	89 2b       	or	r24, r25
    96de:	19 f5       	brne	.+70     	; 0x9726 <check_fs+0x64>
    96e0:	fe 01       	movw	r30, r28
    96e2:	ed 5c       	subi	r30, 0xCD	; 205
    96e4:	fd 4f       	sbci	r31, 0xFD	; 253
    96e6:	80 81       	ld	r24, Z
    96e8:	91 81       	ldd	r25, Z+1	; 0x01
    96ea:	85 35       	cpi	r24, 0x55	; 85
    96ec:	9a 4a       	sbci	r25, 0xAA	; 170
    96ee:	f1 f4       	brne	.+60     	; 0x972c <check_fs+0x6a>
    96f0:	8d a9       	ldd	r24, Y+53	; 0x35
    96f2:	8b 3e       	cpi	r24, 0xEB	; 235
    96f4:	19 f0       	breq	.+6      	; 0x96fc <check_fs+0x3a>
    96f6:	88 5e       	subi	r24, 0xE8	; 232
    96f8:	82 30       	cpi	r24, 0x02	; 2
    96fa:	f0 f4       	brcc	.+60     	; 0x9738 <check_fs+0x76>
    96fc:	43 e0       	ldi	r20, 0x03	; 3
    96fe:	50 e0       	ldi	r21, 0x00	; 0
    9700:	68 e9       	ldi	r22, 0x98	; 152
    9702:	78 e0       	ldi	r23, 0x08	; 8
    9704:	ce 01       	movw	r24, r28
    9706:	85 59       	subi	r24, 0x95	; 149
    9708:	9f 4f       	sbci	r25, 0xFF	; 255
    970a:	e9 da       	rcall	.-2606   	; 0x8cde <mem_cmp>
    970c:	89 2b       	or	r24, r25
    970e:	89 f0       	breq	.+34     	; 0x9732 <check_fs+0x70>
    9710:	45 e0       	ldi	r20, 0x05	; 5
    9712:	50 e0       	ldi	r21, 0x00	; 0
    9714:	63 ef       	ldi	r22, 0xF3	; 243
    9716:	73 e0       	ldi	r23, 0x03	; 3
    9718:	ce 01       	movw	r24, r28
    971a:	89 57       	subi	r24, 0x79	; 121
    971c:	9f 4f       	sbci	r25, 0xFF	; 255
    971e:	df da       	rcall	.-2626   	; 0x8cde <mem_cmp>
    9720:	89 2b       	or	r24, r25
    9722:	51 f4       	brne	.+20     	; 0x9738 <check_fs+0x76>
    9724:	06 c0       	rjmp	.+12     	; 0x9732 <check_fs+0x70>
    9726:	84 e0       	ldi	r24, 0x04	; 4
    9728:	90 e0       	ldi	r25, 0x00	; 0
    972a:	08 c0       	rjmp	.+16     	; 0x973c <check_fs+0x7a>
    972c:	83 e0       	ldi	r24, 0x03	; 3
    972e:	90 e0       	ldi	r25, 0x00	; 0
    9730:	05 c0       	rjmp	.+10     	; 0x973c <check_fs+0x7a>
    9732:	80 e0       	ldi	r24, 0x00	; 0
    9734:	90 e0       	ldi	r25, 0x00	; 0
    9736:	02 c0       	rjmp	.+4      	; 0x973c <check_fs+0x7a>
    9738:	82 e0       	ldi	r24, 0x02	; 2
    973a:	90 e0       	ldi	r25, 0x00	; 0
    973c:	df 91       	pop	r29
    973e:	cf 91       	pop	r28
    9740:	08 95       	ret

00009742 <mount_volume>:
    9742:	a0 e2       	ldi	r26, 0x20	; 32
    9744:	b0 e0       	ldi	r27, 0x00	; 0
    9746:	e7 ea       	ldi	r30, 0xA7	; 167
    9748:	fb e4       	ldi	r31, 0x4B	; 75
    974a:	0c 94 e0 df 	jmp	0x1bfc0	; 0x1bfc0 <__prologue_saves__+0x4>
    974e:	5b 01       	movw	r10, r22
    9750:	f4 2e       	mov	r15, r20
    9752:	db 01       	movw	r26, r22
    9754:	1d 92       	st	X+, r1
    9756:	1c 92       	st	X, r1
    9758:	ca db       	rcall	.-2156   	; 0x8eee <get_ldnumber>
    975a:	6c 01       	movw	r12, r24
    975c:	97 fd       	sbrc	r25, 7
    975e:	39 c2       	rjmp	.+1138   	; 0x9bd2 <mount_volume+0x490>
    9760:	fc 01       	movw	r30, r24
    9762:	ee 0f       	add	r30, r30
    9764:	ff 1f       	adc	r31, r31
    9766:	e3 51       	subi	r30, 0x13	; 19
    9768:	f8 4e       	sbci	r31, 0xE8	; 232
    976a:	00 81       	ld	r16, Z
    976c:	11 81       	ldd	r17, Z+1	; 0x01
    976e:	01 15       	cp	r16, r1
    9770:	11 05       	cpc	r17, r1
    9772:	09 f4       	brne	.+2      	; 0x9776 <mount_volume+0x34>
    9774:	31 c2       	rjmp	.+1122   	; 0x9bd8 <mount_volume+0x496>
    9776:	f5 01       	movw	r30, r10
    9778:	11 83       	std	Z+1, r17	; 0x01
    977a:	00 83       	st	Z, r16
    977c:	ff 2d       	mov	r31, r15
    977e:	fe 7f       	andi	r31, 0xFE	; 254
    9780:	ff 2e       	mov	r15, r31
    9782:	d8 01       	movw	r26, r16
    9784:	8c 91       	ld	r24, X
    9786:	88 23       	and	r24, r24
    9788:	71 f0       	breq	.+28     	; 0x97a6 <mount_volume+0x64>
    978a:	f8 01       	movw	r30, r16
    978c:	81 81       	ldd	r24, Z+1	; 0x01
    978e:	0e 94 63 69 	call	0xd2c6	; 0xd2c6 <disk_status>
    9792:	80 fd       	sbrc	r24, 0
    9794:	08 c0       	rjmp	.+16     	; 0x97a6 <mount_volume+0x64>
    9796:	ff 20       	and	r15, r15
    9798:	09 f4       	brne	.+2      	; 0x979c <mount_volume+0x5a>
    979a:	21 c2       	rjmp	.+1090   	; 0x9bde <mount_volume+0x49c>
    979c:	82 ff       	sbrs	r24, 2
    979e:	1f c2       	rjmp	.+1086   	; 0x9bde <mount_volume+0x49c>
    97a0:	8a e0       	ldi	r24, 0x0A	; 10
    97a2:	90 e0       	ldi	r25, 0x00	; 0
    97a4:	24 c2       	rjmp	.+1096   	; 0x9bee <mount_volume+0x4ac>
    97a6:	d8 01       	movw	r26, r16
    97a8:	1c 92       	st	X, r1
    97aa:	f8 01       	movw	r30, r16
    97ac:	c1 82       	std	Z+1, r12	; 0x01
    97ae:	8c 2d       	mov	r24, r12
    97b0:	0e 94 69 69 	call	0xd2d2	; 0xd2d2 <disk_initialize>
    97b4:	80 fd       	sbrc	r24, 0
    97b6:	16 c2       	rjmp	.+1068   	; 0x9be4 <mount_volume+0x4a2>
    97b8:	ff 20       	and	r15, r15
    97ba:	11 f0       	breq	.+4      	; 0x97c0 <mount_volume+0x7e>
    97bc:	82 fd       	sbrc	r24, 2
    97be:	f0 cf       	rjmp	.-32     	; 0x97a0 <mount_volume+0x5e>
    97c0:	40 e0       	ldi	r20, 0x00	; 0
    97c2:	50 e0       	ldi	r21, 0x00	; 0
    97c4:	ba 01       	movw	r22, r20
    97c6:	c8 01       	movw	r24, r16
    97c8:	7c df       	rcall	.-264    	; 0x96c2 <check_fs>
    97ca:	82 30       	cpi	r24, 0x02	; 2
    97cc:	91 05       	cpc	r25, r1
    97ce:	b9 f5       	brne	.+110    	; 0x983e <mount_volume+0xfc>
    97d0:	68 01       	movw	r12, r16
    97d2:	f5 e0       	ldi	r31, 0x05	; 5
    97d4:	cf 1a       	sub	r12, r31
    97d6:	fe ef       	ldi	r31, 0xFE	; 254
    97d8:	df 0a       	sbc	r13, r31
    97da:	9e 01       	movw	r18, r28
    97dc:	2f 5f       	subi	r18, 0xFF	; 255
    97de:	3f 4f       	sbci	r19, 0xFF	; 255
    97e0:	79 01       	movw	r14, r18
    97e2:	48 01       	movw	r8, r16
    97e4:	35 ec       	ldi	r19, 0xC5	; 197
    97e6:	83 1a       	sub	r8, r19
    97e8:	3d ef       	ldi	r19, 0xFD	; 253
    97ea:	93 0a       	sbc	r9, r19
    97ec:	57 01       	movw	r10, r14
    97ee:	c6 01       	movw	r24, r12
    97f0:	52 da       	rcall	.-2908   	; 0x8c96 <ld_dword>
    97f2:	d5 01       	movw	r26, r10
    97f4:	6d 93       	st	X+, r22
    97f6:	7d 93       	st	X+, r23
    97f8:	8d 93       	st	X+, r24
    97fa:	9d 93       	st	X+, r25
    97fc:	5d 01       	movw	r10, r26
    97fe:	b0 e1       	ldi	r27, 0x10	; 16
    9800:	cb 0e       	add	r12, r27
    9802:	d1 1c       	adc	r13, r1
    9804:	c8 14       	cp	r12, r8
    9806:	d9 04       	cpc	r13, r9
    9808:	91 f7       	brne	.-28     	; 0x97ee <mount_volume+0xac>
    980a:	6e 01       	movw	r12, r28
    980c:	e1 e1       	ldi	r30, 0x11	; 17
    980e:	ce 0e       	add	r12, r30
    9810:	d1 1c       	adc	r13, r1
    9812:	d7 01       	movw	r26, r14
    9814:	4d 91       	ld	r20, X+
    9816:	5d 91       	ld	r21, X+
    9818:	6d 91       	ld	r22, X+
    981a:	7d 91       	ld	r23, X+
    981c:	7d 01       	movw	r14, r26
    981e:	41 15       	cp	r20, r1
    9820:	51 05       	cpc	r21, r1
    9822:	61 05       	cpc	r22, r1
    9824:	71 05       	cpc	r23, r1
    9826:	31 f0       	breq	.+12     	; 0x9834 <mount_volume+0xf2>
    9828:	c8 01       	movw	r24, r16
    982a:	4b df       	rcall	.-362    	; 0x96c2 <check_fs>
    982c:	82 30       	cpi	r24, 0x02	; 2
    982e:	91 05       	cpc	r25, r1
    9830:	18 f4       	brcc	.+6      	; 0x9838 <mount_volume+0xf6>
    9832:	05 c0       	rjmp	.+10     	; 0x983e <mount_volume+0xfc>
    9834:	83 e0       	ldi	r24, 0x03	; 3
    9836:	90 e0       	ldi	r25, 0x00	; 0
    9838:	ce 14       	cp	r12, r14
    983a:	df 04       	cpc	r13, r15
    983c:	51 f7       	brne	.-44     	; 0x9812 <mount_volume+0xd0>
    983e:	84 30       	cpi	r24, 0x04	; 4
    9840:	91 05       	cpc	r25, r1
    9842:	09 f4       	brne	.+2      	; 0x9846 <mount_volume+0x104>
    9844:	d2 c1       	rjmp	.+932    	; 0x9bea <mount_volume+0x4a8>
    9846:	02 97       	sbiw	r24, 0x02	; 2
    9848:	18 f0       	brcs	.+6      	; 0x9850 <mount_volume+0x10e>
    984a:	8d e0       	ldi	r24, 0x0D	; 13
    984c:	90 e0       	ldi	r25, 0x00	; 0
    984e:	cf c1       	rjmp	.+926    	; 0x9bee <mount_volume+0x4ac>
    9850:	f8 01       	movw	r30, r16
    9852:	e0 5c       	subi	r30, 0xC0	; 192
    9854:	ff 4f       	sbci	r31, 0xFF	; 255
    9856:	80 81       	ld	r24, Z
    9858:	91 81       	ldd	r25, Z+1	; 0x01
    985a:	81 15       	cp	r24, r1
    985c:	92 40       	sbci	r25, 0x02	; 2
    985e:	a9 f7       	brne	.-22     	; 0x984a <mount_volume+0x108>
    9860:	3b 96       	adiw	r30, 0x0b	; 11
    9862:	40 80       	ld	r4, Z
    9864:	51 80       	ldd	r5, Z+1	; 0x01
    9866:	41 14       	cp	r4, r1
    9868:	51 04       	cpc	r5, r1
    986a:	19 f0       	breq	.+6      	; 0x9872 <mount_volume+0x130>
    986c:	61 2c       	mov	r6, r1
    986e:	71 2c       	mov	r7, r1
    9870:	06 c0       	rjmp	.+12     	; 0x987e <mount_volume+0x13c>
    9872:	c8 01       	movw	r24, r16
    9874:	87 5a       	subi	r24, 0xA7	; 167
    9876:	9f 4f       	sbci	r25, 0xFF	; 255
    9878:	0e da       	rcall	.-3044   	; 0x8c96 <ld_dword>
    987a:	2b 01       	movw	r4, r22
    987c:	3c 01       	movw	r6, r24
    987e:	f8 01       	movw	r30, r16
    9880:	21 a9       	ldd	r18, Z+49	; 0x31
    9882:	32 a9       	ldd	r19, Z+50	; 0x32
    9884:	43 a9       	ldd	r20, Z+51	; 0x33
    9886:	54 a9       	ldd	r21, Z+52	; 0x34
    9888:	29 8b       	std	Y+17, r18	; 0x11
    988a:	3a 8b       	std	Y+18, r19	; 0x12
    988c:	4b 8b       	std	Y+19, r20	; 0x13
    988e:	5c 8b       	std	Y+20, r21	; 0x14
    9890:	45 8e       	std	Z+29, r4	; 0x1d
    9892:	56 8e       	std	Z+30, r5	; 0x1e
    9894:	67 8e       	std	Z+31, r6	; 0x1f
    9896:	70 a2       	std	Z+32, r7	; 0x20
    9898:	eb 5b       	subi	r30, 0xBB	; 187
    989a:	ff 4f       	sbci	r31, 0xFF	; 255
    989c:	a0 80       	ld	r10, Z
    989e:	f8 01       	movw	r30, r16
    98a0:	a2 82       	std	Z+2, r10	; 0x02
    98a2:	8f ef       	ldi	r24, 0xFF	; 255
    98a4:	8a 0d       	add	r24, r10
    98a6:	82 30       	cpi	r24, 0x02	; 2
    98a8:	80 f6       	brcc	.-96     	; 0x984a <mount_volume+0x108>
    98aa:	ee 5b       	subi	r30, 0xBE	; 190
    98ac:	ff 4f       	sbci	r31, 0xFF	; 255
    98ae:	b0 80       	ld	r11, Z
    98b0:	8b 2d       	mov	r24, r11
    98b2:	90 e0       	ldi	r25, 0x00	; 0
    98b4:	f8 01       	movw	r30, r16
    98b6:	92 87       	std	Z+10, r25	; 0x0a
    98b8:	81 87       	std	Z+9, r24	; 0x09
    98ba:	00 97       	sbiw	r24, 0x00	; 0
    98bc:	31 f2       	breq	.-116    	; 0x984a <mount_volume+0x108>
    98be:	9c 01       	movw	r18, r24
    98c0:	21 50       	subi	r18, 0x01	; 1
    98c2:	31 09       	sbc	r19, r1
    98c4:	82 23       	and	r24, r18
    98c6:	93 23       	and	r25, r19
    98c8:	89 2b       	or	r24, r25
    98ca:	09 f0       	breq	.+2      	; 0x98ce <mount_volume+0x18c>
    98cc:	be cf       	rjmp	.-132    	; 0x984a <mount_volume+0x108>
    98ce:	ea 5b       	subi	r30, 0xBA	; 186
    98d0:	ff 4f       	sbci	r31, 0xFF	; 255
    98d2:	80 80       	ld	r8, Z
    98d4:	91 80       	ldd	r9, Z+1	; 0x01
    98d6:	f8 01       	movw	r30, r16
    98d8:	90 86       	std	Z+8, r9	; 0x08
    98da:	87 82       	std	Z+7, r8	; 0x07
    98dc:	c4 01       	movw	r24, r8
    98de:	8f 70       	andi	r24, 0x0F	; 15
    98e0:	99 27       	eor	r25, r25
    98e2:	89 2b       	or	r24, r25
    98e4:	09 f0       	breq	.+2      	; 0x98e8 <mount_volume+0x1a6>
    98e6:	b1 cf       	rjmp	.-158    	; 0x984a <mount_volume+0x108>
    98e8:	e8 5b       	subi	r30, 0xB8	; 184
    98ea:	ff 4f       	sbci	r31, 0xFF	; 255
    98ec:	80 81       	ld	r24, Z
    98ee:	91 81       	ldd	r25, Z+1	; 0x01
    98f0:	6c 01       	movw	r12, r24
    98f2:	e1 2c       	mov	r14, r1
    98f4:	f1 2c       	mov	r15, r1
    98f6:	89 2b       	or	r24, r25
    98f8:	31 f4       	brne	.+12     	; 0x9906 <mount_volume+0x1c4>
    98fa:	c8 01       	movw	r24, r16
    98fc:	8b 5a       	subi	r24, 0xAB	; 171
    98fe:	9f 4f       	sbci	r25, 0xFF	; 255
    9900:	ca d9       	rcall	.-3180   	; 0x8c96 <ld_dword>
    9902:	6b 01       	movw	r12, r22
    9904:	7c 01       	movw	r14, r24
    9906:	f8 01       	movw	r30, r16
    9908:	ed 5b       	subi	r30, 0xBD	; 189
    990a:	ff 4f       	sbci	r31, 0xFF	; 255
    990c:	01 90       	ld	r0, Z+
    990e:	f0 81       	ld	r31, Z
    9910:	e0 2d       	mov	r30, r0
    9912:	30 97       	sbiw	r30, 0x00	; 0
    9914:	09 f4       	brne	.+2      	; 0x9918 <mount_volume+0x1d6>
    9916:	99 cf       	rjmp	.-206    	; 0x984a <mount_volume+0x108>
    9918:	aa 2d       	mov	r26, r10
    991a:	b0 e0       	ldi	r27, 0x00	; 0
    991c:	a3 01       	movw	r20, r6
    991e:	92 01       	movw	r18, r4
    9920:	0e 94 be df 	call	0x1bf7c	; 0x1bf7c <__muluhisi3>
    9924:	69 8f       	std	Y+25, r22	; 0x19
    9926:	7a 8f       	std	Y+26, r23	; 0x1a
    9928:	8b 8f       	std	Y+27, r24	; 0x1b
    992a:	9c 8f       	std	Y+28, r25	; 0x1c
    992c:	9f 01       	movw	r18, r30
    992e:	40 e0       	ldi	r20, 0x00	; 0
    9930:	50 e0       	ldi	r21, 0x00	; 0
    9932:	2d 8f       	std	Y+29, r18	; 0x1d
    9934:	3e 8f       	std	Y+30, r19	; 0x1e
    9936:	4f 8f       	std	Y+31, r20	; 0x1f
    9938:	58 a3       	std	Y+32, r21	; 0x20
    993a:	c4 01       	movw	r24, r8
    993c:	f4 e0       	ldi	r31, 0x04	; 4
    993e:	96 95       	lsr	r25
    9940:	87 95       	ror	r24
    9942:	fa 95       	dec	r31
    9944:	e1 f7       	brne	.-8      	; 0x993e <mount_volume+0x1fc>
    9946:	28 0f       	add	r18, r24
    9948:	39 1f       	adc	r19, r25
    994a:	41 1d       	adc	r20, r1
    994c:	51 1d       	adc	r21, r1
    994e:	da 01       	movw	r26, r20
    9950:	c9 01       	movw	r24, r18
    9952:	29 8d       	ldd	r18, Y+25	; 0x19
    9954:	3a 8d       	ldd	r19, Y+26	; 0x1a
    9956:	4b 8d       	ldd	r20, Y+27	; 0x1b
    9958:	5c 8d       	ldd	r21, Y+28	; 0x1c
    995a:	28 0f       	add	r18, r24
    995c:	39 1f       	adc	r19, r25
    995e:	4a 1f       	adc	r20, r26
    9960:	5b 1f       	adc	r21, r27
    9962:	2d 8b       	std	Y+21, r18	; 0x15
    9964:	3e 8b       	std	Y+22, r19	; 0x16
    9966:	4f 8b       	std	Y+23, r20	; 0x17
    9968:	58 8f       	std	Y+24, r21	; 0x18
    996a:	c2 16       	cp	r12, r18
    996c:	d3 06       	cpc	r13, r19
    996e:	e4 06       	cpc	r14, r20
    9970:	f5 06       	cpc	r15, r21
    9972:	08 f4       	brcc	.+2      	; 0x9976 <mount_volume+0x234>
    9974:	6a cf       	rjmp	.-300    	; 0x984a <mount_volume+0x108>
    9976:	c7 01       	movw	r24, r14
    9978:	b6 01       	movw	r22, r12
    997a:	62 1b       	sub	r22, r18
    997c:	73 0b       	sbc	r23, r19
    997e:	84 0b       	sbc	r24, r20
    9980:	95 0b       	sbc	r25, r21
    9982:	2b 2d       	mov	r18, r11
    9984:	30 e0       	ldi	r19, 0x00	; 0
    9986:	40 e0       	ldi	r20, 0x00	; 0
    9988:	50 e0       	ldi	r21, 0x00	; 0
    998a:	0e 94 71 df 	call	0x1bee2	; 0x1bee2 <__udivmodsi4>
    998e:	da 01       	movw	r26, r20
    9990:	c9 01       	movw	r24, r18
    9992:	01 97       	sbiw	r24, 0x01	; 1
    9994:	a1 09       	sbc	r26, r1
    9996:	b1 09       	sbc	r27, r1
    9998:	85 3f       	cpi	r24, 0xF5	; 245
    999a:	9f 4f       	sbci	r25, 0xFF	; 255
    999c:	af 4f       	sbci	r26, 0xFF	; 255
    999e:	bf 40       	sbci	r27, 0x0F	; 15
    99a0:	08 f0       	brcs	.+2      	; 0x99a4 <mount_volume+0x262>
    99a2:	53 cf       	rjmp	.-346    	; 0x984a <mount_volume+0x108>
    99a4:	26 3f       	cpi	r18, 0xF6	; 246
    99a6:	8f ef       	ldi	r24, 0xFF	; 255
    99a8:	38 07       	cpc	r19, r24
    99aa:	41 05       	cpc	r20, r1
    99ac:	51 05       	cpc	r21, r1
    99ae:	50 f4       	brcc	.+20     	; 0x99c4 <mount_volume+0x282>
    99b0:	26 3f       	cpi	r18, 0xF6	; 246
    99b2:	9f e0       	ldi	r25, 0x0F	; 15
    99b4:	39 07       	cpc	r19, r25
    99b6:	41 05       	cpc	r20, r1
    99b8:	51 05       	cpc	r21, r1
    99ba:	40 f4       	brcc	.+16     	; 0x99cc <mount_volume+0x28a>
    99bc:	aa 24       	eor	r10, r10
    99be:	a3 94       	inc	r10
    99c0:	b1 2c       	mov	r11, r1
    99c2:	07 c0       	rjmp	.+14     	; 0x99d2 <mount_volume+0x290>
    99c4:	73 e0       	ldi	r23, 0x03	; 3
    99c6:	a7 2e       	mov	r10, r23
    99c8:	b1 2c       	mov	r11, r1
    99ca:	03 c0       	rjmp	.+6      	; 0x99d2 <mount_volume+0x290>
    99cc:	62 e0       	ldi	r22, 0x02	; 2
    99ce:	a6 2e       	mov	r10, r22
    99d0:	b1 2c       	mov	r11, r1
    99d2:	69 01       	movw	r12, r18
    99d4:	7a 01       	movw	r14, r20
    99d6:	a2 e0       	ldi	r26, 0x02	; 2
    99d8:	ca 0e       	add	r12, r26
    99da:	d1 1c       	adc	r13, r1
    99dc:	e1 1c       	adc	r14, r1
    99de:	f1 1c       	adc	r15, r1
    99e0:	f8 01       	movw	r30, r16
    99e2:	c1 8e       	std	Z+25, r12	; 0x19
    99e4:	d2 8e       	std	Z+26, r13	; 0x1a
    99e6:	e3 8e       	std	Z+27, r14	; 0x1b
    99e8:	f4 8e       	std	Z+28, r15	; 0x1c
    99ea:	29 89       	ldd	r18, Y+17	; 0x11
    99ec:	3a 89       	ldd	r19, Y+18	; 0x12
    99ee:	4b 89       	ldd	r20, Y+19	; 0x13
    99f0:	5c 89       	ldd	r21, Y+20	; 0x14
    99f2:	21 a3       	std	Z+33, r18	; 0x21
    99f4:	32 a3       	std	Z+34, r19	; 0x22
    99f6:	43 a3       	std	Z+35, r20	; 0x23
    99f8:	54 a3       	std	Z+36, r21	; 0x24
    99fa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    99fc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    99fe:	af 8d       	ldd	r26, Y+31	; 0x1f
    9a00:	b8 a1       	ldd	r27, Y+32	; 0x20
    9a02:	28 0f       	add	r18, r24
    9a04:	39 1f       	adc	r19, r25
    9a06:	4a 1f       	adc	r20, r26
    9a08:	5b 1f       	adc	r21, r27
    9a0a:	2d 8f       	std	Y+29, r18	; 0x1d
    9a0c:	3e 8f       	std	Y+30, r19	; 0x1e
    9a0e:	4f 8f       	std	Y+31, r20	; 0x1f
    9a10:	58 a3       	std	Y+32, r21	; 0x20
    9a12:	25 a3       	std	Z+37, r18	; 0x25
    9a14:	36 a3       	std	Z+38, r19	; 0x26
    9a16:	47 a3       	std	Z+39, r20	; 0x27
    9a18:	50 a7       	std	Z+40, r21	; 0x28
    9a1a:	49 89       	ldd	r20, Y+17	; 0x11
    9a1c:	5a 89       	ldd	r21, Y+18	; 0x12
    9a1e:	6b 89       	ldd	r22, Y+19	; 0x13
    9a20:	7c 89       	ldd	r23, Y+20	; 0x14
    9a22:	8d 89       	ldd	r24, Y+21	; 0x15
    9a24:	9e 89       	ldd	r25, Y+22	; 0x16
    9a26:	af 89       	ldd	r26, Y+23	; 0x17
    9a28:	b8 8d       	ldd	r27, Y+24	; 0x18
    9a2a:	48 0f       	add	r20, r24
    9a2c:	59 1f       	adc	r21, r25
    9a2e:	6a 1f       	adc	r22, r26
    9a30:	7b 1f       	adc	r23, r27
    9a32:	45 a7       	std	Z+45, r20	; 0x2d
    9a34:	56 a7       	std	Z+46, r21	; 0x2e
    9a36:	67 a7       	std	Z+47, r22	; 0x2f
    9a38:	70 ab       	std	Z+48, r23	; 0x30
    9a3a:	f3 e0       	ldi	r31, 0x03	; 3
    9a3c:	af 16       	cp	r10, r31
    9a3e:	b1 04       	cpc	r11, r1
    9a40:	e9 f4       	brne	.+58     	; 0x9a7c <mount_volume+0x33a>
    9a42:	f8 01       	movw	r30, r16
    9a44:	e1 5a       	subi	r30, 0xA1	; 161
    9a46:	ff 4f       	sbci	r31, 0xFF	; 255
    9a48:	80 81       	ld	r24, Z
    9a4a:	91 81       	ldd	r25, Z+1	; 0x01
    9a4c:	89 2b       	or	r24, r25
    9a4e:	09 f0       	breq	.+2      	; 0x9a52 <mount_volume+0x310>
    9a50:	fc ce       	rjmp	.-520    	; 0x984a <mount_volume+0x108>
    9a52:	81 14       	cp	r8, r1
    9a54:	91 04       	cpc	r9, r1
    9a56:	09 f0       	breq	.+2      	; 0x9a5a <mount_volume+0x318>
    9a58:	f8 ce       	rjmp	.-528    	; 0x984a <mount_volume+0x108>
    9a5a:	c8 01       	movw	r24, r16
    9a5c:	8f 59       	subi	r24, 0x9F	; 159
    9a5e:	9f 4f       	sbci	r25, 0xFF	; 255
    9a60:	1a d9       	rcall	.-3532   	; 0x8c96 <ld_dword>
    9a62:	f8 01       	movw	r30, r16
    9a64:	61 a7       	std	Z+41, r22	; 0x29
    9a66:	72 a7       	std	Z+42, r23	; 0x2a
    9a68:	83 a7       	std	Z+43, r24	; 0x2b
    9a6a:	94 a7       	std	Z+44, r25	; 0x2c
    9a6c:	42 e0       	ldi	r20, 0x02	; 2
    9a6e:	cc 0c       	add	r12, r12
    9a70:	dd 1c       	adc	r13, r13
    9a72:	ee 1c       	adc	r14, r14
    9a74:	ff 1c       	adc	r15, r15
    9a76:	4a 95       	dec	r20
    9a78:	d1 f7       	brne	.-12     	; 0x9a6e <mount_volume+0x32c>
    9a7a:	33 c0       	rjmp	.+102    	; 0x9ae2 <mount_volume+0x3a0>
    9a7c:	81 14       	cp	r8, r1
    9a7e:	91 04       	cpc	r9, r1
    9a80:	09 f4       	brne	.+2      	; 0x9a84 <mount_volume+0x342>
    9a82:	e3 ce       	rjmp	.-570    	; 0x984a <mount_volume+0x108>
    9a84:	8d 8d       	ldd	r24, Y+29	; 0x1d
    9a86:	9e 8d       	ldd	r25, Y+30	; 0x1e
    9a88:	af 8d       	ldd	r26, Y+31	; 0x1f
    9a8a:	b8 a1       	ldd	r27, Y+32	; 0x20
    9a8c:	29 8d       	ldd	r18, Y+25	; 0x19
    9a8e:	3a 8d       	ldd	r19, Y+26	; 0x1a
    9a90:	4b 8d       	ldd	r20, Y+27	; 0x1b
    9a92:	5c 8d       	ldd	r21, Y+28	; 0x1c
    9a94:	82 0f       	add	r24, r18
    9a96:	93 1f       	adc	r25, r19
    9a98:	a4 1f       	adc	r26, r20
    9a9a:	b5 1f       	adc	r27, r21
    9a9c:	f8 01       	movw	r30, r16
    9a9e:	81 a7       	std	Z+41, r24	; 0x29
    9aa0:	92 a7       	std	Z+42, r25	; 0x2a
    9aa2:	a3 a7       	std	Z+43, r26	; 0x2b
    9aa4:	b4 a7       	std	Z+44, r27	; 0x2c
    9aa6:	f2 e0       	ldi	r31, 0x02	; 2
    9aa8:	af 16       	cp	r10, r31
    9aaa:	b1 04       	cpc	r11, r1
    9aac:	29 f4       	brne	.+10     	; 0x9ab8 <mount_volume+0x376>
    9aae:	cc 0c       	add	r12, r12
    9ab0:	dd 1c       	adc	r13, r13
    9ab2:	ee 1c       	adc	r14, r14
    9ab4:	ff 1c       	adc	r15, r15
    9ab6:	15 c0       	rjmp	.+42     	; 0x9ae2 <mount_volume+0x3a0>
    9ab8:	a3 e0       	ldi	r26, 0x03	; 3
    9aba:	b0 e0       	ldi	r27, 0x00	; 0
    9abc:	a7 01       	movw	r20, r14
    9abe:	96 01       	movw	r18, r12
    9ac0:	0e 94 be df 	call	0x1bf7c	; 0x1bf7c <__muluhisi3>
    9ac4:	dc 01       	movw	r26, r24
    9ac6:	cb 01       	movw	r24, r22
    9ac8:	b6 95       	lsr	r27
    9aca:	a7 95       	ror	r26
    9acc:	97 95       	ror	r25
    9ace:	87 95       	ror	r24
    9ad0:	21 e0       	ldi	r18, 0x01	; 1
    9ad2:	c2 22       	and	r12, r18
    9ad4:	dd 24       	eor	r13, r13
    9ad6:	ee 24       	eor	r14, r14
    9ad8:	ff 24       	eor	r15, r15
    9ada:	c8 0e       	add	r12, r24
    9adc:	d9 1e       	adc	r13, r25
    9ade:	ea 1e       	adc	r14, r26
    9ae0:	fb 1e       	adc	r15, r27
    9ae2:	3f ef       	ldi	r19, 0xFF	; 255
    9ae4:	c3 0e       	add	r12, r19
    9ae6:	31 e0       	ldi	r19, 0x01	; 1
    9ae8:	d3 1e       	adc	r13, r19
    9aea:	e1 1c       	adc	r14, r1
    9aec:	f1 1c       	adc	r15, r1
    9aee:	89 e0       	ldi	r24, 0x09	; 9
    9af0:	f6 94       	lsr	r15
    9af2:	e7 94       	ror	r14
    9af4:	d7 94       	ror	r13
    9af6:	c7 94       	ror	r12
    9af8:	8a 95       	dec	r24
    9afa:	d1 f7       	brne	.-12     	; 0x9af0 <mount_volume+0x3ae>
    9afc:	4c 14       	cp	r4, r12
    9afe:	5d 04       	cpc	r5, r13
    9b00:	6e 04       	cpc	r6, r14
    9b02:	7f 04       	cpc	r7, r15
    9b04:	08 f4       	brcc	.+2      	; 0x9b08 <mount_volume+0x3c6>
    9b06:	a1 ce       	rjmp	.-702    	; 0x984a <mount_volume+0x108>
    9b08:	8f ef       	ldi	r24, 0xFF	; 255
    9b0a:	9f ef       	ldi	r25, 0xFF	; 255
    9b0c:	dc 01       	movw	r26, r24
    9b0e:	f8 01       	movw	r30, r16
    9b10:	81 8b       	std	Z+17, r24	; 0x11
    9b12:	92 8b       	std	Z+18, r25	; 0x12
    9b14:	a3 8b       	std	Z+19, r26	; 0x13
    9b16:	b4 8b       	std	Z+20, r27	; 0x14
    9b18:	85 87       	std	Z+13, r24	; 0x0d
    9b1a:	96 87       	std	Z+14, r25	; 0x0e
    9b1c:	a7 87       	std	Z+15, r26	; 0x0f
    9b1e:	b0 8b       	std	Z+16, r27	; 0x10
    9b20:	80 e8       	ldi	r24, 0x80	; 128
    9b22:	84 83       	std	Z+4, r24	; 0x04
    9b24:	f3 e0       	ldi	r31, 0x03	; 3
    9b26:	af 16       	cp	r10, r31
    9b28:	b1 04       	cpc	r11, r1
    9b2a:	09 f0       	breq	.+2      	; 0x9b2e <mount_volume+0x3ec>
    9b2c:	3f c0       	rjmp	.+126    	; 0x9bac <mount_volume+0x46a>
    9b2e:	f8 01       	movw	r30, r16
    9b30:	eb 59       	subi	r30, 0x9B	; 155
    9b32:	ff 4f       	sbci	r31, 0xFF	; 255
    9b34:	80 81       	ld	r24, Z
    9b36:	91 81       	ldd	r25, Z+1	; 0x01
    9b38:	01 97       	sbiw	r24, 0x01	; 1
    9b3a:	c1 f5       	brne	.+112    	; 0x9bac <mount_volume+0x46a>
    9b3c:	49 89       	ldd	r20, Y+17	; 0x11
    9b3e:	5a 89       	ldd	r21, Y+18	; 0x12
    9b40:	6b 89       	ldd	r22, Y+19	; 0x13
    9b42:	7c 89       	ldd	r23, Y+20	; 0x14
    9b44:	4f 5f       	subi	r20, 0xFF	; 255
    9b46:	5f 4f       	sbci	r21, 0xFF	; 255
    9b48:	6f 4f       	sbci	r22, 0xFF	; 255
    9b4a:	7f 4f       	sbci	r23, 0xFF	; 255
    9b4c:	c8 01       	movw	r24, r16
    9b4e:	7e dd       	rcall	.-1284   	; 0x964c <move_window>
    9b50:	89 2b       	or	r24, r25
    9b52:	61 f5       	brne	.+88     	; 0x9bac <mount_volume+0x46a>
    9b54:	f8 01       	movw	r30, r16
    9b56:	14 82       	std	Z+4, r1	; 0x04
    9b58:	ed 5c       	subi	r30, 0xCD	; 205
    9b5a:	fd 4f       	sbci	r31, 0xFD	; 253
    9b5c:	80 81       	ld	r24, Z
    9b5e:	91 81       	ldd	r25, Z+1	; 0x01
    9b60:	85 35       	cpi	r24, 0x55	; 85
    9b62:	9a 4a       	sbci	r25, 0xAA	; 170
    9b64:	19 f5       	brne	.+70     	; 0x9bac <mount_volume+0x46a>
    9b66:	c8 01       	movw	r24, r16
    9b68:	c5 96       	adiw	r24, 0x35	; 53
    9b6a:	95 d8       	rcall	.-3798   	; 0x8c96 <ld_dword>
    9b6c:	62 35       	cpi	r22, 0x52	; 82
    9b6e:	72 45       	sbci	r23, 0x52	; 82
    9b70:	81 46       	sbci	r24, 0x61	; 97
    9b72:	91 44       	sbci	r25, 0x41	; 65
    9b74:	d9 f4       	brne	.+54     	; 0x9bac <mount_volume+0x46a>
    9b76:	c8 01       	movw	r24, r16
    9b78:	87 5e       	subi	r24, 0xE7	; 231
    9b7a:	9d 4f       	sbci	r25, 0xFD	; 253
    9b7c:	8c d8       	rcall	.-3816   	; 0x8c96 <ld_dword>
    9b7e:	62 37       	cpi	r22, 0x72	; 114
    9b80:	72 47       	sbci	r23, 0x72	; 114
    9b82:	81 44       	sbci	r24, 0x41	; 65
    9b84:	91 46       	sbci	r25, 0x61	; 97
    9b86:	91 f4       	brne	.+36     	; 0x9bac <mount_volume+0x46a>
    9b88:	c8 01       	movw	r24, r16
    9b8a:	83 5e       	subi	r24, 0xE3	; 227
    9b8c:	9d 4f       	sbci	r25, 0xFD	; 253
    9b8e:	83 d8       	rcall	.-3834   	; 0x8c96 <ld_dword>
    9b90:	f8 01       	movw	r30, r16
    9b92:	61 8b       	std	Z+17, r22	; 0x11
    9b94:	72 8b       	std	Z+18, r23	; 0x12
    9b96:	83 8b       	std	Z+19, r24	; 0x13
    9b98:	94 8b       	std	Z+20, r25	; 0x14
    9b9a:	c8 01       	movw	r24, r16
    9b9c:	8f 5d       	subi	r24, 0xDF	; 223
    9b9e:	9d 4f       	sbci	r25, 0xFD	; 253
    9ba0:	7a d8       	rcall	.-3852   	; 0x8c96 <ld_dword>
    9ba2:	f8 01       	movw	r30, r16
    9ba4:	65 87       	std	Z+13, r22	; 0x0d
    9ba6:	76 87       	std	Z+14, r23	; 0x0e
    9ba8:	87 87       	std	Z+15, r24	; 0x0f
    9baa:	90 8b       	std	Z+16, r25	; 0x10
    9bac:	d8 01       	movw	r26, r16
    9bae:	ac 92       	st	X, r10
    9bb0:	80 91 eb 17 	lds	r24, 0x17EB	; 0x8017eb <Fsid>
    9bb4:	90 91 ec 17 	lds	r25, 0x17EC	; 0x8017ec <Fsid+0x1>
    9bb8:	01 96       	adiw	r24, 0x01	; 1
    9bba:	90 93 ec 17 	sts	0x17EC, r25	; 0x8017ec <Fsid+0x1>
    9bbe:	80 93 eb 17 	sts	0x17EB, r24	; 0x8017eb <Fsid>
    9bc2:	f8 01       	movw	r30, r16
    9bc4:	96 83       	std	Z+6, r25	; 0x06
    9bc6:	85 83       	std	Z+5, r24	; 0x05
    9bc8:	15 8a       	std	Z+21, r1	; 0x15
    9bca:	16 8a       	std	Z+22, r1	; 0x16
    9bcc:	17 8a       	std	Z+23, r1	; 0x17
    9bce:	10 8e       	std	Z+24, r1	; 0x18
    9bd0:	06 c0       	rjmp	.+12     	; 0x9bde <mount_volume+0x49c>
    9bd2:	8b e0       	ldi	r24, 0x0B	; 11
    9bd4:	90 e0       	ldi	r25, 0x00	; 0
    9bd6:	0b c0       	rjmp	.+22     	; 0x9bee <mount_volume+0x4ac>
    9bd8:	8c e0       	ldi	r24, 0x0C	; 12
    9bda:	90 e0       	ldi	r25, 0x00	; 0
    9bdc:	08 c0       	rjmp	.+16     	; 0x9bee <mount_volume+0x4ac>
    9bde:	80 e0       	ldi	r24, 0x00	; 0
    9be0:	90 e0       	ldi	r25, 0x00	; 0
    9be2:	05 c0       	rjmp	.+10     	; 0x9bee <mount_volume+0x4ac>
    9be4:	83 e0       	ldi	r24, 0x03	; 3
    9be6:	90 e0       	ldi	r25, 0x00	; 0
    9be8:	02 c0       	rjmp	.+4      	; 0x9bee <mount_volume+0x4ac>
    9bea:	81 e0       	ldi	r24, 0x01	; 1
    9bec:	90 e0       	ldi	r25, 0x00	; 0
    9bee:	a0 96       	adiw	r28, 0x20	; 32
    9bf0:	e0 e1       	ldi	r30, 0x10	; 16
    9bf2:	0c 94 fc df 	jmp	0x1bff8	; 0x1bff8 <__epilogue_restores__+0x4>

00009bf6 <put_fat>:
    9bf6:	a6 e0       	ldi	r26, 0x06	; 6
    9bf8:	b0 e0       	ldi	r27, 0x00	; 0
    9bfa:	e1 e0       	ldi	r30, 0x01	; 1
    9bfc:	fe e4       	ldi	r31, 0x4E	; 78
    9bfe:	0c 94 de df 	jmp	0x1bfbc	; 0x1bfbc <__prologue_saves__>
    9c02:	42 30       	cpi	r20, 0x02	; 2
    9c04:	51 05       	cpc	r21, r1
    9c06:	61 05       	cpc	r22, r1
    9c08:	71 05       	cpc	r23, r1
    9c0a:	08 f4       	brcc	.+2      	; 0x9c0e <put_fat+0x18>
    9c0c:	e7 c0       	rjmp	.+462    	; 0x9ddc <put_fat+0x1e6>
    9c0e:	fc 01       	movw	r30, r24
    9c10:	c1 8c       	ldd	r12, Z+25	; 0x19
    9c12:	d2 8c       	ldd	r13, Z+26	; 0x1a
    9c14:	e3 8c       	ldd	r14, Z+27	; 0x1b
    9c16:	f4 8c       	ldd	r15, Z+28	; 0x1c
    9c18:	4c 15       	cp	r20, r12
    9c1a:	5d 05       	cpc	r21, r13
    9c1c:	6e 05       	cpc	r22, r14
    9c1e:	7f 05       	cpc	r23, r15
    9c20:	08 f0       	brcs	.+2      	; 0x9c24 <put_fat+0x2e>
    9c22:	dc c0       	rjmp	.+440    	; 0x9ddc <put_fat+0x1e6>
    9c24:	28 01       	movw	r4, r16
    9c26:	39 01       	movw	r6, r18
    9c28:	6a 01       	movw	r12, r20
    9c2a:	7b 01       	movw	r14, r22
    9c2c:	9e 83       	std	Y+6, r25	; 0x06
    9c2e:	8d 83       	std	Y+5, r24	; 0x05
    9c30:	80 81       	ld	r24, Z
    9c32:	82 30       	cpi	r24, 0x02	; 2
    9c34:	09 f4       	brne	.+2      	; 0x9c38 <put_fat+0x42>
    9c36:	73 c0       	rjmp	.+230    	; 0x9d1e <put_fat+0x128>
    9c38:	83 30       	cpi	r24, 0x03	; 3
    9c3a:	09 f4       	brne	.+2      	; 0x9c3e <put_fat+0x48>
    9c3c:	92 c0       	rjmp	.+292    	; 0x9d62 <put_fat+0x16c>
    9c3e:	81 30       	cpi	r24, 0x01	; 1
    9c40:	09 f0       	breq	.+2      	; 0x9c44 <put_fat+0x4e>
    9c42:	cc c0       	rjmp	.+408    	; 0x9ddc <put_fat+0x1e6>
    9c44:	4a 01       	movw	r8, r20
    9c46:	96 94       	lsr	r9
    9c48:	87 94       	ror	r8
    9c4a:	84 0e       	add	r8, r20
    9c4c:	95 1e       	adc	r9, r21
    9c4e:	c4 01       	movw	r24, r8
    9c50:	89 2f       	mov	r24, r25
    9c52:	99 27       	eor	r25, r25
    9c54:	86 95       	lsr	r24
    9c56:	45 a1       	ldd	r20, Z+37	; 0x25
    9c58:	56 a1       	ldd	r21, Z+38	; 0x26
    9c5a:	67 a1       	ldd	r22, Z+39	; 0x27
    9c5c:	70 a5       	ldd	r23, Z+40	; 0x28
    9c5e:	48 0f       	add	r20, r24
    9c60:	59 1f       	adc	r21, r25
    9c62:	61 1d       	adc	r22, r1
    9c64:	71 1d       	adc	r23, r1
    9c66:	cf 01       	movw	r24, r30
    9c68:	f1 dc       	rcall	.-1566   	; 0x964c <move_window>
    9c6a:	5c 01       	movw	r10, r24
    9c6c:	89 2b       	or	r24, r25
    9c6e:	09 f0       	breq	.+2      	; 0x9c72 <put_fat+0x7c>
    9c70:	b8 c0       	rjmp	.+368    	; 0x9de2 <put_fat+0x1ec>
    9c72:	2d 80       	ldd	r2, Y+5	; 0x05
    9c74:	3e 80       	ldd	r3, Y+6	; 0x06
    9c76:	f5 e3       	ldi	r31, 0x35	; 53
    9c78:	2f 0e       	add	r2, r31
    9c7a:	31 1c       	adc	r3, r1
    9c7c:	84 01       	movw	r16, r8
    9c7e:	0f 5f       	subi	r16, 0xFF	; 255
    9c80:	1f 4f       	sbci	r17, 0xFF	; 255
    9c82:	21 e0       	ldi	r18, 0x01	; 1
    9c84:	92 22       	and	r9, r18
    9c86:	f1 01       	movw	r30, r2
    9c88:	e8 0d       	add	r30, r8
    9c8a:	f9 1d       	adc	r31, r9
    9c8c:	d7 01       	movw	r26, r14
    9c8e:	c6 01       	movw	r24, r12
    9c90:	81 70       	andi	r24, 0x01	; 1
    9c92:	99 27       	eor	r25, r25
    9c94:	aa 27       	eor	r26, r26
    9c96:	bb 27       	eor	r27, r27
    9c98:	89 83       	std	Y+1, r24	; 0x01
    9c9a:	9a 83       	std	Y+2, r25	; 0x02
    9c9c:	ab 83       	std	Y+3, r26	; 0x03
    9c9e:	bc 83       	std	Y+4, r27	; 0x04
    9ca0:	c0 fe       	sbrs	r12, 0
    9ca2:	09 c0       	rjmp	.+18     	; 0x9cb6 <put_fat+0xc0>
    9ca4:	80 81       	ld	r24, Z
    9ca6:	28 2f       	mov	r18, r24
    9ca8:	2f 70       	andi	r18, 0x0F	; 15
    9caa:	a0 e1       	ldi	r26, 0x10	; 16
    9cac:	4a 9e       	mul	r4, r26
    9cae:	c0 01       	movw	r24, r0
    9cb0:	11 24       	eor	r1, r1
    9cb2:	82 2b       	or	r24, r18
    9cb4:	01 c0       	rjmp	.+2      	; 0x9cb8 <put_fat+0xc2>
    9cb6:	84 2d       	mov	r24, r4
    9cb8:	80 83       	st	Z, r24
    9cba:	81 e0       	ldi	r24, 0x01	; 1
    9cbc:	ed 81       	ldd	r30, Y+5	; 0x05
    9cbe:	fe 81       	ldd	r31, Y+6	; 0x06
    9cc0:	83 83       	std	Z+3, r24	; 0x03
    9cc2:	45 a1       	ldd	r20, Z+37	; 0x25
    9cc4:	56 a1       	ldd	r21, Z+38	; 0x26
    9cc6:	67 a1       	ldd	r22, Z+39	; 0x27
    9cc8:	70 a5       	ldd	r23, Z+40	; 0x28
    9cca:	c8 01       	movw	r24, r16
    9ccc:	89 2f       	mov	r24, r25
    9cce:	99 27       	eor	r25, r25
    9cd0:	86 95       	lsr	r24
    9cd2:	48 0f       	add	r20, r24
    9cd4:	59 1f       	adc	r21, r25
    9cd6:	61 1d       	adc	r22, r1
    9cd8:	71 1d       	adc	r23, r1
    9cda:	cf 01       	movw	r24, r30
    9cdc:	b7 dc       	rcall	.-1682   	; 0x964c <move_window>
    9cde:	5c 01       	movw	r10, r24
    9ce0:	89 2b       	or	r24, r25
    9ce2:	09 f0       	breq	.+2      	; 0x9ce6 <put_fat+0xf0>
    9ce4:	7e c0       	rjmp	.+252    	; 0x9de2 <put_fat+0x1ec>
    9ce6:	11 70       	andi	r17, 0x01	; 1
    9ce8:	f1 01       	movw	r30, r2
    9cea:	e0 0f       	add	r30, r16
    9cec:	f1 1f       	adc	r31, r17
    9cee:	89 81       	ldd	r24, Y+1	; 0x01
    9cf0:	9a 81       	ldd	r25, Y+2	; 0x02
    9cf2:	ab 81       	ldd	r26, Y+3	; 0x03
    9cf4:	bc 81       	ldd	r27, Y+4	; 0x04
    9cf6:	89 2b       	or	r24, r25
    9cf8:	8a 2b       	or	r24, r26
    9cfa:	8b 2b       	or	r24, r27
    9cfc:	41 f0       	breq	.+16     	; 0x9d0e <put_fat+0x118>
    9cfe:	54 e0       	ldi	r21, 0x04	; 4
    9d00:	76 94       	lsr	r7
    9d02:	67 94       	ror	r6
    9d04:	57 94       	ror	r5
    9d06:	47 94       	ror	r4
    9d08:	5a 95       	dec	r21
    9d0a:	d1 f7       	brne	.-12     	; 0x9d00 <put_fat+0x10a>
    9d0c:	06 c0       	rjmp	.+12     	; 0x9d1a <put_fat+0x124>
    9d0e:	00 81       	ld	r16, Z
    9d10:	00 7f       	andi	r16, 0xF0	; 240
    9d12:	85 2d       	mov	r24, r5
    9d14:	8f 70       	andi	r24, 0x0F	; 15
    9d16:	40 2e       	mov	r4, r16
    9d18:	48 2a       	or	r4, r24
    9d1a:	40 82       	st	Z, r4
    9d1c:	5a c0       	rjmp	.+180    	; 0x9dd2 <put_fat+0x1dc>
    9d1e:	77 27       	eor	r23, r23
    9d20:	6f 2d       	mov	r22, r15
    9d22:	5e 2d       	mov	r21, r14
    9d24:	4d 2d       	mov	r20, r13
    9d26:	ed 81       	ldd	r30, Y+5	; 0x05
    9d28:	fe 81       	ldd	r31, Y+6	; 0x06
    9d2a:	85 a1       	ldd	r24, Z+37	; 0x25
    9d2c:	96 a1       	ldd	r25, Z+38	; 0x26
    9d2e:	a7 a1       	ldd	r26, Z+39	; 0x27
    9d30:	b0 a5       	ldd	r27, Z+40	; 0x28
    9d32:	48 0f       	add	r20, r24
    9d34:	59 1f       	adc	r21, r25
    9d36:	6a 1f       	adc	r22, r26
    9d38:	7b 1f       	adc	r23, r27
    9d3a:	cf 01       	movw	r24, r30
    9d3c:	87 dc       	rcall	.-1778   	; 0x964c <move_window>
    9d3e:	5c 01       	movw	r10, r24
    9d40:	89 2b       	or	r24, r25
    9d42:	09 f0       	breq	.+2      	; 0x9d46 <put_fat+0x150>
    9d44:	4e c0       	rjmp	.+156    	; 0x9de2 <put_fat+0x1ec>
    9d46:	ed 81       	ldd	r30, Y+5	; 0x05
    9d48:	fe 81       	ldd	r31, Y+6	; 0x06
    9d4a:	f5 96       	adiw	r30, 0x35	; 53
    9d4c:	cc 0c       	add	r12, r12
    9d4e:	dd 1c       	adc	r13, r13
    9d50:	e8 94       	clt
    9d52:	c0 f8       	bld	r12, 0
    9d54:	21 e0       	ldi	r18, 0x01	; 1
    9d56:	d2 22       	and	r13, r18
    9d58:	ec 0d       	add	r30, r12
    9d5a:	fd 1d       	adc	r31, r13
    9d5c:	40 82       	st	Z, r4
    9d5e:	51 82       	std	Z+1, r5	; 0x01
    9d60:	38 c0       	rjmp	.+112    	; 0x9dd2 <put_fat+0x1dc>
    9d62:	ed 81       	ldd	r30, Y+5	; 0x05
    9d64:	fe 81       	ldd	r31, Y+6	; 0x06
    9d66:	85 a1       	ldd	r24, Z+37	; 0x25
    9d68:	96 a1       	ldd	r25, Z+38	; 0x26
    9d6a:	a7 a1       	ldd	r26, Z+39	; 0x27
    9d6c:	b0 a5       	ldd	r27, Z+40	; 0x28
    9d6e:	27 e0       	ldi	r18, 0x07	; 7
    9d70:	76 95       	lsr	r23
    9d72:	67 95       	ror	r22
    9d74:	57 95       	ror	r21
    9d76:	47 95       	ror	r20
    9d78:	2a 95       	dec	r18
    9d7a:	d1 f7       	brne	.-12     	; 0x9d70 <put_fat+0x17a>
    9d7c:	48 0f       	add	r20, r24
    9d7e:	59 1f       	adc	r21, r25
    9d80:	6a 1f       	adc	r22, r26
    9d82:	7b 1f       	adc	r23, r27
    9d84:	cf 01       	movw	r24, r30
    9d86:	62 dc       	rcall	.-1852   	; 0x964c <move_window>
    9d88:	5c 01       	movw	r10, r24
    9d8a:	89 2b       	or	r24, r25
    9d8c:	51 f5       	brne	.+84     	; 0x9de2 <put_fat+0x1ec>
    9d8e:	4d 81       	ldd	r20, Y+5	; 0x05
    9d90:	5e 81       	ldd	r21, Y+6	; 0x06
    9d92:	4b 5c       	subi	r20, 0xCB	; 203
    9d94:	5f 4f       	sbci	r21, 0xFF	; 255
    9d96:	cc 0c       	add	r12, r12
    9d98:	dd 1c       	adc	r13, r13
    9d9a:	cc 0c       	add	r12, r12
    9d9c:	dd 1c       	adc	r13, r13
    9d9e:	fc ef       	ldi	r31, 0xFC	; 252
    9da0:	cf 22       	and	r12, r31
    9da2:	f1 e0       	ldi	r31, 0x01	; 1
    9da4:	df 22       	and	r13, r31
    9da6:	c4 0e       	add	r12, r20
    9da8:	d5 1e       	adc	r13, r21
    9daa:	c6 01       	movw	r24, r12
    9dac:	0e 94 4b 46 	call	0x8c96	; 0x8c96 <ld_dword>
    9db0:	2f e0       	ldi	r18, 0x0F	; 15
    9db2:	72 22       	and	r7, r18
    9db4:	dc 01       	movw	r26, r24
    9db6:	cb 01       	movw	r24, r22
    9db8:	88 27       	eor	r24, r24
    9dba:	99 27       	eor	r25, r25
    9dbc:	aa 27       	eor	r26, r26
    9dbe:	b0 7f       	andi	r27, 0xF0	; 240
    9dc0:	b3 01       	movw	r22, r6
    9dc2:	a2 01       	movw	r20, r4
    9dc4:	48 2b       	or	r20, r24
    9dc6:	59 2b       	or	r21, r25
    9dc8:	6a 2b       	or	r22, r26
    9dca:	7b 2b       	or	r23, r27
    9dcc:	c6 01       	movw	r24, r12
    9dce:	0e 94 60 46 	call	0x8cc0	; 0x8cc0 <st_dword>
    9dd2:	81 e0       	ldi	r24, 0x01	; 1
    9dd4:	ed 81       	ldd	r30, Y+5	; 0x05
    9dd6:	fe 81       	ldd	r31, Y+6	; 0x06
    9dd8:	83 83       	std	Z+3, r24	; 0x03
    9dda:	03 c0       	rjmp	.+6      	; 0x9de2 <put_fat+0x1ec>
    9ddc:	82 e0       	ldi	r24, 0x02	; 2
    9dde:	a8 2e       	mov	r10, r24
    9de0:	b1 2c       	mov	r11, r1
    9de2:	c5 01       	movw	r24, r10
    9de4:	26 96       	adiw	r28, 0x06	; 6
    9de6:	e2 e1       	ldi	r30, 0x12	; 18
    9de8:	0c 94 fa df 	jmp	0x1bff4	; 0x1bff4 <__epilogue_restores__>

00009dec <get_fat.isra.10>:
    9dec:	a0 e0       	ldi	r26, 0x00	; 0
    9dee:	b0 e0       	ldi	r27, 0x00	; 0
    9df0:	ec ef       	ldi	r30, 0xFC	; 252
    9df2:	fe e4       	ldi	r31, 0x4E	; 78
    9df4:	0c 94 e6 df 	jmp	0x1bfcc	; 0x1bfcc <__prologue_saves__+0x10>
    9df8:	42 30       	cpi	r20, 0x02	; 2
    9dfa:	51 05       	cpc	r21, r1
    9dfc:	61 05       	cpc	r22, r1
    9dfe:	71 05       	cpc	r23, r1
    9e00:	08 f4       	brcc	.+2      	; 0x9e04 <get_fat.isra.10+0x18>
    9e02:	9f c0       	rjmp	.+318    	; 0x9f42 <get_fat.isra.10+0x156>
    9e04:	fc 01       	movw	r30, r24
    9e06:	01 8d       	ldd	r16, Z+25	; 0x19
    9e08:	12 8d       	ldd	r17, Z+26	; 0x1a
    9e0a:	23 8d       	ldd	r18, Z+27	; 0x1b
    9e0c:	34 8d       	ldd	r19, Z+28	; 0x1c
    9e0e:	40 17       	cp	r20, r16
    9e10:	51 07       	cpc	r21, r17
    9e12:	62 07       	cpc	r22, r18
    9e14:	73 07       	cpc	r23, r19
    9e16:	08 f0       	brcs	.+2      	; 0x9e1a <get_fat.isra.10+0x2e>
    9e18:	94 c0       	rjmp	.+296    	; 0x9f42 <get_fat.isra.10+0x156>
    9e1a:	6a 01       	movw	r12, r20
    9e1c:	7b 01       	movw	r14, r22
    9e1e:	8c 01       	movw	r16, r24
    9e20:	80 81       	ld	r24, Z
    9e22:	82 30       	cpi	r24, 0x02	; 2
    9e24:	09 f4       	brne	.+2      	; 0x9e28 <get_fat.isra.10+0x3c>
    9e26:	4b c0       	rjmp	.+150    	; 0x9ebe <get_fat.isra.10+0xd2>
    9e28:	83 30       	cpi	r24, 0x03	; 3
    9e2a:	09 f4       	brne	.+2      	; 0x9e2e <get_fat.isra.10+0x42>
    9e2c:	67 c0       	rjmp	.+206    	; 0x9efc <get_fat.isra.10+0x110>
    9e2e:	81 30       	cpi	r24, 0x01	; 1
    9e30:	09 f0       	breq	.+2      	; 0x9e34 <get_fat.isra.10+0x48>
    9e32:	87 c0       	rjmp	.+270    	; 0x9f42 <get_fat.isra.10+0x156>
    9e34:	ea 01       	movw	r28, r20
    9e36:	d6 95       	lsr	r29
    9e38:	c7 95       	ror	r28
    9e3a:	cc 0d       	add	r28, r12
    9e3c:	dd 1d       	adc	r29, r13
    9e3e:	ce 01       	movw	r24, r28
    9e40:	89 2f       	mov	r24, r25
    9e42:	99 27       	eor	r25, r25
    9e44:	86 95       	lsr	r24
    9e46:	45 a1       	ldd	r20, Z+37	; 0x25
    9e48:	56 a1       	ldd	r21, Z+38	; 0x26
    9e4a:	67 a1       	ldd	r22, Z+39	; 0x27
    9e4c:	70 a5       	ldd	r23, Z+40	; 0x28
    9e4e:	48 0f       	add	r20, r24
    9e50:	59 1f       	adc	r21, r25
    9e52:	61 1d       	adc	r22, r1
    9e54:	71 1d       	adc	r23, r1
    9e56:	cf 01       	movw	r24, r30
    9e58:	f9 db       	rcall	.-2062   	; 0x964c <move_window>
    9e5a:	89 2b       	or	r24, r25
    9e5c:	21 f0       	breq	.+8      	; 0x9e66 <get_fat.isra.10+0x7a>
    9e5e:	6f ef       	ldi	r22, 0xFF	; 255
    9e60:	7f ef       	ldi	r23, 0xFF	; 255
    9e62:	cb 01       	movw	r24, r22
    9e64:	72 c0       	rjmp	.+228    	; 0x9f4a <get_fat.isra.10+0x15e>
    9e66:	5e 01       	movw	r10, r28
    9e68:	ff ef       	ldi	r31, 0xFF	; 255
    9e6a:	af 1a       	sub	r10, r31
    9e6c:	bf 0a       	sbc	r11, r31
    9e6e:	d1 70       	andi	r29, 0x01	; 1
    9e70:	c0 0f       	add	r28, r16
    9e72:	d1 1f       	adc	r29, r17
    9e74:	cd a9       	ldd	r28, Y+53	; 0x35
    9e76:	c5 01       	movw	r24, r10
    9e78:	89 2f       	mov	r24, r25
    9e7a:	99 27       	eor	r25, r25
    9e7c:	86 95       	lsr	r24
    9e7e:	f8 01       	movw	r30, r16
    9e80:	45 a1       	ldd	r20, Z+37	; 0x25
    9e82:	56 a1       	ldd	r21, Z+38	; 0x26
    9e84:	67 a1       	ldd	r22, Z+39	; 0x27
    9e86:	70 a5       	ldd	r23, Z+40	; 0x28
    9e88:	48 0f       	add	r20, r24
    9e8a:	59 1f       	adc	r21, r25
    9e8c:	61 1d       	adc	r22, r1
    9e8e:	71 1d       	adc	r23, r1
    9e90:	c8 01       	movw	r24, r16
    9e92:	dc db       	rcall	.-2120   	; 0x964c <move_window>
    9e94:	89 2b       	or	r24, r25
    9e96:	19 f7       	brne	.-58     	; 0x9e5e <get_fat.isra.10+0x72>
    9e98:	f1 e0       	ldi	r31, 0x01	; 1
    9e9a:	bf 22       	and	r11, r31
    9e9c:	f8 01       	movw	r30, r16
    9e9e:	ea 0d       	add	r30, r10
    9ea0:	fb 1d       	adc	r31, r11
    9ea2:	85 a9       	ldd	r24, Z+53	; 0x35
    9ea4:	6c 2f       	mov	r22, r28
    9ea6:	70 e0       	ldi	r23, 0x00	; 0
    9ea8:	78 2b       	or	r23, r24
    9eaa:	c0 fe       	sbrs	r12, 0
    9eac:	06 c0       	rjmp	.+12     	; 0x9eba <get_fat.isra.10+0xce>
    9eae:	54 e0       	ldi	r21, 0x04	; 4
    9eb0:	76 95       	lsr	r23
    9eb2:	67 95       	ror	r22
    9eb4:	5a 95       	dec	r21
    9eb6:	e1 f7       	brne	.-8      	; 0x9eb0 <get_fat.isra.10+0xc4>
    9eb8:	1e c0       	rjmp	.+60     	; 0x9ef6 <get_fat.isra.10+0x10a>
    9eba:	7f 70       	andi	r23, 0x0F	; 15
    9ebc:	1c c0       	rjmp	.+56     	; 0x9ef6 <get_fat.isra.10+0x10a>
    9ebe:	77 27       	eor	r23, r23
    9ec0:	6f 2d       	mov	r22, r15
    9ec2:	5e 2d       	mov	r21, r14
    9ec4:	4d 2d       	mov	r20, r13
    9ec6:	85 a1       	ldd	r24, Z+37	; 0x25
    9ec8:	96 a1       	ldd	r25, Z+38	; 0x26
    9eca:	a7 a1       	ldd	r26, Z+39	; 0x27
    9ecc:	b0 a5       	ldd	r27, Z+40	; 0x28
    9ece:	48 0f       	add	r20, r24
    9ed0:	59 1f       	adc	r21, r25
    9ed2:	6a 1f       	adc	r22, r26
    9ed4:	7b 1f       	adc	r23, r27
    9ed6:	cf 01       	movw	r24, r30
    9ed8:	b9 db       	rcall	.-2190   	; 0x964c <move_window>
    9eda:	89 2b       	or	r24, r25
    9edc:	09 f0       	breq	.+2      	; 0x9ee0 <get_fat.isra.10+0xf4>
    9ede:	bf cf       	rjmp	.-130    	; 0x9e5e <get_fat.isra.10+0x72>
    9ee0:	cc 0c       	add	r12, r12
    9ee2:	dd 1c       	adc	r13, r13
    9ee4:	e8 94       	clt
    9ee6:	c0 f8       	bld	r12, 0
    9ee8:	f1 e0       	ldi	r31, 0x01	; 1
    9eea:	df 22       	and	r13, r31
    9eec:	f8 01       	movw	r30, r16
    9eee:	ec 0d       	add	r30, r12
    9ef0:	fd 1d       	adc	r31, r13
    9ef2:	65 a9       	ldd	r22, Z+53	; 0x35
    9ef4:	76 a9       	ldd	r23, Z+54	; 0x36
    9ef6:	80 e0       	ldi	r24, 0x00	; 0
    9ef8:	90 e0       	ldi	r25, 0x00	; 0
    9efa:	27 c0       	rjmp	.+78     	; 0x9f4a <get_fat.isra.10+0x15e>
    9efc:	85 a1       	ldd	r24, Z+37	; 0x25
    9efe:	96 a1       	ldd	r25, Z+38	; 0x26
    9f00:	a7 a1       	ldd	r26, Z+39	; 0x27
    9f02:	b0 a5       	ldd	r27, Z+40	; 0x28
    9f04:	27 e0       	ldi	r18, 0x07	; 7
    9f06:	76 95       	lsr	r23
    9f08:	67 95       	ror	r22
    9f0a:	57 95       	ror	r21
    9f0c:	47 95       	ror	r20
    9f0e:	2a 95       	dec	r18
    9f10:	d1 f7       	brne	.-12     	; 0x9f06 <get_fat.isra.10+0x11a>
    9f12:	48 0f       	add	r20, r24
    9f14:	59 1f       	adc	r21, r25
    9f16:	6a 1f       	adc	r22, r26
    9f18:	7b 1f       	adc	r23, r27
    9f1a:	cf 01       	movw	r24, r30
    9f1c:	97 db       	rcall	.-2258   	; 0x964c <move_window>
    9f1e:	89 2b       	or	r24, r25
    9f20:	09 f0       	breq	.+2      	; 0x9f24 <get_fat.isra.10+0x138>
    9f22:	9d cf       	rjmp	.-198    	; 0x9e5e <get_fat.isra.10+0x72>
    9f24:	0b 5c       	subi	r16, 0xCB	; 203
    9f26:	1f 4f       	sbci	r17, 0xFF	; 255
    9f28:	cc 0c       	add	r12, r12
    9f2a:	dd 1c       	adc	r13, r13
    9f2c:	cc 0c       	add	r12, r12
    9f2e:	dd 1c       	adc	r13, r13
    9f30:	c6 01       	movw	r24, r12
    9f32:	8c 7f       	andi	r24, 0xFC	; 252
    9f34:	91 70       	andi	r25, 0x01	; 1
    9f36:	80 0f       	add	r24, r16
    9f38:	91 1f       	adc	r25, r17
    9f3a:	0e 94 4b 46 	call	0x8c96	; 0x8c96 <ld_dword>
    9f3e:	9f 70       	andi	r25, 0x0F	; 15
    9f40:	04 c0       	rjmp	.+8      	; 0x9f4a <get_fat.isra.10+0x15e>
    9f42:	61 e0       	ldi	r22, 0x01	; 1
    9f44:	70 e0       	ldi	r23, 0x00	; 0
    9f46:	80 e0       	ldi	r24, 0x00	; 0
    9f48:	90 e0       	ldi	r25, 0x00	; 0
    9f4a:	cd b7       	in	r28, 0x3d	; 61
    9f4c:	de b7       	in	r29, 0x3e	; 62
    9f4e:	ea e0       	ldi	r30, 0x0A	; 10
    9f50:	0c 94 02 e0 	jmp	0x1c004	; 0x1c004 <__epilogue_restores__+0x10>

00009f54 <dir_sdi>:
    9f54:	a0 e0       	ldi	r26, 0x00	; 0
    9f56:	b0 e0       	ldi	r27, 0x00	; 0
    9f58:	e0 eb       	ldi	r30, 0xB0	; 176
    9f5a:	ff e4       	ldi	r31, 0x4F	; 79
    9f5c:	0c 94 e0 df 	jmp	0x1bfc0	; 0x1bfc0 <__prologue_saves__+0x4>
    9f60:	ec 01       	movw	r28, r24
    9f62:	6a 01       	movw	r12, r20
    9f64:	7b 01       	movw	r14, r22
    9f66:	41 15       	cp	r20, r1
    9f68:	51 05       	cpc	r21, r1
    9f6a:	80 e2       	ldi	r24, 0x20	; 32
    9f6c:	68 07       	cpc	r22, r24
    9f6e:	71 05       	cpc	r23, r1
    9f70:	18 f0       	brcs	.+6      	; 0x9f78 <dir_sdi+0x24>
    9f72:	82 e0       	ldi	r24, 0x02	; 2
    9f74:	90 e0       	ldi	r25, 0x00	; 0
    9f76:	aa c0       	rjmp	.+340    	; 0xa0cc <dir_sdi+0x178>
    9f78:	db 01       	movw	r26, r22
    9f7a:	ca 01       	movw	r24, r20
    9f7c:	8f 71       	andi	r24, 0x1F	; 31
    9f7e:	99 27       	eor	r25, r25
    9f80:	aa 27       	eor	r26, r26
    9f82:	bb 27       	eor	r27, r27
    9f84:	89 2b       	or	r24, r25
    9f86:	8a 2b       	or	r24, r26
    9f88:	8b 2b       	or	r24, r27
    9f8a:	99 f7       	brne	.-26     	; 0x9f72 <dir_sdi+0x1e>
    9f8c:	08 81       	ld	r16, Y
    9f8e:	19 81       	ldd	r17, Y+1	; 0x01
    9f90:	4e 87       	std	Y+14, r20	; 0x0e
    9f92:	5f 87       	std	Y+15, r21	; 0x0f
    9f94:	68 8b       	std	Y+16, r22	; 0x10
    9f96:	79 8b       	std	Y+17, r23	; 0x11
    9f98:	8e 80       	ldd	r8, Y+6	; 0x06
    9f9a:	9f 80       	ldd	r9, Y+7	; 0x07
    9f9c:	a8 84       	ldd	r10, Y+8	; 0x08
    9f9e:	b9 84       	ldd	r11, Y+9	; 0x09
    9fa0:	81 14       	cp	r8, r1
    9fa2:	91 04       	cpc	r9, r1
    9fa4:	a1 04       	cpc	r10, r1
    9fa6:	b1 04       	cpc	r11, r1
    9fa8:	51 f5       	brne	.+84     	; 0x9ffe <dir_sdi+0xaa>
    9faa:	f8 01       	movw	r30, r16
    9fac:	80 81       	ld	r24, Z
    9fae:	83 30       	cpi	r24, 0x03	; 3
    9fb0:	40 f0       	brcs	.+16     	; 0x9fc2 <dir_sdi+0x6e>
    9fb2:	81 a5       	ldd	r24, Z+41	; 0x29
    9fb4:	92 a5       	ldd	r25, Z+42	; 0x2a
    9fb6:	a3 a5       	ldd	r26, Z+43	; 0x2b
    9fb8:	b4 a5       	ldd	r27, Z+44	; 0x2c
    9fba:	00 97       	sbiw	r24, 0x00	; 0
    9fbc:	a1 05       	cpc	r26, r1
    9fbe:	b1 05       	cpc	r27, r1
    9fc0:	e1 f4       	brne	.+56     	; 0x9ffa <dir_sdi+0xa6>
    9fc2:	f8 01       	movw	r30, r16
    9fc4:	87 81       	ldd	r24, Z+7	; 0x07
    9fc6:	90 85       	ldd	r25, Z+8	; 0x08
    9fc8:	a0 e0       	ldi	r26, 0x00	; 0
    9fca:	b0 e0       	ldi	r27, 0x00	; 0
    9fcc:	b7 01       	movw	r22, r14
    9fce:	a6 01       	movw	r20, r12
    9fd0:	25 e0       	ldi	r18, 0x05	; 5
    9fd2:	76 95       	lsr	r23
    9fd4:	67 95       	ror	r22
    9fd6:	57 95       	ror	r21
    9fd8:	47 95       	ror	r20
    9fda:	2a 95       	dec	r18
    9fdc:	d1 f7       	brne	.-12     	; 0x9fd2 <dir_sdi+0x7e>
    9fde:	48 17       	cp	r20, r24
    9fe0:	59 07       	cpc	r21, r25
    9fe2:	6a 07       	cpc	r22, r26
    9fe4:	7b 07       	cpc	r23, r27
    9fe6:	28 f6       	brcc	.-118    	; 0x9f72 <dir_sdi+0x1e>
    9fe8:	81 a5       	ldd	r24, Z+41	; 0x29
    9fea:	92 a5       	ldd	r25, Z+42	; 0x2a
    9fec:	a3 a5       	ldd	r26, Z+43	; 0x2b
    9fee:	b4 a5       	ldd	r27, Z+44	; 0x2c
    9ff0:	8e 8b       	std	Y+22, r24	; 0x16
    9ff2:	9f 8b       	std	Y+23, r25	; 0x17
    9ff4:	a8 8f       	std	Y+24, r26	; 0x18
    9ff6:	b9 8f       	std	Y+25, r27	; 0x19
    9ff8:	3e c0       	rjmp	.+124    	; 0xa076 <dir_sdi+0x122>
    9ffa:	4c 01       	movw	r8, r24
    9ffc:	5d 01       	movw	r10, r26
    9ffe:	f8 01       	movw	r30, r16
    a000:	41 84       	ldd	r4, Z+9	; 0x09
    a002:	52 84       	ldd	r5, Z+10	; 0x0a
    a004:	61 2c       	mov	r6, r1
    a006:	71 2c       	mov	r7, r1
    a008:	39 e0       	ldi	r19, 0x09	; 9
    a00a:	44 0c       	add	r4, r4
    a00c:	55 1c       	adc	r5, r5
    a00e:	66 1c       	adc	r6, r6
    a010:	77 1c       	adc	r7, r7
    a012:	3a 95       	dec	r19
    a014:	d1 f7       	brne	.-12     	; 0xa00a <dir_sdi+0xb6>
    a016:	b5 01       	movw	r22, r10
    a018:	a4 01       	movw	r20, r8
    a01a:	c4 14       	cp	r12, r4
    a01c:	d5 04       	cpc	r13, r5
    a01e:	e6 04       	cpc	r14, r6
    a020:	f7 04       	cpc	r15, r7
    a022:	10 f1       	brcs	.+68     	; 0xa068 <dir_sdi+0x114>
    a024:	88 81       	ld	r24, Y
    a026:	99 81       	ldd	r25, Y+1	; 0x01
    a028:	e1 de       	rcall	.-574    	; 0x9dec <get_fat.isra.10>
    a02a:	4b 01       	movw	r8, r22
    a02c:	5c 01       	movw	r10, r24
    a02e:	6f 3f       	cpi	r22, 0xFF	; 255
    a030:	7f 4f       	sbci	r23, 0xFF	; 255
    a032:	8f 4f       	sbci	r24, 0xFF	; 255
    a034:	9f 4f       	sbci	r25, 0xFF	; 255
    a036:	09 f4       	brne	.+2      	; 0xa03a <dir_sdi+0xe6>
    a038:	47 c0       	rjmp	.+142    	; 0xa0c8 <dir_sdi+0x174>
    a03a:	82 e0       	ldi	r24, 0x02	; 2
    a03c:	88 16       	cp	r8, r24
    a03e:	91 04       	cpc	r9, r1
    a040:	a1 04       	cpc	r10, r1
    a042:	b1 04       	cpc	r11, r1
    a044:	08 f4       	brcc	.+2      	; 0xa048 <dir_sdi+0xf4>
    a046:	95 cf       	rjmp	.-214    	; 0x9f72 <dir_sdi+0x1e>
    a048:	f8 01       	movw	r30, r16
    a04a:	81 8d       	ldd	r24, Z+25	; 0x19
    a04c:	92 8d       	ldd	r25, Z+26	; 0x1a
    a04e:	a3 8d       	ldd	r26, Z+27	; 0x1b
    a050:	b4 8d       	ldd	r27, Z+28	; 0x1c
    a052:	88 16       	cp	r8, r24
    a054:	99 06       	cpc	r9, r25
    a056:	aa 06       	cpc	r10, r26
    a058:	bb 06       	cpc	r11, r27
    a05a:	08 f0       	brcs	.+2      	; 0xa05e <dir_sdi+0x10a>
    a05c:	8a cf       	rjmp	.-236    	; 0x9f72 <dir_sdi+0x1e>
    a05e:	c4 18       	sub	r12, r4
    a060:	d5 08       	sbc	r13, r5
    a062:	e6 08       	sbc	r14, r6
    a064:	f7 08       	sbc	r15, r7
    a066:	d7 cf       	rjmp	.-82     	; 0xa016 <dir_sdi+0xc2>
    a068:	c8 01       	movw	r24, r16
    a06a:	0e 94 04 47 	call	0x8e08	; 0x8e08 <clst2sect>
    a06e:	6e 8b       	std	Y+22, r22	; 0x16
    a070:	7f 8b       	std	Y+23, r23	; 0x17
    a072:	88 8f       	std	Y+24, r24	; 0x18
    a074:	99 8f       	std	Y+25, r25	; 0x19
    a076:	8a 8a       	std	Y+18, r8	; 0x12
    a078:	9b 8a       	std	Y+19, r9	; 0x13
    a07a:	ac 8a       	std	Y+20, r10	; 0x14
    a07c:	bd 8a       	std	Y+21, r11	; 0x15
    a07e:	8e 89       	ldd	r24, Y+22	; 0x16
    a080:	9f 89       	ldd	r25, Y+23	; 0x17
    a082:	a8 8d       	ldd	r26, Y+24	; 0x18
    a084:	b9 8d       	ldd	r27, Y+25	; 0x19
    a086:	00 97       	sbiw	r24, 0x00	; 0
    a088:	a1 05       	cpc	r26, r1
    a08a:	b1 05       	cpc	r27, r1
    a08c:	09 f4       	brne	.+2      	; 0xa090 <dir_sdi+0x13c>
    a08e:	71 cf       	rjmp	.-286    	; 0x9f72 <dir_sdi+0x1e>
    a090:	b7 01       	movw	r22, r14
    a092:	a6 01       	movw	r20, r12
    a094:	29 e0       	ldi	r18, 0x09	; 9
    a096:	76 95       	lsr	r23
    a098:	67 95       	ror	r22
    a09a:	57 95       	ror	r21
    a09c:	47 95       	ror	r20
    a09e:	2a 95       	dec	r18
    a0a0:	d1 f7       	brne	.-12     	; 0xa096 <dir_sdi+0x142>
    a0a2:	84 0f       	add	r24, r20
    a0a4:	95 1f       	adc	r25, r21
    a0a6:	a6 1f       	adc	r26, r22
    a0a8:	b7 1f       	adc	r27, r23
    a0aa:	8e 8b       	std	Y+22, r24	; 0x16
    a0ac:	9f 8b       	std	Y+23, r25	; 0x17
    a0ae:	a8 8f       	std	Y+24, r26	; 0x18
    a0b0:	b9 8f       	std	Y+25, r27	; 0x19
    a0b2:	0b 5c       	subi	r16, 0xCB	; 203
    a0b4:	1f 4f       	sbci	r17, 0xFF	; 255
    a0b6:	f1 e0       	ldi	r31, 0x01	; 1
    a0b8:	df 22       	and	r13, r31
    a0ba:	c0 0e       	add	r12, r16
    a0bc:	d1 1e       	adc	r13, r17
    a0be:	db 8e       	std	Y+27, r13	; 0x1b
    a0c0:	ca 8e       	std	Y+26, r12	; 0x1a
    a0c2:	80 e0       	ldi	r24, 0x00	; 0
    a0c4:	90 e0       	ldi	r25, 0x00	; 0
    a0c6:	02 c0       	rjmp	.+4      	; 0xa0cc <dir_sdi+0x178>
    a0c8:	81 e0       	ldi	r24, 0x01	; 1
    a0ca:	90 e0       	ldi	r25, 0x00	; 0
    a0cc:	cd b7       	in	r28, 0x3d	; 61
    a0ce:	de b7       	in	r29, 0x3e	; 62
    a0d0:	e0 e1       	ldi	r30, 0x10	; 16
    a0d2:	0c 94 fc df 	jmp	0x1bff8	; 0x1bff8 <__epilogue_restores__+0x4>

0000a0d6 <create_chain>:
    a0d6:	a0 e0       	ldi	r26, 0x00	; 0
    a0d8:	b0 e0       	ldi	r27, 0x00	; 0
    a0da:	e1 e7       	ldi	r30, 0x71	; 113
    a0dc:	f0 e5       	ldi	r31, 0x50	; 80
    a0de:	0c 94 e0 df 	jmp	0x1bfc0	; 0x1bfc0 <__prologue_saves__+0x4>
    a0e2:	8c 01       	movw	r16, r24
    a0e4:	2a 01       	movw	r4, r20
    a0e6:	3b 01       	movw	r6, r22
    a0e8:	fc 01       	movw	r30, r24
    a0ea:	c0 81       	ld	r28, Z
    a0ec:	d1 81       	ldd	r29, Z+1	; 0x01
    a0ee:	41 15       	cp	r20, r1
    a0f0:	51 05       	cpc	r21, r1
    a0f2:	61 05       	cpc	r22, r1
    a0f4:	71 05       	cpc	r23, r1
    a0f6:	99 f4       	brne	.+38     	; 0xa11e <create_chain+0x48>
    a0f8:	8d 84       	ldd	r8, Y+13	; 0x0d
    a0fa:	9e 84       	ldd	r9, Y+14	; 0x0e
    a0fc:	af 84       	ldd	r10, Y+15	; 0x0f
    a0fe:	b8 88       	ldd	r11, Y+16	; 0x10
    a100:	81 14       	cp	r8, r1
    a102:	91 04       	cpc	r9, r1
    a104:	a1 04       	cpc	r10, r1
    a106:	b1 04       	cpc	r11, r1
    a108:	51 f1       	breq	.+84     	; 0xa15e <create_chain+0x88>
    a10a:	89 8d       	ldd	r24, Y+25	; 0x19
    a10c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a10e:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a110:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a112:	88 16       	cp	r8, r24
    a114:	99 06       	cpc	r9, r25
    a116:	aa 06       	cpc	r10, r26
    a118:	bb 06       	cpc	r11, r27
    a11a:	28 f1       	brcs	.+74     	; 0xa166 <create_chain+0x90>
    a11c:	20 c0       	rjmp	.+64     	; 0xa15e <create_chain+0x88>
    a11e:	ce 01       	movw	r24, r28
    a120:	65 de       	rcall	.-822    	; 0x9dec <get_fat.isra.10>
    a122:	62 30       	cpi	r22, 0x02	; 2
    a124:	71 05       	cpc	r23, r1
    a126:	81 05       	cpc	r24, r1
    a128:	91 05       	cpc	r25, r1
    a12a:	08 f4       	brcc	.+2      	; 0xa12e <create_chain+0x58>
    a12c:	ea c0       	rjmp	.+468    	; 0xa302 <create_chain+0x22c>
    a12e:	6f 3f       	cpi	r22, 0xFF	; 255
    a130:	ff ef       	ldi	r31, 0xFF	; 255
    a132:	7f 07       	cpc	r23, r31
    a134:	8f 07       	cpc	r24, r31
    a136:	9f 07       	cpc	r25, r31
    a138:	29 f4       	brne	.+10     	; 0xa144 <create_chain+0x6e>
    a13a:	4f ef       	ldi	r20, 0xFF	; 255
    a13c:	3f ef       	ldi	r19, 0xFF	; 255
    a13e:	2f ef       	ldi	r18, 0xFF	; 255
    a140:	9f ef       	ldi	r25, 0xFF	; 255
    a142:	e7 c0       	rjmp	.+462    	; 0xa312 <create_chain+0x23c>
    a144:	c9 8c       	ldd	r12, Y+25	; 0x19
    a146:	da 8c       	ldd	r13, Y+26	; 0x1a
    a148:	eb 8c       	ldd	r14, Y+27	; 0x1b
    a14a:	fc 8c       	ldd	r15, Y+28	; 0x1c
    a14c:	6c 15       	cp	r22, r12
    a14e:	7d 05       	cpc	r23, r13
    a150:	8e 05       	cpc	r24, r14
    a152:	9f 05       	cpc	r25, r15
    a154:	08 f4       	brcc	.+2      	; 0xa158 <create_chain+0x82>
    a156:	da c0       	rjmp	.+436    	; 0xa30c <create_chain+0x236>
    a158:	53 01       	movw	r10, r6
    a15a:	42 01       	movw	r8, r4
    a15c:	04 c0       	rjmp	.+8      	; 0xa166 <create_chain+0x90>
    a15e:	81 2c       	mov	r8, r1
    a160:	91 2c       	mov	r9, r1
    a162:	54 01       	movw	r10, r8
    a164:	83 94       	inc	r8
    a166:	89 89       	ldd	r24, Y+17	; 0x11
    a168:	9a 89       	ldd	r25, Y+18	; 0x12
    a16a:	ab 89       	ldd	r26, Y+19	; 0x13
    a16c:	bc 89       	ldd	r27, Y+20	; 0x14
    a16e:	89 2b       	or	r24, r25
    a170:	8a 2b       	or	r24, r26
    a172:	8b 2b       	or	r24, r27
    a174:	11 f4       	brne	.+4      	; 0xa17a <create_chain+0xa4>
    a176:	40 e0       	ldi	r20, 0x00	; 0
    a178:	c5 c0       	rjmp	.+394    	; 0xa304 <create_chain+0x22e>
    a17a:	84 14       	cp	r8, r4
    a17c:	95 04       	cpc	r9, r5
    a17e:	a6 04       	cpc	r10, r6
    a180:	b7 04       	cpc	r11, r7
    a182:	09 f0       	breq	.+2      	; 0xa186 <create_chain+0xb0>
    a184:	46 c0       	rjmp	.+140    	; 0xa212 <create_chain+0x13c>
    a186:	75 01       	movw	r14, r10
    a188:	64 01       	movw	r12, r8
    a18a:	2f ef       	ldi	r18, 0xFF	; 255
    a18c:	c2 1a       	sub	r12, r18
    a18e:	d2 0a       	sbc	r13, r18
    a190:	e2 0a       	sbc	r14, r18
    a192:	f2 0a       	sbc	r15, r18
    a194:	89 8d       	ldd	r24, Y+25	; 0x19
    a196:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a198:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a19a:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a19c:	c8 16       	cp	r12, r24
    a19e:	d9 06       	cpc	r13, r25
    a1a0:	ea 06       	cpc	r14, r26
    a1a2:	fb 06       	cpc	r15, r27
    a1a4:	28 f0       	brcs	.+10     	; 0xa1b0 <create_chain+0xda>
    a1a6:	92 e0       	ldi	r25, 0x02	; 2
    a1a8:	c9 2e       	mov	r12, r25
    a1aa:	d1 2c       	mov	r13, r1
    a1ac:	e1 2c       	mov	r14, r1
    a1ae:	f1 2c       	mov	r15, r1
    a1b0:	b7 01       	movw	r22, r14
    a1b2:	a6 01       	movw	r20, r12
    a1b4:	f8 01       	movw	r30, r16
    a1b6:	80 81       	ld	r24, Z
    a1b8:	91 81       	ldd	r25, Z+1	; 0x01
    a1ba:	18 de       	rcall	.-976    	; 0x9dec <get_fat.isra.10>
    a1bc:	61 30       	cpi	r22, 0x01	; 1
    a1be:	71 05       	cpc	r23, r1
    a1c0:	81 05       	cpc	r24, r1
    a1c2:	91 05       	cpc	r25, r1
    a1c4:	09 f4       	brne	.+2      	; 0xa1c8 <create_chain+0xf2>
    a1c6:	9d c0       	rjmp	.+314    	; 0xa302 <create_chain+0x22c>
    a1c8:	6f 3f       	cpi	r22, 0xFF	; 255
    a1ca:	ff ef       	ldi	r31, 0xFF	; 255
    a1cc:	7f 07       	cpc	r23, r31
    a1ce:	8f 07       	cpc	r24, r31
    a1d0:	9f 07       	cpc	r25, r31
    a1d2:	09 f4       	brne	.+2      	; 0xa1d6 <create_chain+0x100>
    a1d4:	b2 cf       	rjmp	.-156    	; 0xa13a <create_chain+0x64>
    a1d6:	67 2b       	or	r22, r23
    a1d8:	68 2b       	or	r22, r24
    a1da:	69 2b       	or	r22, r25
    a1dc:	a9 f0       	breq	.+42     	; 0xa208 <create_chain+0x132>
    a1de:	8d 85       	ldd	r24, Y+13	; 0x0d
    a1e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    a1e2:	af 85       	ldd	r26, Y+15	; 0x0f
    a1e4:	b8 89       	ldd	r27, Y+16	; 0x10
    a1e6:	82 30       	cpi	r24, 0x02	; 2
    a1e8:	91 05       	cpc	r25, r1
    a1ea:	a1 05       	cpc	r26, r1
    a1ec:	b1 05       	cpc	r27, r1
    a1ee:	88 f0       	brcs	.+34     	; 0xa212 <create_chain+0x13c>
    a1f0:	49 8d       	ldd	r20, Y+25	; 0x19
    a1f2:	5a 8d       	ldd	r21, Y+26	; 0x1a
    a1f4:	6b 8d       	ldd	r22, Y+27	; 0x1b
    a1f6:	7c 8d       	ldd	r23, Y+28	; 0x1c
    a1f8:	84 17       	cp	r24, r20
    a1fa:	95 07       	cpc	r25, r21
    a1fc:	a6 07       	cpc	r26, r22
    a1fe:	b7 07       	cpc	r27, r23
    a200:	40 f4       	brcc	.+16     	; 0xa212 <create_chain+0x13c>
    a202:	4c 01       	movw	r8, r24
    a204:	5d 01       	movw	r10, r26
    a206:	05 c0       	rjmp	.+10     	; 0xa212 <create_chain+0x13c>
    a208:	c1 14       	cp	r12, r1
    a20a:	d1 04       	cpc	r13, r1
    a20c:	e1 04       	cpc	r14, r1
    a20e:	f1 04       	cpc	r15, r1
    a210:	c9 f5       	brne	.+114    	; 0xa284 <create_chain+0x1ae>
    a212:	75 01       	movw	r14, r10
    a214:	64 01       	movw	r12, r8
    a216:	2f ef       	ldi	r18, 0xFF	; 255
    a218:	c2 1a       	sub	r12, r18
    a21a:	d2 0a       	sbc	r13, r18
    a21c:	e2 0a       	sbc	r14, r18
    a21e:	f2 0a       	sbc	r15, r18
    a220:	89 8d       	ldd	r24, Y+25	; 0x19
    a222:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a224:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a226:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a228:	c8 16       	cp	r12, r24
    a22a:	d9 06       	cpc	r13, r25
    a22c:	ea 06       	cpc	r14, r26
    a22e:	fb 06       	cpc	r15, r27
    a230:	60 f0       	brcs	.+24     	; 0xa24a <create_chain+0x174>
    a232:	82 e0       	ldi	r24, 0x02	; 2
    a234:	88 16       	cp	r8, r24
    a236:	91 04       	cpc	r9, r1
    a238:	a1 04       	cpc	r10, r1
    a23a:	b1 04       	cpc	r11, r1
    a23c:	08 f4       	brcc	.+2      	; 0xa240 <create_chain+0x16a>
    a23e:	9b cf       	rjmp	.-202    	; 0xa176 <create_chain+0xa0>
    a240:	82 e0       	ldi	r24, 0x02	; 2
    a242:	c8 2e       	mov	r12, r24
    a244:	d1 2c       	mov	r13, r1
    a246:	e1 2c       	mov	r14, r1
    a248:	f1 2c       	mov	r15, r1
    a24a:	b7 01       	movw	r22, r14
    a24c:	a6 01       	movw	r20, r12
    a24e:	f8 01       	movw	r30, r16
    a250:	80 81       	ld	r24, Z
    a252:	91 81       	ldd	r25, Z+1	; 0x01
    a254:	cb dd       	rcall	.-1130   	; 0x9dec <get_fat.isra.10>
    a256:	61 15       	cp	r22, r1
    a258:	71 05       	cpc	r23, r1
    a25a:	81 05       	cpc	r24, r1
    a25c:	91 05       	cpc	r25, r1
    a25e:	91 f0       	breq	.+36     	; 0xa284 <create_chain+0x1ae>
    a260:	61 30       	cpi	r22, 0x01	; 1
    a262:	71 05       	cpc	r23, r1
    a264:	81 05       	cpc	r24, r1
    a266:	91 05       	cpc	r25, r1
    a268:	09 f4       	brne	.+2      	; 0xa26c <create_chain+0x196>
    a26a:	4b c0       	rjmp	.+150    	; 0xa302 <create_chain+0x22c>
    a26c:	6f 3f       	cpi	r22, 0xFF	; 255
    a26e:	7f 4f       	sbci	r23, 0xFF	; 255
    a270:	8f 4f       	sbci	r24, 0xFF	; 255
    a272:	9f 4f       	sbci	r25, 0xFF	; 255
    a274:	09 f4       	brne	.+2      	; 0xa278 <create_chain+0x1a2>
    a276:	61 cf       	rjmp	.-318    	; 0xa13a <create_chain+0x64>
    a278:	c8 14       	cp	r12, r8
    a27a:	d9 04       	cpc	r13, r9
    a27c:	ea 04       	cpc	r14, r10
    a27e:	fb 04       	cpc	r15, r11
    a280:	51 f6       	brne	.-108    	; 0xa216 <create_chain+0x140>
    a282:	79 cf       	rjmp	.-270    	; 0xa176 <create_chain+0xa0>
    a284:	0f ef       	ldi	r16, 0xFF	; 255
    a286:	1f ef       	ldi	r17, 0xFF	; 255
    a288:	98 01       	movw	r18, r16
    a28a:	b7 01       	movw	r22, r14
    a28c:	a6 01       	movw	r20, r12
    a28e:	ce 01       	movw	r24, r28
    a290:	b2 dc       	rcall	.-1692   	; 0x9bf6 <put_fat>
    a292:	00 97       	sbiw	r24, 0x00	; 0
    a294:	99 f5       	brne	.+102    	; 0xa2fc <create_chain+0x226>
    a296:	41 14       	cp	r4, r1
    a298:	51 04       	cpc	r5, r1
    a29a:	61 04       	cpc	r6, r1
    a29c:	71 04       	cpc	r7, r1
    a29e:	e9 f4       	brne	.+58     	; 0xa2da <create_chain+0x204>
    a2a0:	cd 86       	std	Y+13, r12	; 0x0d
    a2a2:	de 86       	std	Y+14, r13	; 0x0e
    a2a4:	ef 86       	std	Y+15, r14	; 0x0f
    a2a6:	f8 8a       	std	Y+16, r15	; 0x10
    a2a8:	89 89       	ldd	r24, Y+17	; 0x11
    a2aa:	9a 89       	ldd	r25, Y+18	; 0x12
    a2ac:	ab 89       	ldd	r26, Y+19	; 0x13
    a2ae:	bc 89       	ldd	r27, Y+20	; 0x14
    a2b0:	49 8d       	ldd	r20, Y+25	; 0x19
    a2b2:	5a 8d       	ldd	r21, Y+26	; 0x1a
    a2b4:	6b 8d       	ldd	r22, Y+27	; 0x1b
    a2b6:	7c 8d       	ldd	r23, Y+28	; 0x1c
    a2b8:	42 50       	subi	r20, 0x02	; 2
    a2ba:	51 09       	sbc	r21, r1
    a2bc:	61 09       	sbc	r22, r1
    a2be:	71 09       	sbc	r23, r1
    a2c0:	48 17       	cp	r20, r24
    a2c2:	59 07       	cpc	r21, r25
    a2c4:	6a 07       	cpc	r22, r26
    a2c6:	7b 07       	cpc	r23, r27
    a2c8:	88 f0       	brcs	.+34     	; 0xa2ec <create_chain+0x216>
    a2ca:	01 97       	sbiw	r24, 0x01	; 1
    a2cc:	a1 09       	sbc	r26, r1
    a2ce:	b1 09       	sbc	r27, r1
    a2d0:	89 8b       	std	Y+17, r24	; 0x11
    a2d2:	9a 8b       	std	Y+18, r25	; 0x12
    a2d4:	ab 8b       	std	Y+19, r26	; 0x13
    a2d6:	bc 8b       	std	Y+20, r27	; 0x14
    a2d8:	09 c0       	rjmp	.+18     	; 0xa2ec <create_chain+0x216>
    a2da:	97 01       	movw	r18, r14
    a2dc:	86 01       	movw	r16, r12
    a2de:	b3 01       	movw	r22, r6
    a2e0:	a2 01       	movw	r20, r4
    a2e2:	ce 01       	movw	r24, r28
    a2e4:	88 dc       	rcall	.-1776   	; 0x9bf6 <put_fat>
    a2e6:	00 97       	sbiw	r24, 0x00	; 0
    a2e8:	d9 f2       	breq	.-74     	; 0xa2a0 <create_chain+0x1ca>
    a2ea:	08 c0       	rjmp	.+16     	; 0xa2fc <create_chain+0x226>
    a2ec:	8c 81       	ldd	r24, Y+4	; 0x04
    a2ee:	81 60       	ori	r24, 0x01	; 1
    a2f0:	8c 83       	std	Y+4, r24	; 0x04
    a2f2:	4c 2d       	mov	r20, r12
    a2f4:	3d 2d       	mov	r19, r13
    a2f6:	2e 2d       	mov	r18, r14
    a2f8:	9f 2d       	mov	r25, r15
    a2fa:	0b c0       	rjmp	.+22     	; 0xa312 <create_chain+0x23c>
    a2fc:	01 97       	sbiw	r24, 0x01	; 1
    a2fe:	09 f4       	brne	.+2      	; 0xa302 <create_chain+0x22c>
    a300:	1c cf       	rjmp	.-456    	; 0xa13a <create_chain+0x64>
    a302:	41 e0       	ldi	r20, 0x01	; 1
    a304:	30 e0       	ldi	r19, 0x00	; 0
    a306:	20 e0       	ldi	r18, 0x00	; 0
    a308:	90 e0       	ldi	r25, 0x00	; 0
    a30a:	03 c0       	rjmp	.+6      	; 0xa312 <create_chain+0x23c>
    a30c:	46 2f       	mov	r20, r22
    a30e:	37 2f       	mov	r19, r23
    a310:	28 2f       	mov	r18, r24
    a312:	64 2f       	mov	r22, r20
    a314:	73 2f       	mov	r23, r19
    a316:	82 2f       	mov	r24, r18
    a318:	cd b7       	in	r28, 0x3d	; 61
    a31a:	de b7       	in	r29, 0x3e	; 62
    a31c:	e0 e1       	ldi	r30, 0x10	; 16
    a31e:	0c 94 fc df 	jmp	0x1bff8	; 0x1bff8 <__epilogue_restores__+0x4>

0000a322 <remove_chain>:
    a322:	4f 92       	push	r4
    a324:	5f 92       	push	r5
    a326:	6f 92       	push	r6
    a328:	7f 92       	push	r7
    a32a:	af 92       	push	r10
    a32c:	bf 92       	push	r11
    a32e:	cf 92       	push	r12
    a330:	df 92       	push	r13
    a332:	ef 92       	push	r14
    a334:	ff 92       	push	r15
    a336:	0f 93       	push	r16
    a338:	1f 93       	push	r17
    a33a:	cf 93       	push	r28
    a33c:	df 93       	push	r29
    a33e:	5c 01       	movw	r10, r24
    a340:	6a 01       	movw	r12, r20
    a342:	7b 01       	movw	r14, r22
    a344:	b9 01       	movw	r22, r18
    a346:	a8 01       	movw	r20, r16
    a348:	22 e0       	ldi	r18, 0x02	; 2
    a34a:	c2 16       	cp	r12, r18
    a34c:	d1 04       	cpc	r13, r1
    a34e:	e1 04       	cpc	r14, r1
    a350:	f1 04       	cpc	r15, r1
    a352:	10 f4       	brcc	.+4      	; 0xa358 <remove_chain+0x36>
    a354:	22 e0       	ldi	r18, 0x02	; 2
    a356:	27 c0       	rjmp	.+78     	; 0xa3a6 <remove_chain+0x84>
    a358:	fc 01       	movw	r30, r24
    a35a:	c0 81       	ld	r28, Z
    a35c:	d1 81       	ldd	r29, Z+1	; 0x01
    a35e:	89 8d       	ldd	r24, Y+25	; 0x19
    a360:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a362:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a364:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a366:	c8 16       	cp	r12, r24
    a368:	d9 06       	cpc	r13, r25
    a36a:	ea 06       	cpc	r14, r26
    a36c:	fb 06       	cpc	r15, r27
    a36e:	90 f7       	brcc	.-28     	; 0xa354 <remove_chain+0x32>
    a370:	41 15       	cp	r20, r1
    a372:	51 05       	cpc	r21, r1
    a374:	61 05       	cpc	r22, r1
    a376:	71 05       	cpc	r23, r1
    a378:	41 f0       	breq	.+16     	; 0xa38a <remove_chain+0x68>
    a37a:	0f ef       	ldi	r16, 0xFF	; 255
    a37c:	1f ef       	ldi	r17, 0xFF	; 255
    a37e:	98 01       	movw	r18, r16
    a380:	ce 01       	movw	r24, r28
    a382:	39 dc       	rcall	.-1934   	; 0x9bf6 <put_fat>
    a384:	00 97       	sbiw	r24, 0x00	; 0
    a386:	09 f0       	breq	.+2      	; 0xa38a <remove_chain+0x68>
    a388:	4c c0       	rjmp	.+152    	; 0xa422 <remove_chain+0x100>
    a38a:	b7 01       	movw	r22, r14
    a38c:	a6 01       	movw	r20, r12
    a38e:	f5 01       	movw	r30, r10
    a390:	80 81       	ld	r24, Z
    a392:	91 81       	ldd	r25, Z+1	; 0x01
    a394:	2b dd       	rcall	.-1450   	; 0x9dec <get_fat.isra.10>
    a396:	2b 01       	movw	r4, r22
    a398:	3c 01       	movw	r6, r24
    a39a:	61 15       	cp	r22, r1
    a39c:	71 05       	cpc	r23, r1
    a39e:	81 05       	cpc	r24, r1
    a3a0:	91 05       	cpc	r25, r1
    a3a2:	19 f4       	brne	.+6      	; 0xa3aa <remove_chain+0x88>
    a3a4:	20 e0       	ldi	r18, 0x00	; 0
    a3a6:	90 e0       	ldi	r25, 0x00	; 0
    a3a8:	3d c0       	rjmp	.+122    	; 0xa424 <remove_chain+0x102>
    a3aa:	61 30       	cpi	r22, 0x01	; 1
    a3ac:	71 05       	cpc	r23, r1
    a3ae:	81 05       	cpc	r24, r1
    a3b0:	91 05       	cpc	r25, r1
    a3b2:	81 f2       	breq	.-96     	; 0xa354 <remove_chain+0x32>
    a3b4:	6f 3f       	cpi	r22, 0xFF	; 255
    a3b6:	7f 4f       	sbci	r23, 0xFF	; 255
    a3b8:	8f 4f       	sbci	r24, 0xFF	; 255
    a3ba:	9f 4f       	sbci	r25, 0xFF	; 255
    a3bc:	81 f1       	breq	.+96     	; 0xa41e <remove_chain+0xfc>
    a3be:	00 e0       	ldi	r16, 0x00	; 0
    a3c0:	10 e0       	ldi	r17, 0x00	; 0
    a3c2:	98 01       	movw	r18, r16
    a3c4:	b7 01       	movw	r22, r14
    a3c6:	a6 01       	movw	r20, r12
    a3c8:	ce 01       	movw	r24, r28
    a3ca:	15 dc       	rcall	.-2006   	; 0x9bf6 <put_fat>
    a3cc:	00 97       	sbiw	r24, 0x00	; 0
    a3ce:	49 f5       	brne	.+82     	; 0xa422 <remove_chain+0x100>
    a3d0:	89 89       	ldd	r24, Y+17	; 0x11
    a3d2:	9a 89       	ldd	r25, Y+18	; 0x12
    a3d4:	ab 89       	ldd	r26, Y+19	; 0x13
    a3d6:	bc 89       	ldd	r27, Y+20	; 0x14
    a3d8:	49 8d       	ldd	r20, Y+25	; 0x19
    a3da:	5a 8d       	ldd	r21, Y+26	; 0x1a
    a3dc:	6b 8d       	ldd	r22, Y+27	; 0x1b
    a3de:	7c 8d       	ldd	r23, Y+28	; 0x1c
    a3e0:	6a 01       	movw	r12, r20
    a3e2:	7b 01       	movw	r14, r22
    a3e4:	e2 e0       	ldi	r30, 0x02	; 2
    a3e6:	ce 1a       	sub	r12, r30
    a3e8:	d1 08       	sbc	r13, r1
    a3ea:	e1 08       	sbc	r14, r1
    a3ec:	f1 08       	sbc	r15, r1
    a3ee:	8c 15       	cp	r24, r12
    a3f0:	9d 05       	cpc	r25, r13
    a3f2:	ae 05       	cpc	r26, r14
    a3f4:	bf 05       	cpc	r27, r15
    a3f6:	50 f4       	brcc	.+20     	; 0xa40c <remove_chain+0xea>
    a3f8:	01 96       	adiw	r24, 0x01	; 1
    a3fa:	a1 1d       	adc	r26, r1
    a3fc:	b1 1d       	adc	r27, r1
    a3fe:	89 8b       	std	Y+17, r24	; 0x11
    a400:	9a 8b       	std	Y+18, r25	; 0x12
    a402:	ab 8b       	std	Y+19, r26	; 0x13
    a404:	bc 8b       	std	Y+20, r27	; 0x14
    a406:	8c 81       	ldd	r24, Y+4	; 0x04
    a408:	81 60       	ori	r24, 0x01	; 1
    a40a:	8c 83       	std	Y+4, r24	; 0x04
    a40c:	73 01       	movw	r14, r6
    a40e:	62 01       	movw	r12, r4
    a410:	44 16       	cp	r4, r20
    a412:	55 06       	cpc	r5, r21
    a414:	66 06       	cpc	r6, r22
    a416:	77 06       	cpc	r7, r23
    a418:	08 f4       	brcc	.+2      	; 0xa41c <remove_chain+0xfa>
    a41a:	b7 cf       	rjmp	.-146    	; 0xa38a <remove_chain+0x68>
    a41c:	c3 cf       	rjmp	.-122    	; 0xa3a4 <remove_chain+0x82>
    a41e:	21 e0       	ldi	r18, 0x01	; 1
    a420:	c2 cf       	rjmp	.-124    	; 0xa3a6 <remove_chain+0x84>
    a422:	28 2f       	mov	r18, r24
    a424:	82 2f       	mov	r24, r18
    a426:	df 91       	pop	r29
    a428:	cf 91       	pop	r28
    a42a:	1f 91       	pop	r17
    a42c:	0f 91       	pop	r16
    a42e:	ff 90       	pop	r15
    a430:	ef 90       	pop	r14
    a432:	df 90       	pop	r13
    a434:	cf 90       	pop	r12
    a436:	bf 90       	pop	r11
    a438:	af 90       	pop	r10
    a43a:	7f 90       	pop	r7
    a43c:	6f 90       	pop	r6
    a43e:	5f 90       	pop	r5
    a440:	4f 90       	pop	r4
    a442:	08 95       	ret

0000a444 <dir_next>:
    a444:	4f 92       	push	r4
    a446:	5f 92       	push	r5
    a448:	6f 92       	push	r6
    a44a:	7f 92       	push	r7
    a44c:	af 92       	push	r10
    a44e:	bf 92       	push	r11
    a450:	cf 92       	push	r12
    a452:	df 92       	push	r13
    a454:	ef 92       	push	r14
    a456:	ff 92       	push	r15
    a458:	0f 93       	push	r16
    a45a:	1f 93       	push	r17
    a45c:	cf 93       	push	r28
    a45e:	df 93       	push	r29
    a460:	ec 01       	movw	r28, r24
    a462:	08 81       	ld	r16, Y
    a464:	19 81       	ldd	r17, Y+1	; 0x01
    a466:	ce 84       	ldd	r12, Y+14	; 0x0e
    a468:	df 84       	ldd	r13, Y+15	; 0x0f
    a46a:	e8 88       	ldd	r14, Y+16	; 0x10
    a46c:	f9 88       	ldd	r15, Y+17	; 0x11
    a46e:	80 e2       	ldi	r24, 0x20	; 32
    a470:	c8 0e       	add	r12, r24
    a472:	d1 1c       	adc	r13, r1
    a474:	e1 1c       	adc	r14, r1
    a476:	f1 1c       	adc	r15, r1
    a478:	c1 14       	cp	r12, r1
    a47a:	d1 04       	cpc	r13, r1
    a47c:	e0 e2       	ldi	r30, 0x20	; 32
    a47e:	ee 06       	cpc	r14, r30
    a480:	f1 04       	cpc	r15, r1
    a482:	20 f0       	brcs	.+8      	; 0xa48c <dir_next+0x48>
    a484:	1e 8a       	std	Y+22, r1	; 0x16
    a486:	1f 8a       	std	Y+23, r1	; 0x17
    a488:	18 8e       	std	Y+24, r1	; 0x18
    a48a:	19 8e       	std	Y+25, r1	; 0x19
    a48c:	8e 89       	ldd	r24, Y+22	; 0x16
    a48e:	9f 89       	ldd	r25, Y+23	; 0x17
    a490:	a8 8d       	ldd	r26, Y+24	; 0x18
    a492:	b9 8d       	ldd	r27, Y+25	; 0x19
    a494:	00 97       	sbiw	r24, 0x00	; 0
    a496:	a1 05       	cpc	r26, r1
    a498:	b1 05       	cpc	r27, r1
    a49a:	09 f4       	brne	.+2      	; 0xa49e <dir_next+0x5a>
    a49c:	a7 c0       	rjmp	.+334    	; 0xa5ec <dir_next+0x1a8>
    a49e:	5b 01       	movw	r10, r22
    a4a0:	b7 01       	movw	r22, r14
    a4a2:	a6 01       	movw	r20, r12
    a4a4:	51 70       	andi	r21, 0x01	; 1
    a4a6:	66 27       	eor	r22, r22
    a4a8:	77 27       	eor	r23, r23
    a4aa:	45 2b       	or	r20, r21
    a4ac:	46 2b       	or	r20, r22
    a4ae:	47 2b       	or	r20, r23
    a4b0:	09 f0       	breq	.+2      	; 0xa4b4 <dir_next+0x70>
    a4b2:	8d c0       	rjmp	.+282    	; 0xa5ce <dir_next+0x18a>
    a4b4:	01 96       	adiw	r24, 0x01	; 1
    a4b6:	a1 1d       	adc	r26, r1
    a4b8:	b1 1d       	adc	r27, r1
    a4ba:	8e 8b       	std	Y+22, r24	; 0x16
    a4bc:	9f 8b       	std	Y+23, r25	; 0x17
    a4be:	a8 8f       	std	Y+24, r26	; 0x18
    a4c0:	b9 8f       	std	Y+25, r27	; 0x19
    a4c2:	4a 89       	ldd	r20, Y+18	; 0x12
    a4c4:	5b 89       	ldd	r21, Y+19	; 0x13
    a4c6:	6c 89       	ldd	r22, Y+20	; 0x14
    a4c8:	7d 89       	ldd	r23, Y+21	; 0x15
    a4ca:	f8 01       	movw	r30, r16
    a4cc:	41 15       	cp	r20, r1
    a4ce:	51 05       	cpc	r21, r1
    a4d0:	61 05       	cpc	r22, r1
    a4d2:	71 05       	cpc	r23, r1
    a4d4:	c1 f4       	brne	.+48     	; 0xa506 <dir_next+0xc2>
    a4d6:	87 81       	ldd	r24, Z+7	; 0x07
    a4d8:	90 85       	ldd	r25, Z+8	; 0x08
    a4da:	a0 e0       	ldi	r26, 0x00	; 0
    a4dc:	b0 e0       	ldi	r27, 0x00	; 0
    a4de:	b7 01       	movw	r22, r14
    a4e0:	a6 01       	movw	r20, r12
    a4e2:	35 e0       	ldi	r19, 0x05	; 5
    a4e4:	76 95       	lsr	r23
    a4e6:	67 95       	ror	r22
    a4e8:	57 95       	ror	r21
    a4ea:	47 95       	ror	r20
    a4ec:	3a 95       	dec	r19
    a4ee:	d1 f7       	brne	.-12     	; 0xa4e4 <dir_next+0xa0>
    a4f0:	48 17       	cp	r20, r24
    a4f2:	59 07       	cpc	r21, r25
    a4f4:	6a 07       	cpc	r22, r26
    a4f6:	7b 07       	cpc	r23, r27
    a4f8:	08 f4       	brcc	.+2      	; 0xa4fc <dir_next+0xb8>
    a4fa:	69 c0       	rjmp	.+210    	; 0xa5ce <dir_next+0x18a>
    a4fc:	1e 8a       	std	Y+22, r1	; 0x16
    a4fe:	1f 8a       	std	Y+23, r1	; 0x17
    a500:	18 8e       	std	Y+24, r1	; 0x18
    a502:	19 8e       	std	Y+25, r1	; 0x19
    a504:	73 c0       	rjmp	.+230    	; 0xa5ec <dir_next+0x1a8>
    a506:	81 85       	ldd	r24, Z+9	; 0x09
    a508:	92 85       	ldd	r25, Z+10	; 0x0a
    a50a:	01 97       	sbiw	r24, 0x01	; 1
    a50c:	a0 e0       	ldi	r26, 0x00	; 0
    a50e:	b0 e0       	ldi	r27, 0x00	; 0
    a510:	26 01       	movw	r4, r12
    a512:	37 01       	movw	r6, r14
    a514:	29 e0       	ldi	r18, 0x09	; 9
    a516:	76 94       	lsr	r7
    a518:	67 94       	ror	r6
    a51a:	57 94       	ror	r5
    a51c:	47 94       	ror	r4
    a51e:	2a 95       	dec	r18
    a520:	d1 f7       	brne	.-12     	; 0xa516 <dir_next+0xd2>
    a522:	84 21       	and	r24, r4
    a524:	95 21       	and	r25, r5
    a526:	a6 21       	and	r26, r6
    a528:	b7 21       	and	r27, r7
    a52a:	89 2b       	or	r24, r25
    a52c:	8a 2b       	or	r24, r26
    a52e:	8b 2b       	or	r24, r27
    a530:	09 f0       	breq	.+2      	; 0xa534 <dir_next+0xf0>
    a532:	4d c0       	rjmp	.+154    	; 0xa5ce <dir_next+0x18a>
    a534:	c8 01       	movw	r24, r16
    a536:	5a dc       	rcall	.-1868   	; 0x9dec <get_fat.isra.10>
    a538:	2b 01       	movw	r4, r22
    a53a:	3c 01       	movw	r6, r24
    a53c:	62 30       	cpi	r22, 0x02	; 2
    a53e:	71 05       	cpc	r23, r1
    a540:	81 05       	cpc	r24, r1
    a542:	91 05       	cpc	r25, r1
    a544:	18 f4       	brcc	.+6      	; 0xa54c <dir_next+0x108>
    a546:	82 e0       	ldi	r24, 0x02	; 2
    a548:	90 e0       	ldi	r25, 0x00	; 0
    a54a:	55 c0       	rjmp	.+170    	; 0xa5f6 <dir_next+0x1b2>
    a54c:	8f ef       	ldi	r24, 0xFF	; 255
    a54e:	48 16       	cp	r4, r24
    a550:	58 06       	cpc	r5, r24
    a552:	68 06       	cpc	r6, r24
    a554:	78 06       	cpc	r7, r24
    a556:	19 f4       	brne	.+6      	; 0xa55e <dir_next+0x11a>
    a558:	81 e0       	ldi	r24, 0x01	; 1
    a55a:	90 e0       	ldi	r25, 0x00	; 0
    a55c:	4c c0       	rjmp	.+152    	; 0xa5f6 <dir_next+0x1b2>
    a55e:	f8 01       	movw	r30, r16
    a560:	81 8d       	ldd	r24, Z+25	; 0x19
    a562:	92 8d       	ldd	r25, Z+26	; 0x1a
    a564:	a3 8d       	ldd	r26, Z+27	; 0x1b
    a566:	b4 8d       	ldd	r27, Z+28	; 0x1c
    a568:	48 16       	cp	r4, r24
    a56a:	59 06       	cpc	r5, r25
    a56c:	6a 06       	cpc	r6, r26
    a56e:	7b 06       	cpc	r7, r27
    a570:	08 f1       	brcs	.+66     	; 0xa5b4 <dir_next+0x170>
    a572:	ab 28       	or	r10, r11
    a574:	19 f2       	breq	.-122    	; 0xa4fc <dir_next+0xb8>
    a576:	4a 89       	ldd	r20, Y+18	; 0x12
    a578:	5b 89       	ldd	r21, Y+19	; 0x13
    a57a:	6c 89       	ldd	r22, Y+20	; 0x14
    a57c:	7d 89       	ldd	r23, Y+21	; 0x15
    a57e:	ce 01       	movw	r24, r28
    a580:	aa dd       	rcall	.-1196   	; 0xa0d6 <create_chain>
    a582:	2b 01       	movw	r4, r22
    a584:	3c 01       	movw	r6, r24
    a586:	61 15       	cp	r22, r1
    a588:	71 05       	cpc	r23, r1
    a58a:	81 05       	cpc	r24, r1
    a58c:	91 05       	cpc	r25, r1
    a58e:	89 f1       	breq	.+98     	; 0xa5f2 <dir_next+0x1ae>
    a590:	61 30       	cpi	r22, 0x01	; 1
    a592:	71 05       	cpc	r23, r1
    a594:	81 05       	cpc	r24, r1
    a596:	91 05       	cpc	r25, r1
    a598:	b1 f2       	breq	.-84     	; 0xa546 <dir_next+0x102>
    a59a:	8f ef       	ldi	r24, 0xFF	; 255
    a59c:	48 16       	cp	r4, r24
    a59e:	58 06       	cpc	r5, r24
    a5a0:	68 06       	cpc	r6, r24
    a5a2:	78 06       	cpc	r7, r24
    a5a4:	c9 f2       	breq	.-78     	; 0xa558 <dir_next+0x114>
    a5a6:	b3 01       	movw	r22, r6
    a5a8:	a2 01       	movw	r20, r4
    a5aa:	c8 01       	movw	r24, r16
    a5ac:	0e 94 7e 4a 	call	0x94fc	; 0x94fc <dir_clear>
    a5b0:	89 2b       	or	r24, r25
    a5b2:	91 f6       	brne	.-92     	; 0xa558 <dir_next+0x114>
    a5b4:	4a 8a       	std	Y+18, r4	; 0x12
    a5b6:	5b 8a       	std	Y+19, r5	; 0x13
    a5b8:	6c 8a       	std	Y+20, r6	; 0x14
    a5ba:	7d 8a       	std	Y+21, r7	; 0x15
    a5bc:	b3 01       	movw	r22, r6
    a5be:	a2 01       	movw	r20, r4
    a5c0:	c8 01       	movw	r24, r16
    a5c2:	0e 94 04 47 	call	0x8e08	; 0x8e08 <clst2sect>
    a5c6:	6e 8b       	std	Y+22, r22	; 0x16
    a5c8:	7f 8b       	std	Y+23, r23	; 0x17
    a5ca:	88 8f       	std	Y+24, r24	; 0x18
    a5cc:	99 8f       	std	Y+25, r25	; 0x19
    a5ce:	ce 86       	std	Y+14, r12	; 0x0e
    a5d0:	df 86       	std	Y+15, r13	; 0x0f
    a5d2:	e8 8a       	std	Y+16, r14	; 0x10
    a5d4:	f9 8a       	std	Y+17, r15	; 0x11
    a5d6:	0b 5c       	subi	r16, 0xCB	; 203
    a5d8:	1f 4f       	sbci	r17, 0xFF	; 255
    a5da:	e1 e0       	ldi	r30, 0x01	; 1
    a5dc:	de 22       	and	r13, r30
    a5de:	c0 0e       	add	r12, r16
    a5e0:	d1 1e       	adc	r13, r17
    a5e2:	db 8e       	std	Y+27, r13	; 0x1b
    a5e4:	ca 8e       	std	Y+26, r12	; 0x1a
    a5e6:	80 e0       	ldi	r24, 0x00	; 0
    a5e8:	90 e0       	ldi	r25, 0x00	; 0
    a5ea:	05 c0       	rjmp	.+10     	; 0xa5f6 <dir_next+0x1b2>
    a5ec:	84 e0       	ldi	r24, 0x04	; 4
    a5ee:	90 e0       	ldi	r25, 0x00	; 0
    a5f0:	02 c0       	rjmp	.+4      	; 0xa5f6 <dir_next+0x1b2>
    a5f2:	87 e0       	ldi	r24, 0x07	; 7
    a5f4:	90 e0       	ldi	r25, 0x00	; 0
    a5f6:	df 91       	pop	r29
    a5f8:	cf 91       	pop	r28
    a5fa:	1f 91       	pop	r17
    a5fc:	0f 91       	pop	r16
    a5fe:	ff 90       	pop	r15
    a600:	ef 90       	pop	r14
    a602:	df 90       	pop	r13
    a604:	cf 90       	pop	r12
    a606:	bf 90       	pop	r11
    a608:	af 90       	pop	r10
    a60a:	7f 90       	pop	r7
    a60c:	6f 90       	pop	r6
    a60e:	5f 90       	pop	r5
    a610:	4f 90       	pop	r4
    a612:	08 95       	ret

0000a614 <dir_alloc>:
    a614:	a0 e0       	ldi	r26, 0x00	; 0
    a616:	b0 e0       	ldi	r27, 0x00	; 0
    a618:	e0 e1       	ldi	r30, 0x10	; 16
    a61a:	f3 e5       	ldi	r31, 0x53	; 83
    a61c:	0c 94 e8 df 	jmp	0x1bfd0	; 0x1bfd0 <__prologue_saves__+0x14>
    a620:	ec 01       	movw	r28, r24
    a622:	6b 01       	movw	r12, r22
    a624:	e8 80       	ld	r14, Y
    a626:	f9 80       	ldd	r15, Y+1	; 0x01
    a628:	40 e0       	ldi	r20, 0x00	; 0
    a62a:	50 e0       	ldi	r21, 0x00	; 0
    a62c:	ba 01       	movw	r22, r20
    a62e:	92 dc       	rcall	.-1756   	; 0x9f54 <dir_sdi>
    a630:	00 97       	sbiw	r24, 0x00	; 0
    a632:	f9 f4       	brne	.+62     	; 0xa672 <dir_alloc+0x5e>
    a634:	00 e0       	ldi	r16, 0x00	; 0
    a636:	10 e0       	ldi	r17, 0x00	; 0
    a638:	4e 89       	ldd	r20, Y+22	; 0x16
    a63a:	5f 89       	ldd	r21, Y+23	; 0x17
    a63c:	68 8d       	ldd	r22, Y+24	; 0x18
    a63e:	79 8d       	ldd	r23, Y+25	; 0x19
    a640:	c7 01       	movw	r24, r14
    a642:	04 d8       	rcall	.-4088   	; 0x964c <move_window>
    a644:	00 97       	sbiw	r24, 0x00	; 0
    a646:	a9 f4       	brne	.+42     	; 0xa672 <dir_alloc+0x5e>
    a648:	ea 8d       	ldd	r30, Y+26	; 0x1a
    a64a:	fb 8d       	ldd	r31, Y+27	; 0x1b
    a64c:	20 81       	ld	r18, Z
    a64e:	25 3e       	cpi	r18, 0xE5	; 229
    a650:	11 f0       	breq	.+4      	; 0xa656 <dir_alloc+0x42>
    a652:	21 11       	cpse	r18, r1
    a654:	06 c0       	rjmp	.+12     	; 0xa662 <dir_alloc+0x4e>
    a656:	0f 5f       	subi	r16, 0xFF	; 255
    a658:	1f 4f       	sbci	r17, 0xFF	; 255
    a65a:	0c 15       	cp	r16, r12
    a65c:	1d 05       	cpc	r17, r13
    a65e:	19 f4       	brne	.+6      	; 0xa666 <dir_alloc+0x52>
    a660:	0d c0       	rjmp	.+26     	; 0xa67c <dir_alloc+0x68>
    a662:	00 e0       	ldi	r16, 0x00	; 0
    a664:	10 e0       	ldi	r17, 0x00	; 0
    a666:	61 e0       	ldi	r22, 0x01	; 1
    a668:	70 e0       	ldi	r23, 0x00	; 0
    a66a:	ce 01       	movw	r24, r28
    a66c:	eb de       	rcall	.-554    	; 0xa444 <dir_next>
    a66e:	00 97       	sbiw	r24, 0x00	; 0
    a670:	19 f3       	breq	.-58     	; 0xa638 <dir_alloc+0x24>
    a672:	84 30       	cpi	r24, 0x04	; 4
    a674:	91 05       	cpc	r25, r1
    a676:	11 f4       	brne	.+4      	; 0xa67c <dir_alloc+0x68>
    a678:	87 e0       	ldi	r24, 0x07	; 7
    a67a:	90 e0       	ldi	r25, 0x00	; 0
    a67c:	cd b7       	in	r28, 0x3d	; 61
    a67e:	de b7       	in	r29, 0x3e	; 62
    a680:	e8 e0       	ldi	r30, 0x08	; 8
    a682:	0c 94 04 e0 	jmp	0x1c008	; 0x1c008 <__epilogue_restores__+0x14>

0000a686 <dir_read>:
    a686:	a0 e0       	ldi	r26, 0x00	; 0
    a688:	b0 e0       	ldi	r27, 0x00	; 0
    a68a:	e9 e4       	ldi	r30, 0x49	; 73
    a68c:	f3 e5       	ldi	r31, 0x53	; 83
    a68e:	0c 94 e4 df 	jmp	0x1bfc8	; 0x1bfc8 <__prologue_saves__+0xc>
    a692:	ec 01       	movw	r28, r24
    a694:	7b 01       	movw	r14, r22
    a696:	a8 80       	ld	r10, Y
    a698:	b9 80       	ldd	r11, Y+1	; 0x01
    a69a:	dd 24       	eor	r13, r13
    a69c:	da 94       	dec	r13
    a69e:	1f ef       	ldi	r17, 0xFF	; 255
    a6a0:	84 e0       	ldi	r24, 0x04	; 4
    a6a2:	90 e0       	ldi	r25, 0x00	; 0
    a6a4:	fd e0       	ldi	r31, 0x0D	; 13
    a6a6:	cf 2e       	mov	r12, r31
    a6a8:	4e 89       	ldd	r20, Y+22	; 0x16
    a6aa:	5f 89       	ldd	r21, Y+23	; 0x17
    a6ac:	68 8d       	ldd	r22, Y+24	; 0x18
    a6ae:	79 8d       	ldd	r23, Y+25	; 0x19
    a6b0:	41 15       	cp	r20, r1
    a6b2:	51 05       	cpc	r21, r1
    a6b4:	61 05       	cpc	r22, r1
    a6b6:	71 05       	cpc	r23, r1
    a6b8:	09 f4       	brne	.+2      	; 0xa6bc <dir_read+0x36>
    a6ba:	9a c0       	rjmp	.+308    	; 0xa7f0 <dir_read+0x16a>
    a6bc:	c5 01       	movw	r24, r10
    a6be:	0e 94 26 4b 	call	0x964c	; 0x964c <move_window>
    a6c2:	00 97       	sbiw	r24, 0x00	; 0
    a6c4:	09 f0       	breq	.+2      	; 0xa6c8 <dir_read+0x42>
    a6c6:	96 c0       	rjmp	.+300    	; 0xa7f4 <dir_read+0x16e>
    a6c8:	8a 8c       	ldd	r8, Y+26	; 0x1a
    a6ca:	9b 8c       	ldd	r9, Y+27	; 0x1b
    a6cc:	f4 01       	movw	r30, r8
    a6ce:	00 81       	ld	r16, Z
    a6d0:	00 23       	and	r16, r16
    a6d2:	09 f4       	brne	.+2      	; 0xa6d6 <dir_read+0x50>
    a6d4:	97 c0       	rjmp	.+302    	; 0xa804 <dir_read+0x17e>
    a6d6:	83 85       	ldd	r24, Z+11	; 0x0b
    a6d8:	8f 73       	andi	r24, 0x3F	; 63
    a6da:	8c 83       	std	Y+4, r24	; 0x04
    a6dc:	05 3e       	cpi	r16, 0xE5	; 229
    a6de:	09 f4       	brne	.+2      	; 0xa6e2 <dir_read+0x5c>
    a6e0:	7e c0       	rjmp	.+252    	; 0xa7de <dir_read+0x158>
    a6e2:	0e 32       	cpi	r16, 0x2E	; 46
    a6e4:	09 f4       	brne	.+2      	; 0xa6e8 <dir_read+0x62>
    a6e6:	7b c0       	rjmp	.+246    	; 0xa7de <dir_read+0x158>
    a6e8:	21 e0       	ldi	r18, 0x01	; 1
    a6ea:	30 e0       	ldi	r19, 0x00	; 0
    a6ec:	98 2f       	mov	r25, r24
    a6ee:	9f 71       	andi	r25, 0x1F	; 31
    a6f0:	98 30       	cpi	r25, 0x08	; 8
    a6f2:	11 f0       	breq	.+4      	; 0xa6f8 <dir_read+0x72>
    a6f4:	20 e0       	ldi	r18, 0x00	; 0
    a6f6:	30 e0       	ldi	r19, 0x00	; 0
    a6f8:	2e 15       	cp	r18, r14
    a6fa:	3f 05       	cpc	r19, r15
    a6fc:	09 f0       	breq	.+2      	; 0xa700 <dir_read+0x7a>
    a6fe:	6f c0       	rjmp	.+222    	; 0xa7de <dir_read+0x158>
    a700:	8f 30       	cpi	r24, 0x0F	; 15
    a702:	09 f0       	breq	.+2      	; 0xa706 <dir_read+0x80>
    a704:	5c c0       	rjmp	.+184    	; 0xa7be <dir_read+0x138>
    a706:	06 ff       	sbrs	r16, 6
    a708:	0c c0       	rjmp	.+24     	; 0xa722 <dir_read+0x9c>
    a70a:	f4 01       	movw	r30, r8
    a70c:	85 85       	ldd	r24, Z+13	; 0x0d
    a70e:	0f 7b       	andi	r16, 0xBF	; 191
    a710:	4e 85       	ldd	r20, Y+14	; 0x0e
    a712:	5f 85       	ldd	r21, Y+15	; 0x0f
    a714:	68 89       	ldd	r22, Y+16	; 0x10
    a716:	79 89       	ldd	r23, Y+17	; 0x11
    a718:	48 a7       	std	Y+40, r20	; 0x28
    a71a:	59 a7       	std	Y+41, r21	; 0x29
    a71c:	6a a7       	std	Y+42, r22	; 0x2a
    a71e:	7b a7       	std	Y+43, r23	; 0x2b
    a720:	03 c0       	rjmp	.+6      	; 0xa728 <dir_read+0xa2>
    a722:	10 13       	cpse	r17, r16
    a724:	5c c0       	rjmp	.+184    	; 0xa7de <dir_read+0x158>
    a726:	8d 2d       	mov	r24, r13
    a728:	f4 01       	movw	r30, r8
    a72a:	d5 84       	ldd	r13, Z+13	; 0x0d
    a72c:	d8 12       	cpse	r13, r24
    a72e:	56 c0       	rjmp	.+172    	; 0xa7dc <dir_read+0x156>
    a730:	82 8d       	ldd	r24, Z+26	; 0x1a
    a732:	93 8d       	ldd	r25, Z+27	; 0x1b
    a734:	89 2b       	or	r24, r25
    a736:	09 f0       	breq	.+2      	; 0xa73a <dir_read+0xb4>
    a738:	52 c0       	rjmp	.+164    	; 0xa7de <dir_read+0x158>
    a73a:	f5 01       	movw	r30, r10
    a73c:	63 85       	ldd	r22, Z+11	; 0x0b
    a73e:	74 85       	ldd	r23, Z+12	; 0x0c
    a740:	f4 01       	movw	r30, r8
    a742:	80 81       	ld	r24, Z
    a744:	90 e0       	ldi	r25, 0x00	; 0
    a746:	8f 7b       	andi	r24, 0xBF	; 191
    a748:	01 97       	sbiw	r24, 0x01	; 1
    a74a:	c8 9e       	mul	r12, r24
    a74c:	90 01       	movw	r18, r0
    a74e:	c9 9e       	mul	r12, r25
    a750:	30 0d       	add	r19, r0
    a752:	11 24       	eor	r1, r1
    a754:	ad eb       	ldi	r26, 0xBD	; 189
    a756:	b4 e0       	ldi	r27, 0x04	; 4
    a758:	81 e0       	ldi	r24, 0x01	; 1
    a75a:	90 e0       	ldi	r25, 0x00	; 0
    a75c:	4d 91       	ld	r20, X+
    a75e:	f4 01       	movw	r30, r8
    a760:	e4 0f       	add	r30, r20
    a762:	f1 1d       	adc	r31, r1
    a764:	40 81       	ld	r20, Z
    a766:	51 81       	ldd	r21, Z+1	; 0x01
    a768:	00 97       	sbiw	r24, 0x00	; 0
    a76a:	81 f0       	breq	.+32     	; 0xa78c <dir_read+0x106>
    a76c:	2f 3f       	cpi	r18, 0xFF	; 255
    a76e:	31 05       	cpc	r19, r1
    a770:	09 f0       	breq	.+2      	; 0xa774 <dir_read+0xee>
    a772:	a8 f5       	brcc	.+106    	; 0xa7de <dir_read+0x158>
    a774:	c9 01       	movw	r24, r18
    a776:	88 0f       	add	r24, r24
    a778:	99 1f       	adc	r25, r25
    a77a:	86 0f       	add	r24, r22
    a77c:	97 1f       	adc	r25, r23
    a77e:	fc 01       	movw	r30, r24
    a780:	51 83       	std	Z+1, r21	; 0x01
    a782:	40 83       	st	Z, r20
    a784:	ca 01       	movw	r24, r20
    a786:	2f 5f       	subi	r18, 0xFF	; 255
    a788:	3f 4f       	sbci	r19, 0xFF	; 255
    a78a:	03 c0       	rjmp	.+6      	; 0xa792 <dir_read+0x10c>
    a78c:	4f 3f       	cpi	r20, 0xFF	; 255
    a78e:	5f 4f       	sbci	r21, 0xFF	; 255
    a790:	31 f5       	brne	.+76     	; 0xa7de <dir_read+0x158>
    a792:	44 e0       	ldi	r20, 0x04	; 4
    a794:	aa 3c       	cpi	r26, 0xCA	; 202
    a796:	b4 07       	cpc	r27, r20
    a798:	09 f7       	brne	.-62     	; 0xa75c <dir_read+0xd6>
    a79a:	f4 01       	movw	r30, r8
    a79c:	40 81       	ld	r20, Z
    a79e:	46 ff       	sbrs	r20, 6
    a7a0:	2e c0       	rjmp	.+92     	; 0xa7fe <dir_read+0x178>
    a7a2:	89 2b       	or	r24, r25
    a7a4:	61 f1       	breq	.+88     	; 0xa7fe <dir_read+0x178>
    a7a6:	2f 3f       	cpi	r18, 0xFF	; 255
    a7a8:	31 05       	cpc	r19, r1
    a7aa:	09 f0       	breq	.+2      	; 0xa7ae <dir_read+0x128>
    a7ac:	c0 f4       	brcc	.+48     	; 0xa7de <dir_read+0x158>
    a7ae:	22 0f       	add	r18, r18
    a7b0:	33 1f       	adc	r19, r19
    a7b2:	fb 01       	movw	r30, r22
    a7b4:	e2 0f       	add	r30, r18
    a7b6:	f3 1f       	adc	r31, r19
    a7b8:	11 82       	std	Z+1, r1	; 0x01
    a7ba:	10 82       	st	Z, r1
    a7bc:	20 c0       	rjmp	.+64     	; 0xa7fe <dir_read+0x178>
    a7be:	11 11       	cpse	r17, r1
    a7c0:	05 c0       	rjmp	.+10     	; 0xa7cc <dir_read+0x146>
    a7c2:	c4 01       	movw	r24, r8
    a7c4:	0e 94 68 47 	call	0x8ed0	; 0x8ed0 <sum_sfn>
    a7c8:	d8 16       	cp	r13, r24
    a7ca:	f9 f0       	breq	.+62     	; 0xa80a <dir_read+0x184>
    a7cc:	8f ef       	ldi	r24, 0xFF	; 255
    a7ce:	9f ef       	ldi	r25, 0xFF	; 255
    a7d0:	dc 01       	movw	r26, r24
    a7d2:	88 a7       	std	Y+40, r24	; 0x28
    a7d4:	99 a7       	std	Y+41, r25	; 0x29
    a7d6:	aa a7       	std	Y+42, r26	; 0x2a
    a7d8:	bb a7       	std	Y+43, r27	; 0x2b
    a7da:	17 c0       	rjmp	.+46     	; 0xa80a <dir_read+0x184>
    a7dc:	d8 2e       	mov	r13, r24
    a7de:	1f ef       	ldi	r17, 0xFF	; 255
    a7e0:	60 e0       	ldi	r22, 0x00	; 0
    a7e2:	70 e0       	ldi	r23, 0x00	; 0
    a7e4:	ce 01       	movw	r24, r28
    a7e6:	2e de       	rcall	.-932    	; 0xa444 <dir_next>
    a7e8:	00 97       	sbiw	r24, 0x00	; 0
    a7ea:	09 f4       	brne	.+2      	; 0xa7ee <dir_read+0x168>
    a7ec:	5d cf       	rjmp	.-326    	; 0xa6a8 <dir_read+0x22>
    a7ee:	02 c0       	rjmp	.+4      	; 0xa7f4 <dir_read+0x16e>
    a7f0:	00 97       	sbiw	r24, 0x00	; 0
    a7f2:	59 f0       	breq	.+22     	; 0xa80a <dir_read+0x184>
    a7f4:	1e 8a       	std	Y+22, r1	; 0x16
    a7f6:	1f 8a       	std	Y+23, r1	; 0x17
    a7f8:	18 8e       	std	Y+24, r1	; 0x18
    a7fa:	19 8e       	std	Y+25, r1	; 0x19
    a7fc:	08 c0       	rjmp	.+16     	; 0xa80e <dir_read+0x188>
    a7fe:	1f ef       	ldi	r17, 0xFF	; 255
    a800:	10 0f       	add	r17, r16
    a802:	ee cf       	rjmp	.-36     	; 0xa7e0 <dir_read+0x15a>
    a804:	84 e0       	ldi	r24, 0x04	; 4
    a806:	90 e0       	ldi	r25, 0x00	; 0
    a808:	f5 cf       	rjmp	.-22     	; 0xa7f4 <dir_read+0x16e>
    a80a:	80 e0       	ldi	r24, 0x00	; 0
    a80c:	90 e0       	ldi	r25, 0x00	; 0
    a80e:	cd b7       	in	r28, 0x3d	; 61
    a810:	de b7       	in	r29, 0x3e	; 62
    a812:	ec e0       	ldi	r30, 0x0C	; 12
    a814:	0c 94 00 e0 	jmp	0x1c000	; 0x1c000 <__epilogue_restores__+0xc>

0000a818 <dir_remove>:
    a818:	a0 e0       	ldi	r26, 0x00	; 0
    a81a:	b0 e0       	ldi	r27, 0x00	; 0
    a81c:	e2 e1       	ldi	r30, 0x12	; 18
    a81e:	f4 e5       	ldi	r31, 0x54	; 84
    a820:	0c 94 e6 df 	jmp	0x1bfcc	; 0x1bfcc <__prologue_saves__+0x10>
    a824:	ec 01       	movw	r28, r24
    a826:	08 81       	ld	r16, Y
    a828:	19 81       	ldd	r17, Y+1	; 0x01
    a82a:	ce 84       	ldd	r12, Y+14	; 0x0e
    a82c:	df 84       	ldd	r13, Y+15	; 0x0f
    a82e:	e8 88       	ldd	r14, Y+16	; 0x10
    a830:	f9 88       	ldd	r15, Y+17	; 0x11
    a832:	48 a5       	ldd	r20, Y+40	; 0x28
    a834:	59 a5       	ldd	r21, Y+41	; 0x29
    a836:	6a a5       	ldd	r22, Y+42	; 0x2a
    a838:	7b a5       	ldd	r23, Y+43	; 0x2b
    a83a:	4f 3f       	cpi	r20, 0xFF	; 255
    a83c:	8f ef       	ldi	r24, 0xFF	; 255
    a83e:	58 07       	cpc	r21, r24
    a840:	68 07       	cpc	r22, r24
    a842:	78 07       	cpc	r23, r24
    a844:	29 f4       	brne	.+10     	; 0xa850 <dir_remove+0x38>
    a846:	85 ee       	ldi	r24, 0xE5	; 229
    a848:	b8 2e       	mov	r11, r24
    a84a:	aa 24       	eor	r10, r10
    a84c:	a3 94       	inc	r10
    a84e:	19 c0       	rjmp	.+50     	; 0xa882 <dir_remove+0x6a>
    a850:	ce 01       	movw	r24, r28
    a852:	80 db       	rcall	.-2304   	; 0x9f54 <dir_sdi>
    a854:	00 97       	sbiw	r24, 0x00	; 0
    a856:	19 f5       	brne	.+70     	; 0xa89e <dir_remove+0x86>
    a858:	f6 cf       	rjmp	.-20     	; 0xa846 <dir_remove+0x2e>
    a85a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    a85c:	fb 8d       	ldd	r31, Y+27	; 0x1b
    a85e:	b0 82       	st	Z, r11
    a860:	f8 01       	movw	r30, r16
    a862:	a3 82       	std	Z+3, r10	; 0x03
    a864:	4e 85       	ldd	r20, Y+14	; 0x0e
    a866:	5f 85       	ldd	r21, Y+15	; 0x0f
    a868:	68 89       	ldd	r22, Y+16	; 0x10
    a86a:	79 89       	ldd	r23, Y+17	; 0x11
    a86c:	4c 15       	cp	r20, r12
    a86e:	5d 05       	cpc	r21, r13
    a870:	6e 05       	cpc	r22, r14
    a872:	7f 05       	cpc	r23, r15
    a874:	a0 f4       	brcc	.+40     	; 0xa89e <dir_remove+0x86>
    a876:	60 e0       	ldi	r22, 0x00	; 0
    a878:	70 e0       	ldi	r23, 0x00	; 0
    a87a:	ce 01       	movw	r24, r28
    a87c:	e3 dd       	rcall	.-1082   	; 0xa444 <dir_next>
    a87e:	00 97       	sbiw	r24, 0x00	; 0
    a880:	49 f4       	brne	.+18     	; 0xa894 <dir_remove+0x7c>
    a882:	4e 89       	ldd	r20, Y+22	; 0x16
    a884:	5f 89       	ldd	r21, Y+23	; 0x17
    a886:	68 8d       	ldd	r22, Y+24	; 0x18
    a888:	79 8d       	ldd	r23, Y+25	; 0x19
    a88a:	c8 01       	movw	r24, r16
    a88c:	0e 94 26 4b 	call	0x964c	; 0x964c <move_window>
    a890:	00 97       	sbiw	r24, 0x00	; 0
    a892:	19 f3       	breq	.-58     	; 0xa85a <dir_remove+0x42>
    a894:	84 30       	cpi	r24, 0x04	; 4
    a896:	91 05       	cpc	r25, r1
    a898:	11 f4       	brne	.+4      	; 0xa89e <dir_remove+0x86>
    a89a:	82 e0       	ldi	r24, 0x02	; 2
    a89c:	90 e0       	ldi	r25, 0x00	; 0
    a89e:	cd b7       	in	r28, 0x3d	; 61
    a8a0:	de b7       	in	r29, 0x3e	; 62
    a8a2:	ea e0       	ldi	r30, 0x0A	; 10
    a8a4:	0c 94 02 e0 	jmp	0x1c004	; 0x1c004 <__epilogue_restores__+0x10>

0000a8a8 <dir_find>:
    a8a8:	ac e0       	ldi	r26, 0x0C	; 12
    a8aa:	b0 e0       	ldi	r27, 0x00	; 0
    a8ac:	ea e5       	ldi	r30, 0x5A	; 90
    a8ae:	f4 e5       	ldi	r31, 0x54	; 84
    a8b0:	0c 94 de df 	jmp	0x1bfbc	; 0x1bfbc <__prologue_saves__>
    a8b4:	9c 87       	std	Y+12, r25	; 0x0c
    a8b6:	8b 87       	std	Y+11, r24	; 0x0b
    a8b8:	fc 01       	movw	r30, r24
    a8ba:	01 90       	ld	r0, Z+
    a8bc:	f0 81       	ld	r31, Z
    a8be:	e0 2d       	mov	r30, r0
    a8c0:	fc 83       	std	Y+4, r31	; 0x04
    a8c2:	eb 83       	std	Y+3, r30	; 0x03
    a8c4:	40 e0       	ldi	r20, 0x00	; 0
    a8c6:	50 e0       	ldi	r21, 0x00	; 0
    a8c8:	ba 01       	movw	r22, r20
    a8ca:	44 db       	rcall	.-2424   	; 0x9f54 <dir_sdi>
    a8cc:	00 97       	sbiw	r24, 0x00	; 0
    a8ce:	09 f0       	breq	.+2      	; 0xa8d2 <dir_find+0x2a>
    a8d0:	e7 c0       	rjmp	.+462    	; 0xaaa0 <dir_find+0x1f8>
    a8d2:	8f ef       	ldi	r24, 0xFF	; 255
    a8d4:	9f ef       	ldi	r25, 0xFF	; 255
    a8d6:	dc 01       	movw	r26, r24
    a8d8:	eb 85       	ldd	r30, Y+11	; 0x0b
    a8da:	fc 85       	ldd	r31, Y+12	; 0x0c
    a8dc:	80 a7       	std	Z+40, r24	; 0x28
    a8de:	91 a7       	std	Z+41, r25	; 0x29
    a8e0:	a2 a7       	std	Z+42, r26	; 0x2a
    a8e2:	b3 a7       	std	Z+43, r27	; 0x2b
    a8e4:	0f ef       	ldi	r16, 0xFF	; 255
    a8e6:	1f ef       	ldi	r17, 0xFF	; 255
    a8e8:	44 24       	eor	r4, r4
    a8ea:	4a 94       	dec	r4
    a8ec:	54 2c       	mov	r5, r4
    a8ee:	32 01       	movw	r6, r4
    a8f0:	7c 96       	adiw	r30, 0x1c	; 28
    a8f2:	fa 87       	std	Y+10, r31	; 0x0a
    a8f4:	e9 87       	std	Y+9, r30	; 0x09
    a8f6:	eb 85       	ldd	r30, Y+11	; 0x0b
    a8f8:	fc 85       	ldd	r31, Y+12	; 0x0c
    a8fa:	46 89       	ldd	r20, Z+22	; 0x16
    a8fc:	57 89       	ldd	r21, Z+23	; 0x17
    a8fe:	60 8d       	ldd	r22, Z+24	; 0x18
    a900:	71 8d       	ldd	r23, Z+25	; 0x19
    a902:	8b 81       	ldd	r24, Y+3	; 0x03
    a904:	9c 81       	ldd	r25, Y+4	; 0x04
    a906:	0e 94 26 4b 	call	0x964c	; 0x964c <move_window>
    a90a:	00 97       	sbiw	r24, 0x00	; 0
    a90c:	09 f0       	breq	.+2      	; 0xa910 <dir_find+0x68>
    a90e:	c8 c0       	rjmp	.+400    	; 0xaaa0 <dir_find+0x1f8>
    a910:	eb 85       	ldd	r30, Y+11	; 0x0b
    a912:	fc 85       	ldd	r31, Y+12	; 0x0c
    a914:	e2 8c       	ldd	r14, Z+26	; 0x1a
    a916:	f3 8c       	ldd	r15, Z+27	; 0x1b
    a918:	f7 01       	movw	r30, r14
    a91a:	d0 80       	ld	r13, Z
    a91c:	dd 20       	and	r13, r13
    a91e:	09 f4       	brne	.+2      	; 0xa922 <dir_find+0x7a>
    a920:	c1 c0       	rjmp	.+386    	; 0xaaa4 <dir_find+0x1fc>
    a922:	93 85       	ldd	r25, Z+11	; 0x0b
    a924:	89 2f       	mov	r24, r25
    a926:	8f 73       	andi	r24, 0x3F	; 63
    a928:	eb 85       	ldd	r30, Y+11	; 0x0b
    a92a:	fc 85       	ldd	r31, Y+12	; 0x0c
    a92c:	84 83       	std	Z+4, r24	; 0x04
    a92e:	f5 ee       	ldi	r31, 0xE5	; 229
    a930:	df 16       	cp	r13, r31
    a932:	09 f4       	brne	.+2      	; 0xa936 <dir_find+0x8e>
    a934:	a6 c0       	rjmp	.+332    	; 0xaa82 <dir_find+0x1da>
    a936:	93 ff       	sbrs	r25, 3
    a938:	04 c0       	rjmp	.+8      	; 0xa942 <dir_find+0x9a>
    a93a:	8f 30       	cpi	r24, 0x0F	; 15
    a93c:	09 f0       	breq	.+2      	; 0xa940 <dir_find+0x98>
    a93e:	a1 c0       	rjmp	.+322    	; 0xaa82 <dir_find+0x1da>
    a940:	03 c0       	rjmp	.+6      	; 0xa948 <dir_find+0xa0>
    a942:	8f 30       	cpi	r24, 0x0F	; 15
    a944:	09 f0       	breq	.+2      	; 0xa948 <dir_find+0xa0>
    a946:	88 c0       	rjmp	.+272    	; 0xaa58 <dir_find+0x1b0>
    a948:	eb 85       	ldd	r30, Y+11	; 0x0b
    a94a:	fc 85       	ldd	r31, Y+12	; 0x0c
    a94c:	87 a1       	ldd	r24, Z+39	; 0x27
    a94e:	86 fd       	sbrc	r24, 6
    a950:	9f c0       	rjmp	.+318    	; 0xaa90 <dir_find+0x1e8>
    a952:	d6 fe       	sbrs	r13, 6
    a954:	10 c0       	rjmp	.+32     	; 0xa976 <dir_find+0xce>
    a956:	f7 01       	movw	r30, r14
    a958:	05 85       	ldd	r16, Z+13	; 0x0d
    a95a:	fd 2d       	mov	r31, r13
    a95c:	ff 7b       	andi	r31, 0xBF	; 191
    a95e:	df 2e       	mov	r13, r31
    a960:	eb 85       	ldd	r30, Y+11	; 0x0b
    a962:	fc 85       	ldd	r31, Y+12	; 0x0c
    a964:	86 85       	ldd	r24, Z+14	; 0x0e
    a966:	97 85       	ldd	r25, Z+15	; 0x0f
    a968:	a0 89       	ldd	r26, Z+16	; 0x10
    a96a:	b1 89       	ldd	r27, Z+17	; 0x11
    a96c:	80 a7       	std	Z+40, r24	; 0x28
    a96e:	91 a7       	std	Z+41, r25	; 0x29
    a970:	a2 a7       	std	Z+42, r26	; 0x2a
    a972:	b3 a7       	std	Z+43, r27	; 0x2b
    a974:	02 c0       	rjmp	.+4      	; 0xa97a <dir_find+0xd2>
    a976:	1d 11       	cpse	r17, r13
    a978:	8a c0       	rjmp	.+276    	; 0xaa8e <dir_find+0x1e6>
    a97a:	f7 01       	movw	r30, r14
    a97c:	c5 84       	ldd	r12, Z+13	; 0x0d
    a97e:	c0 12       	cpse	r12, r16
    a980:	86 c0       	rjmp	.+268    	; 0xaa8e <dir_find+0x1e6>
    a982:	82 8d       	ldd	r24, Z+26	; 0x1a
    a984:	93 8d       	ldd	r25, Z+27	; 0x1b
    a986:	89 2b       	or	r24, r25
    a988:	09 f0       	breq	.+2      	; 0xa98c <dir_find+0xe4>
    a98a:	91 c0       	rjmp	.+290    	; 0xaaae <dir_find+0x206>
    a98c:	eb 81       	ldd	r30, Y+3	; 0x03
    a98e:	fc 81       	ldd	r31, Y+4	; 0x04
    a990:	03 84       	ldd	r0, Z+11	; 0x0b
    a992:	f4 85       	ldd	r31, Z+12	; 0x0c
    a994:	e0 2d       	mov	r30, r0
    a996:	fe 83       	std	Y+6, r31	; 0x06
    a998:	ed 83       	std	Y+5, r30	; 0x05
    a99a:	f7 01       	movw	r30, r14
    a99c:	80 81       	ld	r24, Z
    a99e:	8f 73       	andi	r24, 0x3F	; 63
    a9a0:	90 e0       	ldi	r25, 0x00	; 0
    a9a2:	01 97       	sbiw	r24, 0x01	; 1
    a9a4:	fd e0       	ldi	r31, 0x0D	; 13
    a9a6:	f8 9f       	mul	r31, r24
    a9a8:	80 01       	movw	r16, r0
    a9aa:	f9 9f       	mul	r31, r25
    a9ac:	10 0d       	add	r17, r0
    a9ae:	11 24       	eor	r1, r1
    a9b0:	2d eb       	ldi	r18, 0xBD	; 189
    a9b2:	34 e0       	ldi	r19, 0x04	; 4
    a9b4:	3a 83       	std	Y+2, r19	; 0x02
    a9b6:	29 83       	std	Y+1, r18	; 0x01
    a9b8:	81 e0       	ldi	r24, 0x01	; 1
    a9ba:	90 e0       	ldi	r25, 0x00	; 0
    a9bc:	e9 81       	ldd	r30, Y+1	; 0x01
    a9be:	fa 81       	ldd	r31, Y+2	; 0x02
    a9c0:	21 91       	ld	r18, Z+
    a9c2:	fa 83       	std	Y+2, r31	; 0x02
    a9c4:	e9 83       	std	Y+1, r30	; 0x01
    a9c6:	f7 01       	movw	r30, r14
    a9c8:	e2 0f       	add	r30, r18
    a9ca:	f1 1d       	adc	r31, r1
    a9cc:	20 80       	ld	r2, Z
    a9ce:	31 80       	ldd	r3, Z+1	; 0x01
    a9d0:	00 97       	sbiw	r24, 0x00	; 0
    a9d2:	39 f1       	breq	.+78     	; 0xaa22 <dir_find+0x17a>
    a9d4:	0f 3f       	cpi	r16, 0xFF	; 255
    a9d6:	11 05       	cpc	r17, r1
    a9d8:	11 f0       	breq	.+4      	; 0xa9de <dir_find+0x136>
    a9da:	08 f0       	brcs	.+2      	; 0xa9de <dir_find+0x136>
    a9dc:	68 c0       	rjmp	.+208    	; 0xaaae <dir_find+0x206>
    a9de:	b1 01       	movw	r22, r2
    a9e0:	80 e0       	ldi	r24, 0x00	; 0
    a9e2:	90 e0       	ldi	r25, 0x00	; 0
    a9e4:	0e 94 01 69 	call	0xd202	; 0xd202 <ff_wtoupper>
    a9e8:	4b 01       	movw	r8, r22
    a9ea:	5c 01       	movw	r10, r24
    a9ec:	98 01       	movw	r18, r16
    a9ee:	2f 5f       	subi	r18, 0xFF	; 255
    a9f0:	3f 4f       	sbci	r19, 0xFF	; 255
    a9f2:	38 87       	std	Y+8, r19	; 0x08
    a9f4:	2f 83       	std	Y+7, r18	; 0x07
    a9f6:	00 0f       	add	r16, r16
    a9f8:	11 1f       	adc	r17, r17
    a9fa:	ed 81       	ldd	r30, Y+5	; 0x05
    a9fc:	fe 81       	ldd	r31, Y+6	; 0x06
    a9fe:	e0 0f       	add	r30, r16
    aa00:	f1 1f       	adc	r31, r17
    aa02:	60 81       	ld	r22, Z
    aa04:	71 81       	ldd	r23, Z+1	; 0x01
    aa06:	80 e0       	ldi	r24, 0x00	; 0
    aa08:	90 e0       	ldi	r25, 0x00	; 0
    aa0a:	0e 94 01 69 	call	0xd202	; 0xd202 <ff_wtoupper>
    aa0e:	86 16       	cp	r8, r22
    aa10:	97 06       	cpc	r9, r23
    aa12:	a8 06       	cpc	r10, r24
    aa14:	b9 06       	cpc	r11, r25
    aa16:	09 f0       	breq	.+2      	; 0xaa1a <dir_find+0x172>
    aa18:	4a c0       	rjmp	.+148    	; 0xaaae <dir_find+0x206>
    aa1a:	c1 01       	movw	r24, r2
    aa1c:	0f 81       	ldd	r16, Y+7	; 0x07
    aa1e:	18 85       	ldd	r17, Y+8	; 0x08
    aa20:	05 c0       	rjmp	.+10     	; 0xaa2c <dir_find+0x184>
    aa22:	3f ef       	ldi	r19, 0xFF	; 255
    aa24:	23 16       	cp	r2, r19
    aa26:	33 06       	cpc	r3, r19
    aa28:	09 f0       	breq	.+2      	; 0xaa2c <dir_find+0x184>
    aa2a:	41 c0       	rjmp	.+130    	; 0xaaae <dir_find+0x206>
    aa2c:	e9 81       	ldd	r30, Y+1	; 0x01
    aa2e:	fa 81       	ldd	r31, Y+2	; 0x02
    aa30:	ea 5c       	subi	r30, 0xCA	; 202
    aa32:	f4 40       	sbci	r31, 0x04	; 4
    aa34:	19 f6       	brne	.-122    	; 0xa9bc <dir_find+0x114>
    aa36:	f7 01       	movw	r30, r14
    aa38:	20 81       	ld	r18, Z
    aa3a:	26 ff       	sbrs	r18, 6
    aa3c:	3a c0       	rjmp	.+116    	; 0xaab2 <dir_find+0x20a>
    aa3e:	89 2b       	or	r24, r25
    aa40:	c1 f1       	breq	.+112    	; 0xaab2 <dir_find+0x20a>
    aa42:	00 0f       	add	r16, r16
    aa44:	11 1f       	adc	r17, r17
    aa46:	ed 81       	ldd	r30, Y+5	; 0x05
    aa48:	fe 81       	ldd	r31, Y+6	; 0x06
    aa4a:	e0 0f       	add	r30, r16
    aa4c:	f1 1f       	adc	r31, r17
    aa4e:	80 81       	ld	r24, Z
    aa50:	91 81       	ldd	r25, Z+1	; 0x01
    aa52:	89 2b       	or	r24, r25
    aa54:	71 f1       	breq	.+92     	; 0xaab2 <dir_find+0x20a>
    aa56:	2b c0       	rjmp	.+86     	; 0xaaae <dir_find+0x206>
    aa58:	11 11       	cpse	r17, r1
    aa5a:	05 c0       	rjmp	.+10     	; 0xaa66 <dir_find+0x1be>
    aa5c:	c7 01       	movw	r24, r14
    aa5e:	0e 94 68 47 	call	0x8ed0	; 0x8ed0 <sum_sfn>
    aa62:	08 17       	cp	r16, r24
    aa64:	09 f1       	breq	.+66     	; 0xaaa8 <dir_find+0x200>
    aa66:	eb 85       	ldd	r30, Y+11	; 0x0b
    aa68:	fc 85       	ldd	r31, Y+12	; 0x0c
    aa6a:	87 a1       	ldd	r24, Z+39	; 0x27
    aa6c:	80 fd       	sbrc	r24, 0
    aa6e:	09 c0       	rjmp	.+18     	; 0xaa82 <dir_find+0x1da>
    aa70:	4b e0       	ldi	r20, 0x0B	; 11
    aa72:	50 e0       	ldi	r21, 0x00	; 0
    aa74:	69 85       	ldd	r22, Y+9	; 0x09
    aa76:	7a 85       	ldd	r23, Y+10	; 0x0a
    aa78:	c7 01       	movw	r24, r14
    aa7a:	0e 94 6f 46 	call	0x8cde	; 0x8cde <mem_cmp>
    aa7e:	89 2b       	or	r24, r25
    aa80:	99 f0       	breq	.+38     	; 0xaaa8 <dir_find+0x200>
    aa82:	eb 85       	ldd	r30, Y+11	; 0x0b
    aa84:	fc 85       	ldd	r31, Y+12	; 0x0c
    aa86:	40 a6       	std	Z+40, r4	; 0x28
    aa88:	51 a6       	std	Z+41, r5	; 0x29
    aa8a:	62 a6       	std	Z+42, r6	; 0x2a
    aa8c:	73 a6       	std	Z+43, r7	; 0x2b
    aa8e:	1f ef       	ldi	r17, 0xFF	; 255
    aa90:	60 e0       	ldi	r22, 0x00	; 0
    aa92:	70 e0       	ldi	r23, 0x00	; 0
    aa94:	8b 85       	ldd	r24, Y+11	; 0x0b
    aa96:	9c 85       	ldd	r25, Y+12	; 0x0c
    aa98:	d5 dc       	rcall	.-1622   	; 0xa444 <dir_next>
    aa9a:	00 97       	sbiw	r24, 0x00	; 0
    aa9c:	09 f4       	brne	.+2      	; 0xaaa0 <dir_find+0x1f8>
    aa9e:	2b cf       	rjmp	.-426    	; 0xa8f6 <dir_find+0x4e>
    aaa0:	28 2f       	mov	r18, r24
    aaa2:	0b c0       	rjmp	.+22     	; 0xaaba <dir_find+0x212>
    aaa4:	24 e0       	ldi	r18, 0x04	; 4
    aaa6:	01 c0       	rjmp	.+2      	; 0xaaaa <dir_find+0x202>
    aaa8:	20 e0       	ldi	r18, 0x00	; 0
    aaaa:	90 e0       	ldi	r25, 0x00	; 0
    aaac:	06 c0       	rjmp	.+12     	; 0xaaba <dir_find+0x212>
    aaae:	0c 2d       	mov	r16, r12
    aab0:	ee cf       	rjmp	.-36     	; 0xaa8e <dir_find+0x1e6>
    aab2:	1f ef       	ldi	r17, 0xFF	; 255
    aab4:	1d 0d       	add	r17, r13
    aab6:	0c 2d       	mov	r16, r12
    aab8:	eb cf       	rjmp	.-42     	; 0xaa90 <dir_find+0x1e8>
    aaba:	82 2f       	mov	r24, r18
    aabc:	2c 96       	adiw	r28, 0x0c	; 12
    aabe:	e2 e1       	ldi	r30, 0x12	; 18
    aac0:	0c 94 fa df 	jmp	0x1bff4	; 0x1bff4 <__epilogue_restores__>

0000aac4 <dir_register>:
    aac4:	a6 e1       	ldi	r26, 0x16	; 22
    aac6:	b0 e0       	ldi	r27, 0x00	; 0
    aac8:	e8 e6       	ldi	r30, 0x68	; 104
    aaca:	f5 e5       	ldi	r31, 0x55	; 85
    aacc:	0c 94 de df 	jmp	0x1bfbc	; 0x1bfbc <__prologue_saves__>
    aad0:	fc 01       	movw	r30, r24
    aad2:	27 a1       	ldd	r18, Z+39	; 0x27
    aad4:	20 7a       	andi	r18, 0xA0	; 160
    aad6:	09 f0       	breq	.+2      	; 0xaada <dir_register+0x16>
    aad8:	53 c1       	rjmp	.+678    	; 0xad80 <dir_register+0x2bc>
    aada:	c0 80       	ld	r12, Z
    aadc:	d1 80       	ldd	r13, Z+1	; 0x01
    aade:	f6 01       	movw	r30, r12
    aae0:	a3 85       	ldd	r26, Z+11	; 0x0b
    aae2:	b4 85       	ldd	r27, Z+12	; 0x0c
    aae4:	81 2c       	mov	r8, r1
    aae6:	91 2c       	mov	r9, r1
    aae8:	2d 91       	ld	r18, X+
    aaea:	3d 91       	ld	r19, X+
    aaec:	23 2b       	or	r18, r19
    aaee:	21 f0       	breq	.+8      	; 0xaaf8 <dir_register+0x34>
    aaf0:	ff ef       	ldi	r31, 0xFF	; 255
    aaf2:	8f 1a       	sub	r8, r31
    aaf4:	9f 0a       	sbc	r9, r31
    aaf6:	f8 cf       	rjmp	.-16     	; 0xaae8 <dir_register+0x24>
    aaf8:	8c 01       	movw	r16, r24
    aafa:	5c 01       	movw	r10, r24
    aafc:	2c e1       	ldi	r18, 0x1C	; 28
    aafe:	a2 0e       	add	r10, r18
    ab00:	b1 1c       	adc	r11, r1
    ab02:	4c e0       	ldi	r20, 0x0C	; 12
    ab04:	50 e0       	ldi	r21, 0x00	; 0
    ab06:	b5 01       	movw	r22, r10
    ab08:	ce 01       	movw	r24, r28
    ab0a:	01 96       	adiw	r24, 0x01	; 1
    ab0c:	0e 94 cf 47 	call	0x8f9e	; 0x8f9e <mem_cpy.part.0>
    ab10:	8c 85       	ldd	r24, Y+12	; 0x0c
    ab12:	80 ff       	sbrs	r24, 0
    ab14:	94 c0       	rjmp	.+296    	; 0xac3e <dir_register+0x17a>
    ab16:	80 e4       	ldi	r24, 0x40	; 64
    ab18:	f8 01       	movw	r30, r16
    ab1a:	87 a3       	std	Z+39, r24	; 0x27
    ab1c:	41 2c       	mov	r4, r1
    ab1e:	51 2c       	mov	r5, r1
    ab20:	32 01       	movw	r6, r4
    ab22:	43 94       	inc	r4
    ab24:	72 01       	movw	r14, r4
    ab26:	f6 01       	movw	r30, r12
    ab28:	23 84       	ldd	r2, Z+11	; 0x0b
    ab2a:	34 84       	ldd	r3, Z+12	; 0x0c
    ab2c:	4b e0       	ldi	r20, 0x0B	; 11
    ab2e:	50 e0       	ldi	r21, 0x00	; 0
    ab30:	be 01       	movw	r22, r28
    ab32:	6f 5f       	subi	r22, 0xFF	; 255
    ab34:	7f 4f       	sbci	r23, 0xFF	; 255
    ab36:	c5 01       	movw	r24, r10
    ab38:	0e 94 cf 47 	call	0x8f9e	; 0x8f9e <mem_cpy.part.0>
    ab3c:	f6 e0       	ldi	r31, 0x06	; 6
    ab3e:	4f 16       	cp	r4, r31
    ab40:	51 04       	cpc	r5, r1
    ab42:	18 f1       	brcs	.+70     	; 0xab8a <dir_register+0xc6>
    ab44:	f1 01       	movw	r30, r2
    ab46:	b3 01       	movw	r22, r6
    ab48:	a2 01       	movw	r20, r4
    ab4a:	81 91       	ld	r24, Z+
    ab4c:	91 91       	ld	r25, Z+
    ab4e:	00 97       	sbiw	r24, 0x00	; 0
    ab50:	d9 f0       	breq	.+54     	; 0xab88 <dir_register+0xc4>
    ab52:	20 e1       	ldi	r18, 0x10	; 16
    ab54:	30 e0       	ldi	r19, 0x00	; 0
    ab56:	44 0f       	add	r20, r20
    ab58:	55 1f       	adc	r21, r21
    ab5a:	66 1f       	adc	r22, r22
    ab5c:	77 1f       	adc	r23, r23
    ab5e:	dc 01       	movw	r26, r24
    ab60:	a1 70       	andi	r26, 0x01	; 1
    ab62:	bb 27       	eor	r27, r27
    ab64:	4a 0f       	add	r20, r26
    ab66:	5b 1f       	adc	r21, r27
    ab68:	61 1d       	adc	r22, r1
    ab6a:	71 1d       	adc	r23, r1
    ab6c:	96 95       	lsr	r25
    ab6e:	87 95       	ror	r24
    ab70:	60 ff       	sbrs	r22, 0
    ab72:	06 c0       	rjmp	.+12     	; 0xab80 <dir_register+0xbc>
    ab74:	a1 e2       	ldi	r26, 0x21	; 33
    ab76:	4a 27       	eor	r20, r26
    ab78:	a0 e1       	ldi	r26, 0x10	; 16
    ab7a:	5a 27       	eor	r21, r26
    ab7c:	a1 e0       	ldi	r26, 0x01	; 1
    ab7e:	6a 27       	eor	r22, r26
    ab80:	21 50       	subi	r18, 0x01	; 1
    ab82:	31 09       	sbc	r19, r1
    ab84:	41 f7       	brne	.-48     	; 0xab56 <dir_register+0x92>
    ab86:	e1 cf       	rjmp	.-62     	; 0xab4a <dir_register+0x86>
    ab88:	7a 01       	movw	r14, r20
    ab8a:	fe 01       	movw	r30, r28
    ab8c:	75 96       	adiw	r30, 0x15	; 21
    ab8e:	27 e0       	ldi	r18, 0x07	; 7
    ab90:	30 e0       	ldi	r19, 0x00	; 0
    ab92:	9e 2d       	mov	r25, r14
    ab94:	9f 70       	andi	r25, 0x0F	; 15
    ab96:	80 e3       	ldi	r24, 0x30	; 48
    ab98:	89 0f       	add	r24, r25
    ab9a:	8a 33       	cpi	r24, 0x3A	; 58
    ab9c:	10 f0       	brcs	.+4      	; 0xaba2 <dir_register+0xde>
    ab9e:	87 e3       	ldi	r24, 0x37	; 55
    aba0:	89 0f       	add	r24, r25
    aba2:	21 50       	subi	r18, 0x01	; 1
    aba4:	31 09       	sbc	r19, r1
    aba6:	82 93       	st	-Z, r24
    aba8:	a4 e0       	ldi	r26, 0x04	; 4
    abaa:	f6 94       	lsr	r15
    abac:	e7 94       	ror	r14
    abae:	aa 95       	dec	r26
    abb0:	e1 f7       	brne	.-8      	; 0xabaa <dir_register+0xe6>
    abb2:	e1 14       	cp	r14, r1
    abb4:	f1 04       	cpc	r15, r1
    abb6:	69 f7       	brne	.-38     	; 0xab92 <dir_register+0xce>
    abb8:	ed e0       	ldi	r30, 0x0D	; 13
    abba:	f0 e0       	ldi	r31, 0x00	; 0
    abbc:	ec 0f       	add	r30, r28
    abbe:	fd 1f       	adc	r31, r29
    abc0:	e2 0f       	add	r30, r18
    abc2:	f3 1f       	adc	r31, r19
    abc4:	4e e7       	ldi	r20, 0x7E	; 126
    abc6:	40 83       	st	Z, r20
    abc8:	f5 01       	movw	r30, r10
    abca:	80 e0       	ldi	r24, 0x00	; 0
    abcc:	90 e0       	ldi	r25, 0x00	; 0
    abce:	28 17       	cp	r18, r24
    abd0:	39 07       	cpc	r19, r25
    abd2:	29 f0       	breq	.+10     	; 0xabde <dir_register+0x11a>
    abd4:	41 91       	ld	r20, Z+
    abd6:	40 32       	cpi	r20, 0x20	; 32
    abd8:	11 f0       	breq	.+4      	; 0xabde <dir_register+0x11a>
    abda:	01 96       	adiw	r24, 0x01	; 1
    abdc:	f8 cf       	rjmp	.-16     	; 0xabce <dir_register+0x10a>
    abde:	f5 01       	movw	r30, r10
    abe0:	e8 0f       	add	r30, r24
    abe2:	f9 1f       	adc	r31, r25
    abe4:	28 30       	cpi	r18, 0x08	; 8
    abe6:	31 05       	cpc	r19, r1
    abe8:	50 f4       	brcc	.+20     	; 0xabfe <dir_register+0x13a>
    abea:	ad e0       	ldi	r26, 0x0D	; 13
    abec:	b0 e0       	ldi	r27, 0x00	; 0
    abee:	ac 0f       	add	r26, r28
    abf0:	bd 1f       	adc	r27, r29
    abf2:	a2 0f       	add	r26, r18
    abf4:	b3 1f       	adc	r27, r19
    abf6:	8c 91       	ld	r24, X
    abf8:	2f 5f       	subi	r18, 0xFF	; 255
    abfa:	3f 4f       	sbci	r19, 0xFF	; 255
    abfc:	01 c0       	rjmp	.+2      	; 0xac00 <dir_register+0x13c>
    abfe:	80 e2       	ldi	r24, 0x20	; 32
    ac00:	81 93       	st	Z+, r24
    ac02:	cf 01       	movw	r24, r30
    ac04:	8a 19       	sub	r24, r10
    ac06:	9b 09       	sbc	r25, r11
    ac08:	08 97       	sbiw	r24, 0x08	; 8
    ac0a:	60 f3       	brcs	.-40     	; 0xabe4 <dir_register+0x120>
    ac0c:	c8 01       	movw	r24, r16
    ac0e:	4c de       	rcall	.-872    	; 0xa8a8 <dir_find>
    ac10:	00 97       	sbiw	r24, 0x00	; 0
    ac12:	71 f4       	brne	.+28     	; 0xac30 <dir_register+0x16c>
    ac14:	8f ef       	ldi	r24, 0xFF	; 255
    ac16:	48 1a       	sub	r4, r24
    ac18:	58 0a       	sbc	r5, r24
    ac1a:	68 0a       	sbc	r6, r24
    ac1c:	78 0a       	sbc	r7, r24
    ac1e:	94 e6       	ldi	r25, 0x64	; 100
    ac20:	49 16       	cp	r4, r25
    ac22:	51 04       	cpc	r5, r1
    ac24:	61 04       	cpc	r6, r1
    ac26:	71 04       	cpc	r7, r1
    ac28:	09 f0       	breq	.+2      	; 0xac2c <dir_register+0x168>
    ac2a:	7c cf       	rjmp	.-264    	; 0xab24 <dir_register+0x60>
    ac2c:	27 e0       	ldi	r18, 0x07	; 7
    ac2e:	a9 c0       	rjmp	.+338    	; 0xad82 <dir_register+0x2be>
    ac30:	84 30       	cpi	r24, 0x04	; 4
    ac32:	91 05       	cpc	r25, r1
    ac34:	09 f0       	breq	.+2      	; 0xac38 <dir_register+0x174>
    ac36:	ce c0       	rjmp	.+412    	; 0xadd4 <dir_register+0x310>
    ac38:	8c 85       	ldd	r24, Y+12	; 0x0c
    ac3a:	f8 01       	movw	r30, r16
    ac3c:	87 a3       	std	Z+39, r24	; 0x27
    ac3e:	8c 85       	ldd	r24, Y+12	; 0x0c
    ac40:	81 ff       	sbrs	r24, 1
    ac42:	0b c0       	rjmp	.+22     	; 0xac5a <dir_register+0x196>
    ac44:	c4 01       	movw	r24, r8
    ac46:	0c 96       	adiw	r24, 0x0c	; 12
    ac48:	6d e0       	ldi	r22, 0x0D	; 13
    ac4a:	70 e0       	ldi	r23, 0x00	; 0
    ac4c:	0e 94 4a df 	call	0x1be94	; 0x1be94 <__udivmodhi4>
    ac50:	7b 01       	movw	r14, r22
    ac52:	ff ef       	ldi	r31, 0xFF	; 255
    ac54:	ef 1a       	sub	r14, r31
    ac56:	ff 0a       	sbc	r15, r31
    ac58:	03 c0       	rjmp	.+6      	; 0xac60 <dir_register+0x19c>
    ac5a:	ee 24       	eor	r14, r14
    ac5c:	e3 94       	inc	r14
    ac5e:	f1 2c       	mov	r15, r1
    ac60:	b7 01       	movw	r22, r14
    ac62:	c8 01       	movw	r24, r16
    ac64:	d7 dc       	rcall	.-1618   	; 0xa614 <dir_alloc>
    ac66:	00 97       	sbiw	r24, 0x00	; 0
    ac68:	09 f0       	breq	.+2      	; 0xac6c <dir_register+0x1a8>
    ac6a:	b4 c0       	rjmp	.+360    	; 0xadd4 <dir_register+0x310>
    ac6c:	21 e0       	ldi	r18, 0x01	; 1
    ac6e:	e2 1a       	sub	r14, r18
    ac70:	f1 08       	sbc	r15, r1
    ac72:	09 f4       	brne	.+2      	; 0xac76 <dir_register+0x1b2>
    ac74:	88 c0       	rjmp	.+272    	; 0xad86 <dir_register+0x2c2>
    ac76:	f8 01       	movw	r30, r16
    ac78:	46 85       	ldd	r20, Z+14	; 0x0e
    ac7a:	57 85       	ldd	r21, Z+15	; 0x0f
    ac7c:	60 89       	ldd	r22, Z+16	; 0x10
    ac7e:	71 89       	ldd	r23, Z+17	; 0x11
    ac80:	c7 01       	movw	r24, r14
    ac82:	e5 e0       	ldi	r30, 0x05	; 5
    ac84:	88 0f       	add	r24, r24
    ac86:	99 1f       	adc	r25, r25
    ac88:	ea 95       	dec	r30
    ac8a:	e1 f7       	brne	.-8      	; 0xac84 <dir_register+0x1c0>
    ac8c:	48 1b       	sub	r20, r24
    ac8e:	59 0b       	sbc	r21, r25
    ac90:	61 09       	sbc	r22, r1
    ac92:	71 09       	sbc	r23, r1
    ac94:	c8 01       	movw	r24, r16
    ac96:	5e d9       	rcall	.-3396   	; 0x9f54 <dir_sdi>
    ac98:	00 97       	sbiw	r24, 0x00	; 0
    ac9a:	09 f0       	breq	.+2      	; 0xac9e <dir_register+0x1da>
    ac9c:	9b c0       	rjmp	.+310    	; 0xadd4 <dir_register+0x310>
    ac9e:	c5 01       	movw	r24, r10
    aca0:	0e 94 68 47 	call	0x8ed0	; 0x8ed0 <sum_sfn>
    aca4:	68 2e       	mov	r6, r24
    aca6:	5f e0       	ldi	r21, 0x0F	; 15
    aca8:	35 2e       	mov	r3, r21
    acaa:	6d e0       	ldi	r22, 0x0D	; 13
    acac:	46 2e       	mov	r4, r22
    acae:	7a ec       	ldi	r23, 0xCA	; 202
    acb0:	87 2e       	mov	r8, r23
    acb2:	74 e0       	ldi	r23, 0x04	; 4
    acb4:	97 2e       	mov	r9, r23
    acb6:	55 24       	eor	r5, r5
    acb8:	53 94       	inc	r5
    acba:	f8 01       	movw	r30, r16
    acbc:	46 89       	ldd	r20, Z+22	; 0x16
    acbe:	57 89       	ldd	r21, Z+23	; 0x17
    acc0:	60 8d       	ldd	r22, Z+24	; 0x18
    acc2:	71 8d       	ldd	r23, Z+25	; 0x19
    acc4:	c6 01       	movw	r24, r12
    acc6:	0e 94 26 4b 	call	0x964c	; 0x964c <move_window>
    acca:	00 97       	sbiw	r24, 0x00	; 0
    accc:	09 f0       	breq	.+2      	; 0xacd0 <dir_register+0x20c>
    acce:	82 c0       	rjmp	.+260    	; 0xadd4 <dir_register+0x310>
    acd0:	f6 01       	movw	r30, r12
    acd2:	63 85       	ldd	r22, Z+11	; 0x0b
    acd4:	74 85       	ldd	r23, Z+12	; 0x0c
    acd6:	f8 01       	movw	r30, r16
    acd8:	02 8c       	ldd	r0, Z+26	; 0x1a
    acda:	f3 8d       	ldd	r31, Z+27	; 0x1b
    acdc:	e0 2d       	mov	r30, r0
    acde:	fe 8b       	std	Y+22, r31	; 0x16
    ace0:	ed 8b       	std	Y+21, r30	; 0x15
    ace2:	7e 2c       	mov	r7, r14
    ace4:	65 86       	std	Z+13, r6	; 0x0d
    ace6:	33 86       	std	Z+11, r3	; 0x0b
    ace8:	14 86       	std	Z+12, r1	; 0x0c
    acea:	12 8e       	std	Z+26, r1	; 0x1a
    acec:	13 8e       	std	Z+27, r1	; 0x1b
    acee:	97 01       	movw	r18, r14
    acf0:	33 27       	eor	r19, r19
    acf2:	21 50       	subi	r18, 0x01	; 1
    acf4:	31 09       	sbc	r19, r1
    acf6:	42 9e       	mul	r4, r18
    acf8:	c0 01       	movw	r24, r0
    acfa:	43 9e       	mul	r4, r19
    acfc:	90 0d       	add	r25, r0
    acfe:	11 24       	eor	r1, r1
    ad00:	ad eb       	ldi	r26, 0xBD	; 189
    ad02:	b4 e0       	ldi	r27, 0x04	; 4
    ad04:	20 e0       	ldi	r18, 0x00	; 0
    ad06:	30 e0       	ldi	r19, 0x00	; 0
    ad08:	2f 3f       	cpi	r18, 0xFF	; 255
    ad0a:	ff ef       	ldi	r31, 0xFF	; 255
    ad0c:	3f 07       	cpc	r19, r31
    ad0e:	49 f0       	breq	.+18     	; 0xad22 <dir_register+0x25e>
    ad10:	9c 01       	movw	r18, r24
    ad12:	22 0f       	add	r18, r18
    ad14:	33 1f       	adc	r19, r19
    ad16:	26 0f       	add	r18, r22
    ad18:	37 1f       	adc	r19, r23
    ad1a:	f9 01       	movw	r30, r18
    ad1c:	20 81       	ld	r18, Z
    ad1e:	31 81       	ldd	r19, Z+1	; 0x01
    ad20:	01 96       	adiw	r24, 0x01	; 1
    ad22:	4d 91       	ld	r20, X+
    ad24:	ed 89       	ldd	r30, Y+21	; 0x15
    ad26:	fe 89       	ldd	r31, Y+22	; 0x16
    ad28:	e4 0f       	add	r30, r20
    ad2a:	f1 1d       	adc	r31, r1
    ad2c:	20 83       	st	Z, r18
    ad2e:	31 83       	std	Z+1, r19	; 0x01
    ad30:	21 15       	cp	r18, r1
    ad32:	31 05       	cpc	r19, r1
    ad34:	11 f4       	brne	.+4      	; 0xad3a <dir_register+0x276>
    ad36:	2f ef       	ldi	r18, 0xFF	; 255
    ad38:	3f ef       	ldi	r19, 0xFF	; 255
    ad3a:	8a 16       	cp	r8, r26
    ad3c:	9b 06       	cpc	r9, r27
    ad3e:	21 f7       	brne	.-56     	; 0xad08 <dir_register+0x244>
    ad40:	2f 3f       	cpi	r18, 0xFF	; 255
    ad42:	3f 4f       	sbci	r19, 0xFF	; 255
    ad44:	49 f0       	breq	.+18     	; 0xad58 <dir_register+0x294>
    ad46:	88 0f       	add	r24, r24
    ad48:	99 1f       	adc	r25, r25
    ad4a:	db 01       	movw	r26, r22
    ad4c:	a8 0f       	add	r26, r24
    ad4e:	b9 1f       	adc	r27, r25
    ad50:	8d 91       	ld	r24, X+
    ad52:	9c 91       	ld	r25, X
    ad54:	89 2b       	or	r24, r25
    ad56:	19 f4       	brne	.+6      	; 0xad5e <dir_register+0x29a>
    ad58:	27 2d       	mov	r18, r7
    ad5a:	20 64       	ori	r18, 0x40	; 64
    ad5c:	72 2e       	mov	r7, r18
    ad5e:	ed 89       	ldd	r30, Y+21	; 0x15
    ad60:	fe 89       	ldd	r31, Y+22	; 0x16
    ad62:	70 82       	st	Z, r7
    ad64:	f6 01       	movw	r30, r12
    ad66:	53 82       	std	Z+3, r5	; 0x03
    ad68:	60 e0       	ldi	r22, 0x00	; 0
    ad6a:	70 e0       	ldi	r23, 0x00	; 0
    ad6c:	c8 01       	movw	r24, r16
    ad6e:	6a db       	rcall	.-2348   	; 0xa444 <dir_next>
    ad70:	00 97       	sbiw	r24, 0x00	; 0
    ad72:	81 f5       	brne	.+96     	; 0xadd4 <dir_register+0x310>
    ad74:	f1 e0       	ldi	r31, 0x01	; 1
    ad76:	ef 1a       	sub	r14, r31
    ad78:	f1 08       	sbc	r15, r1
    ad7a:	09 f0       	breq	.+2      	; 0xad7e <dir_register+0x2ba>
    ad7c:	9e cf       	rjmp	.-196    	; 0xacba <dir_register+0x1f6>
    ad7e:	03 c0       	rjmp	.+6      	; 0xad86 <dir_register+0x2c2>
    ad80:	26 e0       	ldi	r18, 0x06	; 6
    ad82:	90 e0       	ldi	r25, 0x00	; 0
    ad84:	28 c0       	rjmp	.+80     	; 0xadd6 <dir_register+0x312>
    ad86:	f8 01       	movw	r30, r16
    ad88:	46 89       	ldd	r20, Z+22	; 0x16
    ad8a:	57 89       	ldd	r21, Z+23	; 0x17
    ad8c:	60 8d       	ldd	r22, Z+24	; 0x18
    ad8e:	71 8d       	ldd	r23, Z+25	; 0x19
    ad90:	c6 01       	movw	r24, r12
    ad92:	0e 94 26 4b 	call	0x964c	; 0x964c <move_window>
    ad96:	00 97       	sbiw	r24, 0x00	; 0
    ad98:	e9 f4       	brne	.+58     	; 0xadd4 <dir_register+0x310>
    ad9a:	40 e2       	ldi	r20, 0x20	; 32
    ad9c:	50 e0       	ldi	r21, 0x00	; 0
    ad9e:	60 e0       	ldi	r22, 0x00	; 0
    ada0:	70 e0       	ldi	r23, 0x00	; 0
    ada2:	f8 01       	movw	r30, r16
    ada4:	82 8d       	ldd	r24, Z+26	; 0x1a
    ada6:	93 8d       	ldd	r25, Z+27	; 0x1b
    ada8:	0e 94 66 46 	call	0x8ccc	; 0x8ccc <mem_set>
    adac:	4b e0       	ldi	r20, 0x0B	; 11
    adae:	50 e0       	ldi	r21, 0x00	; 0
    adb0:	b5 01       	movw	r22, r10
    adb2:	f8 01       	movw	r30, r16
    adb4:	82 8d       	ldd	r24, Z+26	; 0x1a
    adb6:	93 8d       	ldd	r25, Z+27	; 0x1b
    adb8:	0e 94 cf 47 	call	0x8f9e	; 0x8f9e <mem_cpy.part.0>
    adbc:	f8 01       	movw	r30, r16
    adbe:	22 8d       	ldd	r18, Z+26	; 0x1a
    adc0:	33 8d       	ldd	r19, Z+27	; 0x1b
    adc2:	87 a1       	ldd	r24, Z+39	; 0x27
    adc4:	88 71       	andi	r24, 0x18	; 24
    adc6:	f9 01       	movw	r30, r18
    adc8:	84 87       	std	Z+12, r24	; 0x0c
    adca:	81 e0       	ldi	r24, 0x01	; 1
    adcc:	f6 01       	movw	r30, r12
    adce:	83 83       	std	Z+3, r24	; 0x03
    add0:	20 e0       	ldi	r18, 0x00	; 0
    add2:	d7 cf       	rjmp	.-82     	; 0xad82 <dir_register+0x2be>
    add4:	28 2f       	mov	r18, r24
    add6:	82 2f       	mov	r24, r18
    add8:	66 96       	adiw	r28, 0x16	; 22
    adda:	e2 e1       	ldi	r30, 0x12	; 18
    addc:	0c 94 fa df 	jmp	0x1bff4	; 0x1bff4 <__epilogue_restores__>

0000ade0 <follow_path>:
    ade0:	aa e0       	ldi	r26, 0x0A	; 10
    ade2:	b0 e0       	ldi	r27, 0x00	; 0
    ade4:	e6 ef       	ldi	r30, 0xF6	; 246
    ade6:	f6 e5       	ldi	r31, 0x56	; 86
    ade8:	0c 94 de df 	jmp	0x1bfbc	; 0x1bfbc <__prologue_saves__>
    adec:	7c 01       	movw	r14, r24
    adee:	3b 01       	movw	r6, r22
    adf0:	dc 01       	movw	r26, r24
    adf2:	0d 90       	ld	r0, X+
    adf4:	bc 91       	ld	r27, X
    adf6:	a0 2d       	mov	r26, r0
    adf8:	be 83       	std	Y+6, r27	; 0x06
    adfa:	ad 83       	std	Y+5, r26	; 0x05
    adfc:	fb 01       	movw	r30, r22
    adfe:	80 81       	ld	r24, Z
    ae00:	8f 32       	cpi	r24, 0x2F	; 47
    ae02:	11 f0       	breq	.+4      	; 0xae08 <follow_path+0x28>
    ae04:	8c 35       	cpi	r24, 0x5C	; 92
    ae06:	11 f4       	brne	.+4      	; 0xae0c <follow_path+0x2c>
    ae08:	93 01       	movw	r18, r6
    ae0a:	0c c0       	rjmp	.+24     	; 0xae24 <follow_path+0x44>
    ae0c:	ed 81       	ldd	r30, Y+5	; 0x05
    ae0e:	fe 81       	ldd	r31, Y+6	; 0x06
    ae10:	85 89       	ldd	r24, Z+21	; 0x15
    ae12:	96 89       	ldd	r25, Z+22	; 0x16
    ae14:	a7 89       	ldd	r26, Z+23	; 0x17
    ae16:	b0 8d       	ldd	r27, Z+24	; 0x18
    ae18:	f7 01       	movw	r30, r14
    ae1a:	86 83       	std	Z+6, r24	; 0x06
    ae1c:	97 83       	std	Z+7, r25	; 0x07
    ae1e:	a0 87       	std	Z+8, r26	; 0x08
    ae20:	b1 87       	std	Z+9, r27	; 0x09
    ae22:	0e c0       	rjmp	.+28     	; 0xae40 <follow_path+0x60>
    ae24:	39 01       	movw	r6, r18
    ae26:	d9 01       	movw	r26, r18
    ae28:	8c 91       	ld	r24, X
    ae2a:	2f 5f       	subi	r18, 0xFF	; 255
    ae2c:	3f 4f       	sbci	r19, 0xFF	; 255
    ae2e:	8f 32       	cpi	r24, 0x2F	; 47
    ae30:	c9 f3       	breq	.-14     	; 0xae24 <follow_path+0x44>
    ae32:	8c 35       	cpi	r24, 0x5C	; 92
    ae34:	b9 f3       	breq	.-18     	; 0xae24 <follow_path+0x44>
    ae36:	f7 01       	movw	r30, r14
    ae38:	16 82       	std	Z+6, r1	; 0x06
    ae3a:	17 82       	std	Z+7, r1	; 0x07
    ae3c:	10 86       	std	Z+8, r1	; 0x08
    ae3e:	11 86       	std	Z+9, r1	; 0x09
    ae40:	d3 01       	movw	r26, r6
    ae42:	8c 91       	ld	r24, X
    ae44:	80 32       	cpi	r24, 0x20	; 32
    ae46:	58 f0       	brcs	.+22     	; 0xae5e <follow_path+0x7e>
    ae48:	f7 01       	movw	r30, r14
    ae4a:	7c 96       	adiw	r30, 0x1c	; 28
    ae4c:	f8 87       	std	Y+8, r31	; 0x08
    ae4e:	ef 83       	std	Y+7, r30	; 0x07
    ae50:	2d 81       	ldd	r18, Y+5	; 0x05
    ae52:	3e 81       	ldd	r19, Y+6	; 0x06
    ae54:	2b 5c       	subi	r18, 0xCB	; 203
    ae56:	3f 4f       	sbci	r19, 0xFF	; 255
    ae58:	3a 87       	std	Y+10, r19	; 0x0a
    ae5a:	29 87       	std	Y+9, r18	; 0x09
    ae5c:	96 c0       	rjmp	.+300    	; 0xaf8a <follow_path+0x1aa>
    ae5e:	80 e8       	ldi	r24, 0x80	; 128
    ae60:	f7 01       	movw	r30, r14
    ae62:	87 a3       	std	Z+39, r24	; 0x27
    ae64:	40 e0       	ldi	r20, 0x00	; 0
    ae66:	50 e0       	ldi	r21, 0x00	; 0
    ae68:	ba 01       	movw	r22, r20
    ae6a:	c7 01       	movw	r24, r14
    ae6c:	73 d8       	rcall	.-3866   	; 0x9f54 <dir_sdi>
    ae6e:	e5 c1       	rjmp	.+970    	; 0xb23a <follow_path+0x45a>
    ae70:	6c 35       	cpi	r22, 0x5C	; 92
    ae72:	71 05       	cpc	r23, r1
    ae74:	b9 f1       	breq	.+110    	; 0xaee4 <follow_path+0x104>
    ae76:	60 38       	cpi	r22, 0x80	; 128
    ae78:	71 05       	cpc	r23, r1
    ae7a:	28 f4       	brcc	.+10     	; 0xae86 <follow_path+0xa6>
    ae7c:	e9 ef       	ldi	r30, 0xF9	; 249
    ae7e:	f3 e0       	ldi	r31, 0x03	; 3
    ae80:	41 91       	ld	r20, Z+
    ae82:	41 11       	cpse	r20, r1
    ae84:	8c c0       	rjmp	.+280    	; 0xaf9e <follow_path+0x1be>
    ae86:	0f 3f       	cpi	r16, 0xFF	; 255
    ae88:	11 05       	cpc	r17, r1
    ae8a:	08 f0       	brcs	.+2      	; 0xae8e <follow_path+0xae>
    ae8c:	b9 c1       	rjmp	.+882    	; 0xb200 <follow_path+0x420>
    ae8e:	f8 01       	movw	r30, r16
    ae90:	ee 0f       	add	r30, r30
    ae92:	ff 1f       	adc	r31, r31
    ae94:	ea 0d       	add	r30, r10
    ae96:	fb 1d       	adc	r31, r11
    ae98:	71 83       	std	Z+1, r23	; 0x01
    ae9a:	60 83       	st	Z, r22
    ae9c:	0f 5f       	subi	r16, 0xFF	; 255
    ae9e:	1f 4f       	sbci	r17, 0xFF	; 255
    aea0:	ce 01       	movw	r24, r28
    aea2:	01 96       	adiw	r24, 0x01	; 1
    aea4:	0e 94 7e 46 	call	0x8cfc	; 0x8cfc <tchar2uni>
    aea8:	6f 3f       	cpi	r22, 0xFF	; 255
    aeaa:	bf ef       	ldi	r27, 0xFF	; 255
    aeac:	7b 07       	cpc	r23, r27
    aeae:	8b 07       	cpc	r24, r27
    aeb0:	9b 07       	cpc	r25, r27
    aeb2:	09 f4       	brne	.+2      	; 0xaeb6 <follow_path+0xd6>
    aeb4:	a5 c1       	rjmp	.+842    	; 0xb200 <follow_path+0x420>
    aeb6:	61 15       	cp	r22, r1
    aeb8:	71 05       	cpc	r23, r1
    aeba:	e1 e0       	ldi	r30, 0x01	; 1
    aebc:	8e 07       	cpc	r24, r30
    aebe:	91 05       	cpc	r25, r1
    aec0:	48 f0       	brcs	.+18     	; 0xaed4 <follow_path+0xf4>
    aec2:	f8 01       	movw	r30, r16
    aec4:	ee 0f       	add	r30, r30
    aec6:	ff 1f       	adc	r31, r31
    aec8:	ea 0d       	add	r30, r10
    aeca:	fb 1d       	adc	r31, r11
    aecc:	91 83       	std	Z+1, r25	; 0x01
    aece:	80 83       	st	Z, r24
    aed0:	0f 5f       	subi	r16, 0xFF	; 255
    aed2:	1f 4f       	sbci	r17, 0xFF	; 255
    aed4:	9b 01       	movw	r18, r22
    aed6:	60 32       	cpi	r22, 0x20	; 32
    aed8:	71 05       	cpc	r23, r1
    aeda:	08 f4       	brcc	.+2      	; 0xaede <follow_path+0xfe>
    aedc:	6a c0       	rjmp	.+212    	; 0xafb2 <follow_path+0x1d2>
    aede:	6f 32       	cpi	r22, 0x2F	; 47
    aee0:	71 05       	cpc	r23, r1
    aee2:	31 f6       	brne	.-116    	; 0xae70 <follow_path+0x90>
    aee4:	e9 81       	ldd	r30, Y+1	; 0x01
    aee6:	fa 81       	ldd	r31, Y+2	; 0x02
    aee8:	80 81       	ld	r24, Z
    aeea:	8f 32       	cpi	r24, 0x2F	; 47
    aeec:	09 f4       	brne	.+2      	; 0xaef0 <follow_path+0x110>
    aeee:	5d c0       	rjmp	.+186    	; 0xafaa <follow_path+0x1ca>
    aef0:	8c 35       	cpi	r24, 0x5C	; 92
    aef2:	09 f4       	brne	.+2      	; 0xaef6 <follow_path+0x116>
    aef4:	5a c0       	rjmp	.+180    	; 0xafaa <follow_path+0x1ca>
    aef6:	1b 82       	std	Y+3, r1	; 0x03
    aef8:	69 80       	ldd	r6, Y+1	; 0x01
    aefa:	7a 80       	ldd	r7, Y+2	; 0x02
    aefc:	98 01       	movw	r18, r16
    aefe:	22 0f       	add	r18, r18
    af00:	33 1f       	adc	r19, r19
    af02:	01 30       	cpi	r16, 0x01	; 1
    af04:	11 05       	cpc	r17, r1
    af06:	09 f0       	breq	.+2      	; 0xaf0a <follow_path+0x12a>
    af08:	57 c0       	rjmp	.+174    	; 0xafb8 <follow_path+0x1d8>
    af0a:	d5 01       	movw	r26, r10
    af0c:	8d 91       	ld	r24, X+
    af0e:	9c 91       	ld	r25, X
    af10:	8e 97       	sbiw	r24, 0x2e	; 46
    af12:	09 f0       	breq	.+2      	; 0xaf16 <follow_path+0x136>
    af14:	5c c0       	rjmp	.+184    	; 0xafce <follow_path+0x1ee>
    af16:	f9 01       	movw	r30, r18
    af18:	ea 0d       	add	r30, r10
    af1a:	fb 1d       	adc	r31, r11
    af1c:	11 82       	std	Z+1, r1	; 0x01
    af1e:	10 82       	st	Z, r1
    af20:	f7 01       	movw	r30, r14
    af22:	7c 96       	adiw	r30, 0x1c	; 28
    af24:	80 e0       	ldi	r24, 0x00	; 0
    af26:	90 e0       	ldi	r25, 0x00	; 0
    af28:	80 17       	cp	r24, r16
    af2a:	91 07       	cpc	r25, r17
    af2c:	08 f0       	brcs	.+2      	; 0xaf30 <follow_path+0x150>
    af2e:	53 c0       	rjmp	.+166    	; 0xafd6 <follow_path+0x1f6>
    af30:	2e e2       	ldi	r18, 0x2E	; 46
    af32:	21 93       	st	Z+, r18
    af34:	01 96       	adiw	r24, 0x01	; 1
    af36:	8b 30       	cpi	r24, 0x0B	; 11
    af38:	91 05       	cpc	r25, r1
    af3a:	b1 f7       	brne	.-20     	; 0xaf28 <follow_path+0x148>
    af3c:	8b 81       	ldd	r24, Y+3	; 0x03
    af3e:	80 62       	ori	r24, 0x20	; 32
    af40:	f7 01       	movw	r30, r14
    af42:	87 a3       	std	Z+39, r24	; 0x27
    af44:	80 e0       	ldi	r24, 0x00	; 0
    af46:	90 e0       	ldi	r25, 0x00	; 0
    af48:	00 97       	sbiw	r24, 0x00	; 0
    af4a:	09 f0       	breq	.+2      	; 0xaf4e <follow_path+0x16e>
    af4c:	76 c1       	rjmp	.+748    	; 0xb23a <follow_path+0x45a>
    af4e:	c7 01       	movw	r24, r14
    af50:	ab dc       	rcall	.-1706   	; 0xa8a8 <dir_find>
    af52:	f7 01       	movw	r30, r14
    af54:	27 a1       	ldd	r18, Z+39	; 0x27
    af56:	00 97       	sbiw	r24, 0x00	; 0
    af58:	09 f0       	breq	.+2      	; 0xaf5c <follow_path+0x17c>
    af5a:	55 c1       	rjmp	.+682    	; 0xb206 <follow_path+0x426>
    af5c:	22 fd       	sbrc	r18, 2
    af5e:	6d c1       	rjmp	.+730    	; 0xb23a <follow_path+0x45a>
    af60:	f7 01       	movw	r30, r14
    af62:	84 81       	ldd	r24, Z+4	; 0x04
    af64:	84 ff       	sbrs	r24, 4
    af66:	60 c1       	rjmp	.+704    	; 0xb228 <follow_path+0x448>
    af68:	66 85       	ldd	r22, Z+14	; 0x0e
    af6a:	77 85       	ldd	r23, Z+15	; 0x0f
    af6c:	71 70       	andi	r23, 0x01	; 1
    af6e:	29 85       	ldd	r18, Y+9	; 0x09
    af70:	3a 85       	ldd	r19, Y+10	; 0x0a
    af72:	62 0f       	add	r22, r18
    af74:	73 1f       	adc	r23, r19
    af76:	ad 81       	ldd	r26, Y+5	; 0x05
    af78:	be 81       	ldd	r27, Y+6	; 0x06
    af7a:	8c 91       	ld	r24, X
    af7c:	0e 94 97 49 	call	0x932e	; 0x932e <ld_clust.isra.4>
    af80:	f7 01       	movw	r30, r14
    af82:	66 83       	std	Z+6, r22	; 0x06
    af84:	77 83       	std	Z+7, r23	; 0x07
    af86:	80 87       	std	Z+8, r24	; 0x08
    af88:	91 87       	std	Z+9, r25	; 0x09
    af8a:	7a 82       	std	Y+2, r7	; 0x02
    af8c:	69 82       	std	Y+1, r6	; 0x01
    af8e:	d7 01       	movw	r26, r14
    af90:	ed 91       	ld	r30, X+
    af92:	fc 91       	ld	r31, X
    af94:	a3 84       	ldd	r10, Z+11	; 0x0b
    af96:	b4 84       	ldd	r11, Z+12	; 0x0c
    af98:	00 e0       	ldi	r16, 0x00	; 0
    af9a:	10 e0       	ldi	r17, 0x00	; 0
    af9c:	81 cf       	rjmp	.-254    	; 0xaea0 <follow_path+0xc0>
    af9e:	50 e0       	ldi	r21, 0x00	; 0
    afa0:	24 17       	cp	r18, r20
    afa2:	35 07       	cpc	r19, r21
    afa4:	09 f0       	breq	.+2      	; 0xafa8 <follow_path+0x1c8>
    afa6:	6c cf       	rjmp	.-296    	; 0xae80 <follow_path+0xa0>
    afa8:	2b c1       	rjmp	.+598    	; 0xb200 <follow_path+0x420>
    afaa:	31 96       	adiw	r30, 0x01	; 1
    afac:	fa 83       	std	Y+2, r31	; 0x02
    afae:	e9 83       	std	Y+1, r30	; 0x01
    afb0:	99 cf       	rjmp	.-206    	; 0xaee4 <follow_path+0x104>
    afb2:	f4 e0       	ldi	r31, 0x04	; 4
    afb4:	fb 83       	std	Y+3, r31	; 0x03
    afb6:	a0 cf       	rjmp	.-192    	; 0xaef8 <follow_path+0x118>
    afb8:	02 30       	cpi	r16, 0x02	; 2
    afba:	11 05       	cpc	r17, r1
    afbc:	41 f4       	brne	.+16     	; 0xafce <follow_path+0x1ee>
    afbe:	f5 01       	movw	r30, r10
    afc0:	82 81       	ldd	r24, Z+2	; 0x02
    afc2:	93 81       	ldd	r25, Z+3	; 0x03
    afc4:	8e 97       	sbiw	r24, 0x2e	; 46
    afc6:	19 f4       	brne	.+6      	; 0xafce <follow_path+0x1ee>
    afc8:	80 81       	ld	r24, Z
    afca:	91 81       	ldd	r25, Z+1	; 0x01
    afcc:	a1 cf       	rjmp	.-190    	; 0xaf10 <follow_path+0x130>
    afce:	f9 01       	movw	r30, r18
    afd0:	ea 0d       	add	r30, r10
    afd2:	fb 1d       	adc	r31, r11
    afd4:	09 c0       	rjmp	.+18     	; 0xafe8 <follow_path+0x208>
    afd6:	20 e2       	ldi	r18, 0x20	; 32
    afd8:	ac cf       	rjmp	.-168    	; 0xaf32 <follow_path+0x152>
    afda:	92 91       	ld	r25, -Z
    afdc:	82 91       	ld	r24, -Z
    afde:	80 32       	cpi	r24, 0x20	; 32
    afe0:	91 05       	cpc	r25, r1
    afe2:	31 f4       	brne	.+12     	; 0xaff0 <follow_path+0x210>
    afe4:	01 50       	subi	r16, 0x01	; 1
    afe6:	11 09       	sbc	r17, r1
    afe8:	01 15       	cp	r16, r1
    afea:	11 05       	cpc	r17, r1
    afec:	b1 f7       	brne	.-20     	; 0xafda <follow_path+0x1fa>
    afee:	02 c0       	rjmp	.+4      	; 0xaff4 <follow_path+0x214>
    aff0:	8e 97       	sbiw	r24, 0x2e	; 46
    aff2:	c1 f3       	breq	.-16     	; 0xafe4 <follow_path+0x204>
    aff4:	f8 01       	movw	r30, r16
    aff6:	ee 0f       	add	r30, r30
    aff8:	ff 1f       	adc	r31, r31
    affa:	ea 0d       	add	r30, r10
    affc:	fb 1d       	adc	r31, r11
    affe:	11 82       	std	Z+1, r1	; 0x01
    b000:	10 82       	st	Z, r1
    b002:	01 15       	cp	r16, r1
    b004:	11 05       	cpc	r17, r1
    b006:	09 f4       	brne	.+2      	; 0xb00a <follow_path+0x22a>
    b008:	fb c0       	rjmp	.+502    	; 0xb200 <follow_path+0x420>
    b00a:	d5 01       	movw	r26, r10
    b00c:	41 2c       	mov	r4, r1
    b00e:	51 2c       	mov	r5, r1
    b010:	8d 91       	ld	r24, X+
    b012:	9d 91       	ld	r25, X+
    b014:	80 32       	cpi	r24, 0x20	; 32
    b016:	91 05       	cpc	r25, r1
    b018:	21 f4       	brne	.+8      	; 0xb022 <follow_path+0x242>
    b01a:	2f ef       	ldi	r18, 0xFF	; 255
    b01c:	42 1a       	sub	r4, r18
    b01e:	52 0a       	sbc	r5, r18
    b020:	f7 cf       	rjmp	.-18     	; 0xb010 <follow_path+0x230>
    b022:	41 14       	cp	r4, r1
    b024:	51 04       	cpc	r5, r1
    b026:	11 f4       	brne	.+4      	; 0xb02c <follow_path+0x24c>
    b028:	8e 97       	sbiw	r24, 0x2e	; 46
    b02a:	39 f4       	brne	.+14     	; 0xb03a <follow_path+0x25a>
    b02c:	3b 81       	ldd	r19, Y+3	; 0x03
    b02e:	33 60       	ori	r19, 0x03	; 3
    b030:	3b 83       	std	Y+3, r19	; 0x03
    b032:	03 c0       	rjmp	.+6      	; 0xb03a <follow_path+0x25a>
    b034:	01 50       	subi	r16, 0x01	; 1
    b036:	11 09       	sbc	r17, r1
    b038:	21 f0       	breq	.+8      	; 0xb042 <follow_path+0x262>
    b03a:	92 91       	ld	r25, -Z
    b03c:	82 91       	ld	r24, -Z
    b03e:	8e 97       	sbiw	r24, 0x2e	; 46
    b040:	c9 f7       	brne	.-14     	; 0xb034 <follow_path+0x254>
    b042:	4b e0       	ldi	r20, 0x0B	; 11
    b044:	50 e0       	ldi	r21, 0x00	; 0
    b046:	60 e2       	ldi	r22, 0x20	; 32
    b048:	70 e0       	ldi	r23, 0x00	; 0
    b04a:	8f 81       	ldd	r24, Y+7	; 0x07
    b04c:	98 85       	ldd	r25, Y+8	; 0x08
    b04e:	0e 94 66 46 	call	0x8ccc	; 0x8ccc <mem_set>
    b052:	48 e0       	ldi	r20, 0x08	; 8
    b054:	84 2e       	mov	r8, r20
    b056:	91 2c       	mov	r9, r1
    b058:	c1 2c       	mov	r12, r1
    b05a:	d1 2c       	mov	r13, r1
    b05c:	1c 82       	std	Y+4, r1	; 0x04
    b05e:	12 01       	movw	r2, r4
    b060:	8f ef       	ldi	r24, 0xFF	; 255
    b062:	28 1a       	sub	r2, r24
    b064:	38 0a       	sbc	r3, r24
    b066:	44 0c       	add	r4, r4
    b068:	55 1c       	adc	r5, r5
    b06a:	f5 01       	movw	r30, r10
    b06c:	e4 0d       	add	r30, r4
    b06e:	f5 1d       	adc	r31, r5
    b070:	80 81       	ld	r24, Z
    b072:	91 81       	ldd	r25, Z+1	; 0x01
    b074:	00 97       	sbiw	r24, 0x00	; 0
    b076:	09 f4       	brne	.+2      	; 0xb07a <follow_path+0x29a>
    b078:	98 c0       	rjmp	.+304    	; 0xb1aa <follow_path+0x3ca>
    b07a:	80 32       	cpi	r24, 0x20	; 32
    b07c:	91 05       	cpc	r25, r1
    b07e:	31 f0       	breq	.+12     	; 0xb08c <follow_path+0x2ac>
    b080:	8e 32       	cpi	r24, 0x2E	; 46
    b082:	91 05       	cpc	r25, r1
    b084:	41 f4       	brne	.+16     	; 0xb096 <follow_path+0x2b6>
    b086:	20 16       	cp	r2, r16
    b088:	31 06       	cpc	r3, r17
    b08a:	61 f0       	breq	.+24     	; 0xb0a4 <follow_path+0x2c4>
    b08c:	9b 81       	ldd	r25, Y+3	; 0x03
    b08e:	93 60       	ori	r25, 0x03	; 3
    b090:	9b 83       	std	Y+3, r25	; 0x03
    b092:	21 01       	movw	r4, r2
    b094:	e4 cf       	rjmp	.-56     	; 0xb05e <follow_path+0x27e>
    b096:	c8 14       	cp	r12, r8
    b098:	d9 04       	cpc	r13, r9
    b09a:	40 f4       	brcc	.+16     	; 0xb0ac <follow_path+0x2cc>
    b09c:	20 16       	cp	r2, r16
    b09e:	31 06       	cpc	r3, r17
    b0a0:	31 f5       	brne	.+76     	; 0xb0ee <follow_path+0x30e>
    b0a2:	c5 c0       	rjmp	.+394    	; 0xb22e <follow_path+0x44e>
    b0a4:	c8 14       	cp	r12, r8
    b0a6:	d9 04       	cpc	r13, r9
    b0a8:	08 f4       	brcc	.+2      	; 0xb0ac <follow_path+0x2cc>
    b0aa:	c1 c0       	rjmp	.+386    	; 0xb22e <follow_path+0x44e>
    b0ac:	ab e0       	ldi	r26, 0x0B	; 11
    b0ae:	8a 16       	cp	r8, r26
    b0b0:	91 04       	cpc	r9, r1
    b0b2:	39 f4       	brne	.+14     	; 0xb0c2 <follow_path+0x2e2>
    b0b4:	bb 81       	ldd	r27, Y+3	; 0x03
    b0b6:	b3 60       	ori	r27, 0x03	; 3
    b0b8:	bb 83       	std	Y+3, r27	; 0x03
    b0ba:	2b e0       	ldi	r18, 0x0B	; 11
    b0bc:	82 2e       	mov	r8, r18
    b0be:	91 2c       	mov	r9, r1
    b0c0:	74 c0       	rjmp	.+232    	; 0xb1aa <follow_path+0x3ca>
    b0c2:	20 16       	cp	r2, r16
    b0c4:	31 06       	cpc	r3, r17
    b0c6:	39 f0       	breq	.+14     	; 0xb0d6 <follow_path+0x2f6>
    b0c8:	eb 81       	ldd	r30, Y+3	; 0x03
    b0ca:	e3 60       	ori	r30, 0x03	; 3
    b0cc:	eb 83       	std	Y+3, r30	; 0x03
    b0ce:	02 15       	cp	r16, r2
    b0d0:	13 05       	cpc	r17, r3
    b0d2:	08 f4       	brcc	.+2      	; 0xb0d6 <follow_path+0x2f6>
    b0d4:	6a c0       	rjmp	.+212    	; 0xb1aa <follow_path+0x3ca>
    b0d6:	fc 81       	ldd	r31, Y+4	; 0x04
    b0d8:	ff 0f       	add	r31, r31
    b0da:	ff 0f       	add	r31, r31
    b0dc:	fc 83       	std	Y+4, r31	; 0x04
    b0de:	18 01       	movw	r2, r16
    b0e0:	8b e0       	ldi	r24, 0x0B	; 11
    b0e2:	88 2e       	mov	r8, r24
    b0e4:	91 2c       	mov	r9, r1
    b0e6:	98 e0       	ldi	r25, 0x08	; 8
    b0e8:	c9 2e       	mov	r12, r25
    b0ea:	d1 2c       	mov	r13, r1
    b0ec:	d2 cf       	rjmp	.-92     	; 0xb092 <follow_path+0x2b2>
    b0ee:	80 38       	cpi	r24, 0x80	; 128
    b0f0:	91 05       	cpc	r25, r1
    b0f2:	78 f1       	brcs	.+94     	; 0xb152 <follow_path+0x372>
    b0f4:	2b 81       	ldd	r18, Y+3	; 0x03
    b0f6:	22 60       	ori	r18, 0x02	; 2
    b0f8:	52 2e       	mov	r5, r18
    b0fa:	bc 01       	movw	r22, r24
    b0fc:	80 e0       	ldi	r24, 0x00	; 0
    b0fe:	90 e0       	ldi	r25, 0x00	; 0
    b100:	45 eb       	ldi	r20, 0xB5	; 181
    b102:	51 e0       	ldi	r21, 0x01	; 1
    b104:	0e 94 b9 68 	call	0xd172	; 0xd172 <ff_uni2oem>
    b108:	87 ff       	sbrs	r24, 7
    b10a:	08 c0       	rjmp	.+16     	; 0xb11c <follow_path+0x33c>
    b10c:	8f 77       	andi	r24, 0x7F	; 127
    b10e:	99 27       	eor	r25, r25
    b110:	fc 01       	movw	r30, r24
    b112:	e3 5c       	subi	r30, 0xC3	; 195
    b114:	fb 4f       	sbci	r31, 0xFB	; 251
    b116:	80 81       	ld	r24, Z
    b118:	90 e0       	ldi	r25, 0x00	; 0
    b11a:	18 c0       	rjmp	.+48     	; 0xb14c <follow_path+0x36c>
    b11c:	8f 3f       	cpi	r24, 0xFF	; 255
    b11e:	91 05       	cpc	r25, r1
    b120:	a9 f0       	breq	.+42     	; 0xb14c <follow_path+0x36c>
    b122:	a0 f0       	brcs	.+40     	; 0xb14c <follow_path+0x36c>
    b124:	94 01       	movw	r18, r8
    b126:	21 50       	subi	r18, 0x01	; 1
    b128:	31 09       	sbc	r19, r1
    b12a:	c2 16       	cp	r12, r18
    b12c:	d3 06       	cpc	r13, r19
    b12e:	28 f0       	brcs	.+10     	; 0xb13a <follow_path+0x35a>
    b130:	3b 81       	ldd	r19, Y+3	; 0x03
    b132:	33 60       	ori	r19, 0x03	; 3
    b134:	3b 83       	std	Y+3, r19	; 0x03
    b136:	64 01       	movw	r12, r8
    b138:	ac cf       	rjmp	.-168    	; 0xb092 <follow_path+0x2b2>
    b13a:	f7 01       	movw	r30, r14
    b13c:	ec 0d       	add	r30, r12
    b13e:	fd 1d       	adc	r31, r13
    b140:	94 8f       	std	Z+28, r25	; 0x1c
    b142:	d6 01       	movw	r26, r12
    b144:	11 96       	adiw	r26, 0x01	; 1
    b146:	6d 01       	movw	r12, r26
    b148:	5b 82       	std	Y+3, r5	; 0x03
    b14a:	26 c0       	rjmp	.+76     	; 0xb198 <follow_path+0x3b8>
    b14c:	00 97       	sbiw	r24, 0x00	; 0
    b14e:	59 f0       	breq	.+22     	; 0xb166 <follow_path+0x386>
    b150:	5b 82       	std	Y+3, r5	; 0x03
    b152:	e2 e0       	ldi	r30, 0x02	; 2
    b154:	f4 e0       	ldi	r31, 0x04	; 4
    b156:	21 91       	ld	r18, Z+
    b158:	22 23       	and	r18, r18
    b15a:	59 f0       	breq	.+22     	; 0xb172 <follow_path+0x392>
    b15c:	30 e0       	ldi	r19, 0x00	; 0
    b15e:	82 17       	cp	r24, r18
    b160:	93 07       	cpc	r25, r19
    b162:	c9 f7       	brne	.-14     	; 0xb156 <follow_path+0x376>
    b164:	5b 80       	ldd	r5, Y+3	; 0x03
    b166:	b5 2d       	mov	r27, r5
    b168:	b3 60       	ori	r27, 0x03	; 3
    b16a:	bb 83       	std	Y+3, r27	; 0x03
    b16c:	8f e5       	ldi	r24, 0x5F	; 95
    b16e:	90 e0       	ldi	r25, 0x00	; 0
    b170:	13 c0       	rjmp	.+38     	; 0xb198 <follow_path+0x3b8>
    b172:	9c 01       	movw	r18, r24
    b174:	21 54       	subi	r18, 0x41	; 65
    b176:	31 09       	sbc	r19, r1
    b178:	2a 31       	cpi	r18, 0x1A	; 26
    b17a:	31 05       	cpc	r19, r1
    b17c:	18 f4       	brcc	.+6      	; 0xb184 <follow_path+0x3a4>
    b17e:	ec 81       	ldd	r30, Y+4	; 0x04
    b180:	e2 60       	ori	r30, 0x02	; 2
    b182:	ec 83       	std	Y+4, r30	; 0x04
    b184:	9c 01       	movw	r18, r24
    b186:	21 56       	subi	r18, 0x61	; 97
    b188:	31 09       	sbc	r19, r1
    b18a:	2a 31       	cpi	r18, 0x1A	; 26
    b18c:	31 05       	cpc	r19, r1
    b18e:	20 f4       	brcc	.+8      	; 0xb198 <follow_path+0x3b8>
    b190:	fc 81       	ldd	r31, Y+4	; 0x04
    b192:	f1 60       	ori	r31, 0x01	; 1
    b194:	fc 83       	std	Y+4, r31	; 0x04
    b196:	80 97       	sbiw	r24, 0x20	; 32
    b198:	f7 01       	movw	r30, r14
    b19a:	ec 0d       	add	r30, r12
    b19c:	fd 1d       	adc	r31, r13
    b19e:	84 8f       	std	Z+28, r24	; 0x1c
    b1a0:	96 01       	movw	r18, r12
    b1a2:	2f 5f       	subi	r18, 0xFF	; 255
    b1a4:	3f 4f       	sbci	r19, 0xFF	; 255
    b1a6:	69 01       	movw	r12, r18
    b1a8:	74 cf       	rjmp	.-280    	; 0xb092 <follow_path+0x2b2>
    b1aa:	f7 01       	movw	r30, r14
    b1ac:	84 8d       	ldd	r24, Z+28	; 0x1c
    b1ae:	85 3e       	cpi	r24, 0xE5	; 229
    b1b0:	11 f4       	brne	.+4      	; 0xb1b6 <follow_path+0x3d6>
    b1b2:	25 e0       	ldi	r18, 0x05	; 5
    b1b4:	24 8f       	std	Z+28, r18	; 0x1c
    b1b6:	38 e0       	ldi	r19, 0x08	; 8
    b1b8:	83 16       	cp	r8, r19
    b1ba:	91 04       	cpc	r9, r1
    b1bc:	21 f4       	brne	.+8      	; 0xb1c6 <follow_path+0x3e6>
    b1be:	8c 81       	ldd	r24, Y+4	; 0x04
    b1c0:	88 0f       	add	r24, r24
    b1c2:	88 0f       	add	r24, r24
    b1c4:	8c 83       	std	Y+4, r24	; 0x04
    b1c6:	8c 81       	ldd	r24, Y+4	; 0x04
    b1c8:	8c 70       	andi	r24, 0x0C	; 12
    b1ca:	8c 30       	cpi	r24, 0x0C	; 12
    b1cc:	21 f0       	breq	.+8      	; 0xb1d6 <follow_path+0x3f6>
    b1ce:	8c 81       	ldd	r24, Y+4	; 0x04
    b1d0:	83 70       	andi	r24, 0x03	; 3
    b1d2:	83 30       	cpi	r24, 0x03	; 3
    b1d4:	19 f4       	brne	.+6      	; 0xb1dc <follow_path+0x3fc>
    b1d6:	9b 81       	ldd	r25, Y+3	; 0x03
    b1d8:	92 60       	ori	r25, 0x02	; 2
    b1da:	9b 83       	std	Y+3, r25	; 0x03
    b1dc:	ab 81       	ldd	r26, Y+3	; 0x03
    b1de:	a1 fd       	sbrc	r26, 1
    b1e0:	0b c0       	rjmp	.+22     	; 0xb1f8 <follow_path+0x418>
    b1e2:	bc 81       	ldd	r27, Y+4	; 0x04
    b1e4:	b0 ff       	sbrs	r27, 0
    b1e6:	02 c0       	rjmp	.+4      	; 0xb1ec <follow_path+0x40c>
    b1e8:	a0 61       	ori	r26, 0x10	; 16
    b1ea:	ab 83       	std	Y+3, r26	; 0x03
    b1ec:	ec 81       	ldd	r30, Y+4	; 0x04
    b1ee:	e2 ff       	sbrs	r30, 2
    b1f0:	03 c0       	rjmp	.+6      	; 0xb1f8 <follow_path+0x418>
    b1f2:	fb 81       	ldd	r31, Y+3	; 0x03
    b1f4:	f8 60       	ori	r31, 0x08	; 8
    b1f6:	fb 83       	std	Y+3, r31	; 0x03
    b1f8:	2b 81       	ldd	r18, Y+3	; 0x03
    b1fa:	f7 01       	movw	r30, r14
    b1fc:	27 a3       	std	Z+39, r18	; 0x27
    b1fe:	a2 ce       	rjmp	.-700    	; 0xaf44 <follow_path+0x164>
    b200:	86 e0       	ldi	r24, 0x06	; 6
    b202:	90 e0       	ldi	r25, 0x00	; 0
    b204:	a1 ce       	rjmp	.-702    	; 0xaf48 <follow_path+0x168>
    b206:	84 30       	cpi	r24, 0x04	; 4
    b208:	91 05       	cpc	r25, r1
    b20a:	b9 f4       	brne	.+46     	; 0xb23a <follow_path+0x45a>
    b20c:	32 2f       	mov	r19, r18
    b20e:	34 70       	andi	r19, 0x04	; 4
    b210:	25 ff       	sbrs	r18, 5
    b212:	08 c0       	rjmp	.+16     	; 0xb224 <follow_path+0x444>
    b214:	33 23       	and	r19, r19
    b216:	09 f4       	brne	.+2      	; 0xb21a <follow_path+0x43a>
    b218:	b8 ce       	rjmp	.-656    	; 0xaf8a <follow_path+0x1aa>
    b21a:	80 e8       	ldi	r24, 0x80	; 128
    b21c:	87 a3       	std	Z+39, r24	; 0x27
    b21e:	80 e0       	ldi	r24, 0x00	; 0
    b220:	90 e0       	ldi	r25, 0x00	; 0
    b222:	0b c0       	rjmp	.+22     	; 0xb23a <follow_path+0x45a>
    b224:	31 11       	cpse	r19, r1
    b226:	09 c0       	rjmp	.+18     	; 0xb23a <follow_path+0x45a>
    b228:	85 e0       	ldi	r24, 0x05	; 5
    b22a:	90 e0       	ldi	r25, 0x00	; 0
    b22c:	06 c0       	rjmp	.+12     	; 0xb23a <follow_path+0x45a>
    b22e:	fb e0       	ldi	r31, 0x0B	; 11
    b230:	8f 16       	cp	r8, r31
    b232:	91 04       	cpc	r9, r1
    b234:	09 f0       	breq	.+2      	; 0xb238 <follow_path+0x458>
    b236:	4f cf       	rjmp	.-354    	; 0xb0d6 <follow_path+0x2f6>
    b238:	3d cf       	rjmp	.-390    	; 0xb0b4 <follow_path+0x2d4>
    b23a:	2a 96       	adiw	r28, 0x0a	; 10
    b23c:	e2 e1       	ldi	r30, 0x12	; 18
    b23e:	0c 94 fa df 	jmp	0x1bff4	; 0x1bff4 <__epilogue_restores__>

0000b242 <f_mount>:
    b242:	a6 e0       	ldi	r26, 0x06	; 6
    b244:	b0 e0       	ldi	r27, 0x00	; 0
    b246:	e7 e2       	ldi	r30, 0x27	; 39
    b248:	f9 e5       	ldi	r31, 0x59	; 89
    b24a:	0c 94 ed df 	jmp	0x1bfda	; 0x1bfda <__prologue_saves__+0x1e>
    b24e:	9c 83       	std	Y+4, r25	; 0x04
    b250:	8b 83       	std	Y+3, r24	; 0x03
    b252:	7e 83       	std	Y+6, r23	; 0x06
    b254:	6d 83       	std	Y+5, r22	; 0x05
    b256:	14 2f       	mov	r17, r20
    b258:	7a 83       	std	Y+2, r23	; 0x02
    b25a:	69 83       	std	Y+1, r22	; 0x01
    b25c:	ce 01       	movw	r24, r28
    b25e:	01 96       	adiw	r24, 0x01	; 1
    b260:	0e 94 77 47 	call	0x8eee	; 0x8eee <get_ldnumber>
    b264:	97 fd       	sbrc	r25, 7
    b266:	20 c0       	rjmp	.+64     	; 0xb2a8 <f_mount+0x66>
    b268:	88 0f       	add	r24, r24
    b26a:	99 1f       	adc	r25, r25
    b26c:	fc 01       	movw	r30, r24
    b26e:	e3 51       	subi	r30, 0x13	; 19
    b270:	f8 4e       	sbci	r31, 0xE8	; 232
    b272:	01 90       	ld	r0, Z+
    b274:	f0 81       	ld	r31, Z
    b276:	e0 2d       	mov	r30, r0
    b278:	30 97       	sbiw	r30, 0x00	; 0
    b27a:	09 f0       	breq	.+2      	; 0xb27e <f_mount+0x3c>
    b27c:	10 82       	st	Z, r1
    b27e:	eb 81       	ldd	r30, Y+3	; 0x03
    b280:	fc 81       	ldd	r31, Y+4	; 0x04
    b282:	30 97       	sbiw	r30, 0x00	; 0
    b284:	09 f0       	breq	.+2      	; 0xb288 <f_mount+0x46>
    b286:	10 82       	st	Z, r1
    b288:	dc 01       	movw	r26, r24
    b28a:	a3 51       	subi	r26, 0x13	; 19
    b28c:	b8 4e       	sbci	r27, 0xE8	; 232
    b28e:	ed 93       	st	X+, r30
    b290:	fc 93       	st	X, r31
    b292:	11 23       	and	r17, r17
    b294:	61 f0       	breq	.+24     	; 0xb2ae <f_mount+0x6c>
    b296:	40 e0       	ldi	r20, 0x00	; 0
    b298:	be 01       	movw	r22, r28
    b29a:	6d 5f       	subi	r22, 0xFD	; 253
    b29c:	7f 4f       	sbci	r23, 0xFF	; 255
    b29e:	ce 01       	movw	r24, r28
    b2a0:	05 96       	adiw	r24, 0x05	; 5
    b2a2:	0e 94 a1 4b 	call	0x9742	; 0x9742 <mount_volume>
    b2a6:	05 c0       	rjmp	.+10     	; 0xb2b2 <f_mount+0x70>
    b2a8:	8b e0       	ldi	r24, 0x0B	; 11
    b2aa:	90 e0       	ldi	r25, 0x00	; 0
    b2ac:	02 c0       	rjmp	.+4      	; 0xb2b2 <f_mount+0x70>
    b2ae:	80 e0       	ldi	r24, 0x00	; 0
    b2b0:	90 e0       	ldi	r25, 0x00	; 0
    b2b2:	26 96       	adiw	r28, 0x06	; 6
    b2b4:	e3 e0       	ldi	r30, 0x03	; 3
    b2b6:	0c 94 09 e0 	jmp	0x1c012	; 0x1c012 <__epilogue_restores__+0x1e>

0000b2ba <f_open>:
    b2ba:	a6 e3       	ldi	r26, 0x36	; 54
    b2bc:	b0 e0       	ldi	r27, 0x00	; 0
    b2be:	e3 e6       	ldi	r30, 0x63	; 99
    b2c0:	f9 e5       	ldi	r31, 0x59	; 89
    b2c2:	0c 94 de df 	jmp	0x1bfbc	; 0x1bfbc <__prologue_saves__>
    b2c6:	7a ab       	std	Y+50, r23	; 0x32
    b2c8:	69 ab       	std	Y+49, r22	; 0x31
    b2ca:	00 97       	sbiw	r24, 0x00	; 0
    b2cc:	09 f4       	brne	.+2      	; 0xb2d0 <f_open+0x16>
    b2ce:	93 c1       	rjmp	.+806    	; 0xb5f6 <f_open+0x33c>
    b2d0:	74 2e       	mov	r7, r20
    b2d2:	7c 01       	movw	r14, r24
    b2d4:	24 2f       	mov	r18, r20
    b2d6:	2f 73       	andi	r18, 0x3F	; 63
    b2d8:	32 2e       	mov	r3, r18
    b2da:	42 2f       	mov	r20, r18
    b2dc:	be 01       	movw	r22, r28
    b2de:	61 5d       	subi	r22, 0xD1	; 209
    b2e0:	7f 4f       	sbci	r23, 0xFF	; 255
    b2e2:	ce 01       	movw	r24, r28
    b2e4:	c1 96       	adiw	r24, 0x31	; 49
    b2e6:	0e 94 a1 4b 	call	0x9742	; 0x9742 <mount_volume>
    b2ea:	00 97       	sbiw	r24, 0x00	; 0
    b2ec:	09 f0       	breq	.+2      	; 0xb2f0 <f_open+0x36>
    b2ee:	7d c1       	rjmp	.+762    	; 0xb5ea <f_open+0x330>
    b2f0:	8f a5       	ldd	r24, Y+47	; 0x2f
    b2f2:	98 a9       	ldd	r25, Y+48	; 0x30
    b2f4:	9a 83       	std	Y+2, r25	; 0x02
    b2f6:	89 83       	std	Y+1, r24	; 0x01
    b2f8:	80 e0       	ldi	r24, 0x00	; 0
    b2fa:	92 e0       	ldi	r25, 0x02	; 2
    b2fc:	0e 94 b3 68 	call	0xd166	; 0xd166 <ff_memalloc>
    b300:	5c 01       	movw	r10, r24
    b302:	00 97       	sbiw	r24, 0x00	; 0
    b304:	09 f4       	brne	.+2      	; 0xb308 <f_open+0x4e>
    b306:	79 c1       	rjmp	.+754    	; 0xb5fa <f_open+0x340>
    b308:	ef a5       	ldd	r30, Y+47	; 0x2f
    b30a:	f8 a9       	ldd	r31, Y+48	; 0x30
    b30c:	94 87       	std	Z+12, r25	; 0x0c
    b30e:	83 87       	std	Z+11, r24	; 0x0b
    b310:	69 a9       	ldd	r22, Y+49	; 0x31
    b312:	7a a9       	ldd	r23, Y+50	; 0x32
    b314:	ce 01       	movw	r24, r28
    b316:	01 96       	adiw	r24, 0x01	; 1
    b318:	63 dd       	rcall	.-1338   	; 0xade0 <follow_path>
    b31a:	8c 01       	movw	r16, r24
    b31c:	89 2b       	or	r24, r25
    b31e:	29 f4       	brne	.+10     	; 0xb32a <f_open+0x70>
    b320:	88 a5       	ldd	r24, Y+40	; 0x28
    b322:	87 ff       	sbrs	r24, 7
    b324:	02 c0       	rjmp	.+4      	; 0xb32a <f_open+0x70>
    b326:	06 e0       	ldi	r16, 0x06	; 6
    b328:	10 e0       	ldi	r17, 0x00	; 0
    b32a:	87 2d       	mov	r24, r7
    b32c:	8c 71       	andi	r24, 0x1C	; 28
    b32e:	09 f4       	brne	.+2      	; 0xb332 <f_open+0x78>
    b330:	75 c0       	rjmp	.+234    	; 0xb41c <f_open+0x162>
    b332:	01 15       	cp	r16, r1
    b334:	11 05       	cpc	r17, r1
    b336:	79 f0       	breq	.+30     	; 0xb356 <f_open+0x9c>
    b338:	04 30       	cpi	r16, 0x04	; 4
    b33a:	11 05       	cpc	r17, r1
    b33c:	09 f0       	breq	.+2      	; 0xb340 <f_open+0x86>
    b33e:	6d c1       	rjmp	.+730    	; 0xb61a <f_open+0x360>
    b340:	ce 01       	movw	r24, r28
    b342:	01 96       	adiw	r24, 0x01	; 1
    b344:	bf db       	rcall	.-2178   	; 0xaac4 <dir_register>
    b346:	8c 01       	movw	r16, r24
    b348:	89 2b       	or	r24, r25
    b34a:	09 f0       	breq	.+2      	; 0xb34e <f_open+0x94>
    b34c:	66 c1       	rjmp	.+716    	; 0xb61a <f_open+0x360>
    b34e:	33 2d       	mov	r19, r3
    b350:	38 60       	ori	r19, 0x08	; 8
    b352:	33 2e       	mov	r3, r19
    b354:	06 c0       	rjmp	.+12     	; 0xb362 <f_open+0xa8>
    b356:	8d 81       	ldd	r24, Y+5	; 0x05
    b358:	81 71       	andi	r24, 0x11	; 17
    b35a:	09 f0       	breq	.+2      	; 0xb35e <f_open+0xa4>
    b35c:	5c c1       	rjmp	.+696    	; 0xb616 <f_open+0x35c>
    b35e:	72 fc       	sbrc	r7, 2
    b360:	51 c1       	rjmp	.+674    	; 0xb604 <f_open+0x34a>
    b362:	33 fe       	sbrs	r3, 3
    b364:	6b c0       	rjmp	.+214    	; 0xb43c <f_open+0x182>
    b366:	0b 8d       	ldd	r16, Y+27	; 0x1b
    b368:	1c 8d       	ldd	r17, Y+28	; 0x1c
    b36a:	ef a5       	ldd	r30, Y+47	; 0x2f
    b36c:	f8 a9       	ldd	r31, Y+48	; 0x30
    b36e:	b8 01       	movw	r22, r16
    b370:	80 81       	ld	r24, Z
    b372:	0e 94 97 49 	call	0x932e	; 0x932e <ld_clust.isra.4>
    b376:	2b 01       	movw	r4, r22
    b378:	3c 01       	movw	r6, r24
    b37a:	0e 94 b7 6f 	call	0xdf6e	; 0xdf6e <get_fattime>
    b37e:	ab 01       	movw	r20, r22
    b380:	bc 01       	movw	r22, r24
    b382:	c8 01       	movw	r24, r16
    b384:	0e 96       	adiw	r24, 0x0e	; 14
    b386:	0e 94 60 46 	call	0x8cc0	; 0x8cc0 <st_dword>
    b38a:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b38c:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b38e:	80 e2       	ldi	r24, 0x20	; 32
    b390:	83 87       	std	Z+11, r24	; 0x0b
    b392:	af a5       	ldd	r26, Y+47	; 0x2f
    b394:	b8 a9       	ldd	r27, Y+48	; 0x30
    b396:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b398:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b39a:	12 8e       	std	Z+26, r1	; 0x1a
    b39c:	13 8e       	std	Z+27, r1	; 0x1b
    b39e:	8c 91       	ld	r24, X
    b3a0:	83 30       	cpi	r24, 0x03	; 3
    b3a2:	11 f4       	brne	.+4      	; 0xb3a8 <f_open+0xee>
    b3a4:	14 8a       	std	Z+20, r1	; 0x14
    b3a6:	15 8a       	std	Z+21, r1	; 0x15
    b3a8:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b3aa:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b3ac:	14 8e       	std	Z+28, r1	; 0x1c
    b3ae:	15 8e       	std	Z+29, r1	; 0x1d
    b3b0:	16 8e       	std	Z+30, r1	; 0x1e
    b3b2:	17 8e       	std	Z+31, r1	; 0x1f
    b3b4:	81 e0       	ldi	r24, 0x01	; 1
    b3b6:	fd 01       	movw	r30, r26
    b3b8:	83 83       	std	Z+3, r24	; 0x03
    b3ba:	41 14       	cp	r4, r1
    b3bc:	51 04       	cpc	r5, r1
    b3be:	61 04       	cpc	r6, r1
    b3c0:	71 04       	cpc	r7, r1
    b3c2:	c9 f1       	breq	.+114    	; 0xb436 <f_open+0x17c>
    b3c4:	21 a9       	ldd	r18, Z+49	; 0x31
    b3c6:	32 a9       	ldd	r19, Z+50	; 0x32
    b3c8:	43 a9       	ldd	r20, Z+51	; 0x33
    b3ca:	54 a9       	ldd	r21, Z+52	; 0x34
    b3cc:	2b ab       	std	Y+51, r18	; 0x33
    b3ce:	3c ab       	std	Y+52, r19	; 0x34
    b3d0:	4d ab       	std	Y+53, r20	; 0x35
    b3d2:	5e ab       	std	Y+54, r21	; 0x36
    b3d4:	00 e0       	ldi	r16, 0x00	; 0
    b3d6:	10 e0       	ldi	r17, 0x00	; 0
    b3d8:	98 01       	movw	r18, r16
    b3da:	b3 01       	movw	r22, r6
    b3dc:	a2 01       	movw	r20, r4
    b3de:	ce 01       	movw	r24, r28
    b3e0:	01 96       	adiw	r24, 0x01	; 1
    b3e2:	0e 94 91 51 	call	0xa322	; 0xa322 <remove_chain>
    b3e6:	8c 01       	movw	r16, r24
    b3e8:	89 2b       	or	r24, r25
    b3ea:	09 f0       	breq	.+2      	; 0xb3ee <f_open+0x134>
    b3ec:	16 c1       	rjmp	.+556    	; 0xb61a <f_open+0x360>
    b3ee:	4b a9       	ldd	r20, Y+51	; 0x33
    b3f0:	5c a9       	ldd	r21, Y+52	; 0x34
    b3f2:	6d a9       	ldd	r22, Y+53	; 0x35
    b3f4:	7e a9       	ldd	r23, Y+54	; 0x36
    b3f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    b3f8:	98 a9       	ldd	r25, Y+48	; 0x30
    b3fa:	0e 94 26 4b 	call	0x964c	; 0x964c <move_window>
    b3fe:	8c 01       	movw	r16, r24
    b400:	ef a5       	ldd	r30, Y+47	; 0x2f
    b402:	f8 a9       	ldd	r31, Y+48	; 0x30
    b404:	21 e0       	ldi	r18, 0x01	; 1
    b406:	42 1a       	sub	r4, r18
    b408:	51 08       	sbc	r5, r1
    b40a:	61 08       	sbc	r6, r1
    b40c:	71 08       	sbc	r7, r1
    b40e:	45 86       	std	Z+13, r4	; 0x0d
    b410:	56 86       	std	Z+14, r5	; 0x0e
    b412:	67 86       	std	Z+15, r6	; 0x0f
    b414:	70 8a       	std	Z+16, r7	; 0x10
    b416:	89 2b       	or	r24, r25
    b418:	61 f0       	breq	.+24     	; 0xb432 <f_open+0x178>
    b41a:	ff c0       	rjmp	.+510    	; 0xb61a <f_open+0x360>
    b41c:	01 15       	cp	r16, r1
    b41e:	11 05       	cpc	r17, r1
    b420:	09 f0       	breq	.+2      	; 0xb424 <f_open+0x16a>
    b422:	fb c0       	rjmp	.+502    	; 0xb61a <f_open+0x360>
    b424:	8d 81       	ldd	r24, Y+5	; 0x05
    b426:	84 fd       	sbrc	r24, 4
    b428:	f3 c0       	rjmp	.+486    	; 0xb610 <f_open+0x356>
    b42a:	71 fe       	sbrs	r7, 1
    b42c:	02 c0       	rjmp	.+4      	; 0xb432 <f_open+0x178>
    b42e:	80 fd       	sbrc	r24, 0
    b430:	f2 c0       	rjmp	.+484    	; 0xb616 <f_open+0x35c>
    b432:	33 fe       	sbrs	r3, 3
    b434:	03 c0       	rjmp	.+6      	; 0xb43c <f_open+0x182>
    b436:	33 2d       	mov	r19, r3
    b438:	30 64       	ori	r19, 0x40	; 64
    b43a:	33 2e       	mov	r3, r19
    b43c:	0f a5       	ldd	r16, Y+47	; 0x2f
    b43e:	18 a9       	ldd	r17, Y+48	; 0x30
    b440:	f8 01       	movw	r30, r16
    b442:	81 a9       	ldd	r24, Z+49	; 0x31
    b444:	92 a9       	ldd	r25, Z+50	; 0x32
    b446:	a3 a9       	ldd	r26, Z+51	; 0x33
    b448:	b4 a9       	ldd	r27, Z+52	; 0x34
    b44a:	f7 01       	movw	r30, r14
    b44c:	84 8f       	std	Z+28, r24	; 0x1c
    b44e:	95 8f       	std	Z+29, r25	; 0x1d
    b450:	a6 8f       	std	Z+30, r26	; 0x1e
    b452:	b7 8f       	std	Z+31, r27	; 0x1f
    b454:	6b 8c       	ldd	r6, Y+27	; 0x1b
    b456:	7c 8c       	ldd	r7, Y+28	; 0x1c
    b458:	71 a2       	std	Z+33, r7	; 0x21
    b45a:	60 a2       	std	Z+32, r6	; 0x20
    b45c:	b3 01       	movw	r22, r6
    b45e:	f8 01       	movw	r30, r16
    b460:	80 81       	ld	r24, Z
    b462:	0e 94 97 49 	call	0x932e	; 0x932e <ld_clust.isra.4>
    b466:	f7 01       	movw	r30, r14
    b468:	66 83       	std	Z+6, r22	; 0x06
    b46a:	77 83       	std	Z+7, r23	; 0x07
    b46c:	80 87       	std	Z+8, r24	; 0x08
    b46e:	91 87       	std	Z+9, r25	; 0x09
    b470:	c3 01       	movw	r24, r6
    b472:	4c 96       	adiw	r24, 0x1c	; 28
    b474:	0e 94 4b 46 	call	0x8c96	; 0x8c96 <ld_dword>
    b478:	f7 01       	movw	r30, r14
    b47a:	62 87       	std	Z+10, r22	; 0x0a
    b47c:	73 87       	std	Z+11, r23	; 0x0b
    b47e:	84 87       	std	Z+12, r24	; 0x0c
    b480:	95 87       	std	Z+13, r25	; 0x0d
    b482:	13 a2       	std	Z+35, r1	; 0x23
    b484:	12 a2       	std	Z+34, r1	; 0x22
    b486:	11 83       	std	Z+1, r17	; 0x01
    b488:	00 83       	st	Z, r16
    b48a:	f8 01       	movw	r30, r16
    b48c:	85 81       	ldd	r24, Z+5	; 0x05
    b48e:	96 81       	ldd	r25, Z+6	; 0x06
    b490:	f7 01       	movw	r30, r14
    b492:	93 83       	std	Z+3, r25	; 0x03
    b494:	82 83       	std	Z+2, r24	; 0x02
    b496:	36 86       	std	Z+14, r3	; 0x0e
    b498:	17 86       	std	Z+15, r1	; 0x0f
    b49a:	10 8e       	std	Z+24, r1	; 0x18
    b49c:	11 8e       	std	Z+25, r1	; 0x19
    b49e:	12 8e       	std	Z+26, r1	; 0x1a
    b4a0:	13 8e       	std	Z+27, r1	; 0x1b
    b4a2:	10 8a       	std	Z+16, r1	; 0x10
    b4a4:	11 8a       	std	Z+17, r1	; 0x11
    b4a6:	12 8a       	std	Z+18, r1	; 0x12
    b4a8:	13 8a       	std	Z+19, r1	; 0x13
    b4aa:	67 01       	movw	r12, r14
    b4ac:	f4 e2       	ldi	r31, 0x24	; 36
    b4ae:	cf 0e       	add	r12, r31
    b4b0:	d1 1c       	adc	r13, r1
    b4b2:	40 e0       	ldi	r20, 0x00	; 0
    b4b4:	52 e0       	ldi	r21, 0x02	; 2
    b4b6:	60 e0       	ldi	r22, 0x00	; 0
    b4b8:	70 e0       	ldi	r23, 0x00	; 0
    b4ba:	c6 01       	movw	r24, r12
    b4bc:	0e 94 66 46 	call	0x8ccc	; 0x8ccc <mem_set>
    b4c0:	35 fc       	sbrc	r3, 5
    b4c2:	03 c0       	rjmp	.+6      	; 0xb4ca <f_open+0x210>
    b4c4:	00 e0       	ldi	r16, 0x00	; 0
    b4c6:	10 e0       	ldi	r17, 0x00	; 0
    b4c8:	89 c0       	rjmp	.+274    	; 0xb5dc <f_open+0x322>
    b4ca:	f7 01       	movw	r30, r14
    b4cc:	62 84       	ldd	r6, Z+10	; 0x0a
    b4ce:	73 84       	ldd	r7, Z+11	; 0x0b
    b4d0:	84 84       	ldd	r8, Z+12	; 0x0c
    b4d2:	95 84       	ldd	r9, Z+13	; 0x0d
    b4d4:	61 14       	cp	r6, r1
    b4d6:	71 04       	cpc	r7, r1
    b4d8:	81 04       	cpc	r8, r1
    b4da:	91 04       	cpc	r9, r1
    b4dc:	99 f3       	breq	.-26     	; 0xb4c4 <f_open+0x20a>
    b4de:	60 8a       	std	Z+16, r6	; 0x10
    b4e0:	71 8a       	std	Z+17, r7	; 0x11
    b4e2:	82 8a       	std	Z+18, r8	; 0x12
    b4e4:	93 8a       	std	Z+19, r9	; 0x13
    b4e6:	ef a5       	ldd	r30, Y+47	; 0x2f
    b4e8:	f8 a9       	ldd	r31, Y+48	; 0x30
    b4ea:	21 84       	ldd	r2, Z+9	; 0x09
    b4ec:	32 84       	ldd	r3, Z+10	; 0x0a
    b4ee:	c1 01       	movw	r24, r2
    b4f0:	a0 e0       	ldi	r26, 0x00	; 0
    b4f2:	b0 e0       	ldi	r27, 0x00	; 0
    b4f4:	1c 01       	movw	r2, r24
    b4f6:	2d 01       	movw	r4, r26
    b4f8:	59 e0       	ldi	r21, 0x09	; 9
    b4fa:	22 0c       	add	r2, r2
    b4fc:	33 1c       	adc	r3, r3
    b4fe:	44 1c       	adc	r4, r4
    b500:	55 1c       	adc	r5, r5
    b502:	5a 95       	dec	r21
    b504:	d1 f7       	brne	.-12     	; 0xb4fa <f_open+0x240>
    b506:	f7 01       	movw	r30, r14
    b508:	46 81       	ldd	r20, Z+6	; 0x06
    b50a:	57 81       	ldd	r21, Z+7	; 0x07
    b50c:	60 85       	ldd	r22, Z+8	; 0x08
    b50e:	71 85       	ldd	r23, Z+9	; 0x09
    b510:	26 14       	cp	r2, r6
    b512:	37 04       	cpc	r3, r7
    b514:	48 04       	cpc	r4, r8
    b516:	59 04       	cpc	r5, r9
    b518:	f0 f4       	brcc	.+60     	; 0xb556 <f_open+0x29c>
    b51a:	f7 01       	movw	r30, r14
    b51c:	80 81       	ld	r24, Z
    b51e:	91 81       	ldd	r25, Z+1	; 0x01
    b520:	0e 94 f6 4e 	call	0x9dec	; 0x9dec <get_fat.isra.10>
    b524:	ab 01       	movw	r20, r22
    b526:	bc 01       	movw	r22, r24
    b528:	d4 01       	movw	r26, r8
    b52a:	c3 01       	movw	r24, r6
    b52c:	82 19       	sub	r24, r2
    b52e:	93 09       	sbc	r25, r3
    b530:	a4 09       	sbc	r26, r4
    b532:	b5 09       	sbc	r27, r5
    b534:	3c 01       	movw	r6, r24
    b536:	4d 01       	movw	r8, r26
    b538:	42 30       	cpi	r20, 0x02	; 2
    b53a:	51 05       	cpc	r21, r1
    b53c:	61 05       	cpc	r22, r1
    b53e:	71 05       	cpc	r23, r1
    b540:	08 f4       	brcc	.+2      	; 0xb544 <f_open+0x28a>
    b542:	63 c0       	rjmp	.+198    	; 0xb60a <f_open+0x350>
    b544:	4f 3f       	cpi	r20, 0xFF	; 255
    b546:	ff ef       	ldi	r31, 0xFF	; 255
    b548:	5f 07       	cpc	r21, r31
    b54a:	6f 07       	cpc	r22, r31
    b54c:	7f 07       	cpc	r23, r31
    b54e:	01 f7       	brne	.-64     	; 0xb510 <f_open+0x256>
    b550:	01 e0       	ldi	r16, 0x01	; 1
    b552:	10 e0       	ldi	r17, 0x00	; 0
    b554:	02 c0       	rjmp	.+4      	; 0xb55a <f_open+0x2a0>
    b556:	00 e0       	ldi	r16, 0x00	; 0
    b558:	10 e0       	ldi	r17, 0x00	; 0
    b55a:	f7 01       	movw	r30, r14
    b55c:	44 8b       	std	Z+20, r20	; 0x14
    b55e:	55 8b       	std	Z+21, r21	; 0x15
    b560:	66 8b       	std	Z+22, r22	; 0x16
    b562:	77 8b       	std	Z+23, r23	; 0x17
    b564:	01 15       	cp	r16, r1
    b566:	11 05       	cpc	r17, r1
    b568:	c9 f5       	brne	.+114    	; 0xb5dc <f_open+0x322>
    b56a:	d4 01       	movw	r26, r8
    b56c:	c3 01       	movw	r24, r6
    b56e:	91 70       	andi	r25, 0x01	; 1
    b570:	aa 27       	eor	r26, r26
    b572:	bb 27       	eor	r27, r27
    b574:	89 2b       	or	r24, r25
    b576:	8a 2b       	or	r24, r26
    b578:	8b 2b       	or	r24, r27
    b57a:	09 f4       	brne	.+2      	; 0xb57e <f_open+0x2c4>
    b57c:	a3 cf       	rjmp	.-186    	; 0xb4c4 <f_open+0x20a>
    b57e:	4f a4       	ldd	r4, Y+47	; 0x2f
    b580:	58 a8       	ldd	r5, Y+48	; 0x30
    b582:	c2 01       	movw	r24, r4
    b584:	0e 94 04 47 	call	0x8e08	; 0x8e08 <clst2sect>
    b588:	61 15       	cp	r22, r1
    b58a:	71 05       	cpc	r23, r1
    b58c:	81 05       	cpc	r24, r1
    b58e:	91 05       	cpc	r25, r1
    b590:	19 f1       	breq	.+70     	; 0xb5d8 <f_open+0x31e>
    b592:	94 01       	movw	r18, r8
    b594:	83 01       	movw	r16, r6
    b596:	49 e0       	ldi	r20, 0x09	; 9
    b598:	36 95       	lsr	r19
    b59a:	27 95       	ror	r18
    b59c:	17 95       	ror	r17
    b59e:	07 95       	ror	r16
    b5a0:	4a 95       	dec	r20
    b5a2:	d1 f7       	brne	.-12     	; 0xb598 <f_open+0x2de>
    b5a4:	a9 01       	movw	r20, r18
    b5a6:	98 01       	movw	r18, r16
    b5a8:	26 0f       	add	r18, r22
    b5aa:	37 1f       	adc	r19, r23
    b5ac:	48 1f       	adc	r20, r24
    b5ae:	59 1f       	adc	r21, r25
    b5b0:	f7 01       	movw	r30, r14
    b5b2:	20 8f       	std	Z+24, r18	; 0x18
    b5b4:	31 8f       	std	Z+25, r19	; 0x19
    b5b6:	42 8f       	std	Z+26, r20	; 0x1a
    b5b8:	53 8f       	std	Z+27, r21	; 0x1b
    b5ba:	01 e0       	ldi	r16, 0x01	; 1
    b5bc:	10 e0       	ldi	r17, 0x00	; 0
    b5be:	b6 01       	movw	r22, r12
    b5c0:	f2 01       	movw	r30, r4
    b5c2:	81 81       	ldd	r24, Z+1	; 0x01
    b5c4:	0e 94 6f 69 	call	0xd2de	; 0xd2de <disk_read>
    b5c8:	31 e0       	ldi	r19, 0x01	; 1
    b5ca:	20 e0       	ldi	r18, 0x00	; 0
    b5cc:	89 2b       	or	r24, r25
    b5ce:	09 f4       	brne	.+2      	; 0xb5d2 <f_open+0x318>
    b5d0:	30 e0       	ldi	r19, 0x00	; 0
    b5d2:	03 2f       	mov	r16, r19
    b5d4:	12 2f       	mov	r17, r18
    b5d6:	02 c0       	rjmp	.+4      	; 0xb5dc <f_open+0x322>
    b5d8:	02 e0       	ldi	r16, 0x02	; 2
    b5da:	10 e0       	ldi	r17, 0x00	; 0
    b5dc:	c5 01       	movw	r24, r10
    b5de:	0e 94 b6 68 	call	0xd16c	; 0xd16c <ff_memfree>
    b5e2:	01 15       	cp	r16, r1
    b5e4:	11 05       	cpc	r17, r1
    b5e6:	59 f0       	breq	.+22     	; 0xb5fe <f_open+0x344>
    b5e8:	01 c0       	rjmp	.+2      	; 0xb5ec <f_open+0x332>
    b5ea:	8c 01       	movw	r16, r24
    b5ec:	f7 01       	movw	r30, r14
    b5ee:	11 82       	std	Z+1, r1	; 0x01
    b5f0:	10 82       	st	Z, r1
    b5f2:	c8 01       	movw	r24, r16
    b5f4:	16 c0       	rjmp	.+44     	; 0xb622 <f_open+0x368>
    b5f6:	89 e0       	ldi	r24, 0x09	; 9
    b5f8:	03 c0       	rjmp	.+6      	; 0xb600 <f_open+0x346>
    b5fa:	81 e1       	ldi	r24, 0x11	; 17
    b5fc:	01 c0       	rjmp	.+2      	; 0xb600 <f_open+0x346>
    b5fe:	80 e0       	ldi	r24, 0x00	; 0
    b600:	90 e0       	ldi	r25, 0x00	; 0
    b602:	0f c0       	rjmp	.+30     	; 0xb622 <f_open+0x368>
    b604:	08 e0       	ldi	r16, 0x08	; 8
    b606:	10 e0       	ldi	r17, 0x00	; 0
    b608:	08 c0       	rjmp	.+16     	; 0xb61a <f_open+0x360>
    b60a:	02 e0       	ldi	r16, 0x02	; 2
    b60c:	10 e0       	ldi	r17, 0x00	; 0
    b60e:	a5 cf       	rjmp	.-182    	; 0xb55a <f_open+0x2a0>
    b610:	04 e0       	ldi	r16, 0x04	; 4
    b612:	10 e0       	ldi	r17, 0x00	; 0
    b614:	02 c0       	rjmp	.+4      	; 0xb61a <f_open+0x360>
    b616:	07 e0       	ldi	r16, 0x07	; 7
    b618:	10 e0       	ldi	r17, 0x00	; 0
    b61a:	c5 01       	movw	r24, r10
    b61c:	0e 94 b6 68 	call	0xd16c	; 0xd16c <ff_memfree>
    b620:	e5 cf       	rjmp	.-54     	; 0xb5ec <f_open+0x332>
    b622:	e6 96       	adiw	r28, 0x36	; 54
    b624:	e2 e1       	ldi	r30, 0x12	; 18
    b626:	0c 94 fa df 	jmp	0x1bff4	; 0x1bff4 <__epilogue_restores__>

0000b62a <f_read>:
    b62a:	a6 e0       	ldi	r26, 0x06	; 6
    b62c:	b0 e0       	ldi	r27, 0x00	; 0
    b62e:	eb e1       	ldi	r30, 0x1B	; 27
    b630:	fb e5       	ldi	r31, 0x5B	; 91
    b632:	0c 94 de df 	jmp	0x1bfbc	; 0x1bfbc <__prologue_saves__>
    b636:	7c 01       	movw	r14, r24
    b638:	4b 01       	movw	r8, r22
    b63a:	5a 01       	movw	r10, r20
    b63c:	3e 83       	std	Y+6, r19	; 0x06
    b63e:	2d 83       	std	Y+5, r18	; 0x05
    b640:	f9 01       	movw	r30, r18
    b642:	11 82       	std	Z+1, r1	; 0x01
    b644:	10 82       	st	Z, r1
    b646:	be 01       	movw	r22, r28
    b648:	6f 5f       	subi	r22, 0xFF	; 255
    b64a:	7f 4f       	sbci	r23, 0xFF	; 255
    b64c:	0e 94 a3 47 	call	0x8f46	; 0x8f46 <validate>
    b650:	00 97       	sbiw	r24, 0x00	; 0
    b652:	09 f0       	breq	.+2      	; 0xb656 <f_read+0x2c>
    b654:	31 c1       	rjmp	.+610    	; 0xb8b8 <f_read+0x28e>
    b656:	f7 01       	movw	r30, r14
    b658:	87 85       	ldd	r24, Z+15	; 0x0f
    b65a:	90 e0       	ldi	r25, 0x00	; 0
    b65c:	00 97       	sbiw	r24, 0x00	; 0
    b65e:	09 f0       	breq	.+2      	; 0xb662 <f_read+0x38>
    b660:	2b c1       	rjmp	.+598    	; 0xb8b8 <f_read+0x28e>
    b662:	86 85       	ldd	r24, Z+14	; 0x0e
    b664:	80 ff       	sbrs	r24, 0
    b666:	26 c1       	rjmp	.+588    	; 0xb8b4 <f_read+0x28a>
    b668:	82 85       	ldd	r24, Z+10	; 0x0a
    b66a:	93 85       	ldd	r25, Z+11	; 0x0b
    b66c:	a4 85       	ldd	r26, Z+12	; 0x0c
    b66e:	b5 85       	ldd	r27, Z+13	; 0x0d
    b670:	40 89       	ldd	r20, Z+16	; 0x10
    b672:	51 89       	ldd	r21, Z+17	; 0x11
    b674:	62 89       	ldd	r22, Z+18	; 0x12
    b676:	73 89       	ldd	r23, Z+19	; 0x13
    b678:	84 1b       	sub	r24, r20
    b67a:	95 0b       	sbc	r25, r21
    b67c:	a6 0b       	sbc	r26, r22
    b67e:	b7 0b       	sbc	r27, r23
    b680:	a5 01       	movw	r20, r10
    b682:	60 e0       	ldi	r22, 0x00	; 0
    b684:	70 e0       	ldi	r23, 0x00	; 0
    b686:	84 17       	cp	r24, r20
    b688:	95 07       	cpc	r25, r21
    b68a:	a6 07       	cpc	r26, r22
    b68c:	b7 07       	cpc	r27, r23
    b68e:	08 f4       	brcc	.+2      	; 0xb692 <f_read+0x68>
    b690:	5c 01       	movw	r10, r24
    b692:	17 01       	movw	r2, r14
    b694:	f4 e2       	ldi	r31, 0x24	; 36
    b696:	2f 0e       	add	r2, r31
    b698:	31 1c       	adc	r3, r1
    b69a:	a1 14       	cp	r10, r1
    b69c:	b1 04       	cpc	r11, r1
    b69e:	09 f4       	brne	.+2      	; 0xb6a2 <f_read+0x78>
    b6a0:	07 c1       	rjmp	.+526    	; 0xb8b0 <f_read+0x286>
    b6a2:	f7 01       	movw	r30, r14
    b6a4:	40 89       	ldd	r20, Z+16	; 0x10
    b6a6:	51 89       	ldd	r21, Z+17	; 0x11
    b6a8:	62 89       	ldd	r22, Z+18	; 0x12
    b6aa:	73 89       	ldd	r23, Z+19	; 0x13
    b6ac:	db 01       	movw	r26, r22
    b6ae:	ca 01       	movw	r24, r20
    b6b0:	91 70       	andi	r25, 0x01	; 1
    b6b2:	aa 27       	eor	r26, r26
    b6b4:	bb 27       	eor	r27, r27
    b6b6:	89 2b       	or	r24, r25
    b6b8:	8a 2b       	or	r24, r26
    b6ba:	8b 2b       	or	r24, r27
    b6bc:	09 f0       	breq	.+2      	; 0xb6c0 <f_read+0x96>
    b6be:	cb c0       	rjmp	.+406    	; 0xb856 <f_read+0x22c>
    b6c0:	e9 81       	ldd	r30, Y+1	; 0x01
    b6c2:	fa 81       	ldd	r31, Y+2	; 0x02
    b6c4:	01 85       	ldd	r16, Z+9	; 0x09
    b6c6:	12 85       	ldd	r17, Z+10	; 0x0a
    b6c8:	01 50       	subi	r16, 0x01	; 1
    b6ca:	11 09       	sbc	r17, r1
    b6cc:	db 01       	movw	r26, r22
    b6ce:	ca 01       	movw	r24, r20
    b6d0:	e9 e0       	ldi	r30, 0x09	; 9
    b6d2:	b6 95       	lsr	r27
    b6d4:	a7 95       	ror	r26
    b6d6:	97 95       	ror	r25
    b6d8:	87 95       	ror	r24
    b6da:	ea 95       	dec	r30
    b6dc:	d1 f7       	brne	.-12     	; 0xb6d2 <f_read+0xa8>
    b6de:	08 23       	and	r16, r24
    b6e0:	19 23       	and	r17, r25
    b6e2:	01 15       	cp	r16, r1
    b6e4:	11 05       	cpc	r17, r1
    b6e6:	91 f5       	brne	.+100    	; 0xb74c <f_read+0x122>
    b6e8:	f7 01       	movw	r30, r14
    b6ea:	41 15       	cp	r20, r1
    b6ec:	51 05       	cpc	r21, r1
    b6ee:	61 05       	cpc	r22, r1
    b6f0:	71 05       	cpc	r23, r1
    b6f2:	29 f4       	brne	.+10     	; 0xb6fe <f_read+0xd4>
    b6f4:	66 81       	ldd	r22, Z+6	; 0x06
    b6f6:	77 81       	ldd	r23, Z+7	; 0x07
    b6f8:	80 85       	ldd	r24, Z+8	; 0x08
    b6fa:	91 85       	ldd	r25, Z+9	; 0x09
    b6fc:	11 c0       	rjmp	.+34     	; 0xb720 <f_read+0xf6>
    b6fe:	82 a1       	ldd	r24, Z+34	; 0x22
    b700:	93 a1       	ldd	r25, Z+35	; 0x23
    b702:	89 2b       	or	r24, r25
    b704:	21 f0       	breq	.+8      	; 0xb70e <f_read+0xe4>
    b706:	c7 01       	movw	r24, r14
    b708:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <clmt_clust>
    b70c:	09 c0       	rjmp	.+18     	; 0xb720 <f_read+0xf6>
    b70e:	f7 01       	movw	r30, r14
    b710:	44 89       	ldd	r20, Z+20	; 0x14
    b712:	55 89       	ldd	r21, Z+21	; 0x15
    b714:	66 89       	ldd	r22, Z+22	; 0x16
    b716:	77 89       	ldd	r23, Z+23	; 0x17
    b718:	80 81       	ld	r24, Z
    b71a:	91 81       	ldd	r25, Z+1	; 0x01
    b71c:	0e 94 f6 4e 	call	0x9dec	; 0x9dec <get_fat.isra.10>
    b720:	62 30       	cpi	r22, 0x02	; 2
    b722:	71 05       	cpc	r23, r1
    b724:	81 05       	cpc	r24, r1
    b726:	91 05       	cpc	r25, r1
    b728:	10 f4       	brcc	.+4      	; 0xb72e <f_read+0x104>
    b72a:	82 e0       	ldi	r24, 0x02	; 2
    b72c:	07 c0       	rjmp	.+14     	; 0xb73c <f_read+0x112>
    b72e:	6f 3f       	cpi	r22, 0xFF	; 255
    b730:	ff ef       	ldi	r31, 0xFF	; 255
    b732:	7f 07       	cpc	r23, r31
    b734:	8f 07       	cpc	r24, r31
    b736:	9f 07       	cpc	r25, r31
    b738:	21 f4       	brne	.+8      	; 0xb742 <f_read+0x118>
    b73a:	81 e0       	ldi	r24, 0x01	; 1
    b73c:	f7 01       	movw	r30, r14
    b73e:	87 87       	std	Z+15, r24	; 0x0f
    b740:	ba c0       	rjmp	.+372    	; 0xb8b6 <f_read+0x28c>
    b742:	f7 01       	movw	r30, r14
    b744:	64 8b       	std	Z+20, r22	; 0x14
    b746:	75 8b       	std	Z+21, r23	; 0x15
    b748:	86 8b       	std	Z+22, r24	; 0x16
    b74a:	97 8b       	std	Z+23, r25	; 0x17
    b74c:	89 81       	ldd	r24, Y+1	; 0x01
    b74e:	9a 81       	ldd	r25, Y+2	; 0x02
    b750:	9c 83       	std	Y+4, r25	; 0x04
    b752:	8b 83       	std	Y+3, r24	; 0x03
    b754:	f7 01       	movw	r30, r14
    b756:	44 89       	ldd	r20, Z+20	; 0x14
    b758:	55 89       	ldd	r21, Z+21	; 0x15
    b75a:	66 89       	ldd	r22, Z+22	; 0x16
    b75c:	77 89       	ldd	r23, Z+23	; 0x17
    b75e:	0e 94 04 47 	call	0x8e08	; 0x8e08 <clst2sect>
    b762:	61 15       	cp	r22, r1
    b764:	71 05       	cpc	r23, r1
    b766:	81 05       	cpc	r24, r1
    b768:	91 05       	cpc	r25, r1
    b76a:	f9 f2       	breq	.-66     	; 0xb72a <f_read+0x100>
    b76c:	2b 01       	movw	r4, r22
    b76e:	3c 01       	movw	r6, r24
    b770:	40 0e       	add	r4, r16
    b772:	51 1e       	adc	r5, r17
    b774:	61 1c       	adc	r6, r1
    b776:	71 1c       	adc	r7, r1
    b778:	65 01       	movw	r12, r10
    b77a:	cd 2c       	mov	r12, r13
    b77c:	dd 24       	eor	r13, r13
    b77e:	c6 94       	lsr	r12
    b780:	c1 14       	cp	r12, r1
    b782:	d1 04       	cpc	r13, r1
    b784:	d1 f1       	breq	.+116    	; 0xb7fa <f_read+0x1d0>
    b786:	eb 81       	ldd	r30, Y+3	; 0x03
    b788:	fc 81       	ldd	r31, Y+4	; 0x04
    b78a:	81 85       	ldd	r24, Z+9	; 0x09
    b78c:	92 85       	ldd	r25, Z+10	; 0x0a
    b78e:	98 01       	movw	r18, r16
    b790:	2c 0d       	add	r18, r12
    b792:	3d 1d       	adc	r19, r13
    b794:	82 17       	cp	r24, r18
    b796:	93 07       	cpc	r25, r19
    b798:	18 f4       	brcc	.+6      	; 0xb7a0 <f_read+0x176>
    b79a:	6c 01       	movw	r12, r24
    b79c:	c0 1a       	sub	r12, r16
    b79e:	d1 0a       	sbc	r13, r17
    b7a0:	86 01       	movw	r16, r12
    b7a2:	a3 01       	movw	r20, r6
    b7a4:	92 01       	movw	r18, r4
    b7a6:	b4 01       	movw	r22, r8
    b7a8:	eb 81       	ldd	r30, Y+3	; 0x03
    b7aa:	fc 81       	ldd	r31, Y+4	; 0x04
    b7ac:	81 81       	ldd	r24, Z+1	; 0x01
    b7ae:	0e 94 6f 69 	call	0xd2de	; 0xd2de <disk_read>
    b7b2:	89 2b       	or	r24, r25
    b7b4:	11 f6       	brne	.-124    	; 0xb73a <f_read+0x110>
    b7b6:	f7 01       	movw	r30, r14
    b7b8:	86 85       	ldd	r24, Z+14	; 0x0e
    b7ba:	87 ff       	sbrs	r24, 7
    b7bc:	1a c0       	rjmp	.+52     	; 0xb7f2 <f_read+0x1c8>
    b7be:	80 8d       	ldd	r24, Z+24	; 0x18
    b7c0:	91 8d       	ldd	r25, Z+25	; 0x19
    b7c2:	a2 8d       	ldd	r26, Z+26	; 0x1a
    b7c4:	b3 8d       	ldd	r27, Z+27	; 0x1b
    b7c6:	84 19       	sub	r24, r4
    b7c8:	95 09       	sbc	r25, r5
    b7ca:	a6 09       	sbc	r26, r6
    b7cc:	b7 09       	sbc	r27, r7
    b7ce:	a6 01       	movw	r20, r12
    b7d0:	60 e0       	ldi	r22, 0x00	; 0
    b7d2:	70 e0       	ldi	r23, 0x00	; 0
    b7d4:	84 17       	cp	r24, r20
    b7d6:	95 07       	cpc	r25, r21
    b7d8:	a6 07       	cpc	r26, r22
    b7da:	b7 07       	cpc	r27, r23
    b7dc:	50 f4       	brcc	.+20     	; 0xb7f2 <f_read+0x1c8>
    b7de:	98 2f       	mov	r25, r24
    b7e0:	88 27       	eor	r24, r24
    b7e2:	99 0f       	add	r25, r25
    b7e4:	40 e0       	ldi	r20, 0x00	; 0
    b7e6:	52 e0       	ldi	r21, 0x02	; 2
    b7e8:	b1 01       	movw	r22, r2
    b7ea:	88 0d       	add	r24, r8
    b7ec:	99 1d       	adc	r25, r9
    b7ee:	0e 94 cf 47 	call	0x8f9e	; 0x8f9e <mem_cpy.part.0>
    b7f2:	dc 2c       	mov	r13, r12
    b7f4:	cc 24       	eor	r12, r12
    b7f6:	dd 0c       	add	r13, r13
    b7f8:	41 c0       	rjmp	.+130    	; 0xb87c <f_read+0x252>
    b7fa:	f7 01       	movw	r30, r14
    b7fc:	20 8d       	ldd	r18, Z+24	; 0x18
    b7fe:	31 8d       	ldd	r19, Z+25	; 0x19
    b800:	42 8d       	ldd	r20, Z+26	; 0x1a
    b802:	53 8d       	ldd	r21, Z+27	; 0x1b
    b804:	42 16       	cp	r4, r18
    b806:	53 06       	cpc	r5, r19
    b808:	64 06       	cpc	r6, r20
    b80a:	75 06       	cpc	r7, r21
    b80c:	f9 f0       	breq	.+62     	; 0xb84c <f_read+0x222>
    b80e:	86 85       	ldd	r24, Z+14	; 0x0e
    b810:	87 ff       	sbrs	r24, 7
    b812:	0f c0       	rjmp	.+30     	; 0xb832 <f_read+0x208>
    b814:	01 e0       	ldi	r16, 0x01	; 1
    b816:	10 e0       	ldi	r17, 0x00	; 0
    b818:	b1 01       	movw	r22, r2
    b81a:	eb 81       	ldd	r30, Y+3	; 0x03
    b81c:	fc 81       	ldd	r31, Y+4	; 0x04
    b81e:	81 81       	ldd	r24, Z+1	; 0x01
    b820:	0e 94 7f 69 	call	0xd2fe	; 0xd2fe <disk_write>
    b824:	89 2b       	or	r24, r25
    b826:	09 f0       	breq	.+2      	; 0xb82a <f_read+0x200>
    b828:	88 cf       	rjmp	.-240    	; 0xb73a <f_read+0x110>
    b82a:	f7 01       	movw	r30, r14
    b82c:	86 85       	ldd	r24, Z+14	; 0x0e
    b82e:	8f 77       	andi	r24, 0x7F	; 127
    b830:	86 87       	std	Z+14, r24	; 0x0e
    b832:	e9 81       	ldd	r30, Y+1	; 0x01
    b834:	fa 81       	ldd	r31, Y+2	; 0x02
    b836:	01 e0       	ldi	r16, 0x01	; 1
    b838:	10 e0       	ldi	r17, 0x00	; 0
    b83a:	a3 01       	movw	r20, r6
    b83c:	92 01       	movw	r18, r4
    b83e:	b1 01       	movw	r22, r2
    b840:	81 81       	ldd	r24, Z+1	; 0x01
    b842:	0e 94 6f 69 	call	0xd2de	; 0xd2de <disk_read>
    b846:	89 2b       	or	r24, r25
    b848:	09 f0       	breq	.+2      	; 0xb84c <f_read+0x222>
    b84a:	77 cf       	rjmp	.-274    	; 0xb73a <f_read+0x110>
    b84c:	f7 01       	movw	r30, r14
    b84e:	40 8e       	std	Z+24, r4	; 0x18
    b850:	51 8e       	std	Z+25, r5	; 0x19
    b852:	62 8e       	std	Z+26, r6	; 0x1a
    b854:	73 8e       	std	Z+27, r7	; 0x1b
    b856:	f7 01       	movw	r30, r14
    b858:	60 89       	ldd	r22, Z+16	; 0x10
    b85a:	71 89       	ldd	r23, Z+17	; 0x11
    b85c:	71 70       	andi	r23, 0x01	; 1
    b85e:	80 e0       	ldi	r24, 0x00	; 0
    b860:	92 e0       	ldi	r25, 0x02	; 2
    b862:	86 1b       	sub	r24, r22
    b864:	97 0b       	sbc	r25, r23
    b866:	65 01       	movw	r12, r10
    b868:	8a 15       	cp	r24, r10
    b86a:	9b 05       	cpc	r25, r11
    b86c:	08 f4       	brcc	.+2      	; 0xb870 <f_read+0x246>
    b86e:	6c 01       	movw	r12, r24
    b870:	62 0d       	add	r22, r2
    b872:	73 1d       	adc	r23, r3
    b874:	a6 01       	movw	r20, r12
    b876:	c4 01       	movw	r24, r8
    b878:	0e 94 cf 47 	call	0x8f9e	; 0x8f9e <mem_cpy.part.0>
    b87c:	ac 18       	sub	r10, r12
    b87e:	bd 08       	sbc	r11, r13
    b880:	ed 81       	ldd	r30, Y+5	; 0x05
    b882:	fe 81       	ldd	r31, Y+6	; 0x06
    b884:	80 81       	ld	r24, Z
    b886:	91 81       	ldd	r25, Z+1	; 0x01
    b888:	8c 0d       	add	r24, r12
    b88a:	9d 1d       	adc	r25, r13
    b88c:	91 83       	std	Z+1, r25	; 0x01
    b88e:	80 83       	st	Z, r24
    b890:	8c 0c       	add	r8, r12
    b892:	9d 1c       	adc	r9, r13
    b894:	f7 01       	movw	r30, r14
    b896:	80 89       	ldd	r24, Z+16	; 0x10
    b898:	91 89       	ldd	r25, Z+17	; 0x11
    b89a:	a2 89       	ldd	r26, Z+18	; 0x12
    b89c:	b3 89       	ldd	r27, Z+19	; 0x13
    b89e:	8c 0d       	add	r24, r12
    b8a0:	9d 1d       	adc	r25, r13
    b8a2:	a1 1d       	adc	r26, r1
    b8a4:	b1 1d       	adc	r27, r1
    b8a6:	80 8b       	std	Z+16, r24	; 0x10
    b8a8:	91 8b       	std	Z+17, r25	; 0x11
    b8aa:	a2 8b       	std	Z+18, r26	; 0x12
    b8ac:	b3 8b       	std	Z+19, r27	; 0x13
    b8ae:	f5 ce       	rjmp	.-534    	; 0xb69a <f_read+0x70>
    b8b0:	80 e0       	ldi	r24, 0x00	; 0
    b8b2:	01 c0       	rjmp	.+2      	; 0xb8b6 <f_read+0x28c>
    b8b4:	87 e0       	ldi	r24, 0x07	; 7
    b8b6:	90 e0       	ldi	r25, 0x00	; 0
    b8b8:	26 96       	adiw	r28, 0x06	; 6
    b8ba:	e2 e1       	ldi	r30, 0x12	; 18
    b8bc:	0c 94 fa df 	jmp	0x1bff4	; 0x1bff4 <__epilogue_restores__>

0000b8c0 <f_write>:
    b8c0:	a8 e0       	ldi	r26, 0x08	; 8
    b8c2:	b0 e0       	ldi	r27, 0x00	; 0
    b8c4:	e6 e6       	ldi	r30, 0x66	; 102
    b8c6:	fc e5       	ldi	r31, 0x5C	; 92
    b8c8:	0c 94 de df 	jmp	0x1bfbc	; 0x1bfbc <__prologue_saves__>
    b8cc:	7c 01       	movw	r14, r24
    b8ce:	3b 01       	movw	r6, r22
    b8d0:	5a 01       	movw	r10, r20
    b8d2:	38 87       	std	Y+8, r19	; 0x08
    b8d4:	2f 83       	std	Y+7, r18	; 0x07
    b8d6:	f9 01       	movw	r30, r18
    b8d8:	11 82       	std	Z+1, r1	; 0x01
    b8da:	10 82       	st	Z, r1
    b8dc:	be 01       	movw	r22, r28
    b8de:	6f 5f       	subi	r22, 0xFF	; 255
    b8e0:	7f 4f       	sbci	r23, 0xFF	; 255
    b8e2:	0e 94 a3 47 	call	0x8f46	; 0x8f46 <validate>
    b8e6:	00 97       	sbiw	r24, 0x00	; 0
    b8e8:	09 f0       	breq	.+2      	; 0xb8ec <f_write+0x2c>
    b8ea:	7d c1       	rjmp	.+762    	; 0xbbe6 <f_write+0x326>
    b8ec:	f7 01       	movw	r30, r14
    b8ee:	87 85       	ldd	r24, Z+15	; 0x0f
    b8f0:	90 e0       	ldi	r25, 0x00	; 0
    b8f2:	00 97       	sbiw	r24, 0x00	; 0
    b8f4:	09 f0       	breq	.+2      	; 0xb8f8 <f_write+0x38>
    b8f6:	77 c1       	rjmp	.+750    	; 0xbbe6 <f_write+0x326>
    b8f8:	86 85       	ldd	r24, Z+14	; 0x0e
    b8fa:	81 ff       	sbrs	r24, 1
    b8fc:	72 c1       	rjmp	.+740    	; 0xbbe2 <f_write+0x322>
    b8fe:	80 89       	ldd	r24, Z+16	; 0x10
    b900:	91 89       	ldd	r25, Z+17	; 0x11
    b902:	a2 89       	ldd	r26, Z+18	; 0x12
    b904:	b3 89       	ldd	r27, Z+19	; 0x13
    b906:	ac 01       	movw	r20, r24
    b908:	bd 01       	movw	r22, r26
    b90a:	4a 0d       	add	r20, r10
    b90c:	5b 1d       	adc	r21, r11
    b90e:	61 1d       	adc	r22, r1
    b910:	71 1d       	adc	r23, r1
    b912:	48 17       	cp	r20, r24
    b914:	59 07       	cpc	r21, r25
    b916:	6a 07       	cpc	r22, r26
    b918:	7b 07       	cpc	r23, r27
    b91a:	18 f4       	brcc	.+6      	; 0xb922 <f_write+0x62>
    b91c:	5c 01       	movw	r10, r24
    b91e:	a0 94       	com	r10
    b920:	b0 94       	com	r11
    b922:	97 01       	movw	r18, r14
    b924:	2c 5d       	subi	r18, 0xDC	; 220
    b926:	3f 4f       	sbci	r19, 0xFF	; 255
    b928:	3e 83       	std	Y+6, r19	; 0x06
    b92a:	2d 83       	std	Y+5, r18	; 0x05
    b92c:	a1 14       	cp	r10, r1
    b92e:	b1 04       	cpc	r11, r1
    b930:	09 f4       	brne	.+2      	; 0xb934 <f_write+0x74>
    b932:	4d c0       	rjmp	.+154    	; 0xb9ce <f_write+0x10e>
    b934:	f7 01       	movw	r30, r14
    b936:	40 89       	ldd	r20, Z+16	; 0x10
    b938:	51 89       	ldd	r21, Z+17	; 0x11
    b93a:	62 89       	ldd	r22, Z+18	; 0x12
    b93c:	73 89       	ldd	r23, Z+19	; 0x13
    b93e:	db 01       	movw	r26, r22
    b940:	ca 01       	movw	r24, r20
    b942:	91 70       	andi	r25, 0x01	; 1
    b944:	aa 27       	eor	r26, r26
    b946:	bb 27       	eor	r27, r27
    b948:	89 2b       	or	r24, r25
    b94a:	8a 2b       	or	r24, r26
    b94c:	8b 2b       	or	r24, r27
    b94e:	09 f0       	breq	.+2      	; 0xb952 <f_write+0x92>
    b950:	05 c1       	rjmp	.+522    	; 0xbb5c <f_write+0x29c>
    b952:	e9 81       	ldd	r30, Y+1	; 0x01
    b954:	fa 81       	ldd	r31, Y+2	; 0x02
    b956:	81 84       	ldd	r8, Z+9	; 0x09
    b958:	92 84       	ldd	r9, Z+10	; 0x0a
    b95a:	f1 e0       	ldi	r31, 0x01	; 1
    b95c:	8f 1a       	sub	r8, r31
    b95e:	91 08       	sbc	r9, r1
    b960:	db 01       	movw	r26, r22
    b962:	ca 01       	movw	r24, r20
    b964:	e9 e0       	ldi	r30, 0x09	; 9
    b966:	b6 95       	lsr	r27
    b968:	a7 95       	ror	r26
    b96a:	97 95       	ror	r25
    b96c:	87 95       	ror	r24
    b96e:	ea 95       	dec	r30
    b970:	d1 f7       	brne	.-12     	; 0xb966 <f_write+0xa6>
    b972:	88 22       	and	r8, r24
    b974:	99 22       	and	r9, r25
    b976:	81 14       	cp	r8, r1
    b978:	91 04       	cpc	r9, r1
    b97a:	09 f0       	breq	.+2      	; 0xb97e <f_write+0xbe>
    b97c:	51 c0       	rjmp	.+162    	; 0xba20 <f_write+0x160>
    b97e:	f7 01       	movw	r30, r14
    b980:	41 15       	cp	r20, r1
    b982:	51 05       	cpc	r21, r1
    b984:	61 05       	cpc	r22, r1
    b986:	71 05       	cpc	r23, r1
    b988:	69 f4       	brne	.+26     	; 0xb9a4 <f_write+0xe4>
    b98a:	66 81       	ldd	r22, Z+6	; 0x06
    b98c:	77 81       	ldd	r23, Z+7	; 0x07
    b98e:	80 85       	ldd	r24, Z+8	; 0x08
    b990:	91 85       	ldd	r25, Z+9	; 0x09
    b992:	61 15       	cp	r22, r1
    b994:	71 05       	cpc	r23, r1
    b996:	81 05       	cpc	r24, r1
    b998:	91 05       	cpc	r25, r1
    b99a:	f9 f4       	brne	.+62     	; 0xb9da <f_write+0x11a>
    b99c:	40 e0       	ldi	r20, 0x00	; 0
    b99e:	50 e0       	ldi	r21, 0x00	; 0
    b9a0:	ba 01       	movw	r22, r20
    b9a2:	0d c0       	rjmp	.+26     	; 0xb9be <f_write+0xfe>
    b9a4:	82 a1       	ldd	r24, Z+34	; 0x22
    b9a6:	93 a1       	ldd	r25, Z+35	; 0x23
    b9a8:	89 2b       	or	r24, r25
    b9aa:	21 f0       	breq	.+8      	; 0xb9b4 <f_write+0xf4>
    b9ac:	c7 01       	movw	r24, r14
    b9ae:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <clmt_clust>
    b9b2:	08 c0       	rjmp	.+16     	; 0xb9c4 <f_write+0x104>
    b9b4:	f7 01       	movw	r30, r14
    b9b6:	44 89       	ldd	r20, Z+20	; 0x14
    b9b8:	55 89       	ldd	r21, Z+21	; 0x15
    b9ba:	66 89       	ldd	r22, Z+22	; 0x16
    b9bc:	77 89       	ldd	r23, Z+23	; 0x17
    b9be:	c7 01       	movw	r24, r14
    b9c0:	0e 94 6b 50 	call	0xa0d6	; 0xa0d6 <create_chain>
    b9c4:	61 15       	cp	r22, r1
    b9c6:	71 05       	cpc	r23, r1
    b9c8:	81 05       	cpc	r24, r1
    b9ca:	91 05       	cpc	r25, r1
    b9cc:	31 f4       	brne	.+12     	; 0xb9da <f_write+0x11a>
    b9ce:	f7 01       	movw	r30, r14
    b9d0:	86 85       	ldd	r24, Z+14	; 0x0e
    b9d2:	80 64       	ori	r24, 0x40	; 64
    b9d4:	86 87       	std	Z+14, r24	; 0x0e
    b9d6:	80 e0       	ldi	r24, 0x00	; 0
    b9d8:	05 c1       	rjmp	.+522    	; 0xbbe4 <f_write+0x324>
    b9da:	61 30       	cpi	r22, 0x01	; 1
    b9dc:	71 05       	cpc	r23, r1
    b9de:	81 05       	cpc	r24, r1
    b9e0:	91 05       	cpc	r25, r1
    b9e2:	11 f4       	brne	.+4      	; 0xb9e8 <f_write+0x128>
    b9e4:	82 e0       	ldi	r24, 0x02	; 2
    b9e6:	07 c0       	rjmp	.+14     	; 0xb9f6 <f_write+0x136>
    b9e8:	6f 3f       	cpi	r22, 0xFF	; 255
    b9ea:	ff ef       	ldi	r31, 0xFF	; 255
    b9ec:	7f 07       	cpc	r23, r31
    b9ee:	8f 07       	cpc	r24, r31
    b9f0:	9f 07       	cpc	r25, r31
    b9f2:	21 f4       	brne	.+8      	; 0xb9fc <f_write+0x13c>
    b9f4:	81 e0       	ldi	r24, 0x01	; 1
    b9f6:	f7 01       	movw	r30, r14
    b9f8:	87 87       	std	Z+15, r24	; 0x0f
    b9fa:	f4 c0       	rjmp	.+488    	; 0xbbe4 <f_write+0x324>
    b9fc:	f7 01       	movw	r30, r14
    b9fe:	64 8b       	std	Z+20, r22	; 0x14
    ba00:	75 8b       	std	Z+21, r23	; 0x15
    ba02:	86 8b       	std	Z+22, r24	; 0x16
    ba04:	97 8b       	std	Z+23, r25	; 0x17
    ba06:	06 81       	ldd	r16, Z+6	; 0x06
    ba08:	17 81       	ldd	r17, Z+7	; 0x07
    ba0a:	20 85       	ldd	r18, Z+8	; 0x08
    ba0c:	31 85       	ldd	r19, Z+9	; 0x09
    ba0e:	01 15       	cp	r16, r1
    ba10:	11 05       	cpc	r17, r1
    ba12:	21 05       	cpc	r18, r1
    ba14:	31 05       	cpc	r19, r1
    ba16:	21 f4       	brne	.+8      	; 0xba20 <f_write+0x160>
    ba18:	66 83       	std	Z+6, r22	; 0x06
    ba1a:	77 83       	std	Z+7, r23	; 0x07
    ba1c:	80 87       	std	Z+8, r24	; 0x08
    ba1e:	91 87       	std	Z+9, r25	; 0x09
    ba20:	f7 01       	movw	r30, r14
    ba22:	86 85       	ldd	r24, Z+14	; 0x0e
    ba24:	87 ff       	sbrs	r24, 7
    ba26:	13 c0       	rjmp	.+38     	; 0xba4e <f_write+0x18e>
    ba28:	20 8d       	ldd	r18, Z+24	; 0x18
    ba2a:	31 8d       	ldd	r19, Z+25	; 0x19
    ba2c:	42 8d       	ldd	r20, Z+26	; 0x1a
    ba2e:	53 8d       	ldd	r21, Z+27	; 0x1b
    ba30:	e9 81       	ldd	r30, Y+1	; 0x01
    ba32:	fa 81       	ldd	r31, Y+2	; 0x02
    ba34:	01 e0       	ldi	r16, 0x01	; 1
    ba36:	10 e0       	ldi	r17, 0x00	; 0
    ba38:	6d 81       	ldd	r22, Y+5	; 0x05
    ba3a:	7e 81       	ldd	r23, Y+6	; 0x06
    ba3c:	81 81       	ldd	r24, Z+1	; 0x01
    ba3e:	0e 94 7f 69 	call	0xd2fe	; 0xd2fe <disk_write>
    ba42:	89 2b       	or	r24, r25
    ba44:	b9 f6       	brne	.-82     	; 0xb9f4 <f_write+0x134>
    ba46:	f7 01       	movw	r30, r14
    ba48:	86 85       	ldd	r24, Z+14	; 0x0e
    ba4a:	8f 77       	andi	r24, 0x7F	; 127
    ba4c:	86 87       	std	Z+14, r24	; 0x0e
    ba4e:	29 81       	ldd	r18, Y+1	; 0x01
    ba50:	3a 81       	ldd	r19, Y+2	; 0x02
    ba52:	3c 83       	std	Y+4, r19	; 0x04
    ba54:	2b 83       	std	Y+3, r18	; 0x03
    ba56:	f7 01       	movw	r30, r14
    ba58:	44 89       	ldd	r20, Z+20	; 0x14
    ba5a:	55 89       	ldd	r21, Z+21	; 0x15
    ba5c:	66 89       	ldd	r22, Z+22	; 0x16
    ba5e:	77 89       	ldd	r23, Z+23	; 0x17
    ba60:	c9 01       	movw	r24, r18
    ba62:	0e 94 04 47 	call	0x8e08	; 0x8e08 <clst2sect>
    ba66:	61 15       	cp	r22, r1
    ba68:	71 05       	cpc	r23, r1
    ba6a:	81 05       	cpc	r24, r1
    ba6c:	91 05       	cpc	r25, r1
    ba6e:	09 f4       	brne	.+2      	; 0xba72 <f_write+0x1b2>
    ba70:	b9 cf       	rjmp	.-142    	; 0xb9e4 <f_write+0x124>
    ba72:	1b 01       	movw	r2, r22
    ba74:	2c 01       	movw	r4, r24
    ba76:	28 0c       	add	r2, r8
    ba78:	39 1c       	adc	r3, r9
    ba7a:	41 1c       	adc	r4, r1
    ba7c:	51 1c       	adc	r5, r1
    ba7e:	65 01       	movw	r12, r10
    ba80:	cd 2c       	mov	r12, r13
    ba82:	dd 24       	eor	r13, r13
    ba84:	c6 94       	lsr	r12
    ba86:	c1 14       	cp	r12, r1
    ba88:	d1 04       	cpc	r13, r1
    ba8a:	f1 f1       	breq	.+124    	; 0xbb08 <f_write+0x248>
    ba8c:	eb 81       	ldd	r30, Y+3	; 0x03
    ba8e:	fc 81       	ldd	r31, Y+4	; 0x04
    ba90:	81 85       	ldd	r24, Z+9	; 0x09
    ba92:	92 85       	ldd	r25, Z+10	; 0x0a
    ba94:	94 01       	movw	r18, r8
    ba96:	2c 0d       	add	r18, r12
    ba98:	3d 1d       	adc	r19, r13
    ba9a:	82 17       	cp	r24, r18
    ba9c:	93 07       	cpc	r25, r19
    ba9e:	18 f4       	brcc	.+6      	; 0xbaa6 <f_write+0x1e6>
    baa0:	6c 01       	movw	r12, r24
    baa2:	c8 18       	sub	r12, r8
    baa4:	d9 08       	sbc	r13, r9
    baa6:	86 01       	movw	r16, r12
    baa8:	a2 01       	movw	r20, r4
    baaa:	91 01       	movw	r18, r2
    baac:	b3 01       	movw	r22, r6
    baae:	eb 81       	ldd	r30, Y+3	; 0x03
    bab0:	fc 81       	ldd	r31, Y+4	; 0x04
    bab2:	81 81       	ldd	r24, Z+1	; 0x01
    bab4:	0e 94 7f 69 	call	0xd2fe	; 0xd2fe <disk_write>
    bab8:	89 2b       	or	r24, r25
    baba:	09 f0       	breq	.+2      	; 0xbabe <f_write+0x1fe>
    babc:	9b cf       	rjmp	.-202    	; 0xb9f4 <f_write+0x134>
    babe:	f7 01       	movw	r30, r14
    bac0:	80 8d       	ldd	r24, Z+24	; 0x18
    bac2:	91 8d       	ldd	r25, Z+25	; 0x19
    bac4:	a2 8d       	ldd	r26, Z+26	; 0x1a
    bac6:	b3 8d       	ldd	r27, Z+27	; 0x1b
    bac8:	82 19       	sub	r24, r2
    baca:	93 09       	sbc	r25, r3
    bacc:	a4 09       	sbc	r26, r4
    bace:	b5 09       	sbc	r27, r5
    bad0:	a6 01       	movw	r20, r12
    bad2:	60 e0       	ldi	r22, 0x00	; 0
    bad4:	70 e0       	ldi	r23, 0x00	; 0
    bad6:	84 17       	cp	r24, r20
    bad8:	95 07       	cpc	r25, r21
    bada:	a6 07       	cpc	r26, r22
    badc:	b7 07       	cpc	r27, r23
    bade:	80 f4       	brcc	.+32     	; 0xbb00 <f_write+0x240>
    bae0:	98 2f       	mov	r25, r24
    bae2:	88 27       	eor	r24, r24
    bae4:	99 0f       	add	r25, r25
    bae6:	b3 01       	movw	r22, r6
    bae8:	68 0f       	add	r22, r24
    baea:	79 1f       	adc	r23, r25
    baec:	40 e0       	ldi	r20, 0x00	; 0
    baee:	52 e0       	ldi	r21, 0x02	; 2
    baf0:	8d 81       	ldd	r24, Y+5	; 0x05
    baf2:	9e 81       	ldd	r25, Y+6	; 0x06
    baf4:	0e 94 cf 47 	call	0x8f9e	; 0x8f9e <mem_cpy.part.0>
    baf8:	f7 01       	movw	r30, r14
    bafa:	86 85       	ldd	r24, Z+14	; 0x0e
    bafc:	8f 77       	andi	r24, 0x7F	; 127
    bafe:	86 87       	std	Z+14, r24	; 0x0e
    bb00:	dc 2c       	mov	r13, r12
    bb02:	cc 24       	eor	r12, r12
    bb04:	dd 0c       	add	r13, r13
    bb06:	43 c0       	rjmp	.+134    	; 0xbb8e <f_write+0x2ce>
    bb08:	f7 01       	movw	r30, r14
    bb0a:	80 8d       	ldd	r24, Z+24	; 0x18
    bb0c:	91 8d       	ldd	r25, Z+25	; 0x19
    bb0e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    bb10:	b3 8d       	ldd	r27, Z+27	; 0x1b
    bb12:	28 16       	cp	r2, r24
    bb14:	39 06       	cpc	r3, r25
    bb16:	4a 06       	cpc	r4, r26
    bb18:	5b 06       	cpc	r5, r27
    bb1a:	d9 f0       	breq	.+54     	; 0xbb52 <f_write+0x292>
    bb1c:	40 89       	ldd	r20, Z+16	; 0x10
    bb1e:	51 89       	ldd	r21, Z+17	; 0x11
    bb20:	62 89       	ldd	r22, Z+18	; 0x12
    bb22:	73 89       	ldd	r23, Z+19	; 0x13
    bb24:	82 85       	ldd	r24, Z+10	; 0x0a
    bb26:	93 85       	ldd	r25, Z+11	; 0x0b
    bb28:	a4 85       	ldd	r26, Z+12	; 0x0c
    bb2a:	b5 85       	ldd	r27, Z+13	; 0x0d
    bb2c:	48 17       	cp	r20, r24
    bb2e:	59 07       	cpc	r21, r25
    bb30:	6a 07       	cpc	r22, r26
    bb32:	7b 07       	cpc	r23, r27
    bb34:	70 f4       	brcc	.+28     	; 0xbb52 <f_write+0x292>
    bb36:	01 e0       	ldi	r16, 0x01	; 1
    bb38:	10 e0       	ldi	r17, 0x00	; 0
    bb3a:	a2 01       	movw	r20, r4
    bb3c:	91 01       	movw	r18, r2
    bb3e:	6d 81       	ldd	r22, Y+5	; 0x05
    bb40:	7e 81       	ldd	r23, Y+6	; 0x06
    bb42:	eb 81       	ldd	r30, Y+3	; 0x03
    bb44:	fc 81       	ldd	r31, Y+4	; 0x04
    bb46:	81 81       	ldd	r24, Z+1	; 0x01
    bb48:	0e 94 6f 69 	call	0xd2de	; 0xd2de <disk_read>
    bb4c:	89 2b       	or	r24, r25
    bb4e:	09 f0       	breq	.+2      	; 0xbb52 <f_write+0x292>
    bb50:	51 cf       	rjmp	.-350    	; 0xb9f4 <f_write+0x134>
    bb52:	f7 01       	movw	r30, r14
    bb54:	20 8e       	std	Z+24, r2	; 0x18
    bb56:	31 8e       	std	Z+25, r3	; 0x19
    bb58:	42 8e       	std	Z+26, r4	; 0x1a
    bb5a:	53 8e       	std	Z+27, r5	; 0x1b
    bb5c:	f7 01       	movw	r30, r14
    bb5e:	80 89       	ldd	r24, Z+16	; 0x10
    bb60:	91 89       	ldd	r25, Z+17	; 0x11
    bb62:	91 70       	andi	r25, 0x01	; 1
    bb64:	20 e0       	ldi	r18, 0x00	; 0
    bb66:	32 e0       	ldi	r19, 0x02	; 2
    bb68:	28 1b       	sub	r18, r24
    bb6a:	39 0b       	sbc	r19, r25
    bb6c:	65 01       	movw	r12, r10
    bb6e:	2a 15       	cp	r18, r10
    bb70:	3b 05       	cpc	r19, r11
    bb72:	08 f4       	brcc	.+2      	; 0xbb76 <f_write+0x2b6>
    bb74:	69 01       	movw	r12, r18
    bb76:	a6 01       	movw	r20, r12
    bb78:	b3 01       	movw	r22, r6
    bb7a:	2d 81       	ldd	r18, Y+5	; 0x05
    bb7c:	3e 81       	ldd	r19, Y+6	; 0x06
    bb7e:	82 0f       	add	r24, r18
    bb80:	93 1f       	adc	r25, r19
    bb82:	0e 94 cf 47 	call	0x8f9e	; 0x8f9e <mem_cpy.part.0>
    bb86:	f7 01       	movw	r30, r14
    bb88:	86 85       	ldd	r24, Z+14	; 0x0e
    bb8a:	80 68       	ori	r24, 0x80	; 128
    bb8c:	86 87       	std	Z+14, r24	; 0x0e
    bb8e:	ac 18       	sub	r10, r12
    bb90:	bd 08       	sbc	r11, r13
    bb92:	ef 81       	ldd	r30, Y+7	; 0x07
    bb94:	f8 85       	ldd	r31, Y+8	; 0x08
    bb96:	80 81       	ld	r24, Z
    bb98:	91 81       	ldd	r25, Z+1	; 0x01
    bb9a:	8c 0d       	add	r24, r12
    bb9c:	9d 1d       	adc	r25, r13
    bb9e:	91 83       	std	Z+1, r25	; 0x01
    bba0:	80 83       	st	Z, r24
    bba2:	6c 0c       	add	r6, r12
    bba4:	7d 1c       	adc	r7, r13
    bba6:	f7 01       	movw	r30, r14
    bba8:	80 89       	ldd	r24, Z+16	; 0x10
    bbaa:	91 89       	ldd	r25, Z+17	; 0x11
    bbac:	a2 89       	ldd	r26, Z+18	; 0x12
    bbae:	b3 89       	ldd	r27, Z+19	; 0x13
    bbb0:	8c 0d       	add	r24, r12
    bbb2:	9d 1d       	adc	r25, r13
    bbb4:	a1 1d       	adc	r26, r1
    bbb6:	b1 1d       	adc	r27, r1
    bbb8:	80 8b       	std	Z+16, r24	; 0x10
    bbba:	91 8b       	std	Z+17, r25	; 0x11
    bbbc:	a2 8b       	std	Z+18, r26	; 0x12
    bbbe:	b3 8b       	std	Z+19, r27	; 0x13
    bbc0:	42 85       	ldd	r20, Z+10	; 0x0a
    bbc2:	53 85       	ldd	r21, Z+11	; 0x0b
    bbc4:	64 85       	ldd	r22, Z+12	; 0x0c
    bbc6:	75 85       	ldd	r23, Z+13	; 0x0d
    bbc8:	48 17       	cp	r20, r24
    bbca:	59 07       	cpc	r21, r25
    bbcc:	6a 07       	cpc	r22, r26
    bbce:	7b 07       	cpc	r23, r27
    bbd0:	10 f4       	brcc	.+4      	; 0xbbd6 <f_write+0x316>
    bbd2:	ac 01       	movw	r20, r24
    bbd4:	bd 01       	movw	r22, r26
    bbd6:	f7 01       	movw	r30, r14
    bbd8:	42 87       	std	Z+10, r20	; 0x0a
    bbda:	53 87       	std	Z+11, r21	; 0x0b
    bbdc:	64 87       	std	Z+12, r22	; 0x0c
    bbde:	75 87       	std	Z+13, r23	; 0x0d
    bbe0:	a5 ce       	rjmp	.-694    	; 0xb92c <f_write+0x6c>
    bbe2:	87 e0       	ldi	r24, 0x07	; 7
    bbe4:	90 e0       	ldi	r25, 0x00	; 0
    bbe6:	28 96       	adiw	r28, 0x08	; 8
    bbe8:	e2 e1       	ldi	r30, 0x12	; 18
    bbea:	0c 94 fa df 	jmp	0x1bff4	; 0x1bff4 <__epilogue_restores__>

0000bbee <f_sync>:
    bbee:	8f 92       	push	r8
    bbf0:	9f 92       	push	r9
    bbf2:	af 92       	push	r10
    bbf4:	bf 92       	push	r11
    bbf6:	ef 92       	push	r14
    bbf8:	ff 92       	push	r15
    bbfa:	0f 93       	push	r16
    bbfc:	1f 93       	push	r17
    bbfe:	cf 93       	push	r28
    bc00:	df 93       	push	r29
    bc02:	00 d0       	rcall	.+0      	; 0xbc04 <f_sync+0x16>
    bc04:	cd b7       	in	r28, 0x3d	; 61
    bc06:	de b7       	in	r29, 0x3e	; 62
    bc08:	7c 01       	movw	r14, r24
    bc0a:	be 01       	movw	r22, r28
    bc0c:	6f 5f       	subi	r22, 0xFF	; 255
    bc0e:	7f 4f       	sbci	r23, 0xFF	; 255
    bc10:	0e 94 a3 47 	call	0x8f46	; 0x8f46 <validate>
    bc14:	00 97       	sbiw	r24, 0x00	; 0
    bc16:	09 f0       	breq	.+2      	; 0xbc1a <f_sync+0x2c>
    bc18:	5d c0       	rjmp	.+186    	; 0xbcd4 <f_sync+0xe6>
    bc1a:	f7 01       	movw	r30, r14
    bc1c:	86 85       	ldd	r24, Z+14	; 0x0e
    bc1e:	86 ff       	sbrs	r24, 6
    bc20:	55 c0       	rjmp	.+170    	; 0xbccc <f_sync+0xde>
    bc22:	87 ff       	sbrs	r24, 7
    bc24:	15 c0       	rjmp	.+42     	; 0xbc50 <f_sync+0x62>
    bc26:	20 8d       	ldd	r18, Z+24	; 0x18
    bc28:	31 8d       	ldd	r19, Z+25	; 0x19
    bc2a:	42 8d       	ldd	r20, Z+26	; 0x1a
    bc2c:	53 8d       	ldd	r21, Z+27	; 0x1b
    bc2e:	e9 81       	ldd	r30, Y+1	; 0x01
    bc30:	fa 81       	ldd	r31, Y+2	; 0x02
    bc32:	01 e0       	ldi	r16, 0x01	; 1
    bc34:	10 e0       	ldi	r17, 0x00	; 0
    bc36:	b7 01       	movw	r22, r14
    bc38:	6c 5d       	subi	r22, 0xDC	; 220
    bc3a:	7f 4f       	sbci	r23, 0xFF	; 255
    bc3c:	81 81       	ldd	r24, Z+1	; 0x01
    bc3e:	0e 94 7f 69 	call	0xd2fe	; 0xd2fe <disk_write>
    bc42:	89 2b       	or	r24, r25
    bc44:	09 f0       	breq	.+2      	; 0xbc48 <f_sync+0x5a>
    bc46:	44 c0       	rjmp	.+136    	; 0xbcd0 <f_sync+0xe2>
    bc48:	f7 01       	movw	r30, r14
    bc4a:	86 85       	ldd	r24, Z+14	; 0x0e
    bc4c:	8f 77       	andi	r24, 0x7F	; 127
    bc4e:	86 87       	std	Z+14, r24	; 0x0e
    bc50:	0e 94 b7 6f 	call	0xdf6e	; 0xdf6e <get_fattime>
    bc54:	4b 01       	movw	r8, r22
    bc56:	5c 01       	movw	r10, r24
    bc58:	f7 01       	movw	r30, r14
    bc5a:	44 8d       	ldd	r20, Z+28	; 0x1c
    bc5c:	55 8d       	ldd	r21, Z+29	; 0x1d
    bc5e:	66 8d       	ldd	r22, Z+30	; 0x1e
    bc60:	77 8d       	ldd	r23, Z+31	; 0x1f
    bc62:	89 81       	ldd	r24, Y+1	; 0x01
    bc64:	9a 81       	ldd	r25, Y+2	; 0x02
    bc66:	0e 94 26 4b 	call	0x964c	; 0x964c <move_window>
    bc6a:	00 97       	sbiw	r24, 0x00	; 0
    bc6c:	99 f5       	brne	.+102    	; 0xbcd4 <f_sync+0xe6>
    bc6e:	f7 01       	movw	r30, r14
    bc70:	00 a1       	ldd	r16, Z+32	; 0x20
    bc72:	11 a1       	ldd	r17, Z+33	; 0x21
    bc74:	f8 01       	movw	r30, r16
    bc76:	83 85       	ldd	r24, Z+11	; 0x0b
    bc78:	80 62       	ori	r24, 0x20	; 32
    bc7a:	83 87       	std	Z+11, r24	; 0x0b
    bc7c:	f7 01       	movw	r30, r14
    bc7e:	26 81       	ldd	r18, Z+6	; 0x06
    bc80:	37 81       	ldd	r19, Z+7	; 0x07
    bc82:	40 85       	ldd	r20, Z+8	; 0x08
    bc84:	51 85       	ldd	r21, Z+9	; 0x09
    bc86:	b8 01       	movw	r22, r16
    bc88:	80 81       	ld	r24, Z
    bc8a:	91 81       	ldd	r25, Z+1	; 0x01
    bc8c:	0e 94 ac 49 	call	0x9358	; 0x9358 <st_clust.isra.5>
    bc90:	f7 01       	movw	r30, r14
    bc92:	42 85       	ldd	r20, Z+10	; 0x0a
    bc94:	53 85       	ldd	r21, Z+11	; 0x0b
    bc96:	64 85       	ldd	r22, Z+12	; 0x0c
    bc98:	75 85       	ldd	r23, Z+13	; 0x0d
    bc9a:	c8 01       	movw	r24, r16
    bc9c:	4c 96       	adiw	r24, 0x1c	; 28
    bc9e:	0e 94 60 46 	call	0x8cc0	; 0x8cc0 <st_dword>
    bca2:	b5 01       	movw	r22, r10
    bca4:	a4 01       	movw	r20, r8
    bca6:	c8 01       	movw	r24, r16
    bca8:	46 96       	adiw	r24, 0x16	; 22
    bcaa:	0e 94 60 46 	call	0x8cc0	; 0x8cc0 <st_dword>
    bcae:	f8 01       	movw	r30, r16
    bcb0:	12 8a       	std	Z+18, r1	; 0x12
    bcb2:	13 8a       	std	Z+19, r1	; 0x13
    bcb4:	89 81       	ldd	r24, Y+1	; 0x01
    bcb6:	9a 81       	ldd	r25, Y+2	; 0x02
    bcb8:	21 e0       	ldi	r18, 0x01	; 1
    bcba:	fc 01       	movw	r30, r24
    bcbc:	23 83       	std	Z+3, r18	; 0x03
    bcbe:	0e 94 0c 4a 	call	0x9418	; 0x9418 <sync_fs>
    bcc2:	f7 01       	movw	r30, r14
    bcc4:	26 85       	ldd	r18, Z+14	; 0x0e
    bcc6:	2f 7b       	andi	r18, 0xBF	; 191
    bcc8:	26 87       	std	Z+14, r18	; 0x0e
    bcca:	04 c0       	rjmp	.+8      	; 0xbcd4 <f_sync+0xe6>
    bccc:	80 e0       	ldi	r24, 0x00	; 0
    bcce:	01 c0       	rjmp	.+2      	; 0xbcd2 <f_sync+0xe4>
    bcd0:	81 e0       	ldi	r24, 0x01	; 1
    bcd2:	90 e0       	ldi	r25, 0x00	; 0
    bcd4:	0f 90       	pop	r0
    bcd6:	0f 90       	pop	r0
    bcd8:	df 91       	pop	r29
    bcda:	cf 91       	pop	r28
    bcdc:	1f 91       	pop	r17
    bcde:	0f 91       	pop	r16
    bce0:	ff 90       	pop	r15
    bce2:	ef 90       	pop	r14
    bce4:	bf 90       	pop	r11
    bce6:	af 90       	pop	r10
    bce8:	9f 90       	pop	r9
    bcea:	8f 90       	pop	r8
    bcec:	08 95       	ret

0000bcee <f_close>:
    bcee:	a2 e0       	ldi	r26, 0x02	; 2
    bcf0:	b0 e0       	ldi	r27, 0x00	; 0
    bcf2:	ed e7       	ldi	r30, 0x7D	; 125
    bcf4:	fe e5       	ldi	r31, 0x5E	; 94
    bcf6:	0c 94 ec df 	jmp	0x1bfd8	; 0x1bfd8 <__prologue_saves__+0x1c>
    bcfa:	8c 01       	movw	r16, r24
    bcfc:	78 df       	rcall	.-272    	; 0xbbee <f_sync>
    bcfe:	00 97       	sbiw	r24, 0x00	; 0
    bd00:	59 f4       	brne	.+22     	; 0xbd18 <f_close+0x2a>
    bd02:	be 01       	movw	r22, r28
    bd04:	6f 5f       	subi	r22, 0xFF	; 255
    bd06:	7f 4f       	sbci	r23, 0xFF	; 255
    bd08:	c8 01       	movw	r24, r16
    bd0a:	0e 94 a3 47 	call	0x8f46	; 0x8f46 <validate>
    bd0e:	00 97       	sbiw	r24, 0x00	; 0
    bd10:	19 f4       	brne	.+6      	; 0xbd18 <f_close+0x2a>
    bd12:	f8 01       	movw	r30, r16
    bd14:	11 82       	std	Z+1, r1	; 0x01
    bd16:	10 82       	st	Z, r1
    bd18:	22 96       	adiw	r28, 0x02	; 2
    bd1a:	e4 e0       	ldi	r30, 0x04	; 4
    bd1c:	0c 94 08 e0 	jmp	0x1c010	; 0x1c010 <__epilogue_restores__+0x1c>

0000bd20 <f_chdir>:
    bd20:	a2 e3       	ldi	r26, 0x32	; 50
    bd22:	b0 e0       	ldi	r27, 0x00	; 0
    bd24:	e6 e9       	ldi	r30, 0x96	; 150
    bd26:	fe e5       	ldi	r31, 0x5E	; 94
    bd28:	0c 94 e8 df 	jmp	0x1bfd0	; 0x1bfd0 <__prologue_saves__+0x14>
    bd2c:	9a ab       	std	Y+50, r25	; 0x32
    bd2e:	89 ab       	std	Y+49, r24	; 0x31
    bd30:	40 e0       	ldi	r20, 0x00	; 0
    bd32:	be 01       	movw	r22, r28
    bd34:	61 5d       	subi	r22, 0xD1	; 209
    bd36:	7f 4f       	sbci	r23, 0xFF	; 255
    bd38:	ce 01       	movw	r24, r28
    bd3a:	c1 96       	adiw	r24, 0x31	; 49
    bd3c:	0e 94 a1 4b 	call	0x9742	; 0x9742 <mount_volume>
    bd40:	00 97       	sbiw	r24, 0x00	; 0
    bd42:	09 f0       	breq	.+2      	; 0xbd46 <f_chdir+0x26>
    bd44:	44 c0       	rjmp	.+136    	; 0xbdce <f_chdir+0xae>
    bd46:	8f a5       	ldd	r24, Y+47	; 0x2f
    bd48:	98 a9       	ldd	r25, Y+48	; 0x30
    bd4a:	9a 83       	std	Y+2, r25	; 0x02
    bd4c:	89 83       	std	Y+1, r24	; 0x01
    bd4e:	80 e0       	ldi	r24, 0x00	; 0
    bd50:	92 e0       	ldi	r25, 0x02	; 2
    bd52:	0e 94 b3 68 	call	0xd166	; 0xd166 <ff_memalloc>
    bd56:	7c 01       	movw	r14, r24
    bd58:	00 97       	sbiw	r24, 0x00	; 0
    bd5a:	a9 f1       	breq	.+106    	; 0xbdc6 <f_chdir+0xa6>
    bd5c:	ef a5       	ldd	r30, Y+47	; 0x2f
    bd5e:	f8 a9       	ldd	r31, Y+48	; 0x30
    bd60:	94 87       	std	Z+12, r25	; 0x0c
    bd62:	83 87       	std	Z+11, r24	; 0x0b
    bd64:	69 a9       	ldd	r22, Y+49	; 0x31
    bd66:	7a a9       	ldd	r23, Y+50	; 0x32
    bd68:	ce 01       	movw	r24, r28
    bd6a:	01 96       	adiw	r24, 0x01	; 1
    bd6c:	39 d8       	rcall	.-3982   	; 0xade0 <follow_path>
    bd6e:	8c 01       	movw	r16, r24
    bd70:	89 2b       	or	r24, r25
    bd72:	09 f5       	brne	.+66     	; 0xbdb6 <f_chdir+0x96>
    bd74:	88 a5       	ldd	r24, Y+40	; 0x28
    bd76:	87 ff       	sbrs	r24, 7
    bd78:	0b c0       	rjmp	.+22     	; 0xbd90 <f_chdir+0x70>
    bd7a:	ef a5       	ldd	r30, Y+47	; 0x2f
    bd7c:	f8 a9       	ldd	r31, Y+48	; 0x30
    bd7e:	8f 81       	ldd	r24, Y+7	; 0x07
    bd80:	98 85       	ldd	r25, Y+8	; 0x08
    bd82:	a9 85       	ldd	r26, Y+9	; 0x09
    bd84:	ba 85       	ldd	r27, Y+10	; 0x0a
    bd86:	85 8b       	std	Z+21, r24	; 0x15
    bd88:	96 8b       	std	Z+22, r25	; 0x16
    bd8a:	a7 8b       	std	Z+23, r26	; 0x17
    bd8c:	b0 8f       	std	Z+24, r27	; 0x18
    bd8e:	13 c0       	rjmp	.+38     	; 0xbdb6 <f_chdir+0x96>
    bd90:	8d 81       	ldd	r24, Y+5	; 0x05
    bd92:	84 ff       	sbrs	r24, 4
    bd94:	0e c0       	rjmp	.+28     	; 0xbdb2 <f_chdir+0x92>
    bd96:	cf a4       	ldd	r12, Y+47	; 0x2f
    bd98:	d8 a8       	ldd	r13, Y+48	; 0x30
    bd9a:	6b 8d       	ldd	r22, Y+27	; 0x1b
    bd9c:	7c 8d       	ldd	r23, Y+28	; 0x1c
    bd9e:	f6 01       	movw	r30, r12
    bda0:	80 81       	ld	r24, Z
    bda2:	0e 94 97 49 	call	0x932e	; 0x932e <ld_clust.isra.4>
    bda6:	f6 01       	movw	r30, r12
    bda8:	65 8b       	std	Z+21, r22	; 0x15
    bdaa:	76 8b       	std	Z+22, r23	; 0x16
    bdac:	87 8b       	std	Z+23, r24	; 0x17
    bdae:	90 8f       	std	Z+24, r25	; 0x18
    bdb0:	02 c0       	rjmp	.+4      	; 0xbdb6 <f_chdir+0x96>
    bdb2:	05 e0       	ldi	r16, 0x05	; 5
    bdb4:	10 e0       	ldi	r17, 0x00	; 0
    bdb6:	c7 01       	movw	r24, r14
    bdb8:	0e 94 b6 68 	call	0xd16c	; 0xd16c <ff_memfree>
    bdbc:	04 30       	cpi	r16, 0x04	; 4
    bdbe:	11 05       	cpc	r17, r1
    bdc0:	29 f4       	brne	.+10     	; 0xbdcc <f_chdir+0xac>
    bdc2:	85 e0       	ldi	r24, 0x05	; 5
    bdc4:	01 c0       	rjmp	.+2      	; 0xbdc8 <f_chdir+0xa8>
    bdc6:	81 e1       	ldi	r24, 0x11	; 17
    bdc8:	90 e0       	ldi	r25, 0x00	; 0
    bdca:	01 c0       	rjmp	.+2      	; 0xbdce <f_chdir+0xae>
    bdcc:	c8 01       	movw	r24, r16
    bdce:	e2 96       	adiw	r28, 0x32	; 50
    bdd0:	e8 e0       	ldi	r30, 0x08	; 8
    bdd2:	0c 94 04 e0 	jmp	0x1c008	; 0x1c008 <__epilogue_restores__+0x14>

0000bdd6 <f_getcwd>:
    bdd6:	a8 e4       	ldi	r26, 0x48	; 72
    bdd8:	b1 e0       	ldi	r27, 0x01	; 1
    bdda:	e1 ef       	ldi	r30, 0xF1	; 241
    bddc:	fe e5       	ldi	r31, 0x5E	; 94
    bdde:	0c 94 de df 	jmp	0x1bfbc	; 0x1bfbc <__prologue_saves__>
    bde2:	c9 5b       	subi	r28, 0xB9	; 185
    bde4:	de 4f       	sbci	r29, 0xFE	; 254
    bde6:	99 83       	std	Y+1, r25	; 0x01
    bde8:	88 83       	st	Y, r24
    bdea:	c7 54       	subi	r28, 0x47	; 71
    bdec:	d1 40       	sbci	r29, 0x01	; 1
    bdee:	4b 01       	movw	r8, r22
    bdf0:	7c 01       	movw	r14, r24
    bdf2:	fc 01       	movw	r30, r24
    bdf4:	10 82       	st	Z, r1
    bdf6:	40 e0       	ldi	r20, 0x00	; 0
    bdf8:	be 01       	movw	r22, r28
    bdfa:	6b 5b       	subi	r22, 0xBB	; 187
    bdfc:	7e 4f       	sbci	r23, 0xFE	; 254
    bdfe:	ce 01       	movw	r24, r28
    be00:	89 5b       	subi	r24, 0xB9	; 185
    be02:	9e 4f       	sbci	r25, 0xFE	; 254
    be04:	0e 94 a1 4b 	call	0x9742	; 0x9742 <mount_volume>
    be08:	1c 01       	movw	r2, r24
    be0a:	89 2b       	or	r24, r25
    be0c:	09 f0       	breq	.+2      	; 0xbe10 <f_getcwd+0x3a>
    be0e:	03 c1       	rjmp	.+518    	; 0xc016 <f_getcwd+0x240>
    be10:	cb 5b       	subi	r28, 0xBB	; 187
    be12:	de 4f       	sbci	r29, 0xFE	; 254
    be14:	88 81       	ld	r24, Y
    be16:	99 81       	ldd	r25, Y+1	; 0x01
    be18:	c5 54       	subi	r28, 0x45	; 69
    be1a:	d1 40       	sbci	r29, 0x01	; 1
    be1c:	c9 5e       	subi	r28, 0xE9	; 233
    be1e:	de 4f       	sbci	r29, 0xFE	; 254
    be20:	99 83       	std	Y+1, r25	; 0x01
    be22:	88 83       	st	Y, r24
    be24:	c7 51       	subi	r28, 0x17	; 23
    be26:	d1 40       	sbci	r29, 0x01	; 1
    be28:	80 e0       	ldi	r24, 0x00	; 0
    be2a:	92 e0       	ldi	r25, 0x02	; 2
    be2c:	0e 94 b3 68 	call	0xd166	; 0xd166 <ff_memalloc>
    be30:	5c 01       	movw	r10, r24
    be32:	00 97       	sbiw	r24, 0x00	; 0
    be34:	09 f4       	brne	.+2      	; 0xbe38 <f_getcwd+0x62>
    be36:	f3 c0       	rjmp	.+486    	; 0xc01e <f_getcwd+0x248>
    be38:	cb 5b       	subi	r28, 0xBB	; 187
    be3a:	de 4f       	sbci	r29, 0xFE	; 254
    be3c:	e8 81       	ld	r30, Y
    be3e:	f9 81       	ldd	r31, Y+1	; 0x01
    be40:	c5 54       	subi	r28, 0x45	; 69
    be42:	d1 40       	sbci	r29, 0x01	; 1
    be44:	94 87       	std	Z+12, r25	; 0x0c
    be46:	83 87       	std	Z+11, r24	; 0x0b
    be48:	85 89       	ldd	r24, Z+21	; 0x15
    be4a:	96 89       	ldd	r25, Z+22	; 0x16
    be4c:	a7 89       	ldd	r26, Z+23	; 0x17
    be4e:	b0 8d       	ldd	r27, Z+24	; 0x18
    be50:	c3 5e       	subi	r28, 0xE3	; 227
    be52:	de 4f       	sbci	r29, 0xFE	; 254
    be54:	88 83       	st	Y, r24
    be56:	99 83       	std	Y+1, r25	; 0x01
    be58:	aa 83       	std	Y+2, r26	; 0x02
    be5a:	bb 83       	std	Y+3, r27	; 0x03
    be5c:	cd 51       	subi	r28, 0x1D	; 29
    be5e:	d1 40       	sbci	r29, 0x01	; 1
    be60:	84 01       	movw	r16, r8
    be62:	ce 01       	movw	r24, r28
    be64:	01 96       	adiw	r24, 0x01	; 1
    be66:	6c 01       	movw	r12, r24
    be68:	c3 5e       	subi	r28, 0xE3	; 227
    be6a:	de 4f       	sbci	r29, 0xFE	; 254
    be6c:	48 80       	ld	r4, Y
    be6e:	59 80       	ldd	r5, Y+1	; 0x01
    be70:	6a 80       	ldd	r6, Y+2	; 0x02
    be72:	7b 80       	ldd	r7, Y+3	; 0x03
    be74:	cd 51       	subi	r28, 0x1D	; 29
    be76:	d1 40       	sbci	r29, 0x01	; 1
    be78:	41 14       	cp	r4, r1
    be7a:	51 04       	cpc	r5, r1
    be7c:	61 04       	cpc	r6, r1
    be7e:	71 04       	cpc	r7, r1
    be80:	09 f4       	brne	.+2      	; 0xbe84 <f_getcwd+0xae>
    be82:	a3 c0       	rjmp	.+326    	; 0xbfca <f_getcwd+0x1f4>
    be84:	40 e2       	ldi	r20, 0x20	; 32
    be86:	50 e0       	ldi	r21, 0x00	; 0
    be88:	60 e0       	ldi	r22, 0x00	; 0
    be8a:	70 e0       	ldi	r23, 0x00	; 0
    be8c:	ce 01       	movw	r24, r28
    be8e:	89 5e       	subi	r24, 0xE9	; 233
    be90:	9e 4f       	sbci	r25, 0xFE	; 254
    be92:	0e 94 aa 4f 	call	0x9f54	; 0x9f54 <dir_sdi>
    be96:	00 97       	sbiw	r24, 0x00	; 0
    be98:	09 f0       	breq	.+2      	; 0xbe9c <f_getcwd+0xc6>
    be9a:	c6 c0       	rjmp	.+396    	; 0xc028 <f_getcwd+0x252>
    be9c:	c3 5d       	subi	r28, 0xD3	; 211
    be9e:	de 4f       	sbci	r29, 0xFE	; 254
    bea0:	48 81       	ld	r20, Y
    bea2:	59 81       	ldd	r21, Y+1	; 0x01
    bea4:	6a 81       	ldd	r22, Y+2	; 0x02
    bea6:	7b 81       	ldd	r23, Y+3	; 0x03
    bea8:	cd 52       	subi	r28, 0x2D	; 45
    beaa:	d1 40       	sbci	r29, 0x01	; 1
    beac:	cb 5b       	subi	r28, 0xBB	; 187
    beae:	de 4f       	sbci	r29, 0xFE	; 254
    beb0:	88 81       	ld	r24, Y
    beb2:	99 81       	ldd	r25, Y+1	; 0x01
    beb4:	c5 54       	subi	r28, 0x45	; 69
    beb6:	d1 40       	sbci	r29, 0x01	; 1
    beb8:	0e 94 26 4b 	call	0x964c	; 0x964c <move_window>
    bebc:	00 97       	sbiw	r24, 0x00	; 0
    bebe:	09 f0       	breq	.+2      	; 0xbec2 <f_getcwd+0xec>
    bec0:	b3 c0       	rjmp	.+358    	; 0xc028 <f_getcwd+0x252>
    bec2:	cf 5c       	subi	r28, 0xCF	; 207
    bec4:	de 4f       	sbci	r29, 0xFE	; 254
    bec6:	68 81       	ld	r22, Y
    bec8:	79 81       	ldd	r23, Y+1	; 0x01
    beca:	c1 53       	subi	r28, 0x31	; 49
    becc:	d1 40       	sbci	r29, 0x01	; 1
    bece:	cb 5b       	subi	r28, 0xBB	; 187
    bed0:	de 4f       	sbci	r29, 0xFE	; 254
    bed2:	e8 81       	ld	r30, Y
    bed4:	f9 81       	ldd	r31, Y+1	; 0x01
    bed6:	c5 54       	subi	r28, 0x45	; 69
    bed8:	d1 40       	sbci	r29, 0x01	; 1
    beda:	80 81       	ld	r24, Z
    bedc:	0e 94 97 49 	call	0x932e	; 0x932e <ld_clust.isra.4>
    bee0:	c3 5e       	subi	r28, 0xE3	; 227
    bee2:	de 4f       	sbci	r29, 0xFE	; 254
    bee4:	68 83       	st	Y, r22
    bee6:	79 83       	std	Y+1, r23	; 0x01
    bee8:	8a 83       	std	Y+2, r24	; 0x02
    beea:	9b 83       	std	Y+3, r25	; 0x03
    beec:	cd 51       	subi	r28, 0x1D	; 29
    beee:	d1 40       	sbci	r29, 0x01	; 1
    bef0:	40 e0       	ldi	r20, 0x00	; 0
    bef2:	50 e0       	ldi	r21, 0x00	; 0
    bef4:	ba 01       	movw	r22, r20
    bef6:	ce 01       	movw	r24, r28
    bef8:	89 5e       	subi	r24, 0xE9	; 233
    befa:	9e 4f       	sbci	r25, 0xFE	; 254
    befc:	0e 94 aa 4f 	call	0x9f54	; 0x9f54 <dir_sdi>
    bf00:	00 97       	sbiw	r24, 0x00	; 0
    bf02:	09 f0       	breq	.+2      	; 0xbf06 <f_getcwd+0x130>
    bf04:	91 c0       	rjmp	.+290    	; 0xc028 <f_getcwd+0x252>
    bf06:	60 e0       	ldi	r22, 0x00	; 0
    bf08:	70 e0       	ldi	r23, 0x00	; 0
    bf0a:	ce 01       	movw	r24, r28
    bf0c:	89 5e       	subi	r24, 0xE9	; 233
    bf0e:	9e 4f       	sbci	r25, 0xFE	; 254
    bf10:	0e 94 43 53 	call	0xa686	; 0xa686 <dir_read>
    bf14:	00 97       	sbiw	r24, 0x00	; 0
    bf16:	09 f0       	breq	.+2      	; 0xbf1a <f_getcwd+0x144>
    bf18:	89 c0       	rjmp	.+274    	; 0xc02c <f_getcwd+0x256>
    bf1a:	cf 5c       	subi	r28, 0xCF	; 207
    bf1c:	de 4f       	sbci	r29, 0xFE	; 254
    bf1e:	68 81       	ld	r22, Y
    bf20:	79 81       	ldd	r23, Y+1	; 0x01
    bf22:	c1 53       	subi	r28, 0x31	; 49
    bf24:	d1 40       	sbci	r29, 0x01	; 1
    bf26:	cb 5b       	subi	r28, 0xBB	; 187
    bf28:	de 4f       	sbci	r29, 0xFE	; 254
    bf2a:	e8 81       	ld	r30, Y
    bf2c:	f9 81       	ldd	r31, Y+1	; 0x01
    bf2e:	c5 54       	subi	r28, 0x45	; 69
    bf30:	d1 40       	sbci	r29, 0x01	; 1
    bf32:	80 81       	ld	r24, Z
    bf34:	0e 94 97 49 	call	0x932e	; 0x932e <ld_clust.isra.4>
    bf38:	46 16       	cp	r4, r22
    bf3a:	57 06       	cpc	r5, r23
    bf3c:	68 06       	cpc	r6, r24
    bf3e:	79 06       	cpc	r7, r25
    bf40:	41 f4       	brne	.+16     	; 0xbf52 <f_getcwd+0x17c>
    bf42:	b6 01       	movw	r22, r12
    bf44:	ce 01       	movw	r24, r28
    bf46:	89 5e       	subi	r24, 0xE9	; 233
    bf48:	9e 4f       	sbci	r25, 0xFE	; 254
    bf4a:	0e 94 87 48 	call	0x910e	; 0x910e <get_fileinfo>
    bf4e:	f6 01       	movw	r30, r12
    bf50:	0a c0       	rjmp	.+20     	; 0xbf66 <f_getcwd+0x190>
    bf52:	60 e0       	ldi	r22, 0x00	; 0
    bf54:	70 e0       	ldi	r23, 0x00	; 0
    bf56:	ce 01       	movw	r24, r28
    bf58:	89 5e       	subi	r24, 0xE9	; 233
    bf5a:	9e 4f       	sbci	r25, 0xFE	; 254
    bf5c:	0e 94 22 52 	call	0xa444	; 0xa444 <dir_next>
    bf60:	00 97       	sbiw	r24, 0x00	; 0
    bf62:	89 f2       	breq	.-94     	; 0xbf06 <f_getcwd+0x130>
    bf64:	63 c0       	rjmp	.+198    	; 0xc02c <f_getcwd+0x256>
    bf66:	cf 01       	movw	r24, r30
    bf68:	8c 19       	sub	r24, r12
    bf6a:	9d 09       	sbc	r25, r13
    bf6c:	31 96       	adiw	r30, 0x01	; 1
    bf6e:	25 89       	ldd	r18, Z+21	; 0x15
    bf70:	21 11       	cpse	r18, r1
    bf72:	f9 cf       	rjmp	.-14     	; 0xbf66 <f_getcwd+0x190>
    bf74:	9c 01       	movw	r18, r24
    bf76:	2f 5f       	subi	r18, 0xFF	; 255
    bf78:	3f 4f       	sbci	r19, 0xFF	; 255
    bf7a:	02 17       	cp	r16, r18
    bf7c:	13 07       	cpc	r17, r19
    bf7e:	08 f4       	brcc	.+2      	; 0xbf82 <f_getcwd+0x1ac>
    bf80:	51 c0       	rjmp	.+162    	; 0xc024 <f_getcwd+0x24e>
    bf82:	f6 01       	movw	r30, r12
    bf84:	e8 0f       	add	r30, r24
    bf86:	f9 1f       	adc	r31, r25
    bf88:	98 01       	movw	r18, r16
    bf8a:	ce 16       	cp	r12, r30
    bf8c:	df 06       	cpc	r13, r31
    bf8e:	71 f0       	breq	.+28     	; 0xbfac <f_getcwd+0x1d6>
    bf90:	21 50       	subi	r18, 0x01	; 1
    bf92:	31 09       	sbc	r19, r1
    bf94:	45 89       	ldd	r20, Z+21	; 0x15
    bf96:	c9 5b       	subi	r28, 0xB9	; 185
    bf98:	de 4f       	sbci	r29, 0xFE	; 254
    bf9a:	a8 81       	ld	r26, Y
    bf9c:	b9 81       	ldd	r27, Y+1	; 0x01
    bf9e:	c7 54       	subi	r28, 0x47	; 71
    bfa0:	d1 40       	sbci	r29, 0x01	; 1
    bfa2:	a2 0f       	add	r26, r18
    bfa4:	b3 1f       	adc	r27, r19
    bfa6:	4c 93       	st	X, r20
    bfa8:	31 97       	sbiw	r30, 0x01	; 1
    bfaa:	ef cf       	rjmp	.-34     	; 0xbf8a <f_getcwd+0x1b4>
    bfac:	80 95       	com	r24
    bfae:	90 95       	com	r25
    bfb0:	08 0f       	add	r16, r24
    bfb2:	19 1f       	adc	r17, r25
    bfb4:	c9 5b       	subi	r28, 0xB9	; 185
    bfb6:	de 4f       	sbci	r29, 0xFE	; 254
    bfb8:	e8 81       	ld	r30, Y
    bfba:	f9 81       	ldd	r31, Y+1	; 0x01
    bfbc:	c7 54       	subi	r28, 0x47	; 71
    bfbe:	d1 40       	sbci	r29, 0x01	; 1
    bfc0:	e0 0f       	add	r30, r16
    bfc2:	f1 1f       	adc	r31, r17
    bfc4:	9f e2       	ldi	r25, 0x2F	; 47
    bfc6:	90 83       	st	Z, r25
    bfc8:	4f cf       	rjmp	.-354    	; 0xbe68 <f_getcwd+0x92>
    bfca:	08 15       	cp	r16, r8
    bfcc:	19 05       	cpc	r17, r9
    bfce:	61 f4       	brne	.+24     	; 0xbfe8 <f_getcwd+0x212>
    bfd0:	01 50       	subi	r16, 0x01	; 1
    bfd2:	11 09       	sbc	r17, r1
    bfd4:	c9 5b       	subi	r28, 0xB9	; 185
    bfd6:	de 4f       	sbci	r29, 0xFE	; 254
    bfd8:	e8 81       	ld	r30, Y
    bfda:	f9 81       	ldd	r31, Y+1	; 0x01
    bfdc:	c7 54       	subi	r28, 0x47	; 71
    bfde:	d1 40       	sbci	r29, 0x01	; 1
    bfe0:	e0 0f       	add	r30, r16
    bfe2:	f1 1f       	adc	r31, r17
    bfe4:	8f e2       	ldi	r24, 0x2F	; 47
    bfe6:	80 83       	st	Z, r24
    bfe8:	ef ef       	ldi	r30, 0xFF	; 255
    bfea:	ee 1a       	sub	r14, r30
    bfec:	fe 0a       	sbc	r15, r30
    bfee:	c9 5b       	subi	r28, 0xB9	; 185
    bff0:	de 4f       	sbci	r29, 0xFE	; 254
    bff2:	e8 81       	ld	r30, Y
    bff4:	f9 81       	ldd	r31, Y+1	; 0x01
    bff6:	c7 54       	subi	r28, 0x47	; 71
    bff8:	d1 40       	sbci	r29, 0x01	; 1
    bffa:	e0 0f       	add	r30, r16
    bffc:	f1 1f       	adc	r31, r17
    bffe:	80 81       	ld	r24, Z
    c000:	f7 01       	movw	r30, r14
    c002:	31 97       	sbiw	r30, 0x01	; 1
    c004:	80 83       	st	Z, r24
    c006:	0f 5f       	subi	r16, 0xFF	; 255
    c008:	1f 4f       	sbci	r17, 0xFF	; 255
    c00a:	08 15       	cp	r16, r8
    c00c:	19 05       	cpc	r17, r9
    c00e:	60 f3       	brcs	.-40     	; 0xbfe8 <f_getcwd+0x212>
    c010:	c5 01       	movw	r24, r10
    c012:	0e 94 b6 68 	call	0xd16c	; 0xd16c <ff_memfree>
    c016:	f7 01       	movw	r30, r14
    c018:	10 82       	st	Z, r1
    c01a:	c1 01       	movw	r24, r2
    c01c:	0d c0       	rjmp	.+26     	; 0xc038 <f_getcwd+0x262>
    c01e:	81 e1       	ldi	r24, 0x11	; 17
    c020:	90 e0       	ldi	r25, 0x00	; 0
    c022:	0a c0       	rjmp	.+20     	; 0xc038 <f_getcwd+0x262>
    c024:	81 e1       	ldi	r24, 0x11	; 17
    c026:	90 e0       	ldi	r25, 0x00	; 0
    c028:	1c 01       	movw	r2, r24
    c02a:	f2 cf       	rjmp	.-28     	; 0xc010 <f_getcwd+0x23a>
    c02c:	84 30       	cpi	r24, 0x04	; 4
    c02e:	91 05       	cpc	r25, r1
    c030:	d9 f7       	brne	.-10     	; 0xc028 <f_getcwd+0x252>
    c032:	82 e0       	ldi	r24, 0x02	; 2
    c034:	90 e0       	ldi	r25, 0x00	; 0
    c036:	f8 cf       	rjmp	.-16     	; 0xc028 <f_getcwd+0x252>
    c038:	c8 5b       	subi	r28, 0xB8	; 184
    c03a:	de 4f       	sbci	r29, 0xFE	; 254
    c03c:	e2 e1       	ldi	r30, 0x12	; 18
    c03e:	0c 94 fa df 	jmp	0x1bff4	; 0x1bff4 <__epilogue_restores__>

0000c042 <f_lseek>:
    c042:	aa e0       	ldi	r26, 0x0A	; 10
    c044:	b0 e0       	ldi	r27, 0x00	; 0
    c046:	e7 e2       	ldi	r30, 0x27	; 39
    c048:	f0 e6       	ldi	r31, 0x60	; 96
    c04a:	0c 94 de df 	jmp	0x1bfbc	; 0x1bfbc <__prologue_saves__>
    c04e:	1c 01       	movw	r2, r24
    c050:	6a 01       	movw	r12, r20
    c052:	7b 01       	movw	r14, r22
    c054:	be 01       	movw	r22, r28
    c056:	6f 5f       	subi	r22, 0xFF	; 255
    c058:	7f 4f       	sbci	r23, 0xFF	; 255
    c05a:	0e 94 a3 47 	call	0x8f46	; 0x8f46 <validate>
    c05e:	00 97       	sbiw	r24, 0x00	; 0
    c060:	09 f0       	breq	.+2      	; 0xc064 <f_lseek+0x22>
    c062:	a7 c2       	rjmp	.+1358   	; 0xc5b2 <f_lseek+0x570>
    c064:	f1 01       	movw	r30, r2
    c066:	87 85       	ldd	r24, Z+15	; 0x0f
    c068:	90 e0       	ldi	r25, 0x00	; 0
    c06a:	00 97       	sbiw	r24, 0x00	; 0
    c06c:	09 f0       	breq	.+2      	; 0xc070 <f_lseek+0x2e>
    c06e:	a1 c2       	rjmp	.+1346   	; 0xc5b2 <f_lseek+0x570>
    c070:	22 a1       	ldd	r18, Z+34	; 0x22
    c072:	33 a1       	ldd	r19, Z+35	; 0x23
    c074:	21 15       	cp	r18, r1
    c076:	31 05       	cpc	r19, r1
    c078:	09 f4       	brne	.+2      	; 0xc07c <f_lseek+0x3a>
    c07a:	2e c1       	rjmp	.+604    	; 0xc2d8 <f_lseek+0x296>
    c07c:	ff ef       	ldi	r31, 0xFF	; 255
    c07e:	cf 16       	cp	r12, r31
    c080:	df 06       	cpc	r13, r31
    c082:	ef 06       	cpc	r14, r31
    c084:	ff 06       	cpc	r15, r31
    c086:	09 f0       	breq	.+2      	; 0xc08a <f_lseek+0x48>
    c088:	9a c0       	rjmp	.+308    	; 0xc1be <f_lseek+0x17c>
    c08a:	89 01       	movw	r16, r18
    c08c:	0c 5f       	subi	r16, 0xFC	; 252
    c08e:	1f 4f       	sbci	r17, 0xFF	; 255
    c090:	d9 01       	movw	r26, r18
    c092:	4d 91       	ld	r20, X+
    c094:	5d 91       	ld	r21, X+
    c096:	6d 91       	ld	r22, X+
    c098:	7c 91       	ld	r23, X
    c09a:	4f 83       	std	Y+7, r20	; 0x07
    c09c:	58 87       	std	Y+8, r21	; 0x08
    c09e:	69 87       	std	Y+9, r22	; 0x09
    c0a0:	7a 87       	std	Y+10, r23	; 0x0a
    c0a2:	f1 01       	movw	r30, r2
    c0a4:	86 80       	ldd	r8, Z+6	; 0x06
    c0a6:	97 80       	ldd	r9, Z+7	; 0x07
    c0a8:	a0 84       	ldd	r10, Z+8	; 0x08
    c0aa:	b1 84       	ldd	r11, Z+9	; 0x09
    c0ac:	52 e0       	ldi	r21, 0x02	; 2
    c0ae:	c5 2e       	mov	r12, r21
    c0b0:	d1 2c       	mov	r13, r1
    c0b2:	e1 2c       	mov	r14, r1
    c0b4:	f1 2c       	mov	r15, r1
    c0b6:	81 14       	cp	r8, r1
    c0b8:	91 04       	cpc	r9, r1
    c0ba:	a1 04       	cpc	r10, r1
    c0bc:	b1 04       	cpc	r11, r1
    c0be:	09 f4       	brne	.+2      	; 0xc0c2 <f_lseek+0x80>
    c0c0:	65 c0       	rjmp	.+202    	; 0xc18c <f_lseek+0x14a>
    c0c2:	24 01       	movw	r4, r8
    c0c4:	35 01       	movw	r6, r10
    c0c6:	1b 82       	std	Y+3, r1	; 0x03
    c0c8:	1c 82       	std	Y+4, r1	; 0x04
    c0ca:	1d 82       	std	Y+5, r1	; 0x05
    c0cc:	1e 82       	std	Y+6, r1	; 0x06
    c0ce:	2b 81       	ldd	r18, Y+3	; 0x03
    c0d0:	3c 81       	ldd	r19, Y+4	; 0x04
    c0d2:	4d 81       	ldd	r20, Y+5	; 0x05
    c0d4:	5e 81       	ldd	r21, Y+6	; 0x06
    c0d6:	2f 5f       	subi	r18, 0xFF	; 255
    c0d8:	3f 4f       	sbci	r19, 0xFF	; 255
    c0da:	4f 4f       	sbci	r20, 0xFF	; 255
    c0dc:	5f 4f       	sbci	r21, 0xFF	; 255
    c0de:	2b 83       	std	Y+3, r18	; 0x03
    c0e0:	3c 83       	std	Y+4, r19	; 0x04
    c0e2:	4d 83       	std	Y+5, r20	; 0x05
    c0e4:	5e 83       	std	Y+6, r21	; 0x06
    c0e6:	b3 01       	movw	r22, r6
    c0e8:	a2 01       	movw	r20, r4
    c0ea:	d1 01       	movw	r26, r2
    c0ec:	8d 91       	ld	r24, X+
    c0ee:	9c 91       	ld	r25, X
    c0f0:	0e 94 f6 4e 	call	0x9dec	; 0x9dec <get_fat.isra.10>
    c0f4:	62 30       	cpi	r22, 0x02	; 2
    c0f6:	71 05       	cpc	r23, r1
    c0f8:	81 05       	cpc	r24, r1
    c0fa:	91 05       	cpc	r25, r1
    c0fc:	10 f4       	brcc	.+4      	; 0xc102 <f_lseek+0xc0>
    c0fe:	82 e0       	ldi	r24, 0x02	; 2
    c100:	07 c0       	rjmp	.+14     	; 0xc110 <f_lseek+0xce>
    c102:	6f 3f       	cpi	r22, 0xFF	; 255
    c104:	ff ef       	ldi	r31, 0xFF	; 255
    c106:	7f 07       	cpc	r23, r31
    c108:	8f 07       	cpc	r24, r31
    c10a:	9f 07       	cpc	r25, r31
    c10c:	29 f4       	brne	.+10     	; 0xc118 <f_lseek+0xd6>
    c10e:	81 e0       	ldi	r24, 0x01	; 1
    c110:	f1 01       	movw	r30, r2
    c112:	87 87       	std	Z+15, r24	; 0x0f
    c114:	90 e0       	ldi	r25, 0x00	; 0
    c116:	4d c2       	rjmp	.+1178   	; 0xc5b2 <f_lseek+0x570>
    c118:	a3 01       	movw	r20, r6
    c11a:	92 01       	movw	r18, r4
    c11c:	2f 5f       	subi	r18, 0xFF	; 255
    c11e:	3f 4f       	sbci	r19, 0xFF	; 255
    c120:	4f 4f       	sbci	r20, 0xFF	; 255
    c122:	5f 4f       	sbci	r21, 0xFF	; 255
    c124:	2b 01       	movw	r4, r22
    c126:	3c 01       	movw	r6, r24
    c128:	62 17       	cp	r22, r18
    c12a:	73 07       	cpc	r23, r19
    c12c:	84 07       	cpc	r24, r20
    c12e:	95 07       	cpc	r25, r21
    c130:	71 f2       	breq	.-100    	; 0xc0ce <f_lseek+0x8c>
    c132:	f2 e0       	ldi	r31, 0x02	; 2
    c134:	cf 0e       	add	r12, r31
    c136:	d1 1c       	adc	r13, r1
    c138:	e1 1c       	adc	r14, r1
    c13a:	f1 1c       	adc	r15, r1
    c13c:	2f 81       	ldd	r18, Y+7	; 0x07
    c13e:	38 85       	ldd	r19, Y+8	; 0x08
    c140:	49 85       	ldd	r20, Y+9	; 0x09
    c142:	5a 85       	ldd	r21, Y+10	; 0x0a
    c144:	2c 15       	cp	r18, r12
    c146:	3d 05       	cpc	r19, r13
    c148:	4e 05       	cpc	r20, r14
    c14a:	5f 05       	cpc	r21, r15
    c14c:	88 f0       	brcs	.+34     	; 0xc170 <f_lseek+0x12e>
    c14e:	2b 81       	ldd	r18, Y+3	; 0x03
    c150:	3c 81       	ldd	r19, Y+4	; 0x04
    c152:	4d 81       	ldd	r20, Y+5	; 0x05
    c154:	5e 81       	ldd	r21, Y+6	; 0x06
    c156:	d8 01       	movw	r26, r16
    c158:	2d 93       	st	X+, r18
    c15a:	3d 93       	st	X+, r19
    c15c:	4d 93       	st	X+, r20
    c15e:	5c 93       	st	X, r21
    c160:	13 97       	sbiw	r26, 0x03	; 3
    c162:	f8 01       	movw	r30, r16
    c164:	84 82       	std	Z+4, r8	; 0x04
    c166:	95 82       	std	Z+5, r9	; 0x05
    c168:	a6 82       	std	Z+6, r10	; 0x06
    c16a:	b7 82       	std	Z+7, r11	; 0x07
    c16c:	08 5f       	subi	r16, 0xF8	; 248
    c16e:	1f 4f       	sbci	r17, 0xFF	; 255
    c170:	e9 81       	ldd	r30, Y+1	; 0x01
    c172:	fa 81       	ldd	r31, Y+2	; 0x02
    c174:	81 8c       	ldd	r8, Z+25	; 0x19
    c176:	92 8c       	ldd	r9, Z+26	; 0x1a
    c178:	a3 8c       	ldd	r10, Z+27	; 0x1b
    c17a:	b4 8c       	ldd	r11, Z+28	; 0x1c
    c17c:	68 15       	cp	r22, r8
    c17e:	79 05       	cpc	r23, r9
    c180:	8a 05       	cpc	r24, r10
    c182:	9b 05       	cpc	r25, r11
    c184:	18 f4       	brcc	.+6      	; 0xc18c <f_lseek+0x14a>
    c186:	4b 01       	movw	r8, r22
    c188:	5c 01       	movw	r10, r24
    c18a:	9b cf       	rjmp	.-202    	; 0xc0c2 <f_lseek+0x80>
    c18c:	f1 01       	movw	r30, r2
    c18e:	a2 a1       	ldd	r26, Z+34	; 0x22
    c190:	b3 a1       	ldd	r27, Z+35	; 0x23
    c192:	cd 92       	st	X+, r12
    c194:	dd 92       	st	X+, r13
    c196:	ed 92       	st	X+, r14
    c198:	fc 92       	st	X, r15
    c19a:	13 97       	sbiw	r26, 0x03	; 3
    c19c:	2f 81       	ldd	r18, Y+7	; 0x07
    c19e:	38 85       	ldd	r19, Y+8	; 0x08
    c1a0:	49 85       	ldd	r20, Y+9	; 0x09
    c1a2:	5a 85       	ldd	r21, Y+10	; 0x0a
    c1a4:	2c 15       	cp	r18, r12
    c1a6:	3d 05       	cpc	r19, r13
    c1a8:	4e 05       	cpc	r20, r14
    c1aa:	5f 05       	cpc	r21, r15
    c1ac:	08 f4       	brcc	.+2      	; 0xc1b0 <f_lseek+0x16e>
    c1ae:	f8 c1       	rjmp	.+1008   	; 0xc5a0 <f_lseek+0x55e>
    c1b0:	d8 01       	movw	r26, r16
    c1b2:	1d 92       	st	X+, r1
    c1b4:	1d 92       	st	X+, r1
    c1b6:	1d 92       	st	X+, r1
    c1b8:	1c 92       	st	X, r1
    c1ba:	13 97       	sbiw	r26, 0x03	; 3
    c1bc:	ef c1       	rjmp	.+990    	; 0xc59c <f_lseek+0x55a>
    c1be:	f1 01       	movw	r30, r2
    c1c0:	82 85       	ldd	r24, Z+10	; 0x0a
    c1c2:	93 85       	ldd	r25, Z+11	; 0x0b
    c1c4:	a4 85       	ldd	r26, Z+12	; 0x0c
    c1c6:	b5 85       	ldd	r27, Z+13	; 0x0d
    c1c8:	46 01       	movw	r8, r12
    c1ca:	57 01       	movw	r10, r14
    c1cc:	8c 15       	cp	r24, r12
    c1ce:	9d 05       	cpc	r25, r13
    c1d0:	ae 05       	cpc	r26, r14
    c1d2:	bf 05       	cpc	r27, r15
    c1d4:	10 f4       	brcc	.+4      	; 0xc1da <f_lseek+0x198>
    c1d6:	4c 01       	movw	r8, r24
    c1d8:	5d 01       	movw	r10, r26
    c1da:	f1 01       	movw	r30, r2
    c1dc:	80 8a       	std	Z+16, r8	; 0x10
    c1de:	91 8a       	std	Z+17, r9	; 0x11
    c1e0:	a2 8a       	std	Z+18, r10	; 0x12
    c1e2:	b3 8a       	std	Z+19, r11	; 0x13
    c1e4:	81 14       	cp	r8, r1
    c1e6:	91 04       	cpc	r9, r1
    c1e8:	a1 04       	cpc	r10, r1
    c1ea:	b1 04       	cpc	r11, r1
    c1ec:	09 f4       	brne	.+2      	; 0xc1f0 <f_lseek+0x1ae>
    c1ee:	d6 c1       	rjmp	.+940    	; 0xc59c <f_lseek+0x55a>
    c1f0:	24 01       	movw	r4, r8
    c1f2:	35 01       	movw	r6, r10
    c1f4:	f1 e0       	ldi	r31, 0x01	; 1
    c1f6:	4f 1a       	sub	r4, r31
    c1f8:	51 08       	sbc	r5, r1
    c1fa:	61 08       	sbc	r6, r1
    c1fc:	71 08       	sbc	r7, r1
    c1fe:	b3 01       	movw	r22, r6
    c200:	a2 01       	movw	r20, r4
    c202:	c1 01       	movw	r24, r2
    c204:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <clmt_clust>
    c208:	ab 01       	movw	r20, r22
    c20a:	bc 01       	movw	r22, r24
    c20c:	f1 01       	movw	r30, r2
    c20e:	44 8b       	std	Z+20, r20	; 0x14
    c210:	55 8b       	std	Z+21, r21	; 0x15
    c212:	66 8b       	std	Z+22, r22	; 0x16
    c214:	77 8b       	std	Z+23, r23	; 0x17
    c216:	e9 80       	ldd	r14, Y+1	; 0x01
    c218:	fa 80       	ldd	r15, Y+2	; 0x02
    c21a:	c7 01       	movw	r24, r14
    c21c:	0e 94 04 47 	call	0x8e08	; 0x8e08 <clst2sect>
    c220:	61 15       	cp	r22, r1
    c222:	71 05       	cpc	r23, r1
    c224:	81 05       	cpc	r24, r1
    c226:	91 05       	cpc	r25, r1
    c228:	09 f4       	brne	.+2      	; 0xc22c <f_lseek+0x1ea>
    c22a:	69 cf       	rjmp	.-302    	; 0xc0fe <f_lseek+0xbc>
    c22c:	95 01       	movw	r18, r10
    c22e:	84 01       	movw	r16, r8
    c230:	11 70       	andi	r17, 0x01	; 1
    c232:	22 27       	eor	r18, r18
    c234:	33 27       	eor	r19, r19
    c236:	01 15       	cp	r16, r1
    c238:	11 05       	cpc	r17, r1
    c23a:	21 05       	cpc	r18, r1
    c23c:	31 05       	cpc	r19, r1
    c23e:	09 f4       	brne	.+2      	; 0xc242 <f_lseek+0x200>
    c240:	ad c1       	rjmp	.+858    	; 0xc59c <f_lseek+0x55a>
    c242:	f7 01       	movw	r30, r14
    c244:	81 84       	ldd	r8, Z+9	; 0x09
    c246:	92 84       	ldd	r9, Z+10	; 0x0a
    c248:	f1 e0       	ldi	r31, 0x01	; 1
    c24a:	8f 1a       	sub	r8, r31
    c24c:	91 08       	sbc	r9, r1
    c24e:	a1 2c       	mov	r10, r1
    c250:	b1 2c       	mov	r11, r1
    c252:	49 e0       	ldi	r20, 0x09	; 9
    c254:	76 94       	lsr	r7
    c256:	67 94       	ror	r6
    c258:	57 94       	ror	r5
    c25a:	47 94       	ror	r4
    c25c:	4a 95       	dec	r20
    c25e:	d1 f7       	brne	.-12     	; 0xc254 <f_lseek+0x212>
    c260:	48 20       	and	r4, r8
    c262:	59 20       	and	r5, r9
    c264:	6a 20       	and	r6, r10
    c266:	7b 20       	and	r7, r11
    c268:	53 01       	movw	r10, r6
    c26a:	42 01       	movw	r8, r4
    c26c:	86 0e       	add	r8, r22
    c26e:	97 1e       	adc	r9, r23
    c270:	a8 1e       	adc	r10, r24
    c272:	b9 1e       	adc	r11, r25
    c274:	f1 01       	movw	r30, r2
    c276:	20 8d       	ldd	r18, Z+24	; 0x18
    c278:	31 8d       	ldd	r19, Z+25	; 0x19
    c27a:	42 8d       	ldd	r20, Z+26	; 0x1a
    c27c:	53 8d       	ldd	r21, Z+27	; 0x1b
    c27e:	82 16       	cp	r8, r18
    c280:	93 06       	cpc	r9, r19
    c282:	a4 06       	cpc	r10, r20
    c284:	b5 06       	cpc	r11, r21
    c286:	09 f4       	brne	.+2      	; 0xc28a <f_lseek+0x248>
    c288:	89 c1       	rjmp	.+786    	; 0xc59c <f_lseek+0x55a>
    c28a:	86 85       	ldd	r24, Z+14	; 0x0e
    c28c:	b1 01       	movw	r22, r2
    c28e:	6c 5d       	subi	r22, 0xDC	; 220
    c290:	7f 4f       	sbci	r23, 0xFF	; 255
    c292:	6b 01       	movw	r12, r22
    c294:	87 ff       	sbrs	r24, 7
    c296:	0d c0       	rjmp	.+26     	; 0xc2b2 <f_lseek+0x270>
    c298:	01 e0       	ldi	r16, 0x01	; 1
    c29a:	10 e0       	ldi	r17, 0x00	; 0
    c29c:	f7 01       	movw	r30, r14
    c29e:	81 81       	ldd	r24, Z+1	; 0x01
    c2a0:	0e 94 7f 69 	call	0xd2fe	; 0xd2fe <disk_write>
    c2a4:	89 2b       	or	r24, r25
    c2a6:	09 f0       	breq	.+2      	; 0xc2aa <f_lseek+0x268>
    c2a8:	32 cf       	rjmp	.-412    	; 0xc10e <f_lseek+0xcc>
    c2aa:	f1 01       	movw	r30, r2
    c2ac:	86 85       	ldd	r24, Z+14	; 0x0e
    c2ae:	8f 77       	andi	r24, 0x7F	; 127
    c2b0:	86 87       	std	Z+14, r24	; 0x0e
    c2b2:	e9 81       	ldd	r30, Y+1	; 0x01
    c2b4:	fa 81       	ldd	r31, Y+2	; 0x02
    c2b6:	01 e0       	ldi	r16, 0x01	; 1
    c2b8:	10 e0       	ldi	r17, 0x00	; 0
    c2ba:	a5 01       	movw	r20, r10
    c2bc:	94 01       	movw	r18, r8
    c2be:	b6 01       	movw	r22, r12
    c2c0:	81 81       	ldd	r24, Z+1	; 0x01
    c2c2:	0e 94 6f 69 	call	0xd2de	; 0xd2de <disk_read>
    c2c6:	89 2b       	or	r24, r25
    c2c8:	09 f0       	breq	.+2      	; 0xc2cc <f_lseek+0x28a>
    c2ca:	21 cf       	rjmp	.-446    	; 0xc10e <f_lseek+0xcc>
    c2cc:	f1 01       	movw	r30, r2
    c2ce:	80 8e       	std	Z+24, r8	; 0x18
    c2d0:	91 8e       	std	Z+25, r9	; 0x19
    c2d2:	a2 8e       	std	Z+26, r10	; 0x1a
    c2d4:	b3 8e       	std	Z+27, r11	; 0x1b
    c2d6:	62 c1       	rjmp	.+708    	; 0xc59c <f_lseek+0x55a>
    c2d8:	f1 01       	movw	r30, r2
    c2da:	82 85       	ldd	r24, Z+10	; 0x0a
    c2dc:	93 85       	ldd	r25, Z+11	; 0x0b
    c2de:	a4 85       	ldd	r26, Z+12	; 0x0c
    c2e0:	b5 85       	ldd	r27, Z+13	; 0x0d
    c2e2:	8c 15       	cp	r24, r12
    c2e4:	9d 05       	cpc	r25, r13
    c2e6:	ae 05       	cpc	r26, r14
    c2e8:	bf 05       	cpc	r27, r15
    c2ea:	28 f4       	brcc	.+10     	; 0xc2f6 <f_lseek+0x2b4>
    c2ec:	26 85       	ldd	r18, Z+14	; 0x0e
    c2ee:	21 fd       	sbrc	r18, 1
    c2f0:	02 c0       	rjmp	.+4      	; 0xc2f6 <f_lseek+0x2b4>
    c2f2:	6c 01       	movw	r12, r24
    c2f4:	7d 01       	movw	r14, r26
    c2f6:	f1 01       	movw	r30, r2
    c2f8:	40 88       	ldd	r4, Z+16	; 0x10
    c2fa:	51 88       	ldd	r5, Z+17	; 0x11
    c2fc:	62 88       	ldd	r6, Z+18	; 0x12
    c2fe:	73 88       	ldd	r7, Z+19	; 0x13
    c300:	10 8a       	std	Z+16, r1	; 0x10
    c302:	11 8a       	std	Z+17, r1	; 0x11
    c304:	12 8a       	std	Z+18, r1	; 0x12
    c306:	13 8a       	std	Z+19, r1	; 0x13
    c308:	c1 14       	cp	r12, r1
    c30a:	d1 04       	cpc	r13, r1
    c30c:	e1 04       	cpc	r14, r1
    c30e:	f1 04       	cpc	r15, r1
    c310:	09 f4       	brne	.+2      	; 0xc314 <f_lseek+0x2d2>
    c312:	48 c1       	rjmp	.+656    	; 0xc5a4 <f_lseek+0x562>
    c314:	e9 81       	ldd	r30, Y+1	; 0x01
    c316:	fa 81       	ldd	r31, Y+2	; 0x02
    c318:	81 84       	ldd	r8, Z+9	; 0x09
    c31a:	92 84       	ldd	r9, Z+10	; 0x0a
    c31c:	a1 2c       	mov	r10, r1
    c31e:	b1 2c       	mov	r11, r1
    c320:	39 e0       	ldi	r19, 0x09	; 9
    c322:	88 0c       	add	r8, r8
    c324:	99 1c       	adc	r9, r9
    c326:	aa 1c       	adc	r10, r10
    c328:	bb 1c       	adc	r11, r11
    c32a:	3a 95       	dec	r19
    c32c:	d1 f7       	brne	.-12     	; 0xc322 <f_lseek+0x2e0>
    c32e:	41 14       	cp	r4, r1
    c330:	51 04       	cpc	r5, r1
    c332:	61 04       	cpc	r6, r1
    c334:	71 04       	cpc	r7, r1
    c336:	d9 f1       	breq	.+118    	; 0xc3ae <f_lseek+0x36c>
    c338:	f1 e0       	ldi	r31, 0x01	; 1
    c33a:	4f 1a       	sub	r4, r31
    c33c:	51 08       	sbc	r5, r1
    c33e:	61 08       	sbc	r6, r1
    c340:	71 08       	sbc	r7, r1
    c342:	c7 01       	movw	r24, r14
    c344:	b6 01       	movw	r22, r12
    c346:	61 50       	subi	r22, 0x01	; 1
    c348:	71 09       	sbc	r23, r1
    c34a:	81 09       	sbc	r24, r1
    c34c:	91 09       	sbc	r25, r1
    c34e:	a5 01       	movw	r20, r10
    c350:	94 01       	movw	r18, r8
    c352:	0e 94 71 df 	call	0x1bee2	; 0x1bee2 <__udivmodsi4>
    c356:	2b 83       	std	Y+3, r18	; 0x03
    c358:	3c 83       	std	Y+4, r19	; 0x04
    c35a:	4d 83       	std	Y+5, r20	; 0x05
    c35c:	5e 83       	std	Y+6, r21	; 0x06
    c35e:	c3 01       	movw	r24, r6
    c360:	b2 01       	movw	r22, r4
    c362:	a5 01       	movw	r20, r10
    c364:	94 01       	movw	r18, r8
    c366:	0e 94 71 df 	call	0x1bee2	; 0x1bee2 <__udivmodsi4>
    c36a:	6b 81       	ldd	r22, Y+3	; 0x03
    c36c:	7c 81       	ldd	r23, Y+4	; 0x04
    c36e:	8d 81       	ldd	r24, Y+5	; 0x05
    c370:	9e 81       	ldd	r25, Y+6	; 0x06
    c372:	62 17       	cp	r22, r18
    c374:	73 07       	cpc	r23, r19
    c376:	84 07       	cpc	r24, r20
    c378:	95 07       	cpc	r25, r21
    c37a:	c8 f0       	brcs	.+50     	; 0xc3ae <f_lseek+0x36c>
    c37c:	88 27       	eor	r24, r24
    c37e:	99 27       	eor	r25, r25
    c380:	dc 01       	movw	r26, r24
    c382:	88 19       	sub	r24, r8
    c384:	99 09       	sbc	r25, r9
    c386:	aa 09       	sbc	r26, r10
    c388:	bb 09       	sbc	r27, r11
    c38a:	48 22       	and	r4, r24
    c38c:	59 22       	and	r5, r25
    c38e:	6a 22       	and	r6, r26
    c390:	7b 22       	and	r7, r27
    c392:	f1 01       	movw	r30, r2
    c394:	40 8a       	std	Z+16, r4	; 0x10
    c396:	51 8a       	std	Z+17, r5	; 0x11
    c398:	62 8a       	std	Z+18, r6	; 0x12
    c39a:	73 8a       	std	Z+19, r7	; 0x13
    c39c:	c4 18       	sub	r12, r4
    c39e:	d5 08       	sbc	r13, r5
    c3a0:	e6 08       	sbc	r14, r6
    c3a2:	f7 08       	sbc	r15, r7
    c3a4:	44 89       	ldd	r20, Z+20	; 0x14
    c3a6:	55 89       	ldd	r21, Z+21	; 0x15
    c3a8:	66 89       	ldd	r22, Z+22	; 0x16
    c3aa:	77 89       	ldd	r23, Z+23	; 0x17
    c3ac:	29 c0       	rjmp	.+82     	; 0xc400 <f_lseek+0x3be>
    c3ae:	f1 01       	movw	r30, r2
    c3b0:	46 81       	ldd	r20, Z+6	; 0x06
    c3b2:	57 81       	ldd	r21, Z+7	; 0x07
    c3b4:	60 85       	ldd	r22, Z+8	; 0x08
    c3b6:	71 85       	ldd	r23, Z+9	; 0x09
    c3b8:	41 15       	cp	r20, r1
    c3ba:	51 05       	cpc	r21, r1
    c3bc:	61 05       	cpc	r22, r1
    c3be:	71 05       	cpc	r23, r1
    c3c0:	d1 f4       	brne	.+52     	; 0xc3f6 <f_lseek+0x3b4>
    c3c2:	40 e0       	ldi	r20, 0x00	; 0
    c3c4:	50 e0       	ldi	r21, 0x00	; 0
    c3c6:	ba 01       	movw	r22, r20
    c3c8:	c1 01       	movw	r24, r2
    c3ca:	0e 94 6b 50 	call	0xa0d6	; 0xa0d6 <create_chain>
    c3ce:	ab 01       	movw	r20, r22
    c3d0:	bc 01       	movw	r22, r24
    c3d2:	41 30       	cpi	r20, 0x01	; 1
    c3d4:	51 05       	cpc	r21, r1
    c3d6:	61 05       	cpc	r22, r1
    c3d8:	71 05       	cpc	r23, r1
    c3da:	09 f4       	brne	.+2      	; 0xc3de <f_lseek+0x39c>
    c3dc:	90 ce       	rjmp	.-736    	; 0xc0fe <f_lseek+0xbc>
    c3de:	4f 3f       	cpi	r20, 0xFF	; 255
    c3e0:	ff ef       	ldi	r31, 0xFF	; 255
    c3e2:	5f 07       	cpc	r21, r31
    c3e4:	6f 07       	cpc	r22, r31
    c3e6:	7f 07       	cpc	r23, r31
    c3e8:	09 f4       	brne	.+2      	; 0xc3ec <f_lseek+0x3aa>
    c3ea:	91 ce       	rjmp	.-734    	; 0xc10e <f_lseek+0xcc>
    c3ec:	f1 01       	movw	r30, r2
    c3ee:	46 83       	std	Z+6, r20	; 0x06
    c3f0:	57 83       	std	Z+7, r21	; 0x07
    c3f2:	60 87       	std	Z+8, r22	; 0x08
    c3f4:	71 87       	std	Z+9, r23	; 0x09
    c3f6:	f1 01       	movw	r30, r2
    c3f8:	44 8b       	std	Z+20, r20	; 0x14
    c3fa:	55 8b       	std	Z+21, r21	; 0x15
    c3fc:	66 8b       	std	Z+22, r22	; 0x16
    c3fe:	77 8b       	std	Z+23, r23	; 0x17
    c400:	41 15       	cp	r20, r1
    c402:	51 05       	cpc	r21, r1
    c404:	61 05       	cpc	r22, r1
    c406:	71 05       	cpc	r23, r1
    c408:	09 f0       	breq	.+2      	; 0xc40c <f_lseek+0x3ca>
    c40a:	40 c0       	rjmp	.+128    	; 0xc48c <f_lseek+0x44a>
    c40c:	c1 2c       	mov	r12, r1
    c40e:	d1 2c       	mov	r13, r1
    c410:	76 01       	movw	r14, r12
    c412:	79 c0       	rjmp	.+242    	; 0xc506 <f_lseek+0x4c4>
    c414:	c8 18       	sub	r12, r8
    c416:	d9 08       	sbc	r13, r9
    c418:	ea 08       	sbc	r14, r10
    c41a:	fb 08       	sbc	r15, r11
    c41c:	f1 01       	movw	r30, r2
    c41e:	80 89       	ldd	r24, Z+16	; 0x10
    c420:	91 89       	ldd	r25, Z+17	; 0x11
    c422:	a2 89       	ldd	r26, Z+18	; 0x12
    c424:	b3 89       	ldd	r27, Z+19	; 0x13
    c426:	88 0d       	add	r24, r8
    c428:	99 1d       	adc	r25, r9
    c42a:	aa 1d       	adc	r26, r10
    c42c:	bb 1d       	adc	r27, r11
    c42e:	80 8b       	std	Z+16, r24	; 0x10
    c430:	91 8b       	std	Z+17, r25	; 0x11
    c432:	a2 8b       	std	Z+18, r26	; 0x12
    c434:	b3 8b       	std	Z+19, r27	; 0x13
    c436:	86 85       	ldd	r24, Z+14	; 0x0e
    c438:	81 ff       	sbrs	r24, 1
    c43a:	2f c0       	rjmp	.+94     	; 0xc49a <f_lseek+0x458>
    c43c:	c1 01       	movw	r24, r2
    c43e:	0e 94 6b 50 	call	0xa0d6	; 0xa0d6 <create_chain>
    c442:	ab 01       	movw	r20, r22
    c444:	bc 01       	movw	r22, r24
    c446:	41 15       	cp	r20, r1
    c448:	51 05       	cpc	r21, r1
    c44a:	61 05       	cpc	r22, r1
    c44c:	71 05       	cpc	r23, r1
    c44e:	61 f1       	breq	.+88     	; 0xc4a8 <f_lseek+0x466>
    c450:	4f 3f       	cpi	r20, 0xFF	; 255
    c452:	bf ef       	ldi	r27, 0xFF	; 255
    c454:	5b 07       	cpc	r21, r27
    c456:	6b 07       	cpc	r22, r27
    c458:	7b 07       	cpc	r23, r27
    c45a:	09 f4       	brne	.+2      	; 0xc45e <f_lseek+0x41c>
    c45c:	58 ce       	rjmp	.-848    	; 0xc10e <f_lseek+0xcc>
    c45e:	42 30       	cpi	r20, 0x02	; 2
    c460:	51 05       	cpc	r21, r1
    c462:	61 05       	cpc	r22, r1
    c464:	71 05       	cpc	r23, r1
    c466:	08 f4       	brcc	.+2      	; 0xc46a <f_lseek+0x428>
    c468:	4a ce       	rjmp	.-876    	; 0xc0fe <f_lseek+0xbc>
    c46a:	e9 81       	ldd	r30, Y+1	; 0x01
    c46c:	fa 81       	ldd	r31, Y+2	; 0x02
    c46e:	81 8d       	ldd	r24, Z+25	; 0x19
    c470:	92 8d       	ldd	r25, Z+26	; 0x1a
    c472:	a3 8d       	ldd	r26, Z+27	; 0x1b
    c474:	b4 8d       	ldd	r27, Z+28	; 0x1c
    c476:	48 17       	cp	r20, r24
    c478:	59 07       	cpc	r21, r25
    c47a:	6a 07       	cpc	r22, r26
    c47c:	7b 07       	cpc	r23, r27
    c47e:	08 f0       	brcs	.+2      	; 0xc482 <f_lseek+0x440>
    c480:	3e ce       	rjmp	.-900    	; 0xc0fe <f_lseek+0xbc>
    c482:	f1 01       	movw	r30, r2
    c484:	44 8b       	std	Z+20, r20	; 0x14
    c486:	55 8b       	std	Z+21, r21	; 0x15
    c488:	66 8b       	std	Z+22, r22	; 0x16
    c48a:	77 8b       	std	Z+23, r23	; 0x17
    c48c:	8c 14       	cp	r8, r12
    c48e:	9d 04       	cpc	r9, r13
    c490:	ae 04       	cpc	r10, r14
    c492:	bf 04       	cpc	r11, r15
    c494:	08 f4       	brcc	.+2      	; 0xc498 <f_lseek+0x456>
    c496:	be cf       	rjmp	.-132    	; 0xc414 <f_lseek+0x3d2>
    c498:	0a c0       	rjmp	.+20     	; 0xc4ae <f_lseek+0x46c>
    c49a:	80 81       	ld	r24, Z
    c49c:	91 81       	ldd	r25, Z+1	; 0x01
    c49e:	0e 94 f6 4e 	call	0x9dec	; 0x9dec <get_fat.isra.10>
    c4a2:	ab 01       	movw	r20, r22
    c4a4:	bc 01       	movw	r22, r24
    c4a6:	d4 cf       	rjmp	.-88     	; 0xc450 <f_lseek+0x40e>
    c4a8:	c1 2c       	mov	r12, r1
    c4aa:	d1 2c       	mov	r13, r1
    c4ac:	76 01       	movw	r14, r12
    c4ae:	f1 01       	movw	r30, r2
    c4b0:	80 89       	ldd	r24, Z+16	; 0x10
    c4b2:	91 89       	ldd	r25, Z+17	; 0x11
    c4b4:	a2 89       	ldd	r26, Z+18	; 0x12
    c4b6:	b3 89       	ldd	r27, Z+19	; 0x13
    c4b8:	8c 0d       	add	r24, r12
    c4ba:	9d 1d       	adc	r25, r13
    c4bc:	ae 1d       	adc	r26, r14
    c4be:	bf 1d       	adc	r27, r15
    c4c0:	80 8b       	std	Z+16, r24	; 0x10
    c4c2:	91 8b       	std	Z+17, r25	; 0x11
    c4c4:	a2 8b       	std	Z+18, r26	; 0x12
    c4c6:	b3 8b       	std	Z+19, r27	; 0x13
    c4c8:	d7 01       	movw	r26, r14
    c4ca:	c6 01       	movw	r24, r12
    c4cc:	91 70       	andi	r25, 0x01	; 1
    c4ce:	aa 27       	eor	r26, r26
    c4d0:	bb 27       	eor	r27, r27
    c4d2:	89 2b       	or	r24, r25
    c4d4:	8a 2b       	or	r24, r26
    c4d6:	8b 2b       	or	r24, r27
    c4d8:	09 f4       	brne	.+2      	; 0xc4dc <f_lseek+0x49a>
    c4da:	98 cf       	rjmp	.-208    	; 0xc40c <f_lseek+0x3ca>
    c4dc:	89 81       	ldd	r24, Y+1	; 0x01
    c4de:	9a 81       	ldd	r25, Y+2	; 0x02
    c4e0:	0e 94 04 47 	call	0x8e08	; 0x8e08 <clst2sect>
    c4e4:	61 15       	cp	r22, r1
    c4e6:	71 05       	cpc	r23, r1
    c4e8:	81 05       	cpc	r24, r1
    c4ea:	91 05       	cpc	r25, r1
    c4ec:	09 f4       	brne	.+2      	; 0xc4f0 <f_lseek+0x4ae>
    c4ee:	07 ce       	rjmp	.-1010   	; 0xc0fe <f_lseek+0xbc>
    c4f0:	29 e0       	ldi	r18, 0x09	; 9
    c4f2:	f6 94       	lsr	r15
    c4f4:	e7 94       	ror	r14
    c4f6:	d7 94       	ror	r13
    c4f8:	c7 94       	ror	r12
    c4fa:	2a 95       	dec	r18
    c4fc:	d1 f7       	brne	.-12     	; 0xc4f2 <f_lseek+0x4b0>
    c4fe:	c6 0e       	add	r12, r22
    c500:	d7 1e       	adc	r13, r23
    c502:	e8 1e       	adc	r14, r24
    c504:	f9 1e       	adc	r15, r25
    c506:	f1 01       	movw	r30, r2
    c508:	80 89       	ldd	r24, Z+16	; 0x10
    c50a:	91 89       	ldd	r25, Z+17	; 0x11
    c50c:	a2 89       	ldd	r26, Z+18	; 0x12
    c50e:	b3 89       	ldd	r27, Z+19	; 0x13
    c510:	42 85       	ldd	r20, Z+10	; 0x0a
    c512:	53 85       	ldd	r21, Z+11	; 0x0b
    c514:	64 85       	ldd	r22, Z+12	; 0x0c
    c516:	75 85       	ldd	r23, Z+13	; 0x0d
    c518:	48 17       	cp	r20, r24
    c51a:	59 07       	cpc	r21, r25
    c51c:	6a 07       	cpc	r22, r26
    c51e:	7b 07       	cpc	r23, r27
    c520:	38 f4       	brcc	.+14     	; 0xc530 <f_lseek+0x4ee>
    c522:	82 87       	std	Z+10, r24	; 0x0a
    c524:	93 87       	std	Z+11, r25	; 0x0b
    c526:	a4 87       	std	Z+12, r26	; 0x0c
    c528:	b5 87       	std	Z+13, r27	; 0x0d
    c52a:	26 85       	ldd	r18, Z+14	; 0x0e
    c52c:	20 64       	ori	r18, 0x40	; 64
    c52e:	26 87       	std	Z+14, r18	; 0x0e
    c530:	91 70       	andi	r25, 0x01	; 1
    c532:	aa 27       	eor	r26, r26
    c534:	bb 27       	eor	r27, r27
    c536:	89 2b       	or	r24, r25
    c538:	8a 2b       	or	r24, r26
    c53a:	8b 2b       	or	r24, r27
    c53c:	79 f1       	breq	.+94     	; 0xc59c <f_lseek+0x55a>
    c53e:	f1 01       	movw	r30, r2
    c540:	20 8d       	ldd	r18, Z+24	; 0x18
    c542:	31 8d       	ldd	r19, Z+25	; 0x19
    c544:	42 8d       	ldd	r20, Z+26	; 0x1a
    c546:	53 8d       	ldd	r21, Z+27	; 0x1b
    c548:	2c 15       	cp	r18, r12
    c54a:	3d 05       	cpc	r19, r13
    c54c:	4e 05       	cpc	r20, r14
    c54e:	5f 05       	cpc	r21, r15
    c550:	29 f1       	breq	.+74     	; 0xc59c <f_lseek+0x55a>
    c552:	86 85       	ldd	r24, Z+14	; 0x0e
    c554:	b1 01       	movw	r22, r2
    c556:	6c 5d       	subi	r22, 0xDC	; 220
    c558:	7f 4f       	sbci	r23, 0xFF	; 255
    c55a:	5b 01       	movw	r10, r22
    c55c:	87 ff       	sbrs	r24, 7
    c55e:	0d c0       	rjmp	.+26     	; 0xc57a <f_lseek+0x538>
    c560:	e9 81       	ldd	r30, Y+1	; 0x01
    c562:	fa 81       	ldd	r31, Y+2	; 0x02
    c564:	01 e0       	ldi	r16, 0x01	; 1
    c566:	10 e0       	ldi	r17, 0x00	; 0
    c568:	81 81       	ldd	r24, Z+1	; 0x01
    c56a:	c9 d6       	rcall	.+3474   	; 0xd2fe <disk_write>
    c56c:	89 2b       	or	r24, r25
    c56e:	09 f0       	breq	.+2      	; 0xc572 <f_lseek+0x530>
    c570:	ce cd       	rjmp	.-1124   	; 0xc10e <f_lseek+0xcc>
    c572:	f1 01       	movw	r30, r2
    c574:	86 85       	ldd	r24, Z+14	; 0x0e
    c576:	8f 77       	andi	r24, 0x7F	; 127
    c578:	86 87       	std	Z+14, r24	; 0x0e
    c57a:	e9 81       	ldd	r30, Y+1	; 0x01
    c57c:	fa 81       	ldd	r31, Y+2	; 0x02
    c57e:	01 e0       	ldi	r16, 0x01	; 1
    c580:	10 e0       	ldi	r17, 0x00	; 0
    c582:	a7 01       	movw	r20, r14
    c584:	96 01       	movw	r18, r12
    c586:	b5 01       	movw	r22, r10
    c588:	81 81       	ldd	r24, Z+1	; 0x01
    c58a:	a9 d6       	rcall	.+3410   	; 0xd2de <disk_read>
    c58c:	89 2b       	or	r24, r25
    c58e:	09 f0       	breq	.+2      	; 0xc592 <f_lseek+0x550>
    c590:	be cd       	rjmp	.-1156   	; 0xc10e <f_lseek+0xcc>
    c592:	f1 01       	movw	r30, r2
    c594:	c0 8e       	std	Z+24, r12	; 0x18
    c596:	d1 8e       	std	Z+25, r13	; 0x19
    c598:	e2 8e       	std	Z+26, r14	; 0x1a
    c59a:	f3 8e       	std	Z+27, r15	; 0x1b
    c59c:	80 e0       	ldi	r24, 0x00	; 0
    c59e:	ba cd       	rjmp	.-1164   	; 0xc114 <f_lseek+0xd2>
    c5a0:	81 e1       	ldi	r24, 0x11	; 17
    c5a2:	b8 cd       	rjmp	.-1168   	; 0xc114 <f_lseek+0xd2>
    c5a4:	80 e0       	ldi	r24, 0x00	; 0
    c5a6:	90 e0       	ldi	r25, 0x00	; 0
    c5a8:	dc 01       	movw	r26, r24
    c5aa:	c1 2c       	mov	r12, r1
    c5ac:	d1 2c       	mov	r13, r1
    c5ae:	76 01       	movw	r14, r12
    c5b0:	bf cf       	rjmp	.-130    	; 0xc530 <f_lseek+0x4ee>
    c5b2:	2a 96       	adiw	r28, 0x0a	; 10
    c5b4:	e2 e1       	ldi	r30, 0x12	; 18
    c5b6:	0c 94 fa df 	jmp	0x1bff4	; 0x1bff4 <__epilogue_restores__>

0000c5ba <f_opendir>:
    c5ba:	a4 e0       	ldi	r26, 0x04	; 4
    c5bc:	b0 e0       	ldi	r27, 0x00	; 0
    c5be:	e3 ee       	ldi	r30, 0xE3	; 227
    c5c0:	f2 e6       	ldi	r31, 0x62	; 98
    c5c2:	0c 94 e8 df 	jmp	0x1bfd0	; 0x1bfd0 <__prologue_saves__+0x14>
    c5c6:	7c 83       	std	Y+4, r23	; 0x04
    c5c8:	6b 83       	std	Y+3, r22	; 0x03
    c5ca:	00 97       	sbiw	r24, 0x00	; 0
    c5cc:	09 f4       	brne	.+2      	; 0xc5d0 <f_opendir+0x16>
    c5ce:	48 c0       	rjmp	.+144    	; 0xc660 <f_opendir+0xa6>
    c5d0:	8c 01       	movw	r16, r24
    c5d2:	40 e0       	ldi	r20, 0x00	; 0
    c5d4:	be 01       	movw	r22, r28
    c5d6:	6f 5f       	subi	r22, 0xFF	; 255
    c5d8:	7f 4f       	sbci	r23, 0xFF	; 255
    c5da:	ce 01       	movw	r24, r28
    c5dc:	03 96       	adiw	r24, 0x03	; 3
    c5de:	0e 94 a1 4b 	call	0x9742	; 0x9742 <mount_volume>
    c5e2:	7c 01       	movw	r14, r24
    c5e4:	89 2b       	or	r24, r25
    c5e6:	b9 f5       	brne	.+110    	; 0xc656 <f_opendir+0x9c>
    c5e8:	89 81       	ldd	r24, Y+1	; 0x01
    c5ea:	9a 81       	ldd	r25, Y+2	; 0x02
    c5ec:	f8 01       	movw	r30, r16
    c5ee:	91 83       	std	Z+1, r25	; 0x01
    c5f0:	80 83       	st	Z, r24
    c5f2:	80 e0       	ldi	r24, 0x00	; 0
    c5f4:	92 e0       	ldi	r25, 0x02	; 2
    c5f6:	b7 d5       	rcall	.+2926   	; 0xd166 <ff_memalloc>
    c5f8:	6c 01       	movw	r12, r24
    c5fa:	00 97       	sbiw	r24, 0x00	; 0
    c5fc:	99 f1       	breq	.+102    	; 0xc664 <f_opendir+0xaa>
    c5fe:	e9 81       	ldd	r30, Y+1	; 0x01
    c600:	fa 81       	ldd	r31, Y+2	; 0x02
    c602:	94 87       	std	Z+12, r25	; 0x0c
    c604:	83 87       	std	Z+11, r24	; 0x0b
    c606:	6b 81       	ldd	r22, Y+3	; 0x03
    c608:	7c 81       	ldd	r23, Y+4	; 0x04
    c60a:	c8 01       	movw	r24, r16
    c60c:	0e 94 f0 56 	call	0xade0	; 0xade0 <follow_path>
    c610:	7c 01       	movw	r14, r24
    c612:	89 2b       	or	r24, r25
    c614:	b9 f4       	brne	.+46     	; 0xc644 <f_opendir+0x8a>
    c616:	f8 01       	movw	r30, r16
    c618:	87 a1       	ldd	r24, Z+39	; 0x27
    c61a:	87 fd       	sbrc	r24, 7
    c61c:	28 c0       	rjmp	.+80     	; 0xc66e <f_opendir+0xb4>
    c61e:	84 81       	ldd	r24, Z+4	; 0x04
    c620:	84 ff       	sbrs	r24, 4
    c622:	0d c0       	rjmp	.+26     	; 0xc63e <f_opendir+0x84>
    c624:	62 8d       	ldd	r22, Z+26	; 0x1a
    c626:	73 8d       	ldd	r23, Z+27	; 0x1b
    c628:	e9 81       	ldd	r30, Y+1	; 0x01
    c62a:	fa 81       	ldd	r31, Y+2	; 0x02
    c62c:	80 81       	ld	r24, Z
    c62e:	0e 94 97 49 	call	0x932e	; 0x932e <ld_clust.isra.4>
    c632:	f8 01       	movw	r30, r16
    c634:	66 83       	std	Z+6, r22	; 0x06
    c636:	77 83       	std	Z+7, r23	; 0x07
    c638:	80 87       	std	Z+8, r24	; 0x08
    c63a:	91 87       	std	Z+9, r25	; 0x09
    c63c:	18 c0       	rjmp	.+48     	; 0xc66e <f_opendir+0xb4>
    c63e:	95 e0       	ldi	r25, 0x05	; 5
    c640:	e9 2e       	mov	r14, r25
    c642:	f1 2c       	mov	r15, r1
    c644:	c6 01       	movw	r24, r12
    c646:	92 d5       	rcall	.+2852   	; 0xd16c <ff_memfree>
    c648:	f4 e0       	ldi	r31, 0x04	; 4
    c64a:	ef 16       	cp	r14, r31
    c64c:	f1 04       	cpc	r15, r1
    c64e:	f1 f0       	breq	.+60     	; 0xc68c <f_opendir+0xd2>
    c650:	e1 14       	cp	r14, r1
    c652:	f1 04       	cpc	r15, r1
    c654:	49 f0       	breq	.+18     	; 0xc668 <f_opendir+0xae>
    c656:	f8 01       	movw	r30, r16
    c658:	11 82       	std	Z+1, r1	; 0x01
    c65a:	10 82       	st	Z, r1
    c65c:	c7 01       	movw	r24, r14
    c65e:	1a c0       	rjmp	.+52     	; 0xc694 <f_opendir+0xda>
    c660:	89 e0       	ldi	r24, 0x09	; 9
    c662:	03 c0       	rjmp	.+6      	; 0xc66a <f_opendir+0xb0>
    c664:	81 e1       	ldi	r24, 0x11	; 17
    c666:	01 c0       	rjmp	.+2      	; 0xc66a <f_opendir+0xb0>
    c668:	80 e0       	ldi	r24, 0x00	; 0
    c66a:	90 e0       	ldi	r25, 0x00	; 0
    c66c:	13 c0       	rjmp	.+38     	; 0xc694 <f_opendir+0xda>
    c66e:	e9 81       	ldd	r30, Y+1	; 0x01
    c670:	fa 81       	ldd	r31, Y+2	; 0x02
    c672:	85 81       	ldd	r24, Z+5	; 0x05
    c674:	96 81       	ldd	r25, Z+6	; 0x06
    c676:	f8 01       	movw	r30, r16
    c678:	93 83       	std	Z+3, r25	; 0x03
    c67a:	82 83       	std	Z+2, r24	; 0x02
    c67c:	40 e0       	ldi	r20, 0x00	; 0
    c67e:	50 e0       	ldi	r21, 0x00	; 0
    c680:	ba 01       	movw	r22, r20
    c682:	c8 01       	movw	r24, r16
    c684:	0e 94 aa 4f 	call	0x9f54	; 0x9f54 <dir_sdi>
    c688:	7c 01       	movw	r14, r24
    c68a:	dc cf       	rjmp	.-72     	; 0xc644 <f_opendir+0x8a>
    c68c:	85 e0       	ldi	r24, 0x05	; 5
    c68e:	e8 2e       	mov	r14, r24
    c690:	f1 2c       	mov	r15, r1
    c692:	e1 cf       	rjmp	.-62     	; 0xc656 <f_opendir+0x9c>
    c694:	24 96       	adiw	r28, 0x04	; 4
    c696:	e8 e0       	ldi	r30, 0x08	; 8
    c698:	0c 94 04 e0 	jmp	0x1c008	; 0x1c008 <__epilogue_restores__+0x14>

0000c69c <f_closedir>:
    c69c:	a2 e0       	ldi	r26, 0x02	; 2
    c69e:	b0 e0       	ldi	r27, 0x00	; 0
    c6a0:	e4 e5       	ldi	r30, 0x54	; 84
    c6a2:	f3 e6       	ldi	r31, 0x63	; 99
    c6a4:	0c 94 ec df 	jmp	0x1bfd8	; 0x1bfd8 <__prologue_saves__+0x1c>
    c6a8:	8c 01       	movw	r16, r24
    c6aa:	be 01       	movw	r22, r28
    c6ac:	6f 5f       	subi	r22, 0xFF	; 255
    c6ae:	7f 4f       	sbci	r23, 0xFF	; 255
    c6b0:	0e 94 a3 47 	call	0x8f46	; 0x8f46 <validate>
    c6b4:	00 97       	sbiw	r24, 0x00	; 0
    c6b6:	19 f4       	brne	.+6      	; 0xc6be <f_closedir+0x22>
    c6b8:	f8 01       	movw	r30, r16
    c6ba:	11 82       	std	Z+1, r1	; 0x01
    c6bc:	10 82       	st	Z, r1
    c6be:	22 96       	adiw	r28, 0x02	; 2
    c6c0:	e4 e0       	ldi	r30, 0x04	; 4
    c6c2:	0c 94 08 e0 	jmp	0x1c010	; 0x1c010 <__epilogue_restores__+0x1c>

0000c6c6 <f_readdir>:
    c6c6:	a2 e0       	ldi	r26, 0x02	; 2
    c6c8:	b0 e0       	ldi	r27, 0x00	; 0
    c6ca:	e9 e6       	ldi	r30, 0x69	; 105
    c6cc:	f3 e6       	ldi	r31, 0x63	; 99
    c6ce:	0c 94 e6 df 	jmp	0x1bfcc	; 0x1bfcc <__prologue_saves__+0x10>
    c6d2:	7c 01       	movw	r14, r24
    c6d4:	5b 01       	movw	r10, r22
    c6d6:	be 01       	movw	r22, r28
    c6d8:	6f 5f       	subi	r22, 0xFF	; 255
    c6da:	7f 4f       	sbci	r23, 0xFF	; 255
    c6dc:	0e 94 a3 47 	call	0x8f46	; 0x8f46 <validate>
    c6e0:	00 97       	sbiw	r24, 0x00	; 0
    c6e2:	89 f5       	brne	.+98     	; 0xc746 <f_readdir+0x80>
    c6e4:	a1 14       	cp	r10, r1
    c6e6:	b1 04       	cpc	r11, r1
    c6e8:	39 f4       	brne	.+14     	; 0xc6f8 <f_readdir+0x32>
    c6ea:	40 e0       	ldi	r20, 0x00	; 0
    c6ec:	50 e0       	ldi	r21, 0x00	; 0
    c6ee:	ba 01       	movw	r22, r20
    c6f0:	c7 01       	movw	r24, r14
    c6f2:	0e 94 aa 4f 	call	0x9f54	; 0x9f54 <dir_sdi>
    c6f6:	27 c0       	rjmp	.+78     	; 0xc746 <f_readdir+0x80>
    c6f8:	80 e0       	ldi	r24, 0x00	; 0
    c6fa:	92 e0       	ldi	r25, 0x02	; 2
    c6fc:	34 d5       	rcall	.+2664   	; 0xd166 <ff_memalloc>
    c6fe:	6c 01       	movw	r12, r24
    c700:	00 97       	sbiw	r24, 0x00	; 0
    c702:	f9 f0       	breq	.+62     	; 0xc742 <f_readdir+0x7c>
    c704:	e9 81       	ldd	r30, Y+1	; 0x01
    c706:	fa 81       	ldd	r31, Y+2	; 0x02
    c708:	94 87       	std	Z+12, r25	; 0x0c
    c70a:	83 87       	std	Z+11, r24	; 0x0b
    c70c:	60 e0       	ldi	r22, 0x00	; 0
    c70e:	70 e0       	ldi	r23, 0x00	; 0
    c710:	c7 01       	movw	r24, r14
    c712:	0e 94 43 53 	call	0xa686	; 0xa686 <dir_read>
    c716:	8c 01       	movw	r16, r24
    c718:	8b 7f       	andi	r24, 0xFB	; 251
    c71a:	89 2b       	or	r24, r25
    c71c:	71 f4       	brne	.+28     	; 0xc73a <f_readdir+0x74>
    c71e:	b5 01       	movw	r22, r10
    c720:	c7 01       	movw	r24, r14
    c722:	0e 94 87 48 	call	0x910e	; 0x910e <get_fileinfo>
    c726:	60 e0       	ldi	r22, 0x00	; 0
    c728:	70 e0       	ldi	r23, 0x00	; 0
    c72a:	c7 01       	movw	r24, r14
    c72c:	0e 94 22 52 	call	0xa444	; 0xa444 <dir_next>
    c730:	8c 01       	movw	r16, r24
    c732:	04 97       	sbiw	r24, 0x04	; 4
    c734:	11 f4       	brne	.+4      	; 0xc73a <f_readdir+0x74>
    c736:	00 e0       	ldi	r16, 0x00	; 0
    c738:	10 e0       	ldi	r17, 0x00	; 0
    c73a:	c6 01       	movw	r24, r12
    c73c:	17 d5       	rcall	.+2606   	; 0xd16c <ff_memfree>
    c73e:	c8 01       	movw	r24, r16
    c740:	02 c0       	rjmp	.+4      	; 0xc746 <f_readdir+0x80>
    c742:	81 e1       	ldi	r24, 0x11	; 17
    c744:	90 e0       	ldi	r25, 0x00	; 0
    c746:	22 96       	adiw	r28, 0x02	; 2
    c748:	ea e0       	ldi	r30, 0x0A	; 10
    c74a:	0c 94 02 e0 	jmp	0x1c004	; 0x1c004 <__epilogue_restores__+0x10>

0000c74e <f_stat>:
    c74e:	a0 e3       	ldi	r26, 0x30	; 48
    c750:	b0 e0       	ldi	r27, 0x00	; 0
    c752:	ed ea       	ldi	r30, 0xAD	; 173
    c754:	f3 e6       	ldi	r31, 0x63	; 99
    c756:	0c 94 e8 df 	jmp	0x1bfd0	; 0x1bfd0 <__prologue_saves__+0x14>
    c75a:	98 ab       	std	Y+48, r25	; 0x30
    c75c:	8f a7       	std	Y+47, r24	; 0x2f
    c75e:	6b 01       	movw	r12, r22
    c760:	40 e0       	ldi	r20, 0x00	; 0
    c762:	be 01       	movw	r22, r28
    c764:	6f 5f       	subi	r22, 0xFF	; 255
    c766:	7f 4f       	sbci	r23, 0xFF	; 255
    c768:	ce 01       	movw	r24, r28
    c76a:	8f 96       	adiw	r24, 0x2f	; 47
    c76c:	0e 94 a1 4b 	call	0x9742	; 0x9742 <mount_volume>
    c770:	00 97       	sbiw	r24, 0x00	; 0
    c772:	39 f5       	brne	.+78     	; 0xc7c2 <f_stat+0x74>
    c774:	80 e0       	ldi	r24, 0x00	; 0
    c776:	92 e0       	ldi	r25, 0x02	; 2
    c778:	f6 d4       	rcall	.+2540   	; 0xd166 <ff_memalloc>
    c77a:	7c 01       	movw	r14, r24
    c77c:	00 97       	sbiw	r24, 0x00	; 0
    c77e:	f9 f0       	breq	.+62     	; 0xc7be <f_stat+0x70>
    c780:	e9 81       	ldd	r30, Y+1	; 0x01
    c782:	fa 81       	ldd	r31, Y+2	; 0x02
    c784:	94 87       	std	Z+12, r25	; 0x0c
    c786:	83 87       	std	Z+11, r24	; 0x0b
    c788:	6f a5       	ldd	r22, Y+47	; 0x2f
    c78a:	78 a9       	ldd	r23, Y+48	; 0x30
    c78c:	ce 01       	movw	r24, r28
    c78e:	01 96       	adiw	r24, 0x01	; 1
    c790:	0e 94 f0 56 	call	0xade0	; 0xade0 <follow_path>
    c794:	8c 01       	movw	r16, r24
    c796:	89 2b       	or	r24, r25
    c798:	71 f4       	brne	.+28     	; 0xc7b6 <f_stat+0x68>
    c79a:	88 a5       	ldd	r24, Y+40	; 0x28
    c79c:	87 fd       	sbrc	r24, 7
    c79e:	09 c0       	rjmp	.+18     	; 0xc7b2 <f_stat+0x64>
    c7a0:	c1 14       	cp	r12, r1
    c7a2:	d1 04       	cpc	r13, r1
    c7a4:	41 f0       	breq	.+16     	; 0xc7b6 <f_stat+0x68>
    c7a6:	b6 01       	movw	r22, r12
    c7a8:	ce 01       	movw	r24, r28
    c7aa:	01 96       	adiw	r24, 0x01	; 1
    c7ac:	0e 94 87 48 	call	0x910e	; 0x910e <get_fileinfo>
    c7b0:	02 c0       	rjmp	.+4      	; 0xc7b6 <f_stat+0x68>
    c7b2:	06 e0       	ldi	r16, 0x06	; 6
    c7b4:	10 e0       	ldi	r17, 0x00	; 0
    c7b6:	c7 01       	movw	r24, r14
    c7b8:	d9 d4       	rcall	.+2482   	; 0xd16c <ff_memfree>
    c7ba:	c8 01       	movw	r24, r16
    c7bc:	02 c0       	rjmp	.+4      	; 0xc7c2 <f_stat+0x74>
    c7be:	81 e1       	ldi	r24, 0x11	; 17
    c7c0:	90 e0       	ldi	r25, 0x00	; 0
    c7c2:	e0 96       	adiw	r28, 0x30	; 48
    c7c4:	e8 e0       	ldi	r30, 0x08	; 8
    c7c6:	0c 94 04 e0 	jmp	0x1c008	; 0x1c008 <__epilogue_restores__+0x14>

0000c7ca <f_getfree>:
    c7ca:	aa e0       	ldi	r26, 0x0A	; 10
    c7cc:	b0 e0       	ldi	r27, 0x00	; 0
    c7ce:	eb ee       	ldi	r30, 0xEB	; 235
    c7d0:	f3 e6       	ldi	r31, 0x63	; 99
    c7d2:	0c 94 de df 	jmp	0x1bfbc	; 0x1bfbc <__prologue_saves__>
    c7d6:	9c 83       	std	Y+4, r25	; 0x04
    c7d8:	8b 83       	std	Y+3, r24	; 0x03
    c7da:	7e 83       	std	Y+6, r23	; 0x06
    c7dc:	6d 83       	std	Y+5, r22	; 0x05
    c7de:	7a 01       	movw	r14, r20
    c7e0:	40 e0       	ldi	r20, 0x00	; 0
    c7e2:	be 01       	movw	r22, r28
    c7e4:	6f 5f       	subi	r22, 0xFF	; 255
    c7e6:	7f 4f       	sbci	r23, 0xFF	; 255
    c7e8:	ce 01       	movw	r24, r28
    c7ea:	03 96       	adiw	r24, 0x03	; 3
    c7ec:	0e 94 a1 4b 	call	0x9742	; 0x9742 <mount_volume>
    c7f0:	8c 01       	movw	r16, r24
    c7f2:	89 2b       	or	r24, r25
    c7f4:	09 f0       	breq	.+2      	; 0xc7f8 <f_getfree+0x2e>
    c7f6:	c4 c0       	rjmp	.+392    	; 0xc980 <f_getfree+0x1b6>
    c7f8:	69 80       	ldd	r6, Y+1	; 0x01
    c7fa:	7a 80       	ldd	r7, Y+2	; 0x02
    c7fc:	d7 01       	movw	r26, r14
    c7fe:	6d 92       	st	X+, r6
    c800:	7c 92       	st	X, r7
    c802:	f3 01       	movw	r30, r6
    c804:	81 89       	ldd	r24, Z+17	; 0x11
    c806:	92 89       	ldd	r25, Z+18	; 0x12
    c808:	a3 89       	ldd	r26, Z+19	; 0x13
    c80a:	b4 89       	ldd	r27, Z+20	; 0x14
    c80c:	81 8c       	ldd	r8, Z+25	; 0x19
    c80e:	92 8c       	ldd	r9, Z+26	; 0x1a
    c810:	a3 8c       	ldd	r10, Z+27	; 0x1b
    c812:	b4 8c       	ldd	r11, Z+28	; 0x1c
    c814:	b5 01       	movw	r22, r10
    c816:	a4 01       	movw	r20, r8
    c818:	42 50       	subi	r20, 0x02	; 2
    c81a:	51 09       	sbc	r21, r1
    c81c:	61 09       	sbc	r22, r1
    c81e:	71 09       	sbc	r23, r1
    c820:	48 17       	cp	r20, r24
    c822:	59 07       	cpc	r21, r25
    c824:	6a 07       	cpc	r22, r26
    c826:	7b 07       	cpc	r23, r27
    c828:	38 f0       	brcs	.+14     	; 0xc838 <f_getfree+0x6e>
    c82a:	ed 81       	ldd	r30, Y+5	; 0x05
    c82c:	fe 81       	ldd	r31, Y+6	; 0x06
    c82e:	80 83       	st	Z, r24
    c830:	91 83       	std	Z+1, r25	; 0x01
    c832:	a2 83       	std	Z+2, r26	; 0x02
    c834:	b3 83       	std	Z+3, r27	; 0x03
    c836:	a4 c0       	rjmp	.+328    	; 0xc980 <f_getfree+0x1b6>
    c838:	80 81       	ld	r24, Z
    c83a:	81 30       	cpi	r24, 0x01	; 1
    c83c:	a1 f5       	brne	.+104    	; 0xc8a6 <f_getfree+0xdc>
    c83e:	82 e0       	ldi	r24, 0x02	; 2
    c840:	88 2e       	mov	r8, r24
    c842:	91 2c       	mov	r9, r1
    c844:	a1 2c       	mov	r10, r1
    c846:	b1 2c       	mov	r11, r1
    c848:	c1 2c       	mov	r12, r1
    c84a:	d1 2c       	mov	r13, r1
    c84c:	76 01       	movw	r14, r12
    c84e:	b5 01       	movw	r22, r10
    c850:	a4 01       	movw	r20, r8
    c852:	c3 01       	movw	r24, r6
    c854:	0e 94 f6 4e 	call	0x9dec	; 0x9dec <get_fat.isra.10>
    c858:	6f 3f       	cpi	r22, 0xFF	; 255
    c85a:	bf ef       	ldi	r27, 0xFF	; 255
    c85c:	7b 07       	cpc	r23, r27
    c85e:	8b 07       	cpc	r24, r27
    c860:	9b 07       	cpc	r25, r27
    c862:	09 f4       	brne	.+2      	; 0xc866 <f_getfree+0x9c>
    c864:	76 c0       	rjmp	.+236    	; 0xc952 <f_getfree+0x188>
    c866:	61 30       	cpi	r22, 0x01	; 1
    c868:	71 05       	cpc	r23, r1
    c86a:	81 05       	cpc	r24, r1
    c86c:	91 05       	cpc	r25, r1
    c86e:	09 f4       	brne	.+2      	; 0xc872 <f_getfree+0xa8>
    c870:	73 c0       	rjmp	.+230    	; 0xc958 <f_getfree+0x18e>
    c872:	67 2b       	or	r22, r23
    c874:	68 2b       	or	r22, r24
    c876:	69 2b       	or	r22, r25
    c878:	29 f4       	brne	.+10     	; 0xc884 <f_getfree+0xba>
    c87a:	ef ef       	ldi	r30, 0xFF	; 255
    c87c:	ce 1a       	sub	r12, r30
    c87e:	de 0a       	sbc	r13, r30
    c880:	ee 0a       	sbc	r14, r30
    c882:	fe 0a       	sbc	r15, r30
    c884:	ff ef       	ldi	r31, 0xFF	; 255
    c886:	8f 1a       	sub	r8, r31
    c888:	9f 0a       	sbc	r9, r31
    c88a:	af 0a       	sbc	r10, r31
    c88c:	bf 0a       	sbc	r11, r31
    c88e:	e9 81       	ldd	r30, Y+1	; 0x01
    c890:	fa 81       	ldd	r31, Y+2	; 0x02
    c892:	81 8d       	ldd	r24, Z+25	; 0x19
    c894:	92 8d       	ldd	r25, Z+26	; 0x1a
    c896:	a3 8d       	ldd	r26, Z+27	; 0x1b
    c898:	b4 8d       	ldd	r27, Z+28	; 0x1c
    c89a:	88 16       	cp	r8, r24
    c89c:	99 06       	cpc	r9, r25
    c89e:	aa 06       	cpc	r10, r26
    c8a0:	bb 06       	cpc	r11, r27
    c8a2:	a8 f2       	brcs	.-86     	; 0xc84e <f_getfree+0x84>
    c8a4:	5d c0       	rjmp	.+186    	; 0xc960 <f_getfree+0x196>
    c8a6:	f3 01       	movw	r30, r6
    c8a8:	45 a0       	ldd	r4, Z+37	; 0x25
    c8aa:	56 a0       	ldd	r5, Z+38	; 0x26
    c8ac:	67 a0       	ldd	r6, Z+39	; 0x27
    c8ae:	70 a4       	ldd	r7, Z+40	; 0x28
    c8b0:	21 2c       	mov	r2, r1
    c8b2:	31 2c       	mov	r3, r1
    c8b4:	c1 2c       	mov	r12, r1
    c8b6:	d1 2c       	mov	r13, r1
    c8b8:	76 01       	movw	r14, r12
    c8ba:	21 14       	cp	r2, r1
    c8bc:	31 04       	cpc	r3, r1
    c8be:	b1 f4       	brne	.+44     	; 0xc8ec <f_getfree+0x122>
    c8c0:	d3 01       	movw	r26, r6
    c8c2:	c2 01       	movw	r24, r4
    c8c4:	01 96       	adiw	r24, 0x01	; 1
    c8c6:	a1 1d       	adc	r26, r1
    c8c8:	b1 1d       	adc	r27, r1
    c8ca:	8f 83       	std	Y+7, r24	; 0x07
    c8cc:	98 87       	std	Y+8, r25	; 0x08
    c8ce:	a9 87       	std	Y+9, r26	; 0x09
    c8d0:	ba 87       	std	Y+10, r27	; 0x0a
    c8d2:	b3 01       	movw	r22, r6
    c8d4:	a2 01       	movw	r20, r4
    c8d6:	89 81       	ldd	r24, Y+1	; 0x01
    c8d8:	9a 81       	ldd	r25, Y+2	; 0x02
    c8da:	0e 94 26 4b 	call	0x964c	; 0x964c <move_window>
    c8de:	00 97       	sbiw	r24, 0x00	; 0
    c8e0:	09 f0       	breq	.+2      	; 0xc8e4 <f_getfree+0x11a>
    c8e2:	3d c0       	rjmp	.+122    	; 0xc95e <f_getfree+0x194>
    c8e4:	4f 80       	ldd	r4, Y+7	; 0x07
    c8e6:	58 84       	ldd	r5, Y+8	; 0x08
    c8e8:	69 84       	ldd	r6, Y+9	; 0x09
    c8ea:	7a 84       	ldd	r7, Y+10	; 0x0a
    c8ec:	e9 81       	ldd	r30, Y+1	; 0x01
    c8ee:	fa 81       	ldd	r31, Y+2	; 0x02
    c8f0:	80 81       	ld	r24, Z
    c8f2:	82 30       	cpi	r24, 0x02	; 2
    c8f4:	79 f4       	brne	.+30     	; 0xc914 <f_getfree+0x14a>
    c8f6:	e2 0d       	add	r30, r2
    c8f8:	f3 1d       	adc	r31, r3
    c8fa:	85 a9       	ldd	r24, Z+53	; 0x35
    c8fc:	96 a9       	ldd	r25, Z+54	; 0x36
    c8fe:	89 2b       	or	r24, r25
    c900:	29 f4       	brne	.+10     	; 0xc90c <f_getfree+0x142>
    c902:	9f ef       	ldi	r25, 0xFF	; 255
    c904:	c9 1a       	sub	r12, r25
    c906:	d9 0a       	sbc	r13, r25
    c908:	e9 0a       	sbc	r14, r25
    c90a:	f9 0a       	sbc	r15, r25
    c90c:	a2 e0       	ldi	r26, 0x02	; 2
    c90e:	2a 0e       	add	r2, r26
    c910:	31 1c       	adc	r3, r1
    c912:	15 c0       	rjmp	.+42     	; 0xc93e <f_getfree+0x174>
    c914:	cf 01       	movw	r24, r30
    c916:	c5 96       	adiw	r24, 0x35	; 53
    c918:	82 0d       	add	r24, r2
    c91a:	93 1d       	adc	r25, r3
    c91c:	0e 94 4b 46 	call	0x8c96	; 0x8c96 <ld_dword>
    c920:	dc 01       	movw	r26, r24
    c922:	cb 01       	movw	r24, r22
    c924:	bf 70       	andi	r27, 0x0F	; 15
    c926:	89 2b       	or	r24, r25
    c928:	8a 2b       	or	r24, r26
    c92a:	8b 2b       	or	r24, r27
    c92c:	29 f4       	brne	.+10     	; 0xc938 <f_getfree+0x16e>
    c92e:	bf ef       	ldi	r27, 0xFF	; 255
    c930:	cb 1a       	sub	r12, r27
    c932:	db 0a       	sbc	r13, r27
    c934:	eb 0a       	sbc	r14, r27
    c936:	fb 0a       	sbc	r15, r27
    c938:	e4 e0       	ldi	r30, 0x04	; 4
    c93a:	2e 0e       	add	r2, r30
    c93c:	31 1c       	adc	r3, r1
    c93e:	f1 e0       	ldi	r31, 0x01	; 1
    c940:	3f 22       	and	r3, r31
    c942:	21 e0       	ldi	r18, 0x01	; 1
    c944:	82 1a       	sub	r8, r18
    c946:	91 08       	sbc	r9, r1
    c948:	a1 08       	sbc	r10, r1
    c94a:	b1 08       	sbc	r11, r1
    c94c:	09 f0       	breq	.+2      	; 0xc950 <f_getfree+0x186>
    c94e:	b5 cf       	rjmp	.-150    	; 0xc8ba <f_getfree+0xf0>
    c950:	07 c0       	rjmp	.+14     	; 0xc960 <f_getfree+0x196>
    c952:	01 e0       	ldi	r16, 0x01	; 1
    c954:	10 e0       	ldi	r17, 0x00	; 0
    c956:	04 c0       	rjmp	.+8      	; 0xc960 <f_getfree+0x196>
    c958:	02 e0       	ldi	r16, 0x02	; 2
    c95a:	10 e0       	ldi	r17, 0x00	; 0
    c95c:	01 c0       	rjmp	.+2      	; 0xc960 <f_getfree+0x196>
    c95e:	8c 01       	movw	r16, r24
    c960:	ad 81       	ldd	r26, Y+5	; 0x05
    c962:	be 81       	ldd	r27, Y+6	; 0x06
    c964:	cd 92       	st	X+, r12
    c966:	dd 92       	st	X+, r13
    c968:	ed 92       	st	X+, r14
    c96a:	fc 92       	st	X, r15
    c96c:	13 97       	sbiw	r26, 0x03	; 3
    c96e:	e9 81       	ldd	r30, Y+1	; 0x01
    c970:	fa 81       	ldd	r31, Y+2	; 0x02
    c972:	c1 8a       	std	Z+17, r12	; 0x11
    c974:	d2 8a       	std	Z+18, r13	; 0x12
    c976:	e3 8a       	std	Z+19, r14	; 0x13
    c978:	f4 8a       	std	Z+20, r15	; 0x14
    c97a:	84 81       	ldd	r24, Z+4	; 0x04
    c97c:	81 60       	ori	r24, 0x01	; 1
    c97e:	84 83       	std	Z+4, r24	; 0x04
    c980:	c8 01       	movw	r24, r16
    c982:	2a 96       	adiw	r28, 0x0a	; 10
    c984:	e2 e1       	ldi	r30, 0x12	; 18
    c986:	0c 94 fa df 	jmp	0x1bff4	; 0x1bff4 <__epilogue_restores__>

0000c98a <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
    c98a:	a0 e6       	ldi	r26, 0x60	; 96
    c98c:	b0 e0       	ldi	r27, 0x00	; 0
    c98e:	eb ec       	ldi	r30, 0xCB	; 203
    c990:	f4 e6       	ldi	r31, 0x64	; 100
    c992:	0c 94 e5 df 	jmp	0x1bfca	; 0x1bfca <__prologue_saves__+0xe>
    c996:	a1 96       	adiw	r28, 0x21	; 33
    c998:	9f af       	std	Y+63, r25	; 0x3f
    c99a:	8e af       	std	Y+62, r24	; 0x3e
    c99c:	a1 97       	sbiw	r28, 0x21	; 33
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = mount_volume(&path, &fs, FA_WRITE);
    c99e:	42 e0       	ldi	r20, 0x02	; 2
    c9a0:	be 01       	movw	r22, r28
    c9a2:	63 5a       	subi	r22, 0xA3	; 163
    c9a4:	7f 4f       	sbci	r23, 0xFF	; 255
    c9a6:	ce 01       	movw	r24, r28
    c9a8:	81 5a       	subi	r24, 0xA1	; 161
    c9aa:	9f 4f       	sbci	r25, 0xFF	; 255
    c9ac:	0e 94 a1 4b 	call	0x9742	; 0x9742 <mount_volume>
	if (res == FR_OK) {
    c9b0:	00 97       	sbiw	r24, 0x00	; 0
    c9b2:	09 f0       	breq	.+2      	; 0xc9b6 <f_unlink+0x2c>
    c9b4:	8c c0       	rjmp	.+280    	; 0xcace <f_unlink+0x144>
		dj.obj.fs = fs;
    c9b6:	6f 96       	adiw	r28, 0x1f	; 31
    c9b8:	8e ad       	ldd	r24, Y+62	; 0x3e
    c9ba:	9f ad       	ldd	r25, Y+63	; 0x3f
    c9bc:	6f 97       	sbiw	r28, 0x1f	; 31
    c9be:	98 ab       	std	Y+48, r25	; 0x30
    c9c0:	8f a7       	std	Y+47, r24	; 0x2f
		INIT_NAMBUF(fs);
    c9c2:	80 e0       	ldi	r24, 0x00	; 0
    c9c4:	92 e0       	ldi	r25, 0x02	; 2
    c9c6:	cf d3       	rcall	.+1950   	; 0xd166 <ff_memalloc>
    c9c8:	5c 01       	movw	r10, r24
    c9ca:	00 97       	sbiw	r24, 0x00	; 0
    c9cc:	09 f4       	brne	.+2      	; 0xc9d0 <f_unlink+0x46>
    c9ce:	49 c0       	rjmp	.+146    	; 0xca62 <f_unlink+0xd8>
    c9d0:	6f 96       	adiw	r28, 0x1f	; 31
    c9d2:	ee ad       	ldd	r30, Y+62	; 0x3e
    c9d4:	ff ad       	ldd	r31, Y+63	; 0x3f
    c9d6:	6f 97       	sbiw	r28, 0x1f	; 31
    c9d8:	94 87       	std	Z+12, r25	; 0x0c
    c9da:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);		/* Follow the file path */
    c9dc:	a1 96       	adiw	r28, 0x21	; 33
    c9de:	6e ad       	ldd	r22, Y+62	; 0x3e
    c9e0:	7f ad       	ldd	r23, Y+63	; 0x3f
    c9e2:	a1 97       	sbiw	r28, 0x21	; 33
    c9e4:	ce 01       	movw	r24, r28
    c9e6:	8f 96       	adiw	r24, 0x2f	; 47
    c9e8:	0e 94 f0 56 	call	0xade0	; 0xade0 <follow_path>
    c9ec:	8c 01       	movw	r16, r24
		if (FF_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
    c9ee:	89 2b       	or	r24, r25
    c9f0:	a1 f5       	brne	.+104    	; 0xca5a <f_unlink+0xd0>
    c9f2:	67 96       	adiw	r28, 0x17	; 23
    c9f4:	8f ad       	ldd	r24, Y+63	; 0x3f
    c9f6:	67 97       	sbiw	r28, 0x17	; 23
    c9f8:	85 fd       	sbrc	r24, 5
    c9fa:	36 c0       	rjmp	.+108    	; 0xca68 <f_unlink+0xde>
		}
#if FF_FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			if (dj.fn[NSFLAG] & NS_NONAME) {
    c9fc:	87 fd       	sbrc	r24, 7
    c9fe:	34 c0       	rjmp	.+104    	; 0xca68 <f_unlink+0xde>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
			} else {
				if (dj.obj.attr & AM_RDO) {
    ca00:	9b a8       	ldd	r9, Y+51	; 0x33
    ca02:	90 fc       	sbrc	r9, 0
    ca04:	40 c0       	rjmp	.+128    	; 0xca86 <f_unlink+0xfc>
					init_alloc_info(fs, &obj);
					dclst = obj.sclust;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
    ca06:	6f 96       	adiw	r28, 0x1f	; 31
    ca08:	0e ad       	ldd	r16, Y+62	; 0x3e
    ca0a:	1f ad       	ldd	r17, Y+63	; 0x3f
    ca0c:	6f 97       	sbiw	r28, 0x1f	; 31
    ca0e:	2b 96       	adiw	r28, 0x0b	; 11
    ca10:	6e ad       	ldd	r22, Y+62	; 0x3e
    ca12:	7f ad       	ldd	r23, Y+63	; 0x3f
    ca14:	2b 97       	sbiw	r28, 0x0b	; 11
    ca16:	f8 01       	movw	r30, r16
    ca18:	80 81       	ld	r24, Z
    ca1a:	0e 94 97 49 	call	0x932e	; 0x932e <ld_clust.isra.4>
    ca1e:	6b 01       	movw	r12, r22
    ca20:	7c 01       	movw	r14, r24
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
    ca22:	94 fe       	sbrs	r9, 4
    ca24:	33 c0       	rjmp	.+102    	; 0xca8c <f_unlink+0x102>
#if FF_FS_RPATH != 0
					if (dclst == fs->cdir) {		 	/* Is it the current directory? */
    ca26:	f8 01       	movw	r30, r16
    ca28:	85 89       	ldd	r24, Z+21	; 0x15
    ca2a:	96 89       	ldd	r25, Z+22	; 0x16
    ca2c:	a7 89       	ldd	r26, Z+23	; 0x17
    ca2e:	b0 8d       	ldd	r27, Z+24	; 0x18
    ca30:	c8 16       	cp	r12, r24
    ca32:	d9 06       	cpc	r13, r25
    ca34:	ea 06       	cpc	r14, r26
    ca36:	fb 06       	cpc	r15, r27
    ca38:	31 f1       	breq	.+76     	; 0xca86 <f_unlink+0xfc>
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;				/* Open the sub-directory */
    ca3a:	1a 83       	std	Y+2, r17	; 0x02
    ca3c:	09 83       	std	Y+1, r16	; 0x01
						sdj.obj.sclust = dclst;
    ca3e:	cf 82       	std	Y+7, r12	; 0x07
    ca40:	d8 86       	std	Y+8, r13	; 0x08
    ca42:	e9 86       	std	Y+9, r14	; 0x09
    ca44:	fa 86       	std	Y+10, r15	; 0x0a
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
    ca46:	40 e0       	ldi	r20, 0x00	; 0
    ca48:	50 e0       	ldi	r21, 0x00	; 0
    ca4a:	ba 01       	movw	r22, r20
    ca4c:	ce 01       	movw	r24, r28
    ca4e:	01 96       	adiw	r24, 0x01	; 1
    ca50:	0e 94 aa 4f 	call	0x9f54	; 0x9f54 <dir_sdi>
    ca54:	8c 01       	movw	r16, r24
						if (res == FR_OK) {
    ca56:	89 2b       	or	r24, r25
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    ca58:	51 f0       	breq	.+20     	; 0xca6e <f_unlink+0xe4>
    ca5a:	c5 01       	movw	r24, r10
    ca5c:	87 d3       	rcall	.+1806   	; 0xd16c <ff_memfree>
    ca5e:	c8 01       	movw	r24, r16

	/* Get logical drive */
	res = mount_volume(&path, &fs, FA_WRITE);
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    ca60:	36 c0       	rjmp	.+108    	; 0xcace <f_unlink+0x144>
    ca62:	81 e1       	ldi	r24, 0x11	; 17
    ca64:	90 e0       	ldi	r25, 0x00	; 0
#if FF_FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			if (dj.fn[NSFLAG] & NS_NONAME) {
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
    ca66:	33 c0       	rjmp	.+102    	; 0xcace <f_unlink+0x144>
    ca68:	06 e0       	ldi	r16, 0x06	; 6
    ca6a:	10 e0       	ldi	r17, 0x00	; 0
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
						if (res == FR_OK) {
							res = DIR_READ_FILE(&sdj);			/* Test if the directory is empty */
    ca6c:	f6 cf       	rjmp	.-20     	; 0xca5a <f_unlink+0xd0>
    ca6e:	60 e0       	ldi	r22, 0x00	; 0
    ca70:	70 e0       	ldi	r23, 0x00	; 0
    ca72:	ce 01       	movw	r24, r28
    ca74:	01 96       	adiw	r24, 0x01	; 1
    ca76:	0e 94 43 53 	call	0xa686	; 0xa686 <dir_read>
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
    ca7a:	8c 01       	movw	r16, r24
    ca7c:	00 97       	sbiw	r24, 0x00	; 0
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
    ca7e:	19 f0       	breq	.+6      	; 0xca86 <f_unlink+0xfc>
    ca80:	04 97       	sbiw	r24, 0x04	; 4
    ca82:	21 f0       	breq	.+8      	; 0xca8c <f_unlink+0x102>
					dclst = ld_clust(fs, dj.dir);
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
#if FF_FS_RPATH != 0
					if (dclst == fs->cdir) {		 	/* Is it the current directory? */
						res = FR_DENIED;
    ca84:	ea cf       	rjmp	.-44     	; 0xca5a <f_unlink+0xd0>
    ca86:	07 e0       	ldi	r16, 0x07	; 7
    ca88:	10 e0       	ldi	r17, 0x00	; 0
						}
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj);			/* Remove the directory entry */
    ca8a:	e7 cf       	rjmp	.-50     	; 0xca5a <f_unlink+0xd0>
    ca8c:	ce 01       	movw	r24, r28
    ca8e:	8f 96       	adiw	r24, 0x2f	; 47
    ca90:	0e 94 0c 54 	call	0xa818	; 0xa818 <dir_remove>
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
    ca94:	8c 01       	movw	r16, r24
    ca96:	89 2b       	or	r24, r25
    ca98:	01 f7       	brne	.-64     	; 0xca5a <f_unlink+0xd0>
    ca9a:	c1 14       	cp	r12, r1
    ca9c:	d1 04       	cpc	r13, r1
    ca9e:	e1 04       	cpc	r14, r1
    caa0:	f1 04       	cpc	r15, r1
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
    caa2:	41 f4       	brne	.+16     	; 0xcab4 <f_unlink+0x12a>
    caa4:	6f 96       	adiw	r28, 0x1f	; 31
    caa6:	8e ad       	ldd	r24, Y+62	; 0x3e
    caa8:	9f ad       	ldd	r25, Y+63	; 0x3f
    caaa:	6f 97       	sbiw	r28, 0x1f	; 31
    caac:	0e 94 0c 4a 	call	0x9418	; 0x9418 <sync_fs>
    cab0:	8c 01       	movw	r16, r24
				res = dir_remove(&dj);			/* Remove the directory entry */
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
#if FF_FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
    cab2:	d3 cf       	rjmp	.-90     	; 0xca5a <f_unlink+0xd0>
    cab4:	00 e0       	ldi	r16, 0x00	; 0
    cab6:	10 e0       	ldi	r17, 0x00	; 0
    cab8:	98 01       	movw	r18, r16
    caba:	b7 01       	movw	r22, r14
    cabc:	a6 01       	movw	r20, r12
    cabe:	ce 01       	movw	r24, r28
    cac0:	8f 96       	adiw	r24, 0x2f	; 47
    cac2:	0e 94 91 51 	call	0xa322	; 0xa322 <remove_chain>
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
    cac6:	8c 01       	movw	r16, r24
    cac8:	89 2b       	or	r24, r25
    caca:	39 f6       	brne	.-114    	; 0xca5a <f_unlink+0xd0>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    cacc:	eb cf       	rjmp	.-42     	; 0xcaa4 <f_unlink+0x11a>
    cace:	c0 5a       	subi	r28, 0xA0	; 160
    cad0:	df 4f       	sbci	r29, 0xFF	; 255
    cad2:	eb e0       	ldi	r30, 0x0B	; 11
    cad4:	0c 94 01 e0 	jmp	0x1c002	; 0x1c002 <__epilogue_restores__+0xe>

0000cad8 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
    cad8:	a0 e4       	ldi	r26, 0x40	; 64
    cada:	b0 e0       	ldi	r27, 0x00	; 0
    cadc:	e2 e7       	ldi	r30, 0x72	; 114
    cade:	f5 e6       	ldi	r31, 0x65	; 101
    cae0:	0c 94 e0 df 	jmp	0x1bfc0	; 0x1bfc0 <__prologue_saves__+0x4>
    cae4:	21 96       	adiw	r28, 0x01	; 1
    cae6:	9f af       	std	Y+63, r25	; 0x3f
    cae8:	8e af       	std	Y+62, r24	; 0x3e
    caea:	21 97       	sbiw	r28, 0x01	; 1
	FATFS *fs;
	DWORD dcl, pcl, tm;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    caec:	42 e0       	ldi	r20, 0x02	; 2
    caee:	be 01       	movw	r22, r28
    caf0:	63 5c       	subi	r22, 0xC3	; 195
    caf2:	7f 4f       	sbci	r23, 0xFF	; 255
    caf4:	ce 01       	movw	r24, r28
    caf6:	cf 96       	adiw	r24, 0x3f	; 63
    caf8:	0e 94 a1 4b 	call	0x9742	; 0x9742 <mount_volume>
	if (res == FR_OK) {
    cafc:	00 97       	sbiw	r24, 0x00	; 0
    cafe:	09 f0       	breq	.+2      	; 0xcb02 <f_mkdir+0x2a>
    cb00:	d6 c0       	rjmp	.+428    	; 0xccae <f_mkdir+0x1d6>
		dj.obj.fs = fs;
    cb02:	8d ad       	ldd	r24, Y+61	; 0x3d
    cb04:	9e ad       	ldd	r25, Y+62	; 0x3e
    cb06:	9a 83       	std	Y+2, r25	; 0x02
    cb08:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    cb0a:	80 e0       	ldi	r24, 0x00	; 0
    cb0c:	92 e0       	ldi	r25, 0x02	; 2
    cb0e:	2b d3       	rcall	.+1622   	; 0xd166 <ff_memalloc>
    cb10:	6c 01       	movw	r12, r24
    cb12:	00 97       	sbiw	r24, 0x00	; 0
    cb14:	e9 f0       	breq	.+58     	; 0xcb50 <f_mkdir+0x78>
    cb16:	ed ad       	ldd	r30, Y+61	; 0x3d
    cb18:	fe ad       	ldd	r31, Y+62	; 0x3e
    cb1a:	94 87       	std	Z+12, r25	; 0x0c
    cb1c:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);			/* Follow the file path */
    cb1e:	21 96       	adiw	r28, 0x01	; 1
    cb20:	6e ad       	ldd	r22, Y+62	; 0x3e
    cb22:	7f ad       	ldd	r23, Y+63	; 0x3f
    cb24:	21 97       	sbiw	r28, 0x01	; 1
    cb26:	ce 01       	movw	r24, r28
    cb28:	01 96       	adiw	r24, 0x01	; 1
    cb2a:	0e 94 f0 56 	call	0xade0	; 0xade0 <follow_path>
    cb2e:	7c 01       	movw	r14, r24
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
    cb30:	89 2b       	or	r24, r25
    cb32:	89 f0       	breq	.+34     	; 0xcb56 <f_mkdir+0x7e>
		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {	/* Invalid name? */
    cb34:	84 e0       	ldi	r24, 0x04	; 4
    cb36:	e8 16       	cp	r14, r24
    cb38:	f1 04       	cpc	r15, r1
    cb3a:	31 f4       	brne	.+12     	; 0xcb48 <f_mkdir+0x70>
    cb3c:	88 a5       	ldd	r24, Y+40	; 0x28
    cb3e:	85 ff       	sbrs	r24, 5
    cb40:	0e c0       	rjmp	.+28     	; 0xcb5e <f_mkdir+0x86>
			res = FR_INVALID_NAME;
    cb42:	26 e0       	ldi	r18, 0x06	; 6
    cb44:	e2 2e       	mov	r14, r18
				}
			} else {
				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
			}
		}
		FREE_NAMBUF();
    cb46:	f1 2c       	mov	r15, r1
    cb48:	c6 01       	movw	r24, r12
    cb4a:	10 d3       	rcall	.+1568   	; 0xd16c <ff_memfree>
    cb4c:	c7 01       	movw	r24, r14


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    cb4e:	af c0       	rjmp	.+350    	; 0xccae <f_mkdir+0x1d6>
    cb50:	81 e1       	ldi	r24, 0x11	; 17
    cb52:	90 e0       	ldi	r25, 0x00	; 0
		res = follow_path(&dj, path);			/* Follow the file path */
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
    cb54:	ac c0       	rjmp	.+344    	; 0xccae <f_mkdir+0x1d6>
    cb56:	38 e0       	ldi	r19, 0x08	; 8
    cb58:	e3 2e       	mov	r14, r19
    cb5a:	f1 2c       	mov	r15, r1
		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {	/* Invalid name? */
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
    cb5c:	f5 cf       	rjmp	.-22     	; 0xcb48 <f_mkdir+0x70>
    cb5e:	8d ad       	ldd	r24, Y+61	; 0x3d
    cb60:	9e ad       	ldd	r25, Y+62	; 0x3e
    cb62:	98 ab       	std	Y+48, r25	; 0x30
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
    cb64:	8f a7       	std	Y+47, r24	; 0x2f
    cb66:	40 e0       	ldi	r20, 0x00	; 0
    cb68:	50 e0       	ldi	r21, 0x00	; 0
    cb6a:	ba 01       	movw	r22, r20
    cb6c:	ce 01       	movw	r24, r28
    cb6e:	8f 96       	adiw	r24, 0x2f	; 47
    cb70:	0e 94 6b 50 	call	0xa0d6	; 0xa0d6 <create_chain>
    cb74:	4b 01       	movw	r8, r22
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
    cb76:	5c 01       	movw	r10, r24
    cb78:	67 2b       	or	r22, r23
    cb7a:	68 2b       	or	r22, r24
    cb7c:	69 2b       	or	r22, r25
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
    cb7e:	09 f1       	breq	.+66     	; 0xcbc2 <f_mkdir+0xea>
    cb80:	e1 e0       	ldi	r30, 0x01	; 1
    cb82:	8e 16       	cp	r8, r30
    cb84:	91 04       	cpc	r9, r1
    cb86:	a1 04       	cpc	r10, r1
    cb88:	b1 04       	cpc	r11, r1
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
    cb8a:	61 f0       	breq	.+24     	; 0xcba4 <f_mkdir+0xcc>
    cb8c:	ff ef       	ldi	r31, 0xFF	; 255
    cb8e:	8f 16       	cp	r8, r31
    cb90:	9f 06       	cpc	r9, r31
    cb92:	af 06       	cpc	r10, r31
    cb94:	bf 06       	cpc	r11, r31
			tm = GET_FATTIME();
    cb96:	d9 f4       	brne	.+54     	; 0xcbce <f_mkdir+0xf6>
    cb98:	0e 94 b7 6f 	call	0xdf6e	; 0xdf6e <get_fattime>
    cb9c:	ee 24       	eor	r14, r14
    cb9e:	e3 94       	inc	r14
    cba0:	f1 2c       	mov	r15, r1
    cba2:	05 c0       	rjmp	.+10     	; 0xcbae <f_mkdir+0xd6>
    cba4:	0e 94 b7 6f 	call	0xdf6e	; 0xdf6e <get_fattime>
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
    cba8:	92 e0       	ldi	r25, 0x02	; 2
    cbaa:	e9 2e       	mov	r14, r25
				}
				if (res == FR_OK) {
					res = sync_fs(fs);
				}
			} else {
				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
    cbac:	f1 2c       	mov	r15, r1
    cbae:	00 e0       	ldi	r16, 0x00	; 0
    cbb0:	10 e0       	ldi	r17, 0x00	; 0
    cbb2:	98 01       	movw	r18, r16
    cbb4:	b5 01       	movw	r22, r10
    cbb6:	a4 01       	movw	r20, r8
    cbb8:	ce 01       	movw	r24, r28
    cbba:	8f 96       	adiw	r24, 0x2f	; 47
    cbbc:	0e 94 91 51 	call	0xa322	; 0xa322 <remove_chain>
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
			tm = GET_FATTIME();
    cbc0:	c3 cf       	rjmp	.-122    	; 0xcb48 <f_mkdir+0x70>
    cbc2:	0e 94 b7 6f 	call	0xdf6e	; 0xdf6e <get_fattime>
		}
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
    cbc6:	87 e0       	ldi	r24, 0x07	; 7
    cbc8:	e8 2e       	mov	r14, r24
    cbca:	f1 2c       	mov	r15, r1
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
			tm = GET_FATTIME();
    cbcc:	f0 cf       	rjmp	.-32     	; 0xcbae <f_mkdir+0xd6>
    cbce:	0e 94 b7 6f 	call	0xdf6e	; 0xdf6e <get_fattime>
    cbd2:	2b 01       	movw	r4, r22
			if (res == FR_OK) {
				res = dir_clear(fs, dcl);		/* Clean up the new table */
    cbd4:	3c 01       	movw	r6, r24
    cbd6:	b5 01       	movw	r22, r10
    cbd8:	a4 01       	movw	r20, r8
    cbda:	8d ad       	ldd	r24, Y+61	; 0x3d
    cbdc:	9e ad       	ldd	r25, Y+62	; 0x3e
    cbde:	0e 94 7e 4a 	call	0x94fc	; 0x94fc <dir_clear>
				if (res == FR_OK) {
    cbe2:	7c 01       	movw	r14, r24
    cbe4:	89 2b       	or	r24, r25
					if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {	/* Create dot entries (FAT only) */
						mem_set(fs->win + DIR_Name, ' ', 11);	/* Create "." entry */
    cbe6:	19 f7       	brne	.-58     	; 0xcbae <f_mkdir+0xd6>
    cbe8:	8d ad       	ldd	r24, Y+61	; 0x3d
    cbea:	9e ad       	ldd	r25, Y+62	; 0x3e
    cbec:	4b e0       	ldi	r20, 0x0B	; 11
    cbee:	50 e0       	ldi	r21, 0x00	; 0
    cbf0:	60 e2       	ldi	r22, 0x20	; 32
    cbf2:	70 e0       	ldi	r23, 0x00	; 0
    cbf4:	c5 96       	adiw	r24, 0x35	; 53
    cbf6:	0e 94 66 46 	call	0x8ccc	; 0x8ccc <mem_set>
						fs->win[DIR_Name] = '.';
    cbfa:	8d ad       	ldd	r24, Y+61	; 0x3d
    cbfc:	9e ad       	ldd	r25, Y+62	; 0x3e
    cbfe:	1e e2       	ldi	r17, 0x2E	; 46
    cc00:	fc 01       	movw	r30, r24
						fs->win[DIR_Attr] = AM_DIR;
    cc02:	15 ab       	std	Z+53, r17	; 0x35
    cc04:	e0 5c       	subi	r30, 0xC0	; 192
    cc06:	ff 4f       	sbci	r31, 0xFF	; 255
    cc08:	20 e1       	ldi	r18, 0x10	; 16
						st_dword(fs->win + DIR_ModTime, tm);
    cc0a:	20 83       	st	Z, r18
    cc0c:	b3 01       	movw	r22, r6
    cc0e:	a2 01       	movw	r20, r4
    cc10:	85 5b       	subi	r24, 0xB5	; 181
    cc12:	9f 4f       	sbci	r25, 0xFF	; 255
    cc14:	0e 94 60 46 	call	0x8cc0	; 0x8cc0 <st_dword>
						st_clust(fs, fs->win, dcl);
    cc18:	8d ad       	ldd	r24, Y+61	; 0x3d
    cc1a:	9e ad       	ldd	r25, Y+62	; 0x3e
    cc1c:	bc 01       	movw	r22, r24
    cc1e:	6b 5c       	subi	r22, 0xCB	; 203
    cc20:	7f 4f       	sbci	r23, 0xFF	; 255
    cc22:	a5 01       	movw	r20, r10
    cc24:	94 01       	movw	r18, r8
    cc26:	0e 94 ac 49 	call	0x9358	; 0x9358 <st_clust.isra.5>
						mem_cpy(fs->win + SZDIRE, fs->win, SZDIRE); /* Create ".." entry */
    cc2a:	8d ad       	ldd	r24, Y+61	; 0x3d
    cc2c:	9e ad       	ldd	r25, Y+62	; 0x3e
    cc2e:	bc 01       	movw	r22, r24
    cc30:	6b 5c       	subi	r22, 0xCB	; 203
    cc32:	7f 4f       	sbci	r23, 0xFF	; 255
    cc34:	40 e2       	ldi	r20, 0x20	; 32
    cc36:	50 e0       	ldi	r21, 0x00	; 0
    cc38:	8b 5a       	subi	r24, 0xAB	; 171
    cc3a:	9f 4f       	sbci	r25, 0xFF	; 255
    cc3c:	0e 94 cf 47 	call	0x8f9e	; 0x8f9e <mem_cpy.part.0>
						fs->win[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
    cc40:	8d ad       	ldd	r24, Y+61	; 0x3d
    cc42:	9e ad       	ldd	r25, Y+62	; 0x3e
    cc44:	fc 01       	movw	r30, r24
    cc46:	ea 5a       	subi	r30, 0xAA	; 170
    cc48:	ff 4f       	sbci	r31, 0xFF	; 255
						st_clust(fs, fs->win + SZDIRE, pcl);
    cc4a:	10 83       	st	Z, r17
    cc4c:	2f 81       	ldd	r18, Y+7	; 0x07
    cc4e:	38 85       	ldd	r19, Y+8	; 0x08
    cc50:	49 85       	ldd	r20, Y+9	; 0x09
    cc52:	5a 85       	ldd	r21, Y+10	; 0x0a
    cc54:	bc 01       	movw	r22, r24
    cc56:	6b 5a       	subi	r22, 0xAB	; 171
    cc58:	7f 4f       	sbci	r23, 0xFF	; 255
    cc5a:	0e 94 ac 49 	call	0x9358	; 0x9358 <st_clust.isra.5>
						fs->wflag = 1;
    cc5e:	ed ad       	ldd	r30, Y+61	; 0x3d
    cc60:	fe ad       	ldd	r31, Y+62	; 0x3e
    cc62:	81 e0       	ldi	r24, 0x01	; 1
					}
					res = dir_register(&dj);	/* Register the object to the parent directoy */
    cc64:	83 83       	std	Z+3, r24	; 0x03
    cc66:	ce 01       	movw	r24, r28
    cc68:	01 96       	adiw	r24, 0x01	; 1
    cc6a:	0e 94 62 55 	call	0xaac4	; 0xaac4 <dir_register>
				}
			}
			if (res == FR_OK) {
    cc6e:	7c 01       	movw	r14, r24
    cc70:	89 2b       	or	r24, r25
    cc72:	09 f0       	breq	.+2      	; 0xcc76 <f_mkdir+0x19e>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					st_dword(dj.dir + DIR_ModTime, tm);	/* Created time */
    cc74:	9c cf       	rjmp	.-200    	; 0xcbae <f_mkdir+0xd6>
    cc76:	8b 8d       	ldd	r24, Y+27	; 0x1b
    cc78:	9c 8d       	ldd	r25, Y+28	; 0x1c
    cc7a:	b3 01       	movw	r22, r6
    cc7c:	a2 01       	movw	r20, r4
    cc7e:	46 96       	adiw	r24, 0x16	; 22
    cc80:	0e 94 60 46 	call	0x8cc0	; 0x8cc0 <st_dword>
					st_clust(fs, dj.dir, dcl);			/* Table start cluster */
    cc84:	6b 8d       	ldd	r22, Y+27	; 0x1b
    cc86:	7c 8d       	ldd	r23, Y+28	; 0x1c
    cc88:	a5 01       	movw	r20, r10
    cc8a:	94 01       	movw	r18, r8
    cc8c:	8d ad       	ldd	r24, Y+61	; 0x3d
    cc8e:	9e ad       	ldd	r25, Y+62	; 0x3e
    cc90:	0e 94 ac 49 	call	0x9358	; 0x9358 <st_clust.isra.5>
					dj.dir[DIR_Attr] = AM_DIR;			/* Attribute */
    cc94:	eb 8d       	ldd	r30, Y+27	; 0x1b
    cc96:	fc 8d       	ldd	r31, Y+28	; 0x1c
    cc98:	80 e1       	ldi	r24, 0x10	; 16
					fs->wflag = 1;
    cc9a:	83 87       	std	Z+11, r24	; 0x0b
    cc9c:	8d ad       	ldd	r24, Y+61	; 0x3d
    cc9e:	9e ad       	ldd	r25, Y+62	; 0x3e
    cca0:	21 e0       	ldi	r18, 0x01	; 1
    cca2:	fc 01       	movw	r30, r24
				}
				if (res == FR_OK) {
					res = sync_fs(fs);
    cca4:	23 83       	std	Z+3, r18	; 0x03
    cca6:	0e 94 0c 4a 	call	0x9418	; 0x9418 <sync_fs>
    ccaa:	7c 01       	movw	r14, r24
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    ccac:	4d cf       	rjmp	.-358    	; 0xcb48 <f_mkdir+0x70>
    ccae:	c0 5c       	subi	r28, 0xC0	; 192
    ccb0:	df 4f       	sbci	r29, 0xFF	; 255
    ccb2:	e0 e1       	ldi	r30, 0x10	; 16
    ccb4:	0c 94 fc df 	jmp	0x1bff8	; 0x1bff8 <__epilogue_restores__+0x4>

0000ccb8 <f_rename>:

FRESULT f_rename (
	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
	const TCHAR* path_new	/* Pointer to the new name */
)
{
    ccb8:	a2 e8       	ldi	r26, 0x82	; 130
    ccba:	b0 e0       	ldi	r27, 0x00	; 0
    ccbc:	e2 e6       	ldi	r30, 0x62	; 98
    ccbe:	f6 e6       	ldi	r31, 0x66	; 102
    ccc0:	0c 94 e7 df 	jmp	0x1bfce	; 0x1bfce <__prologue_saves__+0x12>
    ccc4:	c1 58       	subi	r28, 0x81	; 129
    ccc6:	df 4f       	sbci	r29, 0xFF	; 255
    ccc8:	99 83       	std	Y+1, r25	; 0x01
    ccca:	88 83       	st	Y, r24
    cccc:	cf 57       	subi	r28, 0x7F	; 127
    ccce:	d0 40       	sbci	r29, 0x00	; 0
    ccd0:	cf 57       	subi	r28, 0x7F	; 127
    ccd2:	df 4f       	sbci	r29, 0xFF	; 255
    ccd4:	79 83       	std	Y+1, r23	; 0x01
    ccd6:	68 83       	st	Y, r22
    ccd8:	c1 58       	subi	r28, 0x81	; 129
    ccda:	d0 40       	sbci	r29, 0x00	; 0
	BYTE buf[FF_FS_EXFAT ? SZDIRE * 2 : SZDIRE], *dir;
	LBA_t sect;
	DEF_NAMBUF


	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
    ccdc:	ce 01       	movw	r24, r28
    ccde:	8f 57       	subi	r24, 0x7F	; 127
    cce0:	9f 4f       	sbci	r25, 0xFF	; 255
    cce2:	0e 94 77 47 	call	0x8eee	; 0x8eee <get_ldnumber>
	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
    cce6:	42 e0       	ldi	r20, 0x02	; 2
    cce8:	be 01       	movw	r22, r28
    ccea:	63 58       	subi	r22, 0x83	; 131
    ccec:	7f 4f       	sbci	r23, 0xFF	; 255
    ccee:	ce 01       	movw	r24, r28
    ccf0:	81 58       	subi	r24, 0x81	; 129
    ccf2:	9f 4f       	sbci	r25, 0xFF	; 255
    ccf4:	0e 94 a1 4b 	call	0x9742	; 0x9742 <mount_volume>
	if (res == FR_OK) {
    ccf8:	00 97       	sbiw	r24, 0x00	; 0
    ccfa:	09 f0       	breq	.+2      	; 0xccfe <f_rename+0x46>
    ccfc:	ed c0       	rjmp	.+474    	; 0xced8 <f_rename+0x220>
		djo.obj.fs = fs;
    ccfe:	ef 96       	adiw	r28, 0x3f	; 63
    cd00:	8e ad       	ldd	r24, Y+62	; 0x3e
    cd02:	9f ad       	ldd	r25, Y+63	; 0x3f
    cd04:	ef 97       	sbiw	r28, 0x3f	; 63
    cd06:	98 ab       	std	Y+48, r25	; 0x30
    cd08:	8f a7       	std	Y+47, r24	; 0x2f
		INIT_NAMBUF(fs);
    cd0a:	80 e0       	ldi	r24, 0x00	; 0
    cd0c:	92 e0       	ldi	r25, 0x02	; 2
    cd0e:	2b d2       	rcall	.+1110   	; 0xd166 <ff_memalloc>
    cd10:	6c 01       	movw	r12, r24
    cd12:	00 97       	sbiw	r24, 0x00	; 0
    cd14:	f1 f0       	breq	.+60     	; 0xcd52 <f_rename+0x9a>
    cd16:	ef 96       	adiw	r28, 0x3f	; 63
    cd18:	ee ad       	ldd	r30, Y+62	; 0x3e
    cd1a:	ff ad       	ldd	r31, Y+63	; 0x3f
    cd1c:	ef 97       	sbiw	r28, 0x3f	; 63
    cd1e:	94 87       	std	Z+12, r25	; 0x0c
    cd20:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&djo, path_old);		/* Check old object */
    cd22:	c1 58       	subi	r28, 0x81	; 129
    cd24:	df 4f       	sbci	r29, 0xFF	; 255
    cd26:	68 81       	ld	r22, Y
    cd28:	79 81       	ldd	r23, Y+1	; 0x01
    cd2a:	cf 57       	subi	r28, 0x7F	; 127
    cd2c:	d0 40       	sbci	r29, 0x00	; 0
    cd2e:	ce 01       	movw	r24, r28
    cd30:	8f 96       	adiw	r24, 0x2f	; 47
    cd32:	0e 94 f0 56 	call	0xade0	; 0xade0 <follow_path>
    cd36:	8c 01       	movw	r16, r24
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
    cd38:	89 2b       	or	r24, r25
    cd3a:	39 f4       	brne	.+14     	; 0xcd4a <f_rename+0x92>
    cd3c:	67 96       	adiw	r28, 0x17	; 23
    cd3e:	8f ad       	ldd	r24, Y+63	; 0x3f
    cd40:	67 97       	sbiw	r28, 0x17	; 23
    cd42:	80 7a       	andi	r24, 0xA0	; 160
    cd44:	49 f0       	breq	.+18     	; 0xcd58 <f_rename+0xa0>
    cd46:	06 e0       	ldi	r16, 0x06	; 6
					res = sync_fs(fs);
				}
			}
/* End of the critical section */
		}
		FREE_NAMBUF();
    cd48:	10 e0       	ldi	r17, 0x00	; 0
    cd4a:	c6 01       	movw	r24, r12
    cd4c:	0f d2       	rcall	.+1054   	; 0xd16c <ff_memfree>
    cd4e:	c8 01       	movw	r24, r16

	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
	if (res == FR_OK) {
		djo.obj.fs = fs;
		INIT_NAMBUF(fs);
    cd50:	c3 c0       	rjmp	.+390    	; 0xced8 <f_rename+0x220>
    cd52:	81 e1       	ldi	r24, 0x11	; 17
    cd54:	90 e0       	ldi	r25, 0x00	; 0
    cd56:	c0 c0       	rjmp	.+384    	; 0xced8 <f_rename+0x220>
    cd58:	2b 96       	adiw	r28, 0x0b	; 11
    cd5a:	6e ad       	ldd	r22, Y+62	; 0x3e
    cd5c:	7f ad       	ldd	r23, Y+63	; 0x3f
    cd5e:	2b 97       	sbiw	r28, 0x0b	; 11
    cd60:	40 e2       	ldi	r20, 0x20	; 32
    cd62:	50 e0       	ldi	r21, 0x00	; 0
    cd64:	ce 01       	movw	r24, r28
    cd66:	83 5a       	subi	r24, 0xA3	; 163
    cd68:	9f 4f       	sbci	r25, 0xFF	; 255
    cd6a:	0e 94 cf 47 	call	0x8f9e	; 0x8f9e <mem_cpy.part.0>
    cd6e:	4e e2       	ldi	r20, 0x2E	; 46
    cd70:	50 e0       	ldi	r21, 0x00	; 0
    cd72:	be 01       	movw	r22, r28
    cd74:	61 5d       	subi	r22, 0xD1	; 209
    cd76:	7f 4f       	sbci	r23, 0xFF	; 255
    cd78:	ce 01       	movw	r24, r28
    cd7a:	01 96       	adiw	r24, 0x01	; 1
    cd7c:	0e 94 cf 47 	call	0x8f9e	; 0x8f9e <mem_cpy.part.0>
			} else
#endif
			{	/* At FAT/FAT32 volume */
				mem_cpy(buf, djo.dir, SZDIRE);			/* Save directory entry of the object */
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
    cd80:	cf 57       	subi	r28, 0x7F	; 127
    cd82:	df 4f       	sbci	r29, 0xFF	; 255
    cd84:	68 81       	ld	r22, Y
    cd86:	79 81       	ldd	r23, Y+1	; 0x01
    cd88:	c1 58       	subi	r28, 0x81	; 129
    cd8a:	d0 40       	sbci	r29, 0x00	; 0
    cd8c:	ce 01       	movw	r24, r28
    cd8e:	01 96       	adiw	r24, 0x01	; 1
    cd90:	0e 94 f0 56 	call	0xade0	; 0xade0 <follow_path>
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
    cd94:	8c 01       	movw	r16, r24
    cd96:	89 2b       	or	r24, r25
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
    cd98:	f9 f4       	brne	.+62     	; 0xcdd8 <f_rename+0x120>
    cd9a:	4f 81       	ldd	r20, Y+7	; 0x07
    cd9c:	58 85       	ldd	r21, Y+8	; 0x08
    cd9e:	69 85       	ldd	r22, Y+9	; 0x09
    cda0:	7a 85       	ldd	r23, Y+10	; 0x0a
    cda2:	8d a9       	ldd	r24, Y+53	; 0x35
    cda4:	9e a9       	ldd	r25, Y+54	; 0x36
    cda6:	af a9       	ldd	r26, Y+55	; 0x37
    cda8:	b8 ad       	ldd	r27, Y+56	; 0x38
    cdaa:	48 17       	cp	r20, r24
    cdac:	59 07       	cpc	r21, r25
    cdae:	6a 07       	cpc	r22, r26
    cdb0:	7b 07       	cpc	r23, r27
    cdb2:	09 f0       	breq	.+2      	; 0xcdb6 <f_rename+0xfe>
    cdb4:	8b c0       	rjmp	.+278    	; 0xcecc <f_rename+0x214>
    cdb6:	4f 85       	ldd	r20, Y+15	; 0x0f
    cdb8:	58 89       	ldd	r21, Y+16	; 0x10
    cdba:	69 89       	ldd	r22, Y+17	; 0x11
    cdbc:	7a 89       	ldd	r23, Y+18	; 0x12
    cdbe:	21 96       	adiw	r28, 0x01	; 1
    cdc0:	8c ad       	ldd	r24, Y+60	; 0x3c
    cdc2:	9d ad       	ldd	r25, Y+61	; 0x3d
    cdc4:	ae ad       	ldd	r26, Y+62	; 0x3e
    cdc6:	bf ad       	ldd	r27, Y+63	; 0x3f
    cdc8:	21 97       	sbiw	r28, 0x01	; 1
    cdca:	48 17       	cp	r20, r24
    cdcc:	59 07       	cpc	r21, r25
    cdce:	6a 07       	cpc	r22, r26
    cdd0:	7b 07       	cpc	r23, r27
    cdd2:	09 f0       	breq	.+2      	; 0xcdd6 <f_rename+0x11e>
    cdd4:	7b c0       	rjmp	.+246    	; 0xcecc <f_rename+0x214>
				}
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
    cdd6:	04 c0       	rjmp	.+8      	; 0xcde0 <f_rename+0x128>
    cdd8:	04 30       	cpi	r16, 0x04	; 4
    cdda:	11 05       	cpc	r17, r1
    cddc:	09 f0       	breq	.+2      	; 0xcde0 <f_rename+0x128>
					res = dir_register(&djn);			/* Register the new entry */
    cdde:	b5 cf       	rjmp	.-150    	; 0xcd4a <f_rename+0x92>
    cde0:	ce 01       	movw	r24, r28
    cde2:	01 96       	adiw	r24, 0x01	; 1
    cde4:	0e 94 62 55 	call	0xaac4	; 0xaac4 <dir_register>
					if (res == FR_OK) {
    cde8:	8c 01       	movw	r16, r24
    cdea:	89 2b       	or	r24, r25
    cdec:	09 f0       	breq	.+2      	; 0xcdf0 <f_rename+0x138>
						dir = djn.dir;					/* Copy directory entry of the object except name */
    cdee:	ad cf       	rjmp	.-166    	; 0xcd4a <f_rename+0x92>
    cdf0:	0b 8d       	ldd	r16, Y+27	; 0x1b
    cdf2:	1c 8d       	ldd	r17, Y+28	; 0x1c
    cdf4:	6d e5       	ldi	r22, 0x5D	; 93
    cdf6:	70 e0       	ldi	r23, 0x00	; 0
    cdf8:	6c 0f       	add	r22, r28
    cdfa:	7d 1f       	adc	r23, r29
    cdfc:	63 5f       	subi	r22, 0xF3	; 243
    cdfe:	7f 4f       	sbci	r23, 0xFF	; 255
    ce00:	43 e1       	ldi	r20, 0x13	; 19
    ce02:	50 e0       	ldi	r21, 0x00	; 0
    ce04:	c8 01       	movw	r24, r16
    ce06:	0d 96       	adiw	r24, 0x0d	; 13
    ce08:	0e 94 cf 47 	call	0x8f9e	; 0x8f9e <mem_cpy.part.0>
						mem_cpy(dir + 13, buf + 13, SZDIRE - 13);
						dir[DIR_Attr] = buf[DIR_Attr];
    ce0c:	a9 96       	adiw	r28, 0x29	; 41
    ce0e:	8f ad       	ldd	r24, Y+63	; 0x3f
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
    ce10:	a9 97       	sbiw	r28, 0x29	; 41
    ce12:	84 ff       	sbrs	r24, 4
    ce14:	80 62       	ori	r24, 0x20	; 32
    ce16:	f8 01       	movw	r30, r16
						fs->wflag = 1;
    ce18:	83 87       	std	Z+11, r24	; 0x0b
    ce1a:	ef 96       	adiw	r28, 0x3f	; 63
    ce1c:	ee ac       	ldd	r14, Y+62	; 0x3e
    ce1e:	ff ac       	ldd	r15, Y+63	; 0x3f
    ce20:	ef 97       	sbiw	r28, 0x3f	; 63
    ce22:	bb 24       	eor	r11, r11
    ce24:	b3 94       	inc	r11
    ce26:	f7 01       	movw	r30, r14
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
    ce28:	b3 82       	std	Z+3, r11	; 0x03
    ce2a:	f8 01       	movw	r30, r16
    ce2c:	83 85       	ldd	r24, Z+11	; 0x0b
    ce2e:	84 ff       	sbrs	r24, 4
    ce30:	3d c0       	rjmp	.+122    	; 0xceac <f_rename+0x1f4>
    ce32:	4d a9       	ldd	r20, Y+53	; 0x35
    ce34:	5e a9       	ldd	r21, Y+54	; 0x36
    ce36:	6f a9       	ldd	r22, Y+55	; 0x37
    ce38:	78 ad       	ldd	r23, Y+56	; 0x38
    ce3a:	8f 81       	ldd	r24, Y+7	; 0x07
    ce3c:	98 85       	ldd	r25, Y+8	; 0x08
    ce3e:	a9 85       	ldd	r26, Y+9	; 0x09
    ce40:	ba 85       	ldd	r27, Y+10	; 0x0a
    ce42:	48 17       	cp	r20, r24
    ce44:	59 07       	cpc	r21, r25
    ce46:	6a 07       	cpc	r22, r26
    ce48:	7b 07       	cpc	r23, r27
							sect = clst2sect(fs, ld_clust(fs, dir));
    ce4a:	81 f1       	breq	.+96     	; 0xceac <f_rename+0x1f4>
    ce4c:	b8 01       	movw	r22, r16
    ce4e:	f7 01       	movw	r30, r14
    ce50:	80 81       	ld	r24, Z
    ce52:	0e 94 97 49 	call	0x932e	; 0x932e <ld_clust.isra.4>
    ce56:	ab 01       	movw	r20, r22
    ce58:	bc 01       	movw	r22, r24
    ce5a:	c7 01       	movw	r24, r14
    ce5c:	0e 94 04 47 	call	0x8e08	; 0x8e08 <clst2sect>
    ce60:	ab 01       	movw	r20, r22
							if (sect == 0) {
    ce62:	bc 01       	movw	r22, r24
    ce64:	41 15       	cp	r20, r1
    ce66:	51 05       	cpc	r21, r1
    ce68:	61 05       	cpc	r22, r1
    ce6a:	71 05       	cpc	r23, r1
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
    ce6c:	91 f1       	breq	.+100    	; 0xced2 <f_rename+0x21a>
    ce6e:	c7 01       	movw	r24, r14
    ce70:	0e 94 26 4b 	call	0x964c	; 0x964c <move_window>
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
								if (res == FR_OK && dir[1] == '.') {
    ce74:	8c 01       	movw	r16, r24
    ce76:	89 2b       	or	r24, r25
    ce78:	09 f0       	breq	.+2      	; 0xce7c <f_rename+0x1c4>
							if (sect == 0) {
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
    ce7a:	67 cf       	rjmp	.-306    	; 0xcd4a <f_rename+0x92>
    ce7c:	ef 96       	adiw	r28, 0x3f	; 63
    ce7e:	8e ad       	ldd	r24, Y+62	; 0x3e
    ce80:	9f ad       	ldd	r25, Y+63	; 0x3f
								if (res == FR_OK && dir[1] == '.') {
    ce82:	ef 97       	sbiw	r28, 0x3f	; 63
    ce84:	fc 01       	movw	r30, r24
    ce86:	ea 5a       	subi	r30, 0xAA	; 170
    ce88:	ff 4f       	sbci	r31, 0xFF	; 255
    ce8a:	20 81       	ld	r18, Z
    ce8c:	2e 32       	cpi	r18, 0x2E	; 46
									st_clust(fs, dir, djn.obj.sclust);
    ce8e:	71 f4       	brne	.+28     	; 0xceac <f_rename+0x1f4>
    ce90:	2f 81       	ldd	r18, Y+7	; 0x07
    ce92:	38 85       	ldd	r19, Y+8	; 0x08
    ce94:	49 85       	ldd	r20, Y+9	; 0x09
							if (sect == 0) {
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
    ce96:	5a 85       	ldd	r21, Y+10	; 0x0a
    ce98:	bc 01       	movw	r22, r24
    ce9a:	6b 5a       	subi	r22, 0xAB	; 171
								if (res == FR_OK && dir[1] == '.') {
									st_clust(fs, dir, djn.obj.sclust);
    ce9c:	7f 4f       	sbci	r23, 0xFF	; 255
    ce9e:	0e 94 ac 49 	call	0x9358	; 0x9358 <st_clust.isra.5>
									fs->wflag = 1;
    cea2:	ef 96       	adiw	r28, 0x3f	; 63
    cea4:	ee ad       	ldd	r30, Y+62	; 0x3e
    cea6:	ff ad       	ldd	r31, Y+63	; 0x3f
    cea8:	ef 97       	sbiw	r28, 0x3f	; 63
						}
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&djo);		/* Remove old entry */
    ceaa:	b3 82       	std	Z+3, r11	; 0x03
    ceac:	ce 01       	movw	r24, r28
    ceae:	8f 96       	adiw	r24, 0x2f	; 47
    ceb0:	0e 94 0c 54 	call	0xa818	; 0xa818 <dir_remove>
				if (res == FR_OK) {
    ceb4:	8c 01       	movw	r16, r24
    ceb6:	89 2b       	or	r24, r25
    ceb8:	09 f0       	breq	.+2      	; 0xcebc <f_rename+0x204>
					res = sync_fs(fs);
    ceba:	47 cf       	rjmp	.-370    	; 0xcd4a <f_rename+0x92>
    cebc:	ef 96       	adiw	r28, 0x3f	; 63
    cebe:	8e ad       	ldd	r24, Y+62	; 0x3e
    cec0:	9f ad       	ldd	r25, Y+63	; 0x3f
    cec2:	ef 97       	sbiw	r28, 0x3f	; 63
    cec4:	0e 94 0c 4a 	call	0x9418	; 0x9418 <sync_fs>
    cec8:	8c 01       	movw	r16, r24
    ceca:	3f cf       	rjmp	.-386    	; 0xcd4a <f_rename+0x92>
    cecc:	08 e0       	ldi	r16, 0x08	; 8
    cece:	10 e0       	ldi	r17, 0x00	; 0
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
						fs->wflag = 1;
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
							sect = clst2sect(fs, ld_clust(fs, dir));
							if (sect == 0) {
								res = FR_INT_ERR;
    ced0:	3c cf       	rjmp	.-392    	; 0xcd4a <f_rename+0x92>
    ced2:	02 e0       	ldi	r16, 0x02	; 2
    ced4:	10 e0       	ldi	r17, 0x00	; 0
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    ced6:	39 cf       	rjmp	.-398    	; 0xcd4a <f_rename+0x92>
    ced8:	ce 57       	subi	r28, 0x7E	; 126
    ceda:	df 4f       	sbci	r29, 0xFF	; 255
    cedc:	e9 e0       	ldi	r30, 0x09	; 9
    cede:	0c 94 03 e0 	jmp	0x1c006	; 0x1c006 <__epilogue_restores__+0x12>

0000cee2 <f_chmod>:
FRESULT f_chmod (
	const TCHAR* path,	/* Pointer to the file path */
	BYTE attr,			/* Attribute bits */
	BYTE mask			/* Attribute mask to change */
)
{
    cee2:	a2 e3       	ldi	r26, 0x32	; 50
    cee4:	b0 e0       	ldi	r27, 0x00	; 0
    cee6:	e7 e7       	ldi	r30, 0x77	; 119
    cee8:	f7 e6       	ldi	r31, 0x67	; 103
    ceea:	0c 94 e8 df 	jmp	0x1bfd0	; 0x1bfd0 <__prologue_saves__+0x14>
    ceee:	9a ab       	std	Y+50, r25	; 0x32
    cef0:	89 ab       	std	Y+49, r24	; 0x31
    cef2:	e6 2e       	mov	r14, r22
    cef4:	f4 2e       	mov	r15, r20
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    cef6:	42 e0       	ldi	r20, 0x02	; 2
    cef8:	be 01       	movw	r22, r28
    cefa:	61 5d       	subi	r22, 0xD1	; 209
    cefc:	7f 4f       	sbci	r23, 0xFF	; 255
    cefe:	ce 01       	movw	r24, r28
    cf00:	c1 96       	adiw	r24, 0x31	; 49
    cf02:	0e 94 a1 4b 	call	0x9742	; 0x9742 <mount_volume>
	if (res == FR_OK) {
    cf06:	00 97       	sbiw	r24, 0x00	; 0
    cf08:	a9 f5       	brne	.+106    	; 0xcf74 <f_chmod+0x92>
		dj.obj.fs = fs;
    cf0a:	8f a5       	ldd	r24, Y+47	; 0x2f
    cf0c:	98 a9       	ldd	r25, Y+48	; 0x30
    cf0e:	9a 83       	std	Y+2, r25	; 0x02
    cf10:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    cf12:	80 e0       	ldi	r24, 0x00	; 0
    cf14:	92 e0       	ldi	r25, 0x02	; 2
    cf16:	27 d1       	rcall	.+590    	; 0xd166 <ff_memalloc>
    cf18:	6c 01       	movw	r12, r24
    cf1a:	00 97       	sbiw	r24, 0x00	; 0
    cf1c:	b1 f0       	breq	.+44     	; 0xcf4a <f_chmod+0x68>
    cf1e:	ef a5       	ldd	r30, Y+47	; 0x2f
    cf20:	f8 a9       	ldd	r31, Y+48	; 0x30
    cf22:	94 87       	std	Z+12, r25	; 0x0c
    cf24:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);	/* Follow the file path */
    cf26:	69 a9       	ldd	r22, Y+49	; 0x31
    cf28:	7a a9       	ldd	r23, Y+50	; 0x32
    cf2a:	ce 01       	movw	r24, r28
    cf2c:	01 96       	adiw	r24, 0x01	; 1
    cf2e:	0e 94 f0 56 	call	0xade0	; 0xade0 <follow_path>
    cf32:	8c 01       	movw	r16, r24
		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check object validity */
    cf34:	89 2b       	or	r24, r25
    cf36:	29 f4       	brne	.+10     	; 0xcf42 <f_chmod+0x60>
    cf38:	88 a5       	ldd	r24, Y+40	; 0x28
    cf3a:	80 7a       	andi	r24, 0xA0	; 160
    cf3c:	49 f0       	breq	.+18     	; 0xcf50 <f_chmod+0x6e>
    cf3e:	06 e0       	ldi	r16, 0x06	; 6
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    cf40:	10 e0       	ldi	r17, 0x00	; 0
    cf42:	c6 01       	movw	r24, r12
    cf44:	13 d1       	rcall	.+550    	; 0xd16c <ff_memfree>
    cf46:	c8 01       	movw	r24, r16


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    cf48:	15 c0       	rjmp	.+42     	; 0xcf74 <f_chmod+0x92>
    cf4a:	81 e1       	ldi	r24, 0x11	; 17
    cf4c:	90 e0       	ldi	r25, 0x00	; 0
				fs->dirbuf[XDIR_Attr] = (attr & mask) | (fs->dirbuf[XDIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
				res = store_xdir(&dj);
			} else
#endif
			{
				dj.dir[DIR_Attr] = (attr & mask) | (dj.dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
    cf4e:	12 c0       	rjmp	.+36     	; 0xcf74 <f_chmod+0x92>
    cf50:	eb 8d       	ldd	r30, Y+27	; 0x1b
    cf52:	fc 8d       	ldd	r31, Y+28	; 0x1c
    cf54:	83 85       	ldd	r24, Z+11	; 0x0b
    cf56:	6e 2d       	mov	r22, r14
    cf58:	68 27       	eor	r22, r24
    cf5a:	6f 21       	and	r22, r15
    cf5c:	67 72       	andi	r22, 0x27	; 39
    cf5e:	68 27       	eor	r22, r24
				fs->wflag = 1;
    cf60:	63 87       	std	Z+11, r22	; 0x0b
    cf62:	8f a5       	ldd	r24, Y+47	; 0x2f
    cf64:	98 a9       	ldd	r25, Y+48	; 0x30
    cf66:	21 e0       	ldi	r18, 0x01	; 1
    cf68:	fc 01       	movw	r30, r24
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
    cf6a:	23 83       	std	Z+3, r18	; 0x03
    cf6c:	0e 94 0c 4a 	call	0x9418	; 0x9418 <sync_fs>
    cf70:	8c 01       	movw	r16, r24
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    cf72:	e7 cf       	rjmp	.-50     	; 0xcf42 <f_chmod+0x60>
    cf74:	e2 96       	adiw	r28, 0x32	; 50
    cf76:	e8 e0       	ldi	r30, 0x08	; 8
    cf78:	0c 94 04 e0 	jmp	0x1c008	; 0x1c008 <__epilogue_restores__+0x14>

0000cf7c <f_utime>:

FRESULT f_utime (
	const TCHAR* path,	/* Pointer to the file/directory name */
	const FILINFO* fno	/* Pointer to the timestamp to be set */
)
{
    cf7c:	a2 e3       	ldi	r26, 0x32	; 50
    cf7e:	b0 e0       	ldi	r27, 0x00	; 0
    cf80:	e4 ec       	ldi	r30, 0xC4	; 196
    cf82:	f7 e6       	ldi	r31, 0x67	; 103
    cf84:	0c 94 e8 df 	jmp	0x1bfd0	; 0x1bfd0 <__prologue_saves__+0x14>
    cf88:	9a ab       	std	Y+50, r25	; 0x32
    cf8a:	89 ab       	std	Y+49, r24	; 0x31
    cf8c:	6b 01       	movw	r12, r22
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    cf8e:	42 e0       	ldi	r20, 0x02	; 2
    cf90:	be 01       	movw	r22, r28
    cf92:	61 5d       	subi	r22, 0xD1	; 209
    cf94:	7f 4f       	sbci	r23, 0xFF	; 255
    cf96:	ce 01       	movw	r24, r28
    cf98:	c1 96       	adiw	r24, 0x31	; 49
    cf9a:	0e 94 a1 4b 	call	0x9742	; 0x9742 <mount_volume>
	if (res == FR_OK) {
    cf9e:	00 97       	sbiw	r24, 0x00	; 0
    cfa0:	09 f0       	breq	.+2      	; 0xcfa4 <f_utime+0x28>
    cfa2:	41 c0       	rjmp	.+130    	; 0xd026 <f_utime+0xaa>
		dj.obj.fs = fs;
    cfa4:	8f a5       	ldd	r24, Y+47	; 0x2f
    cfa6:	98 a9       	ldd	r25, Y+48	; 0x30
    cfa8:	9a 83       	std	Y+2, r25	; 0x02
    cfaa:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    cfac:	80 e0       	ldi	r24, 0x00	; 0
    cfae:	92 e0       	ldi	r25, 0x02	; 2
    cfb0:	da d0       	rcall	.+436    	; 0xd166 <ff_memalloc>
    cfb2:	7c 01       	movw	r14, r24
    cfb4:	00 97       	sbiw	r24, 0x00	; 0
    cfb6:	b1 f0       	breq	.+44     	; 0xcfe4 <f_utime+0x68>
    cfb8:	ef a5       	ldd	r30, Y+47	; 0x2f
    cfba:	f8 a9       	ldd	r31, Y+48	; 0x30
    cfbc:	94 87       	std	Z+12, r25	; 0x0c
    cfbe:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);	/* Follow the file path */
    cfc0:	69 a9       	ldd	r22, Y+49	; 0x31
    cfc2:	7a a9       	ldd	r23, Y+50	; 0x32
    cfc4:	ce 01       	movw	r24, r28
    cfc6:	01 96       	adiw	r24, 0x01	; 1
    cfc8:	0e 94 f0 56 	call	0xade0	; 0xade0 <follow_path>
    cfcc:	8c 01       	movw	r16, r24
		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check object validity */
    cfce:	89 2b       	or	r24, r25
    cfd0:	29 f4       	brne	.+10     	; 0xcfdc <f_utime+0x60>
    cfd2:	88 a5       	ldd	r24, Y+40	; 0x28
    cfd4:	80 7a       	andi	r24, 0xA0	; 160
    cfd6:	49 f0       	breq	.+18     	; 0xcfea <f_utime+0x6e>
    cfd8:	06 e0       	ldi	r16, 0x06	; 6
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    cfda:	10 e0       	ldi	r17, 0x00	; 0
    cfdc:	c7 01       	movw	r24, r14
    cfde:	c6 d0       	rcall	.+396    	; 0xd16c <ff_memfree>
    cfe0:	c8 01       	movw	r24, r16


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    cfe2:	21 c0       	rjmp	.+66     	; 0xd026 <f_utime+0xaa>
    cfe4:	81 e1       	ldi	r24, 0x11	; 17
    cfe6:	90 e0       	ldi	r25, 0x00	; 0
				st_dword(fs->dirbuf + XDIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
				res = store_xdir(&dj);
			} else
#endif
			{
				st_dword(dj.dir + DIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
    cfe8:	1e c0       	rjmp	.+60     	; 0xd026 <f_utime+0xaa>
    cfea:	f6 01       	movw	r30, r12
    cfec:	44 81       	ldd	r20, Z+4	; 0x04
    cfee:	55 81       	ldd	r21, Z+5	; 0x05
    cff0:	60 e0       	ldi	r22, 0x00	; 0
    cff2:	70 e0       	ldi	r23, 0x00	; 0
    cff4:	ba 01       	movw	r22, r20
    cff6:	55 27       	eor	r21, r21
    cff8:	44 27       	eor	r20, r20
    cffa:	86 81       	ldd	r24, Z+6	; 0x06
    cffc:	97 81       	ldd	r25, Z+7	; 0x07
    cffe:	a0 e0       	ldi	r26, 0x00	; 0
    d000:	b0 e0       	ldi	r27, 0x00	; 0
    d002:	48 2b       	or	r20, r24
    d004:	59 2b       	or	r21, r25
    d006:	6a 2b       	or	r22, r26
    d008:	7b 2b       	or	r23, r27
    d00a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    d00c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    d00e:	46 96       	adiw	r24, 0x16	; 22
    d010:	0e 94 60 46 	call	0x8cc0	; 0x8cc0 <st_dword>
				fs->wflag = 1;
    d014:	8f a5       	ldd	r24, Y+47	; 0x2f
    d016:	98 a9       	ldd	r25, Y+48	; 0x30
    d018:	21 e0       	ldi	r18, 0x01	; 1
    d01a:	fc 01       	movw	r30, r24
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
    d01c:	23 83       	std	Z+3, r18	; 0x03
    d01e:	0e 94 0c 4a 	call	0x9418	; 0x9418 <sync_fs>
    d022:	8c 01       	movw	r16, r24
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    d024:	db cf       	rjmp	.-74     	; 0xcfdc <f_utime+0x60>
    d026:	e2 96       	adiw	r28, 0x32	; 50
    d028:	e8 e0       	ldi	r30, 0x08	; 8
    d02a:	0c 94 04 e0 	jmp	0x1c008	; 0x1c008 <__epilogue_restores__+0x14>

0000d02e <f_getlabel>:
FRESULT f_getlabel (
	const TCHAR* path,	/* Logical drive number */
	TCHAR* label,		/* Buffer to store the volume label */
	DWORD* vsn			/* Variable to store the volume serial number */
)
{
    d02e:	a2 e3       	ldi	r26, 0x32	; 50
    d030:	b0 e0       	ldi	r27, 0x00	; 0
    d032:	ed e1       	ldi	r30, 0x1D	; 29
    d034:	f8 e6       	ldi	r31, 0x68	; 104
    d036:	0c 94 e4 df 	jmp	0x1bfc8	; 0x1bfc8 <__prologue_saves__+0xc>
    d03a:	9a ab       	std	Y+50, r25	; 0x32
    d03c:	89 ab       	std	Y+49, r24	; 0x31
    d03e:	6b 01       	movw	r12, r22
    d040:	5a 01       	movw	r10, r20
	FATFS *fs;
	UINT si, di;
	WCHAR wc;

	/* Get logical drive */
	res = mount_volume(&path, &fs, 0);
    d042:	40 e0       	ldi	r20, 0x00	; 0
    d044:	be 01       	movw	r22, r28
    d046:	61 5d       	subi	r22, 0xD1	; 209
    d048:	7f 4f       	sbci	r23, 0xFF	; 255
    d04a:	ce 01       	movw	r24, r28
    d04c:	c1 96       	adiw	r24, 0x31	; 49
    d04e:	0e 94 a1 4b 	call	0x9742	; 0x9742 <mount_volume>
    d052:	7c 01       	movw	r14, r24

	/* Get volume label */
	if (res == FR_OK && label) {
    d054:	89 2b       	or	r24, r25
    d056:	09 f0       	breq	.+2      	; 0xd05a <f_getlabel+0x2c>
    d058:	81 c0       	rjmp	.+258    	; 0xd15c <f_getlabel+0x12e>
    d05a:	c1 14       	cp	r12, r1
    d05c:	d1 04       	cpc	r13, r1
    d05e:	09 f4       	brne	.+2      	; 0xd062 <f_getlabel+0x34>
    d060:	53 c0       	rjmp	.+166    	; 0xd108 <f_getlabel+0xda>
		dj.obj.fs = fs; dj.obj.sclust = 0;	/* Open root directory */
    d062:	8f a5       	ldd	r24, Y+47	; 0x2f
    d064:	98 a9       	ldd	r25, Y+48	; 0x30
    d066:	9a 83       	std	Y+2, r25	; 0x02
    d068:	89 83       	std	Y+1, r24	; 0x01
    d06a:	1f 82       	std	Y+7, r1	; 0x07
    d06c:	18 86       	std	Y+8, r1	; 0x08
    d06e:	19 86       	std	Y+9, r1	; 0x09
    d070:	1a 86       	std	Y+10, r1	; 0x0a
		res = dir_sdi(&dj, 0);
    d072:	40 e0       	ldi	r20, 0x00	; 0
    d074:	50 e0       	ldi	r21, 0x00	; 0
    d076:	ba 01       	movw	r22, r20
    d078:	ce 01       	movw	r24, r28
    d07a:	01 96       	adiw	r24, 0x01	; 1
    d07c:	0e 94 aa 4f 	call	0x9f54	; 0x9f54 <dir_sdi>
		if (res == FR_OK) {
    d080:	00 97       	sbiw	r24, 0x00	; 0
    d082:	e9 f5       	brne	.+122    	; 0xd0fe <f_getlabel+0xd0>
		 	res = DIR_READ_LABEL(&dj);		/* Find a volume label entry */
    d084:	61 e0       	ldi	r22, 0x01	; 1
    d086:	70 e0       	ldi	r23, 0x00	; 0
    d088:	ce 01       	movw	r24, r28
    d08a:	01 96       	adiw	r24, 0x01	; 1
    d08c:	0e 94 43 53 	call	0xa686	; 0xa686 <dir_read>
		 	if (res == FR_OK) {
    d090:	00 97       	sbiw	r24, 0x00	; 0
    d092:	a9 f5       	brne	.+106    	; 0xd0fe <f_getlabel+0xd0>
    d094:	00 e0       	ldi	r16, 0x00	; 0
    d096:	10 e0       	ldi	r17, 0x00	; 0
    d098:	80 e0       	ldi	r24, 0x00	; 0
    d09a:	90 e0       	ldi	r25, 0x00	; 0
				} else
#endif
				{
					si = di = 0;		/* Extract volume label from AM_VOL entry */
					while (si < 11) {
						wc = dj.dir[si++];
    d09c:	4c 01       	movw	r8, r24
    d09e:	2f ef       	ldi	r18, 0xFF	; 255
    d0a0:	82 1a       	sub	r8, r18
    d0a2:	92 0a       	sbc	r9, r18
    d0a4:	2b 8d       	ldd	r18, Y+27	; 0x1b
    d0a6:	3c 8d       	ldd	r19, Y+28	; 0x1c
    d0a8:	f9 01       	movw	r30, r18
    d0aa:	e8 0f       	add	r30, r24
    d0ac:	f9 1f       	adc	r31, r25
    d0ae:	80 81       	ld	r24, Z
#if FF_USE_LFN && FF_LFN_UNICODE >= 1 	/* Unicode output */
						if (dbc_1st((BYTE)wc) && si < 11) wc = wc << 8 | dj.dir[si++];	/* Is it a DBC? */
						wc = ff_oem2uni(wc, CODEPAGE);					/* Convert it into Unicode */
    d0b0:	65 eb       	ldi	r22, 0xB5	; 181
    d0b2:	71 e0       	ldi	r23, 0x01	; 1
    d0b4:	90 e0       	ldi	r25, 0x00	; 0
    d0b6:	90 d0       	rcall	.+288    	; 0xd1d8 <ff_oem2uni>
						if (wc != 0) wc = put_utf(wc, &label[di], 4);	/* Put it in Unicode */
    d0b8:	00 97       	sbiw	r24, 0x00	; 0
    d0ba:	19 f4       	brne	.+6      	; 0xd0c2 <f_getlabel+0x94>
						if (wc == 0) { di = 0; break; }
    d0bc:	00 e0       	ldi	r16, 0x00	; 0
    d0be:	10 e0       	ldi	r17, 0x00	; 0
    d0c0:	13 c0       	rjmp	.+38     	; 0xd0e8 <f_getlabel+0xba>
					while (si < 11) {
						wc = dj.dir[si++];
#if FF_USE_LFN && FF_LFN_UNICODE >= 1 	/* Unicode output */
						if (dbc_1st((BYTE)wc) && si < 11) wc = wc << 8 | dj.dir[si++];	/* Is it a DBC? */
						wc = ff_oem2uni(wc, CODEPAGE);					/* Convert it into Unicode */
						if (wc != 0) wc = put_utf(wc, &label[di], 4);	/* Put it in Unicode */
    d0c2:	bc 01       	movw	r22, r24
    d0c4:	80 e0       	ldi	r24, 0x00	; 0
    d0c6:	90 e0       	ldi	r25, 0x00	; 0
    d0c8:	24 e0       	ldi	r18, 0x04	; 4
    d0ca:	30 e0       	ldi	r19, 0x00	; 0
    d0cc:	a6 01       	movw	r20, r12
    d0ce:	40 0f       	add	r20, r16
    d0d0:	51 1f       	adc	r21, r17
    d0d2:	0e 94 da 47 	call	0x8fb4	; 0x8fb4 <put_utf>
    d0d6:	90 e0       	ldi	r25, 0x00	; 0
						if (wc == 0) { di = 0; break; }
    d0d8:	00 97       	sbiw	r24, 0x00	; 0
    d0da:	81 f3       	breq	.-32     	; 0xd0bc <f_getlabel+0x8e>
						di += wc;
    d0dc:	08 0f       	add	r16, r24
    d0de:	19 1f       	adc	r17, r25
    d0e0:	c4 01       	movw	r24, r8
					label[di] = 0;
				} else
#endif
				{
					si = di = 0;		/* Extract volume label from AM_VOL entry */
					while (si < 11) {
    d0e2:	8b 30       	cpi	r24, 0x0B	; 11
    d0e4:	91 05       	cpc	r25, r1
    d0e6:	d1 f6       	brne	.-76     	; 0xd09c <f_getlabel+0x6e>
    d0e8:	f6 01       	movw	r30, r12
    d0ea:	e0 0f       	add	r30, r16
    d0ec:	f1 1f       	adc	r31, r17
#else									/* ANSI/OEM output */
						label[di++] = (TCHAR)wc;
#endif
					}
					do {				/* Truncate trailing spaces */
						label[di] = 0;
    d0ee:	10 82       	st	Z, r1
						if (di == 0) break;
    d0f0:	ce 16       	cp	r12, r30
    d0f2:	df 06       	cpc	r13, r31
    d0f4:	49 f0       	breq	.+18     	; 0xd108 <f_getlabel+0xda>
					} while (label[--di] == ' ');
    d0f6:	82 91       	ld	r24, -Z
    d0f8:	80 32       	cpi	r24, 0x20	; 32
    d0fa:	c9 f3       	breq	.-14     	; 0xd0ee <f_getlabel+0xc0>
    d0fc:	05 c0       	rjmp	.+10     	; 0xd108 <f_getlabel+0xda>
				}
			}
		}
		if (res == FR_NO_FILE) {	/* No label entry and return nul string */
    d0fe:	84 30       	cpi	r24, 0x04	; 4
    d100:	91 05       	cpc	r25, r1
    d102:	59 f5       	brne	.+86     	; 0xd15a <f_getlabel+0x12c>
			label[0] = 0;
    d104:	f6 01       	movw	r30, r12
    d106:	10 82       	st	Z, r1
			res = FR_OK;
		}
	}

	/* Get volume serial number */
	if (res == FR_OK && vsn) {
    d108:	a1 14       	cp	r10, r1
    d10a:	b1 04       	cpc	r11, r1
    d10c:	39 f1       	breq	.+78     	; 0xd15c <f_getlabel+0x12e>
		res = move_window(fs, fs->volbase);
    d10e:	8f a5       	ldd	r24, Y+47	; 0x2f
    d110:	98 a9       	ldd	r25, Y+48	; 0x30
    d112:	fc 01       	movw	r30, r24
    d114:	41 a1       	ldd	r20, Z+33	; 0x21
    d116:	52 a1       	ldd	r21, Z+34	; 0x22
    d118:	63 a1       	ldd	r22, Z+35	; 0x23
    d11a:	74 a1       	ldd	r23, Z+36	; 0x24
    d11c:	0e 94 26 4b 	call	0x964c	; 0x964c <move_window>
    d120:	7c 01       	movw	r14, r24
		if (res == FR_OK) {
    d122:	89 2b       	or	r24, r25
    d124:	d9 f4       	brne	.+54     	; 0xd15c <f_getlabel+0x12e>
			switch (fs->fs_type) {
    d126:	ef a5       	ldd	r30, Y+47	; 0x2f
    d128:	f8 a9       	ldd	r31, Y+48	; 0x30
    d12a:	80 81       	ld	r24, Z
    d12c:	83 30       	cpi	r24, 0x03	; 3
    d12e:	29 f0       	breq	.+10     	; 0xd13a <f_getlabel+0x10c>
    d130:	84 30       	cpi	r24, 0x04	; 4
    d132:	31 f0       	breq	.+12     	; 0xd140 <f_getlabel+0x112>

			case FS_FAT32:
				di = BS_VolID32; break;

			default:
				di = BS_VolID;
    d134:	87 e2       	ldi	r24, 0x27	; 39
    d136:	90 e0       	ldi	r25, 0x00	; 0
    d138:	05 c0       	rjmp	.+10     	; 0xd144 <f_getlabel+0x116>
			switch (fs->fs_type) {
			case FS_EXFAT:
				di = BPB_VolIDEx; break;

			case FS_FAT32:
				di = BS_VolID32; break;
    d13a:	83 e4       	ldi	r24, 0x43	; 67
    d13c:	90 e0       	ldi	r25, 0x00	; 0
    d13e:	02 c0       	rjmp	.+4      	; 0xd144 <f_getlabel+0x116>
	if (res == FR_OK && vsn) {
		res = move_window(fs, fs->volbase);
		if (res == FR_OK) {
			switch (fs->fs_type) {
			case FS_EXFAT:
				di = BPB_VolIDEx; break;
    d140:	84 e6       	ldi	r24, 0x64	; 100
    d142:	90 e0       	ldi	r25, 0x00	; 0
				di = BS_VolID32; break;

			default:
				di = BS_VolID;
			}
			*vsn = ld_dword(fs->win + di);
    d144:	f5 96       	adiw	r30, 0x35	; 53
    d146:	8e 0f       	add	r24, r30
    d148:	9f 1f       	adc	r25, r31
    d14a:	0e 94 4b 46 	call	0x8c96	; 0x8c96 <ld_dword>
    d14e:	f5 01       	movw	r30, r10
    d150:	60 83       	st	Z, r22
    d152:	71 83       	std	Z+1, r23	; 0x01
    d154:	82 83       	std	Z+2, r24	; 0x02
    d156:	93 83       	std	Z+3, r25	; 0x03
    d158:	01 c0       	rjmp	.+2      	; 0xd15c <f_getlabel+0x12e>
						if (di == 0) break;
					} while (label[--di] == ' ');
				}
			}
		}
		if (res == FR_NO_FILE) {	/* No label entry and return nul string */
    d15a:	7c 01       	movw	r14, r24
			*vsn = ld_dword(fs->win + di);
		}
	}

	LEAVE_FF(fs, res);
}
    d15c:	c7 01       	movw	r24, r14
    d15e:	e2 96       	adiw	r28, 0x32	; 50
    d160:	ec e0       	ldi	r30, 0x0C	; 12
    d162:	0c 94 00 e0 	jmp	0x1c000	; 0x1c000 <__epilogue_restores__+0xc>

0000d166 <ff_memalloc>:

void* ff_memalloc (	/* Returns pointer to the allocated memory block (null if not enough core) */
	UINT msize		/* Number of bytes to allocate */
)
{
	return safemalloc(msize);	/* Allocate a new memory block with POSIX API */
    d166:	0c 94 db 27 	jmp	0x4fb6	; 0x4fb6 <safemalloc>
}
    d16a:	08 95       	ret

0000d16c <ff_memfree>:

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free (nothing to do if null) */
)
{
	safefree(mblock);	/* Free the memory block with POSIX API */
    d16c:	0c 94 fd 27 	jmp	0x4ffa	; 0x4ffa <safefree>
    d170:	08 95       	ret

0000d172 <ff_uni2oem>:
#if FF_CODE_PAGE != 0 && FF_CODE_PAGE < 900
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
    d172:	cf 92       	push	r12
    d174:	df 92       	push	r13
    d176:	ef 92       	push	r14
    d178:	ff 92       	push	r15
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (uni < 0x80) {	/* ASCII? */
    d17a:	60 38       	cpi	r22, 0x80	; 128
    d17c:	71 05       	cpc	r23, r1
    d17e:	81 05       	cpc	r24, r1
    d180:	91 05       	cpc	r25, r1
    d182:	10 f4       	brcc	.+4      	; 0xd188 <ff_uni2oem+0x16>
		c = (WCHAR)uni;
    d184:	cb 01       	movw	r24, r22
    d186:	23 c0       	rjmp	.+70     	; 0xd1ce <ff_uni2oem+0x5c>

	} else {			/* Non-ASCII */
		if (uni < 0x10000 && cp == FF_CODE_PAGE) {	/* Is it in BMP and valid code page? */
    d188:	61 15       	cp	r22, r1
    d18a:	71 05       	cpc	r23, r1
    d18c:	21 e0       	ldi	r18, 0x01	; 1
    d18e:	82 07       	cpc	r24, r18
    d190:	91 05       	cpc	r25, r1
    d192:	d8 f4       	brcc	.+54     	; 0xd1ca <ff_uni2oem+0x58>
    d194:	45 3b       	cpi	r20, 0xB5	; 181
    d196:	51 40       	sbci	r21, 0x01	; 1
    d198:	c1 f4       	brne	.+48     	; 0xd1ca <ff_uni2oem+0x58>
    d19a:	e8 e7       	ldi	r30, 0x78	; 120
    d19c:	f7 e0       	ldi	r31, 0x07	; 7
    d19e:	20 e0       	ldi	r18, 0x00	; 0
    d1a0:	30 e0       	ldi	r19, 0x00	; 0
			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
    d1a2:	c1 90       	ld	r12, Z+
    d1a4:	d1 90       	ld	r13, Z+
    d1a6:	e1 2c       	mov	r14, r1
    d1a8:	f1 2c       	mov	r15, r1
    d1aa:	6c 15       	cp	r22, r12
    d1ac:	7d 05       	cpc	r23, r13
    d1ae:	8e 05       	cpc	r24, r14
    d1b0:	9f 05       	cpc	r25, r15
    d1b2:	29 f0       	breq	.+10     	; 0xd1be <ff_uni2oem+0x4c>
    d1b4:	2f 5f       	subi	r18, 0xFF	; 255
    d1b6:	3f 4f       	sbci	r19, 0xFF	; 255
    d1b8:	20 38       	cpi	r18, 0x80	; 128
    d1ba:	31 05       	cpc	r19, r1
    d1bc:	91 f7       	brne	.-28     	; 0xd1a2 <ff_uni2oem+0x30>
			c = (c + 0x80) & 0xFF;
    d1be:	b9 01       	movw	r22, r18
    d1c0:	60 58       	subi	r22, 0x80	; 128
    d1c2:	7f 4f       	sbci	r23, 0xFF	; 255
    d1c4:	cb 01       	movw	r24, r22
    d1c6:	99 27       	eor	r25, r25
    d1c8:	02 c0       	rjmp	.+4      	; 0xd1ce <ff_uni2oem+0x5c>
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
	WCHAR c = 0;
    d1ca:	80 e0       	ldi	r24, 0x00	; 0
    d1cc:	90 e0       	ldi	r25, 0x00	; 0
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
    d1ce:	ff 90       	pop	r15
    d1d0:	ef 90       	pop	r14
    d1d2:	df 90       	pop	r13
    d1d4:	cf 90       	pop	r12
    d1d6:	08 95       	ret

0000d1d8 <ff_oem2uni>:
{
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (oem < 0x80) {	/* ASCII? */
    d1d8:	80 38       	cpi	r24, 0x80	; 128
    d1da:	91 05       	cpc	r25, r1
    d1dc:	88 f0       	brcs	.+34     	; 0xd200 <ff_oem2uni+0x28>
		c = oem;

	} else {			/* Extended char */
		if (cp == FF_CODE_PAGE) {	/* Is it a valid code page? */
    d1de:	65 3b       	cpi	r22, 0xB5	; 181
    d1e0:	71 40       	sbci	r23, 0x01	; 1
    d1e2:	61 f4       	brne	.+24     	; 0xd1fc <ff_oem2uni+0x24>
			if (oem < 0x100) c = p[oem - 0x80];
    d1e4:	8f 3f       	cpi	r24, 0xFF	; 255
    d1e6:	91 05       	cpc	r25, r1
    d1e8:	09 f0       	breq	.+2      	; 0xd1ec <ff_oem2uni+0x14>
    d1ea:	40 f4       	brcc	.+16     	; 0xd1fc <ff_oem2uni+0x24>
    d1ec:	88 0f       	add	r24, r24
    d1ee:	99 1f       	adc	r25, r25
    d1f0:	fc 01       	movw	r30, r24
    d1f2:	e8 58       	subi	r30, 0x88	; 136
    d1f4:	f9 4f       	sbci	r31, 0xF9	; 249
    d1f6:	80 81       	ld	r24, Z
    d1f8:	91 81       	ldd	r25, Z+1	; 0x01
    d1fa:	08 95       	ret
WCHAR ff_oem2uni (	/* Returns Unicode character in UTF-16, zero on error */
	WCHAR	oem,	/* OEM code to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
	WCHAR c = 0;
    d1fc:	80 e0       	ldi	r24, 0x00	; 0
    d1fe:	90 e0       	ldi	r25, 0x00	; 0
			if (oem < 0x100) c = p[oem - 0x80];
		}
	}

	return c;
}
    d200:	08 95       	ret

0000d202 <ff_wtoupper>:

		0x0000	/* EOT */
	};


	if (uni < 0x10000) {	/* Is it in BMP? */
    d202:	61 15       	cp	r22, r1
    d204:	71 05       	cpc	r23, r1
    d206:	21 e0       	ldi	r18, 0x01	; 1
    d208:	82 07       	cpc	r24, r18
    d20a:	91 05       	cpc	r25, r1
    d20c:	08 f0       	brcs	.+2      	; 0xd210 <ff_wtoupper+0xe>
    d20e:	5a c0       	rjmp	.+180    	; 0xd2c4 <ff_wtoupper+0xc2>
		uc = (WORD)uni;
		p = uc < 0x1000 ? cvt1 : cvt2;
    d210:	61 15       	cp	r22, r1
    d212:	80 e1       	ldi	r24, 0x10	; 16
    d214:	78 07       	cpc	r23, r24
    d216:	18 f0       	brcs	.+6      	; 0xd21e <ff_wtoupper+0x1c>
    d218:	aa ec       	ldi	r26, 0xCA	; 202
    d21a:	b4 e0       	ldi	r27, 0x04	; 4
    d21c:	02 c0       	rjmp	.+4      	; 0xd222 <ff_wtoupper+0x20>
    d21e:	a6 e8       	ldi	r26, 0x86	; 134
    d220:	b5 e0       	ldi	r27, 0x05	; 5
		for (;;) {
			bc = *p++;								/* Get the block base */
    d222:	2d 91       	ld	r18, X+
    d224:	3c 91       	ld	r19, X
    d226:	11 97       	sbiw	r26, 0x01	; 1
			if (bc == 0 || uc < bc) break;			/* Not matched? */
    d228:	21 15       	cp	r18, r1
    d22a:	31 05       	cpc	r19, r1
    d22c:	09 f4       	brne	.+2      	; 0xd230 <ff_wtoupper+0x2e>
    d22e:	48 c0       	rjmp	.+144    	; 0xd2c0 <ff_wtoupper+0xbe>
    d230:	62 17       	cp	r22, r18
    d232:	73 07       	cpc	r23, r19
    d234:	08 f4       	brcc	.+2      	; 0xd238 <ff_wtoupper+0x36>
    d236:	44 c0       	rjmp	.+136    	; 0xd2c0 <ff_wtoupper+0xbe>
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
    d238:	14 96       	adiw	r26, 0x04	; 4
    d23a:	fd 01       	movw	r30, r26
    d23c:	32 97       	sbiw	r30, 0x02	; 2
    d23e:	80 81       	ld	r24, Z
    d240:	91 81       	ldd	r25, Z+1	; 0x01
    d242:	e9 2f       	mov	r30, r25
    d244:	ff 27       	eor	r31, r31
    d246:	99 27       	eor	r25, r25
			if (uc < bc + nc) {	/* In the block? */
    d248:	a9 01       	movw	r20, r18
    d24a:	48 0f       	add	r20, r24
    d24c:	59 1f       	adc	r21, r25
    d24e:	64 17       	cp	r22, r20
    d250:	75 07       	cpc	r23, r21
    d252:	70 f5       	brcc	.+92     	; 0xd2b0 <ff_wtoupper+0xae>
				switch (cmd) {
    d254:	e9 30       	cpi	r30, 0x09	; 9
    d256:	f1 05       	cpc	r31, r1
    d258:	98 f5       	brcc	.+102    	; 0xd2c0 <ff_wtoupper+0xbe>
    d25a:	ec 54       	subi	r30, 0x4C	; 76
    d25c:	ff 4f       	sbci	r31, 0xFF	; 255
    d25e:	0c 94 af df 	jmp	0x1bf5e	; 0x1bf5e <__tablejump2__>
				case 0:	uc = p[uc - bc]; break;		/* Table conversion */
    d262:	62 1b       	sub	r22, r18
    d264:	73 0b       	sbc	r23, r19
    d266:	fb 01       	movw	r30, r22
    d268:	ee 0f       	add	r30, r30
    d26a:	ff 1f       	adc	r31, r31
    d26c:	ea 0f       	add	r30, r26
    d26e:	fb 1f       	adc	r31, r27
    d270:	60 81       	ld	r22, Z
    d272:	71 81       	ldd	r23, Z+1	; 0x01
    d274:	25 c0       	rjmp	.+74     	; 0xd2c0 <ff_wtoupper+0xbe>
				case 1:	uc -= (uc - bc) & 1; break;	/* Case pairs */
    d276:	cb 01       	movw	r24, r22
    d278:	82 1b       	sub	r24, r18
    d27a:	93 0b       	sbc	r25, r19
    d27c:	81 70       	andi	r24, 0x01	; 1
    d27e:	99 27       	eor	r25, r25
    d280:	68 1b       	sub	r22, r24
    d282:	79 0b       	sbc	r23, r25
    d284:	1d c0       	rjmp	.+58     	; 0xd2c0 <ff_wtoupper+0xbe>
				case 2: uc -= 16; break;			/* Shift -16 */
    d286:	60 51       	subi	r22, 0x10	; 16
    d288:	71 09       	sbc	r23, r1
    d28a:	1a c0       	rjmp	.+52     	; 0xd2c0 <ff_wtoupper+0xbe>
				case 3:	uc -= 32; break;			/* Shift -32 */
    d28c:	60 52       	subi	r22, 0x20	; 32
    d28e:	71 09       	sbc	r23, r1
    d290:	17 c0       	rjmp	.+46     	; 0xd2c0 <ff_wtoupper+0xbe>
				case 4:	uc -= 48; break;			/* Shift -48 */
    d292:	60 53       	subi	r22, 0x30	; 48
    d294:	71 09       	sbc	r23, r1
    d296:	14 c0       	rjmp	.+40     	; 0xd2c0 <ff_wtoupper+0xbe>
				case 5:	uc -= 26; break;			/* Shift -26 */
    d298:	6a 51       	subi	r22, 0x1A	; 26
    d29a:	71 09       	sbc	r23, r1
    d29c:	11 c0       	rjmp	.+34     	; 0xd2c0 <ff_wtoupper+0xbe>
				case 6:	uc += 8; break;				/* Shift +8 */
    d29e:	68 5f       	subi	r22, 0xF8	; 248
    d2a0:	7f 4f       	sbci	r23, 0xFF	; 255
    d2a2:	0e c0       	rjmp	.+28     	; 0xd2c0 <ff_wtoupper+0xbe>
				case 7: uc -= 80; break;			/* Shift -80 */
    d2a4:	60 55       	subi	r22, 0x50	; 80
    d2a6:	71 09       	sbc	r23, r1
    d2a8:	0b c0       	rjmp	.+22     	; 0xd2c0 <ff_wtoupper+0xbe>
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
    d2aa:	60 56       	subi	r22, 0x60	; 96
    d2ac:	7c 41       	sbci	r23, 0x1C	; 28
    d2ae:	08 c0       	rjmp	.+16     	; 0xd2c0 <ff_wtoupper+0xbe>
				}
				break;
			}
			if (cmd == 0) p += nc;	/* Skip table if needed */
    d2b0:	ef 2b       	or	r30, r31
    d2b2:	09 f0       	breq	.+2      	; 0xd2b6 <ff_wtoupper+0xb4>
    d2b4:	b6 cf       	rjmp	.-148    	; 0xd222 <ff_wtoupper+0x20>
    d2b6:	88 0f       	add	r24, r24
    d2b8:	99 1f       	adc	r25, r25
    d2ba:	a8 0f       	add	r26, r24
    d2bc:	b9 1f       	adc	r27, r25
    d2be:	b1 cf       	rjmp	.-158    	; 0xd222 <ff_wtoupper+0x20>
		}
		uni = uc;
    d2c0:	80 e0       	ldi	r24, 0x00	; 0
    d2c2:	90 e0       	ldi	r25, 0x00	; 0
	}

	return uni;
}
    d2c4:	08 95       	ret

0000d2c6 <disk_status>:

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
	switch (pdrv) {
    d2c6:	81 11       	cpse	r24, r1
#ifdef DRV_MMC
	case DEV_MMC :
		return ( mmc_disk_status() );
    d2c8:	02 c0       	rjmp	.+4      	; 0xd2ce <disk_status+0x8>
    d2ca:	a8 c1       	rjmp	.+848    	; 0xd61c <mmc_disk_status>
#ifdef DRV_USB
	case DEV_USB :
		return ( usb_disk_status() );
#endif
	}
	return STA_NOINIT;
    d2cc:	08 95       	ret
}
    d2ce:	81 e0       	ldi	r24, 0x01	; 1
    d2d0:	08 95       	ret

0000d2d2 <disk_initialize>:
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{

	switch (pdrv) {
    d2d2:	81 11       	cpse	r24, r1
#ifdef DRV_MMC
	case DEV_MMC :
		return ( mmc_disk_initialize() );
    d2d4:	02 c0       	rjmp	.+4      	; 0xd2da <disk_initialize+0x8>
    d2d6:	fd c0       	rjmp	.+506    	; 0xd4d2 <mmc_disk_initialize>
#ifdef DRV_USB
	case DEV_USB :
		return ( usb_disk_initialize() );
#endif
	}
	return STA_NOINIT;
    d2d8:	08 95       	ret
}
    d2da:	81 e0       	ldi	r24, 0x01	; 1
    d2dc:	08 95       	ret

0000d2de <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	LBA_t sector,	/* Start sector in LBA */
	UINT count		/* Number of sectors to read */
)
{
    d2de:	0f 93       	push	r16
    d2e0:	1f 93       	push	r17
    d2e2:	fb 01       	movw	r30, r22
	switch (pdrv) {
    d2e4:	81 11       	cpse	r24, r1
    d2e6:	06 c0       	rjmp	.+12     	; 0xd2f4 <disk_read+0x16>
    d2e8:	ba 01       	movw	r22, r20
    d2ea:	a9 01       	movw	r20, r18
    d2ec:	cf 01       	movw	r24, r30
#ifdef DRV_MMC
	case DEV_MMC :
		return ( mmc_disk_read(buff, sector, count) );
    d2ee:	98 01       	movw	r18, r16
    d2f0:	98 d1       	rcall	.+816    	; 0xd622 <mmc_disk_read>
    d2f2:	02 c0       	rjmp	.+4      	; 0xd2f8 <disk_read+0x1a>
#ifdef DRV_USB
	case DEV_USB :
		return ( usb_disk_read(buff, sector, count) );
#endif
	}
	return RES_PARERR;
    d2f4:	84 e0       	ldi	r24, 0x04	; 4
    d2f6:	90 e0       	ldi	r25, 0x00	; 0
}
    d2f8:	1f 91       	pop	r17
    d2fa:	0f 91       	pop	r16
    d2fc:	08 95       	ret

0000d2fe <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	LBA_t sector,		/* Start sector in LBA */
	UINT count			/* Number of sectors to write */
)
{
    d2fe:	0f 93       	push	r16
    d300:	1f 93       	push	r17
    d302:	fb 01       	movw	r30, r22
	switch (pdrv) {
    d304:	81 11       	cpse	r24, r1
    d306:	06 c0       	rjmp	.+12     	; 0xd314 <disk_write+0x16>
    d308:	ba 01       	movw	r22, r20
    d30a:	a9 01       	movw	r20, r18
    d30c:	cf 01       	movw	r24, r30
#ifdef DRV_MMC
	case DEV_MMC :
		return ( mmc_disk_write(buff, sector, count) );
    d30e:	98 01       	movw	r18, r16
    d310:	ce d1       	rcall	.+924    	; 0xd6ae <mmc_disk_write>
    d312:	02 c0       	rjmp	.+4      	; 0xd318 <disk_write+0x1a>
	case DEV_USB :
		return ( usb_disk_write(buff, sector, count) );
#endif
	}

	return RES_PARERR;
    d314:	84 e0       	ldi	r24, 0x04	; 4
    d316:	90 e0       	ldi	r25, 0x00	; 0
}
    d318:	1f 91       	pop	r17
    d31a:	0f 91       	pop	r16
    d31c:	08 95       	ret

0000d31e <disk_ioctl>:
DRESULT disk_ioctl (
    BYTE pdrv,      /* Physical drive nmuber (0..) */
    BYTE cmd,       /* Control code */
    void *buff      /* Buffer to send/receive control data */
)
{
    d31e:	96 2f       	mov	r25, r22
    switch (pdrv) {
    d320:	81 11       	cpse	r24, r1
    d322:	04 c0       	rjmp	.+8      	; 0xd32c <disk_ioctl+0xe>
    d324:	ba 01       	movw	r22, r20
#ifdef DRV_MMC
    case DEV_MMC :
        return ( mmc_disk_ioctl(cmd, buff) );
    d326:	89 2f       	mov	r24, r25
    d328:	27 c2       	rjmp	.+1102   	; 0xd778 <mmc_disk_ioctl>
#ifdef DRV_USB
    case DEV_MMC :
        return ( usb_disk_ioctl(cmd, buff) );
#endif
    }
    return RES_PARERR;
    d32a:	08 95       	ret
    d32c:	84 e0       	ldi	r24, 0x04	; 4
}
    d32e:	90 e0       	ldi	r25, 0x00	; 0
    d330:	08 95       	ret

0000d332 <xchg_spi>:
///@return Data read
static
BYTE xchg_spi (     /* Returns received data */
    BYTE dat        /* Data to be sent */
)
{
    d332:	df c4       	rjmp	.+2494   	; 0xdcf2 <mmc_spi_TXRX>
    d334:	08 95       	ret

0000d336 <deselect>:
    d336:	b4 d4       	rcall	.+2408   	; 0xdca0 <mmc_spi_end>
    d338:	8f ef       	ldi	r24, 0xFF	; 255
    d33a:	fb df       	rcall	.-10     	; 0xd332 <xchg_spi>
    d33c:	8f ef       	ldi	r24, 0xFF	; 255
    d33e:	f9 cf       	rjmp	.-14     	; 0xd332 <xchg_spi>
    d340:	08 95       	ret

0000d342 <rcvr_datablock>:
    d342:	0f 93       	push	r16
    d344:	1f 93       	push	r17
    d346:	cf 93       	push	r28
    d348:	df 93       	push	r29
    d34a:	ec 01       	movw	r28, r24
    d34c:	8b 01       	movw	r16, r22
    d34e:	46 9a       	sbi	0x08, 6	; 8
    d350:	3e 9a       	sbi	0x07, 6	; 7
    d352:	88 ee       	ldi	r24, 0xE8	; 232
    d354:	93 e0       	ldi	r25, 0x03	; 3
    d356:	d0 d4       	rcall	.+2464   	; 0xdcf8 <mmc_set_ms_timeout>
    d358:	8f ef       	ldi	r24, 0xFF	; 255
    d35a:	cb d4       	rcall	.+2454   	; 0xdcf2 <mmc_spi_TXRX>
    d35c:	8f 3f       	cpi	r24, 0xFF	; 255
    d35e:	31 f4       	brne	.+12     	; 0xd36c <rcvr_datablock+0x2a>
    d360:	d2 d4       	rcall	.+2468   	; 0xdd06 <mmc_test_timeout>
    d362:	89 2b       	or	r24, r25
    d364:	c9 f3       	breq	.-14     	; 0xd358 <rcvr_datablock+0x16>
    d366:	80 e0       	ldi	r24, 0x00	; 0
    d368:	90 e0       	ldi	r25, 0x00	; 0
    d36a:	0d c0       	rjmp	.+26     	; 0xd386 <rcvr_datablock+0x44>
    d36c:	8e 3f       	cpi	r24, 0xFE	; 254
    d36e:	d9 f7       	brne	.-10     	; 0xd366 <rcvr_datablock+0x24>
    d370:	b8 01       	movw	r22, r16
    d372:	ce 01       	movw	r24, r28
    d374:	bb d4       	rcall	.+2422   	; 0xdcec <mmc_spi_RX_buffer>
    d376:	8f ef       	ldi	r24, 0xFF	; 255
    d378:	dc df       	rcall	.-72     	; 0xd332 <xchg_spi>
    d37a:	8f ef       	ldi	r24, 0xFF	; 255
    d37c:	da df       	rcall	.-76     	; 0xd332 <xchg_spi>
    d37e:	46 98       	cbi	0x08, 6	; 8
    d380:	3e 9a       	sbi	0x07, 6	; 7
    d382:	81 e0       	ldi	r24, 0x01	; 1
    d384:	90 e0       	ldi	r25, 0x00	; 0
    d386:	df 91       	pop	r29
    d388:	cf 91       	pop	r28
    d38a:	1f 91       	pop	r17
    d38c:	0f 91       	pop	r16
    d38e:	08 95       	ret

0000d390 <wait_ready>:
    d390:	cf 93       	push	r28
    d392:	b2 d4       	rcall	.+2404   	; 0xdcf8 <mmc_set_ms_timeout>
    d394:	8f ef       	ldi	r24, 0xFF	; 255
    d396:	ad d4       	rcall	.+2394   	; 0xdcf2 <mmc_spi_TXRX>
    d398:	c8 2f       	mov	r28, r24
    d39a:	8f 3f       	cpi	r24, 0xFF	; 255
    d39c:	19 f0       	breq	.+6      	; 0xd3a4 <wait_ready+0x14>
    d39e:	b3 d4       	rcall	.+2406   	; 0xdd06 <mmc_test_timeout>
    d3a0:	89 2b       	or	r24, r25
    d3a2:	c1 f3       	breq	.-16     	; 0xd394 <wait_ready+0x4>
    d3a4:	81 e0       	ldi	r24, 0x01	; 1
    d3a6:	90 e0       	ldi	r25, 0x00	; 0
    d3a8:	cf 3f       	cpi	r28, 0xFF	; 255
    d3aa:	11 f0       	breq	.+4      	; 0xd3b0 <wait_ready+0x20>
    d3ac:	80 e0       	ldi	r24, 0x00	; 0
    d3ae:	90 e0       	ldi	r25, 0x00	; 0
    d3b0:	cf 91       	pop	r28
    d3b2:	08 95       	ret

0000d3b4 <select>:
    d3b4:	cf 93       	push	r28
    d3b6:	df 93       	push	r29
    d3b8:	00 d0       	rcall	.+0      	; 0xd3ba <select+0x6>
    d3ba:	1f 92       	push	r1
    d3bc:	64 d4       	rcall	.+2248   	; 0xdc86 <mmc_spi_begin>
    d3be:	8f ef       	ldi	r24, 0xFF	; 255
    d3c0:	b8 df       	rcall	.-144    	; 0xd332 <xchg_spi>
    d3c2:	88 ee       	ldi	r24, 0xE8	; 232
    d3c4:	93 e0       	ldi	r25, 0x03	; 3
    d3c6:	e4 df       	rcall	.-56     	; 0xd390 <wait_ready>
    d3c8:	ec 01       	movw	r28, r24
    d3ca:	89 2b       	or	r24, r25
    d3cc:	61 f4       	brne	.+24     	; 0xd3e6 <select+0x32>
    d3ce:	80 e3       	ldi	r24, 0x30	; 48
    d3d0:	97 e0       	ldi	r25, 0x07	; 7
    d3d2:	a0 e0       	ldi	r26, 0x00	; 0
    d3d4:	ed b7       	in	r30, 0x3d	; 61
    d3d6:	fe b7       	in	r31, 0x3e	; 62
    d3d8:	81 83       	std	Z+1, r24	; 0x01
    d3da:	92 83       	std	Z+2, r25	; 0x02
    d3dc:	a3 83       	std	Z+3, r26	; 0x03
    d3de:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    d3e2:	a9 df       	rcall	.-174    	; 0xd336 <deselect>
    d3e4:	02 c0       	rjmp	.+4      	; 0xd3ea <select+0x36>
    d3e6:	c1 e0       	ldi	r28, 0x01	; 1
    d3e8:	d0 e0       	ldi	r29, 0x00	; 0
    d3ea:	ce 01       	movw	r24, r28
    d3ec:	cd b7       	in	r28, 0x3d	; 61
    d3ee:	de b7       	in	r29, 0x3e	; 62
    d3f0:	23 96       	adiw	r28, 0x03	; 3
    d3f2:	e2 e0       	ldi	r30, 0x02	; 2
    d3f4:	0c 94 0a e0 	jmp	0x1c014	; 0x1c014 <__epilogue_restores__+0x20>

0000d3f8 <send_cmd>:
    d3f8:	ff 92       	push	r15
    d3fa:	0f 93       	push	r16
    d3fc:	1f 93       	push	r17
    d3fe:	cf 93       	push	r28
    d400:	df 93       	push	r29
    d402:	c8 2f       	mov	r28, r24
    d404:	d4 2f       	mov	r29, r20
    d406:	15 2f       	mov	r17, r21
    d408:	06 2f       	mov	r16, r22
    d40a:	f7 2e       	mov	r15, r23
    d40c:	87 ff       	sbrs	r24, 7
    d40e:	08 c0       	rjmp	.+16     	; 0xd420 <send_cmd+0x28>
    d410:	40 e0       	ldi	r20, 0x00	; 0
    d412:	50 e0       	ldi	r21, 0x00	; 0
    d414:	ba 01       	movw	r22, r20
    d416:	87 e3       	ldi	r24, 0x37	; 55
    d418:	ef df       	rcall	.-34     	; 0xd3f8 <send_cmd>
    d41a:	82 30       	cpi	r24, 0x02	; 2
    d41c:	58 f5       	brcc	.+86     	; 0xd474 <send_cmd+0x7c>
    d41e:	cf 77       	andi	r28, 0x7F	; 127
    d420:	cc 30       	cpi	r28, 0x0C	; 12
    d422:	71 f4       	brne	.+28     	; 0xd440 <send_cmd+0x48>
    d424:	8c 2f       	mov	r24, r28
    d426:	80 64       	ori	r24, 0x40	; 64
    d428:	84 df       	rcall	.-248    	; 0xd332 <xchg_spi>
    d42a:	8f 2d       	mov	r24, r15
    d42c:	82 df       	rcall	.-252    	; 0xd332 <xchg_spi>
    d42e:	80 2f       	mov	r24, r16
    d430:	80 df       	rcall	.-256    	; 0xd332 <xchg_spi>
    d432:	81 2f       	mov	r24, r17
    d434:	7e df       	rcall	.-260    	; 0xd332 <xchg_spi>
    d436:	8d 2f       	mov	r24, r29
    d438:	7c df       	rcall	.-264    	; 0xd332 <xchg_spi>
    d43a:	cc 23       	and	r28, r28
    d43c:	c9 f0       	breq	.+50     	; 0xd470 <send_cmd+0x78>
    d43e:	06 c0       	rjmp	.+12     	; 0xd44c <send_cmd+0x54>
    d440:	7a df       	rcall	.-268    	; 0xd336 <deselect>
    d442:	b8 df       	rcall	.-144    	; 0xd3b4 <select>
    d444:	89 2b       	or	r24, r25
    d446:	71 f7       	brne	.-36     	; 0xd424 <send_cmd+0x2c>
    d448:	8f ef       	ldi	r24, 0xFF	; 255
    d44a:	14 c0       	rjmp	.+40     	; 0xd474 <send_cmd+0x7c>
    d44c:	c8 30       	cpi	r28, 0x08	; 8
    d44e:	11 f4       	brne	.+4      	; 0xd454 <send_cmd+0x5c>
    d450:	87 e8       	ldi	r24, 0x87	; 135
    d452:	01 c0       	rjmp	.+2      	; 0xd456 <send_cmd+0x5e>
    d454:	81 e0       	ldi	r24, 0x01	; 1
    d456:	6d df       	rcall	.-294    	; 0xd332 <xchg_spi>
    d458:	cc 30       	cpi	r28, 0x0C	; 12
    d45a:	11 f4       	brne	.+4      	; 0xd460 <send_cmd+0x68>
    d45c:	8f ef       	ldi	r24, 0xFF	; 255
    d45e:	69 df       	rcall	.-302    	; 0xd332 <xchg_spi>
    d460:	ca e0       	ldi	r28, 0x0A	; 10
    d462:	8f ef       	ldi	r24, 0xFF	; 255
    d464:	46 d4       	rcall	.+2188   	; 0xdcf2 <mmc_spi_TXRX>
    d466:	87 ff       	sbrs	r24, 7
    d468:	05 c0       	rjmp	.+10     	; 0xd474 <send_cmd+0x7c>
    d46a:	c1 50       	subi	r28, 0x01	; 1
    d46c:	d1 f7       	brne	.-12     	; 0xd462 <send_cmd+0x6a>
    d46e:	02 c0       	rjmp	.+4      	; 0xd474 <send_cmd+0x7c>
    d470:	85 e9       	ldi	r24, 0x95	; 149
    d472:	f5 cf       	rjmp	.-22     	; 0xd45e <send_cmd+0x66>
    d474:	cd b7       	in	r28, 0x3d	; 61
    d476:	de b7       	in	r29, 0x3e	; 62
    d478:	e5 e0       	ldi	r30, 0x05	; 5
    d47a:	0c 94 07 e0 	jmp	0x1c00e	; 0x1c00e <__epilogue_restores__+0x1a>

0000d47e <xmit_datablock>:
    d47e:	0f 93       	push	r16
    d480:	1f 93       	push	r17
    d482:	cf 93       	push	r28
    d484:	8c 01       	movw	r16, r24
    d486:	c6 2f       	mov	r28, r22
    d488:	2c 9a       	sbi	0x05, 4	; 5
    d48a:	24 9a       	sbi	0x04, 4	; 4
    d48c:	88 ee       	ldi	r24, 0xE8	; 232
    d48e:	93 e0       	ldi	r25, 0x03	; 3
    d490:	7f df       	rcall	.-258    	; 0xd390 <wait_ready>
    d492:	89 2b       	or	r24, r25
    d494:	19 f4       	brne	.+6      	; 0xd49c <xmit_datablock+0x1e>
    d496:	80 e0       	ldi	r24, 0x00	; 0
    d498:	90 e0       	ldi	r25, 0x00	; 0
    d49a:	17 c0       	rjmp	.+46     	; 0xd4ca <xmit_datablock+0x4c>
    d49c:	8c 2f       	mov	r24, r28
    d49e:	49 df       	rcall	.-366    	; 0xd332 <xchg_spi>
    d4a0:	cd 3f       	cpi	r28, 0xFD	; 253
    d4a2:	29 f4       	brne	.+10     	; 0xd4ae <xmit_datablock+0x30>
    d4a4:	46 98       	cbi	0x08, 6	; 8
    d4a6:	3e 9a       	sbi	0x07, 6	; 7
    d4a8:	81 e0       	ldi	r24, 0x01	; 1
    d4aa:	90 e0       	ldi	r25, 0x00	; 0
    d4ac:	0e c0       	rjmp	.+28     	; 0xd4ca <xmit_datablock+0x4c>
    d4ae:	60 e0       	ldi	r22, 0x00	; 0
    d4b0:	72 e0       	ldi	r23, 0x02	; 2
    d4b2:	c8 01       	movw	r24, r16
    d4b4:	18 d4       	rcall	.+2096   	; 0xdce6 <mmc_spi_TX_buffer>
    d4b6:	8f ef       	ldi	r24, 0xFF	; 255
    d4b8:	3c df       	rcall	.-392    	; 0xd332 <xchg_spi>
    d4ba:	8f ef       	ldi	r24, 0xFF	; 255
    d4bc:	3a df       	rcall	.-396    	; 0xd332 <xchg_spi>
    d4be:	8f ef       	ldi	r24, 0xFF	; 255
    d4c0:	18 d4       	rcall	.+2096   	; 0xdcf2 <mmc_spi_TXRX>
    d4c2:	8f 71       	andi	r24, 0x1F	; 31
    d4c4:	85 30       	cpi	r24, 0x05	; 5
    d4c6:	39 f7       	brne	.-50     	; 0xd496 <xmit_datablock+0x18>
    d4c8:	ed cf       	rjmp	.-38     	; 0xd4a4 <xmit_datablock+0x26>
    d4ca:	cf 91       	pop	r28
    d4cc:	1f 91       	pop	r17
    d4ce:	0f 91       	pop	r16
    d4d0:	08 95       	ret

0000d4d2 <mmc_disk_initialize>:
    d4d2:	a4 e0       	ldi	r26, 0x04	; 4
    d4d4:	b0 e0       	ldi	r27, 0x00	; 0
    d4d6:	ef e6       	ldi	r30, 0x6F	; 111
    d4d8:	fa e6       	ldi	r31, 0x6A	; 106
    d4da:	0c 94 e8 df 	jmp	0x1bfd0	; 0x1bfd0 <__prologue_saves__+0x14>
    d4de:	d4 d4       	rcall	.+2472   	; 0xde88 <mmc_power_off>
    d4e0:	64 e6       	ldi	r22, 0x64	; 100
    d4e2:	70 e0       	ldi	r23, 0x00	; 0
    d4e4:	80 e0       	ldi	r24, 0x00	; 0
    d4e6:	90 e0       	ldi	r25, 0x00	; 0
    d4e8:	0e 94 5f 28 	call	0x50be	; 0x50be <delayms>
    d4ec:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <Stat>
    d4f0:	81 fd       	sbrc	r24, 1
    d4f2:	8e c0       	rjmp	.+284    	; 0xd610 <mmc_disk_initialize+0x13e>
    d4f4:	c8 d4       	rcall	.+2448   	; 0xde86 <mmc_power_on>
    d4f6:	d8 d3       	rcall	.+1968   	; 0xdca8 <mmc_slow>
    d4f8:	1a e0       	ldi	r17, 0x0A	; 10
    d4fa:	8f ef       	ldi	r24, 0xFF	; 255
    d4fc:	1a df       	rcall	.-460    	; 0xd332 <xchg_spi>
    d4fe:	11 50       	subi	r17, 0x01	; 1
    d500:	e1 f7       	brne	.-8      	; 0xd4fa <mmc_disk_initialize+0x28>
    d502:	40 e0       	ldi	r20, 0x00	; 0
    d504:	50 e0       	ldi	r21, 0x00	; 0
    d506:	ba 01       	movw	r22, r20
    d508:	80 e0       	ldi	r24, 0x00	; 0
    d50a:	76 df       	rcall	.-276    	; 0xd3f8 <send_cmd>
    d50c:	81 30       	cpi	r24, 0x01	; 1
    d50e:	09 f0       	breq	.+2      	; 0xd512 <mmc_disk_initialize+0x40>
    d510:	6f c0       	rjmp	.+222    	; 0xd5f0 <mmc_disk_initialize+0x11e>
    d512:	80 ed       	ldi	r24, 0xD0	; 208
    d514:	97 e0       	ldi	r25, 0x07	; 7
    d516:	f0 d3       	rcall	.+2016   	; 0xdcf8 <mmc_set_ms_timeout>
    d518:	4a ea       	ldi	r20, 0xAA	; 170
    d51a:	51 e0       	ldi	r21, 0x01	; 1
    d51c:	60 e0       	ldi	r22, 0x00	; 0
    d51e:	70 e0       	ldi	r23, 0x00	; 0
    d520:	88 e0       	ldi	r24, 0x08	; 8
    d522:	6a df       	rcall	.-300    	; 0xd3f8 <send_cmd>
    d524:	81 30       	cpi	r24, 0x01	; 1
    d526:	09 f0       	breq	.+2      	; 0xd52a <mmc_disk_initialize+0x58>
    d528:	3d c0       	rjmp	.+122    	; 0xd5a4 <mmc_disk_initialize+0xd2>
    d52a:	8e 01       	movw	r16, r28
    d52c:	0f 5f       	subi	r16, 0xFF	; 255
    d52e:	1f 4f       	sbci	r17, 0xFF	; 255
    d530:	6e 01       	movw	r12, r28
    d532:	85 e0       	ldi	r24, 0x05	; 5
    d534:	c8 0e       	add	r12, r24
    d536:	d1 1c       	adc	r13, r1
    d538:	78 01       	movw	r14, r16
    d53a:	8f ef       	ldi	r24, 0xFF	; 255
    d53c:	da d3       	rcall	.+1972   	; 0xdcf2 <mmc_spi_TXRX>
    d53e:	f7 01       	movw	r30, r14
    d540:	81 93       	st	Z+, r24
    d542:	7f 01       	movw	r14, r30
    d544:	ce 16       	cp	r12, r30
    d546:	df 06       	cpc	r13, r31
    d548:	c1 f7       	brne	.-16     	; 0xd53a <mmc_disk_initialize+0x68>
    d54a:	8b 81       	ldd	r24, Y+3	; 0x03
    d54c:	81 30       	cpi	r24, 0x01	; 1
    d54e:	09 f0       	breq	.+2      	; 0xd552 <mmc_disk_initialize+0x80>
    d550:	4f c0       	rjmp	.+158    	; 0xd5f0 <mmc_disk_initialize+0x11e>
    d552:	8c 81       	ldd	r24, Y+4	; 0x04
    d554:	8a 3a       	cpi	r24, 0xAA	; 170
    d556:	09 f0       	breq	.+2      	; 0xd55a <mmc_disk_initialize+0x88>
    d558:	4b c0       	rjmp	.+150    	; 0xd5f0 <mmc_disk_initialize+0x11e>
    d55a:	d5 d3       	rcall	.+1962   	; 0xdd06 <mmc_test_timeout>
    d55c:	89 2b       	or	r24, r25
    d55e:	29 f0       	breq	.+10     	; 0xd56a <mmc_disk_initialize+0x98>
    d560:	d2 d3       	rcall	.+1956   	; 0xdd06 <mmc_test_timeout>
    d562:	89 2b       	or	r24, r25
    d564:	09 f0       	breq	.+2      	; 0xd568 <mmc_disk_initialize+0x96>
    d566:	44 c0       	rjmp	.+136    	; 0xd5f0 <mmc_disk_initialize+0x11e>
    d568:	09 c0       	rjmp	.+18     	; 0xd57c <mmc_disk_initialize+0xaa>
    d56a:	40 e0       	ldi	r20, 0x00	; 0
    d56c:	50 e0       	ldi	r21, 0x00	; 0
    d56e:	60 e0       	ldi	r22, 0x00	; 0
    d570:	70 e4       	ldi	r23, 0x40	; 64
    d572:	89 ea       	ldi	r24, 0xA9	; 169
    d574:	41 df       	rcall	.-382    	; 0xd3f8 <send_cmd>
    d576:	81 11       	cpse	r24, r1
    d578:	f0 cf       	rjmp	.-32     	; 0xd55a <mmc_disk_initialize+0x88>
    d57a:	f2 cf       	rjmp	.-28     	; 0xd560 <mmc_disk_initialize+0x8e>
    d57c:	40 e0       	ldi	r20, 0x00	; 0
    d57e:	50 e0       	ldi	r21, 0x00	; 0
    d580:	ba 01       	movw	r22, r20
    d582:	8a e3       	ldi	r24, 0x3A	; 58
    d584:	39 df       	rcall	.-398    	; 0xd3f8 <send_cmd>
    d586:	81 11       	cpse	r24, r1
    d588:	33 c0       	rjmp	.+102    	; 0xd5f0 <mmc_disk_initialize+0x11e>
    d58a:	8f ef       	ldi	r24, 0xFF	; 255
    d58c:	b2 d3       	rcall	.+1892   	; 0xdcf2 <mmc_spi_TXRX>
    d58e:	f8 01       	movw	r30, r16
    d590:	81 93       	st	Z+, r24
    d592:	8f 01       	movw	r16, r30
    d594:	ce 16       	cp	r12, r30
    d596:	df 06       	cpc	r13, r31
    d598:	c1 f7       	brne	.-16     	; 0xd58a <mmc_disk_initialize+0xb8>
    d59a:	89 81       	ldd	r24, Y+1	; 0x01
    d59c:	86 fd       	sbrc	r24, 6
    d59e:	2a c0       	rjmp	.+84     	; 0xd5f4 <mmc_disk_initialize+0x122>
    d5a0:	14 e0       	ldi	r17, 0x04	; 4
    d5a2:	29 c0       	rjmp	.+82     	; 0xd5f6 <mmc_disk_initialize+0x124>
    d5a4:	80 ed       	ldi	r24, 0xD0	; 208
    d5a6:	97 e0       	ldi	r25, 0x07	; 7
    d5a8:	a7 d3       	rcall	.+1870   	; 0xdcf8 <mmc_set_ms_timeout>
    d5aa:	40 e0       	ldi	r20, 0x00	; 0
    d5ac:	50 e0       	ldi	r21, 0x00	; 0
    d5ae:	ba 01       	movw	r22, r20
    d5b0:	89 ea       	ldi	r24, 0xA9	; 169
    d5b2:	22 df       	rcall	.-444    	; 0xd3f8 <send_cmd>
    d5b4:	82 30       	cpi	r24, 0x02	; 2
    d5b6:	18 f0       	brcs	.+6      	; 0xd5be <mmc_disk_initialize+0xec>
    d5b8:	11 e0       	ldi	r17, 0x01	; 1
    d5ba:	01 e0       	ldi	r16, 0x01	; 1
    d5bc:	02 c0       	rjmp	.+4      	; 0xd5c2 <mmc_disk_initialize+0xf0>
    d5be:	12 e0       	ldi	r17, 0x02	; 2
    d5c0:	09 ea       	ldi	r16, 0xA9	; 169
    d5c2:	a1 d3       	rcall	.+1858   	; 0xdd06 <mmc_test_timeout>
    d5c4:	89 2b       	or	r24, r25
    d5c6:	21 f0       	breq	.+8      	; 0xd5d0 <mmc_disk_initialize+0xfe>
    d5c8:	9e d3       	rcall	.+1852   	; 0xdd06 <mmc_test_timeout>
    d5ca:	89 2b       	or	r24, r25
    d5cc:	89 f4       	brne	.+34     	; 0xd5f0 <mmc_disk_initialize+0x11e>
    d5ce:	08 c0       	rjmp	.+16     	; 0xd5e0 <mmc_disk_initialize+0x10e>
    d5d0:	40 e0       	ldi	r20, 0x00	; 0
    d5d2:	50 e0       	ldi	r21, 0x00	; 0
    d5d4:	ba 01       	movw	r22, r20
    d5d6:	80 2f       	mov	r24, r16
    d5d8:	0f df       	rcall	.-482    	; 0xd3f8 <send_cmd>
    d5da:	81 11       	cpse	r24, r1
    d5dc:	f2 cf       	rjmp	.-28     	; 0xd5c2 <mmc_disk_initialize+0xf0>
    d5de:	f4 cf       	rjmp	.-24     	; 0xd5c8 <mmc_disk_initialize+0xf6>
    d5e0:	40 e0       	ldi	r20, 0x00	; 0
    d5e2:	52 e0       	ldi	r21, 0x02	; 2
    d5e4:	60 e0       	ldi	r22, 0x00	; 0
    d5e6:	70 e0       	ldi	r23, 0x00	; 0
    d5e8:	80 e1       	ldi	r24, 0x10	; 16
    d5ea:	06 df       	rcall	.-500    	; 0xd3f8 <send_cmd>
    d5ec:	88 23       	and	r24, r24
    d5ee:	19 f0       	breq	.+6      	; 0xd5f6 <mmc_disk_initialize+0x124>
    d5f0:	10 e0       	ldi	r17, 0x00	; 0
    d5f2:	01 c0       	rjmp	.+2      	; 0xd5f6 <mmc_disk_initialize+0x124>
    d5f4:	1c e0       	ldi	r17, 0x0C	; 12
    d5f6:	10 93 ef 17 	sts	0x17EF, r17	; 0x8017ef <CardType>
    d5fa:	9d de       	rcall	.-710    	; 0xd336 <deselect>
    d5fc:	11 23       	and	r17, r17
    d5fe:	39 f0       	breq	.+14     	; 0xd60e <mmc_disk_initialize+0x13c>
    d600:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <Stat>
    d604:	8e 7f       	andi	r24, 0xFE	; 254
    d606:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <Stat>
    d60a:	60 d3       	rcall	.+1728   	; 0xdccc <mmc_fast>
    d60c:	01 c0       	rjmp	.+2      	; 0xd610 <mmc_disk_initialize+0x13e>
    d60e:	3c d4       	rcall	.+2168   	; 0xde88 <mmc_power_off>
    d610:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <Stat>
    d614:	24 96       	adiw	r28, 0x04	; 4
    d616:	e8 e0       	ldi	r30, 0x08	; 8
    d618:	0c 94 04 e0 	jmp	0x1c008	; 0x1c008 <__epilogue_restores__+0x14>

0000d61c <mmc_disk_status>:
    d61c:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <Stat>
    d620:	08 95       	ret

0000d622 <mmc_disk_read>:
    d622:	ef 92       	push	r14
    d624:	ff 92       	push	r15
    d626:	1f 93       	push	r17
    d628:	cf 93       	push	r28
    d62a:	df 93       	push	r29
    d62c:	7c 01       	movw	r14, r24
    d62e:	e9 01       	movw	r28, r18
    d630:	20 97       	sbiw	r28, 0x00	; 0
    d632:	19 f4       	brne	.+6      	; 0xd63a <mmc_disk_read+0x18>
    d634:	80 de       	rcall	.-768    	; 0xd336 <deselect>
    d636:	84 e0       	ldi	r24, 0x04	; 4
    d638:	06 c0       	rjmp	.+12     	; 0xd646 <mmc_disk_read+0x24>
    d63a:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <Stat>
    d63e:	80 ff       	sbrs	r24, 0
    d640:	04 c0       	rjmp	.+8      	; 0xd64a <mmc_disk_read+0x28>
    d642:	79 de       	rcall	.-782    	; 0xd336 <deselect>
    d644:	83 e0       	ldi	r24, 0x03	; 3
    d646:	90 e0       	ldi	r25, 0x00	; 0
    d648:	2c c0       	rjmp	.+88     	; 0xd6a2 <mmc_disk_read+0x80>
    d64a:	80 91 ef 17 	lds	r24, 0x17EF	; 0x8017ef <CardType>
    d64e:	83 fd       	sbrc	r24, 3
    d650:	07 c0       	rjmp	.+14     	; 0xd660 <mmc_disk_read+0x3e>
    d652:	89 e0       	ldi	r24, 0x09	; 9
    d654:	44 0f       	add	r20, r20
    d656:	55 1f       	adc	r21, r21
    d658:	66 1f       	adc	r22, r22
    d65a:	77 1f       	adc	r23, r23
    d65c:	8a 95       	dec	r24
    d65e:	d1 f7       	brne	.-12     	; 0xd654 <mmc_disk_read+0x32>
    d660:	c2 30       	cpi	r28, 0x02	; 2
    d662:	d1 05       	cpc	r29, r1
    d664:	10 f4       	brcc	.+4      	; 0xd66a <mmc_disk_read+0x48>
    d666:	11 e1       	ldi	r17, 0x11	; 17
    d668:	01 c0       	rjmp	.+2      	; 0xd66c <mmc_disk_read+0x4a>
    d66a:	12 e1       	ldi	r17, 0x12	; 18
    d66c:	81 2f       	mov	r24, r17
    d66e:	c4 de       	rcall	.-632    	; 0xd3f8 <send_cmd>
    d670:	81 11       	cpse	r24, r1
    d672:	11 c0       	rjmp	.+34     	; 0xd696 <mmc_disk_read+0x74>
    d674:	60 e0       	ldi	r22, 0x00	; 0
    d676:	72 e0       	ldi	r23, 0x02	; 2
    d678:	c7 01       	movw	r24, r14
    d67a:	63 de       	rcall	.-826    	; 0xd342 <rcvr_datablock>
    d67c:	89 2b       	or	r24, r25
    d67e:	21 f0       	breq	.+8      	; 0xd688 <mmc_disk_read+0x66>
    d680:	8e ef       	ldi	r24, 0xFE	; 254
    d682:	f8 1a       	sub	r15, r24
    d684:	21 97       	sbiw	r28, 0x01	; 1
    d686:	b1 f7       	brne	.-20     	; 0xd674 <mmc_disk_read+0x52>
    d688:	12 31       	cpi	r17, 0x12	; 18
    d68a:	29 f4       	brne	.+10     	; 0xd696 <mmc_disk_read+0x74>
    d68c:	40 e0       	ldi	r20, 0x00	; 0
    d68e:	50 e0       	ldi	r21, 0x00	; 0
    d690:	ba 01       	movw	r22, r20
    d692:	8c e0       	ldi	r24, 0x0C	; 12
    d694:	b1 de       	rcall	.-670    	; 0xd3f8 <send_cmd>
    d696:	4f de       	rcall	.-866    	; 0xd336 <deselect>
    d698:	81 e0       	ldi	r24, 0x01	; 1
    d69a:	90 e0       	ldi	r25, 0x00	; 0
    d69c:	cd 2b       	or	r28, r29
    d69e:	09 f4       	brne	.+2      	; 0xd6a2 <mmc_disk_read+0x80>
    d6a0:	80 e0       	ldi	r24, 0x00	; 0
    d6a2:	df 91       	pop	r29
    d6a4:	cf 91       	pop	r28
    d6a6:	1f 91       	pop	r17
    d6a8:	ff 90       	pop	r15
    d6aa:	ef 90       	pop	r14
    d6ac:	08 95       	ret

0000d6ae <mmc_disk_write>:
    d6ae:	a0 e0       	ldi	r26, 0x00	; 0
    d6b0:	b0 e0       	ldi	r27, 0x00	; 0
    d6b2:	ed e5       	ldi	r30, 0x5D	; 93
    d6b4:	fb e6       	ldi	r31, 0x6B	; 107
    d6b6:	0c 94 e8 df 	jmp	0x1bfd0	; 0x1bfd0 <__prologue_saves__+0x14>
    d6ba:	8c 01       	movw	r16, r24
    d6bc:	6a 01       	movw	r12, r20
    d6be:	7b 01       	movw	r14, r22
    d6c0:	e9 01       	movw	r28, r18
    d6c2:	20 97       	sbiw	r28, 0x00	; 0
    d6c4:	19 f4       	brne	.+6      	; 0xd6cc <mmc_disk_write+0x1e>
    d6c6:	37 de       	rcall	.-914    	; 0xd336 <deselect>
    d6c8:	84 e0       	ldi	r24, 0x04	; 4
    d6ca:	06 c0       	rjmp	.+12     	; 0xd6d8 <mmc_disk_write+0x2a>
    d6cc:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <Stat>
    d6d0:	80 ff       	sbrs	r24, 0
    d6d2:	04 c0       	rjmp	.+8      	; 0xd6dc <mmc_disk_write+0x2e>
    d6d4:	30 de       	rcall	.-928    	; 0xd336 <deselect>
    d6d6:	83 e0       	ldi	r24, 0x03	; 3
    d6d8:	90 e0       	ldi	r25, 0x00	; 0
    d6da:	49 c0       	rjmp	.+146    	; 0xd76e <mmc_disk_write+0xc0>
    d6dc:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <Stat>
    d6e0:	82 ff       	sbrs	r24, 2
    d6e2:	03 c0       	rjmp	.+6      	; 0xd6ea <mmc_disk_write+0x3c>
    d6e4:	28 de       	rcall	.-944    	; 0xd336 <deselect>
    d6e6:	82 e0       	ldi	r24, 0x02	; 2
    d6e8:	f7 cf       	rjmp	.-18     	; 0xd6d8 <mmc_disk_write+0x2a>
    d6ea:	80 91 ef 17 	lds	r24, 0x17EF	; 0x8017ef <CardType>
    d6ee:	83 fd       	sbrc	r24, 3
    d6f0:	07 c0       	rjmp	.+14     	; 0xd700 <mmc_disk_write+0x52>
    d6f2:	99 e0       	ldi	r25, 0x09	; 9
    d6f4:	cc 0c       	add	r12, r12
    d6f6:	dd 1c       	adc	r13, r13
    d6f8:	ee 1c       	adc	r14, r14
    d6fa:	ff 1c       	adc	r15, r15
    d6fc:	9a 95       	dec	r25
    d6fe:	d1 f7       	brne	.-12     	; 0xd6f4 <mmc_disk_write+0x46>
    d700:	c1 30       	cpi	r28, 0x01	; 1
    d702:	d1 05       	cpc	r29, r1
    d704:	89 f4       	brne	.+34     	; 0xd728 <mmc_disk_write+0x7a>
    d706:	b7 01       	movw	r22, r14
    d708:	a6 01       	movw	r20, r12
    d70a:	88 e1       	ldi	r24, 0x18	; 24
    d70c:	75 de       	rcall	.-790    	; 0xd3f8 <send_cmd>
    d70e:	81 11       	cpse	r24, r1
    d710:	26 c0       	rjmp	.+76     	; 0xd75e <mmc_disk_write+0xb0>
    d712:	6e ef       	ldi	r22, 0xFE	; 254
    d714:	c8 01       	movw	r24, r16
    d716:	b3 de       	rcall	.-666    	; 0xd47e <xmit_datablock>
    d718:	31 e0       	ldi	r19, 0x01	; 1
    d71a:	20 e0       	ldi	r18, 0x00	; 0
    d71c:	89 2b       	or	r24, r25
    d71e:	09 f0       	breq	.+2      	; 0xd722 <mmc_disk_write+0x74>
    d720:	30 e0       	ldi	r19, 0x00	; 0
    d722:	c3 2f       	mov	r28, r19
    d724:	d2 2f       	mov	r29, r18
    d726:	1d c0       	rjmp	.+58     	; 0xd762 <mmc_disk_write+0xb4>
    d728:	86 70       	andi	r24, 0x06	; 6
    d72a:	29 f0       	breq	.+10     	; 0xd736 <mmc_disk_write+0x88>
    d72c:	ae 01       	movw	r20, r28
    d72e:	60 e0       	ldi	r22, 0x00	; 0
    d730:	70 e0       	ldi	r23, 0x00	; 0
    d732:	87 e9       	ldi	r24, 0x97	; 151
    d734:	61 de       	rcall	.-830    	; 0xd3f8 <send_cmd>
    d736:	b7 01       	movw	r22, r14
    d738:	a6 01       	movw	r20, r12
    d73a:	89 e1       	ldi	r24, 0x19	; 25
    d73c:	5d de       	rcall	.-838    	; 0xd3f8 <send_cmd>
    d73e:	81 11       	cpse	r24, r1
    d740:	10 c0       	rjmp	.+32     	; 0xd762 <mmc_disk_write+0xb4>
    d742:	6c ef       	ldi	r22, 0xFC	; 252
    d744:	c8 01       	movw	r24, r16
    d746:	9b de       	rcall	.-714    	; 0xd47e <xmit_datablock>
    d748:	89 2b       	or	r24, r25
    d74a:	19 f0       	breq	.+6      	; 0xd752 <mmc_disk_write+0xa4>
    d74c:	1e 5f       	subi	r17, 0xFE	; 254
    d74e:	21 97       	sbiw	r28, 0x01	; 1
    d750:	c1 f7       	brne	.-16     	; 0xd742 <mmc_disk_write+0x94>
    d752:	6d ef       	ldi	r22, 0xFD	; 253
    d754:	80 e0       	ldi	r24, 0x00	; 0
    d756:	90 e0       	ldi	r25, 0x00	; 0
    d758:	92 de       	rcall	.-732    	; 0xd47e <xmit_datablock>
    d75a:	89 2b       	or	r24, r25
    d75c:	11 f4       	brne	.+4      	; 0xd762 <mmc_disk_write+0xb4>
    d75e:	c1 e0       	ldi	r28, 0x01	; 1
    d760:	d0 e0       	ldi	r29, 0x00	; 0
    d762:	e9 dd       	rcall	.-1070   	; 0xd336 <deselect>
    d764:	81 e0       	ldi	r24, 0x01	; 1
    d766:	90 e0       	ldi	r25, 0x00	; 0
    d768:	cd 2b       	or	r28, r29
    d76a:	09 f4       	brne	.+2      	; 0xd76e <mmc_disk_write+0xc0>
    d76c:	80 e0       	ldi	r24, 0x00	; 0
    d76e:	cd b7       	in	r28, 0x3d	; 61
    d770:	de b7       	in	r29, 0x3e	; 62
    d772:	e8 e0       	ldi	r30, 0x08	; 8
    d774:	0c 94 04 e0 	jmp	0x1c008	; 0x1c008 <__epilogue_restores__+0x14>

0000d778 <mmc_disk_ioctl>:
    d778:	a0 e1       	ldi	r26, 0x10	; 16
    d77a:	b0 e0       	ldi	r27, 0x00	; 0
    d77c:	e2 ec       	ldi	r30, 0xC2	; 194
    d77e:	fb e6       	ldi	r31, 0x6B	; 107
    d780:	0c 94 e8 df 	jmp	0x1bfd0	; 0x1bfd0 <__prologue_saves__+0x14>
    d784:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <Stat>
    d788:	90 fd       	sbrc	r25, 0
    d78a:	2b c2       	rjmp	.+1110   	; 0xdbe2 <mmc_disk_ioctl+0x46a>
    d78c:	8b 01       	movw	r16, r22
    d78e:	83 33       	cpi	r24, 0x33	; 51
    d790:	09 f4       	brne	.+2      	; 0xd794 <mmc_disk_ioctl+0x1c>
    d792:	01 c1       	rjmp	.+514    	; 0xd996 <mmc_disk_ioctl+0x21e>
    d794:	a0 f4       	brcc	.+40     	; 0xd7be <mmc_disk_ioctl+0x46>
    d796:	83 30       	cpi	r24, 0x03	; 3
    d798:	09 f4       	brne	.+2      	; 0xd79c <mmc_disk_ioctl+0x24>
    d79a:	85 c0       	rjmp	.+266    	; 0xd8a6 <mmc_disk_ioctl+0x12e>
    d79c:	28 f4       	brcc	.+10     	; 0xd7a8 <mmc_disk_ioctl+0x30>
    d79e:	88 23       	and	r24, r24
    d7a0:	11 f1       	breq	.+68     	; 0xd7e6 <mmc_disk_ioctl+0x6e>
    d7a2:	81 30       	cpi	r24, 0x01	; 1
    d7a4:	11 f1       	breq	.+68     	; 0xd7ea <mmc_disk_ioctl+0x72>
    d7a6:	1f c2       	rjmp	.+1086   	; 0xdbe6 <mmc_disk_ioctl+0x46e>
    d7a8:	87 30       	cpi	r24, 0x07	; 7
    d7aa:	09 f4       	brne	.+2      	; 0xd7ae <mmc_disk_ioctl+0x36>
    d7ac:	2a c1       	rjmp	.+596    	; 0xda02 <mmc_disk_ioctl+0x28a>
    d7ae:	82 33       	cpi	r24, 0x32	; 50
    d7b0:	09 f0       	breq	.+2      	; 0xd7b4 <mmc_disk_ioctl+0x3c>
    d7b2:	19 c2       	rjmp	.+1074   	; 0xdbe6 <mmc_disk_ioctl+0x46e>
    d7b4:	80 91 ef 17 	lds	r24, 0x17EF	; 0x8017ef <CardType>
    d7b8:	fb 01       	movw	r30, r22
    d7ba:	80 83       	st	Z, r24
    d7bc:	28 c1       	rjmp	.+592    	; 0xda0e <mmc_disk_ioctl+0x296>
    d7be:	86 33       	cpi	r24, 0x36	; 54
    d7c0:	09 f4       	brne	.+2      	; 0xd7c4 <mmc_disk_ioctl+0x4c>
    d7c2:	0c c1       	rjmp	.+536    	; 0xd9dc <mmc_disk_ioctl+0x264>
    d7c4:	38 f4       	brcc	.+14     	; 0xd7d4 <mmc_disk_ioctl+0x5c>
    d7c6:	84 33       	cpi	r24, 0x34	; 52
    d7c8:	09 f4       	brne	.+2      	; 0xd7cc <mmc_disk_ioctl+0x54>
    d7ca:	ea c0       	rjmp	.+468    	; 0xd9a0 <mmc_disk_ioctl+0x228>
    d7cc:	85 33       	cpi	r24, 0x35	; 53
    d7ce:	09 f4       	brne	.+2      	; 0xd7d2 <mmc_disk_ioctl+0x5a>
    d7d0:	f1 c0       	rjmp	.+482    	; 0xd9b4 <mmc_disk_ioctl+0x23c>
    d7d2:	09 c2       	rjmp	.+1042   	; 0xdbe6 <mmc_disk_ioctl+0x46e>
    d7d4:	88 33       	cpi	r24, 0x38	; 56
    d7d6:	09 f4       	brne	.+2      	; 0xd7da <mmc_disk_ioctl+0x62>
    d7d8:	74 c1       	rjmp	.+744    	; 0xdac2 <mmc_disk_ioctl+0x34a>
    d7da:	08 f4       	brcc	.+2      	; 0xd7de <mmc_disk_ioctl+0x66>
    d7dc:	1a c1       	rjmp	.+564    	; 0xda12 <mmc_disk_ioctl+0x29a>
    d7de:	89 33       	cpi	r24, 0x39	; 57
    d7e0:	09 f4       	brne	.+2      	; 0xd7e4 <mmc_disk_ioctl+0x6c>
    d7e2:	bc c1       	rjmp	.+888    	; 0xdb5c <mmc_disk_ioctl+0x3e4>
    d7e4:	00 c2       	rjmp	.+1024   	; 0xdbe6 <mmc_disk_ioctl+0x46e>
    d7e6:	e6 dd       	rcall	.-1076   	; 0xd3b4 <select>
    d7e8:	06 c1       	rjmp	.+524    	; 0xd9f6 <mmc_disk_ioctl+0x27e>
    d7ea:	40 e0       	ldi	r20, 0x00	; 0
    d7ec:	50 e0       	ldi	r21, 0x00	; 0
    d7ee:	ba 01       	movw	r22, r20
    d7f0:	89 e0       	ldi	r24, 0x09	; 9
    d7f2:	02 de       	rcall	.-1020   	; 0xd3f8 <send_cmd>
    d7f4:	81 11       	cpse	r24, r1
    d7f6:	f1 c1       	rjmp	.+994    	; 0xdbda <mmc_disk_ioctl+0x462>
    d7f8:	60 e1       	ldi	r22, 0x10	; 16
    d7fa:	70 e0       	ldi	r23, 0x00	; 0
    d7fc:	ce 01       	movw	r24, r28
    d7fe:	01 96       	adiw	r24, 0x01	; 1
    d800:	a0 dd       	rcall	.-1216   	; 0xd342 <rcvr_datablock>
    d802:	89 2b       	or	r24, r25
    d804:	09 f4       	brne	.+2      	; 0xd808 <mmc_disk_ioctl+0x90>
    d806:	e9 c1       	rjmp	.+978    	; 0xdbda <mmc_disk_ioctl+0x462>
    d808:	99 81       	ldd	r25, Y+1	; 0x01
    d80a:	92 95       	swap	r25
    d80c:	96 95       	lsr	r25
    d80e:	96 95       	lsr	r25
    d810:	93 70       	andi	r25, 0x03	; 3
    d812:	29 85       	ldd	r18, Y+9	; 0x09
    d814:	4a 85       	ldd	r20, Y+10	; 0x0a
    d816:	88 85       	ldd	r24, Y+8	; 0x08
    d818:	91 30       	cpi	r25, 0x01	; 1
    d81a:	d9 f4       	brne	.+54     	; 0xd852 <mmc_disk_ioctl+0xda>
    d81c:	30 e0       	ldi	r19, 0x00	; 0
    d81e:	32 2f       	mov	r19, r18
    d820:	22 27       	eor	r18, r18
    d822:	24 0f       	add	r18, r20
    d824:	31 1d       	adc	r19, r1
    d826:	8f 73       	andi	r24, 0x3F	; 63
    d828:	90 e0       	ldi	r25, 0x00	; 0
    d82a:	a0 e0       	ldi	r26, 0x00	; 0
    d82c:	b0 e0       	ldi	r27, 0x00	; 0
    d82e:	dc 01       	movw	r26, r24
    d830:	99 27       	eor	r25, r25
    d832:	88 27       	eor	r24, r24
    d834:	01 96       	adiw	r24, 0x01	; 1
    d836:	a1 1d       	adc	r26, r1
    d838:	b1 1d       	adc	r27, r1
    d83a:	82 0f       	add	r24, r18
    d83c:	93 1f       	adc	r25, r19
    d83e:	a1 1d       	adc	r26, r1
    d840:	b1 1d       	adc	r27, r1
    d842:	fa e0       	ldi	r31, 0x0A	; 10
    d844:	88 0f       	add	r24, r24
    d846:	99 1f       	adc	r25, r25
    d848:	aa 1f       	adc	r26, r26
    d84a:	bb 1f       	adc	r27, r27
    d84c:	fa 95       	dec	r31
    d84e:	d1 f7       	brne	.-12     	; 0xd844 <mmc_disk_ioctl+0xcc>
    d850:	9b c0       	rjmp	.+310    	; 0xd988 <mmc_disk_ioctl+0x210>
    d852:	22 95       	swap	r18
    d854:	26 95       	lsr	r18
    d856:	26 95       	lsr	r18
    d858:	23 70       	andi	r18, 0x03	; 3
    d85a:	f4 e0       	ldi	r31, 0x04	; 4
    d85c:	8f 9f       	mul	r24, r31
    d85e:	c0 01       	movw	r24, r0
    d860:	11 24       	eor	r1, r1
    d862:	82 0f       	add	r24, r18
    d864:	91 1d       	adc	r25, r1
    d866:	01 96       	adiw	r24, 0x01	; 1
    d868:	2f 81       	ldd	r18, Y+7	; 0x07
    d86a:	23 70       	andi	r18, 0x03	; 3
    d86c:	30 e0       	ldi	r19, 0x00	; 0
    d86e:	32 2f       	mov	r19, r18
    d870:	22 27       	eor	r18, r18
    d872:	33 0f       	add	r19, r19
    d874:	33 0f       	add	r19, r19
    d876:	82 0f       	add	r24, r18
    d878:	93 1f       	adc	r25, r19
    d87a:	a0 e0       	ldi	r26, 0x00	; 0
    d87c:	b0 e0       	ldi	r27, 0x00	; 0
    d87e:	2e 81       	ldd	r18, Y+6	; 0x06
    d880:	32 2f       	mov	r19, r18
    d882:	3f 70       	andi	r19, 0x0F	; 15
    d884:	2b 85       	ldd	r18, Y+11	; 0x0b
    d886:	22 1f       	adc	r18, r18
    d888:	22 27       	eor	r18, r18
    d88a:	22 1f       	adc	r18, r18
    d88c:	23 0f       	add	r18, r19
    d88e:	43 70       	andi	r20, 0x03	; 3
    d890:	44 0f       	add	r20, r20
    d892:	42 0f       	add	r20, r18
    d894:	47 50       	subi	r20, 0x07	; 7
    d896:	04 c0       	rjmp	.+8      	; 0xd8a0 <mmc_disk_ioctl+0x128>
    d898:	88 0f       	add	r24, r24
    d89a:	99 1f       	adc	r25, r25
    d89c:	aa 1f       	adc	r26, r26
    d89e:	bb 1f       	adc	r27, r27
    d8a0:	4a 95       	dec	r20
    d8a2:	d2 f7       	brpl	.-12     	; 0xd898 <mmc_disk_ioctl+0x120>
    d8a4:	71 c0       	rjmp	.+226    	; 0xd988 <mmc_disk_ioctl+0x210>
    d8a6:	80 91 ef 17 	lds	r24, 0x17EF	; 0x8017ef <CardType>
    d8aa:	40 e0       	ldi	r20, 0x00	; 0
    d8ac:	50 e0       	ldi	r21, 0x00	; 0
    d8ae:	ba 01       	movw	r22, r20
    d8b0:	82 ff       	sbrs	r24, 2
    d8b2:	24 c0       	rjmp	.+72     	; 0xd8fc <mmc_disk_ioctl+0x184>
    d8b4:	8d e8       	ldi	r24, 0x8D	; 141
    d8b6:	a0 dd       	rcall	.-1216   	; 0xd3f8 <send_cmd>
    d8b8:	81 11       	cpse	r24, r1
    d8ba:	8f c1       	rjmp	.+798    	; 0xdbda <mmc_disk_ioctl+0x462>
    d8bc:	8f ef       	ldi	r24, 0xFF	; 255
    d8be:	39 dd       	rcall	.-1422   	; 0xd332 <xchg_spi>
    d8c0:	60 e1       	ldi	r22, 0x10	; 16
    d8c2:	70 e0       	ldi	r23, 0x00	; 0
    d8c4:	ce 01       	movw	r24, r28
    d8c6:	01 96       	adiw	r24, 0x01	; 1
    d8c8:	3c dd       	rcall	.-1416   	; 0xd342 <rcvr_datablock>
    d8ca:	89 2b       	or	r24, r25
    d8cc:	09 f4       	brne	.+2      	; 0xd8d0 <mmc_disk_ioctl+0x158>
    d8ce:	85 c1       	rjmp	.+778    	; 0xdbda <mmc_disk_ioctl+0x462>
    d8d0:	50 e3       	ldi	r21, 0x30	; 48
    d8d2:	f5 2e       	mov	r15, r21
    d8d4:	8f ef       	ldi	r24, 0xFF	; 255
    d8d6:	2d dd       	rcall	.-1446   	; 0xd332 <xchg_spi>
    d8d8:	fa 94       	dec	r15
    d8da:	f1 10       	cpse	r15, r1
    d8dc:	fb cf       	rjmp	.-10     	; 0xd8d4 <mmc_disk_ioctl+0x15c>
    d8de:	2b 85       	ldd	r18, Y+11	; 0x0b
    d8e0:	22 95       	swap	r18
    d8e2:	2f 70       	andi	r18, 0x0F	; 15
    d8e4:	80 e1       	ldi	r24, 0x10	; 16
    d8e6:	90 e0       	ldi	r25, 0x00	; 0
    d8e8:	a0 e0       	ldi	r26, 0x00	; 0
    d8ea:	b0 e0       	ldi	r27, 0x00	; 0
    d8ec:	04 c0       	rjmp	.+8      	; 0xd8f6 <mmc_disk_ioctl+0x17e>
    d8ee:	88 0f       	add	r24, r24
    d8f0:	99 1f       	adc	r25, r25
    d8f2:	aa 1f       	adc	r26, r26
    d8f4:	bb 1f       	adc	r27, r27
    d8f6:	2a 95       	dec	r18
    d8f8:	d2 f7       	brpl	.-12     	; 0xd8ee <mmc_disk_ioctl+0x176>
    d8fa:	46 c0       	rjmp	.+140    	; 0xd988 <mmc_disk_ioctl+0x210>
    d8fc:	89 e0       	ldi	r24, 0x09	; 9
    d8fe:	7c dd       	rcall	.-1288   	; 0xd3f8 <send_cmd>
    d900:	81 11       	cpse	r24, r1
    d902:	6b c1       	rjmp	.+726    	; 0xdbda <mmc_disk_ioctl+0x462>
    d904:	60 e1       	ldi	r22, 0x10	; 16
    d906:	70 e0       	ldi	r23, 0x00	; 0
    d908:	ce 01       	movw	r24, r28
    d90a:	01 96       	adiw	r24, 0x01	; 1
    d90c:	1a dd       	rcall	.-1484   	; 0xd342 <rcvr_datablock>
    d90e:	89 2b       	or	r24, r25
    d910:	09 f4       	brne	.+2      	; 0xd914 <mmc_disk_ioctl+0x19c>
    d912:	63 c1       	rjmp	.+710    	; 0xdbda <mmc_disk_ioctl+0x462>
    d914:	90 91 ef 17 	lds	r25, 0x17EF	; 0x8017ef <CardType>
    d918:	2b 85       	ldd	r18, Y+11	; 0x0b
    d91a:	8c 85       	ldd	r24, Y+12	; 0x0c
    d91c:	91 ff       	sbrs	r25, 1
    d91e:	16 c0       	rjmp	.+44     	; 0xd94c <mmc_disk_ioctl+0x1d4>
    d920:	2f 73       	andi	r18, 0x3F	; 63
    d922:	88 1f       	adc	r24, r24
    d924:	88 27       	eor	r24, r24
    d926:	88 1f       	adc	r24, r24
    d928:	90 e0       	ldi	r25, 0x00	; 0
    d92a:	01 96       	adiw	r24, 0x01	; 1
    d92c:	82 0f       	add	r24, r18
    d92e:	91 1d       	adc	r25, r1
    d930:	82 0f       	add	r24, r18
    d932:	91 1d       	adc	r25, r1
    d934:	2e 85       	ldd	r18, Y+14	; 0x0e
    d936:	22 95       	swap	r18
    d938:	26 95       	lsr	r18
    d93a:	26 95       	lsr	r18
    d93c:	23 70       	andi	r18, 0x03	; 3
    d93e:	21 50       	subi	r18, 0x01	; 1
    d940:	02 c0       	rjmp	.+4      	; 0xd946 <mmc_disk_ioctl+0x1ce>
    d942:	88 0f       	add	r24, r24
    d944:	99 1f       	adc	r25, r25
    d946:	2a 95       	dec	r18
    d948:	e2 f7       	brpl	.-8      	; 0xd942 <mmc_disk_ioctl+0x1ca>
    d94a:	1c c0       	rjmp	.+56     	; 0xd984 <mmc_disk_ioctl+0x20c>
    d94c:	38 2f       	mov	r19, r24
    d94e:	33 70       	andi	r19, 0x03	; 3
    d950:	82 95       	swap	r24
    d952:	86 95       	lsr	r24
    d954:	87 70       	andi	r24, 0x07	; 7
    d956:	90 e0       	ldi	r25, 0x00	; 0
    d958:	f8 e0       	ldi	r31, 0x08	; 8
    d95a:	3f 9f       	mul	r19, r31
    d95c:	80 0d       	add	r24, r0
    d95e:	91 1d       	adc	r25, r1
    d960:	11 24       	eor	r1, r1
    d962:	01 96       	adiw	r24, 0x01	; 1
    d964:	2c 77       	andi	r18, 0x7C	; 124
    d966:	30 e0       	ldi	r19, 0x00	; 0
    d968:	35 95       	asr	r19
    d96a:	27 95       	ror	r18
    d96c:	35 95       	asr	r19
    d96e:	27 95       	ror	r18
    d970:	2f 5f       	subi	r18, 0xFF	; 255
    d972:	3f 4f       	sbci	r19, 0xFF	; 255
    d974:	82 9f       	mul	r24, r18
    d976:	a0 01       	movw	r20, r0
    d978:	83 9f       	mul	r24, r19
    d97a:	50 0d       	add	r21, r0
    d97c:	92 9f       	mul	r25, r18
    d97e:	50 0d       	add	r21, r0
    d980:	11 24       	eor	r1, r1
    d982:	ca 01       	movw	r24, r20
    d984:	a0 e0       	ldi	r26, 0x00	; 0
    d986:	b0 e0       	ldi	r27, 0x00	; 0
    d988:	f8 01       	movw	r30, r16
    d98a:	80 83       	st	Z, r24
    d98c:	91 83       	std	Z+1, r25	; 0x01
    d98e:	a2 83       	std	Z+2, r26	; 0x02
    d990:	b3 83       	std	Z+3, r27	; 0x03
    d992:	00 e0       	ldi	r16, 0x00	; 0
    d994:	23 c1       	rjmp	.+582    	; 0xdbdc <mmc_disk_ioctl+0x464>
    d996:	40 e0       	ldi	r20, 0x00	; 0
    d998:	50 e0       	ldi	r21, 0x00	; 0
    d99a:	ba 01       	movw	r22, r20
    d99c:	89 e0       	ldi	r24, 0x09	; 9
    d99e:	04 c0       	rjmp	.+8      	; 0xd9a8 <mmc_disk_ioctl+0x230>
    d9a0:	40 e0       	ldi	r20, 0x00	; 0
    d9a2:	50 e0       	ldi	r21, 0x00	; 0
    d9a4:	ba 01       	movw	r22, r20
    d9a6:	8a e0       	ldi	r24, 0x0A	; 10
    d9a8:	27 dd       	rcall	.-1458   	; 0xd3f8 <send_cmd>
    d9aa:	81 11       	cpse	r24, r1
    d9ac:	16 c1       	rjmp	.+556    	; 0xdbda <mmc_disk_ioctl+0x462>
    d9ae:	60 e1       	ldi	r22, 0x10	; 16
    d9b0:	70 e0       	ldi	r23, 0x00	; 0
    d9b2:	1f c0       	rjmp	.+62     	; 0xd9f2 <mmc_disk_ioctl+0x27a>
    d9b4:	40 e0       	ldi	r20, 0x00	; 0
    d9b6:	50 e0       	ldi	r21, 0x00	; 0
    d9b8:	ba 01       	movw	r22, r20
    d9ba:	8a e3       	ldi	r24, 0x3A	; 58
    d9bc:	1d dd       	rcall	.-1478   	; 0xd3f8 <send_cmd>
    d9be:	81 11       	cpse	r24, r1
    d9c0:	0c c1       	rjmp	.+536    	; 0xdbda <mmc_disk_ioctl+0x462>
    d9c2:	78 01       	movw	r14, r16
    d9c4:	f4 e0       	ldi	r31, 0x04	; 4
    d9c6:	ef 0e       	add	r14, r31
    d9c8:	f1 1c       	adc	r15, r1
    d9ca:	8f ef       	ldi	r24, 0xFF	; 255
    d9cc:	92 d1       	rcall	.+804    	; 0xdcf2 <mmc_spi_TXRX>
    d9ce:	f8 01       	movw	r30, r16
    d9d0:	81 93       	st	Z+, r24
    d9d2:	8f 01       	movw	r16, r30
    d9d4:	ee 15       	cp	r30, r14
    d9d6:	ff 05       	cpc	r31, r15
    d9d8:	c1 f7       	brne	.-16     	; 0xd9ca <mmc_disk_ioctl+0x252>
    d9da:	db cf       	rjmp	.-74     	; 0xd992 <mmc_disk_ioctl+0x21a>
    d9dc:	40 e0       	ldi	r20, 0x00	; 0
    d9de:	50 e0       	ldi	r21, 0x00	; 0
    d9e0:	ba 01       	movw	r22, r20
    d9e2:	8d e8       	ldi	r24, 0x8D	; 141
    d9e4:	09 dd       	rcall	.-1518   	; 0xd3f8 <send_cmd>
    d9e6:	81 11       	cpse	r24, r1
    d9e8:	f8 c0       	rjmp	.+496    	; 0xdbda <mmc_disk_ioctl+0x462>
    d9ea:	8f ef       	ldi	r24, 0xFF	; 255
    d9ec:	a2 dc       	rcall	.-1724   	; 0xd332 <xchg_spi>
    d9ee:	60 e4       	ldi	r22, 0x40	; 64
    d9f0:	70 e0       	ldi	r23, 0x00	; 0
    d9f2:	c8 01       	movw	r24, r16
    d9f4:	a6 dc       	rcall	.-1716   	; 0xd342 <rcvr_datablock>
    d9f6:	01 e0       	ldi	r16, 0x01	; 1
    d9f8:	10 e0       	ldi	r17, 0x00	; 0
    d9fa:	89 2b       	or	r24, r25
    d9fc:	09 f4       	brne	.+2      	; 0xda00 <mmc_disk_ioctl+0x288>
    d9fe:	ef c0       	rjmp	.+478    	; 0xdbde <mmc_disk_ioctl+0x466>
    da00:	ea c0       	rjmp	.+468    	; 0xdbd6 <mmc_disk_ioctl+0x45e>
    da02:	42 d2       	rcall	.+1156   	; 0xde88 <mmc_power_off>
    da04:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <Stat>
    da08:	81 60       	ori	r24, 0x01	; 1
    da0a:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <Stat>
    da0e:	00 e0       	ldi	r16, 0x00	; 0
    da10:	eb c0       	rjmp	.+470    	; 0xdbe8 <mmc_disk_ioctl+0x470>
    da12:	fb 01       	movw	r30, r22
    da14:	43 81       	ldd	r20, Z+3	; 0x03
    da16:	54 81       	ldd	r21, Z+4	; 0x04
    da18:	65 81       	ldd	r22, Z+5	; 0x05
    da1a:	76 81       	ldd	r23, Z+6	; 0x06
    da1c:	39 e0       	ldi	r19, 0x09	; 9
    da1e:	44 0f       	add	r20, r20
    da20:	55 1f       	adc	r21, r21
    da22:	66 1f       	adc	r22, r22
    da24:	77 1f       	adc	r23, r23
    da26:	3a 95       	dec	r19
    da28:	d1 f7       	brne	.-12     	; 0xda1e <mmc_disk_ioctl+0x2a6>
    da2a:	70 68       	ori	r23, 0x80	; 128
    da2c:	80 81       	ld	r24, Z
    da2e:	90 e0       	ldi	r25, 0x00	; 0
    da30:	a0 e0       	ldi	r26, 0x00	; 0
    da32:	b0 e0       	ldi	r27, 0x00	; 0
    da34:	2c e1       	ldi	r18, 0x1C	; 28
    da36:	88 0f       	add	r24, r24
    da38:	99 1f       	adc	r25, r25
    da3a:	aa 1f       	adc	r26, r26
    da3c:	bb 1f       	adc	r27, r27
    da3e:	2a 95       	dec	r18
    da40:	d1 f7       	brne	.-12     	; 0xda36 <mmc_disk_ioctl+0x2be>
    da42:	48 2b       	or	r20, r24
    da44:	59 2b       	or	r21, r25
    da46:	6a 2b       	or	r22, r26
    da48:	7b 2b       	or	r23, r27
    da4a:	81 81       	ldd	r24, Z+1	; 0x01
    da4c:	92 81       	ldd	r25, Z+2	; 0x02
    da4e:	01 97       	sbiw	r24, 0x01	; 1
    da50:	91 70       	andi	r25, 0x01	; 1
    da52:	a0 e0       	ldi	r26, 0x00	; 0
    da54:	b0 e0       	ldi	r27, 0x00	; 0
    da56:	48 2b       	or	r20, r24
    da58:	59 2b       	or	r21, r25
    da5a:	6a 2b       	or	r22, r26
    da5c:	7b 2b       	or	r23, r27
    da5e:	80 e3       	ldi	r24, 0x30	; 48
    da60:	cb dc       	rcall	.-1642   	; 0xd3f8 <send_cmd>
    da62:	81 11       	cpse	r24, r1
    da64:	ba c0       	rjmp	.+372    	; 0xdbda <mmc_disk_ioctl+0x462>
    da66:	88 ee       	ldi	r24, 0xE8	; 232
    da68:	93 e0       	ldi	r25, 0x03	; 3
    da6a:	46 d1       	rcall	.+652    	; 0xdcf8 <mmc_set_ms_timeout>
    da6c:	8f ef       	ldi	r24, 0xFF	; 255
    da6e:	41 d1       	rcall	.+642    	; 0xdcf2 <mmc_spi_TXRX>
    da70:	8f 3f       	cpi	r24, 0xFF	; 255
    da72:	21 f4       	brne	.+8      	; 0xda7c <mmc_disk_ioctl+0x304>
    da74:	48 d1       	rcall	.+656    	; 0xdd06 <mmc_test_timeout>
    da76:	89 2b       	or	r24, r25
    da78:	c9 f3       	breq	.-14     	; 0xda6c <mmc_disk_ioctl+0x2f4>
    da7a:	af c0       	rjmp	.+350    	; 0xdbda <mmc_disk_ioctl+0x462>
    da7c:	8e 3f       	cpi	r24, 0xFE	; 254
    da7e:	09 f0       	breq	.+2      	; 0xda82 <mmc_disk_ioctl+0x30a>
    da80:	ac c0       	rjmp	.+344    	; 0xdbda <mmc_disk_ioctl+0x462>
    da82:	f8 01       	movw	r30, r16
    da84:	e7 80       	ldd	r14, Z+7	; 0x07
    da86:	f0 84       	ldd	r15, Z+8	; 0x08
    da88:	c1 80       	ldd	r12, Z+1	; 0x01
    da8a:	d2 80       	ldd	r13, Z+2	; 0x02
    da8c:	ce 0c       	add	r12, r14
    da8e:	df 1c       	adc	r13, r15
    da90:	ce 14       	cp	r12, r14
    da92:	df 04       	cpc	r13, r15
    da94:	31 f0       	breq	.+12     	; 0xdaa2 <mmc_disk_ioctl+0x32a>
    da96:	8f ef       	ldi	r24, 0xFF	; 255
    da98:	2c d1       	rcall	.+600    	; 0xdcf2 <mmc_spi_TXRX>
    da9a:	f7 01       	movw	r30, r14
    da9c:	81 93       	st	Z+, r24
    da9e:	7f 01       	movw	r14, r30
    daa0:	f7 cf       	rjmp	.-18     	; 0xda90 <mmc_disk_ioctl+0x318>
    daa2:	f8 01       	movw	r30, r16
    daa4:	81 81       	ldd	r24, Z+1	; 0x01
    daa6:	92 81       	ldd	r25, Z+2	; 0x02
    daa8:	02 e0       	ldi	r16, 0x02	; 2
    daaa:	12 e0       	ldi	r17, 0x02	; 2
    daac:	08 1b       	sub	r16, r24
    daae:	19 0b       	sbc	r17, r25
    dab0:	01 15       	cp	r16, r1
    dab2:	11 05       	cpc	r17, r1
    dab4:	09 f4       	brne	.+2      	; 0xdab8 <mmc_disk_ioctl+0x340>
    dab6:	6d cf       	rjmp	.-294    	; 0xd992 <mmc_disk_ioctl+0x21a>
    dab8:	8f ef       	ldi	r24, 0xFF	; 255
    daba:	3b dc       	rcall	.-1930   	; 0xd332 <xchg_spi>
    dabc:	01 50       	subi	r16, 0x01	; 1
    dabe:	11 09       	sbc	r17, r1
    dac0:	f7 cf       	rjmp	.-18     	; 0xdab0 <mmc_disk_ioctl+0x338>
    dac2:	fb 01       	movw	r30, r22
    dac4:	43 81       	ldd	r20, Z+3	; 0x03
    dac6:	54 81       	ldd	r21, Z+4	; 0x04
    dac8:	65 81       	ldd	r22, Z+5	; 0x05
    daca:	76 81       	ldd	r23, Z+6	; 0x06
    dacc:	39 e0       	ldi	r19, 0x09	; 9
    dace:	44 0f       	add	r20, r20
    dad0:	55 1f       	adc	r21, r21
    dad2:	66 1f       	adc	r22, r22
    dad4:	77 1f       	adc	r23, r23
    dad6:	3a 95       	dec	r19
    dad8:	d1 f7       	brne	.-12     	; 0xdace <mmc_disk_ioctl+0x356>
    dada:	70 68       	ori	r23, 0x80	; 128
    dadc:	80 81       	ld	r24, Z
    dade:	90 e0       	ldi	r25, 0x00	; 0
    dae0:	a0 e0       	ldi	r26, 0x00	; 0
    dae2:	b0 e0       	ldi	r27, 0x00	; 0
    dae4:	2c e1       	ldi	r18, 0x1C	; 28
    dae6:	88 0f       	add	r24, r24
    dae8:	99 1f       	adc	r25, r25
    daea:	aa 1f       	adc	r26, r26
    daec:	bb 1f       	adc	r27, r27
    daee:	2a 95       	dec	r18
    daf0:	d1 f7       	brne	.-12     	; 0xdae6 <mmc_disk_ioctl+0x36e>
    daf2:	48 2b       	or	r20, r24
    daf4:	59 2b       	or	r21, r25
    daf6:	6a 2b       	or	r22, r26
    daf8:	7b 2b       	or	r23, r27
    dafa:	81 81       	ldd	r24, Z+1	; 0x01
    dafc:	92 81       	ldd	r25, Z+2	; 0x02
    dafe:	01 97       	sbiw	r24, 0x01	; 1
    db00:	91 70       	andi	r25, 0x01	; 1
    db02:	a0 e0       	ldi	r26, 0x00	; 0
    db04:	b0 e0       	ldi	r27, 0x00	; 0
    db06:	48 2b       	or	r20, r24
    db08:	59 2b       	or	r21, r25
    db0a:	6a 2b       	or	r22, r26
    db0c:	7b 2b       	or	r23, r27
    db0e:	81 e3       	ldi	r24, 0x31	; 49
    db10:	73 dc       	rcall	.-1818   	; 0xd3f8 <send_cmd>
    db12:	81 11       	cpse	r24, r1
    db14:	62 c0       	rjmp	.+196    	; 0xdbda <mmc_disk_ioctl+0x462>
    db16:	8f ef       	ldi	r24, 0xFF	; 255
    db18:	0c dc       	rcall	.-2024   	; 0xd332 <xchg_spi>
    db1a:	8e ef       	ldi	r24, 0xFE	; 254
    db1c:	0a dc       	rcall	.-2028   	; 0xd332 <xchg_spi>
    db1e:	f8 01       	movw	r30, r16
    db20:	e7 80       	ldd	r14, Z+7	; 0x07
    db22:	f0 84       	ldd	r15, Z+8	; 0x08
    db24:	c1 80       	ldd	r12, Z+1	; 0x01
    db26:	d2 80       	ldd	r13, Z+2	; 0x02
    db28:	ce 0c       	add	r12, r14
    db2a:	df 1c       	adc	r13, r15
    db2c:	ec 14       	cp	r14, r12
    db2e:	fd 04       	cpc	r15, r13
    db30:	29 f0       	breq	.+10     	; 0xdb3c <mmc_disk_ioctl+0x3c4>
    db32:	f7 01       	movw	r30, r14
    db34:	81 91       	ld	r24, Z+
    db36:	7f 01       	movw	r14, r30
    db38:	fc db       	rcall	.-2056   	; 0xd332 <xchg_spi>
    db3a:	f8 cf       	rjmp	.-16     	; 0xdb2c <mmc_disk_ioctl+0x3b4>
    db3c:	f8 01       	movw	r30, r16
    db3e:	81 81       	ldd	r24, Z+1	; 0x01
    db40:	92 81       	ldd	r25, Z+2	; 0x02
    db42:	02 e0       	ldi	r16, 0x02	; 2
    db44:	12 e0       	ldi	r17, 0x02	; 2
    db46:	08 1b       	sub	r16, r24
    db48:	19 0b       	sbc	r17, r25
    db4a:	8f ef       	ldi	r24, 0xFF	; 255
    db4c:	01 15       	cp	r16, r1
    db4e:	11 05       	cpc	r17, r1
    db50:	09 f4       	brne	.+2      	; 0xdb54 <mmc_disk_ioctl+0x3dc>
    db52:	3b c0       	rjmp	.+118    	; 0xdbca <mmc_disk_ioctl+0x452>
    db54:	ee db       	rcall	.-2084   	; 0xd332 <xchg_spi>
    db56:	01 50       	subi	r16, 0x01	; 1
    db58:	11 09       	sbc	r17, r1
    db5a:	f7 cf       	rjmp	.-18     	; 0xdb4a <mmc_disk_ioctl+0x3d2>
    db5c:	fb 01       	movw	r30, r22
    db5e:	43 81       	ldd	r20, Z+3	; 0x03
    db60:	54 81       	ldd	r21, Z+4	; 0x04
    db62:	65 81       	ldd	r22, Z+5	; 0x05
    db64:	76 81       	ldd	r23, Z+6	; 0x06
    db66:	89 e0       	ldi	r24, 0x09	; 9
    db68:	44 0f       	add	r20, r20
    db6a:	55 1f       	adc	r21, r21
    db6c:	66 1f       	adc	r22, r22
    db6e:	77 1f       	adc	r23, r23
    db70:	8a 95       	dec	r24
    db72:	d1 f7       	brne	.-12     	; 0xdb68 <mmc_disk_ioctl+0x3f0>
    db74:	74 68       	ori	r23, 0x84	; 132
    db76:	80 81       	ld	r24, Z
    db78:	90 e0       	ldi	r25, 0x00	; 0
    db7a:	a0 e0       	ldi	r26, 0x00	; 0
    db7c:	b0 e0       	ldi	r27, 0x00	; 0
    db7e:	2c e1       	ldi	r18, 0x1C	; 28
    db80:	88 0f       	add	r24, r24
    db82:	99 1f       	adc	r25, r25
    db84:	aa 1f       	adc	r26, r26
    db86:	bb 1f       	adc	r27, r27
    db88:	2a 95       	dec	r18
    db8a:	d1 f7       	brne	.-12     	; 0xdb80 <mmc_disk_ioctl+0x408>
    db8c:	48 2b       	or	r20, r24
    db8e:	59 2b       	or	r21, r25
    db90:	6a 2b       	or	r22, r26
    db92:	7b 2b       	or	r23, r27
    db94:	82 81       	ldd	r24, Z+2	; 0x02
    db96:	90 e0       	ldi	r25, 0x00	; 0
    db98:	a0 e0       	ldi	r26, 0x00	; 0
    db9a:	b0 e0       	ldi	r27, 0x00	; 0
    db9c:	48 2b       	or	r20, r24
    db9e:	59 2b       	or	r21, r25
    dba0:	6a 2b       	or	r22, r26
    dba2:	7b 2b       	or	r23, r27
    dba4:	81 e3       	ldi	r24, 0x31	; 49
    dba6:	28 dc       	rcall	.-1968   	; 0xd3f8 <send_cmd>
    dba8:	81 11       	cpse	r24, r1
    dbaa:	17 c0       	rjmp	.+46     	; 0xdbda <mmc_disk_ioctl+0x462>
    dbac:	8f ef       	ldi	r24, 0xFF	; 255
    dbae:	c1 db       	rcall	.-2174   	; 0xd332 <xchg_spi>
    dbb0:	8e ef       	ldi	r24, 0xFE	; 254
    dbb2:	bf db       	rcall	.-2178   	; 0xd332 <xchg_spi>
    dbb4:	f8 01       	movw	r30, r16
    dbb6:	81 81       	ldd	r24, Z+1	; 0x01
    dbb8:	bc db       	rcall	.-2184   	; 0xd332 <xchg_spi>
    dbba:	01 e0       	ldi	r16, 0x01	; 1
    dbbc:	12 e0       	ldi	r17, 0x02	; 2
    dbbe:	8f ef       	ldi	r24, 0xFF	; 255
    dbc0:	b8 db       	rcall	.-2192   	; 0xd332 <xchg_spi>
    dbc2:	01 50       	subi	r16, 0x01	; 1
    dbc4:	11 09       	sbc	r17, r1
    dbc6:	d9 f7       	brne	.-10     	; 0xdbbe <mmc_disk_ioctl+0x446>
    dbc8:	8f ef       	ldi	r24, 0xFF	; 255
    dbca:	93 d0       	rcall	.+294    	; 0xdcf2 <mmc_spi_TXRX>
    dbcc:	8f 71       	andi	r24, 0x1F	; 31
    dbce:	01 e0       	ldi	r16, 0x01	; 1
    dbd0:	10 e0       	ldi	r17, 0x00	; 0
    dbd2:	85 30       	cpi	r24, 0x05	; 5
    dbd4:	21 f4       	brne	.+8      	; 0xdbde <mmc_disk_ioctl+0x466>
    dbd6:	00 e0       	ldi	r16, 0x00	; 0
    dbd8:	02 c0       	rjmp	.+4      	; 0xdbde <mmc_disk_ioctl+0x466>
    dbda:	01 e0       	ldi	r16, 0x01	; 1
    dbdc:	10 e0       	ldi	r17, 0x00	; 0
    dbde:	ab db       	rcall	.-2218   	; 0xd336 <deselect>
    dbe0:	04 c0       	rjmp	.+8      	; 0xdbea <mmc_disk_ioctl+0x472>
    dbe2:	03 e0       	ldi	r16, 0x03	; 3
    dbe4:	01 c0       	rjmp	.+2      	; 0xdbe8 <mmc_disk_ioctl+0x470>
    dbe6:	04 e0       	ldi	r16, 0x04	; 4
    dbe8:	10 e0       	ldi	r17, 0x00	; 0
    dbea:	c8 01       	movw	r24, r16
    dbec:	60 96       	adiw	r28, 0x10	; 16
    dbee:	e8 e0       	ldi	r30, 0x08	; 8
    dbf0:	0c 94 04 e0 	jmp	0x1c008	; 0x1c008 <__epilogue_restores__+0x14>

0000dbf4 <mmc_disk_timerproc>:
    dbf4:	80 91 f1 17 	lds	r24, 0x17F1	; 0x8017f1 <Timer1>
    dbf8:	88 23       	and	r24, r24
    dbfa:	19 f0       	breq	.+6      	; 0xdc02 <mmc_disk_timerproc+0xe>
    dbfc:	81 50       	subi	r24, 0x01	; 1
    dbfe:	80 93 f1 17 	sts	0x17F1, r24	; 0x8017f1 <Timer1>
    dc02:	80 91 f0 17 	lds	r24, 0x17F0	; 0x8017f0 <Timer2>
    dc06:	88 23       	and	r24, r24
    dc08:	19 f0       	breq	.+6      	; 0xdc10 <mmc_disk_timerproc+0x1c>
    dc0a:	81 50       	subi	r24, 0x01	; 1
    dc0c:	80 93 f0 17 	sts	0x17F0, r24	; 0x8017f0 <Timer2>
    dc10:	08 95       	ret

0000dc12 <mmc_task>:
void mmc_ms_wait(int ms)
{
    mmc_set_ms_timeout(ms);
    while(!mmc_test_timeout())
        ;
}
    dc12:	80 91 fa 17 	lds	r24, 0x17FA	; 0x8017fa <_mmc_timeout>
    dc16:	90 91 fb 17 	lds	r25, 0x17FB	; 0x8017fb <_mmc_timeout+0x1>
    dc1a:	00 97       	sbiw	r24, 0x00	; 0
    dc1c:	29 f0       	breq	.+10     	; 0xdc28 <mmc_task+0x16>
    dc1e:	01 97       	sbiw	r24, 0x01	; 1
    dc20:	90 93 fb 17 	sts	0x17FB, r25	; 0x8017fb <_mmc_timeout+0x1>
    dc24:	80 93 fa 17 	sts	0x17FA, r24	; 0x8017fa <_mmc_timeout>
    dc28:	80 91 f4 17 	lds	r24, 0x17F4	; 0x8017f4 <_mmc_pre>
    dc2c:	90 91 f5 17 	lds	r25, 0x17F5	; 0x8017f5 <_mmc_pre+0x1>
    dc30:	8a 30       	cpi	r24, 0x0A	; 10
    dc32:	91 05       	cpc	r25, r1
    dc34:	30 f4       	brcc	.+12     	; 0xdc42 <mmc_task+0x30>
    dc36:	01 96       	adiw	r24, 0x01	; 1
    dc38:	90 93 f5 17 	sts	0x17F5, r25	; 0x8017f5 <_mmc_pre+0x1>
    dc3c:	80 93 f4 17 	sts	0x17F4, r24	; 0x8017f4 <_mmc_pre>
    dc40:	08 95       	ret
    dc42:	10 92 f5 17 	sts	0x17F5, r1	; 0x8017f5 <_mmc_pre+0x1>
    dc46:	10 92 f4 17 	sts	0x17F4, r1	; 0x8017f4 <_mmc_pre>
    dc4a:	d4 cf       	rjmp	.-88     	; 0xdbf4 <mmc_disk_timerproc>
    dc4c:	08 95       	ret

0000dc4e <mmc_install_timer>:
    dc4e:	00 d0       	rcall	.+0      	; 0xdc50 <mmc_install_timer+0x2>
    dc50:	1f 92       	push	r1
    dc52:	10 92 fb 17 	sts	0x17FB, r1	; 0x8017fb <_mmc_timeout+0x1>
    dc56:	10 92 fa 17 	sts	0x17FA, r1	; 0x8017fa <_mmc_timeout>
    dc5a:	61 e0       	ldi	r22, 0x01	; 1
    dc5c:	70 e0       	ldi	r23, 0x00	; 0
    dc5e:	89 e0       	ldi	r24, 0x09	; 9
    dc60:	9e e6       	ldi	r25, 0x6E	; 110
    dc62:	0e 94 0a 34 	call	0x6814	; 0x6814 <set_timers>
    dc66:	01 96       	adiw	r24, 0x01	; 1
    dc68:	51 f4       	brne	.+20     	; 0xdc7e <mmc_install_timer+0x30>
    dc6a:	8b eb       	ldi	r24, 0xBB	; 187
    dc6c:	97 e0       	ldi	r25, 0x07	; 7
    dc6e:	a0 e0       	ldi	r26, 0x00	; 0
    dc70:	ed b7       	in	r30, 0x3d	; 61
    dc72:	fe b7       	in	r31, 0x3e	; 62
    dc74:	81 83       	std	Z+1, r24	; 0x01
    dc76:	92 83       	std	Z+2, r25	; 0x02
    dc78:	a3 83       	std	Z+3, r26	; 0x03
    dc7a:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    dc7e:	0f 90       	pop	r0
    dc80:	0f 90       	pop	r0
    dc82:	0f 90       	pop	r0
    dc84:	08 95       	ret

0000dc86 <mmc_spi_begin>:
    dc86:	60 91 f6 17 	lds	r22, 0x17F6	; 0x8017f6 <_mmc_clock>
    dc8a:	70 91 f7 17 	lds	r23, 0x17F7	; 0x8017f7 <_mmc_clock+0x1>
    dc8e:	80 91 f8 17 	lds	r24, 0x17F8	; 0x8017f8 <_mmc_clock+0x2>
    dc92:	90 91 f9 17 	lds	r25, 0x17F9	; 0x8017f9 <_mmc_clock+0x3>
    dc96:	4b e0       	ldi	r20, 0x0B	; 11
    dc98:	50 e0       	ldi	r21, 0x00	; 0
    dc9a:	0c 94 b0 26 	jmp	0x4d60	; 0x4d60 <spi_begin>
    dc9e:	08 95       	ret

0000dca0 <mmc_spi_end>:
    dca0:	8b e0       	ldi	r24, 0x0B	; 11
    dca2:	0c 94 4c 26 	jmp	0x4c98	; 0x4c98 <spi_end>
    dca6:	08 95       	ret

0000dca8 <mmc_slow>:
    dca8:	80 e2       	ldi	r24, 0x20	; 32
    dcaa:	91 ea       	ldi	r25, 0xA1	; 161
    dcac:	a7 e0       	ldi	r26, 0x07	; 7
    dcae:	b0 e0       	ldi	r27, 0x00	; 0
    dcb0:	80 93 f6 17 	sts	0x17F6, r24	; 0x8017f6 <_mmc_clock>
    dcb4:	90 93 f7 17 	sts	0x17F7, r25	; 0x8017f7 <_mmc_clock+0x1>
    dcb8:	a0 93 f8 17 	sts	0x17F8, r26	; 0x8017f8 <_mmc_clock+0x2>
    dcbc:	b0 93 f9 17 	sts	0x17F9, r27	; 0x8017f9 <_mmc_clock+0x3>
    dcc0:	08 95       	ret

0000dcc2 <mmc_spi_init>:
    dcc2:	8b e0       	ldi	r24, 0x0B	; 11
    dcc4:	0e 94 4a 26 	call	0x4c94	; 0x4c94 <chip_select_init>
    dcc8:	ef cf       	rjmp	.-34     	; 0xdca8 <mmc_slow>
    dcca:	08 95       	ret

0000dccc <mmc_fast>:
    dccc:	80 ea       	ldi	r24, 0xA0	; 160
    dcce:	95 e2       	ldi	r25, 0x25	; 37
    dcd0:	a6 e2       	ldi	r26, 0x26	; 38
    dcd2:	b0 e0       	ldi	r27, 0x00	; 0
    dcd4:	80 93 f6 17 	sts	0x17F6, r24	; 0x8017f6 <_mmc_clock>
    dcd8:	90 93 f7 17 	sts	0x17F7, r25	; 0x8017f7 <_mmc_clock+0x1>
    dcdc:	a0 93 f8 17 	sts	0x17F8, r26	; 0x8017f8 <_mmc_clock+0x2>
    dce0:	b0 93 f9 17 	sts	0x17F9, r27	; 0x8017f9 <_mmc_clock+0x3>
    dce4:	08 95       	ret

0000dce6 <mmc_spi_TX_buffer>:
    dce6:	0c 94 7c 26 	jmp	0x4cf8	; 0x4cf8 <spi_TX_buffer>
    dcea:	08 95       	ret

0000dcec <mmc_spi_RX_buffer>:
    dcec:	0c 94 7e 26 	jmp	0x4cfc	; 0x4cfc <spi_RX_buffer>
    dcf0:	08 95       	ret

0000dcf2 <mmc_spi_TXRX>:
    dcf2:	0c 94 f8 26 	jmp	0x4df0	; 0x4df0 <spi_TXRX>
    dcf6:	08 95       	ret

0000dcf8 <mmc_set_ms_timeout>:
    dcf8:	f8 94       	cli
    dcfa:	90 93 fb 17 	sts	0x17FB, r25	; 0x8017fb <_mmc_timeout+0x1>
    dcfe:	80 93 fa 17 	sts	0x17FA, r24	; 0x8017fa <_mmc_timeout>
    dd02:	78 94       	sei
    dd04:	08 95       	ret

0000dd06 <mmc_test_timeout>:
    dd06:	00 d0       	rcall	.+0      	; 0xdd08 <mmc_test_timeout+0x2>
    dd08:	1f 92       	push	r1
    dd0a:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <Stat>
    dd0e:	81 fd       	sbrc	r24, 1
    dd10:	15 c0       	rjmp	.+42     	; 0xdd3c <mmc_test_timeout+0x36>
    dd12:	80 91 fa 17 	lds	r24, 0x17FA	; 0x8017fa <_mmc_timeout>
    dd16:	90 91 fb 17 	lds	r25, 0x17FB	; 0x8017fb <_mmc_timeout+0x1>
    dd1a:	89 2b       	or	r24, r25
    dd1c:	91 f4       	brne	.+36     	; 0xdd42 <mmc_test_timeout+0x3c>
    dd1e:	8e ea       	ldi	r24, 0xAE	; 174
    dd20:	97 e0       	ldi	r25, 0x07	; 7
    dd22:	a0 e0       	ldi	r26, 0x00	; 0
    dd24:	ed b7       	in	r30, 0x3d	; 61
    dd26:	fe b7       	in	r31, 0x3e	; 62
    dd28:	81 83       	std	Z+1, r24	; 0x01
    dd2a:	92 83       	std	Z+2, r25	; 0x02
    dd2c:	a3 83       	std	Z+3, r26	; 0x03
    dd2e:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    dd32:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <Stat>
    dd36:	83 60       	ori	r24, 0x03	; 3
    dd38:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <Stat>
    dd3c:	81 e0       	ldi	r24, 0x01	; 1
    dd3e:	90 e0       	ldi	r25, 0x00	; 0
    dd40:	02 c0       	rjmp	.+4      	; 0xdd46 <mmc_test_timeout+0x40>
    dd42:	80 e0       	ldi	r24, 0x00	; 0
    dd44:	90 e0       	ldi	r25, 0x00	; 0
    dd46:	0f 90       	pop	r0
    dd48:	0f 90       	pop	r0
    dd4a:	0f 90       	pop	r0
    dd4c:	08 95       	ret

0000dd4e <mmc_init>:
///
/// @param[in] verbose: display initialisation messages
/// @return
MEMSPACE
int mmc_init(int verbose)
{
    dd4e:	ab e0       	ldi	r26, 0x0B	; 11
    dd50:	b0 e0       	ldi	r27, 0x00	; 0
    dd52:	ed ea       	ldi	r30, 0xAD	; 173
    dd54:	fe e6       	ldi	r31, 0x6E	; 110
    dd56:	0c 94 ea df 	jmp	0x1bfd4	; 0x1bfd4 <__prologue_saves__+0x18>
    dd5a:	7c 01       	movw	r14, r24
    int rc;

    Stat = 0;
    dd5c:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <Stat>

    mmc_spi_init();

    if( verbose)
    dd60:	b0 df       	rcall	.-160    	; 0xdcc2 <mmc_spi_init>
    dd62:	e1 14       	cp	r14, r1
    dd64:	f1 04       	cpc	r15, r1
    {
        printf("START MMC INIT\n");
    dd66:	51 f0       	breq	.+20     	; 0xdd7c <mmc_init+0x2e>
    dd68:	8e e9       	ldi	r24, 0x9E	; 158
    dd6a:	97 e0       	ldi	r25, 0x07	; 7
    dd6c:	a0 e0       	ldi	r26, 0x00	; 0
    dd6e:	ed b7       	in	r30, 0x3d	; 61
    dd70:	fe b7       	in	r31, 0x3e	; 62
    dd72:	81 83       	std	Z+1, r24	; 0x01
    dd74:	92 83       	std	Z+2, r25	; 0x02
    dd76:	a3 83       	std	Z+3, r26	; 0x03
    dd78:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    }
    // we only install timers once!
    if(!mmc_init_flag)
    dd7c:	80 91 f2 17 	lds	r24, 0x17F2	; 0x8017f2 <mmc_init_flag>
    dd80:	90 91 f3 17 	lds	r25, 0x17F3	; 0x8017f3 <mmc_init_flag+0x1>
        mmc_install_timer();
    dd84:	89 2b       	or	r24, r25
    dd86:	09 f4       	brne	.+2      	; 0xdd8a <mmc_init+0x3c>

    if( verbose)
    dd88:	62 df       	rcall	.-316    	; 0xdc4e <mmc_install_timer>
    dd8a:	e1 14       	cp	r14, r1
    dd8c:	f1 04       	cpc	r15, r1
    {
#if defined (FF_USE_LFN)
        printf("LFN Enabled");
    dd8e:	c1 f0       	breq	.+48     	; 0xddc0 <mmc_init+0x72>
    dd90:	82 e9       	ldi	r24, 0x92	; 146
    dd92:	97 e0       	ldi	r25, 0x07	; 7
    dd94:	a0 e0       	ldi	r26, 0x00	; 0
    dd96:	ed b7       	in	r30, 0x3d	; 61
    dd98:	fe b7       	in	r31, 0x3e	; 62
    dd9a:	81 83       	std	Z+1, r24	; 0x01
    dd9c:	92 83       	std	Z+2, r25	; 0x02
    dd9e:	a3 83       	std	Z+3, r26	; 0x03
    dda0:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
#else
        printf("LFN Disabled");
#endif
        printf(", Code page: %u\n", FF_CODE_PAGE);
    dda4:	85 eb       	ldi	r24, 0xB5	; 181
    dda6:	91 e0       	ldi	r25, 0x01	; 1
    dda8:	ed b7       	in	r30, 0x3d	; 61
    ddaa:	fe b7       	in	r31, 0x3e	; 62
    ddac:	95 83       	std	Z+5, r25	; 0x05
    ddae:	84 83       	std	Z+4, r24	; 0x04
    ddb0:	81 e8       	ldi	r24, 0x81	; 129
    ddb2:	97 e0       	ldi	r25, 0x07	; 7
    ddb4:	a0 e0       	ldi	r26, 0x00	; 0
    ddb6:	81 83       	std	Z+1, r24	; 0x01
    ddb8:	92 83       	std	Z+2, r25	; 0x02
    ddba:	a3 83       	std	Z+3, r26	; 0x03
    }

    rc = disk_initialize(DEV_MMC);    // aliased to mmc_disk_initialize()
    ddbc:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    ddc0:	80 e0       	ldi	r24, 0x00	; 0
    ddc2:	87 da       	rcall	.-2802   	; 0xd2d2 <disk_initialize>
    ddc4:	08 2f       	mov	r16, r24

    if( rc != RES_OK  )
    ddc6:	10 e0       	ldi	r17, 0x00	; 0
    ddc8:	01 15       	cp	r16, r1
        put_rc(rc);
    ddca:	11 05       	cpc	r17, r1
    ddcc:	19 f0       	breq	.+6      	; 0xddd4 <mmc_init+0x86>
    ddce:	c8 01       	movw	r24, r16
    ddd0:	e1 d0       	rcall	.+450    	; 0xdf94 <put_rc>

    if( rc == RES_OK)
        rc = f_mount(&Fatfs[0],"/", 0);
    ddd2:	0e c0       	rjmp	.+28     	; 0xddf0 <mmc_init+0xa2>
    ddd4:	40 e0       	ldi	r20, 0x00	; 0
    ddd6:	68 e7       	ldi	r22, 0x78	; 120
    ddd8:	78 e0       	ldi	r23, 0x08	; 8
    ddda:	84 e4       	ldi	r24, 0x44	; 68
    dddc:	9a e1       	ldi	r25, 0x1A	; 26
    ddde:	0e 94 21 59 	call	0xb242	; 0xb242 <f_mount>

    if( rc != RES_OK || verbose)
    dde2:	8c 01       	movw	r16, r24
    dde4:	89 2b       	or	r24, r25
    dde6:	21 f4       	brne	.+8      	; 0xddf0 <mmc_init+0xa2>
    dde8:	e1 14       	cp	r14, r1
    ddea:	f1 04       	cpc	r15, r1
        put_rc( rc );
    ddec:	09 f4       	brne	.+2      	; 0xddf0 <mmc_init+0xa2>
    ddee:	40 c0       	rjmp	.+128    	; 0xde70 <mmc_init+0x122>
    ddf0:	c8 01       	movw	r24, r16

    if (verbose )
    ddf2:	d0 d0       	rcall	.+416    	; 0xdf94 <put_rc>
    ddf4:	e1 14       	cp	r14, r1
    ddf6:	f1 04       	cpc	r15, r1
    {
        DWORD blksize = 0;
    ddf8:	d9 f1       	breq	.+118    	; 0xde70 <mmc_init+0x122>
    ddfa:	18 86       	std	Y+8, r1	; 0x08
    ddfc:	19 86       	std	Y+9, r1	; 0x09
    ddfe:	1a 86       	std	Y+10, r1	; 0x0a
        if(rc == RES_OK)
    de00:	1b 86       	std	Y+11, r1	; 0x0b
    de02:	01 15       	cp	r16, r1
        {
            rc = disk_ioctl ( DEV_MMC, GET_BLOCK_SIZE, (void *) &blksize);
    de04:	11 05       	cpc	r17, r1
    de06:	51 f5       	brne	.+84     	; 0xde5c <mmc_init+0x10e>
    de08:	ae 01       	movw	r20, r28
    de0a:	48 5f       	subi	r20, 0xF8	; 248
    de0c:	5f 4f       	sbci	r21, 0xFF	; 255
    de0e:	63 e0       	ldi	r22, 0x03	; 3
            if( rc != RES_OK)
    de10:	80 e0       	ldi	r24, 0x00	; 0
    de12:	85 da       	rcall	.-2806   	; 0xd31e <disk_ioctl>
            {
                put_rc( rc );
    de14:	8c 01       	movw	r16, r24
    de16:	00 97       	sbiw	r24, 0x00	; 0
                printf("MMC Block Size - read failed\n");
    de18:	61 f0       	breq	.+24     	; 0xde32 <mmc_init+0xe4>
    de1a:	bc d0       	rcall	.+376    	; 0xdf94 <put_rc>
    de1c:	83 e6       	ldi	r24, 0x63	; 99
    de1e:	97 e0       	ldi	r25, 0x07	; 7
    de20:	a0 e0       	ldi	r26, 0x00	; 0
    de22:	ed b7       	in	r30, 0x3d	; 61
    de24:	fe b7       	in	r31, 0x3e	; 62
    de26:	81 83       	std	Z+1, r24	; 0x01
    de28:	92 83       	std	Z+2, r25	; 0x02
    de2a:	a3 83       	std	Z+3, r26	; 0x03
    de2c:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
            }
            else
            {
                printf("MMC Block Size: %ld\n", blksize);
    de30:	15 c0       	rjmp	.+42     	; 0xde5c <mmc_init+0x10e>
    de32:	88 85       	ldd	r24, Y+8	; 0x08
    de34:	99 85       	ldd	r25, Y+9	; 0x09
    de36:	aa 85       	ldd	r26, Y+10	; 0x0a
    de38:	bb 85       	ldd	r27, Y+11	; 0x0b
    de3a:	ed b7       	in	r30, 0x3d	; 61
    de3c:	fe b7       	in	r31, 0x3e	; 62
    de3e:	84 83       	std	Z+4, r24	; 0x04
    de40:	95 83       	std	Z+5, r25	; 0x05
    de42:	a6 83       	std	Z+6, r26	; 0x06
    de44:	b7 83       	std	Z+7, r27	; 0x07
    de46:	8e e4       	ldi	r24, 0x4E	; 78
    de48:	97 e0       	ldi	r25, 0x07	; 7
    de4a:	a0 e0       	ldi	r26, 0x00	; 0
    de4c:	81 83       	std	Z+1, r24	; 0x01
    de4e:	92 83       	std	Z+2, r25	; 0x02
            }
            if( rc == RES_OK)
            {
                fatfs_status("/");
    de50:	a3 83       	std	Z+3, r26	; 0x03
    de52:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    de56:	88 e7       	ldi	r24, 0x78	; 120
            }
        }
        printf("END MMC INIT\n");
    de58:	98 e0       	ldi	r25, 0x08	; 8
    de5a:	30 d1       	rcall	.+608    	; 0xe0bc <fatfs_status>
    de5c:	80 e4       	ldi	r24, 0x40	; 64
    de5e:	97 e0       	ldi	r25, 0x07	; 7
    de60:	a0 e0       	ldi	r26, 0x00	; 0
    de62:	ed b7       	in	r30, 0x3d	; 61
    de64:	fe b7       	in	r31, 0x3e	; 62
    de66:	81 83       	std	Z+1, r24	; 0x01
    de68:	92 83       	std	Z+2, r25	; 0x02
    de6a:	a3 83       	std	Z+3, r26	; 0x03
    }
    mmc_init_flag = 1;
    de6c:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    de70:	81 e0       	ldi	r24, 0x01	; 1
    de72:	90 e0       	ldi	r25, 0x00	; 0
    de74:	90 93 f3 17 	sts	0x17F3, r25	; 0x8017f3 <mmc_init_flag+0x1>

    return( rc ) ;
}
    de78:	80 93 f2 17 	sts	0x17F2, r24	; 0x8017f2 <mmc_init_flag>
    de7c:	c8 01       	movw	r24, r16
    de7e:	2b 96       	adiw	r28, 0x0b	; 11
    de80:	e6 e0       	ldi	r30, 0x06	; 6
    de82:	0c 94 06 e0 	jmp	0x1c00c	; 0x1c00c <__epilogue_restores__+0x18>

0000de86 <mmc_power_on>:
    de86:	08 95       	ret

0000de88 <mmc_power_off>:
/// @brief  MMC Power OFF
///
/// @return void
MEMSPACE
void mmc_power_off()
{
    de88:	08 95       	ret

0000de8a <mmc_ins_status>:

MEMSPACE
int mmc_ins_status()
{
    return (1);
}
    de8a:	81 e0       	ldi	r24, 0x01	; 1
    de8c:	90 e0       	ldi	r25, 0x00	; 0
    de8e:	08 95       	ret

0000de90 <mmc_wp_status>:

MEMSPACE
int mmc_wp_status()
{
    return (0);
}
    de90:	80 e0       	ldi	r24, 0x00	; 0
    de92:	90 e0       	ldi	r25, 0x00	; 0
    de94:	08 95       	ret

0000de96 <tm_to_fat>:
/// @param[in] t: POSIX struct tm * to convert.
///
/// @return  FAT32 time.
MEMSPACE
uint32_t tm_to_fat(tm_t *t)
{
    de96:	0f 93       	push	r16
    de98:	1f 93       	push	r17
    de9a:	fc 01       	movw	r30, r24
        | (((uint32_t)t->tm_mon+1) << 21)
        | (((uint32_t)t->tm_mday) << 16)
        | ((uint32_t)t->tm_hour << 11)
        | ((uint32_t)t->tm_min << 5)
        | ((uint32_t)t->tm_sec >> 1);
    return(fat);
    de9c:	46 81       	ldd	r20, Z+6	; 0x06
    de9e:	57 81       	ldd	r21, Z+7	; 0x07
    dea0:	05 2e       	mov	r0, r21
    dea2:	00 0c       	add	r0, r0
    dea4:	66 0b       	sbc	r22, r22
    dea6:	77 0b       	sbc	r23, r23
    dea8:	ba 01       	movw	r22, r20
    deaa:	55 27       	eor	r21, r21
    deac:	44 27       	eor	r20, r20
    deae:	84 81       	ldd	r24, Z+4	; 0x04
    deb0:	95 81       	ldd	r25, Z+5	; 0x05
    deb2:	09 2e       	mov	r0, r25
    deb4:	00 0c       	add	r0, r0
    deb6:	aa 0b       	sbc	r26, r26
    deb8:	bb 0b       	sbc	r27, r27
    deba:	2b e0       	ldi	r18, 0x0B	; 11
    debc:	88 0f       	add	r24, r24
    debe:	99 1f       	adc	r25, r25
    dec0:	aa 1f       	adc	r26, r26
    dec2:	bb 1f       	adc	r27, r27
    dec4:	2a 95       	dec	r18
    dec6:	d1 f7       	brne	.-12     	; 0xdebc <tm_to_fat+0x26>
    dec8:	48 2b       	or	r20, r24
    deca:	59 2b       	or	r21, r25
    decc:	6a 2b       	or	r22, r26
    dece:	7b 2b       	or	r23, r27
    ded0:	82 81       	ldd	r24, Z+2	; 0x02
    ded2:	93 81       	ldd	r25, Z+3	; 0x03
    ded4:	09 2e       	mov	r0, r25
    ded6:	00 0c       	add	r0, r0
    ded8:	aa 0b       	sbc	r26, r26
    deda:	bb 0b       	sbc	r27, r27
    dedc:	35 e0       	ldi	r19, 0x05	; 5
    dede:	88 0f       	add	r24, r24
    dee0:	99 1f       	adc	r25, r25
    dee2:	aa 1f       	adc	r26, r26
    dee4:	bb 1f       	adc	r27, r27
    dee6:	3a 95       	dec	r19
    dee8:	d1 f7       	brne	.-12     	; 0xdede <tm_to_fat+0x48>
    deea:	48 2b       	or	r20, r24
    deec:	59 2b       	or	r21, r25
    deee:	6a 2b       	or	r22, r26
    def0:	7b 2b       	or	r23, r27
    def2:	80 81       	ld	r24, Z
    def4:	91 81       	ldd	r25, Z+1	; 0x01
    def6:	09 2e       	mov	r0, r25
    def8:	00 0c       	add	r0, r0
    defa:	aa 0b       	sbc	r26, r26
    defc:	bb 0b       	sbc	r27, r27
    defe:	b6 95       	lsr	r27
    df00:	a7 95       	ror	r26
    df02:	97 95       	ror	r25
    df04:	87 95       	ror	r24
    df06:	84 2b       	or	r24, r20
    df08:	95 2b       	or	r25, r21
    df0a:	a6 2b       	or	r26, r22
    df0c:	b7 2b       	or	r27, r23
    df0e:	02 85       	ldd	r16, Z+10	; 0x0a
    df10:	13 85       	ldd	r17, Z+11	; 0x0b
    df12:	00 55       	subi	r16, 0x50	; 80
    df14:	11 09       	sbc	r17, r1
    df16:	01 2e       	mov	r0, r17
    df18:	00 0c       	add	r0, r0
    df1a:	22 0b       	sbc	r18, r18
    df1c:	33 0b       	sbc	r19, r19
    df1e:	49 e1       	ldi	r20, 0x19	; 25
    df20:	00 0f       	add	r16, r16
    df22:	11 1f       	adc	r17, r17
    df24:	22 1f       	adc	r18, r18
    df26:	33 1f       	adc	r19, r19
    df28:	4a 95       	dec	r20
    df2a:	d1 f7       	brne	.-12     	; 0xdf20 <tm_to_fat+0x8a>
    df2c:	ac 01       	movw	r20, r24
    df2e:	bd 01       	movw	r22, r26
    df30:	40 2b       	or	r20, r16
    df32:	51 2b       	or	r21, r17
    df34:	62 2b       	or	r22, r18
    df36:	73 2b       	or	r23, r19
    df38:	80 85       	ldd	r24, Z+8	; 0x08
    df3a:	91 85       	ldd	r25, Z+9	; 0x09
    df3c:	09 2e       	mov	r0, r25
    df3e:	00 0c       	add	r0, r0
    df40:	aa 0b       	sbc	r26, r26
    df42:	bb 0b       	sbc	r27, r27
    df44:	01 96       	adiw	r24, 0x01	; 1
    df46:	a1 1d       	adc	r26, r1
    df48:	b1 1d       	adc	r27, r1
    df4a:	e5 e1       	ldi	r30, 0x15	; 21
    df4c:	88 0f       	add	r24, r24
    df4e:	99 1f       	adc	r25, r25
    df50:	aa 1f       	adc	r26, r26
    df52:	bb 1f       	adc	r27, r27
    df54:	ea 95       	dec	r30
    df56:	d1 f7       	brne	.-12     	; 0xdf4c <tm_to_fat+0xb6>
    df58:	8a 01       	movw	r16, r20
    df5a:	9b 01       	movw	r18, r22
    df5c:	08 2b       	or	r16, r24
    df5e:	19 2b       	or	r17, r25
    df60:	2a 2b       	or	r18, r26
    df62:	3b 2b       	or	r19, r27
    df64:	c9 01       	movw	r24, r18
    df66:	b8 01       	movw	r22, r16
}
    df68:	1f 91       	pop	r17
    df6a:	0f 91       	pop	r16
    df6c:	08 95       	ret

0000df6e <get_fattime>:
///
/// @return FAT32 time.
/// @see tm_to_fat().
MEMSPACE
DWORD get_fattime (void)
{
    df6e:	a4 e0       	ldi	r26, 0x04	; 4
    df70:	b0 e0       	ldi	r27, 0x00	; 0
    df72:	ed eb       	ldi	r30, 0xBD	; 189
    df74:	ff e6       	ldi	r31, 0x6F	; 111
    df76:	0c 94 ee df 	jmp	0x1bfdc	; 0x1bfdc <__prologue_saves__+0x20>
    time_t t;
/* Get GMT time */
    time(&t);
    df7a:	ce 01       	movw	r24, r28
    df7c:	01 96       	adiw	r24, 0x01	; 1
    df7e:	0e 94 5e 37 	call	0x6ebc	; 0x6ebc <time>
    return( tm_to_fat(localtime(&t)));
    df82:	ce 01       	movw	r24, r28
    df84:	01 96       	adiw	r24, 0x01	; 1
    df86:	0e 94 f7 37 	call	0x6fee	; 0x6fee <localtime>
    df8a:	85 df       	rcall	.-246    	; 0xde96 <tm_to_fat>
}
    df8c:	24 96       	adiw	r28, 0x04	; 4
    df8e:	e2 e0       	ldi	r30, 0x02	; 2
    df90:	0c 94 0a e0 	jmp	0x1c014	; 0x1c014 <__epilogue_restores__+0x20>

0000df94 <put_rc>:
/// @param[in] rc: FatFs status return code
/// @return  void

MEMSPACE
void put_rc (int rc)
{
    df94:	00 d0       	rcall	.+0      	; 0xdf96 <put_rc+0x2>
    df96:	00 d0       	rcall	.+0      	; 0xdf98 <put_rc+0x4>
    df98:	1f 92       	push	r1
        ptr = "INVALID ERROR MESSAGE";
    else
        ptr = (char *) err_msg[(int)rc];
    printf("rc=%u FR_%s\n", rc, ptr);
#else
    printf("rc=%u\n", rc);
    df9a:	ed b7       	in	r30, 0x3d	; 61
    df9c:	fe b7       	in	r31, 0x3e	; 62
    df9e:	95 83       	std	Z+5, r25	; 0x05
    dfa0:	84 83       	std	Z+4, r24	; 0x04
    dfa2:	8b ec       	ldi	r24, 0xCB	; 203
    dfa4:	99 e0       	ldi	r25, 0x09	; 9
    dfa6:	a0 e0       	ldi	r26, 0x00	; 0
    dfa8:	81 83       	std	Z+1, r24	; 0x01
    dfaa:	92 83       	std	Z+2, r25	; 0x02
    dfac:	a3 83       	std	Z+3, r26	; 0x03
    dfae:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
#endif
}
    dfb2:	0f 90       	pop	r0
    dfb4:	0f 90       	pop	r0
    dfb6:	0f 90       	pop	r0
    dfb8:	0f 90       	pop	r0
    dfba:	0f 90       	pop	r0
    dfbc:	08 95       	ret

0000dfbe <fatfs_scan_files>:

MEMSPACE
int fatfs_scan_files (
char* path                                        /* Pointer to the working buffer with start path */
)
{
    dfbe:	a4 e4       	ldi	r26, 0x44	; 68
    dfc0:	b1 e0       	ldi	r27, 0x01	; 1
    dfc2:	e5 ee       	ldi	r30, 0xE5	; 229
    dfc4:	ff e6       	ldi	r31, 0x6F	; 111
    dfc6:	0c 94 e9 df 	jmp	0x1bfd2	; 0x1bfd2 <__prologue_saves__+0x16>
    dfca:	8c 01       	movw	r16, r24
    DIR dirs;
    FRESULT fr;
    int i;
    FILINFO info;

    fr = f_opendir(&dirs, path);
    dfcc:	bc 01       	movw	r22, r24
    dfce:	ce 01       	movw	r24, r28
    dfd0:	89 5e       	subi	r24, 0xE9	; 233
    dfd2:	9e 4f       	sbci	r25, 0xFE	; 254
    dfd4:	0e 94 dd 62 	call	0xc5ba	; 0xc5ba <f_opendir>
    if (fr == FR_OK) {
    dfd8:	00 97       	sbiw	r24, 0x00	; 0
    dfda:	09 f0       	breq	.+2      	; 0xdfde <fatfs_scan_files+0x20>
    dfdc:	5b c0       	rjmp	.+182    	; 0xe094 <fatfs_scan_files+0xd6>
        while (((fr = f_readdir(&dirs, &info)) == FR_OK) && info.fname[0]) {
            if (info.fattrib & AM_DIR) {
                AccDirs++;
                i = strlen(path);
                path[i] = '/'; strcpy(path+i+1, info.fname);
    dfde:	8f e2       	ldi	r24, 0x2F	; 47
    dfe0:	d8 2e       	mov	r13, r24
    int i;
    FILINFO info;

    fr = f_opendir(&dirs, path);
    if (fr == FR_OK) {
        while (((fr = f_readdir(&dirs, &info)) == FR_OK) && info.fname[0]) {
    dfe2:	be 01       	movw	r22, r28
    dfe4:	6f 5f       	subi	r22, 0xFF	; 255
    dfe6:	7f 4f       	sbci	r23, 0xFF	; 255
    dfe8:	ce 01       	movw	r24, r28
    dfea:	89 5e       	subi	r24, 0xE9	; 233
    dfec:	9e 4f       	sbci	r25, 0xFE	; 254
    dfee:	0e 94 63 63 	call	0xc6c6	; 0xc6c6 <f_readdir>
    dff2:	00 97       	sbiw	r24, 0x00	; 0
    dff4:	09 f0       	breq	.+2      	; 0xdff8 <fatfs_scan_files+0x3a>
    dff6:	4e c0       	rjmp	.+156    	; 0xe094 <fatfs_scan_files+0xd6>
    dff8:	2f 89       	ldd	r18, Y+23	; 0x17
    dffa:	22 23       	and	r18, r18
    dffc:	09 f4       	brne	.+2      	; 0xe000 <fatfs_scan_files+0x42>
    dffe:	4a c0       	rjmp	.+148    	; 0xe094 <fatfs_scan_files+0xd6>
            if (info.fattrib & AM_DIR) {
    e000:	89 85       	ldd	r24, Y+9	; 0x09
    e002:	84 ff       	sbrs	r24, 4
    e004:	25 c0       	rjmp	.+74     	; 0xe050 <fatfs_scan_files+0x92>
                AccDirs++;
    e006:	80 91 7d 1c 	lds	r24, 0x1C7D	; 0x801c7d <AccDirs>
    e00a:	90 91 7e 1c 	lds	r25, 0x1C7E	; 0x801c7e <AccDirs+0x1>
    e00e:	01 96       	adiw	r24, 0x01	; 1
    e010:	90 93 7e 1c 	sts	0x1C7E, r25	; 0x801c7e <AccDirs+0x1>
    e014:	80 93 7d 1c 	sts	0x1C7D, r24	; 0x801c7d <AccDirs>
                i = strlen(path);
    e018:	f8 01       	movw	r30, r16
    e01a:	01 90       	ld	r0, Z+
    e01c:	00 20       	and	r0, r0
    e01e:	e9 f7       	brne	.-6      	; 0xe01a <fatfs_scan_files+0x5c>
    e020:	31 97       	sbiw	r30, 0x01	; 1
    e022:	e0 1b       	sub	r30, r16
    e024:	f1 0b       	sbc	r31, r17
                path[i] = '/'; strcpy(path+i+1, info.fname);
    e026:	78 01       	movw	r14, r16
    e028:	ee 0e       	add	r14, r30
    e02a:	ff 1e       	adc	r15, r31
    e02c:	d7 01       	movw	r26, r14
    e02e:	dc 92       	st	X, r13
    e030:	cf 01       	movw	r24, r30
    e032:	01 96       	adiw	r24, 0x01	; 1
    e034:	be 01       	movw	r22, r28
    e036:	69 5e       	subi	r22, 0xE9	; 233
    e038:	7f 4f       	sbci	r23, 0xFF	; 255
    e03a:	80 0f       	add	r24, r16
    e03c:	91 1f       	adc	r25, r17
    e03e:	0e 94 9d 30 	call	0x613a	; 0x613a <strcpy>
                fr = fatfs_scan_files(path);
    e042:	c8 01       	movw	r24, r16
    e044:	bc df       	rcall	.-136    	; 0xdfbe <fatfs_scan_files>
                path[i] = 0;
    e046:	f7 01       	movw	r30, r14
    e048:	10 82       	st	Z, r1
                if (fr != FR_OK) break;
    e04a:	00 97       	sbiw	r24, 0x00	; 0
    e04c:	51 f2       	breq	.-108    	; 0xdfe2 <fatfs_scan_files+0x24>
    e04e:	22 c0       	rjmp	.+68     	; 0xe094 <fatfs_scan_files+0xd6>
            } else {
//              xprintf(PSTR("%s/%s\n"), path, info.fname);
                AccFiles++;
    e050:	80 91 7f 1c 	lds	r24, 0x1C7F	; 0x801c7f <AccFiles>
    e054:	90 91 80 1c 	lds	r25, 0x1C80	; 0x801c80 <AccFiles+0x1>
    e058:	01 96       	adiw	r24, 0x01	; 1
    e05a:	90 93 80 1c 	sts	0x1C80, r25	; 0x801c80 <AccFiles+0x1>
    e05e:	80 93 7f 1c 	sts	0x1C7F, r24	; 0x801c7f <AccFiles>
                AccSize += info.fsize;
    e062:	40 91 79 1c 	lds	r20, 0x1C79	; 0x801c79 <AccSize>
    e066:	50 91 7a 1c 	lds	r21, 0x1C7A	; 0x801c7a <AccSize+0x1>
    e06a:	60 91 7b 1c 	lds	r22, 0x1C7B	; 0x801c7b <AccSize+0x2>
    e06e:	70 91 7c 1c 	lds	r23, 0x1C7C	; 0x801c7c <AccSize+0x3>
    e072:	89 81       	ldd	r24, Y+1	; 0x01
    e074:	9a 81       	ldd	r25, Y+2	; 0x02
    e076:	ab 81       	ldd	r26, Y+3	; 0x03
    e078:	bc 81       	ldd	r27, Y+4	; 0x04
    e07a:	84 0f       	add	r24, r20
    e07c:	95 1f       	adc	r25, r21
    e07e:	a6 1f       	adc	r26, r22
    e080:	b7 1f       	adc	r27, r23
    e082:	80 93 79 1c 	sts	0x1C79, r24	; 0x801c79 <AccSize>
    e086:	90 93 7a 1c 	sts	0x1C7A, r25	; 0x801c7a <AccSize+0x1>
    e08a:	a0 93 7b 1c 	sts	0x1C7B, r26	; 0x801c7b <AccSize+0x2>
    e08e:	b0 93 7c 1c 	sts	0x1C7C, r27	; 0x801c7c <AccSize+0x3>
    e092:	a7 cf       	rjmp	.-178    	; 0xdfe2 <fatfs_scan_files+0x24>
#endif
        }
    }

    return fr;
}
    e094:	cc 5b       	subi	r28, 0xBC	; 188
    e096:	de 4f       	sbci	r29, 0xFE	; 254
    e098:	e7 e0       	ldi	r30, 0x07	; 7
    e09a:	0c 94 05 e0 	jmp	0x1c00a	; 0x1c00a <__epilogue_restores__+0x16>

0000e09e <fatfs_fstype>:
/// @brief  return a string with the file system type
/// @param[in] type: file system type
/// @return string with file system type
MEMSPACE
char *fatfs_fstype(int type)
{
    e09e:	01 97       	sbiw	r24, 0x01	; 1
    e0a0:	84 30       	cpi	r24, 0x04	; 4
    e0a2:	91 05       	cpc	r25, r1
    e0a4:	40 f4       	brcc	.+16     	; 0xe0b6 <fatfs_fstype+0x18>
    e0a6:	88 0f       	add	r24, r24
    e0a8:	99 1f       	adc	r25, r25
    e0aa:	fc 01       	movw	r30, r24
    e0ac:	e4 56       	subi	r30, 0x64	; 100
    e0ae:	f7 4f       	sbci	r31, 0xF7	; 247
    e0b0:	80 81       	ld	r24, Z
    e0b2:	91 81       	ldd	r25, Z+1	; 0x01
    e0b4:	08 95       	ret
    char *ptr;
    switch(type)
    e0b6:	8a e7       	ldi	r24, 0x7A	; 122
    e0b8:	98 e0       	ldi	r25, 0x08	; 8
        default:
             ptr = "UNKNOWN";
            break;
    }
    return(ptr);
}
    e0ba:	08 95       	ret

0000e0bc <fatfs_status>:
/// @see AccFiles: Total number of Files
/// @see AccSize:  Total size of all files
/// @return  void
MEMSPACE
void fatfs_status(char *ptr)
{
    e0bc:	a7 e3       	ldi	r26, 0x37	; 55
    e0be:	b0 e0       	ldi	r27, 0x00	; 0
    e0c0:	e4 e6       	ldi	r30, 0x64	; 100
    e0c2:	f0 e7       	ldi	r31, 0x70	; 112
    e0c4:	0c 94 e8 df 	jmp	0x1bfd0	; 0x1bfd0 <__prologue_saves__+0x14>
    e0c8:	7c 01       	movw	r14, r24
    int res;
    FATFS *fs;
    char label[24+2];
    DWORD vsn; // volume serial number

    while(*ptr == ' ' || *ptr == '\t')
    e0ca:	fc 01       	movw	r30, r24
    e0cc:	21 91       	ld	r18, Z+
    e0ce:	cf 01       	movw	r24, r30
    e0d0:	20 32       	cpi	r18, 0x20	; 32
    e0d2:	d1 f3       	breq	.-12     	; 0xe0c8 <fatfs_status+0xc>
    e0d4:	29 30       	cpi	r18, 0x09	; 9
    e0d6:	c1 f3       	breq	.-16     	; 0xe0c8 <fatfs_status+0xc>
        ++ptr;
    printf("fatfs status:%s\n",ptr);
    e0d8:	ed b7       	in	r30, 0x3d	; 61
    e0da:	fe b7       	in	r31, 0x3e	; 62
    e0dc:	e4 82       	std	Z+4, r14	; 0x04
    e0de:	f5 82       	std	Z+5, r15	; 0x05
    e0e0:	8a eb       	ldi	r24, 0xBA	; 186
    e0e2:	99 e0       	ldi	r25, 0x09	; 9
    e0e4:	a0 e0       	ldi	r26, 0x00	; 0
    e0e6:	81 83       	std	Z+1, r24	; 0x01
    e0e8:	92 83       	std	Z+2, r25	; 0x02
    e0ea:	a3 83       	std	Z+3, r26	; 0x03
    e0ec:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    res = f_getfree(ptr, (DWORD*)&p2, &fs);
    e0f0:	ae 01       	movw	r20, r28
    e0f2:	4a 5c       	subi	r20, 0xCA	; 202
    e0f4:	5f 4f       	sbci	r21, 0xFF	; 255
    e0f6:	be 01       	movw	r22, r28
    e0f8:	6e 5c       	subi	r22, 0xCE	; 206
    e0fa:	7f 4f       	sbci	r23, 0xFF	; 255
    e0fc:	c7 01       	movw	r24, r14
    e0fe:	0e 94 e5 63 	call	0xc7ca	; 0xc7ca <f_getfree>
    if (res)
    e102:	00 97       	sbiw	r24, 0x00	; 0
    e104:	09 f0       	breq	.+2      	; 0xe108 <fatfs_status+0x4c>
    e106:	f8 c0       	rjmp	.+496    	; 0xe2f8 <fatfs_status+0x23c>
    {
        put_rc(res);
        return;
    }
    printf("FAT type                = %s\n",  fatfs_fstype(fs->fs_type));
    e108:	ee a9       	ldd	r30, Y+54	; 0x36
    e10a:	ff a9       	ldd	r31, Y+55	; 0x37
    e10c:	80 81       	ld	r24, Z
    e10e:	90 e0       	ldi	r25, 0x00	; 0
    e110:	c6 df       	rcall	.-116    	; 0xe09e <fatfs_fstype>
    e112:	ed b7       	in	r30, 0x3d	; 61
    e114:	fe b7       	in	r31, 0x3e	; 62
    e116:	95 83       	std	Z+5, r25	; 0x05
    e118:	84 83       	std	Z+4, r24	; 0x04
    e11a:	8c e9       	ldi	r24, 0x9C	; 156
    e11c:	99 e0       	ldi	r25, 0x09	; 9
    e11e:	a0 e0       	ldi	r26, 0x00	; 0
    e120:	81 83       	std	Z+1, r24	; 0x01
    e122:	92 83       	std	Z+2, r25	; 0x02
    e124:	a3 83       	std	Z+3, r26	; 0x03
    e126:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    printf("Bytes/Cluster           = %lu\n", (DWORD)fs->csize * 512);
    e12a:	ee a9       	ldd	r30, Y+54	; 0x36
    e12c:	ff a9       	ldd	r31, Y+55	; 0x37
    e12e:	81 85       	ldd	r24, Z+9	; 0x09
    e130:	92 85       	ldd	r25, Z+10	; 0x0a
    e132:	a0 e0       	ldi	r26, 0x00	; 0
    e134:	b0 e0       	ldi	r27, 0x00	; 0
    e136:	39 e0       	ldi	r19, 0x09	; 9
    e138:	88 0f       	add	r24, r24
    e13a:	99 1f       	adc	r25, r25
    e13c:	aa 1f       	adc	r26, r26
    e13e:	bb 1f       	adc	r27, r27
    e140:	3a 95       	dec	r19
    e142:	d1 f7       	brne	.-12     	; 0xe138 <fatfs_status+0x7c>
    e144:	ed b7       	in	r30, 0x3d	; 61
    e146:	fe b7       	in	r31, 0x3e	; 62
    e148:	84 83       	std	Z+4, r24	; 0x04
    e14a:	95 83       	std	Z+5, r25	; 0x05
    e14c:	a6 83       	std	Z+6, r26	; 0x06
    e14e:	b7 83       	std	Z+7, r27	; 0x07
    e150:	8d e7       	ldi	r24, 0x7D	; 125
    e152:	99 e0       	ldi	r25, 0x09	; 9
    e154:	a0 e0       	ldi	r26, 0x00	; 0
    e156:	81 83       	std	Z+1, r24	; 0x01
    e158:	92 83       	std	Z+2, r25	; 0x02
    e15a:	a3 83       	std	Z+3, r26	; 0x03
    e15c:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    printf("Number of FATs          = %u\n",  fs->n_fats);
    e160:	ee a9       	ldd	r30, Y+54	; 0x36
    e162:	ff a9       	ldd	r31, Y+55	; 0x37
    e164:	82 81       	ldd	r24, Z+2	; 0x02
    e166:	90 e0       	ldi	r25, 0x00	; 0
    e168:	ed b7       	in	r30, 0x3d	; 61
    e16a:	fe b7       	in	r31, 0x3e	; 62
    e16c:	95 83       	std	Z+5, r25	; 0x05
    e16e:	84 83       	std	Z+4, r24	; 0x04
    e170:	8f e5       	ldi	r24, 0x5F	; 95
    e172:	99 e0       	ldi	r25, 0x09	; 9
    e174:	a0 e0       	ldi	r26, 0x00	; 0
    e176:	81 83       	std	Z+1, r24	; 0x01
    e178:	92 83       	std	Z+2, r25	; 0x02
    e17a:	a3 83       	std	Z+3, r26	; 0x03
    e17c:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    printf("Root DIR entries        = %u\n",  fs->n_rootdir);
    e180:	ee a9       	ldd	r30, Y+54	; 0x36
    e182:	ff a9       	ldd	r31, Y+55	; 0x37
    e184:	87 81       	ldd	r24, Z+7	; 0x07
    e186:	90 85       	ldd	r25, Z+8	; 0x08
    e188:	ed b7       	in	r30, 0x3d	; 61
    e18a:	fe b7       	in	r31, 0x3e	; 62
    e18c:	95 83       	std	Z+5, r25	; 0x05
    e18e:	84 83       	std	Z+4, r24	; 0x04
    e190:	81 e4       	ldi	r24, 0x41	; 65
    e192:	99 e0       	ldi	r25, 0x09	; 9
    e194:	a0 e0       	ldi	r26, 0x00	; 0
    e196:	81 83       	std	Z+1, r24	; 0x01
    e198:	92 83       	std	Z+2, r25	; 0x02
    e19a:	a3 83       	std	Z+3, r26	; 0x03
    e19c:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    printf("Sectors/FAT             = %lu\n", fs->fsize);
    e1a0:	ee a9       	ldd	r30, Y+54	; 0x36
    e1a2:	ff a9       	ldd	r31, Y+55	; 0x37
    e1a4:	85 8d       	ldd	r24, Z+29	; 0x1d
    e1a6:	96 8d       	ldd	r25, Z+30	; 0x1e
    e1a8:	a7 8d       	ldd	r26, Z+31	; 0x1f
    e1aa:	b0 a1       	ldd	r27, Z+32	; 0x20
    e1ac:	ed b7       	in	r30, 0x3d	; 61
    e1ae:	fe b7       	in	r31, 0x3e	; 62
    e1b0:	84 83       	std	Z+4, r24	; 0x04
    e1b2:	95 83       	std	Z+5, r25	; 0x05
    e1b4:	a6 83       	std	Z+6, r26	; 0x06
    e1b6:	b7 83       	std	Z+7, r27	; 0x07
    e1b8:	82 e2       	ldi	r24, 0x22	; 34
    e1ba:	99 e0       	ldi	r25, 0x09	; 9
    e1bc:	a0 e0       	ldi	r26, 0x00	; 0
    e1be:	81 83       	std	Z+1, r24	; 0x01
    e1c0:	92 83       	std	Z+2, r25	; 0x02
    e1c2:	a3 83       	std	Z+3, r26	; 0x03
    e1c4:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    printf("Number of clusters      = %lu\n", fs->n_fatent - 2);
    e1c8:	ee a9       	ldd	r30, Y+54	; 0x36
    e1ca:	ff a9       	ldd	r31, Y+55	; 0x37
    e1cc:	81 8d       	ldd	r24, Z+25	; 0x19
    e1ce:	92 8d       	ldd	r25, Z+26	; 0x1a
    e1d0:	a3 8d       	ldd	r26, Z+27	; 0x1b
    e1d2:	b4 8d       	ldd	r27, Z+28	; 0x1c
    e1d4:	02 97       	sbiw	r24, 0x02	; 2
    e1d6:	a1 09       	sbc	r26, r1
    e1d8:	b1 09       	sbc	r27, r1
    e1da:	ed b7       	in	r30, 0x3d	; 61
    e1dc:	fe b7       	in	r31, 0x3e	; 62
    e1de:	84 83       	std	Z+4, r24	; 0x04
    e1e0:	95 83       	std	Z+5, r25	; 0x05
    e1e2:	a6 83       	std	Z+6, r26	; 0x06
    e1e4:	b7 83       	std	Z+7, r27	; 0x07
    e1e6:	83 e0       	ldi	r24, 0x03	; 3
    e1e8:	99 e0       	ldi	r25, 0x09	; 9
    e1ea:	a0 e0       	ldi	r26, 0x00	; 0
    e1ec:	81 83       	std	Z+1, r24	; 0x01
    e1ee:	92 83       	std	Z+2, r25	; 0x02
    e1f0:	a3 83       	std	Z+3, r26	; 0x03
    e1f2:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    printf("FAT start (lba)         = %lu\n", fs->fatbase);
    e1f6:	ee a9       	ldd	r30, Y+54	; 0x36
    e1f8:	ff a9       	ldd	r31, Y+55	; 0x37
    e1fa:	85 a1       	ldd	r24, Z+37	; 0x25
    e1fc:	96 a1       	ldd	r25, Z+38	; 0x26
    e1fe:	a7 a1       	ldd	r26, Z+39	; 0x27
    e200:	b0 a5       	ldd	r27, Z+40	; 0x28
    e202:	ed b7       	in	r30, 0x3d	; 61
    e204:	fe b7       	in	r31, 0x3e	; 62
    e206:	84 83       	std	Z+4, r24	; 0x04
    e208:	95 83       	std	Z+5, r25	; 0x05
    e20a:	a6 83       	std	Z+6, r26	; 0x06
    e20c:	b7 83       	std	Z+7, r27	; 0x07
    e20e:	84 ee       	ldi	r24, 0xE4	; 228
    e210:	98 e0       	ldi	r25, 0x08	; 8
    e212:	a0 e0       	ldi	r26, 0x00	; 0
    e214:	81 83       	std	Z+1, r24	; 0x01
    e216:	92 83       	std	Z+2, r25	; 0x02
    e218:	a3 83       	std	Z+3, r26	; 0x03
    e21a:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    printf("DIR start (lba,clustor) = %lu\n", fs->dirbase);
    e21e:	ee a9       	ldd	r30, Y+54	; 0x36
    e220:	ff a9       	ldd	r31, Y+55	; 0x37
    e222:	81 a5       	ldd	r24, Z+41	; 0x29
    e224:	92 a5       	ldd	r25, Z+42	; 0x2a
    e226:	a3 a5       	ldd	r26, Z+43	; 0x2b
    e228:	b4 a5       	ldd	r27, Z+44	; 0x2c
    e22a:	ed b7       	in	r30, 0x3d	; 61
    e22c:	fe b7       	in	r31, 0x3e	; 62
    e22e:	84 83       	std	Z+4, r24	; 0x04
    e230:	95 83       	std	Z+5, r25	; 0x05
    e232:	a6 83       	std	Z+6, r26	; 0x06
    e234:	b7 83       	std	Z+7, r27	; 0x07
    e236:	85 ec       	ldi	r24, 0xC5	; 197
    e238:	98 e0       	ldi	r25, 0x08	; 8
    e23a:	a0 e0       	ldi	r26, 0x00	; 0
    e23c:	81 83       	std	Z+1, r24	; 0x01
    e23e:	92 83       	std	Z+2, r25	; 0x02
    e240:	a3 83       	std	Z+3, r26	; 0x03
    e242:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    printf("Data start (lba)        = %lu\n", fs->database);
    e246:	ee a9       	ldd	r30, Y+54	; 0x36
    e248:	ff a9       	ldd	r31, Y+55	; 0x37
    e24a:	85 a5       	ldd	r24, Z+45	; 0x2d
    e24c:	96 a5       	ldd	r25, Z+46	; 0x2e
    e24e:	a7 a5       	ldd	r26, Z+47	; 0x2f
    e250:	b0 a9       	ldd	r27, Z+48	; 0x30
    e252:	ed b7       	in	r30, 0x3d	; 61
    e254:	fe b7       	in	r31, 0x3e	; 62
    e256:	84 83       	std	Z+4, r24	; 0x04
    e258:	95 83       	std	Z+5, r25	; 0x05
    e25a:	a6 83       	std	Z+6, r26	; 0x06
    e25c:	b7 83       	std	Z+7, r27	; 0x07
    e25e:	86 ea       	ldi	r24, 0xA6	; 166
    e260:	98 e0       	ldi	r25, 0x08	; 8
    e262:	a0 e0       	ldi	r26, 0x00	; 0
    e264:	81 83       	std	Z+1, r24	; 0x01
    e266:	92 83       	std	Z+2, r25	; 0x02
    e268:	a3 83       	std	Z+3, r26	; 0x03
    e26a:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>

#if FF_USE_LABEL
    res = f_getlabel(ptr, label, (DWORD*)&vsn);
    e26e:	ae 01       	movw	r20, r28
    e270:	42 5d       	subi	r20, 0xD2	; 210
    e272:	5f 4f       	sbci	r21, 0xFF	; 255
    e274:	be 01       	movw	r22, r28
    e276:	6c 5e       	subi	r22, 0xEC	; 236
    e278:	7f 4f       	sbci	r23, 0xFF	; 255
    e27a:	c7 01       	movw	r24, r14
    e27c:	0e 94 17 68 	call	0xd02e	; 0xd02e <f_getlabel>
    if (res)
    e280:	00 97       	sbiw	r24, 0x00	; 0
    e282:	d1 f5       	brne	.+116    	; 0xe2f8 <fatfs_status+0x23c>
    {
        put_rc(res);
        return;
    }
    printf("Volume name             = %s\n", label[0] ? label : "<blank>");
    e284:	8c 89       	ldd	r24, Y+20	; 0x14
    e286:	81 11       	cpse	r24, r1
    e288:	03 c0       	rjmp	.+6      	; 0xe290 <fatfs_status+0x1d4>
    e28a:	82 e8       	ldi	r24, 0x82	; 130
    e28c:	98 e0       	ldi	r25, 0x08	; 8
    e28e:	02 c0       	rjmp	.+4      	; 0xe294 <fatfs_status+0x1d8>
    e290:	ce 01       	movw	r24, r28
    e292:	44 96       	adiw	r24, 0x14	; 20
    e294:	ed b7       	in	r30, 0x3d	; 61
    e296:	fe b7       	in	r31, 0x3e	; 62
    e298:	95 83       	std	Z+5, r25	; 0x05
    e29a:	84 83       	std	Z+4, r24	; 0x04
    e29c:	88 e8       	ldi	r24, 0x88	; 136
    e29e:	98 e0       	ldi	r25, 0x08	; 8
    e2a0:	a0 e0       	ldi	r26, 0x00	; 0
    e2a2:	81 83       	std	Z+1, r24	; 0x01
    e2a4:	92 83       	std	Z+2, r25	; 0x02
    e2a6:	a3 83       	std	Z+3, r26	; 0x03
    e2a8:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    printf("Volume S/N              = %04X-%04X\n", (WORD)((DWORD)vsn >> 16), (WORD)(vsn & 0xFFFF));
    e2ac:	8e a5       	ldd	r24, Y+46	; 0x2e
    e2ae:	9f a5       	ldd	r25, Y+47	; 0x2f
    e2b0:	a8 a9       	ldd	r26, Y+48	; 0x30
    e2b2:	b9 a9       	ldd	r27, Y+49	; 0x31
    e2b4:	ed b7       	in	r30, 0x3d	; 61
    e2b6:	fe b7       	in	r31, 0x3e	; 62
    e2b8:	97 83       	std	Z+7, r25	; 0x07
    e2ba:	86 83       	std	Z+6, r24	; 0x06
    e2bc:	b5 83       	std	Z+5, r27	; 0x05
    e2be:	a4 83       	std	Z+4, r26	; 0x04
    e2c0:	83 e6       	ldi	r24, 0x63	; 99
    e2c2:	98 e0       	ldi	r25, 0x08	; 8
    e2c4:	a0 e0       	ldi	r26, 0x00	; 0
    e2c6:	81 83       	std	Z+1, r24	; 0x01
    e2c8:	92 83       	std	Z+2, r25	; 0x02
    e2ca:	a3 83       	std	Z+3, r26	; 0x03
    e2cc:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
#endif

    AccSize = AccFiles = AccDirs = 0;
    e2d0:	10 92 7e 1c 	sts	0x1C7E, r1	; 0x801c7e <AccDirs+0x1>
    e2d4:	10 92 7d 1c 	sts	0x1C7D, r1	; 0x801c7d <AccDirs>
    e2d8:	10 92 80 1c 	sts	0x1C80, r1	; 0x801c80 <AccFiles+0x1>
    e2dc:	10 92 7f 1c 	sts	0x1C7F, r1	; 0x801c7f <AccFiles>
    e2e0:	10 92 79 1c 	sts	0x1C79, r1	; 0x801c79 <AccSize>
    e2e4:	10 92 7a 1c 	sts	0x1C7A, r1	; 0x801c7a <AccSize+0x1>
    e2e8:	10 92 7b 1c 	sts	0x1C7B, r1	; 0x801c7b <AccSize+0x2>
    e2ec:	10 92 7c 1c 	sts	0x1C7C, r1	; 0x801c7c <AccSize+0x3>
    res = fatfs_scan_files(ptr);
    if (res)
    e2f0:	c7 01       	movw	r24, r14
    {
        put_rc(res);
    e2f2:	65 de       	rcall	.-822    	; 0xdfbe <fatfs_scan_files>
    e2f4:	00 97       	sbiw	r24, 0x00	; 0
        return;
    e2f6:	11 f0       	breq	.+4      	; 0xe2fc <fatfs_status+0x240>
    }
    printf("%u files, %lu bytes.\n%u folders.\n"
    e2f8:	4d de       	rcall	.-870    	; 0xdf94 <put_rc>
    e2fa:	56 c0       	rjmp	.+172    	; 0xe3a8 <fatfs_status+0x2ec>
    e2fc:	0e a9       	ldd	r16, Y+54	; 0x36
    e2fe:	1f a9       	ldd	r17, Y+55	; 0x37
    e300:	f8 01       	movw	r30, r16
    e302:	c1 84       	ldd	r12, Z+9	; 0x09
    e304:	d2 84       	ldd	r13, Z+10	; 0x0a
    e306:	e1 2c       	mov	r14, r1
    e308:	f1 2c       	mov	r15, r1
    e30a:	6a a9       	ldd	r22, Y+50	; 0x32
    e30c:	7b a9       	ldd	r23, Y+51	; 0x33
    e30e:	8c a9       	ldd	r24, Y+52	; 0x34
    e310:	9d a9       	ldd	r25, Y+53	; 0x35
    e312:	a7 01       	movw	r20, r14
    e314:	96 01       	movw	r18, r12
    e316:	0e 94 2f df 	call	0x1be5e	; 0x1be5e <__mulsi3>
    e31a:	22 e0       	ldi	r18, 0x02	; 2
    e31c:	30 e0       	ldi	r19, 0x00	; 0
    e31e:	40 e0       	ldi	r20, 0x00	; 0
    e320:	50 e0       	ldi	r21, 0x00	; 0
    e322:	0e 94 93 df 	call	0x1bf26	; 0x1bf26 <__divmodsi4>
    e326:	ed b7       	in	r30, 0x3d	; 61
    e328:	fe b7       	in	r31, 0x3e	; 62
    e32a:	20 8b       	std	Z+16, r18	; 0x10
    e32c:	31 8b       	std	Z+17, r19	; 0x11
    e32e:	42 8b       	std	Z+18, r20	; 0x12
    e330:	53 8b       	std	Z+19, r21	; 0x13
    e332:	f8 01       	movw	r30, r16
    e334:	81 8d       	ldd	r24, Z+25	; 0x19
    e336:	92 8d       	ldd	r25, Z+26	; 0x1a
    e338:	a3 8d       	ldd	r26, Z+27	; 0x1b
    e33a:	b4 8d       	ldd	r27, Z+28	; 0x1c
    e33c:	9c 01       	movw	r18, r24
    e33e:	ad 01       	movw	r20, r26
    e340:	22 50       	subi	r18, 0x02	; 2
    e342:	31 09       	sbc	r19, r1
    e344:	41 09       	sbc	r20, r1
    e346:	51 09       	sbc	r21, r1
    e348:	c7 01       	movw	r24, r14
    e34a:	b6 01       	movw	r22, r12
    e34c:	0e 94 2f df 	call	0x1be5e	; 0x1be5e <__mulsi3>
    e350:	dc 01       	movw	r26, r24
    e352:	cb 01       	movw	r24, r22
    e354:	b6 95       	lsr	r27
    e356:	a7 95       	ror	r26
    e358:	97 95       	ror	r25
    e35a:	87 95       	ror	r24
    e35c:	ed b7       	in	r30, 0x3d	; 61
    e35e:	fe b7       	in	r31, 0x3e	; 62
    e360:	84 87       	std	Z+12, r24	; 0x0c
    e362:	95 87       	std	Z+13, r25	; 0x0d
    e364:	a6 87       	std	Z+14, r26	; 0x0e
    e366:	b7 87       	std	Z+15, r27	; 0x0f
    e368:	80 91 7d 1c 	lds	r24, 0x1C7D	; 0x801c7d <AccDirs>
    e36c:	90 91 7e 1c 	lds	r25, 0x1C7E	; 0x801c7e <AccDirs+0x1>
    e370:	93 87       	std	Z+11, r25	; 0x0b
    e372:	82 87       	std	Z+10, r24	; 0x0a
    e374:	80 91 79 1c 	lds	r24, 0x1C79	; 0x801c79 <AccSize>
    e378:	90 91 7a 1c 	lds	r25, 0x1C7A	; 0x801c7a <AccSize+0x1>
    e37c:	a0 91 7b 1c 	lds	r26, 0x1C7B	; 0x801c7b <AccSize+0x2>
    e380:	b0 91 7c 1c 	lds	r27, 0x1C7C	; 0x801c7c <AccSize+0x3>
    e384:	86 83       	std	Z+6, r24	; 0x06
    e386:	97 83       	std	Z+7, r25	; 0x07
    e388:	a0 87       	std	Z+8, r26	; 0x08
    e38a:	b1 87       	std	Z+9, r27	; 0x09
    e38c:	80 91 7f 1c 	lds	r24, 0x1C7F	; 0x801c7f <AccFiles>
    e390:	90 91 80 1c 	lds	r25, 0x1C80	; 0x801c80 <AccFiles+0x1>
    e394:	95 83       	std	Z+5, r25	; 0x05
    e396:	84 83       	std	Z+4, r24	; 0x04
    e398:	86 e1       	ldi	r24, 0x16	; 22
    e39a:	98 e0       	ldi	r25, 0x08	; 8
    e39c:	a0 e0       	ldi	r26, 0x00	; 0
    e39e:	81 83       	std	Z+1, r24	; 0x01
    e3a0:	92 83       	std	Z+2, r25	; 0x02
    e3a2:	a3 83       	std	Z+3, r26	; 0x03
                 "%lu KB total disk space.\n%lu KB available.\n",
            AccFiles, AccSize, AccDirs,
            (fs->n_fatent - 2) * fs->csize / 2, p2 * fs->csize / 2
    );

}
    e3a4:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    e3a8:	e7 96       	adiw	r28, 0x37	; 55
    e3aa:	e8 e0       	ldi	r30, 0x08	; 8
    e3ac:	0c 94 04 e0 	jmp	0x1c008	; 0x1c008 <__epilogue_restores__+0x14>

0000e3b0 <fatfs_filinfo_list>:
/// @param[in] : FILINFO pointer
/// @return  void

MEMSPACE
void fatfs_filinfo_list(FILINFO *info)
{
    e3b0:	ab e1       	ldi	r26, 0x1B	; 27
    e3b2:	b0 e0       	ldi	r27, 0x00	; 0
    e3b4:	ee ed       	ldi	r30, 0xDE	; 222
    e3b6:	f1 e7       	ldi	r31, 0x71	; 113
    e3b8:	0c 94 ee df 	jmp	0x1bfdc	; 0x1bfdc <__prologue_saves__+0x20>
    e3bc:	dc 01       	movw	r26, r24
    char attrs[6];
    if(info->fname[0] == 0)
    e3be:	fc 01       	movw	r30, r24
    e3c0:	86 89       	ldd	r24, Z+22	; 0x16
    e3c2:	81 11       	cpse	r24, r1
    e3c4:	03 c0       	rjmp	.+6      	; 0xe3cc <fatfs_filinfo_list+0x1c>
    {
        printf("fatfs_filinfo_list: empty\n");
    e3c6:	8b ef       	ldi	r24, 0xFB	; 251
    e3c8:	97 e0       	ldi	r25, 0x07	; 7
    e3ca:	69 c0       	rjmp	.+210    	; 0xe49e <fatfs_filinfo_list+0xee>
        return;
    }
    attrs[0] = (info->fattrib & AM_DIR) ? 'D' : '-';
    e3cc:	fd 01       	movw	r30, r26
    e3ce:	80 85       	ldd	r24, Z+8	; 0x08
    e3d0:	84 fd       	sbrc	r24, 4
    e3d2:	02 c0       	rjmp	.+4      	; 0xe3d8 <fatfs_filinfo_list+0x28>
    e3d4:	9d e2       	ldi	r25, 0x2D	; 45
    e3d6:	01 c0       	rjmp	.+2      	; 0xe3da <fatfs_filinfo_list+0x2a>
    e3d8:	94 e4       	ldi	r25, 0x44	; 68
    e3da:	9e 8b       	std	Y+22, r25	; 0x16
    attrs[1] = (info->fattrib & AM_RDO) ? 'R' : '-';
    e3dc:	80 fd       	sbrc	r24, 0
    e3de:	02 c0       	rjmp	.+4      	; 0xe3e4 <fatfs_filinfo_list+0x34>
    e3e0:	9d e2       	ldi	r25, 0x2D	; 45
    e3e2:	01 c0       	rjmp	.+2      	; 0xe3e6 <fatfs_filinfo_list+0x36>
    e3e4:	92 e5       	ldi	r25, 0x52	; 82
    e3e6:	9f 8b       	std	Y+23, r25	; 0x17
    attrs[2] = (info->fattrib & AM_HID) ? 'H' : '-';
    e3e8:	81 fd       	sbrc	r24, 1
    e3ea:	02 c0       	rjmp	.+4      	; 0xe3f0 <fatfs_filinfo_list+0x40>
    e3ec:	9d e2       	ldi	r25, 0x2D	; 45
    e3ee:	01 c0       	rjmp	.+2      	; 0xe3f2 <fatfs_filinfo_list+0x42>
    e3f0:	98 e4       	ldi	r25, 0x48	; 72
    e3f2:	98 8f       	std	Y+24, r25	; 0x18
    attrs[3] = (info->fattrib & AM_SYS) ? 'S' : '-';
    e3f4:	82 fd       	sbrc	r24, 2
    e3f6:	02 c0       	rjmp	.+4      	; 0xe3fc <fatfs_filinfo_list+0x4c>
    e3f8:	9d e2       	ldi	r25, 0x2D	; 45
    e3fa:	01 c0       	rjmp	.+2      	; 0xe3fe <fatfs_filinfo_list+0x4e>
    e3fc:	93 e5       	ldi	r25, 0x53	; 83
    e3fe:	99 8f       	std	Y+25, r25	; 0x19
    attrs[4] = (info->fattrib & AM_ARC) ? 'A' : '-';
    e400:	85 fd       	sbrc	r24, 5
    e402:	02 c0       	rjmp	.+4      	; 0xe408 <fatfs_filinfo_list+0x58>
    e404:	8d e2       	ldi	r24, 0x2D	; 45
    e406:	01 c0       	rjmp	.+2      	; 0xe40a <fatfs_filinfo_list+0x5a>
    e408:	81 e4       	ldi	r24, 0x41	; 65
    e40a:	8a 8f       	std	Y+26, r24	; 0x1a
    attrs[5] = 0;
    e40c:	1b 8e       	std	Y+27, r1	; 0x1b
    printf("%s %u/%02u/%02u %02u:%02u %9lu %s",
    e40e:	fd 01       	movw	r30, r26
    e410:	24 81       	ldd	r18, Z+4	; 0x04
    e412:	35 81       	ldd	r19, Z+5	; 0x05
    e414:	46 81       	ldd	r20, Z+6	; 0x06
    e416:	57 81       	ldd	r21, Z+7	; 0x07
    e418:	cd 01       	movw	r24, r26
    e41a:	46 96       	adiw	r24, 0x16	; 22
    e41c:	ed b7       	in	r30, 0x3d	; 61
    e41e:	fe b7       	in	r31, 0x3e	; 62
    e420:	95 8b       	std	Z+21, r25	; 0x15
    e422:	84 8b       	std	Z+20, r24	; 0x14
    e424:	8d 91       	ld	r24, X+
    e426:	9d 91       	ld	r25, X+
    e428:	0d 90       	ld	r0, X+
    e42a:	bc 91       	ld	r27, X
    e42c:	a0 2d       	mov	r26, r0
    e42e:	80 8b       	std	Z+16, r24	; 0x10
    e430:	91 8b       	std	Z+17, r25	; 0x11
    e432:	a2 8b       	std	Z+18, r26	; 0x12
    e434:	b3 8b       	std	Z+19, r27	; 0x13
    e436:	ca 01       	movw	r24, r20
    e438:	45 e0       	ldi	r20, 0x05	; 5
    e43a:	96 95       	lsr	r25
    e43c:	87 95       	ror	r24
    e43e:	4a 95       	dec	r20
    e440:	e1 f7       	brne	.-8      	; 0xe43a <fatfs_filinfo_list+0x8a>
    e442:	8f 73       	andi	r24, 0x3F	; 63
    e444:	99 27       	eor	r25, r25
    e446:	97 87       	std	Z+15, r25	; 0x0f
    e448:	86 87       	std	Z+14, r24	; 0x0e
    e44a:	85 2f       	mov	r24, r21
    e44c:	86 95       	lsr	r24
    e44e:	86 95       	lsr	r24
    e450:	86 95       	lsr	r24
    e452:	84 87       	std	Z+12, r24	; 0x0c
    e454:	15 86       	std	Z+13, r1	; 0x0d
    e456:	c9 01       	movw	r24, r18
    e458:	8f 71       	andi	r24, 0x1F	; 31
    e45a:	99 27       	eor	r25, r25
    e45c:	93 87       	std	Z+11, r25	; 0x0b
    e45e:	82 87       	std	Z+10, r24	; 0x0a
    e460:	c9 01       	movw	r24, r18
    e462:	55 e0       	ldi	r21, 0x05	; 5
    e464:	96 95       	lsr	r25
    e466:	87 95       	ror	r24
    e468:	5a 95       	dec	r21
    e46a:	e1 f7       	brne	.-8      	; 0xe464 <fatfs_filinfo_list+0xb4>
    e46c:	8f 70       	andi	r24, 0x0F	; 15
    e46e:	99 27       	eor	r25, r25
    e470:	91 87       	std	Z+9, r25	; 0x09
    e472:	80 87       	std	Z+8, r24	; 0x08
    e474:	23 2f       	mov	r18, r19
    e476:	33 27       	eor	r19, r19
    e478:	26 95       	lsr	r18
    e47a:	24 54       	subi	r18, 0x44	; 68
    e47c:	38 4f       	sbci	r19, 0xF8	; 248
    e47e:	37 83       	std	Z+7, r19	; 0x07
    e480:	26 83       	std	Z+6, r18	; 0x06
    e482:	ce 01       	movw	r24, r28
    e484:	46 96       	adiw	r24, 0x16	; 22
    e486:	95 83       	std	Z+5, r25	; 0x05
    e488:	84 83       	std	Z+4, r24	; 0x04
    e48a:	89 ed       	ldi	r24, 0xD9	; 217
    e48c:	97 e0       	ldi	r25, 0x07	; 7
    e48e:	a0 e0       	ldi	r26, 0x00	; 0
    e490:	81 83       	std	Z+1, r24	; 0x01
    e492:	92 83       	std	Z+2, r25	; 0x02
    e494:	a3 83       	std	Z+3, r26	; 0x03
    e496:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
        attrs,
        (info->fdate >> 9) + 1980, (info->fdate >> 5) & 15, info->fdate & 31,
        (info->ftime >> 11), (info->ftime >> 5) & 63,
        info->fsize, info->fname);
    printf("\n");
    e49a:	87 ed       	ldi	r24, 0xD7	; 215
    e49c:	97 e0       	ldi	r25, 0x07	; 7
    e49e:	a0 e0       	ldi	r26, 0x00	; 0
    e4a0:	ed b7       	in	r30, 0x3d	; 61
    e4a2:	fe b7       	in	r31, 0x3e	; 62
    e4a4:	81 83       	std	Z+1, r24	; 0x01
    e4a6:	92 83       	std	Z+2, r25	; 0x02
    e4a8:	a3 83       	std	Z+3, r26	; 0x03
    e4aa:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
}
    e4ae:	6b 96       	adiw	r28, 0x1b	; 27
    e4b0:	e2 e0       	ldi	r30, 0x02	; 2
    e4b2:	0c 94 0a e0 	jmp	0x1c014	; 0x1c014 <__epilogue_restores__+0x20>

0000e4b6 <fatfs_help>:

/// @brief Display FatFs test diagnostics help menu.
/// @return  void
MEMSPACE
void fatfs_help( int full)
{
    e4b6:	cf 93       	push	r28
    e4b8:	df 93       	push	r29
    e4ba:	00 d0       	rcall	.+0      	; 0xe4bc <fatfs_help+0x6>
    e4bc:	1f 92       	push	r1
    e4be:	ec 01       	movw	r28, r24
    printf("fatfs help\n");
    e4c0:	8c e1       	ldi	r24, 0x1C	; 28
    e4c2:	9b e0       	ldi	r25, 0x0B	; 11
    e4c4:	a0 e0       	ldi	r26, 0x00	; 0
    e4c6:	ed b7       	in	r30, 0x3d	; 61
    e4c8:	fe b7       	in	r31, 0x3e	; 62
    e4ca:	81 83       	std	Z+1, r24	; 0x01
    e4cc:	92 83       	std	Z+2, r25	; 0x02
    e4ce:	a3 83       	std	Z+3, r26	; 0x03
    e4d0:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    
    if(full)
    e4d4:	cd 2b       	or	r28, r29
    e4d6:	51 f0       	breq	.+20     	; 0xe4ec <fatfs_help+0x36>
    {
        printf(
    e4d8:	80 ea       	ldi	r24, 0xA0	; 160
    e4da:	9a e0       	ldi	r25, 0x0A	; 10
    e4dc:	a0 e0       	ldi	r26, 0x00	; 0
    e4de:	ed b7       	in	r30, 0x3d	; 61
    e4e0:	fe b7       	in	r31, 0x3e	; 62
    e4e2:	81 83       	std	Z+1, r24	; 0x01
    e4e4:	92 83       	std	Z+2, r25	; 0x02
    e4e6:	a3 83       	std	Z+3, r26	; 0x03
    e4e8:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
#endif
        "\n"
        );
    }
        
}
    e4ec:	cd b7       	in	r28, 0x3d	; 61
    e4ee:	de b7       	in	r29, 0x3e	; 62
    e4f0:	23 96       	adiw	r28, 0x03	; 3
    e4f2:	e2 e0       	ldi	r30, 0x02	; 2
    e4f4:	0c 94 0a e0 	jmp	0x1c014	; 0x1c014 <__epilogue_restores__+0x20>

0000e4f8 <fatfs_ls>:
///
/// @see fatfs_filinfo_list().
/// @return  void.
MEMSPACE
void fatfs_ls(char *name)
{
    e4f8:	a5 e5       	ldi	r26, 0x55	; 85
    e4fa:	b2 e0       	ldi	r27, 0x02	; 2
    e4fc:	e2 e8       	ldi	r30, 0x82	; 130
    e4fe:	f2 e7       	ldi	r31, 0x72	; 114
    e500:	0c 94 e8 df 	jmp	0x1bfd0	; 0x1bfd0 <__prologue_saves__+0x14>
    e504:	8e 01       	movw	r16, r28
    e506:	0e 5d       	subi	r16, 0xDE	; 222
    e508:	1e 4f       	sbci	r17, 0xFE	; 254
    FILINFO fno;
    DIR dirs;                                     /* Directory object */
    FATFS *fs;
    char buff[256]; 

    if(!name || !*name)
    e50a:	00 97       	sbiw	r24, 0x00	; 0
    e50c:	21 f0       	breq	.+8      	; 0xe516 <fatfs_ls+0x1e>
    e50e:	fc 01       	movw	r30, r24
    e510:	20 81       	ld	r18, Z
    e512:	21 11       	cpse	r18, r1
    e514:	03 c0       	rjmp	.+6      	; 0xe51c <fatfs_ls+0x24>
    {
        strcpy(buff,".");
    e516:	62 eb       	ldi	r22, 0xB2	; 178
    e518:	72 e1       	ldi	r23, 0x12	; 18
    e51a:	01 c0       	rjmp	.+2      	; 0xe51e <fatfs_ls+0x26>
    }
    else
    {
        strcpy(buff,name);
    e51c:	bc 01       	movw	r22, r24
    e51e:	c8 01       	movw	r24, r16
    e520:	0e 94 9d 30 	call	0x613a	; 0x613a <strcpy>
    }
    printf("Listing:[%s]\n",buff);
    e524:	ed b7       	in	r30, 0x3d	; 61
    e526:	fe b7       	in	r31, 0x3e	; 62
    e528:	15 83       	std	Z+5, r17	; 0x05
    e52a:	04 83       	std	Z+4, r16	; 0x04
    e52c:	80 e1       	ldi	r24, 0x10	; 16
    e52e:	9a e0       	ldi	r25, 0x0A	; 10
    e530:	a0 e0       	ldi	r26, 0x00	; 0
    e532:	81 83       	std	Z+1, r24	; 0x01
    e534:	92 83       	std	Z+2, r25	; 0x02
    e536:	a3 83       	std	Z+3, r26	; 0x03
    e538:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>

    res = f_opendir(&dirs, buff);
    e53c:	b8 01       	movw	r22, r16
    e53e:	ce 01       	movw	r24, r28
    e540:	8e 5d       	subi	r24, 0xDE	; 222
    e542:	9d 4f       	sbci	r25, 0xFD	; 253
    e544:	0e 94 dd 62 	call	0xc5ba	; 0xc5ba <f_opendir>
    if (res) { put_rc(res); return; }
    e548:	00 97       	sbiw	r24, 0x00	; 0
    e54a:	11 f0       	breq	.+4      	; 0xe550 <fatfs_ls+0x58>
    e54c:	23 dd       	rcall	.-1466   	; 0xdf94 <put_rc>
    p1 = s1 = s2 = 0;
    e54e:	8a c0       	rjmp	.+276    	; 0xe664 <fatfs_ls+0x16c>
    e550:	c0 5b       	subi	r28, 0xB0	; 176
    e552:	dd 4f       	sbci	r29, 0xFD	; 253
    e554:	18 82       	st	Y, r1
    e556:	19 82       	std	Y+1, r1	; 0x01
    e558:	1a 82       	std	Y+2, r1	; 0x02
    e55a:	1b 82       	std	Y+3, r1	; 0x03
    e55c:	c0 55       	subi	r28, 0x50	; 80
    e55e:	d2 40       	sbci	r29, 0x02	; 2
    e560:	c1 2c       	mov	r12, r1
    e562:	d1 2c       	mov	r13, r1
    e564:	e1 2c       	mov	r14, r1
    while(1)
    {
        res = f_readdir(&dirs, &fno);
    e566:	f1 2c       	mov	r15, r1
    e568:	be 01       	movw	r22, r28
    e56a:	64 5f       	subi	r22, 0xF4	; 244
    e56c:	7f 4f       	sbci	r23, 0xFF	; 255
    e56e:	ce 01       	movw	r24, r28
    e570:	8e 5d       	subi	r24, 0xDE	; 222
    e572:	9d 4f       	sbci	r25, 0xFD	; 253
    e574:	0e 94 63 63 	call	0xc6c6	; 0xc6c6 <f_readdir>
        if ((res != FR_OK) || !fno.fname[0]) break;
    e578:	89 2b       	or	r24, r25
    e57a:	49 f5       	brne	.+82     	; 0xe5ce <fatfs_ls+0xd6>
    e57c:	8a a1       	ldd	r24, Y+34	; 0x22
    e57e:	88 23       	and	r24, r24
        if (fno.fattrib & AM_DIR)
    e580:	31 f1       	breq	.+76     	; 0xe5ce <fatfs_ls+0xd6>
    e582:	8c 89       	ldd	r24, Y+20	; 0x14
    e584:	84 ff       	sbrs	r24, 4
        {
            s2++;
    e586:	04 c0       	rjmp	.+8      	; 0xe590 <fatfs_ls+0x98>
    e588:	ff ef       	ldi	r31, 0xFF	; 255
    e58a:	cf 1a       	sub	r12, r31
    e58c:	df 0a       	sbc	r13, r31
        }
        else
        {
            s1++; p1 += fno.fsize;
    e58e:	1b c0       	rjmp	.+54     	; 0xe5c6 <fatfs_ls+0xce>
    e590:	8f ef       	ldi	r24, 0xFF	; 255
    e592:	e8 1a       	sub	r14, r24
    e594:	f8 0a       	sbc	r15, r24
    e596:	4c 85       	ldd	r20, Y+12	; 0x0c
    e598:	5d 85       	ldd	r21, Y+13	; 0x0d
    e59a:	6e 85       	ldd	r22, Y+14	; 0x0e
    e59c:	7f 85       	ldd	r23, Y+15	; 0x0f
    e59e:	c0 5b       	subi	r28, 0xB0	; 176
    e5a0:	dd 4f       	sbci	r29, 0xFD	; 253
    e5a2:	88 81       	ld	r24, Y
    e5a4:	99 81       	ldd	r25, Y+1	; 0x01
    e5a6:	aa 81       	ldd	r26, Y+2	; 0x02
    e5a8:	bb 81       	ldd	r27, Y+3	; 0x03
    e5aa:	c0 55       	subi	r28, 0x50	; 80
    e5ac:	d2 40       	sbci	r29, 0x02	; 2
    e5ae:	84 0f       	add	r24, r20
    e5b0:	95 1f       	adc	r25, r21
    e5b2:	a6 1f       	adc	r26, r22
    e5b4:	b7 1f       	adc	r27, r23
    e5b6:	c0 5b       	subi	r28, 0xB0	; 176
    e5b8:	dd 4f       	sbci	r29, 0xFD	; 253
    e5ba:	88 83       	st	Y, r24
    e5bc:	99 83       	std	Y+1, r25	; 0x01
    e5be:	aa 83       	std	Y+2, r26	; 0x02
    e5c0:	bb 83       	std	Y+3, r27	; 0x03
    e5c2:	c0 55       	subi	r28, 0x50	; 80
        }
        fatfs_filinfo_list(&fno);
    e5c4:	d2 40       	sbci	r29, 0x02	; 2
    e5c6:	ce 01       	movw	r24, r28
    e5c8:	0c 96       	adiw	r24, 0x0c	; 12
#ifdef ESP8266
        optimistic_yield(1000);
        wdt_reset();
#endif
    }
    e5ca:	f2 de       	rcall	.-540    	; 0xe3b0 <fatfs_filinfo_list>
    printf("%4u File(s),%10lu bytes total\n%4u Dir(s)", s1, p1, s2);
    e5cc:	cd cf       	rjmp	.-102    	; 0xe568 <fatfs_ls+0x70>
    e5ce:	ed b7       	in	r30, 0x3d	; 61
    e5d0:	fe b7       	in	r31, 0x3e	; 62
    e5d2:	d3 86       	std	Z+11, r13	; 0x0b
    e5d4:	c2 86       	std	Z+10, r12	; 0x0a
    e5d6:	c0 5b       	subi	r28, 0xB0	; 176
    e5d8:	dd 4f       	sbci	r29, 0xFD	; 253
    e5da:	88 81       	ld	r24, Y
    e5dc:	99 81       	ldd	r25, Y+1	; 0x01
    e5de:	aa 81       	ldd	r26, Y+2	; 0x02
    e5e0:	bb 81       	ldd	r27, Y+3	; 0x03
    e5e2:	c0 55       	subi	r28, 0x50	; 80
    e5e4:	d2 40       	sbci	r29, 0x02	; 2
    e5e6:	86 83       	std	Z+6, r24	; 0x06
    e5e8:	97 83       	std	Z+7, r25	; 0x07
    e5ea:	a0 87       	std	Z+8, r26	; 0x08
    e5ec:	b1 87       	std	Z+9, r27	; 0x09
    e5ee:	f5 82       	std	Z+5, r15	; 0x05
    e5f0:	e4 82       	std	Z+4, r14	; 0x04
    e5f2:	87 ee       	ldi	r24, 0xE7	; 231
    e5f4:	99 e0       	ldi	r25, 0x09	; 9
    e5f6:	a0 e0       	ldi	r26, 0x00	; 0
    e5f8:	81 83       	std	Z+1, r24	; 0x01
    e5fa:	92 83       	std	Z+2, r25	; 0x02
    e5fc:	a3 83       	std	Z+3, r26	; 0x03
    e5fe:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    if (f_getfree(buff, (DWORD*)&p1, &fs) == FR_OK)
    e602:	ae 01       	movw	r20, r28
    e604:	4c 5a       	subi	r20, 0xAC	; 172
    e606:	5d 4f       	sbci	r21, 0xFD	; 253
    e608:	be 01       	movw	r22, r28
    e60a:	60 5b       	subi	r22, 0xB0	; 176
    e60c:	7d 4f       	sbci	r23, 0xFD	; 253
    e60e:	c8 01       	movw	r24, r16
    e610:	0e 94 e5 63 	call	0xc7ca	; 0xc7ca <f_getfree>
    e614:	89 2b       	or	r24, r25
        printf(", %10luK bytes free\n", p1 * fs->csize / 2);
    e616:	31 f5       	brne	.+76     	; 0xe664 <fatfs_ls+0x16c>
    e618:	cc 5a       	subi	r28, 0xAC	; 172
    e61a:	dd 4f       	sbci	r29, 0xFD	; 253
    e61c:	e8 81       	ld	r30, Y
    e61e:	f9 81       	ldd	r31, Y+1	; 0x01
    e620:	c4 55       	subi	r28, 0x54	; 84
    e622:	d2 40       	sbci	r29, 0x02	; 2
    e624:	a1 85       	ldd	r26, Z+9	; 0x09
    e626:	b2 85       	ldd	r27, Z+10	; 0x0a
    e628:	c0 5b       	subi	r28, 0xB0	; 176
    e62a:	dd 4f       	sbci	r29, 0xFD	; 253
    e62c:	28 81       	ld	r18, Y
    e62e:	39 81       	ldd	r19, Y+1	; 0x01
    e630:	4a 81       	ldd	r20, Y+2	; 0x02
    e632:	5b 81       	ldd	r21, Y+3	; 0x03
    e634:	c0 55       	subi	r28, 0x50	; 80
    e636:	d2 40       	sbci	r29, 0x02	; 2
    e638:	0e 94 be df 	call	0x1bf7c	; 0x1bf7c <__muluhisi3>
    e63c:	22 e0       	ldi	r18, 0x02	; 2
    e63e:	30 e0       	ldi	r19, 0x00	; 0
    e640:	40 e0       	ldi	r20, 0x00	; 0
    e642:	50 e0       	ldi	r21, 0x00	; 0
    e644:	0e 94 93 df 	call	0x1bf26	; 0x1bf26 <__divmodsi4>
    e648:	ed b7       	in	r30, 0x3d	; 61
    e64a:	fe b7       	in	r31, 0x3e	; 62
    e64c:	24 83       	std	Z+4, r18	; 0x04
    e64e:	35 83       	std	Z+5, r19	; 0x05
    e650:	46 83       	std	Z+6, r20	; 0x06
    e652:	57 83       	std	Z+7, r21	; 0x07
    e654:	82 ed       	ldi	r24, 0xD2	; 210
    e656:	99 e0       	ldi	r25, 0x09	; 9
    e658:	a0 e0       	ldi	r26, 0x00	; 0
    e65a:	81 83       	std	Z+1, r24	; 0x01
    e65c:	92 83       	std	Z+2, r25	; 0x02
    e65e:	a3 83       	std	Z+3, r26	; 0x03
    e660:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
}
    e664:	cb 5a       	subi	r28, 0xAB	; 171
    e666:	dd 4f       	sbci	r29, 0xFD	; 253
    e668:	e8 e0       	ldi	r30, 0x08	; 8
    e66a:	0c 94 04 e0 	jmp	0x1c008	; 0x1c008 <__epilogue_restores__+0x14>

0000e66e <mmc_test>:
/// - Assumes the device is formatted
///
/// @return void
MEMSPACE
void mmc_test(void)
{
    e66e:	00 d0       	rcall	.+0      	; 0xe670 <mmc_test+0x2>
    e670:	1f 92       	push	r1
    printf("==============================\n");
    e672:	80 e7       	ldi	r24, 0x70	; 112
    e674:	9a e0       	ldi	r25, 0x0A	; 10
    e676:	a0 e0       	ldi	r26, 0x00	; 0
    e678:	ed b7       	in	r30, 0x3d	; 61
    e67a:	fe b7       	in	r31, 0x3e	; 62
    e67c:	81 83       	std	Z+1, r24	; 0x01
    e67e:	92 83       	std	Z+2, r25	; 0x02
    e680:	a3 83       	std	Z+3, r26	; 0x03
    e682:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    printf("START MMC TEST\n");
    e686:	80 e6       	ldi	r24, 0x60	; 96
    e688:	9a e0       	ldi	r25, 0x0A	; 10
    e68a:	a0 e0       	ldi	r26, 0x00	; 0
    e68c:	ed b7       	in	r30, 0x3d	; 61
    e68e:	fe b7       	in	r31, 0x3e	; 62
    e690:	81 83       	std	Z+1, r24	; 0x01
    e692:	92 83       	std	Z+2, r25	; 0x02
    e694:	a3 83       	std	Z+3, r26	; 0x03
    e696:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    fatfs_status("/");
    e69a:	88 e7       	ldi	r24, 0x78	; 120
    e69c:	98 e0       	ldi	r25, 0x08	; 8
    e69e:	0e dd       	rcall	.-1508   	; 0xe0bc <fatfs_status>
    printf("MMC Directory List\n");
    e6a0:	8c e4       	ldi	r24, 0x4C	; 76
    e6a2:	9a e0       	ldi	r25, 0x0A	; 10
    e6a4:	a0 e0       	ldi	r26, 0x00	; 0
    e6a6:	ed b7       	in	r30, 0x3d	; 61
    e6a8:	fe b7       	in	r31, 0x3e	; 62
    e6aa:	81 83       	std	Z+1, r24	; 0x01
    e6ac:	92 83       	std	Z+2, r25	; 0x02
    e6ae:	a3 83       	std	Z+3, r26	; 0x03
    e6b0:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    fatfs_ls("/");
    e6b4:	88 e7       	ldi	r24, 0x78	; 120
    e6b6:	98 e0       	ldi	r25, 0x08	; 8
    e6b8:	1f df       	rcall	.-450    	; 0xe4f8 <fatfs_ls>
    fatfs_cat("test3.txt");
    fatfs_ls("");
#endif
#endif

    printf("END MMC TEST\n");
    e6ba:	8e e3       	ldi	r24, 0x3E	; 62
    e6bc:	9a e0       	ldi	r25, 0x0A	; 10
    e6be:	a0 e0       	ldi	r26, 0x00	; 0
    e6c0:	ed b7       	in	r30, 0x3d	; 61
    e6c2:	fe b7       	in	r31, 0x3e	; 62
    e6c4:	81 83       	std	Z+1, r24	; 0x01
    e6c6:	92 83       	std	Z+2, r25	; 0x02
    e6c8:	a3 83       	std	Z+3, r26	; 0x03
    e6ca:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    printf("==============================\n");
    e6ce:	8e e1       	ldi	r24, 0x1E	; 30
    e6d0:	9a e0       	ldi	r25, 0x0A	; 10
    e6d2:	a0 e0       	ldi	r26, 0x00	; 0
    e6d4:	ed b7       	in	r30, 0x3d	; 61
    e6d6:	fe b7       	in	r31, 0x3e	; 62
    e6d8:	81 83       	std	Z+1, r24	; 0x01
    e6da:	92 83       	std	Z+2, r25	; 0x02
    e6dc:	a3 83       	std	Z+3, r26	; 0x03
    e6de:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
}
    e6e2:	0f 90       	pop	r0
    e6e4:	0f 90       	pop	r0
    e6e6:	0f 90       	pop	r0
    e6e8:	08 95       	ret

0000e6ea <fatfs_tests>:
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int fatfs_tests(int argc,char *argv[])
{
    e6ea:	ef 92       	push	r14
    e6ec:	ff 92       	push	r15
    e6ee:	0f 93       	push	r16
    e6f0:	1f 93       	push	r17
    e6f2:	cf 93       	push	r28
    e6f4:	df 93       	push	r29
    e6f6:	ad b7       	in	r26, 0x3d	; 61
    e6f8:	be b7       	in	r27, 0x3e	; 62
    e6fa:	17 97       	sbiw	r26, 0x07	; 7
    e6fc:	0f b6       	in	r0, 0x3f	; 63
    e6fe:	f8 94       	cli
    e700:	be bf       	out	0x3e, r27	; 62
    e702:	0f be       	out	0x3f, r0	; 63
    e704:	ad bf       	out	0x3d, r26	; 61
    char *ptr;
    int ind;


    ind = 0;
    ptr = argv[ind++];
    e706:	fb 01       	movw	r30, r22
    e708:	20 81       	ld	r18, Z
    e70a:	31 81       	ldd	r19, Z+1	; 0x01

    if(!ptr)
    e70c:	21 15       	cp	r18, r1
    e70e:	31 05       	cpc	r19, r1
    e710:	19 f4       	brne	.+6      	; 0xe718 <fatfs_tests+0x2e>
        return(0);
    e712:	80 e0       	ldi	r24, 0x00	; 0
    e714:	90 e0       	ldi	r25, 0x00	; 0
    e716:	73 c0       	rjmp	.+230    	; 0xe7fe <fatfs_tests+0x114>
    e718:	eb 01       	movw	r28, r22
    e71a:	8c 01       	movw	r16, r24

// If we have POSIX_TESTS we MUST prefix each test with "fatfs" keyword to avoid name clashing

    if( MATCH(ptr,"fatfs") )
    e71c:	64 ea       	ldi	r22, 0xA4	; 164
    e71e:	78 e0       	ldi	r23, 0x08	; 8
    e720:	c9 01       	movw	r24, r18
    e722:	0e 94 95 31 	call	0x632a	; 0x632a <MATCH>
    e726:	89 2b       	or	r24, r25
    e728:	a1 f3       	breq	.-24     	; 0xe712 <fatfs_tests+0x28>
    {
        ptr = argv[ind++];
    e72a:	ea 80       	ldd	r14, Y+2	; 0x02
    e72c:	fb 80       	ldd	r15, Y+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
    e72e:	e1 14       	cp	r14, r1
    e730:	f1 04       	cpc	r15, r1
    e732:	21 f4       	brne	.+8      	; 0xe73c <fatfs_tests+0x52>
        {
            fatfs_help(1);
    e734:	81 e0       	ldi	r24, 0x01	; 1
    e736:	90 e0       	ldi	r25, 0x00	; 0
    e738:	be de       	rcall	.-644    	; 0xe4b6 <fatfs_help>
    e73a:	5f c0       	rjmp	.+190    	; 0xe7fa <fatfs_tests+0x110>
// If we have POSIX_TESTS we MUST prefix each test with "fatfs" keyword to avoid name clashing

    if( MATCH(ptr,"fatfs") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
    e73c:	63 e6       	ldi	r22, 0x63	; 99
    e73e:	76 e1       	ldi	r23, 0x16	; 22
    e740:	c7 01       	movw	r24, r14
    e742:	0e 94 95 31 	call	0x632a	; 0x632a <MATCH>
    e746:	89 2b       	or	r24, r25
    e748:	a9 f7       	brne	.-22     	; 0xe734 <fatfs_tests+0x4a>
    {
        return(0);
    }
#endif

    if (MATCHARGS(ptr,"ls", (ind + 0), argc))
    e74a:	98 01       	movw	r18, r16
    e74c:	42 e0       	ldi	r20, 0x02	; 2
    e74e:	50 e0       	ldi	r21, 0x00	; 0
    e750:	6a ea       	ldi	r22, 0xAA	; 170
    e752:	78 e0       	ldi	r23, 0x08	; 8
    e754:	c7 01       	movw	r24, r14
    e756:	0e 94 bd 31 	call	0x637a	; 0x637a <MATCHARGS>
    e75a:	89 2b       	or	r24, r25
    e75c:	31 f1       	breq	.+76     	; 0xe7aa <fatfs_tests+0xc0>
    {
        int i;
        int args = 0;
        printf("ind:%d,argc:%d\n", ind, argc);
    e75e:	ed b7       	in	r30, 0x3d	; 61
    e760:	fe b7       	in	r31, 0x3e	; 62
    e762:	17 83       	std	Z+7, r17	; 0x07
    e764:	06 83       	std	Z+6, r16	; 0x06
    e766:	82 e0       	ldi	r24, 0x02	; 2
    e768:	90 e0       	ldi	r25, 0x00	; 0
    e76a:	95 83       	std	Z+5, r25	; 0x05
    e76c:	84 83       	std	Z+4, r24	; 0x04
    e76e:	80 e9       	ldi	r24, 0x90	; 144
    e770:	9a e0       	ldi	r25, 0x0A	; 10
    e772:	a0 e0       	ldi	r26, 0x00	; 0
    e774:	81 83       	std	Z+1, r24	; 0x01
    e776:	92 83       	std	Z+2, r25	; 0x02
    e778:	a3 83       	std	Z+3, r26	; 0x03
    e77a:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    e77e:	7e 01       	movw	r14, r28
    e780:	f4 e0       	ldi	r31, 0x04	; 4
    e782:	ef 0e       	add	r14, r31
    e784:	f1 1c       	adc	r15, r1
        for(i=ind;i<argc;++i)
    e786:	c2 e0       	ldi	r28, 0x02	; 2
    e788:	d0 e0       	ldi	r29, 0x00	; 0
    e78a:	c0 17       	cp	r28, r16
    e78c:	d1 07       	cpc	r29, r17
    e78e:	3c f4       	brge	.+14     	; 0xe79e <fatfs_tests+0xb4>
        {
            //printf("%d:%s\n", i, argv[i]);
            fatfs_ls(argv[i]);
    e790:	f7 01       	movw	r30, r14
    e792:	81 91       	ld	r24, Z+
    e794:	91 91       	ld	r25, Z+
    e796:	7f 01       	movw	r14, r30
    e798:	af de       	rcall	.-674    	; 0xe4f8 <fatfs_ls>
    if (MATCHARGS(ptr,"ls", (ind + 0), argc))
    {
        int i;
        int args = 0;
        printf("ind:%d,argc:%d\n", ind, argc);
        for(i=ind;i<argc;++i)
    e79a:	21 96       	adiw	r28, 0x01	; 1
    e79c:	f6 cf       	rjmp	.-20     	; 0xe78a <fatfs_tests+0xa0>
        {
            //printf("%d:%s\n", i, argv[i]);
            fatfs_ls(argv[i]);
            ++args;
        }
        if(!args)
    e79e:	22 97       	sbiw	r28, 0x02	; 2
        {
            fatfs_ls("");
    e7a0:	61 f5       	brne	.+88     	; 0xe7fa <fatfs_tests+0x110>
    e7a2:	8c e0       	ldi	r24, 0x0C	; 12
    e7a4:	97 e1       	ldi	r25, 0x17	; 23
    e7a6:	a8 de       	rcall	.-688    	; 0xe4f8 <fatfs_ls>
        }
        return(1);
    }

    if (MATCHARGS(ptr,"mmc_test",(ind+0),argc ))
    e7a8:	28 c0       	rjmp	.+80     	; 0xe7fa <fatfs_tests+0x110>
    e7aa:	98 01       	movw	r18, r16
    e7ac:	42 e0       	ldi	r20, 0x02	; 2
    e7ae:	50 e0       	ldi	r21, 0x00	; 0
    e7b0:	6d ea       	ldi	r22, 0xAD	; 173
    e7b2:	78 e0       	ldi	r23, 0x08	; 8
    e7b4:	c7 01       	movw	r24, r14
    e7b6:	0e 94 bd 31 	call	0x637a	; 0x637a <MATCHARGS>
    {
        mmc_test();
    e7ba:	89 2b       	or	r24, r25
    e7bc:	11 f0       	breq	.+4      	; 0xe7c2 <fatfs_tests+0xd8>
    e7be:	57 df       	rcall	.-338    	; 0xe66e <mmc_test>
        return(1);
    }

    if (MATCHARGS(ptr,"mmc_init",(ind+0),argc))
    e7c0:	1c c0       	rjmp	.+56     	; 0xe7fa <fatfs_tests+0x110>
    e7c2:	98 01       	movw	r18, r16
    e7c4:	42 e0       	ldi	r20, 0x02	; 2
    e7c6:	50 e0       	ldi	r21, 0x00	; 0
    e7c8:	66 eb       	ldi	r22, 0xB6	; 182
    e7ca:	78 e0       	ldi	r23, 0x08	; 8
    e7cc:	c7 01       	movw	r24, r14
    e7ce:	0e 94 bd 31 	call	0x637a	; 0x637a <MATCHARGS>
    {
        mmc_init(1);
    e7d2:	89 2b       	or	r24, r25
    e7d4:	21 f0       	breq	.+8      	; 0xe7de <fatfs_tests+0xf4>
    e7d6:	81 e0       	ldi	r24, 0x01	; 1
    e7d8:	90 e0       	ldi	r25, 0x00	; 0
    e7da:	b9 da       	rcall	.-2702   	; 0xdd4e <mmc_init>
        return(1);
    }

    if (MATCHARGS(ptr,"status", (ind + 1), argc))
    e7dc:	0e c0       	rjmp	.+28     	; 0xe7fa <fatfs_tests+0x110>
    e7de:	98 01       	movw	r18, r16
    e7e0:	43 e0       	ldi	r20, 0x03	; 3
    e7e2:	50 e0       	ldi	r21, 0x00	; 0
    e7e4:	6f eb       	ldi	r22, 0xBF	; 191
    e7e6:	78 e0       	ldi	r23, 0x08	; 8
    e7e8:	c7 01       	movw	r24, r14
    e7ea:	0e 94 bd 31 	call	0x637a	; 0x637a <MATCHARGS>
    e7ee:	89 2b       	or	r24, r25
    {
        fatfs_status(argv[ind]);
    e7f0:	09 f4       	brne	.+2      	; 0xe7f4 <fatfs_tests+0x10a>
    e7f2:	8f cf       	rjmp	.-226    	; 0xe712 <fatfs_tests+0x28>
    e7f4:	8c 81       	ldd	r24, Y+4	; 0x04
    e7f6:	9d 81       	ldd	r25, Y+5	; 0x05
        }
        if(!args)
        {
            fatfs_ls("");
        }
        return(1);
    e7f8:	61 dc       	rcall	.-1854   	; 0xe0bc <fatfs_status>
    e7fa:	81 e0       	ldi	r24, 0x01	; 1
        return(1);
    }
#endif

    return(0);
}
    e7fc:	90 e0       	ldi	r25, 0x00	; 0
    e7fe:	cd b7       	in	r28, 0x3d	; 61
    e800:	de b7       	in	r29, 0x3e	; 62
    e802:	27 96       	adiw	r28, 0x07	; 7
    e804:	e6 e0       	ldi	r30, 0x06	; 6
    e806:	0c 94 06 e0 	jmp	0x1c00c	; 0x1c00c <__epilogue_restores__+0x18>

0000e80a <fatfs_getc>:
    {
        errno = fatfs_to_errno(rc);
        return(-1);
    }
    return(0);
}
    e80a:	8f 92       	push	r8
    e80c:	9f 92       	push	r9
    e80e:	af 92       	push	r10
    e810:	bf 92       	push	r11
    e812:	ef 92       	push	r14
    e814:	ff 92       	push	r15
    e816:	0f 93       	push	r16
    e818:	1f 93       	push	r17
    e81a:	cf 93       	push	r28
    e81c:	df 93       	push	r29
    e81e:	00 d0       	rcall	.+0      	; 0xe820 <fatfs_getc+0x16>
    e820:	1f 92       	push	r1
    e822:	cd b7       	in	r28, 0x3d	; 61
    e824:	de b7       	in	r29, 0x3e	; 62
    e826:	10 92 82 1c 	sts	0x1C82, r1	; 0x801c82 <errno+0x1>
    e82a:	10 92 81 1c 	sts	0x1C81, r1	; 0x801c81 <errno>
    e82e:	00 97       	sbiw	r24, 0x00	; 0
    e830:	39 f4       	brne	.+14     	; 0xe840 <fatfs_getc+0x36>
    e832:	89 e0       	ldi	r24, 0x09	; 9
    e834:	90 e0       	ldi	r25, 0x00	; 0
    e836:	90 93 82 1c 	sts	0x1C82, r25	; 0x801c82 <errno+0x1>
    e83a:	80 93 81 1c 	sts	0x1C81, r24	; 0x801c81 <errno>
    e83e:	2f c0       	rjmp	.+94     	; 0xe89e <fatfs_getc+0x94>
    e840:	fc 01       	movw	r30, r24
    e842:	e4 84       	ldd	r14, Z+12	; 0x0c
    e844:	f5 84       	ldd	r15, Z+13	; 0x0d
    e846:	e1 14       	cp	r14, r1
    e848:	f1 04       	cpc	r15, r1
    e84a:	99 f3       	breq	.-26     	; 0xe832 <fatfs_getc+0x28>
    e84c:	8c 01       	movw	r16, r24
    e84e:	9e 01       	movw	r18, r28
    e850:	2f 5f       	subi	r18, 0xFF	; 255
    e852:	3f 4f       	sbci	r19, 0xFF	; 255
    e854:	41 e0       	ldi	r20, 0x01	; 1
    e856:	50 e0       	ldi	r21, 0x00	; 0
    e858:	be 01       	movw	r22, r28
    e85a:	6d 5f       	subi	r22, 0xFD	; 253
    e85c:	7f 4f       	sbci	r23, 0xFF	; 255
    e85e:	c7 01       	movw	r24, r14
    e860:	0e 94 15 5b 	call	0xb62a	; 0xb62a <f_read>
    e864:	00 97       	sbiw	r24, 0x00	; 0
    e866:	31 f4       	brne	.+12     	; 0xe874 <fatfs_getc+0x6a>
    e868:	29 81       	ldd	r18, Y+1	; 0x01
    e86a:	3a 81       	ldd	r19, Y+2	; 0x02
    e86c:	21 30       	cpi	r18, 0x01	; 1
    e86e:	31 05       	cpc	r19, r1
    e870:	c9 f0       	breq	.+50     	; 0xe8a4 <fatfs_getc+0x9a>
    e872:	03 c0       	rjmp	.+6      	; 0xe87a <fatfs_getc+0x70>
    e874:	84 31       	cpi	r24, 0x14	; 20
    e876:	91 05       	cpc	r25, r1
    e878:	40 f4       	brcc	.+16     	; 0xe88a <fatfs_getc+0x80>
    e87a:	fc 01       	movw	r30, r24
    e87c:	e8 58       	subi	r30, 0x88	; 136
    e87e:	f4 4f       	sbci	r31, 0xF4	; 244
    e880:	80 81       	ld	r24, Z
    e882:	08 2e       	mov	r0, r24
    e884:	00 0c       	add	r0, r0
    e886:	99 0b       	sbc	r25, r25
    e888:	02 c0       	rjmp	.+4      	; 0xe88e <fatfs_getc+0x84>
    e88a:	83 e2       	ldi	r24, 0x23	; 35
    e88c:	90 e0       	ldi	r25, 0x00	; 0
    e88e:	90 93 82 1c 	sts	0x1C82, r25	; 0x801c82 <errno+0x1>
    e892:	80 93 81 1c 	sts	0x1C81, r24	; 0x801c81 <errno>
    e896:	f8 01       	movw	r30, r16
    e898:	83 81       	ldd	r24, Z+3	; 0x03
    e89a:	80 62       	ori	r24, 0x20	; 32
    e89c:	83 83       	std	Z+3, r24	; 0x03
    e89e:	8f ef       	ldi	r24, 0xFF	; 255
    e8a0:	9f ef       	ldi	r25, 0xFF	; 255
    e8a2:	28 c0       	rjmp	.+80     	; 0xe8f4 <fatfs_getc+0xea>
    e8a4:	8b 81       	ldd	r24, Y+3	; 0x03
    e8a6:	8d 30       	cpi	r24, 0x0D	; 13
    e8a8:	01 f5       	brne	.+64     	; 0xe8ea <fatfs_getc+0xe0>
    e8aa:	f7 01       	movw	r30, r14
    e8ac:	80 88       	ldd	r8, Z+16	; 0x10
    e8ae:	91 88       	ldd	r9, Z+17	; 0x11
    e8b0:	a2 88       	ldd	r10, Z+18	; 0x12
    e8b2:	b3 88       	ldd	r11, Z+19	; 0x13
    e8b4:	9e 01       	movw	r18, r28
    e8b6:	2f 5f       	subi	r18, 0xFF	; 255
    e8b8:	3f 4f       	sbci	r19, 0xFF	; 255
    e8ba:	41 e0       	ldi	r20, 0x01	; 1
    e8bc:	50 e0       	ldi	r21, 0x00	; 0
    e8be:	be 01       	movw	r22, r28
    e8c0:	6d 5f       	subi	r22, 0xFD	; 253
    e8c2:	7f 4f       	sbci	r23, 0xFF	; 255
    e8c4:	c7 01       	movw	r24, r14
    e8c6:	0e 94 15 5b 	call	0xb62a	; 0xb62a <f_read>
    e8ca:	89 2b       	or	r24, r25
    e8cc:	89 f4       	brne	.+34     	; 0xe8f0 <fatfs_getc+0xe6>
    e8ce:	89 81       	ldd	r24, Y+1	; 0x01
    e8d0:	9a 81       	ldd	r25, Y+2	; 0x02
    e8d2:	01 97       	sbiw	r24, 0x01	; 1
    e8d4:	69 f4       	brne	.+26     	; 0xe8f0 <fatfs_getc+0xe6>
    e8d6:	8b 81       	ldd	r24, Y+3	; 0x03
    e8d8:	8a 30       	cpi	r24, 0x0A	; 10
    e8da:	31 f0       	breq	.+12     	; 0xe8e8 <fatfs_getc+0xde>
    e8dc:	b5 01       	movw	r22, r10
    e8de:	a4 01       	movw	r20, r8
    e8e0:	c7 01       	movw	r24, r14
    e8e2:	0e 94 21 60 	call	0xc042	; 0xc042 <f_lseek>
    e8e6:	04 c0       	rjmp	.+8      	; 0xe8f0 <fatfs_getc+0xe6>
    e8e8:	8b 83       	std	Y+3, r24	; 0x03
    e8ea:	8b 81       	ldd	r24, Y+3	; 0x03
    e8ec:	90 e0       	ldi	r25, 0x00	; 0
    e8ee:	02 c0       	rjmp	.+4      	; 0xe8f4 <fatfs_getc+0xea>
    e8f0:	8a e0       	ldi	r24, 0x0A	; 10
    e8f2:	90 e0       	ldi	r25, 0x00	; 0
    e8f4:	0f 90       	pop	r0
    e8f6:	0f 90       	pop	r0
    e8f8:	0f 90       	pop	r0
    e8fa:	df 91       	pop	r29
    e8fc:	cf 91       	pop	r28
    e8fe:	1f 91       	pop	r17
    e900:	0f 91       	pop	r16
    e902:	ff 90       	pop	r15
    e904:	ef 90       	pop	r14
    e906:	bf 90       	pop	r11
    e908:	af 90       	pop	r10
    e90a:	9f 90       	pop	r9
    e90c:	8f 90       	pop	r8
    e90e:	08 95       	ret

0000e910 <fatfs_putc>:
    e910:	a3 e0       	ldi	r26, 0x03	; 3
    e912:	b0 e0       	ldi	r27, 0x00	; 0
    e914:	ee e8       	ldi	r30, 0x8E	; 142
    e916:	f4 e7       	ldi	r31, 0x74	; 116
    e918:	0c 94 ec df 	jmp	0x1bfd8	; 0x1bfd8 <__prologue_saves__+0x1c>
    e91c:	8b 83       	std	Y+3, r24	; 0x03
    e91e:	10 92 82 1c 	sts	0x1C82, r1	; 0x801c82 <errno+0x1>
    e922:	10 92 81 1c 	sts	0x1C81, r1	; 0x801c81 <errno>
    e926:	61 15       	cp	r22, r1
    e928:	71 05       	cpc	r23, r1
    e92a:	39 f4       	brne	.+14     	; 0xe93a <fatfs_putc+0x2a>
    e92c:	89 e0       	ldi	r24, 0x09	; 9
    e92e:	90 e0       	ldi	r25, 0x00	; 0
    e930:	90 93 82 1c 	sts	0x1C82, r25	; 0x801c82 <errno+0x1>
    e934:	80 93 81 1c 	sts	0x1C81, r24	; 0x801c81 <errno>
    e938:	2d c0       	rjmp	.+90     	; 0xe994 <fatfs_putc+0x84>
    e93a:	fb 01       	movw	r30, r22
    e93c:	84 85       	ldd	r24, Z+12	; 0x0c
    e93e:	95 85       	ldd	r25, Z+13	; 0x0d
    e940:	00 97       	sbiw	r24, 0x00	; 0
    e942:	a1 f3       	breq	.-24     	; 0xe92c <fatfs_putc+0x1c>
    e944:	8b 01       	movw	r16, r22
    e946:	9e 01       	movw	r18, r28
    e948:	2f 5f       	subi	r18, 0xFF	; 255
    e94a:	3f 4f       	sbci	r19, 0xFF	; 255
    e94c:	41 e0       	ldi	r20, 0x01	; 1
    e94e:	50 e0       	ldi	r21, 0x00	; 0
    e950:	be 01       	movw	r22, r28
    e952:	6d 5f       	subi	r22, 0xFD	; 253
    e954:	7f 4f       	sbci	r23, 0xFF	; 255
    e956:	0e 94 60 5c 	call	0xb8c0	; 0xb8c0 <f_write>
    e95a:	00 97       	sbiw	r24, 0x00	; 0
    e95c:	31 f4       	brne	.+12     	; 0xe96a <fatfs_putc+0x5a>
    e95e:	29 81       	ldd	r18, Y+1	; 0x01
    e960:	3a 81       	ldd	r19, Y+2	; 0x02
    e962:	21 30       	cpi	r18, 0x01	; 1
    e964:	31 05       	cpc	r19, r1
    e966:	c9 f0       	breq	.+50     	; 0xe99a <fatfs_putc+0x8a>
    e968:	03 c0       	rjmp	.+6      	; 0xe970 <fatfs_putc+0x60>
    e96a:	84 31       	cpi	r24, 0x14	; 20
    e96c:	91 05       	cpc	r25, r1
    e96e:	40 f4       	brcc	.+16     	; 0xe980 <fatfs_putc+0x70>
    e970:	fc 01       	movw	r30, r24
    e972:	e8 58       	subi	r30, 0x88	; 136
    e974:	f4 4f       	sbci	r31, 0xF4	; 244
    e976:	80 81       	ld	r24, Z
    e978:	08 2e       	mov	r0, r24
    e97a:	00 0c       	add	r0, r0
    e97c:	99 0b       	sbc	r25, r25
    e97e:	02 c0       	rjmp	.+4      	; 0xe984 <fatfs_putc+0x74>
    e980:	83 e2       	ldi	r24, 0x23	; 35
    e982:	90 e0       	ldi	r25, 0x00	; 0
    e984:	90 93 82 1c 	sts	0x1C82, r25	; 0x801c82 <errno+0x1>
    e988:	80 93 81 1c 	sts	0x1C81, r24	; 0x801c81 <errno>
    e98c:	f8 01       	movw	r30, r16
    e98e:	83 81       	ldd	r24, Z+3	; 0x03
    e990:	80 62       	ori	r24, 0x20	; 32
    e992:	83 83       	std	Z+3, r24	; 0x03
    e994:	8f ef       	ldi	r24, 0xFF	; 255
    e996:	9f ef       	ldi	r25, 0xFF	; 255
    e998:	02 c0       	rjmp	.+4      	; 0xe99e <fatfs_putc+0x8e>
    e99a:	8b 81       	ldd	r24, Y+3	; 0x03
    e99c:	90 e0       	ldi	r25, 0x00	; 0
    e99e:	23 96       	adiw	r28, 0x03	; 3
    e9a0:	e4 e0       	ldi	r30, 0x04	; 4
    e9a2:	0c 94 08 e0 	jmp	0x1c010	; 0x1c010 <__epilogue_restores__+0x1c>

0000e9a6 <fgetc>:
    e9a6:	cf 93       	push	r28
    e9a8:	df 93       	push	r29
    e9aa:	00 d0       	rcall	.+0      	; 0xe9ac <fgetc+0x6>
    e9ac:	1f 92       	push	r1
    e9ae:	ec 01       	movw	r28, r24
    e9b0:	00 97       	sbiw	r24, 0x00	; 0
    e9b2:	39 f4       	brne	.+14     	; 0xe9c2 <fgetc+0x1c>
    e9b4:	89 e0       	ldi	r24, 0x09	; 9
    e9b6:	90 e0       	ldi	r25, 0x00	; 0
    e9b8:	90 93 82 1c 	sts	0x1C82, r25	; 0x801c82 <errno+0x1>
    e9bc:	80 93 81 1c 	sts	0x1C81, r24	; 0x801c81 <errno>
    e9c0:	40 c0       	rjmp	.+128    	; 0xea42 <fgetc+0x9c>
    e9c2:	2b 81       	ldd	r18, Y+3	; 0x03
    e9c4:	20 ff       	sbrs	r18, 0
    e9c6:	3d c0       	rjmp	.+122    	; 0xea42 <fgetc+0x9c>
    e9c8:	26 ff       	sbrs	r18, 6
    e9ca:	0a c0       	rjmp	.+20     	; 0xe9e0 <fgetc+0x3a>
    e9cc:	2f 7b       	andi	r18, 0xBF	; 191
    e9ce:	2b 83       	std	Y+3, r18	; 0x03
    e9d0:	8e 81       	ldd	r24, Y+6	; 0x06
    e9d2:	9f 81       	ldd	r25, Y+7	; 0x07
    e9d4:	01 96       	adiw	r24, 0x01	; 1
    e9d6:	9f 83       	std	Y+7, r25	; 0x07
    e9d8:	8e 83       	std	Y+6, r24	; 0x06
    e9da:	8a 81       	ldd	r24, Y+2	; 0x02
    e9dc:	90 e0       	ldi	r25, 0x00	; 0
    e9de:	33 c0       	rjmp	.+102    	; 0xea46 <fgetc+0xa0>
    e9e0:	22 ff       	sbrs	r18, 2
    e9e2:	0d c0       	rjmp	.+26     	; 0xe9fe <fgetc+0x58>
    e9e4:	e8 81       	ld	r30, Y
    e9e6:	f9 81       	ldd	r31, Y+1	; 0x01
    e9e8:	80 81       	ld	r24, Z
    e9ea:	90 e0       	ldi	r25, 0x00	; 0
    e9ec:	00 97       	sbiw	r24, 0x00	; 0
    e9ee:	19 f4       	brne	.+6      	; 0xe9f6 <fgetc+0x50>
    e9f0:	20 62       	ori	r18, 0x20	; 32
    e9f2:	2b 83       	std	Y+3, r18	; 0x03
    e9f4:	26 c0       	rjmp	.+76     	; 0xea42 <fgetc+0x9c>
    e9f6:	31 96       	adiw	r30, 0x01	; 1
    e9f8:	f9 83       	std	Y+1, r31	; 0x01
    e9fa:	e8 83       	st	Y, r30
    e9fc:	1b c0       	rjmp	.+54     	; 0xea34 <fgetc+0x8e>
    e9fe:	ea 85       	ldd	r30, Y+10	; 0x0a
    ea00:	fb 85       	ldd	r31, Y+11	; 0x0b
    ea02:	30 97       	sbiw	r30, 0x00	; 0
    ea04:	59 f4       	brne	.+22     	; 0xea1c <fgetc+0x76>
    ea06:	88 e5       	ldi	r24, 0x58	; 88
    ea08:	9b e0       	ldi	r25, 0x0B	; 11
    ea0a:	a0 e0       	ldi	r26, 0x00	; 0
    ea0c:	ed b7       	in	r30, 0x3d	; 61
    ea0e:	fe b7       	in	r31, 0x3e	; 62
    ea10:	81 83       	std	Z+1, r24	; 0x01
    ea12:	92 83       	std	Z+2, r25	; 0x02
    ea14:	a3 83       	std	Z+3, r26	; 0x03
    ea16:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    ea1a:	13 c0       	rjmp	.+38     	; 0xea42 <fgetc+0x9c>
    ea1c:	09 95       	icall
    ea1e:	97 ff       	sbrs	r25, 7
    ea20:	09 c0       	rjmp	.+18     	; 0xea34 <fgetc+0x8e>
    ea22:	2b 81       	ldd	r18, Y+3	; 0x03
    ea24:	02 96       	adiw	r24, 0x02	; 2
    ea26:	11 f0       	breq	.+4      	; 0xea2c <fgetc+0x86>
    ea28:	80 e2       	ldi	r24, 0x20	; 32
    ea2a:	01 c0       	rjmp	.+2      	; 0xea2e <fgetc+0x88>
    ea2c:	80 e1       	ldi	r24, 0x10	; 16
    ea2e:	82 2b       	or	r24, r18
    ea30:	8b 83       	std	Y+3, r24	; 0x03
    ea32:	07 c0       	rjmp	.+14     	; 0xea42 <fgetc+0x9c>
    ea34:	2e 81       	ldd	r18, Y+6	; 0x06
    ea36:	3f 81       	ldd	r19, Y+7	; 0x07
    ea38:	2f 5f       	subi	r18, 0xFF	; 255
    ea3a:	3f 4f       	sbci	r19, 0xFF	; 255
    ea3c:	3f 83       	std	Y+7, r19	; 0x07
    ea3e:	2e 83       	std	Y+6, r18	; 0x06
    ea40:	02 c0       	rjmp	.+4      	; 0xea46 <fgetc+0xa0>
    ea42:	8f ef       	ldi	r24, 0xFF	; 255
    ea44:	9f ef       	ldi	r25, 0xFF	; 255
    ea46:	cd b7       	in	r28, 0x3d	; 61
    ea48:	de b7       	in	r29, 0x3e	; 62
    ea4a:	23 96       	adiw	r28, 0x03	; 3
    ea4c:	e2 e0       	ldi	r30, 0x02	; 2
    ea4e:	0c 94 0a e0 	jmp	0x1c014	; 0x1c014 <__epilogue_restores__+0x20>

0000ea52 <fputc>:
    ea52:	cf 93       	push	r28
    ea54:	df 93       	push	r29
    ea56:	00 d0       	rcall	.+0      	; 0xea58 <fputc+0x6>
    ea58:	1f 92       	push	r1
    ea5a:	eb 01       	movw	r28, r22
    ea5c:	10 92 82 1c 	sts	0x1C82, r1	; 0x801c82 <errno+0x1>
    ea60:	10 92 81 1c 	sts	0x1C81, r1	; 0x801c81 <errno>
    ea64:	20 91 85 1c 	lds	r18, 0x1C85	; 0x801c85 <__iob+0x2>
    ea68:	30 91 86 1c 	lds	r19, 0x1C86	; 0x801c86 <__iob+0x3>
    ea6c:	62 17       	cp	r22, r18
    ea6e:	73 07       	cpc	r23, r19
    ea70:	49 f0       	breq	.+18     	; 0xea84 <fputc+0x32>
    ea72:	20 91 87 1c 	lds	r18, 0x1C87	; 0x801c87 <__iob+0x4>
    ea76:	30 91 88 1c 	lds	r19, 0x1C88	; 0x801c88 <__iob+0x5>
    ea7a:	62 17       	cp	r22, r18
    ea7c:	73 07       	cpc	r23, r19
    ea7e:	11 f0       	breq	.+4      	; 0xea84 <fputc+0x32>
    ea80:	47 df       	rcall	.-370    	; 0xe910 <fatfs_putc>
    ea82:	33 c0       	rjmp	.+102    	; 0xeaea <fputc+0x98>
    ea84:	2b 81       	ldd	r18, Y+3	; 0x03
    ea86:	21 ff       	sbrs	r18, 1
    ea88:	2e c0       	rjmp	.+92     	; 0xeae6 <fputc+0x94>
    ea8a:	22 ff       	sbrs	r18, 2
    ea8c:	10 c0       	rjmp	.+32     	; 0xeaae <fputc+0x5c>
    ea8e:	4e 81       	ldd	r20, Y+6	; 0x06
    ea90:	5f 81       	ldd	r21, Y+7	; 0x07
    ea92:	2c 81       	ldd	r18, Y+4	; 0x04
    ea94:	3d 81       	ldd	r19, Y+5	; 0x05
    ea96:	42 17       	cp	r20, r18
    ea98:	53 07       	cpc	r21, r19
    ea9a:	f4 f4       	brge	.+60     	; 0xead8 <fputc+0x86>
    ea9c:	e8 81       	ld	r30, Y
    ea9e:	f9 81       	ldd	r31, Y+1	; 0x01
    eaa0:	9f 01       	movw	r18, r30
    eaa2:	2f 5f       	subi	r18, 0xFF	; 255
    eaa4:	3f 4f       	sbci	r19, 0xFF	; 255
    eaa6:	39 83       	std	Y+1, r19	; 0x01
    eaa8:	28 83       	st	Y, r18
    eaaa:	80 83       	st	Z, r24
    eaac:	15 c0       	rjmp	.+42     	; 0xead8 <fputc+0x86>
    eaae:	e8 85       	ldd	r30, Y+8	; 0x08
    eab0:	f9 85       	ldd	r31, Y+9	; 0x09
    eab2:	30 97       	sbiw	r30, 0x00	; 0
    eab4:	59 f4       	brne	.+22     	; 0xeacc <fputc+0x7a>
    eab6:	80 e4       	ldi	r24, 0x40	; 64
    eab8:	9b e0       	ldi	r25, 0x0B	; 11
    eaba:	a0 e0       	ldi	r26, 0x00	; 0
    eabc:	ed b7       	in	r30, 0x3d	; 61
    eabe:	fe b7       	in	r31, 0x3e	; 62
    eac0:	81 83       	std	Z+1, r24	; 0x01
    eac2:	92 83       	std	Z+2, r25	; 0x02
    eac4:	a3 83       	std	Z+3, r26	; 0x03
    eac6:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    eaca:	0d c0       	rjmp	.+26     	; 0xeae6 <fputc+0x94>
    eacc:	be 01       	movw	r22, r28
    eace:	09 95       	icall
    ead0:	8f 3f       	cpi	r24, 0xFF	; 255
    ead2:	ff ef       	ldi	r31, 0xFF	; 255
    ead4:	9f 07       	cpc	r25, r31
    ead6:	39 f0       	breq	.+14     	; 0xeae6 <fputc+0x94>
    ead8:	2e 81       	ldd	r18, Y+6	; 0x06
    eada:	3f 81       	ldd	r19, Y+7	; 0x07
    eadc:	2f 5f       	subi	r18, 0xFF	; 255
    eade:	3f 4f       	sbci	r19, 0xFF	; 255
    eae0:	3f 83       	std	Y+7, r19	; 0x07
    eae2:	2e 83       	std	Y+6, r18	; 0x06
    eae4:	02 c0       	rjmp	.+4      	; 0xeaea <fputc+0x98>
    eae6:	8f ef       	ldi	r24, 0xFF	; 255
    eae8:	9f ef       	ldi	r25, 0xFF	; 255
    eaea:	cd b7       	in	r28, 0x3d	; 61
    eaec:	de b7       	in	r29, 0x3e	; 62
    eaee:	23 96       	adiw	r28, 0x03	; 3
    eaf0:	e2 e0       	ldi	r30, 0x02	; 2
    eaf2:	0c 94 0a e0 	jmp	0x1c014	; 0x1c014 <__epilogue_restores__+0x20>

0000eaf6 <_fprintf_putc>:
    eaf6:	fc 01       	movw	r30, r24
    eaf8:	86 2f       	mov	r24, r22
    eafa:	26 81       	ldd	r18, Z+6	; 0x06
    eafc:	37 81       	ldd	r19, Z+7	; 0x07
    eafe:	2f 5f       	subi	r18, 0xFF	; 255
    eb00:	3f 4f       	sbci	r19, 0xFF	; 255
    eb02:	37 83       	std	Z+7, r19	; 0x07
    eb04:	26 83       	std	Z+6, r18	; 0x06
    eb06:	62 81       	ldd	r22, Z+2	; 0x02
    eb08:	73 81       	ldd	r23, Z+3	; 0x03
    eb0a:	90 e0       	ldi	r25, 0x00	; 0
    eb0c:	a2 cf       	rjmp	.-188    	; 0xea52 <fputc>
    eb0e:	08 95       	ret

0000eb10 <getchar>:
    eb10:	80 91 83 1c 	lds	r24, 0x1C83	; 0x801c83 <__iob>
    eb14:	90 91 84 1c 	lds	r25, 0x1C84	; 0x801c84 <__iob+0x1>
    eb18:	46 cf       	rjmp	.-372    	; 0xe9a6 <fgetc>
    eb1a:	08 95       	ret

0000eb1c <putchar>:
    eb1c:	60 91 85 1c 	lds	r22, 0x1C85	; 0x801c85 <__iob+0x2>
    eb20:	70 91 86 1c 	lds	r23, 0x1C86	; 0x801c86 <__iob+0x3>
    eb24:	96 cf       	rjmp	.-212    	; 0xea52 <fputc>
    eb26:	08 95       	ret

0000eb28 <fgets>:
    eb28:	a0 e0       	ldi	r26, 0x00	; 0
    eb2a:	b0 e0       	ldi	r27, 0x00	; 0
    eb2c:	ea e9       	ldi	r30, 0x9A	; 154
    eb2e:	f5 e7       	ldi	r31, 0x75	; 117
    eb30:	0c 94 e8 df 	jmp	0x1bfd0	; 0x1bfd0 <__prologue_saves__+0x14>
    eb34:	7c 01       	movw	r14, r24
    eb36:	6a 01       	movw	r12, r20
    eb38:	8b 01       	movw	r16, r22
    eb3a:	c0 e0       	ldi	r28, 0x00	; 0
    eb3c:	d0 e0       	ldi	r29, 0x00	; 0
    eb3e:	01 15       	cp	r16, r1
    eb40:	11 05       	cpc	r17, r1
    eb42:	41 f0       	breq	.+16     	; 0xeb54 <fgets+0x2c>
    eb44:	c6 01       	movw	r24, r12
    eb46:	2f df       	rcall	.-418    	; 0xe9a6 <fgetc>
    eb48:	8f 3f       	cpi	r24, 0xFF	; 255
    eb4a:	2f ef       	ldi	r18, 0xFF	; 255
    eb4c:	92 07       	cpc	r25, r18
    eb4e:	39 f4       	brne	.+14     	; 0xeb5e <fgets+0x36>
    eb50:	20 97       	sbiw	r28, 0x00	; 0
    eb52:	b9 f0       	breq	.+46     	; 0xeb82 <fgets+0x5a>
    eb54:	ce 0d       	add	r28, r14
    eb56:	df 1d       	adc	r29, r15
    eb58:	18 82       	st	Y, r1
    eb5a:	c7 01       	movw	r24, r14
    eb5c:	14 c0       	rjmp	.+40     	; 0xeb86 <fgets+0x5e>
    eb5e:	8a 30       	cpi	r24, 0x0A	; 10
    eb60:	91 05       	cpc	r25, r1
    eb62:	c1 f3       	breq	.-16     	; 0xeb54 <fgets+0x2c>
    eb64:	88 30       	cpi	r24, 0x08	; 8
    eb66:	91 05       	cpc	r25, r1
    eb68:	21 f4       	brne	.+8      	; 0xeb72 <fgets+0x4a>
    eb6a:	20 97       	sbiw	r28, 0x00	; 0
    eb6c:	39 f0       	breq	.+14     	; 0xeb7c <fgets+0x54>
    eb6e:	21 97       	sbiw	r28, 0x01	; 1
    eb70:	05 c0       	rjmp	.+10     	; 0xeb7c <fgets+0x54>
    eb72:	f7 01       	movw	r30, r14
    eb74:	ec 0f       	add	r30, r28
    eb76:	fd 1f       	adc	r31, r29
    eb78:	80 83       	st	Z, r24
    eb7a:	21 96       	adiw	r28, 0x01	; 1
    eb7c:	01 50       	subi	r16, 0x01	; 1
    eb7e:	11 09       	sbc	r17, r1
    eb80:	de cf       	rjmp	.-68     	; 0xeb3e <fgets+0x16>
    eb82:	80 e0       	ldi	r24, 0x00	; 0
    eb84:	90 e0       	ldi	r25, 0x00	; 0
    eb86:	cd b7       	in	r28, 0x3d	; 61
    eb88:	de b7       	in	r29, 0x3e	; 62
    eb8a:	e8 e0       	ldi	r30, 0x08	; 8
    eb8c:	0c 94 04 e0 	jmp	0x1c008	; 0x1c008 <__epilogue_restores__+0x14>

0000eb90 <fputs>:
    eb90:	0f 93       	push	r16
    eb92:	1f 93       	push	r17
    eb94:	cf 93       	push	r28
    eb96:	df 93       	push	r29
    eb98:	8b 01       	movw	r16, r22
    eb9a:	ec 01       	movw	r28, r24
    eb9c:	89 91       	ld	r24, Y+
    eb9e:	88 23       	and	r24, r24
    eba0:	41 f0       	breq	.+16     	; 0xebb2 <fputs+0x22>
    eba2:	b8 01       	movw	r22, r16
    eba4:	90 e0       	ldi	r25, 0x00	; 0
    eba6:	55 df       	rcall	.-342    	; 0xea52 <fputc>
    eba8:	8f 3f       	cpi	r24, 0xFF	; 255
    ebaa:	2f ef       	ldi	r18, 0xFF	; 255
    ebac:	92 07       	cpc	r25, r18
    ebae:	b1 f7       	brne	.-20     	; 0xeb9c <fputs+0xc>
    ebb0:	02 c0       	rjmp	.+4      	; 0xebb6 <fputs+0x26>
    ebb2:	80 e0       	ldi	r24, 0x00	; 0
    ebb4:	90 e0       	ldi	r25, 0x00	; 0
    ebb6:	df 91       	pop	r29
    ebb8:	cf 91       	pop	r28
    ebba:	1f 91       	pop	r17
    ebbc:	0f 91       	pop	r16
    ebbe:	08 95       	ret

0000ebc0 <puts>:
    ebc0:	cf 93       	push	r28
    ebc2:	df 93       	push	r29
    ebc4:	ec 01       	movw	r28, r24
    ebc6:	89 91       	ld	r24, Y+
    ebc8:	60 91 85 1c 	lds	r22, 0x1C85	; 0x801c85 <__iob+0x2>
    ebcc:	70 91 86 1c 	lds	r23, 0x1C86	; 0x801c86 <__iob+0x3>
    ebd0:	88 23       	and	r24, r24
    ebd2:	39 f0       	breq	.+14     	; 0xebe2 <puts+0x22>
    ebd4:	90 e0       	ldi	r25, 0x00	; 0
    ebd6:	3d df       	rcall	.-390    	; 0xea52 <fputc>
    ebd8:	8f 3f       	cpi	r24, 0xFF	; 255
    ebda:	2f ef       	ldi	r18, 0xFF	; 255
    ebdc:	92 07       	cpc	r25, r18
    ebde:	99 f7       	brne	.-26     	; 0xebc6 <puts+0x6>
    ebe0:	03 c0       	rjmp	.+6      	; 0xebe8 <puts+0x28>
    ebe2:	8a e0       	ldi	r24, 0x0A	; 10
    ebe4:	90 e0       	ldi	r25, 0x00	; 0
    ebe6:	35 df       	rcall	.-406    	; 0xea52 <fputc>
    ebe8:	df 91       	pop	r29
    ebea:	cf 91       	pop	r28
    ebec:	08 95       	ret

0000ebee <fileno>:
    ebee:	00 97       	sbiw	r24, 0x00	; 0
    ebf0:	39 f4       	brne	.+14     	; 0xec00 <fileno+0x12>
    ebf2:	89 e0       	ldi	r24, 0x09	; 9
    ebf4:	90 e0       	ldi	r25, 0x00	; 0
    ebf6:	90 93 82 1c 	sts	0x1C82, r25	; 0x801c82 <errno+0x1>
    ebfa:	80 93 81 1c 	sts	0x1C81, r24	; 0x801c81 <errno>
    ebfe:	0e c0       	rjmp	.+28     	; 0xec1c <fileno+0x2e>
    ec00:	e3 e8       	ldi	r30, 0x83	; 131
    ec02:	fc e1       	ldi	r31, 0x1C	; 28
    ec04:	20 e0       	ldi	r18, 0x00	; 0
    ec06:	30 e0       	ldi	r19, 0x00	; 0
    ec08:	41 91       	ld	r20, Z+
    ec0a:	51 91       	ld	r21, Z+
    ec0c:	84 17       	cp	r24, r20
    ec0e:	95 07       	cpc	r25, r21
    ec10:	41 f0       	breq	.+16     	; 0xec22 <fileno+0x34>
    ec12:	2f 5f       	subi	r18, 0xFF	; 255
    ec14:	3f 4f       	sbci	r19, 0xFF	; 255
    ec16:	20 31       	cpi	r18, 0x10	; 16
    ec18:	31 05       	cpc	r19, r1
    ec1a:	b1 f7       	brne	.-20     	; 0xec08 <fileno+0x1a>
    ec1c:	8f ef       	ldi	r24, 0xFF	; 255
    ec1e:	9f ef       	ldi	r25, 0xFF	; 255
    ec20:	08 95       	ret
    ec22:	c9 01       	movw	r24, r18
    ec24:	08 95       	ret

0000ec26 <fileno_to_stream>:
    ec26:	80 31       	cpi	r24, 0x10	; 16
    ec28:	91 05       	cpc	r25, r1
    ec2a:	48 f4       	brcc	.+18     	; 0xec3e <fileno_to_stream+0x18>
    ec2c:	88 0f       	add	r24, r24
    ec2e:	99 1f       	adc	r25, r25
    ec30:	fc 01       	movw	r30, r24
    ec32:	ed 57       	subi	r30, 0x7D	; 125
    ec34:	f3 4e       	sbci	r31, 0xE3	; 227
    ec36:	80 81       	ld	r24, Z
    ec38:	91 81       	ldd	r25, Z+1	; 0x01
    ec3a:	00 97       	sbiw	r24, 0x00	; 0
    ec3c:	41 f4       	brne	.+16     	; 0xec4e <fileno_to_stream+0x28>
    ec3e:	89 e0       	ldi	r24, 0x09	; 9
    ec40:	90 e0       	ldi	r25, 0x00	; 0
    ec42:	90 93 82 1c 	sts	0x1C82, r25	; 0x801c82 <errno+0x1>
    ec46:	80 93 81 1c 	sts	0x1C81, r24	; 0x801c81 <errno>
    ec4a:	80 e0       	ldi	r24, 0x00	; 0
    ec4c:	90 e0       	ldi	r25, 0x00	; 0
    ec4e:	08 95       	ret

0000ec50 <mctime>:
    ec50:	a4 e0       	ldi	r26, 0x04	; 4
    ec52:	b0 e0       	ldi	r27, 0x00	; 0
    ec54:	ee e2       	ldi	r30, 0x2E	; 46
    ec56:	f6 e7       	ldi	r31, 0x76	; 118
    ec58:	0c 94 ee df 	jmp	0x1bfdc	; 0x1bfdc <__prologue_saves__+0x20>
    ec5c:	69 83       	std	Y+1, r22	; 0x01
    ec5e:	7a 83       	std	Y+2, r23	; 0x02
    ec60:	8b 83       	std	Y+3, r24	; 0x03
    ec62:	9c 83       	std	Y+4, r25	; 0x04
    ec64:	10 92 82 1c 	sts	0x1C82, r1	; 0x801c82 <errno+0x1>
    ec68:	10 92 81 1c 	sts	0x1C81, r1	; 0x801c81 <errno>
    ec6c:	ce 01       	movw	r24, r28
    ec6e:	01 96       	adiw	r24, 0x01	; 1
    ec70:	0e 94 78 3c 	call	0x78f0	; 0x78f0 <ctime_gm>
    ec74:	fc 01       	movw	r30, r24
    ec76:	01 90       	ld	r0, Z+
    ec78:	00 20       	and	r0, r0
    ec7a:	e9 f7       	brne	.-6      	; 0xec76 <mctime+0x26>
    ec7c:	31 97       	sbiw	r30, 0x01	; 1
    ec7e:	e8 1b       	sub	r30, r24
    ec80:	f9 0b       	sbc	r31, r25
    ec82:	39 f0       	breq	.+14     	; 0xec92 <mctime+0x42>
    ec84:	31 97       	sbiw	r30, 0x01	; 1
    ec86:	e8 0f       	add	r30, r24
    ec88:	f9 1f       	adc	r31, r25
    ec8a:	20 81       	ld	r18, Z
    ec8c:	2a 30       	cpi	r18, 0x0A	; 10
    ec8e:	09 f4       	brne	.+2      	; 0xec92 <mctime+0x42>
    ec90:	10 82       	st	Z, r1
    ec92:	24 96       	adiw	r28, 0x04	; 4
    ec94:	e2 e0       	ldi	r30, 0x02	; 2
    ec96:	0c 94 0a e0 	jmp	0x1c014	; 0x1c014 <__epilogue_restores__+0x20>

0000ec9a <basename>:
    ec9a:	00 97       	sbiw	r24, 0x00	; 0
    ec9c:	49 f0       	breq	.+18     	; 0xecb0 <basename+0x16>
    ec9e:	fc 01       	movw	r30, r24
    eca0:	21 91       	ld	r18, Z+
    eca2:	22 23       	and	r18, r18
    eca4:	21 f0       	breq	.+8      	; 0xecae <basename+0x14>
    eca6:	2f 32       	cpi	r18, 0x2F	; 47
    eca8:	d9 f7       	brne	.-10     	; 0xeca0 <basename+0x6>
    ecaa:	cf 01       	movw	r24, r30
    ecac:	f9 cf       	rjmp	.-14     	; 0xeca0 <basename+0x6>
    ecae:	08 95       	ret
    ecb0:	8c e0       	ldi	r24, 0x0C	; 12
    ecb2:	97 e1       	ldi	r25, 0x17	; 23
    ecb4:	08 95       	ret

0000ecb6 <chdir>:
    ecb6:	10 92 82 1c 	sts	0x1C82, r1	; 0x801c82 <errno+0x1>
    ecba:	10 92 81 1c 	sts	0x1C81, r1	; 0x801c81 <errno>
    ecbe:	0e 94 90 5e 	call	0xbd20	; 0xbd20 <f_chdir>
    ecc2:	00 97       	sbiw	r24, 0x00	; 0
    ecc4:	a1 f0       	breq	.+40     	; 0xecee <chdir+0x38>
    ecc6:	84 31       	cpi	r24, 0x14	; 20
    ecc8:	91 05       	cpc	r25, r1
    ecca:	40 f4       	brcc	.+16     	; 0xecdc <chdir+0x26>
    eccc:	fc 01       	movw	r30, r24
    ecce:	e8 58       	subi	r30, 0x88	; 136
    ecd0:	f4 4f       	sbci	r31, 0xF4	; 244
    ecd2:	80 81       	ld	r24, Z
    ecd4:	08 2e       	mov	r0, r24
    ecd6:	00 0c       	add	r0, r0
    ecd8:	99 0b       	sbc	r25, r25
    ecda:	02 c0       	rjmp	.+4      	; 0xece0 <chdir+0x2a>
    ecdc:	83 e2       	ldi	r24, 0x23	; 35
    ecde:	90 e0       	ldi	r25, 0x00	; 0
    ece0:	90 93 82 1c 	sts	0x1C82, r25	; 0x801c82 <errno+0x1>
    ece4:	80 93 81 1c 	sts	0x1C81, r24	; 0x801c81 <errno>
    ece8:	8f ef       	ldi	r24, 0xFF	; 255
    ecea:	9f ef       	ldi	r25, 0xFF	; 255
    ecec:	08 95       	ret
    ecee:	80 e0       	ldi	r24, 0x00	; 0
    ecf0:	90 e0       	ldi	r25, 0x00	; 0
    ecf2:	08 95       	ret

0000ecf4 <chmod>:
    ecf4:	10 92 82 1c 	sts	0x1C82, r1	; 0x801c82 <errno+0x1>
    ecf8:	10 92 81 1c 	sts	0x1C81, r1	; 0x801c81 <errno>
    ecfc:	42 79       	andi	r20, 0x92	; 146
    ecfe:	55 27       	eor	r21, r21
    ed00:	66 27       	eor	r22, r22
    ed02:	77 27       	eor	r23, r23
    ed04:	45 2b       	or	r20, r21
    ed06:	46 2b       	or	r20, r22
    ed08:	47 2b       	or	r20, r23
    ed0a:	19 f0       	breq	.+6      	; 0xed12 <chmod+0x1e>
    ed0c:	80 e0       	ldi	r24, 0x00	; 0
    ed0e:	90 e0       	ldi	r25, 0x00	; 0
    ed10:	08 95       	ret
    ed12:	41 e0       	ldi	r20, 0x01	; 1
    ed14:	61 e0       	ldi	r22, 0x01	; 1
    ed16:	0e 94 71 67 	call	0xcee2	; 0xcee2 <f_chmod>
    ed1a:	00 97       	sbiw	r24, 0x00	; 0
    ed1c:	b9 f3       	breq	.-18     	; 0xed0c <chmod+0x18>
    ed1e:	84 31       	cpi	r24, 0x14	; 20
    ed20:	91 05       	cpc	r25, r1
    ed22:	40 f4       	brcc	.+16     	; 0xed34 <chmod+0x40>
    ed24:	fc 01       	movw	r30, r24
    ed26:	e8 58       	subi	r30, 0x88	; 136
    ed28:	f4 4f       	sbci	r31, 0xF4	; 244
    ed2a:	80 81       	ld	r24, Z
    ed2c:	08 2e       	mov	r0, r24
    ed2e:	00 0c       	add	r0, r0
    ed30:	99 0b       	sbc	r25, r25
    ed32:	02 c0       	rjmp	.+4      	; 0xed38 <chmod+0x44>
    ed34:	83 e2       	ldi	r24, 0x23	; 35
    ed36:	90 e0       	ldi	r25, 0x00	; 0
    ed38:	90 93 82 1c 	sts	0x1C82, r25	; 0x801c82 <errno+0x1>
    ed3c:	80 93 81 1c 	sts	0x1C81, r24	; 0x801c81 <errno>
    ed40:	8f ef       	ldi	r24, 0xFF	; 255
    ed42:	9f ef       	ldi	r25, 0xFF	; 255
    ed44:	08 95       	ret

0000ed46 <getcwd>:
    ed46:	cf 93       	push	r28
    ed48:	df 93       	push	r29
    ed4a:	d8 2f       	mov	r29, r24
    ed4c:	c9 2f       	mov	r28, r25
    ed4e:	10 92 82 1c 	sts	0x1C82, r1	; 0x801c82 <errno+0x1>
    ed52:	10 92 81 1c 	sts	0x1C81, r1	; 0x801c81 <errno>
    ed56:	0e 94 eb 5e 	call	0xbdd6	; 0xbdd6 <f_getcwd>
    ed5a:	00 97       	sbiw	r24, 0x00	; 0
    ed5c:	a1 f0       	breq	.+40     	; 0xed86 <getcwd+0x40>
    ed5e:	84 31       	cpi	r24, 0x14	; 20
    ed60:	91 05       	cpc	r25, r1
    ed62:	40 f4       	brcc	.+16     	; 0xed74 <getcwd+0x2e>
    ed64:	fc 01       	movw	r30, r24
    ed66:	e8 58       	subi	r30, 0x88	; 136
    ed68:	f4 4f       	sbci	r31, 0xF4	; 244
    ed6a:	80 81       	ld	r24, Z
    ed6c:	08 2e       	mov	r0, r24
    ed6e:	00 0c       	add	r0, r0
    ed70:	99 0b       	sbc	r25, r25
    ed72:	02 c0       	rjmp	.+4      	; 0xed78 <getcwd+0x32>
    ed74:	83 e2       	ldi	r24, 0x23	; 35
    ed76:	90 e0       	ldi	r25, 0x00	; 0
    ed78:	90 93 82 1c 	sts	0x1C82, r25	; 0x801c82 <errno+0x1>
    ed7c:	80 93 81 1c 	sts	0x1C81, r24	; 0x801c81 <errno>
    ed80:	80 e0       	ldi	r24, 0x00	; 0
    ed82:	90 e0       	ldi	r25, 0x00	; 0
    ed84:	02 c0       	rjmp	.+4      	; 0xed8a <getcwd+0x44>
    ed86:	8d 2f       	mov	r24, r29
    ed88:	9c 2f       	mov	r25, r28
    ed8a:	df 91       	pop	r29
    ed8c:	cf 91       	pop	r28
    ed8e:	08 95       	ret

0000ed90 <mkdir>:
    ed90:	cf 93       	push	r28
    ed92:	df 93       	push	r29
    ed94:	ec 01       	movw	r28, r24
    ed96:	10 92 82 1c 	sts	0x1C82, r1	; 0x801c82 <errno+0x1>
    ed9a:	10 92 81 1c 	sts	0x1C81, r1	; 0x801c81 <errno>
    ed9e:	41 15       	cp	r20, r1
    eda0:	51 05       	cpc	r21, r1
    eda2:	61 05       	cpc	r22, r1
    eda4:	71 05       	cpc	r23, r1
    eda6:	41 f4       	brne	.+16     	; 0xedb8 <mkdir+0x28>
    eda8:	ce 01       	movw	r24, r28
    edaa:	0e 94 6c 65 	call	0xcad8	; 0xcad8 <f_mkdir>
    edae:	00 97       	sbiw	r24, 0x00	; 0
    edb0:	39 f4       	brne	.+14     	; 0xedc0 <mkdir+0x30>
    edb2:	80 e0       	ldi	r24, 0x00	; 0
    edb4:	90 e0       	ldi	r25, 0x00	; 0
    edb6:	17 c0       	rjmp	.+46     	; 0xede6 <mkdir+0x56>
    edb8:	9d df       	rcall	.-198    	; 0xecf4 <chmod>
    edba:	89 2b       	or	r24, r25
    edbc:	a9 f3       	breq	.-22     	; 0xeda8 <mkdir+0x18>
    edbe:	11 c0       	rjmp	.+34     	; 0xede2 <mkdir+0x52>
    edc0:	84 31       	cpi	r24, 0x14	; 20
    edc2:	91 05       	cpc	r25, r1
    edc4:	40 f4       	brcc	.+16     	; 0xedd6 <mkdir+0x46>
    edc6:	fc 01       	movw	r30, r24
    edc8:	e8 58       	subi	r30, 0x88	; 136
    edca:	f4 4f       	sbci	r31, 0xF4	; 244
    edcc:	80 81       	ld	r24, Z
    edce:	08 2e       	mov	r0, r24
    edd0:	00 0c       	add	r0, r0
    edd2:	99 0b       	sbc	r25, r25
    edd4:	02 c0       	rjmp	.+4      	; 0xedda <mkdir+0x4a>
    edd6:	83 e2       	ldi	r24, 0x23	; 35
    edd8:	90 e0       	ldi	r25, 0x00	; 0
    edda:	90 93 82 1c 	sts	0x1C82, r25	; 0x801c82 <errno+0x1>
    edde:	80 93 81 1c 	sts	0x1C81, r24	; 0x801c81 <errno>
    ede2:	8f ef       	ldi	r24, 0xFF	; 255
    ede4:	9f ef       	ldi	r25, 0xFF	; 255
    ede6:	df 91       	pop	r29
    ede8:	cf 91       	pop	r28
    edea:	08 95       	ret

0000edec <rename>:
    edec:	10 92 82 1c 	sts	0x1C82, r1	; 0x801c82 <errno+0x1>
    edf0:	10 92 81 1c 	sts	0x1C81, r1	; 0x801c81 <errno>
    edf4:	0e 94 5c 66 	call	0xccb8	; 0xccb8 <f_rename>
    edf8:	00 97       	sbiw	r24, 0x00	; 0
    edfa:	a1 f0       	breq	.+40     	; 0xee24 <rename+0x38>
    edfc:	84 31       	cpi	r24, 0x14	; 20
    edfe:	91 05       	cpc	r25, r1
    ee00:	40 f4       	brcc	.+16     	; 0xee12 <rename+0x26>
    ee02:	fc 01       	movw	r30, r24
    ee04:	e8 58       	subi	r30, 0x88	; 136
    ee06:	f4 4f       	sbci	r31, 0xF4	; 244
    ee08:	80 81       	ld	r24, Z
    ee0a:	08 2e       	mov	r0, r24
    ee0c:	00 0c       	add	r0, r0
    ee0e:	99 0b       	sbc	r25, r25
    ee10:	02 c0       	rjmp	.+4      	; 0xee16 <rename+0x2a>
    ee12:	83 e2       	ldi	r24, 0x23	; 35
    ee14:	90 e0       	ldi	r25, 0x00	; 0
    ee16:	90 93 82 1c 	sts	0x1C82, r25	; 0x801c82 <errno+0x1>
    ee1a:	80 93 81 1c 	sts	0x1C81, r24	; 0x801c81 <errno>
    ee1e:	8f ef       	ldi	r24, 0xFF	; 255
    ee20:	9f ef       	ldi	r25, 0xFF	; 255
    ee22:	08 95       	ret
    ee24:	80 e0       	ldi	r24, 0x00	; 0
    ee26:	90 e0       	ldi	r25, 0x00	; 0
    ee28:	08 95       	ret

0000ee2a <unlink>:
    ee2a:	10 92 82 1c 	sts	0x1C82, r1	; 0x801c82 <errno+0x1>
    ee2e:	10 92 81 1c 	sts	0x1C81, r1	; 0x801c81 <errno>
    ee32:	0e 94 c5 64 	call	0xc98a	; 0xc98a <f_unlink>
    ee36:	00 97       	sbiw	r24, 0x00	; 0
    ee38:	a1 f0       	breq	.+40     	; 0xee62 <unlink+0x38>
    ee3a:	84 31       	cpi	r24, 0x14	; 20
    ee3c:	91 05       	cpc	r25, r1
    ee3e:	40 f4       	brcc	.+16     	; 0xee50 <unlink+0x26>
    ee40:	fc 01       	movw	r30, r24
    ee42:	e8 58       	subi	r30, 0x88	; 136
    ee44:	f4 4f       	sbci	r31, 0xF4	; 244
    ee46:	80 81       	ld	r24, Z
    ee48:	08 2e       	mov	r0, r24
    ee4a:	00 0c       	add	r0, r0
    ee4c:	99 0b       	sbc	r25, r25
    ee4e:	02 c0       	rjmp	.+4      	; 0xee54 <unlink+0x2a>
    ee50:	83 e2       	ldi	r24, 0x23	; 35
    ee52:	90 e0       	ldi	r25, 0x00	; 0
    ee54:	90 93 82 1c 	sts	0x1C82, r25	; 0x801c82 <errno+0x1>
    ee58:	80 93 81 1c 	sts	0x1C81, r24	; 0x801c81 <errno>
    ee5c:	8f ef       	ldi	r24, 0xFF	; 255
    ee5e:	9f ef       	ldi	r25, 0xFF	; 255
    ee60:	08 95       	ret
    ee62:	80 e0       	ldi	r24, 0x00	; 0
    ee64:	90 e0       	ldi	r25, 0x00	; 0
    ee66:	08 95       	ret

0000ee68 <rmdir>:
    ee68:	e0 cf       	rjmp	.-64     	; 0xee2a <unlink>
    ee6a:	08 95       	ret

0000ee6c <closedir>:
    ee6c:	0e 94 4e 63 	call	0xc69c	; 0xc69c <f_closedir>
    ee70:	00 97       	sbiw	r24, 0x00	; 0
    ee72:	a1 f0       	breq	.+40     	; 0xee9c <closedir+0x30>
    ee74:	84 31       	cpi	r24, 0x14	; 20
    ee76:	91 05       	cpc	r25, r1
    ee78:	40 f4       	brcc	.+16     	; 0xee8a <closedir+0x1e>
    ee7a:	fc 01       	movw	r30, r24
    ee7c:	e8 58       	subi	r30, 0x88	; 136
    ee7e:	f4 4f       	sbci	r31, 0xF4	; 244
    ee80:	80 81       	ld	r24, Z
    ee82:	08 2e       	mov	r0, r24
    ee84:	00 0c       	add	r0, r0
    ee86:	99 0b       	sbc	r25, r25
    ee88:	02 c0       	rjmp	.+4      	; 0xee8e <closedir+0x22>
    ee8a:	83 e2       	ldi	r24, 0x23	; 35
    ee8c:	90 e0       	ldi	r25, 0x00	; 0
    ee8e:	90 93 82 1c 	sts	0x1C82, r25	; 0x801c82 <errno+0x1>
    ee92:	80 93 81 1c 	sts	0x1C81, r24	; 0x801c81 <errno>
    ee96:	8f ef       	ldi	r24, 0xFF	; 255
    ee98:	9f ef       	ldi	r25, 0xFF	; 255
    ee9a:	08 95       	ret
    ee9c:	80 e0       	ldi	r24, 0x00	; 0
    ee9e:	90 e0       	ldi	r25, 0x00	; 0
    eea0:	08 95       	ret

0000eea2 <opendir>:
    eea2:	bc 01       	movw	r22, r24
    eea4:	8b ef       	ldi	r24, 0xFB	; 251
    eea6:	98 e1       	ldi	r25, 0x18	; 24
    eea8:	0e 94 dd 62 	call	0xc5ba	; 0xc5ba <f_opendir>
    eeac:	00 97       	sbiw	r24, 0x00	; 0
    eeae:	a1 f0       	breq	.+40     	; 0xeed8 <opendir+0x36>
    eeb0:	84 31       	cpi	r24, 0x14	; 20
    eeb2:	91 05       	cpc	r25, r1
    eeb4:	40 f4       	brcc	.+16     	; 0xeec6 <opendir+0x24>
    eeb6:	fc 01       	movw	r30, r24
    eeb8:	e8 58       	subi	r30, 0x88	; 136
    eeba:	f4 4f       	sbci	r31, 0xF4	; 244
    eebc:	80 81       	ld	r24, Z
    eebe:	08 2e       	mov	r0, r24
    eec0:	00 0c       	add	r0, r0
    eec2:	99 0b       	sbc	r25, r25
    eec4:	02 c0       	rjmp	.+4      	; 0xeeca <opendir+0x28>
    eec6:	83 e2       	ldi	r24, 0x23	; 35
    eec8:	90 e0       	ldi	r25, 0x00	; 0
    eeca:	90 93 82 1c 	sts	0x1C82, r25	; 0x801c82 <errno+0x1>
    eece:	80 93 81 1c 	sts	0x1C81, r24	; 0x801c81 <errno>
    eed2:	80 e0       	ldi	r24, 0x00	; 0
    eed4:	90 e0       	ldi	r25, 0x00	; 0
    eed6:	08 95       	ret
    eed8:	8b ef       	ldi	r24, 0xFB	; 251
    eeda:	98 e1       	ldi	r25, 0x18	; 24
    eedc:	08 95       	ret

0000eede <readdir>:
    eede:	a6 e1       	ldi	r26, 0x16	; 22
    eee0:	b1 e0       	ldi	r27, 0x01	; 1
    eee2:	e5 e7       	ldi	r30, 0x75	; 117
    eee4:	f7 e7       	ldi	r31, 0x77	; 119
    eee6:	0c 94 ec df 	jmp	0x1bfd8	; 0x1bfd8 <__prologue_saves__+0x1c>
    eeea:	10 92 fc 17 	sts	0x17FC, r1	; 0x8017fc <_de>
    eeee:	be 01       	movw	r22, r28
    eef0:	6f 5f       	subi	r22, 0xFF	; 255
    eef2:	7f 4f       	sbci	r23, 0xFF	; 255
    eef4:	0e 94 63 63 	call	0xc6c6	; 0xc6c6 <f_readdir>
    eef8:	00 97       	sbiw	r24, 0x00	; 0
    eefa:	a1 f0       	breq	.+40     	; 0xef24 <readdir+0x46>
    eefc:	84 31       	cpi	r24, 0x14	; 20
    eefe:	91 05       	cpc	r25, r1
    ef00:	40 f4       	brcc	.+16     	; 0xef12 <readdir+0x34>
    ef02:	fc 01       	movw	r30, r24
    ef04:	e8 58       	subi	r30, 0x88	; 136
    ef06:	f4 4f       	sbci	r31, 0xF4	; 244
    ef08:	80 81       	ld	r24, Z
    ef0a:	08 2e       	mov	r0, r24
    ef0c:	00 0c       	add	r0, r0
    ef0e:	99 0b       	sbc	r25, r25
    ef10:	02 c0       	rjmp	.+4      	; 0xef16 <readdir+0x38>
    ef12:	83 e2       	ldi	r24, 0x23	; 35
    ef14:	90 e0       	ldi	r25, 0x00	; 0
    ef16:	90 93 82 1c 	sts	0x1C82, r25	; 0x801c82 <errno+0x1>
    ef1a:	80 93 81 1c 	sts	0x1C81, r24	; 0x801c81 <errno>
    ef1e:	80 e0       	ldi	r24, 0x00	; 0
    ef20:	90 e0       	ldi	r25, 0x00	; 0
    ef22:	16 c0       	rjmp	.+44     	; 0xef50 <readdir+0x72>
    ef24:	be 01       	movw	r22, r28
    ef26:	69 5e       	subi	r22, 0xE9	; 233
    ef28:	7f 4f       	sbci	r23, 0xFF	; 255
    ef2a:	fb 01       	movw	r30, r22
    ef2c:	01 90       	ld	r0, Z+
    ef2e:	00 20       	and	r0, r0
    ef30:	e9 f7       	brne	.-6      	; 0xef2c <readdir+0x4e>
    ef32:	31 97       	sbiw	r30, 0x01	; 1
    ef34:	8f 01       	movw	r16, r30
    ef36:	06 1b       	sub	r16, r22
    ef38:	17 0b       	sbc	r17, r23
    ef3a:	a8 01       	movw	r20, r16
    ef3c:	8c ef       	ldi	r24, 0xFC	; 252
    ef3e:	97 e1       	ldi	r25, 0x17	; 23
    ef40:	0e 94 a8 30 	call	0x6150	; 0x6150 <strncpy>
    ef44:	f8 01       	movw	r30, r16
    ef46:	e4 50       	subi	r30, 0x04	; 4
    ef48:	f8 4e       	sbci	r31, 0xE8	; 232
    ef4a:	10 82       	st	Z, r1
    ef4c:	8c ef       	ldi	r24, 0xFC	; 252
    ef4e:	97 e1       	ldi	r25, 0x17	; 23
    ef50:	ca 5e       	subi	r28, 0xEA	; 234
    ef52:	de 4f       	sbci	r29, 0xFE	; 254
    ef54:	e4 e0       	ldi	r30, 0x04	; 4
    ef56:	0c 94 08 e0 	jmp	0x1c010	; 0x1c010 <__epilogue_restores__+0x1c>

0000ef5a <perror>:
    ef5a:	ad b7       	in	r26, 0x3d	; 61
    ef5c:	be b7       	in	r27, 0x3e	; 62
    ef5e:	17 97       	sbiw	r26, 0x07	; 7
    ef60:	0f b6       	in	r0, 0x3f	; 63
    ef62:	f8 94       	cli
    ef64:	be bf       	out	0x3e, r27	; 62
    ef66:	0f be       	out	0x3f, r0	; 63
    ef68:	ad bf       	out	0x3d, r26	; 61
    ef6a:	20 91 81 1c 	lds	r18, 0x1C81	; 0x801c81 <errno>
    ef6e:	30 91 82 1c 	lds	r19, 0x1C82	; 0x801c82 <errno+0x1>
    ef72:	23 32       	cpi	r18, 0x23	; 35
    ef74:	31 05       	cpc	r19, r1
    ef76:	40 f4       	brcc	.+16     	; 0xef88 <perror+0x2e>
    ef78:	22 0f       	add	r18, r18
    ef7a:	33 1f       	adc	r19, r19
    ef7c:	f9 01       	movw	r30, r18
    ef7e:	ed 5b       	subi	r30, 0xBD	; 189
    ef80:	fe 4f       	sbci	r31, 0xFE	; 254
    ef82:	20 81       	ld	r18, Z
    ef84:	31 81       	ldd	r19, Z+1	; 0x01
    ef86:	04 c0       	rjmp	.+8      	; 0xef90 <perror+0x36>
    ef88:	20 91 89 01 	lds	r18, 0x0189	; 0x800189 <sys_errlist+0x46>
    ef8c:	30 91 8a 01 	lds	r19, 0x018A	; 0x80018a <sys_errlist+0x47>
    ef90:	00 97       	sbiw	r24, 0x00	; 0
    ef92:	99 f0       	breq	.+38     	; 0xefba <perror+0x60>
    ef94:	fc 01       	movw	r30, r24
    ef96:	40 81       	ld	r20, Z
    ef98:	44 23       	and	r20, r20
    ef9a:	79 f0       	breq	.+30     	; 0xefba <perror+0x60>
    ef9c:	ed b7       	in	r30, 0x3d	; 61
    ef9e:	fe b7       	in	r31, 0x3e	; 62
    efa0:	37 83       	std	Z+7, r19	; 0x07
    efa2:	26 83       	std	Z+6, r18	; 0x06
    efa4:	95 83       	std	Z+5, r25	; 0x05
    efa6:	84 83       	std	Z+4, r24	; 0x04
    efa8:	8c e2       	ldi	r24, 0x2C	; 44
    efaa:	9b e0       	ldi	r25, 0x0B	; 11
    efac:	a0 e0       	ldi	r26, 0x00	; 0
    efae:	81 83       	std	Z+1, r24	; 0x01
    efb0:	92 83       	std	Z+2, r25	; 0x02
    efb2:	a3 83       	std	Z+3, r26	; 0x03
    efb4:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    efb8:	0c c0       	rjmp	.+24     	; 0xefd2 <perror+0x78>
    efba:	ed b7       	in	r30, 0x3d	; 61
    efbc:	fe b7       	in	r31, 0x3e	; 62
    efbe:	35 83       	std	Z+5, r19	; 0x05
    efc0:	24 83       	std	Z+4, r18	; 0x04
    efc2:	88 e2       	ldi	r24, 0x28	; 40
    efc4:	9b e0       	ldi	r25, 0x0B	; 11
    efc6:	a0 e0       	ldi	r26, 0x00	; 0
    efc8:	81 83       	std	Z+1, r24	; 0x01
    efca:	92 83       	std	Z+2, r25	; 0x02
    efcc:	a3 83       	std	Z+3, r26	; 0x03
    efce:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    efd2:	ad b7       	in	r26, 0x3d	; 61
    efd4:	be b7       	in	r27, 0x3e	; 62
    efd6:	17 96       	adiw	r26, 0x07	; 7
    efd8:	0f b6       	in	r0, 0x3f	; 63
    efda:	f8 94       	cli
    efdc:	be bf       	out	0x3e, r27	; 62
    efde:	0f be       	out	0x3f, r0	; 63
    efe0:	ad bf       	out	0x3d, r26	; 61
    efe2:	08 95       	ret

0000efe4 <fdevopen>:
    efe4:	0f 93       	push	r16
    efe6:	1f 93       	push	r17
    efe8:	cf 93       	push	r28
    efea:	df 93       	push	r29
    efec:	00 97       	sbiw	r24, 0x00	; 0
    efee:	31 f4       	brne	.+12     	; 0xeffc <fdevopen+0x18>
    eff0:	61 15       	cp	r22, r1
    eff2:	71 05       	cpc	r23, r1
    eff4:	19 f4       	brne	.+6      	; 0xeffc <fdevopen+0x18>
    eff6:	80 e0       	ldi	r24, 0x00	; 0
    eff8:	90 e0       	ldi	r25, 0x00	; 0
    effa:	3a c0       	rjmp	.+116    	; 0xf070 <fdevopen+0x8c>
    effc:	8b 01       	movw	r16, r22
    effe:	ec 01       	movw	r28, r24
    f000:	6e e0       	ldi	r22, 0x0E	; 14
    f002:	70 e0       	ldi	r23, 0x00	; 0
    f004:	81 e0       	ldi	r24, 0x01	; 1
    f006:	90 e0       	ldi	r25, 0x00	; 0
    f008:	0e 94 b1 27 	call	0x4f62	; 0x4f62 <safecalloc>
    f00c:	fc 01       	movw	r30, r24
    f00e:	89 2b       	or	r24, r25
    f010:	91 f3       	breq	.-28     	; 0xeff6 <fdevopen+0x12>
    f012:	80 e8       	ldi	r24, 0x80	; 128
    f014:	83 83       	std	Z+3, r24	; 0x03
    f016:	01 15       	cp	r16, r1
    f018:	11 05       	cpc	r17, r1
    f01a:	71 f0       	breq	.+28     	; 0xf038 <fdevopen+0x54>
    f01c:	13 87       	std	Z+11, r17	; 0x0b
    f01e:	02 87       	std	Z+10, r16	; 0x0a
    f020:	81 e8       	ldi	r24, 0x81	; 129
    f022:	83 83       	std	Z+3, r24	; 0x03
    f024:	80 91 83 1c 	lds	r24, 0x1C83	; 0x801c83 <__iob>
    f028:	90 91 84 1c 	lds	r25, 0x1C84	; 0x801c84 <__iob+0x1>
    f02c:	89 2b       	or	r24, r25
    f02e:	21 f4       	brne	.+8      	; 0xf038 <fdevopen+0x54>
    f030:	f0 93 84 1c 	sts	0x1C84, r31	; 0x801c84 <__iob+0x1>
    f034:	e0 93 83 1c 	sts	0x1C83, r30	; 0x801c83 <__iob>
    f038:	20 97       	sbiw	r28, 0x00	; 0
    f03a:	c9 f0       	breq	.+50     	; 0xf06e <fdevopen+0x8a>
    f03c:	d1 87       	std	Z+9, r29	; 0x09
    f03e:	c0 87       	std	Z+8, r28	; 0x08
    f040:	83 81       	ldd	r24, Z+3	; 0x03
    f042:	82 60       	ori	r24, 0x02	; 2
    f044:	83 83       	std	Z+3, r24	; 0x03
    f046:	80 91 85 1c 	lds	r24, 0x1C85	; 0x801c85 <__iob+0x2>
    f04a:	90 91 86 1c 	lds	r25, 0x1C86	; 0x801c86 <__iob+0x3>
    f04e:	89 2b       	or	r24, r25
    f050:	21 f4       	brne	.+8      	; 0xf05a <fdevopen+0x76>
    f052:	f0 93 86 1c 	sts	0x1C86, r31	; 0x801c86 <__iob+0x3>
    f056:	e0 93 85 1c 	sts	0x1C85, r30	; 0x801c85 <__iob+0x2>
    f05a:	80 91 87 1c 	lds	r24, 0x1C87	; 0x801c87 <__iob+0x4>
    f05e:	90 91 88 1c 	lds	r25, 0x1C88	; 0x801c88 <__iob+0x5>
    f062:	89 2b       	or	r24, r25
    f064:	21 f4       	brne	.+8      	; 0xf06e <fdevopen+0x8a>
    f066:	f0 93 88 1c 	sts	0x1C88, r31	; 0x801c88 <__iob+0x5>
    f06a:	e0 93 87 1c 	sts	0x1C87, r30	; 0x801c87 <__iob+0x4>
    f06e:	cf 01       	movw	r24, r30
    f070:	df 91       	pop	r29
    f072:	cf 91       	pop	r28
    f074:	1f 91       	pop	r17
    f076:	0f 91       	pop	r16
    f078:	08 95       	ret

0000f07a <fat_time_to_unix>:
    f07a:	a6 e1       	ldi	r26, 0x16	; 22
    f07c:	b0 e0       	ldi	r27, 0x00	; 0
    f07e:	e3 e4       	ldi	r30, 0x43	; 67
    f080:	f8 e7       	ldi	r31, 0x78	; 120
    f082:	0c 94 ee df 	jmp	0x1bfdc	; 0x1bfdc <__prologue_saves__+0x20>
    f086:	fe 01       	movw	r30, r28
    f088:	31 96       	adiw	r30, 0x01	; 1
    f08a:	26 e1       	ldi	r18, 0x16	; 22
    f08c:	df 01       	movw	r26, r30
    f08e:	1d 92       	st	X+, r1
    f090:	2a 95       	dec	r18
    f092:	e9 f7       	brne	.-6      	; 0xf08e <fat_time_to_unix+0x14>
    f094:	9b 01       	movw	r18, r22
    f096:	22 0f       	add	r18, r18
    f098:	33 1f       	adc	r19, r19
    f09a:	2e 73       	andi	r18, 0x3E	; 62
    f09c:	33 27       	eor	r19, r19
    f09e:	3a 83       	std	Y+2, r19	; 0x02
    f0a0:	29 83       	std	Y+1, r18	; 0x01
    f0a2:	9b 01       	movw	r18, r22
    f0a4:	55 e0       	ldi	r21, 0x05	; 5
    f0a6:	36 95       	lsr	r19
    f0a8:	27 95       	ror	r18
    f0aa:	5a 95       	dec	r21
    f0ac:	e1 f7       	brne	.-8      	; 0xf0a6 <fat_time_to_unix+0x2c>
    f0ae:	2f 73       	andi	r18, 0x3F	; 63
    f0b0:	33 27       	eor	r19, r19
    f0b2:	3c 83       	std	Y+4, r19	; 0x04
    f0b4:	2b 83       	std	Y+3, r18	; 0x03
    f0b6:	27 2f       	mov	r18, r23
    f0b8:	26 95       	lsr	r18
    f0ba:	26 95       	lsr	r18
    f0bc:	26 95       	lsr	r18
    f0be:	2d 83       	std	Y+5, r18	; 0x05
    f0c0:	1e 82       	std	Y+6, r1	; 0x06
    f0c2:	9c 01       	movw	r18, r24
    f0c4:	2f 71       	andi	r18, 0x1F	; 31
    f0c6:	33 27       	eor	r19, r19
    f0c8:	38 87       	std	Y+8, r19	; 0x08
    f0ca:	2f 83       	std	Y+7, r18	; 0x07
    f0cc:	9c 01       	movw	r18, r24
    f0ce:	65 e0       	ldi	r22, 0x05	; 5
    f0d0:	36 95       	lsr	r19
    f0d2:	27 95       	ror	r18
    f0d4:	6a 95       	dec	r22
    f0d6:	e1 f7       	brne	.-8      	; 0xf0d0 <fat_time_to_unix+0x56>
    f0d8:	2f 70       	andi	r18, 0x0F	; 15
    f0da:	33 27       	eor	r19, r19
    f0dc:	21 50       	subi	r18, 0x01	; 1
    f0de:	31 09       	sbc	r19, r1
    f0e0:	3a 87       	std	Y+10, r19	; 0x0a
    f0e2:	29 87       	std	Y+9, r18	; 0x09
    f0e4:	9c 01       	movw	r18, r24
    f0e6:	23 2f       	mov	r18, r19
    f0e8:	33 27       	eor	r19, r19
    f0ea:	26 95       	lsr	r18
    f0ec:	20 5b       	subi	r18, 0xB0	; 176
    f0ee:	3f 4f       	sbci	r19, 0xFF	; 255
    f0f0:	3c 87       	std	Y+12, r19	; 0x0c
    f0f2:	2b 87       	std	Y+11, r18	; 0x0b
    f0f4:	cf 01       	movw	r24, r30
    f0f6:	0e 94 c3 39 	call	0x7386	; 0x7386 <timegm>
    f0fa:	66 96       	adiw	r28, 0x16	; 22
    f0fc:	e2 e0       	ldi	r30, 0x02	; 2
    f0fe:	0c 94 0a e0 	jmp	0x1c014	; 0x1c014 <__epilogue_restores__+0x20>

0000f102 <stat>:
    f102:	a6 e1       	ldi	r26, 0x16	; 22
    f104:	b1 e0       	ldi	r27, 0x01	; 1
    f106:	e7 e8       	ldi	r30, 0x87	; 135
    f108:	f8 e7       	ldi	r31, 0x78	; 120
    f10a:	0c 94 e8 df 	jmp	0x1bfd0	; 0x1bfd0 <__prologue_saves__+0x14>
    f10e:	6c 01       	movw	r12, r24
    f110:	8b 01       	movw	r16, r22
    f112:	10 92 82 1c 	sts	0x1C82, r1	; 0x801c82 <errno+0x1>
    f116:	10 92 81 1c 	sts	0x1C81, r1	; 0x801c81 <errno>
    f11a:	6e ec       	ldi	r22, 0xCE	; 206
    f11c:	78 e0       	ldi	r23, 0x08	; 8
    f11e:	0e 94 95 31 	call	0x632a	; 0x632a <MATCH>
    f122:	89 2b       	or	r24, r25
    f124:	01 f1       	breq	.+64     	; 0xf166 <stat+0x64>
    f126:	f8 01       	movw	r30, r16
    f128:	14 a2       	std	Z+36, r1	; 0x24
    f12a:	15 a2       	std	Z+37, r1	; 0x25
    f12c:	16 a2       	std	Z+38, r1	; 0x26
    f12e:	17 a2       	std	Z+39, r1	; 0x27
    f130:	10 a6       	std	Z+40, r1	; 0x28
    f132:	11 a6       	std	Z+41, r1	; 0x29
    f134:	12 a6       	std	Z+42, r1	; 0x2a
    f136:	13 a6       	std	Z+43, r1	; 0x2b
    f138:	14 a6       	std	Z+44, r1	; 0x2c
    f13a:	15 a6       	std	Z+45, r1	; 0x2d
    f13c:	16 a6       	std	Z+46, r1	; 0x2e
    f13e:	17 a6       	std	Z+47, r1	; 0x2f
    f140:	11 8a       	std	Z+17, r1	; 0x11
    f142:	10 8a       	std	Z+16, r1	; 0x10
    f144:	13 8a       	std	Z+19, r1	; 0x13
    f146:	12 8a       	std	Z+18, r1	; 0x12
    f148:	10 8e       	std	Z+24, r1	; 0x18
    f14a:	11 8e       	std	Z+25, r1	; 0x19
    f14c:	12 8e       	std	Z+26, r1	; 0x1a
    f14e:	13 8e       	std	Z+27, r1	; 0x1b
    f150:	80 e0       	ldi	r24, 0x00	; 0
    f152:	90 e4       	ldi	r25, 0x40	; 64
    f154:	a0 e0       	ldi	r26, 0x00	; 0
    f156:	b0 e0       	ldi	r27, 0x00	; 0
    f158:	80 87       	std	Z+8, r24	; 0x08
    f15a:	91 87       	std	Z+9, r25	; 0x09
    f15c:	a2 87       	std	Z+10, r26	; 0x0a
    f15e:	b3 87       	std	Z+11, r27	; 0x0b
    f160:	e1 2c       	mov	r14, r1
    f162:	f1 2c       	mov	r15, r1
    f164:	62 c0       	rjmp	.+196    	; 0xf22a <stat+0x128>
    f166:	68 e7       	ldi	r22, 0x78	; 120
    f168:	78 e0       	ldi	r23, 0x08	; 8
    f16a:	c6 01       	movw	r24, r12
    f16c:	0e 94 95 31 	call	0x632a	; 0x632a <MATCH>
    f170:	89 2b       	or	r24, r25
    f172:	c9 f6       	brne	.-78     	; 0xf126 <stat+0x24>
    f174:	62 eb       	ldi	r22, 0xB2	; 178
    f176:	72 e1       	ldi	r23, 0x12	; 18
    f178:	c6 01       	movw	r24, r12
    f17a:	0e 94 95 31 	call	0x632a	; 0x632a <MATCH>
    f17e:	7c 01       	movw	r14, r24
    f180:	89 2b       	or	r24, r25
    f182:	89 f6       	brne	.-94     	; 0xf126 <stat+0x24>
    f184:	be 01       	movw	r22, r28
    f186:	6f 5f       	subi	r22, 0xFF	; 255
    f188:	7f 4f       	sbci	r23, 0xFF	; 255
    f18a:	c6 01       	movw	r24, r12
    f18c:	0e 94 a7 63 	call	0xc74e	; 0xc74e <f_stat>
    f190:	00 97       	sbiw	r24, 0x00	; 0
    f192:	a9 f0       	breq	.+42     	; 0xf1be <stat+0xbc>
    f194:	84 31       	cpi	r24, 0x14	; 20
    f196:	91 05       	cpc	r25, r1
    f198:	40 f4       	brcc	.+16     	; 0xf1aa <stat+0xa8>
    f19a:	fc 01       	movw	r30, r24
    f19c:	e8 58       	subi	r30, 0x88	; 136
    f19e:	f4 4f       	sbci	r31, 0xF4	; 244
    f1a0:	80 81       	ld	r24, Z
    f1a2:	08 2e       	mov	r0, r24
    f1a4:	00 0c       	add	r0, r0
    f1a6:	99 0b       	sbc	r25, r25
    f1a8:	02 c0       	rjmp	.+4      	; 0xf1ae <stat+0xac>
    f1aa:	83 e2       	ldi	r24, 0x23	; 35
    f1ac:	90 e0       	ldi	r25, 0x00	; 0
    f1ae:	90 93 82 1c 	sts	0x1C82, r25	; 0x801c82 <errno+0x1>
    f1b2:	80 93 81 1c 	sts	0x1C81, r24	; 0x801c81 <errno>
    f1b6:	ee 24       	eor	r14, r14
    f1b8:	ea 94       	dec	r14
    f1ba:	fe 2c       	mov	r15, r14
    f1bc:	36 c0       	rjmp	.+108    	; 0xf22a <stat+0x128>
    f1be:	89 81       	ldd	r24, Y+1	; 0x01
    f1c0:	9a 81       	ldd	r25, Y+2	; 0x02
    f1c2:	ab 81       	ldd	r26, Y+3	; 0x03
    f1c4:	bc 81       	ldd	r27, Y+4	; 0x04
    f1c6:	f8 01       	movw	r30, r16
    f1c8:	80 8f       	std	Z+24, r24	; 0x18
    f1ca:	91 8f       	std	Z+25, r25	; 0x19
    f1cc:	a2 8f       	std	Z+26, r26	; 0x1a
    f1ce:	b3 8f       	std	Z+27, r27	; 0x1b
    f1d0:	6f 81       	ldd	r22, Y+7	; 0x07
    f1d2:	78 85       	ldd	r23, Y+8	; 0x08
    f1d4:	8d 81       	ldd	r24, Y+5	; 0x05
    f1d6:	9e 81       	ldd	r25, Y+6	; 0x06
    f1d8:	50 df       	rcall	.-352    	; 0xf07a <fat_time_to_unix>
    f1da:	f8 01       	movw	r30, r16
    f1dc:	64 a3       	std	Z+36, r22	; 0x24
    f1de:	75 a3       	std	Z+37, r23	; 0x25
    f1e0:	86 a3       	std	Z+38, r24	; 0x26
    f1e2:	97 a3       	std	Z+39, r25	; 0x27
    f1e4:	60 a7       	std	Z+40, r22	; 0x28
    f1e6:	71 a7       	std	Z+41, r23	; 0x29
    f1e8:	82 a7       	std	Z+42, r24	; 0x2a
    f1ea:	93 a7       	std	Z+43, r25	; 0x2b
    f1ec:	64 a7       	std	Z+44, r22	; 0x2c
    f1ee:	75 a7       	std	Z+45, r23	; 0x2d
    f1f0:	86 a7       	std	Z+46, r24	; 0x2e
    f1f2:	97 a7       	std	Z+47, r25	; 0x2f
    f1f4:	29 85       	ldd	r18, Y+9	; 0x09
    f1f6:	20 fd       	sbrc	r18, 0
    f1f8:	03 c0       	rjmp	.+6      	; 0xf200 <stat+0xfe>
    f1fa:	8f ef       	ldi	r24, 0xFF	; 255
    f1fc:	91 e0       	ldi	r25, 0x01	; 1
    f1fe:	02 c0       	rjmp	.+4      	; 0xf204 <stat+0x102>
    f200:	8d e6       	ldi	r24, 0x6D	; 109
    f202:	91 e0       	ldi	r25, 0x01	; 1
    f204:	48 ee       	ldi	r20, 0xE8	; 232
    f206:	53 e0       	ldi	r21, 0x03	; 3
    f208:	f8 01       	movw	r30, r16
    f20a:	51 8b       	std	Z+17, r21	; 0x11
    f20c:	40 8b       	std	Z+16, r20	; 0x10
    f20e:	53 8b       	std	Z+19, r21	; 0x13
    f210:	42 8b       	std	Z+18, r20	; 0x12
    f212:	24 ff       	sbrs	r18, 4
    f214:	02 c0       	rjmp	.+4      	; 0xf21a <stat+0x118>
    f216:	90 64       	ori	r25, 0x40	; 64
    f218:	01 c0       	rjmp	.+2      	; 0xf21c <stat+0x11a>
    f21a:	90 68       	ori	r25, 0x80	; 128
    f21c:	a0 e0       	ldi	r26, 0x00	; 0
    f21e:	b0 e0       	ldi	r27, 0x00	; 0
    f220:	f8 01       	movw	r30, r16
    f222:	80 87       	std	Z+8, r24	; 0x08
    f224:	91 87       	std	Z+9, r25	; 0x09
    f226:	a2 87       	std	Z+10, r26	; 0x0a
    f228:	b3 87       	std	Z+11, r27	; 0x0b
    f22a:	c7 01       	movw	r24, r14
    f22c:	ca 5e       	subi	r28, 0xEA	; 234
    f22e:	de 4f       	sbci	r29, 0xFE	; 254
    f230:	e8 e0       	ldi	r30, 0x08	; 8
    f232:	0c 94 04 e0 	jmp	0x1c008	; 0x1c008 <__epilogue_restores__+0x14>

0000f236 <unix_time_to_fat>:
    f236:	a4 e0       	ldi	r26, 0x04	; 4
    f238:	b0 e0       	ldi	r27, 0x00	; 0
    f23a:	e1 e2       	ldi	r30, 0x21	; 33
    f23c:	f9 e7       	ldi	r31, 0x79	; 121
    f23e:	0c 94 ea df 	jmp	0x1bfd4	; 0x1bfd4 <__prologue_saves__+0x18>
    f242:	69 83       	std	Y+1, r22	; 0x01
    f244:	7a 83       	std	Y+2, r23	; 0x02
    f246:	8b 83       	std	Y+3, r24	; 0x03
    f248:	9c 83       	std	Y+4, r25	; 0x04
    f24a:	7a 01       	movw	r14, r20
    f24c:	89 01       	movw	r16, r18
    f24e:	ce 01       	movw	r24, r28
    f250:	01 96       	adiw	r24, 0x01	; 1
    f252:	0e 94 04 37 	call	0x6e08	; 0x6e08 <gmtime>
    f256:	fc 01       	movw	r30, r24
    f258:	22 85       	ldd	r18, Z+10	; 0x0a
    f25a:	33 85       	ldd	r19, Z+11	; 0x0b
    f25c:	20 55       	subi	r18, 0x50	; 80
    f25e:	31 09       	sbc	r19, r1
    f260:	c9 01       	movw	r24, r18
    f262:	98 2f       	mov	r25, r24
    f264:	88 27       	eor	r24, r24
    f266:	99 0f       	add	r25, r25
    f268:	20 85       	ldd	r18, Z+8	; 0x08
    f26a:	31 85       	ldd	r19, Z+9	; 0x09
    f26c:	2f 5f       	subi	r18, 0xFF	; 255
    f26e:	3f 4f       	sbci	r19, 0xFF	; 255
    f270:	45 e0       	ldi	r20, 0x05	; 5
    f272:	22 0f       	add	r18, r18
    f274:	33 1f       	adc	r19, r19
    f276:	4a 95       	dec	r20
    f278:	e1 f7       	brne	.-8      	; 0xf272 <unix_time_to_fat+0x3c>
    f27a:	28 2b       	or	r18, r24
    f27c:	39 2b       	or	r19, r25
    f27e:	86 81       	ldd	r24, Z+6	; 0x06
    f280:	97 81       	ldd	r25, Z+7	; 0x07
    f282:	28 2b       	or	r18, r24
    f284:	39 2b       	or	r19, r25
    f286:	d7 01       	movw	r26, r14
    f288:	2d 93       	st	X+, r18
    f28a:	3c 93       	st	X, r19
    f28c:	84 81       	ldd	r24, Z+4	; 0x04
    f28e:	20 e0       	ldi	r18, 0x00	; 0
    f290:	30 e0       	ldi	r19, 0x00	; 0
    f292:	38 2f       	mov	r19, r24
    f294:	33 0f       	add	r19, r19
    f296:	33 0f       	add	r19, r19
    f298:	33 0f       	add	r19, r19
    f29a:	82 81       	ldd	r24, Z+2	; 0x02
    f29c:	93 81       	ldd	r25, Z+3	; 0x03
    f29e:	55 e0       	ldi	r21, 0x05	; 5
    f2a0:	88 0f       	add	r24, r24
    f2a2:	99 1f       	adc	r25, r25
    f2a4:	5a 95       	dec	r21
    f2a6:	e1 f7       	brne	.-8      	; 0xf2a0 <unix_time_to_fat+0x6a>
    f2a8:	82 2b       	or	r24, r18
    f2aa:	93 2b       	or	r25, r19
    f2ac:	20 81       	ld	r18, Z
    f2ae:	31 81       	ldd	r19, Z+1	; 0x01
    f2b0:	36 95       	lsr	r19
    f2b2:	27 95       	ror	r18
    f2b4:	82 2b       	or	r24, r18
    f2b6:	93 2b       	or	r25, r19
    f2b8:	f8 01       	movw	r30, r16
    f2ba:	91 83       	std	Z+1, r25	; 0x01
    f2bc:	80 83       	st	Z, r24
    f2be:	24 96       	adiw	r28, 0x04	; 4
    f2c0:	e6 e0       	ldi	r30, 0x06	; 6
    f2c2:	0c 94 06 e0 	jmp	0x1c00c	; 0x1c00c <__epilogue_restores__+0x18>

0000f2c6 <utime>:
    f2c6:	aa e1       	ldi	r26, 0x1A	; 26
    f2c8:	b1 e0       	ldi	r27, 0x01	; 1
    f2ca:	e9 e6       	ldi	r30, 0x69	; 105
    f2cc:	f9 e7       	ldi	r31, 0x79	; 121
    f2ce:	0c 94 ec df 	jmp	0x1bfd8	; 0x1bfd8 <__prologue_saves__+0x1c>
    f2d2:	8c 01       	movw	r16, r24
    f2d4:	61 15       	cp	r22, r1
    f2d6:	71 05       	cpc	r23, r1
    f2d8:	31 f0       	breq	.+12     	; 0xf2e6 <utime+0x20>
    f2da:	fb 01       	movw	r30, r22
    f2dc:	64 81       	ldd	r22, Z+4	; 0x04
    f2de:	75 81       	ldd	r23, Z+5	; 0x05
    f2e0:	86 81       	ldd	r24, Z+6	; 0x06
    f2e2:	97 81       	ldd	r25, Z+7	; 0x07
    f2e4:	04 c0       	rjmp	.+8      	; 0xf2ee <utime+0x28>
    f2e6:	80 e0       	ldi	r24, 0x00	; 0
    f2e8:	90 e0       	ldi	r25, 0x00	; 0
    f2ea:	0e 94 5e 37 	call	0x6ebc	; 0x6ebc <time>
    f2ee:	9e 01       	movw	r18, r28
    f2f0:	29 5e       	subi	r18, 0xE9	; 233
    f2f2:	3e 4f       	sbci	r19, 0xFE	; 254
    f2f4:	ae 01       	movw	r20, r28
    f2f6:	47 5e       	subi	r20, 0xE7	; 231
    f2f8:	5e 4f       	sbci	r21, 0xFE	; 254
    f2fa:	9d df       	rcall	.-198    	; 0xf236 <unix_time_to_fat>
    f2fc:	c7 5e       	subi	r28, 0xE7	; 231
    f2fe:	de 4f       	sbci	r29, 0xFE	; 254
    f300:	88 81       	ld	r24, Y
    f302:	99 81       	ldd	r25, Y+1	; 0x01
    f304:	c9 51       	subi	r28, 0x19	; 25
    f306:	d1 40       	sbci	r29, 0x01	; 1
    f308:	9e 83       	std	Y+6, r25	; 0x06
    f30a:	8d 83       	std	Y+5, r24	; 0x05
    f30c:	c9 5e       	subi	r28, 0xE9	; 233
    f30e:	de 4f       	sbci	r29, 0xFE	; 254
    f310:	88 81       	ld	r24, Y
    f312:	99 81       	ldd	r25, Y+1	; 0x01
    f314:	c7 51       	subi	r28, 0x17	; 23
    f316:	d1 40       	sbci	r29, 0x01	; 1
    f318:	98 87       	std	Y+8, r25	; 0x08
    f31a:	8f 83       	std	Y+7, r24	; 0x07
    f31c:	be 01       	movw	r22, r28
    f31e:	6f 5f       	subi	r22, 0xFF	; 255
    f320:	7f 4f       	sbci	r23, 0xFF	; 255
    f322:	c8 01       	movw	r24, r16
    f324:	0e 94 be 67 	call	0xcf7c	; 0xcf7c <f_utime>
    f328:	84 31       	cpi	r24, 0x14	; 20
    f32a:	91 05       	cpc	r25, r1
    f32c:	40 f4       	brcc	.+16     	; 0xf33e <utime+0x78>
    f32e:	fc 01       	movw	r30, r24
    f330:	e8 58       	subi	r30, 0x88	; 136
    f332:	f4 4f       	sbci	r31, 0xF4	; 244
    f334:	80 81       	ld	r24, Z
    f336:	08 2e       	mov	r0, r24
    f338:	00 0c       	add	r0, r0
    f33a:	99 0b       	sbc	r25, r25
    f33c:	02 c0       	rjmp	.+4      	; 0xf342 <utime+0x7c>
    f33e:	83 e2       	ldi	r24, 0x23	; 35
    f340:	90 e0       	ldi	r25, 0x00	; 0
    f342:	c6 5e       	subi	r28, 0xE6	; 230
    f344:	de 4f       	sbci	r29, 0xFE	; 254
    f346:	e4 e0       	ldi	r30, 0x04	; 4
    f348:	0c 94 08 e0 	jmp	0x1c010	; 0x1c010 <__epilogue_restores__+0x1c>

0000f34c <fileno_to_fatfs>:
    f34c:	83 30       	cpi	r24, 0x03	; 3
    f34e:	91 05       	cpc	r25, r1
    f350:	48 f4       	brcc	.+18     	; 0xf364 <fileno_to_fatfs+0x18>
    f352:	89 e0       	ldi	r24, 0x09	; 9
    f354:	90 e0       	ldi	r25, 0x00	; 0
    f356:	90 93 82 1c 	sts	0x1C82, r25	; 0x801c82 <errno+0x1>
    f35a:	80 93 81 1c 	sts	0x1C81, r24	; 0x801c81 <errno>
    f35e:	80 e0       	ldi	r24, 0x00	; 0
    f360:	90 e0       	ldi	r25, 0x00	; 0
    f362:	08 95       	ret
    f364:	60 dc       	rcall	.-1856   	; 0xec26 <fileno_to_stream>
    f366:	00 97       	sbiw	r24, 0x00	; 0
    f368:	d1 f3       	breq	.-12     	; 0xf35e <fileno_to_fatfs+0x12>
    f36a:	fc 01       	movw	r30, r24
    f36c:	84 85       	ldd	r24, Z+12	; 0x0c
    f36e:	95 85       	ldd	r25, Z+13	; 0x0d
    f370:	00 97       	sbiw	r24, 0x00	; 0
    f372:	79 f3       	breq	.-34     	; 0xf352 <fileno_to_fatfs+0x6>
    f374:	08 95       	ret

0000f376 <ftell>:
    f376:	10 92 82 1c 	sts	0x1C82, r1	; 0x801c82 <errno+0x1>
    f37a:	10 92 81 1c 	sts	0x1C81, r1	; 0x801c81 <errno>
    f37e:	37 dc       	rcall	.-1938   	; 0xebee <fileno>
    f380:	83 30       	cpi	r24, 0x03	; 3
    f382:	91 05       	cpc	r25, r1
    f384:	48 f0       	brcs	.+18     	; 0xf398 <ftell+0x22>
    f386:	e2 df       	rcall	.-60     	; 0xf34c <fileno_to_fatfs>
    f388:	00 97       	sbiw	r24, 0x00	; 0
    f38a:	51 f4       	brne	.+20     	; 0xf3a0 <ftell+0x2a>
    f38c:	89 e0       	ldi	r24, 0x09	; 9
    f38e:	90 e0       	ldi	r25, 0x00	; 0
    f390:	90 93 82 1c 	sts	0x1C82, r25	; 0x801c82 <errno+0x1>
    f394:	80 93 81 1c 	sts	0x1C81, r24	; 0x801c81 <errno>
    f398:	6f ef       	ldi	r22, 0xFF	; 255
    f39a:	7f ef       	ldi	r23, 0xFF	; 255
    f39c:	cb 01       	movw	r24, r22
    f39e:	08 95       	ret
    f3a0:	fc 01       	movw	r30, r24
    f3a2:	60 89       	ldd	r22, Z+16	; 0x10
    f3a4:	71 89       	ldd	r23, Z+17	; 0x11
    f3a6:	82 89       	ldd	r24, Z+18	; 0x12
    f3a8:	93 89       	ldd	r25, Z+19	; 0x13
    f3aa:	08 95       	ret

0000f3ac <lseek>:
    f3ac:	a3 e0       	ldi	r26, 0x03	; 3
    f3ae:	b0 e0       	ldi	r27, 0x00	; 0
    f3b0:	ec ed       	ldi	r30, 0xDC	; 220
    f3b2:	f9 e7       	ldi	r31, 0x79	; 121
    f3b4:	0c 94 e6 df 	jmp	0x1bfcc	; 0x1bfcc <__prologue_saves__+0x10>
    f3b8:	5c 01       	movw	r10, r24
    f3ba:	6a 01       	movw	r12, r20
    f3bc:	7b 01       	movw	r14, r22
    f3be:	89 01       	movw	r16, r18
    f3c0:	10 92 82 1c 	sts	0x1C82, r1	; 0x801c82 <errno+0x1>
    f3c4:	10 92 81 1c 	sts	0x1C81, r1	; 0x801c81 <errno>
    f3c8:	c1 df       	rcall	.-126    	; 0xf34c <fileno_to_fatfs>
    f3ca:	ec 01       	movw	r28, r24
    f3cc:	89 2b       	or	r24, r25
    f3ce:	19 f4       	brne	.+6      	; 0xf3d6 <lseek+0x2a>
    f3d0:	88 e1       	ldi	r24, 0x18	; 24
    f3d2:	90 e0       	ldi	r25, 0x00	; 0
    f3d4:	26 c0       	rjmp	.+76     	; 0xf422 <lseek+0x76>
    f3d6:	83 e0       	ldi	r24, 0x03	; 3
    f3d8:	a8 16       	cp	r10, r24
    f3da:	b1 04       	cpc	r11, r1
    f3dc:	d0 f1       	brcs	.+116    	; 0xf452 <lseek+0xa6>
    f3de:	c5 01       	movw	r24, r10
    f3e0:	22 dc       	rcall	.-1980   	; 0xec26 <fileno_to_stream>
    f3e2:	fc 01       	movw	r30, r24
    f3e4:	93 81       	ldd	r25, Z+3	; 0x03
    f3e6:	90 64       	ori	r25, 0x40	; 64
    f3e8:	93 83       	std	Z+3, r25	; 0x03
    f3ea:	02 30       	cpi	r16, 0x02	; 2
    f3ec:	11 05       	cpc	r17, r1
    f3ee:	a9 f5       	brne	.+106    	; 0xf45a <lseek+0xae>
    f3f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    f3f2:	9b 85       	ldd	r25, Y+11	; 0x0b
    f3f4:	ac 85       	ldd	r26, Y+12	; 0x0c
    f3f6:	bd 85       	ldd	r27, Y+13	; 0x0d
    f3f8:	c8 0e       	add	r12, r24
    f3fa:	d9 1e       	adc	r13, r25
    f3fc:	ea 1e       	adc	r14, r26
    f3fe:	fb 1e       	adc	r15, r27
    f400:	b7 01       	movw	r22, r14
    f402:	a6 01       	movw	r20, r12
    f404:	ce 01       	movw	r24, r28
    f406:	0e 94 21 60 	call	0xc042	; 0xc042 <f_lseek>
    f40a:	00 97       	sbiw	r24, 0x00	; 0
    f40c:	79 f0       	breq	.+30     	; 0xf42c <lseek+0x80>
    f40e:	84 31       	cpi	r24, 0x14	; 20
    f410:	91 05       	cpc	r25, r1
    f412:	58 f5       	brcc	.+86     	; 0xf46a <lseek+0xbe>
    f414:	fc 01       	movw	r30, r24
    f416:	e8 58       	subi	r30, 0x88	; 136
    f418:	f4 4f       	sbci	r31, 0xF4	; 244
    f41a:	80 81       	ld	r24, Z
    f41c:	08 2e       	mov	r0, r24
    f41e:	00 0c       	add	r0, r0
    f420:	99 0b       	sbc	r25, r25
    f422:	90 93 82 1c 	sts	0x1C82, r25	; 0x801c82 <errno+0x1>
    f426:	80 93 81 1c 	sts	0x1C81, r24	; 0x801c81 <errno>
    f42a:	13 c0       	rjmp	.+38     	; 0xf452 <lseek+0xa6>
    f42c:	68 89       	ldd	r22, Y+16	; 0x10
    f42e:	79 89       	ldd	r23, Y+17	; 0x11
    f430:	8a 89       	ldd	r24, Y+18	; 0x12
    f432:	9b 89       	ldd	r25, Y+19	; 0x13
    f434:	c6 16       	cp	r12, r22
    f436:	d7 06       	cpc	r13, r23
    f438:	e8 06       	cpc	r14, r24
    f43a:	f9 06       	cpc	r15, r25
    f43c:	c9 f0       	breq	.+50     	; 0xf470 <lseek+0xc4>
    f43e:	84 e3       	ldi	r24, 0x34	; 52
    f440:	9b e0       	ldi	r25, 0x0B	; 11
    f442:	a0 e0       	ldi	r26, 0x00	; 0
    f444:	ed b7       	in	r30, 0x3d	; 61
    f446:	fe b7       	in	r31, 0x3e	; 62
    f448:	81 83       	std	Z+1, r24	; 0x01
    f44a:	92 83       	std	Z+2, r25	; 0x02
    f44c:	a3 83       	std	Z+3, r26	; 0x03
    f44e:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    f452:	6f ef       	ldi	r22, 0xFF	; 255
    f454:	7f ef       	ldi	r23, 0xFF	; 255
    f456:	cb 01       	movw	r24, r22
    f458:	0b c0       	rjmp	.+22     	; 0xf470 <lseek+0xc4>
    f45a:	01 30       	cpi	r16, 0x01	; 1
    f45c:	11 05       	cpc	r17, r1
    f45e:	81 f6       	brne	.-96     	; 0xf400 <lseek+0x54>
    f460:	88 89       	ldd	r24, Y+16	; 0x10
    f462:	99 89       	ldd	r25, Y+17	; 0x11
    f464:	aa 89       	ldd	r26, Y+18	; 0x12
    f466:	bb 89       	ldd	r27, Y+19	; 0x13
    f468:	c7 cf       	rjmp	.-114    	; 0xf3f8 <lseek+0x4c>
    f46a:	83 e2       	ldi	r24, 0x23	; 35
    f46c:	90 e0       	ldi	r25, 0x00	; 0
    f46e:	d9 cf       	rjmp	.-78     	; 0xf422 <lseek+0x76>
    f470:	cd b7       	in	r28, 0x3d	; 61
    f472:	de b7       	in	r29, 0x3e	; 62
    f474:	23 96       	adiw	r28, 0x03	; 3
    f476:	ea e0       	ldi	r30, 0x0A	; 10
    f478:	0c 94 02 e0 	jmp	0x1c004	; 0x1c004 <__epilogue_restores__+0x10>

0000f47c <fseek>:
    f47c:	cf 92       	push	r12
    f47e:	df 92       	push	r13
    f480:	ef 92       	push	r14
    f482:	ff 92       	push	r15
    f484:	cf 93       	push	r28
    f486:	df 93       	push	r29
    f488:	6a 01       	movw	r12, r20
    f48a:	7b 01       	movw	r14, r22
    f48c:	e9 01       	movw	r28, r18
    f48e:	af db       	rcall	.-2210   	; 0xebee <fileno>
    f490:	97 fd       	sbrc	r25, 7
    f492:	12 c0       	rjmp	.+36     	; 0xf4b8 <fseek+0x3c>
    f494:	9e 01       	movw	r18, r28
    f496:	b7 01       	movw	r22, r14
    f498:	a6 01       	movw	r20, r12
    f49a:	88 df       	rcall	.-240    	; 0xf3ac <lseek>
    f49c:	21 e0       	ldi	r18, 0x01	; 1
    f49e:	30 e0       	ldi	r19, 0x00	; 0
    f4a0:	6f 3f       	cpi	r22, 0xFF	; 255
    f4a2:	7f 4f       	sbci	r23, 0xFF	; 255
    f4a4:	8f 4f       	sbci	r24, 0xFF	; 255
    f4a6:	9f 4f       	sbci	r25, 0xFF	; 255
    f4a8:	11 f0       	breq	.+4      	; 0xf4ae <fseek+0x32>
    f4aa:	20 e0       	ldi	r18, 0x00	; 0
    f4ac:	30 e0       	ldi	r19, 0x00	; 0
    f4ae:	88 27       	eor	r24, r24
    f4b0:	99 27       	eor	r25, r25
    f4b2:	82 1b       	sub	r24, r18
    f4b4:	93 0b       	sbc	r25, r19
    f4b6:	02 c0       	rjmp	.+4      	; 0xf4bc <fseek+0x40>
    f4b8:	8f ef       	ldi	r24, 0xFF	; 255
    f4ba:	9f ef       	ldi	r25, 0xFF	; 255
    f4bc:	df 91       	pop	r29
    f4be:	cf 91       	pop	r28
    f4c0:	ff 90       	pop	r15
    f4c2:	ef 90       	pop	r14
    f4c4:	df 90       	pop	r13
    f4c6:	cf 90       	pop	r12
    f4c8:	08 95       	ret

0000f4ca <read>:
///
/// @return count on sucess.
/// @return -1 on error with errno set.
MEMSPACE
ssize_t read(int fd, const void *buf, size_t count)
{
    f4ca:	a2 e0       	ldi	r26, 0x02	; 2
    f4cc:	b0 e0       	ldi	r27, 0x00	; 0
    f4ce:	eb e6       	ldi	r30, 0x6B	; 107
    f4d0:	fa e7       	ldi	r31, 0x7A	; 122
    f4d2:	0c 94 e6 df 	jmp	0x1bfcc	; 0x1bfcc <__prologue_saves__+0x10>
    f4d6:	5c 01       	movw	r10, r24
    f4d8:	8b 01       	movw	r16, r22
    f4da:	6a 01       	movw	r12, r20
    int ret;
    FIL *fh;
    FILE *stream;

    //FIXME
    *(char *) buf = 0;
    f4dc:	fb 01       	movw	r30, r22
    f4de:	10 82       	st	Z, r1

    errno = 0;
    f4e0:	10 92 82 1c 	sts	0x1C82, r1	; 0x801c82 <errno+0x1>
    f4e4:	10 92 81 1c 	sts	0x1C81, r1	; 0x801c81 <errno>

    // TTY read function
    // FIXME should we really be blocking ???
    stream = fileno_to_stream(fd);
    f4e8:	9e db       	rcall	.-2244   	; 0xec26 <fileno_to_stream>
    if(stream == stdin)
    f4ea:	7c 01       	movw	r14, r24
    f4ec:	80 91 83 1c 	lds	r24, 0x1C83	; 0x801c83 <__iob>
    f4f0:	90 91 84 1c 	lds	r25, 0x1C84	; 0x801c84 <__iob+0x1>
    f4f4:	e8 16       	cp	r14, r24
    f4f6:	f9 06       	cpc	r15, r25
    {
        char *ptr = (char *) buf;
        // ungetc is undefined for read
        stream->flags |= __SUNGET;
    f4f8:	c9 f4       	brne	.+50     	; 0xf52c <read+0x62>
    f4fa:	f7 01       	movw	r30, r14
    f4fc:	83 81       	ldd	r24, Z+3	; 0x03
    f4fe:	80 64       	ori	r24, 0x40	; 64
        size = 0;
    f500:	83 83       	std	Z+3, r24	; 0x03
    f502:	1a 82       	std	Y+2, r1	; 0x02
    f504:	19 82       	std	Y+1, r1	; 0x01
    f506:	c0 0e       	add	r12, r16
        while(count--)
    f508:	d1 1e       	adc	r13, r17
    f50a:	0c 15       	cp	r16, r12
    f50c:	1d 05       	cpc	r17, r13
        {
            ret = fgetc(stream);
    f50e:	09 f4       	brne	.+2      	; 0xf512 <read+0x48>
    f510:	3d c0       	rjmp	.+122    	; 0xf58c <read+0xc2>
            if(ret < 0)
    f512:	c7 01       	movw	r24, r14
    f514:	48 da       	rcall	.-2928   	; 0xe9a6 <fgetc>
                break;
            
            *ptr++ = ret;
    f516:	97 fd       	sbrc	r25, 7
    f518:	39 c0       	rjmp	.+114    	; 0xf58c <read+0xc2>
    f51a:	f8 01       	movw	r30, r16
            ++size;
    f51c:	81 93       	st	Z+, r24
    f51e:	8f 01       	movw	r16, r30
    f520:	89 81       	ldd	r24, Y+1	; 0x01
    f522:	9a 81       	ldd	r25, Y+2	; 0x02
    f524:	01 96       	adiw	r24, 0x01	; 1
    f526:	9a 83       	std	Y+2, r25	; 0x02
        }
        return(size);
    }
    if(stream == stdout || stream == stderr)
    f528:	89 83       	std	Y+1, r24	; 0x01
    f52a:	ef cf       	rjmp	.-34     	; 0xf50a <read+0x40>
    f52c:	80 91 85 1c 	lds	r24, 0x1C85	; 0x801c85 <__iob+0x2>
    f530:	90 91 86 1c 	lds	r25, 0x1C86	; 0x801c86 <__iob+0x3>
    f534:	e8 16       	cp	r14, r24
    f536:	f9 06       	cpc	r15, r25
    f538:	71 f1       	breq	.+92     	; 0xf596 <read+0xcc>
    f53a:	80 91 87 1c 	lds	r24, 0x1C87	; 0x801c87 <__iob+0x4>
    f53e:	90 91 88 1c 	lds	r25, 0x1C88	; 0x801c88 <__iob+0x5>
    {
        return(-1);
    }

    // fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    f542:	e8 16       	cp	r14, r24
    f544:	f9 06       	cpc	r15, r25
    f546:	39 f1       	breq	.+78     	; 0xf596 <read+0xcc>
    if ( fh == NULL )
    f548:	c5 01       	movw	r24, r10
    f54a:	00 df       	rcall	.-512    	; 0xf34c <fileno_to_fatfs>
    {
        errno = EBADF;
    f54c:	00 97       	sbiw	r24, 0x00	; 0
    f54e:	19 f4       	brne	.+6      	; 0xf556 <read+0x8c>
    f550:	89 e0       	ldi	r24, 0x09	; 9
        return(-1);
    }

    res = f_read(fh, (void *) buf, bytes, &size);
    f552:	90 e0       	ldi	r25, 0x00	; 0
    f554:	16 c0       	rjmp	.+44     	; 0xf582 <read+0xb8>
    f556:	9e 01       	movw	r18, r28
    f558:	2f 5f       	subi	r18, 0xFF	; 255
    f55a:	3f 4f       	sbci	r19, 0xFF	; 255
    f55c:	a6 01       	movw	r20, r12
    f55e:	b8 01       	movw	r22, r16
    if(res != FR_OK)
    f560:	0e 94 15 5b 	call	0xb62a	; 0xb62a <f_read>
    f564:	00 97       	sbiw	r24, 0x00	; 0
    f566:	91 f0       	breq	.+36     	; 0xf58c <read+0xc2>
    f568:	84 31       	cpi	r24, 0x14	; 20
    f56a:	91 05       	cpc	r25, r1
    f56c:	40 f4       	brcc	.+16     	; 0xf57e <read+0xb4>
    f56e:	fc 01       	movw	r30, r24
    f570:	e8 58       	subi	r30, 0x88	; 136
    f572:	f4 4f       	sbci	r31, 0xF4	; 244
    f574:	80 81       	ld	r24, Z
    f576:	08 2e       	mov	r0, r24
    f578:	00 0c       	add	r0, r0
    f57a:	99 0b       	sbc	r25, r25
    f57c:	02 c0       	rjmp	.+4      	; 0xf582 <read+0xb8>
    {
        errno = fatfs_to_errno(res);
    f57e:	83 e2       	ldi	r24, 0x23	; 35
    f580:	90 e0       	ldi	r25, 0x00	; 0
    f582:	90 93 82 1c 	sts	0x1C82, r25	; 0x801c82 <errno+0x1>
    f586:	80 93 81 1c 	sts	0x1C81, r24	; 0x801c81 <errno>
        return(-1);
    }
    return ((ssize_t) size);
    f58a:	05 c0       	rjmp	.+10     	; 0xf596 <read+0xcc>
    f58c:	69 81       	ldd	r22, Y+1	; 0x01
    f58e:	7a 81       	ldd	r23, Y+2	; 0x02
    f590:	80 e0       	ldi	r24, 0x00	; 0
        }
        return(size);
    }
    if(stream == stdout || stream == stderr)
    {
        return(-1);
    f592:	90 e0       	ldi	r25, 0x00	; 0
    f594:	03 c0       	rjmp	.+6      	; 0xf59c <read+0xd2>
    f596:	6f ef       	ldi	r22, 0xFF	; 255
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return ((ssize_t) size);
}
    f598:	7f ef       	ldi	r23, 0xFF	; 255
    f59a:	cb 01       	movw	r24, r22
    f59c:	22 96       	adiw	r28, 0x02	; 2
    f59e:	ea e0       	ldi	r30, 0x0A	; 10
    f5a0:	0c 94 02 e0 	jmp	0x1c004	; 0x1c004 <__epilogue_restores__+0x10>

0000f5a4 <fread>:
///
/// @return count on sucess.
/// @return 0 or < size on error with errno set.
MEMSPACE
size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream)
{
    f5a4:	0f 93       	push	r16
    f5a6:	1f 93       	push	r17
    f5a8:	cf 93       	push	r28
    f5aa:	df 93       	push	r29
    f5ac:	ec 01       	movw	r28, r24
    f5ae:	c9 01       	movw	r24, r18
    size_t count = size * nmemb;
    f5b0:	64 9f       	mul	r22, r20
    f5b2:	80 01       	movw	r16, r0
    f5b4:	65 9f       	mul	r22, r21
    f5b6:	10 0d       	add	r17, r0
    f5b8:	74 9f       	mul	r23, r20
    f5ba:	10 0d       	add	r17, r0
    int fn = fileno(stream);
    f5bc:	11 24       	eor	r1, r1
    ssize_t ret;

    // read() checks for fn out of bounds
    ret = read(fn, ptr, count);
    f5be:	17 db       	rcall	.-2514   	; 0xebee <fileno>
    f5c0:	a8 01       	movw	r20, r16
    f5c2:	be 01       	movw	r22, r28
    if(ret < 0)
    f5c4:	82 df       	rcall	.-252    	; 0xf4ca <read>
    f5c6:	97 fd       	sbrc	r25, 7
        return(0);

    return((size_t) ret);
    f5c8:	02 c0       	rjmp	.+4      	; 0xf5ce <fread+0x2a>
    f5ca:	cb 01       	movw	r24, r22
    ssize_t ret;

    // read() checks for fn out of bounds
    ret = read(fn, ptr, count);
    if(ret < 0)
        return(0);
    f5cc:	02 c0       	rjmp	.+4      	; 0xf5d2 <fread+0x2e>
    f5ce:	80 e0       	ldi	r24, 0x00	; 0

    return((size_t) ret);
}
    f5d0:	90 e0       	ldi	r25, 0x00	; 0
    f5d2:	df 91       	pop	r29
    f5d4:	cf 91       	pop	r28
    f5d6:	1f 91       	pop	r17
    f5d8:	0f 91       	pop	r16
    f5da:	08 95       	ret

0000f5dc <syncfs>:
/// @param[in] fd: POSIX fileno to sync.
/// @return 0.
/// @return -1 on error witrh errno set.
MEMSPACE
int syncfs(int fd)
{
    f5dc:	cf 93       	push	r28
    f5de:	df 93       	push	r29
    FIL *fh;
    FRESULT res;
    FILE *stream;

    errno = 0;
    f5e0:	10 92 82 1c 	sts	0x1C82, r1	; 0x801c82 <errno+0x1>
    f5e4:	10 92 81 1c 	sts	0x1C81, r1	; 0x801c81 <errno>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f5e8:	83 30       	cpi	r24, 0x03	; 3
    f5ea:	91 05       	cpc	r25, r1
    f5ec:	18 f4       	brcc	.+6      	; 0xf5f4 <syncfs+0x18>

    // fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    if(fh == NULL)
    {
        errno = EBADF;
    f5ee:	89 e0       	ldi	r24, 0x09	; 9
    f5f0:	90 e0       	ldi	r25, 0x00	; 0
    f5f2:	18 c0       	rjmp	.+48     	; 0xf624 <syncfs+0x48>
    if(isatty(fd))
    {
        errno = EBADF;
        return(-1);
    }
    stream = fileno_to_stream(fd);
    f5f4:	ec 01       	movw	r28, r24
    f5f6:	17 db       	rcall	.-2514   	; 0xec26 <fileno_to_stream>
    // reset unget on sync
    stream->flags |= __SUNGET;
    f5f8:	fc 01       	movw	r30, r24
    f5fa:	93 81       	ldd	r25, Z+3	; 0x03

    // fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    f5fc:	90 64       	ori	r25, 0x40	; 64
    f5fe:	93 83       	std	Z+3, r25	; 0x03
    if(fh == NULL)
    f600:	ce 01       	movw	r24, r28
    f602:	a4 de       	rcall	.-696    	; 0xf34c <fileno_to_fatfs>
    {
        errno = EBADF;
        return(-1);
    }

    res  = f_sync ( fh );
    f604:	00 97       	sbiw	r24, 0x00	; 0
    f606:	99 f3       	breq	.-26     	; 0xf5ee <syncfs+0x12>
    if (res != FR_OK)
    f608:	0e 94 f7 5d 	call	0xbbee	; 0xbbee <f_sync>
    f60c:	00 97       	sbiw	r24, 0x00	; 0
    f60e:	a1 f0       	breq	.+40     	; 0xf638 <syncfs+0x5c>
    f610:	84 31       	cpi	r24, 0x14	; 20
    f612:	91 05       	cpc	r25, r1
    f614:	70 f4       	brcc	.+28     	; 0xf632 <syncfs+0x56>
    f616:	fc 01       	movw	r30, r24
    f618:	e8 58       	subi	r30, 0x88	; 136
    f61a:	f4 4f       	sbci	r31, 0xF4	; 244
    f61c:	80 81       	ld	r24, Z
    f61e:	08 2e       	mov	r0, r24
    {
        errno = fatfs_to_errno(res);
    f620:	00 0c       	add	r0, r0
    f622:	99 0b       	sbc	r25, r25
    f624:	90 93 82 1c 	sts	0x1C82, r25	; 0x801c82 <errno+0x1>
        return(-1);
    f628:	80 93 81 1c 	sts	0x1C81, r24	; 0x801c81 <errno>
    f62c:	8f ef       	ldi	r24, 0xFF	; 255
        errno = EBADF;
        return(-1);
    }

    res  = f_sync ( fh );
    if (res != FR_OK)
    f62e:	9f ef       	ldi	r25, 0xFF	; 255
    f630:	05 c0       	rjmp	.+10     	; 0xf63c <syncfs+0x60>
    f632:	83 e2       	ldi	r24, 0x23	; 35
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return(0);
    f634:	90 e0       	ldi	r25, 0x00	; 0
    f636:	f6 cf       	rjmp	.-20     	; 0xf624 <syncfs+0x48>
}
    f638:	80 e0       	ldi	r24, 0x00	; 0
    f63a:	90 e0       	ldi	r25, 0x00	; 0
    f63c:	df 91       	pop	r29
    f63e:	cf 91       	pop	r28
    f640:	08 95       	ret

0000f642 <sync>:
/// - man page sync (2).
///
/// @return  void.
MEMSPACE
void sync(void)
{
    f642:	cf 93       	push	r28
    f644:	df 93       	push	r29
    FIL *fh;
    int i;

    for(i=0;i<MAX_FILES;++i)
    f646:	c0 e0       	ldi	r28, 0x00	; 0
    f648:	d0 e0       	ldi	r29, 0x00	; 0
    f64a:	21 96       	adiw	r28, 0x01	; 1
    f64c:	c0 31       	cpi	r28, 0x10	; 16
    f64e:	d1 05       	cpc	r29, r1
    f650:	51 f0       	breq	.+20     	; 0xf666 <sync+0x24>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f652:	c3 30       	cpi	r28, 0x03	; 3
    f654:	d1 05       	cpc	r29, r1
    f656:	cc f3       	brlt	.-14     	; 0xf64a <sync+0x8>
    {
        if(isatty(i))
            continue;

        // fileno_to_fatfs checks for i out of bounds
        fh = fileno_to_fatfs(i);
    f658:	ce 01       	movw	r24, r28
    f65a:	78 de       	rcall	.-784    	; 0xf34c <fileno_to_fatfs>
        if(fh == NULL)
    f65c:	89 2b       	or	r24, r25
            continue;

        (void ) syncfs(i);
    f65e:	a9 f3       	breq	.-22     	; 0xf64a <sync+0x8>
    f660:	ce 01       	movw	r24, r28
    f662:	bc df       	rcall	.-136    	; 0xf5dc <syncfs>
    }
}
    f664:	f2 cf       	rjmp	.-28     	; 0xf64a <sync+0x8>
    f666:	df 91       	pop	r29
    f668:	cf 91       	pop	r28
    f66a:	08 95       	ret

0000f66c <write>:
/// @param[in] count: number of bytes to write.
/// @return count on sucess.
/// @return -1 on error with errno set.
MEMSPACE
ssize_t write(int fd, const void *buf, size_t count)
{
    f66c:	a2 e0       	ldi	r26, 0x02	; 2
    f66e:	b0 e0       	ldi	r27, 0x00	; 0
    f670:	ec e3       	ldi	r30, 0x3C	; 60
    f672:	fb e7       	ldi	r31, 0x7B	; 123
    f674:	0c 94 e4 df 	jmp	0x1bfc8	; 0x1bfc8 <__prologue_saves__+0xc>
    f678:	8c 01       	movw	r16, r24
    f67a:	b6 2e       	mov	r11, r22
    f67c:	f7 2e       	mov	r15, r23
    f67e:	4a 01       	movw	r8, r20
    UINT size;
    UINT bytes = count;
    FRESULT res;
    FIL *fh;
    FILE *stream;
    errno = 0;
    f680:	10 92 82 1c 	sts	0x1C82, r1	; 0x801c82 <errno+0x1>
    f684:	10 92 81 1c 	sts	0x1C81, r1	; 0x801c81 <errno>

    // TTY read function
    stream = fileno_to_stream(fd);
    f688:	ce da       	rcall	.-2660   	; 0xec26 <fileno_to_stream>
    if(stream == stdout || stream == stderr)
    f68a:	6c 01       	movw	r12, r24
    f68c:	80 91 85 1c 	lds	r24, 0x1C85	; 0x801c85 <__iob+0x2>
    f690:	90 91 86 1c 	lds	r25, 0x1C86	; 0x801c86 <__iob+0x3>
    f694:	c8 16       	cp	r12, r24
    f696:	d9 06       	cpc	r13, r25
    f698:	39 f0       	breq	.+14     	; 0xf6a8 <write+0x3c>
    f69a:	80 91 87 1c 	lds	r24, 0x1C87	; 0x801c87 <__iob+0x4>
    f69e:	90 91 88 1c 	lds	r25, 0x1C88	; 0x801c88 <__iob+0x5>
    f6a2:	c8 16       	cp	r12, r24
    f6a4:	d9 06       	cpc	r13, r25
    {
        char *ptr = (char *) buf;   
        size = 0;
    f6a6:	d1 f4       	brne	.+52     	; 0xf6dc <write+0x70>
    f6a8:	1a 82       	std	Y+2, r1	; 0x02
    f6aa:	19 82       	std	Y+1, r1	; 0x01
    f6ac:	0b 2d       	mov	r16, r11
    f6ae:	1f 2d       	mov	r17, r15
    f6b0:	78 01       	movw	r14, r16
    f6b2:	e8 0c       	add	r14, r8
        while(count--)
    f6b4:	f9 1c       	adc	r15, r9
    f6b6:	0e 15       	cp	r16, r14
    f6b8:	1f 05       	cpc	r17, r15
        {
            int c,ret;
            c = *ptr++;
    f6ba:	d1 f1       	breq	.+116    	; 0xf730 <write+0xc4>
    f6bc:	f8 01       	movw	r30, r16
    f6be:	a1 90       	ld	r10, Z+
    f6c0:	8f 01       	movw	r16, r30
            ret = fputc(c, stream);
    f6c2:	b1 2c       	mov	r11, r1
    f6c4:	b6 01       	movw	r22, r12
    f6c6:	c5 01       	movw	r24, r10
            if(c != ret)
    f6c8:	c4 d9       	rcall	.-3192   	; 0xea52 <fputc>
    f6ca:	a8 16       	cp	r10, r24
    f6cc:	b9 06       	cpc	r11, r25
                break;

            ++size;
    f6ce:	81 f5       	brne	.+96     	; 0xf730 <write+0xc4>
    f6d0:	89 81       	ldd	r24, Y+1	; 0x01
    f6d2:	9a 81       	ldd	r25, Y+2	; 0x02
    f6d4:	01 96       	adiw	r24, 0x01	; 1
    f6d6:	9a 83       	std	Y+2, r25	; 0x02
    f6d8:	89 83       	std	Y+1, r24	; 0x01
        }
        return(size);
    }
    if(stream == stdin)
    f6da:	ed cf       	rjmp	.-38     	; 0xf6b6 <write+0x4a>
    f6dc:	80 91 83 1c 	lds	r24, 0x1C83	; 0x801c83 <__iob>
    f6e0:	90 91 84 1c 	lds	r25, 0x1C84	; 0x801c84 <__iob+0x1>
    f6e4:	c8 16       	cp	r12, r24
    {
        return(-1);
    }

    // fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    f6e6:	d9 06       	cpc	r13, r25
    f6e8:	41 f1       	breq	.+80     	; 0xf73a <write+0xce>
    if ( fh == NULL )
    f6ea:	c8 01       	movw	r24, r16
    f6ec:	2f de       	rcall	.-930    	; 0xf34c <fileno_to_fatfs>
    {
        errno = EBADF;
    f6ee:	00 97       	sbiw	r24, 0x00	; 0
    f6f0:	19 f4       	brne	.+6      	; 0xf6f8 <write+0x8c>
    f6f2:	89 e0       	ldi	r24, 0x09	; 9
        return(-1);
    }

    res = f_write(fh, buf, bytes, &size);
    f6f4:	90 e0       	ldi	r25, 0x00	; 0
    f6f6:	17 c0       	rjmp	.+46     	; 0xf726 <write+0xba>
    f6f8:	9e 01       	movw	r18, r28
    f6fa:	2f 5f       	subi	r18, 0xFF	; 255
    f6fc:	3f 4f       	sbci	r19, 0xFF	; 255
    f6fe:	a4 01       	movw	r20, r8
    f700:	6b 2d       	mov	r22, r11
    f702:	7f 2d       	mov	r23, r15
    if(res != FR_OK)
    f704:	0e 94 60 5c 	call	0xb8c0	; 0xb8c0 <f_write>
    f708:	00 97       	sbiw	r24, 0x00	; 0
    f70a:	91 f0       	breq	.+36     	; 0xf730 <write+0xc4>
    f70c:	84 31       	cpi	r24, 0x14	; 20
    f70e:	91 05       	cpc	r25, r1
    f710:	40 f4       	brcc	.+16     	; 0xf722 <write+0xb6>
    f712:	fc 01       	movw	r30, r24
    f714:	e8 58       	subi	r30, 0x88	; 136
    f716:	f4 4f       	sbci	r31, 0xF4	; 244
    f718:	80 81       	ld	r24, Z
    f71a:	08 2e       	mov	r0, r24
    f71c:	00 0c       	add	r0, r0
    f71e:	99 0b       	sbc	r25, r25
    f720:	02 c0       	rjmp	.+4      	; 0xf726 <write+0xba>
    {
        errno = fatfs_to_errno(res);
    f722:	83 e2       	ldi	r24, 0x23	; 35
    f724:	90 e0       	ldi	r25, 0x00	; 0
    f726:	90 93 82 1c 	sts	0x1C82, r25	; 0x801c82 <errno+0x1>
    f72a:	80 93 81 1c 	sts	0x1C81, r24	; 0x801c81 <errno>
        return(-1);
    }
    return ((ssize_t) size);
    f72e:	05 c0       	rjmp	.+10     	; 0xf73a <write+0xce>
    f730:	69 81       	ldd	r22, Y+1	; 0x01
    f732:	7a 81       	ldd	r23, Y+2	; 0x02
    f734:	80 e0       	ldi	r24, 0x00	; 0
        }
        return(size);
    }
    if(stream == stdin)
    {
        return(-1);
    f736:	90 e0       	ldi	r25, 0x00	; 0
    f738:	03 c0       	rjmp	.+6      	; 0xf740 <write+0xd4>
    f73a:	6f ef       	ldi	r22, 0xFF	; 255
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return ((ssize_t) size);
}
    f73c:	7f ef       	ldi	r23, 0xFF	; 255
    f73e:	cb 01       	movw	r24, r22
    f740:	22 96       	adiw	r28, 0x02	; 2
    f742:	ec e0       	ldi	r30, 0x0C	; 12
    f744:	0c 94 00 e0 	jmp	0x1c000	; 0x1c000 <__epilogue_restores__+0xc>

0000f748 <fwrite>:
///
/// @return count written on sucess.
/// @return 0 or < size on error with errno set.
MEMSPACE
size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream)
{
    f748:	0f 93       	push	r16
    f74a:	1f 93       	push	r17
    f74c:	cf 93       	push	r28
    f74e:	df 93       	push	r29
    f750:	ec 01       	movw	r28, r24
    f752:	c9 01       	movw	r24, r18
    size_t count = size * nmemb;
    f754:	64 9f       	mul	r22, r20
    f756:	80 01       	movw	r16, r0
    f758:	65 9f       	mul	r22, r21
    f75a:	10 0d       	add	r17, r0
    f75c:	74 9f       	mul	r23, r20
    f75e:	10 0d       	add	r17, r0
    int fn = fileno(stream);
    f760:	11 24       	eor	r1, r1
    ssize_t ret;
    
    // write () checks for fn out of bounds
    ret =  write(fn, ptr, count);
    f762:	45 da       	rcall	.-2934   	; 0xebee <fileno>
    f764:	a8 01       	movw	r20, r16
    f766:	be 01       	movw	r22, r28

    if(ret < 0)
    f768:	81 df       	rcall	.-254    	; 0xf66c <write>
    f76a:	97 fd       	sbrc	r25, 7
        return(0);

    return((size_t) ret);
    f76c:	02 c0       	rjmp	.+4      	; 0xf772 <fwrite+0x2a>
    f76e:	cb 01       	movw	r24, r22
    
    // write () checks for fn out of bounds
    ret =  write(fn, ptr, count);

    if(ret < 0)
        return(0);
    f770:	02 c0       	rjmp	.+4      	; 0xf776 <fwrite+0x2e>
    f772:	80 e0       	ldi	r24, 0x00	; 0

    return((size_t) ret);
}
    f774:	90 e0       	ldi	r25, 0x00	; 0
    f776:	df 91       	pop	r29
    f778:	cf 91       	pop	r28
    f77a:	1f 91       	pop	r17
    f77c:	0f 91       	pop	r16
    f77e:	08 95       	ret

0000f780 <free_file_descriptor>:
///
/// @return fileno on success.
/// @return -1 on failure.
MEMSPACE
int free_file_descriptor(int fileno)
{
    f780:	0f 93       	push	r16
    f782:	1f 93       	push	r17
    f784:	cf 93       	push	r28
    f786:	df 93       	push	r29
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f788:	83 30       	cpi	r24, 0x03	; 3
    f78a:	91 05       	cpc	r25, r1
    f78c:	48 f4       	brcc	.+18     	; 0xf7a0 <free_file_descriptor+0x20>
    FILE *stream;
    FIL *fh;

    if(isatty( fileno ))
    {
        errno = EBADF;
    f78e:	89 e0       	ldi	r24, 0x09	; 9
    f790:	90 e0       	ldi	r25, 0x00	; 0
    f792:	90 93 82 1c 	sts	0x1C82, r25	; 0x801c82 <errno+0x1>
    f796:	80 93 81 1c 	sts	0x1C81, r24	; 0x801c81 <errno>
        return(-1);
    f79a:	8f ef       	ldi	r24, 0xFF	; 255
    f79c:	9f ef       	ldi	r25, 0xFF	; 255
    f79e:	20 c0       	rjmp	.+64     	; 0xf7e0 <free_file_descriptor+0x60>
    }

    // checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    f7a0:	ec 01       	movw	r28, r24
    f7a2:	41 da       	rcall	.-2942   	; 0xec26 <fileno_to_stream>
    if(stream == NULL)
    f7a4:	8c 01       	movw	r16, r24
    f7a6:	89 2b       	or	r24, r25
    {
        return(-1);
    }

    fh = fdev_get_udata(stream);
    f7a8:	c1 f3       	breq	.-16     	; 0xf79a <free_file_descriptor+0x1a>
    f7aa:	f8 01       	movw	r30, r16
    f7ac:	84 85       	ldd	r24, Z+12	; 0x0c

    if(fh != NULL)
    f7ae:	95 85       	ldd	r25, Z+13	; 0x0d
    f7b0:	00 97       	sbiw	r24, 0x00	; 0
    {
        safefree(fh);
    f7b2:	11 f0       	breq	.+4      	; 0xf7b8 <free_file_descriptor+0x38>
    f7b4:	0e 94 fd 27 	call	0x4ffa	; 0x4ffa <safefree>
    }

    if(stream->buf != NULL && stream->flags & __SMALLOC)
    f7b8:	f8 01       	movw	r30, r16
    f7ba:	80 81       	ld	r24, Z
    f7bc:	91 81       	ldd	r25, Z+1	; 0x01
    f7be:	00 97       	sbiw	r24, 0x00	; 0
    f7c0:	21 f0       	breq	.+8      	; 0xf7ca <free_file_descriptor+0x4a>
    f7c2:	23 81       	ldd	r18, Z+3	; 0x03
    {
        safefree(stream->buf);
    f7c4:	27 fd       	sbrc	r18, 7
    f7c6:	0e 94 fd 27 	call	0x4ffa	; 0x4ffa <safefree>
    }

    __iob[fileno]  = NULL;
    f7ca:	fe 01       	movw	r30, r28
    f7cc:	ee 0f       	add	r30, r30
    f7ce:	ff 1f       	adc	r31, r31
    f7d0:	ed 57       	subi	r30, 0x7D	; 125
    f7d2:	f3 4e       	sbci	r31, 0xE3	; 227
    f7d4:	11 82       	std	Z+1, r1	; 0x01
    safefree(stream);
    f7d6:	10 82       	st	Z, r1
    f7d8:	c8 01       	movw	r24, r16
    f7da:	0e 94 fd 27 	call	0x4ffa	; 0x4ffa <safefree>
    return(fileno);
}
    f7de:	ce 01       	movw	r24, r28
    f7e0:	df 91       	pop	r29
    f7e2:	cf 91       	pop	r28
    f7e4:	1f 91       	pop	r17
    f7e6:	0f 91       	pop	r16
    f7e8:	08 95       	ret

0000f7ea <close>:
///
/// @return 0 on sucess.
/// @return -1 on error with errno set.
MEMSPACE
int close(int fileno)
{
    f7ea:	0f 93       	push	r16
    f7ec:	1f 93       	push	r17
    f7ee:	cf 93       	push	r28
    f7f0:	df 93       	push	r29
    f7f2:	8c 01       	movw	r16, r24
    FILE *stream;
    FIL *fh;
    int res;

    errno = 0;
    f7f4:	10 92 82 1c 	sts	0x1C82, r1	; 0x801c82 <errno+0x1>
    f7f8:	10 92 81 1c 	sts	0x1C81, r1	; 0x801c81 <errno>

    // checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    if(stream == NULL)
    f7fc:	14 da       	rcall	.-3032   	; 0xec26 <fileno_to_stream>
    {
        return(-1);
    }

    // fileno_to_fatfs checks for fileno out of bounds
    fh = fileno_to_fatfs(fileno);
    f7fe:	89 2b       	or	r24, r25
    f800:	d9 f0       	breq	.+54     	; 0xf838 <close+0x4e>
    if(fh == NULL)
    f802:	c8 01       	movw	r24, r16
    f804:	a3 dd       	rcall	.-1210   	; 0xf34c <fileno_to_fatfs>
    {
        return(-1);
    }
    res = f_close(fh);
    f806:	00 97       	sbiw	r24, 0x00	; 0
    f808:	b9 f0       	breq	.+46     	; 0xf838 <close+0x4e>
    free_file_descriptor(fileno);
    f80a:	0e 94 77 5e 	call	0xbcee	; 0xbcee <f_close>
    f80e:	ec 01       	movw	r28, r24
    if (res != FR_OK)
    f810:	c8 01       	movw	r24, r16
    f812:	b6 df       	rcall	.-148    	; 0xf780 <free_file_descriptor>
    f814:	20 97       	sbiw	r28, 0x00	; 0
    f816:	99 f0       	breq	.+38     	; 0xf83e <close+0x54>
    f818:	c4 31       	cpi	r28, 0x14	; 20
    f81a:	d1 05       	cpc	r29, r1
    f81c:	38 f4       	brcc	.+14     	; 0xf82c <close+0x42>
    f81e:	c8 58       	subi	r28, 0x88	; 136
    f820:	d4 4f       	sbci	r29, 0xF4	; 244
    f822:	88 81       	ld	r24, Y
    f824:	08 2e       	mov	r0, r24
    f826:	00 0c       	add	r0, r0
    f828:	99 0b       	sbc	r25, r25
    f82a:	02 c0       	rjmp	.+4      	; 0xf830 <close+0x46>
    {
        errno = fatfs_to_errno(res);
    f82c:	83 e2       	ldi	r24, 0x23	; 35
    f82e:	90 e0       	ldi	r25, 0x00	; 0
    f830:	90 93 82 1c 	sts	0x1C82, r25	; 0x801c82 <errno+0x1>
        return(-1);
    f834:	80 93 81 1c 	sts	0x1C81, r24	; 0x801c81 <errno>
    f838:	8f ef       	ldi	r24, 0xFF	; 255
    }
    return(0);
    f83a:	9f ef       	ldi	r25, 0xFF	; 255
    f83c:	02 c0       	rjmp	.+4      	; 0xf842 <close+0x58>
}
    f83e:	80 e0       	ldi	r24, 0x00	; 0
    f840:	90 e0       	ldi	r25, 0x00	; 0
    f842:	df 91       	pop	r29
    f844:	cf 91       	pop	r28
    f846:	1f 91       	pop	r17
    f848:	0f 91       	pop	r16
    f84a:	08 95       	ret

0000f84c <fclose>:
    f84c:	d0 d9       	rcall	.-3168   	; 0xebee <fileno>
    f84e:	97 fd       	sbrc	r25, 7
    f850:	02 c0       	rjmp	.+4      	; 0xf856 <fclose+0xa>
    f852:	cb cf       	rjmp	.-106    	; 0xf7ea <close>
    f854:	08 95       	ret
    f856:	8f ef       	ldi	r24, 0xFF	; 255
    f858:	9f ef       	ldi	r25, 0xFF	; 255
    f85a:	08 95       	ret

0000f85c <new_file_descriptor>:
    f85c:	0f 93       	push	r16
    f85e:	1f 93       	push	r17
    f860:	cf 93       	push	r28
    f862:	df 93       	push	r29
    f864:	e3 e8       	ldi	r30, 0x83	; 131
    f866:	fc e1       	ldi	r31, 0x1C	; 28
    f868:	c0 e0       	ldi	r28, 0x00	; 0
    f86a:	d0 e0       	ldi	r29, 0x00	; 0
    f86c:	21 96       	adiw	r28, 0x01	; 1
    f86e:	c0 31       	cpi	r28, 0x10	; 16
    f870:	d1 05       	cpc	r29, r1
    f872:	49 f0       	breq	.+18     	; 0xf886 <new_file_descriptor+0x2a>
    f874:	c3 30       	cpi	r28, 0x03	; 3
    f876:	d1 05       	cpc	r29, r1
    f878:	24 f0       	brlt	.+8      	; 0xf882 <new_file_descriptor+0x26>
    f87a:	82 81       	ldd	r24, Z+2	; 0x02
    f87c:	93 81       	ldd	r25, Z+3	; 0x03
    f87e:	89 2b       	or	r24, r25
    f880:	59 f0       	breq	.+22     	; 0xf898 <new_file_descriptor+0x3c>
    f882:	32 96       	adiw	r30, 0x02	; 2
    f884:	f3 cf       	rjmp	.-26     	; 0xf86c <new_file_descriptor+0x10>
    f886:	87 e1       	ldi	r24, 0x17	; 23
    f888:	90 e0       	ldi	r25, 0x00	; 0
    f88a:	90 93 82 1c 	sts	0x1C82, r25	; 0x801c82 <errno+0x1>
    f88e:	80 93 81 1c 	sts	0x1C81, r24	; 0x801c81 <errno>
    f892:	8f ef       	ldi	r24, 0xFF	; 255
    f894:	9f ef       	ldi	r25, 0xFF	; 255
    f896:	22 c0       	rjmp	.+68     	; 0xf8dc <new_file_descriptor+0x80>
    f898:	61 e0       	ldi	r22, 0x01	; 1
    f89a:	70 e0       	ldi	r23, 0x00	; 0
    f89c:	8e e0       	ldi	r24, 0x0E	; 14
    f89e:	90 e0       	ldi	r25, 0x00	; 0
    f8a0:	0e 94 b1 27 	call	0x4f62	; 0x4f62 <safecalloc>
    f8a4:	8c 01       	movw	r16, r24
    f8a6:	89 2b       	or	r24, r25
    f8a8:	59 f0       	breq	.+22     	; 0xf8c0 <new_file_descriptor+0x64>
    f8aa:	61 e0       	ldi	r22, 0x01	; 1
    f8ac:	70 e0       	ldi	r23, 0x00	; 0
    f8ae:	84 e2       	ldi	r24, 0x24	; 36
    f8b0:	92 e0       	ldi	r25, 0x02	; 2
    f8b2:	0e 94 b1 27 	call	0x4f62	; 0x4f62 <safecalloc>
    f8b6:	00 97       	sbiw	r24, 0x00	; 0
    f8b8:	31 f4       	brne	.+12     	; 0xf8c6 <new_file_descriptor+0x6a>
    f8ba:	c8 01       	movw	r24, r16
    f8bc:	0e 94 fd 27 	call	0x4ffa	; 0x4ffa <safefree>
    f8c0:	8c e0       	ldi	r24, 0x0C	; 12
    f8c2:	90 e0       	ldi	r25, 0x00	; 0
    f8c4:	e2 cf       	rjmp	.-60     	; 0xf88a <new_file_descriptor+0x2e>
    f8c6:	fe 01       	movw	r30, r28
    f8c8:	ee 0f       	add	r30, r30
    f8ca:	ff 1f       	adc	r31, r31
    f8cc:	ed 57       	subi	r30, 0x7D	; 125
    f8ce:	f3 4e       	sbci	r31, 0xE3	; 227
    f8d0:	11 83       	std	Z+1, r17	; 0x01
    f8d2:	00 83       	st	Z, r16
    f8d4:	f8 01       	movw	r30, r16
    f8d6:	95 87       	std	Z+13, r25	; 0x0d
    f8d8:	84 87       	std	Z+12, r24	; 0x0c
    f8da:	ce 01       	movw	r24, r28
    f8dc:	df 91       	pop	r29
    f8de:	cf 91       	pop	r28
    f8e0:	1f 91       	pop	r17
    f8e2:	0f 91       	pop	r16
    f8e4:	08 95       	ret

0000f8e6 <open>:
    f8e6:	a0 e0       	ldi	r26, 0x00	; 0
    f8e8:	b0 e0       	ldi	r27, 0x00	; 0
    f8ea:	e9 e7       	ldi	r30, 0x79	; 121
    f8ec:	fc e7       	ldi	r31, 0x7C	; 124
    f8ee:	0c 94 e2 df 	jmp	0x1bfc4	; 0x1bfc4 <__prologue_saves__+0x8>
    f8f2:	5c 01       	movw	r10, r24
    f8f4:	6b 01       	movw	r12, r22
    f8f6:	10 92 82 1c 	sts	0x1C82, r1	; 0x801c82 <errno+0x1>
    f8fa:	10 92 81 1c 	sts	0x1C81, r1	; 0x801c81 <errno>
    f8fe:	7b 01       	movw	r14, r22
    f900:	83 e0       	ldi	r24, 0x03	; 3
    f902:	e8 22       	and	r14, r24
    f904:	ff 24       	eor	r15, r15
    f906:	e2 e0       	ldi	r30, 0x02	; 2
    f908:	ee 16       	cp	r14, r30
    f90a:	f1 04       	cpc	r15, r1
    f90c:	31 f0       	breq	.+12     	; 0xf91a <open+0x34>
    f90e:	e1 14       	cp	r14, r1
    f910:	f1 04       	cpc	r15, r1
    f912:	31 f0       	breq	.+12     	; 0xf920 <open+0x3a>
    f914:	02 e0       	ldi	r16, 0x02	; 2
    f916:	10 e0       	ldi	r17, 0x00	; 0
    f918:	05 c0       	rjmp	.+10     	; 0xf924 <open+0x3e>
    f91a:	03 e0       	ldi	r16, 0x03	; 3
    f91c:	10 e0       	ldi	r17, 0x00	; 0
    f91e:	02 c0       	rjmp	.+4      	; 0xf924 <open+0x3e>
    f920:	01 e0       	ldi	r16, 0x01	; 1
    f922:	10 e0       	ldi	r17, 0x00	; 0
    f924:	c6 fe       	sbrs	r12, 6
    f926:	05 c0       	rjmp	.+10     	; 0xf932 <open+0x4c>
    f928:	d1 fe       	sbrs	r13, 1
    f92a:	02 c0       	rjmp	.+4      	; 0xf930 <open+0x4a>
    f92c:	08 60       	ori	r16, 0x08	; 8
    f92e:	01 c0       	rjmp	.+2      	; 0xf932 <open+0x4c>
    f930:	00 61       	ori	r16, 0x10	; 16
    f932:	94 df       	rcall	.-216    	; 0xf85c <new_file_descriptor>
    f934:	3c 01       	movw	r6, r24
    f936:	77 d9       	rcall	.-3346   	; 0xec26 <fileno_to_stream>
    f938:	ec 01       	movw	r28, r24
    f93a:	c3 01       	movw	r24, r6
    f93c:	20 97       	sbiw	r28, 0x00	; 0
    f93e:	09 f4       	brne	.+2      	; 0xf942 <open+0x5c>
    f940:	48 c0       	rjmp	.+144    	; 0xf9d2 <open+0xec>
    f942:	04 dd       	rcall	.-1528   	; 0xf34c <fileno_to_fatfs>
    f944:	4c 01       	movw	r8, r24
    f946:	00 97       	sbiw	r24, 0x00	; 0
    f948:	59 f4       	brne	.+22     	; 0xf960 <open+0x7a>
    f94a:	c3 01       	movw	r24, r6
    f94c:	19 df       	rcall	.-462    	; 0xf780 <free_file_descriptor>
    f94e:	89 e0       	ldi	r24, 0x09	; 9
    f950:	90 e0       	ldi	r25, 0x00	; 0
    f952:	90 93 82 1c 	sts	0x1C82, r25	; 0x801c82 <errno+0x1>
    f956:	80 93 81 1c 	sts	0x1C81, r24	; 0x801c81 <errno>
    f95a:	8f ef       	ldi	r24, 0xFF	; 255
    f95c:	9f ef       	ldi	r25, 0xFF	; 255
    f95e:	5d c0       	rjmp	.+186    	; 0xfa1a <open+0x134>
    f960:	40 2f       	mov	r20, r16
    f962:	b5 01       	movw	r22, r10
    f964:	0e 94 5d 59 	call	0xb2ba	; 0xb2ba <f_open>
    f968:	00 97       	sbiw	r24, 0x00	; 0
    f96a:	91 f0       	breq	.+36     	; 0xf990 <open+0xaa>
    f96c:	84 31       	cpi	r24, 0x14	; 20
    f96e:	91 05       	cpc	r25, r1
    f970:	40 f4       	brcc	.+16     	; 0xf982 <open+0x9c>
    f972:	fc 01       	movw	r30, r24
    f974:	e8 58       	subi	r30, 0x88	; 136
    f976:	f4 4f       	sbci	r31, 0xF4	; 244
    f978:	80 81       	ld	r24, Z
    f97a:	08 2e       	mov	r0, r24
    f97c:	00 0c       	add	r0, r0
    f97e:	99 0b       	sbc	r25, r25
    f980:	02 c0       	rjmp	.+4      	; 0xf986 <open+0xa0>
    f982:	83 e2       	ldi	r24, 0x23	; 35
    f984:	90 e0       	ldi	r25, 0x00	; 0
    f986:	90 93 82 1c 	sts	0x1C82, r25	; 0x801c82 <errno+0x1>
    f98a:	80 93 81 1c 	sts	0x1C81, r24	; 0x801c81 <errno>
    f98e:	20 c0       	rjmp	.+64     	; 0xf9d0 <open+0xea>
    f990:	d2 fe       	sbrs	r13, 2
    f992:	21 c0       	rjmp	.+66     	; 0xf9d6 <open+0xf0>
    f994:	f4 01       	movw	r30, r8
    f996:	42 85       	ldd	r20, Z+10	; 0x0a
    f998:	53 85       	ldd	r21, Z+11	; 0x0b
    f99a:	64 85       	ldd	r22, Z+12	; 0x0c
    f99c:	75 85       	ldd	r23, Z+13	; 0x0d
    f99e:	c4 01       	movw	r24, r8
    f9a0:	0e 94 21 60 	call	0xc042	; 0xc042 <f_lseek>
    f9a4:	00 97       	sbiw	r24, 0x00	; 0
    f9a6:	b9 f0       	breq	.+46     	; 0xf9d6 <open+0xf0>
    f9a8:	84 31       	cpi	r24, 0x14	; 20
    f9aa:	91 05       	cpc	r25, r1
    f9ac:	40 f4       	brcc	.+16     	; 0xf9be <open+0xd8>
    f9ae:	fc 01       	movw	r30, r24
    f9b0:	e8 58       	subi	r30, 0x88	; 136
    f9b2:	f4 4f       	sbci	r31, 0xF4	; 244
    f9b4:	80 81       	ld	r24, Z
    f9b6:	08 2e       	mov	r0, r24
    f9b8:	00 0c       	add	r0, r0
    f9ba:	99 0b       	sbc	r25, r25
    f9bc:	02 c0       	rjmp	.+4      	; 0xf9c2 <open+0xdc>
    f9be:	83 e2       	ldi	r24, 0x23	; 35
    f9c0:	90 e0       	ldi	r25, 0x00	; 0
    f9c2:	90 93 82 1c 	sts	0x1C82, r25	; 0x801c82 <errno+0x1>
    f9c6:	80 93 81 1c 	sts	0x1C81, r24	; 0x801c81 <errno>
    f9ca:	c4 01       	movw	r24, r8
    f9cc:	0e 94 77 5e 	call	0xbcee	; 0xbcee <f_close>
    f9d0:	c3 01       	movw	r24, r6
    f9d2:	d6 de       	rcall	.-596    	; 0xf780 <free_file_descriptor>
    f9d4:	c2 cf       	rjmp	.-124    	; 0xf95a <open+0x74>
    f9d6:	f2 e0       	ldi	r31, 0x02	; 2
    f9d8:	ef 16       	cp	r14, r31
    f9da:	f1 04       	cpc	r15, r1
    f9dc:	51 f4       	brne	.+20     	; 0xf9f2 <open+0x10c>
    f9de:	88 e8       	ldi	r24, 0x88	; 136
    f9e0:	94 e7       	ldi	r25, 0x74	; 116
    f9e2:	99 87       	std	Y+9, r25	; 0x09
    f9e4:	88 87       	std	Y+8, r24	; 0x08
    f9e6:	85 e0       	ldi	r24, 0x05	; 5
    f9e8:	94 e7       	ldi	r25, 0x74	; 116
    f9ea:	9b 87       	std	Y+11, r25	; 0x0b
    f9ec:	8a 87       	std	Y+10, r24	; 0x0a
    f9ee:	83 e0       	ldi	r24, 0x03	; 3
    f9f0:	12 c0       	rjmp	.+36     	; 0xfa16 <open+0x130>
    f9f2:	e1 14       	cp	r14, r1
    f9f4:	f1 04       	cpc	r15, r1
    f9f6:	41 f4       	brne	.+16     	; 0xfa08 <open+0x122>
    f9f8:	19 86       	std	Y+9, r1	; 0x09
    f9fa:	18 86       	std	Y+8, r1	; 0x08
    f9fc:	85 e0       	ldi	r24, 0x05	; 5
    f9fe:	94 e7       	ldi	r25, 0x74	; 116
    fa00:	9b 87       	std	Y+11, r25	; 0x0b
    fa02:	8a 87       	std	Y+10, r24	; 0x0a
    fa04:	81 e0       	ldi	r24, 0x01	; 1
    fa06:	07 c0       	rjmp	.+14     	; 0xfa16 <open+0x130>
    fa08:	88 e8       	ldi	r24, 0x88	; 136
    fa0a:	94 e7       	ldi	r25, 0x74	; 116
    fa0c:	99 87       	std	Y+9, r25	; 0x09
    fa0e:	88 87       	std	Y+8, r24	; 0x08
    fa10:	1b 86       	std	Y+11, r1	; 0x0b
    fa12:	1a 86       	std	Y+10, r1	; 0x0a
    fa14:	82 e0       	ldi	r24, 0x02	; 2
    fa16:	8b 83       	std	Y+3, r24	; 0x03
    fa18:	c3 01       	movw	r24, r6
    fa1a:	cd b7       	in	r28, 0x3d	; 61
    fa1c:	de b7       	in	r29, 0x3e	; 62
    fa1e:	ee e0       	ldi	r30, 0x0E	; 14
    fa20:	0c 94 fe df 	jmp	0x1bffc	; 0x1bffc <__epilogue_restores__+0x8>

0000fa24 <posix_fopen_modes_to_open>:
    fa24:	cf 93       	push	r28
    fa26:	df 93       	push	r29
    fa28:	ec 01       	movw	r28, r24
    fa2a:	64 e1       	ldi	r22, 0x14	; 20
    fa2c:	73 e0       	ldi	r23, 0x03	; 3
    fa2e:	0e 94 f7 30 	call	0x61ee	; 0x61ee <strcmp>
    fa32:	00 97       	sbiw	r24, 0x00	; 0
    fa34:	09 f4       	brne	.+2      	; 0xfa38 <posix_fopen_modes_to_open+0x14>
    fa36:	5d c0       	rjmp	.+186    	; 0xfaf2 <posix_fopen_modes_to_open+0xce>
    fa38:	60 ed       	ldi	r22, 0xD0	; 208
    fa3a:	78 e0       	ldi	r23, 0x08	; 8
    fa3c:	ce 01       	movw	r24, r28
    fa3e:	0e 94 f7 30 	call	0x61ee	; 0x61ee <strcmp>
    fa42:	00 97       	sbiw	r24, 0x00	; 0
    fa44:	09 f4       	brne	.+2      	; 0xfa48 <posix_fopen_modes_to_open+0x24>
    fa46:	55 c0       	rjmp	.+170    	; 0xfaf2 <posix_fopen_modes_to_open+0xce>
    fa48:	63 ed       	ldi	r22, 0xD3	; 211
    fa4a:	78 e0       	ldi	r23, 0x08	; 8
    fa4c:	ce 01       	movw	r24, r28
    fa4e:	0e 94 f7 30 	call	0x61ee	; 0x61ee <strcmp>
    fa52:	89 2b       	or	r24, r25
    fa54:	09 f4       	brne	.+2      	; 0xfa58 <posix_fopen_modes_to_open+0x34>
    fa56:	42 c0       	rjmp	.+132    	; 0xfadc <posix_fopen_modes_to_open+0xb8>
    fa58:	66 ed       	ldi	r22, 0xD6	; 214
    fa5a:	78 e0       	ldi	r23, 0x08	; 8
    fa5c:	ce 01       	movw	r24, r28
    fa5e:	0e 94 f7 30 	call	0x61ee	; 0x61ee <strcmp>
    fa62:	89 2b       	or	r24, r25
    fa64:	d9 f1       	breq	.+118    	; 0xfadc <posix_fopen_modes_to_open+0xb8>
    fa66:	6a ed       	ldi	r22, 0xDA	; 218
    fa68:	78 e0       	ldi	r23, 0x08	; 8
    fa6a:	ce 01       	movw	r24, r28
    fa6c:	0e 94 f7 30 	call	0x61ee	; 0x61ee <strcmp>
    fa70:	89 2b       	or	r24, r25
    fa72:	a1 f1       	breq	.+104    	; 0xfadc <posix_fopen_modes_to_open+0xb8>
    fa74:	6f e8       	ldi	r22, 0x8F	; 143
    fa76:	7a e0       	ldi	r23, 0x0A	; 10
    fa78:	ce 01       	movw	r24, r28
    fa7a:	0e 94 f7 30 	call	0x61ee	; 0x61ee <strcmp>
    fa7e:	89 2b       	or	r24, r25
    fa80:	81 f1       	breq	.+96     	; 0xfae2 <posix_fopen_modes_to_open+0xbe>
    fa82:	6e ed       	ldi	r22, 0xDE	; 222
    fa84:	78 e0       	ldi	r23, 0x08	; 8
    fa86:	ce 01       	movw	r24, r28
    fa88:	0e 94 f7 30 	call	0x61ee	; 0x61ee <strcmp>
    fa8c:	89 2b       	or	r24, r25
    fa8e:	49 f1       	breq	.+82     	; 0xfae2 <posix_fopen_modes_to_open+0xbe>
    fa90:	61 ee       	ldi	r22, 0xE1	; 225
    fa92:	78 e0       	ldi	r23, 0x08	; 8
    fa94:	ce 01       	movw	r24, r28
    fa96:	0e 94 f7 30 	call	0x61ee	; 0x61ee <strcmp>
    fa9a:	89 2b       	or	r24, r25
    fa9c:	29 f1       	breq	.+74     	; 0xfae8 <posix_fopen_modes_to_open+0xc4>
    fa9e:	64 ee       	ldi	r22, 0xE4	; 228
    faa0:	78 e0       	ldi	r23, 0x08	; 8
    faa2:	ce 01       	movw	r24, r28
    faa4:	0e 94 f7 30 	call	0x61ee	; 0x61ee <strcmp>
    faa8:	89 2b       	or	r24, r25
    faaa:	f1 f0       	breq	.+60     	; 0xfae8 <posix_fopen_modes_to_open+0xc4>
    faac:	68 ee       	ldi	r22, 0xE8	; 232
    faae:	78 e0       	ldi	r23, 0x08	; 8
    fab0:	ce 01       	movw	r24, r28
    fab2:	0e 94 f7 30 	call	0x61ee	; 0x61ee <strcmp>
    fab6:	89 2b       	or	r24, r25
    fab8:	b9 f0       	breq	.+46     	; 0xfae8 <posix_fopen_modes_to_open+0xc4>
    faba:	63 ee       	ldi	r22, 0xE3	; 227
    fabc:	72 e1       	ldi	r23, 0x12	; 18
    fabe:	ce 01       	movw	r24, r28
    fac0:	0e 94 f7 30 	call	0x61ee	; 0x61ee <strcmp>
    fac4:	89 2b       	or	r24, r25
    fac6:	99 f0       	breq	.+38     	; 0xfaee <posix_fopen_modes_to_open+0xca>
    fac8:	6c ee       	ldi	r22, 0xEC	; 236
    faca:	78 e0       	ldi	r23, 0x08	; 8
    facc:	ce 01       	movw	r24, r28
    face:	0e 94 f7 30 	call	0x61ee	; 0x61ee <strcmp>
    fad2:	89 2b       	or	r24, r25
    fad4:	61 f0       	breq	.+24     	; 0xfaee <posix_fopen_modes_to_open+0xca>
    fad6:	8f ef       	ldi	r24, 0xFF	; 255
    fad8:	9f ef       	ldi	r25, 0xFF	; 255
    fada:	0b c0       	rjmp	.+22     	; 0xfaf2 <posix_fopen_modes_to_open+0xce>
    fadc:	82 e0       	ldi	r24, 0x02	; 2
    fade:	92 e0       	ldi	r25, 0x02	; 2
    fae0:	08 c0       	rjmp	.+16     	; 0xfaf2 <posix_fopen_modes_to_open+0xce>
    fae2:	81 e4       	ldi	r24, 0x41	; 65
    fae4:	92 e0       	ldi	r25, 0x02	; 2
    fae6:	05 c0       	rjmp	.+10     	; 0xfaf2 <posix_fopen_modes_to_open+0xce>
    fae8:	82 e4       	ldi	r24, 0x42	; 66
    faea:	92 e0       	ldi	r25, 0x02	; 2
    faec:	02 c0       	rjmp	.+4      	; 0xfaf2 <posix_fopen_modes_to_open+0xce>
    faee:	81 e4       	ldi	r24, 0x41	; 65
    faf0:	94 e0       	ldi	r25, 0x04	; 4
    faf2:	df 91       	pop	r29
    faf4:	cf 91       	pop	r28
    faf6:	08 95       	ret

0000faf8 <fopen>:
    faf8:	cf 93       	push	r28
    fafa:	df 93       	push	r29
    fafc:	ec 01       	movw	r28, r24
    fafe:	cb 01       	movw	r24, r22
    fb00:	91 df       	rcall	.-222    	; 0xfa24 <posix_fopen_modes_to_open>
    fb02:	bc 01       	movw	r22, r24
    fb04:	ce 01       	movw	r24, r28
    fb06:	ef de       	rcall	.-546    	; 0xf8e6 <open>
    fb08:	8e d8       	rcall	.-3812   	; 0xec26 <fileno_to_stream>
    fb0a:	df 91       	pop	r29
    fb0c:	cf 91       	pop	r28
    fb0e:	08 95       	ret

0000fb10 <fprintf>:
    fb10:	a8 e0       	ldi	r26, 0x08	; 8
    fb12:	b0 e0       	ldi	r27, 0x00	; 0
    fb14:	ee e8       	ldi	r30, 0x8E	; 142
    fb16:	fd e7       	ldi	r31, 0x7D	; 125
    fb18:	0c 94 ee df 	jmp	0x1bfdc	; 0x1bfdc <__prologue_saves__+0x20>
    fb1c:	8b e7       	ldi	r24, 0x7B	; 123
    fb1e:	95 e7       	ldi	r25, 0x75	; 117
    fb20:	9a 83       	std	Y+2, r25	; 0x02
    fb22:	89 83       	std	Y+1, r24	; 0x01
    fb24:	18 86       	std	Y+8, r1	; 0x08
    fb26:	1f 82       	std	Y+7, r1	; 0x07
    fb28:	8d 85       	ldd	r24, Y+13	; 0x0d
    fb2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    fb2c:	9c 83       	std	Y+4, r25	; 0x04
    fb2e:	8b 83       	std	Y+3, r24	; 0x03
    fb30:	4f 85       	ldd	r20, Y+15	; 0x0f
    fb32:	58 89       	ldd	r21, Y+16	; 0x10
    fb34:	60 e8       	ldi	r22, 0x80	; 128
    fb36:	9e 01       	movw	r18, r28
    fb38:	2f 5e       	subi	r18, 0xEF	; 239
    fb3a:	3f 4f       	sbci	r19, 0xFF	; 255
    fb3c:	ce 01       	movw	r24, r28
    fb3e:	01 96       	adiw	r24, 0x01	; 1
    fb40:	0e 94 45 41 	call	0x828a	; 0x828a <_printf_fn>
    fb44:	8f 81       	ldd	r24, Y+7	; 0x07
    fb46:	98 85       	ldd	r25, Y+8	; 0x08
    fb48:	28 96       	adiw	r28, 0x08	; 8
    fb4a:	e2 e0       	ldi	r30, 0x02	; 2
    fb4c:	0c 94 0a e0 	jmp	0x1c014	; 0x1c014 <__epilogue_restores__+0x20>

0000fb50 <posix_help>:
MEMSPACE
int setpage(int count)
{
    _pagesize = count;
    return(_pagesize);
}
    fb50:	cf 93       	push	r28
    fb52:	df 93       	push	r29
    fb54:	00 d0       	rcall	.+0      	; 0xfb56 <posix_help+0x6>
    fb56:	1f 92       	push	r1
    fb58:	ec 01       	movw	r28, r24
    fb5a:	8a ed       	ldi	r24, 0xDA	; 218
    fb5c:	9d e0       	ldi	r25, 0x0D	; 13
    fb5e:	a0 e0       	ldi	r26, 0x00	; 0
    fb60:	ed b7       	in	r30, 0x3d	; 61
    fb62:	fe b7       	in	r31, 0x3e	; 62
    fb64:	81 83       	std	Z+1, r24	; 0x01
    fb66:	92 83       	std	Z+2, r25	; 0x02
    fb68:	a3 83       	std	Z+3, r26	; 0x03
    fb6a:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    fb6e:	cd 2b       	or	r28, r29
    fb70:	51 f0       	breq	.+20     	; 0xfb86 <posix_help+0x36>
    fb72:	84 e1       	ldi	r24, 0x14	; 20
    fb74:	9d e0       	ldi	r25, 0x0D	; 13
    fb76:	a0 e0       	ldi	r26, 0x00	; 0
    fb78:	ed b7       	in	r30, 0x3d	; 61
    fb7a:	fe b7       	in	r31, 0x3e	; 62
    fb7c:	81 83       	std	Z+1, r24	; 0x01
    fb7e:	92 83       	std	Z+2, r25	; 0x02
    fb80:	a3 83       	std	Z+3, r26	; 0x03
    fb82:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    fb86:	cd b7       	in	r28, 0x3d	; 61
    fb88:	de b7       	in	r29, 0x3e	; 62
    fb8a:	23 96       	adiw	r28, 0x03	; 3
    fb8c:	e2 e0       	ldi	r30, 0x02	; 2
    fb8e:	0c 94 0a e0 	jmp	0x1c014	; 0x1c014 <__epilogue_restores__+0x20>

0000fb92 <copy>:
    fb92:	4f 92       	push	r4
    fb94:	5f 92       	push	r5
    fb96:	6f 92       	push	r6
    fb98:	8f 92       	push	r8
    fb9a:	9f 92       	push	r9
    fb9c:	af 92       	push	r10
    fb9e:	bf 92       	push	r11
    fba0:	cf 92       	push	r12
    fba2:	df 92       	push	r13
    fba4:	ef 92       	push	r14
    fba6:	ff 92       	push	r15
    fba8:	0f 93       	push	r16
    fbaa:	1f 93       	push	r17
    fbac:	cf 93       	push	r28
    fbae:	df 93       	push	r29
    fbb0:	ad b7       	in	r26, 0x3d	; 61
    fbb2:	be b7       	in	r27, 0x3e	; 62
    fbb4:	17 97       	sbiw	r26, 0x07	; 7
    fbb6:	0f b6       	in	r0, 0x3f	; 63
    fbb8:	f8 94       	cli
    fbba:	be bf       	out	0x3e, r27	; 62
    fbbc:	0f be       	out	0x3f, r0	; 63
    fbbe:	ad bf       	out	0x3d, r26	; 61
    fbc0:	8c 01       	movw	r16, r24
    fbc2:	eb 01       	movw	r28, r22
    fbc4:	ed b7       	in	r30, 0x3d	; 61
    fbc6:	fe b7       	in	r31, 0x3e	; 62
    fbc8:	95 83       	std	Z+5, r25	; 0x05
    fbca:	84 83       	std	Z+4, r24	; 0x04
    fbcc:	85 e9       	ldi	r24, 0x95	; 149
    fbce:	9c e0       	ldi	r25, 0x0C	; 12
    fbd0:	a0 e0       	ldi	r26, 0x00	; 0
    fbd2:	81 83       	std	Z+1, r24	; 0x01
    fbd4:	92 83       	std	Z+2, r25	; 0x02
    fbd6:	a3 83       	std	Z+3, r26	; 0x03
    fbd8:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    fbdc:	60 ed       	ldi	r22, 0xD0	; 208
    fbde:	78 e0       	ldi	r23, 0x08	; 8
    fbe0:	c8 01       	movw	r24, r16
    fbe2:	8a df       	rcall	.-236    	; 0xfaf8 <fopen>
    fbe4:	7c 01       	movw	r14, r24
    fbe6:	ed b7       	in	r30, 0x3d	; 61
    fbe8:	fe b7       	in	r31, 0x3e	; 62
    fbea:	89 2b       	or	r24, r25
    fbec:	59 f4       	brne	.+22     	; 0xfc04 <copy+0x72>
    fbee:	15 83       	std	Z+5, r17	; 0x05
    fbf0:	04 83       	std	Z+4, r16	; 0x04
    fbf2:	85 e8       	ldi	r24, 0x85	; 133
    fbf4:	9c e0       	ldi	r25, 0x0C	; 12
    fbf6:	a0 e0       	ldi	r26, 0x00	; 0
    fbf8:	81 83       	std	Z+1, r24	; 0x01
    fbfa:	92 83       	std	Z+2, r25	; 0x02
    fbfc:	a3 83       	std	Z+3, r26	; 0x03
    fbfe:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    fc02:	20 c0       	rjmp	.+64     	; 0xfc44 <copy+0xb2>
    fc04:	d5 83       	std	Z+5, r29	; 0x05
    fc06:	c4 83       	std	Z+4, r28	; 0x04
    fc08:	88 e7       	ldi	r24, 0x78	; 120
    fc0a:	9c e0       	ldi	r25, 0x0C	; 12
    fc0c:	a0 e0       	ldi	r26, 0x00	; 0
    fc0e:	81 83       	std	Z+1, r24	; 0x01
    fc10:	92 83       	std	Z+2, r25	; 0x02
    fc12:	a3 83       	std	Z+3, r26	; 0x03
    fc14:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    fc18:	6e ed       	ldi	r22, 0xDE	; 222
    fc1a:	78 e0       	ldi	r23, 0x08	; 8
    fc1c:	ce 01       	movw	r24, r28
    fc1e:	6c df       	rcall	.-296    	; 0xfaf8 <fopen>
    fc20:	8c 01       	movw	r16, r24
    fc22:	89 2b       	or	r24, r25
    fc24:	a1 f4       	brne	.+40     	; 0xfc4e <copy+0xbc>
    fc26:	ed b7       	in	r30, 0x3d	; 61
    fc28:	fe b7       	in	r31, 0x3e	; 62
    fc2a:	d5 83       	std	Z+5, r29	; 0x05
    fc2c:	c4 83       	std	Z+4, r28	; 0x04
    fc2e:	88 e6       	ldi	r24, 0x68	; 104
    fc30:	9c e0       	ldi	r25, 0x0C	; 12
    fc32:	a0 e0       	ldi	r26, 0x00	; 0
    fc34:	81 83       	std	Z+1, r24	; 0x01
    fc36:	92 83       	std	Z+2, r25	; 0x02
    fc38:	a3 83       	std	Z+3, r26	; 0x03
    fc3a:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    fc3e:	80 e0       	ldi	r24, 0x00	; 0
    fc40:	90 e0       	ldi	r25, 0x00	; 0
    fc42:	04 de       	rcall	.-1016   	; 0xf84c <fclose>
    fc44:	60 e0       	ldi	r22, 0x00	; 0
    fc46:	70 e0       	ldi	r23, 0x00	; 0
    fc48:	80 e0       	ldi	r24, 0x00	; 0
    fc4a:	90 e0       	ldi	r25, 0x00	; 0
    fc4c:	68 c0       	rjmp	.+208    	; 0xfd1e <copy+0x18c>
    fc4e:	61 e0       	ldi	r22, 0x01	; 1
    fc50:	70 e0       	ldi	r23, 0x00	; 0
    fc52:	80 e0       	ldi	r24, 0x00	; 0
    fc54:	92 e0       	ldi	r25, 0x02	; 2
    fc56:	0e 94 b1 27 	call	0x4f62	; 0x4f62 <safecalloc>
    fc5a:	6c 01       	movw	r12, r24
    fc5c:	89 2b       	or	r24, r25
    fc5e:	21 f4       	brne	.+8      	; 0xfc68 <copy+0xd6>
    fc60:	c7 01       	movw	r24, r14
    fc62:	f4 dd       	rcall	.-1048   	; 0xf84c <fclose>
    fc64:	c8 01       	movw	r24, r16
    fc66:	ed cf       	rjmp	.-38     	; 0xfc42 <copy+0xb0>
    fc68:	8b e5       	ldi	r24, 0x5B	; 91
    fc6a:	9c e0       	ldi	r25, 0x0C	; 12
    fc6c:	a0 e0       	ldi	r26, 0x00	; 0
    fc6e:	ed b7       	in	r30, 0x3d	; 61
    fc70:	fe b7       	in	r31, 0x3e	; 62
    fc72:	81 83       	std	Z+1, r24	; 0x01
    fc74:	92 83       	std	Z+2, r25	; 0x02
    fc76:	a3 83       	std	Z+3, r26	; 0x03
    fc78:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    fc7c:	81 2c       	mov	r8, r1
    fc7e:	91 2c       	mov	r9, r1
    fc80:	54 01       	movw	r10, r8
    fc82:	8f e3       	ldi	r24, 0x3F	; 63
    fc84:	9c e0       	ldi	r25, 0x0C	; 12
    fc86:	2c 01       	movw	r4, r24
    fc88:	61 2c       	mov	r6, r1
    fc8a:	97 01       	movw	r18, r14
    fc8c:	40 e0       	ldi	r20, 0x00	; 0
    fc8e:	52 e0       	ldi	r21, 0x02	; 2
    fc90:	61 e0       	ldi	r22, 0x01	; 1
    fc92:	70 e0       	ldi	r23, 0x00	; 0
    fc94:	c6 01       	movw	r24, r12
    fc96:	86 dc       	rcall	.-1780   	; 0xf5a4 <fread>
    fc98:	ec 01       	movw	r28, r24
    fc9a:	18 16       	cp	r1, r24
    fc9c:	19 06       	cpc	r1, r25
    fc9e:	44 f5       	brge	.+80     	; 0xfcf0 <copy+0x15e>
    fca0:	98 01       	movw	r18, r16
    fca2:	ae 01       	movw	r20, r28
    fca4:	61 e0       	ldi	r22, 0x01	; 1
    fca6:	70 e0       	ldi	r23, 0x00	; 0
    fca8:	c6 01       	movw	r24, r12
    fcaa:	4e dd       	rcall	.-1380   	; 0xf748 <fwrite>
    fcac:	8c 17       	cp	r24, r28
    fcae:	9d 07       	cpc	r25, r29
    fcb0:	5c f4       	brge	.+22     	; 0xfcc8 <copy+0x136>
    fcb2:	8e e4       	ldi	r24, 0x4E	; 78
    fcb4:	9c e0       	ldi	r25, 0x0C	; 12
    fcb6:	a0 e0       	ldi	r26, 0x00	; 0
    fcb8:	ed b7       	in	r30, 0x3d	; 61
    fcba:	fe b7       	in	r31, 0x3e	; 62
    fcbc:	81 83       	std	Z+1, r24	; 0x01
    fcbe:	92 83       	std	Z+2, r25	; 0x02
    fcc0:	a3 83       	std	Z+3, r26	; 0x03
    fcc2:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    fcc6:	14 c0       	rjmp	.+40     	; 0xfcf0 <copy+0x15e>
    fcc8:	ce 01       	movw	r24, r28
    fcca:	dd 0f       	add	r29, r29
    fccc:	aa 0b       	sbc	r26, r26
    fcce:	bb 0b       	sbc	r27, r27
    fcd0:	88 0e       	add	r8, r24
    fcd2:	99 1e       	adc	r9, r25
    fcd4:	aa 1e       	adc	r10, r26
    fcd6:	bb 1e       	adc	r11, r27
    fcd8:	ed b7       	in	r30, 0x3d	; 61
    fcda:	fe b7       	in	r31, 0x3e	; 62
    fcdc:	84 82       	std	Z+4, r8	; 0x04
    fcde:	95 82       	std	Z+5, r9	; 0x05
    fce0:	a6 82       	std	Z+6, r10	; 0x06
    fce2:	b7 82       	std	Z+7, r11	; 0x07
    fce4:	41 82       	std	Z+1, r4	; 0x01
    fce6:	52 82       	std	Z+2, r5	; 0x02
    fce8:	63 82       	std	Z+3, r6	; 0x03
    fcea:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    fcee:	cd cf       	rjmp	.-102    	; 0xfc8a <copy+0xf8>
    fcf0:	ed b7       	in	r30, 0x3d	; 61
    fcf2:	fe b7       	in	r31, 0x3e	; 62
    fcf4:	84 82       	std	Z+4, r8	; 0x04
    fcf6:	95 82       	std	Z+5, r9	; 0x05
    fcf8:	a6 82       	std	Z+6, r10	; 0x06
    fcfa:	b7 82       	std	Z+7, r11	; 0x07
    fcfc:	8c e2       	ldi	r24, 0x2C	; 44
    fcfe:	9c e0       	ldi	r25, 0x0C	; 12
    fd00:	a0 e0       	ldi	r26, 0x00	; 0
    fd02:	81 83       	std	Z+1, r24	; 0x01
    fd04:	92 83       	std	Z+2, r25	; 0x02
    fd06:	a3 83       	std	Z+3, r26	; 0x03
    fd08:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    fd0c:	c6 01       	movw	r24, r12
    fd0e:	0e 94 fd 27 	call	0x4ffa	; 0x4ffa <safefree>
    fd12:	c7 01       	movw	r24, r14
    fd14:	9b dd       	rcall	.-1226   	; 0xf84c <fclose>
    fd16:	c8 01       	movw	r24, r16
    fd18:	99 dd       	rcall	.-1230   	; 0xf84c <fclose>
    fd1a:	b4 01       	movw	r22, r8
    fd1c:	c5 01       	movw	r24, r10
    fd1e:	ad b7       	in	r26, 0x3d	; 61
    fd20:	be b7       	in	r27, 0x3e	; 62
    fd22:	17 96       	adiw	r26, 0x07	; 7
    fd24:	0f b6       	in	r0, 0x3f	; 63
    fd26:	f8 94       	cli
    fd28:	be bf       	out	0x3e, r27	; 62
    fd2a:	0f be       	out	0x3f, r0	; 63
    fd2c:	ad bf       	out	0x3d, r26	; 61
    fd2e:	df 91       	pop	r29
    fd30:	cf 91       	pop	r28
    fd32:	1f 91       	pop	r17
    fd34:	0f 91       	pop	r16
    fd36:	ff 90       	pop	r15
    fd38:	ef 90       	pop	r14
    fd3a:	df 90       	pop	r13
    fd3c:	cf 90       	pop	r12
    fd3e:	bf 90       	pop	r11
    fd40:	af 90       	pop	r10
    fd42:	9f 90       	pop	r9
    fd44:	8f 90       	pop	r8
    fd46:	6f 90       	pop	r6
    fd48:	5f 90       	pop	r5
    fd4a:	4f 90       	pop	r4
    fd4c:	08 95       	ret

0000fd4e <testpage>:
/// @brief Used to page output of functions like cat, hexdump, etc
/// @param[in] *name: file to hexdump
/// @retrun -1 = quit, return count or 0 at new page
MEMSPACE
int testpage(int count)
{
    fd4e:	cf 93       	push	r28
    fd50:	df 93       	push	r29
    fd52:	00 d0       	rcall	.+0      	; 0xfd54 <testpage+0x6>
    fd54:	1f 92       	push	r1
    int c;
    if(count >= _pagesize)
    fd56:	20 91 8d 01 	lds	r18, 0x018D	; 0x80018d <_pagesize>
    fd5a:	30 91 8e 01 	lds	r19, 0x018E	; 0x80018e <_pagesize+0x1>
    fd5e:	82 17       	cp	r24, r18
    fd60:	93 07       	cpc	r25, r19
    fd62:	3c f1       	brlt	.+78     	; 0xfdb2 <testpage+0x64>
    {
        printf("More..");
    fd64:	85 e2       	ldi	r24, 0x25	; 37
    fd66:	9c e0       	ldi	r25, 0x0C	; 12
    fd68:	a0 e0       	ldi	r26, 0x00	; 0
    fd6a:	ed b7       	in	r30, 0x3d	; 61
    fd6c:	fe b7       	in	r31, 0x3e	; 62
    fd6e:	81 83       	std	Z+1, r24	; 0x01
    fd70:	92 83       	std	Z+2, r25	; 0x02
    fd72:	a3 83       	std	Z+3, r26	; 0x03
    fd74:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
        {
            optimistic_yield(1000);
            wdt_reset();
        }
#endif
        c = getchar();
    fd78:	0e 94 88 75 	call	0xeb10	; 0xeb10 <getchar>
    fd7c:	ec 01       	movw	r28, r24
        printf("\r");
    fd7e:	83 e2       	ldi	r24, 0x23	; 35
    fd80:	9c e0       	ldi	r25, 0x0C	; 12
    fd82:	a0 e0       	ldi	r26, 0x00	; 0
    fd84:	ed b7       	in	r30, 0x3d	; 61
    fd86:	fe b7       	in	r31, 0x3e	; 62
    fd88:	81 83       	std	Z+1, r24	; 0x01
    fd8a:	92 83       	std	Z+2, r25	; 0x02
    fd8c:	a3 83       	std	Z+3, r26	; 0x03
    fd8e:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
        if(c == 'q')
    fd92:	c1 37       	cpi	r28, 0x71	; 113
    fd94:	d1 05       	cpc	r29, r1
    fd96:	41 f0       	breq	.+16     	; 0xfda8 <testpage+0x5a>
            return(-1);         // quit
        if(c == '\n')
    fd98:	2a 97       	sbiw	r28, 0x0a	; 10
    fd9a:	49 f4       	brne	.+18     	; 0xfdae <testpage+0x60>
            return(_pagesize-1); // single line
    fd9c:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <_pagesize>
    fda0:	90 91 8e 01 	lds	r25, 0x018E	; 0x80018e <_pagesize+0x1>
    fda4:	01 97       	sbiw	r24, 0x01	; 1
    fda6:	05 c0       	rjmp	.+10     	; 0xfdb2 <testpage+0x64>
        }
#endif
        c = getchar();
        printf("\r");
        if(c == 'q')
            return(-1);         // quit
    fda8:	8f ef       	ldi	r24, 0xFF	; 255
    fdaa:	9f ef       	ldi	r25, 0xFF	; 255
    fdac:	02 c0       	rjmp	.+4      	; 0xfdb2 <testpage+0x64>
        if(c == '\n')
            return(_pagesize-1); // single line
        return(0);              // new page
    fdae:	80 e0       	ldi	r24, 0x00	; 0
    fdb0:	90 e0       	ldi	r25, 0x00	; 0
    }
    return (count);
}
    fdb2:	cd b7       	in	r28, 0x3d	; 61
    fdb4:	de b7       	in	r29, 0x3e	; 62
    fdb6:	23 96       	adiw	r28, 0x03	; 3
    fdb8:	e2 e0       	ldi	r30, 0x02	; 2
    fdba:	0c 94 0a e0 	jmp	0x1c014	; 0x1c014 <__epilogue_restores__+0x20>

0000fdbe <cat>:
/// @param[in] name: file name.
/// @param[in] option: --p page display
/// @return  void.
MEMSPACE
long cat(char *name, int dopage)
{
    fdbe:	a7 e0       	ldi	r26, 0x07	; 7
    fdc0:	b1 e0       	ldi	r27, 0x01	; 1
    fdc2:	e5 ee       	ldi	r30, 0xE5	; 229
    fdc4:	fe e7       	ldi	r31, 0x7E	; 126
    fdc6:	0c 94 e4 df 	jmp	0x1bfc8	; 0x1bfc8 <__prologue_saves__+0xc>
    fdca:	8c 01       	movw	r16, r24
    fdcc:	4b 01       	movw	r8, r22
    FILE *fp;
    int count = 0;
    int size = 0;
    char line[256];

    fp = fopen(name,"rb");
    fdce:	60 ed       	ldi	r22, 0xD0	; 208
    fdd0:	78 e0       	ldi	r23, 0x08	; 8
    fdd2:	92 de       	rcall	.-732    	; 0xfaf8 <fopen>
    fdd4:	7c 01       	movw	r14, r24
    if (!fp)
    fdd6:	89 2b       	or	r24, r25
    fdd8:	41 f0       	breq	.+16     	; 0xfdea <cat+0x2c>
    fdda:	c1 2c       	mov	r12, r1
    fddc:	d1 2c       	mov	r13, r1
    fdde:	a1 2c       	mov	r10, r1
    fde0:	b1 2c       	mov	r11, r1
    {
        printf("Can't open: %s\n", name);
        return(0);
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
    fde2:	8e 01       	movw	r16, r28
    fde4:	08 5f       	subi	r16, 0xF8	; 248
    fde6:	1f 4f       	sbci	r17, 0xFF	; 255
    fde8:	22 c0       	rjmp	.+68     	; 0xfe2e <cat+0x70>
    char line[256];

    fp = fopen(name,"rb");
    if (!fp)
    {
        printf("Can't open: %s\n", name);
    fdea:	ed b7       	in	r30, 0x3d	; 61
    fdec:	fe b7       	in	r31, 0x3e	; 62
    fdee:	15 83       	std	Z+5, r17	; 0x05
    fdf0:	04 83       	std	Z+4, r16	; 0x04
    fdf2:	8e ea       	ldi	r24, 0xAE	; 174
    fdf4:	9c e0       	ldi	r25, 0x0C	; 12
    fdf6:	a0 e0       	ldi	r26, 0x00	; 0
    fdf8:	81 83       	std	Z+1, r24	; 0x01
    fdfa:	92 83       	std	Z+2, r25	; 0x02
    fdfc:	a3 83       	std	Z+3, r26	; 0x03
    fdfe:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
        return(0);
    fe02:	c1 2c       	mov	r12, r1
    fe04:	d1 2c       	mov	r13, r1
    fe06:	76 01       	movw	r14, r12
    fe08:	3f c0       	rjmp	.+126    	; 0xfe88 <cat+0xca>
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
    {
        trim_tail(line);
    fe0a:	c8 01       	movw	r24, r16
    fe0c:	0e 94 7b 31 	call	0x62f6	; 0x62f6 <trim_tail>
        size += strlen(line);
    fe10:	f8 01       	movw	r30, r16
    fe12:	01 90       	ld	r0, Z+
    fe14:	00 20       	and	r0, r0
    fe16:	e9 f7       	brne	.-6      	; 0xfe12 <cat+0x54>
    fe18:	31 97       	sbiw	r30, 0x01	; 1
    fe1a:	e0 1b       	sub	r30, r16
    fe1c:	f1 0b       	sbc	r31, r17
    fe1e:	ce 0e       	add	r12, r30
    fe20:	df 1e       	adc	r13, r31
        puts(line);
    fe22:	c8 01       	movw	r24, r16
    fe24:	0e 94 e0 75 	call	0xebc0	; 0xebc0 <puts>
        if(dopage)
    fe28:	81 14       	cp	r8, r1
    fe2a:	91 04       	cpc	r9, r1
    fe2c:	49 f4       	brne	.+18     	; 0xfe40 <cat+0x82>
    if (!fp)
    {
        printf("Can't open: %s\n", name);
        return(0);
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
    fe2e:	a7 01       	movw	r20, r14
    fe30:	6e ef       	ldi	r22, 0xFE	; 254
    fe32:	70 e0       	ldi	r23, 0x00	; 0
    fe34:	c8 01       	movw	r24, r16
    fe36:	0e 94 94 75 	call	0xeb28	; 0xeb28 <fgets>
    fe3a:	89 2b       	or	r24, r25
    fe3c:	31 f7       	brne	.-52     	; 0xfe0a <cat+0x4c>
    fe3e:	06 c0       	rjmp	.+12     	; 0xfe4c <cat+0x8e>
        trim_tail(line);
        size += strlen(line);
        puts(line);
        if(dopage)
        {
            count = testpage(++count);
    fe40:	c5 01       	movw	r24, r10
    fe42:	01 96       	adiw	r24, 0x01	; 1
    fe44:	84 df       	rcall	.-248    	; 0xfd4e <testpage>
    fe46:	5c 01       	movw	r10, r24
            if(count < 0)
    fe48:	97 ff       	sbrs	r25, 7
    fe4a:	f1 cf       	rjmp	.-30     	; 0xfe2e <cat+0x70>
#ifdef ESP8266
        optimistic_yield(1000);
        wdt_reset();
#endif
    }
    printf("\n");
    fe4c:	8c ea       	ldi	r24, 0xAC	; 172
    fe4e:	9c e0       	ldi	r25, 0x0C	; 12
    fe50:	a0 e0       	ldi	r26, 0x00	; 0
    fe52:	ed b7       	in	r30, 0x3d	; 61
    fe54:	fe b7       	in	r31, 0x3e	; 62
    fe56:	81 83       	std	Z+1, r24	; 0x01
    fe58:	92 83       	std	Z+2, r25	; 0x02
    fe5a:	a3 83       	std	Z+3, r26	; 0x03
    fe5c:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    fclose(fp);
    fe60:	c7 01       	movw	r24, r14
    fe62:	f4 dc       	rcall	.-1560   	; 0xf84c <fclose>
    printf("%ld bytes\n", (long)size);
    fe64:	0d 2c       	mov	r0, r13
    fe66:	00 0c       	add	r0, r0
    fe68:	ee 08       	sbc	r14, r14
    fe6a:	ff 08       	sbc	r15, r15
    fe6c:	ed b7       	in	r30, 0x3d	; 61
    fe6e:	fe b7       	in	r31, 0x3e	; 62
    fe70:	c4 82       	std	Z+4, r12	; 0x04
    fe72:	d5 82       	std	Z+5, r13	; 0x05
    fe74:	e6 82       	std	Z+6, r14	; 0x06
    fe76:	f7 82       	std	Z+7, r15	; 0x07
    fe78:	81 ea       	ldi	r24, 0xA1	; 161
    fe7a:	9c e0       	ldi	r25, 0x0C	; 12
    fe7c:	a0 e0       	ldi	r26, 0x00	; 0
    fe7e:	81 83       	std	Z+1, r24	; 0x01
    fe80:	92 83       	std	Z+2, r25	; 0x02
    fe82:	a3 83       	std	Z+3, r26	; 0x03
    fe84:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    return(size);
}
    fe88:	c7 01       	movw	r24, r14
    fe8a:	b6 01       	movw	r22, r12
    fe8c:	c9 5f       	subi	r28, 0xF9	; 249
    fe8e:	de 4f       	sbci	r29, 0xFE	; 254
    fe90:	ec e0       	ldi	r30, 0x0C	; 12
    fe92:	0c 94 00 e0 	jmp	0x1c000	; 0x1c000 <__epilogue_restores__+0xc>

0000fe96 <ls_info>:
/// @param[in] path: file name or directory
/// @param[in] verbose: 1 = detail, 0 = name only
/// @return  1 on success 0 on fail
MEMSPACE
int ls_info(char *name, int verbose)
{
    fe96:	4f 92       	push	r4
    fe98:	5f 92       	push	r5
    fe9a:	6f 92       	push	r6
    fe9c:	7f 92       	push	r7
    fe9e:	af 92       	push	r10
    fea0:	bf 92       	push	r11
    fea2:	cf 92       	push	r12
    fea4:	df 92       	push	r13
    fea6:	ef 92       	push	r14
    fea8:	ff 92       	push	r15
    feaa:	0f 93       	push	r16
    feac:	1f 93       	push	r17
    feae:	cf 93       	push	r28
    feb0:	df 93       	push	r29
    feb2:	cd b7       	in	r28, 0x3d	; 61
    feb4:	de b7       	in	r29, 0x3e	; 62
    feb6:	c9 54       	subi	r28, 0x49	; 73
    feb8:	d1 09       	sbc	r29, r1
    feba:	0f b6       	in	r0, 0x3f	; 63
    febc:	f8 94       	cli
    febe:	de bf       	out	0x3e, r29	; 62
    fec0:	0f be       	out	0x3f, r0	; 63
    fec2:	cd bf       	out	0x3d, r28	; 61
    fec4:	8c 01       	movw	r16, r24
    fec6:	7b 01       	movw	r14, r22
    uint16_t mask;
    char *cm = "rwx";
    char attr[12], *p;


    if(stat(name, &sp) == -1) 
    fec8:	be 01       	movw	r22, r28
    feca:	62 5f       	subi	r22, 0xF2	; 242
    fecc:	7f 4f       	sbci	r23, 0xFF	; 255
    fece:	19 d9       	rcall	.-3534   	; 0xf102 <stat>
    fed0:	01 96       	adiw	r24, 0x01	; 1
    fed2:	79 f4       	brne	.+30     	; 0xfef2 <ls_info+0x5c>
    {
        printf("can not stat: %s\n", name);
    fed4:	ed b7       	in	r30, 0x3d	; 61
    fed6:	fe b7       	in	r31, 0x3e	; 62
    fed8:	15 83       	std	Z+5, r17	; 0x05
    feda:	04 83       	std	Z+4, r16	; 0x04
    fedc:	81 e1       	ldi	r24, 0x11	; 17
    fede:	9c e0       	ldi	r25, 0x0C	; 12
    fee0:	a0 e0       	ldi	r26, 0x00	; 0
    fee2:	81 83       	std	Z+1, r24	; 0x01
    fee4:	92 83       	std	Z+2, r25	; 0x02
    fee6:	a3 83       	std	Z+3, r26	; 0x03
    fee8:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
        return(0);
    feec:	80 e0       	ldi	r24, 0x00	; 0
    feee:	90 e0       	ldi	r25, 0x00	; 0
    fef0:	77 c0       	rjmp	.+238    	; 0xffe0 <__DATA_REGION_LENGTH__+0xe0>
    }

    if(!verbose)
    fef2:	ef 28       	or	r14, r15
    fef4:	81 f4       	brne	.+32     	; 0xff16 <__DATA_REGION_LENGTH__+0x16>
    {
        printf("%s\n",basename(name));
    fef6:	c8 01       	movw	r24, r16
    fef8:	0e 94 4d 76 	call	0xec9a	; 0xec9a <basename>
    fefc:	ed b7       	in	r30, 0x3d	; 61
    fefe:	fe b7       	in	r31, 0x3e	; 62
    ff00:	95 83       	std	Z+5, r25	; 0x05
    ff02:	84 83       	std	Z+4, r24	; 0x04
    ff04:	8d e0       	ldi	r24, 0x0D	; 13
    ff06:	9c e0       	ldi	r25, 0x0C	; 12
    ff08:	a0 e0       	ldi	r26, 0x00	; 0
    ff0a:	81 83       	std	Z+1, r24	; 0x01
    ff0c:	92 83       	std	Z+2, r25	; 0x02
    ff0e:	a3 83       	std	Z+3, r26	; 0x03
    ff10:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    ff14:	63 c0       	rjmp	.+198    	; 0xffdc <__DATA_REGION_LENGTH__+0xdc>
        return(1);
    }

    p = attr;
    if(S_ISDIR(sp.st_mode))
    ff16:	4e 88       	ldd	r4, Y+22	; 0x16
    ff18:	5f 88       	ldd	r5, Y+23	; 0x17
    ff1a:	68 8c       	ldd	r6, Y+24	; 0x18
    ff1c:	79 8c       	ldd	r7, Y+25	; 0x19
    ff1e:	d3 01       	movw	r26, r6
    ff20:	c2 01       	movw	r24, r4
    ff22:	88 27       	eor	r24, r24
    ff24:	90 7f       	andi	r25, 0xF0	; 240
    ff26:	aa 27       	eor	r26, r26
    ff28:	bb 27       	eor	r27, r27
    ff2a:	81 15       	cp	r24, r1
    ff2c:	90 44       	sbci	r25, 0x40	; 64
    ff2e:	a1 05       	cpc	r26, r1
    ff30:	b1 05       	cpc	r27, r1
    ff32:	11 f4       	brne	.+4      	; 0xff38 <__DATA_REGION_LENGTH__+0x38>
        *p++ = 'd';
    ff34:	84 e6       	ldi	r24, 0x64	; 100
    ff36:	01 c0       	rjmp	.+2      	; 0xff3a <__DATA_REGION_LENGTH__+0x3a>
    else
        *p++ = '-';
    ff38:	8d e2       	ldi	r24, 0x2D	; 45
    ff3a:	8e af       	std	Y+62, r24	; 0x3e
    ff3c:	fe 01       	movw	r30, r28
    ff3e:	fe 96       	adiw	r30, 0x3e	; 62
/// @param[in] path: file name or directory
/// @param[in] verbose: 1 = detail, 0 = name only
/// @return  1 on success 0 on fail
MEMSPACE
int ls_info(char *name, int verbose)
{
    ff40:	e1 2c       	mov	r14, r1
    ff42:	ff 24       	eor	r15, r15
    ff44:	f3 94       	inc	r15
    ff46:	20 e0       	ldi	r18, 0x00	; 0
    ff48:	30 e0       	ldi	r19, 0x00	; 0
    ff4a:	be 2e       	mov	r11, r30
    ff4c:	af 2e       	mov	r10, r31
    {
        // User
        if( sp.st_mode & mask)
            *p++ = cm[ i % 3];
        else
            *p++ = '-';
    ff4e:	4d e2       	ldi	r20, 0x2D	; 45
    mask = 4 << 6;
    for(i=0;i<9;++i)
    {
        // User
        if( sp.st_mode & mask)
            *p++ = cm[ i % 3];
    ff50:	53 e0       	ldi	r21, 0x03	; 3
    ff52:	c5 2e       	mov	r12, r21
    ff54:	d1 2c       	mov	r13, r1

    mask = 4 << 6;
    for(i=0;i<9;++i)
    {
        // User
        if( sp.st_mode & mask)
    ff56:	c7 01       	movw	r24, r14
    ff58:	a0 e0       	ldi	r26, 0x00	; 0
    ff5a:	b0 e0       	ldi	r27, 0x00	; 0
    ff5c:	84 21       	and	r24, r4
    ff5e:	95 21       	and	r25, r5
    ff60:	a6 21       	and	r26, r6
    ff62:	b7 21       	and	r27, r7
    ff64:	89 2b       	or	r24, r25
    ff66:	8a 2b       	or	r24, r26
    ff68:	8b 2b       	or	r24, r27
    ff6a:	51 f0       	breq	.+20     	; 0xff80 <__DATA_REGION_LENGTH__+0x80>
            *p++ = cm[ i % 3];
    ff6c:	c9 01       	movw	r24, r18
    ff6e:	b6 01       	movw	r22, r12
    ff70:	0e 94 5e df 	call	0x1bebc	; 0x1bebc <__divmodhi4>
    ff74:	dc 01       	movw	r26, r24
    ff76:	a4 57       	subi	r26, 0x74	; 116
    ff78:	b4 4f       	sbci	r27, 0xF4	; 244
    ff7a:	8c 91       	ld	r24, X
    ff7c:	81 83       	std	Z+1, r24	; 0x01
    ff7e:	01 c0       	rjmp	.+2      	; 0xff82 <__DATA_REGION_LENGTH__+0x82>
        else
            *p++ = '-';
    ff80:	41 83       	std	Z+1, r20	; 0x01
        mask >>= 1;
    ff82:	f6 94       	lsr	r15
    ff84:	e7 94       	ror	r14
        *p++ = 'd';
    else
        *p++ = '-';

    mask = 4 << 6;
    for(i=0;i<9;++i)
    ff86:	2f 5f       	subi	r18, 0xFF	; 255
    ff88:	3f 4f       	sbci	r19, 0xFF	; 255
    ff8a:	31 96       	adiw	r30, 0x01	; 1
    ff8c:	29 30       	cpi	r18, 0x09	; 9
    ff8e:	31 05       	cpc	r19, r1
    ff90:	11 f7       	brne	.-60     	; 0xff56 <__DATA_REGION_LENGTH__+0x56>
            *p++ = cm[ i % 3];
        else
            *p++ = '-';
        mask >>= 1;
    }
    *p = 0;
    ff92:	29 96       	adiw	r28, 0x09	; 9
    ff94:	1f ae       	std	Y+63, r1	; 0x3f
    ff96:	29 97       	sbiw	r28, 0x09	; 9

    printf("%s none none %12ld %s %s\n",
    ff98:	4e a0       	ldd	r4, Y+38	; 0x26
    ff9a:	5f a0       	ldd	r5, Y+39	; 0x27
    ff9c:	68 a4       	ldd	r6, Y+40	; 0x28
    ff9e:	79 a4       	ldd	r7, Y+41	; 0x29
    ffa0:	6e a9       	ldd	r22, Y+54	; 0x36
    ffa2:	7f a9       	ldd	r23, Y+55	; 0x37
    ffa4:	88 ad       	ldd	r24, Y+56	; 0x38
    ffa6:	99 ad       	ldd	r25, Y+57	; 0x39
    ffa8:	0e 94 28 76 	call	0xec50	; 0xec50 <mctime>
    ffac:	7c 01       	movw	r14, r24
    ffae:	c8 01       	movw	r24, r16
    ffb0:	0e 94 4d 76 	call	0xec9a	; 0xec9a <basename>
    ffb4:	ed b7       	in	r30, 0x3d	; 61
    ffb6:	fe b7       	in	r31, 0x3e	; 62
    ffb8:	95 87       	std	Z+13, r25	; 0x0d
    ffba:	84 87       	std	Z+12, r24	; 0x0c
    ffbc:	f3 86       	std	Z+11, r15	; 0x0b
    ffbe:	e2 86       	std	Z+10, r14	; 0x0a
    ffc0:	46 82       	std	Z+6, r4	; 0x06
    ffc2:	57 82       	std	Z+7, r5	; 0x07
    ffc4:	60 86       	std	Z+8, r6	; 0x08
    ffc6:	71 86       	std	Z+9, r7	; 0x09
    ffc8:	b4 82       	std	Z+4, r11	; 0x04
    ffca:	a5 82       	std	Z+5, r10	; 0x05
    ffcc:	83 ef       	ldi	r24, 0xF3	; 243
    ffce:	9b e0       	ldi	r25, 0x0B	; 11
    ffd0:	a0 e0       	ldi	r26, 0x00	; 0
    ffd2:	81 83       	std	Z+1, r24	; 0x01
    ffd4:	92 83       	std	Z+2, r25	; 0x02
    ffd6:	a3 83       	std	Z+3, r26	; 0x03
    ffd8:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
        attr, 
        (long) sp.st_size, 
        mctime((time_t)sp.st_mtime),
        basename(name));
    return(1);
    ffdc:	81 e0       	ldi	r24, 0x01	; 1
    ffde:	90 e0       	ldi	r25, 0x00	; 0
}
    ffe0:	c7 5b       	subi	r28, 0xB7	; 183
    ffe2:	df 4f       	sbci	r29, 0xFF	; 255
    ffe4:	0f b6       	in	r0, 0x3f	; 63
    ffe6:	f8 94       	cli
    ffe8:	de bf       	out	0x3e, r29	; 62
    ffea:	0f be       	out	0x3f, r0	; 63
    ffec:	cd bf       	out	0x3d, r28	; 61
    ffee:	df 91       	pop	r29
    fff0:	cf 91       	pop	r28
    fff2:	1f 91       	pop	r17
    fff4:	0f 91       	pop	r16
    fff6:	ff 90       	pop	r15
    fff8:	ef 90       	pop	r14
    fffa:	df 90       	pop	r13
    fffc:	cf 90       	pop	r12
    fffe:	bf 90       	pop	r11
   10000:	af 90       	pop	r10
   10002:	7f 90       	pop	r7
   10004:	6f 90       	pop	r6
   10006:	5f 90       	pop	r5
   10008:	4f 90       	pop	r4
   1000a:	08 95       	ret

0001000c <ls>:
/// @param[in] path: file name or directory
/// @param[in] option: -l for detail
/// @return  number of files
MEMSPACE
int ls(char *name, int verbose)
{
   1000c:	2f 92       	push	r2
   1000e:	3f 92       	push	r3
   10010:	4f 92       	push	r4
   10012:	5f 92       	push	r5
   10014:	6f 92       	push	r6
   10016:	8f 92       	push	r8
   10018:	9f 92       	push	r9
   1001a:	af 92       	push	r10
   1001c:	bf 92       	push	r11
   1001e:	cf 92       	push	r12
   10020:	df 92       	push	r13
   10022:	ef 92       	push	r14
   10024:	ff 92       	push	r15
   10026:	0f 93       	push	r16
   10028:	1f 93       	push	r17
   1002a:	cf 93       	push	r28
   1002c:	df 93       	push	r29
   1002e:	cd b7       	in	r28, 0x3d	; 61
   10030:	de b7       	in	r29, 0x3e	; 62
   10032:	c7 53       	subi	r28, 0x37	; 55
   10034:	d1 40       	sbci	r29, 0x01	; 1
   10036:	0f b6       	in	r0, 0x3f	; 63
   10038:	f8 94       	cli
   1003a:	de bf       	out	0x3e, r29	; 62
   1003c:	0f be       	out	0x3f, r0	; 63
   1003e:	cd bf       	out	0x3d, r28	; 61
   10040:	7c 01       	movw	r14, r24
   10042:	4b 01       	movw	r8, r22
    int files = 0;
    int len,len2;
    dirent_t *de;
    char fullpath[MAX_NAME_LEN+1];

    fullpath[0] = 0;
   10044:	1e 82       	std	Y+6, r1	; 0x06
   10046:	8e 01       	movw	r16, r28
   10048:	0a 5f       	subi	r16, 0xFA	; 250
   1004a:	1f 4f       	sbci	r17, 0xFF	; 255
    if(!name || !*name || MATCH(name,".") )
   1004c:	00 97       	sbiw	r24, 0x00	; 0
   1004e:	91 f4       	brne	.+36     	; 0x10074 <ls+0x68>
    {
        if( !getcwd(fullpath, sizeof(fullpath)-2) )
   10050:	6e ef       	ldi	r22, 0xFE	; 254
   10052:	70 e0       	ldi	r23, 0x00	; 0
   10054:	c8 01       	movw	r24, r16
   10056:	0e 94 a3 76 	call	0xed46	; 0xed46 <getcwd>
   1005a:	89 2b       	or	r24, r25
   1005c:	d1 f4       	brne	.+52     	; 0x10092 <ls+0x86>
        {
            printf("ls: Can't get current directory\n"); 
   1005e:	82 ed       	ldi	r24, 0xD2	; 210
   10060:	9b e0       	ldi	r25, 0x0B	; 11
   10062:	a0 e0       	ldi	r26, 0x00	; 0
   10064:	ed b7       	in	r30, 0x3d	; 61
   10066:	fe b7       	in	r31, 0x3e	; 62
   10068:	81 83       	std	Z+1, r24	; 0x01
   1006a:	92 83       	std	Z+2, r25	; 0x02
   1006c:	a3 83       	std	Z+3, r26	; 0x03
   1006e:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   10072:	37 c0       	rjmp	.+110    	; 0x100e2 <ls+0xd6>
    int len,len2;
    dirent_t *de;
    char fullpath[MAX_NAME_LEN+1];

    fullpath[0] = 0;
    if(!name || !*name || MATCH(name,".") )
   10074:	fc 01       	movw	r30, r24
   10076:	80 81       	ld	r24, Z
   10078:	88 23       	and	r24, r24
   1007a:	51 f3       	breq	.-44     	; 0x10050 <ls+0x44>
   1007c:	62 eb       	ldi	r22, 0xB2	; 178
   1007e:	72 e1       	ldi	r23, 0x12	; 18
   10080:	c7 01       	movw	r24, r14
   10082:	0e 94 95 31 	call	0x632a	; 0x632a <MATCH>
   10086:	89 2b       	or	r24, r25
   10088:	19 f7       	brne	.-58     	; 0x10050 <ls+0x44>

        }
    }
    else
    {
        strcpy(fullpath,name);
   1008a:	b7 01       	movw	r22, r14
   1008c:	c8 01       	movw	r24, r16
   1008e:	0e 94 9d 30 	call	0x613a	; 0x613a <strcpy>
    }
    len = strlen(fullpath);
   10092:	f8 01       	movw	r30, r16
   10094:	01 90       	ld	r0, Z+
   10096:	00 20       	and	r0, r0
   10098:	e9 f7       	brne	.-6      	; 0x10094 <ls+0x88>
   1009a:	31 97       	sbiw	r30, 0x01	; 1
   1009c:	1f 01       	movw	r2, r30
   1009e:	20 1a       	sub	r2, r16
   100a0:	31 0a       	sbc	r3, r17


    printf("Listing:[%s]\n",fullpath);
   100a2:	ed b7       	in	r30, 0x3d	; 61
   100a4:	fe b7       	in	r31, 0x3e	; 62
   100a6:	15 83       	std	Z+5, r17	; 0x05
   100a8:	04 83       	std	Z+4, r16	; 0x04
   100aa:	84 ec       	ldi	r24, 0xC4	; 196
   100ac:	9b e0       	ldi	r25, 0x0B	; 11
   100ae:	a0 e0       	ldi	r26, 0x00	; 0
   100b0:	81 83       	std	Z+1, r24	; 0x01
   100b2:	92 83       	std	Z+2, r25	; 0x02
   100b4:	a3 83       	std	Z+3, r26	; 0x03
   100b6:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>

    if (stat(fullpath, &st)) 
   100ba:	be 01       	movw	r22, r28
   100bc:	6a 5f       	subi	r22, 0xFA	; 250
   100be:	7e 4f       	sbci	r23, 0xFE	; 254
   100c0:	c8 01       	movw	r24, r16
   100c2:	1f d8       	rcall	.-4034   	; 0xf102 <stat>
   100c4:	7c 01       	movw	r14, r24
   100c6:	89 2b       	or	r24, r25
   100c8:	79 f0       	breq	.+30     	; 0x100e8 <ls+0xdc>
    { 
        printf("ls: cannot stat [%s]\n", fullpath); 
   100ca:	ed b7       	in	r30, 0x3d	; 61
   100cc:	fe b7       	in	r31, 0x3e	; 62
   100ce:	15 83       	std	Z+5, r17	; 0x05
   100d0:	04 83       	std	Z+4, r16	; 0x04
   100d2:	8e ea       	ldi	r24, 0xAE	; 174
   100d4:	9b e0       	ldi	r25, 0x0B	; 11
   100d6:	a0 e0       	ldi	r26, 0x00	; 0
   100d8:	81 83       	std	Z+1, r24	; 0x01
   100da:	92 83       	std	Z+2, r25	; 0x02
   100dc:	a3 83       	std	Z+3, r26	; 0x03
   100de:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
        return(0); 
   100e2:	e1 2c       	mov	r14, r1
   100e4:	f1 2c       	mov	r15, r1
   100e6:	8c c0       	rjmp	.+280    	; 0x10200 <ls+0x1f4>
    }

    switch (st.st_mode & S_IFMT) 
   100e8:	c2 5f       	subi	r28, 0xF2	; 242
   100ea:	de 4f       	sbci	r29, 0xFE	; 254
   100ec:	88 81       	ld	r24, Y
   100ee:	99 81       	ldd	r25, Y+1	; 0x01
   100f0:	aa 81       	ldd	r26, Y+2	; 0x02
   100f2:	bb 81       	ldd	r27, Y+3	; 0x03
   100f4:	ce 50       	subi	r28, 0x0E	; 14
   100f6:	d1 40       	sbci	r29, 0x01	; 1
   100f8:	88 27       	eor	r24, r24
   100fa:	90 7f       	andi	r25, 0xF0	; 240
   100fc:	aa 27       	eor	r26, r26
   100fe:	bb 27       	eor	r27, r27
   10100:	81 15       	cp	r24, r1
   10102:	f0 e4       	ldi	r31, 0x40	; 64
   10104:	9f 07       	cpc	r25, r31
   10106:	a1 05       	cpc	r26, r1
   10108:	b1 05       	cpc	r27, r1
   1010a:	59 f0       	breq	.+22     	; 0x10122 <ls+0x116>
   1010c:	81 15       	cp	r24, r1
   1010e:	90 48       	sbci	r25, 0x80	; 128
   10110:	a1 05       	cpc	r26, r1
   10112:	b1 05       	cpc	r27, r1
   10114:	09 f0       	breq	.+2      	; 0x10118 <ls+0x10c>
   10116:	66 c0       	rjmp	.+204    	; 0x101e4 <ls+0x1d8>
    {
    case S_IFREG:
        files = ls_info(fullpath,verbose);
   10118:	b4 01       	movw	r22, r8
   1011a:	c8 01       	movw	r24, r16
   1011c:	bc de       	rcall	.-648    	; 0xfe96 <ls_info>
   1011e:	7c 01       	movw	r14, r24
        break;
   10120:	63 c0       	rjmp	.+198    	; 0x101e8 <ls+0x1dc>
    case S_IFDIR:
        dirp = opendir(fullpath);
   10122:	c8 01       	movw	r24, r16
   10124:	0e 94 51 77 	call	0xeea2	; 0xeea2 <opendir>
   10128:	5c 01       	movw	r10, r24
        if(!dirp)
   1012a:	89 2b       	or	r24, r25
   1012c:	81 f0       	breq	.+32     	; 0x1014e <ls+0x142>
    }
    else
    {
        strcpy(fullpath,name);
    }
    len = strlen(fullpath);
   1012e:	e1 2c       	mov	r14, r1
   10130:	f1 2c       	mov	r15, r1
                strcat(fullpath,"/");
            }
            strcat(fullpath,de->d_name);
            files +=ls_info(fullpath,verbose);
            // restore path
            fullpath[len] = 0;
   10132:	c8 01       	movw	r24, r16
   10134:	82 0d       	add	r24, r2
   10136:	93 1d       	adc	r25, r3
   10138:	ca 5c       	subi	r28, 0xCA	; 202
   1013a:	de 4f       	sbci	r29, 0xFE	; 254
   1013c:	99 83       	std	Y+1, r25	; 0x01
   1013e:	88 83       	st	Y, r24
   10140:	c6 53       	subi	r28, 0x36	; 54
   10142:	d1 40       	sbci	r29, 0x01	; 1
                break;
            // FIXME neeed beetter string length tests here
            len2 = strlen(de->d_name);
            if(len + len2 >= MAX_NAME_LEN)
            {
                printf("name:[%s] too long with full path\n",de->d_name);
   10144:	8b e7       	ldi	r24, 0x7B	; 123
   10146:	9b e0       	ldi	r25, 0x0B	; 11
   10148:	2c 01       	movw	r4, r24
   1014a:	61 2c       	mov	r6, r1
   1014c:	24 c0       	rjmp	.+72     	; 0x10196 <ls+0x18a>
        break;
    case S_IFDIR:
        dirp = opendir(fullpath);
        if(!dirp)
        {
            printf("opendir failed\n");
   1014e:	8e e9       	ldi	r24, 0x9E	; 158
   10150:	9b e0       	ldi	r25, 0x0B	; 11
   10152:	a0 e0       	ldi	r26, 0x00	; 0
   10154:	ed b7       	in	r30, 0x3d	; 61
   10156:	fe b7       	in	r31, 0x3e	; 62
   10158:	81 83       	std	Z+1, r24	; 0x01
   1015a:	92 83       	std	Z+2, r25	; 0x02
   1015c:	a3 83       	std	Z+3, r26	; 0x03
   1015e:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
            return(0);
   10162:	4e c0       	rjmp	.+156    	; 0x10200 <ls+0x1f4>
        }
        while ( (de = readdir(dirp)) ) 
        {
            if(de->d_name[0] == 0)
   10164:	f6 01       	movw	r30, r12
   10166:	80 81       	ld	r24, Z
   10168:	88 23       	and	r24, r24
   1016a:	d9 f0       	breq	.+54     	; 0x101a2 <ls+0x196>
                break;
            // FIXME neeed beetter string length tests here
            len2 = strlen(de->d_name);
   1016c:	f6 01       	movw	r30, r12
   1016e:	01 90       	ld	r0, Z+
   10170:	00 20       	and	r0, r0
   10172:	e9 f7       	brne	.-6      	; 0x1016e <ls+0x162>
   10174:	31 97       	sbiw	r30, 0x01	; 1
   10176:	ec 19       	sub	r30, r12
   10178:	fd 09       	sbc	r31, r13
            if(len + len2 >= MAX_NAME_LEN)
   1017a:	e2 0d       	add	r30, r2
   1017c:	f3 1d       	adc	r31, r3
   1017e:	ef 3f       	cpi	r30, 0xFF	; 255
   10180:	f1 05       	cpc	r31, r1
   10182:	9c f0       	brlt	.+38     	; 0x101aa <ls+0x19e>
            {
                printf("name:[%s] too long with full path\n",de->d_name);
   10184:	ed b7       	in	r30, 0x3d	; 61
   10186:	fe b7       	in	r31, 0x3e	; 62
   10188:	d5 82       	std	Z+5, r13	; 0x05
   1018a:	c4 82       	std	Z+4, r12	; 0x04
   1018c:	41 82       	std	Z+1, r4	; 0x01
   1018e:	52 82       	std	Z+2, r5	; 0x02
   10190:	63 82       	std	Z+3, r6	; 0x03
   10192:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
        if(!dirp)
        {
            printf("opendir failed\n");
            return(0);
        }
        while ( (de = readdir(dirp)) ) 
   10196:	c5 01       	movw	r24, r10
   10198:	0e 94 6f 77 	call	0xeede	; 0xeede <readdir>
   1019c:	6c 01       	movw	r12, r24
   1019e:	89 2b       	or	r24, r25
   101a0:	09 f7       	brne	.-62     	; 0x10164 <ls+0x158>
#ifdef ESP8266
            optimistic_yield(1000);
            wdt_reset();
#endif
        }
        closedir(dirp);
   101a2:	c5 01       	movw	r24, r10
   101a4:	0e 94 36 77 	call	0xee6c	; 0xee6c <closedir>
        break;
   101a8:	1f c0       	rjmp	.+62     	; 0x101e8 <ls+0x1dc>
            if(len + len2 >= MAX_NAME_LEN)
            {
                printf("name:[%s] too long with full path\n",de->d_name);
                continue;
            }
            if(!MATCH(fullpath,"/") )
   101aa:	68 e7       	ldi	r22, 0x78	; 120
   101ac:	78 e0       	ldi	r23, 0x08	; 8
   101ae:	c8 01       	movw	r24, r16
   101b0:	0e 94 95 31 	call	0x632a	; 0x632a <MATCH>
   101b4:	89 2b       	or	r24, r25
   101b6:	29 f4       	brne	.+10     	; 0x101c2 <ls+0x1b6>
            {
                strcat(fullpath,"/");
   101b8:	68 e7       	ldi	r22, 0x78	; 120
   101ba:	78 e0       	ldi	r23, 0x08	; 8
   101bc:	c8 01       	movw	r24, r16
   101be:	0e 94 be 30 	call	0x617c	; 0x617c <strcat>
            }
            strcat(fullpath,de->d_name);
   101c2:	b6 01       	movw	r22, r12
   101c4:	c8 01       	movw	r24, r16
   101c6:	0e 94 be 30 	call	0x617c	; 0x617c <strcat>
            files +=ls_info(fullpath,verbose);
   101ca:	b4 01       	movw	r22, r8
   101cc:	c8 01       	movw	r24, r16
   101ce:	63 de       	rcall	.-826    	; 0xfe96 <ls_info>
   101d0:	e8 0e       	add	r14, r24
   101d2:	f9 1e       	adc	r15, r25
            // restore path
            fullpath[len] = 0;
   101d4:	ca 5c       	subi	r28, 0xCA	; 202
   101d6:	de 4f       	sbci	r29, 0xFE	; 254
   101d8:	e8 81       	ld	r30, Y
   101da:	f9 81       	ldd	r31, Y+1	; 0x01
   101dc:	c6 53       	subi	r28, 0x36	; 54
   101de:	d1 40       	sbci	r29, 0x01	; 1
   101e0:	10 82       	st	Z, r1
   101e2:	d9 cf       	rjmp	.-78     	; 0x10196 <ls+0x18a>
MEMSPACE
int ls(char *name, int verbose)
{
    struct stat st;
    DIR *dirp;
    int files = 0;
   101e4:	e1 2c       	mov	r14, r1
   101e6:	f1 2c       	mov	r15, r1
#endif
        }
        closedir(dirp);
        break;
    }
    printf("Files: %d\n", (int)files);
   101e8:	ed b7       	in	r30, 0x3d	; 61
   101ea:	fe b7       	in	r31, 0x3e	; 62
   101ec:	f5 82       	std	Z+5, r15	; 0x05
   101ee:	e4 82       	std	Z+4, r14	; 0x04
   101f0:	80 e7       	ldi	r24, 0x70	; 112
   101f2:	9b e0       	ldi	r25, 0x0B	; 11
   101f4:	a0 e0       	ldi	r26, 0x00	; 0
   101f6:	81 83       	std	Z+1, r24	; 0x01
   101f8:	92 83       	std	Z+2, r25	; 0x02
   101fa:	a3 83       	std	Z+3, r26	; 0x03
   101fc:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    return(files);
}
   10200:	c7 01       	movw	r24, r14
   10202:	c9 5c       	subi	r28, 0xC9	; 201
   10204:	de 4f       	sbci	r29, 0xFE	; 254
   10206:	0f b6       	in	r0, 0x3f	; 63
   10208:	f8 94       	cli
   1020a:	de bf       	out	0x3e, r29	; 62
   1020c:	0f be       	out	0x3f, r0	; 63
   1020e:	cd bf       	out	0x3d, r28	; 61
   10210:	df 91       	pop	r29
   10212:	cf 91       	pop	r28
   10214:	1f 91       	pop	r17
   10216:	0f 91       	pop	r16
   10218:	ff 90       	pop	r15
   1021a:	ef 90       	pop	r14
   1021c:	df 90       	pop	r13
   1021e:	cf 90       	pop	r12
   10220:	bf 90       	pop	r11
   10222:	af 90       	pop	r10
   10224:	9f 90       	pop	r9
   10226:	8f 90       	pop	r8
   10228:	6f 90       	pop	r6
   1022a:	5f 90       	pop	r5
   1022c:	4f 90       	pop	r4
   1022e:	3f 90       	pop	r3
   10230:	2f 90       	pop	r2
   10232:	08 95       	ret

00010234 <posix_tests>:
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int posix_tests(int argc,char *argv[])
{
   10234:	a7 e0       	ldi	r26, 0x07	; 7
   10236:	b1 e0       	ldi	r27, 0x01	; 1
   10238:	e0 e2       	ldi	r30, 0x20	; 32
   1023a:	f1 e8       	ldi	r31, 0x81	; 129
   1023c:	0c 94 e0 df 	jmp	0x1bfc0	; 0x1bfc0 <__prologue_saves__+0x4>
    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   10240:	fb 01       	movw	r30, r22
   10242:	c0 80       	ld	r12, Z
   10244:	d1 80       	ldd	r13, Z+1	; 0x01

    if(!ptr)
   10246:	c1 14       	cp	r12, r1
   10248:	d1 04       	cpc	r13, r1
   1024a:	09 f4       	brne	.+2      	; 0x1024e <posix_tests+0x1a>
   1024c:	9a c1       	rjmp	.+820    	; 0x10582 <posix_tests+0x34e>
   1024e:	2b 01       	movw	r4, r22
   10250:	8c 01       	movw	r16, r24
        return(0);

    if( MATCH(ptr,"posix") )
   10252:	60 e9       	ldi	r22, 0x90	; 144
   10254:	7b e0       	ldi	r23, 0x0B	; 11
   10256:	c6 01       	movw	r24, r12
   10258:	0e 94 95 31 	call	0x632a	; 0x632a <MATCH>
   1025c:	89 2b       	or	r24, r25
   1025e:	a9 f0       	breq	.+42     	; 0x1028a <posix_tests+0x56>
    {
        ptr = argv[ind++];
   10260:	f2 01       	movw	r30, r4
   10262:	c2 80       	ldd	r12, Z+2	; 0x02
   10264:	d3 80       	ldd	r13, Z+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
   10266:	c1 14       	cp	r12, r1
   10268:	d1 04       	cpc	r13, r1
   1026a:	21 f4       	brne	.+8      	; 0x10274 <posix_tests+0x40>
        {
            posix_help(1);
   1026c:	81 e0       	ldi	r24, 0x01	; 1
   1026e:	90 e0       	ldi	r25, 0x00	; 0
   10270:	6f dc       	rcall	.-1826   	; 0xfb50 <posix_help>
   10272:	28 c1       	rjmp	.+592    	; 0x104c4 <posix_tests+0x290>
        return(0);

    if( MATCH(ptr,"posix") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
   10274:	63 e6       	ldi	r22, 0x63	; 99
   10276:	76 e1       	ldi	r23, 0x16	; 22
   10278:	c6 01       	movw	r24, r12
   1027a:	0e 94 95 31 	call	0x632a	; 0x632a <MATCH>
   1027e:	89 2b       	or	r24, r25
   10280:	a9 f7       	brne	.-22     	; 0x1026c <posix_tests+0x38>
    if(!ptr)
        return(0);

    if( MATCH(ptr,"posix") )
    {
        ptr = argv[ind++];
   10282:	22 e0       	ldi	r18, 0x02	; 2
   10284:	62 2e       	mov	r6, r18
   10286:	71 2c       	mov	r7, r1
   10288:	03 c0       	rjmp	.+6      	; 0x10290 <posix_tests+0x5c>
{
    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   1028a:	66 24       	eor	r6, r6
   1028c:	63 94       	inc	r6
   1028e:	71 2c       	mov	r7, r1
            posix_help(1);
            return(1);
        }
    }

    if (MATCHARGS(ptr,"cat", (ind + 1), argc))
   10290:	73 01       	movw	r14, r6
   10292:	ff ef       	ldi	r31, 0xFF	; 255
   10294:	ef 1a       	sub	r14, r31
   10296:	ff 0a       	sbc	r15, r31
   10298:	98 01       	movw	r18, r16
   1029a:	a7 01       	movw	r20, r14
   1029c:	66 e9       	ldi	r22, 0x96	; 150
   1029e:	7b e0       	ldi	r23, 0x0B	; 11
   102a0:	c6 01       	movw	r24, r12
   102a2:	0e 94 bd 31 	call	0x637a	; 0x637a <MATCHARGS>
   102a6:	89 2b       	or	r24, r25
   102a8:	a1 f1       	breq	.+104    	; 0x10312 <posix_tests+0xde>
   102aa:	73 01       	movw	r14, r6
   102ac:	ee 0c       	add	r14, r14
   102ae:	ff 1c       	adc	r15, r15
   102b0:	e4 0c       	add	r14, r4
   102b2:	f5 1c       	adc	r15, r5
   102b4:	57 01       	movw	r10, r14
   102b6:	47 01       	movw	r8, r14
   102b8:	63 01       	movw	r12, r6
   102ba:	41 2c       	mov	r4, r1
   102bc:	51 2c       	mov	r5, r1
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   102be:	c0 16       	cp	r12, r16
   102c0:	d1 06       	cpc	r13, r17
   102c2:	1c f5       	brge	.+70     	; 0x1030a <posix_tests+0xd6>
        {
            if(MATCH(argv[i],"-p"))
   102c4:	6a e9       	ldi	r22, 0x9A	; 154
   102c6:	7b e0       	ldi	r23, 0x0B	; 11
   102c8:	f4 01       	movw	r30, r8
   102ca:	81 91       	ld	r24, Z+
   102cc:	91 91       	ld	r25, Z+
   102ce:	4f 01       	movw	r8, r30
   102d0:	0e 94 95 31 	call	0x632a	; 0x632a <MATCH>
   102d4:	89 2b       	or	r24, r25
   102d6:	19 f0       	breq	.+6      	; 0x102de <posix_tests+0xaa>
                page = 1;
   102d8:	44 24       	eor	r4, r4
   102da:	43 94       	inc	r4
   102dc:	51 2c       	mov	r5, r1

    if (MATCHARGS(ptr,"cat", (ind + 1), argc))
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   102de:	ff ef       	ldi	r31, 0xFF	; 255
   102e0:	cf 1a       	sub	r12, r31
   102e2:	df 0a       	sbc	r13, r31
   102e4:	ec cf       	rjmp	.-40     	; 0x102be <posix_tests+0x8a>
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
        {
            if(!MATCH(argv[i],"-p"))
   102e6:	6a e9       	ldi	r22, 0x9A	; 154
   102e8:	7b e0       	ldi	r23, 0x0B	; 11
   102ea:	f5 01       	movw	r30, r10
   102ec:	81 91       	ld	r24, Z+
   102ee:	91 91       	ld	r25, Z+
   102f0:	5f 01       	movw	r10, r30
   102f2:	0e 94 95 31 	call	0x632a	; 0x632a <MATCH>
   102f6:	89 2b       	or	r24, r25
   102f8:	29 f4       	brne	.+10     	; 0x10304 <posix_tests+0xd0>
				cat(argv[ind], page);
   102fa:	b2 01       	movw	r22, r4
   102fc:	f7 01       	movw	r30, r14
   102fe:	80 81       	ld	r24, Z
   10300:	91 81       	ldd	r25, Z+1	; 0x01
   10302:	5d dd       	rcall	.-1350   	; 0xfdbe <cat>
        for(i=ind;i<argc;++i)
        {
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
   10304:	ff ef       	ldi	r31, 0xFF	; 255
   10306:	6f 1a       	sub	r6, r31
   10308:	7f 0a       	sbc	r7, r31
   1030a:	60 16       	cp	r6, r16
   1030c:	71 06       	cpc	r7, r17
   1030e:	5c f3       	brlt	.-42     	; 0x102e6 <posix_tests+0xb2>
   10310:	d9 c0       	rjmp	.+434    	; 0x104c4 <posix_tests+0x290>
        chmod( argv[ind],strtol(argv[ind+1],NULL,8));
        return(1);
    }
#endif

    if (MATCHARGS(ptr,"copy", (ind + 2), argc))
   10312:	53 01       	movw	r10, r6
   10314:	82 e0       	ldi	r24, 0x02	; 2
   10316:	a8 0e       	add	r10, r24
   10318:	b1 1c       	adc	r11, r1
   1031a:	98 01       	movw	r18, r16
   1031c:	a5 01       	movw	r20, r10
   1031e:	6d e9       	ldi	r22, 0x9D	; 157
   10320:	7b e0       	ldi	r23, 0x0B	; 11
   10322:	c6 01       	movw	r24, r12
   10324:	0e 94 bd 31 	call	0x637a	; 0x637a <MATCHARGS>
   10328:	89 2b       	or	r24, r25
   1032a:	59 f0       	breq	.+22     	; 0x10342 <posix_tests+0x10e>
    {
        copy(argv[ind],argv[ind+1]);
   1032c:	f3 01       	movw	r30, r6
   1032e:	ee 0f       	add	r30, r30
   10330:	ff 1f       	adc	r31, r31
   10332:	e4 0d       	add	r30, r4
   10334:	f5 1d       	adc	r31, r5
   10336:	62 81       	ldd	r22, Z+2	; 0x02
   10338:	73 81       	ldd	r23, Z+3	; 0x03
   1033a:	80 81       	ld	r24, Z
   1033c:	91 81       	ldd	r25, Z+1	; 0x01
   1033e:	29 dc       	rcall	.-1966   	; 0xfb92 <copy>
   10340:	c1 c0       	rjmp	.+386    	; 0x104c4 <posix_tests+0x290>
        return(1);
    }

    if (MATCHARGS(ptr,"cd", (ind + 1), argc))
   10342:	98 01       	movw	r18, r16
   10344:	a7 01       	movw	r20, r14
   10346:	62 ea       	ldi	r22, 0xA2	; 162
   10348:	7b e0       	ldi	r23, 0x0B	; 11
   1034a:	c6 01       	movw	r24, r12
   1034c:	0e 94 bd 31 	call	0x637a	; 0x637a <MATCHARGS>
   10350:	89 2b       	or	r24, r25
   10352:	b9 f0       	breq	.+46     	; 0x10382 <posix_tests+0x14e>
    {
        if ( chdir(argv[ind]) != 0)
   10354:	73 01       	movw	r14, r6
   10356:	ee 0c       	add	r14, r14
   10358:	ff 1c       	adc	r15, r15
   1035a:	e4 0c       	add	r14, r4
   1035c:	f5 1c       	adc	r15, r5
   1035e:	f7 01       	movw	r30, r14
   10360:	80 81       	ld	r24, Z
   10362:	91 81       	ldd	r25, Z+1	; 0x01
   10364:	0e 94 5b 76 	call	0xecb6	; 0xecb6 <chdir>
   10368:	89 2b       	or	r24, r25
   1036a:	09 f4       	brne	.+2      	; 0x1036e <posix_tests+0x13a>
   1036c:	ab c0       	rjmp	.+342    	; 0x104c4 <posix_tests+0x290>
			printf("chdir %s failed\n", argv[ind]);
   1036e:	f7 01       	movw	r30, r14
   10370:	80 81       	ld	r24, Z
   10372:	91 81       	ldd	r25, Z+1	; 0x01
   10374:	ed b7       	in	r30, 0x3d	; 61
   10376:	fe b7       	in	r31, 0x3e	; 62
   10378:	95 83       	std	Z+5, r25	; 0x05
   1037a:	84 83       	std	Z+4, r24	; 0x04
   1037c:	83 e0       	ldi	r24, 0x03	; 3
   1037e:	9d e0       	ldi	r25, 0x0D	; 13
   10380:	9b c0       	rjmp	.+310    	; 0x104b8 <posix_tests+0x284>
        logfile(argv[ind],argv[ind+1]);
        return(1);
    }
#endif

    if (MATCHARGS(ptr,"ls", (ind + 0), argc))
   10382:	98 01       	movw	r18, r16
   10384:	a3 01       	movw	r20, r6
   10386:	6a ea       	ldi	r22, 0xAA	; 170
   10388:	78 e0       	ldi	r23, 0x08	; 8
   1038a:	c6 01       	movw	r24, r12
   1038c:	0e 94 bd 31 	call	0x637a	; 0x637a <MATCHARGS>
   10390:	4c 01       	movw	r8, r24
   10392:	89 2b       	or	r24, r25
   10394:	69 f1       	breq	.+90     	; 0x103f0 <posix_tests+0x1bc>
   10396:	73 01       	movw	r14, r6
   10398:	ee 0c       	add	r14, r14
   1039a:	ff 1c       	adc	r15, r15
   1039c:	e4 0c       	add	r14, r4
   1039e:	f5 1c       	adc	r15, r5
   103a0:	c1 2c       	mov	r12, r1
   103a2:	d1 2c       	mov	r13, r1
    {
        int i;
        int args = 0;
        for(i=ind;i<argc;++i)
   103a4:	c6 01       	movw	r24, r12
   103a6:	86 0d       	add	r24, r6
   103a8:	97 1d       	adc	r25, r7
   103aa:	80 17       	cp	r24, r16
   103ac:	91 07       	cpc	r25, r17
   103ae:	b4 f4       	brge	.+44     	; 0x103dc <posix_tests+0x1a8>
        {
            if(!MATCH(argv[i],"-l"))
   103b0:	65 ea       	ldi	r22, 0xA5	; 165
   103b2:	7b e0       	ldi	r23, 0x0B	; 11
   103b4:	f7 01       	movw	r30, r14
   103b6:	80 81       	ld	r24, Z
   103b8:	91 81       	ldd	r25, Z+1	; 0x01
   103ba:	0e 94 95 31 	call	0x632a	; 0x632a <MATCH>
   103be:	89 2b       	or	r24, r25
   103c0:	31 f4       	brne	.+12     	; 0x103ce <posix_tests+0x19a>
                ls(argv[i],1);
   103c2:	61 e0       	ldi	r22, 0x01	; 1
   103c4:	70 e0       	ldi	r23, 0x00	; 0
   103c6:	f7 01       	movw	r30, r14
   103c8:	80 81       	ld	r24, Z
   103ca:	91 81       	ldd	r25, Z+1	; 0x01
   103cc:	1f de       	rcall	.-962    	; 0x1000c <ls>
            ++args;
   103ce:	ff ef       	ldi	r31, 0xFF	; 255
   103d0:	cf 1a       	sub	r12, r31
   103d2:	df 0a       	sbc	r13, r31
   103d4:	82 e0       	ldi	r24, 0x02	; 2
   103d6:	e8 0e       	add	r14, r24
   103d8:	f1 1c       	adc	r15, r1
   103da:	e4 cf       	rjmp	.-56     	; 0x103a4 <posix_tests+0x170>
        }
        if(!args)
   103dc:	c1 14       	cp	r12, r1
   103de:	d1 04       	cpc	r13, r1
   103e0:	09 f0       	breq	.+2      	; 0x103e4 <posix_tests+0x1b0>
        {
            ls("",1);
   103e2:	70 c0       	rjmp	.+224    	; 0x104c4 <posix_tests+0x290>
   103e4:	61 e0       	ldi	r22, 0x01	; 1
   103e6:	70 e0       	ldi	r23, 0x00	; 0
   103e8:	8c e0       	ldi	r24, 0x0C	; 12
   103ea:	97 e1       	ldi	r25, 0x17	; 23
   103ec:	0f de       	rcall	.-994    	; 0x1000c <ls>
        mkfs(argv[ind++]);
        return(1);
    }
#endif

    if (MATCHARGS(ptr,"mkdir", (ind + 1), argc))
   103ee:	6a c0       	rjmp	.+212    	; 0x104c4 <posix_tests+0x290>
   103f0:	98 01       	movw	r18, r16
   103f2:	a7 01       	movw	r20, r14
   103f4:	68 ea       	ldi	r22, 0xA8	; 168
   103f6:	7b e0       	ldi	r23, 0x0B	; 11
   103f8:	c6 01       	movw	r24, r12
   103fa:	0e 94 bd 31 	call	0x637a	; 0x637a <MATCHARGS>
   103fe:	89 2b       	or	r24, r25
    {
        int mode = 0777;
        if((ind+2) <= argc)
   10400:	71 f1       	breq	.+92     	; 0x1045e <posix_tests+0x22a>
   10402:	e0 16       	cp	r14, r16
   10404:	f1 06       	cpc	r15, r17
        {
            mode = strtol(argv[ind+1],NULL,8);
   10406:	7c f4       	brge	.+30     	; 0x10426 <posix_tests+0x1f2>
   10408:	ee 0c       	add	r14, r14
   1040a:	ff 1c       	adc	r15, r15
   1040c:	f2 01       	movw	r30, r4
   1040e:	ee 0d       	add	r30, r14
   10410:	ff 1d       	adc	r31, r15
   10412:	48 e0       	ldi	r20, 0x08	; 8
   10414:	50 e0       	ldi	r21, 0x00	; 0
   10416:	60 e0       	ldi	r22, 0x00	; 0
   10418:	70 e0       	ldi	r23, 0x00	; 0
   1041a:	80 81       	ld	r24, Z
   1041c:	91 81       	ldd	r25, Z+1	; 0x01
   1041e:	0e 94 e0 45 	call	0x8bc0	; 0x8bc0 <strtol>
   10422:	ab 01       	movw	r20, r22
    }
#endif

    if (MATCHARGS(ptr,"mkdir", (ind + 1), argc))
    {
        int mode = 0777;
   10424:	02 c0       	rjmp	.+4      	; 0x1042a <posix_tests+0x1f6>
   10426:	4f ef       	ldi	r20, 0xFF	; 255
        if((ind+2) <= argc)
        {
            mode = strtol(argv[ind+1],NULL,8);
        }
        if ( mkdir(argv[ind],mode) != 0 )
   10428:	51 e0       	ldi	r21, 0x01	; 1
   1042a:	73 01       	movw	r14, r6
   1042c:	ee 0c       	add	r14, r14
   1042e:	ff 1c       	adc	r15, r15
   10430:	e4 0c       	add	r14, r4
   10432:	f5 1c       	adc	r15, r5
   10434:	05 2e       	mov	r0, r21
   10436:	00 0c       	add	r0, r0
   10438:	66 0b       	sbc	r22, r22
   1043a:	77 0b       	sbc	r23, r23
   1043c:	f7 01       	movw	r30, r14
   1043e:	80 81       	ld	r24, Z
   10440:	91 81       	ldd	r25, Z+1	; 0x01
   10442:	0e 94 c8 76 	call	0xed90	; 0xed90 <mkdir>
   10446:	89 2b       	or	r24, r25
		{
			printf("mkdir %s failed\n", argv[ind]);
   10448:	e9 f1       	breq	.+122    	; 0x104c4 <posix_tests+0x290>
   1044a:	f7 01       	movw	r30, r14
   1044c:	80 81       	ld	r24, Z
   1044e:	91 81       	ldd	r25, Z+1	; 0x01
   10450:	ed b7       	in	r30, 0x3d	; 61
   10452:	fe b7       	in	r31, 0x3e	; 62
   10454:	95 83       	std	Z+5, r25	; 0x05
   10456:	84 83       	std	Z+4, r24	; 0x04
   10458:	82 ef       	ldi	r24, 0xF2	; 242
   1045a:	9c e0       	ldi	r25, 0x0C	; 12
			return(0);
		}
        return(1);
    }

    if (MATCHARGS(ptr,"page", (ind + 1), argc))
   1045c:	b4 c0       	rjmp	.+360    	; 0x105c6 <posix_tests+0x392>
   1045e:	98 01       	movw	r18, r16
   10460:	a7 01       	movw	r20, r14
   10462:	6e ea       	ldi	r22, 0xAE	; 174
   10464:	7b e0       	ldi	r23, 0x0B	; 11
   10466:	c6 01       	movw	r24, r12
   10468:	0e 94 bd 31 	call	0x637a	; 0x637a <MATCHARGS>
   1046c:	89 2b       	or	r24, r25
    {
        setpage(atoi(argv[ind]));
   1046e:	71 f0       	breq	.+28     	; 0x1048c <posix_tests+0x258>
   10470:	66 0c       	add	r6, r6
   10472:	77 1c       	adc	r7, r7
   10474:	f2 01       	movw	r30, r4
   10476:	e6 0d       	add	r30, r6
   10478:	f7 1d       	adc	r31, r7
   1047a:	80 81       	ld	r24, Z
   1047c:	91 81       	ldd	r25, Z+1	; 0x01
   1047e:	0e 94 3e 46 	call	0x8c7c	; 0x8c7c <atoi>
/// @retrun void
static int _pagesize = 25;
MEMSPACE
int setpage(int count)
{
    _pagesize = count;
   10482:	90 93 8e 01 	sts	0x018E, r25	; 0x80018e <_pagesize+0x1>
   10486:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <_pagesize>
    {
        setpage(atoi(argv[ind]));
        return(1);
    }

    if (MATCHARGS(ptr,"pwd", (ind + 0), argc))
   1048a:	1c c0       	rjmp	.+56     	; 0x104c4 <posix_tests+0x290>
   1048c:	98 01       	movw	r18, r16
   1048e:	a3 01       	movw	r20, r6
   10490:	63 eb       	ldi	r22, 0xB3	; 179
   10492:	7b e0       	ldi	r23, 0x0B	; 11
   10494:	c6 01       	movw	r24, r12
   10496:	0e 94 bd 31 	call	0x637a	; 0x637a <MATCHARGS>
   1049a:	4c 01       	movw	r8, r24
   1049c:	89 2b       	or	r24, r25
    {
        char path[256];
        printf("%s\n", getcwd(path, sizeof(path)-2));
   1049e:	b1 f0       	breq	.+44     	; 0x104cc <posix_tests+0x298>
   104a0:	6e ef       	ldi	r22, 0xFE	; 254
   104a2:	70 e0       	ldi	r23, 0x00	; 0
   104a4:	ce 01       	movw	r24, r28
   104a6:	08 96       	adiw	r24, 0x08	; 8
   104a8:	0e 94 a3 76 	call	0xed46	; 0xed46 <getcwd>
   104ac:	ed b7       	in	r30, 0x3d	; 61
   104ae:	fe b7       	in	r31, 0x3e	; 62
   104b0:	95 83       	std	Z+5, r25	; 0x05
   104b2:	84 83       	std	Z+4, r24	; 0x04
   104b4:	8e ee       	ldi	r24, 0xEE	; 238
   104b6:	9c e0       	ldi	r25, 0x0C	; 12
   104b8:	a0 e0       	ldi	r26, 0x00	; 0
   104ba:	81 83       	std	Z+1, r24	; 0x01
   104bc:	92 83       	std	Z+2, r25	; 0x02
   104be:	a3 83       	std	Z+3, r26	; 0x03
   104c0:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
        return(1);
   104c4:	88 24       	eor	r8, r8
   104c6:	83 94       	inc	r8
   104c8:	91 2c       	mov	r9, r1
    }

    if (MATCHARGS(ptr,"rename", (ind + 2), argc))
   104ca:	83 c0       	rjmp	.+262    	; 0x105d2 <posix_tests+0x39e>
   104cc:	98 01       	movw	r18, r16
   104ce:	a5 01       	movw	r20, r10
   104d0:	67 eb       	ldi	r22, 0xB7	; 183
   104d2:	7b e0       	ldi	r23, 0x0B	; 11
   104d4:	c6 01       	movw	r24, r12
   104d6:	0e 94 bd 31 	call	0x637a	; 0x637a <MATCHARGS>
   104da:	89 2b       	or	r24, r25
    {
        if( rename(argv[ind],argv[ind+1]) != 0)
   104dc:	61 f1       	breq	.+88     	; 0x10536 <posix_tests+0x302>
   104de:	66 0c       	add	r6, r6
   104e0:	77 1c       	adc	r7, r7
   104e2:	82 01       	movw	r16, r4
   104e4:	06 0d       	add	r16, r6
   104e6:	17 1d       	adc	r17, r7
   104e8:	f2 e0       	ldi	r31, 0x02	; 2
   104ea:	6f 0e       	add	r6, r31
   104ec:	71 1c       	adc	r7, r1
   104ee:	72 01       	movw	r14, r4
   104f0:	e6 0c       	add	r14, r6
   104f2:	f7 1c       	adc	r15, r7
   104f4:	f7 01       	movw	r30, r14
   104f6:	60 81       	ld	r22, Z
   104f8:	71 81       	ldd	r23, Z+1	; 0x01
   104fa:	f8 01       	movw	r30, r16
   104fc:	80 81       	ld	r24, Z
   104fe:	91 81       	ldd	r25, Z+1	; 0x01
   10500:	0e 94 f6 76 	call	0xedec	; 0xedec <rename>
   10504:	89 2b       	or	r24, r25
		{
			printf("rename %s to %s\n", argv[ind], argv[ind+1]);
   10506:	f1 f2       	breq	.-68     	; 0x104c4 <posix_tests+0x290>
   10508:	f7 01       	movw	r30, r14
   1050a:	80 81       	ld	r24, Z
   1050c:	91 81       	ldd	r25, Z+1	; 0x01
   1050e:	ed b7       	in	r30, 0x3d	; 61
   10510:	fe b7       	in	r31, 0x3e	; 62
   10512:	97 83       	std	Z+7, r25	; 0x07
   10514:	86 83       	std	Z+6, r24	; 0x06
   10516:	f8 01       	movw	r30, r16
   10518:	80 81       	ld	r24, Z
   1051a:	91 81       	ldd	r25, Z+1	; 0x01
   1051c:	ed b7       	in	r30, 0x3d	; 61
   1051e:	fe b7       	in	r31, 0x3e	; 62
   10520:	95 83       	std	Z+5, r25	; 0x05
   10522:	84 83       	std	Z+4, r24	; 0x04
   10524:	8d ed       	ldi	r24, 0xDD	; 221
   10526:	9c e0       	ldi	r25, 0x0C	; 12
   10528:	a0 e0       	ldi	r26, 0x00	; 0
   1052a:	81 83       	std	Z+1, r24	; 0x01
   1052c:	92 83       	std	Z+2, r25	; 0x02
   1052e:	a3 83       	std	Z+3, r26	; 0x03
   10530:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
			return(0);
		}
        return(1);
    }

    if (MATCHARGS(ptr,"rm", (ind + 1), argc))
   10534:	4e c0       	rjmp	.+156    	; 0x105d2 <posix_tests+0x39e>
   10536:	98 01       	movw	r18, r16
   10538:	a7 01       	movw	r20, r14
   1053a:	6e eb       	ldi	r22, 0xBE	; 190
   1053c:	7b e0       	ldi	r23, 0x0B	; 11
   1053e:	c6 01       	movw	r24, r12
   10540:	0e 94 bd 31 	call	0x637a	; 0x637a <MATCHARGS>
   10544:	4c 01       	movw	r8, r24
   10546:	89 2b       	or	r24, r25
    {
        if ( unlink(argv[ind]) != 0)
   10548:	f9 f0       	breq	.+62     	; 0x10588 <posix_tests+0x354>
   1054a:	73 01       	movw	r14, r6
   1054c:	ee 0c       	add	r14, r14
   1054e:	ff 1c       	adc	r15, r15
   10550:	e4 0c       	add	r14, r4
   10552:	f5 1c       	adc	r15, r5
   10554:	f7 01       	movw	r30, r14
   10556:	80 81       	ld	r24, Z
   10558:	91 81       	ldd	r25, Z+1	; 0x01
   1055a:	0e 94 15 77 	call	0xee2a	; 0xee2a <unlink>
   1055e:	89 2b       	or	r24, r25
   10560:	09 f4       	brne	.+2      	; 0x10564 <posix_tests+0x330>
		{
			printf("rm %s failed\n", argv[ind]);
   10562:	b0 cf       	rjmp	.-160    	; 0x104c4 <posix_tests+0x290>
   10564:	f7 01       	movw	r30, r14
   10566:	80 81       	ld	r24, Z
   10568:	91 81       	ldd	r25, Z+1	; 0x01
   1056a:	ed b7       	in	r30, 0x3d	; 61
   1056c:	fe b7       	in	r31, 0x3e	; 62
   1056e:	95 83       	std	Z+5, r25	; 0x05
   10570:	84 83       	std	Z+4, r24	; 0x04
   10572:	8f ec       	ldi	r24, 0xCF	; 207
   10574:	9c e0       	ldi	r25, 0x0C	; 12
   10576:	a0 e0       	ldi	r26, 0x00	; 0
   10578:	81 83       	std	Z+1, r24	; 0x01
   1057a:	92 83       	std	Z+2, r25	; 0x02
   1057c:	a3 83       	std	Z+3, r26	; 0x03
   1057e:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
			return(0);
   10582:	81 2c       	mov	r8, r1
   10584:	91 2c       	mov	r9, r1
        dump_stat(&p);
        return(1);
    }
#endif

    if (MATCHARGS(ptr,"rmdir", (ind + 1), argc))
   10586:	25 c0       	rjmp	.+74     	; 0x105d2 <posix_tests+0x39e>
   10588:	98 01       	movw	r18, r16
   1058a:	a7 01       	movw	r20, r14
   1058c:	61 ec       	ldi	r22, 0xC1	; 193
   1058e:	7b e0       	ldi	r23, 0x0B	; 11
   10590:	c6 01       	movw	r24, r12
   10592:	0e 94 bd 31 	call	0x637a	; 0x637a <MATCHARGS>
   10596:	89 2b       	or	r24, r25
    {
        if ( rmdir(argv[ind]) != 0)
   10598:	a1 f3       	breq	.-24     	; 0x10582 <posix_tests+0x34e>
   1059a:	73 01       	movw	r14, r6
   1059c:	ee 0c       	add	r14, r14
   1059e:	ff 1c       	adc	r15, r15
   105a0:	e4 0c       	add	r14, r4
   105a2:	f5 1c       	adc	r15, r5
   105a4:	f7 01       	movw	r30, r14
   105a6:	80 81       	ld	r24, Z
   105a8:	91 81       	ldd	r25, Z+1	; 0x01
   105aa:	0e 94 34 77 	call	0xee68	; 0xee68 <rmdir>
   105ae:	89 2b       	or	r24, r25
   105b0:	09 f4       	brne	.+2      	; 0x105b4 <posix_tests+0x380>
		{
			printf("rmdir %s failed\n", argv[ind]);
   105b2:	88 cf       	rjmp	.-240    	; 0x104c4 <posix_tests+0x290>
   105b4:	f7 01       	movw	r30, r14
   105b6:	80 81       	ld	r24, Z
   105b8:	91 81       	ldd	r25, Z+1	; 0x01
   105ba:	ed b7       	in	r30, 0x3d	; 61
   105bc:	fe b7       	in	r31, 0x3e	; 62
   105be:	95 83       	std	Z+5, r25	; 0x05
   105c0:	84 83       	std	Z+4, r24	; 0x04
   105c2:	8e eb       	ldi	r24, 0xBE	; 190
   105c4:	9c e0       	ldi	r25, 0x0C	; 12
   105c6:	a0 e0       	ldi	r26, 0x00	; 0
   105c8:	81 83       	std	Z+1, r24	; 0x01
   105ca:	92 83       	std	Z+2, r25	; 0x02
   105cc:	a3 83       	std	Z+3, r26	; 0x03
   105ce:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
        return(1);
    }
#endif

    return(0);
}
   105d2:	c4 01       	movw	r24, r8
   105d4:	c9 5f       	subi	r28, 0xF9	; 249
   105d6:	de 4f       	sbci	r29, 0xFE	; 254
   105d8:	e0 e1       	ldi	r30, 0x10	; 16
   105da:	0c 94 fc df 	jmp	0x1bff8	; 0x1bff8 <__epilogue_restores__+0x4>

000105de <gpib_timer_init>:
///
/// - Has some platform dependent code.
/// @return  void

void gpib_timer_init()
{
   105de:	00 d0       	rcall	.+0      	; 0x105e0 <gpib_timer_init+0x2>
   105e0:	1f 92       	push	r1
    if(set_timers(gpib_timer_task,1) == -1)       // Install Clock Task
   105e2:	61 e0       	ldi	r22, 0x01	; 1
   105e4:	70 e0       	ldi	r23, 0x00	; 0
   105e6:	8b ea       	ldi	r24, 0xAB	; 171
   105e8:	94 e8       	ldi	r25, 0x84	; 132
   105ea:	0e 94 0a 34 	call	0x6814	; 0x6814 <set_timers>
   105ee:	01 96       	adiw	r24, 0x01	; 1
   105f0:	51 f4       	brne	.+20     	; 0x10606 <gpib_timer_init+0x28>
        printf("GPIB Clock task init failed\n");
   105f2:	80 e4       	ldi	r24, 0x40	; 64
   105f4:	9e e0       	ldi	r25, 0x0E	; 14
   105f6:	a0 e0       	ldi	r26, 0x00	; 0
   105f8:	ed b7       	in	r30, 0x3d	; 61
   105fa:	fe b7       	in	r31, 0x3e	; 62
   105fc:	81 83       	std	Z+1, r24	; 0x01
   105fe:	92 83       	std	Z+2, r25	; 0x02
   10600:	a3 83       	std	Z+3, r26	; 0x03
   10602:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>

    gpib_timer_reset();
}
   10606:	95 d1       	rcall	.+810    	; 0x10932 <gpib_timer_reset>
   10608:	0f 90       	pop	r0
   1060a:	0f 90       	pop	r0
   1060c:	0f 90       	pop	r0
   1060e:	08 95       	ret

00010610 <reverse_8bits>:
/// - GPIB D1 controls last device.
///
/// @param [in] mask: bit mask to reverse.
/// @return  reversed bits
uint8_t reverse_8bits(uint8_t mask)
{
   10610:	28 2f       	mov	r18, r24
   10612:	98 e0       	ldi	r25, 0x08	; 8
    int8_t i;
    uint8_t rmask = 0;
   10614:	80 e0       	ldi	r24, 0x00	; 0
    for(i=0;i<8;++i)
    {
        rmask <<= 1;
   10616:	88 0f       	add	r24, r24
        if(mask & 1)
   10618:	20 fd       	sbrc	r18, 0
            rmask |= 1;
   1061a:	81 60       	ori	r24, 0x01	; 1
        mask >>= 1;
   1061c:	26 95       	lsr	r18
   1061e:	91 50       	subi	r25, 0x01	; 1
/// @return  reversed bits
uint8_t reverse_8bits(uint8_t mask)
{
    int8_t i;
    uint8_t rmask = 0;
    for(i=0;i<8;++i)
   10620:	d1 f7       	brne	.-12     	; 0x10616 <reverse_8bits+0x6>
        if(mask & 1)
            rmask |= 1;
        mask >>= 1;
    }
    return(rmask & 0xff);
}
   10622:	08 95       	ret

00010624 <ppr_set>:
   10624:	f5 df       	rcall	.-22     	; 0x10610 <reverse_8bits>
   10626:	80 93 29 19 	sts	0x1929, r24	; 0x801929 <_ppr_reg>
   1062a:	0e 94 0c 2b 	call	0x5618	; 0x5618 <SPI0_TXRX_Byte>
   1062e:	2a 9a       	sbi	0x05, 2	; 5
   10630:	22 9a       	sbi	0x04, 2	; 4
   10632:	2a 98       	cbi	0x05, 2	; 5
   10634:	22 9a       	sbi	0x04, 2	; 4
   10636:	08 95       	ret

00010638 <ppr_reg>:
   10638:	80 91 29 19 	lds	r24, 0x1929	; 0x801929 <_ppr_reg>
   1063c:	e9 cf       	rjmp	.-46     	; 0x10610 <reverse_8bits>
   1063e:	08 95       	ret

00010640 <ppr_init>:
   10640:	00 d0       	rcall	.+0      	; 0x10642 <ppr_init+0x2>
   10642:	1f 92       	push	r1
   10644:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   10648:	81 ff       	sbrs	r24, 1
   1064a:	0a c0       	rjmp	.+20     	; 0x10660 <ppr_init+0x20>
   1064c:	8d e2       	ldi	r24, 0x2D	; 45
   1064e:	9e e0       	ldi	r25, 0x0E	; 14
   10650:	a0 e0       	ldi	r26, 0x00	; 0
   10652:	ed b7       	in	r30, 0x3d	; 61
   10654:	fe b7       	in	r31, 0x3e	; 62
   10656:	81 83       	std	Z+1, r24	; 0x01
   10658:	92 83       	std	Z+2, r25	; 0x02
   1065a:	a3 83       	std	Z+3, r26	; 0x03
   1065c:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   10660:	80 e0       	ldi	r24, 0x00	; 0
   10662:	e0 df       	rcall	.-64     	; 0x10624 <ppr_set>
   10664:	0f 90       	pop	r0
   10666:	0f 90       	pop	r0
   10668:	0f 90       	pop	r0
   1066a:	08 95       	ret

0001066c <ppr_bit_set>:
   1066c:	21 e0       	ldi	r18, 0x01	; 1
   1066e:	30 e0       	ldi	r19, 0x00	; 0
   10670:	01 c0       	rjmp	.+2      	; 0x10674 <ppr_bit_set+0x8>
   10672:	22 0f       	add	r18, r18
   10674:	8a 95       	dec	r24
   10676:	ea f7       	brpl	.-6      	; 0x10672 <ppr_bit_set+0x6>
   10678:	80 91 29 19 	lds	r24, 0x1929	; 0x801929 <_ppr_reg>
   1067c:	82 2b       	or	r24, r18
   1067e:	80 93 29 19 	sts	0x1929, r24	; 0x801929 <_ppr_reg>
   10682:	d0 cf       	rjmp	.-96     	; 0x10624 <ppr_set>
   10684:	08 95       	ret

00010686 <ppr_bit_clr>:
   10686:	21 e0       	ldi	r18, 0x01	; 1
   10688:	30 e0       	ldi	r19, 0x00	; 0
   1068a:	01 c0       	rjmp	.+2      	; 0x1068e <ppr_bit_clr+0x8>
   1068c:	22 0f       	add	r18, r18
   1068e:	8a 95       	dec	r24
   10690:	ea f7       	brpl	.-6      	; 0x1068c <ppr_bit_clr+0x6>
   10692:	20 95       	com	r18
   10694:	80 91 29 19 	lds	r24, 0x1929	; 0x801929 <_ppr_reg>
   10698:	82 23       	and	r24, r18
   1069a:	80 93 29 19 	sts	0x1929, r24	; 0x801929 <_ppr_reg>
   1069e:	c2 cf       	rjmp	.-124    	; 0x10624 <ppr_set>
   106a0:	08 95       	ret

000106a2 <dbf_open>:
   106a2:	0f 93       	push	r16
   106a4:	1f 93       	push	r17
   106a6:	cf 93       	push	r28
   106a8:	df 93       	push	r29
   106aa:	00 d0       	rcall	.+0      	; 0x106ac <dbf_open+0xa>
   106ac:	00 d0       	rcall	.+0      	; 0x106ae <dbf_open+0xc>
   106ae:	1f 92       	push	r1
   106b0:	8b 01       	movw	r16, r22
   106b2:	0e 94 5d 59 	call	0xb2ba	; 0xb2ba <f_open>
   106b6:	ec 01       	movw	r28, r24
   106b8:	89 2b       	or	r24, r25
   106ba:	79 f0       	breq	.+30     	; 0x106da <dbf_open+0x38>
   106bc:	ed b7       	in	r30, 0x3d	; 61
   106be:	fe b7       	in	r31, 0x3e	; 62
   106c0:	15 83       	std	Z+5, r17	; 0x05
   106c2:	04 83       	std	Z+4, r16	; 0x04
   106c4:	8c e1       	ldi	r24, 0x1C	; 28
   106c6:	9e e0       	ldi	r25, 0x0E	; 14
   106c8:	a0 e0       	ldi	r26, 0x00	; 0
   106ca:	81 83       	std	Z+1, r24	; 0x01
   106cc:	92 83       	std	Z+2, r25	; 0x02
   106ce:	a3 83       	std	Z+3, r26	; 0x03
   106d0:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   106d4:	ce 01       	movw	r24, r28
   106d6:	0e 94 ca 6f 	call	0xdf94	; 0xdf94 <put_rc>
   106da:	ce 01       	movw	r24, r28
   106dc:	cd b7       	in	r28, 0x3d	; 61
   106de:	de b7       	in	r29, 0x3e	; 62
   106e0:	25 96       	adiw	r28, 0x05	; 5
   106e2:	e4 e0       	ldi	r30, 0x04	; 4
   106e4:	0c 94 08 e0 	jmp	0x1c010	; 0x1c010 <__epilogue_restores__+0x1c>

000106e8 <dbf_read>:
   106e8:	cf 93       	push	r28
   106ea:	df 93       	push	r29
   106ec:	00 d0       	rcall	.+0      	; 0x106ee <dbf_read+0x6>
   106ee:	1f 92       	push	r1
   106f0:	0e 94 15 5b 	call	0xb62a	; 0xb62a <f_read>
   106f4:	ec 01       	movw	r28, r24
   106f6:	89 2b       	or	r24, r25
   106f8:	69 f0       	breq	.+26     	; 0x10714 <dbf_read+0x2c>
   106fa:	8f e0       	ldi	r24, 0x0F	; 15
   106fc:	9e e0       	ldi	r25, 0x0E	; 14
   106fe:	a0 e0       	ldi	r26, 0x00	; 0
   10700:	ed b7       	in	r30, 0x3d	; 61
   10702:	fe b7       	in	r31, 0x3e	; 62
   10704:	81 83       	std	Z+1, r24	; 0x01
   10706:	92 83       	std	Z+2, r25	; 0x02
   10708:	a3 83       	std	Z+3, r26	; 0x03
   1070a:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   1070e:	ce 01       	movw	r24, r28
   10710:	0e 94 ca 6f 	call	0xdf94	; 0xdf94 <put_rc>
   10714:	ce 01       	movw	r24, r28
   10716:	cd b7       	in	r28, 0x3d	; 61
   10718:	de b7       	in	r29, 0x3e	; 62
   1071a:	23 96       	adiw	r28, 0x03	; 3
   1071c:	e2 e0       	ldi	r30, 0x02	; 2
   1071e:	0c 94 0a e0 	jmp	0x1c014	; 0x1c014 <__epilogue_restores__+0x20>

00010722 <dbf_write>:
   10722:	cf 93       	push	r28
   10724:	df 93       	push	r29
   10726:	00 d0       	rcall	.+0      	; 0x10728 <dbf_write+0x6>
   10728:	1f 92       	push	r1
   1072a:	0e 94 60 5c 	call	0xb8c0	; 0xb8c0 <f_write>
   1072e:	ec 01       	movw	r28, r24
   10730:	89 2b       	or	r24, r25
   10732:	69 f0       	breq	.+26     	; 0x1074e <dbf_write+0x2c>
   10734:	81 e0       	ldi	r24, 0x01	; 1
   10736:	9e e0       	ldi	r25, 0x0E	; 14
   10738:	a0 e0       	ldi	r26, 0x00	; 0
   1073a:	ed b7       	in	r30, 0x3d	; 61
   1073c:	fe b7       	in	r31, 0x3e	; 62
   1073e:	81 83       	std	Z+1, r24	; 0x01
   10740:	92 83       	std	Z+2, r25	; 0x02
   10742:	a3 83       	std	Z+3, r26	; 0x03
   10744:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   10748:	ce 01       	movw	r24, r28
   1074a:	0e 94 ca 6f 	call	0xdf94	; 0xdf94 <put_rc>
   1074e:	ce 01       	movw	r24, r28
   10750:	cd b7       	in	r28, 0x3d	; 61
   10752:	de b7       	in	r29, 0x3e	; 62
   10754:	23 96       	adiw	r28, 0x03	; 3
   10756:	e2 e0       	ldi	r30, 0x02	; 2
   10758:	0c 94 0a e0 	jmp	0x1c014	; 0x1c014 <__epilogue_restores__+0x20>

0001075c <dbf_lseek>:
   1075c:	cf 93       	push	r28
   1075e:	df 93       	push	r29
   10760:	00 d0       	rcall	.+0      	; 0x10762 <dbf_lseek+0x6>
   10762:	1f 92       	push	r1
   10764:	0e 94 21 60 	call	0xc042	; 0xc042 <f_lseek>
   10768:	ec 01       	movw	r28, r24
   1076a:	89 2b       	or	r24, r25
   1076c:	69 f0       	breq	.+26     	; 0x10788 <dbf_lseek+0x2c>
   1076e:	84 ef       	ldi	r24, 0xF4	; 244
   10770:	9d e0       	ldi	r25, 0x0D	; 13
   10772:	a0 e0       	ldi	r26, 0x00	; 0
   10774:	ed b7       	in	r30, 0x3d	; 61
   10776:	fe b7       	in	r31, 0x3e	; 62
   10778:	81 83       	std	Z+1, r24	; 0x01
   1077a:	92 83       	std	Z+2, r25	; 0x02
   1077c:	a3 83       	std	Z+3, r26	; 0x03
   1077e:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   10782:	ce 01       	movw	r24, r28
   10784:	0e 94 ca 6f 	call	0xdf94	; 0xdf94 <put_rc>
   10788:	ce 01       	movw	r24, r28
   1078a:	cd b7       	in	r28, 0x3d	; 61
   1078c:	de b7       	in	r29, 0x3e	; 62
   1078e:	23 96       	adiw	r28, 0x03	; 3
   10790:	e2 e0       	ldi	r30, 0x02	; 2
   10792:	0c 94 0a e0 	jmp	0x1c014	; 0x1c014 <__epilogue_restores__+0x20>

00010796 <dbf_close>:
   10796:	cf 93       	push	r28
   10798:	df 93       	push	r29
   1079a:	00 d0       	rcall	.+0      	; 0x1079c <dbf_close+0x6>
   1079c:	1f 92       	push	r1
   1079e:	0e 94 77 5e 	call	0xbcee	; 0xbcee <f_close>
   107a2:	ec 01       	movw	r28, r24
   107a4:	89 2b       	or	r24, r25
   107a6:	69 f0       	breq	.+26     	; 0x107c2 <dbf_close+0x2c>
   107a8:	86 ee       	ldi	r24, 0xE6	; 230
   107aa:	9d e0       	ldi	r25, 0x0D	; 13
   107ac:	a0 e0       	ldi	r26, 0x00	; 0
   107ae:	ed b7       	in	r30, 0x3d	; 61
   107b0:	fe b7       	in	r31, 0x3e	; 62
   107b2:	81 83       	std	Z+1, r24	; 0x01
   107b4:	92 83       	std	Z+2, r25	; 0x02
   107b6:	a3 83       	std	Z+3, r26	; 0x03
   107b8:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   107bc:	ce 01       	movw	r24, r28
   107be:	0e 94 ca 6f 	call	0xdf94	; 0xdf94 <put_rc>
   107c2:	ce 01       	movw	r24, r28
   107c4:	cd b7       	in	r28, 0x3d	; 61
   107c6:	de b7       	in	r29, 0x3e	; 62
   107c8:	23 96       	adiw	r28, 0x03	; 3
   107ca:	e2 e0       	ldi	r30, 0x02	; 2
   107cc:	0c 94 0a e0 	jmp	0x1c014	; 0x1c014 <__epilogue_restores__+0x20>

000107d0 <dbf_open_read>:
   107d0:	a6 e2       	ldi	r26, 0x26	; 38
   107d2:	b2 e0       	ldi	r27, 0x02	; 2
   107d4:	ee ee       	ldi	r30, 0xEE	; 238
   107d6:	f3 e8       	ldi	r31, 0x83	; 131
   107d8:	0c 94 e4 df 	jmp	0x1bfc8	; 0x1bfc8 <__prologue_saves__+0xc>
   107dc:	4a 01       	movw	r8, r20
   107de:	5b 01       	movw	r10, r22
   107e0:	69 01       	movw	r12, r18
   107e2:	cb 5d       	subi	r28, 0xDB	; 219
   107e4:	dd 4f       	sbci	r29, 0xFD	; 253
   107e6:	19 82       	std	Y+1, r1	; 0x01
   107e8:	18 82       	st	Y, r1
   107ea:	c5 52       	subi	r28, 0x25	; 37
   107ec:	d2 40       	sbci	r29, 0x02	; 2
   107ee:	43 e0       	ldi	r20, 0x03	; 3
   107f0:	bc 01       	movw	r22, r24
   107f2:	ce 01       	movw	r24, r28
   107f4:	01 96       	adiw	r24, 0x01	; 1
   107f6:	55 df       	rcall	.-342    	; 0x106a2 <dbf_open>
   107f8:	89 2b       	or	r24, r25
   107fa:	19 f0       	breq	.+6      	; 0x10802 <dbf_open_read+0x32>
   107fc:	81 e1       	ldi	r24, 0x11	; 17
   107fe:	90 e0       	ldi	r25, 0x00	; 0
   10800:	2f c0       	rjmp	.+94     	; 0x10860 <dbf_open_read+0x90>
   10802:	b5 01       	movw	r22, r10
   10804:	a4 01       	movw	r20, r8
   10806:	ce 01       	movw	r24, r28
   10808:	01 96       	adiw	r24, 0x01	; 1
   1080a:	a8 df       	rcall	.-176    	; 0x1075c <dbf_lseek>
   1080c:	89 2b       	or	r24, r25
   1080e:	59 f0       	breq	.+22     	; 0x10826 <dbf_open_read+0x56>
   10810:	85 e0       	ldi	r24, 0x05	; 5
   10812:	90 e0       	ldi	r25, 0x00	; 0
   10814:	f7 01       	movw	r30, r14
   10816:	91 83       	std	Z+1, r25	; 0x01
   10818:	80 83       	st	Z, r24
   1081a:	ce 01       	movw	r24, r28
   1081c:	01 96       	adiw	r24, 0x01	; 1
   1081e:	bb df       	rcall	.-138    	; 0x10796 <dbf_close>
   10820:	8f ef       	ldi	r24, 0xFF	; 255
   10822:	9f ef       	ldi	r25, 0xFF	; 255
   10824:	27 c0       	rjmp	.+78     	; 0x10874 <dbf_open_read+0xa4>
   10826:	9e 01       	movw	r18, r28
   10828:	2b 5d       	subi	r18, 0xDB	; 219
   1082a:	3d 4f       	sbci	r19, 0xFD	; 253
   1082c:	a8 01       	movw	r20, r16
   1082e:	b6 01       	movw	r22, r12
   10830:	ce 01       	movw	r24, r28
   10832:	01 96       	adiw	r24, 0x01	; 1
   10834:	59 df       	rcall	.-334    	; 0x106e8 <dbf_read>
   10836:	89 2b       	or	r24, r25
   10838:	49 f4       	brne	.+18     	; 0x1084c <dbf_open_read+0x7c>
   1083a:	cb 5d       	subi	r28, 0xDB	; 219
   1083c:	dd 4f       	sbci	r29, 0xFD	; 253
   1083e:	88 81       	ld	r24, Y
   10840:	99 81       	ldd	r25, Y+1	; 0x01
   10842:	c5 52       	subi	r28, 0x25	; 37
   10844:	d2 40       	sbci	r29, 0x02	; 2
   10846:	08 17       	cp	r16, r24
   10848:	19 07       	cpc	r17, r25
   1084a:	19 f0       	breq	.+6      	; 0x10852 <dbf_open_read+0x82>
   1084c:	81 e0       	ldi	r24, 0x01	; 1
   1084e:	90 e0       	ldi	r25, 0x00	; 0
   10850:	e1 cf       	rjmp	.-62     	; 0x10814 <dbf_open_read+0x44>
   10852:	ce 01       	movw	r24, r28
   10854:	01 96       	adiw	r24, 0x01	; 1
   10856:	9f df       	rcall	.-194    	; 0x10796 <dbf_close>
   10858:	89 2b       	or	r24, r25
   1085a:	31 f0       	breq	.+12     	; 0x10868 <dbf_open_read+0x98>
   1085c:	80 e1       	ldi	r24, 0x10	; 16
   1085e:	90 e0       	ldi	r25, 0x00	; 0
   10860:	f7 01       	movw	r30, r14
   10862:	91 83       	std	Z+1, r25	; 0x01
   10864:	80 83       	st	Z, r24
   10866:	dc cf       	rjmp	.-72     	; 0x10820 <dbf_open_read+0x50>
   10868:	cb 5d       	subi	r28, 0xDB	; 219
   1086a:	dd 4f       	sbci	r29, 0xFD	; 253
   1086c:	88 81       	ld	r24, Y
   1086e:	99 81       	ldd	r25, Y+1	; 0x01
   10870:	c5 52       	subi	r28, 0x25	; 37
   10872:	d2 40       	sbci	r29, 0x02	; 2
   10874:	ca 5d       	subi	r28, 0xDA	; 218
   10876:	dd 4f       	sbci	r29, 0xFD	; 253
   10878:	ec e0       	ldi	r30, 0x0C	; 12
   1087a:	0c 94 00 e0 	jmp	0x1c000	; 0x1c000 <__epilogue_restores__+0xc>

0001087e <dbf_open_write>:
   1087e:	a6 e2       	ldi	r26, 0x26	; 38
   10880:	b2 e0       	ldi	r27, 0x02	; 2
   10882:	e5 e4       	ldi	r30, 0x45	; 69
   10884:	f4 e8       	ldi	r31, 0x84	; 132
   10886:	0c 94 e4 df 	jmp	0x1bfc8	; 0x1bfc8 <__prologue_saves__+0xc>
   1088a:	4a 01       	movw	r8, r20
   1088c:	5b 01       	movw	r10, r22
   1088e:	69 01       	movw	r12, r18
   10890:	cb 5d       	subi	r28, 0xDB	; 219
   10892:	dd 4f       	sbci	r29, 0xFD	; 253
   10894:	19 82       	std	Y+1, r1	; 0x01
   10896:	18 82       	st	Y, r1
   10898:	c5 52       	subi	r28, 0x25	; 37
   1089a:	d2 40       	sbci	r29, 0x02	; 2
   1089c:	43 e0       	ldi	r20, 0x03	; 3
   1089e:	bc 01       	movw	r22, r24
   108a0:	ce 01       	movw	r24, r28
   108a2:	01 96       	adiw	r24, 0x01	; 1
   108a4:	fe de       	rcall	.-516    	; 0x106a2 <dbf_open>
   108a6:	89 2b       	or	r24, r25
   108a8:	19 f0       	breq	.+6      	; 0x108b0 <dbf_open_write+0x32>
   108aa:	81 e1       	ldi	r24, 0x11	; 17
   108ac:	90 e0       	ldi	r25, 0x00	; 0
   108ae:	2f c0       	rjmp	.+94     	; 0x1090e <dbf_open_write+0x90>
   108b0:	b5 01       	movw	r22, r10
   108b2:	a4 01       	movw	r20, r8
   108b4:	ce 01       	movw	r24, r28
   108b6:	01 96       	adiw	r24, 0x01	; 1
   108b8:	51 df       	rcall	.-350    	; 0x1075c <dbf_lseek>
   108ba:	89 2b       	or	r24, r25
   108bc:	59 f0       	breq	.+22     	; 0x108d4 <dbf_open_write+0x56>
   108be:	85 e0       	ldi	r24, 0x05	; 5
   108c0:	90 e0       	ldi	r25, 0x00	; 0
   108c2:	f7 01       	movw	r30, r14
   108c4:	91 83       	std	Z+1, r25	; 0x01
   108c6:	80 83       	st	Z, r24
   108c8:	ce 01       	movw	r24, r28
   108ca:	01 96       	adiw	r24, 0x01	; 1
   108cc:	64 df       	rcall	.-312    	; 0x10796 <dbf_close>
   108ce:	8f ef       	ldi	r24, 0xFF	; 255
   108d0:	9f ef       	ldi	r25, 0xFF	; 255
   108d2:	27 c0       	rjmp	.+78     	; 0x10922 <dbf_open_write+0xa4>
   108d4:	9e 01       	movw	r18, r28
   108d6:	2b 5d       	subi	r18, 0xDB	; 219
   108d8:	3d 4f       	sbci	r19, 0xFD	; 253
   108da:	a8 01       	movw	r20, r16
   108dc:	b6 01       	movw	r22, r12
   108de:	ce 01       	movw	r24, r28
   108e0:	01 96       	adiw	r24, 0x01	; 1
   108e2:	1f df       	rcall	.-450    	; 0x10722 <dbf_write>
   108e4:	89 2b       	or	r24, r25
   108e6:	49 f4       	brne	.+18     	; 0x108fa <dbf_open_write+0x7c>
   108e8:	cb 5d       	subi	r28, 0xDB	; 219
   108ea:	dd 4f       	sbci	r29, 0xFD	; 253
   108ec:	88 81       	ld	r24, Y
   108ee:	99 81       	ldd	r25, Y+1	; 0x01
   108f0:	c5 52       	subi	r28, 0x25	; 37
   108f2:	d2 40       	sbci	r29, 0x02	; 2
   108f4:	08 17       	cp	r16, r24
   108f6:	19 07       	cpc	r17, r25
   108f8:	19 f0       	breq	.+6      	; 0x10900 <dbf_open_write+0x82>
   108fa:	81 e0       	ldi	r24, 0x01	; 1
   108fc:	90 e0       	ldi	r25, 0x00	; 0
   108fe:	e1 cf       	rjmp	.-62     	; 0x108c2 <dbf_open_write+0x44>
   10900:	ce 01       	movw	r24, r28
   10902:	01 96       	adiw	r24, 0x01	; 1
   10904:	48 df       	rcall	.-368    	; 0x10796 <dbf_close>
   10906:	89 2b       	or	r24, r25
   10908:	31 f0       	breq	.+12     	; 0x10916 <dbf_open_write+0x98>
   1090a:	80 e1       	ldi	r24, 0x10	; 16
   1090c:	90 e0       	ldi	r25, 0x00	; 0
   1090e:	f7 01       	movw	r30, r14
   10910:	91 83       	std	Z+1, r25	; 0x01
   10912:	80 83       	st	Z, r24
   10914:	dc cf       	rjmp	.-72     	; 0x108ce <dbf_open_write+0x50>
   10916:	cb 5d       	subi	r28, 0xDB	; 219
   10918:	dd 4f       	sbci	r29, 0xFD	; 253
   1091a:	88 81       	ld	r24, Y
   1091c:	99 81       	ldd	r25, Y+1	; 0x01
   1091e:	c5 52       	subi	r28, 0x25	; 37
   10920:	d2 40       	sbci	r29, 0x02	; 2
   10922:	ca 5d       	subi	r28, 0xDA	; 218
   10924:	dd 4f       	sbci	r29, 0xFD	; 253
   10926:	ec e0       	ldi	r30, 0x0C	; 12
   10928:	0c 94 00 e0 	jmp	0x1c000	; 0x1c000 <__epilogue_restores__+0xc>

0001092c <gpib_timer_elapsed_begin>:
   1092c:	0c 94 ca 34 	jmp	0x6994	; 0x6994 <clock_elapsed_begin>
   10930:	08 95       	ret

00010932 <gpib_timer_reset>:
   10932:	f8 94       	cli
   10934:	e3 ea       	ldi	r30, 0xA3	; 163
   10936:	fc e1       	ldi	r31, 0x1C	; 28
   10938:	10 82       	st	Z, r1
   1093a:	11 82       	std	Z+1, r1	; 0x01
   1093c:	12 82       	std	Z+2, r1	; 0x02
   1093e:	13 82       	std	Z+3, r1	; 0x03
   10940:	14 82       	std	Z+4, r1	; 0x04
   10942:	15 82       	std	Z+5, r1	; 0x05
   10944:	16 82       	std	Z+6, r1	; 0x06
   10946:	17 82       	std	Z+7, r1	; 0x07
   10948:	81 e0       	ldi	r24, 0x01	; 1
   1094a:	80 87       	std	Z+8, r24	; 0x08
   1094c:	78 94       	sei
   1094e:	08 95       	ret

00010950 <gpib_timer_elapsed_end>:
   10950:	0c 94 d0 34 	jmp	0x69a0	; 0x69a0 <clock_elapsed_end>
   10954:	08 95       	ret

00010956 <gpib_timer_task>:
   10956:	f8 94       	cli
   10958:	80 91 a7 1c 	lds	r24, 0x1CA7	; 0x801ca7 <gpib_timer+0x4>
   1095c:	90 91 a8 1c 	lds	r25, 0x1CA8	; 0x801ca8 <gpib_timer+0x5>
   10960:	a0 91 a9 1c 	lds	r26, 0x1CA9	; 0x801ca9 <gpib_timer+0x6>
   10964:	b0 91 aa 1c 	lds	r27, 0x1CAA	; 0x801caa <gpib_timer+0x7>
   10968:	89 2b       	or	r24, r25
   1096a:	8a 2b       	or	r24, r26
   1096c:	8b 2b       	or	r24, r27
   1096e:	a1 f0       	breq	.+40     	; 0x10998 <gpib_timer_task+0x42>
   10970:	80 91 a7 1c 	lds	r24, 0x1CA7	; 0x801ca7 <gpib_timer+0x4>
   10974:	90 91 a8 1c 	lds	r25, 0x1CA8	; 0x801ca8 <gpib_timer+0x5>
   10978:	a0 91 a9 1c 	lds	r26, 0x1CA9	; 0x801ca9 <gpib_timer+0x6>
   1097c:	b0 91 aa 1c 	lds	r27, 0x1CAA	; 0x801caa <gpib_timer+0x7>
   10980:	01 97       	sbiw	r24, 0x01	; 1
   10982:	a1 09       	sbc	r26, r1
   10984:	b1 09       	sbc	r27, r1
   10986:	80 93 a7 1c 	sts	0x1CA7, r24	; 0x801ca7 <gpib_timer+0x4>
   1098a:	90 93 a8 1c 	sts	0x1CA8, r25	; 0x801ca8 <gpib_timer+0x5>
   1098e:	a0 93 a9 1c 	sts	0x1CA9, r26	; 0x801ca9 <gpib_timer+0x6>
   10992:	b0 93 aa 1c 	sts	0x1CAA, r27	; 0x801caa <gpib_timer+0x7>
   10996:	03 c0       	rjmp	.+6      	; 0x1099e <gpib_timer_task+0x48>
   10998:	81 e0       	ldi	r24, 0x01	; 1
   1099a:	80 93 ab 1c 	sts	0x1CAB, r24	; 0x801cab <gpib_timer+0x8>
   1099e:	78 94       	sei
   109a0:	08 95       	ret

000109a2 <gpib_timeout_set>:
   109a2:	f8 94       	cli
   109a4:	e3 ea       	ldi	r30, 0xA3	; 163
   109a6:	fc e1       	ldi	r31, 0x1C	; 28
   109a8:	64 83       	std	Z+4, r22	; 0x04
   109aa:	75 83       	std	Z+5, r23	; 0x05
   109ac:	86 83       	std	Z+6, r24	; 0x06
   109ae:	97 83       	std	Z+7, r25	; 0x07
   109b0:	10 86       	std	Z+8, r1	; 0x08
   109b2:	78 94       	sei
   109b4:	08 95       	ret

000109b6 <gpib_bus_read_init>:
   109b6:	54 98       	cbi	0x0a, 4	; 10
   109b8:	57 98       	cbi	0x0a, 7	; 10
   109ba:	45 98       	cbi	0x08, 5	; 8
   109bc:	3d 9a       	sbi	0x07, 5	; 7
   109be:	11 b8       	out	0x01, r1	; 1
   109c0:	2f ef       	ldi	r18, 0xFF	; 255
   109c2:	22 b9       	out	0x02, r18	; 2
   109c4:	43 98       	cbi	0x08, 3	; 8
   109c6:	3b 9a       	sbi	0x07, 3	; 7
   109c8:	21 98       	cbi	0x04, 1	; 4
   109ca:	56 98       	cbi	0x0a, 6	; 10
   109cc:	20 98       	cbi	0x04, 0	; 4
   109ce:	55 98       	cbi	0x0a, 5	; 10
   109d0:	89 2b       	or	r24, r25
   109d2:	39 f4       	brne	.+14     	; 0x109e2 <gpib_bus_read_init+0x2c>
   109d4:	52 98       	cbi	0x0a, 2	; 10
   109d6:	53 98       	cbi	0x0a, 3	; 10
   109d8:	8d e0       	ldi	r24, 0x0D	; 13
   109da:	8a 95       	dec	r24
   109dc:	f1 f7       	brne	.-4      	; 0x109da <gpib_bus_read_init+0x24>
   109de:	00 00       	nop
   109e0:	04 c0       	rjmp	.+8      	; 0x109ea <gpib_bus_read_init+0x34>
   109e2:	5b 98       	cbi	0x0b, 3	; 11
   109e4:	53 9a       	sbi	0x0a, 3	; 10
   109e6:	5a 98       	cbi	0x0b, 2	; 11
   109e8:	52 9a       	sbi	0x0a, 2	; 10
   109ea:	42 98       	cbi	0x08, 2	; 8
   109ec:	3a 9a       	sbi	0x07, 2	; 7
   109ee:	44 9a       	sbi	0x08, 4	; 8
   109f0:	3c 9a       	sbi	0x07, 4	; 7
   109f2:	8d e0       	ldi	r24, 0x0D	; 13
   109f4:	8a 95       	dec	r24
   109f6:	f1 f7       	brne	.-4      	; 0x109f4 <gpib_bus_read_init+0x3e>
   109f8:	00 00       	nop
   109fa:	08 95       	ret

000109fc <gpib_bus_init>:
   109fc:	00 d0       	rcall	.+0      	; 0x109fe <gpib_bus_init+0x2>
   109fe:	1f 92       	push	r1
   10a00:	10 92 2a 19 	sts	0x192A, r1	; 0x80192a <gpib_unread_f>
   10a04:	11 b8       	out	0x01, r1	; 1
   10a06:	8f ef       	ldi	r24, 0xFF	; 255
   10a08:	82 b9       	out	0x02, r24	; 2
   10a0a:	21 98       	cbi	0x04, 1	; 4
   10a0c:	52 98       	cbi	0x0a, 2	; 10
   10a0e:	53 98       	cbi	0x0a, 3	; 10
   10a10:	54 98       	cbi	0x0a, 4	; 10
   10a12:	57 98       	cbi	0x0a, 7	; 10
   10a14:	56 98       	cbi	0x0a, 6	; 10
   10a16:	20 98       	cbi	0x04, 0	; 4
   10a18:	55 98       	cbi	0x0a, 5	; 10
   10a1a:	45 98       	cbi	0x08, 5	; 8
   10a1c:	3d 9a       	sbi	0x07, 5	; 7
   10a1e:	43 98       	cbi	0x08, 3	; 8
   10a20:	3b 9a       	sbi	0x07, 3	; 7
   10a22:	42 98       	cbi	0x08, 2	; 8
   10a24:	3a 9a       	sbi	0x07, 2	; 7
   10a26:	44 9a       	sbi	0x08, 4	; 8
   10a28:	3c 9a       	sbi	0x07, 4	; 7
   10a2a:	8d e0       	ldi	r24, 0x0D	; 13
   10a2c:	8a 95       	dec	r24
   10a2e:	f1 f7       	brne	.-4      	; 0x10a2c <gpib_bus_init+0x30>
   10a30:	00 00       	nop
   10a32:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   10a36:	82 ff       	sbrs	r24, 2
   10a38:	0a c0       	rjmp	.+20     	; 0x10a4e <gpib_bus_init+0x52>
   10a3a:	81 eb       	ldi	r24, 0xB1	; 177
   10a3c:	90 e1       	ldi	r25, 0x10	; 16
   10a3e:	a0 e0       	ldi	r26, 0x00	; 0
   10a40:	ed b7       	in	r30, 0x3d	; 61
   10a42:	fe b7       	in	r31, 0x3e	; 62
   10a44:	81 83       	std	Z+1, r24	; 0x01
   10a46:	92 83       	std	Z+2, r25	; 0x02
   10a48:	a3 83       	std	Z+3, r26	; 0x03
   10a4a:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   10a4e:	0f 90       	pop	r0
   10a50:	0f 90       	pop	r0
   10a52:	0f 90       	pop	r0
   10a54:	08 95       	ret

00010a56 <gpib_state_init>:
   10a56:	00 d0       	rcall	.+0      	; 0x10a58 <gpib_state_init+0x2>
   10a58:	1f 92       	push	r1
   10a5a:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   10a5e:	82 ff       	sbrs	r24, 2
   10a60:	0a c0       	rjmp	.+20     	; 0x10a76 <gpib_state_init+0x20>
   10a62:	8e e9       	ldi	r24, 0x9E	; 158
   10a64:	90 e1       	ldi	r25, 0x10	; 16
   10a66:	a0 e0       	ldi	r26, 0x00	; 0
   10a68:	ed b7       	in	r30, 0x3d	; 61
   10a6a:	fe b7       	in	r31, 0x3e	; 62
   10a6c:	81 83       	std	Z+1, r24	; 0x01
   10a6e:	92 83       	std	Z+2, r25	; 0x02
   10a70:	a3 83       	std	Z+3, r26	; 0x03
   10a72:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   10a76:	e4 dd       	rcall	.-1080   	; 0x10640 <ppr_init>
   10a78:	0e 94 b1 8f 	call	0x11f62	; 0x11f62 <listen_cleanup>
   10a7c:	0e 94 c9 90 	call	0x12192	; 0x12192 <talk_cleanup>
   10a80:	10 92 af 1e 	sts	0x1EAF, r1	; 0x801eaf <spoll>
   10a84:	10 92 b2 1e 	sts	0x1EB2, r1	; 0x801eb2 <talking>
   10a88:	10 92 b5 1e 	sts	0x1EB5, r1	; 0x801eb5 <talking_last>
   10a8c:	10 92 b4 1e 	sts	0x1EB4, r1	; 0x801eb4 <listening>
   10a90:	10 92 ae 1e 	sts	0x1EAE, r1	; 0x801eae <listening_last>
   10a94:	10 92 ad 1c 	sts	0x1CAD, r1	; 0x801cad <lastcmd+0x1>
   10a98:	10 92 ac 1c 	sts	0x1CAC, r1	; 0x801cac <lastcmd>
   10a9c:	10 92 b1 1e 	sts	0x1EB1, r1	; 0x801eb1 <current+0x1>
   10aa0:	10 92 b0 1e 	sts	0x1EB0, r1	; 0x801eb0 <current>
   10aa4:	10 92 b3 1e 	sts	0x1EB3, r1	; 0x801eb3 <secondary>
   10aa8:	0f 90       	pop	r0
   10aaa:	0f 90       	pop	r0
   10aac:	0f 90       	pop	r0
   10aae:	08 95       	ret

00010ab0 <gpib_enable_PPR>:
   10ab0:	cf 93       	push	r28
   10ab2:	df 93       	push	r29
   10ab4:	ad b7       	in	r26, 0x3d	; 61
   10ab6:	be b7       	in	r27, 0x3e	; 62
   10ab8:	17 97       	sbiw	r26, 0x07	; 7
   10aba:	0f b6       	in	r0, 0x3f	; 63
   10abc:	f8 94       	cli
   10abe:	be bf       	out	0x3e, r27	; 62
   10ac0:	0f be       	out	0x3f, r0	; 63
   10ac2:	ad bf       	out	0x3d, r26	; 61
   10ac4:	ec 01       	movw	r28, r24
   10ac6:	88 30       	cpi	r24, 0x08	; 8
   10ac8:	91 05       	cpc	r25, r1
   10aca:	68 f0       	brcs	.+26     	; 0x10ae6 <gpib_enable_PPR+0x36>
   10acc:	ed b7       	in	r30, 0x3d	; 61
   10ace:	fe b7       	in	r31, 0x3e	; 62
   10ad0:	95 83       	std	Z+5, r25	; 0x05
   10ad2:	84 83       	std	Z+4, r24	; 0x04
   10ad4:	88 e7       	ldi	r24, 0x78	; 120
   10ad6:	90 e1       	ldi	r25, 0x10	; 16
   10ad8:	a0 e0       	ldi	r26, 0x00	; 0
   10ada:	81 83       	std	Z+1, r24	; 0x01
   10adc:	92 83       	std	Z+2, r25	; 0x02
   10ade:	a3 83       	std	Z+3, r26	; 0x03
   10ae0:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   10ae4:	15 c0       	rjmp	.+42     	; 0x10b10 <gpib_enable_PPR+0x60>
   10ae6:	c2 dd       	rcall	.-1148   	; 0x1066c <ppr_bit_set>
   10ae8:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   10aec:	81 ff       	sbrs	r24, 1
   10aee:	10 c0       	rjmp	.+32     	; 0x10b10 <gpib_enable_PPR+0x60>
   10af0:	a3 dd       	rcall	.-1210   	; 0x10638 <ppr_reg>
   10af2:	90 e0       	ldi	r25, 0x00	; 0
   10af4:	ed b7       	in	r30, 0x3d	; 61
   10af6:	fe b7       	in	r31, 0x3e	; 62
   10af8:	97 83       	std	Z+7, r25	; 0x07
   10afa:	86 83       	std	Z+6, r24	; 0x06
   10afc:	d5 83       	std	Z+5, r29	; 0x05
   10afe:	c4 83       	std	Z+4, r28	; 0x04
   10b00:	8d e5       	ldi	r24, 0x5D	; 93
   10b02:	90 e1       	ldi	r25, 0x10	; 16
   10b04:	a0 e0       	ldi	r26, 0x00	; 0
   10b06:	81 83       	std	Z+1, r24	; 0x01
   10b08:	92 83       	std	Z+2, r25	; 0x02
   10b0a:	a3 83       	std	Z+3, r26	; 0x03
   10b0c:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   10b10:	cd b7       	in	r28, 0x3d	; 61
   10b12:	de b7       	in	r29, 0x3e	; 62
   10b14:	27 96       	adiw	r28, 0x07	; 7
   10b16:	e2 e0       	ldi	r30, 0x02	; 2
   10b18:	0c 94 0a e0 	jmp	0x1c014	; 0x1c014 <__epilogue_restores__+0x20>

00010b1c <gpib_disable_PPR>:
   10b1c:	cf 93       	push	r28
   10b1e:	df 93       	push	r29
   10b20:	ad b7       	in	r26, 0x3d	; 61
   10b22:	be b7       	in	r27, 0x3e	; 62
   10b24:	17 97       	sbiw	r26, 0x07	; 7
   10b26:	0f b6       	in	r0, 0x3f	; 63
   10b28:	f8 94       	cli
   10b2a:	be bf       	out	0x3e, r27	; 62
   10b2c:	0f be       	out	0x3f, r0	; 63
   10b2e:	ad bf       	out	0x3d, r26	; 61
   10b30:	ec 01       	movw	r28, r24
   10b32:	88 30       	cpi	r24, 0x08	; 8
   10b34:	91 05       	cpc	r25, r1
   10b36:	68 f0       	brcs	.+26     	; 0x10b52 <gpib_disable_PPR+0x36>
   10b38:	ed b7       	in	r30, 0x3d	; 61
   10b3a:	fe b7       	in	r31, 0x3e	; 62
   10b3c:	95 83       	std	Z+5, r25	; 0x05
   10b3e:	84 83       	std	Z+4, r24	; 0x04
   10b40:	86 e3       	ldi	r24, 0x36	; 54
   10b42:	90 e1       	ldi	r25, 0x10	; 16
   10b44:	a0 e0       	ldi	r26, 0x00	; 0
   10b46:	81 83       	std	Z+1, r24	; 0x01
   10b48:	92 83       	std	Z+2, r25	; 0x02
   10b4a:	a3 83       	std	Z+3, r26	; 0x03
   10b4c:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   10b50:	15 c0       	rjmp	.+42     	; 0x10b7c <gpib_disable_PPR+0x60>
   10b52:	99 dd       	rcall	.-1230   	; 0x10686 <ppr_bit_clr>
   10b54:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   10b58:	81 ff       	sbrs	r24, 1
   10b5a:	10 c0       	rjmp	.+32     	; 0x10b7c <gpib_disable_PPR+0x60>
   10b5c:	6d dd       	rcall	.-1318   	; 0x10638 <ppr_reg>
   10b5e:	90 e0       	ldi	r25, 0x00	; 0
   10b60:	ed b7       	in	r30, 0x3d	; 61
   10b62:	fe b7       	in	r31, 0x3e	; 62
   10b64:	97 83       	std	Z+7, r25	; 0x07
   10b66:	86 83       	std	Z+6, r24	; 0x06
   10b68:	d5 83       	std	Z+5, r29	; 0x05
   10b6a:	c4 83       	std	Z+4, r28	; 0x04
   10b6c:	8b e1       	ldi	r24, 0x1B	; 27
   10b6e:	90 e1       	ldi	r25, 0x10	; 16
   10b70:	a0 e0       	ldi	r26, 0x00	; 0
   10b72:	81 83       	std	Z+1, r24	; 0x01
   10b74:	92 83       	std	Z+2, r25	; 0x02
   10b76:	a3 83       	std	Z+3, r26	; 0x03
   10b78:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   10b7c:	cd b7       	in	r28, 0x3d	; 61
   10b7e:	de b7       	in	r29, 0x3e	; 62
   10b80:	27 96       	adiw	r28, 0x07	; 7
   10b82:	e2 e0       	ldi	r30, 0x02	; 2
   10b84:	0c 94 0a e0 	jmp	0x1c014	; 0x1c014 <__epilogue_restores__+0x20>

00010b88 <gpib_assert_ifc>:
   10b88:	00 d0       	rcall	.+0      	; 0x10b8a <gpib_assert_ifc+0x2>
   10b8a:	1f 92       	push	r1
   10b8c:	5c 98       	cbi	0x0b, 4	; 11
   10b8e:	54 9a       	sbi	0x0a, 4	; 10
   10b90:	6a ef       	ldi	r22, 0xFA	; 250
   10b92:	70 e0       	ldi	r23, 0x00	; 0
   10b94:	80 e0       	ldi	r24, 0x00	; 0
   10b96:	90 e0       	ldi	r25, 0x00	; 0
   10b98:	0e 94 32 28 	call	0x5064	; 0x5064 <delayus>
   10b9c:	54 98       	cbi	0x0a, 4	; 10
   10b9e:	6a ef       	ldi	r22, 0xFA	; 250
   10ba0:	70 e0       	ldi	r23, 0x00	; 0
   10ba2:	80 e0       	ldi	r24, 0x00	; 0
   10ba4:	90 e0       	ldi	r25, 0x00	; 0
   10ba6:	0e 94 32 28 	call	0x5064	; 0x5064 <delayus>
   10baa:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   10bae:	82 ff       	sbrs	r24, 2
   10bb0:	0a c0       	rjmp	.+20     	; 0x10bc6 <gpib_assert_ifc+0x3e>
   10bb2:	8f e0       	ldi	r24, 0x0F	; 15
   10bb4:	90 e1       	ldi	r25, 0x10	; 16
   10bb6:	a0 e0       	ldi	r26, 0x00	; 0
   10bb8:	ed b7       	in	r30, 0x3d	; 61
   10bba:	fe b7       	in	r31, 0x3e	; 62
   10bbc:	81 83       	std	Z+1, r24	; 0x01
   10bbe:	92 83       	std	Z+2, r25	; 0x02
   10bc0:	a3 83       	std	Z+3, r26	; 0x03
   10bc2:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   10bc6:	0f 90       	pop	r0
   10bc8:	0f 90       	pop	r0
   10bca:	0f 90       	pop	r0
   10bcc:	08 95       	ret

00010bce <gpib_unread>:
   10bce:	cf 93       	push	r28
   10bd0:	df 93       	push	r29
   10bd2:	00 d0       	rcall	.+0      	; 0x10bd4 <gpib_unread+0x6>
   10bd4:	1f 92       	push	r1
   10bd6:	ec 01       	movw	r28, r24
   10bd8:	80 91 2a 19 	lds	r24, 0x192A	; 0x80192a <gpib_unread_f>
   10bdc:	81 11       	cpse	r24, r1
   10bde:	08 c0       	rjmp	.+16     	; 0x10bf0 <gpib_unread+0x22>
   10be0:	d0 93 b7 1e 	sts	0x1EB7, r29	; 0x801eb7 <gpib_unread_data+0x1>
   10be4:	c0 93 b6 1e 	sts	0x1EB6, r28	; 0x801eb6 <gpib_unread_data>
   10be8:	81 e0       	ldi	r24, 0x01	; 1
   10bea:	80 93 2a 19 	sts	0x192A, r24	; 0x80192a <gpib_unread_f>
   10bee:	12 c0       	rjmp	.+36     	; 0x10c14 <gpib_unread+0x46>
   10bf0:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   10bf4:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   10bf8:	86 70       	andi	r24, 0x06	; 6
   10bfa:	99 27       	eor	r25, r25
   10bfc:	89 2b       	or	r24, r25
   10bfe:	51 f0       	breq	.+20     	; 0x10c14 <gpib_unread+0x46>
   10c00:	81 ee       	ldi	r24, 0xE1	; 225
   10c02:	9f e0       	ldi	r25, 0x0F	; 15
   10c04:	a0 e0       	ldi	r26, 0x00	; 0
   10c06:	ed b7       	in	r30, 0x3d	; 61
   10c08:	fe b7       	in	r31, 0x3e	; 62
   10c0a:	81 83       	std	Z+1, r24	; 0x01
   10c0c:	92 83       	std	Z+2, r25	; 0x02
   10c0e:	a3 83       	std	Z+3, r26	; 0x03
   10c10:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   10c14:	ce 01       	movw	r24, r28
   10c16:	cd b7       	in	r28, 0x3d	; 61
   10c18:	de b7       	in	r29, 0x3e	; 62
   10c1a:	23 96       	adiw	r28, 0x03	; 3
   10c1c:	e2 e0       	ldi	r30, 0x02	; 2
   10c1e:	0c 94 0a e0 	jmp	0x1c014	; 0x1c014 <__epilogue_restores__+0x20>

00010c22 <gpib_bus_read>:

/// @brief Read GPIB data BUS only
/// @return  bus (lower 8 bits)
uint8_t gpib_bus_read()
{
    uint8_t bus = ~(GPIB_BUS_RD());
   10c22:	11 b8       	out	0x01, r1	; 1
   10c24:	80 b1       	in	r24, 0x00	; 0
   10c26:	80 95       	com	r24

    ///@brief if a command byte (ATN low) then strip partity
    if(!GPIB_PIN_TST(ATN))
   10c28:	4e 9b       	sbis	0x09, 6	; 9
        bus &= 0x7f;
   10c2a:	8f 77       	andi	r24, 0x7F	; 127
    else
        bus &= 0xff;
    return(bus);
}
   10c2c:	08 95       	ret

00010c2e <gpib_control_pin_read>:
/// @return  control lines (upper 8 bits)
/// @see gpib_bus_read_init()
uint16_t gpib_control_pin_read()
{
    uint16_t control = 0;
    if(GPIB_PIN_TST(ATN) == 0 )
   10c2e:	4e 99       	sbic	0x09, 6	; 9
   10c30:	03 c0       	rjmp	.+6      	; 0x10c38 <gpib_control_pin_read+0xa>
        control |= ATN_FLAG;
   10c32:	80 e0       	ldi	r24, 0x00	; 0
   10c34:	94 e0       	ldi	r25, 0x04	; 4
   10c36:	02 c0       	rjmp	.+4      	; 0x10c3c <gpib_control_pin_read+0xe>
///   FIXME We could add a test for read/write state ??
/// @return  control lines (upper 8 bits)
/// @see gpib_bus_read_init()
uint16_t gpib_control_pin_read()
{
    uint16_t control = 0;
   10c38:	80 e0       	ldi	r24, 0x00	; 0
   10c3a:	90 e0       	ldi	r25, 0x00	; 0
    if(GPIB_PIN_TST(ATN) == 0 )
        control |= ATN_FLAG;
    if(GPIB_PIN_TST(EOI) == 0 )
   10c3c:	18 9b       	sbis	0x03, 0	; 3
        control |= EOI_FLAG;
   10c3e:	91 60       	ori	r25, 0x01	; 1
    if(GPIB_PIN_TST(SRQ) == 0 )
   10c40:	4d 9b       	sbis	0x09, 5	; 9
        control |= SRQ_FLAG;
   10c42:	92 60       	ori	r25, 0x02	; 2
    if(GPIB_PIN_TST(REN) == 0 )
   10c44:	4f 9b       	sbis	0x09, 7	; 9
        control |= REN_FLAG;
   10c46:	98 60       	ori	r25, 0x08	; 8
    if(GPIB_PIN_TST(IFC) == 0 )
   10c48:	4c 9b       	sbis	0x09, 4	; 9
        control |= IFC_FLAG;
   10c4a:	90 61       	ori	r25, 0x10	; 16
    return(control);
}
   10c4c:	08 95       	ret

00010c4e <gpib_handshake_pin_read>:
uint16_t gpib_handshake_pin_read()
{
    uint16_t control = 0;
    ///@brief for tracing we can reuse the error flag bit values for DAV,NRFD and NDAC
    /// FYI: This has no impact on the gpib_read_byte() functions and return values
    if(GPIB_PIN_TST(DAV) == 0 )
   10c4e:	19 99       	sbic	0x03, 1	; 3
   10c50:	03 c0       	rjmp	.+6      	; 0x10c58 <gpib_handshake_pin_read+0xa>
        control |= DAV_FLAG;
   10c52:	80 e0       	ldi	r24, 0x00	; 0
   10c54:	90 e2       	ldi	r25, 0x20	; 32
   10c56:	02 c0       	rjmp	.+4      	; 0x10c5c <gpib_handshake_pin_read+0xe>
/// FIXME: V2 boards can only read pins enabled for read by the SN75162
///   FIXME We could add a test for read/write state ??
/// @return  handshake lines (upper 8 bits)
uint16_t gpib_handshake_pin_read()
{
    uint16_t control = 0;
   10c58:	80 e0       	ldi	r24, 0x00	; 0
   10c5a:	90 e0       	ldi	r25, 0x00	; 0
    ///@brief for tracing we can reuse the error flag bit values for DAV,NRFD and NDAC
    /// FYI: This has no impact on the gpib_read_byte() functions and return values
    if(GPIB_PIN_TST(DAV) == 0 )
        control |= DAV_FLAG;
    if(GPIB_PIN_TST(NRFD) == 0 )
   10c5c:	4a 9b       	sbis	0x09, 2	; 9
        control |= NRFD_FLAG;
   10c5e:	90 64       	ori	r25, 0x40	; 64
    if(GPIB_PIN_TST(NDAC) == 0 )
   10c60:	4b 9b       	sbis	0x09, 3	; 9
        control |= NDAC_FLAG;
   10c62:	90 68       	ori	r25, 0x80	; 128
    return(control);
}
   10c64:	08 95       	ret

00010c66 <gpib_write_byte>:
///       - REN_FLAG
///       - PP_FLAG
///     - Error Flags:
///       - IFC_FLAG
uint16_t gpib_write_byte(uint16_t ch)
{
   10c66:	2f 92       	push	r2
   10c68:	3f 92       	push	r3
   10c6a:	4f 92       	push	r4
   10c6c:	6f 92       	push	r6
   10c6e:	7f 92       	push	r7
   10c70:	8f 92       	push	r8
   10c72:	cf 92       	push	r12
   10c74:	df 92       	push	r13
   10c76:	ef 92       	push	r14
   10c78:	1f 93       	push	r17
   10c7a:	cf 93       	push	r28
   10c7c:	df 93       	push	r29
   10c7e:	cd b7       	in	r28, 0x3d	; 61
   10c80:	de b7       	in	r29, 0x3e	; 62
   10c82:	2f 97       	sbiw	r28, 0x0f	; 15
   10c84:	0f b6       	in	r0, 0x3f	; 63
   10c86:	f8 94       	cli
   10c88:	de bf       	out	0x3e, r29	; 62
   10c8a:	0f be       	out	0x3f, r0	; 63
   10c8c:	cd bf       	out	0x3d, r28	; 61
   10c8e:	9f 87       	std	Y+15, r25	; 0x0f
   10c90:	8e 87       	std	Y+14, r24	; 0x0e
    uint8_t tx_state;

	// Wait for DAV to be released before starting
	// Read state for DAV
	gpib_bus_read_init(0);
   10c92:	80 e0       	ldi	r24, 0x00	; 0
   10c94:	90 e0       	ldi	r25, 0x00	; 0
   10c96:	8f de       	rcall	.-738    	; 0x109b6 <gpib_bus_read_init>
	// Bus read init sets the following states
	// GPIB_BUS_LATCH_WR(0xff); // float OC BUS on write
	// GPIB_IO_LOW(PE);			// BUS OC PULLUP

    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);
   10c98:	64 ef       	ldi	r22, 0xF4	; 244
   10c9a:	71 e0       	ldi	r23, 0x01	; 1
   10c9c:	80 e0       	ldi	r24, 0x00	; 0
   10c9e:	90 e0       	ldi	r25, 0x00	; 0
   10ca0:	80 de       	rcall	.-768    	; 0x109a2 <gpib_timeout_set>

	// Bus read init sets the following states
	// GPIB_BUS_LATCH_WR(0xff); // float OC BUS on write
	// GPIB_IO_LOW(PE);			// BUS OC PULLUP

    tx_state = GPIB_TX_START;
   10ca2:	10 e0       	ldi	r17, 0x00	; 0
                if (gpib_timeout_test())
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
                    if(debuglevel & (GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
                        printf("<BUS waiting for DAV==1>\n");
   10ca4:	8f e4       	ldi	r24, 0x4F	; 79
   10ca6:	9f e0       	ldi	r25, 0x0F	; 15
   10ca8:	6c 01       	movw	r12, r24
   10caa:	e1 2c       	mov	r14, r1
                if (gpib_timeout_test())
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
                    if(debuglevel & (GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
                        printf("<BUS waiting for NDAC==1>\n");
   10cac:	89 e6       	ldi	r24, 0x69	; 105
   10cae:	9f e0       	ldi	r25, 0x0F	; 15
   10cb0:	3c 01       	movw	r6, r24
   10cb2:	81 2c       	mov	r8, r1
                if (gpib_timeout_test())
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
                    if(debuglevel & (GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
                        printf("<BUS waiting for NRFD==0>\n");
   10cb4:	84 e8       	ldi	r24, 0x84	; 132
   10cb6:	9f e0       	ldi	r25, 0x0F	; 15
   10cb8:	1c 01       	movw	r2, r24
   10cba:	41 2c       	mov	r4, r1
                    tx_state = GPIB_TX_PUT_DATA;
                }
                if (gpib_timeout_test())
                {
                    if(debuglevel & (GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
                        printf("<BUS waiting for NRFD==1 && NDAC == 0>\n");
   10cbc:	8f e9       	ldi	r24, 0x9F	; 159
   10cbe:	9f e0       	ldi	r25, 0x0F	; 15
   10cc0:	9c 01       	movw	r18, r24
   10cc2:	40 e0       	ldi	r20, 0x00	; 0
   10cc4:	28 87       	std	Y+8, r18	; 0x08
   10cc6:	39 87       	std	Y+9, r19	; 0x09
   10cc8:	4a 87       	std	Y+10, r20	; 0x0a
                    tx_state = GPIB_TX_WAIT_READY;
                }
                if (gpib_timeout_test())
                {
                    if(debuglevel & (GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
                        printf("<BUS waiting for DAV==1>\n");
   10cca:	87 ec       	ldi	r24, 0xC7	; 199
   10ccc:	9f e0       	ldi	r25, 0x0F	; 15
   10cce:	9c 01       	movw	r18, r24
   10cd0:	40 e0       	ldi	r20, 0x00	; 0
   10cd2:	2b 87       	std	Y+11, r18	; 0x0b
   10cd4:	3c 87       	std	Y+12, r19	; 0x0c
   10cd6:	4d 87       	std	Y+13, r20	; 0x0d
    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);

    while(tx_state != GPIB_TX_DONE )
    {
        if(uart_keyhit(0))
   10cd8:	80 e0       	ldi	r24, 0x00	; 0
   10cda:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <uart_keyhit>
   10cde:	89 2b       	or	r24, r25
   10ce0:	09 f0       	breq	.+2      	; 0x10ce4 <gpib_write_byte+0x7e>
   10ce2:	1b c1       	rjmp	.+566    	; 0x10f1a <gpib_write_byte+0x2b4>
        if(gpib_detect_PP())
            ch |= PP_FLAG;
#endif

		// IFC is always in for a device
        if(GPIB_PIN_TST(IFC) == 0)
   10ce4:	4c 99       	sbic	0x09, 4	; 9
   10ce6:	07 c0       	rjmp	.+14     	; 0x10cf6 <gpib_write_byte+0x90>
        {
            ch |= IFC_FLAG;
   10ce8:	8e 85       	ldd	r24, Y+14	; 0x0e
   10cea:	9f 85       	ldd	r25, Y+15	; 0x0f
   10cec:	90 61       	ori	r25, 0x10	; 16
   10cee:	9f 87       	std	Y+15, r25	; 0x0f
			gpib_bus_init();
   10cf0:	8e 87       	std	Y+14, r24	; 0x0e
   10cf2:	84 de       	rcall	.-760    	; 0x109fc <gpib_bus_init>
            break;
   10cf4:	12 c1       	rjmp	.+548    	; 0x10f1a <gpib_write_byte+0x2b4>
        }

        switch(tx_state)
   10cf6:	81 2f       	mov	r24, r17
   10cf8:	90 e0       	ldi	r25, 0x00	; 0
   10cfa:	8a 30       	cpi	r24, 0x0A	; 10
   10cfc:	91 05       	cpc	r25, r1
   10cfe:	08 f0       	brcs	.+2      	; 0x10d02 <gpib_write_byte+0x9c>
   10d00:	02 c1       	rjmp	.+516    	; 0x10f06 <gpib_write_byte+0x2a0>
   10d02:	fc 01       	movw	r30, r24
   10d04:	e3 54       	subi	r30, 0x43	; 67
   10d06:	ff 4f       	sbci	r31, 0xFF	; 255
   10d08:	0c 94 af df 	jmp	0x1bf5e	; 0x1bf5e <__tablejump2__>
        {
            case GPIB_TX_START:
                // Wait for release of DAV and EOI before starting
				// IF DAV = 0 the bus is busy
                if(GPIB_PIN_TST(DAV) == 1)
   10d0c:	19 9b       	sbis	0x03, 1	; 3
   10d0e:	12 c0       	rjmp	.+36     	; 0x10d34 <gpib_write_byte+0xce>
					// We arive here in Read Mode - see gpib_bus_read_init(0);

					// Switch GBIB driver direction to Write
					// CPU has BUS already set IN with pullups = 0xff - see gpib_bus_read_init(0);
					// When we switch the GPIB drivers will be in OC mode and off the bus (0xff)
					GPIB_IO_HI(TE); // BUS OUT, DAV OUT, NRFD and NDAC IN
   10d10:	42 9a       	sbi	0x08, 2	; 8
   10d12:	3a 9a       	sbi	0x07, 2	; 7
					GPIB_IO_LOW(DC);// ATN OUT, EOI OUT, SRQ IN
   10d14:	44 98       	cbi	0x08, 4	; 8
   10d16:	3c 9a       	sbi	0x07, 4	; 7
#endif
                    // My testing with various GPIB devices shows that we MUST assert ATN EARLY!
                    if(ch & ATN_FLAG)
   10d18:	ee 85       	ldd	r30, Y+14	; 0x0e
   10d1a:	ff 85       	ldd	r31, Y+15	; 0x0f
   10d1c:	f2 ff       	sbrs	r31, 2
   10d1e:	03 c0       	rjmp	.+6      	; 0x10d26 <gpib_write_byte+0xc0>
                        GPIB_IO_LOW(ATN);   // FYI: SS80 never sends ATN from a device
   10d20:	5e 98       	cbi	0x0b, 6	; 11
   10d22:	56 9a       	sbi	0x0a, 6	; 10
   10d24:	01 c0       	rjmp	.+2      	; 0x10d28 <gpib_write_byte+0xc2>
                    else
                        GPIB_PIN_FLOAT_UP(ATN);
   10d26:	56 98       	cbi	0x0a, 6	; 10

                    gpib_timeout_set(HTIMEOUT);
   10d28:	64 ef       	ldi	r22, 0xF4	; 244
   10d2a:	71 e0       	ldi	r23, 0x01	; 1
   10d2c:	80 e0       	ldi	r24, 0x00	; 0
   10d2e:	90 e0       	ldi	r25, 0x00	; 0
   10d30:	38 de       	rcall	.-912    	; 0x109a2 <gpib_timeout_set>
                    tx_state = GPIB_TX_WAIT_READY;
   10d32:	11 e0       	ldi	r17, 0x01	; 1
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   10d34:	80 91 ab 1c 	lds	r24, 0x1CAB	; 0x801cab <gpib_timer+0x8>
                        GPIB_PIN_FLOAT_UP(ATN);

                    gpib_timeout_set(HTIMEOUT);
                    tx_state = GPIB_TX_WAIT_READY;
                }
                if (gpib_timeout_test())
   10d38:	88 23       	and	r24, r24
   10d3a:	71 f2       	breq	.-100    	; 0x10cd8 <gpib_write_byte+0x72>
                {
                    if(debuglevel & (GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10d3c:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   10d40:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   10d44:	86 70       	andi	r24, 0x06	; 6
   10d46:	99 27       	eor	r25, r25
   10d48:	89 2b       	or	r24, r25
   10d4a:	51 f1       	breq	.+84     	; 0x10da0 <gpib_write_byte+0x13a>
                        printf("<BUS waiting for DAV==1>\n");
   10d4c:	2b 85       	ldd	r18, Y+11	; 0x0b
   10d4e:	3c 85       	ldd	r19, Y+12	; 0x0c
   10d50:	4d 85       	ldd	r20, Y+13	; 0x0d
   10d52:	ed b7       	in	r30, 0x3d	; 61
   10d54:	fe b7       	in	r31, 0x3e	; 62
   10d56:	21 83       	std	Z+1, r18	; 0x01
   10d58:	32 83       	std	Z+2, r19	; 0x02
   10d5a:	43 83       	std	Z+3, r20	; 0x03
   10d5c:	1f c0       	rjmp	.+62     	; 0x10d9c <gpib_write_byte+0x136>
                }
                break;

            case GPIB_TX_WAIT_READY:
                // Wait for ready condition
                if(GPIB_PIN_TST(NRFD) == 1 && GPIB_PIN_TST(NDAC) == 0)
   10d5e:	4a 9b       	sbis	0x09, 2	; 9
   10d60:	08 c0       	rjmp	.+16     	; 0x10d72 <gpib_write_byte+0x10c>
   10d62:	4b 99       	sbic	0x09, 3	; 9
                {
                    gpib_timeout_set(HTIMEOUT);
   10d64:	06 c0       	rjmp	.+12     	; 0x10d72 <gpib_write_byte+0x10c>
   10d66:	64 ef       	ldi	r22, 0xF4	; 244
   10d68:	71 e0       	ldi	r23, 0x01	; 1
   10d6a:	80 e0       	ldi	r24, 0x00	; 0
   10d6c:	90 e0       	ldi	r25, 0x00	; 0
                    tx_state = GPIB_TX_PUT_DATA;
   10d6e:	19 de       	rcall	.-974    	; 0x109a2 <gpib_timeout_set>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   10d70:	12 e0       	ldi	r17, 0x02	; 2
   10d72:	80 91 ab 1c 	lds	r24, 0x1CAB	; 0x801cab <gpib_timer+0x8>
                if(GPIB_PIN_TST(NRFD) == 1 && GPIB_PIN_TST(NDAC) == 0)
                {
                    gpib_timeout_set(HTIMEOUT);
                    tx_state = GPIB_TX_PUT_DATA;
                }
                if (gpib_timeout_test())
   10d76:	88 23       	and	r24, r24
   10d78:	09 f4       	brne	.+2      	; 0x10d7c <gpib_write_byte+0x116>
                {
                    if(debuglevel & (GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10d7a:	ae cf       	rjmp	.-164    	; 0x10cd8 <gpib_write_byte+0x72>
   10d7c:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   10d80:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   10d84:	86 70       	andi	r24, 0x06	; 6
   10d86:	99 27       	eor	r25, r25
   10d88:	89 2b       	or	r24, r25
                        printf("<BUS waiting for NRFD==1 && NDAC == 0>\n");
   10d8a:	51 f0       	breq	.+20     	; 0x10da0 <gpib_write_byte+0x13a>
   10d8c:	88 85       	ldd	r24, Y+8	; 0x08
   10d8e:	99 85       	ldd	r25, Y+9	; 0x09
   10d90:	aa 85       	ldd	r26, Y+10	; 0x0a
   10d92:	ed b7       	in	r30, 0x3d	; 61
   10d94:	fe b7       	in	r31, 0x3e	; 62
   10d96:	81 83       	std	Z+1, r24	; 0x01
   10d98:	92 83       	std	Z+2, r25	; 0x02
   10d9a:	a3 83       	std	Z+3, r26	; 0x03
   10d9c:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
                    ch |= TIMEOUT_FLAG;
   10da0:	2e 85       	ldd	r18, Y+14	; 0x0e
   10da2:	3f 85       	ldd	r19, Y+15	; 0x0f
   10da4:	30 64       	ori	r19, 0x40	; 64
   10da6:	3f 87       	std	Y+15, r19	; 0x0f
   10da8:	2e 87       	std	Y+14, r18	; 0x0e
                }
                break;

            case GPIB_TX_PUT_DATA:

                if(ch & EOI_FLAG)
   10daa:	b5 c0       	rjmp	.+362    	; 0x10f16 <gpib_write_byte+0x2b0>
   10dac:	8e 85       	ldd	r24, Y+14	; 0x0e
   10dae:	9f 85       	ldd	r25, Y+15	; 0x0f
   10db0:	90 ff       	sbrs	r25, 0
                    GPIB_IO_LOW(EOI);
   10db2:	03 c0       	rjmp	.+6      	; 0x10dba <gpib_write_byte+0x154>
   10db4:	28 98       	cbi	0x05, 0	; 5
   10db6:	20 9a       	sbi	0x04, 0	; 4
                else
                    GPIB_PIN_FLOAT_UP(EOI);
   10db8:	01 c0       	rjmp	.+2      	; 0x10dbc <gpib_write_byte+0x156>

                GPIB_BUS_WR((ch & 0xff) ^ 0xff);  // Write Data inverted
   10dba:	20 98       	cbi	0x04, 0	; 4
   10dbc:	8f ef       	ldi	r24, 0xFF	; 255
   10dbe:	81 b9       	out	0x01, r24	; 1
   10dc0:	8e 85       	ldd	r24, Y+14	; 0x0e
   10dc2:	80 95       	com	r24
#if BOARD == 2
				// Switch to Tristate mode to soeed up Write
                GPIB_IO_HI(PE); 
   10dc4:	82 b9       	out	0x02, r24	; 2
   10dc6:	43 9a       	sbi	0x08, 3	; 8
   10dc8:	3b 9a       	sbi	0x07, 3	; 7
   10dca:	9d e0       	ldi	r25, 0x0D	; 13
   10dcc:	9a 95       	dec	r25
#endif
                GPIB_BUS_SETTLE();                // Let Data BUS settle

                gpib_timeout_set(HTIMEOUT);
   10dce:	f1 f7       	brne	.-4      	; 0x10dcc <gpib_write_byte+0x166>
   10dd0:	00 00       	nop
   10dd2:	64 ef       	ldi	r22, 0xF4	; 244
   10dd4:	71 e0       	ldi	r23, 0x01	; 1
   10dd6:	80 e0       	ldi	r24, 0x00	; 0
   10dd8:	90 e0       	ldi	r25, 0x00	; 0
                tx_state = GPIB_TX_SET_DAV_LOW;
   10dda:	e3 dd       	rcall	.-1082   	; 0x109a2 <gpib_timeout_set>
                break;


            case GPIB_TX_SET_DAV_LOW:
                GPIB_IO_LOW(DAV);
   10ddc:	13 e0       	ldi	r17, 0x03	; 3
                gpib_timeout_set(HTIMEOUT);
   10dde:	7c cf       	rjmp	.-264    	; 0x10cd8 <gpib_write_byte+0x72>
   10de0:	29 98       	cbi	0x05, 1	; 5
   10de2:	21 9a       	sbi	0x04, 1	; 4
   10de4:	64 ef       	ldi	r22, 0xF4	; 244
   10de6:	71 e0       	ldi	r23, 0x01	; 1
   10de8:	80 e0       	ldi	r24, 0x00	; 0
                tx_state = GPIB_TX_WAIT_FOR_NRFD_LOW;
                break;

            ///@brief first device is ready
            case GPIB_TX_WAIT_FOR_NRFD_LOW:
                if (GPIB_PIN_TST(NRFD) == 0)
   10dea:	90 e0       	ldi	r25, 0x00	; 0
   10dec:	da dd       	rcall	.-1100   	; 0x109a2 <gpib_timeout_set>
                {
                    gpib_timeout_set(HTIMEOUT);
   10dee:	14 e0       	ldi	r17, 0x04	; 4
   10df0:	73 cf       	rjmp	.-282    	; 0x10cd8 <gpib_write_byte+0x72>
   10df2:	4a 99       	sbic	0x09, 2	; 9
   10df4:	07 c0       	rjmp	.+14     	; 0x10e04 <gpib_write_byte+0x19e>
   10df6:	64 ef       	ldi	r22, 0xF4	; 244
   10df8:	71 e0       	ldi	r23, 0x01	; 1
                    tx_state = GPIB_TX_WAIT_FOR_NDAC_HI;
   10dfa:	80 e0       	ldi	r24, 0x00	; 0
                    break;
   10dfc:	90 e0       	ldi	r25, 0x00	; 0
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   10dfe:	d1 dd       	rcall	.-1118   	; 0x109a2 <gpib_timeout_set>
   10e00:	15 e0       	ldi	r17, 0x05	; 5
                {
                    gpib_timeout_set(HTIMEOUT);
                    tx_state = GPIB_TX_WAIT_FOR_NDAC_HI;
                    break;
                }
                if (gpib_timeout_test())
   10e02:	6a cf       	rjmp	.-300    	; 0x10cd8 <gpib_write_byte+0x72>
   10e04:	80 91 ab 1c 	lds	r24, 0x1CAB	; 0x801cab <gpib_timer+0x8>
                {
                    ch |= TIMEOUT_FLAG;
   10e08:	88 23       	and	r24, r24
   10e0a:	09 f4       	brne	.+2      	; 0x10e0e <gpib_write_byte+0x1a8>
   10e0c:	65 cf       	rjmp	.-310    	; 0x10cd8 <gpib_write_byte+0x72>
   10e0e:	ee 85       	ldd	r30, Y+14	; 0x0e
   10e10:	ff 85       	ldd	r31, Y+15	; 0x0f
                    tx_state = GPIB_TX_ERROR;
                    if(debuglevel & (GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10e12:	f0 64       	ori	r31, 0x40	; 64
   10e14:	ff 87       	std	Y+15, r31	; 0x0f
   10e16:	ee 87       	std	Y+14, r30	; 0x0e
   10e18:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   10e1c:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   10e20:	86 70       	andi	r24, 0x06	; 6
   10e22:	99 27       	eor	r25, r25
                        printf("<BUS waiting for NRFD==0>\n");
   10e24:	89 2b       	or	r24, r25
   10e26:	09 f4       	brne	.+2      	; 0x10e2a <gpib_write_byte+0x1c4>
   10e28:	76 c0       	rjmp	.+236    	; 0x10f16 <gpib_write_byte+0x2b0>
   10e2a:	ed b7       	in	r30, 0x3d	; 61
   10e2c:	fe b7       	in	r31, 0x3e	; 62
   10e2e:	21 82       	std	Z+1, r2	; 0x01
                }
                break;

            ///@brief ALL devices are ready
            case GPIB_TX_WAIT_FOR_NDAC_HI:
                if(GPIB_PIN_TST(NDAC) == 1)         // Byte byte accepted
   10e30:	32 82       	std	Z+2, r3	; 0x02
   10e32:	43 82       	std	Z+3, r4	; 0x03
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   10e34:	43 c0       	rjmp	.+134    	; 0x10ebc <gpib_write_byte+0x256>
   10e36:	4b 99       	sbic	0x09, 3	; 9
                if(GPIB_PIN_TST(NDAC) == 1)         // Byte byte accepted
                {
                    tx_state = GPIB_TX_SET_DAV_HI;
                    break;
                }
                if (gpib_timeout_test())
   10e38:	6a c0       	rjmp	.+212    	; 0x10f0e <gpib_write_byte+0x2a8>
   10e3a:	80 91 ab 1c 	lds	r24, 0x1CAB	; 0x801cab <gpib_timer+0x8>
                {
                    ch |= TIMEOUT_FLAG;
   10e3e:	88 23       	and	r24, r24
   10e40:	09 f4       	brne	.+2      	; 0x10e44 <gpib_write_byte+0x1de>
   10e42:	4a cf       	rjmp	.-364    	; 0x10cd8 <gpib_write_byte+0x72>
   10e44:	2e 85       	ldd	r18, Y+14	; 0x0e
   10e46:	3f 85       	ldd	r19, Y+15	; 0x0f
                    tx_state = GPIB_TX_ERROR;
                    if(debuglevel & (GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10e48:	30 64       	ori	r19, 0x40	; 64
   10e4a:	3f 87       	std	Y+15, r19	; 0x0f
   10e4c:	2e 87       	std	Y+14, r18	; 0x0e
   10e4e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   10e52:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   10e56:	86 70       	andi	r24, 0x06	; 6
   10e58:	99 27       	eor	r25, r25
                        printf("<BUS waiting for NDAC==1>\n");
   10e5a:	89 2b       	or	r24, r25
   10e5c:	09 f4       	brne	.+2      	; 0x10e60 <gpib_write_byte+0x1fa>
   10e5e:	5b c0       	rjmp	.+182    	; 0x10f16 <gpib_write_byte+0x2b0>
   10e60:	ed b7       	in	r30, 0x3d	; 61
   10e62:	fe b7       	in	r31, 0x3e	; 62
                }
                break;

            ///@release BUS
            case GPIB_TX_SET_DAV_HI:
                GPIB_PIN_FLOAT_UP(DAV);
   10e64:	61 82       	std	Z+1, r6	; 0x01
   10e66:	72 82       	std	Z+2, r7	; 0x02
   10e68:	83 82       	std	Z+3, r8	; 0x03
   10e6a:	28 c0       	rjmp	.+80     	; 0x10ebc <gpib_write_byte+0x256>
				GPIB_BUS_SETTLE();			// give some time

				gpib_bus_read_init(0);		// Free BUS, NOT busy
   10e6c:	21 98       	cbi	0x04, 1	; 4
   10e6e:	fd e0       	ldi	r31, 0x0D	; 13
   10e70:	fa 95       	dec	r31
   10e72:	f1 f7       	brne	.-4      	; 0x10e70 <gpib_write_byte+0x20a>

                gpib_timeout_set(HTIMEOUT);
   10e74:	00 00       	nop
   10e76:	80 e0       	ldi	r24, 0x00	; 0
   10e78:	90 e0       	ldi	r25, 0x00	; 0
   10e7a:	9d dd       	rcall	.-1222   	; 0x109b6 <gpib_bus_read_init>
   10e7c:	64 ef       	ldi	r22, 0xF4	; 244
   10e7e:	71 e0       	ldi	r23, 0x01	; 1
                tx_state = GPIB_TX_WAIT_FOR_DAV_HI;
   10e80:	80 e0       	ldi	r24, 0x00	; 0
                break;
   10e82:	90 e0       	ldi	r25, 0x00	; 0

			/// We are in read mode now
            ///@wait for DAV to finish float HI - finishing floating HI
            case GPIB_TX_WAIT_FOR_DAV_HI:
                if(GPIO_PIN_TST(DAV) == 1)
   10e84:	8e dd       	rcall	.-1252   	; 0x109a2 <gpib_timeout_set>
   10e86:	17 e0       	ldi	r17, 0x07	; 7
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   10e88:	27 cf       	rjmp	.-434    	; 0x10cd8 <gpib_write_byte+0x72>
   10e8a:	19 99       	sbic	0x03, 1	; 3
                if(GPIO_PIN_TST(DAV) == 1)
                {
                    tx_state = GPIB_TX_FINISH;
                    break;
                }
                if (gpib_timeout_test())
   10e8c:	42 c0       	rjmp	.+132    	; 0x10f12 <gpib_write_byte+0x2ac>
   10e8e:	80 91 ab 1c 	lds	r24, 0x1CAB	; 0x801cab <gpib_timer+0x8>
                {
                    ch |= TIMEOUT_FLAG;
   10e92:	88 23       	and	r24, r24
   10e94:	09 f4       	brne	.+2      	; 0x10e98 <gpib_write_byte+0x232>
   10e96:	20 cf       	rjmp	.-448    	; 0x10cd8 <gpib_write_byte+0x72>
   10e98:	2e 85       	ldd	r18, Y+14	; 0x0e
   10e9a:	3f 85       	ldd	r19, Y+15	; 0x0f
                    tx_state = GPIB_TX_ERROR;
                    if(debuglevel & (GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10e9c:	30 64       	ori	r19, 0x40	; 64
   10e9e:	3f 87       	std	Y+15, r19	; 0x0f
   10ea0:	2e 87       	std	Y+14, r18	; 0x0e
   10ea2:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   10ea6:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   10eaa:	86 70       	andi	r24, 0x06	; 6
                        printf("<BUS waiting for DAV==1>\n");
   10eac:	99 27       	eor	r25, r25
   10eae:	89 2b       	or	r24, r25
   10eb0:	91 f1       	breq	.+100    	; 0x10f16 <gpib_write_byte+0x2b0>
   10eb2:	ed b7       	in	r30, 0x3d	; 61
   10eb4:	fe b7       	in	r31, 0x3e	; 62
   10eb6:	c1 82       	std	Z+1, r12	; 0x01
   10eb8:	d2 82       	std	Z+2, r13	; 0x02
   10eba:	e3 82       	std	Z+3, r14	; 0x03
            case GPIB_TX_FINISH:
                tx_state = GPIB_TX_DONE;
                break;

            case GPIB_TX_ERROR:
                if(debuglevel & (GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10ebc:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   10ec0:	2a c0       	rjmp	.+84     	; 0x10f16 <gpib_write_byte+0x2b0>
   10ec2:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   10ec6:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   10eca:	86 70       	andi	r24, 0x06	; 6
                    printf("<NRFD=%d,NDAV=%d>\n", GPIB_PIN_TST(NRFD),GPIB_PIN_TST(NDAC));
   10ecc:	99 27       	eor	r25, r25
   10ece:	89 2b       	or	r24, r25
   10ed0:	b1 f0       	breq	.+44     	; 0x10efe <gpib_write_byte+0x298>
   10ed2:	89 b1       	in	r24, 0x09	; 9
   10ed4:	99 b1       	in	r25, 0x09	; 9
   10ed6:	93 fb       	bst	r25, 3
   10ed8:	99 27       	eor	r25, r25
   10eda:	90 f9       	bld	r25, 0
   10edc:	ed b7       	in	r30, 0x3d	; 61
   10ede:	fe b7       	in	r31, 0x3e	; 62
   10ee0:	96 83       	std	Z+6, r25	; 0x06
   10ee2:	17 82       	std	Z+7, r1	; 0x07
   10ee4:	82 fb       	bst	r24, 2
   10ee6:	88 27       	eor	r24, r24
   10ee8:	80 f9       	bld	r24, 0
   10eea:	84 83       	std	Z+4, r24	; 0x04
   10eec:	15 82       	std	Z+5, r1	; 0x05
   10eee:	8c e3       	ldi	r24, 0x3C	; 60
   10ef0:	9f e0       	ldi	r25, 0x0F	; 15
   10ef2:	a0 e0       	ldi	r26, 0x00	; 0
   10ef4:	81 83       	std	Z+1, r24	; 0x01
// Free BUS, BUSY on error
				gpib_bus_read_init(1);		
   10ef6:	92 83       	std	Z+2, r25	; 0x02
   10ef8:	a3 83       	std	Z+3, r26	; 0x03
   10efa:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
                tx_state = GPIB_TX_DONE;
                break;
   10efe:	81 e0       	ldi	r24, 0x01	; 1
	// GPIB_IO_LOW(PE);			// BUS OC PULLUP

    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);

    while(tx_state != GPIB_TX_DONE )
   10f00:	90 e0       	ldi	r25, 0x00	; 0
   10f02:	59 dd       	rcall	.-1358   	; 0x109b6 <gpib_bus_read_init>
   10f04:	0a c0       	rjmp	.+20     	; 0x10f1a <gpib_write_byte+0x2b4>
   10f06:	1a 30       	cpi	r17, 0x0A	; 10

            ///@brief ALL devices are ready
            case GPIB_TX_WAIT_FOR_NDAC_HI:
                if(GPIB_PIN_TST(NDAC) == 1)         // Byte byte accepted
                {
                    tx_state = GPIB_TX_SET_DAV_HI;
   10f08:	09 f0       	breq	.+2      	; 0x10f0c <gpib_write_byte+0x2a6>
   10f0a:	e6 ce       	rjmp	.-564    	; 0x10cd8 <gpib_write_byte+0x72>
			/// We are in read mode now
            ///@wait for DAV to finish float HI - finishing floating HI
            case GPIB_TX_WAIT_FOR_DAV_HI:
                if(GPIO_PIN_TST(DAV) == 1)
                {
                    tx_state = GPIB_TX_FINISH;
   10f0c:	06 c0       	rjmp	.+12     	; 0x10f1a <gpib_write_byte+0x2b4>
   10f0e:	16 e0       	ldi	r17, 0x06	; 6
                    break;
                }
                if (gpib_timeout_test())
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
   10f10:	e3 ce       	rjmp	.-570    	; 0x10cd8 <gpib_write_byte+0x72>
   10f12:	18 e0       	ldi	r17, 0x08	; 8
            case GPIB_TX_DONE:
                break;
        }
    }
    return(ch);
}
   10f14:	e1 ce       	rjmp	.-574    	; 0x10cd8 <gpib_write_byte+0x72>
   10f16:	19 e0       	ldi	r17, 0x09	; 9
   10f18:	df ce       	rjmp	.-578    	; 0x10cd8 <gpib_write_byte+0x72>
   10f1a:	8e 85       	ldd	r24, Y+14	; 0x0e
   10f1c:	9f 85       	ldd	r25, Y+15	; 0x0f
   10f1e:	2f 96       	adiw	r28, 0x0f	; 15
   10f20:	0f b6       	in	r0, 0x3f	; 63
   10f22:	f8 94       	cli
   10f24:	de bf       	out	0x3e, r29	; 62
   10f26:	0f be       	out	0x3f, r0	; 63
   10f28:	cd bf       	out	0x3d, r28	; 61
   10f2a:	df 91       	pop	r29
   10f2c:	cf 91       	pop	r28
   10f2e:	1f 91       	pop	r17
   10f30:	ef 90       	pop	r14
   10f32:	df 90       	pop	r13
   10f34:	cf 90       	pop	r12
   10f36:	8f 90       	pop	r8
   10f38:	7f 90       	pop	r7
   10f3a:	6f 90       	pop	r6
   10f3c:	4f 90       	pop	r4
   10f3e:	3f 90       	pop	r3
   10f40:	2f 90       	pop	r2
   10f42:	08 95       	ret

00010f44 <gpib_decode_header>:
/// @see: gpib.h _FLAGS defines for a full list is control lines we track
/// @see: gpib_trace()
/// @return void
///@param[in] fo: FILE pointer or "stdout"
void gpib_decode_header( FILE *fo)
{
   10f44:	cf 93       	push	r28
   10f46:	df 93       	push	r29
   10f48:	ec 01       	movw	r28, r24
    if(fo == NULL)
   10f4a:	89 2b       	or	r24, r25
   10f4c:	21 f4       	brne	.+8      	; 0x10f56 <gpib_decode_header+0x12>
        fo = stdout;
   10f4e:	c0 91 85 1c 	lds	r28, 0x1C85	; 0x801c85 <__iob+0x2>
   10f52:	d0 91 86 1c 	lds	r29, 0x1C86	; 0x801c86 <__iob+0x3>
        
    fprintf(fo,"===========================================\n");
   10f56:	be 01       	movw	r22, r28
   10f58:	83 ed       	ldi	r24, 0xD3	; 211
   10f5a:	9b e0       	ldi	r25, 0x0B	; 11
   10f5c:	0e 94 c8 75 	call	0xeb90	; 0xeb90 <fputs>
    fprintf(fo,"GPIB bus state\n");
   10f60:	be 01       	movw	r22, r28
   10f62:	80 e0       	ldi	r24, 0x00	; 0
   10f64:	9c e0       	ldi	r25, 0x0C	; 12
   10f66:	0e 94 c8 75 	call	0xeb90	; 0xeb90 <fputs>
    fprintf(fo,"HH . AESRPITB gpib\n");
   10f6a:	be 01       	movw	r22, r28
   10f6c:	80 e1       	ldi	r24, 0x10	; 16
   10f6e:	9c e0       	ldi	r25, 0x0C	; 12
   10f70:	0e 94 c8 75 	call	0xeb90	; 0xeb90 <fputs>
    fprintf(fo,"HH = Hex value of Command or Data\n");
   10f74:	be 01       	movw	r22, r28
   10f76:	84 e2       	ldi	r24, 0x24	; 36
   10f78:	9c e0       	ldi	r25, 0x0C	; 12
   10f7a:	0e 94 c8 75 	call	0xeb90	; 0xeb90 <fputs>
    fprintf(fo,"   . = ASCII of XX only for 0x20 .. 0x7e\n");
   10f7e:	be 01       	movw	r22, r28
   10f80:	87 e4       	ldi	r24, 0x47	; 71
   10f82:	9c e0       	ldi	r25, 0x0C	; 12
   10f84:	0e 94 c8 75 	call	0xeb90	; 0xeb90 <fputs>
    fprintf(fo,"     A = ATN\n");
   10f88:	be 01       	movw	r22, r28
   10f8a:	81 e7       	ldi	r24, 0x71	; 113
   10f8c:	9c e0       	ldi	r25, 0x0C	; 12
   10f8e:	0e 94 c8 75 	call	0xeb90	; 0xeb90 <fputs>
    fprintf(fo,"      E = EOI\n");
   10f92:	be 01       	movw	r22, r28
   10f94:	8f e7       	ldi	r24, 0x7F	; 127
   10f96:	9c e0       	ldi	r25, 0x0C	; 12
   10f98:	0e 94 c8 75 	call	0xeb90	; 0xeb90 <fputs>
    fprintf(fo,"       S = SRQ\n");
   10f9c:	be 01       	movw	r22, r28
   10f9e:	8e e8       	ldi	r24, 0x8E	; 142
   10fa0:	9c e0       	ldi	r25, 0x0C	; 12
   10fa2:	0e 94 c8 75 	call	0xeb90	; 0xeb90 <fputs>
    fprintf(fo,"        R = REN\n");
   10fa6:	be 01       	movw	r22, r28
   10fa8:	8e e9       	ldi	r24, 0x9E	; 158
   10faa:	9c e0       	ldi	r25, 0x0C	; 12
   10fac:	0e 94 c8 75 	call	0xeb90	; 0xeb90 <fputs>
    fprintf(fo,"         I = IFC\n");
   10fb0:	be 01       	movw	r22, r28
   10fb2:	8f ea       	ldi	r24, 0xAF	; 175
   10fb4:	9c e0       	ldi	r25, 0x0C	; 12
   10fb6:	0e 94 c8 75 	call	0xeb90	; 0xeb90 <fputs>
    fprintf(fo,"          P = Parallel Poll seen\n");
   10fba:	be 01       	movw	r22, r28
   10fbc:	81 ec       	ldi	r24, 0xC1	; 193
   10fbe:	9c e0       	ldi	r25, 0x0C	; 12
   10fc0:	0e 94 c8 75 	call	0xeb90	; 0xeb90 <fputs>
    fprintf(fo,"           T = TIMEOUT\n");
   10fc4:	be 01       	movw	r22, r28
   10fc6:	83 ee       	ldi	r24, 0xE3	; 227
   10fc8:	9c e0       	ldi	r25, 0x0C	; 12
   10fca:	0e 94 c8 75 	call	0xeb90	; 0xeb90 <fputs>
    fprintf(fo,"            B = BUS_ERROR\n");
   10fce:	be 01       	movw	r22, r28
   10fd0:	8b ef       	ldi	r24, 0xFB	; 251
   10fd2:	9c e0       	ldi	r25, 0x0C	; 12
   10fd4:	0e 94 c8 75 	call	0xeb90	; 0xeb90 <fputs>
    fprintf(fo,"              GPIB commands\n");
   10fd8:	be 01       	movw	r22, r28
   10fda:	86 e1       	ldi	r24, 0x16	; 22
   10fdc:	9d e0       	ldi	r25, 0x0D	; 13
   10fde:	0e 94 c8 75 	call	0xeb90	; 0xeb90 <fputs>
}
   10fe2:	df 91       	pop	r29
   10fe4:	cf 91       	pop	r28
   10fe6:	08 95       	ret

00010fe8 <gpib_trace_display>:
/// @return  void
/// Note the bits we can read depends on what hardware verions we have
/// V2 hardware can only read status bits based on GPIB control buffer direction
///   FIXME We could add a test for read/write state ??
void gpib_trace_display(uint16_t status,int trace_state)
{
   10fe8:	a9 e8       	ldi	r26, 0x89	; 137
   10fea:	b0 e0       	ldi	r27, 0x00	; 0
   10fec:	ea ef       	ldi	r30, 0xFA	; 250
   10fee:	f7 e8       	ldi	r31, 0x87	; 135
   10ff0:	0c 94 e4 df 	jmp	0x1bfc8	; 0x1bfc8 <__prologue_saves__+0xc>
   10ff4:	8c 01       	movw	r16, r24
   10ff6:	5b 01       	movw	r10, r22
    char str[128];
    char *tmp= str;
    uint8_t bus = status & 0xff;
    extern FILE *gpib_log_fp;

    str[0] = 0;
   10ff8:	1a 86       	std	Y+10, r1	; 0x0a
   10ffa:	4c 01       	movw	r8, r24
   10ffc:	88 24       	eor	r8, r8
   10ffe:	44 e0       	ldi	r20, 0x04	; 4
   11000:	94 22       	and	r9, r20
   11002:	ce 01       	movw	r24, r28
   11004:	0a 96       	adiw	r24, 0x0a	; 10
   11006:	7c 01       	movw	r14, r24

    // Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
   11008:	62 30       	cpi	r22, 0x02	; 2
   1100a:	71 05       	cpc	r23, r1
   1100c:	e8 f4       	brcc	.+58     	; 0x11048 <gpib_trace_display+0x60>
    {
        uint8_t printable = ' ';                          // Data
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
   1100e:	81 14       	cp	r8, r1
   11010:	91 04       	cpc	r9, r1
   11012:	29 f4       	brne	.+10     	; 0x1101e <gpib_trace_display+0x36>
///   FIXME We could add a test for read/write state ??
void gpib_trace_display(uint16_t status,int trace_state)
{
    char str[128];
    char *tmp= str;
    uint8_t bus = status & 0xff;
   11014:	80 2f       	mov	r24, r16

    // Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
    {
        uint8_t printable = ' ';                          // Data
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
   11016:	90 ee       	ldi	r25, 0xE0	; 224
   11018:	90 0f       	add	r25, r16
   1101a:	9f 35       	cpi	r25, 0x5F	; 95
   1101c:	08 f0       	brcs	.+2      	; 0x11020 <gpib_trace_display+0x38>
    str[0] = 0;

    // Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
    {
        uint8_t printable = ' ';                          // Data
   1101e:	80 e2       	ldi	r24, 0x20	; 32
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
            printable = bus;
        sprintf(str, "%02X %c ", (int)bus & 0xff, (int)printable);
   11020:	90 e0       	ldi	r25, 0x00	; 0
   11022:	ed b7       	in	r30, 0x3d	; 61
   11024:	fe b7       	in	r31, 0x3e	; 62
   11026:	91 87       	std	Z+9, r25	; 0x09
   11028:	80 87       	std	Z+8, r24	; 0x08
   1102a:	c8 01       	movw	r24, r16
   1102c:	99 27       	eor	r25, r25
   1102e:	97 83       	std	Z+7, r25	; 0x07
   11030:	86 83       	std	Z+6, r24	; 0x06
   11032:	83 e3       	ldi	r24, 0x33	; 51
   11034:	9f e0       	ldi	r25, 0x0F	; 15
   11036:	a0 e0       	ldi	r26, 0x00	; 0
   11038:	83 83       	std	Z+3, r24	; 0x03
   1103a:	94 83       	std	Z+4, r25	; 0x04
   1103c:	a5 83       	std	Z+5, r26	; 0x05
   1103e:	f2 82       	std	Z+2, r15	; 0x02
   11040:	e1 82       	std	Z+1, r14	; 0x01
   11042:	0e 94 91 45 	call	0x8b22	; 0x8b22 <sprintf_P>
   11046:	0c c0       	rjmp	.+24     	; 0x11060 <gpib_trace_display+0x78>
    }
    else
    {
        sprintf(str, "     ");
   11048:	8d e2       	ldi	r24, 0x2D	; 45
   1104a:	9f e0       	ldi	r25, 0x0F	; 15
   1104c:	a0 e0       	ldi	r26, 0x00	; 0
   1104e:	ed b7       	in	r30, 0x3d	; 61
   11050:	fe b7       	in	r31, 0x3e	; 62
   11052:	83 83       	std	Z+3, r24	; 0x03
   11054:	94 83       	std	Z+4, r25	; 0x04
   11056:	a5 83       	std	Z+5, r26	; 0x05
   11058:	f2 82       	std	Z+2, r15	; 0x02
   1105a:	e1 82       	std	Z+1, r14	; 0x01
   1105c:	0e 94 91 45 	call	0x8b22	; 0x8b22 <sprintf_P>
    }

    tmp = str + strlen(str);
   11060:	f7 01       	movw	r30, r14
   11062:	01 90       	ld	r0, Z+
   11064:	00 20       	and	r0, r0
   11066:	e9 f7       	brne	.-6      	; 0x11062 <gpib_trace_display+0x7a>
   11068:	31 97       	sbiw	r30, 0x01	; 1
   1106a:	cf 01       	movw	r24, r30
   1106c:	01 96       	adiw	r24, 0x01	; 1

    if(status & ATN_FLAG)
   1106e:	81 14       	cp	r8, r1
   11070:	91 04       	cpc	r9, r1
   11072:	11 f0       	breq	.+4      	; 0x11078 <gpib_trace_display+0x90>
        *tmp++ = 'A';
   11074:	21 e4       	ldi	r18, 0x41	; 65
   11076:	01 c0       	rjmp	.+2      	; 0x1107a <gpib_trace_display+0x92>
    else
        *tmp++ = '-';
   11078:	2d e2       	ldi	r18, 0x2D	; 45
   1107a:	20 83       	st	Z, r18
   1107c:	dc 01       	movw	r26, r24
   1107e:	11 96       	adiw	r26, 0x01	; 1

    if(status & EOI_FLAG)
   11080:	10 ff       	sbrs	r17, 0
   11082:	02 c0       	rjmp	.+4      	; 0x11088 <gpib_trace_display+0xa0>
        *tmp++ = 'E';
   11084:	25 e4       	ldi	r18, 0x45	; 69
   11086:	01 c0       	rjmp	.+2      	; 0x1108a <gpib_trace_display+0xa2>
    else
        *tmp++ = '-';
   11088:	2d e2       	ldi	r18, 0x2D	; 45
   1108a:	fc 01       	movw	r30, r24
   1108c:	20 83       	st	Z, r18
   1108e:	fd 01       	movw	r30, r26
   11090:	31 96       	adiw	r30, 0x01	; 1

    if(status & SRQ_FLAG)
   11092:	11 ff       	sbrs	r17, 1
   11094:	02 c0       	rjmp	.+4      	; 0x1109a <gpib_trace_display+0xb2>
        *tmp++ = 'S';
   11096:	83 e5       	ldi	r24, 0x53	; 83
   11098:	01 c0       	rjmp	.+2      	; 0x1109c <gpib_trace_display+0xb4>
    else
        *tmp++ = '-';
   1109a:	8d e2       	ldi	r24, 0x2D	; 45
   1109c:	8c 93       	st	X, r24
   1109e:	df 01       	movw	r26, r30
   110a0:	11 96       	adiw	r26, 0x01	; 1

    if(status & REN_FLAG)
   110a2:	13 ff       	sbrs	r17, 3
   110a4:	02 c0       	rjmp	.+4      	; 0x110aa <gpib_trace_display+0xc2>
        *tmp++ = 'R';
   110a6:	82 e5       	ldi	r24, 0x52	; 82
   110a8:	01 c0       	rjmp	.+2      	; 0x110ac <gpib_trace_display+0xc4>
    else
        *tmp++ = '-';
   110aa:	8d e2       	ldi	r24, 0x2D	; 45
   110ac:	80 83       	st	Z, r24
   110ae:	fd 01       	movw	r30, r26
   110b0:	31 96       	adiw	r30, 0x01	; 1

    if(status & IFC_FLAG)
   110b2:	14 ff       	sbrs	r17, 4
   110b4:	02 c0       	rjmp	.+4      	; 0x110ba <gpib_trace_display+0xd2>
        *tmp++ = 'I';
   110b6:	89 e4       	ldi	r24, 0x49	; 73
   110b8:	01 c0       	rjmp	.+2      	; 0x110bc <gpib_trace_display+0xd4>
    else
        *tmp++ = '-';
   110ba:	8d e2       	ldi	r24, 0x2D	; 45
   110bc:	8c 93       	st	X, r24

    if(trace_state == TRACE_DISABLE)
   110be:	a1 14       	cp	r10, r1
   110c0:	b1 04       	cpc	r11, r1
   110c2:	d1 f4       	brne	.+52     	; 0x110f8 <gpib_trace_display+0x110>
   110c4:	df 01       	movw	r26, r30
   110c6:	11 96       	adiw	r26, 0x01	; 1
    {
        if(status & PP_FLAG)
   110c8:	15 ff       	sbrs	r17, 5
   110ca:	02 c0       	rjmp	.+4      	; 0x110d0 <gpib_trace_display+0xe8>
            *tmp++ = 'P';
   110cc:	80 e5       	ldi	r24, 0x50	; 80
   110ce:	01 c0       	rjmp	.+2      	; 0x110d2 <gpib_trace_display+0xea>
        else
            *tmp++ = '-';
   110d0:	8d e2       	ldi	r24, 0x2D	; 45
   110d2:	80 83       	st	Z, r24
   110d4:	fd 01       	movw	r30, r26
   110d6:	31 96       	adiw	r30, 0x01	; 1
        if(status & TIMEOUT_FLAG)
   110d8:	16 ff       	sbrs	r17, 6
   110da:	02 c0       	rjmp	.+4      	; 0x110e0 <gpib_trace_display+0xf8>
            *tmp++ = 'T';
   110dc:	84 e5       	ldi	r24, 0x54	; 84
   110de:	01 c0       	rjmp	.+2      	; 0x110e2 <gpib_trace_display+0xfa>
        else
            *tmp++ = '-';
   110e0:	8d e2       	ldi	r24, 0x2D	; 45
   110e2:	8c 93       	st	X, r24
   110e4:	cf 01       	movw	r24, r30
   110e6:	01 96       	adiw	r24, 0x01	; 1
        if(status & BUS_ERROR_FLAG)
            *tmp++ = 'B';
   110e8:	6c 01       	movw	r12, r24
            *tmp++ = '-';
        if(status & TIMEOUT_FLAG)
            *tmp++ = 'T';
        else
            *tmp++ = '-';
        if(status & BUS_ERROR_FLAG)
   110ea:	17 ff       	sbrs	r17, 7
   110ec:	02 c0       	rjmp	.+4      	; 0x110f2 <gpib_trace_display+0x10a>
            *tmp++ = 'B';
   110ee:	82 e4       	ldi	r24, 0x42	; 66
   110f0:	01 c0       	rjmp	.+2      	; 0x110f4 <gpib_trace_display+0x10c>
        else
            *tmp++ = '-';
   110f2:	8d e2       	ldi	r24, 0x2D	; 45
   110f4:	80 83       	st	Z, r24
   110f6:	08 c0       	rjmp	.+16     	; 0x11108 <gpib_trace_display+0x120>
    }
    else
    {
        // not used when tracing
        *tmp++ = '-';
   110f8:	8d e2       	ldi	r24, 0x2D	; 45
   110fa:	80 83       	st	Z, r24
        *tmp++ = '-';
   110fc:	81 83       	std	Z+1, r24	; 0x01
        *tmp++ = '-';
   110fe:	6f 01       	movw	r12, r30
   11100:	43 e0       	ldi	r20, 0x03	; 3
   11102:	c4 0e       	add	r12, r20
   11104:	d1 1c       	adc	r13, r1
   11106:	82 83       	std	Z+2, r24	; 0x02
    }
    *tmp = 0;
   11108:	f6 01       	movw	r30, r12
   1110a:	10 82       	st	Z, r1

    if(trace_state == TRACE_READ || trace_state == TRACE_BUS)
   1110c:	f1 e0       	ldi	r31, 0x01	; 1
   1110e:	af 1a       	sub	r10, r31
   11110:	b1 08       	sbc	r11, r1
   11112:	42 e0       	ldi	r20, 0x02	; 2
   11114:	a4 16       	cp	r10, r20
   11116:	b1 04       	cpc	r11, r1
   11118:	f0 f4       	brcc	.+60     	; 0x11156 <gpib_trace_display+0x16e>
    {
        if(status & DAV_FLAG)
   1111a:	15 ff       	sbrs	r17, 5
   1111c:	03 c0       	rjmp	.+6      	; 0x11124 <gpib_trace_display+0x13c>
            strcat(str,"  DAV");
   1111e:	63 e3       	ldi	r22, 0x33	; 51
   11120:	7d e0       	ldi	r23, 0x0D	; 13
   11122:	02 c0       	rjmp	.+4      	; 0x11128 <gpib_trace_display+0x140>
        else
            strcat(str,"     ");
   11124:	67 e3       	ldi	r22, 0x37	; 55
   11126:	74 e0       	ldi	r23, 0x04	; 4
   11128:	c7 01       	movw	r24, r14
   1112a:	0e 94 be 30 	call	0x617c	; 0x617c <strcat>
        if(status & NRFD_FLAG)
   1112e:	16 ff       	sbrs	r17, 6
   11130:	03 c0       	rjmp	.+6      	; 0x11138 <gpib_trace_display+0x150>
            strcat(str," NRFD");
   11132:	69 e3       	ldi	r22, 0x39	; 57
   11134:	7d e0       	ldi	r23, 0x0D	; 13
   11136:	02 c0       	rjmp	.+4      	; 0x1113c <gpib_trace_display+0x154>
        else
            strcat(str,"     ");
   11138:	67 e3       	ldi	r22, 0x37	; 55
   1113a:	74 e0       	ldi	r23, 0x04	; 4
   1113c:	c7 01       	movw	r24, r14
   1113e:	0e 94 be 30 	call	0x617c	; 0x617c <strcat>
        if(status & NDAC_FLAG)
   11142:	17 ff       	sbrs	r17, 7
   11144:	03 c0       	rjmp	.+6      	; 0x1114c <gpib_trace_display+0x164>
            strcat(str," NDAC");
   11146:	6f e3       	ldi	r22, 0x3F	; 63
   11148:	7d e0       	ldi	r23, 0x0D	; 13
   1114a:	02 c0       	rjmp	.+4      	; 0x11150 <gpib_trace_display+0x168>
        else
            strcat(str,"     ");
   1114c:	67 e3       	ldi	r22, 0x37	; 55
   1114e:	74 e0       	ldi	r23, 0x04	; 4
   11150:	c7 01       	movw	r24, r14
   11152:	0e 94 be 30 	call	0x617c	; 0x617c <strcat>
    }

    if( (status & ATN_FLAG) )
   11156:	81 14       	cp	r8, r1
   11158:	91 04       	cpc	r9, r1
   1115a:	09 f4       	brne	.+2      	; 0x1115e <gpib_trace_display+0x176>
   1115c:	5a c0       	rjmp	.+180    	; 0x11212 <gpib_trace_display+0x22a>
    {
        int i;
        int cmd = status & CMD_MASK;
   1115e:	c8 01       	movw	r24, r16
   11160:	8f 77       	andi	r24, 0x7F	; 127
   11162:	99 27       	eor	r25, r25
        if(cmd >= 0x020 && cmd <= 0x3e)
   11164:	9c 01       	movw	r18, r24
   11166:	20 52       	subi	r18, 0x20	; 32
   11168:	31 09       	sbc	r19, r1
   1116a:	2f 31       	cpi	r18, 0x1F	; 31
   1116c:	31 05       	cpc	r19, r1
   1116e:	48 f4       	brcc	.+18     	; 0x11182 <gpib_trace_display+0x19a>
            sprintf(tmp," MLA %02Xh", cmd & 0x1f);
   11170:	0f 71       	andi	r16, 0x1F	; 31
   11172:	11 27       	eor	r17, r17
   11174:	ed b7       	in	r30, 0x3d	; 61
   11176:	fe b7       	in	r31, 0x3e	; 62
   11178:	17 83       	std	Z+7, r17	; 0x07
   1117a:	06 83       	std	Z+6, r16	; 0x06
   1117c:	82 e2       	ldi	r24, 0x22	; 34
   1117e:	9f e0       	ldi	r25, 0x0F	; 15
   11180:	0e c0       	rjmp	.+28     	; 0x1119e <gpib_trace_display+0x1b6>
        else if(cmd >= 0x040 && cmd <= 0x4e)
   11182:	9c 01       	movw	r18, r24
   11184:	20 54       	subi	r18, 0x40	; 64
   11186:	31 09       	sbc	r19, r1
   11188:	2f 30       	cpi	r18, 0x0F	; 15
   1118a:	31 05       	cpc	r19, r1
   1118c:	88 f4       	brcc	.+34     	; 0x111b0 <gpib_trace_display+0x1c8>
            sprintf(tmp," MTA %02Xh", cmd & 0x1f);
   1118e:	0f 71       	andi	r16, 0x1F	; 31
   11190:	11 27       	eor	r17, r17
   11192:	ed b7       	in	r30, 0x3d	; 61
   11194:	fe b7       	in	r31, 0x3e	; 62
   11196:	17 83       	std	Z+7, r17	; 0x07
   11198:	06 83       	std	Z+6, r16	; 0x06
   1119a:	87 e1       	ldi	r24, 0x17	; 23
   1119c:	9f e0       	ldi	r25, 0x0F	; 15
   1119e:	a0 e0       	ldi	r26, 0x00	; 0
   111a0:	83 83       	std	Z+3, r24	; 0x03
   111a2:	94 83       	std	Z+4, r25	; 0x04
   111a4:	a5 83       	std	Z+5, r26	; 0x05
   111a6:	d2 82       	std	Z+2, r13	; 0x02
   111a8:	c1 82       	std	Z+1, r12	; 0x01
   111aa:	0e 94 91 45 	call	0x8b22	; 0x8b22 <sprintf_P>
   111ae:	31 c0       	rjmp	.+98     	; 0x11212 <gpib_trace_display+0x22a>
        else if(cmd >= 0x060 && cmd <= 0x6f)
   111b0:	9c 01       	movw	r18, r24
   111b2:	20 56       	subi	r18, 0x60	; 96
   111b4:	31 09       	sbc	r19, r1
   111b6:	20 31       	cpi	r18, 0x10	; 16
   111b8:	31 05       	cpc	r19, r1
   111ba:	28 f0       	brcs	.+10     	; 0x111c6 <gpib_trace_display+0x1de>
   111bc:	ef e8       	ldi	r30, 0x8F	; 143
   111be:	f1 e0       	ldi	r31, 0x01	; 1
   111c0:	00 e0       	ldi	r16, 0x00	; 0
   111c2:	10 e0       	ldi	r17, 0x00	; 0
   111c4:	0b c0       	rjmp	.+22     	; 0x111dc <gpib_trace_display+0x1f4>
            sprintf(tmp," MSA %02Xh", cmd & 0x1f);
   111c6:	0f 71       	andi	r16, 0x1F	; 31
   111c8:	11 27       	eor	r17, r17
   111ca:	ed b7       	in	r30, 0x3d	; 61
   111cc:	fe b7       	in	r31, 0x3e	; 62
   111ce:	17 83       	std	Z+7, r17	; 0x07
   111d0:	06 83       	std	Z+6, r16	; 0x06
   111d2:	8c e0       	ldi	r24, 0x0C	; 12
   111d4:	9f e0       	ldi	r25, 0x0F	; 15
   111d6:	e3 cf       	rjmp	.-58     	; 0x1119e <gpib_trace_display+0x1b6>
        else
        {
            for(i=0;gpib_tokens[i].cmd != -1;++i)
   111d8:	0f 5f       	subi	r16, 0xFF	; 255
   111da:	1f 4f       	sbci	r17, 0xFF	; 255
   111dc:	20 81       	ld	r18, Z
   111de:	31 81       	ldd	r19, Z+1	; 0x01
   111e0:	2f 3f       	cpi	r18, 0xFF	; 255
   111e2:	4f ef       	ldi	r20, 0xFF	; 255
   111e4:	34 07       	cpc	r19, r20
   111e6:	a9 f0       	breq	.+42     	; 0x11212 <gpib_trace_display+0x22a>
   111e8:	34 96       	adiw	r30, 0x04	; 4
            {
                if(cmd == gpib_tokens[i].cmd)
   111ea:	82 17       	cp	r24, r18
   111ec:	93 07       	cpc	r25, r19
   111ee:	a1 f7       	brne	.-24     	; 0x111d8 <gpib_trace_display+0x1f0>
                {
                    strcat(tmp," ");
   111f0:	6b e3       	ldi	r22, 0x3B	; 59
   111f2:	74 e0       	ldi	r23, 0x04	; 4
   111f4:	c6 01       	movw	r24, r12
   111f6:	0e 94 be 30 	call	0x617c	; 0x617c <strcat>
                    strcat(tmp,gpib_tokens[i].name);
   111fa:	f8 01       	movw	r30, r16
   111fc:	ee 0f       	add	r30, r30
   111fe:	ff 1f       	adc	r31, r31
   11200:	ee 0f       	add	r30, r30
   11202:	ff 1f       	adc	r31, r31
   11204:	e1 57       	subi	r30, 0x71	; 113
   11206:	fe 4f       	sbci	r31, 0xFE	; 254
   11208:	62 81       	ldd	r22, Z+2	; 0x02
   1120a:	73 81       	ldd	r23, Z+3	; 0x03
   1120c:	c6 01       	movw	r24, r12
   1120e:	0e 94 be 30 	call	0x617c	; 0x617c <strcat>
                }
            }
        }
    }

    if(gpib_log_fp == NULL)
   11212:	20 91 2b 19 	lds	r18, 0x192B	; 0x80192b <gpib_log_fp>
   11216:	30 91 2c 19 	lds	r19, 0x192C	; 0x80192c <gpib_log_fp+0x1>
   1121a:	80 91 85 1c 	lds	r24, 0x1C85	; 0x801c85 <__iob+0x2>
   1121e:	90 91 86 1c 	lds	r25, 0x1C86	; 0x801c86 <__iob+0x3>
   11222:	23 2b       	or	r18, r19
   11224:	21 f4       	brne	.+8      	; 0x1122e <gpib_trace_display+0x246>
        gpib_log_fp = stdout;
   11226:	90 93 2c 19 	sts	0x192C, r25	; 0x80192c <gpib_log_fp+0x1>
   1122a:	80 93 2b 19 	sts	0x192B, r24	; 0x80192b <gpib_log_fp>

    // Echo to console unless file is the console
    if(gpib_log_fp != stdout)
   1122e:	20 91 2b 19 	lds	r18, 0x192B	; 0x80192b <gpib_log_fp>
   11232:	30 91 2c 19 	lds	r19, 0x192C	; 0x80192c <gpib_log_fp+0x1>
   11236:	82 17       	cp	r24, r18
   11238:	93 07       	cpc	r25, r19
   1123a:	19 f0       	breq	.+6      	; 0x11242 <gpib_trace_display+0x25a>
        puts(str);
   1123c:	c7 01       	movw	r24, r14
   1123e:	0e 94 e0 75 	call	0xebc0	; 0xebc0 <puts>

    // Save to file
    fprintf(gpib_log_fp,"%s\n",str);
   11242:	ed b7       	in	r30, 0x3d	; 61
   11244:	fe b7       	in	r31, 0x3e	; 62
   11246:	f6 82       	std	Z+6, r15	; 0x06
   11248:	e5 82       	std	Z+5, r14	; 0x05
   1124a:	85 e4       	ldi	r24, 0x45	; 69
   1124c:	9d e0       	ldi	r25, 0x0D	; 13
   1124e:	94 83       	std	Z+4, r25	; 0x04
   11250:	83 83       	std	Z+3, r24	; 0x03
   11252:	80 91 2b 19 	lds	r24, 0x192B	; 0x80192b <gpib_log_fp>
   11256:	90 91 2c 19 	lds	r25, 0x192C	; 0x80192c <gpib_log_fp+0x1>
   1125a:	92 83       	std	Z+2, r25	; 0x02
   1125c:	81 83       	std	Z+1, r24	; 0x01
   1125e:	0e 94 88 7d 	call	0xfb10	; 0xfb10 <fprintf>
}
   11262:	c7 57       	subi	r28, 0x77	; 119
   11264:	df 4f       	sbci	r29, 0xFF	; 255
   11266:	ec e0       	ldi	r30, 0x0C	; 12
   11268:	0c 94 00 e0 	jmp	0x1c000	; 0x1c000 <__epilogue_restores__+0xc>

0001126c <gpib_read_byte>:
///     - Error Flags:
///       - IFC_FLAG
///
/// @return (data bus, control and error status)
uint16_t gpib_read_byte(int trace)
{
   1126c:	af 92       	push	r10
   1126e:	bf 92       	push	r11
   11270:	cf 92       	push	r12
   11272:	df 92       	push	r13
   11274:	ff 92       	push	r15
   11276:	0f 93       	push	r16
   11278:	1f 93       	push	r17
   1127a:	cf 93       	push	r28
   1127c:	df 93       	push	r29

    ch = 0;
    control_last = 0;

    // If we have an unread state it has already been traced!
    if(gpib_unread_f)
   1127e:	20 91 2a 19 	lds	r18, 0x192A	; 0x80192a <gpib_unread_f>
   11282:	22 23       	and	r18, r18
   11284:	39 f0       	breq	.+14     	; 0x11294 <gpib_read_byte+0x28>
    {
        gpib_unread_f = 0;
   11286:	10 92 2a 19 	sts	0x192A, r1	; 0x80192a <gpib_unread_f>
        return(gpib_unread_data);
   1128a:	80 91 b6 1e 	lds	r24, 0x1EB6	; 0x801eb6 <gpib_unread_data>
   1128e:	90 91 b7 1e 	lds	r25, 0x1EB7	; 0x801eb7 <gpib_unread_data+0x1>
   11292:	b8 c0       	rjmp	.+368    	; 0x11404 <gpib_read_byte+0x198>
   11294:	6c 01       	movw	r12, r24
    }

	gpib_bus_read_init(1); // Busy until we are ready
   11296:	81 e0       	ldi	r24, 0x01	; 1
   11298:	90 e0       	ldi	r25, 0x00	; 0
   1129a:	8d db       	rcall	.-2278   	; 0x109b6 <gpib_bus_read_init>


///@brief V2 boards can NOT read all bits on the control bus at once
/// FIXME We could add a test for read/write state ??
///@brief NRFD,NDAC SRQ are outputs
    if(trace)
   1129c:	c1 14       	cp	r12, r1
   1129e:	d1 04       	cpc	r13, r1
    {
        control_last = gpib_control_pin_read();
   112a0:	51 f0       	breq	.+20     	; 0x112b6 <gpib_read_byte+0x4a>
   112a2:	c5 dc       	rcall	.-1654   	; 0x10c2e <gpib_control_pin_read>
        control_last |= gpib_handshake_pin_read();
   112a4:	8c 01       	movw	r16, r24
   112a6:	d3 dc       	rcall	.-1626   	; 0x10c4e <gpib_handshake_pin_read>
   112a8:	08 2b       	or	r16, r24
        gpib_trace_display(control_last, TRACE_BUS);
   112aa:	19 2b       	or	r17, r25
   112ac:	62 e0       	ldi	r22, 0x02	; 2
   112ae:	70 e0       	ldi	r23, 0x00	; 0
   112b0:	c8 01       	movw	r24, r16
   112b2:	9a de       	rcall	.-716    	; 0x10fe8 <gpib_trace_display>
    uint16_t bus, control, control_last;
    extern uint8_t gpib_unread_f;
    extern uint16_t gpib_unread_data;

    ch = 0;
    control_last = 0;
   112b4:	02 c0       	rjmp	.+4      	; 0x112ba <gpib_read_byte+0x4e>
   112b6:	00 e0       	ldi	r16, 0x00	; 0
        control_last |= gpib_handshake_pin_read();
        gpib_trace_display(control_last, TRACE_BUS);
    }

    rx_state = GPIB_RX_START;
    while(rx_state != GPIB_RX_DONE)
   112b8:	10 e0       	ldi	r17, 0x00	; 0
   112ba:	f1 2c       	mov	r15, r1
   112bc:	c0 e0       	ldi	r28, 0x00	; 0
    {
        if(uart_keyhit(0))
   112be:	d0 e0       	ldi	r29, 0x00	; 0
   112c0:	80 e0       	ldi	r24, 0x00	; 0
   112c2:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <uart_keyhit>
   112c6:	89 2b       	or	r24, r25
		if(gpib_detect_PP())
            ch |= PP_FLAG;
#endif

		// IFC is always in for a device
        if(GPIB_PIN_TST(IFC) == 0)
   112c8:	09 f0       	breq	.+2      	; 0x112cc <gpib_read_byte+0x60>
   112ca:	78 c0       	rjmp	.+240    	; 0x113bc <gpib_read_byte+0x150>
        {
            ch |= IFC_FLAG;
   112cc:	4c 99       	sbic	0x09, 4	; 9
			gpib_bus_init();
   112ce:	03 c0       	rjmp	.+6      	; 0x112d6 <gpib_read_byte+0x6a>
   112d0:	d0 61       	ori	r29, 0x10	; 16
   112d2:	94 db       	rcall	.-2264   	; 0x109fc <gpib_bus_init>
            break;
        }


        switch(rx_state)
   112d4:	73 c0       	rjmp	.+230    	; 0x113bc <gpib_read_byte+0x150>
   112d6:	8f 2d       	mov	r24, r15
   112d8:	90 e0       	ldi	r25, 0x00	; 0
   112da:	89 30       	cpi	r24, 0x09	; 9
   112dc:	91 05       	cpc	r25, r1
   112de:	08 f0       	brcs	.+2      	; 0x112e2 <gpib_read_byte+0x76>
   112e0:	51 c0       	rjmp	.+162    	; 0x11384 <gpib_read_byte+0x118>
   112e2:	fc 01       	movw	r30, r24
   112e4:	e9 53       	subi	r30, 0x39	; 57
   112e6:	ff 4f       	sbci	r31, 0xFF	; 255
   112e8:	0c 94 af df 	jmp	0x1bf5e	; 0x1bf5e <__tablejump2__>
   112ec:	52 98       	cbi	0x0a, 2	; 10
   112ee:	8d e0       	ldi	r24, 0x0D	; 13
   112f0:	8a 95       	dec	r24
   112f2:	f1 f7       	brne	.-4      	; 0x112f0 <gpib_read_byte+0x84>
        {
            case GPIB_RX_START:
                ///@brief Signal that we are ready to ready
                GPIB_PIN_FLOAT_UP(NRFD);
                GPIB_BUS_SETTLE();                // Let Data BUS settle
                rx_state = GPIB_RX_WAIT_FOR_DAV_LOW;
   112f4:	00 00       	nop
   112f6:	ff 24       	eor	r15, r15
   112f8:	f3 94       	inc	r15
                break;

            case GPIB_RX_WAIT_FOR_DAV_LOW:
                ///@brief Wait for Ready acknowledge
                if ( GPIB_PIN_TST(DAV) == 0 )
   112fa:	7f c0       	rjmp	.+254    	; 0x113fa <gpib_read_byte+0x18e>
                    rx_state = GPIB_RX_DAV_IS_LOW;
   112fc:	19 99       	sbic	0x03, 1	; 3
                break;

// Accept Data
            case GPIB_RX_DAV_IS_LOW:
                GPIB_IO_LOW(NRFD);                // BUSY
   112fe:	7d c0       	rjmp	.+250    	; 0x113fa <gpib_read_byte+0x18e>

                ///@brief gpib_bus_read strips command parity if ATN is low at read time
                bus = gpib_bus_read();
   11300:	62 e0       	ldi	r22, 0x02	; 2
   11302:	f6 2e       	mov	r15, r22
   11304:	7a c0       	rjmp	.+244    	; 0x113fa <gpib_read_byte+0x18e>
   11306:	5a 98       	cbi	0x0b, 2	; 11
                ch |= bus;
///@brief V2 boards can NOT read all bits on the control bus at once
/// FIXME could add a test for read/write state ??
///@brief NRFD,NDAC SRQ are outputs
                control_last = gpib_control_pin_read();
   11308:	52 9a       	sbi	0x0a, 2	; 10
   1130a:	8b dc       	rcall	.-1770   	; 0x10c22 <gpib_bus_read>
   1130c:	a8 2e       	mov	r10, r24
   1130e:	b1 2c       	mov	r11, r1
                ch |= control_last;
   11310:	8e dc       	rcall	.-1764   	; 0x10c2e <gpib_control_pin_read>
   11312:	8c 01       	movw	r16, r24

                if(trace)
   11314:	c8 2b       	or	r28, r24
   11316:	d9 2b       	or	r29, r25
   11318:	ca 29       	or	r28, r10
                {
///@brief V2 boards can NOT read all bits on the control bus at once
/// FIXME We could add a test for read/write state ??
///@brief NRFD,NDAC SRQ are outputs
                    control_last |= gpib_handshake_pin_read();
   1131a:	db 29       	or	r29, r11
   1131c:	c1 14       	cp	r12, r1
   1131e:	d1 04       	cpc	r13, r1
                    gpib_trace_display(bus | control_last, TRACE_READ);
   11320:	49 f0       	breq	.+18     	; 0x11334 <gpib_read_byte+0xc8>
   11322:	95 dc       	rcall	.-1750   	; 0x10c4e <gpib_handshake_pin_read>
   11324:	08 2b       	or	r16, r24
   11326:	19 2b       	or	r17, r25
   11328:	61 e0       	ldi	r22, 0x01	; 1
   1132a:	70 e0       	ldi	r23, 0x00	; 0
   1132c:	c5 01       	movw	r24, r10
   1132e:	80 2b       	or	r24, r16
   11330:	91 2b       	or	r25, r17
   11332:	5a de       	rcall	.-844    	; 0x10fe8 <gpib_trace_display>
                }

                GPIB_PIN_FLOAT_UP(NDAC);
                GPIB_BUS_SETTLE();                // Let Data BUS settle
                gpib_timeout_set(HTIMEOUT);
   11334:	53 98       	cbi	0x0a, 3	; 10
   11336:	8d e0       	ldi	r24, 0x0D	; 13
   11338:	8a 95       	dec	r24
   1133a:	f1 f7       	brne	.-4      	; 0x11338 <gpib_read_byte+0xcc>
   1133c:	00 00       	nop
#if BOARD == 2
				/// FIXME do we want to keep the next state ?
                rx_state = GPIB_RX_WAIT_FOR_DAV_HI;
   1133e:	64 ef       	ldi	r22, 0xF4	; 244
   11340:	71 e0       	ldi	r23, 0x01	; 1
   11342:	80 e0       	ldi	r24, 0x00	; 0
/// FIXME We clould add a test for read/write state ??
///@brief V2 boards we can't - not a big deal as the DAV test works anyway
            ///@brief Wait for NDAC float HI

            case GPIB_RX_WAIT_FOR_NDAC_HI:
                if (GPIB_PIN_TST(NDAC) == 1)
   11344:	90 e0       	ldi	r25, 0x00	; 0
   11346:	2d db       	rcall	.-2470   	; 0x109a2 <gpib_timeout_set>
                {
                    gpib_timeout_set(HTIMEOUT);
   11348:	54 e0       	ldi	r21, 0x04	; 4
   1134a:	f5 2e       	mov	r15, r21
   1134c:	56 c0       	rjmp	.+172    	; 0x113fa <gpib_read_byte+0x18e>
   1134e:	4b 9b       	sbis	0x09, 3	; 9
   11350:	0c c0       	rjmp	.+24     	; 0x1136a <gpib_read_byte+0xfe>
   11352:	64 ef       	ldi	r22, 0xF4	; 244
                    rx_state = GPIB_RX_WAIT_FOR_DAV_HI;
   11354:	71 e0       	ldi	r23, 0x01	; 1
   11356:	80 e0       	ldi	r24, 0x00	; 0
   11358:	90 e0       	ldi	r25, 0x00	; 0
                }
                break;

            ///@brief Wait for DAV HI
            case GPIB_RX_WAIT_FOR_DAV_HI:
                if (GPIB_PIN_TST(DAV) == 1)
   1135a:	23 db       	rcall	.-2490   	; 0x109a2 <gpib_timeout_set>
   1135c:	44 e0       	ldi	r20, 0x04	; 4
				{
                    rx_state = GPIB_RX_DAV_IS_HI;
   1135e:	f4 2e       	mov	r15, r20
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   11360:	04 c0       	rjmp	.+8      	; 0x1136a <gpib_read_byte+0xfe>
            case GPIB_RX_WAIT_FOR_DAV_HI:
                if (GPIB_PIN_TST(DAV) == 1)
				{
                    rx_state = GPIB_RX_DAV_IS_HI;
				}
                if (gpib_timeout_test())
   11362:	19 9b       	sbis	0x03, 1	; 3
   11364:	02 c0       	rjmp	.+4      	; 0x1136a <gpib_read_byte+0xfe>
   11366:	35 e0       	ldi	r19, 0x05	; 5
                {
                    ch |= TIMEOUT_FLAG;
   11368:	f3 2e       	mov	r15, r19
                    rx_state = GPIB_RX_ERROR;
   1136a:	80 91 ab 1c 	lds	r24, 0x1CAB	; 0x801cab <gpib_timer+0x8>
   1136e:	88 23       	and	r24, r24
            case GPIB_RX_ERROR:
                rx_state = GPIB_RX_DONE;
                break;

            case GPIB_RX_DONE:
				gpib_bus_read_init(1); // Busy
   11370:	09 f4       	brne	.+2      	; 0x11374 <gpib_read_byte+0x108>
   11372:	43 c0       	rjmp	.+134    	; 0x113fa <gpib_read_byte+0x18e>
   11374:	d0 64       	ori	r29, 0x40	; 64
                break;
        }

        if(trace)
   11376:	27 e0       	ldi	r18, 0x07	; 7
   11378:	f2 2e       	mov	r15, r18
   1137a:	3f c0       	rjmp	.+126    	; 0x113fa <gpib_read_byte+0x18e>
   1137c:	81 e0       	ldi	r24, 0x01	; 1
   1137e:	90 e0       	ldi	r25, 0x00	; 0
   11380:	1a db       	rcall	.-2508   	; 0x109b6 <gpib_bus_read_init>
   11382:	04 c0       	rjmp	.+8      	; 0x1138c <gpib_read_byte+0x120>
   11384:	c1 14       	cp	r12, r1
        {
			/// V2 boards can not read all control and handshake bits at once
			/// FIXME We could add a test for read/write state ??
			/// NRFD,NDAC SRQ are outputs durring write phase, but not at very start
            control = gpib_control_pin_read();
   11386:	d1 04       	cpc	r13, r1
   11388:	99 f0       	breq	.+38     	; 0x113b0 <gpib_read_byte+0x144>
   1138a:	05 c0       	rjmp	.+10     	; 0x11396 <gpib_read_byte+0x12a>
            control |= gpib_handshake_pin_read();
   1138c:	c1 14       	cp	r12, r1
   1138e:	d1 04       	cpc	r13, r1
   11390:	a9 f0       	breq	.+42     	; 0x113bc <gpib_read_byte+0x150>
   11392:	98 e0       	ldi	r25, 0x08	; 8
            if(control_last != control)
   11394:	f9 2e       	mov	r15, r25
   11396:	4b dc       	rcall	.-1898   	; 0x10c2e <gpib_control_pin_read>
   11398:	5c 01       	movw	r10, r24
            {
                gpib_trace_display(control, TRACE_BUS);
   1139a:	59 dc       	rcall	.-1870   	; 0x10c4e <gpib_handshake_pin_read>
   1139c:	a8 2a       	or	r10, r24
   1139e:	b9 2a       	or	r11, r25
   113a0:	a0 16       	cp	r10, r16
   113a2:	b1 06       	cpc	r11, r17
   113a4:	31 f0       	breq	.+12     	; 0x113b2 <gpib_read_byte+0x146>
            case GPIB_RX_DONE:
				gpib_bus_read_init(1); // Busy
                break;
        }

        if(trace)
   113a6:	62 e0       	ldi	r22, 0x02	; 2
        control_last |= gpib_handshake_pin_read();
        gpib_trace_display(control_last, TRACE_BUS);
    }

    rx_state = GPIB_RX_START;
    while(rx_state != GPIB_RX_DONE)
   113a8:	70 e0       	ldi	r23, 0x00	; 0
   113aa:	c5 01       	movw	r24, r10
   113ac:	1d de       	rcall	.-966    	; 0x10fe8 <gpib_trace_display>
   113ae:	01 c0       	rjmp	.+2      	; 0x113b2 <gpib_read_byte+0x146>
   113b0:	58 01       	movw	r10, r16
///  - Remember that NDAC and NRFD are now both LOW!
///  - The spec says to KEEP BOTH LOW when NOT ready to read otherwise
///    we may miss a transfer and cause a controller timeout!
///  - GPIB TX state expects NRFD LOW on entry or it is an ERROR!

    lastcmd = current;
   113b2:	88 e0       	ldi	r24, 0x08	; 8
   113b4:	f8 16       	cp	r15, r24
   113b6:	11 f0       	breq	.+4      	; 0x113bc <gpib_read_byte+0x150>
   113b8:	85 01       	movw	r16, r10
   113ba:	82 cf       	rjmp	.-252    	; 0x112c0 <gpib_read_byte+0x54>
   113bc:	80 91 b0 1e 	lds	r24, 0x1EB0	; 0x801eb0 <current>
   113c0:	90 91 b1 1e 	lds	r25, 0x1EB1	; 0x801eb1 <current+0x1>

    if(ch & ERROR_MASK || (ch & ATN_FLAG) == 0)
   113c4:	90 93 ad 1c 	sts	0x1CAD, r25	; 0x801cad <lastcmd+0x1>
   113c8:	80 93 ac 1c 	sts	0x1CAC, r24	; 0x801cac <lastcmd>
   113cc:	ce 01       	movw	r24, r28
   113ce:	88 27       	eor	r24, r24
        current = 0;
   113d0:	90 7d       	andi	r25, 0xD0	; 208
   113d2:	89 2b       	or	r24, r25
   113d4:	11 f4       	brne	.+4      	; 0x113da <gpib_read_byte+0x16e>
   113d6:	d2 fd       	sbrc	r29, 2
   113d8:	05 c0       	rjmp	.+10     	; 0x113e4 <gpib_read_byte+0x178>
    else
        current = ch & CMD_MASK;
   113da:	10 92 b1 1e 	sts	0x1EB1, r1	; 0x801eb1 <current+0x1>
   113de:	10 92 b0 1e 	sts	0x1EB0, r1	; 0x801eb0 <current>
   113e2:	07 c0       	rjmp	.+14     	; 0x113f2 <gpib_read_byte+0x186>
   113e4:	ce 01       	movw	r24, r28
   113e6:	8f 77       	andi	r24, 0x7F	; 127
   113e8:	99 27       	eor	r25, r25
   113ea:	90 93 b1 1e 	sts	0x1EB1, r25	; 0x801eb1 <current+0x1>
                }
                break;

            ///@brief Ready for next byte
            case GPIB_RX_DAV_IS_HI:
                rx_state = GPIB_RX_FINISH;        // DONE
   113ee:	80 93 b0 1e 	sts	0x1EB0, r24	; 0x801eb0 <current>
            case GPIB_RX_DONE:
				gpib_bus_read_init(1); // Busy
                break;
        }

        if(trace)
   113f2:	ce 01       	movw	r24, r28
   113f4:	07 c0       	rjmp	.+14     	; 0x11404 <gpib_read_byte+0x198>
   113f6:	86 e0       	ldi	r24, 0x06	; 6
   113f8:	f8 2e       	mov	r15, r24
        current = 0;
    else
        current = ch & CMD_MASK;

    return (ch);
}
   113fa:	c1 14       	cp	r12, r1
   113fc:	d1 04       	cpc	r13, r1
   113fe:	09 f4       	brne	.+2      	; 0x11402 <gpib_read_byte+0x196>
   11400:	5f cf       	rjmp	.-322    	; 0x112c0 <gpib_read_byte+0x54>
   11402:	c9 cf       	rjmp	.-110    	; 0x11396 <gpib_read_byte+0x12a>
   11404:	df 91       	pop	r29
   11406:	cf 91       	pop	r28
   11408:	1f 91       	pop	r17
   1140a:	0f 91       	pop	r16
   1140c:	ff 90       	pop	r15
   1140e:	df 90       	pop	r13
   11410:	cf 90       	pop	r12
   11412:	bf 90       	pop	r11
   11414:	af 90       	pop	r10
   11416:	08 95       	ret

00011418 <gpib_decode>:
/// @see gpib_decode_str()
/// @return  void

void gpib_decode(uint16_t ch)
{
    gpib_trace_display(ch,0);
   11418:	60 e0       	ldi	r22, 0x00	; 0
   1141a:	70 e0       	ldi	r23, 0x00	; 0
   1141c:	e5 cd       	rjmp	.-1078   	; 0x10fe8 <gpib_trace_display>
   1141e:	08 95       	ret

00011420 <gpib_read_str>:
///       - REN_FLAG
///       - PP_FLAG
///     - Error Flags:
///       - IFC_FLAG
int gpib_read_str(uint8_t *buf, int size, uint16_t *status)
{
   11420:	a7 e0       	ldi	r26, 0x07	; 7
   11422:	b0 e0       	ldi	r27, 0x00	; 0
   11424:	e6 e1       	ldi	r30, 0x16	; 22
   11426:	fa e8       	ldi	r31, 0x8A	; 138
   11428:	0c 94 e6 df 	jmp	0x1bfcc	; 0x1bfcc <__prologue_saves__+0x10>
   1142c:	5b 01       	movw	r10, r22
   1142e:	6a 01       	movw	r12, r20
    uint16_t val;
    int ind = 0;

    *status &= STATUS_MASK;
   11430:	fa 01       	movw	r30, r20
   11432:	20 81       	ld	r18, Z
   11434:	31 81       	ldd	r19, Z+1	; 0x01
   11436:	22 27       	eor	r18, r18
   11438:	31 83       	std	Z+1, r19	; 0x01
   1143a:	20 83       	st	Z, r18

    if(!size)
   1143c:	67 2b       	or	r22, r23
   1143e:	21 f0       	breq	.+8      	; 0x11448 <gpib_read_str+0x28>
   11440:	7c 01       	movw	r14, r24
   11442:	00 e0       	ldi	r16, 0x00	; 0
   11444:	10 e0       	ldi	r17, 0x00	; 0
   11446:	28 c0       	rjmp	.+80     	; 0x11498 <gpib_read_str+0x78>
    {
        if(debuglevel & (GPIB_PPR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   11448:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1144c:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   11450:	82 72       	andi	r24, 0x22	; 34
   11452:	91 70       	andi	r25, 0x01	; 1
   11454:	89 2b       	or	r24, r25
   11456:	09 f4       	brne	.+2      	; 0x1145a <gpib_read_str+0x3a>
   11458:	7c c0       	rjmp	.+248    	; 0x11552 <gpib_read_str+0x132>
            printf("gpib_read_str: size = 0\n");
   1145a:	83 ef       	ldi	r24, 0xF3	; 243
   1145c:	9e e0       	ldi	r25, 0x0E	; 14
   1145e:	a0 e0       	ldi	r26, 0x00	; 0
   11460:	ed b7       	in	r30, 0x3d	; 61
   11462:	fe b7       	in	r31, 0x3e	; 62
   11464:	81 83       	std	Z+1, r24	; 0x01
   11466:	92 83       	std	Z+2, r25	; 0x02
   11468:	a3 83       	std	Z+3, r26	; 0x03
   1146a:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   1146e:	71 c0       	rjmp	.+226    	; 0x11552 <gpib_read_str+0x132>
        {
            *status |= (val & ERROR_MASK);
            break;
        }

        if((*status & ATN_FLAG) != (val & ATN_FLAG))
   11470:	8c 27       	eor	r24, r28
   11472:	9d 27       	eor	r25, r29
   11474:	92 fd       	sbrc	r25, 2
   11476:	2e c0       	rjmp	.+92     	; 0x114d4 <gpib_read_str+0xb4>
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
            gpib_unread(val);
            break;
        }

        if(val & ATN_FLAG)
   11478:	ce 01       	movw	r24, r28
   1147a:	88 27       	eor	r24, r24
   1147c:	94 70       	andi	r25, 0x04	; 4
            buf[ind] = (val & CMD_MASK);
   1147e:	2c 2f       	mov	r18, r28
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
            gpib_unread(val);
            break;
        }

        if(val & ATN_FLAG)
   11480:	d2 fd       	sbrc	r29, 2
            buf[ind] = (val & CMD_MASK);
   11482:	2f 77       	andi	r18, 0x7F	; 127
        else
            buf[ind] = (val & DATA_MASK);
   11484:	f7 01       	movw	r30, r14
   11486:	20 83       	st	Z, r18
        ++ind;
   11488:	0f 5f       	subi	r16, 0xFF	; 255
   1148a:	1f 4f       	sbci	r17, 0xFF	; 255

        if(!(val & ATN_FLAG) && (val & EOI_FLAG) )
   1148c:	89 2b       	or	r24, r25
   1148e:	09 f4       	brne	.+2      	; 0x11492 <gpib_read_str+0x72>
   11490:	3c c0       	rjmp	.+120    	; 0x1150a <gpib_read_str+0xea>
   11492:	ff ef       	ldi	r31, 0xFF	; 255
   11494:	ef 1a       	sub	r14, r31
   11496:	ff 0a       	sbc	r15, r31
    {
        if(debuglevel & (GPIB_PPR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
            printf("gpib_read_str: size = 0\n");
    }

    while(ind < size)
   11498:	0a 15       	cp	r16, r10
   1149a:	1b 05       	cpc	r17, r11
   1149c:	0c f0       	brlt	.+2      	; 0x114a0 <gpib_read_str+0x80>
   1149e:	3f c0       	rjmp	.+126    	; 0x1151e <gpib_read_str+0xfe>
    {
        val = gpib_read_byte(NO_TRACE);
   114a0:	80 e0       	ldi	r24, 0x00	; 0
   114a2:	90 e0       	ldi	r25, 0x00	; 0
   114a4:	e3 de       	rcall	.-570    	; 0x1126c <gpib_read_byte>
   114a6:	ec 01       	movw	r28, r24
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_BUS_DECODE)
   114a8:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   114ac:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   114b0:	90 ff       	sbrs	r25, 0
            gpib_decode(val);
   114b2:	02 c0       	rjmp	.+4      	; 0x114b8 <gpib_read_str+0x98>
   114b4:	ce 01       	movw	r24, r28
#endif
        if(val & ERROR_MASK)
   114b6:	b0 df       	rcall	.-160    	; 0x11418 <gpib_decode>
   114b8:	9e 01       	movw	r18, r28
   114ba:	22 27       	eor	r18, r18
   114bc:	30 7d       	andi	r19, 0xD0	; 208
   114be:	f6 01       	movw	r30, r12
   114c0:	80 81       	ld	r24, Z
   114c2:	91 81       	ldd	r25, Z+1	; 0x01
   114c4:	21 15       	cp	r18, r1
   114c6:	31 05       	cpc	r19, r1
        {
            *status |= (val & ERROR_MASK);
   114c8:	99 f2       	breq	.-90     	; 0x11470 <gpib_read_str+0x50>
   114ca:	82 2b       	or	r24, r18
   114cc:	93 2b       	or	r25, r19
   114ce:	91 83       	std	Z+1, r25	; 0x01
            break;
   114d0:	80 83       	st	Z, r24
        }

        if((*status & ATN_FLAG) != (val & ATN_FLAG))
        {
            if(debuglevel & (GPIB_PPR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   114d2:	28 c0       	rjmp	.+80     	; 0x11524 <gpib_read_str+0x104>
   114d4:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   114d8:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   114dc:	82 72       	andi	r24, 0x22	; 34
   114de:	91 70       	andi	r25, 0x01	; 1
   114e0:	89 2b       	or	r24, r25
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
   114e2:	81 f0       	breq	.+32     	; 0x11504 <gpib_read_str+0xe4>
   114e4:	ce 01       	movw	r24, r28
   114e6:	99 27       	eor	r25, r25
   114e8:	ed b7       	in	r30, 0x3d	; 61
   114ea:	fe b7       	in	r31, 0x3e	; 62
   114ec:	97 83       	std	Z+7, r25	; 0x07
   114ee:	86 83       	std	Z+6, r24	; 0x06
   114f0:	15 83       	std	Z+5, r17	; 0x05
   114f2:	04 83       	std	Z+4, r16	; 0x04
   114f4:	86 ec       	ldi	r24, 0xC6	; 198
   114f6:	9e e0       	ldi	r25, 0x0E	; 14
   114f8:	a0 e0       	ldi	r26, 0x00	; 0
   114fa:	81 83       	std	Z+1, r24	; 0x01
   114fc:	92 83       	std	Z+2, r25	; 0x02
   114fe:	a3 83       	std	Z+3, r26	; 0x03
            gpib_unread(val);
   11500:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   11504:	ce 01       	movw	r24, r28
            break;
   11506:	63 db       	rcall	.-2362   	; 0x10bce <gpib_unread>
            buf[ind] = (val & CMD_MASK);
        else
            buf[ind] = (val & DATA_MASK);
        ++ind;

        if(!(val & ATN_FLAG) && (val & EOI_FLAG) )
   11508:	0d c0       	rjmp	.+26     	; 0x11524 <gpib_read_str+0x104>
   1150a:	d0 ff       	sbrs	r29, 0
        {

            if(*status & EOI_FLAG)
   1150c:	c2 cf       	rjmp	.-124    	; 0x11492 <gpib_read_str+0x72>
   1150e:	f6 01       	movw	r30, r12
   11510:	80 81       	ld	r24, Z
   11512:	91 81       	ldd	r25, Z+1	; 0x01
   11514:	90 fd       	sbrc	r25, 0
                return(ind);
/// @todo TODO
///  decode this state - for now I just set the EOI_FLAG
            *status |= EOI_FLAG;
   11516:	1f c0       	rjmp	.+62     	; 0x11556 <gpib_read_str+0x136>
   11518:	91 60       	ori	r25, 0x01	; 1
   1151a:	91 83       	std	Z+1, r25	; 0x01
            break;
        }
    }
    if ( ind != size )
   1151c:	80 83       	st	Z, r24
   1151e:	0a 15       	cp	r16, r10
   11520:	1b 05       	cpc	r17, r11
    {
        if(debuglevel & (GPIB_PPR + GPIB_DEVICE_STATE_MESSAGES))
   11522:	c9 f0       	breq	.+50     	; 0x11556 <gpib_read_str+0x136>
   11524:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   11528:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   1152c:	82 72       	andi	r24, 0x22	; 34
   1152e:	99 27       	eor	r25, r25
   11530:	89 2b       	or	r24, r25
            printf("[gpib_read_str read(%d) expected(%d)]\n", ind , size);
   11532:	89 f0       	breq	.+34     	; 0x11556 <gpib_read_str+0x136>
   11534:	ed b7       	in	r30, 0x3d	; 61
   11536:	fe b7       	in	r31, 0x3e	; 62
   11538:	b7 82       	std	Z+7, r11	; 0x07
   1153a:	a6 82       	std	Z+6, r10	; 0x06
   1153c:	15 83       	std	Z+5, r17	; 0x05
   1153e:	04 83       	std	Z+4, r16	; 0x04
   11540:	8f e9       	ldi	r24, 0x9F	; 159
   11542:	9e e0       	ldi	r25, 0x0E	; 14
   11544:	a0 e0       	ldi	r26, 0x00	; 0
   11546:	81 83       	std	Z+1, r24	; 0x01
   11548:	92 83       	std	Z+2, r25	; 0x02
   1154a:	a3 83       	std	Z+3, r26	; 0x03
   1154c:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   11550:	02 c0       	rjmp	.+4      	; 0x11556 <gpib_read_str+0x136>
   11552:	00 e0       	ldi	r16, 0x00	; 0
    }
    return(ind);
}
   11554:	10 e0       	ldi	r17, 0x00	; 0
   11556:	c8 01       	movw	r24, r16
   11558:	cd b7       	in	r28, 0x3d	; 61
   1155a:	de b7       	in	r29, 0x3e	; 62
   1155c:	27 96       	adiw	r28, 0x07	; 7
   1155e:	ea e0       	ldi	r30, 0x0A	; 10
   11560:	0c 94 02 e0 	jmp	0x1c004	; 0x1c004 <__epilogue_restores__+0x10>

00011564 <gpib_write_str>:
///     - Error Flags:
///       - IFC_FLAG
/// @see: gpib_write_byte()
/// @see: gpib.h _FLAGS defines for a full list)
int gpib_write_str(uint8_t *buf, int size, uint16_t *status)
{
   11564:	a7 e0       	ldi	r26, 0x07	; 7
   11566:	b0 e0       	ldi	r27, 0x00	; 0
   11568:	e8 eb       	ldi	r30, 0xB8	; 184
   1156a:	fa e8       	ldi	r31, 0x8A	; 138
   1156c:	0c 94 e6 df 	jmp	0x1bfcc	; 0x1bfcc <__prologue_saves__+0x10>
   11570:	8b 01       	movw	r16, r22
   11572:	7a 01       	movw	r14, r20
    uint16_t val, ch;
    int ind = 0;

    *status &= STATUS_MASK;
   11574:	fa 01       	movw	r30, r20
   11576:	20 81       	ld	r18, Z
   11578:	31 81       	ldd	r19, Z+1	; 0x01
   1157a:	22 27       	eor	r18, r18
   1157c:	31 83       	std	Z+1, r19	; 0x01
   1157e:	20 83       	st	Z, r18

    if(!size)
   11580:	67 2b       	or	r22, r23
   11582:	21 f0       	breq	.+8      	; 0x1158c <gpib_write_str+0x28>
   11584:	6c 01       	movw	r12, r24
   11586:	c0 e0       	ldi	r28, 0x00	; 0
   11588:	d0 e0       	ldi	r29, 0x00	; 0
   1158a:	35 c0       	rjmp	.+106    	; 0x115f6 <gpib_write_str+0x92>
    {
        if(debuglevel & (GPIB_PPR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   1158c:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   11590:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   11594:	82 72       	andi	r24, 0x22	; 34
   11596:	91 70       	andi	r25, 0x01	; 1
   11598:	89 2b       	or	r24, r25
   1159a:	09 f4       	brne	.+2      	; 0x1159e <gpib_write_str+0x3a>
   1159c:	4f c0       	rjmp	.+158    	; 0x1163c <gpib_write_str+0xd8>
            printf("gpib_write_str: size = 0\n");
   1159e:	85 e8       	ldi	r24, 0x85	; 133
   115a0:	9e e0       	ldi	r25, 0x0E	; 14
   115a2:	a0 e0       	ldi	r26, 0x00	; 0
   115a4:	ed b7       	in	r30, 0x3d	; 61
   115a6:	fe b7       	in	r31, 0x3e	; 62
   115a8:	81 83       	std	Z+1, r24	; 0x01
   115aa:	92 83       	std	Z+2, r25	; 0x02
   115ac:	a3 83       	std	Z+3, r26	; 0x03
   115ae:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   115b2:	44 c0       	rjmp	.+136    	; 0x1163c <gpib_write_str+0xd8>
    }

    while(ind < size)
    {
        ch = buf[ind++] & 0xff;                   // unsigned
   115b4:	21 96       	adiw	r28, 0x01	; 1
   115b6:	f6 01       	movw	r30, r12
   115b8:	81 91       	ld	r24, Z+
   115ba:	6f 01       	movw	r12, r30
   115bc:	90 e0       	ldi	r25, 0x00	; 0

        if(*status & ATN_FLAG)
   115be:	f7 01       	movw	r30, r14
   115c0:	20 81       	ld	r18, Z
   115c2:	31 81       	ldd	r19, Z+1	; 0x01
   115c4:	32 fd       	sbrc	r19, 2
        {
            ch |= ATN_FLAG;
   115c6:	94 60       	ori	r25, 0x04	; 4
        }

        if( (*status & EOI_FLAG) && (ind == size ) )
   115c8:	30 fd       	sbrc	r19, 0
            ch |= EOI_FLAG;

/// @return Returns

        val = gpib_write_byte(ch);
   115ca:	19 c0       	rjmp	.+50     	; 0x115fe <gpib_write_str+0x9a>
        *status |= (val & ERROR_MASK);
   115cc:	4c db       	rcall	.-2408   	; 0x10c66 <gpib_write_byte>
   115ce:	5c 01       	movw	r10, r24
   115d0:	aa 24       	eor	r10, r10
   115d2:	f0 ed       	ldi	r31, 0xD0	; 208
   115d4:	bf 22       	and	r11, r31
   115d6:	f7 01       	movw	r30, r14
   115d8:	20 81       	ld	r18, Z
   115da:	31 81       	ldd	r19, Z+1	; 0x01
   115dc:	2a 29       	or	r18, r10
   115de:	3b 29       	or	r19, r11
   115e0:	31 83       	std	Z+1, r19	; 0x01

#if SDEBUG
        if(debuglevel & GPIB_RW_STR_BUS_DECODE)
   115e2:	20 83       	st	Z, r18
   115e4:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   115e8:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <debuglevel+0x1>
            gpib_decode(val);
   115ec:	30 fd       	sbrc	r19, 0
#endif
        if(val & ERROR_MASK)
   115ee:	14 df       	rcall	.-472    	; 0x11418 <gpib_decode>
   115f0:	a1 14       	cp	r10, r1
   115f2:	b1 04       	cpc	r11, r1
    {
        if(debuglevel & (GPIB_PPR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
            printf("gpib_write_str: size = 0\n");
    }

    while(ind < size)
   115f4:	49 f4       	brne	.+18     	; 0x11608 <gpib_write_str+0xa4>
   115f6:	c0 17       	cp	r28, r16
   115f8:	d1 07       	cpc	r29, r17
   115fa:	e4 f2       	brlt	.-72     	; 0x115b4 <gpib_write_str+0x50>
        if(*status & ATN_FLAG)
        {
            ch |= ATN_FLAG;
        }

        if( (*status & EOI_FLAG) && (ind == size ) )
   115fc:	05 c0       	rjmp	.+10     	; 0x11608 <gpib_write_str+0xa4>
   115fe:	0c 17       	cp	r16, r28
   11600:	1d 07       	cpc	r17, r29
            ch |= EOI_FLAG;
   11602:	21 f7       	brne	.-56     	; 0x115cc <gpib_write_str+0x68>
   11604:	91 60       	ori	r25, 0x01	; 1
        {
            break;
        }

    }                                             // while(ind < size)
    if ( ind != size )
   11606:	e2 cf       	rjmp	.-60     	; 0x115cc <gpib_write_str+0x68>
   11608:	c0 17       	cp	r28, r16
   1160a:	d1 07       	cpc	r29, r17
    {
        if(debuglevel & (GPIB_PPR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   1160c:	c9 f0       	breq	.+50     	; 0x11640 <gpib_write_str+0xdc>
   1160e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   11612:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   11616:	82 72       	andi	r24, 0x22	; 34
   11618:	91 70       	andi	r25, 0x01	; 1
   1161a:	89 2b       	or	r24, r25
            printf("[gpib_write_str sent(%d) expected(%d)]\n", ind,size);
   1161c:	89 f0       	breq	.+34     	; 0x11640 <gpib_write_str+0xdc>
   1161e:	ed b7       	in	r30, 0x3d	; 61
   11620:	fe b7       	in	r31, 0x3e	; 62
   11622:	17 83       	std	Z+7, r17	; 0x07
   11624:	06 83       	std	Z+6, r16	; 0x06
   11626:	d5 83       	std	Z+5, r29	; 0x05
   11628:	c4 83       	std	Z+4, r28	; 0x04
   1162a:	8d e5       	ldi	r24, 0x5D	; 93
   1162c:	9e e0       	ldi	r25, 0x0E	; 14
   1162e:	a0 e0       	ldi	r26, 0x00	; 0
   11630:	81 83       	std	Z+1, r24	; 0x01
   11632:	92 83       	std	Z+2, r25	; 0x02
   11634:	a3 83       	std	Z+3, r26	; 0x03
   11636:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    uint16_t val, ch;
    int ind = 0;

    *status &= STATUS_MASK;

    if(!size)
   1163a:	02 c0       	rjmp	.+4      	; 0x11640 <gpib_write_str+0xdc>
   1163c:	c0 e0       	ldi	r28, 0x00	; 0
    {
        if(debuglevel & (GPIB_PPR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
            printf("[gpib_write_str sent(%d) expected(%d)]\n", ind,size);
    }
    return(ind);
}
   1163e:	d0 e0       	ldi	r29, 0x00	; 0
   11640:	ce 01       	movw	r24, r28
   11642:	cd b7       	in	r28, 0x3d	; 61
   11644:	de b7       	in	r29, 0x3e	; 62
   11646:	27 96       	adiw	r28, 0x07	; 7
   11648:	ea e0       	ldi	r30, 0x0A	; 10
   1164a:	0c 94 02 e0 	jmp	0x1c004	; 0x1c004 <__epilogue_restores__+0x10>

0001164e <gpib_file_init>:
   1164e:	ad b7       	in	r26, 0x3d	; 61
   11650:	be b7       	in	r27, 0x3e	; 62
   11652:	17 97       	sbiw	r26, 0x07	; 7
   11654:	0f b6       	in	r0, 0x3f	; 63
   11656:	f8 94       	cli
   11658:	be bf       	out	0x3e, r27	; 62
   1165a:	0f be       	out	0x3f, r0	; 63
   1165c:	ad bf       	out	0x3d, r26	; 61
   1165e:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <debuglevel+0x1>
   11662:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <debuglevel>
   11666:	85 ec       	ldi	r24, 0xC5	; 197
   11668:	91 e0       	ldi	r25, 0x01	; 1
   1166a:	0e 94 28 9a 	call	0x13450	; 0x13450 <Read_Config>
   1166e:	18 16       	cp	r1, r24
   11670:	19 06       	cpc	r1, r25
   11672:	8c f4       	brge	.+34     	; 0x11696 <gpib_file_init+0x48>
   11674:	ed b7       	in	r30, 0x3d	; 61
   11676:	fe b7       	in	r31, 0x3e	; 62
   11678:	97 83       	std	Z+7, r25	; 0x07
   1167a:	86 83       	std	Z+6, r24	; 0x06
   1167c:	85 ec       	ldi	r24, 0xC5	; 197
   1167e:	91 e0       	ldi	r25, 0x01	; 1
   11680:	95 83       	std	Z+5, r25	; 0x05
   11682:	84 83       	std	Z+4, r24	; 0x04
   11684:	84 e6       	ldi	r24, 0x64	; 100
   11686:	93 e1       	ldi	r25, 0x13	; 19
   11688:	a0 e0       	ldi	r26, 0x00	; 0
   1168a:	81 83       	std	Z+1, r24	; 0x01
   1168c:	92 83       	std	Z+2, r25	; 0x02
   1168e:	a3 83       	std	Z+3, r26	; 0x03
   11690:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   11694:	10 c0       	rjmp	.+32     	; 0x116b6 <gpib_file_init+0x68>
   11696:	89 2b       	or	r24, r25
   11698:	71 f0       	breq	.+28     	; 0x116b6 <gpib_file_init+0x68>
   1169a:	85 ec       	ldi	r24, 0xC5	; 197
   1169c:	91 e0       	ldi	r25, 0x01	; 1
   1169e:	ed b7       	in	r30, 0x3d	; 61
   116a0:	fe b7       	in	r31, 0x3e	; 62
   116a2:	95 83       	std	Z+5, r25	; 0x05
   116a4:	84 83       	std	Z+4, r24	; 0x04
   116a6:	83 e5       	ldi	r24, 0x53	; 83
   116a8:	93 e1       	ldi	r25, 0x13	; 19
   116aa:	a0 e0       	ldi	r26, 0x00	; 0
   116ac:	81 83       	std	Z+1, r24	; 0x01
   116ae:	92 83       	std	Z+2, r25	; 0x02
   116b0:	a3 83       	std	Z+3, r26	; 0x03
   116b2:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   116b6:	0e 94 f3 98 	call	0x131e6	; 0x131e6 <set_Config_Defaults>
   116ba:	0e 94 48 6f 	call	0xde90	; 0xde90 <mmc_wp_status>
   116be:	89 2b       	or	r24, r25
   116c0:	51 f0       	breq	.+20     	; 0x116d6 <gpib_file_init+0x88>
   116c2:	8a e3       	ldi	r24, 0x3A	; 58
   116c4:	93 e1       	ldi	r25, 0x13	; 19
   116c6:	a0 e0       	ldi	r26, 0x00	; 0
   116c8:	ed b7       	in	r30, 0x3d	; 61
   116ca:	fe b7       	in	r31, 0x3e	; 62
   116cc:	81 83       	std	Z+1, r24	; 0x01
   116ce:	92 83       	std	Z+2, r25	; 0x02
   116d0:	a3 83       	std	Z+3, r26	; 0x03
   116d2:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   116d6:	ad b7       	in	r26, 0x3d	; 61
   116d8:	be b7       	in	r27, 0x3e	; 62
   116da:	17 96       	adiw	r26, 0x07	; 7
   116dc:	0f b6       	in	r0, 0x3f	; 63
   116de:	f8 94       	cli
   116e0:	be bf       	out	0x3e, r27	; 62
   116e2:	0f be       	out	0x3f, r0	; 63
   116e4:	ad bf       	out	0x3d, r26	; 61
   116e6:	08 95       	ret

000116e8 <SS80_is_MLA>:
   116e8:	40 e2       	ldi	r20, 0x20	; 32
   116ea:	50 e0       	ldi	r21, 0x00	; 0
   116ec:	bc 01       	movw	r22, r24
   116ee:	83 e0       	ldi	r24, 0x03	; 3
   116f0:	90 e0       	ldi	r25, 0x00	; 0
   116f2:	0e 94 59 96 	call	0x12cb2	; 0x12cb2 <find_device>
   116f6:	8f 3f       	cpi	r24, 0xFF	; 255
   116f8:	2f ef       	ldi	r18, 0xFF	; 255
   116fa:	92 07       	cpc	r25, r18
   116fc:	19 f0       	breq	.+6      	; 0x11704 <SS80_is_MLA+0x1c>
   116fe:	0c 94 83 96 	jmp	0x12d06	; 0x12d06 <set_active_device>
   11702:	08 95       	ret
   11704:	80 e0       	ldi	r24, 0x00	; 0
   11706:	90 e0       	ldi	r25, 0x00	; 0
   11708:	08 95       	ret

0001170a <SS80_is_MTA>:
   1170a:	40 e4       	ldi	r20, 0x40	; 64
   1170c:	50 e0       	ldi	r21, 0x00	; 0
   1170e:	bc 01       	movw	r22, r24
   11710:	83 e0       	ldi	r24, 0x03	; 3
   11712:	90 e0       	ldi	r25, 0x00	; 0
   11714:	0e 94 59 96 	call	0x12cb2	; 0x12cb2 <find_device>
   11718:	8f 3f       	cpi	r24, 0xFF	; 255
   1171a:	2f ef       	ldi	r18, 0xFF	; 255
   1171c:	92 07       	cpc	r25, r18
   1171e:	19 f0       	breq	.+6      	; 0x11726 <SS80_is_MTA+0x1c>
   11720:	0c 94 83 96 	jmp	0x12d06	; 0x12d06 <set_active_device>
   11724:	08 95       	ret
   11726:	80 e0       	ldi	r24, 0x00	; 0
   11728:	90 e0       	ldi	r25, 0x00	; 0
   1172a:	08 95       	ret

0001172c <SS80_is_MSA>:
   1172c:	40 e6       	ldi	r20, 0x60	; 96
   1172e:	50 e0       	ldi	r21, 0x00	; 0
   11730:	bc 01       	movw	r22, r24
   11732:	83 e0       	ldi	r24, 0x03	; 3
   11734:	90 e0       	ldi	r25, 0x00	; 0
   11736:	0e 94 59 96 	call	0x12cb2	; 0x12cb2 <find_device>
   1173a:	8f 3f       	cpi	r24, 0xFF	; 255
   1173c:	2f ef       	ldi	r18, 0xFF	; 255
   1173e:	92 07       	cpc	r25, r18
   11740:	19 f0       	breq	.+6      	; 0x11748 <SS80_is_MSA+0x1c>
   11742:	0c 94 83 96 	jmp	0x12d06	; 0x12d06 <set_active_device>
   11746:	08 95       	ret
   11748:	80 e0       	ldi	r24, 0x00	; 0
   1174a:	90 e0       	ldi	r25, 0x00	; 0
   1174c:	08 95       	ret

0001174e <AMIGO_is_MLA>:
   1174e:	40 e2       	ldi	r20, 0x20	; 32
   11750:	50 e0       	ldi	r21, 0x00	; 0
   11752:	bc 01       	movw	r22, r24
   11754:	81 e0       	ldi	r24, 0x01	; 1
   11756:	90 e0       	ldi	r25, 0x00	; 0
   11758:	0e 94 59 96 	call	0x12cb2	; 0x12cb2 <find_device>
   1175c:	8f 3f       	cpi	r24, 0xFF	; 255
   1175e:	2f ef       	ldi	r18, 0xFF	; 255
   11760:	92 07       	cpc	r25, r18
   11762:	19 f0       	breq	.+6      	; 0x1176a <AMIGO_is_MLA+0x1c>
   11764:	0c 94 83 96 	jmp	0x12d06	; 0x12d06 <set_active_device>
   11768:	08 95       	ret
   1176a:	80 e0       	ldi	r24, 0x00	; 0
   1176c:	90 e0       	ldi	r25, 0x00	; 0
   1176e:	08 95       	ret

00011770 <AMIGO_is_MTA>:
   11770:	40 e4       	ldi	r20, 0x40	; 64
   11772:	50 e0       	ldi	r21, 0x00	; 0
   11774:	bc 01       	movw	r22, r24
   11776:	81 e0       	ldi	r24, 0x01	; 1
   11778:	90 e0       	ldi	r25, 0x00	; 0
   1177a:	0e 94 59 96 	call	0x12cb2	; 0x12cb2 <find_device>
   1177e:	8f 3f       	cpi	r24, 0xFF	; 255
   11780:	2f ef       	ldi	r18, 0xFF	; 255
   11782:	92 07       	cpc	r25, r18
   11784:	19 f0       	breq	.+6      	; 0x1178c <AMIGO_is_MTA+0x1c>
   11786:	0c 94 83 96 	jmp	0x12d06	; 0x12d06 <set_active_device>
   1178a:	08 95       	ret
   1178c:	80 e0       	ldi	r24, 0x00	; 0
   1178e:	90 e0       	ldi	r25, 0x00	; 0
   11790:	08 95       	ret

00011792 <AMIGO_is_MSA>:
   11792:	40 e6       	ldi	r20, 0x60	; 96
   11794:	50 e0       	ldi	r21, 0x00	; 0
   11796:	bc 01       	movw	r22, r24
   11798:	81 e0       	ldi	r24, 0x01	; 1
   1179a:	90 e0       	ldi	r25, 0x00	; 0
   1179c:	0e 94 59 96 	call	0x12cb2	; 0x12cb2 <find_device>
   117a0:	8f 3f       	cpi	r24, 0xFF	; 255
   117a2:	2f ef       	ldi	r18, 0xFF	; 255
   117a4:	92 07       	cpc	r25, r18
   117a6:	19 f0       	breq	.+6      	; 0x117ae <AMIGO_is_MSA+0x1c>
   117a8:	0c 94 83 96 	jmp	0x12d06	; 0x12d06 <set_active_device>
   117ac:	08 95       	ret
   117ae:	80 e0       	ldi	r24, 0x00	; 0
   117b0:	90 e0       	ldi	r25, 0x00	; 0
   117b2:	08 95       	ret

000117b4 <PRINTER_is_MLA>:
   117b4:	40 e2       	ldi	r20, 0x20	; 32
   117b6:	50 e0       	ldi	r21, 0x00	; 0
   117b8:	bc 01       	movw	r22, r24
   117ba:	84 e0       	ldi	r24, 0x04	; 4
   117bc:	90 e0       	ldi	r25, 0x00	; 0
   117be:	0e 94 59 96 	call	0x12cb2	; 0x12cb2 <find_device>
   117c2:	8f 3f       	cpi	r24, 0xFF	; 255
   117c4:	2f ef       	ldi	r18, 0xFF	; 255
   117c6:	92 07       	cpc	r25, r18
   117c8:	19 f0       	breq	.+6      	; 0x117d0 <PRINTER_is_MLA+0x1c>
   117ca:	0c 94 83 96 	jmp	0x12d06	; 0x12d06 <set_active_device>
   117ce:	08 95       	ret
   117d0:	80 e0       	ldi	r24, 0x00	; 0
   117d2:	90 e0       	ldi	r25, 0x00	; 0
   117d4:	08 95       	ret

000117d6 <PRINTER_is_MTA>:
   117d6:	40 e4       	ldi	r20, 0x40	; 64
   117d8:	50 e0       	ldi	r21, 0x00	; 0
   117da:	bc 01       	movw	r22, r24
   117dc:	84 e0       	ldi	r24, 0x04	; 4
   117de:	90 e0       	ldi	r25, 0x00	; 0
   117e0:	0e 94 59 96 	call	0x12cb2	; 0x12cb2 <find_device>
   117e4:	8f 3f       	cpi	r24, 0xFF	; 255
   117e6:	2f ef       	ldi	r18, 0xFF	; 255
   117e8:	92 07       	cpc	r25, r18
   117ea:	19 f0       	breq	.+6      	; 0x117f2 <PRINTER_is_MTA+0x1c>
   117ec:	0c 94 83 96 	jmp	0x12d06	; 0x12d06 <set_active_device>
   117f0:	08 95       	ret
   117f2:	80 e0       	ldi	r24, 0x00	; 0
   117f4:	90 e0       	ldi	r25, 0x00	; 0
   117f6:	08 95       	ret

000117f8 <gpib_init_devices>:
   117f8:	01 d9       	rcall	.-3582   	; 0x109fc <gpib_bus_init>
   117fa:	2d d9       	rcall	.-3494   	; 0x10a56 <gpib_state_init>
   117fc:	0e 94 36 aa 	call	0x1546c	; 0x1546c <SS80_init>
   11800:	0e 94 c5 af 	call	0x15f8a	; 0x15f8a <amigo_init>
   11804:	0c 94 b9 ba 	jmp	0x17572	; 0x17572 <printer_close>
   11808:	08 95       	ret

0001180a <gpib_trace_task>:
/// @param name: File name to save log file to.
/// @return  void
///   Exit on Key Press

void gpib_trace_task( char *name , int detail)
{
   1180a:	0f 93       	push	r16
   1180c:	1f 93       	push	r17
   1180e:	cf 93       	push	r28
   11810:	df 93       	push	r29
   11812:	00 d0       	rcall	.+0      	; 0x11814 <gpib_trace_task+0xa>
   11814:	00 d0       	rcall	.+0      	; 0x11816 <gpib_trace_task+0xc>
   11816:	1f 92       	push	r1
   11818:	eb 01       	movw	r28, r22
    int ch;

    if(name && *name)
   1181a:	00 97       	sbiw	r24, 0x00	; 0
   1181c:	09 f4       	brne	.+2      	; 0x11820 <gpib_trace_task+0x16>
   1181e:	44 c0       	rjmp	.+136    	; 0x118a8 <gpib_trace_task+0x9e>
   11820:	fc 01       	movw	r30, r24
   11822:	20 81       	ld	r18, Z
   11824:	22 23       	and	r18, r18
   11826:	09 f4       	brne	.+2      	; 0x1182a <gpib_trace_task+0x20>
   11828:	3f c0       	rjmp	.+126    	; 0x118a8 <gpib_trace_task+0x9e>
    {
        name = skipspaces(name);
   1182a:	0e 94 8b 31 	call	0x6316	; 0x6316 <skipspaces>
   1182e:	8c 01       	movw	r16, r24
        printf("Capturing GPIB BUS to:%s\n", name);
   11830:	ed b7       	in	r30, 0x3d	; 61
   11832:	fe b7       	in	r31, 0x3e	; 62
   11834:	95 83       	std	Z+5, r25	; 0x05
   11836:	84 83       	std	Z+4, r24	; 0x04
   11838:	80 e2       	ldi	r24, 0x20	; 32
   1183a:	93 e1       	ldi	r25, 0x13	; 19
   1183c:	a0 e0       	ldi	r26, 0x00	; 0
   1183e:	81 83       	std	Z+1, r24	; 0x01
   11840:	92 83       	std	Z+2, r25	; 0x02
   11842:	a3 83       	std	Z+3, r26	; 0x03
   11844:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
       if(detail)
   11848:	20 97       	sbiw	r28, 0x00	; 0
   1184a:	51 f0       	breq	.+20     	; 0x11860 <gpib_trace_task+0x56>
            printf("FULL GPIB BUS handshake logging requested\n");
   1184c:	85 ef       	ldi	r24, 0xF5	; 245
   1184e:	92 e1       	ldi	r25, 0x12	; 18
   11850:	a0 e0       	ldi	r26, 0x00	; 0
   11852:	ed b7       	in	r30, 0x3d	; 61
   11854:	fe b7       	in	r31, 0x3e	; 62
   11856:	81 83       	std	Z+1, r24	; 0x01
   11858:	92 83       	std	Z+2, r25	; 0x02
   1185a:	a3 83       	std	Z+3, r26	; 0x03
   1185c:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
        printf("Press ANY key to exit\n");
   11860:	8e ed       	ldi	r24, 0xDE	; 222
   11862:	92 e1       	ldi	r25, 0x12	; 18
   11864:	a0 e0       	ldi	r26, 0x00	; 0
   11866:	ed b7       	in	r30, 0x3d	; 61
   11868:	fe b7       	in	r31, 0x3e	; 62
   1186a:	81 83       	std	Z+1, r24	; 0x01
   1186c:	92 83       	std	Z+2, r25	; 0x02
   1186e:	a3 83       	std	Z+3, r26	; 0x03
   11870:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>

        gpib_log_fp = fopen(name,"wb");
   11874:	6e ed       	ldi	r22, 0xDE	; 222
   11876:	78 e0       	ldi	r23, 0x08	; 8
   11878:	c8 01       	movw	r24, r16
   1187a:	0e 94 7c 7d 	call	0xfaf8	; 0xfaf8 <fopen>
   1187e:	90 93 2c 19 	sts	0x192C, r25	; 0x80192c <gpib_log_fp+0x1>
   11882:	80 93 2b 19 	sts	0x192B, r24	; 0x80192b <gpib_log_fp>
        if(gpib_log_fp == NULL)
   11886:	89 2b       	or	r24, r25
   11888:	b9 f4       	brne	.+46     	; 0x118b8 <gpib_trace_task+0xae>
        {
            perror("open failed");
   1188a:	89 e7       	ldi	r24, 0x79	; 121
   1188c:	9d e0       	ldi	r25, 0x0D	; 13
   1188e:	0e 94 ad 77 	call	0xef5a	; 0xef5a <perror>
            printf("exiting...\n");
   11892:	82 ed       	ldi	r24, 0xD2	; 210
   11894:	92 e1       	ldi	r25, 0x12	; 18
   11896:	a0 e0       	ldi	r26, 0x00	; 0
   11898:	ed b7       	in	r30, 0x3d	; 61
   1189a:	fe b7       	in	r31, 0x3e	; 62
   1189c:	81 83       	std	Z+1, r24	; 0x01
   1189e:	92 83       	std	Z+2, r25	; 0x02
   118a0:	a3 83       	std	Z+3, r26	; 0x03
   118a2:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
            return;
   118a6:	3e c0       	rjmp	.+124    	; 0x11924 <gpib_trace_task+0x11a>
        }
    }
    else
    {
        gpib_log_fp = stdout;
   118a8:	80 91 85 1c 	lds	r24, 0x1C85	; 0x801c85 <__iob+0x2>
   118ac:	90 91 86 1c 	lds	r25, 0x1C86	; 0x801c86 <__iob+0x3>
   118b0:	90 93 2c 19 	sts	0x192C, r25	; 0x80192c <gpib_log_fp+0x1>
   118b4:	80 93 2b 19 	sts	0x192B, r24	; 0x80192b <gpib_log_fp>
    }

    gpib_state_init();                            // Init PPR talking and listening states
    gpib_init_devices();
   118b8:	ce d8       	rcall	.-3684   	; 0x10a56 <gpib_state_init>

    gpib_decode_header(gpib_log_fp);
   118ba:	9e df       	rcall	.-196    	; 0x117f8 <gpib_init_devices>
   118bc:	80 91 2b 19 	lds	r24, 0x192B	; 0x80192b <gpib_log_fp>
   118c0:	90 91 2c 19 	lds	r25, 0x192C	; 0x80192c <gpib_log_fp+0x1>
    while(1)                                      // Main loop, forever
    {
        if(uart_keyhit(0))
   118c4:	3f db       	rcall	.-2434   	; 0x10f44 <gpib_decode_header>
   118c6:	80 e0       	ldi	r24, 0x00	; 0
   118c8:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <uart_keyhit>
            break;

        ch = gpib_read_byte(detail);
   118cc:	89 2b       	or	r24, r25
   118ce:	31 f4       	brne	.+12     	; 0x118dc <gpib_trace_task+0xd2>
        if(!detail)
   118d0:	ce 01       	movw	r24, r28
   118d2:	cc dc       	rcall	.-1640   	; 0x1126c <gpib_read_byte>
            gpib_decode(ch);
   118d4:	20 97       	sbiw	r28, 0x00	; 0
   118d6:	b9 f7       	brne	.-18     	; 0x118c6 <gpib_trace_task+0xbc>
   118d8:	9f dd       	rcall	.-1218   	; 0x11418 <gpib_decode>
    }

    printf("Done\n");
   118da:	f5 cf       	rjmp	.-22     	; 0x118c6 <gpib_trace_task+0xbc>
   118dc:	8c ec       	ldi	r24, 0xCC	; 204
   118de:	92 e1       	ldi	r25, 0x12	; 18
   118e0:	a0 e0       	ldi	r26, 0x00	; 0
   118e2:	ed b7       	in	r30, 0x3d	; 61
   118e4:	fe b7       	in	r31, 0x3e	; 62
   118e6:	81 83       	std	Z+1, r24	; 0x01
   118e8:	92 83       	std	Z+2, r25	; 0x02
   118ea:	a3 83       	std	Z+3, r26	; 0x03
   118ec:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    if(gpib_log_fp)
   118f0:	80 91 2b 19 	lds	r24, 0x192B	; 0x80192b <gpib_log_fp>
   118f4:	90 91 2c 19 	lds	r25, 0x192C	; 0x80192c <gpib_log_fp+0x1>
   118f8:	00 97       	sbiw	r24, 0x00	; 0
    {
        fclose(gpib_log_fp);
   118fa:	a1 f0       	breq	.+40     	; 0x11924 <gpib_trace_task+0x11a>
   118fc:	0e 94 26 7c 	call	0xf84c	; 0xf84c <fclose>
        printf("Capturing Closed\n");
   11900:	8a eb       	ldi	r24, 0xBA	; 186
   11902:	92 e1       	ldi	r25, 0x12	; 18
   11904:	a0 e0       	ldi	r26, 0x00	; 0
   11906:	ed b7       	in	r30, 0x3d	; 61
   11908:	fe b7       	in	r31, 0x3e	; 62
   1190a:	81 83       	std	Z+1, r24	; 0x01
   1190c:	92 83       	std	Z+2, r25	; 0x02
   1190e:	a3 83       	std	Z+3, r26	; 0x03
   11910:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
        gpib_log_fp = stdout;
   11914:	80 91 85 1c 	lds	r24, 0x1C85	; 0x801c85 <__iob+0x2>
   11918:	90 91 86 1c 	lds	r25, 0x1C86	; 0x801c86 <__iob+0x3>
   1191c:	90 93 2c 19 	sts	0x192C, r25	; 0x80192c <gpib_log_fp+0x1>
   11920:	80 93 2b 19 	sts	0x192B, r24	; 0x80192b <gpib_log_fp>
    }
}
   11924:	cd b7       	in	r28, 0x3d	; 61
   11926:	de b7       	in	r29, 0x3e	; 62
   11928:	25 96       	adiw	r28, 0x05	; 5
   1192a:	e4 e0       	ldi	r30, 0x04	; 4
   1192c:	0c 94 08 e0 	jmp	0x1c010	; 0x1c010 <__epilogue_restores__+0x1c>

00011930 <gpib_error_test>:
///
/// @return  val
/// @return ABORT flag on user keypress

uint16_t gpib_error_test(uint16_t val)
{
   11930:	ef 92       	push	r14
   11932:	ff 92       	push	r15
   11934:	0f 93       	push	r16
   11936:	1f 93       	push	r17
   11938:	cf 93       	push	r28
   1193a:	df 93       	push	r29
   1193c:	00 d0       	rcall	.+0      	; 0x1193e <gpib_error_test+0xe>
   1193e:	1f 92       	push	r1
   11940:	7c 01       	movw	r14, r24

    if(val & ERROR_MASK || uart_keyhit(0) || mmc_ins_status() != 1 )
   11942:	ec 01       	movw	r28, r24
   11944:	cc 27       	eor	r28, r28
   11946:	d0 7d       	andi	r29, 0xD0	; 208
   11948:	20 97       	sbiw	r28, 0x00	; 0
   1194a:	61 f0       	breq	.+24     	; 0x11964 <gpib_error_test+0x34>
    {
        val &= ERROR_MASK;

        ///@brief IFC is and important state so display it for most messages
        if(debuglevel & (GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TOP_LEVEL_BUS_DECODE + GPIB_DEVICE_STATE_MESSAGES))
   1194c:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   11950:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   11954:	8e 72       	andi	r24, 0x2E	; 46
   11956:	99 27       	eor	r25, r25
   11958:	87 01       	movw	r16, r14
   1195a:	00 27       	eor	r16, r16
   1195c:	10 71       	andi	r17, 0x10	; 16
   1195e:	89 2b       	or	r24, r25
   11960:	59 f4       	brne	.+22     	; 0x11978 <gpib_error_test+0x48>
   11962:	17 c0       	rjmp	.+46     	; 0x11992 <gpib_error_test+0x62>
/// @return ABORT flag on user keypress

uint16_t gpib_error_test(uint16_t val)
{

    if(val & ERROR_MASK || uart_keyhit(0) || mmc_ins_status() != 1 )
   11964:	80 e0       	ldi	r24, 0x00	; 0
   11966:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <uart_keyhit>
   1196a:	89 2b       	or	r24, r25
   1196c:	79 f7       	brne	.-34     	; 0x1194c <gpib_error_test+0x1c>
   1196e:	0e 94 45 6f 	call	0xde8a	; 0xde8a <mmc_ins_status>
   11972:	01 97       	sbiw	r24, 0x01	; 1
   11974:	59 f7       	brne	.-42     	; 0x1194c <gpib_error_test+0x1c>
   11976:	62 c0       	rjmp	.+196    	; 0x11a3c <gpib_error_test+0x10c>

        ///@brief IFC is and important state so display it for most messages
        if(debuglevel & (GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TOP_LEVEL_BUS_DECODE + GPIB_DEVICE_STATE_MESSAGES))
        {
            /// Bus Clear, reseat all states, etc
            if(val & IFC_FLAG)
   11978:	01 15       	cp	r16, r1
   1197a:	11 05       	cpc	r17, r1
   1197c:	51 f0       	breq	.+20     	; 0x11992 <gpib_error_test+0x62>
                printf("<IFC>\n");
   1197e:	83 eb       	ldi	r24, 0xB3	; 179
   11980:	92 e1       	ldi	r25, 0x12	; 18
   11982:	a0 e0       	ldi	r26, 0x00	; 0
   11984:	ed b7       	in	r30, 0x3d	; 61
   11986:	fe b7       	in	r31, 0x3e	; 62
   11988:	81 83       	std	Z+1, r24	; 0x01
   1198a:	92 83       	std	Z+2, r25	; 0x02
   1198c:	a3 83       	std	Z+3, r26	; 0x03
   1198e:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
        }

        if(debuglevel & (GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TOP_LEVEL_BUS_DECODE + GPIB_DEVICE_STATE_MESSAGES))
   11992:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   11996:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   1199a:	8e 72       	andi	r24, 0x2E	; 46
   1199c:	99 27       	eor	r25, r25
   1199e:	89 2b       	or	r24, r25
   119a0:	c1 f0       	breq	.+48     	; 0x119d2 <gpib_error_test+0xa2>
        {
            if(val & TIMEOUT_FLAG)
   119a2:	f6 fe       	sbrs	r15, 6
   119a4:	0a c0       	rjmp	.+20     	; 0x119ba <gpib_error_test+0x8a>
                printf("<TIMEOUT>\n");
   119a6:	88 ea       	ldi	r24, 0xA8	; 168
   119a8:	92 e1       	ldi	r25, 0x12	; 18
   119aa:	a0 e0       	ldi	r26, 0x00	; 0
   119ac:	ed b7       	in	r30, 0x3d	; 61
   119ae:	fe b7       	in	r31, 0x3e	; 62
   119b0:	81 83       	std	Z+1, r24	; 0x01
   119b2:	92 83       	std	Z+2, r25	; 0x02
   119b4:	a3 83       	std	Z+3, r26	; 0x03
   119b6:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
            if(val & BUS_ERROR_FLAG)
   119ba:	d7 ff       	sbrs	r29, 7
   119bc:	0a c0       	rjmp	.+20     	; 0x119d2 <gpib_error_test+0xa2>
                printf("<BUS>\n");
   119be:	81 ea       	ldi	r24, 0xA1	; 161
   119c0:	92 e1       	ldi	r25, 0x12	; 18
   119c2:	a0 e0       	ldi	r26, 0x00	; 0
   119c4:	ed b7       	in	r30, 0x3d	; 61
   119c6:	fe b7       	in	r31, 0x3e	; 62
   119c8:	81 83       	std	Z+1, r24	; 0x01
   119ca:	92 83       	std	Z+2, r25	; 0x02
   119cc:	a3 83       	std	Z+3, r26	; 0x03
   119ce:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
        }

        if(uart_keyhit(0))
   119d2:	80 e0       	ldi	r24, 0x00	; 0
   119d4:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <uart_keyhit>
   119d8:	89 2b       	or	r24, r25
   119da:	51 f0       	breq	.+20     	; 0x119f0 <gpib_error_test+0xc0>
            printf("<INTERRUPT>\n");
   119dc:	84 e9       	ldi	r24, 0x94	; 148
   119de:	92 e1       	ldi	r25, 0x12	; 18
   119e0:	a0 e0       	ldi	r26, 0x00	; 0
   119e2:	ed b7       	in	r30, 0x3d	; 61
   119e4:	fe b7       	in	r31, 0x3e	; 62
   119e6:	81 83       	std	Z+1, r24	; 0x01
   119e8:	92 83       	std	Z+2, r25	; 0x02
   119ea:	a3 83       	std	Z+3, r26	; 0x03
   119ec:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>

        if( mmc_ins_status() != 1 )
   119f0:	0e 94 45 6f 	call	0xde8a	; 0xde8a <mmc_ins_status>
   119f4:	01 97       	sbiw	r24, 0x01	; 1
   119f6:	51 f0       	breq	.+20     	; 0x11a0c <gpib_error_test+0xdc>
            printf("<MEDIA MISSING>\n");
   119f8:	83 e8       	ldi	r24, 0x83	; 131
   119fa:	92 e1       	ldi	r25, 0x12	; 18
   119fc:	a0 e0       	ldi	r26, 0x00	; 0
   119fe:	ed b7       	in	r30, 0x3d	; 61
   11a00:	fe b7       	in	r31, 0x3e	; 62
   11a02:	81 83       	std	Z+1, r24	; 0x01
   11a04:	92 83       	std	Z+2, r25	; 0x02
   11a06:	a3 83       	std	Z+3, r26	; 0x03
   11a08:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>

        if(val & IFC_FLAG)
   11a0c:	01 15       	cp	r16, r1
   11a0e:	11 05       	cpc	r17, r1
        {
            gpib_init_devices();
   11a10:	09 f0       	breq	.+2      	; 0x11a14 <gpib_error_test+0xe4>
        }

        if(uart_keyhit(0))
   11a12:	f2 de       	rcall	.-540    	; 0x117f8 <gpib_init_devices>
   11a14:	80 e0       	ldi	r24, 0x00	; 0
   11a16:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <uart_keyhit>
        {
            gpib_init_devices();
   11a1a:	89 2b       	or	r24, r25
   11a1c:	11 f0       	breq	.+4      	; 0x11a22 <gpib_error_test+0xf2>
   11a1e:	ec de       	rcall	.-552    	; 0x117f8 <gpib_init_devices>
            return(ABORT_FLAG);
        }

/// @todo  do we want to always exit here ?
///  low level GPIB functions are still useful even without a DISK
        if( mmc_ins_status() != 1 )
   11a20:	0b c0       	rjmp	.+22     	; 0x11a38 <gpib_error_test+0x108>
   11a22:	0e 94 45 6f 	call	0xde8a	; 0xde8a <mmc_ins_status>
   11a26:	01 97       	sbiw	r24, 0x01	; 1
        {
            return(ABORT_FLAG);
        }

		// Wait for IFC free
        if(val & IFC_FLAG )
   11a28:	39 f4       	brne	.+14     	; 0x11a38 <gpib_error_test+0x108>
   11a2a:	01 15       	cp	r16, r1
   11a2c:	11 05       	cpc	r17, r1
        {
            while(GPIB_IO_RD(IFC) == 0)
   11a2e:	31 f0       	breq	.+12     	; 0x11a3c <gpib_error_test+0x10c>
   11a30:	54 98       	cbi	0x0a, 4	; 10
   11a32:	4c 9b       	sbis	0x09, 4	; 9
   11a34:	fd cf       	rjmp	.-6      	; 0x11a30 <gpib_error_test+0x100>

/// @todo  do we want to always exit here ?
///  low level GPIB functions are still useful even without a DISK
        if( mmc_ins_status() != 1 )
        {
            return(ABORT_FLAG);
   11a36:	02 c0       	rjmp	.+4      	; 0x11a3c <gpib_error_test+0x10c>
   11a38:	c1 e0       	ldi	r28, 0x01	; 1
                ;
        }
        return(val);
    }
    return(0);
}
   11a3a:	d0 e0       	ldi	r29, 0x00	; 0
   11a3c:	ce 01       	movw	r24, r28
   11a3e:	cd b7       	in	r28, 0x3d	; 61
   11a40:	de b7       	in	r29, 0x3e	; 62
   11a42:	23 96       	adiw	r28, 0x03	; 3
   11a44:	e6 e0       	ldi	r30, 0x06	; 6
   11a46:	0c 94 06 e0 	jmp	0x1c00c	; 0x1c00c <__epilogue_restores__+0x18>

00011a4a <GPIB_COMMANDS>:
///
/// @return GPIB status from emulator command.
/// @return 0 if no emulator command processed.

uint16_t GPIB_COMMANDS(uint16_t val, uint8_t unread)
{
   11a4a:	1f 93       	push	r17
   11a4c:	cf 93       	push	r28
   11a4e:	df 93       	push	r29
   11a50:	ec 01       	movw	r28, r24
   11a52:	16 2f       	mov	r17, r22
    uint16_t status;

    ///@brief talking ?
    if(talking != UNT)
   11a54:	80 91 b2 1e 	lds	r24, 0x1EB2	; 0x801eb2 <talking>
   11a58:	8f 35       	cpi	r24, 0x5F	; 95
   11a5a:	91 f0       	breq	.+36     	; 0x11a80 <GPIB_COMMANDS+0x36>
    {

#ifdef AMIGO
        if ( AMIGO_is_MLA(listening) )
   11a5c:	80 91 b4 1e 	lds	r24, 0x1EB4	; 0x801eb4 <listening>
   11a60:	90 e0       	ldi	r25, 0x00	; 0
   11a62:	75 de       	rcall	.-790    	; 0x1174e <AMIGO_is_MLA>
   11a64:	89 2b       	or	r24, r25
   11a66:	c9 f4       	brne	.+50     	; 0x11a9a <GPIB_COMMANDS+0x50>
            secondary = 0;
            return(status);
        }
#endif                      // ifdef AMIGO

        if ( SS80_is_MLA(listening) )
   11a68:	80 91 b4 1e 	lds	r24, 0x1EB4	; 0x801eb4 <listening>
   11a6c:	90 e0       	ldi	r25, 0x00	; 0
   11a6e:	3c de       	rcall	.-904    	; 0x116e8 <SS80_is_MLA>
   11a70:	89 2b       	or	r24, r25
   11a72:	11 f5       	brne	.+68     	; 0x11ab8 <GPIB_COMMANDS+0x6e>
            status = SS80_COMMANDS(secondary);
            secondary = 0;
            return(status);
        }

        if ( PRINTER_is_MLA(listening) )
   11a74:	80 91 b4 1e 	lds	r24, 0x1EB4	; 0x801eb4 <listening>
   11a78:	90 e0       	ldi	r25, 0x00	; 0
   11a7a:	9c de       	rcall	.-712    	; 0x117b4 <PRINTER_is_MLA>
   11a7c:	89 2b       	or	r24, r25
   11a7e:	59 f5       	brne	.+86     	; 0x11ad6 <GPIB_COMMANDS+0x8c>
            return(status);
        }
    }

    ///@brief listening ?
    if(listening != UNL)
   11a80:	80 91 b4 1e 	lds	r24, 0x1EB4	; 0x801eb4 <listening>
   11a84:	8f 33       	cpi	r24, 0x3F	; 63
   11a86:	19 f4       	brne	.+6      	; 0x11a8e <GPIB_COMMANDS+0x44>
            status = PRINTER_COMMANDS(secondary);
            secondary = 0;
            return(status);
        }
    }
    return(0);
   11a88:	80 e0       	ldi	r24, 0x00	; 0
   11a8a:	90 e0       	ldi	r25, 0x00	; 0

    ///@brief listening ?
    if(listening != UNL)
    {
#ifdef AMIGO
        if ( AMIGO_is_MTA(talking) )
   11a8c:	2e c0       	rjmp	.+92     	; 0x11aea <GPIB_COMMANDS+0xa0>
   11a8e:	80 91 b2 1e 	lds	r24, 0x1EB2	; 0x801eb2 <talking>
   11a92:	90 e0       	ldi	r25, 0x00	; 0
   11a94:	6d de       	rcall	.-806    	; 0x11770 <AMIGO_is_MTA>
        {
            if(unread)
   11a96:	89 2b       	or	r24, r25
   11a98:	49 f0       	breq	.+18     	; 0x11aac <GPIB_COMMANDS+0x62>
                gpib_unread(val);
   11a9a:	11 23       	and	r17, r17
   11a9c:	11 f0       	breq	.+4      	; 0x11aa2 <GPIB_COMMANDS+0x58>
   11a9e:	ce 01       	movw	r24, r28
            status = AMIGO_COMMANDS(secondary);
   11aa0:	96 d8       	rcall	.-3796   	; 0x10bce <gpib_unread>
   11aa2:	80 91 b3 1e 	lds	r24, 0x1EB3	; 0x801eb3 <secondary>
   11aa6:	0e 94 b4 b9 	call	0x17368	; 0x17368 <AMIGO_COMMANDS>
            secondary = 0;
            return(status);
        }
#endif 

        if ( SS80_is_MTA(talking) )
   11aaa:	1d c0       	rjmp	.+58     	; 0x11ae6 <GPIB_COMMANDS+0x9c>
   11aac:	80 91 b2 1e 	lds	r24, 0x1EB2	; 0x801eb2 <talking>
   11ab0:	90 e0       	ldi	r25, 0x00	; 0
   11ab2:	2b de       	rcall	.-938    	; 0x1170a <SS80_is_MTA>
        {
            if(unread)
   11ab4:	89 2b       	or	r24, r25
   11ab6:	49 f0       	breq	.+18     	; 0x11aca <GPIB_COMMANDS+0x80>
                gpib_unread(val);
   11ab8:	11 23       	and	r17, r17
   11aba:	11 f0       	breq	.+4      	; 0x11ac0 <GPIB_COMMANDS+0x76>
   11abc:	ce 01       	movw	r24, r28
            status = SS80_COMMANDS(secondary);
   11abe:	87 d8       	rcall	.-3826   	; 0x10bce <gpib_unread>
   11ac0:	80 91 b3 1e 	lds	r24, 0x1EB3	; 0x801eb3 <secondary>
   11ac4:	0e 94 11 ae 	call	0x15c22	; 0x15c22 <SS80_COMMANDS>
            secondary = 0;
            return(status);
        }

        if ( PRINTER_is_MTA(talking) )
   11ac8:	0e c0       	rjmp	.+28     	; 0x11ae6 <GPIB_COMMANDS+0x9c>
   11aca:	80 91 b2 1e 	lds	r24, 0x1EB2	; 0x801eb2 <talking>
   11ace:	90 e0       	ldi	r25, 0x00	; 0
   11ad0:	82 de       	rcall	.-764    	; 0x117d6 <PRINTER_is_MTA>
        {
            if(unread)
   11ad2:	89 2b       	or	r24, r25
   11ad4:	c9 f2       	breq	.-78     	; 0x11a88 <GPIB_COMMANDS+0x3e>
                gpib_unread(val);
   11ad6:	11 23       	and	r17, r17
   11ad8:	11 f0       	breq	.+4      	; 0x11ade <GPIB_COMMANDS+0x94>
   11ada:	ce 01       	movw	r24, r28
            status = PRINTER_COMMANDS(secondary);
   11adc:	78 d8       	rcall	.-3856   	; 0x10bce <gpib_unread>
   11ade:	80 91 b3 1e 	lds	r24, 0x1EB3	; 0x801eb3 <secondary>
   11ae2:	0e 94 2d bc 	call	0x1785a	; 0x1785a <PRINTER_COMMANDS>
            secondary = 0;
   11ae6:	10 92 b3 1e 	sts	0x1EB3, r1	; 0x801eb3 <secondary>
            return(status);
        }
    }
    return(0);
}
   11aea:	df 91       	pop	r29
   11aec:	cf 91       	pop	r28
   11aee:	1f 91       	pop	r17
   11af0:	08 95       	ret

00011af2 <Send_Identify>:
///
/// @return  0 on GPIB error returns error flags
/// @see gpib.h ERROR_MASK for a full list.

int Send_Identify(uint8_t ch, uint16_t ID)
{
   11af2:	cf 92       	push	r12
   11af4:	df 92       	push	r13
   11af6:	ff 92       	push	r15
   11af8:	0f 93       	push	r16
   11afa:	1f 93       	push	r17
   11afc:	cf 93       	push	r28
   11afe:	df 93       	push	r29
   11b00:	cd b7       	in	r28, 0x3d	; 61
   11b02:	de b7       	in	r29, 0x3e	; 62
   11b04:	2b 97       	sbiw	r28, 0x0b	; 11
   11b06:	0f b6       	in	r0, 0x3f	; 63
   11b08:	f8 94       	cli
   11b0a:	de bf       	out	0x3e, r29	; 62
   11b0c:	0f be       	out	0x3f, r0	; 63
   11b0e:	cd bf       	out	0x3d, r28	; 61
   11b10:	f8 2e       	mov	r15, r24
   11b12:	6b 01       	movw	r12, r22
    uint16_t status = EOI_FLAG;
   11b14:	80 e0       	ldi	r24, 0x00	; 0
   11b16:	91 e0       	ldi	r25, 0x01	; 1
   11b18:	9b 87       	std	Y+11, r25	; 0x0b
   11b1a:	8a 87       	std	Y+10, r24	; 0x0a
    uint8_t tmp[2];

    V2B_MSB(tmp,0,2,ID);
   11b1c:	8b 01       	movw	r16, r22
   11b1e:	20 e0       	ldi	r18, 0x00	; 0
   11b20:	30 e0       	ldi	r19, 0x00	; 0
   11b22:	42 e0       	ldi	r20, 0x02	; 2
   11b24:	50 e0       	ldi	r21, 0x00	; 0
   11b26:	60 e0       	ldi	r22, 0x00	; 0
   11b28:	70 e0       	ldi	r23, 0x00	; 0
   11b2a:	ce 01       	movw	r24, r28
   11b2c:	08 96       	adiw	r24, 0x08	; 8
   11b2e:	0e 94 68 bc 	call	0x178d0	; 0x178d0 <V2B_MSB>
    if(gpib_write_str(tmp,2, &status) != 2)
   11b32:	ae 01       	movw	r20, r28
   11b34:	46 5f       	subi	r20, 0xF6	; 246
   11b36:	5f 4f       	sbci	r21, 0xFF	; 255
   11b38:	62 e0       	ldi	r22, 0x02	; 2
   11b3a:	70 e0       	ldi	r23, 0x00	; 0
   11b3c:	ce 01       	movw	r24, r28
   11b3e:	08 96       	adiw	r24, 0x08	; 8
   11b40:	11 dd       	rcall	.-1502   	; 0x11564 <gpib_write_str>
   11b42:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   11b46:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   11b4a:	02 97       	sbiw	r24, 0x02	; 2
   11b4c:	79 f0       	breq	.+30     	; 0x11b6c <Send_Identify+0x7a>
    {
        if(debuglevel & (GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11b4e:	26 72       	andi	r18, 0x26	; 38
   11b50:	33 27       	eor	r19, r19
   11b52:	23 2b       	or	r18, r19
   11b54:	f9 f0       	breq	.+62     	; 0x11b94 <Send_Identify+0xa2>
            printf("[IDENT Unit:%02XH=%04XH FAILED]\n", 
   11b56:	ed b7       	in	r30, 0x3d	; 61
   11b58:	fe b7       	in	r31, 0x3e	; 62
   11b5a:	d7 82       	std	Z+7, r13	; 0x07
   11b5c:	c6 82       	std	Z+6, r12	; 0x06
   11b5e:	8f 2d       	mov	r24, r15
   11b60:	90 e0       	ldi	r25, 0x00	; 0
   11b62:	95 83       	std	Z+5, r25	; 0x05
   11b64:	84 83       	std	Z+4, r24	; 0x04
   11b66:	82 e6       	ldi	r24, 0x62	; 98
   11b68:	92 e1       	ldi	r25, 0x12	; 18
   11b6a:	0e c0       	rjmp	.+28     	; 0x11b88 <Send_Identify+0x96>
                (int)ch,(int)ID);
        return(status & ERROR_MASK);
    }
#if SDEBUG
    if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11b6c:	24 72       	andi	r18, 0x24	; 36
   11b6e:	33 27       	eor	r19, r19
   11b70:	23 2b       	or	r18, r19
   11b72:	81 f0       	breq	.+32     	; 0x11b94 <Send_Identify+0xa2>
        printf("[IDENT Unit:%02XH=%04XH]\n", (int)ch,(int)ID);
   11b74:	ed b7       	in	r30, 0x3d	; 61
   11b76:	fe b7       	in	r31, 0x3e	; 62
   11b78:	d7 82       	std	Z+7, r13	; 0x07
   11b7a:	c6 82       	std	Z+6, r12	; 0x06
   11b7c:	8f 2d       	mov	r24, r15
   11b7e:	90 e0       	ldi	r25, 0x00	; 0
   11b80:	95 83       	std	Z+5, r25	; 0x05
   11b82:	84 83       	std	Z+4, r24	; 0x04
   11b84:	88 e4       	ldi	r24, 0x48	; 72
   11b86:	92 e1       	ldi	r25, 0x12	; 18
   11b88:	a0 e0       	ldi	r26, 0x00	; 0
   11b8a:	81 83       	std	Z+1, r24	; 0x01
   11b8c:	92 83       	std	Z+2, r25	; 0x02
   11b8e:	a3 83       	std	Z+3, r26	; 0x03
   11b90:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
#endif
    return (status & ERROR_MASK);
   11b94:	8a 85       	ldd	r24, Y+10	; 0x0a
   11b96:	9b 85       	ldd	r25, Y+11	; 0x0b
   11b98:	88 27       	eor	r24, r24
   11b9a:	90 7d       	andi	r25, 0xD0	; 208
}
   11b9c:	2b 96       	adiw	r28, 0x0b	; 11
   11b9e:	0f b6       	in	r0, 0x3f	; 63
   11ba0:	f8 94       	cli
   11ba2:	de bf       	out	0x3e, r29	; 62
   11ba4:	0f be       	out	0x3f, r0	; 63
   11ba6:	cd bf       	out	0x3d, r28	; 61
   11ba8:	df 91       	pop	r29
   11baa:	cf 91       	pop	r28
   11bac:	1f 91       	pop	r17
   11bae:	0f 91       	pop	r16
   11bb0:	ff 90       	pop	r15
   11bb2:	df 90       	pop	r13
   11bb4:	cf 90       	pop	r12
   11bb6:	08 95       	ret

00011bb8 <GPIB>:
/// @return  0 on sucess
/// @return GPIB error flags on fail
/// @see gpib.h ERROR_MASK defines for a full list.

int GPIB(uint8_t ch)
{
   11bb8:	00 d0       	rcall	.+0      	; 0x11bba <GPIB+0x2>
   11bba:	00 d0       	rcall	.+0      	; 0x11bbc <GPIB+0x4>
   11bbc:	1f 92       	push	r1
   11bbe:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   11bc2:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <debuglevel+0x1>
    ///@brief Parallel Poll Configure
    ///TODO
    if(ch == PPC)
   11bc6:	85 30       	cpi	r24, 0x05	; 5
   11bc8:	89 f4       	brne	.+34     	; 0x11bec <GPIB+0x34>
    {
        if(debuglevel & (GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TODO))
   11bca:	26 71       	andi	r18, 0x16	; 22
   11bcc:	33 27       	eor	r19, r19
   11bce:	23 2b       	or	r18, r19
   11bd0:	51 f0       	breq	.+20     	; 0x11be6 <GPIB+0x2e>
            printf("[PPC unsupported TODO]\n");
   11bd2:	80 e3       	ldi	r24, 0x30	; 48
   11bd4:	92 e1       	ldi	r25, 0x12	; 18
   11bd6:	a0 e0       	ldi	r26, 0x00	; 0
   11bd8:	ed b7       	in	r30, 0x3d	; 61
   11bda:	fe b7       	in	r31, 0x3e	; 62
   11bdc:	81 83       	std	Z+1, r24	; 0x01
   11bde:	92 83       	std	Z+2, r25	; 0x02
   11be0:	a3 83       	std	Z+3, r26	; 0x03
   11be2:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
        spoll = 0;
   11be6:	10 92 af 1e 	sts	0x1EAF, r1	; 0x801eaf <spoll>
   11bea:	a0 c0       	rjmp	.+320    	; 0x11d2c <GPIB+0x174>
        return 0;
    }
    ///@brief Parallel Poll Unconfigure
    ///TODO
    if(ch == PPU)
   11bec:	85 31       	cpi	r24, 0x15	; 21
   11bee:	39 f4       	brne	.+14     	; 0x11bfe <GPIB+0x46>
    {
        if(debuglevel & (GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TODO))
   11bf0:	26 71       	andi	r18, 0x16	; 22
   11bf2:	33 27       	eor	r19, r19
   11bf4:	23 2b       	or	r18, r19
   11bf6:	b9 f3       	breq	.-18     	; 0x11be6 <GPIB+0x2e>
            printf("[PPU unsupported TODO]\n");
   11bf8:	88 e1       	ldi	r24, 0x18	; 24
   11bfa:	92 e1       	ldi	r25, 0x12	; 18
   11bfc:	ec cf       	rjmp	.-40     	; 0x11bd6 <GPIB+0x1e>
    }

/// @todo FIXME
#if defined(SPOLL)
    ///@brief Serial Poll Enable
    if(ch == SPE)
   11bfe:	88 31       	cpi	r24, 0x18	; 24
   11c00:	d9 f4       	brne	.+54     	; 0x11c38 <GPIB+0x80>
    {
#if SDEBUG
        if(debuglevel & (GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   11c02:	26 70       	andi	r18, 0x06	; 6
   11c04:	33 27       	eor	r19, r19
   11c06:	23 2b       	or	r18, r19
   11c08:	51 f0       	breq	.+20     	; 0x11c1e <GPIB+0x66>
            printf("[SPE]\n");
   11c0a:	81 e1       	ldi	r24, 0x11	; 17
   11c0c:	92 e1       	ldi	r25, 0x12	; 18
   11c0e:	a0 e0       	ldi	r26, 0x00	; 0
   11c10:	ed b7       	in	r30, 0x3d	; 61
   11c12:	fe b7       	in	r31, 0x3e	; 62
   11c14:	81 83       	std	Z+1, r24	; 0x01
   11c16:	92 83       	std	Z+2, r25	; 0x02
   11c18:	a3 83       	std	Z+3, r26	; 0x03
   11c1a:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
#endif
        spoll = 1;
   11c1e:	81 e0       	ldi	r24, 0x01	; 1
   11c20:	80 93 af 1e 	sts	0x1EAF, r24	; 0x801eaf <spoll>
        if(SS80_is_MTA(talking))
   11c24:	80 91 b2 1e 	lds	r24, 0x1EB2	; 0x801eb2 <talking>
   11c28:	90 e0       	ldi	r25, 0x00	; 0
   11c2a:	6f dd       	rcall	.-1314   	; 0x1170a <SS80_is_MTA>
   11c2c:	89 2b       	or	r24, r25
   11c2e:	09 f4       	brne	.+2      	; 0x11c32 <GPIB+0x7a>
   11c30:	7d c0       	rjmp	.+250    	; 0x11d2c <GPIB+0x174>
        {
            return( SS80_Report() );
   11c32:	0e 94 ca a9 	call	0x15394	; 0x15394 <SS80_Report>
   11c36:	7c c0       	rjmp	.+248    	; 0x11d30 <GPIB+0x178>
        }
        return 0;
    }

    ///@brief Serial Poll Disable
    if(ch == SPD)
   11c38:	89 31       	cpi	r24, 0x19	; 25
   11c3a:	39 f4       	brne	.+14     	; 0x11c4a <GPIB+0x92>
    {
#if SDEBUG
        if(debuglevel & (GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   11c3c:	26 70       	andi	r18, 0x06	; 6
   11c3e:	33 27       	eor	r19, r19
   11c40:	23 2b       	or	r18, r19
   11c42:	89 f2       	breq	.-94     	; 0x11be6 <GPIB+0x2e>
            printf("[SPD]\n");
   11c44:	8a e0       	ldi	r24, 0x0A	; 10
   11c46:	92 e1       	ldi	r25, 0x12	; 18
   11c48:	c6 cf       	rjmp	.-116    	; 0x11bd6 <GPIB+0x1e>
        return 0;
    }
#endif                      // #if defined(SPOLL)

    ///@brief Selected Device Clear
    if(ch == SDC )
   11c4a:	84 30       	cpi	r24, 0x04	; 4
   11c4c:	09 f0       	breq	.+2      	; 0x11c50 <GPIB+0x98>
   11c4e:	48 c0       	rjmp	.+144    	; 0x11ce0 <GPIB+0x128>
    {
#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11c50:	22 ff       	sbrs	r18, 2
   11c52:	0a c0       	rjmp	.+20     	; 0x11c68 <GPIB+0xb0>
            printf("[SDC]\n");
   11c54:	83 e0       	ldi	r24, 0x03	; 3
   11c56:	92 e1       	ldi	r25, 0x12	; 18
   11c58:	a0 e0       	ldi	r26, 0x00	; 0
   11c5a:	ed b7       	in	r30, 0x3d	; 61
   11c5c:	fe b7       	in	r31, 0x3e	; 62
   11c5e:	81 83       	std	Z+1, r24	; 0x01
   11c60:	92 83       	std	Z+2, r25	; 0x02
   11c62:	a3 83       	std	Z+3, r26	; 0x03
   11c64:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
#endif
        if(SS80_is_MLA(listening))
   11c68:	80 91 b4 1e 	lds	r24, 0x1EB4	; 0x801eb4 <listening>
   11c6c:	90 e0       	ldi	r25, 0x00	; 0
   11c6e:	3c dd       	rcall	.-1416   	; 0x116e8 <SS80_is_MLA>
   11c70:	89 2b       	or	r24, r25
   11c72:	d9 f0       	breq	.+54     	; 0x11caa <GPIB+0xf2>
        {
///  Note: Suposed to be unsupported in SS80 - pg 4-2
///  CS80 3-4
#if SDEBUG
            if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11c74:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   11c78:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   11c7c:	84 72       	andi	r24, 0x24	; 36
   11c7e:	99 27       	eor	r25, r25
   11c80:	89 2b       	or	r24, r25
   11c82:	51 f0       	breq	.+20     	; 0x11c98 <GPIB+0xe0>
                printf("[SDC SS80]\n");
   11c84:	87 ef       	ldi	r24, 0xF7	; 247
   11c86:	91 e1       	ldi	r25, 0x11	; 17
   11c88:	a0 e0       	ldi	r26, 0x00	; 0
   11c8a:	ed b7       	in	r30, 0x3d	; 61
   11c8c:	fe b7       	in	r31, 0x3e	; 62
   11c8e:	81 83       	std	Z+1, r24	; 0x01
   11c90:	92 83       	std	Z+2, r25	; 0x02
   11c92:	a3 83       	std	Z+3, r26	; 0x03
   11c94:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
#endif
            return(SS80_Selected_Device_Clear(SS80s->unitNO) );
   11c98:	e0 91 31 19 	lds	r30, 0x1931	; 0x801931 <SS80s>
   11c9c:	f0 91 32 19 	lds	r31, 0x1932	; 0x801932 <SS80s+0x1>
   11ca0:	85 81       	ldd	r24, Z+5	; 0x05
   11ca2:	90 e0       	ldi	r25, 0x00	; 0
   11ca4:	0e 94 96 aa 	call	0x1552c	; 0x1552c <SS80_Selected_Device_Clear>
   11ca8:	43 c0       	rjmp	.+134    	; 0x11d30 <GPIB+0x178>
        }

#ifdef AMIGO
        if(AMIGO_is_MLA(listening))
   11caa:	80 91 b4 1e 	lds	r24, 0x1EB4	; 0x801eb4 <listening>
   11cae:	90 e0       	ldi	r25, 0x00	; 0
   11cb0:	4e dd       	rcall	.-1380   	; 0x1174e <AMIGO_is_MLA>
   11cb2:	89 2b       	or	r24, r25
   11cb4:	d9 f1       	breq	.+118    	; 0x11d2c <GPIB+0x174>
        {
///  Note: Suposed to be unsupported in SS80 - pg 4-2
#if SDEBUG
            if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11cb6:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   11cba:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   11cbe:	84 72       	andi	r24, 0x24	; 36
   11cc0:	99 27       	eor	r25, r25
   11cc2:	89 2b       	or	r24, r25
   11cc4:	51 f0       	breq	.+20     	; 0x11cda <GPIB+0x122>
                printf("[SDC AMIGO]\n");
   11cc6:	8a ee       	ldi	r24, 0xEA	; 234
   11cc8:	91 e1       	ldi	r25, 0x11	; 17
   11cca:	a0 e0       	ldi	r26, 0x00	; 0
   11ccc:	ed b7       	in	r30, 0x3d	; 61
   11cce:	fe b7       	in	r31, 0x3e	; 62
   11cd0:	81 83       	std	Z+1, r24	; 0x01
   11cd2:	92 83       	std	Z+2, r25	; 0x02
   11cd4:	a3 83       	std	Z+3, r26	; 0x03
   11cd6:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
#endif
            return( amigo_cmd_clear() );
   11cda:	0e 94 9c b4 	call	0x16938	; 0x16938 <amigo_cmd_clear>
   11cde:	28 c0       	rjmp	.+80     	; 0x11d30 <GPIB+0x178>
        /// @todo FIXME
        return( 0 );
    }

    ///@brief   (Universal) Device Clear
    if(ch == DCL )
   11ce0:	84 31       	cpi	r24, 0x14	; 20
   11ce2:	99 f4       	brne	.+38     	; 0x11d0a <GPIB+0x152>
    {
#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11ce4:	22 ff       	sbrs	r18, 2
   11ce6:	0a c0       	rjmp	.+20     	; 0x11cfc <GPIB+0x144>
            printf("[DCL]\n");
   11ce8:	83 ee       	ldi	r24, 0xE3	; 227
   11cea:	91 e1       	ldi	r25, 0x11	; 17
   11cec:	a0 e0       	ldi	r26, 0x00	; 0
   11cee:	ed b7       	in	r30, 0x3d	; 61
   11cf0:	fe b7       	in	r31, 0x3e	; 62
   11cf2:	81 83       	std	Z+1, r24	; 0x01
   11cf4:	92 83       	std	Z+2, r25	; 0x02
   11cf6:	a3 83       	std	Z+3, r26	; 0x03
   11cf8:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
#endif
        SS80_Universal_Device_Clear();
   11cfc:	0e 94 88 aa 	call	0x15510	; 0x15510 <SS80_Universal_Device_Clear>

#ifdef AMIGO
        amigo_cmd_clear();
   11d00:	0e 94 9c b4 	call	0x16938	; 0x16938 <amigo_cmd_clear>
#endif

/// @todo Fixme
        printer_close();
   11d04:	0e 94 b9 ba 	call	0x17572	; 0x17572 <printer_close>
   11d08:	11 c0       	rjmp	.+34     	; 0x11d2c <GPIB+0x174>
        return( 0 );
    }

    if(debuglevel & (GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TODO))
   11d0a:	26 71       	andi	r18, 0x16	; 22
   11d0c:	33 27       	eor	r19, r19
   11d0e:	23 2b       	or	r18, r19
   11d10:	69 f0       	breq	.+26     	; 0x11d2c <GPIB+0x174>
        printf("[GPIB (%02XH) not defined TODO]\n", 0xff & ch);
   11d12:	90 e0       	ldi	r25, 0x00	; 0
   11d14:	ed b7       	in	r30, 0x3d	; 61
   11d16:	fe b7       	in	r31, 0x3e	; 62
   11d18:	95 83       	std	Z+5, r25	; 0x05
   11d1a:	84 83       	std	Z+4, r24	; 0x04
   11d1c:	82 ec       	ldi	r24, 0xC2	; 194
   11d1e:	91 e1       	ldi	r25, 0x11	; 17
   11d20:	a0 e0       	ldi	r26, 0x00	; 0
   11d22:	81 83       	std	Z+1, r24	; 0x01
   11d24:	92 83       	std	Z+2, r25	; 0x02
   11d26:	a3 83       	std	Z+3, r26	; 0x03
   11d28:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    return(0);
   11d2c:	80 e0       	ldi	r24, 0x00	; 0
   11d2e:	90 e0       	ldi	r25, 0x00	; 0
}
   11d30:	0f 90       	pop	r0
   11d32:	0f 90       	pop	r0
   11d34:	0f 90       	pop	r0
   11d36:	0f 90       	pop	r0
   11d38:	0f 90       	pop	r0
   11d3a:	08 95       	ret

00011d3c <GPIB_TALK>:
/// @param[in] ch 8 bit talk command
///
/// @return  0

int GPIB_TALK(uint8_t ch)
{
   11d3c:	cf 93       	push	r28
   11d3e:	df 93       	push	r29
   11d40:	00 d0       	rcall	.+0      	; 0x11d42 <GPIB_TALK+0x6>
   11d42:	00 d0       	rcall	.+0      	; 0x11d44 <GPIB_TALK+0x8>
   11d44:	1f 92       	push	r1

///  NOTE: we must track the "addressed state" of each device
///  so we can determine its state - ie: command vs Secondary states
///  save talking state
    talking_last = talking;
   11d46:	90 91 b2 1e 	lds	r25, 0x1EB2	; 0x801eb2 <talking>
   11d4a:	90 93 b5 1e 	sts	0x1EB5, r25	; 0x801eb5 <talking_last>
    talking = ch;
   11d4e:	80 93 b2 1e 	sts	0x1EB2, r24	; 0x801eb2 <talking>

    talk_cleanup();

    ///@brief  Universal Untalk
    if(ch == UNT)
   11d52:	8f 35       	cpi	r24, 0x5F	; 95
   11d54:	79 f4       	brne	.+30     	; 0x11d74 <GPIB_TALK+0x38>
    {
        //FIXME talking = 0 ????
#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11d56:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   11d5a:	82 ff       	sbrs	r24, 2
   11d5c:	7f c0       	rjmp	.+254    	; 0x11e5c <GPIB_TALK+0x120>
            printf("[UNT]\n");
   11d5e:	8f e6       	ldi	r24, 0x6F	; 111
   11d60:	91 e1       	ldi	r25, 0x11	; 17
   11d62:	a0 e0       	ldi	r26, 0x00	; 0
   11d64:	ed b7       	in	r30, 0x3d	; 61
   11d66:	fe b7       	in	r31, 0x3e	; 62
   11d68:	81 83       	std	Z+1, r24	; 0x01
   11d6a:	92 83       	std	Z+2, r25	; 0x02
   11d6c:	a3 83       	std	Z+3, r26	; 0x03
   11d6e:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   11d72:	74 c0       	rjmp	.+232    	; 0x11e5c <GPIB_TALK+0x120>
#endif
        return(0);
    }

    
    if(SS80_is_MTA(ch))
   11d74:	c8 2f       	mov	r28, r24
   11d76:	d0 e0       	ldi	r29, 0x00	; 0
   11d78:	ce 01       	movw	r24, r28
   11d7a:	c7 dc       	rcall	.-1650   	; 0x1170a <SS80_is_MTA>
   11d7c:	89 2b       	or	r24, r25
   11d7e:	e1 f0       	breq	.+56     	; 0x11db8 <GPIB_TALK+0x7c>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11d80:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   11d84:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   11d88:	84 72       	andi	r24, 0x24	; 36
   11d8a:	99 27       	eor	r25, r25
   11d8c:	89 2b       	or	r24, r25
   11d8e:	61 f0       	breq	.+24     	; 0x11da8 <GPIB_TALK+0x6c>
            printf("[TA %02XH SS80]\n", 0xff & ch);
   11d90:	ed b7       	in	r30, 0x3d	; 61
   11d92:	fe b7       	in	r31, 0x3e	; 62
   11d94:	d5 83       	std	Z+5, r29	; 0x05
   11d96:	c4 83       	std	Z+4, r28	; 0x04
   11d98:	8e e5       	ldi	r24, 0x5E	; 94
   11d9a:	91 e1       	ldi	r25, 0x11	; 17
   11d9c:	a0 e0       	ldi	r26, 0x00	; 0
   11d9e:	81 83       	std	Z+1, r24	; 0x01
   11da0:	92 83       	std	Z+2, r25	; 0x02
   11da2:	a3 83       	std	Z+3, r26	; 0x03
   11da4:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
#endif

        if (spoll)
   11da8:	80 91 af 1e 	lds	r24, 0x1EAF	; 0x801eaf <spoll>
   11dac:	88 23       	and	r24, r24
   11dae:	09 f4       	brne	.+2      	; 0x11db2 <GPIB_TALK+0x76>
   11db0:	55 c0       	rjmp	.+170    	; 0x11e5c <GPIB_TALK+0x120>
        {
            SS80_Report();
   11db2:	0e 94 ca a9 	call	0x15394	; 0x15394 <SS80_Report>
        }
        return(0);
    }

#ifdef AMIGO
    if(AMIGO_is_MTA(ch))
   11db6:	52 c0       	rjmp	.+164    	; 0x11e5c <GPIB_TALK+0x120>
   11db8:	ce 01       	movw	r24, r28
   11dba:	da dc       	rcall	.-1612   	; 0x11770 <AMIGO_is_MTA>
   11dbc:	89 2b       	or	r24, r25
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11dbe:	81 f0       	breq	.+32     	; 0x11de0 <GPIB_TALK+0xa4>
   11dc0:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   11dc4:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   11dc8:	84 72       	andi	r24, 0x24	; 36
   11dca:	99 27       	eor	r25, r25
   11dcc:	89 2b       	or	r24, r25
   11dce:	09 f4       	brne	.+2      	; 0x11dd2 <GPIB_TALK+0x96>
            printf("[TA %02XH AMIGO]\n", 0xff & ch);
   11dd0:	45 c0       	rjmp	.+138    	; 0x11e5c <GPIB_TALK+0x120>
   11dd2:	ed b7       	in	r30, 0x3d	; 61
   11dd4:	fe b7       	in	r31, 0x3e	; 62
   11dd6:	d5 83       	std	Z+5, r29	; 0x05
   11dd8:	c4 83       	std	Z+4, r28	; 0x04
   11dda:	8c e4       	ldi	r24, 0x4C	; 76
#endif
        return(0);
    }
#endif                      // #ifdef AMIGO

    if(PRINTER_is_MTA(ch))
   11ddc:	91 e1       	ldi	r25, 0x11	; 17
   11dde:	38 c0       	rjmp	.+112    	; 0x11e50 <GPIB_TALK+0x114>
   11de0:	ce 01       	movw	r24, r28
   11de2:	f9 dc       	rcall	.-1550   	; 0x117d6 <PRINTER_is_MTA>
   11de4:	89 2b       	or	r24, r25
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11de6:	79 f0       	breq	.+30     	; 0x11e06 <GPIB_TALK+0xca>
   11de8:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   11dec:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   11df0:	84 72       	andi	r24, 0x24	; 36
   11df2:	99 27       	eor	r25, r25
   11df4:	89 2b       	or	r24, r25
            printf("[TA %02XH PRINTER]\n", 0xff & ch);
   11df6:	91 f1       	breq	.+100    	; 0x11e5c <GPIB_TALK+0x120>
   11df8:	ed b7       	in	r30, 0x3d	; 61
   11dfa:	fe b7       	in	r31, 0x3e	; 62
   11dfc:	d5 83       	std	Z+5, r29	; 0x05
   11dfe:	c4 83       	std	Z+4, r28	; 0x04
   11e00:	88 e3       	ldi	r24, 0x38	; 56
#endif
        return(0);
    }

    if(PRINTER_is_MLA(listening))
   11e02:	91 e1       	ldi	r25, 0x11	; 17
   11e04:	25 c0       	rjmp	.+74     	; 0x11e50 <GPIB_TALK+0x114>
   11e06:	80 91 b4 1e 	lds	r24, 0x1EB4	; 0x801eb4 <listening>
   11e0a:	90 e0       	ldi	r25, 0x00	; 0
   11e0c:	d3 dc       	rcall	.-1626   	; 0x117b4 <PRINTER_is_MLA>
   11e0e:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   11e12:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <debuglevel+0x1>
    {
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11e16:	89 2b       	or	r24, r25
   11e18:	99 f0       	breq	.+38     	; 0x11e40 <GPIB_TALK+0x104>
   11e1a:	24 72       	andi	r18, 0x24	; 36
   11e1c:	33 27       	eor	r19, r19
            printf("[PRINTER OPEN]\n");
   11e1e:	23 2b       	or	r18, r19
   11e20:	51 f0       	breq	.+20     	; 0x11e36 <GPIB_TALK+0xfa>
   11e22:	88 e2       	ldi	r24, 0x28	; 40
   11e24:	91 e1       	ldi	r25, 0x11	; 17
   11e26:	a0 e0       	ldi	r26, 0x00	; 0
   11e28:	ed b7       	in	r30, 0x3d	; 61
   11e2a:	fe b7       	in	r31, 0x3e	; 62
   11e2c:	81 83       	std	Z+1, r24	; 0x01
   11e2e:	92 83       	std	Z+2, r25	; 0x02
   11e30:	a3 83       	std	Z+3, r26	; 0x03
        printer_open(NULL);
   11e32:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   11e36:	80 e0       	ldi	r24, 0x00	; 0
   11e38:	90 e0       	ldi	r25, 0x00	; 0
   11e3a:	0e 94 11 bb 	call	0x17622	; 0x17622 <printer_open>
        return(0);
    }

#if SDEBUG
    if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11e3e:	0e c0       	rjmp	.+28     	; 0x11e5c <GPIB_TALK+0x120>
        printf("[TA %02XH]\n", 0xff & ch);
   11e40:	22 ff       	sbrs	r18, 2
   11e42:	0c c0       	rjmp	.+24     	; 0x11e5c <GPIB_TALK+0x120>
   11e44:	ed b7       	in	r30, 0x3d	; 61
   11e46:	fe b7       	in	r31, 0x3e	; 62
   11e48:	d5 83       	std	Z+5, r29	; 0x05
   11e4a:	c4 83       	std	Z+4, r28	; 0x04
   11e4c:	8c e1       	ldi	r24, 0x1C	; 28
   11e4e:	91 e1       	ldi	r25, 0x11	; 17
   11e50:	a0 e0       	ldi	r26, 0x00	; 0
   11e52:	81 83       	std	Z+1, r24	; 0x01
   11e54:	92 83       	std	Z+2, r25	; 0x02
   11e56:	a3 83       	std	Z+3, r26	; 0x03
#endif
    return(0);
}                                                 // Talk Address primary address group
   11e58:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   11e5c:	80 e0       	ldi	r24, 0x00	; 0
   11e5e:	90 e0       	ldi	r25, 0x00	; 0
   11e60:	cd b7       	in	r28, 0x3d	; 61
   11e62:	de b7       	in	r29, 0x3e	; 62
   11e64:	25 96       	adiw	r28, 0x05	; 5
   11e66:	e2 e0       	ldi	r30, 0x02	; 2
   11e68:	0c 94 0a e0 	jmp	0x1c014	; 0x1c014 <__epilogue_restores__+0x20>

00011e6c <GPIB_SECONDARY_ADDRESS>:
///
/// @param[in] ch 8 bit secondary address.
///
/// @return  0
int GPIB_SECONDARY_ADDRESS(uint8_t ch)
{
   11e6c:	a9 e0       	ldi	r26, 0x09	; 9
   11e6e:	b0 e0       	ldi	r27, 0x00	; 0
   11e70:	ec e3       	ldi	r30, 0x3C	; 60
   11e72:	ff e8       	ldi	r31, 0x8F	; 143
   11e74:	0c 94 ed df 	jmp	0x1bfda	; 0x1bfda <__prologue_saves__+0x1e>
   11e78:	18 2f       	mov	r17, r24
///  note: any errors will reset lastcmd
///  Universal Talk mode
///  Treat this as a Secondary Address ?
///  SS80 Ident 4-31
///  If we have our secondary address then send IDENT
    if(SS80_is_MSA(ch) )
   11e7a:	c8 2f       	mov	r28, r24
   11e7c:	d0 e0       	ldi	r29, 0x00	; 0
   11e7e:	ce 01       	movw	r24, r28
   11e80:	55 dc       	rcall	.-1878   	; 0x1172c <SS80_is_MSA>
   11e82:	89 2b       	or	r24, r25
   11e84:	09 f1       	breq	.+66     	; 0x11ec8 <GPIB_SECONDARY_ADDRESS+0x5c>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11e86:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   11e8a:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   11e8e:	84 72       	andi	r24, 0x24	; 36
   11e90:	99 27       	eor	r25, r25
   11e92:	89 2b       	or	r24, r25
   11e94:	61 f0       	breq	.+24     	; 0x11eae <GPIB_SECONDARY_ADDRESS+0x42>
            printf("[SA %02XH SS80]\n", 0xff & ch);
   11e96:	ed b7       	in	r30, 0x3d	; 61
   11e98:	fe b7       	in	r31, 0x3e	; 62
   11e9a:	d5 83       	std	Z+5, r29	; 0x05
   11e9c:	c4 83       	std	Z+4, r28	; 0x04
   11e9e:	8b e0       	ldi	r24, 0x0B	; 11
   11ea0:	91 e1       	ldi	r25, 0x11	; 17
   11ea2:	a0 e0       	ldi	r26, 0x00	; 0
   11ea4:	81 83       	std	Z+1, r24	; 0x01
   11ea6:	92 83       	std	Z+2, r25	; 0x02
   11ea8:	a3 83       	std	Z+3, r26	; 0x03
   11eaa:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
#endif
        ///@brief ch = secondary address
        gpib_disable_PPR(SS80p->HEADER.PPR);
   11eae:	e0 91 33 19 	lds	r30, 0x1933	; 0x801933 <SS80p>
   11eb2:	f0 91 34 19 	lds	r31, 0x1934	; 0x801934 <SS80p+0x1>
   11eb6:	81 81       	ldd	r24, Z+1	; 0x01
   11eb8:	90 e0       	ldi	r25, 0x00	; 0
   11eba:	0e 94 8e 85 	call	0x10b1c	; 0x10b1c <gpib_disable_PPR>
        return(Send_Identify( ch, SS80p->CONFIG.ID) );
   11ebe:	e0 91 33 19 	lds	r30, 0x1933	; 0x801933 <SS80p>
   11ec2:	f0 91 34 19 	lds	r31, 0x1934	; 0x801934 <SS80p+0x1>

    }

#ifdef AMIGO
    if(AMIGO_is_MSA(ch) )
   11ec6:	25 c0       	rjmp	.+74     	; 0x11f12 <GPIB_SECONDARY_ADDRESS+0xa6>
   11ec8:	ce 01       	movw	r24, r28
   11eca:	63 dc       	rcall	.-1850   	; 0x11792 <AMIGO_is_MSA>
   11ecc:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   11ed0:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   11ed4:	89 2b       	or	r24, r25
    {
/// @todo 
///     Two identify bytes should be repeated until untalked
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11ed6:	11 f1       	breq	.+68     	; 0x11f1c <GPIB_SECONDARY_ADDRESS+0xb0>
   11ed8:	c9 01       	movw	r24, r18
   11eda:	84 72       	andi	r24, 0x24	; 36
   11edc:	99 27       	eor	r25, r25
   11ede:	89 2b       	or	r24, r25
            printf("[SA %02XH AMIGO]\n", 0xff & ch);
   11ee0:	61 f0       	breq	.+24     	; 0x11efa <GPIB_SECONDARY_ADDRESS+0x8e>
   11ee2:	ed b7       	in	r30, 0x3d	; 61
   11ee4:	fe b7       	in	r31, 0x3e	; 62
   11ee6:	d5 83       	std	Z+5, r29	; 0x05
   11ee8:	c4 83       	std	Z+4, r28	; 0x04
   11eea:	89 ef       	ldi	r24, 0xF9	; 249
   11eec:	90 e1       	ldi	r25, 0x10	; 16
   11eee:	a0 e0       	ldi	r26, 0x00	; 0
   11ef0:	81 83       	std	Z+1, r24	; 0x01
   11ef2:	92 83       	std	Z+2, r25	; 0x02
   11ef4:	a3 83       	std	Z+3, r26	; 0x03
   11ef6:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
#endif
        ///@brief ch = secondary address
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   11efa:	e0 91 2f 19 	lds	r30, 0x192F	; 0x80192f <AMIGOp>
   11efe:	f0 91 30 19 	lds	r31, 0x1930	; 0x801930 <AMIGOp+0x1>
   11f02:	81 81       	ldd	r24, Z+1	; 0x01
   11f04:	90 e0       	ldi	r25, 0x00	; 0
   11f06:	0e 94 8e 85 	call	0x10b1c	; 0x10b1c <gpib_disable_PPR>
        return( Send_Identify( ch, AMIGOp->CONFIG.ID) );
   11f0a:	e0 91 2f 19 	lds	r30, 0x192F	; 0x80192f <AMIGOp>
   11f0e:	f0 91 30 19 	lds	r31, 0x1930	; 0x801930 <AMIGOp+0x1>
   11f12:	64 81       	ldd	r22, Z+4	; 0x04
   11f14:	75 81       	ldd	r23, Z+5	; 0x05
   11f16:	81 2f       	mov	r24, r17
   11f18:	ec dd       	rcall	.-1064   	; 0x11af2 <Send_Identify>
    }
#endif                      // #ifdef AMIGO

#if SDEBUG
    if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11f1a:	1d c0       	rjmp	.+58     	; 0x11f56 <GPIB_SECONDARY_ADDRESS+0xea>
   11f1c:	c9 01       	movw	r24, r18
   11f1e:	84 72       	andi	r24, 0x24	; 36
   11f20:	99 27       	eor	r25, r25
   11f22:	00 97       	sbiw	r24, 0x00	; 0
        printf("[SA %02XH, listen:%02XH, talk:%02XH]\n",
   11f24:	c1 f0       	breq	.+48     	; 0x11f56 <GPIB_SECONDARY_ADDRESS+0xea>
   11f26:	80 91 b2 1e 	lds	r24, 0x1EB2	; 0x801eb2 <talking>
   11f2a:	90 e0       	ldi	r25, 0x00	; 0
   11f2c:	ed b7       	in	r30, 0x3d	; 61
   11f2e:	fe b7       	in	r31, 0x3e	; 62
   11f30:	91 87       	std	Z+9, r25	; 0x09
   11f32:	80 87       	std	Z+8, r24	; 0x08
   11f34:	80 91 b4 1e 	lds	r24, 0x1EB4	; 0x801eb4 <listening>
   11f38:	90 e0       	ldi	r25, 0x00	; 0
   11f3a:	97 83       	std	Z+7, r25	; 0x07
   11f3c:	86 83       	std	Z+6, r24	; 0x06
   11f3e:	d5 83       	std	Z+5, r29	; 0x05
   11f40:	c4 83       	std	Z+4, r28	; 0x04
   11f42:	83 ed       	ldi	r24, 0xD3	; 211
   11f44:	90 e1       	ldi	r25, 0x10	; 16
   11f46:	a0 e0       	ldi	r26, 0x00	; 0
   11f48:	81 83       	std	Z+1, r24	; 0x01
   11f4a:	92 83       	std	Z+2, r25	; 0x02
   11f4c:	a3 83       	std	Z+3, r26	; 0x03
   11f4e:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
            0xff & ch, 0xff & listening, 0xff & talking);
#endif
    return(0);
   11f52:	80 e0       	ldi	r24, 0x00	; 0
} 
   11f54:	90 e0       	ldi	r25, 0x00	; 0
   11f56:	cd b7       	in	r28, 0x3d	; 61
   11f58:	de b7       	in	r29, 0x3e	; 62
   11f5a:	29 96       	adiw	r28, 0x09	; 9
   11f5c:	e3 e0       	ldi	r30, 0x03	; 3
   11f5e:	0c 94 09 e0 	jmp	0x1c012	; 0x1c012 <__epilogue_restores__+0x1e>

00011f62 <listen_cleanup>:
/// - Used to cleanup or close at the end of any listen address transition.
/// - Also called when GPIB bus reset or unlisten.
/// For now we just use this to close printer capture
/// @return  void
void listen_cleanup()
{
   11f62:	00 d0       	rcall	.+0      	; 0x11f64 <listen_cleanup+0x2>
   11f64:	1f 92       	push	r1
    if(listening_last)
   11f66:	60 91 ae 1e 	lds	r22, 0x1EAE	; 0x801eae <listening_last>
   11f6a:	66 23       	and	r22, r22
   11f6c:	e1 f0       	breq	.+56     	; 0x11fa6 <listen_cleanup+0x44>
    {
        int index = find_device(PRINTER_TYPE, listening_last, BASE_MLA);
   11f6e:	70 e0       	ldi	r23, 0x00	; 0
   11f70:	40 e2       	ldi	r20, 0x20	; 32
   11f72:	50 e0       	ldi	r21, 0x00	; 0
   11f74:	84 e0       	ldi	r24, 0x04	; 4
   11f76:	90 e0       	ldi	r25, 0x00	; 0
   11f78:	9c d6       	rcall	.+3384   	; 0x12cb2 <find_device>
        if(index == -1)
   11f7a:	01 96       	adiw	r24, 0x01	; 1
   11f7c:	a1 f0       	breq	.+40     	; 0x11fa6 <listen_cleanup+0x44>
            return;

        //We should not set the active device globally
        //FIXME if we have to then printer close should temprarily do so
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11f7e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   11f82:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   11f86:	84 72       	andi	r24, 0x24	; 36
   11f88:	99 27       	eor	r25, r25
   11f8a:	89 2b       	or	r24, r25
   11f8c:	51 f0       	breq	.+20     	; 0x11fa2 <listen_cleanup+0x40>
            printf("[PRINTER close]\n");
   11f8e:	82 ec       	ldi	r24, 0xC2	; 194
   11f90:	90 e1       	ldi	r25, 0x10	; 16
   11f92:	a0 e0       	ldi	r26, 0x00	; 0
   11f94:	ed b7       	in	r30, 0x3d	; 61
   11f96:	fe b7       	in	r31, 0x3e	; 62
   11f98:	81 83       	std	Z+1, r24	; 0x01
   11f9a:	92 83       	std	Z+2, r25	; 0x02
   11f9c:	a3 83       	std	Z+3, r26	; 0x03
   11f9e:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
        printer_close();
   11fa2:	0e 94 b9 ba 	call	0x17572	; 0x17572 <printer_close>
    }
}
   11fa6:	0f 90       	pop	r0
   11fa8:	0f 90       	pop	r0
   11faa:	0f 90       	pop	r0
   11fac:	08 95       	ret

00011fae <GPIB_LISTEN>:
/// @param[in] ch 8 bit listen command
///
/// @return  0 

int GPIB_LISTEN(uint8_t ch)
{
   11fae:	cf 93       	push	r28
   11fb0:	df 93       	push	r29
   11fb2:	00 d0       	rcall	.+0      	; 0x11fb4 <GPIB_LISTEN+0x6>
   11fb4:	00 d0       	rcall	.+0      	; 0x11fb6 <GPIB_LISTEN+0x8>
   11fb6:	1f 92       	push	r1
   11fb8:	c8 2f       	mov	r28, r24
    listening_last = listening;
   11fba:	80 91 b4 1e 	lds	r24, 0x1EB4	; 0x801eb4 <listening>
   11fbe:	80 93 ae 1e 	sts	0x1EAE, r24	; 0x801eae <listening_last>
    listening = ch;
   11fc2:	c0 93 b4 1e 	sts	0x1EB4, r28	; 0x801eb4 <listening>
    listen_cleanup();

///  NOTE: we must track the "addressed state" of each device
///  so we can determine its state - ie: command vs Secondary states
    ///@brief  Universal Unlisten
    if(ch == UNL)                                 
   11fc6:	cd df       	rcall	.-102    	; 0x11f62 <listen_cleanup>
   11fc8:	cf 33       	cpi	r28, 0x3F	; 63
    {
        listening = 0;
   11fca:	19 f5       	brne	.+70     	; 0x12012 <GPIB_LISTEN+0x64>
   11fcc:	10 92 b4 1e 	sts	0x1EB4, r1	; 0x801eb4 <listening>
    
#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11fd0:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   11fd4:	82 ff       	sbrs	r24, 2
        {
            printf("[UNL]\n");
   11fd6:	74 c0       	rjmp	.+232    	; 0x120c0 <GPIB_LISTEN+0x112>
   11fd8:	8b eb       	ldi	r24, 0xBB	; 187
   11fda:	91 e1       	ldi	r25, 0x11	; 17
   11fdc:	a0 e0       	ldi	r26, 0x00	; 0
   11fde:	ed b7       	in	r30, 0x3d	; 61
   11fe0:	fe b7       	in	r31, 0x3e	; 62
   11fe2:	81 83       	std	Z+1, r24	; 0x01
   11fe4:	92 83       	std	Z+2, r25	; 0x02
   11fe6:	a3 83       	std	Z+3, r26	; 0x03
   11fe8:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
            ///@brief add a line break if we both Untalk and Unlisten
            if(lastcmd == UNT)
   11fec:	80 91 ac 1c 	lds	r24, 0x1CAC	; 0x801cac <lastcmd>
   11ff0:	90 91 ad 1c 	lds	r25, 0x1CAD	; 0x801cad <lastcmd+0x1>
   11ff4:	8f 35       	cpi	r24, 0x5F	; 95
   11ff6:	91 05       	cpc	r25, r1
   11ff8:	09 f0       	breq	.+2      	; 0x11ffc <GPIB_LISTEN+0x4e>
                printf("\n");
   11ffa:	62 c0       	rjmp	.+196    	; 0x120c0 <GPIB_LISTEN+0x112>
   11ffc:	89 eb       	ldi	r24, 0xB9	; 185
   11ffe:	91 e1       	ldi	r25, 0x11	; 17
   12000:	a0 e0       	ldi	r26, 0x00	; 0
   12002:	ed b7       	in	r30, 0x3d	; 61
   12004:	fe b7       	in	r31, 0x3e	; 62
   12006:	81 83       	std	Z+1, r24	; 0x01
   12008:	92 83       	std	Z+2, r25	; 0x02
   1200a:	a3 83       	std	Z+3, r26	; 0x03
   1200c:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
#endif
        return(0);
    }

#ifdef AMIGO
    if(AMIGO_is_MLA(ch))
   12010:	57 c0       	rjmp	.+174    	; 0x120c0 <GPIB_LISTEN+0x112>
   12012:	d0 e0       	ldi	r29, 0x00	; 0
   12014:	ce 01       	movw	r24, r28
   12016:	9b db       	rcall	.-2250   	; 0x1174e <AMIGO_is_MLA>
   12018:	89 2b       	or	r24, r25
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   1201a:	81 f0       	breq	.+32     	; 0x1203c <GPIB_LISTEN+0x8e>
   1201c:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   12020:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   12024:	84 72       	andi	r24, 0x24	; 36
   12026:	99 27       	eor	r25, r25
   12028:	89 2b       	or	r24, r25
   1202a:	09 f4       	brne	.+2      	; 0x1202e <GPIB_LISTEN+0x80>
            printf("[LA %02XH AMIGO]\n", 0xff & ch);
   1202c:	49 c0       	rjmp	.+146    	; 0x120c0 <GPIB_LISTEN+0x112>
   1202e:	ed b7       	in	r30, 0x3d	; 61
   12030:	fe b7       	in	r31, 0x3e	; 62
   12032:	d5 83       	std	Z+5, r29	; 0x05
   12034:	c4 83       	std	Z+4, r28	; 0x04
   12036:	87 ea       	ldi	r24, 0xA7	; 167
#endif
        return(0);
    }
#endif                      // #ifdef AMIGO

    if(SS80_is_MLA(ch))
   12038:	91 e1       	ldi	r25, 0x11	; 17
   1203a:	3c c0       	rjmp	.+120    	; 0x120b4 <GPIB_LISTEN+0x106>
   1203c:	ce 01       	movw	r24, r28
   1203e:	54 db       	rcall	.-2392   	; 0x116e8 <SS80_is_MLA>
   12040:	89 2b       	or	r24, r25
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   12042:	79 f0       	breq	.+30     	; 0x12062 <GPIB_LISTEN+0xb4>
   12044:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   12048:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   1204c:	84 72       	andi	r24, 0x24	; 36
   1204e:	99 27       	eor	r25, r25
   12050:	89 2b       	or	r24, r25
            printf("[LA %02XH SS80]\n", 0xff & ch);
   12052:	b1 f1       	breq	.+108    	; 0x120c0 <GPIB_LISTEN+0x112>
   12054:	ed b7       	in	r30, 0x3d	; 61
   12056:	fe b7       	in	r31, 0x3e	; 62
   12058:	d5 83       	std	Z+5, r29	; 0x05
   1205a:	c4 83       	std	Z+4, r28	; 0x04
   1205c:	86 e9       	ldi	r24, 0x96	; 150
#endif
        return(0);
    }

    if(PRINTER_is_MLA(ch))
   1205e:	91 e1       	ldi	r25, 0x11	; 17
   12060:	29 c0       	rjmp	.+82     	; 0x120b4 <GPIB_LISTEN+0x106>
   12062:	ce 01       	movw	r24, r28
   12064:	a7 db       	rcall	.-2226   	; 0x117b4 <PRINTER_is_MLA>
   12066:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   1206a:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   1206e:	89 2b       	or	r24, r25
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   12070:	c9 f0       	breq	.+50     	; 0x120a4 <GPIB_LISTEN+0xf6>
   12072:	24 72       	andi	r18, 0x24	; 36
   12074:	33 27       	eor	r19, r19
   12076:	23 2b       	or	r18, r19
            printf("[LA %02XH PRINTER]\n", 0xff & ch);
   12078:	61 f0       	breq	.+24     	; 0x12092 <GPIB_LISTEN+0xe4>
   1207a:	ed b7       	in	r30, 0x3d	; 61
   1207c:	fe b7       	in	r31, 0x3e	; 62
   1207e:	d5 83       	std	Z+5, r29	; 0x05
   12080:	c4 83       	std	Z+4, r28	; 0x04
   12082:	82 e8       	ldi	r24, 0x82	; 130
   12084:	91 e1       	ldi	r25, 0x11	; 17
   12086:	a0 e0       	ldi	r26, 0x00	; 0
   12088:	81 83       	std	Z+1, r24	; 0x01
   1208a:	92 83       	std	Z+2, r25	; 0x02
   1208c:	a3 83       	std	Z+3, r26	; 0x03
   1208e:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
#endif
        if(talking != UNT)
   12092:	80 91 b2 1e 	lds	r24, 0x1EB2	; 0x801eb2 <talking>
   12096:	8f 35       	cpi	r24, 0x5F	; 95
        {
            ///@brief NULL creates a file named based on date and time
            printer_open(NULL);
   12098:	99 f0       	breq	.+38     	; 0x120c0 <GPIB_LISTEN+0x112>
   1209a:	80 e0       	ldi	r24, 0x00	; 0
   1209c:	90 e0       	ldi	r25, 0x00	; 0
   1209e:	0e 94 11 bb 	call	0x17622	; 0x17622 <printer_open>
        }
        return(0);
    }
#if SDEBUG
    if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   120a2:	0e c0       	rjmp	.+28     	; 0x120c0 <GPIB_LISTEN+0x112>
   120a4:	22 ff       	sbrs	r18, 2
        printf("[LA %02XH]\n", 0xff & ch);
   120a6:	0c c0       	rjmp	.+24     	; 0x120c0 <GPIB_LISTEN+0x112>
   120a8:	ed b7       	in	r30, 0x3d	; 61
   120aa:	fe b7       	in	r31, 0x3e	; 62
   120ac:	d5 83       	std	Z+5, r29	; 0x05
   120ae:	c4 83       	std	Z+4, r28	; 0x04
   120b0:	86 e7       	ldi	r24, 0x76	; 118
   120b2:	91 e1       	ldi	r25, 0x11	; 17
   120b4:	a0 e0       	ldi	r26, 0x00	; 0
   120b6:	81 83       	std	Z+1, r24	; 0x01
   120b8:	92 83       	std	Z+2, r25	; 0x02
   120ba:	a3 83       	std	Z+3, r26	; 0x03
   120bc:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
#endif
    return(0);
}                                                 // Listen Primary Address group
   120c0:	80 e0       	ldi	r24, 0x00	; 0
   120c2:	90 e0       	ldi	r25, 0x00	; 0
   120c4:	cd b7       	in	r28, 0x3d	; 61
   120c6:	de b7       	in	r29, 0x3e	; 62
   120c8:	25 96       	adiw	r28, 0x05	; 5
   120ca:	e2 e0       	ldi	r30, 0x02	; 2
   120cc:	0c 94 0a e0 	jmp	0x1c014	; 0x1c014 <__epilogue_restores__+0x20>

000120d0 <gpib_task>:
/// - Reads and processes GPIB control or data bytes
/// and calls emulator task.
/// @return  void

void gpib_task(void)
{
   120d0:	cf 93       	push	r28
   120d2:	df 93       	push	r29
    uint16_t val;
    uint8_t ch;
    uint16_t status;

    gpib_state_init();                            // Init PPR talking and listening states
   120d4:	0e 94 2b 85 	call	0x10a56	; 0x10a56 <gpib_state_init>
    gpib_init_devices();                          // Init devices

    gpib_log_fp = NULL;
   120d8:	8f db       	rcall	.-2274   	; 0x117f8 <gpib_init_devices>
   120da:	10 92 2c 19 	sts	0x192C, r1	; 0x80192c <gpib_log_fp+0x1>
   120de:	10 92 2b 19 	sts	0x192B, r1	; 0x80192b <gpib_log_fp>

    while(1)
    {

        val = gpib_read_byte(NO_TRACE);
   120e2:	80 e0       	ldi	r24, 0x00	; 0
   120e4:	90 e0       	ldi	r25, 0x00	; 0
   120e6:	c2 d8       	rcall	.-3708   	; 0x1126c <gpib_read_byte>

#if SDEBUG
        if(debuglevel & GPIB_TOP_LEVEL_BUS_DECODE)
   120e8:	ec 01       	movw	r28, r24
   120ea:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
            gpib_decode(val);
   120ee:	83 ff       	sbrs	r24, 3
   120f0:	02 c0       	rjmp	.+4      	; 0x120f6 <gpib_task+0x26>
#endif
        status = gpib_error_test(val);
   120f2:	ce 01       	movw	r24, r28
   120f4:	91 d9       	rcall	.-3294   	; 0x11418 <gpib_decode>
        if(status & ABORT_FLAG)
        {
            return;
        }
        else if(status & MEDIA_FLAG)
   120f6:	ce 01       	movw	r24, r28
   120f8:	1b dc       	rcall	.-1994   	; 0x11930 <gpib_error_test>
   120fa:	9c 01       	movw	r18, r24
   120fc:	23 70       	andi	r18, 0x03	; 3
   120fe:	33 27       	eor	r19, r19
   12100:	23 2b       	or	r18, r19
        {
            return;
        }
        else if(status)
   12102:	09 f0       	breq	.+2      	; 0x12106 <gpib_task+0x36>
   12104:	43 c0       	rjmp	.+134    	; 0x1218c <gpib_task+0xbc>
        {
            continue;
        }
        ///@brief GPIB commands with ATN set (COMMANDS)
        if(val & ATN_FLAG)
   12106:	89 2b       	or	r24, r25
   12108:	61 f7       	brne	.-40     	; 0x120e2 <gpib_task+0x12>
        {
            ch = val & CMD_MASK;
   1210a:	d2 ff       	sbrs	r29, 2
            if(ch <= 0x1f)
   1210c:	26 c0       	rjmp	.+76     	; 0x1215a <gpib_task+0x8a>
            {
                GPIB(ch);
   1210e:	8c 2f       	mov	r24, r28
   12110:	8f 77       	andi	r24, 0x7F	; 127
                continue;
   12112:	80 32       	cpi	r24, 0x20	; 32
            }
            ///@brief GPIB listen
            if(ch >= 0x20 && ch <= 0x3f)
   12114:	10 f4       	brcc	.+4      	; 0x1211a <gpib_task+0x4a>
   12116:	50 dd       	rcall	.-1376   	; 0x11bb8 <GPIB>
   12118:	e4 cf       	rjmp	.-56     	; 0x120e2 <gpib_task+0x12>
            {
                GPIB_LISTEN(ch);
   1211a:	90 ee       	ldi	r25, 0xE0	; 224
   1211c:	98 0f       	add	r25, r24
                continue;
            }
            ///@brief GPIB talk
            if(ch >= 0x40 && ch <= 0x5f)
   1211e:	90 32       	cpi	r25, 0x20	; 32
   12120:	10 f4       	brcc	.+4      	; 0x12126 <gpib_task+0x56>
   12122:	45 df       	rcall	.-374    	; 0x11fae <GPIB_LISTEN>
            {
                GPIB_TALK(ch);
   12124:	de cf       	rjmp	.-68     	; 0x120e2 <gpib_task+0x12>
   12126:	90 ec       	ldi	r25, 0xC0	; 192
                continue;
   12128:	98 0f       	add	r25, r24
            }

            ///@brief GPIB secondary
            /// Note: We know ch >= 0x60 && ch <= 0x7f because of previous tests

            if( listening && lastcmd == UNT)
   1212a:	90 32       	cpi	r25, 0x20	; 32
   1212c:	10 f4       	brcc	.+4      	; 0x12132 <gpib_task+0x62>
   1212e:	06 de       	rcall	.-1012   	; 0x11d3c <GPIB_TALK>
   12130:	d8 cf       	rjmp	.-80     	; 0x120e2 <gpib_task+0x12>
   12132:	90 91 b4 1e 	lds	r25, 0x1EB4	; 0x801eb4 <listening>
   12136:	99 23       	and	r25, r25
   12138:	59 f0       	breq	.+22     	; 0x12150 <gpib_task+0x80>
   1213a:	20 91 ac 1c 	lds	r18, 0x1CAC	; 0x801cac <lastcmd>
            {
                secondary = 0;
   1213e:	30 91 ad 1c 	lds	r19, 0x1CAD	; 0x801cad <lastcmd+0x1>
                GPIB_SECONDARY_ADDRESS(ch);
   12142:	2f 35       	cpi	r18, 0x5F	; 95
   12144:	31 05       	cpc	r19, r1
                continue;
   12146:	21 f4       	brne	.+8      	; 0x12150 <gpib_task+0x80>
            }

            ///@brief We have to keep track of secondary address that may happen out of order with older AMIGO protocol
            /// this method works for SS80 as well
            secondary = ch;
   12148:	10 92 b3 1e 	sts	0x1EB3, r1	; 0x801eb3 <secondary>
            ///@brief GPIB_COMMANDS does most of the work
            status = GPIB_COMMANDS(secondary,0);
   1214c:	8f de       	rcall	.-738    	; 0x11e6c <GPIB_SECONDARY_ADDRESS>
        }                                         // GPIB ATN

        ///@brief GPIB commands without ATN set (DATA)
        else                                      // GPIB Data
        {
            if ( PRINTER_is_MLA(listening) )
   1214e:	c9 cf       	rjmp	.-110    	; 0x120e2 <gpib_task+0x12>
   12150:	80 93 b3 1e 	sts	0x1EB3, r24	; 0x801eb3 <secondary>
   12154:	60 e0       	ldi	r22, 0x00	; 0
   12156:	90 e0       	ldi	r25, 0x00	; 0
   12158:	12 c0       	rjmp	.+36     	; 0x1217e <gpib_task+0xae>
   1215a:	80 91 b4 1e 	lds	r24, 0x1EB4	; 0x801eb4 <listening>
            {
                printer_buffer( 0xff & val );
   1215e:	90 e0       	ldi	r25, 0x00	; 0
   12160:	29 db       	rcall	.-2478   	; 0x117b4 <PRINTER_is_MLA>
   12162:	89 2b       	or	r24, r25
                continue;
            }

            if(!secondary)
   12164:	29 f0       	breq	.+10     	; 0x12170 <gpib_task+0xa0>
   12166:	ce 01       	movw	r24, r28
   12168:	99 27       	eor	r25, r25
                continue;

            // ONLY secondar commands at this point
            ///@brief GPIB_COMMANDS does most of the work
            status = GPIB_COMMANDS(val,1);
   1216a:	0e 94 b4 bb 	call	0x17768	; 0x17768 <printer_buffer>
   1216e:	b9 cf       	rjmp	.-142    	; 0x120e2 <gpib_task+0x12>
   12170:	80 91 b3 1e 	lds	r24, 0x1EB3	; 0x801eb3 <secondary>
            status = gpib_error_test(status);
   12174:	88 23       	and	r24, r24

            if(status & ( ABORT_FLAG | MEDIA_FLAG ))
   12176:	09 f4       	brne	.+2      	; 0x1217a <gpib_task+0xaa>
   12178:	b4 cf       	rjmp	.-152    	; 0x120e2 <gpib_task+0x12>
   1217a:	61 e0       	ldi	r22, 0x01	; 1
   1217c:	ce 01       	movw	r24, r28
   1217e:	65 dc       	rcall	.-1846   	; 0x11a4a <GPIB_COMMANDS>
            }
            continue;
        }
    }                                             // while(1)
    return;
}
   12180:	d7 db       	rcall	.-2130   	; 0x11930 <gpib_error_test>
   12182:	83 70       	andi	r24, 0x03	; 3
   12184:	99 27       	eor	r25, r25
   12186:	89 2b       	or	r24, r25
   12188:	09 f4       	brne	.+2      	; 0x1218c <gpib_task+0xbc>
   1218a:	ab cf       	rjmp	.-170    	; 0x120e2 <gpib_task+0x12>
   1218c:	df 91       	pop	r29
   1218e:	cf 91       	pop	r28
   12190:	08 95       	ret

00012192 <talk_cleanup>:
/// - Not used in this emulator.
/// 
/// @return  void

void talk_cleanup()
{
   12192:	08 95       	ret

00012194 <gpib_help>:
///  Help Menu for User invoked GPIB functions and tasks
///  See: int gpib_tests(char *str)
/// @return  void

void gpib_help(int full)
{
   12194:	cf 93       	push	r28
   12196:	df 93       	push	r29
   12198:	00 d0       	rcall	.+0      	; 0x1219a <gpib_help+0x6>
   1219a:	1f 92       	push	r1
   1219c:	ec 01       	movw	r28, r24
    printf("gpib help\n");
   1219e:	8c e4       	ldi	r24, 0x4C	; 76
   121a0:	95 e1       	ldi	r25, 0x15	; 21
   121a2:	a0 e0       	ldi	r26, 0x00	; 0
   121a4:	ed b7       	in	r30, 0x3d	; 61
   121a6:	fe b7       	in	r31, 0x3e	; 62
   121a8:	81 83       	std	Z+1, r24	; 0x01
   121aa:	92 83       	std	Z+2, r25	; 0x02
   121ac:	a3 83       	std	Z+3, r26	; 0x03
   121ae:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    if(full)
   121b2:	cd 2b       	or	r28, r29
   121b4:	51 f0       	breq	.+20     	; 0x121ca <gpib_help+0x36>
    {
        printf("Note: gpib prefix is optional\n"
   121b6:	83 e8       	ldi	r24, 0x83	; 131
   121b8:	93 e1       	ldi	r25, 0x13	; 19
   121ba:	a0 e0       	ldi	r26, 0x00	; 0
   121bc:	ed b7       	in	r30, 0x3d	; 61
   121be:	fe b7       	in	r31, 0x3e	; 62
   121c0:	81 83       	std	Z+1, r24	; 0x01
   121c2:	92 83       	std	Z+2, r25	; 0x02
   121c4:	a3 83       	std	Z+3, r26	; 0x03
   121c6:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
            "gpib ppr_set XX\n"
#endif
            "\n"
            );
    }
}
   121ca:	cd b7       	in	r28, 0x3d	; 61
   121cc:	de b7       	in	r29, 0x3e	; 62
   121ce:	23 96       	adiw	r28, 0x03	; 3
   121d0:	e2 e0       	ldi	r30, 0x02	; 2
   121d2:	0c 94 0a e0 	jmp	0x1c014	; 0x1c014 <__epilogue_restores__+0x20>

000121d6 <gpib_tests>:

/// @brief GPIB user tests
///  User invoked GPIB functions and tasks
/// @return  1 matched token, 0 if not
int gpib_tests(int argc, char * argv[])
{
   121d6:	a5 e0       	ldi	r26, 0x05	; 5
   121d8:	b0 e0       	ldi	r27, 0x00	; 0
   121da:	e1 ef       	ldi	r30, 0xF1	; 241
   121dc:	f0 e9       	ldi	r31, 0x90	; 144
   121de:	0c 94 e6 df 	jmp	0x1bfcc	; 0x1bfcc <__prologue_saves__+0x10>

    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   121e2:	fb 01       	movw	r30, r22
   121e4:	e0 80       	ld	r14, Z
   121e6:	f1 80       	ldd	r15, Z+1	; 0x01

    if(!ptr)
   121e8:	e1 14       	cp	r14, r1
   121ea:	f1 04       	cpc	r15, r1
   121ec:	19 f4       	brne	.+6      	; 0x121f4 <gpib_tests+0x1e>
        return(0);
   121ee:	80 e0       	ldi	r24, 0x00	; 0
   121f0:	90 e0       	ldi	r25, 0x00	; 0
   121f2:	dc c0       	rjmp	.+440    	; 0x123ac <gpib_tests+0x1d6>
   121f4:	6b 01       	movw	r12, r22
   121f6:	5c 01       	movw	r10, r24

    if( MATCH(ptr,"gpib") )
   121f8:	65 e8       	ldi	r22, 0x85	; 133
   121fa:	7d e0       	ldi	r23, 0x0D	; 13
   121fc:	c7 01       	movw	r24, r14
   121fe:	0e 94 95 31 	call	0x632a	; 0x632a <MATCH>
   12202:	89 2b       	or	r24, r25
   12204:	a1 f0       	breq	.+40     	; 0x1222e <gpib_tests+0x58>
    {
        ptr = argv[ind++];
   12206:	f6 01       	movw	r30, r12
   12208:	e2 80       	ldd	r14, Z+2	; 0x02
   1220a:	f3 80       	ldd	r15, Z+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
   1220c:	e1 14       	cp	r14, r1
   1220e:	f1 04       	cpc	r15, r1
   12210:	21 f4       	brne	.+8      	; 0x1221a <gpib_tests+0x44>
        {
            gpib_help(1);
   12212:	81 e0       	ldi	r24, 0x01	; 1
   12214:	90 e0       	ldi	r25, 0x00	; 0
   12216:	be df       	rcall	.-132    	; 0x12194 <gpib_help>
   12218:	c7 c0       	rjmp	.+398    	; 0x123a8 <gpib_tests+0x1d2>
        return(0);

    if( MATCH(ptr,"gpib") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
   1221a:	63 e6       	ldi	r22, 0x63	; 99
   1221c:	76 e1       	ldi	r23, 0x16	; 22
   1221e:	c7 01       	movw	r24, r14
   12220:	0e 94 95 31 	call	0x632a	; 0x632a <MATCH>
   12224:	89 2b       	or	r24, r25
   12226:	a9 f7       	brne	.-22     	; 0x12212 <gpib_tests+0x3c>
    if(!ptr)
        return(0);

    if( MATCH(ptr,"gpib") )
    {
        ptr = argv[ind++];
   12228:	c2 e0       	ldi	r28, 0x02	; 2
   1222a:	d0 e0       	ldi	r29, 0x00	; 0
   1222c:	02 c0       	rjmp	.+4      	; 0x12232 <gpib_tests+0x5c>

    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   1222e:	c1 e0       	ldi	r28, 0x01	; 1
   12230:	d0 e0       	ldi	r29, 0x00	; 0
            gpib_help(1);
            return(1);
        }
    }

    if (MATCHI(ptr,"debug") )
   12232:	6a e8       	ldi	r22, 0x8A	; 138
   12234:	7d e0       	ldi	r23, 0x0D	; 13
   12236:	c7 01       	movw	r24, r14
   12238:	0e 94 a9 31 	call	0x6352	; 0x6352 <MATCHI>
   1223c:	89 2b       	or	r24, r25
   1223e:	29 f1       	breq	.+74     	; 0x1228a <gpib_tests+0xb4>
    {
        ptr = argv[ind];
   12240:	fe 01       	movw	r30, r28
   12242:	ee 0f       	add	r30, r30
   12244:	ff 1f       	adc	r31, r31
   12246:	ec 0d       	add	r30, r12
   12248:	fd 1d       	adc	r31, r13
		if(*ptr == '=')
   1224a:	01 90       	ld	r0, Z+
   1224c:	f0 81       	ld	r31, Z
   1224e:	e0 2d       	mov	r30, r0
   12250:	80 81       	ld	r24, Z
   12252:	8d 33       	cpi	r24, 0x3D	; 61
   12254:	09 f4       	brne	.+2      	; 0x12258 <gpib_tests+0x82>
			++ind;
   12256:	21 96       	adiw	r28, 0x01	; 1
        debuglevel = get_value(argv[ind]);
   12258:	cc 0f       	add	r28, r28
   1225a:	dd 1f       	adc	r29, r29
   1225c:	cc 0d       	add	r28, r12
   1225e:	dd 1d       	adc	r29, r13
   12260:	88 81       	ld	r24, Y
   12262:	99 81       	ldd	r25, Y+1	; 0x01
   12264:	0e 94 a0 32 	call	0x6540	; 0x6540 <get_value>
   12268:	70 93 c4 01 	sts	0x01C4, r23	; 0x8001c4 <debuglevel+0x1>
   1226c:	60 93 c3 01 	sts	0x01C3, r22	; 0x8001c3 <debuglevel>
        printf("debug=%04XH\n", debuglevel);
   12270:	ed b7       	in	r30, 0x3d	; 61
   12272:	fe b7       	in	r31, 0x3e	; 62
   12274:	75 83       	std	Z+5, r23	; 0x05
   12276:	64 83       	std	Z+4, r22	; 0x04
   12278:	86 e7       	ldi	r24, 0x76	; 118
   1227a:	93 e1       	ldi	r25, 0x13	; 19
   1227c:	a0 e0       	ldi	r26, 0x00	; 0
   1227e:	81 83       	std	Z+1, r24	; 0x01
   12280:	92 83       	std	Z+2, r25	; 0x02
   12282:	a3 83       	std	Z+3, r26	; 0x03
   12284:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   12288:	8f c0       	rjmp	.+286    	; 0x123a8 <gpib_tests+0x1d2>
        return(1);
    }

    if (MATCHI(ptr,"addresses") )
   1228a:	60 e9       	ldi	r22, 0x90	; 144
   1228c:	7d e0       	ldi	r23, 0x0D	; 13
   1228e:	c7 01       	movw	r24, r14
   12290:	0e 94 a9 31 	call	0x6352	; 0x6352 <MATCHI>
   12294:	89 2b       	or	r24, r25
   12296:	c9 f0       	breq	.+50     	; 0x122ca <gpib_tests+0xf4>
    {
        ptr = argv[ind];
   12298:	cc 0f       	add	r28, r28
   1229a:	dd 1f       	adc	r29, r29
   1229c:	cc 0d       	add	r28, r12
   1229e:	dd 1d       	adc	r29, r13
   122a0:	88 81       	ld	r24, Y
   122a2:	99 81       	ldd	r25, Y+1	; 0x01
		if(ptr && *ptr && MATCH(ptr,"-v"))
   122a4:	00 97       	sbiw	r24, 0x00	; 0
   122a6:	69 f0       	breq	.+26     	; 0x122c2 <gpib_tests+0xec>
   122a8:	fc 01       	movw	r30, r24
   122aa:	20 81       	ld	r18, Z
   122ac:	22 23       	and	r18, r18
   122ae:	49 f0       	breq	.+18     	; 0x122c2 <gpib_tests+0xec>
   122b0:	6a e9       	ldi	r22, 0x9A	; 154
   122b2:	7d e0       	ldi	r23, 0x0D	; 13
   122b4:	0e 94 95 31 	call	0x632a	; 0x632a <MATCH>
   122b8:	89 2b       	or	r24, r25
   122ba:	19 f0       	breq	.+6      	; 0x122c2 <gpib_tests+0xec>
			display_Addresses(1);
   122bc:	81 e0       	ldi	r24, 0x01	; 1
   122be:	90 e0       	ldi	r25, 0x00	; 0
   122c0:	02 c0       	rjmp	.+4      	; 0x122c6 <gpib_tests+0xf0>
		else
			display_Addresses(0);
   122c2:	80 e0       	ldi	r24, 0x00	; 0
   122c4:	90 e0       	ldi	r25, 0x00	; 0
   122c6:	54 d1       	rcall	.+680    	; 0x12570 <display_Addresses>
   122c8:	6f c0       	rjmp	.+222    	; 0x123a8 <gpib_tests+0x1d2>
        return(1);
    }

    if (MATCHI(ptr,"config") )
   122ca:	6d e9       	ldi	r22, 0x9D	; 157
   122cc:	7d e0       	ldi	r23, 0x0D	; 13
   122ce:	c7 01       	movw	r24, r14
   122d0:	0e 94 a9 31 	call	0x6352	; 0x6352 <MATCHI>
   122d4:	89 2b       	or	r24, r25
   122d6:	c9 f0       	breq	.+50     	; 0x1230a <gpib_tests+0x134>
    {
        ptr = argv[ind];
   122d8:	cc 0f       	add	r28, r28
   122da:	dd 1f       	adc	r29, r29
   122dc:	cc 0d       	add	r28, r12
   122de:	dd 1d       	adc	r29, r13
   122e0:	88 81       	ld	r24, Y
   122e2:	99 81       	ldd	r25, Y+1	; 0x01
		if(ptr && *ptr && MATCH(ptr,"-v"))
   122e4:	00 97       	sbiw	r24, 0x00	; 0
   122e6:	69 f0       	breq	.+26     	; 0x12302 <gpib_tests+0x12c>
   122e8:	fc 01       	movw	r30, r24
   122ea:	20 81       	ld	r18, Z
   122ec:	22 23       	and	r18, r18
   122ee:	49 f0       	breq	.+18     	; 0x12302 <gpib_tests+0x12c>
   122f0:	6a e9       	ldi	r22, 0x9A	; 154
   122f2:	7d e0       	ldi	r23, 0x0D	; 13
   122f4:	0e 94 95 31 	call	0x632a	; 0x632a <MATCH>
   122f8:	89 2b       	or	r24, r25
   122fa:	19 f0       	breq	.+6      	; 0x12302 <gpib_tests+0x12c>
			display_Config(1);
   122fc:	81 e0       	ldi	r24, 0x01	; 1
   122fe:	90 e0       	ldi	r25, 0x00	; 0
		else
			display_Config(0);
   12300:	02 c0       	rjmp	.+4      	; 0x12306 <gpib_tests+0x130>
   12302:	80 e0       	ldi	r24, 0x00	; 0
   12304:	90 e0       	ldi	r25, 0x00	; 0
   12306:	0f d2       	rcall	.+1054   	; 0x12726 <display_Config>
        return(1);
    }


    if (MATCHI(ptr,"elapsed_reset") )
   12308:	4f c0       	rjmp	.+158    	; 0x123a8 <gpib_tests+0x1d2>
   1230a:	64 ea       	ldi	r22, 0xA4	; 164
   1230c:	7d e0       	ldi	r23, 0x0D	; 13
   1230e:	c7 01       	movw	r24, r14
   12310:	0e 94 a9 31 	call	0x6352	; 0x6352 <MATCHI>
   12314:	89 2b       	or	r24, r25
    {
        gpib_timer_elapsed_begin();
   12316:	19 f0       	breq	.+6      	; 0x1231e <gpib_tests+0x148>
   12318:	0e 94 96 84 	call	0x1092c	; 0x1092c <gpib_timer_elapsed_begin>
        return(1);
    }

    if (MATCHI(ptr,"elapsed") )
   1231c:	45 c0       	rjmp	.+138    	; 0x123a8 <gpib_tests+0x1d2>
   1231e:	62 eb       	ldi	r22, 0xB2	; 178
   12320:	7d e0       	ldi	r23, 0x0D	; 13
   12322:	c7 01       	movw	r24, r14
   12324:	0e 94 a9 31 	call	0x6352	; 0x6352 <MATCHI>
   12328:	89 2b       	or	r24, r25
    {
        gpib_timer_elapsed_end("gpib elapsed:");
   1232a:	29 f0       	breq	.+10     	; 0x12336 <gpib_tests+0x160>
   1232c:	8a eb       	ldi	r24, 0xBA	; 186
   1232e:	9d e0       	ldi	r25, 0x0D	; 13
   12330:	0e 94 a8 84 	call	0x10950	; 0x10950 <gpib_timer_elapsed_end>
        return(1);
    }

    if ( MATCHI(ptr, "ifc") )
   12334:	39 c0       	rjmp	.+114    	; 0x123a8 <gpib_tests+0x1d2>
   12336:	68 ec       	ldi	r22, 0xC8	; 200
   12338:	7d e0       	ldi	r23, 0x0D	; 13
   1233a:	c7 01       	movw	r24, r14
   1233c:	0e 94 a9 31 	call	0x6352	; 0x6352 <MATCHI>
   12340:	89 2b       	or	r24, r25
    {
        gpib_assert_ifc();
   12342:	19 f0       	breq	.+6      	; 0x1234a <gpib_tests+0x174>
   12344:	0e 94 c4 85 	call	0x10b88	; 0x10b88 <gpib_assert_ifc>
        return(1);

    }

    if (MATCHI(ptr,"task") )
   12348:	2f c0       	rjmp	.+94     	; 0x123a8 <gpib_tests+0x1d2>
   1234a:	6c ec       	ldi	r22, 0xCC	; 204
   1234c:	7d e0       	ldi	r23, 0x0D	; 13
   1234e:	c7 01       	movw	r24, r14
   12350:	0e 94 a9 31 	call	0x6352	; 0x6352 <MATCHI>
    {
        gpib_task();
   12354:	89 2b       	or	r24, r25
   12356:	11 f0       	breq	.+4      	; 0x1235c <gpib_tests+0x186>
   12358:	bb de       	rcall	.-650    	; 0x120d0 <gpib_task>
        return(1);
    }

    if (MATCHARGS(ptr,"trace", (ind+1) ,argc))
   1235a:	26 c0       	rjmp	.+76     	; 0x123a8 <gpib_tests+0x1d2>
   1235c:	8e 01       	movw	r16, r28
   1235e:	0f 5f       	subi	r16, 0xFF	; 255
   12360:	1f 4f       	sbci	r17, 0xFF	; 255
   12362:	95 01       	movw	r18, r10
   12364:	a8 01       	movw	r20, r16
   12366:	61 ed       	ldi	r22, 0xD1	; 209
   12368:	7d e0       	ldi	r23, 0x0D	; 13
   1236a:	c7 01       	movw	r24, r14
   1236c:	0e 94 bd 31 	call	0x637a	; 0x637a <MATCHARGS>
   12370:	89 2b       	or	r24, r25
   12372:	09 f4       	brne	.+2      	; 0x12376 <gpib_tests+0x1a0>
    {
        int detail = 0;
        if(argv[ind+1] && MATCH(argv[ind+1],"BUS"))
   12374:	3c cf       	rjmp	.-392    	; 0x121ee <gpib_tests+0x18>
   12376:	00 0f       	add	r16, r16
   12378:	11 1f       	adc	r17, r17
   1237a:	e6 01       	movw	r28, r12
   1237c:	c0 0f       	add	r28, r16
   1237e:	d1 1f       	adc	r29, r17
   12380:	88 81       	ld	r24, Y
   12382:	99 81       	ldd	r25, Y+1	; 0x01
   12384:	00 97       	sbiw	r24, 0x00	; 0
   12386:	51 f0       	breq	.+20     	; 0x1239c <gpib_tests+0x1c6>
   12388:	67 ed       	ldi	r22, 0xD7	; 215
   1238a:	7d e0       	ldi	r23, 0x0D	; 13
   1238c:	0e 94 95 31 	call	0x632a	; 0x632a <MATCH>
        return(1);
    }

    if (MATCHARGS(ptr,"trace", (ind+1) ,argc))
    {
        int detail = 0;
   12390:	61 e0       	ldi	r22, 0x01	; 1
   12392:	70 e0       	ldi	r23, 0x00	; 0
   12394:	89 2b       	or	r24, r25
   12396:	21 f4       	brne	.+8      	; 0x123a0 <gpib_tests+0x1ca>
   12398:	60 e0       	ldi	r22, 0x00	; 0
   1239a:	02 c0       	rjmp	.+4      	; 0x123a0 <gpib_tests+0x1ca>
        if(argv[ind+1] && MATCH(argv[ind+1],"BUS"))
            detail = 1;
        gpib_trace_task(argv[ind], detail);
   1239c:	60 e0       	ldi	r22, 0x00	; 0
   1239e:	70 e0       	ldi	r23, 0x00	; 0
   123a0:	22 97       	sbiw	r28, 0x02	; 2
   123a2:	88 81       	ld	r24, Y
   123a4:	99 81       	ldd	r25, Y+1	; 0x01
        return(1);
   123a6:	31 da       	rcall	.-2974   	; 0x1180a <gpib_trace_task>
   123a8:	81 e0       	ldi	r24, 0x01	; 1

	} // port write 
#endif  // #ifdef GPIB_EXTENDED_TESTS

    return(0);
}
   123aa:	90 e0       	ldi	r25, 0x00	; 0
   123ac:	cd b7       	in	r28, 0x3d	; 61
   123ae:	de b7       	in	r29, 0x3e	; 62
   123b0:	25 96       	adiw	r28, 0x05	; 5
   123b2:	ea e0       	ldi	r30, 0x0A	; 10
   123b4:	0c 94 02 e0 	jmp	0x1c004	; 0x1c004 <__epilogue_restores__+0x10>

000123b8 <tok_index>:
   123b8:	ef 92       	push	r14
   123ba:	ff 92       	push	r15
   123bc:	0f 93       	push	r16
   123be:	1f 93       	push	r17
   123c0:	cf 93       	push	r28
   123c2:	df 93       	push	r29
   123c4:	7c 01       	movw	r14, r24
   123c6:	c1 ed       	ldi	r28, 0xD1	; 209
   123c8:	d1 e0       	ldi	r29, 0x01	; 1
   123ca:	00 e0       	ldi	r16, 0x00	; 0
   123cc:	10 e0       	ldi	r17, 0x00	; 0
   123ce:	8a 81       	ldd	r24, Y+2	; 0x02
   123d0:	9b 81       	ldd	r25, Y+3	; 0x03
   123d2:	8f 3f       	cpi	r24, 0xFF	; 255
   123d4:	2f ef       	ldi	r18, 0xFF	; 255
   123d6:	92 07       	cpc	r25, r18
   123d8:	61 f0       	breq	.+24     	; 0x123f2 <tok_index+0x3a>
   123da:	68 81       	ld	r22, Y
   123dc:	79 81       	ldd	r23, Y+1	; 0x01
   123de:	c7 01       	movw	r24, r14
   123e0:	0e 94 a9 31 	call	0x6352	; 0x6352 <MATCHI>
   123e4:	24 96       	adiw	r28, 0x04	; 4
   123e6:	89 2b       	or	r24, r25
   123e8:	19 f4       	brne	.+6      	; 0x123f0 <tok_index+0x38>
   123ea:	0f 5f       	subi	r16, 0xFF	; 255
   123ec:	1f 4f       	sbci	r17, 0xFF	; 255
   123ee:	ef cf       	rjmp	.-34     	; 0x123ce <tok_index+0x16>
   123f0:	c8 01       	movw	r24, r16
   123f2:	cd b7       	in	r28, 0x3d	; 61
   123f4:	de b7       	in	r29, 0x3e	; 62
   123f6:	e6 e0       	ldi	r30, 0x06	; 6
   123f8:	0c 94 06 e0 	jmp	0x1c00c	; 0x1c00c <__epilogue_restores__+0x18>

000123fc <tok_name>:
   123fc:	e1 ed       	ldi	r30, 0xD1	; 209
   123fe:	f1 e0       	ldi	r31, 0x01	; 1
   12400:	20 e0       	ldi	r18, 0x00	; 0
   12402:	30 e0       	ldi	r19, 0x00	; 0
   12404:	90 e0       	ldi	r25, 0x00	; 0
   12406:	42 81       	ldd	r20, Z+2	; 0x02
   12408:	53 81       	ldd	r21, Z+3	; 0x03
   1240a:	4f 3f       	cpi	r20, 0xFF	; 255
   1240c:	6f ef       	ldi	r22, 0xFF	; 255
   1240e:	56 07       	cpc	r21, r22
   12410:	89 f0       	breq	.+34     	; 0x12434 <tok_name+0x38>
   12412:	34 96       	adiw	r30, 0x04	; 4
   12414:	48 17       	cp	r20, r24
   12416:	59 07       	cpc	r21, r25
   12418:	51 f4       	brne	.+20     	; 0x1242e <tok_name+0x32>
   1241a:	22 0f       	add	r18, r18
   1241c:	33 1f       	adc	r19, r19
   1241e:	22 0f       	add	r18, r18
   12420:	33 1f       	adc	r19, r19
   12422:	f9 01       	movw	r30, r18
   12424:	ef 52       	subi	r30, 0x2F	; 47
   12426:	fe 4f       	sbci	r31, 0xFE	; 254
   12428:	80 81       	ld	r24, Z
   1242a:	91 81       	ldd	r25, Z+1	; 0x01
   1242c:	08 95       	ret
   1242e:	2f 5f       	subi	r18, 0xFF	; 255
   12430:	3f 4f       	sbci	r19, 0xFF	; 255
   12432:	e9 cf       	rjmp	.-46     	; 0x12406 <tok_name+0xa>
   12434:	8c e0       	ldi	r24, 0x0C	; 12
   12436:	97 e1       	ldi	r25, 0x17	; 23
   12438:	08 95       	ret

0001243a <print_tok_val>:
   1243a:	cf 92       	push	r12
   1243c:	df 92       	push	r13
   1243e:	ef 92       	push	r14
   12440:	ff 92       	push	r15
   12442:	0f 93       	push	r16
   12444:	1f 93       	push	r17
   12446:	cf 93       	push	r28
   12448:	ad b7       	in	r26, 0x3d	; 61
   1244a:	be b7       	in	r27, 0x3e	; 62
   1244c:	1d 97       	sbiw	r26, 0x0d	; 13
   1244e:	0f b6       	in	r0, 0x3f	; 63
   12450:	f8 94       	cli
   12452:	be bf       	out	0x3e, r27	; 62
   12454:	0f be       	out	0x3f, r0	; 63
   12456:	ad bf       	out	0x3d, r26	; 61
   12458:	c6 2f       	mov	r28, r22
   1245a:	69 01       	movw	r12, r18
   1245c:	7a 01       	movw	r14, r20
   1245e:	ce df       	rcall	.-100    	; 0x123fc <tok_name>
   12460:	8c 01       	movw	r16, r24
   12462:	cc 23       	and	r28, r28
   12464:	31 f0       	breq	.+12     	; 0x12472 <print_tok_val+0x38>
   12466:	80 e2       	ldi	r24, 0x20	; 32
   12468:	90 e0       	ldi	r25, 0x00	; 0
   1246a:	0e 94 8e 75 	call	0xeb1c	; 0xeb1c <putchar>
   1246e:	c1 50       	subi	r28, 0x01	; 1
   12470:	f8 cf       	rjmp	.-16     	; 0x12462 <print_tok_val+0x28>
   12472:	ed b7       	in	r30, 0x3d	; 61
   12474:	fe b7       	in	r31, 0x3e	; 62
   12476:	c2 86       	std	Z+10, r12	; 0x0a
   12478:	d3 86       	std	Z+11, r13	; 0x0b
   1247a:	e4 86       	std	Z+12, r14	; 0x0c
   1247c:	f5 86       	std	Z+13, r15	; 0x0d
   1247e:	c6 82       	std	Z+6, r12	; 0x06
   12480:	d7 82       	std	Z+7, r13	; 0x07
   12482:	e0 86       	std	Z+8, r14	; 0x08
   12484:	f1 86       	std	Z+9, r15	; 0x09
   12486:	15 83       	std	Z+5, r17	; 0x05
   12488:	04 83       	std	Z+4, r16	; 0x04
   1248a:	8f ed       	ldi	r24, 0xDF	; 223
   1248c:	9b e1       	ldi	r25, 0x1B	; 27
   1248e:	a0 e0       	ldi	r26, 0x00	; 0
   12490:	81 83       	std	Z+1, r24	; 0x01
   12492:	92 83       	std	Z+2, r25	; 0x02
   12494:	a3 83       	std	Z+3, r26	; 0x03
   12496:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   1249a:	ad b7       	in	r26, 0x3d	; 61
   1249c:	be b7       	in	r27, 0x3e	; 62
   1249e:	1d 96       	adiw	r26, 0x0d	; 13
   124a0:	0f b6       	in	r0, 0x3f	; 63
   124a2:	f8 94       	cli
   124a4:	be bf       	out	0x3e, r27	; 62
   124a6:	0f be       	out	0x3f, r0	; 63
   124a8:	ad bf       	out	0x3d, r26	; 61
   124aa:	cf 91       	pop	r28
   124ac:	1f 91       	pop	r17
   124ae:	0f 91       	pop	r16
   124b0:	ff 90       	pop	r15
   124b2:	ef 90       	pop	r14
   124b4:	df 90       	pop	r13
   124b6:	cf 90       	pop	r12
   124b8:	08 95       	ret

000124ba <print_tok_str>:
   124ba:	ef 92       	push	r14
   124bc:	ff 92       	push	r15
   124be:	0f 93       	push	r16
   124c0:	1f 93       	push	r17
   124c2:	cf 93       	push	r28
   124c4:	ad b7       	in	r26, 0x3d	; 61
   124c6:	be b7       	in	r27, 0x3e	; 62
   124c8:	17 97       	sbiw	r26, 0x07	; 7
   124ca:	0f b6       	in	r0, 0x3f	; 63
   124cc:	f8 94       	cli
   124ce:	be bf       	out	0x3e, r27	; 62
   124d0:	0f be       	out	0x3f, r0	; 63
   124d2:	ad bf       	out	0x3d, r26	; 61
   124d4:	c6 2f       	mov	r28, r22
   124d6:	7a 01       	movw	r14, r20
   124d8:	91 df       	rcall	.-222    	; 0x123fc <tok_name>
   124da:	8c 01       	movw	r16, r24
   124dc:	cc 23       	and	r28, r28
   124de:	31 f0       	breq	.+12     	; 0x124ec <print_tok_str+0x32>
   124e0:	80 e2       	ldi	r24, 0x20	; 32
   124e2:	90 e0       	ldi	r25, 0x00	; 0
   124e4:	0e 94 8e 75 	call	0xeb1c	; 0xeb1c <putchar>
   124e8:	c1 50       	subi	r28, 0x01	; 1
   124ea:	f8 cf       	rjmp	.-16     	; 0x124dc <print_tok_str+0x22>
   124ec:	ed b7       	in	r30, 0x3d	; 61
   124ee:	fe b7       	in	r31, 0x3e	; 62
   124f0:	f7 82       	std	Z+7, r15	; 0x07
   124f2:	e6 82       	std	Z+6, r14	; 0x06
   124f4:	15 83       	std	Z+5, r17	; 0x05
   124f6:	04 83       	std	Z+4, r16	; 0x04
   124f8:	83 ed       	ldi	r24, 0xD3	; 211
   124fa:	9b e1       	ldi	r25, 0x1B	; 27
   124fc:	a0 e0       	ldi	r26, 0x00	; 0
   124fe:	81 83       	std	Z+1, r24	; 0x01
   12500:	92 83       	std	Z+2, r25	; 0x02
   12502:	a3 83       	std	Z+3, r26	; 0x03
   12504:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   12508:	ad b7       	in	r26, 0x3d	; 61
   1250a:	be b7       	in	r27, 0x3e	; 62
   1250c:	17 96       	adiw	r26, 0x07	; 7
   1250e:	0f b6       	in	r0, 0x3f	; 63
   12510:	f8 94       	cli
   12512:	be bf       	out	0x3e, r27	; 62
   12514:	0f be       	out	0x3f, r0	; 63
   12516:	ad bf       	out	0x3d, r26	; 61
   12518:	cf 91       	pop	r28
   1251a:	1f 91       	pop	r17
   1251c:	0f 91       	pop	r16
   1251e:	ff 90       	pop	r15
   12520:	ef 90       	pop	r14
   12522:	08 95       	ret

00012524 <print_tok>:
   12524:	0f 93       	push	r16
   12526:	1f 93       	push	r17
   12528:	cf 93       	push	r28
   1252a:	00 d0       	rcall	.+0      	; 0x1252c <print_tok+0x8>
   1252c:	00 d0       	rcall	.+0      	; 0x1252e <print_tok+0xa>
   1252e:	1f 92       	push	r1
   12530:	c6 2f       	mov	r28, r22
   12532:	64 df       	rcall	.-312    	; 0x123fc <tok_name>
   12534:	8c 01       	movw	r16, r24
   12536:	cc 23       	and	r28, r28
   12538:	31 f0       	breq	.+12     	; 0x12546 <print_tok+0x22>
   1253a:	80 e2       	ldi	r24, 0x20	; 32
   1253c:	90 e0       	ldi	r25, 0x00	; 0
   1253e:	0e 94 8e 75 	call	0xeb1c	; 0xeb1c <putchar>
   12542:	c1 50       	subi	r28, 0x01	; 1
   12544:	f8 cf       	rjmp	.-16     	; 0x12536 <print_tok+0x12>
   12546:	ed b7       	in	r30, 0x3d	; 61
   12548:	fe b7       	in	r31, 0x3e	; 62
   1254a:	15 83       	std	Z+5, r17	; 0x05
   1254c:	04 83       	std	Z+4, r16	; 0x04
   1254e:	8f ec       	ldi	r24, 0xCF	; 207
   12550:	9b e1       	ldi	r25, 0x1B	; 27
   12552:	a0 e0       	ldi	r26, 0x00	; 0
   12554:	81 83       	std	Z+1, r24	; 0x01
   12556:	92 83       	std	Z+2, r25	; 0x02
   12558:	a3 83       	std	Z+3, r26	; 0x03
   1255a:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   1255e:	0f 90       	pop	r0
   12560:	0f 90       	pop	r0
   12562:	0f 90       	pop	r0
   12564:	0f 90       	pop	r0
   12566:	0f 90       	pop	r0
   12568:	cf 91       	pop	r28
   1256a:	1f 91       	pop	r17
   1256c:	0f 91       	pop	r16
   1256e:	08 95       	ret

00012570 <display_Addresses>:
   12570:	2f 92       	push	r2
   12572:	3f 92       	push	r3
   12574:	4f 92       	push	r4
   12576:	6f 92       	push	r6
   12578:	7f 92       	push	r7
   1257a:	8f 92       	push	r8
   1257c:	cf 92       	push	r12
   1257e:	df 92       	push	r13
   12580:	ef 92       	push	r14
   12582:	cf 93       	push	r28
   12584:	df 93       	push	r29
   12586:	cd b7       	in	r28, 0x3d	; 61
   12588:	de b7       	in	r29, 0x3e	; 62
   1258a:	2a 97       	sbiw	r28, 0x0a	; 10
   1258c:	0f b6       	in	r0, 0x3f	; 63
   1258e:	f8 94       	cli
   12590:	de bf       	out	0x3e, r29	; 62
   12592:	0f be       	out	0x3f, r0	; 63
   12594:	cd bf       	out	0x3d, r28	; 61
   12596:	89 e9       	ldi	r24, 0x99	; 153
   12598:	98 e1       	ldi	r25, 0x18	; 24
   1259a:	a0 e0       	ldi	r26, 0x00	; 0
   1259c:	ed b7       	in	r30, 0x3d	; 61
   1259e:	fe b7       	in	r31, 0x3e	; 62
   125a0:	81 83       	std	Z+1, r24	; 0x01
   125a2:	92 83       	std	Z+2, r25	; 0x02
   125a4:	a3 83       	std	Z+3, r26	; 0x03
   125a6:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   125aa:	28 eb       	ldi	r18, 0xB8	; 184
   125ac:	3e e1       	ldi	r19, 0x1E	; 30
   125ae:	3a 87       	std	Y+10, r19	; 0x0a
   125b0:	29 87       	std	Y+9, r18	; 0x09
   125b2:	8b e7       	ldi	r24, 0x7B	; 123
   125b4:	98 e1       	ldi	r25, 0x18	; 24
   125b6:	6c 01       	movw	r12, r24
   125b8:	e1 2c       	mov	r14, r1
   125ba:	8d e7       	ldi	r24, 0x7D	; 125
   125bc:	98 e1       	ldi	r25, 0x18	; 24
   125be:	3c 01       	movw	r6, r24
   125c0:	81 2c       	mov	r8, r1
   125c2:	86 e8       	ldi	r24, 0x86	; 134
   125c4:	98 e1       	ldi	r25, 0x18	; 24
   125c6:	1c 01       	movw	r2, r24
   125c8:	41 2c       	mov	r4, r1
   125ca:	80 e9       	ldi	r24, 0x90	; 144
   125cc:	98 e1       	ldi	r25, 0x18	; 24
   125ce:	9c 01       	movw	r18, r24
   125d0:	40 e0       	ldi	r20, 0x00	; 0
   125d2:	2e 83       	std	Y+6, r18	; 0x06
   125d4:	3f 83       	std	Y+7, r19	; 0x07
   125d6:	48 87       	std	Y+8, r20	; 0x08
   125d8:	e9 85       	ldd	r30, Y+9	; 0x09
   125da:	fa 85       	ldd	r31, Y+10	; 0x0a
   125dc:	80 81       	ld	r24, Z
   125de:	88 23       	and	r24, r24
   125e0:	09 f4       	brne	.+2      	; 0x125e4 <display_Addresses+0x74>
   125e2:	7b c0       	rjmp	.+246    	; 0x126da <display_Addresses+0x16a>
   125e4:	83 30       	cpi	r24, 0x03	; 3
   125e6:	21 f0       	breq	.+8      	; 0x125f0 <display_Addresses+0x80>
   125e8:	81 30       	cpi	r24, 0x01	; 1
   125ea:	09 f0       	breq	.+2      	; 0x125ee <display_Addresses+0x7e>
   125ec:	5a c0       	rjmp	.+180    	; 0x126a2 <display_Addresses+0x132>
   125ee:	1f c0       	rjmp	.+62     	; 0x1262e <display_Addresses+0xbe>
   125f0:	e9 85       	ldd	r30, Y+9	; 0x09
   125f2:	fa 85       	ldd	r31, Y+10	; 0x0a
   125f4:	87 a1       	ldd	r24, Z+39	; 0x27
   125f6:	90 a5       	ldd	r25, Z+40	; 0x28
   125f8:	90 93 34 19 	sts	0x1934, r25	; 0x801934 <SS80p+0x1>
   125fc:	80 93 33 19 	sts	0x1933, r24	; 0x801933 <SS80p>
   12600:	cf 01       	movw	r24, r30
   12602:	07 96       	adiw	r24, 0x07	; 7
   12604:	ed b7       	in	r30, 0x3d	; 61
   12606:	fe b7       	in	r31, 0x3e	; 62
   12608:	95 83       	std	Z+5, r25	; 0x05
   1260a:	84 83       	std	Z+4, r24	; 0x04
   1260c:	2e 81       	ldd	r18, Y+6	; 0x06
   1260e:	3f 81       	ldd	r19, Y+7	; 0x07
   12610:	48 85       	ldd	r20, Y+8	; 0x08
   12612:	21 83       	std	Z+1, r18	; 0x01
   12614:	32 83       	std	Z+2, r19	; 0x02
   12616:	43 83       	std	Z+3, r20	; 0x03
   12618:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   1261c:	e0 91 33 19 	lds	r30, 0x1933	; 0x801933 <SS80p>
   12620:	f0 91 34 19 	lds	r31, 0x1934	; 0x801934 <SS80p+0x1>
   12624:	42 81       	ldd	r20, Z+2	; 0x02
   12626:	53 81       	ldd	r21, Z+3	; 0x03
   12628:	64 e0       	ldi	r22, 0x04	; 4
   1262a:	82 e1       	ldi	r24, 0x12	; 18
   1262c:	46 df       	rcall	.-372    	; 0x124ba <print_tok_str>
   1262e:	e9 85       	ldd	r30, Y+9	; 0x09
   12630:	fa 85       	ldd	r31, Y+10	; 0x0a
   12632:	80 81       	ld	r24, Z
   12634:	81 30       	cpi	r24, 0x01	; 1
   12636:	d1 f4       	brne	.+52     	; 0x1266c <display_Addresses+0xfc>
   12638:	87 a1       	ldd	r24, Z+39	; 0x27
   1263a:	90 a5       	ldd	r25, Z+40	; 0x28
   1263c:	90 93 30 19 	sts	0x1930, r25	; 0x801930 <AMIGOp+0x1>
   12640:	80 93 2f 19 	sts	0x192F, r24	; 0x80192f <AMIGOp>
   12644:	cf 01       	movw	r24, r30
   12646:	07 96       	adiw	r24, 0x07	; 7
   12648:	ed b7       	in	r30, 0x3d	; 61
   1264a:	fe b7       	in	r31, 0x3e	; 62
   1264c:	95 83       	std	Z+5, r25	; 0x05
   1264e:	84 83       	std	Z+4, r24	; 0x04
   12650:	21 82       	std	Z+1, r2	; 0x01
   12652:	32 82       	std	Z+2, r3	; 0x02
   12654:	43 82       	std	Z+3, r4	; 0x03
   12656:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   1265a:	e0 91 2f 19 	lds	r30, 0x192F	; 0x80192f <AMIGOp>
   1265e:	f0 91 30 19 	lds	r31, 0x1930	; 0x801930 <AMIGOp+0x1>
   12662:	42 81       	ldd	r20, Z+2	; 0x02
   12664:	53 81       	ldd	r21, Z+3	; 0x03
   12666:	64 e0       	ldi	r22, 0x04	; 4
   12668:	82 e1       	ldi	r24, 0x12	; 18
   1266a:	27 df       	rcall	.-434    	; 0x124ba <print_tok_str>
   1266c:	e9 85       	ldd	r30, Y+9	; 0x09
   1266e:	fa 85       	ldd	r31, Y+10	; 0x0a
   12670:	21 81       	ldd	r18, Z+1	; 0x01
   12672:	30 e0       	ldi	r19, 0x00	; 0
   12674:	40 e0       	ldi	r20, 0x00	; 0
   12676:	50 e0       	ldi	r21, 0x00	; 0
   12678:	64 e0       	ldi	r22, 0x04	; 4
   1267a:	81 e0       	ldi	r24, 0x01	; 1
   1267c:	de de       	rcall	.-580    	; 0x1243a <print_tok_val>
   1267e:	e9 85       	ldd	r30, Y+9	; 0x09
   12680:	fa 85       	ldd	r31, Y+10	; 0x0a
   12682:	22 81       	ldd	r18, Z+2	; 0x02
   12684:	30 e0       	ldi	r19, 0x00	; 0
   12686:	40 e0       	ldi	r20, 0x00	; 0
   12688:	50 e0       	ldi	r21, 0x00	; 0
   1268a:	64 e0       	ldi	r22, 0x04	; 4
   1268c:	8f e1       	ldi	r24, 0x1F	; 31
   1268e:	d5 de       	rcall	.-598    	; 0x1243a <print_tok_val>
   12690:	e9 85       	ldd	r30, Y+9	; 0x09
   12692:	fa 85       	ldd	r31, Y+10	; 0x0a
   12694:	23 81       	ldd	r18, Z+3	; 0x03
   12696:	34 81       	ldd	r19, Z+4	; 0x04
   12698:	45 81       	ldd	r20, Z+5	; 0x05
   1269a:	56 81       	ldd	r21, Z+6	; 0x06
   1269c:	64 e0       	ldi	r22, 0x04	; 4
   1269e:	83 e0       	ldi	r24, 0x03	; 3
   126a0:	cc de       	rcall	.-616    	; 0x1243a <print_tok_val>
   126a2:	e9 85       	ldd	r30, Y+9	; 0x09
   126a4:	fa 85       	ldd	r31, Y+10	; 0x0a
   126a6:	80 81       	ld	r24, Z
   126a8:	84 30       	cpi	r24, 0x04	; 4
   126aa:	81 f4       	brne	.+32     	; 0x126cc <display_Addresses+0x15c>
   126ac:	ed b7       	in	r30, 0x3d	; 61
   126ae:	fe b7       	in	r31, 0x3e	; 62
   126b0:	61 82       	std	Z+1, r6	; 0x01
   126b2:	72 82       	std	Z+2, r7	; 0x02
   126b4:	83 82       	std	Z+3, r8	; 0x03
   126b6:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   126ba:	e9 85       	ldd	r30, Y+9	; 0x09
   126bc:	fa 85       	ldd	r31, Y+10	; 0x0a
   126be:	21 81       	ldd	r18, Z+1	; 0x01
   126c0:	30 e0       	ldi	r19, 0x00	; 0
   126c2:	40 e0       	ldi	r20, 0x00	; 0
   126c4:	50 e0       	ldi	r21, 0x00	; 0
   126c6:	64 e0       	ldi	r22, 0x04	; 4
   126c8:	81 e0       	ldi	r24, 0x01	; 1
   126ca:	b7 de       	rcall	.-658    	; 0x1243a <print_tok_val>
   126cc:	ed b7       	in	r30, 0x3d	; 61
   126ce:	fe b7       	in	r31, 0x3e	; 62
   126d0:	c1 82       	std	Z+1, r12	; 0x01
   126d2:	d2 82       	std	Z+2, r13	; 0x02
   126d4:	e3 82       	std	Z+3, r14	; 0x03
   126d6:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   126da:	29 85       	ldd	r18, Y+9	; 0x09
   126dc:	3a 85       	ldd	r19, Y+10	; 0x0a
   126de:	25 5d       	subi	r18, 0xD5	; 213
   126e0:	3f 4f       	sbci	r19, 0xFF	; 255
   126e2:	3a 87       	std	Y+10, r19	; 0x0a
   126e4:	29 87       	std	Y+9, r18	; 0x09
   126e6:	2c 5b       	subi	r18, 0xBC	; 188
   126e8:	30 42       	sbci	r19, 0x20	; 32
   126ea:	09 f0       	breq	.+2      	; 0x126ee <display_Addresses+0x17e>
   126ec:	75 cf       	rjmp	.-278    	; 0x125d8 <display_Addresses+0x68>
   126ee:	89 e7       	ldi	r24, 0x79	; 121
   126f0:	98 e1       	ldi	r25, 0x18	; 24
   126f2:	a0 e0       	ldi	r26, 0x00	; 0
   126f4:	ed b7       	in	r30, 0x3d	; 61
   126f6:	fe b7       	in	r31, 0x3e	; 62
   126f8:	81 83       	std	Z+1, r24	; 0x01
   126fa:	92 83       	std	Z+2, r25	; 0x02
   126fc:	a3 83       	std	Z+3, r26	; 0x03
   126fe:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   12702:	2a 96       	adiw	r28, 0x0a	; 10
   12704:	0f b6       	in	r0, 0x3f	; 63
   12706:	f8 94       	cli
   12708:	de bf       	out	0x3e, r29	; 62
   1270a:	0f be       	out	0x3f, r0	; 63
   1270c:	cd bf       	out	0x3d, r28	; 61
   1270e:	df 91       	pop	r29
   12710:	cf 91       	pop	r28
   12712:	ef 90       	pop	r14
   12714:	df 90       	pop	r13
   12716:	cf 90       	pop	r12
   12718:	8f 90       	pop	r8
   1271a:	7f 90       	pop	r7
   1271c:	6f 90       	pop	r6
   1271e:	4f 90       	pop	r4
   12720:	3f 90       	pop	r3
   12722:	2f 90       	pop	r2
   12724:	08 95       	ret

00012726 <display_Config>:
   12726:	2f 92       	push	r2
   12728:	3f 92       	push	r3
   1272a:	4f 92       	push	r4
   1272c:	6f 92       	push	r6
   1272e:	7f 92       	push	r7
   12730:	8f 92       	push	r8
   12732:	af 92       	push	r10
   12734:	bf 92       	push	r11
   12736:	cf 92       	push	r12
   12738:	df 92       	push	r13
   1273a:	ef 92       	push	r14
   1273c:	0f 93       	push	r16
   1273e:	1f 93       	push	r17
   12740:	cf 93       	push	r28
   12742:	df 93       	push	r29
   12744:	cd b7       	in	r28, 0x3d	; 61
   12746:	de b7       	in	r29, 0x3e	; 62
   12748:	62 97       	sbiw	r28, 0x12	; 18
   1274a:	0f b6       	in	r0, 0x3f	; 63
   1274c:	f8 94       	cli
   1274e:	de bf       	out	0x3e, r29	; 62
   12750:	0f be       	out	0x3f, r0	; 63
   12752:	cd bf       	out	0x3d, r28	; 61
   12754:	5c 01       	movw	r10, r24
   12756:	89 e5       	ldi	r24, 0x59	; 89
   12758:	98 e1       	ldi	r25, 0x18	; 24
   1275a:	a0 e0       	ldi	r26, 0x00	; 0
   1275c:	ed b7       	in	r30, 0x3d	; 61
   1275e:	fe b7       	in	r31, 0x3e	; 62
   12760:	81 83       	std	Z+1, r24	; 0x01
   12762:	92 83       	std	Z+2, r25	; 0x02
   12764:	a3 83       	std	Z+3, r26	; 0x03
   12766:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   1276a:	08 eb       	ldi	r16, 0xB8	; 184
   1276c:	1e e1       	ldi	r17, 0x1E	; 30
   1276e:	8e ed       	ldi	r24, 0xDE	; 222
   12770:	97 e1       	ldi	r25, 0x17	; 23
   12772:	9c 01       	movw	r18, r24
   12774:	40 e0       	ldi	r20, 0x00	; 0
   12776:	28 87       	std	Y+8, r18	; 0x08
   12778:	39 87       	std	Y+9, r19	; 0x09
   1277a:	4a 87       	std	Y+10, r20	; 0x0a
   1277c:	83 e1       	ldi	r24, 0x13	; 19
   1277e:	98 e1       	ldi	r25, 0x18	; 24
   12780:	9c 01       	movw	r18, r24
   12782:	40 e0       	ldi	r20, 0x00	; 0
   12784:	2b 87       	std	Y+11, r18	; 0x0b
   12786:	3c 87       	std	Y+12, r19	; 0x0c
   12788:	4d 87       	std	Y+13, r20	; 0x0d
   1278a:	84 ef       	ldi	r24, 0xF4	; 244
   1278c:	97 e1       	ldi	r25, 0x17	; 23
   1278e:	9c 01       	movw	r18, r24
   12790:	40 e0       	ldi	r20, 0x00	; 0
   12792:	2e 87       	std	Y+14, r18	; 0x0e
   12794:	3f 87       	std	Y+15, r19	; 0x0f
   12796:	48 8b       	std	Y+16, r20	; 0x10
   12798:	80 ee       	ldi	r24, 0xE0	; 224
   1279a:	97 e1       	ldi	r25, 0x17	; 23
   1279c:	1c 01       	movw	r2, r24
   1279e:	41 2c       	mov	r4, r1
   127a0:	80 e5       	ldi	r24, 0x50	; 80
   127a2:	98 e1       	ldi	r25, 0x18	; 24
   127a4:	6c 01       	movw	r12, r24
   127a6:	e1 2c       	mov	r14, r1
   127a8:	81 e3       	ldi	r24, 0x31	; 49
   127aa:	98 e1       	ldi	r25, 0x18	; 24
   127ac:	3c 01       	movw	r6, r24
   127ae:	81 2c       	mov	r8, r1
   127b0:	f8 01       	movw	r30, r16
   127b2:	80 81       	ld	r24, Z
   127b4:	88 23       	and	r24, r24
   127b6:	09 f4       	brne	.+2      	; 0x127ba <display_Config+0x94>
   127b8:	14 c2       	rjmp	.+1064   	; 0x12be2 <display_Config+0x4bc>
   127ba:	83 30       	cpi	r24, 0x03	; 3
   127bc:	09 f0       	breq	.+2      	; 0x127c0 <display_Config+0x9a>
   127be:	38 c1       	rjmp	.+624    	; 0x12a30 <display_Config+0x30a>
   127c0:	27 a1       	ldd	r18, Z+39	; 0x27
   127c2:	30 a5       	ldd	r19, Z+40	; 0x28
   127c4:	3a 8b       	std	Y+18, r19	; 0x12
   127c6:	29 8b       	std	Y+17, r18	; 0x11
   127c8:	c8 01       	movw	r24, r16
   127ca:	07 96       	adiw	r24, 0x07	; 7
   127cc:	ed b7       	in	r30, 0x3d	; 61
   127ce:	fe b7       	in	r31, 0x3e	; 62
   127d0:	95 83       	std	Z+5, r25	; 0x05
   127d2:	84 83       	std	Z+4, r24	; 0x04
   127d4:	c1 82       	std	Z+1, r12	; 0x01
   127d6:	d2 82       	std	Z+2, r13	; 0x02
   127d8:	e3 82       	std	Z+3, r14	; 0x03
   127da:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   127de:	e9 89       	ldd	r30, Y+17	; 0x11
   127e0:	fa 89       	ldd	r31, Y+18	; 0x12
   127e2:	80 81       	ld	r24, Z
   127e4:	90 e0       	ldi	r25, 0x00	; 0
   127e6:	ed b7       	in	r30, 0x3d	; 61
   127e8:	fe b7       	in	r31, 0x3e	; 62
   127ea:	95 83       	std	Z+5, r25	; 0x05
   127ec:	84 83       	std	Z+4, r24	; 0x04
   127ee:	61 82       	std	Z+1, r6	; 0x01
   127f0:	72 82       	std	Z+2, r7	; 0x02
   127f2:	83 82       	std	Z+3, r8	; 0x03
   127f4:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   127f8:	64 e0       	ldi	r22, 0x04	; 4
   127fa:	89 e0       	ldi	r24, 0x09	; 9
   127fc:	93 de       	rcall	.-730    	; 0x12524 <print_tok>
   127fe:	e9 89       	ldd	r30, Y+17	; 0x11
   12800:	fa 89       	ldd	r31, Y+18	; 0x12
   12802:	20 81       	ld	r18, Z
   12804:	30 e0       	ldi	r19, 0x00	; 0
   12806:	40 e0       	ldi	r20, 0x00	; 0
   12808:	50 e0       	ldi	r21, 0x00	; 0
   1280a:	68 e0       	ldi	r22, 0x08	; 8
   1280c:	81 e0       	ldi	r24, 0x01	; 1
   1280e:	15 de       	rcall	.-982    	; 0x1243a <print_tok_val>
   12810:	e9 89       	ldd	r30, Y+17	; 0x11
   12812:	fa 89       	ldd	r31, Y+18	; 0x12
   12814:	21 81       	ldd	r18, Z+1	; 0x01
   12816:	30 e0       	ldi	r19, 0x00	; 0
   12818:	40 e0       	ldi	r20, 0x00	; 0
   1281a:	50 e0       	ldi	r21, 0x00	; 0
   1281c:	68 e0       	ldi	r22, 0x08	; 8
   1281e:	8f e1       	ldi	r24, 0x1F	; 31
   12820:	0c de       	rcall	.-1000   	; 0x1243a <print_tok_val>
   12822:	e9 89       	ldd	r30, Y+17	; 0x11
   12824:	fa 89       	ldd	r31, Y+18	; 0x12
   12826:	42 81       	ldd	r20, Z+2	; 0x02
   12828:	53 81       	ldd	r21, Z+3	; 0x03
   1282a:	68 e0       	ldi	r22, 0x08	; 8
   1282c:	82 e1       	ldi	r24, 0x12	; 18
   1282e:	45 de       	rcall	.-886    	; 0x124ba <print_tok_str>
   12830:	64 e0       	ldi	r22, 0x04	; 4
   12832:	81 e1       	ldi	r24, 0x11	; 17
   12834:	77 de       	rcall	.-786    	; 0x12524 <print_tok>
   12836:	64 e0       	ldi	r22, 0x04	; 4
   12838:	85 e1       	ldi	r24, 0x15	; 21
   1283a:	74 de       	rcall	.-792    	; 0x12524 <print_tok>
   1283c:	e9 89       	ldd	r30, Y+17	; 0x11
   1283e:	fa 89       	ldd	r31, Y+18	; 0x12
   12840:	24 81       	ldd	r18, Z+4	; 0x04
   12842:	35 81       	ldd	r19, Z+5	; 0x05
   12844:	40 e0       	ldi	r20, 0x00	; 0
   12846:	50 e0       	ldi	r21, 0x00	; 0
   12848:	68 e0       	ldi	r22, 0x08	; 8
   1284a:	87 e1       	ldi	r24, 0x17	; 23
   1284c:	f6 dd       	rcall	.-1044   	; 0x1243a <print_tok_val>
   1284e:	64 e0       	ldi	r22, 0x04	; 4
   12850:	81 e1       	ldi	r24, 0x11	; 17
   12852:	68 de       	rcall	.-816    	; 0x12524 <print_tok>
   12854:	a1 14       	cp	r10, r1
   12856:	b1 04       	cpc	r11, r1
   12858:	09 f1       	breq	.+66     	; 0x1289c <display_Config+0x176>
   1285a:	64 e0       	ldi	r22, 0x04	; 4
   1285c:	8b e0       	ldi	r24, 0x0B	; 11
   1285e:	62 de       	rcall	.-828    	; 0x12524 <print_tok>
   12860:	e9 89       	ldd	r30, Y+17	; 0x11
   12862:	fa 89       	ldd	r31, Y+18	; 0x12
   12864:	26 81       	ldd	r18, Z+6	; 0x06
   12866:	37 81       	ldd	r19, Z+7	; 0x07
   12868:	40 e0       	ldi	r20, 0x00	; 0
   1286a:	50 e0       	ldi	r21, 0x00	; 0
   1286c:	68 e0       	ldi	r22, 0x08	; 8
   1286e:	88 e2       	ldi	r24, 0x28	; 40
   12870:	e4 dd       	rcall	.-1080   	; 0x1243a <print_tok_val>
   12872:	e9 89       	ldd	r30, Y+17	; 0x11
   12874:	fa 89       	ldd	r31, Y+18	; 0x12
   12876:	20 85       	ldd	r18, Z+8	; 0x08
   12878:	31 85       	ldd	r19, Z+9	; 0x09
   1287a:	40 e0       	ldi	r20, 0x00	; 0
   1287c:	50 e0       	ldi	r21, 0x00	; 0
   1287e:	68 e0       	ldi	r22, 0x08	; 8
   12880:	85 e2       	ldi	r24, 0x25	; 37
   12882:	db dd       	rcall	.-1098   	; 0x1243a <print_tok_val>
   12884:	e9 89       	ldd	r30, Y+17	; 0x11
   12886:	fa 89       	ldd	r31, Y+18	; 0x12
   12888:	22 85       	ldd	r18, Z+10	; 0x0a
   1288a:	30 e0       	ldi	r19, 0x00	; 0
   1288c:	40 e0       	ldi	r20, 0x00	; 0
   1288e:	50 e0       	ldi	r21, 0x00	; 0
   12890:	68 e0       	ldi	r22, 0x08	; 8
   12892:	86 e2       	ldi	r24, 0x26	; 38
   12894:	d2 dd       	rcall	.-1116   	; 0x1243a <print_tok_val>
   12896:	64 e0       	ldi	r22, 0x04	; 4
   12898:	81 e1       	ldi	r24, 0x11	; 17
   1289a:	44 de       	rcall	.-888    	; 0x12524 <print_tok>
   1289c:	64 e0       	ldi	r22, 0x04	; 4
   1289e:	87 e2       	ldi	r24, 0x27	; 39
   128a0:	41 de       	rcall	.-894    	; 0x12524 <print_tok>
   128a2:	a1 14       	cp	r10, r1
   128a4:	b1 04       	cpc	r11, r1
   128a6:	49 f0       	breq	.+18     	; 0x128ba <display_Config+0x194>
   128a8:	e9 89       	ldd	r30, Y+17	; 0x11
   128aa:	fa 89       	ldd	r31, Y+18	; 0x12
   128ac:	23 85       	ldd	r18, Z+11	; 0x0b
   128ae:	30 e0       	ldi	r19, 0x00	; 0
   128b0:	40 e0       	ldi	r20, 0x00	; 0
   128b2:	50 e0       	ldi	r21, 0x00	; 0
   128b4:	68 e0       	ldi	r22, 0x08	; 8
   128b6:	89 e2       	ldi	r24, 0x29	; 41
   128b8:	c0 dd       	rcall	.-1152   	; 0x1243a <print_tok_val>
   128ba:	e9 89       	ldd	r30, Y+17	; 0x11
   128bc:	fa 89       	ldd	r31, Y+18	; 0x12
   128be:	24 85       	ldd	r18, Z+12	; 0x0c
   128c0:	35 85       	ldd	r19, Z+13	; 0x0d
   128c2:	46 85       	ldd	r20, Z+14	; 0x0e
   128c4:	57 85       	ldd	r21, Z+15	; 0x0f
   128c6:	68 e0       	ldi	r22, 0x08	; 8
   128c8:	8f e0       	ldi	r24, 0x0F	; 15
   128ca:	b7 dd       	rcall	.-1170   	; 0x1243a <print_tok_val>
   128cc:	a1 14       	cp	r10, r1
   128ce:	b1 04       	cpc	r11, r1
   128d0:	09 f4       	brne	.+2      	; 0x128d4 <display_Config+0x1ae>
   128d2:	5a c0       	rjmp	.+180    	; 0x12988 <display_Config+0x262>
   128d4:	e9 89       	ldd	r30, Y+17	; 0x11
   128d6:	fa 89       	ldd	r31, Y+18	; 0x12
   128d8:	20 89       	ldd	r18, Z+16	; 0x10
   128da:	31 89       	ldd	r19, Z+17	; 0x11
   128dc:	40 e0       	ldi	r20, 0x00	; 0
   128de:	50 e0       	ldi	r21, 0x00	; 0
   128e0:	68 e0       	ldi	r22, 0x08	; 8
   128e2:	87 e0       	ldi	r24, 0x07	; 7
   128e4:	aa dd       	rcall	.-1196   	; 0x1243a <print_tok_val>
   128e6:	e9 89       	ldd	r30, Y+17	; 0x11
   128e8:	fa 89       	ldd	r31, Y+18	; 0x12
   128ea:	22 89       	ldd	r18, Z+18	; 0x12
   128ec:	30 e0       	ldi	r19, 0x00	; 0
   128ee:	40 e0       	ldi	r20, 0x00	; 0
   128f0:	50 e0       	ldi	r21, 0x00	; 0
   128f2:	68 e0       	ldi	r22, 0x08	; 8
   128f4:	85 e0       	ldi	r24, 0x05	; 5
   128f6:	a1 dd       	rcall	.-1214   	; 0x1243a <print_tok_val>
   128f8:	e9 89       	ldd	r30, Y+17	; 0x11
   128fa:	fa 89       	ldd	r31, Y+18	; 0x12
   128fc:	23 89       	ldd	r18, Z+19	; 0x13
   128fe:	30 e0       	ldi	r19, 0x00	; 0
   12900:	40 e0       	ldi	r20, 0x00	; 0
   12902:	50 e0       	ldi	r21, 0x00	; 0
   12904:	68 e0       	ldi	r22, 0x08	; 8
   12906:	86 e0       	ldi	r24, 0x06	; 6
   12908:	98 dd       	rcall	.-1232   	; 0x1243a <print_tok_val>
   1290a:	e9 89       	ldd	r30, Y+17	; 0x11
   1290c:	fa 89       	ldd	r31, Y+18	; 0x12
   1290e:	24 89       	ldd	r18, Z+20	; 0x14
   12910:	35 89       	ldd	r19, Z+21	; 0x15
   12912:	40 e0       	ldi	r20, 0x00	; 0
   12914:	50 e0       	ldi	r21, 0x00	; 0
   12916:	68 e0       	ldi	r22, 0x08	; 8
   12918:	84 e0       	ldi	r24, 0x04	; 4
   1291a:	8f dd       	rcall	.-1250   	; 0x1243a <print_tok_val>
   1291c:	e9 89       	ldd	r30, Y+17	; 0x11
   1291e:	fa 89       	ldd	r31, Y+18	; 0x12
   12920:	26 89       	ldd	r18, Z+22	; 0x16
   12922:	37 89       	ldd	r19, Z+23	; 0x17
   12924:	40 e0       	ldi	r20, 0x00	; 0
   12926:	50 e0       	ldi	r21, 0x00	; 0
   12928:	68 e0       	ldi	r22, 0x08	; 8
   1292a:	8a e0       	ldi	r24, 0x0A	; 10
   1292c:	86 dd       	rcall	.-1268   	; 0x1243a <print_tok_val>
   1292e:	e9 89       	ldd	r30, Y+17	; 0x11
   12930:	fa 89       	ldd	r31, Y+18	; 0x12
   12932:	20 8d       	ldd	r18, Z+24	; 0x18
   12934:	31 8d       	ldd	r19, Z+25	; 0x19
   12936:	40 e0       	ldi	r20, 0x00	; 0
   12938:	50 e0       	ldi	r21, 0x00	; 0
   1293a:	68 e0       	ldi	r22, 0x08	; 8
   1293c:	8e e1       	ldi	r24, 0x1E	; 30
   1293e:	7d dd       	rcall	.-1286   	; 0x1243a <print_tok_val>
   12940:	e9 89       	ldd	r30, Y+17	; 0x11
   12942:	fa 89       	ldd	r31, Y+18	; 0x12
   12944:	22 8d       	ldd	r18, Z+26	; 0x1a
   12946:	33 8d       	ldd	r19, Z+27	; 0x1b
   12948:	40 e0       	ldi	r20, 0x00	; 0
   1294a:	50 e0       	ldi	r21, 0x00	; 0
   1294c:	68 e0       	ldi	r22, 0x08	; 8
   1294e:	80 e0       	ldi	r24, 0x00	; 0
   12950:	74 dd       	rcall	.-1304   	; 0x1243a <print_tok_val>
   12952:	e9 89       	ldd	r30, Y+17	; 0x11
   12954:	fa 89       	ldd	r31, Y+18	; 0x12
   12956:	24 8d       	ldd	r18, Z+28	; 0x1c
   12958:	30 e0       	ldi	r19, 0x00	; 0
   1295a:	40 e0       	ldi	r20, 0x00	; 0
   1295c:	50 e0       	ldi	r21, 0x00	; 0
   1295e:	68 e0       	ldi	r22, 0x08	; 8
   12960:	8c e1       	ldi	r24, 0x1C	; 28
   12962:	6b dd       	rcall	.-1322   	; 0x1243a <print_tok_val>
   12964:	e9 89       	ldd	r30, Y+17	; 0x11
   12966:	fa 89       	ldd	r31, Y+18	; 0x12
   12968:	25 8d       	ldd	r18, Z+29	; 0x1d
   1296a:	30 e0       	ldi	r19, 0x00	; 0
   1296c:	40 e0       	ldi	r20, 0x00	; 0
   1296e:	50 e0       	ldi	r21, 0x00	; 0
   12970:	68 e0       	ldi	r22, 0x08	; 8
   12972:	83 e1       	ldi	r24, 0x13	; 19
   12974:	62 dd       	rcall	.-1340   	; 0x1243a <print_tok_val>
   12976:	e9 89       	ldd	r30, Y+17	; 0x11
   12978:	fa 89       	ldd	r31, Y+18	; 0x12
   1297a:	26 8d       	ldd	r18, Z+30	; 0x1e
   1297c:	30 e0       	ldi	r19, 0x00	; 0
   1297e:	40 e0       	ldi	r20, 0x00	; 0
   12980:	50 e0       	ldi	r21, 0x00	; 0
   12982:	68 e0       	ldi	r22, 0x08	; 8
   12984:	81 e2       	ldi	r24, 0x21	; 33
   12986:	59 dd       	rcall	.-1358   	; 0x1243a <print_tok_val>
   12988:	64 e0       	ldi	r22, 0x04	; 4
   1298a:	81 e1       	ldi	r24, 0x11	; 17
   1298c:	cb dd       	rcall	.-1130   	; 0x12524 <print_tok>
   1298e:	a1 14       	cp	r10, r1
   12990:	b1 04       	cpc	r11, r1
   12992:	99 f1       	breq	.+102    	; 0x129fa <display_Config+0x2d4>
   12994:	64 e0       	ldi	r22, 0x04	; 4
   12996:	8a e2       	ldi	r24, 0x2A	; 42
   12998:	c5 dd       	rcall	.-1142   	; 0x12524 <print_tok>
   1299a:	e9 89       	ldd	r30, Y+17	; 0x11
   1299c:	fa 89       	ldd	r31, Y+18	; 0x12
   1299e:	27 8d       	ldd	r18, Z+31	; 0x1f
   129a0:	30 a1       	ldd	r19, Z+32	; 0x20
   129a2:	41 a1       	ldd	r20, Z+33	; 0x21
   129a4:	52 a1       	ldd	r21, Z+34	; 0x22
   129a6:	68 e0       	ldi	r22, 0x08	; 8
   129a8:	8a e1       	ldi	r24, 0x1A	; 26
   129aa:	47 dd       	rcall	.-1394   	; 0x1243a <print_tok_val>
   129ac:	e9 89       	ldd	r30, Y+17	; 0x11
   129ae:	fa 89       	ldd	r31, Y+18	; 0x12
   129b0:	23 a1       	ldd	r18, Z+35	; 0x23
   129b2:	30 e0       	ldi	r19, 0x00	; 0
   129b4:	40 e0       	ldi	r20, 0x00	; 0
   129b6:	50 e0       	ldi	r21, 0x00	; 0
   129b8:	68 e0       	ldi	r22, 0x08	; 8
   129ba:	8b e1       	ldi	r24, 0x1B	; 27
   129bc:	3e dd       	rcall	.-1412   	; 0x1243a <print_tok_val>
   129be:	e9 89       	ldd	r30, Y+17	; 0x11
   129c0:	fa 89       	ldd	r31, Y+18	; 0x12
   129c2:	24 a1       	ldd	r18, Z+36	; 0x24
   129c4:	35 a1       	ldd	r19, Z+37	; 0x25
   129c6:	40 e0       	ldi	r20, 0x00	; 0
   129c8:	50 e0       	ldi	r21, 0x00	; 0
   129ca:	68 e0       	ldi	r22, 0x08	; 8
   129cc:	8d e1       	ldi	r24, 0x1D	; 29
   129ce:	35 dd       	rcall	.-1430   	; 0x1243a <print_tok_val>
   129d0:	e9 89       	ldd	r30, Y+17	; 0x11
   129d2:	fa 89       	ldd	r31, Y+18	; 0x12
   129d4:	26 a1       	ldd	r18, Z+38	; 0x26
   129d6:	37 a1       	ldd	r19, Z+39	; 0x27
   129d8:	40 a5       	ldd	r20, Z+40	; 0x28
   129da:	51 a5       	ldd	r21, Z+41	; 0x29
   129dc:	68 e0       	ldi	r22, 0x08	; 8
   129de:	89 e1       	ldi	r24, 0x19	; 25
   129e0:	2c dd       	rcall	.-1448   	; 0x1243a <print_tok_val>
   129e2:	e9 89       	ldd	r30, Y+17	; 0x11
   129e4:	fa 89       	ldd	r31, Y+18	; 0x12
   129e6:	22 a5       	ldd	r18, Z+42	; 0x2a
   129e8:	30 e0       	ldi	r19, 0x00	; 0
   129ea:	40 e0       	ldi	r20, 0x00	; 0
   129ec:	50 e0       	ldi	r21, 0x00	; 0
   129ee:	68 e0       	ldi	r22, 0x08	; 8
   129f0:	88 e1       	ldi	r24, 0x18	; 24
   129f2:	23 dd       	rcall	.-1466   	; 0x1243a <print_tok_val>
   129f4:	64 e0       	ldi	r22, 0x04	; 4
   129f6:	81 e1       	ldi	r24, 0x11	; 17
   129f8:	95 dd       	rcall	.-1238   	; 0x12524 <print_tok>
   129fa:	e9 89       	ldd	r30, Y+17	; 0x11
   129fc:	fa 89       	ldd	r31, Y+18	; 0x12
   129fe:	86 a1       	ldd	r24, Z+38	; 0x26
   12a00:	97 a1       	ldd	r25, Z+39	; 0x27
   12a02:	a0 a5       	ldd	r26, Z+40	; 0x28
   12a04:	b1 a5       	ldd	r27, Z+41	; 0x29
   12a06:	01 96       	adiw	r24, 0x01	; 1
   12a08:	a1 1d       	adc	r26, r1
   12a0a:	b1 1d       	adc	r27, r1
   12a0c:	ed b7       	in	r30, 0x3d	; 61
   12a0e:	fe b7       	in	r31, 0x3e	; 62
   12a10:	84 83       	std	Z+4, r24	; 0x04
   12a12:	95 83       	std	Z+5, r25	; 0x05
   12a14:	a6 83       	std	Z+6, r26	; 0x06
   12a16:	b7 83       	std	Z+7, r27	; 0x07
   12a18:	2d e1       	ldi	r18, 0x1D	; 29
   12a1a:	38 e1       	ldi	r19, 0x18	; 24
   12a1c:	c9 01       	movw	r24, r18
   12a1e:	a0 e0       	ldi	r26, 0x00	; 0
   12a20:	81 83       	std	Z+1, r24	; 0x01
   12a22:	92 83       	std	Z+2, r25	; 0x02
   12a24:	a3 83       	std	Z+3, r26	; 0x03
   12a26:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   12a2a:	60 e0       	ldi	r22, 0x00	; 0
   12a2c:	81 e1       	ldi	r24, 0x11	; 17
   12a2e:	7a dd       	rcall	.-1292   	; 0x12524 <print_tok>
   12a30:	f8 01       	movw	r30, r16
   12a32:	80 81       	ld	r24, Z
   12a34:	81 30       	cpi	r24, 0x01	; 1
   12a36:	09 f0       	breq	.+2      	; 0x12a3a <display_Config+0x314>
   12a38:	ad c0       	rjmp	.+346    	; 0x12b94 <display_Config+0x46e>
   12a3a:	27 a1       	ldd	r18, Z+39	; 0x27
   12a3c:	30 a5       	ldd	r19, Z+40	; 0x28
   12a3e:	3a 8b       	std	Y+18, r19	; 0x12
   12a40:	29 8b       	std	Y+17, r18	; 0x11
   12a42:	c8 01       	movw	r24, r16
   12a44:	07 96       	adiw	r24, 0x07	; 7
   12a46:	ed b7       	in	r30, 0x3d	; 61
   12a48:	fe b7       	in	r31, 0x3e	; 62
   12a4a:	95 83       	std	Z+5, r25	; 0x05
   12a4c:	84 83       	std	Z+4, r24	; 0x04
   12a4e:	2b 85       	ldd	r18, Y+11	; 0x0b
   12a50:	3c 85       	ldd	r19, Y+12	; 0x0c
   12a52:	4d 85       	ldd	r20, Y+13	; 0x0d
   12a54:	21 83       	std	Z+1, r18	; 0x01
   12a56:	32 83       	std	Z+2, r19	; 0x02
   12a58:	43 83       	std	Z+3, r20	; 0x03
   12a5a:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   12a5e:	e9 89       	ldd	r30, Y+17	; 0x11
   12a60:	fa 89       	ldd	r31, Y+18	; 0x12
   12a62:	80 81       	ld	r24, Z
   12a64:	90 e0       	ldi	r25, 0x00	; 0
   12a66:	ed b7       	in	r30, 0x3d	; 61
   12a68:	fe b7       	in	r31, 0x3e	; 62
   12a6a:	95 83       	std	Z+5, r25	; 0x05
   12a6c:	84 83       	std	Z+4, r24	; 0x04
   12a6e:	2e 85       	ldd	r18, Y+14	; 0x0e
   12a70:	3f 85       	ldd	r19, Y+15	; 0x0f
   12a72:	48 89       	ldd	r20, Y+16	; 0x10
   12a74:	21 83       	std	Z+1, r18	; 0x01
   12a76:	32 83       	std	Z+2, r19	; 0x02
   12a78:	43 83       	std	Z+3, r20	; 0x03
   12a7a:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   12a7e:	64 e0       	ldi	r22, 0x04	; 4
   12a80:	85 e1       	ldi	r24, 0x15	; 21
   12a82:	50 dd       	rcall	.-1376   	; 0x12524 <print_tok>
   12a84:	e9 89       	ldd	r30, Y+17	; 0x11
   12a86:	fa 89       	ldd	r31, Y+18	; 0x12
   12a88:	20 81       	ld	r18, Z
   12a8a:	30 e0       	ldi	r19, 0x00	; 0
   12a8c:	40 e0       	ldi	r20, 0x00	; 0
   12a8e:	50 e0       	ldi	r21, 0x00	; 0
   12a90:	68 e0       	ldi	r22, 0x08	; 8
   12a92:	81 e0       	ldi	r24, 0x01	; 1
   12a94:	d2 dc       	rcall	.-1628   	; 0x1243a <print_tok_val>
   12a96:	e9 89       	ldd	r30, Y+17	; 0x11
   12a98:	fa 89       	ldd	r31, Y+18	; 0x12
   12a9a:	21 81       	ldd	r18, Z+1	; 0x01
   12a9c:	30 e0       	ldi	r19, 0x00	; 0
   12a9e:	40 e0       	ldi	r20, 0x00	; 0
   12aa0:	50 e0       	ldi	r21, 0x00	; 0
   12aa2:	68 e0       	ldi	r22, 0x08	; 8
   12aa4:	8f e1       	ldi	r24, 0x1F	; 31
   12aa6:	c9 dc       	rcall	.-1646   	; 0x1243a <print_tok_val>
   12aa8:	e9 89       	ldd	r30, Y+17	; 0x11
   12aaa:	fa 89       	ldd	r31, Y+18	; 0x12
   12aac:	42 81       	ldd	r20, Z+2	; 0x02
   12aae:	53 81       	ldd	r21, Z+3	; 0x03
   12ab0:	68 e0       	ldi	r22, 0x08	; 8
   12ab2:	82 e1       	ldi	r24, 0x12	; 18
   12ab4:	02 dd       	rcall	.-1532   	; 0x124ba <print_tok_str>
   12ab6:	64 e0       	ldi	r22, 0x04	; 4
   12ab8:	81 e1       	ldi	r24, 0x11	; 17
   12aba:	34 dd       	rcall	.-1432   	; 0x12524 <print_tok>
   12abc:	64 e0       	ldi	r22, 0x04	; 4
   12abe:	89 e0       	ldi	r24, 0x09	; 9
   12ac0:	31 dd       	rcall	.-1438   	; 0x12524 <print_tok>
   12ac2:	e9 89       	ldd	r30, Y+17	; 0x11
   12ac4:	fa 89       	ldd	r31, Y+18	; 0x12
   12ac6:	24 81       	ldd	r18, Z+4	; 0x04
   12ac8:	35 81       	ldd	r19, Z+5	; 0x05
   12aca:	40 e0       	ldi	r20, 0x00	; 0
   12acc:	50 e0       	ldi	r21, 0x00	; 0
   12ace:	68 e0       	ldi	r22, 0x08	; 8
   12ad0:	87 e1       	ldi	r24, 0x17	; 23
   12ad2:	b3 dc       	rcall	.-1690   	; 0x1243a <print_tok_val>
   12ad4:	64 e0       	ldi	r22, 0x04	; 4
   12ad6:	81 e1       	ldi	r24, 0x11	; 17
   12ad8:	25 dd       	rcall	.-1462   	; 0x12524 <print_tok>
   12ada:	a1 14       	cp	r10, r1
   12adc:	b1 04       	cpc	r11, r1
   12ade:	91 f1       	breq	.+100    	; 0x12b44 <display_Config+0x41e>
   12ae0:	64 e0       	ldi	r22, 0x04	; 4
   12ae2:	84 e1       	ldi	r24, 0x14	; 20
   12ae4:	1f dd       	rcall	.-1474   	; 0x12524 <print_tok>
   12ae6:	e9 89       	ldd	r30, Y+17	; 0x11
   12ae8:	fa 89       	ldd	r31, Y+18	; 0x12
   12aea:	26 81       	ldd	r18, Z+6	; 0x06
   12aec:	37 81       	ldd	r19, Z+7	; 0x07
   12aee:	03 2e       	mov	r0, r19
   12af0:	00 0c       	add	r0, r0
   12af2:	44 0b       	sbc	r20, r20
   12af4:	55 0b       	sbc	r21, r21
   12af6:	68 e0       	ldi	r22, 0x08	; 8
   12af8:	88 e0       	ldi	r24, 0x08	; 8
   12afa:	9f dc       	rcall	.-1730   	; 0x1243a <print_tok_val>
   12afc:	e9 89       	ldd	r30, Y+17	; 0x11
   12afe:	fa 89       	ldd	r31, Y+18	; 0x12
   12b00:	20 85       	ldd	r18, Z+8	; 0x08
   12b02:	31 85       	ldd	r19, Z+9	; 0x09
   12b04:	03 2e       	mov	r0, r19
   12b06:	00 0c       	add	r0, r0
   12b08:	44 0b       	sbc	r20, r20
   12b0a:	55 0b       	sbc	r21, r21
   12b0c:	68 e0       	ldi	r22, 0x08	; 8
   12b0e:	82 e2       	ldi	r24, 0x22	; 34
   12b10:	94 dc       	rcall	.-1752   	; 0x1243a <print_tok_val>
   12b12:	e9 89       	ldd	r30, Y+17	; 0x11
   12b14:	fa 89       	ldd	r31, Y+18	; 0x12
   12b16:	22 85       	ldd	r18, Z+10	; 0x0a
   12b18:	33 85       	ldd	r19, Z+11	; 0x0b
   12b1a:	03 2e       	mov	r0, r19
   12b1c:	00 0c       	add	r0, r0
   12b1e:	44 0b       	sbc	r20, r20
   12b20:	55 0b       	sbc	r21, r21
   12b22:	68 e0       	ldi	r22, 0x08	; 8
   12b24:	86 e1       	ldi	r24, 0x16	; 22
   12b26:	89 dc       	rcall	.-1774   	; 0x1243a <print_tok_val>
   12b28:	e9 89       	ldd	r30, Y+17	; 0x11
   12b2a:	fa 89       	ldd	r31, Y+18	; 0x12
   12b2c:	24 85       	ldd	r18, Z+12	; 0x0c
   12b2e:	35 85       	ldd	r19, Z+13	; 0x0d
   12b30:	03 2e       	mov	r0, r19
   12b32:	00 0c       	add	r0, r0
   12b34:	44 0b       	sbc	r20, r20
   12b36:	55 0b       	sbc	r21, r21
   12b38:	68 e0       	ldi	r22, 0x08	; 8
   12b3a:	8d e0       	ldi	r24, 0x0D	; 13
   12b3c:	7e dc       	rcall	.-1796   	; 0x1243a <print_tok_val>
   12b3e:	64 e0       	ldi	r22, 0x04	; 4
   12b40:	81 e1       	ldi	r24, 0x11	; 17
   12b42:	f0 dc       	rcall	.-1568   	; 0x12524 <print_tok>
   12b44:	e9 89       	ldd	r30, Y+17	; 0x11
   12b46:	fa 89       	ldd	r31, Y+18	; 0x12
   12b48:	44 85       	ldd	r20, Z+12	; 0x0c
   12b4a:	55 85       	ldd	r21, Z+13	; 0x0d
   12b4c:	20 85       	ldd	r18, Z+8	; 0x08
   12b4e:	31 85       	ldd	r19, Z+9	; 0x09
   12b50:	42 9f       	mul	r20, r18
   12b52:	c0 01       	movw	r24, r0
   12b54:	43 9f       	mul	r20, r19
   12b56:	90 0d       	add	r25, r0
   12b58:	52 9f       	mul	r21, r18
   12b5a:	90 0d       	add	r25, r0
   12b5c:	11 24       	eor	r1, r1
   12b5e:	42 85       	ldd	r20, Z+10	; 0x0a
   12b60:	53 85       	ldd	r21, Z+11	; 0x0b
   12b62:	84 9f       	mul	r24, r20
   12b64:	90 01       	movw	r18, r0
   12b66:	85 9f       	mul	r24, r21
   12b68:	30 0d       	add	r19, r0
   12b6a:	94 9f       	mul	r25, r20
   12b6c:	30 0d       	add	r19, r0
   12b6e:	11 24       	eor	r1, r1
   12b70:	c9 01       	movw	r24, r18
   12b72:	33 0f       	add	r19, r19
   12b74:	aa 0b       	sbc	r26, r26
   12b76:	bb 0b       	sbc	r27, r27
   12b78:	ed b7       	in	r30, 0x3d	; 61
   12b7a:	fe b7       	in	r31, 0x3e	; 62
   12b7c:	84 83       	std	Z+4, r24	; 0x04
   12b7e:	95 83       	std	Z+5, r25	; 0x05
   12b80:	a6 83       	std	Z+6, r26	; 0x06
   12b82:	b7 83       	std	Z+7, r27	; 0x07
   12b84:	21 82       	std	Z+1, r2	; 0x01
   12b86:	32 82       	std	Z+2, r3	; 0x02
   12b88:	43 82       	std	Z+3, r4	; 0x03
   12b8a:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   12b8e:	60 e0       	ldi	r22, 0x00	; 0
   12b90:	81 e1       	ldi	r24, 0x11	; 17
   12b92:	c8 dc       	rcall	.-1648   	; 0x12524 <print_tok>
   12b94:	f8 01       	movw	r30, r16
   12b96:	80 81       	ld	r24, Z
   12b98:	84 30       	cpi	r24, 0x04	; 4
   12b9a:	c9 f4       	brne	.+50     	; 0x12bce <display_Config+0x4a8>
   12b9c:	27 a1       	ldd	r18, Z+39	; 0x27
   12b9e:	30 a5       	ldd	r19, Z+40	; 0x28
   12ba0:	3a 8b       	std	Y+18, r19	; 0x12
   12ba2:	29 8b       	std	Y+17, r18	; 0x11
   12ba4:	60 e0       	ldi	r22, 0x00	; 0
   12ba6:	80 e2       	ldi	r24, 0x20	; 32
   12ba8:	bd dc       	rcall	.-1670   	; 0x12524 <print_tok>
   12baa:	64 e0       	ldi	r22, 0x04	; 4
   12bac:	89 e0       	ldi	r24, 0x09	; 9
   12bae:	ba dc       	rcall	.-1676   	; 0x12524 <print_tok>
   12bb0:	e9 89       	ldd	r30, Y+17	; 0x11
   12bb2:	fa 89       	ldd	r31, Y+18	; 0x12
   12bb4:	20 81       	ld	r18, Z
   12bb6:	30 e0       	ldi	r19, 0x00	; 0
   12bb8:	40 e0       	ldi	r20, 0x00	; 0
   12bba:	50 e0       	ldi	r21, 0x00	; 0
   12bbc:	68 e0       	ldi	r22, 0x08	; 8
   12bbe:	81 e0       	ldi	r24, 0x01	; 1
   12bc0:	3c dc       	rcall	.-1928   	; 0x1243a <print_tok_val>
   12bc2:	64 e0       	ldi	r22, 0x04	; 4
   12bc4:	81 e1       	ldi	r24, 0x11	; 17
   12bc6:	ae dc       	rcall	.-1700   	; 0x12524 <print_tok>
   12bc8:	60 e0       	ldi	r22, 0x00	; 0
   12bca:	81 e1       	ldi	r24, 0x11	; 17
   12bcc:	ab dc       	rcall	.-1706   	; 0x12524 <print_tok>
   12bce:	28 85       	ldd	r18, Y+8	; 0x08
   12bd0:	39 85       	ldd	r19, Y+9	; 0x09
   12bd2:	4a 85       	ldd	r20, Y+10	; 0x0a
   12bd4:	ed b7       	in	r30, 0x3d	; 61
   12bd6:	fe b7       	in	r31, 0x3e	; 62
   12bd8:	21 83       	std	Z+1, r18	; 0x01
   12bda:	32 83       	std	Z+2, r19	; 0x02
   12bdc:	43 83       	std	Z+3, r20	; 0x03
   12bde:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   12be2:	05 5d       	subi	r16, 0xD5	; 213
   12be4:	1f 4f       	sbci	r17, 0xFF	; 255
   12be6:	2c eb       	ldi	r18, 0xBC	; 188
   12be8:	30 e2       	ldi	r19, 0x20	; 32
   12bea:	20 17       	cp	r18, r16
   12bec:	31 07       	cpc	r19, r17
   12bee:	09 f0       	breq	.+2      	; 0x12bf2 <display_Config+0x4cc>
   12bf0:	df cd       	rjmp	.-1090   	; 0x127b0 <display_Config+0x8a>
   12bf2:	8c ed       	ldi	r24, 0xDC	; 220
   12bf4:	97 e1       	ldi	r25, 0x17	; 23
   12bf6:	a0 e0       	ldi	r26, 0x00	; 0
   12bf8:	ed b7       	in	r30, 0x3d	; 61
   12bfa:	fe b7       	in	r31, 0x3e	; 62
   12bfc:	81 83       	std	Z+1, r24	; 0x01
   12bfe:	92 83       	std	Z+2, r25	; 0x02
   12c00:	a3 83       	std	Z+3, r26	; 0x03
   12c02:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   12c06:	62 96       	adiw	r28, 0x12	; 18
   12c08:	0f b6       	in	r0, 0x3f	; 63
   12c0a:	f8 94       	cli
   12c0c:	de bf       	out	0x3e, r29	; 62
   12c0e:	0f be       	out	0x3f, r0	; 63
   12c10:	cd bf       	out	0x3d, r28	; 61
   12c12:	df 91       	pop	r29
   12c14:	cf 91       	pop	r28
   12c16:	1f 91       	pop	r17
   12c18:	0f 91       	pop	r16
   12c1a:	ef 90       	pop	r14
   12c1c:	df 90       	pop	r13
   12c1e:	cf 90       	pop	r12
   12c20:	bf 90       	pop	r11
   12c22:	af 90       	pop	r10
   12c24:	8f 90       	pop	r8
   12c26:	7f 90       	pop	r7
   12c28:	6f 90       	pop	r6
   12c2a:	4f 90       	pop	r4
   12c2c:	3f 90       	pop	r3
   12c2e:	2f 90       	pop	r2
   12c30:	08 95       	ret

00012c32 <find_type>:
   12c32:	e8 eb       	ldi	r30, 0xB8	; 184
   12c34:	fe e1       	ldi	r31, 0x1E	; 30
   12c36:	20 e0       	ldi	r18, 0x00	; 0
   12c38:	30 e0       	ldi	r19, 0x00	; 0
   12c3a:	40 81       	ld	r20, Z
   12c3c:	50 e0       	ldi	r21, 0x00	; 0
   12c3e:	48 17       	cp	r20, r24
   12c40:	59 07       	cpc	r21, r25
   12c42:	49 f0       	breq	.+18     	; 0x12c56 <find_type+0x24>
   12c44:	2f 5f       	subi	r18, 0xFF	; 255
   12c46:	3f 4f       	sbci	r19, 0xFF	; 255
   12c48:	bb 96       	adiw	r30, 0x2b	; 43
   12c4a:	2c 30       	cpi	r18, 0x0C	; 12
   12c4c:	31 05       	cpc	r19, r1
   12c4e:	a9 f7       	brne	.-22     	; 0x12c3a <find_type+0x8>
   12c50:	8f ef       	ldi	r24, 0xFF	; 255
   12c52:	9f ef       	ldi	r25, 0xFF	; 255
   12c54:	08 95       	ret
   12c56:	c9 01       	movw	r24, r18
   12c58:	08 95       	ret

00012c5a <count_drive_types>:
   12c5a:	28 2f       	mov	r18, r24
   12c5c:	e8 eb       	ldi	r30, 0xB8	; 184
   12c5e:	fe e1       	ldi	r31, 0x1E	; 30
   12c60:	80 e0       	ldi	r24, 0x00	; 0
   12c62:	90 e0       	ldi	r25, 0x00	; 0
   12c64:	30 81       	ld	r19, Z
   12c66:	32 13       	cpse	r19, r18
   12c68:	01 c0       	rjmp	.+2      	; 0x12c6c <count_drive_types+0x12>
   12c6a:	01 96       	adiw	r24, 0x01	; 1
   12c6c:	bb 96       	adiw	r30, 0x2b	; 43
   12c6e:	30 e2       	ldi	r19, 0x20	; 32
   12c70:	ec 3b       	cpi	r30, 0xBC	; 188
   12c72:	f3 07       	cpc	r31, r19
   12c74:	b9 f7       	brne	.-18     	; 0x12c64 <count_drive_types+0xa>
   12c76:	08 95       	ret

00012c78 <type_to_str>:
   12c78:	00 97       	sbiw	r24, 0x00	; 0
   12c7a:	59 f0       	breq	.+22     	; 0x12c92 <type_to_str+0x1a>
   12c7c:	81 30       	cpi	r24, 0x01	; 1
   12c7e:	91 05       	cpc	r25, r1
   12c80:	59 f0       	breq	.+22     	; 0x12c98 <type_to_str+0x20>
   12c82:	83 30       	cpi	r24, 0x03	; 3
   12c84:	91 05       	cpc	r25, r1
   12c86:	59 f0       	breq	.+22     	; 0x12c9e <type_to_str+0x26>
   12c88:	04 97       	sbiw	r24, 0x04	; 4
   12c8a:	61 f0       	breq	.+24     	; 0x12ca4 <type_to_str+0x2c>
   12c8c:	85 e0       	ldi	r24, 0x05	; 5
   12c8e:	9e e0       	ldi	r25, 0x0E	; 14
   12c90:	08 95       	ret
   12c92:	8b ed       	ldi	r24, 0xDB	; 219
   12c94:	9d e0       	ldi	r25, 0x0D	; 13
   12c96:	08 95       	ret
   12c98:	83 ee       	ldi	r24, 0xE3	; 227
   12c9a:	9d e0       	ldi	r25, 0x0D	; 13
   12c9c:	08 95       	ret
   12c9e:	8b ef       	ldi	r24, 0xFB	; 251
   12ca0:	9d e0       	ldi	r25, 0x0D	; 13
   12ca2:	08 95       	ret
   12ca4:	8e ee       	ldi	r24, 0xEE	; 238
   12ca6:	9d e0       	ldi	r25, 0x0D	; 13
   12ca8:	08 95       	ret

00012caa <find_free>:
   12caa:	80 e0       	ldi	r24, 0x00	; 0
   12cac:	90 e0       	ldi	r25, 0x00	; 0
   12cae:	c1 cf       	rjmp	.-126    	; 0x12c32 <find_type>
   12cb0:	08 95       	ret

00012cb2 <find_device>:
   12cb2:	9b 01       	movw	r18, r22
   12cb4:	20 52       	subi	r18, 0x20	; 32
   12cb6:	31 09       	sbc	r19, r1
   12cb8:	2f 35       	cpi	r18, 0x5F	; 95
   12cba:	31 05       	cpc	r19, r1
   12cbc:	f8 f4       	brcc	.+62     	; 0x12cfc <find_device+0x4a>
   12cbe:	64 17       	cp	r22, r20
   12cc0:	75 07       	cpc	r23, r21
   12cc2:	e4 f0       	brlt	.+56     	; 0x12cfc <find_device+0x4a>
   12cc4:	9a 01       	movw	r18, r20
   12cc6:	22 5e       	subi	r18, 0xE2	; 226
   12cc8:	3f 4f       	sbci	r19, 0xFF	; 255
   12cca:	26 17       	cp	r18, r22
   12ccc:	37 07       	cpc	r19, r23
   12cce:	b4 f0       	brlt	.+44     	; 0x12cfc <find_device+0x4a>
   12cd0:	64 1b       	sub	r22, r20
   12cd2:	75 0b       	sbc	r23, r21
   12cd4:	e8 eb       	ldi	r30, 0xB8	; 184
   12cd6:	fe e1       	ldi	r31, 0x1E	; 30
   12cd8:	20 e0       	ldi	r18, 0x00	; 0
   12cda:	30 e0       	ldi	r19, 0x00	; 0
   12cdc:	40 81       	ld	r20, Z
   12cde:	50 e0       	ldi	r21, 0x00	; 0
   12ce0:	48 17       	cp	r20, r24
   12ce2:	59 07       	cpc	r21, r25
   12ce4:	29 f4       	brne	.+10     	; 0x12cf0 <find_device+0x3e>
   12ce6:	41 81       	ldd	r20, Z+1	; 0x01
   12ce8:	50 e0       	ldi	r21, 0x00	; 0
   12cea:	64 17       	cp	r22, r20
   12cec:	75 07       	cpc	r23, r21
   12cee:	49 f0       	breq	.+18     	; 0x12d02 <find_device+0x50>
   12cf0:	2f 5f       	subi	r18, 0xFF	; 255
   12cf2:	3f 4f       	sbci	r19, 0xFF	; 255
   12cf4:	bb 96       	adiw	r30, 0x2b	; 43
   12cf6:	2c 30       	cpi	r18, 0x0C	; 12
   12cf8:	31 05       	cpc	r19, r1
   12cfa:	81 f7       	brne	.-32     	; 0x12cdc <find_device+0x2a>
   12cfc:	8f ef       	ldi	r24, 0xFF	; 255
   12cfe:	9f ef       	ldi	r25, 0xFF	; 255
   12d00:	08 95       	ret
   12d02:	c9 01       	movw	r24, r18
   12d04:	08 95       	ret

00012d06 <set_active_device>:
   12d06:	a9 e0       	ldi	r26, 0x09	; 9
   12d08:	b0 e0       	ldi	r27, 0x00	; 0
   12d0a:	e9 e8       	ldi	r30, 0x89	; 137
   12d0c:	f6 e9       	ldi	r31, 0x96	; 150
   12d0e:	0c 94 ec df 	jmp	0x1bfd8	; 0x1bfd8 <__prologue_saves__+0x1c>
   12d12:	8f 3f       	cpi	r24, 0xFF	; 255
   12d14:	2f ef       	ldi	r18, 0xFF	; 255
   12d16:	92 07       	cpc	r25, r18
   12d18:	09 f4       	brne	.+2      	; 0x12d1c <set_active_device+0x16>
   12d1a:	d0 c0       	rjmp	.+416    	; 0x12ebc <set_active_device+0x1b6>
   12d1c:	ec 01       	movw	r28, r24
   12d1e:	0c 97       	sbiw	r24, 0x0c	; 12
   12d20:	b0 f0       	brcs	.+44     	; 0x12d4e <set_active_device+0x48>
   12d22:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   12d26:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   12d2a:	c9 01       	movw	r24, r18
   12d2c:	82 70       	andi	r24, 0x02	; 2
   12d2e:	99 27       	eor	r25, r25
   12d30:	21 ff       	sbrs	r18, 1
   12d32:	c6 c0       	rjmp	.+396    	; 0x12ec0 <set_active_device+0x1ba>
   12d34:	ed b7       	in	r30, 0x3d	; 61
   12d36:	fe b7       	in	r31, 0x3e	; 62
   12d38:	d5 83       	std	Z+5, r29	; 0x05
   12d3a:	c4 83       	std	Z+4, r28	; 0x04
   12d3c:	87 eb       	ldi	r24, 0xB7	; 183
   12d3e:	97 e1       	ldi	r25, 0x17	; 23
   12d40:	a0 e0       	ldi	r26, 0x00	; 0
   12d42:	81 83       	std	Z+1, r24	; 0x01
   12d44:	92 83       	std	Z+2, r25	; 0x02
   12d46:	a3 83       	std	Z+3, r26	; 0x03
   12d48:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   12d4c:	b7 c0       	rjmp	.+366    	; 0x12ebc <set_active_device+0x1b6>
   12d4e:	8b e2       	ldi	r24, 0x2B	; 43
   12d50:	8c 9f       	mul	r24, r28
   12d52:	f0 01       	movw	r30, r0
   12d54:	8d 9f       	mul	r24, r29
   12d56:	f0 0d       	add	r31, r0
   12d58:	11 24       	eor	r1, r1
   12d5a:	e8 54       	subi	r30, 0x48	; 72
   12d5c:	f1 4e       	sbci	r31, 0xE1	; 225
   12d5e:	21 81       	ldd	r18, Z+1	; 0x01
   12d60:	2f 31       	cpi	r18, 0x1F	; 31
   12d62:	d0 f0       	brcs	.+52     	; 0x12d98 <set_active_device+0x92>
   12d64:	40 91 c3 01 	lds	r20, 0x01C3	; 0x8001c3 <debuglevel>
   12d68:	50 91 c4 01 	lds	r21, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   12d6c:	ca 01       	movw	r24, r20
   12d6e:	82 70       	andi	r24, 0x02	; 2
   12d70:	99 27       	eor	r25, r25
   12d72:	41 ff       	sbrs	r20, 1
   12d74:	a5 c0       	rjmp	.+330    	; 0x12ec0 <set_active_device+0x1ba>
   12d76:	82 2f       	mov	r24, r18
   12d78:	90 e0       	ldi	r25, 0x00	; 0
   12d7a:	ed b7       	in	r30, 0x3d	; 61
   12d7c:	fe b7       	in	r31, 0x3e	; 62
   12d7e:	97 83       	std	Z+7, r25	; 0x07
   12d80:	86 83       	std	Z+6, r24	; 0x06
   12d82:	d5 83       	std	Z+5, r29	; 0x05
   12d84:	c4 83       	std	Z+4, r28	; 0x04
   12d86:	8e e7       	ldi	r24, 0x7E	; 126
   12d88:	97 e1       	ldi	r25, 0x17	; 23
   12d8a:	a0 e0       	ldi	r26, 0x00	; 0
   12d8c:	81 83       	std	Z+1, r24	; 0x01
   12d8e:	92 83       	std	Z+2, r25	; 0x02
   12d90:	a3 83       	std	Z+3, r26	; 0x03
   12d92:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   12d96:	92 c0       	rjmp	.+292    	; 0x12ebc <set_active_device+0x1b6>
   12d98:	20 81       	ld	r18, Z
   12d9a:	02 2f       	mov	r16, r18
   12d9c:	10 e0       	ldi	r17, 0x00	; 0
   12d9e:	87 a1       	ldd	r24, Z+39	; 0x27
   12da0:	90 a5       	ldd	r25, Z+40	; 0x28
   12da2:	00 97       	sbiw	r24, 0x00	; 0
   12da4:	b1 f4       	brne	.+44     	; 0x12dd2 <set_active_device+0xcc>
   12da6:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   12daa:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   12dae:	c9 01       	movw	r24, r18
   12db0:	82 70       	andi	r24, 0x02	; 2
   12db2:	99 27       	eor	r25, r25
   12db4:	21 ff       	sbrs	r18, 1
   12db6:	84 c0       	rjmp	.+264    	; 0x12ec0 <set_active_device+0x1ba>
   12db8:	c8 01       	movw	r24, r16
   12dba:	5e df       	rcall	.-324    	; 0x12c78 <type_to_str>
   12dbc:	ed b7       	in	r30, 0x3d	; 61
   12dbe:	fe b7       	in	r31, 0x3e	; 62
   12dc0:	91 87       	std	Z+9, r25	; 0x09
   12dc2:	80 87       	std	Z+8, r24	; 0x08
   12dc4:	17 83       	std	Z+7, r17	; 0x07
   12dc6:	06 83       	std	Z+6, r16	; 0x06
   12dc8:	d5 83       	std	Z+5, r29	; 0x05
   12dca:	c4 83       	std	Z+4, r28	; 0x04
   12dcc:	89 e4       	ldi	r24, 0x49	; 73
   12dce:	97 e1       	ldi	r25, 0x17	; 23
   12dd0:	6f c0       	rjmp	.+222    	; 0x12eb0 <set_active_device+0x1aa>
   12dd2:	01 15       	cp	r16, r1
   12dd4:	11 05       	cpc	r17, r1
   12dd6:	b9 f4       	brne	.+46     	; 0x12e06 <set_active_device+0x100>
   12dd8:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   12ddc:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   12de0:	c9 01       	movw	r24, r18
   12de2:	82 70       	andi	r24, 0x02	; 2
   12de4:	99 27       	eor	r25, r25
   12de6:	21 ff       	sbrs	r18, 1
   12de8:	6b c0       	rjmp	.+214    	; 0x12ec0 <set_active_device+0x1ba>
   12dea:	80 e0       	ldi	r24, 0x00	; 0
   12dec:	90 e0       	ldi	r25, 0x00	; 0
   12dee:	44 df       	rcall	.-376    	; 0x12c78 <type_to_str>
   12df0:	ed b7       	in	r30, 0x3d	; 61
   12df2:	fe b7       	in	r31, 0x3e	; 62
   12df4:	91 87       	std	Z+9, r25	; 0x09
   12df6:	80 87       	std	Z+8, r24	; 0x08
   12df8:	17 82       	std	Z+7, r1	; 0x07
   12dfa:	16 82       	std	Z+6, r1	; 0x06
   12dfc:	d5 83       	std	Z+5, r29	; 0x05
   12dfe:	c4 83       	std	Z+4, r28	; 0x04
   12e00:	84 e1       	ldi	r24, 0x14	; 20
   12e02:	97 e1       	ldi	r25, 0x17	; 23
   12e04:	55 c0       	rjmp	.+170    	; 0x12eb0 <set_active_device+0x1aa>
   12e06:	04 30       	cpi	r16, 0x04	; 4
   12e08:	11 05       	cpc	r17, r1
   12e0a:	29 f4       	brne	.+10     	; 0x12e16 <set_active_device+0x110>
   12e0c:	90 93 36 19 	sts	0x1936, r25	; 0x801936 <PRINTERp+0x1>
   12e10:	80 93 35 19 	sts	0x1935, r24	; 0x801935 <PRINTERp>
   12e14:	35 c0       	rjmp	.+106    	; 0x12e80 <set_active_device+0x17a>
   12e16:	2d 7f       	andi	r18, 0xFD	; 253
   12e18:	21 30       	cpi	r18, 0x01	; 1
   12e1a:	a9 f5       	brne	.+106    	; 0x12e86 <set_active_device+0x180>
   12e1c:	21 a5       	ldd	r18, Z+41	; 0x29
   12e1e:	32 a5       	ldd	r19, Z+42	; 0x2a
   12e20:	21 15       	cp	r18, r1
   12e22:	31 05       	cpc	r19, r1
   12e24:	b1 f4       	brne	.+44     	; 0x12e52 <set_active_device+0x14c>
   12e26:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   12e2a:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   12e2e:	c9 01       	movw	r24, r18
   12e30:	82 70       	andi	r24, 0x02	; 2
   12e32:	99 27       	eor	r25, r25
   12e34:	21 ff       	sbrs	r18, 1
   12e36:	44 c0       	rjmp	.+136    	; 0x12ec0 <set_active_device+0x1ba>
   12e38:	c8 01       	movw	r24, r16
   12e3a:	1e df       	rcall	.-452    	; 0x12c78 <type_to_str>
   12e3c:	ed b7       	in	r30, 0x3d	; 61
   12e3e:	fe b7       	in	r31, 0x3e	; 62
   12e40:	91 87       	std	Z+9, r25	; 0x09
   12e42:	80 87       	std	Z+8, r24	; 0x08
   12e44:	17 83       	std	Z+7, r17	; 0x07
   12e46:	06 83       	std	Z+6, r16	; 0x06
   12e48:	d5 83       	std	Z+5, r29	; 0x05
   12e4a:	c4 83       	std	Z+4, r28	; 0x04
   12e4c:	8c ed       	ldi	r24, 0xDC	; 220
   12e4e:	96 e1       	ldi	r25, 0x16	; 22
   12e50:	2f c0       	rjmp	.+94     	; 0x12eb0 <set_active_device+0x1aa>
   12e52:	01 30       	cpi	r16, 0x01	; 1
   12e54:	11 05       	cpc	r17, r1
   12e56:	49 f4       	brne	.+18     	; 0x12e6a <set_active_device+0x164>
   12e58:	90 93 30 19 	sts	0x1930, r25	; 0x801930 <AMIGOp+0x1>
   12e5c:	80 93 2f 19 	sts	0x192F, r24	; 0x80192f <AMIGOp>
   12e60:	30 93 2e 19 	sts	0x192E, r19	; 0x80192e <AMIGOs+0x1>
   12e64:	20 93 2d 19 	sts	0x192D, r18	; 0x80192d <AMIGOs>
   12e68:	0b c0       	rjmp	.+22     	; 0x12e80 <set_active_device+0x17a>
   12e6a:	03 30       	cpi	r16, 0x03	; 3
   12e6c:	11 05       	cpc	r17, r1
   12e6e:	59 f4       	brne	.+22     	; 0x12e86 <set_active_device+0x180>
   12e70:	90 93 34 19 	sts	0x1934, r25	; 0x801934 <SS80p+0x1>
   12e74:	80 93 33 19 	sts	0x1933, r24	; 0x801933 <SS80p>
   12e78:	30 93 32 19 	sts	0x1932, r19	; 0x801932 <SS80s+0x1>
   12e7c:	20 93 31 19 	sts	0x1931, r18	; 0x801931 <SS80s>
   12e80:	81 e0       	ldi	r24, 0x01	; 1
   12e82:	90 e0       	ldi	r25, 0x00	; 0
   12e84:	1d c0       	rjmp	.+58     	; 0x12ec0 <set_active_device+0x1ba>
   12e86:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   12e8a:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   12e8e:	c9 01       	movw	r24, r18
   12e90:	82 70       	andi	r24, 0x02	; 2
   12e92:	99 27       	eor	r25, r25
   12e94:	21 ff       	sbrs	r18, 1
   12e96:	14 c0       	rjmp	.+40     	; 0x12ec0 <set_active_device+0x1ba>
   12e98:	c8 01       	movw	r24, r16
   12e9a:	ee de       	rcall	.-548    	; 0x12c78 <type_to_str>
   12e9c:	ed b7       	in	r30, 0x3d	; 61
   12e9e:	fe b7       	in	r31, 0x3e	; 62
   12ea0:	91 87       	std	Z+9, r25	; 0x09
   12ea2:	80 87       	std	Z+8, r24	; 0x08
   12ea4:	17 83       	std	Z+7, r17	; 0x07
   12ea6:	06 83       	std	Z+6, r16	; 0x06
   12ea8:	d5 83       	std	Z+5, r29	; 0x05
   12eaa:	c4 83       	std	Z+4, r28	; 0x04
   12eac:	81 eb       	ldi	r24, 0xB1	; 177
   12eae:	96 e1       	ldi	r25, 0x16	; 22
   12eb0:	a0 e0       	ldi	r26, 0x00	; 0
   12eb2:	81 83       	std	Z+1, r24	; 0x01
   12eb4:	92 83       	std	Z+2, r25	; 0x02
   12eb6:	a3 83       	std	Z+3, r26	; 0x03
   12eb8:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   12ebc:	80 e0       	ldi	r24, 0x00	; 0
   12ebe:	90 e0       	ldi	r25, 0x00	; 0
   12ec0:	cd b7       	in	r28, 0x3d	; 61
   12ec2:	de b7       	in	r29, 0x3e	; 62
   12ec4:	29 96       	adiw	r28, 0x09	; 9
   12ec6:	e4 e0       	ldi	r30, 0x04	; 4
   12ec8:	0c 94 08 e0 	jmp	0x1c010	; 0x1c010 <__epilogue_restores__+0x1c>

00012ecc <SS80_Set_Defaults>:
   12ecc:	0f 93       	push	r16
   12ece:	1f 93       	push	r17
   12ed0:	cf 93       	push	r28
   12ed2:	df 93       	push	r29
   12ed4:	ec 01       	movw	r28, r24
   12ed6:	82 e0       	ldi	r24, 0x02	; 2
   12ed8:	90 e0       	ldi	r25, 0x00	; 0
   12eda:	ab de       	rcall	.-682    	; 0x12c32 <find_type>
   12edc:	97 fd       	sbrc	r25, 7
   12ede:	6b c0       	rjmp	.+214    	; 0x12fb6 <SS80_Set_Defaults+0xea>
   12ee0:	2b e2       	ldi	r18, 0x2B	; 43
   12ee2:	2c 9f       	mul	r18, r28
   12ee4:	f0 01       	movw	r30, r0
   12ee6:	2d 9f       	mul	r18, r29
   12ee8:	f0 0d       	add	r31, r0
   12eea:	11 24       	eor	r1, r1
   12eec:	e8 54       	subi	r30, 0x48	; 72
   12eee:	f1 4e       	sbci	r31, 0xE1	; 225
   12ef0:	c7 a1       	ldd	r28, Z+39	; 0x27
   12ef2:	d0 a5       	ldd	r29, Z+40	; 0x28
   12ef4:	28 9f       	mul	r18, r24
   12ef6:	f0 01       	movw	r30, r0
   12ef8:	29 9f       	mul	r18, r25
   12efa:	f0 0d       	add	r31, r0
   12efc:	11 24       	eor	r1, r1
   12efe:	e8 54       	subi	r30, 0x48	; 72
   12f00:	f1 4e       	sbci	r31, 0xE1	; 225
   12f02:	07 a1       	ldd	r16, Z+39	; 0x27
   12f04:	10 a5       	ldd	r17, Z+40	; 0x28
   12f06:	f8 01       	movw	r30, r16
   12f08:	80 81       	ld	r24, Z
   12f0a:	88 83       	st	Y, r24
   12f0c:	81 81       	ldd	r24, Z+1	; 0x01
   12f0e:	89 83       	std	Y+1, r24	; 0x01
   12f10:	82 81       	ldd	r24, Z+2	; 0x02
   12f12:	93 81       	ldd	r25, Z+3	; 0x03
   12f14:	0e 94 4b 31 	call	0x6296	; 0x6296 <stralloc>
   12f18:	9b 83       	std	Y+3, r25	; 0x03
   12f1a:	8a 83       	std	Y+2, r24	; 0x02
   12f1c:	f8 01       	movw	r30, r16
   12f1e:	84 81       	ldd	r24, Z+4	; 0x04
   12f20:	95 81       	ldd	r25, Z+5	; 0x05
   12f22:	9d 83       	std	Y+5, r25	; 0x05
   12f24:	8c 83       	std	Y+4, r24	; 0x04
   12f26:	86 81       	ldd	r24, Z+6	; 0x06
   12f28:	97 81       	ldd	r25, Z+7	; 0x07
   12f2a:	9f 83       	std	Y+7, r25	; 0x07
   12f2c:	8e 83       	std	Y+6, r24	; 0x06
   12f2e:	80 85       	ldd	r24, Z+8	; 0x08
   12f30:	91 85       	ldd	r25, Z+9	; 0x09
   12f32:	99 87       	std	Y+9, r25	; 0x09
   12f34:	88 87       	std	Y+8, r24	; 0x08
   12f36:	82 85       	ldd	r24, Z+10	; 0x0a
   12f38:	8a 87       	std	Y+10, r24	; 0x0a
   12f3a:	83 85       	ldd	r24, Z+11	; 0x0b
   12f3c:	8b 87       	std	Y+11, r24	; 0x0b
   12f3e:	84 85       	ldd	r24, Z+12	; 0x0c
   12f40:	95 85       	ldd	r25, Z+13	; 0x0d
   12f42:	a6 85       	ldd	r26, Z+14	; 0x0e
   12f44:	b7 85       	ldd	r27, Z+15	; 0x0f
   12f46:	8c 87       	std	Y+12, r24	; 0x0c
   12f48:	9d 87       	std	Y+13, r25	; 0x0d
   12f4a:	ae 87       	std	Y+14, r26	; 0x0e
   12f4c:	bf 87       	std	Y+15, r27	; 0x0f
   12f4e:	80 89       	ldd	r24, Z+16	; 0x10
   12f50:	91 89       	ldd	r25, Z+17	; 0x11
   12f52:	99 8b       	std	Y+17, r25	; 0x11
   12f54:	88 8b       	std	Y+16, r24	; 0x10
   12f56:	82 89       	ldd	r24, Z+18	; 0x12
   12f58:	8a 8b       	std	Y+18, r24	; 0x12
   12f5a:	83 89       	ldd	r24, Z+19	; 0x13
   12f5c:	8b 8b       	std	Y+19, r24	; 0x13
   12f5e:	84 89       	ldd	r24, Z+20	; 0x14
   12f60:	95 89       	ldd	r25, Z+21	; 0x15
   12f62:	9d 8b       	std	Y+21, r25	; 0x15
   12f64:	8c 8b       	std	Y+20, r24	; 0x14
   12f66:	86 89       	ldd	r24, Z+22	; 0x16
   12f68:	97 89       	ldd	r25, Z+23	; 0x17
   12f6a:	9f 8b       	std	Y+23, r25	; 0x17
   12f6c:	8e 8b       	std	Y+22, r24	; 0x16
   12f6e:	80 8d       	ldd	r24, Z+24	; 0x18
   12f70:	91 8d       	ldd	r25, Z+25	; 0x19
   12f72:	99 8f       	std	Y+25, r25	; 0x19
   12f74:	88 8f       	std	Y+24, r24	; 0x18
   12f76:	82 8d       	ldd	r24, Z+26	; 0x1a
   12f78:	93 8d       	ldd	r25, Z+27	; 0x1b
   12f7a:	9b 8f       	std	Y+27, r25	; 0x1b
   12f7c:	8a 8f       	std	Y+26, r24	; 0x1a
   12f7e:	84 8d       	ldd	r24, Z+28	; 0x1c
   12f80:	8c 8f       	std	Y+28, r24	; 0x1c
   12f82:	85 8d       	ldd	r24, Z+29	; 0x1d
   12f84:	8d 8f       	std	Y+29, r24	; 0x1d
   12f86:	87 8d       	ldd	r24, Z+31	; 0x1f
   12f88:	90 a1       	ldd	r25, Z+32	; 0x20
   12f8a:	a1 a1       	ldd	r26, Z+33	; 0x21
   12f8c:	b2 a1       	ldd	r27, Z+34	; 0x22
   12f8e:	8f 8f       	std	Y+31, r24	; 0x1f
   12f90:	98 a3       	std	Y+32, r25	; 0x20
   12f92:	a9 a3       	std	Y+33, r26	; 0x21
   12f94:	ba a3       	std	Y+34, r27	; 0x22
   12f96:	83 a1       	ldd	r24, Z+35	; 0x23
   12f98:	8b a3       	std	Y+35, r24	; 0x23
   12f9a:	84 a1       	ldd	r24, Z+36	; 0x24
   12f9c:	95 a1       	ldd	r25, Z+37	; 0x25
   12f9e:	9d a3       	std	Y+37, r25	; 0x25
   12fa0:	8c a3       	std	Y+36, r24	; 0x24
   12fa2:	86 a1       	ldd	r24, Z+38	; 0x26
   12fa4:	97 a1       	ldd	r25, Z+39	; 0x27
   12fa6:	a0 a5       	ldd	r26, Z+40	; 0x28
   12fa8:	b1 a5       	ldd	r27, Z+41	; 0x29
   12faa:	8e a3       	std	Y+38, r24	; 0x26
   12fac:	9f a3       	std	Y+39, r25	; 0x27
   12fae:	a8 a7       	std	Y+40, r26	; 0x28
   12fb0:	b9 a7       	std	Y+41, r27	; 0x29
   12fb2:	82 a5       	ldd	r24, Z+42	; 0x2a
   12fb4:	8a a7       	std	Y+42, r24	; 0x2a
   12fb6:	df 91       	pop	r29
   12fb8:	cf 91       	pop	r28
   12fba:	1f 91       	pop	r17
   12fbc:	0f 91       	pop	r16
   12fbe:	08 95       	ret

00012fc0 <alloc_device>:
   12fc0:	0f 93       	push	r16
   12fc2:	1f 93       	push	r17
   12fc4:	cf 93       	push	r28
   12fc6:	df 93       	push	r29
   12fc8:	ad b7       	in	r26, 0x3d	; 61
   12fca:	be b7       	in	r27, 0x3e	; 62
   12fcc:	17 97       	sbiw	r26, 0x07	; 7
   12fce:	0f b6       	in	r0, 0x3f	; 63
   12fd0:	f8 94       	cli
   12fd2:	be bf       	out	0x3e, r27	; 62
   12fd4:	0f be       	out	0x3f, r0	; 63
   12fd6:	ad bf       	out	0x3d, r26	; 61
   12fd8:	8c 01       	movw	r16, r24
   12fda:	67 de       	rcall	.-818    	; 0x12caa <find_free>
   12fdc:	ec 01       	movw	r28, r24
   12fde:	cf 3f       	cpi	r28, 0xFF	; 255
   12fe0:	8f ef       	ldi	r24, 0xFF	; 255
   12fe2:	d8 07       	cpc	r29, r24
   12fe4:	89 f4       	brne	.+34     	; 0x13008 <alloc_device+0x48>
   12fe6:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   12fea:	81 ff       	sbrs	r24, 1
   12fec:	a1 c0       	rjmp	.+322    	; 0x13130 <alloc_device+0x170>
   12fee:	ed b7       	in	r30, 0x3d	; 61
   12ff0:	fe b7       	in	r31, 0x3e	; 62
   12ff2:	15 83       	std	Z+5, r17	; 0x05
   12ff4:	04 83       	std	Z+4, r16	; 0x04
   12ff6:	8d e8       	ldi	r24, 0x8D	; 141
   12ff8:	96 e1       	ldi	r25, 0x16	; 22
   12ffa:	a0 e0       	ldi	r26, 0x00	; 0
   12ffc:	81 83       	std	Z+1, r24	; 0x01
   12ffe:	92 83       	std	Z+2, r25	; 0x02
   13000:	a3 83       	std	Z+3, r26	; 0x03
   13002:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   13006:	94 c0       	rjmp	.+296    	; 0x13130 <alloc_device+0x170>
   13008:	02 30       	cpi	r16, 0x02	; 2
   1300a:	11 05       	cpc	r17, r1
   1300c:	e1 f1       	breq	.+120    	; 0x13086 <alloc_device+0xc6>
   1300e:	ec f4       	brge	.+58     	; 0x1304a <alloc_device+0x8a>
   13010:	01 30       	cpi	r16, 0x01	; 1
   13012:	11 05       	cpc	r17, r1
   13014:	09 f0       	breq	.+2      	; 0x13018 <alloc_device+0x58>
   13016:	76 c0       	rjmp	.+236    	; 0x13104 <alloc_device+0x144>
   13018:	8b e2       	ldi	r24, 0x2B	; 43
   1301a:	8c 9f       	mul	r24, r28
   1301c:	80 01       	movw	r16, r0
   1301e:	8d 9f       	mul	r24, r29
   13020:	10 0d       	add	r17, r0
   13022:	11 24       	eor	r1, r1
   13024:	08 54       	subi	r16, 0x48	; 72
   13026:	11 4e       	sbci	r17, 0xE1	; 225
   13028:	81 e0       	ldi	r24, 0x01	; 1
   1302a:	f8 01       	movw	r30, r16
   1302c:	80 83       	st	Z, r24
   1302e:	61 e0       	ldi	r22, 0x01	; 1
   13030:	70 e0       	ldi	r23, 0x00	; 0
   13032:	85 e1       	ldi	r24, 0x15	; 21
   13034:	90 e0       	ldi	r25, 0x00	; 0
   13036:	0e 94 b1 27 	call	0x4f62	; 0x4f62 <safecalloc>
   1303a:	f8 01       	movw	r30, r16
   1303c:	90 a7       	std	Z+40, r25	; 0x28
   1303e:	87 a3       	std	Z+39, r24	; 0x27
   13040:	61 e0       	ldi	r22, 0x01	; 1
   13042:	70 e0       	ldi	r23, 0x00	; 0
   13044:	88 e1       	ldi	r24, 0x18	; 24
   13046:	90 e0       	ldi	r25, 0x00	; 0
   13048:	57 c0       	rjmp	.+174    	; 0x130f8 <alloc_device+0x138>
   1304a:	03 30       	cpi	r16, 0x03	; 3
   1304c:	11 05       	cpc	r17, r1
   1304e:	a1 f1       	breq	.+104    	; 0x130b8 <alloc_device+0xf8>
   13050:	04 30       	cpi	r16, 0x04	; 4
   13052:	11 05       	cpc	r17, r1
   13054:	09 f0       	breq	.+2      	; 0x13058 <alloc_device+0x98>
   13056:	56 c0       	rjmp	.+172    	; 0x13104 <alloc_device+0x144>
   13058:	8b e2       	ldi	r24, 0x2B	; 43
   1305a:	8c 9f       	mul	r24, r28
   1305c:	80 01       	movw	r16, r0
   1305e:	8d 9f       	mul	r24, r29
   13060:	10 0d       	add	r17, r0
   13062:	11 24       	eor	r1, r1
   13064:	08 54       	subi	r16, 0x48	; 72
   13066:	11 4e       	sbci	r17, 0xE1	; 225
   13068:	84 e0       	ldi	r24, 0x04	; 4
   1306a:	f8 01       	movw	r30, r16
   1306c:	80 83       	st	Z, r24
   1306e:	61 e0       	ldi	r22, 0x01	; 1
   13070:	70 e0       	ldi	r23, 0x00	; 0
   13072:	8b e0       	ldi	r24, 0x0B	; 11
   13074:	90 e0       	ldi	r25, 0x00	; 0
   13076:	0e 94 b1 27 	call	0x4f62	; 0x4f62 <safecalloc>
   1307a:	f8 01       	movw	r30, r16
   1307c:	90 a7       	std	Z+40, r25	; 0x28
   1307e:	87 a3       	std	Z+39, r24	; 0x27
   13080:	12 a6       	std	Z+42, r1	; 0x2a
   13082:	11 a6       	std	Z+41, r1	; 0x29
   13084:	55 c0       	rjmp	.+170    	; 0x13130 <alloc_device+0x170>
   13086:	8b e2       	ldi	r24, 0x2B	; 43
   13088:	8c 9f       	mul	r24, r28
   1308a:	80 01       	movw	r16, r0
   1308c:	8d 9f       	mul	r24, r29
   1308e:	10 0d       	add	r17, r0
   13090:	11 24       	eor	r1, r1
   13092:	08 54       	subi	r16, 0x48	; 72
   13094:	11 4e       	sbci	r17, 0xE1	; 225
   13096:	82 e0       	ldi	r24, 0x02	; 2
   13098:	f8 01       	movw	r30, r16
   1309a:	80 83       	st	Z, r24
   1309c:	61 e0       	ldi	r22, 0x01	; 1
   1309e:	70 e0       	ldi	r23, 0x00	; 0
   130a0:	82 e3       	ldi	r24, 0x32	; 50
   130a2:	90 e0       	ldi	r25, 0x00	; 0
   130a4:	0e 94 b1 27 	call	0x4f62	; 0x4f62 <safecalloc>
   130a8:	f8 01       	movw	r30, r16
   130aa:	90 a7       	std	Z+40, r25	; 0x28
   130ac:	87 a3       	std	Z+39, r24	; 0x27
   130ae:	61 e0       	ldi	r22, 0x01	; 1
   130b0:	70 e0       	ldi	r23, 0x00	; 0
   130b2:	86 e1       	ldi	r24, 0x16	; 22
   130b4:	90 e0       	ldi	r25, 0x00	; 0
   130b6:	20 c0       	rjmp	.+64     	; 0x130f8 <alloc_device+0x138>
   130b8:	8b e2       	ldi	r24, 0x2B	; 43
   130ba:	8c 9f       	mul	r24, r28
   130bc:	80 01       	movw	r16, r0
   130be:	8d 9f       	mul	r24, r29
   130c0:	10 0d       	add	r17, r0
   130c2:	11 24       	eor	r1, r1
   130c4:	08 54       	subi	r16, 0x48	; 72
   130c6:	11 4e       	sbci	r17, 0xE1	; 225
   130c8:	83 e0       	ldi	r24, 0x03	; 3
   130ca:	f8 01       	movw	r30, r16
   130cc:	80 83       	st	Z, r24
   130ce:	61 e0       	ldi	r22, 0x01	; 1
   130d0:	70 e0       	ldi	r23, 0x00	; 0
   130d2:	82 e3       	ldi	r24, 0x32	; 50
   130d4:	90 e0       	ldi	r25, 0x00	; 0
   130d6:	0e 94 b1 27 	call	0x4f62	; 0x4f62 <safecalloc>
   130da:	f8 01       	movw	r30, r16
   130dc:	90 a7       	std	Z+40, r25	; 0x28
   130de:	87 a3       	std	Z+39, r24	; 0x27
   130e0:	61 e0       	ldi	r22, 0x01	; 1
   130e2:	70 e0       	ldi	r23, 0x00	; 0
   130e4:	86 e1       	ldi	r24, 0x16	; 22
   130e6:	90 e0       	ldi	r25, 0x00	; 0
   130e8:	0e 94 b1 27 	call	0x4f62	; 0x4f62 <safecalloc>
   130ec:	f8 01       	movw	r30, r16
   130ee:	92 a7       	std	Z+42, r25	; 0x2a
   130f0:	81 a7       	std	Z+41, r24	; 0x29
   130f2:	ce 01       	movw	r24, r28
   130f4:	eb de       	rcall	.-554    	; 0x12ecc <SS80_Set_Defaults>
   130f6:	1c c0       	rjmp	.+56     	; 0x13130 <alloc_device+0x170>
   130f8:	0e 94 b1 27 	call	0x4f62	; 0x4f62 <safecalloc>
   130fc:	f8 01       	movw	r30, r16
   130fe:	92 a7       	std	Z+42, r25	; 0x2a
   13100:	81 a7       	std	Z+41, r24	; 0x29
   13102:	16 c0       	rjmp	.+44     	; 0x13130 <alloc_device+0x170>
   13104:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   13108:	81 ff       	sbrs	r24, 1
   1310a:	10 c0       	rjmp	.+32     	; 0x1312c <alloc_device+0x16c>
   1310c:	c8 01       	movw	r24, r16
   1310e:	b4 dd       	rcall	.-1176   	; 0x12c78 <type_to_str>
   13110:	ed b7       	in	r30, 0x3d	; 61
   13112:	fe b7       	in	r31, 0x3e	; 62
   13114:	97 83       	std	Z+7, r25	; 0x07
   13116:	86 83       	std	Z+6, r24	; 0x06
   13118:	15 83       	std	Z+5, r17	; 0x05
   1311a:	04 83       	std	Z+4, r16	; 0x04
   1311c:	8b e6       	ldi	r24, 0x6B	; 107
   1311e:	96 e1       	ldi	r25, 0x16	; 22
   13120:	a0 e0       	ldi	r26, 0x00	; 0
   13122:	81 83       	std	Z+1, r24	; 0x01
   13124:	92 83       	std	Z+2, r25	; 0x02
   13126:	a3 83       	std	Z+3, r26	; 0x03
   13128:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   1312c:	cf ef       	ldi	r28, 0xFF	; 255
   1312e:	df ef       	ldi	r29, 0xFF	; 255
   13130:	ce 01       	movw	r24, r28
   13132:	cd b7       	in	r28, 0x3d	; 61
   13134:	de b7       	in	r29, 0x3e	; 62
   13136:	27 96       	adiw	r28, 0x07	; 7
   13138:	e4 e0       	ldi	r30, 0x04	; 4
   1313a:	0c 94 08 e0 	jmp	0x1c010	; 0x1c010 <__epilogue_restores__+0x1c>

0001313e <init_Devices>:
   1313e:	cf 93       	push	r28
   13140:	df 93       	push	r29
   13142:	10 92 42 19 	sts	0x1942, r1	; 0x801942 <stack_ind+0x1>
   13146:	10 92 41 19 	sts	0x1941, r1	; 0x801941 <stack_ind>
   1314a:	e8 eb       	ldi	r30, 0xB8	; 184
   1314c:	fe e1       	ldi	r31, 0x1E	; 30
   1314e:	9f ef       	ldi	r25, 0xFF	; 255
   13150:	80 e2       	ldi	r24, 0x20	; 32
   13152:	10 82       	st	Z, r1
   13154:	11 82       	std	Z+1, r1	; 0x01
   13156:	92 83       	std	Z+2, r25	; 0x02
   13158:	13 82       	std	Z+3, r1	; 0x03
   1315a:	14 82       	std	Z+4, r1	; 0x04
   1315c:	15 82       	std	Z+5, r1	; 0x05
   1315e:	16 82       	std	Z+6, r1	; 0x06
   13160:	df 01       	movw	r26, r30
   13162:	17 96       	adiw	r26, 0x07	; 7
   13164:	ed 01       	movw	r28, r26
   13166:	28 2f       	mov	r18, r24
   13168:	19 92       	st	Y+, r1
   1316a:	2a 95       	dec	r18
   1316c:	e9 f7       	brne	.-6      	; 0x13168 <init_Devices+0x2a>
   1316e:	10 a6       	std	Z+40, r1	; 0x28
   13170:	17 a2       	std	Z+39, r1	; 0x27
   13172:	12 a6       	std	Z+42, r1	; 0x2a
   13174:	11 a6       	std	Z+41, r1	; 0x29
   13176:	bb 96       	adiw	r30, 0x2b	; 43
   13178:	c0 e2       	ldi	r28, 0x20	; 32
   1317a:	ec 3b       	cpi	r30, 0xBC	; 188
   1317c:	fc 07       	cpc	r31, r28
   1317e:	49 f7       	brne	.-46     	; 0x13152 <init_Devices+0x14>
   13180:	df 91       	pop	r29
   13182:	cf 91       	pop	r28
   13184:	08 95       	ret

00013186 <push_state>:
   13186:	20 91 41 19 	lds	r18, 0x1941	; 0x801941 <stack_ind>
   1318a:	30 91 42 19 	lds	r19, 0x1942	; 0x801942 <stack_ind+0x1>
   1318e:	25 30       	cpi	r18, 0x05	; 5
   13190:	31 05       	cpc	r19, r1
   13192:	7c f4       	brge	.+30     	; 0x131b2 <push_state+0x2c>
   13194:	a9 01       	movw	r20, r18
   13196:	4f 5f       	subi	r20, 0xFF	; 255
   13198:	5f 4f       	sbci	r21, 0xFF	; 255
   1319a:	50 93 42 19 	sts	0x1942, r21	; 0x801942 <stack_ind+0x1>
   1319e:	40 93 41 19 	sts	0x1941, r20	; 0x801941 <stack_ind>
   131a2:	22 0f       	add	r18, r18
   131a4:	33 1f       	adc	r19, r19
   131a6:	f9 01       	movw	r30, r18
   131a8:	e9 5c       	subi	r30, 0xC9	; 201
   131aa:	f6 4e       	sbci	r31, 0xE6	; 230
   131ac:	80 83       	st	Z, r24
   131ae:	91 83       	std	Z+1, r25	; 0x01
   131b0:	08 95       	ret
   131b2:	80 e0       	ldi	r24, 0x00	; 0
   131b4:	90 e0       	ldi	r25, 0x00	; 0
   131b6:	08 95       	ret

000131b8 <pop_state>:
   131b8:	80 91 41 19 	lds	r24, 0x1941	; 0x801941 <stack_ind>
   131bc:	90 91 42 19 	lds	r25, 0x1942	; 0x801942 <stack_ind+0x1>
   131c0:	18 16       	cp	r1, r24
   131c2:	19 06       	cpc	r1, r25
   131c4:	6c f4       	brge	.+26     	; 0x131e0 <pop_state+0x28>
   131c6:	01 97       	sbiw	r24, 0x01	; 1
   131c8:	90 93 42 19 	sts	0x1942, r25	; 0x801942 <stack_ind+0x1>
   131cc:	80 93 41 19 	sts	0x1941, r24	; 0x801941 <stack_ind>
   131d0:	88 0f       	add	r24, r24
   131d2:	99 1f       	adc	r25, r25
   131d4:	fc 01       	movw	r30, r24
   131d6:	e9 5c       	subi	r30, 0xC9	; 201
   131d8:	f6 4e       	sbci	r31, 0xE6	; 230
   131da:	80 81       	ld	r24, Z
   131dc:	91 81       	ldd	r25, Z+1	; 0x01
   131de:	08 95       	ret
   131e0:	80 e0       	ldi	r24, 0x00	; 0
   131e2:	90 e0       	ldi	r25, 0x00	; 0
   131e4:	08 95       	ret

000131e6 <set_Config_Defaults>:
   131e6:	08 95       	ret

000131e8 <hpdir_set_device>:
///
///@param[in] model: model string
///
///@return 1 on sucess or 0 on fail
void hpdir_set_device(int index)
{
   131e8:	0f 93       	push	r16
   131ea:	1f 93       	push	r17
   131ec:	cf 93       	push	r28
   131ee:	df 93       	push	r29
   131f0:	00 d0       	rcall	.+0      	; 0x131f2 <hpdir_set_device+0xa>
   131f2:	1f 92       	push	r1
	if(Devices[index].TYPE == SS80_TYPE)
   131f4:	2b e2       	ldi	r18, 0x2B	; 43
   131f6:	ac 01       	movw	r20, r24
   131f8:	24 9f       	mul	r18, r20
   131fa:	c0 01       	movw	r24, r0
   131fc:	25 9f       	mul	r18, r21
   131fe:	90 0d       	add	r25, r0
   13200:	11 24       	eor	r1, r1
   13202:	ec 01       	movw	r28, r24
   13204:	c8 54       	subi	r28, 0x48	; 72
   13206:	d1 4e       	sbci	r29, 0xE1	; 225
   13208:	28 81       	ld	r18, Y
   1320a:	23 30       	cpi	r18, 0x03	; 3
   1320c:	a1 f5       	brne	.+104    	; 0x13276 <hpdir_set_device+0x8e>
	{
		SS80DiskType *SS80p = (SS80DiskType *) Devices[index].dev;
   1320e:	ef a1       	ldd	r30, Y+39	; 0x27
   13210:	f8 a5       	ldd	r31, Y+40	; 0x28
		SS80p->CONFIG.ID 				= hpdir.ID;
   13212:	20 91 3c 21 	lds	r18, 0x213C	; 0x80213c <hpdir+0x80>
   13216:	30 91 3d 21 	lds	r19, 0x213D	; 0x80213d <hpdir+0x81>
   1321a:	35 83       	std	Z+5, r19	; 0x05
   1321c:	24 83       	std	Z+4, r18	; 0x04
		SS80p->UNIT.DEVICE_NUMBER 		= hpdir.DEVICE_NUMBER;
   1321e:	40 91 48 21 	lds	r20, 0x2148	; 0x802148 <hpdir+0x8c>
   13222:	50 91 49 21 	lds	r21, 0x2149	; 0x802149 <hpdir+0x8d>
   13226:	60 91 4a 21 	lds	r22, 0x214A	; 0x80214a <hpdir+0x8e>
   1322a:	70 91 4b 21 	lds	r23, 0x214B	; 0x80214b <hpdir+0x8f>
   1322e:	44 87       	std	Z+12, r20	; 0x0c
   13230:	55 87       	std	Z+13, r21	; 0x0d
   13232:	66 87       	std	Z+14, r22	; 0x0e
   13234:	77 87       	std	Z+15, r23	; 0x0f
		SS80p->UNIT.BYTES_PER_BLOCK 	= hpdir.BYTES_PER_SECTOR;
   13236:	20 91 5c 21 	lds	r18, 0x215C	; 0x80215c <hpdir+0xa0>
   1323a:	30 91 5d 21 	lds	r19, 0x215D	; 0x80215d <hpdir+0xa1>
   1323e:	31 8b       	std	Z+17, r19	; 0x11
   13240:	20 8b       	std	Z+16, r18	; 0x10

		// CHS NOT used in this emulator!
		SS80p->VOLUME.MAX_CYLINDER 		= 0;	// hpdir.CYLINDERS-1;
   13242:	17 8e       	std	Z+31, r1	; 0x1f
   13244:	10 a2       	std	Z+32, r1	; 0x20
   13246:	11 a2       	std	Z+33, r1	; 0x21
   13248:	12 a2       	std	Z+34, r1	; 0x22
		SS80p->VOLUME.MAX_HEAD 			= 0;	// hpdir.HEADS-1;
   1324a:	13 a2       	std	Z+35, r1	; 0x23
		SS80p->VOLUME.MAX_SECTOR 		= 0;	// hpdir.SECTORS-1;
   1324c:	15 a2       	std	Z+37, r1	; 0x25
   1324e:	14 a2       	std	Z+36, r1	; 0x24

		SS80p->VOLUME.MAX_BLOCK_NUMBER 	= hpdir.BLOCKS-1;
   13250:	40 91 68 21 	lds	r20, 0x2168	; 0x802168 <hpdir+0xac>
   13254:	50 91 69 21 	lds	r21, 0x2169	; 0x802169 <hpdir+0xad>
   13258:	60 91 6a 21 	lds	r22, 0x216A	; 0x80216a <hpdir+0xae>
   1325c:	70 91 6b 21 	lds	r23, 0x216B	; 0x80216b <hpdir+0xaf>
   13260:	8a 01       	movw	r16, r20
   13262:	9b 01       	movw	r18, r22
   13264:	01 50       	subi	r16, 0x01	; 1
   13266:	11 09       	sbc	r17, r1
   13268:	21 09       	sbc	r18, r1
   1326a:	31 09       	sbc	r19, r1
   1326c:	06 a3       	std	Z+38, r16	; 0x26
   1326e:	17 a3       	std	Z+39, r17	; 0x27
   13270:	20 a7       	std	Z+40, r18	; 0x28
   13272:	31 a7       	std	Z+41, r19	; 0x29
   13274:	2a c0       	rjmp	.+84     	; 0x132ca <hpdir_set_device+0xe2>
		Devices[index].BLOCKS = hpdir.BLOCKS;
		strncpy(Devices[index].model, hpdir.model, sizeof(Devices[index].model) -2);
	}

#ifdef AMIGO
	else if(Devices[index].TYPE == AMIGO_TYPE)
   13276:	21 30       	cpi	r18, 0x01	; 1
   13278:	a9 f5       	brne	.+106    	; 0x132e4 <hpdir_set_device+0xfc>
	{
		AMIGODiskType *AMIGOp = (AMIGODiskType *) Devices[index].dev;
   1327a:	ef a1       	ldd	r30, Y+39	; 0x27
   1327c:	f8 a5       	ldd	r31, Y+40	; 0x28
		AMIGOp->CONFIG.ID = hpdir.ID;
   1327e:	20 91 3c 21 	lds	r18, 0x213C	; 0x80213c <hpdir+0x80>
   13282:	30 91 3d 21 	lds	r19, 0x213D	; 0x80213d <hpdir+0x81>
   13286:	35 83       	std	Z+5, r19	; 0x05
   13288:	24 83       	std	Z+4, r18	; 0x04
		AMIGOp->GEOMETRY.BYTES_PER_SECTOR = hpdir.BYTES_PER_SECTOR;
   1328a:	20 91 5c 21 	lds	r18, 0x215C	; 0x80215c <hpdir+0xa0>
   1328e:	30 91 5d 21 	lds	r19, 0x215D	; 0x80215d <hpdir+0xa1>
   13292:	37 83       	std	Z+7, r19	; 0x07
   13294:	26 83       	std	Z+6, r18	; 0x06
		AMIGOp->GEOMETRY.SECTORS_PER_TRACK = hpdir.SECTORS;
   13296:	20 91 58 21 	lds	r18, 0x2158	; 0x802158 <hpdir+0x9c>
   1329a:	30 91 59 21 	lds	r19, 0x2159	; 0x802159 <hpdir+0x9d>
   1329e:	31 87       	std	Z+9, r19	; 0x09
   132a0:	20 87       	std	Z+8, r18	; 0x08
		AMIGOp->GEOMETRY.HEADS = hpdir.HEADS;
   132a2:	20 91 54 21 	lds	r18, 0x2154	; 0x802154 <hpdir+0x98>
   132a6:	30 91 55 21 	lds	r19, 0x2155	; 0x802155 <hpdir+0x99>
   132aa:	33 87       	std	Z+11, r19	; 0x0b
   132ac:	22 87       	std	Z+10, r18	; 0x0a
		AMIGOp->GEOMETRY.CYLINDERS = hpdir.CYLINDERS;
   132ae:	20 91 50 21 	lds	r18, 0x2150	; 0x802150 <hpdir+0x94>
   132b2:	30 91 51 21 	lds	r19, 0x2151	; 0x802151 <hpdir+0x95>
   132b6:	35 87       	std	Z+13, r19	; 0x0d
   132b8:	24 87       	std	Z+12, r18	; 0x0c
		Devices[index].BLOCKS = hpdir.BLOCKS;
   132ba:	40 91 68 21 	lds	r20, 0x2168	; 0x802168 <hpdir+0xac>
   132be:	50 91 69 21 	lds	r21, 0x2169	; 0x802169 <hpdir+0xad>
   132c2:	60 91 6a 21 	lds	r22, 0x216A	; 0x80216a <hpdir+0xae>
   132c6:	70 91 6b 21 	lds	r23, 0x216B	; 0x80216b <hpdir+0xaf>
   132ca:	4b 83       	std	Y+3, r20	; 0x03
   132cc:	5c 83       	std	Y+4, r21	; 0x04
   132ce:	6d 83       	std	Y+5, r22	; 0x05
   132d0:	7e 83       	std	Y+6, r23	; 0x06
		strncpy(Devices[index].model, hpdir.model, sizeof(Devices[index].model) -2);
   132d2:	4e e1       	ldi	r20, 0x1E	; 30
   132d4:	50 e0       	ldi	r21, 0x00	; 0
   132d6:	6c eb       	ldi	r22, 0xBC	; 188
   132d8:	70 e2       	ldi	r23, 0x20	; 32
   132da:	81 54       	subi	r24, 0x41	; 65
   132dc:	91 4e       	sbci	r25, 0xE1	; 225
   132de:	0e 94 a8 30 	call	0x6150	; 0x6150 <strncpy>
   132e2:	0a c0       	rjmp	.+20     	; 0x132f8 <hpdir_set_device+0x110>
	}
#endif
	else
	{
		printf("hpdir_parameters invalid TYPE\n");
   132e4:	8c e4       	ldi	r24, 0x4C	; 76
   132e6:	96 e1       	ldi	r25, 0x16	; 22
   132e8:	a0 e0       	ldi	r26, 0x00	; 0
   132ea:	ed b7       	in	r30, 0x3d	; 61
   132ec:	fe b7       	in	r31, 0x3e	; 62
   132ee:	81 83       	std	Z+1, r24	; 0x01
   132f0:	92 83       	std	Z+2, r25	; 0x02
   132f2:	a3 83       	std	Z+3, r26	; 0x03
   132f4:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
	}

}
   132f8:	cd b7       	in	r28, 0x3d	; 61
   132fa:	de b7       	in	r29, 0x3e	; 62
   132fc:	23 96       	adiw	r28, 0x03	; 3
   132fe:	e4 e0       	ldi	r30, 0x04	; 4
   13300:	0c 94 08 e0 	jmp	0x1c010	; 0x1c010 <__epilogue_restores__+0x1c>

00013304 <hpdir_set_parameters>:
///@param[in] index: Devices index
///@param[in] model: model string
///
///@return void
void hpdir_set_parameters(int index, char *model)
{
   13304:	cf 93       	push	r28
   13306:	df 93       	push	r29
   13308:	ec 01       	movw	r28, r24
   1330a:	cb 01       	movw	r24, r22
	if ( hpdir_find_drive( model, 0 ,1) )
   1330c:	41 e0       	ldi	r20, 0x01	; 1
   1330e:	50 e0       	ldi	r21, 0x00	; 0
   13310:	60 e0       	ldi	r22, 0x00	; 0
   13312:	70 e0       	ldi	r23, 0x00	; 0
   13314:	d9 d6       	rcall	.+3506   	; 0x140c8 <hpdir_find_drive>
   13316:	89 2b       	or	r24, r25
		hpdir_set_device(index);
   13318:	11 f0       	breq	.+4      	; 0x1331e <hpdir_set_parameters+0x1a>
   1331a:	ce 01       	movw	r24, r28
}
   1331c:	65 df       	rcall	.-310    	; 0x131e8 <hpdir_set_device>
   1331e:	df 91       	pop	r29
   13320:	cf 91       	pop	r28
   13322:	08 95       	ret

00013324 <Post_Config>:

/// ===============================================
/// @brief Post Process COnfiguration file after reading
/// @return  void
void Post_Config()
{
   13324:	4f 92       	push	r4
   13326:	5f 92       	push	r5
   13328:	6f 92       	push	r6
   1332a:	7f 92       	push	r7
   1332c:	8f 92       	push	r8
   1332e:	af 92       	push	r10
   13330:	bf 92       	push	r11
   13332:	cf 92       	push	r12
   13334:	df 92       	push	r13
   13336:	ef 92       	push	r14
   13338:	0f 93       	push	r16
   1333a:	1f 93       	push	r17
   1333c:	cf 93       	push	r28
   1333e:	df 93       	push	r29
   13340:	00 d0       	rcall	.+0      	; 0x13342 <Post_Config+0x1e>
   13342:	00 d0       	rcall	.+0      	; 0x13344 <Post_Config+0x20>
   13344:	1f 92       	push	r1
   13346:	c8 eb       	ldi	r28, 0xB8	; 184
   13348:	de e1       	ldi	r29, 0x1E	; 30
   1334a:	8c eb       	ldi	r24, 0xBC	; 188
   1334c:	48 2e       	mov	r4, r24
   1334e:	80 e2       	ldi	r24, 0x20	; 32
   13350:	58 2e       	mov	r5, r24
        if(Devices[i].TYPE == AMIGO_TYPE )
        {
            AMIGOp = (AMIGODiskType *)Devices[i].dev;
			if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
			{
				AMIGOp->GEOMETRY.BYTES_PER_SECTOR = 256;
   13352:	a1 2c       	mov	r10, r1
   13354:	bb 24       	eor	r11, r11
   13356:	b3 94       	inc	r11
				printf("Warning: %s BYTES_PER_SECTOR != 256, Adjusting to 256\n", Devices[i].model);
   13358:	8f ed       	ldi	r24, 0xDF	; 223
   1335a:	95 e1       	ldi	r25, 0x15	; 21
   1335c:	6c 01       	movw	r12, r24
   1335e:	e1 2c       	mov	r14, r1
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
			if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
			{
				// SS80p->UNIT.BYTES_PER_BLOCK = 256;
				printf("Warning: %s BYTES_PER_BLOCK != 256, Adjusting to 256\n", Devices[i].model);
   13360:	86 e1       	ldi	r24, 0x16	; 22
   13362:	96 e1       	ldi	r25, 0x16	; 22
   13364:	3c 01       	movw	r6, r24
   13366:	81 2c       	mov	r8, r1
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   13368:	88 81       	ld	r24, Y
   1336a:	88 23       	and	r24, r24
   1336c:	09 f4       	brne	.+2      	; 0x13370 <Post_Config+0x4c>
   1336e:	57 c0       	rjmp	.+174    	; 0x1341e <Post_Config+0xfa>
            continue;

        if(Devices[i].TYPE == SS80_TYPE)
   13370:	83 30       	cpi	r24, 0x03	; 3
   13372:	f9 f4       	brne	.+62     	; 0x133b2 <Post_Config+0x8e>
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
   13374:	0f a1       	ldd	r16, Y+39	; 0x27
   13376:	18 a5       	ldd	r17, Y+40	; 0x28
			if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
   13378:	f8 01       	movw	r30, r16
   1337a:	80 89       	ldd	r24, Z+16	; 0x10
   1337c:	91 89       	ldd	r25, Z+17	; 0x11
   1337e:	81 15       	cp	r24, r1
   13380:	91 40       	sbci	r25, 0x01	; 1
   13382:	59 f0       	breq	.+22     	; 0x1339a <Post_Config+0x76>
			{
				// SS80p->UNIT.BYTES_PER_BLOCK = 256;
				printf("Warning: %s BYTES_PER_BLOCK != 256, Adjusting to 256\n", Devices[i].model);
   13384:	ce 01       	movw	r24, r28
   13386:	07 96       	adiw	r24, 0x07	; 7
   13388:	ed b7       	in	r30, 0x3d	; 61
   1338a:	fe b7       	in	r31, 0x3e	; 62
   1338c:	95 83       	std	Z+5, r25	; 0x05
   1338e:	84 83       	std	Z+4, r24	; 0x04
   13390:	61 82       	std	Z+1, r6	; 0x01
   13392:	72 82       	std	Z+2, r7	; 0x02
   13394:	83 82       	std	Z+3, r8	; 0x03
   13396:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
			}
			sectors = SS80p->VOLUME.MAX_BLOCK_NUMBER+1;
			Devices[i].BLOCKS = sectors;
   1339a:	f8 01       	movw	r30, r16
   1339c:	86 a1       	ldd	r24, Z+38	; 0x26
   1339e:	97 a1       	ldd	r25, Z+39	; 0x27
   133a0:	a0 a5       	ldd	r26, Z+40	; 0x28
   133a2:	b1 a5       	ldd	r27, Z+41	; 0x29
   133a4:	01 96       	adiw	r24, 0x01	; 1
   133a6:	a1 1d       	adc	r26, r1
   133a8:	b1 1d       	adc	r27, r1
   133aa:	8b 83       	std	Y+3, r24	; 0x03
   133ac:	9c 83       	std	Y+4, r25	; 0x04
   133ae:	ad 83       	std	Y+5, r26	; 0x05
   133b0:	be 83       	std	Y+6, r27	; 0x06
        } // SS80_TYPE

#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   133b2:	88 81       	ld	r24, Y
   133b4:	81 30       	cpi	r24, 0x01	; 1
   133b6:	99 f5       	brne	.+102    	; 0x1341e <Post_Config+0xfa>
        {
            AMIGOp = (AMIGODiskType *)Devices[i].dev;
   133b8:	0f a1       	ldd	r16, Y+39	; 0x27
   133ba:	18 a5       	ldd	r17, Y+40	; 0x28
			if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
   133bc:	f8 01       	movw	r30, r16
   133be:	86 81       	ldd	r24, Z+6	; 0x06
   133c0:	97 81       	ldd	r25, Z+7	; 0x07
   133c2:	81 15       	cp	r24, r1
   133c4:	91 40       	sbci	r25, 0x01	; 1
   133c6:	71 f0       	breq	.+28     	; 0x133e4 <Post_Config+0xc0>
			{
				AMIGOp->GEOMETRY.BYTES_PER_SECTOR = 256;
   133c8:	f8 01       	movw	r30, r16
   133ca:	b7 82       	std	Z+7, r11	; 0x07
   133cc:	a6 82       	std	Z+6, r10	; 0x06
				printf("Warning: %s BYTES_PER_SECTOR != 256, Adjusting to 256\n", Devices[i].model);
   133ce:	ce 01       	movw	r24, r28
   133d0:	07 96       	adiw	r24, 0x07	; 7
   133d2:	ed b7       	in	r30, 0x3d	; 61
   133d4:	fe b7       	in	r31, 0x3e	; 62
   133d6:	95 83       	std	Z+5, r25	; 0x05
   133d8:	84 83       	std	Z+4, r24	; 0x04
   133da:	c1 82       	std	Z+1, r12	; 0x01
   133dc:	d2 82       	std	Z+2, r13	; 0x02
   133de:	e3 82       	std	Z+3, r14	; 0x03
   133e0:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
			}
			sectors = AMIGOp->GEOMETRY.SECTORS_PER_TRACK
				 * AMIGOp->GEOMETRY.HEADS
				 * AMIGOp->GEOMETRY.CYLINDERS;
			Devices[i].BLOCKS = sectors;
   133e4:	f8 01       	movw	r30, r16
   133e6:	20 85       	ldd	r18, Z+8	; 0x08
   133e8:	31 85       	ldd	r19, Z+9	; 0x09
   133ea:	82 85       	ldd	r24, Z+10	; 0x0a
   133ec:	93 85       	ldd	r25, Z+11	; 0x0b
   133ee:	28 9f       	mul	r18, r24
   133f0:	a0 01       	movw	r20, r0
   133f2:	29 9f       	mul	r18, r25
   133f4:	50 0d       	add	r21, r0
   133f6:	38 9f       	mul	r19, r24
   133f8:	50 0d       	add	r21, r0
   133fa:	11 24       	eor	r1, r1
   133fc:	24 85       	ldd	r18, Z+12	; 0x0c
   133fe:	35 85       	ldd	r19, Z+13	; 0x0d
   13400:	42 9f       	mul	r20, r18
   13402:	c0 01       	movw	r24, r0
   13404:	43 9f       	mul	r20, r19
   13406:	90 0d       	add	r25, r0
   13408:	52 9f       	mul	r21, r18
   1340a:	90 0d       	add	r25, r0
   1340c:	11 24       	eor	r1, r1
   1340e:	09 2e       	mov	r0, r25
   13410:	00 0c       	add	r0, r0
   13412:	aa 0b       	sbc	r26, r26
   13414:	bb 0b       	sbc	r27, r27
   13416:	8b 83       	std	Y+3, r24	; 0x03
   13418:	9c 83       	std	Y+4, r25	; 0x04
   1341a:	ad 83       	std	Y+5, r26	; 0x05
   1341c:	be 83       	std	Y+6, r27	; 0x06
   1341e:	ab 96       	adiw	r28, 0x2b	; 43
#ifdef AMIGO
    ///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
   13420:	4c 16       	cp	r4, r28
   13422:	5d 06       	cpc	r5, r29
   13424:	09 f0       	breq	.+2      	; 0x13428 <Post_Config+0x104>
   13426:	a0 cf       	rjmp	.-192    	; 0x13368 <Post_Config+0x44>
				 * AMIGOp->GEOMETRY.CYLINDERS;
			Devices[i].BLOCKS = sectors;
        } 
#endif // #ifdef AMIGO
    }
}
   13428:	0f 90       	pop	r0
   1342a:	0f 90       	pop	r0
   1342c:	0f 90       	pop	r0
   1342e:	0f 90       	pop	r0
   13430:	0f 90       	pop	r0
   13432:	df 91       	pop	r29
   13434:	cf 91       	pop	r28
   13436:	1f 91       	pop	r17
   13438:	0f 91       	pop	r16
   1343a:	ef 90       	pop	r14
   1343c:	df 90       	pop	r13
   1343e:	cf 90       	pop	r12
   13440:	bf 90       	pop	r11
   13442:	af 90       	pop	r10
   13444:	8f 90       	pop	r8
   13446:	7f 90       	pop	r7
   13448:	6f 90       	pop	r6
   1344a:	5f 90       	pop	r5
   1344c:	4f 90       	pop	r4
   1344e:	08 95       	ret

00013450 <Read_Config>:
/// Set all drive parameters and debuglevel 
///
/// @param name: config file name to process
/// @return  number of parse errors
int Read_Config(char *name)
{
   13450:	af e1       	ldi	r26, 0x1F	; 31
   13452:	b1 e0       	ldi	r27, 0x01	; 1
   13454:	ee e2       	ldi	r30, 0x2E	; 46
   13456:	fa e9       	ldi	r31, 0x9A	; 154
   13458:	0c 94 de df 	jmp	0x1bfbc	; 0x1bfbc <__prologue_saves__>
    int lines = 0;

    char str[128];
    char token[128];

    init_Devices();
   1345c:	8c 01       	movw	r16, r24


    printf("Reading: %s\n", name);
   1345e:	6f de       	rcall	.-802    	; 0x1313e <init_Devices>
   13460:	ed b7       	in	r30, 0x3d	; 61
   13462:	fe b7       	in	r31, 0x3e	; 62
   13464:	15 83       	std	Z+5, r17	; 0x05
   13466:	04 83       	std	Z+4, r16	; 0x04
   13468:	82 ec       	ldi	r24, 0xC2	; 194
   1346a:	9b e1       	ldi	r25, 0x1B	; 27
   1346c:	a0 e0       	ldi	r26, 0x00	; 0
   1346e:	81 83       	std	Z+1, r24	; 0x01
   13470:	92 83       	std	Z+2, r25	; 0x02
   13472:	a3 83       	std	Z+3, r26	; 0x03
   13474:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    cfg = fopen(name, "rb");
   13478:	60 ed       	ldi	r22, 0xD0	; 208
   1347a:	78 e0       	ldi	r23, 0x08	; 8
   1347c:	c8 01       	movw	r24, r16
   1347e:	0e 94 7c 7d 	call	0xfaf8	; 0xfaf8 <fopen>
   13482:	c4 5f       	subi	r28, 0xF4	; 244
   13484:	de 4f       	sbci	r29, 0xFE	; 254
   13486:	99 83       	std	Y+1, r25	; 0x01
   13488:	88 83       	st	Y, r24
   1348a:	cc 50       	subi	r28, 0x0C	; 12
    if(cfg == NULL)
   1348c:	d1 40       	sbci	r29, 0x01	; 1
   1348e:	89 2b       	or	r24, r25
   13490:	09 f4       	brne	.+2      	; 0x13494 <Read_Config+0x44>
   13492:	59 c0       	rjmp	.+178    	; 0x13546 <Read_Config+0xf6>
   13494:	41 2c       	mov	r4, r1
   13496:	51 2c       	mov	r5, r1
   13498:	c1 2c       	mov	r12, r1
   1349a:	d1 2c       	mov	r13, r1
   1349c:	c8 5f       	subi	r28, 0xF8	; 248
   1349e:	de 4f       	sbci	r29, 0xFE	; 254
   134a0:	19 82       	std	Y+1, r1	; 0x01
   134a2:	18 82       	st	Y, r1
   134a4:	c8 50       	subi	r28, 0x08	; 8
   134a6:	d1 40       	sbci	r29, 0x01	; 1
   134a8:	61 2c       	mov	r6, r1
   134aa:	71 2c       	mov	r7, r1
   134ac:	c6 5f       	subi	r28, 0xF6	; 246
   134ae:	de 4f       	sbci	r29, 0xFE	; 254
   134b0:	19 82       	std	Y+1, r1	; 0x01
   134b2:	18 82       	st	Y, r1
   134b4:	ca 50       	subi	r28, 0x0A	; 10
   134b6:	d1 40       	sbci	r29, 0x01	; 1
   134b8:	e1 2c       	mov	r14, r1
   134ba:	f1 2c       	mov	r15, r1
   134bc:	21 2c       	mov	r2, r1
					break;
            }
            break;
#endif // #ifdef AMIGO
        default:
            printf("Unexpected STATE: %s, at line:%d\n", ptr,lines);
   134be:	31 2c       	mov	r3, r1
   134c0:	81 e1       	ldi	r24, 0x11	; 17
   134c2:	99 e1       	ldi	r25, 0x19	; 25
   134c4:	9c 01       	movw	r18, r24
   134c6:	40 e0       	ldi	r20, 0x00	; 0
   134c8:	c2 5f       	subi	r28, 0xF2	; 242
   134ca:	de 4f       	sbci	r29, 0xFE	; 254
   134cc:	28 83       	st	Y, r18
   134ce:	39 83       	std	Y+1, r19	; 0x01
   134d0:	4a 83       	std	Y+2, r20	; 0x02
   134d2:	ce 50       	subi	r28, 0x0E	; 14
					break;
            	case TOK_CYLINDERS:
					AMIGOp->GEOMETRY.CYLINDERS = val.w;
					break;
            	default:
					printf("Unexpected AMIGO GEMETRY token: %s, at line:%d\n", ptr,lines);
   134d4:	d1 40       	sbci	r29, 0x01	; 1
   134d6:	83 e3       	ldi	r24, 0x33	; 51
   134d8:	99 e1       	ldi	r25, 0x19	; 25
   134da:	9c 01       	movw	r18, r24
   134dc:	40 e0       	ldi	r20, 0x00	; 0
   134de:	cf 5e       	subi	r28, 0xEF	; 239
   134e0:	de 4f       	sbci	r29, 0xFE	; 254
   134e2:	28 83       	st	Y, r18
   134e4:	39 83       	std	Y+1, r19	; 0x01
   134e6:	4a 83       	std	Y+2, r20	; 0x02
   134e8:	c1 51       	subi	r28, 0x11	; 17
			{
                AMIGOp->CONFIG.ID = val.w;
			}
            else
            {
                printf("Unexpected AMIGO CONFIG token: %s, at line:%d\n", ptr,lines);
   134ea:	d1 40       	sbci	r29, 0x01	; 1
   134ec:	83 e6       	ldi	r24, 0x63	; 99
   134ee:	99 e1       	ldi	r25, 0x19	; 25
   134f0:	9c 01       	movw	r18, r24
   134f2:	40 e0       	ldi	r20, 0x00	; 0
   134f4:	cc 5e       	subi	r28, 0xEC	; 236
   134f6:	de 4f       	sbci	r29, 0xFE	; 254
   134f8:	28 83       	st	Y, r18
   134fa:	39 83       	std	Y+1, r19	; 0x01
   134fc:	4a 83       	std	Y+2, r20	; 0x02
   134fe:	c4 51       	subi	r28, 0x14	; 20
					break;
            	case TOK_FILE:
					AMIGOp->HEADER.NAME = stralloc(token);
					break;
				default:
					printf("Unexpected HEADER CONFIG token: %s, at line:%d\n", ptr,lines);
   13500:	d1 40       	sbci	r29, 0x01	; 1
   13502:	82 e9       	ldi	r24, 0x92	; 146
   13504:	99 e1       	ldi	r25, 0x19	; 25
   13506:	9c 01       	movw	r18, r24
   13508:	40 e0       	ldi	r20, 0x00	; 0
   1350a:	c9 5e       	subi	r28, 0xE9	; 233
   1350c:	de 4f       	sbci	r29, 0xFE	; 254
   1350e:	28 83       	st	Y, r18
   13510:	39 83       	std	Y+1, r19	; 0x01
   13512:	4a 83       	std	Y+2, r20	; 0x02
   13514:	c7 51       	subi	r28, 0x17	; 23
            	case TOK_GEOMETRY:
					push_state(state);
					state = AMIGO_GEOMETRY;
					break;
            	default:
					printf("Unexpected AMIGO START token: %s, at line:%d\n", ptr,lines);
   13516:	d1 40       	sbci	r29, 0x01	; 1
   13518:	82 ec       	ldi	r24, 0xC2	; 194
   1351a:	99 e1       	ldi	r25, 0x19	; 25
   1351c:	9c 01       	movw	r18, r24
   1351e:	40 e0       	ldi	r20, 0x00	; 0
   13520:	c6 5e       	subi	r28, 0xE6	; 230
   13522:	de 4f       	sbci	r29, 0xFE	; 254
   13524:	28 83       	st	Y, r18
   13526:	39 83       	std	Y+1, r19	; 0x01
   13528:	4a 83       	std	Y+2, r20	; 0x02
   1352a:	ca 51       	subi	r28, 0x1A	; 26
					break;
            	case TOK_INTERLEAVE:
					SS80p->VOLUME.INTERLEAVE = val.b;
					break;
				default:
					printf("Unexpected SS80 VOLUME token: %s, at line:%d\n", ptr,lines);
   1352c:	d1 40       	sbci	r29, 0x01	; 1
   1352e:	80 ef       	ldi	r24, 0xF0	; 240
   13530:	99 e1       	ldi	r25, 0x19	; 25
   13532:	9c 01       	movw	r18, r24
   13534:	40 e0       	ldi	r20, 0x00	; 0
   13536:	c3 5e       	subi	r28, 0xE3	; 227
   13538:	de 4f       	sbci	r29, 0xFE	; 254
   1353a:	28 83       	st	Y, r18
   1353c:	39 83       	std	Y+1, r19	; 0x01
   1353e:	4a 83       	std	Y+2, r20	; 0x02
   13540:	cd 51       	subi	r28, 0x1D	; 29
   13542:	d1 40       	sbci	r29, 0x01	; 1
    cfg = fopen(name, "rb");
    if(cfg == NULL)
    {
        ++errors;
        //FIXME
        perror("Read_Config - open");
   13544:	26 c0       	rjmp	.+76     	; 0x13592 <Read_Config+0x142>
   13546:	8d e2       	ldi	r24, 0x2D	; 45
   13548:	9e e0       	ldi	r25, 0x0E	; 14
   1354a:	0e 94 ad 77 	call	0xef5a	; 0xef5a <perror>
        printf("Read_Config: open(%s) failed\n", name);
   1354e:	ed b7       	in	r30, 0x3d	; 61
   13550:	fe b7       	in	r31, 0x3e	; 62
   13552:	15 83       	std	Z+5, r17	; 0x05
   13554:	04 83       	std	Z+4, r16	; 0x04
   13556:	84 ea       	ldi	r24, 0xA4	; 164
   13558:	9b e1       	ldi	r25, 0x1B	; 27
   1355a:	a0 e0       	ldi	r26, 0x00	; 0
   1355c:	81 83       	std	Z+1, r24	; 0x01
   1355e:	92 83       	std	Z+2, r25	; 0x02
   13560:	a3 83       	std	Z+3, r26	; 0x03
   13562:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
        set_Config_Defaults();
        return(errors);
   13566:	81 e0       	ldi	r24, 0x01	; 1
   13568:	90 e0       	ldi	r25, 0x00	; 0
    }

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
    {
        ++lines;
   1356a:	95 c3       	rjmp	.+1834   	; 0x13c96 <Read_Config+0x846>
   1356c:	ff ef       	ldi	r31, 0xFF	; 255
   1356e:	4f 1a       	sub	r4, r31

		ptr = get_token(str, token, sizeof(token)-2);
   13570:	5f 0a       	sbc	r5, r31
   13572:	4e e7       	ldi	r20, 0x7E	; 126
   13574:	50 e0       	ldi	r21, 0x00	; 0
   13576:	9e 01       	movw	r18, r28
   13578:	28 5f       	subi	r18, 0xF8	; 248
   1357a:	3f 4f       	sbci	r19, 0xFF	; 255
   1357c:	49 01       	movw	r8, r18
   1357e:	b9 01       	movw	r22, r18
   13580:	ce 01       	movw	r24, r28
   13582:	88 57       	subi	r24, 0x78	; 120
   13584:	9f 4f       	sbci	r25, 0xFF	; 255
   13586:	0e 94 5d 32 	call	0x64ba	; 0x64ba <get_token>

        // Skip comments
        if(token[0] == 0 || token[0]  == '#')
   1358a:	5c 01       	movw	r10, r24
   1358c:	88 85       	ldd	r24, Y+8	; 0x08
   1358e:	81 11       	cpse	r24, r1
        printf("Read_Config: open(%s) failed\n", name);
        set_Config_Defaults();
        return(errors);
    }

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
   13590:	10 c0       	rjmp	.+32     	; 0x135b2 <Read_Config+0x162>
   13592:	c4 5f       	subi	r28, 0xF4	; 244
   13594:	de 4f       	sbci	r29, 0xFE	; 254
   13596:	48 81       	ld	r20, Y
   13598:	59 81       	ldd	r21, Y+1	; 0x01
   1359a:	cc 50       	subi	r28, 0x0C	; 12
   1359c:	d1 40       	sbci	r29, 0x01	; 1
   1359e:	6e e7       	ldi	r22, 0x7E	; 126
   135a0:	70 e0       	ldi	r23, 0x00	; 0
   135a2:	ce 01       	movw	r24, r28
   135a4:	88 57       	subi	r24, 0x78	; 120
   135a6:	9f 4f       	sbci	r25, 0xFF	; 255
   135a8:	0e 94 94 75 	call	0xeb28	; 0xeb28 <fgets>
   135ac:	89 2b       	or	r24, r25
   135ae:	f1 f6       	brne	.-68     	; 0x1356c <Read_Config+0x11c>
        ++lines;

		ptr = get_token(str, token, sizeof(token)-2);

        // Skip comments
        if(token[0] == 0 || token[0]  == '#')
   135b0:	32 c3       	rjmp	.+1636   	; 0x13c16 <Read_Config+0x7c6>
   135b2:	83 32       	cpi	r24, 0x23	; 35

		val.l = 0;
		tok = TOK_INVALID;


		if( ( ind = tok_index(token) )  == -1)
   135b4:	71 f3       	breq	.-36     	; 0x13592 <Read_Config+0x142>
   135b6:	c4 01       	movw	r24, r8
   135b8:	0e 94 dc 91 	call	0x123b8	; 0x123b8 <tok_index>
   135bc:	8f 3f       	cpi	r24, 0xFF	; 255
   135be:	3f ef       	ldi	r19, 0xFF	; 255
   135c0:	93 07       	cpc	r25, r19
		{
            printf("Unexpected token: %s, at line:%d\n", token,lines);
   135c2:	49 f4       	brne	.+18     	; 0x135d6 <Read_Config+0x186>
   135c4:	ed b7       	in	r30, 0x3d	; 61
   135c6:	fe b7       	in	r31, 0x3e	; 62
   135c8:	57 82       	std	Z+7, r5	; 0x07
   135ca:	46 82       	std	Z+6, r4	; 0x06
   135cc:	95 82       	std	Z+5, r9	; 0x05
   135ce:	84 82       	std	Z+4, r8	; 0x04
   135d0:	82 e8       	ldi	r24, 0x82	; 130
   135d2:	9b e1       	ldi	r25, 0x1B	; 27
			++errors;
			continue;
		}
		tok = tokens[ind].tok;
   135d4:	c9 c0       	rjmp	.+402    	; 0x13768 <Read_Config+0x318>
   135d6:	88 0f       	add	r24, r24
   135d8:	99 1f       	adc	r25, r25
   135da:	88 0f       	add	r24, r24
   135dc:	99 1f       	adc	r25, r25
   135de:	fc 01       	movw	r30, r24
   135e0:	ef 52       	subi	r30, 0x2F	; 47
   135e2:	fe 4f       	sbci	r31, 0xFE	; 254
   135e4:	02 81       	ldd	r16, Z+2	; 0x02

		// get optional argument
		ptr = get_token(ptr, token, sizeof(token)-2);                       
   135e6:	13 81       	ldd	r17, Z+3	; 0x03
   135e8:	4e e7       	ldi	r20, 0x7E	; 126
   135ea:	50 e0       	ldi	r21, 0x00	; 0
   135ec:	b4 01       	movw	r22, r8
   135ee:	c5 01       	movw	r24, r10
   135f0:	0e 94 5d 32 	call	0x64ba	; 0x64ba <get_token>
		if(MATCH(token,"="))
   135f4:	5c 01       	movw	r10, r24
   135f6:	60 e4       	ldi	r22, 0x40	; 64
   135f8:	7e e0       	ldi	r23, 0x0E	; 14
   135fa:	c4 01       	movw	r24, r8
   135fc:	0e 94 95 31 	call	0x632a	; 0x632a <MATCH>
   13600:	89 2b       	or	r24, r25
			ptr = get_token(ptr, token, sizeof(token)-2);                       
   13602:	39 f0       	breq	.+14     	; 0x13612 <Read_Config+0x1c2>
   13604:	4e e7       	ldi	r20, 0x7E	; 126
   13606:	50 e0       	ldi	r21, 0x00	; 0
   13608:	b4 01       	movw	r22, r8
   1360a:	c5 01       	movw	r24, r10
   1360c:	0e 94 5d 32 	call	0x64ba	; 0x64ba <get_token>
		val.l = get_value(token);
   13610:	5c 01       	movw	r10, r24
   13612:	c4 01       	movw	r24, r8
   13614:	0e 94 a0 32 	call	0x6540	; 0x6540 <get_value>
		val.w = (uint16_t) 0xFFFF & val.l;
		val.b = (uint8_t) 0xFF & val.l;


        //FIXME check for state and last state
        if(tok == TOK_END )
   13618:	01 31       	cpi	r16, 0x11	; 17
        {
            state = pop_state();
   1361a:	11 05       	cpc	r17, r1
   1361c:	19 f4       	brne	.+6      	; 0x13624 <Read_Config+0x1d4>
   1361e:	cc dd       	rcall	.-1128   	; 0x131b8 <pop_state>
            continue;
   13620:	1c 01       	movw	r2, r24
        }

        switch(state)
   13622:	b7 cf       	rjmp	.-146    	; 0x13592 <Read_Config+0x142>
   13624:	30 e1       	ldi	r19, 0x10	; 16
   13626:	23 16       	cp	r2, r19
   13628:	31 04       	cpc	r3, r1
   1362a:	08 f0       	brcs	.+2      	; 0x1362e <Read_Config+0x1de>
   1362c:	de c2       	rjmp	.+1468   	; 0x13bea <Read_Config+0x79a>
   1362e:	f1 01       	movw	r30, r2
   13630:	e0 53       	subi	r30, 0x30	; 48
   13632:	ff 4f       	sbci	r31, 0xFF	; 255
   13634:	0c 94 af df 	jmp	0x1bf5e	; 0x1bf5e <__tablejump2__>
        {
        case START_STATE:
			switch(tok)
   13638:	0e 30       	cpi	r16, 0x0E	; 14
   1363a:	11 05       	cpc	r17, r1
   1363c:	09 f4       	brne	.+2      	; 0x13640 <Read_Config+0x1f0>
   1363e:	87 c0       	rjmp	.+270    	; 0x1374e <Read_Config+0x2fe>
   13640:	44 f4       	brge	.+16     	; 0x13652 <Read_Config+0x202>
   13642:	02 30       	cpi	r16, 0x02	; 2
   13644:	11 05       	cpc	r17, r1
   13646:	09 f4       	brne	.+2      	; 0x1364a <Read_Config+0x1fa>
   13648:	41 c0       	rjmp	.+130    	; 0x136cc <Read_Config+0x27c>
   1364a:	0c 30       	cpi	r16, 0x0C	; 12
   1364c:	11 05       	cpc	r17, r1
   1364e:	09 f1       	breq	.+66     	; 0x13692 <Read_Config+0x242>
   13650:	83 c0       	rjmp	.+262    	; 0x13758 <Read_Config+0x308>
   13652:	03 32       	cpi	r16, 0x23	; 35
   13654:	11 05       	cpc	r17, r1
   13656:	e9 f0       	breq	.+58     	; 0x13692 <Read_Config+0x242>
   13658:	04 32       	cpi	r16, 0x24	; 36
   1365a:	11 05       	cpc	r17, r1
   1365c:	29 f0       	breq	.+10     	; 0x13668 <Read_Config+0x218>
   1365e:	00 32       	cpi	r16, 0x20	; 32
   13660:	11 05       	cpc	r17, r1
   13662:	09 f0       	breq	.+2      	; 0x13666 <Read_Config+0x216>
			{
				case TOK_SS80_DEFAULT:
					push_state(state);
   13664:	79 c0       	rjmp	.+242    	; 0x13758 <Read_Config+0x308>
   13666:	55 c0       	rjmp	.+170    	; 0x13712 <Read_Config+0x2c2>
					state = SS80_STATE;
					index = alloc_device(SS80_DEFAULT_TYPE);
   13668:	80 e0       	ldi	r24, 0x00	; 0
   1366a:	90 e0       	ldi	r25, 0x00	; 0
   1366c:	8c dd       	rcall	.-1256   	; 0x13186 <push_state>
   1366e:	82 e0       	ldi	r24, 0x02	; 2
   13670:	90 e0       	ldi	r25, 0x00	; 0
					if(index == -1)
   13672:	a6 dc       	rcall	.-1716   	; 0x12fc0 <alloc_device>
   13674:	6c 01       	movw	r12, r24
   13676:	01 96       	adiw	r24, 0x01	; 1
						state = START_STATE;
					else
						SS80p = (SS80DiskType *) Devices[index].dev;
   13678:	09 f4       	brne	.+2      	; 0x1367c <Read_Config+0x22c>
   1367a:	8b cf       	rjmp	.-234    	; 0x13592 <Read_Config+0x142>
   1367c:	8b e2       	ldi	r24, 0x2B	; 43
   1367e:	8c 9d       	mul	r24, r12
   13680:	f0 01       	movw	r30, r0
   13682:	8d 9d       	mul	r24, r13
   13684:	f0 0d       	add	r31, r0
   13686:	11 24       	eor	r1, r1
   13688:	e8 54       	subi	r30, 0x48	; 72
   1368a:	f1 4e       	sbci	r31, 0xE1	; 225
					break;
				case TOK_SS80:
				case TOK_CS80:
					push_state(state);
   1368c:	67 a0       	ldd	r6, Z+39	; 0x27
   1368e:	70 a4       	ldd	r7, Z+40	; 0x28
   13690:	19 c0       	rjmp	.+50     	; 0x136c4 <Read_Config+0x274>
					state = SS80_STATE;
					index = alloc_device(SS80_TYPE);
   13692:	80 e0       	ldi	r24, 0x00	; 0
   13694:	90 e0       	ldi	r25, 0x00	; 0
   13696:	77 dd       	rcall	.-1298   	; 0x13186 <push_state>
   13698:	83 e0       	ldi	r24, 0x03	; 3
   1369a:	90 e0       	ldi	r25, 0x00	; 0
					if(index == -1)
   1369c:	91 dc       	rcall	.-1758   	; 0x12fc0 <alloc_device>
   1369e:	6c 01       	movw	r12, r24
   136a0:	8f ef       	ldi	r24, 0xFF	; 255
   136a2:	c8 16       	cp	r12, r24
   136a4:	d8 06       	cpc	r13, r24
					{
						state = START_STATE;
					}
					else
					{
						SS80p = (SS80DiskType *) Devices[index].dev;
   136a6:	09 f4       	brne	.+2      	; 0x136aa <Read_Config+0x25a>
   136a8:	74 cf       	rjmp	.-280    	; 0x13592 <Read_Config+0x142>
   136aa:	8b e2       	ldi	r24, 0x2B	; 43
   136ac:	8c 9d       	mul	r24, r12
   136ae:	f0 01       	movw	r30, r0
   136b0:	8d 9d       	mul	r24, r13
   136b2:	f0 0d       	add	r31, r0
   136b4:	11 24       	eor	r1, r1
   136b6:	e8 54       	subi	r30, 0x48	; 72
						hpdir_set_parameters(index,token);	// Also sets Devices[index].model
   136b8:	f1 4e       	sbci	r31, 0xE1	; 225
   136ba:	67 a0       	ldd	r6, Z+39	; 0x27
   136bc:	70 a4       	ldd	r7, Z+40	; 0x28
						SS80p = (SS80DiskType *) Devices[index].dev;
					break;
				case TOK_SS80:
				case TOK_CS80:
					push_state(state);
					state = SS80_STATE;
   136be:	b4 01       	movw	r22, r8
   136c0:	c6 01       	movw	r24, r12
   136c2:	20 de       	rcall	.-960    	; 0x13304 <hpdir_set_parameters>
						hpdir_set_parameters(index,token);	// Also sets Devices[index].model
					}
					break;
#ifdef AMIGO
				case TOK_AMIGO:
					push_state(state);
   136c4:	22 24       	eor	r2, r2
   136c6:	23 94       	inc	r2
   136c8:	31 2c       	mov	r3, r1
   136ca:	63 cf       	rjmp	.-314    	; 0x13592 <Read_Config+0x142>
					state = AMIGO_STATE;
					index = alloc_device(AMIGO_TYPE);
   136cc:	80 e0       	ldi	r24, 0x00	; 0
   136ce:	90 e0       	ldi	r25, 0x00	; 0
   136d0:	5a dd       	rcall	.-1356   	; 0x13186 <push_state>
   136d2:	81 e0       	ldi	r24, 0x01	; 1
   136d4:	90 e0       	ldi	r25, 0x00	; 0
					if(index == -1)
   136d6:	74 dc       	rcall	.-1816   	; 0x12fc0 <alloc_device>
   136d8:	6c 01       	movw	r12, r24
   136da:	9f ef       	ldi	r25, 0xFF	; 255
   136dc:	c9 16       	cp	r12, r25
   136de:	d9 06       	cpc	r13, r25
					{
						state = START_STATE;
					}
					else
					{
						AMIGOp = (AMIGODiskType *) Devices[index].dev;
   136e0:	09 f4       	brne	.+2      	; 0x136e4 <Read_Config+0x294>
   136e2:	57 cf       	rjmp	.-338    	; 0x13592 <Read_Config+0x142>
   136e4:	8b e2       	ldi	r24, 0x2B	; 43
   136e6:	8c 9d       	mul	r24, r12
   136e8:	f0 01       	movw	r30, r0
   136ea:	8d 9d       	mul	r24, r13
   136ec:	f0 0d       	add	r31, r0
   136ee:	11 24       	eor	r1, r1
   136f0:	e8 54       	subi	r30, 0x48	; 72
   136f2:	f1 4e       	sbci	r31, 0xE1	; 225
   136f4:	a7 a1       	ldd	r26, Z+39	; 0x27
   136f6:	b0 a5       	ldd	r27, Z+40	; 0x28
   136f8:	c8 5f       	subi	r28, 0xF8	; 248
   136fa:	de 4f       	sbci	r29, 0xFE	; 254
						hpdir_set_parameters(index,token);	// Also sets Devices[index.model
   136fc:	b9 83       	std	Y+1, r27	; 0x01
   136fe:	a8 83       	st	Y, r26
					}
					break;
#ifdef AMIGO
				case TOK_AMIGO:
					push_state(state);
					state = AMIGO_STATE;
   13700:	c8 50       	subi	r28, 0x08	; 8
   13702:	d1 40       	sbci	r29, 0x01	; 1
   13704:	b4 01       	movw	r22, r8
   13706:	c6 01       	movw	r24, r12
						hpdir_set_parameters(index,token);	// Also sets Devices[index.model
					}
					break;
#endif
				case TOK_PRINTER:
					push_state(state);
   13708:	fd dd       	rcall	.-1030   	; 0x13304 <hpdir_set_parameters>
   1370a:	aa e0       	ldi	r26, 0x0A	; 10
   1370c:	2a 2e       	mov	r2, r26
   1370e:	31 2c       	mov	r3, r1
					state = PRINTER_STATE;
					index = alloc_device(PRINTER_TYPE);
   13710:	40 cf       	rjmp	.-384    	; 0x13592 <Read_Config+0x142>
   13712:	80 e0       	ldi	r24, 0x00	; 0
   13714:	90 e0       	ldi	r25, 0x00	; 0
   13716:	37 dd       	rcall	.-1426   	; 0x13186 <push_state>
   13718:	84 e0       	ldi	r24, 0x04	; 4
					if(index == -1)
   1371a:	90 e0       	ldi	r25, 0x00	; 0
   1371c:	51 dc       	rcall	.-1886   	; 0x12fc0 <alloc_device>
   1371e:	6c 01       	movw	r12, r24
						state = START_STATE;
					else
						PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
   13720:	01 96       	adiw	r24, 0x01	; 1
   13722:	09 f4       	brne	.+2      	; 0x13726 <Read_Config+0x2d6>
   13724:	36 cf       	rjmp	.-404    	; 0x13592 <Read_Config+0x142>
   13726:	8b e2       	ldi	r24, 0x2B	; 43
   13728:	8c 9d       	mul	r24, r12
   1372a:	f0 01       	movw	r30, r0
   1372c:	8d 9d       	mul	r24, r13
   1372e:	f0 0d       	add	r31, r0
   13730:	11 24       	eor	r1, r1
   13732:	e8 54       	subi	r30, 0x48	; 72
   13734:	f1 4e       	sbci	r31, 0xE1	; 225
   13736:	27 a1       	ldd	r18, Z+39	; 0x27
   13738:	30 a5       	ldd	r19, Z+40	; 0x28
   1373a:	c6 5f       	subi	r28, 0xF6	; 246
   1373c:	de 4f       	sbci	r29, 0xFE	; 254
   1373e:	39 83       	std	Y+1, r19	; 0x01
					}
					break;
#endif
				case TOK_PRINTER:
					push_state(state);
					state = PRINTER_STATE;
   13740:	28 83       	st	Y, r18
   13742:	ca 50       	subi	r28, 0x0A	; 10
   13744:	d1 40       	sbci	r29, 0x01	; 1
   13746:	fe e0       	ldi	r31, 0x0E	; 14
						state = START_STATE;
					else
						PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
					break;
				case TOK_DEBUG:
					debuglevel = val.w;
   13748:	2f 2e       	mov	r2, r31
   1374a:	31 2c       	mov	r3, r1
   1374c:	22 cf       	rjmp	.-444    	; 0x13592 <Read_Config+0x142>
   1374e:	60 93 c3 01 	sts	0x01C3, r22	; 0x8001c3 <debuglevel>
					break;
				default:
					printf("Unexpected token: %s, at line:%d\n", ptr,lines);
   13752:	70 93 c4 01 	sts	0x01C4, r23	; 0x8001c4 <debuglevel+0x1>
   13756:	1d cf       	rjmp	.-454    	; 0x13592 <Read_Config+0x142>
   13758:	ed b7       	in	r30, 0x3d	; 61
   1375a:	fe b7       	in	r31, 0x3e	; 62
   1375c:	57 82       	std	Z+7, r5	; 0x07
   1375e:	46 82       	std	Z+6, r4	; 0x06
   13760:	b5 82       	std	Z+5, r11	; 0x05
   13762:	a4 82       	std	Z+4, r10	; 0x04
   13764:	80 e6       	ldi	r24, 0x60	; 96
   13766:	9b e1       	ldi	r25, 0x1B	; 27
   13768:	a0 e0       	ldi	r26, 0x00	; 0
					break;
				}
				break;

        case PRINTER_STATE:
				if(tok == TOK_CONFIG)
   1376a:	81 83       	std	Z+1, r24	; 0x01
   1376c:	92 83       	std	Z+2, r25	; 0x02
   1376e:	a3 83       	std	Z+3, r26	; 0x03
				{
					push_state(state);
   13770:	4c c2       	rjmp	.+1176   	; 0x13c0a <Read_Config+0x7ba>
   13772:	09 30       	cpi	r16, 0x09	; 9
   13774:	11 05       	cpc	r17, r1
   13776:	39 f4       	brne	.+14     	; 0x13786 <Read_Config+0x336>
					state = PRINTER_CONFIG;
   13778:	8e e0       	ldi	r24, 0x0E	; 14
   1377a:	90 e0       	ldi	r25, 0x00	; 0
   1377c:	04 dd       	rcall	.-1528   	; 0x13186 <push_state>
				{
					printf("Unexpected PRINTER token: %s, at line:%d\n", ptr,lines);
					++errors;
					break;
				}
				break;
   1377e:	ef e0       	ldi	r30, 0x0F	; 15
					push_state(state);
					state = PRINTER_CONFIG;
				}
				else
				{
					printf("Unexpected PRINTER token: %s, at line:%d\n", ptr,lines);
   13780:	2e 2e       	mov	r2, r30
   13782:	31 2c       	mov	r3, r1
   13784:	06 cf       	rjmp	.-500    	; 0x13592 <Read_Config+0x142>
   13786:	ed b7       	in	r30, 0x3d	; 61
   13788:	fe b7       	in	r31, 0x3e	; 62
   1378a:	57 82       	std	Z+7, r5	; 0x07
   1378c:	46 82       	std	Z+6, r4	; 0x06
   1378e:	b5 82       	std	Z+5, r11	; 0x05
   13790:	a4 82       	std	Z+4, r10	; 0x04
					break;
				}
				break;

        case PRINTER_CONFIG:
			if(tok == TOK_ADDRESS)
   13792:	86 e3       	ldi	r24, 0x36	; 54
   13794:	9b e1       	ldi	r25, 0x1B	; 27
   13796:	e8 cf       	rjmp	.-48     	; 0x13768 <Read_Config+0x318>
			{
				Devices[index].ADDRESS = 0x1f & val.b;
   13798:	01 30       	cpi	r16, 0x01	; 1
   1379a:	11 05       	cpc	r17, r1
   1379c:	b1 f4       	brne	.+44     	; 0x137ca <Read_Config+0x37a>
   1379e:	6f 71       	andi	r22, 0x1F	; 31
   137a0:	8b e2       	ldi	r24, 0x2B	; 43
   137a2:	8c 9d       	mul	r24, r12
   137a4:	f0 01       	movw	r30, r0
   137a6:	8d 9d       	mul	r24, r13
   137a8:	f0 0d       	add	r31, r0
   137aa:	11 24       	eor	r1, r1
				PRINTERp->HEADER.ADDRESS  = 0x1f & val.b;
   137ac:	e8 54       	subi	r30, 0x48	; 72
   137ae:	f1 4e       	sbci	r31, 0xE1	; 225
   137b0:	61 83       	std	Z+1, r22	; 0x01
   137b2:	c6 5f       	subi	r28, 0xF6	; 246
   137b4:	de 4f       	sbci	r29, 0xFE	; 254
   137b6:	a8 81       	ld	r26, Y
   137b8:	b9 81       	ldd	r27, Y+1	; 0x01
				// NO PPR
				Devices[index].PPR = 0xff;
   137ba:	ca 50       	subi	r28, 0x0A	; 10
   137bc:	d1 40       	sbci	r29, 0x01	; 1
				PRINTERp->HEADER.PPR = 0xff;
   137be:	6c 93       	st	X, r22
   137c0:	8f ef       	ldi	r24, 0xFF	; 255
   137c2:	82 83       	std	Z+2, r24	; 0x02
            }
            else
            {
                printf("Unexpected PRINTER CONFIG token: %s, at line:%d\n", ptr,lines);
   137c4:	fd 01       	movw	r30, r26
   137c6:	81 83       	std	Z+1, r24	; 0x01
   137c8:	e4 ce       	rjmp	.-568    	; 0x13592 <Read_Config+0x142>
   137ca:	ed b7       	in	r30, 0x3d	; 61
   137cc:	fe b7       	in	r31, 0x3e	; 62
   137ce:	57 82       	std	Z+7, r5	; 0x07
   137d0:	46 82       	std	Z+6, r4	; 0x06
   137d2:	b5 82       	std	Z+5, r11	; 0x05
                ++errors;
            }
            break;

        case SS80_STATE:
			switch(tok)
   137d4:	a4 82       	std	Z+4, r10	; 0x04
   137d6:	85 e0       	ldi	r24, 0x05	; 5
   137d8:	9b e1       	ldi	r25, 0x1B	; 27
   137da:	c6 cf       	rjmp	.-116    	; 0x13768 <Read_Config+0x318>
   137dc:	05 31       	cpi	r16, 0x15	; 21
   137de:	11 05       	cpc	r17, r1
   137e0:	d9 f0       	breq	.+54     	; 0x13818 <Read_Config+0x3c8>
   137e2:	6c f4       	brge	.+26     	; 0x137fe <Read_Config+0x3ae>
   137e4:	09 30       	cpi	r16, 0x09	; 9
   137e6:	11 05       	cpc	r17, r1
                case TOK_CONFIG:
					push_state(state);
					state = SS80_CONFIG;
					break;
            	case TOK_CONTROLLER:
					push_state(state);
   137e8:	f1 f0       	breq	.+60     	; 0x13826 <Read_Config+0x3d6>
   137ea:	0b 30       	cpi	r16, 0x0B	; 11
   137ec:	11 05       	cpc	r17, r1
					state = SS80_CONTROLLER;
   137ee:	49 f5       	brne	.+82     	; 0x13842 <Read_Config+0x3f2>
   137f0:	81 e0       	ldi	r24, 0x01	; 1
   137f2:	90 e0       	ldi	r25, 0x00	; 0
					break;
   137f4:	c8 dc       	rcall	.-1648   	; 0x13186 <push_state>
                ++errors;
            }
            break;

        case SS80_STATE:
			switch(tok)
   137f6:	54 e0       	ldi	r21, 0x04	; 4
   137f8:	25 2e       	mov	r2, r21
   137fa:	31 2c       	mov	r3, r1
   137fc:	ca ce       	rjmp	.-620    	; 0x13592 <Read_Config+0x142>
   137fe:	07 32       	cpi	r16, 0x27	; 39
				case TOK_UNIT:
					push_state(state);
					state = SS80_UNIT;
					break;
            	case TOK_VOLUME:
					push_state(state);
   13800:	11 05       	cpc	r17, r1
   13802:	c1 f0       	breq	.+48     	; 0x13834 <Read_Config+0x3e4>
   13804:	0a 32       	cpi	r16, 0x2A	; 42
					state = SS80_VOLUME;
   13806:	11 05       	cpc	r17, r1
   13808:	e1 f4       	brne	.+56     	; 0x13842 <Read_Config+0x3f2>
   1380a:	81 e0       	ldi	r24, 0x01	; 1
					break;
   1380c:	90 e0       	ldi	r25, 0x00	; 0

        case SS80_STATE:
			switch(tok)
			{
				case TOK_HEADER:
					push_state(state);
   1380e:	bb dc       	rcall	.-1674   	; 0x13186 <push_state>
   13810:	36 e0       	ldi	r19, 0x06	; 6
   13812:	23 2e       	mov	r2, r19
					state = SS80_HEADER;
   13814:	31 2c       	mov	r3, r1
   13816:	bd ce       	rjmp	.-646    	; 0x13592 <Read_Config+0x142>
   13818:	81 e0       	ldi	r24, 0x01	; 1
					break;
   1381a:	90 e0       	ldi	r25, 0x00	; 0
                case TOK_CONFIG:
					push_state(state);
   1381c:	b4 dc       	rcall	.-1688   	; 0x13186 <push_state>
   1381e:	72 e0       	ldi	r23, 0x02	; 2
   13820:	27 2e       	mov	r2, r23
   13822:	31 2c       	mov	r3, r1
					state = SS80_CONFIG;
   13824:	b6 ce       	rjmp	.-660    	; 0x13592 <Read_Config+0x142>
   13826:	81 e0       	ldi	r24, 0x01	; 1
   13828:	90 e0       	ldi	r25, 0x00	; 0
					break;
   1382a:	ad dc       	rcall	.-1702   	; 0x13186 <push_state>
            	case TOK_CONTROLLER:
					push_state(state);
					state = SS80_CONTROLLER;
					break;
				case TOK_UNIT:
					push_state(state);
   1382c:	63 e0       	ldi	r22, 0x03	; 3
   1382e:	26 2e       	mov	r2, r22
   13830:	31 2c       	mov	r3, r1
   13832:	af ce       	rjmp	.-674    	; 0x13592 <Read_Config+0x142>
					state = SS80_UNIT;
   13834:	81 e0       	ldi	r24, 0x01	; 1
   13836:	90 e0       	ldi	r25, 0x00	; 0
   13838:	a6 dc       	rcall	.-1716   	; 0x13186 <push_state>
					break;
   1383a:	45 e0       	ldi	r20, 0x05	; 5
            	case TOK_VOLUME:
					push_state(state);
					state = SS80_VOLUME;
					break;
				default:
					printf("Unexpected SS80 START token: %s, at line:%d\n", ptr,lines);
   1383c:	24 2e       	mov	r2, r20
   1383e:	31 2c       	mov	r3, r1
   13840:	a8 ce       	rjmp	.-688    	; 0x13592 <Read_Config+0x142>
   13842:	ed b7       	in	r30, 0x3d	; 61
   13844:	fe b7       	in	r31, 0x3e	; 62
   13846:	57 82       	std	Z+7, r5	; 0x07
   13848:	46 82       	std	Z+6, r4	; 0x06
   1384a:	b5 82       	std	Z+5, r11	; 0x05
   1384c:	a4 82       	std	Z+4, r10	; 0x04
					break;
            }
            break;

        case SS80_HEADER:
            switch(tok)
   1384e:	88 ed       	ldi	r24, 0xD8	; 216
   13850:	9a e1       	ldi	r25, 0x1A	; 26
   13852:	8a cf       	rjmp	.-236    	; 0x13768 <Read_Config+0x318>
   13854:	02 31       	cpi	r16, 0x12	; 18
   13856:	11 05       	cpc	r17, r1
   13858:	f1 f0       	breq	.+60     	; 0x13896 <Read_Config+0x446>
   1385a:	0f 31       	cpi	r16, 0x1F	; 31
   1385c:	11 05       	cpc	r17, r1
   1385e:	79 f0       	breq	.+30     	; 0x1387e <Read_Config+0x42e>
			{
				case TOK_ADDRESS:
					Devices[index].ADDRESS = 0x1f & val.b;
   13860:	01 30       	cpi	r16, 0x01	; 1
   13862:	11 05       	cpc	r17, r1
   13864:	e9 f4       	brne	.+58     	; 0x138a0 <Read_Config+0x450>
   13866:	6f 71       	andi	r22, 0x1F	; 31
   13868:	8b e2       	ldi	r24, 0x2B	; 43
   1386a:	8c 9d       	mul	r24, r12
   1386c:	f0 01       	movw	r30, r0
   1386e:	8d 9d       	mul	r24, r13
   13870:	f0 0d       	add	r31, r0
   13872:	11 24       	eor	r1, r1
					SS80p->HEADER.ADDRESS  = 0x1f & val.b;
   13874:	e8 54       	subi	r30, 0x48	; 72
   13876:	f1 4e       	sbci	r31, 0xE1	; 225
					break;
				case TOK_PPR:
					Devices[index].PPR = 0x07 & val.b;
   13878:	61 83       	std	Z+1, r22	; 0x01
   1387a:	d3 01       	movw	r26, r6
   1387c:	37 c1       	rjmp	.+622    	; 0x13aec <Read_Config+0x69c>
   1387e:	67 70       	andi	r22, 0x07	; 7
   13880:	8b e2       	ldi	r24, 0x2B	; 43
   13882:	8c 9d       	mul	r24, r12
   13884:	f0 01       	movw	r30, r0
   13886:	8d 9d       	mul	r24, r13
   13888:	f0 0d       	add	r31, r0
   1388a:	11 24       	eor	r1, r1
					SS80p->HEADER.PPR = 0x07 & val.b;
   1388c:	e8 54       	subi	r30, 0x48	; 72
   1388e:	f1 4e       	sbci	r31, 0xE1	; 225
					break;
            	case TOK_FILE:
					SS80p->HEADER.NAME = stralloc(token);
   13890:	62 83       	std	Z+2, r22	; 0x02
   13892:	f3 01       	movw	r30, r6
   13894:	2d c1       	rjmp	.+602    	; 0x13af0 <Read_Config+0x6a0>
   13896:	c4 01       	movw	r24, r8
   13898:	0e 94 4b 31 	call	0x6296	; 0x6296 <stralloc>
					break;
				default:
					printf("Unexpected SS80 CONFIG token: %s, at line:%d\n", ptr,lines);
   1389c:	f3 01       	movw	r30, r6
   1389e:	33 c1       	rjmp	.+614    	; 0x13b06 <Read_Config+0x6b6>
   138a0:	ed b7       	in	r30, 0x3d	; 61
   138a2:	fe b7       	in	r31, 0x3e	; 62
   138a4:	57 82       	std	Z+7, r5	; 0x07
   138a6:	46 82       	std	Z+6, r4	; 0x06
   138a8:	b5 82       	std	Z+5, r11	; 0x05
   138aa:	a4 82       	std	Z+4, r10	; 0x04
					break;
			}
            break;

        case SS80_CONFIG:
            if(tok == TOK_ID )
   138ac:	8a ea       	ldi	r24, 0xAA	; 170
   138ae:	9a e1       	ldi	r25, 0x1A	; 26
   138b0:	5b cf       	rjmp	.-330    	; 0x13768 <Read_Config+0x318>
            {
                SS80p->CONFIG.ID = val.w;
   138b2:	07 31       	cpi	r16, 0x17	; 23
   138b4:	11 05       	cpc	r17, r1
   138b6:	21 f4       	brne	.+8      	; 0x138c0 <Read_Config+0x470>
   138b8:	96 2f       	mov	r25, r22
            }
            else
            {
                printf("Unexpected SS80 CONFIG token: %s, at line:%d\n", ptr,lines);
   138ba:	87 2f       	mov	r24, r23
   138bc:	f3 01       	movw	r30, r6
   138be:	3f c1       	rjmp	.+638    	; 0x13b3e <Read_Config+0x6ee>
   138c0:	ed b7       	in	r30, 0x3d	; 61
   138c2:	fe b7       	in	r31, 0x3e	; 62
   138c4:	57 82       	std	Z+7, r5	; 0x07
   138c6:	46 82       	std	Z+6, r4	; 0x06
   138c8:	b5 82       	std	Z+5, r11	; 0x05
   138ca:	a4 82       	std	Z+4, r10	; 0x04
                ++errors;
            }
            break;

        case SS80_CONTROLLER:
            switch(tok)
   138cc:	8c e7       	ldi	r24, 0x7C	; 124
   138ce:	9a e1       	ldi	r25, 0x1A	; 26
   138d0:	4b cf       	rjmp	.-362    	; 0x13768 <Read_Config+0x318>
   138d2:	06 32       	cpi	r16, 0x26	; 38
   138d4:	11 05       	cpc	r17, r1
   138d6:	71 f0       	breq	.+28     	; 0x138f4 <Read_Config+0x4a4>
   138d8:	08 32       	cpi	r16, 0x28	; 40
   138da:	11 05       	cpc	r17, r1
   138dc:	39 f0       	breq	.+14     	; 0x138ec <Read_Config+0x49c>
			{
				case TOK_UNITS_INSTALLED:
					SS80p->CONTROLLER.UNITS_INSTALLED = val.w;
					break;
				case TOK_TRANSFER_RATE:
					SS80p->CONTROLLER.TRANSFER_RATE = val.w;
   138de:	05 32       	cpi	r16, 0x25	; 37
   138e0:	11 05       	cpc	r17, r1
   138e2:	59 f4       	brne	.+22     	; 0x138fa <Read_Config+0x4aa>
   138e4:	96 2f       	mov	r25, r22

        case SS80_CONTROLLER:
            switch(tok)
			{
				case TOK_UNITS_INSTALLED:
					SS80p->CONTROLLER.UNITS_INSTALLED = val.w;
   138e6:	87 2f       	mov	r24, r23
   138e8:	f3 01       	movw	r30, r6
   138ea:	5c c1       	rjmp	.+696    	; 0x13ba4 <Read_Config+0x754>
   138ec:	96 2f       	mov	r25, r22
					break;
				case TOK_TRANSFER_RATE:
					SS80p->CONTROLLER.TRANSFER_RATE = val.w;
					break;
            	case TOK_TYPE:
					SS80p->CONTROLLER.TYPE = val.b;
   138ee:	87 2f       	mov	r24, r23
   138f0:	f3 01       	movw	r30, r6
					break;
   138f2:	55 c1       	rjmp	.+682    	; 0x13b9e <Read_Config+0x74e>
				default:
					printf("Unexpected SS80 CONTROLLER token: %s, at line:%d\n", ptr,lines);
   138f4:	f3 01       	movw	r30, r6
   138f6:	62 87       	std	Z+10, r22	; 0x0a
   138f8:	4c ce       	rjmp	.-872    	; 0x13592 <Read_Config+0x142>
   138fa:	ed b7       	in	r30, 0x3d	; 61
   138fc:	fe b7       	in	r31, 0x3e	; 62
   138fe:	57 82       	std	Z+7, r5	; 0x07
   13900:	46 82       	std	Z+6, r4	; 0x06
   13902:	b5 82       	std	Z+5, r11	; 0x05
   13904:	a4 82       	std	Z+4, r10	; 0x04
            }
            break;


        case SS80_UNIT:
			switch(tok)
   13906:	8a e4       	ldi	r24, 0x4A	; 74
   13908:	9a e1       	ldi	r25, 0x1A	; 26
   1390a:	2e cf       	rjmp	.-420    	; 0x13768 <Read_Config+0x318>
   1390c:	0a 30       	cpi	r16, 0x0A	; 10
   1390e:	11 05       	cpc	r17, r1
   13910:	09 f4       	brne	.+2      	; 0x13914 <Read_Config+0x4c4>
   13912:	45 c0       	rjmp	.+138    	; 0x1399e <Read_Config+0x54e>
   13914:	d4 f4       	brge	.+52     	; 0x1394a <Read_Config+0x4fa>
   13916:	05 30       	cpi	r16, 0x05	; 5
   13918:	11 05       	cpc	r17, r1
   1391a:	d1 f1       	breq	.+116    	; 0x13990 <Read_Config+0x540>
   1391c:	64 f4       	brge	.+24     	; 0x13936 <Read_Config+0x4e6>
   1391e:	01 15       	cp	r16, r1
   13920:	11 05       	cpc	r17, r1
   13922:	09 f4       	brne	.+2      	; 0x13926 <Read_Config+0x4d6>
   13924:	40 c0       	rjmp	.+128    	; 0x139a6 <Read_Config+0x556>
   13926:	04 30       	cpi	r16, 0x04	; 4
            		break;
            	case TOK_BURST_SIZE:
					SS80p->UNIT.BURST_SIZE = val.b;
            		break;
            	case TOK_BLOCK_TIME:
					SS80p->UNIT.BLOCK_TIME = val.w;
   13928:	11 05       	cpc	r17, r1
   1392a:	09 f0       	breq	.+2      	; 0x1392e <Read_Config+0x4de>
   1392c:	46 c0       	rjmp	.+140    	; 0x139ba <Read_Config+0x56a>
            		break;
   1392e:	f3 01       	movw	r30, r6
            }
            break;


        case SS80_UNIT:
			switch(tok)
   13930:	64 8b       	std	Z+20, r22	; 0x14
   13932:	75 8b       	std	Z+21, r23	; 0x15
   13934:	2e ce       	rjmp	.-932    	; 0x13592 <Read_Config+0x142>
   13936:	06 30       	cpi	r16, 0x06	; 6
   13938:	11 05       	cpc	r17, r1
   1393a:	71 f1       	breq	.+92     	; 0x13998 <Read_Config+0x548>
            		break;
            	case TOK_DEVICE_NUMBER:
					SS80p->UNIT.DEVICE_NUMBER = val.l;
            		break;
            	case TOK_BYTES_PER_BLOCK:
					SS80p->UNIT.BYTES_PER_BLOCK = val.w;
   1393c:	07 30       	cpi	r16, 0x07	; 7
   1393e:	11 05       	cpc	r17, r1
   13940:	e1 f5       	brne	.+120    	; 0x139ba <Read_Config+0x56a>
            		break;
   13942:	f3 01       	movw	r30, r6
            }
            break;


        case SS80_UNIT:
			switch(tok)
   13944:	60 8b       	std	Z+16, r22	; 0x10
   13946:	71 8b       	std	Z+17, r23	; 0x11
   13948:	24 ce       	rjmp	.-952    	; 0x13592 <Read_Config+0x142>
   1394a:	0c 31       	cpi	r16, 0x1C	; 28
   1394c:	11 05       	cpc	r17, r1
   1394e:	79 f1       	breq	.+94     	; 0x139ae <Read_Config+0x55e>
   13950:	4c f4       	brge	.+18     	; 0x13964 <Read_Config+0x514>
   13952:	0f 30       	cpi	r16, 0x0F	; 15
   13954:	11 05       	cpc	r17, r1
   13956:	b1 f0       	breq	.+44     	; 0x13984 <Read_Config+0x534>
            		break;
            	case TOK_MAXIMUM_INTERLEAVE:
					SS80p->UNIT.MAXIMUM_INTERLEAVE = val.b;
            		break;
				case TOK_FIXED_VOLUMES:
					SS80p->UNIT.FIXED_VOLUMES = val.b;
   13958:	03 31       	cpi	r16, 0x13	; 19
   1395a:	11 05       	cpc	r17, r1
            		break;
   1395c:	71 f5       	brne	.+92     	; 0x139ba <Read_Config+0x56a>
            }
            break;


        case SS80_UNIT:
			switch(tok)
   1395e:	f3 01       	movw	r30, r6
   13960:	65 8f       	std	Z+29, r22	; 0x1d
   13962:	17 ce       	rjmp	.-978    	; 0x13592 <Read_Config+0x142>
   13964:	01 32       	cpi	r16, 0x21	; 33
   13966:	11 05       	cpc	r17, r1
   13968:	29 f1       	breq	.+74     	; 0x139b4 <Read_Config+0x564>
   1396a:	09 32       	cpi	r16, 0x29	; 41
   1396c:	11 05       	cpc	r17, r1
   1396e:	39 f0       	breq	.+14     	; 0x1397e <Read_Config+0x52e>
            		break;
            	case TOK_CONTINUOUS_TRANSFER_RATE:
					SS80p->UNIT.CONTINUOUS_TRANSFER_RATE = val.w;
					break;
				case TOK_OPTIMAL_RETRY_TIME:
					SS80p->UNIT.OPTIMAL_RETRY_TIME = val.w;
   13970:	0e 31       	cpi	r16, 0x1E	; 30
   13972:	11 05       	cpc	r17, r1
   13974:	11 f5       	brne	.+68     	; 0x139ba <Read_Config+0x56a>
            		break;
   13976:	f3 01       	movw	r30, r6

        case SS80_UNIT:
			switch(tok)
			{
				case TOK_UNIT_TYPE:
					SS80p->UNIT.UNIT_TYPE = val.b;
   13978:	60 8f       	std	Z+24, r22	; 0x18
   1397a:	71 8f       	std	Z+25, r23	; 0x19
            		break;
   1397c:	0a ce       	rjmp	.-1004   	; 0x13592 <Read_Config+0x142>
            	case TOK_DEVICE_NUMBER:
					SS80p->UNIT.DEVICE_NUMBER = val.l;
   1397e:	f3 01       	movw	r30, r6
   13980:	63 87       	std	Z+11, r22	; 0x0b
   13982:	07 ce       	rjmp	.-1010   	; 0x13592 <Read_Config+0x142>
   13984:	f3 01       	movw	r30, r6
   13986:	64 87       	std	Z+12, r22	; 0x0c
            		break;
   13988:	75 87       	std	Z+13, r23	; 0x0d
            	case TOK_BYTES_PER_BLOCK:
					SS80p->UNIT.BYTES_PER_BLOCK = val.w;
            		break;
            	case TOK_BUFFERED_BLOCKS:
					SS80p->UNIT.BUFFERED_BLOCKS = 1 & val.b;
   1398a:	86 87       	std	Z+14, r24	; 0x0e
   1398c:	97 87       	std	Z+15, r25	; 0x0f
   1398e:	01 ce       	rjmp	.-1022   	; 0x13592 <Read_Config+0x142>
            		break;
   13990:	61 70       	andi	r22, 0x01	; 1
            	case TOK_BURST_SIZE:
					SS80p->UNIT.BURST_SIZE = val.b;
   13992:	f3 01       	movw	r30, r6
   13994:	62 8b       	std	Z+18, r22	; 0x12
            		break;
   13996:	fd cd       	rjmp	.-1030   	; 0x13592 <Read_Config+0x142>
            	case TOK_BLOCK_TIME:
					SS80p->UNIT.BLOCK_TIME = val.w;
            		break;
            	case TOK_CONTINUOUS_TRANSFER_RATE:
					SS80p->UNIT.CONTINUOUS_TRANSFER_RATE = val.w;
   13998:	f3 01       	movw	r30, r6
   1399a:	63 8b       	std	Z+19, r22	; 0x13
   1399c:	fa cd       	rjmp	.-1036   	; 0x13592 <Read_Config+0x142>
					break;
   1399e:	f3 01       	movw	r30, r6
				case TOK_OPTIMAL_RETRY_TIME:
					SS80p->UNIT.OPTIMAL_RETRY_TIME = val.w;
            		break;
            	case TOK_ACCESS_TIME:
					SS80p->UNIT.ACCESS_TIME = val.w;
   139a0:	66 8b       	std	Z+22, r22	; 0x16
   139a2:	77 8b       	std	Z+23, r23	; 0x17
   139a4:	f6 cd       	rjmp	.-1044   	; 0x13592 <Read_Config+0x142>
            		break;
   139a6:	f3 01       	movw	r30, r6
            	case TOK_MAXIMUM_INTERLEAVE:
					SS80p->UNIT.MAXIMUM_INTERLEAVE = val.b;
   139a8:	62 8f       	std	Z+26, r22	; 0x1a
   139aa:	73 8f       	std	Z+27, r23	; 0x1b
            		break;
   139ac:	f2 cd       	rjmp	.-1052   	; 0x13592 <Read_Config+0x142>
				case TOK_FIXED_VOLUMES:
					SS80p->UNIT.FIXED_VOLUMES = val.b;
            		break;
            	case TOK_REMOVABLE_VOLUMES:
					SS80p->UNIT.REMOVABLE_VOLUMES = val.b;
   139ae:	f3 01       	movw	r30, r6
   139b0:	64 8f       	std	Z+28, r22	; 0x1c
            		break;
   139b2:	ef cd       	rjmp	.-1058   	; 0x13592 <Read_Config+0x142>
            	default:
					printf("Unexpected SS80 UNIT token: %s, at line:%d\n", ptr,lines);
   139b4:	f3 01       	movw	r30, r6
   139b6:	66 8f       	std	Z+30, r22	; 0x1e
   139b8:	ec cd       	rjmp	.-1064   	; 0x13592 <Read_Config+0x142>
   139ba:	ed b7       	in	r30, 0x3d	; 61
   139bc:	fe b7       	in	r31, 0x3e	; 62
   139be:	57 82       	std	Z+7, r5	; 0x07
   139c0:	46 82       	std	Z+6, r4	; 0x06
   139c2:	b5 82       	std	Z+5, r11	; 0x05
   139c4:	a4 82       	std	Z+4, r10	; 0x04
            		break;
            }
            break;

        case SS80_VOLUME:
			switch(tok)
   139c6:	8e e1       	ldi	r24, 0x1E	; 30
   139c8:	9a e1       	ldi	r25, 0x1A	; 26
   139ca:	ce ce       	rjmp	.-612    	; 0x13768 <Read_Config+0x318>
   139cc:	0a 31       	cpi	r16, 0x1A	; 26
   139ce:	11 05       	cpc	r17, r1
   139d0:	b9 f0       	breq	.+46     	; 0x13a00 <Read_Config+0x5b0>
   139d2:	64 f4       	brge	.+24     	; 0x139ec <Read_Config+0x59c>
   139d4:	08 31       	cpi	r16, 0x18	; 24
   139d6:	11 05       	cpc	r17, r1
   139d8:	e1 f0       	breq	.+56     	; 0x13a12 <Read_Config+0x5c2>
					break;
            	case TOK_MAX_SECTOR:
					SS80p->VOLUME.MAX_SECTOR = val.w;
					break;
            	case TOK_MAX_BLOCK_NUMBER:
					SS80p->VOLUME.MAX_BLOCK_NUMBER = val.l;
   139da:	09 31       	cpi	r16, 0x19	; 25
   139dc:	11 05       	cpc	r17, r1
   139de:	e1 f4       	brne	.+56     	; 0x13a18 <Read_Config+0x5c8>
   139e0:	f3 01       	movw	r30, r6
   139e2:	66 a3       	std	Z+38, r22	; 0x26
					break;
   139e4:	77 a3       	std	Z+39, r23	; 0x27
            		break;
            }
            break;

        case SS80_VOLUME:
			switch(tok)
   139e6:	80 a7       	std	Z+40, r24	; 0x28
   139e8:	91 a7       	std	Z+41, r25	; 0x29
   139ea:	d3 cd       	rjmp	.-1114   	; 0x13592 <Read_Config+0x142>
   139ec:	0b 31       	cpi	r16, 0x1B	; 27
   139ee:	11 05       	cpc	r17, r1
   139f0:	69 f0       	breq	.+26     	; 0x13a0c <Read_Config+0x5bc>
					break;
            	case TOK_MAX_HEAD:
					SS80p->VOLUME.MAX_HEAD = val.b;
					break;
            	case TOK_MAX_SECTOR:
					SS80p->VOLUME.MAX_SECTOR = val.w;
   139f2:	0d 31       	cpi	r16, 0x1D	; 29
   139f4:	11 05       	cpc	r17, r1
   139f6:	81 f4       	brne	.+32     	; 0x13a18 <Read_Config+0x5c8>
					break;
   139f8:	f3 01       	movw	r30, r6

        case SS80_VOLUME:
			switch(tok)
			{
				case TOK_MAX_CYLINDER:
					SS80p->VOLUME.MAX_CYLINDER = val.l;
   139fa:	64 a3       	std	Z+36, r22	; 0x24
   139fc:	75 a3       	std	Z+37, r23	; 0x25
   139fe:	c9 cd       	rjmp	.-1134   	; 0x13592 <Read_Config+0x142>
   13a00:	f3 01       	movw	r30, r6
   13a02:	67 8f       	std	Z+31, r22	; 0x1f
					break;
   13a04:	70 a3       	std	Z+32, r23	; 0x20
            	case TOK_MAX_HEAD:
					SS80p->VOLUME.MAX_HEAD = val.b;
   13a06:	81 a3       	std	Z+33, r24	; 0x21
   13a08:	92 a3       	std	Z+34, r25	; 0x22
					break;
   13a0a:	c3 cd       	rjmp	.-1146   	; 0x13592 <Read_Config+0x142>
					break;
            	case TOK_MAX_BLOCK_NUMBER:
					SS80p->VOLUME.MAX_BLOCK_NUMBER = val.l;
					break;
            	case TOK_INTERLEAVE:
					SS80p->VOLUME.INTERLEAVE = val.b;
   13a0c:	f3 01       	movw	r30, r6
   13a0e:	63 a3       	std	Z+35, r22	; 0x23
					break;
   13a10:	c0 cd       	rjmp	.-1152   	; 0x13592 <Read_Config+0x142>
				default:
					printf("Unexpected SS80 VOLUME token: %s, at line:%d\n", ptr,lines);
   13a12:	f3 01       	movw	r30, r6
   13a14:	62 a7       	std	Z+42, r22	; 0x2a
   13a16:	bd cd       	rjmp	.-1158   	; 0x13592 <Read_Config+0x142>
   13a18:	ed b7       	in	r30, 0x3d	; 61
   13a1a:	fe b7       	in	r31, 0x3e	; 62
   13a1c:	57 82       	std	Z+7, r5	; 0x07
   13a1e:	46 82       	std	Z+6, r4	; 0x06
   13a20:	b5 82       	std	Z+5, r11	; 0x05
   13a22:	a4 82       	std	Z+4, r10	; 0x04
   13a24:	c3 5e       	subi	r28, 0xE3	; 227
   13a26:	de 4f       	sbci	r29, 0xFE	; 254
   13a28:	28 81       	ld	r18, Y
            }
            break;

#ifdef AMIGO
        case AMIGO_STATE:
			switch(tok)
   13a2a:	39 81       	ldd	r19, Y+1	; 0x01
   13a2c:	4a 81       	ldd	r20, Y+2	; 0x02
   13a2e:	cd 51       	subi	r28, 0x1D	; 29
   13a30:	d1 40       	sbci	r29, 0x01	; 1
   13a32:	e8 c0       	rjmp	.+464    	; 0x13c04 <Read_Config+0x7b4>
   13a34:	04 31       	cpi	r16, 0x14	; 20
   13a36:	11 05       	cpc	r17, r1
				case TOK_HEADER:
					push_state(state);
					state = AMIGO_HEADER;
					break;
				case TOK_CONFIG:
					push_state(state);
   13a38:	a1 f0       	breq	.+40     	; 0x13a62 <Read_Config+0x612>
   13a3a:	05 31       	cpi	r16, 0x15	; 21
   13a3c:	11 05       	cpc	r17, r1
   13a3e:	51 f0       	breq	.+20     	; 0x13a54 <Read_Config+0x604>
					state = AMIGO_CONFIG;
   13a40:	09 30       	cpi	r16, 0x09	; 9
   13a42:	11 05       	cpc	r17, r1
   13a44:	a9 f4       	brne	.+42     	; 0x13a70 <Read_Config+0x620>
					break;
   13a46:	8a e0       	ldi	r24, 0x0A	; 10
#ifdef AMIGO
        case AMIGO_STATE:
			switch(tok)
			{
				case TOK_HEADER:
					push_state(state);
   13a48:	90 e0       	ldi	r25, 0x00	; 0
   13a4a:	9d db       	rcall	.-2246   	; 0x13186 <push_state>
   13a4c:	9c e0       	ldi	r25, 0x0C	; 12
   13a4e:	29 2e       	mov	r2, r25
					state = AMIGO_HEADER;
   13a50:	31 2c       	mov	r3, r1
   13a52:	9f cd       	rjmp	.-1218   	; 0x13592 <Read_Config+0x142>
   13a54:	8a e0       	ldi	r24, 0x0A	; 10
					break;
   13a56:	90 e0       	ldi	r25, 0x00	; 0
				case TOK_CONFIG:
					push_state(state);
					state = AMIGO_CONFIG;
					break;
            	case TOK_GEOMETRY:
					push_state(state);
   13a58:	96 db       	rcall	.-2260   	; 0x13186 <push_state>
   13a5a:	2b e0       	ldi	r18, 0x0B	; 11
   13a5c:	22 2e       	mov	r2, r18
   13a5e:	31 2c       	mov	r3, r1
					state = AMIGO_GEOMETRY;
   13a60:	98 cd       	rjmp	.-1232   	; 0x13592 <Read_Config+0x142>
   13a62:	8a e0       	ldi	r24, 0x0A	; 10
   13a64:	90 e0       	ldi	r25, 0x00	; 0
					break;
   13a66:	8f db       	rcall	.-2274   	; 0x13186 <push_state>
            	default:
					printf("Unexpected AMIGO START token: %s, at line:%d\n", ptr,lines);
   13a68:	8d e0       	ldi	r24, 0x0D	; 13
   13a6a:	28 2e       	mov	r2, r24
   13a6c:	31 2c       	mov	r3, r1
   13a6e:	91 cd       	rjmp	.-1246   	; 0x13592 <Read_Config+0x142>
   13a70:	ed b7       	in	r30, 0x3d	; 61
   13a72:	fe b7       	in	r31, 0x3e	; 62
   13a74:	57 82       	std	Z+7, r5	; 0x07
   13a76:	46 82       	std	Z+6, r4	; 0x06
   13a78:	b5 82       	std	Z+5, r11	; 0x05
   13a7a:	a4 82       	std	Z+4, r10	; 0x04
   13a7c:	c6 5e       	subi	r28, 0xE6	; 230
   13a7e:	de 4f       	sbci	r29, 0xFE	; 254
   13a80:	28 81       	ld	r18, Y
   13a82:	39 81       	ldd	r19, Y+1	; 0x01
					break;
            }
            break;

        case AMIGO_HEADER:
			switch(tok)
   13a84:	4a 81       	ldd	r20, Y+2	; 0x02
   13a86:	ca 51       	subi	r28, 0x1A	; 26
   13a88:	d1 40       	sbci	r29, 0x01	; 1
   13a8a:	bc c0       	rjmp	.+376    	; 0x13c04 <Read_Config+0x7b4>
   13a8c:	00 31       	cpi	r16, 0x10	; 16
   13a8e:	11 05       	cpc	r17, r1
   13a90:	09 f4       	brne	.+2      	; 0x13a94 <Read_Config+0x644>
   13a92:	7f cd       	rjmp	.-1282   	; 0x13592 <Read_Config+0x142>
			{
            	case TOK_DRIVE:
					break;
            	case TOK_ADDRESS:
					Devices[index].ADDRESS = 0x1f & val.b;
   13a94:	a4 f4       	brge	.+40     	; 0x13abe <Read_Config+0x66e>
   13a96:	01 30       	cpi	r16, 0x01	; 1
   13a98:	11 05       	cpc	r17, r1
   13a9a:	c1 f5       	brne	.+112    	; 0x13b0c <Read_Config+0x6bc>
   13a9c:	6f 71       	andi	r22, 0x1F	; 31
   13a9e:	8b e2       	ldi	r24, 0x2B	; 43
   13aa0:	8c 9d       	mul	r24, r12
   13aa2:	f0 01       	movw	r30, r0
   13aa4:	8d 9d       	mul	r24, r13
   13aa6:	f0 0d       	add	r31, r0
					AMIGOp->HEADER.ADDRESS = 0x1f & val.b;
   13aa8:	11 24       	eor	r1, r1
   13aaa:	e8 54       	subi	r30, 0x48	; 72
   13aac:	f1 4e       	sbci	r31, 0xE1	; 225
   13aae:	61 83       	std	Z+1, r22	; 0x01
   13ab0:	c8 5f       	subi	r28, 0xF8	; 248
   13ab2:	de 4f       	sbci	r29, 0xFE	; 254
   13ab4:	a8 81       	ld	r26, Y
					break;
            }
            break;

        case AMIGO_HEADER:
			switch(tok)
   13ab6:	b9 81       	ldd	r27, Y+1	; 0x01
   13ab8:	c8 50       	subi	r28, 0x08	; 8
   13aba:	d1 40       	sbci	r29, 0x01	; 1
   13abc:	17 c0       	rjmp	.+46     	; 0x13aec <Read_Config+0x69c>
   13abe:	02 31       	cpi	r16, 0x12	; 18
   13ac0:	11 05       	cpc	r17, r1
            	case TOK_ADDRESS:
					Devices[index].ADDRESS = 0x1f & val.b;
					AMIGOp->HEADER.ADDRESS = 0x1f & val.b;
					break;
            	case TOK_PPR:
					Devices[index].PPR = 0x07 & val.b;
   13ac2:	c1 f0       	breq	.+48     	; 0x13af4 <Read_Config+0x6a4>
   13ac4:	0f 31       	cpi	r16, 0x1F	; 31
   13ac6:	11 05       	cpc	r17, r1
   13ac8:	09 f5       	brne	.+66     	; 0x13b0c <Read_Config+0x6bc>
   13aca:	67 70       	andi	r22, 0x07	; 7
   13acc:	8b e2       	ldi	r24, 0x2B	; 43
   13ace:	8c 9d       	mul	r24, r12
   13ad0:	f0 01       	movw	r30, r0
   13ad2:	8d 9d       	mul	r24, r13
   13ad4:	f0 0d       	add	r31, r0
					AMIGOp->HEADER.PPR = 0x07 & val.b;
   13ad6:	11 24       	eor	r1, r1
   13ad8:	e8 54       	subi	r30, 0x48	; 72
   13ada:	f1 4e       	sbci	r31, 0xE1	; 225
   13adc:	62 83       	std	Z+2, r22	; 0x02
   13ade:	c8 5f       	subi	r28, 0xF8	; 248
   13ae0:	de 4f       	sbci	r29, 0xFE	; 254
   13ae2:	e8 81       	ld	r30, Y
			{
            	case TOK_DRIVE:
					break;
            	case TOK_ADDRESS:
					Devices[index].ADDRESS = 0x1f & val.b;
					AMIGOp->HEADER.ADDRESS = 0x1f & val.b;
   13ae4:	f9 81       	ldd	r31, Y+1	; 0x01
					break;
   13ae6:	c8 50       	subi	r28, 0x08	; 8
            	case TOK_PPR:
					Devices[index].PPR = 0x07 & val.b;
					AMIGOp->HEADER.PPR = 0x07 & val.b;
   13ae8:	d1 40       	sbci	r29, 0x01	; 1
					break;
   13aea:	02 c0       	rjmp	.+4      	; 0x13af0 <Read_Config+0x6a0>
            	case TOK_FILE:
					AMIGOp->HEADER.NAME = stralloc(token);
   13aec:	6c 93       	st	X, r22
   13aee:	51 cd       	rjmp	.-1374   	; 0x13592 <Read_Config+0x142>
   13af0:	61 83       	std	Z+1, r22	; 0x01
   13af2:	4f cd       	rjmp	.-1378   	; 0x13592 <Read_Config+0x142>
   13af4:	c4 01       	movw	r24, r8
   13af6:	0e 94 4b 31 	call	0x6296	; 0x6296 <stralloc>
   13afa:	c8 5f       	subi	r28, 0xF8	; 248
   13afc:	de 4f       	sbci	r29, 0xFE	; 254
   13afe:	e8 81       	ld	r30, Y
   13b00:	f9 81       	ldd	r31, Y+1	; 0x01
					break;
   13b02:	c8 50       	subi	r28, 0x08	; 8
				default:
					printf("Unexpected HEADER CONFIG token: %s, at line:%d\n", ptr,lines);
   13b04:	d1 40       	sbci	r29, 0x01	; 1
   13b06:	93 83       	std	Z+3, r25	; 0x03
   13b08:	82 83       	std	Z+2, r24	; 0x02
   13b0a:	43 cd       	rjmp	.-1402   	; 0x13592 <Read_Config+0x142>
   13b0c:	ed b7       	in	r30, 0x3d	; 61
   13b0e:	fe b7       	in	r31, 0x3e	; 62
   13b10:	57 82       	std	Z+7, r5	; 0x07
   13b12:	46 82       	std	Z+6, r4	; 0x06
   13b14:	b5 82       	std	Z+5, r11	; 0x05
   13b16:	a4 82       	std	Z+4, r10	; 0x04
   13b18:	c9 5e       	subi	r28, 0xE9	; 233
   13b1a:	de 4f       	sbci	r29, 0xFE	; 254
   13b1c:	28 81       	ld	r18, Y
   13b1e:	39 81       	ldd	r19, Y+1	; 0x01
					break;
            }
            break;

        case AMIGO_CONFIG:
            if(tok == TOK_ID )
   13b20:	4a 81       	ldd	r20, Y+2	; 0x02
   13b22:	c7 51       	subi	r28, 0x17	; 23
   13b24:	d1 40       	sbci	r29, 0x01	; 1
			{
                AMIGOp->CONFIG.ID = val.w;
   13b26:	6e c0       	rjmp	.+220    	; 0x13c04 <Read_Config+0x7b4>
   13b28:	07 31       	cpi	r16, 0x17	; 23
   13b2a:	11 05       	cpc	r17, r1
   13b2c:	59 f4       	brne	.+22     	; 0x13b44 <Read_Config+0x6f4>
   13b2e:	96 2f       	mov	r25, r22
   13b30:	87 2f       	mov	r24, r23
   13b32:	c8 5f       	subi	r28, 0xF8	; 248
   13b34:	de 4f       	sbci	r29, 0xFE	; 254
   13b36:	e8 81       	ld	r30, Y
   13b38:	f9 81       	ldd	r31, Y+1	; 0x01
   13b3a:	c8 50       	subi	r28, 0x08	; 8
			}
            else
            {
                printf("Unexpected AMIGO CONFIG token: %s, at line:%d\n", ptr,lines);
   13b3c:	d1 40       	sbci	r29, 0x01	; 1
   13b3e:	94 83       	std	Z+4, r25	; 0x04
   13b40:	85 83       	std	Z+5, r24	; 0x05
   13b42:	27 cd       	rjmp	.-1458   	; 0x13592 <Read_Config+0x142>
   13b44:	ed b7       	in	r30, 0x3d	; 61
   13b46:	fe b7       	in	r31, 0x3e	; 62
   13b48:	57 82       	std	Z+7, r5	; 0x07
   13b4a:	46 82       	std	Z+6, r4	; 0x06
   13b4c:	b5 82       	std	Z+5, r11	; 0x05
   13b4e:	a4 82       	std	Z+4, r10	; 0x04
   13b50:	cc 5e       	subi	r28, 0xEC	; 236
   13b52:	de 4f       	sbci	r29, 0xFE	; 254
   13b54:	28 81       	ld	r18, Y
   13b56:	39 81       	ldd	r19, Y+1	; 0x01
                ++errors;
            }
            break;

        case AMIGO_GEOMETRY:
			switch(tok)
   13b58:	4a 81       	ldd	r20, Y+2	; 0x02
   13b5a:	c4 51       	subi	r28, 0x14	; 20
   13b5c:	d1 40       	sbci	r29, 0x01	; 1
   13b5e:	52 c0       	rjmp	.+164    	; 0x13c04 <Read_Config+0x7b4>
   13b60:	0d 30       	cpi	r16, 0x0D	; 13
   13b62:	11 05       	cpc	r17, r1
   13b64:	59 f1       	breq	.+86     	; 0x13bbc <Read_Config+0x76c>
			{
				case TOK_BYTES_PER_SECTOR:
					AMIGOp->GEOMETRY.BYTES_PER_SECTOR = val.w;
   13b66:	64 f4       	brge	.+24     	; 0x13b80 <Read_Config+0x730>
   13b68:	08 30       	cpi	r16, 0x08	; 8
   13b6a:	11 05       	cpc	r17, r1
   13b6c:	81 f5       	brne	.+96     	; 0x13bce <Read_Config+0x77e>
   13b6e:	96 2f       	mov	r25, r22
   13b70:	87 2f       	mov	r24, r23
   13b72:	c8 5f       	subi	r28, 0xF8	; 248
   13b74:	de 4f       	sbci	r29, 0xFE	; 254
   13b76:	e8 81       	ld	r30, Y
                ++errors;
            }
            break;

        case AMIGO_GEOMETRY:
			switch(tok)
   13b78:	f9 81       	ldd	r31, Y+1	; 0x01
   13b7a:	c8 50       	subi	r28, 0x08	; 8
   13b7c:	d1 40       	sbci	r29, 0x01	; 1
   13b7e:	0f c0       	rjmp	.+30     	; 0x13b9e <Read_Config+0x74e>
   13b80:	06 31       	cpi	r16, 0x16	; 22
   13b82:	11 05       	cpc	r17, r1
			{
				case TOK_BYTES_PER_SECTOR:
					AMIGOp->GEOMETRY.BYTES_PER_SECTOR = val.w;
					break;
				case TOK_SECTORS_PER_TRACK:
					AMIGOp->GEOMETRY.SECTORS_PER_TRACK = val.w;
   13b84:	91 f0       	breq	.+36     	; 0x13baa <Read_Config+0x75a>
   13b86:	02 32       	cpi	r16, 0x22	; 34
   13b88:	11 05       	cpc	r17, r1
   13b8a:	09 f5       	brne	.+66     	; 0x13bce <Read_Config+0x77e>
   13b8c:	96 2f       	mov	r25, r22
   13b8e:	87 2f       	mov	r24, r23
   13b90:	c8 5f       	subi	r28, 0xF8	; 248
   13b92:	de 4f       	sbci	r29, 0xFE	; 254
   13b94:	e8 81       	ld	r30, Y

        case AMIGO_GEOMETRY:
			switch(tok)
			{
				case TOK_BYTES_PER_SECTOR:
					AMIGOp->GEOMETRY.BYTES_PER_SECTOR = val.w;
   13b96:	f9 81       	ldd	r31, Y+1	; 0x01
   13b98:	c8 50       	subi	r28, 0x08	; 8
					break;
   13b9a:	d1 40       	sbci	r29, 0x01	; 1
				case TOK_SECTORS_PER_TRACK:
					AMIGOp->GEOMETRY.SECTORS_PER_TRACK = val.w;
   13b9c:	03 c0       	rjmp	.+6      	; 0x13ba4 <Read_Config+0x754>
   13b9e:	96 83       	std	Z+6, r25	; 0x06
					break;
   13ba0:	87 83       	std	Z+7, r24	; 0x07
				case TOK_HEADS:
					AMIGOp->GEOMETRY.HEADS = val.w;
   13ba2:	f7 cc       	rjmp	.-1554   	; 0x13592 <Read_Config+0x142>
   13ba4:	90 87       	std	Z+8, r25	; 0x08
   13ba6:	81 87       	std	Z+9, r24	; 0x09
   13ba8:	f4 cc       	rjmp	.-1560   	; 0x13592 <Read_Config+0x142>
   13baa:	c8 5f       	subi	r28, 0xF8	; 248
   13bac:	de 4f       	sbci	r29, 0xFE	; 254
   13bae:	e8 81       	ld	r30, Y
   13bb0:	f9 81       	ldd	r31, Y+1	; 0x01
					break;
   13bb2:	c8 50       	subi	r28, 0x08	; 8
            	case TOK_CYLINDERS:
					AMIGOp->GEOMETRY.CYLINDERS = val.w;
   13bb4:	d1 40       	sbci	r29, 0x01	; 1
   13bb6:	62 87       	std	Z+10, r22	; 0x0a
   13bb8:	73 87       	std	Z+11, r23	; 0x0b
   13bba:	eb cc       	rjmp	.-1578   	; 0x13592 <Read_Config+0x142>
   13bbc:	c8 5f       	subi	r28, 0xF8	; 248
   13bbe:	de 4f       	sbci	r29, 0xFE	; 254
   13bc0:	e8 81       	ld	r30, Y
   13bc2:	f9 81       	ldd	r31, Y+1	; 0x01
					break;
   13bc4:	c8 50       	subi	r28, 0x08	; 8
            	default:
					printf("Unexpected AMIGO GEMETRY token: %s, at line:%d\n", ptr,lines);
   13bc6:	d1 40       	sbci	r29, 0x01	; 1
   13bc8:	64 87       	std	Z+12, r22	; 0x0c
   13bca:	75 87       	std	Z+13, r23	; 0x0d
   13bcc:	e2 cc       	rjmp	.-1596   	; 0x13592 <Read_Config+0x142>
   13bce:	ed b7       	in	r30, 0x3d	; 61
   13bd0:	fe b7       	in	r31, 0x3e	; 62
   13bd2:	57 82       	std	Z+7, r5	; 0x07
   13bd4:	46 82       	std	Z+6, r4	; 0x06
   13bd6:	b5 82       	std	Z+5, r11	; 0x05
   13bd8:	a4 82       	std	Z+4, r10	; 0x04
   13bda:	cf 5e       	subi	r28, 0xEF	; 239
   13bdc:	de 4f       	sbci	r29, 0xFE	; 254
   13bde:	28 81       	ld	r18, Y
   13be0:	39 81       	ldd	r19, Y+1	; 0x01
					break;
            }
            break;
#endif // #ifdef AMIGO
        default:
            printf("Unexpected STATE: %s, at line:%d\n", ptr,lines);
   13be2:	4a 81       	ldd	r20, Y+2	; 0x02
   13be4:	c1 51       	subi	r28, 0x11	; 17
   13be6:	d1 40       	sbci	r29, 0x01	; 1
   13be8:	0d c0       	rjmp	.+26     	; 0x13c04 <Read_Config+0x7b4>
   13bea:	ed b7       	in	r30, 0x3d	; 61
   13bec:	fe b7       	in	r31, 0x3e	; 62
   13bee:	57 82       	std	Z+7, r5	; 0x07
   13bf0:	46 82       	std	Z+6, r4	; 0x06
   13bf2:	b5 82       	std	Z+5, r11	; 0x05
   13bf4:	a4 82       	std	Z+4, r10	; 0x04
   13bf6:	c2 5f       	subi	r28, 0xF2	; 242
   13bf8:	de 4f       	sbci	r29, 0xFE	; 254
   13bfa:	28 81       	ld	r18, Y
   13bfc:	39 81       	ldd	r19, Y+1	; 0x01
   13bfe:	4a 81       	ldd	r20, Y+2	; 0x02
   13c00:	ce 50       	subi	r28, 0x0E	; 14
   13c02:	d1 40       	sbci	r29, 0x01	; 1
   13c04:	21 83       	std	Z+1, r18	; 0x01
			++errors;
   13c06:	32 83       	std	Z+2, r19	; 0x02
   13c08:	43 83       	std	Z+3, r20	; 0x03
   13c0a:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
            break;

        } // switch
    } //while
    if(state != START_STATE)
   13c0e:	ff ef       	ldi	r31, 0xFF	; 255
   13c10:	ef 1a       	sub	r14, r31
   13c12:	ff 0a       	sbc	r15, r31
    {
        printf("Missing END statement at line:%d\n", lines);
   13c14:	be cc       	rjmp	.-1668   	; 0x13592 <Read_Config+0x142>
   13c16:	21 14       	cp	r2, r1
   13c18:	31 04       	cpc	r3, r1
   13c1a:	79 f0       	breq	.+30     	; 0x13c3a <Read_Config+0x7ea>
   13c1c:	ed b7       	in	r30, 0x3d	; 61
   13c1e:	fe b7       	in	r31, 0x3e	; 62
   13c20:	55 82       	std	Z+5, r5	; 0x05
   13c22:	44 82       	std	Z+4, r4	; 0x04
   13c24:	8f ee       	ldi	r24, 0xEF	; 239
   13c26:	98 e1       	ldi	r25, 0x18	; 24
   13c28:	a0 e0       	ldi	r26, 0x00	; 0
   13c2a:	81 83       	std	Z+1, r24	; 0x01
        ++errors;
   13c2c:	92 83       	std	Z+2, r25	; 0x02
   13c2e:	a3 83       	std	Z+3, r26	; 0x03
   13c30:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    }
    printf("Read_Config: read(%d) lines\n", lines);
   13c34:	ff ef       	ldi	r31, 0xFF	; 255
   13c36:	ef 1a       	sub	r14, r31
   13c38:	ff 0a       	sbc	r15, r31
   13c3a:	ed b7       	in	r30, 0x3d	; 61
   13c3c:	fe b7       	in	r31, 0x3e	; 62
   13c3e:	55 82       	std	Z+5, r5	; 0x05
   13c40:	44 82       	std	Z+4, r4	; 0x04
   13c42:	82 ed       	ldi	r24, 0xD2	; 210
   13c44:	98 e1       	ldi	r25, 0x18	; 24
   13c46:	a0 e0       	ldi	r26, 0x00	; 0
   13c48:	81 83       	std	Z+1, r24	; 0x01
    if(errors)
   13c4a:	92 83       	std	Z+2, r25	; 0x02
   13c4c:	a3 83       	std	Z+3, r26	; 0x03
   13c4e:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
        printf("Read_Config: ****** errors(%d) ******\n", errors);
   13c52:	e1 14       	cp	r14, r1
   13c54:	f1 04       	cpc	r15, r1
   13c56:	61 f0       	breq	.+24     	; 0x13c70 <Read_Config+0x820>
   13c58:	ed b7       	in	r30, 0x3d	; 61
   13c5a:	fe b7       	in	r31, 0x3e	; 62
   13c5c:	f5 82       	std	Z+5, r15	; 0x05
   13c5e:	e4 82       	std	Z+4, r14	; 0x04
   13c60:	8b ea       	ldi	r24, 0xAB	; 171
   13c62:	98 e1       	ldi	r25, 0x18	; 24
   13c64:	a0 e0       	ldi	r26, 0x00	; 0

    if(fclose(cfg) == EOF)
   13c66:	81 83       	std	Z+1, r24	; 0x01
   13c68:	92 83       	std	Z+2, r25	; 0x02
   13c6a:	a3 83       	std	Z+3, r26	; 0x03
   13c6c:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   13c70:	c4 5f       	subi	r28, 0xF4	; 244
   13c72:	de 4f       	sbci	r29, 0xFE	; 254
   13c74:	88 81       	ld	r24, Y
   13c76:	99 81       	ldd	r25, Y+1	; 0x01
   13c78:	cc 50       	subi	r28, 0x0C	; 12
    {
        perror("Read_Config - close error");
   13c7a:	d1 40       	sbci	r29, 0x01	; 1
   13c7c:	0e 94 26 7c 	call	0xf84c	; 0xf84c <fclose>
   13c80:	01 96       	adiw	r24, 0x01	; 1
        ++errors;
   13c82:	39 f4       	brne	.+14     	; 0x13c92 <Read_Config+0x842>
   13c84:	82 e4       	ldi	r24, 0x42	; 66
   13c86:	9e e0       	ldi	r25, 0x0E	; 14
    }

	// Post process device values
	Post_Config();
   13c88:	0e 94 ad 77 	call	0xef5a	; 0xef5a <perror>

    return(errors);
   13c8c:	2f ef       	ldi	r18, 0xFF	; 255
}
   13c8e:	e2 1a       	sub	r14, r18
   13c90:	f2 0a       	sbc	r15, r18
   13c92:	48 db       	rcall	.-2416   	; 0x13324 <Post_Config>
   13c94:	c7 01       	movw	r24, r14
   13c96:	c1 5e       	subi	r28, 0xE1	; 225
   13c98:	de 4f       	sbci	r29, 0xFE	; 254
   13c9a:	e2 e1       	ldi	r30, 0x12	; 18
   13c9c:	0c 94 fa df 	jmp	0x1bff4	; 0x1bff4 <__epilogue_restores__>

00013ca0 <format_drives>:

/// ===============================================
/// @brief Format devices that have no image file
/// @return  void
void format_drives()
{
   13ca0:	2f 92       	push	r2
   13ca2:	3f 92       	push	r3
   13ca4:	4f 92       	push	r4
   13ca6:	5f 92       	push	r5
   13ca8:	6f 92       	push	r6
   13caa:	7f 92       	push	r7
   13cac:	8f 92       	push	r8
   13cae:	af 92       	push	r10
   13cb0:	bf 92       	push	r11
   13cb2:	cf 92       	push	r12
   13cb4:	df 92       	push	r13
   13cb6:	ef 92       	push	r14
   13cb8:	ff 92       	push	r15
   13cba:	0f 93       	push	r16
   13cbc:	1f 93       	push	r17
   13cbe:	cf 93       	push	r28
   13cc0:	df 93       	push	r29
   13cc2:	cd b7       	in	r28, 0x3d	; 61
   13cc4:	de b7       	in	r29, 0x3e	; 62
   13cc6:	ce 56       	subi	r28, 0x6E	; 110
   13cc8:	d1 09       	sbc	r29, r1
   13cca:	0f b6       	in	r0, 0x3f	; 63
   13ccc:	f8 94       	cli
   13cce:	de bf       	out	0x3e, r29	; 62
   13cd0:	0f be       	out	0x3f, r0	; 63
   13cd2:	cd bf       	out	0x3d, r28	; 61
   13cd4:	88 eb       	ldi	r24, 0xB8	; 184
   13cd6:	c8 2e       	mov	r12, r24
   13cd8:	8e e1       	ldi	r24, 0x1E	; 30
   13cda:	d8 2e       	mov	r13, r24
    struct stat st;
    long sectors;
    char label[32];
    int count =0;
	int ss80 = 0;
	int amigo = 0;
   13cdc:	a0 96       	adiw	r28, 0x20	; 32
   13cde:	1f ae       	std	Y+63, r1	; 0x3f
   13ce0:	1e ae       	std	Y+62, r1	; 0x3e
   13ce2:	a0 97       	sbiw	r28, 0x20	; 32
    int i;
    struct stat st;
    long sectors;
    char label[32];
    int count =0;
	int ss80 = 0;
   13ce4:	6e 96       	adiw	r28, 0x1e	; 30
   13ce6:	1f ae       	std	Y+63, r1	; 0x3f
   13ce8:	1e ae       	std	Y+62, r1	; 0x3e
   13cea:	6e 97       	sbiw	r28, 0x1e	; 30
{
    int i;
    struct stat st;
    long sectors;
    char label[32];
    int count =0;
   13cec:	6c 96       	adiw	r28, 0x1c	; 28
   13cee:	1f ae       	std	Y+63, r1	; 0x3f
   13cf0:	1e ae       	std	Y+62, r1	; 0x3e
   13cf2:	6c 97       	sbiw	r28, 0x1c	; 28
                {
                    printf("Can not use non 256 byte sectors\n");
                    continue;
                }
                sectors = Devices[i].BLOCKS;
				printf("formating %s %ld sectors\n", AMIGOp->HEADER.NAME, (long) sectors);
   13cf4:	8f e5       	ldi	r24, 0x5F	; 95
   13cf6:	95 e1       	ldi	r25, 0x15	; 21
   13cf8:	9c 01       	movw	r18, r24
   13cfa:	40 e0       	ldi	r20, 0x00	; 0
   13cfc:	a3 96       	adiw	r28, 0x23	; 35
   13cfe:	2d af       	std	Y+61, r18	; 0x3d
   13d00:	3e af       	std	Y+62, r19	; 0x3e
   13d02:	4f af       	std	Y+63, r20	; 0x3f
   13d04:	a3 97       	sbiw	r28, 0x23	; 35
                sprintf(label,"AMIGO%d", amigo);
   13d06:	87 e5       	ldi	r24, 0x57	; 87
   13d08:	95 e1       	ldi	r25, 0x15	; 21
   13d0a:	9c 01       	movw	r18, r24
   13d0c:	40 e0       	ldi	r20, 0x00	; 0
   13d0e:	a6 96       	adiw	r28, 0x26	; 38
   13d10:	2d af       	std	Y+61, r18	; 0x3d
   13d12:	3e af       	std	Y+62, r19	; 0x3e
   13d14:	4f af       	std	Y+63, r20	; 0x3f
   13d16:	a6 97       	sbiw	r28, 0x26	; 38
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
            if(stat(AMIGOp->HEADER.NAME, &st) == -1) 
            {
                if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
                {
                    printf("Can not use non 256 byte sectors\n");
   13d18:	89 e7       	ldi	r24, 0x79	; 121
   13d1a:	95 e1       	ldi	r25, 0x15	; 21
   13d1c:	9c 01       	movw	r18, r24
   13d1e:	40 e0       	ldi	r20, 0x00	; 0
   13d20:	a9 96       	adiw	r28, 0x29	; 41
   13d22:	2d af       	std	Y+61, r18	; 0x3d
   13d24:	3e af       	std	Y+62, r19	; 0x3e
   13d26:	4f af       	std	Y+63, r20	; 0x3f
   13d28:	a9 97       	sbiw	r28, 0x29	; 41
                }
                //SS80p->VOLUME.MAX_CYLINDER;
                //SS80p->VOLUME.MAX_HEAD;
                //SS80p->VOLUME.MAX_SECTOR;
                sectors = Devices[i].BLOCKS;
				printf("formating %s %ld sectors\n", SS80p->HEADER.NAME, (long) sectors);
   13d2a:	83 ea       	ldi	r24, 0xA3	; 163
   13d2c:	95 e1       	ldi	r25, 0x15	; 21
   13d2e:	9c 01       	movw	r18, r24
   13d30:	40 e0       	ldi	r20, 0x00	; 0
   13d32:	ac 96       	adiw	r28, 0x2c	; 44
   13d34:	2d af       	std	Y+61, r18	; 0x3d
   13d36:	3e af       	std	Y+62, r19	; 0x3e
   13d38:	4f af       	std	Y+63, r20	; 0x3f
   13d3a:	ac 97       	sbiw	r28, 0x2c	; 44
                sprintf(label,"SS80-%d", ss80);
   13d3c:	8b e9       	ldi	r24, 0x9B	; 155
   13d3e:	95 e1       	ldi	r25, 0x15	; 21
   13d40:	9c 01       	movw	r18, r24
   13d42:	40 e0       	ldi	r20, 0x00	; 0
   13d44:	af 96       	adiw	r28, 0x2f	; 47
   13d46:	2d af       	std	Y+61, r18	; 0x3d
   13d48:	3e af       	std	Y+62, r19	; 0x3e
   13d4a:	4f af       	std	Y+63, r20	; 0x3f
   13d4c:	af 97       	sbiw	r28, 0x2f	; 47

            if(stat(SS80p->HEADER.NAME, &st) == -1) 
            {
                if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
                {
                    printf("Can not use non 256 byte sectors\n");
   13d4e:	8d eb       	ldi	r24, 0xBD	; 189
   13d50:	95 e1       	ldi	r25, 0x15	; 21
   13d52:	3c 01       	movw	r6, r24
   13d54:	81 2c       	mov	r8, r1
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   13d56:	f6 01       	movw	r30, r12
   13d58:	80 81       	ld	r24, Z
   13d5a:	88 23       	and	r24, r24
   13d5c:	09 f4       	brne	.+2      	; 0x13d60 <format_drives+0xc0>
   13d5e:	ef c0       	rjmp	.+478    	; 0x13f3e <format_drives+0x29e>
            continue;

        if(Devices[i].TYPE == SS80_TYPE)
   13d60:	83 30       	cpi	r24, 0x03	; 3
   13d62:	09 f0       	breq	.+2      	; 0x13d66 <format_drives+0xc6>
   13d64:	70 c0       	rjmp	.+224    	; 0x13e46 <format_drives+0x1a6>
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
   13d66:	a7 a0       	ldd	r10, Z+39	; 0x27
   13d68:	b0 a4       	ldd	r11, Z+40	; 0x28

            if(stat(SS80p->HEADER.NAME, &st) == -1) 
   13d6a:	be 01       	movw	r22, r28
   13d6c:	66 5f       	subi	r22, 0xF6	; 246
   13d6e:	7f 4f       	sbci	r23, 0xFF	; 255
   13d70:	f5 01       	movw	r30, r10
   13d72:	82 81       	ldd	r24, Z+2	; 0x02
   13d74:	93 81       	ldd	r25, Z+3	; 0x03
   13d76:	0e 94 81 78 	call	0xf102	; 0xf102 <stat>
   13d7a:	01 96       	adiw	r24, 0x01	; 1
   13d7c:	09 f0       	breq	.+2      	; 0x13d80 <format_drives+0xe0>
   13d7e:	63 c0       	rjmp	.+198    	; 0x13e46 <format_drives+0x1a6>
            {
                if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
   13d80:	f5 01       	movw	r30, r10
   13d82:	80 89       	ldd	r24, Z+16	; 0x10
   13d84:	91 89       	ldd	r25, Z+17	; 0x11
   13d86:	81 15       	cp	r24, r1
   13d88:	91 40       	sbci	r25, 0x01	; 1
   13d8a:	31 f0       	breq	.+12     	; 0x13d98 <format_drives+0xf8>
                {
                    printf("Can not use non 256 byte sectors\n");
   13d8c:	ed b7       	in	r30, 0x3d	; 61
   13d8e:	fe b7       	in	r31, 0x3e	; 62
   13d90:	61 82       	std	Z+1, r6	; 0x01
   13d92:	72 82       	std	Z+2, r7	; 0x02
   13d94:	83 82       	std	Z+3, r8	; 0x03
   13d96:	79 c0       	rjmp	.+242    	; 0x13e8a <format_drives+0x1ea>
                    continue;
                }
                //SS80p->VOLUME.MAX_CYLINDER;
                //SS80p->VOLUME.MAX_HEAD;
                //SS80p->VOLUME.MAX_SECTOR;
                sectors = Devices[i].BLOCKS;
   13d98:	f6 01       	movw	r30, r12
   13d9a:	23 80       	ldd	r2, Z+3	; 0x03
   13d9c:	34 80       	ldd	r3, Z+4	; 0x04
   13d9e:	45 80       	ldd	r4, Z+5	; 0x05
   13da0:	56 80       	ldd	r5, Z+6	; 0x06
				printf("formating %s %ld sectors\n", SS80p->HEADER.NAME, (long) sectors);
   13da2:	ed b7       	in	r30, 0x3d	; 61
   13da4:	fe b7       	in	r31, 0x3e	; 62
   13da6:	26 82       	std	Z+6, r2	; 0x06
   13da8:	37 82       	std	Z+7, r3	; 0x07
   13daa:	40 86       	std	Z+8, r4	; 0x08
   13dac:	51 86       	std	Z+9, r5	; 0x09
   13dae:	f5 01       	movw	r30, r10
   13db0:	82 81       	ldd	r24, Z+2	; 0x02
   13db2:	93 81       	ldd	r25, Z+3	; 0x03
   13db4:	ed b7       	in	r30, 0x3d	; 61
   13db6:	fe b7       	in	r31, 0x3e	; 62
   13db8:	95 83       	std	Z+5, r25	; 0x05
   13dba:	84 83       	std	Z+4, r24	; 0x04
   13dbc:	ac 96       	adiw	r28, 0x2c	; 44
   13dbe:	2d ad       	ldd	r18, Y+61	; 0x3d
   13dc0:	3e ad       	ldd	r19, Y+62	; 0x3e
   13dc2:	4f ad       	ldd	r20, Y+63	; 0x3f
   13dc4:	ac 97       	sbiw	r28, 0x2c	; 44
   13dc6:	21 83       	std	Z+1, r18	; 0x01
   13dc8:	32 83       	std	Z+2, r19	; 0x02
   13dca:	43 83       	std	Z+3, r20	; 0x03
   13dcc:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
                sprintf(label,"SS80-%d", ss80);
   13dd0:	6e 96       	adiw	r28, 0x1e	; 30
   13dd2:	2e ad       	ldd	r18, Y+62	; 0x3e
   13dd4:	3f ad       	ldd	r19, Y+63	; 0x3f
   13dd6:	6e 97       	sbiw	r28, 0x1e	; 30
   13dd8:	ed b7       	in	r30, 0x3d	; 61
   13dda:	fe b7       	in	r31, 0x3e	; 62
   13ddc:	37 83       	std	Z+7, r19	; 0x07
   13dde:	26 83       	std	Z+6, r18	; 0x06
   13de0:	af 96       	adiw	r28, 0x2f	; 47
   13de2:	8d ad       	ldd	r24, Y+61	; 0x3d
   13de4:	9e ad       	ldd	r25, Y+62	; 0x3e
   13de6:	af ad       	ldd	r26, Y+63	; 0x3f
   13de8:	af 97       	sbiw	r28, 0x2f	; 47
   13dea:	83 83       	std	Z+3, r24	; 0x03
   13dec:	94 83       	std	Z+4, r25	; 0x04
   13dee:	a5 83       	std	Z+5, r26	; 0x05
   13df0:	2a e3       	ldi	r18, 0x3A	; 58
   13df2:	30 e0       	ldi	r19, 0x00	; 0
   13df4:	2c 0f       	add	r18, r28
   13df6:	3d 1f       	adc	r19, r29
   13df8:	32 83       	std	Z+2, r19	; 0x02
   13dfa:	21 83       	std	Z+1, r18	; 0x01
   13dfc:	0e 94 91 45 	call	0x8b22	; 0x8b22 <sprintf_P>
#ifdef LIF_SUPPORT
                lif_create_image(SS80p->HEADER.NAME,
   13e00:	f5 01       	movw	r30, r10
   13e02:	a2 80       	ldd	r10, Z+2	; 0x02
   13e04:	b3 80       	ldd	r11, Z+3	; 0x03
                    label,
                    lif_dir_count(sectors), 
   13e06:	c2 01       	movw	r24, r4
   13e08:	b1 01       	movw	r22, r2
   13e0a:	41 d1       	rcall	.+642    	; 0x1408e <lif_dir_count>
   13e0c:	9b 01       	movw	r18, r22
   13e0e:	ac 01       	movw	r20, r24
                //SS80p->VOLUME.MAX_SECTOR;
                sectors = Devices[i].BLOCKS;
				printf("formating %s %ld sectors\n", SS80p->HEADER.NAME, (long) sectors);
                sprintf(label,"SS80-%d", ss80);
#ifdef LIF_SUPPORT
                lif_create_image(SS80p->HEADER.NAME,
   13e10:	82 01       	movw	r16, r4
   13e12:	71 01       	movw	r14, r2
   13e14:	be 01       	movw	r22, r28
   13e16:	66 5c       	subi	r22, 0xC6	; 198
   13e18:	7f 4f       	sbci	r23, 0xFF	; 255
   13e1a:	c5 01       	movw	r24, r10
   13e1c:	0e 94 4c da 	call	0x1b498	; 0x1b498 <lif_create_image>
                    lif_dir_count(sectors), 
                    sectors);
#else
                printf("please create a SS80 LIF image with %ld sectors and 128 directory sectors\n", sectors);
#endif
				++count;
   13e20:	6c 96       	adiw	r28, 0x1c	; 28
   13e22:	2e ad       	ldd	r18, Y+62	; 0x3e
   13e24:	3f ad       	ldd	r19, Y+63	; 0x3f
   13e26:	6c 97       	sbiw	r28, 0x1c	; 28
   13e28:	2f 5f       	subi	r18, 0xFF	; 255
   13e2a:	3f 4f       	sbci	r19, 0xFF	; 255
   13e2c:	6c 96       	adiw	r28, 0x1c	; 28
   13e2e:	3f af       	std	Y+63, r19	; 0x3f
   13e30:	2e af       	std	Y+62, r18	; 0x3e
   13e32:	6c 97       	sbiw	r28, 0x1c	; 28
				++ss80;
   13e34:	6e 96       	adiw	r28, 0x1e	; 30
   13e36:	8e ad       	ldd	r24, Y+62	; 0x3e
   13e38:	9f ad       	ldd	r25, Y+63	; 0x3f
   13e3a:	6e 97       	sbiw	r28, 0x1e	; 30
   13e3c:	01 96       	adiw	r24, 0x01	; 1
   13e3e:	6e 96       	adiw	r28, 0x1e	; 30
   13e40:	9f af       	std	Y+63, r25	; 0x3f
   13e42:	8e af       	std	Y+62, r24	; 0x3e
   13e44:	6e 97       	sbiw	r28, 0x1e	; 30

            }
        } // SS80_TYPE

#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   13e46:	f6 01       	movw	r30, r12
   13e48:	80 81       	ld	r24, Z
   13e4a:	81 30       	cpi	r24, 0x01	; 1
   13e4c:	09 f0       	breq	.+2      	; 0x13e50 <format_drives+0x1b0>
   13e4e:	77 c0       	rjmp	.+238    	; 0x13f3e <format_drives+0x29e>
        {
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
   13e50:	a7 a0       	ldd	r10, Z+39	; 0x27
   13e52:	b0 a4       	ldd	r11, Z+40	; 0x28
            if(stat(AMIGOp->HEADER.NAME, &st) == -1) 
   13e54:	be 01       	movw	r22, r28
   13e56:	66 5f       	subi	r22, 0xF6	; 246
   13e58:	7f 4f       	sbci	r23, 0xFF	; 255
   13e5a:	f5 01       	movw	r30, r10
   13e5c:	82 81       	ldd	r24, Z+2	; 0x02
   13e5e:	93 81       	ldd	r25, Z+3	; 0x03
   13e60:	0e 94 81 78 	call	0xf102	; 0xf102 <stat>
   13e64:	01 96       	adiw	r24, 0x01	; 1
   13e66:	09 f0       	breq	.+2      	; 0x13e6a <format_drives+0x1ca>
   13e68:	6a c0       	rjmp	.+212    	; 0x13f3e <format_drives+0x29e>
            {
                if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
   13e6a:	f5 01       	movw	r30, r10
   13e6c:	86 81       	ldd	r24, Z+6	; 0x06
   13e6e:	97 81       	ldd	r25, Z+7	; 0x07
   13e70:	81 15       	cp	r24, r1
   13e72:	91 40       	sbci	r25, 0x01	; 1
   13e74:	69 f0       	breq	.+26     	; 0x13e90 <format_drives+0x1f0>
                {
                    printf("Can not use non 256 byte sectors\n");
   13e76:	a9 96       	adiw	r28, 0x29	; 41
   13e78:	2d ad       	ldd	r18, Y+61	; 0x3d
   13e7a:	3e ad       	ldd	r19, Y+62	; 0x3e
   13e7c:	4f ad       	ldd	r20, Y+63	; 0x3f
   13e7e:	a9 97       	sbiw	r28, 0x29	; 41
   13e80:	ed b7       	in	r30, 0x3d	; 61
   13e82:	fe b7       	in	r31, 0x3e	; 62
   13e84:	21 83       	std	Z+1, r18	; 0x01
   13e86:	32 83       	std	Z+2, r19	; 0x02
   13e88:	43 83       	std	Z+3, r20	; 0x03
   13e8a:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
                    continue;
   13e8e:	57 c0       	rjmp	.+174    	; 0x13f3e <format_drives+0x29e>
                }
                sectors = Devices[i].BLOCKS;
   13e90:	f6 01       	movw	r30, r12
   13e92:	23 80       	ldd	r2, Z+3	; 0x03
   13e94:	34 80       	ldd	r3, Z+4	; 0x04
   13e96:	45 80       	ldd	r4, Z+5	; 0x05
   13e98:	56 80       	ldd	r5, Z+6	; 0x06
				printf("formating %s %ld sectors\n", AMIGOp->HEADER.NAME, (long) sectors);
   13e9a:	ed b7       	in	r30, 0x3d	; 61
   13e9c:	fe b7       	in	r31, 0x3e	; 62
   13e9e:	26 82       	std	Z+6, r2	; 0x06
   13ea0:	37 82       	std	Z+7, r3	; 0x07
   13ea2:	40 86       	std	Z+8, r4	; 0x08
   13ea4:	51 86       	std	Z+9, r5	; 0x09
   13ea6:	f5 01       	movw	r30, r10
   13ea8:	82 81       	ldd	r24, Z+2	; 0x02
   13eaa:	93 81       	ldd	r25, Z+3	; 0x03
   13eac:	ed b7       	in	r30, 0x3d	; 61
   13eae:	fe b7       	in	r31, 0x3e	; 62
   13eb0:	95 83       	std	Z+5, r25	; 0x05
   13eb2:	84 83       	std	Z+4, r24	; 0x04
   13eb4:	a3 96       	adiw	r28, 0x23	; 35
   13eb6:	2d ad       	ldd	r18, Y+61	; 0x3d
   13eb8:	3e ad       	ldd	r19, Y+62	; 0x3e
   13eba:	4f ad       	ldd	r20, Y+63	; 0x3f
   13ebc:	a3 97       	sbiw	r28, 0x23	; 35
   13ebe:	21 83       	std	Z+1, r18	; 0x01
   13ec0:	32 83       	std	Z+2, r19	; 0x02
   13ec2:	43 83       	std	Z+3, r20	; 0x03
   13ec4:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
                sprintf(label,"AMIGO%d", amigo);
   13ec8:	a0 96       	adiw	r28, 0x20	; 32
   13eca:	2e ad       	ldd	r18, Y+62	; 0x3e
   13ecc:	3f ad       	ldd	r19, Y+63	; 0x3f
   13ece:	a0 97       	sbiw	r28, 0x20	; 32
   13ed0:	ed b7       	in	r30, 0x3d	; 61
   13ed2:	fe b7       	in	r31, 0x3e	; 62
   13ed4:	37 83       	std	Z+7, r19	; 0x07
   13ed6:	26 83       	std	Z+6, r18	; 0x06
   13ed8:	a6 96       	adiw	r28, 0x26	; 38
   13eda:	8d ad       	ldd	r24, Y+61	; 0x3d
   13edc:	9e ad       	ldd	r25, Y+62	; 0x3e
   13ede:	af ad       	ldd	r26, Y+63	; 0x3f
   13ee0:	a6 97       	sbiw	r28, 0x26	; 38
   13ee2:	83 83       	std	Z+3, r24	; 0x03
   13ee4:	94 83       	std	Z+4, r25	; 0x04
   13ee6:	a5 83       	std	Z+5, r26	; 0x05
   13ee8:	2a e3       	ldi	r18, 0x3A	; 58
   13eea:	30 e0       	ldi	r19, 0x00	; 0
   13eec:	2c 0f       	add	r18, r28
   13eee:	3d 1f       	adc	r19, r29
   13ef0:	32 83       	std	Z+2, r19	; 0x02
   13ef2:	21 83       	std	Z+1, r18	; 0x01
   13ef4:	0e 94 91 45 	call	0x8b22	; 0x8b22 <sprintf_P>
#ifdef LIF_SUPPORT
                lif_create_image(AMIGOp->HEADER.NAME,
   13ef8:	f5 01       	movw	r30, r10
   13efa:	a2 80       	ldd	r10, Z+2	; 0x02
   13efc:	b3 80       	ldd	r11, Z+3	; 0x03
                    label,
                    lif_dir_count(sectors), 
   13efe:	c2 01       	movw	r24, r4
   13f00:	b1 01       	movw	r22, r2
   13f02:	c5 d0       	rcall	.+394    	; 0x1408e <lif_dir_count>
   13f04:	9b 01       	movw	r18, r22
   13f06:	ac 01       	movw	r20, r24
                }
                sectors = Devices[i].BLOCKS;
				printf("formating %s %ld sectors\n", AMIGOp->HEADER.NAME, (long) sectors);
                sprintf(label,"AMIGO%d", amigo);
#ifdef LIF_SUPPORT
                lif_create_image(AMIGOp->HEADER.NAME,
   13f08:	82 01       	movw	r16, r4
   13f0a:	71 01       	movw	r14, r2
   13f0c:	be 01       	movw	r22, r28
   13f0e:	66 5c       	subi	r22, 0xC6	; 198
   13f10:	7f 4f       	sbci	r23, 0xFF	; 255
   13f12:	c5 01       	movw	r24, r10
   13f14:	0e 94 4c da 	call	0x1b498	; 0x1b498 <lif_create_image>
                    lif_dir_count(sectors), 
                    sectors);
#else
                printf("please create a AMIGO LIF image with %ld sectors and 15 directory sectors\n", sectors);
#endif
				++count;
   13f18:	6c 96       	adiw	r28, 0x1c	; 28
   13f1a:	2e ad       	ldd	r18, Y+62	; 0x3e
   13f1c:	3f ad       	ldd	r19, Y+63	; 0x3f
   13f1e:	6c 97       	sbiw	r28, 0x1c	; 28
   13f20:	2f 5f       	subi	r18, 0xFF	; 255
   13f22:	3f 4f       	sbci	r19, 0xFF	; 255
   13f24:	6c 96       	adiw	r28, 0x1c	; 28
   13f26:	3f af       	std	Y+63, r19	; 0x3f
   13f28:	2e af       	std	Y+62, r18	; 0x3e
   13f2a:	6c 97       	sbiw	r28, 0x1c	; 28
				++amigo;
   13f2c:	a0 96       	adiw	r28, 0x20	; 32
   13f2e:	8e ad       	ldd	r24, Y+62	; 0x3e
   13f30:	9f ad       	ldd	r25, Y+63	; 0x3f
   13f32:	a0 97       	sbiw	r28, 0x20	; 32
   13f34:	01 96       	adiw	r24, 0x01	; 1
   13f36:	a0 96       	adiw	r28, 0x20	; 32
   13f38:	9f af       	std	Y+63, r25	; 0x3f
   13f3a:	8e af       	std	Y+62, r24	; 0x3e
   13f3c:	a0 97       	sbiw	r28, 0x20	; 32
   13f3e:	9b e2       	ldi	r25, 0x2B	; 43
   13f40:	c9 0e       	add	r12, r25
   13f42:	d1 1c       	adc	r13, r1
#ifdef AMIGO
    ///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
   13f44:	ac eb       	ldi	r26, 0xBC	; 188
   13f46:	ca 16       	cp	r12, r26
   13f48:	a0 e2       	ldi	r26, 0x20	; 32
   13f4a:	da 06       	cpc	r13, r26
   13f4c:	09 f0       	breq	.+2      	; 0x13f50 <format_drives+0x2b0>
   13f4e:	03 cf       	rjmp	.-506    	; 0x13d56 <format_drives+0xb6>
				++amigo;
            }
        } 
#endif // #ifdef AMIGO
    }
	if(count)
   13f50:	6c 96       	adiw	r28, 0x1c	; 28
   13f52:	ee ad       	ldd	r30, Y+62	; 0x3e
   13f54:	ff ad       	ldd	r31, Y+63	; 0x3f
   13f56:	6c 97       	sbiw	r28, 0x1c	; 28
   13f58:	ef 2b       	or	r30, r31
   13f5a:	11 f0       	breq	.+4      	; 0x13f60 <format_drives+0x2c0>
		sep();
   13f5c:	0e 94 6b 31 	call	0x62d6	; 0x62d6 <sep>
}
   13f60:	c2 59       	subi	r28, 0x92	; 146
   13f62:	df 4f       	sbci	r29, 0xFF	; 255
   13f64:	0f b6       	in	r0, 0x3f	; 63
   13f66:	f8 94       	cli
   13f68:	de bf       	out	0x3e, r29	; 62
   13f6a:	0f be       	out	0x3f, r0	; 63
   13f6c:	cd bf       	out	0x3d, r28	; 61
   13f6e:	df 91       	pop	r29
   13f70:	cf 91       	pop	r28
   13f72:	1f 91       	pop	r17
   13f74:	0f 91       	pop	r16
   13f76:	ff 90       	pop	r15
   13f78:	ef 90       	pop	r14
   13f7a:	df 90       	pop	r13
   13f7c:	cf 90       	pop	r12
   13f7e:	bf 90       	pop	r11
   13f80:	af 90       	pop	r10
   13f82:	8f 90       	pop	r8
   13f84:	7f 90       	pop	r7
   13f86:	6f 90       	pop	r6
   13f88:	5f 90       	pop	r5
   13f8a:	4f 90       	pop	r4
   13f8c:	3f 90       	pop	r3
   13f8e:	2f 90       	pop	r2
   13f90:	08 95       	ret

00013f92 <hpdir_init>:
/// disk parameters from a single hpdir disk entry
///
///@return void
void hpdir_init()
{
    memset(hpdir.model,0,sizeof(hpdir.model) -1);		// 1
   13f92:	8f e1       	ldi	r24, 0x1F	; 31
   13f94:	ec eb       	ldi	r30, 0xBC	; 188
   13f96:	f0 e2       	ldi	r31, 0x20	; 32
   13f98:	df 01       	movw	r26, r30
   13f9a:	98 2f       	mov	r25, r24
   13f9c:	1d 92       	st	X+, r1
   13f9e:	9a 95       	dec	r25
   13fa0:	e9 f7       	brne	.-6      	; 0x13f9c <hpdir_init+0xa>
    memset(hpdir.comment,0,sizeof(hpdir.comment) -1);	// 2
   13fa2:	9f e3       	ldi	r25, 0x3F	; 63
   13fa4:	ec ed       	ldi	r30, 0xDC	; 220
   13fa6:	f0 e2       	ldi	r31, 0x20	; 32
   13fa8:	df 01       	movw	r26, r30
   13faa:	1d 92       	st	X+, r1
   13fac:	9a 95       	dec	r25
   13fae:	e9 f7       	brne	.-6      	; 0x13faa <hpdir_init+0x18>
    memset(hpdir.TYPE,0,sizeof(hpdir.TYPE) -1);		// 3
   13fb0:	ec e1       	ldi	r30, 0x1C	; 28
   13fb2:	f1 e2       	ldi	r31, 0x21	; 33
   13fb4:	df 01       	movw	r26, r30
   13fb6:	1d 92       	st	X+, r1
   13fb8:	8a 95       	dec	r24
   13fba:	e9 f7       	brne	.-6      	; 0x13fb6 <hpdir_init+0x24>
    hpdir.ID = 0;						// 4
   13fbc:	10 92 3c 21 	sts	0x213C, r1	; 0x80213c <hpdir+0x80>
   13fc0:	10 92 3d 21 	sts	0x213D, r1	; 0x80213d <hpdir+0x81>
   13fc4:	10 92 3e 21 	sts	0x213E, r1	; 0x80213e <hpdir+0x82>
   13fc8:	10 92 3f 21 	sts	0x213F, r1	; 0x80213f <hpdir+0x83>
	hpdir.mask_stat2 = 0;				// 5
   13fcc:	10 92 40 21 	sts	0x2140, r1	; 0x802140 <hpdir+0x84>
   13fd0:	10 92 41 21 	sts	0x2141, r1	; 0x802141 <hpdir+0x85>
   13fd4:	10 92 42 21 	sts	0x2142, r1	; 0x802142 <hpdir+0x86>
   13fd8:	10 92 43 21 	sts	0x2143, r1	; 0x802143 <hpdir+0x87>
	hpdir.id_stat2 = 0;					// 6
   13fdc:	10 92 44 21 	sts	0x2144, r1	; 0x802144 <hpdir+0x88>
   13fe0:	10 92 45 21 	sts	0x2145, r1	; 0x802145 <hpdir+0x89>
   13fe4:	10 92 46 21 	sts	0x2146, r1	; 0x802146 <hpdir+0x8a>
   13fe8:	10 92 47 21 	sts	0x2147, r1	; 0x802147 <hpdir+0x8b>
	hpdir.DEVICE_NUMBER = 0;			// 7
   13fec:	10 92 48 21 	sts	0x2148, r1	; 0x802148 <hpdir+0x8c>
   13ff0:	10 92 49 21 	sts	0x2149, r1	; 0x802149 <hpdir+0x8d>
   13ff4:	10 92 4a 21 	sts	0x214A, r1	; 0x80214a <hpdir+0x8e>
   13ff8:	10 92 4b 21 	sts	0x214B, r1	; 0x80214b <hpdir+0x8f>
	hpdir.UNITS_INSTALLED = 0x8001;		// 8
   13ffc:	81 e0       	ldi	r24, 0x01	; 1
   13ffe:	90 e8       	ldi	r25, 0x80	; 128
   14000:	a0 e0       	ldi	r26, 0x00	; 0
   14002:	b0 e0       	ldi	r27, 0x00	; 0
   14004:	80 93 4c 21 	sts	0x214C, r24	; 0x80214c <hpdir+0x90>
   14008:	90 93 4d 21 	sts	0x214D, r25	; 0x80214d <hpdir+0x91>
   1400c:	a0 93 4e 21 	sts	0x214E, r26	; 0x80214e <hpdir+0x92>
   14010:	b0 93 4f 21 	sts	0x214F, r27	; 0x80214f <hpdir+0x93>
	hpdir.CYLINDERS = 0;  				// 9
   14014:	10 92 50 21 	sts	0x2150, r1	; 0x802150 <hpdir+0x94>
   14018:	10 92 51 21 	sts	0x2151, r1	; 0x802151 <hpdir+0x95>
   1401c:	10 92 52 21 	sts	0x2152, r1	; 0x802152 <hpdir+0x96>
   14020:	10 92 53 21 	sts	0x2153, r1	; 0x802153 <hpdir+0x97>
	hpdir.HEADS= 0;	     				// 10
   14024:	10 92 54 21 	sts	0x2154, r1	; 0x802154 <hpdir+0x98>
   14028:	10 92 55 21 	sts	0x2155, r1	; 0x802155 <hpdir+0x99>
   1402c:	10 92 56 21 	sts	0x2156, r1	; 0x802156 <hpdir+0x9a>
   14030:	10 92 57 21 	sts	0x2157, r1	; 0x802157 <hpdir+0x9b>
	hpdir.SECTORS= 0;    				// 11
   14034:	10 92 58 21 	sts	0x2158, r1	; 0x802158 <hpdir+0x9c>
   14038:	10 92 59 21 	sts	0x2159, r1	; 0x802159 <hpdir+0x9d>
   1403c:	10 92 5a 21 	sts	0x215A, r1	; 0x80215a <hpdir+0x9e>
   14040:	10 92 5b 21 	sts	0x215B, r1	; 0x80215b <hpdir+0x9f>
	hpdir.BYTES_PER_SECTOR = 0;			// 12
   14044:	10 92 5c 21 	sts	0x215C, r1	; 0x80215c <hpdir+0xa0>
   14048:	10 92 5d 21 	sts	0x215D, r1	; 0x80215d <hpdir+0xa1>
   1404c:	10 92 5e 21 	sts	0x215E, r1	; 0x80215e <hpdir+0xa2>
   14050:	10 92 5f 21 	sts	0x215F, r1	; 0x80215f <hpdir+0xa3>
	hpdir.INTERLEAVE = 0;				// 13
   14054:	10 92 60 21 	sts	0x2160, r1	; 0x802160 <hpdir+0xa4>
   14058:	10 92 61 21 	sts	0x2161, r1	; 0x802161 <hpdir+0xa5>
   1405c:	10 92 62 21 	sts	0x2162, r1	; 0x802162 <hpdir+0xa6>
   14060:	10 92 63 21 	sts	0x2163, r1	; 0x802163 <hpdir+0xa7>
    hpdir.FIXED = 1;					// 14 ALWAYS 1
   14064:	81 e0       	ldi	r24, 0x01	; 1
   14066:	90 e0       	ldi	r25, 0x00	; 0
   14068:	a0 e0       	ldi	r26, 0x00	; 0
   1406a:	b0 e0       	ldi	r27, 0x00	; 0
   1406c:	80 93 64 21 	sts	0x2164, r24	; 0x802164 <hpdir+0xa8>
   14070:	90 93 65 21 	sts	0x2165, r25	; 0x802165 <hpdir+0xa9>
   14074:	a0 93 66 21 	sts	0x2166, r26	; 0x802166 <hpdir+0xaa>
   14078:	b0 93 67 21 	sts	0x2167, r27	; 0x802167 <hpdir+0xab>

	// Computed values
    hpdir.BLOCKS = 0;
   1407c:	10 92 68 21 	sts	0x2168, r1	; 0x802168 <hpdir+0xac>
   14080:	10 92 69 21 	sts	0x2169, r1	; 0x802169 <hpdir+0xad>
   14084:	10 92 6a 21 	sts	0x216A, r1	; 0x80216a <hpdir+0xae>
   14088:	10 92 6b 21 	sts	0x216B, r1	; 0x80216b <hpdir+0xaf>
   1408c:	08 95       	ret

0001408e <lif_dir_count>:
///@param[in] blocks: size of LIF image in total
///
///@return Size of LIF directory in blocks
long lif_dir_count(long blocks)
{
	int scale = 0;
   1408e:	20 e0       	ldi	r18, 0x00	; 0
   14090:	30 e0       	ldi	r19, 0x00	; 0
	long num = 1;
	while(blocks)
   14092:	61 15       	cp	r22, r1
   14094:	71 05       	cpc	r23, r1
   14096:	81 05       	cpc	r24, r1
   14098:	91 05       	cpc	r25, r1
   1409a:	39 f0       	breq	.+14     	; 0x140aa <lif_dir_count+0x1c>
	{
		scale++;
   1409c:	2f 5f       	subi	r18, 0xFF	; 255
   1409e:	3f 4f       	sbci	r19, 0xFF	; 255
 		blocks >>= 1;
   140a0:	95 95       	asr	r25
   140a2:	87 95       	ror	r24
   140a4:	77 95       	ror	r23
   140a6:	67 95       	ror	r22
   140a8:	f4 cf       	rjmp	.-24     	; 0x14092 <lif_dir_count+0x4>
	}
	scale>>=1;
   140aa:	35 95       	asr	r19
   140ac:	27 95       	ror	r18
///
///@return Size of LIF directory in blocks
long lif_dir_count(long blocks)
{
	int scale = 0;
	long num = 1;
   140ae:	61 e0       	ldi	r22, 0x01	; 1
   140b0:	70 e0       	ldi	r23, 0x00	; 0
   140b2:	80 e0       	ldi	r24, 0x00	; 0
   140b4:	90 e0       	ldi	r25, 0x00	; 0
	{
		scale++;
 		blocks >>= 1;
	}
	scale>>=1;
	while(scale--)
   140b6:	21 50       	subi	r18, 0x01	; 1
   140b8:	31 09       	sbc	r19, r1
   140ba:	28 f0       	brcs	.+10     	; 0x140c6 <lif_dir_count+0x38>
		num <<=1;
   140bc:	66 0f       	add	r22, r22
   140be:	77 1f       	adc	r23, r23
   140c0:	88 1f       	adc	r24, r24
   140c2:	99 1f       	adc	r25, r25
   140c4:	f8 cf       	rjmp	.-16     	; 0x140b6 <lif_dir_count+0x28>
	return(num);
}
   140c6:	08 95       	ret

000140c8 <hpdir_find_drive>:
///
///@param[in] model: model string
///
///@return 1 on sucess or 0 on fail
int hpdir_find_drive(char *model, int list, int verbose)
{
   140c8:	2f 92       	push	r2
   140ca:	3f 92       	push	r3
   140cc:	4f 92       	push	r4
   140ce:	5f 92       	push	r5
   140d0:	6f 92       	push	r6
   140d2:	8f 92       	push	r8
   140d4:	9f 92       	push	r9
   140d6:	af 92       	push	r10
   140d8:	bf 92       	push	r11
   140da:	cf 92       	push	r12
   140dc:	df 92       	push	r13
   140de:	ef 92       	push	r14
   140e0:	ff 92       	push	r15
   140e2:	0f 93       	push	r16
   140e4:	1f 93       	push	r17
   140e6:	cf 93       	push	r28
   140e8:	df 93       	push	r29
   140ea:	cd b7       	in	r28, 0x3d	; 61
   140ec:	de b7       	in	r29, 0x3e	; 62
   140ee:	c9 58       	subi	r28, 0x89	; 137
   140f0:	d1 40       	sbci	r29, 0x01	; 1
   140f2:	0f b6       	in	r0, 0x3f	; 63
   140f4:	f8 94       	cli
   140f6:	de bf       	out	0x3e, r29	; 62
   140f8:	0f be       	out	0x3f, r0	; 63
   140fa:	cd bf       	out	0x3d, r28	; 61
   140fc:	6c 01       	movw	r12, r24
   140fe:	c8 57       	subi	r28, 0x78	; 120
   14100:	de 4f       	sbci	r29, 0xFE	; 254
   14102:	79 83       	std	Y+1, r23	; 0x01
   14104:	68 83       	st	Y, r22
   14106:	c8 58       	subi	r28, 0x88	; 136
   14108:	d1 40       	sbci	r29, 0x01	; 1
	FILE *cfg;
	char *ptr;
    char str[256];
    char token[128];

	hpdir_init();
   1410a:	5a 01       	movw	r10, r20

	cfg = fopen("hpdir.ini","rb");
   1410c:	42 df       	rcall	.-380    	; 0x13f92 <hpdir_init>
   1410e:	60 ed       	ldi	r22, 0xD0	; 208
   14110:	78 e0       	ldi	r23, 0x08	; 8
   14112:	8a e1       	ldi	r24, 0x1A	; 26
   14114:	90 e1       	ldi	r25, 0x10	; 16
   14116:	0e 94 7c 7d 	call	0xfaf8	; 0xfaf8 <fopen>

#ifndef LIF_STAND_ALONE
	if(cfg == NULL)
   1411a:	7c 01       	movw	r14, r24
   1411c:	89 2b       	or	r24, r25
		cfg = fopen("/hpdir.ini","rb");
   1411e:	49 f4       	brne	.+18     	; 0x14132 <hpdir_find_drive+0x6a>
   14120:	60 ed       	ldi	r22, 0xD0	; 208
   14122:	78 e0       	ldi	r23, 0x08	; 8
   14124:	89 e1       	ldi	r24, 0x19	; 25
   14126:	90 e1       	ldi	r25, 0x10	; 16
   14128:	0e 94 7c 7d 	call	0xfaf8	; 0xfaf8 <fopen>
        strcat  (name, "/hpdir.ini");
        cfg = fopen(name, "rb");
    }
#endif

	if(cfg == NULL)
   1412c:	7c 01       	movw	r14, r24
   1412e:	89 2b       	or	r24, r25
		// MODEL something else
		ptr = get_token(ptr, token, 	sizeof(token)-2);

        if(MATCHI(token,"[driveinfo]"))
        {
			driveinfo = 1;
   14130:	51 f0       	breq	.+20     	; 0x14146 <hpdir_find_drive+0x7e>
   14132:	21 2c       	mov	r2, r1

		if(*ptr == '[' && driveinfo == 1 )
                break;

		// MODEL something else
		ptr = get_token(ptr, token, 	sizeof(token)-2);
   14134:	31 2c       	mov	r3, r1
   14136:	8e 01       	movw	r16, r28
   14138:	08 5f       	subi	r16, 0xF8	; 248
		if( driveinfo != 1)
			continue;

        if(list)
        {
            printf("%s %s\n", token, ptr);
   1413a:	1e 4f       	sbci	r17, 0xFE	; 254
   1413c:	85 e0       	ldi	r24, 0x05	; 5
   1413e:	9c e1       	ldi	r25, 0x1C	; 28
   14140:	2c 01       	movw	r4, r24
   14142:	61 2c       	mov	r6, r1
    }
#endif

	if(cfg == NULL)
	{
		if(verbose)
   14144:	1e c0       	rjmp	.+60     	; 0x14182 <hpdir_find_drive+0xba>
   14146:	ab 28       	or	r10, r11
   14148:	09 f4       	brne	.+2      	; 0x1414c <hpdir_find_drive+0x84>
			printf("Error: hpdir.ini not found!\n");
   1414a:	69 c1       	rjmp	.+722    	; 0x1441e <hpdir_find_drive+0x356>
   1414c:	8c e0       	ldi	r24, 0x0C	; 12
   1414e:	9c e1       	ldi	r25, 0x1C	; 28
   14150:	a0 e0       	ldi	r26, 0x00	; 0
   14152:	ed b7       	in	r30, 0x3d	; 61
   14154:	fe b7       	in	r31, 0x3e	; 62
   14156:	81 83       	std	Z+1, r24	; 0x01
   14158:	92 83       	std	Z+2, r25	; 0x02
   1415a:	a3 83       	std	Z+3, r26	; 0x03
   1415c:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
    {
		errors = 0;
        ptr = str;

        trim_tail(ptr);
   14160:	5e c1       	rjmp	.+700    	; 0x1441e <hpdir_find_drive+0x356>
   14162:	ce 01       	movw	r24, r28
   14164:	08 96       	adiw	r24, 0x08	; 8
   14166:	0e 94 7b 31 	call	0x62f6	; 0x62f6 <trim_tail>
        ptr = skipspaces(ptr);
   1416a:	ce 01       	movw	r24, r28
   1416c:	08 96       	adiw	r24, 0x08	; 8
   1416e:	0e 94 8b 31 	call	0x6316	; 0x6316 <skipspaces>

        len = strlen(ptr);
   14172:	fc 01       	movw	r30, r24
   14174:	01 90       	ld	r0, Z+
   14176:	00 20       	and	r0, r0
   14178:	e9 f7       	brne	.-6      	; 0x14174 <hpdir_find_drive+0xac>
        if(!len)
   1417a:	31 97       	sbiw	r30, 0x01	; 1
   1417c:	8e 17       	cp	r24, r30
   1417e:	9f 07       	cpc	r25, r31
		return(0);
	}

	// printf("Searching /hpdir.ini for model:%s\n", model);

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
   14180:	51 f4       	brne	.+20     	; 0x14196 <hpdir_find_drive+0xce>
   14182:	a7 01       	movw	r20, r14
   14184:	6e ef       	ldi	r22, 0xFE	; 254
   14186:	70 e0       	ldi	r23, 0x00	; 0
   14188:	ce 01       	movw	r24, r28
   1418a:	08 96       	adiw	r24, 0x08	; 8
   1418c:	0e 94 94 75 	call	0xeb28	; 0xeb28 <fgets>
   14190:	89 2b       	or	r24, r25
   14192:	39 f7       	brne	.-50     	; 0x14162 <hpdir_find_drive+0x9a>
        len = strlen(ptr);
        if(!len)
            continue;

        // Skip comments
        if(*ptr == ';' || *ptr == '#' )
   14194:	0c c0       	rjmp	.+24     	; 0x141ae <hpdir_find_drive+0xe6>
   14196:	fc 01       	movw	r30, r24
   14198:	20 81       	ld	r18, Z
   1419a:	2b 33       	cpi	r18, 0x3B	; 59
   1419c:	91 f3       	breq	.-28     	; 0x14182 <hpdir_find_drive+0xba>
   1419e:	23 32       	cpi	r18, 0x23	; 35
            continue;

		if(*ptr == '[' && driveinfo == 1 )
   141a0:	81 f3       	breq	.-32     	; 0x14182 <hpdir_find_drive+0xba>
   141a2:	2b 35       	cpi	r18, 0x5B	; 91
   141a4:	31 f4       	brne	.+12     	; 0x141b2 <hpdir_find_drive+0xea>
   141a6:	f1 e0       	ldi	r31, 0x01	; 1
   141a8:	2f 16       	cp	r2, r31
   141aa:	31 04       	cpc	r3, r1
int hpdir_find_drive(char *model, int list, int verbose)
{
    int len;
    int errors = 0;
    int driveinfo=0;
    int found = 0;
   141ac:	11 f4       	brne	.+4      	; 0x141b2 <hpdir_find_drive+0xea>
   141ae:	00 e0       	ldi	r16, 0x00	; 0

		if(*ptr == '[' && driveinfo == 1 )
                break;

		// MODEL something else
		ptr = get_token(ptr, token, 	sizeof(token)-2);
   141b0:	30 c1       	rjmp	.+608    	; 0x14412 <hpdir_find_drive+0x34a>
   141b2:	4e e7       	ldi	r20, 0x7E	; 126
   141b4:	50 e0       	ldi	r21, 0x00	; 0
   141b6:	b8 01       	movw	r22, r16
   141b8:	0e 94 5d 32 	call	0x64ba	; 0x64ba <get_token>

        if(MATCHI(token,"[driveinfo]"))
   141bc:	4c 01       	movw	r8, r24
   141be:	64 e2       	ldi	r22, 0x24	; 36
   141c0:	70 e1       	ldi	r23, 0x10	; 16
   141c2:	c8 01       	movw	r24, r16
   141c4:	0e 94 a9 31 	call	0x6352	; 0x6352 <MATCHI>
   141c8:	89 2b       	or	r24, r25
        {
			driveinfo = 1;
   141ca:	21 f0       	breq	.+8      	; 0x141d4 <hpdir_find_drive+0x10c>
   141cc:	22 24       	eor	r2, r2
   141ce:	23 94       	inc	r2
   141d0:	31 2c       	mov	r3, r1
            continue;
        }

		if( driveinfo != 1)
   141d2:	d7 cf       	rjmp	.-82     	; 0x14182 <hpdir_find_drive+0xba>
   141d4:	21 e0       	ldi	r18, 0x01	; 1
   141d6:	22 16       	cp	r2, r18
   141d8:	31 04       	cpc	r3, r1
			continue;

        if(list)
   141da:	99 f6       	brne	.-90     	; 0x14182 <hpdir_find_drive+0xba>
   141dc:	c8 57       	subi	r28, 0x78	; 120
   141de:	de 4f       	sbci	r29, 0xFE	; 254
   141e0:	88 81       	ld	r24, Y
   141e2:	99 81       	ldd	r25, Y+1	; 0x01
   141e4:	c8 58       	subi	r28, 0x88	; 136
   141e6:	d1 40       	sbci	r29, 0x01	; 1
   141e8:	89 2b       	or	r24, r25
        {
            printf("%s %s\n", token, ptr);
   141ea:	61 f0       	breq	.+24     	; 0x14204 <hpdir_find_drive+0x13c>
   141ec:	ed b7       	in	r30, 0x3d	; 61
   141ee:	fe b7       	in	r31, 0x3e	; 62
   141f0:	97 82       	std	Z+7, r9	; 0x07
   141f2:	86 82       	std	Z+6, r8	; 0x06
   141f4:	15 83       	std	Z+5, r17	; 0x05
   141f6:	04 83       	std	Z+4, r16	; 0x04
   141f8:	41 82       	std	Z+1, r4	; 0x01
   141fa:	52 82       	std	Z+2, r5	; 0x02
   141fc:	63 82       	std	Z+3, r6	; 0x03
   141fe:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
            continue;
        }

		if ( ! MATCHI(model,token) )
   14202:	bf cf       	rjmp	.-130    	; 0x14182 <hpdir_find_drive+0xba>
   14204:	b8 01       	movw	r22, r16
   14206:	c6 01       	movw	r24, r12
   14208:	0e 94 a9 31 	call	0x6352	; 0x6352 <MATCHI>
			continue;

		hpdir_init();
   1420c:	89 2b       	or	r24, r25
   1420e:	f1 f2       	breq	.-68     	; 0x141cc <hpdir_find_drive+0x104>

		if(verbose)
   14210:	c0 de       	rcall	.-640    	; 0x13f92 <hpdir_init>
   14212:	ab 28       	or	r10, r11
			printf("Found Model: %s\n", model);
   14214:	61 f0       	breq	.+24     	; 0x1422e <hpdir_find_drive+0x166>
   14216:	ed b7       	in	r30, 0x3d	; 61
   14218:	fe b7       	in	r31, 0x3e	; 62
   1421a:	d5 82       	std	Z+5, r13	; 0x05
   1421c:	c4 82       	std	Z+4, r12	; 0x04
   1421e:	84 ef       	ldi	r24, 0xF4	; 244
   14220:	9b e1       	ldi	r25, 0x1B	; 27
   14222:	a0 e0       	ldi	r26, 0x00	; 0
   14224:	81 83       	std	Z+1, r24	; 0x01
   14226:	92 83       	std	Z+2, r25	; 0x02
   14228:	a3 83       	std	Z+3, r26	; 0x03
   1422a:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>

		strncpy(hpdir.model,token,sizeof(hpdir.model)-2);				// 1 Model
   1422e:	4e e1       	ldi	r20, 0x1E	; 30
   14230:	50 e0       	ldi	r21, 0x00	; 0
   14232:	b8 01       	movw	r22, r16
   14234:	8c eb       	ldi	r24, 0xBC	; 188
   14236:	90 e2       	ldi	r25, 0x20	; 32
   14238:	0e 94 a8 30 	call	0x6150	; 0x6150 <strncpy>

		ptr = get_token(ptr, token, 	sizeof(token)-2);				// =
   1423c:	4e e7       	ldi	r20, 0x7E	; 126
   1423e:	50 e0       	ldi	r21, 0x00	; 0
   14240:	b8 01       	movw	r22, r16
   14242:	c4 01       	movw	r24, r8
   14244:	0e 94 5d 32 	call	0x64ba	; 0x64ba <get_token>

		ptr = get_token(ptr, hpdir.comment, sizeof(hpdir.comment)-2);	// 2 Comment
   14248:	4e e3       	ldi	r20, 0x3E	; 62
   1424a:	50 e0       	ldi	r21, 0x00	; 0
   1424c:	6c ed       	ldi	r22, 0xDC	; 220
   1424e:	70 e2       	ldi	r23, 0x20	; 32
   14250:	0e 94 5d 32 	call	0x64ba	; 0x64ba <get_token>

		ptr = get_token(ptr, hpdir.TYPE,  sizeof(hpdir.TYPE)-2);		// 3 AMIGO/SS80/CS80
   14254:	4e e1       	ldi	r20, 0x1E	; 30
   14256:	50 e0       	ldi	r21, 0x00	; 0
   14258:	6c e1       	ldi	r22, 0x1C	; 28
   1425a:	71 e2       	ldi	r23, 0x21	; 33
   1425c:	0e 94 5d 32 	call	0x64ba	; 0x64ba <get_token>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 4 Identify ID
   14260:	4e e7       	ldi	r20, 0x7E	; 126
   14262:	50 e0       	ldi	r21, 0x00	; 0
   14264:	b8 01       	movw	r22, r16
   14266:	0e 94 5d 32 	call	0x64ba	; 0x64ba <get_token>
		hpdir.ID = get_value(token);
   1426a:	6c 01       	movw	r12, r24
   1426c:	c8 01       	movw	r24, r16
   1426e:	0e 94 a0 32 	call	0x6540	; 0x6540 <get_value>
   14272:	60 93 3c 21 	sts	0x213C, r22	; 0x80213c <hpdir+0x80>
   14276:	70 93 3d 21 	sts	0x213D, r23	; 0x80213d <hpdir+0x81>
   1427a:	80 93 3e 21 	sts	0x213E, r24	; 0x80213e <hpdir+0x82>
   1427e:	90 93 3f 21 	sts	0x213F, r25	; 0x80213f <hpdir+0x83>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 5 MASK STAT 2
   14282:	4e e7       	ldi	r20, 0x7E	; 126
   14284:	50 e0       	ldi	r21, 0x00	; 0
   14286:	b8 01       	movw	r22, r16
   14288:	c6 01       	movw	r24, r12
   1428a:	0e 94 5d 32 	call	0x64ba	; 0x64ba <get_token>
		hpdir.mask_stat2 = get_value(token);
   1428e:	6c 01       	movw	r12, r24
   14290:	c8 01       	movw	r24, r16
   14292:	0e 94 a0 32 	call	0x6540	; 0x6540 <get_value>
   14296:	60 93 40 21 	sts	0x2140, r22	; 0x802140 <hpdir+0x84>
   1429a:	70 93 41 21 	sts	0x2141, r23	; 0x802141 <hpdir+0x85>
   1429e:	80 93 42 21 	sts	0x2142, r24	; 0x802142 <hpdir+0x86>
   142a2:	90 93 43 21 	sts	0x2143, r25	; 0x802143 <hpdir+0x87>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 6 STAT2
   142a6:	4e e7       	ldi	r20, 0x7E	; 126
   142a8:	50 e0       	ldi	r21, 0x00	; 0
   142aa:	b8 01       	movw	r22, r16
   142ac:	c6 01       	movw	r24, r12
   142ae:	0e 94 5d 32 	call	0x64ba	; 0x64ba <get_token>
		hpdir.id_stat2 = get_value(token);
   142b2:	6c 01       	movw	r12, r24
   142b4:	c8 01       	movw	r24, r16
   142b6:	0e 94 a0 32 	call	0x6540	; 0x6540 <get_value>
   142ba:	60 93 44 21 	sts	0x2144, r22	; 0x802144 <hpdir+0x88>
   142be:	70 93 45 21 	sts	0x2145, r23	; 0x802145 <hpdir+0x89>
   142c2:	80 93 46 21 	sts	0x2146, r24	; 0x802146 <hpdir+0x8a>
   142c6:	90 93 47 21 	sts	0x2147, r25	; 0x802147 <hpdir+0x8b>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 7 BCD include model number
   142ca:	4e e7       	ldi	r20, 0x7E	; 126
   142cc:	50 e0       	ldi	r21, 0x00	; 0
   142ce:	b8 01       	movw	r22, r16
   142d0:	c6 01       	movw	r24, r12
   142d2:	0e 94 5d 32 	call	0x64ba	; 0x64ba <get_token>
		hpdir.DEVICE_NUMBER = get_value(token);
   142d6:	6c 01       	movw	r12, r24
   142d8:	c8 01       	movw	r24, r16
   142da:	0e 94 a0 32 	call	0x6540	; 0x6540 <get_value>
   142de:	60 93 48 21 	sts	0x2148, r22	; 0x802148 <hpdir+0x8c>
   142e2:	70 93 49 21 	sts	0x2149, r23	; 0x802149 <hpdir+0x8d>
   142e6:	80 93 4a 21 	sts	0x214A, r24	; 0x80214a <hpdir+0x8e>
   142ea:	90 93 4b 21 	sts	0x214B, r25	; 0x80214b <hpdir+0x8f>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 8 Units installed
   142ee:	4e e7       	ldi	r20, 0x7E	; 126
   142f0:	50 e0       	ldi	r21, 0x00	; 0
   142f2:	b8 01       	movw	r22, r16
   142f4:	c6 01       	movw	r24, r12
   142f6:	0e 94 5d 32 	call	0x64ba	; 0x64ba <get_token>
		hpdir.UNITS_INSTALLED = get_value(token);
   142fa:	6c 01       	movw	r12, r24
   142fc:	c8 01       	movw	r24, r16
   142fe:	0e 94 a0 32 	call	0x6540	; 0x6540 <get_value>
   14302:	60 93 4c 21 	sts	0x214C, r22	; 0x80214c <hpdir+0x90>
   14306:	70 93 4d 21 	sts	0x214D, r23	; 0x80214d <hpdir+0x91>
   1430a:	80 93 4e 21 	sts	0x214E, r24	; 0x80214e <hpdir+0x92>
   1430e:	90 93 4f 21 	sts	0x214F, r25	; 0x80214f <hpdir+0x93>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 9 Cylinders
   14312:	4e e7       	ldi	r20, 0x7E	; 126
   14314:	50 e0       	ldi	r21, 0x00	; 0
   14316:	b8 01       	movw	r22, r16
   14318:	c6 01       	movw	r24, r12
   1431a:	0e 94 5d 32 	call	0x64ba	; 0x64ba <get_token>
		hpdir.CYLINDERS = get_value(token);
   1431e:	6c 01       	movw	r12, r24
   14320:	c8 01       	movw	r24, r16
   14322:	0e 94 a0 32 	call	0x6540	; 0x6540 <get_value>
   14326:	60 93 50 21 	sts	0x2150, r22	; 0x802150 <hpdir+0x94>
   1432a:	70 93 51 21 	sts	0x2151, r23	; 0x802151 <hpdir+0x95>
   1432e:	80 93 52 21 	sts	0x2152, r24	; 0x802152 <hpdir+0x96>
   14332:	90 93 53 21 	sts	0x2153, r25	; 0x802153 <hpdir+0x97>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 10 Heads
   14336:	4e e7       	ldi	r20, 0x7E	; 126
   14338:	50 e0       	ldi	r21, 0x00	; 0
   1433a:	b8 01       	movw	r22, r16
   1433c:	c6 01       	movw	r24, r12
   1433e:	0e 94 5d 32 	call	0x64ba	; 0x64ba <get_token>
		hpdir.HEADS = get_value(token);
   14342:	6c 01       	movw	r12, r24
   14344:	c8 01       	movw	r24, r16
   14346:	0e 94 a0 32 	call	0x6540	; 0x6540 <get_value>
   1434a:	60 93 54 21 	sts	0x2154, r22	; 0x802154 <hpdir+0x98>
   1434e:	70 93 55 21 	sts	0x2155, r23	; 0x802155 <hpdir+0x99>
   14352:	80 93 56 21 	sts	0x2156, r24	; 0x802156 <hpdir+0x9a>
   14356:	90 93 57 21 	sts	0x2157, r25	; 0x802157 <hpdir+0x9b>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 11 Sectors
   1435a:	4e e7       	ldi	r20, 0x7E	; 126
   1435c:	50 e0       	ldi	r21, 0x00	; 0
   1435e:	b8 01       	movw	r22, r16
   14360:	c6 01       	movw	r24, r12
   14362:	0e 94 5d 32 	call	0x64ba	; 0x64ba <get_token>
		hpdir.SECTORS = get_value(token);
   14366:	6c 01       	movw	r12, r24
   14368:	c8 01       	movw	r24, r16
   1436a:	0e 94 a0 32 	call	0x6540	; 0x6540 <get_value>
   1436e:	60 93 58 21 	sts	0x2158, r22	; 0x802158 <hpdir+0x9c>
   14372:	70 93 59 21 	sts	0x2159, r23	; 0x802159 <hpdir+0x9d>
   14376:	80 93 5a 21 	sts	0x215A, r24	; 0x80215a <hpdir+0x9e>
   1437a:	90 93 5b 21 	sts	0x215B, r25	; 0x80215b <hpdir+0x9f>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 12 Bytes Per Block/Sector
   1437e:	4e e7       	ldi	r20, 0x7E	; 126
   14380:	50 e0       	ldi	r21, 0x00	; 0
   14382:	b8 01       	movw	r22, r16
   14384:	c6 01       	movw	r24, r12
   14386:	0e 94 5d 32 	call	0x64ba	; 0x64ba <get_token>
		hpdir.BYTES_PER_SECTOR = get_value(token);
   1438a:	6c 01       	movw	r12, r24
   1438c:	c8 01       	movw	r24, r16
   1438e:	0e 94 a0 32 	call	0x6540	; 0x6540 <get_value>
   14392:	60 93 5c 21 	sts	0x215C, r22	; 0x80215c <hpdir+0xa0>
   14396:	70 93 5d 21 	sts	0x215D, r23	; 0x80215d <hpdir+0xa1>
   1439a:	80 93 5e 21 	sts	0x215E, r24	; 0x80215e <hpdir+0xa2>
   1439e:	90 93 5f 21 	sts	0x215F, r25	; 0x80215f <hpdir+0xa3>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 13 Interleave
   143a2:	4e e7       	ldi	r20, 0x7E	; 126
   143a4:	50 e0       	ldi	r21, 0x00	; 0
   143a6:	b8 01       	movw	r22, r16
   143a8:	c6 01       	movw	r24, r12
   143aa:	0e 94 5d 32 	call	0x64ba	; 0x64ba <get_token>
		hpdir.INTERLEAVE = get_value(token);
   143ae:	c8 01       	movw	r24, r16
   143b0:	0e 94 a0 32 	call	0x6540	; 0x6540 <get_value>
   143b4:	60 93 60 21 	sts	0x2160, r22	; 0x802160 <hpdir+0xa4>
   143b8:	70 93 61 21 	sts	0x2161, r23	; 0x802161 <hpdir+0xa5>
   143bc:	80 93 62 21 	sts	0x2162, r24	; 0x802162 <hpdir+0xa6>
   143c0:	90 93 63 21 	sts	0x2163, r25	; 0x802163 <hpdir+0xa7>

		// Computed values
		hpdir.BLOCKS = ( hpdir.CYLINDERS * hpdir.HEADS * hpdir.SECTORS );
   143c4:	20 91 50 21 	lds	r18, 0x2150	; 0x802150 <hpdir+0x94>
   143c8:	30 91 51 21 	lds	r19, 0x2151	; 0x802151 <hpdir+0x95>
   143cc:	40 91 52 21 	lds	r20, 0x2152	; 0x802152 <hpdir+0x96>
   143d0:	50 91 53 21 	lds	r21, 0x2153	; 0x802153 <hpdir+0x97>
   143d4:	60 91 54 21 	lds	r22, 0x2154	; 0x802154 <hpdir+0x98>
   143d8:	70 91 55 21 	lds	r23, 0x2155	; 0x802155 <hpdir+0x99>
   143dc:	80 91 56 21 	lds	r24, 0x2156	; 0x802156 <hpdir+0x9a>
   143e0:	90 91 57 21 	lds	r25, 0x2157	; 0x802157 <hpdir+0x9b>
   143e4:	0e 94 2f df 	call	0x1be5e	; 0x1be5e <__mulsi3>
   143e8:	9b 01       	movw	r18, r22
   143ea:	ac 01       	movw	r20, r24
   143ec:	60 91 58 21 	lds	r22, 0x2158	; 0x802158 <hpdir+0x9c>
   143f0:	70 91 59 21 	lds	r23, 0x2159	; 0x802159 <hpdir+0x9d>
   143f4:	80 91 5a 21 	lds	r24, 0x215A	; 0x80215a <hpdir+0x9e>
   143f8:	90 91 5b 21 	lds	r25, 0x215B	; 0x80215b <hpdir+0x9f>
   143fc:	0e 94 2f df 	call	0x1be5e	; 0x1be5e <__mulsi3>
   14400:	60 93 68 21 	sts	0x2168, r22	; 0x802168 <hpdir+0xac>
   14404:	70 93 69 21 	sts	0x2169, r23	; 0x802169 <hpdir+0xad>
   14408:	80 93 6a 21 	sts	0x216A, r24	; 0x80216a <hpdir+0xae>
   1440c:	90 93 6b 21 	sts	0x216B, r25	; 0x80216b <hpdir+0xaf>
		{
			if(verbose)
				printf("Error /hpdir.ini parsing\n");
			break;
		}
		found = 1;
   14410:	01 e0       	ldi	r16, 0x01	; 1
		break;

	}	// while
	fclose(cfg);
   14412:	10 e0       	ldi	r17, 0x00	; 0
   14414:	c7 01       	movw	r24, r14
   14416:	0e 94 26 7c 	call	0xf84c	; 0xf84c <fclose>
	return(found);
   1441a:	c8 01       	movw	r24, r16

	if(cfg == NULL)
	{
		if(verbose)
			printf("Error: hpdir.ini not found!\n");
		return(0);
   1441c:	02 c0       	rjmp	.+4      	; 0x14422 <hpdir_find_drive+0x35a>
   1441e:	80 e0       	ldi	r24, 0x00	; 0
		break;

	}	// while
	fclose(cfg);
	return(found);
}
   14420:	90 e0       	ldi	r25, 0x00	; 0
   14422:	c7 57       	subi	r28, 0x77	; 119
   14424:	de 4f       	sbci	r29, 0xFE	; 254
   14426:	0f b6       	in	r0, 0x3f	; 63
   14428:	f8 94       	cli
   1442a:	de bf       	out	0x3e, r29	; 62
   1442c:	0f be       	out	0x3f, r0	; 63
   1442e:	cd bf       	out	0x3d, r28	; 61
   14430:	df 91       	pop	r29
   14432:	cf 91       	pop	r28
   14434:	1f 91       	pop	r17
   14436:	0f 91       	pop	r16
   14438:	ff 90       	pop	r15
   1443a:	ef 90       	pop	r14
   1443c:	df 90       	pop	r13
   1443e:	cf 90       	pop	r12
   14440:	bf 90       	pop	r11
   14442:	af 90       	pop	r10
   14444:	9f 90       	pop	r9
   14446:	8f 90       	pop	r8
   14448:	6f 90       	pop	r6
   1444a:	5f 90       	pop	r5
   1444c:	4f 90       	pop	r4
   1444e:	3f 90       	pop	r3
   14450:	2f 90       	pop	r2
   14452:	08 95       	ret

00014454 <SS80ControllerPack>:
   14454:	0f 93       	push	r16
   14456:	1f 93       	push	r17
   14458:	25 e0       	ldi	r18, 0x05	; 5
   1445a:	30 e0       	ldi	r19, 0x00	; 0
   1445c:	fc 01       	movw	r30, r24
   1445e:	31 83       	std	Z+1, r19	; 0x01
   14460:	20 83       	st	Z, r18
   14462:	e0 91 33 19 	lds	r30, 0x1933	; 0x801933 <SS80p>
   14466:	f0 91 34 19 	lds	r31, 0x1934	; 0x801934 <SS80p+0x1>
   1446a:	06 81       	ldd	r16, Z+6	; 0x06
   1446c:	17 81       	ldd	r17, Z+7	; 0x07
   1446e:	20 e0       	ldi	r18, 0x00	; 0
   14470:	30 e0       	ldi	r19, 0x00	; 0
   14472:	42 e0       	ldi	r20, 0x02	; 2
   14474:	50 e0       	ldi	r21, 0x00	; 0
   14476:	60 e0       	ldi	r22, 0x00	; 0
   14478:	70 e0       	ldi	r23, 0x00	; 0
   1447a:	83 e6       	ldi	r24, 0x63	; 99
   1447c:	99 e1       	ldi	r25, 0x19	; 25
   1447e:	0e 94 68 bc 	call	0x178d0	; 0x178d0 <V2B_MSB>
   14482:	e0 91 33 19 	lds	r30, 0x1933	; 0x801933 <SS80p>
   14486:	f0 91 34 19 	lds	r31, 0x1934	; 0x801934 <SS80p+0x1>
   1448a:	00 85       	ldd	r16, Z+8	; 0x08
   1448c:	11 85       	ldd	r17, Z+9	; 0x09
   1448e:	20 e0       	ldi	r18, 0x00	; 0
   14490:	30 e0       	ldi	r19, 0x00	; 0
   14492:	42 e0       	ldi	r20, 0x02	; 2
   14494:	50 e0       	ldi	r21, 0x00	; 0
   14496:	61 e0       	ldi	r22, 0x01	; 1
   14498:	70 e0       	ldi	r23, 0x00	; 0
   1449a:	83 e6       	ldi	r24, 0x63	; 99
   1449c:	99 e1       	ldi	r25, 0x19	; 25
   1449e:	0e 94 68 bc 	call	0x178d0	; 0x178d0 <V2B_MSB>
   144a2:	e0 91 33 19 	lds	r30, 0x1933	; 0x801933 <SS80p>
   144a6:	f0 91 34 19 	lds	r31, 0x1934	; 0x801934 <SS80p+0x1>
   144aa:	02 85       	ldd	r16, Z+10	; 0x0a
   144ac:	10 e0       	ldi	r17, 0x00	; 0
   144ae:	20 e0       	ldi	r18, 0x00	; 0
   144b0:	30 e0       	ldi	r19, 0x00	; 0
   144b2:	41 e0       	ldi	r20, 0x01	; 1
   144b4:	50 e0       	ldi	r21, 0x00	; 0
   144b6:	64 e0       	ldi	r22, 0x04	; 4
   144b8:	70 e0       	ldi	r23, 0x00	; 0
   144ba:	83 e6       	ldi	r24, 0x63	; 99
   144bc:	99 e1       	ldi	r25, 0x19	; 25
   144be:	0e 94 68 bc 	call	0x178d0	; 0x178d0 <V2B_MSB>
   144c2:	83 e6       	ldi	r24, 0x63	; 99
   144c4:	99 e1       	ldi	r25, 0x19	; 25
   144c6:	1f 91       	pop	r17
   144c8:	0f 91       	pop	r16
   144ca:	08 95       	ret

000144cc <SS80UnitPack>:
   144cc:	0f 93       	push	r16
   144ce:	1f 93       	push	r17
   144d0:	23 e1       	ldi	r18, 0x13	; 19
   144d2:	30 e0       	ldi	r19, 0x00	; 0
   144d4:	fc 01       	movw	r30, r24
   144d6:	31 83       	std	Z+1, r19	; 0x01
   144d8:	20 83       	st	Z, r18
   144da:	e0 91 33 19 	lds	r30, 0x1933	; 0x801933 <SS80p>
   144de:	f0 91 34 19 	lds	r31, 0x1934	; 0x801934 <SS80p+0x1>
   144e2:	03 85       	ldd	r16, Z+11	; 0x0b
   144e4:	10 e0       	ldi	r17, 0x00	; 0
   144e6:	20 e0       	ldi	r18, 0x00	; 0
   144e8:	30 e0       	ldi	r19, 0x00	; 0
   144ea:	41 e0       	ldi	r20, 0x01	; 1
   144ec:	50 e0       	ldi	r21, 0x00	; 0
   144ee:	60 e0       	ldi	r22, 0x00	; 0
   144f0:	70 e0       	ldi	r23, 0x00	; 0
   144f2:	80 e5       	ldi	r24, 0x50	; 80
   144f4:	99 e1       	ldi	r25, 0x19	; 25
   144f6:	0e 94 68 bc 	call	0x178d0	; 0x178d0 <V2B_MSB>
   144fa:	e0 91 33 19 	lds	r30, 0x1933	; 0x801933 <SS80p>
   144fe:	f0 91 34 19 	lds	r31, 0x1934	; 0x801934 <SS80p+0x1>
   14502:	04 85       	ldd	r16, Z+12	; 0x0c
   14504:	15 85       	ldd	r17, Z+13	; 0x0d
   14506:	26 85       	ldd	r18, Z+14	; 0x0e
   14508:	37 85       	ldd	r19, Z+15	; 0x0f
   1450a:	43 e0       	ldi	r20, 0x03	; 3
   1450c:	50 e0       	ldi	r21, 0x00	; 0
   1450e:	61 e0       	ldi	r22, 0x01	; 1
   14510:	70 e0       	ldi	r23, 0x00	; 0
   14512:	80 e5       	ldi	r24, 0x50	; 80
   14514:	99 e1       	ldi	r25, 0x19	; 25
   14516:	0e 94 68 bc 	call	0x178d0	; 0x178d0 <V2B_MSB>
   1451a:	e0 91 33 19 	lds	r30, 0x1933	; 0x801933 <SS80p>
   1451e:	f0 91 34 19 	lds	r31, 0x1934	; 0x801934 <SS80p+0x1>
   14522:	00 89       	ldd	r16, Z+16	; 0x10
   14524:	11 89       	ldd	r17, Z+17	; 0x11
   14526:	20 e0       	ldi	r18, 0x00	; 0
   14528:	30 e0       	ldi	r19, 0x00	; 0
   1452a:	42 e0       	ldi	r20, 0x02	; 2
   1452c:	50 e0       	ldi	r21, 0x00	; 0
   1452e:	64 e0       	ldi	r22, 0x04	; 4
   14530:	70 e0       	ldi	r23, 0x00	; 0
   14532:	80 e5       	ldi	r24, 0x50	; 80
   14534:	99 e1       	ldi	r25, 0x19	; 25
   14536:	0e 94 68 bc 	call	0x178d0	; 0x178d0 <V2B_MSB>
   1453a:	e0 91 33 19 	lds	r30, 0x1933	; 0x801933 <SS80p>
   1453e:	f0 91 34 19 	lds	r31, 0x1934	; 0x801934 <SS80p+0x1>
   14542:	02 89       	ldd	r16, Z+18	; 0x12
   14544:	10 e0       	ldi	r17, 0x00	; 0
   14546:	20 e0       	ldi	r18, 0x00	; 0
   14548:	30 e0       	ldi	r19, 0x00	; 0
   1454a:	41 e0       	ldi	r20, 0x01	; 1
   1454c:	50 e0       	ldi	r21, 0x00	; 0
   1454e:	66 e0       	ldi	r22, 0x06	; 6
   14550:	70 e0       	ldi	r23, 0x00	; 0
   14552:	80 e5       	ldi	r24, 0x50	; 80
   14554:	99 e1       	ldi	r25, 0x19	; 25
   14556:	0e 94 68 bc 	call	0x178d0	; 0x178d0 <V2B_MSB>
   1455a:	e0 91 33 19 	lds	r30, 0x1933	; 0x801933 <SS80p>
   1455e:	f0 91 34 19 	lds	r31, 0x1934	; 0x801934 <SS80p+0x1>
   14562:	03 89       	ldd	r16, Z+19	; 0x13
   14564:	10 e0       	ldi	r17, 0x00	; 0
   14566:	20 e0       	ldi	r18, 0x00	; 0
   14568:	30 e0       	ldi	r19, 0x00	; 0
   1456a:	41 e0       	ldi	r20, 0x01	; 1
   1456c:	50 e0       	ldi	r21, 0x00	; 0
   1456e:	67 e0       	ldi	r22, 0x07	; 7
   14570:	70 e0       	ldi	r23, 0x00	; 0
   14572:	80 e5       	ldi	r24, 0x50	; 80
   14574:	99 e1       	ldi	r25, 0x19	; 25
   14576:	0e 94 68 bc 	call	0x178d0	; 0x178d0 <V2B_MSB>
   1457a:	e0 91 33 19 	lds	r30, 0x1933	; 0x801933 <SS80p>
   1457e:	f0 91 34 19 	lds	r31, 0x1934	; 0x801934 <SS80p+0x1>
   14582:	04 89       	ldd	r16, Z+20	; 0x14
   14584:	15 89       	ldd	r17, Z+21	; 0x15
   14586:	20 e0       	ldi	r18, 0x00	; 0
   14588:	30 e0       	ldi	r19, 0x00	; 0
   1458a:	42 e0       	ldi	r20, 0x02	; 2
   1458c:	50 e0       	ldi	r21, 0x00	; 0
   1458e:	68 e0       	ldi	r22, 0x08	; 8
   14590:	70 e0       	ldi	r23, 0x00	; 0
   14592:	80 e5       	ldi	r24, 0x50	; 80
   14594:	99 e1       	ldi	r25, 0x19	; 25
   14596:	0e 94 68 bc 	call	0x178d0	; 0x178d0 <V2B_MSB>
   1459a:	e0 91 33 19 	lds	r30, 0x1933	; 0x801933 <SS80p>
   1459e:	f0 91 34 19 	lds	r31, 0x1934	; 0x801934 <SS80p+0x1>
   145a2:	06 89       	ldd	r16, Z+22	; 0x16
   145a4:	17 89       	ldd	r17, Z+23	; 0x17
   145a6:	20 e0       	ldi	r18, 0x00	; 0
   145a8:	30 e0       	ldi	r19, 0x00	; 0
   145aa:	42 e0       	ldi	r20, 0x02	; 2
   145ac:	50 e0       	ldi	r21, 0x00	; 0
   145ae:	6a e0       	ldi	r22, 0x0A	; 10
   145b0:	70 e0       	ldi	r23, 0x00	; 0
   145b2:	80 e5       	ldi	r24, 0x50	; 80
   145b4:	99 e1       	ldi	r25, 0x19	; 25
   145b6:	0e 94 68 bc 	call	0x178d0	; 0x178d0 <V2B_MSB>
   145ba:	e0 91 33 19 	lds	r30, 0x1933	; 0x801933 <SS80p>
   145be:	f0 91 34 19 	lds	r31, 0x1934	; 0x801934 <SS80p+0x1>
   145c2:	00 8d       	ldd	r16, Z+24	; 0x18
   145c4:	11 8d       	ldd	r17, Z+25	; 0x19
   145c6:	20 e0       	ldi	r18, 0x00	; 0
   145c8:	30 e0       	ldi	r19, 0x00	; 0
   145ca:	42 e0       	ldi	r20, 0x02	; 2
   145cc:	50 e0       	ldi	r21, 0x00	; 0
   145ce:	6c e0       	ldi	r22, 0x0C	; 12
   145d0:	70 e0       	ldi	r23, 0x00	; 0
   145d2:	80 e5       	ldi	r24, 0x50	; 80
   145d4:	99 e1       	ldi	r25, 0x19	; 25
   145d6:	0e 94 68 bc 	call	0x178d0	; 0x178d0 <V2B_MSB>
   145da:	e0 91 33 19 	lds	r30, 0x1933	; 0x801933 <SS80p>
   145de:	f0 91 34 19 	lds	r31, 0x1934	; 0x801934 <SS80p+0x1>
   145e2:	02 8d       	ldd	r16, Z+26	; 0x1a
   145e4:	13 8d       	ldd	r17, Z+27	; 0x1b
   145e6:	20 e0       	ldi	r18, 0x00	; 0
   145e8:	30 e0       	ldi	r19, 0x00	; 0
   145ea:	42 e0       	ldi	r20, 0x02	; 2
   145ec:	50 e0       	ldi	r21, 0x00	; 0
   145ee:	6e e0       	ldi	r22, 0x0E	; 14
   145f0:	70 e0       	ldi	r23, 0x00	; 0
   145f2:	80 e5       	ldi	r24, 0x50	; 80
   145f4:	99 e1       	ldi	r25, 0x19	; 25
   145f6:	0e 94 68 bc 	call	0x178d0	; 0x178d0 <V2B_MSB>
   145fa:	e0 91 33 19 	lds	r30, 0x1933	; 0x801933 <SS80p>
   145fe:	f0 91 34 19 	lds	r31, 0x1934	; 0x801934 <SS80p+0x1>
   14602:	04 8d       	ldd	r16, Z+28	; 0x1c
   14604:	10 e0       	ldi	r17, 0x00	; 0
   14606:	20 e0       	ldi	r18, 0x00	; 0
   14608:	30 e0       	ldi	r19, 0x00	; 0
   1460a:	41 e0       	ldi	r20, 0x01	; 1
   1460c:	50 e0       	ldi	r21, 0x00	; 0
   1460e:	60 e1       	ldi	r22, 0x10	; 16
   14610:	70 e0       	ldi	r23, 0x00	; 0
   14612:	80 e5       	ldi	r24, 0x50	; 80
   14614:	99 e1       	ldi	r25, 0x19	; 25
   14616:	0e 94 68 bc 	call	0x178d0	; 0x178d0 <V2B_MSB>
   1461a:	e0 91 33 19 	lds	r30, 0x1933	; 0x801933 <SS80p>
   1461e:	f0 91 34 19 	lds	r31, 0x1934	; 0x801934 <SS80p+0x1>
   14622:	05 8d       	ldd	r16, Z+29	; 0x1d
   14624:	10 e0       	ldi	r17, 0x00	; 0
   14626:	20 e0       	ldi	r18, 0x00	; 0
   14628:	30 e0       	ldi	r19, 0x00	; 0
   1462a:	41 e0       	ldi	r20, 0x01	; 1
   1462c:	50 e0       	ldi	r21, 0x00	; 0
   1462e:	61 e1       	ldi	r22, 0x11	; 17
   14630:	70 e0       	ldi	r23, 0x00	; 0
   14632:	80 e5       	ldi	r24, 0x50	; 80
   14634:	99 e1       	ldi	r25, 0x19	; 25
   14636:	0e 94 68 bc 	call	0x178d0	; 0x178d0 <V2B_MSB>
   1463a:	e0 91 33 19 	lds	r30, 0x1933	; 0x801933 <SS80p>
   1463e:	f0 91 34 19 	lds	r31, 0x1934	; 0x801934 <SS80p+0x1>
   14642:	06 8d       	ldd	r16, Z+30	; 0x1e
   14644:	10 e0       	ldi	r17, 0x00	; 0
   14646:	20 e0       	ldi	r18, 0x00	; 0
   14648:	30 e0       	ldi	r19, 0x00	; 0
   1464a:	41 e0       	ldi	r20, 0x01	; 1
   1464c:	50 e0       	ldi	r21, 0x00	; 0
   1464e:	62 e1       	ldi	r22, 0x12	; 18
   14650:	70 e0       	ldi	r23, 0x00	; 0
   14652:	80 e5       	ldi	r24, 0x50	; 80
   14654:	99 e1       	ldi	r25, 0x19	; 25
   14656:	0e 94 68 bc 	call	0x178d0	; 0x178d0 <V2B_MSB>
   1465a:	80 e5       	ldi	r24, 0x50	; 80
   1465c:	99 e1       	ldi	r25, 0x19	; 25
   1465e:	1f 91       	pop	r17
   14660:	0f 91       	pop	r16
   14662:	08 95       	ret

00014664 <SS80VolumePack>:
   14664:	0f 93       	push	r16
   14666:	1f 93       	push	r17
   14668:	2d e0       	ldi	r18, 0x0D	; 13
   1466a:	30 e0       	ldi	r19, 0x00	; 0
   1466c:	fc 01       	movw	r30, r24
   1466e:	31 83       	std	Z+1, r19	; 0x01
   14670:	20 83       	st	Z, r18
   14672:	e0 91 33 19 	lds	r30, 0x1933	; 0x801933 <SS80p>
   14676:	f0 91 34 19 	lds	r31, 0x1934	; 0x801934 <SS80p+0x1>
   1467a:	07 8d       	ldd	r16, Z+31	; 0x1f
   1467c:	10 a1       	ldd	r17, Z+32	; 0x20
   1467e:	21 a1       	ldd	r18, Z+33	; 0x21
   14680:	32 a1       	ldd	r19, Z+34	; 0x22
   14682:	43 e0       	ldi	r20, 0x03	; 3
   14684:	50 e0       	ldi	r21, 0x00	; 0
   14686:	60 e0       	ldi	r22, 0x00	; 0
   14688:	70 e0       	ldi	r23, 0x00	; 0
   1468a:	83 e4       	ldi	r24, 0x43	; 67
   1468c:	99 e1       	ldi	r25, 0x19	; 25
   1468e:	0e 94 68 bc 	call	0x178d0	; 0x178d0 <V2B_MSB>
   14692:	e0 91 33 19 	lds	r30, 0x1933	; 0x801933 <SS80p>
   14696:	f0 91 34 19 	lds	r31, 0x1934	; 0x801934 <SS80p+0x1>
   1469a:	03 a1       	ldd	r16, Z+35	; 0x23
   1469c:	10 e0       	ldi	r17, 0x00	; 0
   1469e:	20 e0       	ldi	r18, 0x00	; 0
   146a0:	30 e0       	ldi	r19, 0x00	; 0
   146a2:	41 e0       	ldi	r20, 0x01	; 1
   146a4:	50 e0       	ldi	r21, 0x00	; 0
   146a6:	63 e0       	ldi	r22, 0x03	; 3
   146a8:	70 e0       	ldi	r23, 0x00	; 0
   146aa:	83 e4       	ldi	r24, 0x43	; 67
   146ac:	99 e1       	ldi	r25, 0x19	; 25
   146ae:	0e 94 68 bc 	call	0x178d0	; 0x178d0 <V2B_MSB>
   146b2:	e0 91 33 19 	lds	r30, 0x1933	; 0x801933 <SS80p>
   146b6:	f0 91 34 19 	lds	r31, 0x1934	; 0x801934 <SS80p+0x1>
   146ba:	04 a1       	ldd	r16, Z+36	; 0x24
   146bc:	15 a1       	ldd	r17, Z+37	; 0x25
   146be:	20 e0       	ldi	r18, 0x00	; 0
   146c0:	30 e0       	ldi	r19, 0x00	; 0
   146c2:	42 e0       	ldi	r20, 0x02	; 2
   146c4:	50 e0       	ldi	r21, 0x00	; 0
   146c6:	64 e0       	ldi	r22, 0x04	; 4
   146c8:	70 e0       	ldi	r23, 0x00	; 0
   146ca:	83 e4       	ldi	r24, 0x43	; 67
   146cc:	99 e1       	ldi	r25, 0x19	; 25
   146ce:	0e 94 68 bc 	call	0x178d0	; 0x178d0 <V2B_MSB>
   146d2:	e0 91 33 19 	lds	r30, 0x1933	; 0x801933 <SS80p>
   146d6:	f0 91 34 19 	lds	r31, 0x1934	; 0x801934 <SS80p+0x1>
   146da:	06 a1       	ldd	r16, Z+38	; 0x26
   146dc:	17 a1       	ldd	r17, Z+39	; 0x27
   146de:	20 a5       	ldd	r18, Z+40	; 0x28
   146e0:	31 a5       	ldd	r19, Z+41	; 0x29
   146e2:	46 e0       	ldi	r20, 0x06	; 6
   146e4:	50 e0       	ldi	r21, 0x00	; 0
   146e6:	66 e0       	ldi	r22, 0x06	; 6
   146e8:	70 e0       	ldi	r23, 0x00	; 0
   146ea:	83 e4       	ldi	r24, 0x43	; 67
   146ec:	99 e1       	ldi	r25, 0x19	; 25
   146ee:	0e 94 68 bc 	call	0x178d0	; 0x178d0 <V2B_MSB>
   146f2:	e0 91 33 19 	lds	r30, 0x1933	; 0x801933 <SS80p>
   146f6:	f0 91 34 19 	lds	r31, 0x1934	; 0x801934 <SS80p+0x1>
   146fa:	02 a5       	ldd	r16, Z+42	; 0x2a
   146fc:	10 e0       	ldi	r17, 0x00	; 0
   146fe:	20 e0       	ldi	r18, 0x00	; 0
   14700:	30 e0       	ldi	r19, 0x00	; 0
   14702:	41 e0       	ldi	r20, 0x01	; 1
   14704:	50 e0       	ldi	r21, 0x00	; 0
   14706:	6c e0       	ldi	r22, 0x0C	; 12
   14708:	70 e0       	ldi	r23, 0x00	; 0
   1470a:	83 e4       	ldi	r24, 0x43	; 67
   1470c:	99 e1       	ldi	r25, 0x19	; 25
   1470e:	0e 94 68 bc 	call	0x178d0	; 0x178d0 <V2B_MSB>
   14712:	83 e4       	ldi	r24, 0x43	; 67
   14714:	99 e1       	ldi	r25, 0x19	; 25
   14716:	1f 91       	pop	r17
   14718:	0f 91       	pop	r16
   1471a:	08 95       	ret

0001471c <SS80_test_extended_status>:
   1471c:	9b 01       	movw	r18, r22
   1471e:	43 e0       	ldi	r20, 0x03	; 3
   14720:	35 95       	asr	r19
   14722:	27 95       	ror	r18
   14724:	4a 95       	dec	r20
   14726:	e1 f7       	brne	.-8      	; 0x14720 <SS80_test_extended_status+0x4>
   14728:	82 0f       	add	r24, r18
   1472a:	93 1f       	adc	r25, r19
   1472c:	67 70       	andi	r22, 0x07	; 7
   1472e:	77 27       	eor	r23, r23
   14730:	20 e8       	ldi	r18, 0x80	; 128
   14732:	30 e0       	ldi	r19, 0x00	; 0
   14734:	02 c0       	rjmp	.+4      	; 0x1473a <SS80_test_extended_status+0x1e>
   14736:	35 95       	asr	r19
   14738:	27 95       	ror	r18
   1473a:	6a 95       	dec	r22
   1473c:	e2 f7       	brpl	.-8      	; 0x14736 <SS80_test_extended_status+0x1a>
   1473e:	fc 01       	movw	r30, r24
   14740:	80 81       	ld	r24, Z
   14742:	28 23       	and	r18, r24
   14744:	81 e0       	ldi	r24, 0x01	; 1
   14746:	90 e0       	ldi	r25, 0x00	; 0
   14748:	11 f4       	brne	.+4      	; 0x1474e <SS80_test_extended_status+0x32>
   1474a:	80 e0       	ldi	r24, 0x00	; 0
   1474c:	90 e0       	ldi	r25, 0x00	; 0
   1474e:	08 95       	ret

00014750 <SS80_display_extended_status>:
   14750:	6f 92       	push	r6
   14752:	7f 92       	push	r7
   14754:	8f 92       	push	r8
   14756:	ef 92       	push	r14
   14758:	ff 92       	push	r15
   1475a:	0f 93       	push	r16
   1475c:	1f 93       	push	r17
   1475e:	cf 93       	push	r28
   14760:	df 93       	push	r29
   14762:	ad b7       	in	r26, 0x3d	; 61
   14764:	be b7       	in	r27, 0x3e	; 62
   14766:	17 97       	sbiw	r26, 0x07	; 7
   14768:	0f b6       	in	r0, 0x3f	; 63
   1476a:	f8 94       	cli
   1476c:	be bf       	out	0x3e, r27	; 62
   1476e:	0f be       	out	0x3f, r0	; 63
   14770:	ad bf       	out	0x3d, r26	; 61
   14772:	fc 01       	movw	r30, r24
   14774:	ac 01       	movw	r20, r24
   14776:	48 5f       	subi	r20, 0xF8	; 248
   14778:	5f 4f       	sbci	r21, 0xFF	; 255
   1477a:	20 e0       	ldi	r18, 0x00	; 0
   1477c:	30 e0       	ldi	r19, 0x00	; 0
   1477e:	a1 91       	ld	r26, Z+
   14780:	aa 23       	and	r26, r26
   14782:	11 f0       	breq	.+4      	; 0x14788 <SS80_display_extended_status+0x38>
   14784:	21 e0       	ldi	r18, 0x01	; 1
   14786:	30 e0       	ldi	r19, 0x00	; 0
   14788:	e4 17       	cp	r30, r20
   1478a:	f5 07       	cpc	r31, r21
   1478c:	c1 f7       	brne	.-16     	; 0x1477e <SS80_display_extended_status+0x2e>
   1478e:	23 2b       	or	r18, r19
   14790:	81 f1       	breq	.+96     	; 0x147f2 <SS80_display_extended_status+0xa2>
   14792:	ec 01       	movw	r28, r24
   14794:	ed b7       	in	r30, 0x3d	; 61
   14796:	fe b7       	in	r31, 0x3e	; 62
   14798:	75 83       	std	Z+5, r23	; 0x05
   1479a:	64 83       	std	Z+4, r22	; 0x04
   1479c:	85 e6       	ldi	r24, 0x65	; 101
   1479e:	92 e2       	ldi	r25, 0x22	; 34
   147a0:	a0 e0       	ldi	r26, 0x00	; 0
   147a2:	81 83       	std	Z+1, r24	; 0x01
   147a4:	92 83       	std	Z+2, r25	; 0x02
   147a6:	a3 83       	std	Z+3, r26	; 0x03
   147a8:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   147ac:	05 e8       	ldi	r16, 0x85	; 133
   147ae:	12 e0       	ldi	r17, 0x02	; 2
   147b0:	8a e5       	ldi	r24, 0x5A	; 90
   147b2:	92 e2       	ldi	r25, 0x22	; 34
   147b4:	3c 01       	movw	r6, r24
   147b6:	81 2c       	mov	r8, r1
   147b8:	f8 01       	movw	r30, r16
   147ba:	e0 80       	ld	r14, Z
   147bc:	f1 80       	ldd	r15, Z+1	; 0x01
   147be:	ff ef       	ldi	r31, 0xFF	; 255
   147c0:	ef 16       	cp	r14, r31
   147c2:	ff 06       	cpc	r15, r31
   147c4:	b1 f0       	breq	.+44     	; 0x147f2 <SS80_display_extended_status+0xa2>
   147c6:	b7 01       	movw	r22, r14
   147c8:	ce 01       	movw	r24, r28
   147ca:	a8 df       	rcall	.-176    	; 0x1471c <SS80_test_extended_status>
   147cc:	89 2b       	or	r24, r25
   147ce:	71 f0       	breq	.+28     	; 0x147ec <SS80_display_extended_status+0x9c>
   147d0:	f8 01       	movw	r30, r16
   147d2:	82 81       	ldd	r24, Z+2	; 0x02
   147d4:	93 81       	ldd	r25, Z+3	; 0x03
   147d6:	ed b7       	in	r30, 0x3d	; 61
   147d8:	fe b7       	in	r31, 0x3e	; 62
   147da:	97 83       	std	Z+7, r25	; 0x07
   147dc:	86 83       	std	Z+6, r24	; 0x06
   147de:	f5 82       	std	Z+5, r15	; 0x05
   147e0:	e4 82       	std	Z+4, r14	; 0x04
   147e2:	61 82       	std	Z+1, r6	; 0x01
   147e4:	72 82       	std	Z+2, r7	; 0x02
   147e6:	83 82       	std	Z+3, r8	; 0x03
   147e8:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   147ec:	0c 5f       	subi	r16, 0xFC	; 252
   147ee:	1f 4f       	sbci	r17, 0xFF	; 255
   147f0:	e3 cf       	rjmp	.-58     	; 0x147b8 <SS80_display_extended_status+0x68>
   147f2:	ad b7       	in	r26, 0x3d	; 61
   147f4:	be b7       	in	r27, 0x3e	; 62
   147f6:	17 96       	adiw	r26, 0x07	; 7
   147f8:	0f b6       	in	r0, 0x3f	; 63
   147fa:	f8 94       	cli
   147fc:	be bf       	out	0x3e, r27	; 62
   147fe:	0f be       	out	0x3f, r0	; 63
   14800:	ad bf       	out	0x3d, r26	; 61
   14802:	df 91       	pop	r29
   14804:	cf 91       	pop	r28
   14806:	1f 91       	pop	r17
   14808:	0f 91       	pop	r16
   1480a:	ff 90       	pop	r15
   1480c:	ef 90       	pop	r14
   1480e:	8f 90       	pop	r8
   14810:	7f 90       	pop	r7
   14812:	6f 90       	pop	r6
   14814:	08 95       	ret

00014816 <SS80_send_status>:
   14816:	a9 e1       	ldi	r26, 0x19	; 25
   14818:	b0 e0       	ldi	r27, 0x00	; 0
   1481a:	e1 e1       	ldi	r30, 0x11	; 17
   1481c:	f4 ea       	ldi	r31, 0xA4	; 164
   1481e:	0c 94 ea df 	jmp	0x1bfd4	; 0x1bfd4 <__prologue_saves__+0x18>
   14822:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   14826:	85 ff       	sbrs	r24, 5
   14828:	0a c0       	rjmp	.+20     	; 0x1483e <SS80_send_status+0x28>
   1482a:	86 e4       	ldi	r24, 0x46	; 70
   1482c:	92 e2       	ldi	r25, 0x22	; 34
   1482e:	a0 e0       	ldi	r26, 0x00	; 0
   14830:	ed b7       	in	r30, 0x3d	; 61
   14832:	fe b7       	in	r31, 0x3e	; 62
   14834:	81 83       	std	Z+1, r24	; 0x01
   14836:	92 83       	std	Z+2, r25	; 0x02
   14838:	a3 83       	std	Z+3, r26	; 0x03
   1483a:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   1483e:	ce 01       	movw	r24, r28
   14840:	04 96       	adiw	r24, 0x04	; 4
   14842:	7c 01       	movw	r14, r24
   14844:	84 e1       	ldi	r24, 0x14	; 20
   14846:	f7 01       	movw	r30, r14
   14848:	11 92       	st	Z+, r1
   1484a:	8a 95       	dec	r24
   1484c:	e9 f7       	brne	.-6      	; 0x14848 <SS80_send_status+0x32>
   1484e:	e0 91 31 19 	lds	r30, 0x1931	; 0x801931 <SS80s>
   14852:	f0 91 32 19 	lds	r31, 0x1932	; 0x801932 <SS80s+0x1>
   14856:	86 81       	ldd	r24, Z+6	; 0x06
   14858:	20 e1       	ldi	r18, 0x10	; 16
   1485a:	82 9f       	mul	r24, r18
   1485c:	c0 01       	movw	r24, r0
   1485e:	11 24       	eor	r1, r1
   14860:	95 81       	ldd	r25, Z+5	; 0x05
   14862:	9f 70       	andi	r25, 0x0F	; 15
   14864:	89 2b       	or	r24, r25
   14866:	8c 83       	std	Y+4, r24	; 0x04
   14868:	8f ef       	ldi	r24, 0xFF	; 255
   1486a:	8d 83       	std	Y+5, r24	; 0x05
   1486c:	83 81       	ldd	r24, Z+3	; 0x03
   1486e:	86 ff       	sbrs	r24, 6
   14870:	02 c0       	rjmp	.+4      	; 0x14876 <SS80_send_status+0x60>
   14872:	92 e0       	ldi	r25, 0x02	; 2
   14874:	9e 83       	std	Y+6, r25	; 0x06
   14876:	82 ff       	sbrs	r24, 2
   14878:	03 c0       	rjmp	.+6      	; 0x14880 <SS80_send_status+0x6a>
   1487a:	9e 81       	ldd	r25, Y+6	; 0x06
   1487c:	91 60       	ori	r25, 0x01	; 1
   1487e:	9e 83       	std	Y+6, r25	; 0x06
   14880:	80 ff       	sbrs	r24, 0
   14882:	02 c0       	rjmp	.+4      	; 0x14888 <SS80_send_status+0x72>
   14884:	82 e0       	ldi	r24, 0x02	; 2
   14886:	88 87       	std	Y+8, r24	; 0x08
   14888:	83 81       	ldd	r24, Z+3	; 0x03
   1488a:	81 ff       	sbrs	r24, 1
   1488c:	03 c0       	rjmp	.+6      	; 0x14894 <SS80_send_status+0x7e>
   1488e:	88 85       	ldd	r24, Y+8	; 0x08
   14890:	82 60       	ori	r24, 0x02	; 2
   14892:	88 87       	std	Y+8, r24	; 0x08
   14894:	83 81       	ldd	r24, Z+3	; 0x03
   14896:	83 ff       	sbrs	r24, 3
   14898:	02 c0       	rjmp	.+4      	; 0x1489e <SS80_send_status+0x88>
   1489a:	88 e0       	ldi	r24, 0x08	; 8
   1489c:	8a 87       	std	Y+10, r24	; 0x0a
   1489e:	83 81       	ldd	r24, Z+3	; 0x03
   148a0:	94 81       	ldd	r25, Z+4	; 0x04
   148a2:	89 2b       	or	r24, r25
   148a4:	59 f4       	brne	.+22     	; 0x148bc <SS80_send_status+0xa6>
   148a6:	07 81       	ldd	r16, Z+7	; 0x07
   148a8:	10 85       	ldd	r17, Z+8	; 0x08
   148aa:	21 85       	ldd	r18, Z+9	; 0x09
   148ac:	32 85       	ldd	r19, Z+10	; 0x0a
   148ae:	46 e0       	ldi	r20, 0x06	; 6
   148b0:	50 e0       	ldi	r21, 0x00	; 0
   148b2:	6a e0       	ldi	r22, 0x0A	; 10
   148b4:	70 e0       	ldi	r23, 0x00	; 0
   148b6:	c7 01       	movw	r24, r14
   148b8:	0e 94 68 bc 	call	0x178d0	; 0x178d0 <V2B_MSB>
   148bc:	e0 91 31 19 	lds	r30, 0x1931	; 0x801931 <SS80s>
   148c0:	f0 91 32 19 	lds	r31, 0x1932	; 0x801932 <SS80s+0x1>
   148c4:	83 81       	ldd	r24, Z+3	; 0x03
   148c6:	94 81       	ldd	r25, Z+4	; 0x04
   148c8:	89 2b       	or	r24, r25
   148ca:	11 f0       	breq	.+4      	; 0x148d0 <SS80_send_status+0xba>
   148cc:	81 e0       	ldi	r24, 0x01	; 1
   148ce:	82 83       	std	Z+2, r24	; 0x02
   148d0:	80 e0       	ldi	r24, 0x00	; 0
   148d2:	91 e0       	ldi	r25, 0x01	; 1
   148d4:	99 8f       	std	Y+25, r25	; 0x19
   148d6:	88 8f       	std	Y+24, r24	; 0x18
   148d8:	ae 01       	movw	r20, r28
   148da:	48 5e       	subi	r20, 0xE8	; 232
   148dc:	5f 4f       	sbci	r21, 0xFF	; 255
   148de:	64 e1       	ldi	r22, 0x14	; 20
   148e0:	70 e0       	ldi	r23, 0x00	; 0
   148e2:	c7 01       	movw	r24, r14
   148e4:	0e 94 b2 8a 	call	0x11564	; 0x11564 <gpib_write_str>
   148e8:	44 97       	sbiw	r24, 0x14	; 20
   148ea:	71 f0       	breq	.+28     	; 0x14908 <SS80_send_status+0xf2>
   148ec:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   148f0:	81 ff       	sbrs	r24, 1
   148f2:	0a c0       	rjmp	.+20     	; 0x14908 <SS80_send_status+0xf2>
   148f4:	8b e2       	ldi	r24, 0x2B	; 43
   148f6:	92 e2       	ldi	r25, 0x22	; 34
   148f8:	a0 e0       	ldi	r26, 0x00	; 0
   148fa:	ed b7       	in	r30, 0x3d	; 61
   148fc:	fe b7       	in	r31, 0x3e	; 62
   148fe:	81 83       	std	Z+1, r24	; 0x01
   14900:	92 83       	std	Z+2, r25	; 0x02
   14902:	a3 83       	std	Z+3, r26	; 0x03
   14904:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   14908:	88 8d       	ldd	r24, Y+24	; 0x18
   1490a:	99 8d       	ldd	r25, Y+25	; 0x19
   1490c:	88 27       	eor	r24, r24
   1490e:	90 7d       	andi	r25, 0xD0	; 208
   14910:	69 96       	adiw	r28, 0x19	; 25
   14912:	e6 e0       	ldi	r30, 0x06	; 6
   14914:	0c 94 06 e0 	jmp	0x1c00c	; 0x1c00c <__epilogue_restores__+0x18>

00014918 <SS80_describe>:
   14918:	a7 e0       	ldi	r26, 0x07	; 7
   1491a:	b0 e0       	ldi	r27, 0x00	; 0
   1491c:	e2 e9       	ldi	r30, 0x92	; 146
   1491e:	f4 ea       	ldi	r31, 0xA4	; 164
   14920:	0c 94 ee df 	jmp	0x1bfdc	; 0x1bfdc <__prologue_saves__+0x20>
   14924:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   14928:	85 ff       	sbrs	r24, 5
   1492a:	0a c0       	rjmp	.+20     	; 0x14940 <SS80_describe+0x28>
   1492c:	8a e1       	ldi	r24, 0x1A	; 26
   1492e:	92 e2       	ldi	r25, 0x22	; 34
   14930:	a0 e0       	ldi	r26, 0x00	; 0
   14932:	ed b7       	in	r30, 0x3d	; 61
   14934:	fe b7       	in	r31, 0x3e	; 62
   14936:	81 83       	std	Z+1, r24	; 0x01
   14938:	92 83       	std	Z+2, r25	; 0x02
   1493a:	a3 83       	std	Z+3, r26	; 0x03
   1493c:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   14940:	1f 82       	std	Y+7, r1	; 0x07
   14942:	1e 82       	std	Y+6, r1	; 0x06
   14944:	ce 01       	movw	r24, r28
   14946:	04 96       	adiw	r24, 0x04	; 4
   14948:	85 dd       	rcall	.-1270   	; 0x14454 <SS80ControllerPack>
   1494a:	6c 81       	ldd	r22, Y+4	; 0x04
   1494c:	7d 81       	ldd	r23, Y+5	; 0x05
   1494e:	ae 01       	movw	r20, r28
   14950:	4a 5f       	subi	r20, 0xFA	; 250
   14952:	5f 4f       	sbci	r21, 0xFF	; 255
   14954:	0e 94 b2 8a 	call	0x11564	; 0x11564 <gpib_write_str>
   14958:	2c 81       	ldd	r18, Y+4	; 0x04
   1495a:	3d 81       	ldd	r19, Y+5	; 0x05
   1495c:	82 17       	cp	r24, r18
   1495e:	93 07       	cpc	r25, r19
   14960:	39 f0       	breq	.+14     	; 0x14970 <SS80_describe+0x58>
   14962:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   14966:	81 ff       	sbrs	r24, 1
   14968:	3c c0       	rjmp	.+120    	; 0x149e2 <SS80_describe+0xca>
   1496a:	87 ef       	ldi	r24, 0xF7	; 247
   1496c:	91 e2       	ldi	r25, 0x21	; 33
   1496e:	31 c0       	rjmp	.+98     	; 0x149d2 <SS80_describe+0xba>
   14970:	1f 82       	std	Y+7, r1	; 0x07
   14972:	1e 82       	std	Y+6, r1	; 0x06
   14974:	ce 01       	movw	r24, r28
   14976:	04 96       	adiw	r24, 0x04	; 4
   14978:	a9 dd       	rcall	.-1198   	; 0x144cc <SS80UnitPack>
   1497a:	6c 81       	ldd	r22, Y+4	; 0x04
   1497c:	7d 81       	ldd	r23, Y+5	; 0x05
   1497e:	ae 01       	movw	r20, r28
   14980:	4a 5f       	subi	r20, 0xFA	; 250
   14982:	5f 4f       	sbci	r21, 0xFF	; 255
   14984:	0e 94 b2 8a 	call	0x11564	; 0x11564 <gpib_write_str>
   14988:	2c 81       	ldd	r18, Y+4	; 0x04
   1498a:	3d 81       	ldd	r19, Y+5	; 0x05
   1498c:	82 17       	cp	r24, r18
   1498e:	93 07       	cpc	r25, r19
   14990:	39 f0       	breq	.+14     	; 0x149a0 <SS80_describe+0x88>
   14992:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   14996:	81 ff       	sbrs	r24, 1
   14998:	24 c0       	rjmp	.+72     	; 0x149e2 <SS80_describe+0xca>
   1499a:	8a ed       	ldi	r24, 0xDA	; 218
   1499c:	91 e2       	ldi	r25, 0x21	; 33
   1499e:	19 c0       	rjmp	.+50     	; 0x149d2 <SS80_describe+0xba>
   149a0:	80 e0       	ldi	r24, 0x00	; 0
   149a2:	91 e0       	ldi	r25, 0x01	; 1
   149a4:	9f 83       	std	Y+7, r25	; 0x07
   149a6:	8e 83       	std	Y+6, r24	; 0x06
   149a8:	ce 01       	movw	r24, r28
   149aa:	04 96       	adiw	r24, 0x04	; 4
   149ac:	5b de       	rcall	.-842    	; 0x14664 <SS80VolumePack>
   149ae:	6c 81       	ldd	r22, Y+4	; 0x04
   149b0:	7d 81       	ldd	r23, Y+5	; 0x05
   149b2:	ae 01       	movw	r20, r28
   149b4:	4a 5f       	subi	r20, 0xFA	; 250
   149b6:	5f 4f       	sbci	r21, 0xFF	; 255
   149b8:	0e 94 b2 8a 	call	0x11564	; 0x11564 <gpib_write_str>
   149bc:	2c 81       	ldd	r18, Y+4	; 0x04
   149be:	3d 81       	ldd	r19, Y+5	; 0x05
   149c0:	82 17       	cp	r24, r18
   149c2:	93 07       	cpc	r25, r19
   149c4:	99 f0       	breq	.+38     	; 0x149ec <SS80_describe+0xd4>
   149c6:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   149ca:	81 ff       	sbrs	r24, 1
   149cc:	0a c0       	rjmp	.+20     	; 0x149e2 <SS80_describe+0xca>
   149ce:	8b eb       	ldi	r24, 0xBB	; 187
   149d0:	91 e2       	ldi	r25, 0x21	; 33
   149d2:	a0 e0       	ldi	r26, 0x00	; 0
   149d4:	ed b7       	in	r30, 0x3d	; 61
   149d6:	fe b7       	in	r31, 0x3e	; 62
   149d8:	81 83       	std	Z+1, r24	; 0x01
   149da:	92 83       	std	Z+2, r25	; 0x02
   149dc:	a3 83       	std	Z+3, r26	; 0x03
   149de:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   149e2:	8e 81       	ldd	r24, Y+6	; 0x06
   149e4:	9f 81       	ldd	r25, Y+7	; 0x07
   149e6:	88 27       	eor	r24, r24
   149e8:	90 7d       	andi	r25, 0xD0	; 208
   149ea:	02 c0       	rjmp	.+4      	; 0x149f0 <SS80_describe+0xd8>
   149ec:	80 e0       	ldi	r24, 0x00	; 0
   149ee:	90 e0       	ldi	r25, 0x00	; 0
   149f0:	27 96       	adiw	r28, 0x07	; 7
   149f2:	e2 e0       	ldi	r30, 0x02	; 2
   149f4:	0c 94 0a e0 	jmp	0x1c014	; 0x1c014 <__epilogue_restores__+0x20>

000149f8 <SS80_Check_Unit>:
   149f8:	00 d0       	rcall	.+0      	; 0x149fa <SS80_Check_Unit+0x2>
   149fa:	00 d0       	rcall	.+0      	; 0x149fc <SS80_Check_Unit+0x4>
   149fc:	1f 92       	push	r1
   149fe:	e0 91 31 19 	lds	r30, 0x1931	; 0x801931 <SS80s>
   14a02:	f0 91 32 19 	lds	r31, 0x1932	; 0x801932 <SS80s+0x1>
   14a06:	88 23       	and	r24, r24
   14a08:	c9 f0       	breq	.+50     	; 0x14a3c <SS80_Check_Unit+0x44>
   14a0a:	8f 30       	cpi	r24, 0x0F	; 15
   14a0c:	b9 f0       	breq	.+46     	; 0x14a3c <SS80_Check_Unit+0x44>
   14a0e:	23 81       	ldd	r18, Z+3	; 0x03
   14a10:	34 81       	ldd	r19, Z+4	; 0x04
   14a12:	20 64       	ori	r18, 0x40	; 64
   14a14:	34 83       	std	Z+4, r19	; 0x04
   14a16:	23 83       	std	Z+3, r18	; 0x03
   14a18:	90 91 c3 01 	lds	r25, 0x01C3	; 0x8001c3 <debuglevel>
   14a1c:	91 ff       	sbrs	r25, 1
   14a1e:	0f c0       	rjmp	.+30     	; 0x14a3e <SS80_Check_Unit+0x46>
   14a20:	90 e0       	ldi	r25, 0x00	; 0
   14a22:	ed b7       	in	r30, 0x3d	; 61
   14a24:	fe b7       	in	r31, 0x3e	; 62
   14a26:	95 83       	std	Z+5, r25	; 0x05
   14a28:	84 83       	std	Z+4, r24	; 0x04
   14a2a:	83 ea       	ldi	r24, 0xA3	; 163
   14a2c:	91 e2       	ldi	r25, 0x21	; 33
   14a2e:	a0 e0       	ldi	r26, 0x00	; 0
   14a30:	81 83       	std	Z+1, r24	; 0x01
   14a32:	92 83       	std	Z+2, r25	; 0x02
   14a34:	a3 83       	std	Z+3, r26	; 0x03
   14a36:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   14a3a:	01 c0       	rjmp	.+2      	; 0x14a3e <SS80_Check_Unit+0x46>
   14a3c:	85 83       	std	Z+5, r24	; 0x05
   14a3e:	0f 90       	pop	r0
   14a40:	0f 90       	pop	r0
   14a42:	0f 90       	pop	r0
   14a44:	0f 90       	pop	r0
   14a46:	0f 90       	pop	r0
   14a48:	08 95       	ret

00014a4a <SS80_Check_Volume>:
   14a4a:	00 d0       	rcall	.+0      	; 0x14a4c <SS80_Check_Volume+0x2>
   14a4c:	00 d0       	rcall	.+0      	; 0x14a4e <SS80_Check_Volume+0x4>
   14a4e:	1f 92       	push	r1
   14a50:	e0 91 31 19 	lds	r30, 0x1931	; 0x801931 <SS80s>
   14a54:	f0 91 32 19 	lds	r31, 0x1932	; 0x801932 <SS80s+0x1>
   14a58:	88 23       	and	r24, r24
   14a5a:	b9 f0       	breq	.+46     	; 0x14a8a <SS80_Check_Volume+0x40>
   14a5c:	23 81       	ldd	r18, Z+3	; 0x03
   14a5e:	34 81       	ldd	r19, Z+4	; 0x04
   14a60:	20 64       	ori	r18, 0x40	; 64
   14a62:	34 83       	std	Z+4, r19	; 0x04
   14a64:	23 83       	std	Z+3, r18	; 0x03
   14a66:	90 91 c3 01 	lds	r25, 0x01C3	; 0x8001c3 <debuglevel>
   14a6a:	91 ff       	sbrs	r25, 1
   14a6c:	0f c0       	rjmp	.+30     	; 0x14a8c <SS80_Check_Volume+0x42>
   14a6e:	90 e0       	ldi	r25, 0x00	; 0
   14a70:	ed b7       	in	r30, 0x3d	; 61
   14a72:	fe b7       	in	r31, 0x3e	; 62
   14a74:	95 83       	std	Z+5, r25	; 0x05
   14a76:	84 83       	std	Z+4, r24	; 0x04
   14a78:	89 e8       	ldi	r24, 0x89	; 137
   14a7a:	91 e2       	ldi	r25, 0x21	; 33
   14a7c:	a0 e0       	ldi	r26, 0x00	; 0
   14a7e:	81 83       	std	Z+1, r24	; 0x01
   14a80:	92 83       	std	Z+2, r25	; 0x02
   14a82:	a3 83       	std	Z+3, r26	; 0x03
   14a84:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   14a88:	01 c0       	rjmp	.+2      	; 0x14a8c <SS80_Check_Volume+0x42>
   14a8a:	16 82       	std	Z+6, r1	; 0x06
   14a8c:	0f 90       	pop	r0
   14a8e:	0f 90       	pop	r0
   14a90:	0f 90       	pop	r0
   14a92:	0f 90       	pop	r0
   14a94:	0f 90       	pop	r0
   14a96:	08 95       	ret

00014a98 <SS80_Command_State>:
   14a98:	2f 92       	push	r2
   14a9a:	3f 92       	push	r3
   14a9c:	4f 92       	push	r4
   14a9e:	6f 92       	push	r6
   14aa0:	7f 92       	push	r7
   14aa2:	8f 92       	push	r8
   14aa4:	af 92       	push	r10
   14aa6:	bf 92       	push	r11
   14aa8:	cf 92       	push	r12
   14aaa:	ef 92       	push	r14
   14aac:	ff 92       	push	r15
   14aae:	0f 93       	push	r16
   14ab0:	1f 93       	push	r17
   14ab2:	cf 93       	push	r28
   14ab4:	df 93       	push	r29
   14ab6:	cd b7       	in	r28, 0x3d	; 61
   14ab8:	de b7       	in	r29, 0x3e	; 62
   14aba:	66 97       	sbiw	r28, 0x16	; 22
   14abc:	0f b6       	in	r0, 0x3f	; 63
   14abe:	f8 94       	cli
   14ac0:	de bf       	out	0x3e, r29	; 62
   14ac2:	0f be       	out	0x3f, r0	; 63
   14ac4:	cd bf       	out	0x3d, r28	; 61
   14ac6:	e0 91 33 19 	lds	r30, 0x1933	; 0x801933 <SS80p>
   14aca:	f0 91 34 19 	lds	r31, 0x1934	; 0x801934 <SS80p+0x1>
   14ace:	81 81       	ldd	r24, Z+1	; 0x01
   14ad0:	90 e0       	ldi	r25, 0x00	; 0
   14ad2:	0e 94 8e 85 	call	0x10b1c	; 0x10b1c <gpib_disable_PPR>
   14ad6:	80 e0       	ldi	r24, 0x00	; 0
   14ad8:	91 e0       	ldi	r25, 0x01	; 1
   14ada:	99 87       	std	Y+9, r25	; 0x09
   14adc:	88 87       	std	Y+8, r24	; 0x08
   14ade:	ae 01       	movw	r20, r28
   14ae0:	48 5f       	subi	r20, 0xF8	; 248
   14ae2:	5f 4f       	sbci	r21, 0xFF	; 255
   14ae4:	60 e0       	ldi	r22, 0x00	; 0
   14ae6:	72 e0       	ldi	r23, 0x02	; 2
   14ae8:	8e ea       	ldi	r24, 0xAE	; 174
   14aea:	9c e1       	ldi	r25, 0x1C	; 28
   14aec:	0e 94 10 8a 	call	0x11420	; 0x11420 <gpib_read_str>
   14af0:	9b 87       	std	Y+11, r25	; 0x0b
   14af2:	8a 87       	std	Y+10, r24	; 0x0a
   14af4:	88 85       	ldd	r24, Y+8	; 0x08
   14af6:	99 85       	ldd	r25, Y+9	; 0x09
   14af8:	9c 01       	movw	r18, r24
   14afa:	22 27       	eor	r18, r18
   14afc:	30 7d       	andi	r19, 0xD0	; 208
   14afe:	23 2b       	or	r18, r19
   14b00:	79 f0       	breq	.+30     	; 0x14b20 <SS80_Command_State+0x88>
   14b02:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   14b06:	81 ff       	sbrs	r24, 1
   14b08:	21 c2       	rjmp	.+1090   	; 0x14f4c <SS80_Command_State+0x4b4>
   14b0a:	83 e6       	ldi	r24, 0x63	; 99
   14b0c:	91 e2       	ldi	r25, 0x21	; 33
   14b0e:	a0 e0       	ldi	r26, 0x00	; 0
   14b10:	ed b7       	in	r30, 0x3d	; 61
   14b12:	fe b7       	in	r31, 0x3e	; 62
   14b14:	81 83       	std	Z+1, r24	; 0x01
   14b16:	92 83       	std	Z+2, r25	; 0x02
   14b18:	a3 83       	std	Z+3, r26	; 0x03
   14b1a:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   14b1e:	16 c2       	rjmp	.+1068   	; 0x14f4c <SS80_Command_State+0x4b4>
   14b20:	2a 85       	ldd	r18, Y+10	; 0x0a
   14b22:	3b 85       	ldd	r19, Y+11	; 0x0b
   14b24:	23 2b       	or	r18, r19
   14b26:	09 f4       	brne	.+2      	; 0x14b2a <SS80_Command_State+0x92>
   14b28:	16 c2       	rjmp	.+1068   	; 0x14f56 <SS80_Command_State+0x4be>
   14b2a:	90 fd       	sbrc	r25, 0
   14b2c:	0e c0       	rjmp	.+28     	; 0x14b4a <SS80_Command_State+0xb2>
   14b2e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   14b32:	81 ff       	sbrs	r24, 1
   14b34:	0a c0       	rjmp	.+20     	; 0x14b4a <SS80_Command_State+0xb2>
   14b36:	8a e4       	ldi	r24, 0x4A	; 74
   14b38:	91 e2       	ldi	r25, 0x21	; 33
   14b3a:	a0 e0       	ldi	r26, 0x00	; 0
   14b3c:	ed b7       	in	r30, 0x3d	; 61
   14b3e:	fe b7       	in	r31, 0x3e	; 62
   14b40:	81 83       	std	Z+1, r24	; 0x01
   14b42:	92 83       	std	Z+2, r25	; 0x02
   14b44:	a3 83       	std	Z+3, r26	; 0x03
   14b46:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   14b4a:	e1 2c       	mov	r14, r1
   14b4c:	f1 2c       	mov	r15, r1
   14b4e:	8e e4       	ldi	r24, 0x4E	; 78
   14b50:	90 e2       	ldi	r25, 0x20	; 32
   14b52:	9c 01       	movw	r18, r24
   14b54:	40 e0       	ldi	r20, 0x00	; 0
   14b56:	2e 87       	std	Y+14, r18	; 0x0e
   14b58:	3f 87       	std	Y+15, r19	; 0x0f
   14b5a:	48 8b       	std	Y+16, r20	; 0x10
   14b5c:	83 e7       	ldi	r24, 0x73	; 115
   14b5e:	90 e2       	ldi	r25, 0x20	; 32
   14b60:	9c 01       	movw	r18, r24
   14b62:	40 e0       	ldi	r20, 0x00	; 0
   14b64:	29 8b       	std	Y+17, r18	; 0x11
   14b66:	3a 8b       	std	Y+18, r19	; 0x12
   14b68:	4b 8b       	std	Y+19, r20	; 0x13
   14b6a:	8d e8       	ldi	r24, 0x8D	; 141
   14b6c:	90 e2       	ldi	r25, 0x20	; 32
   14b6e:	9c 01       	movw	r18, r24
   14b70:	40 e0       	ldi	r20, 0x00	; 0
   14b72:	2c 8b       	std	Y+20, r18	; 0x14
   14b74:	3d 8b       	std	Y+21, r19	; 0x15
   14b76:	4e 8b       	std	Y+22, r20	; 0x16
   14b78:	83 ea       	ldi	r24, 0xA3	; 163
   14b7a:	90 e2       	ldi	r25, 0x20	; 32
   14b7c:	3c 01       	movw	r6, r24
   14b7e:	81 2c       	mov	r8, r1
   14b80:	81 eb       	ldi	r24, 0xB1	; 177
   14b82:	90 e2       	ldi	r25, 0x20	; 32
   14b84:	5c 01       	movw	r10, r24
   14b86:	c1 2c       	mov	r12, r1
   14b88:	8d ec       	ldi	r24, 0xCD	; 205
   14b8a:	90 e2       	ldi	r25, 0x20	; 32
   14b8c:	1c 01       	movw	r2, r24
   14b8e:	41 2c       	mov	r4, r1
   14b90:	2a 85       	ldd	r18, Y+10	; 0x0a
   14b92:	3b 85       	ldd	r19, Y+11	; 0x0b
   14b94:	87 01       	movw	r16, r14
   14b96:	e2 16       	cp	r14, r18
   14b98:	f3 06       	cpc	r15, r19
   14b9a:	0c f0       	brlt	.+2      	; 0x14b9e <SS80_Command_State+0x106>
   14b9c:	b6 c1       	rjmp	.+876    	; 0x14f0a <SS80_Command_State+0x472>
   14b9e:	0f 5f       	subi	r16, 0xFF	; 255
   14ba0:	1f 4f       	sbci	r17, 0xFF	; 255
   14ba2:	f7 01       	movw	r30, r14
   14ba4:	e2 55       	subi	r30, 0x52	; 82
   14ba6:	f3 4e       	sbci	r31, 0xE3	; 227
   14ba8:	80 81       	ld	r24, Z
   14baa:	28 2f       	mov	r18, r24
   14bac:	30 e0       	ldi	r19, 0x00	; 0
   14bae:	a9 01       	movw	r20, r18
   14bb0:	40 52       	subi	r20, 0x20	; 32
   14bb2:	51 09       	sbc	r21, r1
   14bb4:	40 31       	cpi	r20, 0x10	; 16
   14bb6:	51 05       	cpc	r21, r1
   14bb8:	98 f4       	brcc	.+38     	; 0x14be0 <SS80_Command_State+0x148>
   14bba:	80 52       	subi	r24, 0x20	; 32
   14bbc:	1d df       	rcall	.-454    	; 0x149f8 <SS80_Check_Unit>
   14bbe:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   14bc2:	85 ff       	sbrs	r24, 5
   14bc4:	a0 c1       	rjmp	.+832    	; 0x14f06 <SS80_Command_State+0x46e>
   14bc6:	e0 91 31 19 	lds	r30, 0x1931	; 0x801931 <SS80s>
   14bca:	f0 91 32 19 	lds	r31, 0x1932	; 0x801932 <SS80s+0x1>
   14bce:	85 81       	ldd	r24, Z+5	; 0x05
   14bd0:	90 e0       	ldi	r25, 0x00	; 0
   14bd2:	ed b7       	in	r30, 0x3d	; 61
   14bd4:	fe b7       	in	r31, 0x3e	; 62
   14bd6:	95 83       	std	Z+5, r25	; 0x05
   14bd8:	84 83       	std	Z+4, r24	; 0x04
   14bda:	84 e3       	ldi	r24, 0x34	; 52
   14bdc:	91 e2       	ldi	r25, 0x21	; 33
   14bde:	19 c0       	rjmp	.+50     	; 0x14c12 <SS80_Command_State+0x17a>
   14be0:	a9 01       	movw	r20, r18
   14be2:	40 54       	subi	r20, 0x40	; 64
   14be4:	51 09       	sbc	r21, r1
   14be6:	40 31       	cpi	r20, 0x10	; 16
   14be8:	51 05       	cpc	r21, r1
   14bea:	d0 f4       	brcc	.+52     	; 0x14c20 <SS80_Command_State+0x188>
   14bec:	80 54       	subi	r24, 0x40	; 64
   14bee:	2d df       	rcall	.-422    	; 0x14a4a <SS80_Check_Volume>
   14bf0:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   14bf4:	85 ff       	sbrs	r24, 5
   14bf6:	87 c1       	rjmp	.+782    	; 0x14f06 <SS80_Command_State+0x46e>
   14bf8:	e0 91 31 19 	lds	r30, 0x1931	; 0x801931 <SS80s>
   14bfc:	f0 91 32 19 	lds	r31, 0x1932	; 0x801932 <SS80s+0x1>
   14c00:	86 81       	ldd	r24, Z+6	; 0x06
   14c02:	90 e0       	ldi	r25, 0x00	; 0
   14c04:	ed b7       	in	r30, 0x3d	; 61
   14c06:	fe b7       	in	r31, 0x3e	; 62
   14c08:	95 83       	std	Z+5, r25	; 0x05
   14c0a:	84 83       	std	Z+4, r24	; 0x04
   14c0c:	2b e1       	ldi	r18, 0x1B	; 27
   14c0e:	31 e2       	ldi	r19, 0x21	; 33
   14c10:	c9 01       	movw	r24, r18
   14c12:	a0 e0       	ldi	r26, 0x00	; 0
   14c14:	81 83       	std	Z+1, r24	; 0x01
   14c16:	92 83       	std	Z+2, r25	; 0x02
   14c18:	a3 83       	std	Z+3, r26	; 0x03
   14c1a:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   14c1e:	73 c1       	rjmp	.+742    	; 0x14f06 <SS80_Command_State+0x46e>
   14c20:	21 15       	cp	r18, r1
   14c22:	31 05       	cpc	r19, r1
   14c24:	79 f4       	brne	.+30     	; 0x14c44 <SS80_Command_State+0x1ac>
   14c26:	e0 91 31 19 	lds	r30, 0x1931	; 0x801931 <SS80s>
   14c2a:	f0 91 32 19 	lds	r31, 0x1932	; 0x801932 <SS80s+0x1>
   14c2e:	81 e0       	ldi	r24, 0x01	; 1
   14c30:	90 e0       	ldi	r25, 0x00	; 0
   14c32:	91 83       	std	Z+1, r25	; 0x01
   14c34:	80 83       	st	Z, r24
   14c36:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   14c3a:	85 ff       	sbrs	r24, 5
   14c3c:	66 c1       	rjmp	.+716    	; 0x14f0a <SS80_Command_State+0x472>
   14c3e:	83 e0       	ldi	r24, 0x03	; 3
   14c40:	91 e2       	ldi	r25, 0x21	; 33
   14c42:	0f c0       	rjmp	.+30     	; 0x14c62 <SS80_Command_State+0x1ca>
   14c44:	22 30       	cpi	r18, 0x02	; 2
   14c46:	31 05       	cpc	r19, r1
   14c48:	a9 f4       	brne	.+42     	; 0x14c74 <SS80_Command_State+0x1dc>
   14c4a:	e0 91 31 19 	lds	r30, 0x1931	; 0x801931 <SS80s>
   14c4e:	f0 91 32 19 	lds	r31, 0x1932	; 0x801932 <SS80s+0x1>
   14c52:	31 83       	std	Z+1, r19	; 0x01
   14c54:	20 83       	st	Z, r18
   14c56:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   14c5a:	85 ff       	sbrs	r24, 5
   14c5c:	56 c1       	rjmp	.+684    	; 0x14f0a <SS80_Command_State+0x472>
   14c5e:	8a ee       	ldi	r24, 0xEA	; 234
   14c60:	90 e2       	ldi	r25, 0x20	; 32
   14c62:	a0 e0       	ldi	r26, 0x00	; 0
   14c64:	ed b7       	in	r30, 0x3d	; 61
   14c66:	fe b7       	in	r31, 0x3e	; 62
   14c68:	81 83       	std	Z+1, r24	; 0x01
   14c6a:	92 83       	std	Z+2, r25	; 0x02
   14c6c:	a3 83       	std	Z+3, r26	; 0x03
   14c6e:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   14c72:	4b c1       	rjmp	.+662    	; 0x14f0a <SS80_Command_State+0x472>
   14c74:	20 31       	cpi	r18, 0x10	; 16
   14c76:	31 05       	cpc	r19, r1
   14c78:	b1 f5       	brne	.+108    	; 0x14ce6 <SS80_Command_State+0x24e>
   14c7a:	20 91 31 19 	lds	r18, 0x1931	; 0x801931 <SS80s>
   14c7e:	30 91 32 19 	lds	r19, 0x1932	; 0x801932 <SS80s+0x1>
   14c82:	3d 87       	std	Y+13, r19	; 0x0d
   14c84:	2c 87       	std	Y+12, r18	; 0x0c
   14c86:	46 e0       	ldi	r20, 0x06	; 6
   14c88:	50 e0       	ldi	r21, 0x00	; 0
   14c8a:	b8 01       	movw	r22, r16
   14c8c:	8e ea       	ldi	r24, 0xAE	; 174
   14c8e:	9c e1       	ldi	r25, 0x1C	; 28
   14c90:	0e 94 91 bc 	call	0x17922	; 0x17922 <B2V_MSB>
   14c94:	ec 85       	ldd	r30, Y+12	; 0x0c
   14c96:	fd 85       	ldd	r31, Y+13	; 0x0d
   14c98:	67 83       	std	Z+7, r22	; 0x07
   14c9a:	70 87       	std	Z+8, r23	; 0x08
   14c9c:	81 87       	std	Z+9, r24	; 0x09
   14c9e:	92 87       	std	Z+10, r25	; 0x0a
   14ca0:	87 01       	movw	r16, r14
   14ca2:	09 5f       	subi	r16, 0xF9	; 249
   14ca4:	1f 4f       	sbci	r17, 0xFF	; 255
   14ca6:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   14caa:	85 ff       	sbrs	r24, 5
   14cac:	2c c1       	rjmp	.+600    	; 0x14f06 <SS80_Command_State+0x46e>
   14cae:	20 91 31 19 	lds	r18, 0x1931	; 0x801931 <SS80s>
   14cb2:	30 91 32 19 	lds	r19, 0x1932	; 0x801932 <SS80s+0x1>
   14cb6:	80 91 33 19 	lds	r24, 0x1933	; 0x801933 <SS80p>
   14cba:	90 91 34 19 	lds	r25, 0x1934	; 0x801934 <SS80p+0x1>
   14cbe:	fc 01       	movw	r30, r24
   14cc0:	a0 89       	ldd	r26, Z+16	; 0x10
   14cc2:	b1 89       	ldd	r27, Z+17	; 0x11
   14cc4:	f9 01       	movw	r30, r18
   14cc6:	27 81       	ldd	r18, Z+7	; 0x07
   14cc8:	30 85       	ldd	r19, Z+8	; 0x08
   14cca:	41 85       	ldd	r20, Z+9	; 0x09
   14ccc:	52 85       	ldd	r21, Z+10	; 0x0a
   14cce:	0e 94 be df 	call	0x1bf7c	; 0x1bf7c <__muluhisi3>
   14cd2:	ed b7       	in	r30, 0x3d	; 61
   14cd4:	fe b7       	in	r31, 0x3e	; 62
   14cd6:	64 83       	std	Z+4, r22	; 0x04
   14cd8:	75 83       	std	Z+5, r23	; 0x05
   14cda:	86 83       	std	Z+6, r24	; 0x06
   14cdc:	97 83       	std	Z+7, r25	; 0x07
   14cde:	21 82       	std	Z+1, r2	; 0x01
   14ce0:	32 82       	std	Z+2, r3	; 0x02
   14ce2:	43 82       	std	Z+3, r4	; 0x03
   14ce4:	2e c0       	rjmp	.+92     	; 0x14d42 <SS80_Command_State+0x2aa>
   14ce6:	28 31       	cpi	r18, 0x18	; 24
   14ce8:	31 05       	cpc	r19, r1
   14cea:	71 f5       	brne	.+92     	; 0x14d48 <SS80_Command_State+0x2b0>
   14cec:	20 91 31 19 	lds	r18, 0x1931	; 0x801931 <SS80s>
   14cf0:	30 91 32 19 	lds	r19, 0x1932	; 0x801932 <SS80s+0x1>
   14cf4:	3d 87       	std	Y+13, r19	; 0x0d
   14cf6:	2c 87       	std	Y+12, r18	; 0x0c
   14cf8:	44 e0       	ldi	r20, 0x04	; 4
{
#ifdef ESP8266
    hspi_RX((uint8_t *) data,count);
#endif
#ifdef AVR
    SPI0_RX((uint8_t *)data,count);
   14cfa:	50 e0       	ldi	r21, 0x00	; 0
   14cfc:	b8 01       	movw	r22, r16
   14cfe:	8e ea       	ldi	r24, 0xAE	; 174
   14d00:	9c e1       	ldi	r25, 0x1C	; 28
   14d02:	0e 94 91 bc 	call	0x17922	; 0x17922 <B2V_MSB>
   14d06:	ec 85       	ldd	r30, Y+12	; 0x0c
   14d08:	fd 85       	ldd	r31, Y+13	; 0x0d
   14d0a:	63 87       	std	Z+11, r22	; 0x0b
   14d0c:	74 87       	std	Z+12, r23	; 0x0c
   14d0e:	85 87       	std	Z+13, r24	; 0x0d
   14d10:	96 87       	std	Z+14, r25	; 0x0e
   14d12:	87 01       	movw	r16, r14
   14d14:	0b 5f       	subi	r16, 0xFB	; 251
   14d16:	1f 4f       	sbci	r17, 0xFF	; 255
   14d18:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   14d1c:	85 ff       	sbrs	r24, 5
   14d1e:	f3 c0       	rjmp	.+486    	; 0x14f06 <SS80_Command_State+0x46e>
   14d20:	e0 91 31 19 	lds	r30, 0x1931	; 0x801931 <SS80s>
   14d24:	f0 91 32 19 	lds	r31, 0x1932	; 0x801932 <SS80s+0x1>
   14d28:	83 85       	ldd	r24, Z+11	; 0x0b
   14d2a:	94 85       	ldd	r25, Z+12	; 0x0c
   14d2c:	a5 85       	ldd	r26, Z+13	; 0x0d
   14d2e:	b6 85       	ldd	r27, Z+14	; 0x0e
   14d30:	ed b7       	in	r30, 0x3d	; 61
   14d32:	fe b7       	in	r31, 0x3e	; 62
   14d34:	84 83       	std	Z+4, r24	; 0x04
   14d36:	95 83       	std	Z+5, r25	; 0x05
   14d38:	a6 83       	std	Z+6, r26	; 0x06
   14d3a:	b7 83       	std	Z+7, r27	; 0x07
   14d3c:	a1 82       	std	Z+1, r10	; 0x01
   14d3e:	b2 82       	std	Z+2, r11	; 0x02
   14d40:	c3 82       	std	Z+3, r12	; 0x03
   14d42:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   14d46:	df c0       	rjmp	.+446    	; 0x14f06 <SS80_Command_State+0x46e>
   14d48:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   14d4c:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   14d50:	24 33       	cpi	r18, 0x34	; 52
   14d52:	31 05       	cpc	r19, r1
   14d54:	41 f4       	brne	.+16     	; 0x14d66 <SS80_Command_State+0x2ce>
   14d56:	85 ff       	sbrs	r24, 5
   14d58:	d6 c0       	rjmp	.+428    	; 0x14f06 <SS80_Command_State+0x46e>
   14d5a:	ed b7       	in	r30, 0x3d	; 61
   14d5c:	fe b7       	in	r31, 0x3e	; 62
   14d5e:	61 82       	std	Z+1, r6	; 0x01
   14d60:	72 82       	std	Z+2, r7	; 0x02
   14d62:	83 82       	std	Z+3, r8	; 0x03
   14d64:	2b c0       	rjmp	.+86     	; 0x14dbc <SS80_Command_State+0x324>
   14d66:	29 33       	cpi	r18, 0x39	; 57
   14d68:	31 05       	cpc	r19, r1
   14d6a:	49 f4       	brne	.+18     	; 0x14d7e <SS80_Command_State+0x2e6>
   14d6c:	87 01       	movw	r16, r14
   14d6e:	0d 5f       	subi	r16, 0xFD	; 253
   14d70:	1f 4f       	sbci	r17, 0xFF	; 255
   14d72:	85 ff       	sbrs	r24, 5
   14d74:	c8 c0       	rjmp	.+400    	; 0x14f06 <SS80_Command_State+0x46e>
   14d76:	2c 89       	ldd	r18, Y+20	; 0x14
   14d78:	3d 89       	ldd	r19, Y+21	; 0x15
   14d7a:	4e 89       	ldd	r20, Y+22	; 0x16
   14d7c:	1a c0       	rjmp	.+52     	; 0x14db2 <SS80_Command_State+0x31a>
   14d7e:	2b 33       	cpi	r18, 0x3B	; 59
   14d80:	31 05       	cpc	r19, r1
   14d82:	49 f4       	brne	.+18     	; 0x14d96 <SS80_Command_State+0x2fe>
   14d84:	87 01       	movw	r16, r14
   14d86:	0e 5f       	subi	r16, 0xFE	; 254
   14d88:	1f 4f       	sbci	r17, 0xFF	; 255
   14d8a:	85 ff       	sbrs	r24, 5
   14d8c:	bc c0       	rjmp	.+376    	; 0x14f06 <SS80_Command_State+0x46e>
   14d8e:	29 89       	ldd	r18, Y+17	; 0x11
   14d90:	3a 89       	ldd	r19, Y+18	; 0x12
   14d92:	4b 89       	ldd	r20, Y+19	; 0x13
   14d94:	0e c0       	rjmp	.+28     	; 0x14db2 <SS80_Command_State+0x31a>
   14d96:	28 34       	cpi	r18, 0x48	; 72
   14d98:	31 05       	cpc	r19, r1
   14d9a:	99 f4       	brne	.+38     	; 0x14dc2 <SS80_Command_State+0x32a>
   14d9c:	87 01       	movw	r16, r14
   14d9e:	0e 5f       	subi	r16, 0xFE	; 254
   14da0:	1f 4f       	sbci	r17, 0xFF	; 255
   14da2:	80 73       	andi	r24, 0x30	; 48
   14da4:	99 27       	eor	r25, r25
   14da6:	89 2b       	or	r24, r25
   14da8:	09 f4       	brne	.+2      	; 0x14dac <SS80_Command_State+0x314>
   14daa:	ad c0       	rjmp	.+346    	; 0x14f06 <SS80_Command_State+0x46e>
   14dac:	2e 85       	ldd	r18, Y+14	; 0x0e
   14dae:	3f 85       	ldd	r19, Y+15	; 0x0f
   14db0:	48 89       	ldd	r20, Y+16	; 0x10
   14db2:	ed b7       	in	r30, 0x3d	; 61
   14db4:	fe b7       	in	r31, 0x3e	; 62
   14db6:	21 83       	std	Z+1, r18	; 0x01
   14db8:	32 83       	std	Z+2, r19	; 0x02
   14dba:	43 83       	std	Z+3, r20	; 0x03
   14dbc:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   14dc0:	a2 c0       	rjmp	.+324    	; 0x14f06 <SS80_Command_State+0x46e>
   14dc2:	24 30       	cpi	r18, 0x04	; 4
   14dc4:	31 05       	cpc	r19, r1
   14dc6:	41 f4       	brne	.+16     	; 0x14dd8 <SS80_Command_State+0x340>
   14dc8:	80 73       	andi	r24, 0x30	; 48
   14dca:	99 27       	eor	r25, r25
   14dcc:	89 2b       	or	r24, r25
   14dce:	09 f4       	brne	.+2      	; 0x14dd2 <SS80_Command_State+0x33a>
   14dd0:	9c c0       	rjmp	.+312    	; 0x14f0a <SS80_Command_State+0x472>
   14dd2:	8d e2       	ldi	r24, 0x2D	; 45
   14dd4:	90 e2       	ldi	r25, 0x20	; 32
   14dd6:	45 cf       	rjmp	.-374    	; 0x14c62 <SS80_Command_State+0x1ca>
   14dd8:	2e 30       	cpi	r18, 0x0E	; 14
   14dda:	31 05       	cpc	r19, r1
   14ddc:	29 f4       	brne	.+10     	; 0x14de8 <SS80_Command_State+0x350>
   14dde:	85 ff       	sbrs	r24, 5
   14de0:	94 c0       	rjmp	.+296    	; 0x14f0a <SS80_Command_State+0x472>
   14de2:	87 e1       	ldi	r24, 0x17	; 23
   14de4:	90 e2       	ldi	r25, 0x20	; 32
   14de6:	3d cf       	rjmp	.-390    	; 0x14c62 <SS80_Command_State+0x1ca>
   14de8:	2f 30       	cpi	r18, 0x0F	; 15
   14dea:	31 05       	cpc	r19, r1
   14dec:	29 f4       	brne	.+10     	; 0x14df8 <SS80_Command_State+0x360>
   14dee:	85 ff       	sbrs	r24, 5
   14df0:	8c c0       	rjmp	.+280    	; 0x14f0a <SS80_Command_State+0x472>
   14df2:	8a ef       	ldi	r24, 0xFA	; 250
   14df4:	9f e1       	ldi	r25, 0x1F	; 31
   14df6:	35 cf       	rjmp	.-406    	; 0x14c62 <SS80_Command_State+0x1ca>
   14df8:	21 33       	cpi	r18, 0x31	; 49
   14dfa:	31 05       	cpc	r19, r1
   14dfc:	59 f4       	brne	.+22     	; 0x14e14 <SS80_Command_State+0x37c>
   14dfe:	87 01       	movw	r16, r14
   14e00:	0d 5f       	subi	r16, 0xFD	; 253
   14e02:	1f 4f       	sbci	r17, 0xFF	; 255
   14e04:	80 73       	andi	r24, 0x30	; 48
   14e06:	99 27       	eor	r25, r25
   14e08:	89 2b       	or	r24, r25
   14e0a:	09 f4       	brne	.+2      	; 0x14e0e <SS80_Command_State+0x376>
   14e0c:	7e c0       	rjmp	.+252    	; 0x14f0a <SS80_Command_State+0x472>
   14e0e:	8e ed       	ldi	r24, 0xDE	; 222
   14e10:	9f e1       	ldi	r25, 0x1F	; 31
   14e12:	27 cf       	rjmp	.-434    	; 0x14c62 <SS80_Command_State+0x1ca>
   14e14:	25 33       	cpi	r18, 0x35	; 53
   14e16:	31 05       	cpc	r19, r1
   14e18:	69 f4       	brne	.+26     	; 0x14e34 <SS80_Command_State+0x39c>
   14e1a:	e0 91 31 19 	lds	r30, 0x1931	; 0x801931 <SS80s>
   14e1e:	f0 91 32 19 	lds	r31, 0x1932	; 0x801932 <SS80s+0x1>
   14e22:	24 e0       	ldi	r18, 0x04	; 4
   14e24:	30 e0       	ldi	r19, 0x00	; 0
   14e26:	31 83       	std	Z+1, r19	; 0x01
   14e28:	20 83       	st	Z, r18
   14e2a:	85 ff       	sbrs	r24, 5
   14e2c:	6e c0       	rjmp	.+220    	; 0x14f0a <SS80_Command_State+0x472>
   14e2e:	8d ec       	ldi	r24, 0xCD	; 205
   14e30:	9f e1       	ldi	r25, 0x1F	; 31
   14e32:	17 cf       	rjmp	.-466    	; 0x14c62 <SS80_Command_State+0x1ca>
   14e34:	27 33       	cpi	r18, 0x37	; 55
   14e36:	31 05       	cpc	r19, r1
   14e38:	59 f4       	brne	.+22     	; 0x14e50 <SS80_Command_State+0x3b8>
   14e3a:	87 01       	movw	r16, r14
   14e3c:	0d 5f       	subi	r16, 0xFD	; 253
   14e3e:	1f 4f       	sbci	r17, 0xFF	; 255
   14e40:	80 73       	andi	r24, 0x30	; 48
   14e42:	99 27       	eor	r25, r25
   14e44:	89 2b       	or	r24, r25
   14e46:	09 f4       	brne	.+2      	; 0x14e4a <SS80_Command_State+0x3b2>
   14e48:	60 c0       	rjmp	.+192    	; 0x14f0a <SS80_Command_State+0x472>
   14e4a:	8f ea       	ldi	r24, 0xAF	; 175
   14e4c:	9f e1       	ldi	r25, 0x1F	; 31
   14e4e:	09 cf       	rjmp	.-494    	; 0x14c62 <SS80_Command_State+0x1ca>
   14e50:	2e 33       	cpi	r18, 0x3E	; 62
   14e52:	31 05       	cpc	r19, r1
   14e54:	c1 f4       	brne	.+48     	; 0x14e86 <SS80_Command_State+0x3ee>
   14e56:	80 73       	andi	r24, 0x30	; 48
   14e58:	99 27       	eor	r25, r25
   14e5a:	89 2b       	or	r24, r25
   14e5c:	81 f0       	breq	.+32     	; 0x14e7e <SS80_Command_State+0x3e6>
   14e5e:	80 e9       	ldi	r24, 0x90	; 144
   14e60:	9f e1       	ldi	r25, 0x1F	; 31
   14e62:	a0 e0       	ldi	r26, 0x00	; 0
   14e64:	ed b7       	in	r30, 0x3d	; 61
   14e66:	fe b7       	in	r31, 0x3e	; 62
   14e68:	81 83       	std	Z+1, r24	; 0x01
   14e6a:	92 83       	std	Z+2, r25	; 0x02
   14e6c:	a3 83       	std	Z+3, r26	; 0x03
   14e6e:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   14e72:	60 e3       	ldi	r22, 0x30	; 48
   14e74:	70 e1       	ldi	r23, 0x10	; 16
   14e76:	c8 01       	movw	r24, r16
   14e78:	82 55       	subi	r24, 0x52	; 82
   14e7a:	93 4e       	sbci	r25, 0xE3	; 227
   14e7c:	69 dc       	rcall	.-1838   	; 0x14750 <SS80_display_extended_status>
   14e7e:	87 01       	movw	r16, r14
   14e80:	07 5f       	subi	r16, 0xF7	; 247
   14e82:	1f 4f       	sbci	r17, 0xFF	; 255
   14e84:	42 c0       	rjmp	.+132    	; 0x14f0a <SS80_Command_State+0x472>
   14e86:	2c 34       	cpi	r18, 0x4C	; 76
   14e88:	31 05       	cpc	r19, r1
   14e8a:	39 f4       	brne	.+14     	; 0x14e9a <SS80_Command_State+0x402>
   14e8c:	80 73       	andi	r24, 0x30	; 48
   14e8e:	99 27       	eor	r25, r25
   14e90:	89 2b       	or	r24, r25
   14e92:	d9 f1       	breq	.+118    	; 0x14f0a <SS80_Command_State+0x472>
   14e94:	85 e7       	ldi	r24, 0x75	; 117
   14e96:	9f e1       	ldi	r25, 0x1F	; 31
   14e98:	e4 ce       	rjmp	.-568    	; 0x14c62 <SS80_Command_State+0x1ca>
   14e9a:	2d 34       	cpi	r18, 0x4D	; 77
   14e9c:	31 05       	cpc	r19, r1
   14e9e:	39 f4       	brne	.+14     	; 0x14eae <SS80_Command_State+0x416>
   14ea0:	80 73       	andi	r24, 0x30	; 48
   14ea2:	99 27       	eor	r25, r25
   14ea4:	89 2b       	or	r24, r25
   14ea6:	89 f1       	breq	.+98     	; 0x14f0a <SS80_Command_State+0x472>
   14ea8:	8c e5       	ldi	r24, 0x5C	; 92
   14eaa:	9f e1       	ldi	r25, 0x1F	; 31
   14eac:	da ce       	rjmp	.-588    	; 0x14c62 <SS80_Command_State+0x1ca>
   14eae:	2d 30       	cpi	r18, 0x0D	; 13
   14eb0:	31 05       	cpc	r19, r1
   14eb2:	69 f4       	brne	.+26     	; 0x14ece <SS80_Command_State+0x436>
   14eb4:	e0 91 31 19 	lds	r30, 0x1931	; 0x801931 <SS80s>
   14eb8:	f0 91 32 19 	lds	r31, 0x1932	; 0x801932 <SS80s+0x1>
   14ebc:	23 e0       	ldi	r18, 0x03	; 3
   14ebe:	30 e0       	ldi	r19, 0x00	; 0
   14ec0:	31 83       	std	Z+1, r19	; 0x01
   14ec2:	20 83       	st	Z, r18
   14ec4:	85 ff       	sbrs	r24, 5
   14ec6:	21 c0       	rjmp	.+66     	; 0x14f0a <SS80_Command_State+0x472>
   14ec8:	85 e4       	ldi	r24, 0x45	; 69
   14eca:	9f e1       	ldi	r25, 0x1F	; 31
   14ecc:	ca ce       	rjmp	.-620    	; 0x14c62 <SS80_Command_State+0x1ca>
   14ece:	23 33       	cpi	r18, 0x33	; 51
   14ed0:	31 05       	cpc	r19, r1
   14ed2:	51 f4       	brne	.+20     	; 0x14ee8 <SS80_Command_State+0x450>
   14ed4:	87 01       	movw	r16, r14
   14ed6:	0c 5f       	subi	r16, 0xFC	; 252
   14ed8:	1f 4f       	sbci	r17, 0xFF	; 255
   14eda:	80 73       	andi	r24, 0x30	; 48
   14edc:	99 27       	eor	r25, r25
   14ede:	89 2b       	or	r24, r25
   14ee0:	a1 f0       	breq	.+40     	; 0x14f0a <SS80_Command_State+0x472>
   14ee2:	82 e2       	ldi	r24, 0x22	; 34
   14ee4:	9f e1       	ldi	r25, 0x1F	; 31
   14ee6:	bd ce       	rjmp	.-646    	; 0x14c62 <SS80_Command_State+0x1ca>
   14ee8:	81 ff       	sbrs	r24, 1
   14eea:	28 c0       	rjmp	.+80     	; 0x14f3c <SS80_Command_State+0x4a4>
   14eec:	ed b7       	in	r30, 0x3d	; 61
   14eee:	fe b7       	in	r31, 0x3e	; 62
   14ef0:	35 83       	std	Z+5, r19	; 0x05
   14ef2:	24 83       	std	Z+4, r18	; 0x04
   14ef4:	82 e0       	ldi	r24, 0x02	; 2
   14ef6:	9f e1       	ldi	r25, 0x1F	; 31
   14ef8:	a0 e0       	ldi	r26, 0x00	; 0
   14efa:	81 83       	std	Z+1, r24	; 0x01
   14efc:	92 83       	std	Z+2, r25	; 0x02
   14efe:	a3 83       	std	Z+3, r26	; 0x03
   14f00:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   14f04:	02 c0       	rjmp	.+4      	; 0x14f0a <SS80_Command_State+0x472>
   14f06:	78 01       	movw	r14, r16
   14f08:	43 ce       	rjmp	.-890    	; 0x14b90 <SS80_Command_State+0xf8>
   14f0a:	8a 85       	ldd	r24, Y+10	; 0x0a
   14f0c:	9b 85       	ldd	r25, Y+11	; 0x0b
   14f0e:	08 17       	cp	r16, r24
   14f10:	19 07       	cpc	r17, r25
   14f12:	a1 f0       	breq	.+40     	; 0x14f3c <SS80_Command_State+0x4a4>
   14f14:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   14f18:	81 ff       	sbrs	r24, 1
   14f1a:	10 c0       	rjmp	.+32     	; 0x14f3c <SS80_Command_State+0x4a4>
   14f1c:	2a 85       	ldd	r18, Y+10	; 0x0a
   14f1e:	3b 85       	ldd	r19, Y+11	; 0x0b
   14f20:	ed b7       	in	r30, 0x3d	; 61
   14f22:	fe b7       	in	r31, 0x3e	; 62
   14f24:	37 83       	std	Z+7, r19	; 0x07
   14f26:	26 83       	std	Z+6, r18	; 0x06
   14f28:	15 83       	std	Z+5, r17	; 0x05
   14f2a:	04 83       	std	Z+4, r16	; 0x04
   14f2c:	8a ec       	ldi	r24, 0xCA	; 202
   14f2e:	9e e1       	ldi	r25, 0x1E	; 30
   14f30:	a0 e0       	ldi	r26, 0x00	; 0
   14f32:	81 83       	std	Z+1, r24	; 0x01
   14f34:	92 83       	std	Z+2, r25	; 0x02
   14f36:	a3 83       	std	Z+3, r26	; 0x03
   14f38:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   14f3c:	e0 91 33 19 	lds	r30, 0x1933	; 0x801933 <SS80p>
   14f40:	f0 91 34 19 	lds	r31, 0x1934	; 0x801934 <SS80p+0x1>
   14f44:	81 81       	ldd	r24, Z+1	; 0x01
   14f46:	90 e0       	ldi	r25, 0x00	; 0
   14f48:	0e 94 58 85 	call	0x10ab0	; 0x10ab0 <gpib_enable_PPR>
   14f4c:	88 85       	ldd	r24, Y+8	; 0x08
   14f4e:	99 85       	ldd	r25, Y+9	; 0x09
   14f50:	88 27       	eor	r24, r24
   14f52:	90 7d       	andi	r25, 0xD0	; 208
   14f54:	02 c0       	rjmp	.+4      	; 0x14f5a <SS80_Command_State+0x4c2>
   14f56:	80 e0       	ldi	r24, 0x00	; 0
   14f58:	90 e0       	ldi	r25, 0x00	; 0
   14f5a:	66 96       	adiw	r28, 0x16	; 22
   14f5c:	0f b6       	in	r0, 0x3f	; 63
   14f5e:	f8 94       	cli
   14f60:	de bf       	out	0x3e, r29	; 62
   14f62:	0f be       	out	0x3f, r0	; 63
   14f64:	cd bf       	out	0x3d, r28	; 61
   14f66:	df 91       	pop	r29
   14f68:	cf 91       	pop	r28
   14f6a:	1f 91       	pop	r17
   14f6c:	0f 91       	pop	r16
   14f6e:	ff 90       	pop	r15
   14f70:	ef 90       	pop	r14
   14f72:	cf 90       	pop	r12
   14f74:	bf 90       	pop	r11
   14f76:	af 90       	pop	r10
   14f78:	8f 90       	pop	r8
   14f7a:	7f 90       	pop	r7
   14f7c:	6f 90       	pop	r6
   14f7e:	4f 90       	pop	r4
   14f80:	3f 90       	pop	r3
   14f82:	2f 90       	pop	r2
   14f84:	08 95       	ret

00014f86 <SS80_cmd_seek>:
   14f86:	a7 e0       	ldi	r26, 0x07	; 7
   14f88:	b0 e0       	ldi	r27, 0x00	; 0
   14f8a:	e9 ec       	ldi	r30, 0xC9	; 201
   14f8c:	f7 ea       	ldi	r31, 0xA7	; 167
   14f8e:	0c 94 e0 df 	jmp	0x1bfc0	; 0x1bfc0 <__prologue_saves__+0x4>
   14f92:	c0 91 31 19 	lds	r28, 0x1931	; 0x801931 <SS80s>
   14f96:	d0 91 32 19 	lds	r29, 0x1932	; 0x801932 <SS80s+0x1>
   14f9a:	8f 80       	ldd	r8, Y+7	; 0x07
   14f9c:	98 84       	ldd	r9, Y+8	; 0x08
   14f9e:	a9 84       	ldd	r10, Y+9	; 0x09
   14fa0:	ba 84       	ldd	r11, Y+10	; 0x0a
   14fa2:	00 91 33 19 	lds	r16, 0x1933	; 0x801933 <SS80p>
   14fa6:	10 91 34 19 	lds	r17, 0x1934	; 0x801934 <SS80p+0x1>
   14faa:	f8 01       	movw	r30, r16
   14fac:	c0 88       	ldd	r12, Z+16	; 0x10
   14fae:	d1 88       	ldd	r13, Z+17	; 0x11
   14fb0:	e1 2c       	mov	r14, r1
   14fb2:	f1 2c       	mov	r15, r1
   14fb4:	6b 85       	ldd	r22, Y+11	; 0x0b
   14fb6:	7c 85       	ldd	r23, Y+12	; 0x0c
   14fb8:	8d 85       	ldd	r24, Y+13	; 0x0d
   14fba:	9e 85       	ldd	r25, Y+14	; 0x0e
   14fbc:	a7 01       	movw	r20, r14
   14fbe:	96 01       	movw	r18, r12
   14fc0:	0e 94 71 df 	call	0x1bee2	; 0x1bee2 <__udivmodsi4>
   14fc4:	da 01       	movw	r26, r20
   14fc6:	c9 01       	movw	r24, r18
   14fc8:	88 0d       	add	r24, r8
   14fca:	99 1d       	adc	r25, r9
   14fcc:	aa 1d       	adc	r26, r10
   14fce:	bb 1d       	adc	r27, r11
   14fd0:	f8 01       	movw	r30, r16
   14fd2:	46 a0       	ldd	r4, Z+38	; 0x26
   14fd4:	57 a0       	ldd	r5, Z+39	; 0x27
   14fd6:	60 a4       	ldd	r6, Z+40	; 0x28
   14fd8:	71 a4       	ldd	r7, Z+41	; 0x29
   14fda:	40 91 c3 01 	lds	r20, 0x01C3	; 0x8001c3 <debuglevel>
   14fde:	50 91 c4 01 	lds	r21, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   14fe2:	48 16       	cp	r4, r24
   14fe4:	59 06       	cpc	r5, r25
   14fe6:	6a 06       	cpc	r6, r26
   14fe8:	7b 06       	cpc	r7, r27
   14fea:	f0 f4       	brcc	.+60     	; 0x15028 <SS80_cmd_seek+0xa2>
   14fec:	81 e0       	ldi	r24, 0x01	; 1
   14fee:	8a 83       	std	Y+2, r24	; 0x02
   14ff0:	8b 81       	ldd	r24, Y+3	; 0x03
   14ff2:	9c 81       	ldd	r25, Y+4	; 0x04
   14ff4:	84 60       	ori	r24, 0x04	; 4
   14ff6:	9c 83       	std	Y+4, r25	; 0x04
   14ff8:	8b 83       	std	Y+3, r24	; 0x03
   14ffa:	41 ff       	sbrs	r20, 1
   14ffc:	31 c0       	rjmp	.+98     	; 0x15060 <SS80_cmd_seek+0xda>
   14ffe:	a0 89       	ldd	r26, Z+16	; 0x10
   15000:	b1 89       	ldd	r27, Z+17	; 0x11
   15002:	a5 01       	movw	r20, r10
   15004:	94 01       	movw	r18, r8
   15006:	0e 94 be df 	call	0x1bf7c	; 0x1bf7c <__muluhisi3>
   1500a:	ed b7       	in	r30, 0x3d	; 61
   1500c:	fe b7       	in	r31, 0x3e	; 62
   1500e:	64 83       	std	Z+4, r22	; 0x04
   15010:	75 83       	std	Z+5, r23	; 0x05
   15012:	86 83       	std	Z+6, r24	; 0x06
   15014:	97 83       	std	Z+7, r25	; 0x07
   15016:	87 e8       	ldi	r24, 0x87	; 135
   15018:	9d e1       	ldi	r25, 0x1D	; 29
   1501a:	a0 e0       	ldi	r26, 0x00	; 0
   1501c:	81 83       	std	Z+1, r24	; 0x01
   1501e:	92 83       	std	Z+2, r25	; 0x02
   15020:	a3 83       	std	Z+3, r26	; 0x03
   15022:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   15026:	1c c0       	rjmp	.+56     	; 0x15060 <SS80_cmd_seek+0xda>
   15028:	ca 01       	movw	r24, r20
   1502a:	80 72       	andi	r24, 0x20	; 32
   1502c:	99 27       	eor	r25, r25
   1502e:	45 ff       	sbrs	r20, 5
   15030:	19 c0       	rjmp	.+50     	; 0x15064 <SS80_cmd_seek+0xde>
   15032:	a5 01       	movw	r20, r10
   15034:	94 01       	movw	r18, r8
   15036:	c7 01       	movw	r24, r14
   15038:	b6 01       	movw	r22, r12
   1503a:	0e 94 2f df 	call	0x1be5e	; 0x1be5e <__mulsi3>
   1503e:	ed b7       	in	r30, 0x3d	; 61
   15040:	fe b7       	in	r31, 0x3e	; 62
   15042:	64 83       	std	Z+4, r22	; 0x04
   15044:	75 83       	std	Z+5, r23	; 0x05
   15046:	86 83       	std	Z+6, r24	; 0x06
   15048:	97 83       	std	Z+7, r25	; 0x07
   1504a:	83 e7       	ldi	r24, 0x73	; 115
   1504c:	9d e1       	ldi	r25, 0x1D	; 29
   1504e:	a0 e0       	ldi	r26, 0x00	; 0
   15050:	81 83       	std	Z+1, r24	; 0x01
   15052:	92 83       	std	Z+2, r25	; 0x02
   15054:	a3 83       	std	Z+3, r26	; 0x03
   15056:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   1505a:	80 e0       	ldi	r24, 0x00	; 0
   1505c:	90 e0       	ldi	r25, 0x00	; 0
   1505e:	02 c0       	rjmp	.+4      	; 0x15064 <SS80_cmd_seek+0xde>
   15060:	81 e0       	ldi	r24, 0x01	; 1
   15062:	90 e0       	ldi	r25, 0x00	; 0
   15064:	cd b7       	in	r28, 0x3d	; 61
   15066:	de b7       	in	r29, 0x3e	; 62
   15068:	27 96       	adiw	r28, 0x07	; 7
   1506a:	e0 e1       	ldi	r30, 0x10	; 16
   1506c:	0c 94 fc df 	jmp	0x1bff8	; 0x1bff8 <__epilogue_restores__+0x4>

00015070 <SS80_locate_and_write>:
   15070:	a3 e1       	ldi	r26, 0x13	; 19
   15072:	b0 e0       	ldi	r27, 0x00	; 0
   15074:	ee e3       	ldi	r30, 0x3E	; 62
   15076:	f8 ea       	ldi	r31, 0xA8	; 168
   15078:	0c 94 de df 	jmp	0x1bfbc	; 0x1bfbc <__prologue_saves__>
   1507c:	00 91 31 19 	lds	r16, 0x1931	; 0x801931 <SS80s>
   15080:	10 91 32 19 	lds	r17, 0x1932	; 0x801932 <SS80s+0x1>
   15084:	80 91 33 19 	lds	r24, 0x1933	; 0x801933 <SS80p>
   15088:	90 91 34 19 	lds	r25, 0x1934	; 0x801934 <SS80p+0x1>
   1508c:	fc 01       	movw	r30, r24
   1508e:	a0 89       	ldd	r26, Z+16	; 0x10
   15090:	b1 89       	ldd	r27, Z+17	; 0x11
   15092:	f8 01       	movw	r30, r16
   15094:	27 81       	ldd	r18, Z+7	; 0x07
   15096:	30 85       	ldd	r19, Z+8	; 0x08
   15098:	41 85       	ldd	r20, Z+9	; 0x09
   1509a:	52 85       	ldd	r21, Z+10	; 0x0a
   1509c:	0e 94 be df 	call	0x1bf7c	; 0x1bf7c <__muluhisi3>
   150a0:	4b 01       	movw	r8, r22
   150a2:	5c 01       	movw	r10, r24
   150a4:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   150a8:	85 ff       	sbrs	r24, 5
   150aa:	16 c0       	rjmp	.+44     	; 0x150d8 <SS80_locate_and_write+0x68>
   150ac:	83 85       	ldd	r24, Z+11	; 0x0b
   150ae:	94 85       	ldd	r25, Z+12	; 0x0c
   150b0:	a5 85       	ldd	r26, Z+13	; 0x0d
   150b2:	b6 85       	ldd	r27, Z+14	; 0x0e
   150b4:	ed b7       	in	r30, 0x3d	; 61
   150b6:	fe b7       	in	r31, 0x3e	; 62
   150b8:	80 87       	std	Z+8, r24	; 0x08
   150ba:	91 87       	std	Z+9, r25	; 0x09
   150bc:	a2 87       	std	Z+10, r26	; 0x0a
   150be:	b3 87       	std	Z+11, r27	; 0x0b
   150c0:	84 82       	std	Z+4, r8	; 0x04
   150c2:	95 82       	std	Z+5, r9	; 0x05
   150c4:	a6 82       	std	Z+6, r10	; 0x06
   150c6:	b7 82       	std	Z+7, r11	; 0x07
   150c8:	8a e0       	ldi	r24, 0x0A	; 10
   150ca:	93 e2       	ldi	r25, 0x23	; 35
   150cc:	a0 e0       	ldi	r26, 0x00	; 0
   150ce:	81 83       	std	Z+1, r24	; 0x01
   150d0:	92 83       	std	Z+2, r25	; 0x02
   150d2:	a3 83       	std	Z+3, r26	; 0x03
   150d4:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   150d8:	e0 91 31 19 	lds	r30, 0x1931	; 0x801931 <SS80s>
   150dc:	f0 91 32 19 	lds	r31, 0x1932	; 0x801932 <SS80s+0x1>
   150e0:	12 82       	std	Z+2, r1	; 0x02
   150e2:	54 98       	cbi	0x0a, 4	; 10
   150e4:	4c 99       	sbic	0x09, 4	; 9
   150e6:	03 c0       	rjmp	.+6      	; 0x150ee <SS80_locate_and_write+0x7e>
   150e8:	80 e0       	ldi	r24, 0x00	; 0
   150ea:	90 e1       	ldi	r25, 0x10	; 16
   150ec:	4f c1       	rjmp	.+670    	; 0x1538c <SS80_locate_and_write+0x31c>
   150ee:	4b df       	rcall	.-362    	; 0x14f86 <SS80_cmd_seek>
   150f0:	e0 91 31 19 	lds	r30, 0x1931	; 0x801931 <SS80s>
   150f4:	f0 91 32 19 	lds	r31, 0x1932	; 0x801932 <SS80s+0x1>
   150f8:	89 2b       	or	r24, r25
   150fa:	41 f0       	breq	.+16     	; 0x1510c <SS80_locate_and_write+0x9c>
   150fc:	83 81       	ldd	r24, Z+3	; 0x03
   150fe:	94 81       	ldd	r25, Z+4	; 0x04
   15100:	82 60       	ori	r24, 0x02	; 2
   15102:	94 83       	std	Z+4, r25	; 0x04
   15104:	83 83       	std	Z+3, r24	; 0x03
   15106:	01 e0       	ldi	r16, 0x01	; 1
   15108:	10 e0       	ldi	r17, 0x00	; 0
   1510a:	02 c0       	rjmp	.+4      	; 0x15110 <SS80_locate_and_write+0xa0>
   1510c:	00 e0       	ldi	r16, 0x00	; 0
   1510e:	10 e0       	ldi	r17, 0x00	; 0
   15110:	23 84       	ldd	r2, Z+11	; 0x0b
   15112:	34 84       	ldd	r3, Z+12	; 0x0c
   15114:	1d 86       	std	Y+13, r1	; 0x0d
   15116:	1c 86       	std	Y+12, r1	; 0x0c
   15118:	41 2c       	mov	r4, r1
   1511a:	51 2c       	mov	r5, r1
   1511c:	32 01       	movw	r6, r4
   1511e:	8d eb       	ldi	r24, 0xBD	; 189
   15120:	92 e2       	ldi	r25, 0x22	; 34
   15122:	9c 01       	movw	r18, r24
   15124:	40 e0       	ldi	r20, 0x00	; 0
   15126:	2e 87       	std	Y+14, r18	; 0x0e
   15128:	3f 87       	std	Y+15, r19	; 0x0f
   1512a:	48 8b       	std	Y+16, r20	; 0x10
   1512c:	83 ee       	ldi	r24, 0xE3	; 227
   1512e:	92 e2       	ldi	r25, 0x22	; 34
   15130:	9c 01       	movw	r18, r24
   15132:	40 e0       	ldi	r20, 0x00	; 0
   15134:	29 8b       	std	Y+17, r18	; 0x11
   15136:	3a 8b       	std	Y+18, r19	; 0x12
   15138:	4b 8b       	std	Y+19, r20	; 0x13
   1513a:	12 14       	cp	r1, r2
   1513c:	13 04       	cpc	r1, r3
   1513e:	0c f0       	brlt	.+2      	; 0x15142 <SS80_locate_and_write+0xd2>
   15140:	f5 c0       	rjmp	.+490    	; 0x1532c <SS80_locate_and_write+0x2bc>
   15142:	54 98       	cbi	0x0a, 4	; 10
   15144:	4c 9b       	sbis	0x09, 4	; 9
   15146:	d0 cf       	rjmp	.-96     	; 0x150e8 <SS80_locate_and_write+0x78>
   15148:	71 01       	movw	r14, r2
   1514a:	31 e0       	ldi	r19, 0x01	; 1
   1514c:	23 16       	cp	r2, r19
   1514e:	33 06       	cpc	r3, r19
   15150:	1c f0       	brlt	.+6      	; 0x15158 <SS80_locate_and_write+0xe8>
   15152:	e1 2c       	mov	r14, r1
   15154:	ff 24       	eor	r15, r15
   15156:	f3 94       	inc	r15
   15158:	ee ea       	ldi	r30, 0xAE	; 174
   1515a:	fc e1       	ldi	r31, 0x1C	; 28
   1515c:	20 e0       	ldi	r18, 0x00	; 0
   1515e:	32 e0       	ldi	r19, 0x02	; 2
   15160:	11 92       	st	Z+, r1
   15162:	21 50       	subi	r18, 0x01	; 1
   15164:	30 40       	sbci	r19, 0x00	; 0
   15166:	e1 f7       	brne	.-8      	; 0x15160 <SS80_locate_and_write+0xf0>
   15168:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1516c:	87 fd       	sbrc	r24, 7
   1516e:	0e 94 96 84 	call	0x1092c	; 0x1092c <gpib_timer_elapsed_begin>
   15172:	ae 01       	movw	r20, r28
   15174:	44 5f       	subi	r20, 0xF4	; 244
   15176:	5f 4f       	sbci	r21, 0xFF	; 255
   15178:	b7 01       	movw	r22, r14
   1517a:	8e ea       	ldi	r24, 0xAE	; 174
   1517c:	9c e1       	ldi	r25, 0x1C	; 28
   1517e:	0e 94 10 8a 	call	0x11420	; 0x11420 <gpib_read_str>
   15182:	6c 01       	movw	r12, r24
   15184:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15188:	87 ff       	sbrs	r24, 7
   1518a:	04 c0       	rjmp	.+8      	; 0x15194 <SS80_locate_and_write+0x124>
   1518c:	8c e4       	ldi	r24, 0x4C	; 76
   1518e:	90 e1       	ldi	r25, 0x10	; 16
   15190:	0e 94 a8 84 	call	0x10950	; 0x10950 <gpib_timer_elapsed_end>
   15194:	ce 14       	cp	r12, r14
   15196:	df 04       	cpc	r13, r15
   15198:	39 f1       	breq	.+78     	; 0x151e8 <SS80_locate_and_write+0x178>
   1519a:	8c 85       	ldd	r24, Y+12	; 0x0c
   1519c:	9d 85       	ldd	r25, Y+13	; 0x0d
   1519e:	9c 01       	movw	r18, r24
   151a0:	22 27       	eor	r18, r18
   151a2:	30 7d       	andi	r19, 0xD0	; 208
   151a4:	23 2b       	or	r18, r19
   151a6:	d1 f0       	breq	.+52     	; 0x151dc <SS80_locate_and_write+0x16c>
   151a8:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   151ac:	81 ff       	sbrs	r24, 1
   151ae:	0a c0       	rjmp	.+20     	; 0x151c4 <SS80_locate_and_write+0x154>
   151b0:	87 ef       	ldi	r24, 0xF7	; 247
   151b2:	92 e2       	ldi	r25, 0x22	; 34
   151b4:	a0 e0       	ldi	r26, 0x00	; 0
   151b6:	ed b7       	in	r30, 0x3d	; 61
   151b8:	fe b7       	in	r31, 0x3e	; 62
   151ba:	81 83       	std	Z+1, r24	; 0x01
   151bc:	92 83       	std	Z+2, r25	; 0x02
   151be:	a3 83       	std	Z+3, r26	; 0x03
   151c0:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   151c4:	e0 91 31 19 	lds	r30, 0x1931	; 0x801931 <SS80s>
   151c8:	f0 91 32 19 	lds	r31, 0x1932	; 0x801932 <SS80s+0x1>
   151cc:	83 81       	ldd	r24, Z+3	; 0x03
   151ce:	94 81       	ldd	r25, Z+4	; 0x04
   151d0:	82 60       	ori	r24, 0x02	; 2
   151d2:	94 83       	std	Z+4, r25	; 0x04
   151d4:	83 83       	std	Z+3, r24	; 0x03
   151d6:	81 e0       	ldi	r24, 0x01	; 1
   151d8:	82 83       	std	Z+2, r24	; 0x02
   151da:	99 c0       	rjmp	.+306    	; 0x1530e <SS80_locate_and_write+0x29e>
   151dc:	c1 14       	cp	r12, r1
   151de:	d1 04       	cpc	r13, r1
   151e0:	09 f0       	breq	.+2      	; 0x151e4 <SS80_locate_and_write+0x174>
   151e2:	d0 c0       	rjmp	.+416    	; 0x15384 <SS80_locate_and_write+0x314>
   151e4:	90 fd       	sbrc	r25, 0
   151e6:	93 c0       	rjmp	.+294    	; 0x1530e <SS80_locate_and_write+0x29e>
   151e8:	01 15       	cp	r16, r1
   151ea:	11 05       	cpc	r17, r1
   151ec:	09 f0       	breq	.+2      	; 0x151f0 <SS80_locate_and_write+0x180>
   151ee:	84 c0       	rjmp	.+264    	; 0x152f8 <SS80_locate_and_write+0x288>
   151f0:	c1 14       	cp	r12, r1
   151f2:	d1 04       	cpc	r13, r1
   151f4:	09 f4       	brne	.+2      	; 0x151f8 <SS80_locate_and_write+0x188>
   151f6:	82 c0       	rjmp	.+260    	; 0x152fc <SS80_locate_and_write+0x28c>
   151f8:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   151fc:	86 fd       	sbrc	r24, 6
   151fe:	0e 94 96 84 	call	0x1092c	; 0x1092c <gpib_timer_elapsed_begin>
   15202:	e0 90 31 19 	lds	r14, 0x1931	; 0x801931 <SS80s>
   15206:	f0 90 32 19 	lds	r15, 0x1932	; 0x801932 <SS80s+0x1>
   1520a:	f3 e0       	ldi	r31, 0x03	; 3
   1520c:	ef 0e       	add	r14, r31
   1520e:	f1 1c       	adc	r15, r1
   15210:	e0 91 33 19 	lds	r30, 0x1933	; 0x801933 <SS80p>
   15214:	f0 91 34 19 	lds	r31, 0x1934	; 0x801934 <SS80p+0x1>
   15218:	86 01       	movw	r16, r12
   1521a:	2e ea       	ldi	r18, 0xAE	; 174
   1521c:	3c e1       	ldi	r19, 0x1C	; 28
   1521e:	b5 01       	movw	r22, r10
   15220:	a4 01       	movw	r20, r8
   15222:	82 81       	ldd	r24, Z+2	; 0x02
   15224:	93 81       	ldd	r25, Z+3	; 0x03
   15226:	0e 94 3f 84 	call	0x1087e	; 0x1087e <dbf_open_write>
   1522a:	7c 01       	movw	r14, r24
   1522c:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15230:	86 ff       	sbrs	r24, 6
   15232:	04 c0       	rjmp	.+8      	; 0x1523c <SS80_locate_and_write+0x1cc>
   15234:	86 e5       	ldi	r24, 0x56	; 86
   15236:	90 e1       	ldi	r25, 0x10	; 16
   15238:	0e 94 a8 84 	call	0x10950	; 0x10950 <gpib_timer_elapsed_end>
   1523c:	ce 14       	cp	r12, r14
   1523e:	df 04       	cpc	r13, r15
   15240:	39 f1       	breq	.+78     	; 0x15290 <SS80_locate_and_write+0x220>
   15242:	e0 91 31 19 	lds	r30, 0x1931	; 0x801931 <SS80s>
   15246:	f0 91 32 19 	lds	r31, 0x1932	; 0x801932 <SS80s+0x1>
   1524a:	83 81       	ldd	r24, Z+3	; 0x03
   1524c:	94 81       	ldd	r25, Z+4	; 0x04
   1524e:	82 60       	ori	r24, 0x02	; 2
   15250:	94 83       	std	Z+4, r25	; 0x04
   15252:	83 83       	std	Z+3, r24	; 0x03
   15254:	0e 94 48 6f 	call	0xde90	; 0xde90 <mmc_wp_status>
   15258:	e0 91 31 19 	lds	r30, 0x1931	; 0x801931 <SS80s>
   1525c:	f0 91 32 19 	lds	r31, 0x1932	; 0x801932 <SS80s+0x1>
   15260:	89 2b       	or	r24, r25
   15262:	29 f0       	breq	.+10     	; 0x1526e <SS80_locate_and_write+0x1fe>
   15264:	83 81       	ldd	r24, Z+3	; 0x03
   15266:	94 81       	ldd	r25, Z+4	; 0x04
   15268:	88 60       	ori	r24, 0x08	; 8
   1526a:	94 83       	std	Z+4, r25	; 0x04
   1526c:	83 83       	std	Z+3, r24	; 0x03
   1526e:	21 e0       	ldi	r18, 0x01	; 1
   15270:	22 83       	std	Z+2, r18	; 0x02
   15272:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15276:	81 ff       	sbrs	r24, 1
   15278:	27 c0       	rjmp	.+78     	; 0x152c8 <SS80_locate_and_write+0x258>
   1527a:	89 89       	ldd	r24, Y+17	; 0x11
   1527c:	9a 89       	ldd	r25, Y+18	; 0x12
   1527e:	ab 89       	ldd	r26, Y+19	; 0x13
   15280:	ed b7       	in	r30, 0x3d	; 61
   15282:	fe b7       	in	r31, 0x3e	; 62
   15284:	81 83       	std	Z+1, r24	; 0x01
   15286:	92 83       	std	Z+2, r25	; 0x02
   15288:	a3 83       	std	Z+3, r26	; 0x03
   1528a:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   1528e:	1c c0       	rjmp	.+56     	; 0x152c8 <SS80_locate_and_write+0x258>
   15290:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15294:	85 ff       	sbrs	r24, 5
   15296:	0c c0       	rjmp	.+24     	; 0x152b0 <SS80_locate_and_write+0x240>
   15298:	ed b7       	in	r30, 0x3d	; 61
   1529a:	fe b7       	in	r31, 0x3e	; 62
   1529c:	d5 82       	std	Z+5, r13	; 0x05
   1529e:	c4 82       	std	Z+4, r12	; 0x04
   152a0:	2e 85       	ldd	r18, Y+14	; 0x0e
   152a2:	3f 85       	ldd	r19, Y+15	; 0x0f
   152a4:	48 89       	ldd	r20, Y+16	; 0x10
   152a6:	21 83       	std	Z+1, r18	; 0x01
   152a8:	32 83       	std	Z+2, r19	; 0x02
   152aa:	43 83       	std	Z+3, r20	; 0x03
   152ac:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   152b0:	c6 01       	movw	r24, r12
   152b2:	0d 2c       	mov	r0, r13
   152b4:	00 0c       	add	r0, r0
   152b6:	aa 0b       	sbc	r26, r26
   152b8:	bb 0b       	sbc	r27, r27
   152ba:	88 0e       	add	r8, r24
   152bc:	99 1e       	adc	r9, r25
   152be:	aa 1e       	adc	r10, r26
   152c0:	bb 1e       	adc	r11, r27
   152c2:	00 e0       	ldi	r16, 0x00	; 0
   152c4:	10 e0       	ldi	r17, 0x00	; 0
   152c6:	05 c0       	rjmp	.+10     	; 0x152d2 <SS80_locate_and_write+0x262>
   152c8:	ec 14       	cp	r14, r12
   152ca:	fd 04       	cpc	r15, r13
   152cc:	64 f0       	brlt	.+24     	; 0x152e6 <SS80_locate_and_write+0x276>
   152ce:	01 e0       	ldi	r16, 0x01	; 1
   152d0:	10 e0       	ldi	r17, 0x00	; 0
   152d2:	c7 01       	movw	r24, r14
   152d4:	0f 2c       	mov	r0, r15
   152d6:	00 0c       	add	r0, r0
   152d8:	aa 0b       	sbc	r26, r26
   152da:	bb 0b       	sbc	r27, r27
   152dc:	48 0e       	add	r4, r24
   152de:	59 1e       	adc	r5, r25
   152e0:	6a 1e       	adc	r6, r26
   152e2:	7b 1e       	adc	r7, r27
   152e4:	0b c0       	rjmp	.+22     	; 0x152fc <SS80_locate_and_write+0x28c>
   152e6:	c6 01       	movw	r24, r12
   152e8:	0d 2c       	mov	r0, r13
   152ea:	00 0c       	add	r0, r0
   152ec:	aa 0b       	sbc	r26, r26
   152ee:	bb 0b       	sbc	r27, r27
   152f0:	48 0e       	add	r4, r24
   152f2:	59 1e       	adc	r5, r25
   152f4:	6a 1e       	adc	r6, r26
   152f6:	7b 1e       	adc	r7, r27
   152f8:	01 e0       	ldi	r16, 0x01	; 1
   152fa:	10 e0       	ldi	r17, 0x00	; 0
   152fc:	2c 18       	sub	r2, r12
   152fe:	3d 08       	sbc	r3, r13
   15300:	8c 85       	ldd	r24, Y+12	; 0x0c
   15302:	9d 85       	ldd	r25, Y+13	; 0x0d
   15304:	90 ff       	sbrs	r25, 0
   15306:	19 cf       	rjmp	.-462    	; 0x1513a <SS80_locate_and_write+0xca>
   15308:	12 14       	cp	r1, r2
   1530a:	13 04       	cpc	r1, r3
   1530c:	7c f4       	brge	.+30     	; 0x1532c <SS80_locate_and_write+0x2bc>
   1530e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15312:	81 ff       	sbrs	r24, 1
   15314:	1d c0       	rjmp	.+58     	; 0x15350 <SS80_locate_and_write+0x2e0>
   15316:	85 e9       	ldi	r24, 0x95	; 149
   15318:	92 e2       	ldi	r25, 0x22	; 34
   1531a:	a0 e0       	ldi	r26, 0x00	; 0
   1531c:	ed b7       	in	r30, 0x3d	; 61
   1531e:	fe b7       	in	r31, 0x3e	; 62
   15320:	81 83       	std	Z+1, r24	; 0x01
   15322:	92 83       	std	Z+2, r25	; 0x02
   15324:	a3 83       	std	Z+3, r26	; 0x03
   15326:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   1532a:	12 c0       	rjmp	.+36     	; 0x15350 <SS80_locate_and_write+0x2e0>
   1532c:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15330:	85 ff       	sbrs	r24, 5
   15332:	0e c0       	rjmp	.+28     	; 0x15350 <SS80_locate_and_write+0x2e0>
   15334:	ed b7       	in	r30, 0x3d	; 61
   15336:	fe b7       	in	r31, 0x3e	; 62
   15338:	44 82       	std	Z+4, r4	; 0x04
   1533a:	55 82       	std	Z+5, r5	; 0x05
   1533c:	66 82       	std	Z+6, r6	; 0x06
   1533e:	77 82       	std	Z+7, r7	; 0x07
   15340:	8a e6       	ldi	r24, 0x6A	; 106
   15342:	92 e2       	ldi	r25, 0x22	; 34
   15344:	a0 e0       	ldi	r26, 0x00	; 0
   15346:	81 83       	std	Z+1, r24	; 0x01
   15348:	92 83       	std	Z+2, r25	; 0x02
   1534a:	a3 83       	std	Z+3, r26	; 0x03
   1534c:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   15350:	00 91 31 19 	lds	r16, 0x1931	; 0x801931 <SS80s>
   15354:	10 91 32 19 	lds	r17, 0x1932	; 0x801932 <SS80s+0x1>
   15358:	e0 91 33 19 	lds	r30, 0x1933	; 0x801933 <SS80p>
   1535c:	f0 91 34 19 	lds	r31, 0x1934	; 0x801934 <SS80p+0x1>
   15360:	20 89       	ldd	r18, Z+16	; 0x10
   15362:	31 89       	ldd	r19, Z+17	; 0x11
   15364:	40 e0       	ldi	r20, 0x00	; 0
   15366:	50 e0       	ldi	r21, 0x00	; 0
   15368:	c5 01       	movw	r24, r10
   1536a:	b4 01       	movw	r22, r8
   1536c:	0e 94 71 df 	call	0x1bee2	; 0x1bee2 <__udivmodsi4>
   15370:	f8 01       	movw	r30, r16
   15372:	27 83       	std	Z+7, r18	; 0x07
   15374:	30 87       	std	Z+8, r19	; 0x08
   15376:	41 87       	std	Z+9, r20	; 0x09
   15378:	52 87       	std	Z+10, r21	; 0x0a
   1537a:	8c 85       	ldd	r24, Y+12	; 0x0c
   1537c:	9d 85       	ldd	r25, Y+13	; 0x0d
   1537e:	88 27       	eor	r24, r24
   15380:	90 7d       	andi	r25, 0xD0	; 208
   15382:	04 c0       	rjmp	.+8      	; 0x1538c <SS80_locate_and_write+0x31c>
   15384:	01 2b       	or	r16, r17
   15386:	09 f4       	brne	.+2      	; 0x1538a <SS80_locate_and_write+0x31a>
   15388:	37 cf       	rjmp	.-402    	; 0x151f8 <SS80_locate_and_write+0x188>
   1538a:	b6 cf       	rjmp	.-148    	; 0x152f8 <SS80_locate_and_write+0x288>
   1538c:	63 96       	adiw	r28, 0x13	; 19
   1538e:	e2 e1       	ldi	r30, 0x12	; 18
   15390:	0c 94 fa df 	jmp	0x1bff4	; 0x1bff4 <__epilogue_restores__>

00015394 <SS80_Report>:
   15394:	a8 e0       	ldi	r26, 0x08	; 8
   15396:	b0 e0       	ldi	r27, 0x00	; 0
   15398:	e0 ed       	ldi	r30, 0xD0	; 208
   1539a:	f9 ea       	ldi	r31, 0xA9	; 169
   1539c:	0c 94 ee df 	jmp	0x1bfdc	; 0x1bfdc <__prologue_saves__+0x20>
   153a0:	e0 91 31 19 	lds	r30, 0x1931	; 0x801931 <SS80s>
   153a4:	f0 91 32 19 	lds	r31, 0x1932	; 0x801932 <SS80s+0x1>
   153a8:	82 81       	ldd	r24, Z+2	; 0x02
   153aa:	88 87       	std	Y+8, r24	; 0x08
   153ac:	80 e0       	ldi	r24, 0x00	; 0
   153ae:	91 e0       	ldi	r25, 0x01	; 1
   153b0:	9f 83       	std	Y+7, r25	; 0x07
   153b2:	8e 83       	std	Y+6, r24	; 0x06
   153b4:	ae 01       	movw	r20, r28
   153b6:	4a 5f       	subi	r20, 0xFA	; 250
   153b8:	5f 4f       	sbci	r21, 0xFF	; 255
   153ba:	61 e0       	ldi	r22, 0x01	; 1
   153bc:	70 e0       	ldi	r23, 0x00	; 0
   153be:	ce 01       	movw	r24, r28
   153c0:	08 96       	adiw	r24, 0x08	; 8
   153c2:	0e 94 b2 8a 	call	0x11564	; 0x11564 <gpib_write_str>
   153c6:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   153ca:	01 97       	sbiw	r24, 0x01	; 1
   153cc:	89 f0       	breq	.+34     	; 0x153f0 <SS80_Report+0x5c>
   153ce:	21 ff       	sbrs	r18, 1
   153d0:	0a c0       	rjmp	.+20     	; 0x153e6 <SS80_Report+0x52>
   153d2:	89 e5       	ldi	r24, 0x59	; 89
   153d4:	9d e1       	ldi	r25, 0x1D	; 29
   153d6:	a0 e0       	ldi	r26, 0x00	; 0
   153d8:	ed b7       	in	r30, 0x3d	; 61
   153da:	fe b7       	in	r31, 0x3e	; 62
   153dc:	81 83       	std	Z+1, r24	; 0x01
   153de:	92 83       	std	Z+2, r25	; 0x02
   153e0:	a3 83       	std	Z+3, r26	; 0x03
   153e2:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   153e6:	8e 81       	ldd	r24, Y+6	; 0x06
   153e8:	9f 81       	ldd	r25, Y+7	; 0x07
   153ea:	88 27       	eor	r24, r24
   153ec:	90 7d       	andi	r25, 0xD0	; 208
   153ee:	1b c0       	rjmp	.+54     	; 0x15426 <SS80_Report+0x92>
   153f0:	25 ff       	sbrs	r18, 5
   153f2:	12 c0       	rjmp	.+36     	; 0x15418 <SS80_Report+0x84>
   153f4:	e0 91 31 19 	lds	r30, 0x1931	; 0x801931 <SS80s>
   153f8:	f0 91 32 19 	lds	r31, 0x1932	; 0x801932 <SS80s+0x1>
   153fc:	82 81       	ldd	r24, Z+2	; 0x02
   153fe:	90 e0       	ldi	r25, 0x00	; 0
   15400:	ed b7       	in	r30, 0x3d	; 61
   15402:	fe b7       	in	r31, 0x3e	; 62
   15404:	95 83       	std	Z+5, r25	; 0x05
   15406:	84 83       	std	Z+4, r24	; 0x04
   15408:	86 e4       	ldi	r24, 0x46	; 70
   1540a:	9d e1       	ldi	r25, 0x1D	; 29
   1540c:	a0 e0       	ldi	r26, 0x00	; 0
   1540e:	81 83       	std	Z+1, r24	; 0x01
   15410:	92 83       	std	Z+2, r25	; 0x02
   15412:	a3 83       	std	Z+3, r26	; 0x03
   15414:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   15418:	e0 91 31 19 	lds	r30, 0x1931	; 0x801931 <SS80s>
   1541c:	f0 91 32 19 	lds	r31, 0x1932	; 0x801932 <SS80s+0x1>
   15420:	12 82       	std	Z+2, r1	; 0x02
   15422:	80 e0       	ldi	r24, 0x00	; 0
   15424:	90 e0       	ldi	r25, 0x00	; 0
   15426:	28 96       	adiw	r28, 0x08	; 8
   15428:	e2 e0       	ldi	r30, 0x02	; 2
   1542a:	0c 94 0a e0 	jmp	0x1c014	; 0x1c014 <__epilogue_restores__+0x20>

0001542e <Clear_Common>:
   1542e:	e0 91 31 19 	lds	r30, 0x1931	; 0x801931 <SS80s>
   15432:	f0 91 32 19 	lds	r31, 0x1932	; 0x801932 <SS80s+0x1>
///
/// @param[in] uart: uart number.
///
/// @return  Character count in receive buffer.
int uart_keyhit(uint8_t uart)
{
   15436:	25 81       	ldd	r18, Z+5	; 0x05
   15438:	30 e0       	ldi	r19, 0x00	; 0
   1543a:	28 17       	cp	r18, r24
   1543c:	39 07       	cpc	r19, r25
   1543e:	19 f0       	breq	.+6      	; 0x15446 <Clear_Common+0x18>
   15440:	0f 97       	sbiw	r24, 0x0f	; 15
   15442:	99 f4       	brne	.+38     	; 0x1546a <Clear_Common+0x3c>
   15444:	03 c0       	rjmp	.+6      	; 0x1544c <Clear_Common+0x1e>
   15446:	2f 30       	cpi	r18, 0x0F	; 15
   15448:	31 05       	cpc	r19, r1
   1544a:	09 f4       	brne	.+2      	; 0x1544e <Clear_Common+0x20>
   1544c:	15 82       	std	Z+5, r1	; 0x05
   1544e:	16 82       	std	Z+6, r1	; 0x06
   15450:	17 82       	std	Z+7, r1	; 0x07
   15452:	10 86       	std	Z+8, r1	; 0x08
   15454:	11 86       	std	Z+9, r1	; 0x09
   15456:	12 86       	std	Z+10, r1	; 0x0a
   15458:	13 86       	std	Z+11, r1	; 0x0b
   1545a:	14 86       	std	Z+12, r1	; 0x0c
   1545c:	15 86       	std	Z+13, r1	; 0x0d
   1545e:	16 86       	std	Z+14, r1	; 0x0e
   15460:	11 82       	std	Z+1, r1	; 0x01
   15462:	10 82       	st	Z, r1
   15464:	14 82       	std	Z+4, r1	; 0x04
   15466:	13 82       	std	Z+3, r1	; 0x03
   15468:	12 82       	std	Z+2, r1	; 0x02
   1546a:	08 95       	ret

0001546c <SS80_init>:
   1546c:	a5 e0       	ldi	r26, 0x05	; 5
   1546e:	b0 e0       	ldi	r27, 0x00	; 0
   15470:	ec e3       	ldi	r30, 0x3C	; 60
   15472:	fa ea       	ldi	r31, 0xAA	; 170
   15474:	0c 94 e8 df 	jmp	0x1bfd0	; 0x1bfd0 <__prologue_saves__+0x14>
   15478:	01 e9       	ldi	r16, 0x91	; 145
   1547a:	10 e2       	ldi	r17, 0x20	; 32
   1547c:	cb e0       	ldi	r28, 0x0B	; 11
   1547e:	d0 e0       	ldi	r29, 0x00	; 0
   15480:	82 e0       	ldi	r24, 0x02	; 2
   15482:	f8 2e       	mov	r15, r24
   15484:	83 e1       	ldi	r24, 0x13	; 19
   15486:	94 e2       	ldi	r25, 0x24	; 36
   15488:	6c 01       	movw	r12, r24
   1548a:	e1 2c       	mov	r14, r1
   1548c:	f8 01       	movw	r30, r16
   1548e:	80 81       	ld	r24, Z
   15490:	83 30       	cpi	r24, 0x03	; 3
   15492:	29 f5       	brne	.+74     	; 0x154de <SS80_init+0x72>
   15494:	ce 01       	movw	r24, r28
   15496:	0e 94 83 96 	call	0x12d06	; 0x12d06 <set_active_device>
   1549a:	89 2b       	or	r24, r25
   1549c:	01 f1       	breq	.+64     	; 0x154de <SS80_init+0x72>
   1549e:	8f e0       	ldi	r24, 0x0F	; 15
   154a0:	90 e0       	ldi	r25, 0x00	; 0
   154a2:	c5 df       	rcall	.-118    	; 0x1542e <Clear_Common>
   154a4:	e0 91 31 19 	lds	r30, 0x1931	; 0x801931 <SS80s>
   154a8:	f0 91 32 19 	lds	r31, 0x1932	; 0x801932 <SS80s+0x1>
   154ac:	f2 82       	std	Z+2, r15	; 0x02
   154ae:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   154b2:	85 ff       	sbrs	r24, 5
   154b4:	0c c0       	rjmp	.+24     	; 0x154ce <SS80_init+0x62>
   154b6:	f8 01       	movw	r30, r16
   154b8:	81 81       	ldd	r24, Z+1	; 0x01
   154ba:	90 e0       	ldi	r25, 0x00	; 0
   154bc:	ed b7       	in	r30, 0x3d	; 61
   154be:	fe b7       	in	r31, 0x3e	; 62
   154c0:	95 83       	std	Z+5, r25	; 0x05
   154c2:	84 83       	std	Z+4, r24	; 0x04
   154c4:	c1 82       	std	Z+1, r12	; 0x01
   154c6:	d2 82       	std	Z+2, r13	; 0x02
   154c8:	e3 82       	std	Z+3, r14	; 0x03
   154ca:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   154ce:	e0 91 33 19 	lds	r30, 0x1933	; 0x801933 <SS80p>
    return ( uart_rx_count( uart ) );
}
   154d2:	f0 91 34 19 	lds	r31, 0x1934	; 0x801934 <SS80p+0x1>
   154d6:	81 81       	ldd	r24, Z+1	; 0x01
   154d8:	90 e0       	ldi	r25, 0x00	; 0
   154da:	0e 94 8e 85 	call	0x10b1c	; 0x10b1c <gpib_disable_PPR>
   154de:	21 97       	sbiw	r28, 0x01	; 1
   154e0:	0b 52       	subi	r16, 0x2B	; 43
   154e2:	11 09       	sbc	r17, r1
   154e4:	cf 3f       	cpi	r28, 0xFF	; 255
   154e6:	ff ef       	ldi	r31, 0xFF	; 255
   154e8:	df 07       	cpc	r29, r31
   154ea:	81 f6       	brne	.-96     	; 0x1548c <SS80_init+0x20>
   154ec:	cd b7       	in	r28, 0x3d	; 61
   154ee:	de b7       	in	r29, 0x3e	; 62
   154f0:	25 96       	adiw	r28, 0x05	; 5
   154f2:	e8 e0       	ldi	r30, 0x08	; 8
   154f4:	0c 94 04 e0 	jmp	0x1c008	; 0x1c008 <__epilogue_restores__+0x14>

000154f8 <SS80_Channel_Independent_Clear>:
   154f8:	9a df       	rcall	.-204    	; 0x1542e <Clear_Common>
   154fa:	e0 91 33 19 	lds	r30, 0x1933	; 0x801933 <SS80p>
   154fe:	f0 91 34 19 	lds	r31, 0x1934	; 0x801934 <SS80p+0x1>
   15502:	81 81       	ldd	r24, Z+1	; 0x01
   15504:	90 e0       	ldi	r25, 0x00	; 0
   15506:	0e 94 58 85 	call	0x10ab0	; 0x10ab0 <gpib_enable_PPR>
   1550a:	80 e0       	ldi	r24, 0x00	; 0
   1550c:	90 e0       	ldi	r25, 0x00	; 0
   1550e:	08 95       	ret

00015510 <SS80_Universal_Device_Clear>:
   15510:	8f e0       	ldi	r24, 0x0F	; 15
   15512:	90 e0       	ldi	r25, 0x00	; 0
   15514:	8c df       	rcall	.-232    	; 0x1542e <Clear_Common>
   15516:	e0 91 33 19 	lds	r30, 0x1933	; 0x801933 <SS80p>
   1551a:	f0 91 34 19 	lds	r31, 0x1934	; 0x801934 <SS80p+0x1>
   1551e:	81 81       	ldd	r24, Z+1	; 0x01
   15520:	90 e0       	ldi	r25, 0x00	; 0
   15522:	0e 94 58 85 	call	0x10ab0	; 0x10ab0 <gpib_enable_PPR>
   15526:	80 e0       	ldi	r24, 0x00	; 0
   15528:	90 e0       	ldi	r25, 0x00	; 0
   1552a:	08 95       	ret

0001552c <SS80_Selected_Device_Clear>:
   1552c:	cf 93       	push	r28
   1552e:	df 93       	push	r29
   15530:	00 d0       	rcall	.+0      	; 0x15532 <SS80_Selected_Device_Clear+0x6>
   15532:	1f 92       	push	r1
   15534:	ec 01       	movw	r28, r24
   15536:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1553a:	85 ff       	sbrs	r24, 5
   1553c:	0a c0       	rjmp	.+20     	; 0x15552 <SS80_Selected_Device_Clear+0x26>
   1553e:	8a e3       	ldi	r24, 0x3A	; 58
   15540:	9d e1       	ldi	r25, 0x1D	; 29
   15542:	a0 e0       	ldi	r26, 0x00	; 0
   15544:	ed b7       	in	r30, 0x3d	; 61
   15546:	fe b7       	in	r31, 0x3e	; 62
   15548:	81 83       	std	Z+1, r24	; 0x01
   1554a:	92 83       	std	Z+2, r25	; 0x02
   1554c:	a3 83       	std	Z+3, r26	; 0x03
   1554e:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   15552:	ce 01       	movw	r24, r28
   15554:	6c df       	rcall	.-296    	; 0x1542e <Clear_Common>
   15556:	e0 91 33 19 	lds	r30, 0x1933	; 0x801933 <SS80p>
   1555a:	f0 91 34 19 	lds	r31, 0x1934	; 0x801934 <SS80p+0x1>
   1555e:	81 81       	ldd	r24, Z+1	; 0x01
   15560:	90 e0       	ldi	r25, 0x00	; 0
   15562:	0e 94 58 85 	call	0x10ab0	; 0x10ab0 <gpib_enable_PPR>
   15566:	80 e0       	ldi	r24, 0x00	; 0
   15568:	90 e0       	ldi	r25, 0x00	; 0
   1556a:	cd b7       	in	r28, 0x3d	; 61
   1556c:	de b7       	in	r29, 0x3e	; 62
   1556e:	23 96       	adiw	r28, 0x03	; 3
   15570:	e2 e0       	ldi	r30, 0x02	; 2
   15572:	0c 94 0a e0 	jmp	0x1c014	; 0x1c014 <__epilogue_restores__+0x20>

00015576 <SS80_Amigo_Clear>:
   15576:	a6 e0       	ldi	r26, 0x06	; 6
   15578:	b0 e0       	ldi	r27, 0x00	; 0
   1557a:	e1 ec       	ldi	r30, 0xC1	; 193
   1557c:	fa ea       	ldi	r31, 0xAA	; 170
   1557e:	0c 94 ee df 	jmp	0x1bfdc	; 0x1bfdc <__prologue_saves__+0x20>
   15582:	1d 82       	std	Y+5, r1	; 0x05
   15584:	1c 82       	std	Y+4, r1	; 0x04
   15586:	ae 01       	movw	r20, r28
   15588:	4c 5f       	subi	r20, 0xFC	; 252
   1558a:	5f 4f       	sbci	r21, 0xFF	; 255
   1558c:	61 e0       	ldi	r22, 0x01	; 1
   1558e:	70 e0       	ldi	r23, 0x00	; 0
   15590:	ce 01       	movw	r24, r28
   15592:	06 96       	adiw	r24, 0x06	; 6
   15594:	0e 94 10 8a 	call	0x11420	; 0x11420 <gpib_read_str>
   15598:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   1559c:	01 97       	sbiw	r24, 0x01	; 1
   1559e:	89 f0       	breq	.+34     	; 0x155c2 <SS80_Amigo_Clear+0x4c>
   155a0:	21 ff       	sbrs	r18, 1
   155a2:	0a c0       	rjmp	.+20     	; 0x155b8 <SS80_Amigo_Clear+0x42>
   155a4:	87 e2       	ldi	r24, 0x27	; 39
   155a6:	9d e1       	ldi	r25, 0x1D	; 29
   155a8:	a0 e0       	ldi	r26, 0x00	; 0
   155aa:	ed b7       	in	r30, 0x3d	; 61
   155ac:	fe b7       	in	r31, 0x3e	; 62
   155ae:	81 83       	std	Z+1, r24	; 0x01
   155b0:	92 83       	std	Z+2, r25	; 0x02
   155b2:	a3 83       	std	Z+3, r26	; 0x03
   155b4:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   155b8:	8c 81       	ldd	r24, Y+4	; 0x04
   155ba:	9d 81       	ldd	r25, Y+5	; 0x05
   155bc:	88 27       	eor	r24, r24
   155be:	90 7d       	andi	r25, 0xD0	; 208
   155c0:	19 c0       	rjmp	.+50     	; 0x155f4 <SS80_Amigo_Clear+0x7e>
   155c2:	25 ff       	sbrs	r18, 5
   155c4:	0a c0       	rjmp	.+20     	; 0x155da <SS80_Amigo_Clear+0x64>
   155c6:	88 e1       	ldi	r24, 0x18	; 24
   155c8:	9d e1       	ldi	r25, 0x1D	; 29
   155ca:	a0 e0       	ldi	r26, 0x00	; 0
   155cc:	ed b7       	in	r30, 0x3d	; 61
   155ce:	fe b7       	in	r31, 0x3e	; 62
   155d0:	81 83       	std	Z+1, r24	; 0x01
   155d2:	92 83       	std	Z+2, r25	; 0x02
   155d4:	a3 83       	std	Z+3, r26	; 0x03
   155d6:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   155da:	8f e0       	ldi	r24, 0x0F	; 15
   155dc:	90 e0       	ldi	r25, 0x00	; 0
   155de:	27 df       	rcall	.-434    	; 0x1542e <Clear_Common>
   155e0:	e0 91 33 19 	lds	r30, 0x1933	; 0x801933 <SS80p>
   155e4:	f0 91 34 19 	lds	r31, 0x1934	; 0x801934 <SS80p+0x1>
   155e8:	81 81       	ldd	r24, Z+1	; 0x01
   155ea:	90 e0       	ldi	r25, 0x00	; 0
   155ec:	0e 94 58 85 	call	0x10ab0	; 0x10ab0 <gpib_enable_PPR>
   155f0:	80 e0       	ldi	r24, 0x00	; 0
   155f2:	90 e0       	ldi	r25, 0x00	; 0
   155f4:	26 96       	adiw	r28, 0x06	; 6
   155f6:	e2 e0       	ldi	r30, 0x02	; 2
   155f8:	0c 94 0a e0 	jmp	0x1c014	; 0x1c014 <__epilogue_restores__+0x20>

000155fc <SS80_Cancel>:
   155fc:	e0 91 31 19 	lds	r30, 0x1931	; 0x801931 <SS80s>
   15600:	f0 91 32 19 	lds	r31, 0x1932	; 0x801932 <SS80s+0x1>
   15604:	11 82       	std	Z+1, r1	; 0x01
   15606:	10 82       	st	Z, r1
   15608:	e0 91 33 19 	lds	r30, 0x1933	; 0x801933 <SS80p>
   1560c:	f0 91 34 19 	lds	r31, 0x1934	; 0x801934 <SS80p+0x1>
   15610:	81 81       	ldd	r24, Z+1	; 0x01
   15612:	90 e0       	ldi	r25, 0x00	; 0
   15614:	0e 94 58 85 	call	0x10ab0	; 0x10ab0 <gpib_enable_PPR>
   15618:	80 e0       	ldi	r24, 0x00	; 0
   1561a:	90 e0       	ldi	r25, 0x00	; 0
   1561c:	08 95       	ret

0001561e <SS80_Transparent_State>:
   1561e:	a9 e0       	ldi	r26, 0x09	; 9
   15620:	b0 e0       	ldi	r27, 0x00	; 0
   15622:	e5 e1       	ldi	r30, 0x15	; 21
   15624:	fb ea       	ldi	r31, 0xAB	; 171
   15626:	0c 94 e6 df 	jmp	0x1bfcc	; 0x1bfcc <__prologue_saves__+0x10>
   1562a:	e0 91 33 19 	lds	r30, 0x1933	; 0x801933 <SS80p>
   1562e:	f0 91 34 19 	lds	r31, 0x1934	; 0x801934 <SS80p+0x1>
   15632:	81 81       	ldd	r24, Z+1	; 0x01
   15634:	90 e0       	ldi	r25, 0x00	; 0
   15636:	0e 94 8e 85 	call	0x10b1c	; 0x10b1c <gpib_disable_PPR>
   1563a:	80 e0       	ldi	r24, 0x00	; 0
   1563c:	91 e0       	ldi	r25, 0x01	; 1
   1563e:	99 87       	std	Y+9, r25	; 0x09
   15640:	88 87       	std	Y+8, r24	; 0x08
   15642:	ae 01       	movw	r20, r28
   15644:	48 5f       	subi	r20, 0xF8	; 248
   15646:	5f 4f       	sbci	r21, 0xFF	; 255
   15648:	60 e0       	ldi	r22, 0x00	; 0
   1564a:	72 e0       	ldi	r23, 0x02	; 2
   1564c:	8e ea       	ldi	r24, 0xAE	; 174
   1564e:	9c e1       	ldi	r25, 0x1C	; 28
   15650:	0e 94 10 8a 	call	0x11420	; 0x11420 <gpib_read_str>
   15654:	7c 01       	movw	r14, r24
   15656:	88 85       	ldd	r24, Y+8	; 0x08
   15658:	99 85       	ldd	r25, Y+9	; 0x09
   1565a:	9c 01       	movw	r18, r24
   1565c:	22 27       	eor	r18, r18
   1565e:	30 7d       	andi	r19, 0xD0	; 208
   15660:	23 2b       	or	r18, r19
   15662:	79 f0       	breq	.+30     	; 0x15682 <SS80_Transparent_State+0x64>
   15664:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15668:	81 ff       	sbrs	r24, 1
   1566a:	da c0       	rjmp	.+436    	; 0x15820 <SS80_Transparent_State+0x202>
   1566c:	87 eb       	ldi	r24, 0xB7	; 183
   1566e:	9e e1       	ldi	r25, 0x1E	; 30
   15670:	a0 e0       	ldi	r26, 0x00	; 0
   15672:	ed b7       	in	r30, 0x3d	; 61
   15674:	fe b7       	in	r31, 0x3e	; 62
   15676:	81 83       	std	Z+1, r24	; 0x01
   15678:	92 83       	std	Z+2, r25	; 0x02
   1567a:	a3 83       	std	Z+3, r26	; 0x03
   1567c:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   15680:	cf c0       	rjmp	.+414    	; 0x15820 <SS80_Transparent_State+0x202>
   15682:	e1 14       	cp	r14, r1
   15684:	f1 04       	cpc	r15, r1
   15686:	09 f4       	brne	.+2      	; 0x1568a <SS80_Transparent_State+0x6c>
   15688:	d0 c0       	rjmp	.+416    	; 0x1582a <SS80_Transparent_State+0x20c>
   1568a:	90 fd       	sbrc	r25, 0
   1568c:	0e c0       	rjmp	.+28     	; 0x156aa <SS80_Transparent_State+0x8c>
   1568e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15692:	81 ff       	sbrs	r24, 1
   15694:	0a c0       	rjmp	.+20     	; 0x156aa <SS80_Transparent_State+0x8c>
   15696:	8e e9       	ldi	r24, 0x9E	; 158
   15698:	9e e1       	ldi	r25, 0x1E	; 30
   1569a:	a0 e0       	ldi	r26, 0x00	; 0
   1569c:	ed b7       	in	r30, 0x3d	; 61
   1569e:	fe b7       	in	r31, 0x3e	; 62
   156a0:	81 83       	std	Z+1, r24	; 0x01
   156a2:	92 83       	std	Z+2, r25	; 0x02
   156a4:	a3 83       	std	Z+3, r26	; 0x03
   156a6:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   156aa:	8e ea       	ldi	r24, 0xAE	; 174
   156ac:	a8 2e       	mov	r10, r24
   156ae:	8c e1       	ldi	r24, 0x1C	; 28
   156b0:	b8 2e       	mov	r11, r24
   156b2:	00 e0       	ldi	r16, 0x00	; 0
   156b4:	10 e0       	ldi	r17, 0x00	; 0
   156b6:	0e 15       	cp	r16, r14
   156b8:	1f 05       	cpc	r17, r15
   156ba:	0c f0       	brlt	.+2      	; 0x156be <SS80_Transparent_State+0xa0>
   156bc:	9c c0       	rjmp	.+312    	; 0x157f6 <SS80_Transparent_State+0x1d8>
   156be:	68 01       	movw	r12, r16
   156c0:	ff ef       	ldi	r31, 0xFF	; 255
   156c2:	cf 1a       	sub	r12, r31
   156c4:	df 0a       	sbc	r13, r31
   156c6:	f5 01       	movw	r30, r10
   156c8:	81 91       	ld	r24, Z+
   156ca:	5f 01       	movw	r10, r30
   156cc:	28 2f       	mov	r18, r24
   156ce:	30 e0       	ldi	r19, 0x00	; 0
   156d0:	a9 01       	movw	r20, r18
   156d2:	40 52       	subi	r20, 0x20	; 32
   156d4:	51 09       	sbc	r21, r1
   156d6:	40 31       	cpi	r20, 0x10	; 16
   156d8:	51 05       	cpc	r21, r1
   156da:	20 f4       	brcc	.+8      	; 0x156e4 <SS80_Transparent_State+0xc6>
   156dc:	80 52       	subi	r24, 0x20	; 32
   156de:	8c d9       	rcall	.-3304   	; 0x149f8 <SS80_Check_Unit>
   156e0:	86 01       	movw	r16, r12
   156e2:	e9 cf       	rjmp	.-46     	; 0x156b6 <SS80_Transparent_State+0x98>
   156e4:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   156e8:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   156ec:	21 30       	cpi	r18, 0x01	; 1
   156ee:	31 05       	cpc	r19, r1
   156f0:	c9 f4       	brne	.+50     	; 0x15724 <SS80_Transparent_State+0x106>
   156f2:	0e 5f       	subi	r16, 0xFE	; 254
   156f4:	1f 4f       	sbci	r17, 0xFF	; 255
   156f6:	80 73       	andi	r24, 0x30	; 48
   156f8:	99 27       	eor	r25, r25
   156fa:	89 2b       	or	r24, r25
   156fc:	51 f0       	breq	.+20     	; 0x15712 <SS80_Transparent_State+0xf4>
   156fe:	89 e7       	ldi	r24, 0x79	; 121
   15700:	9e e1       	ldi	r25, 0x1E	; 30
   15702:	a0 e0       	ldi	r26, 0x00	; 0
   15704:	ed b7       	in	r30, 0x3d	; 61
   15706:	fe b7       	in	r31, 0x3e	; 62
   15708:	81 83       	std	Z+1, r24	; 0x01
   1570a:	92 83       	std	Z+2, r25	; 0x02
   1570c:	a3 83       	std	Z+3, r26	; 0x03
   1570e:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   15712:	e0 91 33 19 	lds	r30, 0x1933	; 0x801933 <SS80p>
   15716:	f0 91 34 19 	lds	r31, 0x1934	; 0x801934 <SS80p+0x1>
   1571a:	81 81       	ldd	r24, Z+1	; 0x01
   1571c:	90 e0       	ldi	r25, 0x00	; 0
   1571e:	0e 94 58 85 	call	0x10ab0	; 0x10ab0 <gpib_enable_PPR>
   15722:	69 c0       	rjmp	.+210    	; 0x157f6 <SS80_Transparent_State+0x1d8>
   15724:	22 30       	cpi	r18, 0x02	; 2
   15726:	31 05       	cpc	r19, r1
   15728:	51 f4       	brne	.+20     	; 0x1573e <SS80_Transparent_State+0x120>
   1572a:	0b 5f       	subi	r16, 0xFB	; 251
   1572c:	1f 4f       	sbci	r17, 0xFF	; 255
   1572e:	80 73       	andi	r24, 0x30	; 48
   15730:	99 27       	eor	r25, r25
   15732:	89 2b       	or	r24, r25
   15734:	09 f4       	brne	.+2      	; 0x15738 <SS80_Transparent_State+0x11a>
   15736:	5f c0       	rjmp	.+190    	; 0x157f6 <SS80_Transparent_State+0x1d8>
   15738:	8c e5       	ldi	r24, 0x5C	; 92
   1573a:	9e e1       	ldi	r25, 0x1E	; 30
   1573c:	0c c0       	rjmp	.+24     	; 0x15756 <SS80_Transparent_State+0x138>
   1573e:	23 30       	cpi	r18, 0x03	; 3
   15740:	31 05       	cpc	r19, r1
   15742:	91 f4       	brne	.+36     	; 0x15768 <SS80_Transparent_State+0x14a>
   15744:	0b 5f       	subi	r16, 0xFB	; 251
   15746:	1f 4f       	sbci	r17, 0xFF	; 255
   15748:	80 73       	andi	r24, 0x30	; 48
   1574a:	99 27       	eor	r25, r25
   1574c:	89 2b       	or	r24, r25
   1574e:	09 f4       	brne	.+2      	; 0x15752 <SS80_Transparent_State+0x134>
   15750:	52 c0       	rjmp	.+164    	; 0x157f6 <SS80_Transparent_State+0x1d8>
   15752:	8e e3       	ldi	r24, 0x3E	; 62
   15754:	9e e1       	ldi	r25, 0x1E	; 30
   15756:	a0 e0       	ldi	r26, 0x00	; 0
   15758:	ed b7       	in	r30, 0x3d	; 61
   1575a:	fe b7       	in	r31, 0x3e	; 62
   1575c:	81 83       	std	Z+1, r24	; 0x01
   1575e:	92 83       	std	Z+2, r25	; 0x02
   15760:	a3 83       	std	Z+3, r26	; 0x03
   15762:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   15766:	47 c0       	rjmp	.+142    	; 0x157f6 <SS80_Transparent_State+0x1d8>
   15768:	28 30       	cpi	r18, 0x08	; 8
   1576a:	31 05       	cpc	r19, r1
   1576c:	e1 f4       	brne	.+56     	; 0x157a6 <SS80_Transparent_State+0x188>
   1576e:	85 ff       	sbrs	r24, 5
   15770:	12 c0       	rjmp	.+36     	; 0x15796 <SS80_Transparent_State+0x178>
   15772:	e0 91 31 19 	lds	r30, 0x1931	; 0x801931 <SS80s>
   15776:	f0 91 32 19 	lds	r31, 0x1932	; 0x801932 <SS80s+0x1>
   1577a:	85 81       	ldd	r24, Z+5	; 0x05
   1577c:	90 e0       	ldi	r25, 0x00	; 0
   1577e:	ed b7       	in	r30, 0x3d	; 61
   15780:	fe b7       	in	r31, 0x3e	; 62
   15782:	95 83       	std	Z+5, r25	; 0x05
   15784:	84 83       	std	Z+4, r24	; 0x04
   15786:	87 e1       	ldi	r24, 0x17	; 23
   15788:	9e e1       	ldi	r25, 0x1E	; 30
   1578a:	a0 e0       	ldi	r26, 0x00	; 0
   1578c:	81 83       	std	Z+1, r24	; 0x01
   1578e:	92 83       	std	Z+2, r25	; 0x02
   15790:	a3 83       	std	Z+3, r26	; 0x03
   15792:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   15796:	e0 91 31 19 	lds	r30, 0x1931	; 0x801931 <SS80s>
   1579a:	f0 91 32 19 	lds	r31, 0x1932	; 0x801932 <SS80s+0x1>
   1579e:	85 81       	ldd	r24, Z+5	; 0x05
   157a0:	90 e0       	ldi	r25, 0x00	; 0
   157a2:	aa de       	rcall	.-684    	; 0x154f8 <SS80_Channel_Independent_Clear>
   157a4:	44 c0       	rjmp	.+136    	; 0x1582e <SS80_Transparent_State+0x210>
   157a6:	29 30       	cpi	r18, 0x09	; 9
   157a8:	31 05       	cpc	r19, r1
   157aa:	b1 f4       	brne	.+44     	; 0x157d8 <SS80_Transparent_State+0x1ba>
   157ac:	85 ff       	sbrs	r24, 5
   157ae:	12 c0       	rjmp	.+36     	; 0x157d4 <SS80_Transparent_State+0x1b6>
   157b0:	e0 91 31 19 	lds	r30, 0x1931	; 0x801931 <SS80s>
   157b4:	f0 91 32 19 	lds	r31, 0x1932	; 0x801932 <SS80s+0x1>
   157b8:	85 81       	ldd	r24, Z+5	; 0x05
   157ba:	90 e0       	ldi	r25, 0x00	; 0
   157bc:	ed b7       	in	r30, 0x3d	; 61
   157be:	fe b7       	in	r31, 0x3e	; 62
   157c0:	95 83       	std	Z+5, r25	; 0x05
   157c2:	84 83       	std	Z+4, r24	; 0x04
   157c4:	83 e0       	ldi	r24, 0x03	; 3
   157c6:	9e e1       	ldi	r25, 0x1E	; 30
   157c8:	a0 e0       	ldi	r26, 0x00	; 0
   157ca:	81 83       	std	Z+1, r24	; 0x01
   157cc:	92 83       	std	Z+2, r25	; 0x02
   157ce:	a3 83       	std	Z+3, r26	; 0x03
   157d0:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   157d4:	13 df       	rcall	.-474    	; 0x155fc <SS80_Cancel>
   157d6:	2b c0       	rjmp	.+86     	; 0x1582e <SS80_Transparent_State+0x210>
   157d8:	81 ff       	sbrs	r24, 1
   157da:	22 c0       	rjmp	.+68     	; 0x15820 <SS80_Transparent_State+0x202>
   157dc:	ed b7       	in	r30, 0x3d	; 61
   157de:	fe b7       	in	r31, 0x3e	; 62
   157e0:	35 83       	std	Z+5, r19	; 0x05
   157e2:	24 83       	std	Z+4, r18	; 0x04
   157e4:	83 ee       	ldi	r24, 0xE3	; 227
   157e6:	9d e1       	ldi	r25, 0x1D	; 29
   157e8:	a0 e0       	ldi	r26, 0x00	; 0
   157ea:	81 83       	std	Z+1, r24	; 0x01
   157ec:	92 83       	std	Z+2, r25	; 0x02
   157ee:	a3 83       	std	Z+3, r26	; 0x03
   157f0:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   157f4:	86 01       	movw	r16, r12
   157f6:	0e 15       	cp	r16, r14
   157f8:	1f 05       	cpc	r17, r15
   157fa:	91 f0       	breq	.+36     	; 0x15820 <SS80_Transparent_State+0x202>
   157fc:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15800:	81 ff       	sbrs	r24, 1
   15802:	0e c0       	rjmp	.+28     	; 0x15820 <SS80_Transparent_State+0x202>
   15804:	ed b7       	in	r30, 0x3d	; 61
   15806:	fe b7       	in	r31, 0x3e	; 62
   15808:	f7 82       	std	Z+7, r15	; 0x07
   1580a:	e6 82       	std	Z+6, r14	; 0x06
   1580c:	15 83       	std	Z+5, r17	; 0x05
   1580e:	04 83       	std	Z+4, r16	; 0x04
   15810:	87 ea       	ldi	r24, 0xA7	; 167
   15812:	9d e1       	ldi	r25, 0x1D	; 29
   15814:	a0 e0       	ldi	r26, 0x00	; 0
   15816:	81 83       	std	Z+1, r24	; 0x01
   15818:	92 83       	std	Z+2, r25	; 0x02
   1581a:	a3 83       	std	Z+3, r26	; 0x03
   1581c:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   15820:	88 85       	ldd	r24, Y+8	; 0x08
   15822:	99 85       	ldd	r25, Y+9	; 0x09
   15824:	88 27       	eor	r24, r24
   15826:	90 7d       	andi	r25, 0xD0	; 208
   15828:	02 c0       	rjmp	.+4      	; 0x1582e <SS80_Transparent_State+0x210>
   1582a:	80 e0       	ldi	r24, 0x00	; 0
   1582c:	90 e0       	ldi	r25, 0x00	; 0
   1582e:	29 96       	adiw	r28, 0x09	; 9
   15830:	ea e0       	ldi	r30, 0x0A	; 10
   15832:	0c 94 02 e0 	jmp	0x1c004	; 0x1c004 <__epilogue_restores__+0x10>

00015836 <SS80_error_return>:
   15836:	a6 e0       	ldi	r26, 0x06	; 6
   15838:	b0 e0       	ldi	r27, 0x00	; 0
   1583a:	e1 e2       	ldi	r30, 0x21	; 33
   1583c:	fc ea       	ldi	r31, 0xAC	; 172
   1583e:	0c 94 ee df 	jmp	0x1bfdc	; 0x1bfdc <__prologue_saves__+0x20>
   15842:	80 e0       	ldi	r24, 0x00	; 0
   15844:	91 e0       	ldi	r25, 0x01	; 1
   15846:	9d 83       	std	Y+5, r25	; 0x05
   15848:	8c 83       	std	Y+4, r24	; 0x04
   1584a:	e0 91 31 19 	lds	r30, 0x1931	; 0x801931 <SS80s>
   1584e:	f0 91 32 19 	lds	r31, 0x1932	; 0x801932 <SS80s+0x1>
   15852:	81 e0       	ldi	r24, 0x01	; 1
   15854:	82 83       	std	Z+2, r24	; 0x02
   15856:	8e 83       	std	Y+6, r24	; 0x06
   15858:	ae 01       	movw	r20, r28
   1585a:	4c 5f       	subi	r20, 0xFC	; 252
   1585c:	5f 4f       	sbci	r21, 0xFF	; 255
   1585e:	61 e0       	ldi	r22, 0x01	; 1
   15860:	70 e0       	ldi	r23, 0x00	; 0
   15862:	ce 01       	movw	r24, r28
   15864:	06 96       	adiw	r24, 0x06	; 6
   15866:	0e 94 b2 8a 	call	0x11564	; 0x11564 <gpib_write_str>
   1586a:	01 97       	sbiw	r24, 0x01	; 1
   1586c:	99 f0       	breq	.+38     	; 0x15894 <SS80_error_return+0x5e>
   1586e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15872:	81 ff       	sbrs	r24, 1
   15874:	0a c0       	rjmp	.+20     	; 0x1588a <SS80_error_return+0x54>
   15876:	85 ef       	ldi	r24, 0xF5	; 245
   15878:	9c e1       	ldi	r25, 0x1C	; 28
   1587a:	a0 e0       	ldi	r26, 0x00	; 0
   1587c:	ed b7       	in	r30, 0x3d	; 61
   1587e:	fe b7       	in	r31, 0x3e	; 62
   15880:	81 83       	std	Z+1, r24	; 0x01
   15882:	92 83       	std	Z+2, r25	; 0x02
   15884:	a3 83       	std	Z+3, r26	; 0x03
   15886:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   1588a:	8c 81       	ldd	r24, Y+4	; 0x04
   1588c:	9d 81       	ldd	r25, Y+5	; 0x05
   1588e:	88 27       	eor	r24, r24
   15890:	90 7d       	andi	r25, 0xD0	; 208
   15892:	07 c0       	rjmp	.+14     	; 0x158a2 <SS80_error_return+0x6c>
   15894:	e0 91 31 19 	lds	r30, 0x1931	; 0x801931 <SS80s>
   15898:	f0 91 32 19 	lds	r31, 0x1932	; 0x801932 <SS80s+0x1>
   1589c:	12 82       	std	Z+2, r1	; 0x02
   1589e:	80 e0       	ldi	r24, 0x00	; 0
   158a0:	90 e0       	ldi	r25, 0x00	; 0
   158a2:	26 96       	adiw	r28, 0x06	; 6
   158a4:	e2 e0       	ldi	r30, 0x02	; 2
   158a6:	0c 94 0a e0 	jmp	0x1c014	; 0x1c014 <__epilogue_restores__+0x20>

000158aa <SS80_locate_and_read>:
/// - Phases: Command, Report
/// @param[in] u: Unit
/// @return  0

int SS80_Channel_Independent_Clear( int u )
{
   158aa:	a7 e1       	ldi	r26, 0x17	; 23
   158ac:	b0 e0       	ldi	r27, 0x00	; 0
   158ae:	eb e5       	ldi	r30, 0x5B	; 91
   158b0:	fc ea       	ldi	r31, 0xAC	; 172
   158b2:	0c 94 df df 	jmp	0x1bfbe	; 0x1bfbe <__prologue_saves__+0x2>
   158b6:	60 91 31 19 	lds	r22, 0x1931	; 0x801931 <SS80s>
   158ba:	70 91 32 19 	lds	r23, 0x1932	; 0x801932 <SS80s+0x1>
   158be:	fb 01       	movw	r30, r22
   158c0:	27 81       	ldd	r18, Z+7	; 0x07
   158c2:	30 85       	ldd	r19, Z+8	; 0x08
   158c4:	41 85       	ldd	r20, Z+9	; 0x09
   158c6:	52 85       	ldd	r21, Z+10	; 0x0a
   158c8:	80 91 33 19 	lds	r24, 0x1933	; 0x801933 <SS80p>
   158cc:	90 91 34 19 	lds	r25, 0x1934	; 0x801934 <SS80p+0x1>
   158d0:	fc 01       	movw	r30, r24
   158d2:	a0 89       	ldd	r26, Z+16	; 0x10
   158d4:	b1 89       	ldd	r27, Z+17	; 0x11
   158d6:	fb 01       	movw	r30, r22
   158d8:	12 82       	std	Z+2, r1	; 0x02
   158da:	1d 86       	std	Y+13, r1	; 0x0d
   158dc:	1c 86       	std	Y+12, r1	; 0x0c
   158de:	54 98       	cbi	0x0a, 4	; 10
   158e0:	4c 99       	sbic	0x09, 4	; 9
   158e2:	03 c0       	rjmp	.+6      	; 0x158ea <SS80_locate_and_read+0x40>
   158e4:	80 e0       	ldi	r24, 0x00	; 0
   158e6:	90 e1       	ldi	r25, 0x10	; 16
   158e8:	3e c1       	rjmp	.+636    	; 0x15b66 <SS80_locate_and_read+0x2bc>
   158ea:	0e 94 be df 	call	0x1bf7c	; 0x1bf7c <__muluhisi3>
   158ee:	4b 01       	movw	r8, r22
   158f0:	5c 01       	movw	r10, r24
   158f2:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   158f6:	85 ff       	sbrs	r24, 5
   158f8:	1a c0       	rjmp	.+52     	; 0x1592e <SS80_locate_and_read+0x84>
   158fa:	e0 91 31 19 	lds	r30, 0x1931	; 0x801931 <SS80s>
   158fe:	f0 91 32 19 	lds	r31, 0x1932	; 0x801932 <SS80s+0x1>
   15902:	83 85       	ldd	r24, Z+11	; 0x0b
   15904:	94 85       	ldd	r25, Z+12	; 0x0c
   15906:	a5 85       	ldd	r26, Z+13	; 0x0d
   15908:	b6 85       	ldd	r27, Z+14	; 0x0e
   1590a:	ed b7       	in	r30, 0x3d	; 61
   1590c:	fe b7       	in	r31, 0x3e	; 62
   1590e:	80 87       	std	Z+8, r24	; 0x08
   15910:	91 87       	std	Z+9, r25	; 0x09
   15912:	a2 87       	std	Z+10, r26	; 0x0a
   15914:	b3 87       	std	Z+11, r27	; 0x0b
   15916:	84 82       	std	Z+4, r8	; 0x04
   15918:	95 82       	std	Z+5, r9	; 0x05
   1591a:	a6 82       	std	Z+6, r10	; 0x06
   1591c:	b7 82       	std	Z+7, r11	; 0x07
   1591e:	8f ec       	ldi	r24, 0xCF	; 207
   15920:	93 e2       	ldi	r25, 0x23	; 35
   15922:	a0 e0       	ldi	r26, 0x00	; 0
   15924:	81 83       	std	Z+1, r24	; 0x01
   15926:	92 83       	std	Z+2, r25	; 0x02
   15928:	a3 83       	std	Z+3, r26	; 0x03
   1592a:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   1592e:	2b db       	rcall	.-2474   	; 0x14f86 <SS80_cmd_seek>
   15930:	89 2b       	or	r24, r25
   15932:	09 f0       	breq	.+2      	; 0x15936 <SS80_locate_and_read+0x8c>
   15934:	ae c0       	rjmp	.+348    	; 0x15a92 <SS80_locate_and_read+0x1e8>
   15936:	e0 91 31 19 	lds	r30, 0x1931	; 0x801931 <SS80s>
   1593a:	f0 91 32 19 	lds	r31, 0x1932	; 0x801932 <SS80s+0x1>
   1593e:	43 84       	ldd	r4, Z+11	; 0x0b
   15940:	54 84       	ldd	r5, Z+12	; 0x0c
   15942:	65 84       	ldd	r6, Z+13	; 0x0d
   15944:	76 84       	ldd	r7, Z+14	; 0x0e
   15946:	1e 86       	std	Y+14, r1	; 0x0e
   15948:	1f 86       	std	Y+15, r1	; 0x0f
   1594a:	18 8a       	std	Y+16, r1	; 0x10
   1594c:	19 8a       	std	Y+17, r1	; 0x11
   1594e:	81 eb       	ldi	r24, 0xB1	; 177
   15950:	93 e2       	ldi	r25, 0x23	; 35
   15952:	9c 01       	movw	r18, r24
   15954:	40 e0       	ldi	r20, 0x00	; 0
   15956:	2a 8b       	std	Y+18, r18	; 0x12
   15958:	3b 8b       	std	Y+19, r19	; 0x13
   1595a:	4c 8b       	std	Y+20, r20	; 0x14
   1595c:	33 24       	eor	r3, r3
   1595e:	33 94       	inc	r3
   15960:	80 e8       	ldi	r24, 0x80	; 128
   15962:	93 e2       	ldi	r25, 0x23	; 35
   15964:	9c 01       	movw	r18, r24
   15966:	40 e0       	ldi	r20, 0x00	; 0
   15968:	2d 8b       	std	Y+21, r18	; 0x15
   1596a:	3e 8b       	std	Y+22, r19	; 0x16
   1596c:	4f 8b       	std	Y+23, r20	; 0x17
   1596e:	34 c0       	rjmp	.+104    	; 0x159d8 <SS80_locate_and_read+0x12e>
   15970:	87 fd       	sbrc	r24, 7
   15972:	0e 94 96 84 	call	0x1092c	; 0x1092c <gpib_timer_elapsed_begin>
   15976:	ae 01       	movw	r20, r28
   15978:	44 5f       	subi	r20, 0xF4	; 244
   1597a:	5f 4f       	sbci	r21, 0xFF	; 255
   1597c:	b6 01       	movw	r22, r12
   1597e:	8e ea       	ldi	r24, 0xAE	; 174
   15980:	9c e1       	ldi	r25, 0x1C	; 28
   15982:	0e 94 b2 8a 	call	0x11564	; 0x11564 <gpib_write_str>
   15986:	8c 01       	movw	r16, r24
   15988:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1598c:	87 ff       	sbrs	r24, 7
   1598e:	04 c0       	rjmp	.+8      	; 0x15998 <SS80_locate_and_read+0xee>
   15990:	8b e6       	ldi	r24, 0x6B	; 107
   15992:	90 e1       	ldi	r25, 0x10	; 16
   15994:	0e 94 a8 84 	call	0x10950	; 0x10950 <gpib_timer_elapsed_end>
   15998:	c0 16       	cp	r12, r16
   1599a:	d1 06       	cpc	r13, r17
   1599c:	09 f0       	breq	.+2      	; 0x159a0 <SS80_locate_and_read+0xf6>
   1599e:	82 c0       	rjmp	.+260    	; 0x15aa4 <SS80_locate_and_read+0x1fa>
   159a0:	0d 2c       	mov	r0, r13
   159a2:	00 0c       	add	r0, r0
   159a4:	ee 08       	sbc	r14, r14
   159a6:	ff 08       	sbc	r15, r15
   159a8:	8c 0c       	add	r8, r12
   159aa:	9d 1c       	adc	r9, r13
   159ac:	ae 1c       	adc	r10, r14
   159ae:	bf 1c       	adc	r11, r15
   159b0:	01 2e       	mov	r0, r17
   159b2:	00 0c       	add	r0, r0
   159b4:	22 0b       	sbc	r18, r18
   159b6:	33 0b       	sbc	r19, r19
   159b8:	8e 85       	ldd	r24, Y+14	; 0x0e
   159ba:	9f 85       	ldd	r25, Y+15	; 0x0f
   159bc:	a8 89       	ldd	r26, Y+16	; 0x10
   159be:	b9 89       	ldd	r27, Y+17	; 0x11
   159c0:	80 0f       	add	r24, r16
   159c2:	91 1f       	adc	r25, r17
   159c4:	a2 1f       	adc	r26, r18
   159c6:	b3 1f       	adc	r27, r19
   159c8:	8e 87       	std	Y+14, r24	; 0x0e
   159ca:	9f 87       	std	Y+15, r25	; 0x0f
   159cc:	a8 8b       	std	Y+16, r26	; 0x10
   159ce:	b9 8b       	std	Y+17, r27	; 0x11
   159d0:	40 1a       	sub	r4, r16
   159d2:	51 0a       	sbc	r5, r17
   159d4:	62 0a       	sbc	r6, r18
   159d6:	73 0a       	sbc	r7, r19
   159d8:	41 14       	cp	r4, r1
   159da:	51 04       	cpc	r5, r1
   159dc:	61 04       	cpc	r6, r1
   159de:	71 04       	cpc	r7, r1
   159e0:	09 f4       	brne	.+2      	; 0x159e4 <SS80_locate_and_read+0x13a>
   159e2:	92 c0       	rjmp	.+292    	; 0x15b08 <SS80_locate_and_read+0x25e>
   159e4:	54 98       	cbi	0x0a, 4	; 10
   159e6:	4c 9b       	sbis	0x09, 4	; 9
   159e8:	7d cf       	rjmp	.-262    	; 0x158e4 <SS80_locate_and_read+0x3a>
   159ea:	31 e0       	ldi	r19, 0x01	; 1
   159ec:	43 16       	cp	r4, r19
   159ee:	53 06       	cpc	r5, r19
   159f0:	61 04       	cpc	r6, r1
   159f2:	71 04       	cpc	r7, r1
   159f4:	08 f4       	brcc	.+2      	; 0x159f8 <SS80_locate_and_read+0x14e>
   159f6:	4f c0       	rjmp	.+158    	; 0x15a96 <SS80_locate_and_read+0x1ec>
   159f8:	1d 86       	std	Y+13, r1	; 0x0d
   159fa:	1c 86       	std	Y+12, r1	; 0x0c
   159fc:	c1 2c       	mov	r12, r1
   159fe:	dd 24       	eor	r13, r13
   15a00:	d3 94       	inc	r13
   15a02:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15a06:	86 fd       	sbrc	r24, 6
   15a08:	0e 94 96 84 	call	0x1092c	; 0x1092c <gpib_timer_elapsed_begin>
   15a0c:	e0 90 31 19 	lds	r14, 0x1931	; 0x801931 <SS80s>
   15a10:	f0 90 32 19 	lds	r15, 0x1932	; 0x801932 <SS80s+0x1>
   15a14:	43 e0       	ldi	r20, 0x03	; 3
   15a16:	e4 0e       	add	r14, r20
   15a18:	f1 1c       	adc	r15, r1
   15a1a:	e0 91 33 19 	lds	r30, 0x1933	; 0x801933 <SS80p>
   15a1e:	f0 91 34 19 	lds	r31, 0x1934	; 0x801934 <SS80p+0x1>
   15a22:	86 01       	movw	r16, r12
   15a24:	2e ea       	ldi	r18, 0xAE	; 174
   15a26:	3c e1       	ldi	r19, 0x1C	; 28
   15a28:	b5 01       	movw	r22, r10
   15a2a:	a4 01       	movw	r20, r8
   15a2c:	82 81       	ldd	r24, Z+2	; 0x02
   15a2e:	93 81       	ldd	r25, Z+3	; 0x03
   15a30:	0e 94 e8 83 	call	0x107d0	; 0x107d0 <dbf_open_read>
   15a34:	8c 01       	movw	r16, r24
   15a36:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15a3a:	86 ff       	sbrs	r24, 6
   15a3c:	04 c0       	rjmp	.+8      	; 0x15a46 <SS80_locate_and_read+0x19c>
   15a3e:	81 e6       	ldi	r24, 0x61	; 97
   15a40:	90 e1       	ldi	r25, 0x10	; 16
   15a42:	0e 94 a8 84 	call	0x10950	; 0x10950 <gpib_timer_elapsed_end>
   15a46:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15a4a:	85 ff       	sbrs	r24, 5
   15a4c:	0c c0       	rjmp	.+24     	; 0x15a66 <SS80_locate_and_read+0x1bc>
   15a4e:	ed b7       	in	r30, 0x3d	; 61
   15a50:	fe b7       	in	r31, 0x3e	; 62
   15a52:	15 83       	std	Z+5, r17	; 0x05
   15a54:	04 83       	std	Z+4, r16	; 0x04
   15a56:	2a 89       	ldd	r18, Y+18	; 0x12
   15a58:	3b 89       	ldd	r19, Y+19	; 0x13
   15a5a:	4c 89       	ldd	r20, Y+20	; 0x14
   15a5c:	21 83       	std	Z+1, r18	; 0x01
   15a5e:	32 83       	std	Z+2, r19	; 0x02
   15a60:	43 83       	std	Z+3, r20	; 0x03
   15a62:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   15a66:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15a6a:	17 ff       	sbrs	r17, 7
   15a6c:	81 cf       	rjmp	.-254    	; 0x15970 <SS80_locate_and_read+0xc6>
   15a6e:	e0 91 31 19 	lds	r30, 0x1931	; 0x801931 <SS80s>
   15a72:	f0 91 32 19 	lds	r31, 0x1932	; 0x801932 <SS80s+0x1>
   15a76:	91 e0       	ldi	r25, 0x01	; 1
   15a78:	92 83       	std	Z+2, r25	; 0x02
   15a7a:	81 ff       	sbrs	r24, 1
   15a7c:	0a c0       	rjmp	.+20     	; 0x15a92 <SS80_locate_and_read+0x1e8>
   15a7e:	89 e9       	ldi	r24, 0x99	; 153
   15a80:	93 e2       	ldi	r25, 0x23	; 35
   15a82:	a0 e0       	ldi	r26, 0x00	; 0
   15a84:	ed b7       	in	r30, 0x3d	; 61
   15a86:	fe b7       	in	r31, 0x3e	; 62
   15a88:	81 83       	std	Z+1, r24	; 0x01
   15a8a:	92 83       	std	Z+2, r25	; 0x02
   15a8c:	a3 83       	std	Z+3, r26	; 0x03
   15a8e:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   15a92:	d1 de       	rcall	.-606    	; 0x15836 <SS80_error_return>
   15a94:	68 c0       	rjmp	.+208    	; 0x15b66 <SS80_locate_and_read+0x2bc>
   15a96:	62 01       	movw	r12, r4
   15a98:	8c 85       	ldd	r24, Y+12	; 0x0c
   15a9a:	9d 85       	ldd	r25, Y+13	; 0x0d
   15a9c:	91 60       	ori	r25, 0x01	; 1
   15a9e:	9d 87       	std	Y+13, r25	; 0x0d
   15aa0:	8c 87       	std	Y+12, r24	; 0x0c
   15aa2:	af cf       	rjmp	.-162    	; 0x15a02 <SS80_locate_and_read+0x158>
   15aa4:	e0 91 31 19 	lds	r30, 0x1931	; 0x801931 <SS80s>
   15aa8:	f0 91 32 19 	lds	r31, 0x1932	; 0x801932 <SS80s+0x1>
   15aac:	32 82       	std	Z+2, r3	; 0x02
   15aae:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15ab2:	81 ff       	sbrs	r24, 1
   15ab4:	0a c0       	rjmp	.+20     	; 0x15aca <SS80_locate_and_read+0x220>
   15ab6:	2d 89       	ldd	r18, Y+21	; 0x15
   15ab8:	3e 89       	ldd	r19, Y+22	; 0x16
   15aba:	4f 89       	ldd	r20, Y+23	; 0x17
   15abc:	ed b7       	in	r30, 0x3d	; 61
   15abe:	fe b7       	in	r31, 0x3e	; 62
   15ac0:	21 83       	std	Z+1, r18	; 0x01
   15ac2:	32 83       	std	Z+2, r19	; 0x02
   15ac4:	43 83       	std	Z+3, r20	; 0x03
   15ac6:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   15aca:	8c 85       	ldd	r24, Y+12	; 0x0c
   15acc:	9d 85       	ldd	r25, Y+13	; 0x0d
   15ace:	88 27       	eor	r24, r24
   15ad0:	90 7d       	andi	r25, 0xD0	; 208
   15ad2:	89 2b       	or	r24, r25
   15ad4:	09 f4       	brne	.+2      	; 0x15ad8 <SS80_locate_and_read+0x22e>
   15ad6:	64 cf       	rjmp	.-312    	; 0x159a0 <SS80_locate_and_read+0xf6>
   15ad8:	e0 91 31 19 	lds	r30, 0x1931	; 0x801931 <SS80s>
   15adc:	f0 91 32 19 	lds	r31, 0x1932	; 0x801932 <SS80s+0x1>
   15ae0:	83 81       	ldd	r24, Z+3	; 0x03
   15ae2:	94 81       	ldd	r25, Z+4	; 0x04
   15ae4:	80 62       	ori	r24, 0x20	; 32
   15ae6:	94 83       	std	Z+4, r25	; 0x04
   15ae8:	83 83       	std	Z+3, r24	; 0x03
   15aea:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15aee:	81 ff       	sbrs	r24, 1
   15af0:	21 c0       	rjmp	.+66     	; 0x15b34 <SS80_locate_and_read+0x28a>
   15af2:	8b e5       	ldi	r24, 0x5B	; 91
   15af4:	93 e2       	ldi	r25, 0x23	; 35
   15af6:	a0 e0       	ldi	r26, 0x00	; 0
   15af8:	ed b7       	in	r30, 0x3d	; 61
   15afa:	fe b7       	in	r31, 0x3e	; 62
   15afc:	81 83       	std	Z+1, r24	; 0x01
   15afe:	92 83       	std	Z+2, r25	; 0x02
   15b00:	a3 83       	std	Z+3, r26	; 0x03
   15b02:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   15b06:	16 c0       	rjmp	.+44     	; 0x15b34 <SS80_locate_and_read+0x28a>
   15b08:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15b0c:	85 ff       	sbrs	r24, 5
   15b0e:	12 c0       	rjmp	.+36     	; 0x15b34 <SS80_locate_and_read+0x28a>
   15b10:	8e 85       	ldd	r24, Y+14	; 0x0e
   15b12:	9f 85       	ldd	r25, Y+15	; 0x0f
   15b14:	a8 89       	ldd	r26, Y+16	; 0x10
   15b16:	b9 89       	ldd	r27, Y+17	; 0x11
   15b18:	ed b7       	in	r30, 0x3d	; 61
   15b1a:	fe b7       	in	r31, 0x3e	; 62
   15b1c:	84 83       	std	Z+4, r24	; 0x04
   15b1e:	95 83       	std	Z+5, r25	; 0x05
   15b20:	a6 83       	std	Z+6, r26	; 0x06
   15b22:	b7 83       	std	Z+7, r27	; 0x07
   15b24:	83 e3       	ldi	r24, 0x33	; 51
   15b26:	93 e2       	ldi	r25, 0x23	; 35
   15b28:	a0 e0       	ldi	r26, 0x00	; 0
   15b2a:	81 83       	std	Z+1, r24	; 0x01
   15b2c:	92 83       	std	Z+2, r25	; 0x02
   15b2e:	a3 83       	std	Z+3, r26	; 0x03
   15b30:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   15b34:	00 91 31 19 	lds	r16, 0x1931	; 0x801931 <SS80s>
   15b38:	10 91 32 19 	lds	r17, 0x1932	; 0x801932 <SS80s+0x1>
   15b3c:	e0 91 33 19 	lds	r30, 0x1933	; 0x801933 <SS80p>
   15b40:	f0 91 34 19 	lds	r31, 0x1934	; 0x801934 <SS80p+0x1>
   15b44:	20 89       	ldd	r18, Z+16	; 0x10
   15b46:	31 89       	ldd	r19, Z+17	; 0x11
   15b48:	40 e0       	ldi	r20, 0x00	; 0
   15b4a:	50 e0       	ldi	r21, 0x00	; 0
   15b4c:	c5 01       	movw	r24, r10
   15b4e:	b4 01       	movw	r22, r8
   15b50:	0e 94 71 df 	call	0x1bee2	; 0x1bee2 <__udivmodsi4>
   15b54:	f8 01       	movw	r30, r16
   15b56:	27 83       	std	Z+7, r18	; 0x07
   15b58:	30 87       	std	Z+8, r19	; 0x08
   15b5a:	41 87       	std	Z+9, r20	; 0x09
   15b5c:	52 87       	std	Z+10, r21	; 0x0a
   15b5e:	8c 85       	ldd	r24, Y+12	; 0x0c
   15b60:	9d 85       	ldd	r25, Y+13	; 0x0d
   15b62:	88 27       	eor	r24, r24
   15b64:	90 7d       	andi	r25, 0xD0	; 208
   15b66:	67 96       	adiw	r28, 0x17	; 23
   15b68:	e1 e1       	ldi	r30, 0x11	; 17
   15b6a:	0c 94 fb df 	jmp	0x1bff6	; 0x1bff6 <__epilogue_restores__+0x2>

00015b6e <SS80_Execute_State>:
   15b6e:	cf 93       	push	r28
   15b70:	df 93       	push	r29
   15b72:	00 d0       	rcall	.+0      	; 0x15b74 <SS80_Execute_State+0x6>
   15b74:	00 d0       	rcall	.+0      	; 0x15b76 <SS80_Execute_State+0x8>
   15b76:	1f 92       	push	r1
   15b78:	e0 91 33 19 	lds	r30, 0x1933	; 0x801933 <SS80p>
   15b7c:	f0 91 34 19 	lds	r31, 0x1934	; 0x801934 <SS80p+0x1>
   15b80:	81 81       	ldd	r24, Z+1	; 0x01
   15b82:	90 e0       	ldi	r25, 0x00	; 0
   15b84:	0e 94 8e 85 	call	0x10b1c	; 0x10b1c <gpib_disable_PPR>
   15b88:	e0 91 31 19 	lds	r30, 0x1931	; 0x801931 <SS80s>
   15b8c:	f0 91 32 19 	lds	r31, 0x1932	; 0x801932 <SS80s+0x1>
   15b90:	80 81       	ld	r24, Z
   15b92:	91 81       	ldd	r25, Z+1	; 0x01
   15b94:	82 30       	cpi	r24, 0x02	; 2
   15b96:	91 05       	cpc	r25, r1
   15b98:	89 f0       	breq	.+34     	; 0x15bbc <SS80_Execute_State+0x4e>
   15b9a:	3c f4       	brge	.+14     	; 0x15baa <SS80_Execute_State+0x3c>
   15b9c:	00 97       	sbiw	r24, 0x00	; 0
   15b9e:	81 f1       	breq	.+96     	; 0x15c00 <SS80_Execute_State+0x92>
   15ba0:	81 30       	cpi	r24, 0x01	; 1
   15ba2:	91 05       	cpc	r25, r1
   15ba4:	b9 f4       	brne	.+46     	; 0x15bd4 <SS80_Execute_State+0x66>
   15ba6:	81 de       	rcall	.-766    	; 0x158aa <SS80_locate_and_read>
   15ba8:	0d c0       	rjmp	.+26     	; 0x15bc4 <SS80_Execute_State+0x56>
   15baa:	83 30       	cpi	r24, 0x03	; 3
   15bac:	91 05       	cpc	r25, r1
   15bae:	41 f0       	breq	.+16     	; 0x15bc0 <SS80_Execute_State+0x52>
   15bb0:	84 30       	cpi	r24, 0x04	; 4
   15bb2:	91 05       	cpc	r25, r1
   15bb4:	79 f4       	brne	.+30     	; 0x15bd4 <SS80_Execute_State+0x66>
   15bb6:	0e 94 8c a4 	call	0x14918	; 0x14918 <SS80_describe>
   15bba:	04 c0       	rjmp	.+8      	; 0x15bc4 <SS80_Execute_State+0x56>
   15bbc:	59 da       	rcall	.-2894   	; 0x15070 <SS80_locate_and_write>
   15bbe:	02 c0       	rjmp	.+4      	; 0x15bc4 <SS80_Execute_State+0x56>
   15bc0:	0e 94 0b a4 	call	0x14816	; 0x14816 <SS80_send_status>
   15bc4:	ec 01       	movw	r28, r24
   15bc6:	e0 91 31 19 	lds	r30, 0x1931	; 0x801931 <SS80s>
   15bca:	f0 91 32 19 	lds	r31, 0x1932	; 0x801932 <SS80s+0x1>
   15bce:	11 82       	std	Z+1, r1	; 0x01
   15bd0:	10 82       	st	Z, r1
   15bd2:	18 c0       	rjmp	.+48     	; 0x15c04 <SS80_Execute_State+0x96>
   15bd4:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   15bd8:	21 ff       	sbrs	r18, 1
   15bda:	0c c0       	rjmp	.+24     	; 0x15bf4 <SS80_Execute_State+0x86>
   15bdc:	ed b7       	in	r30, 0x3d	; 61
   15bde:	fe b7       	in	r31, 0x3e	; 62
   15be0:	95 83       	std	Z+5, r25	; 0x05
   15be2:	84 83       	std	Z+4, r24	; 0x04
   15be4:	87 ef       	ldi	r24, 0xF7	; 247
   15be6:	93 e2       	ldi	r25, 0x23	; 35
   15be8:	a0 e0       	ldi	r26, 0x00	; 0
   15bea:	81 83       	std	Z+1, r24	; 0x01
   15bec:	92 83       	std	Z+2, r25	; 0x02
   15bee:	a3 83       	std	Z+3, r26	; 0x03
   15bf0:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   15bf4:	e0 91 31 19 	lds	r30, 0x1931	; 0x801931 <SS80s>
   15bf8:	f0 91 32 19 	lds	r31, 0x1932	; 0x801932 <SS80s+0x1>
   15bfc:	11 82       	std	Z+1, r1	; 0x01
   15bfe:	10 82       	st	Z, r1
   15c00:	c0 e0       	ldi	r28, 0x00	; 0
   15c02:	d0 e0       	ldi	r29, 0x00	; 0
   15c04:	e0 91 33 19 	lds	r30, 0x1933	; 0x801933 <SS80p>
   15c08:	f0 91 34 19 	lds	r31, 0x1934	; 0x801934 <SS80p+0x1>
   15c0c:	81 81       	ldd	r24, Z+1	; 0x01
   15c0e:	90 e0       	ldi	r25, 0x00	; 0
   15c10:	0e 94 58 85 	call	0x10ab0	; 0x10ab0 <gpib_enable_PPR>
   15c14:	ce 01       	movw	r24, r28
   15c16:	cd b7       	in	r28, 0x3d	; 61
   15c18:	de b7       	in	r29, 0x3e	; 62
   15c1a:	25 96       	adiw	r28, 0x05	; 5
   15c1c:	e2 e0       	ldi	r30, 0x02	; 2
   15c1e:	0c 94 0a e0 	jmp	0x1c014	; 0x1c014 <__epilogue_restores__+0x20>

00015c22 <SS80_COMMANDS>:
   15c22:	a9 e0       	ldi	r26, 0x09	; 9
   15c24:	b0 e0       	ldi	r27, 0x00	; 0
   15c26:	e7 e1       	ldi	r30, 0x17	; 23
   15c28:	fe ea       	ldi	r31, 0xAE	; 174
   15c2a:	0c 94 ed df 	jmp	0x1bfda	; 0x1bfda <__prologue_saves__+0x1e>
   15c2e:	18 2f       	mov	r17, r24
   15c30:	80 91 b2 1e 	lds	r24, 0x1EB2	; 0x801eb2 <talking>
   15c34:	90 e0       	ldi	r25, 0x00	; 0
   15c36:	0e 94 85 8b 	call	0x1170a	; 0x1170a <SS80_is_MTA>
   15c3a:	89 2b       	or	r24, r25
   15c3c:	19 f0       	breq	.+6      	; 0x15c44 <SS80_COMMANDS+0x22>
   15c3e:	15 36       	cpi	r17, 0x65	; 101
   15c40:	19 f5       	brne	.+70     	; 0x15c88 <SS80_COMMANDS+0x66>
   15c42:	09 c0       	rjmp	.+18     	; 0x15c56 <SS80_COMMANDS+0x34>
   15c44:	80 91 b4 1e 	lds	r24, 0x1EB4	; 0x801eb4 <listening>
   15c48:	90 e0       	ldi	r25, 0x00	; 0
   15c4a:	0e 94 74 8b 	call	0x116e8	; 0x116e8 <SS80_is_MLA>
   15c4e:	ec 01       	movw	r28, r24
   15c50:	89 2b       	or	r24, r25
   15c52:	a9 f7       	brne	.-22     	; 0x15c3e <SS80_COMMANDS+0x1c>
   15c54:	ad c0       	rjmp	.+346    	; 0x15db0 <SS80_COMMANDS+0x18e>
   15c56:	80 91 b4 1e 	lds	r24, 0x1EB4	; 0x801eb4 <listening>
   15c5a:	90 e0       	ldi	r25, 0x00	; 0
   15c5c:	0e 94 74 8b 	call	0x116e8	; 0x116e8 <SS80_is_MLA>
   15c60:	89 2b       	or	r24, r25
   15c62:	09 f4       	brne	.+2      	; 0x15c66 <SS80_COMMANDS+0x44>
   15c64:	a2 c0       	rjmp	.+324    	; 0x15daa <SS80_COMMANDS+0x188>
   15c66:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15c6a:	85 ff       	sbrs	r24, 5
   15c6c:	0a c0       	rjmp	.+20     	; 0x15c82 <SS80_COMMANDS+0x60>
   15c6e:	8f ed       	ldi	r24, 0xDF	; 223
   15c70:	9c e1       	ldi	r25, 0x1C	; 28
   15c72:	a0 e0       	ldi	r26, 0x00	; 0
   15c74:	ed b7       	in	r30, 0x3d	; 61
   15c76:	fe b7       	in	r31, 0x3e	; 62
   15c78:	81 83       	std	Z+1, r24	; 0x01
   15c7a:	92 83       	std	Z+2, r25	; 0x02
   15c7c:	a3 83       	std	Z+3, r26	; 0x03
   15c7e:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   15c82:	0e 94 4c a5 	call	0x14a98	; 0x14a98 <SS80_Command_State>
   15c86:	73 c0       	rjmp	.+230    	; 0x15d6e <SS80_COMMANDS+0x14c>
   15c88:	1e 36       	cpi	r17, 0x6E	; 110
   15c8a:	01 f5       	brne	.+64     	; 0x15ccc <SS80_COMMANDS+0xaa>
   15c8c:	80 91 b4 1e 	lds	r24, 0x1EB4	; 0x801eb4 <listening>
   15c90:	90 e0       	ldi	r25, 0x00	; 0
   15c92:	0e 94 74 8b 	call	0x116e8	; 0x116e8 <SS80_is_MLA>
   15c96:	89 2b       	or	r24, r25
   15c98:	79 f0       	breq	.+30     	; 0x15cb8 <SS80_COMMANDS+0x96>
   15c9a:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15c9e:	85 ff       	sbrs	r24, 5
   15ca0:	13 c0       	rjmp	.+38     	; 0x15cc8 <SS80_COMMANDS+0xa6>
   15ca2:	89 ec       	ldi	r24, 0xC9	; 201
   15ca4:	9c e1       	ldi	r25, 0x1C	; 28
   15ca6:	a0 e0       	ldi	r26, 0x00	; 0
   15ca8:	ed b7       	in	r30, 0x3d	; 61
   15caa:	fe b7       	in	r31, 0x3e	; 62
   15cac:	81 83       	std	Z+1, r24	; 0x01
   15cae:	92 83       	std	Z+2, r25	; 0x02
   15cb0:	a3 83       	std	Z+3, r26	; 0x03
   15cb2:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   15cb6:	08 c0       	rjmp	.+16     	; 0x15cc8 <SS80_COMMANDS+0xa6>
   15cb8:	80 91 b2 1e 	lds	r24, 0x1EB2	; 0x801eb2 <talking>
   15cbc:	90 e0       	ldi	r25, 0x00	; 0
   15cbe:	0e 94 85 8b 	call	0x1170a	; 0x1170a <SS80_is_MTA>
   15cc2:	89 2b       	or	r24, r25
   15cc4:	51 f7       	brne	.-44     	; 0x15c9a <SS80_COMMANDS+0x78>
   15cc6:	71 c0       	rjmp	.+226    	; 0x15daa <SS80_COMMANDS+0x188>
   15cc8:	52 df       	rcall	.-348    	; 0x15b6e <SS80_Execute_State>
   15cca:	51 c0       	rjmp	.+162    	; 0x15d6e <SS80_COMMANDS+0x14c>
   15ccc:	10 37       	cpi	r17, 0x70	; 112
   15cce:	b9 f5       	brne	.+110    	; 0x15d3e <SS80_COMMANDS+0x11c>
   15cd0:	80 91 b2 1e 	lds	r24, 0x1EB2	; 0x801eb2 <talking>
   15cd4:	90 e0       	ldi	r25, 0x00	; 0
   15cd6:	0e 94 85 8b 	call	0x1170a	; 0x1170a <SS80_is_MTA>
   15cda:	89 2b       	or	r24, r25
   15cdc:	81 f0       	breq	.+32     	; 0x15cfe <SS80_COMMANDS+0xdc>
   15cde:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15ce2:	85 ff       	sbrs	r24, 5
   15ce4:	0a c0       	rjmp	.+20     	; 0x15cfa <SS80_COMMANDS+0xd8>
   15ce6:	84 eb       	ldi	r24, 0xB4	; 180
   15ce8:	9c e1       	ldi	r25, 0x1C	; 28
   15cea:	a0 e0       	ldi	r26, 0x00	; 0
   15cec:	ed b7       	in	r30, 0x3d	; 61
   15cee:	fe b7       	in	r31, 0x3e	; 62
   15cf0:	81 83       	std	Z+1, r24	; 0x01
   15cf2:	92 83       	std	Z+2, r25	; 0x02
   15cf4:	a3 83       	std	Z+3, r26	; 0x03
   15cf6:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   15cfa:	4c db       	rcall	.-2408   	; 0x15394 <SS80_Report>
   15cfc:	38 c0       	rjmp	.+112    	; 0x15d6e <SS80_COMMANDS+0x14c>
   15cfe:	80 91 b4 1e 	lds	r24, 0x1EB4	; 0x801eb4 <listening>
   15d02:	90 e0       	ldi	r25, 0x00	; 0
   15d04:	0e 94 74 8b 	call	0x116e8	; 0x116e8 <SS80_is_MLA>
   15d08:	89 2b       	or	r24, r25
   15d0a:	09 f4       	brne	.+2      	; 0x15d0e <SS80_COMMANDS+0xec>
   15d0c:	4e c0       	rjmp	.+156    	; 0x15daa <SS80_COMMANDS+0x188>
   15d0e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15d12:	85 ff       	sbrs	r24, 5
   15d14:	0a c0       	rjmp	.+20     	; 0x15d2a <SS80_COMMANDS+0x108>
   15d16:	85 ea       	ldi	r24, 0xA5	; 165
   15d18:	9c e1       	ldi	r25, 0x1C	; 28
   15d1a:	a0 e0       	ldi	r26, 0x00	; 0
   15d1c:	ed b7       	in	r30, 0x3d	; 61
   15d1e:	fe b7       	in	r31, 0x3e	; 62
   15d20:	81 83       	std	Z+1, r24	; 0x01
   15d22:	92 83       	std	Z+2, r25	; 0x02
   15d24:	a3 83       	std	Z+3, r26	; 0x03
   15d26:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   15d2a:	e0 91 33 19 	lds	r30, 0x1933	; 0x801933 <SS80p>
   15d2e:	f0 91 34 19 	lds	r31, 0x1934	; 0x801934 <SS80p+0x1>
   15d32:	81 81       	ldd	r24, Z+1	; 0x01
   15d34:	90 e0       	ldi	r25, 0x00	; 0
   15d36:	0e 94 8e 85 	call	0x10b1c	; 0x10b1c <gpib_disable_PPR>
   15d3a:	1d dc       	rcall	.-1990   	; 0x15576 <SS80_Amigo_Clear>
   15d3c:	18 c0       	rjmp	.+48     	; 0x15d6e <SS80_COMMANDS+0x14c>
   15d3e:	12 37       	cpi	r17, 0x72	; 114
   15d40:	c1 f4       	brne	.+48     	; 0x15d72 <SS80_COMMANDS+0x150>
   15d42:	80 91 b4 1e 	lds	r24, 0x1EB4	; 0x801eb4 <listening>
   15d46:	90 e0       	ldi	r25, 0x00	; 0
   15d48:	0e 94 74 8b 	call	0x116e8	; 0x116e8 <SS80_is_MLA>
   15d4c:	89 2b       	or	r24, r25
   15d4e:	89 f0       	breq	.+34     	; 0x15d72 <SS80_COMMANDS+0x150>
   15d50:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15d54:	85 ff       	sbrs	r24, 5
   15d56:	0a c0       	rjmp	.+20     	; 0x15d6c <SS80_COMMANDS+0x14a>
   15d58:	81 e9       	ldi	r24, 0x91	; 145
   15d5a:	9c e1       	ldi	r25, 0x1C	; 28
   15d5c:	a0 e0       	ldi	r26, 0x00	; 0
   15d5e:	ed b7       	in	r30, 0x3d	; 61
   15d60:	fe b7       	in	r31, 0x3e	; 62
   15d62:	81 83       	std	Z+1, r24	; 0x01
   15d64:	92 83       	std	Z+2, r25	; 0x02
   15d66:	a3 83       	std	Z+3, r26	; 0x03
   15d68:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   15d6c:	58 dc       	rcall	.-1872   	; 0x1561e <SS80_Transparent_State>
   15d6e:	ec 01       	movw	r28, r24
   15d70:	3b c0       	rjmp	.+118    	; 0x15de8 <SS80_COMMANDS+0x1c6>
   15d72:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15d76:	81 ff       	sbrs	r24, 1
   15d78:	18 c0       	rjmp	.+48     	; 0x15daa <SS80_COMMANDS+0x188>
   15d7a:	80 91 b2 1e 	lds	r24, 0x1EB2	; 0x801eb2 <talking>
   15d7e:	90 e0       	ldi	r25, 0x00	; 0
   15d80:	ed b7       	in	r30, 0x3d	; 61
   15d82:	fe b7       	in	r31, 0x3e	; 62
   15d84:	91 87       	std	Z+9, r25	; 0x09
   15d86:	80 87       	std	Z+8, r24	; 0x08
   15d88:	80 91 b4 1e 	lds	r24, 0x1EB4	; 0x801eb4 <listening>
   15d8c:	90 e0       	ldi	r25, 0x00	; 0
   15d8e:	97 83       	std	Z+7, r25	; 0x07
   15d90:	86 83       	std	Z+6, r24	; 0x06
   15d92:	81 2f       	mov	r24, r17
   15d94:	90 e0       	ldi	r25, 0x00	; 0
   15d96:	95 83       	std	Z+5, r25	; 0x05
   15d98:	84 83       	std	Z+4, r24	; 0x04
   15d9a:	8d e5       	ldi	r24, 0x5D	; 93
   15d9c:	9c e1       	ldi	r25, 0x1C	; 28
   15d9e:	a0 e0       	ldi	r26, 0x00	; 0
   15da0:	81 83       	std	Z+1, r24	; 0x01
   15da2:	92 83       	std	Z+2, r25	; 0x02
   15da4:	a3 83       	std	Z+3, r26	; 0x03
   15da6:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   15daa:	c0 e0       	ldi	r28, 0x00	; 0
   15dac:	d0 e0       	ldi	r29, 0x00	; 0
   15dae:	1c c0       	rjmp	.+56     	; 0x15de8 <SS80_COMMANDS+0x1c6>
   15db0:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15db4:	81 ff       	sbrs	r24, 1
   15db6:	f9 cf       	rjmp	.-14     	; 0x15daa <SS80_COMMANDS+0x188>
   15db8:	80 91 b2 1e 	lds	r24, 0x1EB2	; 0x801eb2 <talking>
   15dbc:	90 e0       	ldi	r25, 0x00	; 0
   15dbe:	ed b7       	in	r30, 0x3d	; 61
   15dc0:	fe b7       	in	r31, 0x3e	; 62
   15dc2:	91 87       	std	Z+9, r25	; 0x09
   15dc4:	80 87       	std	Z+8, r24	; 0x08
   15dc6:	80 91 b4 1e 	lds	r24, 0x1EB4	; 0x801eb4 <listening>
   15dca:	90 e0       	ldi	r25, 0x00	; 0
   15dcc:	97 83       	std	Z+7, r25	; 0x07
   15dce:	86 83       	std	Z+6, r24	; 0x06
   15dd0:	81 2f       	mov	r24, r17
   15dd2:	90 e0       	ldi	r25, 0x00	; 0
   15dd4:	95 83       	std	Z+5, r25	; 0x05
   15dd6:	84 83       	std	Z+4, r24	; 0x04
   15dd8:	89 e2       	ldi	r24, 0x29	; 41
   15dda:	9c e1       	ldi	r25, 0x1C	; 28
   15ddc:	a0 e0       	ldi	r26, 0x00	; 0
   15dde:	81 83       	std	Z+1, r24	; 0x01
   15de0:	92 83       	std	Z+2, r25	; 0x02
   15de2:	a3 83       	std	Z+3, r26	; 0x03
   15de4:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   15de8:	ce 01       	movw	r24, r28
   15dea:	cd b7       	in	r28, 0x3d	; 61
   15dec:	de b7       	in	r29, 0x3e	; 62
   15dee:	29 96       	adiw	r28, 0x09	; 9
   15df0:	e3 e0       	ldi	r30, 0x03	; 3
   15df2:	0c 94 09 e0 	jmp	0x1c012	; 0x1c012 <__epilogue_restores__+0x1e>

00015df6 <amigo_overflow_check>:
   15df6:	cf 92       	push	r12
   15df8:	df 92       	push	r13
   15dfa:	ef 92       	push	r14
   15dfc:	0f 93       	push	r16
   15dfe:	1f 93       	push	r17
   15e00:	cf 93       	push	r28
   15e02:	df 93       	push	r29
   15e04:	00 d0       	rcall	.+0      	; 0x15e06 <amigo_overflow_check+0x10>
   15e06:	00 d0       	rcall	.+0      	; 0x15e08 <amigo_overflow_check+0x12>
   15e08:	1f 92       	push	r1
   15e0a:	ec 01       	movw	r28, r24
   15e0c:	8b 01       	movw	r16, r22
   15e0e:	80 e0       	ldi	r24, 0x00	; 0
   15e10:	90 e0       	ldi	r25, 0x00	; 0
   15e12:	2d e9       	ldi	r18, 0x9D	; 157
   15e14:	3b e2       	ldi	r19, 0x2B	; 43
   15e16:	69 01       	movw	r12, r18
   15e18:	e1 2c       	mov	r14, r1
   15e1a:	2d 81       	ldd	r18, Y+5	; 0x05
   15e1c:	30 e0       	ldi	r19, 0x00	; 0
   15e1e:	e0 91 2f 19 	lds	r30, 0x192F	; 0x80192f <AMIGOp>
   15e22:	f0 91 30 19 	lds	r31, 0x1930	; 0x801930 <AMIGOp+0x1>
   15e26:	40 85       	ldd	r20, Z+8	; 0x08
   15e28:	51 85       	ldd	r21, Z+9	; 0x09
   15e2a:	24 17       	cp	r18, r20
   15e2c:	35 07       	cpc	r19, r21
   15e2e:	64 f1       	brlt	.+88     	; 0x15e88 <amigo_overflow_check+0x92>
   15e30:	1d 82       	std	Y+5, r1	; 0x05
   15e32:	2c 81       	ldd	r18, Y+4	; 0x04
   15e34:	2f 5f       	subi	r18, 0xFF	; 255
   15e36:	2c 83       	std	Y+4, r18	; 0x04
   15e38:	e0 91 2f 19 	lds	r30, 0x192F	; 0x80192f <AMIGOp>
   15e3c:	f0 91 30 19 	lds	r31, 0x1930	; 0x801930 <AMIGOp+0x1>
   15e40:	2c 81       	ldd	r18, Y+4	; 0x04
   15e42:	30 e0       	ldi	r19, 0x00	; 0
   15e44:	42 85       	ldd	r20, Z+10	; 0x0a
   15e46:	53 85       	ldd	r21, Z+11	; 0x0b
   15e48:	24 17       	cp	r18, r20
   15e4a:	35 07       	cpc	r19, r21
   15e4c:	34 f3       	brlt	.-52     	; 0x15e1a <amigo_overflow_check+0x24>
   15e4e:	1c 82       	std	Y+4, r1	; 0x04
   15e50:	2b 81       	ldd	r18, Y+3	; 0x03
   15e52:	2f 5f       	subi	r18, 0xFF	; 255
   15e54:	2b 83       	std	Y+3, r18	; 0x03
   15e56:	30 e0       	ldi	r19, 0x00	; 0
   15e58:	44 85       	ldd	r20, Z+12	; 0x0c
   15e5a:	55 85       	ldd	r21, Z+13	; 0x0d
   15e5c:	24 17       	cp	r18, r20
   15e5e:	35 07       	cpc	r19, r21
   15e60:	5c f3       	brlt	.-42     	; 0x15e38 <amigo_overflow_check+0x42>
   15e62:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15e66:	81 ff       	sbrs	r24, 1
   15e68:	0c c0       	rjmp	.+24     	; 0x15e82 <amigo_overflow_check+0x8c>
   15e6a:	01 15       	cp	r16, r1
   15e6c:	11 05       	cpc	r17, r1
   15e6e:	49 f0       	breq	.+18     	; 0x15e82 <amigo_overflow_check+0x8c>
   15e70:	ed b7       	in	r30, 0x3d	; 61
   15e72:	fe b7       	in	r31, 0x3e	; 62
   15e74:	15 83       	std	Z+5, r17	; 0x05
   15e76:	04 83       	std	Z+4, r16	; 0x04
   15e78:	c1 82       	std	Z+1, r12	; 0x01
   15e7a:	d2 82       	std	Z+2, r13	; 0x02
   15e7c:	e3 82       	std	Z+3, r14	; 0x03
   15e7e:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   15e82:	81 e0       	ldi	r24, 0x01	; 1
   15e84:	90 e0       	ldi	r25, 0x00	; 0
   15e86:	d8 cf       	rjmp	.-80     	; 0x15e38 <amigo_overflow_check+0x42>
   15e88:	0f 90       	pop	r0
   15e8a:	0f 90       	pop	r0
   15e8c:	0f 90       	pop	r0
   15e8e:	0f 90       	pop	r0
   15e90:	0f 90       	pop	r0
   15e92:	df 91       	pop	r29
   15e94:	cf 91       	pop	r28
   15e96:	1f 91       	pop	r17
   15e98:	0f 91       	pop	r16
   15e9a:	ef 90       	pop	r14
   15e9c:	df 90       	pop	r13
   15e9e:	cf 90       	pop	r12
   15ea0:	08 95       	ret

00015ea2 <amigo_chs_to_logical>:
   15ea2:	a1 e1       	ldi	r26, 0x11	; 17
   15ea4:	b0 e0       	ldi	r27, 0x00	; 0
   15ea6:	e7 e5       	ldi	r30, 0x57	; 87
   15ea8:	ff ea       	ldi	r31, 0xAF	; 175
   15eaa:	0c 94 e2 df 	jmp	0x1bfc4	; 0x1bfc4 <__prologue_saves__+0x8>
   15eae:	8b 01       	movw	r16, r22
   15eb0:	60 91 2f 19 	lds	r22, 0x192F	; 0x80192f <AMIGOp>
   15eb4:	70 91 30 19 	lds	r23, 0x1930	; 0x801930 <AMIGOp+0x1>
   15eb8:	fb 01       	movw	r30, r22
   15eba:	40 85       	ldd	r20, Z+8	; 0x08
   15ebc:	51 85       	ldd	r21, Z+9	; 0x09
   15ebe:	fc 01       	movw	r30, r24
   15ec0:	c4 81       	ldd	r28, Z+4	; 0x04
   15ec2:	d0 e0       	ldi	r29, 0x00	; 0
   15ec4:	4c 9f       	mul	r20, r28
   15ec6:	90 01       	movw	r18, r0
   15ec8:	4d 9f       	mul	r20, r29
   15eca:	30 0d       	add	r19, r0
   15ecc:	5c 9f       	mul	r21, r28
   15ece:	30 0d       	add	r19, r0
   15ed0:	11 24       	eor	r1, r1
   15ed2:	49 01       	movw	r8, r18
   15ed4:	33 0f       	add	r19, r19
   15ed6:	aa 08       	sbc	r10, r10
   15ed8:	bb 08       	sbc	r11, r11
   15eda:	63 80       	ldd	r6, Z+3	; 0x03
   15edc:	71 2c       	mov	r7, r1
   15ede:	fb 01       	movw	r30, r22
   15ee0:	e2 84       	ldd	r14, Z+10	; 0x0a
   15ee2:	f3 84       	ldd	r15, Z+11	; 0x0b
   15ee4:	4e 9d       	mul	r20, r14
   15ee6:	d0 01       	movw	r26, r0
   15ee8:	4f 9d       	mul	r20, r15
   15eea:	b0 0d       	add	r27, r0
   15eec:	5e 9d       	mul	r21, r14
   15eee:	b0 0d       	add	r27, r0
   15ef0:	11 24       	eor	r1, r1
   15ef2:	a6 9d       	mul	r26, r6
   15ef4:	90 01       	movw	r18, r0
   15ef6:	a7 9d       	mul	r26, r7
   15ef8:	30 0d       	add	r19, r0
   15efa:	b6 9d       	mul	r27, r6
   15efc:	30 0d       	add	r19, r0
   15efe:	11 24       	eor	r1, r1
   15f00:	69 01       	movw	r12, r18
   15f02:	33 0f       	add	r19, r19
   15f04:	ee 08       	sbc	r14, r14
   15f06:	ff 08       	sbc	r15, r15
   15f08:	8c 0c       	add	r8, r12
   15f0a:	9d 1c       	adc	r9, r13
   15f0c:	ae 1c       	adc	r10, r14
   15f0e:	bf 1c       	adc	r11, r15
   15f10:	fc 01       	movw	r30, r24
   15f12:	f5 80       	ldd	r15, Z+5	; 0x05
   15f14:	a5 01       	movw	r20, r10
   15f16:	94 01       	movw	r18, r8
   15f18:	2f 0d       	add	r18, r15
   15f1a:	31 1d       	adc	r19, r1
   15f1c:	41 1d       	adc	r20, r1
   15f1e:	51 1d       	adc	r21, r1
   15f20:	fb 01       	movw	r30, r22
   15f22:	a6 81       	ldd	r26, Z+6	; 0x06
   15f24:	b7 81       	ldd	r27, Z+7	; 0x07
   15f26:	0e 94 c8 df 	call	0x1bf90	; 0x1bf90 <__mulshisi3>
   15f2a:	4b 01       	movw	r8, r22
   15f2c:	5c 01       	movw	r10, r24
   15f2e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15f32:	85 ff       	sbrs	r24, 5
   15f34:	22 c0       	rjmp	.+68     	; 0x15f7a <amigo_chs_to_logical+0xd8>
   15f36:	8f 2d       	mov	r24, r15
   15f38:	90 e0       	ldi	r25, 0x00	; 0
   15f3a:	ed b7       	in	r30, 0x3d	; 61
   15f3c:	fe b7       	in	r31, 0x3e	; 62
   15f3e:	91 8b       	std	Z+17, r25	; 0x11
   15f40:	80 8b       	std	Z+16, r24	; 0x10
   15f42:	d7 87       	std	Z+15, r29	; 0x0f
   15f44:	c6 87       	std	Z+14, r28	; 0x0e
   15f46:	75 86       	std	Z+13, r7	; 0x0d
   15f48:	64 86       	std	Z+12, r6	; 0x0c
   15f4a:	e0 91 2d 19 	lds	r30, 0x192D	; 0x80192d <AMIGOs>
   15f4e:	f0 91 2e 19 	lds	r31, 0x192E	; 0x80192e <AMIGOs+0x1>
   15f52:	81 81       	ldd	r24, Z+1	; 0x01
   15f54:	90 e0       	ldi	r25, 0x00	; 0
   15f56:	ed b7       	in	r30, 0x3d	; 61
   15f58:	fe b7       	in	r31, 0x3e	; 62
   15f5a:	93 87       	std	Z+11, r25	; 0x0b
   15f5c:	82 87       	std	Z+10, r24	; 0x0a
   15f5e:	86 82       	std	Z+6, r8	; 0x06
   15f60:	97 82       	std	Z+7, r9	; 0x07
   15f62:	a0 86       	std	Z+8, r10	; 0x08
   15f64:	b1 86       	std	Z+9, r11	; 0x09
   15f66:	15 83       	std	Z+5, r17	; 0x05
   15f68:	04 83       	std	Z+4, r16	; 0x04
   15f6a:	8a e4       	ldi	r24, 0x4A	; 74
   15f6c:	9b e2       	ldi	r25, 0x2B	; 43
   15f6e:	a0 e0       	ldi	r26, 0x00	; 0
   15f70:	81 83       	std	Z+1, r24	; 0x01
   15f72:	92 83       	std	Z+2, r25	; 0x02
   15f74:	a3 83       	std	Z+3, r26	; 0x03
   15f76:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   15f7a:	c5 01       	movw	r24, r10
   15f7c:	b4 01       	movw	r22, r8
   15f7e:	cd b7       	in	r28, 0x3d	; 61
   15f80:	de b7       	in	r29, 0x3e	; 62
   15f82:	61 96       	adiw	r28, 0x11	; 17
   15f84:	ee e0       	ldi	r30, 0x0E	; 14
   15f86:	0c 94 fe df 	jmp	0x1bffc	; 0x1bffc <__epilogue_restores__+0x8>

00015f8a <amigo_init>:
   15f8a:	ef 92       	push	r14
   15f8c:	ff 92       	push	r15
   15f8e:	0f 93       	push	r16
   15f90:	1f 93       	push	r17
   15f92:	cf 93       	push	r28
   15f94:	df 93       	push	r29
   15f96:	01 e9       	ldi	r16, 0x91	; 145
   15f98:	10 e2       	ldi	r17, 0x20	; 32
   15f9a:	cb e0       	ldi	r28, 0x0B	; 11
   15f9c:	d0 e0       	ldi	r29, 0x00	; 0
   15f9e:	84 e0       	ldi	r24, 0x04	; 4
   15fa0:	f8 2e       	mov	r15, r24
   15fa2:	92 e0       	ldi	r25, 0x02	; 2
   15fa4:	e9 2e       	mov	r14, r25
   15fa6:	d8 01       	movw	r26, r16
   15fa8:	8c 91       	ld	r24, X
   15faa:	81 30       	cpi	r24, 0x01	; 1
   15fac:	31 f5       	brne	.+76     	; 0x15ffa <amigo_init+0x70>
   15fae:	ce 01       	movw	r24, r28
   15fb0:	0e 94 83 96 	call	0x12d06	; 0x12d06 <set_active_device>
   15fb4:	e0 91 2d 19 	lds	r30, 0x192D	; 0x80192d <AMIGOs>
   15fb8:	f0 91 2e 19 	lds	r31, 0x192E	; 0x80192e <AMIGOs+0x1>
   15fbc:	10 82       	st	Z, r1
   15fbe:	9f 01       	movw	r18, r30
   15fc0:	27 5f       	subi	r18, 0xF7	; 247
   15fc2:	3f 4f       	sbci	r19, 0xFF	; 255
   15fc4:	d9 01       	movw	r26, r18
   15fc6:	8f 2d       	mov	r24, r15
   15fc8:	1d 92       	st	X+, r1
   15fca:	8a 95       	dec	r24
   15fcc:	e9 f7       	brne	.-6      	; 0x15fc8 <amigo_init+0x3e>
   15fce:	2c 5f       	subi	r18, 0xFC	; 252
   15fd0:	3f 4f       	sbci	r19, 0xFF	; 255
   15fd2:	d9 01       	movw	r26, r18
   15fd4:	8f 2d       	mov	r24, r15
   15fd6:	1d 92       	st	X+, r1
   15fd8:	8a 95       	dec	r24
   15fda:	e9 f7       	brne	.-6      	; 0x15fd6 <amigo_init+0x4c>
   15fdc:	11 82       	std	Z+1, r1	; 0x01
   15fde:	15 82       	std	Z+5, r1	; 0x05
   15fe0:	14 82       	std	Z+4, r1	; 0x04
   15fe2:	13 82       	std	Z+3, r1	; 0x03
   15fe4:	e6 82       	std	Z+6, r14	; 0x06
   15fe6:	10 86       	std	Z+8, r1	; 0x08
   15fe8:	17 82       	std	Z+7, r1	; 0x07
   15fea:	e0 91 2f 19 	lds	r30, 0x192F	; 0x80192f <AMIGOp>
   15fee:	f0 91 30 19 	lds	r31, 0x1930	; 0x801930 <AMIGOp+0x1>
   15ff2:	81 81       	ldd	r24, Z+1	; 0x01
   15ff4:	90 e0       	ldi	r25, 0x00	; 0
   15ff6:	0e 94 8e 85 	call	0x10b1c	; 0x10b1c <gpib_disable_PPR>
   15ffa:	21 97       	sbiw	r28, 0x01	; 1
   15ffc:	0b 52       	subi	r16, 0x2B	; 43
   15ffe:	11 09       	sbc	r17, r1
   16000:	cf 3f       	cpi	r28, 0xFF	; 255
   16002:	af ef       	ldi	r26, 0xFF	; 255
   16004:	da 07       	cpc	r29, r26
   16006:	79 f6       	brne	.-98     	; 0x15fa6 <amigo_init+0x1c>
   16008:	cd b7       	in	r28, 0x3d	; 61
   1600a:	de b7       	in	r29, 0x3e	; 62
   1600c:	e6 e0       	ldi	r30, 0x06	; 6
   1600e:	0c 94 06 e0 	jmp	0x1c00c	; 0x1c00c <__epilogue_restores__+0x18>

00016012 <amigo_request_logical_address>:
   16012:	e0 91 2d 19 	lds	r30, 0x192D	; 0x80192d <AMIGOs>
   16016:	f0 91 2e 19 	lds	r31, 0x192E	; 0x80192e <AMIGOs+0x1>
   1601a:	15 86       	std	Z+13, r1	; 0x0d
   1601c:	83 81       	ldd	r24, Z+3	; 0x03
   1601e:	86 87       	std	Z+14, r24	; 0x0e
   16020:	84 81       	ldd	r24, Z+4	; 0x04
   16022:	87 87       	std	Z+15, r24	; 0x0f
   16024:	85 81       	ldd	r24, Z+5	; 0x05
   16026:	80 8b       	std	Z+16, r24	; 0x10
   16028:	80 e0       	ldi	r24, 0x00	; 0
   1602a:	90 e0       	ldi	r25, 0x00	; 0
   1602c:	08 95       	ret

0001602e <amigo_request_status>:
   1602e:	00 d0       	rcall	.+0      	; 0x16030 <amigo_request_status+0x2>
   16030:	1f 92       	push	r1
   16032:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16036:	85 ff       	sbrs	r24, 5
   16038:	0a c0       	rjmp	.+20     	; 0x1604e <amigo_request_status+0x20>
   1603a:	8d e1       	ldi	r24, 0x1D	; 29
   1603c:	9c e2       	ldi	r25, 0x2C	; 44
   1603e:	a0 e0       	ldi	r26, 0x00	; 0
   16040:	ed b7       	in	r30, 0x3d	; 61
   16042:	fe b7       	in	r31, 0x3e	; 62
   16044:	81 83       	std	Z+1, r24	; 0x01
   16046:	92 83       	std	Z+2, r25	; 0x02
   16048:	a3 83       	std	Z+3, r26	; 0x03
   1604a:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   1604e:	e0 91 2d 19 	lds	r30, 0x192D	; 0x80192d <AMIGOs>
   16052:	f0 91 2e 19 	lds	r31, 0x192E	; 0x80192e <AMIGOs+0x1>
   16056:	11 86       	std	Z+9, r1	; 0x09
   16058:	81 81       	ldd	r24, Z+1	; 0x01
   1605a:	82 87       	std	Z+10, r24	; 0x0a
   1605c:	8d e0       	ldi	r24, 0x0D	; 13
   1605e:	83 87       	std	Z+11, r24	; 0x0b
   16060:	14 86       	std	Z+12, r1	; 0x0c
   16062:	0e 94 48 6f 	call	0xde90	; 0xde90 <mmc_wp_status>
   16066:	e0 91 2d 19 	lds	r30, 0x192D	; 0x80192d <AMIGOs>
   1606a:	f0 91 2e 19 	lds	r31, 0x192E	; 0x80192e <AMIGOs+0x1>
   1606e:	89 2b       	or	r24, r25
   16070:	19 f0       	breq	.+6      	; 0x16078 <amigo_request_status+0x4a>
   16072:	84 85       	ldd	r24, Z+12	; 0x0c
   16074:	80 66       	ori	r24, 0x60	; 96
   16076:	84 87       	std	Z+12, r24	; 0x0c
   16078:	86 81       	ldd	r24, Z+6	; 0x06
   1607a:	82 30       	cpi	r24, 0x02	; 2
   1607c:	31 f4       	brne	.+12     	; 0x1608a <amigo_request_status+0x5c>
   1607e:	83 e1       	ldi	r24, 0x13	; 19
   16080:	81 87       	std	Z+9, r24	; 0x09
   16082:	84 85       	ldd	r24, Z+12	; 0x0c
   16084:	88 60       	ori	r24, 0x08	; 8
   16086:	84 87       	std	Z+12, r24	; 0x0c
   16088:	21 c0       	rjmp	.+66     	; 0x160cc <amigo_request_status+0x9e>
   1608a:	27 81       	ldd	r18, Z+7	; 0x07
   1608c:	30 85       	ldd	r19, Z+8	; 0x08
   1608e:	21 15       	cp	r18, r1
   16090:	31 05       	cpc	r19, r1
   16092:	11 f4       	brne	.+4      	; 0x16098 <amigo_request_status+0x6a>
   16094:	81 30       	cpi	r24, 0x01	; 1
   16096:	d1 f4       	brne	.+52     	; 0x160cc <amigo_request_status+0x9e>
   16098:	26 fd       	sbrc	r18, 6
   1609a:	0c c0       	rjmp	.+24     	; 0x160b4 <amigo_request_status+0x86>
   1609c:	25 ff       	sbrs	r18, 5
   1609e:	03 c0       	rjmp	.+6      	; 0x160a6 <amigo_request_status+0x78>
   160a0:	8a e0       	ldi	r24, 0x0A	; 10
   160a2:	81 87       	std	Z+9, r24	; 0x09
   160a4:	0d c0       	rjmp	.+26     	; 0x160c0 <amigo_request_status+0x92>
   160a6:	84 85       	ldd	r24, Z+12	; 0x0c
   160a8:	24 ff       	sbrs	r18, 4
   160aa:	02 c0       	rjmp	.+4      	; 0x160b0 <amigo_request_status+0x82>
   160ac:	83 60       	ori	r24, 0x03	; 3
   160ae:	07 c0       	rjmp	.+14     	; 0x160be <amigo_request_status+0x90>
   160b0:	21 ff       	sbrs	r18, 1
   160b2:	02 c0       	rjmp	.+4      	; 0x160b8 <amigo_request_status+0x8a>
   160b4:	83 e1       	ldi	r24, 0x13	; 19
   160b6:	f5 cf       	rjmp	.-22     	; 0x160a2 <amigo_request_status+0x74>
   160b8:	22 ff       	sbrs	r18, 2
   160ba:	02 c0       	rjmp	.+4      	; 0x160c0 <amigo_request_status+0x92>
   160bc:	84 60       	ori	r24, 0x04	; 4
   160be:	84 87       	std	Z+12, r24	; 0x0c
   160c0:	84 85       	ldd	r24, Z+12	; 0x0c
   160c2:	80 61       	ori	r24, 0x10	; 16
   160c4:	84 87       	std	Z+12, r24	; 0x0c
   160c6:	83 85       	ldd	r24, Z+11	; 0x0b
   160c8:	80 68       	ori	r24, 0x80	; 128
   160ca:	83 87       	std	Z+11, r24	; 0x0b
   160cc:	e0 91 2f 19 	lds	r30, 0x192F	; 0x80192f <AMIGOp>
   160d0:	f0 91 30 19 	lds	r31, 0x1930	; 0x801930 <AMIGOp+0x1>
   160d4:	81 81       	ldd	r24, Z+1	; 0x01
   160d6:	90 e0       	ldi	r25, 0x00	; 0
   160d8:	0e 94 58 85 	call	0x10ab0	; 0x10ab0 <gpib_enable_PPR>
   160dc:	80 e0       	ldi	r24, 0x00	; 0
   160de:	90 e0       	ldi	r25, 0x00	; 0
   160e0:	0f 90       	pop	r0
   160e2:	0f 90       	pop	r0
   160e4:	0f 90       	pop	r0
   160e6:	08 95       	ret

000160e8 <amigo_send_logical_address>:
   160e8:	a5 e0       	ldi	r26, 0x05	; 5
   160ea:	b0 e0       	ldi	r27, 0x00	; 0
   160ec:	ea e7       	ldi	r30, 0x7A	; 122
   160ee:	f0 eb       	ldi	r31, 0xB0	; 176
   160f0:	0c 94 ee df 	jmp	0x1bfdc	; 0x1bfdc <__prologue_saves__+0x20>
   160f4:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   160f8:	85 ff       	sbrs	r24, 5
   160fa:	0a c0       	rjmp	.+20     	; 0x16110 <amigo_send_logical_address+0x28>
   160fc:	8f ef       	ldi	r24, 0xFF	; 255
   160fe:	9b e2       	ldi	r25, 0x2B	; 43
   16100:	a0 e0       	ldi	r26, 0x00	; 0
   16102:	ed b7       	in	r30, 0x3d	; 61
   16104:	fe b7       	in	r31, 0x3e	; 62
   16106:	81 83       	std	Z+1, r24	; 0x01
   16108:	92 83       	std	Z+2, r25	; 0x02
   1610a:	a3 83       	std	Z+3, r26	; 0x03
   1610c:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   16110:	80 e0       	ldi	r24, 0x00	; 0
   16112:	91 e0       	ldi	r25, 0x01	; 1
   16114:	9d 83       	std	Y+5, r25	; 0x05
   16116:	8c 83       	std	Y+4, r24	; 0x04
   16118:	80 91 2d 19 	lds	r24, 0x192D	; 0x80192d <AMIGOs>
   1611c:	90 91 2e 19 	lds	r25, 0x192E	; 0x80192e <AMIGOs+0x1>
   16120:	ae 01       	movw	r20, r28
   16122:	4c 5f       	subi	r20, 0xFC	; 252
   16124:	5f 4f       	sbci	r21, 0xFF	; 255
   16126:	64 e0       	ldi	r22, 0x04	; 4
   16128:	70 e0       	ldi	r23, 0x00	; 0
   1612a:	0d 96       	adiw	r24, 0x0d	; 13
   1612c:	0e 94 b2 8a 	call	0x11564	; 0x11564 <gpib_write_str>
   16130:	2c 81       	ldd	r18, Y+4	; 0x04
   16132:	3d 81       	ldd	r19, Y+5	; 0x05
   16134:	22 27       	eor	r18, r18
   16136:	30 7d       	andi	r19, 0xD0	; 208
   16138:	23 2b       	or	r18, r19
   1613a:	49 f0       	breq	.+18     	; 0x1614e <amigo_send_logical_address+0x66>
   1613c:	e0 91 2d 19 	lds	r30, 0x192D	; 0x80192d <AMIGOs>
   16140:	f0 91 2e 19 	lds	r31, 0x192E	; 0x80192e <AMIGOs+0x1>
   16144:	27 81       	ldd	r18, Z+7	; 0x07
   16146:	30 85       	ldd	r19, Z+8	; 0x08
   16148:	20 62       	ori	r18, 0x20	; 32
   1614a:	30 87       	std	Z+8, r19	; 0x08
   1614c:	27 83       	std	Z+7, r18	; 0x07
   1614e:	04 97       	sbiw	r24, 0x04	; 4
   16150:	c9 f0       	breq	.+50     	; 0x16184 <amigo_send_logical_address+0x9c>
   16152:	e0 91 2d 19 	lds	r30, 0x192D	; 0x80192d <AMIGOs>
   16156:	f0 91 2e 19 	lds	r31, 0x192E	; 0x80192e <AMIGOs+0x1>
   1615a:	87 81       	ldd	r24, Z+7	; 0x07
   1615c:	90 85       	ldd	r25, Z+8	; 0x08
   1615e:	80 62       	ori	r24, 0x20	; 32
   16160:	90 87       	std	Z+8, r25	; 0x08
   16162:	87 83       	std	Z+7, r24	; 0x07
   16164:	81 e0       	ldi	r24, 0x01	; 1
   16166:	86 83       	std	Z+6, r24	; 0x06
   16168:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1616c:	81 ff       	sbrs	r24, 1
   1616e:	0a c0       	rjmp	.+20     	; 0x16184 <amigo_send_logical_address+0x9c>
   16170:	85 ee       	ldi	r24, 0xE5	; 229
   16172:	9b e2       	ldi	r25, 0x2B	; 43
   16174:	a0 e0       	ldi	r26, 0x00	; 0
   16176:	ed b7       	in	r30, 0x3d	; 61
   16178:	fe b7       	in	r31, 0x3e	; 62
   1617a:	81 83       	std	Z+1, r24	; 0x01
   1617c:	92 83       	std	Z+2, r25	; 0x02
   1617e:	a3 83       	std	Z+3, r26	; 0x03
   16180:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   16184:	e0 91 2f 19 	lds	r30, 0x192F	; 0x80192f <AMIGOp>
   16188:	f0 91 30 19 	lds	r31, 0x1930	; 0x801930 <AMIGOp+0x1>
   1618c:	81 81       	ldd	r24, Z+1	; 0x01
   1618e:	90 e0       	ldi	r25, 0x00	; 0
   16190:	0e 94 58 85 	call	0x10ab0	; 0x10ab0 <gpib_enable_PPR>
   16194:	8c 81       	ldd	r24, Y+4	; 0x04
   16196:	9d 81       	ldd	r25, Y+5	; 0x05
   16198:	88 27       	eor	r24, r24
   1619a:	90 7d       	andi	r25, 0xD0	; 208
   1619c:	25 96       	adiw	r28, 0x05	; 5
   1619e:	e2 e0       	ldi	r30, 0x02	; 2
   161a0:	0c 94 0a e0 	jmp	0x1c014	; 0x1c014 <__epilogue_restores__+0x20>

000161a4 <amigo_send_status>:
   161a4:	a5 e0       	ldi	r26, 0x05	; 5
   161a6:	b0 e0       	ldi	r27, 0x00	; 0
   161a8:	e8 ed       	ldi	r30, 0xD8	; 216
   161aa:	f0 eb       	ldi	r31, 0xB0	; 176
   161ac:	0c 94 ee df 	jmp	0x1bfdc	; 0x1bfdc <__prologue_saves__+0x20>
   161b0:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   161b4:	85 ff       	sbrs	r24, 5
   161b6:	0a c0       	rjmp	.+20     	; 0x161cc <amigo_send_status+0x28>
   161b8:	80 ed       	ldi	r24, 0xD0	; 208
   161ba:	9b e2       	ldi	r25, 0x2B	; 43
   161bc:	a0 e0       	ldi	r26, 0x00	; 0
   161be:	ed b7       	in	r30, 0x3d	; 61
   161c0:	fe b7       	in	r31, 0x3e	; 62
   161c2:	81 83       	std	Z+1, r24	; 0x01
   161c4:	92 83       	std	Z+2, r25	; 0x02
   161c6:	a3 83       	std	Z+3, r26	; 0x03
   161c8:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   161cc:	80 e0       	ldi	r24, 0x00	; 0
   161ce:	91 e0       	ldi	r25, 0x01	; 1
   161d0:	9d 83       	std	Y+5, r25	; 0x05
   161d2:	8c 83       	std	Y+4, r24	; 0x04
   161d4:	80 91 2d 19 	lds	r24, 0x192D	; 0x80192d <AMIGOs>
   161d8:	90 91 2e 19 	lds	r25, 0x192E	; 0x80192e <AMIGOs+0x1>
   161dc:	ae 01       	movw	r20, r28
   161de:	4c 5f       	subi	r20, 0xFC	; 252
   161e0:	5f 4f       	sbci	r21, 0xFF	; 255
   161e2:	64 e0       	ldi	r22, 0x04	; 4
   161e4:	70 e0       	ldi	r23, 0x00	; 0
   161e6:	09 96       	adiw	r24, 0x09	; 9
   161e8:	0e 94 b2 8a 	call	0x11564	; 0x11564 <gpib_write_str>
   161ec:	2c 81       	ldd	r18, Y+4	; 0x04
   161ee:	3d 81       	ldd	r19, Y+5	; 0x05
   161f0:	22 27       	eor	r18, r18
   161f2:	30 7d       	andi	r19, 0xD0	; 208
   161f4:	e0 91 2d 19 	lds	r30, 0x192D	; 0x80192d <AMIGOs>
   161f8:	f0 91 2e 19 	lds	r31, 0x192E	; 0x80192e <AMIGOs+0x1>
   161fc:	23 2b       	or	r18, r19
   161fe:	29 f0       	breq	.+10     	; 0x1620a <amigo_send_status+0x66>
   16200:	27 81       	ldd	r18, Z+7	; 0x07
   16202:	30 85       	ldd	r19, Z+8	; 0x08
   16204:	20 62       	ori	r18, 0x20	; 32
   16206:	30 87       	std	Z+8, r19	; 0x08
   16208:	27 83       	std	Z+7, r18	; 0x07
   1620a:	04 97       	sbiw	r24, 0x04	; 4
   1620c:	b1 f0       	breq	.+44     	; 0x1623a <amigo_send_status+0x96>
   1620e:	87 81       	ldd	r24, Z+7	; 0x07
   16210:	90 85       	ldd	r25, Z+8	; 0x08
   16212:	80 62       	ori	r24, 0x20	; 32
   16214:	90 87       	std	Z+8, r25	; 0x08
   16216:	87 83       	std	Z+7, r24	; 0x07
   16218:	81 e0       	ldi	r24, 0x01	; 1
   1621a:	86 83       	std	Z+6, r24	; 0x06
   1621c:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16220:	81 ff       	sbrs	r24, 1
   16222:	0e c0       	rjmp	.+28     	; 0x16240 <amigo_send_status+0x9c>
   16224:	86 eb       	ldi	r24, 0xB6	; 182
   16226:	9b e2       	ldi	r25, 0x2B	; 43
   16228:	a0 e0       	ldi	r26, 0x00	; 0
   1622a:	ed b7       	in	r30, 0x3d	; 61
   1622c:	fe b7       	in	r31, 0x3e	; 62
   1622e:	81 83       	std	Z+1, r24	; 0x01
   16230:	92 83       	std	Z+2, r25	; 0x02
   16232:	a3 83       	std	Z+3, r26	; 0x03
   16234:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   16238:	03 c0       	rjmp	.+6      	; 0x16240 <amigo_send_status+0x9c>
   1623a:	10 86       	std	Z+8, r1	; 0x08
   1623c:	17 82       	std	Z+7, r1	; 0x07
   1623e:	16 82       	std	Z+6, r1	; 0x06
   16240:	e0 91 2f 19 	lds	r30, 0x192F	; 0x80192f <AMIGOp>
   16244:	f0 91 30 19 	lds	r31, 0x1930	; 0x801930 <AMIGOp+0x1>
   16248:	81 81       	ldd	r24, Z+1	; 0x01
   1624a:	90 e0       	ldi	r25, 0x00	; 0
   1624c:	0e 94 58 85 	call	0x10ab0	; 0x10ab0 <gpib_enable_PPR>
   16250:	8c 81       	ldd	r24, Y+4	; 0x04
   16252:	9d 81       	ldd	r25, Y+5	; 0x05
   16254:	88 27       	eor	r24, r24
   16256:	90 7d       	andi	r25, 0xD0	; 208
   16258:	25 96       	adiw	r28, 0x05	; 5
   1625a:	e2 e0       	ldi	r30, 0x02	; 2
   1625c:	0c 94 0a e0 	jmp	0x1c014	; 0x1c014 <__epilogue_restores__+0x20>

00016260 <amigo_increment>:
   16260:	a1 e1       	ldi	r26, 0x11	; 17
   16262:	b0 e0       	ldi	r27, 0x00	; 0
   16264:	e6 e3       	ldi	r30, 0x36	; 54
   16266:	f1 eb       	ldi	r31, 0xB1	; 177
   16268:	0c 94 ee df 	jmp	0x1bfdc	; 0x1bfdc <__prologue_saves__+0x20>
   1626c:	bc 01       	movw	r22, r24
   1626e:	e0 91 2d 19 	lds	r30, 0x192D	; 0x80192d <AMIGOs>
   16272:	f0 91 2e 19 	lds	r31, 0x192E	; 0x80192e <AMIGOs+0x1>
   16276:	91 e1       	ldi	r25, 0x11	; 17
   16278:	de 01       	movw	r26, r28
   1627a:	11 96       	adiw	r26, 0x01	; 1
   1627c:	01 90       	ld	r0, Z+
   1627e:	0d 92       	st	X+, r0
   16280:	9a 95       	dec	r25
   16282:	e1 f7       	brne	.-8      	; 0x1627c <amigo_increment+0x1c>
   16284:	9e 81       	ldd	r25, Y+6	; 0x06
   16286:	9f 5f       	subi	r25, 0xFF	; 255
   16288:	9e 83       	std	Y+6, r25	; 0x06
   1628a:	ce 01       	movw	r24, r28
   1628c:	01 96       	adiw	r24, 0x01	; 1
   1628e:	b3 dd       	rcall	.-1178   	; 0x15df6 <amigo_overflow_check>
   16290:	00 97       	sbiw	r24, 0x00	; 0
   16292:	59 f4       	brne	.+22     	; 0x162aa <amigo_increment+0x4a>
   16294:	a0 91 2d 19 	lds	r26, 0x192D	; 0x80192d <AMIGOs>
   16298:	b0 91 2e 19 	lds	r27, 0x192E	; 0x80192e <AMIGOs+0x1>
   1629c:	21 e1       	ldi	r18, 0x11	; 17
   1629e:	fe 01       	movw	r30, r28
   162a0:	31 96       	adiw	r30, 0x01	; 1
   162a2:	01 90       	ld	r0, Z+
   162a4:	0d 92       	st	X+, r0
   162a6:	2a 95       	dec	r18
   162a8:	e1 f7       	brne	.-8      	; 0x162a2 <amigo_increment+0x42>
   162aa:	61 96       	adiw	r28, 0x11	; 17
   162ac:	e2 e0       	ldi	r30, 0x02	; 2
   162ae:	0c 94 0a e0 	jmp	0x1c014	; 0x1c014 <__epilogue_restores__+0x20>

000162b2 <amigo_seek>:
   162b2:	0f 93       	push	r16
   162b4:	1f 93       	push	r17
   162b6:	cf 93       	push	r28
   162b8:	df 93       	push	r29
   162ba:	ec 01       	movw	r28, r24
   162bc:	67 e4       	ldi	r22, 0x47	; 71
   162be:	75 e1       	ldi	r23, 0x15	; 21
   162c0:	9a dd       	rcall	.-1228   	; 0x15df6 <amigo_overflow_check>
   162c2:	8c 01       	movw	r16, r24
   162c4:	e0 91 2d 19 	lds	r30, 0x192D	; 0x80192d <AMIGOs>
   162c8:	f0 91 2e 19 	lds	r31, 0x192E	; 0x80192e <AMIGOs+0x1>
   162cc:	89 2b       	or	r24, r25
   162ce:	41 f0       	breq	.+16     	; 0x162e0 <amigo_seek+0x2e>
   162d0:	81 e0       	ldi	r24, 0x01	; 1
   162d2:	86 83       	std	Z+6, r24	; 0x06
   162d4:	87 81       	ldd	r24, Z+7	; 0x07
   162d6:	90 85       	ldd	r25, Z+8	; 0x08
   162d8:	84 60       	ori	r24, 0x04	; 4
   162da:	90 87       	std	Z+8, r25	; 0x08
   162dc:	87 83       	std	Z+7, r24	; 0x07
   162de:	06 c0       	rjmp	.+12     	; 0x162ec <amigo_seek+0x3a>
   162e0:	8d 81       	ldd	r24, Y+5	; 0x05
   162e2:	85 83       	std	Z+5, r24	; 0x05
   162e4:	8c 81       	ldd	r24, Y+4	; 0x04
   162e6:	84 83       	std	Z+4, r24	; 0x04
   162e8:	8b 81       	ldd	r24, Y+3	; 0x03
   162ea:	83 83       	std	Z+3, r24	; 0x03
   162ec:	e0 91 2f 19 	lds	r30, 0x192F	; 0x80192f <AMIGOp>
   162f0:	f0 91 30 19 	lds	r31, 0x1930	; 0x801930 <AMIGOp+0x1>
   162f4:	81 81       	ldd	r24, Z+1	; 0x01
   162f6:	90 e0       	ldi	r25, 0x00	; 0
   162f8:	0e 94 58 85 	call	0x10ab0	; 0x10ab0 <gpib_enable_PPR>
   162fc:	c8 01       	movw	r24, r16
   162fe:	df 91       	pop	r29
   16300:	cf 91       	pop	r28
   16302:	1f 91       	pop	r17
   16304:	0f 91       	pop	r16
   16306:	08 95       	ret

00016308 <amigo_verify>:
   16308:	8f 92       	push	r8
   1630a:	9f 92       	push	r9
   1630c:	af 92       	push	r10
   1630e:	bf 92       	push	r11
   16310:	ef 92       	push	r14
   16312:	ff 92       	push	r15
   16314:	0f 93       	push	r16
   16316:	1f 93       	push	r17
   16318:	cf 93       	push	r28
   1631a:	df 93       	push	r29
   1631c:	ad b7       	in	r26, 0x3d	; 61
   1631e:	be b7       	in	r27, 0x3e	; 62
   16320:	19 97       	sbiw	r26, 0x09	; 9
   16322:	0f b6       	in	r0, 0x3f	; 63
   16324:	f8 94       	cli
   16326:	be bf       	out	0x3e, r27	; 62
   16328:	0f be       	out	0x3f, r0	; 63
   1632a:	ad bf       	out	0x3d, r26	; 61
   1632c:	7c 01       	movw	r14, r24
   1632e:	6c e4       	ldi	r22, 0x4C	; 76
   16330:	75 e1       	ldi	r23, 0x15	; 21
   16332:	80 91 2d 19 	lds	r24, 0x192D	; 0x80192d <AMIGOs>
   16336:	90 91 2e 19 	lds	r25, 0x192E	; 0x80192e <AMIGOs+0x1>
   1633a:	b3 dd       	rcall	.-1178   	; 0x15ea2 <amigo_chs_to_logical>
   1633c:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   16340:	25 ff       	sbrs	r18, 5
   16342:	10 c0       	rjmp	.+32     	; 0x16364 <amigo_verify+0x5c>
   16344:	ed b7       	in	r30, 0x3d	; 61
   16346:	fe b7       	in	r31, 0x3e	; 62
   16348:	e0 86       	std	Z+8, r14	; 0x08
   1634a:	f1 86       	std	Z+9, r15	; 0x09
   1634c:	64 83       	std	Z+4, r22	; 0x04
   1634e:	75 83       	std	Z+5, r23	; 0x05
   16350:	86 83       	std	Z+6, r24	; 0x06
   16352:	97 83       	std	Z+7, r25	; 0x07
   16354:	85 e7       	ldi	r24, 0x75	; 117
   16356:	9b e2       	ldi	r25, 0x2B	; 43
   16358:	a0 e0       	ldi	r26, 0x00	; 0
   1635a:	81 83       	std	Z+1, r24	; 0x01
   1635c:	92 83       	std	Z+2, r25	; 0x02
   1635e:	a3 83       	std	Z+3, r26	; 0x03
   16360:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   16364:	e7 01       	movw	r28, r14
   16366:	20 97       	sbiw	r28, 0x00	; 0
   16368:	09 f4       	brne	.+2      	; 0x1636c <amigo_verify+0x64>
   1636a:	49 c0       	rjmp	.+146    	; 0x163fe <amigo_verify+0xf6>
   1636c:	69 e5       	ldi	r22, 0x59	; 89
   1636e:	75 e1       	ldi	r23, 0x15	; 21
   16370:	80 91 2d 19 	lds	r24, 0x192D	; 0x80192d <AMIGOs>
   16374:	90 91 2e 19 	lds	r25, 0x192E	; 0x80192e <AMIGOs+0x1>
   16378:	94 dd       	rcall	.-1240   	; 0x15ea2 <amigo_chs_to_logical>
   1637a:	4b 01       	movw	r8, r22
   1637c:	5c 01       	movw	r10, r24
   1637e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16382:	86 fd       	sbrc	r24, 6
   16384:	0e 94 96 84 	call	0x1092c	; 0x1092c <gpib_timer_elapsed_begin>
   16388:	e0 91 2f 19 	lds	r30, 0x192F	; 0x80192f <AMIGOp>
   1638c:	f0 91 30 19 	lds	r31, 0x1930	; 0x801930 <AMIGOp+0x1>
   16390:	e0 90 2d 19 	lds	r14, 0x192D	; 0x80192d <AMIGOs>
   16394:	f0 90 2e 19 	lds	r15, 0x192E	; 0x80192e <AMIGOs+0x1>
   16398:	87 e0       	ldi	r24, 0x07	; 7
   1639a:	e8 0e       	add	r14, r24
   1639c:	f1 1c       	adc	r15, r1
   1639e:	06 81       	ldd	r16, Z+6	; 0x06
   163a0:	17 81       	ldd	r17, Z+7	; 0x07
   163a2:	2e ea       	ldi	r18, 0xAE	; 174
   163a4:	3c e1       	ldi	r19, 0x1C	; 28
   163a6:	b5 01       	movw	r22, r10
   163a8:	a4 01       	movw	r20, r8
   163aa:	82 81       	ldd	r24, Z+2	; 0x02
   163ac:	93 81       	ldd	r25, Z+3	; 0x03
   163ae:	0e 94 e8 83 	call	0x107d0	; 0x107d0 <dbf_open_read>
   163b2:	7c 01       	movw	r14, r24
   163b4:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   163b8:	86 ff       	sbrs	r24, 6
   163ba:	04 c0       	rjmp	.+8      	; 0x163c4 <amigo_verify+0xbc>
   163bc:	81 e6       	ldi	r24, 0x61	; 97
   163be:	90 e1       	ldi	r25, 0x10	; 16
   163c0:	0e 94 a8 84 	call	0x10950	; 0x10950 <gpib_timer_elapsed_end>
   163c4:	e0 91 2f 19 	lds	r30, 0x192F	; 0x80192f <AMIGOp>
   163c8:	f0 91 30 19 	lds	r31, 0x1930	; 0x801930 <AMIGOp+0x1>
   163cc:	86 81       	ldd	r24, Z+6	; 0x06
   163ce:	97 81       	ldd	r25, Z+7	; 0x07
   163d0:	e8 16       	cp	r14, r24
   163d2:	f9 06       	cpc	r15, r25
   163d4:	61 f0       	breq	.+24     	; 0x163ee <amigo_verify+0xe6>
   163d6:	e0 91 2d 19 	lds	r30, 0x192D	; 0x80192d <AMIGOs>
   163da:	f0 91 2e 19 	lds	r31, 0x192E	; 0x80192e <AMIGOs+0x1>
   163de:	81 e0       	ldi	r24, 0x01	; 1
   163e0:	86 83       	std	Z+6, r24	; 0x06
   163e2:	87 81       	ldd	r24, Z+7	; 0x07
   163e4:	90 85       	ldd	r25, Z+8	; 0x08
   163e6:	81 60       	ori	r24, 0x01	; 1
   163e8:	90 87       	std	Z+8, r25	; 0x08
   163ea:	87 83       	std	Z+7, r24	; 0x07
   163ec:	0b c0       	rjmp	.+22     	; 0x16404 <amigo_verify+0xfc>
   163ee:	81 e6       	ldi	r24, 0x61	; 97
   163f0:	95 e1       	ldi	r25, 0x15	; 21
   163f2:	36 df       	rcall	.-404    	; 0x16260 <amigo_increment>
   163f4:	21 97       	sbiw	r28, 0x01	; 1
   163f6:	89 2b       	or	r24, r25
   163f8:	09 f4       	brne	.+2      	; 0x163fc <amigo_verify+0xf4>
   163fa:	b5 cf       	rjmp	.-150    	; 0x16366 <amigo_verify+0x5e>
   163fc:	03 c0       	rjmp	.+6      	; 0x16404 <amigo_verify+0xfc>
   163fe:	c0 e0       	ldi	r28, 0x00	; 0
   16400:	d0 e0       	ldi	r29, 0x00	; 0
   16402:	02 c0       	rjmp	.+4      	; 0x16408 <amigo_verify+0x100>
   16404:	c1 e0       	ldi	r28, 0x01	; 1
   16406:	d0 e0       	ldi	r29, 0x00	; 0
   16408:	e0 91 2f 19 	lds	r30, 0x192F	; 0x80192f <AMIGOp>
   1640c:	f0 91 30 19 	lds	r31, 0x1930	; 0x801930 <AMIGOp+0x1>
   16410:	81 81       	ldd	r24, Z+1	; 0x01
   16412:	90 e0       	ldi	r25, 0x00	; 0
   16414:	0e 94 58 85 	call	0x10ab0	; 0x10ab0 <gpib_enable_PPR>
   16418:	ce 01       	movw	r24, r28
   1641a:	ad b7       	in	r26, 0x3d	; 61
   1641c:	be b7       	in	r27, 0x3e	; 62
   1641e:	19 96       	adiw	r26, 0x09	; 9
   16420:	0f b6       	in	r0, 0x3f	; 63
   16422:	f8 94       	cli
   16424:	be bf       	out	0x3e, r27	; 62
   16426:	0f be       	out	0x3f, r0	; 63
   16428:	ad bf       	out	0x3d, r26	; 61
   1642a:	df 91       	pop	r29
   1642c:	cf 91       	pop	r28
   1642e:	1f 91       	pop	r17
   16430:	0f 91       	pop	r16
   16432:	ff 90       	pop	r15
   16434:	ef 90       	pop	r14
   16436:	bf 90       	pop	r11
   16438:	af 90       	pop	r10
   1643a:	9f 90       	pop	r9
   1643c:	8f 90       	pop	r8
   1643e:	08 95       	ret

00016440 <amigo_format>:
   16440:	ef 92       	push	r14
   16442:	ff 92       	push	r15
   16444:	0f 93       	push	r16
   16446:	1f 93       	push	r17
   16448:	cf 93       	push	r28
   1644a:	df 93       	push	r29
   1644c:	00 d0       	rcall	.+0      	; 0x1644e <amigo_format+0xe>
   1644e:	1f 92       	push	r1
   16450:	e0 91 2d 19 	lds	r30, 0x192D	; 0x80192d <AMIGOs>
   16454:	f0 91 2e 19 	lds	r31, 0x192E	; 0x80192e <AMIGOs+0x1>
   16458:	15 82       	std	Z+5, r1	; 0x05
   1645a:	14 82       	std	Z+4, r1	; 0x04
   1645c:	13 82       	std	Z+3, r1	; 0x03
   1645e:	e0 91 2f 19 	lds	r30, 0x192F	; 0x80192f <AMIGOp>
   16462:	f0 91 30 19 	lds	r31, 0x1930	; 0x801930 <AMIGOp+0x1>
   16466:	46 81       	ldd	r20, Z+6	; 0x06
   16468:	57 81       	ldd	r21, Z+7	; 0x07
   1646a:	68 2f       	mov	r22, r24
   1646c:	70 e0       	ldi	r23, 0x00	; 0
   1646e:	8e ea       	ldi	r24, 0xAE	; 174
   16470:	9c e1       	ldi	r25, 0x1C	; 28
   16472:	0e 94 bd e4 	call	0x1c97a	; 0x1c97a <memset>
   16476:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1647a:	85 ff       	sbrs	r24, 5
   1647c:	0a c0       	rjmp	.+20     	; 0x16492 <amigo_format+0x52>
   1647e:	8a e3       	ldi	r24, 0x3A	; 58
   16480:	9b e2       	ldi	r25, 0x2B	; 43
   16482:	a0 e0       	ldi	r26, 0x00	; 0
   16484:	ed b7       	in	r30, 0x3d	; 61
   16486:	fe b7       	in	r31, 0x3e	; 62
   16488:	81 83       	std	Z+1, r24	; 0x01
   1648a:	92 83       	std	Z+2, r25	; 0x02
   1648c:	a3 83       	std	Z+3, r26	; 0x03
   1648e:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   16492:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16496:	86 fd       	sbrc	r24, 6
   16498:	0e 94 96 84 	call	0x1092c	; 0x1092c <gpib_timer_elapsed_begin>
   1649c:	68 e6       	ldi	r22, 0x68	; 104
   1649e:	75 e1       	ldi	r23, 0x15	; 21
   164a0:	80 91 2d 19 	lds	r24, 0x192D	; 0x80192d <AMIGOs>
   164a4:	90 91 2e 19 	lds	r25, 0x192E	; 0x80192e <AMIGOs+0x1>
   164a8:	fc dc       	rcall	.-1544   	; 0x15ea2 <amigo_chs_to_logical>
   164aa:	ab 01       	movw	r20, r22
   164ac:	bc 01       	movw	r22, r24
   164ae:	e0 91 2f 19 	lds	r30, 0x192F	; 0x80192f <AMIGOp>
   164b2:	f0 91 30 19 	lds	r31, 0x1930	; 0x801930 <AMIGOp+0x1>
   164b6:	e0 90 2d 19 	lds	r14, 0x192D	; 0x80192d <AMIGOs>
   164ba:	f0 90 2e 19 	lds	r15, 0x192E	; 0x80192e <AMIGOs+0x1>
   164be:	87 e0       	ldi	r24, 0x07	; 7
   164c0:	e8 0e       	add	r14, r24
   164c2:	f1 1c       	adc	r15, r1
   164c4:	06 81       	ldd	r16, Z+6	; 0x06
   164c6:	17 81       	ldd	r17, Z+7	; 0x07
   164c8:	2e ea       	ldi	r18, 0xAE	; 174
   164ca:	3c e1       	ldi	r19, 0x1C	; 28
   164cc:	82 81       	ldd	r24, Z+2	; 0x02
   164ce:	93 81       	ldd	r25, Z+3	; 0x03
   164d0:	0e 94 3f 84 	call	0x1087e	; 0x1087e <dbf_open_write>
   164d4:	e0 91 2f 19 	lds	r30, 0x192F	; 0x80192f <AMIGOp>
   164d8:	f0 91 30 19 	lds	r31, 0x1930	; 0x801930 <AMIGOp+0x1>
   164dc:	26 81       	ldd	r18, Z+6	; 0x06
   164de:	37 81       	ldd	r19, Z+7	; 0x07
   164e0:	82 17       	cp	r24, r18
   164e2:	93 07       	cpc	r25, r19
   164e4:	71 f0       	breq	.+28     	; 0x16502 <amigo_format+0xc2>
   164e6:	e0 91 2d 19 	lds	r30, 0x192D	; 0x80192d <AMIGOs>
   164ea:	f0 91 2e 19 	lds	r31, 0x192E	; 0x80192e <AMIGOs+0x1>
   164ee:	87 81       	ldd	r24, Z+7	; 0x07
   164f0:	90 85       	ldd	r25, Z+8	; 0x08
   164f2:	82 60       	ori	r24, 0x02	; 2
   164f4:	90 87       	std	Z+8, r25	; 0x08
   164f6:	87 83       	std	Z+7, r24	; 0x07
   164f8:	81 e0       	ldi	r24, 0x01	; 1
   164fa:	86 83       	std	Z+6, r24	; 0x06
   164fc:	c1 e0       	ldi	r28, 0x01	; 1
   164fe:	d0 e0       	ldi	r29, 0x00	; 0
   16500:	0f c0       	rjmp	.+30     	; 0x16520 <amigo_format+0xe0>
   16502:	80 e0       	ldi	r24, 0x00	; 0
   16504:	90 e0       	ldi	r25, 0x00	; 0
   16506:	ac de       	rcall	.-680    	; 0x16260 <amigo_increment>
   16508:	89 2b       	or	r24, r25
   1650a:	41 f2       	breq	.-112    	; 0x1649c <amigo_format+0x5c>
   1650c:	e0 91 2d 19 	lds	r30, 0x192D	; 0x80192d <AMIGOs>
   16510:	f0 91 2e 19 	lds	r31, 0x192E	; 0x80192e <AMIGOs+0x1>
   16514:	15 82       	std	Z+5, r1	; 0x05
   16516:	14 82       	std	Z+4, r1	; 0x04
   16518:	13 82       	std	Z+3, r1	; 0x03
   1651a:	16 82       	std	Z+6, r1	; 0x06
   1651c:	c0 e0       	ldi	r28, 0x00	; 0
   1651e:	d0 e0       	ldi	r29, 0x00	; 0
   16520:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16524:	86 ff       	sbrs	r24, 6
   16526:	04 c0       	rjmp	.+8      	; 0x16530 <amigo_format+0xf0>
   16528:	88 e6       	ldi	r24, 0x68	; 104
   1652a:	95 e1       	ldi	r25, 0x15	; 21
   1652c:	0e 94 a8 84 	call	0x10950	; 0x10950 <gpib_timer_elapsed_end>
   16530:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16534:	85 ff       	sbrs	r24, 5
   16536:	0a c0       	rjmp	.+20     	; 0x1654c <amigo_format+0x10c>
   16538:	85 e2       	ldi	r24, 0x25	; 37
   1653a:	9b e2       	ldi	r25, 0x2B	; 43
   1653c:	a0 e0       	ldi	r26, 0x00	; 0
   1653e:	ed b7       	in	r30, 0x3d	; 61
   16540:	fe b7       	in	r31, 0x3e	; 62
   16542:	81 83       	std	Z+1, r24	; 0x01
   16544:	92 83       	std	Z+2, r25	; 0x02
   16546:	a3 83       	std	Z+3, r26	; 0x03
   16548:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   1654c:	e0 91 2f 19 	lds	r30, 0x192F	; 0x80192f <AMIGOp>
   16550:	f0 91 30 19 	lds	r31, 0x1930	; 0x801930 <AMIGOp+0x1>
   16554:	81 81       	ldd	r24, Z+1	; 0x01
   16556:	90 e0       	ldi	r25, 0x00	; 0
   16558:	0e 94 58 85 	call	0x10ab0	; 0x10ab0 <gpib_enable_PPR>
   1655c:	ce 01       	movw	r24, r28
   1655e:	cd b7       	in	r28, 0x3d	; 61
   16560:	de b7       	in	r29, 0x3e	; 62
   16562:	23 96       	adiw	r28, 0x03	; 3
   16564:	e6 e0       	ldi	r30, 0x06	; 6
   16566:	0c 94 06 e0 	jmp	0x1c00c	; 0x1c00c <__epilogue_restores__+0x18>

0001656a <amigo_buffered_read>:
   1656a:	8f 92       	push	r8
   1656c:	9f 92       	push	r9
   1656e:	af 92       	push	r10
   16570:	bf 92       	push	r11
   16572:	ef 92       	push	r14
   16574:	ff 92       	push	r15
   16576:	0f 93       	push	r16
   16578:	1f 93       	push	r17
   1657a:	cf 93       	push	r28
   1657c:	df 93       	push	r29
   1657e:	00 d0       	rcall	.+0      	; 0x16580 <amigo_buffered_read+0x16>
   16580:	00 d0       	rcall	.+0      	; 0x16582 <amigo_buffered_read+0x18>
   16582:	1f 92       	push	r1
   16584:	cd b7       	in	r28, 0x3d	; 61
   16586:	de b7       	in	r29, 0x3e	; 62
   16588:	6f e6       	ldi	r22, 0x6F	; 111
   1658a:	75 e1       	ldi	r23, 0x15	; 21
   1658c:	80 91 2d 19 	lds	r24, 0x192D	; 0x80192d <AMIGOs>
   16590:	90 91 2e 19 	lds	r25, 0x192E	; 0x80192e <AMIGOs+0x1>
   16594:	86 dc       	rcall	.-1780   	; 0x15ea2 <amigo_chs_to_logical>
   16596:	4b 01       	movw	r8, r22
   16598:	5c 01       	movw	r10, r24
   1659a:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1659e:	86 fd       	sbrc	r24, 6
   165a0:	0e 94 96 84 	call	0x1092c	; 0x1092c <gpib_timer_elapsed_begin>
   165a4:	e0 91 2f 19 	lds	r30, 0x192F	; 0x80192f <AMIGOp>
   165a8:	f0 91 30 19 	lds	r31, 0x1930	; 0x801930 <AMIGOp+0x1>
   165ac:	e0 90 2d 19 	lds	r14, 0x192D	; 0x80192d <AMIGOs>
   165b0:	f0 90 2e 19 	lds	r15, 0x192E	; 0x80192e <AMIGOs+0x1>
   165b4:	87 e0       	ldi	r24, 0x07	; 7
   165b6:	e8 0e       	add	r14, r24
   165b8:	f1 1c       	adc	r15, r1
   165ba:	06 81       	ldd	r16, Z+6	; 0x06
   165bc:	17 81       	ldd	r17, Z+7	; 0x07
   165be:	2e ea       	ldi	r18, 0xAE	; 174
   165c0:	3c e1       	ldi	r19, 0x1C	; 28
   165c2:	b5 01       	movw	r22, r10
   165c4:	a4 01       	movw	r20, r8
   165c6:	82 81       	ldd	r24, Z+2	; 0x02
   165c8:	93 81       	ldd	r25, Z+3	; 0x03
   165ca:	0e 94 e8 83 	call	0x107d0	; 0x107d0 <dbf_open_read>
   165ce:	7c 01       	movw	r14, r24
   165d0:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   165d4:	86 ff       	sbrs	r24, 6
   165d6:	04 c0       	rjmp	.+8      	; 0x165e0 <amigo_buffered_read+0x76>
   165d8:	81 e6       	ldi	r24, 0x61	; 97
   165da:	90 e1       	ldi	r25, 0x10	; 16
   165dc:	0e 94 a8 84 	call	0x10950	; 0x10950 <gpib_timer_elapsed_end>
   165e0:	e0 91 2f 19 	lds	r30, 0x192F	; 0x80192f <AMIGOp>
   165e4:	f0 91 30 19 	lds	r31, 0x1930	; 0x801930 <AMIGOp+0x1>
   165e8:	86 81       	ldd	r24, Z+6	; 0x06
   165ea:	97 81       	ldd	r25, Z+7	; 0x07
   165ec:	e8 16       	cp	r14, r24
   165ee:	f9 06       	cpc	r15, r25
   165f0:	39 f0       	breq	.+14     	; 0x16600 <amigo_buffered_read+0x96>
   165f2:	e0 91 2d 19 	lds	r30, 0x192D	; 0x80192d <AMIGOs>
   165f6:	f0 91 2e 19 	lds	r31, 0x192E	; 0x80192e <AMIGOs+0x1>
   165fa:	81 e0       	ldi	r24, 0x01	; 1
   165fc:	86 83       	std	Z+6, r24	; 0x06
   165fe:	6c c0       	rjmp	.+216    	; 0x166d8 <amigo_buffered_read+0x16e>
   16600:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16604:	87 fd       	sbrc	r24, 7
   16606:	0e 94 96 84 	call	0x1092c	; 0x1092c <gpib_timer_elapsed_begin>
   1660a:	80 e0       	ldi	r24, 0x00	; 0
   1660c:	91 e0       	ldi	r25, 0x01	; 1
   1660e:	9d 83       	std	Y+5, r25	; 0x05
   16610:	8c 83       	std	Y+4, r24	; 0x04
   16612:	e0 91 2f 19 	lds	r30, 0x192F	; 0x80192f <AMIGOp>
   16616:	f0 91 30 19 	lds	r31, 0x1930	; 0x801930 <AMIGOp+0x1>
   1661a:	66 81       	ldd	r22, Z+6	; 0x06
   1661c:	77 81       	ldd	r23, Z+7	; 0x07
   1661e:	ae 01       	movw	r20, r28
   16620:	4c 5f       	subi	r20, 0xFC	; 252
   16622:	5f 4f       	sbci	r21, 0xFF	; 255
   16624:	8e ea       	ldi	r24, 0xAE	; 174
   16626:	9c e1       	ldi	r25, 0x1C	; 28
   16628:	0e 94 b2 8a 	call	0x11564	; 0x11564 <gpib_write_str>
   1662c:	7c 01       	movw	r14, r24
   1662e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16632:	87 ff       	sbrs	r24, 7
   16634:	04 c0       	rjmp	.+8      	; 0x1663e <amigo_buffered_read+0xd4>
   16636:	8d e7       	ldi	r24, 0x7D	; 125
   16638:	95 e1       	ldi	r25, 0x15	; 21
   1663a:	0e 94 a8 84 	call	0x10950	; 0x10950 <gpib_timer_elapsed_end>
   1663e:	8c 81       	ldd	r24, Y+4	; 0x04
   16640:	9d 81       	ldd	r25, Y+5	; 0x05
   16642:	88 27       	eor	r24, r24
   16644:	90 7d       	andi	r25, 0xD0	; 208
   16646:	89 2b       	or	r24, r25
   16648:	49 f4       	brne	.+18     	; 0x1665c <amigo_buffered_read+0xf2>
   1664a:	e0 91 2f 19 	lds	r30, 0x192F	; 0x80192f <AMIGOp>
   1664e:	f0 91 30 19 	lds	r31, 0x1930	; 0x801930 <AMIGOp+0x1>
   16652:	86 81       	ldd	r24, Z+6	; 0x06
   16654:	97 81       	ldd	r25, Z+7	; 0x07
   16656:	e8 16       	cp	r14, r24
   16658:	f9 06       	cpc	r15, r25
   1665a:	31 f1       	breq	.+76     	; 0x166a8 <amigo_buffered_read+0x13e>
   1665c:	e0 91 2d 19 	lds	r30, 0x192D	; 0x80192d <AMIGOs>
   16660:	f0 91 2e 19 	lds	r31, 0x192E	; 0x80192e <AMIGOs+0x1>
   16664:	81 e0       	ldi	r24, 0x01	; 1
   16666:	86 83       	std	Z+6, r24	; 0x06
   16668:	87 81       	ldd	r24, Z+7	; 0x07
   1666a:	90 85       	ldd	r25, Z+8	; 0x08
   1666c:	80 62       	ori	r24, 0x20	; 32
   1666e:	90 87       	std	Z+8, r25	; 0x08
   16670:	87 83       	std	Z+7, r24	; 0x07
   16672:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16676:	81 ff       	sbrs	r24, 1
   16678:	0a c0       	rjmp	.+20     	; 0x1668e <amigo_buffered_read+0x124>
   1667a:	8b e0       	ldi	r24, 0x0B	; 11
   1667c:	9b e2       	ldi	r25, 0x2B	; 43
   1667e:	a0 e0       	ldi	r26, 0x00	; 0
   16680:	ed b7       	in	r30, 0x3d	; 61
   16682:	fe b7       	in	r31, 0x3e	; 62
   16684:	81 83       	std	Z+1, r24	; 0x01
   16686:	92 83       	std	Z+2, r25	; 0x02
   16688:	a3 83       	std	Z+3, r26	; 0x03
   1668a:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   1668e:	e0 91 2f 19 	lds	r30, 0x192F	; 0x80192f <AMIGOp>
   16692:	f0 91 30 19 	lds	r31, 0x1930	; 0x801930 <AMIGOp+0x1>
   16696:	81 81       	ldd	r24, Z+1	; 0x01
   16698:	90 e0       	ldi	r25, 0x00	; 0
   1669a:	0e 94 58 85 	call	0x10ab0	; 0x10ab0 <gpib_enable_PPR>
   1669e:	8c 81       	ldd	r24, Y+4	; 0x04
   166a0:	9d 81       	ldd	r25, Y+5	; 0x05
   166a2:	88 27       	eor	r24, r24
   166a4:	90 7d       	andi	r25, 0xD0	; 208
   166a6:	1a c0       	rjmp	.+52     	; 0x166dc <amigo_buffered_read+0x172>
   166a8:	8f e6       	ldi	r24, 0x6F	; 111
   166aa:	95 e1       	ldi	r25, 0x15	; 21
   166ac:	d9 dd       	rcall	.-1102   	; 0x16260 <amigo_increment>
   166ae:	89 2b       	or	r24, r25
   166b0:	59 f0       	breq	.+22     	; 0x166c8 <amigo_buffered_read+0x15e>
   166b2:	e0 91 2d 19 	lds	r30, 0x192D	; 0x80192d <AMIGOs>
   166b6:	f0 91 2e 19 	lds	r31, 0x192E	; 0x80192e <AMIGOs+0x1>
   166ba:	81 e0       	ldi	r24, 0x01	; 1
   166bc:	86 83       	std	Z+6, r24	; 0x06
   166be:	87 81       	ldd	r24, Z+7	; 0x07
   166c0:	90 85       	ldd	r25, Z+8	; 0x08
   166c2:	84 60       	ori	r24, 0x04	; 4
   166c4:	90 87       	std	Z+8, r25	; 0x08
   166c6:	87 83       	std	Z+7, r24	; 0x07
   166c8:	e0 91 2f 19 	lds	r30, 0x192F	; 0x80192f <AMIGOp>
   166cc:	f0 91 30 19 	lds	r31, 0x1930	; 0x801930 <AMIGOp+0x1>
   166d0:	81 81       	ldd	r24, Z+1	; 0x01
   166d2:	90 e0       	ldi	r25, 0x00	; 0
   166d4:	0e 94 58 85 	call	0x10ab0	; 0x10ab0 <gpib_enable_PPR>
   166d8:	80 e0       	ldi	r24, 0x00	; 0
   166da:	90 e0       	ldi	r25, 0x00	; 0
   166dc:	0f 90       	pop	r0
   166de:	0f 90       	pop	r0
   166e0:	0f 90       	pop	r0
   166e2:	0f 90       	pop	r0
   166e4:	0f 90       	pop	r0
   166e6:	df 91       	pop	r29
   166e8:	cf 91       	pop	r28
   166ea:	1f 91       	pop	r17
   166ec:	0f 91       	pop	r16
   166ee:	ff 90       	pop	r15
   166f0:	ef 90       	pop	r14
   166f2:	bf 90       	pop	r11
   166f4:	af 90       	pop	r10
   166f6:	9f 90       	pop	r9
   166f8:	8f 90       	pop	r8
   166fa:	08 95       	ret

000166fc <amigo_buffered_write>:
   166fc:	8f 92       	push	r8
   166fe:	9f 92       	push	r9
   16700:	af 92       	push	r10
   16702:	bf 92       	push	r11
   16704:	ef 92       	push	r14
   16706:	ff 92       	push	r15
   16708:	0f 93       	push	r16
   1670a:	1f 93       	push	r17
   1670c:	cf 93       	push	r28
   1670e:	df 93       	push	r29
   16710:	00 d0       	rcall	.+0      	; 0x16712 <amigo_buffered_write+0x16>
   16712:	00 d0       	rcall	.+0      	; 0x16714 <amigo_buffered_write+0x18>
   16714:	1f 92       	push	r1
   16716:	cd b7       	in	r28, 0x3d	; 61
   16718:	de b7       	in	r29, 0x3e	; 62
   1671a:	68 e8       	ldi	r22, 0x88	; 136
   1671c:	75 e1       	ldi	r23, 0x15	; 21
   1671e:	80 91 2d 19 	lds	r24, 0x192D	; 0x80192d <AMIGOs>
   16722:	90 91 2e 19 	lds	r25, 0x192E	; 0x80192e <AMIGOs+0x1>
   16726:	bd db       	rcall	.-2182   	; 0x15ea2 <amigo_chs_to_logical>
   16728:	4b 01       	movw	r8, r22
   1672a:	5c 01       	movw	r10, r24
   1672c:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16730:	87 fd       	sbrc	r24, 7
   16732:	0e 94 96 84 	call	0x1092c	; 0x1092c <gpib_timer_elapsed_begin>
   16736:	1d 82       	std	Y+5, r1	; 0x05
   16738:	1c 82       	std	Y+4, r1	; 0x04
   1673a:	e0 91 2f 19 	lds	r30, 0x192F	; 0x80192f <AMIGOp>
   1673e:	f0 91 30 19 	lds	r31, 0x1930	; 0x801930 <AMIGOp+0x1>
   16742:	66 81       	ldd	r22, Z+6	; 0x06
   16744:	77 81       	ldd	r23, Z+7	; 0x07
   16746:	ae 01       	movw	r20, r28
   16748:	4c 5f       	subi	r20, 0xFC	; 252
   1674a:	5f 4f       	sbci	r21, 0xFF	; 255
   1674c:	8e ea       	ldi	r24, 0xAE	; 174
   1674e:	9c e1       	ldi	r25, 0x1C	; 28
   16750:	0e 94 10 8a 	call	0x11420	; 0x11420 <gpib_read_str>
   16754:	7c 01       	movw	r14, r24
   16756:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1675a:	87 ff       	sbrs	r24, 7
   1675c:	04 c0       	rjmp	.+8      	; 0x16766 <amigo_buffered_write+0x6a>
   1675e:	87 e9       	ldi	r24, 0x97	; 151
   16760:	95 e1       	ldi	r25, 0x15	; 21
   16762:	0e 94 a8 84 	call	0x10950	; 0x10950 <gpib_timer_elapsed_end>
   16766:	8c 81       	ldd	r24, Y+4	; 0x04
   16768:	9d 81       	ldd	r25, Y+5	; 0x05
   1676a:	88 27       	eor	r24, r24
   1676c:	90 7d       	andi	r25, 0xD0	; 208
   1676e:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   16772:	89 2b       	or	r24, r25
   16774:	49 f4       	brne	.+18     	; 0x16788 <amigo_buffered_write+0x8c>
   16776:	e0 91 2f 19 	lds	r30, 0x192F	; 0x80192f <AMIGOp>
   1677a:	f0 91 30 19 	lds	r31, 0x1930	; 0x801930 <AMIGOp+0x1>
   1677e:	86 81       	ldd	r24, Z+6	; 0x06
   16780:	97 81       	ldd	r25, Z+7	; 0x07
   16782:	e8 16       	cp	r14, r24
   16784:	f9 06       	cpc	r15, r25
   16786:	c1 f0       	breq	.+48     	; 0x167b8 <amigo_buffered_write+0xbc>
   16788:	e0 91 2d 19 	lds	r30, 0x192D	; 0x80192d <AMIGOs>
   1678c:	f0 91 2e 19 	lds	r31, 0x192E	; 0x80192e <AMIGOs+0x1>
   16790:	81 e0       	ldi	r24, 0x01	; 1
   16792:	86 83       	std	Z+6, r24	; 0x06
   16794:	87 81       	ldd	r24, Z+7	; 0x07
   16796:	90 85       	ldd	r25, Z+8	; 0x08
   16798:	80 62       	ori	r24, 0x20	; 32
   1679a:	90 87       	std	Z+8, r25	; 0x08
   1679c:	87 83       	std	Z+7, r24	; 0x07
   1679e:	21 ff       	sbrs	r18, 1
   167a0:	4e c0       	rjmp	.+156    	; 0x1683e <amigo_buffered_write+0x142>
   167a2:	8c ee       	ldi	r24, 0xEC	; 236
   167a4:	9a e2       	ldi	r25, 0x2A	; 42
   167a6:	a0 e0       	ldi	r26, 0x00	; 0
   167a8:	ed b7       	in	r30, 0x3d	; 61
   167aa:	fe b7       	in	r31, 0x3e	; 62
   167ac:	81 83       	std	Z+1, r24	; 0x01
   167ae:	92 83       	std	Z+2, r25	; 0x02
   167b0:	a3 83       	std	Z+3, r26	; 0x03
   167b2:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   167b6:	43 c0       	rjmp	.+134    	; 0x1683e <amigo_buffered_write+0x142>
   167b8:	26 fd       	sbrc	r18, 6
   167ba:	0e 94 96 84 	call	0x1092c	; 0x1092c <gpib_timer_elapsed_begin>
   167be:	e0 91 2f 19 	lds	r30, 0x192F	; 0x80192f <AMIGOp>
   167c2:	f0 91 30 19 	lds	r31, 0x1930	; 0x801930 <AMIGOp+0x1>
   167c6:	e0 90 2d 19 	lds	r14, 0x192D	; 0x80192d <AMIGOs>
   167ca:	f0 90 2e 19 	lds	r15, 0x192E	; 0x80192e <AMIGOs+0x1>
   167ce:	87 e0       	ldi	r24, 0x07	; 7
   167d0:	e8 0e       	add	r14, r24
   167d2:	f1 1c       	adc	r15, r1
   167d4:	06 81       	ldd	r16, Z+6	; 0x06
   167d6:	17 81       	ldd	r17, Z+7	; 0x07
   167d8:	2e ea       	ldi	r18, 0xAE	; 174
   167da:	3c e1       	ldi	r19, 0x1C	; 28
   167dc:	b5 01       	movw	r22, r10
   167de:	a4 01       	movw	r20, r8
   167e0:	82 81       	ldd	r24, Z+2	; 0x02
   167e2:	93 81       	ldd	r25, Z+3	; 0x03
   167e4:	0e 94 3f 84 	call	0x1087e	; 0x1087e <dbf_open_write>
   167e8:	7c 01       	movw	r14, r24
   167ea:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   167ee:	86 ff       	sbrs	r24, 6
   167f0:	04 c0       	rjmp	.+8      	; 0x167fa <amigo_buffered_write+0xfe>
   167f2:	86 e5       	ldi	r24, 0x56	; 86
   167f4:	90 e1       	ldi	r25, 0x10	; 16
   167f6:	0e 94 a8 84 	call	0x10950	; 0x10950 <gpib_timer_elapsed_end>
   167fa:	e0 91 2f 19 	lds	r30, 0x192F	; 0x80192f <AMIGOp>
   167fe:	f0 91 30 19 	lds	r31, 0x1930	; 0x801930 <AMIGOp+0x1>
   16802:	86 81       	ldd	r24, Z+6	; 0x06
   16804:	97 81       	ldd	r25, Z+7	; 0x07
   16806:	e8 16       	cp	r14, r24
   16808:	f9 06       	cpc	r15, r25
   1680a:	49 f0       	breq	.+18     	; 0x1681e <amigo_buffered_write+0x122>
   1680c:	e0 91 2d 19 	lds	r30, 0x192D	; 0x80192d <AMIGOs>
   16810:	f0 91 2e 19 	lds	r31, 0x192E	; 0x80192e <AMIGOs+0x1>
   16814:	81 e0       	ldi	r24, 0x01	; 1
   16816:	86 83       	std	Z+6, r24	; 0x06
   16818:	80 e0       	ldi	r24, 0x00	; 0
   1681a:	90 e0       	ldi	r25, 0x00	; 0
   1681c:	1c c0       	rjmp	.+56     	; 0x16856 <amigo_buffered_write+0x15a>
   1681e:	88 e8       	ldi	r24, 0x88	; 136
   16820:	95 e1       	ldi	r25, 0x15	; 21
   16822:	1e dd       	rcall	.-1476   	; 0x16260 <amigo_increment>
   16824:	89 2b       	or	r24, r25
   16826:	59 f0       	breq	.+22     	; 0x1683e <amigo_buffered_write+0x142>
   16828:	e0 91 2d 19 	lds	r30, 0x192D	; 0x80192d <AMIGOs>
   1682c:	f0 91 2e 19 	lds	r31, 0x192E	; 0x80192e <AMIGOs+0x1>
   16830:	81 e0       	ldi	r24, 0x01	; 1
   16832:	86 83       	std	Z+6, r24	; 0x06
   16834:	87 81       	ldd	r24, Z+7	; 0x07
   16836:	90 85       	ldd	r25, Z+8	; 0x08
   16838:	84 60       	ori	r24, 0x04	; 4
   1683a:	90 87       	std	Z+8, r25	; 0x08
   1683c:	87 83       	std	Z+7, r24	; 0x07
   1683e:	e0 91 2f 19 	lds	r30, 0x192F	; 0x80192f <AMIGOp>
   16842:	f0 91 30 19 	lds	r31, 0x1930	; 0x801930 <AMIGOp+0x1>
   16846:	81 81       	ldd	r24, Z+1	; 0x01
   16848:	90 e0       	ldi	r25, 0x00	; 0
   1684a:	0e 94 58 85 	call	0x10ab0	; 0x10ab0 <gpib_enable_PPR>
   1684e:	8c 81       	ldd	r24, Y+4	; 0x04
   16850:	9d 81       	ldd	r25, Y+5	; 0x05
   16852:	88 27       	eor	r24, r24
   16854:	90 7d       	andi	r25, 0xD0	; 208
   16856:	0f 90       	pop	r0
   16858:	0f 90       	pop	r0
   1685a:	0f 90       	pop	r0
   1685c:	0f 90       	pop	r0
   1685e:	0f 90       	pop	r0
   16860:	df 91       	pop	r29
   16862:	cf 91       	pop	r28
   16864:	1f 91       	pop	r17
   16866:	0f 91       	pop	r16
   16868:	ff 90       	pop	r15
   1686a:	ef 90       	pop	r14
   1686c:	bf 90       	pop	r11
   1686e:	af 90       	pop	r10
   16870:	9f 90       	pop	r9
   16872:	8f 90       	pop	r8
   16874:	08 95       	ret

00016876 <amigo_cmd_dsj>:
   16876:	a8 e0       	ldi	r26, 0x08	; 8
   16878:	b0 e0       	ldi	r27, 0x00	; 0
   1687a:	e1 e4       	ldi	r30, 0x41	; 65
   1687c:	f4 eb       	ldi	r31, 0xB4	; 180
   1687e:	0c 94 ee df 	jmp	0x1bfdc	; 0x1bfdc <__prologue_saves__+0x20>
   16882:	e0 91 2d 19 	lds	r30, 0x192D	; 0x80192d <AMIGOs>
   16886:	f0 91 2e 19 	lds	r31, 0x192E	; 0x80192e <AMIGOs+0x1>
   1688a:	86 81       	ldd	r24, Z+6	; 0x06
   1688c:	88 87       	std	Y+8, r24	; 0x08
   1688e:	80 e0       	ldi	r24, 0x00	; 0
   16890:	91 e0       	ldi	r25, 0x01	; 1
   16892:	9f 83       	std	Y+7, r25	; 0x07
   16894:	8e 83       	std	Y+6, r24	; 0x06
   16896:	ae 01       	movw	r20, r28
   16898:	4a 5f       	subi	r20, 0xFA	; 250
   1689a:	5f 4f       	sbci	r21, 0xFF	; 255
   1689c:	61 e0       	ldi	r22, 0x01	; 1
   1689e:	70 e0       	ldi	r23, 0x00	; 0
   168a0:	ce 01       	movw	r24, r28
   168a2:	08 96       	adiw	r24, 0x08	; 8
   168a4:	0e 94 b2 8a 	call	0x11564	; 0x11564 <gpib_write_str>
   168a8:	2e 81       	ldd	r18, Y+6	; 0x06
   168aa:	3f 81       	ldd	r19, Y+7	; 0x07
   168ac:	22 27       	eor	r18, r18
   168ae:	30 7d       	andi	r19, 0xD0	; 208
   168b0:	e0 91 2d 19 	lds	r30, 0x192D	; 0x80192d <AMIGOs>
   168b4:	f0 91 2e 19 	lds	r31, 0x192E	; 0x80192e <AMIGOs+0x1>
   168b8:	23 2b       	or	r18, r19
   168ba:	29 f0       	breq	.+10     	; 0x168c6 <amigo_cmd_dsj+0x50>
   168bc:	27 81       	ldd	r18, Z+7	; 0x07
   168be:	30 85       	ldd	r19, Z+8	; 0x08
   168c0:	20 62       	ori	r18, 0x20	; 32
   168c2:	30 87       	std	Z+8, r19	; 0x08
   168c4:	27 83       	std	Z+7, r18	; 0x07
   168c6:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   168ca:	01 97       	sbiw	r24, 0x01	; 1
   168cc:	c1 f0       	breq	.+48     	; 0x168fe <amigo_cmd_dsj+0x88>
   168ce:	81 e0       	ldi	r24, 0x01	; 1
   168d0:	86 83       	std	Z+6, r24	; 0x06
   168d2:	87 81       	ldd	r24, Z+7	; 0x07
   168d4:	90 85       	ldd	r25, Z+8	; 0x08
   168d6:	80 62       	ori	r24, 0x20	; 32
   168d8:	90 87       	std	Z+8, r25	; 0x08
   168da:	87 83       	std	Z+7, r24	; 0x07
   168dc:	21 ff       	sbrs	r18, 1
   168de:	0a c0       	rjmp	.+20     	; 0x168f4 <amigo_cmd_dsj+0x7e>
   168e0:	82 ed       	ldi	r24, 0xD2	; 210
   168e2:	9a e2       	ldi	r25, 0x2A	; 42
   168e4:	a0 e0       	ldi	r26, 0x00	; 0
   168e6:	ed b7       	in	r30, 0x3d	; 61
   168e8:	fe b7       	in	r31, 0x3e	; 62
   168ea:	81 83       	std	Z+1, r24	; 0x01
   168ec:	92 83       	std	Z+2, r25	; 0x02
   168ee:	a3 83       	std	Z+3, r26	; 0x03
   168f0:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   168f4:	8e 81       	ldd	r24, Y+6	; 0x06
   168f6:	9f 81       	ldd	r25, Y+7	; 0x07
   168f8:	88 27       	eor	r24, r24
   168fa:	90 7d       	andi	r25, 0xD0	; 208
   168fc:	19 c0       	rjmp	.+50     	; 0x16930 <amigo_cmd_dsj+0xba>
   168fe:	25 ff       	sbrs	r18, 5
   16900:	0e c0       	rjmp	.+28     	; 0x1691e <amigo_cmd_dsj+0xa8>
   16902:	86 81       	ldd	r24, Z+6	; 0x06
   16904:	90 e0       	ldi	r25, 0x00	; 0
   16906:	ed b7       	in	r30, 0x3d	; 61
   16908:	fe b7       	in	r31, 0x3e	; 62
   1690a:	95 83       	std	Z+5, r25	; 0x05
   1690c:	84 83       	std	Z+4, r24	; 0x04
   1690e:	85 ec       	ldi	r24, 0xC5	; 197
   16910:	9a e2       	ldi	r25, 0x2A	; 42
   16912:	a0 e0       	ldi	r26, 0x00	; 0
   16914:	81 83       	std	Z+1, r24	; 0x01
   16916:	92 83       	std	Z+2, r25	; 0x02
   16918:	a3 83       	std	Z+3, r26	; 0x03
   1691a:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   1691e:	e0 91 2d 19 	lds	r30, 0x192D	; 0x80192d <AMIGOs>
   16922:	f0 91 2e 19 	lds	r31, 0x192E	; 0x80192e <AMIGOs+0x1>
   16926:	16 82       	std	Z+6, r1	; 0x06
   16928:	10 86       	std	Z+8, r1	; 0x08
   1692a:	17 82       	std	Z+7, r1	; 0x07
   1692c:	80 e0       	ldi	r24, 0x00	; 0
   1692e:	90 e0       	ldi	r25, 0x00	; 0
   16930:	28 96       	adiw	r28, 0x08	; 8
   16932:	e2 e0       	ldi	r30, 0x02	; 2
   16934:	0c 94 0a e0 	jmp	0x1c014	; 0x1c014 <__epilogue_restores__+0x20>

00016938 <amigo_cmd_clear>:
   16938:	00 d0       	rcall	.+0      	; 0x1693a <amigo_cmd_clear+0x2>
   1693a:	1f 92       	push	r1
   1693c:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16940:	85 ff       	sbrs	r24, 5
   16942:	0a c0       	rjmp	.+20     	; 0x16958 <amigo_cmd_clear+0x20>
   16944:	86 eb       	ldi	r24, 0xB6	; 182
   16946:	9a e2       	ldi	r25, 0x2A	; 42
   16948:	a0 e0       	ldi	r26, 0x00	; 0
   1694a:	ed b7       	in	r30, 0x3d	; 61
   1694c:	fe b7       	in	r31, 0x3e	; 62
   1694e:	81 83       	std	Z+1, r24	; 0x01
   16950:	92 83       	std	Z+2, r25	; 0x02
   16952:	a3 83       	std	Z+3, r26	; 0x03
   16954:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   16958:	e0 91 2d 19 	lds	r30, 0x192D	; 0x80192d <AMIGOs>
   1695c:	f0 91 2e 19 	lds	r31, 0x192E	; 0x80192e <AMIGOs+0x1>
   16960:	15 82       	std	Z+5, r1	; 0x05
   16962:	14 82       	std	Z+4, r1	; 0x04
   16964:	13 82       	std	Z+3, r1	; 0x03
   16966:	16 82       	std	Z+6, r1	; 0x06
   16968:	10 86       	std	Z+8, r1	; 0x08
   1696a:	17 82       	std	Z+7, r1	; 0x07
   1696c:	e0 91 2f 19 	lds	r30, 0x192F	; 0x80192f <AMIGOp>
   16970:	f0 91 30 19 	lds	r31, 0x1930	; 0x801930 <AMIGOp+0x1>
   16974:	81 81       	ldd	r24, Z+1	; 0x01
   16976:	90 e0       	ldi	r25, 0x00	; 0
   16978:	0e 94 58 85 	call	0x10ab0	; 0x10ab0 <gpib_enable_PPR>
   1697c:	80 e0       	ldi	r24, 0x00	; 0
   1697e:	90 e0       	ldi	r25, 0x00	; 0
   16980:	0f 90       	pop	r0
   16982:	0f 90       	pop	r0
   16984:	0f 90       	pop	r0
   16986:	08 95       	ret

00016988 <amigo_todo_op>:
/// @param[in] opcode: GPIB data byte OP Code
/// @param[in] len: Length of GOIB data returned
/// @return  0

int amigo_todo_op(uint8_t secondary, uint8_t opcode, int len)
{
   16988:	af e0       	ldi	r26, 0x0F	; 15
   1698a:	b0 e0       	ldi	r27, 0x00	; 0
   1698c:	ea ec       	ldi	r30, 0xCA	; 202
   1698e:	f4 eb       	ldi	r31, 0xB4	; 180
   16990:	0c 94 ea df 	jmp	0x1bfd4	; 0x1bfd4 <__prologue_saves__+0x18>
   16994:	c8 2f       	mov	r28, r24
   16996:	e6 2e       	mov	r14, r22
   16998:	8a 01       	movw	r16, r20
    if(AMIGO_is_MLA(listening))
   1699a:	80 91 b4 1e 	lds	r24, 0x1EB4	; 0x801eb4 <listening>
   1699e:	90 e0       	ldi	r25, 0x00	; 0
   169a0:	0e 94 a7 8b 	call	0x1174e	; 0x1174e <AMIGO_is_MLA>
   169a4:	20 91 b2 1e 	lds	r18, 0x1EB2	; 0x801eb2 <talking>
   169a8:	f1 2c       	mov	r15, r1
   169aa:	d0 e0       	ldi	r29, 0x00	; 0
   169ac:	89 2b       	or	r24, r25
   169ae:	f1 f0       	breq	.+60     	; 0x169ec <amigo_todo_op+0x64>
        printf("[L   Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   169b0:	82 2f       	mov	r24, r18
   169b2:	90 e0       	ldi	r25, 0x00	; 0
   169b4:	ed b7       	in	r30, 0x3d	; 61
   169b6:	fe b7       	in	r31, 0x3e	; 62
   169b8:	97 87       	std	Z+15, r25	; 0x0f
   169ba:	86 87       	std	Z+14, r24	; 0x0e
   169bc:	80 91 b4 1e 	lds	r24, 0x1EB4	; 0x801eb4 <listening>
   169c0:	90 e0       	ldi	r25, 0x00	; 0
   169c2:	95 87       	std	Z+13, r25	; 0x0d
   169c4:	84 87       	std	Z+12, r24	; 0x0c
   169c6:	13 87       	std	Z+11, r17	; 0x0b
   169c8:	02 87       	std	Z+10, r16	; 0x0a
   169ca:	f1 86       	std	Z+9, r15	; 0x09
   169cc:	e0 86       	std	Z+8, r14	; 0x08
   169ce:	e0 91 2d 19 	lds	r30, 0x192D	; 0x80192d <AMIGOs>
   169d2:	f0 91 2e 19 	lds	r31, 0x192E	; 0x80192e <AMIGOs+0x1>
   169d6:	80 81       	ld	r24, Z
   169d8:	90 e0       	ldi	r25, 0x00	; 0
   169da:	ed b7       	in	r30, 0x3d	; 61
   169dc:	fe b7       	in	r31, 0x3e	; 62
   169de:	97 83       	std	Z+7, r25	; 0x07
   169e0:	86 83       	std	Z+6, r24	; 0x06
   169e2:	d5 83       	std	Z+5, r29	; 0x05
   169e4:	c4 83       	std	Z+4, r28	; 0x04
   169e6:	8f e4       	ldi	r24, 0x4F	; 79
   169e8:	9a e2       	ldi	r25, 0x2A	; 42
   169ea:	51 c0       	rjmp	.+162    	; 0x16a8e <amigo_todo_op+0x106>
            secondary, AMIGOs->state, opcode, len, listening, talking);
    else if(AMIGO_is_MTA(talking))
   169ec:	82 2f       	mov	r24, r18
   169ee:	90 e0       	ldi	r25, 0x00	; 0
   169f0:	0e 94 b8 8b 	call	0x11770	; 0x11770 <AMIGO_is_MTA>
   169f4:	20 91 b4 1e 	lds	r18, 0x1EB4	; 0x801eb4 <listening>
   169f8:	30 91 b2 1e 	lds	r19, 0x1EB2	; 0x801eb2 <talking>
   169fc:	a0 91 2d 19 	lds	r26, 0x192D	; 0x80192d <AMIGOs>
   16a00:	b0 91 2e 19 	lds	r27, 0x192E	; 0x80192e <AMIGOs+0x1>
   16a04:	89 2b       	or	r24, r25
   16a06:	b1 f0       	breq	.+44     	; 0x16a34 <amigo_todo_op+0xac>
        printf("[T   Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   16a08:	83 2f       	mov	r24, r19
   16a0a:	90 e0       	ldi	r25, 0x00	; 0
   16a0c:	ed b7       	in	r30, 0x3d	; 61
   16a0e:	fe b7       	in	r31, 0x3e	; 62
   16a10:	97 87       	std	Z+15, r25	; 0x0f
   16a12:	86 87       	std	Z+14, r24	; 0x0e
   16a14:	30 e0       	ldi	r19, 0x00	; 0
   16a16:	35 87       	std	Z+13, r19	; 0x0d
   16a18:	24 87       	std	Z+12, r18	; 0x0c
   16a1a:	13 87       	std	Z+11, r17	; 0x0b
   16a1c:	02 87       	std	Z+10, r16	; 0x0a
   16a1e:	f1 86       	std	Z+9, r15	; 0x09
   16a20:	e0 86       	std	Z+8, r14	; 0x08
   16a22:	8c 91       	ld	r24, X
   16a24:	90 e0       	ldi	r25, 0x00	; 0
   16a26:	97 83       	std	Z+7, r25	; 0x07
   16a28:	86 83       	std	Z+6, r24	; 0x06
   16a2a:	d5 83       	std	Z+5, r29	; 0x05
   16a2c:	c4 83       	std	Z+4, r28	; 0x04
   16a2e:	88 ee       	ldi	r24, 0xE8	; 232
   16a30:	99 e2       	ldi	r25, 0x29	; 41
   16a32:	2d c0       	rjmp	.+90     	; 0x16a8e <amigo_todo_op+0x106>
                secondary, AMIGOs->state, opcode, len, listening, talking);
    else if(talking == UNT)
   16a34:	3f 35       	cpi	r19, 0x5F	; 95
   16a36:	b1 f4       	brne	.+44     	; 0x16a64 <amigo_todo_op+0xdc>
        printf("[UNT Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   16a38:	8f e5       	ldi	r24, 0x5F	; 95
   16a3a:	90 e0       	ldi	r25, 0x00	; 0
   16a3c:	ed b7       	in	r30, 0x3d	; 61
   16a3e:	fe b7       	in	r31, 0x3e	; 62
   16a40:	97 87       	std	Z+15, r25	; 0x0f
   16a42:	86 87       	std	Z+14, r24	; 0x0e
   16a44:	30 e0       	ldi	r19, 0x00	; 0
   16a46:	35 87       	std	Z+13, r19	; 0x0d
   16a48:	24 87       	std	Z+12, r18	; 0x0c
   16a4a:	13 87       	std	Z+11, r17	; 0x0b
   16a4c:	02 87       	std	Z+10, r16	; 0x0a
   16a4e:	f1 86       	std	Z+9, r15	; 0x09
   16a50:	e0 86       	std	Z+8, r14	; 0x08
   16a52:	8c 91       	ld	r24, X
   16a54:	90 e0       	ldi	r25, 0x00	; 0
   16a56:	97 83       	std	Z+7, r25	; 0x07
   16a58:	86 83       	std	Z+6, r24	; 0x06
   16a5a:	d5 83       	std	Z+5, r29	; 0x05
   16a5c:	c4 83       	std	Z+4, r28	; 0x04
   16a5e:	81 e8       	ldi	r24, 0x81	; 129
   16a60:	99 e2       	ldi	r25, 0x29	; 41
   16a62:	15 c0       	rjmp	.+42     	; 0x16a8e <amigo_todo_op+0x106>
                secondary, AMIGOs->state, opcode, len, listening, talking);
    else
        printf("[U Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   16a64:	83 2f       	mov	r24, r19
   16a66:	90 e0       	ldi	r25, 0x00	; 0
   16a68:	ed b7       	in	r30, 0x3d	; 61
   16a6a:	fe b7       	in	r31, 0x3e	; 62
   16a6c:	97 87       	std	Z+15, r25	; 0x0f
   16a6e:	86 87       	std	Z+14, r24	; 0x0e
   16a70:	30 e0       	ldi	r19, 0x00	; 0
   16a72:	35 87       	std	Z+13, r19	; 0x0d
   16a74:	24 87       	std	Z+12, r18	; 0x0c
   16a76:	13 87       	std	Z+11, r17	; 0x0b
   16a78:	02 87       	std	Z+10, r16	; 0x0a
   16a7a:	f1 86       	std	Z+9, r15	; 0x09
   16a7c:	e0 86       	std	Z+8, r14	; 0x08
   16a7e:	8c 91       	ld	r24, X
   16a80:	90 e0       	ldi	r25, 0x00	; 0
   16a82:	97 83       	std	Z+7, r25	; 0x07
   16a84:	86 83       	std	Z+6, r24	; 0x06
   16a86:	d5 83       	std	Z+5, r29	; 0x05
   16a88:	c4 83       	std	Z+4, r28	; 0x04
   16a8a:	8c e1       	ldi	r24, 0x1C	; 28
   16a8c:	99 e2       	ldi	r25, 0x29	; 41
   16a8e:	a0 e0       	ldi	r26, 0x00	; 0
   16a90:	81 83       	std	Z+1, r24	; 0x01
   16a92:	92 83       	std	Z+2, r25	; 0x02
   16a94:	a3 83       	std	Z+3, r26	; 0x03
   16a96:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
            secondary, AMIGOs->state, opcode, len, listening, talking);
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   16a9a:	e0 91 2f 19 	lds	r30, 0x192F	; 0x80192f <AMIGOp>
   16a9e:	f0 91 30 19 	lds	r31, 0x1930	; 0x801930 <AMIGOp+0x1>
   16aa2:	81 81       	ldd	r24, Z+1	; 0x01
   16aa4:	90 e0       	ldi	r25, 0x00	; 0
   16aa6:	0e 94 58 85 	call	0x10ab0	; 0x10ab0 <gpib_enable_PPR>
    return(0);
}
   16aaa:	80 e0       	ldi	r24, 0x00	; 0
   16aac:	90 e0       	ldi	r25, 0x00	; 0
   16aae:	cd b7       	in	r28, 0x3d	; 61
   16ab0:	de b7       	in	r29, 0x3e	; 62
   16ab2:	2f 96       	adiw	r28, 0x0f	; 15
   16ab4:	e6 e0       	ldi	r30, 0x06	; 6
   16ab6:	0c 94 06 e0 	jmp	0x1c00c	; 0x1c00c <__epilogue_restores__+0x18>

00016aba <amigo_todo>:
/// @param[in] secondary: GPIB seconday command
///
/// @return  0

int amigo_todo(uint8_t secondary)
{
   16aba:	ab e0       	ldi	r26, 0x0B	; 11
   16abc:	b0 e0       	ldi	r27, 0x00	; 0
   16abe:	e3 e6       	ldi	r30, 0x63	; 99
   16ac0:	f5 eb       	ldi	r31, 0xB5	; 181
   16ac2:	0c 94 ee df 	jmp	0x1bfdc	; 0x1bfdc <__prologue_saves__+0x20>
   16ac6:	c8 2f       	mov	r28, r24
    if(AMIGO_is_MLA(listening))
   16ac8:	80 91 b4 1e 	lds	r24, 0x1EB4	; 0x801eb4 <listening>
   16acc:	90 e0       	ldi	r25, 0x00	; 0
   16ace:	0e 94 a7 8b 	call	0x1174e	; 0x1174e <AMIGO_is_MLA>
   16ad2:	20 91 b2 1e 	lds	r18, 0x1EB2	; 0x801eb2 <talking>
   16ad6:	d0 e0       	ldi	r29, 0x00	; 0
   16ad8:	89 2b       	or	r24, r25
   16ada:	d1 f0       	breq	.+52     	; 0x16b10 <amigo_todo+0x56>
        printf("[L   Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   16adc:	82 2f       	mov	r24, r18
   16ade:	90 e0       	ldi	r25, 0x00	; 0
   16ae0:	ed b7       	in	r30, 0x3d	; 61
   16ae2:	fe b7       	in	r31, 0x3e	; 62
   16ae4:	93 87       	std	Z+11, r25	; 0x0b
   16ae6:	82 87       	std	Z+10, r24	; 0x0a
   16ae8:	80 91 b4 1e 	lds	r24, 0x1EB4	; 0x801eb4 <listening>
   16aec:	90 e0       	ldi	r25, 0x00	; 0
   16aee:	91 87       	std	Z+9, r25	; 0x09
   16af0:	80 87       	std	Z+8, r24	; 0x08
   16af2:	e0 91 2d 19 	lds	r30, 0x192D	; 0x80192d <AMIGOs>
   16af6:	f0 91 2e 19 	lds	r31, 0x192E	; 0x80192e <AMIGOs+0x1>
   16afa:	80 81       	ld	r24, Z
   16afc:	90 e0       	ldi	r25, 0x00	; 0
   16afe:	ed b7       	in	r30, 0x3d	; 61
   16b00:	fe b7       	in	r31, 0x3e	; 62
   16b02:	97 83       	std	Z+7, r25	; 0x07
   16b04:	86 83       	std	Z+6, r24	; 0x06
   16b06:	d5 83       	std	Z+5, r29	; 0x05
   16b08:	c4 83       	std	Z+4, r28	; 0x04
   16b0a:	8c ec       	ldi	r24, 0xCC	; 204
   16b0c:	98 e2       	ldi	r25, 0x28	; 40
   16b0e:	43 c0       	rjmp	.+134    	; 0x16b96 <amigo_todo+0xdc>
            secondary,AMIGOs->state,listening,talking);
    else if(AMIGO_is_MTA(talking))
   16b10:	82 2f       	mov	r24, r18
   16b12:	90 e0       	ldi	r25, 0x00	; 0
   16b14:	0e 94 b8 8b 	call	0x11770	; 0x11770 <AMIGO_is_MTA>
   16b18:	20 91 b4 1e 	lds	r18, 0x1EB4	; 0x801eb4 <listening>
   16b1c:	40 91 b2 1e 	lds	r20, 0x1EB2	; 0x801eb2 <talking>
   16b20:	a0 91 2d 19 	lds	r26, 0x192D	; 0x80192d <AMIGOs>
   16b24:	b0 91 2e 19 	lds	r27, 0x192E	; 0x80192e <AMIGOs+0x1>
   16b28:	89 2b       	or	r24, r25
   16b2a:	89 f0       	breq	.+34     	; 0x16b4e <amigo_todo+0x94>
        printf("[T   Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   16b2c:	50 e0       	ldi	r21, 0x00	; 0
   16b2e:	ed b7       	in	r30, 0x3d	; 61
   16b30:	fe b7       	in	r31, 0x3e	; 62
   16b32:	53 87       	std	Z+11, r21	; 0x0b
   16b34:	42 87       	std	Z+10, r20	; 0x0a
   16b36:	30 e0       	ldi	r19, 0x00	; 0
   16b38:	31 87       	std	Z+9, r19	; 0x09
   16b3a:	20 87       	std	Z+8, r18	; 0x08
   16b3c:	8c 91       	ld	r24, X
   16b3e:	90 e0       	ldi	r25, 0x00	; 0
   16b40:	97 83       	std	Z+7, r25	; 0x07
   16b42:	86 83       	std	Z+6, r24	; 0x06
   16b44:	d5 83       	std	Z+5, r29	; 0x05
   16b46:	c4 83       	std	Z+4, r28	; 0x04
   16b48:	8c e7       	ldi	r24, 0x7C	; 124
   16b4a:	98 e2       	ldi	r25, 0x28	; 40
   16b4c:	24 c0       	rjmp	.+72     	; 0x16b96 <amigo_todo+0xdc>
                secondary,AMIGOs->state,listening,talking);
    else if(talking == UNT)
   16b4e:	4f 35       	cpi	r20, 0x5F	; 95
   16b50:	91 f4       	brne	.+36     	; 0x16b76 <amigo_todo+0xbc>
        printf("[UNT Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   16b52:	8f e5       	ldi	r24, 0x5F	; 95
   16b54:	90 e0       	ldi	r25, 0x00	; 0
   16b56:	ed b7       	in	r30, 0x3d	; 61
   16b58:	fe b7       	in	r31, 0x3e	; 62
   16b5a:	93 87       	std	Z+11, r25	; 0x0b
   16b5c:	82 87       	std	Z+10, r24	; 0x0a
   16b5e:	30 e0       	ldi	r19, 0x00	; 0
   16b60:	31 87       	std	Z+9, r19	; 0x09
   16b62:	20 87       	std	Z+8, r18	; 0x08
   16b64:	8c 91       	ld	r24, X
   16b66:	90 e0       	ldi	r25, 0x00	; 0
   16b68:	97 83       	std	Z+7, r25	; 0x07
   16b6a:	86 83       	std	Z+6, r24	; 0x06
   16b6c:	d5 83       	std	Z+5, r29	; 0x05
   16b6e:	c4 83       	std	Z+4, r28	; 0x04
   16b70:	8c e2       	ldi	r24, 0x2C	; 44
   16b72:	98 e2       	ldi	r25, 0x28	; 40
   16b74:	10 c0       	rjmp	.+32     	; 0x16b96 <amigo_todo+0xdc>
                secondary,AMIGOs->state,listening,talking);
    else
        printf("[E   Amigo ERROR secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   16b76:	50 e0       	ldi	r21, 0x00	; 0
   16b78:	ed b7       	in	r30, 0x3d	; 61
   16b7a:	fe b7       	in	r31, 0x3e	; 62
   16b7c:	53 87       	std	Z+11, r21	; 0x0b
   16b7e:	42 87       	std	Z+10, r20	; 0x0a
   16b80:	30 e0       	ldi	r19, 0x00	; 0
   16b82:	31 87       	std	Z+9, r19	; 0x09
   16b84:	20 87       	std	Z+8, r18	; 0x08
   16b86:	8c 91       	ld	r24, X
   16b88:	90 e0       	ldi	r25, 0x00	; 0
   16b8a:	97 83       	std	Z+7, r25	; 0x07
   16b8c:	86 83       	std	Z+6, r24	; 0x06
   16b8e:	d5 83       	std	Z+5, r29	; 0x05
   16b90:	c4 83       	std	Z+4, r28	; 0x04
   16b92:	8b ed       	ldi	r24, 0xDB	; 219
   16b94:	97 e2       	ldi	r25, 0x27	; 39
   16b96:	a0 e0       	ldi	r26, 0x00	; 0
   16b98:	81 83       	std	Z+1, r24	; 0x01
   16b9a:	92 83       	std	Z+2, r25	; 0x02
   16b9c:	a3 83       	std	Z+3, r26	; 0x03
   16b9e:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
            secondary,AMIGOs->state,listening,talking);
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   16ba2:	e0 91 2f 19 	lds	r30, 0x192F	; 0x80192f <AMIGOp>
   16ba6:	f0 91 30 19 	lds	r31, 0x1930	; 0x801930 <AMIGOp+0x1>
   16baa:	81 81       	ldd	r24, Z+1	; 0x01
   16bac:	90 e0       	ldi	r25, 0x00	; 0
   16bae:	0e 94 58 85 	call	0x10ab0	; 0x10ab0 <gpib_enable_PPR>
    return(0);
}
   16bb2:	80 e0       	ldi	r24, 0x00	; 0
   16bb4:	90 e0       	ldi	r25, 0x00	; 0
   16bb6:	cd b7       	in	r28, 0x3d	; 61
   16bb8:	de b7       	in	r29, 0x3e	; 62
   16bba:	2b 96       	adiw	r28, 0x0b	; 11
   16bbc:	e2 e0       	ldi	r30, 0x02	; 2
   16bbe:	0c 94 0a e0 	jmp	0x1c014	; 0x1c014 <__epilogue_restores__+0x20>

00016bc2 <amigo_check_unit>:
/// @brief  Amigo Check Valid unit
/// @param[in] unit: unit to set
/// @return void
void amigo_check_unit(uint8_t unit)
{
    if(unit != 15)
   16bc2:	8f 30       	cpi	r24, 0x0F	; 15
   16bc4:	29 f0       	breq	.+10     	; 0x16bd0 <amigo_check_unit+0xe>
        AMIGOs->unitNO = unit;
   16bc6:	e0 91 2d 19 	lds	r30, 0x192D	; 0x80192d <AMIGOs>
   16bca:	f0 91 2e 19 	lds	r31, 0x192E	; 0x80192e <AMIGOs+0x1>
   16bce:	81 83       	std	Z+1, r24	; 0x01
    if(AMIGOs->unitNO != 0)
   16bd0:	e0 91 2d 19 	lds	r30, 0x192D	; 0x80192d <AMIGOs>
   16bd4:	f0 91 2e 19 	lds	r31, 0x192E	; 0x80192e <AMIGOs+0x1>
   16bd8:	81 81       	ldd	r24, Z+1	; 0x01
   16bda:	88 23       	and	r24, r24
   16bdc:	29 f0       	breq	.+10     	; 0x16be8 <amigo_check_unit+0x26>
        AMIGOs->Errors |= ERR_UNIT;
   16bde:	87 81       	ldd	r24, Z+7	; 0x07
   16be0:	90 85       	ldd	r25, Z+8	; 0x08
   16be2:	80 64       	ori	r24, 0x40	; 64
   16be4:	90 87       	std	Z+8, r25	; 0x08
   16be6:	87 83       	std	Z+7, r24	; 0x07
   16be8:	08 95       	ret

00016bea <Amigo_Command>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list)

int Amigo_Command( int secondary )
{
   16bea:	ac e1       	ldi	r26, 0x1C	; 28
   16bec:	b0 e0       	ldi	r27, 0x00	; 0
   16bee:	eb ef       	ldi	r30, 0xFB	; 251
   16bf0:	f5 eb       	ldi	r31, 0xB5	; 181
   16bf2:	0c 94 ea df 	jmp	0x1bfd4	; 0x1bfd4 <__prologue_saves__+0x18>
   16bf6:	7c 01       	movw	r14, r24
    uint8_t *ptr;
    uint16_t status;                              // Current status
    UINT len;                                     // Size of Data/Op Codes/Parameters read in bytes

#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16bf8:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16bfc:	85 ff       	sbrs	r24, 5
   16bfe:	16 c0       	rjmp	.+44     	; 0x16c2c <Amigo_Command+0x42>
        printf("[AMIGO Command(%02XH): listen:%02XH, talk:%02XH]\n",
   16c00:	80 91 b2 1e 	lds	r24, 0x1EB2	; 0x801eb2 <talking>
   16c04:	90 e0       	ldi	r25, 0x00	; 0
   16c06:	ed b7       	in	r30, 0x3d	; 61
   16c08:	fe b7       	in	r31, 0x3e	; 62
   16c0a:	91 87       	std	Z+9, r25	; 0x09
   16c0c:	80 87       	std	Z+8, r24	; 0x08
   16c0e:	80 91 b4 1e 	lds	r24, 0x1EB4	; 0x801eb4 <listening>
   16c12:	90 e0       	ldi	r25, 0x00	; 0
   16c14:	97 83       	std	Z+7, r25	; 0x07
   16c16:	86 83       	std	Z+6, r24	; 0x06
   16c18:	f5 82       	std	Z+5, r15	; 0x05
   16c1a:	e4 82       	std	Z+4, r14	; 0x04
   16c1c:	89 ea       	ldi	r24, 0xA9	; 169
   16c1e:	97 e2       	ldi	r25, 0x27	; 39
   16c20:	a0 e0       	ldi	r26, 0x00	; 0
   16c22:	81 83       	std	Z+1, r24	; 0x01
   16c24:	92 83       	std	Z+2, r25	; 0x02
   16c26:	a3 83       	std	Z+3, r26	; 0x03
   16c28:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
            secondary, listening, talking);
#endif

///  Reference: A14
    if (secondary == 0x7e && AMIGO_is_MTA(talking))
   16c2c:	fe e7       	ldi	r31, 0x7E	; 126
   16c2e:	ef 16       	cp	r14, r31
   16c30:	f1 04       	cpc	r15, r1
   16c32:	f1 f5       	brne	.+124    	; 0x16cb0 <Amigo_Command+0xc6>
   16c34:	80 91 b2 1e 	lds	r24, 0x1EB2	; 0x801eb2 <talking>
   16c38:	90 e0       	ldi	r25, 0x00	; 0
   16c3a:	0e 94 b8 8b 	call	0x11770	; 0x11770 <AMIGO_is_MTA>
   16c3e:	89 2b       	or	r24, r25
   16c40:	09 f4       	brne	.+2      	; 0x16c44 <Amigo_Command+0x5a>
   16c42:	86 c0       	rjmp	.+268    	; 0x16d50 <Amigo_Command+0x166>
    {
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   16c44:	e0 91 2f 19 	lds	r30, 0x192F	; 0x80192f <AMIGOp>
   16c48:	f0 91 30 19 	lds	r31, 0x1930	; 0x801930 <AMIGOp+0x1>
   16c4c:	81 81       	ldd	r24, Z+1	; 0x01
   16c4e:	90 e0       	ldi	r25, 0x00	; 0
   16c50:	0e 94 8e 85 	call	0x10b1c	; 0x10b1c <gpib_disable_PPR>
        status = EOI_FLAG;
   16c54:	80 e0       	ldi	r24, 0x00	; 0
   16c56:	91 e0       	ldi	r25, 0x01	; 1
   16c58:	9c 8f       	std	Y+28, r25	; 0x1c
   16c5a:	8b 8f       	std	Y+27, r24	; 0x1b
        len = gpib_write_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   16c5c:	ae 01       	movw	r20, r28
   16c5e:	45 5e       	subi	r20, 0xE5	; 229
   16c60:	5f 4f       	sbci	r21, 0xFF	; 255
   16c62:	60 e0       	ldi	r22, 0x00	; 0
   16c64:	72 e0       	ldi	r23, 0x02	; 2
   16c66:	8e ea       	ldi	r24, 0xAE	; 174
   16c68:	9c e1       	ldi	r25, 0x1C	; 28
   16c6a:	0e 94 b2 8a 	call	0x11564	; 0x11564 <gpib_write_str>
        gpib_enable_PPR(AMIGOp->HEADER.PPR);
   16c6e:	e0 91 2f 19 	lds	r30, 0x192F	; 0x80192f <AMIGOp>
   16c72:	f0 91 30 19 	lds	r31, 0x1930	; 0x801930 <AMIGOp+0x1>
   16c76:	81 81       	ldd	r24, Z+1	; 0x01
   16c78:	90 e0       	ldi	r25, 0x00	; 0
   16c7a:	0e 94 58 85 	call	0x10ab0	; 0x10ab0 <gpib_enable_PPR>
        if(status & ERROR_MASK)
   16c7e:	8b 8d       	ldd	r24, Y+27	; 0x1b
   16c80:	9c 8d       	ldd	r25, Y+28	; 0x1c
   16c82:	88 27       	eor	r24, r24
   16c84:	90 7d       	andi	r25, 0xD0	; 208
   16c86:	89 2b       	or	r24, r25
   16c88:	09 f4       	brne	.+2      	; 0x16c8c <Amigo_Command+0xa2>
   16c8a:	87 c2       	rjmp	.+1294   	; 0x1719a <Amigo_Command+0x5b0>
        {
            AMIGOs->dsj = 1;
   16c8c:	e0 91 2d 19 	lds	r30, 0x192D	; 0x80192d <AMIGOs>
   16c90:	f0 91 2e 19 	lds	r31, 0x192E	; 0x80192e <AMIGOs+0x1>
   16c94:	81 e0       	ldi	r24, 0x01	; 1
   16c96:	86 83       	std	Z+6, r24	; 0x06
            AMIGOs->Errors |= ERR_GPIB;
   16c98:	87 81       	ldd	r24, Z+7	; 0x07
   16c9a:	90 85       	ldd	r25, Z+8	; 0x08
   16c9c:	80 62       	ori	r24, 0x20	; 32
   16c9e:	90 87       	std	Z+8, r25	; 0x08
   16ca0:	87 83       	std	Z+7, r24	; 0x07
            if(debuglevel & GPIB_PPR)
   16ca2:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16ca6:	81 ff       	sbrs	r24, 1
   16ca8:	78 c2       	rjmp	.+1264   	; 0x1719a <Amigo_Command+0x5b0>
                printf("[AMIGO_Command:GPIB write error]\n");
   16caa:	87 e8       	ldi	r24, 0x87	; 135
   16cac:	97 e2       	ldi	r25, 0x27	; 39
   16cae:	8e c0       	rjmp	.+284    	; 0x16dcc <Amigo_Command+0x1e2>
        }
        return(status & ERROR_MASK);
    }

///  Reference: A25
    if (secondary == 0x7f && AMIGO_is_MLA(listening))
   16cb0:	ff e7       	ldi	r31, 0x7F	; 127
   16cb2:	ef 16       	cp	r14, r31
   16cb4:	f1 04       	cpc	r15, r1
   16cb6:	09 f0       	breq	.+2      	; 0x16cba <Amigo_Command+0xd0>
   16cb8:	4b c0       	rjmp	.+150    	; 0x16d50 <Amigo_Command+0x166>
   16cba:	80 91 b4 1e 	lds	r24, 0x1EB4	; 0x801eb4 <listening>
   16cbe:	90 e0       	ldi	r25, 0x00	; 0
   16cc0:	0e 94 a7 8b 	call	0x1174e	; 0x1174e <AMIGO_is_MLA>
   16cc4:	89 2b       	or	r24, r25
   16cc6:	09 f4       	brne	.+2      	; 0x16cca <Amigo_Command+0xe0>
   16cc8:	43 c0       	rjmp	.+134    	; 0x16d50 <Amigo_Command+0x166>
    {
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   16cca:	e0 91 2f 19 	lds	r30, 0x192F	; 0x80192f <AMIGOp>
   16cce:	f0 91 30 19 	lds	r31, 0x1930	; 0x801930 <AMIGOp+0x1>
   16cd2:	81 81       	ldd	r24, Z+1	; 0x01
   16cd4:	90 e0       	ldi	r25, 0x00	; 0
   16cd6:	0e 94 8e 85 	call	0x10b1c	; 0x10b1c <gpib_disable_PPR>
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_TIMING)
   16cda:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16cde:	87 fd       	sbrc	r24, 7
            gpib_timer_elapsed_begin();
   16ce0:	0e 94 96 84 	call	0x1092c	; 0x1092c <gpib_timer_elapsed_begin>
#endif
        status = EOI_FLAG;
   16ce4:	80 e0       	ldi	r24, 0x00	; 0
   16ce6:	91 e0       	ldi	r25, 0x01	; 1
   16ce8:	9c 8f       	std	Y+28, r25	; 0x1c
   16cea:	8b 8f       	std	Y+27, r24	; 0x1b
        len = gpib_read_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   16cec:	ae 01       	movw	r20, r28
   16cee:	45 5e       	subi	r20, 0xE5	; 229
   16cf0:	5f 4f       	sbci	r21, 0xFF	; 255
   16cf2:	60 e0       	ldi	r22, 0x00	; 0
   16cf4:	72 e0       	ldi	r23, 0x02	; 2
   16cf6:	8e ea       	ldi	r24, 0xAE	; 174
   16cf8:	9c e1       	ldi	r25, 0x1C	; 28
   16cfa:	0e 94 10 8a 	call	0x11420	; 0x11420 <gpib_read_str>
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_TIMING)
   16cfe:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16d02:	87 ff       	sbrs	r24, 7
   16d04:	04 c0       	rjmp	.+8      	; 0x16d0e <Amigo_Command+0x124>
            gpib_timer_elapsed_end("GPIB read str");
   16d06:	87 e9       	ldi	r24, 0x97	; 151
   16d08:	95 e1       	ldi	r25, 0x15	; 21
   16d0a:	0e 94 a8 84 	call	0x10950	; 0x10950 <gpib_timer_elapsed_end>
#endif
        gpib_enable_PPR(AMIGOp->HEADER.PPR);
   16d0e:	e0 91 2f 19 	lds	r30, 0x192F	; 0x80192f <AMIGOp>
   16d12:	f0 91 30 19 	lds	r31, 0x1930	; 0x801930 <AMIGOp+0x1>
   16d16:	81 81       	ldd	r24, Z+1	; 0x01
   16d18:	90 e0       	ldi	r25, 0x00	; 0
   16d1a:	0e 94 58 85 	call	0x10ab0	; 0x10ab0 <gpib_enable_PPR>
        if(status & ERROR_MASK)
   16d1e:	8b 8d       	ldd	r24, Y+27	; 0x1b
   16d20:	9c 8d       	ldd	r25, Y+28	; 0x1c
   16d22:	88 27       	eor	r24, r24
   16d24:	90 7d       	andi	r25, 0xD0	; 208
   16d26:	89 2b       	or	r24, r25
   16d28:	09 f4       	brne	.+2      	; 0x16d2c <Amigo_Command+0x142>
   16d2a:	37 c2       	rjmp	.+1134   	; 0x1719a <Amigo_Command+0x5b0>
        {
            AMIGOs->dsj = 1;
   16d2c:	e0 91 2d 19 	lds	r30, 0x192D	; 0x80192d <AMIGOs>
   16d30:	f0 91 2e 19 	lds	r31, 0x192E	; 0x80192e <AMIGOs+0x1>
   16d34:	81 e0       	ldi	r24, 0x01	; 1
   16d36:	86 83       	std	Z+6, r24	; 0x06
            AMIGOs->Errors |= ERR_GPIB;
   16d38:	87 81       	ldd	r24, Z+7	; 0x07
   16d3a:	90 85       	ldd	r25, Z+8	; 0x08
   16d3c:	80 62       	ori	r24, 0x20	; 32
   16d3e:	90 87       	std	Z+8, r25	; 0x08
   16d40:	87 83       	std	Z+7, r24	; 0x07
            if(debuglevel & GPIB_PPR)
   16d42:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16d46:	81 ff       	sbrs	r24, 1
   16d48:	28 c2       	rjmp	.+1104   	; 0x1719a <Amigo_Command+0x5b0>
                printf("[AMIGO Command:GPIB read error]\n");
   16d4a:	86 e6       	ldi	r24, 0x66	; 102
   16d4c:	97 e2       	ldi	r25, 0x27	; 39
   16d4e:	3e c0       	rjmp	.+124    	; 0x16dcc <Amigo_Command+0x1e2>
        }
        return(status & ERROR_MASK);
    }

    if( !AMIGO_is_MLA(listening) || AMIGO_is_MTA(talking))
   16d50:	80 91 b4 1e 	lds	r24, 0x1EB4	; 0x801eb4 <listening>
   16d54:	90 e0       	ldi	r25, 0x00	; 0
   16d56:	0e 94 a7 8b 	call	0x1174e	; 0x1174e <AMIGO_is_MLA>
   16d5a:	89 2b       	or	r24, r25
   16d5c:	19 f4       	brne	.+6      	; 0x16d64 <Amigo_Command+0x17a>
        return(0);
   16d5e:	80 e0       	ldi	r24, 0x00	; 0
   16d60:	90 e0       	ldi	r25, 0x00	; 0
   16d62:	23 c2       	rjmp	.+1094   	; 0x171aa <Amigo_Command+0x5c0>
                printf("[AMIGO Command:GPIB read error]\n");
        }
        return(status & ERROR_MASK);
    }

    if( !AMIGO_is_MLA(listening) || AMIGO_is_MTA(talking))
   16d64:	80 91 b2 1e 	lds	r24, 0x1EB2	; 0x801eb2 <talking>
   16d68:	90 e0       	ldi	r25, 0x00	; 0
   16d6a:	0e 94 b8 8b 	call	0x11770	; 0x11770 <AMIGO_is_MTA>
   16d6e:	89 2b       	or	r24, r25
   16d70:	b1 f7       	brne	.-20     	; 0x16d5e <Amigo_Command+0x174>
        return(0);

    gpib_disable_PPR(AMIGOp->HEADER.PPR);
   16d72:	e0 91 2f 19 	lds	r30, 0x192F	; 0x80192f <AMIGOp>
   16d76:	f0 91 30 19 	lds	r31, 0x1930	; 0x801930 <AMIGOp+0x1>
   16d7a:	81 81       	ldd	r24, Z+1	; 0x01
   16d7c:	90 e0       	ldi	r25, 0x00	; 0
   16d7e:	0e 94 8e 85 	call	0x10b1c	; 0x10b1c <gpib_disable_PPR>


///  Note: the function will "unread" any commands and return
///  All Data MUST have EOI

    status = EOI_FLAG;
   16d82:	80 e0       	ldi	r24, 0x00	; 0
   16d84:	91 e0       	ldi	r25, 0x01	; 1
   16d86:	9c 8f       	std	Y+28, r25	; 0x1c
   16d88:	8b 8f       	std	Y+27, r24	; 0x1b
    len = gpib_read_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   16d8a:	ae 01       	movw	r20, r28
   16d8c:	45 5e       	subi	r20, 0xE5	; 229
   16d8e:	5f 4f       	sbci	r21, 0xFF	; 255
   16d90:	60 e0       	ldi	r22, 0x00	; 0
   16d92:	72 e0       	ldi	r23, 0x02	; 2
   16d94:	8e ea       	ldi	r24, 0xAE	; 174
   16d96:	9c e1       	ldi	r25, 0x1C	; 28
   16d98:	0e 94 10 8a 	call	0x11420	; 0x11420 <gpib_read_str>
   16d9c:	8c 01       	movw	r16, r24
    if(status & ERROR_MASK)
   16d9e:	8b 8d       	ldd	r24, Y+27	; 0x1b
   16da0:	9c 8d       	ldd	r25, Y+28	; 0x1c
   16da2:	88 27       	eor	r24, r24
   16da4:	90 7d       	andi	r25, 0xD0	; 208
   16da6:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   16daa:	89 2b       	or	r24, r25
   16dac:	c1 f0       	breq	.+48     	; 0x16dde <Amigo_Command+0x1f4>
    {
        AMIGOs->dsj = 1;
   16dae:	e0 91 2d 19 	lds	r30, 0x192D	; 0x80192d <AMIGOs>
   16db2:	f0 91 2e 19 	lds	r31, 0x192E	; 0x80192e <AMIGOs+0x1>
   16db6:	81 e0       	ldi	r24, 0x01	; 1
   16db8:	86 83       	std	Z+6, r24	; 0x06
        AMIGOs->Errors |= ERR_GPIB;
   16dba:	87 81       	ldd	r24, Z+7	; 0x07
   16dbc:	90 85       	ldd	r25, Z+8	; 0x08
   16dbe:	80 62       	ori	r24, 0x20	; 32
   16dc0:	90 87       	std	Z+8, r25	; 0x08
   16dc2:	87 83       	std	Z+7, r24	; 0x07
        if(debuglevel & GPIB_PPR)
   16dc4:	21 ff       	sbrs	r18, 1
   16dc6:	e9 c1       	rjmp	.+978    	; 0x1719a <Amigo_Command+0x5b0>
            printf("[AMIGO Command:GPIB read error]\n");
   16dc8:	85 e4       	ldi	r24, 0x45	; 69
   16dca:	97 e2       	ldi	r25, 0x27	; 39
   16dcc:	a0 e0       	ldi	r26, 0x00	; 0
   16dce:	ed b7       	in	r30, 0x3d	; 61
   16dd0:	fe b7       	in	r31, 0x3e	; 62
   16dd2:	81 83       	std	Z+1, r24	; 0x01
   16dd4:	92 83       	std	Z+2, r25	; 0x02
   16dd6:	a3 83       	std	Z+3, r26	; 0x03
   16dd8:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   16ddc:	de c1       	rjmp	.+956    	; 0x1719a <Amigo_Command+0x5b0>
        return(status & ERROR_MASK);
    }
#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16dde:	25 ff       	sbrs	r18, 5
   16de0:	0e c0       	rjmp	.+28     	; 0x16dfe <Amigo_Command+0x214>
        printf("[AMIGO Command(%02XH): GPIB read bytes:%02XH]\n",
   16de2:	ed b7       	in	r30, 0x3d	; 61
   16de4:	fe b7       	in	r31, 0x3e	; 62
   16de6:	17 83       	std	Z+7, r17	; 0x07
   16de8:	06 83       	std	Z+6, r16	; 0x06
   16dea:	f5 82       	std	Z+5, r15	; 0x05
   16dec:	e4 82       	std	Z+4, r14	; 0x04
   16dee:	86 e1       	ldi	r24, 0x16	; 22
   16df0:	97 e2       	ldi	r25, 0x27	; 39
   16df2:	a0 e0       	ldi	r26, 0x00	; 0
   16df4:	81 83       	std	Z+1, r24	; 0x01
   16df6:	92 83       	std	Z+2, r25	; 0x02
   16df8:	a3 83       	std	Z+3, r26	; 0x03
   16dfa:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
            secondary, len);
#endif
    if(!len)
   16dfe:	01 15       	cp	r16, r1
   16e00:	11 05       	cpc	r17, r1
   16e02:	61 f4       	brne	.+24     	; 0x16e1c <Amigo_Command+0x232>
    {
        AMIGOs->dsj = 1;
   16e04:	e0 91 2d 19 	lds	r30, 0x192D	; 0x80192d <AMIGOs>
   16e08:	f0 91 2e 19 	lds	r31, 0x192E	; 0x80192e <AMIGOs+0x1>
   16e0c:	81 e0       	ldi	r24, 0x01	; 1
   16e0e:	86 83       	std	Z+6, r24	; 0x06
        AMIGOs->Errors |= ERR_GPIB;
   16e10:	87 81       	ldd	r24, Z+7	; 0x07
   16e12:	90 85       	ldd	r25, Z+8	; 0x08
   16e14:	80 62       	ori	r24, 0x20	; 32
   16e16:	90 87       	std	Z+8, r25	; 0x08
   16e18:	87 83       	std	Z+7, r24	; 0x07
   16e1a:	bf c1       	rjmp	.+894    	; 0x1719a <Amigo_Command+0x5b0>
        return(status & ERROR_MASK);
    }

    ptr = gpib_iobuff;
    op = *ptr++;
   16e1c:	60 91 ae 1c 	lds	r22, 0x1CAE	; 0x801cae <gpib_iobuff>

    if (secondary == 0x68)
   16e20:	f8 e6       	ldi	r31, 0x68	; 104
   16e22:	ef 16       	cp	r14, r31
   16e24:	f1 04       	cpc	r15, r1
   16e26:	09 f0       	breq	.+2      	; 0x16e2a <Amigo_Command+0x240>
   16e28:	28 c1       	rjmp	.+592    	; 0x1707a <Amigo_Command+0x490>
    {
        if(op == 0x00 && len == 2)
   16e2a:	61 11       	cpse	r22, r1
   16e2c:	2e c0       	rjmp	.+92     	; 0x16e8a <Amigo_Command+0x2a0>
   16e2e:	02 30       	cpi	r16, 0x02	; 2
   16e30:	11 05       	cpc	r17, r1
   16e32:	09 f0       	breq	.+2      	; 0x16e36 <Amigo_Command+0x24c>
   16e34:	b7 c1       	rjmp	.+878    	; 0x171a4 <Amigo_Command+0x5ba>
        {
///  Reference: A40

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16e36:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16e3a:	85 ff       	sbrs	r24, 5
   16e3c:	0a c0       	rjmp	.+20     	; 0x16e52 <Amigo_Command+0x268>
                printf("[AMIGO Cold Load Read Command]\n");
   16e3e:	86 ef       	ldi	r24, 0xF6	; 246
   16e40:	96 e2       	ldi	r25, 0x26	; 38
   16e42:	a0 e0       	ldi	r26, 0x00	; 0
   16e44:	ed b7       	in	r30, 0x3d	; 61
   16e46:	fe b7       	in	r31, 0x3e	; 62
   16e48:	81 83       	std	Z+1, r24	; 0x01
   16e4a:	92 83       	std	Z+2, r25	; 0x02
   16e4c:	a3 83       	std	Z+3, r26	; 0x03
   16e4e:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
#endif
            ///TODO we do NOT support multiple units yet
            AMIGOs->unitNO = 0;
   16e52:	e0 91 2d 19 	lds	r30, 0x192D	; 0x80192d <AMIGOs>
   16e56:	f0 91 2e 19 	lds	r31, 0x192E	; 0x80192e <AMIGOs+0x1>
   16e5a:	11 82       	std	Z+1, r1	; 0x01
            AMIGOs->dsj = 0;
   16e5c:	16 82       	std	Z+6, r1	; 0x06
            AMIGOs->Errors = 0;
   16e5e:	10 86       	std	Z+8, r1	; 0x08
   16e60:	17 82       	std	Z+7, r1	; 0x07
            /// Fill in temparary address
            tmp.cyl = 0;
   16e62:	1d 86       	std	Y+13, r1	; 0x0d
            tmp.head = ( (0xff & *ptr) >> 6) & 0x03;
   16e64:	80 91 af 1c 	lds	r24, 0x1CAF	; 0x801caf <gpib_iobuff+0x1>
   16e68:	98 2f       	mov	r25, r24
   16e6a:	92 95       	swap	r25
   16e6c:	96 95       	lsr	r25
   16e6e:	96 95       	lsr	r25
   16e70:	93 70       	andi	r25, 0x03	; 3
   16e72:	9e 87       	std	Y+14, r25	; 0x0e
            tmp.sector = 0x3f & *ptr;
   16e74:	8f 73       	andi	r24, 0x3F	; 63
   16e76:	8f 87       	std	Y+15, r24	; 0x0f
            ++ptr;
            //update to real address on sucess
            amigo_seek((AMIGOStateType *) &tmp);
   16e78:	ce 01       	movw	r24, r28
   16e7a:	0a 96       	adiw	r24, 0x0a	; 10
   16e7c:	1a da       	rcall	.-3020   	; 0x162b2 <amigo_seek>
            AMIGOs->state = AMIGO_COLD_LOAD_READ;
   16e7e:	e0 91 2d 19 	lds	r30, 0x192D	; 0x80192d <AMIGOs>
   16e82:	f0 91 2e 19 	lds	r31, 0x192E	; 0x80192e <AMIGOs+0x1>
   16e86:	85 e0       	ldi	r24, 0x05	; 5
   16e88:	5c c1       	rjmp	.+696    	; 0x17142 <Amigo_Command+0x558>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x02 && len == 5)
   16e8a:	62 30       	cpi	r22, 0x02	; 2
   16e8c:	09 f0       	breq	.+2      	; 0x16e90 <Amigo_Command+0x2a6>
   16e8e:	3f c0       	rjmp	.+126    	; 0x16f0e <Amigo_Command+0x324>
   16e90:	05 30       	cpi	r16, 0x05	; 5
   16e92:	11 05       	cpc	r17, r1
   16e94:	d1 f4       	brne	.+52     	; 0x16eca <Amigo_Command+0x2e0>
/// @brief 
///  Seek 1 byte cylinder

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16e96:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16e9a:	85 ff       	sbrs	r24, 5
   16e9c:	0a c0       	rjmp	.+20     	; 0x16eb2 <Amigo_Command+0x2c8>
                printf("[AMIGO Seek len=5]\n");
   16e9e:	82 ee       	ldi	r24, 0xE2	; 226
   16ea0:	96 e2       	ldi	r25, 0x26	; 38
   16ea2:	a0 e0       	ldi	r26, 0x00	; 0
   16ea4:	ed b7       	in	r30, 0x3d	; 61
   16ea6:	fe b7       	in	r31, 0x3e	; 62
   16ea8:	81 83       	std	Z+1, r24	; 0x01
   16eaa:	92 83       	std	Z+2, r25	; 0x02
   16eac:	a3 83       	std	Z+3, r26	; 0x03
   16eae:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   16eb2:	80 91 af 1c 	lds	r24, 0x1CAF	; 0x801caf <gpib_iobuff+0x1>
   16eb6:	85 de       	rcall	.-758    	; 0x16bc2 <amigo_check_unit>

            /// Fill in temparary address
            tmp.cyl = 0xff & *ptr++;
   16eb8:	80 91 b0 1c 	lds	r24, 0x1CB0	; 0x801cb0 <gpib_iobuff+0x2>
   16ebc:	8d 87       	std	Y+13, r24	; 0x0d
            tmp.head = 0xff & *ptr++;
   16ebe:	80 91 b1 1c 	lds	r24, 0x1CB1	; 0x801cb1 <gpib_iobuff+0x3>
   16ec2:	8e 87       	std	Y+14, r24	; 0x0e
            tmp.sector = 0xff & *ptr++;
   16ec4:	80 91 b2 1c 	lds	r24, 0x1CB2	; 0x801cb2 <gpib_iobuff+0x4>
   16ec8:	1d c0       	rjmp	.+58     	; 0x16f04 <Amigo_Command+0x31a>
            //update to real address on sucess
            amigo_seek((AMIGOStateType *)&tmp);
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x02 && len == 6)
   16eca:	06 30       	cpi	r16, 0x06	; 6
   16ecc:	11 05       	cpc	r17, r1
   16ece:	09 f0       	breq	.+2      	; 0x16ed2 <Amigo_Command+0x2e8>
   16ed0:	69 c1       	rjmp	.+722    	; 0x171a4 <Amigo_Command+0x5ba>
/// @brief 
///  Seek 2 byte cylinder

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16ed2:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16ed6:	85 ff       	sbrs	r24, 5
   16ed8:	0a c0       	rjmp	.+20     	; 0x16eee <Amigo_Command+0x304>
                printf("[AMIGO Seek len=6]\n");
   16eda:	8e ec       	ldi	r24, 0xCE	; 206
   16edc:	96 e2       	ldi	r25, 0x26	; 38
   16ede:	a0 e0       	ldi	r26, 0x00	; 0
   16ee0:	ed b7       	in	r30, 0x3d	; 61
   16ee2:	fe b7       	in	r31, 0x3e	; 62
   16ee4:	81 83       	std	Z+1, r24	; 0x01
   16ee6:	92 83       	std	Z+2, r25	; 0x02
   16ee8:	a3 83       	std	Z+3, r26	; 0x03
   16eea:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   16eee:	80 91 af 1c 	lds	r24, 0x1CAF	; 0x801caf <gpib_iobuff+0x1>
   16ef2:	67 de       	rcall	.-818    	; 0x16bc2 <amigo_check_unit>
            /// Fill in temparary address
            tmp.cyl = (0xff & *ptr++) << 8;       // MSB
            tmp.cyl |= (0xff & *ptr++);           // LSB
   16ef4:	80 91 b1 1c 	lds	r24, 0x1CB1	; 0x801cb1 <gpib_iobuff+0x3>
   16ef8:	8d 87       	std	Y+13, r24	; 0x0d
            tmp.head = 0xff & *ptr++;
   16efa:	80 91 b2 1c 	lds	r24, 0x1CB2	; 0x801cb2 <gpib_iobuff+0x4>
   16efe:	8e 87       	std	Y+14, r24	; 0x0e
            tmp.sector = 0xff & *ptr++;
   16f00:	80 91 b3 1c 	lds	r24, 0x1CB3	; 0x801cb3 <gpib_iobuff+0x5>
            //update to real address on sucess
            amigo_seek((AMIGOStateType *)&tmp);
   16f04:	8f 87       	std	Y+15, r24	; 0x0f
   16f06:	ce 01       	movw	r24, r28
   16f08:	0a 96       	adiw	r24, 0x0a	; 10
   16f0a:	d3 d9       	rcall	.-3162   	; 0x162b2 <amigo_seek>
   16f0c:	1b c1       	rjmp	.+566    	; 0x17144 <Amigo_Command+0x55a>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x03 && len == 2)
   16f0e:	63 30       	cpi	r22, 0x03	; 3
   16f10:	e9 f4       	brne	.+58     	; 0x16f4c <Amigo_Command+0x362>
   16f12:	02 30       	cpi	r16, 0x02	; 2
   16f14:	11 05       	cpc	r17, r1
   16f16:	09 f0       	breq	.+2      	; 0x16f1a <Amigo_Command+0x330>
   16f18:	45 c1       	rjmp	.+650    	; 0x171a4 <Amigo_Command+0x5ba>
        {
///  Reference: A15
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16f1a:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16f1e:	85 ff       	sbrs	r24, 5
   16f20:	0a c0       	rjmp	.+20     	; 0x16f36 <Amigo_Command+0x34c>
                printf("[AMIGO Request Status Buffered Command]\n");
   16f22:	85 ea       	ldi	r24, 0xA5	; 165
   16f24:	96 e2       	ldi	r25, 0x26	; 38
   16f26:	a0 e0       	ldi	r26, 0x00	; 0
   16f28:	ed b7       	in	r30, 0x3d	; 61
   16f2a:	fe b7       	in	r31, 0x3e	; 62
   16f2c:	81 83       	std	Z+1, r24	; 0x01
   16f2e:	92 83       	std	Z+2, r25	; 0x02
   16f30:	a3 83       	std	Z+3, r26	; 0x03
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   16f32:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   16f36:	80 91 af 1c 	lds	r24, 0x1CAF	; 0x801caf <gpib_iobuff+0x1>
            amigo_request_status();
   16f3a:	43 de       	rcall	.-890    	; 0x16bc2 <amigo_check_unit>
            AMIGOs->state = AMIGO_REQUEST_STATUS_BUFFERED;
   16f3c:	78 d8       	rcall	.-3856   	; 0x1602e <amigo_request_status>
   16f3e:	e0 91 2d 19 	lds	r30, 0x192D	; 0x80192d <AMIGOs>
   16f42:	f0 91 2e 19 	lds	r31, 0x192E	; 0x80192e <AMIGOs+0x1>
   16f46:	83 e0       	ldi	r24, 0x03	; 3
   16f48:	80 83       	st	Z, r24
            return(status & ERROR_MASK);
        }
        else if(op == 0x05 && len == 2)
   16f4a:	27 c1       	rjmp	.+590    	; 0x1719a <Amigo_Command+0x5b0>
   16f4c:	65 30       	cpi	r22, 0x05	; 5
   16f4e:	d9 f4       	brne	.+54     	; 0x16f86 <Amigo_Command+0x39c>
   16f50:	02 30       	cpi	r16, 0x02	; 2
   16f52:	11 05       	cpc	r17, r1
   16f54:	09 f0       	breq	.+2      	; 0x16f58 <Amigo_Command+0x36e>
        {
///  Reference: A35
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16f56:	26 c1       	rjmp	.+588    	; 0x171a4 <Amigo_Command+0x5ba>
   16f58:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16f5c:	85 ff       	sbrs	r24, 5
                printf("[AMIGO Read Unbuffered Command]\n");
   16f5e:	0a c0       	rjmp	.+20     	; 0x16f74 <Amigo_Command+0x38a>
   16f60:	84 e8       	ldi	r24, 0x84	; 132
   16f62:	96 e2       	ldi	r25, 0x26	; 38
   16f64:	a0 e0       	ldi	r26, 0x00	; 0
   16f66:	ed b7       	in	r30, 0x3d	; 61
   16f68:	fe b7       	in	r31, 0x3e	; 62
   16f6a:	81 83       	std	Z+1, r24	; 0x01
   16f6c:	92 83       	std	Z+2, r25	; 0x02
   16f6e:	a3 83       	std	Z+3, r26	; 0x03
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   16f70:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   16f74:	80 91 af 1c 	lds	r24, 0x1CAF	; 0x801caf <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_READ_UNBUFFERED;
   16f78:	24 de       	rcall	.-952    	; 0x16bc2 <amigo_check_unit>
   16f7a:	e0 91 2d 19 	lds	r30, 0x192D	; 0x80192d <AMIGOs>
   16f7e:	f0 91 2e 19 	lds	r31, 0x192E	; 0x80192e <AMIGOs+0x1>
   16f82:	86 e0       	ldi	r24, 0x06	; 6
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x07 && len == 4)
   16f84:	de c0       	rjmp	.+444    	; 0x17142 <Amigo_Command+0x558>
   16f86:	67 30       	cpi	r22, 0x07	; 7
   16f88:	f9 f4       	brne	.+62     	; 0x16fc8 <Amigo_Command+0x3de>
   16f8a:	04 30       	cpi	r16, 0x04	; 4
   16f8c:	11 05       	cpc	r17, r1
   16f8e:	09 f0       	breq	.+2      	; 0x16f92 <Amigo_Command+0x3a8>
        {
            uint16_t sectors;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16f90:	09 c1       	rjmp	.+530    	; 0x171a4 <Amigo_Command+0x5ba>
   16f92:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16f96:	85 ff       	sbrs	r24, 5
                printf("[AMIGO Verify]\n");
   16f98:	0a c0       	rjmp	.+20     	; 0x16fae <Amigo_Command+0x3c4>
   16f9a:	84 e7       	ldi	r24, 0x74	; 116
   16f9c:	96 e2       	ldi	r25, 0x26	; 38
   16f9e:	a0 e0       	ldi	r26, 0x00	; 0
   16fa0:	ed b7       	in	r30, 0x3d	; 61
   16fa2:	fe b7       	in	r31, 0x3e	; 62
   16fa4:	81 83       	std	Z+1, r24	; 0x01
   16fa6:	92 83       	std	Z+2, r25	; 0x02
   16fa8:	a3 83       	std	Z+3, r26	; 0x03
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   16faa:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   16fae:	80 91 af 1c 	lds	r24, 0x1CAF	; 0x801caf <gpib_iobuff+0x1>
            sectors = (0xff & *ptr++) << 8;
   16fb2:	07 de       	rcall	.-1010   	; 0x16bc2 <amigo_check_unit>
   16fb4:	80 91 b0 1c 	lds	r24, 0x1CB0	; 0x801cb0 <gpib_iobuff+0x2>
            sectors |= (0xff & *ptr++);
            return ( amigo_verify( sectors) );
   16fb8:	90 e0       	ldi	r25, 0x00	; 0
   16fba:	98 2f       	mov	r25, r24
   16fbc:	88 27       	eor	r24, r24
   16fbe:	20 91 b1 1c 	lds	r18, 0x1CB1	; 0x801cb1 <gpib_iobuff+0x3>
   16fc2:	82 2b       	or	r24, r18
        }
        else if(op == 0x08 && len == 2)
   16fc4:	a1 d9       	rcall	.-3262   	; 0x16308 <amigo_verify>
   16fc6:	f1 c0       	rjmp	.+482    	; 0x171aa <Amigo_Command+0x5c0>
   16fc8:	68 30       	cpi	r22, 0x08	; 8
   16fca:	d9 f4       	brne	.+54     	; 0x17002 <Amigo_Command+0x418>
   16fcc:	02 30       	cpi	r16, 0x02	; 2
   16fce:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16fd0:	09 f0       	breq	.+2      	; 0x16fd4 <Amigo_Command+0x3ea>
   16fd2:	e8 c0       	rjmp	.+464    	; 0x171a4 <Amigo_Command+0x5ba>
   16fd4:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
                printf("[AMIGO Write Unbuffered Command]\n");
   16fd8:	85 ff       	sbrs	r24, 5
   16fda:	0a c0       	rjmp	.+20     	; 0x16ff0 <Amigo_Command+0x406>
   16fdc:	82 e5       	ldi	r24, 0x52	; 82
   16fde:	96 e2       	ldi	r25, 0x26	; 38
   16fe0:	a0 e0       	ldi	r26, 0x00	; 0
   16fe2:	ed b7       	in	r30, 0x3d	; 61
   16fe4:	fe b7       	in	r31, 0x3e	; 62
   16fe6:	81 83       	std	Z+1, r24	; 0x01
   16fe8:	92 83       	std	Z+2, r25	; 0x02
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   16fea:	a3 83       	std	Z+3, r26	; 0x03
   16fec:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   16ff0:	80 91 af 1c 	lds	r24, 0x1CAF	; 0x801caf <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_WRITE_UNBUFFERED;
   16ff4:	e6 dd       	rcall	.-1076   	; 0x16bc2 <amigo_check_unit>
   16ff6:	e0 91 2d 19 	lds	r30, 0x192D	; 0x80192d <AMIGOs>
   16ffa:	f0 91 2e 19 	lds	r31, 0x192E	; 0x80192e <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if((op == 0x0B || op == 0x2b) && len == 2)
   16ffe:	88 e0       	ldi	r24, 0x08	; 8
   17000:	a0 c0       	rjmp	.+320    	; 0x17142 <Amigo_Command+0x558>
   17002:	86 2f       	mov	r24, r22
   17004:	8f 7d       	andi	r24, 0xDF	; 223
   17006:	8b 30       	cpi	r24, 0x0B	; 11
   17008:	d9 f4       	brne	.+54     	; 0x17040 <Amigo_Command+0x456>
   1700a:	02 30       	cpi	r16, 0x02	; 2
   1700c:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1700e:	09 f0       	breq	.+2      	; 0x17012 <Amigo_Command+0x428>
   17010:	c9 c0       	rjmp	.+402    	; 0x171a4 <Amigo_Command+0x5ba>
   17012:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
                printf("[AMIGO Initialize Command]\n");
   17016:	85 ff       	sbrs	r24, 5
   17018:	0a c0       	rjmp	.+20     	; 0x1702e <Amigo_Command+0x444>
   1701a:	86 e3       	ldi	r24, 0x36	; 54
   1701c:	96 e2       	ldi	r25, 0x26	; 38
   1701e:	a0 e0       	ldi	r26, 0x00	; 0
   17020:	ed b7       	in	r30, 0x3d	; 61
   17022:	fe b7       	in	r31, 0x3e	; 62
   17024:	81 83       	std	Z+1, r24	; 0x01
   17026:	92 83       	std	Z+2, r25	; 0x02
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17028:	a3 83       	std	Z+3, r26	; 0x03
   1702a:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   1702e:	80 91 af 1c 	lds	r24, 0x1CAF	; 0x801caf <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_INITIALIZE;
   17032:	c7 dd       	rcall	.-1138   	; 0x16bc2 <amigo_check_unit>
   17034:	e0 91 2d 19 	lds	r30, 0x192D	; 0x80192d <AMIGOs>
   17038:	f0 91 2e 19 	lds	r31, 0x192E	; 0x80192e <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x14 && len == 2)
   1703c:	8a e0       	ldi	r24, 0x0A	; 10
   1703e:	81 c0       	rjmp	.+258    	; 0x17142 <Amigo_Command+0x558>
   17040:	64 31       	cpi	r22, 0x14	; 20
   17042:	09 f0       	breq	.+2      	; 0x17046 <Amigo_Command+0x45c>
   17044:	af c0       	rjmp	.+350    	; 0x171a4 <Amigo_Command+0x5ba>
   17046:	02 30       	cpi	r16, 0x02	; 2
   17048:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1704a:	09 f0       	breq	.+2      	; 0x1704e <Amigo_Command+0x464>
   1704c:	ab c0       	rjmp	.+342    	; 0x171a4 <Amigo_Command+0x5ba>
   1704e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
                printf("[AMIGO Request Logical Address Command]\n");
   17052:	85 ff       	sbrs	r24, 5
   17054:	0a c0       	rjmp	.+20     	; 0x1706a <Amigo_Command+0x480>
   17056:	8d e0       	ldi	r24, 0x0D	; 13
   17058:	96 e2       	ldi	r25, 0x26	; 38
   1705a:	a0 e0       	ldi	r26, 0x00	; 0
   1705c:	ed b7       	in	r30, 0x3d	; 61
   1705e:	fe b7       	in	r31, 0x3e	; 62
   17060:	81 83       	std	Z+1, r24	; 0x01
   17062:	92 83       	std	Z+2, r25	; 0x02
   17064:	a3 83       	std	Z+3, r26	; 0x03
#endif
            amigo_request_logical_address();
   17066:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
            AMIGOs->state = AMIGO_REQUEST_LOGICAL_ADDRESS;
   1706a:	0e 94 09 b0 	call	0x16012	; 0x16012 <amigo_request_logical_address>
   1706e:	e0 91 2d 19 	lds	r30, 0x192D	; 0x80192d <AMIGOs>
   17072:	f0 91 2e 19 	lds	r31, 0x192E	; 0x80192e <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x69)
   17076:	84 e0       	ldi	r24, 0x04	; 4
   17078:	64 c0       	rjmp	.+200    	; 0x17142 <Amigo_Command+0x558>
   1707a:	f9 e6       	ldi	r31, 0x69	; 105
   1707c:	ef 16       	cp	r14, r31
    {
        if(op == 0x08 && len == 2)
   1707e:	f1 04       	cpc	r15, r1
   17080:	f1 f4       	brne	.+60     	; 0x170be <Amigo_Command+0x4d4>
   17082:	68 30       	cpi	r22, 0x08	; 8
   17084:	09 f0       	breq	.+2      	; 0x17088 <Amigo_Command+0x49e>
   17086:	8e c0       	rjmp	.+284    	; 0x171a4 <Amigo_Command+0x5ba>
   17088:	02 30       	cpi	r16, 0x02	; 2
   1708a:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1708c:	09 f0       	breq	.+2      	; 0x17090 <Amigo_Command+0x4a6>
   1708e:	8a c0       	rjmp	.+276    	; 0x171a4 <Amigo_Command+0x5ba>
   17090:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
                printf("[AMIGO Write Buffered Command]\n");
   17094:	85 ff       	sbrs	r24, 5
   17096:	0a c0       	rjmp	.+20     	; 0x170ac <Amigo_Command+0x4c2>
   17098:	8d ee       	ldi	r24, 0xED	; 237
   1709a:	95 e2       	ldi	r25, 0x25	; 37
   1709c:	a0 e0       	ldi	r26, 0x00	; 0
   1709e:	ed b7       	in	r30, 0x3d	; 61
   170a0:	fe b7       	in	r31, 0x3e	; 62
   170a2:	81 83       	std	Z+1, r24	; 0x01
   170a4:	92 83       	std	Z+2, r25	; 0x02
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   170a6:	a3 83       	std	Z+3, r26	; 0x03
   170a8:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   170ac:	80 91 af 1c 	lds	r24, 0x1CAF	; 0x801caf <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_WRITE_BUFFERED;
   170b0:	88 dd       	rcall	.-1264   	; 0x16bc2 <amigo_check_unit>
   170b2:	e0 91 2d 19 	lds	r30, 0x192D	; 0x80192d <AMIGOs>
   170b6:	f0 91 2e 19 	lds	r31, 0x192E	; 0x80192e <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x6A)
   170ba:	89 e0       	ldi	r24, 0x09	; 9
   170bc:	42 c0       	rjmp	.+132    	; 0x17142 <Amigo_Command+0x558>
   170be:	fa e6       	ldi	r31, 0x6A	; 106
   170c0:	ef 16       	cp	r14, r31
   170c2:	f1 04       	cpc	r15, r1
    {
        if(op == 0x08 && len == 2)
   170c4:	09 f0       	breq	.+2      	; 0x170c8 <Amigo_Command+0x4de>
   170c6:	47 c0       	rjmp	.+142    	; 0x17156 <Amigo_Command+0x56c>
   170c8:	68 30       	cpi	r22, 0x08	; 8
   170ca:	f1 f4       	brne	.+60     	; 0x17108 <Amigo_Command+0x51e>
   170cc:	02 30       	cpi	r16, 0x02	; 2
   170ce:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   170d0:	09 f0       	breq	.+2      	; 0x170d4 <Amigo_Command+0x4ea>
   170d2:	68 c0       	rjmp	.+208    	; 0x171a4 <Amigo_Command+0x5ba>
   170d4:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
                printf("[AMIGO Request Status Unbuffered Command]\n");
   170d8:	85 ff       	sbrs	r24, 5
   170da:	0a c0       	rjmp	.+20     	; 0x170f0 <Amigo_Command+0x506>
   170dc:	82 ec       	ldi	r24, 0xC2	; 194
   170de:	95 e2       	ldi	r25, 0x25	; 37
   170e0:	a0 e0       	ldi	r26, 0x00	; 0
   170e2:	ed b7       	in	r30, 0x3d	; 61
   170e4:	fe b7       	in	r31, 0x3e	; 62
   170e6:	81 83       	std	Z+1, r24	; 0x01
   170e8:	92 83       	std	Z+2, r25	; 0x02
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   170ea:	a3 83       	std	Z+3, r26	; 0x03
   170ec:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   170f0:	80 91 af 1c 	lds	r24, 0x1CAF	; 0x801caf <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_REQUEST_STATUS_UNBUFFERED;
   170f4:	66 dd       	rcall	.-1332   	; 0x16bc2 <amigo_check_unit>
   170f6:	e0 91 2d 19 	lds	r30, 0x192D	; 0x80192d <AMIGOs>
   170fa:	f0 91 2e 19 	lds	r31, 0x192E	; 0x80192e <AMIGOs+0x1>
            amigo_request_status();
   170fe:	82 e0       	ldi	r24, 0x02	; 2
   17100:	80 83       	st	Z, r24
   17102:	0e 94 17 b0 	call	0x1602e	; 0x1602e <amigo_request_status>
            return(status & ERROR_MASK);
        }
        if(op == 0x05 && len == 2)
   17106:	49 c0       	rjmp	.+146    	; 0x1719a <Amigo_Command+0x5b0>
   17108:	65 30       	cpi	r22, 0x05	; 5
   1710a:	09 f0       	breq	.+2      	; 0x1710e <Amigo_Command+0x524>
   1710c:	4b c0       	rjmp	.+150    	; 0x171a4 <Amigo_Command+0x5ba>
   1710e:	02 30       	cpi	r16, 0x02	; 2
   17110:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17112:	09 f0       	breq	.+2      	; 0x17116 <Amigo_Command+0x52c>
   17114:	47 c0       	rjmp	.+142    	; 0x171a4 <Amigo_Command+0x5ba>
   17116:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
                printf("[AMIGO Read Buffered Command]\n");
   1711a:	85 ff       	sbrs	r24, 5
   1711c:	0a c0       	rjmp	.+20     	; 0x17132 <Amigo_Command+0x548>
   1711e:	83 ea       	ldi	r24, 0xA3	; 163
   17120:	95 e2       	ldi	r25, 0x25	; 37
   17122:	a0 e0       	ldi	r26, 0x00	; 0
   17124:	ed b7       	in	r30, 0x3d	; 61
   17126:	fe b7       	in	r31, 0x3e	; 62
   17128:	81 83       	std	Z+1, r24	; 0x01
   1712a:	92 83       	std	Z+2, r25	; 0x02
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   1712c:	a3 83       	std	Z+3, r26	; 0x03
   1712e:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   17132:	80 91 af 1c 	lds	r24, 0x1CAF	; 0x801caf <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_READ_BUFFERED;
   17136:	45 dd       	rcall	.-1398   	; 0x16bc2 <amigo_check_unit>
   17138:	e0 91 2d 19 	lds	r30, 0x192D	; 0x80192d <AMIGOs>
   1713c:	f0 91 2e 19 	lds	r31, 0x192E	; 0x80192e <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
   17140:	87 e0       	ldi	r24, 0x07	; 7
   17142:	80 83       	st	Z, r24
   17144:	e0 91 2f 19 	lds	r30, 0x192F	; 0x80192f <AMIGOp>
   17148:	f0 91 30 19 	lds	r31, 0x1930	; 0x801930 <AMIGOp+0x1>
   1714c:	81 81       	ldd	r24, Z+1	; 0x01
   1714e:	90 e0       	ldi	r25, 0x00	; 0
   17150:	0e 94 58 85 	call	0x10ab0	; 0x10ab0 <gpib_enable_PPR>
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x6C)
   17154:	22 c0       	rjmp	.+68     	; 0x1719a <Amigo_Command+0x5b0>
   17156:	fc e6       	ldi	r31, 0x6C	; 108
   17158:	ef 16       	cp	r14, r31
    {
        if(op == 0x18 && len == 5)
   1715a:	f1 04       	cpc	r15, r1
   1715c:	d1 f4       	brne	.+52     	; 0x17192 <Amigo_Command+0x5a8>
   1715e:	68 31       	cpi	r22, 0x18	; 24
   17160:	09 f5       	brne	.+66     	; 0x171a4 <Amigo_Command+0x5ba>
   17162:	05 30       	cpi	r16, 0x05	; 5
        {
///  Reference: A48 ..  A50

            uint8_t db;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17164:	11 05       	cpc	r17, r1
   17166:	f1 f4       	brne	.+60     	; 0x171a4 <Amigo_Command+0x5ba>
   17168:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
                printf("[AMIGO Format]\n");
   1716c:	85 ff       	sbrs	r24, 5
   1716e:	0a c0       	rjmp	.+20     	; 0x17184 <Amigo_Command+0x59a>
   17170:	83 e9       	ldi	r24, 0x93	; 147
   17172:	95 e2       	ldi	r25, 0x25	; 37
   17174:	a0 e0       	ldi	r26, 0x00	; 0
   17176:	ed b7       	in	r30, 0x3d	; 61
   17178:	fe b7       	in	r31, 0x3e	; 62
   1717a:	81 83       	std	Z+1, r24	; 0x01
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   1717c:	92 83       	std	Z+2, r25	; 0x02
   1717e:	a3 83       	std	Z+3, r26	; 0x03
   17180:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
            ++ptr; // override not used
            ++ptr; // interleave not used
            db = 0xff & *ptr++;
            amigo_format(db);
   17184:	80 91 af 1c 	lds	r24, 0x1CAF	; 0x801caf <gpib_iobuff+0x1>
   17188:	1c dd       	rcall	.-1480   	; 0x16bc2 <amigo_check_unit>
   1718a:	80 91 b2 1c 	lds	r24, 0x1CB2	; 0x801cb2 <gpib_iobuff+0x4>
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x70)                   // HP-300 Clear
   1718e:	58 d9       	rcall	.-3408   	; 0x16440 <amigo_format>
   17190:	04 c0       	rjmp	.+8      	; 0x1719a <Amigo_Command+0x5b0>
    {
///  Reference: A23
        ++ptr;                                    // Dummy byte
        return(status & ERROR_MASK);
   17192:	f0 e7       	ldi	r31, 0x70	; 112
   17194:	ef 16       	cp	r14, r31
   17196:	f1 04       	cpc	r15, r1
   17198:	29 f4       	brne	.+10     	; 0x171a4 <Amigo_Command+0x5ba>
   1719a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    }
    return ( amigo_todo_op(secondary, op, len) );
   1719c:	9c 8d       	ldd	r25, Y+28	; 0x1c
   1719e:	88 27       	eor	r24, r24
   171a0:	90 7d       	andi	r25, 0xD0	; 208
   171a2:	03 c0       	rjmp	.+6      	; 0x171aa <Amigo_Command+0x5c0>
}
   171a4:	a8 01       	movw	r20, r16
   171a6:	8e 2d       	mov	r24, r14
   171a8:	ef db       	rcall	.-2082   	; 0x16988 <amigo_todo_op>
   171aa:	6c 96       	adiw	r28, 0x1c	; 28
   171ac:	e6 e0       	ldi	r30, 0x06	; 6
   171ae:	0c 94 06 e0 	jmp	0x1c00c	; 0x1c00c <__epilogue_restores__+0x18>

000171b2 <Amigo_Execute>:
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list)


int Amigo_Execute( int secondary )
{
   171b2:	a9 e0       	ldi	r26, 0x09	; 9
   171b4:	b0 e0       	ldi	r27, 0x00	; 0
   171b6:	ef ed       	ldi	r30, 0xDF	; 223
   171b8:	f8 eb       	ldi	r31, 0xB8	; 184
   171ba:	0c 94 ee df 	jmp	0x1bfdc	; 0x1bfdc <__prologue_saves__+0x20>
   171be:	ec 01       	movw	r28, r24
#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   171c0:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   171c4:	85 ff       	sbrs	r24, 5
   171c6:	16 c0       	rjmp	.+44     	; 0x171f4 <Amigo_Execute+0x42>
        printf("[AMIGO Execute(%02XH): listen:%02XH, talk:%02XH]\n",
   171c8:	80 91 b2 1e 	lds	r24, 0x1EB2	; 0x801eb2 <talking>
   171cc:	90 e0       	ldi	r25, 0x00	; 0
   171ce:	ed b7       	in	r30, 0x3d	; 61
   171d0:	fe b7       	in	r31, 0x3e	; 62
   171d2:	91 87       	std	Z+9, r25	; 0x09
   171d4:	80 87       	std	Z+8, r24	; 0x08
   171d6:	80 91 b4 1e 	lds	r24, 0x1EB4	; 0x801eb4 <listening>
   171da:	90 e0       	ldi	r25, 0x00	; 0
   171dc:	97 83       	std	Z+7, r25	; 0x07
   171de:	86 83       	std	Z+6, r24	; 0x06
   171e0:	d5 83       	std	Z+5, r29	; 0x05
   171e2:	c4 83       	std	Z+4, r28	; 0x04
   171e4:	81 e6       	ldi	r24, 0x61	; 97
   171e6:	95 e2       	ldi	r25, 0x25	; 37
   171e8:	a0 e0       	ldi	r26, 0x00	; 0
   171ea:	81 83       	std	Z+1, r24	; 0x01
   171ec:	92 83       	std	Z+2, r25	; 0x02
   171ee:	a3 83       	std	Z+3, r26	; 0x03
   171f0:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
            secondary, listening, talking);
#endif

    if(talking == UNT)
   171f4:	80 91 b2 1e 	lds	r24, 0x1EB2	; 0x801eb2 <talking>
   171f8:	8f 35       	cpi	r24, 0x5F	; 95
   171fa:	09 f4       	brne	.+2      	; 0x171fe <Amigo_Execute+0x4c>
   171fc:	ad c0       	rjmp	.+346    	; 0x17358 <Amigo_Execute+0x1a6>
        return(0);

    if(!AMIGO_is_MTA(talking) && !AMIGO_is_MLA(listening))
   171fe:	90 e0       	ldi	r25, 0x00	; 0
   17200:	0e 94 b8 8b 	call	0x11770	; 0x11770 <AMIGO_is_MTA>
   17204:	89 2b       	or	r24, r25
   17206:	39 f0       	breq	.+14     	; 0x17216 <Amigo_Execute+0x64>
        return(0);

    if(secondary != 0x60 && secondary != 0x68)
   17208:	ce 01       	movw	r24, r28
   1720a:	87 7f       	andi	r24, 0xF7	; 247
   1720c:	80 36       	cpi	r24, 0x60	; 96
   1720e:	91 05       	cpc	r25, r1
   17210:	09 f0       	breq	.+2      	; 0x17214 <Amigo_Execute+0x62>
   17212:	a2 c0       	rjmp	.+324    	; 0x17358 <Amigo_Execute+0x1a6>
   17214:	08 c0       	rjmp	.+16     	; 0x17226 <Amigo_Execute+0x74>
#endif

    if(talking == UNT)
        return(0);

    if(!AMIGO_is_MTA(talking) && !AMIGO_is_MLA(listening))
   17216:	80 91 b4 1e 	lds	r24, 0x1EB4	; 0x801eb4 <listening>
   1721a:	90 e0       	ldi	r25, 0x00	; 0
   1721c:	0e 94 a7 8b 	call	0x1174e	; 0x1174e <AMIGO_is_MLA>
   17220:	89 2b       	or	r24, r25
   17222:	91 f7       	brne	.-28     	; 0x17208 <Amigo_Execute+0x56>
   17224:	99 c0       	rjmp	.+306    	; 0x17358 <Amigo_Execute+0x1a6>
        return(0);

    if(secondary != 0x60 && secondary != 0x68)
        return(0);

    gpib_disable_PPR(AMIGOp->HEADER.PPR);
   17226:	e0 91 2f 19 	lds	r30, 0x192F	; 0x80192f <AMIGOp>
   1722a:	f0 91 30 19 	lds	r31, 0x1930	; 0x801930 <AMIGOp+0x1>
   1722e:	81 81       	ldd	r24, Z+1	; 0x01
   17230:	90 e0       	ldi	r25, 0x00	; 0
   17232:	0e 94 8e 85 	call	0x10b1c	; 0x10b1c <gpib_disable_PPR>

    if(secondary == 0x60)
   17236:	c0 36       	cpi	r28, 0x60	; 96
   17238:	d1 05       	cpc	r29, r1
   1723a:	09 f0       	breq	.+2      	; 0x1723e <Amigo_Execute+0x8c>
   1723c:	4e c0       	rjmp	.+156    	; 0x172da <Amigo_Execute+0x128>
    {
        switch(AMIGOs->state)
   1723e:	e0 91 2d 19 	lds	r30, 0x192D	; 0x80192d <AMIGOs>
   17242:	f0 91 2e 19 	lds	r31, 0x192E	; 0x80192e <AMIGOs+0x1>
   17246:	e0 81       	ld	r30, Z
   17248:	8e 2f       	mov	r24, r30
   1724a:	90 e0       	ldi	r25, 0x00	; 0
   1724c:	8b 30       	cpi	r24, 0x0B	; 11
   1724e:	91 05       	cpc	r25, r1
   17250:	08 f0       	brcs	.+2      	; 0x17254 <Amigo_Execute+0xa2>
   17252:	41 c0       	rjmp	.+130    	; 0x172d6 <Amigo_Execute+0x124>
   17254:	fc 01       	movw	r30, r24
   17256:	e0 52       	subi	r30, 0x20	; 32
   17258:	ff 4f       	sbci	r31, 0xFF	; 255
   1725a:	0c 94 af df 	jmp	0x1bf5e	; 0x1bf5e <__tablejump2__>
        {
            case AMIGO_IDLE:
                return(0);
            case AMIGO_COLD_LOAD_READ:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1725e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   17262:	85 ff       	sbrs	r24, 5
   17264:	18 c0       	rjmp	.+48     	; 0x17296 <Amigo_Execute+0xe4>
                    printf("[AMIGO Execute Cold Load Read]\n");
   17266:	81 e4       	ldi	r24, 0x41	; 65
   17268:	95 e2       	ldi	r25, 0x25	; 37
   1726a:	0d c0       	rjmp	.+26     	; 0x17286 <Amigo_Execute+0xd4>
#endif
                return ( amigo_buffered_read() );
            case AMIGO_READ_UNBUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1726c:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   17270:	85 ff       	sbrs	r24, 5
   17272:	11 c0       	rjmp	.+34     	; 0x17296 <Amigo_Execute+0xe4>
                    printf("[AMIGO Execute Read Unbuffered]\n");
   17274:	80 e2       	ldi	r24, 0x20	; 32
   17276:	95 e2       	ldi	r25, 0x25	; 37
   17278:	06 c0       	rjmp	.+12     	; 0x17286 <Amigo_Execute+0xd4>
#endif
                return ( amigo_buffered_read() );
            case AMIGO_READ_BUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1727a:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1727e:	85 ff       	sbrs	r24, 5
   17280:	0a c0       	rjmp	.+20     	; 0x17296 <Amigo_Execute+0xe4>
                    printf("[AMIGO Execute Read Buffered]\n");
   17282:	81 e0       	ldi	r24, 0x01	; 1
   17284:	95 e2       	ldi	r25, 0x25	; 37
   17286:	a0 e0       	ldi	r26, 0x00	; 0
   17288:	ed b7       	in	r30, 0x3d	; 61
   1728a:	fe b7       	in	r31, 0x3e	; 62
   1728c:	81 83       	std	Z+1, r24	; 0x01
   1728e:	92 83       	std	Z+2, r25	; 0x02
   17290:	a3 83       	std	Z+3, r26	; 0x03
   17292:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
#endif
                return ( amigo_buffered_read() );
   17296:	69 d9       	rcall	.-3374   	; 0x1656a <amigo_buffered_read>
            case AMIGO_WRITE_UNBUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17298:	61 c0       	rjmp	.+194    	; 0x1735c <Amigo_Execute+0x1aa>
   1729a:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1729e:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Write Unbuffered]\n");
   172a0:	18 c0       	rjmp	.+48     	; 0x172d2 <Amigo_Execute+0x120>
   172a2:	8f ed       	ldi	r24, 0xDF	; 223
   172a4:	94 e2       	ldi	r25, 0x24	; 36
#endif
                return ( amigo_buffered_write() );
            case AMIGO_INITIALIZE:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   172a6:	0d c0       	rjmp	.+26     	; 0x172c2 <Amigo_Execute+0x110>
   172a8:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   172ac:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Initialize]\n");
   172ae:	11 c0       	rjmp	.+34     	; 0x172d2 <Amigo_Execute+0x120>
   172b0:	83 ec       	ldi	r24, 0xC3	; 195
   172b2:	94 e2       	ldi	r25, 0x24	; 36
#endif
                return ( amigo_buffered_write() );
            case AMIGO_WRITE_BUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   172b4:	06 c0       	rjmp	.+12     	; 0x172c2 <Amigo_Execute+0x110>
   172b6:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   172ba:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Write Buffered]\n");
   172bc:	0a c0       	rjmp	.+20     	; 0x172d2 <Amigo_Execute+0x120>
   172be:	83 ea       	ldi	r24, 0xA3	; 163
   172c0:	94 e2       	ldi	r25, 0x24	; 36
   172c2:	a0 e0       	ldi	r26, 0x00	; 0
   172c4:	ed b7       	in	r30, 0x3d	; 61
   172c6:	fe b7       	in	r31, 0x3e	; 62
   172c8:	81 83       	std	Z+1, r24	; 0x01
   172ca:	92 83       	std	Z+2, r25	; 0x02
   172cc:	a3 83       	std	Z+3, r26	; 0x03
#endif
                return ( amigo_buffered_write() );
   172ce:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   172d2:	14 da       	rcall	.-3032   	; 0x166fc <amigo_buffered_write>
            default:
                return ( amigo_todo(secondary) );
   172d4:	43 c0       	rjmp	.+134    	; 0x1735c <Amigo_Execute+0x1aa>
   172d6:	80 e6       	ldi	r24, 0x60	; 96
        }
        AMIGOs->state = AMIGO_IDLE;
    }
    if(secondary == 0x68)
   172d8:	3d c0       	rjmp	.+122    	; 0x17354 <Amigo_Execute+0x1a2>
   172da:	c8 36       	cpi	r28, 0x68	; 104
   172dc:	d1 05       	cpc	r29, r1
    {
        switch(AMIGOs->state)
   172de:	e1 f5       	brne	.+120    	; 0x17358 <Amigo_Execute+0x1a6>
   172e0:	e0 91 2d 19 	lds	r30, 0x192D	; 0x80192d <AMIGOs>
   172e4:	f0 91 2e 19 	lds	r31, 0x192E	; 0x80192e <AMIGOs+0x1>
   172e8:	80 81       	ld	r24, Z
   172ea:	82 30       	cpi	r24, 0x02	; 2
   172ec:	81 f0       	breq	.+32     	; 0x1730e <Amigo_Execute+0x15c>
   172ee:	18 f4       	brcc	.+6      	; 0x172f6 <Amigo_Execute+0x144>
   172f0:	88 23       	and	r24, r24
   172f2:	91 f1       	breq	.+100    	; 0x17358 <Amigo_Execute+0x1a6>
   172f4:	2e c0       	rjmp	.+92     	; 0x17352 <Amigo_Execute+0x1a0>
   172f6:	83 30       	cpi	r24, 0x03	; 3
   172f8:	19 f0       	breq	.+6      	; 0x17300 <Amigo_Execute+0x14e>
   172fa:	84 30       	cpi	r24, 0x04	; 4
   172fc:	c9 f0       	breq	.+50     	; 0x17330 <Amigo_Execute+0x17e>
        {
            case AMIGO_IDLE:
                return(0);
            case AMIGO_REQUEST_STATUS_BUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   172fe:	29 c0       	rjmp	.+82     	; 0x17352 <Amigo_Execute+0x1a0>
   17300:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   17304:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Request Status Buffered]\n");
   17306:	11 c0       	rjmp	.+34     	; 0x1732a <Amigo_Execute+0x178>
   17308:	8a e7       	ldi	r24, 0x7A	; 122
   1730a:	94 e2       	ldi	r25, 0x24	; 36
#endif
                return ( amigo_send_status() );
            case AMIGO_REQUEST_STATUS_UNBUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1730c:	06 c0       	rjmp	.+12     	; 0x1731a <Amigo_Execute+0x168>
   1730e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   17312:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Exicute Request Status Unbuffered]\n");
   17314:	0a c0       	rjmp	.+20     	; 0x1732a <Amigo_Execute+0x178>
   17316:	8f e4       	ldi	r24, 0x4F	; 79
   17318:	94 e2       	ldi	r25, 0x24	; 36
   1731a:	a0 e0       	ldi	r26, 0x00	; 0
   1731c:	ed b7       	in	r30, 0x3d	; 61
   1731e:	fe b7       	in	r31, 0x3e	; 62
   17320:	81 83       	std	Z+1, r24	; 0x01
   17322:	92 83       	std	Z+2, r25	; 0x02
   17324:	a3 83       	std	Z+3, r26	; 0x03
   17326:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
#endif
                return ( amigo_send_status() );
   1732a:	0e 94 d2 b0 	call	0x161a4	; 0x161a4 <amigo_send_status>
            case AMIGO_REQUEST_LOGICAL_ADDRESS:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1732e:	16 c0       	rjmp	.+44     	; 0x1735c <Amigo_Execute+0x1aa>
   17330:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   17334:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Request Logical Address]\n");
   17336:	0a c0       	rjmp	.+20     	; 0x1734c <Amigo_Execute+0x19a>
   17338:	86 e2       	ldi	r24, 0x26	; 38
   1733a:	94 e2       	ldi	r25, 0x24	; 36
   1733c:	a0 e0       	ldi	r26, 0x00	; 0
   1733e:	ed b7       	in	r30, 0x3d	; 61
   17340:	fe b7       	in	r31, 0x3e	; 62
   17342:	81 83       	std	Z+1, r24	; 0x01
   17344:	92 83       	std	Z+2, r25	; 0x02
   17346:	a3 83       	std	Z+3, r26	; 0x03
   17348:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
#endif
                return ( amigo_send_logical_address() );
   1734c:	0e 94 74 b0 	call	0x160e8	; 0x160e8 <amigo_send_logical_address>
            default:
                return ( amigo_todo(secondary) );
   17350:	05 c0       	rjmp	.+10     	; 0x1735c <Amigo_Execute+0x1aa>
   17352:	88 e6       	ldi	r24, 0x68	; 104
   17354:	b2 db       	rcall	.-2204   	; 0x16aba <amigo_todo>
    if(secondary == 0x68)
    {
        switch(AMIGOs->state)
        {
            case AMIGO_IDLE:
                return(0);
   17356:	02 c0       	rjmp	.+4      	; 0x1735c <Amigo_Execute+0x1aa>
   17358:	80 e0       	ldi	r24, 0x00	; 0
                return ( amigo_todo(secondary) );
        }
        AMIGOs->state = AMIGO_IDLE;
    }
    return(0);
}
   1735a:	90 e0       	ldi	r25, 0x00	; 0
   1735c:	cd b7       	in	r28, 0x3d	; 61
   1735e:	de b7       	in	r29, 0x3e	; 62
   17360:	29 96       	adiw	r28, 0x09	; 9
   17362:	e2 e0       	ldi	r30, 0x02	; 2
   17364:	0c 94 0a e0 	jmp	0x1c014	; 0x1c014 <__epilogue_restores__+0x20>

00017368 <AMIGO_COMMANDS>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list.

int AMIGO_COMMANDS(uint8_t ch)
{
   17368:	cf 93       	push	r28
   1736a:	df 93       	push	r29
   1736c:	c8 2f       	mov	r28, r24

    if(AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening))
   1736e:	80 91 b2 1e 	lds	r24, 0x1EB2	; 0x801eb2 <talking>
   17372:	90 e0       	ldi	r25, 0x00	; 0
   17374:	0e 94 b8 8b 	call	0x11770	; 0x11770 <AMIGO_is_MTA>
   17378:	89 2b       	or	r24, r25
   1737a:	51 f0       	breq	.+20     	; 0x17390 <AMIGO_COMMANDS+0x28>
    {

        if(talking == UNT && AMIGO_is_MLA(listening))
   1737c:	80 91 b2 1e 	lds	r24, 0x1EB2	; 0x801eb2 <talking>
   17380:	8f 35       	cpi	r24, 0x5F	; 95
   17382:	71 f4       	brne	.+28     	; 0x173a0 <AMIGO_COMMANDS+0x38>
   17384:	80 91 b4 1e 	lds	r24, 0x1EB4	; 0x801eb4 <listening>
   17388:	90 e0       	ldi	r25, 0x00	; 0
   1738a:	0e 94 a7 8b 	call	0x1174e	; 0x1174e <AMIGO_is_MLA>
   1738e:	08 c0       	rjmp	.+16     	; 0x173a0 <AMIGO_COMMANDS+0x38>
/// @see  gpib.h ERROR_MASK defines for a full list.

int AMIGO_COMMANDS(uint8_t ch)
{

    if(AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening))
   17390:	80 91 b4 1e 	lds	r24, 0x1EB4	; 0x801eb4 <listening>
   17394:	90 e0       	ldi	r25, 0x00	; 0
   17396:	0e 94 a7 8b 	call	0x1174e	; 0x1174e <AMIGO_is_MLA>
   1739a:	89 2b       	or	r24, r25
   1739c:	79 f7       	brne	.-34     	; 0x1737c <AMIGO_COMMANDS+0x14>
   1739e:	76 c0       	rjmp	.+236    	; 0x1748c <AMIGO_COMMANDS+0x124>

        if(talking == UNT && AMIGO_is_MLA(listening))
        {
            // printf("AMIGO COMMANDS %02XH NO TALK ADDRESS!\n", ch);
        }
        if(listening == 0 && AMIGO_is_MTA(talking))
   173a0:	80 91 b4 1e 	lds	r24, 0x1EB4	; 0x801eb4 <listening>
   173a4:	81 11       	cpse	r24, r1
   173a6:	05 c0       	rjmp	.+10     	; 0x173b2 <AMIGO_COMMANDS+0x4a>
   173a8:	80 91 b2 1e 	lds	r24, 0x1EB2	; 0x801eb2 <talking>
   173ac:	90 e0       	ldi	r25, 0x00	; 0
   173ae:	0e 94 b8 8b 	call	0x11770	; 0x11770 <AMIGO_is_MTA>
        {
            // printf("AMIGO COMMANDS %02XH NO LISTEN ADDRESS!\n", ch);
        }

        if(ch == 0x60 && (AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening)) )
   173b2:	c0 36       	cpi	r28, 0x60	; 96
   173b4:	99 f4       	brne	.+38     	; 0x173dc <AMIGO_COMMANDS+0x74>
   173b6:	80 91 b2 1e 	lds	r24, 0x1EB2	; 0x801eb2 <talking>
   173ba:	90 e0       	ldi	r25, 0x00	; 0
   173bc:	0e 94 b8 8b 	call	0x11770	; 0x11770 <AMIGO_is_MTA>
   173c0:	89 2b       	or	r24, r25
   173c2:	19 f0       	breq	.+6      	; 0x173ca <AMIGO_COMMANDS+0x62>
        {
            return (Amigo_Execute(ch) );
   173c4:	80 e6       	ldi	r24, 0x60	; 96
   173c6:	90 e0       	ldi	r25, 0x00	; 0
   173c8:	14 c0       	rjmp	.+40     	; 0x173f2 <AMIGO_COMMANDS+0x8a>
        if(listening == 0 && AMIGO_is_MTA(talking))
        {
            // printf("AMIGO COMMANDS %02XH NO LISTEN ADDRESS!\n", ch);
        }

        if(ch == 0x60 && (AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening)) )
   173ca:	80 91 b4 1e 	lds	r24, 0x1EB4	; 0x801eb4 <listening>
   173ce:	90 e0       	ldi	r25, 0x00	; 0
   173d0:	0e 94 a7 8b 	call	0x1174e	; 0x1174e <AMIGO_is_MLA>
   173d4:	89 2b       	or	r24, r25
   173d6:	09 f4       	brne	.+2      	; 0x173da <AMIGO_COMMANDS+0x72>
   173d8:	59 c0       	rjmp	.+178    	; 0x1748c <AMIGO_COMMANDS+0x124>
   173da:	f4 cf       	rjmp	.-24     	; 0x173c4 <AMIGO_COMMANDS+0x5c>
        {
            return (Amigo_Execute(ch) );
        }

        if(ch == 0x68 && AMIGO_is_MTA(talking) )
   173dc:	c8 36       	cpi	r28, 0x68	; 104
   173de:	c1 f4       	brne	.+48     	; 0x17410 <AMIGO_COMMANDS+0xa8>
   173e0:	80 91 b2 1e 	lds	r24, 0x1EB2	; 0x801eb2 <talking>
   173e4:	90 e0       	ldi	r25, 0x00	; 0
   173e6:	0e 94 b8 8b 	call	0x11770	; 0x11770 <AMIGO_is_MTA>
   173ea:	89 2b       	or	r24, r25
   173ec:	21 f0       	breq	.+8      	; 0x173f6 <AMIGO_COMMANDS+0x8e>
        {
            return (Amigo_Execute(ch) );
   173ee:	88 e6       	ldi	r24, 0x68	; 104
   173f0:	90 e0       	ldi	r25, 0x00	; 0
   173f2:	df de       	rcall	.-578    	; 0x171b2 <Amigo_Execute>
   173f4:	0b c0       	rjmp	.+22     	; 0x1740c <AMIGO_COMMANDS+0xa4>
        }

        if(ch == 0x68 && AMIGO_is_MLA(listening) ) // Single byte command
   173f6:	80 91 b4 1e 	lds	r24, 0x1EB4	; 0x801eb4 <listening>
   173fa:	90 e0       	ldi	r25, 0x00	; 0
   173fc:	0e 94 a7 8b 	call	0x1174e	; 0x1174e <AMIGO_is_MLA>
   17400:	89 2b       	or	r24, r25
   17402:	09 f4       	brne	.+2      	; 0x17406 <AMIGO_COMMANDS+0x9e>
   17404:	43 c0       	rjmp	.+134    	; 0x1748c <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17406:	88 e6       	ldi	r24, 0x68	; 104
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x6c && AMIGO_is_MLA(listening) ) // Single byte command
        {
            return (Amigo_Command(ch) );
   17408:	90 e0       	ldi	r25, 0x00	; 0
   1740a:	ef db       	rcall	.-2082   	; 0x16bea <Amigo_Command>
        }
        if(ch == 0x70 && AMIGO_is_MTA(talking))
        {
            gpib_disable_PPR(AMIGOp->HEADER.PPR);
            return( amigo_cmd_dsj() );
   1740c:	ec 01       	movw	r28, r24
   1740e:	40 c0       	rjmp	.+128    	; 0x17490 <AMIGO_COMMANDS+0x128>

        if(ch == 0x68 && AMIGO_is_MLA(listening) ) // Single byte command
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x69 && AMIGO_is_MLA(listening) ) // Single byte command
   17410:	c9 36       	cpi	r28, 0x69	; 105
   17412:	51 f4       	brne	.+20     	; 0x17428 <AMIGO_COMMANDS+0xc0>
   17414:	80 91 b4 1e 	lds	r24, 0x1EB4	; 0x801eb4 <listening>
   17418:	90 e0       	ldi	r25, 0x00	; 0
   1741a:	0e 94 a7 8b 	call	0x1174e	; 0x1174e <AMIGO_is_MLA>
   1741e:	89 2b       	or	r24, r25
   17420:	a9 f1       	breq	.+106    	; 0x1748c <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17422:	89 e6       	ldi	r24, 0x69	; 105
   17424:	90 e0       	ldi	r25, 0x00	; 0
   17426:	f1 cf       	rjmp	.-30     	; 0x1740a <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x6a && AMIGO_is_MLA(listening) ) // Single byte command
   17428:	ca 36       	cpi	r28, 0x6A	; 106
   1742a:	51 f4       	brne	.+20     	; 0x17440 <AMIGO_COMMANDS+0xd8>
   1742c:	80 91 b4 1e 	lds	r24, 0x1EB4	; 0x801eb4 <listening>
   17430:	90 e0       	ldi	r25, 0x00	; 0
   17432:	0e 94 a7 8b 	call	0x1174e	; 0x1174e <AMIGO_is_MLA>
   17436:	89 2b       	or	r24, r25
   17438:	49 f1       	breq	.+82     	; 0x1748c <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   1743a:	8a e6       	ldi	r24, 0x6A	; 106
   1743c:	90 e0       	ldi	r25, 0x00	; 0
   1743e:	e5 cf       	rjmp	.-54     	; 0x1740a <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x6c && AMIGO_is_MLA(listening) ) // Single byte command
   17440:	cc 36       	cpi	r28, 0x6C	; 108
   17442:	51 f4       	brne	.+20     	; 0x17458 <AMIGO_COMMANDS+0xf0>
   17444:	80 91 b4 1e 	lds	r24, 0x1EB4	; 0x801eb4 <listening>
   17448:	90 e0       	ldi	r25, 0x00	; 0
   1744a:	0e 94 a7 8b 	call	0x1174e	; 0x1174e <AMIGO_is_MLA>
   1744e:	89 2b       	or	r24, r25
   17450:	e9 f0       	breq	.+58     	; 0x1748c <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17452:	8c e6       	ldi	r24, 0x6C	; 108
   17454:	90 e0       	ldi	r25, 0x00	; 0
   17456:	d9 cf       	rjmp	.-78     	; 0x1740a <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x70 && AMIGO_is_MTA(talking))
   17458:	c0 37       	cpi	r28, 0x70	; 112
   1745a:	c1 f4       	brne	.+48     	; 0x1748c <AMIGO_COMMANDS+0x124>
   1745c:	80 91 b2 1e 	lds	r24, 0x1EB2	; 0x801eb2 <talking>
   17460:	90 e0       	ldi	r25, 0x00	; 0
   17462:	0e 94 b8 8b 	call	0x11770	; 0x11770 <AMIGO_is_MTA>
   17466:	ec 01       	movw	r28, r24
   17468:	89 2b       	or	r24, r25
   1746a:	51 f0       	breq	.+20     	; 0x17480 <AMIGO_COMMANDS+0x118>
        {
            gpib_disable_PPR(AMIGOp->HEADER.PPR);
   1746c:	e0 91 2f 19 	lds	r30, 0x192F	; 0x80192f <AMIGOp>
   17470:	f0 91 30 19 	lds	r31, 0x1930	; 0x801930 <AMIGOp+0x1>
   17474:	81 81       	ldd	r24, Z+1	; 0x01
   17476:	90 e0       	ldi	r25, 0x00	; 0
   17478:	0e 94 8e 85 	call	0x10b1c	; 0x10b1c <gpib_disable_PPR>
            return( amigo_cmd_dsj() );
   1747c:	fc d9       	rcall	.-3080   	; 0x16876 <amigo_cmd_dsj>
   1747e:	c6 cf       	rjmp	.-116    	; 0x1740c <AMIGO_COMMANDS+0xa4>
        }
        if(ch == 0x7e && ch == 0x7f)
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x70 && AMIGO_is_MLA(listening))
   17480:	80 91 b4 1e 	lds	r24, 0x1EB4	; 0x801eb4 <listening>
   17484:	90 e0       	ldi	r25, 0x00	; 0
   17486:	0e 94 a7 8b 	call	0x1174e	; 0x1174e <AMIGO_is_MLA>
   1748a:	02 c0       	rjmp	.+4      	; 0x17490 <AMIGO_COMMANDS+0x128>
        {
            // NOP
        }
    }
    return(0);
   1748c:	c0 e0       	ldi	r28, 0x00	; 0
   1748e:	d0 e0       	ldi	r29, 0x00	; 0
}
   17490:	ce 01       	movw	r24, r28
   17492:	df 91       	pop	r29
   17494:	cf 91       	pop	r28
   17496:	08 95       	ret

00017498 <printer_init>:
/// - Only called once after power on by main().
/// @return  void

void printer_init()
{
    plot.error = 0;
   17498:	e8 e6       	ldi	r30, 0x68	; 104
   1749a:	f9 e1       	ldi	r31, 0x19	; 25
   1749c:	10 86       	std	Z+8, r1	; 0x08
    plot.count = 0;
   1749e:	10 82       	st	Z, r1
   174a0:	11 82       	std	Z+1, r1	; 0x01
   174a2:	12 82       	std	Z+2, r1	; 0x02
   174a4:	13 82       	std	Z+3, r1	; 0x03
    plot.ind = 0;
   174a6:	15 82       	std	Z+5, r1	; 0x05
   174a8:	14 82       	std	Z+4, r1	; 0x04
    plot.fp = NULL;
   174aa:	12 86       	std	Z+10, r1	; 0x0a
   174ac:	11 86       	std	Z+9, r1	; 0x09
    plot.buf = NULL;
   174ae:	14 86       	std	Z+12, r1	; 0x0c
   174b0:	13 86       	std	Z+11, r1	; 0x0b
   174b2:	08 95       	ret

000174b4 <receive_plot_flush>:
/// @see posix.h
/// @see printer_buffer()
/// @return  file handle

int receive_plot_flush()
{
   174b4:	cf 93       	push	r28
   174b6:	df 93       	push	r29
   174b8:	ad b7       	in	r26, 0x3d	; 61
   174ba:	be b7       	in	r27, 0x3e	; 62
   174bc:	17 97       	sbiw	r26, 0x07	; 7
   174be:	0f b6       	in	r0, 0x3f	; 63
   174c0:	f8 94       	cli
   174c2:	be bf       	out	0x3e, r27	; 62
   174c4:	0f be       	out	0x3f, r0	; 63
   174c6:	ad bf       	out	0x3d, r26	; 61
    int ret;
    int fno;

    if(plot.fp == NULL || plot.ind == 0)
   174c8:	20 91 71 19 	lds	r18, 0x1971	; 0x801971 <plot+0x9>
   174cc:	30 91 72 19 	lds	r19, 0x1972	; 0x801972 <plot+0xa>
   174d0:	21 15       	cp	r18, r1
   174d2:	31 05       	cpc	r19, r1
   174d4:	09 f4       	brne	.+2      	; 0x174d8 <receive_plot_flush+0x24>
   174d6:	45 c0       	rjmp	.+138    	; 0x17562 <receive_plot_flush+0xae>
   174d8:	80 91 6c 19 	lds	r24, 0x196C	; 0x80196c <plot+0x4>
   174dc:	90 91 6d 19 	lds	r25, 0x196D	; 0x80196d <plot+0x5>
   174e0:	00 97       	sbiw	r24, 0x00	; 0
   174e2:	09 f4       	brne	.+2      	; 0x174e6 <receive_plot_flush+0x32>
   174e4:	40 c0       	rjmp	.+128    	; 0x17566 <receive_plot_flush+0xb2>
        return(0);

    ret  = fwrite(plot.buf, 1, plot.ind , plot.fp);
   174e6:	ac 01       	movw	r20, r24
   174e8:	61 e0       	ldi	r22, 0x01	; 1
   174ea:	70 e0       	ldi	r23, 0x00	; 0
   174ec:	80 91 73 19 	lds	r24, 0x1973	; 0x801973 <plot+0xb>
   174f0:	90 91 74 19 	lds	r25, 0x1974	; 0x801974 <plot+0xc>
   174f4:	0e 94 a4 7b 	call	0xf748	; 0xf748 <fwrite>
   174f8:	ec 01       	movw	r28, r24
    if(ret != plot.ind)
   174fa:	80 91 6c 19 	lds	r24, 0x196C	; 0x80196c <plot+0x4>
   174fe:	90 91 6d 19 	lds	r25, 0x196D	; 0x80196d <plot+0x5>
   17502:	c8 17       	cp	r28, r24
   17504:	d9 07       	cpc	r29, r25
   17506:	09 f1       	breq	.+66     	; 0x1754a <receive_plot_flush+0x96>
    {
        if(debuglevel & (GPIB_PPR + GPIB_DEVICE_STATE_MESSAGES))
   17508:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1750c:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   17510:	82 72       	andi	r24, 0x22	; 34
   17512:	99 27       	eor	r25, r25
   17514:	89 2b       	or	r24, r25
   17516:	b1 f0       	breq	.+44     	; 0x17544 <receive_plot_flush+0x90>
        {
            perror("receive_plot_flush");
   17518:	85 ea       	ldi	r24, 0xA5	; 165
   1751a:	95 e1       	ldi	r25, 0x15	; 21
   1751c:	0e 94 ad 77 	call	0xef5a	; 0xef5a <perror>
            printf("write failed: wanted %d, got:%d\n", plot.ind, ret);
   17520:	ed b7       	in	r30, 0x3d	; 61
   17522:	fe b7       	in	r31, 0x3e	; 62
   17524:	d7 83       	std	Z+7, r29	; 0x07
   17526:	c6 83       	std	Z+6, r28	; 0x06
   17528:	80 91 6c 19 	lds	r24, 0x196C	; 0x80196c <plot+0x4>
   1752c:	90 91 6d 19 	lds	r25, 0x196D	; 0x80196d <plot+0x5>
   17530:	95 83       	std	Z+5, r25	; 0x05
   17532:	84 83       	std	Z+4, r24	; 0x04
   17534:	82 e7       	ldi	r24, 0x72	; 114
   17536:	9c e2       	ldi	r25, 0x2C	; 44
   17538:	a0 e0       	ldi	r26, 0x00	; 0
   1753a:	81 83       	std	Z+1, r24	; 0x01
   1753c:	92 83       	std	Z+2, r25	; 0x02
   1753e:	a3 83       	std	Z+3, r26	; 0x03
   17540:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
        }
        return(-1);
   17544:	8f ef       	ldi	r24, 0xFF	; 255
   17546:	9f ef       	ldi	r25, 0xFF	; 255
   17548:	0e c0       	rjmp	.+28     	; 0x17566 <receive_plot_flush+0xb2>
    }

    fno = fileno( plot.fp );
   1754a:	80 91 71 19 	lds	r24, 0x1971	; 0x801971 <plot+0x9>
   1754e:	90 91 72 19 	lds	r25, 0x1972	; 0x801972 <plot+0xa>
   17552:	0e 94 f7 75 	call	0xebee	; 0xebee <fileno>
    if(fno < 0)
   17556:	97 fd       	sbrc	r25, 7
   17558:	f5 cf       	rjmp	.-22     	; 0x17544 <receive_plot_flush+0x90>
        return(-1);
    ///@brief sync filesystem after every write 
    syncfs( fno );
   1755a:	0e 94 ee 7a 	call	0xf5dc	; 0xf5dc <syncfs>
    return (ret);
   1755e:	ce 01       	movw	r24, r28
   17560:	02 c0       	rjmp	.+4      	; 0x17566 <receive_plot_flush+0xb2>
{
    int ret;
    int fno;

    if(plot.fp == NULL || plot.ind == 0)
        return(0);
   17562:	80 e0       	ldi	r24, 0x00	; 0
   17564:	90 e0       	ldi	r25, 0x00	; 0
    if(fno < 0)
        return(-1);
    ///@brief sync filesystem after every write 
    syncfs( fno );
    return (ret);
}
   17566:	cd b7       	in	r28, 0x3d	; 61
   17568:	de b7       	in	r29, 0x3e	; 62
   1756a:	27 96       	adiw	r28, 0x07	; 7
   1756c:	e2 e0       	ldi	r30, 0x02	; 2
   1756e:	0c 94 0a e0 	jmp	0x1c014	; 0x1c014 <__epilogue_restores__+0x20>

00017572 <printer_close>:
/// @see posix.h
/// @return  void
/// FYI: for the HP54645D plots end with: pd;pu;pu;sp0;
/// This gets called
void printer_close()
{
   17572:	ad b7       	in	r26, 0x3d	; 61
   17574:	be b7       	in	r27, 0x3e	; 62
   17576:	17 97       	sbiw	r26, 0x07	; 7
   17578:	0f b6       	in	r0, 0x3f	; 63
   1757a:	f8 94       	cli
   1757c:	be bf       	out	0x3e, r27	; 62
   1757e:	0f be       	out	0x3f, r0	; 63
    if( receive_plot_flush() < 0 )
   17580:	ad bf       	out	0x3d, r26	; 61
   17582:	98 df       	rcall	.-208    	; 0x174b4 <receive_plot_flush>
   17584:	97 ff       	sbrs	r25, 7
        plot.error = 1;
   17586:	03 c0       	rjmp	.+6      	; 0x1758e <printer_close+0x1c>
   17588:	81 e0       	ldi	r24, 0x01	; 1
   1758a:	80 93 70 19 	sts	0x1970, r24	; 0x801970 <plot+0x8>

    if(debuglevel & (GPIB_PPR + GPIB_DEVICE_STATE_MESSAGES))
   1758e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   17592:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   17596:	82 72       	andi	r24, 0x22	; 34
   17598:	99 27       	eor	r25, r25
   1759a:	89 2b       	or	r24, r25
    {
        if(plot.error)
   1759c:	71 f0       	breq	.+28     	; 0x175ba <printer_close+0x48>
   1759e:	80 91 70 19 	lds	r24, 0x1970	; 0x801970 <plot+0x8>
   175a2:	88 23       	and	r24, r24
            printf("ERROR durring write\n");
   175a4:	51 f0       	breq	.+20     	; 0x175ba <printer_close+0x48>
   175a6:	81 ea       	ldi	r24, 0xA1	; 161
   175a8:	9c e2       	ldi	r25, 0x2C	; 44
   175aa:	a0 e0       	ldi	r26, 0x00	; 0
   175ac:	ed b7       	in	r30, 0x3d	; 61
   175ae:	fe b7       	in	r31, 0x3e	; 62
   175b0:	81 83       	std	Z+1, r24	; 0x01
   175b2:	92 83       	std	Z+2, r25	; 0x02
   175b4:	a3 83       	std	Z+3, r26	; 0x03
   175b6:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    }

    if(plot.fp)
   175ba:	80 91 71 19 	lds	r24, 0x1971	; 0x801971 <plot+0x9>
   175be:	90 91 72 19 	lds	r25, 0x1972	; 0x801972 <plot+0xa>
   175c2:	00 97       	sbiw	r24, 0x00	; 0
    {
        fclose(plot.fp);
   175c4:	e1 f0       	breq	.+56     	; 0x175fe <printer_close+0x8c>
   175c6:	0e 94 26 7c 	call	0xf84c	; 0xf84c <fclose>
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   175ca:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   175ce:	85 ff       	sbrs	r24, 5
            printf("\nDONE: %08ld\n",plot.count);
   175d0:	16 c0       	rjmp	.+44     	; 0x175fe <printer_close+0x8c>
   175d2:	80 91 68 19 	lds	r24, 0x1968	; 0x801968 <plot>
   175d6:	90 91 69 19 	lds	r25, 0x1969	; 0x801969 <plot+0x1>
   175da:	a0 91 6a 19 	lds	r26, 0x196A	; 0x80196a <plot+0x2>
   175de:	b0 91 6b 19 	lds	r27, 0x196B	; 0x80196b <plot+0x3>
   175e2:	ed b7       	in	r30, 0x3d	; 61
   175e4:	fe b7       	in	r31, 0x3e	; 62
   175e6:	84 83       	std	Z+4, r24	; 0x04
   175e8:	95 83       	std	Z+5, r25	; 0x05
   175ea:	a6 83       	std	Z+6, r26	; 0x06
   175ec:	b7 83       	std	Z+7, r27	; 0x07
   175ee:	83 e9       	ldi	r24, 0x93	; 147
   175f0:	9c e2       	ldi	r25, 0x2C	; 44
   175f2:	a0 e0       	ldi	r26, 0x00	; 0
   175f4:	81 83       	std	Z+1, r24	; 0x01
   175f6:	92 83       	std	Z+2, r25	; 0x02
   175f8:	a3 83       	std	Z+3, r26	; 0x03
   175fa:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    }

    if(plot.buf)
   175fe:	80 91 73 19 	lds	r24, 0x1973	; 0x801973 <plot+0xb>
   17602:	90 91 74 19 	lds	r25, 0x1974	; 0x801974 <plot+0xc>
   17606:	00 97       	sbiw	r24, 0x00	; 0
        safefree(plot.buf);
   17608:	11 f0       	breq	.+4      	; 0x1760e <printer_close+0x9c>
    printer_init();
   1760a:	0e 94 fd 27 	call	0x4ffa	; 0x4ffa <safefree>
}
   1760e:	44 df       	rcall	.-376    	; 0x17498 <printer_init>
   17610:	ad b7       	in	r26, 0x3d	; 61
   17612:	be b7       	in	r27, 0x3e	; 62
   17614:	17 96       	adiw	r26, 0x07	; 7
   17616:	0f b6       	in	r0, 0x3f	; 63
   17618:	f8 94       	cli
   1761a:	be bf       	out	0x3e, r27	; 62
   1761c:	0f be       	out	0x3f, r0	; 63
   1761e:	ad bf       	out	0x3d, r26	; 61
   17620:	08 95       	ret

00017622 <printer_open>:
/// @see posix.c
/// @see posix.h
/// @return  void

void printer_open(char *name)
{
   17622:	ad e5       	ldi	r26, 0x5D	; 93
   17624:	b0 e0       	ldi	r27, 0x00	; 0
   17626:	e7 e1       	ldi	r30, 0x17	; 23
   17628:	fb eb       	ldi	r31, 0xBB	; 187
   1762a:	0c 94 ea df 	jmp	0x1bfd4	; 0x1bfd4 <__prologue_saves__+0x18>
   1762e:	8c 01       	movw	r16, r24

    char *ptr;

    if(!name)
   17630:	89 2b       	or	r24, r25
   17632:	09 f0       	breq	.+2      	; 0x17636 <printer_open+0x14>
   17634:	4f c0       	rjmp	.+158    	; 0x176d4 <printer_open+0xb2>
        time_t seconds;
        tm_t *tc;
        ts_t ts;
        char fname[64];

        clock_gettime(0, (ts_t *) &ts);
   17636:	be 01       	movw	r22, r28
   17638:	6e 5a       	subi	r22, 0xAE	; 174
   1763a:	7f 4f       	sbci	r23, 0xFF	; 255
   1763c:	80 e0       	ldi	r24, 0x00	; 0
   1763e:	90 e0       	ldi	r25, 0x00	; 0
   17640:	0e 94 1a 33 	call	0x6634	; 0x6634 <clock_gettime>
        seconds = ts.tv_sec;
   17644:	66 96       	adiw	r28, 0x16	; 22
   17646:	8c ad       	ldd	r24, Y+60	; 0x3c
   17648:	9d ad       	ldd	r25, Y+61	; 0x3d
   1764a:	ae ad       	ldd	r26, Y+62	; 0x3e
   1764c:	bf ad       	ldd	r27, Y+63	; 0x3f
   1764e:	66 97       	sbiw	r28, 0x16	; 22
   17650:	6e 96       	adiw	r28, 0x1e	; 30
   17652:	8c af       	std	Y+60, r24	; 0x3c
   17654:	9d af       	std	Y+61, r25	; 0x3d
   17656:	ae af       	std	Y+62, r26	; 0x3e
   17658:	bf af       	std	Y+63, r27	; 0x3f
   1765a:	6e 97       	sbiw	r28, 0x1e	; 30
        tc = gmtime(&seconds);
   1765c:	ce 01       	movw	r24, r28
   1765e:	86 5a       	subi	r24, 0xA6	; 166
   17660:	9f 4f       	sbci	r25, 0xFF	; 255
   17662:	0e 94 04 37 	call	0x6e08	; 0x6e08 <gmtime>
   17666:	8c 01       	movw	r16, r24
        sprintf(fname,"/plot-%02d%s%04d-%02d%02d%02d.plt",
   17668:	fc 01       	movw	r30, r24
   1766a:	e6 80       	ldd	r14, Z+6	; 0x06
   1766c:	f7 80       	ldd	r15, Z+7	; 0x07
   1766e:	80 85       	ldd	r24, Z+8	; 0x08
   17670:	91 85       	ldd	r25, Z+9	; 0x09
   17672:	0e 94 e0 35 	call	0x6bc0	; 0x6bc0 <tm_mon_to_ascii>
   17676:	f8 01       	movw	r30, r16
   17678:	20 81       	ld	r18, Z
   1767a:	31 81       	ldd	r19, Z+1	; 0x01
   1767c:	ed b7       	in	r30, 0x3d	; 61
   1767e:	fe b7       	in	r31, 0x3e	; 62
   17680:	31 8b       	std	Z+17, r19	; 0x11
   17682:	20 8b       	std	Z+16, r18	; 0x10
   17684:	f8 01       	movw	r30, r16
   17686:	22 81       	ldd	r18, Z+2	; 0x02
   17688:	33 81       	ldd	r19, Z+3	; 0x03
   1768a:	ed b7       	in	r30, 0x3d	; 61
   1768c:	fe b7       	in	r31, 0x3e	; 62
   1768e:	37 87       	std	Z+15, r19	; 0x0f
   17690:	26 87       	std	Z+14, r18	; 0x0e
   17692:	f8 01       	movw	r30, r16
   17694:	24 81       	ldd	r18, Z+4	; 0x04
   17696:	35 81       	ldd	r19, Z+5	; 0x05
   17698:	ed b7       	in	r30, 0x3d	; 61
   1769a:	fe b7       	in	r31, 0x3e	; 62
   1769c:	35 87       	std	Z+13, r19	; 0x0d
   1769e:	24 87       	std	Z+12, r18	; 0x0c
   176a0:	f8 01       	movw	r30, r16
   176a2:	22 85       	ldd	r18, Z+10	; 0x0a
   176a4:	33 85       	ldd	r19, Z+11	; 0x0b
   176a6:	24 59       	subi	r18, 0x94	; 148
   176a8:	38 4f       	sbci	r19, 0xF8	; 248
   176aa:	ed b7       	in	r30, 0x3d	; 61
   176ac:	fe b7       	in	r31, 0x3e	; 62
   176ae:	33 87       	std	Z+11, r19	; 0x0b
   176b0:	22 87       	std	Z+10, r18	; 0x0a
   176b2:	91 87       	std	Z+9, r25	; 0x09
   176b4:	80 87       	std	Z+8, r24	; 0x08
   176b6:	f7 82       	std	Z+7, r15	; 0x07
   176b8:	e6 82       	std	Z+6, r14	; 0x06
   176ba:	88 ed       	ldi	r24, 0xD8	; 216
   176bc:	9c e2       	ldi	r25, 0x2C	; 44
   176be:	a0 e0       	ldi	r26, 0x00	; 0
   176c0:	83 83       	std	Z+3, r24	; 0x03
   176c2:	94 83       	std	Z+4, r25	; 0x04
   176c4:	a5 83       	std	Z+5, r26	; 0x05
   176c6:	8e 01       	movw	r16, r28
   176c8:	0e 5e       	subi	r16, 0xEE	; 238
   176ca:	1f 4f       	sbci	r17, 0xFF	; 255
   176cc:	12 83       	std	Z+2, r17	; 0x02
   176ce:	01 83       	std	Z+1, r16	; 0x01
   176d0:	0e 94 91 45 	call	0x8b22	; 0x8b22 <sprintf_P>
    else
    {
        ptr = name;
    }

    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   176d4:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   176d8:	85 ff       	sbrs	r24, 5
   176da:	0c c0       	rjmp	.+24     	; 0x176f4 <printer_open+0xd2>
        printf("Capturing plot to:%s\n", ptr);
   176dc:	ed b7       	in	r30, 0x3d	; 61
   176de:	fe b7       	in	r31, 0x3e	; 62
   176e0:	15 83       	std	Z+5, r17	; 0x05
   176e2:	04 83       	std	Z+4, r16	; 0x04
   176e4:	82 ec       	ldi	r24, 0xC2	; 194
   176e6:	9c e2       	ldi	r25, 0x2C	; 44
   176e8:	a0 e0       	ldi	r26, 0x00	; 0
   176ea:	81 83       	std	Z+1, r24	; 0x01
   176ec:	92 83       	std	Z+2, r25	; 0x02
   176ee:	a3 83       	std	Z+3, r26	; 0x03
   176f0:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>

    plot.fp = fopen(ptr,"wb");
   176f4:	6e ed       	ldi	r22, 0xDE	; 222
   176f6:	78 e0       	ldi	r23, 0x08	; 8
   176f8:	c8 01       	movw	r24, r16
   176fa:	0e 94 7c 7d 	call	0xfaf8	; 0xfaf8 <fopen>
   176fe:	90 93 72 19 	sts	0x1972, r25	; 0x801972 <plot+0xa>
   17702:	80 93 71 19 	sts	0x1971, r24	; 0x801971 <plot+0x9>
    if(plot.fp == NULL)
   17706:	89 2b       	or	r24, r25
   17708:	b9 f4       	brne	.+46     	; 0x17738 <printer_open+0x116>
    {
        if(debuglevel & (GPIB_PPR + GPIB_DEVICE_STATE_MESSAGES))
   1770a:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1770e:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   17712:	82 72       	andi	r24, 0x22	; 34
   17714:	99 27       	eor	r25, r25
   17716:	89 2b       	or	r24, r25
   17718:	11 f1       	breq	.+68     	; 0x1775e <printer_open+0x13c>
        {
            perror("open failed");
   1771a:	89 e7       	ldi	r24, 0x79	; 121
   1771c:	9d e0       	ldi	r25, 0x0D	; 13
   1771e:	0e 94 ad 77 	call	0xef5a	; 0xef5a <perror>
            printf("exiting...\n");
   17722:	86 eb       	ldi	r24, 0xB6	; 182
   17724:	9c e2       	ldi	r25, 0x2C	; 44
   17726:	a0 e0       	ldi	r26, 0x00	; 0
   17728:	ed b7       	in	r30, 0x3d	; 61
   1772a:	fe b7       	in	r31, 0x3e	; 62
   1772c:	81 83       	std	Z+1, r24	; 0x01
   1772e:	92 83       	std	Z+2, r25	; 0x02
   17730:	a3 83       	std	Z+3, r26	; 0x03
   17732:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   17736:	13 c0       	rjmp	.+38     	; 0x1775e <printer_open+0x13c>
        }
        return;
    }

    plot.buf = calloc(512+1,1);
   17738:	61 e0       	ldi	r22, 0x01	; 1
   1773a:	70 e0       	ldi	r23, 0x00	; 0
   1773c:	81 e0       	ldi	r24, 0x01	; 1
   1773e:	92 e0       	ldi	r25, 0x02	; 2
   17740:	0e 94 b1 27 	call	0x4f62	; 0x4f62 <safecalloc>
   17744:	90 93 74 19 	sts	0x1974, r25	; 0x801974 <plot+0xc>
   17748:	80 93 73 19 	sts	0x1973, r24	; 0x801973 <plot+0xb>
    if(plot.buf == NULL)
   1774c:	89 2b       	or	r24, r25
        printer_close();
   1774e:	09 f4       	brne	.+2      	; 0x17752 <printer_open+0x130>
    plot.size = 512;
   17750:	10 df       	rcall	.-480    	; 0x17572 <printer_close>
   17752:	80 e0       	ldi	r24, 0x00	; 0
   17754:	92 e0       	ldi	r25, 0x02	; 2
   17756:	90 93 6f 19 	sts	0x196F, r25	; 0x80196f <plot+0x7>
   1775a:	80 93 6e 19 	sts	0x196E, r24	; 0x80196e <plot+0x6>
}
   1775e:	c3 5a       	subi	r28, 0xA3	; 163
   17760:	df 4f       	sbci	r29, 0xFF	; 255
   17762:	e6 e0       	ldi	r30, 0x06	; 6
   17764:	0c 94 06 e0 	jmp	0x1c00c	; 0x1c00c <__epilogue_restores__+0x18>

00017768 <printer_buffer>:
///
/// @see posix.c
/// @see posix.h
/// @return  void
void printer_buffer( uint16_t val )
{
   17768:	cf 93       	push	r28
   1776a:	df 93       	push	r29
   1776c:	ad b7       	in	r26, 0x3d	; 61
   1776e:	be b7       	in	r27, 0x3e	; 62
   17770:	17 97       	sbiw	r26, 0x07	; 7
   17772:	0f b6       	in	r0, 0x3f	; 63
   17774:	f8 94       	cli
   17776:	be bf       	out	0x3e, r27	; 62
   17778:	0f be       	out	0x3f, r0	; 63
   1777a:	ad bf       	out	0x3d, r26	; 61
   1777c:	ec 01       	movw	r28, r24

    uint16_t ch;

    if(debuglevel & (GPIB_PPR + GPIB_DEVICE_STATE_MESSAGES))
   1777e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   17782:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   17786:	82 72       	andi	r24, 0x22	; 34
   17788:	99 27       	eor	r25, r25
   1778a:	89 2b       	or	r24, r25
   1778c:	c1 f0       	breq	.+48     	; 0x177be <printer_buffer+0x56>
    {
        if( ( plot.count & 255L ) == 0)
   1778e:	80 91 68 19 	lds	r24, 0x1968	; 0x801968 <plot>
   17792:	30 91 69 19 	lds	r19, 0x1969	; 0x801969 <plot+0x1>
   17796:	20 91 6a 19 	lds	r18, 0x196A	; 0x80196a <plot+0x2>
   1779a:	90 91 6b 19 	lds	r25, 0x196B	; 0x80196b <plot+0x3>
   1779e:	81 11       	cpse	r24, r1
   177a0:	0e c0       	rjmp	.+28     	; 0x177be <printer_buffer+0x56>
            printf("%08ld\r",plot.count);
   177a2:	ed b7       	in	r30, 0x3d	; 61
   177a4:	fe b7       	in	r31, 0x3e	; 62
   177a6:	84 83       	std	Z+4, r24	; 0x04
   177a8:	35 83       	std	Z+5, r19	; 0x05
   177aa:	26 83       	std	Z+6, r18	; 0x06
   177ac:	97 83       	std	Z+7, r25	; 0x07
   177ae:	8b e6       	ldi	r24, 0x6B	; 107
   177b0:	9c e2       	ldi	r25, 0x2C	; 44
   177b2:	a0 e0       	ldi	r26, 0x00	; 0
   177b4:	81 83       	std	Z+1, r24	; 0x01
   177b6:	92 83       	std	Z+2, r25	; 0x02
   177b8:	a3 83       	std	Z+3, r26	; 0x03
   177ba:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    }

    ch = val & 0xff;
    if(val & (0xff00 & ~REN_FLAG))
   177be:	ce 01       	movw	r24, r28
   177c0:	88 27       	eor	r24, r24
   177c2:	97 7f       	andi	r25, 0xF7	; 247
   177c4:	89 2b       	or	r24, r25
    {
        if( receive_plot_flush() )
   177c6:	41 f0       	breq	.+16     	; 0x177d8 <printer_buffer+0x70>
   177c8:	75 de       	rcall	.-790    	; 0x174b4 <receive_plot_flush>
   177ca:	89 2b       	or	r24, r25
   177cc:	09 f4       	brne	.+2      	; 0x177d0 <printer_buffer+0x68>
            plot.error = 1;
   177ce:	3f c0       	rjmp	.+126    	; 0x1784e <printer_buffer+0xe6>
   177d0:	81 e0       	ldi	r24, 0x01	; 1
   177d2:	80 93 70 19 	sts	0x1970, r24	; 0x801970 <plot+0x8>
        //plot.count += strlen(ptr);
    }
    else
    {
        ch  = val & 0xff;
        plot.buf[plot.ind++] = ch;
   177d6:	3b c0       	rjmp	.+118    	; 0x1784e <printer_buffer+0xe6>
   177d8:	20 91 73 19 	lds	r18, 0x1973	; 0x801973 <plot+0xb>
   177dc:	30 91 74 19 	lds	r19, 0x1974	; 0x801974 <plot+0xc>
   177e0:	80 91 6c 19 	lds	r24, 0x196C	; 0x80196c <plot+0x4>
   177e4:	90 91 6d 19 	lds	r25, 0x196D	; 0x80196d <plot+0x5>
   177e8:	ac 01       	movw	r20, r24
   177ea:	4f 5f       	subi	r20, 0xFF	; 255
   177ec:	5f 4f       	sbci	r21, 0xFF	; 255
   177ee:	50 93 6d 19 	sts	0x196D, r21	; 0x80196d <plot+0x5>
   177f2:	40 93 6c 19 	sts	0x196C, r20	; 0x80196c <plot+0x4>
   177f6:	f9 01       	movw	r30, r18
   177f8:	e8 0f       	add	r30, r24
   177fa:	f9 1f       	adc	r31, r25
        plot.count++;
   177fc:	c0 83       	st	Z, r28
   177fe:	80 91 68 19 	lds	r24, 0x1968	; 0x801968 <plot>
   17802:	90 91 69 19 	lds	r25, 0x1969	; 0x801969 <plot+0x1>
   17806:	a0 91 6a 19 	lds	r26, 0x196A	; 0x80196a <plot+0x2>
   1780a:	b0 91 6b 19 	lds	r27, 0x196B	; 0x80196b <plot+0x3>
   1780e:	01 96       	adiw	r24, 0x01	; 1
   17810:	a1 1d       	adc	r26, r1
   17812:	b1 1d       	adc	r27, r1
   17814:	80 93 68 19 	sts	0x1968, r24	; 0x801968 <plot>
   17818:	90 93 69 19 	sts	0x1969, r25	; 0x801969 <plot+0x1>
   1781c:	a0 93 6a 19 	sts	0x196A, r26	; 0x80196a <plot+0x2>
   17820:	b0 93 6b 19 	sts	0x196B, r27	; 0x80196b <plot+0x3>

        if(plot.ind >= plot.size)
   17824:	20 91 6c 19 	lds	r18, 0x196C	; 0x80196c <plot+0x4>
   17828:	30 91 6d 19 	lds	r19, 0x196D	; 0x80196d <plot+0x5>
   1782c:	80 91 6e 19 	lds	r24, 0x196E	; 0x80196e <plot+0x6>
   17830:	90 91 6f 19 	lds	r25, 0x196F	; 0x80196f <plot+0x7>
   17834:	28 17       	cp	r18, r24
        {
            if( receive_plot_flush() < 0 )
   17836:	39 07       	cpc	r19, r25
   17838:	54 f0       	brlt	.+20     	; 0x1784e <printer_buffer+0xe6>
   1783a:	3c de       	rcall	.-904    	; 0x174b4 <receive_plot_flush>
   1783c:	97 ff       	sbrs	r25, 7
                plot.error = 1;
   1783e:	03 c0       	rjmp	.+6      	; 0x17846 <printer_buffer+0xde>
   17840:	81 e0       	ldi	r24, 0x01	; 1
   17842:	80 93 70 19 	sts	0x1970, r24	; 0x801970 <plot+0x8>
            plot.ind  = 0;
   17846:	10 92 6d 19 	sts	0x196D, r1	; 0x80196d <plot+0x5>
   1784a:	10 92 6c 19 	sts	0x196C, r1	; 0x80196c <plot+0x4>
        }
    }
}
   1784e:	cd b7       	in	r28, 0x3d	; 61
   17850:	de b7       	in	r29, 0x3e	; 62
   17852:	27 96       	adiw	r28, 0x07	; 7
   17854:	e2 e0       	ldi	r30, 0x02	; 2
   17856:	0c 94 0a e0 	jmp	0x1c014	; 0x1c014 <__epilogue_restores__+0x20>

0001785a <PRINTER_COMMANDS>:
///
/// @todo  Fully emulated plotter response.
/// @return  0

int PRINTER_COMMANDS(uint8_t ch)
{
   1785a:	cf 93       	push	r28
   1785c:	00 d0       	rcall	.+0      	; 0x1785e <PRINTER_COMMANDS+0x4>
   1785e:	00 d0       	rcall	.+0      	; 0x17860 <PRINTER_COMMANDS+0x6>
   17860:	1f 92       	push	r1
   17862:	c8 2f       	mov	r28, r24

    // We could, for example, use secondaries to set file names, etc
    // We don not use them yet
    if(PRINTER_is_MLA(listening))
   17864:	80 91 b4 1e 	lds	r24, 0x1EB4	; 0x801eb4 <listening>
   17868:	90 e0       	ldi	r25, 0x00	; 0
   1786a:	0e 94 da 8b 	call	0x117b4	; 0x117b4 <PRINTER_is_MLA>
   1786e:	89 2b       	or	r24, r25
   17870:	69 f0       	breq	.+26     	; 0x1788c <PRINTER_COMMANDS+0x32>
    {
#if SDEBUG
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17872:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   17876:	85 ff       	sbrs	r24, 5
   17878:	22 c0       	rjmp	.+68     	; 0x178be <PRINTER_COMMANDS+0x64>
            printf("[SC PRINTER Listen: %02XH]\n",  0xff & ch );
   1787a:	8c 2f       	mov	r24, r28
   1787c:	90 e0       	ldi	r25, 0x00	; 0
   1787e:	ed b7       	in	r30, 0x3d	; 61
   17880:	fe b7       	in	r31, 0x3e	; 62
   17882:	95 83       	std	Z+5, r25	; 0x05
   17884:	84 83       	std	Z+4, r24	; 0x04
   17886:	8f e4       	ldi	r24, 0x4F	; 79
   17888:	9c e2       	ldi	r25, 0x2C	; 44
   1788a:	13 c0       	rjmp	.+38     	; 0x178b2 <PRINTER_COMMANDS+0x58>
#endif
        return(0);
    }

    if(PRINTER_is_MTA(talking))
   1788c:	80 91 b2 1e 	lds	r24, 0x1EB2	; 0x801eb2 <talking>
   17890:	90 e0       	ldi	r25, 0x00	; 0
   17892:	0e 94 eb 8b 	call	0x117d6	; 0x117d6 <PRINTER_is_MTA>
   17896:	89 2b       	or	r24, r25
   17898:	91 f0       	breq	.+36     	; 0x178be <PRINTER_COMMANDS+0x64>
    {
#if SDEBUG
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1789a:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1789e:	85 ff       	sbrs	r24, 5
   178a0:	0e c0       	rjmp	.+28     	; 0x178be <PRINTER_COMMANDS+0x64>
            printf("[SC PRINTER Talk: %02XH]\n",  0xff & ch );
   178a2:	8c 2f       	mov	r24, r28
   178a4:	90 e0       	ldi	r25, 0x00	; 0
   178a6:	ed b7       	in	r30, 0x3d	; 61
   178a8:	fe b7       	in	r31, 0x3e	; 62
   178aa:	95 83       	std	Z+5, r25	; 0x05
   178ac:	84 83       	std	Z+4, r24	; 0x04
   178ae:	85 e3       	ldi	r24, 0x35	; 53
   178b0:	9c e2       	ldi	r25, 0x2C	; 44
   178b2:	a0 e0       	ldi	r26, 0x00	; 0
   178b4:	81 83       	std	Z+1, r24	; 0x01
   178b6:	92 83       	std	Z+2, r25	; 0x02
   178b8:	a3 83       	std	Z+3, r26	; 0x03
   178ba:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
#endif
        return(0);
    }
    return(0);
}
   178be:	80 e0       	ldi	r24, 0x00	; 0
   178c0:	90 e0       	ldi	r25, 0x00	; 0
   178c2:	0f 90       	pop	r0
   178c4:	0f 90       	pop	r0
   178c6:	0f 90       	pop	r0
   178c8:	0f 90       	pop	r0
   178ca:	0f 90       	pop	r0
   178cc:	cf 91       	pop	r28
   178ce:	08 95       	ret

000178d0 <V2B_MSB>:
///@param index: offset into byte array
///@param size: number of bytes to process
///@param val: Value to convert
///@return void
void V2B_MSB(uint8_t *B, int index, int size, uint32_t val)
{
   178d0:	0f 93       	push	r16
   178d2:	1f 93       	push	r17
   178d4:	da 01       	movw	r26, r20
   178d6:	11 97       	sbiw	r26, 0x01	; 1
    int i;
    for(i=size-1;i>=0;--i)
   178d8:	b7 fd       	sbrc	r27, 7
   178da:	0b c0       	rjmp	.+22     	; 0x178f2 <V2B_MSB+0x22>
    {
        B[index+i] = val & 0xff;
   178dc:	fd 01       	movw	r30, r26
   178de:	e6 0f       	add	r30, r22
   178e0:	f7 1f       	adc	r31, r23
   178e2:	e8 0f       	add	r30, r24
   178e4:	f9 1f       	adc	r31, r25
   178e6:	00 83       	st	Z, r16
        val >>= 8;
   178e8:	01 2f       	mov	r16, r17
   178ea:	12 2f       	mov	r17, r18
   178ec:	23 2f       	mov	r18, r19
   178ee:	33 27       	eor	r19, r19
   178f0:	f2 cf       	rjmp	.-28     	; 0x178d6 <V2B_MSB+0x6>
    }
}
   178f2:	1f 91       	pop	r17
   178f4:	0f 91       	pop	r16
   178f6:	08 95       	ret

000178f8 <V2B_LSB>:
///@param index: offset into byte array
///@param size: number of bytes to process
///@param val: Value to convert
///@return void
void V2B_LSB(uint8_t *B, int index, int size, uint32_t val)
{
   178f8:	0f 93       	push	r16
   178fa:	1f 93       	push	r17
   178fc:	fc 01       	movw	r30, r24
   178fe:	e6 0f       	add	r30, r22
   17900:	f7 1f       	adc	r31, r23
   17902:	bf 01       	movw	r22, r30
    int i;
    for(i=0;i<size;++i)
   17904:	cf 01       	movw	r24, r30
   17906:	86 1b       	sub	r24, r22
   17908:	97 0b       	sbc	r25, r23
   1790a:	84 17       	cp	r24, r20
   1790c:	95 07       	cpc	r25, r21
   1790e:	34 f4       	brge	.+12     	; 0x1791c <V2B_LSB+0x24>
    {
        B[index+i] = val & 0xff;
   17910:	01 93       	st	Z+, r16
        val >>= 8;
   17912:	01 2f       	mov	r16, r17
   17914:	12 2f       	mov	r17, r18
   17916:	23 2f       	mov	r18, r19
   17918:	33 27       	eor	r19, r19
   1791a:	f4 cf       	rjmp	.-24     	; 0x17904 <V2B_LSB+0xc>
    }
}
   1791c:	1f 91       	pop	r17
   1791e:	0f 91       	pop	r16
   17920:	08 95       	ret

00017922 <B2V_MSB>:
///@param B: byte array
///@param index: offset into byte array
///@param size: number of bytes to process
///@return value
uint32_t B2V_MSB(uint8_t *B, int index, int size)
{
   17922:	cf 92       	push	r12
   17924:	df 92       	push	r13
   17926:	ef 92       	push	r14
   17928:	ff 92       	push	r15
   1792a:	fc 01       	movw	r30, r24
   1792c:	e6 0f       	add	r30, r22
   1792e:	f7 1f       	adc	r31, r23
    int i;
    uint32_t val = 0;
   17930:	60 e0       	ldi	r22, 0x00	; 0
   17932:	70 e0       	ldi	r23, 0x00	; 0
   17934:	cb 01       	movw	r24, r22
   17936:	df 01       	movw	r26, r30

    for(i=0;i<size;++i)
   17938:	9f 01       	movw	r18, r30
   1793a:	2a 1b       	sub	r18, r26
   1793c:	3b 0b       	sbc	r19, r27
   1793e:	24 17       	cp	r18, r20
   17940:	35 07       	cpc	r19, r21
   17942:	4c f4       	brge	.+18     	; 0x17956 <B2V_MSB+0x34>
    {
        val <<= 8;
   17944:	cc 24       	eor	r12, r12
   17946:	d6 2e       	mov	r13, r22
   17948:	e7 2e       	mov	r14, r23
   1794a:	f8 2e       	mov	r15, r24
        val |= (uint8_t) (B[i+index] & 0xff);
   1794c:	21 91       	ld	r18, Z+
   1794e:	c7 01       	movw	r24, r14
   17950:	b6 01       	movw	r22, r12
   17952:	62 2b       	or	r22, r18
   17954:	f1 cf       	rjmp	.-30     	; 0x17938 <B2V_MSB+0x16>
    }
        return(val);
}
   17956:	ff 90       	pop	r15
   17958:	ef 90       	pop	r14
   1795a:	df 90       	pop	r13
   1795c:	cf 90       	pop	r12
   1795e:	08 95       	ret

00017960 <B2V_LSB>:
///@param B: byte array
///@param index: offset into byte array
///@param size: number of bytes to process
///@return value
uint32_t B2V_LSB(uint8_t *B, int index, int size)
{
   17960:	cf 92       	push	r12
   17962:	df 92       	push	r13
   17964:	ef 92       	push	r14
   17966:	ff 92       	push	r15
   17968:	9c 01       	movw	r18, r24
   1796a:	db 01       	movw	r26, r22
    int i;
    uint32_t val = 0;
   1796c:	60 e0       	ldi	r22, 0x00	; 0
   1796e:	70 e0       	ldi	r23, 0x00	; 0
   17970:	cb 01       	movw	r24, r22
   17972:	41 50       	subi	r20, 0x01	; 1
   17974:	51 09       	sbc	r21, r1

    for(i=size-1;i>=0;--i)
   17976:	57 fd       	sbrc	r21, 7
   17978:	0e c0       	rjmp	.+28     	; 0x17996 <B2V_LSB+0x36>
    {
        val <<= 8;
   1797a:	cc 24       	eor	r12, r12
   1797c:	d6 2e       	mov	r13, r22
   1797e:	e7 2e       	mov	r14, r23
   17980:	f8 2e       	mov	r15, r24
        val |= (uint8_t) (B[i+index] & 0xff);
   17982:	fa 01       	movw	r30, r20
   17984:	ea 0f       	add	r30, r26
   17986:	fb 1f       	adc	r31, r27
   17988:	e2 0f       	add	r30, r18
   1798a:	f3 1f       	adc	r31, r19
   1798c:	e0 81       	ld	r30, Z
   1798e:	c7 01       	movw	r24, r14
   17990:	b6 01       	movw	r22, r12
   17992:	6e 2b       	or	r22, r30
   17994:	ee cf       	rjmp	.-36     	; 0x17972 <B2V_LSB+0x12>
    }
        return(val);
}
   17996:	ff 90       	pop	r15
   17998:	ef 90       	pop	r14
   1799a:	df 90       	pop	r13
   1799c:	cf 90       	pop	r12
   1799e:	08 95       	ret

000179a0 <lif_help>:
   179a0:	cf 93       	push	r28
   179a2:	df 93       	push	r29
   179a4:	00 d0       	rcall	.+0      	; 0x179a6 <lif_help+0x6>
   179a6:	1f 92       	push	r1
   179a8:	ec 01       	movw	r28, r24
   179aa:	88 e1       	ldi	r24, 0x18	; 24
   179ac:	91 e4       	ldi	r25, 0x41	; 65
   179ae:	a0 e0       	ldi	r26, 0x00	; 0
   179b0:	ed b7       	in	r30, 0x3d	; 61
   179b2:	fe b7       	in	r31, 0x3e	; 62
   179b4:	81 83       	std	Z+1, r24	; 0x01
   179b6:	92 83       	std	Z+2, r25	; 0x02
   179b8:	a3 83       	std	Z+3, r26	; 0x03
   179ba:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   179be:	cd 2b       	or	r28, r29
   179c0:	51 f0       	breq	.+20     	; 0x179d6 <lif_help+0x36>
   179c2:	8f e4       	ldi	r24, 0x4F	; 79
   179c4:	9f e3       	ldi	r25, 0x3F	; 63
   179c6:	a0 e0       	ldi	r26, 0x00	; 0
   179c8:	ed b7       	in	r30, 0x3d	; 61
   179ca:	fe b7       	in	r31, 0x3e	; 62
   179cc:	81 83       	std	Z+1, r24	; 0x01
   179ce:	92 83       	std	Z+2, r25	; 0x02
   179d0:	a3 83       	std	Z+3, r26	; 0x03
   179d2:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   179d6:	cd b7       	in	r28, 0x3d	; 61
   179d8:	de b7       	in	r29, 0x3e	; 62
   179da:	23 96       	adiw	r28, 0x03	; 3
   179dc:	e2 e0       	ldi	r30, 0x02	; 2
   179de:	0c 94 0a e0 	jmp	0x1c014	; 0x1c014 <__epilogue_restores__+0x20>

000179e2 <lif_calloc>:
   179e2:	cf 92       	push	r12
   179e4:	df 92       	push	r13
   179e6:	ef 92       	push	r14
   179e8:	ff 92       	push	r15
   179ea:	cf 93       	push	r28
   179ec:	df 93       	push	r29
   179ee:	ad b7       	in	r26, 0x3d	; 61
   179f0:	be b7       	in	r27, 0x3e	; 62
   179f2:	17 97       	sbiw	r26, 0x07	; 7
   179f4:	0f b6       	in	r0, 0x3f	; 63
   179f6:	f8 94       	cli
   179f8:	be bf       	out	0x3e, r27	; 62
   179fa:	0f be       	out	0x3f, r0	; 63
   179fc:	ad bf       	out	0x3d, r26	; 61
   179fe:	6b 01       	movw	r12, r22
   17a00:	7c 01       	movw	r14, r24
   17a02:	61 e0       	ldi	r22, 0x01	; 1
   17a04:	70 e0       	ldi	r23, 0x00	; 0
   17a06:	c6 01       	movw	r24, r12
   17a08:	0e 94 b1 27 	call	0x4f62	; 0x4f62 <safecalloc>
   17a0c:	ec 01       	movw	r28, r24
   17a0e:	89 2b       	or	r24, r25
   17a10:	71 f4       	brne	.+28     	; 0x17a2e <lif_calloc+0x4c>
   17a12:	ed b7       	in	r30, 0x3d	; 61
   17a14:	fe b7       	in	r31, 0x3e	; 62
   17a16:	c4 82       	std	Z+4, r12	; 0x04
   17a18:	d5 82       	std	Z+5, r13	; 0x05
   17a1a:	e6 82       	std	Z+6, r14	; 0x06
   17a1c:	f7 82       	std	Z+7, r15	; 0x07
   17a1e:	85 e0       	ldi	r24, 0x05	; 5
   17a20:	9f e3       	ldi	r25, 0x3F	; 63
   17a22:	a0 e0       	ldi	r26, 0x00	; 0
   17a24:	81 83       	std	Z+1, r24	; 0x01
   17a26:	92 83       	std	Z+2, r25	; 0x02
   17a28:	a3 83       	std	Z+3, r26	; 0x03
   17a2a:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   17a2e:	ce 01       	movw	r24, r28
   17a30:	ad b7       	in	r26, 0x3d	; 61
   17a32:	be b7       	in	r27, 0x3e	; 62
   17a34:	17 96       	adiw	r26, 0x07	; 7
   17a36:	0f b6       	in	r0, 0x3f	; 63
   17a38:	f8 94       	cli
   17a3a:	be bf       	out	0x3e, r27	; 62
   17a3c:	0f be       	out	0x3f, r0	; 63
   17a3e:	ad bf       	out	0x3d, r26	; 61
   17a40:	df 91       	pop	r29
   17a42:	cf 91       	pop	r28
   17a44:	ff 90       	pop	r15
   17a46:	ef 90       	pop	r14
   17a48:	df 90       	pop	r13
   17a4a:	cf 90       	pop	r12
   17a4c:	08 95       	ret

00017a4e <lif_free>:
   17a4e:	00 d0       	rcall	.+0      	; 0x17a50 <lif_free+0x2>
   17a50:	1f 92       	push	r1
   17a52:	00 97       	sbiw	r24, 0x00	; 0
   17a54:	59 f4       	brne	.+22     	; 0x17a6c <lif_free+0x1e>
   17a56:	8d ee       	ldi	r24, 0xED	; 237
   17a58:	9e e3       	ldi	r25, 0x3E	; 62
   17a5a:	a0 e0       	ldi	r26, 0x00	; 0
   17a5c:	ed b7       	in	r30, 0x3d	; 61
   17a5e:	fe b7       	in	r31, 0x3e	; 62
   17a60:	81 83       	std	Z+1, r24	; 0x01
   17a62:	92 83       	std	Z+2, r25	; 0x02
   17a64:	a3 83       	std	Z+3, r26	; 0x03
   17a66:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   17a6a:	02 c0       	rjmp	.+4      	; 0x17a70 <lif_free+0x22>
   17a6c:	0e 94 fd 27 	call	0x4ffa	; 0x4ffa <safefree>
   17a70:	0f 90       	pop	r0
   17a72:	0f 90       	pop	r0
   17a74:	0f 90       	pop	r0
   17a76:	08 95       	ret

00017a78 <lif_stralloc>:
   17a78:	0f 93       	push	r16
   17a7a:	1f 93       	push	r17
   17a7c:	cf 93       	push	r28
   17a7e:	df 93       	push	r29
   17a80:	ec 01       	movw	r28, r24
   17a82:	fc 01       	movw	r30, r24
   17a84:	01 90       	ld	r0, Z+
   17a86:	00 20       	and	r0, r0
   17a88:	e9 f7       	brne	.-6      	; 0x17a84 <lif_stralloc+0xc>
   17a8a:	bf 01       	movw	r22, r30
   17a8c:	68 1b       	sub	r22, r24
   17a8e:	79 0b       	sbc	r23, r25
   17a90:	6d 5f       	subi	r22, 0xFD	; 253
   17a92:	7f 4f       	sbci	r23, 0xFF	; 255
   17a94:	07 2e       	mov	r0, r23
   17a96:	00 0c       	add	r0, r0
   17a98:	88 0b       	sbc	r24, r24
   17a9a:	99 0b       	sbc	r25, r25
   17a9c:	a2 df       	rcall	.-188    	; 0x179e2 <lif_calloc>
   17a9e:	8c 01       	movw	r16, r24
   17aa0:	00 97       	sbiw	r24, 0x00	; 0
   17aa2:	19 f0       	breq	.+6      	; 0x17aaa <lif_stralloc+0x32>
   17aa4:	be 01       	movw	r22, r28
   17aa6:	0e 94 9d 30 	call	0x613a	; 0x613a <strcpy>
   17aaa:	c8 01       	movw	r24, r16
   17aac:	df 91       	pop	r29
   17aae:	cf 91       	pop	r28
   17ab0:	1f 91       	pop	r17
   17ab2:	0f 91       	pop	r16
   17ab4:	08 95       	ret

00017ab6 <lif_open>:
   17ab6:	ef 92       	push	r14
   17ab8:	ff 92       	push	r15
   17aba:	0f 93       	push	r16
   17abc:	1f 93       	push	r17
   17abe:	cf 93       	push	r28
   17ac0:	df 93       	push	r29
   17ac2:	ad b7       	in	r26, 0x3d	; 61
   17ac4:	be b7       	in	r27, 0x3e	; 62
   17ac6:	17 97       	sbiw	r26, 0x07	; 7
   17ac8:	0f b6       	in	r0, 0x3f	; 63
   17aca:	f8 94       	cli
   17acc:	be bf       	out	0x3e, r27	; 62
   17ace:	0f be       	out	0x3f, r0	; 63
   17ad0:	ad bf       	out	0x3d, r26	; 61
   17ad2:	8c 01       	movw	r16, r24
   17ad4:	7b 01       	movw	r14, r22
   17ad6:	0e 94 7c 7d 	call	0xfaf8	; 0xfaf8 <fopen>
   17ada:	ec 01       	movw	r28, r24
   17adc:	89 2b       	or	r24, r25
   17ade:	71 f4       	brne	.+28     	; 0x17afc <lif_open+0x46>
   17ae0:	ed b7       	in	r30, 0x3d	; 61
   17ae2:	fe b7       	in	r31, 0x3e	; 62
   17ae4:	f7 82       	std	Z+7, r15	; 0x07
   17ae6:	e6 82       	std	Z+6, r14	; 0x06
   17ae8:	15 83       	std	Z+5, r17	; 0x05
   17aea:	04 83       	std	Z+4, r16	; 0x04
   17aec:	88 ec       	ldi	r24, 0xC8	; 200
   17aee:	9e e3       	ldi	r25, 0x3E	; 62
   17af0:	a0 e0       	ldi	r26, 0x00	; 0
   17af2:	81 83       	std	Z+1, r24	; 0x01
   17af4:	92 83       	std	Z+2, r25	; 0x02
   17af6:	a3 83       	std	Z+3, r26	; 0x03
   17af8:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   17afc:	ce 01       	movw	r24, r28
   17afe:	cd b7       	in	r28, 0x3d	; 61
   17b00:	de b7       	in	r29, 0x3e	; 62
   17b02:	27 96       	adiw	r28, 0x07	; 7
   17b04:	e6 e0       	ldi	r30, 0x06	; 6
   17b06:	0c 94 06 e0 	jmp	0x1c00c	; 0x1c00c <__epilogue_restores__+0x18>

00017b0a <lif_stat>:
   17b0a:	0f 93       	push	r16
   17b0c:	1f 93       	push	r17
   17b0e:	cf 93       	push	r28
   17b10:	df 93       	push	r29
   17b12:	00 d0       	rcall	.+0      	; 0x17b14 <lif_stat+0xa>
   17b14:	00 d0       	rcall	.+0      	; 0x17b16 <lif_stat+0xc>
   17b16:	1f 92       	push	r1
   17b18:	8c 01       	movw	r16, r24
   17b1a:	d6 2f       	mov	r29, r22
   17b1c:	c7 2f       	mov	r28, r23
   17b1e:	0e 94 81 78 	call	0xf102	; 0xf102 <stat>
   17b22:	97 ff       	sbrs	r25, 7
   17b24:	0f c0       	rjmp	.+30     	; 0x17b44 <lif_stat+0x3a>
   17b26:	ed b7       	in	r30, 0x3d	; 61
   17b28:	fe b7       	in	r31, 0x3e	; 62
   17b2a:	15 83       	std	Z+5, r17	; 0x05
   17b2c:	04 83       	std	Z+4, r16	; 0x04
   17b2e:	8f ea       	ldi	r24, 0xAF	; 175
   17b30:	9e e3       	ldi	r25, 0x3E	; 62
   17b32:	a0 e0       	ldi	r26, 0x00	; 0
   17b34:	81 83       	std	Z+1, r24	; 0x01
   17b36:	92 83       	std	Z+2, r25	; 0x02
   17b38:	a3 83       	std	Z+3, r26	; 0x03
   17b3a:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   17b3e:	80 e0       	ldi	r24, 0x00	; 0
   17b40:	90 e0       	ldi	r25, 0x00	; 0
   17b42:	02 c0       	rjmp	.+4      	; 0x17b48 <lif_stat+0x3e>
   17b44:	8d 2f       	mov	r24, r29
   17b46:	9c 2f       	mov	r25, r28
   17b48:	cd b7       	in	r28, 0x3d	; 61
   17b4a:	de b7       	in	r29, 0x3e	; 62
   17b4c:	25 96       	adiw	r28, 0x05	; 5
   17b4e:	e4 e0       	ldi	r30, 0x04	; 4
   17b50:	0c 94 08 e0 	jmp	0x1c010	; 0x1c010 <__epilogue_restores__+0x1c>

00017b54 <lif_seek_msg>:
   17b54:	a9 e0       	ldi	r26, 0x09	; 9
   17b56:	b0 e0       	ldi	r27, 0x00	; 0
   17b58:	e0 eb       	ldi	r30, 0xB0	; 176
   17b5a:	fd eb       	ldi	r31, 0xBD	; 189
   17b5c:	0c 94 e8 df 	jmp	0x1bfd0	; 0x1bfd0 <__prologue_saves__+0x14>
   17b60:	ec 01       	movw	r28, r24
   17b62:	6a 01       	movw	r12, r20
   17b64:	7b 01       	movw	r14, r22
   17b66:	89 01       	movw	r16, r18
   17b68:	0e 94 bb 79 	call	0xf376	; 0xf376 <ftell>
   17b6c:	6c 15       	cp	r22, r12
   17b6e:	7d 05       	cpc	r23, r13
   17b70:	8e 05       	cpc	r24, r14
   17b72:	9f 05       	cpc	r25, r15
   17b74:	19 f4       	brne	.+6      	; 0x17b7c <lif_seek_msg+0x28>
   17b76:	81 e0       	ldi	r24, 0x01	; 1
   17b78:	90 e0       	ldi	r25, 0x00	; 0
   17b7a:	1b c0       	rjmp	.+54     	; 0x17bb2 <lif_seek_msg+0x5e>
   17b7c:	20 e0       	ldi	r18, 0x00	; 0
   17b7e:	30 e0       	ldi	r19, 0x00	; 0
   17b80:	b7 01       	movw	r22, r14
   17b82:	a6 01       	movw	r20, r12
   17b84:	ce 01       	movw	r24, r28
   17b86:	0e 94 3e 7a 	call	0xf47c	; 0xf47c <fseek>
   17b8a:	97 ff       	sbrs	r25, 7
   17b8c:	f4 cf       	rjmp	.-24     	; 0x17b76 <lif_seek_msg+0x22>
   17b8e:	ed b7       	in	r30, 0x3d	; 61
   17b90:	fe b7       	in	r31, 0x3e	; 62
   17b92:	c6 82       	std	Z+6, r12	; 0x06
   17b94:	d7 82       	std	Z+7, r13	; 0x07
   17b96:	e0 86       	std	Z+8, r14	; 0x08
   17b98:	f1 86       	std	Z+9, r15	; 0x09
   17b9a:	15 83       	std	Z+5, r17	; 0x05
   17b9c:	04 83       	std	Z+4, r16	; 0x04
   17b9e:	8e e8       	ldi	r24, 0x8E	; 142
   17ba0:	9e e3       	ldi	r25, 0x3E	; 62
   17ba2:	a0 e0       	ldi	r26, 0x00	; 0
   17ba4:	81 83       	std	Z+1, r24	; 0x01
   17ba6:	92 83       	std	Z+2, r25	; 0x02
   17ba8:	a3 83       	std	Z+3, r26	; 0x03
   17baa:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   17bae:	80 e0       	ldi	r24, 0x00	; 0
   17bb0:	90 e0       	ldi	r25, 0x00	; 0
   17bb2:	cd b7       	in	r28, 0x3d	; 61
   17bb4:	de b7       	in	r29, 0x3e	; 62
   17bb6:	29 96       	adiw	r28, 0x09	; 9
   17bb8:	e8 e0       	ldi	r30, 0x08	; 8
   17bba:	0c 94 04 e0 	jmp	0x1c008	; 0x1c008 <__epilogue_restores__+0x14>

00017bbe <lif_read>:
   17bbe:	af e0       	ldi	r26, 0x0F	; 15
   17bc0:	b0 e0       	ldi	r27, 0x00	; 0
   17bc2:	e5 ee       	ldi	r30, 0xE5	; 229
   17bc4:	fd eb       	ldi	r31, 0xBD	; 189
   17bc6:	0c 94 e4 df 	jmp	0x1bfc8	; 0x1bfc8 <__prologue_saves__+0xc>
   17bca:	ec 01       	movw	r28, r24
   17bcc:	7b 01       	movw	r14, r22
   17bce:	49 01       	movw	r8, r18
   17bd0:	5a 01       	movw	r10, r20
   17bd2:	28 81       	ld	r18, Y
   17bd4:	39 81       	ldd	r19, Y+1	; 0x01
   17bd6:	b5 01       	movw	r22, r10
   17bd8:	a4 01       	movw	r20, r8
   17bda:	8a 81       	ldd	r24, Y+2	; 0x02
   17bdc:	9b 81       	ldd	r25, Y+3	; 0x03
   17bde:	ba df       	rcall	.-140    	; 0x17b54 <lif_seek_msg>
   17be0:	89 2b       	or	r24, r25
   17be2:	91 f1       	breq	.+100    	; 0x17c48 <lif_read+0x8a>
   17be4:	2a 81       	ldd	r18, Y+2	; 0x02
   17be6:	3b 81       	ldd	r19, Y+3	; 0x03
   17be8:	a8 01       	movw	r20, r16
   17bea:	61 e0       	ldi	r22, 0x01	; 1
   17bec:	70 e0       	ldi	r23, 0x00	; 0
   17bee:	c7 01       	movw	r24, r14
   17bf0:	0e 94 d2 7a 	call	0xf5a4	; 0xf5a4 <fread>
   17bf4:	6c 01       	movw	r12, r24
   17bf6:	e1 2c       	mov	r14, r1
   17bf8:	f1 2c       	mov	r15, r1
   17bfa:	b8 01       	movw	r22, r16
   17bfc:	01 2e       	mov	r0, r17
   17bfe:	00 0c       	add	r0, r0
   17c00:	88 0b       	sbc	r24, r24
   17c02:	99 0b       	sbc	r25, r25
   17c04:	c6 16       	cp	r12, r22
   17c06:	d7 06       	cpc	r13, r23
   17c08:	e8 06       	cpc	r14, r24
   17c0a:	f9 06       	cpc	r15, r25
   17c0c:	19 f1       	breq	.+70     	; 0x17c54 <lif_read+0x96>
   17c0e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   17c12:	81 ff       	sbrs	r24, 1
   17c14:	1d c0       	rjmp	.+58     	; 0x17c50 <lif_read+0x92>
   17c16:	ed b7       	in	r30, 0x3d	; 61
   17c18:	fe b7       	in	r31, 0x3e	; 62
   17c1a:	17 87       	std	Z+15, r17	; 0x0f
   17c1c:	06 87       	std	Z+14, r16	; 0x0e
   17c1e:	c2 86       	std	Z+10, r12	; 0x0a
   17c20:	d3 86       	std	Z+11, r13	; 0x0b
   17c22:	e4 86       	std	Z+12, r14	; 0x0c
   17c24:	f5 86       	std	Z+13, r15	; 0x0d
   17c26:	86 82       	std	Z+6, r8	; 0x06
   17c28:	97 82       	std	Z+7, r9	; 0x07
   17c2a:	a0 86       	std	Z+8, r10	; 0x08
   17c2c:	b1 86       	std	Z+9, r11	; 0x09
   17c2e:	88 81       	ld	r24, Y
   17c30:	99 81       	ldd	r25, Y+1	; 0x01
   17c32:	95 83       	std	Z+5, r25	; 0x05
   17c34:	84 83       	std	Z+4, r24	; 0x04
   17c36:	82 e5       	ldi	r24, 0x52	; 82
   17c38:	9e e3       	ldi	r25, 0x3E	; 62
   17c3a:	a0 e0       	ldi	r26, 0x00	; 0
   17c3c:	81 83       	std	Z+1, r24	; 0x01
   17c3e:	92 83       	std	Z+2, r25	; 0x02
   17c40:	a3 83       	std	Z+3, r26	; 0x03
   17c42:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   17c46:	04 c0       	rjmp	.+8      	; 0x17c50 <lif_read+0x92>
   17c48:	60 e0       	ldi	r22, 0x00	; 0
   17c4a:	70 e0       	ldi	r23, 0x00	; 0
   17c4c:	cb 01       	movw	r24, r22
   17c4e:	02 c0       	rjmp	.+4      	; 0x17c54 <lif_read+0x96>
   17c50:	c7 01       	movw	r24, r14
   17c52:	b6 01       	movw	r22, r12
   17c54:	cd b7       	in	r28, 0x3d	; 61
   17c56:	de b7       	in	r29, 0x3e	; 62
   17c58:	2f 96       	adiw	r28, 0x0f	; 15
   17c5a:	ec e0       	ldi	r30, 0x0C	; 12
   17c5c:	0c 94 00 e0 	jmp	0x1c000	; 0x1c000 <__epilogue_restores__+0xc>

00017c60 <lif_write>:
   17c60:	8f 92       	push	r8
   17c62:	9f 92       	push	r9
   17c64:	af 92       	push	r10
   17c66:	bf 92       	push	r11
   17c68:	ef 92       	push	r14
   17c6a:	ff 92       	push	r15
   17c6c:	0f 93       	push	r16
   17c6e:	1f 93       	push	r17
   17c70:	cf 93       	push	r28
   17c72:	df 93       	push	r29
   17c74:	ad b7       	in	r26, 0x3d	; 61
   17c76:	be b7       	in	r27, 0x3e	; 62
   17c78:	1d 97       	sbiw	r26, 0x0d	; 13
   17c7a:	0f b6       	in	r0, 0x3f	; 63
   17c7c:	f8 94       	cli
   17c7e:	be bf       	out	0x3e, r27	; 62
   17c80:	0f be       	out	0x3f, r0	; 63
   17c82:	ad bf       	out	0x3d, r26	; 61
   17c84:	7c 01       	movw	r14, r24
   17c86:	eb 01       	movw	r28, r22
   17c88:	49 01       	movw	r8, r18
   17c8a:	5a 01       	movw	r10, r20
   17c8c:	fc 01       	movw	r30, r24
   17c8e:	20 81       	ld	r18, Z
   17c90:	31 81       	ldd	r19, Z+1	; 0x01
   17c92:	b5 01       	movw	r22, r10
   17c94:	a4 01       	movw	r20, r8
   17c96:	82 81       	ldd	r24, Z+2	; 0x02
   17c98:	93 81       	ldd	r25, Z+3	; 0x03
   17c9a:	5c df       	rcall	.-328    	; 0x17b54 <lif_seek_msg>
   17c9c:	00 97       	sbiw	r24, 0x00	; 0
   17c9e:	71 f1       	breq	.+92     	; 0x17cfc <lif_write+0x9c>
   17ca0:	f7 01       	movw	r30, r14
   17ca2:	22 81       	ldd	r18, Z+2	; 0x02
   17ca4:	33 81       	ldd	r19, Z+3	; 0x03
   17ca6:	a8 01       	movw	r20, r16
   17ca8:	61 e0       	ldi	r22, 0x01	; 1
   17caa:	70 e0       	ldi	r23, 0x00	; 0
   17cac:	ce 01       	movw	r24, r28
   17cae:	0e 94 a4 7b 	call	0xf748	; 0xf748 <fwrite>
   17cb2:	ec 01       	movw	r28, r24
   17cb4:	08 17       	cp	r16, r24
   17cb6:	19 07       	cpc	r17, r25
   17cb8:	f1 f0       	breq	.+60     	; 0x17cf6 <lif_write+0x96>
   17cba:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   17cbe:	81 ff       	sbrs	r24, 1
   17cc0:	1c c0       	rjmp	.+56     	; 0x17cfa <lif_write+0x9a>
   17cc2:	ed b7       	in	r30, 0x3d	; 61
   17cc4:	fe b7       	in	r31, 0x3e	; 62
   17cc6:	15 87       	std	Z+13, r17	; 0x0d
   17cc8:	04 87       	std	Z+12, r16	; 0x0c
   17cca:	d3 87       	std	Z+11, r29	; 0x0b
   17ccc:	c2 87       	std	Z+10, r28	; 0x0a
   17cce:	86 82       	std	Z+6, r8	; 0x06
   17cd0:	97 82       	std	Z+7, r9	; 0x07
   17cd2:	a0 86       	std	Z+8, r10	; 0x08
   17cd4:	b1 86       	std	Z+9, r11	; 0x09
   17cd6:	f7 01       	movw	r30, r14
   17cd8:	80 81       	ld	r24, Z
   17cda:	91 81       	ldd	r25, Z+1	; 0x01
   17cdc:	ed b7       	in	r30, 0x3d	; 61
   17cde:	fe b7       	in	r31, 0x3e	; 62
   17ce0:	95 83       	std	Z+5, r25	; 0x05
   17ce2:	84 83       	std	Z+4, r24	; 0x04
   17ce4:	85 e1       	ldi	r24, 0x15	; 21
   17ce6:	9e e3       	ldi	r25, 0x3E	; 62
   17ce8:	a0 e0       	ldi	r26, 0x00	; 0
   17cea:	81 83       	std	Z+1, r24	; 0x01
   17cec:	92 83       	std	Z+2, r25	; 0x02
   17cee:	a3 83       	std	Z+3, r26	; 0x03
   17cf0:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   17cf4:	02 c0       	rjmp	.+4      	; 0x17cfa <lif_write+0x9a>
   17cf6:	c8 01       	movw	r24, r16
   17cf8:	01 c0       	rjmp	.+2      	; 0x17cfc <lif_write+0x9c>
   17cfa:	ce 01       	movw	r24, r28
   17cfc:	ad b7       	in	r26, 0x3d	; 61
   17cfe:	be b7       	in	r27, 0x3e	; 62
   17d00:	1d 96       	adiw	r26, 0x0d	; 13
   17d02:	0f b6       	in	r0, 0x3f	; 63
   17d04:	f8 94       	cli
   17d06:	be bf       	out	0x3e, r27	; 62
   17d08:	0f be       	out	0x3f, r0	; 63
   17d0a:	ad bf       	out	0x3d, r26	; 61
   17d0c:	df 91       	pop	r29
   17d0e:	cf 91       	pop	r28
   17d10:	1f 91       	pop	r17
   17d12:	0f 91       	pop	r16
   17d14:	ff 90       	pop	r15
   17d16:	ef 90       	pop	r14
   17d18:	bf 90       	pop	r11
   17d1a:	af 90       	pop	r10
   17d1c:	9f 90       	pop	r9
   17d1e:	8f 90       	pop	r8
   17d20:	08 95       	ret

00017d22 <lif_chars>:
   17d22:	80 32       	cpi	r24, 0x20	; 32
   17d24:	91 05       	cpc	r25, r1
   17d26:	e1 f0       	breq	.+56     	; 0x17d60 <lif_chars+0x3e>
   17d28:	9c 01       	movw	r18, r24
   17d2a:	21 56       	subi	r18, 0x61	; 97
   17d2c:	31 09       	sbc	r19, r1
   17d2e:	2a 31       	cpi	r18, 0x1A	; 26
   17d30:	31 05       	cpc	r19, r1
   17d32:	10 f4       	brcc	.+4      	; 0x17d38 <lif_chars+0x16>
   17d34:	80 97       	sbiw	r24, 0x20	; 32
   17d36:	08 95       	ret
   17d38:	9c 01       	movw	r18, r24
   17d3a:	21 54       	subi	r18, 0x41	; 65
   17d3c:	31 09       	sbc	r19, r1
   17d3e:	2a 31       	cpi	r18, 0x1A	; 26
   17d40:	31 05       	cpc	r19, r1
   17d42:	c8 f0       	brcs	.+50     	; 0x17d76 <lif_chars+0x54>
   17d44:	16 16       	cp	r1, r22
   17d46:	17 06       	cpc	r1, r23
   17d48:	74 f4       	brge	.+28     	; 0x17d66 <lif_chars+0x44>
   17d4a:	2f 5e       	subi	r18, 0xEF	; 239
   17d4c:	3f 4f       	sbci	r19, 0xFF	; 255
   17d4e:	2a 30       	cpi	r18, 0x0A	; 10
   17d50:	31 05       	cpc	r19, r1
   17d52:	88 f0       	brcs	.+34     	; 0x17d76 <lif_chars+0x54>
   17d54:	8f 35       	cpi	r24, 0x5F	; 95
   17d56:	91 05       	cpc	r25, r1
   17d58:	49 f0       	breq	.+18     	; 0x17d6c <lif_chars+0x4a>
   17d5a:	8d 97       	sbiw	r24, 0x2d	; 45
   17d5c:	21 f4       	brne	.+8      	; 0x17d66 <lif_chars+0x44>
   17d5e:	09 c0       	rjmp	.+18     	; 0x17d72 <lif_chars+0x50>
   17d60:	80 e2       	ldi	r24, 0x20	; 32
   17d62:	90 e0       	ldi	r25, 0x00	; 0
   17d64:	08 95       	ret
   17d66:	80 e0       	ldi	r24, 0x00	; 0
   17d68:	90 e0       	ldi	r25, 0x00	; 0
   17d6a:	08 95       	ret
   17d6c:	8f e5       	ldi	r24, 0x5F	; 95
   17d6e:	90 e0       	ldi	r25, 0x00	; 0
   17d70:	08 95       	ret
   17d72:	8d e2       	ldi	r24, 0x2D	; 45
   17d74:	90 e0       	ldi	r25, 0x00	; 0
   17d76:	08 95       	ret

00017d78 <lif_B2S>:
   17d78:	a0 e0       	ldi	r26, 0x00	; 0
   17d7a:	b0 e0       	ldi	r27, 0x00	; 0
   17d7c:	e2 ec       	ldi	r30, 0xC2	; 194
   17d7e:	fe eb       	ldi	r31, 0xBE	; 190
   17d80:	0c 94 e4 df 	jmp	0x1bfc8	; 0x1bfc8 <__prologue_saves__+0xc>
   17d84:	5c 01       	movw	r10, r24
   17d86:	6b 01       	movw	r12, r22
   17d88:	ea 01       	movw	r28, r20
   17d8a:	4c 01       	movw	r8, r24
   17d8c:	ee 24       	eor	r14, r14
   17d8e:	e3 94       	inc	r14
   17d90:	f1 2c       	mov	r15, r1
   17d92:	00 e0       	ldi	r16, 0x00	; 0
   17d94:	10 e0       	ldi	r17, 0x00	; 0
   17d96:	0c 17       	cp	r16, r28
   17d98:	1d 07       	cpc	r17, r29
   17d9a:	6c f4       	brge	.+26     	; 0x17db6 <lif_B2S+0x3e>
   17d9c:	f4 01       	movw	r30, r8
   17d9e:	81 91       	ld	r24, Z+
   17da0:	4f 01       	movw	r8, r30
   17da2:	b8 01       	movw	r22, r16
   17da4:	90 e0       	ldi	r25, 0x00	; 0
   17da6:	bd df       	rcall	.-134    	; 0x17d22 <lif_chars>
   17da8:	89 2b       	or	r24, r25
   17daa:	11 f4       	brne	.+4      	; 0x17db0 <lif_B2S+0x38>
   17dac:	e1 2c       	mov	r14, r1
   17dae:	f1 2c       	mov	r15, r1
   17db0:	0f 5f       	subi	r16, 0xFF	; 255
   17db2:	1f 4f       	sbci	r17, 0xFF	; 255
   17db4:	f0 cf       	rjmp	.-32     	; 0x17d96 <lif_B2S+0x1e>
   17db6:	d6 01       	movw	r26, r12
   17db8:	f5 01       	movw	r30, r10
   17dba:	cf 01       	movw	r24, r30
   17dbc:	8a 19       	sub	r24, r10
   17dbe:	9b 09       	sbc	r25, r11
   17dc0:	8c 17       	cp	r24, r28
   17dc2:	9d 07       	cpc	r25, r29
   17dc4:	1c f4       	brge	.+6      	; 0x17dcc <lif_B2S+0x54>
   17dc6:	81 91       	ld	r24, Z+
   17dc8:	8d 93       	st	X+, r24
   17dca:	f7 cf       	rjmp	.-18     	; 0x17dba <lif_B2S+0x42>
   17dcc:	d7 ff       	sbrs	r29, 7
   17dce:	02 c0       	rjmp	.+4      	; 0x17dd4 <lif_B2S+0x5c>
   17dd0:	c0 e0       	ldi	r28, 0x00	; 0
   17dd2:	d0 e0       	ldi	r29, 0x00	; 0
   17dd4:	cc 0d       	add	r28, r12
   17dd6:	dd 1d       	adc	r29, r13
   17dd8:	18 82       	st	Y, r1
   17dda:	c6 01       	movw	r24, r12
   17ddc:	0e 94 7b 31 	call	0x62f6	; 0x62f6 <trim_tail>
   17de0:	c7 01       	movw	r24, r14
   17de2:	cd b7       	in	r28, 0x3d	; 61
   17de4:	de b7       	in	r29, 0x3e	; 62
   17de6:	ec e0       	ldi	r30, 0x0C	; 12
   17de8:	0c 94 00 e0 	jmp	0x1c000	; 0x1c000 <__epilogue_restores__+0xc>

00017dec <lif_checkname>:
   17dec:	ef 92       	push	r14
   17dee:	ff 92       	push	r15
   17df0:	0f 93       	push	r16
   17df2:	1f 93       	push	r17
   17df4:	cf 93       	push	r28
   17df6:	df 93       	push	r29
   17df8:	7c 01       	movw	r14, r24
   17dfa:	ec 01       	movw	r28, r24
   17dfc:	01 e0       	ldi	r16, 0x01	; 1
   17dfe:	10 e0       	ldi	r17, 0x00	; 0
   17e00:	be 01       	movw	r22, r28
   17e02:	6e 19       	sub	r22, r14
   17e04:	7f 09       	sbc	r23, r15
   17e06:	89 91       	ld	r24, Y+
   17e08:	88 23       	and	r24, r24
   17e0a:	39 f0       	breq	.+14     	; 0x17e1a <lif_checkname+0x2e>
   17e0c:	90 e0       	ldi	r25, 0x00	; 0
   17e0e:	89 df       	rcall	.-238    	; 0x17d22 <lif_chars>
   17e10:	89 2b       	or	r24, r25
   17e12:	b1 f7       	brne	.-20     	; 0x17e00 <lif_checkname+0x14>
   17e14:	00 e0       	ldi	r16, 0x00	; 0
   17e16:	10 e0       	ldi	r17, 0x00	; 0
   17e18:	f3 cf       	rjmp	.-26     	; 0x17e00 <lif_checkname+0x14>
   17e1a:	c8 01       	movw	r24, r16
   17e1c:	cd b7       	in	r28, 0x3d	; 61
   17e1e:	de b7       	in	r29, 0x3e	; 62
   17e20:	e6 e0       	ldi	r30, 0x06	; 6
   17e22:	0c 94 06 e0 	jmp	0x1c00c	; 0x1c00c <__epilogue_restores__+0x18>

00017e26 <lif_S2B>:
   17e26:	fb 01       	movw	r30, r22
   17e28:	dc 01       	movw	r26, r24
   17e2a:	20 e0       	ldi	r18, 0x00	; 0
   17e2c:	30 e0       	ldi	r19, 0x00	; 0
   17e2e:	61 91       	ld	r22, Z+
   17e30:	61 11       	cpse	r22, r1
   17e32:	05 c0       	rjmp	.+10     	; 0x17e3e <lif_S2B+0x18>
   17e34:	fc 01       	movw	r30, r24
   17e36:	e2 0f       	add	r30, r18
   17e38:	f3 1f       	adc	r31, r19
   17e3a:	60 e2       	ldi	r22, 0x20	; 32
   17e3c:	08 c0       	rjmp	.+16     	; 0x17e4e <lif_S2B+0x28>
   17e3e:	24 17       	cp	r18, r20
   17e40:	35 07       	cpc	r19, r21
   17e42:	24 f4       	brge	.+8      	; 0x17e4c <lif_S2B+0x26>
   17e44:	6d 93       	st	X+, r22
   17e46:	2f 5f       	subi	r18, 0xFF	; 255
   17e48:	3f 4f       	sbci	r19, 0xFF	; 255
   17e4a:	f1 cf       	rjmp	.-30     	; 0x17e2e <lif_S2B+0x8>
   17e4c:	08 95       	ret
   17e4e:	9f 01       	movw	r18, r30
   17e50:	28 1b       	sub	r18, r24
   17e52:	39 0b       	sbc	r19, r25
   17e54:	24 17       	cp	r18, r20
   17e56:	35 07       	cpc	r19, r21
   17e58:	14 f4       	brge	.+4      	; 0x17e5e <lif_S2B+0x38>
   17e5a:	61 93       	st	Z+, r22
   17e5c:	f8 cf       	rjmp	.-16     	; 0x17e4e <lif_S2B+0x28>
   17e5e:	08 95       	ret

00017e60 <lif_fixname>:
   17e60:	a0 e0       	ldi	r26, 0x00	; 0
   17e62:	b0 e0       	ldi	r27, 0x00	; 0
   17e64:	e6 e3       	ldi	r30, 0x36	; 54
   17e66:	ff eb       	ldi	r31, 0xBF	; 191
   17e68:	0c 94 e7 df 	jmp	0x1bfce	; 0x1bfce <__prologue_saves__+0x12>
   17e6c:	8c 01       	movw	r16, r24
   17e6e:	cb 01       	movw	r24, r22
   17e70:	7a 01       	movw	r14, r20
   17e72:	0e 94 4d 76 	call	0xec9a	; 0xec9a <basename>
   17e76:	6c 01       	movw	r12, r24
   17e78:	e8 01       	movw	r28, r16
   17e7a:	80 e2       	ldi	r24, 0x20	; 32
   17e7c:	b8 2e       	mov	r11, r24
   17e7e:	be 01       	movw	r22, r28
   17e80:	60 1b       	sub	r22, r16
   17e82:	71 0b       	sbc	r23, r17
   17e84:	f6 01       	movw	r30, r12
   17e86:	81 91       	ld	r24, Z+
   17e88:	6f 01       	movw	r12, r30
   17e8a:	81 11       	cpse	r24, r1
   17e8c:	02 c0       	rjmp	.+4      	; 0x17e92 <lif_fixname+0x32>
   17e8e:	20 e2       	ldi	r18, 0x20	; 32
   17e90:	0e c0       	rjmp	.+28     	; 0x17eae <lif_fixname+0x4e>
   17e92:	1e 14       	cp	r1, r14
   17e94:	1f 04       	cpc	r1, r15
   17e96:	dc f7       	brge	.-10     	; 0x17e8e <lif_fixname+0x2e>
   17e98:	8e 32       	cpi	r24, 0x2E	; 46
   17e9a:	c9 f3       	breq	.-14     	; 0x17e8e <lif_fixname+0x2e>
   17e9c:	90 e0       	ldi	r25, 0x00	; 0
   17e9e:	41 df       	rcall	.-382    	; 0x17d22 <lif_chars>
   17ea0:	88 23       	and	r24, r24
   17ea2:	11 f0       	breq	.+4      	; 0x17ea8 <lif_fixname+0x48>
   17ea4:	88 83       	st	Y, r24
   17ea6:	01 c0       	rjmp	.+2      	; 0x17eaa <lif_fixname+0x4a>
   17ea8:	b8 82       	st	Y, r11
   17eaa:	21 96       	adiw	r28, 0x01	; 1
   17eac:	e8 cf       	rjmp	.-48     	; 0x17e7e <lif_fixname+0x1e>
   17eae:	ce 01       	movw	r24, r28
   17eb0:	80 1b       	sub	r24, r16
   17eb2:	91 0b       	sbc	r25, r17
   17eb4:	8e 15       	cp	r24, r14
   17eb6:	9f 05       	cpc	r25, r15
   17eb8:	14 f4       	brge	.+4      	; 0x17ebe <lif_fixname+0x5e>
   17eba:	29 93       	st	Y+, r18
   17ebc:	f8 cf       	rjmp	.-16     	; 0x17eae <lif_fixname+0x4e>
   17ebe:	18 82       	st	Y, r1
   17ec0:	f8 01       	movw	r30, r16
   17ec2:	01 90       	ld	r0, Z+
   17ec4:	00 20       	and	r0, r0
   17ec6:	e9 f7       	brne	.-6      	; 0x17ec2 <lif_fixname+0x62>
   17ec8:	cf 01       	movw	r24, r30
   17eca:	01 97       	sbiw	r24, 0x01	; 1
   17ecc:	80 1b       	sub	r24, r16
   17ece:	91 0b       	sbc	r25, r17
   17ed0:	cd b7       	in	r28, 0x3d	; 61
   17ed2:	de b7       	in	r29, 0x3e	; 62
   17ed4:	e9 e0       	ldi	r30, 0x09	; 9
   17ed6:	0c 94 03 e0 	jmp	0x1c006	; 0x1c006 <__epilogue_restores__+0x12>

00017eda <lif_vol2str>:
   17eda:	ef 92       	push	r14
   17edc:	ff 92       	push	r15
   17ede:	0f 93       	push	r16
   17ee0:	1f 93       	push	r17
   17ee2:	cf 93       	push	r28
   17ee4:	df 93       	push	r29
   17ee6:	7c 01       	movw	r14, r24
   17ee8:	eb 01       	movw	r28, r22
   17eea:	fc 01       	movw	r30, r24
   17eec:	04 a1       	ldd	r16, Z+36	; 0x24
   17eee:	15 a1       	ldd	r17, Z+37	; 0x25
   17ef0:	20 e0       	ldi	r18, 0x00	; 0
   17ef2:	30 e0       	ldi	r19, 0x00	; 0
   17ef4:	42 e0       	ldi	r20, 0x02	; 2
   17ef6:	50 e0       	ldi	r21, 0x00	; 0
   17ef8:	60 e0       	ldi	r22, 0x00	; 0
   17efa:	70 e0       	ldi	r23, 0x00	; 0
   17efc:	ce 01       	movw	r24, r28
   17efe:	e8 dc       	rcall	.-1584   	; 0x178d0 <V2B_MSB>
   17f00:	b7 01       	movw	r22, r14
   17f02:	6a 5d       	subi	r22, 0xDA	; 218
   17f04:	7f 4f       	sbci	r23, 0xFF	; 255
   17f06:	46 e0       	ldi	r20, 0x06	; 6
   17f08:	50 e0       	ldi	r21, 0x00	; 0
   17f0a:	ce 01       	movw	r24, r28
   17f0c:	02 96       	adiw	r24, 0x02	; 2
   17f0e:	8b df       	rcall	.-234    	; 0x17e26 <lif_S2B>
   17f10:	f7 01       	movw	r30, r14
   17f12:	05 a5       	ldd	r16, Z+45	; 0x2d
   17f14:	16 a5       	ldd	r17, Z+46	; 0x2e
   17f16:	27 a5       	ldd	r18, Z+47	; 0x2f
   17f18:	30 a9       	ldd	r19, Z+48	; 0x30
   17f1a:	44 e0       	ldi	r20, 0x04	; 4
   17f1c:	50 e0       	ldi	r21, 0x00	; 0
   17f1e:	68 e0       	ldi	r22, 0x08	; 8
   17f20:	70 e0       	ldi	r23, 0x00	; 0
   17f22:	ce 01       	movw	r24, r28
   17f24:	d5 dc       	rcall	.-1622   	; 0x178d0 <V2B_MSB>
   17f26:	f7 01       	movw	r30, r14
   17f28:	01 a9       	ldd	r16, Z+49	; 0x31
   17f2a:	12 a9       	ldd	r17, Z+50	; 0x32
   17f2c:	20 e0       	ldi	r18, 0x00	; 0
   17f2e:	30 e0       	ldi	r19, 0x00	; 0
   17f30:	42 e0       	ldi	r20, 0x02	; 2
   17f32:	50 e0       	ldi	r21, 0x00	; 0
   17f34:	6c e0       	ldi	r22, 0x0C	; 12
   17f36:	70 e0       	ldi	r23, 0x00	; 0
   17f38:	ce 01       	movw	r24, r28
   17f3a:	ca dc       	rcall	.-1644   	; 0x178d0 <V2B_MSB>
   17f3c:	00 e0       	ldi	r16, 0x00	; 0
   17f3e:	10 e0       	ldi	r17, 0x00	; 0
   17f40:	98 01       	movw	r18, r16
   17f42:	42 e0       	ldi	r20, 0x02	; 2
   17f44:	50 e0       	ldi	r21, 0x00	; 0
   17f46:	6e e0       	ldi	r22, 0x0E	; 14
   17f48:	70 e0       	ldi	r23, 0x00	; 0
   17f4a:	ce 01       	movw	r24, r28
   17f4c:	c1 dc       	rcall	.-1662   	; 0x178d0 <V2B_MSB>
   17f4e:	f7 01       	movw	r30, r14
   17f50:	05 a9       	ldd	r16, Z+53	; 0x35
   17f52:	16 a9       	ldd	r17, Z+54	; 0x36
   17f54:	27 a9       	ldd	r18, Z+55	; 0x37
   17f56:	30 ad       	ldd	r19, Z+56	; 0x38
   17f58:	44 e0       	ldi	r20, 0x04	; 4
   17f5a:	50 e0       	ldi	r21, 0x00	; 0
   17f5c:	60 e1       	ldi	r22, 0x10	; 16
   17f5e:	70 e0       	ldi	r23, 0x00	; 0
   17f60:	ce 01       	movw	r24, r28
   17f62:	b6 dc       	rcall	.-1684   	; 0x178d0 <V2B_MSB>
   17f64:	f7 01       	movw	r30, r14
   17f66:	01 ad       	ldd	r16, Z+57	; 0x39
   17f68:	12 ad       	ldd	r17, Z+58	; 0x3a
   17f6a:	20 e0       	ldi	r18, 0x00	; 0
   17f6c:	30 e0       	ldi	r19, 0x00	; 0
   17f6e:	42 e0       	ldi	r20, 0x02	; 2
   17f70:	50 e0       	ldi	r21, 0x00	; 0
   17f72:	64 e1       	ldi	r22, 0x14	; 20
   17f74:	70 e0       	ldi	r23, 0x00	; 0
   17f76:	ce 01       	movw	r24, r28
   17f78:	ab dc       	rcall	.-1706   	; 0x178d0 <V2B_MSB>
   17f7a:	00 e0       	ldi	r16, 0x00	; 0
   17f7c:	10 e0       	ldi	r17, 0x00	; 0
   17f7e:	98 01       	movw	r18, r16
   17f80:	42 e0       	ldi	r20, 0x02	; 2
   17f82:	50 e0       	ldi	r21, 0x00	; 0
   17f84:	66 e1       	ldi	r22, 0x16	; 22
   17f86:	70 e0       	ldi	r23, 0x00	; 0
   17f88:	ce 01       	movw	r24, r28
   17f8a:	a2 dc       	rcall	.-1724   	; 0x178d0 <V2B_MSB>
   17f8c:	f7 01       	movw	r30, r14
   17f8e:	fd 96       	adiw	r30, 0x3d	; 61
   17f90:	00 81       	ld	r16, Z
   17f92:	11 81       	ldd	r17, Z+1	; 0x01
   17f94:	22 81       	ldd	r18, Z+2	; 0x02
   17f96:	33 81       	ldd	r19, Z+3	; 0x03
   17f98:	44 e0       	ldi	r20, 0x04	; 4
   17f9a:	50 e0       	ldi	r21, 0x00	; 0
   17f9c:	68 e1       	ldi	r22, 0x18	; 24
   17f9e:	70 e0       	ldi	r23, 0x00	; 0
   17fa0:	ce 01       	movw	r24, r28
   17fa2:	96 dc       	rcall	.-1748   	; 0x178d0 <V2B_MSB>
   17fa4:	f7 01       	movw	r30, r14
   17fa6:	ef 5b       	subi	r30, 0xBF	; 191
   17fa8:	ff 4f       	sbci	r31, 0xFF	; 255
   17faa:	00 81       	ld	r16, Z
   17fac:	11 81       	ldd	r17, Z+1	; 0x01
   17fae:	22 81       	ldd	r18, Z+2	; 0x02
   17fb0:	33 81       	ldd	r19, Z+3	; 0x03
   17fb2:	44 e0       	ldi	r20, 0x04	; 4
   17fb4:	50 e0       	ldi	r21, 0x00	; 0
   17fb6:	6c e1       	ldi	r22, 0x1C	; 28
   17fb8:	70 e0       	ldi	r23, 0x00	; 0
   17fba:	ce 01       	movw	r24, r28
   17fbc:	89 dc       	rcall	.-1774   	; 0x178d0 <V2B_MSB>
   17fbe:	f7 01       	movw	r30, r14
   17fc0:	eb 5b       	subi	r30, 0xBB	; 187
   17fc2:	ff 4f       	sbci	r31, 0xFF	; 255
   17fc4:	00 81       	ld	r16, Z
   17fc6:	11 81       	ldd	r17, Z+1	; 0x01
   17fc8:	22 81       	ldd	r18, Z+2	; 0x02
   17fca:	33 81       	ldd	r19, Z+3	; 0x03
   17fcc:	44 e0       	ldi	r20, 0x04	; 4
   17fce:	50 e0       	ldi	r21, 0x00	; 0
   17fd0:	60 e2       	ldi	r22, 0x20	; 32
   17fd2:	70 e0       	ldi	r23, 0x00	; 0
   17fd4:	ce 01       	movw	r24, r28
   17fd6:	7c dc       	rcall	.-1800   	; 0x178d0 <V2B_MSB>
   17fd8:	de 01       	movw	r26, r28
   17fda:	94 96       	adiw	r26, 0x24	; 36
   17fdc:	f7 01       	movw	r30, r14
   17fde:	e7 5b       	subi	r30, 0xB7	; 183
   17fe0:	ff 4f       	sbci	r31, 0xFF	; 255
   17fe2:	86 e0       	ldi	r24, 0x06	; 6
   17fe4:	01 90       	ld	r0, Z+
   17fe6:	0d 92       	st	X+, r0
   17fe8:	8a 95       	dec	r24
   17fea:	e1 f7       	brne	.-8      	; 0x17fe4 <lif_vol2str+0x10a>
   17fec:	cd b7       	in	r28, 0x3d	; 61
   17fee:	de b7       	in	r29, 0x3e	; 62
   17ff0:	e6 e0       	ldi	r30, 0x06	; 6
   17ff2:	0c 94 06 e0 	jmp	0x1c00c	; 0x1c00c <__epilogue_restores__+0x18>

00017ff6 <lif_str2vol>:
   17ff6:	0f 93       	push	r16
   17ff8:	1f 93       	push	r17
   17ffa:	cf 93       	push	r28
   17ffc:	df 93       	push	r29
   17ffe:	8c 01       	movw	r16, r24
   18000:	eb 01       	movw	r28, r22
   18002:	42 e0       	ldi	r20, 0x02	; 2
   18004:	50 e0       	ldi	r21, 0x00	; 0
   18006:	60 e0       	ldi	r22, 0x00	; 0
   18008:	70 e0       	ldi	r23, 0x00	; 0
   1800a:	8b dc       	rcall	.-1770   	; 0x17922 <B2V_MSB>
   1800c:	7d a3       	std	Y+37, r23	; 0x25
   1800e:	6c a3       	std	Y+36, r22	; 0x24
   18010:	be 01       	movw	r22, r28
   18012:	6a 5d       	subi	r22, 0xDA	; 218
   18014:	7f 4f       	sbci	r23, 0xFF	; 255
   18016:	46 e0       	ldi	r20, 0x06	; 6
   18018:	50 e0       	ldi	r21, 0x00	; 0
   1801a:	c8 01       	movw	r24, r16
   1801c:	02 96       	adiw	r24, 0x02	; 2
   1801e:	ac de       	rcall	.-680    	; 0x17d78 <lif_B2S>
   18020:	44 e0       	ldi	r20, 0x04	; 4
   18022:	50 e0       	ldi	r21, 0x00	; 0
   18024:	68 e0       	ldi	r22, 0x08	; 8
   18026:	70 e0       	ldi	r23, 0x00	; 0
   18028:	c8 01       	movw	r24, r16
   1802a:	7b dc       	rcall	.-1802   	; 0x17922 <B2V_MSB>
   1802c:	6d a7       	std	Y+45, r22	; 0x2d
   1802e:	7e a7       	std	Y+46, r23	; 0x2e
   18030:	8f a7       	std	Y+47, r24	; 0x2f
   18032:	98 ab       	std	Y+48, r25	; 0x30
   18034:	42 e0       	ldi	r20, 0x02	; 2
   18036:	50 e0       	ldi	r21, 0x00	; 0
   18038:	6c e0       	ldi	r22, 0x0C	; 12
   1803a:	70 e0       	ldi	r23, 0x00	; 0
   1803c:	c8 01       	movw	r24, r16
   1803e:	71 dc       	rcall	.-1822   	; 0x17922 <B2V_MSB>
   18040:	7a ab       	std	Y+50, r23	; 0x32
   18042:	69 ab       	std	Y+49, r22	; 0x31
   18044:	42 e0       	ldi	r20, 0x02	; 2
   18046:	50 e0       	ldi	r21, 0x00	; 0
   18048:	6e e0       	ldi	r22, 0x0E	; 14
   1804a:	70 e0       	ldi	r23, 0x00	; 0
   1804c:	c8 01       	movw	r24, r16
   1804e:	69 dc       	rcall	.-1838   	; 0x17922 <B2V_MSB>
   18050:	7c ab       	std	Y+52, r23	; 0x34
   18052:	6b ab       	std	Y+51, r22	; 0x33
   18054:	44 e0       	ldi	r20, 0x04	; 4
   18056:	50 e0       	ldi	r21, 0x00	; 0
   18058:	60 e1       	ldi	r22, 0x10	; 16
   1805a:	70 e0       	ldi	r23, 0x00	; 0
   1805c:	c8 01       	movw	r24, r16
   1805e:	61 dc       	rcall	.-1854   	; 0x17922 <B2V_MSB>
   18060:	6d ab       	std	Y+53, r22	; 0x35
   18062:	7e ab       	std	Y+54, r23	; 0x36
   18064:	8f ab       	std	Y+55, r24	; 0x37
   18066:	98 af       	std	Y+56, r25	; 0x38
   18068:	42 e0       	ldi	r20, 0x02	; 2
   1806a:	50 e0       	ldi	r21, 0x00	; 0
   1806c:	64 e1       	ldi	r22, 0x14	; 20
   1806e:	70 e0       	ldi	r23, 0x00	; 0
   18070:	c8 01       	movw	r24, r16
   18072:	57 dc       	rcall	.-1874   	; 0x17922 <B2V_MSB>
   18074:	7a af       	std	Y+58, r23	; 0x3a
   18076:	69 af       	std	Y+57, r22	; 0x39
   18078:	42 e0       	ldi	r20, 0x02	; 2
   1807a:	50 e0       	ldi	r21, 0x00	; 0
   1807c:	66 e1       	ldi	r22, 0x16	; 22
   1807e:	70 e0       	ldi	r23, 0x00	; 0
   18080:	c8 01       	movw	r24, r16
   18082:	4f dc       	rcall	.-1890   	; 0x17922 <B2V_MSB>
   18084:	7c af       	std	Y+60, r23	; 0x3c
   18086:	6b af       	std	Y+59, r22	; 0x3b
   18088:	44 e0       	ldi	r20, 0x04	; 4
   1808a:	50 e0       	ldi	r21, 0x00	; 0
   1808c:	68 e1       	ldi	r22, 0x18	; 24
   1808e:	70 e0       	ldi	r23, 0x00	; 0
   18090:	c8 01       	movw	r24, r16
   18092:	47 dc       	rcall	.-1906   	; 0x17922 <B2V_MSB>
   18094:	fe 01       	movw	r30, r28
   18096:	fd 96       	adiw	r30, 0x3d	; 61
   18098:	60 83       	st	Z, r22
   1809a:	71 83       	std	Z+1, r23	; 0x01
   1809c:	82 83       	std	Z+2, r24	; 0x02
   1809e:	93 83       	std	Z+3, r25	; 0x03
   180a0:	44 e0       	ldi	r20, 0x04	; 4
   180a2:	50 e0       	ldi	r21, 0x00	; 0
   180a4:	6c e1       	ldi	r22, 0x1C	; 28
   180a6:	70 e0       	ldi	r23, 0x00	; 0
   180a8:	c8 01       	movw	r24, r16
   180aa:	3b dc       	rcall	.-1930   	; 0x17922 <B2V_MSB>
   180ac:	fe 01       	movw	r30, r28
   180ae:	ef 5b       	subi	r30, 0xBF	; 191
   180b0:	ff 4f       	sbci	r31, 0xFF	; 255
   180b2:	60 83       	st	Z, r22
   180b4:	71 83       	std	Z+1, r23	; 0x01
   180b6:	82 83       	std	Z+2, r24	; 0x02
   180b8:	93 83       	std	Z+3, r25	; 0x03
   180ba:	44 e0       	ldi	r20, 0x04	; 4
   180bc:	50 e0       	ldi	r21, 0x00	; 0
   180be:	60 e2       	ldi	r22, 0x20	; 32
   180c0:	70 e0       	ldi	r23, 0x00	; 0
   180c2:	c8 01       	movw	r24, r16
   180c4:	2e dc       	rcall	.-1956   	; 0x17922 <B2V_MSB>
   180c6:	fe 01       	movw	r30, r28
   180c8:	eb 5b       	subi	r30, 0xBB	; 187
   180ca:	ff 4f       	sbci	r31, 0xFF	; 255
   180cc:	60 83       	st	Z, r22
   180ce:	71 83       	std	Z+1, r23	; 0x01
   180d0:	82 83       	std	Z+2, r24	; 0x02
   180d2:	93 83       	std	Z+3, r25	; 0x03
   180d4:	de 01       	movw	r26, r28
   180d6:	a7 5b       	subi	r26, 0xB7	; 183
   180d8:	bf 4f       	sbci	r27, 0xFF	; 255
   180da:	f8 01       	movw	r30, r16
   180dc:	b4 96       	adiw	r30, 0x24	; 36
   180de:	86 e0       	ldi	r24, 0x06	; 6
   180e0:	01 90       	ld	r0, Z+
   180e2:	0d 92       	st	X+, r0
   180e4:	8a 95       	dec	r24
   180e6:	e1 f7       	brne	.-8      	; 0x180e0 <lif_str2vol+0xea>
   180e8:	df 91       	pop	r29
   180ea:	cf 91       	pop	r28
   180ec:	1f 91       	pop	r17
   180ee:	0f 91       	pop	r16
   180f0:	08 95       	ret

000180f2 <lif_dir2str>:
   180f2:	ef 92       	push	r14
   180f4:	ff 92       	push	r15
   180f6:	0f 93       	push	r16
   180f8:	1f 93       	push	r17
   180fa:	cf 93       	push	r28
   180fc:	df 93       	push	r29
   180fe:	ec 01       	movw	r28, r24
   18100:	7b 01       	movw	r14, r22
   18102:	bc 01       	movw	r22, r24
   18104:	61 5b       	subi	r22, 0xB1	; 177
   18106:	7f 4f       	sbci	r23, 0xFF	; 255
   18108:	4a e0       	ldi	r20, 0x0A	; 10
   1810a:	50 e0       	ldi	r21, 0x00	; 0
   1810c:	c7 01       	movw	r24, r14
   1810e:	8b de       	rcall	.-746    	; 0x17e26 <lif_S2B>
   18110:	fe 01       	movw	r30, r28
   18112:	e6 5a       	subi	r30, 0xA6	; 166
   18114:	ff 4f       	sbci	r31, 0xFF	; 255
   18116:	00 81       	ld	r16, Z
   18118:	11 81       	ldd	r17, Z+1	; 0x01
   1811a:	20 e0       	ldi	r18, 0x00	; 0
   1811c:	30 e0       	ldi	r19, 0x00	; 0
   1811e:	42 e0       	ldi	r20, 0x02	; 2
   18120:	50 e0       	ldi	r21, 0x00	; 0
   18122:	6a e0       	ldi	r22, 0x0A	; 10
   18124:	70 e0       	ldi	r23, 0x00	; 0
   18126:	c7 01       	movw	r24, r14
   18128:	d3 db       	rcall	.-2138   	; 0x178d0 <V2B_MSB>
   1812a:	fe 01       	movw	r30, r28
   1812c:	e4 5a       	subi	r30, 0xA4	; 164
   1812e:	ff 4f       	sbci	r31, 0xFF	; 255
   18130:	00 81       	ld	r16, Z
   18132:	11 81       	ldd	r17, Z+1	; 0x01
   18134:	22 81       	ldd	r18, Z+2	; 0x02
   18136:	33 81       	ldd	r19, Z+3	; 0x03
   18138:	44 e0       	ldi	r20, 0x04	; 4
   1813a:	50 e0       	ldi	r21, 0x00	; 0
   1813c:	6c e0       	ldi	r22, 0x0C	; 12
   1813e:	70 e0       	ldi	r23, 0x00	; 0
   18140:	c7 01       	movw	r24, r14
   18142:	c6 db       	rcall	.-2164   	; 0x178d0 <V2B_MSB>
   18144:	fe 01       	movw	r30, r28
   18146:	e0 5a       	subi	r30, 0xA0	; 160
   18148:	ff 4f       	sbci	r31, 0xFF	; 255
   1814a:	00 81       	ld	r16, Z
   1814c:	11 81       	ldd	r17, Z+1	; 0x01
   1814e:	22 81       	ldd	r18, Z+2	; 0x02
   18150:	33 81       	ldd	r19, Z+3	; 0x03
   18152:	44 e0       	ldi	r20, 0x04	; 4
   18154:	50 e0       	ldi	r21, 0x00	; 0
   18156:	60 e1       	ldi	r22, 0x10	; 16
   18158:	70 e0       	ldi	r23, 0x00	; 0
   1815a:	c7 01       	movw	r24, r14
   1815c:	b9 db       	rcall	.-2190   	; 0x178d0 <V2B_MSB>
   1815e:	d7 01       	movw	r26, r14
   18160:	54 96       	adiw	r26, 0x14	; 20
   18162:	fe 01       	movw	r30, r28
   18164:	ec 59       	subi	r30, 0x9C	; 156
   18166:	ff 4f       	sbci	r31, 0xFF	; 255
   18168:	86 e0       	ldi	r24, 0x06	; 6
   1816a:	01 90       	ld	r0, Z+
   1816c:	0d 92       	st	X+, r0
   1816e:	8a 95       	dec	r24
   18170:	e1 f7       	brne	.-8      	; 0x1816a <lif_dir2str+0x78>
   18172:	fe 01       	movw	r30, r28
   18174:	e6 59       	subi	r30, 0x96	; 150
   18176:	ff 4f       	sbci	r31, 0xFF	; 255
   18178:	00 81       	ld	r16, Z
   1817a:	11 81       	ldd	r17, Z+1	; 0x01
   1817c:	20 e0       	ldi	r18, 0x00	; 0
   1817e:	30 e0       	ldi	r19, 0x00	; 0
   18180:	42 e0       	ldi	r20, 0x02	; 2
   18182:	50 e0       	ldi	r21, 0x00	; 0
   18184:	6a e1       	ldi	r22, 0x1A	; 26
   18186:	70 e0       	ldi	r23, 0x00	; 0
   18188:	c7 01       	movw	r24, r14
   1818a:	a2 db       	rcall	.-2236   	; 0x178d0 <V2B_MSB>
   1818c:	fe 01       	movw	r30, r28
   1818e:	e4 59       	subi	r30, 0x94	; 148
   18190:	ff 4f       	sbci	r31, 0xFF	; 255
   18192:	00 81       	ld	r16, Z
   18194:	11 81       	ldd	r17, Z+1	; 0x01
   18196:	20 e0       	ldi	r18, 0x00	; 0
   18198:	30 e0       	ldi	r19, 0x00	; 0
   1819a:	42 e0       	ldi	r20, 0x02	; 2
   1819c:	50 e0       	ldi	r21, 0x00	; 0
   1819e:	6c e1       	ldi	r22, 0x1C	; 28
   181a0:	70 e0       	ldi	r23, 0x00	; 0
   181a2:	c7 01       	movw	r24, r14
   181a4:	a9 db       	rcall	.-2222   	; 0x178f8 <V2B_LSB>
   181a6:	c2 59       	subi	r28, 0x92	; 146
   181a8:	df 4f       	sbci	r29, 0xFF	; 255
   181aa:	08 81       	ld	r16, Y
   181ac:	19 81       	ldd	r17, Y+1	; 0x01
   181ae:	20 e0       	ldi	r18, 0x00	; 0
   181b0:	30 e0       	ldi	r19, 0x00	; 0
   181b2:	42 e0       	ldi	r20, 0x02	; 2
   181b4:	50 e0       	ldi	r21, 0x00	; 0
   181b6:	6e e1       	ldi	r22, 0x1E	; 30
   181b8:	70 e0       	ldi	r23, 0x00	; 0
   181ba:	c7 01       	movw	r24, r14
   181bc:	9d db       	rcall	.-2246   	; 0x178f8 <V2B_LSB>
   181be:	cd b7       	in	r28, 0x3d	; 61
   181c0:	de b7       	in	r29, 0x3e	; 62
   181c2:	e6 e0       	ldi	r30, 0x06	; 6
   181c4:	0c 94 06 e0 	jmp	0x1c00c	; 0x1c00c <__epilogue_restores__+0x18>

000181c8 <lif_str2dir>:
   181c8:	0f 93       	push	r16
   181ca:	1f 93       	push	r17
   181cc:	cf 93       	push	r28
   181ce:	df 93       	push	r29
   181d0:	8c 01       	movw	r16, r24
   181d2:	eb 01       	movw	r28, r22
   181d4:	61 5b       	subi	r22, 0xB1	; 177
   181d6:	7f 4f       	sbci	r23, 0xFF	; 255
   181d8:	4a e0       	ldi	r20, 0x0A	; 10
   181da:	50 e0       	ldi	r21, 0x00	; 0
   181dc:	cd dd       	rcall	.-1126   	; 0x17d78 <lif_B2S>
   181de:	42 e0       	ldi	r20, 0x02	; 2
   181e0:	50 e0       	ldi	r21, 0x00	; 0
   181e2:	6a e0       	ldi	r22, 0x0A	; 10
   181e4:	70 e0       	ldi	r23, 0x00	; 0
   181e6:	c8 01       	movw	r24, r16
   181e8:	9c db       	rcall	.-2248   	; 0x17922 <B2V_MSB>
   181ea:	fe 01       	movw	r30, r28
   181ec:	e6 5a       	subi	r30, 0xA6	; 166
   181ee:	ff 4f       	sbci	r31, 0xFF	; 255
   181f0:	71 83       	std	Z+1, r23	; 0x01
   181f2:	60 83       	st	Z, r22
   181f4:	44 e0       	ldi	r20, 0x04	; 4
   181f6:	50 e0       	ldi	r21, 0x00	; 0
   181f8:	6c e0       	ldi	r22, 0x0C	; 12
   181fa:	70 e0       	ldi	r23, 0x00	; 0
   181fc:	c8 01       	movw	r24, r16
   181fe:	91 db       	rcall	.-2270   	; 0x17922 <B2V_MSB>
   18200:	fe 01       	movw	r30, r28
   18202:	e4 5a       	subi	r30, 0xA4	; 164
   18204:	ff 4f       	sbci	r31, 0xFF	; 255
   18206:	60 83       	st	Z, r22
   18208:	71 83       	std	Z+1, r23	; 0x01
   1820a:	82 83       	std	Z+2, r24	; 0x02
   1820c:	93 83       	std	Z+3, r25	; 0x03
   1820e:	44 e0       	ldi	r20, 0x04	; 4
   18210:	50 e0       	ldi	r21, 0x00	; 0
   18212:	60 e1       	ldi	r22, 0x10	; 16
   18214:	70 e0       	ldi	r23, 0x00	; 0
   18216:	c8 01       	movw	r24, r16
   18218:	84 db       	rcall	.-2296   	; 0x17922 <B2V_MSB>
   1821a:	fe 01       	movw	r30, r28
   1821c:	e0 5a       	subi	r30, 0xA0	; 160
   1821e:	ff 4f       	sbci	r31, 0xFF	; 255
   18220:	60 83       	st	Z, r22
   18222:	71 83       	std	Z+1, r23	; 0x01
   18224:	82 83       	std	Z+2, r24	; 0x02
   18226:	93 83       	std	Z+3, r25	; 0x03
   18228:	de 01       	movw	r26, r28
   1822a:	ac 59       	subi	r26, 0x9C	; 156
   1822c:	bf 4f       	sbci	r27, 0xFF	; 255
   1822e:	f8 01       	movw	r30, r16
   18230:	74 96       	adiw	r30, 0x14	; 20
   18232:	86 e0       	ldi	r24, 0x06	; 6
   18234:	01 90       	ld	r0, Z+
   18236:	0d 92       	st	X+, r0
   18238:	8a 95       	dec	r24
   1823a:	e1 f7       	brne	.-8      	; 0x18234 <lif_str2dir+0x6c>
   1823c:	42 e0       	ldi	r20, 0x02	; 2
   1823e:	50 e0       	ldi	r21, 0x00	; 0
   18240:	6a e1       	ldi	r22, 0x1A	; 26
   18242:	70 e0       	ldi	r23, 0x00	; 0
   18244:	c8 01       	movw	r24, r16
   18246:	6d db       	rcall	.-2342   	; 0x17922 <B2V_MSB>
   18248:	fe 01       	movw	r30, r28
   1824a:	e6 59       	subi	r30, 0x96	; 150
   1824c:	ff 4f       	sbci	r31, 0xFF	; 255
   1824e:	71 83       	std	Z+1, r23	; 0x01
   18250:	60 83       	st	Z, r22
   18252:	42 e0       	ldi	r20, 0x02	; 2
   18254:	50 e0       	ldi	r21, 0x00	; 0
   18256:	6c e1       	ldi	r22, 0x1C	; 28
   18258:	70 e0       	ldi	r23, 0x00	; 0
   1825a:	c8 01       	movw	r24, r16
   1825c:	81 db       	rcall	.-2302   	; 0x17960 <B2V_LSB>
   1825e:	fe 01       	movw	r30, r28
   18260:	e4 59       	subi	r30, 0x94	; 148
   18262:	ff 4f       	sbci	r31, 0xFF	; 255
   18264:	71 83       	std	Z+1, r23	; 0x01
   18266:	60 83       	st	Z, r22
   18268:	42 e0       	ldi	r20, 0x02	; 2
   1826a:	50 e0       	ldi	r21, 0x00	; 0
   1826c:	6e e1       	ldi	r22, 0x1E	; 30
   1826e:	70 e0       	ldi	r23, 0x00	; 0
   18270:	c8 01       	movw	r24, r16
   18272:	76 db       	rcall	.-2324   	; 0x17960 <B2V_LSB>
   18274:	c2 59       	subi	r28, 0x92	; 146
   18276:	df 4f       	sbci	r29, 0xFF	; 255
   18278:	79 83       	std	Y+1, r23	; 0x01
   1827a:	68 83       	st	Y, r22
   1827c:	df 91       	pop	r29
   1827e:	cf 91       	pop	r28
   18280:	1f 91       	pop	r17
   18282:	0f 91       	pop	r16
   18284:	08 95       	ret

00018286 <lif_BIN2BCD>:
   18286:	6a e0       	ldi	r22, 0x0A	; 10
   18288:	0e 94 3e df 	call	0x1be7c	; 0x1be7c <__udivmodqi4>
   1828c:	82 95       	swap	r24
   1828e:	80 7f       	andi	r24, 0xF0	; 240
   18290:	89 2b       	or	r24, r25
   18292:	08 95       	ret

00018294 <lif_BCD2BIN>:
   18294:	28 2f       	mov	r18, r24
   18296:	22 95       	swap	r18
   18298:	2f 70       	andi	r18, 0x0F	; 15
   1829a:	8f 70       	andi	r24, 0x0F	; 15
   1829c:	90 e0       	ldi	r25, 0x00	; 0
   1829e:	3a e0       	ldi	r19, 0x0A	; 10
   182a0:	23 9f       	mul	r18, r19
   182a2:	80 0d       	add	r24, r0
   182a4:	91 1d       	adc	r25, r1
   182a6:	11 24       	eor	r1, r1
   182a8:	08 95       	ret

000182aa <lif_time2lifbcd>:
   182aa:	aa e1       	ldi	r26, 0x1A	; 26
   182ac:	b0 e0       	ldi	r27, 0x00	; 0
   182ae:	eb e5       	ldi	r30, 0x5B	; 91
   182b0:	f1 ec       	ldi	r31, 0xC1	; 193
   182b2:	0c 94 ec df 	jmp	0x1bfd8	; 0x1bfd8 <__prologue_saves__+0x1c>
   182b6:	8b 01       	movw	r16, r22
   182b8:	9c 01       	movw	r18, r24
   182ba:	6f 8b       	std	Y+23, r22	; 0x17
   182bc:	78 8f       	std	Y+24, r23	; 0x18
   182be:	89 8f       	std	Y+25, r24	; 0x19
   182c0:	9a 8f       	std	Y+26, r25	; 0x1a
   182c2:	67 2b       	or	r22, r23
   182c4:	68 2b       	or	r22, r24
   182c6:	69 2b       	or	r22, r25
   182c8:	41 f4       	brne	.+16     	; 0x182da <lif_time2lifbcd+0x30>
   182ca:	fa 01       	movw	r30, r20
   182cc:	ca 01       	movw	r24, r20
   182ce:	06 96       	adiw	r24, 0x06	; 6
   182d0:	11 92       	st	Z+, r1
   182d2:	e8 17       	cp	r30, r24
   182d4:	f9 07       	cpc	r31, r25
   182d6:	e1 f7       	brne	.-8      	; 0x182d0 <lif_time2lifbcd+0x26>
   182d8:	26 c0       	rjmp	.+76     	; 0x18326 <lif_time2lifbcd+0x7c>
   182da:	8a 01       	movw	r16, r20
   182dc:	be 01       	movw	r22, r28
   182de:	6f 5f       	subi	r22, 0xFF	; 255
   182e0:	7f 4f       	sbci	r23, 0xFF	; 255
   182e2:	ce 01       	movw	r24, r28
   182e4:	47 96       	adiw	r24, 0x17	; 23
   182e6:	0e 94 ef 36 	call	0x6dde	; 0x6dde <gmtime_r>
   182ea:	8b 85       	ldd	r24, Y+11	; 0x0b
   182ec:	9c 85       	ldd	r25, Y+12	; 0x0c
   182ee:	64 e6       	ldi	r22, 0x64	; 100
   182f0:	70 e0       	ldi	r23, 0x00	; 0
   182f2:	0e 94 5e df 	call	0x1bebc	; 0x1bebc <__divmodhi4>
   182f6:	c7 df       	rcall	.-114    	; 0x18286 <lif_BIN2BCD>
   182f8:	f8 01       	movw	r30, r16
   182fa:	80 83       	st	Z, r24
   182fc:	89 85       	ldd	r24, Y+9	; 0x09
   182fe:	8f 5f       	subi	r24, 0xFF	; 255
   18300:	c2 df       	rcall	.-124    	; 0x18286 <lif_BIN2BCD>
   18302:	f8 01       	movw	r30, r16
   18304:	81 83       	std	Z+1, r24	; 0x01
   18306:	8f 81       	ldd	r24, Y+7	; 0x07
   18308:	be df       	rcall	.-132    	; 0x18286 <lif_BIN2BCD>
   1830a:	f8 01       	movw	r30, r16
   1830c:	82 83       	std	Z+2, r24	; 0x02
   1830e:	8d 81       	ldd	r24, Y+5	; 0x05
   18310:	ba df       	rcall	.-140    	; 0x18286 <lif_BIN2BCD>
   18312:	f8 01       	movw	r30, r16
   18314:	83 83       	std	Z+3, r24	; 0x03
   18316:	8b 81       	ldd	r24, Y+3	; 0x03
   18318:	b6 df       	rcall	.-148    	; 0x18286 <lif_BIN2BCD>
   1831a:	f8 01       	movw	r30, r16
   1831c:	84 83       	std	Z+4, r24	; 0x04
   1831e:	89 81       	ldd	r24, Y+1	; 0x01
   18320:	b2 df       	rcall	.-156    	; 0x18286 <lif_BIN2BCD>
   18322:	f8 01       	movw	r30, r16
   18324:	85 83       	std	Z+5, r24	; 0x05
   18326:	6a 96       	adiw	r28, 0x1a	; 26
   18328:	e4 e0       	ldi	r30, 0x04	; 4
   1832a:	0c 94 08 e0 	jmp	0x1c010	; 0x1c010 <__epilogue_restores__+0x1c>

0001832e <lif_lifbcd2time>:
   1832e:	a6 e1       	ldi	r26, 0x16	; 22
   18330:	b0 e0       	ldi	r27, 0x00	; 0
   18332:	ed e9       	ldi	r30, 0x9D	; 157
   18334:	f1 ec       	ldi	r31, 0xC1	; 193
   18336:	0c 94 e6 df 	jmp	0x1bfcc	; 0x1bfcc <__prologue_saves__+0x10>
   1833a:	8c 01       	movw	r16, r24
   1833c:	7c 01       	movw	r14, r24
   1833e:	5c 01       	movw	r10, r24
   18340:	26 e0       	ldi	r18, 0x06	; 6
   18342:	a2 0e       	add	r10, r18
   18344:	b1 1c       	adc	r11, r1
   18346:	cc 24       	eor	r12, r12
   18348:	c3 94       	inc	r12
   1834a:	d1 2c       	mov	r13, r1
   1834c:	f7 01       	movw	r30, r14
   1834e:	81 91       	ld	r24, Z+
   18350:	7f 01       	movw	r14, r30
   18352:	a0 df       	rcall	.-192    	; 0x18294 <lif_BCD2BIN>
   18354:	89 2b       	or	r24, r25
   18356:	11 f0       	breq	.+4      	; 0x1835c <lif_lifbcd2time+0x2e>
   18358:	c1 2c       	mov	r12, r1
   1835a:	d1 2c       	mov	r13, r1
   1835c:	ea 14       	cp	r14, r10
   1835e:	fb 04       	cpc	r15, r11
   18360:	a9 f7       	brne	.-22     	; 0x1834c <lif_lifbcd2time+0x1e>
   18362:	c1 14       	cp	r12, r1
   18364:	d1 04       	cpc	r13, r1
   18366:	61 f5       	brne	.+88     	; 0x183c0 <lif_lifbcd2time+0x92>
   18368:	f8 01       	movw	r30, r16
   1836a:	80 81       	ld	r24, Z
   1836c:	93 df       	rcall	.-218    	; 0x18294 <lif_BCD2BIN>
   1836e:	7c 01       	movw	r14, r24
   18370:	f8 01       	movw	r30, r16
   18372:	81 81       	ldd	r24, Z+1	; 0x01
   18374:	8f df       	rcall	.-226    	; 0x18294 <lif_BCD2BIN>
   18376:	01 97       	sbiw	r24, 0x01	; 1
   18378:	f6 e4       	ldi	r31, 0x46	; 70
   1837a:	ef 16       	cp	r14, r31
   1837c:	f1 04       	cpc	r15, r1
   1837e:	1c f4       	brge	.+6      	; 0x18386 <lif_lifbcd2time+0x58>
   18380:	24 e6       	ldi	r18, 0x64	; 100
   18382:	e2 0e       	add	r14, r18
   18384:	f1 1c       	adc	r15, r1
   18386:	fc 86       	std	Y+12, r15	; 0x0c
   18388:	eb 86       	std	Y+11, r14	; 0x0b
   1838a:	9a 87       	std	Y+10, r25	; 0x0a
   1838c:	89 87       	std	Y+9, r24	; 0x09
   1838e:	f8 01       	movw	r30, r16
   18390:	82 81       	ldd	r24, Z+2	; 0x02
   18392:	80 df       	rcall	.-256    	; 0x18294 <lif_BCD2BIN>
   18394:	98 87       	std	Y+8, r25	; 0x08
   18396:	8f 83       	std	Y+7, r24	; 0x07
   18398:	f8 01       	movw	r30, r16
   1839a:	83 81       	ldd	r24, Z+3	; 0x03
   1839c:	7b df       	rcall	.-266    	; 0x18294 <lif_BCD2BIN>
   1839e:	9e 83       	std	Y+6, r25	; 0x06
   183a0:	8d 83       	std	Y+5, r24	; 0x05
   183a2:	f8 01       	movw	r30, r16
   183a4:	84 81       	ldd	r24, Z+4	; 0x04
   183a6:	76 df       	rcall	.-276    	; 0x18294 <lif_BCD2BIN>
   183a8:	9c 83       	std	Y+4, r25	; 0x04
   183aa:	8b 83       	std	Y+3, r24	; 0x03
   183ac:	f8 01       	movw	r30, r16
   183ae:	85 81       	ldd	r24, Z+5	; 0x05
   183b0:	71 df       	rcall	.-286    	; 0x18294 <lif_BCD2BIN>
   183b2:	9a 83       	std	Y+2, r25	; 0x02
   183b4:	89 83       	std	Y+1, r24	; 0x01
   183b6:	ce 01       	movw	r24, r28
   183b8:	01 96       	adiw	r24, 0x01	; 1
   183ba:	0e 94 c3 39 	call	0x7386	; 0x7386 <timegm>
   183be:	03 c0       	rjmp	.+6      	; 0x183c6 <lif_lifbcd2time+0x98>
   183c0:	60 e0       	ldi	r22, 0x00	; 0
   183c2:	70 e0       	ldi	r23, 0x00	; 0
   183c4:	cb 01       	movw	r24, r22
   183c6:	66 96       	adiw	r28, 0x16	; 22
   183c8:	ea e0       	ldi	r30, 0x0A	; 10
   183ca:	0c 94 02 e0 	jmp	0x1c004	; 0x1c004 <__epilogue_restores__+0x10>

000183ce <lif_ctime_gmt>:
   183ce:	a6 e1       	ldi	r26, 0x16	; 22
   183d0:	b0 e0       	ldi	r27, 0x00	; 0
   183d2:	ed ee       	ldi	r30, 0xED	; 237
   183d4:	f1 ec       	ldi	r31, 0xC1	; 193
   183d6:	0c 94 ec df 	jmp	0x1bfd8	; 0x1bfd8 <__prologue_saves__+0x1c>
   183da:	20 e2       	ldi	r18, 0x20	; 32
   183dc:	e5 e9       	ldi	r30, 0x95	; 149
   183de:	f9 e1       	ldi	r31, 0x19	; 25
   183e0:	df 01       	movw	r26, r30
   183e2:	1d 92       	st	X+, r1
   183e4:	2a 95       	dec	r18
   183e6:	e9 f7       	brne	.-6      	; 0x183e2 <lif_ctime_gmt+0x14>
   183e8:	be 01       	movw	r22, r28
   183ea:	6f 5f       	subi	r22, 0xFF	; 255
   183ec:	7f 4f       	sbci	r23, 0xFF	; 255
   183ee:	0e 94 ef 36 	call	0x6dde	; 0x6dde <gmtime_r>
   183f2:	65 e9       	ldi	r22, 0x95	; 149
   183f4:	79 e1       	ldi	r23, 0x19	; 25
   183f6:	0e 94 1f 3c 	call	0x783e	; 0x783e <asctime_r>
   183fa:	8c 01       	movw	r16, r24
   183fc:	0e 94 7b 31 	call	0x62f6	; 0x62f6 <trim_tail>
   18400:	c8 01       	movw	r24, r16
   18402:	66 96       	adiw	r28, 0x16	; 22
   18404:	e4 e0       	ldi	r30, 0x04	; 4
   18406:	0c 94 08 e0 	jmp	0x1c010	; 0x1c010 <__epilogue_restores__+0x1c>

0001840a <lif_lifbcd2timestr>:
   1840a:	a4 e0       	ldi	r26, 0x04	; 4
   1840c:	b0 e0       	ldi	r27, 0x00	; 0
   1840e:	eb e0       	ldi	r30, 0x0B	; 11
   18410:	f2 ec       	ldi	r31, 0xC2	; 194
   18412:	0c 94 ee df 	jmp	0x1bfdc	; 0x1bfdc <__prologue_saves__+0x20>
   18416:	20 e2       	ldi	r18, 0x20	; 32
   18418:	e5 e7       	ldi	r30, 0x75	; 117
   1841a:	f9 e1       	ldi	r31, 0x19	; 25
   1841c:	df 01       	movw	r26, r30
   1841e:	1d 92       	st	X+, r1
   18420:	2a 95       	dec	r18
   18422:	e9 f7       	brne	.-6      	; 0x1841e <lif_lifbcd2timestr+0x14>
   18424:	84 df       	rcall	.-248    	; 0x1832e <lif_lifbcd2time>
   18426:	69 83       	std	Y+1, r22	; 0x01
   18428:	7a 83       	std	Y+2, r23	; 0x02
   1842a:	8b 83       	std	Y+3, r24	; 0x03
   1842c:	9c 83       	std	Y+4, r25	; 0x04
   1842e:	67 2b       	or	r22, r23
   18430:	68 2b       	or	r22, r24
   18432:	69 2b       	or	r22, r25
   18434:	29 f0       	breq	.+10     	; 0x18440 <lif_lifbcd2timestr+0x36>
   18436:	ce 01       	movw	r24, r28
   18438:	01 96       	adiw	r24, 0x01	; 1
   1843a:	c9 df       	rcall	.-110    	; 0x183ce <lif_ctime_gmt>
   1843c:	bc 01       	movw	r22, r24
   1843e:	02 c0       	rjmp	.+4      	; 0x18444 <lif_lifbcd2timestr+0x3a>
   18440:	6e ed       	ldi	r22, 0xDE	; 222
   18442:	75 e1       	ldi	r23, 0x15	; 21
   18444:	85 e7       	ldi	r24, 0x75	; 117
   18446:	99 e1       	ldi	r25, 0x19	; 25
   18448:	0e 94 9d 30 	call	0x613a	; 0x613a <strcpy>
   1844c:	85 e7       	ldi	r24, 0x75	; 117
   1844e:	99 e1       	ldi	r25, 0x19	; 25
   18450:	24 96       	adiw	r28, 0x04	; 4
   18452:	e2 e0       	ldi	r30, 0x02	; 2
   18454:	0c 94 0a e0 	jmp	0x1c014	; 0x1c014 <__epilogue_restores__+0x20>

00018458 <lif_image_clear>:
   18458:	20 e7       	ldi	r18, 0x70	; 112
   1845a:	fc 01       	movw	r30, r24
   1845c:	11 92       	st	Z+, r1
   1845e:	2a 95       	dec	r18
   18460:	e9 f7       	brne	.-6      	; 0x1845c <lif_image_clear+0x4>
   18462:	08 95       	ret

00018464 <lif_dir_clear>:
   18464:	81 5b       	subi	r24, 0xB1	; 177
   18466:	9f 4f       	sbci	r25, 0xFF	; 255
   18468:	21 e2       	ldi	r18, 0x21	; 33
   1846a:	fc 01       	movw	r30, r24
   1846c:	11 92       	st	Z+, r1
   1846e:	2a 95       	dec	r18
   18470:	e9 f7       	brne	.-6      	; 0x1846c <lif_dir_clear+0x8>
   18472:	08 95       	ret

00018474 <lif_vol_clear>:
   18474:	84 96       	adiw	r24, 0x24	; 36
   18476:	2b e2       	ldi	r18, 0x2B	; 43
   18478:	fc 01       	movw	r30, r24
   1847a:	11 92       	st	Z+, r1
   1847c:	2a 95       	dec	r18
   1847e:	e9 f7       	brne	.-6      	; 0x1847a <lif_vol_clear+0x6>
   18480:	08 95       	ret

00018482 <lif_dump_vol>:
   18482:	cf 93       	push	r28
   18484:	df 93       	push	r29
   18486:	ad b7       	in	r26, 0x3d	; 61
   18488:	be b7       	in	r27, 0x3e	; 62
   1848a:	17 97       	sbiw	r26, 0x07	; 7
   1848c:	0f b6       	in	r0, 0x3f	; 63
   1848e:	f8 94       	cli
   18490:	be bf       	out	0x3e, r27	; 62
   18492:	0f be       	out	0x3f, r0	; 63
   18494:	ad bf       	out	0x3d, r26	; 61
   18496:	ec 01       	movw	r28, r24
   18498:	ed b7       	in	r30, 0x3d	; 61
   1849a:	fe b7       	in	r31, 0x3e	; 62
   1849c:	75 83       	std	Z+5, r23	; 0x05
   1849e:	64 83       	std	Z+4, r22	; 0x04
   184a0:	80 e1       	ldi	r24, 0x10	; 16
   184a2:	9e e3       	ldi	r25, 0x3E	; 62
   184a4:	a0 e0       	ldi	r26, 0x00	; 0
   184a6:	81 83       	std	Z+1, r24	; 0x01
   184a8:	92 83       	std	Z+2, r25	; 0x02
   184aa:	a3 83       	std	Z+3, r26	; 0x03
   184ac:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   184b0:	88 81       	ld	r24, Y
   184b2:	99 81       	ldd	r25, Y+1	; 0x01
   184b4:	ed b7       	in	r30, 0x3d	; 61
   184b6:	fe b7       	in	r31, 0x3e	; 62
   184b8:	95 83       	std	Z+5, r25	; 0x05
   184ba:	84 83       	std	Z+4, r24	; 0x04
   184bc:	86 ef       	ldi	r24, 0xF6	; 246
   184be:	9d e3       	ldi	r25, 0x3D	; 61
   184c0:	a0 e0       	ldi	r26, 0x00	; 0
   184c2:	81 83       	std	Z+1, r24	; 0x01
   184c4:	92 83       	std	Z+2, r25	; 0x02
   184c6:	a3 83       	std	Z+3, r26	; 0x03
   184c8:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   184cc:	8c 81       	ldd	r24, Y+4	; 0x04
   184ce:	9d 81       	ldd	r25, Y+5	; 0x05
   184d0:	ae 81       	ldd	r26, Y+6	; 0x06
   184d2:	bf 81       	ldd	r27, Y+7	; 0x07
   184d4:	ed b7       	in	r30, 0x3d	; 61
   184d6:	fe b7       	in	r31, 0x3e	; 62
   184d8:	84 83       	std	Z+4, r24	; 0x04
   184da:	95 83       	std	Z+5, r25	; 0x05
   184dc:	a6 83       	std	Z+6, r26	; 0x06
   184de:	b7 83       	std	Z+7, r27	; 0x07
   184e0:	89 ed       	ldi	r24, 0xD9	; 217
   184e2:	9d e3       	ldi	r25, 0x3D	; 61
   184e4:	a0 e0       	ldi	r26, 0x00	; 0
   184e6:	81 83       	std	Z+1, r24	; 0x01
   184e8:	92 83       	std	Z+2, r25	; 0x02
   184ea:	a3 83       	std	Z+3, r26	; 0x03
   184ec:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   184f0:	88 85       	ldd	r24, Y+8	; 0x08
   184f2:	99 85       	ldd	r25, Y+9	; 0x09
   184f4:	aa 85       	ldd	r26, Y+10	; 0x0a
   184f6:	bb 85       	ldd	r27, Y+11	; 0x0b
   184f8:	ed b7       	in	r30, 0x3d	; 61
   184fa:	fe b7       	in	r31, 0x3e	; 62
   184fc:	84 83       	std	Z+4, r24	; 0x04
   184fe:	95 83       	std	Z+5, r25	; 0x05
   18500:	a6 83       	std	Z+6, r26	; 0x06
   18502:	b7 83       	std	Z+7, r27	; 0x07
   18504:	8c eb       	ldi	r24, 0xBC	; 188
   18506:	9d e3       	ldi	r25, 0x3D	; 61
   18508:	a0 e0       	ldi	r26, 0x00	; 0
   1850a:	81 83       	std	Z+1, r24	; 0x01
   1850c:	92 83       	std	Z+2, r25	; 0x02
   1850e:	a3 83       	std	Z+3, r26	; 0x03
   18510:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   18514:	8c 85       	ldd	r24, Y+12	; 0x0c
   18516:	9d 85       	ldd	r25, Y+13	; 0x0d
   18518:	ae 85       	ldd	r26, Y+14	; 0x0e
   1851a:	bf 85       	ldd	r27, Y+15	; 0x0f
   1851c:	ed b7       	in	r30, 0x3d	; 61
   1851e:	fe b7       	in	r31, 0x3e	; 62
   18520:	84 83       	std	Z+4, r24	; 0x04
   18522:	95 83       	std	Z+5, r25	; 0x05
   18524:	a6 83       	std	Z+6, r26	; 0x06
   18526:	b7 83       	std	Z+7, r27	; 0x07
   18528:	8f e9       	ldi	r24, 0x9F	; 159
   1852a:	9d e3       	ldi	r25, 0x3D	; 61
   1852c:	a0 e0       	ldi	r26, 0x00	; 0
   1852e:	81 83       	std	Z+1, r24	; 0x01
   18530:	92 83       	std	Z+2, r25	; 0x02
   18532:	a3 83       	std	Z+3, r26	; 0x03
   18534:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   18538:	88 89       	ldd	r24, Y+16	; 0x10
   1853a:	99 89       	ldd	r25, Y+17	; 0x11
   1853c:	aa 89       	ldd	r26, Y+18	; 0x12
   1853e:	bb 89       	ldd	r27, Y+19	; 0x13
   18540:	ed b7       	in	r30, 0x3d	; 61
   18542:	fe b7       	in	r31, 0x3e	; 62
   18544:	84 83       	std	Z+4, r24	; 0x04
   18546:	95 83       	std	Z+5, r25	; 0x05
   18548:	a6 83       	std	Z+6, r26	; 0x06
   1854a:	b7 83       	std	Z+7, r27	; 0x07
   1854c:	82 e8       	ldi	r24, 0x82	; 130
   1854e:	9d e3       	ldi	r25, 0x3D	; 61
   18550:	a0 e0       	ldi	r26, 0x00	; 0
   18552:	81 83       	std	Z+1, r24	; 0x01
   18554:	92 83       	std	Z+2, r25	; 0x02
   18556:	a3 83       	std	Z+3, r26	; 0x03
   18558:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   1855c:	8c 89       	ldd	r24, Y+20	; 0x14
   1855e:	9d 89       	ldd	r25, Y+21	; 0x15
   18560:	ae 89       	ldd	r26, Y+22	; 0x16
   18562:	bf 89       	ldd	r27, Y+23	; 0x17
   18564:	ed b7       	in	r30, 0x3d	; 61
   18566:	fe b7       	in	r31, 0x3e	; 62
   18568:	84 83       	std	Z+4, r24	; 0x04
   1856a:	95 83       	std	Z+5, r25	; 0x05
   1856c:	a6 83       	std	Z+6, r26	; 0x06
   1856e:	b7 83       	std	Z+7, r27	; 0x07
   18570:	85 e6       	ldi	r24, 0x65	; 101
   18572:	9d e3       	ldi	r25, 0x3D	; 61
   18574:	a0 e0       	ldi	r26, 0x00	; 0
   18576:	81 83       	std	Z+1, r24	; 0x01
   18578:	92 83       	std	Z+2, r25	; 0x02
   1857a:	a3 83       	std	Z+3, r26	; 0x03
   1857c:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   18580:	88 8d       	ldd	r24, Y+24	; 0x18
   18582:	99 8d       	ldd	r25, Y+25	; 0x19
   18584:	aa 8d       	ldd	r26, Y+26	; 0x1a
   18586:	bb 8d       	ldd	r27, Y+27	; 0x1b
   18588:	ed b7       	in	r30, 0x3d	; 61
   1858a:	fe b7       	in	r31, 0x3e	; 62
   1858c:	84 83       	std	Z+4, r24	; 0x04
   1858e:	95 83       	std	Z+5, r25	; 0x05
   18590:	a6 83       	std	Z+6, r26	; 0x06
   18592:	b7 83       	std	Z+7, r27	; 0x07
   18594:	88 e4       	ldi	r24, 0x48	; 72
   18596:	9d e3       	ldi	r25, 0x3D	; 61
   18598:	a0 e0       	ldi	r26, 0x00	; 0
   1859a:	81 83       	std	Z+1, r24	; 0x01
   1859c:	92 83       	std	Z+2, r25	; 0x02
   1859e:	a3 83       	std	Z+3, r26	; 0x03
   185a0:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   185a4:	8c 8d       	ldd	r24, Y+28	; 0x1c
   185a6:	9d 8d       	ldd	r25, Y+29	; 0x1d
   185a8:	09 2e       	mov	r0, r25
   185aa:	00 0c       	add	r0, r0
   185ac:	aa 0b       	sbc	r26, r26
   185ae:	bb 0b       	sbc	r27, r27
   185b0:	ed b7       	in	r30, 0x3d	; 61
   185b2:	fe b7       	in	r31, 0x3e	; 62
   185b4:	84 83       	std	Z+4, r24	; 0x04
   185b6:	95 83       	std	Z+5, r25	; 0x05
   185b8:	a6 83       	std	Z+6, r26	; 0x06
   185ba:	b7 83       	std	Z+7, r27	; 0x07
   185bc:	8b e2       	ldi	r24, 0x2B	; 43
   185be:	9d e3       	ldi	r25, 0x3D	; 61
   185c0:	a0 e0       	ldi	r26, 0x00	; 0
   185c2:	81 83       	std	Z+1, r24	; 0x01
   185c4:	92 83       	std	Z+2, r25	; 0x02
   185c6:	a3 83       	std	Z+3, r26	; 0x03
   185c8:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   185cc:	8e 8d       	ldd	r24, Y+30	; 0x1e
   185ce:	9f 8d       	ldd	r25, Y+31	; 0x1f
   185d0:	09 2e       	mov	r0, r25
   185d2:	00 0c       	add	r0, r0
   185d4:	aa 0b       	sbc	r26, r26
   185d6:	bb 0b       	sbc	r27, r27
   185d8:	ed b7       	in	r30, 0x3d	; 61
   185da:	fe b7       	in	r31, 0x3e	; 62
   185dc:	84 83       	std	Z+4, r24	; 0x04
   185de:	95 83       	std	Z+5, r25	; 0x05
   185e0:	a6 83       	std	Z+6, r26	; 0x06
   185e2:	b7 83       	std	Z+7, r27	; 0x07
   185e4:	8e e0       	ldi	r24, 0x0E	; 14
   185e6:	9d e3       	ldi	r25, 0x3D	; 61
   185e8:	a0 e0       	ldi	r26, 0x00	; 0
   185ea:	81 83       	std	Z+1, r24	; 0x01
   185ec:	92 83       	std	Z+2, r25	; 0x02
   185ee:	a3 83       	std	Z+3, r26	; 0x03
   185f0:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   185f4:	ce 01       	movw	r24, r28
   185f6:	86 96       	adiw	r24, 0x26	; 38
   185f8:	ed b7       	in	r30, 0x3d	; 61
   185fa:	fe b7       	in	r31, 0x3e	; 62
   185fc:	95 83       	std	Z+5, r25	; 0x05
   185fe:	84 83       	std	Z+4, r24	; 0x04
   18600:	84 ef       	ldi	r24, 0xF4	; 244
   18602:	9c e3       	ldi	r25, 0x3C	; 60
   18604:	a0 e0       	ldi	r26, 0x00	; 0
   18606:	81 83       	std	Z+1, r24	; 0x01
   18608:	92 83       	std	Z+2, r25	; 0x02
   1860a:	a3 83       	std	Z+3, r26	; 0x03
   1860c:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   18610:	8c a1       	ldd	r24, Y+36	; 0x24
   18612:	9d a1       	ldd	r25, Y+37	; 0x25
   18614:	ed b7       	in	r30, 0x3d	; 61
   18616:	fe b7       	in	r31, 0x3e	; 62
   18618:	95 83       	std	Z+5, r25	; 0x05
   1861a:	84 83       	std	Z+4, r24	; 0x04
   1861c:	88 ed       	ldi	r24, 0xD8	; 216
   1861e:	9c e3       	ldi	r25, 0x3C	; 60
   18620:	a0 e0       	ldi	r26, 0x00	; 0
   18622:	81 83       	std	Z+1, r24	; 0x01
   18624:	92 83       	std	Z+2, r25	; 0x02
   18626:	a3 83       	std	Z+3, r26	; 0x03
   18628:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   1862c:	8d a5       	ldd	r24, Y+45	; 0x2d
   1862e:	9e a5       	ldd	r25, Y+46	; 0x2e
   18630:	af a5       	ldd	r26, Y+47	; 0x2f
   18632:	b8 a9       	ldd	r27, Y+48	; 0x30
   18634:	ed b7       	in	r30, 0x3d	; 61
   18636:	fe b7       	in	r31, 0x3e	; 62
   18638:	84 83       	std	Z+4, r24	; 0x04
   1863a:	95 83       	std	Z+5, r25	; 0x05
   1863c:	a6 83       	std	Z+6, r26	; 0x06
   1863e:	b7 83       	std	Z+7, r27	; 0x07
   18640:	8b eb       	ldi	r24, 0xBB	; 187
   18642:	9c e3       	ldi	r25, 0x3C	; 60
   18644:	a0 e0       	ldi	r26, 0x00	; 0
   18646:	81 83       	std	Z+1, r24	; 0x01
   18648:	92 83       	std	Z+2, r25	; 0x02
   1864a:	a3 83       	std	Z+3, r26	; 0x03
   1864c:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   18650:	8d a9       	ldd	r24, Y+53	; 0x35
   18652:	9e a9       	ldd	r25, Y+54	; 0x36
   18654:	af a9       	ldd	r26, Y+55	; 0x37
   18656:	b8 ad       	ldd	r27, Y+56	; 0x38
   18658:	ed b7       	in	r30, 0x3d	; 61
   1865a:	fe b7       	in	r31, 0x3e	; 62
   1865c:	84 83       	std	Z+4, r24	; 0x04
   1865e:	95 83       	std	Z+5, r25	; 0x05
   18660:	a6 83       	std	Z+6, r26	; 0x06
   18662:	b7 83       	std	Z+7, r27	; 0x07
   18664:	8e e9       	ldi	r24, 0x9E	; 158
   18666:	9c e3       	ldi	r25, 0x3C	; 60
   18668:	a0 e0       	ldi	r26, 0x00	; 0
   1866a:	81 83       	std	Z+1, r24	; 0x01
   1866c:	92 83       	std	Z+2, r25	; 0x02
   1866e:	a3 83       	std	Z+3, r26	; 0x03
   18670:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   18674:	89 a9       	ldd	r24, Y+49	; 0x31
   18676:	9a a9       	ldd	r25, Y+50	; 0x32
   18678:	ed b7       	in	r30, 0x3d	; 61
   1867a:	fe b7       	in	r31, 0x3e	; 62
   1867c:	95 83       	std	Z+5, r25	; 0x05
   1867e:	84 83       	std	Z+4, r24	; 0x04
   18680:	82 e8       	ldi	r24, 0x82	; 130
   18682:	9c e3       	ldi	r25, 0x3C	; 60
   18684:	a0 e0       	ldi	r26, 0x00	; 0
   18686:	81 83       	std	Z+1, r24	; 0x01
   18688:	92 83       	std	Z+2, r25	; 0x02
   1868a:	a3 83       	std	Z+3, r26	; 0x03
   1868c:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   18690:	89 ad       	ldd	r24, Y+57	; 0x39
   18692:	9a ad       	ldd	r25, Y+58	; 0x3a
   18694:	ed b7       	in	r30, 0x3d	; 61
   18696:	fe b7       	in	r31, 0x3e	; 62
   18698:	95 83       	std	Z+5, r25	; 0x05
   1869a:	84 83       	std	Z+4, r24	; 0x04
   1869c:	86 e6       	ldi	r24, 0x66	; 102
   1869e:	9c e3       	ldi	r25, 0x3C	; 60
   186a0:	a0 e0       	ldi	r26, 0x00	; 0
   186a2:	81 83       	std	Z+1, r24	; 0x01
   186a4:	92 83       	std	Z+2, r25	; 0x02
   186a6:	a3 83       	std	Z+3, r26	; 0x03
   186a8:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   186ac:	ce 01       	movw	r24, r28
   186ae:	87 5b       	subi	r24, 0xB7	; 183
   186b0:	9f 4f       	sbci	r25, 0xFF	; 255
   186b2:	ab de       	rcall	.-682    	; 0x1840a <lif_lifbcd2timestr>
   186b4:	ed b7       	in	r30, 0x3d	; 61
   186b6:	fe b7       	in	r31, 0x3e	; 62
   186b8:	95 83       	std	Z+5, r25	; 0x05
   186ba:	84 83       	std	Z+4, r24	; 0x04
   186bc:	8c e4       	ldi	r24, 0x4C	; 76
   186be:	9c e3       	ldi	r25, 0x3C	; 60
   186c0:	a0 e0       	ldi	r26, 0x00	; 0
   186c2:	81 83       	std	Z+1, r24	; 0x01
   186c4:	92 83       	std	Z+2, r25	; 0x02
   186c6:	a3 83       	std	Z+3, r26	; 0x03
   186c8:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   186cc:	ce 01       	movw	r24, r28
   186ce:	81 5b       	subi	r24, 0xB1	; 177
   186d0:	9f 4f       	sbci	r25, 0xFF	; 255
   186d2:	ed b7       	in	r30, 0x3d	; 61
   186d4:	fe b7       	in	r31, 0x3e	; 62
   186d6:	95 83       	std	Z+5, r25	; 0x05
   186d8:	84 83       	std	Z+4, r24	; 0x04
   186da:	82 e3       	ldi	r24, 0x32	; 50
   186dc:	9c e3       	ldi	r25, 0x3C	; 60
   186de:	a0 e0       	ldi	r26, 0x00	; 0
   186e0:	81 83       	std	Z+1, r24	; 0x01
   186e2:	92 83       	std	Z+2, r25	; 0x02
   186e4:	a3 83       	std	Z+3, r26	; 0x03
   186e6:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   186ea:	fe 01       	movw	r30, r28
   186ec:	e6 5a       	subi	r30, 0xA6	; 166
   186ee:	ff 4f       	sbci	r31, 0xFF	; 255
   186f0:	80 81       	ld	r24, Z
   186f2:	91 81       	ldd	r25, Z+1	; 0x01
   186f4:	ed b7       	in	r30, 0x3d	; 61
   186f6:	fe b7       	in	r31, 0x3e	; 62
   186f8:	95 83       	std	Z+5, r25	; 0x05
   186fa:	84 83       	std	Z+4, r24	; 0x04
   186fc:	86 e1       	ldi	r24, 0x16	; 22
   186fe:	9c e3       	ldi	r25, 0x3C	; 60
   18700:	a0 e0       	ldi	r26, 0x00	; 0
   18702:	81 83       	std	Z+1, r24	; 0x01
   18704:	92 83       	std	Z+2, r25	; 0x02
   18706:	a3 83       	std	Z+3, r26	; 0x03
   18708:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   1870c:	fe 01       	movw	r30, r28
   1870e:	e6 59       	subi	r30, 0x96	; 150
   18710:	ff 4f       	sbci	r31, 0xFF	; 255
   18712:	80 81       	ld	r24, Z
   18714:	91 81       	ldd	r25, Z+1	; 0x01
   18716:	ed b7       	in	r30, 0x3d	; 61
   18718:	fe b7       	in	r31, 0x3e	; 62
   1871a:	95 83       	std	Z+5, r25	; 0x05
   1871c:	84 83       	std	Z+4, r24	; 0x04
   1871e:	8a ef       	ldi	r24, 0xFA	; 250
   18720:	9b e3       	ldi	r25, 0x3B	; 59
   18722:	a0 e0       	ldi	r26, 0x00	; 0
   18724:	81 83       	std	Z+1, r24	; 0x01
   18726:	92 83       	std	Z+2, r25	; 0x02
   18728:	a3 83       	std	Z+3, r26	; 0x03
   1872a:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   1872e:	fe 01       	movw	r30, r28
   18730:	e4 5a       	subi	r30, 0xA4	; 164
   18732:	ff 4f       	sbci	r31, 0xFF	; 255
   18734:	80 81       	ld	r24, Z
   18736:	91 81       	ldd	r25, Z+1	; 0x01
   18738:	a2 81       	ldd	r26, Z+2	; 0x02
   1873a:	b3 81       	ldd	r27, Z+3	; 0x03
   1873c:	ed b7       	in	r30, 0x3d	; 61
   1873e:	fe b7       	in	r31, 0x3e	; 62
   18740:	84 83       	std	Z+4, r24	; 0x04
   18742:	95 83       	std	Z+5, r25	; 0x05
   18744:	a6 83       	std	Z+6, r26	; 0x06
   18746:	b7 83       	std	Z+7, r27	; 0x07
   18748:	8d ed       	ldi	r24, 0xDD	; 221
   1874a:	9b e3       	ldi	r25, 0x3B	; 59
   1874c:	a0 e0       	ldi	r26, 0x00	; 0
   1874e:	81 83       	std	Z+1, r24	; 0x01
   18750:	92 83       	std	Z+2, r25	; 0x02
   18752:	a3 83       	std	Z+3, r26	; 0x03
   18754:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   18758:	fe 01       	movw	r30, r28
   1875a:	e0 5a       	subi	r30, 0xA0	; 160
   1875c:	ff 4f       	sbci	r31, 0xFF	; 255
   1875e:	80 81       	ld	r24, Z
   18760:	91 81       	ldd	r25, Z+1	; 0x01
   18762:	a2 81       	ldd	r26, Z+2	; 0x02
   18764:	b3 81       	ldd	r27, Z+3	; 0x03
   18766:	ed b7       	in	r30, 0x3d	; 61
   18768:	fe b7       	in	r31, 0x3e	; 62
   1876a:	84 83       	std	Z+4, r24	; 0x04
   1876c:	95 83       	std	Z+5, r25	; 0x05
   1876e:	a6 83       	std	Z+6, r26	; 0x06
   18770:	b7 83       	std	Z+7, r27	; 0x07
   18772:	80 ec       	ldi	r24, 0xC0	; 192
   18774:	9b e3       	ldi	r25, 0x3B	; 59
   18776:	a0 e0       	ldi	r26, 0x00	; 0
   18778:	81 83       	std	Z+1, r24	; 0x01
   1877a:	92 83       	std	Z+2, r25	; 0x02
   1877c:	a3 83       	std	Z+3, r26	; 0x03
   1877e:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   18782:	fe 01       	movw	r30, r28
   18784:	e4 59       	subi	r30, 0x94	; 148
   18786:	ff 4f       	sbci	r31, 0xFF	; 255
   18788:	80 81       	ld	r24, Z
   1878a:	91 81       	ldd	r25, Z+1	; 0x01
   1878c:	a0 e0       	ldi	r26, 0x00	; 0
   1878e:	b0 e0       	ldi	r27, 0x00	; 0
   18790:	ed b7       	in	r30, 0x3d	; 61
   18792:	fe b7       	in	r31, 0x3e	; 62
   18794:	84 83       	std	Z+4, r24	; 0x04
   18796:	95 83       	std	Z+5, r25	; 0x05
   18798:	a6 83       	std	Z+6, r26	; 0x06
   1879a:	b7 83       	std	Z+7, r27	; 0x07
   1879c:	83 ea       	ldi	r24, 0xA3	; 163
   1879e:	9b e3       	ldi	r25, 0x3B	; 59
   187a0:	a0 e0       	ldi	r26, 0x00	; 0
   187a2:	81 83       	std	Z+1, r24	; 0x01
   187a4:	92 83       	std	Z+2, r25	; 0x02
   187a6:	a3 83       	std	Z+3, r26	; 0x03
   187a8:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   187ac:	fe 01       	movw	r30, r28
   187ae:	e2 59       	subi	r30, 0x92	; 146
   187b0:	ff 4f       	sbci	r31, 0xFF	; 255
   187b2:	80 81       	ld	r24, Z
   187b4:	91 81       	ldd	r25, Z+1	; 0x01
   187b6:	ed b7       	in	r30, 0x3d	; 61
   187b8:	fe b7       	in	r31, 0x3e	; 62
   187ba:	95 83       	std	Z+5, r25	; 0x05
   187bc:	84 83       	std	Z+4, r24	; 0x04
   187be:	87 e8       	ldi	r24, 0x87	; 135
   187c0:	9b e3       	ldi	r25, 0x3B	; 59
   187c2:	a0 e0       	ldi	r26, 0x00	; 0
   187c4:	81 83       	std	Z+1, r24	; 0x01
   187c6:	92 83       	std	Z+2, r25	; 0x02
   187c8:	a3 83       	std	Z+3, r26	; 0x03
   187ca:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   187ce:	ce 01       	movw	r24, r28
   187d0:	8c 59       	subi	r24, 0x9C	; 156
   187d2:	9f 4f       	sbci	r25, 0xFF	; 255
   187d4:	1a de       	rcall	.-972    	; 0x1840a <lif_lifbcd2timestr>
   187d6:	ed b7       	in	r30, 0x3d	; 61
   187d8:	fe b7       	in	r31, 0x3e	; 62
   187da:	95 83       	std	Z+5, r25	; 0x05
   187dc:	84 83       	std	Z+4, r24	; 0x04
   187de:	8d e6       	ldi	r24, 0x6D	; 109
   187e0:	9b e3       	ldi	r25, 0x3B	; 59
   187e2:	a0 e0       	ldi	r26, 0x00	; 0
   187e4:	81 83       	std	Z+1, r24	; 0x01
   187e6:	92 83       	std	Z+2, r25	; 0x02
   187e8:	a3 83       	std	Z+3, r26	; 0x03
   187ea:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   187ee:	8b e6       	ldi	r24, 0x6B	; 107
   187f0:	9b e3       	ldi	r25, 0x3B	; 59
   187f2:	a0 e0       	ldi	r26, 0x00	; 0
   187f4:	ed b7       	in	r30, 0x3d	; 61
   187f6:	fe b7       	in	r31, 0x3e	; 62
   187f8:	81 83       	std	Z+1, r24	; 0x01
   187fa:	92 83       	std	Z+2, r25	; 0x02
   187fc:	a3 83       	std	Z+3, r26	; 0x03
   187fe:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   18802:	cd b7       	in	r28, 0x3d	; 61
   18804:	de b7       	in	r29, 0x3e	; 62
   18806:	27 96       	adiw	r28, 0x07	; 7
   18808:	e2 e0       	ldi	r30, 0x02	; 2
   1880a:	0c 94 0a e0 	jmp	0x1c014	; 0x1c014 <__epilogue_restores__+0x20>

0001880e <lif_check_volume>:
   1880e:	0f 93       	push	r16
   18810:	1f 93       	push	r17
   18812:	cf 93       	push	r28
   18814:	df 93       	push	r29
   18816:	ad b7       	in	r26, 0x3d	; 61
   18818:	be b7       	in	r27, 0x3e	; 62
   1881a:	17 97       	sbiw	r26, 0x07	; 7
   1881c:	0f b6       	in	r0, 0x3f	; 63
   1881e:	f8 94       	cli
   18820:	be bf       	out	0x3e, r27	; 62
   18822:	0f be       	out	0x3f, r0	; 63
   18824:	ad bf       	out	0x3d, r26	; 61
   18826:	ec 01       	movw	r28, r24
   18828:	86 96       	adiw	r24, 0x26	; 38
   1882a:	e0 da       	rcall	.-2624   	; 0x17dec <lif_checkname>
   1882c:	89 2b       	or	r24, r25
   1882e:	79 f4       	brne	.+30     	; 0x1884e <lif_check_volume+0x40>
   18830:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   18834:	81 ff       	sbrs	r24, 1
   18836:	0e c0       	rjmp	.+28     	; 0x18854 <lif_check_volume+0x46>
   18838:	8c e4       	ldi	r24, 0x4C	; 76
   1883a:	9b e3       	ldi	r25, 0x3B	; 59
   1883c:	a0 e0       	ldi	r26, 0x00	; 0
   1883e:	ed b7       	in	r30, 0x3d	; 61
   18840:	fe b7       	in	r31, 0x3e	; 62
   18842:	81 83       	std	Z+1, r24	; 0x01
   18844:	92 83       	std	Z+2, r25	; 0x02
   18846:	a3 83       	std	Z+3, r26	; 0x03
   18848:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   1884c:	03 c0       	rjmp	.+6      	; 0x18854 <lif_check_volume+0x46>
   1884e:	81 e0       	ldi	r24, 0x01	; 1
   18850:	90 e0       	ldi	r25, 0x00	; 0
   18852:	02 c0       	rjmp	.+4      	; 0x18858 <lif_check_volume+0x4a>
   18854:	80 e0       	ldi	r24, 0x00	; 0
   18856:	90 e0       	ldi	r25, 0x00	; 0
   18858:	29 a9       	ldd	r18, Y+49	; 0x31
   1885a:	3a a9       	ldd	r19, Y+50	; 0x32
   1885c:	21 15       	cp	r18, r1
   1885e:	f0 e1       	ldi	r31, 0x10	; 16
   18860:	3f 07       	cpc	r19, r31
   18862:	91 f0       	breq	.+36     	; 0x18888 <lif_check_volume+0x7a>
   18864:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   18868:	81 ff       	sbrs	r24, 1
   1886a:	0c c0       	rjmp	.+24     	; 0x18884 <lif_check_volume+0x76>
   1886c:	ed b7       	in	r30, 0x3d	; 61
   1886e:	fe b7       	in	r31, 0x3e	; 62
   18870:	35 83       	std	Z+5, r19	; 0x05
   18872:	24 83       	std	Z+4, r18	; 0x04
   18874:	83 e1       	ldi	r24, 0x13	; 19
   18876:	9b e3       	ldi	r25, 0x3B	; 59
   18878:	a0 e0       	ldi	r26, 0x00	; 0
   1887a:	81 83       	std	Z+1, r24	; 0x01
   1887c:	92 83       	std	Z+2, r25	; 0x02
   1887e:	a3 83       	std	Z+3, r26	; 0x03
   18880:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   18884:	80 e0       	ldi	r24, 0x00	; 0
   18886:	90 e0       	ldi	r25, 0x00	; 0
   18888:	29 ad       	ldd	r18, Y+57	; 0x39
   1888a:	3a ad       	ldd	r19, Y+58	; 0x3a
   1888c:	22 30       	cpi	r18, 0x02	; 2
   1888e:	31 05       	cpc	r19, r1
   18890:	90 f0       	brcs	.+36     	; 0x188b6 <lif_check_volume+0xa8>
   18892:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   18896:	81 ff       	sbrs	r24, 1
   18898:	0c c0       	rjmp	.+24     	; 0x188b2 <lif_check_volume+0xa4>
   1889a:	ed b7       	in	r30, 0x3d	; 61
   1889c:	fe b7       	in	r31, 0x3e	; 62
   1889e:	35 83       	std	Z+5, r19	; 0x05
   188a0:	24 83       	std	Z+4, r18	; 0x04
   188a2:	8b ef       	ldi	r24, 0xFB	; 251
   188a4:	9a e3       	ldi	r25, 0x3A	; 58
   188a6:	a0 e0       	ldi	r26, 0x00	; 0
   188a8:	81 83       	std	Z+1, r24	; 0x01
   188aa:	92 83       	std	Z+2, r25	; 0x02
   188ac:	a3 83       	std	Z+3, r26	; 0x03
   188ae:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   188b2:	80 e0       	ldi	r24, 0x00	; 0
   188b4:	90 e0       	ldi	r25, 0x00	; 0
   188b6:	2b a9       	ldd	r18, Y+51	; 0x33
   188b8:	3c a9       	ldd	r19, Y+52	; 0x34
   188ba:	23 2b       	or	r18, r19
   188bc:	81 f0       	breq	.+32     	; 0x188de <lif_check_volume+0xd0>
   188be:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   188c2:	81 ff       	sbrs	r24, 1
   188c4:	0a c0       	rjmp	.+20     	; 0x188da <lif_check_volume+0xcc>
   188c6:	82 ec       	ldi	r24, 0xC2	; 194
   188c8:	9a e3       	ldi	r25, 0x3A	; 58
   188ca:	a0 e0       	ldi	r26, 0x00	; 0
   188cc:	ed b7       	in	r30, 0x3d	; 61
   188ce:	fe b7       	in	r31, 0x3e	; 62
   188d0:	81 83       	std	Z+1, r24	; 0x01
   188d2:	92 83       	std	Z+2, r25	; 0x02
   188d4:	a3 83       	std	Z+3, r26	; 0x03
   188d6:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   188da:	80 e0       	ldi	r24, 0x00	; 0
   188dc:	90 e0       	ldi	r25, 0x00	; 0
   188de:	2b ad       	ldd	r18, Y+59	; 0x3b
   188e0:	3c ad       	ldd	r19, Y+60	; 0x3c
   188e2:	23 2b       	or	r18, r19
   188e4:	81 f0       	breq	.+32     	; 0x18906 <lif_check_volume+0xf8>
   188e6:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   188ea:	81 ff       	sbrs	r24, 1
   188ec:	0a c0       	rjmp	.+20     	; 0x18902 <lif_check_volume+0xf4>
   188ee:	89 e8       	ldi	r24, 0x89	; 137
   188f0:	9a e3       	ldi	r25, 0x3A	; 58
   188f2:	a0 e0       	ldi	r26, 0x00	; 0
   188f4:	ed b7       	in	r30, 0x3d	; 61
   188f6:	fe b7       	in	r31, 0x3e	; 62
   188f8:	81 83       	std	Z+1, r24	; 0x01
   188fa:	92 83       	std	Z+2, r25	; 0x02
   188fc:	a3 83       	std	Z+3, r26	; 0x03
   188fe:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   18902:	80 e0       	ldi	r24, 0x00	; 0
   18904:	90 e0       	ldi	r25, 0x00	; 0
   18906:	4d a5       	ldd	r20, Y+45	; 0x2d
   18908:	5e a5       	ldd	r21, Y+46	; 0x2e
   1890a:	6f a5       	ldd	r22, Y+47	; 0x2f
   1890c:	78 a9       	ldd	r23, Y+48	; 0x30
   1890e:	45 2b       	or	r20, r21
   18910:	46 2b       	or	r20, r22
   18912:	47 2b       	or	r20, r23
   18914:	a1 f4       	brne	.+40     	; 0x1893e <lif_check_volume+0x130>
   18916:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1891a:	81 ff       	sbrs	r24, 1
   1891c:	0e c0       	rjmp	.+28     	; 0x1893a <lif_check_volume+0x12c>
   1891e:	ed b7       	in	r30, 0x3d	; 61
   18920:	fe b7       	in	r31, 0x3e	; 62
   18922:	14 82       	std	Z+4, r1	; 0x04
   18924:	15 82       	std	Z+5, r1	; 0x05
   18926:	16 82       	std	Z+6, r1	; 0x06
   18928:	17 82       	std	Z+7, r1	; 0x07
   1892a:	84 e6       	ldi	r24, 0x64	; 100
   1892c:	9a e3       	ldi	r25, 0x3A	; 58
   1892e:	a0 e0       	ldi	r26, 0x00	; 0
   18930:	81 83       	std	Z+1, r24	; 0x01
   18932:	92 83       	std	Z+2, r25	; 0x02
   18934:	a3 83       	std	Z+3, r26	; 0x03
   18936:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   1893a:	80 e0       	ldi	r24, 0x00	; 0
   1893c:	90 e0       	ldi	r25, 0x00	; 0
   1893e:	4d a9       	ldd	r20, Y+53	; 0x35
   18940:	5e a9       	ldd	r21, Y+54	; 0x36
   18942:	6f a9       	ldd	r22, Y+55	; 0x37
   18944:	78 ad       	ldd	r23, Y+56	; 0x38
   18946:	45 2b       	or	r20, r21
   18948:	46 2b       	or	r20, r22
   1894a:	47 2b       	or	r20, r23
   1894c:	81 f4       	brne	.+32     	; 0x1896e <lif_check_volume+0x160>
   1894e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   18952:	81 ff       	sbrs	r24, 1
   18954:	0a c0       	rjmp	.+20     	; 0x1896a <lif_check_volume+0x15c>
   18956:	85 e3       	ldi	r24, 0x35	; 53
   18958:	9a e3       	ldi	r25, 0x3A	; 58
   1895a:	a0 e0       	ldi	r26, 0x00	; 0
   1895c:	ed b7       	in	r30, 0x3d	; 61
   1895e:	fe b7       	in	r31, 0x3e	; 62
   18960:	81 83       	std	Z+1, r24	; 0x01
   18962:	92 83       	std	Z+2, r25	; 0x02
   18964:	a3 83       	std	Z+3, r26	; 0x03
   18966:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   1896a:	80 e0       	ldi	r24, 0x00	; 0
   1896c:	90 e0       	ldi	r25, 0x00	; 0
   1896e:	0d a5       	ldd	r16, Y+45	; 0x2d
   18970:	1e a5       	ldd	r17, Y+46	; 0x2e
   18972:	2f a5       	ldd	r18, Y+47	; 0x2f
   18974:	38 a9       	ldd	r19, Y+48	; 0x30
   18976:	4d a9       	ldd	r20, Y+53	; 0x35
   18978:	5e a9       	ldd	r21, Y+54	; 0x36
   1897a:	6f a9       	ldd	r22, Y+55	; 0x37
   1897c:	78 ad       	ldd	r23, Y+56	; 0x38
   1897e:	40 0f       	add	r20, r16
   18980:	51 1f       	adc	r21, r17
   18982:	62 1f       	adc	r22, r18
   18984:	73 1f       	adc	r23, r19
   18986:	0c 81       	ldd	r16, Y+4	; 0x04
   18988:	1d 81       	ldd	r17, Y+5	; 0x05
   1898a:	2e 81       	ldd	r18, Y+6	; 0x06
   1898c:	3f 81       	ldd	r19, Y+7	; 0x07
   1898e:	04 17       	cp	r16, r20
   18990:	15 07       	cpc	r17, r21
   18992:	26 07       	cpc	r18, r22
   18994:	37 07       	cpc	r19, r23
   18996:	80 f4       	brcc	.+32     	; 0x189b8 <lif_check_volume+0x1aa>
   18998:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1899c:	81 ff       	sbrs	r24, 1
   1899e:	0a c0       	rjmp	.+20     	; 0x189b4 <lif_check_volume+0x1a6>
   189a0:	89 e0       	ldi	r24, 0x09	; 9
   189a2:	9a e3       	ldi	r25, 0x3A	; 58
   189a4:	a0 e0       	ldi	r26, 0x00	; 0
   189a6:	ed b7       	in	r30, 0x3d	; 61
   189a8:	fe b7       	in	r31, 0x3e	; 62
   189aa:	81 83       	std	Z+1, r24	; 0x01
   189ac:	92 83       	std	Z+2, r25	; 0x02
   189ae:	a3 83       	std	Z+3, r26	; 0x03
   189b0:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   189b4:	80 e0       	ldi	r24, 0x00	; 0
   189b6:	90 e0       	ldi	r25, 0x00	; 0
   189b8:	cd b7       	in	r28, 0x3d	; 61
   189ba:	de b7       	in	r29, 0x3e	; 62
   189bc:	27 96       	adiw	r28, 0x07	; 7
   189be:	e4 e0       	ldi	r30, 0x04	; 4
   189c0:	0c 94 08 e0 	jmp	0x1c010	; 0x1c010 <__epilogue_restores__+0x1c>

000189c4 <lif_check_dir>:
   189c4:	a5 e1       	ldi	r26, 0x15	; 21
   189c6:	b0 e0       	ldi	r27, 0x00	; 0
   189c8:	e8 ee       	ldi	r30, 0xE8	; 232
   189ca:	f4 ec       	ldi	r31, 0xC4	; 196
   189cc:	0c 94 de df 	jmp	0x1bfbc	; 0x1bfbc <__prologue_saves__>
   189d0:	6c 01       	movw	r12, r24
   189d2:	2a e5       	ldi	r18, 0x5A	; 90
   189d4:	c2 0e       	add	r12, r18
   189d6:	d1 1c       	adc	r13, r1
   189d8:	f6 01       	movw	r30, r12
   189da:	20 81       	ld	r18, Z
   189dc:	31 81       	ldd	r19, Z+1	; 0x01
   189de:	21 50       	subi	r18, 0x01	; 1
   189e0:	31 09       	sbc	r19, r1
   189e2:	2e 3f       	cpi	r18, 0xFE	; 254
   189e4:	3f 4f       	sbci	r19, 0xFF	; 255
   189e6:	08 f0       	brcs	.+2      	; 0x189ea <lif_check_dir+0x26>
   189e8:	8e c1       	rjmp	.+796    	; 0x18d06 <lif_check_dir+0x342>
   189ea:	9d 8b       	std	Y+21, r25	; 0x15
   189ec:	8c 8b       	std	Y+20, r24	; 0x14
   189ee:	7c 01       	movw	r14, r24
   189f0:	2f e4       	ldi	r18, 0x4F	; 79
   189f2:	e2 0e       	add	r14, r18
   189f4:	f1 1c       	adc	r15, r1
   189f6:	c7 01       	movw	r24, r14
   189f8:	f9 d9       	rcall	.-3086   	; 0x17dec <lif_checkname>
   189fa:	89 2b       	or	r24, r25
   189fc:	89 f4       	brne	.+34     	; 0x18a20 <lif_check_dir+0x5c>
   189fe:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   18a02:	81 ff       	sbrs	r24, 1
   18a04:	0f c0       	rjmp	.+30     	; 0x18a24 <lif_check_dir+0x60>
   18a06:	ed b7       	in	r30, 0x3d	; 61
   18a08:	fe b7       	in	r31, 0x3e	; 62
   18a0a:	f5 82       	std	Z+5, r15	; 0x05
   18a0c:	e4 82       	std	Z+4, r14	; 0x04
   18a0e:	88 ee       	ldi	r24, 0xE8	; 232
   18a10:	99 e3       	ldi	r25, 0x39	; 57
   18a12:	a0 e0       	ldi	r26, 0x00	; 0
   18a14:	81 83       	std	Z+1, r24	; 0x01
   18a16:	92 83       	std	Z+2, r25	; 0x02
   18a18:	a3 83       	std	Z+3, r26	; 0x03
   18a1a:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   18a1e:	02 c0       	rjmp	.+4      	; 0x18a24 <lif_check_dir+0x60>
   18a20:	01 e0       	ldi	r16, 0x01	; 1
   18a22:	01 c0       	rjmp	.+2      	; 0x18a26 <lif_check_dir+0x62>
   18a24:	00 e0       	ldi	r16, 0x00	; 0
   18a26:	10 e0       	ldi	r17, 0x00	; 0
   18a28:	ec 89       	ldd	r30, Y+20	; 0x14
   18a2a:	fd 89       	ldd	r31, Y+21	; 0x15
   18a2c:	84 85       	ldd	r24, Z+12	; 0x0c
   18a2e:	95 85       	ldd	r25, Z+13	; 0x0d
   18a30:	a6 85       	ldd	r26, Z+14	; 0x0e
   18a32:	b7 85       	ldd	r27, Z+15	; 0x0f
   18a34:	00 97       	sbiw	r24, 0x00	; 0
   18a36:	a1 05       	cpc	r26, r1
   18a38:	b1 05       	cpc	r27, r1
   18a3a:	29 f1       	breq	.+74     	; 0x18a86 <lif_check_dir+0xc2>
   18a3c:	e4 5a       	subi	r30, 0xA4	; 164
   18a3e:	ff 4f       	sbci	r31, 0xFF	; 255
   18a40:	40 81       	ld	r20, Z
   18a42:	51 81       	ldd	r21, Z+1	; 0x01
   18a44:	62 81       	ldd	r22, Z+2	; 0x02
   18a46:	73 81       	ldd	r23, Z+3	; 0x03
   18a48:	48 17       	cp	r20, r24
   18a4a:	59 07       	cpc	r21, r25
   18a4c:	6a 07       	cpc	r22, r26
   18a4e:	7b 07       	cpc	r23, r27
   18a50:	d0 f4       	brcc	.+52     	; 0x18a86 <lif_check_dir+0xc2>
   18a52:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   18a56:	21 ff       	sbrs	r18, 1
   18a58:	14 c0       	rjmp	.+40     	; 0x18a82 <lif_check_dir+0xbe>
   18a5a:	ed b7       	in	r30, 0x3d	; 61
   18a5c:	fe b7       	in	r31, 0x3e	; 62
   18a5e:	82 87       	std	Z+10, r24	; 0x0a
   18a60:	93 87       	std	Z+11, r25	; 0x0b
   18a62:	a4 87       	std	Z+12, r26	; 0x0c
   18a64:	b5 87       	std	Z+13, r27	; 0x0d
   18a66:	46 83       	std	Z+6, r20	; 0x06
   18a68:	57 83       	std	Z+7, r21	; 0x07
   18a6a:	60 87       	std	Z+8, r22	; 0x08
   18a6c:	71 87       	std	Z+9, r23	; 0x09
   18a6e:	f5 82       	std	Z+5, r15	; 0x05
   18a70:	e4 82       	std	Z+4, r14	; 0x04
   18a72:	84 ea       	ldi	r24, 0xA4	; 164
   18a74:	99 e3       	ldi	r25, 0x39	; 57
   18a76:	a0 e0       	ldi	r26, 0x00	; 0
   18a78:	81 83       	std	Z+1, r24	; 0x01
   18a7a:	92 83       	std	Z+2, r25	; 0x02
   18a7c:	a3 83       	std	Z+3, r26	; 0x03
   18a7e:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   18a82:	00 e0       	ldi	r16, 0x00	; 0
   18a84:	10 e0       	ldi	r17, 0x00	; 0
   18a86:	ec 89       	ldd	r30, Y+20	; 0x14
   18a88:	fd 89       	ldd	r31, Y+21	; 0x15
   18a8a:	44 81       	ldd	r20, Z+4	; 0x04
   18a8c:	55 81       	ldd	r21, Z+5	; 0x05
   18a8e:	66 81       	ldd	r22, Z+6	; 0x06
   18a90:	77 81       	ldd	r23, Z+7	; 0x07
   18a92:	41 15       	cp	r20, r1
   18a94:	51 05       	cpc	r21, r1
   18a96:	61 05       	cpc	r22, r1
   18a98:	71 05       	cpc	r23, r1
   18a9a:	89 f1       	breq	.+98     	; 0x18afe <lif_check_dir+0x13a>
   18a9c:	e4 5a       	subi	r30, 0xA4	; 164
   18a9e:	ff 4f       	sbci	r31, 0xFF	; 255
   18aa0:	80 80       	ld	r8, Z
   18aa2:	91 80       	ldd	r9, Z+1	; 0x01
   18aa4:	a2 80       	ldd	r10, Z+2	; 0x02
   18aa6:	b3 80       	ldd	r11, Z+3	; 0x03
   18aa8:	ec 89       	ldd	r30, Y+20	; 0x14
   18aaa:	fd 89       	ldd	r31, Y+21	; 0x15
   18aac:	e0 5a       	subi	r30, 0xA0	; 160
   18aae:	ff 4f       	sbci	r31, 0xFF	; 255
   18ab0:	80 81       	ld	r24, Z
   18ab2:	91 81       	ldd	r25, Z+1	; 0x01
   18ab4:	a2 81       	ldd	r26, Z+2	; 0x02
   18ab6:	b3 81       	ldd	r27, Z+3	; 0x03
   18ab8:	88 0d       	add	r24, r8
   18aba:	99 1d       	adc	r25, r9
   18abc:	aa 1d       	adc	r26, r10
   18abe:	bb 1d       	adc	r27, r11
   18ac0:	48 17       	cp	r20, r24
   18ac2:	59 07       	cpc	r21, r25
   18ac4:	6a 07       	cpc	r22, r26
   18ac6:	7b 07       	cpc	r23, r27
   18ac8:	d0 f4       	brcc	.+52     	; 0x18afe <lif_check_dir+0x13a>
   18aca:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   18ace:	21 ff       	sbrs	r18, 1
   18ad0:	14 c0       	rjmp	.+40     	; 0x18afa <lif_check_dir+0x136>
   18ad2:	ed b7       	in	r30, 0x3d	; 61
   18ad4:	fe b7       	in	r31, 0x3e	; 62
   18ad6:	42 87       	std	Z+10, r20	; 0x0a
   18ad8:	53 87       	std	Z+11, r21	; 0x0b
   18ada:	64 87       	std	Z+12, r22	; 0x0c
   18adc:	75 87       	std	Z+13, r23	; 0x0d
   18ade:	86 83       	std	Z+6, r24	; 0x06
   18ae0:	97 83       	std	Z+7, r25	; 0x07
   18ae2:	a0 87       	std	Z+8, r26	; 0x08
   18ae4:	b1 87       	std	Z+9, r27	; 0x09
   18ae6:	f5 82       	std	Z+5, r15	; 0x05
   18ae8:	e4 82       	std	Z+4, r14	; 0x04
   18aea:	83 e6       	ldi	r24, 0x63	; 99
   18aec:	99 e3       	ldi	r25, 0x39	; 57
   18aee:	a0 e0       	ldi	r26, 0x00	; 0
   18af0:	81 83       	std	Z+1, r24	; 0x01
   18af2:	92 83       	std	Z+2, r25	; 0x02
   18af4:	a3 83       	std	Z+3, r26	; 0x03
   18af6:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   18afa:	00 e0       	ldi	r16, 0x00	; 0
   18afc:	10 e0       	ldi	r17, 0x00	; 0
   18afe:	ec 89       	ldd	r30, Y+20	; 0x14
   18b00:	fd 89       	ldd	r31, Y+21	; 0x15
   18b02:	e6 59       	subi	r30, 0x96	; 150
   18b04:	ff 4f       	sbci	r31, 0xFF	; 255
   18b06:	80 81       	ld	r24, Z
   18b08:	91 81       	ldd	r25, Z+1	; 0x01
   18b0a:	81 30       	cpi	r24, 0x01	; 1
   18b0c:	f0 e8       	ldi	r31, 0x80	; 128
   18b0e:	9f 07       	cpc	r25, r31
   18b10:	a1 f0       	breq	.+40     	; 0x18b3a <lif_check_dir+0x176>
   18b12:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   18b16:	21 ff       	sbrs	r18, 1
   18b18:	0e c0       	rjmp	.+28     	; 0x18b36 <lif_check_dir+0x172>
   18b1a:	ed b7       	in	r30, 0x3d	; 61
   18b1c:	fe b7       	in	r31, 0x3e	; 62
   18b1e:	97 83       	std	Z+7, r25	; 0x07
   18b20:	86 83       	std	Z+6, r24	; 0x06
   18b22:	f5 82       	std	Z+5, r15	; 0x05
   18b24:	e4 82       	std	Z+4, r14	; 0x04
   18b26:	85 e3       	ldi	r24, 0x35	; 53
   18b28:	99 e3       	ldi	r25, 0x39	; 57
   18b2a:	a0 e0       	ldi	r26, 0x00	; 0
   18b2c:	81 83       	std	Z+1, r24	; 0x01
   18b2e:	92 83       	std	Z+2, r25	; 0x02
   18b30:	a3 83       	std	Z+3, r26	; 0x03
   18b32:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   18b36:	00 e0       	ldi	r16, 0x00	; 0
   18b38:	10 e0       	ldi	r17, 0x00	; 0
   18b3a:	f6 01       	movw	r30, r12
   18b3c:	80 81       	ld	r24, Z
   18b3e:	91 81       	ldd	r25, Z+1	; 0x01
   18b40:	8c 7f       	andi	r24, 0xFC	; 252
   18b42:	80 31       	cpi	r24, 0x10	; 16
   18b44:	90 4e       	sbci	r25, 0xE0	; 224
   18b46:	09 f0       	breq	.+2      	; 0x18b4a <lif_check_dir+0x186>
   18b48:	af c0       	rjmp	.+350    	; 0x18ca8 <lif_check_dir+0x2e4>
   18b4a:	cc 88       	ldd	r12, Y+20	; 0x14
   18b4c:	dd 88       	ldd	r13, Y+21	; 0x15
   18b4e:	2c e6       	ldi	r18, 0x6C	; 108
   18b50:	c2 0e       	add	r12, r18
   18b52:	d1 1c       	adc	r13, r1
   18b54:	f6 01       	movw	r30, r12
   18b56:	80 81       	ld	r24, Z
   18b58:	91 81       	ldd	r25, Z+1	; 0x01
   18b5a:	00 97       	sbiw	r24, 0x00	; 0
   18b5c:	09 f4       	brne	.+2      	; 0x18b60 <lif_check_dir+0x19c>
   18b5e:	a4 c0       	rjmp	.+328    	; 0x18ca8 <lif_check_dir+0x2e4>
   18b60:	4c 01       	movw	r8, r24
   18b62:	a1 2c       	mov	r10, r1
   18b64:	b1 2c       	mov	r11, r1
   18b66:	77 27       	eor	r23, r23
   18b68:	6b 2d       	mov	r22, r11
   18b6a:	5a 2d       	mov	r21, r10
   18b6c:	49 2d       	mov	r20, r9
   18b6e:	9c 01       	movw	r18, r24
   18b70:	33 27       	eor	r19, r19
   18b72:	3b 8b       	std	Y+19, r19	; 0x13
   18b74:	2a 8b       	std	Y+18, r18	; 0x12
   18b76:	db 01       	movw	r26, r22
   18b78:	ca 01       	movw	r24, r20
   18b7a:	23 2b       	or	r18, r19
   18b7c:	19 f0       	breq	.+6      	; 0x18b84 <lif_check_dir+0x1c0>
   18b7e:	01 96       	adiw	r24, 0x01	; 1
   18b80:	a1 1d       	adc	r26, r1
   18b82:	b1 1d       	adc	r27, r1
   18b84:	2c 88       	ldd	r2, Y+20	; 0x14
   18b86:	3d 88       	ldd	r3, Y+21	; 0x15
   18b88:	30 e6       	ldi	r19, 0x60	; 96
   18b8a:	23 0e       	add	r2, r19
   18b8c:	31 1c       	adc	r3, r1
   18b8e:	f1 01       	movw	r30, r2
   18b90:	40 80       	ld	r4, Z
   18b92:	51 80       	ldd	r5, Z+1	; 0x01
   18b94:	62 80       	ldd	r6, Z+2	; 0x02
   18b96:	73 80       	ldd	r7, Z+3	; 0x03
   18b98:	48 16       	cp	r4, r24
   18b9a:	59 06       	cpc	r5, r25
   18b9c:	6a 06       	cpc	r6, r26
   18b9e:	7b 06       	cpc	r7, r27
   18ba0:	30 f5       	brcc	.+76     	; 0x18bee <lif_check_dir+0x22a>
   18ba2:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   18ba6:	21 ff       	sbrs	r18, 1
   18ba8:	20 c0       	rjmp	.+64     	; 0x18bea <lif_check_dir+0x226>
   18baa:	2a 89       	ldd	r18, Y+18	; 0x12
   18bac:	3b 89       	ldd	r19, Y+19	; 0x13
   18bae:	23 2b       	or	r18, r19
   18bb0:	21 f0       	breq	.+8      	; 0x18bba <lif_check_dir+0x1f6>
   18bb2:	4f 5f       	subi	r20, 0xFF	; 255
   18bb4:	5f 4f       	sbci	r21, 0xFF	; 255
   18bb6:	6f 4f       	sbci	r22, 0xFF	; 255
   18bb8:	7f 4f       	sbci	r23, 0xFF	; 255
   18bba:	ed b7       	in	r30, 0x3d	; 61
   18bbc:	fe b7       	in	r31, 0x3e	; 62
   18bbe:	46 86       	std	Z+14, r4	; 0x0e
   18bc0:	57 86       	std	Z+15, r5	; 0x0f
   18bc2:	60 8a       	std	Z+16, r6	; 0x10
   18bc4:	71 8a       	std	Z+17, r7	; 0x11
   18bc6:	42 87       	std	Z+10, r20	; 0x0a
   18bc8:	53 87       	std	Z+11, r21	; 0x0b
   18bca:	64 87       	std	Z+12, r22	; 0x0c
   18bcc:	75 87       	std	Z+13, r23	; 0x0d
   18bce:	86 82       	std	Z+6, r8	; 0x06
   18bd0:	97 82       	std	Z+7, r9	; 0x07
   18bd2:	a0 86       	std	Z+8, r10	; 0x08
   18bd4:	b1 86       	std	Z+9, r11	; 0x09
   18bd6:	f5 82       	std	Z+5, r15	; 0x05
   18bd8:	e4 82       	std	Z+4, r14	; 0x04
   18bda:	8a ee       	ldi	r24, 0xEA	; 234
   18bdc:	98 e3       	ldi	r25, 0x38	; 56
   18bde:	a0 e0       	ldi	r26, 0x00	; 0
   18be0:	81 83       	std	Z+1, r24	; 0x01
   18be2:	92 83       	std	Z+2, r25	; 0x02
   18be4:	a3 83       	std	Z+3, r26	; 0x03
   18be6:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   18bea:	00 e0       	ldi	r16, 0x00	; 0
   18bec:	10 e0       	ldi	r17, 0x00	; 0
   18bee:	f6 01       	movw	r30, r12
   18bf0:	20 81       	ld	r18, Z
   18bf2:	31 81       	ldd	r19, Z+1	; 0x01
   18bf4:	a9 01       	movw	r20, r18
   18bf6:	60 e0       	ldi	r22, 0x00	; 0
   18bf8:	70 e0       	ldi	r23, 0x00	; 0
   18bfa:	bb 27       	eor	r27, r27
   18bfc:	a7 2f       	mov	r26, r23
   18bfe:	96 2f       	mov	r25, r22
   18c00:	85 2f       	mov	r24, r21
   18c02:	f9 01       	movw	r30, r18
   18c04:	ff 27       	eor	r31, r31
   18c06:	fb 8b       	std	Y+19, r31	; 0x13
   18c08:	ea 8b       	std	Y+18, r30	; 0x12
   18c0a:	2c 01       	movw	r4, r24
   18c0c:	3d 01       	movw	r6, r26
   18c0e:	ef 2b       	or	r30, r31
   18c10:	29 f0       	breq	.+10     	; 0x18c1c <lif_check_dir+0x258>
   18c12:	ff ef       	ldi	r31, 0xFF	; 255
   18c14:	4f 1a       	sub	r4, r31
   18c16:	5f 0a       	sbc	r5, r31
   18c18:	6f 0a       	sbc	r6, r31
   18c1a:	7f 0a       	sbc	r7, r31
   18c1c:	f1 01       	movw	r30, r2
   18c1e:	80 80       	ld	r8, Z
   18c20:	91 80       	ldd	r9, Z+1	; 0x01
   18c22:	a2 80       	ldd	r10, Z+2	; 0x02
   18c24:	b3 80       	ldd	r11, Z+3	; 0x03
   18c26:	48 14       	cp	r4, r8
   18c28:	59 04       	cpc	r5, r9
   18c2a:	6a 04       	cpc	r6, r10
   18c2c:	7b 04       	cpc	r7, r11
   18c2e:	28 f5       	brcc	.+74     	; 0x18c7a <lif_check_dir+0x2b6>
   18c30:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   18c34:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   18c38:	32 ff       	sbrs	r19, 2
   18c3a:	1f c0       	rjmp	.+62     	; 0x18c7a <lif_check_dir+0x2b6>
   18c3c:	2a 89       	ldd	r18, Y+18	; 0x12
   18c3e:	3b 89       	ldd	r19, Y+19	; 0x13
   18c40:	23 2b       	or	r18, r19
   18c42:	19 f0       	breq	.+6      	; 0x18c4a <lif_check_dir+0x286>
   18c44:	01 96       	adiw	r24, 0x01	; 1
   18c46:	a1 1d       	adc	r26, r1
   18c48:	b1 1d       	adc	r27, r1
   18c4a:	ed b7       	in	r30, 0x3d	; 61
   18c4c:	fe b7       	in	r31, 0x3e	; 62
   18c4e:	86 86       	std	Z+14, r8	; 0x0e
   18c50:	97 86       	std	Z+15, r9	; 0x0f
   18c52:	a0 8a       	std	Z+16, r10	; 0x10
   18c54:	b1 8a       	std	Z+17, r11	; 0x11
   18c56:	82 87       	std	Z+10, r24	; 0x0a
   18c58:	93 87       	std	Z+11, r25	; 0x0b
   18c5a:	a4 87       	std	Z+12, r26	; 0x0c
   18c5c:	b5 87       	std	Z+13, r27	; 0x0d
   18c5e:	46 83       	std	Z+6, r20	; 0x06
   18c60:	57 83       	std	Z+7, r21	; 0x07
   18c62:	60 87       	std	Z+8, r22	; 0x08
   18c64:	71 87       	std	Z+9, r23	; 0x09
   18c66:	f5 82       	std	Z+5, r15	; 0x05
   18c68:	e4 82       	std	Z+4, r14	; 0x04
   18c6a:	8f e9       	ldi	r24, 0x9F	; 159
   18c6c:	98 e3       	ldi	r25, 0x38	; 56
   18c6e:	a0 e0       	ldi	r26, 0x00	; 0
   18c70:	81 83       	std	Z+1, r24	; 0x01
   18c72:	92 83       	std	Z+2, r25	; 0x02
   18c74:	a3 83       	std	Z+3, r26	; 0x03
   18c76:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   18c7a:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   18c7e:	81 ff       	sbrs	r24, 1
   18c80:	13 c0       	rjmp	.+38     	; 0x18ca8 <lif_check_dir+0x2e4>
   18c82:	f6 01       	movw	r30, r12
   18c84:	80 81       	ld	r24, Z
   18c86:	91 81       	ldd	r25, Z+1	; 0x01
   18c88:	89 2b       	or	r24, r25
   18c8a:	71 f4       	brne	.+28     	; 0x18ca8 <lif_check_dir+0x2e4>
   18c8c:	ed b7       	in	r30, 0x3d	; 61
   18c8e:	fe b7       	in	r31, 0x3e	; 62
   18c90:	f5 82       	std	Z+5, r15	; 0x05
   18c92:	e4 82       	std	Z+4, r14	; 0x04
   18c94:	84 e7       	ldi	r24, 0x74	; 116
   18c96:	98 e3       	ldi	r25, 0x38	; 56
   18c98:	a0 e0       	ldi	r26, 0x00	; 0
   18c9a:	81 83       	std	Z+1, r24	; 0x01
   18c9c:	92 83       	std	Z+2, r25	; 0x02
   18c9e:	a3 83       	std	Z+3, r26	; 0x03
   18ca0:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   18ca4:	00 e0       	ldi	r16, 0x00	; 0
   18ca6:	10 e0       	ldi	r17, 0x00	; 0
   18ca8:	ec 89       	ldd	r30, Y+20	; 0x14
   18caa:	fd 89       	ldd	r31, Y+21	; 0x15
   18cac:	e2 59       	subi	r30, 0x92	; 146
   18cae:	ff 4f       	sbci	r31, 0xFF	; 255
   18cb0:	20 81       	ld	r18, Z
   18cb2:	31 81       	ldd	r19, Z+1	; 0x01
   18cb4:	21 15       	cp	r18, r1
   18cb6:	f1 e0       	ldi	r31, 0x01	; 1
   18cb8:	3f 07       	cpc	r19, r31
   18cba:	41 f1       	breq	.+80     	; 0x18d0c <lif_check_dir+0x348>
   18cbc:	40 91 c3 01 	lds	r20, 0x01C3	; 0x8001c3 <debuglevel>
   18cc0:	50 91 c4 01 	lds	r21, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   18cc4:	ca 01       	movw	r24, r20
   18cc6:	82 70       	andi	r24, 0x02	; 2
   18cc8:	99 27       	eor	r25, r25
   18cca:	41 ff       	sbrs	r20, 1
   18ccc:	20 c0       	rjmp	.+64     	; 0x18d0e <lif_check_dir+0x34a>
   18cce:	c9 01       	movw	r24, r18
   18cd0:	a0 e0       	ldi	r26, 0x00	; 0
   18cd2:	b0 e0       	ldi	r27, 0x00	; 0
   18cd4:	ed b7       	in	r30, 0x3d	; 61
   18cd6:	fe b7       	in	r31, 0x3e	; 62
   18cd8:	86 83       	std	Z+6, r24	; 0x06
   18cda:	97 83       	std	Z+7, r25	; 0x07
   18cdc:	a0 87       	std	Z+8, r26	; 0x08
   18cde:	b1 87       	std	Z+9, r27	; 0x09
   18ce0:	ec 89       	ldd	r30, Y+20	; 0x14
   18ce2:	fd 89       	ldd	r31, Y+21	; 0x15
   18ce4:	80 81       	ld	r24, Z
   18ce6:	91 81       	ldd	r25, Z+1	; 0x01
   18ce8:	ed b7       	in	r30, 0x3d	; 61
   18cea:	fe b7       	in	r31, 0x3e	; 62
   18cec:	95 83       	std	Z+5, r25	; 0x05
   18cee:	84 83       	std	Z+4, r24	; 0x04
   18cf0:	88 e4       	ldi	r24, 0x48	; 72
   18cf2:	98 e3       	ldi	r25, 0x38	; 56
   18cf4:	a0 e0       	ldi	r26, 0x00	; 0
   18cf6:	81 83       	std	Z+1, r24	; 0x01
   18cf8:	92 83       	std	Z+2, r25	; 0x02
   18cfa:	a3 83       	std	Z+3, r26	; 0x03
   18cfc:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   18d00:	80 e0       	ldi	r24, 0x00	; 0
   18d02:	90 e0       	ldi	r25, 0x00	; 0
   18d04:	04 c0       	rjmp	.+8      	; 0x18d0e <lif_check_dir+0x34a>
   18d06:	81 e0       	ldi	r24, 0x01	; 1
   18d08:	90 e0       	ldi	r25, 0x00	; 0
   18d0a:	01 c0       	rjmp	.+2      	; 0x18d0e <lif_check_dir+0x34a>
   18d0c:	c8 01       	movw	r24, r16
   18d0e:	65 96       	adiw	r28, 0x15	; 21
   18d10:	e2 e1       	ldi	r30, 0x12	; 18
   18d12:	0c 94 fa df 	jmp	0x1bff4	; 0x1bff4 <__epilogue_restores__>

00018d16 <lif_close_volume>:
   18d16:	cf 93       	push	r28
   18d18:	df 93       	push	r29
   18d1a:	00 97       	sbiw	r24, 0x00	; 0
   18d1c:	f9 f0       	breq	.+62     	; 0x18d5c <lif_close_volume+0x46>
   18d1e:	ec 01       	movw	r28, r24
   18d20:	8a 81       	ldd	r24, Y+2	; 0x02
   18d22:	9b 81       	ldd	r25, Y+3	; 0x03
   18d24:	00 97       	sbiw	r24, 0x00	; 0
   18d26:	79 f0       	breq	.+30     	; 0x18d46 <lif_close_volume+0x30>
   18d28:	22 e0       	ldi	r18, 0x02	; 2
   18d2a:	30 e0       	ldi	r19, 0x00	; 0
   18d2c:	40 e0       	ldi	r20, 0x00	; 0
   18d2e:	50 e0       	ldi	r21, 0x00	; 0
   18d30:	ba 01       	movw	r22, r20
   18d32:	0e 94 3e 7a 	call	0xf47c	; 0xf47c <fseek>
   18d36:	8a 81       	ldd	r24, Y+2	; 0x02
   18d38:	9b 81       	ldd	r25, Y+3	; 0x03
   18d3a:	0e 94 26 7c 	call	0xf84c	; 0xf84c <fclose>
   18d3e:	1b 82       	std	Y+3, r1	; 0x03
   18d40:	1a 82       	std	Y+2, r1	; 0x02
   18d42:	0e 94 21 7b 	call	0xf642	; 0xf642 <sync>
   18d46:	88 81       	ld	r24, Y
   18d48:	99 81       	ldd	r25, Y+1	; 0x01
   18d4a:	00 97       	sbiw	r24, 0x00	; 0
   18d4c:	11 f0       	breq	.+4      	; 0x18d52 <lif_close_volume+0x3c>
   18d4e:	0e 94 27 bd 	call	0x17a4e	; 0x17a4e <lif_free>
   18d52:	ce 01       	movw	r24, r28
   18d54:	8f db       	rcall	.-2274   	; 0x18474 <lif_vol_clear>
   18d56:	ce 01       	movw	r24, r28
   18d58:	0e 94 27 bd 	call	0x17a4e	; 0x17a4e <lif_free>
   18d5c:	df 91       	pop	r29
   18d5e:	cf 91       	pop	r28
   18d60:	08 95       	ret

00018d62 <lif_checkdirindex>:
   18d62:	cf 92       	push	r12
   18d64:	df 92       	push	r13
   18d66:	ef 92       	push	r14
   18d68:	ff 92       	push	r15
   18d6a:	cf 93       	push	r28
   18d6c:	df 93       	push	r29
   18d6e:	ad b7       	in	r26, 0x3d	; 61
   18d70:	be b7       	in	r27, 0x3e	; 62
   18d72:	17 97       	sbiw	r26, 0x07	; 7
   18d74:	0f b6       	in	r0, 0x3f	; 63
   18d76:	f8 94       	cli
   18d78:	be bf       	out	0x3e, r27	; 62
   18d7a:	0f be       	out	0x3f, r0	; 63
   18d7c:	ad bf       	out	0x3d, r26	; 61
   18d7e:	9b 01       	movw	r18, r22
   18d80:	77 fd       	sbrc	r23, 7
   18d82:	25 c0       	rjmp	.+74     	; 0x18dce <lif_checkdirindex+0x6c>
   18d84:	ab 01       	movw	r20, r22
   18d86:	77 0f       	add	r23, r23
   18d88:	66 0b       	sbc	r22, r22
   18d8a:	77 0b       	sbc	r23, r23
   18d8c:	e5 e0       	ldi	r30, 0x05	; 5
   18d8e:	44 0f       	add	r20, r20
   18d90:	55 1f       	adc	r21, r21
   18d92:	66 1f       	adc	r22, r22
   18d94:	77 1f       	adc	r23, r23
   18d96:	ea 95       	dec	r30
   18d98:	d1 f7       	brne	.-12     	; 0x18d8e <lif_checkdirindex+0x2c>
   18d9a:	c5 2e       	mov	r12, r21
   18d9c:	d6 2e       	mov	r13, r22
   18d9e:	e7 2e       	mov	r14, r23
   18da0:	ff 24       	eor	r15, r15
   18da2:	55 27       	eor	r21, r21
   18da4:	66 27       	eor	r22, r22
   18da6:	77 27       	eor	r23, r23
   18da8:	45 2b       	or	r20, r21
   18daa:	46 2b       	or	r20, r22
   18dac:	47 2b       	or	r20, r23
   18dae:	29 f0       	breq	.+10     	; 0x18dba <lif_checkdirindex+0x58>
   18db0:	4f ef       	ldi	r20, 0xFF	; 255
   18db2:	c4 1a       	sub	r12, r20
   18db4:	d4 0a       	sbc	r13, r20
   18db6:	e4 0a       	sbc	r14, r20
   18db8:	f4 0a       	sbc	r15, r20
   18dba:	fc 01       	movw	r30, r24
   18dbc:	45 a9       	ldd	r20, Z+53	; 0x35
   18dbe:	56 a9       	ldd	r21, Z+54	; 0x36
   18dc0:	67 a9       	ldd	r22, Z+55	; 0x37
   18dc2:	70 ad       	ldd	r23, Z+56	; 0x38
   18dc4:	4c 15       	cp	r20, r12
   18dc6:	5d 05       	cpc	r21, r13
   18dc8:	6e 05       	cpc	r22, r14
   18dca:	7f 05       	cpc	r23, r15
   18dcc:	08 f5       	brcc	.+66     	; 0x18e10 <lif_checkdirindex+0xae>
   18dce:	ec 01       	movw	r28, r24
   18dd0:	ed b7       	in	r30, 0x3d	; 61
   18dd2:	fe b7       	in	r31, 0x3e	; 62
   18dd4:	37 83       	std	Z+7, r19	; 0x07
   18dd6:	26 83       	std	Z+6, r18	; 0x06
   18dd8:	88 81       	ld	r24, Y
   18dda:	99 81       	ldd	r25, Y+1	; 0x01
   18ddc:	95 83       	std	Z+5, r25	; 0x05
   18dde:	84 83       	std	Z+4, r24	; 0x04
   18de0:	85 e8       	ldi	r24, 0x85	; 133
   18de2:	97 e3       	ldi	r25, 0x37	; 55
   18de4:	a0 e0       	ldi	r26, 0x00	; 0
   18de6:	81 83       	std	Z+1, r24	; 0x01
   18de8:	92 83       	std	Z+2, r25	; 0x02
   18dea:	a3 83       	std	Z+3, r26	; 0x03
   18dec:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   18df0:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   18df4:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   18df8:	c9 01       	movw	r24, r18
   18dfa:	88 27       	eor	r24, r24
   18dfc:	94 70       	andi	r25, 0x04	; 4
   18dfe:	32 ff       	sbrs	r19, 2
   18e00:	09 c0       	rjmp	.+18     	; 0x18e14 <lif_checkdirindex+0xb2>
   18e02:	66 ee       	ldi	r22, 0xE6	; 230
   18e04:	75 e1       	ldi	r23, 0x15	; 21
   18e06:	ce 01       	movw	r24, r28
   18e08:	3c db       	rcall	.-2440   	; 0x18482 <lif_dump_vol>
   18e0a:	80 e0       	ldi	r24, 0x00	; 0
   18e0c:	90 e0       	ldi	r25, 0x00	; 0
   18e0e:	02 c0       	rjmp	.+4      	; 0x18e14 <lif_checkdirindex+0xb2>
   18e10:	81 e0       	ldi	r24, 0x01	; 1
   18e12:	90 e0       	ldi	r25, 0x00	; 0
   18e14:	ad b7       	in	r26, 0x3d	; 61
   18e16:	be b7       	in	r27, 0x3e	; 62
   18e18:	17 96       	adiw	r26, 0x07	; 7
   18e1a:	0f b6       	in	r0, 0x3f	; 63
   18e1c:	f8 94       	cli
   18e1e:	be bf       	out	0x3e, r27	; 62
   18e20:	0f be       	out	0x3f, r0	; 63
   18e22:	ad bf       	out	0x3d, r26	; 61
   18e24:	df 91       	pop	r29
   18e26:	cf 91       	pop	r28
   18e28:	ff 90       	pop	r15
   18e2a:	ef 90       	pop	r14
   18e2c:	df 90       	pop	r13
   18e2e:	cf 90       	pop	r12
   18e30:	08 95       	ret

00018e32 <lif_readdirindex>:
   18e32:	a5 e2       	ldi	r26, 0x25	; 37
   18e34:	b0 e0       	ldi	r27, 0x00	; 0
   18e36:	ef e1       	ldi	r30, 0x1F	; 31
   18e38:	f7 ec       	ldi	r31, 0xC7	; 199
   18e3a:	0c 94 e8 df 	jmp	0x1bfd0	; 0x1bfd0 <__prologue_saves__+0x14>
   18e3e:	7c 01       	movw	r14, r24
   18e40:	6b 01       	movw	r12, r22
   18e42:	8f df       	rcall	.-226    	; 0x18d62 <lif_checkdirindex>
   18e44:	89 2b       	or	r24, r25
   18e46:	19 f4       	brne	.+6      	; 0x18e4e <lif_readdirindex+0x1c>
   18e48:	00 e0       	ldi	r16, 0x00	; 0
   18e4a:	10 e0       	ldi	r17, 0x00	; 0
   18e4c:	54 c0       	rjmp	.+168    	; 0x18ef6 <lif_readdirindex+0xc4>
   18e4e:	f7 01       	movw	r30, r14
   18e50:	85 a5       	ldd	r24, Z+45	; 0x2d
   18e52:	96 a5       	ldd	r25, Z+46	; 0x2e
   18e54:	a7 a5       	ldd	r26, Z+47	; 0x2f
   18e56:	b0 a9       	ldd	r27, Z+48	; 0x30
   18e58:	44 27       	eor	r20, r20
   18e5a:	58 2f       	mov	r21, r24
   18e5c:	69 2f       	mov	r22, r25
   18e5e:	7a 2f       	mov	r23, r26
   18e60:	c6 01       	movw	r24, r12
   18e62:	0d 2c       	mov	r0, r13
   18e64:	00 0c       	add	r0, r0
   18e66:	aa 0b       	sbc	r26, r26
   18e68:	bb 0b       	sbc	r27, r27
   18e6a:	35 e0       	ldi	r19, 0x05	; 5
   18e6c:	88 0f       	add	r24, r24
   18e6e:	99 1f       	adc	r25, r25
   18e70:	aa 1f       	adc	r26, r26
   18e72:	bb 1f       	adc	r27, r27
   18e74:	3a 95       	dec	r19
   18e76:	d1 f7       	brne	.-12     	; 0x18e6c <lif_readdirindex+0x3a>
   18e78:	9a 01       	movw	r18, r20
   18e7a:	ab 01       	movw	r20, r22
   18e7c:	28 0f       	add	r18, r24
   18e7e:	39 1f       	adc	r19, r25
   18e80:	4a 1f       	adc	r20, r26
   18e82:	5b 1f       	adc	r21, r27
   18e84:	00 e2       	ldi	r16, 0x20	; 32
   18e86:	10 e0       	ldi	r17, 0x00	; 0
   18e88:	be 01       	movw	r22, r28
   18e8a:	6a 5f       	subi	r22, 0xFA	; 250
   18e8c:	7f 4f       	sbci	r23, 0xFF	; 255
   18e8e:	c7 01       	movw	r24, r14
   18e90:	0e 94 df bd 	call	0x17bbe	; 0x17bbe <lif_read>
   18e94:	60 32       	cpi	r22, 0x20	; 32
   18e96:	71 05       	cpc	r23, r1
   18e98:	81 05       	cpc	r24, r1
   18e9a:	91 05       	cpc	r25, r1
   18e9c:	a8 f2       	brcs	.-86     	; 0x18e48 <lif_readdirindex+0x16>
   18e9e:	b7 01       	movw	r22, r14
   18ea0:	ce 01       	movw	r24, r28
   18ea2:	06 96       	adiw	r24, 0x06	; 6
   18ea4:	91 d9       	rcall	.-3294   	; 0x181c8 <lif_str2dir>
   18ea6:	f7 01       	movw	r30, r14
   18ea8:	e6 5a       	subi	r30, 0xA6	; 166
   18eaa:	ff 4f       	sbci	r31, 0xFF	; 255
   18eac:	80 81       	ld	r24, Z
   18eae:	91 81       	ldd	r25, Z+1	; 0x01
   18eb0:	01 96       	adiw	r24, 0x01	; 1
   18eb2:	19 f4       	brne	.+6      	; 0x18eba <lif_readdirindex+0x88>
   18eb4:	f7 01       	movw	r30, r14
   18eb6:	d3 a2       	std	Z+35, r13	; 0x23
   18eb8:	c2 a2       	std	Z+34, r12	; 0x22
   18eba:	c7 01       	movw	r24, r14
   18ebc:	83 dd       	rcall	.-1274   	; 0x189c4 <lif_check_dir>
   18ebe:	8c 01       	movw	r16, r24
   18ec0:	89 2b       	or	r24, r25
   18ec2:	b9 f4       	brne	.+46     	; 0x18ef2 <lif_readdirindex+0xc0>
   18ec4:	ed b7       	in	r30, 0x3d	; 61
   18ec6:	fe b7       	in	r31, 0x3e	; 62
   18ec8:	d5 82       	std	Z+5, r13	; 0x05
   18eca:	c4 82       	std	Z+4, r12	; 0x04
   18ecc:	85 e6       	ldi	r24, 0x65	; 101
   18ece:	97 e3       	ldi	r25, 0x37	; 55
   18ed0:	a0 e0       	ldi	r26, 0x00	; 0
   18ed2:	81 83       	std	Z+1, r24	; 0x01
   18ed4:	92 83       	std	Z+2, r25	; 0x02
   18ed6:	a3 83       	std	Z+3, r26	; 0x03
   18ed8:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   18edc:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   18ee0:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   18ee4:	92 ff       	sbrs	r25, 2
   18ee6:	b0 cf       	rjmp	.-160    	; 0x18e48 <lif_readdirindex+0x16>
   18ee8:	67 ef       	ldi	r22, 0xF7	; 247
   18eea:	75 e1       	ldi	r23, 0x15	; 21
   18eec:	c7 01       	movw	r24, r14
   18eee:	c9 da       	rcall	.-2670   	; 0x18482 <lif_dump_vol>
   18ef0:	02 c0       	rjmp	.+4      	; 0x18ef6 <lif_readdirindex+0xc4>
   18ef2:	01 e0       	ldi	r16, 0x01	; 1
   18ef4:	10 e0       	ldi	r17, 0x00	; 0
   18ef6:	c8 01       	movw	r24, r16
   18ef8:	a5 96       	adiw	r28, 0x25	; 37
   18efa:	e8 e0       	ldi	r30, 0x08	; 8
   18efc:	0c 94 04 e0 	jmp	0x1c008	; 0x1c008 <__epilogue_restores__+0x14>

00018f00 <lif_writedirindex>:
   18f00:	a0 e2       	ldi	r26, 0x20	; 32
   18f02:	b0 e0       	ldi	r27, 0x00	; 0
   18f04:	e6 e8       	ldi	r30, 0x86	; 134
   18f06:	f7 ec       	ldi	r31, 0xC7	; 199
   18f08:	0c 94 e6 df 	jmp	0x1bfcc	; 0x1bfcc <__prologue_saves__+0x10>
   18f0c:	5c 01       	movw	r10, r24
   18f0e:	6b 01       	movw	r12, r22
   18f10:	59 dd       	rcall	.-1358   	; 0x189c4 <lif_check_dir>
   18f12:	7c 01       	movw	r14, r24
   18f14:	89 2b       	or	r24, r25
   18f16:	71 f4       	brne	.+28     	; 0x18f34 <lif_writedirindex+0x34>
   18f18:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   18f1c:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   18f20:	92 fd       	sbrc	r25, 2
   18f22:	03 c0       	rjmp	.+6      	; 0x18f2a <lif_writedirindex+0x2a>
   18f24:	e1 2c       	mov	r14, r1
   18f26:	f1 2c       	mov	r15, r1
   18f28:	42 c0       	rjmp	.+132    	; 0x18fae <lif_writedirindex+0xae>
   18f2a:	68 e0       	ldi	r22, 0x08	; 8
   18f2c:	76 e1       	ldi	r23, 0x16	; 22
   18f2e:	c5 01       	movw	r24, r10
   18f30:	a8 da       	rcall	.-2736   	; 0x18482 <lif_dump_vol>
   18f32:	3d c0       	rjmp	.+122    	; 0x18fae <lif_writedirindex+0xae>
   18f34:	b6 01       	movw	r22, r12
   18f36:	c5 01       	movw	r24, r10
   18f38:	14 df       	rcall	.-472    	; 0x18d62 <lif_checkdirindex>
   18f3a:	89 2b       	or	r24, r25
   18f3c:	99 f3       	breq	.-26     	; 0x18f24 <lif_writedirindex+0x24>
   18f3e:	f5 01       	movw	r30, r10
   18f40:	e6 5a       	subi	r30, 0xA6	; 166
   18f42:	ff 4f       	sbci	r31, 0xFF	; 255
   18f44:	80 81       	ld	r24, Z
   18f46:	91 81       	ldd	r25, Z+1	; 0x01
   18f48:	01 96       	adiw	r24, 0x01	; 1
   18f4a:	19 f4       	brne	.+6      	; 0x18f52 <lif_writedirindex+0x52>
   18f4c:	f5 01       	movw	r30, r10
   18f4e:	d3 a2       	std	Z+35, r13	; 0x23
   18f50:	c2 a2       	std	Z+34, r12	; 0x22
   18f52:	f5 01       	movw	r30, r10
   18f54:	85 a5       	ldd	r24, Z+45	; 0x2d
   18f56:	96 a5       	ldd	r25, Z+46	; 0x2e
   18f58:	a7 a5       	ldd	r26, Z+47	; 0x2f
   18f5a:	b0 a9       	ldd	r27, Z+48	; 0x30
   18f5c:	ba 2f       	mov	r27, r26
   18f5e:	a9 2f       	mov	r26, r25
   18f60:	98 2f       	mov	r25, r24
   18f62:	88 27       	eor	r24, r24
   18f64:	0d 2c       	mov	r0, r13
   18f66:	00 0c       	add	r0, r0
   18f68:	ee 08       	sbc	r14, r14
   18f6a:	ff 08       	sbc	r15, r15
   18f6c:	35 e0       	ldi	r19, 0x05	; 5
   18f6e:	cc 0c       	add	r12, r12
   18f70:	dd 1c       	adc	r13, r13
   18f72:	ee 1c       	adc	r14, r14
   18f74:	ff 1c       	adc	r15, r15
   18f76:	3a 95       	dec	r19
   18f78:	d1 f7       	brne	.-12     	; 0x18f6e <lif_writedirindex+0x6e>
   18f7a:	c8 0e       	add	r12, r24
   18f7c:	d9 1e       	adc	r13, r25
   18f7e:	ea 1e       	adc	r14, r26
   18f80:	fb 1e       	adc	r15, r27
   18f82:	be 01       	movw	r22, r28
   18f84:	6f 5f       	subi	r22, 0xFF	; 255
   18f86:	7f 4f       	sbci	r23, 0xFF	; 255
   18f88:	c5 01       	movw	r24, r10
   18f8a:	b3 d8       	rcall	.-3738   	; 0x180f2 <lif_dir2str>
   18f8c:	00 e2       	ldi	r16, 0x20	; 32
   18f8e:	10 e0       	ldi	r17, 0x00	; 0
   18f90:	a7 01       	movw	r20, r14
   18f92:	96 01       	movw	r18, r12
   18f94:	be 01       	movw	r22, r28
   18f96:	6f 5f       	subi	r22, 0xFF	; 255
   18f98:	7f 4f       	sbci	r23, 0xFF	; 255
   18f9a:	c5 01       	movw	r24, r10
   18f9c:	0e 94 30 be 	call	0x17c60	; 0x17c60 <lif_write>
   18fa0:	31 e0       	ldi	r19, 0x01	; 1
   18fa2:	20 e0       	ldi	r18, 0x00	; 0
   18fa4:	80 97       	sbiw	r24, 0x20	; 32
   18fa6:	0c f4       	brge	.+2      	; 0x18faa <lif_writedirindex+0xaa>
   18fa8:	30 e0       	ldi	r19, 0x00	; 0
   18faa:	e3 2e       	mov	r14, r19
   18fac:	f2 2e       	mov	r15, r18
   18fae:	c7 01       	movw	r24, r14
   18fb0:	a0 96       	adiw	r28, 0x20	; 32
   18fb2:	ea e0       	ldi	r30, 0x0A	; 10
   18fb4:	0c 94 02 e0 	jmp	0x1c004	; 0x1c004 <__epilogue_restores__+0x10>

00018fb8 <lif_writedirEOF>:
   18fb8:	0f 93       	push	r16
   18fba:	1f 93       	push	r17
   18fbc:	cf 93       	push	r28
   18fbe:	df 93       	push	r29
   18fc0:	ec 01       	movw	r28, r24
   18fc2:	8b 01       	movw	r16, r22
   18fc4:	4f da       	rcall	.-2914   	; 0x18464 <lif_dir_clear>
   18fc6:	fe 01       	movw	r30, r28
   18fc8:	e6 5a       	subi	r30, 0xA6	; 166
   18fca:	ff 4f       	sbci	r31, 0xFF	; 255
   18fcc:	8f ef       	ldi	r24, 0xFF	; 255
   18fce:	9f ef       	ldi	r25, 0xFF	; 255
   18fd0:	91 83       	std	Z+1, r25	; 0x01
   18fd2:	80 83       	st	Z, r24
   18fd4:	1b a3       	std	Y+35, r17	; 0x23
   18fd6:	0a a3       	std	Y+34, r16	; 0x22
   18fd8:	b8 01       	movw	r22, r16
   18fda:	ce 01       	movw	r24, r28
   18fdc:	91 df       	rcall	.-222    	; 0x18f00 <lif_writedirindex>
   18fde:	df 91       	pop	r29
   18fe0:	cf 91       	pop	r28
   18fe2:	1f 91       	pop	r17
   18fe4:	0f 91       	pop	r16
   18fe6:	08 95       	ret

00018fe8 <lif_updatefree>:
   18fe8:	2f 92       	push	r2
   18fea:	3f 92       	push	r3
   18fec:	4f 92       	push	r4
   18fee:	5f 92       	push	r5
   18ff0:	6f 92       	push	r6
   18ff2:	7f 92       	push	r7
   18ff4:	8f 92       	push	r8
   18ff6:	af 92       	push	r10
   18ff8:	bf 92       	push	r11
   18ffa:	cf 92       	push	r12
   18ffc:	df 92       	push	r13
   18ffe:	ef 92       	push	r14
   19000:	ff 92       	push	r15
   19002:	0f 93       	push	r16
   19004:	1f 93       	push	r17
   19006:	cf 93       	push	r28
   19008:	df 93       	push	r29
   1900a:	cd b7       	in	r28, 0x3d	; 61
   1900c:	de b7       	in	r29, 0x3e	; 62
   1900e:	2f 97       	sbiw	r28, 0x0f	; 15
   19010:	0f b6       	in	r0, 0x3f	; 63
   19012:	f8 94       	cli
   19014:	de bf       	out	0x3e, r29	; 62
   19016:	0f be       	out	0x3f, r0	; 63
   19018:	cd bf       	out	0x3d, r28	; 61
   1901a:	9f 87       	std	Y+15, r25	; 0x0f
   1901c:	8e 87       	std	Y+14, r24	; 0x0e
   1901e:	fc 01       	movw	r30, r24
   19020:	24 84       	ldd	r2, Z+12	; 0x0c
   19022:	35 84       	ldd	r3, Z+13	; 0x0d
   19024:	46 84       	ldd	r4, Z+14	; 0x0e
   19026:	57 84       	ldd	r5, Z+15	; 0x0f
   19028:	80 89       	ldd	r24, Z+16	; 0x10
   1902a:	91 89       	ldd	r25, Z+17	; 0x11
   1902c:	a2 89       	ldd	r26, Z+18	; 0x12
   1902e:	b3 89       	ldd	r27, Z+19	; 0x13
   19030:	80 8f       	std	Z+24, r24	; 0x18
   19032:	91 8f       	std	Z+25, r25	; 0x19
   19034:	a2 8f       	std	Z+26, r26	; 0x1a
   19036:	b3 8f       	std	Z+27, r27	; 0x1b
   19038:	14 8a       	std	Z+20, r1	; 0x14
   1903a:	15 8a       	std	Z+21, r1	; 0x15
   1903c:	16 8a       	std	Z+22, r1	; 0x16
   1903e:	17 8a       	std	Z+23, r1	; 0x17
   19040:	17 8e       	std	Z+31, r1	; 0x1f
   19042:	16 8e       	std	Z+30, r1	; 0x1e
   19044:	15 8e       	std	Z+29, r1	; 0x1d
   19046:	14 8e       	std	Z+28, r1	; 0x1c
   19048:	11 a2       	std	Z+33, r1	; 0x21
   1904a:	10 a2       	std	Z+32, r1	; 0x20
   1904c:	13 a2       	std	Z+35, r1	; 0x23
   1904e:	12 a2       	std	Z+34, r1	; 0x22
   19050:	cc 24       	eor	r12, r12
   19052:	c3 94       	inc	r12
   19054:	d1 2c       	mov	r13, r1
   19056:	0f ef       	ldi	r16, 0xFF	; 255
   19058:	1f ef       	ldi	r17, 0xFF	; 255
   1905a:	e6 5a       	subi	r30, 0xA6	; 166
   1905c:	ff 4f       	sbci	r31, 0xFF	; 255
   1905e:	f9 87       	std	Y+9, r31	; 0x09
   19060:	e8 87       	std	Y+8, r30	; 0x08
   19062:	ae 84       	ldd	r10, Y+14	; 0x0e
   19064:	bf 84       	ldd	r11, Y+15	; 0x0f
   19066:	fc e5       	ldi	r31, 0x5C	; 92
   19068:	af 0e       	add	r10, r31
   1906a:	b1 1c       	adc	r11, r1
   1906c:	8e 85       	ldd	r24, Y+14	; 0x0e
   1906e:	9f 85       	ldd	r25, Y+15	; 0x0f
   19070:	80 5a       	subi	r24, 0xA0	; 160
   19072:	9f 4f       	sbci	r25, 0xFF	; 255
   19074:	9b 87       	std	Y+11, r25	; 0x0b
   19076:	8a 87       	std	Y+10, r24	; 0x0a
   19078:	ee 85       	ldd	r30, Y+14	; 0x0e
   1907a:	ff 85       	ldd	r31, Y+15	; 0x0f
   1907c:	e1 5b       	subi	r30, 0xB1	; 177
   1907e:	ff 4f       	sbci	r31, 0xFF	; 255
   19080:	fd 87       	std	Y+13, r31	; 0x0d
   19082:	ec 87       	std	Y+12, r30	; 0x0c
   19084:	88 e1       	ldi	r24, 0x18	; 24
   19086:	97 e3       	ldi	r25, 0x37	; 55
   19088:	3c 01       	movw	r6, r24
   1908a:	81 2c       	mov	r8, r1
   1908c:	76 01       	movw	r14, r12
   1908e:	21 e0       	ldi	r18, 0x01	; 1
   19090:	e2 1a       	sub	r14, r18
   19092:	f1 08       	sbc	r15, r1
   19094:	b7 01       	movw	r22, r14
   19096:	8e 85       	ldd	r24, Y+14	; 0x0e
   19098:	9f 85       	ldd	r25, Y+15	; 0x0f
   1909a:	cb de       	rcall	.-618    	; 0x18e32 <lif_readdirindex>
   1909c:	89 2b       	or	r24, r25
   1909e:	19 f4       	brne	.+6      	; 0x190a6 <lif_updatefree+0xbe>
   190a0:	80 e0       	ldi	r24, 0x00	; 0
   190a2:	90 e0       	ldi	r25, 0x00	; 0
   190a4:	91 c0       	rjmp	.+290    	; 0x191c8 <lif_updatefree+0x1e0>
   190a6:	e8 85       	ldd	r30, Y+8	; 0x08
   190a8:	f9 85       	ldd	r31, Y+9	; 0x09
   190aa:	80 81       	ld	r24, Z
   190ac:	91 81       	ldd	r25, Z+1	; 0x01
   190ae:	8f 3f       	cpi	r24, 0xFF	; 255
   190b0:	ff ef       	ldi	r31, 0xFF	; 255
   190b2:	9f 07       	cpc	r25, r31
   190b4:	c1 f4       	brne	.+48     	; 0x190e6 <lif_updatefree+0xfe>
   190b6:	ee 85       	ldd	r30, Y+14	; 0x0e
   190b8:	ff 85       	ldd	r31, Y+15	; 0x0f
   190ba:	0f 3f       	cpi	r16, 0xFF	; 255
   190bc:	2f ef       	ldi	r18, 0xFF	; 255
   190be:	12 07       	cpc	r17, r18
   190c0:	09 f4       	brne	.+2      	; 0x190c4 <lif_updatefree+0xdc>
   190c2:	78 c0       	rjmp	.+240    	; 0x191b4 <lif_updatefree+0x1cc>
   190c4:	13 a3       	std	Z+35, r17	; 0x23
   190c6:	02 a3       	std	Z+34, r16	; 0x22
   190c8:	e0 1a       	sub	r14, r16
   190ca:	f1 0a       	sbc	r15, r17
   190cc:	86 8d       	ldd	r24, Z+30	; 0x1e
   190ce:	97 8d       	ldd	r25, Z+31	; 0x1f
   190d0:	8e 19       	sub	r24, r14
   190d2:	9f 09       	sbc	r25, r15
   190d4:	97 8f       	std	Z+31, r25	; 0x1f
   190d6:	86 8f       	std	Z+30, r24	; 0x1e
   190d8:	b8 01       	movw	r22, r16
   190da:	cf 01       	movw	r24, r30
   190dc:	6d df       	rcall	.-294    	; 0x18fb8 <lif_writedirEOF>
   190de:	89 2b       	or	r24, r25
   190e0:	09 f0       	breq	.+2      	; 0x190e4 <lif_updatefree+0xfc>
   190e2:	6a c0       	rjmp	.+212    	; 0x191b8 <lif_updatefree+0x1d0>
   190e4:	dd cf       	rjmp	.-70     	; 0x190a0 <lif_updatefree+0xb8>
   190e6:	89 2b       	or	r24, r25
   190e8:	81 f4       	brne	.+32     	; 0x1910a <lif_updatefree+0x122>
   190ea:	0f 3f       	cpi	r16, 0xFF	; 255
   190ec:	ff ef       	ldi	r31, 0xFF	; 255
   190ee:	1f 07       	cpc	r17, r31
   190f0:	09 f4       	brne	.+2      	; 0x190f4 <lif_updatefree+0x10c>
   190f2:	87 01       	movw	r16, r14
   190f4:	ee 85       	ldd	r30, Y+14	; 0x0e
   190f6:	ff 85       	ldd	r31, Y+15	; 0x0f
   190f8:	86 8d       	ldd	r24, Z+30	; 0x1e
   190fa:	97 8d       	ldd	r25, Z+31	; 0x1f
   190fc:	01 96       	adiw	r24, 0x01	; 1
   190fe:	97 8f       	std	Z+31, r25	; 0x1f
   19100:	86 8f       	std	Z+30, r24	; 0x1e
   19102:	ff ef       	ldi	r31, 0xFF	; 255
   19104:	cf 1a       	sub	r12, r31
   19106:	df 0a       	sbc	r13, r31
   19108:	c1 cf       	rjmp	.-126    	; 0x1908c <lif_updatefree+0xa4>
   1910a:	f5 01       	movw	r30, r10
   1910c:	80 81       	ld	r24, Z
   1910e:	91 81       	ldd	r25, Z+1	; 0x01
   19110:	a2 81       	ldd	r26, Z+2	; 0x02
   19112:	b3 81       	ldd	r27, Z+3	; 0x03
   19114:	82 15       	cp	r24, r2
   19116:	93 05       	cpc	r25, r3
   19118:	a4 05       	cpc	r26, r4
   1911a:	b5 05       	cpc	r27, r5
   1911c:	b8 f4       	brcc	.+46     	; 0x1914c <lif_updatefree+0x164>
   1911e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   19122:	81 ff       	sbrs	r24, 1
   19124:	13 c0       	rjmp	.+38     	; 0x1914c <lif_updatefree+0x164>
   19126:	8c 85       	ldd	r24, Y+12	; 0x0c
   19128:	9d 85       	ldd	r25, Y+13	; 0x0d
   1912a:	ed b7       	in	r30, 0x3d	; 61
   1912c:	fe b7       	in	r31, 0x3e	; 62
   1912e:	97 83       	std	Z+7, r25	; 0x07
   19130:	86 83       	std	Z+6, r24	; 0x06
   19132:	ee 85       	ldd	r30, Y+14	; 0x0e
   19134:	ff 85       	ldd	r31, Y+15	; 0x0f
   19136:	80 81       	ld	r24, Z
   19138:	91 81       	ldd	r25, Z+1	; 0x01
   1913a:	ed b7       	in	r30, 0x3d	; 61
   1913c:	fe b7       	in	r31, 0x3e	; 62
   1913e:	95 83       	std	Z+5, r25	; 0x05
   19140:	84 83       	std	Z+4, r24	; 0x04
   19142:	61 82       	std	Z+1, r6	; 0x01
   19144:	72 82       	std	Z+2, r7	; 0x02
   19146:	83 82       	std	Z+3, r8	; 0x03
   19148:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   1914c:	ea 85       	ldd	r30, Y+10	; 0x0a
   1914e:	fb 85       	ldd	r31, Y+11	; 0x0b
   19150:	80 81       	ld	r24, Z
   19152:	91 81       	ldd	r25, Z+1	; 0x01
   19154:	a2 81       	ldd	r26, Z+2	; 0x02
   19156:	b3 81       	ldd	r27, Z+3	; 0x03
   19158:	ee 85       	ldd	r30, Y+14	; 0x0e
   1915a:	ff 85       	ldd	r31, Y+15	; 0x0f
   1915c:	44 89       	ldd	r20, Z+20	; 0x14
   1915e:	55 89       	ldd	r21, Z+21	; 0x15
   19160:	66 89       	ldd	r22, Z+22	; 0x16
   19162:	77 89       	ldd	r23, Z+23	; 0x17
   19164:	48 0f       	add	r20, r24
   19166:	59 1f       	adc	r21, r25
   19168:	6a 1f       	adc	r22, r26
   1916a:	7b 1f       	adc	r23, r27
   1916c:	44 8b       	std	Z+20, r20	; 0x14
   1916e:	55 8b       	std	Z+21, r21	; 0x15
   19170:	66 8b       	std	Z+22, r22	; 0x16
   19172:	77 8b       	std	Z+23, r23	; 0x17
   19174:	40 8d       	ldd	r20, Z+24	; 0x18
   19176:	51 8d       	ldd	r21, Z+25	; 0x19
   19178:	62 8d       	ldd	r22, Z+26	; 0x1a
   1917a:	73 8d       	ldd	r23, Z+27	; 0x1b
   1917c:	48 1b       	sub	r20, r24
   1917e:	59 0b       	sbc	r21, r25
   19180:	6a 0b       	sbc	r22, r26
   19182:	7b 0b       	sbc	r23, r27
   19184:	40 8f       	std	Z+24, r20	; 0x18
   19186:	51 8f       	std	Z+25, r21	; 0x19
   19188:	62 8f       	std	Z+26, r22	; 0x1a
   1918a:	73 8f       	std	Z+27, r23	; 0x1b
   1918c:	24 8d       	ldd	r18, Z+28	; 0x1c
   1918e:	35 8d       	ldd	r19, Z+29	; 0x1d
   19190:	2f 5f       	subi	r18, 0xFF	; 255
   19192:	3f 4f       	sbci	r19, 0xFF	; 255
   19194:	35 8f       	std	Z+29, r19	; 0x1d
   19196:	24 8f       	std	Z+28, r18	; 0x1c
   19198:	f5 01       	movw	r30, r10
   1919a:	40 81       	ld	r20, Z
   1919c:	51 81       	ldd	r21, Z+1	; 0x01
   1919e:	62 81       	ldd	r22, Z+2	; 0x02
   191a0:	73 81       	ldd	r23, Z+3	; 0x03
   191a2:	1c 01       	movw	r2, r24
   191a4:	2d 01       	movw	r4, r26
   191a6:	24 0e       	add	r2, r20
   191a8:	35 1e       	adc	r3, r21
   191aa:	46 1e       	adc	r4, r22
   191ac:	57 1e       	adc	r5, r23
   191ae:	0f ef       	ldi	r16, 0xFF	; 255
   191b0:	1f ef       	ldi	r17, 0xFF	; 255
   191b2:	a7 cf       	rjmp	.-178    	; 0x19102 <lif_updatefree+0x11a>
   191b4:	f3 a2       	std	Z+35, r15	; 0x23
   191b6:	e2 a2       	std	Z+34, r14	; 0x22
   191b8:	8f ef       	ldi	r24, 0xFF	; 255
   191ba:	9f ef       	ldi	r25, 0xFF	; 255
   191bc:	ee 85       	ldd	r30, Y+14	; 0x0e
   191be:	ff 85       	ldd	r31, Y+15	; 0x0f
   191c0:	91 a3       	std	Z+33, r25	; 0x21
   191c2:	80 a3       	std	Z+32, r24	; 0x20
   191c4:	8e 85       	ldd	r24, Y+14	; 0x0e
   191c6:	9f 85       	ldd	r25, Y+15	; 0x0f
   191c8:	2f 96       	adiw	r28, 0x0f	; 15
   191ca:	0f b6       	in	r0, 0x3f	; 63
   191cc:	f8 94       	cli
   191ce:	de bf       	out	0x3e, r29	; 62
   191d0:	0f be       	out	0x3f, r0	; 63
   191d2:	cd bf       	out	0x3d, r28	; 61
   191d4:	df 91       	pop	r29
   191d6:	cf 91       	pop	r28
   191d8:	1f 91       	pop	r17
   191da:	0f 91       	pop	r16
   191dc:	ff 90       	pop	r15
   191de:	ef 90       	pop	r14
   191e0:	df 90       	pop	r13
   191e2:	cf 90       	pop	r12
   191e4:	bf 90       	pop	r11
   191e6:	af 90       	pop	r10
   191e8:	8f 90       	pop	r8
   191ea:	7f 90       	pop	r7
   191ec:	6f 90       	pop	r6
   191ee:	5f 90       	pop	r5
   191f0:	4f 90       	pop	r4
   191f2:	3f 90       	pop	r3
   191f4:	2f 90       	pop	r2
   191f6:	08 95       	ret

000191f8 <lif_create_volume>:
/// @param[in] dirstart:   Directory start sector
/// @param[in] dirsectors: Directory sectors
/// @return pointer to LIF structure
MEMSPACE
lif_t *lif_create_volume(char *imagename, char *liflabel, long dirstart, long dirsectors, long filesectors)
{
   191f8:	a9 e2       	ldi	r26, 0x29	; 41
   191fa:	b1 e0       	ldi	r27, 0x01	; 1
   191fc:	e2 e0       	ldi	r30, 0x02	; 2
   191fe:	f9 ec       	ldi	r31, 0xC9	; 201
   19200:	0c 94 de df 	jmp	0x1bfbc	; 0x1bfbc <__prologue_saves__>
   19204:	4c 01       	movw	r8, r24
   19206:	3b 01       	movw	r6, r22
   19208:	19 01       	movw	r2, r18
   1920a:	2a 01       	movw	r4, r20
   1920c:	ca 5d       	subi	r28, 0xDA	; 218
   1920e:	de 4f       	sbci	r29, 0xFE	; 254
   19210:	e8 82       	st	Y, r14
   19212:	f9 82       	std	Y+1, r15	; 0x01
   19214:	0a 83       	std	Y+2, r16	; 0x02
   19216:	1b 83       	std	Y+3, r17	; 0x03
   19218:	c6 52       	subi	r28, 0x26	; 38
   1921a:	d1 40       	sbci	r29, 0x01	; 1
   1921c:	c2 5e       	subi	r28, 0xE2	; 226
   1921e:	de 4f       	sbci	r29, 0xFE	; 254
   19220:	a8 82       	st	Y, r10
   19222:	b9 82       	std	Y+1, r11	; 0x01
   19224:	ca 82       	std	Y+2, r12	; 0x02
   19226:	db 82       	std	Y+3, r13	; 0x03
   19228:	ce 51       	subi	r28, 0x1E	; 30
   1922a:	d1 40       	sbci	r29, 0x01	; 1
    long i;
    long offset;
    long count;
    uint8_t buffer[LIF_SECTOR_SIZE];

    time_t t = time(NULL);
   1922c:	80 e0       	ldi	r24, 0x00	; 0
   1922e:	90 e0       	ldi	r25, 0x00	; 0
   19230:	0e 94 5e 37 	call	0x6ebc	; 0x6ebc <time>
   19234:	5b 01       	movw	r10, r22
   19236:	6c 01       	movw	r12, r24

    lif_t *LIF = lif_calloc(sizeof(lif_t)+4);
   19238:	64 e7       	ldi	r22, 0x74	; 116
   1923a:	70 e0       	ldi	r23, 0x00	; 0
   1923c:	80 e0       	ldi	r24, 0x00	; 0
   1923e:	90 e0       	ldi	r25, 0x00	; 0
   19240:	0e 94 f1 bc 	call	0x179e2	; 0x179e2 <lif_calloc>
   19244:	7c 01       	movw	r14, r24
    if(LIF == NULL)
   19246:	89 2b       	or	r24, r25
   19248:	09 f4       	brne	.+2      	; 0x1924c <lif_create_volume+0x54>
   1924a:	b6 c2       	rjmp	.+1388   	; 0x197b8 <lif_create_volume+0x5c0>
        return(NULL);

	printf("Creating:%s, Label:[%s], Directory Start %ld, Directory Size: %ld, File Sectors:%ld\n",
   1924c:	c2 5e       	subi	r28, 0xE2	; 226
   1924e:	de 4f       	sbci	r29, 0xFE	; 254
   19250:	28 81       	ld	r18, Y
   19252:	39 81       	ldd	r19, Y+1	; 0x01
   19254:	4a 81       	ldd	r20, Y+2	; 0x02
   19256:	5b 81       	ldd	r21, Y+3	; 0x03
   19258:	ce 51       	subi	r28, 0x1E	; 30
   1925a:	d1 40       	sbci	r29, 0x01	; 1
   1925c:	ed b7       	in	r30, 0x3d	; 61
   1925e:	fe b7       	in	r31, 0x3e	; 62
   19260:	20 8b       	std	Z+16, r18	; 0x10
   19262:	31 8b       	std	Z+17, r19	; 0x11
   19264:	42 8b       	std	Z+18, r20	; 0x12
   19266:	53 8b       	std	Z+19, r21	; 0x13
   19268:	ca 5d       	subi	r28, 0xDA	; 218
   1926a:	de 4f       	sbci	r29, 0xFE	; 254
   1926c:	28 81       	ld	r18, Y
   1926e:	39 81       	ldd	r19, Y+1	; 0x01
   19270:	4a 81       	ldd	r20, Y+2	; 0x02
   19272:	5b 81       	ldd	r21, Y+3	; 0x03
   19274:	c6 52       	subi	r28, 0x26	; 38
   19276:	d1 40       	sbci	r29, 0x01	; 1
   19278:	24 87       	std	Z+12, r18	; 0x0c
   1927a:	35 87       	std	Z+13, r19	; 0x0d
   1927c:	46 87       	std	Z+14, r20	; 0x0e
   1927e:	57 87       	std	Z+15, r21	; 0x0f
   19280:	20 86       	std	Z+8, r2	; 0x08
   19282:	31 86       	std	Z+9, r3	; 0x09
   19284:	42 86       	std	Z+10, r4	; 0x0a
   19286:	53 86       	std	Z+11, r5	; 0x0b
   19288:	77 82       	std	Z+7, r7	; 0x07
   1928a:	66 82       	std	Z+6, r6	; 0x06
   1928c:	95 82       	std	Z+5, r9	; 0x05
   1928e:	84 82       	std	Z+4, r8	; 0x04
   19290:	83 ef       	ldi	r24, 0xF3	; 243
   19292:	97 e3       	ldi	r25, 0x37	; 55
   19294:	a0 e0       	ldi	r26, 0x00	; 0
   19296:	81 83       	std	Z+1, r24	; 0x01
   19298:	92 83       	std	Z+2, r25	; 0x02
   1929a:	a3 83       	std	Z+3, r26	; 0x03
   1929c:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
		imagename, liflabel, dirstart, dirsectors, filesectors );

    if(debuglevel & LIF_DEBUG)
   192a0:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   192a4:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   192a8:	92 ff       	sbrs	r25, 2
   192aa:	04 c0       	rjmp	.+8      	; 0x192b4 <lif_create_volume+0xbc>
        lif_dump_vol(LIF,"lif_create_volume");
   192ac:	6a e1       	ldi	r22, 0x1A	; 26
   192ae:	76 e1       	ldi	r23, 0x16	; 22
   192b0:	c7 01       	movw	r24, r14
    
    lif_image_clear(LIF);
   192b2:	e7 d8       	rcall	.-3634   	; 0x18482 <lif_dump_vol>
   192b4:	c7 01       	movw	r24, r14

    // Initialize volume header
    LIF->VOL.LIFid = 0x8000;
   192b6:	d0 d8       	rcall	.-3680   	; 0x18458 <lif_image_clear>
   192b8:	80 e0       	ldi	r24, 0x00	; 0
   192ba:	90 e8       	ldi	r25, 0x80	; 128
   192bc:	f7 01       	movw	r30, r14
   192be:	95 a3       	std	Z+37, r25	; 0x25
    lif_fixname(LIF->VOL.Label, liflabel, 6);
   192c0:	84 a3       	std	Z+36, r24	; 0x24
   192c2:	46 e0       	ldi	r20, 0x06	; 6
   192c4:	50 e0       	ldi	r21, 0x00	; 0
   192c6:	b3 01       	movw	r22, r6
   192c8:	c7 01       	movw	r24, r14
   192ca:	86 96       	adiw	r24, 0x26	; 38
   192cc:	0e 94 30 bf 	call	0x17e60	; 0x17e60 <lif_fixname>
    LIF->VOL.DirStartSector = dirstart;
   192d0:	f7 01       	movw	r30, r14
   192d2:	25 a6       	std	Z+45, r2	; 0x2d
   192d4:	36 a6       	std	Z+46, r3	; 0x2e
   192d6:	47 a6       	std	Z+47, r4	; 0x2f
    LIF->VOL.DirSectors = dirsectors;
   192d8:	50 aa       	std	Z+48, r5	; 0x30
   192da:	ca 5d       	subi	r28, 0xDA	; 218
   192dc:	de 4f       	sbci	r29, 0xFE	; 254
   192de:	28 81       	ld	r18, Y
   192e0:	39 81       	ldd	r19, Y+1	; 0x01
   192e2:	4a 81       	ldd	r20, Y+2	; 0x02
   192e4:	5b 81       	ldd	r21, Y+3	; 0x03
   192e6:	c6 52       	subi	r28, 0x26	; 38
   192e8:	d1 40       	sbci	r29, 0x01	; 1
   192ea:	25 ab       	std	Z+53, r18	; 0x35
   192ec:	36 ab       	std	Z+54, r19	; 0x36
   192ee:	47 ab       	std	Z+55, r20	; 0x37
    LIF->VOL.System3000LIFid = 0x1000;
   192f0:	50 af       	std	Z+56, r21	; 0x38
   192f2:	80 e0       	ldi	r24, 0x00	; 0
   192f4:	90 e1       	ldi	r25, 0x10	; 16
   192f6:	92 ab       	std	Z+50, r25	; 0x32
    LIF->VOL.tracks_per_side = 0;
   192f8:	81 ab       	std	Z+49, r24	; 0x31
   192fa:	fd 96       	adiw	r30, 0x3d	; 61
   192fc:	10 82       	st	Z, r1
   192fe:	11 82       	std	Z+1, r1	; 0x01
   19300:	12 82       	std	Z+2, r1	; 0x02
    LIF->VOL.sides = 0;
   19302:	13 82       	std	Z+3, r1	; 0x03
   19304:	34 96       	adiw	r30, 0x04	; 4
   19306:	10 82       	st	Z, r1
   19308:	11 82       	std	Z+1, r1	; 0x01
   1930a:	12 82       	std	Z+2, r1	; 0x02
    LIF->VOL.sectors_per_track = 0;
   1930c:	13 82       	std	Z+3, r1	; 0x03
   1930e:	34 96       	adiw	r30, 0x04	; 4
   19310:	10 82       	st	Z, r1
   19312:	11 82       	std	Z+1, r1	; 0x01
   19314:	12 82       	std	Z+2, r1	; 0x02
    ///@brief 0 causes time to return the current date

    lif_time2lifbcd(t, LIF->VOL.date);
   19316:	13 82       	std	Z+3, r1	; 0x03
   19318:	a7 01       	movw	r20, r14
   1931a:	47 5b       	subi	r20, 0xB7	; 183
   1931c:	5f 4f       	sbci	r21, 0xFF	; 255
   1931e:	c6 01       	movw	r24, r12
   19320:	b5 01       	movw	r22, r10
   19322:	0e 94 55 c1 	call	0x182aa	; 0x182aa <lif_time2lifbcd>

    // update LIF headers
    LIF->name = lif_stralloc(imagename);
   19326:	c4 01       	movw	r24, r8
   19328:	0e 94 3c bd 	call	0x17a78	; 0x17a78 <lif_stralloc>
   1932c:	d7 01       	movw	r26, r14
   1932e:	8d 93       	st	X+, r24
    if(LIF->name == NULL)
   19330:	9c 93       	st	X, r25
   19332:	89 2b       	or	r24, r25
   19334:	09 f4       	brne	.+2      	; 0x19338 <lif_create_volume+0x140>
        lif_close_volume(LIF);
        return(NULL);
    }

    // Initilize all LIF headers
    LIF->filesectors = filesectors;
   19336:	35 c2       	rjmp	.+1130   	; 0x197a2 <lif_create_volume+0x5aa>
   19338:	c2 5e       	subi	r28, 0xE2	; 226
   1933a:	de 4f       	sbci	r29, 0xFE	; 254
   1933c:	28 81       	ld	r18, Y
   1933e:	39 81       	ldd	r19, Y+1	; 0x01
   19340:	4a 81       	ldd	r20, Y+2	; 0x02
   19342:	5b 81       	ldd	r21, Y+3	; 0x03
   19344:	ce 51       	subi	r28, 0x1E	; 30
   19346:	d1 40       	sbci	r29, 0x01	; 1
   19348:	f7 01       	movw	r30, r14
   1934a:	20 8b       	std	Z+16, r18	; 0x10
   1934c:	31 8b       	std	Z+17, r19	; 0x11
   1934e:	42 8b       	std	Z+18, r20	; 0x12
    LIF->filestart = dirstart + dirsectors;
   19350:	53 8b       	std	Z+19, r21	; 0x13
   19352:	ca 5d       	subi	r28, 0xDA	; 218
   19354:	de 4f       	sbci	r29, 0xFE	; 254
   19356:	88 81       	ld	r24, Y
   19358:	99 81       	ldd	r25, Y+1	; 0x01
   1935a:	aa 81       	ldd	r26, Y+2	; 0x02
   1935c:	bb 81       	ldd	r27, Y+3	; 0x03
   1935e:	c6 52       	subi	r28, 0x26	; 38
   19360:	d1 40       	sbci	r29, 0x01	; 1
   19362:	82 0d       	add	r24, r2
   19364:	93 1d       	adc	r25, r3
   19366:	a4 1d       	adc	r26, r4
   19368:	b5 1d       	adc	r27, r5
   1936a:	84 87       	std	Z+12, r24	; 0x0c
   1936c:	95 87       	std	Z+13, r25	; 0x0d
   1936e:	a6 87       	std	Z+14, r26	; 0x0e
    LIF->sectors = (LIF->filestart+LIF->filesectors);
   19370:	b7 87       	std	Z+15, r27	; 0x0f
   19372:	82 0f       	add	r24, r18
   19374:	93 1f       	adc	r25, r19
   19376:	a4 1f       	adc	r26, r20
   19378:	b5 1f       	adc	r27, r21
   1937a:	84 83       	std	Z+4, r24	; 0x04
   1937c:	95 83       	std	Z+5, r25	; 0x05
   1937e:	a6 83       	std	Z+6, r26	; 0x06
    LIF->imagebytes = LIF->sectors * (long)LIF_SECTOR_SIZE;
   19380:	b7 83       	std	Z+7, r27	; 0x07
   19382:	ba 2f       	mov	r27, r26
   19384:	a9 2f       	mov	r26, r25
   19386:	98 2f       	mov	r25, r24
   19388:	88 27       	eor	r24, r24
   1938a:	80 87       	std	Z+8, r24	; 0x08
   1938c:	91 87       	std	Z+9, r25	; 0x09
   1938e:	a2 87       	std	Z+10, r26	; 0x0a
    LIF->freesectors = LIF->filesectors;
   19390:	b3 87       	std	Z+11, r27	; 0x0b
   19392:	20 8f       	std	Z+24, r18	; 0x18
   19394:	31 8f       	std	Z+25, r19	; 0x19
   19396:	42 8f       	std	Z+26, r20	; 0x1a
    LIF->usedsectors = 0;
   19398:	53 8f       	std	Z+27, r21	; 0x1b
   1939a:	14 8a       	std	Z+20, r1	; 0x14
   1939c:	15 8a       	std	Z+21, r1	; 0x15
   1939e:	16 8a       	std	Z+22, r1	; 0x16
    LIF->files = 0;
   193a0:	17 8a       	std	Z+23, r1	; 0x17
   193a2:	15 8e       	std	Z+29, r1	; 0x1d
    LIF->purged = 0;
   193a4:	14 8e       	std	Z+28, r1	; 0x1c
   193a6:	17 8e       	std	Z+31, r1	; 0x1f
    LIF->dirindex = 0;
   193a8:	16 8e       	std	Z+30, r1	; 0x1e
   193aa:	11 a2       	std	Z+33, r1	; 0x21
    LIF->EOFindex = 0;
   193ac:	10 a2       	std	Z+32, r1	; 0x20
   193ae:	13 a2       	std	Z+35, r1	; 0x23

    memset(buffer,0,LIF_SECTOR_SIZE);
   193b0:	12 a2       	std	Z+34, r1	; 0x22
   193b2:	61 2c       	mov	r6, r1
   193b4:	77 24       	eor	r7, r7
   193b6:	73 94       	inc	r7
   193b8:	9e 01       	movw	r18, r28
   193ba:	2c 5e       	subi	r18, 0xEC	; 236
   193bc:	3f 4f       	sbci	r19, 0xFF	; 255
   193be:	49 01       	movw	r8, r18
   193c0:	d9 01       	movw	r26, r18
   193c2:	f3 01       	movw	r30, r6
   193c4:	1d 92       	st	X+, r1
   193c6:	31 97       	sbiw	r30, 0x01	; 1

    lif_vol2str(LIF,buffer);
   193c8:	e9 f7       	brne	.-6      	; 0x193c4 <lif_create_volume+0x1cc>
   193ca:	b9 01       	movw	r22, r18
   193cc:	c7 01       	movw	r24, r14
   193ce:	0e 94 6d bf 	call	0x17eda	; 0x17eda <lif_vol2str>

    // Write Volume header
    LIF->fp = lif_open(LIF->name,"wb+");
   193d2:	68 ee       	ldi	r22, 0xE8	; 232
   193d4:	78 e0       	ldi	r23, 0x08	; 8
   193d6:	d7 01       	movw	r26, r14
   193d8:	8d 91       	ld	r24, X+
   193da:	9c 91       	ld	r25, X
   193dc:	0e 94 5b bd 	call	0x17ab6	; 0x17ab6 <lif_open>
   193e0:	f7 01       	movw	r30, r14
   193e2:	93 83       	std	Z+3, r25	; 0x03
    if(LIF->fp == NULL)
   193e4:	82 83       	std	Z+2, r24	; 0x02
   193e6:	89 2b       	or	r24, r25
   193e8:	09 f4       	brne	.+2      	; 0x193ec <lif_create_volume+0x1f4>
    }

    offset = 0;
    count = 0;

    size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   193ea:	db c1       	rjmp	.+950    	; 0x197a2 <lif_create_volume+0x5aa>
   193ec:	00 e0       	ldi	r16, 0x00	; 0
   193ee:	11 e0       	ldi	r17, 0x01	; 1
   193f0:	20 e0       	ldi	r18, 0x00	; 0
   193f2:	30 e0       	ldi	r19, 0x00	; 0
   193f4:	a9 01       	movw	r20, r18
   193f6:	b4 01       	movw	r22, r8
   193f8:	c7 01       	movw	r24, r14
   193fa:	0e 94 30 be 	call	0x17c60	; 0x17c60 <lif_write>
   193fe:	9c 01       	movw	r18, r24
   19400:	99 0f       	add	r25, r25
   19402:	44 0b       	sbc	r20, r20
   19404:	55 0b       	sbc	r21, r21
   19406:	ca 5e       	subi	r28, 0xEA	; 234
   19408:	de 4f       	sbci	r29, 0xFE	; 254
   1940a:	28 83       	st	Y, r18
   1940c:	39 83       	std	Y+1, r19	; 0x01
   1940e:	4a 83       	std	Y+2, r20	; 0x02
   19410:	5b 83       	std	Y+3, r21	; 0x03
   19412:	c6 51       	subi	r28, 0x16	; 22

    if(size < LIF_SECTOR_SIZE)
   19414:	d1 40       	sbci	r29, 0x01	; 1
   19416:	2f 3f       	cpi	r18, 0xFF	; 255
   19418:	31 05       	cpc	r19, r1
   1941a:	41 05       	cpc	r20, r1
   1941c:	51 05       	cpc	r21, r1
   1941e:	09 f0       	breq	.+2      	; 0x19422 <lif_create_volume+0x22a>
   19420:	0c f4       	brge	.+2      	; 0x19424 <lif_create_volume+0x22c>
    }
    offset += size;
    ++count;


    memset(buffer,0,LIF_SECTOR_SIZE);
   19422:	bf c1       	rjmp	.+894    	; 0x197a2 <lif_create_volume+0x5aa>
   19424:	d4 01       	movw	r26, r8
   19426:	f3 01       	movw	r30, r6
   19428:	1d 92       	st	X+, r1
   1942a:	31 97       	sbiw	r30, 0x01	; 1

    // Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   1942c:	e9 f7       	brne	.-6      	; 0x19428 <lif_create_volume+0x230>
   1942e:	21 e0       	ldi	r18, 0x01	; 1
   19430:	30 e0       	ldi	r19, 0x00	; 0
   19432:	40 e0       	ldi	r20, 0x00	; 0
   19434:	50 e0       	ldi	r21, 0x00	; 0
   19436:	c6 5e       	subi	r28, 0xE6	; 230
   19438:	de 4f       	sbci	r29, 0xFE	; 254
   1943a:	28 83       	st	Y, r18
   1943c:	39 83       	std	Y+1, r19	; 0x01
   1943e:	4a 83       	std	Y+2, r20	; 0x02
   19440:	5b 83       	std	Y+3, r21	; 0x03
   19442:	ca 51       	subi	r28, 0x1A	; 26
   19444:	d1 40       	sbci	r29, 0x01	; 1
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
            printf("\tWrote: %ld\r", count);
   19446:	64 01       	movw	r12, r8
   19448:	86 ee       	ldi	r24, 0xE6	; 230
   1944a:	97 e3       	ldi	r25, 0x37	; 55
   1944c:	3c 01       	movw	r6, r24


    memset(buffer,0,LIF_SECTOR_SIZE);

    // Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   1944e:	81 2c       	mov	r8, r1
   19450:	c6 5e       	subi	r28, 0xE6	; 230
   19452:	de 4f       	sbci	r29, 0xFE	; 254
   19454:	88 81       	ld	r24, Y
   19456:	99 81       	ldd	r25, Y+1	; 0x01
   19458:	aa 81       	ldd	r26, Y+2	; 0x02
   1945a:	bb 81       	ldd	r27, Y+3	; 0x03
   1945c:	ca 51       	subi	r28, 0x1A	; 26
   1945e:	d1 40       	sbci	r29, 0x01	; 1
   19460:	82 15       	cp	r24, r2
   19462:	93 05       	cpc	r25, r3
   19464:	a4 05       	cpc	r26, r4
   19466:	b5 05       	cpc	r27, r5
   19468:	0c f0       	brlt	.+2      	; 0x1946c <lif_create_volume+0x274>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   1946a:	55 c0       	rjmp	.+170    	; 0x19516 <lif_create_volume+0x31e>
   1946c:	00 e0       	ldi	r16, 0x00	; 0
   1946e:	11 e0       	ldi	r17, 0x01	; 1
   19470:	ca 5e       	subi	r28, 0xEA	; 234
   19472:	de 4f       	sbci	r29, 0xFE	; 254
   19474:	28 81       	ld	r18, Y
   19476:	39 81       	ldd	r19, Y+1	; 0x01
   19478:	4a 81       	ldd	r20, Y+2	; 0x02
   1947a:	5b 81       	ldd	r21, Y+3	; 0x03
   1947c:	c6 51       	subi	r28, 0x16	; 22
   1947e:	d1 40       	sbci	r29, 0x01	; 1
   19480:	b6 01       	movw	r22, r12
   19482:	c7 01       	movw	r24, r14
   19484:	0e 94 30 be 	call	0x17c60	; 0x17c60 <lif_write>
   19488:	09 2e       	mov	r0, r25
   1948a:	00 0c       	add	r0, r0
   1948c:	aa 0b       	sbc	r26, r26
        if(size < LIF_SECTOR_SIZE)
   1948e:	bb 0b       	sbc	r27, r27
   19490:	8f 3f       	cpi	r24, 0xFF	; 255
   19492:	91 05       	cpc	r25, r1
   19494:	a1 05       	cpc	r26, r1
   19496:	b1 05       	cpc	r27, r1
   19498:	09 f0       	breq	.+2      	; 0x1949c <lif_create_volume+0x2a4>
   1949a:	0c f4       	brge	.+2      	; 0x1949e <lif_create_volume+0x2a6>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   1949c:	82 c1       	rjmp	.+772    	; 0x197a2 <lif_create_volume+0x5aa>
   1949e:	ca 5e       	subi	r28, 0xEA	; 234
   194a0:	de 4f       	sbci	r29, 0xFE	; 254
   194a2:	28 81       	ld	r18, Y
   194a4:	39 81       	ldd	r19, Y+1	; 0x01
   194a6:	4a 81       	ldd	r20, Y+2	; 0x02
   194a8:	5b 81       	ldd	r21, Y+3	; 0x03
   194aa:	c6 51       	subi	r28, 0x16	; 22
   194ac:	d1 40       	sbci	r29, 0x01	; 1
   194ae:	28 0f       	add	r18, r24
   194b0:	39 1f       	adc	r19, r25
   194b2:	4a 1f       	adc	r20, r26
   194b4:	5b 1f       	adc	r21, r27
   194b6:	ca 5e       	subi	r28, 0xEA	; 234
   194b8:	de 4f       	sbci	r29, 0xFE	; 254
   194ba:	28 83       	st	Y, r18
   194bc:	39 83       	std	Y+1, r19	; 0x01
   194be:	4a 83       	std	Y+2, r20	; 0x02
   194c0:	5b 83       	std	Y+3, r21	; 0x03
   194c2:	c6 51       	subi	r28, 0x16	; 22
            printf("\tWrote: %ld\r", count);
   194c4:	d1 40       	sbci	r29, 0x01	; 1
   194c6:	c6 5e       	subi	r28, 0xE6	; 230
   194c8:	de 4f       	sbci	r29, 0xFE	; 254
   194ca:	88 81       	ld	r24, Y
   194cc:	99 81       	ldd	r25, Y+1	; 0x01
   194ce:	aa 81       	ldd	r26, Y+2	; 0x02
   194d0:	bb 81       	ldd	r27, Y+3	; 0x03
   194d2:	ca 51       	subi	r28, 0x1A	; 26
   194d4:	d1 40       	sbci	r29, 0x01	; 1
   194d6:	ed b7       	in	r30, 0x3d	; 61
   194d8:	fe b7       	in	r31, 0x3e	; 62
   194da:	84 83       	std	Z+4, r24	; 0x04
   194dc:	95 83       	std	Z+5, r25	; 0x05
   194de:	a6 83       	std	Z+6, r26	; 0x06
   194e0:	b7 83       	std	Z+7, r27	; 0x07
   194e2:	61 82       	std	Z+1, r6	; 0x01
   194e4:	72 82       	std	Z+2, r7	; 0x02
   194e6:	83 82       	std	Z+3, r8	; 0x03
   194e8:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>


    memset(buffer,0,LIF_SECTOR_SIZE);

    // Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   194ec:	c6 5e       	subi	r28, 0xE6	; 230
   194ee:	de 4f       	sbci	r29, 0xFE	; 254
   194f0:	28 81       	ld	r18, Y
   194f2:	39 81       	ldd	r19, Y+1	; 0x01
   194f4:	4a 81       	ldd	r20, Y+2	; 0x02
   194f6:	5b 81       	ldd	r21, Y+3	; 0x03
   194f8:	ca 51       	subi	r28, 0x1A	; 26
   194fa:	d1 40       	sbci	r29, 0x01	; 1
   194fc:	2f 5f       	subi	r18, 0xFF	; 255
   194fe:	3f 4f       	sbci	r19, 0xFF	; 255
   19500:	4f 4f       	sbci	r20, 0xFF	; 255
   19502:	5f 4f       	sbci	r21, 0xFF	; 255
   19504:	c6 5e       	subi	r28, 0xE6	; 230
   19506:	de 4f       	sbci	r29, 0xFE	; 254
   19508:	28 83       	st	Y, r18
   1950a:	39 83       	std	Y+1, r19	; 0x01
   1950c:	4a 83       	std	Y+2, r20	; 0x02
   1950e:	5b 83       	std	Y+3, r21	; 0x03
   19510:	ca 51       	subi	r28, 0x1A	; 26
   19512:	d1 40       	sbci	r29, 0x01	; 1
            printf("\tWrote: %ld\r", count);
        ++count;
    }

    // Write Directory sectors
    lif_dir_clear(LIF);
   19514:	9d cf       	rjmp	.-198    	; 0x19450 <lif_create_volume+0x258>
   19516:	c7 01       	movw	r24, r14
   19518:	0e 94 32 c2 	call	0x18464	; 0x18464 <lif_dir_clear>
    LIF->DIR.FileType = 0xffff;
   1951c:	8f ef       	ldi	r24, 0xFF	; 255
   1951e:	9f ef       	ldi	r25, 0xFF	; 255
   19520:	f7 01       	movw	r30, r14
   19522:	e6 5a       	subi	r30, 0xA6	; 166
   19524:	ff 4f       	sbci	r31, 0xFF	; 255
   19526:	91 83       	std	Z+1, r25	; 0x01
   19528:	80 83       	st	Z, r24
   1952a:	46 01       	movw	r8, r12
   1952c:	6e 01       	movw	r12, r28
   1952e:	9c ee       	ldi	r25, 0xEC	; 236
   19530:	c9 1a       	sub	r12, r25
   19532:	9e ef       	ldi	r25, 0xFE	; 254

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);
   19534:	d9 0a       	sbc	r13, r25
   19536:	b4 01       	movw	r22, r8
   19538:	c7 01       	movw	r24, r14
   1953a:	0e 94 79 c0 	call	0x180f2	; 0x180f2 <lif_dir2str>
   1953e:	a0 e2       	ldi	r26, 0x20	; 32
   19540:	8a 0e       	add	r8, r26

    // Write Directory sectors
    lif_dir_clear(LIF);
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
   19542:	91 1c       	adc	r9, r1
   19544:	c8 14       	cp	r12, r8
   19546:	d9 04       	cpc	r13, r9
   19548:	b1 f7       	brne	.-20     	; 0x19536 <lif_create_volume+0x33e>
   1954a:	a1 2c       	mov	r10, r1
   1954c:	b1 2c       	mov	r11, r1
   1954e:	65 01       	movw	r12, r10
   19550:	fe 01       	movw	r30, r28
   19552:	74 96       	adiw	r30, 0x14	; 20
   19554:	cc 5e       	subi	r28, 0xEC	; 236
   19556:	de 4f       	sbci	r29, 0xFE	; 254
   19558:	f9 83       	std	Y+1, r31	; 0x01
   1955a:	e8 83       	st	Y, r30
   1955c:	c4 51       	subi	r28, 0x14	; 20
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        if((count % 100) == 0)
   1955e:	d1 40       	sbci	r29, 0x01	; 1
   19560:	84 e6       	ldi	r24, 0x64	; 100
   19562:	28 2e       	mov	r2, r24
   19564:	31 2c       	mov	r3, r1
   19566:	41 2c       	mov	r4, r1
            printf("\tWrote: %ld\r", count);
   19568:	51 2c       	mov	r5, r1
   1956a:	89 ed       	ldi	r24, 0xD9	; 217
   1956c:	97 e3       	ldi	r25, 0x37	; 55
   1956e:	3c 01       	movw	r6, r24
   19570:	81 2c       	mov	r8, r1
   19572:	c6 5e       	subi	r28, 0xE6	; 230
   19574:	de 4f       	sbci	r29, 0xFE	; 254
   19576:	28 81       	ld	r18, Y
   19578:	39 81       	ldd	r19, Y+1	; 0x01
   1957a:	4a 81       	ldd	r20, Y+2	; 0x02
   1957c:	5b 81       	ldd	r21, Y+3	; 0x03
   1957e:	ca 51       	subi	r28, 0x1A	; 26
   19580:	d1 40       	sbci	r29, 0x01	; 1
   19582:	2a 0d       	add	r18, r10
   19584:	3b 1d       	adc	r19, r11
   19586:	4c 1d       	adc	r20, r12
   19588:	5d 1d       	adc	r21, r13
   1958a:	ce 5d       	subi	r28, 0xDE	; 222
   1958c:	de 4f       	sbci	r29, 0xFE	; 254
   1958e:	28 83       	st	Y, r18
   19590:	39 83       	std	Y+1, r19	; 0x01
   19592:	4a 83       	std	Y+2, r20	; 0x02
   19594:	5b 83       	std	Y+3, r21	; 0x03
   19596:	c2 52       	subi	r28, 0x22	; 34
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);

    for(i=0;i<dirsectors;++i)
   19598:	d1 40       	sbci	r29, 0x01	; 1
   1959a:	ca 5d       	subi	r28, 0xDA	; 218
   1959c:	de 4f       	sbci	r29, 0xFE	; 254
   1959e:	88 81       	ld	r24, Y
   195a0:	99 81       	ldd	r25, Y+1	; 0x01
   195a2:	aa 81       	ldd	r26, Y+2	; 0x02
   195a4:	bb 81       	ldd	r27, Y+3	; 0x03
   195a6:	c6 52       	subi	r28, 0x26	; 38
   195a8:	d1 40       	sbci	r29, 0x01	; 1
   195aa:	a8 16       	cp	r10, r24
   195ac:	b9 06       	cpc	r11, r25
   195ae:	ca 06       	cpc	r12, r26
   195b0:	db 06       	cpc	r13, r27
   195b2:	0c f0       	brlt	.+2      	; 0x195b6 <lif_create_volume+0x3be>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   195b4:	58 c0       	rjmp	.+176    	; 0x19666 <lif_create_volume+0x46e>
   195b6:	00 e0       	ldi	r16, 0x00	; 0
   195b8:	11 e0       	ldi	r17, 0x01	; 1
   195ba:	ca 5e       	subi	r28, 0xEA	; 234
   195bc:	de 4f       	sbci	r29, 0xFE	; 254
   195be:	28 81       	ld	r18, Y
   195c0:	39 81       	ldd	r19, Y+1	; 0x01
   195c2:	4a 81       	ldd	r20, Y+2	; 0x02
   195c4:	5b 81       	ldd	r21, Y+3	; 0x03
   195c6:	c6 51       	subi	r28, 0x16	; 22
   195c8:	d1 40       	sbci	r29, 0x01	; 1
   195ca:	be 01       	movw	r22, r28
   195cc:	6c 5e       	subi	r22, 0xEC	; 236
   195ce:	7f 4f       	sbci	r23, 0xFF	; 255
   195d0:	c7 01       	movw	r24, r14
   195d2:	0e 94 30 be 	call	0x17c60	; 0x17c60 <lif_write>
   195d6:	09 2e       	mov	r0, r25
   195d8:	00 0c       	add	r0, r0
   195da:	aa 0b       	sbc	r26, r26
        if(size < LIF_SECTOR_SIZE)
   195dc:	bb 0b       	sbc	r27, r27
   195de:	8f 3f       	cpi	r24, 0xFF	; 255
   195e0:	91 05       	cpc	r25, r1
   195e2:	a1 05       	cpc	r26, r1
   195e4:	b1 05       	cpc	r27, r1
   195e6:	09 f0       	breq	.+2      	; 0x195ea <lif_create_volume+0x3f2>
   195e8:	0c f4       	brge	.+2      	; 0x195ec <lif_create_volume+0x3f4>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   195ea:	db c0       	rjmp	.+438    	; 0x197a2 <lif_create_volume+0x5aa>
   195ec:	ca 5e       	subi	r28, 0xEA	; 234
   195ee:	de 4f       	sbci	r29, 0xFE	; 254
   195f0:	28 81       	ld	r18, Y
   195f2:	39 81       	ldd	r19, Y+1	; 0x01
   195f4:	4a 81       	ldd	r20, Y+2	; 0x02
   195f6:	5b 81       	ldd	r21, Y+3	; 0x03
   195f8:	c6 51       	subi	r28, 0x16	; 22
   195fa:	d1 40       	sbci	r29, 0x01	; 1
   195fc:	28 0f       	add	r18, r24
   195fe:	39 1f       	adc	r19, r25
   19600:	4a 1f       	adc	r20, r26
   19602:	5b 1f       	adc	r21, r27
   19604:	ca 5e       	subi	r28, 0xEA	; 234
   19606:	de 4f       	sbci	r29, 0xFE	; 254
   19608:	28 83       	st	Y, r18
   1960a:	39 83       	std	Y+1, r19	; 0x01
   1960c:	4a 83       	std	Y+2, r20	; 0x02
   1960e:	5b 83       	std	Y+3, r21	; 0x03
   19610:	c6 51       	subi	r28, 0x16	; 22
        if((count % 100) == 0)
   19612:	d1 40       	sbci	r29, 0x01	; 1
   19614:	ce 5d       	subi	r28, 0xDE	; 222
   19616:	de 4f       	sbci	r29, 0xFE	; 254
   19618:	68 81       	ld	r22, Y
   1961a:	79 81       	ldd	r23, Y+1	; 0x01
   1961c:	8a 81       	ldd	r24, Y+2	; 0x02
   1961e:	9b 81       	ldd	r25, Y+3	; 0x03
   19620:	c2 52       	subi	r28, 0x22	; 34
   19622:	d1 40       	sbci	r29, 0x01	; 1
   19624:	a2 01       	movw	r20, r4
   19626:	91 01       	movw	r18, r2
   19628:	0e 94 93 df 	call	0x1bf26	; 0x1bf26 <__divmodsi4>
   1962c:	67 2b       	or	r22, r23
   1962e:	68 2b       	or	r22, r24
   19630:	69 2b       	or	r22, r25
            printf("\tWrote: %ld\r", count);
   19632:	99 f4       	brne	.+38     	; 0x1965a <lif_create_volume+0x462>
   19634:	ce 5d       	subi	r28, 0xDE	; 222
   19636:	de 4f       	sbci	r29, 0xFE	; 254
   19638:	88 81       	ld	r24, Y
   1963a:	99 81       	ldd	r25, Y+1	; 0x01
   1963c:	aa 81       	ldd	r26, Y+2	; 0x02
   1963e:	bb 81       	ldd	r27, Y+3	; 0x03
   19640:	c2 52       	subi	r28, 0x22	; 34
   19642:	d1 40       	sbci	r29, 0x01	; 1
   19644:	ed b7       	in	r30, 0x3d	; 61
   19646:	fe b7       	in	r31, 0x3e	; 62
   19648:	84 83       	std	Z+4, r24	; 0x04
   1964a:	95 83       	std	Z+5, r25	; 0x05
   1964c:	a6 83       	std	Z+6, r26	; 0x06
   1964e:	b7 83       	std	Z+7, r27	; 0x07
   19650:	61 82       	std	Z+1, r6	; 0x01
   19652:	72 82       	std	Z+2, r7	; 0x02
   19654:	83 82       	std	Z+3, r8	; 0x03
   19656:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);

    for(i=0;i<dirsectors;++i)
   1965a:	ff ef       	ldi	r31, 0xFF	; 255
   1965c:	af 1a       	sub	r10, r31
   1965e:	bf 0a       	sbc	r11, r31
   19660:	cf 0a       	sbc	r12, r31
   19662:	df 0a       	sbc	r13, r31
            printf("\tWrote: %ld\r", count);
        ++count;
    }

    // File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
   19664:	86 cf       	rjmp	.-244    	; 0x19572 <lif_create_volume+0x37a>
   19666:	80 e0       	ldi	r24, 0x00	; 0
   19668:	91 e0       	ldi	r25, 0x01	; 1
   1966a:	cc 5e       	subi	r28, 0xEC	; 236
   1966c:	de 4f       	sbci	r29, 0xFE	; 254
   1966e:	a8 81       	ld	r26, Y
   19670:	b9 81       	ldd	r27, Y+1	; 0x01
   19672:	c4 51       	subi	r28, 0x14	; 20
   19674:	d1 40       	sbci	r29, 0x01	; 1
   19676:	fc 01       	movw	r30, r24
   19678:	1d 92       	st	X+, r1
   1967a:	31 97       	sbiw	r30, 0x01	; 1
    for(i=0;i<filesectors;++i)
   1967c:	e9 f7       	brne	.-6      	; 0x19678 <lif_create_volume+0x480>
   1967e:	81 2c       	mov	r8, r1
   19680:	91 2c       	mov	r9, r1
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        if((count % 100) == 0)
            printf("\tWrote: %ld\r", count);
   19682:	54 01       	movw	r10, r8
   19684:	8c ec       	ldi	r24, 0xCC	; 204
   19686:	97 e3       	ldi	r25, 0x37	; 55
   19688:	9c 01       	movw	r18, r24
   1968a:	40 e0       	ldi	r20, 0x00	; 0
   1968c:	c6 5e       	subi	r28, 0xE6	; 230
   1968e:	de 4f       	sbci	r29, 0xFE	; 254
   19690:	28 83       	st	Y, r18
   19692:	39 83       	std	Y+1, r19	; 0x01
   19694:	4a 83       	std	Y+2, r20	; 0x02
   19696:	ca 51       	subi	r28, 0x1A	; 26
   19698:	d1 40       	sbci	r29, 0x01	; 1
   1969a:	ce 5d       	subi	r28, 0xDE	; 222
   1969c:	de 4f       	sbci	r29, 0xFE	; 254
   1969e:	48 80       	ld	r4, Y
   196a0:	59 80       	ldd	r5, Y+1	; 0x01
   196a2:	6a 80       	ldd	r6, Y+2	; 0x02
   196a4:	7b 80       	ldd	r7, Y+3	; 0x03
   196a6:	c2 52       	subi	r28, 0x22	; 34
   196a8:	d1 40       	sbci	r29, 0x01	; 1
   196aa:	48 0c       	add	r4, r8
   196ac:	59 1c       	adc	r5, r9
   196ae:	6a 1c       	adc	r6, r10
        ++count;
    }

    // File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
    for(i=0;i<filesectors;++i)
   196b0:	7b 1c       	adc	r7, r11
   196b2:	c2 5e       	subi	r28, 0xE2	; 226
   196b4:	de 4f       	sbci	r29, 0xFE	; 254
   196b6:	28 81       	ld	r18, Y
   196b8:	39 81       	ldd	r19, Y+1	; 0x01
   196ba:	4a 81       	ldd	r20, Y+2	; 0x02
   196bc:	5b 81       	ldd	r21, Y+3	; 0x03
   196be:	ce 51       	subi	r28, 0x1E	; 30
   196c0:	d1 40       	sbci	r29, 0x01	; 1
   196c2:	82 16       	cp	r8, r18
   196c4:	93 06       	cpc	r9, r19
   196c6:	a4 06       	cpc	r10, r20
   196c8:	b5 06       	cpc	r11, r21
   196ca:	0c f0       	brlt	.+2      	; 0x196ce <lif_create_volume+0x4d6>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   196cc:	53 c0       	rjmp	.+166    	; 0x19774 <lif_create_volume+0x57c>
   196ce:	00 e0       	ldi	r16, 0x00	; 0
   196d0:	11 e0       	ldi	r17, 0x01	; 1
   196d2:	ca 5e       	subi	r28, 0xEA	; 234
   196d4:	de 4f       	sbci	r29, 0xFE	; 254
   196d6:	28 81       	ld	r18, Y
   196d8:	39 81       	ldd	r19, Y+1	; 0x01
   196da:	4a 81       	ldd	r20, Y+2	; 0x02
   196dc:	5b 81       	ldd	r21, Y+3	; 0x03
   196de:	c6 51       	subi	r28, 0x16	; 22
   196e0:	d1 40       	sbci	r29, 0x01	; 1
   196e2:	be 01       	movw	r22, r28
   196e4:	6c 5e       	subi	r22, 0xEC	; 236
   196e6:	7f 4f       	sbci	r23, 0xFF	; 255
   196e8:	c7 01       	movw	r24, r14
   196ea:	0e 94 30 be 	call	0x17c60	; 0x17c60 <lif_write>
   196ee:	09 2e       	mov	r0, r25
   196f0:	00 0c       	add	r0, r0
   196f2:	aa 0b       	sbc	r26, r26
        if(size < LIF_SECTOR_SIZE)
   196f4:	bb 0b       	sbc	r27, r27
   196f6:	8f 3f       	cpi	r24, 0xFF	; 255
   196f8:	91 05       	cpc	r25, r1
   196fa:	a1 05       	cpc	r26, r1
   196fc:	b1 05       	cpc	r27, r1
   196fe:	09 f0       	breq	.+2      	; 0x19702 <lif_create_volume+0x50a>
   19700:	0c f4       	brge	.+2      	; 0x19704 <lif_create_volume+0x50c>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   19702:	4f c0       	rjmp	.+158    	; 0x197a2 <lif_create_volume+0x5aa>
   19704:	ca 5e       	subi	r28, 0xEA	; 234
   19706:	de 4f       	sbci	r29, 0xFE	; 254
   19708:	28 81       	ld	r18, Y
   1970a:	39 81       	ldd	r19, Y+1	; 0x01
   1970c:	4a 81       	ldd	r20, Y+2	; 0x02
   1970e:	5b 81       	ldd	r21, Y+3	; 0x03
   19710:	c6 51       	subi	r28, 0x16	; 22
   19712:	d1 40       	sbci	r29, 0x01	; 1
   19714:	28 0f       	add	r18, r24
   19716:	39 1f       	adc	r19, r25
   19718:	4a 1f       	adc	r20, r26
   1971a:	5b 1f       	adc	r21, r27
   1971c:	ca 5e       	subi	r28, 0xEA	; 234
   1971e:	de 4f       	sbci	r29, 0xFE	; 254
   19720:	28 83       	st	Y, r18
   19722:	39 83       	std	Y+1, r19	; 0x01
   19724:	4a 83       	std	Y+2, r20	; 0x02
   19726:	5b 83       	std	Y+3, r21	; 0x03
   19728:	c6 51       	subi	r28, 0x16	; 22
        if((count % 100) == 0)
   1972a:	d1 40       	sbci	r29, 0x01	; 1
   1972c:	c3 01       	movw	r24, r6
   1972e:	b2 01       	movw	r22, r4
   19730:	24 e6       	ldi	r18, 0x64	; 100
   19732:	30 e0       	ldi	r19, 0x00	; 0
   19734:	40 e0       	ldi	r20, 0x00	; 0
   19736:	50 e0       	ldi	r21, 0x00	; 0
   19738:	0e 94 93 df 	call	0x1bf26	; 0x1bf26 <__divmodsi4>
   1973c:	67 2b       	or	r22, r23
   1973e:	68 2b       	or	r22, r24
   19740:	69 2b       	or	r22, r25
            printf("\tWrote: %ld\r", count);
   19742:	91 f4       	brne	.+36     	; 0x19768 <lif_create_volume+0x570>
   19744:	ed b7       	in	r30, 0x3d	; 61
   19746:	fe b7       	in	r31, 0x3e	; 62
   19748:	44 82       	std	Z+4, r4	; 0x04
   1974a:	55 82       	std	Z+5, r5	; 0x05
   1974c:	66 82       	std	Z+6, r6	; 0x06
   1974e:	77 82       	std	Z+7, r7	; 0x07
   19750:	c6 5e       	subi	r28, 0xE6	; 230
   19752:	de 4f       	sbci	r29, 0xFE	; 254
   19754:	28 81       	ld	r18, Y
   19756:	39 81       	ldd	r19, Y+1	; 0x01
   19758:	4a 81       	ldd	r20, Y+2	; 0x02
   1975a:	ca 51       	subi	r28, 0x1A	; 26
   1975c:	d1 40       	sbci	r29, 0x01	; 1
   1975e:	21 83       	std	Z+1, r18	; 0x01
   19760:	32 83       	std	Z+2, r19	; 0x02
   19762:	43 83       	std	Z+3, r20	; 0x03
   19764:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
        ++count;
    }

    // File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
    for(i=0;i<filesectors;++i)
   19768:	ff ef       	ldi	r31, 0xFF	; 255
   1976a:	8f 1a       	sub	r8, r31
   1976c:	9f 0a       	sbc	r9, r31
   1976e:	af 0a       	sbc	r10, r31
   19770:	bf 0a       	sbc	r11, r31
        offset += size;
        if((count % 100) == 0)
            printf("\tWrote: %ld\r", count);
        ++count;
    }
    printf("\tWrote: %ld\n", count);
   19772:	93 cf       	rjmp	.-218    	; 0x1969a <lif_create_volume+0x4a2>
   19774:	ed b7       	in	r30, 0x3d	; 61
   19776:	fe b7       	in	r31, 0x3e	; 62
   19778:	44 82       	std	Z+4, r4	; 0x04
   1977a:	55 82       	std	Z+5, r5	; 0x05
   1977c:	66 82       	std	Z+6, r6	; 0x06
   1977e:	77 82       	std	Z+7, r7	; 0x07
   19780:	8f eb       	ldi	r24, 0xBF	; 191
   19782:	97 e3       	ldi	r25, 0x37	; 55
   19784:	a0 e0       	ldi	r26, 0x00	; 0
   19786:	81 83       	std	Z+1, r24	; 0x01
   19788:	92 83       	std	Z+2, r25	; 0x02
   1978a:	a3 83       	std	Z+3, r26	; 0x03
   1978c:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
/// @return void
MEMSPACE
void lif_rewinddir(lif_t *LIF)
{
    // Directory index
    LIF->dirindex = -1;
   19790:	8f ef       	ldi	r24, 0xFF	; 255
   19792:	9f ef       	ldi	r25, 0xFF	; 255
   19794:	f7 01       	movw	r30, r14
    printf("\tWrote: %ld\n", count);

    lif_rewinddir(LIF);

    // As a sanity check verify basic values
    if( !lif_check_volume(LIF) )
   19796:	91 a3       	std	Z+33, r25	; 0x21
   19798:	80 a3       	std	Z+32, r24	; 0x20
   1979a:	c7 01       	movw	r24, r14
   1979c:	38 d8       	rcall	.-3984   	; 0x1880e <lif_check_volume>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1979e:	89 2b       	or	r24, r25
   197a0:	19 f4       	brne	.+6      	; 0x197a8 <lif_create_volume+0x5b0>
   197a2:	c7 01       	movw	r24, r14
   197a4:	b8 da       	rcall	.-2704   	; 0x18d16 <lif_close_volume>
        lif_closedir(LIF);
        return(NULL);
    }

    // Scan directory and verify values
    if( !lif_updatefree(LIF))
   197a6:	08 c0       	rjmp	.+16     	; 0x197b8 <lif_create_volume+0x5c0>
   197a8:	c7 01       	movw	r24, r14
   197aa:	1e dc       	rcall	.-1988   	; 0x18fe8 <lif_updatefree>
   197ac:	6c 01       	movw	r12, r24
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   197ae:	89 2b       	or	r24, r25
   197b0:	31 f4       	brne	.+12     	; 0x197be <lif_create_volume+0x5c6>
   197b2:	c7 01       	movw	r24, r14

    // Scan directory and verify values
    if( !lif_updatefree(LIF))
    {
        lif_closedir(LIF);
        return(NULL);
   197b4:	b0 da       	rcall	.-2720   	; 0x18d16 <lif_close_volume>

    time_t t = time(NULL);

    lif_t *LIF = lif_calloc(sizeof(lif_t)+4);
    if(LIF == NULL)
        return(NULL);
   197b6:	04 c0       	rjmp	.+8      	; 0x197c0 <lif_create_volume+0x5c8>
   197b8:	c1 2c       	mov	r12, r1
   197ba:	d1 2c       	mov	r13, r1
   197bc:	01 c0       	rjmp	.+2      	; 0x197c0 <lif_create_volume+0x5c8>
        lif_closedir(LIF);
        return(NULL);
    }

    return(LIF);
}
   197be:	67 01       	movw	r12, r14
   197c0:	c6 01       	movw	r24, r12
   197c2:	c7 5d       	subi	r28, 0xD7	; 215
   197c4:	de 4f       	sbci	r29, 0xFE	; 254
   197c6:	e2 e1       	ldi	r30, 0x12	; 18
   197c8:	0c 94 fa df 	jmp	0x1bff4	; 0x1bff4 <__epilogue_restores__>

000197cc <lif_newdir>:
/// @param[in] *LIF: LIF pointer
/// @param[in] sectors: try to find specified free space
/// @return index or free record or -1 on error
MEMSPACE
int lif_newdir(lif_t *LIF, long sectors)
{
   197cc:	ad e1       	ldi	r26, 0x1D	; 29
   197ce:	b0 e0       	ldi	r27, 0x00	; 0
   197d0:	ec ee       	ldi	r30, 0xEC	; 236
   197d2:	fb ec       	ldi	r31, 0xCB	; 203
   197d4:	0c 94 de df 	jmp	0x1bfbc	; 0x1bfbc <__prologue_saves__>
   197d8:	9d 8f       	std	Y+29, r25	; 0x1d
   197da:	8c 8f       	std	Y+28, r24	; 0x1c
   197dc:	4a 01       	movw	r8, r20
   197de:	5b 01       	movw	r10, r22

    // Directory index
    index = 0;

    // Start of free space
    start = LIF->filestart;
   197e0:	fc 01       	movw	r30, r24
   197e2:	c4 84       	ldd	r12, Z+12	; 0x0c
   197e4:	d5 84       	ldd	r13, Z+13	; 0x0d
   197e6:	e6 84       	ldd	r14, Z+14	; 0x0e

    // Update all file information
    if(lif_updatefree(LIF) == NULL)
   197e8:	f7 84       	ldd	r15, Z+15	; 0x0f
   197ea:	fe db       	rcall	.-2052   	; 0x18fe8 <lif_updatefree>
   197ec:	ec 8d       	ldd	r30, Y+28	; 0x1c
   197ee:	fd 8d       	ldd	r31, Y+29	; 0x1d
   197f0:	40 8d       	ldd	r20, Z+24	; 0x18
   197f2:	51 8d       	ldd	r21, Z+25	; 0x19
   197f4:	62 8d       	ldd	r22, Z+26	; 0x1a
   197f6:	73 8d       	ldd	r23, Z+27	; 0x1b
   197f8:	89 2b       	or	r24, r25
    {
        printf("lif_newdir: not enough free space:[%ld] for size:[%ld]\n", (long)LIF->freesectors, (long) sectors);
   197fa:	99 f4       	brne	.+38     	; 0x19822 <lif_newdir+0x56>
   197fc:	ed b7       	in	r30, 0x3d	; 61
   197fe:	fe b7       	in	r31, 0x3e	; 62
   19800:	80 86       	std	Z+8, r8	; 0x08
   19802:	91 86       	std	Z+9, r9	; 0x09
   19804:	a2 86       	std	Z+10, r10	; 0x0a
   19806:	b3 86       	std	Z+11, r11	; 0x0b
   19808:	44 83       	std	Z+4, r20	; 0x04
   1980a:	55 83       	std	Z+5, r21	; 0x05
   1980c:	66 83       	std	Z+6, r22	; 0x06
   1980e:	77 83       	std	Z+7, r23	; 0x07
   19810:	80 ee       	ldi	r24, 0xE0	; 224
   19812:	96 e3       	ldi	r25, 0x36	; 54
   19814:	a0 e0       	ldi	r26, 0x00	; 0
   19816:	81 83       	std	Z+1, r24	; 0x01
   19818:	92 83       	std	Z+2, r25	; 0x02
   1981a:	a3 83       	std	Z+3, r26	; 0x03
   1981c:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
        return(-1);
    }

    // Not enough room ?
    if(sectors > (long)LIF->freesectors)
   19820:	2f c1       	rjmp	.+606    	; 0x19a80 <lif_newdir+0x2b4>
   19822:	48 15       	cp	r20, r8
   19824:	59 05       	cpc	r21, r9
   19826:	6a 05       	cpc	r22, r10
   19828:	7b 05       	cpc	r23, r11
   1982a:	c4 f0       	brlt	.+48     	; 0x1985c <lif_newdir+0x90>
   1982c:	44 24       	eor	r4, r4
   1982e:	43 94       	inc	r4
   19830:	51 2c       	mov	r5, r1
   19832:	61 2c       	mov	r6, r1
#endif
            break;
        }

        // We hit the EOF record
        if(LIF->DIR.FileType == 0xffff)
   19834:	71 2c       	mov	r7, r1
   19836:	8c 8d       	ldd	r24, Y+28	; 0x1c
   19838:	9d 8d       	ldd	r25, Y+29	; 0x1d
   1983a:	86 5a       	subi	r24, 0xA6	; 166
   1983c:	9f 4f       	sbci	r25, 0xFF	; 255
   1983e:	9d 8b       	std	Y+21, r25	; 0x15
   19840:	8c 8b       	std	Y+20, r24	; 0x14
   19842:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19844:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19846:	e4 5a       	subi	r30, 0xA4	; 164
   19848:	ff 4f       	sbci	r31, 0xFF	; 255
   1984a:	fb 8b       	std	Y+19, r31	; 0x13
                freestate = 0;  // Try again
        }
        
        // Computed start of next record
        // Note: MUST be <= actual start of next VALID record or we have overlapping records!
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   1984c:	ea 8b       	std	Y+18, r30	; 0x12
   1984e:	8c 8d       	ldd	r24, Y+28	; 0x1c
   19850:	9d 8d       	ldd	r25, Y+29	; 0x1d
   19852:	80 5a       	subi	r24, 0xA0	; 160
   19854:	9f 4f       	sbci	r25, 0xFF	; 255
   19856:	9f 8b       	std	Y+23, r25	; 0x17
   19858:	8e 8b       	std	Y+22, r24	; 0x16
    }

    // Not enough room ?
    if(sectors > (long)LIF->freesectors)
    {
        printf("lif_newdir: not enough free space:[%ld]\n", (long)LIF->freesectors);
   1985a:	21 c0       	rjmp	.+66     	; 0x1989e <lif_newdir+0xd2>
   1985c:	ed b7       	in	r30, 0x3d	; 61
   1985e:	fe b7       	in	r31, 0x3e	; 62
   19860:	44 83       	std	Z+4, r20	; 0x04
   19862:	55 83       	std	Z+5, r21	; 0x05
   19864:	66 83       	std	Z+6, r22	; 0x06
   19866:	77 83       	std	Z+7, r23	; 0x07
   19868:	87 eb       	ldi	r24, 0xB7	; 183
   1986a:	96 e3       	ldi	r25, 0x36	; 54
   1986c:	a0 e0       	ldi	r26, 0x00	; 0
   1986e:	81 83       	std	Z+1, r24	; 0x01
   19870:	92 83       	std	Z+2, r25	; 0x02
   19872:	a3 83       	std	Z+3, r26	; 0x03
   19874:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
#endif
            break;
        }

        // We hit the EOF record
        if(LIF->DIR.FileType == 0xffff)
   19878:	03 c1       	rjmp	.+518    	; 0x19a80 <lif_newdir+0x2b4>
   1987a:	ec 89       	ldd	r30, Y+20	; 0x14
   1987c:	fd 89       	ldd	r31, Y+21	; 0x15
   1987e:	80 81       	ld	r24, Z
   19880:	91 81       	ldd	r25, Z+1	; 0x01
   19882:	8f 3f       	cpi	r24, 0xFF	; 255
   19884:	ff ef       	ldi	r31, 0xFF	; 255
   19886:	9f 07       	cpc	r25, r31
            return(index);
        }


        // PURGED records
        if(LIF->DIR.FileType == 0)
   19888:	a1 f0       	breq	.+40     	; 0x198b2 <lif_newdir+0xe6>
   1988a:	89 2b       	or	r24, r25
   1988c:	09 f0       	breq	.+2      	; 0x19890 <lif_newdir+0xc4>
        {
            if(freestate == 0)
   1988e:	ce c0       	rjmp	.+412    	; 0x19a2c <lif_newdir+0x260>
   19890:	61 14       	cp	r6, r1
   19892:	71 04       	cpc	r7, r1
   19894:	09 f4       	brne	.+2      	; 0x19898 <lif_newdir+0xcc>
   19896:	c1 c0       	rjmp	.+386    	; 0x19a1a <lif_newdir+0x24e>
   19898:	ff ef       	ldi	r31, 0xFF	; 255
   1989a:	4f 1a       	sub	r4, r31
   1989c:	5f 0a       	sbc	r5, r31
   1989e:	82 01       	movw	r16, r4
   198a0:	01 50       	subi	r16, 0x01	; 1

    // Update free space and EOF pointers
    while(1)
    {
        // Write new EOF after current one
        if( !lif_readdirindex(LIF,index) )
   198a2:	11 09       	sbc	r17, r1
   198a4:	b8 01       	movw	r22, r16
   198a6:	8c 8d       	ldd	r24, Y+28	; 0x1c
   198a8:	9d 8d       	ldd	r25, Y+29	; 0x1d
   198aa:	c3 da       	rcall	.-2682   	; 0x18e32 <lif_readdirindex>
   198ac:	89 2b       	or	r24, r25
   198ae:	29 f7       	brne	.-54     	; 0x1987a <lif_newdir+0xae>
        if(LIF->DIR.FileType == 0xffff)
        {

            // Was enough free space found in purged area ?
            // Do NOT need to update EOF!
            if(freestate == 2)
   198b0:	e7 c0       	rjmp	.+462    	; 0x19a80 <lif_newdir+0x2b4>
   198b2:	22 e0       	ldi	r18, 0x02	; 2
   198b4:	62 16       	cp	r6, r18
   198b6:	71 04       	cpc	r7, r1
   198b8:	09 f0       	breq	.+2      	; 0x198bc <lif_newdir+0xf0>
            {
                // Update free pace for new file
                lif_dir_clear(LIF);
   198ba:	46 c0       	rjmp	.+140    	; 0x19948 <lif_newdir+0x17c>
   198bc:	8c 8d       	ldd	r24, Y+28	; 0x1c
   198be:	9d 8d       	ldd	r25, Y+29	; 0x1d
   198c0:	0e 94 32 c2 	call	0x18464	; 0x18464 <lif_dir_clear>
                LIF->DIR.FileStartSector = freestart;
   198c4:	ec 8d       	ldd	r30, Y+28	; 0x1c
   198c6:	fd 8d       	ldd	r31, Y+29	; 0x1d
   198c8:	e4 5a       	subi	r30, 0xA4	; 164
   198ca:	ff 4f       	sbci	r31, 0xFF	; 255
   198cc:	88 8d       	ldd	r24, Y+24	; 0x18
   198ce:	80 83       	st	Z, r24
   198d0:	99 8d       	ldd	r25, Y+25	; 0x19
   198d2:	91 83       	std	Z+1, r25	; 0x01
   198d4:	2a 8d       	ldd	r18, Y+26	; 0x1a
   198d6:	22 83       	std	Z+2, r18	; 0x02
   198d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
                LIF->DIR.FileSectors = sectors;
   198da:	83 83       	std	Z+3, r24	; 0x03
   198dc:	ec 8d       	ldd	r30, Y+28	; 0x1c
   198de:	fd 8d       	ldd	r31, Y+29	; 0x1d
   198e0:	e0 5a       	subi	r30, 0xA0	; 160
   198e2:	ff 4f       	sbci	r31, 0xFF	; 255
   198e4:	80 82       	st	Z, r8
   198e6:	91 82       	std	Z+1, r9	; 0x01
   198e8:	a2 82       	std	Z+2, r10	; 0x02
                LIF->usedsectors += sectors;
   198ea:	b3 82       	std	Z+3, r11	; 0x03
   198ec:	ec 8d       	ldd	r30, Y+28	; 0x1c
   198ee:	fd 8d       	ldd	r31, Y+29	; 0x1d
   198f0:	84 89       	ldd	r24, Z+20	; 0x14
   198f2:	95 89       	ldd	r25, Z+21	; 0x15
   198f4:	a6 89       	ldd	r26, Z+22	; 0x16
   198f6:	b7 89       	ldd	r27, Z+23	; 0x17
   198f8:	88 0d       	add	r24, r8
   198fa:	99 1d       	adc	r25, r9
   198fc:	aa 1d       	adc	r26, r10
   198fe:	bb 1d       	adc	r27, r11
   19900:	84 8b       	std	Z+20, r24	; 0x14
   19902:	95 8b       	std	Z+21, r25	; 0x15
   19904:	a6 8b       	std	Z+22, r26	; 0x16
                LIF->freesectors -= sectors;
   19906:	b7 8b       	std	Z+23, r27	; 0x17
   19908:	80 8d       	ldd	r24, Z+24	; 0x18
   1990a:	91 8d       	ldd	r25, Z+25	; 0x19
   1990c:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1990e:	b3 8d       	ldd	r27, Z+27	; 0x1b
   19910:	88 19       	sub	r24, r8
   19912:	99 09       	sbc	r25, r9
   19914:	aa 09       	sbc	r26, r10
   19916:	bb 09       	sbc	r27, r11
   19918:	80 8f       	std	Z+24, r24	; 0x18
   1991a:	91 8f       	std	Z+25, r25	; 0x19
   1991c:	a2 8f       	std	Z+26, r26	; 0x1a
                LIF->files++;
   1991e:	b3 8f       	std	Z+27, r27	; 0x1b
   19920:	84 8d       	ldd	r24, Z+28	; 0x1c
   19922:	95 8d       	ldd	r25, Z+29	; 0x1d
   19924:	01 96       	adiw	r24, 0x01	; 1
   19926:	95 8f       	std	Z+29, r25	; 0x1d
                LIF->purged--;
   19928:	84 8f       	std	Z+28, r24	; 0x1c
   1992a:	86 8d       	ldd	r24, Z+30	; 0x1e
   1992c:	97 8d       	ldd	r25, Z+31	; 0x1f
   1992e:	01 97       	sbiw	r24, 0x01	; 1
   19930:	97 8f       	std	Z+31, r25	; 0x1f
                LIF->dirindex = freeindex;
   19932:	86 8f       	std	Z+30, r24	; 0x1e
                // Write new record (FileType is still EOF until data is updated by user)
                if( !lif_writedirindex(LIF,freeindex))
   19934:	20 a2       	std	Z+32, r2	; 0x20
   19936:	31 a2       	std	Z+33, r3	; 0x21
   19938:	b1 01       	movw	r22, r2
   1993a:	cf 01       	movw	r24, r30
   1993c:	e1 da       	rcall	.-2622   	; 0x18f00 <lif_writedirindex>
   1993e:	89 2b       	or	r24, r25
   19940:	09 f4       	brne	.+2      	; 0x19944 <lif_newdir+0x178>
   19942:	9e c0       	rjmp	.+316    	; 0x19a80 <lif_newdir+0x2b4>
                    break;
                }
                return(freeindex);
            }

            if(debuglevel & LIF_DEBUG)
   19944:	c1 01       	movw	r24, r2
   19946:	9e c0       	rjmp	.+316    	; 0x19a84 <lif_newdir+0x2b8>
   19948:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1994c:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
                printf("lif_newdir: index:[%d] adding at:[%ld]to purged space:[%ld] sectors, free:[%ld]\n", 
   19950:	92 ff       	sbrs	r25, 2
   19952:	1e c0       	rjmp	.+60     	; 0x19990 <lif_newdir+0x1c4>
   19954:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19956:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19958:	80 8d       	ldd	r24, Z+24	; 0x18
   1995a:	91 8d       	ldd	r25, Z+25	; 0x19
   1995c:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1995e:	b3 8d       	ldd	r27, Z+27	; 0x1b
   19960:	ed b7       	in	r30, 0x3d	; 61
   19962:	fe b7       	in	r31, 0x3e	; 62
   19964:	86 87       	std	Z+14, r24	; 0x0e
   19966:	97 87       	std	Z+15, r25	; 0x0f
   19968:	a0 8b       	std	Z+16, r26	; 0x10
   1996a:	b1 8b       	std	Z+17, r27	; 0x11
   1996c:	82 86       	std	Z+10, r8	; 0x0a
   1996e:	93 86       	std	Z+11, r9	; 0x0b
   19970:	a4 86       	std	Z+12, r10	; 0x0c
   19972:	b5 86       	std	Z+13, r11	; 0x0d
   19974:	c6 82       	std	Z+6, r12	; 0x06
   19976:	d7 82       	std	Z+7, r13	; 0x07
   19978:	e0 86       	std	Z+8, r14	; 0x08
   1997a:	f1 86       	std	Z+9, r15	; 0x09
   1997c:	15 83       	std	Z+5, r17	; 0x05
   1997e:	04 83       	std	Z+4, r16	; 0x04
   19980:	86 e6       	ldi	r24, 0x66	; 102
   19982:	96 e3       	ldi	r25, 0x36	; 54
   19984:	a0 e0       	ldi	r26, 0x00	; 0
   19986:	81 83       	std	Z+1, r24	; 0x01
   19988:	92 83       	std	Z+2, r25	; 0x02
   1998a:	a3 83       	std	Z+3, r26	; 0x03
                    (int) index,(long)start,(long) sectors, (long)LIF->freesectors);

            // Write new EOF after current one
            if( !lif_writedirEOF(LIF,index+1) )
   1998c:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   19990:	b8 01       	movw	r22, r16
   19992:	6f 5f       	subi	r22, 0xFF	; 255
   19994:	7f 4f       	sbci	r23, 0xFF	; 255
   19996:	8c 8d       	ldd	r24, Y+28	; 0x1c
   19998:	9d 8d       	ldd	r25, Y+29	; 0x1d
   1999a:	0e db       	rcall	.-2532   	; 0x18fb8 <lif_writedirEOF>
   1999c:	89 2b       	or	r24, r25
            {
                break;
            }

            lif_dir_clear(LIF);
   1999e:	09 f4       	brne	.+2      	; 0x199a2 <lif_newdir+0x1d6>
   199a0:	6f c0       	rjmp	.+222    	; 0x19a80 <lif_newdir+0x2b4>
   199a2:	8c 8d       	ldd	r24, Y+28	; 0x1c
   199a4:	9d 8d       	ldd	r25, Y+29	; 0x1d
            LIF->DIR.FileStartSector = start;
   199a6:	0e 94 32 c2 	call	0x18464	; 0x18464 <lif_dir_clear>
   199aa:	ec 8d       	ldd	r30, Y+28	; 0x1c
   199ac:	fd 8d       	ldd	r31, Y+29	; 0x1d
   199ae:	e4 5a       	subi	r30, 0xA4	; 164
   199b0:	ff 4f       	sbci	r31, 0xFF	; 255
   199b2:	c0 82       	st	Z, r12
   199b4:	d1 82       	std	Z+1, r13	; 0x01
            LIF->DIR.FileSectors = sectors;
   199b6:	e2 82       	std	Z+2, r14	; 0x02
   199b8:	f3 82       	std	Z+3, r15	; 0x03
   199ba:	ec 8d       	ldd	r30, Y+28	; 0x1c
   199bc:	fd 8d       	ldd	r31, Y+29	; 0x1d
   199be:	e0 5a       	subi	r30, 0xA0	; 160
   199c0:	ff 4f       	sbci	r31, 0xFF	; 255
   199c2:	80 82       	st	Z, r8
   199c4:	91 82       	std	Z+1, r9	; 0x01
            LIF->usedsectors += sectors;
   199c6:	a2 82       	std	Z+2, r10	; 0x02
   199c8:	b3 82       	std	Z+3, r11	; 0x03
   199ca:	ec 8d       	ldd	r30, Y+28	; 0x1c
   199cc:	fd 8d       	ldd	r31, Y+29	; 0x1d
   199ce:	84 89       	ldd	r24, Z+20	; 0x14
   199d0:	95 89       	ldd	r25, Z+21	; 0x15
   199d2:	a6 89       	ldd	r26, Z+22	; 0x16
   199d4:	b7 89       	ldd	r27, Z+23	; 0x17
   199d6:	88 0d       	add	r24, r8
   199d8:	99 1d       	adc	r25, r9
   199da:	aa 1d       	adc	r26, r10
   199dc:	bb 1d       	adc	r27, r11
   199de:	84 8b       	std	Z+20, r24	; 0x14
   199e0:	95 8b       	std	Z+21, r25	; 0x15
            LIF->freesectors -= sectors;
   199e2:	a6 8b       	std	Z+22, r26	; 0x16
   199e4:	b7 8b       	std	Z+23, r27	; 0x17
   199e6:	80 8d       	ldd	r24, Z+24	; 0x18
   199e8:	91 8d       	ldd	r25, Z+25	; 0x19
   199ea:	a2 8d       	ldd	r26, Z+26	; 0x1a
   199ec:	b3 8d       	ldd	r27, Z+27	; 0x1b
   199ee:	88 19       	sub	r24, r8
   199f0:	99 09       	sbc	r25, r9
   199f2:	aa 09       	sbc	r26, r10
   199f4:	bb 09       	sbc	r27, r11
   199f6:	80 8f       	std	Z+24, r24	; 0x18
   199f8:	91 8f       	std	Z+25, r25	; 0x19
            LIF->files++;
   199fa:	a2 8f       	std	Z+26, r26	; 0x1a
   199fc:	b3 8f       	std	Z+27, r27	; 0x1b
   199fe:	84 8d       	ldd	r24, Z+28	; 0x1c
   19a00:	95 8d       	ldd	r25, Z+29	; 0x1d
            LIF->dirindex = index;
   19a02:	01 96       	adiw	r24, 0x01	; 1
            // Write new record (FileType is still EOF until data is updated by user )
            if( !lif_writedirindex(LIF,index))
   19a04:	95 8f       	std	Z+29, r25	; 0x1d
   19a06:	84 8f       	std	Z+28, r24	; 0x1c
   19a08:	11 a3       	std	Z+33, r17	; 0x21
   19a0a:	00 a3       	std	Z+32, r16	; 0x20
   19a0c:	b8 01       	movw	r22, r16
   19a0e:	cf 01       	movw	r24, r30
   19a10:	77 da       	rcall	.-2834   	; 0x18f00 <lif_writedirindex>
   19a12:	89 2b       	or	r24, r25


        // PURGED records
        if(LIF->DIR.FileType == 0)
        {
            if(freestate == 0)
   19a14:	a9 f1       	breq	.+106    	; 0x19a80 <lif_newdir+0x2b4>
   19a16:	c8 01       	movw	r24, r16
   19a18:	35 c0       	rjmp	.+106    	; 0x19a84 <lif_newdir+0x2b8>
   19a1a:	c8 8e       	std	Y+24, r12	; 0x18
   19a1c:	d9 8e       	std	Y+25, r13	; 0x19
            {
                freeindex = index;
                freestart = start;
                freestate = 1;
   19a1e:	ea 8e       	std	Y+26, r14	; 0x1a
   19a20:	fb 8e       	std	Y+27, r15	; 0x1b
   19a22:	18 01       	movw	r2, r16
            }
            ++index;
            continue;
   19a24:	66 24       	eor	r6, r6
        }
        

        // VALID record
        if(freestate == 1)
   19a26:	63 94       	inc	r6
   19a28:	71 2c       	mov	r7, r1
   19a2a:	36 cf       	rjmp	.-404    	; 0x19898 <lif_newdir+0xcc>
   19a2c:	f1 e0       	ldi	r31, 0x01	; 1
        {
            long freesectors;
            // Compute sectors of purged space between valid records
            // Note: LIF specs prohibit using old purged file start and sectors!
            freesectors = LIF->DIR.FileStartSector - start;
            if(freesectors >= sectors )
   19a2e:	6f 16       	cp	r6, r31
   19a30:	71 04       	cpc	r7, r1
   19a32:	a9 f4       	brne	.+42     	; 0x19a5e <lif_newdir+0x292>
   19a34:	ea 89       	ldd	r30, Y+18	; 0x12
   19a36:	fb 89       	ldd	r31, Y+19	; 0x13
   19a38:	80 81       	ld	r24, Z
   19a3a:	91 81       	ldd	r25, Z+1	; 0x01
   19a3c:	a2 81       	ldd	r26, Z+2	; 0x02
   19a3e:	b3 81       	ldd	r27, Z+3	; 0x03
   19a40:	8c 19       	sub	r24, r12
   19a42:	9d 09       	sbc	r25, r13
   19a44:	ae 09       	sbc	r26, r14
   19a46:	bf 09       	sbc	r27, r15
   19a48:	88 15       	cp	r24, r8
   19a4a:	99 05       	cpc	r25, r9
                freestate = 2;      // Found free space in purged record
            else
                freestate = 0;  // Try again
   19a4c:	aa 05       	cpc	r26, r10
   19a4e:	bb 05       	cpc	r27, r11
   19a50:	1c f4       	brge	.+6      	; 0x19a58 <lif_newdir+0x28c>
            long freesectors;
            // Compute sectors of purged space between valid records
            // Note: LIF specs prohibit using old purged file start and sectors!
            freesectors = LIF->DIR.FileStartSector - start;
            if(freesectors >= sectors )
                freestate = 2;      // Found free space in purged record
   19a52:	61 2c       	mov	r6, r1
   19a54:	71 2c       	mov	r7, r1
   19a56:	03 c0       	rjmp	.+6      	; 0x19a5e <lif_newdir+0x292>
                freestate = 0;  // Try again
        }
        
        // Computed start of next record
        // Note: MUST be <= actual start of next VALID record or we have overlapping records!
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   19a58:	82 e0       	ldi	r24, 0x02	; 2
   19a5a:	68 2e       	mov	r6, r24
   19a5c:	71 2c       	mov	r7, r1
   19a5e:	ea 89       	ldd	r30, Y+18	; 0x12
   19a60:	fb 89       	ldd	r31, Y+19	; 0x13
   19a62:	c0 80       	ld	r12, Z
   19a64:	d1 80       	ldd	r13, Z+1	; 0x01
   19a66:	e2 80       	ldd	r14, Z+2	; 0x02
   19a68:	f3 80       	ldd	r15, Z+3	; 0x03
   19a6a:	ee 89       	ldd	r30, Y+22	; 0x16
   19a6c:	ff 89       	ldd	r31, Y+23	; 0x17
   19a6e:	80 81       	ld	r24, Z
   19a70:	91 81       	ldd	r25, Z+1	; 0x01
   19a72:	a2 81       	ldd	r26, Z+2	; 0x02
   19a74:	b3 81       	ldd	r27, Z+3	; 0x03
   19a76:	c8 0e       	add	r12, r24
   19a78:	d9 1e       	adc	r13, r25
        ++index;
    }
    // ERROR
    return(-1);
   19a7a:	ea 1e       	adc	r14, r26
   19a7c:	fb 1e       	adc	r15, r27
}
   19a7e:	0c cf       	rjmp	.-488    	; 0x19898 <lif_newdir+0xcc>
   19a80:	8f ef       	ldi	r24, 0xFF	; 255
   19a82:	9f ef       	ldi	r25, 0xFF	; 255
   19a84:	6d 96       	adiw	r28, 0x1d	; 29
   19a86:	e2 e1       	ldi	r30, 0x12	; 18
   19a88:	0c 94 fa df 	jmp	0x1bff4	; 0x1bff4 <__epilogue_restores__>

00019a8c <lif_open_volume>:
/// @param[in] *name: file name of LIF image
/// @param[in] *mode: "rb" = read, "rb+" = read/write
/// @return LIF pointer on sucesses or NULL on error
MEMSPACE
lif_t *lif_open_volume(char *name, char *mode)
{
   19a8c:	a9 e3       	ldi	r26, 0x39	; 57
   19a8e:	b1 e0       	ldi	r27, 0x01	; 1
   19a90:	ec e4       	ldi	r30, 0x4C	; 76
   19a92:	fd ec       	ldi	r31, 0xCD	; 205
   19a94:	0c 94 e4 df 	jmp	0x1bfc8	; 0x1bfc8 <__prologue_saves__+0xc>
   19a98:	6c 01       	movw	r12, r24
   19a9a:	8b 01       	movw	r16, r22
    lif_t *LIF;
    stat_t sb, *sp;
    uint8_t buffer[LIF_SECTOR_SIZE];


    sp = lif_stat(name, (stat_t *)&sb);
   19a9c:	be 01       	movw	r22, r28
   19a9e:	66 5f       	subi	r22, 0xF6	; 246
   19aa0:	7e 4f       	sbci	r23, 0xFE	; 254
   19aa2:	0e 94 85 bd 	call	0x17b0a	; 0x17b0a <lif_stat>
   19aa6:	5c 01       	movw	r10, r24
    if(sp == NULL)
   19aa8:	00 97       	sbiw	r24, 0x00	; 0
   19aaa:	f9 f0       	breq	.+62     	; 0x19aea <lif_open_volume+0x5e>
        return(NULL);


    // To read LIF volume we must have at minimum two sectors
    // volume header a directory entry
    if(sp->st_size < (long)LIF_SECTOR_SIZE*2)
   19aac:	fc 01       	movw	r30, r24
   19aae:	80 8d       	ldd	r24, Z+24	; 0x18
   19ab0:	91 8d       	ldd	r25, Z+25	; 0x19
   19ab2:	a2 8d       	ldd	r26, Z+26	; 0x1a
   19ab4:	b3 8d       	ldd	r27, Z+27	; 0x1b
   19ab6:	81 15       	cp	r24, r1
   19ab8:	f2 e0       	ldi	r31, 0x02	; 2
   19aba:	9f 07       	cpc	r25, r31
   19abc:	a1 05       	cpc	r26, r1
   19abe:	b1 05       	cpc	r27, r1
   19ac0:	b8 f4       	brcc	.+46     	; 0x19af0 <lif_open_volume+0x64>
    {
        if(debuglevel & GPIB_PPR)
   19ac2:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   19ac6:	21 ff       	sbrs	r18, 1
   19ac8:	10 c0       	rjmp	.+32     	; 0x19aea <lif_open_volume+0x5e>
            printf("lif_open_volume:[%s] error volume header area too small:[%ld]\n", name, (long)sp->st_size);
   19aca:	ed b7       	in	r30, 0x3d	; 61
   19acc:	fe b7       	in	r31, 0x3e	; 62
   19ace:	86 83       	std	Z+6, r24	; 0x06
   19ad0:	97 83       	std	Z+7, r25	; 0x07
   19ad2:	a0 87       	std	Z+8, r26	; 0x08
   19ad4:	b1 87       	std	Z+9, r27	; 0x09
   19ad6:	d5 82       	std	Z+5, r13	; 0x05
   19ad8:	c4 82       	std	Z+4, r12	; 0x04
   19ada:	87 e2       	ldi	r24, 0x27	; 39
   19adc:	96 e3       	ldi	r25, 0x36	; 54
   19ade:	a0 e0       	ldi	r26, 0x00	; 0
   19ae0:	81 83       	std	Z+1, r24	; 0x01
   19ae2:	92 83       	std	Z+2, r25	; 0x02
   19ae4:	a3 83       	std	Z+3, r26	; 0x03
   19ae6:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
        return(NULL);
   19aea:	00 e0       	ldi	r16, 0x00	; 0
   19aec:	10 e0       	ldi	r17, 0x00	; 0
   19aee:	c2 c0       	rjmp	.+388    	; 0x19c74 <lif_open_volume+0x1e8>
    }


    // Allocate LIF structure
    LIF = lif_calloc(sizeof(lif_t)+4);
   19af0:	64 e7       	ldi	r22, 0x74	; 116
   19af2:	70 e0       	ldi	r23, 0x00	; 0
   19af4:	80 e0       	ldi	r24, 0x00	; 0
   19af6:	90 e0       	ldi	r25, 0x00	; 0
   19af8:	0e 94 f1 bc 	call	0x179e2	; 0x179e2 <lif_calloc>
   19afc:	7c 01       	movw	r14, r24
    if(!LIF)
   19afe:	89 2b       	or	r24, r25
   19b00:	a1 f3       	breq	.-24     	; 0x19aea <lif_open_volume+0x5e>
        return(NULL);

    LIF->name = lif_stralloc(name);
   19b02:	c6 01       	movw	r24, r12
   19b04:	0e 94 3c bd 	call	0x17a78	; 0x17a78 <lif_stralloc>
   19b08:	f7 01       	movw	r30, r14
   19b0a:	91 83       	std	Z+1, r25	; 0x01
   19b0c:	80 83       	st	Z, r24
    if(!LIF->name)
   19b0e:	00 97       	sbiw	r24, 0x00	; 0
   19b10:	09 f4       	brne	.+2      	; 0x19b14 <lif_open_volume+0x88>
   19b12:	5a c0       	rjmp	.+180    	; 0x19bc8 <lif_open_volume+0x13c>
    {
        lif_closedir(LIF);
        return(NULL);
    }
        
    LIF->imagebytes = sp->st_size;
   19b14:	f5 01       	movw	r30, r10
   19b16:	80 8c       	ldd	r8, Z+24	; 0x18
   19b18:	91 8c       	ldd	r9, Z+25	; 0x19
   19b1a:	a2 8c       	ldd	r10, Z+26	; 0x1a
   19b1c:	b3 8c       	ldd	r11, Z+27	; 0x1b
   19b1e:	f7 01       	movw	r30, r14
   19b20:	80 86       	std	Z+8, r8	; 0x08
   19b22:	91 86       	std	Z+9, r9	; 0x09
   19b24:	a2 86       	std	Z+10, r10	; 0x0a
   19b26:	b3 86       	std	Z+11, r11	; 0x0b
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   19b28:	77 27       	eor	r23, r23
   19b2a:	6b 2d       	mov	r22, r11
   19b2c:	5a 2d       	mov	r21, r10
   19b2e:	49 2d       	mov	r20, r9
    if(bytes % (long)LIF_SECTOR_SIZE)
   19b30:	88 20       	and	r8, r8
   19b32:	21 f0       	breq	.+8      	; 0x19b3c <lif_open_volume+0xb0>
        ++sectors;
   19b34:	4f 5f       	subi	r20, 0xFF	; 255
   19b36:	5f 4f       	sbci	r21, 0xFF	; 255
   19b38:	6f 4f       	sbci	r22, 0xFF	; 255
   19b3a:	7f 4f       	sbci	r23, 0xFF	; 255
        lif_closedir(LIF);
        return(NULL);
    }
        
    LIF->imagebytes = sp->st_size;
    LIF->sectors = lif_bytes2sectors(sp->st_size);
   19b3c:	f7 01       	movw	r30, r14
   19b3e:	44 83       	std	Z+4, r20	; 0x04
   19b40:	55 83       	std	Z+5, r21	; 0x05
   19b42:	66 83       	std	Z+6, r22	; 0x06
   19b44:	77 83       	std	Z+7, r23	; 0x07

    LIF->fp = lif_open(LIF->name,mode);
   19b46:	b8 01       	movw	r22, r16
   19b48:	0e 94 5b bd 	call	0x17ab6	; 0x17ab6 <lif_open>
   19b4c:	f7 01       	movw	r30, r14
   19b4e:	93 83       	std	Z+3, r25	; 0x03
   19b50:	82 83       	std	Z+2, r24	; 0x02
    if(!LIF->fp)
   19b52:	89 2b       	or	r24, r25
   19b54:	c9 f1       	breq	.+114    	; 0x19bc8 <lif_open_volume+0x13c>
        return(NULL);
    }
        
        
    // Volume header must be it least one sector
    if( lif_read(LIF, buffer, 0, LIF_SECTOR_SIZE) < LIF_SECTOR_SIZE)
   19b56:	00 e0       	ldi	r16, 0x00	; 0
   19b58:	11 e0       	ldi	r17, 0x01	; 1
   19b5a:	20 e0       	ldi	r18, 0x00	; 0
   19b5c:	30 e0       	ldi	r19, 0x00	; 0
   19b5e:	a9 01       	movw	r20, r18
   19b60:	be 01       	movw	r22, r28
   19b62:	66 5f       	subi	r22, 0xF6	; 246
   19b64:	7f 4f       	sbci	r23, 0xFF	; 255
   19b66:	c7 01       	movw	r24, r14
   19b68:	0e 94 df bd 	call	0x17bbe	; 0x17bbe <lif_read>
   19b6c:	6f 3f       	cpi	r22, 0xFF	; 255
   19b6e:	71 05       	cpc	r23, r1
   19b70:	81 05       	cpc	r24, r1
   19b72:	91 05       	cpc	r25, r1
   19b74:	09 f0       	breq	.+2      	; 0x19b78 <lif_open_volume+0xec>
   19b76:	5c f4       	brge	.+22     	; 0x19b8e <lif_open_volume+0x102>
    {
        if(debuglevel & GPIB_PPR)
   19b78:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   19b7c:	81 ff       	sbrs	r24, 1
   19b7e:	24 c0       	rjmp	.+72     	; 0x19bc8 <lif_open_volume+0x13c>
            printf("lif_open_volume:[%s] error read volume header failed\n", name);
   19b80:	ed b7       	in	r30, 0x3d	; 61
   19b82:	fe b7       	in	r31, 0x3e	; 62
   19b84:	d5 82       	std	Z+5, r13	; 0x05
   19b86:	c4 82       	std	Z+4, r12	; 0x04
   19b88:	81 ef       	ldi	r24, 0xF1	; 241
   19b8a:	95 e3       	ldi	r25, 0x35	; 53
   19b8c:	17 c0       	rjmp	.+46     	; 0x19bbc <lif_open_volume+0x130>
        lif_closedir(LIF);
        return(NULL);
    }

    // Unpack Volumes has the Directory start sector
    lif_str2vol(buffer, LIF);
   19b8e:	b7 01       	movw	r22, r14
   19b90:	ce 01       	movw	r24, r28
   19b92:	0a 96       	adiw	r24, 0x0a	; 10
   19b94:	0e 94 fb bf 	call	0x17ff6	; 0x17ff6 <lif_str2vol>

    // Validate basic Volume headers 
    if( !lif_check_volume(LIF) )
   19b98:	c7 01       	movw	r24, r14
   19b9a:	0e 94 07 c4 	call	0x1880e	; 0x1880e <lif_check_volume>
   19b9e:	89 2b       	or	r24, r25
   19ba0:	b1 f4       	brne	.+44     	; 0x19bce <lif_open_volume+0x142>
    {
        if(debuglevel & GPIB_PPR)
   19ba2:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   19ba6:	81 ff       	sbrs	r24, 1
   19ba8:	0f c0       	rjmp	.+30     	; 0x19bc8 <lif_open_volume+0x13c>
            printf("lif_open_volume:[%s] error volume validate failed\n", LIF->name);
   19baa:	f7 01       	movw	r30, r14
   19bac:	80 81       	ld	r24, Z
   19bae:	91 81       	ldd	r25, Z+1	; 0x01
   19bb0:	ed b7       	in	r30, 0x3d	; 61
   19bb2:	fe b7       	in	r31, 0x3e	; 62
   19bb4:	95 83       	std	Z+5, r25	; 0x05
   19bb6:	84 83       	std	Z+4, r24	; 0x04
   19bb8:	8e eb       	ldi	r24, 0xBE	; 190
   19bba:	95 e3       	ldi	r25, 0x35	; 53
   19bbc:	a0 e0       	ldi	r26, 0x00	; 0
   19bbe:	81 83       	std	Z+1, r24	; 0x01
   19bc0:	92 83       	std	Z+2, r25	; 0x02
   19bc2:	a3 83       	std	Z+3, r26	; 0x03
   19bc4:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   19bc8:	c7 01       	movw	r24, r14
   19bca:	a5 d8       	rcall	.-3766   	; 0x18d16 <lif_close_volume>
   19bcc:	8e cf       	rjmp	.-228    	; 0x19aea <lif_open_volume+0x5e>
        lif_closedir(LIF);
        return(NULL);
    }

    // Initialize remaining LIF headers
    LIF->filestart = LIF->VOL.DirStartSector + LIF->VOL.DirSectors;
   19bce:	f7 01       	movw	r30, r14
   19bd0:	45 a5       	ldd	r20, Z+45	; 0x2d
   19bd2:	56 a5       	ldd	r21, Z+46	; 0x2e
   19bd4:	67 a5       	ldd	r22, Z+47	; 0x2f
   19bd6:	70 a9       	ldd	r23, Z+48	; 0x30
   19bd8:	85 a9       	ldd	r24, Z+53	; 0x35
   19bda:	96 a9       	ldd	r25, Z+54	; 0x36
   19bdc:	a7 a9       	ldd	r26, Z+55	; 0x37
   19bde:	b0 ad       	ldd	r27, Z+56	; 0x38
   19be0:	48 0f       	add	r20, r24
   19be2:	59 1f       	adc	r21, r25
   19be4:	6a 1f       	adc	r22, r26
   19be6:	7b 1f       	adc	r23, r27
   19be8:	44 87       	std	Z+12, r20	; 0x0c
   19bea:	55 87       	std	Z+13, r21	; 0x0d
   19bec:	66 87       	std	Z+14, r22	; 0x0e
   19bee:	77 87       	std	Z+15, r23	; 0x0f
    LIF->filesectors = LIF->sectors - LIF->filestart;
   19bf0:	84 81       	ldd	r24, Z+4	; 0x04
   19bf2:	95 81       	ldd	r25, Z+5	; 0x05
   19bf4:	a6 81       	ldd	r26, Z+6	; 0x06
   19bf6:	b7 81       	ldd	r27, Z+7	; 0x07
   19bf8:	84 1b       	sub	r24, r20
   19bfa:	95 0b       	sbc	r25, r21
   19bfc:	a6 0b       	sbc	r26, r22
   19bfe:	b7 0b       	sbc	r27, r23
   19c00:	80 8b       	std	Z+16, r24	; 0x10
   19c02:	91 8b       	std	Z+17, r25	; 0x11
   19c04:	a2 8b       	std	Z+18, r26	; 0x12
   19c06:	b3 8b       	std	Z+19, r27	; 0x13
    LIF->freesectors = LIF->filesectors;
   19c08:	80 8f       	std	Z+24, r24	; 0x18
   19c0a:	91 8f       	std	Z+25, r25	; 0x19
   19c0c:	a2 8f       	std	Z+26, r26	; 0x1a
   19c0e:	b3 8f       	std	Z+27, r27	; 0x1b
    LIF->usedsectors = 0;
   19c10:	14 8a       	std	Z+20, r1	; 0x14
   19c12:	15 8a       	std	Z+21, r1	; 0x15
   19c14:	16 8a       	std	Z+22, r1	; 0x16
   19c16:	17 8a       	std	Z+23, r1	; 0x17
    LIF->purged = 0;
   19c18:	17 8e       	std	Z+31, r1	; 0x1f
   19c1a:	16 8e       	std	Z+30, r1	; 0x1e
    LIF->files = 0;
   19c1c:	15 8e       	std	Z+29, r1	; 0x1d
   19c1e:	14 8e       	std	Z+28, r1	; 0x1c
    LIF->dirindex = 0;
   19c20:	11 a2       	std	Z+33, r1	; 0x21
   19c22:	10 a2       	std	Z+32, r1	; 0x20
    LIF->EOFindex = 0;
   19c24:	13 a2       	std	Z+35, r1	; 0x23

    if( lif_updatefree(LIF) == NULL)
   19c26:	12 a2       	std	Z+34, r1	; 0x22
   19c28:	c7 01       	movw	r24, r14
   19c2a:	de d9       	rcall	.-3140   	; 0x18fe8 <lif_updatefree>
   19c2c:	8c 01       	movw	r16, r24
   19c2e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   19c32:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   19c36:	01 15       	cp	r16, r1
   19c38:	11 05       	cpc	r17, r1
    {
        if(debuglevel & GPIB_PPR)
   19c3a:	a1 f4       	brne	.+40     	; 0x19c64 <lif_open_volume+0x1d8>
   19c3c:	81 ff       	sbrs	r24, 1
            printf("lif_open_volume:[%s] error directory check failed\n", LIF->name);
   19c3e:	0f c0       	rjmp	.+30     	; 0x19c5e <lif_open_volume+0x1d2>
   19c40:	f7 01       	movw	r30, r14
   19c42:	80 81       	ld	r24, Z
   19c44:	91 81       	ldd	r25, Z+1	; 0x01
   19c46:	ed b7       	in	r30, 0x3d	; 61
   19c48:	fe b7       	in	r31, 0x3e	; 62
   19c4a:	95 83       	std	Z+5, r25	; 0x05
   19c4c:	84 83       	std	Z+4, r24	; 0x04
   19c4e:	8b e8       	ldi	r24, 0x8B	; 139
   19c50:	95 e3       	ldi	r25, 0x35	; 53
   19c52:	a0 e0       	ldi	r26, 0x00	; 0
   19c54:	81 83       	std	Z+1, r24	; 0x01
   19c56:	92 83       	std	Z+2, r25	; 0x02
   19c58:	a3 83       	std	Z+3, r26	; 0x03
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   19c5a:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   19c5e:	c7 01       	movw	r24, r14
    if( lif_updatefree(LIF) == NULL)
    {
        if(debuglevel & GPIB_PPR)
            printf("lif_open_volume:[%s] error directory check failed\n", LIF->name);
        lif_closedir(LIF);
        return(NULL);
   19c60:	5a d8       	rcall	.-3916   	; 0x18d16 <lif_close_volume>
    }

	if(debuglevel &LIF_DEBUG)
   19c62:	08 c0       	rjmp	.+16     	; 0x19c74 <lif_open_volume+0x1e8>
   19c64:	92 ff       	sbrs	r25, 2
		lif_dump_vol(LIF, "Volume Listing");	
   19c66:	05 c0       	rjmp	.+10     	; 0x19c72 <lif_open_volume+0x1e6>
   19c68:	6c e2       	ldi	r22, 0x2C	; 44
   19c6a:	76 e1       	ldi	r23, 0x16	; 22
   19c6c:	c7 01       	movw	r24, r14
   19c6e:	0e 94 41 c2 	call	0x18482	; 0x18482 <lif_dump_vol>
    return( LIF );
}
   19c72:	87 01       	movw	r16, r14
   19c74:	c8 01       	movw	r24, r16
   19c76:	c7 5c       	subi	r28, 0xC7	; 199
   19c78:	de 4f       	sbci	r29, 0xFE	; 254
   19c7a:	ec e0       	ldi	r30, 0x0C	; 12
   19c7c:	0c 94 00 e0 	jmp	0x1c000	; 0x1c000 <__epilogue_restores__+0xc>

00019c80 <lif_dir>:
/// @brief Display a LIF image file directory
/// @param[in] lifimagename: LIF disk image name
/// @return -1 on error or number of files found
MEMSPACE
void lif_dir(char *lifimagename)
{
   19c80:	2f 92       	push	r2
   19c82:	3f 92       	push	r3
   19c84:	4f 92       	push	r4
   19c86:	5f 92       	push	r5
   19c88:	6f 92       	push	r6
   19c8a:	8f 92       	push	r8
   19c8c:	9f 92       	push	r9
   19c8e:	af 92       	push	r10
   19c90:	bf 92       	push	r11
   19c92:	cf 92       	push	r12
   19c94:	df 92       	push	r13
   19c96:	ef 92       	push	r14
   19c98:	0f 93       	push	r16
   19c9a:	1f 93       	push	r17
   19c9c:	cf 93       	push	r28
   19c9e:	df 93       	push	r29
   19ca0:	cd b7       	in	r28, 0x3d	; 61
   19ca2:	de b7       	in	r29, 0x3e	; 62
   19ca4:	af 97       	sbiw	r28, 0x2f	; 47
   19ca6:	0f b6       	in	r0, 0x3f	; 63
   19ca8:	f8 94       	cli
   19caa:	de bf       	out	0x3e, r29	; 62
   19cac:	0f be       	out	0x3f, r0	; 63
   19cae:	cd bf       	out	0x3d, r28	; 61
    int index = 0;
    char *vol;

    int warn = ' ';

    LIF = lif_open_volume(lifimagename,"rb+");
   19cb0:	6a ed       	ldi	r22, 0xDA	; 218
   19cb2:	78 e0       	ldi	r23, 0x08	; 8
   19cb4:	eb de       	rcall	.-554    	; 0x19a8c <lif_open_volume>
   19cb6:	9f a7       	std	Y+47, r25	; 0x2f
   19cb8:	8e a7       	std	Y+46, r24	; 0x2e
    if(LIF == NULL)
   19cba:	00 97       	sbiw	r24, 0x00	; 0
   19cbc:	09 f4       	brne	.+2      	; 0x19cc0 <lif_dir+0x40>
   19cbe:	9e c1       	rjmp	.+828    	; 0x19ffc <lif_dir+0x37c>
        return;

    vol = (char *)LIF->VOL.Label;
    if(!vol[0])
   19cc0:	fc 01       	movw	r30, r24
   19cc2:	86 a1       	ldd	r24, Z+38	; 0x26
   19cc4:	88 23       	and	r24, r24
   19cc6:	21 f0       	breq	.+8      	; 0x19cd0 <lif_dir+0x50>

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return;

    vol = (char *)LIF->VOL.Label;
   19cc8:	8f 01       	movw	r16, r30
   19cca:	0a 5d       	subi	r16, 0xDA	; 218
   19ccc:	1f 4f       	sbci	r17, 0xFF	; 255
   19cce:	02 c0       	rjmp	.+4      	; 0x19cd4 <lif_dir+0x54>
    if(!vol[0])
        vol = "<EMPTY>";
   19cd0:	0e ed       	ldi	r16, 0xDE	; 222
   19cd2:	15 e1       	ldi	r17, 0x15	; 21

    printf("Volume:[%s] Date:[%s]\n", vol, lif_lifbcd2timestr(LIF->VOL.date));
   19cd4:	8e a5       	ldd	r24, Y+46	; 0x2e
   19cd6:	9f a5       	ldd	r25, Y+47	; 0x2f
   19cd8:	87 5b       	subi	r24, 0xB7	; 183
   19cda:	9f 4f       	sbci	r25, 0xFF	; 255
   19cdc:	0e 94 05 c2 	call	0x1840a	; 0x1840a <lif_lifbcd2timestr>
   19ce0:	ed b7       	in	r30, 0x3d	; 61
   19ce2:	fe b7       	in	r31, 0x3e	; 62
   19ce4:	97 83       	std	Z+7, r25	; 0x07
   19ce6:	86 83       	std	Z+6, r24	; 0x06
   19ce8:	15 83       	std	Z+5, r17	; 0x05
   19cea:	04 83       	std	Z+4, r16	; 0x04
   19cec:	84 e7       	ldi	r24, 0x74	; 116
   19cee:	95 e3       	ldi	r25, 0x35	; 53
   19cf0:	a0 e0       	ldi	r26, 0x00	; 0
   19cf2:	81 83       	std	Z+1, r24	; 0x01
   19cf4:	92 83       	std	Z+2, r25	; 0x02
   19cf6:	a3 83       	std	Z+3, r26	; 0x03
   19cf8:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    
    printf("NAME         TYPE   START SECTOR        SIZE    RECSIZE   DATE\n");
   19cfc:	84 e3       	ldi	r24, 0x34	; 52
   19cfe:	95 e3       	ldi	r25, 0x35	; 53
   19d00:	a0 e0       	ldi	r26, 0x00	; 0
   19d02:	ed b7       	in	r30, 0x3d	; 61
   19d04:	fe b7       	in	r31, 0x3e	; 62
   19d06:	81 83       	std	Z+1, r24	; 0x01
   19d08:	92 83       	std	Z+2, r25	; 0x02
   19d0a:	a3 83       	std	Z+3, r26	; 0x03
   19d0c:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    long bytes;
    lif_t *LIF;
    int index = 0;
    char *vol;

    int warn = ' ';
   19d10:	00 e2       	ldi	r16, 0x20	; 32
   19d12:	10 e0       	ldi	r17, 0x00	; 0
   19d14:	1f 8b       	std	Y+23, r17	; 0x17
   19d16:	0e 8b       	std	Y+22, r16	; 0x16
MEMSPACE
void lif_dir(char *lifimagename)
{
    long bytes;
    lif_t *LIF;
    int index = 0;
   19d18:	21 2c       	mov	r2, r1
   19d1a:	31 2c       	mov	r3, r1

        if(!lif_readdirindex(LIF,index))
            break;


        if(LIF->DIR.FileType == 0xffff)
   19d1c:	0e a5       	ldd	r16, Y+46	; 0x2e
   19d1e:	1f a5       	ldd	r17, Y+47	; 0x2f
   19d20:	06 5a       	subi	r16, 0xA6	; 166
   19d22:	1f 4f       	sbci	r17, 0xFF	; 255
   19d24:	1d 8f       	std	Y+29, r17	; 0x1d
   19d26:	0c 8f       	std	Y+28, r16	; 0x1c
            break;

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);
   19d28:	0e a5       	ldd	r16, Y+46	; 0x2e
   19d2a:	1f a5       	ldd	r17, Y+47	; 0x2f
   19d2c:	00 5a       	subi	r16, 0xA0	; 160
   19d2e:	1f 4f       	sbci	r17, 0xFF	; 255
   19d30:	1d a3       	std	Y+37, r17	; 0x25
   19d32:	0c a3       	std	Y+36, r16	; 0x24

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   19d34:	0e a5       	ldd	r16, Y+46	; 0x2e
   19d36:	1f a5       	ldd	r17, Y+47	; 0x2f
   19d38:	04 59       	subi	r16, 0x94	; 148
   19d3a:	1f 4f       	sbci	r17, 0xFF	; 255
   19d3c:	1f a3       	std	Y+39, r17	; 0x27
   19d3e:	0e a3       	std	Y+38, r16	; 0x26
            else
            {
                warn = '!';
                if(debuglevel & LIF_DEBUG)
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n", 
   19d40:	88 ee       	ldi	r24, 0xE8	; 232
   19d42:	94 e3       	ldi	r25, 0x34	; 52
   19d44:	6c 01       	movw	r12, r24
   19d46:	e1 2c       	mov	r14, r1
   19d48:	0e a5       	ldd	r16, Y+46	; 0x2e
   19d4a:	1f a5       	ldd	r17, Y+47	; 0x2f
   19d4c:	01 5b       	subi	r16, 0xB1	; 177
   19d4e:	1f 4f       	sbci	r17, 0xFF	; 255
   19d50:	1f 8f       	std	Y+31, r17	; 0x1f
   19d52:	0e 8f       	std	Y+30, r16	; 0x1e
            }
        }


        // name type start size
        printf("%-10s  %04Xh      %8lXh   %9ld%c      %4d   %s\n", 
   19d54:	88 eb       	ldi	r24, 0xB8	; 184
   19d56:	94 e3       	ldi	r25, 0x34	; 52
   19d58:	2c 01       	movw	r4, r24
   19d5a:	61 2c       	mov	r6, r1
   19d5c:	0e a5       	ldd	r16, Y+46	; 0x2e
   19d5e:	1f a5       	ldd	r17, Y+47	; 0x2f
   19d60:	04 5a       	subi	r16, 0xA4	; 164
   19d62:	1f 4f       	sbci	r17, 0xFF	; 255
   19d64:	19 a7       	std	Y+41, r17	; 0x29
   19d66:	08 a7       	std	Y+40, r16	; 0x28
   19d68:	0e a5       	ldd	r16, Y+46	; 0x2e
   19d6a:	1f a5       	ldd	r17, Y+47	; 0x2f
   19d6c:	02 59       	subi	r16, 0x92	; 146
   19d6e:	1f 4f       	sbci	r17, 0xFF	; 255
   19d70:	1b a7       	std	Y+43, r17	; 0x2b
   19d72:	0a a7       	std	Y+42, r16	; 0x2a
   19d74:	0e a5       	ldd	r16, Y+46	; 0x2e
   19d76:	1f a5       	ldd	r17, Y+47	; 0x2f
   19d78:	0c 59       	subi	r16, 0x9C	; 156
   19d7a:	1f 4f       	sbci	r17, 0xFF	; 255
   19d7c:	1d a7       	std	Y+45, r17	; 0x2d
   19d7e:	0c a7       	std	Y+44, r16	; 0x2c
    
    printf("NAME         TYPE   START SECTOR        SIZE    RECSIZE   DATE\n");
    while(1)
    {

        if(!lif_readdirindex(LIF,index))
   19d80:	b1 01       	movw	r22, r2
   19d82:	8e a5       	ldd	r24, Y+46	; 0x2e
   19d84:	9f a5       	ldd	r25, Y+47	; 0x2f
   19d86:	55 d8       	rcall	.-3926   	; 0x18e32 <lif_readdirindex>
   19d88:	89 2b       	or	r24, r25
   19d8a:	09 f4       	brne	.+2      	; 0x19d8e <lif_dir+0x10e>
   19d8c:	ad c0       	rjmp	.+346    	; 0x19ee8 <lif_dir+0x268>
            break;


        if(LIF->DIR.FileType == 0xffff)
   19d8e:	ac 8d       	ldd	r26, Y+28	; 0x1c
   19d90:	bd 8d       	ldd	r27, Y+29	; 0x1d
   19d92:	8d 91       	ld	r24, X+
   19d94:	9c 91       	ld	r25, X
   19d96:	8f 3f       	cpi	r24, 0xFF	; 255
   19d98:	bf ef       	ldi	r27, 0xFF	; 255
   19d9a:	9b 07       	cpc	r25, r27
   19d9c:	09 f4       	brne	.+2      	; 0x19da0 <lif_dir+0x120>
   19d9e:	a4 c0       	rjmp	.+328    	; 0x19ee8 <lif_dir+0x268>
            break;

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);
   19da0:	ec a1       	ldd	r30, Y+36	; 0x24
   19da2:	fd a1       	ldd	r31, Y+37	; 0x25
   19da4:	40 81       	ld	r20, Z
   19da6:	51 81       	ldd	r21, Z+1	; 0x01
   19da8:	62 81       	ldd	r22, Z+2	; 0x02
   19daa:	73 81       	ldd	r23, Z+3	; 0x03
   19dac:	00 27       	eor	r16, r16
   19dae:	14 2f       	mov	r17, r20
   19db0:	25 2f       	mov	r18, r21
   19db2:	36 2f       	mov	r19, r22
   19db4:	08 8f       	std	Y+24, r16	; 0x18
   19db6:	19 8f       	std	Y+25, r17	; 0x19
   19db8:	2a 8f       	std	Y+26, r18	; 0x1a
   19dba:	3b 8f       	std	Y+27, r19	; 0x1b

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
   19dbc:	8c 7f       	andi	r24, 0xFC	; 252
   19dbe:	80 31       	cpi	r24, 0x10	; 16
   19dc0:	90 4e       	sbci	r25, 0xE0	; 224
   19dc2:	09 f0       	breq	.+2      	; 0x19dc6 <lif_dir+0x146>
   19dc4:	4b c0       	rjmp	.+150    	; 0x19e5c <lif_dir+0x1dc>
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   19dc6:	ae a1       	ldd	r26, Y+38	; 0x26
   19dc8:	bf a1       	ldd	r27, Y+39	; 0x27
   19dca:	8d 91       	ld	r24, X+
   19dcc:	9c 91       	ld	r25, X
   19dce:	00 97       	sbiw	r24, 0x00	; 0
   19dd0:	b9 f0       	breq	.+46     	; 0x19e00 <lif_dir+0x180>
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   19dd2:	4c 01       	movw	r8, r24
   19dd4:	a1 2c       	mov	r10, r1
   19dd6:	b1 2c       	mov	r11, r1
   19dd8:	33 27       	eor	r19, r19
   19dda:	2b 2d       	mov	r18, r11
   19ddc:	1a 2d       	mov	r17, r10
   19dde:	09 2d       	mov	r16, r9
    if(bytes % (long)LIF_SECTOR_SIZE)
   19de0:	88 23       	and	r24, r24
   19de2:	21 f0       	breq	.+8      	; 0x19dec <lif_dir+0x16c>
        ++sectors;
   19de4:	0f 5f       	subi	r16, 0xFF	; 255
   19de6:	1f 4f       	sbci	r17, 0xFF	; 255
   19de8:	2f 4f       	sbci	r18, 0xFF	; 255
   19dea:	3f 4f       	sbci	r19, 0xFF	; 255

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   19dec:	40 17       	cp	r20, r16
   19dee:	51 07       	cpc	r21, r17
   19df0:	62 07       	cpc	r22, r18
   19df2:	73 07       	cpc	r23, r19
   19df4:	29 f4       	brne	.+10     	; 0x19e00 <lif_dir+0x180>
            {
                bytes = LIF->DIR.FileBytes;
   19df6:	88 8e       	std	Y+24, r8	; 0x18
   19df8:	99 8e       	std	Y+25, r9	; 0x19
   19dfa:	aa 8e       	std	Y+26, r10	; 0x1a
   19dfc:	bb 8e       	std	Y+27, r11	; 0x1b
   19dfe:	2e c0       	rjmp	.+92     	; 0x19e5c <lif_dir+0x1dc>
            }
            else
            {
                warn = '!';
                if(debuglevel & LIF_DEBUG)
   19e00:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   19e04:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   19e08:	32 ff       	sbrs	r19, 2
   19e0a:	24 c0       	rjmp	.+72     	; 0x19e54 <lif_dir+0x1d4>
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n", 
   19e0c:	4c 01       	movw	r8, r24
   19e0e:	a1 2c       	mov	r10, r1
   19e10:	b1 2c       	mov	r11, r1
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   19e12:	33 27       	eor	r19, r19
   19e14:	2b 2d       	mov	r18, r11
   19e16:	1a 2d       	mov	r17, r10
   19e18:	09 2d       	mov	r16, r9
    if(bytes % (long)LIF_SECTOR_SIZE)
   19e1a:	88 23       	and	r24, r24
   19e1c:	21 f0       	breq	.+8      	; 0x19e26 <lif_dir+0x1a6>
        ++sectors;
   19e1e:	0f 5f       	subi	r16, 0xFF	; 255
   19e20:	1f 4f       	sbci	r17, 0xFF	; 255
   19e22:	2f 4f       	sbci	r18, 0xFF	; 255
   19e24:	3f 4f       	sbci	r19, 0xFF	; 255
            else
            {
                warn = '!';
                if(debuglevel & LIF_DEBUG)
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n", 
   19e26:	ed b7       	in	r30, 0x3d	; 61
   19e28:	fe b7       	in	r31, 0x3e	; 62
   19e2a:	46 87       	std	Z+14, r20	; 0x0e
   19e2c:	57 87       	std	Z+15, r21	; 0x0f
   19e2e:	60 8b       	std	Z+16, r22	; 0x10
   19e30:	71 8b       	std	Z+17, r23	; 0x11
   19e32:	02 87       	std	Z+10, r16	; 0x0a
   19e34:	13 87       	std	Z+11, r17	; 0x0b
   19e36:	24 87       	std	Z+12, r18	; 0x0c
   19e38:	35 87       	std	Z+13, r19	; 0x0d
   19e3a:	86 82       	std	Z+6, r8	; 0x06
   19e3c:	97 82       	std	Z+7, r9	; 0x07
   19e3e:	a0 86       	std	Z+8, r10	; 0x08
   19e40:	b1 86       	std	Z+9, r11	; 0x09
   19e42:	0e 8d       	ldd	r16, Y+30	; 0x1e
   19e44:	1f 8d       	ldd	r17, Y+31	; 0x1f
   19e46:	15 83       	std	Z+5, r17	; 0x05
   19e48:	04 83       	std	Z+4, r16	; 0x04
   19e4a:	c1 82       	std	Z+1, r12	; 0x01
   19e4c:	d2 82       	std	Z+2, r13	; 0x02
   19e4e:	e3 82       	std	Z+3, r14	; 0x03
   19e50:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
            {
                bytes = LIF->DIR.FileBytes;
            }
            else
            {
                warn = '!';
   19e54:	01 e2       	ldi	r16, 0x21	; 33
   19e56:	10 e0       	ldi	r17, 0x00	; 0
   19e58:	1f 8b       	std	Y+23, r17	; 0x17
   19e5a:	0e 8b       	std	Y+22, r16	; 0x16
            }
        }


        // name type start size
        printf("%-10s  %04Xh      %8lXh   %9ld%c      %4d   %s\n", 
   19e5c:	ac 8d       	ldd	r26, Y+28	; 0x1c
   19e5e:	bd 8d       	ldd	r27, Y+29	; 0x1d
   19e60:	8d 90       	ld	r8, X+
   19e62:	9c 90       	ld	r9, X
   19e64:	81 14       	cp	r8, r1
   19e66:	91 04       	cpc	r9, r1
   19e68:	19 f0       	breq	.+6      	; 0x19e70 <lif_dir+0x1f0>
   19e6a:	0e 8d       	ldd	r16, Y+30	; 0x1e
   19e6c:	1f 8d       	ldd	r17, Y+31	; 0x1f
   19e6e:	02 c0       	rjmp	.+4      	; 0x19e74 <lif_dir+0x1f4>
   19e70:	0b e3       	ldi	r16, 0x3B	; 59
   19e72:	16 e1       	ldi	r17, 0x16	; 22
   19e74:	a8 a5       	ldd	r26, Y+40	; 0x28
   19e76:	b9 a5       	ldd	r27, Y+41	; 0x29
   19e78:	8d 91       	ld	r24, X+
   19e7a:	9d 91       	ld	r25, X+
   19e7c:	0d 90       	ld	r0, X+
   19e7e:	bc 91       	ld	r27, X
   19e80:	a0 2d       	mov	r26, r0
   19e82:	88 a3       	std	Y+32, r24	; 0x20
   19e84:	99 a3       	std	Y+33, r25	; 0x21
   19e86:	aa a3       	std	Y+34, r26	; 0x22
   19e88:	bb a3       	std	Y+35, r27	; 0x23
   19e8a:	ea a5       	ldd	r30, Y+42	; 0x2a
   19e8c:	fb a5       	ldd	r31, Y+43	; 0x2b
   19e8e:	a0 80       	ld	r10, Z
   19e90:	b1 80       	ldd	r11, Z+1	; 0x01
   19e92:	8c a5       	ldd	r24, Y+44	; 0x2c
   19e94:	9d a5       	ldd	r25, Y+45	; 0x2d
   19e96:	0e 94 05 c2 	call	0x1840a	; 0x1840a <lif_lifbcd2timestr>
   19e9a:	ed b7       	in	r30, 0x3d	; 61
   19e9c:	fe b7       	in	r31, 0x3e	; 62
   19e9e:	95 8b       	std	Z+21, r25	; 0x15
   19ea0:	84 8b       	std	Z+20, r24	; 0x14
   19ea2:	b3 8a       	std	Z+19, r11	; 0x13
   19ea4:	a2 8a       	std	Z+18, r10	; 0x12
   19ea6:	2e 89       	ldd	r18, Y+22	; 0x16
   19ea8:	3f 89       	ldd	r19, Y+23	; 0x17
   19eaa:	31 8b       	std	Z+17, r19	; 0x11
   19eac:	20 8b       	std	Z+16, r18	; 0x10
   19eae:	88 8d       	ldd	r24, Y+24	; 0x18
   19eb0:	99 8d       	ldd	r25, Y+25	; 0x19
   19eb2:	aa 8d       	ldd	r26, Y+26	; 0x1a
   19eb4:	bb 8d       	ldd	r27, Y+27	; 0x1b
   19eb6:	84 87       	std	Z+12, r24	; 0x0c
   19eb8:	95 87       	std	Z+13, r25	; 0x0d
   19eba:	a6 87       	std	Z+14, r26	; 0x0e
   19ebc:	b7 87       	std	Z+15, r27	; 0x0f
   19ebe:	88 a1       	ldd	r24, Y+32	; 0x20
   19ec0:	99 a1       	ldd	r25, Y+33	; 0x21
   19ec2:	aa a1       	ldd	r26, Y+34	; 0x22
   19ec4:	bb a1       	ldd	r27, Y+35	; 0x23
   19ec6:	80 87       	std	Z+8, r24	; 0x08
   19ec8:	91 87       	std	Z+9, r25	; 0x09
   19eca:	a2 87       	std	Z+10, r26	; 0x0a
   19ecc:	b3 87       	std	Z+11, r27	; 0x0b
   19ece:	97 82       	std	Z+7, r9	; 0x07
   19ed0:	86 82       	std	Z+6, r8	; 0x06
   19ed2:	15 83       	std	Z+5, r17	; 0x05
   19ed4:	04 83       	std	Z+4, r16	; 0x04
   19ed6:	41 82       	std	Z+1, r4	; 0x01
   19ed8:	52 82       	std	Z+2, r5	; 0x02
   19eda:	63 82       	std	Z+3, r6	; 0x03
   19edc:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
            (long)bytes, 
            warn,
            (int)LIF->DIR.SectorSize,
            lif_lifbcd2timestr(LIF->DIR.date));

        ++index;
   19ee0:	ff ef       	ldi	r31, 0xFF	; 255
   19ee2:	2f 1a       	sub	r2, r31
   19ee4:	3f 0a       	sbc	r3, r31
    }   
   19ee6:	4c cf       	rjmp	.-360    	; 0x19d80 <lif_dir+0x100>

    printf("\n");
   19ee8:	86 eb       	ldi	r24, 0xB6	; 182
   19eea:	94 e3       	ldi	r25, 0x34	; 52
   19eec:	a0 e0       	ldi	r26, 0x00	; 0
   19eee:	ed b7       	in	r30, 0x3d	; 61
   19ef0:	fe b7       	in	r31, 0x3e	; 62
   19ef2:	81 83       	std	Z+1, r24	; 0x01
   19ef4:	92 83       	std	Z+2, r25	; 0x02
   19ef6:	a3 83       	std	Z+3, r26	; 0x03
   19ef8:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    printf("%8ld Files\n", (long)LIF->files);
   19efc:	ee a5       	ldd	r30, Y+46	; 0x2e
   19efe:	ff a5       	ldd	r31, Y+47	; 0x2f
   19f00:	84 8d       	ldd	r24, Z+28	; 0x1c
   19f02:	95 8d       	ldd	r25, Z+29	; 0x1d
   19f04:	09 2e       	mov	r0, r25
   19f06:	00 0c       	add	r0, r0
   19f08:	aa 0b       	sbc	r26, r26
   19f0a:	bb 0b       	sbc	r27, r27
   19f0c:	ed b7       	in	r30, 0x3d	; 61
   19f0e:	fe b7       	in	r31, 0x3e	; 62
   19f10:	84 83       	std	Z+4, r24	; 0x04
   19f12:	95 83       	std	Z+5, r25	; 0x05
   19f14:	a6 83       	std	Z+6, r26	; 0x06
   19f16:	b7 83       	std	Z+7, r27	; 0x07
   19f18:	8a ea       	ldi	r24, 0xAA	; 170
   19f1a:	94 e3       	ldi	r25, 0x34	; 52
   19f1c:	a0 e0       	ldi	r26, 0x00	; 0
   19f1e:	81 83       	std	Z+1, r24	; 0x01
   19f20:	92 83       	std	Z+2, r25	; 0x02
   19f22:	a3 83       	std	Z+3, r26	; 0x03
   19f24:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    printf("%8ld Purged\n", (long)LIF->purged);
   19f28:	ee a5       	ldd	r30, Y+46	; 0x2e
   19f2a:	ff a5       	ldd	r31, Y+47	; 0x2f
   19f2c:	86 8d       	ldd	r24, Z+30	; 0x1e
   19f2e:	97 8d       	ldd	r25, Z+31	; 0x1f
   19f30:	09 2e       	mov	r0, r25
   19f32:	00 0c       	add	r0, r0
   19f34:	aa 0b       	sbc	r26, r26
   19f36:	bb 0b       	sbc	r27, r27
   19f38:	ed b7       	in	r30, 0x3d	; 61
   19f3a:	fe b7       	in	r31, 0x3e	; 62
   19f3c:	84 83       	std	Z+4, r24	; 0x04
   19f3e:	95 83       	std	Z+5, r25	; 0x05
   19f40:	a6 83       	std	Z+6, r26	; 0x06
   19f42:	b7 83       	std	Z+7, r27	; 0x07
   19f44:	8d e9       	ldi	r24, 0x9D	; 157
   19f46:	94 e3       	ldi	r25, 0x34	; 52
   19f48:	a0 e0       	ldi	r26, 0x00	; 0
   19f4a:	81 83       	std	Z+1, r24	; 0x01
   19f4c:	92 83       	std	Z+2, r25	; 0x02
   19f4e:	a3 83       	std	Z+3, r26	; 0x03
   19f50:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    printf("%8ld Dir  start\n",   (long)LIF->VOL.DirStartSector);
   19f54:	ee a5       	ldd	r30, Y+46	; 0x2e
   19f56:	ff a5       	ldd	r31, Y+47	; 0x2f
   19f58:	85 a5       	ldd	r24, Z+45	; 0x2d
   19f5a:	96 a5       	ldd	r25, Z+46	; 0x2e
   19f5c:	a7 a5       	ldd	r26, Z+47	; 0x2f
   19f5e:	b0 a9       	ldd	r27, Z+48	; 0x30
   19f60:	ed b7       	in	r30, 0x3d	; 61
   19f62:	fe b7       	in	r31, 0x3e	; 62
   19f64:	84 83       	std	Z+4, r24	; 0x04
   19f66:	95 83       	std	Z+5, r25	; 0x05
   19f68:	a6 83       	std	Z+6, r26	; 0x06
   19f6a:	b7 83       	std	Z+7, r27	; 0x07
   19f6c:	8c e8       	ldi	r24, 0x8C	; 140
   19f6e:	94 e3       	ldi	r25, 0x34	; 52
   19f70:	a0 e0       	ldi	r26, 0x00	; 0
   19f72:	81 83       	std	Z+1, r24	; 0x01
   19f74:	92 83       	std	Z+2, r25	; 0x02
   19f76:	a3 83       	std	Z+3, r26	; 0x03
   19f78:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    printf("%8ld Dir  sectors\n", (long)LIF->VOL.DirSectors);
   19f7c:	ee a5       	ldd	r30, Y+46	; 0x2e
   19f7e:	ff a5       	ldd	r31, Y+47	; 0x2f
   19f80:	85 a9       	ldd	r24, Z+53	; 0x35
   19f82:	96 a9       	ldd	r25, Z+54	; 0x36
   19f84:	a7 a9       	ldd	r26, Z+55	; 0x37
   19f86:	b0 ad       	ldd	r27, Z+56	; 0x38
   19f88:	ed b7       	in	r30, 0x3d	; 61
   19f8a:	fe b7       	in	r31, 0x3e	; 62
   19f8c:	84 83       	std	Z+4, r24	; 0x04
   19f8e:	95 83       	std	Z+5, r25	; 0x05
   19f90:	a6 83       	std	Z+6, r26	; 0x06
   19f92:	b7 83       	std	Z+7, r27	; 0x07
   19f94:	89 e7       	ldi	r24, 0x79	; 121
   19f96:	94 e3       	ldi	r25, 0x34	; 52
   19f98:	a0 e0       	ldi	r26, 0x00	; 0
   19f9a:	81 83       	std	Z+1, r24	; 0x01
   19f9c:	92 83       	std	Z+2, r25	; 0x02
   19f9e:	a3 83       	std	Z+3, r26	; 0x03
   19fa0:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    printf("%8ld Used sectors\n", (long)LIF->usedsectors);
   19fa4:	ee a5       	ldd	r30, Y+46	; 0x2e
   19fa6:	ff a5       	ldd	r31, Y+47	; 0x2f
   19fa8:	84 89       	ldd	r24, Z+20	; 0x14
   19faa:	95 89       	ldd	r25, Z+21	; 0x15
   19fac:	a6 89       	ldd	r26, Z+22	; 0x16
   19fae:	b7 89       	ldd	r27, Z+23	; 0x17
   19fb0:	ed b7       	in	r30, 0x3d	; 61
   19fb2:	fe b7       	in	r31, 0x3e	; 62
   19fb4:	84 83       	std	Z+4, r24	; 0x04
   19fb6:	95 83       	std	Z+5, r25	; 0x05
   19fb8:	a6 83       	std	Z+6, r26	; 0x06
   19fba:	b7 83       	std	Z+7, r27	; 0x07
   19fbc:	86 e6       	ldi	r24, 0x66	; 102
   19fbe:	94 e3       	ldi	r25, 0x34	; 52
   19fc0:	a0 e0       	ldi	r26, 0x00	; 0
   19fc2:	81 83       	std	Z+1, r24	; 0x01
   19fc4:	92 83       	std	Z+2, r25	; 0x02
   19fc6:	a3 83       	std	Z+3, r26	; 0x03
   19fc8:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    printf("%8ld Free sectors\n", (long)LIF->freesectors);
   19fcc:	ee a5       	ldd	r30, Y+46	; 0x2e
   19fce:	ff a5       	ldd	r31, Y+47	; 0x2f
   19fd0:	80 8d       	ldd	r24, Z+24	; 0x18
   19fd2:	91 8d       	ldd	r25, Z+25	; 0x19
   19fd4:	a2 8d       	ldd	r26, Z+26	; 0x1a
   19fd6:	b3 8d       	ldd	r27, Z+27	; 0x1b
   19fd8:	ed b7       	in	r30, 0x3d	; 61
   19fda:	fe b7       	in	r31, 0x3e	; 62
   19fdc:	84 83       	std	Z+4, r24	; 0x04
   19fde:	95 83       	std	Z+5, r25	; 0x05
   19fe0:	a6 83       	std	Z+6, r26	; 0x06
   19fe2:	b7 83       	std	Z+7, r27	; 0x07
   19fe4:	83 e5       	ldi	r24, 0x53	; 83
   19fe6:	94 e3       	ldi	r25, 0x34	; 52
   19fe8:	a0 e0       	ldi	r26, 0x00	; 0
   19fea:	81 83       	std	Z+1, r24	; 0x01
   19fec:	92 83       	std	Z+2, r25	; 0x02
   19fee:	a3 83       	std	Z+3, r26	; 0x03
   19ff0:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   19ff4:	8e a5       	ldd	r24, Y+46	; 0x2e
   19ff6:	9f a5       	ldd	r25, Y+47	; 0x2f
   19ff8:	0e 94 8b c6 	call	0x18d16	; 0x18d16 <lif_close_volume>
    printf("%8ld Dir  sectors\n", (long)LIF->VOL.DirSectors);
    printf("%8ld Used sectors\n", (long)LIF->usedsectors);
    printf("%8ld Free sectors\n", (long)LIF->freesectors);

    lif_closedir(LIF);
}
   19ffc:	af 96       	adiw	r28, 0x2f	; 47
   19ffe:	0f b6       	in	r0, 0x3f	; 63
   1a000:	f8 94       	cli
   1a002:	de bf       	out	0x3e, r29	; 62
   1a004:	0f be       	out	0x3f, r0	; 63
   1a006:	cd bf       	out	0x3d, r28	; 61
   1a008:	df 91       	pop	r29
   1a00a:	cf 91       	pop	r28
   1a00c:	1f 91       	pop	r17
   1a00e:	0f 91       	pop	r16
   1a010:	ef 90       	pop	r14
   1a012:	df 90       	pop	r13
   1a014:	cf 90       	pop	r12
   1a016:	bf 90       	pop	r11
   1a018:	af 90       	pop	r10
   1a01a:	9f 90       	pop	r9
   1a01c:	8f 90       	pop	r8
   1a01e:	6f 90       	pop	r6
   1a020:	5f 90       	pop	r5
   1a022:	4f 90       	pop	r4
   1a024:	3f 90       	pop	r3
   1a026:	2f 90       	pop	r2
   1a028:	08 95       	ret

0001a02a <lif_find_file>:
/// @param[in] *LIF: directory pointer
/// @param[in] liflabel: File name in LIF image
/// @return Directory index of record
MEMSPACE
int lif_find_file(lif_t *LIF, char *liflabel)
{
   1a02a:	a5 e0       	ldi	r26, 0x05	; 5
   1a02c:	b0 e0       	ldi	r27, 0x00	; 0
   1a02e:	eb e1       	ldi	r30, 0x1B	; 27
   1a030:	f0 ed       	ldi	r31, 0xD0	; 208
   1a032:	0c 94 e6 df 	jmp	0x1bfcc	; 0x1bfcc <__prologue_saves__+0x10>
   1a036:	7c 01       	movw	r14, r24
   1a038:	eb 01       	movw	r28, r22
    int index;

    if( !lif_checkname(liflabel) )
   1a03a:	cb 01       	movw	r24, r22
   1a03c:	0e 94 f6 be 	call	0x17dec	; 0x17dec <lif_checkname>
   1a040:	89 2b       	or	r24, r25
   1a042:	59 f4       	brne	.+22     	; 0x1a05a <lif_find_file+0x30>
    {
        if(debuglevel & GPIB_PPR)
   1a044:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1a048:	81 ff       	sbrs	r24, 1
   1a04a:	46 c0       	rjmp	.+140    	; 0x1a0d8 <lif_find_file+0xae>
            printf("lif_find_file:[%s] invalid characters\n", liflabel);
   1a04c:	ed b7       	in	r30, 0x3d	; 61
   1a04e:	fe b7       	in	r31, 0x3e	; 62
   1a050:	d5 83       	std	Z+5, r29	; 0x05
   1a052:	c4 83       	std	Z+4, r28	; 0x04
   1a054:	8c e2       	ldi	r24, 0x2C	; 44
   1a056:	94 e3       	ldi	r25, 0x34	; 52
   1a058:	13 c0       	rjmp	.+38     	; 0x1a080 <lif_find_file+0x56>
        return(-1);
    }
    if(strlen(liflabel) > 10)
   1a05a:	fe 01       	movw	r30, r28
   1a05c:	01 90       	ld	r0, Z+
   1a05e:	00 20       	and	r0, r0
   1a060:	e9 f7       	brne	.-6      	; 0x1a05c <lif_find_file+0x32>
   1a062:	31 97       	sbiw	r30, 0x01	; 1
   1a064:	ec 1b       	sub	r30, r28
   1a066:	fd 0b       	sbc	r31, r29
   1a068:	3b 97       	sbiw	r30, 0x0b	; 11
   1a06a:	88 f0       	brcs	.+34     	; 0x1a08e <lif_find_file+0x64>
    {
        if(debuglevel & GPIB_PPR)
   1a06c:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1a070:	81 ff       	sbrs	r24, 1
   1a072:	32 c0       	rjmp	.+100    	; 0x1a0d8 <lif_find_file+0xae>
            printf("lif_find_file:[%s] liflabel too big\n", liflabel);
   1a074:	ed b7       	in	r30, 0x3d	; 61
   1a076:	fe b7       	in	r31, 0x3e	; 62
   1a078:	d5 83       	std	Z+5, r29	; 0x05
   1a07a:	c4 83       	std	Z+4, r28	; 0x04
   1a07c:	87 e0       	ldi	r24, 0x07	; 7
   1a07e:	94 e3       	ldi	r25, 0x34	; 52
   1a080:	a0 e0       	ldi	r26, 0x00	; 0
   1a082:	81 83       	std	Z+1, r24	; 0x01
   1a084:	92 83       	std	Z+2, r25	; 0x02
   1a086:	a3 83       	std	Z+3, r26	; 0x03
   1a088:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   1a08c:	25 c0       	rjmp	.+74     	; 0x1a0d8 <lif_find_file+0xae>
        return(-1);
    }

    if(LIF == NULL)
   1a08e:	e1 14       	cp	r14, r1
   1a090:	f1 04       	cpc	r15, r1
   1a092:	11 f1       	breq	.+68     	; 0x1a0d8 <lif_find_file+0xae>
   1a094:	00 e0       	ldi	r16, 0x00	; 0
   1a096:	10 e0       	ldi	r17, 0x00	; 0
    while(1)
    {
        if(!lif_readdirindex(LIF,index))
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
   1a098:	67 01       	movw	r12, r14
   1a09a:	fa e5       	ldi	r31, 0x5A	; 90
   1a09c:	cf 0e       	add	r12, r31
   1a09e:	d1 1c       	adc	r13, r1
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1a0a0:	57 01       	movw	r10, r14
   1a0a2:	2f e4       	ldi	r18, 0x4F	; 79
   1a0a4:	a2 0e       	add	r10, r18
   1a0a6:	b1 1c       	adc	r11, r1
        return(-1);
    
    index = 0;
    while(1)
    {
        if(!lif_readdirindex(LIF,index))
   1a0a8:	b8 01       	movw	r22, r16
   1a0aa:	c7 01       	movw	r24, r14
   1a0ac:	0e 94 19 c7 	call	0x18e32	; 0x18e32 <lif_readdirindex>
   1a0b0:	89 2b       	or	r24, r25
   1a0b2:	91 f0       	breq	.+36     	; 0x1a0d8 <lif_find_file+0xae>
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
   1a0b4:	f6 01       	movw	r30, r12
   1a0b6:	80 81       	ld	r24, Z
   1a0b8:	91 81       	ldd	r25, Z+1	; 0x01
   1a0ba:	8f 3f       	cpi	r24, 0xFF	; 255
   1a0bc:	ff ef       	ldi	r31, 0xFF	; 255
   1a0be:	9f 07       	cpc	r25, r31
   1a0c0:	59 f0       	breq	.+22     	; 0x1a0d8 <lif_find_file+0xae>
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1a0c2:	89 2b       	or	r24, r25
   1a0c4:	31 f0       	breq	.+12     	; 0x1a0d2 <lif_find_file+0xa8>
   1a0c6:	be 01       	movw	r22, r28
   1a0c8:	c5 01       	movw	r24, r10
   1a0ca:	0e 94 04 31 	call	0x6208	; 0x6208 <strcasecmp>
   1a0ce:	89 2b       	or	r24, r25
   1a0d0:	31 f0       	breq	.+12     	; 0x1a0de <lif_find_file+0xb4>
            break;
        ++index;
   1a0d2:	0f 5f       	subi	r16, 0xFF	; 255
   1a0d4:	1f 4f       	sbci	r17, 0xFF	; 255
   1a0d6:	e8 cf       	rjmp	.-48     	; 0x1a0a8 <lif_find_file+0x7e>

    if( !lif_checkname(liflabel) )
    {
        if(debuglevel & GPIB_PPR)
            printf("lif_find_file:[%s] invalid characters\n", liflabel);
        return(-1);
   1a0d8:	8f ef       	ldi	r24, 0xFF	; 255
   1a0da:	9f ef       	ldi	r25, 0xFF	; 255
   1a0dc:	01 c0       	rjmp	.+2      	; 0x1a0e0 <lif_find_file+0xb6>
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1a0de:	c8 01       	movw	r24, r16
            break;
        ++index;
    }
    return(index);
}
   1a0e0:	cd b7       	in	r28, 0x3d	; 61
   1a0e2:	de b7       	in	r29, 0x3e	; 62
   1a0e4:	25 96       	adiw	r28, 0x05	; 5
   1a0e6:	ea e0       	ldi	r30, 0x0A	; 10
   1a0e8:	0c 94 02 e0 	jmp	0x1c004	; 0x1c004 <__epilogue_restores__+0x10>

0001a0ec <lif_e010_pad_sector>:
/// @param[in] offset: sector offset
/// @param[in] wbuf: E010 PAD data
/// @return size of E010 PAD data
MEMSPACE
int lif_e010_pad_sector(long offset, uint8_t *wbuf)
{
   1a0ec:	a5 e0       	ldi	r26, 0x05	; 5
   1a0ee:	b0 e0       	ldi	r27, 0x00	; 0
   1a0f0:	ec e7       	ldi	r30, 0x7C	; 124
   1a0f2:	f0 ed       	ldi	r31, 0xD0	; 208
   1a0f4:	0c 94 e8 df 	jmp	0x1bfd0	; 0x1bfd0 <__prologue_saves__+0x14>
   1a0f8:	6b 01       	movw	r12, r22
   1a0fa:	7c 01       	movw	r14, r24
   1a0fc:	8a 01       	movw	r16, r20
    int ind;
    int pos,rem;
    
    // Compute the current offset in this sector
    pos = (offset % (long)LIF_SECTOR_SIZE);
   1a0fe:	20 e0       	ldi	r18, 0x00	; 0
   1a100:	31 e0       	ldi	r19, 0x01	; 1
   1a102:	40 e0       	ldi	r20, 0x00	; 0
   1a104:	50 e0       	ldi	r21, 0x00	; 0
   1a106:	0e 94 93 df 	call	0x1bf26	; 0x1bf26 <__divmodsi4>
    if(!pos)
   1a10a:	61 15       	cp	r22, r1
   1a10c:	71 05       	cpc	r23, r1
   1a10e:	d1 f1       	breq	.+116    	; 0x1a184 <lif_e010_pad_sector+0x98>
        return(0);

    // Number of bytes free in this sector
    rem = (long)LIF_SECTOR_SIZE - (long)pos;
   1a110:	c0 e0       	ldi	r28, 0x00	; 0
   1a112:	d1 e0       	ldi	r29, 0x01	; 1
   1a114:	c6 1b       	sub	r28, r22
   1a116:	d7 0b       	sbc	r29, r23

    // Bytes written to wbuf
    ind = 0;
    // PAD
    wbuf[ind++] = 0xEF;
   1a118:	f8 01       	movw	r30, r16
   1a11a:	8f ee       	ldi	r24, 0xEF	; 239
   1a11c:	81 93       	st	Z+, r24
    while(ind<rem)
        wbuf[ind++] = 0xff;
   1a11e:	2f ef       	ldi	r18, 0xFF	; 255

    // Bytes written to wbuf
    ind = 0;
    // PAD
    wbuf[ind++] = 0xEF;
    while(ind<rem)
   1a120:	cf 01       	movw	r24, r30
   1a122:	80 1b       	sub	r24, r16
   1a124:	91 0b       	sbc	r25, r17
   1a126:	8c 17       	cp	r24, r28
   1a128:	9d 07       	cpc	r25, r29
   1a12a:	14 f4       	brge	.+4      	; 0x1a130 <lif_e010_pad_sector+0x44>
        wbuf[ind++] = 0xff;
   1a12c:	21 93       	st	Z+, r18
   1a12e:	f8 cf       	rjmp	.-16     	; 0x1a120 <lif_e010_pad_sector+0x34>
   1a130:	1c 16       	cp	r1, r28
   1a132:	1d 06       	cpc	r1, r29
   1a134:	14 f0       	brlt	.+4      	; 0x1a13a <lif_e010_pad_sector+0x4e>
   1a136:	c1 e0       	ldi	r28, 0x01	; 1
   1a138:	d0 e0       	ldi	r29, 0x00	; 0

    pos = (offset + (long) ind)  % (long) LIF_SECTOR_SIZE;
   1a13a:	ce 01       	movw	r24, r28
   1a13c:	0d 2e       	mov	r0, r29
   1a13e:	00 0c       	add	r0, r0
   1a140:	aa 0b       	sbc	r26, r26
   1a142:	bb 0b       	sbc	r27, r27
   1a144:	bc 01       	movw	r22, r24
   1a146:	cd 01       	movw	r24, r26
   1a148:	6c 0d       	add	r22, r12
   1a14a:	7d 1d       	adc	r23, r13
   1a14c:	8e 1d       	adc	r24, r14
   1a14e:	9f 1d       	adc	r25, r15
   1a150:	20 e0       	ldi	r18, 0x00	; 0
   1a152:	31 e0       	ldi	r19, 0x01	; 1
   1a154:	40 e0       	ldi	r20, 0x00	; 0
   1a156:	50 e0       	ldi	r21, 0x00	; 0
   1a158:	0e 94 93 df 	call	0x1bf26	; 0x1bf26 <__divmodsi4>
    // NEW SECTOR
    // Debugging make sure we are at sector boundry
    if(pos)
   1a15c:	61 15       	cp	r22, r1
   1a15e:	71 05       	cpc	r23, r1
   1a160:	a1 f0       	breq	.+40     	; 0x1a18a <lif_e010_pad_sector+0x9e>
    {
        if(debuglevel & GPIB_PPR)
   1a162:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   1a166:	21 ff       	sbrs	r18, 1
   1a168:	12 c0       	rjmp	.+36     	; 0x1a18e <lif_e010_pad_sector+0xa2>
            printf("lif_e010_dap_sector: expected sector boundry: offset:%d\n", (int) pos);
   1a16a:	ed b7       	in	r30, 0x3d	; 61
   1a16c:	fe b7       	in	r31, 0x3e	; 62
   1a16e:	75 83       	std	Z+5, r23	; 0x05
   1a170:	64 83       	std	Z+4, r22	; 0x04
   1a172:	8e ec       	ldi	r24, 0xCE	; 206
   1a174:	93 e3       	ldi	r25, 0x33	; 51
   1a176:	a0 e0       	ldi	r26, 0x00	; 0
   1a178:	81 83       	std	Z+1, r24	; 0x01
   1a17a:	92 83       	std	Z+2, r25	; 0x02
   1a17c:	a3 83       	std	Z+3, r26	; 0x03
   1a17e:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   1a182:	05 c0       	rjmp	.+10     	; 0x1a18e <lif_e010_pad_sector+0xa2>
    int pos,rem;
    
    // Compute the current offset in this sector
    pos = (offset % (long)LIF_SECTOR_SIZE);
    if(!pos)
        return(0);
   1a184:	80 e0       	ldi	r24, 0x00	; 0
   1a186:	90 e0       	ldi	r25, 0x00	; 0
   1a188:	04 c0       	rjmp	.+8      	; 0x1a192 <lif_e010_pad_sector+0xa6>
   1a18a:	ce 01       	movw	r24, r28
   1a18c:	02 c0       	rjmp	.+4      	; 0x1a192 <lif_e010_pad_sector+0xa6>
    // Debugging make sure we are at sector boundry
    if(pos)
    {
        if(debuglevel & GPIB_PPR)
            printf("lif_e010_dap_sector: expected sector boundry: offset:%d\n", (int) pos);
        return(-1);
   1a18e:	8f ef       	ldi	r24, 0xFF	; 255
   1a190:	9f ef       	ldi	r25, 0xFF	; 255
    }
    return(ind);
}
   1a192:	cd b7       	in	r28, 0x3d	; 61
   1a194:	de b7       	in	r29, 0x3e	; 62
   1a196:	25 96       	adiw	r28, 0x05	; 5
   1a198:	e8 e0       	ldi	r30, 0x08	; 8
   1a19a:	0c 94 04 e0 	jmp	0x1c008	; 0x1c008 <__epilogue_restores__+0x14>

0001a19e <lif_ascii_string_to_e010>:
/// @param[in] offset: E010 data sector offset, only used in formatting wbuf with headers
/// @param[in] wbuf: E010 data result
/// @return size of E010 data
MEMSPACE
int lif_ascii_string_to_e010(char *str, long offset, uint8_t *wbuf)
{
   1a19e:	a5 e0       	ldi	r26, 0x05	; 5
   1a1a0:	b0 e0       	ldi	r27, 0x00	; 0
   1a1a2:	e5 ed       	ldi	r30, 0xD5	; 213
   1a1a4:	f0 ed       	ldi	r31, 0xD0	; 208
   1a1a6:	0c 94 de df 	jmp	0x1bfbc	; 0x1bfbc <__prologue_saves__>
   1a1aa:	ec 01       	movw	r28, r24
   1a1ac:	4a 01       	movw	r8, r20
   1a1ae:	5b 01       	movw	r10, r22
   1a1b0:	79 01       	movw	r14, r18
    int ind;
    int len;
    int pos,rem;
    
    // String size
    len = strlen(str);
   1a1b2:	fc 01       	movw	r30, r24
   1a1b4:	01 90       	ld	r0, Z+
   1a1b6:	00 20       	and	r0, r0
   1a1b8:	e9 f7       	brne	.-6      	; 0x1a1b4 <lif_ascii_string_to_e010+0x16>
   1a1ba:	31 97       	sbiw	r30, 0x01	; 1
   1a1bc:	6f 01       	movw	r12, r30
   1a1be:	c8 1a       	sub	r12, r24
   1a1c0:	d9 0a       	sbc	r13, r25
    ind = 0;

    // Compute the current offset in this sector
    pos = (offset % (long) LIF_SECTOR_SIZE);
    // Number of bytes free in this sector
    rem = (long) LIF_SECTOR_SIZE - (long) pos;
   1a1c2:	41 2c       	mov	r4, r1
   1a1c4:	51 2c       	mov	r5, r1
   1a1c6:	32 01       	movw	r6, r4
   1a1c8:	53 94       	inc	r5
   1a1ca:	cb 01       	movw	r24, r22
   1a1cc:	ba 01       	movw	r22, r20
   1a1ce:	a3 01       	movw	r20, r6
   1a1d0:	92 01       	movw	r18, r4
   1a1d2:	0e 94 93 df 	call	0x1bf26	; 0x1bf26 <__divmodsi4>
   1a1d6:	21 2c       	mov	r2, r1
   1a1d8:	33 24       	eor	r3, r3
   1a1da:	33 94       	inc	r3
   1a1dc:	c1 01       	movw	r24, r2
   1a1de:	86 1b       	sub	r24, r22
   1a1e0:	97 0b       	sbc	r25, r23

    /// We ALWAYS pad a sector if:
    ///   There is no room for a 0xdf single header 
    ///   - OR - 
    ///   Spliting a string takes more space then padding here (extra header)
    if(rem < 6)
   1a1e2:	86 30       	cpi	r24, 0x06	; 6
   1a1e4:	91 05       	cpc	r25, r1
   1a1e6:	20 f0       	brcs	.+8      	; 0x1a1f0 <lif_ascii_string_to_e010+0x52>
    ind = 0;

    // Compute the current offset in this sector
    pos = (offset % (long) LIF_SECTOR_SIZE);
    // Number of bytes free in this sector
    rem = (long) LIF_SECTOR_SIZE - (long) pos;
   1a1e8:	1c 01       	movw	r2, r24
    
    // String size
    len = strlen(str);

    // Output buffer index
    ind = 0;
   1a1ea:	00 e0       	ldi	r16, 0x00	; 0
   1a1ec:	10 e0       	ldi	r17, 0x00	; 0
   1a1ee:	17 c0       	rjmp	.+46     	; 0x1a21e <lif_ascii_string_to_e010+0x80>
    ///   There is no room for a 0xdf single header 
    ///   - OR - 
    ///   Spliting a string takes more space then padding here (extra header)
    if(rem < 6)
    {
        ind = lif_e010_pad_sector(offset, wbuf);
   1a1f0:	a7 01       	movw	r20, r14
   1a1f2:	c5 01       	movw	r24, r10
   1a1f4:	b4 01       	movw	r22, r8
   1a1f6:	7a df       	rcall	.-268    	; 0x1a0ec <lif_e010_pad_sector>
   1a1f8:	8c 01       	movw	r16, r24
        if(ind < 0)
   1a1fa:	97 fd       	sbrc	r25, 7
   1a1fc:	81 c0       	rjmp	.+258    	; 0x1a300 <lif_ascii_string_to_e010+0x162>
            return(ind);

        // Compute the current offset in this sector
        pos = ((offset + ind) % (long) LIF_SECTOR_SIZE);
        // Number of bytes free in this sector
        rem = (long) LIF_SECTOR_SIZE - pos;
   1a1fe:	09 2e       	mov	r0, r25
   1a200:	00 0c       	add	r0, r0
   1a202:	aa 0b       	sbc	r26, r26
   1a204:	bb 0b       	sbc	r27, r27
   1a206:	bc 01       	movw	r22, r24
   1a208:	cd 01       	movw	r24, r26
   1a20a:	68 0d       	add	r22, r8
   1a20c:	79 1d       	adc	r23, r9
   1a20e:	8a 1d       	adc	r24, r10
   1a210:	9b 1d       	adc	r25, r11
   1a212:	a3 01       	movw	r20, r6
   1a214:	92 01       	movw	r18, r4
   1a216:	0e 94 93 df 	call	0x1bf26	; 0x1bf26 <__divmodsi4>
   1a21a:	26 1a       	sub	r2, r22
   1a21c:	37 0a       	sbc	r3, r23
   1a21e:	f7 01       	movw	r30, r14
   1a220:	e0 0f       	add	r30, r16
   1a222:	f1 1f       	adc	r31, r17
   1a224:	0d 5f       	subi	r16, 0xFD	; 253
   1a226:	1f 4f       	sbci	r17, 0xFF	; 255
    }

    // Note: IMPORTANT we have >= 6 bytes!!!

    // Do not have to split, there is enough room
    if(rem >= (3 + len)) 
   1a228:	c6 01       	movw	r24, r12
   1a22a:	02 96       	adiw	r24, 0x02	; 2
   1a22c:	82 15       	cp	r24, r2
   1a22e:	93 05       	cpc	r25, r3
   1a230:	84 f4       	brge	.+32     	; 0x1a252 <lif_ascii_string_to_e010+0xb4>
    {

        // Write string in new sector
        // The full string + header will fit
        wbuf[ind++] = 0xDF;
   1a232:	8f ed       	ldi	r24, 0xDF	; 223
   1a234:	80 83       	st	Z, r24
        wbuf[ind++] = len & 0xff;
   1a236:	c1 82       	std	Z+1, r12	; 0x01
        wbuf[ind++] = (len >> 8) & 0xff;
   1a238:	d2 82       	std	Z+2, r13	; 0x02
   1a23a:	f7 01       	movw	r30, r14
   1a23c:	e0 0f       	add	r30, r16
   1a23e:	f1 1f       	adc	r31, r17
   1a240:	cf 01       	movw	r24, r30
   1a242:	8e 19       	sub	r24, r14
   1a244:	9f 09       	sbc	r25, r15
        // Write string
        while(*str)
   1a246:	29 91       	ld	r18, Y+
   1a248:	22 23       	and	r18, r18
   1a24a:	09 f4       	brne	.+2      	; 0x1a24e <lif_ascii_string_to_e010+0xb0>
   1a24c:	59 c0       	rjmp	.+178    	; 0x1a300 <lif_ascii_string_to_e010+0x162>
            wbuf[ind++] = *str++;
   1a24e:	21 93       	st	Z+, r18
   1a250:	f7 cf       	rjmp	.-18     	; 0x1a240 <lif_ascii_string_to_e010+0xa2>

        // CURRENT SECTOR
        // String spans a sector , so split the string

        // 1st Split string header
        wbuf[ind++] = 0xCF;
   1a252:	8f ec       	ldi	r24, 0xCF	; 207
   1a254:	80 83       	st	Z, r24
        wbuf[ind++] = len & 0xff;
   1a256:	c1 82       	std	Z+1, r12	; 0x01
        wbuf[ind++] = (len >>8) & 0xff;
   1a258:	d2 82       	std	Z+2, r13	; 0x02
   1a25a:	d7 01       	movw	r26, r14
   1a25c:	a0 0f       	add	r26, r16
   1a25e:	b1 1f       	adc	r27, r17
        // Write as much of the string as we can in this sector
        while(*str && ind<rem)
   1a260:	fe 01       	movw	r30, r28
   1a262:	81 91       	ld	r24, Z+
   1a264:	81 11       	cpse	r24, r1
   1a266:	0e c0       	rjmp	.+28     	; 0x1a284 <lif_ascii_string_to_e010+0xe6>
            wbuf[ind++] = *str++;

        // NEW SECTOR
        // Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
   1a268:	c8 01       	movw	r24, r16
   1a26a:	01 2e       	mov	r0, r17
   1a26c:	00 0c       	add	r0, r0
   1a26e:	aa 0b       	sbc	r26, r26
   1a270:	bb 0b       	sbc	r27, r27
   1a272:	bc 01       	movw	r22, r24
   1a274:	cd 01       	movw	r24, r26
   1a276:	68 0d       	add	r22, r8
   1a278:	79 1d       	adc	r23, r9
   1a27a:	8a 1d       	adc	r24, r10
   1a27c:	9b 1d       	adc	r25, r11
   1a27e:	61 11       	cpse	r22, r1
   1a280:	09 c0       	rjmp	.+18     	; 0x1a294 <lif_ascii_string_to_e010+0xf6>
   1a282:	1f c0       	rjmp	.+62     	; 0x1a2c2 <lif_ascii_string_to_e010+0x124>
        // 1st Split string header
        wbuf[ind++] = 0xCF;
        wbuf[ind++] = len & 0xff;
        wbuf[ind++] = (len >>8) & 0xff;
        // Write as much of the string as we can in this sector
        while(*str && ind<rem)
   1a284:	02 15       	cp	r16, r2
   1a286:	13 05       	cpc	r17, r3
   1a288:	7c f7       	brge	.-34     	; 0x1a268 <lif_ascii_string_to_e010+0xca>
            wbuf[ind++] = *str++;
   1a28a:	0f 5f       	subi	r16, 0xFF	; 255
   1a28c:	1f 4f       	sbci	r17, 0xFF	; 255
   1a28e:	8d 93       	st	X+, r24
   1a290:	ef 01       	movw	r28, r30
   1a292:	e6 cf       	rjmp	.-52     	; 0x1a260 <lif_ascii_string_to_e010+0xc2>

        // NEW SECTOR
        // Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
        {
            if(debuglevel & GPIB_PPR)
   1a294:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   1a298:	21 ff       	sbrs	r18, 1
   1a29a:	30 c0       	rjmp	.+96     	; 0x1a2fc <lif_ascii_string_to_e010+0x15e>
                printf("Expected sector boundry, offset:%d\n", (int) ((offset + ind) % LIF_SECTOR_SIZE) );
   1a29c:	20 e0       	ldi	r18, 0x00	; 0
   1a29e:	31 e0       	ldi	r19, 0x01	; 1
   1a2a0:	40 e0       	ldi	r20, 0x00	; 0
   1a2a2:	50 e0       	ldi	r21, 0x00	; 0
   1a2a4:	0e 94 93 df 	call	0x1bf26	; 0x1bf26 <__divmodsi4>
   1a2a8:	ed b7       	in	r30, 0x3d	; 61
   1a2aa:	fe b7       	in	r31, 0x3e	; 62
   1a2ac:	75 83       	std	Z+5, r23	; 0x05
   1a2ae:	64 83       	std	Z+4, r22	; 0x04
   1a2b0:	8a ea       	ldi	r24, 0xAA	; 170
   1a2b2:	93 e3       	ldi	r25, 0x33	; 51
   1a2b4:	a0 e0       	ldi	r26, 0x00	; 0
   1a2b6:	81 83       	std	Z+1, r24	; 0x01
   1a2b8:	92 83       	std	Z+2, r25	; 0x02
   1a2ba:	a3 83       	std	Z+3, r26	; 0x03
   1a2bc:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   1a2c0:	1d c0       	rjmp	.+58     	; 0x1a2fc <lif_ascii_string_to_e010+0x15e>
            return(-1);
        }

        // Update remining string length
        len = strlen(str);
   1a2c2:	fe 01       	movw	r30, r28
   1a2c4:	01 90       	ld	r0, Z+
   1a2c6:	00 20       	and	r0, r0
   1a2c8:	e9 f7       	brne	.-6      	; 0x1a2c4 <lif_ascii_string_to_e010+0x126>
   1a2ca:	31 97       	sbiw	r30, 0x01	; 1
   1a2cc:	9f 01       	movw	r18, r30
   1a2ce:	2c 1b       	sub	r18, r28
   1a2d0:	3d 0b       	sbc	r19, r29
        // 2nd Split string header 
        wbuf[ind++] = 0x6F;
   1a2d2:	d7 01       	movw	r26, r14
   1a2d4:	a0 0f       	add	r26, r16
   1a2d6:	b1 1f       	adc	r27, r17
   1a2d8:	8f e6       	ldi	r24, 0x6F	; 111
   1a2da:	8c 93       	st	X, r24
        wbuf[ind++] = (len & 0xff);
   1a2dc:	fd 01       	movw	r30, r26
   1a2de:	21 83       	std	Z+1, r18	; 0x01
        wbuf[ind++] = (len>>8) & 0xff;
   1a2e0:	32 83       	std	Z+2, r19	; 0x02
   1a2e2:	0d 5f       	subi	r16, 0xFD	; 253
   1a2e4:	1f 4f       	sbci	r17, 0xFF	; 255
   1a2e6:	f7 01       	movw	r30, r14
   1a2e8:	e0 0f       	add	r30, r16
   1a2ea:	f1 1f       	adc	r31, r17
   1a2ec:	cf 01       	movw	r24, r30
   1a2ee:	8e 19       	sub	r24, r14
   1a2f0:	9f 09       	sbc	r25, r15
        // Write string
        while(*str)
   1a2f2:	29 91       	ld	r18, Y+
   1a2f4:	22 23       	and	r18, r18
   1a2f6:	21 f0       	breq	.+8      	; 0x1a300 <lif_ascii_string_to_e010+0x162>
            wbuf[ind++] = *str++;
   1a2f8:	21 93       	st	Z+, r18
   1a2fa:	f8 cf       	rjmp	.-16     	; 0x1a2ec <lif_ascii_string_to_e010+0x14e>
        // Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
        {
            if(debuglevel & GPIB_PPR)
                printf("Expected sector boundry, offset:%d\n", (int) ((offset + ind) % LIF_SECTOR_SIZE) );
            return(-1);
   1a2fc:	8f ef       	ldi	r24, 0xFF	; 255
   1a2fe:	9f ef       	ldi	r25, 0xFF	; 255
        while(*str)
            wbuf[ind++] = *str++;
    }

    return(ind);
}
   1a300:	cd b7       	in	r28, 0x3d	; 61
   1a302:	de b7       	in	r29, 0x3e	; 62
   1a304:	25 96       	adiw	r28, 0x05	; 5
   1a306:	e2 e1       	ldi	r30, 0x12	; 18
   1a308:	0c 94 fa df 	jmp	0x1bff4	; 0x1bff4 <__epilogue_restores__>

0001a30c <lif_add_ascii_file_as_e010_wrapper>:
/// @param[in] userfile: User ASCII file source
/// @param[in] *LIF: Where to write file if set (not NULL)
/// @return size of formatted result
MEMSPACE
long lif_add_ascii_file_as_e010_wrapper(lif_t *LIF, uint32_t offset, char *username)
{
   1a30c:	ad e0       	ldi	r26, 0x0D	; 13
   1a30e:	b3 e0       	ldi	r27, 0x03	; 3
   1a310:	ec e8       	ldi	r30, 0x8C	; 140
   1a312:	f1 ed       	ldi	r31, 0xD1	; 209
   1a314:	0c 94 de df 	jmp	0x1bfbc	; 0x1bfbc <__prologue_saves__>
   1a318:	5c 01       	movw	r10, r24
   1a31a:	2a 01       	movw	r4, r20
   1a31c:	3b 01       	movw	r6, r22
   1a31e:	c9 01       	movw	r24, r18
    // strings are limited to less then this
    char str[LIF_SECTOR_SIZE+1];
    // output buffer must be larger then a single sectors because of either headers or padding
    uint8_t obuf[LIF_SECTOR_SIZE*2];

    fi = lif_open(username, "rb");
   1a320:	60 ed       	ldi	r22, 0xD0	; 208
   1a322:	78 e0       	ldi	r23, 0x08	; 8
   1a324:	0e 94 5b bd 	call	0x17ab6	; 0x17ab6 <lif_open>
   1a328:	c7 5f       	subi	r28, 0xF7	; 247
   1a32a:	dc 4f       	sbci	r29, 0xFC	; 252
   1a32c:	99 83       	std	Y+1, r25	; 0x01
   1a32e:	88 83       	st	Y, r24
   1a330:	c9 50       	subi	r28, 0x09	; 9
   1a332:	d3 40       	sbci	r29, 0x03	; 3
    if(fi == NULL)
   1a334:	89 2b       	or	r24, r25
   1a336:	09 f4       	brne	.+2      	; 0x1a33a <lif_add_ascii_file_as_e010_wrapper+0x2e>
   1a338:	63 c0       	rjmp	.+198    	; 0x1a400 <lif_add_ascii_file_as_e010_wrapper+0xf4>
   1a33a:	81 2c       	mov	r8, r1
   1a33c:	91 2c       	mov	r9, r1
   1a33e:	c1 2c       	mov	r12, r1
   1a340:	d1 2c       	mov	r13, r1
   1a342:	76 01       	movw	r14, r12

        if(count > 256)
        {       
            count = 0;
            if(LIF)
                printf("\tWrote: %8ld\r", (long)bytes);
   1a344:	8c e9       	ldi	r24, 0x9C	; 156
   1a346:	93 e3       	ldi	r25, 0x33	; 51
   1a348:	9c 01       	movw	r18, r24
   1a34a:	40 e0       	ldi	r20, 0x00	; 0
   1a34c:	c5 5f       	subi	r28, 0xF5	; 245
   1a34e:	dc 4f       	sbci	r29, 0xFC	; 252
   1a350:	28 83       	st	Y, r18
   1a352:	39 83       	std	Y+1, r19	; 0x01
   1a354:	4a 83       	std	Y+2, r20	; 0x02
   1a356:	cb 50       	subi	r28, 0x0B	; 11
   1a358:	d3 40       	sbci	r29, 0x03	; 3
   1a35a:	14 c0       	rjmp	.+40     	; 0x1a384 <lif_add_ascii_file_as_e010_wrapper+0x78>
                fclose(fi);
                return(-1);
            }
        }

        offset += size;
   1a35c:	c1 01       	movw	r24, r2
   1a35e:	03 2c       	mov	r0, r3
   1a360:	00 0c       	add	r0, r0
   1a362:	aa 0b       	sbc	r26, r26
   1a364:	bb 0b       	sbc	r27, r27
   1a366:	48 0e       	add	r4, r24
   1a368:	59 1e       	adc	r5, r25
   1a36a:	6a 1e       	adc	r6, r26
   1a36c:	7b 1e       	adc	r7, r27
        bytes += size;
   1a36e:	c8 0e       	add	r12, r24
   1a370:	d9 1e       	adc	r13, r25
   1a372:	ea 1e       	adc	r14, r26
   1a374:	fb 1e       	adc	r15, r27
        count += size;
   1a376:	82 0c       	add	r8, r2
   1a378:	93 1c       	adc	r9, r3

        if(count > 256)
   1a37a:	31 e0       	ldi	r19, 0x01	; 1
   1a37c:	83 16       	cp	r8, r19
   1a37e:	93 06       	cpc	r9, r19
   1a380:	0c f0       	brlt	.+2      	; 0x1a384 <lif_add_ascii_file_as_e010_wrapper+0x78>
   1a382:	43 c0       	rjmp	.+134    	; 0x1a40a <lif_add_ascii_file_as_e010_wrapper+0xfe>
    bytes = 0;
    count = 0;

    // Read user file and write LIF records
    // reserve 3 + LIF header bytes + 1 (EOS)
    while( fgets((char *)str,(int)sizeof(str) - 4, fi) != NULL )
   1a384:	c7 5f       	subi	r28, 0xF7	; 247
   1a386:	dc 4f       	sbci	r29, 0xFC	; 252
   1a388:	48 81       	ld	r20, Y
   1a38a:	59 81       	ldd	r21, Y+1	; 0x01
   1a38c:	c9 50       	subi	r28, 0x09	; 9
   1a38e:	d3 40       	sbci	r29, 0x03	; 3
   1a390:	6d ef       	ldi	r22, 0xFD	; 253
   1a392:	70 e0       	ldi	r23, 0x00	; 0
   1a394:	ce 01       	movw	r24, r28
   1a396:	88 5f       	subi	r24, 0xF8	; 248
   1a398:	9d 4f       	sbci	r25, 0xFD	; 253
   1a39a:	0e 94 94 75 	call	0xeb28	; 0xeb28 <fgets>
   1a39e:	89 2b       	or	r24, r25
   1a3a0:	09 f4       	brne	.+2      	; 0x1a3a4 <lif_add_ascii_file_as_e010_wrapper+0x98>
   1a3a2:	4b c0       	rjmp	.+150    	; 0x1a43a <lif_add_ascii_file_as_e010_wrapper+0x12e>
    {
        trim_tail((char *)str);
   1a3a4:	ce 01       	movw	r24, r28
   1a3a6:	88 5f       	subi	r24, 0xF8	; 248
   1a3a8:	9d 4f       	sbci	r25, 0xFD	; 253
   1a3aa:	0e 94 7b 31 	call	0x62f6	; 0x62f6 <trim_tail>

        strcat((char *)str,"\r"); // HP85 lines end with "\r"
   1a3ae:	64 e4       	ldi	r22, 0x44	; 68
   1a3b0:	76 e1       	ldi	r23, 0x16	; 22
   1a3b2:	ce 01       	movw	r24, r28
   1a3b4:	88 5f       	subi	r24, 0xF8	; 248
   1a3b6:	9d 4f       	sbci	r25, 0xFD	; 253
   1a3b8:	0e 94 be 30 	call	0x617c	; 0x617c <strcat>

        size = lif_ascii_string_to_e010(str, offset, obuf);
   1a3bc:	9e 01       	movw	r18, r28
   1a3be:	28 5f       	subi	r18, 0xF8	; 248
   1a3c0:	3f 4f       	sbci	r19, 0xFF	; 255
   1a3c2:	b3 01       	movw	r22, r6
   1a3c4:	a2 01       	movw	r20, r4
   1a3c6:	ce 01       	movw	r24, r28
   1a3c8:	88 5f       	subi	r24, 0xF8	; 248
   1a3ca:	9d 4f       	sbci	r25, 0xFD	; 253
   1a3cc:	e8 de       	rcall	.-560    	; 0x1a19e <lif_ascii_string_to_e010>
   1a3ce:	1c 01       	movw	r2, r24
        // Write string
        // Now Write string
        if(LIF)
   1a3d0:	a1 14       	cp	r10, r1
   1a3d2:	b1 04       	cpc	r11, r1
   1a3d4:	19 f2       	breq	.-122    	; 0x1a35c <lif_add_ascii_file_as_e010_wrapper+0x50>
        {
            len = lif_write(LIF, obuf, offset, size);
   1a3d6:	8c 01       	movw	r16, r24
   1a3d8:	a3 01       	movw	r20, r6
   1a3da:	92 01       	movw	r18, r4
   1a3dc:	be 01       	movw	r22, r28
   1a3de:	68 5f       	subi	r22, 0xF8	; 248
   1a3e0:	7f 4f       	sbci	r23, 0xFF	; 255
   1a3e2:	c5 01       	movw	r24, r10
   1a3e4:	0e 94 30 be 	call	0x17c60	; 0x17c60 <lif_write>
            if(len < size)
   1a3e8:	82 15       	cp	r24, r2
   1a3ea:	93 05       	cpc	r25, r3
   1a3ec:	0c f0       	brlt	.+2      	; 0x1a3f0 <lif_add_ascii_file_as_e010_wrapper+0xe4>
   1a3ee:	b6 cf       	rjmp	.-148    	; 0x1a35c <lif_add_ascii_file_as_e010_wrapper+0x50>
            {
                fclose(fi);
   1a3f0:	c7 5f       	subi	r28, 0xF7	; 247
   1a3f2:	dc 4f       	sbci	r29, 0xFC	; 252
   1a3f4:	88 81       	ld	r24, Y
   1a3f6:	99 81       	ldd	r25, Y+1	; 0x01
   1a3f8:	c9 50       	subi	r28, 0x09	; 9
   1a3fa:	d3 40       	sbci	r29, 0x03	; 3
   1a3fc:	0e 94 26 7c 	call	0xf84c	; 0xf84c <fclose>
                return(-1);
   1a400:	6f ef       	ldi	r22, 0xFF	; 255
   1a402:	7f ef       	ldi	r23, 0xFF	; 255
   1a404:	8f ef       	ldi	r24, 0xFF	; 255
   1a406:	9f ef       	ldi	r25, 0xFF	; 255
   1a408:	84 c0       	rjmp	.+264    	; 0x1a512 <lif_add_ascii_file_as_e010_wrapper+0x206>
        count += size;

        if(count > 256)
        {       
            count = 0;
            if(LIF)
   1a40a:	a1 14       	cp	r10, r1
   1a40c:	b1 04       	cpc	r11, r1
   1a40e:	91 f0       	breq	.+36     	; 0x1a434 <lif_add_ascii_file_as_e010_wrapper+0x128>
                printf("\tWrote: %8ld\r", (long)bytes);
   1a410:	ed b7       	in	r30, 0x3d	; 61
   1a412:	fe b7       	in	r31, 0x3e	; 62
   1a414:	c4 82       	std	Z+4, r12	; 0x04
   1a416:	d5 82       	std	Z+5, r13	; 0x05
   1a418:	e6 82       	std	Z+6, r14	; 0x06
   1a41a:	f7 82       	std	Z+7, r15	; 0x07
   1a41c:	c5 5f       	subi	r28, 0xF5	; 245
   1a41e:	dc 4f       	sbci	r29, 0xFC	; 252
   1a420:	28 81       	ld	r18, Y
   1a422:	39 81       	ldd	r19, Y+1	; 0x01
   1a424:	4a 81       	ldd	r20, Y+2	; 0x02
   1a426:	cb 50       	subi	r28, 0x0B	; 11
   1a428:	d3 40       	sbci	r29, 0x03	; 3
   1a42a:	21 83       	std	Z+1, r18	; 0x01
   1a42c:	32 83       	std	Z+2, r19	; 0x02
   1a42e:	43 83       	std	Z+3, r20	; 0x03
   1a430:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
        bytes += size;
        count += size;

        if(count > 256)
        {       
            count = 0;
   1a434:	81 2c       	mov	r8, r1
   1a436:	91 2c       	mov	r9, r1
   1a438:	a5 cf       	rjmp	.-182    	; 0x1a384 <lif_add_ascii_file_as_e010_wrapper+0x78>
            if(LIF)
                printf("\tWrote: %8ld\r", (long)bytes);
        }
    }

    fclose(fi);
   1a43a:	c7 5f       	subi	r28, 0xF7	; 247
   1a43c:	dc 4f       	sbci	r29, 0xFC	; 252
   1a43e:	88 81       	ld	r24, Y
   1a440:	99 81       	ldd	r25, Y+1	; 0x01
   1a442:	c9 50       	subi	r28, 0x09	; 9
   1a444:	d3 40       	sbci	r29, 0x03	; 3
   1a446:	0e 94 26 7c 	call	0xf84c	; 0xf84c <fclose>

    // Write EOF
    str[0] = 0;
   1a44a:	c8 5f       	subi	r28, 0xF8	; 248
   1a44c:	dd 4f       	sbci	r29, 0xFD	; 253
   1a44e:	18 82       	st	Y, r1
   1a450:	c8 50       	subi	r28, 0x08	; 8
   1a452:	d2 40       	sbci	r29, 0x02	; 2
    // We only want to return the count of bytes in the file NOT the padding at the end
    // Write EOF string with padding
    size = lif_ascii_string_to_e010(str, offset,obuf);
   1a454:	9e 01       	movw	r18, r28
   1a456:	28 5f       	subi	r18, 0xF8	; 248
   1a458:	3f 4f       	sbci	r19, 0xFF	; 255
   1a45a:	b3 01       	movw	r22, r6
   1a45c:	a2 01       	movw	r20, r4
   1a45e:	ce 01       	movw	r24, r28
   1a460:	88 5f       	subi	r24, 0xF8	; 248
   1a462:	9d 4f       	sbci	r25, 0xFD	; 253
   1a464:	9c de       	rcall	.-712    	; 0x1a19e <lif_ascii_string_to_e010>
   1a466:	4c 01       	movw	r8, r24

    if(LIF)
   1a468:	a1 14       	cp	r10, r1
   1a46a:	b1 04       	cpc	r11, r1
   1a46c:	d1 f4       	brne	.+52     	; 0x1a4a2 <lif_add_ascii_file_as_e010_wrapper+0x196>
            return(-1);

    }

    offset += size;
    bytes += size;
   1a46e:	c4 01       	movw	r24, r8
   1a470:	09 2c       	mov	r0, r9
   1a472:	00 0c       	add	r0, r0
   1a474:	aa 0b       	sbc	r26, r26
   1a476:	bb 0b       	sbc	r27, r27
   1a478:	c8 0e       	add	r12, r24
   1a47a:	d9 1e       	adc	r13, r25
   1a47c:	ea 1e       	adc	r14, r26
   1a47e:	fb 1e       	adc	r15, r27

    // PAD
    size = lif_e010_pad_sector(offset, obuf);
   1a480:	12 01       	movw	r2, r4
   1a482:	23 01       	movw	r4, r6
   1a484:	28 0e       	add	r2, r24
   1a486:	39 1e       	adc	r3, r25
   1a488:	4a 1e       	adc	r4, r26
   1a48a:	5b 1e       	adc	r5, r27
   1a48c:	ae 01       	movw	r20, r28
   1a48e:	48 5f       	subi	r20, 0xF8	; 248
   1a490:	5f 4f       	sbci	r21, 0xFF	; 255
   1a492:	c2 01       	movw	r24, r4
   1a494:	b1 01       	movw	r22, r2
   1a496:	2a de       	rcall	.-940    	; 0x1a0ec <lif_e010_pad_sector>
   1a498:	3c 01       	movw	r6, r24
    if(LIF)
   1a49a:	a1 14       	cp	r10, r1
   1a49c:	b1 04       	cpc	r11, r1
   1a49e:	e1 f4       	brne	.+56     	; 0x1a4d8 <lif_add_ascii_file_as_e010_wrapper+0x1cc>
   1a4a0:	36 c0       	rjmp	.+108    	; 0x1a50e <lif_add_ascii_file_as_e010_wrapper+0x202>
    // Write EOF string with padding
    size = lif_ascii_string_to_e010(str, offset,obuf);

    if(LIF)
    {
        printf("\tWrote: %8ld\r", (long)bytes);
   1a4a2:	ed b7       	in	r30, 0x3d	; 61
   1a4a4:	fe b7       	in	r31, 0x3e	; 62
   1a4a6:	c4 82       	std	Z+4, r12	; 0x04
   1a4a8:	d5 82       	std	Z+5, r13	; 0x05
   1a4aa:	e6 82       	std	Z+6, r14	; 0x06
   1a4ac:	f7 82       	std	Z+7, r15	; 0x07
   1a4ae:	8e e8       	ldi	r24, 0x8E	; 142
   1a4b0:	93 e3       	ldi	r25, 0x33	; 51
   1a4b2:	a0 e0       	ldi	r26, 0x00	; 0
   1a4b4:	81 83       	std	Z+1, r24	; 0x01
   1a4b6:	92 83       	std	Z+2, r25	; 0x02
   1a4b8:	a3 83       	std	Z+3, r26	; 0x03
   1a4ba:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
        len = lif_write(LIF, obuf, offset, size);
   1a4be:	84 01       	movw	r16, r8
   1a4c0:	a3 01       	movw	r20, r6
   1a4c2:	92 01       	movw	r18, r4
   1a4c4:	be 01       	movw	r22, r28
   1a4c6:	68 5f       	subi	r22, 0xF8	; 248
   1a4c8:	7f 4f       	sbci	r23, 0xFF	; 255
   1a4ca:	c5 01       	movw	r24, r10
   1a4cc:	0e 94 30 be 	call	0x17c60	; 0x17c60 <lif_write>
        if(len < size)
   1a4d0:	88 15       	cp	r24, r8
   1a4d2:	99 05       	cpc	r25, r9
   1a4d4:	64 f6       	brge	.-104    	; 0x1a46e <lif_add_ascii_file_as_e010_wrapper+0x162>
   1a4d6:	94 cf       	rjmp	.-216    	; 0x1a400 <lif_add_ascii_file_as_e010_wrapper+0xf4>

    // PAD
    size = lif_e010_pad_sector(offset, obuf);
    if(LIF)
    {
        len = lif_write(LIF, obuf, offset, size);
   1a4d8:	8c 01       	movw	r16, r24
   1a4da:	a2 01       	movw	r20, r4
   1a4dc:	91 01       	movw	r18, r2
   1a4de:	be 01       	movw	r22, r28
   1a4e0:	68 5f       	subi	r22, 0xF8	; 248
   1a4e2:	7f 4f       	sbci	r23, 0xFF	; 255
   1a4e4:	c5 01       	movw	r24, r10
   1a4e6:	0e 94 30 be 	call	0x17c60	; 0x17c60 <lif_write>
        if(len < size)
   1a4ea:	86 15       	cp	r24, r6
   1a4ec:	97 05       	cpc	r25, r7
   1a4ee:	0c f4       	brge	.+2      	; 0x1a4f2 <lif_add_ascii_file_as_e010_wrapper+0x1e6>
   1a4f0:	87 cf       	rjmp	.-242    	; 0x1a400 <lif_add_ascii_file_as_e010_wrapper+0xf4>
            return(-1);
    }

    if(LIF)
        printf("\tWrote: %8ld\r",(long)bytes);
   1a4f2:	ed b7       	in	r30, 0x3d	; 61
   1a4f4:	fe b7       	in	r31, 0x3e	; 62
   1a4f6:	c4 82       	std	Z+4, r12	; 0x04
   1a4f8:	d5 82       	std	Z+5, r13	; 0x05
   1a4fa:	e6 82       	std	Z+6, r14	; 0x06
   1a4fc:	f7 82       	std	Z+7, r15	; 0x07
   1a4fe:	80 e8       	ldi	r24, 0x80	; 128
   1a500:	93 e3       	ldi	r25, 0x33	; 51
   1a502:	a0 e0       	ldi	r26, 0x00	; 0
   1a504:	81 83       	std	Z+1, r24	; 0x01
   1a506:	92 83       	std	Z+2, r25	; 0x02
   1a508:	a3 83       	std	Z+3, r26	; 0x03
   1a50a:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>

    return(bytes);
   1a50e:	b6 01       	movw	r22, r12
   1a510:	c7 01       	movw	r24, r14
}
   1a512:	c3 5f       	subi	r28, 0xF3	; 243
   1a514:	dc 4f       	sbci	r29, 0xFC	; 252
   1a516:	e2 e1       	ldi	r30, 0x12	; 18
   1a518:	0c 94 fa df 	jmp	0x1bff4	; 0x1bff4 <__epilogue_restores__>

0001a51c <lif_add_ascii_file_as_e010>:
/// @param[in] lifname: LIF file name
/// @param[in] userfile: userfile name
/// @return size of data written into to LIF image, or -1 on error
MEMSPACE
long lif_add_ascii_file_as_e010(char *lifimagename, char *lifname, char *userfile)
{
   1a51c:	ab e3       	ldi	r26, 0x3B	; 59
   1a51e:	b0 e0       	ldi	r27, 0x00	; 0
   1a520:	e4 e9       	ldi	r30, 0x94	; 148
   1a522:	f2 ed       	ldi	r31, 0xD2	; 210
   1a524:	0c 94 de df 	jmp	0x1bfbc	; 0x1bfbc <__prologue_saves__>
   1a528:	6c 01       	movw	r12, r24
   1a52a:	1b 01       	movw	r2, r22
   1a52c:	7a 01       	movw	r14, r20
    int index;
    lif_t *LIF;
    stat_t st, *sp;


    if(!*lifimagename)
   1a52e:	fc 01       	movw	r30, r24
   1a530:	80 81       	ld	r24, Z
   1a532:	81 11       	cpse	r24, r1
   1a534:	03 c0       	rjmp	.+6      	; 0x1a53c <lif_add_ascii_file_as_e010+0x20>
    {
        printf("lif_add_ascii_file_as_e010: lifimagename is empty\n");
   1a536:	8d e4       	ldi	r24, 0x4D	; 77
   1a538:	93 e3       	ldi	r25, 0x33	; 51
   1a53a:	1a c0       	rjmp	.+52     	; 0x1a570 <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }
    if(!*lifname)
   1a53c:	fb 01       	movw	r30, r22
   1a53e:	80 81       	ld	r24, Z
   1a540:	81 11       	cpse	r24, r1
   1a542:	03 c0       	rjmp	.+6      	; 0x1a54a <lif_add_ascii_file_as_e010+0x2e>
    {
        printf("lif_add_ascii_file_as_e010: lifname is empty\n");
   1a544:	8f e1       	ldi	r24, 0x1F	; 31
   1a546:	93 e3       	ldi	r25, 0x33	; 51
   1a548:	13 c0       	rjmp	.+38     	; 0x1a570 <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }
    if(!*userfile)
   1a54a:	fa 01       	movw	r30, r20
   1a54c:	80 81       	ld	r24, Z
   1a54e:	81 11       	cpse	r24, r1
   1a550:	03 c0       	rjmp	.+6      	; 0x1a558 <lif_add_ascii_file_as_e010+0x3c>
    {
        printf("lif_add_ascii_file_as_e010: userfile is empty\n");
   1a552:	80 ef       	ldi	r24, 0xF0	; 240
   1a554:	92 e3       	ldi	r25, 0x32	; 50
   1a556:	0c c0       	rjmp	.+24     	; 0x1a570 <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }

    //Get size and date info
    sp = lif_stat(userfile, (stat_t *)&st);
   1a558:	be 01       	movw	r22, r28
   1a55a:	66 5f       	subi	r22, 0xF6	; 246
   1a55c:	7f 4f       	sbci	r23, 0xFF	; 255
   1a55e:	ca 01       	movw	r24, r20
   1a560:	0e 94 85 bd 	call	0x17b0a	; 0x17b0a <lif_stat>
   1a564:	9b af       	std	Y+59, r25	; 0x3b
   1a566:	8a af       	std	Y+58, r24	; 0x3a
    if(!sp)
   1a568:	89 2b       	or	r24, r25
   1a56a:	59 f4       	brne	.+22     	; 0x1a582 <lif_add_ascii_file_as_e010+0x66>
    {
        printf("lif_add_ascii_file_as_e010: userfile not found\n");
   1a56c:	80 ec       	ldi	r24, 0xC0	; 192
   1a56e:	92 e3       	ldi	r25, 0x32	; 50
   1a570:	a0 e0       	ldi	r26, 0x00	; 0
   1a572:	ed b7       	in	r30, 0x3d	; 61
   1a574:	fe b7       	in	r31, 0x3e	; 62
   1a576:	81 83       	std	Z+1, r24	; 0x01
   1a578:	92 83       	std	Z+2, r25	; 0x02
   1a57a:	a3 83       	std	Z+3, r26	; 0x03
   1a57c:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   1a580:	01 c1       	rjmp	.+514    	; 0x1a784 <lif_add_ascii_file_as_e010+0x268>
        return(-1);
    }

    if(debuglevel & LIF_DEBUG)
   1a582:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1a586:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   1a58a:	92 ff       	sbrs	r25, 2
   1a58c:	10 c0       	rjmp	.+32     	; 0x1a5ae <lif_add_ascii_file_as_e010+0x92>
        printf("LIF image:[%s], LIF name:[%s], user file:[%s]\n", 
   1a58e:	ed b7       	in	r30, 0x3d	; 61
   1a590:	fe b7       	in	r31, 0x3e	; 62
   1a592:	f1 86       	std	Z+9, r15	; 0x09
   1a594:	e0 86       	std	Z+8, r14	; 0x08
   1a596:	37 82       	std	Z+7, r3	; 0x07
   1a598:	26 82       	std	Z+6, r2	; 0x06
   1a59a:	d5 82       	std	Z+5, r13	; 0x05
   1a59c:	c4 82       	std	Z+4, r12	; 0x04
   1a59e:	81 e9       	ldi	r24, 0x91	; 145
   1a5a0:	92 e3       	ldi	r25, 0x32	; 50
   1a5a2:	a0 e0       	ldi	r26, 0x00	; 0
   1a5a4:	81 83       	std	Z+1, r24	; 0x01
   1a5a6:	92 83       	std	Z+2, r25	; 0x02
   1a5a8:	a3 83       	std	Z+3, r26	; 0x03
   1a5aa:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
            lifimagename, lifname, userfile);

    // Find out how big converted file will be
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
   1a5ae:	97 01       	movw	r18, r14
   1a5b0:	40 e0       	ldi	r20, 0x00	; 0
   1a5b2:	50 e0       	ldi	r21, 0x00	; 0
   1a5b4:	ba 01       	movw	r22, r20
   1a5b6:	80 e0       	ldi	r24, 0x00	; 0
   1a5b8:	90 e0       	ldi	r25, 0x00	; 0
   1a5ba:	a8 de       	rcall	.-688    	; 0x1a30c <lif_add_ascii_file_as_e010_wrapper>
   1a5bc:	4b 01       	movw	r8, r22
   1a5be:	5c 01       	movw	r10, r24
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1a5c0:	47 2e       	mov	r4, r23
   1a5c2:	58 2e       	mov	r5, r24
   1a5c4:	69 2e       	mov	r6, r25
   1a5c6:	77 24       	eor	r7, r7
    if(bytes % (long)LIF_SECTOR_SIZE)
   1a5c8:	66 23       	and	r22, r22
   1a5ca:	29 f0       	breq	.+10     	; 0x1a5d6 <lif_add_ascii_file_as_e010+0xba>
        ++sectors;
   1a5cc:	ff ef       	ldi	r31, 0xFF	; 255
   1a5ce:	4f 1a       	sub	r4, r31
   1a5d0:	5f 0a       	sbc	r5, r31
   1a5d2:	6f 0a       	sbc	r6, r31
   1a5d4:	7f 0a       	sbc	r7, r31

    // Find out how big converted file will be
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
    sectors = lif_bytes2sectors(bytes);

    LIF = lif_open_volume(lifimagename,"r+");
   1a5d6:	63 ed       	ldi	r22, 0xD3	; 211
   1a5d8:	78 e0       	ldi	r23, 0x08	; 8
   1a5da:	c6 01       	movw	r24, r12
   1a5dc:	57 da       	rcall	.-2898   	; 0x19a8c <lif_open_volume>
   1a5de:	8c 01       	movw	r16, r24
    if(LIF == NULL)
   1a5e0:	00 97       	sbiw	r24, 0x00	; 0
   1a5e2:	09 f4       	brne	.+2      	; 0x1a5e6 <lif_add_ascii_file_as_e010+0xca>
        return(-1); 

    // Now find free record
    index = lif_newdir(LIF, sectors);
   1a5e4:	cf c0       	rjmp	.+414    	; 0x1a784 <lif_add_ascii_file_as_e010+0x268>
   1a5e6:	b3 01       	movw	r22, r6
   1a5e8:	a2 01       	movw	r20, r4
   1a5ea:	f0 d8       	rcall	.-3616   	; 0x197cc <lif_newdir>
    if(index == -1)
   1a5ec:	3c 01       	movw	r6, r24
   1a5ee:	8f ef       	ldi	r24, 0xFF	; 255
   1a5f0:	68 16       	cp	r6, r24
   1a5f2:	78 06       	cpc	r7, r24
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n", 
   1a5f4:	79 f4       	brne	.+30     	; 0x1a614 <lif_add_ascii_file_as_e010+0xf8>
   1a5f6:	ed b7       	in	r30, 0x3d	; 61
   1a5f8:	fe b7       	in	r31, 0x3e	; 62
   1a5fa:	f7 82       	std	Z+7, r15	; 0x07
   1a5fc:	e6 82       	std	Z+6, r14	; 0x06
   1a5fe:	d5 82       	std	Z+5, r13	; 0x05
   1a600:	c4 82       	std	Z+4, r12	; 0x04
   1a602:	81 e6       	ldi	r24, 0x61	; 97
   1a604:	92 e3       	ldi	r25, 0x32	; 50
   1a606:	a0 e0       	ldi	r26, 0x00	; 0
   1a608:	81 83       	std	Z+1, r24	; 0x01
   1a60a:	92 83       	std	Z+2, r25	; 0x02
   1a60c:	a3 83       	std	Z+3, r26	; 0x03
   1a60e:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
            lif_closedir(LIF);
            return(-1);
    }

    // Initialize the free directory entry
    lif_fixname(LIF->DIR.filename, lifname,10);
   1a612:	a0 c0       	rjmp	.+320    	; 0x1a754 <lif_add_ascii_file_as_e010+0x238>
   1a614:	68 01       	movw	r12, r16
   1a616:	ff e4       	ldi	r31, 0x4F	; 79
   1a618:	cf 0e       	add	r12, r31
   1a61a:	d1 1c       	adc	r13, r1
   1a61c:	4a e0       	ldi	r20, 0x0A	; 10
   1a61e:	50 e0       	ldi	r21, 0x00	; 0
   1a620:	b1 01       	movw	r22, r2
   1a622:	c6 01       	movw	r24, r12
   1a624:	0e 94 30 bf 	call	0x17e60	; 0x17e60 <lif_fixname>
    LIF->DIR.FileType = 0xe010;             // 10
   1a628:	80 e1       	ldi	r24, 0x10	; 16
   1a62a:	90 ee       	ldi	r25, 0xE0	; 224
   1a62c:	f8 01       	movw	r30, r16
   1a62e:	e6 5a       	subi	r30, 0xA6	; 166
   1a630:	ff 4f       	sbci	r31, 0xFF	; 255
   1a632:	91 83       	std	Z+1, r25	; 0x01
    lif_time2lifbcd(sp->st_mtime, LIF->DIR.date);
   1a634:	80 83       	st	Z, r24
   1a636:	ea ad       	ldd	r30, Y+58	; 0x3a
   1a638:	fb ad       	ldd	r31, Y+59	; 0x3b
   1a63a:	60 a5       	ldd	r22, Z+40	; 0x28
   1a63c:	71 a5       	ldd	r23, Z+41	; 0x29
   1a63e:	82 a5       	ldd	r24, Z+42	; 0x2a
   1a640:	93 a5       	ldd	r25, Z+43	; 0x2b
   1a642:	a8 01       	movw	r20, r16
   1a644:	4c 59       	subi	r20, 0x9C	; 156
   1a646:	5f 4f       	sbci	r21, 0xFF	; 255
   1a648:	0e 94 55 c1 	call	0x182aa	; 0x182aa <lif_time2lifbcd>

    LIF->DIR.VolNumber = 0x8001;            // 26
   1a64c:	81 e0       	ldi	r24, 0x01	; 1
   1a64e:	90 e8       	ldi	r25, 0x80	; 128
   1a650:	f8 01       	movw	r30, r16
   1a652:	e6 59       	subi	r30, 0x96	; 150
   1a654:	ff 4f       	sbci	r31, 0xFF	; 255
   1a656:	91 83       	std	Z+1, r25	; 0x01
    LIF->DIR.FileBytes = bytes;                 // 28
   1a658:	80 83       	st	Z, r24
   1a65a:	32 96       	adiw	r30, 0x02	; 2
   1a65c:	91 82       	std	Z+1, r9	; 0x01
    LIF->DIR.SectorSize  = 0x100;           // 30
   1a65e:	80 82       	st	Z, r8
   1a660:	80 e0       	ldi	r24, 0x00	; 0
   1a662:	91 e0       	ldi	r25, 0x01	; 1
   1a664:	32 96       	adiw	r30, 0x02	; 2
   1a666:	91 83       	std	Z+1, r25	; 0x01
    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1a668:	80 83       	st	Z, r24
   1a66a:	58 01       	movw	r10, r16
   1a66c:	fc e5       	ldi	r31, 0x5C	; 92
   1a66e:	af 0e       	add	r10, r31
   1a670:	b1 1c       	adc	r11, r1
   1a672:	f5 01       	movw	r30, r10
   1a674:	80 81       	ld	r24, Z
   1a676:	91 81       	ldd	r25, Z+1	; 0x01
   1a678:	a2 81       	ldd	r26, Z+2	; 0x02
   1a67a:	b3 81       	ldd	r27, Z+3	; 0x03
   1a67c:	22 24       	eor	r2, r2
   1a67e:	38 2e       	mov	r3, r24
   1a680:	49 2e       	mov	r4, r25

    if(debuglevel & LIF_DEBUG)
   1a682:	5a 2e       	mov	r5, r26
   1a684:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1a688:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   1a68c:	92 ff       	sbrs	r25, 2
        lif_dump_vol(LIF,"lif_after lif_newdir");
   1a68e:	05 c0       	rjmp	.+10     	; 0x1a69a <lif_add_ascii_file_as_e010+0x17e>
   1a690:	66 e4       	ldi	r22, 0x46	; 70
   1a692:	76 e1       	ldi	r23, 0x16	; 22
   1a694:	c8 01       	movw	r24, r16
   1a696:	0e 94 41 c2 	call	0x18482	; 0x18482 <lif_dump_vol>

    // Write converted file into free space first
    bytes = lif_add_ascii_file_as_e010_wrapper(LIF,offset,userfile);
   1a69a:	97 01       	movw	r18, r14
   1a69c:	b2 01       	movw	r22, r4
   1a69e:	a1 01       	movw	r20, r2
   1a6a0:	c8 01       	movw	r24, r16
   1a6a2:	34 de       	rcall	.-920    	; 0x1a30c <lif_add_ascii_file_as_e010_wrapper>
   1a6a4:	4b 01       	movw	r8, r22

    if(debuglevel & LIF_DEBUG)
   1a6a6:	7c 01       	movw	r14, r24
   1a6a8:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1a6ac:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   1a6b0:	92 ff       	sbrs	r25, 2
    {
        printf("New Directory Information AFTER write\n");
   1a6b2:	4a c0       	rjmp	.+148    	; 0x1a748 <lif_add_ascii_file_as_e010+0x22c>
   1a6b4:	8a e3       	ldi	r24, 0x3A	; 58
   1a6b6:	92 e3       	ldi	r25, 0x32	; 50
   1a6b8:	a0 e0       	ldi	r26, 0x00	; 0
   1a6ba:	ed b7       	in	r30, 0x3d	; 61
   1a6bc:	fe b7       	in	r31, 0x3e	; 62
   1a6be:	81 83       	std	Z+1, r24	; 0x01
   1a6c0:	92 83       	std	Z+2, r25	; 0x02
   1a6c2:	a3 83       	std	Z+3, r26	; 0x03
   1a6c4:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
        printf("Name:              %s\n", LIF->DIR.filename);
   1a6c8:	ed b7       	in	r30, 0x3d	; 61
   1a6ca:	fe b7       	in	r31, 0x3e	; 62
   1a6cc:	d5 82       	std	Z+5, r13	; 0x05
   1a6ce:	c4 82       	std	Z+4, r12	; 0x04
   1a6d0:	83 e2       	ldi	r24, 0x23	; 35
   1a6d2:	92 e3       	ldi	r25, 0x32	; 50
   1a6d4:	a0 e0       	ldi	r26, 0x00	; 0
   1a6d6:	81 83       	std	Z+1, r24	; 0x01
   1a6d8:	92 83       	std	Z+2, r25	; 0x02
   1a6da:	a3 83       	std	Z+3, r26	; 0x03
   1a6dc:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
        printf("Index:            %4d\n", (int)index);
   1a6e0:	ed b7       	in	r30, 0x3d	; 61
   1a6e2:	fe b7       	in	r31, 0x3e	; 62
   1a6e4:	75 82       	std	Z+5, r7	; 0x05
   1a6e6:	64 82       	std	Z+4, r6	; 0x04
   1a6e8:	8c e0       	ldi	r24, 0x0C	; 12
   1a6ea:	92 e3       	ldi	r25, 0x32	; 50
   1a6ec:	a0 e0       	ldi	r26, 0x00	; 0
   1a6ee:	81 83       	std	Z+1, r24	; 0x01
   1a6f0:	92 83       	std	Z+2, r25	; 0x02
   1a6f2:	a3 83       	std	Z+3, r26	; 0x03
   1a6f4:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
        printf("First Sector:     %4lxH\n", (long) LIF->DIR.FileStartSector);
   1a6f8:	f5 01       	movw	r30, r10
   1a6fa:	80 81       	ld	r24, Z
   1a6fc:	91 81       	ldd	r25, Z+1	; 0x01
   1a6fe:	a2 81       	ldd	r26, Z+2	; 0x02
   1a700:	b3 81       	ldd	r27, Z+3	; 0x03
   1a702:	ed b7       	in	r30, 0x3d	; 61
   1a704:	fe b7       	in	r31, 0x3e	; 62
   1a706:	84 83       	std	Z+4, r24	; 0x04
   1a708:	95 83       	std	Z+5, r25	; 0x05
   1a70a:	a6 83       	std	Z+6, r26	; 0x06
   1a70c:	b7 83       	std	Z+7, r27	; 0x07
   1a70e:	83 ef       	ldi	r24, 0xF3	; 243
   1a710:	91 e3       	ldi	r25, 0x31	; 49
   1a712:	a0 e0       	ldi	r26, 0x00	; 0
   1a714:	81 83       	std	Z+1, r24	; 0x01
   1a716:	92 83       	std	Z+2, r25	; 0x02
   1a718:	a3 83       	std	Z+3, r26	; 0x03
   1a71a:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
        printf("File Sectors:     %4lxH\n", (long)LIF->DIR.FileSectors);
   1a71e:	f8 01       	movw	r30, r16
   1a720:	e0 5a       	subi	r30, 0xA0	; 160
   1a722:	ff 4f       	sbci	r31, 0xFF	; 255
   1a724:	80 81       	ld	r24, Z
   1a726:	91 81       	ldd	r25, Z+1	; 0x01
   1a728:	a2 81       	ldd	r26, Z+2	; 0x02
   1a72a:	b3 81       	ldd	r27, Z+3	; 0x03
   1a72c:	ed b7       	in	r30, 0x3d	; 61
   1a72e:	fe b7       	in	r31, 0x3e	; 62
   1a730:	84 83       	std	Z+4, r24	; 0x04
   1a732:	95 83       	std	Z+5, r25	; 0x05
   1a734:	a6 83       	std	Z+6, r26	; 0x06
   1a736:	b7 83       	std	Z+7, r27	; 0x07
   1a738:	8a ed       	ldi	r24, 0xDA	; 218
   1a73a:	91 e3       	ldi	r25, 0x31	; 49
   1a73c:	a0 e0       	ldi	r26, 0x00	; 0
   1a73e:	81 83       	std	Z+1, r24	; 0x01
   1a740:	92 83       	std	Z+2, r25	; 0x02
   1a742:	a3 83       	std	Z+3, r26	; 0x03
   1a744:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    }

    // Write directory record
    // Note: lif_newdir alrwady did the new EOF
    if( !lif_writedirindex(LIF,index))
   1a748:	b3 01       	movw	r22, r6
   1a74a:	c8 01       	movw	r24, r16
   1a74c:	0e 94 80 c7 	call	0x18f00	; 0x18f00 <lif_writedirindex>
   1a750:	89 2b       	or	r24, r25
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a752:	21 f4       	brne	.+8      	; 0x1a75c <lif_add_ascii_file_as_e010+0x240>
   1a754:	c8 01       	movw	r24, r16
   1a756:	0e 94 8b c6 	call	0x18d16	; 0x18d16 <lif_close_volume>
   1a75a:	14 c0       	rjmp	.+40     	; 0x1a784 <lif_add_ascii_file_as_e010+0x268>
   1a75c:	c8 01       	movw	r24, r16
   1a75e:	0e 94 8b c6 	call	0x18d16	; 0x18d16 <lif_close_volume>
        return(-1);
    }

    lif_closedir(LIF);

    printf("\tWrote: %8ld\n", bytes);
   1a762:	ed b7       	in	r30, 0x3d	; 61
   1a764:	fe b7       	in	r31, 0x3e	; 62
   1a766:	84 82       	std	Z+4, r8	; 0x04
   1a768:	95 82       	std	Z+5, r9	; 0x05
   1a76a:	e6 82       	std	Z+6, r14	; 0x06
   1a76c:	f7 82       	std	Z+7, r15	; 0x07
   1a76e:	8c ec       	ldi	r24, 0xCC	; 204
   1a770:	91 e3       	ldi	r25, 0x31	; 49
   1a772:	a0 e0       	ldi	r26, 0x00	; 0
   1a774:	81 83       	std	Z+1, r24	; 0x01
   1a776:	92 83       	std	Z+2, r25	; 0x02
   1a778:	a3 83       	std	Z+3, r26	; 0x03
   1a77a:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>

    // Return file size
    return(bytes);
   1a77e:	b4 01       	movw	r22, r8
   1a780:	c7 01       	movw	r24, r14
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
    sectors = lif_bytes2sectors(bytes);

    LIF = lif_open_volume(lifimagename,"r+");
    if(LIF == NULL)
        return(-1); 
   1a782:	04 c0       	rjmp	.+8      	; 0x1a78c <lif_add_ascii_file_as_e010+0x270>
   1a784:	6f ef       	ldi	r22, 0xFF	; 255
   1a786:	7f ef       	ldi	r23, 0xFF	; 255
   1a788:	8f ef       	ldi	r24, 0xFF	; 255

    printf("\tWrote: %8ld\n", bytes);

    // Return file size
    return(bytes);
}
   1a78a:	9f ef       	ldi	r25, 0xFF	; 255
   1a78c:	eb 96       	adiw	r28, 0x3b	; 59
   1a78e:	e2 e1       	ldi	r30, 0x12	; 18
   1a790:	0c 94 fa df 	jmp	0x1bff4	; 0x1bff4 <__epilogue_restores__>

0001a794 <lif_extract_e010_as_ascii>:
/// @param[in] lifname:  name of file in LIF image
/// @param[in] username: name to call the extracted image
/// @return 1 on sucess or 0 on error
MEMSPACE
int lif_extract_e010_as_ascii(char *lifimagename, char *lifname, char *username)
{
   1a794:	a7 e3       	ldi	r26, 0x37	; 55
   1a796:	b2 e0       	ldi	r27, 0x02	; 2
   1a798:	e0 ed       	ldi	r30, 0xD0	; 208
   1a79a:	f3 ed       	ldi	r31, 0xD3	; 211
   1a79c:	0c 94 de df 	jmp	0x1bfbc	; 0x1bfbc <__prologue_saves__>
   1a7a0:	7c 01       	movw	r14, r24
   1a7a2:	8b 01       	movw	r16, r22
   1a7a4:	ca 5d       	subi	r28, 0xDA	; 218
   1a7a6:	dd 4f       	sbci	r29, 0xFD	; 253
   1a7a8:	59 83       	std	Y+1, r21	; 0x01
   1a7aa:	48 83       	st	Y, r20
   1a7ac:	c6 52       	subi	r28, 0x26	; 38
   1a7ae:	d2 40       	sbci	r29, 0x02	; 2
    uint8_t buf[LIF_SECTOR_SIZE+4];
    // Write buffer, FYI: will ALWAYS be smaller then the read data buffer
    uint8_t wbuf[LIF_SECTOR_SIZE+4];


    LIF = lif_open_volume(lifimagename,"r");
   1a7b0:	64 e1       	ldi	r22, 0x14	; 20
   1a7b2:	73 e0       	ldi	r23, 0x03	; 3
   1a7b4:	6b d9       	rcall	.-3370   	; 0x19a8c <lif_open_volume>
   1a7b6:	6c 01       	movw	r12, r24
    if(LIF == NULL)
   1a7b8:	00 97       	sbiw	r24, 0x00	; 0
   1a7ba:	69 f4       	brne	.+26     	; 0x1a7d6 <lif_extract_e010_as_ascii+0x42>
    {
        printf("LIF image not found:%s\n", lifimagename);
   1a7bc:	ed b7       	in	r30, 0x3d	; 61
   1a7be:	fe b7       	in	r31, 0x3e	; 62
   1a7c0:	f5 82       	std	Z+5, r15	; 0x05
   1a7c2:	e4 82       	std	Z+4, r14	; 0x04
   1a7c4:	84 eb       	ldi	r24, 0xB4	; 180
   1a7c6:	91 e3       	ldi	r25, 0x31	; 49
   1a7c8:	a0 e0       	ldi	r26, 0x00	; 0
   1a7ca:	81 83       	std	Z+1, r24	; 0x01
   1a7cc:	92 83       	std	Z+2, r25	; 0x02
   1a7ce:	a3 83       	std	Z+3, r26	; 0x03
   1a7d0:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   1a7d4:	13 c0       	rjmp	.+38     	; 0x1a7fc <lif_extract_e010_as_ascii+0x68>
        return(0);
    }

    index = lif_find_file(LIF, lifname);
   1a7d6:	b8 01       	movw	r22, r16
   1a7d8:	28 dc       	rcall	.-1968   	; 0x1a02a <lif_find_file>
    if(index == -1)
   1a7da:	01 96       	adiw	r24, 0x01	; 1
   1a7dc:	91 f4       	brne	.+36     	; 0x1a802 <lif_extract_e010_as_ascii+0x6e>
    {
        printf("LIF File not found:%s\n", lifname);
   1a7de:	ed b7       	in	r30, 0x3d	; 61
   1a7e0:	fe b7       	in	r31, 0x3e	; 62
   1a7e2:	15 83       	std	Z+5, r17	; 0x05
   1a7e4:	04 83       	std	Z+4, r16	; 0x04
   1a7e6:	8d e9       	ldi	r24, 0x9D	; 157
   1a7e8:	91 e3       	ldi	r25, 0x31	; 49
   1a7ea:	a0 e0       	ldi	r26, 0x00	; 0
   1a7ec:	81 83       	std	Z+1, r24	; 0x01
   1a7ee:	92 83       	std	Z+2, r25	; 0x02
   1a7f0:	a3 83       	std	Z+3, r26	; 0x03
   1a7f2:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a7f6:	c6 01       	movw	r24, r12
   1a7f8:	0e 94 8b c6 	call	0x18d16	; 0x18d16 <lif_close_volume>
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        printf("LIF File not found:%s\n", lifname);
        lif_closedir(LIF);
        return(0);
   1a7fc:	80 e0       	ldi	r24, 0x00	; 0
   1a7fe:	90 e0       	ldi	r25, 0x00	; 0
   1a800:	73 c2       	rjmp	.+1254   	; 0x1ace8 <lif_extract_e010_as_ascii+0x554>
    }

    if((LIF->DIR.FileType & 0xFFFC) != 0xE010)
   1a802:	f6 01       	movw	r30, r12
   1a804:	e6 5a       	subi	r30, 0xA6	; 166
   1a806:	ff 4f       	sbci	r31, 0xFF	; 255
   1a808:	80 81       	ld	r24, Z
   1a80a:	91 81       	ldd	r25, Z+1	; 0x01
   1a80c:	9c 01       	movw	r18, r24
   1a80e:	2c 7f       	andi	r18, 0xFC	; 252
   1a810:	20 31       	cpi	r18, 0x10	; 16
   1a812:	30 4e       	sbci	r19, 0xE0	; 224
   1a814:	a9 f0       	breq	.+42     	; 0x1a840 <lif_extract_e010_as_ascii+0xac>
    {
        printf("File %s has wrong type:[%04XH] expected 0xE010..0xE013\n", username, (int) LIF->DIR.FileType);
   1a816:	ed b7       	in	r30, 0x3d	; 61
   1a818:	fe b7       	in	r31, 0x3e	; 62
   1a81a:	97 83       	std	Z+7, r25	; 0x07
   1a81c:	86 83       	std	Z+6, r24	; 0x06
   1a81e:	ca 5d       	subi	r28, 0xDA	; 218
   1a820:	dd 4f       	sbci	r29, 0xFD	; 253
   1a822:	28 81       	ld	r18, Y
   1a824:	39 81       	ldd	r19, Y+1	; 0x01
   1a826:	c6 52       	subi	r28, 0x26	; 38
   1a828:	d2 40       	sbci	r29, 0x02	; 2
   1a82a:	35 83       	std	Z+5, r19	; 0x05
   1a82c:	24 83       	std	Z+4, r18	; 0x04
   1a82e:	85 e6       	ldi	r24, 0x65	; 101
   1a830:	91 e3       	ldi	r25, 0x31	; 49
   1a832:	a0 e0       	ldi	r26, 0x00	; 0
   1a834:	81 83       	std	Z+1, r24	; 0x01
   1a836:	92 83       	std	Z+2, r25	; 0x02
   1a838:	a3 83       	std	Z+3, r26	; 0x03
   1a83a:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   1a83e:	db cf       	rjmp	.-74     	; 0x1a7f6 <lif_extract_e010_as_ascii+0x62>
        lif_closedir(LIF);
        return(0);
    }

    start = LIF->DIR.FileStartSector;
   1a840:	f6 01       	movw	r30, r12
   1a842:	e4 5a       	subi	r30, 0xA4	; 164
   1a844:	ff 4f       	sbci	r31, 0xFF	; 255
   1a846:	80 80       	ld	r8, Z
   1a848:	91 80       	ldd	r9, Z+1	; 0x01
   1a84a:	a2 80       	ldd	r10, Z+2	; 0x02
   1a84c:	b3 80       	ldd	r11, Z+3	; 0x03
    end = start + LIF->DIR.FileSectors;
   1a84e:	34 96       	adiw	r30, 0x04	; 4
   1a850:	80 81       	ld	r24, Z
   1a852:	91 81       	ldd	r25, Z+1	; 0x01
   1a854:	a2 81       	ldd	r26, Z+2	; 0x02
   1a856:	b3 81       	ldd	r27, Z+3	; 0x03
   1a858:	a5 01       	movw	r20, r10
   1a85a:	94 01       	movw	r18, r8
   1a85c:	28 0f       	add	r18, r24
   1a85e:	39 1f       	adc	r19, r25
   1a860:	4a 1f       	adc	r20, r26
   1a862:	5b 1f       	adc	r21, r27
   1a864:	c4 5d       	subi	r28, 0xD4	; 212
   1a866:	dd 4f       	sbci	r29, 0xFD	; 253
   1a868:	28 83       	st	Y, r18
   1a86a:	39 83       	std	Y+1, r19	; 0x01
   1a86c:	4a 83       	std	Y+2, r20	; 0x02
   1a86e:	5b 83       	std	Y+3, r21	; 0x03
   1a870:	cc 52       	subi	r28, 0x2C	; 44
   1a872:	d2 40       	sbci	r29, 0x02	; 2

    t = lif_lifbcd2time(LIF->DIR.date);
   1a874:	c6 01       	movw	r24, r12
   1a876:	8c 59       	subi	r24, 0x9C	; 156
   1a878:	9f 4f       	sbci	r25, 0xFF	; 255
   1a87a:	0e 94 97 c1 	call	0x1832e	; 0x1832e <lif_lifbcd2time>
   1a87e:	c8 5d       	subi	r28, 0xD8	; 216
   1a880:	dd 4f       	sbci	r29, 0xFD	; 253
   1a882:	68 83       	st	Y, r22
   1a884:	79 83       	std	Y+1, r23	; 0x01
   1a886:	8a 83       	std	Y+2, r24	; 0x02
   1a888:	9b 83       	std	Y+3, r25	; 0x03
   1a88a:	c8 52       	subi	r28, 0x28	; 40
   1a88c:	d2 40       	sbci	r29, 0x02	; 2

    offset = start * (long) LIF_SECTOR_SIZE;
   1a88e:	ba 2d       	mov	r27, r10
   1a890:	a9 2d       	mov	r26, r9
   1a892:	98 2d       	mov	r25, r8
   1a894:	88 27       	eor	r24, r24
   1a896:	c2 5e       	subi	r28, 0xE2	; 226
   1a898:	dd 4f       	sbci	r29, 0xFD	; 253
   1a89a:	88 83       	st	Y, r24
   1a89c:	99 83       	std	Y+1, r25	; 0x01
   1a89e:	aa 83       	std	Y+2, r26	; 0x02
   1a8a0:	bb 83       	std	Y+3, r27	; 0x03
   1a8a2:	ce 51       	subi	r28, 0x1E	; 30
   1a8a4:	d2 40       	sbci	r29, 0x02	; 2

    fo = lif_open(username,"wb");
   1a8a6:	6e ed       	ldi	r22, 0xDE	; 222
   1a8a8:	78 e0       	ldi	r23, 0x08	; 8
   1a8aa:	ca 5d       	subi	r28, 0xDA	; 218
   1a8ac:	dd 4f       	sbci	r29, 0xFD	; 253
   1a8ae:	88 81       	ld	r24, Y
   1a8b0:	99 81       	ldd	r25, Y+1	; 0x01
   1a8b2:	c6 52       	subi	r28, 0x26	; 38
   1a8b4:	d2 40       	sbci	r29, 0x02	; 2
   1a8b6:	0e 94 5b bd 	call	0x17ab6	; 0x17ab6 <lif_open>
   1a8ba:	cc 5d       	subi	r28, 0xDC	; 220
   1a8bc:	dd 4f       	sbci	r29, 0xFD	; 253
   1a8be:	99 83       	std	Y+1, r25	; 0x01
   1a8c0:	88 83       	st	Y, r24
   1a8c2:	c4 52       	subi	r28, 0x24	; 36
   1a8c4:	d2 40       	sbci	r29, 0x02	; 2
    if(fo == NULL)
   1a8c6:	89 2b       	or	r24, r25
   1a8c8:	09 f4       	brne	.+2      	; 0x1a8cc <lif_extract_e010_as_ascii+0x138>
   1a8ca:	95 cf       	rjmp	.-214    	; 0x1a7f6 <lif_extract_e010_as_ascii+0x62>
    {
        lif_closedir(LIF);
        return(0);
    }

    printf("Extracting: %s\n", username);
   1a8cc:	ca 5d       	subi	r28, 0xDA	; 218
   1a8ce:	dd 4f       	sbci	r29, 0xFD	; 253
   1a8d0:	28 81       	ld	r18, Y
   1a8d2:	39 81       	ldd	r19, Y+1	; 0x01
   1a8d4:	c6 52       	subi	r28, 0x26	; 38
   1a8d6:	d2 40       	sbci	r29, 0x02	; 2
   1a8d8:	ed b7       	in	r30, 0x3d	; 61
   1a8da:	fe b7       	in	r31, 0x3e	; 62
   1a8dc:	35 83       	std	Z+5, r19	; 0x05
   1a8de:	24 83       	std	Z+4, r18	; 0x04
   1a8e0:	85 e5       	ldi	r24, 0x55	; 85
   1a8e2:	91 e3       	ldi	r25, 0x31	; 49
   1a8e4:	a0 e0       	ldi	r26, 0x00	; 0
   1a8e6:	81 83       	std	Z+1, r24	; 0x01
   1a8e8:	92 83       	std	Z+2, r25	; 0x02
   1a8ea:	a3 83       	std	Z+3, r26	; 0x03
   1a8ec:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>

    bytes = 0;
    wind = 0;
   1a8f0:	21 2c       	mov	r2, r1
   1a8f2:	31 2c       	mov	r3, r1
    uint32_t start, end;    // sectors
    long offset, bytes;     // bytes
    int index;
    int i, len,size;
    int status = 1;
    int done = 0;
   1a8f4:	ce 5d       	subi	r28, 0xDE	; 222
   1a8f6:	dd 4f       	sbci	r29, 0xFD	; 253
   1a8f8:	19 82       	std	Y+1, r1	; 0x01
   1a8fa:	18 82       	st	Y, r1
   1a8fc:	c2 52       	subi	r28, 0x22	; 34
   1a8fe:	d2 40       	sbci	r29, 0x02	; 2
    lif_t *LIF;
    uint32_t start, end;    // sectors
    long offset, bytes;     // bytes
    int index;
    int i, len,size;
    int status = 1;
   1a900:	ee 24       	eor	r14, r14
   1a902:	e3 94       	inc	r14
   1a904:	f1 2c       	mov	r15, r1
        return(0);
    }

    printf("Extracting: %s\n", username);

    bytes = 0;
   1a906:	41 2c       	mov	r4, r1
   1a908:	51 2c       	mov	r5, r1
   1a90a:	32 01       	movw	r6, r4
                        status = 0;
                        done = 1;
                        break;
                    }
                    bytes += size;
                    printf("\tWrote: %8ld\r", bytes);
   1a90c:	84 e9       	ldi	r24, 0x94	; 148
   1a90e:	90 e3       	ldi	r25, 0x30	; 48
   1a910:	9c 01       	movw	r18, r24
   1a912:	40 e0       	ldi	r20, 0x00	; 0
   1a914:	ce 5c       	subi	r28, 0xCE	; 206
   1a916:	dd 4f       	sbci	r29, 0xFD	; 253
   1a918:	28 83       	st	Y, r18
   1a91a:	39 83       	std	Y+1, r19	; 0x01
   1a91c:	4a 83       	std	Y+2, r20	; 0x02
   1a91e:	c2 53       	subi	r28, 0x32	; 50
   1a920:	d2 40       	sbci	r29, 0x02	; 2
                if(wind >= LIF_SECTOR_SIZE)
                {
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
   1a922:	82 ea       	ldi	r24, 0xA2	; 162
   1a924:	90 e3       	ldi	r25, 0x30	; 48
   1a926:	9c 01       	movw	r18, r24
   1a928:	40 e0       	ldi	r20, 0x00	; 0
   1a92a:	cb 5c       	subi	r28, 0xCB	; 203
   1a92c:	dd 4f       	sbci	r29, 0xFD	; 253
   1a92e:	28 83       	st	Y, r18
   1a930:	39 83       	std	Y+1, r19	; 0x01
   1a932:	4a 83       	std	Y+2, r20	; 0x02
   1a934:	c5 53       	subi	r28, 0x35	; 53
   1a936:	d2 40       	sbci	r29, 0x02	; 2

    bytes = 0;
    wind = 0;
    ind = 0;

    while(lif_bytes2sectors(offset) <= end)
   1a938:	c2 5e       	subi	r28, 0xE2	; 226
   1a93a:	dd 4f       	sbci	r29, 0xFD	; 253
   1a93c:	28 81       	ld	r18, Y
   1a93e:	39 81       	ldd	r19, Y+1	; 0x01
   1a940:	4a 81       	ldd	r20, Y+2	; 0x02
   1a942:	5b 81       	ldd	r21, Y+3	; 0x03
   1a944:	ce 51       	subi	r28, 0x1E	; 30
   1a946:	d2 40       	sbci	r29, 0x02	; 2
   1a948:	bb 27       	eor	r27, r27
   1a94a:	a5 2f       	mov	r26, r21
   1a94c:	94 2f       	mov	r25, r20
   1a94e:	83 2f       	mov	r24, r19
   1a950:	c4 5d       	subi	r28, 0xD4	; 212
   1a952:	dd 4f       	sbci	r29, 0xFD	; 253
   1a954:	28 81       	ld	r18, Y
   1a956:	39 81       	ldd	r19, Y+1	; 0x01
   1a958:	4a 81       	ldd	r20, Y+2	; 0x02
   1a95a:	5b 81       	ldd	r21, Y+3	; 0x03
   1a95c:	cc 52       	subi	r28, 0x2C	; 44
   1a95e:	d2 40       	sbci	r29, 0x02	; 2
   1a960:	28 17       	cp	r18, r24
   1a962:	39 07       	cpc	r19, r25
   1a964:	4a 07       	cpc	r20, r26
   1a966:	5b 07       	cpc	r21, r27
   1a968:	08 f4       	brcc	.+2      	; 0x1a96c <lif_extract_e010_as_ascii+0x1d8>
   1a96a:	51 c1       	rjmp	.+674    	; 0x1ac0e <lif_extract_e010_as_ascii+0x47a>
    {
        // LIF images are always multiples of LIF_SECTOR_SIZE
        size = lif_read(LIF, buf, offset, LIF_SECTOR_SIZE);
   1a96c:	00 e0       	ldi	r16, 0x00	; 0
   1a96e:	11 e0       	ldi	r17, 0x01	; 1
   1a970:	c2 5e       	subi	r28, 0xE2	; 226
   1a972:	dd 4f       	sbci	r29, 0xFD	; 253
   1a974:	28 81       	ld	r18, Y
   1a976:	39 81       	ldd	r19, Y+1	; 0x01
   1a978:	4a 81       	ldd	r20, Y+2	; 0x02
   1a97a:	5b 81       	ldd	r21, Y+3	; 0x03
   1a97c:	ce 51       	subi	r28, 0x1E	; 30
   1a97e:	d2 40       	sbci	r29, 0x02	; 2
   1a980:	be 01       	movw	r22, r28
   1a982:	60 5f       	subi	r22, 0xF0	; 240
   1a984:	7e 4f       	sbci	r23, 0xFE	; 254
   1a986:	c6 01       	movw	r24, r12
   1a988:	0e 94 df bd 	call	0x17bbe	; 0x17bbe <lif_read>
        if(size < LIF_SECTOR_SIZE)
   1a98c:	6f 3f       	cpi	r22, 0xFF	; 255
   1a98e:	71 05       	cpc	r23, r1
   1a990:	09 f0       	breq	.+2      	; 0x1a994 <lif_extract_e010_as_ascii+0x200>
   1a992:	0c f4       	brge	.+2      	; 0x1a996 <lif_extract_e010_as_ascii+0x202>
   1a994:	3a c1       	rjmp	.+628    	; 0x1ac0a <lif_extract_e010_as_ascii+0x476>
   1a996:	00 e0       	ldi	r16, 0x00	; 0
   1a998:	10 e0       	ldi	r17, 0x00	; 0
            status = 0;
            break;
        }

        ind = 0;
        while(ind < LIF_SECTOR_SIZE && !done)
   1a99a:	ce 5d       	subi	r28, 0xDE	; 222
   1a99c:	dd 4f       	sbci	r29, 0xFD	; 253
   1a99e:	88 81       	ld	r24, Y
   1a9a0:	99 81       	ldd	r25, Y+1	; 0x01
   1a9a2:	c2 52       	subi	r28, 0x22	; 34
   1a9a4:	d2 40       	sbci	r29, 0x02	; 2
   1a9a6:	89 2b       	or	r24, r25
   1a9a8:	09 f0       	breq	.+2      	; 0x1a9ac <lif_extract_e010_as_ascii+0x218>
   1a9aa:	1b c1       	rjmp	.+566    	; 0x1abe2 <lif_extract_e010_as_ascii+0x44e>
        {
            if(buf[ind] == 0xDF || buf[ind] == 0xCF || buf[ind] == 0x6F)
   1a9ac:	e0 e1       	ldi	r30, 0x10	; 16
   1a9ae:	f1 e0       	ldi	r31, 0x01	; 1
   1a9b0:	ec 0f       	add	r30, r28
   1a9b2:	fd 1f       	adc	r31, r29
   1a9b4:	e0 0f       	add	r30, r16
   1a9b6:	f1 1f       	adc	r31, r17
   1a9b8:	80 81       	ld	r24, Z
   1a9ba:	98 2f       	mov	r25, r24
   1a9bc:	9f 7e       	andi	r25, 0xEF	; 239
   1a9be:	9f 3c       	cpi	r25, 0xCF	; 207
   1a9c0:	11 f0       	breq	.+4      	; 0x1a9c6 <lif_extract_e010_as_ascii+0x232>
   1a9c2:	8f 36       	cpi	r24, 0x6F	; 111
   1a9c4:	c9 f5       	brne	.+114    	; 0x1aa38 <lif_extract_e010_as_ascii+0x2a4>
            {
                ++ind;
                len = buf[ind++] & 0xff;
   1a9c6:	e0 e1       	ldi	r30, 0x10	; 16
   1a9c8:	f1 e0       	ldi	r31, 0x01	; 1
   1a9ca:	ec 0f       	add	r30, r28
   1a9cc:	fd 1f       	adc	r31, r29
   1a9ce:	e0 0f       	add	r30, r16
   1a9d0:	f1 1f       	adc	r31, r17
   1a9d2:	a1 80       	ldd	r10, Z+1	; 0x01
                len |= ((buf[ind++] & 0xff) <<8); 
   1a9d4:	f8 01       	movw	r30, r16
   1a9d6:	32 96       	adiw	r30, 0x02	; 2
   1a9d8:	40 e1       	ldi	r20, 0x10	; 16
   1a9da:	51 e0       	ldi	r21, 0x01	; 1
   1a9dc:	4c 0f       	add	r20, r28
   1a9de:	5d 1f       	adc	r21, r29
   1a9e0:	e4 0f       	add	r30, r20
   1a9e2:	f5 1f       	adc	r31, r21
   1a9e4:	0d 5f       	subi	r16, 0xFD	; 253
   1a9e6:	1f 4f       	sbci	r17, 0xFF	; 255
   1a9e8:	80 81       	ld	r24, Z
   1a9ea:	b1 2c       	mov	r11, r1
   1a9ec:	b8 2a       	or	r11, r24
                // EOF ?
                if(len == 0)
   1a9ee:	a1 14       	cp	r10, r1
   1a9f0:	b1 04       	cpc	r11, r1
   1a9f2:	09 f4       	brne	.+2      	; 0x1a9f6 <lif_extract_e010_as_ascii+0x262>
   1a9f4:	ee c0       	rjmp	.+476    	; 0x1abd2 <lif_extract_e010_as_ascii+0x43e>
                {
                    done = 1;
                    break;
                }
                if(len >= LIF_SECTOR_SIZE)
   1a9f6:	5f ef       	ldi	r21, 0xFF	; 255
   1a9f8:	a5 16       	cp	r10, r21
   1a9fa:	b1 04       	cpc	r11, r1
   1a9fc:	09 f0       	breq	.+2      	; 0x1aa00 <lif_extract_e010_as_ascii+0x26c>
   1a9fe:	7c f4       	brge	.+30     	; 0x1aa1e <lif_extract_e010_as_ascii+0x28a>
   1aa00:	c4 5e       	subi	r28, 0xE4	; 228
   1aa02:	dd 4f       	sbci	r29, 0xFD	; 253
   1aa04:	19 82       	std	Y+1, r1	; 0x01
   1aa06:	18 82       	st	Y, r1
   1aa08:	cc 51       	subi	r28, 0x1C	; 28
   1aa0a:	d2 40       	sbci	r29, 0x02	; 2
                break;
            }
            // write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
            {
                if(buf[ind] == '\r' && i == len-1)
   1aa0c:	c5 01       	movw	r24, r10
   1aa0e:	01 97       	sbiw	r24, 0x01	; 1
   1aa10:	c0 5d       	subi	r28, 0xD0	; 208
   1aa12:	dd 4f       	sbci	r29, 0xFD	; 253
   1aa14:	99 83       	std	Y+1, r25	; 0x01
   1aa16:	88 83       	st	Y, r24
   1aa18:	c0 53       	subi	r28, 0x30	; 48
   1aa1a:	d2 40       	sbci	r29, 0x02	; 2
   1aa1c:	68 c0       	rjmp	.+208    	; 0x1aaee <lif_extract_e010_as_ascii+0x35a>
                    done = 1;
                    break;
                }
                if(len >= LIF_SECTOR_SIZE)
                {
                    printf("lif_extract_e010_as_ascii: string too big size = %d\n", (int)len);
   1aa1e:	ed b7       	in	r30, 0x3d	; 61
   1aa20:	fe b7       	in	r31, 0x3e	; 62
   1aa22:	b5 82       	std	Z+5, r11	; 0x05
   1aa24:	a4 82       	std	Z+4, r10	; 0x04
   1aa26:	80 e2       	ldi	r24, 0x20	; 32
   1aa28:	91 e3       	ldi	r25, 0x31	; 49
   1aa2a:	a0 e0       	ldi	r26, 0x00	; 0
   1aa2c:	81 83       	std	Z+1, r24	; 0x01
   1aa2e:	92 83       	std	Z+2, r25	; 0x02
   1aa30:	a3 83       	std	Z+3, r26	; 0x03
   1aa32:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   1aa36:	1e c0       	rjmp	.+60     	; 0x1aa74 <lif_extract_e010_as_ascii+0x2e0>
                    status = 0;
                    done = 1;
                    break;
                }
            }
            else if(buf[ind] == 0xEF)
   1aa38:	8f 3e       	cpi	r24, 0xEF	; 239
   1aa3a:	09 f4       	brne	.+2      	; 0x1aa3e <lif_extract_e010_as_ascii+0x2aa>
   1aa3c:	d2 c0       	rjmp	.+420    	; 0x1abe2 <lif_extract_e010_as_ascii+0x44e>
                ind = 0;
                break;
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
   1aa3e:	ed b7       	in	r30, 0x3d	; 61
   1aa40:	fe b7       	in	r31, 0x3e	; 62
   1aa42:	13 87       	std	Z+11, r17	; 0x0b
   1aa44:	02 87       	std	Z+10, r16	; 0x0a
   1aa46:	c2 5e       	subi	r28, 0xE2	; 226
   1aa48:	dd 4f       	sbci	r29, 0xFD	; 253
   1aa4a:	28 81       	ld	r18, Y
   1aa4c:	39 81       	ldd	r19, Y+1	; 0x01
   1aa4e:	4a 81       	ldd	r20, Y+2	; 0x02
   1aa50:	5b 81       	ldd	r21, Y+3	; 0x03
   1aa52:	ce 51       	subi	r28, 0x1E	; 30
   1aa54:	d2 40       	sbci	r29, 0x02	; 2
   1aa56:	26 83       	std	Z+6, r18	; 0x06
   1aa58:	37 83       	std	Z+7, r19	; 0x07
   1aa5a:	40 87       	std	Z+8, r20	; 0x08
   1aa5c:	51 87       	std	Z+9, r21	; 0x09
   1aa5e:	90 e0       	ldi	r25, 0x00	; 0
   1aa60:	95 83       	std	Z+5, r25	; 0x05
   1aa62:	84 83       	std	Z+4, r24	; 0x04
   1aa64:	8a ec       	ldi	r24, 0xCA	; 202
   1aa66:	90 e3       	ldi	r25, 0x30	; 48
   1aa68:	a0 e0       	ldi	r26, 0x00	; 0
   1aa6a:	81 83       	std	Z+1, r24	; 0x01
   1aa6c:	92 83       	std	Z+2, r25	; 0x02
   1aa6e:	a3 83       	std	Z+3, r26	; 0x03
   1aa70:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
                status = 0;
                done = 1;
   1aa74:	21 e0       	ldi	r18, 0x01	; 1
   1aa76:	30 e0       	ldi	r19, 0x00	; 0
   1aa78:	ce 5d       	subi	r28, 0xDE	; 222
   1aa7a:	dd 4f       	sbci	r29, 0xFD	; 253
   1aa7c:	39 83       	std	Y+1, r19	; 0x01
   1aa7e:	28 83       	st	Y, r18
   1aa80:	c2 52       	subi	r28, 0x22	; 34
   1aa82:	d2 40       	sbci	r29, 0x02	; 2
                break;
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
                status = 0;
   1aa84:	e1 2c       	mov	r14, r1
   1aa86:	f1 2c       	mov	r15, r1
                done = 1;
                break;
   1aa88:	ac c0       	rjmp	.+344    	; 0x1abe2 <lif_extract_e010_as_ascii+0x44e>
            }
            // write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
   1aa8a:	0f 3f       	cpi	r16, 0xFF	; 255
   1aa8c:	11 05       	cpc	r17, r1
   1aa8e:	11 f0       	breq	.+4      	; 0x1aa94 <lif_extract_e010_as_ascii+0x300>
   1aa90:	0c f0       	brlt	.+2      	; 0x1aa94 <lif_extract_e010_as_ascii+0x300>
   1aa92:	a7 c0       	rjmp	.+334    	; 0x1abe2 <lif_extract_e010_as_ascii+0x44e>
            {
                if(buf[ind] == '\r' && i == len-1)
   1aa94:	e0 e1       	ldi	r30, 0x10	; 16
   1aa96:	f1 e0       	ldi	r31, 0x01	; 1
   1aa98:	ec 0f       	add	r30, r28
   1aa9a:	fd 1f       	adc	r31, r29
   1aa9c:	e0 0f       	add	r30, r16
   1aa9e:	f1 1f       	adc	r31, r17
   1aaa0:	20 81       	ld	r18, Z
   1aaa2:	a1 01       	movw	r20, r2
   1aaa4:	4f 5f       	subi	r20, 0xFF	; 255
   1aaa6:	5f 4f       	sbci	r21, 0xFF	; 255
   1aaa8:	4a 01       	movw	r8, r20
   1aaaa:	2d 30       	cpi	r18, 0x0D	; 13
   1aaac:	51 f1       	breq	.+84     	; 0x1ab02 <lif_extract_e010_as_ascii+0x36e>
                    ++ind;
                    break;
                }
                else 
                {
                    wbuf[wind++] = buf[ind++];
   1aaae:	98 2d       	mov	r25, r8
   1aab0:	89 2d       	mov	r24, r9
   1aab2:	0f 5f       	subi	r16, 0xFF	; 255
   1aab4:	1f 4f       	sbci	r17, 0xFF	; 255
   1aab6:	ec e0       	ldi	r30, 0x0C	; 12
   1aab8:	f0 e0       	ldi	r31, 0x00	; 0
   1aaba:	ec 0f       	add	r30, r28
   1aabc:	fd 1f       	adc	r31, r29
   1aabe:	e2 0d       	add	r30, r2
   1aac0:	f3 1d       	adc	r31, r3
   1aac2:	20 83       	st	Z, r18
                }

                if(wind >= LIF_SECTOR_SIZE)
   1aac4:	ef ef       	ldi	r30, 0xFF	; 255
   1aac6:	8e 16       	cp	r8, r30
   1aac8:	91 04       	cpc	r9, r1
   1aaca:	09 f0       	breq	.+2      	; 0x1aace <lif_extract_e010_as_ascii+0x33a>
   1aacc:	ac f5       	brge	.+106    	; 0x1ab38 <lif_extract_e010_as_ascii+0x3a4>
                status = 0;
                done = 1;
                break;
            }
            // write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
   1aace:	c4 5e       	subi	r28, 0xE4	; 228
   1aad0:	dd 4f       	sbci	r29, 0xFD	; 253
   1aad2:	28 81       	ld	r18, Y
   1aad4:	39 81       	ldd	r19, Y+1	; 0x01
   1aad6:	cc 51       	subi	r28, 0x1C	; 28
   1aad8:	d2 40       	sbci	r29, 0x02	; 2
   1aada:	2f 5f       	subi	r18, 0xFF	; 255
   1aadc:	3f 4f       	sbci	r19, 0xFF	; 255
   1aade:	c4 5e       	subi	r28, 0xE4	; 228
   1aae0:	dd 4f       	sbci	r29, 0xFD	; 253
   1aae2:	39 83       	std	Y+1, r19	; 0x01
   1aae4:	28 83       	st	Y, r18
   1aae6:	cc 51       	subi	r28, 0x1C	; 28
   1aae8:	d2 40       	sbci	r29, 0x02	; 2
   1aaea:	29 2e       	mov	r2, r25
   1aaec:	38 2e       	mov	r3, r24
   1aaee:	c4 5e       	subi	r28, 0xE4	; 228
   1aaf0:	dd 4f       	sbci	r29, 0xFD	; 253
   1aaf2:	48 81       	ld	r20, Y
   1aaf4:	59 81       	ldd	r21, Y+1	; 0x01
   1aaf6:	cc 51       	subi	r28, 0x1C	; 28
   1aaf8:	d2 40       	sbci	r29, 0x02	; 2
   1aafa:	4a 15       	cp	r20, r10
   1aafc:	5b 05       	cpc	r21, r11
   1aafe:	2c f2       	brlt	.-118    	; 0x1aa8a <lif_extract_e010_as_ascii+0x2f6>
   1ab00:	62 c0       	rjmp	.+196    	; 0x1abc6 <lif_extract_e010_as_ascii+0x432>
            {
                if(buf[ind] == '\r' && i == len-1)
   1ab02:	c4 5e       	subi	r28, 0xE4	; 228
   1ab04:	dd 4f       	sbci	r29, 0xFD	; 253
   1ab06:	88 81       	ld	r24, Y
   1ab08:	99 81       	ldd	r25, Y+1	; 0x01
   1ab0a:	cc 51       	subi	r28, 0x1C	; 28
   1ab0c:	d2 40       	sbci	r29, 0x02	; 2
   1ab0e:	c0 5d       	subi	r28, 0xD0	; 208
   1ab10:	dd 4f       	sbci	r29, 0xFD	; 253
   1ab12:	a8 81       	ld	r26, Y
   1ab14:	b9 81       	ldd	r27, Y+1	; 0x01
   1ab16:	c0 53       	subi	r28, 0x30	; 48
   1ab18:	d2 40       	sbci	r29, 0x02	; 2
   1ab1a:	8a 17       	cp	r24, r26
   1ab1c:	9b 07       	cpc	r25, r27
   1ab1e:	39 f6       	brne	.-114    	; 0x1aaae <lif_extract_e010_as_ascii+0x31a>
                {
                    wbuf[wind++] = '\n';
   1ab20:	ec e0       	ldi	r30, 0x0C	; 12
   1ab22:	f0 e0       	ldi	r31, 0x00	; 0
   1ab24:	ec 0f       	add	r30, r28
   1ab26:	fd 1f       	adc	r31, r29
   1ab28:	e2 0d       	add	r30, r2
   1ab2a:	f3 1d       	adc	r31, r3
   1ab2c:	ba e0       	ldi	r27, 0x0A	; 10
   1ab2e:	b0 83       	st	Z, r27
                    ++ind;
   1ab30:	0f 5f       	subi	r16, 0xFF	; 255
   1ab32:	1f 4f       	sbci	r17, 0xFF	; 255
            // write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
            {
                if(buf[ind] == '\r' && i == len-1)
                {
                    wbuf[wind++] = '\n';
   1ab34:	1a 01       	movw	r2, r20
                    ++ind;
                    break;
   1ab36:	47 c0       	rjmp	.+142    	; 0x1abc6 <lif_extract_e010_as_ascii+0x432>
                    wbuf[wind++] = buf[ind++];
                }

                if(wind >= LIF_SECTOR_SIZE)
                {
                    size = fwrite(wbuf,1,wind,fo);
   1ab38:	cc 5d       	subi	r28, 0xDC	; 220
   1ab3a:	dd 4f       	sbci	r29, 0xFD	; 253
   1ab3c:	28 81       	ld	r18, Y
   1ab3e:	39 81       	ldd	r19, Y+1	; 0x01
   1ab40:	c4 52       	subi	r28, 0x24	; 36
   1ab42:	d2 40       	sbci	r29, 0x02	; 2
   1ab44:	a4 01       	movw	r20, r8
   1ab46:	61 e0       	ldi	r22, 0x01	; 1
   1ab48:	70 e0       	ldi	r23, 0x00	; 0
   1ab4a:	ce 01       	movw	r24, r28
   1ab4c:	0c 96       	adiw	r24, 0x0c	; 12
   1ab4e:	0e 94 a4 7b 	call	0xf748	; 0xf748 <fwrite>
                    if(size < wind)
   1ab52:	88 15       	cp	r24, r8
   1ab54:	99 05       	cpc	r25, r9
   1ab56:	d4 f4       	brge	.+52     	; 0x1ab8c <lif_extract_e010_as_ascii+0x3f8>
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
   1ab58:	cb 5c       	subi	r28, 0xCB	; 203
   1ab5a:	dd 4f       	sbci	r29, 0xFD	; 253
   1ab5c:	28 81       	ld	r18, Y
   1ab5e:	39 81       	ldd	r19, Y+1	; 0x01
   1ab60:	4a 81       	ldd	r20, Y+2	; 0x02
   1ab62:	c5 53       	subi	r28, 0x35	; 53
   1ab64:	d2 40       	sbci	r29, 0x02	; 2
   1ab66:	ed b7       	in	r30, 0x3d	; 61
   1ab68:	fe b7       	in	r31, 0x3e	; 62
   1ab6a:	21 83       	std	Z+1, r18	; 0x01
   1ab6c:	32 83       	std	Z+2, r19	; 0x02
   1ab6e:	43 83       	std	Z+3, r20	; 0x03
   1ab70:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
                    ++ind;
                    break;
                }
                else 
                {
                    wbuf[wind++] = buf[ind++];
   1ab74:	14 01       	movw	r2, r8
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
                        status = 0;
                        done = 1;
   1ab76:	21 e0       	ldi	r18, 0x01	; 1
   1ab78:	30 e0       	ldi	r19, 0x00	; 0
   1ab7a:	ce 5d       	subi	r28, 0xDE	; 222
   1ab7c:	dd 4f       	sbci	r29, 0xFD	; 253
   1ab7e:	39 83       	std	Y+1, r19	; 0x01
   1ab80:	28 83       	st	Y, r18
   1ab82:	c2 52       	subi	r28, 0x22	; 34
   1ab84:	d2 40       	sbci	r29, 0x02	; 2
                {
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
                        status = 0;
   1ab86:	e1 2c       	mov	r14, r1
   1ab88:	f1 2c       	mov	r15, r1
                        done = 1;
                        break;
   1ab8a:	1d c0       	rjmp	.+58     	; 0x1abc6 <lif_extract_e010_as_ascii+0x432>
                    }
                    bytes += size;
   1ab8c:	09 2e       	mov	r0, r25
   1ab8e:	00 0c       	add	r0, r0
   1ab90:	aa 0b       	sbc	r26, r26
   1ab92:	bb 0b       	sbc	r27, r27
   1ab94:	48 0e       	add	r4, r24
   1ab96:	59 1e       	adc	r5, r25
   1ab98:	6a 1e       	adc	r6, r26
   1ab9a:	7b 1e       	adc	r7, r27
                    printf("\tWrote: %8ld\r", bytes);
   1ab9c:	ed b7       	in	r30, 0x3d	; 61
   1ab9e:	fe b7       	in	r31, 0x3e	; 62
   1aba0:	44 82       	std	Z+4, r4	; 0x04
   1aba2:	55 82       	std	Z+5, r5	; 0x05
   1aba4:	66 82       	std	Z+6, r6	; 0x06
   1aba6:	77 82       	std	Z+7, r7	; 0x07
   1aba8:	ce 5c       	subi	r28, 0xCE	; 206
   1abaa:	dd 4f       	sbci	r29, 0xFD	; 253
   1abac:	28 81       	ld	r18, Y
   1abae:	39 81       	ldd	r19, Y+1	; 0x01
   1abb0:	4a 81       	ldd	r20, Y+2	; 0x02
   1abb2:	c2 53       	subi	r28, 0x32	; 50
   1abb4:	d2 40       	sbci	r29, 0x02	; 2
   1abb6:	21 83       	std	Z+1, r18	; 0x01
   1abb8:	32 83       	std	Z+2, r19	; 0x02
   1abba:	43 83       	std	Z+3, r20	; 0x03
   1abbc:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
                    wind = 0;
   1abc0:	90 e0       	ldi	r25, 0x00	; 0
   1abc2:	80 e0       	ldi	r24, 0x00	; 0
   1abc4:	84 cf       	rjmp	.-248    	; 0x1aace <lif_extract_e010_as_ascii+0x33a>
            status = 0;
            break;
        }

        ind = 0;
        while(ind < LIF_SECTOR_SIZE && !done)
   1abc6:	0f 3f       	cpi	r16, 0xFF	; 255
   1abc8:	11 05       	cpc	r17, r1
   1abca:	09 f0       	breq	.+2      	; 0x1abce <lif_extract_e010_as_ascii+0x43a>
   1abcc:	0c f4       	brge	.+2      	; 0x1abd0 <lif_extract_e010_as_ascii+0x43c>
   1abce:	e5 ce       	rjmp	.-566    	; 0x1a99a <lif_extract_e010_as_ascii+0x206>
   1abd0:	08 c0       	rjmp	.+16     	; 0x1abe2 <lif_extract_e010_as_ascii+0x44e>
                len = buf[ind++] & 0xff;
                len |= ((buf[ind++] & 0xff) <<8); 
                // EOF ?
                if(len == 0)
                {
                    done = 1;
   1abd2:	a1 e0       	ldi	r26, 0x01	; 1
   1abd4:	b0 e0       	ldi	r27, 0x00	; 0
   1abd6:	ce 5d       	subi	r28, 0xDE	; 222
   1abd8:	dd 4f       	sbci	r29, 0xFD	; 253
   1abda:	b9 83       	std	Y+1, r27	; 0x01
   1abdc:	a8 83       	st	Y, r26
   1abde:	c2 52       	subi	r28, 0x22	; 34
   1abe0:	d2 40       	sbci	r29, 0x02	; 2

            }   // for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)

        }   // while(ind < LIF_SECTOR_SIZE && status)

        offset += (long) LIF_SECTOR_SIZE;
   1abe2:	c2 5e       	subi	r28, 0xE2	; 226
   1abe4:	dd 4f       	sbci	r29, 0xFD	; 253
   1abe6:	28 81       	ld	r18, Y
   1abe8:	39 81       	ldd	r19, Y+1	; 0x01
   1abea:	4a 81       	ldd	r20, Y+2	; 0x02
   1abec:	5b 81       	ldd	r21, Y+3	; 0x03
   1abee:	ce 51       	subi	r28, 0x1E	; 30
   1abf0:	d2 40       	sbci	r29, 0x02	; 2
   1abf2:	3f 5f       	subi	r19, 0xFF	; 255
   1abf4:	4f 4f       	sbci	r20, 0xFF	; 255
   1abf6:	5f 4f       	sbci	r21, 0xFF	; 255
   1abf8:	c2 5e       	subi	r28, 0xE2	; 226
   1abfa:	dd 4f       	sbci	r29, 0xFD	; 253
   1abfc:	28 83       	st	Y, r18
   1abfe:	39 83       	std	Y+1, r19	; 0x01
   1ac00:	4a 83       	std	Y+2, r20	; 0x02
   1ac02:	5b 83       	std	Y+3, r21	; 0x03
   1ac04:	ce 51       	subi	r28, 0x1E	; 30
   1ac06:	d2 40       	sbci	r29, 0x02	; 2
   1ac08:	97 ce       	rjmp	.-722    	; 0x1a938 <lif_extract_e010_as_ascii+0x1a4>
    {
        // LIF images are always multiples of LIF_SECTOR_SIZE
        size = lif_read(LIF, buf, offset, LIF_SECTOR_SIZE);
        if(size < LIF_SECTOR_SIZE)
        {
            status = 0;
   1ac0a:	e1 2c       	mov	r14, r1
   1ac0c:	f1 2c       	mov	r15, r1
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1ac0e:	c6 01       	movw	r24, r12
   1ac10:	0e 94 8b c6 	call	0x18d16	; 0x18d16 <lif_close_volume>

    }   // while(offset <= end)

    lif_closedir(LIF);
    // Flush any remaining bytes
    if(wind)
   1ac14:	21 14       	cp	r2, r1
   1ac16:	31 04       	cpc	r3, r1
   1ac18:	31 f1       	breq	.+76     	; 0x1ac66 <lif_extract_e010_as_ascii+0x4d2>
    {
        size = fwrite(wbuf,1,wind,fo);
   1ac1a:	cc 5d       	subi	r28, 0xDC	; 220
   1ac1c:	dd 4f       	sbci	r29, 0xFD	; 253
   1ac1e:	28 81       	ld	r18, Y
   1ac20:	39 81       	ldd	r19, Y+1	; 0x01
   1ac22:	c4 52       	subi	r28, 0x24	; 36
   1ac24:	d2 40       	sbci	r29, 0x02	; 2
   1ac26:	a1 01       	movw	r20, r2
   1ac28:	61 e0       	ldi	r22, 0x01	; 1
   1ac2a:	70 e0       	ldi	r23, 0x00	; 0
   1ac2c:	ce 01       	movw	r24, r28
   1ac2e:	0c 96       	adiw	r24, 0x0c	; 12
   1ac30:	0e 94 a4 7b 	call	0xf748	; 0xf748 <fwrite>
   1ac34:	8c 01       	movw	r16, r24
        if(size < wind)
   1ac36:	82 15       	cp	r24, r2
   1ac38:	93 05       	cpc	r25, r3
   1ac3a:	64 f4       	brge	.+24     	; 0x1ac54 <lif_extract_e010_as_ascii+0x4c0>
        {
            printf("lif_extract_e010_as_ascii: write error\n");
   1ac3c:	8c e6       	ldi	r24, 0x6C	; 108
   1ac3e:	90 e3       	ldi	r25, 0x30	; 48
   1ac40:	a0 e0       	ldi	r26, 0x00	; 0
   1ac42:	ed b7       	in	r30, 0x3d	; 61
   1ac44:	fe b7       	in	r31, 0x3e	; 62
   1ac46:	81 83       	std	Z+1, r24	; 0x01
   1ac48:	92 83       	std	Z+2, r25	; 0x02
   1ac4a:	a3 83       	std	Z+3, r26	; 0x03
   1ac4c:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
            status = 0;
   1ac50:	e1 2c       	mov	r14, r1
   1ac52:	f1 2c       	mov	r15, r1
        }
        bytes += size;
   1ac54:	c8 01       	movw	r24, r16
   1ac56:	01 2e       	mov	r0, r17
   1ac58:	00 0c       	add	r0, r0
   1ac5a:	aa 0b       	sbc	r26, r26
   1ac5c:	bb 0b       	sbc	r27, r27
   1ac5e:	48 0e       	add	r4, r24
   1ac60:	59 1e       	adc	r5, r25
   1ac62:	6a 1e       	adc	r6, r26
   1ac64:	7b 1e       	adc	r7, r27
    }
    fclose(fo);
   1ac66:	cc 5d       	subi	r28, 0xDC	; 220
   1ac68:	dd 4f       	sbci	r29, 0xFD	; 253
   1ac6a:	88 81       	ld	r24, Y
   1ac6c:	99 81       	ldd	r25, Y+1	; 0x01
   1ac6e:	c4 52       	subi	r28, 0x24	; 36
   1ac70:	d2 40       	sbci	r29, 0x02	; 2
   1ac72:	0e 94 26 7c 	call	0xf84c	; 0xf84c <fclose>
    if(t)
   1ac76:	c8 5d       	subi	r28, 0xD8	; 216
   1ac78:	dd 4f       	sbci	r29, 0xFD	; 253
   1ac7a:	28 81       	ld	r18, Y
   1ac7c:	39 81       	ldd	r19, Y+1	; 0x01
   1ac7e:	4a 81       	ldd	r20, Y+2	; 0x02
   1ac80:	5b 81       	ldd	r21, Y+3	; 0x03
   1ac82:	c8 52       	subi	r28, 0x28	; 40
   1ac84:	d2 40       	sbci	r29, 0x02	; 2
   1ac86:	21 15       	cp	r18, r1
   1ac88:	31 05       	cpc	r19, r1
   1ac8a:	41 05       	cpc	r20, r1
   1ac8c:	51 05       	cpc	r21, r1
   1ac8e:	d9 f0       	breq	.+54     	; 0x1acc6 <lif_extract_e010_as_ascii+0x532>
    {
        struct utimbuf times;
        times.modtime = t;
   1ac90:	c8 5e       	subi	r28, 0xE8	; 232
   1ac92:	dd 4f       	sbci	r29, 0xFD	; 253
   1ac94:	28 83       	st	Y, r18
   1ac96:	39 83       	std	Y+1, r19	; 0x01
   1ac98:	4a 83       	std	Y+2, r20	; 0x02
   1ac9a:	5b 83       	std	Y+3, r21	; 0x03
   1ac9c:	c8 51       	subi	r28, 0x18	; 24
   1ac9e:	d2 40       	sbci	r29, 0x02	; 2
        times.actime = t;
   1aca0:	cc 5e       	subi	r28, 0xEC	; 236
   1aca2:	dd 4f       	sbci	r29, 0xFD	; 253
   1aca4:	28 83       	st	Y, r18
   1aca6:	39 83       	std	Y+1, r19	; 0x01
   1aca8:	4a 83       	std	Y+2, r20	; 0x02
   1acaa:	5b 83       	std	Y+3, r21	; 0x03
   1acac:	c4 51       	subi	r28, 0x14	; 20
   1acae:	d2 40       	sbci	r29, 0x02	; 2
        utime(username, (struct utimbuf *) &times);
   1acb0:	be 01       	movw	r22, r28
   1acb2:	6c 5e       	subi	r22, 0xEC	; 236
   1acb4:	7d 4f       	sbci	r23, 0xFD	; 253
   1acb6:	ca 5d       	subi	r28, 0xDA	; 218
   1acb8:	dd 4f       	sbci	r29, 0xFD	; 253
   1acba:	88 81       	ld	r24, Y
   1acbc:	99 81       	ldd	r25, Y+1	; 0x01
   1acbe:	c6 52       	subi	r28, 0x26	; 38
   1acc0:	d2 40       	sbci	r29, 0x02	; 2
   1acc2:	0e 94 63 79 	call	0xf2c6	; 0xf2c6 <utime>
    }
    sync();
   1acc6:	0e 94 21 7b 	call	0xf642	; 0xf642 <sync>
    printf("\tWrote: %8ld\n", bytes);
   1acca:	ed b7       	in	r30, 0x3d	; 61
   1accc:	fe b7       	in	r31, 0x3e	; 62
   1acce:	44 82       	std	Z+4, r4	; 0x04
   1acd0:	55 82       	std	Z+5, r5	; 0x05
   1acd2:	66 82       	std	Z+6, r6	; 0x06
   1acd4:	77 82       	std	Z+7, r7	; 0x07
   1acd6:	8e e5       	ldi	r24, 0x5E	; 94
   1acd8:	90 e3       	ldi	r25, 0x30	; 48
   1acda:	a0 e0       	ldi	r26, 0x00	; 0
   1acdc:	81 83       	std	Z+1, r24	; 0x01
   1acde:	92 83       	std	Z+2, r25	; 0x02
   1ace0:	a3 83       	std	Z+3, r26	; 0x03
   1ace2:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    return(status);
   1ace6:	c7 01       	movw	r24, r14
}
   1ace8:	c9 5c       	subi	r28, 0xC9	; 201
   1acea:	dd 4f       	sbci	r29, 0xFD	; 253
   1acec:	e2 e1       	ldi	r30, 0x12	; 18
   1acee:	0c 94 fa df 	jmp	0x1bff4	; 0x1bff4 <__epilogue_restores__>

0001acf2 <lif_extract_lif_as_lif>:
/// @param[in] lifname:  name of file in LIF image we want to extract
/// @param[in] username: new LIF file to create
/// @return 1 on sucess or 0 on error
MEMSPACE
int lif_extract_lif_as_lif(char *lifimagename, char *lifname, char *username)
{
   1acf2:	a4 e1       	ldi	r26, 0x14	; 20
   1acf4:	b1 e0       	ldi	r27, 0x01	; 1
   1acf6:	ef e7       	ldi	r30, 0x7F	; 127
   1acf8:	f6 ed       	ldi	r31, 0xD6	; 214
   1acfa:	0c 94 de df 	jmp	0x1bfbc	; 0x1bfbc <__prologue_saves__>
   1acfe:	7c 01       	movw	r14, r24
   1ad00:	8b 01       	movw	r16, r22
   1ad02:	3a 01       	movw	r6, r20
    int i, size;
    int sectors;

    uint8_t buf[LIF_SECTOR_SIZE+4];

    LIF = lif_open_volume(lifimagename,"r");
   1ad04:	64 e1       	ldi	r22, 0x14	; 20
   1ad06:	73 e0       	ldi	r23, 0x03	; 3
   1ad08:	0e 94 46 cd 	call	0x19a8c	; 0x19a8c <lif_open_volume>
   1ad0c:	4c 01       	movw	r8, r24
    if(LIF == NULL)
   1ad0e:	00 97       	sbiw	r24, 0x00	; 0
   1ad10:	69 f4       	brne	.+26     	; 0x1ad2c <lif_extract_lif_as_lif+0x3a>
    {
        printf("LIF image not found:%s\n", lifimagename);
   1ad12:	ed b7       	in	r30, 0x3d	; 61
   1ad14:	fe b7       	in	r31, 0x3e	; 62
   1ad16:	f5 82       	std	Z+5, r15	; 0x05
   1ad18:	e4 82       	std	Z+4, r14	; 0x04
   1ad1a:	86 e4       	ldi	r24, 0x46	; 70
   1ad1c:	90 e3       	ldi	r25, 0x30	; 48
   1ad1e:	a0 e0       	ldi	r26, 0x00	; 0
   1ad20:	81 83       	std	Z+1, r24	; 0x01
   1ad22:	92 83       	std	Z+2, r25	; 0x02
   1ad24:	a3 83       	std	Z+3, r26	; 0x03
   1ad26:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   1ad2a:	13 c0       	rjmp	.+38     	; 0x1ad52 <lif_extract_lif_as_lif+0x60>
        return(0);
    }

    index = lif_find_file(LIF, lifname);
   1ad2c:	b8 01       	movw	r22, r16
   1ad2e:	7d d9       	rcall	.-3334   	; 0x1a02a <lif_find_file>
    if(index == -1)
   1ad30:	01 96       	adiw	r24, 0x01	; 1
   1ad32:	91 f4       	brne	.+36     	; 0x1ad58 <lif_extract_lif_as_lif+0x66>
    {
        printf("File not found:%s\n", lifname);
   1ad34:	ed b7       	in	r30, 0x3d	; 61
   1ad36:	fe b7       	in	r31, 0x3e	; 62
   1ad38:	15 83       	std	Z+5, r17	; 0x05
   1ad3a:	04 83       	std	Z+4, r16	; 0x04
   1ad3c:	83 e3       	ldi	r24, 0x33	; 51
   1ad3e:	90 e3       	ldi	r25, 0x30	; 48
   1ad40:	a0 e0       	ldi	r26, 0x00	; 0
   1ad42:	81 83       	std	Z+1, r24	; 0x01
   1ad44:	92 83       	std	Z+2, r25	; 0x02
   1ad46:	a3 83       	std	Z+3, r26	; 0x03
   1ad48:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1ad4c:	c4 01       	movw	r24, r8
   1ad4e:	0e 94 8b c6 	call	0x18d16	; 0x18d16 <lif_close_volume>
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        printf("File not found:%s\n", lifname);
        lif_closedir(LIF);
        return(0);
   1ad52:	00 e0       	ldi	r16, 0x00	; 0
   1ad54:	10 e0       	ldi	r17, 0x00	; 0
   1ad56:	ff c0       	rjmp	.+510    	; 0x1af56 <lif_extract_lif_as_lif+0x264>
    }

    sectors = LIF->DIR.FileSectors;
   1ad58:	94 01       	movw	r18, r8
   1ad5a:	20 5a       	subi	r18, 0xA0	; 160
   1ad5c:	3f 4f       	sbci	r19, 0xFF	; 255
   1ad5e:	c0 5f       	subi	r28, 0xF0	; 240
   1ad60:	de 4f       	sbci	r29, 0xFE	; 254
   1ad62:	39 83       	std	Y+1, r19	; 0x01
   1ad64:	28 83       	st	Y, r18
   1ad66:	c0 51       	subi	r28, 0x10	; 16
   1ad68:	d1 40       	sbci	r29, 0x01	; 1

    //Initialize the user file lif_t structure
    ULIF = lif_create_volume(username, "HFSLIF",1,1,sectors);
   1ad6a:	f9 01       	movw	r30, r18
   1ad6c:	a0 80       	ld	r10, Z
   1ad6e:	b1 80       	ldd	r11, Z+1	; 0x01
   1ad70:	0b 2c       	mov	r0, r11
   1ad72:	00 0c       	add	r0, r0
   1ad74:	cc 08       	sbc	r12, r12
   1ad76:	dd 08       	sbc	r13, r13
   1ad78:	e1 2c       	mov	r14, r1
   1ad7a:	f1 2c       	mov	r15, r1
   1ad7c:	87 01       	movw	r16, r14
   1ad7e:	e3 94       	inc	r14
   1ad80:	21 e0       	ldi	r18, 0x01	; 1
   1ad82:	30 e0       	ldi	r19, 0x00	; 0
   1ad84:	40 e0       	ldi	r20, 0x00	; 0
   1ad86:	50 e0       	ldi	r21, 0x00	; 0
   1ad88:	6b e5       	ldi	r22, 0x5B	; 91
   1ad8a:	76 e1       	ldi	r23, 0x16	; 22
   1ad8c:	c3 01       	movw	r24, r6
   1ad8e:	0e 94 fc c8 	call	0x191f8	; 0x191f8 <lif_create_volume>
   1ad92:	7c 01       	movw	r14, r24
    if(ULIF == NULL)
   1ad94:	89 2b       	or	r24, r25
   1ad96:	d1 f2       	breq	.-76     	; 0x1ad4c <lif_extract_lif_as_lif+0x5a>
    }

    // Only the start sector changes

    // Copy directory record
    ULIF->DIR = LIF->DIR;
   1ad98:	81 e2       	ldi	r24, 0x21	; 33
   1ad9a:	f4 01       	movw	r30, r8
   1ad9c:	e1 5b       	subi	r30, 0xB1	; 177
   1ad9e:	ff 4f       	sbci	r31, 0xFF	; 255
   1ada0:	d7 01       	movw	r26, r14
   1ada2:	a1 5b       	subi	r26, 0xB1	; 177
   1ada4:	bf 4f       	sbci	r27, 0xFF	; 255
   1ada6:	01 90       	ld	r0, Z+
   1ada8:	0d 92       	st	X+, r0
   1adaa:	8a 95       	dec	r24
   1adac:	e1 f7       	brne	.-8      	; 0x1ada6 <lif_extract_lif_as_lif+0xb4>

    ULIF->DIR.FileStartSector = 2;
   1adae:	82 e0       	ldi	r24, 0x02	; 2
   1adb0:	90 e0       	ldi	r25, 0x00	; 0
   1adb2:	a0 e0       	ldi	r26, 0x00	; 0
   1adb4:	b0 e0       	ldi	r27, 0x00	; 0
   1adb6:	f7 01       	movw	r30, r14
   1adb8:	e4 5a       	subi	r30, 0xA4	; 164
   1adba:	ff 4f       	sbci	r31, 0xFF	; 255
   1adbc:	80 83       	st	Z, r24
   1adbe:	91 83       	std	Z+1, r25	; 0x01
   1adc0:	a2 83       	std	Z+2, r26	; 0x02
   1adc2:	b3 83       	std	Z+3, r27	; 0x03
    ULIF->filesectors = LIF->DIR.FileSectors;
   1adc4:	c0 5f       	subi	r28, 0xF0	; 240
   1adc6:	de 4f       	sbci	r29, 0xFE	; 254
   1adc8:	e8 81       	ld	r30, Y
   1adca:	f9 81       	ldd	r31, Y+1	; 0x01
   1adcc:	c0 51       	subi	r28, 0x10	; 16
   1adce:	d1 40       	sbci	r29, 0x01	; 1
   1add0:	80 81       	ld	r24, Z
   1add2:	91 81       	ldd	r25, Z+1	; 0x01
   1add4:	a2 81       	ldd	r26, Z+2	; 0x02
   1add6:	b3 81       	ldd	r27, Z+3	; 0x03
   1add8:	f7 01       	movw	r30, r14
   1adda:	80 8b       	std	Z+16, r24	; 0x10
   1addc:	91 8b       	std	Z+17, r25	; 0x11
   1adde:	a2 8b       	std	Z+18, r26	; 0x12
   1ade0:	b3 8b       	std	Z+19, r27	; 0x13

    if( !lif_writedirindex(ULIF,0))
   1ade2:	60 e0       	ldi	r22, 0x00	; 0
   1ade4:	70 e0       	ldi	r23, 0x00	; 0
   1ade6:	c7 01       	movw	r24, r14
   1ade8:	0e 94 80 c7 	call	0x18f00	; 0x18f00 <lif_writedirindex>
   1adec:	8c 01       	movw	r16, r24
   1adee:	89 2b       	or	r24, r25
   1adf0:	41 f0       	breq	.+16     	; 0x1ae02 <lif_extract_lif_as_lif+0x110>
    {
        lif_closedir(LIF);
        lif_closedir(ULIF);
        return(0);
    }
    if( !lif_writedirEOF(ULIF,1) )
   1adf2:	61 e0       	ldi	r22, 0x01	; 1
   1adf4:	70 e0       	ldi	r23, 0x00	; 0
   1adf6:	c7 01       	movw	r24, r14
   1adf8:	0e 94 dc c7 	call	0x18fb8	; 0x18fb8 <lif_writedirEOF>
   1adfc:	8c 01       	movw	r16, r24
   1adfe:	89 2b       	or	r24, r25
   1ae00:	39 f4       	brne	.+14     	; 0x1ae10 <lif_extract_lif_as_lif+0x11e>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1ae02:	c4 01       	movw	r24, r8
   1ae04:	0e 94 8b c6 	call	0x18d16	; 0x18d16 <lif_close_volume>
   1ae08:	c7 01       	movw	r24, r14
   1ae0a:	0e 94 8b c6 	call	0x18d16	; 0x18d16 <lif_close_volume>
    }
    if( !lif_writedirEOF(ULIF,1) )
    {
        lif_closedir(LIF);
        lif_closedir(ULIF);
        return(0);
   1ae0e:	a3 c0       	rjmp	.+326    	; 0x1af56 <lif_extract_lif_as_lif+0x264>
    }

    uoffset =  ULIF->filestart * (long) LIF_SECTOR_SIZE;
   1ae10:	f7 01       	movw	r30, r14
   1ae12:	44 84       	ldd	r4, Z+12	; 0x0c
   1ae14:	55 84       	ldd	r5, Z+13	; 0x0d
   1ae16:	66 84       	ldd	r6, Z+14	; 0x0e
   1ae18:	77 84       	ldd	r7, Z+15	; 0x0f
   1ae1a:	76 2c       	mov	r7, r6
   1ae1c:	65 2c       	mov	r6, r5
   1ae1e:	54 2c       	mov	r5, r4
   1ae20:	44 24       	eor	r4, r4

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1ae22:	f4 01       	movw	r30, r8
   1ae24:	e4 5a       	subi	r30, 0xA4	; 164
   1ae26:	ff 4f       	sbci	r31, 0xFF	; 255
   1ae28:	80 81       	ld	r24, Z
   1ae2a:	91 81       	ldd	r25, Z+1	; 0x01
   1ae2c:	a2 81       	ldd	r26, Z+2	; 0x02
   1ae2e:	b3 81       	ldd	r27, Z+3	; 0x03
   1ae30:	22 27       	eor	r18, r18
   1ae32:	38 2f       	mov	r19, r24
   1ae34:	49 2f       	mov	r20, r25
   1ae36:	5a 2f       	mov	r21, r26
   1ae38:	c4 5f       	subi	r28, 0xF4	; 244
   1ae3a:	de 4f       	sbci	r29, 0xFE	; 254
   1ae3c:	28 83       	st	Y, r18
   1ae3e:	39 83       	std	Y+1, r19	; 0x01
   1ae40:	4a 83       	std	Y+2, r20	; 0x02
   1ae42:	5b 83       	std	Y+3, r21	; 0x03
   1ae44:	cc 50       	subi	r28, 0x0C	; 12
   1ae46:	d1 40       	sbci	r29, 0x01	; 1

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1ae48:	21 2c       	mov	r2, r1
   1ae4a:	31 2c       	mov	r3, r1
            return(0);
        }
        bytes += size;
        offset += size;
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
   1ae4c:	85 e2       	ldi	r24, 0x25	; 37
   1ae4e:	90 e3       	ldi	r25, 0x30	; 48
   1ae50:	9c 01       	movw	r18, r24
   1ae52:	40 e0       	ldi	r20, 0x00	; 0
   1ae54:	ce 5e       	subi	r28, 0xEE	; 238
   1ae56:	de 4f       	sbci	r29, 0xFE	; 254
   1ae58:	28 83       	st	Y, r18
   1ae5a:	39 83       	std	Y+1, r19	; 0x01
   1ae5c:	4a 83       	std	Y+2, r20	; 0x02
   1ae5e:	c2 51       	subi	r28, 0x12	; 18
   1ae60:	d1 40       	sbci	r29, 0x01	; 1

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1ae62:	c0 5f       	subi	r28, 0xF0	; 240
   1ae64:	de 4f       	sbci	r29, 0xFE	; 254
   1ae66:	e8 81       	ld	r30, Y
   1ae68:	f9 81       	ldd	r31, Y+1	; 0x01
   1ae6a:	c0 51       	subi	r28, 0x10	; 16
   1ae6c:	d1 40       	sbci	r29, 0x01	; 1
   1ae6e:	80 81       	ld	r24, Z
   1ae70:	91 81       	ldd	r25, Z+1	; 0x01
   1ae72:	28 16       	cp	r2, r24
   1ae74:	39 06       	cpc	r3, r25
   1ae76:	0c f0       	brlt	.+2      	; 0x1ae7a <lif_extract_lif_as_lif+0x188>
   1ae78:	58 c0       	rjmp	.+176    	; 0x1af2a <lif_extract_lif_as_lif+0x238>
    {
        size = lif_read(LIF, buf, offset,LIF_SECTOR_SIZE);
   1ae7a:	00 e0       	ldi	r16, 0x00	; 0
   1ae7c:	11 e0       	ldi	r17, 0x01	; 1
   1ae7e:	c4 5f       	subi	r28, 0xF4	; 244
   1ae80:	de 4f       	sbci	r29, 0xFE	; 254
   1ae82:	28 81       	ld	r18, Y
   1ae84:	39 81       	ldd	r19, Y+1	; 0x01
   1ae86:	4a 81       	ldd	r20, Y+2	; 0x02
   1ae88:	5b 81       	ldd	r21, Y+3	; 0x03
   1ae8a:	cc 50       	subi	r28, 0x0C	; 12
   1ae8c:	d1 40       	sbci	r29, 0x01	; 1
   1ae8e:	be 01       	movw	r22, r28
   1ae90:	68 5f       	subi	r22, 0xF8	; 248
   1ae92:	7f 4f       	sbci	r23, 0xFF	; 255
   1ae94:	c4 01       	movw	r24, r8
   1ae96:	0e 94 df bd 	call	0x17bbe	; 0x17bbe <lif_read>
   1ae9a:	5b 01       	movw	r10, r22
   1ae9c:	6c 01       	movw	r12, r24
        if(size < LIF_SECTOR_SIZE)
   1ae9e:	6f 3f       	cpi	r22, 0xFF	; 255
   1aea0:	71 05       	cpc	r23, r1
   1aea2:	09 f0       	breq	.+2      	; 0x1aea6 <lif_extract_lif_as_lif+0x1b4>
   1aea4:	2c f4       	brge	.+10     	; 0x1aeb0 <lif_extract_lif_as_lif+0x1be>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1aea6:	c4 01       	movw	r24, r8
   1aea8:	0e 94 8b c6 	call	0x18d16	; 0x18d16 <lif_close_volume>
   1aeac:	c7 01       	movw	r24, r14
   1aeae:	4f cf       	rjmp	.-354    	; 0x1ad4e <lif_extract_lif_as_lif+0x5c>
            lif_closedir(LIF);
            lif_closedir(ULIF);
            return(0);
        }

        lif_write(ULIF,buf,uoffset,LIF_SECTOR_SIZE);
   1aeb0:	00 e0       	ldi	r16, 0x00	; 0
   1aeb2:	11 e0       	ldi	r17, 0x01	; 1
   1aeb4:	a3 01       	movw	r20, r6
   1aeb6:	92 01       	movw	r18, r4
   1aeb8:	be 01       	movw	r22, r28
   1aeba:	68 5f       	subi	r22, 0xF8	; 248
   1aebc:	7f 4f       	sbci	r23, 0xFF	; 255
   1aebe:	c7 01       	movw	r24, r14
   1aec0:	0e 94 30 be 	call	0x17c60	; 0x17c60 <lif_write>
        {
            lif_closedir(LIF);
            lif_closedir(ULIF);
            return(0);
        }
        bytes += size;
   1aec4:	c5 01       	movw	r24, r10
   1aec6:	0b 2c       	mov	r0, r11
   1aec8:	00 0c       	add	r0, r0
   1aeca:	aa 0b       	sbc	r26, r26
   1aecc:	bb 0b       	sbc	r27, r27
   1aece:	48 0e       	add	r4, r24
   1aed0:	59 1e       	adc	r5, r25
   1aed2:	6a 1e       	adc	r6, r26
   1aed4:	7b 1e       	adc	r7, r27
        offset += size;
   1aed6:	c4 5f       	subi	r28, 0xF4	; 244
   1aed8:	de 4f       	sbci	r29, 0xFE	; 254
   1aeda:	28 81       	ld	r18, Y
   1aedc:	39 81       	ldd	r19, Y+1	; 0x01
   1aede:	4a 81       	ldd	r20, Y+2	; 0x02
   1aee0:	5b 81       	ldd	r21, Y+3	; 0x03
   1aee2:	cc 50       	subi	r28, 0x0C	; 12
   1aee4:	d1 40       	sbci	r29, 0x01	; 1
   1aee6:	28 0f       	add	r18, r24
   1aee8:	39 1f       	adc	r19, r25
   1aeea:	4a 1f       	adc	r20, r26
   1aeec:	5b 1f       	adc	r21, r27
   1aeee:	c4 5f       	subi	r28, 0xF4	; 244
   1aef0:	de 4f       	sbci	r29, 0xFE	; 254
   1aef2:	28 83       	st	Y, r18
   1aef4:	39 83       	std	Y+1, r19	; 0x01
   1aef6:	4a 83       	std	Y+2, r20	; 0x02
   1aef8:	5b 83       	std	Y+3, r21	; 0x03
   1aefa:	cc 50       	subi	r28, 0x0C	; 12
   1aefc:	d1 40       	sbci	r29, 0x01	; 1
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
   1aefe:	ed b7       	in	r30, 0x3d	; 61
   1af00:	fe b7       	in	r31, 0x3e	; 62
   1af02:	44 82       	std	Z+4, r4	; 0x04
   1af04:	55 82       	std	Z+5, r5	; 0x05
   1af06:	66 82       	std	Z+6, r6	; 0x06
   1af08:	77 82       	std	Z+7, r7	; 0x07
   1af0a:	ce 5e       	subi	r28, 0xEE	; 238
   1af0c:	de 4f       	sbci	r29, 0xFE	; 254
   1af0e:	28 81       	ld	r18, Y
   1af10:	39 81       	ldd	r19, Y+1	; 0x01
   1af12:	4a 81       	ldd	r20, Y+2	; 0x02
   1af14:	c2 51       	subi	r28, 0x12	; 18
   1af16:	d1 40       	sbci	r29, 0x01	; 1
   1af18:	21 83       	std	Z+1, r18	; 0x01
   1af1a:	32 83       	std	Z+2, r19	; 0x02
   1af1c:	43 83       	std	Z+3, r20	; 0x03
   1af1e:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1af22:	ff ef       	ldi	r31, 0xFF	; 255
   1af24:	2f 1a       	sub	r2, r31
   1af26:	3f 0a       	sbc	r3, r31
   1af28:	9c cf       	rjmp	.-200    	; 0x1ae62 <lif_extract_lif_as_lif+0x170>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1af2a:	c4 01       	movw	r24, r8
   1af2c:	0e 94 8b c6 	call	0x18d16	; 0x18d16 <lif_close_volume>
   1af30:	c7 01       	movw	r24, r14
   1af32:	0e 94 8b c6 	call	0x18d16	; 0x18d16 <lif_close_volume>
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
    }
    lif_closedir(LIF);
    lif_closedir(ULIF);
    printf("\tWrote: %8ld\n", bytes);
   1af36:	ed b7       	in	r30, 0x3d	; 61
   1af38:	fe b7       	in	r31, 0x3e	; 62
   1af3a:	44 82       	std	Z+4, r4	; 0x04
   1af3c:	55 82       	std	Z+5, r5	; 0x05
   1af3e:	66 82       	std	Z+6, r6	; 0x06
   1af40:	77 82       	std	Z+7, r7	; 0x07
   1af42:	87 e1       	ldi	r24, 0x17	; 23
   1af44:	90 e3       	ldi	r25, 0x30	; 48
   1af46:	a0 e0       	ldi	r26, 0x00	; 0
   1af48:	81 83       	std	Z+1, r24	; 0x01
   1af4a:	92 83       	std	Z+2, r25	; 0x02
   1af4c:	a3 83       	std	Z+3, r26	; 0x03
   1af4e:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    return(1);
   1af52:	01 e0       	ldi	r16, 0x01	; 1
   1af54:	10 e0       	ldi	r17, 0x00	; 0
}
   1af56:	c8 01       	movw	r24, r16
   1af58:	cc 5e       	subi	r28, 0xEC	; 236
   1af5a:	de 4f       	sbci	r29, 0xFE	; 254
   1af5c:	e2 e1       	ldi	r30, 0x12	; 18
   1af5e:	0c 94 fa df 	jmp	0x1bff4	; 0x1bff4 <__epilogue_restores__>

0001af62 <lif_add_lif_file>:
/// @param[in] lifname: LIF file name to copy file to
/// @param[in] userfile: LIF mage name copy file from 
/// @return size of data written into to LIF image, or -1 on error
MEMSPACE
long lif_add_lif_file(char *lifimagename, char *lifname, char *userfile)
{
   1af62:	2f 92       	push	r2
   1af64:	3f 92       	push	r3
   1af66:	4f 92       	push	r4
   1af68:	5f 92       	push	r5
   1af6a:	6f 92       	push	r6
   1af6c:	8f 92       	push	r8
   1af6e:	9f 92       	push	r9
   1af70:	af 92       	push	r10
   1af72:	bf 92       	push	r11
   1af74:	cf 92       	push	r12
   1af76:	df 92       	push	r13
   1af78:	ef 92       	push	r14
   1af7a:	ff 92       	push	r15
   1af7c:	0f 93       	push	r16
   1af7e:	1f 93       	push	r17
   1af80:	cf 93       	push	r28
   1af82:	df 93       	push	r29
   1af84:	cd b7       	in	r28, 0x3d	; 61
   1af86:	de b7       	in	r29, 0x3e	; 62
   1af88:	cd 51       	subi	r28, 0x1D	; 29
   1af8a:	d1 40       	sbci	r29, 0x01	; 1
   1af8c:	0f b6       	in	r0, 0x3f	; 63
   1af8e:	f8 94       	cli
   1af90:	de bf       	out	0x3e, r29	; 62
   1af92:	0f be       	out	0x3f, r0	; 63
   1af94:	cd bf       	out	0x3d, r28	; 61
   1af96:	5c 01       	movw	r10, r24
   1af98:	7b 01       	movw	r14, r22
   1af9a:	4a 01       	movw	r8, r20
    long offset, uoffset, start, bytes;
    int i, size;

    uint8_t buf[LIF_SECTOR_SIZE+4];

    if(!*lifimagename)
   1af9c:	dc 01       	movw	r26, r24
   1af9e:	8c 91       	ld	r24, X
   1afa0:	81 11       	cpse	r24, r1
   1afa2:	03 c0       	rjmp	.+6      	; 0x1afaa <lif_add_lif_file+0x48>
    {
        printf("lif_add: lifimagename is empty\n");
   1afa4:	87 ef       	ldi	r24, 0xF7	; 247
   1afa6:	9f e2       	ldi	r25, 0x2F	; 47
   1afa8:	06 c0       	rjmp	.+12     	; 0x1afb6 <lif_add_lif_file+0x54>
        return(-1);
    }
    if(!*lifname)
   1afaa:	db 01       	movw	r26, r22
   1afac:	8c 91       	ld	r24, X
   1afae:	81 11       	cpse	r24, r1
   1afb0:	0b c0       	rjmp	.+22     	; 0x1afc8 <lif_add_lif_file+0x66>
    {
        printf("lif_add: lifname is empty\n");
   1afb2:	8c ed       	ldi	r24, 0xDC	; 220
   1afb4:	9f e2       	ldi	r25, 0x2F	; 47
   1afb6:	a0 e0       	ldi	r26, 0x00	; 0
   1afb8:	ed b7       	in	r30, 0x3d	; 61
   1afba:	fe b7       	in	r31, 0x3e	; 62
   1afbc:	81 83       	std	Z+1, r24	; 0x01
   1afbe:	92 83       	std	Z+2, r25	; 0x02
   1afc0:	a3 83       	std	Z+3, r26	; 0x03
   1afc2:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   1afc6:	25 c1       	rjmp	.+586    	; 0x1b212 <lif_add_lif_file+0x2b0>
        return(-1);
    }
    if(!*userfile)
   1afc8:	da 01       	movw	r26, r20
   1afca:	8c 91       	ld	r24, X
   1afcc:	81 11       	cpse	r24, r1
   1afce:	03 c0       	rjmp	.+6      	; 0x1afd6 <lif_add_lif_file+0x74>
    {
        printf("lif_add: userfile is empty\n");
   1afd0:	80 ec       	ldi	r24, 0xC0	; 192
   1afd2:	9f e2       	ldi	r25, 0x2F	; 47
   1afd4:	f0 cf       	rjmp	.-32     	; 0x1afb6 <lif_add_lif_file+0x54>
        return(-1);
    }

    if(debuglevel & LIF_DEBUG)
   1afd6:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1afda:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   1afde:	92 ff       	sbrs	r25, 2
   1afe0:	10 c0       	rjmp	.+32     	; 0x1b002 <lif_add_lif_file+0xa0>
        printf("LIF image:[%s], LIF name:[%s], user file:[%s]\n", 
   1afe2:	ed b7       	in	r30, 0x3d	; 61
   1afe4:	fe b7       	in	r31, 0x3e	; 62
   1afe6:	51 87       	std	Z+9, r21	; 0x09
   1afe8:	40 87       	std	Z+8, r20	; 0x08
   1afea:	77 83       	std	Z+7, r23	; 0x07
   1afec:	66 83       	std	Z+6, r22	; 0x06
   1afee:	b5 82       	std	Z+5, r11	; 0x05
   1aff0:	a4 82       	std	Z+4, r10	; 0x04
   1aff2:	81 e9       	ldi	r24, 0x91	; 145
   1aff4:	9f e2       	ldi	r25, 0x2F	; 47
   1aff6:	a0 e0       	ldi	r26, 0x00	; 0
   1aff8:	81 83       	std	Z+1, r24	; 0x01
   1affa:	92 83       	std	Z+2, r25	; 0x02
   1affc:	a3 83       	std	Z+3, r26	; 0x03
   1affe:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
            lifimagename, lifname, userfile);

    // open  userfile as LIF image
    ULIF = lif_open_volume(userfile,"rb+");
   1b002:	6a ed       	ldi	r22, 0xDA	; 218
   1b004:	78 e0       	ldi	r23, 0x08	; 8
   1b006:	c4 01       	movw	r24, r8
   1b008:	0e 94 46 cd 	call	0x19a8c	; 0x19a8c <lif_open_volume>
   1b00c:	6c 01       	movw	r12, r24
    if(ULIF == NULL)
   1b00e:	00 97       	sbiw	r24, 0x00	; 0
   1b010:	09 f4       	brne	.+2      	; 0x1b014 <lif_add_lif_file+0xb2>
   1b012:	ff c0       	rjmp	.+510    	; 0x1b212 <lif_add_lif_file+0x2b0>
        return(-1); 

    // find lif file in user image
    index = lif_find_file(ULIF, lifname);
   1b014:	b7 01       	movw	r22, r14
   1b016:	09 d8       	rcall	.-4078   	; 0x1a02a <lif_find_file>
    if(index == -1)
   1b018:	01 96       	adiw	r24, 0x01	; 1
   1b01a:	a1 f4       	brne	.+40     	; 0x1b044 <lif_add_lif_file+0xe2>
    {
        printf("File not found:%s\n", lifname);
   1b01c:	ed b7       	in	r30, 0x3d	; 61
   1b01e:	fe b7       	in	r31, 0x3e	; 62
   1b020:	f5 82       	std	Z+5, r15	; 0x05
   1b022:	e4 82       	std	Z+4, r14	; 0x04
   1b024:	8e e7       	ldi	r24, 0x7E	; 126
   1b026:	9f e2       	ldi	r25, 0x2F	; 47
   1b028:	a0 e0       	ldi	r26, 0x00	; 0
   1b02a:	81 83       	std	Z+1, r24	; 0x01
   1b02c:	92 83       	std	Z+2, r25	; 0x02
   1b02e:	a3 83       	std	Z+3, r26	; 0x03
   1b030:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b034:	c6 01       	movw	r24, r12
   1b036:	0e 94 8b c6 	call	0x18d16	; 0x18d16 <lif_close_volume>
    index = lif_find_file(ULIF, lifname);
    if(index == -1)
    {
        printf("File not found:%s\n", lifname);
        lif_closedir(ULIF);
        return(0);
   1b03a:	60 e0       	ldi	r22, 0x00	; 0
   1b03c:	70 e0       	ldi	r23, 0x00	; 0
   1b03e:	80 e0       	ldi	r24, 0x00	; 0
   1b040:	90 e0       	ldi	r25, 0x00	; 0
   1b042:	ff c0       	rjmp	.+510    	; 0x1b242 <lif_add_lif_file+0x2e0>
    }

    LIF = lif_open_volume(lifimagename,"rb+");
   1b044:	6a ed       	ldi	r22, 0xDA	; 218
   1b046:	78 e0       	ldi	r23, 0x08	; 8
   1b048:	c5 01       	movw	r24, r10
   1b04a:	0e 94 46 cd 	call	0x19a8c	; 0x19a8c <lif_open_volume>
   1b04e:	7c 01       	movw	r14, r24
    if(LIF == NULL)
   1b050:	00 97       	sbiw	r24, 0x00	; 0
   1b052:	09 f4       	brne	.+2      	; 0x1b056 <lif_add_lif_file+0xf4>
   1b054:	de c0       	rjmp	.+444    	; 0x1b212 <lif_add_lif_file+0x2b0>
        return(-1); 

    // Now find a new free record that is big enough
    index = lif_newdir(LIF, ULIF->DIR.FileSectors);
   1b056:	f6 01       	movw	r30, r12
   1b058:	e0 5a       	subi	r30, 0xA0	; 160
   1b05a:	ff 4f       	sbci	r31, 0xFF	; 255
   1b05c:	40 81       	ld	r20, Z
   1b05e:	51 81       	ldd	r21, Z+1	; 0x01
   1b060:	62 81       	ldd	r22, Z+2	; 0x02
   1b062:	73 81       	ldd	r23, Z+3	; 0x03
   1b064:	0e 94 e6 cb 	call	0x197cc	; 0x197cc <lif_newdir>
   1b068:	ca 5e       	subi	r28, 0xEA	; 234
   1b06a:	de 4f       	sbci	r29, 0xFE	; 254
   1b06c:	99 83       	std	Y+1, r25	; 0x01
   1b06e:	88 83       	st	Y, r24
   1b070:	c6 51       	subi	r28, 0x16	; 22
   1b072:	d1 40       	sbci	r29, 0x01	; 1
    if(index == -1)
   1b074:	01 96       	adiw	r24, 0x01	; 1
   1b076:	79 f4       	brne	.+30     	; 0x1b096 <lif_add_lif_file+0x134>
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n", 
   1b078:	ed b7       	in	r30, 0x3d	; 61
   1b07a:	fe b7       	in	r31, 0x3e	; 62
   1b07c:	97 82       	std	Z+7, r9	; 0x07
   1b07e:	86 82       	std	Z+6, r8	; 0x06
   1b080:	b5 82       	std	Z+5, r11	; 0x05
   1b082:	a4 82       	std	Z+4, r10	; 0x04
   1b084:	8e e4       	ldi	r24, 0x4E	; 78
   1b086:	9f e2       	ldi	r25, 0x2F	; 47
   1b088:	a0 e0       	ldi	r26, 0x00	; 0
   1b08a:	81 83       	std	Z+1, r24	; 0x01
   1b08c:	92 83       	std	Z+2, r25	; 0x02
   1b08e:	a3 83       	std	Z+3, r26	; 0x03
   1b090:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   1b094:	a8 c0       	rjmp	.+336    	; 0x1b1e6 <lif_add_lif_file+0x284>
            lif_closedir(ULIF);
        return(-1);
    }

    // Save start sector
    start = LIF->DIR.FileStartSector;
   1b096:	c7 01       	movw	r24, r14
   1b098:	84 5a       	subi	r24, 0xA4	; 164
   1b09a:	9f 4f       	sbci	r25, 0xFF	; 255
   1b09c:	dc 01       	movw	r26, r24
   1b09e:	4d 91       	ld	r20, X+
   1b0a0:	5d 91       	ld	r21, X+
   1b0a2:	6d 91       	ld	r22, X+
   1b0a4:	7c 91       	ld	r23, X
   1b0a6:	13 97       	sbiw	r26, 0x03	; 3

    // Copy user image directory record to master image directory record
    LIF->DIR = ULIF->DIR;
   1b0a8:	21 e2       	ldi	r18, 0x21	; 33
   1b0aa:	f6 01       	movw	r30, r12
   1b0ac:	e1 5b       	subi	r30, 0xB1	; 177
   1b0ae:	ff 4f       	sbci	r31, 0xFF	; 255
   1b0b0:	1d 97       	sbiw	r26, 0x0d	; 13
   1b0b2:	01 90       	ld	r0, Z+
   1b0b4:	0d 92       	st	X+, r0
   1b0b6:	2a 95       	dec	r18
   1b0b8:	e1 f7       	brne	.-8      	; 0x1b0b2 <lif_add_lif_file+0x150>

    // Restore FileStartSector
    LIF->DIR.FileStartSector = start;
   1b0ba:	fc 01       	movw	r30, r24
   1b0bc:	40 83       	st	Z, r20
   1b0be:	51 83       	std	Z+1, r21	; 0x01
   1b0c0:	62 83       	std	Z+2, r22	; 0x02
   1b0c2:	73 83       	std	Z+3, r23	; 0x03

    // Master lif image file start in bytes
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1b0c4:	b6 2f       	mov	r27, r22
   1b0c6:	a5 2f       	mov	r26, r21
   1b0c8:	94 2f       	mov	r25, r20
   1b0ca:	88 27       	eor	r24, r24
   1b0cc:	c2 5f       	subi	r28, 0xF2	; 242
   1b0ce:	de 4f       	sbci	r29, 0xFE	; 254
   1b0d0:	88 83       	st	Y, r24
   1b0d2:	99 83       	std	Y+1, r25	; 0x01
   1b0d4:	aa 83       	std	Y+2, r26	; 0x02
   1b0d6:	bb 83       	std	Y+3, r27	; 0x03
   1b0d8:	ce 50       	subi	r28, 0x0E	; 14
   1b0da:	d1 40       	sbci	r29, 0x01	; 1
    // User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1b0dc:	f6 01       	movw	r30, r12
   1b0de:	e4 5a       	subi	r30, 0xA4	; 164
   1b0e0:	ff 4f       	sbci	r31, 0xFF	; 255
   1b0e2:	80 81       	ld	r24, Z
   1b0e4:	91 81       	ldd	r25, Z+1	; 0x01
   1b0e6:	a2 81       	ldd	r26, Z+2	; 0x02
   1b0e8:	b3 81       	ldd	r27, Z+3	; 0x03
   1b0ea:	22 27       	eor	r18, r18
   1b0ec:	38 2f       	mov	r19, r24
   1b0ee:	49 2f       	mov	r20, r25
   1b0f0:	5a 2f       	mov	r21, r26
   1b0f2:	ce 5e       	subi	r28, 0xEE	; 238
   1b0f4:	de 4f       	sbci	r29, 0xFE	; 254
   1b0f6:	28 83       	st	Y, r18
   1b0f8:	39 83       	std	Y+1, r19	; 0x01
   1b0fa:	4a 83       	std	Y+2, r20	; 0x02
   1b0fc:	5b 83       	std	Y+3, r21	; 0x03
   1b0fe:	c2 51       	subi	r28, 0x12	; 18
   1b100:	d1 40       	sbci	r29, 0x01	; 1
    bytes = 0;
    // Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b102:	21 2c       	mov	r2, r1
   1b104:	31 2c       	mov	r3, r1

    // Master lif image file start in bytes
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    // User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
   1b106:	81 2c       	mov	r8, r1
   1b108:	91 2c       	mov	r9, r1
   1b10a:	54 01       	movw	r10, r8
    // Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b10c:	a7 01       	movw	r20, r14
   1b10e:	40 5a       	subi	r20, 0xA0	; 160
   1b110:	5f 4f       	sbci	r21, 0xFF	; 255
   1b112:	c4 5e       	subi	r28, 0xE4	; 228
   1b114:	de 4f       	sbci	r29, 0xFE	; 254
   1b116:	59 83       	std	Y+1, r21	; 0x01
   1b118:	48 83       	st	Y, r20
   1b11a:	cc 51       	subi	r28, 0x1C	; 28
   1b11c:	d1 40       	sbci	r29, 0x01	; 1
            return(-1);
        }
        offset += (long) LIF_SECTOR_SIZE;
        uoffset += (long) LIF_SECTOR_SIZE;
        bytes += (long) LIF_SECTOR_SIZE;
        printf("\tWrote: %8ld\r", bytes);
   1b11e:	80 e4       	ldi	r24, 0x40	; 64
   1b120:	9f e2       	ldi	r25, 0x2F	; 47
   1b122:	2c 01       	movw	r4, r24
   1b124:	61 2c       	mov	r6, r1
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    // User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
    // Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b126:	27 c0       	rjmp	.+78     	; 0x1b176 <lif_add_lif_file+0x214>
            lif_closedir(ULIF);
            return(-1);
        }

        // Write
        size = lif_write(LIF, buf, offset, LIF_SECTOR_SIZE);
   1b128:	00 e0       	ldi	r16, 0x00	; 0
   1b12a:	11 e0       	ldi	r17, 0x01	; 1
   1b12c:	c8 5e       	subi	r28, 0xE8	; 232
   1b12e:	de 4f       	sbci	r29, 0xFE	; 254
   1b130:	28 81       	ld	r18, Y
   1b132:	39 81       	ldd	r19, Y+1	; 0x01
   1b134:	4a 81       	ldd	r20, Y+2	; 0x02
   1b136:	5b 81       	ldd	r21, Y+3	; 0x03
   1b138:	c8 51       	subi	r28, 0x18	; 24
   1b13a:	d1 40       	sbci	r29, 0x01	; 1
   1b13c:	be 01       	movw	r22, r28
   1b13e:	66 5f       	subi	r22, 0xF6	; 246
   1b140:	7f 4f       	sbci	r23, 0xFF	; 255
   1b142:	c7 01       	movw	r24, r14
   1b144:	0e 94 30 be 	call	0x17c60	; 0x17c60 <lif_write>
        if(size < LIF_SECTOR_SIZE)
   1b148:	8f 3f       	cpi	r24, 0xFF	; 255
   1b14a:	91 05       	cpc	r25, r1
   1b14c:	09 f0       	breq	.+2      	; 0x1b150 <lif_add_lif_file+0x1ee>
   1b14e:	0c f4       	brge	.+2      	; 0x1b152 <lif_add_lif_file+0x1f0>
   1b150:	4a c0       	rjmp	.+148    	; 0x1b1e6 <lif_add_lif_file+0x284>
            lif_closedir(ULIF);
            return(-1);
        }
        offset += (long) LIF_SECTOR_SIZE;
        uoffset += (long) LIF_SECTOR_SIZE;
        bytes += (long) LIF_SECTOR_SIZE;
   1b152:	5f ef       	ldi	r21, 0xFF	; 255
   1b154:	95 1a       	sub	r9, r21
   1b156:	a5 0a       	sbc	r10, r21
   1b158:	b5 0a       	sbc	r11, r21
        printf("\tWrote: %8ld\r", bytes);
   1b15a:	ed b7       	in	r30, 0x3d	; 61
   1b15c:	fe b7       	in	r31, 0x3e	; 62
   1b15e:	84 82       	std	Z+4, r8	; 0x04
   1b160:	95 82       	std	Z+5, r9	; 0x05
   1b162:	a6 82       	std	Z+6, r10	; 0x06
   1b164:	b7 82       	std	Z+7, r11	; 0x07
   1b166:	41 82       	std	Z+1, r4	; 0x01
   1b168:	52 82       	std	Z+2, r5	; 0x02
   1b16a:	63 82       	std	Z+3, r6	; 0x03
   1b16c:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    // User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
    // Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b170:	ff ef       	ldi	r31, 0xFF	; 255
   1b172:	2f 1a       	sub	r2, r31
   1b174:	3f 0a       	sbc	r3, r31
   1b176:	ce 5e       	subi	r28, 0xEE	; 238
   1b178:	de 4f       	sbci	r29, 0xFE	; 254
   1b17a:	28 81       	ld	r18, Y
   1b17c:	39 81       	ldd	r19, Y+1	; 0x01
   1b17e:	4a 81       	ldd	r20, Y+2	; 0x02
   1b180:	5b 81       	ldd	r21, Y+3	; 0x03
   1b182:	c2 51       	subi	r28, 0x12	; 18
   1b184:	d1 40       	sbci	r29, 0x01	; 1
   1b186:	28 0d       	add	r18, r8
   1b188:	39 1d       	adc	r19, r9
   1b18a:	4a 1d       	adc	r20, r10
   1b18c:	5b 1d       	adc	r21, r11
   1b18e:	c2 5f       	subi	r28, 0xF2	; 242
   1b190:	de 4f       	sbci	r29, 0xFE	; 254
   1b192:	88 81       	ld	r24, Y
   1b194:	99 81       	ldd	r25, Y+1	; 0x01
   1b196:	aa 81       	ldd	r26, Y+2	; 0x02
   1b198:	bb 81       	ldd	r27, Y+3	; 0x03
   1b19a:	ce 50       	subi	r28, 0x0E	; 14
   1b19c:	d1 40       	sbci	r29, 0x01	; 1
   1b19e:	88 0d       	add	r24, r8
   1b1a0:	99 1d       	adc	r25, r9
   1b1a2:	aa 1d       	adc	r26, r10
   1b1a4:	bb 1d       	adc	r27, r11
   1b1a6:	c8 5e       	subi	r28, 0xE8	; 232
   1b1a8:	de 4f       	sbci	r29, 0xFE	; 254
   1b1aa:	88 83       	st	Y, r24
   1b1ac:	99 83       	std	Y+1, r25	; 0x01
   1b1ae:	aa 83       	std	Y+2, r26	; 0x02
   1b1b0:	bb 83       	std	Y+3, r27	; 0x03
   1b1b2:	c8 51       	subi	r28, 0x18	; 24
   1b1b4:	d1 40       	sbci	r29, 0x01	; 1
   1b1b6:	c4 5e       	subi	r28, 0xE4	; 228
   1b1b8:	de 4f       	sbci	r29, 0xFE	; 254
   1b1ba:	a8 81       	ld	r26, Y
   1b1bc:	b9 81       	ldd	r27, Y+1	; 0x01
   1b1be:	cc 51       	subi	r28, 0x1C	; 28
   1b1c0:	d1 40       	sbci	r29, 0x01	; 1
   1b1c2:	8d 91       	ld	r24, X+
   1b1c4:	9c 91       	ld	r25, X
   1b1c6:	28 16       	cp	r2, r24
   1b1c8:	39 06       	cpc	r3, r25
   1b1ca:	94 f4       	brge	.+36     	; 0x1b1f0 <lif_add_lif_file+0x28e>
    {
        // Read
        size = lif_read(ULIF, buf, uoffset, LIF_SECTOR_SIZE);
   1b1cc:	00 e0       	ldi	r16, 0x00	; 0
   1b1ce:	11 e0       	ldi	r17, 0x01	; 1
   1b1d0:	be 01       	movw	r22, r28
   1b1d2:	66 5f       	subi	r22, 0xF6	; 246
   1b1d4:	7f 4f       	sbci	r23, 0xFF	; 255
   1b1d6:	c6 01       	movw	r24, r12
   1b1d8:	0e 94 df bd 	call	0x17bbe	; 0x17bbe <lif_read>
        if(size < LIF_SECTOR_SIZE)
   1b1dc:	6f 3f       	cpi	r22, 0xFF	; 255
   1b1de:	71 05       	cpc	r23, r1
   1b1e0:	11 f0       	breq	.+4      	; 0x1b1e6 <lif_add_lif_file+0x284>
   1b1e2:	0c f0       	brlt	.+2      	; 0x1b1e6 <lif_add_lif_file+0x284>
   1b1e4:	a1 cf       	rjmp	.-190    	; 0x1b128 <lif_add_lif_file+0x1c6>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b1e6:	c7 01       	movw	r24, r14
   1b1e8:	0e 94 8b c6 	call	0x18d16	; 0x18d16 <lif_close_volume>
   1b1ec:	c6 01       	movw	r24, r12
   1b1ee:	0f c0       	rjmp	.+30     	; 0x1b20e <lif_add_lif_file+0x2ac>
   1b1f0:	c6 01       	movw	r24, r12
   1b1f2:	0e 94 8b c6 	call	0x18d16	; 0x18d16 <lif_close_volume>
        printf("\tWrote: %8ld\r", bytes);
    }
    lif_closedir(ULIF);

    // Write directory record
    if( !lif_writedirindex(LIF,index))
   1b1f6:	ca 5e       	subi	r28, 0xEA	; 234
   1b1f8:	de 4f       	sbci	r29, 0xFE	; 254
   1b1fa:	68 81       	ld	r22, Y
   1b1fc:	79 81       	ldd	r23, Y+1	; 0x01
   1b1fe:	c6 51       	subi	r28, 0x16	; 22
   1b200:	d1 40       	sbci	r29, 0x01	; 1
   1b202:	c7 01       	movw	r24, r14
   1b204:	0e 94 80 c7 	call	0x18f00	; 0x18f00 <lif_writedirindex>
   1b208:	89 2b       	or	r24, r25
   1b20a:	41 f4       	brne	.+16     	; 0x1b21c <lif_add_lif_file+0x2ba>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b20c:	c7 01       	movw	r24, r14
   1b20e:	0e 94 8b c6 	call	0x18d16	; 0x18d16 <lif_close_volume>

    // Write directory record
    if( !lif_writedirindex(LIF,index))
    {
        lif_closedir(LIF);
        return(-1);
   1b212:	6f ef       	ldi	r22, 0xFF	; 255
   1b214:	7f ef       	ldi	r23, 0xFF	; 255
   1b216:	8f ef       	ldi	r24, 0xFF	; 255
   1b218:	9f ef       	ldi	r25, 0xFF	; 255
   1b21a:	13 c0       	rjmp	.+38     	; 0x1b242 <lif_add_lif_file+0x2e0>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b21c:	c7 01       	movw	r24, r14
   1b21e:	0e 94 8b c6 	call	0x18d16	; 0x18d16 <lif_close_volume>
    {
        lif_closedir(LIF);
        return(-1);
    }
    lif_closedir(LIF);
    printf("\tWrote: %8ld\n", bytes);
   1b222:	ed b7       	in	r30, 0x3d	; 61
   1b224:	fe b7       	in	r31, 0x3e	; 62
   1b226:	84 82       	std	Z+4, r8	; 0x04
   1b228:	95 82       	std	Z+5, r9	; 0x05
   1b22a:	a6 82       	std	Z+6, r10	; 0x06
   1b22c:	b7 82       	std	Z+7, r11	; 0x07
   1b22e:	82 e3       	ldi	r24, 0x32	; 50
   1b230:	9f e2       	ldi	r25, 0x2F	; 47
   1b232:	a0 e0       	ldi	r26, 0x00	; 0
   1b234:	81 83       	std	Z+1, r24	; 0x01
   1b236:	92 83       	std	Z+2, r25	; 0x02
   1b238:	a3 83       	std	Z+3, r26	; 0x03
   1b23a:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    return(bytes);
   1b23e:	b4 01       	movw	r22, r8
   1b240:	c5 01       	movw	r24, r10
}
   1b242:	c3 5e       	subi	r28, 0xE3	; 227
   1b244:	de 4f       	sbci	r29, 0xFE	; 254
   1b246:	0f b6       	in	r0, 0x3f	; 63
   1b248:	f8 94       	cli
   1b24a:	de bf       	out	0x3e, r29	; 62
   1b24c:	0f be       	out	0x3f, r0	; 63
   1b24e:	cd bf       	out	0x3d, r28	; 61
   1b250:	df 91       	pop	r29
   1b252:	cf 91       	pop	r28
   1b254:	1f 91       	pop	r17
   1b256:	0f 91       	pop	r16
   1b258:	ff 90       	pop	r15
   1b25a:	ef 90       	pop	r14
   1b25c:	df 90       	pop	r13
   1b25e:	cf 90       	pop	r12
   1b260:	bf 90       	pop	r11
   1b262:	af 90       	pop	r10
   1b264:	9f 90       	pop	r9
   1b266:	8f 90       	pop	r8
   1b268:	6f 90       	pop	r6
   1b26a:	5f 90       	pop	r5
   1b26c:	4f 90       	pop	r4
   1b26e:	3f 90       	pop	r3
   1b270:	2f 90       	pop	r2
   1b272:	08 95       	ret

0001b274 <lif_del_file>:
/// @param[in] lifimagename: LIF image name
/// @param[in] lifname: LIF file name
/// @return 1 if deleted, 0 if not found, -1 error
MEMSPACE
int lif_del_file(char *lifimagename, char *lifname)
{
   1b274:	ef 92       	push	r14
   1b276:	ff 92       	push	r15
   1b278:	0f 93       	push	r16
   1b27a:	1f 93       	push	r17
   1b27c:	cf 93       	push	r28
   1b27e:	df 93       	push	r29
   1b280:	ad b7       	in	r26, 0x3d	; 61
   1b282:	be b7       	in	r27, 0x3e	; 62
   1b284:	17 97       	sbiw	r26, 0x07	; 7
   1b286:	0f b6       	in	r0, 0x3f	; 63
   1b288:	f8 94       	cli
   1b28a:	be bf       	out	0x3e, r27	; 62
   1b28c:	0f be       	out	0x3f, r0	; 63
   1b28e:	ad bf       	out	0x3d, r26	; 61
   1b290:	7c 01       	movw	r14, r24
   1b292:	8b 01       	movw	r16, r22
    lif_t *LIF;
    int index;

    if(!*lifimagename)
   1b294:	fc 01       	movw	r30, r24
   1b296:	80 81       	ld	r24, Z
   1b298:	81 11       	cpse	r24, r1
   1b29a:	03 c0       	rjmp	.+6      	; 0x1b2a2 <lif_del_file+0x2e>
    {
        printf("lif_del_file: lifimagename is empty\n");
   1b29c:	8d e0       	ldi	r24, 0x0D	; 13
   1b29e:	9f e2       	ldi	r25, 0x2F	; 47
   1b2a0:	06 c0       	rjmp	.+12     	; 0x1b2ae <lif_del_file+0x3a>
        return(-1);
    }
    if(!*lifname)
   1b2a2:	fb 01       	movw	r30, r22
   1b2a4:	80 81       	ld	r24, Z
   1b2a6:	81 11       	cpse	r24, r1
   1b2a8:	0b c0       	rjmp	.+22     	; 0x1b2c0 <lif_del_file+0x4c>
    {
        printf("lif_del_file: lifname is empty\n");
   1b2aa:	8d ee       	ldi	r24, 0xED	; 237
   1b2ac:	9e e2       	ldi	r25, 0x2E	; 46
   1b2ae:	a0 e0       	ldi	r26, 0x00	; 0
   1b2b0:	ed b7       	in	r30, 0x3d	; 61
   1b2b2:	fe b7       	in	r31, 0x3e	; 62
   1b2b4:	81 83       	std	Z+1, r24	; 0x01
   1b2b6:	92 83       	std	Z+2, r25	; 0x02
   1b2b8:	a3 83       	std	Z+3, r26	; 0x03
   1b2ba:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   1b2be:	68 c0       	rjmp	.+208    	; 0x1b390 <lif_del_file+0x11c>
        return(-1);
    }
    if(debuglevel & LIF_DEBUG)
   1b2c0:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1b2c4:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   1b2c8:	92 ff       	sbrs	r25, 2
   1b2ca:	0e c0       	rjmp	.+28     	; 0x1b2e8 <lif_del_file+0x74>
        printf("LIF image:[%s], LIF name:[%s]\n", 
   1b2cc:	ed b7       	in	r30, 0x3d	; 61
   1b2ce:	fe b7       	in	r31, 0x3e	; 62
   1b2d0:	77 83       	std	Z+7, r23	; 0x07
   1b2d2:	66 83       	std	Z+6, r22	; 0x06
   1b2d4:	f5 82       	std	Z+5, r15	; 0x05
   1b2d6:	e4 82       	std	Z+4, r14	; 0x04
   1b2d8:	8e ec       	ldi	r24, 0xCE	; 206
   1b2da:	9e e2       	ldi	r25, 0x2E	; 46
   1b2dc:	a0 e0       	ldi	r26, 0x00	; 0
   1b2de:	81 83       	std	Z+1, r24	; 0x01
   1b2e0:	92 83       	std	Z+2, r25	; 0x02
   1b2e2:	a3 83       	std	Z+3, r26	; 0x03
   1b2e4:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
            lifimagename, lifname);


    LIF = lif_open_volume(lifimagename,"rb+");
   1b2e8:	6a ed       	ldi	r22, 0xDA	; 218
   1b2ea:	78 e0       	ldi	r23, 0x08	; 8
   1b2ec:	c7 01       	movw	r24, r14
   1b2ee:	0e 94 46 cd 	call	0x19a8c	; 0x19a8c <lif_open_volume>
   1b2f2:	ec 01       	movw	r28, r24
    if(LIF == NULL)
   1b2f4:	00 97       	sbiw	r24, 0x00	; 0
   1b2f6:	09 f4       	brne	.+2      	; 0x1b2fa <lif_del_file+0x86>
   1b2f8:	4b c0       	rjmp	.+150    	; 0x1b390 <lif_del_file+0x11c>
        return(-1); 

    // Now find file record
    index = lif_find_file(LIF, lifname);
   1b2fa:	b8 01       	movw	r22, r16
   1b2fc:	0e 94 15 d0 	call	0x1a02a	; 0x1a02a <lif_find_file>
    if(index == -1)
   1b300:	8f 3f       	cpi	r24, 0xFF	; 255
   1b302:	ff ef       	ldi	r31, 0xFF	; 255
   1b304:	9f 07       	cpc	r25, r31
   1b306:	a1 f4       	brne	.+40     	; 0x1b330 <lif_del_file+0xbc>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b308:	ce 01       	movw	r24, r28
   1b30a:	0e 94 8b c6 	call	0x18d16	; 0x18d16 <lif_close_volume>
    // Now find file record
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        lif_closedir(LIF);
        printf("LIF image:[%s] lif name:[%s] not found\n", lifimagename, lifname);
   1b30e:	ed b7       	in	r30, 0x3d	; 61
   1b310:	fe b7       	in	r31, 0x3e	; 62
   1b312:	17 83       	std	Z+7, r17	; 0x07
   1b314:	06 83       	std	Z+6, r16	; 0x06
   1b316:	f5 82       	std	Z+5, r15	; 0x05
   1b318:	e4 82       	std	Z+4, r14	; 0x04
   1b31a:	86 ea       	ldi	r24, 0xA6	; 166
   1b31c:	9e e2       	ldi	r25, 0x2E	; 46
   1b31e:	a0 e0       	ldi	r26, 0x00	; 0
   1b320:	81 83       	std	Z+1, r24	; 0x01
   1b322:	92 83       	std	Z+2, r25	; 0x02
   1b324:	a3 83       	std	Z+3, r26	; 0x03
   1b326:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
        return(0);
   1b32a:	80 e0       	ldi	r24, 0x00	; 0
   1b32c:	90 e0       	ldi	r25, 0x00	; 0
   1b32e:	32 c0       	rjmp	.+100    	; 0x1b394 <lif_del_file+0x120>
    }


// IF the next record is EOF then update EOF
    if(index >= LIF->EOFindex-1)
   1b330:	2a a1       	ldd	r18, Y+34	; 0x22
   1b332:	3b a1       	ldd	r19, Y+35	; 0x23
   1b334:	21 50       	subi	r18, 0x01	; 1
   1b336:	31 09       	sbc	r19, r1
   1b338:	fe 01       	movw	r30, r28
   1b33a:	e6 5a       	subi	r30, 0xA6	; 166
   1b33c:	ff 4f       	sbci	r31, 0xFF	; 255
   1b33e:	82 17       	cp	r24, r18
   1b340:	93 07       	cpc	r25, r19
   1b342:	2c f0       	brlt	.+10     	; 0x1b34e <lif_del_file+0xda>
        LIF->DIR.FileType = 0xffff;
   1b344:	2f ef       	ldi	r18, 0xFF	; 255
   1b346:	3f ef       	ldi	r19, 0xFF	; 255
   1b348:	31 83       	std	Z+1, r19	; 0x01
   1b34a:	20 83       	st	Z, r18
   1b34c:	02 c0       	rjmp	.+4      	; 0x1b352 <lif_del_file+0xde>
    else
        LIF->DIR.FileType = 0;
   1b34e:	11 82       	std	Z+1, r1	; 0x01
   1b350:	10 82       	st	Z, r1

    // re-Write directory record
    if( !lif_writedirindex(LIF,index) )
   1b352:	bc 01       	movw	r22, r24
   1b354:	ce 01       	movw	r24, r28
   1b356:	0e 94 80 c7 	call	0x18f00	; 0x18f00 <lif_writedirindex>
   1b35a:	89 2b       	or	r24, r25
   1b35c:	21 f4       	brne	.+8      	; 0x1b366 <lif_del_file+0xf2>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b35e:	ce 01       	movw	r24, r28
   1b360:	0e 94 8b c6 	call	0x18d16	; 0x18d16 <lif_close_volume>
   1b364:	15 c0       	rjmp	.+42     	; 0x1b390 <lif_del_file+0x11c>
    {
        lif_closedir(LIF);
        return(-1);
    }

    lif_updatefree(LIF);
   1b366:	ce 01       	movw	r24, r28
   1b368:	0e 94 f4 c7 	call	0x18fe8	; 0x18fe8 <lif_updatefree>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b36c:	ce 01       	movw	r24, r28
   1b36e:	0e 94 8b c6 	call	0x18d16	; 0x18d16 <lif_close_volume>
    }

    lif_updatefree(LIF);

    lif_closedir(LIF);
    printf("Deleted: %10s\n", lifname);
   1b372:	ed b7       	in	r30, 0x3d	; 61
   1b374:	fe b7       	in	r31, 0x3e	; 62
   1b376:	15 83       	std	Z+5, r17	; 0x05
   1b378:	04 83       	std	Z+4, r16	; 0x04
   1b37a:	87 e9       	ldi	r24, 0x97	; 151
   1b37c:	9e e2       	ldi	r25, 0x2E	; 46
   1b37e:	a0 e0       	ldi	r26, 0x00	; 0
   1b380:	81 83       	std	Z+1, r24	; 0x01
   1b382:	92 83       	std	Z+2, r25	; 0x02
   1b384:	a3 83       	std	Z+3, r26	; 0x03
   1b386:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>

    return(1);
   1b38a:	81 e0       	ldi	r24, 0x01	; 1
   1b38c:	90 e0       	ldi	r25, 0x00	; 0
   1b38e:	02 c0       	rjmp	.+4      	; 0x1b394 <lif_del_file+0x120>
            lifimagename, lifname);


    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return(-1); 
   1b390:	8f ef       	ldi	r24, 0xFF	; 255
   1b392:	9f ef       	ldi	r25, 0xFF	; 255

    lif_closedir(LIF);
    printf("Deleted: %10s\n", lifname);

    return(1);
}
   1b394:	cd b7       	in	r28, 0x3d	; 61
   1b396:	de b7       	in	r29, 0x3e	; 62
   1b398:	27 96       	adiw	r28, 0x07	; 7
   1b39a:	e6 e0       	ldi	r30, 0x06	; 6
   1b39c:	37 c6       	rjmp	.+3182   	; 0x1c00c <__epilogue_restores__+0x18>

0001b39e <lif_rename_file>:
/// @param[in] oldlifname: old LIF file name
/// @param[in] newlifname: new LIF file name
/// @return 1 if renamed, 0 if not found, -1 error
MEMSPACE
int lif_rename_file(char *lifimagename, char *oldlifname, char *newlifname)
{
   1b39e:	a7 e0       	ldi	r26, 0x07	; 7
   1b3a0:	b0 e0       	ldi	r27, 0x00	; 0
   1b3a2:	e4 ed       	ldi	r30, 0xD4	; 212
   1b3a4:	f9 ed       	ldi	r31, 0xD9	; 217
   1b3a6:	12 c6       	rjmp	.+3108   	; 0x1bfcc <__prologue_saves__+0x10>
   1b3a8:	6c 01       	movw	r12, r24
   1b3aa:	8b 01       	movw	r16, r22
   1b3ac:	7a 01       	movw	r14, r20
    int index;
    lif_t *LIF;

    if(!*lifimagename)
   1b3ae:	fc 01       	movw	r30, r24
   1b3b0:	80 81       	ld	r24, Z
   1b3b2:	81 11       	cpse	r24, r1
   1b3b4:	03 c0       	rjmp	.+6      	; 0x1b3bc <lif_rename_file+0x1e>
    {
        printf("lif_rename_file: lifimagename is empty\n");
   1b3b6:	8f e6       	ldi	r24, 0x6F	; 111
   1b3b8:	9e e2       	ldi	r25, 0x2E	; 46
   1b3ba:	06 c0       	rjmp	.+12     	; 0x1b3c8 <lif_rename_file+0x2a>
        return(-1);
    }
    if(!*oldlifname)
   1b3bc:	fb 01       	movw	r30, r22
   1b3be:	80 81       	ld	r24, Z
   1b3c0:	81 11       	cpse	r24, r1
   1b3c2:	0b c0       	rjmp	.+22     	; 0x1b3da <lif_rename_file+0x3c>
    {
        printf("lif_rename_file: old lifname is empty\n");
   1b3c4:	88 e4       	ldi	r24, 0x48	; 72
   1b3c6:	9e e2       	ldi	r25, 0x2E	; 46
   1b3c8:	a0 e0       	ldi	r26, 0x00	; 0
   1b3ca:	ed b7       	in	r30, 0x3d	; 61
   1b3cc:	fe b7       	in	r31, 0x3e	; 62
   1b3ce:	81 83       	std	Z+1, r24	; 0x01
   1b3d0:	92 83       	std	Z+2, r25	; 0x02
   1b3d2:	a3 83       	std	Z+3, r26	; 0x03
   1b3d4:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   1b3d8:	58 c0       	rjmp	.+176    	; 0x1b48a <lif_rename_file+0xec>
        return(-1);
    }
    if(!*newlifname)
   1b3da:	fa 01       	movw	r30, r20
   1b3dc:	80 81       	ld	r24, Z
   1b3de:	81 11       	cpse	r24, r1
   1b3e0:	03 c0       	rjmp	.+6      	; 0x1b3e8 <lif_rename_file+0x4a>
    {
        printf("lif_rename_file: new lifname is empty\n");
   1b3e2:	81 e2       	ldi	r24, 0x21	; 33
   1b3e4:	9e e2       	ldi	r25, 0x2E	; 46
   1b3e6:	f0 cf       	rjmp	.-32     	; 0x1b3c8 <lif_rename_file+0x2a>
        return(-1);
    }

    if(!lif_checkname(newlifname))
   1b3e8:	ca 01       	movw	r24, r20
   1b3ea:	0e 94 f6 be 	call	0x17dec	; 0x17dec <lif_checkname>
   1b3ee:	89 2b       	or	r24, r25
   1b3f0:	19 f4       	brne	.+6      	; 0x1b3f8 <lif_rename_file+0x5a>
    {
        printf("lif_rename_file: new lifname contains bad characters\n");
   1b3f2:	8b ee       	ldi	r24, 0xEB	; 235
   1b3f4:	9d e2       	ldi	r25, 0x2D	; 45
   1b3f6:	e8 cf       	rjmp	.-48     	; 0x1b3c8 <lif_rename_file+0x2a>
        return(-1);

    }

    LIF = lif_open_volume(lifimagename,"rb+");
   1b3f8:	6a ed       	ldi	r22, 0xDA	; 218
   1b3fa:	78 e0       	ldi	r23, 0x08	; 8
   1b3fc:	c6 01       	movw	r24, r12
   1b3fe:	0e 94 46 cd 	call	0x19a8c	; 0x19a8c <lif_open_volume>
   1b402:	ec 01       	movw	r28, r24
    if(LIF == NULL)
   1b404:	00 97       	sbiw	r24, 0x00	; 0
   1b406:	09 f4       	brne	.+2      	; 0x1b40a <lif_rename_file+0x6c>
   1b408:	40 c0       	rjmp	.+128    	; 0x1b48a <lif_rename_file+0xec>
        return(-1); 

    // Now find file record
    index = lif_find_file(LIF, oldlifname);
   1b40a:	b8 01       	movw	r22, r16
   1b40c:	0e 94 15 d0 	call	0x1a02a	; 0x1a02a <lif_find_file>
   1b410:	5c 01       	movw	r10, r24
    if(index == -1)
   1b412:	01 96       	adiw	r24, 0x01	; 1
   1b414:	a1 f4       	brne	.+40     	; 0x1b43e <lif_rename_file+0xa0>
    {
        printf("lif_rename:[%s] lif name:[%s] not found\n", lifimagename, oldlifname);
   1b416:	ed b7       	in	r30, 0x3d	; 61
   1b418:	fe b7       	in	r31, 0x3e	; 62
   1b41a:	17 83       	std	Z+7, r17	; 0x07
   1b41c:	06 83       	std	Z+6, r16	; 0x06
   1b41e:	d5 82       	std	Z+5, r13	; 0x05
   1b420:	c4 82       	std	Z+4, r12	; 0x04
   1b422:	82 ec       	ldi	r24, 0xC2	; 194
   1b424:	9d e2       	ldi	r25, 0x2D	; 45
   1b426:	a0 e0       	ldi	r26, 0x00	; 0
   1b428:	81 83       	std	Z+1, r24	; 0x01
   1b42a:	92 83       	std	Z+2, r25	; 0x02
   1b42c:	a3 83       	std	Z+3, r26	; 0x03
   1b42e:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b432:	ce 01       	movw	r24, r28
   1b434:	0e 94 8b c6 	call	0x18d16	; 0x18d16 <lif_close_volume>
    index = lif_find_file(LIF, oldlifname);
    if(index == -1)
    {
        printf("lif_rename:[%s] lif name:[%s] not found\n", lifimagename, oldlifname);
        lif_closedir(LIF);
        return(0);
   1b438:	80 e0       	ldi	r24, 0x00	; 0
   1b43a:	90 e0       	ldi	r25, 0x00	; 0
   1b43c:	28 c0       	rjmp	.+80     	; 0x1b48e <lif_rename_file+0xf0>
    }
    lif_fixname(LIF->DIR.filename, newlifname, 10);
   1b43e:	4a e0       	ldi	r20, 0x0A	; 10
   1b440:	50 e0       	ldi	r21, 0x00	; 0
   1b442:	b7 01       	movw	r22, r14
   1b444:	ce 01       	movw	r24, r28
   1b446:	81 5b       	subi	r24, 0xB1	; 177
   1b448:	9f 4f       	sbci	r25, 0xFF	; 255
   1b44a:	0e 94 30 bf 	call	0x17e60	; 0x17e60 <lif_fixname>

    // re-Write directory record
    if( !lif_writedirindex(LIF,index))
   1b44e:	b5 01       	movw	r22, r10
   1b450:	ce 01       	movw	r24, r28
   1b452:	0e 94 80 c7 	call	0x18f00	; 0x18f00 <lif_writedirindex>
   1b456:	89 2b       	or	r24, r25
   1b458:	21 f4       	brne	.+8      	; 0x1b462 <lif_rename_file+0xc4>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b45a:	ce 01       	movw	r24, r28
   1b45c:	0e 94 8b c6 	call	0x18d16	; 0x18d16 <lif_close_volume>
   1b460:	14 c0       	rjmp	.+40     	; 0x1b48a <lif_rename_file+0xec>
    if( !lif_writedirindex(LIF,index))
    {
        lif_closedir(LIF);
        return(-1);
    }
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);
   1b462:	ed b7       	in	r30, 0x3d	; 61
   1b464:	fe b7       	in	r31, 0x3e	; 62
   1b466:	f7 82       	std	Z+7, r15	; 0x07
   1b468:	e6 82       	std	Z+6, r14	; 0x06
   1b46a:	15 83       	std	Z+5, r17	; 0x05
   1b46c:	04 83       	std	Z+4, r16	; 0x04
   1b46e:	8b ea       	ldi	r24, 0xAB	; 171
   1b470:	9d e2       	ldi	r25, 0x2D	; 45
   1b472:	a0 e0       	ldi	r26, 0x00	; 0
   1b474:	81 83       	std	Z+1, r24	; 0x01
   1b476:	92 83       	std	Z+2, r25	; 0x02
   1b478:	a3 83       	std	Z+3, r26	; 0x03
   1b47a:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b47e:	ce 01       	movw	r24, r28
   1b480:	0e 94 8b c6 	call	0x18d16	; 0x18d16 <lif_close_volume>
    }
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);

    lif_closedir(LIF);

    return(1);
   1b484:	81 e0       	ldi	r24, 0x01	; 1
   1b486:	90 e0       	ldi	r25, 0x00	; 0
   1b488:	02 c0       	rjmp	.+4      	; 0x1b48e <lif_rename_file+0xf0>

    }

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return(-1); 
   1b48a:	8f ef       	ldi	r24, 0xFF	; 255
   1b48c:	9f ef       	ldi	r25, 0xFF	; 255
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);

    lif_closedir(LIF);

    return(1);
}
   1b48e:	cd b7       	in	r28, 0x3d	; 61
   1b490:	de b7       	in	r29, 0x3e	; 62
   1b492:	27 96       	adiw	r28, 0x07	; 7
   1b494:	ea e0       	ldi	r30, 0x0A	; 10
   1b496:	b6 c5       	rjmp	.+2924   	; 0x1c004 <__epilogue_restores__+0x10>

0001b498 <lif_create_image>:
/// @param[in] dirsectors: Number of LIF directory sectors
/// @param[in] sectors: total disk image size in sectors
///@return bytes writting to disk image
MEMSPACE
long lif_create_image(char *lifimagename, char *liflabel, uint32_t dirsectors, uint32_t sectors)
{
   1b498:	4f 92       	push	r4
   1b49a:	5f 92       	push	r5
   1b49c:	6f 92       	push	r6
   1b49e:	7f 92       	push	r7
   1b4a0:	af 92       	push	r10
   1b4a2:	bf 92       	push	r11
   1b4a4:	cf 92       	push	r12
   1b4a6:	df 92       	push	r13
   1b4a8:	ef 92       	push	r14
   1b4aa:	ff 92       	push	r15
   1b4ac:	0f 93       	push	r16
   1b4ae:	1f 93       	push	r17
   1b4b0:	cf 93       	push	r28
   1b4b2:	df 93       	push	r29
   1b4b4:	ad b7       	in	r26, 0x3d	; 61
   1b4b6:	be b7       	in	r27, 0x3e	; 62
   1b4b8:	17 97       	sbiw	r26, 0x07	; 7
   1b4ba:	0f b6       	in	r0, 0x3f	; 63
   1b4bc:	f8 94       	cli
   1b4be:	be bf       	out	0x3e, r27	; 62
   1b4c0:	0f be       	out	0x3f, r0	; 63
   1b4c2:	ad bf       	out	0x3d, r26	; 61
   1b4c4:	27 01       	movw	r4, r14
   1b4c6:	38 01       	movw	r6, r16
    uint32_t dirstart,filestart,filesectors,end;
    lif_t *LIF;

    if(!*lifimagename)
   1b4c8:	dc 01       	movw	r26, r24
   1b4ca:	ec 91       	ld	r30, X
   1b4cc:	e1 11       	cpse	r30, r1
   1b4ce:	03 c0       	rjmp	.+6      	; 0x1b4d6 <lif_create_image+0x3e>
    {
        printf("lif_create_image: lifimagename is empty\n");
   1b4d0:	82 e8       	ldi	r24, 0x82	; 130
   1b4d2:	9d e2       	ldi	r25, 0x2D	; 45
   1b4d4:	16 c0       	rjmp	.+44     	; 0x1b502 <lif_create_image+0x6a>
        return(-1);
    }
    if(!*liflabel)
   1b4d6:	db 01       	movw	r26, r22
   1b4d8:	ec 91       	ld	r30, X
   1b4da:	e1 11       	cpse	r30, r1
   1b4dc:	03 c0       	rjmp	.+6      	; 0x1b4e4 <lif_create_image+0x4c>
    {
        printf("lif_create_image: liflabel is empty\n");
   1b4de:	8d e5       	ldi	r24, 0x5D	; 93
   1b4e0:	9d e2       	ldi	r25, 0x2D	; 45
   1b4e2:	0f c0       	rjmp	.+30     	; 0x1b502 <lif_create_image+0x6a>
        return(-1);
    }
    if(!dirsectors)
   1b4e4:	21 15       	cp	r18, r1
   1b4e6:	31 05       	cpc	r19, r1
   1b4e8:	41 05       	cpc	r20, r1
   1b4ea:	51 05       	cpc	r21, r1
   1b4ec:	19 f4       	brne	.+6      	; 0x1b4f4 <lif_create_image+0x5c>
    {
        printf("lif_create_image: dirsectors is 0\n");
   1b4ee:	8a e3       	ldi	r24, 0x3A	; 58
   1b4f0:	9d e2       	ldi	r25, 0x2D	; 45
   1b4f2:	07 c0       	rjmp	.+14     	; 0x1b502 <lif_create_image+0x6a>
        return(-1);
    }
    if(!sectors)
   1b4f4:	e1 14       	cp	r14, r1
   1b4f6:	f1 04       	cpc	r15, r1
   1b4f8:	01 05       	cpc	r16, r1
   1b4fa:	11 05       	cpc	r17, r1
   1b4fc:	59 f4       	brne	.+22     	; 0x1b514 <lif_create_image+0x7c>
    {
        printf("lif_create_image: sectors is 0\n");
   1b4fe:	8a e1       	ldi	r24, 0x1A	; 26
   1b500:	9d e2       	ldi	r25, 0x2D	; 45
   1b502:	a0 e0       	ldi	r26, 0x00	; 0
   1b504:	ed b7       	in	r30, 0x3d	; 61
   1b506:	fe b7       	in	r31, 0x3e	; 62
   1b508:	81 83       	std	Z+1, r24	; 0x01
   1b50a:	92 83       	std	Z+2, r25	; 0x02
   1b50c:	a3 83       	std	Z+3, r26	; 0x03
   1b50e:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   1b512:	2b c0       	rjmp	.+86     	; 0x1b56a <lif_create_image+0xd2>
    dirstart = 2;
    filestart = dirstart + dirsectors;
    filesectors = sectors - filestart;
    end = filestart + filesectors;

    LIF = lif_create_volume(lifimagename, liflabel, dirstart, dirsectors, filesectors);
   1b514:	67 01       	movw	r12, r14
   1b516:	78 01       	movw	r14, r16
   1b518:	f2 e0       	ldi	r31, 0x02	; 2
   1b51a:	cf 1a       	sub	r12, r31
   1b51c:	d1 08       	sbc	r13, r1
   1b51e:	e1 08       	sbc	r14, r1
   1b520:	f1 08       	sbc	r15, r1
   1b522:	56 01       	movw	r10, r12
   1b524:	67 01       	movw	r12, r14
   1b526:	a2 1a       	sub	r10, r18
   1b528:	b3 0a       	sbc	r11, r19
   1b52a:	c4 0a       	sbc	r12, r20
   1b52c:	d5 0a       	sbc	r13, r21
   1b52e:	79 01       	movw	r14, r18
   1b530:	8a 01       	movw	r16, r20
   1b532:	22 e0       	ldi	r18, 0x02	; 2
   1b534:	30 e0       	ldi	r19, 0x00	; 0
   1b536:	40 e0       	ldi	r20, 0x00	; 0
   1b538:	50 e0       	ldi	r21, 0x00	; 0
   1b53a:	0e 94 fc c8 	call	0x191f8	; 0x191f8 <lif_create_volume>
    if(LIF == NULL)
   1b53e:	00 97       	sbiw	r24, 0x00	; 0
   1b540:	a1 f0       	breq	.+40     	; 0x1b56a <lif_create_image+0xd2>
        return(-1);
    lif_close_volume(LIF);
   1b542:	0e 94 8b c6 	call	0x18d16	; 0x18d16 <lif_close_volume>

    printf("\tFormatting: wrote %ld sectors\n", (long)end);
   1b546:	82 01       	movw	r16, r4
   1b548:	d6 2d       	mov	r29, r6
   1b54a:	c7 2d       	mov	r28, r7
   1b54c:	ed b7       	in	r30, 0x3d	; 61
   1b54e:	fe b7       	in	r31, 0x3e	; 62
   1b550:	44 82       	std	Z+4, r4	; 0x04
   1b552:	15 83       	std	Z+5, r17	; 0x05
   1b554:	66 82       	std	Z+6, r6	; 0x06
   1b556:	77 82       	std	Z+7, r7	; 0x07
   1b558:	8a ef       	ldi	r24, 0xFA	; 250
   1b55a:	9c e2       	ldi	r25, 0x2C	; 44
   1b55c:	a0 e0       	ldi	r26, 0x00	; 0
   1b55e:	81 83       	std	Z+1, r24	; 0x01
   1b560:	92 83       	std	Z+2, r25	; 0x02
   1b562:	a3 83       	std	Z+3, r26	; 0x03
   1b564:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    return(end);
   1b568:	04 c0       	rjmp	.+8      	; 0x1b572 <lif_create_image+0xda>
    filesectors = sectors - filestart;
    end = filestart + filesectors;

    LIF = lif_create_volume(lifimagename, liflabel, dirstart, dirsectors, filesectors);
    if(LIF == NULL)
        return(-1);
   1b56a:	0f ef       	ldi	r16, 0xFF	; 255
   1b56c:	1f ef       	ldi	r17, 0xFF	; 255
   1b56e:	df ef       	ldi	r29, 0xFF	; 255
   1b570:	cf ef       	ldi	r28, 0xFF	; 255
    lif_close_volume(LIF);

    printf("\tFormatting: wrote %ld sectors\n", (long)end);
    return(end);
}
   1b572:	b8 01       	movw	r22, r16
   1b574:	8d 2f       	mov	r24, r29
   1b576:	9c 2f       	mov	r25, r28
   1b578:	ad b7       	in	r26, 0x3d	; 61
   1b57a:	be b7       	in	r27, 0x3e	; 62
   1b57c:	17 96       	adiw	r26, 0x07	; 7
   1b57e:	0f b6       	in	r0, 0x3f	; 63
   1b580:	f8 94       	cli
   1b582:	be bf       	out	0x3e, r27	; 62
   1b584:	0f be       	out	0x3f, r0	; 63
   1b586:	ad bf       	out	0x3d, r26	; 61
   1b588:	df 91       	pop	r29
   1b58a:	cf 91       	pop	r28
   1b58c:	1f 91       	pop	r17
   1b58e:	0f 91       	pop	r16
   1b590:	ff 90       	pop	r15
   1b592:	ef 90       	pop	r14
   1b594:	df 90       	pop	r13
   1b596:	cf 90       	pop	r12
   1b598:	bf 90       	pop	r11
   1b59a:	af 90       	pop	r10
   1b59c:	7f 90       	pop	r7
   1b59e:	6f 90       	pop	r6
   1b5a0:	5f 90       	pop	r5
   1b5a2:	4f 90       	pop	r4
   1b5a4:	08 95       	ret

0001b5a6 <lif_tests>:

/// @brief LIF user tests
/// @return  1 matched token, 0 if not
MEMSPACE
int lif_tests(int argc, char *argv[])
{
   1b5a6:	8f 92       	push	r8
   1b5a8:	9f 92       	push	r9
   1b5aa:	af 92       	push	r10
   1b5ac:	bf 92       	push	r11
   1b5ae:	ef 92       	push	r14
   1b5b0:	ff 92       	push	r15
   1b5b2:	0f 93       	push	r16
   1b5b4:	1f 93       	push	r17
   1b5b6:	cf 93       	push	r28
   1b5b8:	df 93       	push	r29
   1b5ba:	00 d0       	rcall	.+0      	; 0x1b5bc <lif_tests+0x16>
   1b5bc:	00 d0       	rcall	.+0      	; 0x1b5be <lif_tests+0x18>
   1b5be:	1f 92       	push	r1
        printf("%d:%s\n", i, argv[i]);
    printf("\n");
#endif

	// Nothing to do ?
	if(argc < 2)
   1b5c0:	82 30       	cpi	r24, 0x02	; 2
   1b5c2:	91 05       	cpc	r25, r1
   1b5c4:	0c f4       	brge	.+2      	; 0x1b5c8 <lif_tests+0x22>
   1b5c6:	17 c1       	rjmp	.+558    	; 0x1b7f6 <lif_tests+0x250>
		return (1);

    // Argument 1
    ind = 1;
	ptr = argv[ind++];
   1b5c8:	fb 01       	movw	r30, r22
   1b5ca:	02 81       	ldd	r16, Z+2	; 0x02
   1b5cc:	13 81       	ldd	r17, Z+3	; 0x03

	// Argument 1 missing ?
    //        Nothing to do
	// argc should really get this 
    if(!ptr || !*ptr)
   1b5ce:	01 15       	cp	r16, r1
   1b5d0:	11 05       	cpc	r17, r1
   1b5d2:	09 f4       	brne	.+2      	; 0x1b5d6 <lif_tests+0x30>
   1b5d4:	10 c1       	rjmp	.+544    	; 0x1b7f6 <lif_tests+0x250>
   1b5d6:	f8 01       	movw	r30, r16
   1b5d8:	20 81       	ld	r18, Z
   1b5da:	22 23       	and	r18, r18
   1b5dc:	09 f4       	brne	.+2      	; 0x1b5e0 <lif_tests+0x3a>
   1b5de:	0b c1       	rjmp	.+534    	; 0x1b7f6 <lif_tests+0x250>
   1b5e0:	eb 01       	movw	r28, r22
   1b5e2:	7c 01       	movw	r14, r24
        return(1);

    if(MATCH(ptr,"help") || MATCH(ptr,"-help") || MATCH(ptr,"-?") )
   1b5e4:	63 e6       	ldi	r22, 0x63	; 99
   1b5e6:	76 e1       	ldi	r23, 0x16	; 22
   1b5e8:	c8 01       	movw	r24, r16
   1b5ea:	0e 94 95 31 	call	0x632a	; 0x632a <MATCH>
   1b5ee:	89 2b       	or	r24, r25
   1b5f0:	29 f0       	breq	.+10     	; 0x1b5fc <lif_tests+0x56>
    {
        lif_help(1);
   1b5f2:	81 e0       	ldi	r24, 0x01	; 1
   1b5f4:	90 e0       	ldi	r25, 0x00	; 0
   1b5f6:	0e 94 d0 bc 	call	0x179a0	; 0x179a0 <lif_help>
   1b5fa:	fd c0       	rjmp	.+506    	; 0x1b7f6 <lif_tests+0x250>
    //        Nothing to do
	// argc should really get this 
    if(!ptr || !*ptr)
        return(1);

    if(MATCH(ptr,"help") || MATCH(ptr,"-help") || MATCH(ptr,"-?") )
   1b5fc:	62 e6       	ldi	r22, 0x62	; 98
   1b5fe:	76 e1       	ldi	r23, 0x16	; 22
   1b600:	c8 01       	movw	r24, r16
   1b602:	0e 94 95 31 	call	0x632a	; 0x632a <MATCH>
   1b606:	89 2b       	or	r24, r25
   1b608:	a1 f7       	brne	.-24     	; 0x1b5f2 <lif_tests+0x4c>
   1b60a:	68 e6       	ldi	r22, 0x68	; 104
   1b60c:	76 e1       	ldi	r23, 0x16	; 22
   1b60e:	c8 01       	movw	r24, r16
   1b610:	0e 94 95 31 	call	0x632a	; 0x632a <MATCH>
   1b614:	89 2b       	or	r24, r25
   1b616:	69 f7       	brne	.-38     	; 0x1b5f2 <lif_tests+0x4c>
        return(1);
    }

	// Turn one debugging
	// in the future we can add tests for specific messages
    if (MATCHARGS(ptr,"-d", (ind + 0) ,argc))
   1b618:	97 01       	movw	r18, r14
   1b61a:	42 e0       	ldi	r20, 0x02	; 2
   1b61c:	50 e0       	ldi	r21, 0x00	; 0
   1b61e:	6b e6       	ldi	r22, 0x6B	; 107
   1b620:	76 e1       	ldi	r23, 0x16	; 22
   1b622:	c8 01       	movw	r24, r16
   1b624:	0e 94 bd 31 	call	0x637a	; 0x637a <MATCHARGS>
   1b628:	89 2b       	or	r24, r25
   1b62a:	39 f0       	breq	.+14     	; 0x1b63a <lif_tests+0x94>
    {
		debuglevel = 0xffff;
   1b62c:	8f ef       	ldi	r24, 0xFF	; 255
   1b62e:	9f ef       	ldi	r25, 0xFF	; 255
   1b630:	90 93 c4 01 	sts	0x01C4, r25	; 0x8001c4 <debuglevel+0x1>
   1b634:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <debuglevel>
   1b638:	de c0       	rjmp	.+444    	; 0x1b7f6 <lif_tests+0x250>
        return(1);
		ptr = argv[ind++];
    }

    if (MATCHARGS(ptr,"addbin", (ind + 3) ,argc))
   1b63a:	97 01       	movw	r18, r14
   1b63c:	45 e0       	ldi	r20, 0x05	; 5
   1b63e:	50 e0       	ldi	r21, 0x00	; 0
   1b640:	6e e6       	ldi	r22, 0x6E	; 110
   1b642:	76 e1       	ldi	r23, 0x16	; 22
   1b644:	c8 01       	movw	r24, r16
   1b646:	0e 94 bd 31 	call	0x637a	; 0x637a <MATCHARGS>
   1b64a:	89 2b       	or	r24, r25
   1b64c:	41 f0       	breq	.+16     	; 0x1b65e <lif_tests+0xb8>
    {
        lif_add_lif_file(argv[ind],argv[ind+1],argv[ind+2]);
   1b64e:	48 85       	ldd	r20, Y+8	; 0x08
   1b650:	59 85       	ldd	r21, Y+9	; 0x09
   1b652:	6e 81       	ldd	r22, Y+6	; 0x06
   1b654:	7f 81       	ldd	r23, Y+7	; 0x07
   1b656:	8c 81       	ldd	r24, Y+4	; 0x04
   1b658:	9d 81       	ldd	r25, Y+5	; 0x05
   1b65a:	83 dc       	rcall	.-1786   	; 0x1af62 <lif_add_lif_file>
   1b65c:	cc c0       	rjmp	.+408    	; 0x1b7f6 <lif_tests+0x250>

        return(1);
    }
    if (MATCHARGS(ptr,"add", (ind + 3) ,argc))
   1b65e:	97 01       	movw	r18, r14
   1b660:	45 e0       	ldi	r20, 0x05	; 5
   1b662:	50 e0       	ldi	r21, 0x00	; 0
   1b664:	65 e7       	ldi	r22, 0x75	; 117
   1b666:	76 e1       	ldi	r23, 0x16	; 22
   1b668:	c8 01       	movw	r24, r16
   1b66a:	0e 94 bd 31 	call	0x637a	; 0x637a <MATCHARGS>
   1b66e:	89 2b       	or	r24, r25
   1b670:	49 f0       	breq	.+18     	; 0x1b684 <lif_tests+0xde>
    {
        lif_add_ascii_file_as_e010(argv[ind],argv[ind+1],argv[ind+2]);
   1b672:	48 85       	ldd	r20, Y+8	; 0x08
   1b674:	59 85       	ldd	r21, Y+9	; 0x09
   1b676:	6e 81       	ldd	r22, Y+6	; 0x06
   1b678:	7f 81       	ldd	r23, Y+7	; 0x07
   1b67a:	8c 81       	ldd	r24, Y+4	; 0x04
   1b67c:	9d 81       	ldd	r25, Y+5	; 0x05
   1b67e:	0e 94 8e d2 	call	0x1a51c	; 0x1a51c <lif_add_ascii_file_as_e010>
   1b682:	b9 c0       	rjmp	.+370    	; 0x1b7f6 <lif_tests+0x250>
        return(1);
    }
    if (MATCHARGS(ptr,"createdisk", (ind + 3) ,argc))
   1b684:	97 01       	movw	r18, r14
   1b686:	45 e0       	ldi	r20, 0x05	; 5
   1b688:	50 e0       	ldi	r21, 0x00	; 0
   1b68a:	69 e7       	ldi	r22, 0x79	; 121
   1b68c:	76 e1       	ldi	r23, 0x16	; 22
   1b68e:	c8 01       	movw	r24, r16
   1b690:	0e 94 bd 31 	call	0x637a	; 0x637a <MATCHARGS>
   1b694:	89 2b       	or	r24, r25
   1b696:	e1 f1       	breq	.+120    	; 0x1b710 <lif_tests+0x16a>
    {
		///@brief format LIF image
		long dir,sectors;
		char *name = argv[ind];
   1b698:	ac 80       	ldd	r10, Y+4	; 0x04
   1b69a:	bd 80       	ldd	r11, Y+5	; 0x05
		char *label = argv[ind+1];
   1b69c:	8e 80       	ldd	r8, Y+6	; 0x06
   1b69e:	9f 80       	ldd	r9, Y+7	; 0x07
		char *model = argv[ind+2];
   1b6a0:	08 84       	ldd	r0, Y+8	; 0x08
   1b6a2:	d9 85       	ldd	r29, Y+9	; 0x09
   1b6a4:	c0 2d       	mov	r28, r0
		if( MATCHI_LEN(model,"hp"))
   1b6a6:	64 e8       	ldi	r22, 0x84	; 132
   1b6a8:	76 e1       	ldi	r23, 0x16	; 22
   1b6aa:	ce 01       	movw	r24, r28
   1b6ac:	0e 94 e7 31 	call	0x63ce	; 0x63ce <MATCHI_LEN>
   1b6b0:	89 2b       	or	r24, r25
   1b6b2:	09 f0       	breq	.+2      	; 0x1b6b6 <lif_tests+0x110>
			model +=2;
   1b6b4:	22 96       	adiw	r28, 0x02	; 2
		if(hpdir_find_drive(model,0, 0))
   1b6b6:	40 e0       	ldi	r20, 0x00	; 0
   1b6b8:	50 e0       	ldi	r21, 0x00	; 0
   1b6ba:	60 e0       	ldi	r22, 0x00	; 0
   1b6bc:	70 e0       	ldi	r23, 0x00	; 0
   1b6be:	ce 01       	movw	r24, r28
   1b6c0:	0e 94 64 a0 	call	0x140c8	; 0x140c8 <hpdir_find_drive>
   1b6c4:	89 2b       	or	r24, r25
   1b6c6:	b9 f0       	breq	.+46     	; 0x1b6f6 <lif_tests+0x150>
		{
			dir = lif_dir_count(hpdir.BLOCKS);
   1b6c8:	60 91 68 21 	lds	r22, 0x2168	; 0x802168 <hpdir+0xac>
   1b6cc:	70 91 69 21 	lds	r23, 0x2169	; 0x802169 <hpdir+0xad>
   1b6d0:	80 91 6a 21 	lds	r24, 0x216A	; 0x80216a <hpdir+0xae>
   1b6d4:	90 91 6b 21 	lds	r25, 0x216B	; 0x80216b <hpdir+0xaf>
   1b6d8:	0e 94 47 a0 	call	0x1408e	; 0x1408e <lif_dir_count>
   1b6dc:	9b 01       	movw	r18, r22
   1b6de:	ac 01       	movw	r20, r24
			sectors = hpdir.BLOCKS;
			lif_create_image(name, label, dir, sectors);
   1b6e0:	e0 90 68 21 	lds	r14, 0x2168	; 0x802168 <hpdir+0xac>
   1b6e4:	f0 90 69 21 	lds	r15, 0x2169	; 0x802169 <hpdir+0xad>
   1b6e8:	00 91 6a 21 	lds	r16, 0x216A	; 0x80216a <hpdir+0xae>
   1b6ec:	10 91 6b 21 	lds	r17, 0x216B	; 0x80216b <hpdir+0xaf>
   1b6f0:	b4 01       	movw	r22, r8
   1b6f2:	c5 01       	movw	r24, r10
   1b6f4:	29 c0       	rjmp	.+82     	; 0x1b748 <lif_tests+0x1a2>
			return(1);
		}
		printf("Disk: %s not found in hpdir.ini\n", model);
   1b6f6:	ed b7       	in	r30, 0x3d	; 61
   1b6f8:	fe b7       	in	r31, 0x3e	; 62
   1b6fa:	d5 83       	std	Z+5, r29	; 0x05
   1b6fc:	c4 83       	std	Z+4, r28	; 0x04
   1b6fe:	8e e2       	ldi	r24, 0x2E	; 46
   1b700:	9f e3       	ldi	r25, 0x3F	; 63
   1b702:	a0 e0       	ldi	r26, 0x00	; 0
   1b704:	81 83       	std	Z+1, r24	; 0x01
   1b706:	92 83       	std	Z+2, r25	; 0x02
   1b708:	a3 83       	std	Z+3, r26	; 0x03
   1b70a:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   1b70e:	73 c0       	rjmp	.+230    	; 0x1b7f6 <lif_tests+0x250>
        return(1);
    }
    if (MATCHARGS(ptr,"create", (ind + 4) ,argc))
   1b710:	97 01       	movw	r18, r14
   1b712:	46 e0       	ldi	r20, 0x06	; 6
   1b714:	50 e0       	ldi	r21, 0x00	; 0
   1b716:	67 e8       	ldi	r22, 0x87	; 135
   1b718:	76 e1       	ldi	r23, 0x16	; 22
   1b71a:	c8 01       	movw	r24, r16
   1b71c:	0e 94 bd 31 	call	0x637a	; 0x637a <MATCHARGS>
   1b720:	89 2b       	or	r24, r25
   1b722:	a1 f0       	breq	.+40     	; 0x1b74c <lif_tests+0x1a6>
    {
        ///@brief format LIF image
        lif_create_image(argv[ind],argv[ind+1], atol(argv[ind+2]), atol(argv[ind+3]) );
   1b724:	88 85       	ldd	r24, Y+8	; 0x08
   1b726:	99 85       	ldd	r25, Y+9	; 0x09
   1b728:	0e 94 45 46 	call	0x8c8a	; 0x8c8a <atol>
   1b72c:	4b 01       	movw	r8, r22
   1b72e:	5c 01       	movw	r10, r24
   1b730:	8a 85       	ldd	r24, Y+10	; 0x0a
   1b732:	9b 85       	ldd	r25, Y+11	; 0x0b
   1b734:	0e 94 45 46 	call	0x8c8a	; 0x8c8a <atol>
   1b738:	7b 01       	movw	r14, r22
   1b73a:	8c 01       	movw	r16, r24
   1b73c:	6e 81       	ldd	r22, Y+6	; 0x06
   1b73e:	7f 81       	ldd	r23, Y+7	; 0x07
   1b740:	a5 01       	movw	r20, r10
   1b742:	94 01       	movw	r18, r8
   1b744:	8c 81       	ldd	r24, Y+4	; 0x04
   1b746:	9d 81       	ldd	r25, Y+5	; 0x05
   1b748:	a7 de       	rcall	.-690    	; 0x1b498 <lif_create_image>
   1b74a:	55 c0       	rjmp	.+170    	; 0x1b7f6 <lif_tests+0x250>
        return(1);
    }
    if (MATCHARGS(ptr,"del", (ind + 2) ,argc))
   1b74c:	97 01       	movw	r18, r14
   1b74e:	44 e0       	ldi	r20, 0x04	; 4
   1b750:	50 e0       	ldi	r21, 0x00	; 0
   1b752:	6e e8       	ldi	r22, 0x8E	; 142
   1b754:	76 e1       	ldi	r23, 0x16	; 22
   1b756:	c8 01       	movw	r24, r16
   1b758:	0e 94 bd 31 	call	0x637a	; 0x637a <MATCHARGS>
   1b75c:	89 2b       	or	r24, r25
   1b75e:	31 f0       	breq	.+12     	; 0x1b76c <lif_tests+0x1c6>
    {
        lif_del_file(argv[ind],argv[ind+1]);
   1b760:	6e 81       	ldd	r22, Y+6	; 0x06
   1b762:	7f 81       	ldd	r23, Y+7	; 0x07
   1b764:	8c 81       	ldd	r24, Y+4	; 0x04
   1b766:	9d 81       	ldd	r25, Y+5	; 0x05
   1b768:	85 dd       	rcall	.-1270   	; 0x1b274 <lif_del_file>
   1b76a:	45 c0       	rjmp	.+138    	; 0x1b7f6 <lif_tests+0x250>
        return(1);
    }
    if (MATCHARGS(ptr,"dir", (ind + 1) ,argc))
   1b76c:	97 01       	movw	r18, r14
   1b76e:	43 e0       	ldi	r20, 0x03	; 3
   1b770:	50 e0       	ldi	r21, 0x00	; 0
   1b772:	6a ea       	ldi	r22, 0xAA	; 170
   1b774:	7b e0       	ldi	r23, 0x0B	; 11
   1b776:	c8 01       	movw	r24, r16
   1b778:	0e 94 bd 31 	call	0x637a	; 0x637a <MATCHARGS>
   1b77c:	89 2b       	or	r24, r25
   1b77e:	29 f0       	breq	.+10     	; 0x1b78a <lif_tests+0x1e4>
    {
        lif_dir(argv[ind]);
   1b780:	8c 81       	ldd	r24, Y+4	; 0x04
   1b782:	9d 81       	ldd	r25, Y+5	; 0x05
   1b784:	0e 94 40 ce 	call	0x19c80	; 0x19c80 <lif_dir>
   1b788:	36 c0       	rjmp	.+108    	; 0x1b7f6 <lif_tests+0x250>
        return(1);
    }
    if (MATCHARGS(ptr,"extractbin", (ind + 3) ,argc))
   1b78a:	97 01       	movw	r18, r14
   1b78c:	45 e0       	ldi	r20, 0x05	; 5
   1b78e:	50 e0       	ldi	r21, 0x00	; 0
   1b790:	62 e9       	ldi	r22, 0x92	; 146
   1b792:	76 e1       	ldi	r23, 0x16	; 22
   1b794:	c8 01       	movw	r24, r16
   1b796:	0e 94 bd 31 	call	0x637a	; 0x637a <MATCHARGS>
   1b79a:	89 2b       	or	r24, r25
   1b79c:	41 f0       	breq	.+16     	; 0x1b7ae <lif_tests+0x208>
    {

        lif_extract_lif_as_lif(argv[ind],argv[ind+1],argv[ind+2]);
   1b79e:	48 85       	ldd	r20, Y+8	; 0x08
   1b7a0:	59 85       	ldd	r21, Y+9	; 0x09
   1b7a2:	6e 81       	ldd	r22, Y+6	; 0x06
   1b7a4:	7f 81       	ldd	r23, Y+7	; 0x07
   1b7a6:	8c 81       	ldd	r24, Y+4	; 0x04
   1b7a8:	9d 81       	ldd	r25, Y+5	; 0x05
   1b7aa:	a3 da       	rcall	.-2746   	; 0x1acf2 <lif_extract_lif_as_lif>
   1b7ac:	24 c0       	rjmp	.+72     	; 0x1b7f6 <lif_tests+0x250>
        return(1);
    }
    if (MATCHARGS(ptr,"extract", (ind + 3) ,argc))
   1b7ae:	97 01       	movw	r18, r14
   1b7b0:	45 e0       	ldi	r20, 0x05	; 5
   1b7b2:	50 e0       	ldi	r21, 0x00	; 0
   1b7b4:	6d e9       	ldi	r22, 0x9D	; 157
   1b7b6:	76 e1       	ldi	r23, 0x16	; 22
   1b7b8:	c8 01       	movw	r24, r16
   1b7ba:	0e 94 bd 31 	call	0x637a	; 0x637a <MATCHARGS>
   1b7be:	89 2b       	or	r24, r25
   1b7c0:	49 f0       	breq	.+18     	; 0x1b7d4 <lif_tests+0x22e>
    {

        lif_extract_e010_as_ascii(argv[ind],argv[ind+1],argv[ind+2]);
   1b7c2:	48 85       	ldd	r20, Y+8	; 0x08
   1b7c4:	59 85       	ldd	r21, Y+9	; 0x09
   1b7c6:	6e 81       	ldd	r22, Y+6	; 0x06
   1b7c8:	7f 81       	ldd	r23, Y+7	; 0x07
   1b7ca:	8c 81       	ldd	r24, Y+4	; 0x04
   1b7cc:	9d 81       	ldd	r25, Y+5	; 0x05
   1b7ce:	0e 94 ca d3 	call	0x1a794	; 0x1a794 <lif_extract_e010_as_ascii>
   1b7d2:	11 c0       	rjmp	.+34     	; 0x1b7f6 <lif_tests+0x250>
        return(1);
    }
    if (MATCHARGS(ptr,"rename", (ind + 3) ,argc))
   1b7d4:	97 01       	movw	r18, r14
   1b7d6:	45 e0       	ldi	r20, 0x05	; 5
   1b7d8:	50 e0       	ldi	r21, 0x00	; 0
   1b7da:	67 eb       	ldi	r22, 0xB7	; 183
   1b7dc:	7b e0       	ldi	r23, 0x0B	; 11
   1b7de:	c8 01       	movw	r24, r16
   1b7e0:	0e 94 bd 31 	call	0x637a	; 0x637a <MATCHARGS>
   1b7e4:	00 97       	sbiw	r24, 0x00	; 0
   1b7e6:	49 f0       	breq	.+18     	; 0x1b7fa <lif_tests+0x254>
    {
        lif_rename_file(argv[ind],argv[ind+1],argv[ind+2]);
   1b7e8:	48 85       	ldd	r20, Y+8	; 0x08
   1b7ea:	59 85       	ldd	r21, Y+9	; 0x09
   1b7ec:	6e 81       	ldd	r22, Y+6	; 0x06
   1b7ee:	7f 81       	ldd	r23, Y+7	; 0x07
   1b7f0:	8c 81       	ldd	r24, Y+4	; 0x04
   1b7f2:	9d 81       	ldd	r25, Y+5	; 0x05
   1b7f4:	d4 dd       	rcall	.-1112   	; 0x1b39e <lif_rename_file>
    printf("\n");
#endif

	// Nothing to do ?
	if(argc < 2)
		return (1);
   1b7f6:	81 e0       	ldi	r24, 0x01	; 1
   1b7f8:	90 e0       	ldi	r25, 0x00	; 0
        td02lif(argc,argv);
        return(1);
    }
#endif
    return(0);
}
   1b7fa:	0f 90       	pop	r0
   1b7fc:	0f 90       	pop	r0
   1b7fe:	0f 90       	pop	r0
   1b800:	0f 90       	pop	r0
   1b802:	0f 90       	pop	r0
   1b804:	df 91       	pop	r29
   1b806:	cf 91       	pop	r28
   1b808:	1f 91       	pop	r17
   1b80a:	0f 91       	pop	r16
   1b80c:	ff 90       	pop	r15
   1b80e:	ef 90       	pop	r14
   1b810:	bf 90       	pop	r11
   1b812:	af 90       	pop	r10
   1b814:	9f 90       	pop	r9
   1b816:	8f 90       	pop	r8
   1b818:	08 95       	ret

0001b81a <copyright>:
#include <math.h>

///@brief Display Copyright
///@return void
void copyright()
{
   1b81a:	00 d0       	rcall	.+0      	; 0x1b81c <copyright+0x2>
   1b81c:	00 d0       	rcall	.+0      	; 0x1b81e <copyright+0x4>
   1b81e:	1f 92       	push	r1
    printf("Stand alone version of LIF utilities for linux\n");
   1b820:	84 e7       	ldi	r24, 0x74	; 116
   1b822:	94 e4       	ldi	r25, 0x44	; 68
   1b824:	a0 e0       	ldi	r26, 0x00	; 0
   1b826:	ed b7       	in	r30, 0x3d	; 61
   1b828:	fe b7       	in	r31, 0x3e	; 62
   1b82a:	81 83       	std	Z+1, r24	; 0x01
   1b82c:	92 83       	std	Z+2, r25	; 0x02
   1b82e:	a3 83       	std	Z+3, r26	; 0x03
   1b830:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    printf("HP85 Disk and Device Emulator\n");
   1b834:	85 e5       	ldi	r24, 0x55	; 85
   1b836:	94 e4       	ldi	r25, 0x44	; 68
   1b838:	a0 e0       	ldi	r26, 0x00	; 0
   1b83a:	ed b7       	in	r30, 0x3d	; 61
   1b83c:	fe b7       	in	r31, 0x3e	; 62
   1b83e:	81 83       	std	Z+1, r24	; 0x01
   1b840:	92 83       	std	Z+2, r25	; 0x02
   1b842:	a3 83       	std	Z+3, r26	; 0x03
   1b844:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    printf(" (c) 2014-2020 by Mike Gore\n");
   1b848:	88 e3       	ldi	r24, 0x38	; 56
   1b84a:	94 e4       	ldi	r25, 0x44	; 68
   1b84c:	a0 e0       	ldi	r26, 0x00	; 0
   1b84e:	ed b7       	in	r30, 0x3d	; 61
   1b850:	fe b7       	in	r31, 0x3e	; 62
   1b852:	81 83       	std	Z+1, r24	; 0x01
   1b854:	92 83       	std	Z+2, r25	; 0x02
   1b856:	a3 83       	std	Z+3, r26	; 0x03
   1b858:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    printf(" GNU version 3\n");
   1b85c:	88 e2       	ldi	r24, 0x28	; 40
   1b85e:	94 e4       	ldi	r25, 0x44	; 68
   1b860:	a0 e0       	ldi	r26, 0x00	; 0
   1b862:	ed b7       	in	r30, 0x3d	; 61
   1b864:	fe b7       	in	r31, 0x3e	; 62
   1b866:	81 83       	std	Z+1, r24	; 0x01
   1b868:	92 83       	std	Z+2, r25	; 0x02
   1b86a:	a3 83       	std	Z+3, r26	; 0x03
   1b86c:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    printf("-> https://github.com/magore/hp85disk\n");
   1b870:	81 e0       	ldi	r24, 0x01	; 1
   1b872:	94 e4       	ldi	r25, 0x44	; 68
   1b874:	a0 e0       	ldi	r26, 0x00	; 0
   1b876:	ed b7       	in	r30, 0x3d	; 61
   1b878:	fe b7       	in	r31, 0x3e	; 62
   1b87a:	81 83       	std	Z+1, r24	; 0x01
   1b87c:	92 83       	std	Z+2, r25	; 0x02
   1b87e:	a3 83       	std	Z+3, r26	; 0x03
   1b880:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    printf("   GIT last pushed:   %s\n", GIT_VERSION);
   1b884:	85 ea       	ldi	r24, 0xA5	; 165
   1b886:	96 e1       	ldi	r25, 0x16	; 22
   1b888:	ed b7       	in	r30, 0x3d	; 61
   1b88a:	fe b7       	in	r31, 0x3e	; 62
   1b88c:	95 83       	std	Z+5, r25	; 0x05
   1b88e:	84 83       	std	Z+4, r24	; 0x04
   1b890:	87 ee       	ldi	r24, 0xE7	; 231
   1b892:	93 e4       	ldi	r25, 0x43	; 67
   1b894:	a0 e0       	ldi	r26, 0x00	; 0
   1b896:	81 83       	std	Z+1, r24	; 0x01
   1b898:	92 83       	std	Z+2, r25	; 0x02
   1b89a:	a3 83       	std	Z+3, r26	; 0x03
   1b89c:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    printf("   Last updated file: %s\n", LOCAL_MOD);
   1b8a0:	89 ec       	ldi	r24, 0xC9	; 201
   1b8a2:	96 e1       	ldi	r25, 0x16	; 22
   1b8a4:	ed b7       	in	r30, 0x3d	; 61
   1b8a6:	fe b7       	in	r31, 0x3e	; 62
   1b8a8:	95 83       	std	Z+5, r25	; 0x05
   1b8aa:	84 83       	std	Z+4, r24	; 0x04
   1b8ac:	8d ec       	ldi	r24, 0xCD	; 205
   1b8ae:	93 e4       	ldi	r25, 0x43	; 67
   1b8b0:	a0 e0       	ldi	r26, 0x00	; 0
   1b8b2:	81 83       	std	Z+1, r24	; 0x01
   1b8b4:	92 83       	std	Z+2, r25	; 0x02
   1b8b6:	a3 83       	std	Z+3, r26	; 0x03
   1b8b8:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    printf("\n");
   1b8bc:	8b ec       	ldi	r24, 0xCB	; 203
   1b8be:	93 e4       	ldi	r25, 0x43	; 67
   1b8c0:	a0 e0       	ldi	r26, 0x00	; 0
   1b8c2:	ed b7       	in	r30, 0x3d	; 61
   1b8c4:	fe b7       	in	r31, 0x3e	; 62
   1b8c6:	81 83       	std	Z+1, r24	; 0x01
   1b8c8:	92 83       	std	Z+2, r25	; 0x02
   1b8ca:	a3 83       	std	Z+3, r26	; 0x03
   1b8cc:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
}
   1b8d0:	0f 90       	pop	r0
   1b8d2:	0f 90       	pop	r0
   1b8d4:	0f 90       	pop	r0
   1b8d6:	0f 90       	pop	r0
   1b8d8:	0f 90       	pop	r0
   1b8da:	08 95       	ret

0001b8dc <help>:
/// @brief  Display the main help menu - calls all other help menus
/// @return  void
/// @see gpib_help()
/// @see fatfs_help()
void help()
{
   1b8dc:	00 d0       	rcall	.+0      	; 0x1b8de <help+0x2>

    copyright();
   1b8de:	1f 92       	push	r1

#ifdef FATFS_TESTS
    fatfs_help(0);
   1b8e0:	9c df       	rcall	.-200    	; 0x1b81a <copyright>
   1b8e2:	80 e0       	ldi	r24, 0x00	; 0
   1b8e4:	90 e0       	ldi	r25, 0x00	; 0
   1b8e6:	0e 94 5b 72 	call	0xe4b6	; 0xe4b6 <fatfs_help>
#endif

#ifdef POSIX_TESTS
    posix_help(0);
   1b8ea:	80 e0       	ldi	r24, 0x00	; 0
   1b8ec:	90 e0       	ldi	r25, 0x00	; 0
   1b8ee:	0e 94 a8 7d 	call	0xfb50	; 0xfb50 <posix_help>
#endif

#ifdef LIF_SUPPORT
    lif_help(0);
   1b8f2:	80 e0       	ldi	r24, 0x00	; 0
   1b8f4:	90 e0       	ldi	r25, 0x00	; 0
   1b8f6:	0e 94 d0 bc 	call	0x179a0	; 0x179a0 <lif_help>
#endif

    gpib_help(0);
   1b8fa:	80 e0       	ldi	r24, 0x00	; 0
   1b8fc:	90 e0       	ldi	r25, 0x00	; 0
   1b8fe:	0e 94 ca 90 	call	0x12194	; 0x12194 <gpib_help>

    printf(
   1b902:	8d ea       	ldi	r24, 0xAD	; 173
   1b904:	93 e4       	ldi	r25, 0x43	; 67
   1b906:	a0 e0       	ldi	r26, 0x00	; 0
   1b908:	ed b7       	in	r30, 0x3d	; 61
   1b90a:	fe b7       	in	r31, 0x3e	; 62
   1b90c:	81 83       	std	Z+1, r24	; 0x01
   1b90e:	92 83       	std	Z+2, r25	; 0x02
   1b910:	a3 83       	std	Z+3, r26	; 0x03
   1b912:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
        "setdate\n"
        "time\n"
        "reset\n"
        "\n"
        );
}
   1b916:	0f 90       	pop	r0
   1b918:	0f 90       	pop	r0
   1b91a:	0f 90       	pop	r0
   1b91c:	08 95       	ret

0001b91e <task.part.0>:
/// If a keypress is detected read a line from the uart
/// parse the result and call various user functions.
/// ? will return a list of fuctions and paramters permitted
/// @param[in] gpib - if non-zero run gpib while there are no user commands
/// @return  void
void task(uint8_t gpib)
   1b91e:	a9 e6       	ldi	r26, 0x69	; 105
   1b920:	b1 e0       	ldi	r27, 0x01	; 1
   1b922:	e4 e9       	ldi	r30, 0x94	; 148
   1b924:	fc ed       	ldi	r31, 0xDC	; 220
   1b926:	54 c3       	rjmp	.+1704   	; 0x1bfd0 <__prologue_saves__+0x14>
        gpib_task();

    if(!kbhit(0))
        return;

    printf("\n>");
   1b928:	8a ea       	ldi	r24, 0xAA	; 170
   1b92a:	93 e4       	ldi	r25, 0x43	; 67
   1b92c:	a0 e0       	ldi	r26, 0x00	; 0
   1b92e:	ed b7       	in	r30, 0x3d	; 61
   1b930:	fe b7       	in	r31, 0x3e	; 62
   1b932:	81 83       	std	Z+1, r24	; 0x01
   1b934:	92 83       	std	Z+2, r25	; 0x02
   1b936:	a3 83       	std	Z+3, r26	; 0x03
   1b938:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>

    fgets(line,sizeof(line)-2,stdin);
   1b93c:	40 91 83 1c 	lds	r20, 0x1C83	; 0x801c83 <__iob>
   1b940:	50 91 84 1c 	lds	r21, 0x1C84	; 0x801c84 <__iob+0x1>
   1b944:	6e ef       	ldi	r22, 0xFE	; 254
   1b946:	70 e0       	ldi	r23, 0x00	; 0
   1b948:	ce 01       	movw	r24, r28
   1b94a:	06 96       	adiw	r24, 0x06	; 6
   1b94c:	6c 01       	movw	r12, r24
   1b94e:	0e 94 94 75 	call	0xeb28	; 0xeb28 <fgets>
	trim_tail(line);
   1b952:	c6 01       	movw	r24, r12
   1b954:	0e 94 7b 31 	call	0x62f6	; 0x62f6 <trim_tail>
    argc = split_args(line,argv,50);
   1b958:	42 e3       	ldi	r20, 0x32	; 50
   1b95a:	50 e0       	ldi	r21, 0x00	; 0
   1b95c:	be 01       	movw	r22, r28
   1b95e:	6a 5f       	subi	r22, 0xFA	; 250
   1b960:	7e 4f       	sbci	r23, 0xFE	; 254
   1b962:	c6 01       	movw	r24, r12
   1b964:	0e 94 01 32 	call	0x6402	; 0x6402 <split_args>
   1b968:	8c 01       	movw	r16, r24
    for(i=0;i<argc;++i)
        printf("   [%s]\n", argv[i]);
#endif

    ind = 0;
    ptr = argv[ind++];
   1b96a:	ca 5f       	subi	r28, 0xFA	; 250
   1b96c:	de 4f       	sbci	r29, 0xFE	; 254
   1b96e:	e8 80       	ld	r14, Y
   1b970:	f9 80       	ldd	r15, Y+1	; 0x01
   1b972:	c6 50       	subi	r28, 0x06	; 6
   1b974:	d1 40       	sbci	r29, 0x01	; 1

	if(!ptr || argc < 1)
   1b976:	e1 14       	cp	r14, r1
   1b978:	f1 04       	cpc	r15, r1
   1b97a:	09 f4       	brne	.+2      	; 0x1b97e <task.part.0+0x60>
   1b97c:	76 c0       	rjmp	.+236    	; 0x1ba6a <task.part.0+0x14c>
   1b97e:	18 16       	cp	r1, r24
   1b980:	19 06       	cpc	r1, r25
   1b982:	0c f0       	brlt	.+2      	; 0x1b986 <task.part.0+0x68>
   1b984:	72 c0       	rjmp	.+228    	; 0x1ba6a <task.part.0+0x14c>
        delay_tests();
        result = 1;

    }
#endif
    else if ( MATCHARGS(ptr,"time",(ind+0),argc))
   1b986:	9c 01       	movw	r18, r24
   1b988:	41 e0       	ldi	r20, 0x01	; 1
   1b98a:	50 e0       	ldi	r21, 0x00	; 0
   1b98c:	6d ee       	ldi	r22, 0xED	; 237
   1b98e:	76 e1       	ldi	r23, 0x16	; 22
   1b990:	c7 01       	movw	r24, r14
   1b992:	0e 94 bd 31 	call	0x637a	; 0x637a <MATCHARGS>
   1b996:	89 2b       	or	r24, r25
   1b998:	01 f5       	brne	.+64     	; 0x1b9da <task.part.0+0xbc>
    {
		display_clock();
        result = 1;
    }
    else if ( MATCHARGS(ptr,"reset",(ind+0),argc))
   1b99a:	98 01       	movw	r18, r16
   1b99c:	41 e0       	ldi	r20, 0x01	; 1
   1b99e:	50 e0       	ldi	r21, 0x00	; 0
   1b9a0:	6c ea       	ldi	r22, 0xAC	; 172
   1b9a2:	7d e0       	ldi	r23, 0x0D	; 13
   1b9a4:	c7 01       	movw	r24, r14
   1b9a6:	0e 94 bd 31 	call	0x637a	; 0x637a <MATCHARGS>
   1b9aa:	89 2b       	or	r24, r25
   1b9ac:	51 f0       	breq	.+20     	; 0x1b9c2 <task.part.0+0xa4>
    {
		cli();	
   1b9ae:	f8 94       	cli
		uart_rx_flush(0);
   1b9b0:	80 e0       	ldi	r24, 0x00	; 0
   1b9b2:	0e 94 a7 28 	call	0x514e	; 0x514e <uart_rx_flush>
		cli();	
   1b9b6:	f8 94       	cli
		MCUSR = (1 << EXTRF);
   1b9b8:	82 e0       	ldi	r24, 0x02	; 2
   1b9ba:	84 bf       	out	0x34, r24	; 52
        RESET();
   1b9bc:	e0 e0       	ldi	r30, 0x00	; 0
   1b9be:	fc ef       	ldi	r31, 0xFC	; 252
   1b9c0:	09 95       	icall
		// should not return!
        result = 1;
    }
    else if ( MATCHARGS(ptr,"setdate",(ind+0),argc))
   1b9c2:	98 01       	movw	r18, r16
   1b9c4:	41 e0       	ldi	r20, 0x01	; 1
   1b9c6:	50 e0       	ldi	r21, 0x00	; 0
   1b9c8:	62 ef       	ldi	r22, 0xF2	; 242
   1b9ca:	76 e1       	ldi	r23, 0x16	; 22
   1b9cc:	c7 01       	movw	r24, r14
   1b9ce:	0e 94 bd 31 	call	0x637a	; 0x637a <MATCHARGS>
   1b9d2:	89 2b       	or	r24, r25
   1b9d4:	29 f0       	breq	.+10     	; 0x1b9e0 <task.part.0+0xc2>
    {
        setdate();
   1b9d6:	0e 94 e4 3a 	call	0x75c8	; 0x75c8 <setdate>
        display_clock();
   1b9da:	0e 94 00 3d 	call	0x7a00	; 0x7a00 <display_clock>
   1b9de:	45 c0       	rjmp	.+138    	; 0x1ba6a <task.part.0+0x14c>
        result = 1;
    }
    else if ( MATCHARGS(ptr,"mem",(ind+0),argc))
   1b9e0:	98 01       	movw	r18, r16
   1b9e2:	41 e0       	ldi	r20, 0x01	; 1
   1b9e4:	50 e0       	ldi	r21, 0x00	; 0
   1b9e6:	6a ef       	ldi	r22, 0xFA	; 250
   1b9e8:	76 e1       	ldi	r23, 0x16	; 22
   1b9ea:	c7 01       	movw	r24, r14
   1b9ec:	0e 94 bd 31 	call	0x637a	; 0x637a <MATCHARGS>
   1b9f0:	89 2b       	or	r24, r25
   1b9f2:	19 f0       	breq	.+6      	; 0x1b9fa <task.part.0+0xdc>
    {
        PrintFree();
   1b9f4:	0e 94 20 27 	call	0x4e40	; 0x4e40 <PrintFree>
   1b9f8:	38 c0       	rjmp	.+112    	; 0x1ba6a <task.part.0+0x14c>
        result = 1;

    }
    else if ( MATCHARGS(ptr,"help",(ind+0),argc) || MATCHARGS(ptr,"?",(ind+0),argc))
   1b9fa:	98 01       	movw	r18, r16
   1b9fc:	41 e0       	ldi	r20, 0x01	; 1
   1b9fe:	50 e0       	ldi	r21, 0x00	; 0
   1ba00:	63 e6       	ldi	r22, 0x63	; 99
   1ba02:	76 e1       	ldi	r23, 0x16	; 22
   1ba04:	c7 01       	movw	r24, r14
   1ba06:	0e 94 bd 31 	call	0x637a	; 0x637a <MATCHARGS>
   1ba0a:	89 2b       	or	r24, r25
    {
        help();
   1ba0c:	11 f0       	breq	.+4      	; 0x1ba12 <task.part.0+0xf4>
   1ba0e:	66 df       	rcall	.-308    	; 0x1b8dc <help>
   1ba10:	2c c0       	rjmp	.+88     	; 0x1ba6a <task.part.0+0x14c>
    {
        PrintFree();
        result = 1;

    }
    else if ( MATCHARGS(ptr,"help",(ind+0),argc) || MATCHARGS(ptr,"?",(ind+0),argc))
   1ba12:	98 01       	movw	r18, r16
   1ba14:	41 e0       	ldi	r20, 0x01	; 1
   1ba16:	50 e0       	ldi	r21, 0x00	; 0
   1ba18:	69 e6       	ldi	r22, 0x69	; 105
   1ba1a:	76 e1       	ldi	r23, 0x16	; 22
   1ba1c:	c7 01       	movw	r24, r14
   1ba1e:	0e 94 bd 31 	call	0x637a	; 0x637a <MATCHARGS>
   1ba22:	89 2b       	or	r24, r25
   1ba24:	a1 f7       	brne	.-24     	; 0x1ba0e <task.part.0+0xf0>
    {
        help();
        result = 1;
    }

    else if(gpib_tests(argc,argv))
   1ba26:	be 01       	movw	r22, r28
   1ba28:	6a 5f       	subi	r22, 0xFA	; 250
   1ba2a:	7e 4f       	sbci	r23, 0xFE	; 254
   1ba2c:	c8 01       	movw	r24, r16
   1ba2e:	0e 94 eb 90 	call	0x121d6	; 0x121d6 <gpib_tests>
   1ba32:	89 2b       	or	r24, r25
   1ba34:	19 f0       	breq	.+6      	; 0x1ba3c <task.part.0+0x11e>
    {
        // Restore GPIB BUS states
        gpib_init_devices();
   1ba36:	0e 94 fc 8b 	call	0x117f8	; 0x117f8 <gpib_init_devices>
   1ba3a:	17 c0       	rjmp	.+46     	; 0x1ba6a <task.part.0+0x14c>
        result = 1;
    }

#ifdef POSIX_TESTS
    else if(posix_tests(argc,argv))
   1ba3c:	be 01       	movw	r22, r28
   1ba3e:	6a 5f       	subi	r22, 0xFA	; 250
   1ba40:	7e 4f       	sbci	r23, 0xFE	; 254
   1ba42:	c8 01       	movw	r24, r16
   1ba44:	0e 94 1a 81 	call	0x10234	; 0x10234 <posix_tests>
   1ba48:	89 2b       	or	r24, r25
   1ba4a:	79 f4       	brne	.+30     	; 0x1ba6a <task.part.0+0x14c>
        result = 1;
#endif

#ifdef FATFS_TESTS
    else if(fatfs_tests(argc,argv))
   1ba4c:	be 01       	movw	r22, r28
   1ba4e:	6a 5f       	subi	r22, 0xFA	; 250
   1ba50:	7e 4f       	sbci	r23, 0xFE	; 254
   1ba52:	c8 01       	movw	r24, r16
   1ba54:	0e 94 75 73 	call	0xe6ea	; 0xe6ea <fatfs_tests>
   1ba58:	89 2b       	or	r24, r25
   1ba5a:	39 f4       	brne	.+14     	; 0x1ba6a <task.part.0+0x14c>
        result = 1;
#endif

#ifdef LIF_SUPPORT
    else if(lif_tests(argc,argv))
   1ba5c:	be 01       	movw	r22, r28
   1ba5e:	6a 5f       	subi	r22, 0xFA	; 250
   1ba60:	7e 4f       	sbci	r23, 0xFE	; 254
   1ba62:	c8 01       	movw	r24, r16
   1ba64:	a0 dd       	rcall	.-1216   	; 0x1b5a6 <lif_tests>
   1ba66:	89 2b       	or	r24, r25
   1ba68:	59 f0       	breq	.+22     	; 0x1ba80 <task.part.0+0x162>
        result = 1;
#endif
	if(result)
		printf("OK\n");
   1ba6a:	86 ea       	ldi	r24, 0xA6	; 166
   1ba6c:	93 e4       	ldi	r25, 0x43	; 67
   1ba6e:	a0 e0       	ldi	r26, 0x00	; 0
   1ba70:	ed b7       	in	r30, 0x3d	; 61
   1ba72:	fe b7       	in	r31, 0x3e	; 62
   1ba74:	81 83       	std	Z+1, r24	; 0x01
   1ba76:	92 83       	std	Z+2, r25	; 0x02
   1ba78:	a3 83       	std	Z+3, r26	; 0x03
   1ba7a:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
   1ba7e:	0c c0       	rjmp	.+24     	; 0x1ba98 <task.part.0+0x17a>
	else
		printf("Error:[%s]\n",line);
   1ba80:	ed b7       	in	r30, 0x3d	; 61
   1ba82:	fe b7       	in	r31, 0x3e	; 62
   1ba84:	d5 82       	std	Z+5, r13	; 0x05
   1ba86:	c4 82       	std	Z+4, r12	; 0x04
   1ba88:	8a e9       	ldi	r24, 0x9A	; 154
   1ba8a:	93 e4       	ldi	r25, 0x43	; 67
   1ba8c:	a0 e0       	ldi	r26, 0x00	; 0
   1ba8e:	81 83       	std	Z+1, r24	; 0x01
   1ba90:	92 83       	std	Z+2, r25	; 0x02
   1ba92:	a3 83       	std	Z+3, r26	; 0x03
   1ba94:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
}
   1ba98:	c7 59       	subi	r28, 0x97	; 151
   1ba9a:	de 4f       	sbci	r29, 0xFE	; 254
   1ba9c:	e8 e0       	ldi	r30, 0x08	; 8
   1ba9e:	b4 c2       	rjmp	.+1384   	; 0x1c008 <__epilogue_restores__+0x14>

0001baa0 <task>:
    int argc;
	int result = 0;
    char *argv[50];
    char line[256];

    if(gpib)
   1baa0:	81 11       	cpse	r24, r1
        gpib_task();
   1baa2:	0e 94 68 90 	call	0x120d0	; 0x120d0 <gpib_task>

    if(!kbhit(0))
   1baa6:	80 e0       	ldi	r24, 0x00	; 0
   1baa8:	0e 94 e6 29 	call	0x53cc	; 0x53cc <uart_rx_count>
   1baac:	89 2b       	or	r24, r25
   1baae:	09 f0       	breq	.+2      	; 0x1bab2 <task+0x12>
   1bab0:	36 cf       	rjmp	.-404    	; 0x1b91e <task.part.0>
   1bab2:	08 95       	ret

0001bab4 <main>:


/// @brief  main() for gpib project
/// @return  should never return!
int main(void)
{
   1bab4:	cf 93       	push	r28
   1bab6:	df 93       	push	r29
   1bab8:	cd b7       	in	r28, 0x3d	; 61
   1baba:	de b7       	in	r29, 0x3e	; 62
   1babc:	63 97       	sbiw	r28, 0x13	; 19
   1babe:	0f b6       	in	r0, 0x3f	; 63
   1bac0:	f8 94       	cli
   1bac2:	de bf       	out	0x3e, r29	; 62
   1bac4:	0f be       	out	0x3f, r0	; 63
   1bac6:	cd bf       	out	0x3d, r28	; 61
    ts_t ts;
    uint32_t actual,baud;

    ///@ initialize bus state as soon as practical
    gpib_bus_init();
   1bac8:	0e 94 fe 84 	call	0x109fc	; 0x109fc <gpib_bus_init>
    // BAUD setting moved to Makefile
    baud = BAUD;

    ///@ Initialize UART early
	/// Returns actual BAUD rate - possible with hardware - may differ slightly
    actual = uart_init(0, baud); // Serial Port Initialize
   1bacc:	40 e0       	ldi	r20, 0x00	; 0
   1bace:	52 ec       	ldi	r21, 0xC2	; 194
   1bad0:	61 e0       	ldi	r22, 0x01	; 1
   1bad2:	70 e0       	ldi	r23, 0x00	; 0
   1bad4:	80 e0       	ldi	r24, 0x00	; 0
   1bad6:	0e 94 52 29 	call	0x52a4	; 0x52a4 <uart_init>
   1bada:	6b 01       	movw	r12, r22
   1badc:	7c 01       	movw	r14, r24

    ///@brief Power up delay
    delayms(200); 
   1bade:	68 ec       	ldi	r22, 0xC8	; 200
   1bae0:	70 e0       	ldi	r23, 0x00	; 0
   1bae2:	80 e0       	ldi	r24, 0x00	; 0
   1bae4:	90 e0       	ldi	r25, 0x00	; 0
   1bae6:	0e 94 5f 28 	call	0x50be	; 0x50be <delayms>

    sep();
   1baea:	0e 94 6b 31 	call	0x62d6	; 0x62d6 <sep>
    printf("Start\n");
   1baee:	83 e9       	ldi	r24, 0x93	; 147
   1baf0:	93 e4       	ldi	r25, 0x43	; 67
   1baf2:	a0 e0       	ldi	r26, 0x00	; 0
   1baf4:	ed b7       	in	r30, 0x3d	; 61
   1baf6:	fe b7       	in	r31, 0x3e	; 62
   1baf8:	81 83       	std	Z+1, r24	; 0x01
   1bafa:	92 83       	std	Z+2, r25	; 0x02
   1bafc:	a3 83       	std	Z+3, r26	; 0x03
   1bafe:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    printf("CPU Clock = %lu\n", F_CPU);
   1bb02:	80 e0       	ldi	r24, 0x00	; 0
   1bb04:	9d e2       	ldi	r25, 0x2D	; 45
   1bb06:	a1 e3       	ldi	r26, 0x31	; 49
   1bb08:	b1 e0       	ldi	r27, 0x01	; 1
   1bb0a:	ed b7       	in	r30, 0x3d	; 61
   1bb0c:	fe b7       	in	r31, 0x3e	; 62
   1bb0e:	84 83       	std	Z+4, r24	; 0x04
   1bb10:	95 83       	std	Z+5, r25	; 0x05
   1bb12:	a6 83       	std	Z+6, r26	; 0x06
   1bb14:	b7 83       	std	Z+7, r27	; 0x07
   1bb16:	82 e8       	ldi	r24, 0x82	; 130
   1bb18:	93 e4       	ldi	r25, 0x43	; 67
   1bb1a:	a0 e0       	ldi	r26, 0x00	; 0
   1bb1c:	81 83       	std	Z+1, r24	; 0x01
   1bb1e:	92 83       	std	Z+2, r25	; 0x02
   1bb20:	a3 83       	std	Z+3, r26	; 0x03
   1bb22:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    printf("Requested Baud Rate: %ld, Actual: %ld\n", (long)baud, (long)actual);
   1bb26:	ed b7       	in	r30, 0x3d	; 61
   1bb28:	fe b7       	in	r31, 0x3e	; 62
   1bb2a:	c0 86       	std	Z+8, r12	; 0x08
   1bb2c:	d1 86       	std	Z+9, r13	; 0x09
   1bb2e:	e2 86       	std	Z+10, r14	; 0x0a
   1bb30:	f3 86       	std	Z+11, r15	; 0x0b
   1bb32:	80 e0       	ldi	r24, 0x00	; 0
   1bb34:	92 ec       	ldi	r25, 0xC2	; 194
   1bb36:	a1 e0       	ldi	r26, 0x01	; 1
   1bb38:	b0 e0       	ldi	r27, 0x00	; 0
   1bb3a:	84 83       	std	Z+4, r24	; 0x04
   1bb3c:	95 83       	std	Z+5, r25	; 0x05
   1bb3e:	a6 83       	std	Z+6, r26	; 0x06
   1bb40:	b7 83       	std	Z+7, r27	; 0x07
   1bb42:	8b e5       	ldi	r24, 0x5B	; 91
   1bb44:	93 e4       	ldi	r25, 0x43	; 67
   1bb46:	a0 e0       	ldi	r26, 0x00	; 0
   1bb48:	81 83       	std	Z+1, r24	; 0x01
   1bb4a:	92 83       	std	Z+2, r25	; 0x02
   1bb4c:	a3 83       	std	Z+3, r26	; 0x03
   1bb4e:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>

    init_timers();
   1bb52:	0e 94 51 35 	call	0x6aa2	; 0x6aa2 <init_timers>

    sep();
   1bb56:	0e 94 6b 31 	call	0x62d6	; 0x62d6 <sep>
    printf("HP85 Disk and Device Emulator\n");
   1bb5a:	8c e3       	ldi	r24, 0x3C	; 60
   1bb5c:	93 e4       	ldi	r25, 0x43	; 67
   1bb5e:	a0 e0       	ldi	r26, 0x00	; 0
   1bb60:	ed b7       	in	r30, 0x3d	; 61
   1bb62:	fe b7       	in	r31, 0x3e	; 62
   1bb64:	81 83       	std	Z+1, r24	; 0x01
   1bb66:	92 83       	std	Z+2, r25	; 0x02
   1bb68:	a3 83       	std	Z+3, r26	; 0x03
   1bb6a:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    printf(" (C) 2014-2020 by Mike Gore\n");
   1bb6e:	8f e1       	ldi	r24, 0x1F	; 31
   1bb70:	93 e4       	ldi	r25, 0x43	; 67
   1bb72:	a0 e0       	ldi	r26, 0x00	; 0
   1bb74:	ed b7       	in	r30, 0x3d	; 61
   1bb76:	fe b7       	in	r31, 0x3e	; 62
   1bb78:	81 83       	std	Z+1, r24	; 0x01
   1bb7a:	92 83       	std	Z+2, r25	; 0x02
   1bb7c:	a3 83       	std	Z+3, r26	; 0x03
   1bb7e:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
	printf(" GNU version 3\n");
   1bb82:	8f e0       	ldi	r24, 0x0F	; 15
   1bb84:	93 e4       	ldi	r25, 0x43	; 67
   1bb86:	a0 e0       	ldi	r26, 0x00	; 0
   1bb88:	ed b7       	in	r30, 0x3d	; 61
   1bb8a:	fe b7       	in	r31, 0x3e	; 62
   1bb8c:	81 83       	std	Z+1, r24	; 0x01
   1bb8e:	92 83       	std	Z+2, r25	; 0x02
   1bb90:	a3 83       	std	Z+3, r26	; 0x03
   1bb92:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    printf("-> https://github.com/magore/hp85disk\n");
   1bb96:	88 ee       	ldi	r24, 0xE8	; 232
   1bb98:	92 e4       	ldi	r25, 0x42	; 66
   1bb9a:	a0 e0       	ldi	r26, 0x00	; 0
   1bb9c:	ed b7       	in	r30, 0x3d	; 61
   1bb9e:	fe b7       	in	r31, 0x3e	; 62
   1bba0:	81 83       	std	Z+1, r24	; 0x01
   1bba2:	92 83       	std	Z+2, r25	; 0x02
   1bba4:	a3 83       	std	Z+3, r26	; 0x03
   1bba6:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    printf("   GIT last pushed:   %s\n", GIT_VERSION);
   1bbaa:	85 ea       	ldi	r24, 0xA5	; 165
   1bbac:	96 e1       	ldi	r25, 0x16	; 22
   1bbae:	ed b7       	in	r30, 0x3d	; 61
   1bbb0:	fe b7       	in	r31, 0x3e	; 62
   1bbb2:	95 83       	std	Z+5, r25	; 0x05
   1bbb4:	84 83       	std	Z+4, r24	; 0x04
   1bbb6:	8e ec       	ldi	r24, 0xCE	; 206
   1bbb8:	92 e4       	ldi	r25, 0x42	; 66
   1bbba:	a0 e0       	ldi	r26, 0x00	; 0
   1bbbc:	81 83       	std	Z+1, r24	; 0x01
   1bbbe:	92 83       	std	Z+2, r25	; 0x02
   1bbc0:	a3 83       	std	Z+3, r26	; 0x03
   1bbc2:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    printf("   Last updated file: %s\n", LOCAL_MOD);
   1bbc6:	89 ec       	ldi	r24, 0xC9	; 201
   1bbc8:	96 e1       	ldi	r25, 0x16	; 22
   1bbca:	ed b7       	in	r30, 0x3d	; 61
   1bbcc:	fe b7       	in	r31, 0x3e	; 62
   1bbce:	95 83       	std	Z+5, r25	; 0x05
   1bbd0:	84 83       	std	Z+4, r24	; 0x04
   1bbd2:	84 eb       	ldi	r24, 0xB4	; 180
   1bbd4:	92 e4       	ldi	r25, 0x42	; 66
   1bbd6:	a0 e0       	ldi	r26, 0x00	; 0
   1bbd8:	81 83       	std	Z+1, r24	; 0x01
   1bbda:	92 83       	std	Z+2, r25	; 0x02
   1bbdc:	a3 83       	std	Z+3, r26	; 0x03
   1bbde:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>

    sep();
   1bbe2:	0e 94 6b 31 	call	0x62d6	; 0x62d6 <sep>
    PrintFree();
   1bbe6:	0e 94 20 27 	call	0x4e40	; 0x4e40 <PrintFree>

    sep();
   1bbea:	0e 94 6b 31 	call	0x62d6	; 0x62d6 <sep>
    delayms(200); ///@brief Power up delay
   1bbee:	68 ec       	ldi	r22, 0xC8	; 200
   1bbf0:	70 e0       	ldi	r23, 0x00	; 0
   1bbf2:	80 e0       	ldi	r24, 0x00	; 0
   1bbf4:	90 e0       	ldi	r25, 0x00	; 0
   1bbf6:	0e 94 5f 28 	call	0x50be	; 0x50be <delayms>


    ///@ initialize SPI bus 
    printf("initializing SPI bus\n");
   1bbfa:	8e e9       	ldi	r24, 0x9E	; 158
   1bbfc:	92 e4       	ldi	r25, 0x42	; 66
   1bbfe:	a0 e0       	ldi	r26, 0x00	; 0
   1bc00:	ed b7       	in	r30, 0x3d	; 61
   1bc02:	fe b7       	in	r31, 0x3e	; 62
   1bc04:	81 83       	std	Z+1, r24	; 0x01
   1bc06:	92 83       	std	Z+2, r25	; 0x02
   1bc08:	a3 83       	std	Z+3, r26	; 0x03
   1bc0a:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    spi_init(MMC_SLOW,GPIO_B3);
   1bc0e:	4b e0       	ldi	r20, 0x0B	; 11
   1bc10:	50 e0       	ldi	r21, 0x00	; 0
   1bc12:	60 e2       	ldi	r22, 0x20	; 32
   1bc14:	71 ea       	ldi	r23, 0xA1	; 161
   1bc16:	87 e0       	ldi	r24, 0x07	; 7
   1bc18:	90 e0       	ldi	r25, 0x00	; 0
   1bc1a:	0e 94 90 26 	call	0x4d20	; 0x4d20 <spi_init>

    ///@ initialize I2C bus 
    printf("initializing I2C bus\n");
   1bc1e:	88 e8       	ldi	r24, 0x88	; 136
   1bc20:	92 e4       	ldi	r25, 0x42	; 66
   1bc22:	a0 e0       	ldi	r26, 0x00	; 0
   1bc24:	ed b7       	in	r30, 0x3d	; 61
   1bc26:	fe b7       	in	r31, 0x3e	; 62
   1bc28:	81 83       	std	Z+1, r24	; 0x01
   1bc2a:	92 83       	std	Z+2, r25	; 0x02
   1bc2c:	a3 83       	std	Z+3, r26	; 0x03
   1bc2e:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    TWI_Init(TWI_BIT_PRESCALE_4, TWI_BITLENGTH_FROM_FREQ(4, 100000));
   1bc32:	61 e1       	ldi	r22, 0x11	; 17
   1bc34:	81 e0       	ldi	r24, 0x01	; 1
   1bc36:	0e 94 7e 2b 	call	0x56fc	; 0x56fc <TWI_Init>
    sep();
   1bc3a:	0e 94 6b 31 	call	0x62d6	; 0x62d6 <sep>

    printf("initializing RTC\n");
   1bc3e:	86 e7       	ldi	r24, 0x76	; 118
   1bc40:	92 e4       	ldi	r25, 0x42	; 66
   1bc42:	a0 e0       	ldi	r26, 0x00	; 0
   1bc44:	ed b7       	in	r30, 0x3d	; 61
   1bc46:	fe b7       	in	r31, 0x3e	; 62
   1bc48:	81 83       	std	Z+1, r24	; 0x01
   1bc4a:	92 83       	std	Z+2, r25	; 0x02
   1bc4c:	a3 83       	std	Z+3, r26	; 0x03
   1bc4e:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    ///@ initialize clock by RTC if we have it
    clock_clear();
   1bc52:	0e 94 0e 35 	call	0x6a1c	; 0x6a1c <clock_clear>
    printf("Clock cleared\n");
   1bc56:	87 e6       	ldi	r24, 0x67	; 103
   1bc58:	92 e4       	ldi	r25, 0x42	; 66
   1bc5a:	a0 e0       	ldi	r26, 0x00	; 0
   1bc5c:	ed b7       	in	r30, 0x3d	; 61
   1bc5e:	fe b7       	in	r31, 0x3e	; 62
   1bc60:	81 83       	std	Z+1, r24	; 0x01
   1bc62:	92 83       	std	Z+2, r25	; 0x02
   1bc64:	a3 83       	std	Z+3, r26	; 0x03
   1bc66:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    clock_getres(0, (ts_t *) &ts);
   1bc6a:	be 01       	movw	r22, r28
   1bc6c:	64 5f       	subi	r22, 0xF4	; 244
   1bc6e:	7f 4f       	sbci	r23, 0xFF	; 255
   1bc70:	80 e0       	ldi	r24, 0x00	; 0
   1bc72:	90 e0       	ldi	r25, 0x00	; 0
   1bc74:	0e 94 ae 35 	call	0x6b5c	; 0x6b5c <clock_getres>
    printf("SYSTEM_TASK_COUNTER_RES:%ld\n", (uint32_t) ts.tv_nsec);
   1bc78:	88 89       	ldd	r24, Y+16	; 0x10
   1bc7a:	99 89       	ldd	r25, Y+17	; 0x11
   1bc7c:	aa 89       	ldd	r26, Y+18	; 0x12
   1bc7e:	bb 89       	ldd	r27, Y+19	; 0x13
   1bc80:	ed b7       	in	r30, 0x3d	; 61
   1bc82:	fe b7       	in	r31, 0x3e	; 62
   1bc84:	84 83       	std	Z+4, r24	; 0x04
   1bc86:	95 83       	std	Z+5, r25	; 0x05
   1bc88:	a6 83       	std	Z+6, r26	; 0x06
   1bc8a:	b7 83       	std	Z+7, r27	; 0x07
   1bc8c:	8a e4       	ldi	r24, 0x4A	; 74
   1bc8e:	92 e4       	ldi	r25, 0x42	; 66
   1bc90:	a0 e0       	ldi	r26, 0x00	; 0
   1bc92:	81 83       	std	Z+1, r24	; 0x01
   1bc94:	92 83       	std	Z+2, r25	; 0x02
   1bc96:	a3 83       	std	Z+3, r26	; 0x03
   1bc98:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>

	// Timezone offset
    initialize_clock(300);
   1bc9c:	8c e2       	ldi	r24, 0x2C	; 44
   1bc9e:	91 e0       	ldi	r25, 0x01	; 1
   1bca0:	0e 94 89 3c 	call	0x7912	; 0x7912 <initialize_clock>
    display_clock();
   1bca4:	0e 94 00 3d 	call	0x7a00	; 0x7a00 <display_clock>
    sep();
   1bca8:	0e 94 6b 31 	call	0x62d6	; 0x62d6 <sep>

	///@ initialize Optional I2C LCD
#ifdef LCD_SUPPORT
	printf("I2C LCD initialization start\n");
   1bcac:	8c e2       	ldi	r24, 0x2C	; 44
   1bcae:	92 e4       	ldi	r25, 0x42	; 66
   1bcb0:	a0 e0       	ldi	r26, 0x00	; 0
   1bcb2:	ed b7       	in	r30, 0x3d	; 61
   1bcb4:	fe b7       	in	r31, 0x3e	; 62
   1bcb6:	81 83       	std	Z+1, r24	; 0x01
   1bcb8:	92 83       	std	Z+2, r25	; 0x02
   1bcba:	a3 83       	std	Z+3, r26	; 0x03
   1bcbc:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
	if ( LCD_init(LCD_ADDR) )
   1bcc0:	84 ee       	ldi	r24, 0xE4	; 228
   1bcc2:	0e 94 ae 2f 	call	0x5f5c	; 0x5f5c <LCD_init>
   1bcc6:	89 2b       	or	r24, r25
   1bcc8:	b9 f0       	breq	.+46     	; 0x1bcf8 <main+0x244>
	{
		// Display LCD firmware version
		// LCD_command(',');
		// delayms(1000);

		LCD_pos(0,0);
   1bcca:	60 e0       	ldi	r22, 0x00	; 0
   1bccc:	80 e0       	ldi	r24, 0x00	; 0
   1bcce:	0e 94 78 2f 	call	0x5ef0	; 0x5ef0 <LCD_pos>
		lcd_printf("hp85disk V2.0\n");
   1bcd2:	8e ef       	ldi	r24, 0xFE	; 254
   1bcd4:	96 e1       	ldi	r25, 0x16	; 22
   1bcd6:	ed b7       	in	r30, 0x3d	; 61
   1bcd8:	fe b7       	in	r31, 0x3e	; 62
   1bcda:	92 83       	std	Z+2, r25	; 0x02
   1bcdc:	81 83       	std	Z+1, r24	; 0x01
   1bcde:	0e 94 67 30 	call	0x60ce	; 0x60ce <lcd_printf>
		lcd_printf("(C)Mike Gore ");
   1bce2:	8d e0       	ldi	r24, 0x0D	; 13
   1bce4:	97 e1       	ldi	r25, 0x17	; 23
   1bce6:	ed b7       	in	r30, 0x3d	; 61
   1bce8:	fe b7       	in	r31, 0x3e	; 62
   1bcea:	92 83       	std	Z+2, r25	; 0x02
   1bcec:	81 83       	std	Z+1, r24	; 0x01
   1bcee:	0e 94 67 30 	call	0x60ce	; 0x60ce <lcd_printf>
		// SparkFun V1.1 firmware loses the last character when the LCD goes to sleep 

		printf("I2C LCD initialization Done\n");
   1bcf2:	8f e0       	ldi	r24, 0x0F	; 15
   1bcf4:	92 e4       	ldi	r25, 0x42	; 66
   1bcf6:	02 c0       	rjmp	.+4      	; 0x1bcfc <main+0x248>
	}
	else
	{
		printf("I2C LCD is NOT attached!\n");
   1bcf8:	85 ef       	ldi	r24, 0xF5	; 245
   1bcfa:	91 e4       	ldi	r25, 0x41	; 65
   1bcfc:	a0 e0       	ldi	r26, 0x00	; 0
   1bcfe:	ed b7       	in	r30, 0x3d	; 61
   1bd00:	fe b7       	in	r31, 0x3e	; 62
   1bd02:	81 83       	std	Z+1, r24	; 0x01
   1bd04:	92 83       	std	Z+2, r25	; 0x02
   1bd06:	a3 83       	std	Z+3, r26	; 0x03
   1bd08:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
	}
    sep();
   1bd0c:	0e 94 6b 31 	call	0x62d6	; 0x62d6 <sep>
#endif

    ///@ initialize MMC bus
    printf("MMC initializing start\n");
   1bd10:	8d ed       	ldi	r24, 0xDD	; 221
   1bd12:	91 e4       	ldi	r25, 0x41	; 65
   1bd14:	a0 e0       	ldi	r26, 0x00	; 0
   1bd16:	ed b7       	in	r30, 0x3d	; 61
   1bd18:	fe b7       	in	r31, 0x3e	; 62
   1bd1a:	81 83       	std	Z+1, r24	; 0x01
   1bd1c:	92 83       	std	Z+2, r25	; 0x02
   1bd1e:	a3 83       	std	Z+3, r26	; 0x03
   1bd20:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    mmc_init(1);
   1bd24:	81 e0       	ldi	r24, 0x01	; 1
   1bd26:	90 e0       	ldi	r25, 0x00	; 0
   1bd28:	0e 94 a7 6e 	call	0xdd4e	; 0xdd4e <mmc_init>
    printf("MMC initialized\n");
   1bd2c:	8c ec       	ldi	r24, 0xCC	; 204
   1bd2e:	91 e4       	ldi	r25, 0x41	; 65
   1bd30:	a0 e0       	ldi	r26, 0x00	; 0
   1bd32:	ed b7       	in	r30, 0x3d	; 61
   1bd34:	fe b7       	in	r31, 0x3e	; 62
   1bd36:	81 83       	std	Z+1, r24	; 0x01
   1bd38:	92 83       	std	Z+2, r25	; 0x02
   1bd3a:	a3 83       	std	Z+3, r26	; 0x03
   1bd3c:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    sep();
   1bd40:	0e 94 6b 31 	call	0x62d6	; 0x62d6 <sep>

    ///@ initialize bus state as soon as practical
    gpib_bus_init();
   1bd44:	0e 94 fe 84 	call	0x109fc	; 0x109fc <gpib_bus_init>
    printf("GPIB bus initialized\n");
   1bd48:	86 eb       	ldi	r24, 0xB6	; 182
   1bd4a:	91 e4       	ldi	r25, 0x41	; 65
   1bd4c:	a0 e0       	ldi	r26, 0x00	; 0
   1bd4e:	ed b7       	in	r30, 0x3d	; 61
   1bd50:	fe b7       	in	r31, 0x3e	; 62
   1bd52:	81 83       	std	Z+1, r24	; 0x01
   1bd54:	92 83       	std	Z+2, r25	; 0x02
   1bd56:	a3 83       	std	Z+3, r26	; 0x03
   1bd58:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>

    ///@ initialize Printer Capture
    printer_init();
   1bd5c:	0e 94 4c ba 	call	0x17498	; 0x17498 <printer_init>
    printf("Printer initialized\n");
   1bd60:	81 ea       	ldi	r24, 0xA1	; 161
   1bd62:	91 e4       	ldi	r25, 0x41	; 65
   1bd64:	a0 e0       	ldi	r26, 0x00	; 0
   1bd66:	ed b7       	in	r30, 0x3d	; 61
   1bd68:	fe b7       	in	r31, 0x3e	; 62
   1bd6a:	81 83       	std	Z+1, r24	; 0x01
   1bd6c:	92 83       	std	Z+2, r25	; 0x02
   1bd6e:	a3 83       	std	Z+3, r26	; 0x03
   1bd70:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>

    ///@ initialize GPIB timer tasks
    printf("GPIB Timer Setup\n");
   1bd74:	8f e8       	ldi	r24, 0x8F	; 143
   1bd76:	91 e4       	ldi	r25, 0x41	; 65
   1bd78:	a0 e0       	ldi	r26, 0x00	; 0
   1bd7a:	ed b7       	in	r30, 0x3d	; 61
   1bd7c:	fe b7       	in	r31, 0x3e	; 62
   1bd7e:	81 83       	std	Z+1, r24	; 0x01
   1bd80:	92 83       	std	Z+2, r25	; 0x02
   1bd82:	a3 83       	std	Z+3, r26	; 0x03
   1bd84:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    gpib_timer_init();
   1bd88:	0e 94 ef 82 	call	0x105de	; 0x105de <gpib_timer_init>
    printf("GPIB Timer initialized\n");
   1bd8c:	87 e7       	ldi	r24, 0x77	; 119
   1bd8e:	91 e4       	ldi	r25, 0x41	; 65
   1bd90:	a0 e0       	ldi	r26, 0x00	; 0
   1bd92:	ed b7       	in	r30, 0x3d	; 61
   1bd94:	fe b7       	in	r31, 0x3e	; 62
   1bd96:	81 83       	std	Z+1, r24	; 0x01
   1bd98:	92 83       	std	Z+2, r25	; 0x02
   1bd9a:	a3 83       	std	Z+3, r26	; 0x03
   1bd9c:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>

    ///@brief Process hp85disk emulator config file
    gpib_file_init();
   1bda0:	0e 94 27 8b 	call	0x1164e	; 0x1164e <gpib_file_init>
    printf("GPIB File init done\n");
   1bda4:	82 e6       	ldi	r24, 0x62	; 98
   1bda6:	91 e4       	ldi	r25, 0x41	; 65
   1bda8:	a0 e0       	ldi	r26, 0x00	; 0
   1bdaa:	ed b7       	in	r30, 0x3d	; 61
   1bdac:	fe b7       	in	r31, 0x3e	; 62
   1bdae:	81 83       	std	Z+1, r24	; 0x01
   1bdb0:	92 83       	std	Z+2, r25	; 0x02
   1bdb2:	a3 83       	std	Z+3, r26	; 0x03
   1bdb4:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>

    ///@brief GPIB talking/listening state variables 
    ///Must be done AFTER gpib_file_init() so we have a valid configuration
    gpib_state_init();
   1bdb8:	0e 94 2b 85 	call	0x10a56	; 0x10a56 <gpib_state_init>
    printf("GPIB State init done\n");
   1bdbc:	8c e4       	ldi	r24, 0x4C	; 76
   1bdbe:	91 e4       	ldi	r25, 0x41	; 65
   1bdc0:	a0 e0       	ldi	r26, 0x00	; 0
   1bdc2:	ed b7       	in	r30, 0x3d	; 61
   1bdc4:	fe b7       	in	r31, 0x3e	; 62
   1bdc6:	81 83       	std	Z+1, r24	; 0x01
   1bdc8:	92 83       	std	Z+2, r25	; 0x02
   1bdca:	a3 83       	std	Z+3, r26	; 0x03
   1bdcc:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>
    sep();
   1bdd0:	0e 94 6b 31 	call	0x62d6	; 0x62d6 <sep>

    ///@brief Display Address Summary
    display_Addresses(0);
   1bdd4:	80 e0       	ldi	r24, 0x00	; 0
   1bdd6:	90 e0       	ldi	r25, 0x00	; 0
   1bdd8:	0e 94 b8 92 	call	0x12570	; 0x12570 <display_Addresses>
    sep();
   1bddc:	0e 94 6b 31 	call	0x62d6	; 0x62d6 <sep>

    ///@brief Display debug level
    sep();
   1bde0:	0e 94 6b 31 	call	0x62d6	; 0x62d6 <sep>
    printf("debuglevel   = %04xH\n",(int)debuglevel);
   1bde4:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1bde8:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   1bdec:	ed b7       	in	r30, 0x3d	; 61
   1bdee:	fe b7       	in	r31, 0x3e	; 62
   1bdf0:	95 83       	std	Z+5, r25	; 0x05
   1bdf2:	84 83       	std	Z+4, r24	; 0x04
   1bdf4:	86 e3       	ldi	r24, 0x36	; 54
   1bdf6:	91 e4       	ldi	r25, 0x41	; 65
   1bdf8:	a0 e0       	ldi	r26, 0x00	; 0
   1bdfa:	81 83       	std	Z+1, r24	; 0x01
   1bdfc:	92 83       	std	Z+2, r25	; 0x02
   1bdfe:	a3 83       	std	Z+3, r26	; 0x03
   1be00:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>

    ///@brief Format any drives that do not yet exist
    format_drives();
   1be04:	0e 94 50 9e 	call	0x13ca0	; 0x13ca0 <format_drives>

#ifdef LCD_SUPPORT
	LCD_pos(0,0);
   1be08:	60 e0       	ldi	r22, 0x00	; 0
   1be0a:	80 e0       	ldi	r24, 0x00	; 0
   1be0c:	0e 94 78 2f 	call	0x5ef0	; 0x5ef0 <LCD_pos>
	lcd_printf("SS80  Drives:%d\n",(int) count_drive_types(SS80_TYPE));
   1be10:	83 e0       	ldi	r24, 0x03	; 3
   1be12:	0e 94 2d 96 	call	0x12c5a	; 0x12c5a <count_drive_types>
   1be16:	ed b7       	in	r30, 0x3d	; 61
   1be18:	fe b7       	in	r31, 0x3e	; 62
   1be1a:	94 83       	std	Z+4, r25	; 0x04
   1be1c:	83 83       	std	Z+3, r24	; 0x03
   1be1e:	8b e1       	ldi	r24, 0x1B	; 27
   1be20:	97 e1       	ldi	r25, 0x17	; 23
   1be22:	92 83       	std	Z+2, r25	; 0x02
   1be24:	81 83       	std	Z+1, r24	; 0x01
   1be26:	0e 94 67 30 	call	0x60ce	; 0x60ce <lcd_printf>
	lcd_printf("AMIGO Drives:%d ",(int) count_drive_types(AMIGO_TYPE));
   1be2a:	81 e0       	ldi	r24, 0x01	; 1
   1be2c:	0e 94 2d 96 	call	0x12c5a	; 0x12c5a <count_drive_types>
   1be30:	ed b7       	in	r30, 0x3d	; 61
   1be32:	fe b7       	in	r31, 0x3e	; 62
   1be34:	94 83       	std	Z+4, r25	; 0x04
   1be36:	83 83       	std	Z+3, r24	; 0x03
   1be38:	8c e2       	ldi	r24, 0x2C	; 44
   1be3a:	97 e1       	ldi	r25, 0x17	; 23
   1be3c:	92 83       	std	Z+2, r25	; 0x02
   1be3e:	81 83       	std	Z+1, r24	; 0x01
   1be40:	0e 94 67 30 	call	0x60ce	; 0x60ce <lcd_printf>
	// lcd_printf("Baud:%ld\n",baud);
	//lcd_printf("Debug: %04xH\n", (int)debuglevel);
#endif

    ///@brief Start main GPIB state machine
    printf("Starting GPIB TASK\n");
   1be44:	82 e2       	ldi	r24, 0x22	; 34
   1be46:	91 e4       	ldi	r25, 0x41	; 65
   1be48:	a0 e0       	ldi	r26, 0x00	; 0
   1be4a:	ed b7       	in	r30, 0x3d	; 61
   1be4c:	fe b7       	in	r31, 0x3e	; 62
   1be4e:	81 83       	std	Z+1, r24	; 0x01
   1be50:	92 83       	std	Z+2, r25	; 0x02
   1be52:	a3 83       	std	Z+3, r26	; 0x03
   1be54:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <printf_P>

    ///@brief Keep the task running - it exits after every user interaction, ie key press
    while (1)
    {
        task(1);
   1be58:	81 e0       	ldi	r24, 0x01	; 1
   1be5a:	22 de       	rcall	.-956    	; 0x1baa0 <task>
   1be5c:	fd cf       	rjmp	.-6      	; 0x1be58 <main+0x3a4>

0001be5e <__mulsi3>:
   1be5e:	db 01       	movw	r26, r22
   1be60:	8f 93       	push	r24
   1be62:	9f 93       	push	r25
   1be64:	8b d0       	rcall	.+278    	; 0x1bf7c <__muluhisi3>
   1be66:	bf 91       	pop	r27
   1be68:	af 91       	pop	r26
   1be6a:	a2 9f       	mul	r26, r18
   1be6c:	80 0d       	add	r24, r0
   1be6e:	91 1d       	adc	r25, r1
   1be70:	a3 9f       	mul	r26, r19
   1be72:	90 0d       	add	r25, r0
   1be74:	b2 9f       	mul	r27, r18
   1be76:	90 0d       	add	r25, r0
   1be78:	11 24       	eor	r1, r1
   1be7a:	08 95       	ret

0001be7c <__udivmodqi4>:
   1be7c:	99 1b       	sub	r25, r25
   1be7e:	79 e0       	ldi	r23, 0x09	; 9
   1be80:	04 c0       	rjmp	.+8      	; 0x1be8a <__udivmodqi4_ep>

0001be82 <__udivmodqi4_loop>:
   1be82:	99 1f       	adc	r25, r25
   1be84:	96 17       	cp	r25, r22
   1be86:	08 f0       	brcs	.+2      	; 0x1be8a <__udivmodqi4_ep>
   1be88:	96 1b       	sub	r25, r22

0001be8a <__udivmodqi4_ep>:
   1be8a:	88 1f       	adc	r24, r24
   1be8c:	7a 95       	dec	r23
   1be8e:	c9 f7       	brne	.-14     	; 0x1be82 <__udivmodqi4_loop>
   1be90:	80 95       	com	r24
   1be92:	08 95       	ret

0001be94 <__udivmodhi4>:
   1be94:	aa 1b       	sub	r26, r26
   1be96:	bb 1b       	sub	r27, r27
   1be98:	51 e1       	ldi	r21, 0x11	; 17
   1be9a:	07 c0       	rjmp	.+14     	; 0x1beaa <__udivmodhi4_ep>

0001be9c <__udivmodhi4_loop>:
   1be9c:	aa 1f       	adc	r26, r26
   1be9e:	bb 1f       	adc	r27, r27
   1bea0:	a6 17       	cp	r26, r22
   1bea2:	b7 07       	cpc	r27, r23
   1bea4:	10 f0       	brcs	.+4      	; 0x1beaa <__udivmodhi4_ep>
   1bea6:	a6 1b       	sub	r26, r22
   1bea8:	b7 0b       	sbc	r27, r23

0001beaa <__udivmodhi4_ep>:
   1beaa:	88 1f       	adc	r24, r24
   1beac:	99 1f       	adc	r25, r25
   1beae:	5a 95       	dec	r21
   1beb0:	a9 f7       	brne	.-22     	; 0x1be9c <__udivmodhi4_loop>
   1beb2:	80 95       	com	r24
   1beb4:	90 95       	com	r25
   1beb6:	bc 01       	movw	r22, r24
   1beb8:	cd 01       	movw	r24, r26
   1beba:	08 95       	ret

0001bebc <__divmodhi4>:
   1bebc:	97 fb       	bst	r25, 7
   1bebe:	07 2e       	mov	r0, r23
   1bec0:	16 f4       	brtc	.+4      	; 0x1bec6 <__divmodhi4+0xa>
   1bec2:	00 94       	com	r0
   1bec4:	06 d0       	rcall	.+12     	; 0x1bed2 <__divmodhi4_neg1>
   1bec6:	77 fd       	sbrc	r23, 7
   1bec8:	08 d0       	rcall	.+16     	; 0x1beda <__divmodhi4_neg2>
   1beca:	e4 df       	rcall	.-56     	; 0x1be94 <__udivmodhi4>
   1becc:	07 fc       	sbrc	r0, 7
   1bece:	05 d0       	rcall	.+10     	; 0x1beda <__divmodhi4_neg2>
   1bed0:	3e f4       	brtc	.+14     	; 0x1bee0 <__divmodhi4_exit>

0001bed2 <__divmodhi4_neg1>:
   1bed2:	90 95       	com	r25
   1bed4:	81 95       	neg	r24
   1bed6:	9f 4f       	sbci	r25, 0xFF	; 255
   1bed8:	08 95       	ret

0001beda <__divmodhi4_neg2>:
   1beda:	70 95       	com	r23
   1bedc:	61 95       	neg	r22
   1bede:	7f 4f       	sbci	r23, 0xFF	; 255

0001bee0 <__divmodhi4_exit>:
   1bee0:	08 95       	ret

0001bee2 <__udivmodsi4>:
   1bee2:	a1 e2       	ldi	r26, 0x21	; 33
   1bee4:	1a 2e       	mov	r1, r26
   1bee6:	aa 1b       	sub	r26, r26
   1bee8:	bb 1b       	sub	r27, r27
   1beea:	fd 01       	movw	r30, r26
   1beec:	0d c0       	rjmp	.+26     	; 0x1bf08 <__udivmodsi4_ep>

0001beee <__udivmodsi4_loop>:
   1beee:	aa 1f       	adc	r26, r26
   1bef0:	bb 1f       	adc	r27, r27
   1bef2:	ee 1f       	adc	r30, r30
   1bef4:	ff 1f       	adc	r31, r31
   1bef6:	a2 17       	cp	r26, r18
   1bef8:	b3 07       	cpc	r27, r19
   1befa:	e4 07       	cpc	r30, r20
   1befc:	f5 07       	cpc	r31, r21
   1befe:	20 f0       	brcs	.+8      	; 0x1bf08 <__udivmodsi4_ep>
   1bf00:	a2 1b       	sub	r26, r18
   1bf02:	b3 0b       	sbc	r27, r19
   1bf04:	e4 0b       	sbc	r30, r20
   1bf06:	f5 0b       	sbc	r31, r21

0001bf08 <__udivmodsi4_ep>:
   1bf08:	66 1f       	adc	r22, r22
   1bf0a:	77 1f       	adc	r23, r23
   1bf0c:	88 1f       	adc	r24, r24
   1bf0e:	99 1f       	adc	r25, r25
   1bf10:	1a 94       	dec	r1
   1bf12:	69 f7       	brne	.-38     	; 0x1beee <__udivmodsi4_loop>
   1bf14:	60 95       	com	r22
   1bf16:	70 95       	com	r23
   1bf18:	80 95       	com	r24
   1bf1a:	90 95       	com	r25
   1bf1c:	9b 01       	movw	r18, r22
   1bf1e:	ac 01       	movw	r20, r24
   1bf20:	bd 01       	movw	r22, r26
   1bf22:	cf 01       	movw	r24, r30
   1bf24:	08 95       	ret

0001bf26 <__divmodsi4>:
   1bf26:	05 2e       	mov	r0, r21
   1bf28:	97 fb       	bst	r25, 7
   1bf2a:	16 f4       	brtc	.+4      	; 0x1bf30 <__divmodsi4+0xa>
   1bf2c:	00 94       	com	r0
   1bf2e:	0f d0       	rcall	.+30     	; 0x1bf4e <__negsi2>
   1bf30:	57 fd       	sbrc	r21, 7
   1bf32:	05 d0       	rcall	.+10     	; 0x1bf3e <__divmodsi4_neg2>
   1bf34:	d6 df       	rcall	.-84     	; 0x1bee2 <__udivmodsi4>
   1bf36:	07 fc       	sbrc	r0, 7
   1bf38:	02 d0       	rcall	.+4      	; 0x1bf3e <__divmodsi4_neg2>
   1bf3a:	46 f4       	brtc	.+16     	; 0x1bf4c <__divmodsi4_exit>
   1bf3c:	08 c0       	rjmp	.+16     	; 0x1bf4e <__negsi2>

0001bf3e <__divmodsi4_neg2>:
   1bf3e:	50 95       	com	r21
   1bf40:	40 95       	com	r20
   1bf42:	30 95       	com	r19
   1bf44:	21 95       	neg	r18
   1bf46:	3f 4f       	sbci	r19, 0xFF	; 255
   1bf48:	4f 4f       	sbci	r20, 0xFF	; 255
   1bf4a:	5f 4f       	sbci	r21, 0xFF	; 255

0001bf4c <__divmodsi4_exit>:
   1bf4c:	08 95       	ret

0001bf4e <__negsi2>:
   1bf4e:	90 95       	com	r25
   1bf50:	80 95       	com	r24
   1bf52:	70 95       	com	r23
   1bf54:	61 95       	neg	r22
   1bf56:	7f 4f       	sbci	r23, 0xFF	; 255
   1bf58:	8f 4f       	sbci	r24, 0xFF	; 255
   1bf5a:	9f 4f       	sbci	r25, 0xFF	; 255
   1bf5c:	08 95       	ret

0001bf5e <__tablejump2__>:
   1bf5e:	ee 0f       	add	r30, r30
   1bf60:	ff 1f       	adc	r31, r31
   1bf62:	00 24       	eor	r0, r0
   1bf64:	00 1c       	adc	r0, r0
   1bf66:	0b be       	out	0x3b, r0	; 59
   1bf68:	07 90       	elpm	r0, Z+
   1bf6a:	f6 91       	elpm	r31, Z
   1bf6c:	e0 2d       	mov	r30, r0
   1bf6e:	09 94       	ijmp

0001bf70 <__usmulhisi3>:
   1bf70:	6f d0       	rcall	.+222    	; 0x1c050 <__umulhisi3>

0001bf72 <__usmulhisi3_tail>:
   1bf72:	b7 ff       	sbrs	r27, 7
   1bf74:	08 95       	ret
   1bf76:	82 1b       	sub	r24, r18
   1bf78:	93 0b       	sbc	r25, r19
   1bf7a:	08 95       	ret

0001bf7c <__muluhisi3>:
   1bf7c:	69 d0       	rcall	.+210    	; 0x1c050 <__umulhisi3>
   1bf7e:	a5 9f       	mul	r26, r21
   1bf80:	90 0d       	add	r25, r0
   1bf82:	b4 9f       	mul	r27, r20
   1bf84:	90 0d       	add	r25, r0
   1bf86:	a4 9f       	mul	r26, r20
   1bf88:	80 0d       	add	r24, r0
   1bf8a:	91 1d       	adc	r25, r1
   1bf8c:	11 24       	eor	r1, r1
   1bf8e:	08 95       	ret

0001bf90 <__mulshisi3>:
   1bf90:	b7 ff       	sbrs	r27, 7
   1bf92:	f4 cf       	rjmp	.-24     	; 0x1bf7c <__muluhisi3>

0001bf94 <__mulohisi3>:
   1bf94:	f3 df       	rcall	.-26     	; 0x1bf7c <__muluhisi3>
   1bf96:	82 1b       	sub	r24, r18
   1bf98:	93 0b       	sbc	r25, r19
   1bf9a:	08 95       	ret

0001bf9c <__negdi2>:
   1bf9c:	60 95       	com	r22
   1bf9e:	70 95       	com	r23
   1bfa0:	80 95       	com	r24
   1bfa2:	90 95       	com	r25
   1bfa4:	30 95       	com	r19
   1bfa6:	40 95       	com	r20
   1bfa8:	50 95       	com	r21
   1bfaa:	21 95       	neg	r18
   1bfac:	3f 4f       	sbci	r19, 0xFF	; 255
   1bfae:	4f 4f       	sbci	r20, 0xFF	; 255
   1bfb0:	5f 4f       	sbci	r21, 0xFF	; 255
   1bfb2:	6f 4f       	sbci	r22, 0xFF	; 255
   1bfb4:	7f 4f       	sbci	r23, 0xFF	; 255
   1bfb6:	8f 4f       	sbci	r24, 0xFF	; 255
   1bfb8:	9f 4f       	sbci	r25, 0xFF	; 255
   1bfba:	08 95       	ret

0001bfbc <__prologue_saves__>:
   1bfbc:	2f 92       	push	r2
   1bfbe:	3f 92       	push	r3
   1bfc0:	4f 92       	push	r4
   1bfc2:	5f 92       	push	r5
   1bfc4:	6f 92       	push	r6
   1bfc6:	7f 92       	push	r7
   1bfc8:	8f 92       	push	r8
   1bfca:	9f 92       	push	r9
   1bfcc:	af 92       	push	r10
   1bfce:	bf 92       	push	r11
   1bfd0:	cf 92       	push	r12
   1bfd2:	df 92       	push	r13
   1bfd4:	ef 92       	push	r14
   1bfd6:	ff 92       	push	r15
   1bfd8:	0f 93       	push	r16
   1bfda:	1f 93       	push	r17
   1bfdc:	cf 93       	push	r28
   1bfde:	df 93       	push	r29
   1bfe0:	cd b7       	in	r28, 0x3d	; 61
   1bfe2:	de b7       	in	r29, 0x3e	; 62
   1bfe4:	ca 1b       	sub	r28, r26
   1bfe6:	db 0b       	sbc	r29, r27
   1bfe8:	0f b6       	in	r0, 0x3f	; 63
   1bfea:	f8 94       	cli
   1bfec:	de bf       	out	0x3e, r29	; 62
   1bfee:	0f be       	out	0x3f, r0	; 63
   1bff0:	cd bf       	out	0x3d, r28	; 61
   1bff2:	09 94       	ijmp

0001bff4 <__epilogue_restores__>:
   1bff4:	2a 88       	ldd	r2, Y+18	; 0x12
   1bff6:	39 88       	ldd	r3, Y+17	; 0x11
   1bff8:	48 88       	ldd	r4, Y+16	; 0x10
   1bffa:	5f 84       	ldd	r5, Y+15	; 0x0f
   1bffc:	6e 84       	ldd	r6, Y+14	; 0x0e
   1bffe:	7d 84       	ldd	r7, Y+13	; 0x0d
   1c000:	8c 84       	ldd	r8, Y+12	; 0x0c
   1c002:	9b 84       	ldd	r9, Y+11	; 0x0b
   1c004:	aa 84       	ldd	r10, Y+10	; 0x0a
   1c006:	b9 84       	ldd	r11, Y+9	; 0x09
   1c008:	c8 84       	ldd	r12, Y+8	; 0x08
   1c00a:	df 80       	ldd	r13, Y+7	; 0x07
   1c00c:	ee 80       	ldd	r14, Y+6	; 0x06
   1c00e:	fd 80       	ldd	r15, Y+5	; 0x05
   1c010:	0c 81       	ldd	r16, Y+4	; 0x04
   1c012:	1b 81       	ldd	r17, Y+3	; 0x03
   1c014:	aa 81       	ldd	r26, Y+2	; 0x02
   1c016:	b9 81       	ldd	r27, Y+1	; 0x01
   1c018:	ce 0f       	add	r28, r30
   1c01a:	d1 1d       	adc	r29, r1
   1c01c:	0f b6       	in	r0, 0x3f	; 63
   1c01e:	f8 94       	cli
   1c020:	de bf       	out	0x3e, r29	; 62
   1c022:	0f be       	out	0x3f, r0	; 63
   1c024:	cd bf       	out	0x3d, r28	; 61
   1c026:	ed 01       	movw	r28, r26
   1c028:	08 95       	ret

0001c02a <__xload_1>:
   1c02a:	57 fd       	sbrc	r21, 7
   1c02c:	03 c0       	rjmp	.+6      	; 0x1c034 <__xload_1+0xa>
   1c02e:	5b bf       	out	0x3b, r21	; 59
   1c030:	67 91       	elpm	r22, Z+
   1c032:	08 95       	ret
   1c034:	60 81       	ld	r22, Z
   1c036:	08 95       	ret

0001c038 <__cmpdi2_s8>:
   1c038:	00 24       	eor	r0, r0
   1c03a:	a7 fd       	sbrc	r26, 7
   1c03c:	00 94       	com	r0
   1c03e:	2a 17       	cp	r18, r26
   1c040:	30 05       	cpc	r19, r0
   1c042:	40 05       	cpc	r20, r0
   1c044:	50 05       	cpc	r21, r0
   1c046:	60 05       	cpc	r22, r0
   1c048:	70 05       	cpc	r23, r0
   1c04a:	80 05       	cpc	r24, r0
   1c04c:	90 05       	cpc	r25, r0
   1c04e:	08 95       	ret

0001c050 <__umulhisi3>:
   1c050:	a2 9f       	mul	r26, r18
   1c052:	b0 01       	movw	r22, r0
   1c054:	b3 9f       	mul	r27, r19
   1c056:	c0 01       	movw	r24, r0
   1c058:	a3 9f       	mul	r26, r19
   1c05a:	70 0d       	add	r23, r0
   1c05c:	81 1d       	adc	r24, r1
   1c05e:	11 24       	eor	r1, r1
   1c060:	91 1d       	adc	r25, r1
   1c062:	b2 9f       	mul	r27, r18
   1c064:	70 0d       	add	r23, r0
   1c066:	81 1d       	adc	r24, r1
   1c068:	11 24       	eor	r1, r1
   1c06a:	91 1d       	adc	r25, r1
   1c06c:	08 95       	ret

0001c06e <__subsf3>:
   1c06e:	50 58       	subi	r21, 0x80	; 128

0001c070 <__addsf3>:
   1c070:	bb 27       	eor	r27, r27
   1c072:	aa 27       	eor	r26, r26
   1c074:	0e d0       	rcall	.+28     	; 0x1c092 <__addsf3x>
   1c076:	75 c1       	rjmp	.+746    	; 0x1c362 <__fp_round>
   1c078:	66 d1       	rcall	.+716    	; 0x1c346 <__fp_pscA>
   1c07a:	30 f0       	brcs	.+12     	; 0x1c088 <__addsf3+0x18>
   1c07c:	6b d1       	rcall	.+726    	; 0x1c354 <__fp_pscB>
   1c07e:	20 f0       	brcs	.+8      	; 0x1c088 <__addsf3+0x18>
   1c080:	31 f4       	brne	.+12     	; 0x1c08e <__addsf3+0x1e>
   1c082:	9f 3f       	cpi	r25, 0xFF	; 255
   1c084:	11 f4       	brne	.+4      	; 0x1c08a <__addsf3+0x1a>
   1c086:	1e f4       	brtc	.+6      	; 0x1c08e <__addsf3+0x1e>
   1c088:	5b c1       	rjmp	.+694    	; 0x1c340 <__fp_nan>
   1c08a:	0e f4       	brtc	.+2      	; 0x1c08e <__addsf3+0x1e>
   1c08c:	e0 95       	com	r30
   1c08e:	e7 fb       	bst	r30, 7
   1c090:	51 c1       	rjmp	.+674    	; 0x1c334 <__fp_inf>

0001c092 <__addsf3x>:
   1c092:	e9 2f       	mov	r30, r25
   1c094:	77 d1       	rcall	.+750    	; 0x1c384 <__fp_split3>
   1c096:	80 f3       	brcs	.-32     	; 0x1c078 <__addsf3+0x8>
   1c098:	ba 17       	cp	r27, r26
   1c09a:	62 07       	cpc	r22, r18
   1c09c:	73 07       	cpc	r23, r19
   1c09e:	84 07       	cpc	r24, r20
   1c0a0:	95 07       	cpc	r25, r21
   1c0a2:	18 f0       	brcs	.+6      	; 0x1c0aa <__addsf3x+0x18>
   1c0a4:	71 f4       	brne	.+28     	; 0x1c0c2 <__addsf3x+0x30>
   1c0a6:	9e f5       	brtc	.+102    	; 0x1c10e <__addsf3x+0x7c>
   1c0a8:	8f c1       	rjmp	.+798    	; 0x1c3c8 <__fp_zero>
   1c0aa:	0e f4       	brtc	.+2      	; 0x1c0ae <__addsf3x+0x1c>
   1c0ac:	e0 95       	com	r30
   1c0ae:	0b 2e       	mov	r0, r27
   1c0b0:	ba 2f       	mov	r27, r26
   1c0b2:	a0 2d       	mov	r26, r0
   1c0b4:	0b 01       	movw	r0, r22
   1c0b6:	b9 01       	movw	r22, r18
   1c0b8:	90 01       	movw	r18, r0
   1c0ba:	0c 01       	movw	r0, r24
   1c0bc:	ca 01       	movw	r24, r20
   1c0be:	a0 01       	movw	r20, r0
   1c0c0:	11 24       	eor	r1, r1
   1c0c2:	ff 27       	eor	r31, r31
   1c0c4:	59 1b       	sub	r21, r25
   1c0c6:	99 f0       	breq	.+38     	; 0x1c0ee <__addsf3x+0x5c>
   1c0c8:	59 3f       	cpi	r21, 0xF9	; 249
   1c0ca:	50 f4       	brcc	.+20     	; 0x1c0e0 <__addsf3x+0x4e>
   1c0cc:	50 3e       	cpi	r21, 0xE0	; 224
   1c0ce:	68 f1       	brcs	.+90     	; 0x1c12a <__addsf3x+0x98>
   1c0d0:	1a 16       	cp	r1, r26
   1c0d2:	f0 40       	sbci	r31, 0x00	; 0
   1c0d4:	a2 2f       	mov	r26, r18
   1c0d6:	23 2f       	mov	r18, r19
   1c0d8:	34 2f       	mov	r19, r20
   1c0da:	44 27       	eor	r20, r20
   1c0dc:	58 5f       	subi	r21, 0xF8	; 248
   1c0de:	f3 cf       	rjmp	.-26     	; 0x1c0c6 <__addsf3x+0x34>
   1c0e0:	46 95       	lsr	r20
   1c0e2:	37 95       	ror	r19
   1c0e4:	27 95       	ror	r18
   1c0e6:	a7 95       	ror	r26
   1c0e8:	f0 40       	sbci	r31, 0x00	; 0
   1c0ea:	53 95       	inc	r21
   1c0ec:	c9 f7       	brne	.-14     	; 0x1c0e0 <__addsf3x+0x4e>
   1c0ee:	7e f4       	brtc	.+30     	; 0x1c10e <__addsf3x+0x7c>
   1c0f0:	1f 16       	cp	r1, r31
   1c0f2:	ba 0b       	sbc	r27, r26
   1c0f4:	62 0b       	sbc	r22, r18
   1c0f6:	73 0b       	sbc	r23, r19
   1c0f8:	84 0b       	sbc	r24, r20
   1c0fa:	ba f0       	brmi	.+46     	; 0x1c12a <__addsf3x+0x98>
   1c0fc:	91 50       	subi	r25, 0x01	; 1
   1c0fe:	a1 f0       	breq	.+40     	; 0x1c128 <__addsf3x+0x96>
   1c100:	ff 0f       	add	r31, r31
   1c102:	bb 1f       	adc	r27, r27
   1c104:	66 1f       	adc	r22, r22
   1c106:	77 1f       	adc	r23, r23
   1c108:	88 1f       	adc	r24, r24
   1c10a:	c2 f7       	brpl	.-16     	; 0x1c0fc <__addsf3x+0x6a>
   1c10c:	0e c0       	rjmp	.+28     	; 0x1c12a <__addsf3x+0x98>
   1c10e:	ba 0f       	add	r27, r26
   1c110:	62 1f       	adc	r22, r18
   1c112:	73 1f       	adc	r23, r19
   1c114:	84 1f       	adc	r24, r20
   1c116:	48 f4       	brcc	.+18     	; 0x1c12a <__addsf3x+0x98>
   1c118:	87 95       	ror	r24
   1c11a:	77 95       	ror	r23
   1c11c:	67 95       	ror	r22
   1c11e:	b7 95       	ror	r27
   1c120:	f7 95       	ror	r31
   1c122:	9e 3f       	cpi	r25, 0xFE	; 254
   1c124:	08 f0       	brcs	.+2      	; 0x1c128 <__addsf3x+0x96>
   1c126:	b3 cf       	rjmp	.-154    	; 0x1c08e <__addsf3+0x1e>
   1c128:	93 95       	inc	r25
   1c12a:	88 0f       	add	r24, r24
   1c12c:	08 f0       	brcs	.+2      	; 0x1c130 <__addsf3x+0x9e>
   1c12e:	99 27       	eor	r25, r25
   1c130:	ee 0f       	add	r30, r30
   1c132:	97 95       	ror	r25
   1c134:	87 95       	ror	r24
   1c136:	08 95       	ret

0001c138 <__cmpsf2>:
   1c138:	d9 d0       	rcall	.+434    	; 0x1c2ec <__fp_cmp>
   1c13a:	08 f4       	brcc	.+2      	; 0x1c13e <__cmpsf2+0x6>
   1c13c:	81 e0       	ldi	r24, 0x01	; 1
   1c13e:	08 95       	ret

0001c140 <__divsf3>:
   1c140:	0c d0       	rcall	.+24     	; 0x1c15a <__divsf3x>
   1c142:	0f c1       	rjmp	.+542    	; 0x1c362 <__fp_round>
   1c144:	07 d1       	rcall	.+526    	; 0x1c354 <__fp_pscB>
   1c146:	40 f0       	brcs	.+16     	; 0x1c158 <__divsf3+0x18>
   1c148:	fe d0       	rcall	.+508    	; 0x1c346 <__fp_pscA>
   1c14a:	30 f0       	brcs	.+12     	; 0x1c158 <__divsf3+0x18>
   1c14c:	21 f4       	brne	.+8      	; 0x1c156 <__divsf3+0x16>
   1c14e:	5f 3f       	cpi	r21, 0xFF	; 255
   1c150:	19 f0       	breq	.+6      	; 0x1c158 <__divsf3+0x18>
   1c152:	f0 c0       	rjmp	.+480    	; 0x1c334 <__fp_inf>
   1c154:	51 11       	cpse	r21, r1
   1c156:	39 c1       	rjmp	.+626    	; 0x1c3ca <__fp_szero>
   1c158:	f3 c0       	rjmp	.+486    	; 0x1c340 <__fp_nan>

0001c15a <__divsf3x>:
   1c15a:	14 d1       	rcall	.+552    	; 0x1c384 <__fp_split3>
   1c15c:	98 f3       	brcs	.-26     	; 0x1c144 <__divsf3+0x4>

0001c15e <__divsf3_pse>:
   1c15e:	99 23       	and	r25, r25
   1c160:	c9 f3       	breq	.-14     	; 0x1c154 <__divsf3+0x14>
   1c162:	55 23       	and	r21, r21
   1c164:	b1 f3       	breq	.-20     	; 0x1c152 <__divsf3+0x12>
   1c166:	95 1b       	sub	r25, r21
   1c168:	55 0b       	sbc	r21, r21
   1c16a:	bb 27       	eor	r27, r27
   1c16c:	aa 27       	eor	r26, r26
   1c16e:	62 17       	cp	r22, r18
   1c170:	73 07       	cpc	r23, r19
   1c172:	84 07       	cpc	r24, r20
   1c174:	38 f0       	brcs	.+14     	; 0x1c184 <__divsf3_pse+0x26>
   1c176:	9f 5f       	subi	r25, 0xFF	; 255
   1c178:	5f 4f       	sbci	r21, 0xFF	; 255
   1c17a:	22 0f       	add	r18, r18
   1c17c:	33 1f       	adc	r19, r19
   1c17e:	44 1f       	adc	r20, r20
   1c180:	aa 1f       	adc	r26, r26
   1c182:	a9 f3       	breq	.-22     	; 0x1c16e <__divsf3_pse+0x10>
   1c184:	33 d0       	rcall	.+102    	; 0x1c1ec <__divsf3_pse+0x8e>
   1c186:	0e 2e       	mov	r0, r30
   1c188:	3a f0       	brmi	.+14     	; 0x1c198 <__divsf3_pse+0x3a>
   1c18a:	e0 e8       	ldi	r30, 0x80	; 128
   1c18c:	30 d0       	rcall	.+96     	; 0x1c1ee <__divsf3_pse+0x90>
   1c18e:	91 50       	subi	r25, 0x01	; 1
   1c190:	50 40       	sbci	r21, 0x00	; 0
   1c192:	e6 95       	lsr	r30
   1c194:	00 1c       	adc	r0, r0
   1c196:	ca f7       	brpl	.-14     	; 0x1c18a <__divsf3_pse+0x2c>
   1c198:	29 d0       	rcall	.+82     	; 0x1c1ec <__divsf3_pse+0x8e>
   1c19a:	fe 2f       	mov	r31, r30
   1c19c:	27 d0       	rcall	.+78     	; 0x1c1ec <__divsf3_pse+0x8e>
   1c19e:	66 0f       	add	r22, r22
   1c1a0:	77 1f       	adc	r23, r23
   1c1a2:	88 1f       	adc	r24, r24
   1c1a4:	bb 1f       	adc	r27, r27
   1c1a6:	26 17       	cp	r18, r22
   1c1a8:	37 07       	cpc	r19, r23
   1c1aa:	48 07       	cpc	r20, r24
   1c1ac:	ab 07       	cpc	r26, r27
   1c1ae:	b0 e8       	ldi	r27, 0x80	; 128
   1c1b0:	09 f0       	breq	.+2      	; 0x1c1b4 <__divsf3_pse+0x56>
   1c1b2:	bb 0b       	sbc	r27, r27
   1c1b4:	80 2d       	mov	r24, r0
   1c1b6:	bf 01       	movw	r22, r30
   1c1b8:	ff 27       	eor	r31, r31
   1c1ba:	93 58       	subi	r25, 0x83	; 131
   1c1bc:	5f 4f       	sbci	r21, 0xFF	; 255
   1c1be:	2a f0       	brmi	.+10     	; 0x1c1ca <__divsf3_pse+0x6c>
   1c1c0:	9e 3f       	cpi	r25, 0xFE	; 254
   1c1c2:	51 05       	cpc	r21, r1
   1c1c4:	68 f0       	brcs	.+26     	; 0x1c1e0 <__divsf3_pse+0x82>
   1c1c6:	b6 c0       	rjmp	.+364    	; 0x1c334 <__fp_inf>
   1c1c8:	00 c1       	rjmp	.+512    	; 0x1c3ca <__fp_szero>
   1c1ca:	5f 3f       	cpi	r21, 0xFF	; 255
   1c1cc:	ec f3       	brlt	.-6      	; 0x1c1c8 <__divsf3_pse+0x6a>
   1c1ce:	98 3e       	cpi	r25, 0xE8	; 232
   1c1d0:	dc f3       	brlt	.-10     	; 0x1c1c8 <__divsf3_pse+0x6a>
   1c1d2:	86 95       	lsr	r24
   1c1d4:	77 95       	ror	r23
   1c1d6:	67 95       	ror	r22
   1c1d8:	b7 95       	ror	r27
   1c1da:	f7 95       	ror	r31
   1c1dc:	9f 5f       	subi	r25, 0xFF	; 255
   1c1de:	c9 f7       	brne	.-14     	; 0x1c1d2 <__divsf3_pse+0x74>
   1c1e0:	88 0f       	add	r24, r24
   1c1e2:	91 1d       	adc	r25, r1
   1c1e4:	96 95       	lsr	r25
   1c1e6:	87 95       	ror	r24
   1c1e8:	97 f9       	bld	r25, 7
   1c1ea:	08 95       	ret
   1c1ec:	e1 e0       	ldi	r30, 0x01	; 1
   1c1ee:	66 0f       	add	r22, r22
   1c1f0:	77 1f       	adc	r23, r23
   1c1f2:	88 1f       	adc	r24, r24
   1c1f4:	bb 1f       	adc	r27, r27
   1c1f6:	62 17       	cp	r22, r18
   1c1f8:	73 07       	cpc	r23, r19
   1c1fa:	84 07       	cpc	r24, r20
   1c1fc:	ba 07       	cpc	r27, r26
   1c1fe:	20 f0       	brcs	.+8      	; 0x1c208 <__divsf3_pse+0xaa>
   1c200:	62 1b       	sub	r22, r18
   1c202:	73 0b       	sbc	r23, r19
   1c204:	84 0b       	sbc	r24, r20
   1c206:	ba 0b       	sbc	r27, r26
   1c208:	ee 1f       	adc	r30, r30
   1c20a:	88 f7       	brcc	.-30     	; 0x1c1ee <__divsf3_pse+0x90>
   1c20c:	e0 95       	com	r30
   1c20e:	08 95       	ret

0001c210 <__fixsfsi>:
   1c210:	04 d0       	rcall	.+8      	; 0x1c21a <__fixunssfsi>
   1c212:	68 94       	set
   1c214:	b1 11       	cpse	r27, r1
   1c216:	d9 c0       	rjmp	.+434    	; 0x1c3ca <__fp_szero>
   1c218:	08 95       	ret

0001c21a <__fixunssfsi>:
   1c21a:	bc d0       	rcall	.+376    	; 0x1c394 <__fp_splitA>
   1c21c:	88 f0       	brcs	.+34     	; 0x1c240 <__fixunssfsi+0x26>
   1c21e:	9f 57       	subi	r25, 0x7F	; 127
   1c220:	90 f0       	brcs	.+36     	; 0x1c246 <__fixunssfsi+0x2c>
   1c222:	b9 2f       	mov	r27, r25
   1c224:	99 27       	eor	r25, r25
   1c226:	b7 51       	subi	r27, 0x17	; 23
   1c228:	a0 f0       	brcs	.+40     	; 0x1c252 <__fixunssfsi+0x38>
   1c22a:	d1 f0       	breq	.+52     	; 0x1c260 <__fixunssfsi+0x46>
   1c22c:	66 0f       	add	r22, r22
   1c22e:	77 1f       	adc	r23, r23
   1c230:	88 1f       	adc	r24, r24
   1c232:	99 1f       	adc	r25, r25
   1c234:	1a f0       	brmi	.+6      	; 0x1c23c <__fixunssfsi+0x22>
   1c236:	ba 95       	dec	r27
   1c238:	c9 f7       	brne	.-14     	; 0x1c22c <__fixunssfsi+0x12>
   1c23a:	12 c0       	rjmp	.+36     	; 0x1c260 <__fixunssfsi+0x46>
   1c23c:	b1 30       	cpi	r27, 0x01	; 1
   1c23e:	81 f0       	breq	.+32     	; 0x1c260 <__fixunssfsi+0x46>
   1c240:	c3 d0       	rcall	.+390    	; 0x1c3c8 <__fp_zero>
   1c242:	b1 e0       	ldi	r27, 0x01	; 1
   1c244:	08 95       	ret
   1c246:	c0 c0       	rjmp	.+384    	; 0x1c3c8 <__fp_zero>
   1c248:	67 2f       	mov	r22, r23
   1c24a:	78 2f       	mov	r23, r24
   1c24c:	88 27       	eor	r24, r24
   1c24e:	b8 5f       	subi	r27, 0xF8	; 248
   1c250:	39 f0       	breq	.+14     	; 0x1c260 <__fixunssfsi+0x46>
   1c252:	b9 3f       	cpi	r27, 0xF9	; 249
   1c254:	cc f3       	brlt	.-14     	; 0x1c248 <__fixunssfsi+0x2e>
   1c256:	86 95       	lsr	r24
   1c258:	77 95       	ror	r23
   1c25a:	67 95       	ror	r22
   1c25c:	b3 95       	inc	r27
   1c25e:	d9 f7       	brne	.-10     	; 0x1c256 <__fixunssfsi+0x3c>
   1c260:	3e f4       	brtc	.+14     	; 0x1c270 <__fixunssfsi+0x56>
   1c262:	90 95       	com	r25
   1c264:	80 95       	com	r24
   1c266:	70 95       	com	r23
   1c268:	61 95       	neg	r22
   1c26a:	7f 4f       	sbci	r23, 0xFF	; 255
   1c26c:	8f 4f       	sbci	r24, 0xFF	; 255
   1c26e:	9f 4f       	sbci	r25, 0xFF	; 255
   1c270:	08 95       	ret

0001c272 <__floatunsisf>:
   1c272:	e8 94       	clt
   1c274:	09 c0       	rjmp	.+18     	; 0x1c288 <__floatsisf+0x12>

0001c276 <__floatsisf>:
   1c276:	97 fb       	bst	r25, 7
   1c278:	3e f4       	brtc	.+14     	; 0x1c288 <__floatsisf+0x12>
   1c27a:	90 95       	com	r25
   1c27c:	80 95       	com	r24
   1c27e:	70 95       	com	r23
   1c280:	61 95       	neg	r22
   1c282:	7f 4f       	sbci	r23, 0xFF	; 255
   1c284:	8f 4f       	sbci	r24, 0xFF	; 255
   1c286:	9f 4f       	sbci	r25, 0xFF	; 255
   1c288:	99 23       	and	r25, r25
   1c28a:	a9 f0       	breq	.+42     	; 0x1c2b6 <__floatsisf+0x40>
   1c28c:	f9 2f       	mov	r31, r25
   1c28e:	96 e9       	ldi	r25, 0x96	; 150
   1c290:	bb 27       	eor	r27, r27
   1c292:	93 95       	inc	r25
   1c294:	f6 95       	lsr	r31
   1c296:	87 95       	ror	r24
   1c298:	77 95       	ror	r23
   1c29a:	67 95       	ror	r22
   1c29c:	b7 95       	ror	r27
   1c29e:	f1 11       	cpse	r31, r1
   1c2a0:	f8 cf       	rjmp	.-16     	; 0x1c292 <__floatsisf+0x1c>
   1c2a2:	fa f4       	brpl	.+62     	; 0x1c2e2 <__floatsisf+0x6c>
   1c2a4:	bb 0f       	add	r27, r27
   1c2a6:	11 f4       	brne	.+4      	; 0x1c2ac <__floatsisf+0x36>
   1c2a8:	60 ff       	sbrs	r22, 0
   1c2aa:	1b c0       	rjmp	.+54     	; 0x1c2e2 <__floatsisf+0x6c>
   1c2ac:	6f 5f       	subi	r22, 0xFF	; 255
   1c2ae:	7f 4f       	sbci	r23, 0xFF	; 255
   1c2b0:	8f 4f       	sbci	r24, 0xFF	; 255
   1c2b2:	9f 4f       	sbci	r25, 0xFF	; 255
   1c2b4:	16 c0       	rjmp	.+44     	; 0x1c2e2 <__floatsisf+0x6c>
   1c2b6:	88 23       	and	r24, r24
   1c2b8:	11 f0       	breq	.+4      	; 0x1c2be <__floatsisf+0x48>
   1c2ba:	96 e9       	ldi	r25, 0x96	; 150
   1c2bc:	11 c0       	rjmp	.+34     	; 0x1c2e0 <__floatsisf+0x6a>
   1c2be:	77 23       	and	r23, r23
   1c2c0:	21 f0       	breq	.+8      	; 0x1c2ca <__floatsisf+0x54>
   1c2c2:	9e e8       	ldi	r25, 0x8E	; 142
   1c2c4:	87 2f       	mov	r24, r23
   1c2c6:	76 2f       	mov	r23, r22
   1c2c8:	05 c0       	rjmp	.+10     	; 0x1c2d4 <__floatsisf+0x5e>
   1c2ca:	66 23       	and	r22, r22
   1c2cc:	71 f0       	breq	.+28     	; 0x1c2ea <__floatsisf+0x74>
   1c2ce:	96 e8       	ldi	r25, 0x86	; 134
   1c2d0:	86 2f       	mov	r24, r22
   1c2d2:	70 e0       	ldi	r23, 0x00	; 0
   1c2d4:	60 e0       	ldi	r22, 0x00	; 0
   1c2d6:	2a f0       	brmi	.+10     	; 0x1c2e2 <__floatsisf+0x6c>
   1c2d8:	9a 95       	dec	r25
   1c2da:	66 0f       	add	r22, r22
   1c2dc:	77 1f       	adc	r23, r23
   1c2de:	88 1f       	adc	r24, r24
   1c2e0:	da f7       	brpl	.-10     	; 0x1c2d8 <__floatsisf+0x62>
   1c2e2:	88 0f       	add	r24, r24
   1c2e4:	96 95       	lsr	r25
   1c2e6:	87 95       	ror	r24
   1c2e8:	97 f9       	bld	r25, 7
   1c2ea:	08 95       	ret

0001c2ec <__fp_cmp>:
   1c2ec:	99 0f       	add	r25, r25
   1c2ee:	00 08       	sbc	r0, r0
   1c2f0:	55 0f       	add	r21, r21
   1c2f2:	aa 0b       	sbc	r26, r26
   1c2f4:	e0 e8       	ldi	r30, 0x80	; 128
   1c2f6:	fe ef       	ldi	r31, 0xFE	; 254
   1c2f8:	16 16       	cp	r1, r22
   1c2fa:	17 06       	cpc	r1, r23
   1c2fc:	e8 07       	cpc	r30, r24
   1c2fe:	f9 07       	cpc	r31, r25
   1c300:	c0 f0       	brcs	.+48     	; 0x1c332 <__fp_cmp+0x46>
   1c302:	12 16       	cp	r1, r18
   1c304:	13 06       	cpc	r1, r19
   1c306:	e4 07       	cpc	r30, r20
   1c308:	f5 07       	cpc	r31, r21
   1c30a:	98 f0       	brcs	.+38     	; 0x1c332 <__fp_cmp+0x46>
   1c30c:	62 1b       	sub	r22, r18
   1c30e:	73 0b       	sbc	r23, r19
   1c310:	84 0b       	sbc	r24, r20
   1c312:	95 0b       	sbc	r25, r21
   1c314:	39 f4       	brne	.+14     	; 0x1c324 <__fp_cmp+0x38>
   1c316:	0a 26       	eor	r0, r26
   1c318:	61 f0       	breq	.+24     	; 0x1c332 <__fp_cmp+0x46>
   1c31a:	23 2b       	or	r18, r19
   1c31c:	24 2b       	or	r18, r20
   1c31e:	25 2b       	or	r18, r21
   1c320:	21 f4       	brne	.+8      	; 0x1c32a <__fp_cmp+0x3e>
   1c322:	08 95       	ret
   1c324:	0a 26       	eor	r0, r26
   1c326:	09 f4       	brne	.+2      	; 0x1c32a <__fp_cmp+0x3e>
   1c328:	a1 40       	sbci	r26, 0x01	; 1
   1c32a:	a6 95       	lsr	r26
   1c32c:	8f ef       	ldi	r24, 0xFF	; 255
   1c32e:	81 1d       	adc	r24, r1
   1c330:	81 1d       	adc	r24, r1
   1c332:	08 95       	ret

0001c334 <__fp_inf>:
   1c334:	97 f9       	bld	r25, 7
   1c336:	9f 67       	ori	r25, 0x7F	; 127
   1c338:	80 e8       	ldi	r24, 0x80	; 128
   1c33a:	70 e0       	ldi	r23, 0x00	; 0
   1c33c:	60 e0       	ldi	r22, 0x00	; 0
   1c33e:	08 95       	ret

0001c340 <__fp_nan>:
   1c340:	9f ef       	ldi	r25, 0xFF	; 255
   1c342:	80 ec       	ldi	r24, 0xC0	; 192
   1c344:	08 95       	ret

0001c346 <__fp_pscA>:
   1c346:	00 24       	eor	r0, r0
   1c348:	0a 94       	dec	r0
   1c34a:	16 16       	cp	r1, r22
   1c34c:	17 06       	cpc	r1, r23
   1c34e:	18 06       	cpc	r1, r24
   1c350:	09 06       	cpc	r0, r25
   1c352:	08 95       	ret

0001c354 <__fp_pscB>:
   1c354:	00 24       	eor	r0, r0
   1c356:	0a 94       	dec	r0
   1c358:	12 16       	cp	r1, r18
   1c35a:	13 06       	cpc	r1, r19
   1c35c:	14 06       	cpc	r1, r20
   1c35e:	05 06       	cpc	r0, r21
   1c360:	08 95       	ret

0001c362 <__fp_round>:
   1c362:	09 2e       	mov	r0, r25
   1c364:	03 94       	inc	r0
   1c366:	00 0c       	add	r0, r0
   1c368:	11 f4       	brne	.+4      	; 0x1c36e <__fp_round+0xc>
   1c36a:	88 23       	and	r24, r24
   1c36c:	52 f0       	brmi	.+20     	; 0x1c382 <__fp_round+0x20>
   1c36e:	bb 0f       	add	r27, r27
   1c370:	40 f4       	brcc	.+16     	; 0x1c382 <__fp_round+0x20>
   1c372:	bf 2b       	or	r27, r31
   1c374:	11 f4       	brne	.+4      	; 0x1c37a <__fp_round+0x18>
   1c376:	60 ff       	sbrs	r22, 0
   1c378:	04 c0       	rjmp	.+8      	; 0x1c382 <__fp_round+0x20>
   1c37a:	6f 5f       	subi	r22, 0xFF	; 255
   1c37c:	7f 4f       	sbci	r23, 0xFF	; 255
   1c37e:	8f 4f       	sbci	r24, 0xFF	; 255
   1c380:	9f 4f       	sbci	r25, 0xFF	; 255
   1c382:	08 95       	ret

0001c384 <__fp_split3>:
   1c384:	57 fd       	sbrc	r21, 7
   1c386:	90 58       	subi	r25, 0x80	; 128
   1c388:	44 0f       	add	r20, r20
   1c38a:	55 1f       	adc	r21, r21
   1c38c:	59 f0       	breq	.+22     	; 0x1c3a4 <__fp_splitA+0x10>
   1c38e:	5f 3f       	cpi	r21, 0xFF	; 255
   1c390:	71 f0       	breq	.+28     	; 0x1c3ae <__fp_splitA+0x1a>
   1c392:	47 95       	ror	r20

0001c394 <__fp_splitA>:
   1c394:	88 0f       	add	r24, r24
   1c396:	97 fb       	bst	r25, 7
   1c398:	99 1f       	adc	r25, r25
   1c39a:	61 f0       	breq	.+24     	; 0x1c3b4 <__fp_splitA+0x20>
   1c39c:	9f 3f       	cpi	r25, 0xFF	; 255
   1c39e:	79 f0       	breq	.+30     	; 0x1c3be <__fp_splitA+0x2a>
   1c3a0:	87 95       	ror	r24
   1c3a2:	08 95       	ret
   1c3a4:	12 16       	cp	r1, r18
   1c3a6:	13 06       	cpc	r1, r19
   1c3a8:	14 06       	cpc	r1, r20
   1c3aa:	55 1f       	adc	r21, r21
   1c3ac:	f2 cf       	rjmp	.-28     	; 0x1c392 <__fp_split3+0xe>
   1c3ae:	46 95       	lsr	r20
   1c3b0:	f1 df       	rcall	.-30     	; 0x1c394 <__fp_splitA>
   1c3b2:	08 c0       	rjmp	.+16     	; 0x1c3c4 <__fp_splitA+0x30>
   1c3b4:	16 16       	cp	r1, r22
   1c3b6:	17 06       	cpc	r1, r23
   1c3b8:	18 06       	cpc	r1, r24
   1c3ba:	99 1f       	adc	r25, r25
   1c3bc:	f1 cf       	rjmp	.-30     	; 0x1c3a0 <__fp_splitA+0xc>
   1c3be:	86 95       	lsr	r24
   1c3c0:	71 05       	cpc	r23, r1
   1c3c2:	61 05       	cpc	r22, r1
   1c3c4:	08 94       	sec
   1c3c6:	08 95       	ret

0001c3c8 <__fp_zero>:
   1c3c8:	e8 94       	clt

0001c3ca <__fp_szero>:
   1c3ca:	bb 27       	eor	r27, r27
   1c3cc:	66 27       	eor	r22, r22
   1c3ce:	77 27       	eor	r23, r23
   1c3d0:	cb 01       	movw	r24, r22
   1c3d2:	97 f9       	bld	r25, 7
   1c3d4:	08 95       	ret

0001c3d6 <__gesf2>:
   1c3d6:	8a df       	rcall	.-236    	; 0x1c2ec <__fp_cmp>
   1c3d8:	08 f4       	brcc	.+2      	; 0x1c3dc <__gesf2+0x6>
   1c3da:	8f ef       	ldi	r24, 0xFF	; 255
   1c3dc:	08 95       	ret

0001c3de <__mulsf3>:
   1c3de:	0b d0       	rcall	.+22     	; 0x1c3f6 <__mulsf3x>
   1c3e0:	c0 cf       	rjmp	.-128    	; 0x1c362 <__fp_round>
   1c3e2:	b1 df       	rcall	.-158    	; 0x1c346 <__fp_pscA>
   1c3e4:	28 f0       	brcs	.+10     	; 0x1c3f0 <__mulsf3+0x12>
   1c3e6:	b6 df       	rcall	.-148    	; 0x1c354 <__fp_pscB>
   1c3e8:	18 f0       	brcs	.+6      	; 0x1c3f0 <__mulsf3+0x12>
   1c3ea:	95 23       	and	r25, r21
   1c3ec:	09 f0       	breq	.+2      	; 0x1c3f0 <__mulsf3+0x12>
   1c3ee:	a2 cf       	rjmp	.-188    	; 0x1c334 <__fp_inf>
   1c3f0:	a7 cf       	rjmp	.-178    	; 0x1c340 <__fp_nan>
   1c3f2:	11 24       	eor	r1, r1
   1c3f4:	ea cf       	rjmp	.-44     	; 0x1c3ca <__fp_szero>

0001c3f6 <__mulsf3x>:
   1c3f6:	c6 df       	rcall	.-116    	; 0x1c384 <__fp_split3>
   1c3f8:	a0 f3       	brcs	.-24     	; 0x1c3e2 <__mulsf3+0x4>

0001c3fa <__mulsf3_pse>:
   1c3fa:	95 9f       	mul	r25, r21
   1c3fc:	d1 f3       	breq	.-12     	; 0x1c3f2 <__mulsf3+0x14>
   1c3fe:	95 0f       	add	r25, r21
   1c400:	50 e0       	ldi	r21, 0x00	; 0
   1c402:	55 1f       	adc	r21, r21
   1c404:	62 9f       	mul	r22, r18
   1c406:	f0 01       	movw	r30, r0
   1c408:	72 9f       	mul	r23, r18
   1c40a:	bb 27       	eor	r27, r27
   1c40c:	f0 0d       	add	r31, r0
   1c40e:	b1 1d       	adc	r27, r1
   1c410:	63 9f       	mul	r22, r19
   1c412:	aa 27       	eor	r26, r26
   1c414:	f0 0d       	add	r31, r0
   1c416:	b1 1d       	adc	r27, r1
   1c418:	aa 1f       	adc	r26, r26
   1c41a:	64 9f       	mul	r22, r20
   1c41c:	66 27       	eor	r22, r22
   1c41e:	b0 0d       	add	r27, r0
   1c420:	a1 1d       	adc	r26, r1
   1c422:	66 1f       	adc	r22, r22
   1c424:	82 9f       	mul	r24, r18
   1c426:	22 27       	eor	r18, r18
   1c428:	b0 0d       	add	r27, r0
   1c42a:	a1 1d       	adc	r26, r1
   1c42c:	62 1f       	adc	r22, r18
   1c42e:	73 9f       	mul	r23, r19
   1c430:	b0 0d       	add	r27, r0
   1c432:	a1 1d       	adc	r26, r1
   1c434:	62 1f       	adc	r22, r18
   1c436:	83 9f       	mul	r24, r19
   1c438:	a0 0d       	add	r26, r0
   1c43a:	61 1d       	adc	r22, r1
   1c43c:	22 1f       	adc	r18, r18
   1c43e:	74 9f       	mul	r23, r20
   1c440:	33 27       	eor	r19, r19
   1c442:	a0 0d       	add	r26, r0
   1c444:	61 1d       	adc	r22, r1
   1c446:	23 1f       	adc	r18, r19
   1c448:	84 9f       	mul	r24, r20
   1c44a:	60 0d       	add	r22, r0
   1c44c:	21 1d       	adc	r18, r1
   1c44e:	82 2f       	mov	r24, r18
   1c450:	76 2f       	mov	r23, r22
   1c452:	6a 2f       	mov	r22, r26
   1c454:	11 24       	eor	r1, r1
   1c456:	9f 57       	subi	r25, 0x7F	; 127
   1c458:	50 40       	sbci	r21, 0x00	; 0
   1c45a:	8a f0       	brmi	.+34     	; 0x1c47e <__mulsf3_pse+0x84>
   1c45c:	e1 f0       	breq	.+56     	; 0x1c496 <__mulsf3_pse+0x9c>
   1c45e:	88 23       	and	r24, r24
   1c460:	4a f0       	brmi	.+18     	; 0x1c474 <__mulsf3_pse+0x7a>
   1c462:	ee 0f       	add	r30, r30
   1c464:	ff 1f       	adc	r31, r31
   1c466:	bb 1f       	adc	r27, r27
   1c468:	66 1f       	adc	r22, r22
   1c46a:	77 1f       	adc	r23, r23
   1c46c:	88 1f       	adc	r24, r24
   1c46e:	91 50       	subi	r25, 0x01	; 1
   1c470:	50 40       	sbci	r21, 0x00	; 0
   1c472:	a9 f7       	brne	.-22     	; 0x1c45e <__mulsf3_pse+0x64>
   1c474:	9e 3f       	cpi	r25, 0xFE	; 254
   1c476:	51 05       	cpc	r21, r1
   1c478:	70 f0       	brcs	.+28     	; 0x1c496 <__mulsf3_pse+0x9c>
   1c47a:	5c cf       	rjmp	.-328    	; 0x1c334 <__fp_inf>
   1c47c:	a6 cf       	rjmp	.-180    	; 0x1c3ca <__fp_szero>
   1c47e:	5f 3f       	cpi	r21, 0xFF	; 255
   1c480:	ec f3       	brlt	.-6      	; 0x1c47c <__mulsf3_pse+0x82>
   1c482:	98 3e       	cpi	r25, 0xE8	; 232
   1c484:	dc f3       	brlt	.-10     	; 0x1c47c <__mulsf3_pse+0x82>
   1c486:	86 95       	lsr	r24
   1c488:	77 95       	ror	r23
   1c48a:	67 95       	ror	r22
   1c48c:	b7 95       	ror	r27
   1c48e:	f7 95       	ror	r31
   1c490:	e7 95       	ror	r30
   1c492:	9f 5f       	subi	r25, 0xFF	; 255
   1c494:	c1 f7       	brne	.-16     	; 0x1c486 <__mulsf3_pse+0x8c>
   1c496:	fe 2b       	or	r31, r30
   1c498:	88 0f       	add	r24, r24
   1c49a:	91 1d       	adc	r25, r1
   1c49c:	96 95       	lsr	r25
   1c49e:	87 95       	ror	r24
   1c4a0:	97 f9       	bld	r25, 7
   1c4a2:	08 95       	ret

0001c4a4 <round>:
   1c4a4:	77 df       	rcall	.-274    	; 0x1c394 <__fp_splitA>
   1c4a6:	e0 f0       	brcs	.+56     	; 0x1c4e0 <round+0x3c>
   1c4a8:	9e 37       	cpi	r25, 0x7E	; 126
   1c4aa:	d8 f0       	brcs	.+54     	; 0x1c4e2 <round+0x3e>
   1c4ac:	96 39       	cpi	r25, 0x96	; 150
   1c4ae:	b8 f4       	brcc	.+46     	; 0x1c4de <round+0x3a>
   1c4b0:	9e 38       	cpi	r25, 0x8E	; 142
   1c4b2:	48 f4       	brcc	.+18     	; 0x1c4c6 <round+0x22>
   1c4b4:	67 2f       	mov	r22, r23
   1c4b6:	78 2f       	mov	r23, r24
   1c4b8:	88 27       	eor	r24, r24
   1c4ba:	98 5f       	subi	r25, 0xF8	; 248
   1c4bc:	f9 cf       	rjmp	.-14     	; 0x1c4b0 <round+0xc>
   1c4be:	86 95       	lsr	r24
   1c4c0:	77 95       	ror	r23
   1c4c2:	67 95       	ror	r22
   1c4c4:	93 95       	inc	r25
   1c4c6:	95 39       	cpi	r25, 0x95	; 149
   1c4c8:	d0 f3       	brcs	.-12     	; 0x1c4be <round+0x1a>
   1c4ca:	b6 2f       	mov	r27, r22
   1c4cc:	b1 70       	andi	r27, 0x01	; 1
   1c4ce:	6b 0f       	add	r22, r27
   1c4d0:	71 1d       	adc	r23, r1
   1c4d2:	81 1d       	adc	r24, r1
   1c4d4:	20 f4       	brcc	.+8      	; 0x1c4de <round+0x3a>
   1c4d6:	87 95       	ror	r24
   1c4d8:	77 95       	ror	r23
   1c4da:	67 95       	ror	r22
   1c4dc:	93 95       	inc	r25
   1c4de:	02 c0       	rjmp	.+4      	; 0x1c4e4 <__fp_mintl>
   1c4e0:	1c c0       	rjmp	.+56     	; 0x1c51a <__fp_mpack>
   1c4e2:	73 cf       	rjmp	.-282    	; 0x1c3ca <__fp_szero>

0001c4e4 <__fp_mintl>:
   1c4e4:	88 23       	and	r24, r24
   1c4e6:	71 f4       	brne	.+28     	; 0x1c504 <__fp_mintl+0x20>
   1c4e8:	77 23       	and	r23, r23
   1c4ea:	21 f0       	breq	.+8      	; 0x1c4f4 <__fp_mintl+0x10>
   1c4ec:	98 50       	subi	r25, 0x08	; 8
   1c4ee:	87 2b       	or	r24, r23
   1c4f0:	76 2f       	mov	r23, r22
   1c4f2:	07 c0       	rjmp	.+14     	; 0x1c502 <__fp_mintl+0x1e>
   1c4f4:	66 23       	and	r22, r22
   1c4f6:	11 f4       	brne	.+4      	; 0x1c4fc <__fp_mintl+0x18>
   1c4f8:	99 27       	eor	r25, r25
   1c4fa:	0d c0       	rjmp	.+26     	; 0x1c516 <__fp_mintl+0x32>
   1c4fc:	90 51       	subi	r25, 0x10	; 16
   1c4fe:	86 2b       	or	r24, r22
   1c500:	70 e0       	ldi	r23, 0x00	; 0
   1c502:	60 e0       	ldi	r22, 0x00	; 0
   1c504:	2a f0       	brmi	.+10     	; 0x1c510 <__fp_mintl+0x2c>
   1c506:	9a 95       	dec	r25
   1c508:	66 0f       	add	r22, r22
   1c50a:	77 1f       	adc	r23, r23
   1c50c:	88 1f       	adc	r24, r24
   1c50e:	da f7       	brpl	.-10     	; 0x1c506 <__fp_mintl+0x22>
   1c510:	88 0f       	add	r24, r24
   1c512:	96 95       	lsr	r25
   1c514:	87 95       	ror	r24
   1c516:	97 f9       	bld	r25, 7
   1c518:	08 95       	ret

0001c51a <__fp_mpack>:
   1c51a:	9f 3f       	cpi	r25, 0xFF	; 255
   1c51c:	31 f0       	breq	.+12     	; 0x1c52a <__fp_mpack_finite+0xc>

0001c51e <__fp_mpack_finite>:
   1c51e:	91 50       	subi	r25, 0x01	; 1
   1c520:	20 f4       	brcc	.+8      	; 0x1c52a <__fp_mpack_finite+0xc>
   1c522:	87 95       	ror	r24
   1c524:	77 95       	ror	r23
   1c526:	67 95       	ror	r22
   1c528:	b7 95       	ror	r27
   1c52a:	88 0f       	add	r24, r24
   1c52c:	91 1d       	adc	r25, r1
   1c52e:	96 95       	lsr	r25
   1c530:	87 95       	ror	r24
   1c532:	97 f9       	bld	r25, 7
   1c534:	08 95       	ret

0001c536 <calloc>:
   1c536:	0f 93       	push	r16
   1c538:	1f 93       	push	r17
   1c53a:	cf 93       	push	r28
   1c53c:	df 93       	push	r29
   1c53e:	86 9f       	mul	r24, r22
   1c540:	80 01       	movw	r16, r0
   1c542:	87 9f       	mul	r24, r23
   1c544:	10 0d       	add	r17, r0
   1c546:	96 9f       	mul	r25, r22
   1c548:	10 0d       	add	r17, r0
   1c54a:	11 24       	eor	r1, r1
   1c54c:	c8 01       	movw	r24, r16
   1c54e:	0d d0       	rcall	.+26     	; 0x1c56a <malloc>
   1c550:	ec 01       	movw	r28, r24
   1c552:	00 97       	sbiw	r24, 0x00	; 0
   1c554:	21 f0       	breq	.+8      	; 0x1c55e <calloc+0x28>
   1c556:	a8 01       	movw	r20, r16
   1c558:	60 e0       	ldi	r22, 0x00	; 0
   1c55a:	70 e0       	ldi	r23, 0x00	; 0
   1c55c:	0e d2       	rcall	.+1052   	; 0x1c97a <memset>
   1c55e:	ce 01       	movw	r24, r28
   1c560:	df 91       	pop	r29
   1c562:	cf 91       	pop	r28
   1c564:	1f 91       	pop	r17
   1c566:	0f 91       	pop	r16
   1c568:	08 95       	ret

0001c56a <malloc>:
   1c56a:	0f 93       	push	r16
   1c56c:	1f 93       	push	r17
   1c56e:	cf 93       	push	r28
   1c570:	df 93       	push	r29
   1c572:	82 30       	cpi	r24, 0x02	; 2
   1c574:	91 05       	cpc	r25, r1
   1c576:	10 f4       	brcc	.+4      	; 0x1c57c <malloc+0x12>
   1c578:	82 e0       	ldi	r24, 0x02	; 2
   1c57a:	90 e0       	ldi	r25, 0x00	; 0
   1c57c:	e0 91 72 21 	lds	r30, 0x2172	; 0x802172 <__flp>
   1c580:	f0 91 73 21 	lds	r31, 0x2173	; 0x802173 <__flp+0x1>
   1c584:	20 e0       	ldi	r18, 0x00	; 0
   1c586:	30 e0       	ldi	r19, 0x00	; 0
   1c588:	a0 e0       	ldi	r26, 0x00	; 0
   1c58a:	b0 e0       	ldi	r27, 0x00	; 0
   1c58c:	30 97       	sbiw	r30, 0x00	; 0
   1c58e:	19 f1       	breq	.+70     	; 0x1c5d6 <malloc+0x6c>
   1c590:	40 81       	ld	r20, Z
   1c592:	51 81       	ldd	r21, Z+1	; 0x01
   1c594:	02 81       	ldd	r16, Z+2	; 0x02
   1c596:	13 81       	ldd	r17, Z+3	; 0x03
   1c598:	48 17       	cp	r20, r24
   1c59a:	59 07       	cpc	r21, r25
   1c59c:	c8 f0       	brcs	.+50     	; 0x1c5d0 <malloc+0x66>
   1c59e:	84 17       	cp	r24, r20
   1c5a0:	95 07       	cpc	r25, r21
   1c5a2:	69 f4       	brne	.+26     	; 0x1c5be <malloc+0x54>
   1c5a4:	10 97       	sbiw	r26, 0x00	; 0
   1c5a6:	31 f0       	breq	.+12     	; 0x1c5b4 <malloc+0x4a>
   1c5a8:	12 96       	adiw	r26, 0x02	; 2
   1c5aa:	0c 93       	st	X, r16
   1c5ac:	12 97       	sbiw	r26, 0x02	; 2
   1c5ae:	13 96       	adiw	r26, 0x03	; 3
   1c5b0:	1c 93       	st	X, r17
   1c5b2:	27 c0       	rjmp	.+78     	; 0x1c602 <malloc+0x98>
   1c5b4:	00 93 72 21 	sts	0x2172, r16	; 0x802172 <__flp>
   1c5b8:	10 93 73 21 	sts	0x2173, r17	; 0x802173 <__flp+0x1>
   1c5bc:	22 c0       	rjmp	.+68     	; 0x1c602 <malloc+0x98>
   1c5be:	21 15       	cp	r18, r1
   1c5c0:	31 05       	cpc	r19, r1
   1c5c2:	19 f0       	breq	.+6      	; 0x1c5ca <malloc+0x60>
   1c5c4:	42 17       	cp	r20, r18
   1c5c6:	53 07       	cpc	r21, r19
   1c5c8:	18 f4       	brcc	.+6      	; 0x1c5d0 <malloc+0x66>
   1c5ca:	9a 01       	movw	r18, r20
   1c5cc:	bd 01       	movw	r22, r26
   1c5ce:	ef 01       	movw	r28, r30
   1c5d0:	df 01       	movw	r26, r30
   1c5d2:	f8 01       	movw	r30, r16
   1c5d4:	db cf       	rjmp	.-74     	; 0x1c58c <malloc+0x22>
   1c5d6:	21 15       	cp	r18, r1
   1c5d8:	31 05       	cpc	r19, r1
   1c5da:	f9 f0       	breq	.+62     	; 0x1c61a <malloc+0xb0>
   1c5dc:	28 1b       	sub	r18, r24
   1c5de:	39 0b       	sbc	r19, r25
   1c5e0:	24 30       	cpi	r18, 0x04	; 4
   1c5e2:	31 05       	cpc	r19, r1
   1c5e4:	80 f4       	brcc	.+32     	; 0x1c606 <malloc+0x9c>
   1c5e6:	8a 81       	ldd	r24, Y+2	; 0x02
   1c5e8:	9b 81       	ldd	r25, Y+3	; 0x03
   1c5ea:	61 15       	cp	r22, r1
   1c5ec:	71 05       	cpc	r23, r1
   1c5ee:	21 f0       	breq	.+8      	; 0x1c5f8 <malloc+0x8e>
   1c5f0:	fb 01       	movw	r30, r22
   1c5f2:	93 83       	std	Z+3, r25	; 0x03
   1c5f4:	82 83       	std	Z+2, r24	; 0x02
   1c5f6:	04 c0       	rjmp	.+8      	; 0x1c600 <malloc+0x96>
   1c5f8:	90 93 73 21 	sts	0x2173, r25	; 0x802173 <__flp+0x1>
   1c5fc:	80 93 72 21 	sts	0x2172, r24	; 0x802172 <__flp>
   1c600:	fe 01       	movw	r30, r28
   1c602:	32 96       	adiw	r30, 0x02	; 2
   1c604:	44 c0       	rjmp	.+136    	; 0x1c68e <malloc+0x124>
   1c606:	fe 01       	movw	r30, r28
   1c608:	e2 0f       	add	r30, r18
   1c60a:	f3 1f       	adc	r31, r19
   1c60c:	81 93       	st	Z+, r24
   1c60e:	91 93       	st	Z+, r25
   1c610:	22 50       	subi	r18, 0x02	; 2
   1c612:	31 09       	sbc	r19, r1
   1c614:	39 83       	std	Y+1, r19	; 0x01
   1c616:	28 83       	st	Y, r18
   1c618:	3a c0       	rjmp	.+116    	; 0x1c68e <malloc+0x124>
   1c61a:	20 91 70 21 	lds	r18, 0x2170	; 0x802170 <__brkval>
   1c61e:	30 91 71 21 	lds	r19, 0x2171	; 0x802171 <__brkval+0x1>
   1c622:	23 2b       	or	r18, r19
   1c624:	41 f4       	brne	.+16     	; 0x1c636 <malloc+0xcc>
   1c626:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
   1c62a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
   1c62e:	30 93 71 21 	sts	0x2171, r19	; 0x802171 <__brkval+0x1>
   1c632:	20 93 70 21 	sts	0x2170, r18	; 0x802170 <__brkval>
   1c636:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
   1c63a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
   1c63e:	21 15       	cp	r18, r1
   1c640:	31 05       	cpc	r19, r1
   1c642:	41 f4       	brne	.+16     	; 0x1c654 <malloc+0xea>
   1c644:	2d b7       	in	r18, 0x3d	; 61
   1c646:	3e b7       	in	r19, 0x3e	; 62
   1c648:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
   1c64c:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
   1c650:	24 1b       	sub	r18, r20
   1c652:	35 0b       	sbc	r19, r21
   1c654:	e0 91 70 21 	lds	r30, 0x2170	; 0x802170 <__brkval>
   1c658:	f0 91 71 21 	lds	r31, 0x2171	; 0x802171 <__brkval+0x1>
   1c65c:	e2 17       	cp	r30, r18
   1c65e:	f3 07       	cpc	r31, r19
   1c660:	a0 f4       	brcc	.+40     	; 0x1c68a <malloc+0x120>
   1c662:	2e 1b       	sub	r18, r30
   1c664:	3f 0b       	sbc	r19, r31
   1c666:	28 17       	cp	r18, r24
   1c668:	39 07       	cpc	r19, r25
   1c66a:	78 f0       	brcs	.+30     	; 0x1c68a <malloc+0x120>
   1c66c:	ac 01       	movw	r20, r24
   1c66e:	4e 5f       	subi	r20, 0xFE	; 254
   1c670:	5f 4f       	sbci	r21, 0xFF	; 255
   1c672:	24 17       	cp	r18, r20
   1c674:	35 07       	cpc	r19, r21
   1c676:	48 f0       	brcs	.+18     	; 0x1c68a <malloc+0x120>
   1c678:	4e 0f       	add	r20, r30
   1c67a:	5f 1f       	adc	r21, r31
   1c67c:	50 93 71 21 	sts	0x2171, r21	; 0x802171 <__brkval+0x1>
   1c680:	40 93 70 21 	sts	0x2170, r20	; 0x802170 <__brkval>
   1c684:	81 93       	st	Z+, r24
   1c686:	91 93       	st	Z+, r25
   1c688:	02 c0       	rjmp	.+4      	; 0x1c68e <malloc+0x124>
   1c68a:	e0 e0       	ldi	r30, 0x00	; 0
   1c68c:	f0 e0       	ldi	r31, 0x00	; 0
   1c68e:	cf 01       	movw	r24, r30
   1c690:	df 91       	pop	r29
   1c692:	cf 91       	pop	r28
   1c694:	1f 91       	pop	r17
   1c696:	0f 91       	pop	r16
   1c698:	08 95       	ret

0001c69a <free>:
   1c69a:	cf 93       	push	r28
   1c69c:	df 93       	push	r29
   1c69e:	00 97       	sbiw	r24, 0x00	; 0
   1c6a0:	09 f4       	brne	.+2      	; 0x1c6a4 <free+0xa>
   1c6a2:	81 c0       	rjmp	.+258    	; 0x1c7a6 <free+0x10c>
   1c6a4:	fc 01       	movw	r30, r24
   1c6a6:	32 97       	sbiw	r30, 0x02	; 2
   1c6a8:	13 82       	std	Z+3, r1	; 0x03
   1c6aa:	12 82       	std	Z+2, r1	; 0x02
   1c6ac:	a0 91 72 21 	lds	r26, 0x2172	; 0x802172 <__flp>
   1c6b0:	b0 91 73 21 	lds	r27, 0x2173	; 0x802173 <__flp+0x1>
   1c6b4:	10 97       	sbiw	r26, 0x00	; 0
   1c6b6:	81 f4       	brne	.+32     	; 0x1c6d8 <free+0x3e>
   1c6b8:	20 81       	ld	r18, Z
   1c6ba:	31 81       	ldd	r19, Z+1	; 0x01
   1c6bc:	82 0f       	add	r24, r18
   1c6be:	93 1f       	adc	r25, r19
   1c6c0:	20 91 70 21 	lds	r18, 0x2170	; 0x802170 <__brkval>
   1c6c4:	30 91 71 21 	lds	r19, 0x2171	; 0x802171 <__brkval+0x1>
   1c6c8:	28 17       	cp	r18, r24
   1c6ca:	39 07       	cpc	r19, r25
   1c6cc:	51 f5       	brne	.+84     	; 0x1c722 <free+0x88>
   1c6ce:	f0 93 71 21 	sts	0x2171, r31	; 0x802171 <__brkval+0x1>
   1c6d2:	e0 93 70 21 	sts	0x2170, r30	; 0x802170 <__brkval>
   1c6d6:	67 c0       	rjmp	.+206    	; 0x1c7a6 <free+0x10c>
   1c6d8:	ed 01       	movw	r28, r26
   1c6da:	20 e0       	ldi	r18, 0x00	; 0
   1c6dc:	30 e0       	ldi	r19, 0x00	; 0
   1c6de:	ce 17       	cp	r28, r30
   1c6e0:	df 07       	cpc	r29, r31
   1c6e2:	40 f4       	brcc	.+16     	; 0x1c6f4 <free+0x5a>
   1c6e4:	4a 81       	ldd	r20, Y+2	; 0x02
   1c6e6:	5b 81       	ldd	r21, Y+3	; 0x03
   1c6e8:	9e 01       	movw	r18, r28
   1c6ea:	41 15       	cp	r20, r1
   1c6ec:	51 05       	cpc	r21, r1
   1c6ee:	f1 f0       	breq	.+60     	; 0x1c72c <free+0x92>
   1c6f0:	ea 01       	movw	r28, r20
   1c6f2:	f5 cf       	rjmp	.-22     	; 0x1c6de <free+0x44>
   1c6f4:	d3 83       	std	Z+3, r29	; 0x03
   1c6f6:	c2 83       	std	Z+2, r28	; 0x02
   1c6f8:	40 81       	ld	r20, Z
   1c6fa:	51 81       	ldd	r21, Z+1	; 0x01
   1c6fc:	84 0f       	add	r24, r20
   1c6fe:	95 1f       	adc	r25, r21
   1c700:	c8 17       	cp	r28, r24
   1c702:	d9 07       	cpc	r29, r25
   1c704:	59 f4       	brne	.+22     	; 0x1c71c <free+0x82>
   1c706:	88 81       	ld	r24, Y
   1c708:	99 81       	ldd	r25, Y+1	; 0x01
   1c70a:	84 0f       	add	r24, r20
   1c70c:	95 1f       	adc	r25, r21
   1c70e:	02 96       	adiw	r24, 0x02	; 2
   1c710:	91 83       	std	Z+1, r25	; 0x01
   1c712:	80 83       	st	Z, r24
   1c714:	8a 81       	ldd	r24, Y+2	; 0x02
   1c716:	9b 81       	ldd	r25, Y+3	; 0x03
   1c718:	93 83       	std	Z+3, r25	; 0x03
   1c71a:	82 83       	std	Z+2, r24	; 0x02
   1c71c:	21 15       	cp	r18, r1
   1c71e:	31 05       	cpc	r19, r1
   1c720:	29 f4       	brne	.+10     	; 0x1c72c <free+0x92>
   1c722:	f0 93 73 21 	sts	0x2173, r31	; 0x802173 <__flp+0x1>
   1c726:	e0 93 72 21 	sts	0x2172, r30	; 0x802172 <__flp>
   1c72a:	3d c0       	rjmp	.+122    	; 0x1c7a6 <free+0x10c>
   1c72c:	e9 01       	movw	r28, r18
   1c72e:	fb 83       	std	Y+3, r31	; 0x03
   1c730:	ea 83       	std	Y+2, r30	; 0x02
   1c732:	49 91       	ld	r20, Y+
   1c734:	59 91       	ld	r21, Y+
   1c736:	c4 0f       	add	r28, r20
   1c738:	d5 1f       	adc	r29, r21
   1c73a:	ec 17       	cp	r30, r28
   1c73c:	fd 07       	cpc	r31, r29
   1c73e:	61 f4       	brne	.+24     	; 0x1c758 <free+0xbe>
   1c740:	80 81       	ld	r24, Z
   1c742:	91 81       	ldd	r25, Z+1	; 0x01
   1c744:	84 0f       	add	r24, r20
   1c746:	95 1f       	adc	r25, r21
   1c748:	02 96       	adiw	r24, 0x02	; 2
   1c74a:	e9 01       	movw	r28, r18
   1c74c:	99 83       	std	Y+1, r25	; 0x01
   1c74e:	88 83       	st	Y, r24
   1c750:	82 81       	ldd	r24, Z+2	; 0x02
   1c752:	93 81       	ldd	r25, Z+3	; 0x03
   1c754:	9b 83       	std	Y+3, r25	; 0x03
   1c756:	8a 83       	std	Y+2, r24	; 0x02
   1c758:	e0 e0       	ldi	r30, 0x00	; 0
   1c75a:	f0 e0       	ldi	r31, 0x00	; 0
   1c75c:	12 96       	adiw	r26, 0x02	; 2
   1c75e:	8d 91       	ld	r24, X+
   1c760:	9c 91       	ld	r25, X
   1c762:	13 97       	sbiw	r26, 0x03	; 3
   1c764:	00 97       	sbiw	r24, 0x00	; 0
   1c766:	19 f0       	breq	.+6      	; 0x1c76e <free+0xd4>
   1c768:	fd 01       	movw	r30, r26
   1c76a:	dc 01       	movw	r26, r24
   1c76c:	f7 cf       	rjmp	.-18     	; 0x1c75c <free+0xc2>
   1c76e:	8d 91       	ld	r24, X+
   1c770:	9c 91       	ld	r25, X
   1c772:	11 97       	sbiw	r26, 0x01	; 1
   1c774:	9d 01       	movw	r18, r26
   1c776:	2e 5f       	subi	r18, 0xFE	; 254
   1c778:	3f 4f       	sbci	r19, 0xFF	; 255
   1c77a:	82 0f       	add	r24, r18
   1c77c:	93 1f       	adc	r25, r19
   1c77e:	20 91 70 21 	lds	r18, 0x2170	; 0x802170 <__brkval>
   1c782:	30 91 71 21 	lds	r19, 0x2171	; 0x802171 <__brkval+0x1>
   1c786:	28 17       	cp	r18, r24
   1c788:	39 07       	cpc	r19, r25
   1c78a:	69 f4       	brne	.+26     	; 0x1c7a6 <free+0x10c>
   1c78c:	30 97       	sbiw	r30, 0x00	; 0
   1c78e:	29 f4       	brne	.+10     	; 0x1c79a <free+0x100>
   1c790:	10 92 73 21 	sts	0x2173, r1	; 0x802173 <__flp+0x1>
   1c794:	10 92 72 21 	sts	0x2172, r1	; 0x802172 <__flp>
   1c798:	02 c0       	rjmp	.+4      	; 0x1c79e <free+0x104>
   1c79a:	13 82       	std	Z+3, r1	; 0x03
   1c79c:	12 82       	std	Z+2, r1	; 0x02
   1c79e:	b0 93 71 21 	sts	0x2171, r27	; 0x802171 <__brkval+0x1>
   1c7a2:	a0 93 70 21 	sts	0x2170, r26	; 0x802170 <__brkval>
   1c7a6:	df 91       	pop	r29
   1c7a8:	cf 91       	pop	r28
   1c7aa:	08 95       	ret

0001c7ac <abort>:
   1c7ac:	81 e0       	ldi	r24, 0x01	; 1
   1c7ae:	90 e0       	ldi	r25, 0x00	; 0
   1c7b0:	f8 94       	cli
   1c7b2:	53 c1       	rjmp	.+678    	; 0x1ca5a <_exit>

0001c7b4 <__ftoa_engine>:
   1c7b4:	28 30       	cpi	r18, 0x08	; 8
   1c7b6:	08 f0       	brcs	.+2      	; 0x1c7ba <__ftoa_engine+0x6>
   1c7b8:	27 e0       	ldi	r18, 0x07	; 7
   1c7ba:	33 27       	eor	r19, r19
   1c7bc:	da 01       	movw	r26, r20
   1c7be:	99 0f       	add	r25, r25
   1c7c0:	31 1d       	adc	r19, r1
   1c7c2:	87 fd       	sbrc	r24, 7
   1c7c4:	91 60       	ori	r25, 0x01	; 1
   1c7c6:	00 96       	adiw	r24, 0x00	; 0
   1c7c8:	61 05       	cpc	r22, r1
   1c7ca:	71 05       	cpc	r23, r1
   1c7cc:	39 f4       	brne	.+14     	; 0x1c7dc <__ftoa_engine+0x28>
   1c7ce:	32 60       	ori	r19, 0x02	; 2
   1c7d0:	2e 5f       	subi	r18, 0xFE	; 254
   1c7d2:	3d 93       	st	X+, r19
   1c7d4:	30 e3       	ldi	r19, 0x30	; 48
   1c7d6:	2a 95       	dec	r18
   1c7d8:	e1 f7       	brne	.-8      	; 0x1c7d2 <__ftoa_engine+0x1e>
   1c7da:	08 95       	ret
   1c7dc:	9f 3f       	cpi	r25, 0xFF	; 255
   1c7de:	30 f0       	brcs	.+12     	; 0x1c7ec <__ftoa_engine+0x38>
   1c7e0:	80 38       	cpi	r24, 0x80	; 128
   1c7e2:	71 05       	cpc	r23, r1
   1c7e4:	61 05       	cpc	r22, r1
   1c7e6:	09 f0       	breq	.+2      	; 0x1c7ea <__ftoa_engine+0x36>
   1c7e8:	3c 5f       	subi	r19, 0xFC	; 252
   1c7ea:	3c 5f       	subi	r19, 0xFC	; 252
   1c7ec:	3d 93       	st	X+, r19
   1c7ee:	91 30       	cpi	r25, 0x01	; 1
   1c7f0:	08 f0       	brcs	.+2      	; 0x1c7f4 <__ftoa_engine+0x40>
   1c7f2:	80 68       	ori	r24, 0x80	; 128
   1c7f4:	91 1d       	adc	r25, r1
   1c7f6:	df 93       	push	r29
   1c7f8:	cf 93       	push	r28
   1c7fa:	1f 93       	push	r17
   1c7fc:	0f 93       	push	r16
   1c7fe:	ff 92       	push	r15
   1c800:	ef 92       	push	r14
   1c802:	19 2f       	mov	r17, r25
   1c804:	98 7f       	andi	r25, 0xF8	; 248
   1c806:	96 95       	lsr	r25
   1c808:	e9 2f       	mov	r30, r25
   1c80a:	96 95       	lsr	r25
   1c80c:	96 95       	lsr	r25
   1c80e:	e9 0f       	add	r30, r25
   1c810:	ff 27       	eor	r31, r31
   1c812:	e8 5c       	subi	r30, 0xC8	; 200
   1c814:	fd 4f       	sbci	r31, 0xFD	; 253
   1c816:	99 27       	eor	r25, r25
   1c818:	33 27       	eor	r19, r19
   1c81a:	ee 24       	eor	r14, r14
   1c81c:	ff 24       	eor	r15, r15
   1c81e:	a7 01       	movw	r20, r14
   1c820:	e7 01       	movw	r28, r14
   1c822:	05 90       	lpm	r0, Z+
   1c824:	08 94       	sec
   1c826:	07 94       	ror	r0
   1c828:	28 f4       	brcc	.+10     	; 0x1c834 <__ftoa_engine+0x80>
   1c82a:	36 0f       	add	r19, r22
   1c82c:	e7 1e       	adc	r14, r23
   1c82e:	f8 1e       	adc	r15, r24
   1c830:	49 1f       	adc	r20, r25
   1c832:	51 1d       	adc	r21, r1
   1c834:	66 0f       	add	r22, r22
   1c836:	77 1f       	adc	r23, r23
   1c838:	88 1f       	adc	r24, r24
   1c83a:	99 1f       	adc	r25, r25
   1c83c:	06 94       	lsr	r0
   1c83e:	a1 f7       	brne	.-24     	; 0x1c828 <__ftoa_engine+0x74>
   1c840:	05 90       	lpm	r0, Z+
   1c842:	07 94       	ror	r0
   1c844:	28 f4       	brcc	.+10     	; 0x1c850 <__ftoa_engine+0x9c>
   1c846:	e7 0e       	add	r14, r23
   1c848:	f8 1e       	adc	r15, r24
   1c84a:	49 1f       	adc	r20, r25
   1c84c:	56 1f       	adc	r21, r22
   1c84e:	c1 1d       	adc	r28, r1
   1c850:	77 0f       	add	r23, r23
   1c852:	88 1f       	adc	r24, r24
   1c854:	99 1f       	adc	r25, r25
   1c856:	66 1f       	adc	r22, r22
   1c858:	06 94       	lsr	r0
   1c85a:	a1 f7       	brne	.-24     	; 0x1c844 <__ftoa_engine+0x90>
   1c85c:	05 90       	lpm	r0, Z+
   1c85e:	07 94       	ror	r0
   1c860:	28 f4       	brcc	.+10     	; 0x1c86c <__ftoa_engine+0xb8>
   1c862:	f8 0e       	add	r15, r24
   1c864:	49 1f       	adc	r20, r25
   1c866:	56 1f       	adc	r21, r22
   1c868:	c7 1f       	adc	r28, r23
   1c86a:	d1 1d       	adc	r29, r1
   1c86c:	88 0f       	add	r24, r24
   1c86e:	99 1f       	adc	r25, r25
   1c870:	66 1f       	adc	r22, r22
   1c872:	77 1f       	adc	r23, r23
   1c874:	06 94       	lsr	r0
   1c876:	a1 f7       	brne	.-24     	; 0x1c860 <__ftoa_engine+0xac>
   1c878:	05 90       	lpm	r0, Z+
   1c87a:	07 94       	ror	r0
   1c87c:	20 f4       	brcc	.+8      	; 0x1c886 <__ftoa_engine+0xd2>
   1c87e:	49 0f       	add	r20, r25
   1c880:	56 1f       	adc	r21, r22
   1c882:	c7 1f       	adc	r28, r23
   1c884:	d8 1f       	adc	r29, r24
   1c886:	99 0f       	add	r25, r25
   1c888:	66 1f       	adc	r22, r22
   1c88a:	77 1f       	adc	r23, r23
   1c88c:	88 1f       	adc	r24, r24
   1c88e:	06 94       	lsr	r0
   1c890:	a9 f7       	brne	.-22     	; 0x1c87c <__ftoa_engine+0xc8>
   1c892:	84 91       	lpm	r24, Z
   1c894:	10 95       	com	r17
   1c896:	17 70       	andi	r17, 0x07	; 7
   1c898:	41 f0       	breq	.+16     	; 0x1c8aa <__ftoa_engine+0xf6>
   1c89a:	d6 95       	lsr	r29
   1c89c:	c7 95       	ror	r28
   1c89e:	57 95       	ror	r21
   1c8a0:	47 95       	ror	r20
   1c8a2:	f7 94       	ror	r15
   1c8a4:	e7 94       	ror	r14
   1c8a6:	1a 95       	dec	r17
   1c8a8:	c1 f7       	brne	.-16     	; 0x1c89a <__ftoa_engine+0xe6>
   1c8aa:	ee ed       	ldi	r30, 0xDE	; 222
   1c8ac:	f1 e0       	ldi	r31, 0x01	; 1
   1c8ae:	68 94       	set
   1c8b0:	15 90       	lpm	r1, Z+
   1c8b2:	15 91       	lpm	r17, Z+
   1c8b4:	35 91       	lpm	r19, Z+
   1c8b6:	65 91       	lpm	r22, Z+
   1c8b8:	95 91       	lpm	r25, Z+
   1c8ba:	05 90       	lpm	r0, Z+
   1c8bc:	7f e2       	ldi	r23, 0x2F	; 47
   1c8be:	73 95       	inc	r23
   1c8c0:	e1 18       	sub	r14, r1
   1c8c2:	f1 0a       	sbc	r15, r17
   1c8c4:	43 0b       	sbc	r20, r19
   1c8c6:	56 0b       	sbc	r21, r22
   1c8c8:	c9 0b       	sbc	r28, r25
   1c8ca:	d0 09       	sbc	r29, r0
   1c8cc:	c0 f7       	brcc	.-16     	; 0x1c8be <__ftoa_engine+0x10a>
   1c8ce:	e1 0c       	add	r14, r1
   1c8d0:	f1 1e       	adc	r15, r17
   1c8d2:	43 1f       	adc	r20, r19
   1c8d4:	56 1f       	adc	r21, r22
   1c8d6:	c9 1f       	adc	r28, r25
   1c8d8:	d0 1d       	adc	r29, r0
   1c8da:	7e f4       	brtc	.+30     	; 0x1c8fa <__ftoa_engine+0x146>
   1c8dc:	70 33       	cpi	r23, 0x30	; 48
   1c8de:	11 f4       	brne	.+4      	; 0x1c8e4 <__ftoa_engine+0x130>
   1c8e0:	8a 95       	dec	r24
   1c8e2:	e6 cf       	rjmp	.-52     	; 0x1c8b0 <__ftoa_engine+0xfc>
   1c8e4:	e8 94       	clt
   1c8e6:	01 50       	subi	r16, 0x01	; 1
   1c8e8:	30 f0       	brcs	.+12     	; 0x1c8f6 <__ftoa_engine+0x142>
   1c8ea:	08 0f       	add	r16, r24
   1c8ec:	0a f4       	brpl	.+2      	; 0x1c8f0 <__ftoa_engine+0x13c>
   1c8ee:	00 27       	eor	r16, r16
   1c8f0:	02 17       	cp	r16, r18
   1c8f2:	08 f4       	brcc	.+2      	; 0x1c8f6 <__ftoa_engine+0x142>
   1c8f4:	20 2f       	mov	r18, r16
   1c8f6:	23 95       	inc	r18
   1c8f8:	02 2f       	mov	r16, r18
   1c8fa:	7a 33       	cpi	r23, 0x3A	; 58
   1c8fc:	28 f0       	brcs	.+10     	; 0x1c908 <__ftoa_engine+0x154>
   1c8fe:	79 e3       	ldi	r23, 0x39	; 57
   1c900:	7d 93       	st	X+, r23
   1c902:	2a 95       	dec	r18
   1c904:	e9 f7       	brne	.-6      	; 0x1c900 <__ftoa_engine+0x14c>
   1c906:	10 c0       	rjmp	.+32     	; 0x1c928 <__ftoa_engine+0x174>
   1c908:	7d 93       	st	X+, r23
   1c90a:	2a 95       	dec	r18
   1c90c:	89 f6       	brne	.-94     	; 0x1c8b0 <__ftoa_engine+0xfc>
   1c90e:	06 94       	lsr	r0
   1c910:	97 95       	ror	r25
   1c912:	67 95       	ror	r22
   1c914:	37 95       	ror	r19
   1c916:	17 95       	ror	r17
   1c918:	17 94       	ror	r1
   1c91a:	e1 18       	sub	r14, r1
   1c91c:	f1 0a       	sbc	r15, r17
   1c91e:	43 0b       	sbc	r20, r19
   1c920:	56 0b       	sbc	r21, r22
   1c922:	c9 0b       	sbc	r28, r25
   1c924:	d0 09       	sbc	r29, r0
   1c926:	98 f0       	brcs	.+38     	; 0x1c94e <__ftoa_engine+0x19a>
   1c928:	23 95       	inc	r18
   1c92a:	7e 91       	ld	r23, -X
   1c92c:	73 95       	inc	r23
   1c92e:	7a 33       	cpi	r23, 0x3A	; 58
   1c930:	08 f0       	brcs	.+2      	; 0x1c934 <__ftoa_engine+0x180>
   1c932:	70 e3       	ldi	r23, 0x30	; 48
   1c934:	7c 93       	st	X, r23
   1c936:	20 13       	cpse	r18, r16
   1c938:	b8 f7       	brcc	.-18     	; 0x1c928 <__ftoa_engine+0x174>
   1c93a:	7e 91       	ld	r23, -X
   1c93c:	70 61       	ori	r23, 0x10	; 16
   1c93e:	7d 93       	st	X+, r23
   1c940:	30 f0       	brcs	.+12     	; 0x1c94e <__ftoa_engine+0x19a>
   1c942:	83 95       	inc	r24
   1c944:	71 e3       	ldi	r23, 0x31	; 49
   1c946:	7d 93       	st	X+, r23
   1c948:	70 e3       	ldi	r23, 0x30	; 48
   1c94a:	2a 95       	dec	r18
   1c94c:	e1 f7       	brne	.-8      	; 0x1c946 <__ftoa_engine+0x192>
   1c94e:	11 24       	eor	r1, r1
   1c950:	ef 90       	pop	r14
   1c952:	ff 90       	pop	r15
   1c954:	0f 91       	pop	r16
   1c956:	1f 91       	pop	r17
   1c958:	cf 91       	pop	r28
   1c95a:	df 91       	pop	r29
   1c95c:	99 27       	eor	r25, r25
   1c95e:	87 fd       	sbrc	r24, 7
   1c960:	90 95       	com	r25
   1c962:	08 95       	ret

0001c964 <strnlen_P>:
   1c964:	fc 01       	movw	r30, r24
   1c966:	05 90       	lpm	r0, Z+
   1c968:	61 50       	subi	r22, 0x01	; 1
   1c96a:	70 40       	sbci	r23, 0x00	; 0
   1c96c:	01 10       	cpse	r0, r1
   1c96e:	d8 f7       	brcc	.-10     	; 0x1c966 <strnlen_P+0x2>
   1c970:	80 95       	com	r24
   1c972:	90 95       	com	r25
   1c974:	8e 0f       	add	r24, r30
   1c976:	9f 1f       	adc	r25, r31
   1c978:	08 95       	ret

0001c97a <memset>:
   1c97a:	dc 01       	movw	r26, r24
   1c97c:	01 c0       	rjmp	.+2      	; 0x1c980 <memset+0x6>
   1c97e:	6d 93       	st	X+, r22
   1c980:	41 50       	subi	r20, 0x01	; 1
   1c982:	50 40       	sbci	r21, 0x00	; 0
   1c984:	e0 f7       	brcc	.-8      	; 0x1c97e <memset+0x4>
   1c986:	08 95       	ret

0001c988 <strnlen>:
   1c988:	fc 01       	movw	r30, r24
   1c98a:	61 50       	subi	r22, 0x01	; 1
   1c98c:	70 40       	sbci	r23, 0x00	; 0
   1c98e:	01 90       	ld	r0, Z+
   1c990:	01 10       	cpse	r0, r1
   1c992:	d8 f7       	brcc	.-10     	; 0x1c98a <strnlen+0x2>
   1c994:	80 95       	com	r24
   1c996:	90 95       	com	r25
   1c998:	8e 0f       	add	r24, r30
   1c99a:	9f 1f       	adc	r25, r31
   1c99c:	08 95       	ret

0001c99e <__ultoa_invert>:
   1c99e:	fa 01       	movw	r30, r20
   1c9a0:	aa 27       	eor	r26, r26
   1c9a2:	28 30       	cpi	r18, 0x08	; 8
   1c9a4:	51 f1       	breq	.+84     	; 0x1c9fa <__ultoa_invert+0x5c>
   1c9a6:	20 31       	cpi	r18, 0x10	; 16
   1c9a8:	81 f1       	breq	.+96     	; 0x1ca0a <__ultoa_invert+0x6c>
   1c9aa:	e8 94       	clt
   1c9ac:	6f 93       	push	r22
   1c9ae:	6e 7f       	andi	r22, 0xFE	; 254
   1c9b0:	6e 5f       	subi	r22, 0xFE	; 254
   1c9b2:	7f 4f       	sbci	r23, 0xFF	; 255
   1c9b4:	8f 4f       	sbci	r24, 0xFF	; 255
   1c9b6:	9f 4f       	sbci	r25, 0xFF	; 255
   1c9b8:	af 4f       	sbci	r26, 0xFF	; 255
   1c9ba:	b1 e0       	ldi	r27, 0x01	; 1
   1c9bc:	3e d0       	rcall	.+124    	; 0x1ca3a <__ultoa_invert+0x9c>
   1c9be:	b4 e0       	ldi	r27, 0x04	; 4
   1c9c0:	3c d0       	rcall	.+120    	; 0x1ca3a <__ultoa_invert+0x9c>
   1c9c2:	67 0f       	add	r22, r23
   1c9c4:	78 1f       	adc	r23, r24
   1c9c6:	89 1f       	adc	r24, r25
   1c9c8:	9a 1f       	adc	r25, r26
   1c9ca:	a1 1d       	adc	r26, r1
   1c9cc:	68 0f       	add	r22, r24
   1c9ce:	79 1f       	adc	r23, r25
   1c9d0:	8a 1f       	adc	r24, r26
   1c9d2:	91 1d       	adc	r25, r1
   1c9d4:	a1 1d       	adc	r26, r1
   1c9d6:	6a 0f       	add	r22, r26
   1c9d8:	71 1d       	adc	r23, r1
   1c9da:	81 1d       	adc	r24, r1
   1c9dc:	91 1d       	adc	r25, r1
   1c9de:	a1 1d       	adc	r26, r1
   1c9e0:	20 d0       	rcall	.+64     	; 0x1ca22 <__ultoa_invert+0x84>
   1c9e2:	09 f4       	brne	.+2      	; 0x1c9e6 <__ultoa_invert+0x48>
   1c9e4:	68 94       	set
   1c9e6:	3f 91       	pop	r19
   1c9e8:	2a e0       	ldi	r18, 0x0A	; 10
   1c9ea:	26 9f       	mul	r18, r22
   1c9ec:	11 24       	eor	r1, r1
   1c9ee:	30 19       	sub	r19, r0
   1c9f0:	30 5d       	subi	r19, 0xD0	; 208
   1c9f2:	31 93       	st	Z+, r19
   1c9f4:	de f6       	brtc	.-74     	; 0x1c9ac <__ultoa_invert+0xe>
   1c9f6:	cf 01       	movw	r24, r30
   1c9f8:	08 95       	ret
   1c9fa:	46 2f       	mov	r20, r22
   1c9fc:	47 70       	andi	r20, 0x07	; 7
   1c9fe:	40 5d       	subi	r20, 0xD0	; 208
   1ca00:	41 93       	st	Z+, r20
   1ca02:	b3 e0       	ldi	r27, 0x03	; 3
   1ca04:	0f d0       	rcall	.+30     	; 0x1ca24 <__ultoa_invert+0x86>
   1ca06:	c9 f7       	brne	.-14     	; 0x1c9fa <__ultoa_invert+0x5c>
   1ca08:	f6 cf       	rjmp	.-20     	; 0x1c9f6 <__ultoa_invert+0x58>
   1ca0a:	46 2f       	mov	r20, r22
   1ca0c:	4f 70       	andi	r20, 0x0F	; 15
   1ca0e:	40 5d       	subi	r20, 0xD0	; 208
   1ca10:	4a 33       	cpi	r20, 0x3A	; 58
   1ca12:	18 f0       	brcs	.+6      	; 0x1ca1a <__ultoa_invert+0x7c>
   1ca14:	49 5d       	subi	r20, 0xD9	; 217
   1ca16:	31 fd       	sbrc	r19, 1
   1ca18:	40 52       	subi	r20, 0x20	; 32
   1ca1a:	41 93       	st	Z+, r20
   1ca1c:	02 d0       	rcall	.+4      	; 0x1ca22 <__ultoa_invert+0x84>
   1ca1e:	a9 f7       	brne	.-22     	; 0x1ca0a <__ultoa_invert+0x6c>
   1ca20:	ea cf       	rjmp	.-44     	; 0x1c9f6 <__ultoa_invert+0x58>
   1ca22:	b4 e0       	ldi	r27, 0x04	; 4
   1ca24:	a6 95       	lsr	r26
   1ca26:	97 95       	ror	r25
   1ca28:	87 95       	ror	r24
   1ca2a:	77 95       	ror	r23
   1ca2c:	67 95       	ror	r22
   1ca2e:	ba 95       	dec	r27
   1ca30:	c9 f7       	brne	.-14     	; 0x1ca24 <__ultoa_invert+0x86>
   1ca32:	00 97       	sbiw	r24, 0x00	; 0
   1ca34:	61 05       	cpc	r22, r1
   1ca36:	71 05       	cpc	r23, r1
   1ca38:	08 95       	ret
   1ca3a:	9b 01       	movw	r18, r22
   1ca3c:	ac 01       	movw	r20, r24
   1ca3e:	0a 2e       	mov	r0, r26
   1ca40:	06 94       	lsr	r0
   1ca42:	57 95       	ror	r21
   1ca44:	47 95       	ror	r20
   1ca46:	37 95       	ror	r19
   1ca48:	27 95       	ror	r18
   1ca4a:	ba 95       	dec	r27
   1ca4c:	c9 f7       	brne	.-14     	; 0x1ca40 <__ultoa_invert+0xa2>
   1ca4e:	62 0f       	add	r22, r18
   1ca50:	73 1f       	adc	r23, r19
   1ca52:	84 1f       	adc	r24, r20
   1ca54:	95 1f       	adc	r25, r21
   1ca56:	a0 1d       	adc	r26, r0
   1ca58:	08 95       	ret

0001ca5a <_exit>:
   1ca5a:	f8 94       	cli

0001ca5c <__stop_program>:
   1ca5c:	ff cf       	rjmp	.-2      	; 0x1ca5c <__stop_program>
